WEBVTT

1
00:00:00.390 --> 00:00:04.971
We've now gone the opposite direction
from making a grouped aggregated

2
00:00:04.971 --> 00:00:08.810
chart to lots of teeny little
points on our chart hopefully.

3
00:00:10.270 --> 00:00:12.130
Let's see what we got.

4
00:00:12.130 --> 00:00:15.920
And again, there are a lots
of different ways to do this.

5
00:00:15.920 --> 00:00:19.417
We're getting more and more freedom as
we're getting more comfortable with

6
00:00:19.417 --> 00:00:23.080
these different channels, and
mappings to the property in our data.

7
00:00:23.080 --> 00:00:27.951
So, let's start out with, our first
task was to get the width on x-axis and

8
00:00:27.951 --> 00:00:29.740
the height on the y-axis.

9
00:00:29.740 --> 00:00:33.931
Yeah, so
by this point we're probably used to, and

10
00:00:33.931 --> 00:00:39.766
we're gonna put this right in our
call to plot.dot in the options here.

11
00:00:39.766 --> 00:00:44.999
We're probably used to this syntax now,
we're gonna put in the name of the channel

12
00:00:44.999 --> 00:00:50.005
that we want and then the name of the
property, so x we're gonna want the width,

13
00:00:50.005 --> 00:00:53.750
right, of each of these data
points which now we have.

14
00:00:53.750 --> 00:00:55.710
Thanks to our wrangling from before.

15
00:00:55.710 --> 00:01:00.761
Otherwise we would have to be
splitting it up as we go here, and

16
00:01:00.761 --> 00:01:06.400
then height on,
with quotes height capitalized on the y.

17
00:01:06.400 --> 00:01:12.620
if I can spell it right,
height, is that right?

18
00:01:12.620 --> 00:01:14.960
It looks weird, okay, there we go.

19
00:01:14.960 --> 00:01:19.679
All right, so now we've got some
dots on our x and y-axis, and

20
00:01:19.679 --> 00:01:25.030
we're not done yet, but
already we can see some patterns emerging.

21
00:01:25.030 --> 00:01:28.538
Does anybody notice anything jumping out?

22
00:01:33.264 --> 00:01:34.919
How about these diagonal lines?

23
00:01:36.140 --> 00:01:37.517
Since this is yeah, so

24
00:01:37.517 --> 00:01:41.802
these diagonal lines jumping out any
guesses what this is telling us?

25
00:01:45.590 --> 00:01:47.532
&gt;&gt; [INAUDIBLE]
&gt;&gt; So,

26
00:01:47.532 --> 00:01:50.200
there's it's showing us that
there's a lot of like similarities.

27
00:01:50.200 --> 00:01:51.920
There's some kind of pattern here, right?

28
00:01:51.920 --> 00:01:54.470
There's some kind of
pattern in the data set.

29
00:01:54.470 --> 00:01:58.769
What this is showing us is that
essentially you've got kind of a constant

30
00:01:58.769 --> 00:02:01.140
ratio between width and height.

31
00:02:01.140 --> 00:02:03.709
So as width goes up in certain patterns,

32
00:02:03.709 --> 00:02:08.321
the height kind of scales accordingly,
so this probably corresponds to

33
00:02:08.321 --> 00:02:12.980
certain aspect ratios that
we're noticing in the data set.

34
00:02:12.980 --> 00:02:14.370
Ratio of width to height.

35
00:02:14.370 --> 00:02:17.760
So there may be that they're not all
the same with but or height, but

36
00:02:17.760 --> 00:02:21.929
they're kind of emerging as the same ratio
which is showing us that kind of constant

37
00:02:21.929 --> 00:02:22.870
scaling factor.

38
00:02:22.870 --> 00:02:26.477
In any case as we continue to
add more detail to this plot,

39
00:02:26.477 --> 00:02:28.506
we'll be able to confirm that or

40
00:02:28.506 --> 00:02:32.880
disprove it if I'm completely wrong
which is definitely possible.

41
00:02:34.130 --> 00:02:36.130
So let's see what else can we do here?

42
00:02:36.130 --> 00:02:41.632
We can use some of the other channels
to encode different properties,

43
00:02:41.632 --> 00:02:45.100
for example, the device category.

44
00:02:45.100 --> 00:02:49.208
So what did folks use for
the device category mapping here?

45
00:02:52.100 --> 00:02:57.367
Before we use the fill, so
we could try doing that again, for

46
00:02:57.367 --> 00:03:03.270
example, not the only option,
but let's try fill device, okay?

47
00:03:03.270 --> 00:03:06.908
So now we get some more information here.

48
00:03:06.908 --> 00:03:13.829
We can see as expected that the smaller
values seem to be our mobile category.

49
00:03:15.200 --> 00:03:17.440
Believe yeah,
that was that orange one there.

50
00:03:17.440 --> 00:03:20.312
And the bigger ones are the blue for
desktop and

51
00:03:20.312 --> 00:03:23.700
we got some reds in the middle for
tablets.

52
00:03:23.700 --> 00:03:24.590
Cool, cool, cool.

53
00:03:24.590 --> 00:03:28.910
But a lot of these dots are overlapping,
so it's a little hard to see.

54
00:03:28.910 --> 00:03:36.410
So, we might wanna also be using
fill-opacity to make these transparent.

55
00:03:36.410 --> 00:03:41.483
So one thing we could do, for example,
we could set fill-opacity to a constant

56
00:03:41.483 --> 00:03:45.970
value like half, like 0.5 so
that I can see where there is overlap.

57
00:03:47.650 --> 00:03:50.240
So that's 1 option that I have.

58
00:03:50.240 --> 00:03:54.598
Or, I could use the opacity
to actually represent

59
00:03:54.598 --> 00:03:57.826
some meaningful number in the data.

60
00:03:57.826 --> 00:04:02.456
Like for example we said it would be
interesting to use that sessions value

61
00:04:02.456 --> 00:04:03.732
that we saw before.

62
00:04:03.732 --> 00:04:08.682
So what we'll notice now is that
essentially the darker a dot is,

63
00:04:08.682 --> 00:04:15.240
the more session We observed with that
resolution in that device category.

64
00:04:15.240 --> 00:04:19.522
So we can see now the way that they're
clustering, basically the darker clusters

65
00:04:19.522 --> 00:04:23.678
are similar resolutions and the darker
individual dots are where we're seeing

66
00:04:23.678 --> 00:04:27.480
a lot of sessions from the same
resolution and the same device category.

67
00:04:29.550 --> 00:04:31.080
Okay, what else can we do here?

68
00:04:31.080 --> 00:04:34.230
Well, right now all of
the dots are the same size.

69
00:04:34.230 --> 00:04:39.416
But there is a channel called R that
stands for the radius of these dots,

70
00:04:39.416 --> 00:04:44.050
which we could also use to represent,
let's say the session.

71
00:04:44.050 --> 00:04:47.809
So maybe instead of the opacity,
I want to scale up the size for

72
00:04:47.809 --> 00:04:49.990
the different number of sessions.

73
00:04:49.990 --> 00:04:51.380
Let's try this.

74
00:04:51.380 --> 00:04:53.544
Shall we?
If anybody who tried this already you'll

75
00:04:53.544 --> 00:04:54.902
know what's about to happen.

76
00:04:54.902 --> 00:04:59.264
Whoa, [LAUGH] All right
we've got some huge dots and

77
00:04:59.264 --> 00:05:03.533
some little tiny ones that
are really hard to see.

78
00:05:03.533 --> 00:05:07.971
So in this case what we're
seeing is that there are some

79
00:05:07.971 --> 00:05:11.448
really big discrepancies in our data set.

80
00:05:11.448 --> 00:05:17.174
We have some very small numbers of
sessions and some very big ones and

81
00:05:17.174 --> 00:05:22.297
what I might want to do in this
situation is scale down the kind

82
00:05:22.297 --> 00:05:28.340
of differences between those huge
numbers and the small numbers.

83
00:05:28.340 --> 00:05:33.255
So sometimes when we find that like,
information is getting obscured like this,

84
00:05:33.255 --> 00:05:35.179
like right now the big dots are so

85
00:05:35.179 --> 00:05:39.490
big that they're completely
dwarfing most of the other dots.

86
00:05:39.490 --> 00:05:44.052
What I can do is also play
with the way that I am scaling

87
00:05:44.052 --> 00:05:49.960
the mathematical values that
I'm actually visualizing.

88
00:05:49.960 --> 00:05:54.070
And so, for example,
in the reference answer,

89
00:05:54.070 --> 00:05:59.583
you'll see that what we could do
as one option to get around this,

90
00:05:59.583 --> 00:06:04.093
is to instead of plotting
the sessions value itself,

91
00:06:04.093 --> 00:06:09.700
we could actually transform it
into the log of the sessions.

92
00:06:09.700 --> 00:06:14.561
So this way, if I do this now I
get a little bit closer sizes,

93
00:06:14.561 --> 00:06:17.089
between my different dots, so

94
00:06:17.089 --> 00:06:23.700
that I don't completely lose
information about those smaller values.

95
00:06:23.700 --> 00:06:28.671
And if we want to duplicate that
again on the fill-opacity, and

96
00:06:28.671 --> 00:06:33.827
have fill-opacity also encode sessions,
now we can see with both

97
00:06:33.827 --> 00:06:39.280
the opacity of the dot and its size,
how many sessions we're seeing.

98
00:06:39.280 --> 00:06:42.980
So now we can sort of see
where the focus points emerge.

99
00:06:44.640 --> 00:06:49.844
Now what you might notice, is that in
addition to our log transformation

100
00:06:49.844 --> 00:06:54.878
here that we're doing within
a function passed into the our channel,

101
00:06:54.878 --> 00:06:59.484
you might have noticed this little
line down at the bottom here,

102
00:06:59.484 --> 00:07:04.732
which says that we want our opacity
scale to also be a logarithmic scale.

103
00:07:04.732 --> 00:07:09.866
So these are two different ways
of doing this in this case

104
00:07:09.866 --> 00:07:14.892
we're passing in this log
type to our opacity scale and

105
00:07:14.892 --> 00:07:20.593
basically telling plot to do
that logarithmic sizing for us.

106
00:07:20.593 --> 00:07:25.525
And if you'll notice if we take that
out so if we comment that line out,

107
00:07:25.525 --> 00:07:30.456
what happened is once again we lose
a lot of the detail in the lower range

108
00:07:30.456 --> 00:07:35.110
of those values because the high
values are so much bigger.

109
00:07:35.110 --> 00:07:39.718
So essentially now we're losing a lot of
information on our chart without that log

110
00:07:39.718 --> 00:07:41.240
scaling.

111
00:07:41.240 --> 00:07:44.916
So you can play around with
these type of options as well to

112
00:07:44.916 --> 00:07:48.058
create a visualization
that highlights again,

113
00:07:48.058 --> 00:07:52.366
whatever the salient information
is that you're interested in.

114
00:07:52.366 --> 00:07:57.528
And make sure that you don't obscure
away those interesting details

115
00:07:57.528 --> 00:08:02.957
by having the wrong kind of automatic or
default scale values that plot is

116
00:08:02.957 --> 00:08:08.564
just going to choose based on the the
input domain of your data and the output

117
00:08:08.564 --> 00:08:14.530
range from in this case 0 to 1 on
capacity that you have available to you.

118
00:08:14.530 --> 00:08:21.156
So just a couple of notes on making sure
that you are visualizing as much data

119
00:08:21.156 --> 00:08:27.046
as you intend to be visualizing and
not unintentionally obscuring

120
00:08:27.046 --> 00:08:32.118
some of it behind those kinds of,
off balance datasets.

121
00:08:32.118 --> 00:08:37.291
Okeydoke, let's see what else
did we say we wanted to do here.

122
00:08:37.291 --> 00:08:38.866
Tooltips right?

123
00:08:38.866 --> 00:08:44.455
So we could do that with for
example just the number of sessions or

124
00:08:44.455 --> 00:08:49.424
you might have wanted to also
display the resolution, so

125
00:08:49.424 --> 00:08:53.877
we could have contaminated
those strings together

126
00:08:53.877 --> 00:08:57.620
whatever you would like their questions.

127
00:08:57.620 --> 00:08:58.350
Yes, exactly.

128
00:08:58.350 --> 00:09:03.320
Somebody guessed at the aspect
ratios of these diagonal lines.

129
00:09:03.320 --> 00:09:07.012
Exactly and then there's some
vertical lines emerging too.

130
00:09:07.012 --> 00:09:13.336
Where we're seeing that folks have their
browser is set to a particular width that

131
00:09:13.336 --> 00:09:19.401
they use at lots of different heights,
and he guesses what's going on there.

132
00:09:22.265 --> 00:09:24.430
So we might need to dig in to be sure or

133
00:09:24.430 --> 00:09:28.567
maybe even do some more intense
user research to collect more data.

134
00:09:28.567 --> 00:09:33.325
But I would guess that maybe folks have
it like split to half their screen or

135
00:09:33.325 --> 00:09:38.467
they have it kind of minimized to the
default, whatever window width it is, and

136
00:09:38.467 --> 00:09:45.010
then they're scrolling it up and down and
dragging it longer and shorter, perhaps.

137
00:09:45.010 --> 00:09:50.919
And then we can notice that, for
example, in our desktop, blue dots,

138
00:09:50.919 --> 00:09:57.000
we see a lot of aspect ratios where
the screen is wider than it is tall.

139
00:09:57.000 --> 00:10:00.530
Whereas on mobile,
we see kind of the opposite pattern.

140
00:10:00.530 --> 00:10:05.365
These yellow dots are kind of clustered
at aspect ratios where the height is more

141
00:10:05.365 --> 00:10:08.550
than the width,
which kind of makes sense, right?

142
00:10:08.550 --> 00:10:12.005
A lot of the time we're looking
in portrait on our phones, but

143
00:10:12.005 --> 00:10:16.337
rarely on our desktops right we're not
really spinning them around so much.

144
00:10:16.337 --> 00:10:19.055
Cool so
we're already finding some insights and

145
00:10:19.055 --> 00:10:21.980
some patterns in this data
which is the whole point.

