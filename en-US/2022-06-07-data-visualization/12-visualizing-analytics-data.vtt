WEBVTT

1
00:00:00.690 --> 00:00:04.360
Okie-dokie, how did that feel?

2
00:00:04.360 --> 00:00:07.510
Hopefully, we all came up with a solution.

3
00:00:07.510 --> 00:00:13.490
There are several different ways that
we could map this array, if you will.

4
00:00:13.490 --> 00:00:16.020
So a few suggestions here in the hints.

5
00:00:16.020 --> 00:00:20.124
So, yeah, we're gonna be passing
in a function to array.map and

6
00:00:20.124 --> 00:00:25.112
we're probably gonna wanna use the split
method on our resolution strings to get

7
00:00:25.112 --> 00:00:29.130
out those two different values for
width and height.

8
00:00:29.130 --> 00:00:33.847
And then there are several
different ways that we can convert

9
00:00:33.847 --> 00:00:39.118
strings to numeric values, but
one quick and handy way is to precede

10
00:00:39.118 --> 00:00:44.860
the string with a plus operator for
quick integer numbers like this.

11
00:00:44.860 --> 00:00:48.437
So putting that all together
in the solution field,

12
00:00:48.437 --> 00:00:51.920
you can find one possible way to do this.

13
00:00:51.920 --> 00:00:55.990
There are several other ways
of course that we could find.

14
00:00:55.990 --> 00:00:58.450
So let's just paste this in here.

15
00:00:58.450 --> 00:01:03.815
So, what we've got is we
are first of all taking in each

16
00:01:03.815 --> 00:01:09.660
element in our dataset, so
each row in this data as a datum.

17
00:01:09.660 --> 00:01:15.106
You could also for example destructure
the value here to pull out the values that

18
00:01:15.106 --> 00:01:20.485
we care about, the different properties
that we have they're totally fine.

19
00:01:20.485 --> 00:01:25.383
In any case, we're probably gonna wanna
split out that resolution field on

20
00:01:25.383 --> 00:01:30.355
the X delimiter to pull it into, and
here we're using a little destructuring

21
00:01:30.355 --> 00:01:35.269
to grab the two values of the array
that's gonna result as width and height.

22
00:01:35.269 --> 00:01:40.162
And then what we're gonna return for
each element that comes in this D element,

23
00:01:40.162 --> 00:01:44.617
we're gonna return a similar looking
object that has the same device and

24
00:01:44.617 --> 00:01:45.510
resolution.

25
00:01:47.040 --> 00:01:50.450
It also has those width and height values.

26
00:01:50.450 --> 00:01:54.366
And again, we're using the plus operator
here to convert those two numbers instead

27
00:01:54.366 --> 00:01:56.290
of the original strings.

28
00:01:56.290 --> 00:02:01.990
And then we're mapping the users and
sessions over from the original again,

29
00:02:01.990 --> 00:02:05.157
using that plus operator to convert them.

30
00:02:05.157 --> 00:02:10.071
So, again this is one way of taking
care of this yours might look

31
00:02:10.071 --> 00:02:14.615
a little different,
feel free to share your solutions but

32
00:02:14.615 --> 00:02:18.260
in any case what we want to end on now.

33
00:02:18.260 --> 00:02:22.399
If we check out one of our elements and
we can do that by clicking these little

34
00:02:22.399 --> 00:02:25.028
carrots to expand In the arrays and
objects here

35
00:02:25.028 --> 00:02:28.928
we see we have the same strings for
device on resolution that's fine.

36
00:02:28.928 --> 00:02:32.383
But then we have numbers for
width height as separate columns or

37
00:02:32.383 --> 00:02:36.099
separate properties on each of these
data objects and then users and

38
00:02:36.099 --> 00:02:38.315
sessions again are no longer strings.

39
00:02:38.315 --> 00:02:41.412
So that's the important thing
that we're gonna be looking for

40
00:02:41.412 --> 00:02:44.169
in order to move on successfully
to the next exercises.

41
00:02:44.169 --> 00:02:48.061
So if you got different data formats,
if you have strings for

42
00:02:48.061 --> 00:02:51.876
any of these values,
just try copying over that solution so

43
00:02:51.876 --> 00:02:55.257
that we have the data in
the right format to press on.

44
00:02:55.257 --> 00:02:58.940
And draw some things on the screen
which is our goal here.

45
00:02:58.940 --> 00:03:03.014
All right, any questions so far?

46
00:03:03.014 --> 00:03:07.031
Again, this is just some little
lightweight data wrangling,

47
00:03:07.031 --> 00:03:11.289
it gets a lot more complex as we
deal with more intricate datasets.

48
00:03:11.289 --> 00:03:15.626
But just a taste of the type of quick
little transformations that we're gonna

49
00:03:15.626 --> 00:03:20.042
find ourselves having to do a lot as we're
working with data in the real world.

50
00:03:22.116 --> 00:03:27.370
Okie-dokie, so
I don't think there's too many questions.

51
00:03:27.370 --> 00:03:32.359
So let's move on to visualizing the data
which is our whole point of being here.

52
00:03:32.359 --> 00:03:35.703
Okay, so the first thing we
might wanna ask ourselves if

53
00:03:35.703 --> 00:03:38.904
we're looking at a data set like this is,
all right,

54
00:03:38.904 --> 00:03:44.145
I have these different device
categories; desktop, tablet, mobile.

55
00:03:44.145 --> 00:03:49.965
How many users are there that represent
each of those device categories?

56
00:03:49.965 --> 00:03:54.608
And so what we wanna do is break down
our data which is split up into all of

57
00:03:54.608 --> 00:03:59.830
the different resolutions observed for
each of the different devices types.

58
00:03:59.830 --> 00:04:04.012
What we wanna do is aggregate
that data together so

59
00:04:04.012 --> 00:04:09.106
that we get the total for
each of the different device types.

60
00:04:09.106 --> 00:04:14.458
And as we mentioned a while ago,
we have the concept in the grammar

61
00:04:14.458 --> 00:04:19.422
of graphics which is implemented
by plot of transforms which

62
00:04:19.422 --> 00:04:25.540
are ways of transforming the data and
often aggregating the data.

63
00:04:25.540 --> 00:04:31.431
In this case, we want to aggregate
data by group based on a particular

64
00:04:31.431 --> 00:04:37.134
value in the data set in this case,
the device property or column.

65
00:04:37.134 --> 00:04:42.159
And so the group transform that plot
exposes and you can read all about in

66
00:04:42.159 --> 00:04:47.122
the link documentation there,
does this type of aggregation for us?

67
00:04:47.122 --> 00:04:52.961
It essentially lets us specify
a categorical property where a categorical

68
00:04:52.961 --> 00:04:57.792
property is one where the values
are in distinct categories.

69
00:04:57.792 --> 00:05:01.566
As opposed to a continuous
property where we have for

70
00:05:01.566 --> 00:05:06.455
example the number of users is on
a continuous spectrum of numbers,

71
00:05:06.455 --> 00:05:09.750
so that would be a continuous property.

72
00:05:09.750 --> 00:05:14.761
What we're gonna do with the group
transform is tell plot, okay,

73
00:05:14.761 --> 00:05:19.862
this is a categorical variable or
a categorical property of the data

74
00:05:19.862 --> 00:05:24.353
that I want you to compute
a grouping aggregation based on.

75
00:05:24.353 --> 00:05:27.807
And so that can let us do
things like compute the sum, or

76
00:05:27.807 --> 00:05:31.504
the count, or
the proportion of values in each category.

77
00:05:31.504 --> 00:05:34.992
So plot exposes a few different
aggregation functions

78
00:05:34.992 --> 00:05:38.370
that we can use in a transform like this.

79
00:05:38.370 --> 00:05:42.470
So let's take a look at an example
of an aggregated visualization.

80
00:05:42.470 --> 00:05:45.470
Not the most exciting one but
we're gonna make it more exciting.

81
00:05:45.470 --> 00:05:51.330
So this is a bar chart that essentially
shows the total frequency in our data set.

82
00:05:51.330 --> 00:05:56.960
So the number of observations in our
data set of each of the categories.

83
00:05:56.960 --> 00:06:01.324
So we see a bar for our desktop that shows
that that is the most frequently observed

84
00:06:01.324 --> 00:06:05.580
category, mobile being the next, and
then tablet being much less frequent.

85
00:06:06.660 --> 00:06:11.940
So let's take a look at the code that
we use to build that visualization.

86
00:06:11.940 --> 00:06:16.859
You will notice a slight difference
from our last plot examples, so

87
00:06:16.859 --> 00:06:20.225
last time we saw we were
calling plot.plot and

88
00:06:20.225 --> 00:06:25.880
then passing in a marks array which
in our last example I had plot.sell.

89
00:06:25.880 --> 00:06:30.755
But we might have some other types
of marks like bar for example.

90
00:06:30.755 --> 00:06:35.500
In this example we're gonna see
a slightly different syntax

91
00:06:35.500 --> 00:06:39.160
where here we're calling the mark itself.

92
00:06:39.160 --> 00:06:43.826
So, in this case it's the bar Y,
meaning vertical bars mark,

93
00:06:43.826 --> 00:06:48.360
in our previous example
would've been plot.sell.

94
00:06:48.360 --> 00:06:52.511
So we're calling that and
then after passing in all of

95
00:06:52.511 --> 00:06:57.492
the necessary values to that,
which we'll look at in a second,

96
00:06:57.492 --> 00:07:02.403
then we're calling .plot chained
onto that call to the mark.

97
00:07:02.403 --> 00:07:09.287
So these are two different ways that you
can equally like valid ways of using plot.

98
00:07:09.287 --> 00:07:14.005
Essentially when I only have one type of
mark instead of passing in that whole

99
00:07:14.005 --> 00:07:18.943
marks array an arguably quicker way to do
it is to just call that mark directly and

100
00:07:18.943 --> 00:07:21.177
then call .plot chain after that.

101
00:07:21.177 --> 00:07:25.800
Both of them are totally valid, feel free
to rearrange the code if you find one or

102
00:07:25.800 --> 00:07:27.740
the other easier to think about.

103
00:07:29.140 --> 00:07:32.980
Okay, so what's happening inside
of our call to the bar Y mark?

104
00:07:32.980 --> 00:07:35.610
So first of all,
we're passing in the data again.

105
00:07:35.610 --> 00:07:40.510
In this case, it's called
devices because that is what we

106
00:07:40.510 --> 00:07:44.920
named the output of our
mapped wrangled array here.

107
00:07:44.920 --> 00:07:49.210
So the devices arrays
are properly wrangled data.

108
00:07:49.210 --> 00:07:53.936
The device analytics arrays are
pre-wrangled, not quite ready yet data.

109
00:07:53.936 --> 00:08:01.301
So we're gonna be using our devices data
and then we're calling as the input,

110
00:08:01.301 --> 00:08:05.764
as the options essentially for
this bar Y mark,

111
00:08:05.764 --> 00:08:10.464
we're calling plots group
transform function.

112
00:08:10.464 --> 00:08:14.227
And in this case since
we have vertical bars,

113
00:08:14.227 --> 00:08:20.320
bar Y we're calling group X meaning
across the X axis horizontally.

114
00:08:20.320 --> 00:08:23.724
That's where we wanna be defining
those different groups based

115
00:08:23.724 --> 00:08:25.370
on our categorical variable.

116
00:08:26.640 --> 00:08:28.086
So if you wanted to,

117
00:08:28.086 --> 00:08:32.771
let's say have horizontal bars
with the groupings vertically,

118
00:08:32.771 --> 00:08:39.030
you could swap those letters and call
bar X with group Y, if that makes sense.

119
00:08:39.030 --> 00:08:43.976
So essentially we wanna be
grouping on the perpendicular

120
00:08:43.976 --> 00:08:48.410
axis to the one that we want
the height of our bars.

121
00:08:48.410 --> 00:08:51.011
As we go through if folks have
questions about swapping those out,

122
00:08:51.011 --> 00:08:52.130
we can totally tackle that.

123
00:08:53.550 --> 00:08:59.208
Okay, so the way these group transforms
work is they expect an input and

124
00:08:59.208 --> 00:09:00.164
an output.

125
00:09:00.164 --> 00:09:06.270
So these transform functions,
they take an input from the data.

126
00:09:06.270 --> 00:09:11.110
In this case, we're saying the input
that we want for this calculation.

127
00:09:11.110 --> 00:09:16.980
So the the categorical variable that we're
interested in grouping by that is device.

128
00:09:18.120 --> 00:09:21.661
And because we're doing
the groupings along the X axis,

129
00:09:21.661 --> 00:09:26.899
we're gonna pass that property just as we
did before with our mappings to channels,

130
00:09:26.899 --> 00:09:30.550
we're gonna pass that into the X channel.

131
00:09:30.550 --> 00:09:33.861
And so we're gonna be grouping
on that same channel,

132
00:09:33.861 --> 00:09:38.850
that X channel that is receiving
these different device values.

133
00:09:38.850 --> 00:09:43.317
So, the second argument to this group
X call is going to be our input to

134
00:09:43.317 --> 00:09:45.020
the transform function.

135
00:09:45.020 --> 00:09:48.406
And in this case,
it's saying we want to group by device and

136
00:09:48.406 --> 00:09:50.390
we're grouping along the X axis.

137
00:09:52.230 --> 00:09:57.298
And then the output is going to be
essentially how high each of those

138
00:09:57.298 --> 00:10:03.480
vertical bars should be for
each of the different device categories.

139
00:10:03.480 --> 00:10:10.191
So that means in this case we're doing an
aggregation of the count of observations.

140
00:10:10.191 --> 00:10:13.454
Later we'll look at some different
aggregations that we could be

141
00:10:13.454 --> 00:10:16.909
using here these are kind of built
in functions that plot comes with.

142
00:10:16.909 --> 00:10:22.250
So in this case the count function is
going to say, okay, for each of these

143
00:10:22.250 --> 00:10:27.938
different devices for each of the
categories that, that variable includes,

144
00:10:27.938 --> 00:10:33.042
make the value that I care about as
the output of this group transform.

145
00:10:33.042 --> 00:10:38.144
Make that the count of observations
that I saw for that device category.

146
00:10:38.144 --> 00:10:43.301
And because again we're drawing
bars on the Y axis we want

147
00:10:43.301 --> 00:10:48.350
to map that output to the Y
channel to say I want the height

148
00:10:48.350 --> 00:10:55.026
of each of these vertical bars,
to correspond to that aggregated count.

149
00:10:55.026 --> 00:10:59.872
For each of the device categories that
I'm drawing along the X axis with

150
00:10:59.872 --> 00:11:01.500
that group X function.

151
00:11:03.190 --> 00:11:07.231
So if this takes a little while to wrap
your head around do not worry you are in

152
00:11:07.231 --> 00:11:08.077
good company.

153
00:11:08.077 --> 00:11:13.295
But essentially the important thing to
remember here is that we have the inputs

154
00:11:13.295 --> 00:11:18.370
as the second argument, and then we
have the outputs as the first argument.

155
00:11:18.370 --> 00:11:23.073
And the combination of the two is gonna
say, okay, I want you to take in this

156
00:11:23.073 --> 00:11:27.195
categorical variable and
I want you to output this aggregation.

157
00:11:29.319 --> 00:11:33.712
And then in our call to .plot
we also have those generic

158
00:11:33.712 --> 00:11:36.820
properties of the overall chart.

159
00:11:36.820 --> 00:11:39.100
So for example, the margins.

