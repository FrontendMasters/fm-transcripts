WEBVTT

1
00:00:00.160 --> 00:00:05.170
Now all of us are busy developers,
we have limited time in the day.

2
00:00:05.170 --> 00:00:10.257
We don't necessarily want to get a whole
other second career in data visualization,

3
00:00:10.257 --> 00:00:12.980
maybe some of us do and that's awesome.

4
00:00:12.980 --> 00:00:16.664
But maybe some of us just want to
kind of get up and running with

5
00:00:16.664 --> 00:00:20.800
a data visualization as quickly as
possible, so how can we do that?

6
00:00:21.980 --> 00:00:26.268
So that's why we're gonna
be using Observable today.

7
00:00:26.268 --> 00:00:28.643
Observable is an in browser,

8
00:00:28.643 --> 00:00:33.110
reactive programming environment
that is designed for

9
00:00:33.110 --> 00:00:38.500
data visualization, it can be used for
lots of other things.

10
00:00:38.500 --> 00:00:42.396
But if folks have heard of D3,
the creator of D3 Mike Bostock,

11
00:00:42.396 --> 00:00:44.778
is also the creator of Observable, and

12
00:00:44.778 --> 00:00:48.840
Observable actually started out
as a project called D3 Express.

13
00:00:48.840 --> 00:00:53.871
So it was really built from the ground
up with the intention of making

14
00:00:53.871 --> 00:00:59.230
data visualization as fast and
iterative a process as possible.

15
00:00:59.230 --> 00:01:03.432
So we're gonna look at how Observable
works when we dig into the hands

16
00:01:03.432 --> 00:01:08.144
on exercises, but essentially you have
some code cells they're called, so

17
00:01:08.144 --> 00:01:10.960
you'll enter basically JavaScript.

18
00:01:10.960 --> 00:01:14.160
In this case it's essentially,
we're just going to be using a declarative

19
00:01:14.160 --> 00:01:16.700
library for
data visualization called plot.

20
00:01:16.700 --> 00:01:21.039
And then, above that code you'll
see the latest iteration of

21
00:01:21.039 --> 00:01:24.400
whatever code you have entered below.

22
00:01:24.400 --> 00:01:28.719
And that also comes with these sort
of instant interactive inputs,

23
00:01:28.719 --> 00:01:33.718
so essentially HTML inputs that are really
quick and easy out of the box that you

24
00:01:33.718 --> 00:01:37.453
can then use to make interactive
visualizations as well.

25
00:01:37.453 --> 00:01:42.275
So essentially, the reason that
we're using Observable is because A,

26
00:01:42.275 --> 00:01:47.900
it's JavaScript, and so hopefully should
be pretty quick to get up and running in.

27
00:01:47.900 --> 00:01:52.467
B, it is all in browser so you can tinker
with things right in your browser without

28
00:01:52.467 --> 00:01:56.720
having to install anything or set
anything up in terms of dev environment.

29
00:01:56.720 --> 00:02:02.180
And because it has this reactive,
it's sort of based on functional reactive

30
00:02:02.180 --> 00:02:07.060
programming, it has this reactive
instant feedback environment.

31
00:02:07.060 --> 00:02:11.135
And that makes it really easy to
iterate on your visualizations and

32
00:02:11.135 --> 00:02:14.920
tweak them to get them
just how you'd like them.

33
00:02:14.920 --> 00:02:18.716
And so, we're gonna be walking through
some step by step exercises later in

34
00:02:18.716 --> 00:02:19.690
Observable.

35
00:02:19.690 --> 00:02:22.687
We won't need to learn too much
about Observable and how it works,

36
00:02:22.687 --> 00:02:26.100
I will explain just a couple of
features that we're gonna wanna know.

37
00:02:26.100 --> 00:02:29.642
But there's also plenty of links in
the materials if you wanna dig deeper

38
00:02:29.642 --> 00:02:30.230
with that.

39
00:02:31.810 --> 00:02:35.062
Okay, and so
the first thing we're gonna need to do or

40
00:02:35.062 --> 00:02:38.749
the zero thing, I guess I should
say that we're gonna need to

41
00:02:38.749 --> 00:02:43.340
do if we want to visualize some data is,
have some data [LAUGH] to visualize.

42
00:02:43.340 --> 00:02:48.653
So we're not gonna cover too much in
detail how to collect data, process it,

43
00:02:48.653 --> 00:02:53.721
ingest it, because that could be a whole
other workshop in and of itself,

44
00:02:53.721 --> 00:02:59.830
or not just workshop, but an entire
career of data engineering as it were.

45
00:02:59.830 --> 00:03:02.812
But let's suffice it to say that for
working with data and

46
00:03:02.812 --> 00:03:06.978
observable notebooks, much like working
with data in JavaScript in general,

47
00:03:06.978 --> 00:03:09.430
there are a few different
ways we can do it.

48
00:03:09.430 --> 00:03:14.395
One thing we can do is upload a local
file, maybe I have a JSON file or

49
00:03:14.395 --> 00:03:18.690
a CSV file with some small
data set that I care about.

50
00:03:18.690 --> 00:03:21.089
I can upload that to
an Observable notebook and

51
00:03:21.089 --> 00:03:23.220
look at it right in the notebook.

52
00:03:23.220 --> 00:03:26.092
So we're gonna look at some examples for

53
00:03:26.092 --> 00:03:30.230
our projects here as sort of
an easy way to get started.

54
00:03:30.230 --> 00:03:35.459
But also if you choose, you could sign
up for an account and kind of upload

55
00:03:35.459 --> 00:03:41.230
your own files to be visualizing the data
set that you in particular care about.

56
00:03:42.260 --> 00:03:45.668
The other thing we can do is connect
to files in the cloud like for

57
00:03:45.668 --> 00:03:50.450
example Google Spreadsheets or sheets in
Microsoft OneDrive or something like that.

58
00:03:50.450 --> 00:03:54.630
So, if you have a team that uses
kinda cloud providers like that,

59
00:03:54.630 --> 00:03:59.798
you can connect to some files there, so
that you can really quickly show your boss

60
00:03:59.798 --> 00:04:05.118
a very impressive visualization of your
team's quarterly data or whatever it is.

61
00:04:05.118 --> 00:04:08.584
You can also connect to data
directly from databases.

62
00:04:08.584 --> 00:04:12.493
So this is true in Observable,
you can connect to a database, maybe you

63
00:04:12.493 --> 00:04:17.280
have a MySQL or Postgres database that
has some data you wanna visualize.

64
00:04:17.280 --> 00:04:18.121
But similarly,

65
00:04:18.121 --> 00:04:22.143
if you were building this into your apps,
you might have some connection to your

66
00:04:22.143 --> 00:04:26.000
database on the server side that then
you're visualizing in the front end.

67
00:04:27.020 --> 00:04:31.209
And finally, you might be fetching data
live from some API, whether internal or

68
00:04:31.209 --> 00:04:31.835
external.

69
00:04:31.835 --> 00:04:35.264
For example, we saw some data
earlier from the GitHub API, and

70
00:04:35.264 --> 00:04:38.390
we're also gonna be looking
at some of that later.

71
00:04:38.390 --> 00:04:41.826
So, again we're not I'm gonna be covering
in detail how to grab data from these

72
00:04:41.826 --> 00:04:45.472
different sources, but there are links in
the materials if you wanna read more about

73
00:04:45.472 --> 00:04:47.160
how to do that in Observable.

74
00:04:47.160 --> 00:04:51.253
And then of course in terms of how
to do that in general in JavaScript,

75
00:04:51.253 --> 00:04:55.065
it's gonna depend a lot on what
environment you are working on,

76
00:04:55.065 --> 00:04:59.033
where your data lives,
what databases you have connected, etc.

77
00:04:59.033 --> 00:05:02.119
So once you've got the data,
which is step zero,

78
00:05:02.119 --> 00:05:05.939
then you're gonna want to get it
into a shape that is useful for

79
00:05:05.939 --> 00:05:10.440
you and the questions that
you're trying to ask that data.

80
00:05:10.440 --> 00:05:13.250
And that is often called data wrangling,

81
00:05:13.250 --> 00:05:18.320
it could also be thought of as kind
of transforming data, reshaping data.

82
00:05:18.320 --> 00:05:23.324
All of these words are kind of things you
might see around the data viz ecosystem.

83
00:05:23.324 --> 00:05:28.116
But so in terms of data wrangling, what
we're trying to do here is we have some

84
00:05:28.116 --> 00:05:30.845
raw data that came in
whatever format from,

85
00:05:30.845 --> 00:05:35.073
let's say the API response or
the way it's stored in the database.

86
00:05:35.073 --> 00:05:39.379
Or the way it was in the CSV file
my boss sent me, whatever it is.

87
00:05:39.379 --> 00:05:43.870
But in order to answer the questions that
I'm interested in, I might need it in

88
00:05:43.870 --> 00:05:48.610
a slightly different format,
a slightly different shape, as it were.

89
00:05:48.610 --> 00:05:52.257
And so
that's where we're gonna be doing a lot

90
00:05:52.257 --> 00:05:57.038
of processing on that data in
most of our day to day use cases.

91
00:05:57.038 --> 00:06:02.538
Data wrangling is kind of a really
the fundamental prerequisite to being able

92
00:06:02.538 --> 00:06:08.206
to make an effective visualization, is
getting the data into a shape that plays

93
00:06:08.206 --> 00:06:15.030
nicely with the type of visualization to
answer the question that you care about.

94
00:06:15.030 --> 00:06:16.337
So, in our case,

95
00:06:16.337 --> 00:06:22.360
what we gonna be wrangling with today are
just some basic built in array methods.

96
00:06:22.360 --> 00:06:25.704
So things like filter and
map, super handy for

97
00:06:25.704 --> 00:06:28.973
some basic data wrangling, reduce as well.

98
00:06:28.973 --> 00:06:33.704
So we're gonna take a look at one example
of just doing some minor data wrangling on

99
00:06:33.704 --> 00:06:37.903
this, but again, data wrangling could
be its whole own workshop here.

100
00:06:37.903 --> 00:06:42.260
And there are some other really
great tools and libraries for

101
00:06:42.260 --> 00:06:47.310
kind of more advanced,
more complex data wrangling use cases.

102
00:06:47.310 --> 00:06:51.719
And plot itself has a little bit of
that stuff baked in, so there are some

103
00:06:51.719 --> 00:06:57.180
transformations that we'll be able to
do within our visualization library.

104
00:06:57.180 --> 00:07:01.685
The same is true of D3, so if you go
on and get deeper into the world of D3,

105
00:07:01.685 --> 00:07:05.710
you'll learn some more data
wrangling skills with that as well.

106
00:07:07.290 --> 00:07:12.407
So if folks haven't worked much with array
methods like filter and map, I like to

107
00:07:12.407 --> 00:07:17.392
explain them with what I have adapted
to this filter, map, reduce sandwich.

108
00:07:17.392 --> 00:07:22.280
So filter is going to be our handy
dandy way of basically only looking

109
00:07:22.280 --> 00:07:24.611
at the stuff that we care about.

110
00:07:24.611 --> 00:07:29.700
So imagine, I've got an array
of let's say ingredients, and

111
00:07:29.700 --> 00:07:36.231
I want to exclude from my final goal,
which is a beautiful visualized sandwich,

112
00:07:36.231 --> 00:07:40.762
I want to exclude the veggies
I guess that I don't like.

113
00:07:40.762 --> 00:07:44.477
And we'll just pretend for the sake of
this example that I don't like onions and

114
00:07:44.477 --> 00:07:48.264
cucumbers, even though that is false for
me personally, but let's go with it.

115
00:07:48.264 --> 00:07:51.209
So I can filter out the things
that I don't care about.

116
00:07:51.209 --> 00:07:54.795
Now in real life when we're visualizing
things, it's probably not gonna be

117
00:07:54.795 --> 00:07:57.717
vegetables unless we are working
in retail at a grocery store,

118
00:07:57.717 --> 00:07:59.332
in which case it totally might be.

119
00:07:59.332 --> 00:08:04.276
But what we're going to be doing is, for
example, filtering out let's say we're

120
00:08:04.276 --> 00:08:08.130
trying to make a visualization
of different users, devices.

121
00:08:08.130 --> 00:08:10.921
And we in this case,
don't care about desktop devices,

122
00:08:10.921 --> 00:08:15.690
we're just interested in mobile, so
we might be filtering out data like that.

123
00:08:15.690 --> 00:08:19.628
Then what we might be doing is
needing to map from let's say,

124
00:08:19.628 --> 00:08:24.743
these whole veggies that we have passed
through our filter to sliced veggies.

125
00:08:24.743 --> 00:08:29.375
So I might have some kind of chop
function or something like that,

126
00:08:29.375 --> 00:08:35.360
that I'm gonna pass into my map method and
apply to each element in my data set.

127
00:08:35.360 --> 00:08:37.849
So now,
instead of having these whole ingredients,

128
00:08:37.849 --> 00:08:40.720
I end up with some chopped ingredients.

129
00:08:40.720 --> 00:08:45.607
And then in some cases, we're gonna
need to aggregate our data, meaning pull

130
00:08:45.607 --> 00:08:50.199
it together and create operations like
doing a sum of values in a data set or

131
00:08:50.199 --> 00:08:52.830
averages and things like that.

132
00:08:52.830 --> 00:08:57.480
And often that'll be baked into our
visualization tools, for example,

133
00:08:57.480 --> 00:09:02.656
plot has some handy transformations that
are called we're gonna look at later for

134
00:09:02.656 --> 00:09:06.869
doing things like creating aggregations,
like sums and counts.

135
00:09:06.869 --> 00:09:10.882
But in other cases, we might need to
do that in our pre-processing step,

136
00:09:10.882 --> 00:09:14.269
in our data wrangling step and
reduce is super handy for that.

137
00:09:14.269 --> 00:09:19.189
So in this case, I might be taking
a bunch of sliced veggies, so elements in

138
00:09:19.189 --> 00:09:24.342
an array and reducing them with some kind
of layer function into a single item,

139
00:09:24.342 --> 00:09:29.449
a single sandwich where they're all
stacked together, smushed together.

140
00:09:29.449 --> 00:09:34.914
And what we might be doing in a data
viz use case is, for example,

141
00:09:34.914 --> 00:09:42.830
taking a bunch of similar observations and
summing up their values, for example.

142
00:09:42.830 --> 00:09:47.237
So these are some of the questions
that you'll need to be asking yourself

143
00:09:47.237 --> 00:09:52.077
before you even try to start visualizing
the data is, does the data that I have,

144
00:09:52.077 --> 00:09:53.104
is it in a shape?

145
00:09:53.104 --> 00:09:58.044
Is it in a format that is going to
make my life easier when I try to

146
00:09:58.044 --> 00:10:00.630
paint it onto the screen?

147
00:10:00.630 --> 00:10:04.115
If not, am I going to be able
to do the transformations

148
00:10:04.115 --> 00:10:08.685
that I need to do at the visualization
step or are those things that I'm

149
00:10:08.685 --> 00:10:13.109
going to need to do in the pre-processing
and the wrangling phase?

150
00:10:13.109 --> 00:10:16.235
And so this is gonna be different
in different use cases.

151
00:10:16.235 --> 00:10:20.187
But the point I wanna make here is just
that this is an important question to

152
00:10:20.187 --> 00:10:24.267
be asking ourselves, do I need to do
additional wrangling on this data to get

153
00:10:24.267 --> 00:10:25.890
it into a convenient format?

154
00:10:27.950 --> 00:10:32.544
Okay, and so in terms of what
are convenient formats for

155
00:10:32.544 --> 00:10:37.141
many visualization libraries and
plot in particular,

156
00:10:37.141 --> 00:10:42.246
a format called tidy data is
a really nice format to work with.

157
00:10:42.246 --> 00:10:43.683
So what is tidy data?

158
00:10:43.683 --> 00:10:49.827
Tidy data means,
that you have one row in your data set for

159
00:10:49.827 --> 00:10:54.821
each observation, and
you have one column for

160
00:10:54.821 --> 00:11:01.440
each feature of that observation
that you care about.

161
00:11:01.440 --> 00:11:04.454
And that means that every value that you

162
00:11:04.454 --> 00:11:08.845
care about essentially gets
its own cell in the data set.

163
00:11:08.845 --> 00:11:13.059
So let's take a look at an example
of some data that is not tidy.

164
00:11:13.059 --> 00:11:18.096
Here I have some population data or
perhaps this is health data,

165
00:11:18.096 --> 00:11:21.081
we have some cases per population, so

166
00:11:21.081 --> 00:11:25.677
maybe I'm looking at some
cases of a particular disease.

167
00:11:25.677 --> 00:11:30.561
And what we have is some
confounding rows here.

168
00:11:30.561 --> 00:11:35.429
So I'll notice that I have two rows here
for each combination of a country and

169
00:11:35.429 --> 00:11:36.150
a year.

170
00:11:36.150 --> 00:11:39.373
So I have two rows for
Afghanistan in 1999, two rows for

171
00:11:39.373 --> 00:11:42.060
Afghanistan in 2000, etc.

172
00:11:42.060 --> 00:11:46.659
And that's because I have two
different types of observations.

173
00:11:46.659 --> 00:11:49.769
One is for cases where I get a count here,
and another is for

174
00:11:49.769 --> 00:11:52.490
population where I get a different count.

175
00:11:52.490 --> 00:11:53.261
But the thing is,

176
00:11:53.261 --> 00:11:56.720
this isn't tidy because again, we said
we wanna have one row per observation.

177
00:11:56.720 --> 00:12:00.494
And we want every value that we
care about to get its own cell,

178
00:12:00.494 --> 00:12:04.786
which means that every feature that
we care about, and in this case,

179
00:12:04.786 --> 00:12:09.600
it seems like we care about the cases
observation and the population as well.

180
00:12:10.620 --> 00:12:15.271
Each of those should really have its own
column so that we don't have this weird

181
00:12:15.271 --> 00:12:20.630
type column where it's really just
selecting between two different features.

182
00:12:20.630 --> 00:12:23.653
So instead,
if we turn this into tidy data,

183
00:12:23.653 --> 00:12:28.392
what we get is a more concise table
like this, where we have one row for

184
00:12:28.392 --> 00:12:32.014
each observation of a given
country in a given year.

185
00:12:32.014 --> 00:12:36.418
And then we have two separate columns,
cases and population.

186
00:12:36.418 --> 00:12:41.317
So instead of this sort of confusing
type column and the count column,

187
00:12:41.317 --> 00:12:46.010
we'll have a value of cases and
a value of population.

188
00:12:46.010 --> 00:12:49.644
So this is one example of we
might need to do some reshaping,

189
00:12:49.644 --> 00:12:54.410
some wrangling to get data from
a non-tidy format into a tidy format.

190
00:12:54.410 --> 00:12:59.449
But then again, the most ideal format for
your data is going to depend on what

191
00:12:59.449 --> 00:13:04.770
question you're asking and
what visualization you're trying to build?

192
00:13:04.770 --> 00:13:10.202
So the the crucial point is that we need
to be looking at this critically and

193
00:13:10.202 --> 00:13:14.845
asking ourselves before we even
try to draw any colors or bars or

194
00:13:14.845 --> 00:13:19.421
lines or what have you,
does my data have a convenient shape?

195
00:13:19.421 --> 00:13:23.619
Once we've got data wrangled, then we
can actually do the data visualization.

196
00:13:23.619 --> 00:13:26.109
Notice that we're several
steps in at this point.

197
00:13:26.109 --> 00:13:30.683
Visualization is sort of the part that
comes after you've done all of this

198
00:13:30.683 --> 00:13:32.027
housekeeping work.

199
00:13:32.027 --> 00:13:35.740
And so the process of visualization,

200
00:13:35.740 --> 00:13:40.845
we can sort of think of as
the process of transforming

201
00:13:40.845 --> 00:13:45.377
values in the space of
the data set that I have.

202
00:13:45.377 --> 00:13:50.222
Which are essentially going
to be numeric values on some

203
00:13:50.222 --> 00:13:53.220
kind of domain, we might call it.

204
00:13:53.220 --> 00:13:55.978
Some spread of numeric values,

205
00:13:55.978 --> 00:14:01.630
transforming those into values
in the graphic on the screen.

206
00:14:01.630 --> 00:14:05.208
So that might be pixels of width,
or it might be colors,

207
00:14:05.208 --> 00:14:08.569
or it might be other features
of the visualization.

208
00:14:08.569 --> 00:14:13.942
And we're going to use a function
that we call a scale to essentially

209
00:14:13.942 --> 00:14:20.274
map from the values in the data set to the
values on the screen that we care about.

210
00:14:20.274 --> 00:14:23.049
And so this is what that looks like.

211
00:14:23.049 --> 00:14:26.755
Essentially, what we have is we
have some values in the data space.

212
00:14:26.755 --> 00:14:30.085
Which again,
if we think back to kind of math class and

213
00:14:30.085 --> 00:14:34.526
functions having a domain of input
values and a range of output values,

214
00:14:34.526 --> 00:14:38.398
the data space is going to be our domain,
so our input values.

215
00:14:38.398 --> 00:14:42.557
In this case, maybe we have
values going from 0 to 10,000,

216
00:14:42.557 --> 00:14:46.071
that's not really the values here,
just for example.

217
00:14:46.071 --> 00:14:50.922
And then we're going to transform
those via a scale function into values

218
00:14:50.922 --> 00:14:55.880
in the visual space, the range or
the output of this scaling function.

219
00:14:55.880 --> 00:14:59.892
So in this case, we might have a certain
number of pixels to work with on our

220
00:14:59.892 --> 00:15:04.100
screen, or we might have a certain number
of colors in a spectrum that we wanna

221
00:15:04.100 --> 00:15:06.650
use to visualize different values.

222
00:15:06.650 --> 00:15:10.612
So this is really one of the core,
core, core things.

223
00:15:10.612 --> 00:15:13.923
If there's only one thing
to take away from today,

224
00:15:13.923 --> 00:15:19.313
it's essentially that visualization is
all about understanding how your scaling

225
00:15:19.313 --> 00:15:24.395
functions map features from your data,
in the space in which the data exists,

226
00:15:24.395 --> 00:15:29.990
to features in your visualization, in the
space in which the visualization exists.

227
00:15:29.990 --> 00:15:35.177
So on the one hand, we have these abstract
values in the data set and then on

228
00:15:35.177 --> 00:15:40.965
the other hand, we have these concrete
values on the screen, pixels and things.

229
00:15:41.975 --> 00:15:44.150
Okay, so
that is what we're gonna be looking at.

230
00:15:44.150 --> 00:15:48.439
Today is essentially how we
can map different features of

231
00:15:48.439 --> 00:15:50.951
the data to different channels.

232
00:15:50.951 --> 00:15:54.880
We're gonna learn that vocab
term in the visualization,

233
00:15:54.880 --> 00:16:00.024
using these scales, as essentially
functions to do that transformation.

