WEBVTT

1
00:00:00.300 --> 00:00:03.350
Okay, so how are we feeling?

2
00:00:03.350 --> 00:00:05.248
Hopefully by this point,

3
00:00:05.248 --> 00:00:10.350
our plotting is starting to feel
a little bit second nature.

4
00:00:10.350 --> 00:00:15.960
So again, there are lots of different
ways you could have drawn this dot plot.

5
00:00:15.960 --> 00:00:19.280
But let's look at my reference solution.

6
00:00:19.280 --> 00:00:20.790
Just one way of doing it.

7
00:00:20.790 --> 00:00:25.425
This is basically just what's
right in the solution button.

8
00:00:25.425 --> 00:00:31.707
So this is what I came up with,
yours might look different,

9
00:00:31.707 --> 00:00:40.013
but the important part is we have the
timestamp feature or column on the x axis.

10
00:00:40.013 --> 00:00:42.890
So that's why we see these
little dates coming across.

11
00:00:42.890 --> 00:00:46.070
And again, that's just a way of
sequencing these different requests.

12
00:00:46.070 --> 00:00:49.557
So we've got the timestamps
across the x axis, and

13
00:00:49.557 --> 00:00:53.299
then we have the duration of
each request on the y axis.

14
00:00:53.299 --> 00:00:57.560
Where higher is longer and
therefore probably worse, right?

15
00:00:57.560 --> 00:01:02.050
So what we can see already is that
we have some kind of outliers up

16
00:01:02.050 --> 00:01:06.646
here that took a really long time,
30 seconds, to come back.

17
00:01:06.646 --> 00:01:11.089
But we also seem to have a lot of
points that came back pretty quickly.

18
00:01:11.089 --> 00:01:16.160
And then there's a sort of gradual
trailing off in the middle there.

19
00:01:16.160 --> 00:01:19.587
And then, if we add in a couple of
other channels, so for example,

20
00:01:19.587 --> 00:01:24.000
we could use the color, the fill for
each of these dots to indicate the path.

21
00:01:24.000 --> 00:01:28.091
We immediately see that a lot of
these dots are the same color.

22
00:01:28.091 --> 00:01:32.105
And I've added some tooltips so that we
can see more metadata about each of these,

23
00:01:32.105 --> 00:01:35.380
which you maybe you did or
maybe you want to play around with later.

24
00:01:36.420 --> 00:01:42.199
And what we can see is that it's this
files search path that is accounting for

25
00:01:42.199 --> 00:01:44.800
a huge amount of these requests.

26
00:01:44.800 --> 00:01:47.710
So it looks like that is
a really popular path.

27
00:01:47.710 --> 00:01:52.224
And, as we noticed from the color of
these really long responses here,

28
00:01:52.224 --> 00:01:56.682
it's also maybe one that we want to
take a look at performance-wise.

29
00:01:56.682 --> 00:01:58.870
Cuz we got some slow responses happening.

30
00:01:58.870 --> 00:02:01.602
But there are also a few other paths,

31
00:02:01.602 --> 00:02:06.550
like some of these user files seem
to also be taking a little while.

32
00:02:06.550 --> 00:02:10.783
So again, if we're using
this to understand what some

33
00:02:10.783 --> 00:02:14.107
of our performance steps might look like.

34
00:02:14.107 --> 00:02:18.936
And maybe some of the endpoints that
we might want to try to spruce up

35
00:02:18.936 --> 00:02:23.867
a little bit speedwise,
that is already some useful information.

36
00:02:23.867 --> 00:02:26.984
And again,
just having kind of a title string.

37
00:02:26.984 --> 00:02:31.887
Where here I'm just joining together a
bunch of little snippets of information on

38
00:02:31.887 --> 00:02:35.380
different lines,
is a handy way to be able to dig in there.

39
00:02:35.380 --> 00:02:39.025
So we've already got an arguably
interactive plot here.

40
00:02:39.025 --> 00:02:44.739
But let's make it even more
interactive with some user controls,

41
00:02:44.739 --> 00:02:49.137
to determine what data is
visualized in this plot.

42
00:02:49.137 --> 00:02:52.688
So before we dig into those,
does anybody have any questions?

43
00:02:52.688 --> 00:02:57.011
Again, keeping in mind that this is
just one way to create this dot plot.

44
00:02:57.011 --> 00:02:58.884
There are lots of possibilities here,

45
00:02:58.884 --> 00:03:01.336
as we've seen with all
these different channels.

46
00:03:04.321 --> 00:03:07.518
Seems like everybody is doing pretty good.

47
00:03:07.518 --> 00:03:11.390
So let us press ahead and
talk about interactivity.

48
00:03:12.470 --> 00:03:17.316
So what we're gonna do in our project
here, now that we've got a baseline

49
00:03:17.316 --> 00:03:22.610
plot to work with, is we're gonna
add some interactive input widgets.

50
00:03:22.610 --> 00:03:26.407
Now, since we're working
in an observable notebook,

51
00:03:26.407 --> 00:03:31.230
we can take advantage of some handy
dandy ready-to-go HTML widget.

52
00:03:31.230 --> 00:03:34.830
That Observable exposes as
something called inputs.

53
00:03:34.830 --> 00:03:38.326
So you can read through in the link's
documentation if you want to learn more

54
00:03:38.326 --> 00:03:41.180
about which different types
of inputs are available.

55
00:03:41.180 --> 00:03:44.500
There's also a handy little sidebar here.

56
00:03:44.500 --> 00:03:50.324
If you click on this little tiny plot
icon, you'll see a bunch of options for

57
00:03:50.324 --> 00:03:55.798
different inputs that you can click on and
insert into your notebooks.

58
00:03:55.798 --> 00:03:57.702
If you're working within Observable.

59
00:03:57.702 --> 00:04:02.659
But essentially these are just kinda
spruced up HTML widgets that give

60
00:04:02.659 --> 00:04:05.530
us different types of controls.

61
00:04:05.530 --> 00:04:10.242
So for example,
we've already seen the table input,

62
00:04:10.242 --> 00:04:13.628
which I call by typing inputs.table.

63
00:04:13.628 --> 00:04:16.924
And then passing in
an array of data objects,

64
00:04:16.924 --> 00:04:22.762
which then gives me this kinda nice
little human readable, scrollable table.

65
00:04:22.762 --> 00:04:26.150
Similar to like if I was scrolling through
a spreadsheet or something like that.

66
00:04:26.150 --> 00:04:28.420
So that's one example we've seen already.

67
00:04:28.420 --> 00:04:30.600
Now let's take a look at a couple others.

68
00:04:30.600 --> 00:04:36.160
So for example,
there is an Inputs.checkbox widget,

69
00:04:36.160 --> 00:04:40.548
which we can pass in
an array of options too.

70
00:04:40.548 --> 00:04:44.804
So here I've got some
Roy G Biv kind of colors here.

71
00:04:44.804 --> 00:04:49.271
And then we can pass in some configuration
properties that are optional, like for

72
00:04:49.271 --> 00:04:53.234
example I can add a label to say, okay,
these are the colors that I like.

73
00:04:53.234 --> 00:04:57.510
And then I can choose different
colors that I am a fan of.

74
00:04:59.000 --> 00:05:06.000
And you'll notice here that, as opposed to
our previous cells where we could assign

75
00:05:06.000 --> 00:05:12.721
a name to a value by essentially using
kind of a modified JavaScript syntax here.

76
00:05:12.721 --> 00:05:17.297
Where we're not declaring a let or const
variable, but we're giving it a name and

77
00:05:17.297 --> 00:05:18.901
then putting an equal sign.

78
00:05:18.901 --> 00:05:23.074
And that's how we can name
cell values in Observable.

79
00:05:23.074 --> 00:05:30.000
For interactive cells, like inputs,
there's a special operator called Vviewof.

80
00:05:30.000 --> 00:05:32.273
Which when we put that in
front of the cell name.

81
00:05:32.273 --> 00:05:36.797
Basically gives us
a reactive way to respond to

82
00:05:36.797 --> 00:05:41.785
the user's changes to this
value by capturing it in

83
00:05:41.785 --> 00:05:46.890
an object called whatever
we're naming that cell.

84
00:05:46.890 --> 00:05:49.010
So in this case, favColors.

85
00:05:49.010 --> 00:05:52.176
So I'm not gonna go too much into
the details of how Observable works or

86
00:05:52.176 --> 00:05:53.740
what these viewof operators are.

87
00:05:53.740 --> 00:05:57.286
There's a links to the documentation
if you want to use Observable more.

88
00:05:57.286 --> 00:06:01.314
But for now, suffice it to say
that when I use this viewof

89
00:06:01.314 --> 00:06:05.884
favColors equals inputs.whatever,
in this case checkbox.

90
00:06:05.884 --> 00:06:10.723
favColors is going to become
the value currently selected

91
00:06:10.723 --> 00:06:13.470
of those checkbox options.

92
00:06:13.470 --> 00:06:18.393
So that means favColors in this case is
going to give me an array of the selected

93
00:06:18.393 --> 00:06:19.010
colors.

94
00:06:19.010 --> 00:06:23.453
So you'll notice that,
as I Interact with this input,

95
00:06:23.453 --> 00:06:28.380
it is going to update that
favColors array correspondingly.

96
00:06:29.420 --> 00:06:32.659
Now, because Observable's
environment is reactive.

97
00:06:32.659 --> 00:06:39.630
What that means is that any cells that are
using that favColors object, that value,

98
00:06:39.630 --> 00:06:45.465
are going to reactively update
anytime the favColors value changes.

99
00:06:45.465 --> 00:06:48.677
So if you'll notice in this cell below or

100
00:06:48.677 --> 00:06:53.879
these couple cells below,
I have some cells that use this value.

101
00:06:53.879 --> 00:06:56.756
So in this case we're just mapping
over the favColors array and

102
00:06:56.756 --> 00:06:59.640
capitalizing everything,
uppercasing everything.

103
00:06:59.640 --> 00:07:02.200
And then the bottom when we have a string,

104
00:07:02.200 --> 00:07:07.040
that's sort of expressing these
favColors as prose, as it were.

105
00:07:07.040 --> 00:07:10.435
And if we take a look
at these two strings,

106
00:07:10.435 --> 00:07:15.190
as I change the values we see
that they reactively update.

107
00:07:16.465 --> 00:07:18.564
So this is a fun thing about Observable,

108
00:07:18.564 --> 00:07:22.289
is that it comes with these inputs
out of the box and they're reactive.

109
00:07:22.289 --> 00:07:26.887
So that means we can hook one of
these inputs, like checkboxes for

110
00:07:26.887 --> 00:07:28.818
example, up to our chart.

111
00:07:28.818 --> 00:07:34.107
And make the chart redraw and
change essentially what data is displayed,

112
00:07:34.107 --> 00:07:40.810
based on the values that a user has
selected in, let's say, a checkbox input.

113
00:07:40.810 --> 00:07:44.973
So that is exactly what
we're going to do next.

