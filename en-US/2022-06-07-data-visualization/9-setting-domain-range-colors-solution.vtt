WEBVTT

1
00:00:00.686 --> 00:00:05.517
Okay, let's see how we implemented
these additional channels.

2
00:00:05.517 --> 00:00:11.195
So if you open the Hints button here,
you might have been had your memory,

3
00:00:11.195 --> 00:00:14.492
refreshed that the fill opacity channel,

4
00:00:14.492 --> 00:00:18.628
I'll just wanna spell like
this with the camel case.

5
00:00:18.628 --> 00:00:26.009
And the the other channel that we want for
the outlines is just like in SVG stroke.

6
00:00:26.009 --> 00:00:31.763
So, and again remembering to put commas,
very difficult.

7
00:00:31.763 --> 00:00:34.201
Let's see how we mapped these.

8
00:00:34.201 --> 00:00:40.824
Can maybe folks in the in person audience
walk me through this, David or Julie?

9
00:00:40.824 --> 00:00:45.257
So for the for
the first task we had to map the opacity

10
00:00:45.257 --> 00:00:48.468
to the length of time each test took.

11
00:00:48.468 --> 00:00:52.143
So yeah, David
&gt;&gt; Yeah, so we can just do the key as fill

12
00:00:52.143 --> 00:00:55.366
opacity, like you said and
then just map it to minutes.

13
00:00:55.366 --> 00:01:00.506
&gt;&gt; Boom and so now, Uh-huh,
beautiful, thank you so much.

14
00:01:00.506 --> 00:01:05.790
So now we have essentially the longer
the test took to run, the darker it is.

15
00:01:05.790 --> 00:01:10.704
We were talking in the chat about
making the features that we want to

16
00:01:10.704 --> 00:01:15.548
jump out have the most salient
properties in the visualization.

17
00:01:15.548 --> 00:01:20.292
So in this case, we're probably interested
in any really long running test jobs,

18
00:01:20.292 --> 00:01:24.583
perhaps because that's a bottleneck
that we wanna look at in more detail.

19
00:01:24.583 --> 00:01:28.017
So using the fill opacity
where higher durations have

20
00:01:28.017 --> 00:01:32.225
darker cells that jump out at us is
maybe what we want in this case.

21
00:01:32.225 --> 00:01:37.298
If it was something else where maybe
we want the shortest test to jump

22
00:01:37.298 --> 00:01:43.617
out we could reverse again like overriding
the default mappings of those domains and

23
00:01:43.617 --> 00:01:47.550
ranges, we could change
that direction as it were.

24
00:01:47.550 --> 00:01:52.300
Okay, and then we noticed again that we
have some of these zero duration cells

25
00:01:52.300 --> 00:01:56.978
where since we've lost all opacity now
we don't know what color they were,

26
00:01:56.978 --> 00:01:59.976
we don't know what their
conclusion status is,

27
00:01:59.976 --> 00:02:03.805
so Jelenia, maybe wanna help
us walk through that solution?

28
00:02:03.805 --> 00:02:08.713
&gt;&gt; Add a channel under
the fill opacity for stroke,

29
00:02:08.713 --> 00:02:12.314
and then the value can be any color.

30
00:02:12.314 --> 00:02:14.124
I just chose black.

31
00:02:14.124 --> 00:02:17.894
&gt;&gt; Okay, so one thing we could do
is put in a constant like this and

32
00:02:17.894 --> 00:02:20.082
have each of them kind of outlined.

33
00:02:20.082 --> 00:02:23.233
And this might be a visual
choice that we make.

34
00:02:23.233 --> 00:02:28.069
But the other thing that we
could do using exactly the same

35
00:02:28.069 --> 00:02:32.806
approach is we could actually
re-encode the success or

36
00:02:32.806 --> 00:02:37.863
failure state, which we have
saved in our data set in that.

37
00:02:37.863 --> 00:02:42.696
So we had already encoded this in the film
channel as the conclusion values.

38
00:02:42.696 --> 00:02:47.914
So this is a great example of how to
use a constant in our visualizations

39
00:02:47.914 --> 00:02:53.399
which is often really useful for
example in when we're adding outlines or

40
00:02:53.399 --> 00:02:57.927
maybe we want all of certain
property to have the same value.

41
00:02:57.927 --> 00:03:02.815
We can also make it dynamic in the same
way that we did with the fill channel

42
00:03:02.815 --> 00:03:05.551
by mapping it to the conclusion as well.

43
00:03:05.551 --> 00:03:10.956
So totally up to you and your use case,
how we wanna be doing that.

44
00:03:10.956 --> 00:03:12.940
Awesome, thanks so much folks.

45
00:03:12.940 --> 00:03:17.725
So for example, if we do map the stroke
channel to the conclusion values

46
00:03:17.725 --> 00:03:22.113
then we'll see that some of these
zero durations were canceled so

47
00:03:22.113 --> 00:03:25.702
maybe they just got cancelled
before it even ran, and

48
00:03:25.702 --> 00:03:29.493
one of them maybe immediately
errored out for example.

49
00:03:29.493 --> 00:03:33.164
Okay questions, comments, concerns?

50
00:03:34.683 --> 00:03:40.272
All right, so
we have one more exercise to do.

51
00:03:40.272 --> 00:03:44.388
And that is to take our now
pretty informative plot and

52
00:03:44.388 --> 00:03:49.328
make it even super more informative and
a little bit interactive

53
00:03:49.328 --> 00:03:54.450
by adding tooltips to each cell so
that we can see the exact values of

54
00:03:54.450 --> 00:03:59.409
the duration and the conclusion status for
each of those cells.

55
00:03:59.409 --> 00:04:01.651
And plot exposes a channel for that.

56
00:04:01.651 --> 00:04:05.726
It's called, Title, just like we're
adding a title to an element.

57
00:04:05.726 --> 00:04:13.396
So we can use the title channel to
add text tooltips to each cell.

58
00:04:13.396 --> 00:04:18.772
And what we're gonna do in order to
set the values for the title channel,

59
00:04:18.772 --> 00:04:23.974
is instead of passing in a single
string where we have either the name of

60
00:04:23.974 --> 00:04:29.617
a field have the data or a constant value
like we just saw in the last example,

61
00:04:29.617 --> 00:04:32.649
we can also with plot pass in functions.

62
00:04:32.649 --> 00:04:36.868
So we can pass in a function
that tells plot, hey,

63
00:04:36.868 --> 00:04:42.494
on this channel take in each data
point and using that data point and

64
00:04:42.494 --> 00:04:47.519
whatever values are exposed
as properties on that object,

65
00:04:47.519 --> 00:04:54.273
cuz each of these data points is one of
those elements in that JavaScript array.

66
00:04:54.273 --> 00:04:59.738
Use those properties to come up with
the value for this particular channel.

67
00:04:59.738 --> 00:05:00.718
So that is our task.

68
00:05:00.718 --> 00:05:07.116
Our last task of this project is to
figure out how to add a title channel.

69
00:05:07.116 --> 00:05:12.394
With a custom function and there
are some hints in the hint button that

70
00:05:12.394 --> 00:05:17.501
gives an informative string about
the details of that data point.

71
00:05:17.501 --> 00:05:20.352
And there's plenty of flexibility here so

72
00:05:20.352 --> 00:05:23.768
you might wanna include
the test conclusion word.

73
00:05:23.768 --> 00:05:28.727
You might wanna include the duration
in minutes you might wanna include

74
00:05:28.727 --> 00:05:32.870
your name or some other fun thing
you wanna spice it up with.

75
00:05:32.870 --> 00:05:37.361
But essentially by adding a custom
function we can put in whatever we want as

76
00:05:37.361 --> 00:05:39.370
the value of this title channel.

77
00:05:39.370 --> 00:05:43.290
So let's take a few more minutes and
finish up this project.

