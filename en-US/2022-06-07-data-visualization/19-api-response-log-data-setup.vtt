WEBVTT

1
00:00:00.000 --> 00:00:03.341
So we are about to dig into our third and

2
00:00:03.341 --> 00:00:08.151
final project notebook,
how fast are API responses?

3
00:00:08.151 --> 00:00:12.956
Once again, you can access this from the
other materials that we've been looking at

4
00:00:12.956 --> 00:00:17.422
by clicking that Data Visualization First
Steps at the top by the square icon,

5
00:00:17.422 --> 00:00:19.804
and then navigating to it in the sidebar.

6
00:00:19.804 --> 00:00:22.867
And I've also dropped the link.

7
00:00:22.867 --> 00:00:27.555
So we are going to pour
through another data set.

8
00:00:27.555 --> 00:00:29.073
For this exercise,

9
00:00:29.073 --> 00:00:34.963
we're going to be looking at the type of
data that we might find in our API logs,

10
00:00:34.963 --> 00:00:39.895
or we might be able, better said,
to wrangle out of our API logs.

11
00:00:39.895 --> 00:00:44.720
So what we're gonna be looking
at in this exercise is some

12
00:00:44.720 --> 00:00:49.545
data about different responses
served by a fictional API

13
00:00:49.545 --> 00:00:54.382
at different endpoints for
different paths requested.

14
00:00:54.382 --> 00:00:59.997
And what the code was, what the status
code was for that response,

15
00:00:59.997 --> 00:01:05.322
and how long each of those took,
so what the response time was.

16
00:01:05.322 --> 00:01:09.483
And so again, we're gonna kind of
pretend that we've already done

17
00:01:09.483 --> 00:01:12.915
whatever wrangling we need to
do on our raw API logs to get

18
00:01:12.915 --> 00:01:16.490
the information that we
care about out of them.

19
00:01:16.490 --> 00:01:21.339
Because this is a course in data
visualization and not data wrangling for

20
00:01:21.339 --> 00:01:22.859
data visualization.

21
00:01:22.859 --> 00:01:26.641
So we're just gonna assume that
we've already done that step.

22
00:01:26.641 --> 00:01:31.629
But in your own life, you might find
yourself needing to pour through your

23
00:01:31.629 --> 00:01:36.133
log data and doing some filtering and
maybe doing some mapping or,

24
00:01:36.133 --> 00:01:40.088
again, reshaping that data as
we saw in the last example.

25
00:01:40.088 --> 00:01:46.480
But in this case, we get the jumpstart
with this apiLogData.json file.

26
00:01:46.480 --> 00:01:49.253
So once again,
we're going back to the JSON format.

27
00:01:49.253 --> 00:01:54.082
And here, we have parsed out
this file attachment as JSON.

28
00:01:54.082 --> 00:01:58.731
And in just one additional step
here as a little wrangling step,

29
00:01:58.731 --> 00:02:02.620
we have some string timestamps
in our original data.

30
00:02:02.620 --> 00:02:06.179
And so what we're doing is
we're taking those timestamps,

31
00:02:06.179 --> 00:02:08.774
which were in the file, they were strings.

32
00:02:08.774 --> 00:02:13.098
And we are just converting
them to actual date objects so

33
00:02:13.098 --> 00:02:18.806
that we can plot them on a date scale
instead of as just different strings.

34
00:02:18.806 --> 00:02:21.140
In any case, this is all done for you.

35
00:02:21.140 --> 00:02:28.262
So we've got this apiLogData array with
all of our data that we care about in it.

36
00:02:28.262 --> 00:02:29.086
And, again,

37
00:02:29.086 --> 00:02:33.496
we're throwing that into a little table
here just to have a browse through.

38
00:02:33.496 --> 00:02:38.317
So we can see that we've got
a duration here in milliseconds.

39
00:02:38.317 --> 00:02:44.845
And then we've got the status code of the
response, unfortunately, not always 200.

40
00:02:44.845 --> 00:02:51.679
And we have the path of the, again,
fictional API endpoint that was requested,

41
00:02:51.679 --> 00:02:55.915
and then the timestamp
that that request came in.

42
00:02:56.945 --> 00:02:59.629
So that is what we're dealing with here.

43
00:02:59.629 --> 00:03:04.277
And what we're gonna be focusing on in
this project is actually adding some

44
00:03:04.277 --> 00:03:07.835
interactivities, adding some
controls to our charts.

45
00:03:07.835 --> 00:03:11.405
We've already done a little bit
of that with our title tooltips.

46
00:03:11.405 --> 00:03:15.780
But in this one, we're going to
actually look at some more input

47
00:03:15.780 --> 00:03:21.050
controls that we could add to our
charts to add more interactivity.

48
00:03:21.050 --> 00:03:25.680
So first of all, let's create a chart
that we can then add interactivity to.

49
00:03:25.680 --> 00:03:30.950
So we're going to create another dot plot,
which we just got some experience with.

50
00:03:30.950 --> 00:03:35.432
So this time, not so many training
wheels on [LAUGH] this exercise.

51
00:03:35.432 --> 00:03:41.405
We're gonna try to stretch
again our plotting

52
00:03:41.405 --> 00:03:47.378
muscles that we've been
working out today and

53
00:03:47.378 --> 00:03:55.972
create a dot plot showing the response
to each different request.

54
00:03:55.972 --> 00:03:59.442
Where we're gonna have time on the x-axis,
so

55
00:03:59.442 --> 00:04:02.755
those timestamp values across the x-axis.

56
00:04:02.755 --> 00:04:07.549
And then duration, and again, those
values are milliseconds on the y-axis.

57
00:04:08.640 --> 00:04:12.060
And we're not particularly
caring about the actual,

58
00:04:12.060 --> 00:04:15.046
when exactly each of
these requests happened.

59
00:04:15.046 --> 00:04:18.607
But they give us a way of
sequencing the data in order so

60
00:04:18.607 --> 00:04:22.340
that we can see over time
whatever trends we might have.

61
00:04:22.340 --> 00:04:25.704
So if you don't like seeing those
date labels along the bottom,

62
00:04:25.704 --> 00:04:28.588
you could suppress them, but
you can also leave them.

63
00:04:28.588 --> 00:04:30.520
And so there's some suggestions here.

64
00:04:30.520 --> 00:04:35.147
We might, for example, also distinguish
different paths in the requests

65
00:04:35.147 --> 00:04:38.378
because we do have a lot
of different endpoints, but

66
00:04:38.378 --> 00:04:42.780
we also have a lot of the same endpoint
being hit over and over again.

67
00:04:42.780 --> 00:04:48.353
So we could use the color of
the dots to encode that property,

68
00:04:48.353 --> 00:04:52.740
and we can then see what
patterns emerge there.

69
00:04:52.740 --> 00:04:56.828
Like for example, you'll find that
some of those endpoints account for

70
00:04:56.828 --> 00:04:57.842
a lot of traffic.

71
00:04:57.842 --> 00:05:02.534
And then you also might want to mess with
the opacity there if you're having a hard

72
00:05:02.534 --> 00:05:05.760
time distinguishing different data points.

73
00:05:05.760 --> 00:05:07.095
So at this point,

74
00:05:07.095 --> 00:05:12.500
we have all the tools under our belt
that we need to create this dot plot.

75
00:05:12.500 --> 00:05:14.390
So I will let you get creative with it.

76
00:05:14.390 --> 00:05:16.290
Have fun with the different channels.

77
00:05:16.290 --> 00:05:19.832
And there are some hints,
but not really that many, so

78
00:05:19.832 --> 00:05:24.532
you can also refer back to the previous
exercise dot plot to get started or

79
00:05:24.532 --> 00:05:26.860
just to copy over the basic syntax.

