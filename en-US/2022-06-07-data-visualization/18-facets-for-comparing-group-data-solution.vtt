WEBVTT

1
00:00:00.060 --> 00:00:05.244
Let's see how this faceting
operation went, shall we?

2
00:00:05.244 --> 00:00:10.111
Insert, I don't know, bling joke here
about diamonds having facets or something,

3
00:00:10.111 --> 00:00:12.691
gonna have to work on
my stand-up material.

4
00:00:12.691 --> 00:00:18.619
All right, so we said that in
order to add facets to our chart,

5
00:00:18.619 --> 00:00:23.293
it's a matter of adding
this facet property with

6
00:00:23.293 --> 00:00:29.123
a configuration object into
the config options of the plot.

7
00:00:29.123 --> 00:00:33.414
Which when we're using this
syntax where we do plot.mark,

8
00:00:33.414 --> 00:00:37.377
in this case dot, and
then .plot, it'll come there.

9
00:00:37.377 --> 00:00:42.633
And in the previous syntax that we
looked at where we called plot.plot and

10
00:00:42.633 --> 00:00:48.330
then passed in a mark's array can just
come in that general call to plot.

11
00:00:48.330 --> 00:00:52.060
So, all right,
what we're gonna wanna do here is, again,

12
00:00:52.060 --> 00:00:55.073
remember to add commas,
very difficult for me.

13
00:00:55.073 --> 00:01:00.408
[LAUGH] We'll specify that
we want to facet this plot.

14
00:01:00.408 --> 00:01:05.646
And then we are going to always
tell the facet operation what

15
00:01:05.646 --> 00:01:11.002
data we want to base our splitting or
faceting operation on.

16
00:01:11.002 --> 00:01:16.110
And in this case,
it is the same devices data that we've

17
00:01:16.110 --> 00:01:20.900
been using for our marks,
so the same dataset here.

18
00:01:22.230 --> 00:01:26.587
And then we pass in
the mapping of the feature of

19
00:01:26.587 --> 00:01:30.050
the dataset that we want to split on,

20
00:01:30.050 --> 00:01:34.876
which in this case is the Device category,
right?

21
00:01:34.876 --> 00:01:40.173
We tell then the faceting operation
which channel we want it to split on.

22
00:01:40.173 --> 00:01:45.040
So in this case, we could try the x-axis.

23
00:01:45.040 --> 00:01:50.428
So once I've done that,
we go from having this single dot plot to,

24
00:01:50.428 --> 00:01:55.816
if I press my little Play button
here to evaluate my new facet code,

25
00:01:55.816 --> 00:02:02.530
we'll see three different dot plots that
have each of them just one single color.

26
00:02:02.530 --> 00:02:09.093
Well, more or less, we've got some
overlapping data points here based

27
00:02:09.093 --> 00:02:15.997
on those data points that have higher
values than we allowed for in our axes.

28
00:02:15.997 --> 00:02:19.899
But that's okay, we'll breeze on by that.

29
00:02:19.899 --> 00:02:26.321
So here we've got these three side by
side plots, desktop, mobile, and tablet.

30
00:02:26.321 --> 00:02:28.197
And now, since we don't have so

31
00:02:28.197 --> 00:02:33.271
much overlap between the different device
categories, we can see some of the points,

32
00:02:33.271 --> 00:02:37.669
especially on the less frequently
used devices, like mobile and tablet.

33
00:02:37.669 --> 00:02:43.241
We can see some of the points that were
a little bit obscured by the other data,

34
00:02:43.241 --> 00:02:47.031
by the desktop data,
in the original plot, right?

35
00:02:47.031 --> 00:02:51.699
So for example, some of these red
dots here that are in this landscape

36
00:02:51.699 --> 00:02:55.642
orientation where the width
is higher than the height, so

37
00:02:55.642 --> 00:02:58.940
the width is bigger than the height.

38
00:02:58.940 --> 00:03:06.840
Those are more easily identifiable now
that we've split the plots up by device.

39
00:03:06.840 --> 00:03:10.640
And did anybody else tries splitting
across the y-axis instead?

40
00:03:11.880 --> 00:03:15.329
So if we wanna play around with that,
we can try that as well.

41
00:03:15.329 --> 00:03:18.116
And your mileage varies.

42
00:03:18.116 --> 00:03:23.913
Depending on what your data looks like and
on what your output format looks like,

43
00:03:23.913 --> 00:03:28.533
how much real estate you have in
your dashboard or what have you.

44
00:03:28.533 --> 00:03:34.292
You might wanna choose one or the other
to give folks a better visual experience

45
00:03:34.292 --> 00:03:40.770
based on the specifics of your dataset and
where you're putting these graphics.

46
00:03:40.770 --> 00:03:43.887
But in this case, I don't know,
which one do folks prefer?

47
00:03:43.887 --> 00:03:48.327
I think it's a little bit more readable
in the x direction, I'm seeing some nods.

48
00:03:48.327 --> 00:03:52.759
But maybe we have different perceptions,
that is entirely valid.

49
00:03:52.759 --> 00:03:57.291
And that's why having the possibility to
customize these things is so important,

50
00:03:57.291 --> 00:04:00.993
because every person is different and
every dataset is different.

51
00:04:00.993 --> 00:04:04.490
But for now, let's say x-axis is fine.

52
00:04:04.490 --> 00:04:08.065
Awesome, so please interrupt
me if there are any questions.

53
00:04:08.065 --> 00:04:12.411
But otherwise, we have successfully
finished our second project.

54
00:04:12.411 --> 00:04:17.264
So we wrangled some data using
a basic map operation, but still,

55
00:04:17.264 --> 00:04:22.665
we made ourselves think about exactly
what we needed to be visualizing.

56
00:04:22.665 --> 00:04:26.391
Like, for example, the width and
height each taking their own channel,

57
00:04:26.391 --> 00:04:28.845
made sense for us to wrangle that out.

58
00:04:28.845 --> 00:04:31.295
Okay, so just to continue
our recap of this project.

59
00:04:31.295 --> 00:04:36.401
So we did some data wrangling to make our
lives easier in the visualization step.

60
00:04:36.401 --> 00:04:40.274
Although, again, we can do some transforms
in the visualization step as well.

61
00:04:40.274 --> 00:04:45.125
So your comfort with,
let's say, using functions to

62
00:04:45.125 --> 00:04:50.397
transform strings to numbers
in the plot is totally valid,

63
00:04:50.397 --> 00:04:55.051
versus doing it beforehand
with the map operation.

64
00:04:55.051 --> 00:04:58.890
Your mileage may vary, so
whatever feels best to you, go for it.

65
00:04:58.890 --> 00:05:04.161
Then we took a look at aggregation by
means of group transforms in plot.

66
00:05:04.161 --> 00:05:07.922
Which we can use with categorical
variables to create aggregation

67
00:05:07.922 --> 00:05:12.151
operations, like, for example,
summing up all of the users observed for

68
00:05:12.151 --> 00:05:13.980
a particular device category.

69
00:05:15.260 --> 00:05:18.965
And then we saw a new type of mark,
the .mark,

70
00:05:18.965 --> 00:05:24.095
which we used to create an informative
plot, a scattered plot or

71
00:05:24.095 --> 00:05:30.935
dot plot of different device categories
using all these different channels, fill,

72
00:05:30.935 --> 00:05:36.261
opacity, radius, R,
to convey different features of the data.

73
00:05:36.261 --> 00:05:37.133
And finally,

74
00:05:37.133 --> 00:05:42.004
we took a look at faceting as a means of
revealing some of those details that might

75
00:05:42.004 --> 00:05:47.036
get obscured if we're smushing all of
the data together into one visualization.

76
00:05:47.036 --> 00:05:51.612
And highlighting the perhaps
harder to notice features from,

77
00:05:51.612 --> 00:05:55.410
especially some of the smaller
subsets of the data,

78
00:05:55.410 --> 00:05:59.745
by putting each category of
device in its own smaller plot.

