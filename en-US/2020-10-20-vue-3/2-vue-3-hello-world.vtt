WEBVTT

1
00:00:00.170 --> 00:00:03.290
Well, without further ado,
let's get started learning Vue.

2
00:00:03.290 --> 00:00:03.970
I'm such a nerd.

3
00:00:03.970 --> 00:00:06.607
I made this because I love you so much.

4
00:00:06.607 --> 00:00:11.422
[LAUGH] So I'm really excited to
talk to you about Vue today, thanks.

5
00:00:11.422 --> 00:00:17.740
All right, let's start with the first
section of directives and data rendering.

6
00:00:17.740 --> 00:00:21.423
Before we start, in case you skip
the intro, I do that sometimes.

7
00:00:21.423 --> 00:00:27.560
[LAUGH] There is a GitHub link here to
the repo, which is sdras/intro-to-vue.

8
00:00:27.560 --> 00:00:29.850
We have a lot of links in that Readme.

9
00:00:29.850 --> 00:00:32.208
And here are the devtools that
we're working with today.

10
00:00:34.649 --> 00:00:37.160
So let's talk about the Vue instance.

11
00:00:38.200 --> 00:00:42.160
We have this kind of obligatory
Hello world example here.

12
00:00:42.160 --> 00:00:46.260
So we've got this div id app with
a message in Mustache templates and

13
00:00:46.260 --> 00:00:48.150
it says Nice to meet Vue.

14
00:00:48.150 --> 00:00:54.850
So if we go over to our Babel babble,
we can see our JavaScript tab.

15
00:00:54.850 --> 00:00:59.450
We can see what we're doing is
we're mounting to a div id of app.

16
00:00:59.450 --> 00:01:01.520
And then we're passing in message.

17
00:01:02.790 --> 00:01:05.680
Inside data,
this message is getting piped in.

18
00:01:05.680 --> 00:01:07.310
So it's saying Hello world.

19
00:01:07.310 --> 00:01:09.940
I could also say Hello folks.

20
00:01:09.940 --> 00:01:14.870
And as soon as CodePen updates,
we'll update to Hello folks.

21
00:01:14.870 --> 00:01:19.630
So really we're establishing
a relationship with whatever we're holding

22
00:01:19.630 --> 00:01:22.850
here in Vue and this HTML.

23
00:01:22.850 --> 00:01:25.310
And it's not necessarily
important that it's an app right?

24
00:01:25.310 --> 00:01:29.854
I could say robot face, and then robot

25
00:01:29.854 --> 00:01:35.210
face, And it will go and grab that piece.

26
00:01:35.210 --> 00:01:36.610
Of course, the styling fell off.

27
00:01:36.610 --> 00:01:40.830
But you can see right here that you can
really establish a relationship with any

28
00:01:42.190 --> 00:01:43.330
piece of that app.

29
00:01:43.330 --> 00:01:45.470
So you could use any kind of selector.

30
00:01:45.470 --> 00:01:49.350
I like to use an ID because you only
really want one instance of that.

31
00:01:49.350 --> 00:01:51.750
But it's really flexible that way.

32
00:01:51.750 --> 00:01:55.800
I'm bringing this up in part because
it is called the progressive framework

33
00:01:55.800 --> 00:01:58.040
in part because it's easy to migrate to.

34
00:01:58.040 --> 00:02:01.780
You can literally just add a script tag,
grab an ID, and

35
00:02:01.780 --> 00:02:05.390
start working with Vue the way that in
the olden days we might have worked with

36
00:02:05.390 --> 00:02:06.930
jQuery or something like that.

37
00:02:06.930 --> 00:02:09.628
You don't need a build
process necessarily.

38
00:02:12.052 --> 00:02:16.372
So let's do a light comparison,
Vanilla JavaScript versus Vue for

39
00:02:16.372 --> 00:02:18.520
conditional rendering.

40
00:02:18.520 --> 00:02:22.390
So in Vanilla JavaScript, let's say we
have this array of items in this array.

41
00:02:22.390 --> 00:02:26.420
It could be a manifest file that's
coming in from a server, who knows, and

42
00:02:26.420 --> 00:02:28.816
it's a really important array of items.

43
00:02:28.816 --> 00:02:32.650
It's thingy, other thingy,
lots of stuff, yada yada.

44
00:02:32.650 --> 00:02:36.160
And I have this function
that's listOfStuff.

45
00:02:36.160 --> 00:02:37.640
I'm gonna build the full_list.

46
00:02:37.640 --> 00:02:42.280
So I'm gonna map through all of these and
create a new array of lis.

47
00:02:42.280 --> 00:02:47.140
And then I'm going to go into the DOM,
find the document.querySelector.

48
00:02:47.140 --> 00:02:49.800
I'm gonna find something
called the container and

49
00:02:49.800 --> 00:02:55.960
then in that contain.innerHTML, I'm gonna
output that ul with a bunch of lis.

50
00:02:55.960 --> 00:02:57.860
Then I call that function.

51
00:02:57.860 --> 00:03:00.410
And I also have to put
the container on the page so

52
00:03:00.410 --> 00:03:02.520
that I have something to access.

53
00:03:02.520 --> 00:03:06.940
And that yields ta-da,
this amazing list of stuff, right?

54
00:03:06.940 --> 00:03:10.080
In Vue,
let's look at what that would look like.

55
00:03:10.080 --> 00:03:14.660
In our app, we have data where
we're returning a bunch of items.

56
00:03:14.660 --> 00:03:18.800
So we have those same items, but
this time, we're holding those items.

57
00:03:18.800 --> 00:03:21.350
We're holding the state
of those items in data.

58
00:03:22.750 --> 00:03:29.390
In our HTML, we have our div id app,
a ul, and we say li v-for item in items.

59
00:03:29.390 --> 00:03:32.080
And that yields this.

60
00:03:32.080 --> 00:03:35.050
What I love about this is
how declarative it is.

61
00:03:35.050 --> 00:03:39.430
When you look at that code,
it's immediately legible what's going on.

62
00:03:39.430 --> 00:03:41.100
I'm holding an array.

63
00:03:41.100 --> 00:03:46.300
I'm outputting it to the page, and
I know exactly where it's being inserted.

64
00:03:46.300 --> 00:03:49.630
The other thing about it that I
really like is we're holding a state.

65
00:03:49.630 --> 00:03:52.950
Unlike in olden days where
the DOM would hold the state and

66
00:03:52.950 --> 00:03:55.780
you're kind of always pinging
the DOM like, hey, what's going on?

67
00:03:55.780 --> 00:03:57.360
Did you change this?

68
00:03:57.360 --> 00:03:58.230
Hey, what's going on?

69
00:03:58.230 --> 00:04:00.150
Did this update?

70
00:04:00.150 --> 00:04:01.530
We're holding a state instead.

71
00:04:01.530 --> 00:04:03.870
And we're telling the DOM
what to do with that.

72
00:04:03.870 --> 00:04:08.950
So we really have better finite control
over what's going on with the state of our

73
00:04:08.950 --> 00:04:12.520
application and
where that is getting added to.

74
00:04:13.860 --> 00:04:16.170
So I like it because it's clean.

75
00:04:16.170 --> 00:04:20.400
I can really write semantic HTML very
easily because I'm still working with

76
00:04:20.400 --> 00:04:24.300
those HTML tags in a way that is kind of

77
00:04:24.300 --> 00:04:29.600
still those HTML right directly
in the HTML templates.

78
00:04:29.600 --> 00:04:30.770
It's really declarative.

79
00:04:30.770 --> 00:04:32.140
I mentioned that before.

80
00:04:32.140 --> 00:04:33.690
It's super legible.

81
00:04:33.690 --> 00:04:36.000
And because of that,
it's easy to maintain.

82
00:04:36.000 --> 00:04:37.190
It's also reactive.

83
00:04:37.190 --> 00:04:41.161
We're gonna go into this whole section
about what reactivity means and

84
00:04:41.161 --> 00:04:43.420
why that's different in Vue 3.

85
00:04:43.420 --> 00:04:47.880
But what you need to know for now is
reactivity is really helpful because

86
00:04:47.880 --> 00:04:51.320
a lot of premises and
reactivity is responding to changes.

87
00:04:51.320 --> 00:04:53.910
And that's what a lot of
application development is.

88
00:04:53.910 --> 00:04:56.560
It's responding to changes in a state.

89
00:04:58.170 --> 00:04:59.970
So we've got these directives.

90
00:04:59.970 --> 00:05:03.090
So here are some of
the directives that Vue offers us.

91
00:05:03.090 --> 00:05:04.770
If you came from an Angular background,

92
00:05:04.770 --> 00:05:08.160
again, this will probably
look very familiar to you.

93
00:05:08.160 --> 00:05:09.581
And for each one of these,

94
00:05:09.581 --> 00:05:13.205
I linked them up to the part of
the docs in case you need to know more.

