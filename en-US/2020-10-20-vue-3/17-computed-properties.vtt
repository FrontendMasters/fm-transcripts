WEBVTT

1
00:00:00.408 --> 00:00:04.152
Computed properties are calculations
that will be cached, and

2
00:00:04.152 --> 00:00:06.810
will only be updated when needed.

3
00:00:06.810 --> 00:00:08.610
I said before that
the model was my favorite.

4
00:00:08.610 --> 00:00:11.090
This is maybe my favorite,
it is the favorite.

5
00:00:11.090 --> 00:00:12.590
Computed properties are so

6
00:00:12.590 --> 00:00:17.390
powerful, and I really think that this
is one reason why I keep coming back to

7
00:00:17.390 --> 00:00:22.090
view it's really highly performance,
but use it with some understanding.

8
00:00:22.090 --> 00:00:26.952
So this is the simplest possible
computed example I could show you.

9
00:00:26.952 --> 00:00:28.770
We're gonna start with really simple and

10
00:00:28.770 --> 00:00:34.040
then we're gonna dive into some
kind of bigger use cases as well.

11
00:00:34.040 --> 00:00:38.280
So if I have this thing called user data,
and it's a string, and

12
00:00:38.280 --> 00:00:41.130
I have a computed
property called greeting.

13
00:00:41.130 --> 00:00:45.540
If I say my name here,
the initial entry is Sarah, and

14
00:00:45.540 --> 00:00:48.320
the computer value is You're a monster,
Sarah!

15
00:00:48.320 --> 00:00:51.305
Now what's the difference
between these two?

16
00:00:51.305 --> 00:00:56.005
The computed property is giving
us a new view onto that data.

17
00:00:56.005 --> 00:00:59.035
So I'm not mutating user data.

18
00:00:59.035 --> 00:01:01.665
I'm not changing user data in any way.

19
00:01:01.665 --> 00:01:06.855
But I'm able to do something with user
data and return a different value to it.

20
00:01:06.855 --> 00:01:11.645
That's slightly different from
what that initial value was.

21
00:01:11.645 --> 00:01:16.335
And this greeting will
only be recalculated or

22
00:01:16.335 --> 00:01:20.670
re evaluated if this .userData changes.

23
00:01:20.670 --> 00:01:22.710
So it's really, really performant.

24
00:01:22.710 --> 00:01:26.832
The other piece of this,
is that let's open it up in CodePen,

25
00:01:26.832 --> 00:01:28.530
so you can see it just
a little bit better.

26
00:01:30.290 --> 00:01:34.110
The other piece of this is,
I'm not using this like a method,

27
00:01:34.110 --> 00:01:37.880
even though it kind of looks like
a method, actually we'll stay in here.

28
00:01:37.880 --> 00:01:39.890
Even though it looks like a method,
we have the data,

29
00:01:39.890 --> 00:01:42.010
and then we had the methods.

30
00:01:42.010 --> 00:01:43.780
And now we have this computed area.

31
00:01:44.930 --> 00:01:48.915
This computed area,
even though it looks similar,

32
00:01:48.915 --> 00:01:53.454
is returning something that
I'm gonna use like I use data.

33
00:01:53.454 --> 00:01:56.300
I'm gonna use it in my template somehow.

34
00:01:56.300 --> 00:01:59.440
Or I could use it in another function or
something else.

35
00:01:59.440 --> 00:02:03.266
But the big basic thing here
is you're taking a thing and

36
00:02:03.266 --> 00:02:06.207
you have a new view on
to that piece of data.

37
00:02:06.207 --> 00:02:09.790
So I have my user data,
and I have my greeting.

38
00:02:09.790 --> 00:02:16.010
And this greeting is returning
a different view of that userData.

39
00:02:16.010 --> 00:02:17.450
So let's go a little bit further.

40
00:02:18.510 --> 00:02:22.390
Computed properties run only when
a dependency has changed, so

41
00:02:22.390 --> 00:02:24.220
they're really performant.

42
00:02:24.220 --> 00:02:28.148
Methods run whenever an update occurs.

43
00:02:28.148 --> 00:02:29.786
Computer properties are cached.

44
00:02:29.786 --> 00:02:33.265
And this is really important, because if
you start to use them a lot and you want

45
00:02:33.265 --> 00:02:36.975
them to be reevaluated all over the place,
like why didn't it get re-evaluated?

46
00:02:36.975 --> 00:02:39.205
It's because the dependency
wasn't changed.

47
00:02:39.205 --> 00:02:41.660
So that might not be the right thing.

48
00:02:41.660 --> 00:02:44.950
Even though it's really awesome, it might
not be the right thing for everything and

49
00:02:44.950 --> 00:02:46.910
methods might be what you need,

50
00:02:46.910 --> 00:02:49.300
if you need something to
not be cached in that way.

51
00:02:50.800 --> 00:02:55.090
Computed properties should be used in
place of a property, in place of data.

52
00:02:56.210 --> 00:03:00.078
Whereas methods are typically
invoked from the on or ad or

53
00:03:00.078 --> 00:03:03.392
an event that can be
invoked from another thing.

54
00:03:03.392 --> 00:03:05.290
They're kind of more like functions.

55
00:03:05.290 --> 00:03:09.280
You can use methods in a way that's
similar to computer properties, and

56
00:03:09.280 --> 00:03:11.910
I'll go into that further later.

57
00:03:11.910 --> 00:03:17.810
But this is not, they aren't really
intended for the same thing, right?

58
00:03:17.810 --> 00:03:21.800
Computed properties are v-on to that data.

59
00:03:21.800 --> 00:03:25.980
By default, the computer properties
define a getter only, but

60
00:03:25.980 --> 00:03:27.180
you can also define a setter.

61
00:03:27.180 --> 00:03:29.990
This will probably make more sense
to you when we start to dive

62
00:03:29.990 --> 00:03:31.810
into the reactivity section.

63
00:03:31.810 --> 00:03:33.550
And I kind of go into view internals.

64
00:03:34.780 --> 00:03:36.523
Whereas methods are getter and setter.

65
00:03:39.363 --> 00:03:44.106
So if you want to search a title here,
you can do so by saying,

66
00:03:44.106 --> 00:03:48.290
How I Met Your Mother,
and these kind of things.

67
00:03:48.290 --> 00:03:51.580
And you can see how quickly
that's updating, right?

68
00:03:51.580 --> 00:03:55.890
I didn't add another library for
this at all.

69
00:03:55.890 --> 00:03:58.760
If you're familiar with React,
there's a library called downshift.

70
00:03:58.760 --> 00:04:03.260
You don't have to load a thing like
downshift in order to create this.

71
00:04:03.260 --> 00:04:06.960
You can see how quickly you can
filter through large amounts of data

72
00:04:06.960 --> 00:04:08.580
without any dependencies.

73
00:04:08.580 --> 00:04:12.820
But this is really a very big
strength of computed properties,

74
00:04:12.820 --> 00:04:14.860
if we have filtered films.

75
00:04:14.860 --> 00:04:19.750
So the first thing that I'm gonna do
is I'm gonna use some RegEx to match.

76
00:04:19.750 --> 00:04:22.580
And the reason I'm doing that is
because I don't really want case

77
00:04:22.580 --> 00:04:23.800
sensitivity here, right?

78
00:04:23.800 --> 00:04:27.470
I don't wanna have to say, w with a big W,

79
00:04:27.470 --> 00:04:32.040
I wanna be able to match those
things regardless of capitalization.

80
00:04:32.040 --> 00:04:37.114
And then I'm filtering to
find the matches between

81
00:04:37.114 --> 00:04:41.721
this .filterText which is a v-model input.

82
00:04:41.721 --> 00:04:47.040
This is an empty string here,
so I'm capturing this input.

83
00:04:47.040 --> 00:04:50.820
And I'm going to filter all of this data

84
00:04:50.820 --> 00:04:55.830
based on how it matches to ratingsInfo.

85
00:04:55.830 --> 00:04:59.820
So you can filter large amounts
of data really fast and

86
00:04:59.820 --> 00:05:02.090
very performantly with
a computed property.

87
00:05:02.090 --> 00:05:06.258
It makes for really nice search
implementations and things like that.

88
00:05:10.421 --> 00:05:14.317
So again, our computed property
is in the place of the data.

89
00:05:14.317 --> 00:05:15.642
So we have a different view of the data.

90
00:05:15.642 --> 00:05:18.527
Previously we had filteredFilms,

91
00:05:18.527 --> 00:05:23.945
we were looking through that big
array of objects of ratingsInfo.

92
00:05:23.945 --> 00:05:31.180
Now we change it to filteredFilms.

93
00:05:31.180 --> 00:05:35.550
So I'm using that computed
property in place of that array.

94
00:05:35.550 --> 00:05:42.350
Before this table was outputting the
ratings info, that huge amount of array.

95
00:05:42.350 --> 00:05:45.692
Instead now we're returning
these filtered films, and

96
00:05:45.692 --> 00:05:48.482
that's what we're
outputting onto the page.

97
00:05:52.053 --> 00:05:57.410
So here's some just a little bit
of review again, just in case.

98
00:05:57.410 --> 00:06:00.350
If we have a counter, that 0, and

99
00:06:00.350 --> 00:06:03.750
we have a method that counts up,
it just increases.

100
00:06:03.750 --> 00:06:06.400
So I'm gonna say @click count up.

101
00:06:06.400 --> 00:06:12.060
So now you can see them all together,
you can see the data methods computed.

102
00:06:12.060 --> 00:06:13.936
I'm returning the counter is 0.

103
00:06:13.936 --> 00:06:16.630
I'm gonna count up with the method.

104
00:06:16.630 --> 00:06:21.836
And here, I have this,
whatever this .counter is,

105
00:06:21.836 --> 00:06:24.856
it's just gonna be that +1.

106
00:06:24.856 --> 00:06:27.121
So no matter how many times I change that,

107
00:06:27.121 --> 00:06:32.370
that computed property is always going to
only evaluate when this .counter changes.

108
00:06:32.370 --> 00:06:36.435
And it's going to always
return this .counter +1.

