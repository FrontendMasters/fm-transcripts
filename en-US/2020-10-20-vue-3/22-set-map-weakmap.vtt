WEBVTT

1
00:00:00.290 --> 00:00:02.580
I'm gonna dive in one step further, and

2
00:00:02.580 --> 00:00:07.200
I promise that we are going to move
into watchers in just a second.

3
00:00:07.200 --> 00:00:09.290
But I think that this
is kind of interesting,

4
00:00:09.290 --> 00:00:12.730
so we'll go into just the next level.

5
00:00:12.730 --> 00:00:16.420
Again, feel free to sit back, I'm still
not showing you anything from the API,

6
00:00:16.420 --> 00:00:18.230
just some more base concepts.

7
00:00:18.230 --> 00:00:23.540
We have set, map and weakmap, which
are things that native JavaScript allows

8
00:00:23.540 --> 00:00:28.930
us to use, and this is again,
in later more modern JavaScript.

9
00:00:28.930 --> 00:00:31.170
A set is a series of only values,

10
00:00:31.170 --> 00:00:35.840
similar to an array, where any particular
value can only be inserted once.

11
00:00:35.840 --> 00:00:40.320
So if we have const, my lunch items,
new set, and I have taco burger taco and

12
00:00:40.320 --> 00:00:45.570
I console log, my lunch items,
that set will only have in it a taco and

13
00:00:45.570 --> 00:00:48.900
a burger, it will get rid of
anything that's duplicated.

14
00:00:50.100 --> 00:00:53.140
A map is a series of keys and values,

15
00:00:53.140 --> 00:00:55.970
similar to an object, so
if you're thinking of set like an array,

16
00:00:55.970 --> 00:00:59.225
you can think of map like an object,
but it has some key differences.

17
00:00:59.225 --> 00:01:06.760
Key/value pairs remember their explicit
ordering, which is not true in objects,

18
00:01:06.760 --> 00:01:11.600
performs better in scenarios
involving frequent additions and

19
00:01:11.600 --> 00:01:16.275
removals, like set you can
only add key value pairs once.

20
00:01:16.275 --> 00:01:20.340
And it has some nice methods like size,
has,

21
00:01:20.340 --> 00:01:23.820
set, clear, delete,
with if you pass in, key, so

22
00:01:23.820 --> 00:01:27.300
I've linked those up if you wanna
explore maps a little bit more.

23
00:01:28.470 --> 00:01:33.760
So if I create a new map, and
I say, new map.set lunch 1 and

24
00:01:33.760 --> 00:01:39.000
it's just a taco, and then I say,
.set lunch 2 and I add a burger.

25
00:01:39.000 --> 00:01:44.080
So map will have lunch 1, lunch 2, and
then I add lunch1 again with another taco,

26
00:01:44.080 --> 00:01:47.260
it will throw that out, so
it's kind of similar to that set.

27
00:01:48.420 --> 00:01:51.910
There's another thing called a weakmap,
that's similar to map but

28
00:01:51.910 --> 00:01:53.840
the references are held weekly.

29
00:01:53.840 --> 00:01:57.720
In other words, if you delete something,
the reference can be garbage collected,

30
00:01:57.720 --> 00:02:02.320
in a map it can't, so
that's a big primary difference.

31
00:02:02.320 --> 00:02:07.950
It also means it loses some of the juju,
and juju is not a technical term, [LAUGH].

32
00:02:07.950 --> 00:02:11.040
It loses some of the juju you
had in the maps including,

33
00:02:11.040 --> 00:02:13.090
it loses its implicit ordering.

34
00:02:13.090 --> 00:02:18.510
And it also loses some of those nice
set and things that the map offered,

35
00:02:18.510 --> 00:02:22.040
some of those nice pieces of
working with it, some methods.

36
00:02:23.420 --> 00:02:28.060
So the differences, garbage,
[LAUGH] that's really the reason why

37
00:02:28.060 --> 00:02:31.917
we have maps and weakmaps and
why they're different.

38
00:02:31.917 --> 00:02:36.090
The difference is literally that one can
be garbage collected and one can't, and

39
00:02:36.090 --> 00:02:39.300
that's the thing that we care about
the most when we're working with View.

40
00:02:39.300 --> 00:02:42.810
But this is not bad garbage,
this is good happy garbage,

41
00:02:42.810 --> 00:02:47.360
because we want these to be able to
be garbage collected in view three.

42
00:02:48.660 --> 00:02:53.590
So, here, when you pass an object
to view instance as data,

43
00:02:53.590 --> 00:02:55.730
View converts it to a proxy
which you just saw.

44
00:02:57.000 --> 00:02:59.690
The proxy enables View to
perform dependency tracking and

45
00:02:59.690 --> 00:03:02.450
change notification when properties
are accessed or modified,

46
00:03:02.450 --> 00:03:06.510
and there are two levels of
dependencies for every component.

47
00:03:08.040 --> 00:03:12.350
The first level uses a map and
stores the dependencies for each property.

48
00:03:12.350 --> 00:03:18.520
The second level tracks the effects, which
will be run when the values change in set.

49
00:03:19.590 --> 00:03:20.780
After the first render,

50
00:03:20.780 --> 00:03:25.200
a component would have tracked a list of
dependencies, the properties that it had.

51
00:03:25.200 --> 00:03:29.960
Conversely, the component becomes
a subscriber to each of these properties.

52
00:03:29.960 --> 00:03:32.950
When a proxy intercepts a set operation,

53
00:03:32.950 --> 00:03:36.430
the property will notify
all of its subscribers, so

54
00:03:36.430 --> 00:03:40.960
that allows us to efficiently
track changes in our application.

55
00:03:40.960 --> 00:03:46.590
So, we're coming on the end of this
long explanation of View reactivity and

56
00:03:46.590 --> 00:03:48.040
now we're gonna talk about watchers.

57
00:03:49.430 --> 00:03:52.990
If you need more information,
View mastery has a bunch of articles and

58
00:03:52.990 --> 00:03:56.320
a bunch of courses that go into even
more detail about all of this stuff.

59
00:03:56.320 --> 00:03:59.957
I went on to it a top level, they'll
go even further into the details of

60
00:03:59.957 --> 00:04:02.620
View reactivity,
if you're interested in that.

