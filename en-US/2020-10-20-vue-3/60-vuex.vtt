WEBVTT

1
00:00:00.570 --> 00:00:04.460
Okay, the last thing that we're
gonna talk about today is Vuex.

2
00:00:04.460 --> 00:00:09.708
I love Vuex, I think it's fantastic,
especially when you start to have

3
00:00:09.708 --> 00:00:15.317
to coordinate a ton of logic, or a lot
of details throughout an application.

4
00:00:15.317 --> 00:00:20.180
Vuex really saves me a lot of effort and
time, and I'll explain why.

5
00:00:21.610 --> 00:00:22.390
So what is it?

6
00:00:22.390 --> 00:00:26.460
It's a centralized store for sharing
data and logic, and even shared methods,

7
00:00:26.460 --> 00:00:27.490
or async.

8
00:00:27.490 --> 00:00:31.020
You can think about it a little bit
like it's the brains of the application.

9
00:00:32.150 --> 00:00:34.684
It's really good for
unidirectional data flow.

10
00:00:34.684 --> 00:00:37.790
So we're not throwing things up and
down and around.

11
00:00:37.790 --> 00:00:40.714
We have all of that state in one place.

12
00:00:40.714 --> 00:00:45.054
Remember, we talked a little bit before
about making sure that we're not changing

13
00:00:45.054 --> 00:00:49.520
things in multiple spots, and we know
who truly owns the state of something.

14
00:00:49.520 --> 00:00:52.765
It's built off of the concept of Redux,

15
00:00:52.765 --> 00:00:56.976
a lot of the kind of flux
application architecture.

16
00:00:56.976 --> 00:01:00.280
So flux application
architecture came first.

17
00:01:00.280 --> 00:01:02.220
Then Redux worked off of that.

18
00:01:02.220 --> 00:01:04.432
And then Vue worked off of Redux, and

19
00:01:04.432 --> 00:01:09.110
kind of simplified the API just
a little bit, so it's similar to Redux.

20
00:01:09.110 --> 00:01:11.050
You could still use Redux, if you like.

21
00:01:11.050 --> 00:01:14.340
But Vuex is really what I recommend for
Vue applications.

22
00:01:15.400 --> 00:01:17.144
So why?

23
00:01:17.144 --> 00:01:19.214
In a complex single page application,

24
00:01:19.214 --> 00:01:23.670
passing state between many different
components, and especially deeply nested,

25
00:01:23.670 --> 00:01:27.210
or sibling components can get
complicated very quickly.

26
00:01:27.210 --> 00:01:32.180
Having one centralized place to access
your data can help you stay organized.

27
00:01:32.180 --> 00:01:34.390
Before when we were doing
those amid examples,

28
00:01:34.390 --> 00:01:38.110
you could see that were passing
things down, passing things back up.

29
00:01:38.110 --> 00:01:41.770
But what if you're in the state where
you have to pass it up two times, or

30
00:01:41.770 --> 00:01:45.990
you have to pass it down two times, or
if you have to pass it up and back down?

31
00:01:45.990 --> 00:01:47.950
Or what if there's something that many,

32
00:01:47.950 --> 00:01:50.450
many components need to know
about all at the same time?

33
00:01:51.550 --> 00:01:55.240
So having all of that in one place, and

34
00:01:55.240 --> 00:01:59.480
then giving it to the components as
they need, it makes a lot of sense.

35
00:01:59.480 --> 00:02:02.012
It keeps everything really organized.

36
00:02:02.012 --> 00:02:05.610
And that can be really, really helpful for
working with applications.

37
00:02:07.310 --> 00:02:08.780
When would you use it?

38
00:02:08.780 --> 00:02:11.080
Sometimes people just say you just know.

39
00:02:11.080 --> 00:02:12.120
That's not super helpful.

40
00:02:12.120 --> 00:02:14.770
So [LAUGH] let's dive in
just another step further.

41
00:02:16.290 --> 00:02:22.290
Or you have multiple instances of children
or siblings communicating with each other.

42
00:02:22.290 --> 00:02:24.876
You have, like I just mentioned,

43
00:02:24.876 --> 00:02:29.967
multiple pieces of people kind of
talking around the application.

44
00:02:29.967 --> 00:02:34.178
I would still use emit for examples like
a select that I need to use over and

45
00:02:34.178 --> 00:02:38.529
over again, because I wanna keep that
select kind of state encapsulated,

46
00:02:38.529 --> 00:02:42.836
even if I want the parent component of
the select to know about something.

47
00:02:42.836 --> 00:02:45.532
I don't necessarily wanna hold
that in the store, because, again,

48
00:02:45.532 --> 00:02:46.730
I don't want it to be brittle.

49
00:02:46.730 --> 00:02:49.610
So for something that's being
reused again and again and

50
00:02:49.610 --> 00:02:52.670
again, that's really good for
those emit pieces.

51
00:02:52.670 --> 00:02:56.568
But when we're talking about
knowing the state of a cart, so

52
00:02:56.568 --> 00:02:59.939
that a component can know
about it in a dynamic page.

53
00:02:59.939 --> 00:03:03.960
And the cart can know about it, and
this process can know about it.

54
00:03:03.960 --> 00:03:09.650
And we start to see multiple things need
to be tied to that one piece of state,

55
00:03:09.650 --> 00:03:11.110
that's when it can be really helpful.

56
00:03:12.470 --> 00:03:15.450
Or, if you need it to be self-documenting.

57
00:03:15.450 --> 00:03:20.570
And what I mean by that is, I'd like to
see what all of the state looks like, and

58
00:03:20.570 --> 00:03:23.090
keep it in one organized spot.

59
00:03:23.090 --> 00:03:25.050
Like I mentioned,
it's the brain of their application.

60
00:03:25.050 --> 00:03:28.420
So basically, what you're telling
a maintainer who comes after you,

61
00:03:28.420 --> 00:03:30.620
here's the really important stuff.

62
00:03:30.620 --> 00:03:34.829
Here's the stuff that's not
presentational, or something like that.

63
00:03:34.829 --> 00:03:38.316
This is the stuff that's the main
application state that you should really

64
00:03:38.316 --> 00:03:39.212
pay attention to.

65
00:03:39.212 --> 00:03:46.041
And I wanna mention, I'm gonna dive
into Vuex on a really simple top level.

66
00:03:46.041 --> 00:03:50.521
But if you want to go into a lot of
depth with Vuex, Divya has a course on

67
00:03:50.521 --> 00:03:55.471
Frontend Masters that dives into a really
complicated state with Vuex, and

68
00:03:55.471 --> 00:03:58.920
goes into modules, and
really does a deep dive.

69
00:03:58.920 --> 00:04:01.950
So once you're done with the section,
if you want to know more,

70
00:04:01.950 --> 00:04:04.960
I highly suggest looking
at Divya's course.

71
00:04:04.960 --> 00:04:07.960
So it's not a replacement for
single component methods.

72
00:04:07.960 --> 00:04:11.840
And the reason why I say this is, let's
say you've got this single component, and

73
00:04:11.840 --> 00:04:14.580
you're keeping a computed
property in there because of

74
00:04:14.580 --> 00:04:15.860
something that's going on.

75
00:04:15.860 --> 00:04:18.930
You might be tempted to
put it in the store.

76
00:04:18.930 --> 00:04:23.100
But what happens if you put too
many things in the store is that

77
00:04:23.100 --> 00:04:26.100
it becomes hard for
the maintainer to look through that state.

78
00:04:26.100 --> 00:04:30.430
It becomes less self-documenting, because
now they're having to sort through all of

79
00:04:30.430 --> 00:04:35.030
this stuff when really just the component
needed to know about that one piece.

80
00:04:35.030 --> 00:04:39.740
So use it in light of reading it,
as well as writing it.

81
00:04:41.040 --> 00:04:42.111
So how would I add it?

82
00:04:42.111 --> 00:04:47.330
I could do npm i vuex, yearn add vuex
if you have an existing Vue project.

83
00:04:47.330 --> 00:04:50.392
And I would set it up this way
within my source directory.

84
00:04:50.392 --> 00:04:53.269
I create another directory named store,
and

85
00:04:53.269 --> 00:04:55.940
inside it, I put a file named index.js.

86
00:04:55.940 --> 00:05:01.183
Now, when we worked with UCLI,
it set that up for us already, right?

87
00:05:01.183 --> 00:05:07.190
It already set up a directory called
store in an index.js method or file.

88
00:05:07.190 --> 00:05:10.430
So if you're curious if you
ever get lost or confused,

89
00:05:10.430 --> 00:05:13.040
you can always just set up
a project from scratch, and

90
00:05:13.040 --> 00:05:17.000
add in Vuex and say,
that's the kind of default setting.

91
00:05:17.000 --> 00:05:21.520
This is my preference, and
a few other people's preferences.

92
00:05:21.520 --> 00:05:25.100
You could also just create a store
file in that same directory,

93
00:05:25.100 --> 00:05:27.720
or in the same source
directory if you like,

94
00:05:27.720 --> 00:05:32.030
doesn't necessarily have to be in store,
unless you're using Nuxt.

95
00:05:32.030 --> 00:05:34.830
And then any file that's
in the store directory

96
00:05:34.830 --> 00:05:37.930
is what Nuxt will kinda sniff
out to create that store.

97
00:05:39.660 --> 00:05:41.350
Vue cli will create this for you.

98
00:05:41.350 --> 00:05:46.370
Nuxt will also create that
store directory for you.

99
00:05:47.480 --> 00:05:50.380
So the initial setup in store.js
would look something like this.

100
00:05:50.380 --> 00:05:52.090
And in fact, you saw this earlier.

101
00:05:52.090 --> 00:05:55.353
You saw this boilerplate when
we created that Vue CLI.

102
00:05:55.353 --> 00:06:00.040
So this is what it looks like,
import Vue, Vuex, Vue.use(Vuex).

103
00:06:00.040 --> 00:06:03.300
And then it gives us state,
mutations, actions and modules.

104
00:06:03.300 --> 00:06:07.190
I am gonna cover another thing that's
in here, that's called getters.

105
00:06:07.190 --> 00:06:11.600
I'm not gonna cover modules, cuz that's
what Divya covers in her course.

106
00:06:11.600 --> 00:06:15.900
It's kind of a whole nother course,
it could be, but I am gonna cover getters.

107
00:06:17.140 --> 00:06:21.600
Alternatively [LAUGH], Nuxt expects
a different formatting for this store.

108
00:06:21.600 --> 00:06:26.240
And if you use my snippets, how I
mentioned I make those Vue snippets for

109
00:06:26.240 --> 00:06:27.880
VS code have some boilerplate.

110
00:06:28.990 --> 00:06:32.075
There's vstore, and then there's vstore2.

111
00:06:32.075 --> 00:06:37.595
Vstore is this boilerplate,
vstore2 is the next boilerplate.

112
00:06:37.595 --> 00:06:40.252
Nuxt, if you use this, it will be fine.

113
00:06:40.252 --> 00:06:44.260
Nuxt will just call it say, hey,
you're using Vuex in Classic Mode, and

114
00:06:44.260 --> 00:06:45.670
we'd like you to move over.

115
00:06:45.670 --> 00:06:49.299
I think it's really funny that it calls
it classic mode, like it's so old or

116
00:06:49.299 --> 00:06:50.214
something [LAUGH].

117
00:06:50.214 --> 00:06:54.390
Maybe [INAUDIBLE] two years old,
and it's classic mode.

118
00:06:54.390 --> 00:06:59.570
But anyway, so this is the store that
Nuxt expects with kind of export,

119
00:06:59.570 --> 00:07:02.718
const, state, getters,
mutations and actions.

120
00:07:02.718 --> 00:07:08.410
In our main.js file,
we perform the following update.

121
00:07:08.410 --> 00:07:13.310
So we would add in import store
from wherever you decided to put it

122
00:07:13.310 --> 00:07:15.220
in our case store index.

123
00:07:15.220 --> 00:07:18.730
And you would say store
store inside the Vue piece.

124
00:07:18.730 --> 00:07:21.530
But actually, you could just say store,
cuz we can do some destructuring.

125
00:07:22.540 --> 00:07:25.010
State is what you might expect
the state of the application.

126
00:07:25.010 --> 00:07:29.721
And it's similar how to how we use
data in components, or ref now, or

127
00:07:29.721 --> 00:07:32.982
reactive, so
that kind of centralized state.

128
00:07:32.982 --> 00:07:37.910
Getters will make values that are able
to show statically in our templates.

129
00:07:37.910 --> 00:07:41.940
In other words, getters can read
the value, but not mutate the state.

130
00:07:41.940 --> 00:07:45.000
I'll explain this in a very simple way.

131
00:07:45.000 --> 00:07:47.390
Getters are kind of like
computer properties.

132
00:07:47.390 --> 00:07:50.080
They are another Vue on to the same data.

133
00:07:50.080 --> 00:07:55.151
So if you can think of state like data,
getters are like a computed property.

134
00:07:55.151 --> 00:07:57.620
They're giving you another
Vue on to that state.

135
00:07:59.380 --> 00:08:04.209
Mutations will allow us to update the
state, but they'll always be synchronous.

136
00:08:04.209 --> 00:08:09.300
Mutations are the only way to change
the data of the state and the store.

137
00:08:10.540 --> 00:08:13.710
Actions allow us to update
the state asynchronously, but

138
00:08:13.710 --> 00:08:15.310
they'll use an existing mutation.

139
00:08:15.310 --> 00:08:19.650
And this can be really helpful if you
need to perform a few different mutations

140
00:08:19.650 --> 00:08:22.290
at once in a particular order,
or reach out to a server.

141
00:08:23.810 --> 00:08:27.360
So here's a very basic abstract
example that we're gonna go through

142
00:08:27.360 --> 00:08:28.650
while we look at this.

143
00:08:28.650 --> 00:08:31.020
We're in this new vuex.store.

144
00:08:31.020 --> 00:08:32.930
We've got the state is counter 0.

145
00:08:32.930 --> 00:08:34.510
We've been doing a lot of counters lately.

146
00:08:35.785 --> 00:08:38.055
In the getters, we have triple counter,

147
00:08:38.055 --> 00:08:42.165
where we pass in state,
returning state.counter times 3.

148
00:08:42.165 --> 00:08:46.505
This is similar to the computer properties
that you've gotten used to seeing before,

149
00:08:46.505 --> 00:08:47.755
except it's in the store now.

150
00:08:50.115 --> 00:08:55.705
Mutations are the are mutating the state.

151
00:08:55.705 --> 00:08:57.410
They're always synchronous.

152
00:08:57.410 --> 00:09:02.000
So here, we've got increment,
we're passing in the state, and

153
00:09:02.000 --> 00:09:04.810
we can also pass a payload in into this.

154
00:09:04.810 --> 00:09:06.510
We're representing that with number.

155
00:09:06.510 --> 00:09:09.570
But you might notice in a lot of
applications, they use the term payload.

156
00:09:10.770 --> 00:09:15.280
So state and num, and
we're setting state.counter

157
00:09:15.280 --> 00:09:19.750
is going to be increased by num,
that's what we're changing.

158
00:09:21.230 --> 00:09:25.930
And this action allows us to
do asynchronous operations.

159
00:09:25.930 --> 00:09:30.720
Now typically, I would do async/await
in here, and I'd call out to an API,

160
00:09:30.720 --> 00:09:32.140
we'll do that on Friday.

161
00:09:32.140 --> 00:09:35.605
But for the purposes of demonstration,
and just to keep it simple for

162
00:09:35.605 --> 00:09:39.685
now, cuz you're learning a new concept,
we'll just use a simple set timeout.

163
00:09:39.685 --> 00:09:43.200
So this commits the mutation,
it's asynchronous.

164
00:09:43.200 --> 00:09:48.320
So this is showing it passed with
a payload represented as asyncNum.

165
00:09:48.320 --> 00:09:52.050
And for this, I'm just showing
you an example that's an object.

166
00:09:52.050 --> 00:09:55.976
The reason why I'm showing you an example
that's an object is because if you need to

167
00:09:55.976 --> 00:09:59.172
use two different properties,
you can't pass in two parameters,

168
00:09:59.172 --> 00:10:00.309
you have to pass in one.

169
00:10:00.309 --> 00:10:04.450
So what we would do is pass in
an object that held both, right?

170
00:10:04.450 --> 00:10:08.350
So we would say async.by and
async.duration.

171
00:10:08.350 --> 00:10:11.720
And here, we're committing this increment.

172
00:10:11.720 --> 00:10:19.000
So this action is committing, remember, we
said we can't change anything in actions.

173
00:10:19.000 --> 00:10:25.170
But we can call this mutation
by saying commit and async by.

174
00:10:25.170 --> 00:10:29.670
So this will wait and use the mutation.

175
00:10:29.670 --> 00:10:35.770
So actions are dispatched, and mutations
are committed there that we use commit.

176
00:10:35.770 --> 00:10:37.600
So we have to pass in commit here.

