WEBVTT

1
00:00:00.570 --> 00:00:04.650
So let's talk about sweet,
sweet, transition modes.

2
00:00:04.650 --> 00:00:09.711
Without transition modes, what you have
is when two things are coming into and

3
00:00:09.711 --> 00:00:11.397
out of the DOM at one time,

4
00:00:11.397 --> 00:00:16.228
there's this awkward moment where both
of them are there at the same time,

5
00:00:16.228 --> 00:00:20.085
even though they're both in
the middle of transitioning.

6
00:00:20.085 --> 00:00:23.782
So what happens is you get this button
effect where one is coming in and

7
00:00:23.782 --> 00:00:27.096
it's still there so
that it's taking up space in the DOM, and

8
00:00:27.096 --> 00:00:31.009
this other one's coming in and
it's kind of doing this jarring effect.

9
00:00:31.009 --> 00:00:35.338
And you can even see this on some sites
where things kind of get jarring,

10
00:00:35.338 --> 00:00:40.845
people haven't paid attention to those
two things in the DOM at once property.

11
00:00:40.845 --> 00:00:45.447
Now, I'm showing you this demo of
these different transition modes, and

12
00:00:45.447 --> 00:00:48.090
you might notice it
says React on the side.

13
00:00:48.090 --> 00:00:51.870
That's because of a Vue developer who
loves transition modes had to work in

14
00:00:51.870 --> 00:00:54.215
React and was like, y'all don't have this?

15
00:00:54.215 --> 00:00:59.034
So he made Transition Group Plus for
React,and the demo is quite good.

16
00:00:59.034 --> 00:01:01.514
So I'm showing it to you with that demo.

17
00:01:01.514 --> 00:01:02.818
But also to say that,

18
00:01:02.818 --> 00:01:07.239
remember in the beginning I said when
frameworks learn from each other,

19
00:01:07.239 --> 00:01:11.242
all developers win because we're
all learning from each other.

20
00:01:11.242 --> 00:01:12.980
Each framework gets better and better.

21
00:01:14.050 --> 00:01:18.388
React borrows from Vue, Vue borrows
from React, and so on and so forth.

22
00:01:18.388 --> 00:01:22.811
So this is a kind of neat thing
that got ported over to React.

23
00:01:22.811 --> 00:01:26.038
Here are the different modes
that are available to you.

24
00:01:26.038 --> 00:01:29.929
In-out, the current element
waits until the new element is

25
00:01:29.929 --> 00:01:31.999
done transitioning in to fire.

26
00:01:31.999 --> 00:01:35.512
Out-in, the current element
transitions out and

27
00:01:35.512 --> 00:01:38.134
then the new element transitions in.

28
00:01:38.134 --> 00:01:41.047
I've almost never found a case for in-out.

29
00:01:41.047 --> 00:01:43.050
Most of the time you want out-in.

30
00:01:43.050 --> 00:01:47.934
Because if you're gonna use a transition
mode, really, you want the current

31
00:01:47.934 --> 00:01:53.125
element to transition out entirely and
wait until the new element transitions in.

32
00:01:53.125 --> 00:01:55.833
So I'm gonna show an example of this.

33
00:01:55.833 --> 00:01:59.471
We use the transition component,
we have a name.

34
00:01:59.471 --> 00:02:01.881
We have this mode, that's out-in.

35
00:02:01.881 --> 00:02:06.137
And then we're wrapping it,
of course, in this v-if, v-else.

36
00:02:06.137 --> 00:02:10.116
So here, if we hover this and replace it,

37
00:02:10.116 --> 00:02:14.449
it looks like it's a card that's flipping.

38
00:02:14.449 --> 00:02:18.961
It looks like one card that's flipping,
but really, it's two elements.

39
00:02:18.961 --> 00:02:23.148
So what's happening here is
the one element is transforming

40
00:02:23.148 --> 00:02:27.930
to this kind of sideways state,
and then it's going away.

41
00:02:27.930 --> 00:02:31.235
And then the next one's coming
in at the sideways state and

42
00:02:31.235 --> 00:02:32.794
flipping all the way over.

43
00:02:32.794 --> 00:02:36.468
So because we're using a transition mode,

44
00:02:36.468 --> 00:02:41.145
it's allowing us to seamlessly
make these two go over.

45
00:02:41.145 --> 00:02:44.246
So you're not seeing them stop and
come in.

46
00:02:44.246 --> 00:02:46.512
And what's really nice about this,

47
00:02:46.512 --> 00:02:51.127
too, is that you're not necessarily
having to coordinate those things.

48
00:02:51.127 --> 00:02:53.879
If I was working with this
without a transition mode,

49
00:02:53.879 --> 00:02:56.151
what I might have to do
is make a false delay.

50
00:02:56.151 --> 00:02:59.946
I would figure out how long I'm
transitioning that first one and

51
00:02:59.946 --> 00:03:02.905
make a delay for
the second one to start coming in.

52
00:03:02.905 --> 00:03:06.174
So I could do that with a callback
to add that component, or

53
00:03:06.174 --> 00:03:08.460
I could do that with these false delays.

54
00:03:08.460 --> 00:03:12.101
But if I change the length of
time that that's animating,

55
00:03:12.101 --> 00:03:16.058
I then have to change all of that
structure of the code, right?

56
00:03:16.058 --> 00:03:21.010
So we're not having to do any
of those kind of clunky bits.

57
00:03:21.010 --> 00:03:24.780
Now if we didn't have it at all,
they happen at the same time.

58
00:03:24.780 --> 00:03:29.640
And if they happen at the same time,
it just kind of looks, clunk.

59
00:03:29.640 --> 00:03:34.690
Because one of them is transitioning but
the other one is transitioning in.

60
00:03:34.690 --> 00:03:38.570
And so what you're seeing is
just them flip and that's it.

61
00:03:41.220 --> 00:03:43.461
So here we've got flip-enter-active.

62
00:03:43.461 --> 00:03:48.414
We've got flip-leave-active,
and we've got some transforms.

63
00:03:48.414 --> 00:03:54.415
Like I mentioned, we're transforming
the scale y to 0, and the opacity to 0.

