WEBVTT

1
00:00:00.910 --> 00:00:05.952
Computed properties are actually
gonna hand hang off in the same way,

2
00:00:05.952 --> 00:00:07.960
with refs or reactive.

3
00:00:07.960 --> 00:00:12.642
But what we'll do is we'll turn
return a function called computed, so

4
00:00:12.642 --> 00:00:17.088
in this case we've got a count of 0,
if we wanna double that count,

5
00:00:17.088 --> 00:00:21.245
we would say computed, and
then we return state.count * 2.

6
00:00:21.245 --> 00:00:26.224
So that's how we would work with
computed inside of the composition API.

7
00:00:26.224 --> 00:00:29.906
For watch, it's pretty much
the same as the old options API and

8
00:00:29.906 --> 00:00:32.353
you have access to the new and old values.

9
00:00:32.353 --> 00:00:36.342
So, if I wanted to pass in the state,
which is count,

10
00:00:36.342 --> 00:00:41.411
I would say I wanna watch the state,
the newValue and the oldValue.

11
00:00:41.411 --> 00:00:46.389
And then I have access to
newValue.count inorder to do that same

12
00:00:46.389 --> 00:00:49.901
kind of watching effect
that you saw before.

13
00:00:53.230 --> 00:00:58.530
So, in our older demo what we did
in order to increase that state

14
00:00:58.530 --> 00:01:03.430
in watchers, is we had watch,
numItems were newValue and

15
00:01:03.430 --> 00:01:07.642
oldValue, I could console.log(newValue).

16
00:01:07.642 --> 00:01:12.743
Let's see if I can just open
up the console here and

17
00:01:12.743 --> 00:01:16.882
say add item, no code pen hits me today.

18
00:01:16.882 --> 00:01:21.502
We go into New Item, we go into &gt; view,

19
00:01:21.502 --> 00:01:26.522
into the &gt; Console, and we add 1, 2, 3.

20
00:01:26.522 --> 00:01:30.183
And I'm showing you all of
the things that I'm accessing here.

21
00:01:33.520 --> 00:01:36.853
Now, if we wanna do the same
thing in the composition API,

22
00:01:36.853 --> 00:01:38.495
it's like you saw earlier.

23
00:01:54.496 --> 00:02:00.807
Where we add an item 1 2 3, and
that composition API looks like this.

24
00:02:00.807 --> 00:02:07.231
Remember, you have to pass in watch at the
top, along with reactive and toRefs, but

25
00:02:07.231 --> 00:02:13.222
you would pass state into watch and
then you could say, newValue.numItems.

26
00:02:15.213 --> 00:02:19.468
There's a new thing called watchEffect,
they're like watchers but

27
00:02:19.468 --> 00:02:23.517
with small differences,
it executes the function immediately.

28
00:02:23.517 --> 00:02:25.517
Rather than watch that's waiting for

29
00:02:25.517 --> 00:02:30.089
something to change after everything's
been mounted, it executes it immediately.

30
00:02:30.089 --> 00:02:33.785
And it tracks all the reactive state
properties it used during the execution as

31
00:02:33.785 --> 00:02:34.775
dependencies.

32
00:02:34.775 --> 00:02:39.439
This is pretty neat, so you don't actually
have to state the exact thing that you

33
00:02:39.439 --> 00:02:44.377
want to watch unlike the options API where
you had to say, okay, I wanna watch count,

34
00:02:44.377 --> 00:02:48.509
I'm gonna say count here, watchEffect,
it's watching all of them.

35
00:02:48.509 --> 00:02:53.211
So here we can say
console.log(state.count) and

36
00:02:53.211 --> 00:02:56.559
that watchEffect is going to do that.

37
00:02:56.559 --> 00:02:59.919
So here we've got that watchEffect,
and again,

38
00:02:59.919 --> 00:03:02.722
remember you have to
pass it in at the top.

39
00:03:05.614 --> 00:03:10.432
And so we're passing in state.nums,
and if we look at the console,

40
00:03:10.432 --> 00:03:14.597
the big difference here,
we see a 0 immediately, right?

41
00:03:14.597 --> 00:03:18.980
As I mentioned, we're executing
it immediately, unlike watch.

42
00:03:18.980 --> 00:03:22.770
And so here now you can see as it changes,
it goes up.

