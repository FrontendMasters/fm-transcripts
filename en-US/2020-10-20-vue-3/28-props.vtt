WEBVTT

1
00:00:00.260 --> 00:00:03.920
So here's a slightly better
example with props, so

2
00:00:03.920 --> 00:00:09.300
we have this Vue.createApp,
we have our data, we say give me a taco.

3
00:00:10.940 --> 00:00:14.400
If you look here, this is just
hard coded onto that component

4
00:00:14.400 --> 00:00:18.010
every time you see a child component,
you have to give me a taco.

5
00:00:18.010 --> 00:00:22.900
So I have this app-child I'm
passing in this text message and

6
00:00:22.900 --> 00:00:28.260
remember that colon is short for V bind,

7
00:00:28.260 --> 00:00:33.800
so I'm binding to whatever the message is,

8
00:00:33.800 --> 00:00:37.680
so here the message was give me a taco.

9
00:00:37.680 --> 00:00:41.210
In this component is kind of like this,
you can consider this prop

10
00:00:41.210 --> 00:00:44.370
that I'm passing into the component
as like an empty shell.

11
00:00:44.370 --> 00:00:50.200
I say props is text and
I'm passing that text into here,

12
00:00:50.200 --> 00:00:55.830
but I can pass in whatever I want,
if I change this to give me burrito, which

13
00:00:55.830 --> 00:00:59.270
I don't know why you'd ever do, because
really, you just want a bunch of tacos.

14
00:00:59.270 --> 00:01:06.710
You can see, give me a burrito and
you can see that is all updating as well.

15
00:01:06.710 --> 00:01:11.040
And you can also see that this
text was really the thing that

16
00:01:11.040 --> 00:01:14.800
at allowed us to add the props, but
it doesn't need to be called text.

17
00:01:14.800 --> 00:01:20.300
So if I wanted to call it like
robot in this to be called

18
00:01:20.300 --> 00:01:23.820
robot and
then I go back in here and I say,

19
00:01:28.390 --> 00:01:31.040
robot, that's also totally fine.

20
00:01:31.040 --> 00:01:34.050
Like it can be named whatever
you want it to be named, so

21
00:01:34.050 --> 00:01:36.020
it's not important that
this be called text.

22
00:01:36.020 --> 00:01:43.130
It could also be called message even,
but for the distinction purposes here,

23
00:01:43.130 --> 00:01:46.855
I'm making them have different names,
and I called this app child.

24
00:01:46.855 --> 00:01:50.260
And you can see app child and

25
00:01:50.260 --> 00:01:55.430
therefore I can pass a lot of different
things into this it's very flexible.

26
00:01:55.430 --> 00:01:58.070
What's important here is that that div,

27
00:01:58.070 --> 00:02:02.190
renders whatever I passed
into that component.

28
00:02:02.190 --> 00:02:06.440
So that app child component, whenever I
pass something in, will have that div.

29
00:02:06.440 --> 00:02:10.870
And likewise if I wanted to change
this to an h1, then everything updates

30
00:02:10.870 --> 00:02:15.430
accordingly, i don't have to keep
updating all of these different units.

31
00:02:15.430 --> 00:02:19.770
Because I wanted to change something
I can have it change in one place and

32
00:02:19.770 --> 00:02:20.960
update for all of them.

33
00:02:23.100 --> 00:02:28.060
So props come down from
the parent to the child, so

34
00:02:28.060 --> 00:02:31.280
we're always passing data down
from the parent to child.

35
00:02:31.280 --> 00:02:35.300
You can say you can remember
with props down events up,

36
00:02:35.300 --> 00:02:39.220
we're always passing props down from
the date data from the parent to the child

37
00:02:39.220 --> 00:02:41.080
because we want one source of truth.

38
00:02:41.080 --> 00:02:45.090
We don't want this to be doing things and
then this to be doing things and

39
00:02:45.090 --> 00:02:50.050
then it's like who owns the state who
owns the real truth of the thing.

40
00:02:50.050 --> 00:02:54.550
Really that parent component is gonna own
the state the real truth of the thing and

41
00:02:54.550 --> 00:02:59.310
the child is just receiving it,
it's just getting it with props.

42
00:02:59.310 --> 00:03:04.730
So if we pass props text like you saw
before, these props are intended for

43
00:03:04.730 --> 00:03:08.910
one way communication and you can think
of it like the component holds a little

44
00:03:08.910 --> 00:03:12.560
variable that's waiting to be filled
out by whatever the parent since it.

45
00:03:12.560 --> 00:03:16.650
So if we have this collection that you saw
before for that call out component, and

46
00:03:16.650 --> 00:03:20.510
we have this little space that's
waiting for us for a prop.

47
00:03:20.510 --> 00:03:26.604
If I pass in num equals 1,
it will fill that space,

48
00:03:26.604 --> 00:03:31.510
it will fill that kind of area with
whatever I'm binding to that number.

49
00:03:33.470 --> 00:03:38.600
We met somebody asked about validation
before we do prop validation,

50
00:03:38.600 --> 00:03:42.580
you saw that it just was we're able to
pass in a prop just by putting it inside

51
00:03:42.580 --> 00:03:46.730
of an array and it doesn't need to be
in an array even if it's one element.

52
00:03:46.730 --> 00:03:52.790
But the better way of doing it is to say
props and then say some information about

53
00:03:52.790 --> 00:03:58.400
that props like those props instead of
passing text in a string, an array, we're

54
00:03:58.400 --> 00:04:04.500
gonna give some information we're gonna
say the type is string required is true.

55
00:04:04.500 --> 00:04:09.950
The default is Hello Mr. Magoo, or
whatever you want that string to be.

56
00:04:09.950 --> 00:04:14.420
And then here is the template where
I'm passing that information in and

57
00:04:14.420 --> 00:04:17.910
what will happen if you don't
If you do something like let's

58
00:04:17.910 --> 00:04:21.340
say I passed in a Boolean,
it's just gonna yell at you in dev mode.

59
00:04:21.340 --> 00:04:25.170
Like it's not gonna completely
block your ability to do that, but

60
00:04:25.170 --> 00:04:28.140
there will be some warnings
when you're in development, so

61
00:04:28.140 --> 00:04:31.220
that you can see like that
wasn't what it was expecting.

62
00:04:33.110 --> 00:04:35.350
And just a small note,

63
00:04:35.350 --> 00:04:39.410
objects in arrays need their defaults
to be returned from a function.

64
00:04:39.410 --> 00:04:44.470
So rather than saying a default of,
here, if we go back to the string, we

65
00:04:44.470 --> 00:04:49.100
just said default and we pass that string
right in numbers you can do the same.

66
00:04:49.100 --> 00:04:51.790
But if the default is an object or
an array,

67
00:04:51.790 --> 00:04:55.100
we need to pass a function into
that default and return it.

68
00:04:55.100 --> 00:05:00.040
So I would either do this or
if I wanted to do an arrow function I can

69
00:05:00.040 --> 00:05:04.350
make it a little bit cleaner and
return alpa store and carnea SATA.

70
00:05:06.160 --> 00:05:12.180
You don't necessarily need to pass the
data into props to the child either using

71
00:05:12.180 --> 00:05:16.840
that parent component, in other words, it
does not necessarily need to be dynamic.

72
00:05:16.840 --> 00:05:21.210
So you have the option of you
using that view instance data, or

73
00:05:21.210 --> 00:05:25.310
using a static data as you see fit and
I'll show you what I mean by that.

74
00:05:25.310 --> 00:05:29.610
Here we're gonna adjust the data or
adjusting up and we're adjusting down, and

75
00:05:29.610 --> 00:05:34.080
you notice that this is staying 3,
and this is staying 2.

76
00:05:34.080 --> 00:05:37.174
I'm gonna open up this code pen so

77
00:05:37.174 --> 00:05:42.929
it's a little bit more clear,
so if you have this count of 0,

78
00:05:44.932 --> 00:05:50.123
We have two app child's one here and

79
00:05:50.123 --> 00:05:58.350
one here and one of them has
doesn't have a V bind on it.

80
00:05:58.350 --> 00:06:01.530
And the other one does,
remember this colon is that V bind.

81
00:06:02.980 --> 00:06:07.970
So what it's saying here is
maker relationship in that count

82
00:06:09.570 --> 00:06:13.420
to this count, but here it's not bound.

83
00:06:13.420 --> 00:06:17.464
This is just going to be interpreted
as whatever that string is, so I'm,

84
00:06:17.464 --> 00:06:22.680
passing in three here, I'm just passing
it in, and it's just going straight.

85
00:06:22.680 --> 00:06:28.070
So if I wanted to change this to 5,
I could change it to 5,

86
00:06:28.070 --> 00:06:30.770
and that would update to 5, but
it stays consistent, right,

87
00:06:30.770 --> 00:06:34.730
it's not dynamically bound
to this counter here.

88
00:06:34.730 --> 00:06:40.810
This is dynamically bound to this counter,
so we're able to increment and decrement.

