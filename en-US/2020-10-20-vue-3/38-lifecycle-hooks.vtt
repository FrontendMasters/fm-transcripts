WEBVTT

1
00:00:00.130 --> 00:00:01.490
Let's talk about lifecycle hooks.

2
00:00:01.490 --> 00:00:04.562
We talked about components and
how they're mounted and they're unmounted.

3
00:00:04.562 --> 00:00:08.500
And we even used a lifecycle hook before,
but what does that really mean?

4
00:00:09.540 --> 00:00:13.120
We have a bunch of different
things available to us.

5
00:00:13.120 --> 00:00:14.640
And if you're coming
from a React background,

6
00:00:14.640 --> 00:00:18.550
you'll be like, I know about this,
it's very similar.

7
00:00:18.550 --> 00:00:23.120
We have all of these hooks where
we're observing that whether or

8
00:00:23.120 --> 00:00:25.640
not that component has been mounted or
unmounted.

9
00:00:25.640 --> 00:00:30.720
So we have before we've created
the component, created beforeMount,

10
00:00:30.720 --> 00:00:34.050
mounted, I kind of made
the little notes here.

11
00:00:34.050 --> 00:00:35.550
These are my opinions.

12
00:00:35.550 --> 00:00:38.356
Created is a great place to call APIs.

13
00:00:38.356 --> 00:00:41.600
Mounted is great place to
work on DOM operations.

14
00:00:41.600 --> 00:00:47.720
So let's say you're doing something with
d3 or you're loading an animation library.

15
00:00:47.720 --> 00:00:51.990
If you're accessing something inside
of that DOM, it needs to be in

16
00:00:51.990 --> 00:00:55.576
the mounted hook, because otherwise it
will error cuz it doesn't exist yet.

17
00:00:55.576 --> 00:00:59.969
Whereas, well, for APIs it doesn't really

18
00:00:59.969 --> 00:01:04.602
matter if the DOM has fully loaded or
anything.

19
00:01:04.602 --> 00:01:07.460
You can call the API in advance of that.

20
00:01:07.460 --> 00:01:12.030
In fact, you probably should because
then you can kind of get going quicker.

21
00:01:12.030 --> 00:01:14.080
Activated and deactivated,

22
00:01:14.080 --> 00:01:17.700
are things that are only available
to you when you're using keep-alive.

23
00:01:17.700 --> 00:01:23.110
You noticed how we had this kind of moment
with that keep-alive where we started

24
00:01:23.110 --> 00:01:28.740
activating and unactivating a component
that otherwise would have been unmounted.

25
00:01:28.740 --> 00:01:31.125
So there's actually a hook for
that as well.

26
00:01:31.125 --> 00:01:34.255
BeforeUnmount, unmounted,

27
00:01:34.255 --> 00:01:38.335
what I really like about the lifecycle
methods in Vue is they're really legible.

28
00:01:38.335 --> 00:01:42.995
I know exactly what each one
of these means as I read it.

29
00:01:42.995 --> 00:01:46.605
If you're familiar with Vue 2,
these two have changed.

30
00:01:46.605 --> 00:01:50.105
So it used to be beforeDestroyed and
destroyed.

31
00:01:50.105 --> 00:01:54.672
Now it's beforeUnmount, unmounted, which I
really like because it's like beforeMount,

32
00:01:54.672 --> 00:01:56.716
mounted, beforeUnmount, unmounted.

33
00:01:56.716 --> 00:01:59.360
There's more symmetry,
it's a little bit easier.

34
00:02:00.570 --> 00:02:04.260
So we also got renderTracked and
renderTriggered.

35
00:02:04.260 --> 00:02:07.510
And this is new in Vue 3 as well.

36
00:02:07.510 --> 00:02:09.850
And it's really good for debugging,
and I'll show you what I mean.

37
00:02:11.650 --> 00:02:18.430
So if we look at this
lifecycle of this child

38
00:02:18.430 --> 00:02:23.870
when we check the console,
we're hiding and showing child,

39
00:02:23.870 --> 00:02:29.800
we're like beforeCreate, created,
beforeMount, mounted, beforeUnmounted,

40
00:02:29.800 --> 00:02:34.960
mounted, and then we have these
renderTriggered and renderTracked.

41
00:02:34.960 --> 00:02:36.451
You now know what trigger and

42
00:02:36.451 --> 00:02:40.491
track is because we did that whole
section about Vue's reactivity system and

43
00:02:40.491 --> 00:02:43.614
what trigger and
track means in Vue's reactivity system.

44
00:02:43.614 --> 00:02:47.779
So you actually know exactly what
we're plugging into here and

45
00:02:47.779 --> 00:02:50.910
what these kind of keys and targets are.

46
00:02:50.910 --> 00:02:53.910
So that's part of the reason why I was
showing you that if you really need to do

47
00:02:53.910 --> 00:02:57.490
finite debugging,
you know what states those are in.

48
00:02:58.490 --> 00:03:01.130
So if we look at this code pen, really,

49
00:03:01.130 --> 00:03:03.170
I'm just console logging
things in this pen.

50
00:03:04.340 --> 00:03:09.318
So I'm hooking into, This app,

51
00:03:09.318 --> 00:03:13.857
I'm saying is showing as false,
I'm toggling between those states.

52
00:03:16.751 --> 00:03:21.435
And then we've got this child component
that has beforeCreate, created,

53
00:03:21.435 --> 00:03:23.056
beforeMount, mounted.

54
00:03:23.056 --> 00:03:27.641
One thing you'll notice is
when we used methods and

55
00:03:27.641 --> 00:03:32.650
computed in watchers,
we use them in an object like this

56
00:03:32.650 --> 00:03:37.676
with a method inside, so
like, get thing or whatever.

57
00:03:37.676 --> 00:03:42.380
With these, you're really
just using them as functions.

58
00:03:42.380 --> 00:03:46.900
They're not inside another lifecycle
hook object or something like that.

59
00:03:46.900 --> 00:03:48.550
We're using them as functions.

60
00:03:48.550 --> 00:03:53.900
I also, if you need to execute a lot of
logic, what I would say is you should

61
00:03:53.900 --> 00:03:58.510
create a method and
call it from these hooks.

62
00:03:58.510 --> 00:04:02.650
It makes it a little bit more legible
when somebody is maintaining the code and

63
00:04:02.650 --> 00:04:05.100
they're kind of going
through each one of those.

64
00:04:05.100 --> 00:04:08.281
And here we've got the renderTracked,
renderTriggered,

65
00:04:08.281 --> 00:04:10.910
and it's JSON stringifying
all of these things.

66
00:04:12.920 --> 00:04:16.000
Lifecycle hooks also
auto-bind to the instance so

67
00:04:16.000 --> 00:04:19.130
that you can use the component's state and
methods.

68
00:04:19.130 --> 00:04:21.889
So you don't have to console
log what this refers to.

69
00:04:21.889 --> 00:04:24.825
You can say this dot counter and
you know exactly what that is,

70
00:04:24.825 --> 00:04:26.130
which is really nice.

71
00:04:26.130 --> 00:04:28.110
And for that reason,
if you do call a method,

72
00:04:28.110 --> 00:04:32.450
remember to say this dot method
name of whatever you're doing.

73
00:04:32.450 --> 00:04:35.920
For this reason though, you shouldn't use
an error function on a lifecycle method.

74
00:04:35.920 --> 00:04:39.330
It will return the parent instead of
giving you a nice binding out of the box.

75
00:04:39.330 --> 00:04:42.430
So same thing that we
encountered with methods.

76
00:04:42.430 --> 00:04:47.290
If you wanna see a really nice diagram,
we just redid this whole diagram.

77
00:04:47.290 --> 00:04:49.230
And when I say we,
I didn't actually do this one.

78
00:04:49.230 --> 00:04:54.559
So it was probably Ben Hong,
I think, who redid this.

79
00:04:54.559 --> 00:04:58.991
And we have all of these in and
it shows beforeCreate, created, and

80
00:04:58.991 --> 00:05:03.160
this kind of flow chart that shows you
when all of these things were made.

81
00:05:03.160 --> 00:05:05.100
So that's a really useful diagram.

82
00:05:05.100 --> 00:05:06.100
He did a great job with it.

