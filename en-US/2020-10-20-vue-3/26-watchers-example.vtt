WEBVTT

1
00:00:00.270 --> 00:00:04.050
One of the last examples
I'm gonna show you is this

2
00:00:04.050 --> 00:00:07.310
kind of time changer thing that I made.

3
00:00:07.310 --> 00:00:10.504
I think it's a little bit
more of a complex pen.

4
00:00:10.504 --> 00:00:13.504
So I'm not gonna dive into every
little bit of the code, but

5
00:00:13.504 --> 00:00:15.550
I'm gonna kind of explain how it works.

6
00:00:15.550 --> 00:00:19.150
Because I think watchers are really
interesting when you start

7
00:00:19.150 --> 00:00:22.300
reacting to change and
doing things with animation and stuff.

8
00:00:23.530 --> 00:00:29.082
So on this, I have my local time here,
which is 12:22 PM.

9
00:00:29.082 --> 00:00:33.562
And if you go into the code,
you'll note that I'm not using moment or

10
00:00:33.562 --> 00:00:34.960
anything like that.

11
00:00:34.960 --> 00:00:40.070
I'm using native time
JavaScript methods and

12
00:00:40.070 --> 00:00:44.240
I'm able to choose different time zones.

13
00:00:44.240 --> 00:00:46.440
So as I go to different time zones,

14
00:00:46.440 --> 00:00:50.900
you can see that animation
move as well as the dial.

15
00:00:50.900 --> 00:00:56.560
And so what I've done here is I'm hooking
again into GreenSock's animation library.

16
00:00:56.560 --> 00:00:59.640
And we'll do a lot more
in the animation section.

17
00:00:59.640 --> 00:01:05.150
But what I'm able to do is I'm
able to take a full animation,

18
00:01:05.150 --> 00:01:08.705
and I can kind of adjust
the progress of that animation.

19
00:01:08.705 --> 00:01:12.723
GreenSock allows me to hold the whole
instance of that animation and

20
00:01:12.723 --> 00:01:13.998
scrub the progress.

21
00:01:13.998 --> 00:01:17.141
So I create the whole thing
of the whole dial and

22
00:01:17.141 --> 00:01:20.750
also these differences in night and day.

23
00:01:20.750 --> 00:01:26.500
And then I compare where we were and
where we're going in that watch,

24
00:01:26.500 --> 00:01:31.210
from the new value and the old value,
I say, okay, where were you in time?

25
00:01:31.210 --> 00:01:33.170
Where are you gonna be in time?

26
00:01:33.170 --> 00:01:35.640
Let's change that.

27
00:01:35.640 --> 00:01:37.725
So if we go into the code here a bit,

28
00:01:41.416 --> 00:01:46.330
You can see this is a lot of animation
code that we'll dive into in a moment.

29
00:01:46.330 --> 00:01:51.400
But you can see in the watch,
this is that checked value, and

30
00:01:51.400 --> 00:01:53.440
inside that checked value,

31
00:01:53.440 --> 00:01:59.070
I'm basically doing some manipulation
to see what time it was.

32
00:01:59.070 --> 00:02:01.683
And I'm gonna say, okay, are you AM or PM?

33
00:02:01.683 --> 00:02:07.077
And then based on that, let's spin
that progress of the timeline and

34
00:02:07.077 --> 00:02:13.880
also change the animation of the kind of
day lights and mountains above or below.

35
00:02:13.880 --> 00:02:15.995
And so that's how that animation is made.

36
00:02:15.995 --> 00:02:20.420
So since we can watch the beginning
values and the end values,

37
00:02:20.420 --> 00:02:25.325
it allows us all of these
nice ways of hooking into

38
00:02:25.325 --> 00:02:28.475
some more advanced effects that
you can use on the front end.

39
00:02:29.785 --> 00:02:32.485
Cool, you learned so much so far.

40
00:02:32.485 --> 00:02:37.465
We learned directives, we learned methods,
we learned computed, we learn watchers.

41
00:02:37.465 --> 00:02:40.220
These are the basic
building blocks of Vue.

42
00:02:40.220 --> 00:02:44.950
Someone asked if a watcher
can affect another property.

43
00:02:44.950 --> 00:02:48.630
So you're watching that one thing,
can it affect something else?

44
00:02:48.630 --> 00:02:52.924
Now, the thing about it is you're only
really watching that one property,

45
00:02:52.924 --> 00:02:55.621
but you can absolutely
affect something else.

46
00:02:55.621 --> 00:02:58.942
You could affect something by calling
a method within that watcher.

47
00:02:58.942 --> 00:03:02.326
You could affect something else
by just doing something within,

48
00:03:02.326 --> 00:03:06.920
you could watch a property and then change
another property inside of that watcher.

49
00:03:06.920 --> 00:03:08.730
That's totally available to you.

50
00:03:08.730 --> 00:03:11.819
So you wouldn't necessarily
hook them together.

51
00:03:11.819 --> 00:03:15.784
You would still just watch that one
thing that you need to watch to

52
00:03:15.784 --> 00:03:18.270
see the change notification.

53
00:03:18.270 --> 00:03:22.080
But it is flexible in the sense
that you can change other things.

54
00:03:22.080 --> 00:03:27.096
Now, there are some schools of thought
that if you're looking at one thing and

55
00:03:27.096 --> 00:03:30.373
changing another,
it's called the side effect.

56
00:03:30.373 --> 00:03:34.859
And side effects are when you are all
of a sudden changing something that

57
00:03:34.859 --> 00:03:37.720
someone else doesn't really know about.

58
00:03:37.720 --> 00:03:42.490
And so there are kind of purists
in this area who will say

59
00:03:42.490 --> 00:03:46.810
don't do something like that because
you're now changing something that you

60
00:03:46.810 --> 00:03:48.700
didn't know that you are changing.

61
00:03:48.700 --> 00:03:52.250
So that is something to watch out for,
to watch out for.

62
00:03:52.250 --> 00:03:56.620
What I would recommend is that you're
always encapsulating thing and methods and

63
00:03:56.620 --> 00:03:59.390
calling them so that it's a little
bit more explicit and not doing

64
00:03:59.390 --> 00:04:04.700
everything directly in the watcher in
order to kind of change things around.

65
00:04:04.700 --> 00:04:09.250
But it's a little bit different from
a computer property in that sense, that

66
00:04:09.250 --> 00:04:13.930
computer properties are really like giving
you another view from that one piece.

67
00:04:13.930 --> 00:04:17.140
Watchers allow you to
affect multiple pieces.

