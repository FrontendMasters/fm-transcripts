WEBVTT

1
00:00:00.360 --> 00:00:02.280
Let's talk about JavaScript hooks.

2
00:00:02.280 --> 00:00:03.330
This is my favorite part.

3
00:00:03.330 --> 00:00:05.020
I love animating with JavaScript.

4
00:00:05.020 --> 00:00:08.210
And it's not that I hate CSS or anything.

5
00:00:08.210 --> 00:00:11.250
It's that JavaScript is much
more powerful for animation and

6
00:00:11.250 --> 00:00:14.985
a lot of animation that I
like writing is interactive.

7
00:00:14.985 --> 00:00:19.535
And so JavaScript is just
really good at interactivity.

8
00:00:19.535 --> 00:00:23.705
And it also gives us some really nice
things that we can play around with like

9
00:00:23.705 --> 00:00:26.785
timelines, or like the ability to

10
00:00:26.785 --> 00:00:30.915
change those things based on a progress
like we saw in that watchers demo.

11
00:00:32.480 --> 00:00:35.170
This is another reason why
I really like JavaScript.

12
00:00:35.170 --> 00:00:37.160
CSS has limited handles.

13
00:00:37.160 --> 00:00:40.380
And what I mean by that is,
if we look back at this cubic-bezier

14
00:00:40.380 --> 00:00:43.330
I have two handles to work with,
but I have no more.

15
00:00:43.330 --> 00:00:46.911
When I wanted to bounce that ball, I had
to say, go up and down, and up and down,

16
00:00:46.911 --> 00:00:49.164
and up and down, and up and
down, and up and down.

17
00:00:49.164 --> 00:00:51.200
And I have to say all of that stuff.

18
00:00:51.200 --> 00:00:52.950
I have to state all of that stuff.

19
00:00:54.390 --> 00:00:59.550
JavaScript allows for multiple handles,
which means that I can actually

20
00:00:59.550 --> 00:01:05.050
just say go here from here and
apply a bounce ease.

21
00:01:05.050 --> 00:01:09.940
So if I look at GreenSock's Ease
Visualizer here's that kinda two

22
00:01:09.940 --> 00:01:12.380
bezier handle bits.

23
00:01:12.380 --> 00:01:17.694
If I go into a bounce, I can literally
just say, the duration is this,

24
00:01:17.694 --> 00:01:21.856
use the ease of bounce, and
move this across the page.

25
00:01:21.856 --> 00:01:28.050
I could also do elastic and I have some
configurations I can use for this.

26
00:01:29.240 --> 00:01:33.009
So I can change this
a bunch of different ways.

27
00:01:34.960 --> 00:01:39.200
So it allows me to create these
effects really, really fast, and

28
00:01:39.200 --> 00:01:41.060
they're really dynamic.

29
00:01:41.060 --> 00:01:43.730
So when we're working with
the transition component,

30
00:01:43.730 --> 00:01:46.360
we still wrap it in
a transition component.

31
00:01:46.360 --> 00:01:51.166
What we'll use instead is the @ sign,
that V on @ sign, and

32
00:01:51.166 --> 00:01:54.010
we have a bunch of different hooks.

33
00:01:54.010 --> 00:01:59.450
We have before-enter, after-enter,
after-cancelled, so on and so forth.

34
00:01:59.450 --> 00:02:04.066
But really, it's also very
important that you bind CSS false.

35
00:02:04.066 --> 00:02:08.840
What that does is it tells
you don't sniff the CSS

36
00:02:08.840 --> 00:02:10.580
to hook into the transition component.

37
00:02:10.580 --> 00:02:14.480
Because what view will do is
go check out all the CSS and

38
00:02:14.480 --> 00:02:16.560
try to find the corresponding CSS.

39
00:02:16.560 --> 00:02:17.600
This makes it much faster.

40
00:02:17.600 --> 00:02:19.483
It's like ditch the CSS.

41
00:02:19.483 --> 00:02:21.070
[LAUGH] We're working in JavaScript.

42
00:02:21.070 --> 00:02:22.400
So make sure that you add that.

43
00:02:23.450 --> 00:02:25.840
And you don't have to add all of these,
right?

44
00:02:25.840 --> 00:02:28.170
I just showed you all of
these different hooks.

45
00:02:28.170 --> 00:02:31.760
And that looks really daunting,
really you can just say, @enter and

46
00:02:31.760 --> 00:02:34.350
then a method, @leave and then a method.

47
00:02:34.350 --> 00:02:36.380
So it works the same way
a click event would,

48
00:02:36.380 --> 00:02:41.840
where you're hooking into
a method called enterEL leaveEL.

49
00:02:41.840 --> 00:02:43.490
And then we're saying CSS false.

50
00:02:43.490 --> 00:02:47.160
This is what I use nine times out of ten.

51
00:02:47.160 --> 00:02:52.840
So most basic example of hooking into
that in our methods, we'd say enterEL,

52
00:02:52.840 --> 00:02:58.930
we pass the EL that we're manipulating,
and called done at the end.

53
00:02:58.930 --> 00:02:59.948
Then same with leave.

54
00:03:02.062 --> 00:03:05.870
So remember this demo where we had
the good place to type things.

55
00:03:05.870 --> 00:03:09.320
And then we were able to bring
things on and bounce them around and

56
00:03:09.320 --> 00:03:10.080
move them around.

57
00:03:10.080 --> 00:03:13.610
And I told you you had the knowledge
of the first bit of it and

58
00:03:13.610 --> 00:03:18.120
that we would go into the second bit
of it, and now is the time to do that.

59
00:03:18.120 --> 00:03:22.762
So what we're going to do is we have,
this is a good place to type things.

60
00:03:25.503 --> 00:03:34.164
We have that text area with vmodel.lazy
that is attached to that message.

61
00:03:34.164 --> 00:03:35.223
And then here,

62
00:03:35.223 --> 00:03:41.260
that message that we showed on the book
is wrapped in a transition component.

63
00:03:41.260 --> 00:03:44.695
That transition component has
a beforeEnter hook and an enter hook.

64
00:03:44.695 --> 00:03:48.282
It doesn't have a leave hook because
it just disappears on leave,

65
00:03:48.282 --> 00:03:51.000
doesn't do anything to leave.

66
00:03:51.000 --> 00:03:55.870
So that again, this has a conditional
on it, and this transition is like

67
00:03:55.870 --> 00:03:59.710
when this component is mounted,
then do these things.

68
00:03:59.710 --> 00:04:04.550
So if we look at the beforeEnter, we have
a bunch of things that we're setting we're

69
00:04:04.550 --> 00:04:07.990
setting transform perspective,
perspective, transform style and

70
00:04:07.990 --> 00:04:08.600
auto alpha.

71
00:04:10.600 --> 00:04:14.360
You might ask yourself, like why am
I declaring these in JavaScript?

72
00:04:14.360 --> 00:04:19.400
I could actually in CSS, grab this
element and say all of these things.

73
00:04:19.400 --> 00:04:22.450
I don't have to do it right
at the beforeEnter hook.

74
00:04:22.450 --> 00:04:25.980
The reason why I do this in
the beforeEnter hook sometimes is,

75
00:04:25.980 --> 00:04:30.600
these pieces if you know anything about
perspective or transform perspective.

76
00:04:30.600 --> 00:04:34.506
They change the way that we
are able to see that element.

77
00:04:34.506 --> 00:04:40.970
Like you saw that Tron thing was moving
around in space because of a perspective.

78
00:04:40.970 --> 00:04:44.500
But they don't do anything right away.

79
00:04:44.500 --> 00:04:49.800
Only when you start to see it when it's
moving can you really tell those pieces.

80
00:04:49.800 --> 00:04:52.520
So what can happen is,
and has happened to me for

81
00:04:52.520 --> 00:04:56.470
sure, it's like let's say I'm working with
a bunch of other people on a project.

82
00:04:56.470 --> 00:05:00.030
And in my CSS,
I declare a bunch of stuff like this.

83
00:05:00.030 --> 00:05:03.380
They might look at this and be like, what
does this do this doesn't do anything and

84
00:05:03.380 --> 00:05:05.520
developers love to delete code.

85
00:05:05.520 --> 00:05:09.050
So [LAUGH] they might just be like,
I'm gonna delete a bunch of code and

86
00:05:09.050 --> 00:05:11.800
be a hero and
get rid of all of this stuff.

87
00:05:11.800 --> 00:05:15.990
What the beforeEnter hook allows me to
do is document that a little bit for

88
00:05:15.990 --> 00:05:21.290
a developer who comes after me and
say, this is being used for animation.

89
00:05:21.290 --> 00:05:26.100
Please don't delete it because it's
actually going to be used for that.

90
00:05:27.340 --> 00:05:30.700
So we have the EnterEl and done.

91
00:05:30.700 --> 00:05:34.660
One thing to note, Greensock,

92
00:05:34.660 --> 00:05:39.900
the thing that I keep mentioning has
this awesome method called onComplete.

93
00:05:39.900 --> 00:05:41.940
So rather than just
calling done at the end,

94
00:05:41.940 --> 00:05:45.560
I will pass onComplete
done into a timeline and

95
00:05:45.560 --> 00:05:52.210
then it will let Greensock know as soon
as onComplete happens fire that done.

96
00:05:52.210 --> 00:05:57.205
So I'm doing some looping
through things and

97
00:05:57.205 --> 00:06:01.250
math.randomy things and I'm throwing
things around the page because I wanna

98
00:06:01.250 --> 00:06:04.270
little bit of chaos in
order to play with things.

99
00:06:04.270 --> 00:06:07.340
So I have these kind of,
I'm splitting the words apart.

100
00:06:07.340 --> 00:06:11.690
I'm using this library to split words
apart and then I'm throwing them in z's

101
00:06:11.690 --> 00:06:17.340
and y's all over the place and then I'm
asking them to come back home to 000.

102
00:06:17.340 --> 00:06:21.660
So it starting out at 000, but
I'm in the initial state, I take it and

103
00:06:21.660 --> 00:06:23.350
I put it somewhere else.

104
00:06:23.350 --> 00:06:26.870
And then I say go somewhere else and
do all these somewhere else things and

105
00:06:26.870 --> 00:06:30.130
then come back home at the end.

106
00:06:30.130 --> 00:06:34.690
So you might ask, why do you use
split text for something like this?

107
00:06:34.690 --> 00:06:36.830
You could just break apart these letters.

108
00:06:36.830 --> 00:06:37.980
That's totally true.

109
00:06:37.980 --> 00:06:41.590
But one thing that split text
does is it honors line breaks.

110
00:06:41.590 --> 00:06:45.678
So this is a good tight place to type
things isn't all over the page or

111
00:06:45.678 --> 00:06:46.413
whatever.

112
00:06:46.413 --> 00:06:52.430
It is exactly in the same
format as what's above it.

113
00:06:52.430 --> 00:06:55.885
Which was important to me for
this demo, cool.

114
00:06:58.094 --> 00:07:00.870
So this is going over that code again.

115
00:07:00.870 --> 00:07:05.175
And again, this is a good place
to put all of the elements

116
00:07:05.175 --> 00:07:09.786
gSAP.set is a way of setting those
things before you start working.

117
00:07:09.786 --> 00:07:17.090
And again, onComplete = done, it has to be
an object passed in to the gSAP timeline.

118
00:07:17.090 --> 00:07:21.150
If you're not using gSAP timelines,
you can just say done like this.

