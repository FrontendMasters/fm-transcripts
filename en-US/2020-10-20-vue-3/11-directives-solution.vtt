WEBVTT

1
00:00:00.490 --> 00:00:03.520
Okay, so if we look at the solution,

2
00:00:05.670 --> 00:00:10.340
we have input v model dot number,
remember number was one of

3
00:00:10.340 --> 00:00:15.870
the modifiers we went over for
v model that converts strings to numbers.

4
00:00:15.870 --> 00:00:20.290
So we can also say input type number
because that's valid HTML, right?

5
00:00:20.290 --> 00:00:22.550
We're right writing semantic HTML.

6
00:00:22.550 --> 00:00:25.040
We can also put this and

7
00:00:25.040 --> 00:00:29.470
make sure that what we're getting that
the inputs that we're getting are numbers.

8
00:00:29.470 --> 00:00:32.573
So we have the input,
which is now a number.

9
00:00:32.573 --> 00:00:36.333
And then this one is also a number.

10
00:00:36.333 --> 00:00:40.927
And really right now what we're
doing is outputting these two

11
00:00:40.927 --> 00:00:42.790
in Mustache templates.

12
00:00:42.790 --> 00:00:46.024
In the future, we're going to learn
about methods and compute it and

13
00:00:46.024 --> 00:00:48.770
we're going to learn all
different ways of writing this.

14
00:00:48.770 --> 00:00:51.770
That might be the way that you actually
write it in an application but

15
00:00:51.770 --> 00:00:56.310
just to show that you can also evaluate
something that's super simple in

16
00:00:56.310 --> 00:01:01.160
a Mustache template,
we are adding num one and num two.

17
00:01:01.160 --> 00:01:02.540
Now, for

18
00:01:02.540 --> 00:01:08.540
this other row, where we have this kind of
empty string where we said name, right?

19
00:01:08.540 --> 00:01:13.380
We have a select with a v model of name so
we establish a relationship between

20
00:01:13.380 --> 00:01:17.940
name and name,
we have our different options.

21
00:01:17.940 --> 00:01:22.870
So we have carne asada, pollo, bean,
al pastor, and we have our select.

22
00:01:24.130 --> 00:01:29.410
And we have that thing that was hard
coded before, of my favorite taco is.

23
00:01:29.410 --> 00:01:31.930
But this time, we have v-f name.

24
00:01:31.930 --> 00:01:33.630
So right now it's an empty string.

25
00:01:33.630 --> 00:01:35.190
It won't evaluate to true.

26
00:01:35.190 --> 00:01:38.830
It'll evaluate to false until
we select something, and

27
00:01:38.830 --> 00:01:41.190
then it will be outputted to the page.

28
00:01:41.190 --> 00:01:43.680
And in here, you might have guessed,

29
00:01:43.680 --> 00:01:47.810
our Mustache templates have
to output that name as well.

30
00:01:47.810 --> 00:01:52.110
And then we can say,
my favorite kind of taco is pollo.

31
00:01:52.110 --> 00:01:54.130
So I'm gonna pause here for a second and

32
00:01:54.130 --> 00:01:56.730
ask if there's any questions
that I can answer.

33
00:01:56.730 --> 00:02:01.010
&gt;&gt; Just people saying they didn't figure
out how to use the dot number and

34
00:02:01.010 --> 00:02:04.590
people saying they use
parse int in the matrix.

35
00:02:04.590 --> 00:02:06.590
&gt;&gt; Yeah, you can absolutely use parse int.

36
00:02:06.590 --> 00:02:09.370
I mean, this is a valid JavaScript,
also works.

37
00:02:09.370 --> 00:02:11.200
That's totally fine.

38
00:02:11.200 --> 00:02:14.780
The modifiers are helpful because
then you don't have to run around and

39
00:02:14.780 --> 00:02:16.790
do all of these other things.

40
00:02:16.790 --> 00:02:21.020
And so like part of the exercises just
getting used to using those modifiers.

41
00:02:21.020 --> 00:02:25.520
But you should not feel ashamed or
silly for using JavaScript.

42
00:02:25.520 --> 00:02:28.370
We will use view in
tandem with JavaScript.

43
00:02:28.370 --> 00:02:32.660
It's offering an API to make some
things a little bit easier for that.

44
00:02:34.490 --> 00:02:36.950
Great, is there anything else?

45
00:02:36.950 --> 00:02:38.240
&gt;&gt; I have one question.

46
00:02:38.240 --> 00:02:42.405
&gt;&gt; Sure.
&gt;&gt; When you added that v model dot number

47
00:02:42.405 --> 00:02:45.730
equal to I had the same thing.

48
00:02:45.730 --> 00:02:49.690
But do we need to specify type
equal to number as well and why?

49
00:02:50.870 --> 00:02:55.990
&gt;&gt; You don't, however, there are times
that we are gonna specify a type.

50
00:02:55.990 --> 00:02:58.330
And one of them is when we're using props.

51
00:02:58.330 --> 00:03:02.990
So when we start to work
with different components,

52
00:03:02.990 --> 00:03:08.140
what we'll do is, as we say what props are
being handed from component to component,

53
00:03:08.140 --> 00:03:11.840
we will specify what
type that prop should be.

54
00:03:11.840 --> 00:03:15.970
And so then we can say okay,
it is a number or a string or

55
00:03:15.970 --> 00:03:19.660
maybe an array that has
both in case of both.

56
00:03:19.660 --> 00:03:22.550
You can also use TypeScript with view.

57
00:03:22.550 --> 00:03:26.950
Actually, in view three,
we rewrote the entire core, so

58
00:03:26.950 --> 00:03:29.268
that it's all written in TypeScript now.

59
00:03:29.268 --> 00:03:33.380
So if you've ever use view two before and
TypeScript worked, but

60
00:03:33.380 --> 00:03:38.340
they were like little idiosyncrasies and
that made it a little bit harder.

61
00:03:38.340 --> 00:03:42.230
Now view three works really beautifully
with TypeScript because the very base of

62
00:03:42.230 --> 00:03:44.060
it is is written in TypeScript.

63
00:03:44.060 --> 00:03:46.814
So view three is TypeScript compatible.

64
00:03:46.814 --> 00:03:51.060
So if you wanna be working with types for
everything, you absolutely can.

65
00:03:51.060 --> 00:03:53.850
Because of the scope of
the intro to view of

66
00:03:53.850 --> 00:03:56.690
this course we're not gonna
go into all of TypeScript but

67
00:03:56.690 --> 00:04:02.360
I will show you that prop validation
with types, great question.

68
00:04:02.360 --> 00:04:04.770
&gt;&gt; Should you use lazy with select?

69
00:04:05.780 --> 00:04:07.858
&gt;&gt; You could if you wanted to.

70
00:04:07.858 --> 00:04:13.355
So basically v model dot lazy, I tend
to use that with things that are larger

71
00:04:13.355 --> 00:04:18.865
amounts of data like text area is a really
good example or an input because really

72
00:04:18.865 --> 00:04:23.045
the reason I'm using it is because there's
a lot of inputs that people are doing.

73
00:04:23.045 --> 00:04:24.705
I don't want it to
evaluate all the time and

74
00:04:24.705 --> 00:04:30.535
in fact most of the time that I'm using
dot lazy its with form validation.

75
00:04:30.535 --> 00:04:35.450
I'll kind of mention here and then go
over in the other course on Friday when

76
00:04:35.450 --> 00:04:38.860
we're building web apps with viewer and
live coding the whole thing.

77
00:04:38.860 --> 00:04:43.740
I don't know if this is the T Rex
arm live coding [LAUGH]

78
00:04:43.740 --> 00:04:49.390
where I'll go over how you can
use Vuelidate with validation.

79
00:04:49.390 --> 00:04:55.150
I tend to use dot lazy when I want to
wait until the user's done typing,

80
00:04:55.150 --> 00:04:56.780
to show them if there's an error.

81
00:04:56.780 --> 00:04:59.390
Cuz otherwise it's kind of
annoying to fill out a form and

82
00:04:59.390 --> 00:05:00.690
you can get that input all the time.

83
00:05:02.560 --> 00:05:04.610
&gt;&gt; I have a question on keys.

84
00:05:04.610 --> 00:05:05.110
&gt;&gt; Yeah.

85
00:05:07.010 --> 00:05:09.825
&gt;&gt; So does a key need to be
unique to the entire dom?

86
00:05:10.860 --> 00:05:15.300
&gt;&gt; Yes, so ideally the key is unique,
and sometimes people pass in the index,

87
00:05:15.300 --> 00:05:18.320
if there's nothing that you know for
sure is unique.

88
00:05:18.320 --> 00:05:23.011
But what I would suggest is that
you load a library like you UUID,

89
00:05:23.011 --> 00:05:26.780
UUID is a library that
generates unique IDs.

90
00:05:26.780 --> 00:05:31.660
And it's really easy to work with,
you import it from NPM and

91
00:05:31.660 --> 00:05:35.670
then you call a function and
it will generate a unique ID for you.

92
00:05:35.670 --> 00:05:40.080
So if you have a big list, let's say you
have a lot of data coming from a server or

93
00:05:40.080 --> 00:05:42.760
let's say the data is slightly
different and it's going to a cart.

94
00:05:42.760 --> 00:05:47.210
I would use you UUID in that case to make
sure that large amount of data like let's

95
00:05:48.410 --> 00:05:52.750
say, you have a food app and there are two
restaurants in your area that are named

96
00:05:52.750 --> 00:05:57.180
the same, like you have two Starbucks
in your area or something like that.

97
00:05:57.180 --> 00:06:03.250
In that case, you can't rely on
the data to be exactly different.

98
00:06:03.250 --> 00:06:05.862
You can't make sure that
your values are different.

99
00:06:05.862 --> 00:06:09.580
So UUID can really help with
that key uniqueness and

100
00:06:09.580 --> 00:06:12.690
again, that's something that
we'll go in into more depth

101
00:06:12.690 --> 00:06:15.140
on in the Friday course of
building web apps with you.

102
00:06:16.690 --> 00:06:21.960
&gt;&gt; So then a follow up question with that,
keys have to be numbers or strings.

103
00:06:21.960 --> 00:06:24.290
You can't use like an object or
something as a key?

104
00:06:24.290 --> 00:06:30.360
&gt;&gt; Exactly, you can use an object with
a key, it will yell at you [LAUGH].

105
00:06:30.360 --> 00:06:31.890
Technically you can but

106
00:06:31.890 --> 00:06:35.800
we will throw a warning that that's
just not what you would like.

107
00:06:35.800 --> 00:06:41.710
You would like a string or a number.

108
00:06:41.710 --> 00:06:45.040
&gt;&gt; Looks like somebody tried to use
a computed property or Daniel did,

109
00:06:45.040 --> 00:06:48.190
are you getting into
that later in the day?

110
00:06:48.190 --> 00:06:52.750
&gt;&gt; I am getting into it right after this
workshop or right after this section.

111
00:06:52.750 --> 00:06:54.820
Sorry, [LAUGH] not after the workshop.

112
00:06:54.820 --> 00:06:57.687
&gt;&gt; I tried to use a computed property,
but for some reason,

113
00:06:57.687 --> 00:07:00.149
I can't get the syntax to work.

114
00:07:00.149 --> 00:07:01.839
&gt;&gt; Yeah, we're gonna go over that next.

115
00:07:01.839 --> 00:07:06.214
So we can totally go over all of the
pieces of the syntax that you might need

116
00:07:06.214 --> 00:07:06.870
for this.

