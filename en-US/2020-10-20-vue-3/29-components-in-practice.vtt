WEBVTT

1
00:00:00.154 --> 00:00:06.130
So again, not using the state of the
parent, child:count, without that v-bind:.

2
00:00:06.130 --> 00:00:10.061
Using the state of the parent is going
to say child, and then this colon, and

3
00:00:10.061 --> 00:00:12.773
then we're passing in some
bit of JavaScript here.

4
00:00:12.773 --> 00:00:16.199
And in this case, it's that
dynamically-bound value from the parent.

5
00:00:18.251 --> 00:00:21.781
Each component instance has
its own isolated scope.

6
00:00:21.781 --> 00:00:23.194
And data must be a function.

7
00:00:23.194 --> 00:00:26.962
So far, all day long we've been
returning data as a function, but

8
00:00:26.962 --> 00:00:28.792
this is just worth calling out.

9
00:00:28.792 --> 00:00:32.113
It used to be in Vue 2 that you
could write data as an object and

10
00:00:32.113 --> 00:00:35.841
not a function, and then it wouldn't
have its own isolated scope.

11
00:00:35.841 --> 00:00:37.503
But it will error now.

12
00:00:37.503 --> 00:00:41.446
In Vue 3, we just say,
data must be a function.

13
00:00:41.446 --> 00:00:46.345
So there's this great doc's example
that kind of shows if you don't

14
00:00:46.345 --> 00:00:50.914
make data a function,
it will retain the state from all of them.

15
00:00:50.914 --> 00:00:54.803
And you definitely don't want
that if you have multiple

16
00:00:54.803 --> 00:00:58.205
components that need to
have different pieces.

17
00:00:58.205 --> 00:00:59.392
Camel casing will be converted.

18
00:00:59.392 --> 00:01:00.482
This is really cool,

19
00:01:00.482 --> 00:01:03.761
because in JavaScript a lot of
times we want to use camel casing.

20
00:01:03.761 --> 00:01:06.829
That's kind of like a typical
thing that we do in JavaScript,

21
00:01:06.829 --> 00:01:08.430
is use camel casing for values.

22
00:01:08.430 --> 00:01:11.325
So we have some boolean value here, but

23
00:01:11.325 --> 00:01:16.340
Vue knows that in HTML we don't
usually use camel case values.

24
00:01:16.340 --> 00:01:21.159
There are no camel case
attributes in HTML.

25
00:01:21.159 --> 00:01:25.274
So it will convert boolean
value to kebab-case.

26
00:01:25.274 --> 00:01:27.730
It will make sure that
there's a line here.

27
00:01:27.730 --> 00:01:31.321
So in case you're wondering what's
changed between two things.

28
00:01:31.321 --> 00:01:34.516
You're still able to use it in JavaScript,
but in HTML,

29
00:01:34.516 --> 00:01:37.790
it will automatically convert it for
you, which is nice.

30
00:01:39.240 --> 00:01:41.472
So let's refactor
something into a component.

31
00:01:41.472 --> 00:01:47.035
I mentioned that for this commenting,
for this, add a comment, I like tacos,

32
00:01:47.035 --> 00:01:52.362
cuz I'm that random person who says
stuff that's not related to your post.

33
00:01:52.362 --> 00:01:57.934
If we look at that earlier example,
and we look at it on CodePen,

34
00:01:57.934 --> 00:02:02.803
what we had before is this
comment in comments comment.

35
00:02:02.803 --> 00:02:04.980
And then we have this input.

36
00:02:04.980 --> 00:02:07.592
And it's all one component, right?

37
00:02:07.592 --> 00:02:11.977
Now let's say we wanted to create
a component out of these li's,

38
00:02:11.977 --> 00:02:16.296
because I'm gonna use them
somewhere else in the application.

39
00:02:16.296 --> 00:02:20.740
They're gonna be styled the same, and
I need to use them again and again.

40
00:02:20.740 --> 00:02:25.620
And it makes more sense for
me to make them reusable as a component.

41
00:02:25.620 --> 00:02:28.192
So a bit of a contrived example,

42
00:02:28.192 --> 00:02:33.500
[LAUGH] but this is a simple
example that we can work with.

43
00:02:33.500 --> 00:02:38.411
So we would still, in the parent
component, have newComments as a string,

44
00:02:38.411 --> 00:02:39.882
comments as an array.

45
00:02:39.882 --> 00:02:45.160
And then we say add comment, and
we say this.comment.push(newComment).

46
00:02:45.160 --> 00:02:49.199
But here, we're gonna render
that individual comment, and

47
00:02:49.199 --> 00:02:51.382
that template's gonna be an li.

48
00:02:51.382 --> 00:02:56.874
And we can say, from here,
I want up props, which is comment.post.

49
00:02:56.874 --> 00:02:59.030
I'm just gonna call it comment.post.

50
00:02:59.030 --> 00:03:02.840
So here, whenever I wanna use this
template, that's what it will render.

51
00:03:04.540 --> 00:03:06.564
And now instead of ul, li,

52
00:03:06.564 --> 00:03:11.600
now I can say v-for comment in comments,
and I can pass the key.

53
00:03:11.600 --> 00:03:13.574
And I say the comment post is the comment.

54
00:03:13.574 --> 00:03:15.233
I'm binding that prop,

55
00:03:15.233 --> 00:03:20.690
which means that I can use an individual
comment elsewhere in my app, right?

56
00:03:20.690 --> 00:03:24.884
If I needed to use that li somewhere else,
I could use it somewhere else.

57
00:03:27.533 --> 00:03:29.620
But let's make it a little bit better.

58
00:03:29.620 --> 00:03:34.152
So okay,
here's the example in the CodePen version.

59
00:03:34.152 --> 00:03:39.893
So we've got, This comment in comments,

60
00:03:43.742 --> 00:03:48.510
You can see here, Individual comments.

61
00:03:48.510 --> 00:03:53.130
So I'm using this component of
individual comment instead of inserting

62
00:03:53.130 --> 00:03:54.770
that li directly.

63
00:03:54.770 --> 00:03:57.823
So I've got that app.component.

64
00:03:57.823 --> 00:04:00.360
By the way, the ordering does matter here.

65
00:04:00.360 --> 00:04:06.546
So I can't put the app.component
before I declare the Vue.createApp.

66
00:04:06.546 --> 00:04:10.170
And this ordering is actually
different between Vue 2 and Vue 3.

67
00:04:10.170 --> 00:04:13.466
So if you're coming from Vue 2,
that's something to watch out for.

68
00:04:16.791 --> 00:04:18.586
But let's make it one step better.

69
00:04:18.586 --> 00:04:22.606
Because what usually happens when
we're commenting on something isn't

70
00:04:22.606 --> 00:04:26.925
just a list of things, because I
don't know who that came from, right?

71
00:04:26.925 --> 00:04:29.925
And it makes a lot more sense
if I have something like this,

72
00:04:29.925 --> 00:04:31.897
to make it into a component of its own.

73
00:04:31.897 --> 00:04:34.338
Because it has an image
that we're rendering,

74
00:04:34.338 --> 00:04:38.437
it has a user that we're rendering,
it has the comment that we're rendering.

75
00:04:38.437 --> 00:04:43.725
And if I wanted to say something like
I like tacos, which I definitely do,

76
00:04:43.725 --> 00:04:48.353
there I am, Mr. Magoo, and
now I'm able to create this piece.

77
00:04:48.353 --> 00:04:51.924
So let's look at this as like
a more interesting comment.

78
00:04:51.924 --> 00:04:55.799
Because you could see, if I had this
comment form here, or maybe I have

79
00:04:55.799 --> 00:05:00.855
a comment on a blog post somewhere else
in the app, I could reuse this piece.

80
00:05:00.855 --> 00:05:06.383
So again, here, now comments has
a little bit more information because

81
00:05:06.383 --> 00:05:11.472
we've got not just the text, but
the author and the author image.

82
00:05:11.472 --> 00:05:14.340
And so we've got the text,
author, and image.

83
00:05:14.340 --> 00:05:18.443
Here, this is hard coded, but you could
see if you're working with an API that

84
00:05:18.443 --> 00:05:21.508
knows who your user is,
that this would not be hard coded.

85
00:05:21.508 --> 00:05:25.900
And so we're kind of adding that piece.

86
00:05:25.900 --> 00:05:30.854
But, interesting,
here we don't have in the template,

87
00:05:30.854 --> 00:05:35.066
some hard coded template of div and
p tag or whatever.

88
00:05:35.066 --> 00:05:37.470
We're not passing that all into a string.

89
00:05:37.470 --> 00:05:38.739
What we're doing instead,

90
00:05:40.753 --> 00:05:44.791
Is we have this thing called
script type="text/x-template".

91
00:05:44.791 --> 00:05:46.920
And I have an id on it.

92
00:05:46.920 --> 00:05:49.975
So this is going to be
the individual comment component.

93
00:05:49.975 --> 00:05:52.891
And as you can see,
it's much easier to work with.

94
00:05:52.891 --> 00:05:56.719
In the sense that I'm not
passing a bunch of li's and

95
00:05:56.719 --> 00:06:00.991
images and small and
whatever into a big string of things.

96
00:06:00.991 --> 00:06:03.850
And here I've got syntax highlighting.

97
00:06:03.850 --> 00:06:05.963
Here, I can work with it
a little bit differently.

98
00:06:05.963 --> 00:06:09.080
So if I can't work with
a single file component,

99
00:06:09.080 --> 00:06:14.097
if I can't work with it in that way and I
just need to add a CDN link to something,

100
00:06:14.097 --> 00:06:18.372
this is a more comfortable way of
adding components to something.

101
00:06:18.372 --> 00:06:23.253
You can declare them in script
type="text/x-template" with the id of

102
00:06:23.253 --> 00:06:24.652
common-template.

103
00:06:24.652 --> 00:06:29.523
And you can name your component
differently from that template.

104
00:06:29.523 --> 00:06:33.100
What you're saying here is,
whatever your template is,

105
00:06:33.100 --> 00:06:35.802
go grab that id on the page
where you find it.

106
00:06:35.802 --> 00:06:39.634
So this comment-template has
a relationship with this,

107
00:06:39.634 --> 00:06:43.784
just like the app has a relationship
with that div id app above.

108
00:06:43.784 --> 00:06:49.230
See, and
we're passing in the props of commentpost.

109
00:06:49.230 --> 00:06:53.260
So now you can see that this is
much more interesting and useful.

110
00:06:53.260 --> 00:06:57.899
I'm passing in commentpost, which is
an object that has the author image,

111
00:06:57.899 --> 00:06:59.356
the author, the text.

112
00:06:59.356 --> 00:07:04.096
And then I'm now able to create this
unit that's really composable and

113
00:07:04.096 --> 00:07:05.920
useful for all over my app.

114
00:07:08.800 --> 00:07:11.020
Let's look at this backpack example again.

115
00:07:11.020 --> 00:07:14.810
So if we're looking at this backpack,
it's a similar kind of thing, right?

116
00:07:14.810 --> 00:07:17.510
We've got our item is a backpack.

117
00:07:17.510 --> 00:07:19.554
Our URL is this image.

118
00:07:19.554 --> 00:07:21.933
We've got an app.component, which again,

119
00:07:21.933 --> 00:07:24.683
has a template that we're
associating things with.

120
00:07:24.683 --> 00:07:29.071
But this time, it has its own data,
and that's okay.

121
00:07:29.071 --> 00:07:33.813
You can pass props in and
have this one have its own data.

122
00:07:33.813 --> 00:07:38.074
And we might wanna do that if we are gonna
gather the data from this thing and

123
00:07:38.074 --> 00:07:42.956
post it somewhere else that has nothing to
do with we're getting it from the parent,

124
00:07:42.956 --> 00:07:43.472
right?

125
00:07:43.472 --> 00:07:47.771
So I just wanted to show that you don't
necessarily have to do everything

126
00:07:47.771 --> 00:07:48.630
in props.

127
00:07:48.630 --> 00:07:52.211
You can totally pass things down and
the component can be smart, right?

128
00:07:52.211 --> 00:07:56.475
Sometimes we call
components dumb components,

129
00:07:56.475 --> 00:08:01.050
meaning that their job is
only to render things.

130
00:08:01.050 --> 00:08:03.702
But in this case,
you can add more functionality.

131
00:08:03.702 --> 00:08:07.670
I can add methods, computed,
watchers, all that I want.

132
00:08:07.670 --> 00:08:12.687
So if we look at what we have here,
let's look at it in CodePen,

133
00:08:12.687 --> 00:08:15.497
We've got our app-child in our div id app.

134
00:08:15.497 --> 00:08:18.260
It passing in the item, counter, and url.

135
00:08:18.260 --> 00:08:20.682
That's all it's really doing.

136
00:08:20.682 --> 00:08:24.076
It's only responsible for
adding in this app-child,

137
00:08:24.076 --> 00:08:28.710
and then that component itself is
actually doing all the hard work, right?

138
00:08:28.710 --> 00:08:32.790
That component itself is
rendering the backpack and

139
00:08:32.790 --> 00:08:35.050
giving us the click events and
things like that.

140
00:08:35.050 --> 00:08:36.658
And we're working with that data.

141
00:08:36.658 --> 00:08:39.492
Now, why would I show you this again?

142
00:08:39.492 --> 00:08:44.233
I'm showing you this again in part
because building off of this you can make

143
00:08:44.233 --> 00:08:46.650
a whole functional ecommerce store.

144
00:08:48.040 --> 00:08:52.633
So let's say we had a big
manifest of information.

145
00:08:52.633 --> 00:08:57.710
We have a big API and it gives us all
this data about what our items are and

146
00:08:57.710 --> 00:09:02.273
what images we're using and
all of this stuff about each unit,

147
00:09:02.273 --> 00:09:04.532
how many sizes, everything.

148
00:09:04.532 --> 00:09:08.438
Now we can pass it in, And

149
00:09:08.438 --> 00:09:13.115
we've got this manifest that's,
here again, hard coded, but,

150
00:09:13.115 --> 00:09:17.806
again, on Friday, I'm gonna live
code from a real API and things.

151
00:09:17.806 --> 00:09:19.755
And we've got that template child.

152
00:09:19.755 --> 00:09:22.964
This is just the same as
you saw it before, but

153
00:09:22.964 --> 00:09:28.051
this time we're passing things in as
props and I'm able to reuse them.

154
00:09:28.051 --> 00:09:31.850
I'm able to reuse each one of
these a little bit separately.

155
00:09:31.850 --> 00:09:37.330
And you could see how something like
that could turn into a whole store,

156
00:09:37.330 --> 00:09:39.718
a whole shopping experience.

157
00:09:39.718 --> 00:09:41.480
So that's really cool.

158
00:09:41.480 --> 00:09:46.104
So here, again, is the app with
the manifest that has some information.

159
00:09:46.104 --> 00:09:48.671
Then we're passing it in.

160
00:09:48.671 --> 00:09:50.451
item is unit.item.

161
00:09:50.451 --> 00:09:52.332
url is unit.url.

162
00:09:52.332 --> 00:09:56.192
I'm showing you it this way because last
time I just pass the whole object in.

163
00:09:56.192 --> 00:09:59.964
I'm also showing you that if
you wanted finite control,

164
00:09:59.964 --> 00:10:05.318
rather than pass the whole object, you
could pass in individual pieces as well.

165
00:10:06.912 --> 00:10:09.434
And so here we've got this component, and

166
00:10:09.434 --> 00:10:12.315
here's where all of
the component stuff lives.

