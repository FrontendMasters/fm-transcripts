WEBVTT

1
00:00:00.310 --> 00:00:02.070
Usage in components.

2
00:00:02.070 --> 00:00:07.200
For state we'd say
this.store.state.nameofthing.

3
00:00:07.200 --> 00:00:11.020
So this is a read, so we can actually
just access the state directly.

4
00:00:11.020 --> 00:00:12.760
We can access getters directly.

5
00:00:12.760 --> 00:00:16.030
We could say
this.store.getters.nameofthing.

6
00:00:17.150 --> 00:00:20.960
For mutations, we would say
this.store.commit.nameofthing,

7
00:00:20.960 --> 00:00:22.800
just like we just did in that action.

8
00:00:22.800 --> 00:00:26.060
So if we were in a method, and don't
worry, we'll do this in a method in just

9
00:00:26.060 --> 00:00:29.930
a second,
we can call a mutation from a component.

10
00:00:29.930 --> 00:00:33.160
And we can access it that way.

11
00:00:33.160 --> 00:00:36.990
Actions are also write,
this.store.dispatch.nameofthing.

12
00:00:38.750 --> 00:00:42.860
So if we wanted to show this in a
component, typically what you would do is,

13
00:00:42.860 --> 00:00:44.440
you'd use it in a computed property.

14
00:00:44.440 --> 00:00:50.515
And the reason why is, we're really trying
to use this as efficiently as possible and

15
00:00:50.515 --> 00:00:55.065
we wanna cache this and not update
it until the dependency is changed.

16
00:00:55.065 --> 00:00:57.265
So computed properties are really good for
this.

17
00:00:57.265 --> 00:01:02.415
So in the computed properties we would
say count is this.$store.state.count.

18
00:01:02.415 --> 00:01:06.445
Triple counter is
this.$store.getters.tripleCounter.

19
00:01:06.445 --> 00:01:09.435
In methods, if I went and
clicked a button and

20
00:01:09.435 --> 00:01:13.360
I wanted something to fire in the store
I would say, add click increment.

21
00:01:13.360 --> 00:01:17.830
It would call this increment and
we'd say this.store.commit, increment and

22
00:01:17.830 --> 00:01:20.130
pass in something.

23
00:01:20.130 --> 00:01:25.079
Same with asyncIncrement,
this.store.dispatch, asyncIncrement.

24
00:01:26.350 --> 00:01:27.740
And move that forward.

25
00:01:27.740 --> 00:01:31.360
So in the repo, you have
an application that's set up for you.

26
00:01:31.360 --> 00:01:35.760
And it's called vuex-example, and it does
this, what it's showing on the page.

27
00:01:35.760 --> 00:01:37.990
So we have the state from the store.

28
00:01:37.990 --> 00:01:43.466
We have a getter from the triple
counter from the store.

29
00:01:43.466 --> 00:01:48.833
Let's increment two from a mutation, let's
increment by two with an action async.

30
00:01:48.833 --> 00:01:55.156
And what I've done here is I've
moved each type of these things

31
00:01:55.156 --> 00:02:01.440
into its own component, so
that you can see them separately.

32
00:02:01.440 --> 00:02:05.270
So you can see a getter by itself,
you can see a mutation by itself.

33
00:02:05.270 --> 00:02:11.430
So if you go into vuex-example,
and in that source

34
00:02:11.430 --> 00:02:16.980
you can see a store that looks just like
what we just showed in that last slide.

35
00:02:18.420 --> 00:02:23.470
And then if you go back to the components,
you can see AppGetter,

36
00:02:23.470 --> 00:02:28.570
AppMutation and AppAction, and
I'll walk you through each one of them.

37
00:02:28.570 --> 00:02:33.570
So in the store, it's what we just
talked about with the state.counter.

38
00:02:33.570 --> 00:02:37.460
In the main app, we've got
the state from the store is state.

39
00:02:37.460 --> 00:02:43.940
And we have, as a computed property,
state return this.$store.state.counter.

40
00:02:43.940 --> 00:02:48.010
I could have also called this counter,
and then this would be called counter.

41
00:02:48.010 --> 00:02:49.910
So that's how I would use state directly.

42
00:02:51.000 --> 00:02:55.100
I'm also importing these components,
Getter, Mutation and Action.

43
00:02:55.100 --> 00:02:56.840
Getter, Mutation and Action.

44
00:02:56.840 --> 00:03:01.060
And then I call them above, Getter,
Mutation, Action, I put them on the page.

45
00:03:01.060 --> 00:03:02.600
So here's the Getter.

46
00:03:02.600 --> 00:03:06.940
I say the Getter for the triple counter
from the store is triple in computed,

47
00:03:06.940 --> 00:03:11.900
I say triple, and I say return
this.$store.getters.tripleCounter.

48
00:03:11.900 --> 00:03:16.586
And, remember,
that's corresponding to this in store.js,

49
00:03:16.586 --> 00:03:20.592
getters, tripleCounter,
return state.counter.

50
00:03:21.846 --> 00:03:26.125
A mutation, I say,
let's increment by one with a mutation and

51
00:03:26.125 --> 00:03:28.880
I have at-click increments.

52
00:03:28.880 --> 00:03:33.654
And in my methods I have increments,
and I say, this.$store.commit,

53
00:03:33.654 --> 00:03:36.990
increment, I'm passing a payload of 1.

54
00:03:36.990 --> 00:03:41.820
So here that payload is represented
by num, I say state.counter.

55
00:03:41.820 --> 00:03:43.460
So anytime I click this button,

56
00:03:44.580 --> 00:03:48.480
its gonna call this method
that commits this mutation.

57
00:03:48.480 --> 00:03:50.440
So that's how I'm changing
things in the store.

58
00:03:50.440 --> 00:03:53.410
I'm able to change things in
the store from the components.

59
00:03:54.420 --> 00:03:57.532
If I wanted to dispatch an action,
it's the same.

60
00:03:57.532 --> 00:04:02.440
I can say a button at click,
and I have async increments.

61
00:04:02.440 --> 00:04:04.780
So wait a second and add 10.

62
00:04:04.780 --> 00:04:10.630
It will say this.$store.dispatch and
pass in a parameter of 10.

63
00:04:10.630 --> 00:04:16.700
And if we look at the actions,
it's incrementAsync.

64
00:04:16.700 --> 00:04:21.686
And we said, we're passing in the number,
we're waiting for a second and

65
00:04:21.686 --> 00:04:26.532
we're gonna commit that increment
that you saw before in the mutation.

66
00:04:30.132 --> 00:04:32.790
There's shortcuts all over the place vuex.

67
00:04:32.790 --> 00:04:35.410
This is a shortcut that I really like.

68
00:04:35.410 --> 00:04:39.950
It's called mapState, or you could
say map getters or map actions or

69
00:04:39.950 --> 00:04:40.770
any of those things.

70
00:04:40.770 --> 00:04:45.593
So you can use this thing called
import mapState from vuex, and

71
00:04:45.593 --> 00:04:48.270
then you spread mapState.

72
00:04:48.270 --> 00:04:50.910
And now I can go grab all
the state from the store.

73
00:04:50.910 --> 00:04:55.834
I don't have to say, count,
return this.$store.state.count,

74
00:04:55.834 --> 00:04:59.760
posts, return this.store in our computed.

75
00:04:59.760 --> 00:05:02.130
I can just say,
get the count, get the post,

76
00:05:02.130 --> 00:05:06.410
get the items and
map them to count, post, items.

77
00:05:06.410 --> 00:05:07.658
And then I can use them directly.

78
00:05:07.658 --> 00:05:11.790
So using mapState can really
help because you're just like,

79
00:05:11.790 --> 00:05:14.190
I probably need a couple
of things from the store.

80
00:05:14.190 --> 00:05:16.910
I'm just going to use them really fast.

81
00:05:16.910 --> 00:05:19.195
So, that's one way of doing that.

82
00:05:19.195 --> 00:05:23.190
So this still allows us to make our
own computed properties if we wish to.

