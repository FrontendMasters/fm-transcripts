WEBVTT

1
00:00:00.000 --> 00:00:01.357
Lifecycle Hooks.

2
00:00:01.357 --> 00:00:05.331
Hooks are named the same but
prefixed with on in camel case.

3
00:00:05.331 --> 00:00:08.153
And if you come from react,
this will look familiar to you.

4
00:00:08.153 --> 00:00:14.380
So here we've got on mounted and
we've got console.log state.count.

5
00:00:14.380 --> 00:00:18.973
So, it's similar in the sense
that we're still just calling

6
00:00:18.973 --> 00:00:21.368
mounted as a function, right?

7
00:00:21.368 --> 00:00:25.317
And this time we're really calling it
as a function is not even a method,

8
00:00:25.317 --> 00:00:26.372
it's a function.

9
00:00:26.372 --> 00:00:31.419
And we're saying on mounted and
we, create a function and

10
00:00:31.419 --> 00:00:35.336
then we're able to access or
create things.

11
00:00:35.336 --> 00:00:39.057
It's really good, composition API is
really good for reusable objects.

12
00:00:39.057 --> 00:00:44.301
So, some examples if we wanted to extract
just the logic without the template,

13
00:00:44.301 --> 00:00:49.017
we might use it for getting the dimensions
of a viewport in a component.

14
00:00:49.017 --> 00:00:52.155
We might use it for
gathering specific mousemove events.

15
00:00:52.155 --> 00:00:54.866
We might use it for
the base elements of charts.

16
00:00:54.866 --> 00:00:59.155
We might use it for clip boards,
or media queries, or dark mode.

17
00:00:59.155 --> 00:01:04.150
So here are a couple of examples of where
we might want to encapsulate that logic,

18
00:01:04.150 --> 00:01:08.201
and use it in a few different
places among different components.

19
00:01:08.201 --> 00:01:13.379
But we just want the logic part,
we just want that piece of it.

20
00:01:13.379 --> 00:01:16.173
So we are able to do that.

21
00:01:16.173 --> 00:01:23.315
So a couple people might ask, how do I
merge the older API with the newer API?

22
00:01:23.315 --> 00:01:27.341
And I didn't find a good example online,
so I made one,

23
00:01:27.341 --> 00:01:30.697
that showed options API and
composition API.

24
00:01:30.697 --> 00:01:36.526
So here's a CodeSandbox
which is similar to code

25
00:01:36.526 --> 00:01:42.484
creates an entire application
that you can use and share.

26
00:01:42.484 --> 00:01:48.278
So if I have that app that we are used to
and we have things like our components,

27
00:01:48.278 --> 00:01:52.036
like we were used to right
we have that app.view.

28
00:01:52.036 --> 00:01:56.857
We have a components folder where we
can put components that we're using in

29
00:01:56.857 --> 00:01:58.168
this application.

30
00:01:58.168 --> 00:02:01.770
This first app.view,
is using the options API.

31
00:02:01.770 --> 00:02:07.305
In other words, it's got,
the import and then we've got the data.

32
00:02:07.305 --> 00:02:11.225
But if we wanted to merge the two
what I would do is, I would say, and

33
00:02:11.225 --> 00:02:15.705
we've got computed and we've got methods,
I would say set up inside here.

34
00:02:15.705 --> 00:02:18.968
And here we have a new
folder called composable.

35
00:02:18.968 --> 00:02:21.952
And this is becoming kind of our standard,
for

36
00:02:21.952 --> 00:02:26.096
how we're going to define when
we're using a composition API.

37
00:02:26.096 --> 00:02:28.580
So I wouldn't put it in components,

38
00:02:28.580 --> 00:02:31.635
I would put it in a folder
called composable.

39
00:02:31.635 --> 00:02:34.426
And let's say I wanted
to use window width,

40
00:02:34.426 --> 00:02:37.529
like I wanted to find
the value of a window width.

41
00:02:37.529 --> 00:02:42.186
And I wanted to just encapsulate that
bit of logic, I don't want a template,

42
00:02:42.186 --> 00:02:43.918
I'm not using a component.

43
00:02:43.918 --> 00:02:48.051
I just want that little bit of
logic in a JavaScript file.

44
00:02:48.051 --> 00:02:51.330
What I would do is say
at import ref unmounted.

45
00:02:51.330 --> 00:02:53.842
At this point we're gonna
say at view composition API.

46
00:02:53.842 --> 00:02:59.010
This will change coming
up as we move into,

47
00:02:59.010 --> 00:03:01.888
view becoming stable.

48
00:03:01.888 --> 00:03:07.351
We say export function use window width,
we've got a ref.

49
00:03:07.351 --> 00:03:13.319
We've got our mounted hook,
where we calculate the window inner width,

50
00:03:13.319 --> 00:03:18.035
and we're gonna plot that
window inner width to this ref,

51
00:03:18.035 --> 00:03:22.866
which you can think of as data,
width equals zero, right?

52
00:03:22.866 --> 00:03:26.780
And we're returning the width,
that's the thing that we're getting.

53
00:03:26.780 --> 00:03:29.920
If we go into the app into the setup,

54
00:03:29.920 --> 00:03:35.789
we're bringing in use window width
from the composable folder and

55
00:03:35.789 --> 00:03:40.424
we're saying const width
equals use window width.

56
00:03:40.424 --> 00:03:44.441
Remember, that's what we export
default we export it, and

57
00:03:44.441 --> 00:03:49.342
we're returning width and now we can
use width, inside of our template.

58
00:03:49.342 --> 00:03:53.743
We could say, this.width times two,
we could use it in methods.

59
00:03:53.743 --> 00:03:58.735
And it's still that this dot width right,
that this dot width is now

60
00:03:58.735 --> 00:04:04.447
available to us in the options API, so
you can absolutely use them together.

61
00:04:04.447 --> 00:04:06.737
So that is reporting an alert,

62
00:04:06.737 --> 00:04:12.210
that we captured using the options API
in that encapsulated bit of logic.

63
00:04:12.210 --> 00:04:14.975
You can also use them with templates, but

64
00:04:14.975 --> 00:04:18.846
this is kind of like how we
thought about mixings, right?

65
00:04:18.846 --> 00:04:23.426
We're thinking about just
encapsulating a bit of functionality

66
00:04:23.426 --> 00:04:27.682
that we would like to use in
other places in our application.

