WEBVTT

1
00:00:00.228 --> 00:00:04.024
So watchers are good for
asynchronous updates and updates and

2
00:00:04.024 --> 00:00:06.068
transitions with data changes.

3
00:00:06.068 --> 00:00:09.359
And part of the reason why I
explained all that to you is so

4
00:00:09.359 --> 00:00:13.083
that you know how all of those
things are tracked and rendered.

5
00:00:13.083 --> 00:00:19.830
So what's gonna happen is we're gonna
watch any data property that we created.

6
00:00:19.830 --> 00:00:23.910
So if we have this counter of 0, and

7
00:00:23.910 --> 00:00:30.030
we increase this,
we're gonna watch this counter.

8
00:00:30.030 --> 00:00:34.520
So unlike in compute computed properties,
where we have a different name for

9
00:00:34.520 --> 00:00:37.780
a different type of data and
those have to be different.

10
00:00:37.780 --> 00:00:40.580
We're going to declare
something that's the same.

11
00:00:40.580 --> 00:00:44.642
We're gonna say we're gonna watch this and

12
00:00:44.642 --> 00:00:48.274
console log every time it's changed.

13
00:00:48.274 --> 00:00:51.771
So if I go into my console,
if I increase this counter,

14
00:00:51.771 --> 00:00:55.343
every time I hit that button,
the counter has changed,

15
00:00:55.343 --> 00:00:58.704
the counter has changed,
the counter has changed.

16
00:00:58.704 --> 00:01:03.051
So basically what we're doing is we're
hooking into that reactivity system that

17
00:01:03.051 --> 00:01:04.251
we just talked about.

18
00:01:04.251 --> 00:01:07.439
And we're saying,
anytime something is changed,

19
00:01:07.439 --> 00:01:11.425
that we've that something that
in that effect has been changed,

20
00:01:11.425 --> 00:01:15.634
please let us know something or
please let us do something with that.

21
00:01:15.634 --> 00:01:19.107
Or please let us,
create a new function or something.

22
00:01:19.107 --> 00:01:25.412
So it gives us a little layer
to start to intercept and

23
00:01:25.412 --> 00:01:31.016
interacts with that
change in this property.

24
00:01:31.016 --> 00:01:34.842
We also have access to the new value and
the old value.

25
00:01:34.842 --> 00:01:39.360
Remember how I talked about how that hover
state, it's like the moment that you start

26
00:01:39.360 --> 00:01:43.850
hovering, the time then it's hovering
in the end state of the hovering value.

27
00:01:43.850 --> 00:01:45.330
This is kind of similar to that.

28
00:01:45.330 --> 00:01:46.766
We have a watched property.

29
00:01:46.766 --> 00:01:49.966
We have the access to the new value,
of course.

30
00:01:49.966 --> 00:01:52.030
But we also have access to the old value.

31
00:01:52.030 --> 00:01:56.635
So if you wanna do things that,
check between the differences of things,

32
00:01:56.635 --> 00:02:01.241
like let's say you wanted to animate
the state between two things in a data

33
00:02:01.241 --> 00:02:04.682
visualization, which I'll
show you in a little bit.

34
00:02:04.682 --> 00:02:07.134
Then you can totally do that in here.

35
00:02:07.134 --> 00:02:11.570
So you could say,
watch watched property, new value and

36
00:02:11.570 --> 00:02:14.166
old value, your dope code here.

37
00:02:14.166 --> 00:02:16.433
And we can also gain
access to nested values.

38
00:02:16.433 --> 00:02:17.873
So let's say we have an object.

39
00:02:17.873 --> 00:02:21.500
And we actually wanna watch
something inside of that object,

40
00:02:21.500 --> 00:02:22.763
we can say deep true.

41
00:02:22.763 --> 00:02:27.119
And then we say nested watch property,
new value, old value.

42
00:02:27.119 --> 00:02:28.226
And that's the same.

43
00:02:28.226 --> 00:02:30.809
So if we go back to this counter,

44
00:02:30.809 --> 00:02:35.136
we've got this counter
where we're able to update.

45
00:02:35.136 --> 00:02:38.449
What we're console logging
here is the new value,

46
00:02:38.449 --> 00:02:41.925
we passed in the new value and
the old value this time.

47
00:02:41.925 --> 00:02:44.224
And we say the counter has changed.

48
00:02:44.224 --> 00:02:47.219
It was old value it is now new value.

49
00:02:47.219 --> 00:02:51.523
So I opened this up, In here, and

50
00:02:51.523 --> 00:02:54.996
I say the counter is changed,
it was 0, now it's 1.

51
00:02:54.996 --> 00:02:57.765
It was 1, now it's 2.

52
00:02:57.765 --> 00:02:59.551
It was 2, now it's 1.

53
00:02:59.551 --> 00:03:02.445
So this is the simplest
example I can show you.

54
00:03:02.445 --> 00:03:10.350
But it actually allows you to do
lots of different pieces here.

55
00:03:10.350 --> 00:03:13.535
So let's say we wanted to make
a virtualized scroller or

56
00:03:13.535 --> 00:03:17.870
something like every time we get to
the bottom of the page, we wanna watch for

57
00:03:17.870 --> 00:03:19.930
the state of the bottom of the page.

58
00:03:19.930 --> 00:03:23.620
So that we can add more
things from an API.

59
00:03:23.620 --> 00:03:25.919
Let's go into the code pen for a moment.

60
00:03:29.323 --> 00:03:32.873
Let's open it actually
in a whole new window.

61
00:03:35.343 --> 00:03:38.969
We are gathering beers from this API.

62
00:03:38.969 --> 00:03:42.490
And if we go here into our View tab.

63
00:03:42.490 --> 00:03:45.911
We see an array of a few
objects that we've gotten.

64
00:03:45.911 --> 00:03:48.337
And we say bottom is false.

65
00:03:48.337 --> 00:03:51.177
And then anytime the bottom is true,
it's gonna add,

66
00:03:51.177 --> 00:03:53.788
it's gonna call out to the API and
get more beers.

67
00:03:53.788 --> 00:03:56.508
It's just gonna call and
get more, and more beers.

68
00:03:56.508 --> 00:03:59.069
And these are all beer
appended to that array.

69
00:03:59.069 --> 00:04:03.208
So we've got that all
from this punk beers API.

70
00:04:03.208 --> 00:04:06.288
Because if you're gonna drink a lot
of beer when you run out of beer,

71
00:04:06.288 --> 00:04:07.215
you need more beer.

72
00:04:07.215 --> 00:04:09.182
That's just obvious, right?

73
00:04:09.182 --> 00:04:12.722
So we've got this bottom
is false right now.

74
00:04:12.722 --> 00:04:15.987
We've got this empty beers array.

75
00:04:15.987 --> 00:04:20.137
And what we're doing here is we're
going to at first listen for

76
00:04:20.137 --> 00:04:25.404
we're gonna use a created lifecycle
method, which I'll explain in a minute.

77
00:04:25.404 --> 00:04:30.899
But basically, what it allows us to do
is to say as soon as this component

78
00:04:30.899 --> 00:04:36.501
is created, start listening on this
window event listener for scroll.

79
00:04:36.501 --> 00:04:39.783
And this dot bottom calls
this top bottom visible.

80
00:04:39.783 --> 00:04:45.304
Remember when I said that you can call
a method from a lifecycle hook or

81
00:04:45.304 --> 00:04:46.738
something else.

82
00:04:46.738 --> 00:04:50.175
So we have access to this
method called bottom visible.

83
00:04:50.175 --> 00:04:52.594
It's this stop bottom visible.

84
00:04:52.594 --> 00:04:56.118
And in here,
we're evaluating the scroll height, right?

85
00:04:56.118 --> 00:05:01.049
We're returning whether or not we've hit
the bottom of the page where we're gonna

86
00:05:01.049 --> 00:05:04.299
say, whether or
not the bottom of the page is visible.

87
00:05:04.299 --> 00:05:09.469
We also have this method called add beer,
where we reach out to the punk API.

88
00:05:09.469 --> 00:05:11.761
We grab a bunch of things.

89
00:05:11.761 --> 00:05:14.951
And we, assign them to API info and

90
00:05:14.951 --> 00:05:19.137
we push that this dot
beers dot push API info.

91
00:05:19.137 --> 00:05:23.337
So we've got this empty array,
we're gonna add beers.

92
00:05:23.337 --> 00:05:26.586
Anytime we add a beer,
we're gonna push on to that array.

93
00:05:26.586 --> 00:05:31.404
And if this.bottomvisible
calls this.addbeer,

94
00:05:31.404 --> 00:05:36.448
the same for the watch,
we're passing in a new value.

95
00:05:36.448 --> 00:05:41.699
If this is true, if the new value
is true of the bottom is visible,

96
00:05:41.699 --> 00:05:43.235
then we add a beer.

97
00:05:43.235 --> 00:05:48.209
So now we're able to add some
punk beers as soon as we

98
00:05:48.209 --> 00:05:51.111
get to the bottom of the page.

99
00:05:51.111 --> 00:05:55.725
So as we said, here,
we're watching this bottom is false.

100
00:05:55.725 --> 00:05:59.295
We're seeing if it turns into
something else, some other value.

101
00:06:02.282 --> 00:06:04.665
And here we've got the created that,

102
00:06:04.665 --> 00:06:08.402
starts to add the beers as soon
as the component is mounted.

103
00:06:08.402 --> 00:06:12.970
We're checking if the bottom is visible.

104
00:06:12.970 --> 00:06:14.384
And then we add a beer.

105
00:06:14.384 --> 00:06:16.816
And the add beer is calling out to axio.

106
00:06:16.816 --> 00:06:21.088
It's using axios to get more beers and
push it on.

107
00:06:21.088 --> 00:06:24.592
Now and
this is the HTML that it takes to do this.

108
00:06:24.592 --> 00:06:27.551
Of course,
we're using a v-for beer and beers.

109
00:06:27.551 --> 00:06:30.530
I also have this v-if here.

110
00:06:30.530 --> 00:06:34.940
I'm gonna say if there's no length to
the beers array show this loading thing.

111
00:06:34.940 --> 00:06:36.223
But we're on a pretty fast connection.

112
00:06:36.223 --> 00:06:37.717
So it didn't have to show that.

113
00:06:37.717 --> 00:06:42.539
But that's a good thing to note for
if you're waiting on an API,

114
00:06:42.539 --> 00:06:46.481
you might wanna show like
a little loader and stuff.

115
00:06:46.481 --> 00:06:49.292
You probably don't wanna always
implement this yourself.

116
00:06:49.292 --> 00:06:54.196
There's a great library called
vue-virtual-scroller, and

117
00:06:54.196 --> 00:06:56.744
it helps if I spell it correctly.

118
00:06:56.744 --> 00:06:59.335
And then it actually goes to the repo.

119
00:06:59.335 --> 00:07:03.037
So we it's by a guy named Jim
who's actually on vue core team.

120
00:07:03.037 --> 00:07:08.351
He made a really great virtual
scroller that has lazy parts of it.

121
00:07:08.351 --> 00:07:10.069
It's blazing fast.

122
00:07:10.069 --> 00:07:11.321
It's really wonderful.

123
00:07:11.321 --> 00:07:13.007
And he has this great demo here.

124
00:07:13.007 --> 00:07:18.856
So if you need to use a virtual scroller,
I strongly suggest that.

125
00:07:18.856 --> 00:07:23.722
I also mentioned that you could change
data sets based on these watchers, right?

126
00:07:23.722 --> 00:07:26.558
I have the first dataset second dataset.

127
00:07:26.558 --> 00:07:30.067
And it doesn't matter if I
started from the third and

128
00:07:30.067 --> 00:07:34.633
I go to the first it's still able
to transition between those bars.

129
00:07:34.633 --> 00:07:37.328
SVG is really good for
this because it's built with math.

130
00:07:37.328 --> 00:07:40.951
I love SVG for this reason,
I can build all sorts of things.

131
00:07:40.951 --> 00:07:46.357
And indeed, this graph is not
using D3 to build the graph.

132
00:07:46.357 --> 00:07:50.991
I'm you just using view
directives to create this graph.

133
00:07:50.991 --> 00:07:56.725
So if I look over here what I mean
by that is I can make some computed

134
00:07:56.725 --> 00:08:01.927
properties as well,
that have the max length of things and

135
00:08:01.927 --> 00:08:06.088
a max range of things so
that I can make my axes.

136
00:08:06.088 --> 00:08:09.158
And this probably looks
like number garbage to you.

137
00:08:09.158 --> 00:08:14.522
[LAUGH] But really, it's using
SVG to build all of these pieces.

138
00:08:14.522 --> 00:08:17.715
If you wanna learn more about
how SVG works with the DOM.

139
00:08:17.715 --> 00:08:23.397
And how to build things with SVG,
I have another course that's advanced SVG,

140
00:08:23.397 --> 00:08:27.974
on front end masters that you can
learn some of these premises.

141
00:08:27.974 --> 00:08:30.497
But if we look through this watch,

142
00:08:30.497 --> 00:08:35.809
what I'm doing is I'm looking at
the selected, whatever is selected.

143
00:08:35.809 --> 00:08:39.837
And I have I create a dummy object
that will get updated by GSAP,

144
00:08:39.837 --> 00:08:41.892
which is an animation library.

145
00:08:41.892 --> 00:08:46.732
I have an update function that is
invoked on each tween step we'll

146
00:08:46.732 --> 00:08:48.676
use this to push the data.

147
00:08:48.676 --> 00:08:52.089
We create an object to hold
the source data to be tweaked and

148
00:08:52.089 --> 00:08:54.540
the function pointer for update events.

149
00:08:54.540 --> 00:08:59.624
We turn we go in this for loop we
turn the current index into a string.

150
00:08:59.624 --> 00:09:04.128
And then we tween over, because that's
what Green Talk will expect from us.

151
00:09:04.128 --> 00:09:06.585
And then we're tweening over
our target dummy object.

152
00:09:06.585 --> 00:09:07.881
But only for this specific key.

153
00:09:07.881 --> 00:09:11.077
So then we're able to kind of
look between those values.

154
00:09:11.077 --> 00:09:13.211
And I have a couple more examples here.

155
00:09:13.211 --> 00:09:16.794
So again,
we're watching that selected value.

156
00:09:16.794 --> 00:09:20.353
And we're able to go between them.

