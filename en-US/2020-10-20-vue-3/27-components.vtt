WEBVTT

1
00:00:00.330 --> 00:00:02.180
All right,
let's get started with Components.

2
00:00:02.180 --> 00:00:06.799
I mean, we are getting really far today,
so we've done directives,

3
00:00:06.799 --> 00:00:08.694
method computed watchers.

4
00:00:08.694 --> 00:00:12.340
Now, we're gonna talk about components
then we're gonna build something a little

5
00:00:12.340 --> 00:00:15.360
bit with a CLI and then talk about Nuxt,
which is a meta-framework.

6
00:00:15.360 --> 00:00:18.740
Don't worry,
I'll go into specific detail about that.

7
00:00:18.740 --> 00:00:23.270
We'll do animations, and
we'll do composition API,

8
00:00:23.270 --> 00:00:27.850
and custom directives, and
then we'll end with Vuex.

9
00:00:27.850 --> 00:00:30.320
So when we're talking about components,

10
00:00:30.320 --> 00:00:34.060
there are actually multiple ways
of declaring a Vue component.

11
00:00:34.060 --> 00:00:35.740
It's very flexible in this way.

12
00:00:36.810 --> 00:00:41.250
I would say that there is a very simple
way of making a Vue component, but

13
00:00:41.250 --> 00:00:45.690
it's not that flexible, and
it's not that nice to work with.

14
00:00:45.690 --> 00:00:49.980
So we're gonna go from the simplest
example that's like not as useful.

15
00:00:49.980 --> 00:00:53.810
And we'll go to the most complex
example that's much more useful.

16
00:00:53.810 --> 00:00:55.110
And by most complex,

17
00:00:55.110 --> 00:00:59.340
what I really mean is we're building
something with a CLI and a build tool.

18
00:00:59.340 --> 00:01:03.905
So it's not actually that complex because
Vue offers really, really nice CLI.

19
00:01:05.305 --> 00:01:09.820
So, Templates,
Vue.js uses HTML-based template syntax to

20
00:01:09.820 --> 00:01:13.850
bind the view instance to the DOM,
which is really useful for components.

21
00:01:14.980 --> 00:01:17.930
As I mentioned earlier,
templates are optional.

22
00:01:17.930 --> 00:01:22.080
You can also write render functions and
I linked up to the docs there.

23
00:01:22.080 --> 00:01:24.530
You can also use JSX.

24
00:01:24.530 --> 00:01:28.390
I link up here because we're not gonna
go into a huge amount of detail here.

25
00:01:28.390 --> 00:01:30.580
If you're interested,
you can definitely check that out.

26
00:01:31.990 --> 00:01:36.710
We'll start with strings, which is useful
only for really, really small cases.

27
00:01:36.710 --> 00:01:39.150
And then we'll move to a script tag.

28
00:01:39.150 --> 00:01:42.680
And then we're gonna move to single-file
templates in the next section.

29
00:01:42.680 --> 00:01:47.480
And that's kind of the most common use
case you'll see in a Vue application.

30
00:01:48.970 --> 00:01:50.740
So we'll start with this template.

31
00:01:50.740 --> 00:01:53.270
It's okay, but it's not terribly useful.

32
00:01:53.270 --> 00:01:56.420
So we've got like our
Vue.createApp(App).mount('#app')

33
00:01:56.420 --> 00:01:57.594
like we had before.

34
00:01:57.594 --> 00:01:59.690
So we've got this div id="app".

35
00:01:59.690 --> 00:02:03.620
And we're inserting into that,
you might have noticed that we're not even

36
00:02:03.620 --> 00:02:07.000
putting anything inside of that,
we're able to declare a template.

37
00:02:07.000 --> 00:02:15.610
And then we could say h1, h1, and
that changes that tag to an h1.

38
00:02:15.610 --> 00:02:20.990
So, I'm putting everything in,
through this string.

39
00:02:20.990 --> 00:02:23.200
So, I can use a string if I want.

40
00:02:23.200 --> 00:02:26.640
And sometimes people get confused
because they'll visit the Vue docs and

41
00:02:26.640 --> 00:02:29.720
they'll see that and they'll say, I don't
wanna write everything as a string.

42
00:02:29.720 --> 00:02:32.420
Don't worry, that's not a common use case.

43
00:02:32.420 --> 00:02:38.333
That's just a really simple one if you
wanna show some something very quickly.

44
00:02:38.333 --> 00:02:42.698
Now why would we use components
inside of a Vue app?

45
00:02:42.698 --> 00:02:46.430
Well, I'm a bit of a neck beard,

46
00:02:46.430 --> 00:02:51.880
back in the olden days of web development,
you just throw a lot of HTML on a page and

47
00:02:51.880 --> 00:02:55.960
it would be this big honking thing, and
you'd have to kind of sort through like,

48
00:02:55.960 --> 00:02:59.920
where are everything,
where did everything go?

49
00:02:59.920 --> 00:03:03.400
And then eventually we moved
to like PHP includes and

50
00:03:03.400 --> 00:03:07.000
we started to think about, like,
how do we organize this mess?

51
00:03:07.000 --> 00:03:11.930
And so probably components are familiar
to you if you've been doing

52
00:03:11.930 --> 00:03:12.970
front end dev for a while.

53
00:03:12.970 --> 00:03:17.360
But just in case, if we have a page
that's like an index page, and

54
00:03:17.360 --> 00:03:24.040
it has a header and a sidebar where
we're looping through a bunch of items,

55
00:03:24.040 --> 00:03:28.430
a main area with a blogpost,
which is post in posts and

56
00:03:28.430 --> 00:03:33.510
a footer, it becomes a lot clear where
we're going and what we're doing, right?

57
00:03:33.510 --> 00:03:37.950
If I needed to get into the sidebar and do
something, I know immediately when I look

58
00:03:37.950 --> 00:03:43.910
at this, I'm going right into the sidebar,
I'm gonna look in that blogpost component.

59
00:03:43.910 --> 00:03:47.430
So components, you can think of them
as a collection of elements that

60
00:03:47.430 --> 00:03:52.450
are encapsulated into a group, that can
be accessed through one single element.

61
00:03:52.450 --> 00:03:57.520
So if we have this collection of
elements a div, p tag, div, p tag,

62
00:03:58.640 --> 00:04:04.690
we can access this particular group of
elements through a callout component,

63
00:04:04.690 --> 00:04:09.690
we just say callout once, and it knows to
render all of those things all at once.

64
00:04:09.690 --> 00:04:12.120
So it makes our code a lot more legible.

65
00:04:12.120 --> 00:04:14.960
It makes our ability to kind
of traverse our code and

66
00:04:14.960 --> 00:04:17.070
maintain our code much
more legible as well.

67
00:04:19.030 --> 00:04:21.328
So let's look at the simplest
possible component.

68
00:04:21.328 --> 00:04:25.350
I'm always gonna start from like the
simplest thing and then build off of that.

69
00:04:25.350 --> 00:04:27.090
So we've got our const app.

70
00:04:27.090 --> 00:04:30.160
In our data,
we've got message hi from parent.

71
00:04:30.160 --> 00:04:32.000
And then we've got our app.component.

72
00:04:32.000 --> 00:04:35.510
And this one, again is just a template,
hi from child.

73
00:04:35.510 --> 00:04:40.300
So if we look at our HTML, what we have
is, we're piping in the message here,

74
00:04:40.300 --> 00:04:46.600
we're gonna establish a relationship
between message and message.

75
00:04:46.600 --> 00:04:54.085
And then I'm also going to add a
component-a, and that component-a is here.

76
00:04:54.085 --> 00:04:58.437
So we say app.component,
because we called it app here,

77
00:04:58.437 --> 00:05:04.085
app.component, component-a, and
then we have this template.

78
00:05:04.085 --> 00:05:08.885
If I wanted to change these tags I could
just like in the last example, and

79
00:05:08.885 --> 00:05:13.800
in fact, if I wanted to reuse
this component, I could have,

80
00:05:13.800 --> 00:05:17.740
hi from child, hi from child,
hi from child, and

81
00:05:17.740 --> 00:05:21.770
then we can output multiple
components to that page.

82
00:05:21.770 --> 00:05:23.850
But if I wanted to change this one h1,

83
00:05:25.980 --> 00:05:31.510
then you can see multiple h1s
coming from that template.

84
00:05:31.510 --> 00:05:35.350
So, now we have like the simplest
component that we're working with.

85
00:05:35.350 --> 00:05:37.990
But this still isn't
how we do it in an app.

86
00:05:37.990 --> 00:05:41.980
So Vue is a progressive framework,
so we support incremental adoption.

87
00:05:41.980 --> 00:05:46.330
We support some adoption as
you kind of migrate over.

88
00:05:46.330 --> 00:05:49.450
As I mentioned before,
you can add a script tag, and

89
00:05:49.450 --> 00:05:54.590
then you can get going with that script
tag and use it in an existing code base.

90
00:05:54.590 --> 00:05:58.900
So components are a collection of elements
that can be encapsulated into a group

91
00:05:58.900 --> 00:06:01.840
that can be accessed
through one single element.

92
00:06:01.840 --> 00:06:04.780
So if we have div and a p tag, and div and

93
00:06:04.780 --> 00:06:08.390
p, and all of these collection of elements
and we wanted to make sure that we could

94
00:06:08.390 --> 00:06:12.190
access that again and again,
we can do this callout, and

95
00:06:12.190 --> 00:06:17.210
we can say callout anytime we want this
specific group of components or elements.

96
00:06:18.340 --> 00:06:23.353
So the simplest possible component
that we have is this hi from parent,

97
00:06:23.353 --> 00:06:24.440
hi from child.

98
00:06:24.440 --> 00:06:30.410
And we can say, we have this message
that goes to this HTML element.

99
00:06:30.410 --> 00:06:34.130
We have a message here that's
coming from the parent.

100
00:06:34.130 --> 00:06:35.668
And we said const app.

101
00:06:35.668 --> 00:06:40.280
In that app.component has the component-a.

102
00:06:40.280 --> 00:06:43.350
Component-a is accessed here.

103
00:06:43.350 --> 00:06:48.270
So, we can say here, hi from child,
if I wanted to change the child,

104
00:06:48.270 --> 00:06:53.850
I can say h1, h1, and
that changes that child's component.

105
00:06:53.850 --> 00:06:58.360
So, here we're able to create this app

106
00:06:58.360 --> 00:07:02.900
that also creates the ability
to access that template.

107
00:07:04.440 --> 00:07:08.350
But this still isn't how we actually do it
in an app, Vue is a progressive framework,

108
00:07:08.350 --> 00:07:10.530
so we support incremental adoption.

109
00:07:10.530 --> 00:07:16.028
So, if you have an existing app and let's
say it uses jQuery or Angular or whatever.

110
00:07:16.028 --> 00:07:20.150
And you wanted to start slowly using Vue,
or migrating to it,

111
00:07:20.150 --> 00:07:24.900
because we are able to add it either in
a template, or with a script tag, and

112
00:07:24.900 --> 00:07:29.690
we don't have to create an entire
build process from scratch.

113
00:07:29.690 --> 00:07:32.500
We can support incremental adoption.

114
00:07:32.500 --> 00:07:37.040
I wrote this article replacing jQuery
with Vue, no build step necessary for

115
00:07:37.040 --> 00:07:40.450
Smashing Magazine, because people
were asking me how to do that, right?

116
00:07:40.450 --> 00:07:45.800
They were saying, like, I have this really
old app, I'm using jQuery, how do I just,

117
00:07:45.800 --> 00:07:51.110
with a script tag, replace pieces of
my functionality from jQuery to Vue and

118
00:07:51.110 --> 00:07:53.750
get started using Vue and
that walks through that

