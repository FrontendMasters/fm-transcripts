WEBVTT

1
00:00:00.190 --> 00:00:02.930
Methods computed in watchers.

2
00:00:02.930 --> 00:00:05.330
Methods are bound to the view instance.

3
00:00:05.330 --> 00:00:06.712
They're incredibly useful.

4
00:00:06.712 --> 00:00:09.420
They are functions that you'd
like to access in directives,

5
00:00:09.420 --> 00:00:13.020
but I say functions that you'd like to
access in directives because that's

6
00:00:13.020 --> 00:00:14.630
a pretty interesting part of it.

7
00:00:14.630 --> 00:00:17.080
But they're functions that
you can access in any part.

8
00:00:17.080 --> 00:00:20.510
You can access them in lifecycle
hooks that we will go over later.

9
00:00:20.510 --> 00:00:25.060
You can access them in other methods or
even in computed properties.

10
00:00:25.060 --> 00:00:27.270
So let's go over methods.

11
00:00:27.270 --> 00:00:32.170
They're really aptly named because
when you look at the view instance and

12
00:00:32.170 --> 00:00:36.360
the options API,
that data is really an object.

13
00:00:36.360 --> 00:00:40.290
So far what we've been working with
in data is just one big object.

14
00:00:40.290 --> 00:00:46.010
And methods are a function that hangs
off of the view instance object.

15
00:00:46.010 --> 00:00:49.393
So they're very aptly named in this case.

16
00:00:49.393 --> 00:00:54.270
So if we look at something like this demo,
we have these pixels across.

17
00:00:54.270 --> 00:00:56.110
You can see I'm tracking
the pixels across and

18
00:00:56.110 --> 00:01:00.420
also doing some updating
of these hue values.

19
00:01:00.420 --> 00:01:04.100
And then I have a very simple
incrementer and decrementer.

20
00:01:04.100 --> 00:01:07.970
So let's open this in CodePen.

21
00:01:07.970 --> 00:01:11.770
So what we have going on here
is we're tracking two things.

22
00:01:11.770 --> 00:01:15.110
I'm just showing you two
different things at the same time.

23
00:01:15.110 --> 00:01:20.050
We've got this counter equals zero, and
we're able to increment the counter and

24
00:01:20.050 --> 00:01:21.180
decrement the counter.

25
00:01:21.180 --> 00:01:22.920
Now, this is not that much logic,

26
00:01:22.920 --> 00:01:25.890
we could have written this inside
of that at click event, but

27
00:01:25.890 --> 00:01:29.350
I wanna show you this is how we're
typically gonna work with things, right.

28
00:01:29.350 --> 00:01:33.760
If we call a @click, we're usually
gonna make a corresponding method.

29
00:01:33.760 --> 00:01:38.220
And what I mean by that is in
this button @click increment,

30
00:01:38.220 --> 00:01:42.990
we establish a relationship
with an increment here.

31
00:01:42.990 --> 00:01:47.480
And we're going to, every time we
click this button we are going to

32
00:01:47.480 --> 00:01:50.270
do whatever is in increment.

33
00:01:50.270 --> 00:01:55.580
And it won't be evaluated until,
it won't actually be run until that point.

34
00:01:55.580 --> 00:01:58.220
And then here we do the same
thing with decrement.

35
00:01:58.220 --> 00:02:00.500
So you could call a method and

36
00:02:00.500 --> 00:02:04.630
do all sorts of things,
it opens up a huge world for us.

37
00:02:04.630 --> 00:02:09.265
You might also notice that in
order to access this counter here,

38
00:02:09.265 --> 00:02:15.900
we're saying this.counter++ or
this.counter--.

39
00:02:15.900 --> 00:02:21.310
And when we say this inside of a method,
we're always referring to data.

40
00:02:21.310 --> 00:02:22.300
I don't know about you, but

41
00:02:22.300 --> 00:02:25.220
I'm really excited about always
knowing what this is referring to.

42
00:02:25.220 --> 00:02:30.590
I don't know if you know that joke that
somebody tweeted on Twitter that's like,

43
00:02:30.590 --> 00:02:33.390
I get really frustrated with
JavaScript and I wanna scream,

44
00:02:33.390 --> 00:02:36.915
this is bullshit, but
I keep forgetting what this refers to.

45
00:02:36.915 --> 00:02:40.110
[LAUGH] In this case,
we always know what this refers to,

46
00:02:40.110 --> 00:02:45.810
it's always referring to this counter or
this.x.

47
00:02:45.810 --> 00:02:50.650
So for this coordinate, I mentioned
this really, really briefly before, but

48
00:02:50.650 --> 00:02:52.630
let's talk about this for just a second.

49
00:02:52.630 --> 00:02:55.890
I have this @mouse move where
I'm tracking your mouse

50
00:02:55.890 --> 00:02:58.250
anytime you're moving across here.

51
00:02:58.250 --> 00:03:02.220
I say x coordinate I wanna
capture the event here, but

52
00:03:02.220 --> 00:03:05.800
I don't actually have to pass it
because you will kind of assume

53
00:03:05.800 --> 00:03:08.470
that you probably want
access to that event.

54
00:03:08.470 --> 00:03:12.380
So that will be the first parameter
that you have access to here.

55
00:03:12.380 --> 00:03:16.090
So if I console logged E I would get
a lot of information about that event.

56
00:03:16.090 --> 00:03:21.050
In this case,
I'm using e.clientx which means

57
00:03:21.050 --> 00:03:26.300
that I'm tracking where it
is lying across the page.

58
00:03:26.300 --> 00:03:33.570
That event is like, where is my mouse in
terms of the pixels across on this page.

59
00:03:33.570 --> 00:03:35.760
And I mapping that to this dot x,

60
00:03:35.760 --> 00:03:39.390
I'm gonna say this dot x
is equal to e.clientx.

61
00:03:39.390 --> 00:03:43.750
Now we talked about this style bindings
before when we made that tron thing,

62
00:03:43.750 --> 00:03:46.090
we've got the background color and

63
00:03:46.090 --> 00:03:51.580
I'm passing in this is a template literal,
and I'm passing that x into the h.

64
00:03:51.580 --> 00:03:55.900
This is a side note, in JavaScript
if you wanna make generative colors,

65
00:03:55.900 --> 00:03:59.005
let's say you wanna do some
creative coding or something.

66
00:03:59.005 --> 00:04:02.585
Hue values are really good for
this generative color thing.

67
00:04:02.585 --> 00:04:05.295
Whereas with hex values or RGB,

68
00:04:05.295 --> 00:04:10.587
you eventually have something that fails
on either side of negative or positive.

69
00:04:10.587 --> 00:04:15.697
Hue is a big circle, so you can keep
going around and around in the circle.

70
00:04:15.697 --> 00:04:20.647
So I can say the number is 7,352, and

71
00:04:20.647 --> 00:04:24.480
that's still a hue because it's a big
circle so it will never ever fail.

72
00:04:24.480 --> 00:04:28.330
So here I'm using this to
create different values

73
00:04:28.330 --> 00:04:31.310
as I go across the screen with this h.

74
00:04:31.310 --> 00:04:32.990
So I'm the binding that style.

75
00:04:32.990 --> 00:04:36.940
Remember, this is
equivalent the bid.style.

76
00:04:36.940 --> 00:04:40.118
But because I don't wanna write the bid,
the bid, the bid,

77
00:04:40.118 --> 00:04:42.140
I'm binding it with this shortcut.

78
00:04:42.140 --> 00:04:45.180
So this is a shortcut,
and this is a shortcut.

79
00:04:45.180 --> 00:04:50.603
This is a shortcut to the on mouse move,
that's equivalent,

80
00:04:50.603 --> 00:04:57.510
but the shortcuts I'm using are at for
events and just this colon for the bind.

81
00:04:58.960 --> 00:04:59.460
Cool.

82
00:05:02.799 --> 00:05:05.392
So since that wasn't
the most typical use case,

83
00:05:05.392 --> 00:05:08.590
[LAUGH] maybe we wanna do
something like a comment form.

84
00:05:08.590 --> 00:05:10.580
This is a little bit more app-like, right.

85
00:05:10.580 --> 00:05:14.600
And we will build off of this
example through the whole course.

86
00:05:14.600 --> 00:05:18.410
So we'll, don't worry, we'll make it
a little bit more refined and do a little

87
00:05:18.410 --> 00:05:22.070
bit more things with it and make it
a little bit better and improve on it.

88
00:05:22.070 --> 00:05:25.160
But for now,
I'm gonna be like one of those people

89
00:05:25.160 --> 00:05:28.560
you post something on Facebook or
Twitter or something and

90
00:05:28.560 --> 00:05:32.420
I'm one of those random people who
says something that you're like what.

91
00:05:32.420 --> 00:05:36.510
So [LAUGH] they're talking about
the sea and I'm gonna say I like tacos.

92
00:05:36.510 --> 00:05:41.460
And as you can see,
that comment is added to this.

93
00:05:41.460 --> 00:05:48.010
And as you could probably guess, it's an
array that I'm pushing this string on to.

94
00:05:48.010 --> 00:05:49.290
So let's take a look at the code.

95
00:05:51.802 --> 00:05:56.403
So if I open up my CodePen, what I start
off with in our app is I'm holding

96
00:05:56.403 --> 00:06:00.750
a comment array, and
that's what's being outputted here.

97
00:06:00.750 --> 00:06:01.780
So those are the comments.

98
00:06:02.780 --> 00:06:07.670
I'm also holding a string that's for
new comment, that's just a placeholder so

99
00:06:07.670 --> 00:06:11.430
that I can type something here and
it will evaluate,

100
00:06:11.430 --> 00:06:13.430
that I can actually capture that input.

101
00:06:15.030 --> 00:06:19.600
If we look over in our HTML, we have,

102
00:06:19.600 --> 00:06:25.390
as you might expect, Li v-for comment
in comments with a key of comment.

103
00:06:25.390 --> 00:06:28.988
And I'm outputting that comment here.

104
00:06:28.988 --> 00:06:30.590
And in input,

105
00:06:30.590 --> 00:06:35.290
I have the v model that establishes
a relationship with new comment.

106
00:06:36.620 --> 00:06:40.690
I'm also saying at key
up.enter add comment.

107
00:06:40.690 --> 00:06:45.400
So what I'm saying here is as
soon as I hit an Enter key,

108
00:06:45.400 --> 00:06:48.490
then do a thing in methods
called add comment.

109
00:06:48.490 --> 00:06:54.857
So I'm writing here and
as soon as soon as I hit that Enter key,

110
00:06:54.857 --> 00:07:01.475
it's going to go find something
in methods called add comment.

111
00:07:01.475 --> 00:07:08.420
Our add comment is saying
this.comments.push this.new comment.

112
00:07:08.420 --> 00:07:12.989
And as soon as I'm done pushing that
onto the array, I wanna empty it out,

113
00:07:12.989 --> 00:07:17.118
I wanna make sure that it doesn't
stay otherwise it would just stay

114
00:07:17.118 --> 00:07:18.684
[SOUND] whatever this is.

115
00:07:18.684 --> 00:07:23.008
And what I wanna make sure of is
that it empties out that input so

116
00:07:23.008 --> 00:07:25.230
that I can add more things.

117
00:07:25.230 --> 00:07:30.650
So if we looked at this in View Dev Tools,
we've got all of the elements,

118
00:07:30.650 --> 00:07:36.050
which is what it evaluates to,
the ULLi and the input.

119
00:07:36.050 --> 00:07:40.230
But we also have our View tab where
we can go into the route, and

120
00:07:40.230 --> 00:07:43.870
we have a comments array that
has all of the comments.

121
00:07:43.870 --> 00:07:47.290
As I type new comment,
I say, I like tacos.

122
00:07:48.550 --> 00:07:53.210
And as soon as I hit that Enter
key it gets added here, and

123
00:07:53.210 --> 00:07:55.180
this becomes an empty string.

124
00:07:56.870 --> 00:07:58.849
Any questions about that before I move on?

125
00:08:01.154 --> 00:08:02.360
Okay, great.

126
00:08:04.650 --> 00:08:07.880
Here, as mentioned,
we have this new comment,

127
00:08:07.880 --> 00:08:10.470
which is an empty string, comments array.

128
00:08:10.470 --> 00:08:12.570
We're adding the comment,
and this is in method.

129
00:08:12.570 --> 00:08:16.040
So I mentioned that this is
part of the view instance,

130
00:08:16.040 --> 00:08:18.980
it's this big object we've got.

131
00:08:18.980 --> 00:08:22.220
And we've got this data which
is a function that returns

132
00:08:22.220 --> 00:08:23.770
what we're holding as state.

133
00:08:23.770 --> 00:08:26.450
And the methods are anything
that we would like to,

134
00:08:26.450 --> 00:08:28.860
any kind of function that
we would like to call.

135
00:08:28.860 --> 00:08:31.367
So we say add comment here.

136
00:08:31.367 --> 00:08:36.980
And the HTML is an Li v4
as well as as this input.

137
00:08:36.980 --> 00:08:41.820
This is actually not that much
code to make all of that work,

138
00:08:41.820 --> 00:08:43.210
it's pretty declarative.

139
00:08:43.210 --> 00:08:45.015
What we're doing is
we're holding the state,

140
00:08:45.015 --> 00:08:49.470
we're changing the state in some way,
and we're outputting it to the page.

141
00:08:49.470 --> 00:08:51.090
And if you jumped into this,

142
00:08:51.090 --> 00:08:54.660
you'd probably be able to understand
what's going on pretty quickly.

143
00:08:54.660 --> 00:08:58.440
This placeholder is just
regular HTML that's gonna

144
00:08:58.440 --> 00:09:01.160
have an add a comment placeholder for
that input.

