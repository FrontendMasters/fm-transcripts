WEBVTT

1
00:00:00.230 --> 00:00:05.070
Even with all of that, that's not exactly
how we work with you in a typical app,

2
00:00:05.070 --> 00:00:08.750
what we usually do is we create
an app with either Vue CLI or Nuxt.

3
00:00:08.750 --> 00:00:11.840
And don't worry, I'll explain
what Nuxt is in just a moment.

4
00:00:11.840 --> 00:00:17.270
And we create an entire application
that allows us to have a really nice

5
00:00:17.270 --> 00:00:18.630
build process.

6
00:00:18.630 --> 00:00:20.720
And so let's go into what that looks like.

7
00:00:22.470 --> 00:00:25.630
So I'm gonna open the deck here.

8
00:00:28.232 --> 00:00:32.630
Vue CLI and Next, I think once you
start working with this you'll see

9
00:00:32.630 --> 00:00:35.280
how great the developer ergonomics are.

10
00:00:35.280 --> 00:00:37.340
I really enjoy working with both of them.

11
00:00:38.490 --> 00:00:40.030
So why would we do something like this?

12
00:00:40.030 --> 00:00:44.380
Why would we use a CLI to
build our projects instead of

13
00:00:44.380 --> 00:00:49.530
kind of adding a CDN and
creating these script templates?

14
00:00:49.530 --> 00:00:54.235
Well, some build processes allow us
to use great features like ES6 and

15
00:00:54.235 --> 00:00:58.655
have it supported on every browser,
SCSS or

16
00:00:58.655 --> 00:01:02.897
less or any kind of style, and
it's easy to npm install libraries.

17
00:01:02.897 --> 00:01:06.145
We're gonna build and concatenate single
file templates, which are awesome

18
00:01:06.145 --> 00:01:08.991
with all the trophies, all the trophies,
but I'm totally not biased at all.

19
00:01:08.991 --> 00:01:13.285
And we don't wanna load all
of our files on startup, but

20
00:01:13.285 --> 00:01:17.600
sometimes we want to kind of lazy where we
have the ability to lazy load components,

21
00:01:17.600 --> 00:01:21.172
especially in Nuxt,
in Nuxt it's really easy as well.

22
00:01:21.172 --> 00:01:24.920
We wanna do things like server
side rendering, or code splitting,

23
00:01:24.920 --> 00:01:28.350
or have good performance metrics for
what we're doing.

24
00:01:28.350 --> 00:01:31.350
There are some ways that we
can even monitor whether or

25
00:01:31.350 --> 00:01:37.140
not we added too many libraries or
how much we're creating on every builds.

26
00:01:37.140 --> 00:01:39.550
It's also so
that we can build in prod versions.

27
00:01:39.550 --> 00:01:42.960
So I mentioned before, you can do X, but

28
00:01:42.960 --> 00:01:47.220
it will start to alert you or
give you errors or warnings.

29
00:01:47.220 --> 00:01:52.030
If you're using development and
production,

30
00:01:52.030 --> 00:01:57.330
two different types of builds,
then what you can do is in development,

31
00:01:57.330 --> 00:02:01.240
you can see all of those errors, you can
get console logs, you can get dev tools.

32
00:02:01.240 --> 00:02:05.583
And then for production, it will make it
so that it's minified and concatenated,

33
00:02:05.583 --> 00:02:07.764
and serve the smallest amount possible.

34
00:02:07.764 --> 00:02:11.572
And you no longer have access to the dev
tools, is no longer erroring which is good

35
00:02:11.572 --> 00:02:14.596
because you probably don't want
all those arrows showing up for

36
00:02:14.596 --> 00:02:15.720
a client if you had one.

37
00:02:17.600 --> 00:02:22.450
So I mentioned single file templates, we
sort of looked at them in code pen before,

38
00:02:22.450 --> 00:02:25.370
but let's do a deeper dive into
what single file templates are.

39
00:02:26.510 --> 00:02:29.180
We have this template area, and

40
00:02:29.180 --> 00:02:33.190
inside the template area you
write your HTML with Vue in here.

41
00:02:33.190 --> 00:02:39.430
So just standard HTML and then you can
add your directives and things like that.

42
00:02:39.430 --> 00:02:42.400
In the script area,
we're gonna say export default and

43
00:02:42.400 --> 00:02:44.820
you write your Vue component logic here.

44
00:02:44.820 --> 00:02:49.110
And of course, above this export default
is where you would import a library.

45
00:02:49.110 --> 00:02:53.650
Let's say you say import dollar sign from
three and then you can use three JS or

46
00:02:53.650 --> 00:02:55.410
something like that.

47
00:02:55.410 --> 00:02:59.190
And then for this area,
we have our styles, and

48
00:02:59.190 --> 00:03:02.120
you can write your styles for
the component in here.

49
00:03:02.120 --> 00:03:05.560
It does not need to have
this scoped attribute on it.

50
00:03:05.560 --> 00:03:09.700
But the scoped attribute allows us,
as I said before, it's a little bit like

51
00:03:09.700 --> 00:03:13.960
CSS modules, where it allows us to
write very particular styles for

52
00:03:13.960 --> 00:03:18.710
that one component in there will not leak
out any other pieces of your application.

53
00:03:20.340 --> 00:03:24.180
What I really like about it is
that I'm not context shifting.

54
00:03:24.180 --> 00:03:25.500
As I'm working with the component,

55
00:03:25.500 --> 00:03:28.470
everything that I need in that component
is right there with me, right?

56
00:03:28.470 --> 00:03:33.090
I've got my HTML, my JavaScript, my CSS,

57
00:03:33.090 --> 00:03:37.810
I'm not actually moving from file to file
and then trying to remember what I did.

58
00:03:37.810 --> 00:03:41.311
Are you the kind of person who
like opens a tab and then goes,

59
00:03:41.311 --> 00:03:43.215
wait, what was I gonna look up?

60
00:03:43.215 --> 00:03:47.892
[LAUGH] If so, you're gonna probably
really like single file templates because

61
00:03:47.892 --> 00:03:51.285
you're literally just scrolling
within the same file.

62
00:03:51.285 --> 00:03:58.400
And I did a link up in my intro to Vue,
I have this Vue extension pack for

63
00:03:58.400 --> 00:04:02.460
VS code which has the tour my snippets,
a bunch of other things.

64
00:04:02.460 --> 00:04:05.364
I also use things like bookmarks and
jumpy,

65
00:04:05.364 --> 00:04:10.716
which allow me to make bookmarks and just
say like go from here to here in the file.

66
00:04:10.716 --> 00:04:15.396
And then I can jump through the same
file and kind of never lose my place so

67
00:04:15.396 --> 00:04:19.310
I can code super fast and
kind of create all of those pieces.

68
00:04:20.352 --> 00:04:27.060
So before in order to add that component,
we said app.component, all this stuff,

69
00:04:27.060 --> 00:04:31.380
if we're gonna add a component with
the Vue CLI, what we would do is we'd say

70
00:04:31.380 --> 00:04:37.000
import new from components new or
whatever the name of the component is.

71
00:04:37.000 --> 00:04:43.840
And we'd say export default, new, and
we would declare that component this way.

72
00:04:43.840 --> 00:04:47.600
Now really,
you can name it something else,

73
00:04:47.600 --> 00:04:49.230
something other than what is written.

74
00:04:49.230 --> 00:04:54.280
What this new is doing is
it's destructuring new new,

75
00:04:54.280 --> 00:04:58.330
it's really saying new colon new,
but this is destructuring.

76
00:04:58.330 --> 00:05:00.883
So it's just saying new, but
if you wanted a different name,

77
00:05:00.883 --> 00:05:02.761
you could totally use
a different name here.

