WEBVTT

1
00:00:00.230 --> 00:00:05.030
Let's talk about the Composition API,
the com and also some custom directives.

2
00:00:05.030 --> 00:00:10.560
So we're getting into some more
advanced features in this section here.

3
00:00:10.560 --> 00:00:13.510
The Composition API is brand new in Vue 3,

4
00:00:13.510 --> 00:00:17.880
and a lot of times people will even say,
Vue 3 is the Composition API.

5
00:00:17.880 --> 00:00:20.880
That's not true,
we're not deprecating the Options API,

6
00:00:20.880 --> 00:00:23.310
which is what we've been
using all day today.

7
00:00:23.310 --> 00:00:27.510
The Composition API is additive,
we're not losing anything else,

8
00:00:27.510 --> 00:00:30.265
we're bringing in a new advanced feature.

9
00:00:30.265 --> 00:00:34.385
Previously, we worked a lot with mixins,
a thing called mixins.

10
00:00:34.385 --> 00:00:38.545
And those were kind of moving away from,
in order to work

11
00:00:38.545 --> 00:00:42.905
with the Composition API more, and I'll
describe why that's such a great thing.

12
00:00:44.520 --> 00:00:49.520
Before we move on into that, I do wanna
mention that Evan has a keynote about

13
00:00:49.520 --> 00:00:54.850
some of the key differences that he kind
of goes through in this keynote, for

14
00:00:54.850 --> 00:01:01.170
all of the things that happened when he
was kind of going from Vue 2 to Vue 3.

15
00:01:01.170 --> 00:01:04.640
And at one point we wrote
everything in classes.

16
00:01:04.640 --> 00:01:07.450
At one point we were thinking
about moving in a direction and

17
00:01:07.450 --> 00:01:12.540
then we changed gears, and he reflects on
all of those changes and what occurred.

18
00:01:12.540 --> 00:01:14.810
So you can see a timeline
of all of those events.

19
00:01:14.810 --> 00:01:20.520
So, if you're interested in some of those
changes and what made things go into that,

20
00:01:20.520 --> 00:01:25.370
especially things like how
RFC review process worked,

21
00:01:25.370 --> 00:01:27.350
he goes into a lot of detail.

22
00:01:27.350 --> 00:01:32.237
One of the things I wanted to share
with you is that this took 2years,

23
00:01:32.237 --> 00:01:37.985
it's a whole rewrite, Vue 2 to Vue 3,
even though the surface API is the same.

24
00:01:37.985 --> 00:01:41.727
There was 37 RFCs,
[LAUGH] 2,000 commits, and

25
00:01:41.727 --> 00:01:45.312
a tremendous amount of
work in sub-projects too.

26
00:01:45.312 --> 00:01:47.432
So this is just in the new repo,

27
00:01:47.432 --> 00:01:51.770
and then there's also new versions
of other projects as well.

28
00:01:53.450 --> 00:01:55.870
So let's talk about the Composition API.

29
00:01:55.870 --> 00:01:59.593
It's a common situation, you have two
components that are pretty similar,

30
00:01:59.593 --> 00:02:02.284
they share the same basic functionality,
but there's

31
00:02:02.284 --> 00:02:06.309
something that's a bit different about
each of them, so you come to a crossroads.

32
00:02:06.309 --> 00:02:10.949
Do I split this component into two
separate components or do I keep one

33
00:02:10.949 --> 00:02:15.590
component with enough variance with
props that I can alter each one?

34
00:02:15.590 --> 00:02:18.540
Enter the Composition API.

35
00:02:18.540 --> 00:02:20.705
I like this quote by Michael Feathers.

36
00:02:20.705 --> 00:02:25.142
Object-Oriented programming makes code
understandable by encapsulating moving

37
00:02:25.142 --> 00:02:29.899
parts, functional programming makes code
understandable by minimizing moving parts.

38
00:02:29.899 --> 00:02:34.777
And so in this kind of state of mind,
this is more of a functional programming

39
00:02:34.777 --> 00:02:39.658
model where we're trying to encapsulate,
or we're trying to take smaller

40
00:02:39.658 --> 00:02:44.450
pieces of something and making them
more available for use in other ways.

41
00:02:44.450 --> 00:02:48.490
Which is why we call it the Composition
API, because we can compose it.

42
00:02:48.490 --> 00:02:52.320
The Composition API allows you to
encapsulate one piece of functionality, so

43
00:02:52.320 --> 00:02:56.270
you can use it in different components
throughout the application.

44
00:02:56.270 --> 00:02:58.960
If written correctly,
they're pure, they don't modify or

45
00:02:58.960 --> 00:03:01.430
change things outside
of the function scope.

46
00:03:01.430 --> 00:03:04.150
So you'll always reliably get
the same value with the same

47
00:03:04.150 --> 00:03:06.240
inputs on multiple executions.

48
00:03:06.240 --> 00:03:08.360
They're also very clear
what they're returning.

49
00:03:09.890 --> 00:03:14.490
You'll see this as we start to dive into
the API, but they state very clearly

50
00:03:14.490 --> 00:03:18.680
what you're being given at the end,
so this can be really powerful.

51
00:03:20.200 --> 00:03:23.290
The Composition API was
built off of React hooks.

52
00:03:23.290 --> 00:03:27.872
So if you're familiar with React hooks,
you will feel very at home.

53
00:03:27.872 --> 00:03:32.572
It was built off of that primary case,
but then it was modified for Vue and

54
00:03:32.572 --> 00:03:33.818
Composition API.

55
00:03:33.818 --> 00:03:39.720
When hooks first came out, this tweet
went over why this is so powerful.

56
00:03:39.720 --> 00:03:42.000
So this is a React component
that's very large.

57
00:03:42.000 --> 00:03:45.940
It handles a lot of different
pieces of moving parts.

58
00:03:47.040 --> 00:03:50.060
And if you take all of
the different responsibilities and

59
00:03:50.060 --> 00:03:53.320
you encapsulate them
into different pieces and

60
00:03:53.320 --> 00:03:56.740
group them together,
this is one of the strengths of hooks and

61
00:03:56.740 --> 00:04:02.050
also the Composition API,
that we're keeping like logic together.

62
00:04:02.050 --> 00:04:05.540
So you're really thinking
about one thing at a time.

63
00:04:05.540 --> 00:04:09.520
Also, because it's written in TypeScript,
it has extremely good TypeScript support.

64
00:04:11.592 --> 00:04:12.840
So previously,

65
00:04:12.840 --> 00:04:17.930
when we were working with this tacos
empty string, we said do you like tacos?

66
00:04:17.930 --> 00:04:21.581
Yes or no, you're a monster.

67
00:04:21.581 --> 00:04:25.276
So this should look familiar
to you at this point.

68
00:04:25.276 --> 00:04:29.071
This is what this looked like,
we had the createApp, we mounted app and

69
00:04:29.071 --> 00:04:31.280
we returned the empty string.

70
00:04:31.280 --> 00:04:35.650
And in the HTML, we have the yes,
or the v if or v else.

71
00:04:38.200 --> 00:04:40.430
If we do the same thing
with the Composition API,

72
00:04:40.430 --> 00:04:45.940
what we're doing is we're
saying const ref equals Vue.

73
00:04:45.940 --> 00:04:48.910
Then inside of our app,
we have this setup function.

74
00:04:50.580 --> 00:04:54.200
We're saying const tacos equals ref,
and that's that empty string.

75
00:04:54.200 --> 00:04:57.020
So the tacos are an empty string.

76
00:04:57.020 --> 00:04:59.190
So this is, basically,

77
00:04:59.190 --> 00:05:03.630
you can think of this a little bit
like what we have in data before.

78
00:05:03.630 --> 00:05:07.340
But then I mentioned that we're
explicitly returning something.

79
00:05:07.340 --> 00:05:09.260
We are returning tacos.

80
00:05:09.260 --> 00:05:15.410
So we're very literally saying this piece
of data return this piece of data exactly.

81
00:05:15.410 --> 00:05:19.300
So we know what we're getting is tacos.

82
00:05:19.300 --> 00:05:22.570
If you look at the HTML,
the HTML is not different.

83
00:05:22.570 --> 00:05:27.560
This part did not change at all,
what's changed is this piece.

84
00:05:27.560 --> 00:05:29.290
Why are we changing?

85
00:05:29.290 --> 00:05:34.180
Why is this an advanced feature and
how come we use something like this?

86
00:05:34.180 --> 00:05:36.930
There's a couple of different reasons,
one is

87
00:05:37.960 --> 00:05:42.460
with mixins previously,
one couldn't consume another.

88
00:05:42.460 --> 00:05:47.270
So when we're working with composition,
and the reason why we call it composition,

89
00:05:47.270 --> 00:05:50.490
is you can actually turn this
more into a function and

90
00:05:50.490 --> 00:05:52.750
then you could have one
thing call another.

91
00:05:52.750 --> 00:05:57.800
So a use case of that would be at
a certain window width you want to turn on

92
00:05:57.800 --> 00:06:02.145
a type of animation that fires
only when you're on desktop.

93
00:06:02.145 --> 00:06:05.450
[COUGH] So
you have one that uses the window width,

94
00:06:05.450 --> 00:06:08.910
the next one that calls a particular
animation that you might use elsewhere,

95
00:06:08.910 --> 00:06:10.790
and you can use it in
a bunch of different places.

96
00:06:12.190 --> 00:06:15.310
So what we can do here is
also write our components.

97
00:06:15.310 --> 00:06:16.810
So this is really flexible.

98
00:06:16.810 --> 00:06:21.341
We can write a component this way, or
we can just create a JavaScript file that

99
00:06:21.341 --> 00:06:24.003
only has this part and
not the template part.

100
00:06:24.003 --> 00:06:26.569
So we can just work with
just the functionality.

101
00:06:26.569 --> 00:06:31.363
If I wanted to just, and we will do that,
don't worry, where we're we're just

102
00:06:31.363 --> 00:06:35.662
taking one bit of logic and we're
taking in that little bit of logic, and

103
00:06:35.662 --> 00:06:38.510
it doesn't really work
with a template at all.

104
00:06:41.461 --> 00:06:42.780
So what did we do?

105
00:06:42.780 --> 00:06:50.940
We took this const app and data, return
tacos and we made it into this setup.

106
00:06:50.940 --> 00:06:58.284
So we use set up, we say const tacos
equals ref, and that's an empty string.

107
00:06:58.284 --> 00:07:00.328
We're returning tacos at the end.

108
00:07:00.328 --> 00:07:05.367
So the things that are different is,
we're returning tacos,

109
00:07:05.367 --> 00:07:09.265
this setup is unique to
the Composition API, and

110
00:07:09.265 --> 00:07:14.417
this const tacos equals ref,
that's basically like our data.

111
00:07:16.332 --> 00:07:19.781
So ref,
we use ref in the template the same, but

112
00:07:19.781 --> 00:07:24.560
if we use it in a function,
we would extract it with taco.value.

113
00:07:24.560 --> 00:07:29.240
So rather than using methods which hang
off of that, we've got the Vue instance

114
00:07:29.240 --> 00:07:34.640
with data and methods, rather than writing
methods now, we're just writing functions.

115
00:07:34.640 --> 00:07:38.437
So we've got the const count = ref(0),

116
00:07:38.437 --> 00:07:42.870
we create a function
that says count.value ++.

117
00:07:42.870 --> 00:07:48.371
So whatever we access in refs,
we're saying dot value,

118
00:07:48.371 --> 00:07:52.736
so we create these as
functions of their own.

119
00:07:52.736 --> 00:07:55.662
We can also do a thing called reactive.

120
00:07:55.662 --> 00:07:58.509
Instead of declaring refs over and
over and over again,

121
00:07:58.509 --> 00:08:01.661
and I'll show you a bigger
component because it can get really

122
00:08:01.661 --> 00:08:05.110
repetitive to be like ref,
ref, ref, ref, ref.

123
00:08:05.110 --> 00:08:08.180
We can also create something
that's called reactive,

124
00:08:08.180 --> 00:08:11.390
where we can create an object that
we used like the data before.

125
00:08:11.390 --> 00:08:17.170
Where we have count, and then, messages,
a string and a few other things.

126
00:08:17.170 --> 00:08:20.246
So we can pass that object into reactive.

127
00:08:20.246 --> 00:08:24.771
And this whole const state,
you don't have to call it state,

128
00:08:24.771 --> 00:08:29.996
that's becoming a kind of normal
thing to do now with Composition API,

129
00:08:29.996 --> 00:08:33.490
but you don't have to declare it as state.

130
00:08:33.490 --> 00:08:37.560
But we will say const state
equals reactive count is 0.

131
00:08:37.560 --> 00:08:42.890
And then if we have that same incrementer,
we're saying function increment,

132
00:08:42.890 --> 00:08:45.250
and this time we're doing state.count.

133
00:08:45.250 --> 00:08:51.279
So we'll do state.count instead of,
before we were finding .value off of ref.

134
00:08:51.279 --> 00:08:55.976
So if we have a bigger component, let's
say, and we have const ref equals Vue.

135
00:08:55.976 --> 00:09:01.480
In the setup, we have const
restaurantName, let's taco about it.

136
00:09:01.480 --> 00:09:03.720
Our options are in this array.

137
00:09:03.720 --> 00:09:06.700
We've got Lengua, Carnitas,
and so on and so forth.

138
00:09:06.700 --> 00:09:09.550
The ref can be a number,
the ref could be another number.

139
00:09:09.550 --> 00:09:14.450
The ref can be a Boolean, but we're
basically saying ref, ref, ref, ref, ref,

140
00:09:14.450 --> 00:09:17.030
ref, ref, to hold the data.

141
00:09:17.030 --> 00:09:21.410
Then if we wanted to increment something,
I would say numItems.

142
00:09:21.410 --> 00:09:24.323
Let's say that that's the thing
that we're incrementing,

143
00:09:24.323 --> 00:09:26.855
numItems.value, that's
how we get the value out.

144
00:09:26.855 --> 00:09:29.712
And then at the end we're
returning all of the things,

145
00:09:29.712 --> 00:09:34.139
we're returning restaurant name options,
we're even returning this function.

146
00:09:34.139 --> 00:09:38.137
We're returning addItems as well.

147
00:09:38.137 --> 00:09:41.488
So if we look at a code
pen that does this.

148
00:09:45.629 --> 00:09:48.050
We've got our order, let's taco bout it.

149
00:09:48.050 --> 00:09:50.520
And we've got our options.

150
00:09:50.520 --> 00:09:54.680
Okay, so now we can add an item,
add an item, add an item.

151
00:09:54.680 --> 00:09:57.110
Now, if we look at it
in the beta dev tools,

152
00:09:57.110 --> 00:10:02.080
we can see the setup, we can see
all of the addItems, delivery time,

153
00:10:02.080 --> 00:10:06.250
free delivery, and the numItems,
and you can see this increase.

154
00:10:06.250 --> 00:10:09.750
So you can see that all in
the setup in those dev tools.

155
00:10:10.830 --> 00:10:15.728
Now, these are a lot of things to create,
and then return, right?

156
00:10:15.728 --> 00:10:20.149
So let's look at how we would
do this in the reactive.

157
00:10:20.149 --> 00:10:21.947
We would pass in reactive, and

158
00:10:21.947 --> 00:10:25.680
I'm also going to show you
something called to refs.

159
00:10:25.680 --> 00:10:28.020
So we would say const
state equals reactive, and

160
00:10:28.020 --> 00:10:29.550
then this should look
pretty familiar to you.

161
00:10:29.550 --> 00:10:34.680
This is more similar to how we worked with
data before when we're saying data return,

162
00:10:34.680 --> 00:10:38.450
where we've got the restaurant name,
the options, the numItems, and

163
00:10:38.450 --> 00:10:40.850
these are all attached to an object.

164
00:10:40.850 --> 00:10:44.568
So that object is just
like how we use data.

165
00:10:44.568 --> 00:10:49.308
And here we've got that function,
addItems, and instead of having to

166
00:10:49.308 --> 00:10:54.285
declare all of these pieces, what we
could say is toRefs and pass in state.

167
00:10:54.285 --> 00:10:59.477
And that allows us to say,
pass in all of whatever's in reactive,

168
00:10:59.477 --> 00:11:03.095
and this spread operator
allows us to work with

169
00:11:03.095 --> 00:11:07.950
it in the templates without
saying state dot this dot dadada.

170
00:11:07.950 --> 00:11:13.340
So instead of saying state.restaurantName
over and over again, state.options,

171
00:11:13.340 --> 00:11:16.140
we can just use restaurantName,
options and things like that.

172
00:11:16.140 --> 00:11:19.610
So If you were more
comfortable in the Options API,

173
00:11:19.610 --> 00:11:23.900
or you want to see something that
looks a little bit like that in

174
00:11:23.900 --> 00:11:26.980
the Composition API,
this is what that looks like.

175
00:11:26.980 --> 00:11:33.740
So here we've got the same kind of thing,
and we've got this const state.

176
00:11:33.740 --> 00:11:36.780
And if we open this in the dev tools, and

177
00:11:36.780 --> 00:11:39.850
click on the root, you will also
see this in setup the same way.

178
00:11:41.420 --> 00:11:44.590
So it's the same kind of way of working,

179
00:11:44.590 --> 00:11:47.300
except now we're able to
put things in an object.

