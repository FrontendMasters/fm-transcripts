WEBVTT

1
00:00:00.270 --> 00:00:02.900
Slots, slots are really fun.

2
00:00:02.900 --> 00:00:06.250
So far we've been passing things
with props and saying like, okay,

3
00:00:06.250 --> 00:00:08.650
render this thing but bypassing props.

4
00:00:08.650 --> 00:00:12.650
But there are instances where you just
need to render a little bit of content

5
00:00:12.650 --> 00:00:13.970
differently.

6
00:00:13.970 --> 00:00:17.280
So you can pass some content
into a component with ease.

7
00:00:17.280 --> 00:00:20.110
It's just waiting there for that content.

8
00:00:20.110 --> 00:00:22.940
So a modal is a pretty
good example of this.

9
00:00:22.940 --> 00:00:26.550
Typically, with a modal, you've got
something that is going to always

10
00:00:26.550 --> 00:00:30.330
function, similarly, where it's
got a certain presentation style,

11
00:00:30.330 --> 00:00:34.660
it's gonna open, it's gonna close, but
what's inside of it might change, right?

12
00:00:34.660 --> 00:00:38.520
The way that you're using that modal might
change because you want different content

13
00:00:38.520 --> 00:00:39.130
to be displayed.

14
00:00:39.130 --> 00:00:43.760
So here, it's Here I am, Here I am.

15
00:00:43.760 --> 00:00:48.720
And, inside of here, if we look
at this we've got is showing, so

16
00:00:48.720 --> 00:00:53.490
we've got a v-if v-else work,
basically toggling.

17
00:00:53.490 --> 00:01:00.268
This is showing, and
we've got our template, Here.

18
00:01:00.268 --> 00:01:03.708
Inside of our template for
this kind of script tag,

19
00:01:03.708 --> 00:01:06.430
we're putting in a thing called a slot.

20
00:01:07.600 --> 00:01:11.740
What that allows me to do is inside of
that component rather than just saying at

21
00:01:11.740 --> 00:01:15.630
modal and closing off at modal,
I can put whatever I want in here.

22
00:01:15.630 --> 00:01:22.920
I could put h2s, I can make a p tag and
say like, hey there, everyone,

23
00:01:22.920 --> 00:01:29.760
I am more and p tag,
I'm not passing that in with a prop.

24
00:01:29.760 --> 00:01:33.490
I'm able to put whatever content
I want into that slot and

25
00:01:33.490 --> 00:01:34.655
it will just live as content.

26
00:01:34.655 --> 00:01:38.600
Modals are a great use case for
this because that's typically what we do.

27
00:01:38.600 --> 00:01:43.120
We like want the same basic functionality,
the same look and feel and everything.

28
00:01:43.120 --> 00:01:46.180
And then we wanna pass
a bit of different content.

29
00:01:46.180 --> 00:01:49.650
So that's typically how we work with that.

30
00:01:49.650 --> 00:01:54.810
So we're passing in this slot, I'm gonna
show you my veritable slot machine.

31
00:01:56.930 --> 00:02:00.800
[LAUGH] So
we've got these slots to populate content.

32
00:02:00.800 --> 00:02:05.150
We have some pieces that are hard coded,
but we were saying in this first one,

33
00:02:05.150 --> 00:02:06.910
we want slot number one.

34
00:02:06.910 --> 00:02:10.570
In the second one, we want slot number
two, and we can put more information into

35
00:02:10.570 --> 00:02:15.670
slot number one, slot number two, both
inside of that same app child component.

36
00:02:17.010 --> 00:02:22.080
And so here, we are like we can
use slots to populate content.

37
00:02:22.080 --> 00:02:26.570
This is slot number one, this is slot
number two, and both of them have this

38
00:02:26.570 --> 00:02:31.850
terrible joke of it's so we can hard
code content in that component as well.

39
00:02:31.850 --> 00:02:35.130
But we can pass in whatever
information we want.

40
00:02:35.130 --> 00:02:37.370
And it can be any tags
that we want as well.

41
00:02:37.370 --> 00:02:41.880
Whereas with props, we're not necessarily
passing in all of the p tags and

42
00:02:41.880 --> 00:02:43.250
all of this stuff too.

43
00:02:46.826 --> 00:02:48.950
So you can also have some defaults.

44
00:02:48.950 --> 00:02:52.804
So if you know that most of the modals on
your site are going to be saying like,

45
00:02:52.804 --> 00:02:55.936
you're signed in, then you could,
inside that slot, say,

46
00:02:55.936 --> 00:02:58.730
you're signed in and
then replace it when you need to.

47
00:02:58.730 --> 00:03:00.098
So that's pretty cool.

48
00:03:00.098 --> 00:03:04.853
You can have more than one or if you just
wanna keep things tidy by naming them,

49
00:03:04.853 --> 00:03:08.770
which I suggest, you can say,
template v slot header.

50
00:03:08.770 --> 00:03:13.000
And then pass that in, nd then in the
component itself, you would say slot neat,

51
00:03:13.000 --> 00:03:13.920
you give it a name.

52
00:03:13.920 --> 00:03:18.110
You say name is header, and
then you say that template v slot.

53
00:03:18.110 --> 00:03:19.410
I'll show you an example of that.

54
00:03:19.410 --> 00:03:25.055
So if I have my Taco blog,
because I blog every day about tacos,

55
00:03:25.055 --> 00:03:27.729
I don't really but I should.

56
00:03:27.729 --> 00:03:30.230
And then we've got this app child.

57
00:03:30.230 --> 00:03:34.622
I can say template v-slot
header is the taco blog.

58
00:03:34.622 --> 00:03:40.260
The v-slot default is all of
this information that I have.

59
00:03:40.260 --> 00:03:44.750
And then the v-slot footer
has generated by Taco Ipsum.

60
00:03:44.750 --> 00:03:47.670
But you didn't know there
was Lorem ipsum for tacos.

61
00:03:47.670 --> 00:03:52.521
And if we look at the component itself,
we have a header that's just HTML,

62
00:03:52.521 --> 00:03:55.149
you don't have to put it in that header.

63
00:03:55.149 --> 00:03:58.780
And we've got our slot name header,
we've got our slot name footer.

64
00:03:58.780 --> 00:04:01.110
But, here's the tricky part.

65
00:04:01.110 --> 00:04:07.200
If we have a slot that is unnamed,
we can still pass information in.

66
00:04:07.200 --> 00:04:10.660
This was called v-slot default.

67
00:04:10.660 --> 00:04:12.840
So we had two named headers, or

68
00:04:12.840 --> 00:04:17.430
two named slots, and then a default
slot that we can put this in.

69
00:04:17.430 --> 00:04:22.770
Another note between v2 and v3,
this template v-slot is new.

70
00:04:22.770 --> 00:04:26.230
That's not how we used
to work with it in v2.

71
00:04:26.230 --> 00:04:30.680
It's a way for us we used to use
scoped slots slightly differently than

72
00:04:30.680 --> 00:04:33.940
regular slots, and there's a merging of
this to make it a little bit more simple.

73
00:04:34.950 --> 00:04:39.230
So, here is all of this.

74
00:04:39.230 --> 00:04:43.080
And then if you wanted to see the rendered
content, let's go back to the,

75
00:04:43.080 --> 00:04:45.550
my slides are getting a little slow here,
sorry about that.

76
00:04:45.550 --> 00:04:50.593
If you want to see what was rendered to
the page, like what was actually created,

77
00:04:50.593 --> 00:04:55.579
we have that header that I mentioned is
just HTML that was placed in side of here.

78
00:04:55.579 --> 00:04:58.745
The main with all of these
p tags in the footer, so

79
00:04:58.745 --> 00:05:04.169
it's rendered to the page like this and
you can add whatever information you want.

80
00:05:05.783 --> 00:05:09.660
We could also do something like
make a wine label if we wanted to.

81
00:05:09.660 --> 00:05:15.705
So I could say like, wine time,
which is my favorite time.

82
00:05:15.705 --> 00:05:20.736
And then we've got a white label and
a black label and I can even pick a color

83
00:05:20.736 --> 00:05:25.790
here if we wanted to, maybe something
bright red, I can change the font.

84
00:05:26.970 --> 00:05:32.780
All of this stuff, I can add some
flourishes, I can add a background.

85
00:05:32.780 --> 00:05:37.990
And I can change the image opacity if
it's like conflicting with my background.

86
00:05:37.990 --> 00:05:41.500
I can change the placement of
the label up and down and up and down.

87
00:05:41.500 --> 00:05:44.862
These are all form things that
you did before with v-modal.

88
00:05:47.181 --> 00:05:55.490
And what's tricky here is actually that
that entire label is passed in as a slot.

89
00:05:56.940 --> 00:06:00.230
Really what I have is this SVG and
there's a lot of number garbage here,

90
00:06:00.230 --> 00:06:01.180
don't worry about that.

91
00:06:01.180 --> 00:06:04.601
That's coordinate system in SVG,
like working with,

92
00:06:04.601 --> 00:06:07.814
rendering all of these
different pieces of the SVG.

93
00:06:09.407 --> 00:06:10.900
But here is the magic.

94
00:06:10.900 --> 00:06:14.570
We have this black one and this white one,

95
00:06:14.570 --> 00:06:19.880
we're passing all the information
of the SVG into a slot.

96
00:06:19.880 --> 00:06:24.130
And the reason why we might
wanna do this is because

97
00:06:24.130 --> 00:06:28.700
we can have different styles for
each one of them.

98
00:06:28.700 --> 00:06:34.430
So I can say like black label
is fill black, black bottle and

99
00:06:34.430 --> 00:06:37.800
fill white and all of these things
because I gave it a different class.

100
00:06:37.800 --> 00:06:40.700
Now, when we move to
single file components,

101
00:06:40.700 --> 00:06:43.340
you can actually create a scoped tag for
this.

102
00:06:43.340 --> 00:06:45.060
So that's really exciting.

103
00:06:45.060 --> 00:06:47.520
But here we're just doing
what some classes, right,

104
00:06:47.520 --> 00:06:51.880
we're changing the way that it
is outputting based on that.

105
00:06:51.880 --> 00:06:53.880
And, there's one more thing.

106
00:06:53.880 --> 00:06:56.270
There's a directive that
you didn't see before.

107
00:06:56.270 --> 00:07:00.880
The hidden secret extra directive
which is, this allows for

108
00:07:00.880 --> 00:07:04.050
us to use dynamic components.

109
00:07:04.050 --> 00:07:09.288
So, when we have this selected at back,

110
00:07:09.288 --> 00:07:13.830
the component is going to be
whatever I selected here.

111
00:07:13.830 --> 00:07:18.561
And I have v-modal that allows me
to select appBlack or appWhite and

112
00:07:18.561 --> 00:07:23.350
it's gonna switch out that component
based on which one I want.

113
00:07:23.350 --> 00:07:26.640
So now we can pass all
of that into a slot and

114
00:07:26.640 --> 00:07:31.622
we can also change all of those
pieces based on that directive.

115
00:07:33.697 --> 00:07:38.660
So here we have that input type,
the modal label color.

116
00:07:38.660 --> 00:07:43.340
So what we have is,
when we click this button of selected,

117
00:07:43.340 --> 00:07:49.690
we say select appBlack or
we say at click appWhite, cool.

118
00:07:51.160 --> 00:07:52.850
Let's talk about the keep-alive and
the is directive.

119
00:07:52.850 --> 00:07:57.062
Let's do a little bit of a deeper
dive into is directive because it

120
00:07:57.062 --> 00:08:01.935
is really cool and creating
dynamic components is really cool.

121
00:08:01.935 --> 00:08:06.875
So, I mentioned before that we
could do component is selected and

122
00:08:06.875 --> 00:08:08.455
we can pass in whatever we want and

123
00:08:08.455 --> 00:08:12.825
we can switch out components as
we see fit, which is really nice.

124
00:08:12.825 --> 00:08:16.704
We also have available to us this
thing called keep-alive that you

125
00:08:16.704 --> 00:08:18.375
can wrap that component in.

126
00:08:21.418 --> 00:08:25.753
So, let's say we have this home
component and this post component.

127
00:08:25.753 --> 00:08:30.298
And in posts, if I click on one of these,
I have Doggo Ipsum,

128
00:08:30.298 --> 00:08:34.309
Hipster Ipsum, Cupcake Ipsum,
excellent, and for

129
00:08:34.309 --> 00:08:38.860
each one of these I have
a little bit more information.

130
00:08:38.860 --> 00:08:41.641
I have a bunch of things
about the cupcakes,

131
00:08:41.641 --> 00:08:44.809
actually, let's open this
one in a CodePen too.

132
00:08:46.740 --> 00:08:50.260
So we've got our current tabs,
we've got home and posts.

133
00:08:50.260 --> 00:08:54.861
And then we've got our computed property
which is showing which one we are using

134
00:08:54.861 --> 00:08:56.176
the home or the posts.

135
00:08:57.926 --> 00:09:05.510
And then in here, by clicking on this,
we're creating this piece.

136
00:09:05.510 --> 00:09:07.231
So let's go look at this.

137
00:09:08.707 --> 00:09:15.170
At click his currenttab is tabs, and
the component is CurrentTabComponent.

138
00:09:15.170 --> 00:09:19.890
So whichever one we clicked
on will bring up cupcake or

139
00:09:19.890 --> 00:09:23.210
hipster or doggo, but
we wrapped it in a keep-alive.

140
00:09:23.210 --> 00:09:26.893
And what that allows us to do
is I'm on Doggo Ipsum right now.

141
00:09:26.893 --> 00:09:32.340
If I go back home and I come back,
there's my Doggo Ipsum.

142
00:09:32.340 --> 00:09:37.440
If I remove the keep-alive,
this component will mount and

143
00:09:37.440 --> 00:09:41.700
unmount and I'll lose all that state.

144
00:09:41.700 --> 00:09:46.220
So if I say Hipster Ipsum, I go back here,
I go back, it's not there anymore.

145
00:09:46.220 --> 00:09:48.360
Because the component is
completely mounting and

146
00:09:48.360 --> 00:09:52.530
unmounting, it doesn't remember
which one you selected.

147
00:09:52.530 --> 00:10:00.290
Whereas with this keep-alive, it's saying
remember which one I had selected.

148
00:10:00.290 --> 00:10:05.010
Remember which piece I
had dynamically bound.

149
00:10:05.010 --> 00:10:06.230
So that's pretty cool.

150
00:10:06.230 --> 00:10:10.426
That means you can create dynamic
components that remember themselves quite

151
00:10:10.426 --> 00:10:10.949
easily.

152
00:10:10.949 --> 00:10:14.534
So there's more information
about scoped slots and

153
00:10:14.534 --> 00:10:18.590
there's tons more information
in the documentation.

154
00:10:18.590 --> 00:10:23.010
We have a lot to cover today, so we're
not gonna go into any diving into this

155
00:10:23.010 --> 00:10:27.160
any further but you can absolutely
check more information out there

