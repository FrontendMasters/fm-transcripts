WEBVTT

1
00:00:00.300 --> 00:00:02.462
All right,
let's talk a little bit about Nuxt.

2
00:00:02.462 --> 00:00:05.749
I typically use Nuxt for
everything these days,

3
00:00:05.749 --> 00:00:08.404
I don't really use Vue CLI that often.

4
00:00:08.404 --> 00:00:12.839
It's not because I hate Vue CLI,
Vue CLI is awesome, but

5
00:00:12.839 --> 00:00:15.992
Nuxt is super, super, [LAUGH] awesome.

6
00:00:15.992 --> 00:00:20.858
The next team is really wonderful at
keeping up to date with everything that's

7
00:00:20.858 --> 00:00:25.962
in view, in fact, we share the view core
team shares a discord with the next team.

8
00:00:25.962 --> 00:00:33.095
So we talk all the time, we also do things
like karaoke, [LAUGH] and stuff like that.

9
00:00:33.095 --> 00:00:36.423
So, here we've got Nuxt and some routing.

10
00:00:36.423 --> 00:00:41.977
Again nExt is to rEact as nUxt is to vUe,
I actually had an applicant for

11
00:00:41.977 --> 00:00:46.497
a job who did this and
I'm borrowing this from him because

12
00:00:46.497 --> 00:00:51.326
I thought it was such a good
example of what, [LAUGH] that was.

13
00:00:51.326 --> 00:00:55.339
So nExt.js is kind of similar,
it's a meta framework of rEact.

14
00:00:55.339 --> 00:00:59.858
So nExt uses rEact and
builds off of it, nUxt uses vUe.

15
00:00:59.858 --> 00:01:01.928
And when it was first born,

16
00:01:01.928 --> 00:01:07.424
this project was really conceived of
as like a comparable thing to Nuxt.

17
00:01:07.424 --> 00:01:11.338
At this point though,
just like vUe has borrowed from things and

18
00:01:11.338 --> 00:01:13.451
then deviated course from there.

19
00:01:13.451 --> 00:01:16.377
nExt has kind of deviated,
has its own community now,

20
00:01:16.377 --> 00:01:19.761
it has its own opinions about things,
it has its own features.

21
00:01:19.761 --> 00:01:22.640
So let's talk about some of those things.

22
00:01:22.640 --> 00:01:25.142
Why would we use Nuxt?

23
00:01:25.142 --> 00:01:27.998
You get Automatic Code Splitting,
you get Server-Side and

24
00:01:27.998 --> 00:01:30.634
I will describe what Code Splitting
is in just a second.

25
00:01:30.634 --> 00:01:32.445
You get Server-Side Rendering so

26
00:01:32.445 --> 00:01:35.440
you can render something
a bunch of different ways.

27
00:01:35.440 --> 00:01:39.067
You can render it as an SPA,
you can render it in a Jamstack way,

28
00:01:39.067 --> 00:01:41.130
you can render it for a node server.

29
00:01:41.130 --> 00:01:45.917
And it allows you to change all of those
things with just one line of code,

30
00:01:45.917 --> 00:01:47.580
which is super awesome.

31
00:01:47.580 --> 00:01:52.182
It has a really powerful Routing System
and it allows for Asynchronous Routing,

32
00:01:52.182 --> 00:01:54.494
but you don't have to set any of that up.

33
00:01:54.494 --> 00:01:59.023
So in other words when you're working with
Vue CLI, you would create a project with

34
00:01:59.023 --> 00:02:02.985
Vue CLI add and view router and
then you would declare all of your routes.

35
00:02:02.985 --> 00:02:06.144
With Nuxt it sets all of that stuff up for
you so

36
00:02:06.144 --> 00:02:10.818
you don't have to do any of that
which is really, really awesome.

37
00:02:10.818 --> 00:02:15.841
If you need to get dive behind
the abstraction, it offers a thing

38
00:02:15.841 --> 00:02:21.143
called middleware so that you can
access these pieces of routing and

39
00:02:21.143 --> 00:02:26.205
just, okay, when this happens and
this route changes do this.

40
00:02:26.205 --> 00:02:30.379
[LAUGH] It offers lighthouse
scores out of the gate.

41
00:02:30.379 --> 00:02:35.195
If you use Vue CLI and
even like the PWA of Vue CLI right out of

42
00:02:35.195 --> 00:02:39.440
the box it doesn't even
score as high as Nuxt does.

43
00:02:39.440 --> 00:02:42.340
Because Nuxt does all of
this stuff to kind of make

44
00:02:42.340 --> 00:02:45.109
sure that it has
the smallest build possible.

45
00:02:45.109 --> 00:02:49.015
It has Automatic dynamic routes this
is actually new you could create

46
00:02:49.015 --> 00:02:51.776
dynamic routes, but
they weren't automatic,

47
00:02:51.776 --> 00:02:56.108
you have to declare in a function what
you want the shape of what you'd want.

48
00:02:56.108 --> 00:03:02.187
Now, in this next version of Nuxt,
[LAUGH] newer version of Nuxt,

49
00:03:02.187 --> 00:03:08.719
what we have is the ability to
dynamically create all of these routes.

50
00:03:08.719 --> 00:03:12.445
And again, in the next course,
I will go through how those are made.

51
00:03:12.445 --> 00:03:15.531
So let's say you had a manifest file and
for

52
00:03:15.531 --> 00:03:20.347
every page you wanted to make a product
page out of all of that data.

53
00:03:20.347 --> 00:03:23.080
If you are creating an underscored page,

54
00:03:23.080 --> 00:03:27.466
it will automatically create all
of those pages for you, so cool.

55
00:03:27.466 --> 00:03:31.274
It offers Transpilation,
Hot reloading in Development,

56
00:03:31.274 --> 00:03:34.481
pre-processing like SASS,
LESS, and Stylus.

57
00:03:34.481 --> 00:03:39.222
You can write Vue Files, just as I said,
but you can write Vue Files as your

58
00:03:39.222 --> 00:03:42.913
pages and they will create pages and
I'll show you that.

59
00:03:42.913 --> 00:03:46.345
I mentioned code splitting,
what is code splitting actually?

60
00:03:46.345 --> 00:03:51.362
[LAUGH] Code splitting, tree shaking, so
when we're talking about tree shaking,

61
00:03:51.362 --> 00:03:56.390
let's say we're loading lodash, and
lodash has all of these different methods.

62
00:03:56.390 --> 00:04:00.010
It's just like got so
much stuff for us to play with.

63
00:04:00.010 --> 00:04:04.407
So we're loading lodash and we're
only really using _.tail and _.union,

64
00:04:04.407 --> 00:04:05.461
we can tree shake.

65
00:04:05.461 --> 00:04:09.626
[LAUGH] And what we're left with is
just the things that we are using,

66
00:04:09.626 --> 00:04:12.125
just the things that we're accessing.

67
00:04:12.125 --> 00:04:16.121
Which makes, it means that as we use
Nuxt for bigger and bigger projects,

68
00:04:16.121 --> 00:04:18.384
we're loading more and more libraries.

69
00:04:18.384 --> 00:04:21.922
That's when the performance really
pays off because it's saying,

70
00:04:21.922 --> 00:04:25.956
I'll just use the smallest thing possible
and I'll get rid of anything else.

