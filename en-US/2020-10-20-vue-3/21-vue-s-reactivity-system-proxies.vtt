WEBVTT

1
00:00:00.000 --> 00:00:04.401
All right, watchers and
vue's reactivity system.

2
00:00:04.401 --> 00:00:09.742
Now, we're going to use this opportunity
to dive a little bit deeper.

3
00:00:09.742 --> 00:00:11.406
And for the first part of this,

4
00:00:11.406 --> 00:00:15.190
I'm not gonna talk about something
that's on the surface of the API.

5
00:00:15.190 --> 00:00:18.383
I'm gonna talk about watchers in
a minute and how you use them.

6
00:00:18.383 --> 00:00:22.996
But before we talk about watchers,
I want to talk about how vues

7
00:00:22.996 --> 00:00:27.800
three uses reactivity and
dive into what that means a little bit.

8
00:00:27.800 --> 00:00:32.446
Because even though it's not necessarily
super important in order for

9
00:00:32.446 --> 00:00:37.014
you to use vue it's a little important
because if you're debugging or

10
00:00:37.014 --> 00:00:41.970
if you're curious how something is
working, or you don't know how did this

11
00:00:41.970 --> 00:00:45.938
update automatically,
I want to give a couple of examples.

12
00:00:45.938 --> 00:00:48.354
So for this part,
you can kinda sit back a little bit,

13
00:00:48.354 --> 00:00:52.030
I'm not gonna be teaching you something
that you immediately have to work with.

14
00:00:52.030 --> 00:00:54.802
Don't worry, I'll sound the alarms when
I start talking about watchers and

15
00:00:54.802 --> 00:00:57.033
that's something that you're
gonna be working with again.

16
00:00:57.033 --> 00:00:59.238
But for this part, maybe just sit back and

17
00:00:59.238 --> 00:01:02.073
learn a little bit about
the vues reactivity system.

18
00:01:02.073 --> 00:01:04.730
So what is reactive?

19
00:01:04.730 --> 00:01:09.270
We've heard reactive programming and
people talk about reactive programming

20
00:01:09.270 --> 00:01:13.751
a lot lately and sometimes people think,
well reactive programming is RXJs.

21
00:01:13.751 --> 00:01:15.018
And they're not wrong.

22
00:01:15.018 --> 00:01:16.919
RxJs is reactive programming.

23
00:01:16.919 --> 00:01:22.884
But reactive programming is a type of
programming it's a large umbrella and

24
00:01:22.884 --> 00:01:26.812
RxJs is one library that
uses reactive premises.

25
00:01:26.812 --> 00:01:31.965
Angular and vue use reactive premises
mobX uses reactive premises.

26
00:01:31.965 --> 00:01:37.614
But before we dive into how vue does that,
let's talk about what that is.

27
00:01:37.614 --> 00:01:42.042
Reactive programming is programming
with asynchronous data streams.

28
00:01:42.042 --> 00:01:46.453
Now that still sounds confusing, so
let's break it down a little bit further.

29
00:01:46.453 --> 00:01:51.427
A stream is a sequence of ongoing
events ordered in time that offer some

30
00:01:51.427 --> 00:01:53.719
hooks with which to observe it.

31
00:01:53.719 --> 00:01:57.021
If I'm giving a really basic example.

32
00:01:57.021 --> 00:02:00.779
If you had a hover state that
had some transition on it,

33
00:02:00.779 --> 00:02:04.304
there's the moment that
you start hovering on it.

34
00:02:04.304 --> 00:02:08.064
There's the transition state
in which it's changing.

35
00:02:08.064 --> 00:02:12.794
And then there's that end state and
you have hooks with which

36
00:02:12.794 --> 00:02:17.257
observe this part,
the transition part, the end part.

37
00:02:17.257 --> 00:02:19.168
So that's a really basic example but

38
00:02:19.168 --> 00:02:23.183
obviously when we're building company
applications it gets more complex.

39
00:02:23.183 --> 00:02:26.607
When we use reactive premises for
building applications,

40
00:02:26.607 --> 00:02:30.310
it means it's very easy to update
state and reaction to events.

41
00:02:30.310 --> 00:02:34.872
And this is awesome because most of what
we're doing with application development

42
00:02:34.872 --> 00:02:36.574
is reacting to state changes.

43
00:02:36.574 --> 00:02:40.179
We're mostly reacting to things
changing an application.

44
00:02:40.179 --> 00:02:43.476
Andre salts has a great post
that goes into tons of depth.

45
00:02:43.476 --> 00:02:47.160
As I mentioned before,
I'm gonna go over these premises, but

46
00:02:47.160 --> 00:02:51.609
I'm also gonna link off to other people
who are going into different areas so

47
00:02:51.609 --> 00:02:53.987
that if you want to dive further you can.

48
00:02:53.987 --> 00:02:56.686
So let's look at the canonical example.

49
00:02:56.686 --> 00:03:01.444
This is an excel spreadsheet if
we have in this area two, and

50
00:03:01.444 --> 00:03:03.927
three and we have a sum of five.

51
00:03:03.927 --> 00:03:07.203
If we have that sum unit
in that three area,

52
00:03:07.203 --> 00:03:11.753
it will automatically update
if we update the first right.

53
00:03:11.753 --> 00:03:15.044
We didn't have to do anything or
say anything,

54
00:03:15.044 --> 00:03:19.918
in order for that to automatically
know that that needs to be updated.

55
00:03:19.918 --> 00:03:23.329
This isn't actually how
JavaScript typically works.

56
00:03:23.329 --> 00:03:26.715
If we have a value of two and
a value of three and

57
00:03:26.715 --> 00:03:30.831
then a sum and
let's say we change that value of three.

58
00:03:30.831 --> 00:03:33.941
If we write some, it's still five, right?

59
00:03:33.941 --> 00:03:37.736
That's not JavaScript doesn't work that
way because of the way that the compiler

60
00:03:37.736 --> 00:03:40.880
is working because it's compiling
in a different order than that.

61
00:03:40.880 --> 00:03:46.047
So let's talk about how we could
potentially make that change.

62
00:03:46.047 --> 00:03:50.534
So I made this animated example
that you'll also find in

63
00:03:50.534 --> 00:03:52.637
the view documentation.

64
00:03:52.637 --> 00:03:56.290
We start with an object.

65
00:03:56.290 --> 00:04:00.963
We add a handler and proxy the object.

66
00:04:00.963 --> 00:04:02.447
In this case, it's the same.

67
00:04:05.709 --> 00:04:10.534
But look,
we can intercept the object with a proxy.

68
00:04:10.534 --> 00:04:11.560
And here's the cool part.

69
00:04:11.560 --> 00:04:13.422
If we change the first object,

70
00:04:13.422 --> 00:04:18.370
the proxied object still up updates
accordingly without adjusting the handler.

71
00:04:18.370 --> 00:04:21.994
With reactivity, we can respond to
changes instantly and don't worry,

72
00:04:21.994 --> 00:04:23.930
I'm gonna dive that was pretty quick.

73
00:04:23.930 --> 00:04:29.014
I'm gonna dive into all of those
pieces a little bit more as well.

74
00:04:29.014 --> 00:04:31.134
So how does vue 3 do this?

75
00:04:31.134 --> 00:04:33.750
I'm gonna break it down into little bits.

76
00:04:33.750 --> 00:04:36.761
How would we make something reactive?

77
00:04:36.761 --> 00:04:40.132
Well, we need to detect when there's
a change in one of the values,

78
00:04:40.132 --> 00:04:42.449
we need to track the function
that changes it.

79
00:04:42.449 --> 00:04:46.893
And we need to trigger the function so
that it can update the final value.

80
00:04:46.893 --> 00:04:50.418
Proxies in JavaScript are a newer feature.

81
00:04:50.418 --> 00:04:55.372
In vue 2, we use object
defined property which is an,

82
00:04:55.372 --> 00:04:58.724
it's predates ESX, it's ES five.

83
00:04:58.724 --> 00:05:02.738
Whereas proxies are something
that is newly available to us.

84
00:05:02.738 --> 00:05:05.646
It's an object that in cases
another object or function and

85
00:05:05.646 --> 00:05:07.049
allows you to intercept it.

86
00:05:07.049 --> 00:05:13.322
So here's the most basic
new proxy target handler.

87
00:05:13.322 --> 00:05:19.217
So if I have a dinner, which is of course
gonna be tacos, I can create a handler and

88
00:05:19.217 --> 00:05:23.498
say get in the target and
the prop and I return target prop.

89
00:05:23.498 --> 00:05:29.208
And so basically I'm saying,
return that piece to me and I say calm,

90
00:05:29.208 --> 00:05:35.124
const proxy is new proxy and I pass
in the dinner object and the handler.

91
00:05:35.124 --> 00:05:39.082
And if I console dot log proxy dot meal,
what I'll get is tacos.

92
00:05:39.082 --> 00:05:42.412
Because I'm returning target prop.

93
00:05:42.412 --> 00:05:46.085
So I've passed that in and
that's what I'm returning.

94
00:05:46.085 --> 00:05:50.479
If I have that same dinner object,
and let's say this time,

95
00:05:50.479 --> 00:05:54.529
I'm doing the same thing of
returning target prop, but

96
00:05:54.529 --> 00:05:59.207
I wanna do something else I can
say console dot log intercepted.

97
00:05:59.207 --> 00:06:03.856
And if I do the same thing,
I'll get intercepted and then tacos.

98
00:06:03.856 --> 00:06:06.274
So this is really cool.

99
00:06:06.274 --> 00:06:09.340
We can still have a different
view onto that same,

100
00:06:09.340 --> 00:06:13.870
we talked about computer properties
different view onto that same data.

101
00:06:13.870 --> 00:06:20.091
Here, we have the ability to add some
special things to that first object.

102
00:06:22.382 --> 00:06:26.646
Now, we don't actually have
to return target prop.

103
00:06:26.646 --> 00:06:31.222
If we wanted to, we could return
something totally different.

104
00:06:31.222 --> 00:06:35.614
And I'm showing you this to say, you have
to return target prompt in order to make

105
00:06:35.614 --> 00:06:40.279
that proxy work the way that you think it
is, it doesn't automatically return that.

106
00:06:40.279 --> 00:06:44.057
So if I wanted to say console dot log,
we swapped out your dinner.

107
00:06:44.057 --> 00:06:47.732
I think there's a little
bit that's missing here and

108
00:06:47.732 --> 00:06:50.517
return burger which would be terrible.

109
00:06:50.517 --> 00:06:55.553
Then we pass in dinner and handler and
we get we swapped out your dinner burger.

110
00:06:55.553 --> 00:07:01.709
So it doesn't necessarily return that we
would have to be sure to return that.

111
00:07:01.709 --> 00:07:03.898
This is actually called the trap.

112
00:07:03.898 --> 00:07:06.099
[LAUGH] Cuz it's a trap.

113
00:07:06.099 --> 00:07:09.688
I don't want someone to return my burger.

114
00:07:09.688 --> 00:07:13.965
The ability to do that in
JavaScript is called a trap.

115
00:07:13.965 --> 00:07:17.208
So here we got our
original object as well.

116
00:07:17.208 --> 00:07:23.348
We go back to returning that and
we get tacos.

117
00:07:23.348 --> 00:07:29.946
There's another argument that we can
pass here that proxies let us do.

118
00:07:29.946 --> 00:07:33.523
We can say target prop and
we can also say receiver and

119
00:07:33.523 --> 00:07:38.973
we can return reflect.get and this is
something that's a native JavaScript,

120
00:07:38.973 --> 00:07:41.267
all the spread of the arguments.

121
00:07:41.267 --> 00:07:43.690
And what it allows us to
do is the same thing.

122
00:07:43.690 --> 00:07:45.502
So why would we do this?

123
00:07:45.502 --> 00:07:49.308
It's because reflect
binds this properly and

124
00:07:49.308 --> 00:07:54.674
you noticed how we were binding this,
this counter and methods,

125
00:07:54.674 --> 00:07:59.274
we need to make sure that
we're binding this properly.

126
00:07:59.274 --> 00:08:03.635
So here, if we wanted to track
the things that are changing,

127
00:08:03.635 --> 00:08:08.266
we could intercept and say, okay,
I want to still return that.

128
00:08:08.266 --> 00:08:10.971
But I also want to track
the properties that are changing.

129
00:08:10.971 --> 00:08:15.821
I want to make sure that I have a function
that's collecting that information, and

130
00:08:15.821 --> 00:08:17.356
I'm gonna call it track.

131
00:08:17.356 --> 00:08:20.828
So then we're returning the same and
we get the same thing.

132
00:08:20.828 --> 00:08:21.797
And this track,

133
00:08:21.797 --> 00:08:26.644
you'll find is really interesting when we
start talking about watchers because we

134
00:08:26.644 --> 00:08:30.605
want to track what dependencies
are changing during that process.

135
00:08:30.605 --> 00:08:35.016
What is as we're changing things
around what is changing about it.

136
00:08:35.016 --> 00:08:39.305
So track in vue saves any changes and
I'm giving you the names of things so

137
00:08:39.305 --> 00:08:43.193
that if you wanted to dive into
the code base you could find stuff.

138
00:08:43.193 --> 00:08:46.784
So if we have a get an asset,
so are getting things and

139
00:08:46.784 --> 00:08:52.435
setting things remember I mentioned,
computer properties are get only not set.

140
00:08:52.435 --> 00:08:56.081
So we've got target prop receiver return,
reflect,

141
00:08:56.081 --> 00:09:00.845
get pass in the arguments,
return reflects set, passing arguments.

142
00:09:00.845 --> 00:09:05.765
And then we're able to track all of
the properties that are changing and

143
00:09:05.765 --> 00:09:10.357
then trigger a new function that
will update things accordingly.

144
00:09:10.357 --> 00:09:15.225
So trigger and vue runs the changes.

145
00:09:15.225 --> 00:09:17.249
And this is the last slide.

146
00:09:17.249 --> 00:09:21.574
I know this is a lot of code, but really
what this is doing is making sure that if

147
00:09:21.574 --> 00:09:23.851
the value is the same, don't do stuff.

148
00:09:23.851 --> 00:09:26.604
[LAUGH] Basically let's save some time.

149
00:09:26.604 --> 00:09:30.962
And if the things are the same and
nothing's changed,

150
00:09:30.962 --> 00:09:34.194
don't change things around very much.

151
00:09:34.194 --> 00:09:37.570
So we want it to detect if there's
a change in one of the values,

152
00:09:37.570 --> 00:09:40.017
which in track the function
that changes it.

153
00:09:40.017 --> 00:09:41.122
And trigger a function so

154
00:09:41.122 --> 00:09:44.129
that it can update the final value
in order to make things reactive.

155
00:09:44.129 --> 00:09:48.052
We don't have to detect when there's
a change in one of the values.

156
00:09:48.052 --> 00:09:52.148
Because proxies are already doing that for
us automatically.

157
00:09:52.148 --> 00:09:56.143
We can track the function that
changes it using track and

158
00:09:56.143 --> 00:10:00.915
we can trigger a function that
updates the final value in trigger.

159
00:10:00.915 --> 00:10:05.054
So if you wanna explore
these packages right now,

160
00:10:05.054 --> 00:10:10.383
in vue 2 another big change is
that everything was in one place.

161
00:10:10.383 --> 00:10:14.855
In vue 3, everything became very tree
shakable and we're code splitting and

162
00:10:14.855 --> 00:10:16.356
doing a few other things.

163
00:10:16.356 --> 00:10:19.966
So what that means is everything
exists in separate packages.

164
00:10:19.966 --> 00:10:22.321
So even the reactivity system in and

165
00:10:22.321 --> 00:10:28.067
of itself exists in a completely different
package than some pieces of the templates.

166
00:10:28.067 --> 00:10:32.053
And you might see that things like
transition that we'll use in the animation

167
00:10:32.053 --> 00:10:36.280
section that's in a totally different
package as well because in case you're not

168
00:10:36.280 --> 00:10:38.792
using transitions,
it will get rid of it that and

169
00:10:38.792 --> 00:10:40.594
then you can have a smaller build.

170
00:10:40.594 --> 00:10:43.902
So if you want to explore
the reactivity package,

171
00:10:43.902 --> 00:10:47.545
this is where this lives right
now in the vue next repo.

172
00:10:47.545 --> 00:10:51.056
In the future if you're watching
this a year in advance,

173
00:10:51.056 --> 00:10:53.699
this will probably just save you or
vue j s.

174
00:10:53.699 --> 00:10:59.939
But for now, we're keeping this for
a few months, maybe a year to view next.

175
00:10:59.939 --> 00:11:04.745
As I mentioned before, proxies are ES6
previously it was object defined

176
00:11:04.745 --> 00:11:10.018
property and Avenue has a workshop where
he goes into all these advanced concepts

177
00:11:10.018 --> 00:11:15.083
on Frontend Masters where he describes
all of that object defined property.

178
00:11:15.083 --> 00:11:18.441
This is all new stuff with the proxies.

