WEBVTT

1
00:00:00.220 --> 00:00:03.514
&gt;&gt; Will Sentance: Let's also see
on that same note, arrays and

2
00:00:03.514 --> 00:00:05.686
functions are also objects.

3
00:00:05.686 --> 00:00:08.291
So,they get all the access to
the functions and prototypes.

4
00:00:08.291 --> 00:00:09.970
But, they also get extra goodies.

5
00:00:13.010 --> 00:00:16.450
Before we do this, I'm going to tell
you that when JavaScript loads,

6
00:00:16.450 --> 00:00:19.190
there's another thing that it gets for
free.

7
00:00:20.400 --> 00:00:28.070
Which is, another function object
combo with the label function.

8
00:00:29.760 --> 00:00:35.920
And this function object combo,
yeah, it's a function hopefully.

9
00:00:37.360 --> 00:00:39.090
But of course it's therefore also,

10
00:00:39.090 --> 00:00:42.120
cuz a function object combo
has all functions are.

11
00:00:42.120 --> 00:00:44.870
And don't get confused by the fact
they've got out the case.

12
00:00:46.220 --> 00:00:47.720
They're just function object combos, but

13
00:00:47.720 --> 00:00:50.190
they're ones we get
built in to JavaScript.

14
00:00:50.190 --> 00:00:57.452
This function in its object form,
&gt;&gt; Will Sentance: Has

15
00:00:57.452 --> 00:01:00.980
what property, David?

16
00:01:00.980 --> 00:01:02.550
&gt;&gt; David: Prototype.
&gt;&gt; Will Sentance: Prototype fantastic.

17
00:01:03.780 --> 00:01:05.310
Yeah people forgive me for these slides.

18
00:01:05.310 --> 00:01:07.880
This is a bit where I'm like, I just
want to make sure you know about this.

19
00:01:07.880 --> 00:01:10.230
We're not gonna use this heavily, but

20
00:01:10.230 --> 00:01:14.600
I really want this to have like
the core diagrammed version of what is

21
00:01:14.600 --> 00:01:19.630
the most like intricate,
finicky parts of JavaScript, okay?

22
00:01:19.630 --> 00:01:21.159
It also has an object.

23
00:01:23.289 --> 00:01:24.250
&gt;&gt; Will Sentance: Sort on prototype.

24
00:01:26.180 --> 00:01:29.966
And that has in it,
a whole bunch of functions.

25
00:01:29.966 --> 00:01:34.075
It's got toString.

26
00:01:34.075 --> 00:01:38.970
All the functions that we hope,
any function will have access to.

27
00:01:38.970 --> 00:01:41.800
You know like, multiply by 2.call.

28
00:01:41.800 --> 00:01:42.980
But where is that call coming from?

29
00:01:42.980 --> 00:01:45.060
It's not my multiply by two object.

30
00:01:45.060 --> 00:01:47.420
Multiply by 2.2 string,
where's that two string coming from?

31
00:01:47.420 --> 00:01:49.030
Well, we'll play this out in a second.

32
00:01:49.030 --> 00:01:50.810
I just want to lay this out to start with.

33
00:01:50.810 --> 00:01:58.319
Two string, it's got cool on it,
that functions have access to.

34
00:01:58.319 --> 00:02:00.004
Besides cool anyone who,
anyone think of others?

35
00:02:00.004 --> 00:02:01.750
&gt;&gt; David: Bind.
&gt;&gt; Will Sentance: Bind, fantastic, yeah.

36
00:02:01.750 --> 00:02:09.183
Who's to bind and there's apply.

37
00:02:09.183 --> 00:02:11.760
Yeah, I think that there's two others.

38
00:02:11.760 --> 00:02:12.640
It's very few others.

39
00:02:12.640 --> 00:02:16.450
Okay, so not everything in orange,
everything surrounded by orange.

40
00:02:16.450 --> 00:02:20.260
We did not declare,
it was put in there for us.

41
00:02:20.260 --> 00:02:21.710
As soon we turn Jarvis Word on.

42
00:02:23.610 --> 00:02:29.510
Okay, so now let's walk through this
code knowing that these bits are here.

43
00:02:32.040 --> 00:02:35.620
Line one, Elliott, what are doing?

44
00:02:35.620 --> 00:02:38.090
&gt;&gt; Elliott: We are declaring
a function multiplied by two.

45
00:02:38.090 --> 00:02:39.670
&gt;&gt; Will Sentance: No,
I've got no room in my memory.

46
00:02:39.670 --> 00:02:48.390
Okay, declaring a function multiply
by two, help me out here man.

47
00:02:48.390 --> 00:02:50.400
It's a function.

48
00:02:50.400 --> 00:02:52.510
&gt;&gt; Elliott: Object.
&gt;&gt; Will Sentance: Object combo exactly,

49
00:02:52.510 --> 00:03:00.760
and it's at this point like it's not,
we got it.

50
00:03:00.760 --> 00:03:06.440
Exactly, and the object, because it's
a function-object, well, we know

51
00:03:06.440 --> 00:03:11.780
it has a prototype object as well, but
we don't probably use that people, right?

52
00:03:11.780 --> 00:03:15.120
We don't use that bit unless we
call 2 with a new keyword in front,

53
00:03:15.120 --> 00:03:18.200
which gives us our objects that have
a link to that prototype object.

54
00:03:18.200 --> 00:03:19.922
Otherwise we never use this bit.

55
00:03:19.922 --> 00:03:23.930
It's a bit redundant, it's kind of weird
why we always have it there just in case.

56
00:03:23.930 --> 00:03:26.460
That if we ever were to try to run
this function with a new keyword

57
00:03:26.460 --> 00:03:28.790
return out objects, which will
always have a link to this object.

58
00:03:28.790 --> 00:03:31.390
We would never otherwise
use it I don't think maybe.

59
00:03:31.390 --> 00:03:33.975
Okay, now things get interesting.

60
00:03:33.975 --> 00:03:37.373
Multiply by 2.2 string.

61
00:03:37.373 --> 00:03:40.109
Multiply By2.

62
00:03:40.109 --> 00:03:45.305
[BLANK_AUDIO To String

63
00:03:47.859 --> 00:03:50.235
&gt;&gt; Will Sentance: Hard line here.

64
00:03:50.235 --> 00:03:53.580
Terry, talk me through the lookup process.

65
00:03:53.580 --> 00:03:56.130
&gt;&gt; Terry: Execution context for-
&gt;&gt; Will Sentance: Well,

66
00:03:56.130 --> 00:03:57.830
we've gotta find that thing first.

67
00:03:57.830 --> 00:03:59.140
I don't even know where it is.

68
00:03:59.140 --> 00:04:00.260
Let's do the lookup process.

69
00:04:00.260 --> 00:04:01.778
Where's multiplyBy2?

70
00:04:01.778 --> 00:04:04.281
&gt;&gt; Terry: In global.
&gt;&gt; Will Sentance: In global, excellent,

71
00:04:04.281 --> 00:04:07.275
Elliot which bit of mode [INAUDIBLE].

72
00:04:07.275 --> 00:04:08.330
The function or the object?

73
00:04:08.330 --> 00:04:09.810
&gt;&gt; Terry: The object.

74
00:04:09.810 --> 00:04:11.300
&gt;&gt; Will Sentance: The object, see?

75
00:04:11.300 --> 00:04:14.660
.notation, it may see an execution
on it on the end here, but

76
00:04:14.660 --> 00:04:18.980
it's not we've got to go find this
thing whatever it is, two string.

77
00:04:18.980 --> 00:04:22.050
We look for it on the associated object.

78
00:04:22.050 --> 00:04:23.410
Because when we use dot notation,

79
00:04:23.410 --> 00:04:27.800
we look, just like when we do multiply by
2.prototype, we'd find this empty object.

80
00:04:27.800 --> 00:04:29.500
We're gonna go multiply by 2.string and

81
00:04:29.500 --> 00:04:33.750
we're looking through the properties
of multiply by two in its object form.

82
00:04:33.750 --> 00:04:37.730
Chris, do we see something
called to string?

83
00:04:37.730 --> 00:04:38.840
&gt;&gt; Chris: No.
&gt;&gt; Will Sentance: No.

84
00:04:38.840 --> 00:04:40.308
It's not there.

85
00:04:42.335 --> 00:04:43.160
&gt;&gt; Will Sentance: Do we panic?

86
00:04:44.420 --> 00:04:48.140
It's an object, so what property
does it automatically have, David?

87
00:04:48.140 --> 00:04:48.680
&gt;&gt; Chris: Proto.

88
00:04:48.680 --> 00:04:53.410
&gt;&gt; Will Sentance: Proto,
all objects have _proto_.

89
00:04:53.410 --> 00:04:57.480
Now, where, David, do you think this _,
_ is gonna refer off to?

90
00:04:58.690 --> 00:05:00.230
&gt;&gt; David: To the console object?

91
00:05:00.230 --> 00:05:02.350
&gt;&gt; Will Sentance: That
would be thoughtful.

92
00:05:02.350 --> 00:05:06.320
But this here, is a function object combo

93
00:05:06.320 --> 00:05:11.270
where we want this function to have
access to certain bonus functions that

94
00:05:11.270 --> 00:05:16.450
are only available to functions,
but not available to objects.

95
00:05:16.450 --> 00:05:21.310
So our object we made earlier, that points
off to this Object, because we want it to

96
00:05:21.310 --> 00:05:27.220
have access to the objects specific
methods, like has owned property.

97
00:05:27.220 --> 00:05:33.470
But this, multiplied by two is a function
that happens to have the attached object,

98
00:05:33.470 --> 00:05:37.260
and that means we want our function
to have access to some things which

99
00:05:37.260 --> 00:05:43.560
are specific to functions, like call,
bind, and apply into string.

100
00:05:43.560 --> 00:05:47.140
So David, do you wanna take another
shot at where you think that proto,

101
00:05:47.140 --> 00:05:49.380
which object full of functions
it might point off to.

102
00:05:49.380 --> 00:05:50.040
&gt;&gt; David: The function.

103
00:05:50.040 --> 00:05:53.120
&gt;&gt; Will Sentance: To
the function.prototype object.

104
00:05:53.120 --> 00:05:56.265
Off it goes,
&gt;&gt; Will Sentance: To

105
00:05:56.265 --> 00:05:59.869
the function.prototype object,
and that means.

106
00:05:59.869 --> 00:06:03.650
Seht told me through the actual lookup
we're gonna have now, when I try and

107
00:06:03.650 --> 00:06:10.720
run toString on multiplyBy2, hoping to
find there's a function called toString.

108
00:06:10.720 --> 00:06:12.360
&gt;&gt; David: Can we just do it?

109
00:06:12.360 --> 00:06:14.450
&gt;&gt; Will Sentance: Yeah, we did already.

110
00:06:14.450 --> 00:06:17.310
You told me through the whole way,
you got me.

111
00:06:17.310 --> 00:06:18.840
&gt;&gt; David: Okay.
&gt;&gt; Will Sentance: So up toString on

112
00:06:18.840 --> 00:06:23.300
the multiplyBy2 object, If I choose
object, it doesn't have a function.

113
00:06:23.300 --> 00:06:24.440
&gt;&gt; David: Yeah, doesn't find it.

114
00:06:24.440 --> 00:06:25.840
&gt;&gt; Will Sentance: It
looks in the prototype,

115
00:06:25.840 --> 00:06:26.610
which is-
&gt;&gt; David: It

116
00:06:26.610 --> 00:06:27.320
looks-
&gt;&gt; Will Sentance: Proto-

117
00:06:27.320 --> 00:06:27.880
&gt;&gt; David: Which is

118
00:06:27.880 --> 00:06:29.661
linked to the functions.prototype.

119
00:06:29.661 --> 00:06:32.330
&gt;&gt; Will Sentance: Functions.prototype
object, where was it find?

120
00:06:32.330 --> 00:06:33.844
&gt;&gt; David: toString.
&gt;&gt; Will Sentance: toString.

121
00:06:36.168 --> 00:06:38.050
&gt;&gt; Will Sentance: I it grabs this code and
runs it.

122
00:06:39.950 --> 00:06:40.498
Yeah.

123
00:06:41.922 --> 00:06:45.685
&gt;&gt; Will Sentance: Function,
well, what about, though,

124
00:06:45.685 --> 00:06:49.800
if I want to now use, this is so brutal.

125
00:06:49.800 --> 00:06:54.230
What if I now want to
use my function that was

126
00:06:54.230 --> 00:06:59.320
available to object via the protocol
reference to object.protoype?

127
00:06:59.320 --> 00:07:05.602
Maybe now I don't get access to those
Maybe I can't do multiplyBy2.hasOwn.

128
00:07:05.602 --> 00:07:11.641
Hm, maybe I can't do
multiplyBy2.hasOwnProperty.

129
00:07:11.641 --> 00:07:12.950
I don't know what we're putting in, score.

130
00:07:14.310 --> 00:07:16.060
Maybe I can't do this line now.

131
00:07:16.060 --> 00:07:21.430
Let's see, raise your hand if you wanna
take a shot at the journey of finding or

132
00:07:21.430 --> 00:07:22.070
not finding this.

133
00:07:22.070 --> 00:07:23.180
Nick, go ahead, my friend.

134
00:07:23.180 --> 00:07:27.950
&gt;&gt; Nick: So it looks for
multiply by 2 in the memory.

135
00:07:27.950 --> 00:07:28.780
&gt;&gt; Will Sentance: Finds it.

136
00:07:28.780 --> 00:07:32.540
&gt;&gt; Nick: And then it looks for
has own property in it.

137
00:07:32.540 --> 00:07:33.830
&gt;&gt; Will Sentance: That has own property?

138
00:07:33.830 --> 00:07:34.350
&gt;&gt; Nick: No.

139
00:07:34.350 --> 00:07:35.780
&gt;&gt; Will Sentance: That has own property?

140
00:07:35.780 --> 00:07:36.790
No, but.

141
00:07:36.790 --> 00:07:39.860
&gt;&gt; Nick: But
it goes see what proto is referencing,

142
00:07:39.860 --> 00:07:42.080
which is the function prototype.

143
00:07:42.080 --> 00:07:42.970
&gt;&gt; Will Sentance: Fantastic.

144
00:07:42.970 --> 00:07:48.030
I'm even coarse about saying that it's
the function.prototype object, yeah.

145
00:07:48.030 --> 00:07:51.340
&gt;&gt; Nick: .prototype object, and then
looks for, has its own property in there.

146
00:07:51.340 --> 00:07:52.250
&gt;&gt; Will Sentance: Is this it?

147
00:07:52.250 --> 00:07:54.520
&gt;&gt; Nick: No, it's not there.

148
00:07:54.520 --> 00:07:57.940
&gt;&gt; Will Sentance: But what do you think
this object might have on it, hidden?

149
00:07:57.940 --> 00:07:58.880
&gt;&gt; Nick: Its own proto,

150
00:07:58.880 --> 00:08:00.500
which references the-
&gt;&gt; Will Sentance: Perfect

151
00:08:00.500 --> 00:08:01.711
&gt;&gt; Nick: Object.

152
00:08:01.711 --> 00:08:04.180
&gt;&gt; Will Sentance: Can we give
Nick a round of applause?

153
00:08:04.180 --> 00:08:04.833
That was excellent man.

154
00:08:04.833 --> 00:08:06.407
[APPLAUSE] One of the hardest things.

155
00:08:06.407 --> 00:08:10.121
Fantastic man, exactly that proto,

156
00:08:10.121 --> 00:08:14.770
which references up to
this prototype object.

157
00:08:14.770 --> 00:08:16.130
Where what do we find?

158
00:08:16.130 --> 00:08:17.680
&gt;&gt; Will Sentance: Property and
we can use it.

159
00:08:19.820 --> 00:08:22.490
Now we see it's called a prototype chain.

160
00:08:22.490 --> 00:08:26.130
It is JavaScripts prototypal nature
that when it doesn't find something on

161
00:08:26.130 --> 00:08:30.000
the first object, it looks to its
protoreference to another object,

162
00:08:30.000 --> 00:08:32.820
doesn't find it on that one,
it's still checks the proto.

163
00:08:32.820 --> 00:08:34.560
What is this object?

164
00:08:34.560 --> 00:08:40.778
So we didn't, suppose we add and
multiply by, I haven't done this before,

165
00:08:40.778 --> 00:08:45.670
but let's say multiply by 2.,
I don't know, increase.

166
00:08:47.360 --> 00:08:48.230
Let's do the journey.

167
00:08:48.230 --> 00:08:52.600
multiplyBy2, look on this object version,
cuz it's dot notation.

168
00:08:52.600 --> 00:08:55.280
Prototype's not it,
there's no increase function.

169
00:08:55.280 --> 00:08:58.770
Look to its proto, which takes this
other object full of functions.

170
00:08:58.770 --> 00:09:01.430
Increase, not there, increase, not there,
increase, not there Load to its proto.

171
00:09:01.430 --> 00:09:04.860
Gosh, still doesn't have
one called increase.

172
00:09:04.860 --> 00:09:05.750
Does this have a proto?

173
00:09:05.750 --> 00:09:09.750
Well, of course it does,
but what is its proto?

174
00:09:09.750 --> 00:09:13.040
Refer to null.

175
00:09:13.040 --> 00:09:14.480
Stop looking.

176
00:09:14.480 --> 00:09:16.390
There's no further up this chain.

177
00:09:16.390 --> 00:09:19.399
And so, then, we get the [SOUND] error.

178
00:09:19.399 --> 00:09:21.873
This method does not exist.

179
00:09:21.873 --> 00:09:26.168
Okay people, that is the under the hood,

180
00:09:26.168 --> 00:09:33.427
chain of proto references known
as JavaScript's prototype nature.

181
00:09:33.427 --> 00:09:38.041
That gives objects functions
that would otherwise not been

182
00:09:38.041 --> 00:09:43.150
available on them through
this referencing link up.

183
00:09:43.150 --> 00:09:47.310
And what we do,
cuz we never lose access to these but-,

184
00:09:47.310 --> 00:09:52.080
well we can actually override the access
to them but ,what we tend to do, is give

185
00:09:52.080 --> 00:09:57.310
out objects access through their proto
to an object full of our own functions.

186
00:09:57.310 --> 00:10:01.362
Knowing that that object full of functions
will have it's own reference up to this

187
00:10:01.362 --> 00:10:03.898
object full of functions so
we don't lose access.

188
00:10:03.898 --> 00:10:08.651
And we're gonna use that fact
to allow us to create objects

189
00:10:08.651 --> 00:10:11.078
that the user would inherit.

190
00:10:11.078 --> 00:10:15.306
I don't love this term in JavaScript,
but to get access to functions that were

191
00:10:15.306 --> 00:10:19.744
available, to let's say we have user
objects, User 1, User 2, User 100.

192
00:10:19.744 --> 00:10:24.421
That have certain properties and certain
functions available to them, but now we

193
00:10:24.421 --> 00:10:29.249
want to create in our app, slightly more
specific types of users called paid users.

194
00:10:29.249 --> 00:10:30.233
We have paid User 1,

195
00:10:30.233 --> 00:10:34.055
paid User 1 wants to have access to most
of the functions that users had access to.

196
00:10:34.055 --> 00:10:36.990
User1 had access to,
User 20 had access to, but

197
00:10:36.990 --> 00:10:41.291
may also wanna have specific functions
that only a paid user will get access

198
00:10:41.291 --> 00:10:43.969
to like you know,
increase account balance.

199
00:10:43.969 --> 00:10:45.940
If you're not a paid user,
you don't have an account balance.

200
00:10:45.940 --> 00:10:47.687
So increase the account balance, but

201
00:10:47.687 --> 00:10:51.300
it doesn't wanna lose the ability to also
increase its score in our quiz game.

202
00:10:52.370 --> 00:10:58.020
So maybe we can have functions that are
only available to one type of object and

203
00:10:58.020 --> 00:11:00.670
then that set of functions

204
00:11:00.670 --> 00:11:05.540
would have a link up to another
set of functions one layer up.

205
00:11:05.540 --> 00:11:06.990
So we get both of these, but

206
00:11:06.990 --> 00:11:10.700
we have other objects which only get
access to that top layer of functions.

207
00:11:10.700 --> 00:11:13.120
Okay, and that is subclassing.

