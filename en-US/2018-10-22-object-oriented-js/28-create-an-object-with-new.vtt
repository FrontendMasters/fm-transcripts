WEBVTT

1
00:00:00.060 --> 00:00:04.340
&gt;&gt; Will Sentance: First, starting on the
left hand side, we're go to build out our

2
00:00:04.340 --> 00:00:08.820
base, they call it base class,
the one that produces others.

3
00:00:08.820 --> 00:00:14.060
We do the left hand side first, building
out first our user creator function.

4
00:00:14.060 --> 00:00:14.990
Let's do it.

5
00:00:14.990 --> 00:00:18.520
We have all our information,
that was our last interlude, people.

6
00:00:18.520 --> 00:00:23.620
Now we are charging on,
to our final subclassing

7
00:00:23.620 --> 00:00:28.520
approach, and here we are with our
penultimate subclassing approach.

8
00:00:28.520 --> 00:00:29.560
Here we go.

9
00:00:29.560 --> 00:00:35.076
Line one, Terry, it is your moment, walk
me through we we're doing in line one.

10
00:00:35.076 --> 00:00:40.110
&gt;&gt; Terry: Defining a function userCreator,
passing two parameters, name and score.

11
00:00:40.110 --> 00:00:43.648
&gt;&gt; Will Sentance: Right, we're not worried
about the parameters quite yet, but

12
00:00:43.648 --> 00:00:45.428
yes they are absolutely there.

13
00:00:45.428 --> 00:00:50.275
Raise your hand if we think we've
gotta bring back our awareness

14
00:00:50.275 --> 00:00:53.065
of it being a function object combo?

15
00:00:53.065 --> 00:00:57.690
David's right, [LAUGH] it was
definitely my answer's yes voice.

16
00:00:57.690 --> 00:01:00.830
Because we are now going to

17
00:01:00.830 --> 00:01:05.900
run this userCreator with the new keyword,
changing up its behavior inside.

18
00:01:05.900 --> 00:01:11.180
Including when it creates that object
automatically, having that object be

19
00:01:11.180 --> 00:01:16.120
linked up to userCreator
in its object format,

20
00:01:16.120 --> 00:01:19.202
the prototype property,
which is itself an object.

21
00:01:19.202 --> 00:01:24.218
We are almost there, we're gonna be
done in under three hours from now.

22
00:01:24.218 --> 00:01:26.339
&gt;&gt; Terry: [LAUGH]
&gt;&gt; Will Sentance: No,

23
00:01:26.339 --> 00:01:30.830
no more than three hours,
I can guarantee you.

24
00:01:30.830 --> 00:01:34.356
No, no, it was said, folks,

25
00:01:34.356 --> 00:01:39.130
look at this, wait, done, that's it.

26
00:01:39.130 --> 00:01:40.980
Does that help when you see all this?

27
00:01:40.980 --> 00:01:44.310
Probably not, but we are almost there.

28
00:01:44.310 --> 00:01:49.433
Okay, so userCreator.

29
00:01:49.433 --> 00:01:53.400
But you've now threw me back,
I've gone to not looking at that name.

30
00:01:53.400 --> 00:01:59.641
Chris, help me out with the full
declaration of userCreator.

31
00:01:59.641 --> 00:02:01.459
It is a function plus.

32
00:02:01.459 --> 00:02:02.168
&gt;&gt; Speaker 3: Object.

33
00:02:02.168 --> 00:02:05.007
&gt;&gt; Will Sentance: Object, which has on it?

34
00:02:05.007 --> 00:02:06.836
&gt;&gt; Speaker 3: This, prototype?

35
00:02:06.836 --> 00:02:09.075
&gt;&gt; Will Sentance: Prototype,
[LAUGH] there's only two answers correct.

36
00:02:09.075 --> 00:02:10.936
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Will Sentance: Either this or

37
00:02:10.936 --> 00:02:12.583
prototype, you got
the wrong one that time.

38
00:02:12.583 --> 00:02:14.990
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Will Sentance: But prototype,

39
00:02:14.990 --> 00:02:17.456
which is itself an?

40
00:02:17.456 --> 00:02:20.160
&gt;&gt; Speaker 3: Object.
&gt;&gt; Will Sentance: Object, there it is.

41
00:02:20.160 --> 00:02:25.110
Into which we're gonna put any functions,
that objects that get returned out

42
00:02:25.110 --> 00:02:29.900
of running userCreator with
the new keyword are going to have

43
00:02:29.900 --> 00:02:34.490
access to through their proto property,
okay.

44
00:02:34.490 --> 00:02:37.628
So let's put those functions in there.

45
00:02:37.628 --> 00:02:41.851
David, if you don't mind putting those
functions in that object as kind of

46
00:02:41.851 --> 00:02:45.956
completely in technical communication
as you can, if you don't mind.

47
00:02:45.956 --> 00:02:48.652
&gt;&gt; Speaker 4: There's a property
called sayName, sorry,

48
00:02:48.652 --> 00:02:50.920
you want me to start at the top okay,
yeah.

49
00:02:50.920 --> 00:02:52.223
&gt;&gt; Will Sentance: Well,
if you don't mind sort of saying

50
00:02:52.223 --> 00:02:53.560
userCreator.prototype.sayName.

51
00:02:53.560 --> 00:02:56.690
How's it get in, tell me through
the look up and assignment process.

52
00:02:56.690 --> 00:03:00.020
Just be as precise as possible
userCreator.prototype.sayName.

53
00:03:00.020 --> 00:03:03.137
&gt;&gt; Speaker 4:
UsuserCreator.prototype.samename is

54
00:03:03.137 --> 00:03:04.330
a function.

55
00:03:04.330 --> 00:03:05.680
&gt;&gt; Will Sentance: Right,
but let's make sure, okay.

56
00:03:05.680 --> 00:03:06.770
&gt;&gt; Speaker 4: You want
me to look it up first?

57
00:03:06.770 --> 00:03:08.700
Or just, I thought we were-
&gt;&gt; Will Sentance: Just sorta tell me how,

58
00:03:08.700 --> 00:03:10.610
when JavaScript sees, that doesn't go.

59
00:03:10.610 --> 00:03:11.300
&gt;&gt; Speaker 4: Gotcha.
&gt;&gt; Will Sentance: Port function,

60
00:03:11.300 --> 00:03:12.258
it goes across-
&gt;&gt; Speaker 4: It's for

61
00:03:12.258 --> 00:03:14.370
userCreator in the global memory.

62
00:03:14.370 --> 00:03:15.610
&gt;&gt; Will Sentance: Perfect, finds it.

63
00:03:15.610 --> 00:03:18.240
&gt;&gt; Speaker 4: Yes,
inside of there it looks for a prototype.

64
00:03:18.240 --> 00:03:20.960
&gt;&gt; Will Sentance: Inside of its object
portion of its function object combo,

65
00:03:20.960 --> 00:03:23.130
the find prototype property.

66
00:03:23.130 --> 00:03:24.900
&gt;&gt; Speaker 4: Then it looks for a sayName.

67
00:03:24.900 --> 00:03:31.520
&gt;&gt; Will Sentance: Right, and it assigns on
that object a sayName function, excellent.

68
00:03:31.520 --> 00:03:35.229
So if you want to do the same but
for login.

69
00:03:35.229 --> 00:03:36.840
Sorry is it login?

70
00:03:36.840 --> 00:03:38.110
Increments, sorry, increments.

71
00:03:38.110 --> 00:03:42.665
&gt;&gt; Speaker 5: We're gonna assign the
increment method on the prototype object

72
00:03:42.665 --> 00:03:45.413
on the object portion of userCreator.

73
00:03:45.413 --> 00:03:49.820
&gt;&gt; Will Sentance: [APPLAUSE] Exactly,
fantastic, thank you, man.

74
00:03:49.820 --> 00:03:52.130
That is exactly what we're gonna do.

75
00:03:52.130 --> 00:03:53.940
I couldn't have put it better.

76
00:03:53.940 --> 00:03:56.800
That level of precision is good for
the mind.

77
00:03:56.800 --> 00:03:59.700
It helps you yourself have
the clarity of what's going on here.

78
00:03:59.700 --> 00:04:04.320
Fantastic, okay, now let's get
on to making our user 1 object.

79
00:04:06.630 --> 00:04:09.290
Let's have Michael,
talk me through this, Michael.

80
00:04:09.290 --> 00:04:13.830
&gt;&gt; Michael: So in,
we're gonna create a const user 1.

81
00:04:13.830 --> 00:04:15.620
&gt;&gt; Will Sentance: Perfect,
it's uninitialized.

82
00:04:15.620 --> 00:04:20.070
&gt;&gt; Michael: Yeah, uninitialized, and
then we're gonna to execution context.

83
00:04:20.070 --> 00:04:21.990
&gt;&gt; Will Sentance: Perfect,
to execute what function?

84
00:04:21.990 --> 00:04:23.340
&gt;&gt; Michael: UserCreator.

85
00:04:23.340 --> 00:04:25.110
&gt;&gt; Will Sentance: Fantastic,
can we just say thank you Michael,

86
00:04:25.110 --> 00:04:27.300
not getting the new keyword,
thinking it makes it special.

87
00:04:27.300 --> 00:04:30.690
No, it's an execution context for
the execution of the userCreator function.

88
00:04:30.690 --> 00:04:32.100
Very well put Michael.

89
00:04:32.100 --> 00:04:39.984
There it is, userCreator
function with Phil and 5, okay?

90
00:04:39.984 --> 00:04:43.480
Exclusion context, but it is an exclusion
context with a little bit of

91
00:04:43.480 --> 00:04:46.245
sort of fiddling done in it,
because of what key word?

92
00:04:46.245 --> 00:04:48.100
&gt;&gt; Speaker 7: New key word.

93
00:04:48.100 --> 00:04:49.025
&gt;&gt; Will Sentance: New key word, exactly.

94
00:04:49.025 --> 00:04:53.700
The new key word is going to do a bunch
of stuff in here automatically.

95
00:04:53.700 --> 00:04:55.050
What is that stuff?

96
00:04:55.050 --> 00:04:59.510
Well, we'll see in a second, before we
get to that stuff let's just make our

97
00:04:59.510 --> 00:05:02.600
local memory and handle first.

98
00:05:02.600 --> 00:05:07.764
Our arguments Terry, give me
the arguments inside of userCreator.

99
00:05:07.764 --> 00:05:11.070
&gt;&gt; Speaker 7: Phil and 5, name.

100
00:05:11.070 --> 00:05:16.040
&gt;&gt; Will Sentance: Name is said toPhil-
&gt;&gt; Speaker 7: Score is equal to 5.

101
00:05:16.040 --> 00:05:17.790
&gt;&gt; Will Sentance: Right, so
the name parameter, do you see why it's so

102
00:05:17.790 --> 00:05:18.880
important to say parameter here so

103
00:05:18.880 --> 00:05:21.140
we don't think these
are properties on an object?

104
00:05:21.140 --> 00:05:26.360
The name parameter is now locally
available inside a userCreator as

105
00:05:26.360 --> 00:05:29.930
the argument, the value Phil.

106
00:05:29.930 --> 00:05:35.640
The score parameter is now locally
available as the score argument 5.

107
00:05:35.640 --> 00:05:37.080
Beautiful, all right.

108
00:05:37.080 --> 00:05:40.500
Now, the new keyword takes over.

109
00:05:40.500 --> 00:05:43.620
Who feels comfortable now to tell
me all three things a new keyword

110
00:05:43.620 --> 00:05:44.590
automates inside?

111
00:05:46.300 --> 00:05:47.580
Yeah, Chris?
Let's do it, man.

112
00:05:47.580 --> 00:05:49.512
So what's the very first thing it does?

113
00:05:49.512 --> 00:05:51.270
&gt;&gt; Speaker 8: It creates a new object for
this.

114
00:05:55.690 --> 00:05:56.840
&gt;&gt; Will Sentance: This is a new object,
beautiful.

115
00:05:56.840 --> 00:06:00.947
This is a new empty well empty object,
but with what?

116
00:06:00.947 --> 00:06:02.024
&gt;&gt; Speaker 8: It sets the proto?

117
00:06:02.024 --> 00:06:04.670
&gt;&gt; Will Sentance: Uh-huh,
beautiful, that's it.

118
00:06:04.670 --> 00:06:10.980
Proto, everything in blue we are not
doing, it's being done for us.

119
00:06:10.980 --> 00:06:14.760
Sets its proto to userCreator.prototype,

120
00:06:14.760 --> 00:06:19.637
this lovely object,
into which we stored our functions.

121
00:06:19.637 --> 00:06:24.170
That this object, when it gets returned
out, better have access to, it will.

122
00:06:24.170 --> 00:06:25.960
And what's the final thing that it does?

123
00:06:25.960 --> 00:06:29.860
We're not gonna get to that yet,
we'll come to that in a second.

124
00:06:29.860 --> 00:06:31.550
So proto is set, great.

125
00:06:31.550 --> 00:06:35.644
Now,
&gt;&gt; Will Sentance: Elliot,

126
00:06:35.644 --> 00:06:39.790
take over with the code we wrote.

127
00:06:39.790 --> 00:06:42.090
&gt;&gt; Elliot: Name gets set to Phil.

128
00:06:42.090 --> 00:06:43.760
&gt;&gt; Will Sentance: The name-
&gt;&gt; Elliot: The name property-

129
00:06:43.760 --> 00:06:44.459
&gt;&gt; Will Sentance: Property

130
00:06:44.459 --> 00:06:48.470
on the auto-created,
&gt;&gt; Elliot: Object?

131
00:06:48.470 --> 00:06:50.760
&gt;&gt; Will Sentance: With the label-
&gt;&gt; Elliot: This.

132
00:06:50.760 --> 00:06:51.941
&gt;&gt; Will Sentance: This, excellent, folk.

133
00:06:51.941 --> 00:06:54.624
So try and be as explicit and
complete as you can,

134
00:06:54.624 --> 00:06:58.560
just to keep the mind clear on what
is incredibly kind of finicky stuff.

135
00:06:58.560 --> 00:07:01.450
So try that one again for
the next line, Elliot.

136
00:07:03.670 --> 00:07:09.990
&gt;&gt; Elliot: Score on the, for
the dis property or for the dis object.

137
00:07:09.990 --> 00:07:10.530
&gt;&gt; Will Sentance: Perfect.

138
00:07:10.530 --> 00:07:11.660
&gt;&gt; Elliot: Gets set to 5.

139
00:07:11.660 --> 00:07:13.623
&gt;&gt; Will Sentance: Yeah,
fantastic, thank you, Elliot.

140
00:07:13.623 --> 00:07:18.851
There it is, and now we have our perfect
object here Elliot, but it's stuck

141
00:07:18.851 --> 00:07:24.260
inside of the user created functions
execution context and we want it global.

142
00:07:24.260 --> 00:07:25.610
So do we return it?

143
00:07:25.610 --> 00:07:27.500
I don't see any returning it out.

144
00:07:27.500 --> 00:07:29.650
So what is the final thing
that this keywords, sorry,

145
00:07:29.650 --> 00:07:31.360
the new keyword that automates?

146
00:07:31.360 --> 00:07:32.187
&gt;&gt; Elliot: Returns the object.

147
00:07:32.187 --> 00:07:36.020
&gt;&gt; Will Sentance: Returns the object.

148
00:07:36.020 --> 00:07:39.500
Out it comes into what global constants,
Elliot?

149
00:07:39.500 --> 00:07:40.370
&gt;&gt; Elliot: User 1.

150
00:07:40.370 --> 00:07:42.900
&gt;&gt; Will Sentance: Into user 1,
fantastic, thank you so much, man.

151
00:07:42.900 --> 00:07:48.665
There it is into user
1 where it's got name,

152
00:07:48.665 --> 00:07:55.490
Phil, school, 5, and
a hidden proto bond to,

153
00:07:55.490 --> 00:08:00.952
let's use the purple pen for the bonds to,

154
00:08:00.952 --> 00:08:07.327
[LAUGH] we're doing well,
you're almost there,

155
00:08:07.327 --> 00:08:12.930
to this lovely object full of functions.

156
00:08:12.930 --> 00:08:15.880
That means our user 1
object has got its data.

157
00:08:15.880 --> 00:08:20.550
And without it being copies,
got access to the functionality it needs.

158
00:08:20.550 --> 00:08:25.030
Which remember, is all we ever wanted
bundle our data or functionality together.

159
00:08:25.030 --> 00:08:28.850
Have I used a data name that's called
start looking in the sun outside, and

160
00:08:28.850 --> 00:08:29.965
thinking of what could be.

161
00:08:29.965 --> 00:08:37.439
&gt;&gt; Elliot: [LAUGH]
&gt;&gt; Will Sentance: Think how valuable,

162
00:08:37.439 --> 00:08:43.562
how fascinating it is to have this,
&gt;&gt; Will Sentance: Look at,

163
00:08:43.562 --> 00:08:45.290
I mean, are you excited?

164
00:08:45.290 --> 00:08:46.065
I'm excited.

165
00:08:46.065 --> 00:08:49.240
&gt;&gt; [APPLAUSE]
&gt;&gt; Will Sentance: By the prospect of

166
00:08:49.240 --> 00:08:53.600
having our data in front because it's
gonna make our lives, as engineers.

167
00:08:53.600 --> 00:08:55.900
And we have to do that every day, right?

168
00:08:55.900 --> 00:08:57.400
Well, it makes our lives so easy.

169
00:08:57.400 --> 00:08:58.360
Because look at this user.

170
00:08:58.360 --> 00:08:59.770
All I want is,

171
00:08:59.770 --> 00:09:04.620
is my functionality there available
on the right-hand side of the dot.

172
00:09:04.620 --> 00:09:06.220
Seth, it's your moment, my friend.

173
00:09:06.220 --> 00:09:07.940
Walk me through the lookup process.

174
00:09:07.940 --> 00:09:09.169
User 1 is in?

175
00:09:09.169 --> 00:09:09.752
&gt;&gt; Speaker 10: The global memory.

176
00:09:09.752 --> 00:09:11.080
&gt;&gt; Will Sentance: Global memory,
it's there.

177
00:09:11.080 --> 00:09:12.121
Increment is on it?

178
00:09:12.121 --> 00:09:12.786
No, it's not.

179
00:09:12.786 --> 00:09:14.470
&gt;&gt; Speaker 10: I freak out a little.

180
00:09:14.470 --> 00:09:15.224
&gt;&gt; Will Sentance: Freak out a little.

181
00:09:15.224 --> 00:09:16.415
&gt;&gt; Speaker 10: And then I go to the proto.

182
00:09:16.415 --> 00:09:18.329
&gt;&gt; Will Sentance: And what do I find?
&gt;&gt; Speaker 10: What do I find do they

183
00:09:18.329 --> 00:09:19.190
find it?

184
00:09:19.190 --> 00:09:20.770
&gt;&gt; Will Sentance: No,
cuz I got it wrong, I wrote it wrongly.

185
00:09:20.770 --> 00:09:21.600
&gt;&gt; Speaker 10: They don't find it.

186
00:09:21.600 --> 00:09:22.610
&gt;&gt; Will Sentance: No, no,
it's there, it's there.

187
00:09:22.610 --> 00:09:24.096
&gt;&gt; Speaker 10: Hard error crash.

188
00:09:24.096 --> 00:09:26.415
[LAUGH]
&gt;&gt; Will Sentance: Well, that's my fault,

189
00:09:26.415 --> 00:09:30.550
there it is, we sorted it,
we find it, and we use it.

190
00:09:30.550 --> 00:09:32.390
Beautiful, excellent, thank you, Seth.

191
00:09:33.790 --> 00:09:37.870
We didn't even, why do we use,
whatever, we do say a name here, but

192
00:09:37.870 --> 00:09:39.870
they're both up there, aren't they?

193
00:09:39.870 --> 00:09:41.080
So let's just change that actually,

194
00:09:41.080 --> 00:09:45.790
it should be same name, excellent,
we'll clear all this up later.

195
00:09:45.790 --> 00:09:48.262
There we go, same name.

196
00:09:48.262 --> 00:09:50.706
So we did the same as
the previous version, but

197
00:09:50.706 --> 00:09:54.720
now we got our store of functions are
automatically linked to with the help of

198
00:09:54.720 --> 00:09:59.620
the new keyword that automatically created
the object that came out of user creator.

199
00:09:59.620 --> 00:10:02.892
By this point you should start being
a little bit familiar with this approach.

