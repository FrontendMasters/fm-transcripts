WEBVTT

1
00:00:00.005 --> 00:00:01.400
&gt;&gt; Will Sentance: And now, folk,

2
00:00:01.400 --> 00:00:06.198
we're gonna start to see
the more standard approaches.

3
00:00:06.198 --> 00:00:10.956
But we're building up to them from
how they're working under the hood so

4
00:00:10.956 --> 00:00:16.230
that we're properly able to debug them,
that they're not mysteries.

5
00:00:16.230 --> 00:00:16.910
And by the way, so

6
00:00:16.910 --> 00:00:22.060
we're probably able to answer questions
in sort of senior dev interviews.

7
00:00:22.060 --> 00:00:29.541
So that those of us who are always
aspiring to senior dev, why wouldn't we?

8
00:00:29.541 --> 00:00:32.340
Have the knowledge under the hood
of how these things work.

9
00:00:32.340 --> 00:00:34.210
All right, line 1.

10
00:00:34.210 --> 00:00:37.430
Terry, my friend,
what are we doing in line 1?

11
00:00:37.430 --> 00:00:40.096
&gt;&gt; Terry: Creating a new
functionary UserCreator.

12
00:00:40.096 --> 00:00:45.243
&gt;&gt; Will Sentance: Exactly, but
do not think that cuz it's got a capital

13
00:00:45.243 --> 00:00:50.010
letter it is anything except for
a regular function.

14
00:00:50.010 --> 00:00:53.040
I actually meant to take
the capital letter off,

15
00:00:53.040 --> 00:00:56.760
it is just a regular function,
no different.

16
00:00:56.760 --> 00:01:00.390
Capital letters don't mean
anything to JavaScript.

17
00:01:00.390 --> 00:01:06.680
Okay, UserCreator is
declared as a function.

18
00:01:06.680 --> 00:01:10.520
But does anyone else want
to give me the full story

19
00:01:10.520 --> 00:01:12.950
of what happens when I
declare UserCreator?

20
00:01:12.950 --> 00:01:14.610
Chris, you're gonna
give me the full story.

21
00:01:14.610 --> 00:01:15.740
&gt;&gt; Chris: It is an object.

22
00:01:15.740 --> 00:01:20.425
&gt;&gt; Will Sentance: Exactly,
it's a function plus object.

23
00:01:22.923 --> 00:01:27.210
&gt;&gt; Will Sentance: And that object has
by default, Terry, what property?

24
00:01:27.210 --> 00:01:27.870
&gt;&gt; Terry: Prototype.

25
00:01:27.870 --> 00:01:33.215
&gt;&gt; Will Sentance: Prototype,
not protopeople, prototype.

26
00:01:33.215 --> 00:01:35.847
Which is what, Seth?

27
00:01:35.847 --> 00:01:36.454
&gt;&gt; Seth: It's an empty object.

28
00:01:36.454 --> 00:01:38.600
&gt;&gt; Will Sentance: A big, old empty object.

29
00:01:38.600 --> 00:01:41.280
Exactly, there it is.

30
00:01:42.600 --> 00:01:46.000
That was all from just declaring
the function UserCreator.

31
00:01:46.000 --> 00:01:50.485
The code of the function, that's stored
here, we access it to run it by using what

32
00:01:50.485 --> 00:01:53.346
notation, to access the function code,
to run it?

33
00:01:53.346 --> 00:01:55.106
&gt;&gt; Michael: Parentheses.
&gt;&gt; Will Sentance: Parentheses, the object,

34
00:01:55.106 --> 00:01:57.394
it was accessed using what notation,
Michael?

35
00:01:57.394 --> 00:02:00.049
&gt;&gt; Michael: [INAUDIBLE]
&gt;&gt; Will Sentance: Dot notations.

36
00:02:00.049 --> 00:02:03.900
All right, there's our object.

37
00:02:03.900 --> 00:02:07.605
This is our replacement for
function store,

38
00:02:07.605 --> 00:02:11.408
that's where we stored our single copies,
or

39
00:02:11.408 --> 00:02:15.710
single versions of each of
the functions we wanted.

40
00:02:15.710 --> 00:02:19.412
Our objects that come out of
UserCreator to have access to.

41
00:02:19.412 --> 00:02:24.033
Remember, we're only running UserCreator
to get out objects that have all

42
00:02:24.033 --> 00:02:28.509
the data of each particular user,
name Will score, name Phil score for,

43
00:02:28.509 --> 00:02:32.427
and access to all the appropriate
functionality for that data.

44
00:02:32.427 --> 00:02:36.898
Ideally so that we can always pretend
that the functions are actually on

45
00:02:36.898 --> 00:02:41.390
the object by going, objectname.function,
and apply to that data.

46
00:02:41.390 --> 00:02:45.260
That's all we're trying to do,
is run UserCreator to return out objects.

47
00:02:45.260 --> 00:02:46.339
That was all we were doing before.

48
00:02:48.989 --> 00:02:49.602
&gt;&gt; Will Sentance: That's
all we were doing.

49
00:02:49.602 --> 00:02:54.337
We're turning out an object into user
1 that had a bond to that store of

50
00:02:54.337 --> 00:02:59.315
functions, but now we're gonna save
ourselves doing a lot of this work,

51
00:02:59.315 --> 00:03:02.465
making the object by hand,
making the bond.

52
00:03:02.465 --> 00:03:07.650
Well, making a store of functions by hand
with a label, making a bond of that store.

53
00:03:07.650 --> 00:03:10.190
Returning out the object into user 1.

54
00:03:10.190 --> 00:03:11.860
Doing it again,
returning the object into user 2.

55
00:03:11.860 --> 00:03:15.390
We're gonna save ourselves so
much of that work by using what keyword,

56
00:03:15.390 --> 00:03:17.090
that's gonna automate a ton of that work?

57
00:03:17.090 --> 00:03:17.960
Seth, what keyword?

58
00:03:17.960 --> 00:03:18.490
&gt;&gt; Seth: New.

59
00:03:18.490 --> 00:03:21.900
&gt;&gt; Will Sentance: New, exactly,
is gonna automate a ton of that work.

60
00:03:23.590 --> 00:03:28.770
Let's do it, but before we actually
create our individual object

61
00:03:28.770 --> 00:03:32.140
with the data of user 1,
which is hopefully gonna be either a nine.

62
00:03:32.140 --> 00:03:36.280
We're gonna need to make sure we've
attached, we've stored the functions we

63
00:03:36.280 --> 00:03:41.430
want that user 1 to have access to
in our new auto designated place.

64
00:03:41.430 --> 00:03:42.690
Elliot, remind me,

65
00:03:42.690 --> 00:03:47.310
what is our automatically designated
place to store the functions we want?

66
00:03:47.310 --> 00:03:51.869
Any object that comes out of running
UserCreator to have access to?

67
00:03:51.869 --> 00:03:53.003
&gt;&gt; Elliot: The prototype.

68
00:03:54.820 --> 00:03:56.260
&gt;&gt; Will Sentance: Yeah,
let's be really explicit.

69
00:03:56.260 --> 00:04:00.630
The prototype property, which is an object
of the UserCreator function-object combo.

70
00:04:03.070 --> 00:04:04.540
Good, cuz we've all said,

71
00:04:04.540 --> 00:04:07.840
probably many of us, many times go,
we'll put in the prototype.

72
00:04:07.840 --> 00:04:09.700
But what is this mysterious thing?

73
00:04:09.700 --> 00:04:11.280
It is that.

74
00:04:11.280 --> 00:04:12.120
Okay, Elliot,

75
00:04:12.120 --> 00:04:16.266
talk me through this demanding line
here usercreator.prototype.increment.

76
00:04:16.266 --> 00:04:18.620
Talk me through the sort
of assignment process here.

77
00:04:18.620 --> 00:04:20.916
What does JavaScript look for first?

78
00:04:20.916 --> 00:04:24.287
&gt;&gt; Elliot: It looks for
the UserCreator option.

79
00:04:24.287 --> 00:04:25.364
&gt;&gt; Will Sentance: Beautiful, yep.

80
00:04:25.364 --> 00:04:29.120
&gt;&gt; Elliot: And then the prototype
property of the UserCreator object?

81
00:04:29.120 --> 00:04:30.590
&gt;&gt; Will Sentance: Yep,
of the function-object combo,

82
00:04:30.590 --> 00:04:31.830
it's its object version.

83
00:04:31.830 --> 00:04:35.711
We find the prototype property,
which is an object.

84
00:04:35.711 --> 00:04:39.202
And, I guess, we assign to that object?

85
00:04:39.202 --> 00:04:40.026
&gt;&gt; Elliot: Increment.

86
00:04:40.026 --> 00:04:42.400
&gt;&gt; Will Sentance: Increment,
fantastic, which is?

87
00:04:42.400 --> 00:04:43.070
&gt;&gt; Elliot: A function?

88
00:04:43.070 --> 00:04:45.770
&gt;&gt; Will Sentance: A method of function,
exactly.

89
00:04:45.770 --> 00:04:48.930
There it is, stored, beautiful.

90
00:04:48.930 --> 00:04:51.539
And the next line, raise your hand
if you want a shot at the next line?

91
00:04:51.539 --> 00:04:53.792
Suzie, you down to the next line?

92
00:04:53.792 --> 00:04:57.920
&gt;&gt; Suzie: Yes, on the UserCreator 1?

93
00:04:57.920 --> 00:05:01.703
&gt;&gt; Will Sentance: Perfect, and
we're looking up UserCreator, in memory.

94
00:05:01.703 --> 00:05:06.680
&gt;&gt; Suzie: And then we're using prototype
to get the function-object combo?

95
00:05:07.790 --> 00:05:08.400
&gt;&gt; Will Sentance: Yeah, so

96
00:05:08.400 --> 00:05:12.370
we're using prototype to get the object
bit of the function-object combo, yep.

97
00:05:12.370 --> 00:05:16.200
And that is itself an object into
which we're storing what function?

98
00:05:16.200 --> 00:05:17.100
&gt;&gt; Suzie: The log in function?

99
00:05:17.100 --> 00:05:19.580
&gt;&gt; Will Sentance: Fantastic,
so in the log in function.

100
00:05:19.580 --> 00:05:25.380
There it is, stored on the object with
a label prototype, which is a sub-object

101
00:05:25.380 --> 00:05:29.015
of the object in the function-object
combo, given the label UserCreator.

102
00:05:30.670 --> 00:05:33.980
Good, that's our setup done.

103
00:05:33.980 --> 00:05:38.982
Now let's go ahead and create our
individual object that's got personal

104
00:05:38.982 --> 00:05:44.483
data of that user, but that object will
still somehow have access to increment.

105
00:05:44.483 --> 00:05:49.930
Cuz I definitely do not see any assignment
in UserCreator of an increment method.

106
00:05:49.930 --> 00:05:51.940
So where is that increment
method coming from?

107
00:05:51.940 --> 00:05:56.450
We do not panic,
we know we're somehow gonna have a bond

108
00:05:56.450 --> 00:06:01.020
up to this object known
as UserCreator.prototype.

109
00:06:01.020 --> 00:06:04.620
Okay, all right, let's go left hand side.

110
00:06:04.620 --> 00:06:06.580
What are we doing, Nick?

111
00:06:08.910 --> 00:06:11.541
&gt;&gt; Nick: We are declaring
the constant user1.

112
00:06:11.541 --> 00:06:13.180
&gt;&gt; Will Sentance: Beautiful, there it is.

113
00:06:13.180 --> 00:06:20.670
&gt;&gt; Nick: And then we are assigning
a new UserCreator function to it.

114
00:06:20.670 --> 00:06:22.758
&gt;&gt; Will Sentance: We never
saw in functions 2 stuff,

115
00:06:22.758 --> 00:06:25.770
that right hand side is
an unevaluated statement.

116
00:06:25.770 --> 00:06:28.434
It's like saying hey, we don't yet
know what to store in user 1.

117
00:06:28.434 --> 00:06:34.510
So user 1 will be uninitialized for
now while we go and do what, Seth?

118
00:06:34.510 --> 00:06:36.970
&gt;&gt; Seth: Creating a new
UserCreator object function.

119
00:06:39.690 --> 00:06:43.220
&gt;&gt; Will Sentance: This is why the new
keyword is such a strange design.

120
00:06:43.220 --> 00:06:46.860
That right hand side is just
calling what function, David?

121
00:06:46.860 --> 00:06:47.850
&gt;&gt; David: UserCreator.
&gt;&gt; Will Sentance: Yeah,

122
00:06:47.850 --> 00:06:50.590
it's just calling a function, UserCreator.

123
00:06:50.590 --> 00:06:56.570
But it's mutating the execution
context of that function.

124
00:06:56.570 --> 00:06:59.410
It's fiddling around with
when we call that function.

125
00:06:59.410 --> 00:07:01.670
Let's call the function, call UserCreator.

126
00:07:03.300 --> 00:07:07.554
Just like any other function,
we call UserCreator and

127
00:07:07.554 --> 00:07:13.114
we assign our arguments to our
parameters in here, and we create what?

128
00:07:13.114 --> 00:07:15.456
We create a new?

129
00:07:15.456 --> 00:07:16.233
&gt;&gt; Audience: Execution context.

130
00:07:16.233 --> 00:07:17.024
&gt;&gt; Will Sentance: Execution content.

131
00:07:17.024 --> 00:07:20.270
There is is, beautiful.

132
00:07:20.270 --> 00:07:26.450
But this execution context
is going to have a ton

133
00:07:26.450 --> 00:07:31.690
of stuff done automatically inside of it,
because

134
00:07:31.690 --> 00:07:37.990
we're kind of manipulating it by inserting
what word before calling it, Seth?

135
00:07:37.990 --> 00:07:44.360
New, the new keyword is going to insert
a bunch of stuff in here for us.

136
00:07:44.360 --> 00:07:46.486
Almost literally, lines of code for us, so

137
00:07:46.486 --> 00:07:49.780
that we don't have to
write them out each time.

138
00:07:49.780 --> 00:07:52.489
What is the first thing that it inserts,
Seth?

139
00:07:52.489 --> 00:07:54.940
Do you remember the first thing that the
new key was gonna automate inside of here?

140
00:07:54.940 --> 00:07:55.660
&gt;&gt; Seth: This?

141
00:07:55.660 --> 00:07:57.420
&gt;&gt; Will Sentance: The this assignment to?

142
00:07:57.420 --> 00:07:58.462
&gt;&gt; Seth: To an empty object.

143
00:07:58.462 --> 00:07:59.480
&gt;&gt; Will Sentance: To empty object,
spot on.

144
00:07:59.480 --> 00:08:00.350
Well done, Seth.

145
00:08:00.350 --> 00:08:04.970
Exactly, before we do that bit though,
before we do that bit,

146
00:08:04.970 --> 00:08:07.500
there is one other thing
we've got to handle first.

147
00:08:07.500 --> 00:08:11.300
Nick, what do we always handle
first when we call our functions,

148
00:08:11.300 --> 00:08:12.730
when we enter the execution context?

149
00:08:14.730 --> 00:08:17.622
&gt;&gt; Nick: We assign the arguments
to the parameters.

150
00:08:17.622 --> 00:08:20.140
&gt;&gt; Will Sentance: Fantastic,
the arguments to the parameters.

151
00:08:20.140 --> 00:08:23.164
The argument,
either is assigned parameter name,

152
00:08:23.164 --> 00:08:26.430
the argument 9 is assigned
the parameter score.

153
00:08:26.430 --> 00:08:30.500
And then the this keyword
starts to take over.

154
00:08:30.500 --> 00:08:34.230
Everything in blue,
people, is not done by us.

155
00:08:34.230 --> 00:08:39.670
It is done by us, only indirectly by us,
using the new keyword.

156
00:08:39.670 --> 00:08:47.590
So thing number one it does,
create an empty object and assign to this.

157
00:08:47.590 --> 00:08:50.590
We want to save ourselves
having to make the object.

158
00:08:50.590 --> 00:08:53.884
We are only running UserCreator to create
an object and stick some properties in it.

159
00:08:53.884 --> 00:08:56.570
So if we're always running
it to create an object,

160
00:08:56.570 --> 00:08:59.570
why not save ourselves work
of declaring the object?

161
00:08:59.570 --> 00:09:02.510
Why not have a function that does it for
us?

162
00:09:02.510 --> 00:09:04.470
Well, JavaScript didn't do that.

163
00:09:04.470 --> 00:09:07.520
Instead it gave us a key
word that does it for us.

164
00:09:07.520 --> 00:09:11.660
The new key word that mutates
the execution context of UserCreator,

165
00:09:11.660 --> 00:09:12.370
it changes it.

166
00:09:13.840 --> 00:09:20.190
And automatically in the local memory,
creates a big, old empty object.

167
00:09:20.190 --> 00:09:22.072
But we've got to stick stuff in it.

168
00:09:22.072 --> 00:09:24.140
We've got to write codes
to stick stuff in there.

169
00:09:24.140 --> 00:09:25.830
How do we refer to that object, Nick?

170
00:09:27.070 --> 00:09:28.570
With the keyword, this.

171
00:09:28.570 --> 00:09:33.210
That object is given and assigned in
the local memory, the label this.

172
00:09:33.210 --> 00:09:35.696
Fantastic, okay?

173
00:09:35.696 --> 00:09:38.060
And there's object.

174
00:09:38.060 --> 00:09:40.980
We're not going to attach
an increment property directly, so

175
00:09:40.980 --> 00:09:44.350
we need it to have access
to this object over here.

176
00:09:44.350 --> 00:09:47.290
What's the next thing the new
keyword automates for us?

177
00:09:47.290 --> 00:09:48.520
Terry, you got an idea?

178
00:09:48.520 --> 00:09:54.118
&gt;&gt; Terry: Prototype,
puts in a method prototype?

179
00:09:54.118 --> 00:09:56.940
&gt;&gt; Will Sentance: Not prototype, do you
see why it's such a confusing- Proto.

180
00:09:56.940 --> 00:10:04.960
Proto, a hidden property, __proto__,

181
00:10:04.960 --> 00:10:08.850
which is a reference,

182
00:10:08.850 --> 00:10:13.560
a link to this object.

183
00:10:13.560 --> 00:10:19.330
So what if we were to console log this,

184
00:10:19.330 --> 00:10:22.600
press a little down arrow to see
the hidden properties on this object?

185
00:10:22.600 --> 00:10:26.810
We would see __proto__, and
then we would see the words.

186
00:10:26.810 --> 00:10:28.370
Well, what words would we see,
Seth, exactly?

187
00:10:28.370 --> 00:10:29.760
&gt;&gt; Seth: Increment and log in?

188
00:10:29.760 --> 00:10:32.170
&gt;&gt; Will Sentance: Yeah, but
they're not directly saved here.

189
00:10:32.170 --> 00:10:33.430
What would we see?

190
00:10:33.430 --> 00:10:36.790
What object would we see labeled here to
say to JavaScript, go look over there?

191
00:10:36.790 --> 00:10:38.260
&gt;&gt; Seth: UserCreator?

192
00:10:38.260 --> 00:10:43.205
&gt;&gt; Will Sentance: UserCreator,
well, that object is this one here.

193
00:10:43.205 --> 00:10:45.200
That doesn't have any
increment login property.

194
00:10:45.200 --> 00:10:47.710
So exactly what object is it, David?

195
00:10:47.710 --> 00:10:48.396
&gt;&gt; David: .property.

196
00:10:48.396 --> 00:10:50.296
&gt;&gt; Will Sentance: .prototype.

197
00:10:50.296 --> 00:10:56.166
[CROSSTALK] userCreator.prototype.

198
00:10:56.166 --> 00:11:00.506
So why we can't put the functions directly
in the function's object version?

199
00:11:03.159 --> 00:11:04.312
&gt;&gt; Will Sentance: Nobody knows,
not so true.

200
00:11:04.312 --> 00:11:06.870
[LAUGH] We'll see later on why,
there's a good reason.

201
00:11:06.870 --> 00:11:11.675
But we have it as a sub-object
of the function-object combo,

202
00:11:11.675 --> 00:11:14.040
not the actual object itself.

203
00:11:14.040 --> 00:11:19.490
It was not UserCreator, it's
the UserCreator object prototype property,

204
00:11:19.490 --> 00:11:22.200
which is itself an object,
that's where we're putting our functions.

205
00:11:22.200 --> 00:11:23.700
Does that make sense, Seth?

206
00:11:23.700 --> 00:11:26.740
So that's where we have our proto link to.

207
00:11:26.740 --> 00:11:29.676
And that means this object,
when it gets returned out into user 1,

208
00:11:29.676 --> 00:11:33.120
its little reference,
its little proto thing,

209
00:11:33.120 --> 00:11:36.880
is gonna link up to a whole bunch
of functions stored in that object.

210
00:11:36.880 --> 00:11:38.236
How perfect?

211
00:11:38.236 --> 00:11:42.693
All right,
now finally we finish with our blue pen,

212
00:11:42.693 --> 00:11:47.020
our new keyword stuff,
and we hit our work again.

213
00:11:47.020 --> 00:11:48.430
What does our work say to do, Elliott?

214
00:11:48.430 --> 00:11:52.390
What do we write to do inside of
the UserCreator function, Cole?

215
00:11:52.390 --> 00:11:54.250
&gt;&gt; Elliot: Sign of property name.

216
00:11:54.250 --> 00:11:55.210
&gt;&gt; Will Sentance: Beautiful, to the?

217
00:11:56.430 --> 00:11:57.476
&gt;&gt; Elliot: To the this [CROSSTALK]
&gt;&gt; Will Sentance: To

218
00:11:57.476 --> 00:12:02.250
the auto created this object, and
we're assigning to that name property?

219
00:12:02.250 --> 00:12:02.790
&gt;&gt; Elliot: Eva.

220
00:12:02.790 --> 00:12:05.420
&gt;&gt; Will Sentance: Which is our
argument under the parameter name.

221
00:12:05.420 --> 00:12:08.630
Who wants to give a really complete
description along the lines I was doing

222
00:12:08.630 --> 00:12:10.800
there of the score assignment?

223
00:12:12.710 --> 00:12:14.600
Nick, go ahead, my friend.

224
00:12:14.600 --> 00:12:22.800
&gt;&gt; Nick: So the property name of score
will get assigned the argument of 9.

225
00:12:22.800 --> 00:12:27.480
&gt;&gt; Will Sentance: Fantastic, but
where is that property score stored?

226
00:12:27.480 --> 00:12:28.540
&gt;&gt; Nick: In the this object?

227
00:12:28.540 --> 00:12:31.600
&gt;&gt; Will Sentance: In the auto
created this object, exactly.

228
00:12:31.600 --> 00:12:35.340
Perfect, good, we have our full object.

229
00:12:35.340 --> 00:12:39.680
Name, Eva, score, 9, and it's got
a link to its set of shared functions.

230
00:12:39.680 --> 00:12:43.280
But it's stuck inside of our
UserCreator execution context.

231
00:12:43.280 --> 00:12:45.650
I don't want it in there.

232
00:12:45.650 --> 00:12:47.970
Where do I want it, Michael?

233
00:12:47.970 --> 00:12:49.051
&gt;&gt; Michael: On user 1.

234
00:12:49.051 --> 00:12:51.490
&gt;&gt; Will Sentance: But
I don't see any return.

235
00:12:51.490 --> 00:12:55.840
What do you thing the final thing that
the new keyword saves us doing, Michael?

236
00:12:55.840 --> 00:12:56.788
&gt;&gt; Michael: Return.
&gt;&gt; Will Sentance: Exactly,

237
00:12:56.788 --> 00:12:58.552
it's gonna auto-insert.

238
00:12:58.552 --> 00:13:04.970
2, will set the __proto__ bond, and
3, is to auto-return the object.

239
00:13:04.970 --> 00:13:08.340
So the final thing it does
is to take that object and

240
00:13:08.340 --> 00:13:14.980
automatically return it at the end of
the function, into user1, there it is.

241
00:13:14.980 --> 00:13:20.246
And there, folk, is our object,

242
00:13:20.246 --> 00:13:24.966
with name, Eva, score, 9,

243
00:13:24.966 --> 00:13:29.870
and a hidden __proto__ bond

244
00:13:29.870 --> 00:13:34.970
to this set of shared functions.

245
00:13:35.990 --> 00:13:38.110
And all of that stuff in blue,

246
00:13:38.110 --> 00:13:42.460
including the hidden bond,
was automated for us by the new keyword.

247
00:13:43.990 --> 00:13:47.570
Before, we created an object with
functions that we made a bond to direct.

248
00:13:47.570 --> 00:13:48.430
We could've called it anything.

249
00:13:48.430 --> 00:13:50.950
We called it user function store,
we could've called it Terry's functions.

250
00:13:53.450 --> 00:13:57.370
Good name, Terry's functions,
whatever we wanna call it.

251
00:13:57.370 --> 00:14:01.377
As long as we made the link
manually object.create and

252
00:14:01.377 --> 00:14:04.320
pass in Terry's functions,
then the link will be off.

253
00:14:04.320 --> 00:14:06.710
But now we're not gonna do that ourselves.

254
00:14:06.710 --> 00:14:08.585
So now we need a go-to place,

255
00:14:08.585 --> 00:14:12.787
a place that JavaScript will
automatically set the proto link to,

256
00:14:12.787 --> 00:14:17.001
make our object have the link to,
with the help of the new keyword.

257
00:14:17.001 --> 00:14:21.747
And it always makes the link to
the name of the function that's

258
00:14:21.747 --> 00:14:25.134
being called with the new
keyword in front.

259
00:14:25.134 --> 00:14:28.265
The name of the function
in its object format,

260
00:14:28.265 --> 00:14:33.210
the prototype property of that
object format, which is an object.

261
00:14:33.210 --> 00:14:36.690
And we'd better put our functions there,
which is what we did.

262
00:14:36.690 --> 00:14:39.610
Cuz now we know that
that returned out object

263
00:14:39.610 --> 00:14:41.698
will automatically have
made a bond up to there.

264
00:14:41.698 --> 00:14:45.113
Okay, folks, so

265
00:14:45.113 --> 00:14:49.650
user 1 is now our object,
no increment method on it, but

266
00:14:49.650 --> 00:14:53.650
it has our data and it has a bond
to a shared set of functions.

267
00:14:53.650 --> 00:14:56.660
Can we do our all important check?

268
00:14:57.880 --> 00:14:58.870
Let's see.

269
00:14:58.870 --> 00:15:00.650
Chris, what is our all important check?

270
00:15:00.650 --> 00:15:02.410
Why am I even doing all of this?

271
00:15:02.410 --> 00:15:05.240
I want my data and my?

272
00:15:05.240 --> 00:15:06.498
&gt;&gt; Chris: And
your functionality bundled together.

273
00:15:06.498 --> 00:15:08.350
&gt;&gt; Will Sentance: Bundled together,
exactly.

274
00:15:08.350 --> 00:15:10.810
Notice encapsulation, so I'm not puzzled.

275
00:15:10.810 --> 00:15:14.731
Now, JavaScript, by the way,
does not implement strict encapsulation,

276
00:15:14.731 --> 00:15:18.908
that means I can still access data, and
functionality, and objects flexibly.

277
00:15:18.908 --> 00:15:22.868
But I want to be able to know
that my increment function

278
00:15:22.868 --> 00:15:26.490
is right there available
to me on my user 1 data.

279
00:15:26.490 --> 00:15:32.220
Well, let's see if it is, because I'm
pretty sure it's not on the object itself.

280
00:15:32.220 --> 00:15:35.470
So let's walk through the look-up process,
Chris.

281
00:15:35.470 --> 00:15:36.610
User 1, where do we look for it?

282
00:15:36.610 --> 00:15:38.166
&gt;&gt; Chris: In the global domain.

283
00:15:38.166 --> 00:15:39.976
&gt;&gt; Will Sentance: We find it,
we look for the?

284
00:15:39.976 --> 00:15:40.752
&gt;&gt; Chris: Increment method.

285
00:15:40.752 --> 00:15:41.754
&gt;&gt; Will Sentance: Do we find it?

286
00:15:41.754 --> 00:15:42.672
&gt;&gt; Chris: Not on the object.

287
00:15:42.672 --> 00:15:45.248
&gt;&gt; Will Sentance: We do not,
do we give up?

288
00:15:45.248 --> 00:15:46.616
What do we do?

289
00:15:46.616 --> 00:15:51.498
[LAUGH]
&gt;&gt; [INAUDIBLE]

290
00:15:51.498 --> 00:15:52.679
&gt;&gt; Will Sentance: Yeah, we look at in the

291
00:15:52.679 --> 00:15:56.996
proto, which is a link to the prototype
object on the UserCreator object, yeah.

292
00:15:56.996 --> 00:15:59.534
Yeah, well, we'd use the function-object
combo, where we find?

293
00:15:59.534 --> 00:16:01.791
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: Beautiful, fantastic,

294
00:16:01.791 --> 00:16:02.910
Chris, excellent.

295
00:16:03.970 --> 00:16:05.440
Folks, we are happy.

296
00:16:06.930 --> 00:16:11.430
And this, in the end, we're gonna
discover Solution 4, which is our

297
00:16:13.060 --> 00:16:18.520
ES 2015 approach,
doesn't really do much more than this.

298
00:16:18.520 --> 00:16:22.466
It just gives this function-object
combo a fancy new name.

299
00:16:22.466 --> 00:16:24.066
Anyone know that fancy new name is?

300
00:16:24.066 --> 00:16:24.934
&gt;&gt; Audience: Class.

301
00:16:24.934 --> 00:16:25.666
&gt;&gt; Will Sentance: Class.

302
00:16:25.666 --> 00:16:29.520
Uh-huh, that's all it's gonna be under
the hood, is a functional-object combo.

303
00:16:29.520 --> 00:16:30.283
Nothing is gonna change.

