WEBVTT

1
00:00:00.140 --> 00:00:02.690
&gt;&gt; Will Sentance: The problem with
this approach is, fundamentally,

2
00:00:02.690 --> 00:00:06.220
each time you create a new user,
we make space in our computer's memory for

3
00:00:06.220 --> 00:00:09.150
all of our data and functions but
our functions are just copies.

4
00:00:09.150 --> 00:00:13.270
Our data's unique, the data's unique,
but our functions are just copies.

5
00:00:13.270 --> 00:00:14.840
Is there a better way?

6
00:00:14.840 --> 00:00:16.334
Yes, there is.

7
00:00:16.334 --> 00:00:20.450
Benefits, it's fundamentally at
least simple to reason about.

8
00:00:20.450 --> 00:00:23.999
At no point is it mysterious
where my increment function was.

9
00:00:23.999 --> 00:00:26.081
It was right there on the object.

10
00:00:26.081 --> 00:00:29.550
So it was easy to reason about,
but it is untenable.

11
00:00:29.550 --> 00:00:34.280
So instead store the functions
we want our user 1, user 2,

12
00:00:34.280 --> 00:00:37.120
user 3, user 500 to have access to.

13
00:00:37.120 --> 00:00:42.090
Store them on a single object, and
have JavaScript go look up there.

14
00:00:42.090 --> 00:00:42.900
How do we do this?

15
00:00:42.900 --> 00:00:44.330
How do we make that link?

16
00:00:46.450 --> 00:00:47.220
Yeah, prototype.

17
00:00:47.220 --> 00:00:49.550
Prototype chain, exactly.

18
00:00:49.550 --> 00:00:52.650
Using the prototype chain have a separate,
I don't know,

19
00:00:52.650 --> 00:00:56.120
object in which we have
a function like increment stored.

20
00:00:56.120 --> 00:01:00.780
And when we call user1.name on the user
one object, yeah, no problem, it's there.

21
00:01:00.780 --> 00:01:04.630
But when we call user1.increment rather
than go, error increment is not there,

22
00:01:04.630 --> 00:01:09.320
somehow link user1 up to
the function store object.

23
00:01:09.320 --> 00:01:10.860
That's our goal.

24
00:01:10.860 --> 00:01:12.820
Make this link, well, there's
a number of ways we can make it, but

25
00:01:12.820 --> 00:01:16.000
the way we're gonna make
it is using object.create.

26
00:01:16.000 --> 00:01:21.750
So we're gonna rebuilt our solution one
into solution two to generate objects,

27
00:01:21.750 --> 00:01:25.920
user 1, user 2, that still somehow
have access to this function.

28
00:01:25.920 --> 00:01:31.210
And remember, I'm gonna say it again and
again and again, the only goal we have

29
00:01:31.210 --> 00:01:36.735
in object oriented programming is,
can we bundle up the appropriate and

30
00:01:36.735 --> 00:01:40.590
relevant functionality with
the relevant data that it applies to?

31
00:01:40.590 --> 00:01:45.130
Not have to go hunt off on another part of
our file for a particular function, but

32
00:01:45.130 --> 00:01:47.520
just bundle them up together.

33
00:01:47.520 --> 00:01:48.870
Can we do that?

34
00:01:48.870 --> 00:01:50.780
That is our fundamental goal.

35
00:01:50.780 --> 00:01:54.250
All right, so we're gonna walk through
this code and actually, I'm just gonna

36
00:01:54.250 --> 00:02:00.360
tell you right now, folks, this code here
is gonna turn out to be highly effective.

37
00:02:00.360 --> 00:02:04.010
And actually gonna be the approach
that answers the question,

38
00:02:04.010 --> 00:02:09.190
one of the most popular senior
dev questions in JavaScript.

39
00:02:09.190 --> 00:02:10.310
This approach, people,

40
00:02:10.310 --> 00:02:15.370
is gonna turn out to be answer to, how
does the new keyword work under the hood?

41
00:02:15.370 --> 00:02:19.520
One of the most popular senior JavaScript
developer questions out there.

42
00:02:19.520 --> 00:02:22.210
And we are going to answer
that question right now.

