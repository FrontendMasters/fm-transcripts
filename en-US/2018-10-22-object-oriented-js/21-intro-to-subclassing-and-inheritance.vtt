WEBVTT

1
00:00:00.070 --> 00:00:05.940
&gt;&gt; Will Sentance: We saw that they
get bonus stuff, bonus functionality

2
00:00:05.940 --> 00:00:11.700
available to them,
that are not properties directly on them.

3
00:00:11.700 --> 00:00:14.825
But instead, we have the ability to go and

4
00:00:14.825 --> 00:00:19.558
look up when we refer to something
like hasOwnProperty on obj,

5
00:00:19.558 --> 00:00:24.557
to go and look up at this little
collection of functions here in this

6
00:00:24.557 --> 00:00:29.234
built-in function object combo
going by the name of object.

7
00:00:31.522 --> 00:00:35.422
&gt;&gt; Will Sentance: That has a probably
identical prototype in its object version

8
00:00:35.422 --> 00:00:40.603
that is an object full of functions,
that all objects by default link to.

9
00:00:40.603 --> 00:00:41.860
This is nice.

10
00:00:43.360 --> 00:00:48.460
This is JavaScript,
using its own technology, to let itself

11
00:00:48.460 --> 00:00:53.640
give its objects, and then its functions,
also, access to bonus functionality.

12
00:00:53.640 --> 00:00:58.280
What this means is that we
can do the same thing for

13
00:00:58.280 --> 00:01:04.190
our objects that we produce in our kind
of object-oriented application design.

14
00:01:04.190 --> 00:01:07.396
We can say, okay,
this object user one will access to

15
00:01:07.396 --> 00:01:12.390
this collection of functions, but that
collection of functions itself could have

16
00:01:12.390 --> 00:01:17.339
access to another collection of functions
that we can keep going and checking up.

17
00:01:17.339 --> 00:01:21.038
Meaning, we can kind of order the
distribution of our functions among our

18
00:01:21.038 --> 00:01:23.835
objects in a really nicely structured way.

19
00:01:23.835 --> 00:01:25.995
It's known as subclassing.

20
00:01:25.995 --> 00:01:27.013
Hopefully, that's the next slide.

21
00:01:27.013 --> 00:01:29.555
It's not there, there it is, subclassing.

22
00:01:29.555 --> 00:01:31.275
It's known as subclassing.

23
00:01:31.275 --> 00:01:36.529
A core aspect folk of object-oriented
paradigm, is the notion they call

24
00:01:36.529 --> 00:01:43.180
it inheritance, passing knowledge or
work that's been previously written down.

25
00:01:43.180 --> 00:01:48.360
So let's look at these, you've got user,
I meant to user create, well whatever.

26
00:01:48.360 --> 00:01:51.700
User, then it's gonna have a name and
a score, and access,

27
00:01:51.700 --> 00:01:56.620
not directly on the user one object, but
access to increased score functionality.

28
00:01:56.620 --> 00:01:59.880
We saw that,
it's in our kinda bundle of functions.

29
00:01:59.880 --> 00:02:02.070
We have increment and login.

30
00:02:02.070 --> 00:02:06.385
But a lot of time in application design,
we always have users.

31
00:02:06.385 --> 00:02:09.991
User1, user2, user3,
were all identical in what properties and

32
00:02:09.991 --> 00:02:12.090
functionality apply to them.

33
00:02:12.090 --> 00:02:15.290
Typically, we have kind of sub-users.

34
00:02:15.290 --> 00:02:17.870
These sub-users might be
a moderator type of user.

35
00:02:17.870 --> 00:02:21.506
It's very similar to a user,
it has a name, it has a score, but

36
00:02:21.506 --> 00:02:24.127
it has the ability to
share a public message.

37
00:02:24.127 --> 00:02:28.360
This is a moderator in our quiz game,
or a paid user.

38
00:02:29.861 --> 00:02:32.361
Man, there's my first error in the slides.

39
00:02:32.361 --> 00:02:38.506
The paid user has yes name, yes score,
but also has a property on any paid user.

40
00:02:38.506 --> 00:02:42.650
For example paidUser1, they're just
like a user, they have name and score.

41
00:02:42.650 --> 00:02:46.190
But they also have an account balance,
cuz they're a paid user.

42
00:02:46.190 --> 00:02:49.080
So ignore the bonus score thing there,
account balance.

43
00:02:49.080 --> 00:02:52.770
They therefore also have
functionality associated with them,

44
00:02:52.770 --> 00:02:54.490
increase that balance.

45
00:02:54.490 --> 00:02:56.610
But they also still have
a score properties,

46
00:02:56.610 --> 00:02:59.510
they also still wanna have
the increase score functionality.

47
00:02:59.510 --> 00:03:04.841
So how can we create paid
users like paidUser1,

48
00:03:04.841 --> 00:03:10.834
but use the property development
that we did earlier.

49
00:03:10.834 --> 00:03:13.936
The property creation process
that we did earlier, and

50
00:03:13.936 --> 00:03:18.590
the functionality that we created earlier,
not have to redo it all over again.

51
00:03:18.590 --> 00:03:21.850
But use that in creating our paid user.

52
00:03:21.850 --> 00:03:23.780
And then add some bonus stuff.

53
00:03:23.780 --> 00:03:27.970
This is known as inheritance, not redoing
all the work to create a paid user.

54
00:03:27.970 --> 00:03:31.050
But using a lot of the work that was done
to create a regular user to create a paid

55
00:03:31.050 --> 00:03:32.936
user, and then adding bonus stuff.

56
00:03:32.936 --> 00:03:36.645
Okay, let's notice subclassing.

57
00:03:36.645 --> 00:03:42.455
Subclassing is the creating
something which like a subversion,

58
00:03:42.455 --> 00:03:47.007
a kind of slightly more
specific version of a user.

59
00:03:47.007 --> 00:03:50.182
And that notion of grabbing
the previously done work,

60
00:03:50.182 --> 00:03:54.150
to make it available to our paid
user is known as inheritance.

61
00:03:54.150 --> 00:03:58.300
I do not like the term inheritance
used in JavaScript particularly,

62
00:03:58.300 --> 00:04:01.520
cuz it makes you feel you're actually
taking that stuff from up here, and

63
00:04:01.520 --> 00:04:05.200
sort of sticking it on this
object down here, you're not.

64
00:04:05.200 --> 00:04:07.140
It's gonna be just like we did here,

65
00:04:07.140 --> 00:04:11.560
that our function mode probably
too had access to these functions.

66
00:04:11.560 --> 00:04:13.950
Had access to this function one level up.

67
00:04:13.950 --> 00:04:16.290
Did they inherit these functions?

68
00:04:17.320 --> 00:04:22.120
Seems a weird term to describe at run time
the ability of multiply by 2 to go and

69
00:04:22.120 --> 00:04:23.550
look up to find stuff.

70
00:04:23.550 --> 00:04:25.300
Is that really inheriting?

71
00:04:25.300 --> 00:04:27.940
Feels more like you have
the right to go look up.

72
00:04:27.940 --> 00:04:32.530
Find the term inheritance, an odd term, if
folk understand why I'm saying that, but

73
00:04:32.530 --> 00:04:36.260
it is in the sense of the languages
the notion of getting access to stuff.

74
00:04:37.370 --> 00:04:42.220
But when you inherit a property
genetically, you literally get it on you.

75
00:04:42.220 --> 00:04:43.660
Well, that's not what's happening here.

76
00:04:43.660 --> 00:04:47.070
We're just gonna get the right to go and
look up to get stuff.

77
00:04:47.070 --> 00:04:49.270
So I don't like the term inheritance but
it is the standard term.

