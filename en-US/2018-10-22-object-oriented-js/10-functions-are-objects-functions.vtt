WEBVTT

1
00:00:00.006 --> 00:00:03.924
&gt;&gt; Will Sentance: All right, we're
gonna just a brief interlude in this so

2
00:00:03.924 --> 00:00:08.182
that we can discover how
JavaScript thinks about functions.

3
00:00:08.182 --> 00:00:11.163
And whether it thinks about functions,

4
00:00:11.163 --> 00:00:15.984
like user creator, in such a way
that they give us a little place,

5
00:00:15.984 --> 00:00:20.279
a little object,
into which we can store our functions and

6
00:00:20.279 --> 00:00:24.430
know that JavaScript will
make the bond to that object.

7
00:00:24.430 --> 00:00:26.010
To understand that we need to understand

8
00:00:27.120 --> 00:00:30.530
one of the most puzzling
things in JavaScript.

9
00:00:30.530 --> 00:00:32.950
Although I think after
a bit it becomes familiar.

10
00:00:32.950 --> 00:00:35.205
But one of the most puzzling
things in JavaScript,

11
00:00:35.205 --> 00:00:40.390
that functions are both objects and
functions.

12
00:00:40.390 --> 00:00:41.520
Let's see it.

13
00:00:41.520 --> 00:00:45.610
We're gonna map this out over here
in our little bonus bit of board,

14
00:00:45.610 --> 00:00:49.000
with a new memory over here.

15
00:00:49.000 --> 00:00:52.340
I'm gonna try and write this way.

16
00:00:52.340 --> 00:00:55.620
What here are we doing,
Elliot, in line one?

17
00:00:55.620 --> 00:00:58.170
&gt;&gt; Elliot: Declaring a new function,
multiplyBy2.

18
00:00:58.170 --> 00:01:00.500
&gt;&gt; Will Sentance: Declaring a function,
multiplyBy2.

19
00:01:01.780 --> 00:01:05.640
There it is, saved as a function.

20
00:01:05.640 --> 00:01:06.748
Perfect.

21
00:01:06.748 --> 00:01:09.571
Next line?

22
00:01:10.640 --> 00:01:11.490
What's there to do, Elliott?

23
00:01:12.540 --> 00:01:14.380
&gt;&gt; Elliot: Add a new property, store it.

24
00:01:14.380 --> 00:01:14.960
&gt;&gt; Will Sentance: But it's a function.

25
00:01:16.570 --> 00:01:17.100
&gt;&gt; Elliot: Also an object.

26
00:01:18.878 --> 00:01:19.959
&gt;&gt; Will Sentance: Okay.

27
00:01:28.996 --> 00:01:29.810
&gt;&gt; Will Sentance: That is right.

28
00:01:29.810 --> 00:01:35.360
It turns out that as soon as we saved
with the keyword function multiplyBy2

29
00:01:35.360 --> 00:01:41.640
as a function, it instantly got
attached to it a whole object.

30
00:01:41.640 --> 00:01:43.390
As soon as you declare
a function in JavaScript,

31
00:01:43.390 --> 00:01:47.410
it is a function,
what I call function-object combo.

32
00:01:47.410 --> 00:01:52.060
They are never functions alone,
they are function-object combos.

33
00:01:52.060 --> 00:01:55.820
Now most of the time we don't really care
because we don't really use the function's

34
00:01:55.820 --> 00:01:57.130
object bits.

35
00:01:57.130 --> 00:02:01.330
But we absolutely are in
object-oriented programming.

36
00:02:01.330 --> 00:02:06.480
So as soon as you declare multiplyBy2
it is, yes, a function, okay.

37
00:02:06.480 --> 00:02:11.860
But immediately it also is an object.

38
00:02:13.750 --> 00:02:17.350
And if you use what type of notation,
Elliot, to get the object bit?

39
00:02:17.350 --> 00:02:19.980
&gt;&gt; Elliot: Dot.
&gt;&gt; Will Sentance: If you use dot notation

40
00:02:19.980 --> 00:02:24.890
you're going to access its object form,
and

41
00:02:24.890 --> 00:02:27.970
we're gonna assign the property five.

42
00:02:27.970 --> 00:02:32.210
But maybe, Elliot,
that having this object and

43
00:02:32.210 --> 00:02:36.140
assigning stored to it,
maybe that overwrote the function part.

44
00:02:36.140 --> 00:02:41.092
Maybe now if we try and
call multiplyBy2 with the input of three,

45
00:02:41.092 --> 00:02:46.420
we gonna find multiplyBy2,
it's an object, it's not a function.

46
00:02:46.420 --> 00:02:49.050
Or what, what do you think, Elliot?

47
00:02:49.050 --> 00:02:49.960
Can we still do this?

48
00:02:51.340 --> 00:02:53.010
We absolutely still can.

49
00:02:53.010 --> 00:02:56.000
We access the function piece
with our what symbols?

50
00:02:57.690 --> 00:02:59.711
How do we access the function piece, Nick?

51
00:02:59.711 --> 00:03:02.604
&gt;&gt; Elliot: With the-
&gt;&gt; Will Sentance: With the parenthesis,

52
00:03:02.604 --> 00:03:03.152
exactly.

53
00:03:04.280 --> 00:03:07.830
That does not lose its
access to the object piece.

54
00:03:07.830 --> 00:03:09.050
Let's see in the next line.

55
00:03:10.360 --> 00:03:17.090
Elliott, talk me through JavaScript's
journey here in this next line.

56
00:03:17.090 --> 00:03:20.364
We look up multipleBy2 in?

57
00:03:20.364 --> 00:03:22.450
&gt;&gt; Elliot: Global memory.
&gt;&gt; Will Sentance: In global memory.

58
00:03:22.450 --> 00:03:25.966
And then we use dot notation to
access multiplied by, we find it,

59
00:03:25.966 --> 00:03:29.248
it's a function-object combo.

60
00:03:29.248 --> 00:03:33.660
And what, Elliot, which bit of it do
we look for when we use a dot notation?

61
00:03:35.390 --> 00:03:36.910
&gt;&gt; Elliot: The property?

62
00:03:36.910 --> 00:03:38.610
&gt;&gt; Will Sentance: We
look on its object bit-

63
00:03:38.610 --> 00:03:39.546
&gt;&gt; Will Sentance: In its function-object

64
00:03:39.546 --> 00:03:41.530
combo, where we find the property what?

65
00:03:41.530 --> 00:03:43.240
&gt;&gt; Elliot: Stored.
&gt;&gt; Will Sentance: Stored, beautiful,

66
00:03:43.240 --> 00:03:44.490
and we assign to it?

67
00:03:45.500 --> 00:03:47.390
&gt;&gt; Elliot: Five.
&gt;&gt; Will Sentance: Here is where we access

68
00:03:47.390 --> 00:03:48.050
the number five.

69
00:03:49.970 --> 00:03:52.760
So this is what actually happens
when we defined a function.

70
00:03:52.760 --> 00:03:57.741
In fact over here when we
declared user creator earlier,

71
00:03:57.741 --> 00:04:03.460
here's what we actually declared,
a function-object combo.

72
00:04:05.200 --> 00:04:06.646
A function object combo.

73
00:04:10.951 --> 00:04:16.420
&gt;&gt; Will Sentance: An object,
a function, an object.

74
00:04:16.420 --> 00:04:20.315
This reminds me of that bit when
Steve Jobs launches the iPhone.

75
00:04:20.315 --> 00:04:22.530
I don't know if you've
watched that many many times.

76
00:04:23.970 --> 00:04:30.010
An object is slightly more underwhelming
than the launch of the iPhone,

77
00:04:30.010 --> 00:04:32.414
I think I got some slight
delusions of grandeur there.

78
00:04:32.414 --> 00:04:38.525
An object, well what do we
need to store our functions?

79
00:04:38.525 --> 00:04:43.245
That we want this function when called
with a new key word to return our objects

80
00:04:43.245 --> 00:04:46.855
for those objects to have a bond to
some object full of functions, and

81
00:04:46.855 --> 00:04:48.995
we don't know where to
put those functions.

82
00:04:48.995 --> 00:04:51.515
Because we can't put them in an object and
give them a name like we used to.

83
00:04:52.665 --> 00:04:57.370
What if we, if we've got a function
object combo, what if they were.

84
00:04:58.440 --> 00:05:03.460
Now actually what it turns out is when
you declare a function, in other words

85
00:05:03.460 --> 00:05:09.280
a function-object combo, you actually get
in that object automatically a property.

86
00:05:09.280 --> 00:05:10.710
Can anyone figure out
what that property is?

87
00:05:10.710 --> 00:05:11.827
Seth, can you figure out
what the property is?

88
00:05:11.827 --> 00:05:12.540
&gt;&gt; Seth: Prototype?

89
00:05:12.540 --> 00:05:16.970
&gt;&gt; Will Sentance: Prototype, it is just
a regular property, people, it is not.

90
00:05:16.970 --> 00:05:20.362
You've heard the phrasing
a thousand times from developers,

91
00:05:20.362 --> 00:05:23.950
the function's prototype,
as though it's some special thing.

92
00:05:23.950 --> 00:05:27.658
No, it is the function in its object form

93
00:05:27.658 --> 00:05:32.580
of its function-object
combo property prototype.

94
00:05:32.580 --> 00:05:37.544
It is nothing more magic than that, it is
a regular property on the function in its

95
00:05:37.544 --> 00:05:40.472
object format, the function-object combo.

96
00:05:40.472 --> 00:05:42.104
One second, Neil, I promise.

97
00:05:42.104 --> 00:05:47.308
And that is automatically an object, and

98
00:05:47.308 --> 00:05:52.365
it's actually this big old empty object

99
00:05:52.365 --> 00:05:59.517
here that we might want to use
to put all our functions in.

100
00:05:59.517 --> 00:06:06.585
Such that when I call user creator,
&gt;&gt; Will Sentance: When I call

101
00:06:06.585 --> 00:06:10.777
user creator with the new key word and it
makes me my object inside automatically,

102
00:06:10.777 --> 00:06:13.525
we're gonna walk through all of this,
so not fear.

103
00:06:13.525 --> 00:06:15.970
Makes me my object automatically inside.

104
00:06:15.970 --> 00:06:17.833
It's automatically gonna make its bond or

105
00:06:17.833 --> 00:06:21.102
we can't manually make its bond to
something called user functionStore.

106
00:06:21.102 --> 00:06:25.439
Instead it's automatically,
by the very nature the new key word,

107
00:06:25.439 --> 00:06:29.775
gonna make its bond to the name of
the function in its object format on

108
00:06:29.775 --> 00:06:33.222
the prototype property,
that big old empty object.

109
00:06:33.222 --> 00:06:37.879
Meaning we better put our functions in
there that we want the object that gets

110
00:06:37.879 --> 00:06:39.858
returned out to have access to.

111
00:06:39.858 --> 00:06:43.240
So we're gonna walk through this line by
line to make it really, really clear.

112
00:06:43.240 --> 00:06:46.980
All right, so we could use a father
all functions have by default

113
00:06:48.100 --> 00:06:51.710
a property on their object
version known as prototype,

114
00:06:51.710 --> 00:06:57.410
which is itself an object to replace
our user function store object.

