WEBVTT

1
00:00:00.060 --> 00:00:03.570
&gt;&gt; Will Sentance: So here we go.
We can do it in all of our solutions to

2
00:00:03.570 --> 00:00:10.850
our really manual find green sophisticated
solution 3, and new keyword tidying up,

3
00:00:10.850 --> 00:00:16.360
and for a class implementation
that looks very, very clean.

4
00:00:16.360 --> 00:00:19.016
But under the hood is
just gonna be solution 2,

5
00:00:21.023 --> 00:00:22.280
&gt;&gt; Will Sentance: And solution three.

6
00:00:22.280 --> 00:00:23.330
All right, let's see it.

7
00:00:24.550 --> 00:00:28.703
The most code I ever
have on one slide ever.

8
00:00:28.703 --> 00:00:32.943
Subclass [INAUDIBLE], by the way the name
of that solution two we saw where we

9
00:00:32.943 --> 00:00:37.184
manually create the object and return it
out and make it born to some functions,

10
00:00:37.184 --> 00:00:40.430
that function type is known
as the factory function.

11
00:00:40.430 --> 00:00:42.640
Who knows why, nobody knows.

12
00:00:42.640 --> 00:00:44.952
But I've gotta stop saying that,
probably somebody knows, and

13
00:00:44.952 --> 00:00:46.097
I shouldn't say nobody knows.

14
00:00:46.097 --> 00:00:48.180
Nobody know, nobody knows it's a mystery.

15
00:00:49.420 --> 00:00:53.440
A long with, what was our other
mystery which direction Saint Paul is.

16
00:00:53.440 --> 00:00:55.470
I actually can see it so it now so
it's no longer a mystery, but it was for

17
00:00:55.470 --> 00:00:56.910
a long time a mystery.

18
00:00:56.910 --> 00:01:03.525
This function here userCreator is known
as a factory function, cuz it produces.

19
00:01:03.525 --> 00:01:06.780
Doesn't really matter, not really,
but it's known as a factory.

20
00:01:06.780 --> 00:01:08.730
We, if you look at this
left hand side here,

21
00:01:08.730 --> 00:01:11.460
it is exactly the same as
the code we saw earlier.

22
00:01:11.460 --> 00:01:13.470
We've got a cool userCreator,
no new key word here,

23
00:01:13.470 --> 00:01:18.480
no automations here, we're doing all the
work ourselves, we're making the object.

24
00:01:18.480 --> 00:01:21.150
We're making it have a bond
to a set of shared functions.

25
00:01:21.150 --> 00:01:24.330
I'm not calling it functions store, I've
called it functions store before, right?

26
00:01:24.330 --> 00:01:25.837
Some call it user functions.

27
00:01:25.837 --> 00:01:28.869
I just change it, it doesn't matter,
that's the point, we can call it

28
00:01:28.869 --> 00:01:32.070
whatever we want as long as we link to
it by name when we create the object.

29
00:01:32.070 --> 00:01:35.250
We're then gonna return that
over to that all by hand.

30
00:01:35.250 --> 00:01:37.570
No new keyword tidying this up for us.

31
00:01:37.570 --> 00:01:39.300
All by hand.

32
00:01:39.300 --> 00:01:40.440
And then look over here.

33
00:01:40.440 --> 00:01:42.000
Hopefully, you can see it.

34
00:01:42.000 --> 00:01:44.270
We have a new function.

35
00:01:44.270 --> 00:01:47.380
It's just gonna continue down,
so continue its way across.

36
00:01:47.380 --> 00:01:48.800
We have a new function.

37
00:01:48.800 --> 00:01:50.220
Paid userCreator.

38
00:01:52.120 --> 00:01:56.630
And a new set of shared functions for
our paid users.

39
00:01:56.630 --> 00:02:00.190
We've got on there increased balance
because paid users get a balance.

40
00:02:00.190 --> 00:02:05.095
And when we call paid
userCreator with Alyssa and

41
00:02:05.095 --> 00:02:09.870
8, that's gonna create our name and
score property on our paid user object.

42
00:02:09.870 --> 00:02:12.573
But do we wanna rewrite the code
to assign those properties,

43
00:02:12.573 --> 00:02:16.690
especially when typically a user's not
gonna have two properties, name and score.

44
00:02:16.690 --> 00:02:17.830
He's gonna have like 50 properties.

45
00:02:17.830 --> 00:02:19.570
Do you wanna rewrite all
that assignment code?

46
00:02:19.570 --> 00:02:23.340
No, so we're gonna save ourselves
by using, look at that.

47
00:02:23.340 --> 00:02:29.043
Do you see our userCreator function's
gonna be used inside of paid userCreator,

48
00:02:29.043 --> 00:02:34.345
we're gonna use our userCreator code
inside of to create our new paid user.

49
00:02:34.345 --> 00:02:36.045
Then we're gonna have to make
a little bit of fiddling,

50
00:02:36.045 --> 00:02:38.290
because it's gonna have
some things that are wrong.

51
00:02:38.290 --> 00:02:42.190
It's gonna have, for example,
it's proto reference is gonna be to

52
00:02:42.190 --> 00:02:46.320
the user functions, where as we want
it's proto reference to be to the paid

53
00:02:46.320 --> 00:02:50.470
user functions knowing that that object
will have a link up to the user functions,

54
00:02:50.470 --> 00:02:53.110
so we'll get all of them for
our paid users.

55
00:02:53.110 --> 00:02:57.670
And we're gonna have to add some little
new bonus properties like account balance.

56
00:02:57.670 --> 00:03:03.890
So this over here is us creating
a more specific type of user.

57
00:03:03.890 --> 00:03:06.550
So this is the other big side of OMP.

58
00:03:06.550 --> 00:03:10.450
Thinking about our application as ever
more specific versions of a kind of master

59
00:03:10.450 --> 00:03:15.030
class, kind of master version of
something, but not having to redo all

60
00:03:15.030 --> 00:03:19.450
the work that we did for the first version
that produced the generic users, but

61
00:03:19.450 --> 00:03:23.590
instead use a bunch of that work ourselves
to produce paid users, produce moderators.

62
00:03:23.590 --> 00:03:25.394
So we're gonna produce a paid user.

63
00:03:25.394 --> 00:03:28.810
There's gonna have access
to all the users stuff, and

64
00:03:28.810 --> 00:03:32.450
I'll talk briefly about how we could
say prevent it from having access

65
00:03:32.450 --> 00:03:36.180
to some of the user stuff,
and also gets bonus stuff.

66
00:03:36.180 --> 00:03:41.155
And folk, this version here is
the fine-grained control version,

67
00:03:41.155 --> 00:03:43.824
we get to do everything by hand here.

68
00:03:43.824 --> 00:03:50.500
Solution 3, using the new keyword,
is going to automate some of it.

69
00:03:50.500 --> 00:03:53.480
But actually, honestly,
create more trouble than it's worth.

70
00:03:53.480 --> 00:03:58.550
Which is why solution 4 came along and
it's a lot less code.

71
00:03:58.550 --> 00:04:02.120
It does clean it up, but
nobody knows how it works under the hood.

72
00:04:03.160 --> 00:04:04.010
We will.

73
00:04:04.010 --> 00:04:05.330
Okay, good, here we go.

74
00:04:05.330 --> 00:04:07.860
Let's walk through this code it's
also going to be a lovely chance for

75
00:04:07.860 --> 00:04:12.970
everybody to re familiarize
themselves with this

76
00:04:12.970 --> 00:04:16.770
factory function approach, and
we'll really have it down by the end.

77
00:04:16.770 --> 00:04:20.150
[LAUGH] So focus folk on your
technical communication.

78
00:04:20.150 --> 00:04:23.180
If any of you are feeling, yeah,
when we do the left-hand side yeah,

79
00:04:23.180 --> 00:04:24.280
we saw this earlier.

80
00:04:24.280 --> 00:04:30.101
Well, use this as a chance to
really exemplify excellent

81
00:04:30.101 --> 00:04:36.544
technical communication, so
that you are rapidly promoted.

82
00:04:36.544 --> 00:04:41.465
You're in demand when that VP of
engineering who's watching today's talk,

83
00:04:41.465 --> 00:04:46.000
shoutout to you, says,
who is this Seth character?

84
00:04:46.000 --> 00:04:48.780
Who is this Susie character?

85
00:04:48.780 --> 00:04:52.370
We need this sort of quality
of technical communication.

86
00:04:52.370 --> 00:04:55.300
Let's have that VP of engineering
when she hears your voice.

87
00:04:57.300 --> 00:04:59.120
Go asking Mark for who you are [LAUGH].

88
00:05:00.260 --> 00:05:01.970
All right, excellent.

89
00:05:01.970 --> 00:05:04.210
Here we go line 1, let's have Susie.

90
00:05:04.210 --> 00:05:08.090
Take it off, Susie, left hand sign talk
left hand, what we are doing there?

91
00:05:08.090 --> 00:05:11.060
&gt;&gt; Susie: We are creating
a function called userCreator.

92
00:05:11.060 --> 00:05:14.440
&gt;&gt; Will Sentance: Excellent,
now occurs a functional object combo but

93
00:05:14.440 --> 00:05:18.880
we not gonna use it's object portion here
because we're not using a new keyword

94
00:05:18.880 --> 00:05:21.880
when we call it which does use
a bunch of the object stuff, so

95
00:05:21.880 --> 00:05:23.160
we just leave it as a function for now.

96
00:05:23.160 --> 00:05:24.956
But it is, of course,
always a function object combo,

97
00:05:24.956 --> 00:05:26.574
we just don't need to worry
about the object bit.

98
00:05:26.574 --> 00:05:33.000
Okay, next line let's have Chris.

99
00:05:34.080 --> 00:05:37.420
&gt;&gt; Chris: Next line,
we're creating an object user functions.

100
00:05:37.420 --> 00:05:40.990
&gt;&gt; Will Sentance: Excellent,
these are where we're gonna store our,

101
00:05:40.990 --> 00:05:42.270
I guess they call them singletons.

102
00:05:42.270 --> 00:05:43.610
That's sort of a crazy name for them.

103
00:05:43.610 --> 00:05:47.750
You've got single copies,
that single versions of the functions and

104
00:05:47.750 --> 00:05:51.432
you want all objects that come out
according to the userCreator, user one,

105
00:05:51.432 --> 00:05:53.470
user two, to have access to.

106
00:05:53.470 --> 00:05:56.150
Okay, so Chris what's on
the user function's object?

107
00:05:56.150 --> 00:05:58.610
&gt;&gt; Chris: Property, same name function.

108
00:05:58.610 --> 00:06:00.055
&gt;&gt; Will Sentance: Okay, same name.

109
00:06:00.055 --> 00:06:03.087
So I've changed these slightly but
that's okay, the same name and

110
00:06:03.087 --> 00:06:04.000
then the other one?

111
00:06:04.000 --> 00:06:05.660
&gt;&gt; Chris: Increment property function.

112
00:06:05.660 --> 00:06:07.500
&gt;&gt; Will Sentance: Increment, excellent.

113
00:06:07.500 --> 00:06:08.320
All right, increment.

114
00:06:09.830 --> 00:06:11.020
There it is, increment.

115
00:06:12.060 --> 00:06:15.100
Beautiful, thank you so much, Chris.

116
00:06:15.100 --> 00:06:19.100
Next line,
let's start building our specific object.

117
00:06:19.100 --> 00:06:21.240
Michael, left hand side?

118
00:06:21.240 --> 00:06:24.070
&gt;&gt; Michael: Creating
a variable called user one.

119
00:06:24.070 --> 00:06:25.510
&gt;&gt; Will Sentance: Little fix there,
Michael.

120
00:06:25.510 --> 00:06:28.720
Even though people do use the term
variable somewhat generically to mean

121
00:06:28.720 --> 00:06:33.150
label for data,
it really can't vary per se, so

122
00:06:33.150 --> 00:06:34.940
I would just call it a constant user one.

123
00:06:34.940 --> 00:06:36.340
&gt;&gt; Michael: Okay.
&gt;&gt; Will Sentance: Constant user one

124
00:06:36.340 --> 00:06:40.090
is uninitialized for
now while we go off and call.

125
00:06:40.090 --> 00:06:40.890
&gt;&gt; Michael: User creator.

126
00:06:40.890 --> 00:06:42.590
&gt;&gt; Will Sentance: User creator, fantastic.

127
00:06:42.590 --> 00:06:48.412
User one is going to be
the return value of calling

128
00:06:48.412 --> 00:06:53.808
user creator with the input of fill and
five.

129
00:06:53.808 --> 00:06:57.729
Create-
&gt;&gt; Michael: Execution context.

130
00:06:57.729 --> 00:07:02.864
&gt;&gt; Will Sentance: Michael,
in time with the chorus, we create?

131
00:07:02.864 --> 00:07:03.469
&gt;&gt; Michael: Execution context.

132
00:07:03.469 --> 00:07:04.675
&gt;&gt; Will Sentance: We create?

133
00:07:04.675 --> 00:07:05.453
&gt;&gt; Michael: Execution.

134
00:07:05.453 --> 00:07:06.802
&gt;&gt; Will Sentance: Beautiful,
Michael go ahead Michael.

135
00:07:06.802 --> 00:07:07.744
You do the solo.

136
00:07:07.744 --> 00:07:08.850
Excellent, thank you.

137
00:07:08.850 --> 00:07:15.640
We are calling userCreator,
creating an execution context inside.

138
00:07:16.980 --> 00:07:19.990
And first thing we handle,
Seth, pull me through.

139
00:07:21.260 --> 00:07:25.870
&gt;&gt; Seth: Name and score are instantiated
with the arguments that were passed in.

140
00:07:25.870 --> 00:07:27.030
&gt;&gt; Will Sentance: Yeah,
that's not a bad way of putting it.

141
00:07:27.030 --> 00:07:27.940
I have no problem with that.

142
00:07:27.940 --> 00:07:31.025
Yeah, instantiating is uninitialize,
they're given their values, yeah.

143
00:07:31.025 --> 00:07:36.020
Do not think, anybody,
that this is putting stuff in an object.

144
00:07:36.020 --> 00:07:41.450
These are local parameter argument combos,
they are not in an object.

145
00:07:41.450 --> 00:07:43.960
I know this function was create an object,
but

146
00:07:43.960 --> 00:07:46.500
parting an argument does not
put those properties in object.

147
00:07:46.500 --> 00:07:48.260
We have to manually do that.

148
00:07:48.260 --> 00:07:49.550
Never lose sight of that,

149
00:07:49.550 --> 00:07:53.220
especially the new keyword they make you
think that we're sort of doing that.

150
00:07:53.220 --> 00:07:57.570
We never get to directly pass
into a function argument and

151
00:07:57.570 --> 00:07:59.380
they just appear as properties.

152
00:07:59.380 --> 00:08:00.900
No, no, they're put in local memory.

153
00:08:00.900 --> 00:08:04.032
Then we grab them from there,
stick them in an object.

154
00:08:04.032 --> 00:08:04.840
That's what we're about to do.

155
00:08:04.840 --> 00:08:06.490
Let's create that object, though.

156
00:08:06.490 --> 00:08:07.610
Elliot, let's create that object.

157
00:08:09.170 --> 00:08:11.450
&gt;&gt; Elliot: So
a new constant is created, new user.

158
00:08:11.450 --> 00:08:14.700
&gt;&gt; Will Sentance: Excellent [INAUDIBLE],
which is?

159
00:08:14.700 --> 00:08:19.070
&gt;&gt; Elliot: The value is
initially an empty object.

160
00:08:19.070 --> 00:08:21.540
&gt;&gt; Will Sentance: It is
exactly an empty object.

161
00:08:21.540 --> 00:08:24.920
Never lose sight that object all created
is a built-in tool available to us

162
00:08:24.920 --> 00:08:26.010
in JavaScript.

163
00:08:26.010 --> 00:08:26.796
Where is it stored?

164
00:08:26.796 --> 00:08:29.596
Not on object.prototype.

165
00:08:29.596 --> 00:08:31.180
I don't want to even bring this up.

166
00:08:31.180 --> 00:08:34.470
Do you remember how we said there was
a big, old auto-available thing called

167
00:08:34.470 --> 00:08:37.160
object, that is a,
I'm not sure I should be bringing this up.

168
00:08:37.160 --> 00:08:38.320
This is very distracting right now.

169
00:08:38.320 --> 00:08:43.590
Which is a function object combo,
everyone remember this from a moment ago?

170
00:08:43.590 --> 00:08:44.975
Which had a property on it, Seth?

171
00:08:44.975 --> 00:08:48.770
&gt;&gt; Seth: [INAUDIBLE]
&gt;&gt; Will Sentance: Prototype where any

172
00:08:48.770 --> 00:08:55.270
function, it was an object,
with any functions like set prototype of

173
00:08:55.270 --> 00:09:00.950
our stored, and available therefore to the
right hand side of the dot of any object.

174
00:09:00.950 --> 00:09:04.542
But actually this object
it's a funny old one, sorry,

175
00:09:04.542 --> 00:09:09.281
this function object combo's a funny
old one, cuz you know you could also

176
00:09:09.281 --> 00:09:14.640
store functions directly on it,
like create, which is a function.

177
00:09:14.640 --> 00:09:16.000
This function is not available.

178
00:09:16.000 --> 00:09:18.797
We can't just use
the functions.create,because there's no

179
00:09:18.797 --> 00:09:23.450
function called create in here, but we can
do object.create, and run that function.

180
00:09:23.450 --> 00:09:25.240
And that's what we're doing here.

181
00:09:25.240 --> 00:09:25.911
That's where that's stored.

182
00:09:25.911 --> 00:09:27.190
Nothing is hidden in the JavaScript.

183
00:09:27.190 --> 00:09:28.820
Nothing is just there.

184
00:09:28.820 --> 00:09:32.490
It is all explicitly available in
these built-in couple of things,

185
00:09:32.490 --> 00:09:35.290
the function object combo object,

186
00:09:35.290 --> 00:09:39.050
the function object combo, which both
has the set of functions available,

187
00:09:39.050 --> 00:09:43.190
all objects by the proto reference, but
also has some functions like create on it.

188
00:09:43.190 --> 00:09:45.110
Were the other ones keys or something?

189
00:09:45.110 --> 00:09:48.337
They're all just stored down here in
this object, function object combo.

190
00:09:49.746 --> 00:09:51.720
&gt;&gt; Will Sentance: [LAUGH]
Don't we love this language?

191
00:09:52.840 --> 00:09:53.750
Beautiful, all right.

192
00:09:53.750 --> 00:09:57.210
Just a little side there, that
object.create isn't coming from nowhere,

193
00:09:57.210 --> 00:09:59.410
it is an available function
built into JavaScript.

194
00:09:59.410 --> 00:10:00.920
Okay, but what it does,

195
00:10:00.920 --> 00:10:05.740
whatever you pass into it is returned and
empty object, there it is.

196
00:10:05.740 --> 00:10:12.110
But what, David, is that empty
object hidden proto bond linking to?

197
00:10:12.110 --> 00:10:12.920
&gt;&gt; David: User functions.

198
00:10:12.920 --> 00:10:15.150
&gt;&gt; Will Sentance: User functions,
fantastic, thank you man.

199
00:10:15.150 --> 00:10:18.520
There it is, into user functions.

200
00:10:18.520 --> 00:10:20.150
Let's fill in these properties now.

201
00:10:20.150 --> 00:10:22.650
Susie, if you don't mind
filling in the properties.

202
00:10:22.650 --> 00:10:28.410
So we've set up the new user as an object,
it's got the user function bomb

203
00:10:28.410 --> 00:10:32.310
in the hidden proto property, but let's
now fill in our actual properties on it.

204
00:10:32.310 --> 00:10:33.540
New user.name.

205
00:10:33.540 --> 00:10:36.611
Take it away.

206
00:10:36.611 --> 00:10:38.500
&gt;&gt; Susie: So, we, wait what?

207
00:10:38.500 --> 00:10:41.140
&gt;&gt; Will Sentance: We just want
to add the new user.name.

208
00:10:41.140 --> 00:10:44.290
We're assigning to the new user object,
what?

209
00:10:44.290 --> 00:10:45.220
&gt;&gt; Susie: With name.

210
00:10:45.220 --> 00:10:45.960
&gt;&gt; Will Sentance: Name, fantastic.

211
00:10:45.960 --> 00:10:52.090
A name property and assigning it,
what is name at this point as

212
00:10:53.990 --> 00:10:58.910
you passed in, Phil, what is name,
the parameter going to refer to?

213
00:11:01.000 --> 00:11:04.970
So we're calling userCreator, we're
passing in Phil, we're passing in five.

214
00:11:04.970 --> 00:11:07.164
And so name is now what, Susie?

215
00:11:07.164 --> 00:11:08.672
&gt;&gt; Susie: Our name is Phil.

216
00:11:08.672 --> 00:11:09.920
&gt;&gt; Will Sentance: Our name is Phil,
fantastic.

217
00:11:09.920 --> 00:11:13.800
So what are we assigning to
our name property of new user?

218
00:11:13.800 --> 00:11:15.900
&gt;&gt; Susie: Past string value of Phil.

219
00:11:15.900 --> 00:11:17.440
&gt;&gt; Will Sentance: Fantastic,
she's following, exactly.

220
00:11:17.440 --> 00:11:19.020
Thank you, Susie.

221
00:11:19.020 --> 00:11:23.680
And now again, we are assigning a score
property, and assigning to it, what value?

222
00:11:23.680 --> 00:11:24.230
&gt;&gt; Susie: Five.

223
00:11:24.230 --> 00:11:25.870
&gt;&gt; Will Sentance: Five fantastic.

224
00:11:25.870 --> 00:11:29.900
There it is, and
now what is the final line

225
00:11:29.900 --> 00:11:33.620
of this userCreator execution
context telling us to do, Nick?

226
00:11:33.620 --> 00:11:36.810
We've got our lovely object, it's all good
to go, but it's stuck inside user creator,

227
00:11:36.810 --> 00:11:37.520
what have we got to do with it?

228
00:11:37.520 --> 00:11:38.700
&gt;&gt; Nick: It's gonna be returned.

229
00:11:38.700 --> 00:11:41.270
&gt;&gt; Will Sentance: It's
gonna be returned out into?

230
00:11:41.270 --> 00:11:42.390
&gt;&gt; Nick: Memory.

231
00:11:42.390 --> 00:11:43.740
&gt;&gt; Will Sentance: Under
what global constant?

232
00:11:43.740 --> 00:11:44.340
&gt;&gt; Nick: User 1.

233
00:11:44.340 --> 00:11:45.360
&gt;&gt; Will Sentance: User 1, fantastic.

234
00:11:45.360 --> 00:11:48.530
So we know this piece,
we've seen this piece.

235
00:11:48.530 --> 00:11:50.800
Well, we're getting tight for space here.

236
00:11:50.800 --> 00:11:53.780
We know this piece, we've seen this piece,
we like this piece.

237
00:11:55.100 --> 00:11:56.517
But now it gets interesting.

238
00:11:56.517 --> 00:12:02.450
So into User 1, and
it is returned out as this object.

239
00:12:04.120 --> 00:12:09.933
That's its object with name Phil,

240
00:12:09.933 --> 00:12:16.528
score 5, and it's hidden proto bond.

241
00:12:16.528 --> 00:12:19.430
And I'm gonna do the hidden
proto bonds now in purple.

242
00:12:20.440 --> 00:12:29.070
Its hidden proto bond up to this object,
user functions.

243
00:12:29.070 --> 00:12:31.560
Meaning, let's do our little check,
let's not get ahead of ourselves,

244
00:12:31.560 --> 00:12:33.680
let's do our little check
to make sure it's working.

245
00:12:33.680 --> 00:12:37.990
Terry, final line there of that code,
user1.sayName.

246
00:12:37.990 --> 00:12:45.774
Taught me through JavaScript's
lookup process for user1.sayName.

247
00:12:45.774 --> 00:12:52.220
Looks in the in the user 1 for
the method sayName.

248
00:12:52.220 --> 00:12:53.310
&gt;&gt; Terry: It does not find it.

249
00:12:53.310 --> 00:12:54.890
&gt;&gt; Will Sentance: Correct.
&gt;&gt; Terry: It goes to the proto.

250
00:12:56.680 --> 00:13:00.288
Points up to user functions
where it finds sayName.

251
00:13:00.288 --> 00:13:01.490
&gt;&gt; Will Sentance: Fantastic, Terry.

252
00:13:02.940 --> 00:13:04.650
And you gave us a score of four in the?

253
00:13:04.650 --> 00:13:06.770
That was interesting.

254
00:13:06.770 --> 00:13:07.550
Very, very nice Terry.

255
00:13:07.550 --> 00:13:08.690
You're spot on man.

256
00:13:08.690 --> 00:13:10.220
So we are successful.

257
00:13:10.220 --> 00:13:15.884
We have a lovely user 1 that has
access to a set of functions.

258
00:13:15.884 --> 00:13:22.254
Beautiful, but now we want to create
a more specific type of user.

259
00:13:22.254 --> 00:13:26.536
Now we move on to some fairly brutal
code over here on the right hand side.

