WEBVTT

1
00:00:00.330 --> 00:00:02.348
&gt;&gt; Will Sentance: All right,
let's get to making our paidUser,

2
00:00:02.348 --> 00:00:05.130
here we go, here we go.

3
00:00:05.130 --> 00:00:07.020
Do we have enough room?

4
00:00:07.020 --> 00:00:08.100
We definitely do not.

5
00:00:08.100 --> 00:00:10.520
Are we gonna still do it?

6
00:00:10.520 --> 00:00:11.380
Yes.

7
00:00:11.380 --> 00:00:14.620
All right, left hand side here,
Seth, what are we doing?

8
00:00:14.620 --> 00:00:16.060
&gt;&gt; Seth: Declaring a constant, paidUser-1.

9
00:00:16.060 --> 00:00:17.450
&gt;&gt; Will Sentance: Well done, man, yep.

10
00:00:17.450 --> 00:00:19.640
And it's initially uninitialized?

11
00:00:19.640 --> 00:00:20.530
&gt;&gt; Seth: Assign a value,

12
00:00:20.530 --> 00:00:25.500
or the result of the paidUser creator,
with properties, Alissa, 8 and 25.

13
00:00:25.500 --> 00:00:28.570
&gt;&gt; Will Sentance: Yep, perfect,
give me a second, paidUser.

14
00:00:28.570 --> 00:00:29.500
&gt;&gt; Seth: Sorry, arguments.

15
00:00:29.500 --> 00:00:31.090
&gt;&gt; Will Sentance: Arguments, yes, yes.

16
00:00:31.090 --> 00:00:32.410
I make that mistake all the time.

17
00:00:32.410 --> 00:00:35.150
I literally made that same mistake
regularly in giving this talk,

18
00:00:35.150 --> 00:00:38.850
calling them properties because we
know they're gonna end up being so.

19
00:00:38.850 --> 00:00:40.150
They are not properties.

20
00:00:40.150 --> 00:00:42.950
At this point, they are just arguments
that are gonna go into the local

21
00:00:42.950 --> 00:00:45.320
execution context, local memory.

22
00:00:45.320 --> 00:00:48.720
We never assign them to something in an
object, they're definitely not properties.

23
00:00:48.720 --> 00:00:51.130
If we do assign them,
they become properties.

24
00:00:51.130 --> 00:00:54.200
Okay, let's create that
big old execution context.

25
00:00:55.220 --> 00:01:01.720
There it is, no, we'll save a shouting
execution context to later.

26
00:01:01.720 --> 00:01:03.630
So the old execution context.

27
00:01:03.630 --> 00:01:09.210
Into it we go, in it's local,
this is going to be brutal.

28
00:01:09.210 --> 00:01:13.034
Let's make it as wide as possible,
into it we go.

29
00:01:13.034 --> 00:01:17.012
We passed in Alyssa at eight and

30
00:01:17.012 --> 00:01:21.451
twenty five, into it we go folks.

31
00:01:21.451 --> 00:01:25.310
Okay, what are the first
things in our local memory?

32
00:01:25.310 --> 00:01:30.310
Kick us off, Susie,
calling creator with Alyssa A25, and

33
00:01:30.310 --> 00:01:33.240
we go, what are our first
parameter argument combos?

34
00:01:34.382 --> 00:01:38.853
Combos of argument pairings up.

35
00:01:38.853 --> 00:01:43.135
&gt;&gt; Susie: So okay, so
we have the paidUser and

36
00:01:43.135 --> 00:01:45.498
then we're-
&gt;&gt; Will Sentance: But before that,

37
00:01:45.498 --> 00:01:48.905
we've gotta handle our arguments
going into our parameters,

38
00:01:48.905 --> 00:01:49.590
so-
&gt;&gt; Susie: So

39
00:01:49.590 --> 00:01:53.490
it's going into the function
paidUserFunctions?

40
00:01:53.490 --> 00:01:54.370
&gt;&gt; Will Sentance: Fantastic.

41
00:01:55.410 --> 00:01:59.380
Hold on, before we go into
the body of paidUserCreator,

42
00:01:59.380 --> 00:02:02.260
we've gotta handle just these
inputs filling in the parameters.

43
00:02:03.370 --> 00:02:05.400
&gt;&gt; Will Sentance: It's
an easy bit to miss.

44
00:02:05.400 --> 00:02:07.520
Because it sort of seems very obvious.

45
00:02:07.520 --> 00:02:11.410
But they do actually go in our local
memory as locally available names.

46
00:02:11.410 --> 00:02:14.190
So now paid name is going
to be replaced by what?

47
00:02:16.710 --> 00:02:20.415
&gt;&gt; Susie: The paid name is gonna be

48
00:02:20.415 --> 00:02:23.446
replaced by-
&gt;&gt; Will Sentance: We pull us in our

49
00:02:23.446 --> 00:02:27.583
arguments in the same order we have our
parameters, so list will be paid named,

50
00:02:27.583 --> 00:02:29.450
and eight will be-
&gt;&gt; Susie: The paid score.

51
00:02:29.450 --> 00:02:31.040
&gt;&gt; Will Sentance: Paid score,
and 25 will be.

52
00:02:31.040 --> 00:02:31.980
&gt;&gt; Susie: The balance.
&gt;&gt; Will Sentance: Account balance,

53
00:02:31.980 --> 00:02:34.810
perfect, exactly, spot on.

54
00:02:35.860 --> 00:02:39.710
And so paid name, yep paid name,

55
00:02:39.710 --> 00:02:42.870
and these are not properties remember,
these are just local memory stuff.

56
00:02:42.870 --> 00:02:47.690
Paid name is, Alyssa remind me again,
if you remind Susie what the next one is?

57
00:02:47.690 --> 00:02:48.370
&gt;&gt; Susie: Paid.

58
00:02:48.370 --> 00:02:49.760
&gt;&gt; Will Sentance: Yeah, paid score.

59
00:02:49.760 --> 00:02:50.260
&gt;&gt; Susie: 20.

60
00:02:50.260 --> 00:02:53.350
&gt;&gt; Will Sentance: Okay,
exactly and account balance.

61
00:02:53.350 --> 00:02:53.870
&gt;&gt; Susie: It's 25.

62
00:02:53.870 --> 00:02:57.820
&gt;&gt; Will Sentance: It's 25,
fantastic, thank you, Susie.

63
00:02:57.820 --> 00:03:00.410
Okay, now we hit the body of the function.

64
00:03:00.410 --> 00:03:03.360
Nick, pull me through this bit.

65
00:03:03.360 --> 00:03:05.400
This is not necessarily too hard.

66
00:03:05.400 --> 00:03:07.830
They're gonna tell you upfront, look,

67
00:03:07.830 --> 00:03:12.478
we're using userCreator to
hopefully put Alyssa and score,

68
00:03:12.478 --> 00:03:17.070
Alyssa eight on an object, get it out and
then do some fiddling with it.

69
00:03:17.070 --> 00:03:19.920
But we're not doing that ourselves again

70
00:03:19.920 --> 00:03:23.870
even though paid user creator has
the properties, name and score And

71
00:03:23.870 --> 00:03:27.320
maybe we could add them right
now sort of using new code.

72
00:03:27.320 --> 00:03:28.750
No no no why would we do that?

73
00:03:28.750 --> 00:03:31.300
We've got the codes right on the name
on a score to an object over here.

74
00:03:31.300 --> 00:03:33.040
So let's use that code.

75
00:03:33.040 --> 00:03:36.740
And then we'll do some fiddling to
make it specific to a paid user.

76
00:03:36.740 --> 00:03:37.940
So let's go and use that code.

77
00:03:37.940 --> 00:03:42.020
Talk me through this first
line in paidUserCreator, Nick.

78
00:03:42.020 --> 00:03:46.440
&gt;&gt; Nick: We're setting a const
new paidUser equal to the return,

79
00:03:46.440 --> 00:03:49.663
whatever gets returned from the function

80
00:03:49.663 --> 00:03:51.190
userCreator
&gt;&gt; Will Sentance: Perfect,

81
00:03:51.190 --> 00:03:52.120
which means we got to go in?

82
00:03:53.550 --> 00:03:56.570
&gt;&gt; Nick: We got to go in to-
&gt;&gt; Will Sentance: Exit, not exit,

83
00:03:56.570 --> 00:03:59.397
execute- [LAUGH]
&gt;&gt; Nick: A new execution context.

84
00:03:59.397 --> 00:04:04.666
&gt;&gt; Will Sentance: A new execution context,
perfect, so a new paidUser

85
00:04:04.666 --> 00:04:11.990
will be the return value of calling
userCreator with what arguments?

86
00:04:11.990 --> 00:04:16.990
&gt;&gt; Nick: With the arguments paid name-
&gt;&gt; Will Sentance: Which is

87
00:04:16.990 --> 00:04:17.988
what in our local memory?

88
00:04:17.988 --> 00:04:18.671
&gt;&gt; Nick: Alysa.

89
00:04:18.671 --> 00:04:23.200
&gt;&gt; Will Sentance: Alysa,
&gt;&gt; Nick: And then 8.

90
00:04:23.200 --> 00:04:25.417
&gt;&gt; Will Sentance: 8, excellent.

91
00:04:25.417 --> 00:04:29.042
And then now let's create
that execution context.

92
00:04:29.042 --> 00:04:32.226
There it is, and it's local memory?

93
00:04:32.226 --> 00:04:37.970
&gt;&gt; Nick: We are setting [LAUGH]
we are setting a const new user.

94
00:04:37.970 --> 00:04:42.832
&gt;&gt; Will Sentance: So Alyssa and Nate are
being passed in, [SOUND] to userCreator?

95
00:04:42.832 --> 00:04:44.856
&gt;&gt; Nick: Right, as the name and score.

96
00:04:44.856 --> 00:04:45.379
&gt;&gt; Will Sentance: As the name and score.

97
00:04:50.630 --> 00:04:55.180
&gt;&gt; Will Sentance: Name is
going to be there for Alyssa.

98
00:04:55.180 --> 00:04:58.230
&gt;&gt; Nick: And then score will be eight.

99
00:04:58.230 --> 00:05:03.570
&gt;&gt; Will Sentance: Fantastic man,
score will be eight.

100
00:05:03.570 --> 00:05:07.890
Perfect, and now, so we're in user
creator, I know it's off to the side but

101
00:05:07.890 --> 00:05:10.380
we're running it inside
of paidUserCreator.

102
00:05:10.380 --> 00:05:15.670
There it is, and,
&gt;&gt; Nick: Then we are going to

103
00:05:15.670 --> 00:05:17.350
create a new object.

104
00:05:17.350 --> 00:05:18.258
&gt;&gt; Will Sentance: Fantastic,

105
00:05:18.258 --> 00:05:24.010
our new [INAUDIBLE] called new user which
is gonna be automatically what Nick?

106
00:05:24.010 --> 00:05:24.620
A big old?

107
00:05:26.320 --> 00:05:28.080
&gt;&gt; Nick: Function, or a big old object.

108
00:05:28.080 --> 00:05:29.240
&gt;&gt; Will Sentance: A big old empty object.

109
00:05:29.240 --> 00:05:32.350
What does object.create always return us,
Nick, remind us?

110
00:05:32.350 --> 00:05:37.250
&gt;&gt; Nick: It always returns
an object with proto on it.

111
00:05:37.250 --> 00:05:39.840
&gt;&gt; Will Sentance: Well done, an empty
object, but with a hidden property, and

112
00:05:39.840 --> 00:05:40.700
what hidden property?

113
00:05:40.700 --> 00:05:41.730
&gt;&gt; Nick: Proto.
&gt;&gt; Will Sentance: Proto,

114
00:05:41.730 --> 00:05:44.599
which is a reference to whatever was
passed in, which in this case is?

115
00:05:45.970 --> 00:05:48.330
&gt;&gt; Nick: Is user functions.

116
00:05:48.330 --> 00:05:50.090
&gt;&gt; Will Sentance: User functions, so

117
00:05:50.090 --> 00:05:55.880
I'm just gonna indicate that which
is user functions up here, but

118
00:05:55.880 --> 00:05:58.500
that's not very good because this object,
this the one we want to be a paid user.

119
00:05:58.500 --> 00:06:02.250
So we want it probably to have
access to paid user functions.

120
00:06:02.250 --> 00:06:04.680
So we're probably gonna need
to change that, aren't we?

121
00:06:04.680 --> 00:06:08.940
So we're using our prewritten
code to create our objects, but

122
00:06:08.940 --> 00:06:10.770
it's already given us a few issues.

123
00:06:10.770 --> 00:06:15.270
It's already sticking the wrong set of
functions that are gonna be available in

124
00:06:15.270 --> 00:06:18.100
that object when it eventually
comes out to paiduser1.

125
00:06:18.100 --> 00:06:22.060
Cuz we're gonna return into newpaiduser,
and then return it out from there

126
00:06:22.060 --> 00:06:27.160
into paiduser1, but it's got the wrong
A set of functions available to it.

127
00:06:27.160 --> 00:06:28.640
We wanted to have these set of functions.

128
00:06:28.640 --> 00:06:31.070
And then from there,
have access to these functions.

129
00:06:31.070 --> 00:06:34.410
So, we may need to switch
out this proto in a moment.

130
00:06:34.410 --> 00:06:35.590
Let's have a look if we.

131
00:06:35.590 --> 00:06:37.600
Looks like we're gonna do that.

132
00:06:37.600 --> 00:06:41.050
Switch out this proto for
the right set of functions, okay.

133
00:06:42.110 --> 00:06:45.820
But for now,
it's just helpful to be able to use.

134
00:06:45.820 --> 00:06:48.720
Prewritten functionality to
get our name and score in.

135
00:06:48.720 --> 00:06:50.780
In reality, there may be many
more properties we'd add, so

136
00:06:50.780 --> 00:06:53.300
we wanna use this prewritten
functionality from user.

137
00:06:53.300 --> 00:06:57.220
It's also good for our mental sort of
thinking about how this is laid out.

138
00:06:57.220 --> 00:07:02.210
Paid user is a sub type of user, and
so it kind of makes sense to use

139
00:07:02.210 --> 00:07:06.630
the code we use to create users, to create
paid users, and then mutate it a bit.

140
00:07:06.630 --> 00:07:07.590
Rather than start from scratch.

141
00:07:07.590 --> 00:07:08.270
Because they are related.

142
00:07:08.270 --> 00:07:10.890
They're kind of hierarchically related.

143
00:07:10.890 --> 00:07:13.930
It's a more specific
version of the user type.

144
00:07:13.930 --> 00:07:18.150
So it's not a bad thing to create it,
it's a bit off, and then adjust it.

145
00:07:18.150 --> 00:07:19.370
Okay.

146
00:07:19.370 --> 00:07:20.550
Good, good, good.

147
00:07:20.550 --> 00:07:24.850
So final We haven't added
the properties yet.

148
00:07:24.850 --> 00:07:25.520
Help me out Chris,

149
00:07:25.520 --> 00:07:28.460
add the properties to the new user
object inside of User/Creator.

150
00:07:28.460 --> 00:07:30.300
By the way who have I been calling in,
behind my back so

151
00:07:30.300 --> 00:07:31.510
I can't remember was it Nick or Chris?

152
00:07:32.680 --> 00:07:33.970
&gt;&gt; Nick: You were talking to me.

153
00:07:33.970 --> 00:07:34.520
&gt;&gt; Will Sentance: To you, Nick.

154
00:07:34.520 --> 00:07:35.090
&gt;&gt; Nick: Yeah.
&gt;&gt; Will Sentance: Really,

155
00:07:35.090 --> 00:07:36.970
really good by Nick, by the way.

156
00:07:36.970 --> 00:07:38.760
So now we hit newuser.name.

157
00:07:38.760 --> 00:07:39.970
Help me out, Nick.

158
00:07:39.970 --> 00:07:44.630
&gt;&gt; Nick: All right,
newuser .name gets assigned.

159
00:07:44.630 --> 00:07:47.260
&gt;&gt; Will Sentance: What's the local value,
therefore what's the local name?

160
00:07:48.420 --> 00:07:50.480
&gt;&gt; Nick: Where do we do-
&gt;&gt; Will Sentance: Paid name, which was-

161
00:07:50.480 --> 00:07:51.680
&gt;&gt; Nick: Which is Alysa.

162
00:07:51.680 --> 00:07:53.630
&gt;&gt; Will Sentance: Yeah, so
we parse Alysa into paid name and

163
00:07:54.830 --> 00:07:58.285
then we parse paid name into user/creator,
that means we parse Alysa into

164
00:07:58.285 --> 00:08:01.170
user/creator where it was
given the label name.

165
00:08:01.170 --> 00:08:04.210
And now we've got the score property.

166
00:08:04.210 --> 00:08:04.980
Help me out with this, Nick.

167
00:08:04.980 --> 00:08:06.180
What's the f*cking score?

168
00:08:06.180 --> 00:08:06.870
&gt;&gt; Nick: Eight.
&gt;&gt; Will Sentance: Eight.

169
00:08:08.540 --> 00:08:12.550
Now we've got this lovely object here, but
it's stuck inside the execution context.

170
00:08:12.550 --> 00:08:16.550
You want to get it out into paid user
creator where we can make some changes to

171
00:08:16.550 --> 00:08:18.350
Andre's new label, new paid users.

172
00:08:18.350 --> 00:08:19.420
How did we get it out?

173
00:08:19.420 --> 00:08:20.000
&gt;&gt; Nick: It gets returned.

174
00:08:20.000 --> 00:08:20.910
&gt;&gt; Will Sentance: It's returned.

175
00:08:20.910 --> 00:08:21.770
Yeah, exquisite.

176
00:08:21.770 --> 00:08:22.820
We return new user.

177
00:08:22.820 --> 00:08:23.710
What does that mean?

178
00:08:23.710 --> 00:08:31.716
It means JavaScript sees the line return
new user, and goes new user, what's that?

179
00:08:31.716 --> 00:08:34.770
This object, returns the object.

180
00:08:34.770 --> 00:08:38.360
Not new user label,
that gets forgotten, just the object.

181
00:08:38.360 --> 00:08:42.871
Out it comes into new paid user

182
00:08:42.871 --> 00:08:48.518
where We, well we have now, sorry,
we have the property Alyssa,

183
00:08:48.518 --> 00:08:54.000
and score is eight, or probably,

184
00:08:54.000 --> 00:09:00.150
name is Alyssa, score is 8, it still
has its proto-bond to user functions,

185
00:09:00.150 --> 00:09:05.580
Seth, do we want it to directly proto-bond
to user functions, is that useful to us?

186
00:09:05.580 --> 00:09:06.580
&gt;&gt; Seth: No way.

187
00:09:06.580 --> 00:09:09.420
&gt;&gt; Will Sentance: No way,
thank you Seth, I appreciate You were

188
00:09:09.420 --> 00:09:12.870
playing along with me the whole time,
thank you very much, I'm very grateful.

189
00:09:12.870 --> 00:09:16.320
No way, that's not useful at all,
I'm with Seth.

190
00:09:17.470 --> 00:09:18.510
No way.

191
00:09:18.510 --> 00:09:19.900
So what are we going to do?

192
00:09:19.900 --> 00:09:22.820
Now we've returned out that
object into new paid user

193
00:09:22.820 --> 00:09:24.860
in that very next line, Seth.

194
00:09:24.860 --> 00:09:27.200
&gt;&gt; Seth: We're going to assign a new

195
00:09:27.200 --> 00:09:31.650
object to proto who already has it's
proto assigned to user function.

196
00:09:31.650 --> 00:09:33.651
&gt;&gt; Will Sentance: And we're gonna
give up on that proto assignment.

197
00:09:33.651 --> 00:09:35.400
We're gonna give up on
that proto assignment

198
00:09:35.400 --> 00:09:37.030
not to use the functions anymore.

199
00:09:37.030 --> 00:09:39.530
And we're instead gonna set new paid user.

200
00:09:39.530 --> 00:09:41.600
Remember, this is just
how set prototype works.

201
00:09:41.600 --> 00:09:43.210
The first thing you pass in,

202
00:09:43.210 --> 00:09:46.000
you get to control its proto with
the second thing you pass in.

203
00:09:46.000 --> 00:09:48.430
The first thing you pass
in was new paid user.

204
00:09:48.430 --> 00:09:52.080
It then takes that new paid use of
proto and says whatever is there,

205
00:09:52.080 --> 00:09:57.460
forgot about it and stick paid user
functions in there which is a link to,

206
00:09:57.460 --> 00:10:00.260
let's use the purple pens so
we know it's a reference.

207
00:10:00.260 --> 00:10:06.720
A link to paid user functions
which means this object which is

208
00:10:06.720 --> 00:10:12.720
gonna be our paid user one is gonna have
access to Increase balance, beautiful.

209
00:10:12.720 --> 00:10:16.670
But also, because paidUserfunctions,

210
00:10:16.670 --> 00:10:20.690
it was given its own to use the functions.

211
00:10:20.690 --> 00:10:23.890
If we looked to paidUserfunctions,
and are looking for,

212
00:10:23.890 --> 00:10:27.320
say, increment, we will find it.

213
00:10:27.320 --> 00:10:29.260
We won't panic when we look up for that.

214
00:10:29.260 --> 00:10:29.920
And there it will be.

215
00:10:29.920 --> 00:10:32.070
We're gonna see that play
out in a moment don't worry,

216
00:10:32.070 --> 00:10:33.540
we're gonna see it actually play out.

217
00:10:33.540 --> 00:10:36.060
What is the final thing we
wanna do to this object Seth so

218
00:10:36.060 --> 00:10:39.650
that it is actually a paid user type,
what's the final thing we're gonna add?

219
00:10:39.650 --> 00:10:40.150
&gt;&gt; Seth: Account balance.

220
00:10:40.150 --> 00:10:41.690
&gt;&gt; Will Sentance: Account
balance property.

221
00:10:42.770 --> 00:10:43.680
&gt;&gt; Seth: With the value of 25.

222
00:10:43.680 --> 00:10:46.630
&gt;&gt; Will Sentance: Fantastic
thank you Seth, there it is 25.

223
00:10:46.630 --> 00:10:51.547
Okay let's grab that object and
Return it out, yep,

224
00:10:51.547 --> 00:10:55.000
return it out into paid user.

225
00:10:55.000 --> 00:10:59.440
Let's hope this paid user is
everything we want it to be.

226
00:10:59.440 --> 00:11:04.760
Hopefully it has properties that
are the same as users, cuz we used

227
00:11:04.760 --> 00:11:09.830
the code to produce them, it has specific
properties that are only for a paid user.

228
00:11:09.830 --> 00:11:13.660
Hopefully it also has specific
functionality that's only for a paid user.

229
00:11:13.660 --> 00:11:14.640
Like increasing balance.

230
00:11:14.640 --> 00:11:17.470
I can't increase a balance
of a non paid user.

231
00:11:17.470 --> 00:11:21.020
But it also has all
the functionality of a regular user.

232
00:11:21.020 --> 00:11:22.440
That's what we hope.

233
00:11:22.440 --> 00:11:25.548
All right, name is Alyssa.

234
00:11:25.548 --> 00:11:29.880
Score was eight.

235
00:11:29.880 --> 00:11:30.850
Returned it out.

236
00:11:30.850 --> 00:11:32.020
Account balance.

237
00:11:32.020 --> 00:11:33.800
Forgive my handwriting a little bit here.

238
00:11:33.800 --> 00:11:35.580
Account balance is 25.

239
00:11:35.580 --> 00:11:41.990
And its proto bond,
its hidden proto reference is up to?

240
00:11:43.610 --> 00:11:46.100
Paid User functions.

241
00:11:46.100 --> 00:11:47.890
There it is, the paid user functions,

242
00:11:47.890 --> 00:11:50.350
which itself has a proto
reference up to user functions.

243
00:11:50.350 --> 00:11:53.060
So now we do our all important checks.

