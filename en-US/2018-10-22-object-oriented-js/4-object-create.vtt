WEBVTT

1
00:00:00.360 --> 00:00:01.950
&gt;&gt; Will Sentance: There's
one other interesting way,

2
00:00:01.950 --> 00:00:03.340
we're gonna see a bunch of ways for
an object.

3
00:00:03.340 --> 00:00:07.700
But one other interesting one we're gonna
see right now, that's gonna turn out to

4
00:00:07.700 --> 00:00:12.660
give us very fine-grained
control later on over what our

5
00:00:12.660 --> 00:00:18.070
object might also have access to,
very interesting.

6
00:00:18.070 --> 00:00:22.900
This approach is called object-dot-create,
is a built in method,

7
00:00:22.900 --> 00:00:26.770
a built in function in JavaScript that
always whenever we pass through it,

8
00:00:26.770 --> 00:00:30.010
we could pass it as its input
an objects for the objects.

9
00:00:30.010 --> 00:00:31.870
Whenever we pass through it, now, well,

10
00:00:31.870 --> 00:00:38.450
in this case is always gonna store on
the left hand side an empty object.

11
00:00:38.450 --> 00:00:42.960
Let's do it,
user 3 is therefore gonna be in memory

12
00:00:44.010 --> 00:00:47.960
an empty object, there it is.

13
00:00:47.960 --> 00:00:52.940
Into which we're gonna store
our properties name, Eva,

14
00:00:52.940 --> 00:00:59.240
score 9, and again, our increment method.

15
00:00:59.240 --> 00:01:02.630
So there it is, our user 3 object.

16
00:01:02.630 --> 00:01:06.090
We created it using this
interesting built-in tool for

17
00:01:06.090 --> 00:01:08.790
creating objects object-dot-create.

18
00:01:08.790 --> 00:01:10.310
Very explicitly named.

19
00:01:10.310 --> 00:01:15.030
Whatever we pass to that always
it returns out an empty object.

20
00:01:15.030 --> 00:01:20.360
I could pass in objects full of objects no
problem, empty object, but what we pass

21
00:01:20.360 --> 00:01:26.818
in is gonna determine, we're gonna see,
what bonus feature we might get access to,

22
00:01:26.818 --> 00:01:32.090
with user 3 if we pass in something
more interesting than null.

23
00:01:32.090 --> 00:01:34.960
All to come, but note folk.

24
00:01:34.960 --> 00:01:35.970
What have we done?

25
00:01:35.970 --> 00:01:38.450
We've started building our application.

26
00:01:38.450 --> 00:01:42.810
We have an object representing user 3,
we have an object representing user2.

27
00:01:44.220 --> 00:01:49.210
Both of these objects have all the
pertinent functionality that is applicable

28
00:01:49.210 --> 00:01:57.430
to Eva, applicable to Julia, but
we're handcrafting these objects.

29
00:01:57.430 --> 00:02:01.120
We're sticking properties in there
manually one by one, and we don't have

30
00:02:01.120 --> 00:02:04.950
a bunch of developers sitting behind
the scenes when you sign up to a site, or

31
00:02:04.950 --> 00:02:11.980
log in, and say, don't worry,
don't worry, Terry's logged in.

32
00:02:11.980 --> 00:02:13.370
Get the object created.

33
00:02:13.370 --> 00:02:14.070
No, no, no, no.

34
00:02:14.070 --> 00:02:20.140
We have a function that will then allow
us to call it when the user logs in,

35
00:02:20.140 --> 00:02:23.890
and fill out the object at that moment.

36
00:02:23.890 --> 00:02:25.740
Whenever we have repetitive code,

37
00:02:25.740 --> 00:02:28.880
we do not want to be doing
it from scratch every time.

38
00:02:28.880 --> 00:02:32.780
So we wrap this work in a function.

39
00:02:32.780 --> 00:02:37.010
And it turns out, people,
this ends up being our first solution.

