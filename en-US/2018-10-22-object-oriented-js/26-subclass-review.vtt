WEBVTT

1
00:00:00.590 --> 00:00:03.255
&gt;&gt; Will Sentance: One more interlude
before we see these other approaches to

2
00:00:03.255 --> 00:00:04.710
sub-classing.

3
00:00:04.710 --> 00:00:10.070
That interlude is this, we need to
know that we can control how we call

4
00:00:10.070 --> 00:00:15.650
functions using other techniques besides
just grabbing the function's name and

5
00:00:15.650 --> 00:00:18.340
sticking parentheses on the end of it,
which calls the function.

6
00:00:18.340 --> 00:00:25.870
We can actually use a couple of
built-in tools to call a function and

7
00:00:25.870 --> 00:00:32.360
take control inside of the function
execution context of the vis assignment.

8
00:00:32.360 --> 00:00:35.119
Now, we saw that sort of
with an error function.

9
00:00:35.119 --> 00:00:37.626
But we weren't taking control,
we were just saying,

10
00:00:37.626 --> 00:00:41.220
don't have the vis be defined by
where the function's being called.

11
00:00:41.220 --> 00:00:43.570
Happened to be defined the way
the function was first stored and saved.

12
00:00:43.570 --> 00:00:47.160
I was gonna say controlled,
it was just being different.

13
00:00:47.160 --> 00:00:52.300
This call and apply approach to executing
a function allows us to manually

14
00:00:52.300 --> 00:00:57.040
control what inside of that
function the vis will refer to.

15
00:00:57.040 --> 00:00:58.040
All right, folks, here we go.

16
00:00:58.040 --> 00:01:00.380
Subclassing in Solution two.

17
00:01:00.380 --> 00:01:02.170
We've just seen this.

18
00:01:02.170 --> 00:01:09.190
Let's remind ourselves briefly,
what this did was give us an object,

19
00:01:10.280 --> 00:01:17.100
paid user 1, that represents
someone who's so like a user,

20
00:01:17.100 --> 00:01:23.370
but they're still got bonus properties and
bonus functionality.

21
00:01:23.370 --> 00:01:25.170
They're very similar to a user.

22
00:01:25.170 --> 00:01:28.290
They have name and score,
they have increment,

23
00:01:28.290 --> 00:01:32.530
they have same name of the function,
but they also have an account balance.

24
00:01:32.530 --> 00:01:36.390
They also have an increased
balance functionality.

25
00:01:36.390 --> 00:01:44.220
We did that by having our paid user
one's proto link to paid user functions.

26
00:01:44.220 --> 00:01:48.670
Remember, we did that when we kind of made
that object inside of paidUserCreator,

27
00:01:48.670 --> 00:01:51.830
we said its prototype
to paidUser functions.

28
00:01:51.830 --> 00:01:54.680
Well, sorry,
we ran the set prototype function,

29
00:01:54.680 --> 00:01:58.190
which sets the proto to
paid user functions.

30
00:01:58.190 --> 00:02:03.570
And then we said, but that means we'll
lose access to the user functions.

31
00:02:03.570 --> 00:02:11.180
Don't worry, we set paid user functions,
own proto to user functions.

32
00:02:11.180 --> 00:02:12.270
Where did we do that?

33
00:02:12.270 --> 00:02:16.230
Set prototype paid user
functions to user functions.

34
00:02:16.230 --> 00:02:18.150
Paid user functions to user functions.

35
00:02:19.390 --> 00:02:23.663
This approach, people,
is I think the most sophisticated,

36
00:02:23.663 --> 00:02:26.303
most sort of fancy thing you could do.

37
00:02:26.303 --> 00:02:28.533
If someone in the interview said to you,

38
00:02:28.533 --> 00:02:32.860
tell me how the new keywords working
under the hood with subclassing.

39
00:02:32.860 --> 00:02:38.015
If some monstrous interviewer
asked you this, [LAUGH].

40
00:02:39.235 --> 00:02:42.160
&gt;&gt; Will Sentance: You have
the exemplary answer.

41
00:02:43.230 --> 00:02:47.244
But, in reality in your
day to day engineering.

42
00:02:47.244 --> 00:02:50.450
You're gonna be automating
a bunch of this work.

43
00:02:50.450 --> 00:02:54.970
First with the help of new,
that's our solution three and

44
00:02:54.970 --> 00:02:59.710
then with the help of class
that is our solution four.

45
00:02:59.710 --> 00:03:01.150
To understand those,

46
00:03:01.150 --> 00:03:05.970
we're gonna need to learn this other
approach to executing a function.

47
00:03:07.610 --> 00:03:10.970
Interlude, we have another way of running
a function that allows us to control

48
00:03:10.970 --> 00:03:12.910
the assignment of this.

49
00:03:12.910 --> 00:03:14.389
And even a warning, even right now,

50
00:03:14.389 --> 00:03:16.269
I think it's worth kind
of seeing this ahead.

51
00:03:16.269 --> 00:03:21.897
What's gonna happen, is that in
our new keyword version of this,

52
00:03:21.897 --> 00:03:27.423
folk, we are again,
in creating our paid user, Alyssa 825,

53
00:03:27.423 --> 00:03:31.860
we're going to use I
userCreator function to do so.

54
00:03:33.270 --> 00:03:38.820
We're gonna use I userCreator
function to do so, but unlike

55
00:03:38.820 --> 00:03:43.020
calling the userCreator function with
a new keyword which is gonna create this,

56
00:03:43.020 --> 00:03:45.330
which we can attach our properties to.

57
00:03:45.330 --> 00:03:49.820
We're gonna use user creator.call, that's
gonna call user creator, but we're gonna,

58
00:03:49.820 --> 00:03:53.040
and this is the most brutal piece,
that's why I'm telling you this early.

59
00:03:53.040 --> 00:03:57.440
This is the most brutal line of
code I think in all of hotpads, or

60
00:03:57.440 --> 00:03:58.530
in the top three.

61
00:03:58.530 --> 00:04:02.287
There's quite a few brutal lines of code
in hotpads, in the top three most brutal

62
00:04:02.287 --> 00:04:05.011
lines of code in all of
JavaScript hotpads various talks.

63
00:04:05.011 --> 00:04:09.807
This line here, we are going to run our
userCreate function to stick our name and

64
00:04:09.807 --> 00:04:12.370
score properties on an object.

65
00:04:12.370 --> 00:04:16.380
But that object is not gonna be the
auto-created one, but the new keyword God

66
00:04:16.380 --> 00:04:21.480
is creating with user creator, but
instead one that we're going to make and

67
00:04:21.480 --> 00:04:26.180
pass in using this cool method,
whose first argument,

68
00:04:26.180 --> 00:04:33.380
first input Is always whatever this is
going to be inside of that function.

69
00:04:33.380 --> 00:04:35.415
Don't worry, we're gonna build up to it,
we're gonna build up to it.

70
00:04:35.415 --> 00:04:39.127
Starting off with this understanding
how call and apply work.

71
00:04:39.127 --> 00:04:40.823
So that we can be use them
in the following exam.

72
00:04:40.823 --> 00:04:47.351
So I want to give you a preview, we gonna
use this to make our new solution three,

73
00:04:47.351 --> 00:04:51.944
and new key word version of
sub classing actually work.

