WEBVTT

1
00:00:00.335 --> 00:00:03.750
&gt;&gt; Speaker 1: Our first solution is
just producing these objects that

2
00:00:03.750 --> 00:00:08.610
are the perfect representation
in our application of our data

3
00:00:08.610 --> 00:00:10.420
with the associated functionality.

4
00:00:11.780 --> 00:00:14.430
Put that process of
creation in a function.

5
00:00:15.550 --> 00:00:16.370
Create an object.

6
00:00:16.370 --> 00:00:18.490
See the code to add the properties,
add the function, and

7
00:00:18.490 --> 00:00:21.500
then return that object out into User1.

8
00:00:21.500 --> 00:00:24.820
We're gonna end up with
exactly the same situation as

9
00:00:25.860 --> 00:00:28.370
we had when we hand crafted these objects.

10
00:00:28.370 --> 00:00:31.069
But now, we're doing it in a single line.

11
00:00:31.069 --> 00:00:36.110
Create user object into User1 with
fill and for as the properties.

12
00:00:36.110 --> 00:00:37.545
User a two with property.

13
00:00:37.545 --> 00:00:42.818
And in both cases,
a copy of our increment function on User1.

14
00:00:42.818 --> 00:00:46.480
A copy of our increment function on User2.

15
00:00:46.480 --> 00:00:51.960
Already, you might spot that there might
be some issues with this approach.

16
00:00:51.960 --> 00:00:54.080
There might be some challenges.

17
00:00:54.080 --> 00:00:59.030
And so, at this point,
we are going to start

18
00:00:59.030 --> 00:01:03.218
our generation of objects,
but now with a function.

19
00:01:03.218 --> 00:01:05.910
This approach, folks,
easy to reason about.

20
00:01:07.300 --> 00:01:12.941
But hard to add features we're gonna see,
and fundamentally untenable

21
00:01:12.941 --> 00:01:18.225
in terms of whether it's going to
be performant in terms of memory.

22
00:01:19.918 --> 00:01:22.310
&gt;&gt; Speaker 1: Let's start off
by declaring our function here.

23
00:01:22.310 --> 00:01:23.370
Declare the function.

24
00:01:23.370 --> 00:01:27.860
That means save in memory
the function user creator.

25
00:01:29.150 --> 00:01:32.660
Storing the code in the function.

26
00:01:32.660 --> 00:01:33.940
Perfect.

27
00:01:33.940 --> 00:01:36.180
Next line, Chris.

28
00:01:36.180 --> 00:01:38.540
&gt;&gt; Chris: We're declaring
a constant new user as the object.

29
00:01:38.540 --> 00:01:41.380
&gt;&gt; Speaker 1: So you were right
to just say we don't run any of

30
00:01:41.380 --> 00:01:44.540
the code in user creator until we do what?

31
00:01:44.540 --> 00:01:46.110
&gt;&gt; Chris: You call them.

32
00:01:46.110 --> 00:01:47.070
&gt;&gt; Speaker 1: We call it.

33
00:01:47.070 --> 00:01:49.713
So we grab all of that code and
we're gonna represent,

34
00:01:49.713 --> 00:01:53.511
I'm not gonna write out the code, but
think of it all being in here basically.

35
00:01:55.245 --> 00:01:58.679
&gt;&gt; Speaker 1: So what actually, Chris,
if not the body of the function,

36
00:01:58.679 --> 00:02:02.190
is the next line of code that
JavaScript executes or does?

37
00:02:02.190 --> 00:02:05.030
&gt;&gt; Chris: Creating a new user,
or new constant User1?

38
00:02:05.030 --> 00:02:06.190
&gt;&gt; Speaker 1: Perfect, he's spot on.

39
00:02:06.190 --> 00:02:07.750
User1, there it is.

40
00:02:07.750 --> 00:02:12.664
User1.
And do we know where to store User1 yet?

41
00:02:13.991 --> 00:02:16.610
&gt;&gt; Speaker 3: The return of user/creator.

42
00:02:16.610 --> 00:02:19.380
&gt;&gt; Speaker 1: Fantastic,
the return value of calling user creator.

43
00:02:19.380 --> 00:02:25.470
So User1 is, now const doesn't assign and
define to USer1.

44
00:02:25.470 --> 00:02:29.262
It's an unmutatable label.

45
00:02:29.262 --> 00:02:34.246
You can't change the data, and so
it actually remains uninitialized until we

46
00:02:34.246 --> 00:02:38.170
go and get the return value from
calling User created spawn.

47
00:02:38.170 --> 00:02:41.380
So I'm just gonna leave it blank
because it's uninitialized.

48
00:02:41.380 --> 00:02:44.510
Actually, it's not even declared,
but we'll just leave it there for

49
00:02:44.510 --> 00:02:49.025
now while we go off and call user creator.

50
00:02:49.025 --> 00:02:54.510
User1 is going to be
the return value of calling

51
00:02:54.510 --> 00:02:59.730
user creator with the input of fill and
four.

52
00:02:59.730 --> 00:03:05.440
And folk, I'm gonna represent whenever you
start running a function in JavaScript.

53
00:03:05.440 --> 00:03:07.930
As I say, you need what's
called an execution context.

54
00:03:07.930 --> 00:03:10.270
Context means space to do something.

55
00:03:10.270 --> 00:03:15.140
This is the space in which to execute,
to run, that function's code.

56
00:03:15.140 --> 00:03:17.360
It comprises the thread of execution,

57
00:03:17.360 --> 00:03:21.060
which means we are no longer
running code outside that function.

58
00:03:21.060 --> 00:03:23.370
We're just running that
function's code line by line,

59
00:03:23.370 --> 00:03:25.600
threading its way through and
executing line by line.

60
00:03:25.600 --> 00:03:30.550
And a little mini-memory to save
any of the stuff that gets declared

61
00:03:30.550 --> 00:03:31.440
inside that function.

62
00:03:31.440 --> 00:03:33.890
I'm gonna represent it with this box here.

63
00:03:33.890 --> 00:03:36.030
Think of it as a frame in other languages,
or similar.

64
00:03:37.450 --> 00:03:38.100
Into it we go.

65
00:03:38.100 --> 00:03:40.970
And it's got a memory.

66
00:03:40.970 --> 00:03:48.774
I'm gonna call it the local memory because
it's only available inside this function.

67
00:03:48.774 --> 00:03:52.650
Anything return out this function will be
deleted, cuz it's local to this function.

68
00:03:52.650 --> 00:03:54.840
That just means we're inside the function.

69
00:03:54.840 --> 00:03:56.290
Inside the function execution context.

70
00:03:56.290 --> 00:04:01.100
In this local memory,
the first thing we put in, Seth, are what?

71
00:04:02.130 --> 00:04:03.560
&gt;&gt; Seth: Declaring the constant and
the user.

72
00:04:03.560 --> 00:04:05.070
&gt;&gt; Speaker 1: That's the second thing,
man.

73
00:04:05.070 --> 00:04:07.490
What's the very first thing we handle?

74
00:04:07.490 --> 00:04:08.880
&gt;&gt; Seth: The two parameters.

75
00:04:08.880 --> 00:04:09.860
&gt;&gt; Speaker 1: The parameters, exactly.

76
00:04:09.860 --> 00:04:12.810
So name is assigned what value?

77
00:04:12.810 --> 00:04:13.760
&gt;&gt; Seth: Fill.

78
00:04:13.760 --> 00:04:14.385
&gt;&gt; Speaker 1: Yeah, not Will.

79
00:04:14.385 --> 00:04:18.665
[LAUGH] Recently became
less self-centered.

80
00:04:18.665 --> 00:04:19.528
&gt;&gt; Seth: [LAUGH]
&gt;&gt; Speaker 1: And

81
00:04:19.528 --> 00:04:23.679
changed it from Will to fill.

82
00:04:23.679 --> 00:04:25.520
And score is?

83
00:04:25.520 --> 00:04:26.730
&gt;&gt; Seth: Four.
&gt;&gt; Speaker 1: Four, perfect.

84
00:04:26.730 --> 00:04:31.320
New user is then a big old empty object.

85
00:04:32.490 --> 00:04:34.570
And let's now populate its properties.

86
00:04:34.570 --> 00:04:38.430
And folk, this may feel procedural
right now It's gonna get

87
00:04:39.570 --> 00:04:45.080
profoundly more complex as we go, but
we'll have the foundations down to do so.

88
00:04:45.080 --> 00:04:47.098
Nick, throw out the properties for me.

89
00:04:49.043 --> 00:04:50.730
&gt;&gt; Nick: First is the name.

90
00:04:50.730 --> 00:04:51.650
Name gets assigned.

91
00:04:51.650 --> 00:04:53.370
And then, score.

92
00:04:53.370 --> 00:04:56.310
&gt;&gt; Speaker 1: So let's be as clear
as possible, if we can, Nick.

93
00:04:56.310 --> 00:05:00.460
So we assign, we are dynamically assigning
a name property to the newUser constant,

94
00:05:00.460 --> 00:05:03.530
or newUser object, and
it's gonna have what value?

95
00:05:03.530 --> 00:05:09.500
&gt;&gt; Nick: The name,
a key will have the value of fill.

96
00:05:09.500 --> 00:05:10.400
&gt;&gt; Speaker 1: Which is our?

97
00:05:10.400 --> 00:05:11.130
&gt;&gt; Nick: String.

98
00:05:11.130 --> 00:05:12.310
&gt;&gt; Speaker 1: Which is our?

99
00:05:12.310 --> 00:05:12.870
&gt;&gt; Nick: Argument.

100
00:05:12.870 --> 00:05:14.000
&gt;&gt; Speaker 1: Yeah, argument.

101
00:05:14.000 --> 00:05:17.730
So parameter, name is the parameter.

102
00:05:17.730 --> 00:05:19.410
The argument is the one we pass in.

103
00:05:19.410 --> 00:05:21.040
So the argument fill is passed in.

104
00:05:21.040 --> 00:05:21.860
Perfect.

105
00:05:21.860 --> 00:05:23.100
There it is.

106
00:05:23.100 --> 00:05:27.010
And then,
next according to the same pattern.

107
00:05:27.010 --> 00:05:28.280
Chris, go ahead.

108
00:05:28.280 --> 00:05:30.420
&gt;&gt; Chris: It's the score argument.

109
00:05:30.420 --> 00:05:31.710
&gt;&gt; Speaker 1: Score argument.

110
00:05:31.710 --> 00:05:33.500
Which is?

111
00:05:33.500 --> 00:05:35.510
&gt;&gt; Chris: Four.
&gt;&gt; Speaker 1: Four is assigned to?

112
00:05:35.510 --> 00:05:36.580
&gt;&gt; Chris: The score.

113
00:05:36.580 --> 00:05:37.820
&gt;&gt; Speaker 1: To the score?

114
00:05:37.820 --> 00:05:39.210
&gt;&gt; Chris: Property.
&gt;&gt; Speaker 1: Property, perfect.

115
00:05:39.210 --> 00:05:43.040
And then, finally, Michael,
what do we add to this object?

116
00:05:44.150 --> 00:05:45.880
&gt;&gt; Nick: Another property
called increment.

117
00:05:45.880 --> 00:05:47.880
&gt;&gt; Speaker 1: Increment.
&gt;&gt; Nick: That's declared as a function.

118
00:05:47.880 --> 00:05:48.940
&gt;&gt; Speaker 1: Beautiful.

119
00:05:48.940 --> 00:05:53.270
Which is on an object known
as a method in JavaScript.

120
00:05:53.270 --> 00:05:56.018
Okay, there's our perfect object.

121
00:05:56.018 --> 00:05:57.910
It's our dream object.

122
00:05:57.910 --> 00:05:59.060
It has everything we need on it.

123
00:05:59.060 --> 00:06:01.680
All the data representing this using,
yes, we've simplified it.

124
00:06:01.680 --> 00:06:04.420
It's not 50 properties.

125
00:06:04.420 --> 00:06:05.370
And it's got the functionality.

126
00:06:05.370 --> 00:06:07.200
Normally, there would be 50 functions,
100 functions.

127
00:06:07.200 --> 00:06:10.550
But it's got the functionality we
need all bundled on the object.

128
00:06:10.550 --> 00:06:12.780
But where is it?

129
00:06:12.780 --> 00:06:14.140
It's inside the execution context.

130
00:06:14.140 --> 00:06:15.190
So what do we need to do?

131
00:06:15.190 --> 00:06:16.060
Was it David?

132
00:06:16.060 --> 00:06:18.540
David, what do we need to
do to get this object out?

133
00:06:18.540 --> 00:06:19.580
&gt;&gt; Speaker 7: We need to return it.

134
00:06:19.580 --> 00:06:21.030
&gt;&gt; Speaker 1: Return it, perfect.

135
00:06:21.030 --> 00:06:23.575
Return it into what global constant?

136
00:06:23.575 --> 00:06:26.400
&gt;&gt; [INAUDIBLE]
&gt;&gt; Speaker 1: User1.

137
00:06:26.400 --> 00:06:29.980
Perfect, there it is.

138
00:06:31.940 --> 00:06:36.740
Score four, and increment is a function.

139
00:06:38.254 --> 00:06:39.760
&gt;&gt; Speaker 1: Beautiful.
Folk,

140
00:06:39.760 --> 00:06:43.389
this has produced an object
just like we did manually.

141
00:06:44.460 --> 00:06:46.560
We're not gonna go through
calling the function again.

142
00:06:46.560 --> 00:06:50.790
But I'm gonna walk through it
quickly to produce another object so

143
00:06:50.790 --> 00:06:55.160
we can see whether our dream is possible.

144
00:06:55.160 --> 00:07:00.010
Are we able to call increment to
the right-hand side of the dot?

145
00:07:00.010 --> 00:07:04.860
We hope so.
All right, Michael,

146
00:07:04.860 --> 00:07:06.510
talk me through the next line.

147
00:07:06.510 --> 00:07:08.950
We're back in the global
execution context.

148
00:07:08.950 --> 00:07:12.590
We're back into the global,
they call it the global execution context.

149
00:07:12.590 --> 00:07:15.370
What is the next line of code say to do,
Michael?

150
00:07:17.500 --> 00:07:19.940
&gt;&gt; Michael: Create another
user called User2.

151
00:07:19.940 --> 00:07:21.530
&gt;&gt; Speaker 1: Yeah, or
just another object.

152
00:07:23.000 --> 00:07:25.185
User2, which is gonna be the return value.

153
00:07:25.185 --> 00:07:28.713
Sorry object,
another constant would use a two,

154
00:07:28.713 --> 00:07:31.317
is going to be the return
value of calling.

155
00:07:31.317 --> 00:07:31.820
&gt;&gt; Speaker 9: User creator.

156
00:07:31.820 --> 00:07:33.082
&gt;&gt; Speaker 1: User creator.
Okay, so

157
00:07:33.082 --> 00:07:38.534
we're not gonna walk through this
execution context In detail.

158
00:07:38.534 --> 00:07:39.702
So with Julia.

159
00:07:41.279 --> 00:07:44.144
&gt;&gt; Speaker 1: And five.
We're not gonna walk through this

160
00:07:44.144 --> 00:07:46.674
execution context in detail.

161
00:07:46.674 --> 00:07:55.194
But we know it's going to turn out a brand
new object with name Julia, score five.

162
00:07:55.194 --> 00:08:02.570
And a brand new copy of that increment
functionality that was saved.

163
00:08:02.570 --> 00:08:05.370
That means it's literally saved
in the computer's memory,

164
00:08:05.370 --> 00:08:06.830
and we're gonna do the same thing.

165
00:08:06.830 --> 00:08:10.199
We're gonna declare a brand
new increment function and

166
00:08:10.199 --> 00:08:13.003
save it on that object
before we return it out.

167
00:08:14.501 --> 00:08:19.180
&gt;&gt; Speaker 1: And there it is, the brand
new increment method on that object.

168
00:08:20.520 --> 00:08:22.140
But now, we do our check.

169
00:08:22.140 --> 00:08:24.570
David, let's do our check together.

170
00:08:25.990 --> 00:08:28.490
David, can I do my dream?

171
00:08:28.490 --> 00:08:32.560
All I want in my basics of
object-oriented programming

172
00:08:32.560 --> 00:08:37.830
is that my functionality is
available right there on my data.

173
00:08:37.830 --> 00:08:39.560
David, can I do that?

174
00:08:39.560 --> 00:08:44.890
Can I refer to my functionality
to the right-hand side

175
00:08:44.890 --> 00:08:47.150
of the dot and hope it works?

176
00:08:47.150 --> 00:08:50.330
Walk me through the look up
process of JavaScript here, David.

177
00:08:50.330 --> 00:08:52.290
So we have User1.

178
00:08:52.290 --> 00:08:52.900
Where do we look for it?

179
00:08:52.900 --> 00:08:54.100
&gt;&gt; Speaker 10: In the global memory.

180
00:08:54.100 --> 00:08:55.290
&gt;&gt; Speaker 1: In global memory.

181
00:08:55.290 --> 00:08:55.920
Do we find it?

182
00:08:57.160 --> 00:08:58.270
&gt;&gt; Speaker 10: Yes.
&gt;&gt; Speaker 1: We do?

183
00:08:58.270 --> 00:08:58.990
&gt;&gt; Speaker 10: Yes.
&gt;&gt; Speaker 1: And then, what are we

184
00:08:58.990 --> 00:08:59.810
looking for on it?

185
00:08:59.810 --> 00:09:00.710
&gt;&gt; Speaker 10: The increment function.

186
00:09:00.710 --> 00:09:01.510
&gt;&gt; Speaker 1: Do we find it?

187
00:09:01.510 --> 00:09:02.340
&gt;&gt; Speaker 10: Yes.

188
00:09:02.340 --> 00:09:03.060
&gt;&gt; Speaker 1: Beautiful, we do.

189
00:09:03.060 --> 00:09:06.054
We can grab its code and
we can execute it.

190
00:09:06.054 --> 00:09:11.340
Folk, it may seem trivial, but
this is all we really wanna do.

191
00:09:11.340 --> 00:09:13.100
This is all we fundamentally want to do.

192
00:09:14.390 --> 00:09:20.130
But who can tell me, fast, so we can
move on from this terrible approach.

193
00:09:20.130 --> 00:09:23.690
Chris, what makes this approach untenable?

194
00:09:23.690 --> 00:09:24.320
Can you tell me?

195
00:09:25.470 --> 00:09:29.670
What makes this approach such that
we could never in practice do this?

196
00:09:29.670 --> 00:09:31.570
&gt;&gt; Speaker 11: You gotta
call it on every user?

197
00:09:31.570 --> 00:09:32.440
&gt;&gt; Speaker 1: You got, say that again?

198
00:09:32.440 --> 00:09:34.234
&gt;&gt; Speaker 11: Call it on every
user that you wanna create?

199
00:09:37.126 --> 00:09:39.190
&gt;&gt; Speaker 1: Not so
much call it on every user.

200
00:09:39.190 --> 00:09:40.200
Raise hand if you got an idea.

201
00:09:40.200 --> 00:09:41.140
Yes, Seth, go ahead.

202
00:09:41.140 --> 00:09:44.870
&gt;&gt; Seth: The increment method is
stored individually on each object.

203
00:09:44.870 --> 00:09:45.374
&gt;&gt; Speaker 1: Exactly.

204
00:09:45.374 --> 00:09:49.210
We're doing copies of identical
function on every single object.

205
00:09:49.210 --> 00:09:50.340
Now, why not?

206
00:09:50.340 --> 00:09:51.460
I mean, that's kind of what we want.

207
00:09:51.460 --> 00:09:55.420
We wanna be able to refer to that
function to be used on that object.

208
00:09:55.420 --> 00:10:00.353
I wanna be able to do not
just user1.increment,

209
00:10:00.353 --> 00:10:03.860
but also user2.increment.

210
00:10:03.860 --> 00:10:06.500
I wanna be able to call
increment on User2.

211
00:10:06.500 --> 00:10:10.020
So I need it to be on User2.

212
00:10:10.020 --> 00:10:15.480
But this would be
an impossible language design

213
00:10:15.480 --> 00:10:22.040
if we had this as the only way of having
functions be available to an object.

214
00:10:22.040 --> 00:10:24.260
That it had to be stored
directly on the object.

215
00:10:24.260 --> 00:10:25.990
For now, we have one function.

216
00:10:25.990 --> 00:10:29.308
But folk, imagine if we had 100,
200 functions,

217
00:10:29.308 --> 00:10:31.878
all of which we want
users to have access to.

218
00:10:34.453 --> 00:10:37.340
&gt;&gt; Speaker 1: Decrease score,
increase score, increment score.

219
00:10:38.360 --> 00:10:42.910
Decrement score, display user,
add avatar, login user,

220
00:10:42.910 --> 00:10:44.410
authenticate user, logout user.

221
00:10:44.410 --> 00:10:48.550
All of these functions would need to
be available on every single user so

222
00:10:48.550 --> 00:10:52.070
that we could do it to that user
as they play our quiz game.

223
00:10:52.070 --> 00:10:55.018
So we could easily write code
that says where's the function?

224
00:10:55.018 --> 00:10:57.434
Don't worry,
it's right there on the object.

225
00:10:59.491 --> 00:11:02.650
&gt;&gt; Speaker 1: This approach
does serve our purpose.

226
00:11:04.152 --> 00:11:05.930
&gt;&gt; Speaker 1: But
there must be another way.

227
00:11:05.930 --> 00:11:09.920
Now, another language is we have
implementations that avoid all of this.

228
00:11:09.920 --> 00:11:15.220
But JavaScript does not have object
oriented nature of other languages.

229
00:11:15.220 --> 00:11:18.600
So who can intuitively tell me,
not in terms of OOP and

230
00:11:18.600 --> 00:11:22.100
other language implementations, but
just what would be an intuitive way?

231
00:11:22.100 --> 00:11:26.430
How many copies, David, do we really
want of the increment function?

232
00:11:26.430 --> 00:11:27.096
&gt;&gt; Speaker 11: One.
&gt;&gt; Speaker 1: One.

233
00:11:29.996 --> 00:11:32.980
&gt;&gt; Speaker 1: So our dream,
perhaps, would be to have one,

234
00:11:32.980 --> 00:11:38.295
not have increment on User2, not have
it on User500, not have it one User1.

235
00:11:38.295 --> 00:11:41.735
But instead, have it somewhere else.

236
00:11:41.735 --> 00:11:47.450
And JavaScript's interpreter at
the moment at which it tries to make and

237
00:11:47.450 --> 00:11:52.180
use increment, not find it on USer1,
but not panic.

238
00:11:52.180 --> 00:11:55.900
And instead, go and
look in this other object

239
00:11:55.900 --> 00:12:00.260
full of methods where it finds increment.

240
00:12:00.260 --> 00:12:00.760
Perfect.

