WEBVTT

1
00:00:00.000 --> 00:00:02.418
Congratulations for making it so far.

2
00:00:02.418 --> 00:00:04.680
This has been a lot of heavier stuff.

3
00:00:04.680 --> 00:00:09.438
Next up, we're actually gonna kind
of build some stuff together.

4
00:00:09.438 --> 00:00:13.264
It's easiest to do this with
something like StackBlitz.

5
00:00:13.264 --> 00:00:16.774
So if you go to the course website,
you'll see under Building an App.

6
00:00:16.774 --> 00:00:19.052
Now we can go and build an app and

7
00:00:19.052 --> 00:00:23.180
solid generally we have a couple
of ways to get started.

8
00:00:23.180 --> 00:00:27.038
One, the most common one is
we just have templates and

9
00:00:27.038 --> 00:00:32.546
these are built using Vite, most of
our ecosystem's been built with Vite.

10
00:00:32.546 --> 00:00:36.311
We have support for
Rollup and Webpack as well.

11
00:00:36.311 --> 00:00:39.701
But Vite is where all our
starter templates are.

12
00:00:39.701 --> 00:00:43.277
And then we also have starter
kind of meta framework similar to

13
00:00:43.277 --> 00:00:48.091
something like Spell Kit or Next.js that
we're gonna look at a little bit later but

14
00:00:48.091 --> 00:00:50.521
for now we're just gonna keep it simple.

15
00:00:50.521 --> 00:00:55.383
And StackBlitz like luckily has
a very easy way to get started

16
00:00:55.383 --> 00:00:59.304
with solid literally https://solid.new.

17
00:00:59.304 --> 00:01:03.396
And I love this, it starts up so quickly.

18
00:01:03.396 --> 00:01:08.583
It's just like Bam.

19
00:01:08.583 --> 00:01:15.280
So solid.new and
we can get to building an app.

20
00:01:15.280 --> 00:01:17.642
So here we are.

21
00:01:17.642 --> 00:01:22.724
This is a very simple example that we
put in the base template here, very

22
00:01:22.724 --> 00:01:28.501
much inspired by an old project to create
React app where twe had a spinning logo.

23
00:01:28.501 --> 00:01:31.950
And you can get an anatomy for
a basic solid project.

24
00:01:31.950 --> 00:01:36.217
We have our vite.config which
uses our solid plugin and

25
00:01:36.217 --> 00:01:42.138
a few other settings that are specific
to some can make StackBlitz work here.

26
00:01:42.138 --> 00:01:47.511
We have an index html which is
essentially the root of our project.

27
00:01:47.511 --> 00:01:51.802
We just add a script tag that
links to our source route and

28
00:01:51.802 --> 00:01:54.556
then we're pretty much good to go.

29
00:01:54.556 --> 00:01:57.915
This is just the HTML of our page.

30
00:01:57.915 --> 00:02:00.244
And we can call it whatever we want.

31
00:02:00.244 --> 00:02:02.669
This is Solid App, maybe Solid ToDo App.

32
00:02:02.669 --> 00:02:08.256
We're gonna need do to do MVC
because it is admittedly a very good

33
00:02:08.256 --> 00:02:14.683
way of showing specifically the
granularity of how solid projects work.

34
00:02:14.683 --> 00:02:18.809
Right now I just saved
my first file change so

35
00:02:18.809 --> 00:02:22.833
it actually forked it into my own account.

36
00:02:22.833 --> 00:02:27.299
And then inside the project for
now we have some logos, but

37
00:02:27.299 --> 00:02:32.146
the key part is we have an index
which is kind of our entry point.

38
00:02:32.146 --> 00:02:35.214
We haven't had to worry too
much about this so far.

39
00:02:35.214 --> 00:02:39.434
But essentially,
this is where we call our render app call.

40
00:02:39.434 --> 00:02:43.740
And we've mounted to this root element.

41
00:02:43.740 --> 00:02:47.308
In the example earlier, I just passed
app straight in because it's fine.

42
00:02:47.308 --> 00:02:50.142
It's the important thing to know
is that solid's render function

43
00:02:50.142 --> 00:02:53.291
takes a function that then does JSX
passing components fine here as well.

44
00:02:53.291 --> 00:02:57.054
But it's important though,
that it's a function.

45
00:02:57.054 --> 00:03:00.136
And the reason for
that again is the laziness.

46
00:03:00.136 --> 00:03:03.512
We need to make sure that we
set all the proper stuff for

47
00:03:03.512 --> 00:03:07.580
rendering so that basically that
our root is inside and effect.

48
00:03:07.580 --> 00:03:08.639
So the whole system works.

49
00:03:08.639 --> 00:03:13.318
So again, it's the everything is
a function theme you see here.

50
00:03:13.318 --> 00:03:17.251
And what's great about Vite is stuff like
CSS is taking care of us very easily.

51
00:03:17.251 --> 00:03:19.071
You just literally import it.

52
00:03:19.071 --> 00:03:25.960
And like we're essentially off
to the races so to speak, right?

53
00:03:30.906 --> 00:03:36.861
We can just put our CSS directly in here,
mess with it and we can see the impact.

54
00:03:36.861 --> 00:03:40.975
Inside our specific example here,
we're actually playing a bit.

55
00:03:40.975 --> 00:03:44.055
We have index CSS which is normal CSS, and

56
00:03:44.055 --> 00:03:48.638
then we have CSS modules so
that you can also do that approach.

57
00:03:48.638 --> 00:03:52.845
This little demo, it's very basic.

58
00:03:52.845 --> 00:03:54.065
It just puts the spinner on.

59
00:03:54.065 --> 00:03:58.926
But there's on save,
there's hot module reloading and

60
00:03:58.926 --> 00:04:02.681
all the typical stuff
you expect from Vite.

61
00:04:02.681 --> 00:04:06.122
So this is a pretty simple example and

62
00:04:06.122 --> 00:04:10.784
we're gonna use this shell
of foundation to kinda

63
00:04:10.784 --> 00:04:15.564
build on in order to continue
to build our Todo app.

64
00:04:15.564 --> 00:04:17.552
So what are we gonna do first?

65
00:04:17.552 --> 00:04:21.500
Well, I think the first
thing I'm gonna do just so

66
00:04:21.500 --> 00:04:26.670
I don't forget it later because
I always forget the stuff later,

67
00:04:26.670 --> 00:04:32.419
is I'm gonna grab some of that CSS we
need specifically for the Todo app.

68
00:04:32.419 --> 00:04:37.781
And there is a resource folder
in the course site where

69
00:04:37.781 --> 00:04:42.676
I actually have the index html and
the index CSS.

70
00:04:42.676 --> 00:04:45.677
The index html honestly
doesn't have much in it.

71
00:04:45.677 --> 00:04:48.467
We probably don't actually need it

72
00:04:48.467 --> 00:04:52.660
running from this example
because it already works.

73
00:04:52.660 --> 00:04:57.803
But the index CSS,
it's worth grabbing this.

74
00:04:57.803 --> 00:04:59.753
So let's do that, okay.

75
00:05:05.056 --> 00:05:12.445
All right, so copy the index CSS into
the index CSS file in your project, okay?

76
00:05:12.445 --> 00:05:16.121
All right, and then

77
00:05:20.004 --> 00:05:22.215
I'm gonna do a little something
maybe unconventional here.

78
00:05:22.215 --> 00:05:27.183
We'll do some more TypeScript later, but
to keep our first foray into JavaScript

79
00:05:27.183 --> 00:05:31.442
a little simpler, I'm gonna actually
rename this extension to jsx.

80
00:05:31.442 --> 00:05:37.086
It just it'll make my life a little
bit easier right now with it's fine.

81
00:05:37.086 --> 00:05:41.086
We'll get to TypeScript soon enough but

82
00:05:41.086 --> 00:05:45.553
I'm going to just clear that out and
to apps,

83
00:05:45.553 --> 00:05:51.564
I'm gonna kind of blank slate
actually this whole section.

84
00:05:51.564 --> 00:05:54.188
We still need our app obviously but

85
00:05:54.188 --> 00:05:58.816
I'm gonna just wipe this out and
basically return nothing.

86
00:05:58.816 --> 00:06:03.478
We're gonna get back to the basics and
if I save all this and this thing is still

87
00:06:03.478 --> 00:06:07.448
working which of course we should
have a blank page, beautiful.

88
00:06:07.448 --> 00:06:12.300
And just a sanity check
that it's a blank page,

89
00:06:12.300 --> 00:06:17.288
that it's our page,
I'm gonna add an h1 here.

90
00:06:17.288 --> 00:06:20.841
Good you see hot module reloading
working in this environment.

91
00:06:20.841 --> 00:06:25.213
Hello, okay, so we're sanity check,

92
00:06:25.213 --> 00:06:29.079
we are in fact building a solid app.

