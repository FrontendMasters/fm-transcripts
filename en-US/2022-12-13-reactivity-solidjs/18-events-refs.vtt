WEBVTT

1
00:00:00.124 --> 00:00:03.568
Let's pretend we wanted to track
the mouse position on this div.

2
00:00:03.568 --> 00:00:06.670
Well, that's pretty easy to do.

3
00:00:06.670 --> 00:00:11.598
We basically use a convention of
using camelCase on DOM events, so

4
00:00:11.598 --> 00:00:16.530
on and then the DOM events so
you can do on mouse move for lets see on.

5
00:00:16.530 --> 00:00:19.637
It's funny, we actually support both.

6
00:00:19.637 --> 00:00:23.361
But let's do this one
onMouseMove=handleMouseMove and

7
00:00:23.361 --> 00:00:28.149
handleMousemMove in this case is we're
just sending a signal that updates

8
00:00:28.149 --> 00:00:31.190
some x&amp;y coordinates
that we display in here.

9
00:00:31.190 --> 00:00:34.101
And the one we go in here,
unsurprisingly it works.

10
00:00:34.101 --> 00:00:37.933
So important thing to know
is that our event handlers,

11
00:00:37.933 --> 00:00:39.945
they can be inlined as well.

12
00:00:39.945 --> 00:00:44.157
They pass the dominant event and
then you can read the event and

13
00:00:44.157 --> 00:00:46.020
set the appropriate data.

14
00:00:52.044 --> 00:00:53.652
We support a style tag and

15
00:00:53.652 --> 00:00:58.409
it's a little bit different than you
might have seen in some frameworks.

16
00:00:58.409 --> 00:01:03.489
It does support objects, but we actually

17
00:01:03.489 --> 00:01:08.286
rely on standard, DOM, properties.

18
00:01:08.286 --> 00:01:15.263
And this means that we don't camel case.

19
00:01:15.263 --> 00:01:21.936
And instead, what we ended up
doing is we put let's see.

20
00:01:21.936 --> 00:01:29.700
Got a couple extra brackets somewhere
there we go some fun animation.

21
00:01:29.700 --> 00:01:33.065
We actually use stuff like get
dash case for CSS and this this

22
00:01:33.065 --> 00:01:37.394
might seem like an interesting choice and
it also means pixels and whatnot.

23
00:01:37.394 --> 00:01:42.731
But it gives us a lot of control and
flexibility here because

24
00:01:42.731 --> 00:01:48.070
the compiler will actually
output individual style update

25
00:01:48.070 --> 00:01:52.782
commands for DOM, essentially,
per one of these.

26
00:01:52.782 --> 00:01:57.853
So if, say like, one give them updates,
and then the other ones don't, it'll

27
00:01:57.853 --> 00:02:03.014
actually just update the specific CSS
property independently of the other ones.

28
00:02:03.014 --> 00:02:09.926
And we can also support CSS
variables this way we can add, --,

29
00:02:09.926 --> 00:02:17.741
my variable and it's also lines with
stuff like server side rendering.

30
00:02:17.741 --> 00:02:20.618
It helps us with performance because
again, when you're serializing the stuff

31
00:02:20.618 --> 00:02:23.381
into the DOM, we don't want to do all
these like camel case transformation.

32
00:02:23.381 --> 00:02:26.517
So this is performance optimization.

33
00:02:26.517 --> 00:02:29.772
It gives you more flexibility control and

34
00:02:29.772 --> 00:02:33.962
makes a difference on both the client and
the server.

35
00:02:33.962 --> 00:02:38.803
But yeah in this example we're
literally just using set

36
00:02:38.803 --> 00:02:41.481
interval to blow up some text.

37
00:02:44.364 --> 00:02:48.481
Similarly dealing with classes,
you can just use class in solid,

38
00:02:48.481 --> 00:02:50.257
not class name or anything.

39
00:02:50.257 --> 00:02:54.551
It's, we support standard HTML properties.

40
00:02:54.551 --> 00:02:57.186
But we also have an interesting helper,

41
00:02:57.186 --> 00:03:01.688
which lets us kind of shortcut some
of this stuff to do an object form.

42
00:03:01.688 --> 00:03:06.167
So for example so,
instead of doing this foo selected or

43
00:03:06.167 --> 00:03:11.027
this which is pretty commonplace,
we can go classList which

44
00:03:11.027 --> 00:03:16.099
uses the underlying classList
property on the on the element.

45
00:03:16.099 --> 00:03:21.021
And lets us do something
like selected when

46
00:03:21.021 --> 00:03:25.535
essentially current=foo and again,

47
00:03:25.535 --> 00:03:32.932
this is just convenient when you
want to apply multiple styles.

48
00:03:32.932 --> 00:03:35.108
It's not a huge game changer here.

49
00:03:35.108 --> 00:03:39.708
Sorry, it's an object, but

50
00:03:39.708 --> 00:03:47.074
lets us get around certain
amount of overhead.

51
00:03:50.589 --> 00:03:55.408
One thing that's becoming dreadfully
clear to me is that the playground

52
00:03:55.408 --> 00:03:59.595
is much better than the tutorials
because the tutorials seem to

53
00:03:59.595 --> 00:04:02.214
be having a little bit of an issue here.

54
00:04:02.214 --> 00:04:06.411
Okay, and
let me see here because this is a,

55
00:04:06.411 --> 00:04:14.587
selector thing where you basically using
mutual exclusive selectors in this thing.

56
00:04:14.587 --> 00:04:19.503
And essentially, I'm just going to

57
00:04:19.503 --> 00:04:24.894
pop this down into all of these but yeah,

58
00:04:24.894 --> 00:04:32.190
it's just a convenience
it's not groundbreaking but

59
00:04:32.190 --> 00:04:36.788
it's a cool little feature to have

60
00:04:36.788 --> 00:04:41.407
classList, yes boz and bar yeah.

61
00:04:41.407 --> 00:04:45.771
Baz and bar there we go.

62
00:04:48.442 --> 00:04:52.642
Bar and baz [LAUGH] there we go,

63
00:04:52.642 --> 00:04:58.029
all right still working okay, good.

64
00:04:58.029 --> 00:05:03.065
And one of the cool side effects of
it is that we can also use it for

65
00:05:03.065 --> 00:05:08.867
dynamic expressions there's actually
a little thing here on the side,

66
00:05:08.867 --> 00:05:12.026
but we can also choose what class it is.

67
00:05:12.026 --> 00:05:16.557
We can use object notation for JavaScript
and put a signal maybe in here so

68
00:05:16.557 --> 00:05:20.506
you can actually change what
the keys are dynamically as well.

69
00:05:20.506 --> 00:05:26.680
So it's a nice little tool because you
can kind of combine these objects and

70
00:05:26.680 --> 00:05:30.799
kind of describe more
complicated logic with it.

71
00:05:30.799 --> 00:05:35.126
Let's continue refs since
all come in two forms,

72
00:05:35.126 --> 00:05:39.143
and this is how you get
access to a DOM element,

73
00:05:39.143 --> 00:05:43.072
you can obviously just go div=div, right?

74
00:05:43.072 --> 00:05:46.974
But sometimes it's nicer to actually write
your code in like full GSX templates and

75
00:05:46.974 --> 00:05:49.384
not like break everything
out element by element.

76
00:05:49.384 --> 00:05:53.898
So the most common way we
make a ref in solid is

77
00:05:53.898 --> 00:05:57.813
by making a variable like let canvas.

78
00:05:57.813 --> 00:06:02.666
And then we're doing a bunch of
canvas work here in this mount call.

79
00:06:02.666 --> 00:06:05.879
So we're requesting animation frames and
doing a bunch of fun stuff.

80
00:06:05.879 --> 00:06:11.076
But to enable this behavior,
all we have to do is ref=canvas.

81
00:06:11.076 --> 00:06:16.087
And, Did I call it right?

82
00:06:16.087 --> 00:06:19.382
Yeah, let canvas.

83
00:06:19.382 --> 00:06:23.280
Then essentially all
that should happen is.

84
00:06:31.428 --> 00:06:36.817
The variable just gets directly
assigned immediately to here.

85
00:06:43.227 --> 00:06:45.013
To make sure I'm not insane.

86
00:06:52.305 --> 00:06:54.998
This example is actually broken, okay?

87
00:06:54.998 --> 00:06:58.637
For reals, that's not fun.

88
00:07:01.262 --> 00:07:05.903
Looking at the solve one's actually broken
doesn't actually help us here, okay.

89
00:07:05.903 --> 00:07:10.039
I should report this later
we're gonna cut I guess,

90
00:07:10.039 --> 00:07:16.254
don't let's think of a better rough
example really quick so give me a moment.

91
00:07:22.862 --> 00:07:27.840
See if the browser gives me any into
what's going on in here no this

92
00:07:27.840 --> 00:07:31.289
is just the playground
being weird awesome.

93
00:07:31.289 --> 00:07:35.979
Okay, so then we yeah.

94
00:07:54.756 --> 00:07:58.950
I could try and
recreate this like really quickly.

95
00:07:58.950 --> 00:08:04.229
&gt;&gt; Yeah, and this you can just
have the browser the normal.

96
00:08:04.229 --> 00:08:12.673
&gt;&gt; Yeah, it's just gonna see if I can
figure out why this is being weird.

97
00:08:16.903 --> 00:08:17.659
What was it called?

98
00:08:17.659 --> 00:08:18.566
Style.

99
00:08:26.650 --> 00:08:31.153
I wonder if they, okay,
share link refresh.

100
00:08:34.308 --> 00:08:37.925
Interesting.

101
00:08:37.925 --> 00:08:45.693
Okay, there's something wrong with
this example which is interesting.

102
00:08:45.693 --> 00:08:50.676
I don't think it's probably with
debugging it at this moment I mean we

103
00:08:50.676 --> 00:08:54.991
can sanity check that canvas
actually exists at this point.

104
00:08:54.991 --> 00:08:58.759
But yeah, that's a canvas element.

105
00:09:01.059 --> 00:09:05.082
I wonder if this is one of those things
where you're, I'm streaming or something,

106
00:09:05.082 --> 00:09:08.597
and then it's like I'm accessing the 3D
card and it's messing with it or

107
00:09:08.597 --> 00:09:09.236
something.

108
00:09:09.236 --> 00:09:15.184
Because the element is here it is
literally running this routine.

109
00:09:15.184 --> 00:09:19.474
And it's examples not working

110
00:09:19.474 --> 00:09:24.428
which is weird, distort cleanup.

111
00:09:24.428 --> 00:09:27.411
It's yeah, okay, I've got nothing for

112
00:09:27.411 --> 00:09:32.280
this example, unfortunately,
because it just doesn't seem to.

113
00:09:35.385 --> 00:09:39.049
But it's like the vanilla JavaScript
is not working, not the framework.

114
00:09:39.049 --> 00:09:42.412
We actually literally get in here.

115
00:09:42.412 --> 00:09:44.840
Okay, that's unfortunate.

116
00:09:49.953 --> 00:09:54.025
Trying to think of what
I can do here instead,

117
00:09:54.025 --> 00:09:57.465
because this example is just broken.

118
00:09:57.465 --> 00:10:00.359
&gt;&gt; Is the image coming in from that URL?

119
00:10:00.359 --> 00:10:02.967
Can you?

120
00:10:02.967 --> 00:10:04.328
&gt;&gt; That's.
&gt;&gt; That URL.

121
00:10:04.328 --> 00:10:05.280
&gt;&gt; Is that the problem here?

122
00:10:05.280 --> 00:10:06.122
Yeah.

123
00:10:06.122 --> 00:10:07.695
&gt;&gt; I probably.

124
00:10:07.695 --> 00:10:14.093
&gt;&gt; Yeah.

125
00:10:14.093 --> 00:10:17.355
&gt;&gt; Well but just visit the image and
see if it's there.

126
00:10:20.538 --> 00:10:23.198
&gt;&gt; It is there, interesting.

127
00:10:28.331 --> 00:10:32.553
That's so weird, let's see what we
got here because we get the canvas.

128
00:10:32.553 --> 00:10:37.274
We get the reference,
definitely the reference to the canvas.

129
00:10:37.274 --> 00:10:39.285
We get the image data.

130
00:10:47.941 --> 00:10:52.032
I'm supposed to mess with the colors,
that's very disappointing.

131
00:10:52.032 --> 00:10:56.799
This demo is working at one point.

132
00:10:56.799 --> 00:11:01.803
The funny thing is I can teach refs so
that actually,

133
00:11:01.803 --> 00:11:07.377
doing this it just I'm gonna
have to go slightly off script

134
00:11:07.377 --> 00:11:14.110
which is probably fine at this point
still like a very simple example.

135
00:11:14.110 --> 00:11:20.580
&gt;&gt; I got canvas undefined in the on
mount from the fresh refreshing.

136
00:11:20.580 --> 00:11:22.135
&gt;&gt; Okay, let's try that.

137
00:11:30.158 --> 00:11:31.661
Yeah.

138
00:11:36.181 --> 00:11:40.394
&gt;&gt; Person on chat is saying there's
a canvas variable on canvas

139
00:11:40.394 --> 00:11:42.383
API naming online 7 and 9.

140
00:11:46.773 --> 00:11:49.481
I don't know.

141
00:11:49.481 --> 00:11:52.969
&gt;&gt; I think this is fine, yeah and.

142
00:11:52.969 --> 00:11:53.884
&gt;&gt; Yeah, it seems fine.

143
00:11:53.884 --> 00:11:58.688
&gt;&gt; And I'm getting the canvas when I
refresh and this is just a light variable,

144
00:11:58.688 --> 00:12:01.478
so, I don't think Google's catching up.

145
00:12:01.478 --> 00:12:06.308
I mean can we JSON.string.

146
00:12:06.308 --> 00:12:08.975
&gt;&gt; Is it getting the CSS?

147
00:12:08.975 --> 00:12:11.684
&gt;&gt; Yeah,
this is most likely a problem with

148
00:12:11.684 --> 00:12:15.915
the playground processing the CSS
more likely than anything.

149
00:12:15.915 --> 00:12:19.594
Yeah, the canvas is definitely there.

150
00:12:19.594 --> 00:12:24.507
So, yeah, this is yeah,
&gt;&gt; I'm not unsolved,

151
00:12:24.507 --> 00:12:26.067
I see your query params.

152
00:12:26.067 --> 00:12:30.856
&gt;&gt; Yeah, what I'm gonna do I'm
just gonna make this a really

153
00:12:30.856 --> 00:12:36.350
uninteresting example and
just show that we get the canvas [LAUGH].

154
00:12:36.350 --> 00:12:41.828
And leave it at that would
have been cooler with a cool

155
00:12:41.828 --> 00:12:46.694
animation but
I'm just going to just, yeah.

156
00:12:46.694 --> 00:12:48.212
We're just gonna do that.

157
00:12:48.212 --> 00:12:51.467
&gt;&gt; We could take a couple
minute tech break so

158
00:12:51.467 --> 00:12:54.449
you could set up a different example.

159
00:12:54.449 --> 00:12:55.625
&gt;&gt; Yeah, let me.

160
00:12:55.625 --> 00:13:00.131
&gt;&gt; If you feel like.

161
00:13:00.131 --> 00:13:05.750
&gt;&gt; I'm trying to think of something
else because the CSS is gonna be fine,

162
00:13:05.750 --> 00:13:08.007
then it's gonna make that.

163
00:13:08.007 --> 00:13:12.847
&gt;&gt; Well let's, let's take five
&gt;&gt; Breaths, give you a reference

164
00:13:12.847 --> 00:13:17.601
to a native element and
in solid you can do this in two ways.

165
00:13:17.601 --> 00:13:23.133
The easiest way and more straightforward
way is to just create a variable and

166
00:13:23.133 --> 00:13:28.677
this is a normal variable this let canvas
and then all we do is on our element.

167
00:13:28.677 --> 00:13:30.519
We go ref canvas here and

168
00:13:30.519 --> 00:13:36.323
now you will see our nice effects because
we have reference to our canvas and

169
00:13:36.323 --> 00:13:41.133
now one of the sold logos here
is getting animated with color.

170
00:13:41.133 --> 00:13:47.069
But we also have a different
way of using rafts, right?

171
00:13:47.069 --> 00:13:51.442
This works really well when you
want to wait and use it in a mount.

172
00:13:51.442 --> 00:13:55.178
So once it's been connected to the DOM,
see we're using our canvas directly here.

173
00:13:55.178 --> 00:14:01.138
We can also just create
a signal which also works

174
00:14:01.138 --> 00:14:06.353
quite well because sometimes you wanna or

175
00:14:06.353 --> 00:14:11.129
really any function for that matter.

176
00:14:11.129 --> 00:14:15.848
We can use callback refs and this gives
us a little bit more control about how we

177
00:14:15.848 --> 00:14:18.184
assign the ref, which can be useful.

178
00:14:18.184 --> 00:14:22.510
So in this case I'm gonna
change this canvas to,

179
00:14:22.510 --> 00:14:28.537
now it's gonna be a function and
then down here we can go set canvas.

180
00:14:28.537 --> 00:14:33.365
For an example like this,
it's effectively the same thing.

181
00:14:33.365 --> 00:14:38.119
Ref setCanvas and
probably referencing canvas is

182
00:14:38.119 --> 00:14:42.204
a function in multiple places, here, I am

183
00:14:53.036 --> 00:14:54.207
Let's just update them all.

184
00:15:02.128 --> 00:15:03.316
One more,

185
00:15:09.675 --> 00:15:16.048
Important createSignal and
we have the same effect again.

186
00:15:16.048 --> 00:15:18.100
So you have a couple choices here, right?

187
00:15:18.100 --> 00:15:20.599
You can always assign it
directly to the element.

188
00:15:20.599 --> 00:15:25.608
But if you want to keep your JSX together,
you can just assign to a variable or

189
00:15:25.608 --> 00:15:30.161
use a signal if you want to do some
more dynamic stuff with it, right.

190
00:15:38.218 --> 00:15:43.496
And similarly we can actually forward
our refs through components and

191
00:15:43.496 --> 00:15:48.518
we don't actually need much of
a special syntax for that, right?

192
00:15:48.518 --> 00:15:52.666
Now, similar example where we
have all this logic and for

193
00:15:52.666 --> 00:15:57.690
some reason I've broken the canvas
out into a different component.

194
00:16:00.673 --> 00:16:03.021
Okay, in here we have our canvas element.

195
00:16:03.021 --> 00:16:04.846
All we need to do is.

196
00:16:07.911 --> 00:16:15.902
Go ref, props.ref, and it's basically
a special property we know with props.ref.

197
00:16:15.902 --> 00:16:21.172
We can basically if the ref is provided
by the parent like it is here,

198
00:16:21.172 --> 00:16:26.452
which is just this canvas variable
again we can forward it through.

199
00:16:26.452 --> 00:16:32.748
And let's update this URL,
looks this site is down and there we go.

200
00:16:32.748 --> 00:16:34.756
We see our same canvas effect.

201
00:16:34.756 --> 00:16:37.348
So even through components,

202
00:16:37.348 --> 00:16:42.748
we can forward refs simply by
using the props.ref property.

