WEBVTT

1
00:00:00.000 --> 00:00:05.077
The switch component is
actually fairly similar.

2
00:00:05.077 --> 00:00:08.997
See, the problem is without
a switch component,

3
00:00:08.997 --> 00:00:13.196
you might get in a place
like this where you're like,

4
00:00:13.196 --> 00:00:19.563
show when x is bigger than 10, and then
fall back, show if x is smaller than 5.

5
00:00:19.563 --> 00:00:25.561
And then you start having to nest these if
you actually want a bunch of conditions.

6
00:00:25.561 --> 00:00:27.492
And if you're using it's no different,
right?

7
00:00:27.492 --> 00:00:29.413
You have a bunch of question marks, and

8
00:00:29.413 --> 00:00:31.868
this is where things start
getting kind of messy.

9
00:00:31.868 --> 00:00:38.993
So this is where we came up with
these switch and match component.

10
00:00:38.993 --> 00:00:42.383
And it's kind of an interesting pattern
cuz it can show that solid components

11
00:00:42.383 --> 00:00:44.846
are just functions and
literally can return anything.

12
00:00:44.846 --> 00:00:50.109
So what I'm gonna do is instead
of having all of this logic,

13
00:00:50.109 --> 00:00:52.652
we're gonna make a switch.

14
00:00:52.652 --> 00:00:57.550
And then, sorry,
switch takes a fallback and

15
00:00:57.550 --> 00:01:02.449
then each condition
essentially is expressed

16
00:01:02.449 --> 00:01:06.607
through a when condition on the match.

17
00:01:06.607 --> 00:01:09.668
So let me see here, so the final
fallback is this one nested in here,

18
00:01:09.668 --> 00:01:11.459
it actually took me a second to find it.

19
00:01:11.459 --> 00:01:13.843
No, actually, is it this one in here?

20
00:01:13.843 --> 00:01:16.378
No, I think it's this one, okay.

21
00:01:16.378 --> 00:01:21.062
This is kind of the problem of
nesting ternaries or show components.

22
00:01:21.062 --> 00:01:24.464
So we're gonna switch, and

23
00:01:24.464 --> 00:01:29.715
then switch should have matched children.

24
00:01:29.715 --> 00:01:32.521
And we're going to make a few of these,

25
00:01:32.521 --> 00:01:35.764
just kinda move our
logic back around again.

26
00:01:35.764 --> 00:01:41.828
So we want first condition
when x is bigger than 10.

27
00:01:43.990 --> 00:01:50.357
And while this can be a little bit
more verbose to type at first,

28
00:01:50.357 --> 00:01:55.282
the way it lays out works
out relatively nicely,

29
00:01:55.282 --> 00:01:59.745
okay, cuz the logic is more serial, okay?

30
00:01:59.745 --> 00:02:05.418
And then, Match.

31
00:02:05.418 --> 00:02:10.248
Yes, I'm getting all the red lines because
of, I just turn this off for a second.

32
00:02:10.248 --> 00:02:15.154
[LAUGH] Still getting the red lines,
because the fact that it thinks I'm

33
00:02:15.154 --> 00:02:20.816
returning two GSX elements right now, but
I'm using the other one as reference.

34
00:02:20.816 --> 00:02:23.583
Was it when here?

35
00:02:26.067 --> 00:02:31.457
And it's this one.

36
00:02:35.669 --> 00:02:38.442
And then is that all our conditions?

37
00:02:38.442 --> 00:02:42.834
I think so, I think I can get rid
of this original show component.

38
00:02:44.180 --> 00:02:45.581
There's too many of them.

39
00:02:49.130 --> 00:02:55.020
And then, Yeah,

40
00:02:55.020 --> 00:02:58.876
I mean our example never updated the x,
I don't think.

41
00:02:58.876 --> 00:03:03.724
But this shows how we can drastically
compress that logic kind of

42
00:03:03.724 --> 00:03:05.711
using these components.

43
00:03:05.711 --> 00:03:09.295
Essentially, match,
actually, funnily enough,

44
00:03:09.295 --> 00:03:13.515
the way it works is it actually
just returns the prop objects and

45
00:03:13.515 --> 00:03:18.391
it's actually the switch that does
all the reactive logic underneath.

46
00:03:18.391 --> 00:03:21.787
So this is just a very simple pattern for
conditionals,

47
00:03:21.787 --> 00:03:24.254
probably won't dwell on that too much.

48
00:03:24.254 --> 00:03:29.547
Dynamic is another one.

49
00:03:29.547 --> 00:03:31.565
Usually either switch or dynamic,

50
00:03:31.565 --> 00:03:34.727
when someone tries to naively
create routing in solid,

51
00:03:34.727 --> 00:03:38.986
they usually just end up just making
a switch statement or using a dynamic.

52
00:03:38.986 --> 00:03:43.704
Cuz you can basically have the pieces to
create a very simple router doing that.

53
00:03:43.704 --> 00:03:48.548
But, well,
switch works perfectly fine in this case,

54
00:03:48.548 --> 00:03:53.498
where we're going switch
fallback show the blue thing,

55
00:03:53.498 --> 00:03:56.915
otherwise it's a red and green thing.

56
00:03:56.915 --> 00:04:01.016
So you can see, as I change this,
it just does the switch.

57
00:04:01.016 --> 00:04:05.855
We can also simplify this
a significant bit if we could just

58
00:04:05.855 --> 00:04:10.915
look up the component essentially
from a lookup table here.

59
00:04:10.915 --> 00:04:12.080
So I have options here.

60
00:04:12.080 --> 00:04:17.699
So we can just basically dynamic,

61
00:04:17.699 --> 00:04:22.747
and I'm just going to do that.

62
00:04:22.747 --> 00:04:27.048
And then dynamic has a component property
where you can actually just put it in.

63
00:04:27.048 --> 00:04:28.116
So in this case, what was it?

64
00:04:28.116 --> 00:04:33.311
It was options and our selected value.

65
00:04:33.311 --> 00:04:38.391
So instead of writing all these
equality checks yourself,

66
00:04:38.391 --> 00:04:41.343
you can do this and get rid of that.

67
00:04:41.343 --> 00:04:47.819
And now, this component will be whatever
this component is that we pass the props.

68
00:04:47.819 --> 00:04:52.344
And the way this works is you can actually
pass other properties here, like whatever

69
00:04:52.344 --> 00:04:56.247
properties you wanna pass to that
component can also just be added to it.

70
00:04:56.247 --> 00:05:00.053
So you have the ability to
basically just push it down.

71
00:05:00.053 --> 00:05:05.904
And in this case, we're using components
here, so that we have our working example.

72
00:05:05.904 --> 00:05:10.513
But dynamic could also, I don't know,
we could add something here like,

73
00:05:10.513 --> 00:05:11.986
I don't know, other.

74
00:05:11.986 --> 00:05:16.857
And we can go div, let's say.

75
00:05:16.857 --> 00:05:20.515
And we're not gonna really see div,

76
00:05:20.515 --> 00:05:26.415
I'm trying to give us something
visual that we can see, but

77
00:05:26.415 --> 00:05:33.646
essentially, It will render.

78
00:05:33.646 --> 00:05:38.354
Actually, We can kinda cheat this,
can't we?

79
00:05:40.765 --> 00:05:47.401
Children, I mean, I could also just pass
this as children, but let's just do this.

80
00:05:50.146 --> 00:05:52.433
These components that we have red and
blue thing,

81
00:05:52.433 --> 00:05:55.760
they don't do anything with children,
so I'm just kinda cheating it.

82
00:05:55.760 --> 00:06:00.355
But if I pass children through here,
the div should get the child.

83
00:06:00.355 --> 00:06:04.317
So then it's a div with a hello.

84
00:06:04.317 --> 00:06:11.785
So yeah, you can use this both to render
components or dynamic elements, okay?

85
00:06:11.785 --> 00:06:16.129
And [SOUND] ErrorBoundary,

86
00:06:18.911 --> 00:06:21.617
I love this example, cuz it's silly,

87
00:06:21.617 --> 00:06:27.193
it just make a component that throws
an error, obviously, never getting here.

88
00:06:27.193 --> 00:06:30.584
What error boundary lets us do is
somewhere higher up in the hierarchy

89
00:06:30.584 --> 00:06:31.172
of our app.

90
00:06:31.172 --> 00:06:34.848
And I'm gonna actually wrap this here, cuz
I don't wanna interfere with before and

91
00:06:34.848 --> 00:06:37.038
after, but
we could wrap our whole thing in here.

92
00:06:37.038 --> 00:06:42.277
But ErrorBoundary gives us a way
that if there's any errors that

93
00:06:42.277 --> 00:06:47.523
are throwing during rendering,
it basically just fix it here.

94
00:06:47.523 --> 00:06:51.564
It contain this error from Broken and
still shows before and after.

95
00:06:51.564 --> 00:06:54.654
And we can provide a fallback to it,

96
00:06:54.654 --> 00:06:59.702
where we can put something else in,
like, I don't know,

97
00:06:59.702 --> 00:07:05.381
we can go, we can just put in like,
it doesn't actually matter.

98
00:07:05.381 --> 00:07:09.503
First thing we can do is just put in
a string and just be like, Error, right?

99
00:07:09.503 --> 00:07:14.035
But we can also get the error
passed in as a function or

100
00:07:14.035 --> 00:07:20.215
we pass a function to this, and
then we can actually display the error,

101
00:07:20.215 --> 00:07:25.273
right, so that way we can style
it from the error message.

102
00:07:25.273 --> 00:07:28.998
And we even have the ability
in here to pass,

103
00:07:28.998 --> 00:07:33.830
the second argument's actually a reset,
which will try

104
00:07:33.830 --> 00:07:39.183
the ErrorBoundary again assuming
this condition is changed.

105
00:07:39.183 --> 00:07:42.221
But yeah, this is basically ErrorBoundary.

106
00:07:42.221 --> 00:07:49.298
So you can see it's basically another
conditional rendering mechanism.

