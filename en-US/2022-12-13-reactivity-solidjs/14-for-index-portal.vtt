WEBVTT

1
00:00:00.000 --> 00:00:03.819
Let me show you four next,
cuz four is one of my my favorite.

2
00:00:03.819 --> 00:00:06.938
And yeah, what are we doing here?

3
00:00:06.938 --> 00:00:12.538
Yes, we have a list of
data that it signals.

4
00:00:12.538 --> 00:00:14.717
Apparently these are CATS.

5
00:00:14.717 --> 00:00:19.951
And we want to actually
iterate over them and

6
00:00:19.951 --> 00:00:25.756
show this list of CATS and
a link to them in the UI.

7
00:00:25.756 --> 00:00:29.661
So essentially,

8
00:00:29.661 --> 00:00:35.394
four is the way we do this.

9
00:00:35.394 --> 00:00:41.523
The syntax for four is here,
let's do this.

10
00:00:41.523 --> 00:00:47.502
Okay, and then for

11
00:00:47.502 --> 00:00:51.613
each CATS and

12
00:00:51.613 --> 00:00:56.473
then CAT and I.

13
00:00:56.473 --> 00:01:01.846
And there's a reason I'm
showing this cuz there

14
00:01:01.846 --> 00:01:09.196
is something special about the way
that we handle indexes, okay?

15
00:01:09.196 --> 00:01:11.097
Let's get this specific data.

16
00:01:11.097 --> 00:01:15.521
First of all,
CAT is going to just be the item directly.

17
00:01:15.521 --> 00:01:21.631
So in this case,
it is not a signal being passed in.

18
00:01:21.631 --> 00:01:25.732
So we need to change this up a bit so

19
00:01:25.732 --> 00:01:32.624
garfield is gonna be just our
CAT who has a name, right?

20
00:01:32.624 --> 00:01:37.710
But interestingly, Our index I,

21
00:01:37.710 --> 00:01:43.046
is a function, is a signal, and
you might be wondering why is that?

22
00:01:43.046 --> 00:01:47.309
Well, it's because if you think about it,
the list is keyed.

23
00:01:47.309 --> 00:01:51.276
So the item itself can never change for
those DOM nodes.

24
00:01:51.276 --> 00:01:55.269
But it can change position in the list.

25
00:01:55.269 --> 00:01:57.409
So the index can change.

26
00:01:57.409 --> 00:02:00.611
And this kind of helps you
understand a bit how solid renders

27
00:02:00.611 --> 00:02:03.236
because it means that as
we add items to the list,

28
00:02:03.236 --> 00:02:07.099
we never rerun that function for
the items that already exist, right?

29
00:02:07.099 --> 00:02:12.019
We might update the index and
cause this specific text node update, but

30
00:02:12.019 --> 00:02:16.537
we're never gonna rerun the items
that we've already created.

31
00:02:16.537 --> 00:02:22.363
So for this reason the index is
the only thing that can change,

32
00:02:22.363 --> 00:02:26.520
so it's a signal where
the other one is not.

33
00:02:26.520 --> 00:02:32.284
And as you may have guessed for
the index component,

34
00:02:32.284 --> 00:02:35.690
it's actually the opposite,

35
00:02:35.690 --> 00:02:40.144
which is why there's two components and

36
00:02:40.144 --> 00:02:44.860
why we didn't just roll
these into the same

37
00:02:44.860 --> 00:02:49.461
thing cuz index each CATS and I'm gonna.

38
00:02:49.461 --> 00:02:57.080
All right, When we do it this time,

39
00:02:57.080 --> 00:03:05.562
get little, We pass in our CAT and I.

40
00:03:14.402 --> 00:03:18.987
While it's very similar,
the difference this time

41
00:03:18.987 --> 00:03:23.569
is now CAT is a function with a name,
it's a signal,

42
00:03:23.569 --> 00:03:28.585
because the item can change but
the index never changes.

43
00:03:28.585 --> 00:03:32.444
And in this case,
this is simply just i plus one.

44
00:03:32.444 --> 00:03:37.312
So Little subtle difference here,
but if you think about it from

45
00:03:37.312 --> 00:03:42.195
an optimization standpoint,
it actually makes a lot of sense.

46
00:03:42.195 --> 00:03:46.766
I admit 90% of the time you're just gonna
use for you're not gonna use index.

47
00:03:46.766 --> 00:03:49.510
It's very special cases where
you're gonna use index.

48
00:03:49.510 --> 00:03:53.153
Your keyed is good, there's a reason why
frameworks complain at you when you don't

49
00:03:53.153 --> 00:03:54.189
put your keys on there.

50
00:03:54.189 --> 00:03:57.129
Every framework needs to be keyed,
there's no exception.

51
00:03:57.129 --> 00:04:01.000
If a framework doesn't have keyed and
they're not complaining at you they're

52
00:04:01.000 --> 00:04:04.480
just not warning you about something
that's actually a real concern.

53
00:04:04.480 --> 00:04:10.755
But this is control flow
essentially in solid.

54
00:04:10.755 --> 00:04:15.053
One other one that I did not show off yet,
because it's kinda specific.

55
00:04:15.053 --> 00:04:17.093
Let's see, what did I show here?

56
00:04:17.093 --> 00:04:20.142
Yeah, I mentioned suspense already,
which we'll cover later.

57
00:04:20.142 --> 00:04:23.151
But we also have portals.

58
00:04:23.151 --> 00:04:26.100
Portals are.

59
00:04:26.100 --> 00:04:29.081
&gt;&gt; Is there any way you
can bump the problem.

60
00:04:29.081 --> 00:04:33.780
&gt;&gt; One more, yes.

61
00:04:33.780 --> 00:04:40.296
Portals are a way of basically moving
elements out of the main flow.

62
00:04:40.296 --> 00:04:45.135
This is helpful for things like modals
where you wanna be able to Insert stuff

63
00:04:45.135 --> 00:04:47.554
like hire out of the Zed index order and

64
00:04:47.554 --> 00:04:50.899
just like not have to worry
about in the normal flow.

65
00:04:50.899 --> 00:04:56.137
And for that reason,
we chose an interesting API.

66
00:04:56.137 --> 00:04:58.336
We chose to go with components cuz
everything is all its components.

67
00:04:58.336 --> 00:05:02.851
So essentially, in this example, we have
some text and we have this kind of pop up,

68
00:05:02.851 --> 00:05:05.574
but it's like all part of
this kind of same thing.

69
00:05:05.574 --> 00:05:09.082
And what we're gonna do is
we're gonna say actually,

70
00:05:09.082 --> 00:05:11.379
we want this pop up to be in a portal.

71
00:05:11.379 --> 00:05:16.371
So we're literally going to

72
00:05:16.371 --> 00:05:21.572
move it here and do this here.

73
00:05:21.572 --> 00:05:25.965
And the example a little bit small here,
you can't see it.

74
00:05:25.965 --> 00:05:29.011
But yeah, essentially we've
pulled it out of the flow.

75
00:05:29.011 --> 00:05:35.949
It's easier to see this when you actually
look at the the DOM here, but you know it.

76
00:05:35.949 --> 00:05:40.408
I think you guys will trust me when I say
that this is now inserting the portal.

77
00:05:40.408 --> 00:05:41.138
Well, you know what?

78
00:05:41.138 --> 00:05:41.666
Never mind.

79
00:05:41.666 --> 00:05:44.036
Let's see if we can actually do this.

80
00:05:44.036 --> 00:05:49.558
Dom, did you do live up?

81
00:05:49.558 --> 00:05:51.558
Up continue.

82
00:05:51.558 --> 00:05:59.437
You can see that it's now been
pulled out from the rest of the app.

83
00:05:59.437 --> 00:06:05.761
Essentially, we have just
some text inside a div and

84
00:06:05.761 --> 00:06:10.373
then the portal is over here, right?

85
00:06:10.373 --> 00:06:13.852
Sorry, I know this one small
after bumping up the text size.

86
00:06:13.852 --> 00:06:15.829
I didn't actually help with this but

87
00:06:15.829 --> 00:06:18.392
essentially it's been
pulled out of the flow.

88
00:06:18.392 --> 00:06:19.903
So useful for modals.

89
00:06:19.903 --> 00:06:22.830
You can also do stuff like set
what the mount element is.

90
00:06:22.830 --> 00:06:26.693
You can insert basically anywhere you
can even insert in the head with it.

91
00:06:26.693 --> 00:06:31.041
So it's a very powerful mechanism
that's very web centric.

92
00:06:31.041 --> 00:06:36.002
The other control flows that I covered
work on any of our platforms they work

93
00:06:36.002 --> 00:06:38.127
on native or they work in WebGL or

94
00:06:38.127 --> 00:06:43.108
whatever whereas portal is very specific
to the platform that you're on.

