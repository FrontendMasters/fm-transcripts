WEBVTT

1
00:00:00.000 --> 00:00:02.351
Our journey today starts with reactivity.

2
00:00:02.351 --> 00:00:06.111
And that's really the update core for
pretty much any UI framework.

3
00:00:06.111 --> 00:00:09.938
And in the case of SolidJS is actually
the single kind of driving force.

4
00:00:09.938 --> 00:00:13.432
Understanding reactivity is
really understanding SolidJS.

5
00:00:13.432 --> 00:00:14.976
So that's why we start here.

6
00:00:14.976 --> 00:00:16.790
So what is reactive programming?

7
00:00:16.790 --> 00:00:20.650
It's actually a lot of different
things to a lot of different people.

8
00:00:20.650 --> 00:00:25.949
Not to mention, it's become kind of
a buzzword for the last couple years.

9
00:00:25.949 --> 00:00:31.660
It is actually a bit tricky to nail down,
which is why I love this comic.

10
00:00:31.660 --> 00:00:36.793
Because I think it's fair to say
that there's a lot of confusion

11
00:00:36.793 --> 00:00:43.649
with the topic and it's sometimes because
it's in some ways simple hard to explain.

12
00:00:43.649 --> 00:00:46.672
Honestly, I've been trying to
explain this to people for years and

13
00:00:46.672 --> 00:00:47.795
I still have a hard time.

14
00:00:47.795 --> 00:00:55.554
So here we are and the problem is looking
at the answer doesn't really help.

15
00:00:55.554 --> 00:00:57.606
I mean, there's a lot of text
not to worry about it too much.

16
00:00:57.606 --> 00:01:00.857
But if you go to Wikipedia, and it's like
in computing reactive programming is

17
00:01:00.857 --> 00:01:03.672
a declarative programming paradigm
concerned with data streams and

18
00:01:03.672 --> 00:01:04.706
propagation of change.

19
00:01:04.706 --> 00:01:08.009
With this paradigm,
it is possible expressed static or

20
00:01:08.009 --> 00:01:10.478
dynamic data streams with ease and also.

21
00:01:10.478 --> 00:01:14.546
I'm sorry, this for me at least
this doesn't say anything to me.

22
00:01:14.546 --> 00:01:18.561
And you keep on looking around
a bit more and you're like, okay?

23
00:01:18.561 --> 00:01:22.515
Stack Overflow, well, this like
don't worry about the blob of text.

24
00:01:22.515 --> 00:01:27.670
But if someone goes and gives you a full
history of functional reactive programming

25
00:01:27.670 --> 00:01:32.175
in academia and talks about various
papers that as historical markers.

26
00:01:32.175 --> 00:01:34.911
There's also something called
the reactive manifesto,

27
00:01:34.911 --> 00:01:37.098
which probably might
sound good to your boss.

28
00:01:37.098 --> 00:01:42.020
It's about how to make systems that are
reactive from like a development planning

29
00:01:42.020 --> 00:01:42.957
perspective.

30
00:01:42.957 --> 00:01:45.530
There's also reactivity used for
responsive design.

31
00:01:45.530 --> 00:01:48.745
The word kinda doesn't
mean anything anymore.

32
00:01:48.745 --> 00:01:53.750
I'm gonna try and focus on the programming
paradigm, and more specifically

33
00:01:53.750 --> 00:01:58.370
the programming paradigm that you
find commonly in the UI frameworks.

34
00:01:58.370 --> 00:02:03.120
This is just as I said,
it's very hard to find a specific answer.

35
00:02:03.120 --> 00:02:06.205
So I tried to come up with my own,
it is not perfect.

36
00:02:06.205 --> 00:02:09.599
But this is the best I've come with so
far.

37
00:02:09.599 --> 00:02:12.903
This is probably too generic,
it's not amazing.

38
00:02:12.903 --> 00:02:18.200
But it's kind of hard to define
such loosely defined terms.

39
00:02:18.200 --> 00:02:22.911
So for me reactivity is to declaratively
express the relationship between values

40
00:02:22.911 --> 00:02:24.285
that change over time.

41
00:02:24.285 --> 00:02:26.240
What do I mean by that?

42
00:02:26.240 --> 00:02:28.775
See the problem with this definition
is I still need an explanation.

43
00:02:28.775 --> 00:02:32.144
The way I think about it is like
a system of live equations.

44
00:02:32.144 --> 00:02:36.146
See like a normal assignment
represents like a single point of time,

45
00:02:36.146 --> 00:02:39.672
you say that after this happens
a reflects the sum of b plus c.

46
00:02:39.672 --> 00:02:42.745
But if b or c change,
then you do another assignment.

47
00:02:42.745 --> 00:02:46.145
This is just kind of standard algebra,
so to speak.

48
00:02:46.145 --> 00:02:47.866
This relationship does not hold.

49
00:02:47.866 --> 00:02:51.968
But reactive programming is a programming
paradigm around modeling your system based

50
00:02:51.968 --> 00:02:53.493
on rules so that this does hold.

51
00:02:53.493 --> 00:02:57.167
So that at any point in the future if b or
c updates,

52
00:02:57.167 --> 00:03:02.083
a is also updated and you've seen
this all before in application.

53
00:03:02.083 --> 00:03:05.942
The spreadsheet is probably the most
common one that kind of helps people think

54
00:03:05.942 --> 00:03:08.172
about it like if you
have equations in cells.

55
00:03:08.172 --> 00:03:13.505
You update one cell, it immediately
updates in the other location.

56
00:03:13.505 --> 00:03:17.523
In JavaScript, reactivity is kinda
come out in two forms primarily.

57
00:03:17.523 --> 00:03:22.321
And it's Interesting both of these kinda
came out of Microsoft in the mid 2000s.

58
00:03:22.321 --> 00:03:25.441
Basically, there's the first type
here that I'm gonna mention,

59
00:03:25.441 --> 00:03:29.174
which is what we're gonna focus on today,
which I call fine-grained signals.

60
00:03:29.174 --> 00:03:33.936
It's a simple event emitters that hold a
value that represent that value over time.

61
00:03:33.936 --> 00:03:38.360
The key part to take away here is
that it's about a primitive that owns

62
00:03:38.360 --> 00:03:39.133
the value.

63
00:03:39.133 --> 00:03:41.860
You can think of it as a variable or
as a value.

64
00:03:41.860 --> 00:03:44.689
The other one, Reactive Streams or Rx,

65
00:03:44.689 --> 00:03:47.694
which in a lot of circles
are more popular.

66
00:03:47.694 --> 00:03:49.619
If you've heard of RxJS or

67
00:03:49.619 --> 00:03:55.052
RxJava is a series a collection of data
events that are emitted over time.

68
00:03:55.052 --> 00:04:00.920
There's a lot of overlap between these
concepts and between these approaches.

69
00:04:00.920 --> 00:04:04.821
But because they're kinda set
up to solve different problems,

70
00:04:04.821 --> 00:04:08.011
I'm only really gonna focus
on the first one today.

71
00:04:08.011 --> 00:04:11.482
The second one is better for
async transformations,

72
00:04:11.482 --> 00:04:16.043
values that change over time and
that's why we see a lot on the server.

73
00:04:16.043 --> 00:04:17.790
The first one is about synchronization.

74
00:04:17.790 --> 00:04:22.129
And synchronization is very important for
UI frameworks.

75
00:04:22.129 --> 00:04:26.077
And this is why we like
fine-grained reactive programming.

76
00:04:26.077 --> 00:04:27.834
First of all, it's declarative.

77
00:04:27.834 --> 00:04:29.547
I mean, most reactive programming is.

78
00:04:29.547 --> 00:04:32.364
That means relationships are set once and
then executed.

79
00:04:32.364 --> 00:04:35.390
You can describe the behavior
rather than the implementation.

80
00:04:35.390 --> 00:04:36.983
It's also composable.

81
00:04:36.983 --> 00:04:43.982
It's easy to kinda build higher level
behaviors, wrap them and modularize them.

82
00:04:43.982 --> 00:04:48.879
But the main reason that I like
fine-grained reactivity is because of

83
00:04:48.879 --> 00:04:50.790
the language aspect of it.

84
00:04:50.790 --> 00:04:54.126
There's really only three
concepts you need to know.

85
00:04:54.126 --> 00:04:58.910
You need to know about signals, which
are this observable state that updates.

86
00:04:58.910 --> 00:05:02.790
You need to know about derivations,
which are these computed values and

87
00:05:02.790 --> 00:05:05.025
then you need to know about side effects.

88
00:05:05.025 --> 00:05:08.353
That's like when you console.log
something or render something.

89
00:05:08.353 --> 00:05:12.289
It's very convenient, if you've ever
used or seen something like RxJS,

90
00:05:12.289 --> 00:05:13.981
which has a different purpose.

91
00:05:13.981 --> 00:05:18.847
There's like over 50 or 70 different
operators to interact with this.

92
00:05:18.847 --> 00:05:22.093
What's really nice about reactivity,

93
00:05:22.093 --> 00:05:27.065
is you can basically just write
normal looking expressions.

94
00:05:27.065 --> 00:05:32.251
And that's what we're gonna look
at here because this is not new.

95
00:05:32.251 --> 00:05:33.986
Some of this might even sound familiar and

96
00:05:33.986 --> 00:05:35.928
you might have seen in
some other frameworks.

97
00:05:35.928 --> 00:05:39.026
I'm gonna show a few examples
of it in different frameworks.

98
00:05:39.026 --> 00:05:44.782
So you can get some familiarity here, see
if kinda it ties it all together for you.

99
00:05:44.782 --> 00:05:48.225
I just wanna emphasize how
widespread these ideas are,

100
00:05:48.225 --> 00:05:50.871
especially from a language perspective.

101
00:05:50.871 --> 00:05:55.868
So I mentioned this one before,
my old favorite KnockoutJS, back in 2010,

102
00:05:55.868 --> 00:05:58.668
kind of introduced this
kind of reactivity.

103
00:05:58.668 --> 00:06:04.575
And it has different names, they called
their primitives observables and

104
00:06:04.575 --> 00:06:06.928
computed and pure computed.

105
00:06:06.928 --> 00:06:11.536
And this is lovely like ES5
style JavaScript with this.

106
00:06:11.536 --> 00:06:16.100
You can kinda see that it had
this kind of idea of like

107
00:06:16.100 --> 00:06:20.666
having like first name and
last name and full name,

108
00:06:20.666 --> 00:06:25.989
all being kind of built from
basically a special data type.

109
00:06:25.989 --> 00:06:28.052
Move forward a few years and

110
00:06:28.052 --> 00:06:34.075
we see reactivity make a bit of a comeback
in React around 2015, with MobX.

111
00:06:34.075 --> 00:06:36.572
This time they took a slightly
different approach.

112
00:06:36.572 --> 00:06:41.465
They still call their stuff observable,
but now there is a decorators doing it.

113
00:06:41.465 --> 00:06:44.836
So they said that hey,
this component is the observer or

114
00:06:44.836 --> 00:06:46.569
in our case our side effect.

115
00:06:46.569 --> 00:06:50.437
And then they annotated
different variables to say that

116
00:06:50.437 --> 00:06:54.483
hey this is React like seconds
past here is an observable.

117
00:06:56.351 --> 00:07:03.118
Svelte 2019, four years later,
they did a very minimalist syntax.

118
00:07:03.118 --> 00:07:07.524
What we see here is in fact their let
variable is actually very special.

119
00:07:07.524 --> 00:07:10.349
It's not a normal JavaScript let,
it's actually a signal or

120
00:07:10.349 --> 00:07:12.047
a reactive variable under the hood.

121
00:07:12.047 --> 00:07:17.185
And they use $ signs to indicate
that these are derived or

122
00:07:17.185 --> 00:07:22.765
computed values and
continuing this trend Vue Composition.

123
00:07:22.765 --> 00:07:29.040
They use things like ref and
reactive to define these variables.

124
00:07:29.040 --> 00:07:32.719
And this is what I would focus on here.

125
00:07:32.719 --> 00:07:36.121
These frameworks are actually still based
on based around these three language

126
00:07:36.121 --> 00:07:37.650
features that I'm talking about.

127
00:07:37.650 --> 00:07:41.962
They have other APIs you can look at it,
but you're gonna find in all of them

128
00:07:41.962 --> 00:07:45.670
you're gonna find a reactive atom or
that signal, that state.

129
00:07:45.670 --> 00:07:47.873
You're gonna find a derived value and
you're gonna find effects.

130
00:07:47.873 --> 00:07:51.064
It's all the same kind of language and

131
00:07:51.064 --> 00:07:55.662
I've got one more example for
you kind of think about.

132
00:07:55.662 --> 00:08:00.321
React has those three primitives too,
useState, useMemo, useEffect.

133
00:08:00.321 --> 00:08:04.142
So I often like posing this
question is React reactive,

134
00:08:04.142 --> 00:08:08.208
is even been some discussion
acknowledgement from the core

135
00:08:08.208 --> 00:08:12.700
team in the past that React isn't
like purely a reactive system.

136
00:08:12.700 --> 00:08:14.853
But this is a pretty nuanced discussion.

137
00:08:14.853 --> 00:08:15.966
And in my opinion,

138
00:08:15.966 --> 00:08:20.499
React has every right to claim to being
as reactive as something like Svelte.

139
00:08:20.499 --> 00:08:23.283
Both on their data change or
their primitives,

140
00:08:23.283 --> 00:08:27.609
they actually trigger an invalidation
that causes a component to rerun.

141
00:08:27.609 --> 00:08:31.662
Some people might get hung up on the fact
that, in some frameworks it's magical.

142
00:08:31.662 --> 00:08:34.736
You just use an assignment,
other ones you call set state.

143
00:08:34.736 --> 00:08:41.504
But mechanically,
we're talking about these same language.

144
00:08:41.504 --> 00:08:46.155
So while I'm gonna admit that React
is not like the reactivity that we're

145
00:08:46.155 --> 00:08:51.107
gonna be covering today mechanically,
we are seeing this sort of convergence

146
00:08:51.107 --> 00:08:55.701
on the language of user interfaces,
which I think is very interesting.

147
00:08:55.701 --> 00:08:58.425
And something kinda keep in the back
of your mind as we continue through

148
00:08:58.425 --> 00:08:59.032
this session.

