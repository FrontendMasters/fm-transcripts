WEBVTT

1
00:00:00.000 --> 00:00:02.815
Let's actually see these
together in action.

2
00:00:02.815 --> 00:00:04.302
So I got one more demo.

3
00:00:04.302 --> 00:00:06.371
I'm gonna use StackBlitz again.

4
00:00:06.371 --> 00:00:11.109
We're actually gonna go a little bit
different here I have this link/bear but

5
00:00:11.109 --> 00:00:15.846
for the sake of your sanity and time what
we're gonna do is actually go/Hacker

6
00:00:15.846 --> 00:00:19.256
News because we're just
gonna jump straight through.

7
00:00:19.256 --> 00:00:21.682
You can also do it by the CLI.

8
00:00:21.682 --> 00:00:28.871
And if you do the CLI, the prompts will
ask you what sample project you wanna do,

9
00:00:28.871 --> 00:00:32.948
but we're gonna go
straight to Hacker News so

10
00:00:32.948 --> 00:00:37.777
that we can generate our
project straight from this is

11
00:00:37.777 --> 00:00:41.891
one of the coolest
things about StackBlitz.

12
00:00:41.891 --> 00:00:47.241
Even in a mono repo, you can pull
example project straight out and

13
00:00:47.241 --> 00:00:49.685
get the latest version here.

14
00:00:49.685 --> 00:00:54.487
So let me introduce you to Solid Start or
SSR framework and

15
00:00:54.487 --> 00:01:01.305
introduce you to one of my favorite demos
of all time, which is Hacker News demo.

16
00:01:01.305 --> 00:01:05.872
I've built this demo in
pretty much every framework.

17
00:01:05.872 --> 00:01:12.346
So this is one that I am
relatively familiar with.

18
00:01:12.346 --> 00:01:16.992
So, again, I wanna emphasize
this right off the start here.

19
00:01:16.992 --> 00:01:18.730
This is just BT again.

20
00:01:18.730 --> 00:01:23.416
I'm very excited about what we can do
here with BT cuz again in this case it's

21
00:01:23.416 --> 00:01:27.024
the Solid Start plugin,
not just the plain solid plugin.

22
00:01:27.024 --> 00:01:30.418
But Solid Start plugin is just
a collection of plugins and those

23
00:01:30.418 --> 00:01:34.530
plugins can be produced independently and
can be used in any solid project.

24
00:01:34.530 --> 00:01:38.961
But the truth matters Solid Start is
a fairly powerful setup in that you can do

25
00:01:38.961 --> 00:01:42.148
client side rendering like
we've been doing all day or

26
00:01:42.148 --> 00:01:44.170
you can do Server Side Rendering.

27
00:01:44.170 --> 00:01:45.665
The default here is Server Side Rendering.

28
00:01:45.665 --> 00:01:48.796
So this is a Server Side Rendered
app with client navigation.

29
00:01:48.796 --> 00:01:53.373
So when we load the page we
initially loaded from the server and

30
00:01:53.373 --> 00:01:58.830
then as we navigate this is client side
navigating between our stories and

31
00:01:58.830 --> 00:02:02.879
then we can go in look at,
compressed some comments and

32
00:02:02.879 --> 00:02:05.449
basically have our application.

33
00:02:05.449 --> 00:02:10.589
So the reason I wanted to show this off
obviously though is I wanted to show

34
00:02:10.589 --> 00:02:16.083
off how routing works in solid and kind
of get a feel for the data loading APIs.

35
00:02:16.083 --> 00:02:21.261
Solid Start Project,
instead of having index.HTML like

36
00:02:21.261 --> 00:02:26.977
we were looking at before,
We bring our index HTML into the JSX.

37
00:02:26.977 --> 00:02:30.845
It gives us just a little bit more control
and you can see some default setup here

38
00:02:30.845 --> 00:02:34.320
where we have error boundaries and
suspense kind of wrapping our app.

39
00:02:34.320 --> 00:02:37.822
And user developers like yourselves
could go in and put in your own suspense

40
00:02:37.822 --> 00:02:41.545
boundaries and error boundaries where you
need to but this is a good sane default

41
00:02:41.545 --> 00:02:45.234
that means like if something happens
wrong somewhere we'll catch it for you.

42
00:02:45.234 --> 00:02:48.581
Or something is a sync like
it's you loadings lazy route or

43
00:02:48.581 --> 00:02:51.531
something we have a default
to handle this for you.

44
00:02:51.531 --> 00:02:56.002
In our case we just added a fall back
here which shows this loading thing.

45
00:02:56.002 --> 00:02:59.565
Honestly, this app is so fast,
probably on this network,

46
00:02:59.565 --> 00:03:03.510
you're never gonna actually see
the loading state admittedly.

47
00:03:03.510 --> 00:03:08.050
I don't even think I'm gonna,
yeah, it's too fast.

48
00:03:08.050 --> 00:03:13.522
But this is just there in
case anything goes wrong.

49
00:03:13.522 --> 00:03:17.496
Solids router can be configured using JSX.

50
00:03:17.496 --> 00:03:19.304
But I'm not gonna cover that today.

51
00:03:19.304 --> 00:03:22.930
Instead, I'm just gonna show you the
convenience of file system based routing.

52
00:03:22.930 --> 00:03:27.407
And the way we do that is we actually
take the routes component from Solid's

53
00:03:27.407 --> 00:03:28.047
router and

54
00:03:28.047 --> 00:03:32.828
then Solid Start provides a file routes
component that as a way of injecting it.

55
00:03:32.828 --> 00:03:37.518
You could define your own routes however
you want, but you can make custom routes,

56
00:03:37.518 --> 00:03:40.868
but then you can just go give me
the ones in the file system and

57
00:03:40.868 --> 00:03:43.500
inject them cuz kind of like switch and
match.

58
00:03:43.500 --> 00:03:47.761
Arkham components can return
anything in this case it's

59
00:03:47.761 --> 00:03:51.408
just returning a config
of what routes you have.

60
00:03:51.408 --> 00:03:55.147
Then there's these two
files the entry client and

61
00:03:55.147 --> 00:04:01.216
the server not terribly relevant render,
this is just kind of setting up stuff.

62
00:04:01.216 --> 00:04:04.906
If you want to make some middleware, you
kind of inject it in here on the server.

63
00:04:04.906 --> 00:04:09.086
And on the client side,
it is just literally kind of a mount call,

64
00:04:09.086 --> 00:04:13.958
which we alias this because Solid Start
also works a client side rendering.

65
00:04:13.958 --> 00:04:16.873
So if you're in client side,
render mode equals render,

66
00:04:16.873 --> 00:04:19.790
if you're on server side
rendering mode equals hydrate.

67
00:04:19.790 --> 00:04:22.841
So this is just a way of
kind of clarifying that.

68
00:04:22.841 --> 00:04:26.806
But most of our work here is actually
going to be in our routes directory,

69
00:04:26.806 --> 00:04:29.411
which is where the file
system routing starts.

70
00:04:29.411 --> 00:04:32.051
And we've got a couple conventions.

71
00:04:32.051 --> 00:04:39.042
I would say it's a cross between old
Next.js, like previous Next.js, and Remix.

72
00:04:39.042 --> 00:04:43.706
Is kind of like our convention
where we use things like ..., for

73
00:04:43.706 --> 00:04:49.218
Start routes, we use parameterized
routes like this by using square braces.

74
00:04:49.218 --> 00:04:51.503
And we also use the convention for

75
00:04:51.503 --> 00:04:56.324
nested routing by using the file name
the same name as the folder name.

76
00:04:56.324 --> 00:04:58.194
This example does not have that.

77
00:04:58.194 --> 00:05:00.726
But just to kind of understand.

78
00:05:00.726 --> 00:05:05.297
This example is very simple in fact,
there's only three pages we have a top

79
00:05:05.297 --> 00:05:09.290
level page that catches like all
the top headlines zooming out and

80
00:05:09.290 --> 00:05:12.572
then we have individual pages for
stories and users.

81
00:05:12.572 --> 00:05:16.791
I didn't highlight this on
their route component earlier,

82
00:05:16.791 --> 00:05:21.518
but the NAV is out here outside of
the Spence outside the file route.

83
00:05:21.518 --> 00:05:23.610
So it never changes when we navigate.

84
00:05:23.610 --> 00:05:28.529
It just stays there, and
then we only replace

85
00:05:28.529 --> 00:05:32.676
the content that comes in down below.

86
00:05:32.676 --> 00:05:37.500
So this is basically
the layout of this project.

87
00:05:37.500 --> 00:05:42.596
So, I've also set up this library
where I've got some APIs,

88
00:05:42.596 --> 00:05:45.149
and this is a bit of a mix match.

89
00:05:45.149 --> 00:05:46.730
I've been putting this around for a bit.

90
00:05:46.730 --> 00:05:50.526
But it's a combination of
Firebase Hacker News API, and

91
00:05:50.526 --> 00:05:54.636
then a proxy that does some nicer
things where we don't have to

92
00:05:54.636 --> 00:05:58.292
fetch every single comment
individually on the page.

93
00:05:58.292 --> 00:06:03.733
But essentially, you can kind of write
your data layer kind of outside and

94
00:06:03.733 --> 00:06:05.330
kind of import it in.

95
00:06:05.330 --> 00:06:13.375
And in this case we're using just fetch
API essentially to get our data and

96
00:06:13.375 --> 00:06:18.565
a little bit of error checking and
whatnot, and

97
00:06:18.565 --> 00:06:23.519
it will just fetch whatever
URL we give to it.

98
00:06:23.519 --> 00:06:28.890
Okay, so the key part here is that

99
00:06:32.830 --> 00:06:35.817
With solids router you can configure
those data functions in but

100
00:06:35.817 --> 00:06:37.033
with file based routing,

101
00:06:37.033 --> 00:06:40.755
we've kind of set up a convention where
you can just go export const route data.

102
00:06:40.755 --> 00:06:44.409
And this function actually runs client and
server.

103
00:06:44.409 --> 00:06:47.266
So in this case we're
doing isomorphic fetch.

104
00:06:47.266 --> 00:06:49.657
So it works on both sides.

105
00:06:49.657 --> 00:06:53.556
But against a third party API,
so it's fairly straightforward.

106
00:06:53.556 --> 00:06:58.659
And what you're seeing here is we're
creating a resource that has our stories.

107
00:06:58.659 --> 00:07:03.677
And then we have the types for
our data and

108
00:07:03.677 --> 00:07:08.399
then you we use the type of route data to

109
00:07:08.399 --> 00:07:13.430
get our typed resources back out again.

110
00:07:13.430 --> 00:07:18.166
So let me see here yeah and
all that happens in

111
00:07:18.166 --> 00:07:23.286
this pages which show some
page content here and

112
00:07:23.286 --> 00:07:30.713
then when there are stories sorry
that's not what I'm looking for.

113
00:07:30.713 --> 00:07:33.815
When they're stories we
iterate through each story and

114
00:07:33.815 --> 00:07:35.601
show that story with a for loop.

115
00:07:35.601 --> 00:07:40.040
Let's face it logic one thing you'll
notice here is we do have the null

116
00:07:40.040 --> 00:07:45.018
checks in our template cuz our suspense
doesn't throw and it doesn't block.

117
00:07:45.018 --> 00:07:49.374
If you don't want things to continue you
do actually have to like check if it's

118
00:07:49.374 --> 00:07:50.590
actually there.

119
00:07:50.590 --> 00:07:55.694
But what's interesting about this is it
means that if you don't use suspense,

120
00:07:55.694 --> 00:08:00.113
all our primitives still work as well,
it's just it's there mostly

121
00:08:00.113 --> 00:08:04.480
to coordinate the kind of loading and
stuff for SSR like streaming.

122
00:08:05.490 --> 00:08:08.842
We have out of order streaming for SSR.

123
00:08:08.842 --> 00:08:14.516
And this kind of pattern here is
essentially how you build your apps.

124
00:08:14.516 --> 00:08:19.582
The other convention that we do with
solid and Solid Start quite often is

125
00:08:19.582 --> 00:08:24.735
that we use capital case versions of
normal HTML elements as a convention

126
00:08:24.735 --> 00:08:29.395
to show that this is like a progressive
enhanced version of this.

127
00:08:29.395 --> 00:08:33.766
This means that works without
JavaScript or with JavaScript.

128
00:08:33.766 --> 00:08:36.970
So we have capital A anchor and
capital F form.

129
00:08:36.970 --> 00:08:41.425
This allows us to do things like
progressive enhance forms by just

130
00:08:41.425 --> 00:08:44.347
importing the capital of form component.

131
00:08:44.347 --> 00:08:48.378
So it'll work with or without JavaScript.

132
00:08:48.378 --> 00:08:53.249
And obviously there're anchor tag here,
which also works that way.

133
00:08:53.249 --> 00:08:55.867
But I wanna focus mostly,

134
00:08:55.867 --> 00:09:01.817
today we're gonna focus more
on data fetching patterns and

135
00:09:01.817 --> 00:09:06.102
asynchronicity rather than on mutation.

136
00:09:06.102 --> 00:09:09.424
And one thing you can see here that
already even though there isn't

137
00:09:09.424 --> 00:09:12.328
the loading indicator,
is when I click next for the page,

138
00:09:12.328 --> 00:09:15.309
I mean it's happening so
faster, there's a delay there.

139
00:09:15.309 --> 00:09:19.147
You can see that page three
doesn't update right away this

140
00:09:19.147 --> 00:09:23.077
is because those transitions
are baked right into the app.

141
00:09:23.077 --> 00:09:27.461
And although we're not using it in this
example we could because our router is

142
00:09:27.461 --> 00:09:30.573
routing and
that is basically like the pending state.

143
00:09:30.573 --> 00:09:34.846
So if you ever wanna show that something
stale you just import is is routing and

144
00:09:34.846 --> 00:09:38.213
you can use that to indicate what
state you are in in your app.

