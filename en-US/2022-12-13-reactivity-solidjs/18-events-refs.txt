[00:00:00]
>> Let's pretend we wanted to track the mouse position on this div. Well, that's pretty easy to do. We basically use a convention of using camelCase on DOM events, so on and then the DOM events so you can do on mouse move for lets see on. It's funny, we actually support both.

[00:00:19]
But let's do this one onMouseMove=handleMouseMove and handleMousemMove in this case is we're just sending a signal that updates some x&y coordinates that we display in here. And the one we go in here, unsurprisingly it works. So important thing to know is that our event handlers, they can be inlined as well.

[00:00:39]
They pass the dominant event and then you can read the event and set the appropriate data. We support a style tag and it's a little bit different than you might have seen in some frameworks. It does support objects, but we actually rely on standard, DOM, properties. And this means that we don't camel case.

[00:01:15]
And instead, what we ended up doing is we put let's see. Got a couple extra brackets somewhere there we go some fun animation. We actually use stuff like get dash case for CSS and this this might seem like an interesting choice and it also means pixels and whatnot.

[00:01:37]
But it gives us a lot of control and flexibility here because the compiler will actually output individual style update commands for DOM, essentially, per one of these. So if, say like, one give them updates, and then the other ones don't, it'll actually just update the specific CSS property independently of the other ones.

[00:02:03]
And we can also support CSS variables this way we can add, --, my variable and it's also lines with stuff like server side rendering. It helps us with performance because again, when you're serializing the stuff into the DOM, we don't want to do all these like camel case transformation.

[00:02:23]
So this is performance optimization. It gives you more flexibility control and makes a difference on both the client and the server. But yeah in this example we're literally just using set interval to blow up some text. Similarly dealing with classes, you can just use class in solid, not class name or anything.

[00:02:50]
It's, we support standard HTML properties. But we also have an interesting helper, which lets us kind of shortcut some of this stuff to do an object form. So for example so, instead of doing this foo selected or this which is pretty commonplace, we can go classList which uses the underlying classList property on the on the element.

[00:03:16]
And lets us do something like selected when essentially current=foo and again, this is just convenient when you want to apply multiple styles. It's not a huge game changer here. Sorry, it's an object, but lets us get around certain amount of overhead. One thing that's becoming dreadfully clear to me is that the playground is much better than the tutorials because the tutorials seem to be having a little bit of an issue here.

[00:04:02]
Okay, and let me see here because this is a, selector thing where you basically using mutual exclusive selectors in this thing. And essentially, I'm just going to pop this down into all of these but yeah, it's just a convenience it's not groundbreaking but it's a cool little feature to have classList, yes boz and bar yeah.

[00:04:41]
Baz and bar there we go. Bar and baz [LAUGH] there we go, all right still working okay, good. And one of the cool side effects of it is that we can also use it for dynamic expressions there's actually a little thing here on the side, but we can also choose what class it is.

[00:05:12]
We can use object notation for JavaScript and put a signal maybe in here so you can actually change what the keys are dynamically as well. So it's a nice little tool because you can kind of combine these objects and kind of describe more complicated logic with it. Let's continue refs since all come in two forms, and this is how you get access to a DOM element, you can obviously just go div=div, right?

[00:05:43]
But sometimes it's nicer to actually write your code in like full GSX templates and not like break everything out element by element. So the most common way we make a ref in solid is by making a variable like let canvas. And then we're doing a bunch of canvas work here in this mount call.

[00:06:02]
So we're requesting animation frames and doing a bunch of fun stuff. But to enable this behavior, all we have to do is ref=canvas. And, Did I call it right? Yeah, let canvas. Then essentially all that should happen is. The variable just gets directly assigned immediately to here. To make sure I'm not insane.

[00:06:52]
This example is actually broken, okay? For reals, that's not fun. Looking at the solve one's actually broken doesn't actually help us here, okay. I should report this later we're gonna cut I guess, don't let's think of a better rough example really quick so give me a moment. See if the browser gives me any into what's going on in here no this is just the playground being weird awesome.

[00:07:31]
Okay, so then we yeah. I could try and recreate this like really quickly.
>> Yeah, and this you can just have the browser the normal.
>> Yeah, it's just gonna see if I can figure out why this is being weird. What was it called? Style. I wonder if they, okay, share link refresh.

[00:08:34]
Interesting. Okay, there's something wrong with this example which is interesting. I don't think it's probably with debugging it at this moment I mean we can sanity check that canvas actually exists at this point. But yeah, that's a canvas element. I wonder if this is one of those things where you're, I'm streaming or something, and then it's like I'm accessing the 3D card and it's messing with it or something.

[00:09:09]
Because the element is here it is literally running this routine. And it's examples not working which is weird, distort cleanup. It's yeah, okay, I've got nothing for this example, unfortunately, because it just doesn't seem to. But it's like the vanilla JavaScript is not working, not the framework. We actually literally get in here.

[00:09:42]
Okay, that's unfortunate. Trying to think of what I can do here instead, because this example is just broken.
>> Is the image coming in from that URL? Can you?
>> That's.
>> That URL.
>> Is that the problem here? Yeah.
>> I probably.
>> Yeah.
>> Well but just visit the image and see if it's there.

[00:10:20]

>> It is there, interesting. That's so weird, let's see what we got here because we get the canvas. We get the reference, definitely the reference to the canvas. We get the image data. I'm supposed to mess with the colors, that's very disappointing. This demo is working at one point.

[00:10:56]
The funny thing is I can teach refs so that actually, doing this it just I'm gonna have to go slightly off script which is probably fine at this point still like a very simple example.
>> I got canvas undefined in the on mount from the fresh refreshing.
>> Okay, let's try that.

[00:11:30]
Yeah.
>> Person on chat is saying there's a canvas variable on canvas API naming online 7 and 9. I don't know.
>> I think this is fine, yeah and.
>> Yeah, it seems fine.
>> And I'm getting the canvas when I refresh and this is just a light variable, so, I don't think Google's catching up.

[00:12:01]
I mean can we JSON.string.
>> Is it getting the CSS?
>> Yeah, this is most likely a problem with the playground processing the CSS more likely than anything. Yeah, the canvas is definitely there. So, yeah, this is yeah,
>> I'm not unsolved, I see your query params.
>> Yeah, what I'm gonna do I'm just gonna make this a really uninteresting example and just show that we get the canvas [LAUGH].

[00:12:36]
And leave it at that would have been cooler with a cool animation but I'm just going to just, yeah. We're just gonna do that.
>> We could take a couple minute tech break so you could set up a different example.
>> Yeah, let me.
>> If you feel like.

[00:13:00]

>> I'm trying to think of something else because the CSS is gonna be fine, then it's gonna make that.
>> Well let's, let's take five
>> Breaths, give you a reference to a native element and in solid you can do this in two ways. The easiest way and more straightforward way is to just create a variable and this is a normal variable this let canvas and then all we do is on our element.

[00:13:28]
We go ref canvas here and now you will see our nice effects because we have reference to our canvas and now one of the sold logos here is getting animated with color. But we also have a different way of using rafts, right? This works really well when you want to wait and use it in a mount.

[00:13:51]
So once it's been connected to the DOM, see we're using our canvas directly here. We can also just create a signal which also works quite well because sometimes you wanna or really any function for that matter. We can use callback refs and this gives us a little bit more control about how we assign the ref, which can be useful.

[00:14:18]
So in this case I'm gonna change this canvas to, now it's gonna be a function and then down here we can go set canvas. For an example like this, it's effectively the same thing. Ref setCanvas and probably referencing canvas is a function in multiple places, here, I am Let's just update them all.

[00:15:02]
One more, Important createSignal and we have the same effect again. So you have a couple choices here, right? You can always assign it directly to the element. But if you want to keep your JSX together, you can just assign to a variable or use a signal if you want to do some more dynamic stuff with it, right.

[00:15:38]
And similarly we can actually forward our refs through components and we don't actually need much of a special syntax for that, right? Now, similar example where we have all this logic and for some reason I've broken the canvas out into a different component. Okay, in here we have our canvas element.

[00:16:03]
All we need to do is. Go ref, props.ref, and it's basically a special property we know with props.ref. We can basically if the ref is provided by the parent like it is here, which is just this canvas variable again we can forward it through. And let's update this URL, looks this site is down and there we go.

[00:16:32]
We see our same canvas effect. So even through components, we can forward refs simply by using the props.ref property.

