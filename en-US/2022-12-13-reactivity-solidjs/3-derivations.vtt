WEBVTT

1
00:00:00.186 --> 00:00:06.217
There's a third piece here,
which is computed values.

2
00:00:06.217 --> 00:00:10.198
So far, we actually have
basically everything we need for

3
00:00:10.198 --> 00:00:13.123
a basic reactive system, but the nuance or

4
00:00:13.123 --> 00:00:18.666
the real control comes in with this third
primitive, which I call derivations.

5
00:00:18.666 --> 00:00:21.639
They're sometimes called memos or
computeds.

6
00:00:21.639 --> 00:00:26.824
And this thing is basically
both an observer and a signal.

7
00:00:26.824 --> 00:00:30.755
It only recalculates when
the values it depends on changes.

8
00:00:30.755 --> 00:00:31.919
So like the effect,

9
00:00:31.919 --> 00:00:35.831
it only reruns its function body
if something inside of it changes.

10
00:00:35.831 --> 00:00:41.830
When you just access it from the outside,
you'll always get the same value back.

11
00:00:41.830 --> 00:00:47.282
However, this sort of intermediate
caching is very powerful.

12
00:00:47.282 --> 00:00:51.620
I'm just gonna show the syntaxctualy
what this work looks like here where we

13
00:00:51.620 --> 00:00:54.602
basically have a couple names
like John and Smith for

14
00:00:54.602 --> 00:00:57.815
our signals and
then I've created a memo for full name.

15
00:00:57.815 --> 00:01:02.455
This is usually a pretty canonical
example where we're just calculating full

16
00:01:02.455 --> 00:01:04.576
name from first name and last name.

17
00:01:04.576 --> 00:01:09.982
And then I've actually got an effect
here to console log our full name.

18
00:01:09.982 --> 00:01:13.597
And essentially, setting the first name
to Will, will also update our effect.

19
00:01:13.597 --> 00:01:18.394
This is kind of unsurprising perhaps,
but it's basically so

20
00:01:18.394 --> 00:01:20.893
that it causes a bit of a change.

21
00:01:20.893 --> 00:01:26.981
So if you set the first name to Will, it
actually causes this memo to recalculate,

22
00:01:26.981 --> 00:01:30.333
which gives us a new first name and
last name,

23
00:01:30.333 --> 00:01:33.265
which causes the effect to calculate.

24
00:01:33.265 --> 00:01:38.205
There's a ripple effect as the change
propagates through the system.

25
00:01:38.205 --> 00:01:40.689
And as I said, this example is so

26
00:01:40.689 --> 00:01:45.665
trivial you'd probably be like,
why do I even care about this?

27
00:01:45.665 --> 00:01:51.179
This can be important if you need
to cache expensive calculations,

28
00:01:51.179 --> 00:01:55.450
especially if they're used
in more than one place.

29
00:01:55.450 --> 00:01:59.884
For me, getting back to my kinda
spreadsheet thinking, this is when I'm

30
00:01:59.884 --> 00:02:04.257
thinking about calculating tax and
tip and stuff off a single subtotal.

31
00:02:04.257 --> 00:02:09.112
You don't wanna do the math over and
over again, you just wanna kinda like

32
00:02:09.112 --> 00:02:14.045
get to a certain point and be like,
okay, I've calculated the subtotal,

33
00:02:14.045 --> 00:02:19.159
gonna cash this value, tips calculated
off of it, tax calculated off of it.

34
00:02:19.159 --> 00:02:23.316
You can also think of it sometimes like
if you've ever seen a user interface when

35
00:02:23.316 --> 00:02:27.290
there's an avatar in the corner,
sometimes it's a letter, let's say for

36
00:02:27.290 --> 00:02:29.668
your first name if you
don't have a picture.

37
00:02:29.668 --> 00:02:36.056
That's an example of something derived
off your first name, essentially.

38
00:02:36.056 --> 00:02:39.907
So you only need to calculate that
once unless your name changes,

39
00:02:39.907 --> 00:02:42.578
you're not gonna recalculate that avatar.

40
00:02:42.578 --> 00:02:45.921
So you might use it in multiple
places in the UI though.

41
00:02:45.921 --> 00:02:49.260
So these are kind of examples of this.

42
00:02:49.260 --> 00:02:53.770
Basically, I'd like to say what
could be derived should be derived.

43
00:02:53.770 --> 00:02:58.330
That's kind of the principle that we
have behind how to write stuff with

44
00:02:58.330 --> 00:03:00.162
reactivity and with Solid.

45
00:03:00.162 --> 00:03:03.891
And because this largely removes
the potential of getting out of sync.

46
00:03:03.891 --> 00:03:07.257
This typically when you write code,
though, requires little bookkeeping,

47
00:03:07.257 --> 00:03:10.419
because if you had to manage all those
assignments and updates yourself,

48
00:03:10.419 --> 00:03:11.655
it gets kinda complicated.

49
00:03:11.655 --> 00:03:16.081
But luckily for us, reactive
systems handle this automatically.

50
00:03:16.081 --> 00:03:20.835
And I've got a couple more examples
where I actually wanna kind of

51
00:03:20.835 --> 00:03:23.354
illustrate the difference here.

52
00:03:23.354 --> 00:03:27.836
I've got a bit of an example here
where I've taken our first name and

53
00:03:27.836 --> 00:03:29.182
last name example.

54
00:03:29.182 --> 00:03:33.349
And instead of using the memo or
create memo or

55
00:03:33.349 --> 00:03:39.502
the duration I showed before,
I've just made it a function call.

56
00:03:39.502 --> 00:03:40.933
Why didn't make it a function call?

57
00:03:40.933 --> 00:03:43.659
Cuz I wanna still call
it under our effect,

58
00:03:43.659 --> 00:03:48.069
I want our effect to still track it,
so I've made it a function call.

59
00:03:48.069 --> 00:03:49.922
And I've made two effects now,

60
00:03:49.922 --> 00:03:54.529
I've made an effect that says my name is
full name and your name is not full name.

61
00:03:54.529 --> 00:04:00.894
And then at the end here, I update
the name to kinda show you the difference.

62
00:04:00.894 --> 00:04:03.201
And again,
we start by creating our signals.

63
00:04:03.201 --> 00:04:08.860
We create our reaction now, that
happens when we run our two effects and

64
00:04:08.860 --> 00:04:14.520
you'll immediately see that it calls
creating or updating full name,

65
00:04:14.520 --> 00:04:20.299
which is this little thing that I put
in the top of our full name function.

66
00:04:20.299 --> 00:04:25.087
And the reason it calls out immediately
is because when it calls full name inside

67
00:04:25.087 --> 00:04:29.746
this effect, it essentially is just
running this function again and again.

68
00:04:29.746 --> 00:04:34.333
So we see creating updating full name, my
name is John Smith, creating updating full

69
00:04:34.333 --> 00:04:38.424
name, your name is not John Smith because
it just calls the function twice.

70
00:04:38.424 --> 00:04:40.167
Then when we update our name,

71
00:04:40.167 --> 00:04:43.517
it's the same thing again
creating updating full name,

72
00:04:43.517 --> 00:04:48.501
my name is Jacob Smith, creating updating
full name, your name is not Jacob Smith.

73
00:04:48.501 --> 00:04:53.389
And the key difference here
when we do something that

74
00:04:53.389 --> 00:04:58.500
we're using derivations is
that if I change this now to

75
00:04:58.500 --> 00:05:03.851
be create memo and
wrap this function call and import it.

76
00:05:07.842 --> 00:05:11.266
What runs actually becomes a lot shorter

77
00:05:11.266 --> 00:05:16.010
because now this is eager
the way that it works in Solid.

78
00:05:16.010 --> 00:05:19.560
But now when we create our signals,
we actually create our memo up here and

79
00:05:19.560 --> 00:05:22.146
it basically creates or
updates the full name up top.

80
00:05:22.146 --> 00:05:23.994
But you can see when we run our effects,

81
00:05:23.994 --> 00:05:27.479
it doesn't actually run this function
again it literally just reads it.

82
00:05:27.479 --> 00:05:29.439
It goes, my name is John Smith,
your name is not John Smith.

83
00:05:29.439 --> 00:05:31.570
We got rid of that kind of extra overhead.

84
00:05:31.570 --> 00:05:36.593
And then similarly now when we
change the name on step three,

85
00:05:36.593 --> 00:05:39.941
we see that it updates the full name, but

86
00:05:39.941 --> 00:05:45.183
then again both effects run and
we've reduced the execution.

87
00:05:45.183 --> 00:05:48.862
This is just kind of why
we would drive stuff.

88
00:05:48.862 --> 00:05:54.030
Obviously, concatenate strings is not
very expensive operation and you probably

89
00:05:54.030 --> 00:05:58.841
would be like, who cares but you can
picture things that are more expensive.

90
00:05:58.841 --> 00:06:03.581
Very kind of the fundamentals look,
look at this.

91
00:06:03.581 --> 00:06:09.107
&gt;&gt; So without registering in effects
nothing's reacting to the signal,

92
00:06:09.107 --> 00:06:12.429
it's just kind of changing into the void.

93
00:06:12.429 --> 00:06:15.212
&gt;&gt; Ideally, that's probably the case,
in the case of Solid,

94
00:06:15.212 --> 00:06:16.587
our stuff actually is eager.

95
00:06:16.587 --> 00:06:21.161
And this does depend differently
on different reactive systems.

96
00:06:21.161 --> 00:06:26.202
This is something that we're exploring,
the eagerness of these

97
00:06:26.202 --> 00:06:31.976
derivations in Solid are important for
the way our rendering works today,

98
00:06:31.976 --> 00:06:36.854
but I think it's something that
we could look at in the future.

99
00:06:36.854 --> 00:06:41.984
Theoretically, yes, we could just not
do it, but in Solid actually, as soon

100
00:06:41.984 --> 00:06:47.461
as you have one of these derived values,
it does start calculating stuff eagerly.

