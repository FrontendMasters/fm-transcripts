WEBVTT

1
00:00:00.000 --> 00:00:03.387
We are actually missing one more thing.

2
00:00:03.387 --> 00:00:07.135
For our purposes, we're gonna
do a very simple version of it.

3
00:00:07.135 --> 00:00:10.743
But we're gonna createMemo and

4
00:00:10.743 --> 00:00:15.958
createMemo as I mentioned
is our derivation.

5
00:00:15.958 --> 00:00:20.296
And in an actual reactive system
where we do these topological sorts,

6
00:00:20.296 --> 00:00:22.362
it'd be much more complicated.

7
00:00:22.362 --> 00:00:28.251
But for you just kinda coming in and
kinda getting a grasp of it.

8
00:00:28.251 --> 00:00:30.774
The easiest way to create
a memo conceptually,

9
00:00:35.076 --> 00:00:40.064
Is just creating a signal.

10
00:00:46.428 --> 00:00:47.140
And creating an effect.

11
00:00:47.140 --> 00:00:48.018
[LAUGH]

12
00:00:57.673 --> 00:01:04.892
Now as I mentioned,
this is not perfectly what it is.

13
00:01:04.892 --> 00:01:08.024
And actually we have to return
the signal too obviously.

14
00:01:08.024 --> 00:01:12.871
But this will actually effectively
do what we want from what we

15
00:01:12.871 --> 00:01:15.673
saw with our examples previously.

16
00:01:15.673 --> 00:01:21.086
We could I don't know, take create,

17
00:01:21.086 --> 00:01:27.863
we can go,
let's call this sum = createMemo.

18
00:01:29.180 --> 00:01:36.004
And we can say count () + count2 ().

19
00:01:37.905 --> 00:01:42.556
And now, can I get rid of this for
a moment?

20
00:01:49.930 --> 00:01:55.050
All right, and
import it from our file and now,

21
00:01:55.050 --> 00:02:00.298
we now we're looking at the sum,
and actually,

22
00:02:00.298 --> 00:02:04.656
let's just do count, count2 and sum.

23
00:02:04.656 --> 00:02:06.742
All right.

24
00:02:06.742 --> 00:02:10.450
All right,
this one is a little bit trivial

25
00:02:10.450 --> 00:02:15.293
compared to what an actual
reactive system works like.

26
00:02:15.293 --> 00:02:19.510
But this has all the kind
of key pieces and

27
00:02:19.510 --> 00:02:24.983
characteristics that we
find in a reactive system.

28
00:02:27.521 --> 00:02:33.883
The key part is to understand that there's
this global context that's kind of shared.

29
00:02:33.883 --> 00:02:38.527
And all we're doing is kind of leveraging
the stack in order to keep track of

30
00:02:38.527 --> 00:02:41.190
what's running and what's not running.

31
00:02:41.190 --> 00:02:47.313
And I guess for our sake, I mentioned
earlier that I would implement it.

32
00:02:47.313 --> 00:02:54.696
Let's implement untrack,
just because we can.

33
00:02:54.696 --> 00:02:58.706
I'm gonna export function untrack.

34
00:02:58.706 --> 00:03:04.096
Really all we have to do to
implement untrack is basically for

35
00:03:04.096 --> 00:03:06.428
the underlying signals.

36
00:03:06.428 --> 00:03:13.265
So we can go const prevContext = context.

37
00:03:13.265 --> 00:03:18.227
Context = []equals empty array,

38
00:03:18.227 --> 00:03:24.951
run our function and
say context = prevContext,

39
00:03:24.951 --> 00:03:28.483
certain other function.

40
00:03:28.483 --> 00:03:35.574
In so, if we do this whatever
runs inside this function now,

41
00:03:35.574 --> 00:03:43.095
inside the read will not find
the effect and will not subscribe.

42
00:03:44.695 --> 00:03:51.449
And what can we do here to,
I'm trying to think of,

43
00:03:52.966 --> 00:03:57.548
I mean it's sort of uninteresting, but

44
00:03:57.548 --> 00:04:03.086
we can go untrack, count,
and import untrack.

45
00:04:05.375 --> 00:04:10.104
Assignment to a constant variable,
did I use const of habit.

46
00:04:10.104 --> 00:04:15.346
Actually, no it's not this one the
problem, this one's a problem, all right?

47
00:04:17.047 --> 00:04:25.403
Undefined, this is what
you always wanna see.

48
00:04:25.403 --> 00:04:28.926
Count, count.

49
00:04:28.926 --> 00:04:34.696
[LAUGH] And

50
00:04:34.696 --> 00:04:42.042
it's important to return your results,
[LAUGH] in your untrack function.

51
00:04:42.042 --> 00:04:46.474
So from there, essentially what
we're seeing is we only seen

52
00:04:46.474 --> 00:04:50.833
the count of its initial value,
I'll make it a 10 for now.

53
00:04:50.833 --> 00:04:56.054
And even though we update it again,
it doesn't run again, okay?

54
00:04:56.054 --> 00:05:02.649
So that is basically
reactive fundamentals.

