WEBVTT

1
00:00:00.190 --> 00:00:04.665
I can tell you about where the TensorFlow
is standing, what is NumPy and

2
00:00:04.665 --> 00:00:06.090
how they all related.

3
00:00:07.170 --> 00:00:13.350
So I will dig even deeper and try to
connect hardware with the compilers,

4
00:00:13.350 --> 00:00:18.318
interpreter languages,
NumPy, optimized libraries,

5
00:00:18.318 --> 00:00:21.681
TensorFlow, Keras, and all of that.

6
00:00:21.681 --> 00:00:27.470
So I will build the hierarchy of
the whole programming stack for you.

7
00:00:28.620 --> 00:00:34.816
So at the bottom we have the hardware,
right?

8
00:00:34.816 --> 00:00:38.560
And hardware,
we're talking about CPUs, GPUs.

9
00:00:38.560 --> 00:00:43.124
So something, remember, in our
diagram which was the compute block,

10
00:00:43.124 --> 00:00:45.187
that's our hardware, right?

11
00:00:45.187 --> 00:00:48.867
It is something which is just
basically do the number crunching and

12
00:00:48.867 --> 00:00:51.110
do your particular command execution.

13
00:00:51.110 --> 00:00:56.549
So we need to provide those
commands to our hardware.

14
00:00:56.549 --> 00:01:01.347
But it usually takes
everything in binary form,

15
00:01:01.347 --> 00:01:04.396
right, or machine language.

16
00:01:04.396 --> 00:01:05.765
Yeah, I can use this.

17
00:01:05.765 --> 00:01:08.273
[LAUGH] Well, ML, Machine Learning and

18
00:01:08.273 --> 00:01:11.660
Machine Language that's
gonna be confusing.

19
00:01:11.660 --> 00:01:17.306
Okay, let's not call it ML, [LAUGH]
let's just say it's just binary code.

20
00:01:17.306 --> 00:01:19.600
How the binary code is created?

21
00:01:19.600 --> 00:01:21.981
Well, it's created by the compilers.

22
00:01:23.710 --> 00:01:26.962
And compilers also can be
split into sub parts, so

23
00:01:26.962 --> 00:01:32.390
we're creating the object files first,
intermediate representation, right?

24
00:01:32.390 --> 00:01:37.067
And then those object files dynamically
linked or statically linked and

25
00:01:37.067 --> 00:01:40.220
that's what produce your executable,
right?

26
00:01:40.220 --> 00:01:43.850
So compilers,
I'm gonna simplify this quite a bit.

27
00:01:45.950 --> 00:01:52.915
So to our compilers we
providing source code.

28
00:01:52.915 --> 00:02:00.403
Let's say for now, we're gonna be
considering two type of source codes and

29
00:02:00.403 --> 00:02:05.560
because of that,
we'll have different pathways.

30
00:02:05.560 --> 00:02:11.213
So let's say we have C and C++ code.

31
00:02:11.213 --> 00:02:15.130
So there is compiling and
interpreting languages, right?

32
00:02:15.130 --> 00:02:18.687
So Python using an interpreter,

33
00:02:18.687 --> 00:02:23.386
which actually is executing for
us C ++ and

34
00:02:23.386 --> 00:02:27.840
C using compilers to create binary code.

35
00:02:27.840 --> 00:02:31.942
So executable.

36
00:02:31.942 --> 00:02:37.413
With the compiler,
if you provide the C source code,

37
00:02:37.413 --> 00:02:44.962
it will create the object file and
then those object files will be linked.

38
00:02:44.962 --> 00:02:53.418
So linker will be used to
actually create the executable.

39
00:02:53.418 --> 00:02:58.240
But all of that is usually hidden
under the compiler, right?

40
00:02:58.240 --> 00:03:00.583
So probably I should use different color.

41
00:03:00.583 --> 00:03:04.140
Let's go this way, so
that's what compiler is doing, right?

42
00:03:04.140 --> 00:03:08.556
Just taking C code, creating binary
object file, and then linking.

43
00:03:08.556 --> 00:03:13.023
Because you might have
several source code files and

44
00:03:13.023 --> 00:03:17.230
object files will be created for
each of them.

45
00:03:17.230 --> 00:03:21.550
And linker actually need to figure out if
we're referencing different functions from

46
00:03:21.550 --> 00:03:22.918
different files, right?

47
00:03:22.918 --> 00:03:27.110
And basically make all of those
connections to create one executable.

48
00:03:27.110 --> 00:03:32.072
But quite often to save space,
if we're using common libraries,

49
00:03:32.072 --> 00:03:36.945
some of the libraries will not be
compiled from the source code but

50
00:03:36.945 --> 00:03:40.240
will be grabbed from the operating system.

51
00:03:40.240 --> 00:03:44.497
So in OS, for instance,
if we're working on Windows,

52
00:03:44.497 --> 00:03:48.947
it will be a DLL, right,
Dynamically Linked Libraries.

53
00:03:48.947 --> 00:03:53.604
In Linux, it will be .o or .a files, and

54
00:03:53.604 --> 00:04:00.269
linker when it's actually
looking at the function calls.

55
00:04:00.269 --> 00:04:03.595
And if those functions are,
for instance, system calls,

56
00:04:03.595 --> 00:04:07.732
it will just grab those from the operating
system and link them together.

57
00:04:07.732 --> 00:04:12.924
Or figure out the way to load them from
the operating system to save the size

58
00:04:12.924 --> 00:04:17.974
of your executable, depending if
you want dynamic or static loading.

59
00:04:17.974 --> 00:04:21.634
Static loading means that we
just gonna grab those and

60
00:04:21.634 --> 00:04:23.921
build them into our executable.

61
00:04:23.921 --> 00:04:28.315
And dynamic loading means that we
hope that this library will be in our

62
00:04:28.315 --> 00:04:33.167
operating system or actually final user
who are running the executable will

63
00:04:33.167 --> 00:04:37.675
have them on their operating system and
it will be grabbed from there.

64
00:04:37.675 --> 00:04:40.779
So that's kind of the compilation process.

65
00:04:40.779 --> 00:04:44.852
And with the Python, you just have

66
00:04:44.852 --> 00:04:50.191
interpreter which running those commands,

67
00:04:50.191 --> 00:04:54.826
just interpreting how those high level

68
00:04:54.826 --> 00:05:00.320
commands should be
executed on the low level.

