WEBVTT

1
00:00:00.120 --> 00:00:06.490
All right, so we will be using Jupyter
notebooks in our class today at Jupyter.

2
00:00:06.490 --> 00:00:11.673
To start it's if you're
just type jupyter notebook,

3
00:00:11.673 --> 00:00:16.528
and dot,
which corresponds to your local folder.

4
00:00:16.528 --> 00:00:20.301
It's where the Jupyter will be
running the notebooks from.

5
00:00:20.301 --> 00:00:23.226
And Jupyter is the web server on one part,
right?

6
00:00:23.226 --> 00:00:30.092
So as you can see, it started on my
local machine on the ports 8888 so

7
00:00:30.092 --> 00:00:36.480
I can access it through the browser
by using localhost the rest.

8
00:00:36.480 --> 00:00:41.054
It also means that I can run Jupyter
notebooks somewhere remotely on remote

9
00:00:41.054 --> 00:00:41.712
machine.

10
00:00:41.712 --> 00:00:46.091
And if the ports are open,
I can simply access this

11
00:00:46.091 --> 00:00:50.374
Jupyter notebook server
on any remote machine.

12
00:00:50.374 --> 00:00:53.620
But that's the one parts,
right, the frontend.

13
00:00:53.620 --> 00:00:56.190
On the backend what's happening
is kinda interesting.

14
00:00:56.190 --> 00:01:00.480
It's actually running Python
interpreter or several of them.

15
00:01:00.480 --> 00:01:04.240
And whatever code I will be
running in the notebooks,

16
00:01:04.240 --> 00:01:07.260
it will be transferred to
the Python interpreter and

17
00:01:07.260 --> 00:01:10.280
it will be executed on that machine
where the Jupyter is running.

18
00:01:10.280 --> 00:01:12.430
And if you, for instance,
want to bring something out,

19
00:01:12.430 --> 00:01:15.760
it will be printed out back
to the Jupyter notebook.

20
00:01:15.760 --> 00:01:21.511
So for instance to demonstrate, let's just
start with some linear regression, right?

21
00:01:21.511 --> 00:01:24.510
That's the first example
I have in my notebooks.

22
00:01:25.520 --> 00:01:30.186
So, as you can see, it basically
allows me to create this interactive

23
00:01:30.186 --> 00:01:33.756
environment where I can
just plot different graphs.

24
00:01:33.756 --> 00:01:38.230
Or I can even text, well,
put some text in mark down format.

25
00:01:38.230 --> 00:01:45.610
So, for instance, if I say this is list or
something like that,

26
00:01:45.610 --> 00:01:50.541
or for instance, 1, another, an.

27
00:01:50.541 --> 00:01:54.445
[LAUGH] something like that.

28
00:01:54.445 --> 00:01:57.060
It will actually format the list.

29
00:01:57.060 --> 00:01:59.710
It's interesting, it's actually
supposed to put numbers here.

30
00:02:00.730 --> 00:02:06.405
If we do something like this,
or second chapter,

31
00:02:09.482 --> 00:02:11.999
Yeah, it automatically
will put it in numbers.

32
00:02:11.999 --> 00:02:14.499
It's mark down format, but

33
00:02:14.499 --> 00:02:19.510
it allows me to put some text
as well as just run commands.

34
00:02:19.510 --> 00:02:22.341
So for instance, import tensorflow tf and

35
00:02:22.341 --> 00:02:28.170
print(tf.__version__) will just import
the TensorFlow into my environment.

36
00:02:28.170 --> 00:02:35.076
So it will be executed by the interpreter,
and it will just preserve the state so

37
00:02:35.076 --> 00:02:41.588
I can run this command cells sequentially
or in any order I prefer, right?

38
00:02:41.588 --> 00:02:48.660
And to execute them you just select the
cell and press Ctrl+Enter or Shift+ Enter.

39
00:02:48.660 --> 00:02:51.400
If you press Shift+Enter,
it will execute the current cell and

40
00:02:51.400 --> 00:02:53.320
we'll jump to the next one.

41
00:02:53.320 --> 00:02:58.020
So as you can see, we just imported
TensorFlow to our environment and

42
00:02:58.020 --> 00:03:05.780
we running TensorFlow 2.0, which been
released just well, September 2019, right?

43
00:03:05.780 --> 00:03:09.546
So right now [LAUGH]
it's about a month ago.

44
00:03:09.546 --> 00:03:13.328
All right, so that's the environment
which we'll be using.

45
00:03:13.328 --> 00:03:19.675
And if you want to use JavaScript,
I'm not gonna be using JavaScript, but

46
00:03:19.675 --> 00:03:25.320
you can try to simply clon this
repository from tfjs-examples and

47
00:03:25.320 --> 00:03:29.580
use the provided examples
from that repository.

48
00:03:30.830 --> 00:03:36.490
All right, so let's go back, you have.

49
00:03:36.490 --> 00:03:40.120
So I've explained that we're
gonna be using Whiteboards,

50
00:03:40.120 --> 00:03:43.290
Notebooks for the dependencies.

51
00:03:43.290 --> 00:03:49.527
So, for instance, I just demonstrated
that I can import TensorFlow.

52
00:03:49.527 --> 00:03:54.578
To install TensorFlow on your machine,
there are several ways how you can do it.

53
00:03:54.578 --> 00:03:57.420
You can just use pip
install in the terminal.

54
00:03:57.420 --> 00:04:02.898
So, for instance, if I have terminal open,

55
00:04:02.898 --> 00:04:08.830
I can do something like
pip install tensorflow.

56
00:04:08.830 --> 00:04:13.720
And right now, it will just say that
I already have TensorFlow installed.

57
00:04:13.720 --> 00:04:16.040
Or maybe it will even update it.

58
00:04:16.040 --> 00:04:17.200
No, it shouldn't.

59
00:04:17.200 --> 00:04:17.895
It should not.
Yeah,

60
00:04:17.895 --> 00:04:21.520
I just basically check all
the dependencies because TensorFlow, for

61
00:04:21.520 --> 00:04:24.420
instance, have NumPy dependency.

62
00:04:24.420 --> 00:04:27.433
NumPy, by the way,
it's numerical Python package.

63
00:04:27.433 --> 00:04:33.300
We'll be talking a little bit about it
in a few minutes and other dependencies.

64
00:04:33.300 --> 00:04:38.910
And it will simply download it and
install it on your machine.

65
00:04:38.910 --> 00:04:43.489
If you're using Conda package management,
you should do those with Conda.

66
00:04:43.489 --> 00:04:46.463
So Conda install and then the package.

67
00:04:46.463 --> 00:04:49.895
You can also do through the terminal,
sorry,

68
00:04:49.895 --> 00:04:52.810
through the Jupyter notebook itself.

69
00:04:52.810 --> 00:04:59.260
So, for instance, let's just create
new cell, Insert &gt; Insert Cell Above.

70
00:04:59.260 --> 00:05:04.239
You can run a terminal commands in the
Jupyter environment itself if you just put

71
00:05:04.239 --> 00:05:06.330
exclamation mark in front of it.

72
00:05:06.330 --> 00:05:09.793
So, for instance,

73
00:05:09.793 --> 00:05:14.700
!pip install tensorflow.

74
00:05:14.700 --> 00:05:18.990
We'll execute these commands
in your Jupyter server.

75
00:05:18.990 --> 00:05:22.200
So, if I once again
gonna press Ctrl+Enter,

76
00:05:22.200 --> 00:05:26.220
you'll see that it's actually
doing exactly the same thing.

77
00:05:26.220 --> 00:05:29.860
It's just checking all the dependencies
and if the package is not installed,

78
00:05:29.860 --> 00:05:32.550
it will be installed and
you can use it in your code.

79
00:05:32.550 --> 00:05:37.390
So if, for instance,
during executing any of my Jupyter

80
00:05:37.390 --> 00:05:42.450
notebooks you will see that import
fails because of missing library,

81
00:05:42.450 --> 00:05:44.840
just do pip install and
down correspond the library.

