WEBVTT

1
00:00:00.160 --> 00:00:05.320
So I've demonstrated and talked a little
bit about the quite complex concept.

2
00:00:05.320 --> 00:00:12.630
Let's dial down a little bit and
start with the linear regression.

3
00:00:12.630 --> 00:00:21.110
So I want to just show you how
programmatically those weights and

4
00:00:21.110 --> 00:00:28.830
biases can be calculated, or
how we can figure them out.

5
00:00:28.830 --> 00:00:33.462
So, what I will do, I will probably
just start the new notebook,

6
00:00:33.462 --> 00:00:38.400
and we'll demonstrate
everything from scratch.

7
00:00:38.400 --> 00:00:42.265
So finally,
we can switch into Python programming.

8
00:00:42.265 --> 00:00:44.650
And right from the beginning,

9
00:00:44.650 --> 00:00:49.330
I don't need TensorFlow from this,
but I will still use it.

10
00:00:49.330 --> 00:00:54.490
I want to show you a couple of
interesting functions in TensorFlow which

11
00:00:54.490 --> 00:00:57.340
can be used even for this simple problem.

12
00:00:57.340 --> 00:01:01.240
But at the same time I
will not try to use built

13
00:01:01.240 --> 00:01:05.180
in functionality of TensorFlow to fit,
I will try to do it manually.

14
00:01:05.180 --> 00:01:10.610
But then in the next exercise, we'll
transition to those helper functions.

15
00:01:10.610 --> 00:01:15.174
So let's imports, by the way,
in Jupyter Notebooks,

16
00:01:15.174 --> 00:01:21.232
pressing Tab is pretty useful command
because it will simply autocomplete or

17
00:01:21.232 --> 00:01:23.860
show you the available options.

18
00:01:23.860 --> 00:01:30.570
So for instance if I type TensorFlow and
then press Tab it will show me

19
00:01:30.570 --> 00:01:36.550
all the available modules currently
installed and available on my machine.

20
00:01:36.550 --> 00:01:40.330
So on let's import tensorflow as tf.

21
00:01:41.640 --> 00:01:46.270
So assuming that some
people who will be watching

22
00:01:46.270 --> 00:01:51.030
this here don't know Python, for
instance are familiar with JavaScript.

23
00:01:51.030 --> 00:01:54.940
So I will be very vocal about
what exactly we're doing.

24
00:01:54.940 --> 00:01:59.160
So import tensorflow as tf
basically means that we will be

25
00:01:59.160 --> 00:02:04.095
importing TensorFlow Python
module into our environment.

26
00:02:04.095 --> 00:02:11.530
So, actually let me turn off header and
toolbar back again.

27
00:02:12.730 --> 00:02:16.900
So now it means that functionality
of TensorFlow is available for

28
00:02:16.900 --> 00:02:21.000
me and I can just type
something like if I execute it.

29
00:02:22.240 --> 00:02:25.478
So by executing,
I just press Shift + Enter, right?

30
00:02:25.478 --> 00:02:30.940
And it execute the current cell and
open the new one for me.

31
00:02:30.940 --> 00:02:36.820
Now I can type tf dot and
just look at all the available methods,

32
00:02:36.820 --> 00:02:41.850
functions, constants, basically everything
what's available in TensorFlow.

33
00:02:43.770 --> 00:02:47.240
Pretty useful functionality
of Jupyter Notebooks

34
00:02:47.240 --> 00:02:51.610
is also to type question mark
after any command or function.

35
00:02:51.610 --> 00:02:55.922
And if you execute the cell,
it will actually bring you the additional

36
00:02:55.922 --> 00:03:00.029
window with the information about
this command or this function.

37
00:03:00.029 --> 00:03:02.190
Well TensorFlow root package, right,

38
00:03:02.190 --> 00:03:05.300
it doesn't really give you
any useful information.

39
00:03:05.300 --> 00:03:10.617
Let's try something else like TensorFlow,
for

40
00:03:10.617 --> 00:03:15.120
instance random.

41
00:03:15.120 --> 00:03:19.168
That's another module, but
if we execute it, a public API for

42
00:03:19.168 --> 00:03:21.910
tf.random namespace, yeah.

43
00:03:21.910 --> 00:03:27.614
Also not useful, random,
let's say we have uniform,

44
00:03:27.614 --> 00:03:31.820
yes, uniform distribution.

45
00:03:31.820 --> 00:03:37.180
So this function is actually
generates random values with

46
00:03:39.130 --> 00:03:43.800
a uniform distribution in
the range between 0 and 1.

47
00:03:43.800 --> 00:03:48.260
So for instance,
if I now just run this function,

48
00:03:49.800 --> 00:03:54.980
I actually got an error, missing one
required positional argument shape.

49
00:03:54.980 --> 00:04:00.155
Aha, so actually if I would
have continue reading the help,

50
00:04:00.155 --> 00:04:03.460
it would say that yes shape is required,

51
00:04:03.460 --> 00:04:08.990
also I can provide additional
parameters to my function call and

52
00:04:08.990 --> 00:04:14.360
shape is just the 1-D integer tenser.

53
00:04:14.360 --> 00:04:17.760
And tensor is just the array or
matrix, right?

54
00:04:19.010 --> 00:04:21.780
So the shape of the output tensor and
actually,

55
00:04:21.780 --> 00:04:24.072
yeah, I don't see any examples here.

56
00:04:24.072 --> 00:04:28.813
But for instance, I can provide something

57
00:04:28.813 --> 00:04:33.050
like this one, that's our tesnsor.

58
00:04:33.050 --> 00:04:37.850
And jut because I'm using TensorFlow, it
will return, the result will be in tenser,

59
00:04:37.850 --> 00:04:41.620
it will be shaped 1, just as I specified.

60
00:04:41.620 --> 00:04:49.890
And the number is just this
random number between 0 and 1.

61
00:04:49.890 --> 00:04:52.663
So now if I just do print for instance,

62
00:04:56.661 --> 00:05:01.020
The values change just because this
function was called once again.

63
00:05:01.020 --> 00:05:06.188
If you're getting anything for
instance, let's see our variable

64
00:05:06.188 --> 00:05:13.500
is cold var and
we will just assign something to it.

65
00:05:13.500 --> 00:05:18.130
We can print and it's gonna lose all
the information about the tensor if

66
00:05:18.130 --> 00:05:22.880
we just do var numpy.

67
00:05:22.880 --> 00:05:27.326
And now I have to explain
kind of what is TensorFlow,

68
00:05:27.326 --> 00:05:30.470
what is numpy, and
how they relate to each other.

69
00:05:30.470 --> 00:05:35.267
But basically this command
will transform any

70
00:05:35.267 --> 00:05:40.679
tensor representation to
NumPy representation and

71
00:05:40.679 --> 00:05:44.374
NumPy, or numeric package is the.

72
00:05:46.586 --> 00:05:53.180
Just the way the classical
representation how the data is stored,

73
00:05:53.180 --> 00:05:57.311
so it's just gonna be your fault number.

