WEBVTT

1
00:00:00.070 --> 00:00:06.950
Basically, that's the line we're
trying to fit our new line to.

2
00:00:06.950 --> 00:00:09.710
So that's the ideal solution, right?

3
00:00:09.710 --> 00:00:14.085
So let's say we don't know w and b, and

4
00:00:14.085 --> 00:00:18.999
we're just trying to guess, so w_guess.

5
00:00:18.999 --> 00:00:20.344
And we should start from somewhere.

6
00:00:20.344 --> 00:00:25.932
So let's just assign 0.0 to our w_guess,

7
00:00:25.932 --> 00:00:29.954
and b_guess can also be 0.0.

8
00:00:29.954 --> 00:00:38.004
So if I will plot new
line with those values,

9
00:00:42.883 --> 00:00:46.483
So w_guess and b_guess.

10
00:00:52.404 --> 00:00:56.466
Our line, yes,
I should probably change, let's say,

11
00:00:56.466 --> 00:01:00.684
red color and, Yeah.

12
00:01:03.163 --> 00:01:06.130
So without specifying anything,
it will just use the line.

13
00:01:06.130 --> 00:01:11.030
So you can see that's
the problem I'm trying to solve.

14
00:01:11.030 --> 00:01:13.490
So I had the original data, right?

15
00:01:13.490 --> 00:01:15.510
And it was kinda randomly distributed.

16
00:01:15.510 --> 00:01:21.955
Let's say I just measured something.

17
00:01:24.760 --> 00:01:26.260
There should be some sort of dependency.

18
00:01:26.260 --> 00:01:29.630
I'm trying to figure out
the kinda physical problem so

19
00:01:29.630 --> 00:01:31.520
we can associate it easily.

20
00:01:32.870 --> 00:01:40.980
So let's say I'm trying to find the
correlation between height and shoe size.

21
00:01:40.980 --> 00:01:42.220
There might be some correlation, right?

22
00:01:42.220 --> 00:01:43.820
But the data will be still noisy.

23
00:01:43.820 --> 00:01:46.656
So some tall people
might have smaller feet.

24
00:01:46.656 --> 00:01:50.108
[LAUGH] Some people, the opposite.

25
00:01:50.108 --> 00:01:54.410
And still,
that can be the data we just created.

26
00:01:54.410 --> 00:02:01.200
And the line, the green line will show
me the true dependency between those.

27
00:02:01.200 --> 00:02:06.076
So I can actually,
to better meaning to this problem,

28
00:02:06.076 --> 00:02:14.806
let's say our w is equal to, So
I want height in inches, right?

29
00:02:14.806 --> 00:02:24.709
So for instance, Let's play around
a little bit with those parameters.

30
00:02:24.709 --> 00:02:27.240
So b=10,

31
00:02:34.362 --> 00:02:37.330
Our random numbers
distributed from 0 to 1.

32
00:02:37.330 --> 00:02:42.030
So it means that at some point, we will
have people with height equal to 0,

33
00:02:42.030 --> 00:02:45.930
or [LAUGH] shoe size equal to 0.

34
00:02:45.930 --> 00:02:50.950
All right, probably height and
shoe size is the bad example.

35
00:02:52.550 --> 00:02:54.390
We need better example.

36
00:02:54.390 --> 00:02:56.193
Or maybe just skip the example completely.

37
00:02:56.193 --> 00:03:02.137
It's just numbers and
just the dependency between one value,

38
00:03:02.137 --> 00:03:04.951
those xs and some ys, right?

39
00:03:04.951 --> 00:03:10.079
And what we will try to do,
we'll try to get this red line to

40
00:03:10.079 --> 00:03:16.370
get to the optimal solution, but
kinda to get to the green line points.

41
00:03:16.370 --> 00:03:22.180
And we will do it by playing
around with ws and bs.

42
00:03:22.180 --> 00:03:27.860
So we need to somehow
figure out the error,

43
00:03:27.860 --> 00:03:32.770
how far away we are from
the true solution.

44
00:03:32.770 --> 00:03:37.287
And we can just simply measure
the distance between our points and

45
00:03:37.287 --> 00:03:40.667
our line and
just add them all together, right?

46
00:03:40.667 --> 00:03:46.957
And that's gonna correspond
how far we are from the line.

47
00:03:46.957 --> 00:03:49.457
So let's do the predict function.

48
00:03:51.419 --> 00:03:58.169
So predict function will simply take x,
right?

49
00:03:58.169 --> 00:04:03.020
And it's not the whole array.

50
00:04:03.020 --> 00:04:05.150
It's just, let's say, one number.

51
00:04:05.150 --> 00:04:08.990
And what it will do,
it will just return y,

52
00:04:08.990 --> 00:04:13.660
which is equal to our w_guess

53
00:04:13.660 --> 00:04:18.221
multiplied by x and + b_guess.

54
00:04:19.360 --> 00:04:24.590
And we will return y, okay?

55
00:04:24.590 --> 00:04:27.237
So that's our simple
function of prediction.

56
00:04:27.237 --> 00:04:30.470
And now I also want to define loss.

57
00:04:31.942 --> 00:04:36.789
So I'm already using terminology
which we will rely on when we will

58
00:04:36.789 --> 00:04:40.320
talk about machine learning examples.

59
00:04:40.320 --> 00:04:45.660
So with the loss function,
I need to simply figure

60
00:04:47.360 --> 00:04:52.390
out the distance between my line and
my points.

61
00:04:52.390 --> 00:04:57.360
So before I do that, let's introduce
additional helper function.

62
00:04:57.360 --> 00:05:05.834
So define mean_squared_error, yeah.

63
00:05:05.834 --> 00:05:10.964
And what it will do, it will just take

64
00:05:10.964 --> 00:05:15.608
all my y predictions and true Ys.

65
00:05:15.608 --> 00:05:17.979
Now define mean_squared_error.

66
00:05:17.979 --> 00:05:24.486
With mean_squared_error,
what I'm doing is just return,

67
00:05:24.486 --> 00:05:31.962
I can rely on tensor flow, reduce_mean.

68
00:05:35.807 --> 00:05:41.681
So reduce_mean of tensor flow function
will just calculate the mean value for

69
00:05:41.681 --> 00:05:44.267
all the arguments provided to it.

70
00:05:44.267 --> 00:05:48.780
But I want to also use squared.

71
00:05:48.780 --> 00:05:52.010
So do we have squared here?

72
00:05:53.920 --> 00:05:56.610
That's a lot of it, square, yes.

73
00:05:56.610 --> 00:06:02.690
So square will just simply,
well, squared our inputs.

74
00:06:02.690 --> 00:06:09.930
And I want to just use y_pred-Y.

75
00:06:09.930 --> 00:06:14.860
So what's happening here, I will just find

76
00:06:14.860 --> 00:06:20.390
the distance between my prediction and
true value of Y.

77
00:06:20.390 --> 00:06:24.280
I will square it because I don't
want it to be negative, right?

78
00:06:24.280 --> 00:06:28.596
So squaring it means that I will
always get the positive number.

79
00:06:28.596 --> 00:06:35.740
And then I will find the mean value of
all of those kinda squared distances.

80
00:06:36.850 --> 00:06:44.646
So if we, for instance,
right now print out, Mean.

81
00:06:46.982 --> 00:06:50.359
Actually, let's execute
this function first.

82
00:06:50.359 --> 00:06:55.844
So printing mean_squared_error for my,

83
00:06:59.622 --> 00:07:02.853
I can do something like this, predict,

84
00:07:06.745 --> 00:07:11.306
Of X and true Ys.

85
00:07:13.820 --> 00:07:15.690
So let's see if it's gonna work.

86
00:07:16.890 --> 00:07:22.310
It does, and it basically telling
me that right now with my guess of

87
00:07:22.310 --> 00:07:30.300
w equal to 0 and b_guess equal to 0
as well, we have pretty huge error.

88
00:07:30.300 --> 00:07:35.190
So it's gonna square the distance
between my line and those points.

89
00:07:35.190 --> 00:07:40.348
For instance, if I modify w,

90
00:07:43.291 --> 00:07:49.470
_guess and let's actually put it to
exactly to where our original data was.

91
00:07:49.470 --> 00:07:54.330
Remember, we set w, I changed it.

92
00:07:54.330 --> 00:08:01.098
Let's go to w=0.1 and b=0.5.

93
00:08:01.098 --> 00:08:05.018
We create our points, we plot them.

94
00:08:07.742 --> 00:08:09.258
Yeah, everything looks good.

95
00:08:11.761 --> 00:08:16.276
All those, yeah, error reduced
significantly just because I modified

96
00:08:16.276 --> 00:08:20.250
those ws and bs, but yeah,
it's still kinda some error.

97
00:08:20.250 --> 00:08:25.566
If we change w_guess and
b_guess to whatever values I've

98
00:08:25.566 --> 00:08:31.626
used in the original distribution and
then try to calculate this new

99
00:08:31.626 --> 00:08:37.280
error, You see that it's
dropped significantly.

100
00:08:39.040 --> 00:08:45.510
So basically our mean_square_error
will be our loss function.

101
00:08:45.510 --> 00:08:52.510
It will simply calculate kinda,
what is our mistake?

102
00:08:52.510 --> 00:08:55.530
How far are we from ideal solution?

103
00:08:55.530 --> 00:08:58.475
So if we modify w_guess and

104
00:08:58.475 --> 00:09:03.213
b from anywhere from those perfect values,

105
00:09:03.213 --> 00:09:07.694
for instance, to 1 and, I don't know,

106
00:09:07.694 --> 00:09:12.704
-5, you see that error is only increasing.

107
00:09:12.704 --> 00:09:17.887
What I'm trying to do right now is to
tell you that for machine learning and

108
00:09:17.887 --> 00:09:23.156
for our particular problem where we're
trying to hit our red line into this

109
00:09:23.156 --> 00:09:28.790
distribution, so kinda to put it
into the position of the green line.

110
00:09:28.790 --> 00:09:31.060
I need to specify the loss function,

111
00:09:31.060 --> 00:09:37.350
which will show me how far I
am from the real solution.

112
00:09:37.350 --> 00:09:43.328
And in my case, I just use the distance
in ys between my red line and

113
00:09:43.328 --> 00:09:47.809
corresponding ys of those blue points,
right?

114
00:09:47.809 --> 00:09:53.254
And I squared this distance to avoid of
negatives and just found the average,

115
00:09:53.254 --> 00:09:58.389
although I could have easily just sum
those distances together as well.

116
00:09:58.389 --> 00:10:01.059
It's just gonna lead to
a pretty large number.

