WEBVTT

1
00:00:00.110 --> 00:00:05.700
We already dig quite deep into
architecture of, [LAUGH] TensorFlow.

2
00:00:05.700 --> 00:00:11.346
But it kinda beats the purpose of the
introduction to machine learning, right?

3
00:00:11.346 --> 00:00:16.992
So once again I wanna return back and
tell you about Linear regression.

4
00:00:16.992 --> 00:00:24.161
And so it's almost like a grandfather
of your neural networks,

5
00:00:24.161 --> 00:00:31.063
so I want to show you how you can
actually tweak your weights and

6
00:00:31.063 --> 00:00:35.063
biases to get to the optimal value.

7
00:00:35.063 --> 00:00:40.413
So what we will do,
is simply first let's create the data,

8
00:00:40.413 --> 00:00:47.382
the data we will be using to to learn
something about this data distribution.

9
00:00:47.382 --> 00:00:55.602
So we will be using tensor flow random
to add a little bit noise to our data,

10
00:00:55.602 --> 00:00:59.855
and let's just define the function.

11
00:00:59.855 --> 00:01:05.475
Define let's say data creation.

12
00:01:05.475 --> 00:01:13.620
And what we can do, we can just provide
here the values we will try to find.

13
00:01:13.620 --> 00:01:16.386
So for instance, our weight for now,

14
00:01:16.386 --> 00:01:20.973
let's just keep only one weight and
one input signal, right?

15
00:01:20.973 --> 00:01:24.483
So for instance weight,
let's say equal to 0.1.

16
00:01:24.483 --> 00:01:30.615
Our bias, let’s say equal to 0.5, why not?

17
00:01:30.615 --> 00:01:35.796
And then in our function what
we will try to do is just,

18
00:01:35.796 --> 00:01:41.170
first generate x, and
that’s gonna be our = data.

19
00:01:41.170 --> 00:01:46.045
So I want to randomly generate it,
so I will use

20
00:01:46.045 --> 00:01:51.766
tf.random.uniform.

21
00:01:51.766 --> 00:01:52.872
If only I can type.

22
00:01:52.872 --> 00:01:56.822
How much data points do I want?

23
00:01:56.822 --> 00:02:01.945
Let's say, shape = (),
I can also specify it as

24
00:02:01.945 --> 00:02:06.844
the parameters, so n=100, for instance.

25
00:02:09.817 --> 00:02:16.509
So let's just print X,
just to see what it's gonna create.

26
00:02:16.509 --> 00:02:19.824
I haven't called my function yet,
right, so

27
00:02:19.824 --> 00:02:23.399
let's actually call it here,
data_creation.

28
00:02:23.399 --> 00:02:28.531
And in Python,
if hose arguments were provided.

29
00:02:28.531 --> 00:02:33.023
So if default values will be provided,
they will be used in the function body,

30
00:02:33.023 --> 00:02:34.331
but I can modify them.

31
00:02:34.331 --> 00:02:40.168
So for instance, if I explicitly
say I want my wb = now to 0.5,

32
00:02:40.168 --> 00:02:41.879
I can do that here.

33
00:02:41.879 --> 00:02:45.561
And if I don't specify anything else,

34
00:02:45.561 --> 00:02:50.368
then a default value b will
be used default value n.

35
00:02:50.368 --> 00:02:56.457
So what happened here,
we printed out X and

36
00:02:56.457 --> 00:03:01.362
in our X we have just 100 numbers

37
00:03:01.362 --> 00:03:07.465
uniformly distributed between 0 and 1.

38
00:03:07.465 --> 00:03:11.394
To show you that it's truly
uniformly distributed,

39
00:03:11.394 --> 00:03:15.220
what I can do,
I can just plot those numbers.

40
00:03:15.220 --> 00:03:21.830
So, let's say X =,
let's return back to our original value.

41
00:03:23.730 --> 00:03:31.231
So, new Tensor is created, what we can
do we can just use matplotlib inline.

42
00:03:31.231 --> 00:03:36.334
If you're once again not familiar
with the Jupyter Notebooks,

43
00:03:36.334 --> 00:03:41.919
this percentage in front of the line
means that I'm using Magic Word.

44
00:03:41.919 --> 00:03:46.425
In Jupyter lingo it means that I want
to run some internal commands which

45
00:03:46.425 --> 00:03:49.020
Jupyter Notebook will recognize.

46
00:03:49.020 --> 00:03:53.520
And, this particular
command matplotlib inline

47
00:03:53.520 --> 00:03:58.900
means that all the images created
by the matplotlib library.

48
00:03:58.900 --> 00:04:03.431
Will be printed out on screen
in the Jupiter Notebook.

49
00:04:03.431 --> 00:04:08.676
A matplotlib is actually a super
nice library for visualization.

50
00:04:08.676 --> 00:04:13.363
If you go to matplotlib.org,
you can find a lot of useful

51
00:04:13.363 --> 00:04:18.942
information about this library,
as well as really nice examples.

52
00:04:18.942 --> 00:04:22.390
That's what I usually use,
I just kind of go to the examples.

53
00:04:22.390 --> 00:04:28.058
Look at the Graphs I want to draw, what
kind of similar graphs I want to draw.

54
00:04:28.058 --> 00:04:32.336
I just click on them, and
that will give me an example of

55
00:04:32.336 --> 00:04:36.991
the Python code which I can then
just adjust to my purposes.

56
00:04:36.991 --> 00:04:39.480
So you can say this
library is pretty awesome.

