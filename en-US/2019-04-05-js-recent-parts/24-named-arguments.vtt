WEBVTT

1
00:00:02.360 --> 00:00:04.395
&gt;&gt; Kyle Simpson: Okay.
So hopefully you're feeling a lot

2
00:00:04.395 --> 00:00:07.537
more confident now about some
of the nuances and quirks, but

3
00:00:07.537 --> 00:00:11.234
remember with destructuring,
watching me do some destructurings and

4
00:00:11.234 --> 00:00:14.825
even having typed it out a couple
of times, it's not nearly enough.

5
00:00:14.825 --> 00:00:16.669
You're gonna have to practice with this.

6
00:00:16.669 --> 00:00:22.019
So I wanna show you a couple of
examples of using it in a higher level

7
00:00:22.019 --> 00:00:27.482
sense that should help you get
more familiar with destructuring.

8
00:00:27.482 --> 00:00:29.830
There is a pattern called named arguments.

9
00:00:29.830 --> 00:00:31.834
It's an idiom essentially and

10
00:00:31.834 --> 00:00:35.311
this is a actually a real
thing in certain languages.

11
00:00:35.311 --> 00:00:38.837
In JavaScript we don't have
a thing called named arguments but

12
00:00:38.837 --> 00:00:43.841
by using that object destructuring syntax,
we accomplish essentially the same thing.

13
00:00:43.841 --> 00:00:49.350
So if I had a lookup record function that
used positional arguments like store and

14
00:00:49.350 --> 00:00:53.806
id, it means that when I call
lookupRecord I have to remember what

15
00:00:53.806 --> 00:00:55.926
order those arguments are in.

16
00:00:55.926 --> 00:00:57.179
And that can be annoying.

17
00:00:57.179 --> 00:01:01.375
Having named arguments at a call site
means I can tell it this argument goes to

18
00:01:01.375 --> 00:01:04.608
this parameter and
this argument goes to this parameter.

19
00:01:04.608 --> 00:01:08.324
Since we don't support that,
like for example, Scala and

20
00:01:08.324 --> 00:01:11.234
Objective C, they support named arguments.

21
00:01:11.234 --> 00:01:16.478
We don't support that, but we do have the
option, like you see here on line five,

22
00:01:16.478 --> 00:01:20.812
of declaring a function with
an object parameter, of properties.

23
00:01:20.812 --> 00:01:26.180
And then the call site,
line 12, when we use an object,

24
00:01:26.180 --> 00:01:33.429
we are effectively saying down here,
the value 42 goes to the parameter ID.

25
00:01:33.429 --> 00:01:39.502
So that's an effect and
a naming of the argument at the call site.

26
00:01:39.502 --> 00:01:43.525
This is becoming extremely
common idiom within JavaScript.

27
00:01:43.525 --> 00:01:49.349
I strongly recommend you start thinking
about this when you design your functions,

28
00:01:49.349 --> 00:01:51.326
the new ones that you write.

29
00:01:51.326 --> 00:01:56.721
My rule of thumb is any function that I
write from here on, if it has three or

30
00:01:56.721 --> 00:02:01.090
more inputs, I always use this
object destructuring now.

31
00:02:01.090 --> 00:02:06.030
Because it's an almost guarantee that I'm
going to sometime later forget what order

32
00:02:06.030 --> 00:02:09.474
they go in or want to skip one of them or
something like that.

33
00:02:09.474 --> 00:02:14.348
And it's always gonna be better
to have this named argument call

34
00:02:14.348 --> 00:02:16.343
site syntax as an option.

35
00:02:16.343 --> 00:02:21.849
If it's only one or two parameters it's
kind of a judgement call as to whether or

36
00:02:21.849 --> 00:02:27.293
not it's worth it to have the overhead of
needing to put an object there or not.

37
00:02:27.293 --> 00:02:31.355
The good news about named arguments
is that you don't have to worry about

38
00:02:31.355 --> 00:02:33.493
position and remembering the order.

39
00:02:33.493 --> 00:02:36.504
The downside is you have
to remember the name.

40
00:02:36.504 --> 00:02:40.037
You have to know what
the function calls the parameter.

41
00:02:40.037 --> 00:02:46.964
Because if they call it CB and
you call it FN, it's not gonna match up.

42
00:02:46.964 --> 00:02:51.947
So my suggestion to you to deal with
that particular downside of not knowing

43
00:02:51.947 --> 00:02:57.167
the naming, is if you start using this
idiom, come up with a set of conventions

44
00:02:57.167 --> 00:03:01.697
for the names of the common kinds
of things you pass into functions.

45
00:03:01.697 --> 00:03:07.136
For example, if you pass in callbacks,
always call it CB.

46
00:03:07.136 --> 00:03:10.854
And then in the back of your head, every
time you're going to make a call site and

47
00:03:10.854 --> 00:03:13.035
pass in a callback,
you know it's called CB.

48
00:03:13.035 --> 00:03:16.546
And if you're going to pass in an array,
always call it ARR.

49
00:03:16.546 --> 00:03:19.866
And if you're going to pass
in a single primitive value,

50
00:03:19.866 --> 00:03:21.396
always call it V and so on.

51
00:03:21.396 --> 00:03:25.611
And if you come up with that
set of standard conventions for

52
00:03:25.611 --> 00:03:30.513
yourself and document it for
your team, 99% of the problems that

53
00:03:30.513 --> 00:03:35.432
you would have about remembering
those things will easily go away.

54
00:03:35.432 --> 00:03:40.408
And then you only have a few random
corner cases that you have to remember or

55
00:03:40.408 --> 00:03:41.218
document.

56
00:03:41.218 --> 00:03:45.618
So named arguments is actually one
of my favorite usages of object

57
00:03:45.618 --> 00:03:50.179
destructuring and has become
an extremely common and popular idiom

