WEBVTT

1
00:00:00.000 --> 00:00:04.607
&gt;&gt; Kyle Simpson: Welcome everyone
to JavaScript the recent parts.

2
00:00:04.607 --> 00:00:08.658
We have looked in other courses
here on Frontend Masters at

3
00:00:08.658 --> 00:00:13.547
the deeper prospectives on JavaScript,
the deep core foundations.

4
00:00:13.547 --> 00:00:16.668
But it is quite easy to
focus on those parts and

5
00:00:16.668 --> 00:00:20.133
then feel like JavaScript
is leaving you behind.

6
00:00:20.133 --> 00:00:23.814
And some of you have heard this
term before, JavaScript fatigue,

7
00:00:23.814 --> 00:00:28.676
feeling like my goodness, this language is
changing so fast, it seems like every few

8
00:00:28.676 --> 00:00:32.291
months there's a whole new blog
post about a whole new feature and

9
00:00:32.291 --> 00:00:33.830
how I can possibly keep up?

10
00:00:33.830 --> 00:00:38.567
And some people have gone to the extreme
here and almost rebuild against any sort

11
00:00:38.567 --> 00:00:42.539
of keeping up with JavaScript like
JavaScript changing too fast.

12
00:00:42.539 --> 00:00:47.389
Some people have proposed that
JavaScript should stop like

13
00:00:47.389 --> 00:00:51.948
a moratorium on new features for
some period of time, so

14
00:00:51.948 --> 00:00:56.702
there's varying degrees of
reaction to this quick pace.

15
00:00:56.702 --> 00:01:00.864
So just a quick bit of contextual
history here, JavaScript for

16
00:01:00.864 --> 00:01:05.812
a long period of time went through what
we would disaffectionately refer to

17
00:01:05.812 --> 00:01:07.000
as the dark ages.

18
00:01:07.000 --> 00:01:11.158
That was the period of time
between ES3 and ES5 and

19
00:01:11.158 --> 00:01:13.870
that was actually a full decade.

20
00:01:13.870 --> 00:01:18.365
From 1999 to 2009, essentially nothing
happened in the JavaScript language.

21
00:01:18.365 --> 00:01:20.946
And during that same period of time,

22
00:01:20.946 --> 00:01:26.195
a lot of things happened in the broader
web ecosystem where, for example,

23
00:01:26.195 --> 00:01:31.549
Internet Explorer 6 had come out and
then stagnated for more than 5 years.

24
00:01:31.549 --> 00:01:34.277
No updates,
no changes to the web platform.

25
00:01:34.277 --> 00:01:39.052
And many people became very frustrated and
started up whole new browsers.

26
00:01:39.052 --> 00:01:41.292
I mean, we have Mozilla and Chrome and

27
00:01:41.292 --> 00:01:45.352
all these because of this stagnation
in the web that coincided with or

28
00:01:45.352 --> 00:01:49.356
fell in the middle of the stagnation
of JavaScript, the language.

29
00:01:49.356 --> 00:01:53.307
Now the reason for that stagnation was
actually a lot of political infighting.

30
00:01:53.307 --> 00:01:57.563
They were trying to work on the ES4
spec and they were divisions and

31
00:01:57.563 --> 00:02:01.678
they couldn't figure it out and
they basically just departed.

32
00:02:01.678 --> 00:02:03.904
They went back to their neutral sites and

33
00:02:03.904 --> 00:02:07.055
didn't make any updates
because they couldn't agree.

34
00:02:07.055 --> 00:02:10.474
And then they came back
together finally in 2009, and

35
00:02:10.474 --> 00:02:14.957
they said we're not gonna have any of
these big factions or disagreements.

36
00:02:14.957 --> 00:02:18.949
We're gonna have this one JavaScript
policy which is everybody agrees that we

37
00:02:18.949 --> 00:02:23.121
don't put something in the spec unless we
all agree that it's gonna be faithfully

38
00:02:23.121 --> 00:02:23.922
implemented.

39
00:02:23.922 --> 00:02:26.622
And by that point there were
a lot more stakeholders,

40
00:02:26.622 --> 00:02:29.022
a lot more browsers both mobile and
desktop, or

41
00:02:29.022 --> 00:02:32.272
even starting to get stakeholders
that are not browsers at all.

42
00:02:32.272 --> 00:02:35.258
Other environments like Node.js and
things like that.

43
00:02:35.258 --> 00:02:38.584
And so, they had a lot more people
at the table at that point,

44
00:02:38.584 --> 00:02:42.903
they said the best thing for JavaScript
is that JavaScript is one JavaScript.

45
00:02:42.903 --> 00:02:46.467
That there isn't this case
like we had in the IE6 days.

46
00:02:46.467 --> 00:02:49.974
Where there's the different JavaScript
running in the IE browser than

47
00:02:49.974 --> 00:02:52.200
is running for
example in a Mozilla browser.

48
00:02:52.200 --> 00:02:55.349
So they said no more of that, we have
to agree that there's one JavaScript.

49
00:02:55.349 --> 00:02:59.033
And this was a tremendously
important inflection point for

50
00:02:59.033 --> 00:03:00.808
the history of JavaScript.

51
00:03:00.808 --> 00:03:05.464
And its signaled since we've got our
process back together, we figured out

52
00:03:05.464 --> 00:03:10.572
the kinks, if you will, and now we have
people agreeing to work towards progress.

53
00:03:10.572 --> 00:03:13.250
So it's seem very hopeful like year five

54
00:03:13.250 --> 00:03:18.233
is the signal the JavaScript is gonna
restart the wheels and move forward.

55
00:03:18.233 --> 00:03:25.596
And then 2010 and 2011 and 12 and 13 have
gone by and here we are 3 or 4 years.

56
00:03:25.596 --> 00:03:30.675
And nothing has changed
about JavaScript again.

57
00:03:30.675 --> 00:03:35.038
No that they are doing work,
they were doing lots of work but they were

58
00:03:35.038 --> 00:03:39.631
discussing vehemently disagreeing and
trying to work out the issues for

59
00:03:39.631 --> 00:03:43.634
all of those things that were
actually the problems with ES4.

60
00:03:43.634 --> 00:03:45.783
So they were revisiting these issues and
saying,

61
00:03:45.783 --> 00:03:48.454
these are all still things that
we wanna do with the language.

62
00:03:48.454 --> 00:03:52.782
We wanna move the language forward to be
a full class programming language and

63
00:03:52.782 --> 00:03:56.321
there a lot of features that we
wanna add to language to do that.

64
00:03:56.321 --> 00:04:00.854
So that it can be seen as equal to any
of other major programming languages.

65
00:04:00.854 --> 00:04:05.029
And so, there was a lot of disagreement
about each individual feature and

66
00:04:05.029 --> 00:04:09.290
it took months and sometimes years for
them to work out these differences.

67
00:04:09.290 --> 00:04:14.349
But the end result was that
we didn't get an ES6 or

68
00:04:14.349 --> 00:04:20.504
ES2015, we didn't get that
land until late 2015.

69
00:04:20.504 --> 00:04:24.731
So 2009 to 2015,
we have 2009 to 2015 of 6 years.

70
00:04:24.731 --> 00:04:28.442
We had a decade of no change, and

71
00:04:28.442 --> 00:04:34.361
then six years since
Java Script had been updated.

72
00:04:34.361 --> 00:04:37.490
And at that point when they landed ES6,
and

73
00:04:37.490 --> 00:04:41.982
they had all these changes, and
boy there was a lot of changes.

74
00:04:41.982 --> 00:04:45.117
Something like over 300 new features or

75
00:04:45.117 --> 00:04:51.140
tweaks from small things to giant whole
new features, like modules and classes.

76
00:04:51.140 --> 00:04:54.113
Major stuff and
even tiny little helper APIs and

77
00:04:54.113 --> 00:04:56.354
little syntax and stuff like that.

78
00:04:56.354 --> 00:05:01.917
So it's this big, big change that
felt like it had been pending not for

79
00:05:01.917 --> 00:05:04.196
6 years but for 16 years.

80
00:05:04.196 --> 00:05:08.124
There's this frustration like we've gotta
force all of this stuff into the language.

81
00:05:08.124 --> 00:05:10.988
And naturally,
there was a bunch of blow back.

82
00:05:10.988 --> 00:05:13.883
Like you just completely
changed the entire language and

83
00:05:13.883 --> 00:05:17.982
now every blog post that I read I can't
even understand what they're writing cuz

84
00:05:17.982 --> 00:05:22.219
there's all these like arrow symbols all
over the place and dots dots everywhere.

85
00:05:22.219 --> 00:05:25.565
And I don't even know what
this JavaScript is people say,

86
00:05:25.565 --> 00:05:28.446
this is not the JavaScript I grew up with,
right?

87
00:05:28.446 --> 00:05:31.236
And so
there was this push back that said well,

88
00:05:31.236 --> 00:05:36.104
how do we get a process where JavaScript
can evolve, that it doesn't stagnate,

89
00:05:36.104 --> 00:05:39.770
that we don't wait for ten or
even six years to get features?

90
00:05:39.770 --> 00:05:45.331
But we also don't show up with this
massive load that we just dump on people

91
00:05:45.331 --> 00:05:50.442
and then nobody can process it and
even to this day four years later,

92
00:05:50.442 --> 00:05:54.497
people are still reeling
from the change set of ES6.

93
00:05:54.497 --> 00:05:59.682
And so in that ES6 process they also
voted to say the healthiest thing for

94
00:05:59.682 --> 00:06:02.062
our language is not to stagnate.

95
00:06:02.062 --> 00:06:05.994
It's also not to collect things
up into some symbolic thing like,

96
00:06:05.994 --> 00:06:10.270
this is version six of the language,
and this version seven of the language.

97
00:06:10.270 --> 00:06:13.379
But rather they felt like
the healthiest thing for

98
00:06:13.379 --> 00:06:16.425
JavaScript is to move
forward little by little.

99
00:06:16.425 --> 00:06:20.850
Incrementally, like a train leaving
the station every 15 minutes, on time,

100
00:06:20.850 --> 00:06:23.726
every year,
the JavaScript spec is gonna come out.

101
00:06:23.726 --> 00:06:26.011
And they reflected that
even in the naming.

102
00:06:26.011 --> 00:06:28.235
They changed officially
the name of the language.

103
00:06:28.235 --> 00:06:33.168
So when the update to
JavaScript came in 2016,

104
00:06:33.168 --> 00:06:37.308
that wasn't ES7, that was ES2016.

105
00:06:37.308 --> 00:06:41.843
And then another update came in 2017 and
2018, and

106
00:06:41.843 --> 00:06:48.204
even just within the last few weeks,
we got an official update called ES2019.

107
00:06:48.204 --> 00:06:51.088
Now, just as a little bit of nuance there,

108
00:06:51.088 --> 00:06:55.175
they vote in the early part of the year,
and then by mid year,

109
00:06:55.175 --> 00:07:00.650
it's officially ratified by ECMA,
the organization that manages standards.

110
00:07:00.650 --> 00:07:04.458
So we at the current moment
of this course or in-between,

111
00:07:04.458 --> 00:07:09.680
we have voted on what those specs are,
but they have to be officially ratified.

112
00:07:09.680 --> 00:07:13.203
That's essentially a rubber
stamp at this point, so

113
00:07:13.203 --> 00:07:16.109
we know what ES2019 is gonna look like.

114
00:07:16.109 --> 00:07:21.433
And they're already talking about things
that are gonna happen in ES2020 and

115
00:07:21.433 --> 00:07:22.368
in 2021.

116
00:07:22.368 --> 00:07:27.202
Nobody knows when a feature is gonna
land until it reaches the final stage.

117
00:07:27.202 --> 00:07:31.738
There are 5 stages of the TC39
proposal process from 0 to 4,

118
00:07:31.738 --> 00:07:36.362
and stage 4 means done, finished,
shipped, it's complete.

119
00:07:36.362 --> 00:07:41.178
So anything that makes stage four
by that earlier vote, January or

120
00:07:41.178 --> 00:07:45.564
February of a year,
anything that has reached the stage four

121
00:07:45.564 --> 00:07:48.844
by the end of that meeting is in for
that year.

122
00:07:48.844 --> 00:07:51.756
And if it's on stage three or
before it's not in, but

123
00:07:51.756 --> 00:07:55.466
it'll still be on the next train or
the next train or the next train.

124
00:07:55.466 --> 00:07:59.598
So they setup this process and
said, let's keep proposals moving

125
00:07:59.598 --> 00:08:03.599
independently rather than having
to keep everything in a gate.

126
00:08:03.599 --> 00:08:07.726
And let these proposals move as quickly or
as slowly as is appropriate.

127
00:08:07.726 --> 00:08:10.449
Because some features we know pretty well,

128
00:08:10.449 --> 00:08:14.718
it's a small define surface area
let's just move forward with it and

129
00:08:14.718 --> 00:08:18.566
some things are huge and
it may take years for us to figure out.

130
00:08:18.566 --> 00:08:21.486
And one of the big
challenges with JavaScript,

131
00:08:21.486 --> 00:08:25.872
backwards compatibility means once
something is in it's in, right?

132
00:08:25.872 --> 00:08:31.141
We don't back stuff out of the language
because then we could break websites.

133
00:08:31.141 --> 00:08:33.445
So there's a tremendous pressure and

134
00:08:33.445 --> 00:08:37.701
responsibility that when something
goes in that it's really ready.

135
00:08:37.701 --> 00:08:42.253
That it's been documented, that it's
been researched, that it's been tested,

136
00:08:42.253 --> 00:08:46.759
that it's been implemented multiple times,
so that we know the engines can do it.

137
00:08:46.759 --> 00:08:51.653
So they put in all of this structure and
process to say, let's get on a better

138
00:08:51.653 --> 00:08:55.952
train, where every year
are continually evolving the language.

139
00:08:55.952 --> 00:09:00.483
And that's where our status quo is today,
that each year we see

140
00:09:00.483 --> 00:09:04.674
a variety of different features
from tiny little tweaks,

141
00:09:04.674 --> 00:09:10.252
like in ES2019 they made some very
nuanced tweaks to jsons.stringify.

142
00:09:10.252 --> 00:09:14.832
The way it handles Unicode character
encoding, not something that is probably

143
00:09:14.832 --> 00:09:18.674
pressing on most developers minds,
but important nonetheless.

144
00:09:18.674 --> 00:09:23.766
And then we have big features which one of
them will talk about, like flat mapping,

145
00:09:23.766 --> 00:09:27.859
that's a big feature especially
if your functional programmer.

146
00:09:27.859 --> 00:09:30.862
You love having the ability
to do flat mapping, and so

147
00:09:30.862 --> 00:09:34.684
we get API then we get tiny little
tweaks and everything in between.

148
00:09:34.684 --> 00:09:39.148
And so we're hoping that we never see
either of the two things that have

149
00:09:39.148 --> 00:09:41.430
happened over the last 16 years.

150
00:09:41.430 --> 00:09:44.985
We're hoping that we never see a long
period of time of nothing happening.

151
00:09:44.985 --> 00:09:49.631
And we're also hoping that we never see
a year show up where just everything

152
00:09:49.631 --> 00:09:52.370
dumps on everyone and we're overwhelmed.

153
00:09:52.370 --> 00:09:56.913
So that fatigue that people
are feeling is understandable.

154
00:09:56.913 --> 00:10:02.535
But in a sense, the alternatives
are much worse for our industry.

155
00:10:02.535 --> 00:10:07.780
The alternative is that if JavaScript
stopped evolving to give everybody time

156
00:10:07.780 --> 00:10:12.713
to catch up, then JavaScript's gonna
get surpassed by something else.

157
00:10:12.713 --> 00:10:16.188
We already seen in a sense
existential threats to JavaScript

158
00:10:16.188 --> 00:10:20.286
as an authoring language when we
think about things like Web Assembly.

159
00:10:20.286 --> 00:10:24.186
More and more people are saying well,
I don't even need to write that in

160
00:10:24.186 --> 00:10:27.763
JavaScript, I can write it in Go or
Rust or some other language and

161
00:10:27.763 --> 00:10:31.749
just go write to the browser and
skip the JavaScript language entirely.

162
00:10:31.749 --> 00:10:36.145
So if JavaScript the language wants to
continue to be a vital part of the web,

163
00:10:36.145 --> 00:10:37.874
it has to continue to evolve.

164
00:10:37.874 --> 00:10:43.281
I don't subscribe to the belief that we
are approaching some final end point for

165
00:10:43.281 --> 00:10:44.258
JavaScript.

166
00:10:44.258 --> 00:10:46.371
It's gonna continue to evolve,

167
00:10:46.371 --> 00:10:49.999
we may not be adding huge new
features every single year.

168
00:10:49.999 --> 00:10:52.570
We may be slowing down on the big changes.

169
00:10:52.570 --> 00:10:57.414
But then again, we might be adding huge
changes like someday we may be talking

170
00:10:57.414 --> 00:11:00.247
about adding static types to JavaScript,
or

171
00:11:00.247 --> 00:11:03.611
we may be talking about
adding macros to JavaScript.

172
00:11:03.611 --> 00:11:08.579
There are a number of features that I'm
very hopeful for like pattern matching,

173
00:11:08.579 --> 00:11:12.962
and the optional chaining operators so
that you don't have to check for

174
00:11:12.962 --> 00:11:15.827
undefined at each level
of a property access.

175
00:11:15.827 --> 00:11:19.003
Those are great features,
they are in various stages and

176
00:11:19.003 --> 00:11:21.663
moving their way towards
getting on the train.

177
00:11:21.663 --> 00:11:25.035
So those things will continue
to happen for the language.

