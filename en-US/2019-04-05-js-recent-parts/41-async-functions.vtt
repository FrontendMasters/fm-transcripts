WEBVTT

1
00:00:01.793 --> 00:00:05.885
&gt;&gt; Kyle Simpson: The next feature that we
want to look at, one of the most highly

2
00:00:05.885 --> 00:00:10.309
anticipated features that people got very,
very excited about.

3
00:00:10.309 --> 00:00:15.072
As a matter of fact, this feature was
already excited more than two years before

4
00:00:15.072 --> 00:00:17.148
it landed officially in the spec.

5
00:00:17.148 --> 00:00:21.186
People were citing and using this
feature as if it was already there,

6
00:00:21.186 --> 00:00:25.502
because of that level of excitement,
and that is the async function, and

7
00:00:25.502 --> 00:00:27.609
also the await syntax inside of it.

8
00:00:27.609 --> 00:00:31.942
So to give you a quick glimpse into
why we might need async functions,

9
00:00:31.942 --> 00:00:34.344
and the await keyword inside of them.

10
00:00:34.344 --> 00:00:38.864
Let's look at another feature that
landed in ES6, which was promises.

11
00:00:38.864 --> 00:00:44.109
Promises are a way of representing
a future value in a time-independent way.

12
00:00:44.109 --> 00:00:49.587
And so you can specify chains of
asynchronous steps, much like this.

13
00:00:49.587 --> 00:00:55.801
I could call fetchCurrentUser, and then I
could call .then on the returned promise.

14
00:00:55.801 --> 00:01:00.195
And when fetchCurrentUser finishes,
it would invoke the onUser and

15
00:01:00.195 --> 00:01:02.628
provide me the user that was fetched.

16
00:01:02.628 --> 00:01:06.446
And then I could fetch both
their archived orders and

17
00:01:06.446 --> 00:01:11.216
their current orders, and wait for
all of those to come back, and

18
00:01:11.216 --> 00:01:16.528
then move on to the next step, where
I then say print out the user orders.

19
00:01:16.528 --> 00:01:20.782
This is what's called promise chaining,
and for a good year or

20
00:01:20.782 --> 00:01:26.083
two was the pretty much accepted standard
for the new way of doing asynchronous

21
00:01:26.083 --> 00:01:30.919
programming, instead of what we refer
to as the nested callback hell.

22
00:01:30.919 --> 00:01:34.811
We can organize things into these
vertical chains of promises.

23
00:01:34.811 --> 00:01:39.659
And I'll admit that, actually, for
a number of years, long before promises

24
00:01:39.659 --> 00:01:44.434
even landed officially in ES6, for
a number of years I was very excited about

25
00:01:44.434 --> 00:01:49.087
this syntax compared to its capabilities,
its equivalent in callbacks.

26
00:01:49.087 --> 00:01:53.450
This is a much nicer syntax, or
at least it seemed that way.

27
00:01:53.450 --> 00:01:55.910
But I'll tell you that
as things stand now,

28
00:01:55.910 --> 00:01:59.779
I no longer think that we should be
writing promise chains like this.

29
00:01:59.779 --> 00:02:02.652
Not that we shouldn't use promises,
they're great, but

30
00:02:02.652 --> 00:02:06.279
I don't think that we should do .then
chains over and over and over again.

31
00:02:06.279 --> 00:02:11.483
So, I now consider this to be
somewhat of anti-pattern, and

32
00:02:11.483 --> 00:02:18.105
what replaces it is the async-sync
pattern that we get from async functions.

33
00:02:18.105 --> 00:02:21.542
So let's start first,
before we understand async functions,

34
00:02:21.542 --> 00:02:23.271
let's start with generators.

35
00:02:23.271 --> 00:02:25.439
We talked a bit ago about generators.

36
00:02:25.439 --> 00:02:29.625
Another way of thinking about
what a generator can do is that,

37
00:02:29.625 --> 00:02:33.409
because there's an iterator
protocol attached to it,

38
00:02:33.409 --> 00:02:36.885
it can pause itself by
virtue of the yield keyword.

39
00:02:36.885 --> 00:02:40.943
So line two says,
fetch the current user, and

40
00:02:40.943 --> 00:02:45.328
yield out the result of that,
which is a promise.

41
00:02:45.328 --> 00:02:48.322
And then wait for that to come back.

42
00:02:48.322 --> 00:02:52.802
And that's why I'm then able to say,
user =,

43
00:02:52.802 --> 00:02:58.627
because that whole statement
pauses until we get a user bank.

44
00:02:58.627 --> 00:03:02.322
The way it does the pausing
is actually that runner.

45
00:03:02.322 --> 00:03:08.025
I'm using a library utility, and
there are dozens of them out there.

46
00:03:08.025 --> 00:03:11.777
You may have heard of libraries like Co,
or Koa, or

47
00:03:11.777 --> 00:03:16.512
Q, or Bluebird, or
other sorts of promise utility libraries.

48
00:03:16.512 --> 00:03:21.604
They all have a utility on them which
is able to run generators as if

49
00:03:21.604 --> 00:03:27.177
they're this sort of
asynchronous/synchronous tradeoff pattern.

50
00:03:27.177 --> 00:03:30.442
Which means that if you yield
out a promise, it will wait for

51
00:03:30.442 --> 00:03:34.641
it to resolve before resuming your
generator, and give you the value back.

52
00:03:34.641 --> 00:03:37.660
So this syntax is much
more straightforward.

53
00:03:37.660 --> 00:03:40.094
It's a very almost
synchronous-looking syntax.

54
00:03:40.094 --> 00:03:44.414
I'm saying user = yield fetchCurrentUser.

55
00:03:44.414 --> 00:03:47.289
And then I'm saying archivedOrders,

56
00:03:47.289 --> 00:03:53.138
currentOrders = the fetched archivedOrders
and the fetched currentOrders.

57
00:03:53.138 --> 00:03:58.720
And I'll just yield until those
asynchronous operations have finished.

58
00:03:58.720 --> 00:04:01.876
This is what we call
the sync-async pattern.

59
00:04:01.876 --> 00:04:06.504
And we could do this starting
with ES6 because we had promises,

60
00:04:06.504 --> 00:04:08.229
and we had generators.

61
00:04:08.229 --> 00:04:14.186
And so, many people started moving from
promise chains to this sync-async pattern.

62
00:04:14.186 --> 00:04:19.093
The unfortunate part, of course, was
that you had to have a runner that could

63
00:04:19.093 --> 00:04:23.414
manage that whole pause and
resume thing with the iterator for you.

64
00:04:23.414 --> 00:04:28.592
And so almost this soon as ES6 was
landing with promises and generators,

65
00:04:28.592 --> 00:04:33.100
people were saying, hey,
can you give me syntactic support for

66
00:04:33.100 --> 00:04:38.387
doing that whole pause and resume thing
without needing a library runner?

67
00:04:38.387 --> 00:04:43.183
And that is exactly what
the async function does.

68
00:04:43.183 --> 00:04:48.934
The async function, now we use an await
keyword, instead of a yield keyword.

69
00:04:48.934 --> 00:04:50.325
It does the same thing,

70
00:04:50.325 --> 00:04:54.581
which is that it locally pauses while
that promise finishes resolving.

71
00:04:54.581 --> 00:04:58.075
And once it finishes,
it gives us the value back.

72
00:04:58.075 --> 00:05:02.241
So inside of async functions, all I
have to do is await on a promise, and

73
00:05:02.241 --> 00:05:03.708
then get the value back.

74
00:05:03.708 --> 00:05:08.780
And I have a very synchronous-looking
style with assignments, instead of

75
00:05:08.780 --> 00:05:13.785
having to have this nested promise
chaining kind of style of programming.

76
00:05:13.785 --> 00:05:18.407
And you'll notice down on line 13, all I
have to do is call the async function.

77
00:05:18.407 --> 00:05:23.095
I don't need some library utility
to run the iterator for me.

78
00:05:23.095 --> 00:05:27.664
Essentially they built the whole runner
thing into the JavaScript engine, and

79
00:05:27.664 --> 00:05:29.517
they gave us this syntax for it.

80
00:05:29.517 --> 00:05:34.701
So it's understandable why people have
been so excited about the async function,

81
00:05:34.701 --> 00:05:39.514
is because this is so much vastly improved
of a syntax over callback hell, and

82
00:05:39.514 --> 00:05:42.495
it's even more improved
over promise chains.

83
00:05:42.495 --> 00:05:46.533
And so this is a style of asynchronous
programming that many people

84
00:05:46.533 --> 00:05:50.208
are comfortable with, and
that want to be able to write, and

85
00:05:50.208 --> 00:05:53.403
now we have first-class
syntactic support for it.

86
00:05:53.403 --> 00:05:58.513
This shipped, by the way, the async
await functions shipped in ES 2017.

87
00:05:58.513 --> 00:06:03.155
So they are in almost every browser that
you're likely to be using these days.

88
00:06:03.155 --> 00:06:06.639
And in fact, they were in browsers
quite a bit earlier than that.

89
00:06:06.639 --> 00:06:13.330
It's just it officially shipped
in the spec in early 2017.

