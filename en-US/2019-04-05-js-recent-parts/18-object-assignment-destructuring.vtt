WEBVTT

1
00:00:00.000 --> 00:00:03.514
&gt;&gt; Kyle Simpson: Okay, so
exactly like with array destructuring,

2
00:00:03.514 --> 00:00:08.255
if the target that we're assigning
to in one of these destructurings

3
00:00:08.255 --> 00:00:12.585
is already an existing location,
like an existing variable,

4
00:00:12.585 --> 00:00:15.958
then we don't need to
keep the declarations on.

5
00:00:15.958 --> 00:00:22.916
So for example, if I already had var first
and second having been created somewhere,

6
00:00:22.916 --> 00:00:27.084
then I don't need the vars
on those to be included.

7
00:00:27.084 --> 00:00:31.641
The same is gonna be true over here,
if I have a var first and

8
00:00:31.641 --> 00:00:35.642
a var second,
I guess we can take off the third now.

9
00:00:35.642 --> 00:00:39.231
If I've a var first and
a var second that all ready exists,

10
00:00:39.231 --> 00:00:42.537
then I don't need a declaration
here to assign to it.

11
00:00:42.537 --> 00:00:45.935
However, there is a little catch.

12
00:00:45.935 --> 00:00:49.987
And that is, that because of our
history of overloading things,

13
00:00:49.987 --> 00:00:54.184
the usage of this curly brace without
any declarator in front of it,

14
00:00:54.184 --> 00:00:57.720
without anything else in front
of it makes JavaScript's

15
00:00:57.720 --> 00:01:02.090
parser think that it's a block
rather than a destructuring pattern.

16
00:01:02.090 --> 00:01:07.641
So this will end up throwing a syntax
error because that's not valid syntax for

17
00:01:07.641 --> 00:01:08.321
a block.

18
00:01:08.321 --> 00:01:12.608
And so, unfortunately because
of our history of having our,

19
00:01:12.608 --> 00:01:17.638
overloading of curly braces,
meaning like fifteen different things,

20
00:01:17.638 --> 00:01:21.522
they had to come up with some
sort of way to distinguish.

21
00:01:21.522 --> 00:01:25.066
That this is a destructuring pattern and
not a block.

22
00:01:25.066 --> 00:01:29.073
And the choice that they
made is both good and bad.

23
00:01:29.073 --> 00:01:33.581
So here's how you disambiguate
a destructuring pattern that has no

24
00:01:33.581 --> 00:01:34.535
declarator.

25
00:01:34.535 --> 00:01:41.801
You have to wrap the entire
thing in a parenthesis.

26
00:01:41.801 --> 00:01:43.788
Not just the pattern itself but

27
00:01:43.788 --> 00:01:47.387
the whole statement has to
be wrapped in a parenthesis.

28
00:01:47.387 --> 00:01:54.339
That's how you disambiguate that this is a
destructuring pattern instead of a block.

29
00:01:56.836 --> 00:02:01.481
&gt;&gt; Kyle Simpson: Remember you don't need
those parenthesis if there is anything

30
00:02:01.481 --> 00:02:04.845
else in front of it,
including a declarator.

31
00:02:04.845 --> 00:02:07.567
Or, you recall that we
talked earlier with arrays.

32
00:02:07.567 --> 00:02:15.289
That sometimes you wanna have a reference
to the object, in this case, as well.

33
00:02:15.289 --> 00:02:20.118
So in the case where I wanna
grab a reference to the thing as

34
00:02:20.118 --> 00:02:24.848
well as to the destructure it,
I could say temp equals,

35
00:02:24.848 --> 00:02:28.185
and now I don't need the parenthesis.

36
00:02:28.185 --> 00:02:32.537
Because this curly brace is no longer in
a position where it could be confused

37
00:02:32.537 --> 00:02:33.360
with a block.

38
00:02:41.060 --> 00:02:46.130
&gt;&gt; Kyle Simpson: So for that reason alone,
if I'm going to both destructure and

39
00:02:46.130 --> 00:02:52.073
also capture the whole value, I actually
do prefer to do it in this order.

40
00:02:52.073 --> 00:02:57.502
I prefer to list the first variable being
the one that captures the whole thing.

41
00:02:57.502 --> 00:03:03.024
And then in the chain of assignment
have the destructuring pattern.

42
00:03:03.024 --> 00:03:07.844
And it's because in the object case
it makes it nicer to not need to

43
00:03:07.844 --> 00:03:10.222
use the parenthesis around it.

44
00:03:10.222 --> 00:03:14.642
I will say that it is not all
that common that I need to do

45
00:03:14.642 --> 00:03:19.469
a destructuring of objects
that I don't need to declare.

46
00:03:19.469 --> 00:03:23.161
It's rare that I'm destructuring
to things that already exist but

47
00:03:23.161 --> 00:03:27.575
when it does happen it's a little annoying
to have to remember the parenthesis.

48
00:03:27.575 --> 00:03:32.436
And in those cases if I need
the variable anyway, just use it and

49
00:03:32.436 --> 00:03:36.582
then you don't need to worry
about the parenthesis.

