WEBVTT

1
00:00:02.507 --> 00:00:06.381
&gt;&gt; Kyle Simpson: Let's switch gears and
talk about object destructuring.

2
00:00:06.381 --> 00:00:10.553
In many ways it's gonna be very
similar to the same that we've

3
00:00:10.553 --> 00:00:15.142
experienced with array destructuring,
&gt;&gt; Kyle Simpson: But

4
00:00:15.142 --> 00:00:17.593
there will be some nuanced differences.

5
00:00:17.593 --> 00:00:23.280
So let's say that we were going to return

6
00:00:23.280 --> 00:00:29.485
an object that had a1, b2, and c3 on it.

7
00:00:29.485 --> 00:00:34.514
And we are going to pull out,
assign that to a temp variable and

8
00:00:34.514 --> 00:00:36.946
then pull out its contents.

9
00:00:36.946 --> 00:00:43.245
So we might say var first = temp.a,

10
00:00:43.245 --> 00:00:50.776
and second = tmp.b, and third = tmp.c.

11
00:00:50.776 --> 00:00:54.038
What's the destructuring
equivalent of that?

12
00:00:54.038 --> 00:00:57.902
Since I'm lazy,
I'm just gonna copy this function.

13
00:00:57.902 --> 00:01:01.608
All right, so we don't need to make
a temp variable unless there's some

14
00:01:01.608 --> 00:01:05.648
reason to get it like we showed in
the previous array destruction discussion.

15
00:01:05.648 --> 00:01:10.946
So we just need to make
an object destructuring pattern.

16
00:01:10.946 --> 00:01:14.394
So data and I'm gonna take, and

17
00:01:14.394 --> 00:01:19.760
instead of like with arrays
where it was an indexed

18
00:01:19.760 --> 00:01:24.507
position that I used as the source, right?

19
00:01:24.507 --> 00:01:28.301
If it showed up in the first position
of the array destructuring and

20
00:01:28.301 --> 00:01:30.753
knew that was position zero is the source.

21
00:01:30.753 --> 00:01:33.949
Here with objects,
since position doesn't matter,

22
00:01:33.949 --> 00:01:37.008
we have to tell it what's
the source to be assigned.

23
00:01:37.008 --> 00:01:39.597
And the way we tell it that is
to give it a property name.

24
00:01:39.597 --> 00:01:45.344
So the property name that we're
getting it from is a in this case,

25
00:01:45.344 --> 00:01:50.160
and we want a to be assigned
to a variable called first.

26
00:01:50.160 --> 00:01:53.596
So, it is source: target.

27
00:01:56.055 --> 00:02:01.507
&gt;&gt; Kyle Simpson: And then,
b:second, and c:third.

28
00:02:01.507 --> 00:02:04.365
And of course,
because these are properties,

29
00:02:04.365 --> 00:02:08.520
we can have them in whatever order
is convenient and readable for us.

30
00:02:08.520 --> 00:02:11.169
Whereas with arrays, the position matters.

31
00:02:11.169 --> 00:02:14.749
When we're talking about objects and
properties, the position doesn't matter.

32
00:02:23.222 --> 00:02:26.465
&gt;&gt; Kyle Simpson: All right,
exactly the same as is with arrays,

33
00:02:26.465 --> 00:02:30.124
what happens if I return no c,
what is third gonna be?

34
00:02:34.058 --> 00:02:35.380
&gt;&gt; Speaker 2: Undefined.
&gt;&gt; Kyle Simpson: Undefined,

35
00:02:35.380 --> 00:02:37.050
same is true over here.

36
00:02:37.050 --> 00:02:40.140
If the object doesn’t have it,
it’s not there.

37
00:02:40.140 --> 00:02:42.475
So if I returned extra stuff,

38
00:02:54.400 --> 00:02:58.069
&gt;&gt; Kyle Simpson: If I return extra
stuff what happens to the extra stuff?

39
00:02:58.069 --> 00:03:01.690
It gets ignored, same thing.

40
00:03:01.690 --> 00:03:07.537
Now what if I wanted to collect
any unaccounted for properties,

41
00:03:07.537 --> 00:03:13.166
let's say that I didn't account for
third, or for temp.c,

42
00:03:13.166 --> 00:03:18.274
what if I wanted to collect c and
d or the values 3 and 4?

43
00:03:18.274 --> 00:03:22.126
Well, I'm not gonna actually
write out the code for that, but

44
00:03:22.126 --> 00:03:26.994
you can imagine it would be a little bit
more complex because I would essentially

45
00:03:26.994 --> 00:03:30.502
have to take a list of the keys
from the object that exist.

46
00:03:30.502 --> 00:03:33.757
Filter out the ones that I've
already accounted for, and

47
00:03:33.757 --> 00:03:37.552
any of the ones that were left,
make them into a new object, right?

48
00:03:37.552 --> 00:03:42.323
So you could imagine three or
four lines of that sort of looping

49
00:03:42.323 --> 00:03:47.090
logic with object.keys and
I could get just c, d, e, and f,

50
00:03:47.090 --> 00:03:50.980
if they were there, added on,
and ignore a and b.

51
00:03:50.980 --> 00:03:55.787
Well, there's a much easier way of doing
that with the destructuring pattern, and

52
00:03:55.787 --> 00:03:57.354
it's called object rest.

53
00:03:57.354 --> 00:04:01.578
So just like with arrays,
where you could do a dot dot dot, and

54
00:04:01.578 --> 00:04:06.778
collect values into an array,
when we're in an object destructuring, and

55
00:04:06.778 --> 00:04:12.078
you do dot dot dot, you can collect all
the rest of that into an actual object.

56
00:04:12.078 --> 00:04:15.429
So this is a whole separate object,
and in this case,

57
00:04:15.429 --> 00:04:19.311
third would be an object that
included the properties c and d.

58
00:04:21.986 --> 00:04:26.054
&gt;&gt; Kyle Simpson: Separate object that
got those properties copied into it.

59
00:04:29.080 --> 00:04:34.636
&gt;&gt; Kyle Simpson: If I wanted to provide
a default backup, in case a was missing?

60
00:04:34.636 --> 00:04:38.224
If we said a was missing in this case, and

61
00:04:38.224 --> 00:04:43.606
I wanted to provide some sort of
default over here then I could

62
00:04:43.606 --> 00:04:48.801
have done the whole ternary thing,
!=== undefined.

63
00:04:48.801 --> 00:04:52.126
And then tmp.a, and

64
00:04:52.126 --> 00:04:57.308
then a backup of the number 42.

65
00:04:57.308 --> 00:04:59.520
So that would have been valid, but

66
00:04:59.520 --> 00:05:04.111
if I wanna do that with an object
destructuring pattern, any guesses?

67
00:05:06.258 --> 00:05:07.225
&gt;&gt; Speaker 3: Set a default?

68
00:05:07.225 --> 00:05:11.320
&gt;&gt; Kyle Simpson: Just set a default,
it looks a little stranger here,

69
00:05:11.320 --> 00:05:14.512
since there's three elements going on.

70
00:05:14.512 --> 00:05:18.981
And you just have to remember that
it's source, target, default.

71
00:05:18.981 --> 00:05:25.206
Takes a little getting used to that whole
order of source, target, and default.

72
00:05:25.206 --> 00:05:29.201
Speaking of that difference,
I want to call that out for

73
00:05:29.201 --> 00:05:33.876
just a moment because I know that
it has created some confusion for

74
00:05:33.876 --> 00:05:38.893
folks, it created confusion for me for
at least the first week or two.

75
00:05:38.893 --> 00:05:43.568
So let's talk about that whole choice
that they made to have it be in order of

76
00:05:43.568 --> 00:05:44.770
source, target.

77
00:05:44.770 --> 00:05:48.791
Cuz the first time I was learning
destructuring syntax, my brain was

78
00:05:48.791 --> 00:05:52.892
programmed into target source, and
I kept getting those backwards.

79
00:05:52.892 --> 00:05:56.487
And then after about a week,
I have this light bulb moment and

80
00:05:56.487 --> 00:06:00.095
it occurred to me, I get it,
I know why they do that now.

81
00:06:00.095 --> 00:06:02.195
And then I never struggled with it again.

82
00:06:02.195 --> 00:06:05.058
So let's look at that,
when I make an object literal,

83
00:06:05.058 --> 00:06:06.694
make this little bigger here.

84
00:06:06.694 --> 00:06:14.132
If I make an object literal, we know
that the property and then the value.

85
00:06:14.132 --> 00:06:18.552
We know that that's the order for
an object literal and

86
00:06:18.552 --> 00:06:24.509
we know that in this particular case,
the property is serving the purpose

87
00:06:24.509 --> 00:06:29.621
of the target, and the value is
serving the purpose of source.

88
00:06:29.621 --> 00:06:34.094
So then later,
when we try to do a destructuring and

89
00:06:34.094 --> 00:06:40.141
we say something like,
&gt;&gt; Kyle Simpson: A source and

90
00:06:40.141 --> 00:06:44.337
a target,
then we end up listing source:target,

91
00:06:44.337 --> 00:06:47.861
which is the opposite of target: source.

92
00:06:47.861 --> 00:06:50.997
And again, for
the first week of me learning this syntax,

93
00:06:50.997 --> 00:06:53.814
I was banging my head against,
why'd they flip it?

94
00:06:53.814 --> 00:07:01.372
That's so dumb, why'd they flip it and
then I figured out why its flipped.

95
00:07:01.372 --> 00:07:05.854
Because the role is not
the important part.

96
00:07:05.854 --> 00:07:10.806
Whether it's a target or a source or
a source or a target, those are flipped.

97
00:07:10.806 --> 00:07:13.172
But here's what's really
interesting about it.

98
00:07:13.172 --> 00:07:19.401
If you think about instead of
role identity, guess what?

99
00:07:19.401 --> 00:07:23.377
It is property value.

100
00:07:23.377 --> 00:07:25.276
The property serves
the role of source here and

101
00:07:25.276 --> 00:07:26.696
it serves the role of target here.

102
00:07:26.696 --> 00:07:32.023
But if you can always remember that
the object property is on the left,

103
00:07:32.023 --> 00:07:37.328
then of course it's consistent
between the two syntaxes

104
00:07:37.328 --> 00:07:38.718
&gt;&gt; Kyle Simpson: So, just keep in mind,

105
00:07:38.718 --> 00:07:43.028
property always goes on the left,
the thing that we're getting it from or

106
00:07:43.028 --> 00:07:46.728
the thing that we're assigning
it to always goes on the right.

