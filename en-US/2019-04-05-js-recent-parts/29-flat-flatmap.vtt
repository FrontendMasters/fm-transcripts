WEBVTT

1
00:00:00.000 --> 00:00:04.272
&gt;&gt; Kyle Simpson: Array find and
array includes are good examples of helper

2
00:00:04.272 --> 00:00:09.879
methods that we normally would be
bringing in from something like Lodash or

3
00:00:09.879 --> 00:00:12.564
some other kinda utility library.

4
00:00:12.564 --> 00:00:17.708
And we're bringing them into the so-called
JavaScript standard library.

5
00:00:17.708 --> 00:00:24.265
And another example of bringing in items
to the JavaScript standard library

6
00:00:24.265 --> 00:00:30.933
that are almost always found in other
utility libraries is flat and flatMap.

7
00:00:30.933 --> 00:00:33.666
Both of these were added just recently.

8
00:00:33.666 --> 00:00:37.749
This is a hot topic right
hot off the presses.

9
00:00:37.749 --> 00:00:41.159
flat and
flatMap have been added to JavaScript.

10
00:00:41.159 --> 00:00:46.157
And by the way,
some of you over the last 6 to 12 months,

11
00:00:46.157 --> 00:00:49.433
you may have heard about SmooshGate.

12
00:00:49.433 --> 00:00:53.362
And if you were following
along on the tech Twitters,

13
00:00:53.362 --> 00:00:58.600
you might have seen a big roohah about
somebody on TC39 made a joke that

14
00:00:58.600 --> 00:01:03.837
they couldn't call it what they
wanted to call it, which was flatten,

15
00:01:03.837 --> 00:01:09.285
because it conflicted with some
MootTool's method name from 2005.

16
00:01:09.285 --> 00:01:15.870
And so somebody on TC39 made a joke, well,
why don't we just call it array.smoosh?

17
00:01:15.870 --> 00:01:17.563
And that was a joke, but

18
00:01:17.563 --> 00:01:22.497
a whole bunch of people thought
that that was a real TC39 proposal.

19
00:01:22.497 --> 00:01:29.065
And then it just escalated and people
yelled and argued and all of that stuff.

20
00:01:29.065 --> 00:01:32.280
Thankfully, we did not get array smoosh,
but

21
00:01:32.280 --> 00:01:35.502
what we did get is array.flat and
.flatMap.

22
00:01:35.502 --> 00:01:38.805
So let's take a quick look at those.

23
00:01:38.805 --> 00:01:42.236
If you have either already created or
actually,

24
00:01:42.236 --> 00:01:46.336
through some various ways,
have created a nested array,

25
00:01:46.336 --> 00:01:51.036
this is the use case for where you
might want to flatten that array.

26
00:01:51.036 --> 00:01:56.248
So you notice this line 2 here,
I've got this nested array,

27
00:01:56.248 --> 00:02:01.675
including in the middle of it,
this sort of empty nested thing.

28
00:02:01.675 --> 00:02:04.489
And if I flatten it with
a flatten level of 0,

29
00:02:04.489 --> 00:02:07.164
that has the effect of
doing nothing to it.

30
00:02:07.164 --> 00:02:12.485
But if I flatten it with the default of 1,
like we see on line 7,

31
00:02:12.485 --> 00:02:16.935
you'll notice that one level
of nesting is removed.

32
00:02:16.935 --> 00:02:22.236
So the array 2, 3 has been just
flattened down into the main array.

33
00:02:22.236 --> 00:02:26.076
The nested array is now
just a single array.

34
00:02:26.076 --> 00:02:31.112
This is line 8, and then the 4 and
the 5 have been nested down one level.

35
00:02:31.112 --> 00:02:36.480
So we just have the array 5, so
that's what happens by default.

36
00:02:36.480 --> 00:02:39.788
That's one level of unnesting,
if you will, or flattening.

37
00:02:39.788 --> 00:02:44.627
But flat also takes values that you can
tell it how many levels you wanna do, so

38
00:02:44.627 --> 00:02:46.646
you can give it a number like 2.

39
00:02:46.646 --> 00:02:49.788
And basically, if you wanna
have it do all the flattenings,

40
00:02:49.788 --> 00:02:51.520
just give it a really big number.

41
00:02:51.520 --> 00:02:56.242
[LAUGH] Because no matter how deep it is,
if you give it some really big number,

42
00:02:56.242 --> 00:03:00.400
like infinity or something,
it's gonna just flatten all of them.

43
00:03:00.400 --> 00:03:04.329
So this is, again, one of those
common utilities that you see across

44
00:03:04.329 --> 00:03:08.480
lots of different libraries, and
now we have a built-in version of it.

45
00:03:08.480 --> 00:03:11.714
And when we get something
built into JavaScript,

46
00:03:11.714 --> 00:03:16.565
it's actually much better for us to
embrace and use the built-in standard

47
00:03:16.565 --> 00:03:20.970
thing rather than to continue to
rely upon the userland libraries.

48
00:03:20.970 --> 00:03:24.240
Not that those are bad,
those are fantastic libraries and

49
00:03:24.240 --> 00:03:28.127
they're the reason why we get these
things added into the language.

50
00:03:28.127 --> 00:03:33.014
It just means that we shouldn't continue
to use those as crutches when we have

51
00:03:33.014 --> 00:03:34.525
something built-in.

52
00:03:34.525 --> 00:03:38.496
So flat works pretty well,
when you just have an array and

53
00:03:38.496 --> 00:03:40.996
you want to do some operation on it.

54
00:03:40.996 --> 00:03:45.799
But what if you're also doing some
other operations like mapping things?

55
00:03:45.799 --> 00:03:49.173
Well then you might come across
the need to do both the flatten and

56
00:03:49.173 --> 00:03:50.746
the mapping at the same time.

57
00:03:50.746 --> 00:03:54.218
This is extremely common
in functional programming,

58
00:03:54.218 --> 00:03:57.694
which is beyond the scope
of what we'll discuss here.

59
00:03:57.694 --> 00:04:02.317
But there is a number of techniques within
functional programming where you run

60
00:04:02.317 --> 00:04:05.915
across the need to both map something and
flatten something.

61
00:04:05.915 --> 00:04:09.574
Best way for
me to illustrate that would be to say,

62
00:04:09.574 --> 00:04:14.469
if you ended up mapping an array of
values to an array of subarrays.

63
00:04:14.469 --> 00:04:19.523
In this case, I'm calling I've got this
function tuples that is producing,

64
00:04:19.523 --> 00:04:23.734
from the array [1, 2, 3],
it is an array of subarrays where

65
00:04:23.734 --> 00:04:27.718
the first element in the tuple is
the doubling of the number and

66
00:04:27.718 --> 00:04:31.566
the second array is the doubling
that is then stringafied.

67
00:04:31.566 --> 00:04:33.388
Why would you do that?

68
00:04:33.388 --> 00:04:38.290
Well, again, this is more complex stuff in
terms of setting up values to be used in

69
00:04:38.290 --> 00:04:42.643
function compositions and
other functional programming techniques.

70
00:04:42.643 --> 00:04:44.113
Quick little plug,

71
00:04:44.113 --> 00:04:48.963
I have a functional programming
course here on Frontend Masters.

72
00:04:48.963 --> 00:04:52.536
So go check that out if you're
curious about more of those.

73
00:04:52.536 --> 00:04:57.456
But even if you had this already
having been created and you wanted to

74
00:04:57.456 --> 00:05:02.305
map it down to this flattening,
the flatMap is gonna do it nicely.

75
00:05:02.305 --> 00:05:04.993
You could do the map and
then do the flatten,

76
00:05:04.993 --> 00:05:07.981
that's what were doing with line 6,
7 and 8.

77
00:05:07.981 --> 00:05:12.722
We do the mapping with our good old
friend, the standard .map call.

78
00:05:12.722 --> 00:05:17.525
And then we called .flat on it, and
that ends up flattening the array down

79
00:05:17.525 --> 00:05:21.559
from its tuples,
down into all those values being together.

80
00:05:21.559 --> 00:05:24.257
And that's our desired end result, but

81
00:05:24.257 --> 00:05:29.175
the way we got there is a little less
desirable because we ended up creating

82
00:05:29.175 --> 00:05:34.512
an intermediary array that then had to
be recreated with its flattened result.

83
00:05:34.512 --> 00:05:39.769
So flatMap is basically flatten while you
map instead of flattening after you map.

84
00:05:39.769 --> 00:05:44.660
Conceptually, they're the same thing but
from a performance and

85
00:05:44.660 --> 00:05:49.113
implementation perspective,
we end up with a better result

86
00:05:49.113 --> 00:05:53.497
if that that's what we need to
do if we need to do both steps.

87
00:05:53.497 --> 00:05:56.158
You see on line 11 I
use a flatMap utility.

88
00:05:56.158 --> 00:06:01.363
And I return it tuple and
those are immediately flattened in.

89
00:06:01.363 --> 00:06:04.335
Notice by the way that this
flattening is one level.

90
00:06:04.335 --> 00:06:08.421
So where we had the flat,
where we could control the level,

91
00:06:08.421 --> 00:06:14.419
here the assumption with flatMap is you're
always just gonna go one level flattened.

92
00:06:14.419 --> 00:06:16.893
So if you did need to
go additional levels,

93
00:06:16.893 --> 00:06:19.730
you would have to use
an additional call to flat.

94
00:06:22.121 --> 00:06:27.551
&gt;&gt; Kyle Simpson: One other interesting
implication of the idea of flatMap

95
00:06:27.551 --> 00:06:32.640
is that you can actually turn
a mapping operation into

96
00:06:32.640 --> 00:06:38.654
something that either adds or
removes elements from an array.

97
00:06:38.654 --> 00:06:43.539
We typically think of a map as only
producing a new array with the same

98
00:06:43.539 --> 00:06:46.376
number of items as the original array.

99
00:06:46.376 --> 00:06:49.370
But if we, for example,
were to return a tuple,

100
00:06:49.370 --> 00:06:51.853
a subarray like we're doing on line 3,

101
00:06:51.853 --> 00:06:56.910
that would have the effect of adding a new
element into the array at that position.

102
00:06:56.910 --> 00:07:01.511
But if we did the reverse, which was
to return an empty array, since empty

103
00:07:01.511 --> 00:07:06.507
arrays don't have any contents, when
they get flattened, they just go away.

104
00:07:06.507 --> 00:07:09.600
That is the effect of removing
an element from the array.

105
00:07:09.600 --> 00:07:12.765
So here, I am removing the odd numbers and

106
00:07:12.765 --> 00:07:16.208
I am adding in elements for
the even numbers.

107
00:07:16.208 --> 00:07:19.664
I'm adding the even number as
well as its doubled value.

108
00:07:19.664 --> 00:07:26.804
So we start out with 1, 2, 3, 4, 5, 6 and
we end up with a 2, 4, a 4, 8 and a 6, 12.

109
00:07:26.804 --> 00:07:30.680
We removed an item and
then replaced it with another item.

110
00:07:30.680 --> 00:07:35.486
So that's a cool little trick that
flatMap allows you to do, is both add and

111
00:07:35.486 --> 00:07:38.406
remove items depending upon some scenario.

112
00:07:38.406 --> 00:07:40.726
So now we have array flat and
array flatMap.

113
00:07:40.726 --> 00:07:43.512
Again, those have landed in ES2019.

114
00:07:43.512 --> 00:07:47.518
They'll be officially standardized
a bit later here in the year 2019.

115
00:07:47.518 --> 00:07:52.696
And then, you should already see several
of your browsers having implemented this.

116
00:07:52.696 --> 00:07:56.258
Notably, it's already in V8,
so it's in Chrome and

117
00:07:56.258 --> 00:08:00.142
in all your sort of Node and
Electron sort of environments.

118
00:08:00.142 --> 00:08:03.323
So this is definitely something
that's rolling out quick.

119
00:08:03.323 --> 00:08:06.444
And it's also very easy
to have been polyfilled.

120
00:08:06.444 --> 00:08:10.497
So you can use polyfills or
transpolations like Babel and

121
00:08:10.497 --> 00:08:13.122
start using this today in your code.

