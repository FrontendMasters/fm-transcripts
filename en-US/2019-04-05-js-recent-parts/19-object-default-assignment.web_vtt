WEBVTT

1
00:00:00.000 --> 00:00:01.809
&gt;&gt; Kyle Simpson: In exactly the same way.

2
00:00:01.809 --> 00:00:06.474
Let's go back to what we had where we

3
00:00:06.474 --> 00:00:10.837
were doing it with a declarator.

4
00:00:15.726 --> 00:00:20.208
&gt;&gt; Kyle Simpson: In exactly the same
way with arrays, if I ended up, for

5
00:00:20.208 --> 00:00:25.571
some reason, not returning anything,
like undefined or null,

6
00:00:25.571 --> 00:00:30.556
what would happen when I try to
do a property reference here?

7
00:00:30.556 --> 00:00:32.006
A type error.

8
00:00:32.006 --> 00:00:33.377
And I don't like those type errors.

9
00:00:33.377 --> 00:00:34.744
I don't want those type errors.

10
00:00:34.744 --> 00:00:40.406
And so the fallback that I would typically
use is to provide an empty object,

11
00:00:40.406 --> 00:00:44.044
just like with arrays
providing an empty array.

12
00:00:44.044 --> 00:00:48.944
And I would do the same

13
00:00:48.944 --> 00:00:53.027
thing over here,

14
00:00:53.027 --> 00:01:01.205
which is provide the empty object.

15
00:01:02.816 --> 00:01:10.118
&gt;&gt; Kyle Simpson: [COUGH]
&gt;&gt; Kyle Simpson: With arrays,

16
00:01:10.118 --> 00:01:12.300
you have the whole array illusion,

17
00:01:12.300 --> 00:01:15.730
which was like the empty commas
thing to skip over them.

18
00:01:15.730 --> 00:01:19.204
With objects,
you don't need some syntax for

19
00:01:19.204 --> 00:01:24.833
that because you just simply don't
list the property that you care about.

20
00:01:24.833 --> 00:01:30.593
What if I wanted to name the variable

21
00:01:30.593 --> 00:01:35.396
the same thing as its source?

22
00:01:35.396 --> 00:01:39.417
So I was saying var a = tmp.a.

23
00:01:39.417 --> 00:01:45.074
If I did that over here,
it ends up looking a little

24
00:01:45.074 --> 00:01:49.808
bit redundant to have to say b: b or a: a.

25
00:01:49.808 --> 00:01:53.018
And so as a result, if the source and

26
00:01:53.018 --> 00:01:58.376
the target are the same name,
you only have to list it once.

27
00:02:05.488 --> 00:02:08.378
&gt;&gt; Kyle Simpson: This says if
there's an a property, grab it and

28
00:02:08.378 --> 00:02:10.920
assign it to a variable of that same name.

29
00:02:16.205 --> 00:02:18.822
&gt;&gt; Kyle Simpson: And of course,
if you have a default here,

30
00:02:18.822 --> 00:02:22.894
that means still go get the a property,
assign it to an a variable,

31
00:02:22.894 --> 00:02:27.214
but if there is no a property,
assign 42 to that a variable instead.

32
00:02:29.445 --> 00:02:34.054
&gt;&gt; Kyle Simpson: So that's a object
destructuring shorthand when the property,

33
00:02:34.054 --> 00:02:38.841
the source property, and
the target assignment are the same name.

34
00:02:41.646 --> 00:02:45.560
&gt;&gt; Kyle Simpson: And of course that only
works if the name is a lexically valid

35
00:02:45.560 --> 00:02:46.507
identifier.

36
00:02:46.507 --> 00:02:51.905
So if your source property was something
with spaces in it, that's not gonna work.

37
00:02:51.905 --> 00:02:55.333
But if it's a simple name like a,
it will work just fine.

