WEBVTT

1
00:00:00.000 --> 00:00:03.724
&gt;&gt; Kyle Simpson: It is useful to
understand this processing model of a tag

2
00:00:03.724 --> 00:00:09.208
function, however, because there are more
interesting things that you can do.

3
00:00:09.208 --> 00:00:12.856
And I have in some occasions
written my own tag functions

4
00:00:12.856 --> 00:00:17.680
when there wasn't some standard one
out in a library that I might prefer.

5
00:00:17.680 --> 00:00:23.197
So, for example, this tag function,
it's definitely a bit more complex and

6
00:00:23.197 --> 00:00:28.044
how it does, what it does is not all
that important, but what it is for

7
00:00:28.044 --> 00:00:32.581
is basically as a replacement for
my console.log statements.

8
00:00:32.581 --> 00:00:36.596
Because when I do a console.log
of a regular value like a number,

9
00:00:36.596 --> 00:00:41.268
I just wanted to drop in that number,
if I do a console.log of like an object I

10
00:00:41.268 --> 00:00:45.074
don't want it to print object object,
which is not helpful.

11
00:00:45.074 --> 00:00:49.886
And if I do a console, log of, say an
error that I've gotten from a try catch,

12
00:00:49.886 --> 00:00:52.565
I don't want to just see the error string.

13
00:00:52.565 --> 00:00:55.665
I'd like to see the whole
error stack if it's available.

14
00:00:55.665 --> 00:00:59.489
So I did this a bunch of times over and
over and then one day I just thought,

15
00:00:59.489 --> 00:01:01.650
why don't I make myself a tag function?

16
00:01:01.650 --> 00:01:07.367
That automatically can
pre-format an object as JSON or

17
00:01:07.367 --> 00:01:10.659
an error as a statutory string.

18
00:01:10.659 --> 00:01:14.624
And then instead of typing cancelled log
everywhere then I can just use this tag

19
00:01:14.624 --> 00:01:16.258
function on my cancel strings.

20
00:01:16.258 --> 00:01:19.518
So this is what it looks like in
action if I have that line four,

21
00:01:19.518 --> 00:01:23.597
I have logger there, and you notice
that I don't have to say console.log and

22
00:01:23.597 --> 00:01:26.774
then pass on the string,
logger does the console logging.

23
00:01:26.774 --> 00:01:29.926
And I pass in the string and
if I have a value like object,

24
00:01:29.926 --> 00:01:34.910
they're on the end, you'll notice that it
went ahead in JSON's string format for me.

25
00:01:34.910 --> 00:01:37.469
I didn't have to do any extra work.

26
00:01:37.469 --> 00:01:41.372
It detected that it was an object and
it could be JSON.stringify().

27
00:01:41.372 --> 00:01:42.180
Same thing down here.

28
00:01:42.180 --> 00:01:46.726
If I catch an error, I can have it
automatically format in my console that

29
00:01:46.726 --> 00:01:50.763
error with the error stack and
error message and all that stuff.

30
00:01:50.763 --> 00:01:55.464
So that's an example of doing something
a little bit more sophisticated

31
00:01:55.464 --> 00:01:59.249
with a tag function to solve
in this case a debugging task.

32
00:01:59.249 --> 00:02:02.391
But you can imagine lots of
different things you might use.

33
00:02:02.391 --> 00:02:08.546
As a mater of fact, people have really
gone way further with these tag functions.

34
00:02:08.546 --> 00:02:13.040
Because it turns out a tag function
doesnâ€™t even have to return a string.

35
00:02:13.040 --> 00:02:18.361
You might think of,
I'm making a string literal.

36
00:02:18.361 --> 00:02:21.284
But when I call it
an interpolated literal,

37
00:02:21.284 --> 00:02:24.841
it's because it doesnt even
have to return a string.

38
00:02:24.841 --> 00:02:27.562
It could, in fact,
return something else entirely.

39
00:02:27.562 --> 00:02:29.386
So what are some examples of that?

40
00:02:29.386 --> 00:02:32.435
Well, let's take regular expressions for
example.

41
00:02:32.435 --> 00:02:35.624
Regular expressions are quite
famously in JavaScript.

42
00:02:35.624 --> 00:02:37.322
They very hard to reformat,

43
00:02:37.322 --> 00:02:42.135
not the least of which is because this
regular expression literal requires you to

44
00:02:42.135 --> 00:02:46.753
put everything on one line with no
white space, not comments, no anything.

45
00:02:46.753 --> 00:02:50.946
So you have these regular expressions that
can grow to like hundreds of characters

46
00:02:50.946 --> 00:02:52.598
long, and nobody can read tha.

47
00:02:52.598 --> 00:02:55.687
Many other languages
have long had support for

48
00:02:55.687 --> 00:03:00.913
multiline regular expressions where you
can split them out and indent them and

49
00:03:00.913 --> 00:03:06.243
put various white space and comments and
all sorts of readability affordance.

50
00:03:06.243 --> 00:03:09.753
Well, some very enterprising folks though,
well,

51
00:03:09.753 --> 00:03:12.717
why don't we just make
a regex tag function?

52
00:03:12.717 --> 00:03:17.559
Which then allows you, inside of your
literal, which can span multiple lines and

53
00:03:17.559 --> 00:03:22.473
have white space, just write out a regular
expression with all this white space and

54
00:03:22.473 --> 00:03:27.458
commenting, and it will parse your string
and turn it into a real regular expression

55
00:03:27.458 --> 00:03:32.054
and not return you a string for but
return you the actual regular expression.

56
00:03:32.054 --> 00:03:37.673
So now all of a sudden we have nice, clean
multiline readable regular expressions.

57
00:03:37.673 --> 00:03:42.341
It's almost as if inside of a literal you
can write your own entire language and

58
00:03:42.341 --> 00:03:43.766
people have done that.

59
00:03:43.766 --> 00:03:47.546
People have made entire
programming languages as

60
00:03:47.546 --> 00:03:50.246
the interpreter is a tag function.

61
00:03:50.246 --> 00:03:54.524
And inside of your template string,
inside of your literal,

62
00:03:54.524 --> 00:03:57.248
you can have whatever syntax you want.

63
00:03:57.248 --> 00:03:59.157
JSX, another great example.

64
00:03:59.157 --> 00:04:03.907
JSX in the React ecosystem,
it's HTML-like stuff embedded

65
00:04:03.907 --> 00:04:08.846
directly in JavaScript which is it's fine,
people like that.

66
00:04:08.846 --> 00:04:10.878
And use it quite frequently but

67
00:04:10.878 --> 00:04:14.798
it requires a compiler cuz
it's not standard JavaScript.

68
00:04:14.798 --> 00:04:19.241
Well, then someone decided and actually
there's multiple implementations now.

69
00:04:19.241 --> 00:04:22.507
They wrote a JSX tag function.

70
00:04:22.507 --> 00:04:26.298
So inside of your literal, you can write
out your JSX multiline everywhere,

71
00:04:26.298 --> 00:04:28.414
dropping values, whatever you wanna do.

72
00:04:28.414 --> 00:04:31.570
But now it's completely standard
JavaScript, no compilation needed.

73
00:04:31.570 --> 00:04:36.254
And what the JSX tag function
returns to you is not a string,

74
00:04:36.254 --> 00:04:42.175
it returns to the actual dom object
just exactly like you'd expect in JSX.

75
00:04:42.175 --> 00:04:46.966
So this is a tremendously powerful, it's
almost like a mini language with inside of

76
00:04:46.966 --> 00:04:51.426
JavaScript, tremendously powerful and
I'm very excited about the future.

77
00:04:51.426 --> 00:04:55.224
I've already got some libraries,
where I've started using template tags and

78
00:04:55.224 --> 00:04:58.469
these different sorts of ways to
push the boundaries even further.

79
00:04:58.469 --> 00:05:02.787
It's a great extension point for
writing more declarative JavaScript.

