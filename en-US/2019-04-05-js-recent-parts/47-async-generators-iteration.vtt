WEBVTT

1
00:00:00.000 --> 00:00:04.105
&gt;&gt; Kyle Simpson: Now that's not just
semantically cleaner coding, it actually

2
00:00:04.105 --> 00:00:09.363
produces a different kind of interface for
how you would work with this function.

3
00:00:09.363 --> 00:00:14.081
As opposed to normal async functions
where you call them and get back

4
00:00:14.081 --> 00:00:19.320
a single promise that waits to resolve
until it has all the results for you.

5
00:00:19.320 --> 00:00:24.714
When you call an async generator,
what you're gonna get back is a special

6
00:00:24.714 --> 00:00:29.764
kind of iterator, so that you can
consume its results as it has them.

7
00:00:29.764 --> 00:00:32.774
So you might think,
okay, well, that's cool.

8
00:00:32.774 --> 00:00:38.110
I ought to just be able to wire up
an async generator against a for-of loop.

9
00:00:38.110 --> 00:00:41.139
Just like I can with regular generators,

10
00:00:41.139 --> 00:00:44.959
can I just do a for-of loop
over an async generator?

11
00:00:44.959 --> 00:00:50.772
Well, it's not gonna quite work and
let's see why.

12
00:00:50.772 --> 00:00:55.686
So if I were to pull all
of those URLs upfront and

13
00:00:55.686 --> 00:00:59.844
then all of those results upfront, and

14
00:00:59.844 --> 00:01:07.410
do the yield keyword as I went along,
how would I consume that content?

15
00:01:07.410 --> 00:01:10.849
What would the consumption loop look like?

16
00:01:10.849 --> 00:01:13.270
Well, let's take a look.

17
00:01:13.270 --> 00:01:19.607
It might look like this, you might say,
I'll do for let text of fetchURLs.

18
00:01:19.607 --> 00:01:21.890
In other words, I've gone and
gotten all of them, and

19
00:01:21.890 --> 00:01:23.391
now I'm gonna just loop over them.

20
00:01:23.391 --> 00:01:29.268
But there is a problem here, which is that
the fetchURLs is not gonna return us,

21
00:01:29.268 --> 00:01:33.741
it is returning us an iterator,
but the iteration results,

22
00:01:33.741 --> 00:01:39.207
we don't know what the iteration
result is because it's asynchronous.

23
00:01:39.207 --> 00:01:43.915
So what's gonna break here is that
when we call an async generator and

24
00:01:43.915 --> 00:01:48.620
we get back, or we call an async
iterator and we call .next on it, and

25
00:01:48.620 --> 00:01:53.590
we would get back something that we
thought would be an iterator result.

26
00:01:53.590 --> 00:01:55.813
That's what for-of is expecting.

27
00:01:55.813 --> 00:02:01.504
What we're actually gonna get back, every
time we call .next on an asynchronous

28
00:02:01.504 --> 00:02:06.383
iterator, is we're gonna get back
a promise for an iterator result.

29
00:02:06.383 --> 00:02:11.807
Not the iterator result itself, but
a promise for the iterator result.

30
00:02:11.807 --> 00:02:17.276
Now, this is a nuanced point,
but think about the difference

31
00:02:17.276 --> 00:02:22.747
between getting an iterator result
back that had a promise for

32
00:02:22.747 --> 00:02:29.185
the value in it, versus getting back
a promise for the iterator result.

33
00:02:29.185 --> 00:02:30.355
Those are two different things.

34
00:02:30.355 --> 00:02:32.626
They sound almost the same but
they're different,

35
00:02:32.626 --> 00:02:34.285
and here's how they're different.

36
00:02:34.285 --> 00:02:39.751
Because if I got back an iterator
result with a promise for the value,

37
00:02:39.751 --> 00:02:45.610
then what I would have is I would know
right now if it's done true or false.

38
00:02:45.610 --> 00:02:50.347
But what if I can't even
know if I'm done yet

39
00:02:50.347 --> 00:02:54.073
until after I get the result back?

40
00:02:54.073 --> 00:02:58.636
Well, then I don't want
an iterator result with a promise,

41
00:02:58.636 --> 00:03:01.776
I want a promise for the iterator result.

42
00:03:01.776 --> 00:03:06.033
That's the difference between
asynchronous iteration of promises and

43
00:03:06.033 --> 00:03:09.951
an asynchronous iteration,
which is what we actually want here.

44
00:03:09.951 --> 00:03:13.371
So this for-of loop couldn't
work because it's gonna say,

45
00:03:13.371 --> 00:03:15.551
I got a promise not an iterator result.

46
00:03:15.551 --> 00:03:18.496
I don't know what to do with this.

47
00:03:18.496 --> 00:03:19.485
So how would we do that?

48
00:03:19.485 --> 00:03:23.195
How would we consume such
a asynchronous iterator?

49
00:03:23.195 --> 00:03:27.020
You can imagine wiring something
kind of like this loop up.

50
00:03:27.020 --> 00:03:31.202
You could get an iterator from
your fetchURLs function, and

51
00:03:31.202 --> 00:03:33.580
then you could set up a while loop.

52
00:03:33.580 --> 00:03:37.076
The let res here on line 4,

53
00:03:37.076 --> 00:03:41.795
res is going to be a promise, right?

54
00:03:41.795 --> 00:03:46.147
And that's the problem, because we're
trying to look for res.done, and

55
00:03:46.147 --> 00:03:47.580
there is no .done on it.

56
00:03:47.580 --> 00:03:52.160
So that's why, conceptually,
the for-of loop above is not working,

57
00:03:52.160 --> 00:03:57.278
because we tried to call it.next and what
we got back was not an iterator result.

58
00:03:57.278 --> 00:03:58.649
We got back a promise.

59
00:03:58.649 --> 00:04:01.063
Okay, this seems solvable, right?

60
00:04:01.063 --> 00:04:06.224
Why don't we just have a while
true loop with an await in it?

61
00:04:06.224 --> 00:04:11.075
I can call it.next and
await the result of it.next, and

62
00:04:11.075 --> 00:04:14.309
then I'll have my iterator result and

63
00:04:14.309 --> 00:04:18.365
I can check the .done and
then use the .value.

64
00:04:18.365 --> 00:04:20.760
So do you see the difference between
those two consumption loops?

65
00:04:20.760 --> 00:04:24.267
One of them is trying to go
through it right away, and

66
00:04:24.267 --> 00:04:29.476
it can't because we don't even know
whether we have a next iteration or not.

67
00:04:29.476 --> 00:04:31.710
And this one says, okay, I'll wait.

68
00:04:31.710 --> 00:04:35.846
I'll do one iteration and wait for
you to give me that result.

69
00:04:35.846 --> 00:04:38.150
And then another one, and wait for
the result, and another one, and

70
00:04:38.150 --> 00:04:38.881
wait for the result.

71
00:04:38.881 --> 00:04:46.380
So this is an effective way to what
we call asynchronously iterate, okay?

72
00:04:46.380 --> 00:04:50.543
It would be a lazy asynchronous iteration,
as opposed to,

73
00:04:50.543 --> 00:04:54.873
as we talked about earlier when
I mentioned the fasy library,

74
00:04:54.873 --> 00:05:00.813
which is an eager asynchronous iteration,
this is a lazy asynchronous iteration.

75
00:05:00.813 --> 00:05:05.904
But nobody wants to write up their
own iterator and while loop format.

76
00:05:05.904 --> 00:05:08.960
We want nice, clean,
syntactic sugar for it.

77
00:05:08.960 --> 00:05:13.872
We want something like the for-of
loop to be able to consume

78
00:05:13.872 --> 00:05:17.124
these lazy asynchronous generators.

79
00:05:17.124 --> 00:05:24.470
So you can probably guess what happened
next, they added a for await of loop.

80
00:05:24.470 --> 00:05:28.182
So line 2, we have for await, and

81
00:05:28.182 --> 00:05:34.334
then it is a for-of loop over
an asynchronous iterator.

82
00:05:34.334 --> 00:05:41.522
So under the covers, the for await loop is
automatically awaiting the iterator result

83
00:05:41.522 --> 00:05:46.751
before moving on to decide if it
needs to do another iteration.

84
00:05:48.165 --> 00:05:52.708
&gt;&gt; Kyle Simpson: So now we have generators
which can push out values, but they

85
00:05:52.708 --> 00:05:58.874
are immediate values that we can push out
right away or we can push them out lazily.

86
00:05:58.874 --> 00:06:01.994
That's the benefit of a push interface,

87
00:06:01.994 --> 00:06:05.657
is that we can get lazy
synchronous iterations.

88
00:06:05.657 --> 00:06:10.111
And then we have asynchronous functions,
which are pulls so

89
00:06:10.111 --> 00:06:12.830
we can pull values asynchronously.

90
00:06:12.830 --> 00:06:15.550
And then we saw something like fasy,

91
00:06:15.550 --> 00:06:19.693
which is a iteration that is eager,
but asynchronous.

92
00:06:19.693 --> 00:06:25.599
And now we're seeing the fourth quadrant,
which is I need to be able to push and

93
00:06:25.599 --> 00:06:30.990
pull at the same time, so that I can
have lazy asynchronous iteration.

94
00:06:30.990 --> 00:06:35.862
This was kind of the last missing
conceptual piece that JavaScript

95
00:06:35.862 --> 00:06:41.169
didn't have, and so a whole set of
use cases we basically couldn't do,

96
00:06:41.169 --> 00:06:46.318
or couldn't do well, because we
didn't have the right primitives.

97
00:06:46.318 --> 00:06:51.172
You need all four of those quadrants
to be filled in to be able to to do

98
00:06:51.172 --> 00:06:54.918
all of the various different
asynchronous tasks.

99
00:06:54.918 --> 00:06:59.761
So I'm particularly excited about
asynchronous generators because

100
00:06:59.761 --> 00:07:04.118
they represent kind of completion
of the puzzle, if you will.

101
00:07:04.118 --> 00:07:10.172
We finally have all the pieces in place
that whatever sort of synchronous or

102
00:07:10.172 --> 00:07:12.670
asynchronous, pull or push,

103
00:07:12.670 --> 00:07:18.362
we have a primitive in the language
that does all four of those things.

