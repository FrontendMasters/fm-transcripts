WEBVTT

1
00:00:00.000 --> 00:00:03.437
&gt;&gt; Kyle Simpson: Let's talk about
the structuring of object parameters.

2
00:00:03.437 --> 00:00:06.331
Just like we talked about
the structuring array parameters.

3
00:00:06.331 --> 00:00:14.755
If I have a function data that is
receiving some temp variable and

4
00:00:14.755 --> 00:00:20.531
then I would be inclined to say a and
b = tmp.

5
00:00:20.531 --> 00:00:25.886
And even if I put on the equals
empty object here I'm still doing

6
00:00:25.886 --> 00:00:30.840
things the hard way by having
to do a destructuring pattern

7
00:00:30.840 --> 00:00:35.809
inside of my body instead of
up here on the parameter list.

8
00:00:35.809 --> 00:00:41.829
So the equivalent then that would
be better would be to say data and

9
00:00:41.829 --> 00:00:47.194
then do an object destructuring
directly in the parameter

10
00:00:47.194 --> 00:00:53.358
position with my default,
&gt;&gt; Kyle Simpson: And say a and b.

11
00:01:05.911 --> 00:01:09.547
&gt;&gt; Kyle Simpson: So
that object in that parameter position,

12
00:01:09.547 --> 00:01:15.060
is not going to be captured in any
way like it is over here with temp.

13
00:01:15.060 --> 00:01:18.856
So if you actually need the thing,
you need to go this route and

14
00:01:18.856 --> 00:01:21.996
capture it as a name, and
then subdestructure it.

15
00:01:21.996 --> 00:01:25.698
But if you don't need access to
the original object being pulled in and

16
00:01:25.698 --> 00:01:28.520
you only care about pulling
out some of its contents,

17
00:01:28.520 --> 00:01:30.670
this is a much more declarative syntax.

18
00:01:33.783 --> 00:01:37.653
&gt;&gt; Kyle Simpson: When you put
an object in this parameter position,

19
00:01:37.653 --> 00:01:42.604
you're only accounting for
one parameter to the data function.

20
00:01:42.604 --> 00:01:45.266
You're not accounting for
all the parameters to it.

21
00:01:45.266 --> 00:01:48.933
You could pass another parameter after it,
another argument after it, and

22
00:01:48.933 --> 00:01:50.719
that would go to a second parameter.

23
00:01:50.719 --> 00:01:54.590
So you could list a second
parameter called x.

24
00:01:54.590 --> 00:01:59.025
When you call the data function
it would be expecting you to pass

25
00:01:59.025 --> 00:02:01.291
in an object as the first thing.

26
00:02:03.074 --> 00:02:06.962
&gt;&gt; Kyle Simpson: And then it would be
expecting you to pass something else for

27
00:02:06.962 --> 00:02:08.527
X like the number 42.

28
00:02:08.527 --> 00:02:13.757
But I would tell you that I have never had
the occasion to do either an object or

29
00:02:13.757 --> 00:02:17.275
an array destructuring in
a function parameter and

30
00:02:17.275 --> 00:02:19.678
then also have other parameters.

31
00:02:19.678 --> 00:02:24.439
If I do an array, or an object
destructuring in a parameter position,

32
00:02:24.439 --> 00:02:29.767
I'm gonna just end up passing all of my
stuff inside of the object to the array,

33
00:02:29.767 --> 00:02:32.292
never as other separate arguments.

34
00:02:32.292 --> 00:02:35.009
That's up to you in terms
of how you design stuff.

35
00:02:35.009 --> 00:02:39.840
But I find that to be super confusing,
why would that be in a separate parameter,

36
00:02:39.840 --> 00:02:43.763
just make that thing be inside of
the object and call it x, right?

37
00:02:43.763 --> 00:02:49.990
And then it would be better for
my call site to look like this.

