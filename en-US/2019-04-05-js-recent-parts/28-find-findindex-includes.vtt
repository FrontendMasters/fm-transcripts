WEBVTT

1
00:00:02.733 --> 00:00:07.041
&gt;&gt; Kyle Simpson: Ok, the next features
that we want to take a look at are Array

2
00:00:07.041 --> 00:00:09.294
.find and Array .includes.

3
00:00:09.294 --> 00:00:16.579
Array .find was actually added in ES6,
and Array .includes was added in ES 2016.

4
00:00:16.579 --> 00:00:20.489
In fact, Array .includes was
basically the only feature,

5
00:00:20.489 --> 00:00:23.103
almost the only feature in ES2016.

6
00:00:23.103 --> 00:00:26.258
So let's take a look at Array .find.

7
00:00:26.258 --> 00:00:29.408
If you have an array that holds values,
and

8
00:00:29.408 --> 00:00:34.235
maybe it is difficult to look for
those values by their identity.

9
00:00:34.235 --> 00:00:38.352
Maybe they're objects, or
maybe you need to, because, and

10
00:00:38.352 --> 00:00:41.517
so if it's an object,
you need to do some kind of

11
00:00:41.517 --> 00:00:45.576
custom stepping into the object
to figure out if it matches.

12
00:00:45.576 --> 00:00:51.406
So here I have objects with a properties
in them and I wanna match the objects,

13
00:00:51.406 --> 00:00:55.815
or match an object where
the a property is greater than 1.

14
00:00:55.815 --> 00:01:00.979
The .find method, as we see here on
line 3, takes in a function callback,

15
00:01:00.979 --> 00:01:05.435
and it will provide you that value,
so in that case, the object.

16
00:01:05.435 --> 00:01:08.644
And if you return true,
or something truthy,

17
00:01:08.644 --> 00:01:13.846
then it will return the actual value
that was found, not the return value.

18
00:01:13.846 --> 00:01:17.936
So it's a little bit like
the array filter method.

19
00:01:17.936 --> 00:01:22.282
You're returning a true or a false,
or a truthy or a falsy to say,

20
00:01:22.282 --> 00:01:25.217
this is that thing that
I want you to return.

21
00:01:25.217 --> 00:01:30.394
So we get back the A2, rather than like
a true value or something like that.

22
00:01:30.394 --> 00:01:35.066
So it's a way to provide a callback
that allows you to do that searching in

23
00:01:35.066 --> 00:01:39.986
a more custom way than, say,
the index of method, which we'll remember.

24
00:01:39.986 --> 00:01:43.264
You know,
it just does an identity looking for

25
00:01:43.264 --> 00:01:48.233
a value, couldn't ask it to match
a property like we're doing here.

26
00:01:48.233 --> 00:01:53.845
Little nuanced note here is that
if you find no value whatsoever,

27
00:01:53.845 --> 00:01:59.050
you get back undefined, but
that is indistinguishable from

28
00:01:59.050 --> 00:02:04.068
the case where you found
the undefined value in the array.

29
00:02:04.068 --> 00:02:09.172
So you can't actually tell with
the find method whether they didn't

30
00:02:09.172 --> 00:02:13.672
find anything, or
whether they found the undefined value.

31
00:02:13.672 --> 00:02:16.513
Those are gonna have
the exact same result.

32
00:02:16.513 --> 00:02:18.551
And that's a little perplexing.

33
00:02:18.551 --> 00:02:22.321
So if you really needed to
distinguish that particular case,

34
00:02:22.321 --> 00:02:24.211
then you could use findIndex.

35
00:02:24.211 --> 00:02:28.604
findIndex is kind of like the indexOf
function, but with a callback,

36
00:02:28.604 --> 00:02:33.368
where it doesn't return you the object,
it returns you the numeric index of

37
00:02:33.368 --> 00:02:36.512
where it found it,
where it made its first match.

38
00:02:36.512 --> 00:02:42.668
And in this case, it uses -1 to indicate,
I didn't find it at all.

39
00:02:42.668 --> 00:02:46.302
I'm still not in love with
the idea of using -1s, and

40
00:02:46.302 --> 00:02:51.832
the fact that we're adding new APIs and
still using -1s is a little troublesome.

41
00:02:51.832 --> 00:02:56.711
But that is the convention, or at least
the pattern that we've done so far,

42
00:02:56.711 --> 00:02:59.468
so you can see why they
stuck with indexOf.

43
00:02:59.468 --> 00:03:03.908
So speaking of indexOf, some of you
may remember using this indexOf for

44
00:03:03.908 --> 00:03:05.690
the last many, many years.

45
00:03:05.690 --> 00:03:11.547
And you may have done things like line 3,
where you've said, compared to a -1.

46
00:03:11.547 --> 00:03:14.901
And that -1 doesn't really mean anything,

47
00:03:14.901 --> 00:03:20.932
it's just a sentinel value that comes to
us, historically, from C programming.

48
00:03:20.932 --> 00:03:26.509
And some of you may have even seen
that you could use the tilde operator

49
00:03:26.509 --> 00:03:32.195
in a bizarre way of turning a -1 into
a truthy or falsy sort of a value.

50
00:03:32.195 --> 00:03:36.739
Both of these are terrible options,
and they were the best that we had for

51
00:03:36.739 --> 00:03:37.570
a long time.

52
00:03:37.570 --> 00:03:43.352
So thankfully, as of ES2016, we now have
an actual method that is going to do,

53
00:03:43.352 --> 00:03:47.232
so this is kinda like the Array Find,
it's going to go,

54
00:03:47.232 --> 00:03:50.311
tell us true-false that the thing exists.

55
00:03:50.311 --> 00:03:54.688
It's not giving us the value itself,
that's what we use find for.

56
00:03:54.688 --> 00:03:59.921
But if we want to test for whether it
exists or not, rather than using find,

57
00:03:59.921 --> 00:04:05.010
index, or using indexOf, the best
thing to use is the includes method.

58
00:04:05.010 --> 00:04:08.258
Not only does the includes
method give us a true or false,

59
00:04:08.258 --> 00:04:11.243
which is really what we
always wanted from indexOf.

60
00:04:11.243 --> 00:04:13.888
You hardly ever care
about the actual index,

61
00:04:13.888 --> 00:04:16.402
you just want to know if it's there or
not.

62
00:04:16.402 --> 00:04:21.312
So, it gives us, in terms of semantic, it
gives us a better match for what we want.

63
00:04:21.312 --> 00:04:26.301
But it also uses the same value algorithm
from the spec, which means that even

64
00:04:26.301 --> 00:04:30.394
something like a NaN, it will tell you,
yes, I found the NaN.

65
00:04:30.394 --> 00:04:33.604
It doesn't do the lying that you know,
say something,

66
00:04:33.604 --> 00:04:35.803
like triple equals checking will do.

67
00:04:35.803 --> 00:04:38.283
An indexOf is susceptible to this.

68
00:04:38.283 --> 00:04:43.385
The indexOf does not use that same
algorithm, because of historical reasons.

69
00:04:43.385 --> 00:04:48.032
So includes is actually not only more
ergonomic or semantic, but it also

70
00:04:48.032 --> 00:04:53.145
behaves the way we want, which is to tell
us for sure, is the value there or not?

