WEBVTT

1
00:00:00.949 --> 00:00:04.833
&gt;&gt; Kyle Simpson: So the sounds real great
that we now have this iterator protocol

2
00:00:04.833 --> 00:00:09.901
built in and we should be able to use this
with all of our favorite data structures.

3
00:00:09.901 --> 00:00:12.043
Except there is a problem,

4
00:00:12.043 --> 00:00:17.733
which is what do we do about data
structures that don't have iterators.

5
00:00:17.733 --> 00:00:23.284
It turns out that not all data
structures have iterators.

6
00:00:23.284 --> 00:00:28.586
The object is a great example,
object does not have a built in iterator.

7
00:00:28.586 --> 00:00:32.738
So if I make a regular plain old
object and I call for of on it,

8
00:00:32.738 --> 00:00:35.490
I'm gonna end up getting a type error.

9
00:00:35.490 --> 00:00:40.355
It's a type error because the for
of loop tries to access

10
00:00:40.355 --> 00:00:45.221
the symbol.iterator location
on that obj object, and

11
00:00:45.221 --> 00:00:48.965
it doesn't find anything defined there.

12
00:00:48.965 --> 00:00:53.957
So when it tries to execute, it's
trying to execute the undefined value.

13
00:00:55.677 --> 00:00:59.126
&gt;&gt; Kyle Simpson: It's kind of frustrating
that of all the data structures that

14
00:00:59.126 --> 00:01:03.837
are built into the language, the one that
they didn't make automatically iterable

15
00:01:03.837 --> 00:01:05.381
is the one that most of use.

16
00:01:05.381 --> 00:01:08.936
Which is we make our
own JavaScript objects.

17
00:01:08.936 --> 00:01:11.302
There's a variety of
historical reasons for

18
00:01:11.302 --> 00:01:13.801
why they didn't ship
a default iterator on it.

19
00:01:13.801 --> 00:01:18.779
But the bottom line is that it is not
actually that difficult to define our

20
00:01:18.779 --> 00:01:19.847
own iterator.

21
00:01:19.847 --> 00:01:22.343
And that's why we're
talking about this is,

22
00:01:22.343 --> 00:01:24.776
is we wanna make our own data structures,
and

23
00:01:24.776 --> 00:01:28.437
we wanna make our data structures
adhere to the iterator protocol.

24
00:01:28.437 --> 00:01:32.387
So if we know that the for
of loop or the dot dot dot operator,

25
00:01:32.387 --> 00:01:37.918
the way that it works is it automatically
tries to find something at that position,

26
00:01:37.918 --> 00:01:42.830
symbol.iterator, then all we need to
do is define one at that location.

27
00:01:42.830 --> 00:01:46.638
And then the for of loop and
the dot dot dot we'll use it.

28
00:01:46.638 --> 00:01:51.380
So let's try first to create our

29
00:01:51.380 --> 00:01:56.301
own iterator factory function.

30
00:01:56.301 --> 00:01:58.979
I call it a factory function
because every time you call

31
00:01:58.979 --> 00:02:01.607
it you would produce a new
instance of your iterator.

32
00:02:01.607 --> 00:02:05.152
You can iterate something multiple,
multiple times if you want to.

33
00:02:05.152 --> 00:02:09.039
So here it's a function,
and on line 6, for example,

34
00:02:09.039 --> 00:02:14.089
you'll notice here that basically I'm
just getting the list of keys for

35
00:02:14.089 --> 00:02:16.935
my object, which would be A, B, and C.

36
00:02:16.935 --> 00:02:20.096
And then I am returning back an object.

37
00:02:20.096 --> 00:02:23.217
And my object has one
property on it called next,

38
00:02:23.217 --> 00:02:27.040
that's what interators have,
is they have a next on them.

39
00:02:27.040 --> 00:02:31.000
And when I call that next method,
you'll notice that the next method

40
00:02:31.000 --> 00:02:35.312
does one thing, which is check to see
if there's anymore to iterate over.

41
00:02:35.312 --> 00:02:40.265
And if so, it returns an iterator
result that is done false, and

42
00:02:40.265 --> 00:02:42.027
then it has the value.

43
00:02:42.027 --> 00:02:47.845
Otherwise it returns an iterator results
with done true, and value undefined.

44
00:02:47.845 --> 00:02:51.591
Exactly the same way as all
the built in iterators do,

45
00:02:51.591 --> 00:02:54.932
they return of two kinds
of iterators results.

46
00:02:54.932 --> 00:03:00.189
So I'm simply returning the results
until I've gone through all the keys.

47
00:03:00.189 --> 00:03:04.760
That now has the effect down on line 17,
of actually,

48
00:03:04.760 --> 00:03:09.817
if you look down here on line 17,
it has the effect of pulling

49
00:03:09.817 --> 00:03:15.203
out the values from that object
into an array one, two and three.

50
00:03:15.203 --> 00:03:19.529
Same if I had done a for of loop, I would
have been getting the values one, two and

51
00:03:19.529 --> 00:03:20.575
three out, okay?

52
00:03:20.575 --> 00:03:26.676
So, some of you may have noticed
that I use an arrow function.

53
00:03:26.676 --> 00:03:30.689
And if you followed me much, you know that
I'm not a big fan of arrow functions.

54
00:03:30.689 --> 00:03:35.478
So what am I doing here, am I just
cheating to save space in the slides?

55
00:03:35.478 --> 00:03:40.464
Well, it turns out, this particular
scenario is a great illustration of why

56
00:03:40.464 --> 00:03:42.777
you want to use the arrow function.

57
00:03:42.777 --> 00:03:47.743
Because I need this keyword
inside of that function, and

58
00:03:47.743 --> 00:03:51.991
I need it to lexically
adopt the parent context.

59
00:03:51.991 --> 00:03:55.435
I don't want it to define its own,
I want it to adopt the parent context.

60
00:03:55.435 --> 00:03:59.322
That's exactly what the arrow
context shines at doing, and so

61
00:03:59.322 --> 00:04:04.622
this is inappropriate, in my opinion,
inappropriate usage of the arrow function.

