WEBVTT

1
00:00:00.000 --> 00:00:04.746
&gt;&gt; Kyle Simpson: Third feature that is
gonna be a big deal in certain use cases,

2
00:00:04.746 --> 00:00:09.690
that was added in ES 2018,
is what is called the .all mode.

3
00:00:09.690 --> 00:00:13.722
Specifically, it's a new flag that you
can add onto the end of your regular

4
00:00:13.722 --> 00:00:14.492
expression.

5
00:00:14.492 --> 00:00:19.418
So in addition to having g for global,
and m for multiline, and i for

6
00:00:19.418 --> 00:00:24.964
case insensitive, and those sorts of
flags, there's a new flag called s.

7
00:00:24.964 --> 00:00:30.198
And s turns on what is
called the dot all mode.

8
00:00:30.198 --> 00:00:35.154
The reason why this is important
is because historically, for

9
00:00:35.154 --> 00:00:39.922
all of regular expressions and
JavaScript up to this point,

10
00:00:39.922 --> 00:00:44.221
the dot operator, the period,
like we see on line 6,

11
00:00:44.221 --> 00:00:50.415
it is able to match any character,
except it doesn't match across new lines.

12
00:00:50.415 --> 00:00:53.673
So you're only able to
match on that exact line,

13
00:00:53.673 --> 00:00:57.413
which is why the code on line
6 doesn't find any match.

14
00:00:57.413 --> 00:01:01.230
Because it can't find brown and over,

15
00:01:01.230 --> 00:01:07.252
since the dot in that dot-star
can't span across a newline.

16
00:01:07.252 --> 00:01:11.739
If we then turn on the dot all mode,
the dot is able to match all characters,

17
00:01:11.739 --> 00:01:13.104
including new lines.

18
00:01:13.104 --> 00:01:18.721
So now, we're able to make regular
expression matches across lines.

19
00:01:22.944 --> 00:01:27.366
&gt;&gt; Kyle Simpson: Just three of a variety
of changes that have either landed, or

20
00:01:27.366 --> 00:01:28.734
are landing soon.

21
00:01:28.734 --> 00:01:34.148
Another couple of features, or another
regular expression feature that landed,

22
00:01:34.148 --> 00:01:39.249
not something that a lot of you will use,
but a new flag that was added, which is

23
00:01:39.249 --> 00:01:44.308
slash u, and it turns on Unicode-aware
mode for your regular expressions.

24
00:01:44.308 --> 00:01:48.375
Because JavaScript regular expressions
typically only work with the ASCII

25
00:01:48.375 --> 00:01:52.630
character set, and they don't really
treat the extended Unicode code space as

26
00:01:52.630 --> 00:01:54.040
individual characters.

27
00:01:54.040 --> 00:01:58.382
But now you can turn on Unicode
awareness for your regular expressions,

28
00:01:58.382 --> 00:01:59.317
if you need it.

29
00:01:59.317 --> 00:02:02.141
It also gives you some
additional syntax for

30
00:02:02.141 --> 00:02:05.813
Unicode escape sequences in
your regular expressions.

31
00:02:05.813 --> 00:02:08.919
But a bunch of really cool
stuff that has landed, and

32
00:02:08.919 --> 00:02:13.510
is landing in regular expressions,
is finally gonna bring this feature up to

33
00:02:13.510 --> 00:02:17.482
more parity with regular expression
support in other languages.

34
00:02:17.482 --> 00:02:21.813
And that should hopefully bring some
needed relief to all the frustration that

35
00:02:21.813 --> 00:02:22.344
we have.

36
00:02:22.344 --> 00:02:26.132
We naturally don't love writing regular
expressions, at least most of us.

37
00:02:26.132 --> 00:02:30.396
But it should bring some very
necessary relief to those problems.

38
00:02:30.396 --> 00:02:36.774
Any questions about these additions, or
improvements to regular expressions?

