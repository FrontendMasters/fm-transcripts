WEBVTT

1
00:00:02.729 --> 00:00:06.565
&gt;&gt; Kyle Simpson: All right, let's talk
about some regular expression improvements

2
00:00:06.565 --> 00:00:08.955
that, frankly, have been long pending.

3
00:00:08.955 --> 00:00:14.006
We've been wanting to have regular
expressions in JavaScript be improved for

4
00:00:14.006 --> 00:00:18.838
quite a long time, and they basically
haven't changed in ten plus years.

5
00:00:18.838 --> 00:00:20.445
But as of ES 2018,

6
00:00:20.445 --> 00:00:25.956
a set of very helpful changes were added
to JavaScript regular expressions.

7
00:00:25.956 --> 00:00:30.005
And they werenâ€™t the end, it turns out
they were just sort of the beginning of

8
00:00:30.005 --> 00:00:34.118
a whole slew of improvements that should
be coming to regular expressions over

9
00:00:34.118 --> 00:00:37.010
the course of the next
several JavaScript revisions.

10
00:00:37.010 --> 00:00:43.075
But there were three key ones that landed
in ES2018 that we wanna talk about.

11
00:00:44.359 --> 00:00:49.090
&gt;&gt; Kyle Simpson: The first one is
going to be what we call a lookbehind.

12
00:00:49.090 --> 00:00:51.373
But before we understand a lookbehind,

13
00:00:51.373 --> 00:00:54.534
you need to make sure you
understand hat a lookahead is.

14
00:00:54.534 --> 00:00:59.024
So if you haven't done much
with regular expression,

15
00:00:59.024 --> 00:01:04.196
the idea of a lookahead is
essentially an assertion that says,

16
00:01:04.196 --> 00:01:09.464
when I match a thing, I wanna
lookahead and say that my match only

17
00:01:09.464 --> 00:01:14.469
happens if something immediately
after this also matches.

18
00:01:14.469 --> 00:01:18.057
So I'm not matching both,
I'm only matching this thing, but

19
00:01:18.057 --> 00:01:21.515
I only wanna match it if the thing
right after it is also true.

20
00:01:21.515 --> 00:01:23.216
That's an assertion.

21
00:01:23.216 --> 00:01:28.299
So common examples of assertions that
you probably already used would be,

22
00:01:28.299 --> 00:01:33.553
the beginning or end of string anchors,
those are essentially assertions.

23
00:01:33.553 --> 00:01:35.520
You're saying I wanna match something but

24
00:01:35.520 --> 00:01:38.040
only if it shows up at the very
beginning of the string.

25
00:01:38.040 --> 00:01:40.350
And that's the little carrot symbol.

26
00:01:40.350 --> 00:01:43.364
That's your beginning of string anchor,
and that's an assertion.

27
00:01:43.364 --> 00:01:47.180
Your dollar sign character if
your end of string anchor,

28
00:01:47.180 --> 00:01:49.888
and that's essentially an assertion.

29
00:01:49.888 --> 00:01:53.697
This match should only happen if
it happens to be at the very end.

30
00:01:53.697 --> 00:01:58.060
So this idea of assertions in regular
expressions are saying, in addition

31
00:01:58.060 --> 00:02:02.090
to the thing that I'm matching,
something else also has to be true.

32
00:02:02.090 --> 00:02:06.850
And lookaheads allow us to not just
say simple things like beginning or

33
00:02:06.850 --> 00:02:09.281
end of string, but also patterns.

34
00:02:09.281 --> 00:02:14.277
So here, if I start out with a string,
Hello World, and I wanna match

35
00:02:14.277 --> 00:02:19.631
a pattern that is l., you notice that
it's gonna give me two responses.

36
00:02:19.631 --> 00:02:25.801
It's gonna give me the ll, that's from
positions two and three in the string.

37
00:02:25.801 --> 00:02:30.677
Or it's also gonna give me the l and
d, which is from the end of the string

38
00:02:30.677 --> 00:02:35.010
positions nine and ten, probably,
my math's probably off.

39
00:02:35.010 --> 00:02:37.819
But the ld that's at
the end of the string.

40
00:02:37.819 --> 00:02:41.852
So that's what happens when we
don't do any assertion at all.

41
00:02:41.852 --> 00:02:44.770
But what if I then put
a dollar sign assertion?

42
00:02:44.770 --> 00:02:47.750
Well, now I've restricted it to ld.

43
00:02:47.750 --> 00:02:51.626
And now we can see in line 9,
a different kind of assertion,

44
00:02:51.626 --> 00:02:53.534
which is called a lookahead.

45
00:02:53.534 --> 00:02:58.236
Lookaheads, by the way, are not new,
these have been in JavaScript for

46
00:02:58.236 --> 00:03:00.947
10 plus, almost 15 years probably.

47
00:03:00.947 --> 00:03:05.026
And they've also been in almost every
other flavor of regular expression that

48
00:03:05.026 --> 00:03:06.588
you've probably ever used.

49
00:03:06.588 --> 00:03:13.100
So we have this parenthesis-question
mark syntax that you see on line 9.

50
00:03:13.100 --> 00:03:17.167
And the ?= says, I want to ensure

51
00:03:17.167 --> 00:03:22.084
that this pattern, like o, does match.

52
00:03:22.084 --> 00:03:25.622
So that's what's called
a positive lookahead.

53
00:03:25.622 --> 00:03:28.535
On line 12, we see a different syntax,

54
00:03:28.535 --> 00:03:33.122
which uses the negate symbol,
and that is a negative lookahead.

55
00:03:33.122 --> 00:03:38.045
So here we're saying on line 9,
I only wanna match an l.,

56
00:03:38.045 --> 00:03:42.677
If it is followed by an o,
which is why we only get the ll.

57
00:03:42.677 --> 00:03:49.348
And then, when we say, l.,
only when it's not followed by an o,

58
00:03:49.348 --> 00:03:54.350
you'll notice that we get an lo,
and we get an ld,

59
00:03:54.350 --> 00:03:58.666
because those two are not
followed by an o.

60
00:03:58.666 --> 00:04:02.357
So that's positive and
negative lookaheads.

61
00:04:02.357 --> 00:04:04.291
Well, if we can do lookaheads,

62
00:04:04.291 --> 00:04:08.387
it makes sense that we would want
to sometimes also do lookbehinds.

63
00:04:08.387 --> 00:04:14.178
We would want to assert that something
behind our match was true or not true.

64
00:04:14.178 --> 00:04:19.896
Unfortunately, JavaScript for all of its
history has not supported lookbehinds.

65
00:04:19.896 --> 00:04:22.222
We had lookaheads but not lookbehinds.

66
00:04:22.222 --> 00:04:26.777
And it's been a major kind of missing
feature for our regular expressions.

67
00:04:26.777 --> 00:04:33.383
Lookbehinds have been hacked into,
like we've hacked ways to do lookbehinds.

68
00:04:33.383 --> 00:04:38.612
Like for example, reversing the string and
doing a lookahead with a reversed pattern,

69
00:04:38.612 --> 00:04:41.310
which is bonkers, that's a terrible idea.

70
00:04:41.310 --> 00:04:45.691
But that's an example of how people
have tried to work around, or

71
00:04:45.691 --> 00:04:49.923
hack around, not having positive and
negative lookbehinds.

72
00:04:49.923 --> 00:04:54.813
As of ES2018, we now officially
have support for positive and

73
00:04:54.813 --> 00:04:56.657
negative lookbehinds.

74
00:04:56.657 --> 00:05:00.145
And it's a very similar syntax
to what we had before, but

75
00:05:00.145 --> 00:05:02.409
now it has the less than symbol in it.

76
00:05:02.409 --> 00:05:06.709
So on line 3 we're saying,
only matching an l.,

77
00:05:06.709 --> 00:05:11.510
if it is preceded by an e,
which is why we get the ll match.

78
00:05:11.510 --> 00:05:15.598
And then line six we're
saying only match and l.,

79
00:05:15.598 --> 00:05:21.127
if it's not preceded by e, which is
why we get the lo and the ld match.

80
00:05:22.750 --> 00:05:26.007
&gt;&gt; Kyle Simpson: So
we now have both positive and

81
00:05:26.007 --> 00:05:30.277
negative lookaheads and lookbehinds.

82
00:05:30.277 --> 00:05:33.457
So that's the first big improvement
to regular expressions,

83
00:05:33.457 --> 00:05:35.023
being able to do lookbehinds.

84
00:05:35.023 --> 00:05:37.455
And if you work with
regular expressions at all,

85
00:05:37.455 --> 00:05:41.447
there's a pretty good chance that you've
probably been frustrated by these.

86
00:05:41.447 --> 00:05:43.900
And now,
knowing that you have both of them,

87
00:05:43.900 --> 00:05:46.882
hopefully you can improve
your regular expressions.

