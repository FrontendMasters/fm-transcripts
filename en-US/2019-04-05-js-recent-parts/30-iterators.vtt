WEBVTT

1
00:00:02.254 --> 00:00:06.532
&gt;&gt; Speaker 1: All right, our next topic
to dive into, this is from ES6 LAN.

2
00:00:06.532 --> 00:00:10.030
So these have been in the language now for
a good three to four years.

3
00:00:10.030 --> 00:00:13.269
We're gonna talk about iterators and
generators.

4
00:00:13.269 --> 00:00:14.880
They flow well together,

5
00:00:14.880 --> 00:00:20.162
specifically generators are gonna give us
a declarative way of creating iterators.

6
00:00:20.162 --> 00:00:21.961
So, what do we mean by an iterator?

7
00:00:21.961 --> 00:00:23.605
What is that iterator pattern?

8
00:00:23.605 --> 00:00:27.181
Well basically, whenever you
have some data source, and I'm

9
00:00:27.181 --> 00:00:31.908
gonna use heavy air quotes here because
data source doesn't have to be a database.

10
00:00:31.908 --> 00:00:35.186
It can just be some value like an array.

11
00:00:35.186 --> 00:00:37.976
But anything that is a data source,

12
00:00:37.976 --> 00:00:43.566
if you would like to consume the values
in that data source one at a time.

13
00:00:43.566 --> 00:00:47.317
One of the most common ways to do
that is called the iterator pattern.

14
00:00:47.317 --> 00:00:52.812
Essentially you construct
a controller that gives you a view

15
00:00:52.812 --> 00:00:58.423
of that data source and
it presents values one value at a time.

16
00:00:58.423 --> 00:01:03.056
You do that by constructing an object and
then calling .next over and over and

17
00:01:03.056 --> 00:01:03.847
over again.

18
00:01:03.847 --> 00:01:09.599
And every time you call .next, you get
back the next value from that data source.

19
00:01:09.599 --> 00:01:13.199
So, to consume a data source
all the way to it's completion,

20
00:01:13.199 --> 00:01:17.563
you would essentially do kind of a loop
and just keep calling .next over and

21
00:01:17.563 --> 00:01:20.906
over and over again until
you've got all the values out.

22
00:01:20.906 --> 00:01:26.419
Now why this matters to JavaScript is
not just for normal data structures,

23
00:01:26.419 --> 00:01:31.232
but in ES6, they took all of
the basic built-in data value types

24
00:01:31.232 --> 00:01:35.364
that exist in the language and
they made them iterable.

25
00:01:35.364 --> 00:01:40.033
So an iterable is something
that can be iterated over.

26
00:01:40.033 --> 00:01:44.897
Let's take a look, you could talk about
a string value like quote Hello, or

27
00:01:44.897 --> 00:01:49.081
you could talk at about an array
that had a set of characters in it.

28
00:01:49.081 --> 00:01:54.011
And in both cases, the string and
the array or what we call iterable,

29
00:01:54.011 --> 00:01:59.546
meaning you can construct an iterator
to consume their constituent values.

30
00:01:59.546 --> 00:02:04.825
Line 4 you see I'm constructing
an iterator, looks a little strange

31
00:02:04.825 --> 00:02:10.017
I'm calling this symbol.iterator
which is this special value that

32
00:02:10.017 --> 00:02:15.402
finds a location on the string object and
produces an iterator from it.

33
00:02:15.402 --> 00:02:20.600
So line 4 you see them accessing the
special metal location of the object, and

34
00:02:20.600 --> 00:02:26.065
then I'm invoking it as a function, and
that gives me my iterator instance it1.

35
00:02:26.065 --> 00:02:29.644
Do the same thing with the world array,
and

36
00:02:29.644 --> 00:02:33.131
I get another iterator back called it2.

37
00:02:33.131 --> 00:02:35.729
Now you see I can call it1.next and

38
00:02:35.729 --> 00:02:39.545
I get back what is referred
to as an iterator result.

39
00:02:39.545 --> 00:02:43.733
And an iterator results is just
an object with two properties on it,

40
00:02:43.733 --> 00:02:48.074
one of them is the value property,
the other one is the done property.

41
00:02:48.074 --> 00:02:52.900
Value of course is the value that is being
iterated out and done is a Boolean and

42
00:02:52.900 --> 00:02:56.109
it tells you if there's
anything more to iterate.

43
00:02:56.109 --> 00:02:59.249
So when I call it1.next
the first time on line 7,

44
00:02:59.249 --> 00:03:01.670
I get the character H out of the string.

45
00:03:01.670 --> 00:03:05.650
And if I call it again, I get e and
then l and then l and then o.

46
00:03:05.650 --> 00:03:09.636
And you'll notice line 11,
it still says done false.

47
00:03:09.636 --> 00:03:14.513
That's because the iterator protocol is
that the way that you know that there's

48
00:03:14.513 --> 00:03:19.046
nothing else to consume is that you
iterate past the end of the data source.

49
00:03:19.046 --> 00:03:23.586
You get back a value undefined,
and then it says done true.

50
00:03:23.586 --> 00:03:27.161
It never throws an error,
it just gives you value,

51
00:03:27.161 --> 00:03:31.000
undefined, done true, and
then you know it's done.

52
00:03:31.000 --> 00:03:35.160
And even you kept calling .next over and
over and over again, from that point

53
00:03:35.160 --> 00:03:39.272
forward, you're just gonna keep getting
back value undefined done true.

54
00:03:39.272 --> 00:03:42.486
And so I can do that with a string and
I can do that with an array.

55
00:03:42.486 --> 00:03:47.361
As a matter of fact, almost all the data
structures that you work with in your

56
00:03:47.361 --> 00:03:51.796
JavaScript program are now iterables and
you can iterate over them.

57
00:03:51.796 --> 00:03:56.218
This is ugly in manual, but there are some
really nice ways of iterating that we'll

58
00:03:56.218 --> 00:03:57.621
look at in the next slide.

59
00:03:57.621 --> 00:03:58.472
&gt;&gt; Speaker 2: I have a question.

60
00:03:58.472 --> 00:03:59.605
&gt;&gt; Speaker 1: Yes.

61
00:03:59.605 --> 00:04:01.217
&gt;&gt; Speaker 2: Can you go backwards?

62
00:04:01.217 --> 00:04:02.386
&gt;&gt; Speaker 1: Sure.

63
00:04:02.386 --> 00:04:04.481
&gt;&gt; Speaker 2: No,
can you go backwards in an iterator?

64
00:04:04.481 --> 00:04:08.714
&gt;&gt; Speaker 1: I'm sorry,
[LAUGH] can you backwards in an iterator?

65
00:04:08.714 --> 00:04:11.707
The iterator protocol does
not support going backwards,

66
00:04:11.707 --> 00:04:13.241
it's only a forwards thing.

67
00:04:13.241 --> 00:04:17.036
If you wanted to make your own
custom extension on that protocol,

68
00:04:17.036 --> 00:04:18.282
you could of course.

69
00:04:18.282 --> 00:04:22.423
Basically, have your own iterator
that gives values out in reverse,

70
00:04:22.423 --> 00:04:25.371
and then somebody would
keep calling .next, but

71
00:04:25.371 --> 00:04:28.198
they would be consuming
something in reverse.

72
00:04:28.198 --> 00:04:30.559
So, like you could make
something like that for

73
00:04:30.559 --> 00:04:32.637
an array that iterated it out in reverse.

74
00:04:32.637 --> 00:04:37.406
But the protocol, or the interface itself
would still be .next, .next, .next, .next.

75
00:04:37.406 --> 00:04:41.193
Yeah, and we'll look at making our own
custom iterators here in just a moment

