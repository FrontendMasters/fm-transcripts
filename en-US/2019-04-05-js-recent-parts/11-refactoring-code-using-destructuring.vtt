WEBVTT

1
00:00:00.019 --> 00:00:03.295
&gt;&gt; Kyle Simpson: Let's take
a look at destructuring.

2
00:00:03.295 --> 00:00:06.085
I'm gonna start with this left and
right layout.

3
00:00:06.085 --> 00:00:07.608
And on the left-hand side,

4
00:00:07.608 --> 00:00:11.738
I'm gonna try to keep up at least as much
as I can throughout this discussion.

5
00:00:11.738 --> 00:00:14.458
I'm gonna try to have
on the left-hand side,

6
00:00:14.458 --> 00:00:16.983
the old pre-destructuring equivalent.

7
00:00:16.983 --> 00:00:19.787
And then on the right-hand side I'll
show you the destructuring equivalent.

8
00:00:19.787 --> 00:00:24.252
And the reason for that is I want you
to get a sense that destructuring has

9
00:00:24.252 --> 00:00:25.896
a processing model to it.

10
00:00:25.896 --> 00:00:29.202
I want you to be able to
think like the destructuring,

11
00:00:29.202 --> 00:00:33.988
because that will help you work through
the various syntactic differences.

12
00:00:33.988 --> 00:00:35.659
If you can always think about,

13
00:00:35.659 --> 00:00:39.020
what would the equivalent have been
if I wasn't using destructuring?

14
00:00:39.020 --> 00:00:40.755
That will help you predict the outcomes.

15
00:00:40.755 --> 00:00:44.067
So I'm gonna try to show you
those examples side by side so

16
00:00:44.067 --> 00:00:46.416
that you can learn what it is replacing.

17
00:00:46.416 --> 00:00:50.036
It will also help you when you're looking
at pattern matching through your code to

18
00:00:50.036 --> 00:00:52.198
look for
places to replace with destructuring.

19
00:00:52.198 --> 00:00:55.238
Now you'll be able to identify
those a little more clearly.

20
00:00:55.238 --> 00:01:01.478
So let's imagine that we have a function
that is gonna return us some values.

21
00:01:01.478 --> 00:01:03.936
And since I'm not
a terribly creative person,

22
00:01:03.936 --> 00:01:06.771
I'm just gonna have it return
us some numbers, okay?

23
00:01:06.771 --> 00:01:08.284
It's gonna return us some numbers.

24
00:01:08.284 --> 00:01:11.476
And I would normally be
grabbing this data and

25
00:01:11.476 --> 00:01:17.450
assigning it off into a variable that I
didn't particularly care about, like tmp.

26
00:01:19.981 --> 00:01:23.534
&gt;&gt; Kyle Simpson: And then I would be
assigning off the individual element

27
00:01:23.534 --> 00:01:26.337
values into variables
that I do care about.

28
00:01:26.337 --> 00:01:30.580
Like for example I might say,

29
00:01:30.580 --> 00:01:35.672
first = temp [0], and second =

30
00:01:35.672 --> 00:01:41.458
temp [1], and third = temp [2].

31
00:01:41.458 --> 00:01:48.215
So first would be value 1, second would
be value 2 and third would be value 3.

32
00:01:48.215 --> 00:01:53.336
So that's the imperative approach,
what's the destructuring approach?

33
00:01:53.336 --> 00:02:00.421
Same data function that returns
us an array of 1, 2, 3.

34
00:02:04.296 --> 00:02:06.245
&gt;&gt; Kyle Simpson: Now we don't really

35
00:02:06.245 --> 00:02:11.033
need to
&gt;&gt; Kyle Simpson: Make

36
00:02:11.033 --> 00:02:13.012
a temporary variable to hold it.

37
00:02:13.012 --> 00:02:17.129
Because in the previous example we didn't
even really care about temporary variable.

38
00:02:17.129 --> 00:02:21.889
We don't need a temporary variable, so
we're just gonna immediately say here's

39
00:02:21.889 --> 00:02:24.609
the pattern of what I'm
expecting to get back.

40
00:02:24.609 --> 00:02:28.965
So I'm gonna declare here, but this is
not actually related to declarations,

41
00:02:28.965 --> 00:02:30.728
this is related to assignment.

42
00:02:30.728 --> 00:02:33.579
Here I'm just making them at
the same time as assigning them.

43
00:02:33.579 --> 00:02:38.574
So I’m going to say a var, and
then I’m gonna open up a square brackets.

44
00:02:38.574 --> 00:02:41.881
And then on the right-hand
side I'm gonna call data.

45
00:02:41.881 --> 00:02:44.512
So that square bracket is my pattern,

46
00:02:44.512 --> 00:02:48.057
because it’s on the left-hand
side of an equals.

47
00:02:48.057 --> 00:02:50.987
For readability's sake,
I'm gonna go ahead and

48
00:02:50.987 --> 00:02:55.673
keep these on multiple lines, with
nesting, and indentation, and so forth.

49
00:02:55.673 --> 00:02:58.753
And I'm gonna strongly
recommend that you do the same.

50
00:02:58.753 --> 00:03:01.994
I've seen a lot of examples of
people using destructuring, and

51
00:03:01.994 --> 00:03:03.379
they put it all on one line.

52
00:03:03.379 --> 00:03:05.579
And then the line is 15 miles long, and

53
00:03:05.579 --> 00:03:10.071
it completely defeats the whole purpose
of having declarative, readable code.

54
00:03:10.071 --> 00:03:13.591
If our purpose is to make readable code,
use things like new lines and

55
00:03:13.591 --> 00:03:15.665
white space to make them more readable.

56
00:03:15.665 --> 00:03:18.332
They are free and they are helpful.

57
00:03:18.332 --> 00:03:23.558
So I'm gonna then say, in that first
position of the array I'm expecting

58
00:03:23.558 --> 00:03:28.714
whatever that value is to end up
getting assigned to the first variable.

59
00:03:28.714 --> 00:03:31.942
And then the second position of the array,
index 1,

60
00:03:31.942 --> 00:03:34.325
assign it to a variable called second.

61
00:03:34.325 --> 00:03:40.249
And the value in position
three to the third element,

62
00:03:40.249 --> 00:03:43.943
assign it to the variable third.

63
00:03:46.760 --> 00:03:50.878
&gt;&gt; Kyle Simpson: So that is
the equivalent destructuring pattern,

64
00:03:50.878 --> 00:03:55.198
where we did it imperatively
on the left-hand side.

65
00:03:55.198 --> 00:04:00.335
If I were to take off the number
3 from this left-hand side,

66
00:04:00.335 --> 00:04:05.294
what would we expect the third
variable here to have in it?

67
00:04:09.080 --> 00:04:14.040
&gt;&gt; Kyle Simpson: We're referencing index
2 of an array that only has an index of

68
00:04:14.040 --> 00:04:15.169
zero and one.

69
00:04:15.169 --> 00:04:18.782
What would we expect this to give us?

70
00:04:18.782 --> 00:04:19.486
&gt;&gt; Class: Undefined?

71
00:04:19.486 --> 00:04:21.183
&gt;&gt; Kyle Simpson: Undefined, right.

72
00:04:21.183 --> 00:04:24.833
That is exactly the same thing as what
we're going to get out of destructuring.

73
00:04:24.833 --> 00:04:29.053
If our destructuring pattern indicates
something that doesn't exist,

74
00:04:29.053 --> 00:04:31.306
then it just gets assigned undefined.

75
00:04:33.924 --> 00:04:36.552
&gt;&gt; Kyle Simpson: What would
happen if I had a value here and

76
00:04:36.552 --> 00:04:41.747
then I had an extra value, and we didn't
account for it on the left-hand side?

77
00:04:43.587 --> 00:04:46.253
&gt;&gt; Kyle Simpson: Nothing,
just gets ignored.

78
00:04:46.253 --> 00:04:48.419
Exactly the same thing is true here.

79
00:04:48.419 --> 00:04:49.899
We have these numbers.

80
00:04:49.899 --> 00:04:54.545
The number 1, 2 and 3 are accounted for,
the number 4 is not accounted for.

81
00:04:54.545 --> 00:04:56.873
No big deal, it just gets ignored.

82
00:04:59.408 --> 00:05:01.533
&gt;&gt; Kyle Simpson: What
if it was possible for

83
00:05:01.533 --> 00:05:05.597
one of these positions to
come back as undefined?

84
00:05:08.541 --> 00:05:11.432
&gt;&gt; Kyle Simpson: Well then,
second would be undefined, right?

85
00:05:11.432 --> 00:05:14.855
Even though that index exists,
the value is undefined.

86
00:05:14.855 --> 00:05:19.481
I could type undefined there or
not type undefined, but

87
00:05:19.481 --> 00:05:24.410
either way we're expecting
that that value is undefined.

88
00:05:24.410 --> 00:05:28.901
So what would happen with the second
variable is that it would just be holding

89
00:05:28.901 --> 00:05:31.788
the undefined variable,
the undefined value.

90
00:05:31.788 --> 00:05:34.220
The same is true over here.

91
00:05:34.220 --> 00:05:37.606
But what happens if I don't
want it to be undefined?

92
00:05:37.606 --> 00:05:41.251
If it's undefined I want to
apply some sort of default.

93
00:05:41.251 --> 00:05:45.841
Well the way we would typically define
a default would be to use a ternary

94
00:05:45.841 --> 00:05:46.617
operator.

95
00:05:46.617 --> 00:05:51.956
So we'd say something like temp
of 1 not equal to undefined,

96
00:05:51.956 --> 00:05:56.732
and then we would say temp of 1
&gt;&gt; Kyle Simpson: Or, and

97
00:05:56.732 --> 00:06:01.475
then we'd provide a default back up for
it, like the number 10.

98
00:06:04.938 --> 00:06:09.821
&gt;&gt; Kyle Simpson: So what is the equivalent
of doing this ternary for our second?

99
00:06:09.821 --> 00:06:13.686
The equivalent is to use
the default value expression.

100
00:06:22.618 --> 00:06:26.649
&gt;&gt; Kyle Simpson: And that applies
to any of those element positions.

101
00:06:26.649 --> 00:06:30.174
You can apply a default to any
of those element positions.

102
00:06:30.174 --> 00:06:33.828
It is important to note that
exactly like over here,

103
00:06:33.828 --> 00:06:37.244
if I used null what would
the variable second be?

104
00:06:40.639 --> 00:06:41.402
&gt;&gt; Class: Null.

105
00:06:41.402 --> 00:06:43.989
&gt;&gt; Kyle Simpson: It would be null,
not the value 10.

106
00:06:43.989 --> 00:06:48.860
It would be null because null is not
undefined in a strict equal sense.

107
00:06:48.860 --> 00:06:53.478
So it's important to understand
that the default value

108
00:06:53.478 --> 00:06:58.005
expression only picks up
when there's an undefined.

109
00:06:58.005 --> 00:07:02.077
It just doesn't kick in in the place where
there's a null or an empty string or

110
00:07:02.077 --> 00:07:03.277
a false or something.

111
00:07:03.277 --> 00:07:06.698
So it is not a loose quality
check with undefined,

112
00:07:06.698 --> 00:07:09.884
it's a strict quality
check with undefined.

113
00:07:12.029 --> 00:07:16.006
&gt;&gt; Kyle Simpson: Here, the same thing,
second would be null not 10.

114
00:07:24.033 --> 00:07:25.716
&gt;&gt; Kyle Simpson: Okay, what if this array,

115
00:07:25.716 --> 00:07:29.389
let's go back to the case where
it's got some values in it.

116
00:07:29.389 --> 00:07:32.743
What is this array had several
other values in it and

117
00:07:32.743 --> 00:07:35.941
I couldn't predict how
many values it had in it?

118
00:07:35.941 --> 00:07:40.911
But I basically just kind of
wanted all of them to have to

119
00:07:40.911 --> 00:07:43.732
be collected up into an array.

120
00:07:43.732 --> 00:07:46.627
So I didn't have any defaults anymore,
we'll go back to this.

121
00:07:46.627 --> 00:07:50.958
And what if we just had those values,
like in this case, the four and the five?

122
00:07:50.958 --> 00:07:53.908
I don't know and I can't even
predict how many there are, but

123
00:07:53.908 --> 00:07:56.251
I'd like to collect all
of them up into an array.

124
00:07:56.251 --> 00:07:57.724
What would that look like?

125
00:07:57.724 --> 00:08:02.019
Well, on the left-hand side,
we could have done that imperatively,

126
00:08:02.019 --> 00:08:04.395
by creating a variable called fourth.

127
00:08:04.395 --> 00:08:08.827
And we would need to take a slice of
this array, starting at position 3.

128
00:08:08.827 --> 00:08:13.809
So we'd have to say tmp.slice,
starting at position 3.

129
00:08:13.809 --> 00:08:16.828
And now fourth would be the array 4 and 5.

130
00:08:21.493 --> 00:08:24.973
&gt;&gt; Kyle Simpson: And if had 6 and 7 and
8 it would include those as well.

131
00:08:24.973 --> 00:08:27.956
In our destructuring patterns,

132
00:08:27.956 --> 00:08:34.036
similar to our function signatures,
we can use the gather syntax.

133
00:08:34.036 --> 00:08:36.301
It's sometimes referred
to as the rest syntax.

134
00:08:36.301 --> 00:08:41.229
We can use the dot dot dot operator
to gather everything else up into

135
00:08:41.229 --> 00:08:43.078
an array called fourth.

