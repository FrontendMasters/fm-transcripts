WEBVTT

1
00:00:00.118 --> 00:00:00.930
&gt;&gt; Kyle Simpson: All right,

2
00:00:00.930 --> 00:00:05.246
I know you are eagerly awaiting
the solution to this exercise.

3
00:00:05.246 --> 00:00:08.718
[SOUND] All right, let's jump in and

4
00:00:08.718 --> 00:00:12.899
talk about the solution to async/await.

5
00:00:12.899 --> 00:00:16.487
We want to request all of
the files concurrently.

6
00:00:16.487 --> 00:00:21.586
So we definitely are gonna need to make
three separate getFile calls, right?

7
00:00:21.586 --> 00:00:27.156
If we call getFile(files[0]),

8
00:00:27.156 --> 00:00:31.856
and getFile(files[1]),

9
00:00:31.856 --> 00:00:36.559
and getFile(files[2]).

10
00:00:36.559 --> 00:00:40.989
That would request them concurrently.

11
00:00:40.989 --> 00:00:43.413
But do we wanna get their responses back?

12
00:00:43.413 --> 00:00:45.853
Of course, we need to get some response.

13
00:00:45.853 --> 00:00:52.323
So if we were to say something like,
text1 = await getFile.

14
00:00:52.323 --> 00:00:55.641
And then we have the same
thing on the other two lines.

15
00:00:59.049 --> 00:01:01.989
&gt;&gt; Kyle Simpson: Then what would be
happening here is we would not be

16
00:01:01.989 --> 00:01:05.844
requesting the second file until
after the first file finished.

17
00:01:05.844 --> 00:01:09.376
So that would fail our concurrency thing.

18
00:01:09.376 --> 00:01:14.459
So we don't wanna do our awaits if we
want things to happen concurrently.

19
00:01:14.459 --> 00:01:17.371
So let's take the awaits out.

20
00:01:17.371 --> 00:01:20.856
And if I take those awaits out,
then these are not text anymore.

21
00:01:20.856 --> 00:01:23.176
These are the promises
that are coming back.

22
00:01:23.176 --> 00:01:30.762
So this would be like pr1 and pr2 and pr3.

23
00:01:30.762 --> 00:01:35.364
Well now that looks super like redundant,
like, why am I calling that over and over?

24
00:01:35.364 --> 00:01:37.974
Why don't I, if I have a list of my files,

25
00:01:37.974 --> 00:01:41.345
I should just do something like,
maybe in a map.

26
00:01:41.345 --> 00:01:45.059
If I mapped my list of files
into a list of promises.

27
00:01:45.059 --> 00:01:51.540
So I could say prs,
the promises, = files.map.

28
00:01:51.540 --> 00:01:57.474
And I need a function that will
turn the string into a promise.

29
00:01:57.474 --> 00:01:58.949
And that function is getFile.

30
00:01:58.949 --> 00:02:03.940
So getFile is our mapper function.

31
00:02:03.940 --> 00:02:06.784
So now I have an array of three promises.

32
00:02:06.784 --> 00:02:08.955
All the requests have gone out.

33
00:02:08.955 --> 00:02:12.467
And now I need to print them
as soon as possible, but

34
00:02:12.467 --> 00:02:14.518
I need to print them in order.

35
00:02:14.518 --> 00:02:21.613
So I can simply do for (let pr of prs).

36
00:02:21.613 --> 00:02:24.813
So loop over the promises array.

37
00:02:24.813 --> 00:02:28.766
And for each promise I can say,

38
00:02:28.766 --> 00:02:32.576
console.log(await pr).

39
00:02:32.576 --> 00:02:38.703
So now it's okay for the promise await for
the await to block on the promise,

40
00:02:38.703 --> 00:02:42.843
because we do want then to
print out sequentially.

41
00:02:42.843 --> 00:02:47.286
One thing that you may have wondered,
if you were working with this for loop.

42
00:02:47.286 --> 00:02:52.197
Since we used a map here you might have
thought to yourself, well, you know,

43
00:02:52.197 --> 00:02:53.643
could I use a for each?

44
00:02:53.643 --> 00:02:58.643
So you might've tried to do
something like prs.forEach, and

45
00:02:58.643 --> 00:03:03.277
then had a function here that,
you know, called output.

46
00:03:03.277 --> 00:03:11.221
That gets a pr and
then console logs the await of that pr.

47
00:03:11.221 --> 00:03:12.757
Did anyone try that approach?

48
00:03:15.437 --> 00:03:17.141
&gt;&gt; Kyle Simpson: This
was my natural instinct.

49
00:03:17.141 --> 00:03:19.519
If I'm gonna use a .map,
why not go ahead and

50
00:03:19.519 --> 00:03:22.724
try to use some other functional
iterator like a .for each.

51
00:03:22.724 --> 00:03:24.423
Except there's a problem here.

52
00:03:24.423 --> 00:03:27.483
And if you try it you'll
get a syntax error,

53
00:03:27.483 --> 00:03:32.465
because the await keyword can't show
up inside of a regular function.

54
00:03:32.465 --> 00:03:37.029
In just a few minutes, we'll talk about
possible other strategies for that.

55
00:03:37.029 --> 00:03:40.050
But that's why we needed
to use a regular for loop,

56
00:03:40.050 --> 00:03:44.489
is because we can't use the await
keyword across that function boundary.

