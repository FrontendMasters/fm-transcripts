WEBVTT

1
00:00:01.993 --> 00:00:05.576
&gt;&gt; Kyle Simpson: So destructuring,
let's dive in and go ahead and

2
00:00:05.576 --> 00:00:10.711
loosen up those fingers cuz there's
gonna be a lot of typing involved.

3
00:00:10.711 --> 00:00:13.719
I'm gonna be showing you some
slides here for a few moments, but

4
00:00:13.719 --> 00:00:16.240
then I'm gonna be switching
into a live coding mode.

5
00:00:16.240 --> 00:00:19.335
And when I do this live coding,
I really want you to keep up and

6
00:00:19.335 --> 00:00:20.381
type along with me.

7
00:00:20.381 --> 00:00:24.417
There are so many different variations of
the syntax that I would have had to put

8
00:00:24.417 --> 00:00:27.243
in, literally,
hundreds of slides to show them all.

9
00:00:27.243 --> 00:00:31.866
So we're just gonna do it in live coding
mode and I'm gonna be using a side by side

10
00:00:31.866 --> 00:00:34.971
view in my code editor so
that you can see the before and

11
00:00:34.971 --> 00:00:38.655
the after of what we're comparing
to versus with this syntax.

12
00:00:38.655 --> 00:00:41.451
So make sure to get ready
to do lots of typing.

13
00:00:41.451 --> 00:00:45.563
We'll spend a pretty considerable
amount of time on this topic,

14
00:00:45.563 --> 00:00:50.194
because I want you to get a sense, or
a better sense of confidence that it is

15
00:00:50.194 --> 00:00:53.805
not just this weird black box
that can't be understood.

16
00:00:53.805 --> 00:00:58.243
There are certainly lots of nuances to it,
and it's gonna take a while.

17
00:00:58.243 --> 00:01:01.069
The first time I tried
to learn destructuring,

18
00:01:01.069 --> 00:01:04.400
I spent probably three weeks
trying to make sense of it.

19
00:01:04.400 --> 00:01:05.809
So it is a complex thing.

20
00:01:05.809 --> 00:01:10.831
But as I said in the course overview at
the beginning, I put this in the course

21
00:01:10.831 --> 00:01:16.346
because I so strongly believe that it will
pay off so many other places in your code.

22
00:01:16.346 --> 00:01:20.247
As you start to get more comfortable with
the idea of destructuring, you start

23
00:01:20.247 --> 00:01:24.206
finding little places all over that you
were doing things in a more manual way and

24
00:01:24.206 --> 00:01:27.720
now we can have this declarative
destructuring do it in a cleaner way.

25
00:01:27.720 --> 00:01:30.996
What does that term even mean,
destructuring?

26
00:01:30.996 --> 00:01:36.217
I don't know what it officially means,
but this is how I like to think of it

27
00:01:36.217 --> 00:01:41.713
mentally, is that it is decomposing
a structure into its individual parts.

28
00:01:41.713 --> 00:01:47.389
First and foremost, you need to understand
that the purpose of destructuring

29
00:01:47.389 --> 00:01:52.550
as a feature is to assign individual
parts from some larger structure.

30
00:01:52.550 --> 00:01:56.743
Assign to individual variables,
assign to individual properties,

31
00:01:56.743 --> 00:01:59.238
whatever, from some larger structure.

32
00:01:59.238 --> 00:02:02.575
So we're taking a big thing,
and assigning down some or

33
00:02:02.575 --> 00:02:05.773
all of its individual parts
to some other locations.

34
00:02:05.773 --> 00:02:07.800
That's what this feature is for.

35
00:02:07.800 --> 00:02:11.528
So let's look at a somewhat common task.

36
00:02:11.528 --> 00:02:14.046
Many of you have probably
done this before,

37
00:02:14.046 --> 00:02:18.279
many of you have probably tried to pull
in some big JSON object from an API.

38
00:02:18.279 --> 00:02:21.960
Maybe you made a request against
the Twitter API or something like that.

39
00:02:21.960 --> 00:02:26.777
And you get a big, hairy nested JSON
object with objects and inside of them,

40
00:02:26.777 --> 00:02:30.473
arrays of other objects that
have arrays and properties.

41
00:02:30.473 --> 00:02:32.202
And you're 19 levels deep and

42
00:02:32.202 --> 00:02:35.412
you're trying to deal with all
this crazy data structure.

43
00:02:35.412 --> 00:02:39.763
And you really just need a few bits and
pieces from this giant structure.

44
00:02:39.763 --> 00:02:43.810
It's very common that you'll,
for convenience's sake, if for

45
00:02:43.810 --> 00:02:47.133
no other reason, go ahead and
just reference off one of

46
00:02:47.133 --> 00:02:51.051
those deeply nested properties and
assign it to some variable.

47
00:02:51.051 --> 00:02:54.893
So that you can then use that variable
in the rest of the code logic of your

48
00:02:54.893 --> 00:02:59.124
program, rather than making a fully
qualified reference into that structure

49
00:02:59.124 --> 00:03:02.354
over and over and over again,
again for convenience sake.

50
00:03:02.354 --> 00:03:07.182
So here's an example of doing that,
I'm gonna pull back some object from this,

51
00:03:07.182 --> 00:03:08.531
get some records API.

52
00:03:08.531 --> 00:03:10.687
And you can see that line three and four,

53
00:03:10.687 --> 00:03:13.869
I'm basically,
pulling out two elements out of an array.

54
00:03:13.869 --> 00:03:17.944
And then line six is I'm taking that
first element from the array, and

55
00:03:17.944 --> 00:03:21.899
I'm looking at some properties on it,
like the dot name property.

56
00:03:21.899 --> 00:03:26.700
And then line seven, I'm actually not only
looking at the dot email property, but

57
00:03:26.700 --> 00:03:30.970
if it's not present, I'm providing
line nine a default email address.

58
00:03:30.970 --> 00:03:33.712
And then I do the same thing for
the second.

59
00:03:33.712 --> 00:03:37.492
So some of you have probably
done code exactly like this or

60
00:03:37.492 --> 00:03:41.837
very similar to this and
maybe many times, and I certainly have.

61
00:03:41.837 --> 00:03:45.572
I've had to consume these big
large JSON data structures.

62
00:03:45.572 --> 00:03:50.110
And this is functional code in
the sense that it mechanically works.

63
00:03:50.110 --> 00:03:54.427
But it is certainly far from ideal
in terms of communicating the idea,

64
00:03:54.427 --> 00:03:56.709
communicating what's happening.

65
00:03:56.709 --> 00:04:01.109
It would take you a fair amount of
effort to have picked through and

66
00:04:01.109 --> 00:04:05.430
figured out what it was doing if
I hadn't just described to you.

67
00:04:05.430 --> 00:04:08.222
And to get a mental model that, okay,

68
00:04:08.222 --> 00:04:14.259
I'm getting back an array of objects that
have name and email properties from it.

69
00:04:14.259 --> 00:04:18.436
You can pick that out, but it takes
a pretty significant amount of brain power

70
00:04:18.436 --> 00:04:20.570
to figure that out from code like this.

71
00:04:20.570 --> 00:04:23.800
In addition to the reader
having to do that sort of work,

72
00:04:23.800 --> 00:04:26.756
it's also very common that
you might get it wrong or

73
00:04:26.756 --> 00:04:31.536
you might miss that there's other bits of
the data that you can't even see there.

74
00:04:31.536 --> 00:04:35.022
And so it's extremely common
that people will also

75
00:04:35.022 --> 00:04:39.410
try to document the data structure
in some sort of code comment.

76
00:04:39.410 --> 00:04:41.415
For example, JSDoc style,

77
00:04:41.415 --> 00:04:46.185
documenting what do I expect back
as the return value from this API?

78
00:04:46.185 --> 00:04:48.825
And you have this very complex
code comment that gives all

79
00:04:48.825 --> 00:04:51.799
the different properties and
their types and things like that.

80
00:04:51.799 --> 00:04:54.830
And code comments
are certainly very useful, but

81
00:04:54.830 --> 00:04:58.379
the big problem with code
comments is they get out of date.

82
00:04:58.379 --> 00:05:02.479
And if the API changes and
your code changes and the comment doesn't,

83
00:05:02.479 --> 00:05:04.716
well now you're misleading people.

84
00:05:04.716 --> 00:05:08.030
So while we can get the job done and
we have for many years,

85
00:05:08.030 --> 00:05:11.569
getting the job done this way,
it leaves a lot to be desired.

86
00:05:11.569 --> 00:05:14.203
And this is the use case.

87
00:05:14.203 --> 00:05:18.594
This is why something like
destructuring was created.

88
00:05:18.594 --> 00:05:22.454
Remember that narrative that we're
telling is that JavaScript evolved in

89
00:05:22.454 --> 00:05:24.667
the direction of being more declarative.

90
00:05:24.667 --> 00:05:28.835
Trying to take the confusing,
hard to understand,

91
00:05:28.835 --> 00:05:33.571
and hard to optimize code that
is very imperative in style,

92
00:05:33.571 --> 00:05:38.137
and instead trying to express
it in a declarative style.

93
00:05:38.137 --> 00:05:41.713
So I'm gonna show you
an overview of destructuring,

94
00:05:41.713 --> 00:05:44.977
which is this example
done with destructuring.

95
00:05:44.977 --> 00:05:48.819
And that's gonna be glossing or
hand-waving over a whole bunch of details.

96
00:05:48.819 --> 00:05:52.680
So don't get intimidated when you see it,
it's just gonna gloss over the detail.

97
00:05:52.680 --> 00:05:55.685
And then, that's when I'm gonna
switch into the live-coding mode, and

98
00:05:55.685 --> 00:05:57.316
give you all the little nitty-gritty.

99
00:05:57.316 --> 00:06:01.353
We will build ourselves up, first
understanding arrays, and then objects,

100
00:06:01.353 --> 00:06:02.218
and all of that.

101
00:06:02.218 --> 00:06:06.071
So just hang on with me, if you're
confused by the next slide, don't worry.

102
00:06:06.071 --> 00:06:07.563
We'll explain it all.

103
00:06:07.563 --> 00:06:12.252
But this example of highly
imperative can be done with this

104
00:06:12.252 --> 00:06:16.087
declarative destructuring
syntax like this.

105
00:06:19.454 --> 00:06:22.445
&gt;&gt; Kyle Simpson: So just taking
a moment to let that kind of sink in,

106
00:06:22.445 --> 00:06:26.591
let me highlight a couple of things
that you should pay attention to.

107
00:06:26.591 --> 00:06:31.708
Number one, on the left hand side of
our equal sign, that is lines one

108
00:06:31.708 --> 00:06:37.017
through ten there, we have what looks
like essentially a JSON object.

109
00:06:37.017 --> 00:06:40.566
We have what looks like an array and
what looks like inside of that array,

110
00:06:40.566 --> 00:06:44.420
a couple of objects and what looks like
properties, inside of those objects.

111
00:06:44.420 --> 00:06:47.752
But that is not what this is.

112
00:06:47.752 --> 00:06:50.146
This is not an array of objects.

113
00:06:50.146 --> 00:06:54.265
Because it's on the left hand side of
an equals, it's not a value at all.

114
00:06:54.265 --> 00:07:01.568
Because it's on the left hand side of
the equals, its actually a pattern.

115
00:07:01.568 --> 00:07:06.629
It is a syntax that is describing
the value that is expected

116
00:07:06.629 --> 00:07:13.673
from the right-hand side, which is
where we call the getSomeRecords() API.

117
00:07:16.318 --> 00:07:21.120
&gt;&gt; Kyle Simpson: A pattern to describe
what kind of value we're expecting to get.

118
00:07:21.120 --> 00:07:26.185
And the purpose of that pattern again,
is not just to describe it,

119
00:07:26.185 --> 00:07:29.268
it's not just for code documentation.

120
00:07:29.268 --> 00:07:32.392
The real purpose for describing it is so

121
00:07:32.392 --> 00:07:37.420
that we can assign those individual
values off as we need them.

122
00:07:37.420 --> 00:07:41.848
So in that pattern on Line 3,
you'll notice that I'm saying,

123
00:07:41.848 --> 00:07:46.371
there is going to be a name property and
then I have a : firstName.

124
00:07:46.371 --> 00:07:51.314
That is essentially saying,
go make me a variable called firstName,

125
00:07:51.314 --> 00:07:56.759
that has the value that is in this
particular location of the data structure,

126
00:07:56.759 --> 00:08:00.890
which is the name property of
the first object in an array.

127
00:08:00.890 --> 00:08:06.104
It describes to JavaScript
declaratively how it should break

128
00:08:06.104 --> 00:08:11.440
down that structure and
make individual assignments for you.

129
00:08:11.440 --> 00:08:16.259
And you'll notice on line four that
I include an equals clause there.

130
00:08:16.259 --> 00:08:19.442
That's the so-called
default value expression.

131
00:08:19.442 --> 00:08:22.563
And that default value expression says,

132
00:08:22.563 --> 00:08:26.753
if there's not an email property present,
go ahead and

133
00:08:26.753 --> 00:08:32.298
use this backup default value to assign
to a variable called first email.

134
00:08:34.463 --> 00:08:38.095
&gt;&gt; Kyle Simpson: Same thing on the second
object, we get a second name, and

135
00:08:38.095 --> 00:08:41.746
a second email, or
a fallback to the default email value.

136
00:08:44.304 --> 00:08:46.234
&gt;&gt; Kyle Simpson: So
at a very high level glance,

137
00:08:46.234 --> 00:08:49.429
that's what you can expect
out of destructuring,

138
00:08:49.429 --> 00:08:53.888
is any place where you would be trying
to break down and assign off pieces

139
00:08:53.888 --> 00:08:58.443
from some larger data structure,
a destructuring pattern can do that.

140
00:08:58.443 --> 00:09:01.972
And it doesn't always have to
be this big hairy JSON object.

141
00:09:01.972 --> 00:09:07.371
Sometimes it can just be an API that
returns you a two-element array,

142
00:09:07.371 --> 00:09:12.330
and you only care about the element
at position one in the array.

143
00:09:12.330 --> 00:09:17.910
Where you would normally do is assign
the array to a temporary variable and

144
00:09:17.910 --> 00:09:21.692
then access temporary variable,
position one.

145
00:09:21.692 --> 00:09:23.467
That's the imperative approach.

146
00:09:23.467 --> 00:09:25.585
The destructuring approach could say,

147
00:09:25.585 --> 00:09:28.698
I'm wanna give me the array
this destructuring pattern for

148
00:09:28.698 --> 00:09:32.699
this assignment and then I'm going to
leave the first element entry blank.

149
00:09:32.699 --> 00:09:34.737
And then only name the second entry,

150
00:09:34.737 --> 00:09:37.508
that's the only one that I wanna sign off,
okay.

151
00:09:37.508 --> 00:09:42.854
So the other take-away here is that
destructuring does not have to account for

152
00:09:42.854 --> 00:09:47.803
the, the pattern does not have to
account for the entirety of the value.

153
00:09:47.803 --> 00:09:50.628
The pattern only has to account for

154
00:09:50.628 --> 00:09:55.218
the part of the value that you
care about at that moment.

155
00:09:55.218 --> 00:09:57.048
It does not have to fully describe it.

156
00:09:57.048 --> 00:10:00.586
In this case, our array could have
returned back hundreds of objects and

157
00:10:00.586 --> 00:10:02.908
we're saying we only
care about the first two.

158
00:10:02.908 --> 00:10:06.840
And also, there could be lots of
other properties on those objects and

159
00:10:06.840 --> 00:10:10.456
we're saying we only care about
the name and email properties.

160
00:10:10.456 --> 00:10:15.266
So this pattern is describing potentially,
either the entire structure or

161
00:10:15.266 --> 00:10:16.543
just a subset of it,

162
00:10:16.543 --> 00:10:21.217
of the necessary structural parts to
get at the things that we care about.

163
00:10:24.437 --> 00:10:27.833
&gt;&gt; Kyle Simpson: The other
takeaway here is that essentially,

164
00:10:27.833 --> 00:10:33.755
this code in its declarative nature,
is self documenting, because in a sense we

165
00:10:33.755 --> 00:10:39.695
are documenting with syntax what we expect
the value returned from the API call.

166
00:10:39.695 --> 00:10:42.340
It would be rather duplicative
to put a JS dot comment,

167
00:10:42.340 --> 00:10:46.424
unless there was a significant amount of
other information that we weren't putting

168
00:10:46.424 --> 00:10:47.992
in the destructuring pattern.

169
00:10:47.992 --> 00:10:49.114
But then you could ask,

170
00:10:49.114 --> 00:10:52.102
why would that information be
useful in a code comment anyway.

171
00:10:52.102 --> 00:10:53.767
Wouldn't it be better for

172
00:10:53.767 --> 00:10:58.989
the reader only to know about the things
that are needed at that moment, as opposed

173
00:10:58.989 --> 00:11:03.929
to a complete dictionary of every
possible property that could be returned?

174
00:11:03.929 --> 00:11:08.905
So I think that's where destructuring
starts to shine, is when we find these

175
00:11:08.905 --> 00:11:13.341
little places and even these big places,
and we declare a pattern for

176
00:11:13.341 --> 00:11:18.570
how we want that breakdown to happen and
let JavaScript take care of the details.

177
00:11:18.570 --> 00:11:25.209
Now there's lots of detail behind this,
and to get into all of that detail,

178
00:11:25.209 --> 00:11:29.488
we need to switch into my code editor and
dive in.

179
00:11:29.488 --> 00:11:32.414
And we're gonna do a lot of live coding,
so again,

180
00:11:32.414 --> 00:11:36.359
make sure you have your code editor up and
ready to type along with me,

181
00:11:36.359 --> 00:11:39.988
as we dive in much deeper into
how destructuring syntax works.

