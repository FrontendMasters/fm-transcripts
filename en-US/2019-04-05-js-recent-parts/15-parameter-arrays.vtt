WEBVTT

1
00:00:00.000 --> 00:00:00.571
&gt;&gt; Kyle Simpson: All right.

2
00:00:00.571 --> 00:00:06.171
If we can do array destructurings
on our assignment list,

3
00:00:06.171 --> 00:00:10.410
we can also do them in
parameter positions.

4
00:00:10.410 --> 00:00:14.728
So again, I'll make a new tab and

5
00:00:14.728 --> 00:00:18.436
I will make a data function.

6
00:00:20.529 --> 00:00:25.009
&gt;&gt; Kyle Simpson: And
let's say that data would receive as

7
00:00:25.009 --> 00:00:29.752
a parameter an array
that I would then later

8
00:00:29.752 --> 00:00:34.515
break down as first, second, and third.

9
00:00:34.515 --> 00:00:37.264
And I would break that thing down as tmp.

10
00:00:40.283 --> 00:00:43.793
&gt;&gt; Kyle Simpson: This is not
actually the ES5 equivalent, but

11
00:00:43.793 --> 00:00:47.033
this is just showing
you I could do it that.

12
00:00:47.033 --> 00:00:49.865
And then, I would have a first,
second, and third, and

13
00:00:49.865 --> 00:00:51.462
I could do something with them.

14
00:00:51.462 --> 00:00:55.750
But we actually have the ability to do
destructuring directly in a parameter

15
00:00:55.750 --> 00:00:56.423
position.

16
00:00:56.423 --> 00:01:01.601
We can say an array here in that position.

17
00:01:01.601 --> 00:01:06.353
The array here is expecting to have first,

18
00:01:06.353 --> 00:01:09.786
second and third values in it.

19
00:01:09.786 --> 00:01:12.717
And then inside of our array,
inside of our function,

20
00:01:12.717 --> 00:01:14.768
we can do whatever we want with those.

21
00:01:14.768 --> 00:01:19.057
So we're essentially saying I don't care
about the array that you're passing,

22
00:01:19.057 --> 00:01:22.166
I only care about is those three
elements in that array, and

23
00:01:22.166 --> 00:01:24.482
I wanna name them first, second and third.

24
00:01:24.482 --> 00:01:27.667
Notice how I formatted my
function signature here.

25
00:01:27.667 --> 00:01:31.158
I'm using multiple lines,
again, for readability.

26
00:01:31.158 --> 00:01:35.702
Don't try to stuff your entire long
function signature all in one line.Use

27
00:01:35.702 --> 00:01:39.254
extra lines, use wide space
make it as readable as you can.

28
00:01:51.022 --> 00:01:55.583
&gt;&gt; Kyle Simpson: All right, what would
happen, let's go back to this example,

29
00:01:55.583 --> 00:02:00.143
what would happen in this code if I
go back to the place where we had

30
00:02:00.143 --> 00:02:01.170
second here?

31
00:02:01.170 --> 00:02:07.829
What will happen if I did
not return an array at all?

32
00:02:07.829 --> 00:02:11.663
Or what was returned was
something non array like null.

33
00:02:11.663 --> 00:02:14.200
Let's use that.

34
00:02:14.200 --> 00:02:18.188
What would happen with line seven,
the syntax error?

35
00:02:18.188 --> 00:02:25.801
It would not be a syntax error,
it would be a what kind of error?

36
00:02:25.801 --> 00:02:26.538
&gt;&gt; Class: A type error.

37
00:02:26.538 --> 00:02:31.468
&gt;&gt; Kyle Simpson: A type error,
because we'd be trying to

38
00:02:31.468 --> 00:02:35.528
access position 0 on a no value,

39
00:02:35.528 --> 00:02:39.451
which is not a legal operation.

40
00:02:39.451 --> 00:02:40.671
You can't access position 0 on a null.

41
00:02:40.671 --> 00:02:45.798
So that would not be allowed and
we'd be throwing a type error.

42
00:02:45.798 --> 00:02:50.603
And the exact same thing is true over here
on our destructuring side if we tried to

43
00:02:50.603 --> 00:02:52.684
destructure this thing down, and

44
00:02:52.684 --> 00:02:56.643
we did an array destructuring of
what ended up being a null value.

45
00:02:56.643 --> 00:02:58.100
We're gonna get a type error.

46
00:02:58.100 --> 00:03:03.334
So again, we're trying to reinforce, there
is a mental processing model that you

47
00:03:03.334 --> 00:03:08.719
should have in your head, which is that
destructuring syntax is essentially doing,

48
00:03:08.719 --> 00:03:13.548
it is essentially sugar for doing this
imperative thing that we did before.

49
00:03:15.477 --> 00:03:17.721
&gt;&gt; Kyle Simpson: And
any error that we would have before,

50
00:03:17.721 --> 00:03:19.907
we would have with our destructuring.

51
00:03:19.907 --> 00:03:24.692
There is very few places where there
would be any kind of diversion

52
00:03:24.692 --> 00:03:26.696
between their behaviors.

53
00:03:26.696 --> 00:03:29.744
So how would I fix this
over here on this side?

54
00:03:29.744 --> 00:03:34.480
How would I fix it so that I had some
sort of graceful fall back, where first,

55
00:03:34.480 --> 00:03:38.772
second, third and even fourth would
just end up, first, second and

56
00:03:38.772 --> 00:03:40.862
third would end up as undefined.

57
00:03:40.862 --> 00:03:43.261
And fourth end up as an array.

58
00:03:43.261 --> 00:03:47.631
The way that I would typically solve
this is to provide a fallback or

59
00:03:47.631 --> 00:03:49.199
a default empty array.

60
00:03:49.199 --> 00:03:51.996
So over here, I might say or empty array.

61
00:03:51.996 --> 00:03:56.627
If data comes back falsey, then this OR
operator is basically saying,

62
00:03:56.627 --> 00:04:00.803
don't worry about it,
we'll just pick up on this empty array.

63
00:04:00.803 --> 00:04:05.754
And now tmp[0] and tmp[1] and
tmp[2] and tmp.slice(3),

64
00:04:05.754 --> 00:04:07.828
all those are not gonna fail.

65
00:04:07.828 --> 00:04:13.792
They're just gonna end up producing
undefines and then the empty 0.

66
00:04:13.792 --> 00:04:20.107
So this is an effective way of
providing a fallback default.

67
00:04:20.107 --> 00:04:23.573
How would we do that over
here with the structuring?

68
00:04:23.573 --> 00:04:28.823
In exactly the same way,
provide an empty array as the fallback

69
00:04:37.858 --> 00:04:38.998
&gt;&gt; Kyle Simpson: So what about when it's

70
00:04:38.998 --> 00:04:40.769
a parameter that we're passing in?

71
00:04:40.769 --> 00:04:42.196
Remember this function?

72
00:04:42.196 --> 00:04:47.339
When it's a parameter that we're
passing in, how could we make

73
00:04:47.339 --> 00:04:52.972
sure that this wouldn't fail if
10th came in as, say, undefined?

74
00:04:52.972 --> 00:04:55.571
&gt;&gt; Class: Default value, right there.

75
00:04:55.571 --> 00:04:59.513
&gt;&gt; Kyle Simpson: I'd use a default value
in the parameter of an empty array.

76
00:04:59.513 --> 00:05:02.957
And the exact same thing is
true with our destructuring.

77
00:05:02.957 --> 00:05:05.176
We can have a default parameter value.

78
00:05:08.526 --> 00:05:11.995
&gt;&gt; Kyle Simpson: In fact, it's a really,
really good idea to get in the habit of

79
00:05:11.995 --> 00:05:16.581
putting in those default values, because
in my experience, almost always people

80
00:05:16.581 --> 00:05:20.707
want their destructuring patterns to
gracefully fallback to let's say,

81
00:05:20.707 --> 00:05:24.396
undefined or whatever,
rather than to throw type errors at them.

82
00:05:24.396 --> 00:05:30.339
It's very rare in my experience that you
wanted to fail hard with a type error.

83
00:05:30.339 --> 00:05:33.109
You usually just want this
pattern to gracefully degrade.

84
00:05:36.317 --> 00:05:38.991
&gt;&gt; Kyle Simpson: And also,
you probably want some default series.

85
00:05:38.991 --> 00:05:42.831
You probably wanna say,
I wanna default this thing to 10,

86
00:05:42.831 --> 00:05:46.081
this thing to 20, and
this thing to 30, oops.

87
00:05:46.081 --> 00:05:48.837
And we would do that over here.

88
00:05:48.837 --> 00:05:52.235
We could default that to 10,
and that to 20, and that to 30.

89
00:05:56.604 --> 00:06:00.958
&gt;&gt; Kyle Simpson: If we did not have this
part included and we didn't pass an array,

90
00:06:00.958 --> 00:06:06.357
we're not gonna get a first, second,
and third of 30 or 10, 20 and 30.

91
00:06:06.357 --> 00:06:08.106
We're gonna get a type error.

92
00:06:08.106 --> 00:06:11.408
But now that we have an array,
we're definitely guaranteed,

93
00:06:11.408 --> 00:06:15.272
as our default backup, we're definitely
guaranteed that at a minimum,

94
00:06:15.272 --> 00:06:19.599
we're gonna get a first, second, and
third that default to 10, 20, 30.

