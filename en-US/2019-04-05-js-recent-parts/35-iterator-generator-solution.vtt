WEBVTT

1
00:00:00.079 --> 00:00:00.764
&gt;&gt; Kyle Simpson: All right, welcome back.

2
00:00:00.764 --> 00:00:04.613
I trust you found that nice and
challenging.

3
00:00:04.613 --> 00:00:09.523
Let's take a look at how to define
an iterator, to make our numbers,

4
00:00:09.523 --> 00:00:11.054
object initerable.

5
00:00:11.054 --> 00:00:14.273
First we know we need to
define a generator, and

6
00:00:14.273 --> 00:00:18.470
we're going to put it at this
location .Symbol.iterator.

7
00:00:18.470 --> 00:00:23.562
And it's a function that we're going
to want to receive some inputs.

8
00:00:23.562 --> 00:00:26.480
But for now let's just skip the inputs.

9
00:00:26.480 --> 00:00:28.843
What does that function need to do?

10
00:00:28.843 --> 00:00:30.968
Well, it needs to loop over,

11
00:00:30.968 --> 00:00:35.482
essentially an i increment here and
just yield out the values.

12
00:00:35.482 --> 00:00:39.990
So if I said something like let i = 0,
i less than 100.

13
00:00:39.990 --> 00:00:44.924
i++, we could say less than or
equal to 100.

14
00:00:44.924 --> 00:00:50.619
i++ and then I could just simply yield i.

15
00:00:50.619 --> 00:00:56.012
And that generator is gonna spit
out the values from 0 up to 100.

16
00:00:56.012 --> 00:01:03.323
So if we take that code and let me switch
over to our console and we run it.

17
00:01:07.166 --> 00:01:11.603
&gt;&gt; Kyle Simpson: You see it
prints out from 0 up to 100.

18
00:01:11.603 --> 00:01:15.274
Okay, so now let’s talk about
we give it some inputs.

19
00:01:15.274 --> 00:01:18.533
Well we want to use our named parameter.

20
00:01:18.533 --> 00:01:22.051
Our named arguments in text
with an object destructuring.

21
00:01:22.051 --> 00:01:26.679
So I’m gonna put an object here and
make sure to give it the default object so

22
00:01:26.679 --> 00:01:30.213
that if it's not passed in,
it picks up on the defaults.

23
00:01:30.213 --> 00:01:33.990
We need essentially three inputs.

24
00:01:33.990 --> 00:01:38.502
We need a start which defaults to 0,
we need an end which

25
00:01:38.502 --> 00:01:43.213
defaults to 100 and
we need a step which defaults to 1.

26
00:01:43.213 --> 00:01:47.705
So let's use those three variables.

27
00:01:49.415 --> 00:01:54.774
&gt;&gt; Kyle Simpson: Instead of i =,
we'll say i += step.

28
00:01:57.571 --> 00:02:02.092
&gt;&gt; Kyle Simpson: Now how are we going
to use that number as iteration

29
00:02:02.092 --> 00:02:04.360
with our lucky numbers.

30
00:02:04.360 --> 00:02:08.683
All right, I'm gonna go ahead and
switch this to

31
00:02:08.683 --> 00:02:13.855
an interpre-literal, and
I'll open up an expression.

32
00:02:13.855 --> 00:02:18.320
And what we wanna do is have
an array that can be printed out.

33
00:02:18.320 --> 00:02:20.736
So I'm gonna use an array here and

34
00:02:20.736 --> 00:02:26.186
I'm going to be spreading something
into the array which is the iterable.

35
00:02:26.186 --> 00:02:31.114
So I'm going to be spreading numbers but
I don't want to just spread

36
00:02:31.114 --> 00:02:35.270
numbers itself because that
would be 0 through 100.

37
00:02:35.270 --> 00:02:39.230
I actually want to call
the Symbol.iterator function.

38
00:02:39.230 --> 00:02:41.936
And that is what I will be spreading out.

39
00:02:41.936 --> 00:02:46.160
Remember iterators are also iterables.

40
00:02:46.160 --> 00:02:51.474
So we can spread out a custom
made iterator instance, okay?

41
00:02:51.474 --> 00:02:57.987
So how are we going to call this and
pass in those inputs?

42
00:02:57.987 --> 00:03:05.187
Well, we're gonna pass in
an object that sets start = 6,

43
00:03:05.187 --> 00:03:11.667
that sets end equal to 30,
and set step equal to 4.

44
00:03:11.667 --> 00:03:14.972
So if we take that.

45
00:03:14.972 --> 00:03:15.754
&gt;&gt; Speaker 2: A dollar sign?

46
00:03:18.966 --> 00:03:19.677
&gt;&gt; Kyle Simpson: Dollar sign?

47
00:03:19.677 --> 00:03:22.538
&gt;&gt; Speaker 2: Am I correct?

48
00:03:22.538 --> 00:03:24.376
For the template literal, am I wrong?

49
00:03:24.376 --> 00:03:24.914
&gt;&gt; Kyle Simpson: Sorry, you're right.

50
00:03:24.914 --> 00:03:25.444
&gt;&gt; Speaker 2: Okay.

51
00:03:25.444 --> 00:03:28.168
&gt;&gt; Kyle Simpson: That's why I wasn't
syntax highlighting, good catch,

52
00:03:28.168 --> 00:03:28.729
all right.

53
00:03:28.729 --> 00:03:31.365
&gt;&gt; Speaker 3: You need to take everything
cuz you have to redefine that function?

54
00:03:31.365 --> 00:03:32.167
&gt;&gt; Kyle Simpson: What's that.

55
00:03:32.167 --> 00:03:33.384
&gt;&gt; Speaker 3: You better
copy in the rest of it,

56
00:03:33.384 --> 00:03:34.786
cuz you redefine the function on top.

57
00:03:38.231 --> 00:03:39.295
&gt;&gt; Kyle Simpson: I redefine
the function on top?

58
00:03:39.295 --> 00:03:41.509
&gt;&gt; Speaker 3: We didn't have it taking
parameters, last time you copied it over.

59
00:03:41.509 --> 00:03:47.537
&gt;&gt; Kyle Simpson: Yes,
you're right, you're right.

60
00:03:49.679 --> 00:03:54.610
&gt;&gt; Kyle Simpson: Okay, let's go over
here and we don't need this for loop for

61
00:03:54.610 --> 00:03:55.581
right now.

62
00:03:55.581 --> 00:03:56.750
So remove that.

63
00:03:56.750 --> 00:03:58.685
And let's see what it prints out.

64
00:03:58.685 --> 00:04:04.552
My lucky number 6,10,14,18,22,26 and 30.

65
00:04:04.552 --> 00:04:11.727
If you win $1 billion lottery of those
lucky numbers, I expect a 1% cut, so.

