WEBVTT

1
00:00:00.000 --> 00:00:00.735
&gt;&gt; Kyle Simpson: All right,

2
00:00:00.735 --> 00:00:05.155
let's talk through the solution to
this template literals exercise.

3
00:00:05.155 --> 00:00:06.592
We'll start here at the bottom.

4
00:00:06.592 --> 00:00:09.985
Let's go ahead and
adjust our template literal so

5
00:00:09.985 --> 00:00:14.682
that it is going to use the tags, so
we need to put upper in front of it.

6
00:00:14.682 --> 00:00:21.968
And in place of these underscores, we need
to put in our interpolated expression.

7
00:00:21.968 --> 00:00:29.390
So here we want name, and here we
want twitter, and here we want topic.

8
00:00:32.569 --> 00:00:35.231
&gt;&gt; Kyle Simpson: Now to
define that function,

9
00:00:35.231 --> 00:00:39.390
what we wanna do is start
with an empty string.

10
00:00:39.390 --> 00:00:46.552
So we'll start with this empty string,
and that's what we'll end up returning.

11
00:00:46.552 --> 00:00:53.279
And then remember that strings, as an
array, has one more element than values.

12
00:00:53.279 --> 00:00:57.619
So all we need to do is loop
over the string's array.

13
00:00:57.619 --> 00:01:04.167
So I'll say for
(let i = 0; i &lt; strings.length; i++).

14
00:01:04.167 --> 00:01:09.182
Now the strategy I'm going to use is,
I'm going to use i as the index in

15
00:01:09.182 --> 00:01:15.132
the string's array, and I'll use i minus
1 as the index into the values of array,

16
00:01:15.132 --> 00:01:19.726
which means I don't need to add
a values on the first iteration.

17
00:01:19.726 --> 00:01:27.137
So, I'm going to say, if (i &gt; 0),
that's when I need to add in a values.

18
00:01:27.137 --> 00:01:31.230
And after I would have done that,

19
00:01:31.230 --> 00:01:35.768
then I will add in the strings[i].

20
00:01:35.768 --> 00:01:40.871
So if we're on the second iteration,
then we already have strings of 0 and

21
00:01:40.871 --> 00:01:45.489
now we wanna put in values of 0,
which would be values of i minus 1.

22
00:01:45.489 --> 00:01:48.894
We don't wanna just include
values of i minus 1, though.

23
00:01:48.894 --> 00:01:52.565
We want to uppercase it, and so

24
00:01:52.565 --> 00:01:57.379
we would say ret += values[i-1].

25
00:01:57.379 --> 00:02:00.230
And we wanna call toUpperCase on it.

26
00:02:00.230 --> 00:02:02.815
But there's one last little nuance,

27
00:02:02.815 --> 00:02:06.785
which is the values that come
in don't have to be strings.

28
00:02:06.785 --> 00:02:11.515
In this example they are, but they could
have been non-strings like numbers,

29
00:02:11.515 --> 00:02:14.493
in which case you would
have thrown an exception.

30
00:02:14.493 --> 00:02:17.731
So just to be extra safe,
let's go ahead and

31
00:02:17.731 --> 00:02:23.257
force that the value has to be treated
as a string even if it isn't a string.

