WEBVTT

1
00:00:00.000 --> 00:00:05.388
&gt;&gt; Kyle Simpson: Now, there are some
issues with async functions.

2
00:00:05.388 --> 00:00:10.936
And you might've seen, for example,
in that exercise that we just did,

3
00:00:10.936 --> 00:00:16.944
that if you tried to run a function and
pass it to forEach, like I'm doing here.

4
00:00:16.944 --> 00:00:20.745
And then, inside of it,
you wanted to call the await keyword,

5
00:00:20.745 --> 00:00:23.486
you might have noticed
that this would fail.

6
00:00:23.486 --> 00:00:28.062
And the reason it fails is because
the await keyword has to be used

7
00:00:28.062 --> 00:00:32.653
inside of an async function,
not inside of a regular function.

8
00:00:32.653 --> 00:00:37.368
So what do we do whenever we want to do
this sort of deep awaiting, if you will,

9
00:00:37.368 --> 00:00:39.484
when we have a function boundary?

10
00:00:39.484 --> 00:00:43.519
You might think, okay,
well, my solution is,

11
00:00:43.519 --> 00:00:48.111
I just need to pass the async
function to the forEach method.

12
00:00:48.111 --> 00:00:53.606
Except the problem with that is that
async functions come back with promises,

13
00:00:53.606 --> 00:00:57.948
and the forEach method does not
know what to do with a promise.

14
00:00:57.948 --> 00:01:02.516
It does not know how to
wait on promises to finish.

15
00:01:02.516 --> 00:01:05.963
So you'd get back an iteration
over a bunch of promises, but

16
00:01:05.963 --> 00:01:08.532
they wouldn't be waiting on each other,
and

17
00:01:08.532 --> 00:01:12.743
they would not be printing the contents
of this file in the correct order.

18
00:01:12.743 --> 00:01:18.523
They would just print them as fast as
those three separate promises resolved.

19
00:01:18.523 --> 00:01:22.646
So what we're really getting at
here is that there's actually

20
00:01:22.646 --> 00:01:25.618
a conceptually missing
piece to the puzzle.

21
00:01:25.618 --> 00:01:27.996
Not just that the syntax
isn't what we want, but

22
00:01:27.996 --> 00:01:29.973
there's a missing piece to the puzzle.

23
00:01:29.973 --> 00:01:35.074
And it is that what we really
need is an asynchronous iterator.

24
00:01:35.074 --> 00:01:40.726
We need something like for each,
or map, or filter, or reduce.

25
00:01:40.726 --> 00:01:46.060
But we need it to be able to pause
automatically at each iteration,

26
00:01:46.060 --> 00:01:49.601
and wait for
a promise before it comes back.

27
00:01:49.601 --> 00:01:54.097
And that's not what is built
into JavaScript, the .forEach,

28
00:01:54.097 --> 00:01:59.009
the .map, the .filter, .reduce,
the .flat, now all of those,

29
00:01:59.009 --> 00:02:02.590
those are all what we call
synchronous iterators,

30
00:02:02.590 --> 00:02:07.197
they run eagerly over the values
that are currently in the array.

31
00:02:07.197 --> 00:02:11.881
And they don't know that they should
pause if they find a promise.

32
00:02:11.881 --> 00:02:18.011
So what we need is a lazy asynchronous
iterator that can pause whenever it sees,

33
00:02:18.011 --> 00:02:22.220
I'm sorry,
we need an eager asynchronous iterator,

34
00:02:22.220 --> 00:02:25.254
which means it tries to go to a promise.

35
00:02:25.254 --> 00:02:29.626
It tries to go to each value,
but if it sees a promise,

36
00:02:29.626 --> 00:02:33.824
then it moves on,
then it waits before it moves on.

37
00:02:33.824 --> 00:02:37.167
That's not built into JavaScript,
and as far as I know,

38
00:02:37.167 --> 00:02:40.730
there's no proposal that is
active to add it to JavaScript.

39
00:02:40.730 --> 00:02:43.515
But it is definitely a missing piece.

40
00:02:43.515 --> 00:02:47.702
And so,
as an illustration of a way to solve that,

41
00:02:47.702 --> 00:02:50.714
I have built a library called Fasy.

42
00:02:50.714 --> 00:02:56.422
And Fasy provides you with eager
asynchronous iterator functions for

43
00:02:56.422 --> 00:03:01.556
all of your standard functions,
like map, filter, reduce.

44
00:03:01.556 --> 00:03:05.298
It supports transducing,
and what we see here, for

45
00:03:05.298 --> 00:03:09.987
example, is I can do concurrent map,
or I can do serial forEach.

46
00:03:09.987 --> 00:03:17.301
So it provides all of these iterators in
both their concurrent and serial forms.

47
00:03:17.301 --> 00:03:22.826
And that, you can use alongside
of the standard built-in eager

48
00:03:22.826 --> 00:03:28.055
synchronous iterators that
JavaScript already provides.

49
00:03:28.055 --> 00:03:34.712
You notice now that I can pass an async
function directly into FA.serial.forEach,

50
00:03:34.712 --> 00:03:38.964
because the async function,
when it gives a promise,

51
00:03:38.964 --> 00:03:43.506
FA.serial.forEach knows what
to do with that promise.

52
00:03:43.506 --> 00:03:47.369
Whereas the normal built-in
forEach would not know what to do.

