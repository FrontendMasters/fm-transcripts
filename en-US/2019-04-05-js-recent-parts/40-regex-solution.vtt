WEBVTT

1
00:00:00.000 --> 00:00:03.678
&gt;&gt; Kyle Simpson: All right, let's see if
we can untwist your brains from all of

2
00:00:03.678 --> 00:00:07.518
that regular expression goodness and
walk through a solution.

3
00:00:07.518 --> 00:00:10.899
Okay, remember the hints down
here were there on purpose.

4
00:00:10.899 --> 00:00:14.381
They were there to help you
not be completely lost.

5
00:00:14.381 --> 00:00:19.319
So we do wanna use a generator called
powers and we do want to setup

6
00:00:19.319 --> 00:00:24.724
a regular expression that we can
then globally look through the poem.

7
00:00:24.724 --> 00:00:30.676
So I'm gonna setup a regular
expression with the g and the s flags.

8
00:00:30.676 --> 00:00:34.096
Let's think about what
needs to be matched,

9
00:00:34.096 --> 00:00:39.047
I need to match something like
the word fire, or the word wind, or

10
00:00:39.047 --> 00:00:42.214
the phrase of a mind, or the phrase a gun.

11
00:00:42.214 --> 00:00:47.475
I need to match those phrases,
but I need to match those things

12
00:00:47.475 --> 00:00:52.550
only if they show up immediately
after the phrase power of.

13
00:00:52.550 --> 00:00:57.376
So what I wanna do is I wanna
do a capturing group match for

14
00:00:57.376 --> 00:01:03.435
the thing that I'm looking at, but
I wanna use a look behind assertion

15
00:01:03.435 --> 00:01:09.207
to make sure that the phrase power
of comes immediately before it.

16
00:01:09.207 --> 00:01:13.724
So we will do a,
&gt;&gt; Kyle Simpson: Look behind assertion,

17
00:01:13.724 --> 00:01:15.584
that's what that syntax is.

18
00:01:15.584 --> 00:01:18.679
A look behind assertion
that says power of,

19
00:01:18.679 --> 00:01:23.532
that means that whatever this next
thing is that we're about to match

20
00:01:23.532 --> 00:01:27.142
needs to be immediately
proceeded by that phrase.

21
00:01:27.142 --> 00:01:30.491
Let me make sure there is a space there.

22
00:01:30.491 --> 00:01:33.962
And then we're gonna do a capturing group,
and the syntax for

23
00:01:33.962 --> 00:01:38.525
a capturing group is the question mark,
and the angle brackets to give it a name.

24
00:01:38.525 --> 00:01:43.479
Since I can't come up with any other more
creative thing, I'm just gonna literally

25
00:01:43.479 --> 00:01:47.332
call it, it's a thing,
it's some kind of noun, it's a thing.

26
00:01:47.332 --> 00:01:53.653
And how I'm gonna match is, I'm going to
match a as an optional match with a space.

27
00:01:53.653 --> 00:01:59.845
And then I'm gonna match some
word character with one or

28
00:01:59.845 --> 00:02:07.233
more, I guess I'll use plus,
with one or more characters there.

29
00:02:07.233 --> 00:02:11.630
So that's gonna be my capturing group for
my noun.

30
00:02:11.630 --> 00:02:18.922
Now, I want to essentially to
pull out the verb that it can do,

31
00:02:18.922 --> 00:02:24.408
I need to skip forward
until I see the word can.

32
00:02:24.408 --> 00:02:26.892
So, I'm gonna use a dot star, and

33
00:02:26.892 --> 00:02:31.616
the reason the dot star works is because,
I have the dot all mode.

34
00:02:31.616 --> 00:02:34.784
So it's gonna be able to
match across a new line.

35
00:02:34.784 --> 00:02:37.626
And then I want to make
sure it's non-greedy.

36
00:02:37.626 --> 00:02:40.218
So I don't want it to go
all the way to the end,

37
00:02:40.218 --> 00:02:43.446
so we'll use the question
mark to make it non-greedy.

38
00:02:43.446 --> 00:02:46.746
And now we're gonna do another
capture group, I'm sorry,

39
00:02:46.746 --> 00:02:48.567
another look behind assertion.

40
00:02:48.567 --> 00:02:54.225
We're gong to say that
we've matched up until,

41
00:02:54.225 --> 00:02:59.756
we immediately before it
have can with a space.

42
00:02:59.756 --> 00:03:03.643
And then we do a capturing group and

43
00:03:03.643 --> 00:03:07.940
that capturing group will name verb.

44
00:03:07.940 --> 00:03:14.181
And we want to match,
&gt;&gt; Kyle Simpson: Again, a word.

45
00:03:19.549 --> 00:03:23.507
&gt;&gt; Kyle Simpson: So that's basically
this phrase that we're breaking down,

46
00:03:23.507 --> 00:03:27.936
the refrain that keeps coming over and
over in each line of this poem.

47
00:03:27.936 --> 00:03:31.989
We've broken that down in
regular expressions, okay.

48
00:03:31.989 --> 00:03:34.710
So there's our regular expression.

49
00:03:34.710 --> 00:03:39.313
Now, now we're going to loop
over it is we're going to say,

50
00:03:39.313 --> 00:03:42.671
while, and we're gonna need a match here.

51
00:03:42.671 --> 00:03:48.725
So, while we are able to assign
the result of calling the regular

52
00:03:48.725 --> 00:03:54.682
expression .exec against the poem
string that was passed in.

53
00:03:54.682 --> 00:03:57.931
While there's a new match
let's keep looping and

54
00:03:57.931 --> 00:04:01.885
once we're done with that loop
there's nothing else to do.

55
00:04:01.885 --> 00:04:05.637
Now, the match object,
I could just access.

56
00:04:05.637 --> 00:04:09.764
But one of the reasons why we named our
caption groups is we wanna be able to get

57
00:04:09.764 --> 00:04:12.036
these things out with the semantic name.

58
00:04:12.036 --> 00:04:15.006
So what I wanna be able
to do is say let and

59
00:04:15.006 --> 00:04:20.684
then I'm gonna do a destructuring
pattern here against the match object.

60
00:04:20.684 --> 00:04:25.947
And specifically I know that in that
match, it's gonna have a groups

61
00:04:25.947 --> 00:04:31.590
property that represents any named
capture groups that I would have had.

62
00:04:31.590 --> 00:04:36.376
So I'm wanna say groups and
then inside of that object I know the two

63
00:04:36.376 --> 00:04:40.053
names that I use would be
the properties thing, and

64
00:04:40.053 --> 00:04:44.859
verbs, so I wanna go ahead and
make thing and verb as my variables.

65
00:04:44.859 --> 00:04:48.810
And then I destructure the match object.

66
00:04:48.810 --> 00:04:52.879
At that point,
now that I have a thing and a verb,

67
00:04:52.879 --> 00:04:58.654
I should be able to yield out a string,
I'll use a template literal.

68
00:04:58.654 --> 00:05:03.888
And I'll say ${thing}: ${verb}.

69
00:05:12.562 --> 00:05:15.686
&gt;&gt; Kyle Simpson: All right,
if I didn't mess something up,

70
00:05:15.686 --> 00:05:17.717
that should be able to work.

71
00:05:17.717 --> 00:05:22.288
Let's take that over to our

72
00:05:22.288 --> 00:05:27.261
console and see what it does.

73
00:05:44.246 --> 00:05:46.697
&gt;&gt; Kyle Simpson: Well,
something didn't work quite right, right?

74
00:05:46.697 --> 00:05:52.300
Again, [INAUDIBLE]
&gt;&gt; Kyle Simpson: I

75
00:05:52.300 --> 00:05:54.253
bet I didn't make the a optional.

76
00:05:58.613 --> 00:06:00.731
&gt;&gt; Kyle Simpson: Yep,
I need to make that a optional.

77
00:06:00.731 --> 00:06:04.132
Otherwise it’s only gonna match ones
that actually have a in front of it.

78
00:06:04.132 --> 00:06:08.595
All right, let's try this again, I don’t
know if anybody has ever in the history

79
00:06:08.595 --> 00:06:12.816
of programming written their regular
expression correctly the first time.

80
00:06:12.816 --> 00:06:14.945
I certainly haven’t.

81
00:06:14.945 --> 00:06:20.884
All right, let's try this again,
there we go.

82
00:06:20.884 --> 00:06:26.767
So, there's our three regular
expression improvements at play.

83
00:06:26.767 --> 00:06:32.153
We have named capture groups like
the thing here, we have looked behind

84
00:06:32.153 --> 00:06:38.106
assertions, and we have the dot all mode
so that we can match across new lines.

