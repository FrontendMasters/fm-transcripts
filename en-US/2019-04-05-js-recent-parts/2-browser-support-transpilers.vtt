WEBVTT

1
00:00:00.000 --> 00:00:03.374
&gt;&gt; Kyle Simpson: One last concern that
I hear a lot of people talk about with

2
00:00:03.374 --> 00:00:07.805
these changes, these rapid things
that are changing with the languages,

3
00:00:07.805 --> 00:00:13.030
well what about browser support, you know
I still have to support IE11 or something.

4
00:00:13.030 --> 00:00:18.340
Well, again in that same period of
time where we had this long periods

5
00:00:18.340 --> 00:00:24.109
of time with no change, correspondent
with that same period of time we also

6
00:00:24.109 --> 00:00:30.455
saw a trend of developers basically being
on the trailing edge behind if you will.

7
00:00:30.455 --> 00:00:32.398
And not just even on the trailing edge but

8
00:00:32.398 --> 00:00:36.589
years behind the trailing edge of any new
feature, anytime something would come out.

9
00:00:36.589 --> 00:00:42.103
In fact, there are developers today
that are still not using features that

10
00:00:42.103 --> 00:00:48.154
landed in ES5 more than a decade ago
2009 landed something like strict mode.

11
00:00:48.154 --> 00:00:52.099
And there are still way to many programs
out there that haven't been updated to

12
00:00:52.099 --> 00:00:52.830
strict mode.

13
00:00:52.830 --> 00:00:57.603
So there is the sense that some developers
feel safer because of whatever reason

14
00:00:57.603 --> 00:01:00.750
they are required to support
these older browsers.

15
00:01:00.750 --> 00:01:05.462
And they don't want to alienate those
users by shipping things where their

16
00:01:05.462 --> 00:01:11.097
browsers won't work on the, the site won't
work on their older browsers or something.

17
00:01:11.097 --> 00:01:17.327
And so some people feel like,
I can't adopt any of that new stuff here.

18
00:01:17.327 --> 00:01:19.683
And the answer to that question,

19
00:01:19.683 --> 00:01:24.060
which also became popular ES6
was this idea of transpilers,

20
00:01:24.060 --> 00:01:29.715
you've undoubtedly heard of transpilers,
the most popular which is Babble.

21
00:01:29.715 --> 00:01:34.515
And Babble takes your code that is
written in whatever the standard

22
00:01:34.515 --> 00:01:36.753
JavaScript is of that moment.

23
00:01:36.753 --> 00:01:43.127
And you can target it to create the
equivalent of that code in the older form.

24
00:01:43.127 --> 00:01:47.884
So rather than you authoring the older
form it compiles to that older

25
00:01:47.884 --> 00:01:52.650
form to ship a version of the file
that could run in an older browser.

26
00:01:52.650 --> 00:01:57.439
So if your web application, if your
company only supports the one version

27
00:01:57.439 --> 00:02:00.229
back from whatever the latest browser is.

28
00:02:00.229 --> 00:02:02.899
If you're lucky enough
to be in that situation,

29
00:02:02.899 --> 00:02:05.447
you probably almost
never need to transpile.

30
00:02:05.447 --> 00:02:09.587
You're probably just shipping whatever
code because it's more than likely that

31
00:02:09.587 --> 00:02:13.012
by the time you put that code in
the code base those browsers have it.

32
00:02:13.012 --> 00:02:15.983
Browsers are constantly updating and
implementing and

33
00:02:15.983 --> 00:02:17.633
testing with these features.

34
00:02:17.633 --> 00:02:21.425
So maybe you have a little bit
of transpilation at best but

35
00:02:21.425 --> 00:02:26.323
if you're in another situation where
you're still supporting IE10 or

36
00:02:26.323 --> 00:02:31.616
IE11 or something and now you have a big
gap, so there is always gonna be a gap.

37
00:02:31.616 --> 00:02:34.935
That gap might be a few weeks or
that gap might be a decade, but

38
00:02:34.935 --> 00:02:38.450
there is always gonna be a gap
between what you have to support and

39
00:02:38.450 --> 00:02:40.810
where the leading edge of the language is.

40
00:02:40.810 --> 00:02:46.532
And where it used to be okay to
fall towards that trailing edge.

41
00:02:46.532 --> 00:02:50.986
My claim is that the most important
thing we as developers can do

42
00:02:50.986 --> 00:02:54.188
is to get on the leading
edge of that support.

43
00:02:54.188 --> 00:02:58.800
Not that we're going for whatever
the hipster brand new features is,

44
00:02:58.800 --> 00:03:03.178
right on the very earliest time,
the very first data that lands and

45
00:03:03.178 --> 00:03:06.636
then writing all these just so
that we can look cool.

46
00:03:06.636 --> 00:03:08.799
That's not what I mean.

47
00:03:08.799 --> 00:03:11.697
But these features are being developed so

48
00:03:11.697 --> 00:03:14.772
that we can communicate
better in our code.

49
00:03:14.772 --> 00:03:17.195
And if we're not using
these features are for

50
00:03:17.195 --> 00:03:20.656
saying I don't need to worry
about that for at least a decade.

51
00:03:20.656 --> 00:03:23.963
Then were completely missing
out on the whole point.

52
00:03:23.963 --> 00:03:28.675
So the way to bridge the gap between the
leading edge where the stuff is happening

53
00:03:28.675 --> 00:03:31.570
and where you should be
trying to pay attention.

54
00:03:31.570 --> 00:03:35.925
You don't have to learn every new feature
and master it the day it comes out, but

55
00:03:35.925 --> 00:03:39.370
you should be aware of that pace and
that pulse of the language.

56
00:03:39.370 --> 00:03:44.704
Aware of the direction aware of that
larger arc and that larger narrative and

57
00:03:44.704 --> 00:03:48.969
trying to use those things when
they help your code improve.

58
00:03:48.969 --> 00:03:53.291
Not you go rewrite the code everyday,
but try to factor those things in

59
00:03:53.291 --> 00:03:57.110
as you refactor and as you update and
progress with your code.

60
00:03:57.110 --> 00:04:01.698
And the way you bridge that gap back
to whatever you browser support is,

61
00:04:01.698 --> 00:04:03.699
is tooling like transpilers.

62
00:04:03.699 --> 00:04:08.402
Some people lament the fact that we have
to have these complex build systems, and

63
00:04:08.402 --> 00:04:10.142
I understand that, I get it.

64
00:04:10.142 --> 00:04:14.903
Complex build systems can be frustrating,
I am old school enough to remember

65
00:04:14.903 --> 00:04:18.785
when you could just open up
a JavaScript file and an HTML file and

66
00:04:18.785 --> 00:04:20.191
bam you had a webpage.

67
00:04:20.191 --> 00:04:23.339
And so
the idea of having to install Babble, and

68
00:04:23.339 --> 00:04:28.154
Webpack and all this, it's intimidating,
it's intimidating to me.

69
00:04:28.154 --> 00:04:31.572
If my job depended on it,
I couldn't configure Webpack,

70
00:04:31.572 --> 00:04:33.261
that is intimidating to me.

71
00:04:33.261 --> 00:04:34.920
So I understand it.

72
00:04:34.920 --> 00:04:38.333
But the downside again, is much worse.

73
00:04:38.333 --> 00:04:42.648
The downside of saying well I don't even
need to worry about this stuff, I don't

74
00:04:42.648 --> 00:04:46.972
have time for it, it's not going to
benefit me, and I can't support it anyway.

75
00:04:46.972 --> 00:04:51.296
You've got to learn this stuff, you've
got to keep on that leading edge and

76
00:04:51.296 --> 00:04:54.351
let tooling like transpilers
manage the gap for you.

77
00:04:54.351 --> 00:04:57.368
I for
one welcome our new transpiling overlords.

78
00:04:57.368 --> 00:05:00.674
That is our new future,
that is our new reality.

79
00:05:00.674 --> 00:05:04.562
And I think it's a good and healthy
thing for the entirety of the JavaScript

80
00:05:04.562 --> 00:05:08.879
ecosystem, for the future of JavaScript,
not just a year or 2 from now, but 5 and

81
00:05:08.879 --> 00:05:13.075
10, and I think 20 years from now,
we're still going to be talking about how

82
00:05:13.075 --> 00:05:15.698
JavaScript has lots of
things that it wants to do.

