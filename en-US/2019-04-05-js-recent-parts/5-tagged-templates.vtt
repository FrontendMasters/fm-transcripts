WEBVTT

1
00:00:00.000 --> 00:00:03.353
&gt;&gt; Kyle Simpson: Also string literals,
or these template literals,

2
00:00:03.353 --> 00:00:08.496
have another feature on them which allows
you to more fully control that process,

3
00:00:08.496 --> 00:00:11.564
that pre-processing that
I was talking about.

4
00:00:11.564 --> 00:00:14.164
They're called tagged literals.

5
00:00:14.164 --> 00:00:18.868
So here on this interval literal
that I have, line 5 and line 6,

6
00:00:18.868 --> 00:00:23.159
immediately before it,
I have this word formatCurrency.

7
00:00:23.159 --> 00:00:27.610
Yes, it's on another line just to show
you that white space doesn't matter here.

8
00:00:27.610 --> 00:00:30.011
But there's no operator between the two.

9
00:00:30.011 --> 00:00:33.677
And that should look strange to you,
because you wouldn't be

10
00:00:33.677 --> 00:00:38.129
able to put a identifier immediately
in front of a double or a single quote.

11
00:00:38.129 --> 00:00:41.072
That would be a JavaScript error,
but here, it's allowed.

12
00:00:41.072 --> 00:00:43.882
And what that's actually signifying,

13
00:00:43.882 --> 00:00:49.664
you are declarative tagging this string to
say when it finishes i want it to before,

14
00:00:49.664 --> 00:00:54.887
i'm sorry before it finishes i want it
to be processed with this function.

15
00:00:54.887 --> 00:00:58.985
So it's actually a function call
it didn't really look like it but

16
00:00:58.985 --> 00:01:03.961
it's a special kind of function call,
called a tagged template string, okay,

17
00:01:03.961 --> 00:01:05.805
or tagged template literal.

18
00:01:05.805 --> 00:01:10.257
So what we're saying here basically
in this particular case or

19
00:01:10.257 --> 00:01:13.953
this example is when we
drop in that value 12.3,

20
00:01:13.953 --> 00:01:17.565
we don't wanna just say 12.3 and
string form,

21
00:01:17.565 --> 00:01:22.869
we actually wanna format it as if it
is US currency in this particular case.

22
00:01:22.869 --> 00:01:25.864
So we want it to look like 12.30.

23
00:01:25.864 --> 00:01:29.695
And the way we do that is
this formatCurrency function.

24
00:01:29.695 --> 00:01:32.216
This is just one I wrote for this example.

25
00:01:32.216 --> 00:01:37.188
You notice that it takes in some values,
it takes in a strings array.

26
00:01:37.188 --> 00:01:41.198
And then, it takes in a values,
and notice that data dot there.

27
00:01:41.198 --> 00:01:44.901
That's me gathering up all
the individual values into an array.

28
00:01:44.901 --> 00:01:48.618
So, strings is all ready an array,
but the other values that come in,

29
00:01:48.618 --> 00:01:52.350
those are individual and then,
I'm gathering them up into an array.

30
00:01:52.350 --> 00:01:56.204
So what's happening here is that
JavaScript is gonna immediately

31
00:01:56.204 --> 00:01:59.710
invoked this function for you,
and it's gonna pass to you,

32
00:01:59.710 --> 00:02:02.899
all of the little bits of
literal strings in one array.

33
00:02:02.899 --> 00:02:07.391
And then all the different values that
you've chosen to interpolate in these

34
00:02:07.391 --> 00:02:10.859
individual positions that you
can gather up in turn array.

35
00:02:10.859 --> 00:02:14.083
So in essentially of these
two arrays of things, and

36
00:02:14.083 --> 00:02:18.203
then it's up to you to decide,
how do I want to put those together?

37
00:02:18.203 --> 00:02:21.353
Or do I wanna put them
together at all even, okay?

38
00:02:21.353 --> 00:02:25.818
In the general sense you're almost always
gonna use a tag function to produce

39
00:02:25.818 --> 00:02:29.048
another string, and
you're generally just gonna loop

40
00:02:29.048 --> 00:02:33.258
over those strings like I'm doing here and
interpolate them together.

41
00:02:33.258 --> 00:02:37.951
To make that process easy, JavaScript
Guarantees that the strings array

42
00:02:37.951 --> 00:02:42.425
will always have one more value in
it than the values array would have.

43
00:02:42.425 --> 00:02:46.000
So in other words,
if I had three interpolated values.

44
00:02:46.000 --> 00:02:48.288
Three expression in my literal,

45
00:02:48.288 --> 00:02:54.020
then it guarantees that I'm gonna have
four string literals in the strings array.

46
00:02:54.020 --> 00:02:57.764
Even if the first, or the last, or
both, have to be an empty string,

47
00:02:57.764 --> 00:03:00.427
it guarantees that those
entries will be there.

48
00:03:00.427 --> 00:03:04.630
And that means that if I've got four
strings and three values, it's easy for

49
00:03:04.630 --> 00:03:06.518
me to interpolate them together.

50
00:03:06.518 --> 00:03:10.615
And that's really all this for loop is
doing is looping over the strings array,

51
00:03:10.615 --> 00:03:13.327
and then dropping in both the strings and
the values,

52
00:03:13.327 --> 00:03:16.238
alternating between them to
produce this final string.

53
00:03:16.238 --> 00:03:21.319
But there's one last little piece here,
which is line six, where I actually

54
00:03:21.319 --> 00:03:26.022
do some formatting of the value as
US currency in this particular case.

55
00:03:26.022 --> 00:03:30.933
And you'll notice that I'm actually
using another template literal right

56
00:03:30.933 --> 00:03:33.013
inside with the US dollar sign.

57
00:03:33.013 --> 00:03:34.552
And then the values, and

58
00:03:34.552 --> 00:03:39.101
I'm using the two fixed method here
to format it with two decimal places.

59
00:03:39.101 --> 00:03:43.195
That produces a string for me,
and if it's not one of those,

60
00:03:43.195 --> 00:03:48.835
if one of those is not a number, then line
9, I just drop it in as its regular value.

61
00:03:50.615 --> 00:03:52.771
&gt;&gt; Kyle Simpson: Now I could have written
this as a variety of different ways.

62
00:03:52.771 --> 00:03:58.887
But it's illustrative of the idea of
what tag functions can do for you.

63
00:03:58.887 --> 00:04:04.508
They're essentially a way to pre-process
your string, do some sort of formatting on

64
00:04:04.508 --> 00:04:09.520
it, either of the strings or the values or
both depending upon what you need.

65
00:04:09.520 --> 00:04:11.752
So let's think about some use cases for
that.

66
00:04:11.752 --> 00:04:18.017
You could for example, have a tag function
that did various internationalization.

67
00:04:18.017 --> 00:04:21.020
Like swapping in different terminology.

68
00:04:21.020 --> 00:04:25.815
If you could detect that you are needing
a Spanish word or a French word you could

69
00:04:25.815 --> 00:04:29.678
have it look up a value and
pick it from a different dictionary.

70
00:04:29.678 --> 00:04:33.673
So you could have it automatically drop
in the appropriate terminology there.

71
00:04:33.673 --> 00:04:37.435
You could imagine doing some
sort of escaping of strings,

72
00:04:37.435 --> 00:04:42.425
if you were dropping in user provided
content and you needed to protect it from

73
00:04:42.425 --> 00:04:47.146
having, cross site scripting,
scripting characters embedded in it.

74
00:04:47.146 --> 00:04:52.136
You can imagine having a tag function that
automatically escaped out any of your HTML

75
00:04:52.136 --> 00:04:54.814
entities to prevent cross sites scripting.

76
00:04:54.814 --> 00:04:57.382
Really, the possibilities
are almost endless.

77
00:04:57.382 --> 00:05:00.223
Any sort of preprocessing
that you can imagine, so

78
00:05:00.223 --> 00:05:04.863
localization, like formatting of things,
internationalization, escaping.

79
00:05:04.863 --> 00:05:09.947
All those sorts of preprocessing are
really great use cases for tag functions.

80
00:05:09.947 --> 00:05:13.776
And the great news is, you almost
certainly don't even need to write your

81
00:05:13.776 --> 00:05:17.483
own tag function, because there
are hundreds and hundreds of these tag

82
00:05:17.483 --> 00:05:21.477
functions all ready written in various
different libraries at this point.

83
00:05:21.477 --> 00:05:26.136
So you just go looking on NPM or
GetHub or wherever you look to find code.

84
00:05:26.136 --> 00:05:29.784
Go looking, and you're gonna find tons
of tag functions, almost certainly.

85
00:05:29.784 --> 00:05:34.154
Whatever kinda standard preprocessing or
formatting you wanna do,

86
00:05:34.154 --> 00:05:36.193
there's a tag function for it.

87
00:05:36.193 --> 00:05:39.381
So just go find the tag function,
use that library,

88
00:05:39.381 --> 00:05:42.796
put it in front of your string
literals and then move on.

