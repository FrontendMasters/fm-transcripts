WEBVTT

1
00:00:00.218 --> 00:00:02.784
&gt;&gt; Kyle Simpson: So
lets take a look at template strings.

2
00:00:02.784 --> 00:00:07.276
And I'll be completely honest with you,
when ES6 came out with this feature,

3
00:00:07.276 --> 00:00:08.696
I sort of overlooked it.

4
00:00:08.696 --> 00:00:13.495
Not over looked it I did learn
about it and understand it, but

5
00:00:13.495 --> 00:00:17.635
I didn't really get that
it would be that critical,

6
00:00:17.635 --> 00:00:21.791
that important, and
then in a slow burn basically.

7
00:00:21.791 --> 00:00:26.878
Not overnight but in a slow burn little by
little, by little, this is moved it's way

8
00:00:26.878 --> 00:00:31.483
up my list to become one of my favorite
features that landed in the language.

9
00:00:31.483 --> 00:00:34.855
And it turns out that I'm
using it on a daily basis,

10
00:00:34.855 --> 00:00:36.981
hundreds of times a day almost.

11
00:00:36.981 --> 00:00:40.324
So it's a really interesting
little feature and

12
00:00:40.324 --> 00:00:42.942
it goes by the name Template Strings.

13
00:00:42.942 --> 00:00:48.572
But I don't think that's a very good name
for this because the word template implies

14
00:00:48.572 --> 00:00:53.503
this idea that it is something that
could be repeated over and over again.

15
00:00:53.503 --> 00:00:57.372
Most developers have this conception in
their mind that a template is something

16
00:00:57.372 --> 00:01:00.675
that you could re-render with
different data over and over again.

17
00:01:00.675 --> 00:01:03.611
And these are not that at all,
they're like a one time,

18
00:01:03.611 --> 00:01:07.613
they're almost like an iffy function,
it's a one time shot, it's done,

19
00:01:07.613 --> 00:01:09.568
it's a string that's fully baked.

20
00:01:09.568 --> 00:01:12.688
So I like to think of these
as interpolated literals, and

21
00:01:12.688 --> 00:01:14.579
I know that's a big mouth phrase.

22
00:01:14.579 --> 00:01:18.707
So if you're looking for like a short kind
of fancy sounding name to make yourself

23
00:01:18.707 --> 00:01:21.877
sound smart, start referring
to these as interpoliterals.

24
00:01:21.877 --> 00:01:25.384
Or just keep calling them template
strings like everybody else does.

25
00:01:25.384 --> 00:01:28.611
So what problem are template
strings trying to solve?

26
00:01:28.611 --> 00:01:33.282
Certainly many of you, if not all of you,
have had on a regular basis occasion to

27
00:01:33.282 --> 00:01:36.092
have to have to concatenate
strings together.

28
00:01:36.092 --> 00:01:40.356
Not just strings with strings,
but strings with data values.

29
00:01:40.356 --> 00:01:45.368
In this case, the data values are strings,
but a lot of times, they're other things,

30
00:01:45.368 --> 00:01:50.043
like numbers, or Booleans, or other sorts
of representations of values, and so

31
00:01:50.043 --> 00:01:54.070
this idea of stringing values together
to produce one larger string.

32
00:01:54.070 --> 00:01:58.649
I didn't know for many,
many years, until in fact ES6,

33
00:01:58.649 --> 00:02:01.086
I didn't know this had a term.

34
00:02:01.086 --> 00:02:05.220
I just did it, I was like is just
string concatenating with data.

35
00:02:05.220 --> 00:02:09.618
I didn't know that there was an official
term for this called interpolation.

36
00:02:09.618 --> 00:02:14.607
And I also didn't realize that this was a
feature that had already been supported in

37
00:02:14.607 --> 00:02:17.683
a variety of other languages
prior to JavaScript.

38
00:02:17.683 --> 00:02:20.947
I didn't even realize
that I had encountered it

39
00:02:20.947 --> 00:02:25.446
once before years earlier in
a different language which was PHP.

40
00:02:25.446 --> 00:02:30.327
Prior even to PHP, my background was more
C programming that's where I got a lot of

41
00:02:30.327 --> 00:02:34.530
my start in programming was in,
I did a lot of C and C++ programming.

42
00:02:34.530 --> 00:02:39.808
And for whatever reason, I got used
to double quotes around my strings.

43
00:02:39.808 --> 00:02:43.960
I know that many people are more familiar
or more used to using the single quotes,

44
00:02:43.960 --> 00:02:46.844
but I just got into the habit
of using the double quotes.

45
00:02:46.844 --> 00:02:49.550
So of course,
I was using double quotes in PHP and

46
00:02:49.550 --> 00:02:51.597
everything seemed to be going fine.

47
00:02:51.597 --> 00:02:56.527
And then one day, one of my strings
started printing values inside of

48
00:02:56.527 --> 00:02:59.933
it that were entirely not
what I was expecting.

49
00:02:59.933 --> 00:03:02.872
And I was like, what is happening?

50
00:03:02.872 --> 00:03:06.969
And I dug into this, and searched,
and Googled it and asked people.

51
00:03:06.969 --> 00:03:11.522
And then I found out that
double quoted strings in PHP

52
00:03:11.522 --> 00:03:15.778
behave differently than
single quoted string.

53
00:03:15.778 --> 00:03:18.548
And nobody had ever told me this,
I've been developing [LAUGH] PHP for

54
00:03:18.548 --> 00:03:19.085
five years.

55
00:03:19.085 --> 00:03:23.187
Nobody told me that in double quoted
strings, if you have a dollar sign,

56
00:03:23.187 --> 00:03:26.954
they use the dollar sign in variables,
if you have a dollar sign and

57
00:03:26.954 --> 00:03:29.105
then a word immediately after it, and

58
00:03:29.105 --> 00:03:33.205
that happens to match one of the variable
names that's in scope, it will

59
00:03:33.205 --> 00:03:37.740
automatically replace that reference
with the actual value of that variable.

60
00:03:37.740 --> 00:03:41.382
And I had no idea [LAUGH]
that that was happening.

61
00:03:41.382 --> 00:03:45.518
And I learned about this idea that
they'll go ahead and drop it in, but

62
00:03:45.518 --> 00:03:50.066
I didn't even know that that had a name
and that feature is called interpolation.

63
00:03:50.066 --> 00:03:53.458
And I wish I had that perspective to say,
that what we need and

64
00:03:53.458 --> 00:03:57.736
I would've been advocating for JavaScript
to have this a lot earlier than it did.

65
00:03:57.736 --> 00:03:59.740
Because this, quite frankly,

66
00:03:59.740 --> 00:04:04.944
works we've all done that kind of approach
to our code, but it's not ideal at all.

67
00:04:04.944 --> 00:04:08.902
This is a perfect example of that
very imperative approach to code.

68
00:04:08.902 --> 00:04:10.900
Because to figure out the final string,

69
00:04:10.900 --> 00:04:13.558
you have to essentially
mentally execute this code.

70
00:04:13.558 --> 00:04:15.892
You gotta pick the bits and pieces, and

71
00:04:15.892 --> 00:04:19.023
figure out where
the concatenation operators are.

72
00:04:19.023 --> 00:04:23.375
And so a much better way of doing this
would be to declare what our final string

73
00:04:23.375 --> 00:04:27.524
would be and have placeholders for
where we want values to be dropped in.

74
00:04:27.524 --> 00:04:32.484
And that's what we get with this
new template strings feature.

75
00:04:32.484 --> 00:04:36.827
Unfortunately, they can't just change
the string literal like the double or

76
00:04:36.827 --> 00:04:40.001
the single quote cuz they
would break somebody's code.

77
00:04:40.001 --> 00:04:44.852
No matter what pattern you used to
delimit a value in your string, there's

78
00:04:44.852 --> 00:04:49.703
a guarantee that somebody out there is
already got that in their strings and

79
00:04:49.703 --> 00:04:53.483
they don't want their code to
break like mine did one day.

80
00:04:53.483 --> 00:04:58.348
They don't want their code to break and so
we had to add a whole new kind of string

81
00:04:58.348 --> 00:05:01.613
literal to support that
automatic interpolation.

82
00:05:01.613 --> 00:05:06.005
And they chose to use the backtick
operator to indicate this is

83
00:05:06.005 --> 00:05:08.032
a different kind of string,

84
00:05:08.032 --> 00:05:14.030
wherein inside of the string there will be
these expressions that will be replaced,

85
00:05:14.030 --> 00:05:18.777
at that moment they will be replaced
with whatever their value is.

86
00:05:18.777 --> 00:05:23.218
And you'll note here that
the expression that you use to

87
00:05:23.218 --> 00:05:28.240
delimit is a dollar sign and
then the curly braces surround it.

88
00:05:28.240 --> 00:05:33.155
Inside of the curly braces is essentially
any expression that you wanna do.

89
00:05:33.155 --> 00:05:37.083
It's often gonna be a variable, but
it could be a whole JavaScript expression,

90
00:05:37.083 --> 00:05:39.301
a whole JavaScript program for
that matter.

91
00:05:39.301 --> 00:05:40.950
Can be a function call,

92
00:05:40.950 --> 00:05:46.406
it can even be a template literal inside
of that expression if you need it to be.

93
00:05:46.406 --> 00:05:49.092
And I've done that on some occasions.

94
00:05:49.092 --> 00:05:53.683
So you'll typically see this
used with the variables because

95
00:05:53.683 --> 00:05:58.725
that's the most common use cases to
drop in the value of a variable.

96
00:05:58.725 --> 00:06:02.709
Why I said that we shouldn't be calling
these template strings is actually,

97
00:06:02.709 --> 00:06:06.019
literally, the first time I tried
to learn about this feature,

98
00:06:06.019 --> 00:06:08.183
with the word template string in my head.

99
00:06:08.183 --> 00:06:13.153
I tried to figure out okay, how do I
get access to the template of this so

100
00:06:13.153 --> 00:06:17.633
that I can re-render it with
different variables every time?

101
00:06:17.633 --> 00:06:20.283
And I spent more than half
a day messing around,

102
00:06:20.283 --> 00:06:23.405
trying to figure it out,
trying to experiment with it.

103
00:06:23.405 --> 00:06:27.296
And then finally somebody on Twitter
corrected me and they're like no,

104
00:06:27.296 --> 00:06:29.993
it's not a template,
it's already the string.

105
00:06:29.993 --> 00:06:34.736
It's not really appropriate to think of
it as a thing that will produce a string,

106
00:06:34.736 --> 00:06:36.215
it is the string itself.

107
00:06:36.215 --> 00:06:40.724
It's just the fact that there's a bit of
pre-processing that goes in as that string

108
00:06:40.724 --> 00:06:41.558
is happening.

109
00:06:41.558 --> 00:06:44.689
So really the best mental model
is it kind of like an iffy,

110
00:06:44.689 --> 00:06:47.255
an immediately invoke function expression.

111
00:06:47.255 --> 00:06:51.962
You describe what string you want and
it immediately goes and construct and

112
00:06:51.962 --> 00:06:54.211
builds that string and drops it in.

113
00:06:54.211 --> 00:06:57.697
So, if you were to ask what
is the type of message here?

114
00:06:57.697 --> 00:07:02.524
It's not some object or template,
it's an actual primitive string.

115
00:07:02.524 --> 00:07:05.574
That's the result of
that backtick delimiter.

116
00:07:05.574 --> 00:07:08.804
Just a quick note on the backticks by
the way, this is just a personal rant.

117
00:07:08.804 --> 00:07:13.708
I understand why they chose that
operator because it certainly

118
00:07:13.708 --> 00:07:18.807
has a nice visual similarity to
single quotes and double quotes.

119
00:07:18.807 --> 00:07:23.223
But that particular choice of
backtick is a bit frustrating for

120
00:07:23.223 --> 00:07:27.053
some of us who like to write
about JavaScript and we do so

121
00:07:27.053 --> 00:07:32.408
in Markdown format, like I've written
all of my books in Markdown format.

122
00:07:32.408 --> 00:07:37.830
And Markdown uses the backtick
as the way you indicate code,

123
00:07:37.830 --> 00:07:40.817
like inline code or code blocks.

124
00:07:40.817 --> 00:07:44.628
So if you are trying to do
an inline code reference and

125
00:07:44.628 --> 00:07:49.564
include a single backtick,
I'm not lying that actually takes five

126
00:07:49.564 --> 00:07:53.132
backticks to show one backtick and
inline code.

127
00:07:53.132 --> 00:07:54.593
Five backticks and two paces.

128
00:07:54.593 --> 00:07:58.927
You have to do backtick, backtick, space,
and then the backtick you wanna show and

129
00:07:58.927 --> 00:08:01.447
then another space and
then two backticks on it.

130
00:08:01.447 --> 00:08:04.340
They didn't have something sensible
like backslash or whatever, so

131
00:08:04.340 --> 00:08:05.867
you had to do this crazy other thing.

132
00:08:05.867 --> 00:08:09.488
Anyway, it's more difficult to
write about in Markdown, but

133
00:08:09.488 --> 00:08:11.754
nonetheless, it's a great feature.

134
00:08:11.754 --> 00:08:14.649
And again, I started using
this in a few little places,

135
00:08:14.649 --> 00:08:17.557
like when I was printing
messages to a page or whatever.

136
00:08:17.557 --> 00:08:21.183
But where I really started using
this is in my console messages,

137
00:08:21.183 --> 00:08:22.670
console.log messages.

138
00:08:22.670 --> 00:08:25.190
And I started using this
all over the place and

139
00:08:25.190 --> 00:08:29.310
now it's probably one of the most
predominant features in the code base.

140
00:08:29.310 --> 00:08:34.770
Another note about these template strings
is that you'll see on the end of line 5,

141
00:08:34.770 --> 00:08:39.372
it's not just for saving space in
the slides, I actually broke across

142
00:08:39.372 --> 00:08:43.368
a line without having to do
a backslash at the end of the line.

143
00:08:43.368 --> 00:08:48.428
With regular strings, that is the classic,
double or single-quoted string, if you

144
00:08:48.428 --> 00:08:53.373
want to continue a string onto another
line, that's called string continuation.

145
00:08:53.373 --> 00:08:56.889
If you wanna continue onto another line,
you have to put a backslash at the end of

146
00:08:56.889 --> 00:08:59.318
the line, which is fine,
but it's kind of annoying.

147
00:08:59.318 --> 00:09:02.592
And these template strings,
or these interpoliterals,

148
00:09:02.592 --> 00:09:06.084
they automatically allow you
to break strings across lines.

149
00:09:06.084 --> 00:09:10.774
Which can be quite helpful if you need to
write out a string across multiple lines

150
00:09:10.774 --> 00:09:12.249
maybe for readability.

151
00:09:12.249 --> 00:09:17.551
Just be aware that that content,
the new line that you put in there,

152
00:09:17.551 --> 00:09:22.124
if you tab, indent,
all of that content is in the string.

153
00:09:22.124 --> 00:09:25.940
That's not magically having that white
space removed, it's in the string.

154
00:09:25.940 --> 00:09:30.755
So there is the downside if you don't
want that white space there you can use

155
00:09:30.755 --> 00:09:31.756
that feature.

156
00:09:31.756 --> 00:09:35.945
So this is part of that narrative that
I was talking about in the intro to

157
00:09:35.945 --> 00:09:39.781
the course, which is that this
is a more declarative approach.

158
00:09:39.781 --> 00:09:42.985
We're saying I just wanna string,
and JavaScript

159
00:09:42.985 --> 00:09:47.766
please go figure out how to put these
values in to my string where I need them.

