WEBVTT

1
00:00:00.000 --> 00:00:04.292
&gt;&gt; Kyle Simpson: So notice that fourth
here is an array with the values 4 and

2
00:00:04.292 --> 00:00:04.999
5 in it.

3
00:00:04.999 --> 00:00:09.998
What would we expect the fourth variable
to be over here on the left when

4
00:00:09.998 --> 00:00:13.809
I remove that 4 and 5,
what would be the expecting,

5
00:00:13.809 --> 00:00:17.390
the variable fourth to hold
on the left hand side?

6
00:00:17.390 --> 00:00:19.123
We're taking an array and

7
00:00:19.123 --> 00:00:23.311
saying I want you to start slicing
this array at this position.

8
00:00:23.311 --> 00:00:27.747
And this array doesn't have a position
there, it doesn't have any values, but

9
00:00:27.747 --> 00:00:30.631
what is slice always gonna
return to us in that case?

10
00:00:31.828 --> 00:00:33.310
&gt;&gt; Kyle Simpson: An empty array, right?

11
00:00:33.310 --> 00:00:36.204
That's what we would expect is,
there's nothing there, so

12
00:00:36.204 --> 00:00:37.494
it's just an empty array.

13
00:00:37.494 --> 00:00:41.979
And the exact same thing is true over
here, if there's nothing in that position,

14
00:00:41.979 --> 00:00:46.594
at a minimum, the gather operator, the
rest operator, it gives us an empty array,

15
00:00:46.594 --> 00:00:48.104
which is very convenient.

16
00:00:48.104 --> 00:00:51.258
Instead of having to deal with,
it could be undefined, or null, or

17
00:00:51.258 --> 00:00:52.990
something like that.

18
00:00:52.990 --> 00:00:56.392
&gt;&gt; Kyle Simpson: The gather syntax,
by the way, the rest syntax,

19
00:00:56.392 --> 00:00:59.239
it has to show up at
the end of the pattern.

20
00:00:59.239 --> 00:01:03.942
You can't gather in the middle and
then have other things listed after it,

21
00:01:03.942 --> 00:01:06.567
it has to be at the very
end of the pattern.

22
00:01:06.567 --> 00:01:10.178
Because it's getting,
it's gathering everything else up,

23
00:01:10.178 --> 00:01:12.501
it's gathering the rest of the values.

24
00:01:15.899 --> 00:01:18.914
&gt;&gt; Kyle Simpson: Little nuance here
that I've been hand-waving over but

25
00:01:18.914 --> 00:01:21.185
it seems like a good time for
me to call out.

26
00:01:21.185 --> 00:01:26.311
Can any of you spot the difference
between the left hand side and

27
00:01:26.311 --> 00:01:30.770
the right hand side,
functionally, behaviorally?

28
00:01:30.770 --> 00:01:32.290
There is a difference here.

29
00:01:32.290 --> 00:01:35.970
&gt;&gt; Student: In terms of the amount
of declaration that's happening or

30
00:01:35.970 --> 00:01:38.155
the sequence of the declaration?

31
00:01:38.155 --> 00:01:41.133
&gt;&gt; Kyle Simpson: No,
I mean the outcome of these two programs.

32
00:01:41.133 --> 00:01:45.122
There's a difference in outcome
between these two programs.

33
00:01:45.122 --> 00:01:46.630
&gt;&gt; Student2: The temp is changed.

34
00:01:46.630 --> 00:01:48.922
&gt;&gt; Kyle Simpson: There's a temp
on the left hand side but

35
00:01:48.922 --> 00:01:51.570
there is no temp at all
on the right hand side.

36
00:01:51.570 --> 00:01:54.911
No, and I think you were trying
to indicate the slice is-

37
00:01:54.911 --> 00:01:55.630
&gt;&gt; Student2: [INAUDIBLE] slice

38
00:01:55.630 --> 00:01:56.197
[INAUDIBLE].

39
00:01:56.197 --> 00:01:57.577
&gt;&gt; Kyle Simpson: It doesn't mutate it.

40
00:01:57.577 --> 00:01:58.695
&gt;&gt; Student2: Okay,
it doesn't mutate it, okay.

41
00:01:58.695 --> 00:02:01.710
&gt;&gt; Kyle Simpson: Sub-slice of the array,
but the big difference is,

42
00:02:01.710 --> 00:02:05.171
there's a tmp over here and
there's no tmp on this side.

43
00:02:05.171 --> 00:02:07.810
&gt;&gt; Kyle Simpson: And
it's not a huge difference actually.

44
00:02:07.810 --> 00:02:10.563
But it is an important difference because
it speaks to the idea that when you

45
00:02:10.563 --> 00:02:12.704
destructure, you're just
sort of ephemerally saying,

46
00:02:12.704 --> 00:02:14.977
I want this structure to exist for
this brief period of time and

47
00:02:14.977 --> 00:02:17.492
then break it out into pieces and
then throw away the big structure.

48
00:02:17.492 --> 00:02:21.096
Which is often what you want, but

49
00:02:21.096 --> 00:02:26.246
it might be the case that
you'd actually like to

50
00:02:26.246 --> 00:02:31.544
have a reference to
the whole structure as well.

51
00:02:31.544 --> 00:02:36.132
And the way that we would do that on this
side is to get tmp equal to data and

52
00:02:36.132 --> 00:02:41.579
then to break it down, and that's exactly
the same thing that we would do over here.

53
00:02:41.579 --> 00:02:46.068
We would say get me a tmp,
&gt;&gt; Kyle Simpson: So

54
00:02:46.068 --> 00:02:53.570
I'm saying vartmp equals data, and
then have this thing equal to that value,

55
00:02:53.570 --> 00:02:58.015
so this pattern is going
to break down the tmp.

56
00:02:58.015 --> 00:03:03.658
So if I already had
a vartmp that was declared,

57
00:03:03.658 --> 00:03:08.000
then this thing is going to happen,

58
00:03:08.000 --> 00:03:13.210
I'm gonna get tmp assign to the array, and

59
00:03:13.210 --> 00:03:20.468
then that array is gonna get
destructured by this pattern.

60
00:03:22.388 --> 00:03:26.198
&gt;&gt; Kyle Simpson: So if you need to
get access to both the value and

61
00:03:26.198 --> 00:03:31.892
its destructured parts,
you just simply chain an equals together.

62
00:03:31.892 --> 00:03:36.216
It is common for in my experience
to put the reference to it,

63
00:03:36.216 --> 00:03:40.019
over here on the right next
to where the value is, and

64
00:03:40.019 --> 00:03:44.015
then have the destructuring
pattern to the left of it.

65
00:03:44.015 --> 00:03:48.070
But technically you can actually
do it in the other order,

66
00:03:48.070 --> 00:03:50.318
we'll see that in a little bit.

