WEBVTT

1
00:00:00.000 --> 00:00:04.850
&gt;&gt; Kyle Simpson: Let's go back to
the scenario that we had before,

2
00:00:04.850 --> 00:00:07.393
which was our variables.

3
00:00:28.440 --> 00:00:34.826
&gt;&gt; Kyle Simpson: What if I did not care

4
00:00:34.826 --> 00:00:41.974
about the number two?

5
00:00:43.011 --> 00:00:47.859
&gt;&gt; Kyle Simpson: I would just simply
not do that assignment, right?

6
00:00:47.859 --> 00:00:50.881
I'm commenting in here, so
you can see that it's still there, but

7
00:00:50.881 --> 00:00:53.172
that is effectively just
not doing an assignment.

8
00:00:53.172 --> 00:00:57.795
I'm basically saying, I only care
about position zero and two, and

9
00:00:57.795 --> 00:01:00.515
I don't care about position one at all.

10
00:01:00.515 --> 00:01:05.495
In a destructuring syntax,
we can essentially have empty positions,

11
00:01:05.495 --> 00:01:09.484
which have the effect of not
doing any assignment at all.

12
00:01:09.484 --> 00:01:14.462
So an empty position is just simply
nothing in between the commas.

13
00:01:14.462 --> 00:01:17.437
Which here I'm gonna put its own line, so

14
00:01:17.437 --> 00:01:22.710
that you aren't tempted to miss
the fact that there's two commas there.

15
00:01:22.710 --> 00:01:27.375
I've seen people do stuff like that
before, and good luck having people read

16
00:01:27.375 --> 00:01:31.344
and count how many spaces there
are in between the commas, okay?

17
00:01:31.344 --> 00:01:35.909
So if you're gonna leave an empty space in
a destructuring pattern, give it its own

18
00:01:35.909 --> 00:01:39.971
line, so at least that it's obvious
that something is happening there.

19
00:01:39.971 --> 00:01:43.278
Of course, you can do, this is called
array elision, by the way, and

20
00:01:43.278 --> 00:01:45.307
you can do this array
elision at any place.

21
00:01:45.307 --> 00:01:48.752
You could do it at the beginning,
you could do it in the middle,

22
00:01:48.752 --> 00:01:51.614
it doesn't really make any
sense to do it at the end.

23
00:01:51.614 --> 00:01:54.386
But it might make sense to do
it right before you do a gather,

24
00:01:54.386 --> 00:01:57.103
if you know that there are some
things that you don't wanna

25
00:01:57.103 --> 00:01:59.780
include in the gathering,
&gt;&gt; Kyle Simpson: If you wanted

26
00:01:59.780 --> 00:02:01.019
to throw away a few basically.

27
00:02:01.019 --> 00:02:05.836
&gt;&gt; Speaker 2: Could you do ranges inside,
or probably not?

28
00:02:05.836 --> 00:02:08.218
You can slice the data,
probably, before passing it.

29
00:02:08.218 --> 00:02:12.618
&gt;&gt; Kyle Simpson: Yeah.

30
00:02:12.618 --> 00:02:14.147
&gt;&gt; Speaker 2: Right.

31
00:02:22.613 --> 00:02:23.383
&gt;&gt; Kyle Simpson: All right,

32
00:02:23.383 --> 00:02:28.006
I'm gonna open up a new tab just to
show you one other little diversion.

33
00:02:29.768 --> 00:02:34.612
&gt;&gt; Kyle Simpson: If I had x=10 and
y=20, and

34
00:02:34.612 --> 00:02:38.598
I wanted to swap those two.

35
00:02:38.598 --> 00:02:41.554
I wanted x to be 20 and y to be 10.

36
00:02:41.554 --> 00:02:46.922
The most common way that we would swap
them would be to say something like,

37
00:02:46.922 --> 00:02:51.856
var tmp = x, and then, or actually,
let's be more ES6 about it,

38
00:02:51.856 --> 00:02:56.032
let's use a block and
use a block-scoped declarative.

39
00:02:56.032 --> 00:02:59.559
We'll say let tmp = x, and then,

40
00:02:59.559 --> 00:03:04.557
[SOUND] goodness., and
then x = y, and y = tmp.

41
00:03:04.557 --> 00:03:09.019
And so now x would be 20,
and y would be 10.

42
00:03:09.019 --> 00:03:12.392
Any of you ever done swapping
event variables like that before,

43
00:03:12.392 --> 00:03:13.957
using a temporary variable?

44
00:03:13.957 --> 00:03:17.848
Well, there's a trick that we can
use with destructuring to make

45
00:03:17.848 --> 00:03:21.967
the swapping in this particular
case not need a temporary variable.

46
00:03:21.967 --> 00:03:26.571
So if I had a var x = 10 and a var y = 20,

47
00:03:26.571 --> 00:03:31.445
an effective way of
swapping the two is to use

48
00:03:31.445 --> 00:03:35.530
a destructuring pattern that says,

49
00:03:35.530 --> 00:03:39.643
I want y and x to equal the array x,y.

50
00:03:39.643 --> 00:03:44.838
So this is saying, I want y to take on
whatever value is in this position,

51
00:03:44.838 --> 00:03:48.939
and I want x to take on whatever
value is in this position.

52
00:03:48.939 --> 00:03:52.274
And that is the effect of
having swapped x and y.

53
00:03:56.177 --> 00:03:59.124
&gt;&gt; Kyle Simpson: And of course, it's not
limited to 2, you could have 3 or 5 or

54
00:03:59.124 --> 00:04:01.372
10 or 20,
however many of those you needed.

55
00:04:02.586 --> 00:04:06.193
&gt;&gt; Kyle Simpson: [COUGH] But
I can say at least maybe half a dozen or

56
00:04:06.193 --> 00:04:10.089
a dozen times or so,
I've needed to swap things.

57
00:04:10.089 --> 00:04:13.395
And this is a nice convenient way
of doing that very concisely, and

58
00:04:13.395 --> 00:04:14.878
I think also declaratively.

59
00:04:14.878 --> 00:04:19.762
I'm essentially listing out
that the values in that

60
00:04:19.762 --> 00:04:24.876
order should be transposed to that order,
declared.

