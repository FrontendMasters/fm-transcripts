WEBVTT

1
00:00:00.000 --> 00:00:04.542
&gt;&gt; Kyle Simpson: Another feature that
regular expressions have added is called

2
00:00:04.542 --> 00:00:06.261
named capture groups.

3
00:00:06.261 --> 00:00:09.184
So before you understand what
a named capture group is,

4
00:00:09.184 --> 00:00:12.367
you need to make sure you
understand what a capture group is.

5
00:00:12.367 --> 00:00:19.415
So on line 3 here, you'll notice
that I am using a parentheses set.

6
00:00:19.415 --> 00:00:26.133
On line 3,
that parentheses set is saying, (l.).

7
00:00:26.133 --> 00:00:31.966
And in regular expressions, parenthesis
are not just grouping operators,

8
00:00:31.966 --> 00:00:37.272
although they have that effect,
they are also capturing operators.

9
00:00:37.272 --> 00:00:42.187
Which means that the output
that we see here on line 4

10
00:00:42.187 --> 00:00:46.777
has both the larger scale match,
which was ell.

11
00:00:46.777 --> 00:00:50.537
And then, the next thing in
there was the captured group,

12
00:00:50.537 --> 00:00:55.241
which in this case, the first capture
group, which in this case was ll.

13
00:00:55.241 --> 00:00:58.708
So a capture group is
a way to have a sub part

14
00:00:58.708 --> 00:01:02.384
of the pattern pulled
out in a separate way.

15
00:01:02.384 --> 00:01:06.228
And we use those for
back references, like line 6.

16
00:01:06.228 --> 00:01:10.451
So here I'm saying whatever
comes before the o, and then,

17
00:01:10.451 --> 00:01:15.442
I have a back \1 that says match that
same thing later in the pattern.

18
00:01:15.442 --> 00:01:19.538
But whether you use them to
pull them out in matches, or

19
00:01:19.538 --> 00:01:23.990
whether you use them for
back references, we have always,

20
00:01:23.990 --> 00:01:28.904
up to this point, had to use
numeric references to these groups.

21
00:01:28.904 --> 00:01:32.073
So it ends up where you have this big,
long, regular expression, and

22
00:01:32.073 --> 00:01:33.970
you have to count your open parenthesis.

23
00:01:33.970 --> 00:01:38.325
And say, that's like capture group seven,
and that's capture group four and

24
00:01:38.325 --> 00:01:39.560
weird stuff like that.

25
00:01:39.560 --> 00:01:44.621
And it makes regular expression really,
really hard to manage.

26
00:01:44.621 --> 00:01:47.922
So now we have the ability,
like you seen on line 9,

27
00:01:47.922 --> 00:01:52.069
when you make a capture group,
you can give it a good useful name.

28
00:01:52.069 --> 00:01:57.134
So on line 9, for example, I am using
the syntax question mark, and then,

29
00:01:57.134 --> 00:02:01.985
those angle brackets, and that gives
a parentheses set an actual name.

30
00:02:01.985 --> 00:02:03.359
In this case, cap.

31
00:02:03.359 --> 00:02:07.914
So I'm saying,
make a capturing group called cap.

32
00:02:07.914 --> 00:02:10.222
And how do we reference,
or how do we use that?

33
00:02:10.222 --> 00:02:16.312
You'll notice that the object that we
got back had a groups property on it,

34
00:02:16.312 --> 00:02:21.161
and inside of groups,
we have a named property called cap.

35
00:02:21.161 --> 00:02:26.901
So we can access any named capturing
groups from our regular expression and

36
00:02:26.901 --> 00:02:30.373
whatever values were
in those named groups.

37
00:02:30.373 --> 00:02:37.041
We can also use this syntax over here to
refer to the, in a back reference form,

38
00:02:37.041 --> 00:02:42.195
instead of saying \3 capturing group,
we can say \k, and

39
00:02:42.195 --> 00:02:47.474
then the name of the capturing
group that we wanna reference.

40
00:02:47.474 --> 00:02:51.642
And it will drop in that into the pattern.

41
00:02:51.642 --> 00:02:56.330
We can use those in our replace,
like we're doing here on line 15.

42
00:02:56.330 --> 00:03:00.165
On line 15, we can say $ &lt;&gt;, and then,

43
00:03:00.165 --> 00:03:05.151
use the name of our capturing
group in a replace pattern.

44
00:03:05.151 --> 00:03:09.698
And we can also receive that,
as you see on line 18 and 19,

45
00:03:09.698 --> 00:03:14.608
we can receive it in the function
callback that we pass to replace.

46
00:03:14.608 --> 00:03:18.304
So in other words, when you wanna
do capturing groups, instead of

47
00:03:18.304 --> 00:03:22.726
having to juggle all theses numbers, and
every time you add a new parenthesis,

48
00:03:22.726 --> 00:03:27.099
now all your numbers are off, give your
captured groups good semantic names.

49
00:03:27.099 --> 00:03:32.063
Say you have a regular expression that's
gonna match a date and we have the US date

50
00:03:32.063 --> 00:03:36.597
format, and you wanna name the capture
group for month and call it month.

51
00:03:36.597 --> 00:03:39.664
And then name the capture group for
day and call it day.

52
00:03:39.664 --> 00:03:41.147
And then one for year.

53
00:03:41.147 --> 00:03:44.272
Instead of having one, two, and three,

54
00:03:44.272 --> 00:03:48.662
which aren't semantic and
they're harder to maintain.

55
00:03:49.945 --> 00:03:53.411
&gt;&gt; Kyle Simpson: So
that's the second of our features that we

56
00:03:53.411 --> 00:03:57.447
have added to regular
expressions in ES2018.

