WEBVTT

1
00:00:00.217 --> 00:00:03.737
&gt;&gt; Kyle Simpson: Okay, back to
the scenario where we are returning some

2
00:00:03.737 --> 00:00:04.355
things.

3
00:00:09.179 --> 00:00:12.486
&gt;&gt; Kyle Simpson: What would happen,
let's get rid of fourth for now.

4
00:00:12.486 --> 00:00:17.711
What would happen on the left-hand side,
if in, let's say,

5
00:00:17.711 --> 00:00:22.935
this position here,
I had an array that included some values,

6
00:00:22.935 --> 00:00:26.205
a subarray that included some values.

7
00:00:26.205 --> 00:00:32.594
So I had 1, and then I had an array of 2
and 3, and then I had the number 4 here.

8
00:00:32.594 --> 00:00:37.811
If I wanted to imperatively grab
that value out, how would I do so?

9
00:00:37.811 --> 00:00:41.620
Well, I would say first = tmp[0].

10
00:00:41.620 --> 00:00:46.401
And then because I knew that I

11
00:00:46.401 --> 00:00:51.180
was gonna get an array here,

12
00:00:51.180 --> 00:00:59.358
I'd say something like var tmp2 = tmp[1].

13
00:00:59.358 --> 00:01:03.760
And then I'd say var second = tmp2[0], and
var third = tmp2[1], and then I'd say,

14
00:01:03.760 --> 00:01:05.474
var fourth, and back to tmp[2].

15
00:01:05.474 --> 00:01:10.182
So first is gonna be the number 1,
second is gonna be the number 2,

16
00:01:10.182 --> 00:01:14.994
third is gonna be the number 3, and
fourth is gonna be the number 4.

17
00:01:21.519 --> 00:01:27.753
&gt;&gt; Kyle Simpson: All right, so how would
we do that with a destructuring pattern?

18
00:01:27.753 --> 00:01:31.220
Itâ€™s gonna actually be the same principle,

19
00:01:31.220 --> 00:01:34.684
is that if we have
a position that is an array,

20
00:01:34.684 --> 00:01:39.720
then we need to break that thing
down as a destructuring pattern.

21
00:01:39.720 --> 00:01:46.192
So in this position here, instead
of having the target be a variable,

22
00:01:46.192 --> 00:01:51.473
we want the target to be
another destructuring pattern.

23
00:01:51.473 --> 00:01:56.423
So I'm going to make that
destructuring pattern an array.

24
00:01:56.423 --> 00:02:00.185
And inside of that nest
of destructuring pattern,

25
00:02:00.185 --> 00:02:03.778
that's where I'm gonna list second and
third.

26
00:02:07.664 --> 00:02:11.906
&gt;&gt; Kyle Simpson: What do you
think would happen if I were

27
00:02:11.906 --> 00:02:16.158
to return this instead of that array?

28
00:02:16.158 --> 00:02:18.982
Oops, what if that wasn't an array?

29
00:02:18.982 --> 00:02:20.462
What if that was undefined?

30
00:02:27.420 --> 00:02:28.123
&gt;&gt; Student: Blow up?

31
00:02:28.123 --> 00:02:29.243
[LAUGH]
&gt;&gt; Kyle Simpson: What's that?

32
00:02:29.243 --> 00:02:30.164
&gt;&gt; Student: It blow up, right?

33
00:02:30.164 --> 00:02:32.452
&gt;&gt; Kyle Simpson: Yeah,
what kind of blow up?

34
00:02:32.452 --> 00:02:34.043
&gt;&gt; Student: Same reference, right?

35
00:02:34.043 --> 00:02:38.800
&gt;&gt; Kyle Simpson: I'm gonna get a type
error when I try to access bracket 0,

36
00:02:38.800 --> 00:02:41.820
position 0 of the undefined value.

37
00:02:41.820 --> 00:02:45.108
So how might I deal with that?

38
00:02:45.108 --> 00:02:52.968
Again, I would say tmp2 = tmp[1] or
empty array.

39
00:02:52.968 --> 00:02:58.393
And that way, second and
third end up as these undefined or

40
00:02:58.393 --> 00:03:01.062
if they had default values.

41
00:03:01.062 --> 00:03:08.421
So how do I do that or empty array
on my nested destructuring pattern?

42
00:03:08.421 --> 00:03:13.475
Well, just like this
position can have a default,

43
00:03:13.475 --> 00:03:17.600
so can also this position have a default.

44
00:03:17.600 --> 00:03:20.606
And in that case,
we wanted to default to an empty array.

45
00:03:23.969 --> 00:03:26.161
&gt;&gt; Kyle Simpson: That's how we
give it a graceful fallback.

46
00:03:28.499 --> 00:03:32.629
&gt;&gt; Kyle Simpson: Any questions
about array destructuring?

47
00:03:32.629 --> 00:03:36.332
&gt;&gt; Student: One moment here actually,
is okay?

48
00:03:36.332 --> 00:03:39.749
I don't think that's likely actually
because usually you will expect certain

49
00:03:39.749 --> 00:03:40.515
values, right?

50
00:03:40.515 --> 00:03:46.382
But I mean,
there's no way to have if it's array or

51
00:03:46.382 --> 00:03:49.257
not array kind of thing.

52
00:03:49.257 --> 00:03:50.607
&gt;&gt; Kyle Simpson: What line and
what side are we talking-

53
00:03:50.607 --> 00:03:52.099
&gt;&gt; Student: I'm talking about that array

54
00:03:52.099 --> 00:03:54.015
within array, the second and third.

55
00:03:54.015 --> 00:03:54.675
&gt;&gt; Kyle Simpson: This one?

56
00:03:54.675 --> 00:03:58.705
&gt;&gt; Student: Yeah, well, what if it's
array [UNKNOWN[ it to like that,

57
00:03:58.705 --> 00:04:01.075
if it's not array take it as a whole.

58
00:04:01.075 --> 00:04:05.917
I mean, there's no way to do if, usually
when I have a defined structure, right,

59
00:04:05.917 --> 00:04:09.008
if you are not sure if it's array-
&gt;&gt; Kyle Simpson: Are you saying, I'm not

60
00:04:09.008 --> 00:04:12.601
sure of the position, the element of that
position is gonna be an array [INAUDIBLE]?

61
00:04:12.601 --> 00:04:13.488
&gt;&gt; Student: Yeah, yeah, exactly.

62
00:04:13.488 --> 00:04:14.001
&gt;&gt; Kyle Simpson: Yeah I know,

63
00:04:14.001 --> 00:04:16.527
the destructuring pattern says
this is what it's gonna be, for

64
00:04:16.527 --> 00:04:18.088
this and that, you're gonna blow up.

65
00:04:18.088 --> 00:04:19.796
&gt;&gt; Student: Yeah,
it's kinda make sense because usually you

66
00:04:19.796 --> 00:04:22.451
don't have this kind of cases, usually
when I have certain data structure.

67
00:04:22.451 --> 00:04:24.950
&gt;&gt; Kyle Simpson: You would typically
want to avoid a polymorphic structure.

68
00:04:24.950 --> 00:04:27.011
&gt;&gt; Student: Yeah,
that would be kinda weird thing anyway.

69
00:04:27.011 --> 00:04:28.626
[LAUGH]
&gt;&gt; Kyle Simpson: Yeah, I mean,

70
00:04:28.626 --> 00:04:29.365
those happen.

71
00:04:29.365 --> 00:04:32.419
But destructuring patterns
are saying declaratively.

72
00:04:32.419 --> 00:04:35.106
This is what I'm expecting here,
I'm expecting an array.

73
00:04:35.106 --> 00:04:39.186
And if I give back something
that's a number, expect for

74
00:04:39.186 --> 00:04:41.141
bonkers things to happen.

75
00:04:43.050 --> 00:04:43.803
&gt;&gt; Kyle Simpson: Yes?

76
00:04:43.803 --> 00:04:48.099
&gt;&gt; Student2: For skipping values, could
you use null instead of a blank space?

77
00:04:48.099 --> 00:04:51.830
&gt;&gt; Kyle Simpson: I think the question
is if I wanted to skip this position,

78
00:04:51.830 --> 00:04:54.801
when I do like a comma,
is that the question?

79
00:04:54.801 --> 00:04:55.489
&gt;&gt; Student2: Yeah.

80
00:04:55.489 --> 00:04:59.569
&gt;&gt; Kyle Simpson: Yeah, no, the only
way to skip is to not do anything.

81
00:04:59.569 --> 00:05:03.085
Anything that's written here
would be taken as you're

82
00:05:03.085 --> 00:05:05.260
trying to assign something to it.

83
00:05:05.260 --> 00:05:08.373
And null is not a valid
left-hand side target.

84
00:05:08.373 --> 00:05:13.237
So the only way to not target something
is to not have it there at all.

