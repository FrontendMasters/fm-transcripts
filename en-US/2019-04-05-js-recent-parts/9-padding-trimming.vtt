WEBVTT

1
00:00:00.000 --> 00:00:03.747
&gt;&gt; Kyle Simpson: It almost seems like a
rite of passage that JavaScript developers

2
00:00:03.747 --> 00:00:08.036
as they come into the language have to
write their own standard libs sorts of

3
00:00:08.036 --> 00:00:08.802
utilities.

4
00:00:08.802 --> 00:00:13.387
And some of the most common utilities
that you start with when you're trying to

5
00:00:13.387 --> 00:00:17.692
figure out how do I get stuff done
are things like padding a string with some

6
00:00:17.692 --> 00:00:21.721
character or white space and/or
trimming that kind of white space or

7
00:00:21.721 --> 00:00:23.202
padding character off.

8
00:00:23.202 --> 00:00:27.676
Well, unfortunately, there won't
be any more of that because now

9
00:00:27.676 --> 00:00:30.580
JavaScript actually has string padding and

10
00:00:30.580 --> 00:00:35.853
string trimming built into the standard
lib, that is on the string prototype.

11
00:00:35.853 --> 00:00:38.571
We already have these
features now built in.

12
00:00:38.571 --> 00:00:43.782
One set of them which is string
padding was added in ES2017 and

13
00:00:43.782 --> 00:00:47.774
then string trimming
was added into ES2019.

14
00:00:47.774 --> 00:00:53.310
So if we take a look at this idea of
padding and trimming, the first thing that

15
00:00:53.310 --> 00:00:59.119
we need to ask is, are we doing it on both
sides or are we doing it only on one side?

16
00:00:59.119 --> 00:01:02.142
Now, you might not have
thought about this before, but

17
00:01:02.142 --> 00:01:04.974
there is a nuanced detail
that's quite important,

18
00:01:04.974 --> 00:01:08.404
especially JavaScript used in
internationalized settings.

19
00:01:08.404 --> 00:01:10.249
In the English speaking world,

20
00:01:10.249 --> 00:01:13.676
we often just think,
everything moves left to right.

21
00:01:13.676 --> 00:01:17.441
So if I need to do something
on this side of the string,

22
00:01:17.441 --> 00:01:22.228
I can just call it left and if I do
something here then I call it right.

23
00:01:22.228 --> 00:01:24.169
Well, what about RTL languages?

24
00:01:24.169 --> 00:01:28.909
Left and right would be reversed in
that sense, so left and right are not

25
00:01:28.909 --> 00:01:33.886
the appropriate term to describe
the beginning and the end of your string.

26
00:01:33.886 --> 00:01:38.127
So there was for a while people doing
left pad and right pad, and famously,

27
00:01:38.127 --> 00:01:42.110
you may remember a few years back we
had the big left pad debacle on NPM.

28
00:01:42.110 --> 00:01:46.616
So this whole left and right thing, well,
we don't have left and right anymore.

29
00:01:46.616 --> 00:01:50.113
We don't have left and right padding,
we don't have left and

30
00:01:50.113 --> 00:01:53.018
right trimming, instead,
we have start and end.

31
00:01:53.018 --> 00:01:56.263
So let's take a look at
padding to begin with.

32
00:01:56.263 --> 00:02:01.905
We have padStart, which pads the start
of the string and it automatically

33
00:02:01.905 --> 00:02:07.098
detects if the string is an LTR and
it does that on the left hand side.

34
00:02:07.098 --> 00:02:11.860
If it's an RTL language then it
does it on the right hand side.

35
00:02:11.860 --> 00:02:16.178
So padStart takes two, it takes two
arguments, one of them is required.

36
00:02:16.178 --> 00:02:19.626
The first one of them is required,
and the second one is optional.

37
00:02:19.626 --> 00:02:22.195
The first one tells you
how many characters, but

38
00:02:22.195 --> 00:02:24.200
is this something that tripped me up,

39
00:02:24.200 --> 00:02:27.723
so it's a little nuance that you
have to get straight in your head.

40
00:02:27.723 --> 00:02:31.399
You're not telling it how many
padding characters to add,

41
00:02:31.399 --> 00:02:34.497
you're telling it what
length you want to pad to.

42
00:02:34.497 --> 00:02:38.512
So if I have a string that is already
five characters long and I say padStart,

43
00:02:38.512 --> 00:02:42.488
it's not gonna add any padding,
because it's already five characters.

44
00:02:42.488 --> 00:02:45.832
And if it was longer,
it also wouldn't add anything.

45
00:02:45.832 --> 00:02:50.371
But if I say padStart(8) ,with a string
that's already five characters,

46
00:02:50.371 --> 00:02:54.650
like line 5, it has to add some extra
characters to the left-hand side.

47
00:02:54.650 --> 00:02:59.681
By default, it uses the standard
ASCII 32 character space.

48
00:02:59.681 --> 00:03:03.889
But you can override if you want to
use a different kind of character for

49
00:03:03.889 --> 00:03:04.827
your padding.

50
00:03:04.827 --> 00:03:08.081
So line 7,
you see I can use an asterisk, and

51
00:03:08.081 --> 00:03:11.782
in fact I don't even have
to do a single character.

52
00:03:11.782 --> 00:03:17.097
I could have a multiple character string
from which padding characters are pulled.

53
00:03:17.097 --> 00:03:22.933
So line 9 shows a 5 character long
string to pull padding characters from,

54
00:03:22.933 --> 00:03:28.144
and you'll notice that it adds 123
on to the start of the string.

55
00:03:28.144 --> 00:03:33.610
So it starts from the leftmost character
in that list of pad characters and

56
00:03:33.610 --> 00:03:39.074
it pulls them until it needs it and
if it runs out of characters in doing so,

57
00:03:39.074 --> 00:03:42.265
it just wraps around and keeps repeating.

58
00:03:42.265 --> 00:03:47.443
I will say that I have never in
the four years that this has been

59
00:03:47.443 --> 00:03:52.330
in existence had any use case for
a multi string padding.

60
00:03:52.330 --> 00:03:56.840
I've never had any use case where I needed
to specify anything other than a single

61
00:03:56.840 --> 00:03:58.241
character for padding.

62
00:03:58.241 --> 00:04:02.855
So, it's a bit of a nuance that I
don't think you'll often run into, but

63
00:04:02.855 --> 00:04:07.396
in just in case you run into one of
those situations that's how you do it,

64
00:04:07.396 --> 00:04:10.091
you can provide a multi string pad source.

65
00:04:10.091 --> 00:04:15.230
You might think by the way,
since it's called padStart

66
00:04:15.230 --> 00:04:21.472
that it would pull padding characters
from the start of the string.

67
00:04:21.472 --> 00:04:23.640
That's not exactly what it does,

68
00:04:23.640 --> 00:04:28.588
it actually pulls them from the left of
the string regardless of the language.

69
00:04:28.588 --> 00:04:31.620
So if you're working in
an RTL environment and

70
00:04:31.620 --> 00:04:35.910
you have a multi string pad source,
be a little bit more careful.

71
00:04:35.910 --> 00:04:40.822
So if we have padStart,
then obviously we're gonna need a padEnd.

72
00:04:40.822 --> 00:04:43.806
And padEnd is formatted
exactly the same way.

73
00:04:43.806 --> 00:04:47.449
You tell it a number to give
it the target length that

74
00:04:47.449 --> 00:04:50.001
you want the string to be padded to.

75
00:04:50.001 --> 00:04:53.031
And so here, 5 gives us the same string,

76
00:04:53.031 --> 00:04:57.541
8 gives us a string with three
spaces on the end of the string.

77
00:04:57.541 --> 00:05:02.129
One little strange nuance is now
line 9 we're working on padEnd and

78
00:05:02.129 --> 00:05:06.879
you might think that it would pull
its padding character from the end of

79
00:05:06.879 --> 00:05:11.889
the string that you provided, but
nope it still pulls them from the left.

80
00:05:11.889 --> 00:05:16.590
So it just the pad source is
always pulled from the left

81
00:05:16.590 --> 00:05:21.726
regardless of start or end,
and regardless of LTR or RTL.

82
00:05:21.726 --> 00:05:22.895
So that is our padding and

83
00:05:22.895 --> 00:05:26.413
it doesn't really make sense to have
a pad that would happen on both sides.

84
00:05:26.413 --> 00:05:31.239
But if you needed that,
you could of course call both padStart and

85
00:05:31.239 --> 00:05:36.082
padEnd and you would get a string
with it happening on both sides.

86
00:05:36.082 --> 00:05:40.259
It's much more common as we'll see on
the next slide that you might need to trim

87
00:05:40.259 --> 00:05:41.223
from both sides.

88
00:05:41.223 --> 00:05:45.926
But here, it's thought that you almost
certainly are gonna, like if you're

89
00:05:45.926 --> 00:05:50.560
formatting things for tabular output or
something, that's the most common

90
00:05:50.560 --> 00:05:55.064
used case for needing to pad something
on the start or the end of the string.

91
00:05:55.064 --> 00:05:59.166
Speaking of trimming,
we don't have left and

92
00:05:59.166 --> 00:06:03.593
right trimming,
we have start and end trimming.

93
00:06:03.593 --> 00:06:08.580
But we also have a trim method and by the
way, the trim method has been around a lot

94
00:06:08.580 --> 00:06:12.844
longer, that's been pretty standard for
like many, many years.

95
00:06:12.844 --> 00:06:17.057
I don't even remember exactly which
JavaScript version that's been in.

96
00:06:17.057 --> 00:06:20.944
But a lot of people don't even know that
there's a trim method on strings and

97
00:06:20.944 --> 00:06:24.969
they end up implementing their own or
using some utility library that has one.

98
00:06:24.969 --> 00:06:28.905
Trim was already built in there, it
automatically would trim from both sides.

99
00:06:28.905 --> 00:06:32.145
Now we have those counterparts
of trimStart and trimEnd.

100
00:06:32.145 --> 00:06:35.792
They don't take any arguments cuz
there's no configuration to do there.

101
00:06:35.792 --> 00:06:40.299
They only trim white space, but
it's not just the character 32,

102
00:06:40.299 --> 00:06:45.852
ASCII white space, it's basically all
Unicode representations of white space.

103
00:06:45.852 --> 00:06:50.727
So check MDN if you're curious about
the really nuance which ASCII code

104
00:06:50.727 --> 00:06:52.199
points does it trim.

105
00:06:52.199 --> 00:06:57.395
But essentially all the white space
that you would imagine like space,

106
00:06:57.395 --> 00:07:00.868
and tab, and new line,
it will trim those off.

107
00:07:00.868 --> 00:07:03.967
So now we can pad and trim our strings.

