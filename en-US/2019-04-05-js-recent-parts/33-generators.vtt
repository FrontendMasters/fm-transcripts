WEBVTT

1
00:00:00.099 --> 00:00:04.380
&gt;&gt; Kyle Simpson: Even though it's not that
difficult to make an object with a next

2
00:00:04.380 --> 00:00:09.293
method on it, and define what it does,
I think we can all agree that this is

3
00:00:09.293 --> 00:00:14.634
a fairly imperative approach to adopting
the iterator protocol for an object.

4
00:00:14.634 --> 00:00:19.456
So it would be nice if there was
some other way of more declaratively

5
00:00:19.456 --> 00:00:22.654
creating an iterator producing function.

6
00:00:22.654 --> 00:00:26.828
And that leads us to generators.

7
00:00:26.828 --> 00:00:34.001
On line 1 you see an *
appear at the very top.

8
00:00:34.001 --> 00:00:38.874
Right at the very top you see an *
that indicates that we are dealing

9
00:00:38.874 --> 00:00:42.715
with a special kind of
function called a generator.

10
00:00:42.715 --> 00:00:45.693
This is a new type of function
that was added in the ES6, and

11
00:00:45.693 --> 00:00:49.638
there's lots of complexities to generators
that we're not gonna cover now.

12
00:00:49.638 --> 00:00:55.338
But the one thing that you need to
understand is that generators when you

13
00:00:55.338 --> 00:01:02.087
invoke them, they don't run, they produce
an iterator like we see here on line 8.

14
00:01:02.087 --> 00:01:05.794
And that iterator,
since it's a standard iterator,

15
00:01:05.794 --> 00:01:09.191
has a dot next method on
it like we see on line 10.

16
00:01:09.191 --> 00:01:14.588
And when you call dot next on a iterator
that's attached to a generator,

17
00:01:14.588 --> 00:01:20.087
it is going to give you the value that
was yielded out from that generator.

18
00:01:20.087 --> 00:01:24.902
This new keyword yield allows
a generator to produce

19
00:01:24.902 --> 00:01:29.724
additional values every
time it's iterated over.

20
00:01:29.724 --> 00:01:32.196
So when I say yield 1, we get out and

21
00:01:32.196 --> 00:01:35.501
iterate a result that
says value 1 done false.

22
00:01:35.501 --> 00:01:40.735
And when I say yield 2 we get value to
done false and then value 3 done false.

23
00:01:40.735 --> 00:01:46.129
And then you'll notice because
I use a return keyword on line

24
00:01:46.129 --> 00:01:52.576
5 when we get the value 4 out,
now it says done true, because we know for

25
00:01:52.576 --> 00:01:58.316
sure that iterator doesn't have
any other results to produce.

26
00:01:58.316 --> 00:01:59.775
There is, however,

27
00:01:59.775 --> 00:02:04.727
a bit of a gotcha with the usage of
the return keyword inside a generator.

28
00:02:04.727 --> 00:02:10.367
Look down on line 15, when I do
a dot-dot-dot over this generator,

29
00:02:10.367 --> 00:02:14.973
and it consumes the iterator
according to that protocol,

30
00:02:14.973 --> 00:02:18.170
as soon as it sees a done true, it stops.

31
00:02:18.170 --> 00:02:23.745
It doesn't keep the value at that moment
it assumes that it is iterated past it,

32
00:02:23.745 --> 00:02:27.339
so that is the effect of
throwing away the value 4.

33
00:02:27.339 --> 00:02:31.013
It's why it doesn't show up
in the array down online 15.

34
00:02:31.013 --> 00:02:35.773
So what you need to know is if you're
gonna make your own iterator using

35
00:02:35.773 --> 00:02:40.452
a generator like this you wanna make
sure that you always yield values

36
00:02:40.452 --> 00:02:42.561
instead of returning values.

37
00:02:42.561 --> 00:02:48.051
If you yield those values, they will come
out according to the iterator protocol and

38
00:02:48.051 --> 00:02:50.233
then they'll be iterated over.

39
00:02:50.233 --> 00:02:56.226
It's generally considered a bad practice
to return a value from a generator.

40
00:03:00.482 --> 00:03:02.802
&gt;&gt; Kyle Simpson: So now,
armed with this information,

41
00:03:02.802 --> 00:03:06.880
if we know that making a generator and
yielding values that seems like

42
00:03:06.880 --> 00:03:11.333
a really good way of defining our own
iterators and any object that we want.

43
00:03:11.333 --> 00:03:14.719
And if I could do a yield 1, 2, and 3,

44
00:03:14.719 --> 00:03:19.825
then I could also imagine, for
example, having a for loop.

45
00:03:19.825 --> 00:03:24.515
And having a yield keyword inside of a for
loop, and then yielding out values for

46
00:03:24.515 --> 00:03:26.133
each iteration of my loop.

47
00:03:26.133 --> 00:03:31.669
And that's how we'll actually define
our iterator for our obj object.

48
00:03:31.669 --> 00:03:36.628
Line 5, you'll notice that I have
this star here that indicates that

49
00:03:36.628 --> 00:03:40.174
this function is going to
be that generator type.

50
00:03:40.174 --> 00:03:43.871
I'm putting it at that special
location symbol.iterator, and

51
00:03:43.871 --> 00:03:47.375
it's just a concise method it
doesn't take any inputs here.

52
00:03:47.375 --> 00:03:51.875
Its behavior by default is to
iterate over all the keys.

53
00:03:51.875 --> 00:03:56.421
And by the way, I'm using a for-of
loop inside of my iterator.

54
00:03:56.421 --> 00:03:57.555
Why does that work?

55
00:03:57.555 --> 00:04:04.212
Because object.keys returns me an array,
and arrays are iterables.

56
00:04:04.212 --> 00:04:09.917
So here I'm gonna loop over all of
the elements in the array, being keys,

57
00:04:09.917 --> 00:04:16.083
and then I'm simply going to yield out
this [key], which would be the value,

58
00:04:16.083 --> 00:04:20.988
so it would be the value 1 and
then the value 2 and the value 3.

59
00:04:20.988 --> 00:04:25.969
And the generator takes care of all of
that plumbing about making iterators that

60
00:04:25.969 --> 00:04:30.949
have next methods that can be called,
and preparing the iterator results, and

61
00:04:30.949 --> 00:04:35.580
all of that and all I need to focus on
in this code is what value to yield out.

62
00:04:35.580 --> 00:04:39.787
That's what makes this
a more declarative approach,

63
00:04:39.787 --> 00:04:42.627
is that I simply yield out my values.

64
00:04:42.627 --> 00:04:47.500
Here, I decided to make my iterator,
in other words, the iteration over obj is

65
00:04:47.500 --> 00:04:51.746
that you don't care about the keys,
you only care about the values.

66
00:04:51.746 --> 00:04:56.082
But imagine what would happen if
instead of saying yield this of key,

67
00:04:56.082 --> 00:04:58.488
what would happen if I said yield key?

68
00:04:59.807 --> 00:05:04.030
&gt;&gt; Kyle Simpson: Well, now the iteration
would be seeing quote a, quote b, and

69
00:05:04.030 --> 00:05:04.676
quote c.

70
00:05:04.676 --> 00:05:09.780
So there are multiple kinds of
iterations that might be useful.

71
00:05:09.780 --> 00:05:13.081
Iterating over an object's
values would be useful.

72
00:05:13.081 --> 00:05:16.647
Iterating over its keys would be useful.

73
00:05:16.647 --> 00:05:23.188
And by the way it turns out we have
object.keys and we have object.values and

74
00:05:23.188 --> 00:05:27.929
they produce an iteration
over the keys and the values.

75
00:05:27.929 --> 00:05:31.073
But what about something
that combine both of them?

76
00:05:31.073 --> 00:05:36.373
What if I wanted to get both the key and
the value?

77
00:05:36.373 --> 00:05:40.672
Well then,
I could define something called entries.

78
00:05:40.672 --> 00:05:44.780
An entry is a tuple, and
a tuple is just a two-element array, and

79
00:05:44.780 --> 00:05:48.084
that's a fancy way of
saying a two-element array.

80
00:05:48.084 --> 00:05:51.649
A tuple where the first element
in the tuple is the key,

81
00:05:51.649 --> 00:05:54.062
and the second element is the value.

82
00:05:54.062 --> 00:05:55.871
So what would I do on line 7?

83
00:05:55.871 --> 00:06:00.170
I would return square bracket array and

84
00:06:00.170 --> 00:06:04.214
I'd return key comma, this of key.

85
00:06:04.214 --> 00:06:07.481
And then someone would be able
to receive both the keys and

86
00:06:07.481 --> 00:06:10.489
the values as they iterated
over my data structure.

87
00:06:14.262 --> 00:06:18.388
&gt;&gt; Kyle Simpson: So we have object.values
to iterate over an object's values that

88
00:06:18.388 --> 00:06:23.705
you don't have to define your own anymore,
you can just use that built-in utility.

89
00:06:23.705 --> 00:06:28.094
We have object.keys, which actually,
we've had since ES5, and

90
00:06:28.094 --> 00:06:30.523
that gives us an array of all the keys.

91
00:06:30.523 --> 00:06:38.046
And now we have object.entries, which
gives us an array of all those tuples.

92
00:06:38.046 --> 00:06:42.989
So if that's the built-in way of
doing that then all you have to do is

93
00:06:42.989 --> 00:06:47.787
on your data structures define
those three iterators yourself.

94
00:06:47.787 --> 00:06:51.990
Iterate over your values, iterate over
your keys, and iterate over your entries.

95
00:06:51.990 --> 00:06:56.015
You don't have to but
it's a good idea to make it as easy for

96
00:06:56.015 --> 00:06:59.726
someone to consume your
data structure as possible.

97
00:07:01.054 --> 00:07:04.996
&gt;&gt; Kyle Simpson: If I then wanted to
do something like dot dot dot, and

98
00:07:04.996 --> 00:07:09.834
not get the default, because if
you do dot dot dot over an array,

99
00:07:09.834 --> 00:07:13.882
the default is to essentially
give you array values.

100
00:07:13.882 --> 00:07:17.900
But If I wanted to be able
to do dot dot dot and

101
00:07:17.900 --> 00:07:23.372
get an iteration over its indexes,
then instead of saying

102
00:07:23.372 --> 00:07:28.747
dot dot dot array,
I could say dot dot dot array dot keys.

103
00:07:28.747 --> 00:07:35.362
Or I could say dot dot dot array dot
values or dot dot dot array dot entries,

104
00:07:35.362 --> 00:07:41.033
or a for-of loop over the dot values,
dot entries or dot keys.

105
00:07:41.033 --> 00:07:42.644
All of those would be standard ways.

106
00:07:42.644 --> 00:07:47.107
So when you make your own data structures,
it's a good idea not only to define your

107
00:07:47.107 --> 00:07:51.776
default iterator, like we have here on
line 5, you're making a default iterator.

108
00:07:51.776 --> 00:07:55.761
But also go ahead expose any other
way that would be useful for

109
00:07:55.761 --> 00:07:58.900
somebody to iterate over
your data structure.

110
00:08:02.899 --> 00:08:03.583
&gt;&gt; Student: I have a question.
&gt;&gt; Kyle Simpson: Yeah.

111
00:08:03.583 --> 00:08:07.161
&gt;&gt; Student: Can you mutate your
iterable in a for-of loop or

112
00:08:07.161 --> 00:08:12.718
are you gonna find yourself in a world
of pain, or be prevented from that?

113
00:08:12.718 --> 00:08:15.346
Like if I wanted to remove
something in the middle and

114
00:08:15.346 --> 00:08:18.286
I want to do it in a for-of loop
how much is that gonna hurt?

115
00:08:18.286 --> 00:08:19.820
&gt;&gt; Kyle Simpson: That's
an interesting question.

116
00:08:19.820 --> 00:08:26.425
So the standard answer to that is that the
built in iterators that JavaScript has,

117
00:08:26.425 --> 00:08:32.074
the standardized iterator protocol,
is that they essentially act as

118
00:08:32.074 --> 00:08:37.552
if they are iterating over a snapshot
of the thing at the beginning.

119
00:08:37.552 --> 00:08:42.414
So you're not seeing that implementation
detail here where I would've captured

120
00:08:42.414 --> 00:08:46.429
the list of keys at the beginning and
then captured all its values and

121
00:08:46.429 --> 00:08:47.777
then looped them out.

122
00:08:47.777 --> 00:08:50.511
The built in ones behave
as if that is the case.

123
00:08:50.511 --> 00:08:53.975
And here if you were to mutate
it you would actually be

124
00:08:53.975 --> 00:08:56.428
affecting the iteration as it went.

125
00:08:56.428 --> 00:09:01.916
So you can do that but
it can create some very weird results.

126
00:09:01.916 --> 00:09:03.297
Not for you as much as for

127
00:09:03.297 --> 00:09:07.170
the consumer of your system where
they iterate something out, and

128
00:09:07.170 --> 00:09:11.545
they are like wait what happened to
this value, or why did I get this value?

129
00:09:11.545 --> 00:09:17.942
So it's a good idea to consider not doing
mutation in line with your iteration.

130
00:09:17.942 --> 00:09:20.371
&gt;&gt; Student: I ask cuz some languages will
prevent you from it, so [LAUGH] yeah.

131
00:09:20.371 --> 00:09:24.224
&gt;&gt; Kyle Simpson: Yeah, well, JavaScript's
not gonna stop you from doing so, but it's

132
00:09:24.224 --> 00:09:28.708
basically modeling how you probably ought
to do it, which is capture your context,

133
00:09:28.708 --> 00:09:31.633
or your snapshot, if you will,
at iterate over that.

134
00:09:31.633 --> 00:09:34.724
Don't make mutations in line with it.

135
00:09:36.900 --> 00:09:40.982
&gt;&gt; Student2: Could you abstract that
generator out of the object and

136
00:09:40.982 --> 00:09:45.253
refer to it in the object in
that last space of the object?

137
00:09:47.679 --> 00:09:49.326
&gt;&gt; Student: Something going
on the generate side.

138
00:09:49.326 --> 00:09:52.028
[LAUGH]
&gt;&gt; Kyle Simpson: So I think that question

139
00:09:52.028 --> 00:09:57.174
is saying, do I have to list the generator
as an in line concise method

140
00:09:57.174 --> 00:10:01.898
in the object literal, or
can that be defined somewhere else?

141
00:10:01.898 --> 00:10:06.743
And the answer you can point a property,
like symbol.iterator,

142
00:10:06.743 --> 00:10:12.124
at an existing function reference
that exists externally to the object.

143
00:10:12.124 --> 00:10:16.949
It is much more common to define
the iterator directly on the object.

144
00:10:16.949 --> 00:10:20.111
But if that doesn't make
sense in your scenario,

145
00:10:20.111 --> 00:10:24.630
or maybe you're gonna put that iterator
on the prototype of some object

146
00:10:24.630 --> 00:10:27.509
in your object chain or
something like that.

147
00:10:27.509 --> 00:10:32.084
It doesn't physically have to actually
be added to the object literal,

148
00:10:32.084 --> 00:10:37.117
just has to be accessible to that object
when somebody tries to iterate over it.

149
00:10:37.117 --> 00:10:41.247
Because the dot-dot-dot operator and
the for-of operator, they're sort of dumb,

150
00:10:41.247 --> 00:10:44.090
they're basically just gonna say,
do you have access to a,

151
00:10:44.090 --> 00:10:46.630
can you give me something
at this property location?

152
00:10:46.630 --> 00:10:49.192
And if at that moment they do,
great, and if not,

153
00:10:49.192 --> 00:10:52.310
then they're not gonna be able
to iterate over your object.

154
00:10:59.708 --> 00:11:03.897
&gt;&gt; Kyle Simpson: Other questions
about iterators and generators?

