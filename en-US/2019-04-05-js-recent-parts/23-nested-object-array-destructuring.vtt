WEBVTT

1
00:00:01.190 --> 00:00:04.309
&gt;&gt; Kyle Simpson: There's one other thing I
wanna show you about object destructuring.

2
00:00:04.309 --> 00:00:09.938
It's kind of one of my favorite
little nuanced quirks about it,

3
00:00:09.938 --> 00:00:13.169
which is with array destructuring,

4
00:00:13.169 --> 00:00:17.966
when we use the position to
indicate the source it means

5
00:00:17.966 --> 00:00:22.785
we could only basically
destructure a position once.

6
00:00:22.785 --> 00:00:26.207
Cuz there's no other way
to say I'm getting it from

7
00:00:26.207 --> 00:00:31.062
that position multiple times, but
when we're dealing with an object,

8
00:00:31.062 --> 00:00:33.782
we can actually list it multiple times.

9
00:00:33.782 --> 00:00:40.896
So if I had an object that had an a,

10
00:00:40.896 --> 00:00:46.232
a b, and c and I were gonna

11
00:00:46.232 --> 00:00:51.571
destructure that object

12
00:00:51.571 --> 00:00:56.670
somewhere like a,b c.

13
00:00:56.670 --> 00:01:01.464
What if I wanted to do to
destructure the b property

14
00:01:01.464 --> 00:01:06.383
multiple times and
target it to different places?

15
00:01:06.383 --> 00:01:11.424
Well here, I'm saying, essentially,

16
00:01:11.424 --> 00:01:15.174
b:b but I can also say, b:w.

17
00:01:15.174 --> 00:01:20.185
I can list the same source property
as many times as I need to,

18
00:01:20.185 --> 00:01:23.342
and target it to different location.

19
00:01:23.342 --> 00:01:28.241
And this is particularly useful when b is

20
00:01:28.241 --> 00:01:32.131
a sub thing like a sub-object,

21
00:01:32.131 --> 00:01:37.317
because here I can get
b the whole object and

22
00:01:37.317 --> 00:01:44.394
here I can destructure down in to b and
get it's contents.

23
00:01:46.427 --> 00:01:50.988
&gt;&gt; Kyle Simpson: So now I'm getting
both the object that includes x2 and

24
00:01:50.988 --> 00:01:55.560
I am assigning x to a variable
called w with the value 2.

25
00:01:57.974 --> 00:02:01.144
&gt;&gt; Kyle Simpson: You can list these 2,
3, 4 times,

26
00:02:01.144 --> 00:02:04.028
you can list them in either order.

27
00:02:04.028 --> 00:02:09.084
I have on a number of occasions
taken advantage of being able to

28
00:02:09.084 --> 00:02:14.935
get access to both the object and
to destructure it in the same pattern.

29
00:02:14.935 --> 00:02:21.450
Of course, if we can nest objects
patterns inside of other object patterns,

30
00:02:21.450 --> 00:02:25.771
we can also nest arrays
inside of object patterns.

31
00:02:25.771 --> 00:02:31.129
So if this was an array and
we wanted to destructure the array,

32
00:02:31.129 --> 00:02:36.604
instead of having an object pattern here,
what would we have?

33
00:02:39.106 --> 00:02:46.024
&gt;&gt; Kyle Simpson: An array
pattern where we send] w and y.

34
00:02:46.024 --> 00:02:53.370
So w here is gonna be the value 500 and
y here is gonna be the value 5,000.

35
00:02:53.370 --> 00:02:56.466
So I can have an array pattern
inside of an object pattern.

36
00:02:56.466 --> 00:02:59.369
I can have an object pattern
inside of an array pattern.

37
00:02:59.369 --> 00:03:04.493
I can have objects inside of objects
inside of arrays inside of objects,

38
00:03:04.493 --> 00:03:07.017
any mixture there is appropriate.

39
00:03:07.017 --> 00:03:11.189
Don't forget your defaults,
which I always seem to forget.

40
00:03:11.189 --> 00:03:13.424
&gt;&gt; Speaker 2: Is this called aliasing,
or what is it called?

41
00:03:13.424 --> 00:03:17.670
When you're naming something
that you're pulling out.

42
00:03:17.670 --> 00:03:19.014
&gt;&gt; Kyle Simpson: I would call that,

43
00:03:19.014 --> 00:03:23.383
not aliasing, I would maybe
call it a double destructuring.

44
00:03:23.383 --> 00:03:26.430
But it doesn't have an official name,
as far as I'm aware.

