WEBVTT

1
00:00:00.061 --> 00:00:05.006
&gt;&gt; Kyle Simpson: Okay, this destructuring
pattern that we've been talking about has

2
00:00:05.006 --> 00:00:09.295
on the left hand side been var
declarations as we went along.

3
00:00:09.295 --> 00:00:12.333
But if we've had already
declared those variables,

4
00:00:12.333 --> 00:00:16.198
if I had already said,
&gt;&gt; Kyle Simpson: That those

5
00:00:16.198 --> 00:00:17.584
variables existed,

6
00:00:17.584 --> 00:00:22.830
then I could have done those assignments
without any var declarations, right?

7
00:00:22.830 --> 00:00:27.163
As a matter of fact, what we're getting
at here is that the assignments aren't

8
00:00:27.163 --> 00:00:29.298
inherently related to declarations,

9
00:00:29.298 --> 00:00:33.780
that's just the convenience that you can
do assignment along with declaration.

10
00:00:33.780 --> 00:00:38.504
The same is true of destructuring,
we could have defined these variables

11
00:00:38.504 --> 00:00:43.470
first ahead of time and then done
a destructuring separate of a declaration.

12
00:00:43.470 --> 00:00:47.920
So we could have said var first,
second, third, and fourth.

13
00:00:47.920 --> 00:00:52.632
And then we could have just
done a destructuring without

14
00:00:52.632 --> 00:00:54.743
any var statement on it.

15
00:00:54.743 --> 00:00:58.927
Destructuring is actually
about the assignments,

16
00:00:58.927 --> 00:01:01.690
it's not about the declaration.

17
00:01:13.891 --> 00:01:17.152
&gt;&gt; Kyle Simpson: Of course, if we're gonna
assign them to variables that already

18
00:01:17.152 --> 00:01:20.370
exist, we could also assign them
to entirely other locations.

19
00:01:20.370 --> 00:01:23.524
Anything that would be
valid to assign it to,

20
00:01:23.524 --> 00:01:27.840
in spec speak that's called
a valid left-hand side target.

21
00:01:27.840 --> 00:01:32.300
Any place that we could assign
it to validly would be okay.

22
00:01:32.300 --> 00:01:39.777
So we could have an o object here,
var o = object.

23
00:01:39.777 --> 00:01:44.463
And then I could say o.first and
o.second and

24
00:01:44.463 --> 00:01:47.954
o.third and o.fourth, right?

25
00:01:49.880 --> 00:01:52.076
&gt;&gt; Kyle Simpson: I could do
the exact same thing on this side.

26
00:01:52.076 --> 00:01:57.499
I could have had an o object and
I could have said o.first and

27
00:01:57.499 --> 00:02:01.200
o.second and o.third and o.fourth.

28
00:02:10.381 --> 00:02:13.239
&gt;&gt; Kyle Simpson: Of course,
it could have targeted not an object but

29
00:02:13.239 --> 00:02:14.909
another array if I wanted to.

30
00:02:14.909 --> 00:02:20.544
So I wouldn't have said o.first,
I would have said something like o(3).

31
00:02:20.544 --> 00:02:24.357
If o was an array,

32
00:02:24.357 --> 00:02:29.188
then we could have said

33
00:02:29.188 --> 00:02:34.784
o[3] and o [10] and

34
00:02:34.784 --> 00:02:41.155
o[42] and o[100].

35
00:02:41.155 --> 00:02:44.264
And the exact same thing
would be true over here.

36
00:02:44.264 --> 00:02:48.521
We could have an array and
then have these references.

37
00:03:13.613 --> 00:03:18.109
&gt;&gt; Kyle Simpson: I suppose this would
be technically more equivalent.

38
00:03:28.532 --> 00:03:33.817
&gt;&gt; Kyle Simpson: So in other words, array
destructuring is just the assignment part,

39
00:03:33.817 --> 00:03:35.886
not the declaration part.

40
00:03:35.886 --> 00:03:40.901
And anything that we could validly
assign to, it's okay to show up in

41
00:03:40.901 --> 00:03:46.361
the imperative forum, it's also okay
to show up in the declarative form.

42
00:03:46.361 --> 00:03:51.918
What would have happened if I had
done something like var o[3]?

43
00:03:58.133 --> 00:03:59.665
&gt;&gt; Kyle Simpson: It's a little
bit of a trick question,

44
00:03:59.665 --> 00:04:01.113
that would've been a syntax error.

45
00:04:01.113 --> 00:04:04.755
That's not valid to show up on
the left-hand side of an equals, I mean,

46
00:04:04.755 --> 00:04:07.043
it is valid to show up
in left-hand segment.

47
00:04:07.043 --> 00:04:09.871
It's not valid to show
up in a declaration.

48
00:04:09.871 --> 00:04:12.962
That's not a valid identifier
that you would declare.

49
00:04:12.962 --> 00:04:16.419
So if it's not a valid thing
that you would declare,

50
00:04:16.419 --> 00:04:21.461
it's also not valid to do the declaration
with your destructuring syntax.

51
00:04:21.461 --> 00:04:26.699
And you see there that my
SyntaxHighlighter is telling me,

52
00:04:26.699 --> 00:04:31.845
something's wrong here,
that's not syntactically valid.

53
00:04:34.078 --> 00:04:37.972
&gt;&gt; Speaker 2: Yeah,
on line 11 on the right-hand side,

54
00:04:37.972 --> 00:04:44.836
that would just put if there were five or
six other items into the gather syntax,

55
00:04:44.836 --> 00:04:50.174
that would just put an array
with those items at index 100.

56
00:04:50.174 --> 00:04:54.958
&gt;&gt; Kyle Simpson: Yeah, it's not
flattening get out into the array,

57
00:04:54.958 --> 00:04:58.991
it just adding that
array at that position.

58
00:05:00.689 --> 00:05:01.531
&gt;&gt; Kyle Simpson: All right,

59
00:05:01.531 --> 00:05:06.090
I said that we could actually put
the assignment on either side.

60
00:05:06.090 --> 00:05:11.693
So in the same way that
I could say temp = data,

61
00:05:11.693 --> 00:05:18.745
and then break it down,
if I wanted to have the break down.

62
00:05:20.676 --> 00:05:23.934
&gt;&gt; Kyle Simpson: So
if I wanted to assign the o,

63
00:05:31.374 --> 00:05:33.618
&gt;&gt; Kyle Simpson: And I wanted to have

64
00:05:33.618 --> 00:05:40.357
temp, then I could say temp = this and
that equals data.

65
00:05:40.357 --> 00:05:45.472
Now here's where people are gonna
often get confused is because

66
00:05:45.472 --> 00:05:51.531
if this was a subset, like if I left
those out, people might get confused and

67
00:05:51.531 --> 00:05:55.905
think that temp is not gonna
point at the entire array.

68
00:05:55.905 --> 00:06:01.450
And I think that temp is only gonna point
at the subset that we see in the pattern.

69
00:06:01.450 --> 00:06:06.404
But you have to understand that the way
assignment expressions work is that

70
00:06:06.404 --> 00:06:11.750
an assignment expression, whatever it is,
if it's x equals three, the result

71
00:06:11.750 --> 00:06:17.197
of the assignment expression is the entire
value that was subject to assignment.

72
00:06:17.197 --> 00:06:23.648
So the result of this assignment
expression is the entire array 1, 2,

73
00:06:23.648 --> 00:06:29.062
3, regardless of how much or
little of it was assigned off.

74
00:06:29.062 --> 00:06:32.937
It's the whole thing that
was subject to assignment,

75
00:06:32.937 --> 00:06:38.261
which is why then that temp ends up
pointing at the whole array 1, 2, 3.

76
00:06:38.261 --> 00:06:42.107
I would say I more typically will put,
if I need to capture and

77
00:06:42.107 --> 00:06:46.723
also destructure I will more typically
put it in this particular order.

78
00:06:46.723 --> 00:06:50.083
Meaning that I put the temp there,
but there is a little caveat and

79
00:06:50.083 --> 00:06:52.771
we'll see that when we
talk object destructuring,

80
00:06:52.771 --> 00:06:55.660
where it can be convenient to
do it the other way around.

