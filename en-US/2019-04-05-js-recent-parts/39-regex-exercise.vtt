WEBVTT

1
00:00:00.000 --> 00:00:03.144
&gt;&gt; Kyle Simpson: All right, so we've
talked about a variety of improvements

2
00:00:03.144 --> 00:00:05.744
that recently landed
with regular expressions.

3
00:00:05.744 --> 00:00:09.212
So it seems like a great idea for
us to try an exercise, and

4
00:00:09.212 --> 00:00:11.398
practice with each of those three.

5
00:00:11.398 --> 00:00:15.309
In fact, we're gonna go ahead and
pull in a feature from one of our previous

6
00:00:15.309 --> 00:00:17.743
exercises and
previous units of discussion.

7
00:00:17.743 --> 00:00:19.910
We're also gonna use generators.

8
00:00:19.910 --> 00:00:22.369
So you can get more
practice with generators.

9
00:00:22.369 --> 00:00:25.628
All right, so here's the exercise
that you're gonna be doing.

10
00:00:25.628 --> 00:00:29.767
I've given you a poem here that's
split out into these separate lines.

11
00:00:29.767 --> 00:00:32.890
This is The Power of
a Smile by Tupac Shakur.

12
00:00:32.890 --> 00:00:36.941
I've given you this poem, and
what you're going to do with this for

13
00:00:36.941 --> 00:00:38.374
loop that you see here.

14
00:00:38.374 --> 00:00:42.392
This for loop should be printing
out the following messages.

15
00:00:42.392 --> 00:00:47.076
It should be printing out, if you notice
the form of this poem is that there's

16
00:00:47.076 --> 00:00:51.400
a thing, and then the thing that it
can do, and then another thing, and

17
00:00:51.400 --> 00:00:52.938
the thing that it can do.

18
00:00:52.938 --> 00:00:57.786
So you're going to be using
a regular expression to

19
00:00:57.786 --> 00:01:02.521
parse those tuples of values
out of this poem, and

20
00:01:02.521 --> 00:01:07.725
return those as values from
this iterable generator.

21
00:01:07.725 --> 00:01:12.702
So in other words, you're going to make
a powers generator that is going to

22
00:01:12.702 --> 00:01:16.099
use a regular expression
to iterate over this, and

23
00:01:16.099 --> 00:01:20.839
every time it finds a match, it's
going to send that out as a string, so

24
00:01:20.839 --> 00:01:24.636
that this console.log is
printing those messages out.

25
00:01:24.636 --> 00:01:28.230
At the bottom, there's several hints
that will be very useful to you.

26
00:01:28.230 --> 00:01:33.131
Number one, you're going to be setting up
powers as a generator, which refer back

27
00:01:33.131 --> 00:01:37.839
to the iterators and generators exercise,
if you need some refresher on that.

28
00:01:37.839 --> 00:01:41.942
Your iterator,
your generator is going to be looping, but

29
00:01:41.942 --> 00:01:46.864
the loop that it's going to be doing
is essentially a while loop that's

30
00:01:46.864 --> 00:01:49.754
executing a global regular expression.

31
00:01:49.754 --> 00:01:51.858
So I've given you this pattern here,

32
00:01:51.858 --> 00:01:56.605
that if you have a regular expression that
you define, which, that will be up to you.

33
00:01:56.605 --> 00:02:01.131
If you call .exec on it with a string,
it will give you the next match, and

34
00:02:01.131 --> 00:02:05.073
then it will keep giving you
the next match, and the next match,

35
00:02:05.073 --> 00:02:08.446
until it doesn't find anymore
matches in the string.

36
00:02:08.446 --> 00:02:12.569
So it's a way to step through
the matches one at a time, and

37
00:02:12.569 --> 00:02:16.794
that's a feature of global
flagged regular expressions.

38
00:02:16.794 --> 00:02:20.154
You'll also notice here that you're
going to need the .all modes, so

39
00:02:20.154 --> 00:02:23.406
I've already solved part of it for
you, in the regular expression.

40
00:02:23.406 --> 00:02:28.760
You're gonna use the .all mode to be able
to make those matches across the lines.

41
00:02:28.760 --> 00:02:34.430
There are a couple of, there is at least
one place where the match has to span

42
00:02:34.430 --> 00:02:40.385
across a line, where we have the power,
and then we have heal on a second line.

43
00:02:40.385 --> 00:02:44.032
Or I'm sorry, the smile and
then heal on the next line.

44
00:02:44.032 --> 00:02:48.515
So your objective here is to use all three
of the regular expression features that we

45
00:02:48.515 --> 00:02:49.612
just talked about.

46
00:02:49.612 --> 00:02:54.348
Recall that we have look behind
assertions, both positive and negative.

47
00:02:54.348 --> 00:02:59.691
So if you're matching something like
a noun, you need to make some sort

48
00:02:59.691 --> 00:03:05.139
of assertion that it comes immediately
after something, for example.

49
00:03:05.139 --> 00:03:08.821
Like, for example, the word power of,
the phrase power of.

50
00:03:08.821 --> 00:03:12.852
So you're gonna need to use some look
behind assertions to make sure that your

51
00:03:12.852 --> 00:03:15.342
regular expression is
finding the right word.

52
00:03:15.342 --> 00:03:18.754
And then you're also gonna be
capturing some values out, and

53
00:03:18.754 --> 00:03:20.789
you wanna use named capture groups so

54
00:03:20.789 --> 00:03:24.741
that it's easier to tell which thing
you're pulling out of the match.

55
00:03:24.741 --> 00:03:26.498
And then you're using, again,

56
00:03:26.498 --> 00:03:30.347
the .all mode so that you can make
those matches across those new lines.

57
00:03:30.347 --> 00:03:32.655
So that is your exercise.

58
00:03:32.655 --> 00:03:34.337
It will be a little bit challenging,

59
00:03:34.337 --> 00:03:37.442
especially if you haven't done as
much with regular expressions.

60
00:03:37.442 --> 00:03:39.674
If you need to get a little bit of a hint,

61
00:03:39.674 --> 00:03:44.510
feel free to take a look at the solution
file, the ex.fixed file that's included.

62
00:03:44.510 --> 00:03:47.760
We will break for probably about ten
minutes on this one, since it's a little

63
00:03:47.760 --> 00:03:51.270
more challenging to wrap your head around,
and then we'll come back and talk about

