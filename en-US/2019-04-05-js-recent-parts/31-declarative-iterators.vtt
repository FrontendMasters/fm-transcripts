WEBVTT

1
00:00:00.000 --> 00:00:04.024
&gt;&gt; Kyle Simpson: If you wanted to
iterate over a string programmatically,

2
00:00:04.024 --> 00:00:07.882
like automatically in some
sort of looping construct,

3
00:00:07.882 --> 00:00:11.182
instead of calling .next over and
over again.

4
00:00:11.182 --> 00:00:14.191
You could come up with
a looping construct like this.

5
00:00:14.191 --> 00:00:19.410
Which makes an iterator, and
then calls .next on it, saves the result.

6
00:00:19.410 --> 00:00:25.362
If the result is not done true, then grab
the results value out and then use it.

7
00:00:25.362 --> 00:00:28.042
And that certainly works, but
I think we can all agree,

8
00:00:28.042 --> 00:00:29.935
nobody wants to write loops like that.

9
00:00:29.935 --> 00:00:35.128
And so this is a perfect example of
where we should have declarative syntax

10
00:00:35.128 --> 00:00:40.335
in place of a very imperative and
hard to understand approach to the code.

11
00:00:40.335 --> 00:00:44.634
And so in ES6, we added,
instead of that kind of construct,

12
00:00:44.634 --> 00:00:49.613
to consume an iterator, you can now
use what's called the for of loop.

13
00:00:49.613 --> 00:00:56.443
That is distinct from the for in loop and
the regular for numeric iterator loop.

14
00:00:56.443 --> 00:01:03.995
The for of loop takes iterables,
meaning things that can be iterated over.

15
00:01:03.995 --> 00:01:09.603
And it iterates over them, and gives you
the iterated value for each iteration.

16
00:01:09.603 --> 00:01:12.841
So notice that I'm making,
manually, my own iterator,

17
00:01:12.841 --> 00:01:15.892
by calling that special
Symbol.iterator location.

18
00:01:15.892 --> 00:01:18.928
I'm making an iterator
instance here called IT.

19
00:01:18.928 --> 00:01:22.542
And I can iterate over an iterator,

20
00:01:22.542 --> 00:01:28.819
because an iterator is an iterable,
it just returns itself.

21
00:01:28.819 --> 00:01:35.037
But also, line 9, I can just say for
of with the iterable itself, the string.

22
00:01:35.037 --> 00:01:36.856
I can do it in either way.

23
00:01:36.856 --> 00:01:40.425
One advantage of making
your own iterator is that,

24
00:01:40.425 --> 00:01:43.828
if that was a function that
you wanted to call, or

25
00:01:43.828 --> 00:01:48.891
call it from a different location, or
pass some sort of arguments to it,

26
00:01:48.891 --> 00:01:52.961
you can make your own iterator,
and then iterate over it.

27
00:01:52.961 --> 00:01:57.633
But if you're just gonna use the basic,
built-in default ones,

28
00:01:57.633 --> 00:02:02.815
line 9 shows you, just do a for
of loop directly over the iterable value.

29
00:02:02.815 --> 00:02:08.370
So as I said, most of the built-in data
structures that you're familiar with,

30
00:02:08.370 --> 00:02:12.289
strings, arrays, sets, and
maps, and typed arrays,

31
00:02:12.289 --> 00:02:17.454
all of these are iterables, which means
you can use the for of loop on them.

32
00:02:17.454 --> 00:02:21.595
You can also use another syntax for
iterating over them.

33
00:02:21.595 --> 00:02:24.394
Which is the dot dot dot operator.

34
00:02:24.394 --> 00:02:28.930
This is the so-called
spread operator from ES6,

35
00:02:28.930 --> 00:02:33.469
and the dot dot dot operator
consumes an iterator.

36
00:02:33.469 --> 00:02:36.828
So here, string bean iterator on line 3.

37
00:02:36.828 --> 00:02:41.685
The dot dot dot operator says, I'm gonna
go get all of those values one at a time

38
00:02:41.685 --> 00:02:46.247
from the thing, and iterate them out,
and here I'm spreading it out, or

39
00:02:46.247 --> 00:02:49.723
iterating it out,
into the enclosing array, line 3.

40
00:02:49.723 --> 00:02:54.668
And that has, in this case, the effect of
separating a string out into an array of

41
00:02:54.668 --> 00:02:59.282
its characters
&gt;&gt; Kyle Simpson: So dot dot dot and for

42
00:02:59.282 --> 00:03:03.995
of are both syntactic support for
the iterator protocol,

43
00:03:03.995 --> 00:03:09.112
which is now a first-class
built-in citizen in JavaScript.

44
00:03:09.112 --> 00:03:12.579
Now, why this matters is not just
because you're gonna iterate over

45
00:03:12.579 --> 00:03:16.356
characters of a string, which you,
quite frankly, probably won't do.

46
00:03:16.356 --> 00:03:21.220
But why it matters that it's
now a first-class protocol,

47
00:03:21.220 --> 00:03:25.499
is that that means your own
custom data structures,

48
00:03:25.499 --> 00:03:28.822
if you adhere to the iterator protocol.

49
00:03:28.822 --> 00:03:34.373
If you expose an iterator that adheres
to that protocol, then any user of

50
00:03:34.373 --> 00:03:40.743
your code can use these syntactic built-in
mechanisms with your data structure.

51
00:03:40.743 --> 00:03:45.657
So say you have a data structure that
is a map with various different objects

52
00:03:45.657 --> 00:03:48.237
in it that represent location points.

53
00:03:48.237 --> 00:03:53.595
And you wanna make that map iterable,
not map as in the sense of, like, a data

54
00:03:53.595 --> 00:03:59.051
structure map, but like a geographical
map thing, like a Google Maps thing.

55
00:03:59.051 --> 00:04:02.074
So you wanna make your
little custom map thing.

56
00:04:02.074 --> 00:04:05.882
The iterable, all you have to do
is expose an iterator on it that,

57
00:04:05.882 --> 00:04:09.991
when it calls .next, it returns
another one of those point objects.

58
00:04:09.991 --> 00:04:12.628
And then somebody can use a dot dot dot or
a for

59
00:04:12.628 --> 00:04:15.343
of loop to iterate over
your data structure.

60
00:04:15.343 --> 00:04:23.476
It creates a standardized way of
iterating through data sources.

