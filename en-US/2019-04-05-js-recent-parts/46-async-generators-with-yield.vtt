WEBVTT

1
00:00:00.130 --> 00:00:01.462
&gt;&gt; Kyle Simpson: All right, so

2
00:00:01.462 --> 00:00:06.555
async* await functions were
allowing us to implement the sync,

3
00:00:06.555 --> 00:00:12.240
async* pattern syntactically
which is a really good thing.

4
00:00:12.240 --> 00:00:16.360
It improves the coding style over
something like promise chains.

5
00:00:16.360 --> 00:00:20.770
Unfortunately there is a little
bit of a conceptual limitation.

6
00:00:20.770 --> 00:00:25.540
To the idea of an async* await function,
and that conceptual limitation is

7
00:00:25.540 --> 00:00:30.290
that the await keyword is
essentially a pull operation.

8
00:00:30.290 --> 00:00:36.340
I am pulling a value from a promise that
may resolve after some amount of time.

9
00:00:36.340 --> 00:00:41.700
Pulling is great, but pulling is only
half of what we often need to do.

10
00:00:41.700 --> 00:00:46.170
And we already saw another
example of the other half

11
00:00:46.170 --> 00:00:48.440
which is when we talked about generators.

12
00:00:48.440 --> 00:00:53.360
We talked about generators being able
to push things out, yield things out so

13
00:00:53.360 --> 00:00:56.450
that they can be consumed somewhere else.

14
00:00:56.450 --> 00:01:00.780
So what's conceptually missing here, is
that we really would like the ability to

15
00:01:00.780 --> 00:01:06.100
both pull and
push in the same kind of function.

16
00:01:07.420 --> 00:01:11.060
We don't want just the generator
where we can only push, or

17
00:01:11.060 --> 00:01:14.570
just in async* function
where we can only pull.

18
00:01:14.570 --> 00:01:18.820
What we really would like
is an async* generator.

19
00:01:18.820 --> 00:01:23.670
And it turns out in ES2018,
they added async* generators.

20
00:01:23.670 --> 00:01:25.970
This is a new function type, and

21
00:01:25.970 --> 00:01:29.070
they love to create new
function types in JavaScript.

22
00:01:29.070 --> 00:01:32.880
It's a new function type,
which is both an async* function and

23
00:01:32.880 --> 00:01:35.530
a generator in one thing.

24
00:01:35.530 --> 00:01:40.259
And you can use both the yield keyword and
the await keyword in the same function.

25
00:01:41.380 --> 00:01:43.330
The yield keyword for pushing.

26
00:01:43.330 --> 00:01:45.210
The await keyword for pulling.

27
00:01:45.210 --> 00:01:48.830
So let's take a look at
a motivating example for that.

28
00:01:48.830 --> 00:01:52.420
Here I have an async function,
and what I'm really trying to do

29
00:01:52.420 --> 00:01:57.690
is loop through a set of URLs and
fetch out those responses

30
00:01:57.690 --> 00:02:02.410
get the text asynchronously and
push it into an array.

31
00:02:02.410 --> 00:02:06.870
And I'm having to do it all at once
here because there's no way for

32
00:02:06.870 --> 00:02:13.100
me to pull from some ajax call and
then push out the result now.

33
00:02:13.100 --> 00:02:15.080
I have to collect them
all into an array and

34
00:02:15.080 --> 00:02:19.130
then do one single return
with all of my results.

35
00:02:19.130 --> 00:02:21.640
If there's only two or three,
that's not a big deal, but

36
00:02:21.640 --> 00:02:23.880
what if there were like 1,000 URLs?

37
00:02:23.880 --> 00:02:27.320
Why would I wait to get
all of those responses

38
00:02:27.320 --> 00:02:30.504
before returning one single array?

39
00:02:30.504 --> 00:02:35.200
Wouldn't it be nice if I could
sort of lazily push a response out

40
00:02:35.200 --> 00:02:39.650
every single time I got
a response from the ajax request.

41
00:02:40.680 --> 00:02:45.240
And if I can push it out then that means
that somebody else could be lazily

42
00:02:45.240 --> 00:02:48.270
consuming that as a data source.

43
00:02:48.270 --> 00:02:52.960
They could be saying hey just let me know
every time you get another response back

44
00:02:52.960 --> 00:02:57.050
just iterate me again using
the dot dot dot or the four over,

45
00:02:57.050 --> 00:02:58.560
something like that conceptually.

46
00:02:58.560 --> 00:03:04.520
Wouldn't it be nice if you could consume
asynchronously a data source like that.

47
00:03:04.520 --> 00:03:09.370
Well theoretically if we were to
switch this from an async* function

48
00:03:09.370 --> 00:03:14.560
into a generator then theoretically we
could actually support that because

49
00:03:14.560 --> 00:03:17.040
on line three when I call yield.

50
00:03:17.040 --> 00:03:19.870
Because there is a runner here
I'm yielding out a promise.

51
00:03:19.870 --> 00:03:24.090
So I'm using the yield
keyword as a pull mechanism.

52
00:03:24.090 --> 00:03:27.830
And then later when I use yield here,
I'm using yield,

53
00:03:27.830 --> 00:03:31.970
the same keyword but
I'm now using it as a push mechanism

54
00:03:31.970 --> 00:03:36.430
to push out a result to somebody
who might be consuming it.

55
00:03:36.430 --> 00:03:41.230
Now you could theoretically write a runner
that was smart enough that if you

56
00:03:41.230 --> 00:03:45.500
yield out a promise then it waits, and if

57
00:03:45.500 --> 00:03:49.850
you yield out a non-promise, then it sends
it out through an iterator interface.

58
00:03:49.850 --> 00:03:53.810
You could write something like that,
but can you just see that conceptually,

59
00:03:53.810 --> 00:03:55.960
this is bad programming?

60
00:03:55.960 --> 00:04:00.640
Or this is confusing programming, to
overload the meaning of the yield keyword

61
00:04:00.640 --> 00:04:03.980
to mean two entirely different,
opposite things?

62
00:04:03.980 --> 00:04:06.060
Pulling and pushing.

63
00:04:06.060 --> 00:04:08.120
It doesn't make sense.

64
00:04:08.120 --> 00:04:10.880
And it would be confusing
to manage this code and

65
00:04:10.880 --> 00:04:14.630
not be able to juggle, wait,
what is this yield keyword doing?

66
00:04:14.630 --> 00:04:16.220
Is it pulling or is it pushing?

67
00:04:17.390 --> 00:04:23.190
So that's the motivation for
why we want to have a function type

68
00:04:23.190 --> 00:04:27.960
that can both await, to pull things,
and yield, to push them.

69
00:04:29.540 --> 00:04:31.810
So that's where we get async generators.

70
00:04:31.810 --> 00:04:35.560
We have the async word on the front,
and then the star in there.

71
00:04:35.560 --> 00:04:40.580
So now we get both, it's like
the the child of the async* function and

72
00:04:40.580 --> 00:04:44.690
the generator, they got together and
now we have async* generators.

73
00:04:44.690 --> 00:04:49.650
And you'll notice now that I
can call a wait to listen for

74
00:04:49.650 --> 00:04:53.250
a pull of a promise, like an ajax call.

75
00:04:53.250 --> 00:04:55.810
And then I can use yield
to push out a value.

