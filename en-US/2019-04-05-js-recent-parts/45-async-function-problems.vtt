WEBVTT

1
00:00:00.000 --> 00:00:04.332
&gt;&gt; Kyle Simpson: All right, so that helps
address one of the shortcomings of async

2
00:00:04.332 --> 00:00:08.979
functions which is that if we nest
functions inside of them, we create

3
00:00:08.979 --> 00:00:14.136
barriers and we can't use it in a way in
a deeply nested function or whatever.

4
00:00:14.136 --> 00:00:17.757
That fixes one of the problems but
to be honest with you,

5
00:00:17.757 --> 00:00:21.840
there are some other problems that
I think need to be considered

6
00:00:21.840 --> 00:00:24.248
when we talk about async functions.

7
00:00:24.248 --> 00:00:27.578
And these issues taken
together as a whole,

8
00:00:27.578 --> 00:00:33.698
are one of the reasons I personally still
often use the generators with a runner,

9
00:00:33.698 --> 00:00:38.208
instead of using the normal
built in basic async function.

10
00:00:38.208 --> 00:00:41.514
So I want to talk to
you about a few issues,

11
00:00:41.514 --> 00:00:45.493
design issues if you will,
for a sync functions.

12
00:00:45.493 --> 00:00:47.654
Number one.

13
00:00:47.654 --> 00:00:49.382
The async function,

14
00:00:49.382 --> 00:00:54.764
the await keyword only knows what
to do with actual real promises.

15
00:00:54.764 --> 00:00:59.648
Which generally isn't that big of a deal
but there are other representations

16
00:00:59.648 --> 00:01:04.546
of future values that would be more
convenient sometimes to be able to await.

17
00:01:04.546 --> 00:01:07.355
For example,
it might be useful to be able to await.

18
00:01:07.355 --> 00:01:12.224
A custom promise that doesn't have
the same then function on it,

19
00:01:12.224 --> 00:01:16.030
it might be useful to await
a what's called a Func,

20
00:01:16.030 --> 00:01:20.121
which is a function
representation of a future value.

21
00:01:20.121 --> 00:01:23.347
The await keyword doesn't
offer us any options for

22
00:01:23.347 --> 00:01:25.756
that it's not extensible in any way.

23
00:01:25.756 --> 00:01:28.745
It only knows what to do
with thenables and promises.

24
00:01:28.745 --> 00:01:30.132
So it's a little bit more limited.

25
00:01:30.132 --> 00:01:33.174
That's not a huge deal, but
it is a little annoying.

26
00:01:33.174 --> 00:01:35.223
When you work with a generator, and

27
00:01:35.223 --> 00:01:39.867
you have your own gen runner, you have the
complete freedom to be able to yield and

28
00:01:39.867 --> 00:01:43.445
pause on any representation of
future value that you need to.

29
00:01:46.490 --> 00:01:51.004
&gt;&gt; Kyle Simpson: Number two,
this is an even more nuanced issue, but

30
00:01:51.004 --> 00:01:57.777
I think a big, big problem which is
the way that the specification implemented

31
00:01:57.777 --> 00:02:03.748
promises is that it implemented
what we call the micro-task queue.

32
00:02:03.748 --> 00:02:08.600
So to have a synchrony meaning I don't
want this thing to block right now but

33
00:02:08.600 --> 00:02:12.078
I want it to happen on the next
tick as many people say.

34
00:02:12.078 --> 00:02:16.443
But I don't want it to actually be
like subject to waiting on other event

35
00:02:16.443 --> 00:02:20.302
handlers, there's essentially
internal in the event loop,

36
00:02:20.302 --> 00:02:22.798
this thing called the micro task queue.

37
00:02:22.798 --> 00:02:26.464
And promises when ever they
need to resolve an asynchronous

38
00:02:26.464 --> 00:02:30.056
operation they actually don't
queue an event loop item,

39
00:02:30.056 --> 00:02:32.932
they queue something in
the micro task queue.

40
00:02:32.932 --> 00:02:37.269
And that means that they essentially
are cutting to the front of the line.

41
00:02:37.269 --> 00:02:40.071
So anything that's built
up waiting like any ajax or

42
00:02:40.071 --> 00:02:43.392
other events handlers that are all
waiting on the event loop.

43
00:02:43.392 --> 00:02:48.380
They don't get a chance to fire as long
as something keeps getting added to

44
00:02:48.380 --> 00:02:49.916
the micro task queue.

45
00:02:49.916 --> 00:02:54.844
The effect of this is that certain
programming patterns can either

46
00:02:54.844 --> 00:02:59.596
intentional or accidentally end
up creating an infinite loop,

47
00:02:59.596 --> 00:03:03.644
where a promise keeps adding
a new micro-task queue.

48
00:03:03.644 --> 00:03:06.292
And it keeps consuming that event loop and

49
00:03:06.292 --> 00:03:09.629
it never lets anything else
in the program resolve.

50
00:03:09.629 --> 00:03:13.911
And there's a term for
that in broader concurrency programming.

51
00:03:13.911 --> 00:03:16.185
That's called starvation.

52
00:03:16.185 --> 00:03:20.787
It's a big enough problem like
whole PhD theses have been done

53
00:03:20.787 --> 00:03:24.506
on people studying
the problems of starvation and

54
00:03:24.506 --> 00:03:29.038
algorithms to avoid starvation
within computer programs.

55
00:03:29.038 --> 00:03:32.195
Starvation creates a form
of denial of service,

56
00:03:32.195 --> 00:03:37.203
it creates a form of deadlock These
are big big problems in computer science.

57
00:03:37.203 --> 00:03:43.416
And I find it particularly troubling that
they naively implemented the scheduling

58
00:03:43.416 --> 00:03:49.020
algorithm for promises, that is
inherently susceptible to starvation.

59
00:03:49.020 --> 00:03:52.058
I didn't go looking for
this problem to try to expose it.

60
00:03:52.058 --> 00:03:57.386
I ran across this accidentally because I
was implementing a programming concurrency

61
00:03:57.386 --> 00:04:02.130
pattern called CSP which stands for
communicating sequential processes.

62
00:04:02.130 --> 00:04:07.498
I ran across this problem where I had
implemented CSP with a generator and

63
00:04:07.498 --> 00:04:11.990
then one of the things you do
in CSP that's a common pattern.

64
00:04:11.990 --> 00:04:15.187
It ended up producing that
infinite microtask loop,

65
00:04:15.187 --> 00:04:17.751
and it starved out
the rest of the program.

66
00:04:17.751 --> 00:04:21.220
And that's what led me down the rabbit
hole of, how did this even happen?

67
00:04:21.220 --> 00:04:27.428
And then I found out, this scheduling
algorithm is not preventing starvation.

68
00:04:27.428 --> 00:04:32.206
And so I went to the specification list I
brought this to the attention of several

69
00:04:32.206 --> 00:04:33.358
people on TC39.

70
00:04:33.358 --> 00:04:37.842
And I said, this is kind of a problem,
that we have this naive scheduling

71
00:04:37.842 --> 00:04:40.796
algorithm that is
susceptible to starvation.

72
00:04:40.796 --> 00:04:43.894
Here's the code that I did,
very innocently,

73
00:04:43.894 --> 00:04:47.155
not realizing that it
would expose this problem.

74
00:04:47.155 --> 00:04:52.327
And we went back and forth, and then they
basically just said this is probably not

75
00:04:52.327 --> 00:04:57.293
a big deal because you're the only
person that's ever complained about it.

76
00:04:57.293 --> 00:05:01.322
And then they just blew it off,
so what we have is promises and

77
00:05:01.322 --> 00:05:05.746
specifically the way they were
exposed inside of cancel, I mean,

78
00:05:05.746 --> 00:05:10.644
inside of asynch function is essentially
this ticking time bomb of people

79
00:05:10.644 --> 00:05:15.871
accidentally gonna create starvation and
not even know why it's happening.

80
00:05:15.871 --> 00:05:19.630
And it's because we didn't build
the algorithm to be robust to that.

81
00:05:19.630 --> 00:05:23.994
There are good solid strategies
that have been around for decades.

82
00:05:23.994 --> 00:05:28.370
And we just didn't employ any of those in
the definition of the microtask queue.

83
00:05:28.370 --> 00:05:32.065
So that is one of the things that I'm
frustrated about with the design of

84
00:05:32.065 --> 00:05:33.735
promises and async functions.

85
00:05:33.735 --> 00:05:38.329
I think they should have been more
defensive about that problem.

86
00:05:38.329 --> 00:05:41.656
But this third problem is really
the kind of dagger to the heart.

87
00:05:41.656 --> 00:05:46.441
It's really the one, you could ignore
these other two as being rather niche and

88
00:05:46.441 --> 00:05:49.813
nuance, but this third one I
think is a really big deal.

89
00:05:49.813 --> 00:05:50.788
And by the way,

90
00:05:50.788 --> 00:05:55.068
it's not that we waited until after
to know that this was a problem.

91
00:05:55.068 --> 00:05:59.730
Two and a half years before async
functions landed finally in the spec,

92
00:05:59.730 --> 00:06:05.090
I was raising noise about this on the spec
list saying This is a really bad problem,

93
00:06:05.090 --> 00:06:08.999
we need to fix this design
before you ship async functions.

94
00:06:08.999 --> 00:06:13.342
And there were several really
really long GitHub threads like

95
00:06:13.342 --> 00:06:18.021
hundreds of messages long where we
were all fighting about this and

96
00:06:18.021 --> 00:06:23.136
I kept saying listen we need to fix this,
don't ship them without this.

97
00:06:23.136 --> 00:06:27.367
And then they just ended up shipping
it without fixing this problem.

98
00:06:27.367 --> 00:06:32.564
So it's almost self-inflicted, because
we knew that this could be a problem.

99
00:06:32.564 --> 00:06:37.537
The problem I'm speaking about is that
async functions are essentially black

100
00:06:37.537 --> 00:06:42.219
boxes that once they start, it is
impossible to externally cancel them.

101
00:06:42.219 --> 00:06:44.999
You can't tell an a sync function,
once you invoke it,

102
00:06:44.999 --> 00:06:48.724
hey I know you're in the middle of doing
a bunch of downloading of stuff, or

103
00:06:48.724 --> 00:06:50.455
whatever, but I want you to stop.

104
00:06:50.455 --> 00:06:54.849
There's no way to tell it do that,
which means it's gonna continue to spin

105
00:06:54.849 --> 00:06:58.774
on the micro task queue, and
consume resources, until forever.

106
00:06:58.774 --> 00:07:01.855
Until it decides that it wants to stop,
if ever.

107
00:07:01.855 --> 00:07:04.984
So I'm particularly
troubled by cancellation,

108
00:07:04.984 --> 00:07:09.824
matter of fact I have a whole talk on
the topic of asynchronous cancellation,

109
00:07:09.824 --> 00:07:12.510
it's called cancel all my appointments.

110
00:07:12.510 --> 00:07:17.217
And if you check out online, you'll see
links on my social feeds to this talk.

111
00:07:17.217 --> 00:07:22.305
Because I actually believe that this
is such a big deal that all forms of

112
00:07:22.305 --> 00:07:27.665
asynchrony that we ever do should
have some mechanism for cancellation.

113
00:07:27.665 --> 00:07:31.553
And here, we have potentially
one of the most important

114
00:07:31.553 --> 00:07:35.287
additions to JavaScript
ever added to the language.

115
00:07:35.287 --> 00:07:37.917
And we just completely
ignored the question of,

116
00:07:37.917 --> 00:07:40.042
how are these going to be cancellable?

117
00:07:40.042 --> 00:07:46.041
And so it is for those three reasons that,
in many cases the async function,

118
00:07:46.041 --> 00:07:51.684
while it's very attractive syntactically
is sort of fatally flawed.

119
00:07:51.684 --> 00:07:54.154
And it doesn't mean I never use them, but

120
00:07:54.154 --> 00:07:59.034
I still use generators whenever I need to
get around one or more of these problems.

121
00:07:59.034 --> 00:08:04.407
And specifically with respect
to cancellation I had developed

122
00:08:04.407 --> 00:08:09.776
a library to try to show what I
thought could be a workable way for

123
00:08:09.776 --> 00:08:13.644
asynchronous functions to be cancellable.

124
00:08:13.644 --> 00:08:17.442
It's based on the idea
of cancellation tokens.

125
00:08:17.442 --> 00:08:20.231
That is not an invention that I made up.

126
00:08:20.231 --> 00:08:24.828
That is a standardized thing for
many other languages, like C Sharp.

127
00:08:24.828 --> 00:08:28.948
And in fact we already have in
the web platform cancellation tokens.

128
00:08:28.948 --> 00:08:31.952
If you've ever used something like fetch.

129
00:08:31.952 --> 00:08:36.224
Fetch has a way for
you to cancel an ajax request and

130
00:08:36.224 --> 00:08:40.616
the way you do it is to pass
in a cancellation token.

131
00:08:40.616 --> 00:08:43.790
And then when you call abort on
the cancellation token it stops

132
00:08:43.790 --> 00:08:44.776
the ajax request.

133
00:08:44.776 --> 00:08:49.796
So it's standardized in C Sharp and
we already have it in the web platform and

134
00:08:49.796 --> 00:08:54.986
I was like this is a really good way for
us to make async functions cancellable.

135
00:08:54.986 --> 00:08:59.588
Unfortunately as things currently
stand it's just a user [INAUDIBLE] it

136
00:08:59.588 --> 00:09:01.821
didn't end up getting picked up.

137
00:09:01.821 --> 00:09:02.969
But this is what it looks like.

138
00:09:02.969 --> 00:09:04.805
It's called CAF.

139
00:09:04.805 --> 00:09:07.525
Stands for cancellable asynch functions,

140
00:09:07.525 --> 00:09:10.249
you make a token like
I'm doing on line one.

141
00:09:10.249 --> 00:09:14.480
You make a generator that is
wrapped with the CAF utility and

142
00:09:14.480 --> 00:09:17.283
you notice that you pass in the signal.

143
00:09:17.283 --> 00:09:24.294
On line 10, when you call down
here token.abort on line 15, oops.

144
00:09:24.294 --> 00:09:30.699
On line 15, when you call token,abort,
&gt;&gt; Kyle Simpson: It will actually

145
00:09:30.699 --> 00:09:36.670
send that signal into the asynchronous
funciton and tell it, stop running.

146
00:09:36.670 --> 00:09:39.377
Whatever you're in the middle
of stop right away.

147
00:09:39.377 --> 00:09:43.589
So now we have the way to send
a standardized way of sending in

148
00:09:43.589 --> 00:09:46.967
a cancellation signal
from the external side.

149
00:09:46.967 --> 00:09:49.502
One of the most common ways that
you're going to want to, or

150
00:09:49.502 --> 00:09:52.089
one of the most common decisions
that you're going to want to

151
00:09:52.089 --> 00:09:54.340
make about canceling your
asynchronous behavior.

152
00:09:54.340 --> 00:10:00.249
Is if you have a time-based
cancellation like I wanna time out.

153
00:10:00.249 --> 00:10:03.998
I wanna let this operation run for
a maximum of 5 seconds.

154
00:10:03.998 --> 00:10:07.578
So you see I'm doing it kinda
manually here with the set timeout.

155
00:10:07.578 --> 00:10:10.640
There's actually a mechanism
built right into the API.

156
00:10:10.640 --> 00:10:12.821
Line one, you see CAF.timeout.

157
00:10:12.821 --> 00:10:17.321
That makes a cancellation token that will
automatically cancel itself after five

158
00:10:17.321 --> 00:10:17.911
seconds.

159
00:10:17.911 --> 00:10:19.626
So then you just passed that in and

160
00:10:19.626 --> 00:10:22.887
you don't have to mess around
with your own set timeout calls.

161
00:10:22.887 --> 00:10:27.180
So again, I'm not trying to plug this
library like I want you to go use it but

162
00:10:27.180 --> 00:10:32.091
I deeply believe that every asynchronous
operation that you write in your programs,

163
00:10:32.091 --> 00:10:33.727
needs to have a mechanism for

164
00:10:33.727 --> 00:10:37.781
cancellation if you're gonna like
make a request of the file system.

165
00:10:37.781 --> 00:10:43.306
But what happened to the file system is
network mounted and the network's down and

166
00:10:43.306 --> 00:10:49.007
now you're seemingly benign request to do
a directory listing is hanging forever.

167
00:10:49.007 --> 00:10:51.318
Even stuff like that needs cancellation.

168
00:10:51.318 --> 00:10:56.775
Every asynchronous operation that we could
ever do in any part of the app front or

169
00:10:56.775 --> 00:10:59.870
back end,
you should have some mechanism for

170
00:10:59.870 --> 00:11:03.221
cancelling it at a minimum
based on a time mount.

171
00:11:03.221 --> 00:11:06.223
And I was hoping that
this kind of research and

172
00:11:06.223 --> 00:11:11.358
experimentation into something like CAF
would lead to a larger movement of,

173
00:11:11.358 --> 00:11:16.500
let's address cancellation in the design
of our asynchronous operations.

174
00:11:16.500 --> 00:11:18.625
So maybe someday that
ends up happening but

175
00:11:18.625 --> 00:11:21.645
unfortunately ships already
sailed with async functions.

176
00:11:21.645 --> 00:11:26.033
They don't by default,
have a way to do cancellation.

