WEBVTT

1
00:00:00.025 --> 00:00:03.933
[MUSIC]

2
00:00:03.933 --> 00:00:05.738
&gt;&gt; Aaron Frost: So
let's code that up real quick, so

3
00:00:05.738 --> 00:00:09.170
that we can have an example
of how it's gonna work.

4
00:00:09.170 --> 00:00:13.900
So it's a,
&gt;&gt; Aaron Frost: Function.

5
00:00:16.070 --> 00:00:19.925
So let's give us a counter,

6
00:00:19.925 --> 00:00:25.395
var counter = 0, function getCount,

7
00:00:30.251 --> 00:00:34.602
&gt;&gt; Aaron Frost: Is return counter++, and

8
00:00:34.602 --> 00:00:40.952
then we're gonna say, function logMe,

9
00:00:46.700 --> 00:00:52.507
&gt;&gt; Aaron Frost: count or getCount.

10
00:00:52.507 --> 00:00:55.526
Just so you guys can see this
happening every single time, actually.

11
00:01:08.176 --> 00:01:11.132
&gt;&gt; Aaron Frost: Okay, so

12
00:01:11.132 --> 00:01:17.504
yeah.
&gt;&gt; Aaron Frost: Dude,

13
00:01:17.504 --> 00:01:19.850
I wrote the word in there,
count, like ten times.

14
00:01:19.850 --> 00:01:22.170
I'm sorry,
this is not a very good code example.

15
00:01:23.520 --> 00:01:29.860
So, I'm gonna call logMe, and
we'll pass it 10, it logs at 10, right?

16
00:01:30.900 --> 00:01:32.501
So, if we say, logMe, and

17
00:01:32.501 --> 00:01:38.485
we don't pass it anything,
&gt;&gt; Aaron Frost: It said,

18
00:01:38.485 --> 00:01:43.146
I'm getting the counter and it's 0,

19
00:01:43.146 --> 00:01:48.649
okay, and,
&gt;&gt; Aaron Frost: If we call it again,

20
00:01:48.649 --> 00:01:52.383
if what I'm saying is right,
it will say getting the count,

21
00:01:52.383 --> 00:01:55.093
it will log that getting
the counter again,

22
00:01:55.093 --> 00:01:59.000
which means it's gonna call
every single time this triggers.

23
00:02:00.230 --> 00:02:01.430
And it did.

24
00:02:01.430 --> 00:02:03.160
So I'm getting the counter.

25
00:02:03.160 --> 00:02:07.966
So every single time that you've
got a violation of that thing,

26
00:02:07.966 --> 00:02:11.720
it's gonna go ahead and
re-trigger that event.

27
00:02:11.720 --> 00:02:13.720
Does that answer any of the question?

28
00:02:13.720 --> 00:02:17.460
Okay, are you happy that happens,
or does that bother you?

29
00:02:17.460 --> 00:02:18.584
&gt;&gt; Off Camera 1: I'm just surprised.

30
00:02:18.584 --> 00:02:20.110
&gt;&gt; Aaron Frost: You're surprised?

31
00:02:20.110 --> 00:02:20.909
&gt;&gt; Off Camera 1: Because I was

32
00:02:20.909 --> 00:02:25.792
assuming it's a static value, just like
when you had a string there whatever.

33
00:02:25.792 --> 00:02:27.820
But I mean, it makes sense.

34
00:02:27.820 --> 00:02:33.239
It's just a little surprising
because that means they actually

35
00:02:33.239 --> 00:02:38.653
put in the logic in there, and
they do parsing to say, hey, this

36
00:02:38.653 --> 00:02:42.383
is not a value, this is a call coming.
&gt;&gt; Aaron Frost: Yeah,

37
00:02:42.383 --> 00:02:44.211
it is actually executed,

38
00:02:44.211 --> 00:02:48.118
as opposed to evaluated one time.
&gt;&gt; Off Camera 2: And if you wanted it

39
00:02:48.118 --> 00:02:52.788
the other way, you'd have to make a
separate call before that, before defining

40
00:02:52.788 --> 00:02:55.619
that function, just to have what the-
&gt;&gt; Aaron Frost: Yeah, and

41
00:02:55.619 --> 00:03:00.050
again if you don't like that,
you don't have to use default parameters.

42
00:03:00.050 --> 00:03:03.400
I think that they looked at what
are people doing most of the time,

43
00:03:03.400 --> 00:03:04.660
let's do that.

44
00:03:04.660 --> 00:03:08.100
And I think most of the time,
people want that thing to run every time.

45
00:03:08.100 --> 00:03:11.390
So, that is a good thing that you
had us test though cuz I didn't

46
00:03:11.390 --> 00:03:12.198
actually cover that.

47
00:03:12.198 --> 00:03:16.993
Thank you.
&gt;&gt; Off Camera 1: Yeah, actually, your

48
00:03:16.993 --> 00:03:19.370
slide there actually kind of does the.
&gt;&gt; Aaron Frost: This thing?

49
00:03:19.370 --> 00:03:20.800
&gt;&gt; Off Camera 1: Just in a different way,

50
00:03:20.800 --> 00:03:22.830
right, cuz this is kind of-
&gt;&gt; Aaron Frost: Yeah,

51
00:03:22.830 --> 00:03:24.870
yeah, yeah,
this is the same kind of idea, right?

52
00:03:24.870 --> 00:03:29.520
So one thing I wanted to show
is that if you get an exception

53
00:03:33.270 --> 00:03:36.842
in the method that's triggered
by the default assignment,

54
00:03:36.842 --> 00:03:39.300
it's gonna kill your execution.

55
00:03:39.300 --> 00:03:43.250
So it's not immune to exceptions.

56
00:03:43.250 --> 00:03:46.980
Like, it's the same as if you put it
inline, and it got an exception there,

57
00:03:46.980 --> 00:03:48.790
so, yeah.

58
00:03:51.820 --> 00:03:54.005
Eduardo shivers when he sees ++.

59
00:03:54.005 --> 00:03:55.980
&gt;&gt; Off Camera 1: [LAUGH]
&gt;&gt; Aaron Frost: My

60
00:03:55.980 --> 00:03:57.930
code has made him shiver.

61
00:03:57.930 --> 00:04:02.286
I'm gonna take it as a compliment.

62
00:04:02.286 --> 00:04:04.130
Okay, I mean,
I have a method here called die.

63
00:04:04.130 --> 00:04:06.820
I'm like,
it's supposed to die every single time.

64
00:04:06.820 --> 00:04:10.520
No matter how many times I called test,
if I don't pass it something,

65
00:04:10.520 --> 00:04:12.380
it's gonna die on purpose.

66
00:04:12.380 --> 00:04:14.450
So this is something you could do as well.

67
00:04:14.450 --> 00:04:17.890
If you had something that you
needed them to provide you,

68
00:04:17.890 --> 00:04:20.020
you could have a die
function if you wanted to.

69
00:04:20.020 --> 00:04:23.280
Or where you're like,
just give up on life,

70
00:04:23.280 --> 00:04:26.890
end it all right now,
tell them that they did it wrong.

71
00:04:26.890 --> 00:04:30.965
So this is something you could do, I mean,

72
00:04:30.965 --> 00:04:36.187
I'm not saying it's bad or
good, it's just a thing.

73
00:04:36.187 --> 00:04:39.628
Okay, again, they propagate the errors

74
00:04:39.628 --> 00:04:44.780
though.
&gt;&gt; Aaron Frost: So

75
00:04:44.780 --> 00:04:47.820
it says assignment, yeah, yeah, yeah.

76
00:04:48.820 --> 00:04:50.750
It's a good slide,
whoever wrote it was great.

77
00:04:50.750 --> 00:04:55.750
Anyway, so
it says assignment happens lexically, so

78
00:04:55.750 --> 00:04:58.630
I wanna just kinda point out
what's gonna happen here.

79
00:04:58.630 --> 00:05:02.001
So I have a global x, right, out here, and

80
00:05:02.001 --> 00:05:07.410
it's just a string,
it's not important, it's init.

81
00:05:07.410 --> 00:05:11.430
And down here, we have this test function
where if I don't pass anything in,

82
00:05:11.430 --> 00:05:13.430
it's gonna say u equal to x.

83
00:05:13.430 --> 00:05:17.279
Okay, and then internally, I have a var x.

84
00:05:18.870 --> 00:05:21.810
And I say go ahead and return a.

85
00:05:21.810 --> 00:05:24.820
So test doesn't do anything
besides it takes a thing and

86
00:05:24.820 --> 00:05:26.800
just hands it back, right?

87
00:05:26.800 --> 00:05:32.700
And then so when I call test, and I don't
pass anything, it's gonna go get x.

88
00:05:32.700 --> 00:05:37.520
So everyone here's like, cool, x = "INIT",
right, but it's happening lexically,

89
00:05:38.780 --> 00:05:44.670
and inside this lexical scope,
x is still undefined.

90
00:05:44.670 --> 00:05:48.200
Okay, so actually,
it assigned it to undefined.

91
00:05:49.600 --> 00:05:53.760
And it's not gonna like
do this endless loop.

92
00:05:53.760 --> 00:05:58.850
So, if you're like default assignment
function returns an undefined,

93
00:05:58.850 --> 00:06:01.620
it's not gonna just sit there and
call it until it gets a not undefined.

94
00:06:01.620 --> 00:06:05.186
It's just gonna call it one time,
so that make sense?

95
00:06:05.186 --> 00:06:06.586
Good?

96
00:06:06.586 --> 00:06:08.754
Okay, awesome.

97
00:06:08.754 --> 00:06:15.850
Okay, so yeah, I mean, again,
no, x, not a good variable name.

98
00:06:15.850 --> 00:06:20.788
Use better variable names than that, but
hopefully, you're not gonna have too

99
00:06:20.788 --> 00:06:25.089
many name collisions like this, but
if you did this, it would be why.

100
00:06:25.089 --> 00:06:28.280
Not all parameters need default values.

101
00:06:28.280 --> 00:06:31.603
So, if you're gonna assign one,
you don't have to assign the next one,

102
00:06:31.603 --> 00:06:32.360
it is optional.

103
00:06:35.240 --> 00:06:36.850
So that's cool.

104
00:06:36.850 --> 00:06:41.590
And then you can't use default
parameters with the rest, though.

105
00:06:41.590 --> 00:06:46.790
So we've got rest here, right,
where if I call this function and

106
00:06:46.790 --> 00:06:51.510
I pass it 100 things, rest will
be the array of those 100 things.

107
00:06:51.510 --> 00:06:55.320
Whereas if I don't pass it anything,

108
00:06:55.320 --> 00:06:59.330
or I pass undefined,
it's not gonna let this happen.

109
00:06:59.330 --> 00:07:00.150
You can't use this.

110
00:07:00.150 --> 00:07:01.930
This is gonna give you a syntax error.

111
00:07:01.930 --> 00:07:05.791
Okay, so don't try and
use default parameters with rest.

112
00:07:05.791 --> 00:07:11.009
If you had, I'm gonna copy
this real quick and show you,

113
00:07:11.009 --> 00:07:16.896
cuz I don't want to be misinterpreted.
&gt;&gt; Aaron Frost: So

114
00:07:16.896 --> 00:07:22.364
if you had a, b, you could still use

115
00:07:22.364 --> 00:07:27.741
it over here.
&gt;&gt; Aaron Frost: You

116
00:07:27.741 --> 00:07:29.120
just can't use it over here.

117
00:07:30.940 --> 00:07:35.854
That's the only syntax error, okay,
is to put it on the rest parameter itself.

118
00:07:37.040 --> 00:07:41.968
So, you can use it every while, it's just
not on the rest parameter, eye to eye?

119
00:07:41.968 --> 00:07:44.399
We're good, okay.

120
00:07:44.399 --> 00:07:50.379
Awesome, is everyone online good?
&gt;&gt; Off Camera 3: Mike,

121
00:07:50.379 --> 00:07:52.760
how long do you have in this section left?
&gt;&gt; Aaron Frost: A few minutes.

122
00:07:52.760 --> 00:07:53.854
&gt;&gt; Off Camera 3: Okay, perfect.

123
00:07:53.854 --> 00:07:54.769
&gt;&gt; Aaron Frost: Okay, so,

124
00:07:54.769 --> 00:07:59.624
another thing that's unique
about default parameters, so,

125
00:07:59.624 --> 00:08:02.647
when you have the arguments object, so

126
00:08:02.647 --> 00:08:07.060
let's say I called test, and
I don't pass it anything.

127
00:08:07.060 --> 00:08:09.030
It wants an a, a b, and a c.

128
00:08:09.030 --> 00:08:13.322
So, if I don't pass it anything, a's gonna
be 1, b's gonna be 2, c's gonna be 3, so

129
00:08:13.322 --> 00:08:16.000
they're all three gonna have values,
right?

130
00:08:16.000 --> 00:08:19.610
But arguments.length is 0, okay?

131
00:08:19.610 --> 00:08:21.980
So just because it has a value,

132
00:08:21.980 --> 00:08:24.290
it's still not gonna throw it
into the arguments object.

133
00:08:26.130 --> 00:08:29.920
So if you're one of those
wizards that sits there and

134
00:08:29.920 --> 00:08:35.375
checks incoming parameters versus
the arguments object, and you know who

135
00:08:35.375 --> 00:08:39.990
you are, this may throw you for
a loop unless you like that it does that.

136
00:08:39.990 --> 00:08:41.780
So, anyway.

137
00:08:41.780 --> 00:08:46.635
So, if I pass it 1 because I only passed
it 1, a's gonna still be 1, b and

138
00:08:46.635 --> 00:08:51.020
c will both have values, but
the arguments was only one line.

139
00:08:51.020 --> 00:08:53.960
So, we're all good, right?

140
00:08:53.960 --> 00:08:56.640
Default parameters do not show
up inside the arguments object.

141
00:08:57.880 --> 00:08:59.434
&gt;&gt; Off Camera 3: There was a question

142
00:08:59.434 --> 00:09:03.210
there right at the end.
&gt;&gt; Aaron Frost: Can get hot count have

143
00:09:03.210 --> 00:09:05.159
a reference to this?

144
00:09:05.159 --> 00:09:10.600
If so, what would it be?
&gt;&gt; Aaron Frost: Can

145
00:09:10.600 --> 00:09:14.263
getCount have a reference to this?

146
00:09:14.263 --> 00:09:17.542
I'm gonna go to Firefox for this
because it's actually implemented here.

147
00:09:17.542 --> 00:09:26.983
So,
&gt;&gt; Aaron Frost: Can

148
00:09:26.983 --> 00:09:33.385
getCount have a reference to this?
&gt;&gt; Aaron Frost: I mean,

149
00:09:33.385 --> 00:09:34.921
I think it's just stuck.

150
00:09:34.921 --> 00:09:36.980
I'm gonna just say this.

151
00:09:36.980 --> 00:09:38.010
I'm not even gonna try it out.

152
00:09:38.010 --> 00:09:39.340
It's just a regular method call.

153
00:09:40.420 --> 00:09:44.648
So, it's whatever the this is.

154
00:09:44.648 --> 00:09:48.780
If you're daisy chained off of
an object call, this is the object.

155
00:09:48.780 --> 00:09:54.285
Anywhere else, you're gonna be the window,

156
00:09:54.285 --> 00:09:59.093
so yeah, I'm gonna answer it that way.

157
00:09:59.093 --> 00:10:05.850
So we define default
parameters from left to right.

158
00:10:05.850 --> 00:10:09.645
I mean, you can, I mean,

159
00:10:09.645 --> 00:10:14.138
if I imply that, I apologize.

160
00:10:14.138 --> 00:10:16.068
Let me show this real quick.

161
00:10:16.068 --> 00:10:20.656
Like if I skip this one,
I can still do the next one.

162
00:10:20.656 --> 00:10:23.829
I wasn't trying to say once you do one,
you have to do the rest.

163
00:10:23.829 --> 00:10:26.629
That's not what I'm trying to say.

164
00:10:26.629 --> 00:10:32.357
Just whatever order you wanna do them in.
&gt;&gt; Aaron Frost: Yeah,

165
00:10:32.357 --> 00:10:34.768
I think it looks gross, too, but whatever.

166
00:10:34.768 --> 00:10:37.880
Yeah, like that doesn't look great,
but you can do it.

167
00:10:37.880 --> 00:10:41.270
Not everything has to
have a default value,

168
00:10:41.270 --> 00:10:45.040
just, only the ones you want
sans the rest argument.

