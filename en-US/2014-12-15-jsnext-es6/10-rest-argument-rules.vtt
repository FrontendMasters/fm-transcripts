WEBVTT

1
00:00:00.000 --> 00:00:04.285
[MUSIC]

2
00:00:04.285 --> 00:00:05.829
&gt;&gt; Aaron Frost: So there are some rules,

3
00:00:05.829 --> 00:00:09.463
you can only have one rest
parameter per function, okay?

4
00:00:09.463 --> 00:00:12.070
Can't more than one.

5
00:00:12.070 --> 00:00:15.517
It's gotta be the last parameter, okay.

6
00:00:15.517 --> 00:00:18.490
It can't be the first one and
I'll show you as why.

7
00:00:18.490 --> 00:00:21.900
And you can't use arguments anymore
if you're gonna use it, okay.

8
00:00:21.900 --> 00:00:24.850
When a function evals is gonna say,
do you have rest?

9
00:00:24.850 --> 00:00:27.770
Cool, then I'm gonna freak out
if you use the word arguments.

10
00:00:27.770 --> 00:00:31.883
Unless you make a new variable
called arguments, then it's okay.

11
00:00:31.883 --> 00:00:32.383
Is that confusing?

12
00:00:33.740 --> 00:00:34.890
A little bit.

13
00:00:34.890 --> 00:00:38.379
Anyway, don't ever make
a variable called arguments.

14
00:00:39.690 --> 00:00:40.329
If you do, call me.

15
00:00:40.329 --> 00:00:42.486
And I'll come punch you in the neck.

16
00:00:42.486 --> 00:00:44.135
Anyway, yeah.
&gt;&gt; Speaker 2: [LAUGH]

17
00:00:44.135 --> 00:00:44.872
&gt;&gt; Aaron Frost: Don't make a variable

18
00:00:44.872 --> 00:00:46.150
called arguments, right?

19
00:00:46.150 --> 00:00:48.540
It's not cool, okay.

20
00:00:50.350 --> 00:00:54.310
And you can't use default
values on a rest parameter.

21
00:00:54.310 --> 00:00:57.180
And I'll show you guys default
values in a different slide

22
00:00:57.180 --> 00:00:58.410
deck that we'll do later on.

23
00:00:58.410 --> 00:01:02.780
But, you can't use default
values with the rest parameter.

24
00:01:02.780 --> 00:01:04.500
So let's take a look at
each of these rules.

25
00:01:04.500 --> 00:01:07.830
They're all have some intricacies,
I kinda want to point them out.

26
00:01:08.910 --> 00:01:12.110
So, you can only have one
rest parameter per function.

27
00:01:12.110 --> 00:01:19.640
So, I want you guys look at this code and
try and pretend that you're v eight.

28
00:01:19.640 --> 00:01:21.983
Or your spider monkey, okay.

29
00:01:21.983 --> 00:01:26.158
You are C++ now, okay.

30
00:01:26.158 --> 00:01:30.302
And you see that someone said okay,
they want two rest params and

31
00:01:30.302 --> 00:01:32.540
they're passing all this stuff.

32
00:01:34.070 --> 00:01:39.260
So it's like,
I don't know what things go in first and

33
00:01:39.260 --> 00:01:41.370
one thing is you going second.

34
00:01:41.370 --> 00:01:45.410
I don't know what you expected
me to do here, right?

35
00:01:45.410 --> 00:01:49.780
So this is gonna die if you try
to use more than one, okay?

36
00:01:49.780 --> 00:01:53.870
So I think that when I read that I was
like, no not makes perfect sense, like you

37
00:01:53.870 --> 00:02:00.120
couldn't do more than two or more than one
cuz it would know what to do and what so.

38
00:02:00.120 --> 00:02:04.360
So yeah you'll get an error that
you've used multiple rest parameters.

39
00:02:05.570 --> 00:02:06.345
Questions on that one?

40
00:02:06.345 --> 00:02:08.150
No, pretty straightforward right.

41
00:02:09.550 --> 00:02:10.940
Okay it has to be the last one.

42
00:02:12.870 --> 00:02:17.810
So, that one I think make good sense too.

43
00:02:17.810 --> 00:02:21.320
At first I was like well,
consider this example here.

44
00:02:22.910 --> 00:02:25.306
One, two, three, four, right.

45
00:02:25.306 --> 00:02:25.990
I'm gonna pass it in.

46
00:02:27.190 --> 00:02:31.630
Which one should go into bar and
which one should go into biz.

47
00:02:31.630 --> 00:02:32.250
I got all no.

48
00:02:34.080 --> 00:02:39.399
If I call form, should I just read from
the end, shake like read backwards?

49
00:02:40.600 --> 00:02:46.880
And am I just put the very last one in
biz and then put these three in bar.

50
00:02:46.880 --> 00:02:48.000
But what if I do this?

51
00:02:48.000 --> 00:02:49.420
Which one should that go into?

52
00:02:49.420 --> 00:02:51.010
I don't know what to do.

53
00:02:51.010 --> 00:02:54.450
So, it's got to be the last one.

54
00:02:54.450 --> 00:02:58.050
And clearly for sanity and
code readability purposes, okay.

55
00:02:58.050 --> 00:02:59.180
It's just your last parameter.

56
00:02:59.180 --> 00:03:00.000
It's not your first.

57
00:03:00.000 --> 00:03:01.650
It's not the middle one.

58
00:03:01.650 --> 00:03:06.070
In fact, if you try and
do this you're gonna get an error, okay?

59
00:03:06.070 --> 00:03:07.130
All right, any questions on that?

60
00:03:08.620 --> 00:03:11.960
No, okay, so

61
00:03:11.960 --> 00:03:17.045
if you've got a rest parameter like
this and you try and talk to arguments,

62
00:03:17.045 --> 00:03:21.160
as Cary said, it's gonna give you
a syntax error cuz it actually

63
00:03:21.160 --> 00:03:25.060
doesn't provide the arguments object
anymore when you've used a rest parameter.

64
00:03:25.060 --> 00:03:27.663
So, that's why you're
gonna get an error saying,

65
00:03:27.663 --> 00:03:30.458
that variable hasn't even been declined or
declared.

66
00:03:30.458 --> 00:03:36.687
Yeah?
&gt;&gt; Speaker 2: You can't get to call error.

67
00:03:36.687 --> 00:03:39.261
Those aren't part of the spec I guess.

68
00:03:39.261 --> 00:03:45.070
But It's like, arguments.caller
get the function that called-

69
00:03:45.070 --> 00:03:45.920
&gt;&gt; Aaron Frost: Do me a favor,

70
00:03:45.920 --> 00:03:49.640
try in the time that we have to track
this stuff out and let me know.

71
00:03:49.640 --> 00:03:51.080
Is that cool?

72
00:03:51.080 --> 00:03:55.616
Okay, so, yeah, so like,
if I call doSomething(1,2,3) and I try and

73
00:03:55.616 --> 00:03:58.180
access arguments in there, you're dead.

74
00:04:00.200 --> 00:04:01.715
Question on that one?

75
00:04:01.715 --> 00:04:02.220
Simple.

76
00:04:04.200 --> 00:04:05.412
No default values.

77
00:04:05.412 --> 00:04:10.510
So, default values is this is a new
syntax we haven't talk about yet, but

78
00:04:10.510 --> 00:04:16.580
if I wanted to say, if the param is empty
make it this array or I couldn't do that.

79
00:04:16.580 --> 00:04:19.084
There's no such thing as default
values with this rest param.

80
00:04:19.084 --> 00:04:26.390
Okay, so you'll get a syntax error
on that, any questions on that one?

81
00:04:26.390 --> 00:04:30.876
No, okay, it's rest parameters,
that's a new functionality,

82
00:04:30.876 --> 00:04:33.090
you guys excited about that one?

83
00:04:34.120 --> 00:04:34.820
I'm stoked about that one.

84
00:04:36.040 --> 00:04:37.325
Okay, so try this out.

85
00:04:37.325 --> 00:04:40.150
Tried out on Firefox.

86
00:04:40.150 --> 00:04:41.623
Tried out on the Traceur Repl.

87
00:04:41.623 --> 00:04:47.506
Try and bug around with the arguments
objects, see if you can get the,

88
00:04:47.506 --> 00:04:52.934
see if you get the caller and
callee stuff like way he was saying.

89
00:04:52.934 --> 00:04:56.800
Just test getting those errors so
you know what to expect.

90
00:04:56.800 --> 00:04:59.710
So you don't freak out when you
get in like in the wild like don't

91
00:04:59.710 --> 00:05:02.330
use two of them make sure the last one.

92
00:05:02.330 --> 00:05:06.308
Trying get the errors to go like test the
boundaries make sure that it is failing or

93
00:05:06.308 --> 00:05:09.896
should fail and just so you can getting
it comfortable with how it works.

94
00:05:09.896 --> 00:05:15.760
So try it out, let's come back in,
in ten minutes.

95
00:05:15.760 --> 00:05:19.167
Yeah, are there any questions?
&gt;&gt; Speaker 2: Yeah,

96
00:05:19.167 --> 00:05:22.431
before I ask it actually, are you going to
talk about some of the new array features

97
00:05:22.431 --> 00:05:25.094
later at all?
&gt;&gt; Aaron Frost: No.

98
00:05:25.094 --> 00:05:25.763
&gt;&gt; Speaker 2: Okay, so

99
00:05:25.763 --> 00:05:30.537
I mentioned in the chat, using array
from an arguments to convert it

100
00:05:30.537 --> 00:05:35.227
into an array but that's also ES6 and
one of the follow up question

101
00:05:35.227 --> 00:05:40.210
was why would we need an array from
if we already have rest parameters?

102
00:05:40.210 --> 00:05:43.910
And in my mind it's just cause it works
on other array like things, right?

103
00:05:43.910 --> 00:05:45.790
It doesn't have to be
argument specifically.

104
00:05:47.970 --> 00:05:50.313
&gt;&gt; Aaron Frost: Yeah, I don't know.

105
00:05:50.313 --> 00:05:51.200
That is a good question.

106
00:05:51.200 --> 00:05:52.100
Does array from,

107
00:05:52.100 --> 00:05:56.310
could you pass a set to array from?
&gt;&gt; Speaker 2: Anything

108
00:05:56.310 --> 00:06:01.115
that qualifies as that array like,
where you can iterate it basically.

109
00:06:01.115 --> 00:06:01.667
&gt;&gt; Aaron Frost: Yeah,

110
00:06:01.667 --> 00:06:03.692
that's a good question.

111
00:06:03.692 --> 00:06:06.821
I don't know man.
&gt;&gt; Speaker 2: I'm not sure about sets

112
00:06:06.821 --> 00:06:09.010
[CROSSTALK] [INAUDIBLE] or a set.
&gt;&gt; Aaron Frost: Yeah,

113
00:06:09.010 --> 00:06:09.610
you could try that out right now.

114
00:06:11.230 --> 00:06:14.091
I don't know.

115
00:06:14.091 --> 00:06:16.690
I mean Firefox and
Chrome will have the new syntax.

116
00:06:16.690 --> 00:06:18.650
So, were there any other
questions I didn't answer?

117
00:06:18.650 --> 00:06:23.220
I think we're caught up all asked.

118
00:06:23.220 --> 00:06:26.930
All right, so see that,
see what it's writing there.

119
00:06:29.290 --> 00:06:32.420
Like they figured out
a better way to do let.

120
00:06:32.420 --> 00:06:35.280
I'm gonna show you what they tried to do.

121
00:06:35.280 --> 00:06:38.910
And even this version of let will never,
even when it compiles into it,

122
00:06:38.910 --> 00:06:41.891
it'll never respect.
&gt;&gt; Aaron Frost: The temporal dead zone,

123
00:06:41.891 --> 00:06:48.230
you'll always be like, how come I can
still reference it before it was declared?

124
00:06:48.230 --> 00:06:51.690
Even if you transfile it with Traceur,
it'll never be able to implement,

125
00:06:51.690 --> 00:06:55.320
at least with this version,
a solid implementation.

126
00:06:56.950 --> 00:06:58.642
What it used to do for let was this.

127
00:06:58.642 --> 00:07:03.489
Does anyone know how you can get
a temporally scoped variable mid block

128
00:07:03.489 --> 00:07:06.869
in encourage obviously
because there's a way.

129
00:07:06.869 --> 00:07:11.180
And I actually I found it on here melts
in my brain when I even thought about.

130
00:07:11.180 --> 00:07:13.810
&gt;&gt; Speaker 2: You got to use like define

131
00:07:13.810 --> 00:07:15.940
property.
&gt;&gt; Aaron Frost: Let me show you.

132
00:07:15.940 --> 00:07:17.310
Dude, it was crazy.

133
00:07:17.310 --> 00:07:19.100
They would do this, this is not a joke.

134
00:07:19.100 --> 00:07:23.485
This is what they would do, okay?
&gt;&gt; Aaron Frost: I'm just

135
00:07:23.485 --> 00:07:27.749
gonna rewrite these three lines.

136
00:07:39.546 --> 00:07:44.739
&gt;&gt; Aaron Frost: Guess what we have

137
00:07:44.739 --> 00:07:48.897
right there?

138
00:07:48.897 --> 00:07:52.825
We have a temporally
scoped variable named e.

139
00:08:07.583 --> 00:08:09.772
&gt;&gt; Aaron Frost: That's how they used to

140
00:08:09.772 --> 00:08:11.087
compile let.

141
00:08:11.087 --> 00:08:14.687
They were like, anytime you use it,
they with throw,

142
00:08:14.687 --> 00:08:19.544
just to get this exception parameter
they could then reassign to whatever

143
00:08:19.544 --> 00:08:22.877
variable value you set.
&gt;&gt; Speaker 3: I heard that it's also

144
00:08:22.877 --> 00:08:25.683
the way that Traceur, at the moment,

145
00:08:25.683 --> 00:08:27.784
is emulating let in the-
&gt;&gt; Aaron Frost: No,

146
00:08:27.784 --> 00:08:30.590
this is how they emulate right here.
&gt;&gt; Speaker 3: Okay, no, but

147
00:08:30.590 --> 00:08:32.600
in the browser, okay.
&gt;&gt; Aaron Frost: Yeah, yeah.

148
00:08:32.600 --> 00:08:34.490
They used to, totally.

149
00:08:34.490 --> 00:08:35.880
Like, that's actually how I found it.

150
00:08:35.880 --> 00:08:39.920
That's why when I saw them
using it this way, I was like.

151
00:08:39.920 --> 00:08:42.850
That's interesting cuz it will
never be able to properly,

152
00:08:42.850 --> 00:08:45.550
like function with
a temporal deadzone idea.

153
00:08:46.860 --> 00:08:50.486
But I'm guessing it's
way more maintainable.

154
00:08:50.486 --> 00:08:55.526
And I'm guessing it's more
performing cuz I can imagine

155
00:08:55.526 --> 00:09:00.470
it's very performant to say
stop execution and throw.

156
00:09:00.470 --> 00:09:02.869
I could imagine that's pretty costly.

157
00:09:02.869 --> 00:09:07.170
So, if it was trying to throw every so
often, I can imagine that,

158
00:09:07.170 --> 00:09:11.930
that was like a good thing
to do like on a large scale.

159
00:09:12.940 --> 00:09:17.560
So, this is probably more performant it's,
for me, definitely more

160
00:09:17.560 --> 00:09:21.530
readable not that I would ever try
to read this code anyway but yeah.

161
00:09:21.530 --> 00:09:25.528
If you use a grunt tracer like I said,
and for those on the livestream.

162
00:09:25.528 --> 00:09:30.090
Using a grunt-traceur, you can tell
it to provide you with source maps.

163
00:09:30.090 --> 00:09:33.180
And then in the browser, if you get
an error, you can click on it and

164
00:09:33.180 --> 00:09:34.880
it will take you back
to the original source.

165
00:09:36.540 --> 00:09:40.930
So yeah, did anyone have
anything they found it was weird?

166
00:09:40.930 --> 00:09:43.930
All kinda what you expected,
kinda normalish?

167
00:09:43.930 --> 00:09:44.760
Yeah?

168
00:09:44.760 --> 00:09:46.600
Someone had Firefox 8 on there.

169
00:09:46.600 --> 00:09:47.410
That was kind of weird.

170
00:09:48.720 --> 00:09:51.980
I'm guessing we got that
figured out though.

