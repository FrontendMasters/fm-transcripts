WEBVTT

1
00:00:00.000 --> 00:00:03.634
[MUSIC]

2
00:00:03.634 --> 00:00:06.650
&gt;&gt; Aaron Frost: We're gonna move
on to destructuring arrays now.

3
00:00:06.650 --> 00:00:09.530
So here's a basic example, okay?

4
00:00:10.780 --> 00:00:14.845
Pretty simple though,
like I got an array 1 to 10.

5
00:00:14.845 --> 00:00:18.275
I want a variable called the first,
second, and

6
00:00:18.275 --> 00:00:20.901
tenth
&gt;&gt; Aaron Frost: And

7
00:00:20.901 --> 00:00:26.030
I'm just gonna pull them out
of this array, nums, okay?

8
00:00:26.030 --> 00:00:29.390
And I can log them and
they're the right values.

9
00:00:29.390 --> 00:00:32.195
So if you wanna skip one,
you just leave an empty comma in there.

10
00:00:32.195 --> 00:00:36.280
[COUGH]
Again, new syntax you'll notice.

11
00:00:38.255 --> 00:00:43.840
We got curly braces on the left-hand
side of an assignment expression.

12
00:00:46.830 --> 00:00:49.560
That's happened before,
but not in this way.

13
00:00:49.560 --> 00:00:57.100
So before, you could be like,
array sub 0 = 1.

14
00:00:57.100 --> 00:01:00.410
So you've had curly braces before but
not like this, right?

15
00:01:00.410 --> 00:01:01.820
Not in the destructuring pattern.

16
00:01:03.590 --> 00:01:07.446
So there is kind of some
new syntax to this and

17
00:01:07.446 --> 00:01:10.999
I think it's all fairly simple to grok.

18
00:01:10.999 --> 00:01:16.481
Do you guys think it's simple, right?
&gt;&gt; Off Camera 1: There's no,

19
00:01:16.481 --> 00:01:21.510
sorry, with the comma,
is that really the way to do it,

20
00:01:21.510 --> 00:01:25.706
or is there a more aesthetically pleasing-
&gt;&gt; Aaron Frost: What,

21
00:01:25.706 --> 00:01:28.206
you think my code's ugly, what?
&gt;&gt; Group: [LAUGH]

22
00:01:28.206 --> 00:01:28.757
&gt;&gt; Aaron Frost: You think my code's

23
00:01:28.757 --> 00:01:29.346
ugly?
&gt;&gt; Off Camera 1: Yeah.

24
00:01:29.346 --> 00:01:29.881
&gt;&gt; Group: [LAUGH]

25
00:01:29.881 --> 00:01:30.446
&gt;&gt; Aaron Frost: Yeah, no.

26
00:01:30.446 --> 00:01:32.570
No, no, no, this is how it works.

27
00:01:32.570 --> 00:01:33.897
This is how it is.
&gt;&gt; Off Camera 1: Okay.

28
00:01:33.897 --> 00:01:34.447
&gt;&gt; Aaron Frost: Yeah, yeah, yeah.

29
00:01:34.447 --> 00:01:35.881
&gt;&gt; Off Camera 1: And you also really have

30
00:01:35.881 --> 00:01:37.010
to count.
&gt;&gt; Aaron Frost: Yeah,

31
00:01:37.010 --> 00:01:40.240
I mean if you knew there was ten things
and you knew you wanted the tenth one,

32
00:01:40.240 --> 00:01:44.400
and you didn't care about the middle ones,
then yeah, that's what you'd do.

33
00:01:44.400 --> 00:01:50.100
So, does that look better than
saying tenth = array sub 9?

34
00:01:50.100 --> 00:01:51.740
Probably not, but who knows.

35
00:01:51.740 --> 00:01:53.665
I don't know, you guys will know.
&gt;&gt; Off Camera 2: And

36
00:01:53.665 --> 00:01:57.742
there's no way to map with the object
destructuring, you couldn't do like,

37
00:01:57.742 --> 00:01:59.800
indexed to variable name or anything?

38
00:02:00.900 --> 00:02:05.640
Like 0 to first, 1 to second.
&gt;&gt; Aaron Frost: I don't know, but

39
00:02:05.640 --> 00:02:06.350
I hope so.

40
00:02:06.350 --> 00:02:08.421
I don't think so though.
&gt;&gt; Off Camera 3: Is there a way to find

41
00:02:08.421 --> 00:02:10.472
out the last?
&gt;&gt; Off Camera 1: That's already mapping,

42
00:02:10.472 --> 00:02:11.475
right?
&gt;&gt; Aaron Frost: No, so

43
00:02:11.475 --> 00:02:16.589
I've kind of thrown this concept
of patterns out to you guys.

44
00:02:17.750 --> 00:02:23.072
It's not like regular expression, like
where it can kinda do a ton of things.

45
00:02:23.072 --> 00:02:25.736
You kinda need to know
what you're looking for.

46
00:02:25.736 --> 00:02:34.130
When you're using these patterns,
it's not like give me any random thing.

47
00:02:34.130 --> 00:02:38.220
Like in JavaScript, we don't just
pass random objects into functions.

48
00:02:39.360 --> 00:02:42.240
The function coming in,
you kinda know what it is, right?

49
00:02:42.240 --> 00:02:49.373
I know this is a user thing and it's
gonna have an ID, and a name and stuff.

50
00:02:49.373 --> 00:02:52.649
So you kinda know what's coming in,
and if you don't,

51
00:02:52.649 --> 00:02:55.590
then patterns isn't gonna
solve your question.

52
00:02:55.590 --> 00:03:00.075
You need something else, maybe template
strings with their DSL function might do

53
00:03:00.075 --> 00:03:02.487
it, but we're not gonna cover that today.

54
00:03:02.487 --> 00:03:04.810
Okay, so no.

55
00:03:04.810 --> 00:03:06.050
No, I hope so,

56
00:03:06.050 --> 00:03:10.370
someone said can I destructure
the tenth thing to a different name?

57
00:03:10.370 --> 00:03:13.521
I mean, I am kind of doing that already,

58
00:03:13.521 --> 00:03:19.390
I'm pulling the array sub 0 out and
putting it into a variable name first.

59
00:03:19.390 --> 00:03:21.470
So I am kind of naming
them as I pull them out.

60
00:03:22.610 --> 00:03:24.110
So that's already happening.

61
00:03:24.110 --> 00:03:25.367
Yeah?
&gt;&gt; Off Camera 2: You just chose first,

62
00:03:25.367 --> 00:03:27.477
second, and tenth to make it
easier which position it is?

63
00:03:27.477 --> 00:03:28.097
&gt;&gt; Aaron Frost: Yeah, yeah, yeah, yeah.

64
00:03:28.097 --> 00:03:28.710
&gt;&gt; Off Camera 2: Okay.

65
00:03:28.710 --> 00:03:29.767
&gt;&gt; Aaron Frost: You don't actually,

66
00:03:29.767 --> 00:03:31.940
I mean the word first
doesn't mean anything.

67
00:03:31.940 --> 00:03:33.140
It's arbitrary, right?

68
00:03:33.140 --> 00:03:35.110
It could be foo or bar.

69
00:03:35.110 --> 00:03:39.370
I just did first, second, and tenth just
you guys would know this is the first one,

70
00:03:39.370 --> 00:03:40.630
the second one, and the tenth one.

71
00:03:40.630 --> 00:03:43.579
Just so the example might make,
idiomatically,

72
00:03:43.579 --> 00:03:45.975
a little bit more sense as you look at it.

73
00:03:45.975 --> 00:03:48.207
So, good?

74
00:03:48.207 --> 00:03:51.980
Okay.
&gt;&gt; Aaron Frost: Okay, so

75
00:03:51.980 --> 00:03:54.475
something you can do.

76
00:03:54.475 --> 00:04:01.433
In the past, if we swapped variables, so
given that I've got these two variables,

77
00:04:01.433 --> 00:04:06.040
a is 1, b is 2, in the past,
I needed a temp variable.

78
00:04:07.090 --> 00:04:08.520
So go ahead and swap these things, right?

79
00:04:09.560 --> 00:04:10.990
That's how we would do it normally, right?

80
00:04:12.090 --> 00:04:15.080
So temp becomes a, a becomes b,
b becomes temp, and

81
00:04:15.080 --> 00:04:16.570
then temp we don't care about anymore.

82
00:04:16.570 --> 00:04:17.239
We kinda throw it away.

83
00:04:18.560 --> 00:04:22.010
Not that we do this a lot besides
homework assignments in school, but

84
00:04:22.010 --> 00:04:24.480
I mean if you needed to for work for
whatever reason, you could.

85
00:04:24.480 --> 00:04:30.750
This is the new way, you put a and
b in an array and then you pull a out and

86
00:04:30.750 --> 00:04:34.352
assign it to the b property and you pull
b out and assign it to the a property.

87
00:04:35.600 --> 00:04:37.856
That make sense, what's going on there?

88
00:04:37.856 --> 00:04:40.607
So that's one way,
I mean that's was one thing.

89
00:04:40.607 --> 00:04:45.376
I don't know if this is as
practical as it looks cool for

90
00:04:45.376 --> 00:04:48.704
a demo, but it is a thing you could do.

91
00:04:48.704 --> 00:04:57.070
[COUGH] So, and again, you can couple
this up inside the method signature.

92
00:04:57.070 --> 00:05:00.801
So if I have a function
called doSomething and

93
00:05:00.801 --> 00:05:06.496
I'm gonna pass it an array of numbers,
I could destructure first and

94
00:05:06.496 --> 00:05:11.420
second and then everything else
can go into the others guy.

95
00:05:11.420 --> 00:05:12.840
That's pretty sweet, right?

96
00:05:14.560 --> 00:05:18.381
So you can just throw it all
up in the method signature.

97
00:05:18.381 --> 00:05:23.083
Again, one thing that I love in
the ES6 and I don't like about now is,

98
00:05:23.083 --> 00:05:26.593
we spend the first few lines
pulling things apart and

99
00:05:26.593 --> 00:05:29.726
setting up the code for
the rest of the method.

100
00:05:29.726 --> 00:05:32.310
And this kind of stuff helps you get
it all up in the method signature.

101
00:05:33.460 --> 00:05:35.350
Someone just OMGeed on the stream.

102
00:05:35.350 --> 00:05:36.170
That's awesome.

103
00:05:38.110 --> 00:05:39.640
So here's nested.

104
00:05:39.640 --> 00:05:46.230
So, if I have this nested array, again,
the variables 1, 3, and 6 are arbitrary.

105
00:05:46.230 --> 00:05:50.340
I'm only using them so you can see
what variable I'm meaning to get.

106
00:05:51.740 --> 00:05:54.610
So I have a three-dimensional
array right here.

107
00:05:54.610 --> 00:05:59.059
One, two, and then this array right here.

108
00:05:59.059 --> 00:06:04.009
And then I have another
three-dimensional array with 3,

109
00:06:04.009 --> 00:06:07.177
4, and then the third bit is 5, 6.

110
00:06:07.177 --> 00:06:11.064
So I wanna pull out one, skip two.

111
00:06:11.064 --> 00:06:15.024
I want to pull out the three into
a variable called three, skip four,

112
00:06:15.024 --> 00:06:16.540
skip five, and grab six.

113
00:06:18.340 --> 00:06:21.141
That make sense?

114
00:06:21.141 --> 00:06:22.923
And you could do that all
on a method signature.

115
00:06:22.923 --> 00:06:27.000
So pretty exciting.

116
00:06:27.000 --> 00:06:29.715
No one else is freaking
out on the live stream, so

117
00:06:29.715 --> 00:06:36.554
that's good.
&gt;&gt; Aaron Frost: Pattern errors.

118
00:06:36.554 --> 00:06:39.148
So this, the first one, line one there,

119
00:06:39.148 --> 00:06:46.341
you could pull x out,
&gt;&gt; Aaron Frost: It's basically gonna throw

120
00:06:46.341 --> 00:06:51.840
the 3 away, it's only gonna pull out the
index sub 0 and assign it to variable x.

121
00:06:51.840 --> 00:06:53.620
So x would equal 2 after this first line.

122
00:06:55.070 --> 00:07:00.616
On this second one, it's actually gonna
pull the 4 out because arrays and

123
00:07:00.616 --> 00:07:05.120
objects, they're indexes
are actually strings, right?

124
00:07:06.600 --> 00:07:12.325
So when I come to this array right here
and I've got something in the 0 spot,

125
00:07:12.325 --> 00:07:17.710
it's gonna go look for that object sub 0,
which, is it gonna find it?

126
00:07:18.760 --> 00:07:20.920
Yeah, because someone
made a property called 0,

127
00:07:20.920 --> 00:07:24.760
which is a really smart
thing to do in a map, right?

128
00:07:25.930 --> 00:07:28.050
Anyway, it would find it and
it would assign that to 4.

129
00:07:28.050 --> 00:07:30.187
So, would this work?

130
00:07:30.187 --> 00:07:33.422
Unfortunately, that would work, yeah.
&gt;&gt; Group: [LAUGH]

131
00:07:33.422 --> 00:07:35.296
&gt;&gt; Aaron Frost: And then if you try to

132
00:07:35.296 --> 00:07:38.120
pull x, y, and z out of it.

133
00:07:38.120 --> 00:07:41.928
If you try and pull three out and
the array's only got two,

134
00:07:41.928 --> 00:07:43.969
you're gonna throw an error.

135
00:07:43.969 --> 00:07:48.595
Make sense?
&gt;&gt; Aaron Frost: Is that what you thought

136
00:07:48.595 --> 00:07:50.470
would happen,
after what we talked about earlier?

137
00:07:51.880 --> 00:07:54.140
If you try and pull out z and
it's not there.

138
00:07:54.140 --> 00:07:55.936
We all, kind of, it was like,

139
00:07:55.936 --> 00:08:00.238
it's not gonna be very forgiving
unless I throw a question mark, right?

140
00:08:00.238 --> 00:08:05.020
Okay, so here's some refutable stuff.

141
00:08:05.020 --> 00:08:08.020
So that first line is the same
exact thing we just looked at,

142
00:08:08.020 --> 00:08:09.760
where it was gonna throw an error.

143
00:08:11.170 --> 00:08:14.740
But we just refuted the whole
entire pattern and now we're fine.

144
00:08:14.740 --> 00:08:19.240
So x is 1, y is 2, and z is undefined.

145
00:08:19.240 --> 00:08:20.340
Which is, hopefully,

146
00:08:20.340 --> 00:08:24.730
what you guys thought it was gonna do
after my expert explanation of patterns.

147
00:08:25.990 --> 00:08:28.680
And then the second
line is the same thing,

148
00:08:28.680 --> 00:08:33.290
except for instead of refuting all of it,
you're just refuting the third variable.

