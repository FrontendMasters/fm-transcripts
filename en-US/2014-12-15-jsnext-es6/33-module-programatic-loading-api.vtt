WEBVTT

1
00:00:00.000 --> 00:00:03.770
[MUSIC]

2
00:00:03.770 --> 00:00:06.770
&gt;&gt; Aaron Frost: So let me talk about
the Programmatic Loading API real quick.

3
00:00:06.770 --> 00:00:08.790
This is what it looks like.

4
00:00:08.790 --> 00:00:12.320
So you say system.import,
and you give it the path.

5
00:00:13.560 --> 00:00:18.210
And then it's gonna go ahead and
return to you a promise.

6
00:00:18.210 --> 00:00:23.581
And when the promise comes back,
it's gonna give you the module back, okay?

7
00:00:23.581 --> 00:00:26.646
So who here is not familiar with promises?

8
00:00:26.646 --> 00:00:28.047
Cuz this is promise in text here.

9
00:00:28.047 --> 00:00:30.026
This is .then.

10
00:00:30.026 --> 00:00:34.079
It basically makes async code cleaner but
you're gonna call system.import and

11
00:00:34.079 --> 00:00:38.069
then you're gonna, when when it gets back,
you're gonna just call .then and

12
00:00:38.069 --> 00:00:40.860
it won't execute this function here.

13
00:00:40.860 --> 00:00:44.740
Until it actually goes out, gets that
file, brings it back in, evaluates it, and

14
00:00:44.740 --> 00:00:45.990
then it will give it to you.

15
00:00:45.990 --> 00:00:46.630
That make sense?

16
00:00:47.690 --> 00:00:51.380
So, and if there's an error,
you can also catch the error as well,

17
00:00:51.380 --> 00:00:54.140
but this is what
the import API looks like.

18
00:00:54.140 --> 00:00:59.650
It's based on promises, and the promises
provide whatever was exported.

19
00:00:59.650 --> 00:01:03.288
You could use promises to
load multiple at one time so

20
00:01:03.288 --> 00:01:06.030
you could be like hey, Promise.all.

21
00:01:06.030 --> 00:01:10.275
And then you could have just an array of
file paths and you could do a map on it

22
00:01:10.275 --> 00:01:16.170
and say system.import each one, and each
one of that map would return the promise.

23
00:01:16.170 --> 00:01:19.501
So you basically have
an array of promises.

24
00:01:19.501 --> 00:01:22.832
And then you could put that
inside of this promise.all, and

25
00:01:22.832 --> 00:01:26.570
call .then and it would give you
back an array of modules, anyway.

26
00:01:27.690 --> 00:01:32.270
This is how you can programmatically
use a loading API, okay?

27
00:01:32.270 --> 00:01:37.268
The loading API has multiple methods and
some of them look redundant.

28
00:01:37.268 --> 00:01:43.532
System.import and system.module,
they both return the module via an import.

29
00:01:43.532 --> 00:01:46.200
I don't know the diff
to be honest with you.

30
00:01:46.200 --> 00:01:50.880
I mean the source is a string or
a reference to the path.

31
00:01:51.960 --> 00:01:55.774
You can set one, if you created a module
you can go ahead and set it, and

32
00:01:55.774 --> 00:01:59.332
then you can define one which will
eval the code but not import it,

33
00:01:59.332 --> 00:02:01.100
I don't think, I'm not sure.

34
00:02:01.100 --> 00:02:03.119
I wish had better explanations though,
yeah?

35
00:02:03.119 --> 00:02:06.727
&gt;&gt; Speaker 2: I'm not sure if
there's an answer for this yet but,

36
00:02:06.727 --> 00:02:12.385
there's a question on chat about, if one
of the things you're trying to export,

37
00:02:12.385 --> 00:02:16.180
say it's a relative path
one like the re-exporting.

38
00:02:16.180 --> 00:02:21.020
If it can't find that and
import to export, does it throw?

39
00:02:21.020 --> 00:02:24.590
&gt;&gt; Aaron Frost: Yeah, so I'm guessing
that, so see this system right here,

40
00:02:24.590 --> 00:02:26.320
this System.import?

41
00:02:26.320 --> 00:02:28.510
And then it does a then, and a catch.

42
00:02:28.510 --> 00:02:32.421
Then is the success on the promise, and
the catch is the error on the promise.

43
00:02:32.421 --> 00:02:34.276
I'm guessing you'd get a catch on that.

44
00:02:34.276 --> 00:02:37.748
&gt;&gt; Speaker 2: But I think she's talking
more like in the actual definition of

45
00:02:37.748 --> 00:02:40.684
a module, like if you went back and
a few slides.

46
00:02:40.684 --> 00:02:42.338
&gt;&gt; Aaron Frost: Back in
the import export stuff?

47
00:02:42.338 --> 00:02:45.755
&gt;&gt; Speaker 2: Yeah, like if you're trying
to export from some other file and

48
00:02:45.755 --> 00:02:47.512
it can't find it-
&gt;&gt; Aaron Frost: Can't do it.

49
00:02:47.512 --> 00:02:48.364
&gt;&gt; Speaker 2: Does it throw?

50
00:02:48.364 --> 00:02:50.831
&gt;&gt; Aaron Frost: That's a good question.

51
00:02:50.831 --> 00:02:52.677
I would imagine that it throws.

52
00:02:55.938 --> 00:02:59.735
&gt;&gt; Aaron Frost: Anyway, so this is
the API, import, module, set, and define.

53
00:02:59.735 --> 00:03:02.286
Again I wish I had been able to
mess around with this stuff and

54
00:03:02.286 --> 00:03:04.290
give you guys better explanations.

55
00:03:04.290 --> 00:03:08.852
There is something coming in
the future which is a module tag,

56
00:03:08.852 --> 00:03:12.197
which will kind of take
place of a script tag.

57
00:03:12.197 --> 00:03:17.641
And you'll just give it the path to
the module that you want it to import,

58
00:03:17.641 --> 00:03:23.084
and you can kind of polyfill this
thing by, there's a polyfill out there

59
00:03:23.084 --> 00:03:29.050
right now that will allow you to kinda
get the same kind of functionality.

60
00:03:29.050 --> 00:03:36.402
So let's say we go to import
jQuery from our lib/jquery.

61
00:03:36.402 --> 00:03:40.881
If you go ahead and
log the dollar sign is in this,

62
00:03:40.881 --> 00:03:46.687
that basically tests to see if
this has the jQuery object in it.

63
00:03:46.687 --> 00:03:50.636
And for
us this is gonna be the window, right?

64
00:03:50.636 --> 00:03:54.160
Because we import it in a module it
didn't actually put jQuery on the window.

65
00:03:54.160 --> 00:03:55.200
It kept it local.

66
00:03:55.200 --> 00:03:57.390
It's like localized to our module.

67
00:03:57.390 --> 00:04:00.439
So you know how normally,
any time you import jQuery,

68
00:04:00.439 --> 00:04:04.060
it clobbers the window with
a dollar sign no matter what?

69
00:04:04.060 --> 00:04:08.075
This thing would maintain
it into your module.

70
00:04:08.075 --> 00:04:12.879
However, you can still talk to
the window if you needed to

71
00:04:12.879 --> 00:04:17.838
and,
&gt;&gt; Aaron Frost: The module tag forces

72
00:04:17.838 --> 00:04:23.040
strict mode, so
there's no pre-ES5 syntax in here.

73
00:04:23.040 --> 00:04:28.797
It's all forced you to use
strict mode in here, so yeah.

74
00:04:28.797 --> 00:04:31.909
&gt;&gt; Speaker 3: Does that allow for
multiple jQuery libraries?

75
00:04:31.909 --> 00:04:33.386
&gt;&gt; Aaron Frost: Probably, I hope so, but

76
00:04:33.386 --> 00:04:37.013
if you had two sections of code
that depended on different ones,

77
00:04:37.013 --> 00:04:41.800
you can just make them separate modules
and then it doesn't matter, right?

78
00:04:41.800 --> 00:04:43.889
You could just import them,
import one in one module and

79
00:04:43.889 --> 00:04:46.820
import the other in another module,
and they don't care about each other.

80
00:04:46.820 --> 00:04:49.634
Yeah?
&gt;&gt; Speaker 2: So with that module tag,

81
00:04:49.634 --> 00:04:52.395
how do you name the module?

82
00:04:52.395 --> 00:04:57.793
So you have a module tag, what if I want
to use that module in a script tag then,

83
00:04:57.793 --> 00:05:00.570
what is its name or whatever?

84
00:05:00.570 --> 00:05:01.360
&gt;&gt; Aaron Frost: That's a good question.

85
00:05:02.960 --> 00:05:05.250
I don't know.

86
00:05:05.250 --> 00:05:06.223
Can someone write that down and
we'll look it up?

87
00:05:06.223 --> 00:05:07.510
&gt;&gt; [INAUDIBLE]
&gt;&gt; Aaron Frost: Yeah.

