WEBVTT

1
00:00:00.000 --> 00:00:04.303
[MUSIC]

2
00:00:04.303 --> 00:00:05.970
&gt;&gt; Aaron Frost: All right,
spread operators.

3
00:00:07.650 --> 00:00:08.440
Quick lesson.

4
00:00:08.440 --> 00:00:10.050
These are not hard to grok.

5
00:00:10.050 --> 00:00:11.600
You guys can play around with them,

6
00:00:11.600 --> 00:00:13.920
we're going to take a few
minute break when we're done.

7
00:00:13.920 --> 00:00:14.430
They're simple.

8
00:00:15.530 --> 00:00:19.159
So, we have this array right?

9
00:00:20.200 --> 00:00:25.501
Apparently, the way we pull arrays

10
00:00:25.501 --> 00:00:32.130
apart is kinda manual but, this is
kinda the the impetus of what it does.

11
00:00:32.130 --> 00:00:34.990
If you log nums it logs
in the array of nums.

12
00:00:34.990 --> 00:00:39.820
If you log dot dot dot nums,
it spreads the array out, into its

13
00:00:39.820 --> 00:00:44.520
individual pieces, and then we'll log them
in individually, does that makes sense?

14
00:00:44.520 --> 00:00:45.410
So in place.

15
00:00:45.410 --> 00:00:51.330
It's gonna kind of replace this with
all the individual bits from here.

16
00:00:51.330 --> 00:00:54.480
So rather than logging in and
an array with one two three.

17
00:00:54.480 --> 00:00:58.812
You get the actual pieces individually.
&gt;&gt; Speaker 2: Like easier than

18
00:00:58.812 --> 00:01:02.124
calling reply or something?
&gt;&gt; Aaron Frost: Apply and [CROSSTALK]

19
00:01:02.124 --> 00:01:02.940
&gt;&gt; Speaker 2: Like .apply and.

20
00:01:02.940 --> 00:01:04.780
&gt;&gt; Aaron Frost: I see what you're saying.

21
00:01:04.780 --> 00:01:09.640
Yeah you totally could use this with
call instead of an apply, right?

22
00:01:09.640 --> 00:01:12.970
There's some other use cases as well,
though.

23
00:01:12.970 --> 00:01:15.340
It's like normally in the past
when we've got this array,

24
00:01:15.340 --> 00:01:19.730
like I've got an array of things and
I need to pull it apart,

25
00:01:19.730 --> 00:01:24.330
I manually go pull that guy out and
then I'm going to pull that guy out.

26
00:01:24.330 --> 00:01:25.480
And I pass him in right.

27
00:01:27.030 --> 00:01:30.230
But now with this thing,
I can just throw them all in there.

28
00:01:30.230 --> 00:01:32.210
And this guy only cares about two of them,
so

29
00:01:32.210 --> 00:01:34.170
it's going to spread
out all three of them.

30
00:01:34.170 --> 00:01:36.330
But it's going to ignore
the third one right?

31
00:01:36.330 --> 00:01:38.810
And you basically get
the exact same functionality.

32
00:01:40.500 --> 00:01:47.030
That's kind of a comparison of how we used
to do it versus how we would do it now.

33
00:01:47.030 --> 00:01:49.480
So some examples of what you
might do with spreading.

34
00:01:50.840 --> 00:01:55.360
You can on the fly you can
construct some new arrays.

35
00:01:55.360 --> 00:01:57.710
So check out that syntax there.

36
00:01:57.710 --> 00:02:03.570
I've got a syntax with nums,
and a syntax with letters and

37
00:02:03.570 --> 00:02:09.030
I make a new array and I just spread out
the numbers of the letters into it and

38
00:02:09.030 --> 00:02:10.800
then I end up with this nori over here.

39
00:02:12.270 --> 00:02:13.590
It's got everything there.

40
00:02:13.590 --> 00:02:16.552
So that's like an example
of something you could

41
00:02:16.552 --> 00:02:23.359
do.
&gt;&gt; Aaron Frost: It can be, you can spread

42
00:02:23.359 --> 00:02:28.175
out the return value from function call so
like if I had this get nums or then I

43
00:02:28.175 --> 00:02:34.270
don't know that thing like had to go to
the local storage and get it or whatever.

44
00:02:34.270 --> 00:02:39.180
And then it returns that I could,
by prefixing it with a dot dot dot,

45
00:02:39.180 --> 00:02:40.730
it looks like a wonky method call, but

46
00:02:40.730 --> 00:02:44.690
really what I'm doing is I'm spreading
out the result of that method call.

47
00:02:45.750 --> 00:02:51.540
So you could do that,
that's one way you can use it.

48
00:02:51.540 --> 00:02:54.510
And I spread it out into a new
array that I assigned to b, so,

49
00:02:57.170 --> 00:03:00.980
there's that it's kind of simple I
mean I don't know what all to say.

50
00:03:02.140 --> 00:03:03.110
Any questions about it?

51
00:03:04.570 --> 00:03:08.496
Yeah Tony is saying it's like Ruby or
CoffeeScript, totally just like that,

52
00:03:08.496 --> 00:03:10.600
that's where it came from.

53
00:03:10.600 --> 00:03:15.140
When we talked about the tc39
adopting de facto standards.

54
00:03:15.140 --> 00:03:19.794
This is a typical defacto standard
that other languages were doing,

55
00:03:19.794 --> 00:03:22.610
people liked, we adopted it or.

56
00:03:22.610 --> 00:03:27.076
We, Ecma scripts, adopted it for

57
00:03:27.076 --> 00:03:33.886
all fort its interface for its API, so.
&gt;&gt; Speaker 3: Could you use it in

58
00:03:33.886 --> 00:03:38.729
combination with destructuring assignment?
&gt;&gt; Aaron Frost: Hold on,

59
00:03:38.729 --> 00:03:41.220
totally you could totally do that.

60
00:03:41.220 --> 00:03:44.260
Can we do that when we do destructuring.

61
00:03:44.260 --> 00:03:49.000
Destructuring is a big part, so let's
cover that when we get to destructuring,

62
00:03:49.000 --> 00:03:50.120
is that cool?
&gt;&gt; Speaker 3: Yeah.

63
00:03:50.120 --> 00:03:51.480
&gt;&gt; Aaron Frost: So everyone take

64
00:03:51.480 --> 00:03:55.980
five minutes try out some of this stuff
see if you can get it to work or break.

65
00:03:55.980 --> 00:03:56.840
See what works better.

66
00:03:56.840 --> 00:03:59.130
See what works worse.

67
00:04:02.930 --> 00:04:04.380
Tried in the Traceur Repl.

68
00:04:04.380 --> 00:04:06.330
I think it works in Firefox.

69
00:04:07.980 --> 00:04:13.233
Yeah, you're good in Firefox and
you're good in

70
00:04:13.233 --> 00:04:18.910
W.K.
&gt;&gt; Aaron Frost: Web kit?

71
00:04:18.910 --> 00:04:19.410
Yeah, well.

72
00:04:21.240 --> 00:04:22.620
I don't think that's true.

73
00:04:22.620 --> 00:04:23.994
But whatever.

74
00:04:23.994 --> 00:04:25.156
Anyway, yeah, try it out.

75
00:04:25.156 --> 00:04:27.644
EJS has it as well.

76
00:04:27.644 --> 00:04:31.740
EJS has implemented the most features.

77
00:04:31.740 --> 00:04:36.260
If you look at this table,
you look at who's got the most,

78
00:04:36.260 --> 00:04:38.770
well sorry Firefox has the most.

79
00:04:38.770 --> 00:04:41.130
EJS has the second most.

80
00:04:41.130 --> 00:04:45.170
And EJS is a bit more cross platform,
so yeah.

81
00:04:45.170 --> 00:04:47.710
Anyway traces are a lot of as well.

82
00:04:49.340 --> 00:04:52.240
A lot of these ones with high council they
have all these ones at the bottom that

83
00:04:52.240 --> 00:04:56.040
are just like,
they extended the number prototype for

84
00:04:56.040 --> 00:05:01.010
the math prototype and
they got 30 things, kind of easy.

85
00:05:01.010 --> 00:05:04.450
They're very prototype stuff as well.

86
00:05:09.340 --> 00:05:13.790
So, we're just going to try this live if
anyone has any questions, let me know.

