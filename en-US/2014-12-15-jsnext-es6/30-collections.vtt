WEBVTT

1
00:00:00.000 --> 00:00:04.105
[MUSIC]

2
00:00:04.105 --> 00:00:07.300
&gt;&gt; Aaron Frost: Three collections sets,
maps, and weak maps.

3
00:00:07.300 --> 00:00:10.080
You guys read a bit about them?

4
00:00:10.080 --> 00:00:13.472
Okay, they're kind of like things we
already use today, but they're different,

5
00:00:13.472 --> 00:00:15.300
so we're going to explain
them a little bit.

6
00:00:16.420 --> 00:00:22.335
So Set is like an array, Map is like
a Key-Value Object that we normally use.

7
00:00:22.335 --> 00:00:26.838
And then WeakMap is like a Map,
but still different still.

8
00:00:26.838 --> 00:00:29.089
So let's talk about each one.

9
00:00:29.089 --> 00:00:31.909
So sets, we're gonna cruise through them.

10
00:00:31.909 --> 00:00:36.930
So set's a unique collection of things,
and it will make sure that they're unique.

11
00:00:38.050 --> 00:00:40.570
So I just say new Set.

12
00:00:40.570 --> 00:00:42.590
I can add 1, 2, and 3.

13
00:00:42.590 --> 00:00:47.430
I can log the set.size,
it tells me there's 3, okay?

14
00:00:47.430 --> 00:00:53.570
The reason you'd put something in as a set
is because a set has a dot iterable on it,

15
00:00:53.570 --> 00:00:54.310
or dot iterator.

16
00:00:54.310 --> 00:00:57.560
And you can do some things with
iterators and four loops and

17
00:00:57.560 --> 00:00:59.599
stuff to get things out
of them efficiently.

18
00:01:01.260 --> 00:01:07.270
So that's why you'd put something
in a set as opposed to an array.

19
00:01:07.270 --> 00:01:11.427
So it forces unique values,
so if I call set.add and

20
00:01:11.427 --> 00:01:16.150
I give it 1 three times,
the length is still 1, we didn't

21
00:01:16.150 --> 00:01:21.006
add it three times like an array would've.
&gt;&gt; Aaron Frost: So

22
00:01:21.006 --> 00:01:25.730
if I make a set, and
I'm gonna highlight just the code here.

23
00:01:25.730 --> 00:01:30.499
And if I say has(1) it's gonna false,
and then we add 1 and

24
00:01:30.499 --> 00:01:32.910
if I say has(1) it's true.

25
00:01:32.910 --> 00:01:38.020
So I've now taught you has and
add, so now I can call clear,

26
00:01:38.020 --> 00:01:42.370
and if I say has(1) it's false again,
because it cleared out the set.

27
00:01:42.370 --> 00:01:43.255
So the set's now empty.

28
00:01:43.255 --> 00:01:45.640
That's how you clear out
a set is with clear.

29
00:01:45.640 --> 00:01:50.514
I can add 1 and 2 to it, and
it will tell me the size is 2.

30
00:01:50.514 --> 00:01:55.330
And if I delete 2,
the size will now be 1, okay?

31
00:01:55.330 --> 00:01:59.318
So these are kind of the methods
that you put on them.

32
00:01:59.318 --> 00:02:00.424
Yeah?

33
00:02:00.424 --> 00:02:05.353
Okay.
&gt;&gt; Aaron Frost: There's

34
00:02:05.353 --> 00:02:09.510
no type casting for uniqueness.

35
00:02:09.510 --> 00:02:15.690
So like you might expect it
to say maybe a 1 in string 1.

36
00:02:16.770 --> 00:02:19.920
Are the same, but they're not, right?

37
00:02:19.920 --> 00:02:23.940
So, if I add 1 and
if I say has(1), it's true.

38
00:02:23.940 --> 00:02:26.090
If I have a string 1, it's false.

39
00:02:26.090 --> 00:02:27.230
So it's not gonna typecast that.

40
00:02:27.230 --> 00:02:32.800
A lot of things in the past
to typecast strings and

41
00:02:32.800 --> 00:02:36.370
numbers to be interchangeable,
but this definitely doesn't.

42
00:02:36.370 --> 00:02:39.575
I can then add one and
then it will have one at that point, so.

43
00:02:39.575 --> 00:02:44.529
So yeah, to iterate over them,
if I make a new set,

44
00:02:44.529 --> 00:02:47.660
and again, see how I did this?

45
00:02:47.660 --> 00:02:51.420
I passed an array, you bet you
can make a set out of an array or

46
00:02:51.420 --> 00:02:55.760
you can do that, add syntax that I
showed you, to put things in there.

47
00:02:56.940 --> 00:02:58.380
This isn't supported everywhere.

48
00:02:58.380 --> 00:03:01.200
So, Chrome has got sets.

49
00:03:01.200 --> 00:03:02.360
At least some Chrome has got sets.

50
00:03:02.360 --> 00:03:03.880
Because my man's Chrome didn't have sets.

51
00:03:03.880 --> 00:03:08.790
But I swear I had sets the other day.

52
00:03:08.790 --> 00:03:11.760
I could be crazy, though.

53
00:03:11.760 --> 00:03:15.530
So some of the constructors
don't support this though.

54
00:03:15.530 --> 00:03:21.980
So if you try and make it set like
this like from an array, it may die.

55
00:03:21.980 --> 00:03:24.380
Actually it won't die,
it just will ignore it.

56
00:03:24.380 --> 00:03:26.290
So it will still run.

57
00:03:26.290 --> 00:03:31.190
I don't know which one's more dangerous to
be honest with you, but there's a new kind

58
00:03:31.190 --> 00:03:37.420
of for loop here in JavaScript that you're
gonna, and yes, you can see it's a for of.

59
00:03:37.420 --> 00:03:42.118
And if you have something that
has an iterator property,

60
00:03:42.118 --> 00:03:48.030
it will sit there and it will iterate
through each of the things in there, okay?

61
00:03:50.050 --> 00:03:52.650
So yeah, iterators are, okay.

62
00:03:52.650 --> 00:03:54.374
Iterators kind of go hand
in hand with generators.

63
00:03:54.374 --> 00:04:00.540
But it will just iterate
one by one through the set.

