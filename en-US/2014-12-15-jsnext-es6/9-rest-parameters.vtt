WEBVTT

1
00:00:00.000 --> 00:00:03.898
[MUSIC]

2
00:00:03.898 --> 00:00:05.270
&gt;&gt; Aaron Frost: Rest parameters,
what are they?

3
00:00:05.270 --> 00:00:06.720
Has anyone heard of Splat?

4
00:00:06.720 --> 00:00:07.550
Splat.

5
00:00:07.550 --> 00:00:09.966
Okay, CoffeeScript developers, okay.

6
00:00:09.966 --> 00:00:11.510
Anybody ever hear of VARARGS?

7
00:00:13.750 --> 00:00:14.800
You heard of that?

8
00:00:14.800 --> 00:00:16.711
Java developers, no?

9
00:00:16.711 --> 00:00:18.550
Not so much.

10
00:00:18.550 --> 00:00:19.349
Params?

11
00:00:20.750 --> 00:00:23.560
Yeah, C# developers, okay, all right.

12
00:00:23.560 --> 00:00:28.860
So does anyone still not know what Rest
Parameters is, like based off what I said?

13
00:00:28.860 --> 00:00:29.920
I got some confused looks.

14
00:00:29.920 --> 00:00:31.730
Okay, let's talk about it.

15
00:00:31.730 --> 00:00:32.610
Let's show it off then.

16
00:00:34.050 --> 00:00:38.420
This is Rest Parameters,
right there, okay?

17
00:00:39.530 --> 00:00:47.460
So you just, you prefix one of your
parameter names with dot dot dot,

18
00:00:47.460 --> 00:00:53.590
that's how you create a rest parameter,
and then the way you use it is like this.

19
00:00:56.790 --> 00:01:03.356
So I would have this Rest parameter called
bar, and I'm going to log bar.join.

20
00:01:03.356 --> 00:01:06.405
Because what it's gonna do is it's
gonna take all incoming arguments and

21
00:01:06.405 --> 00:01:08.430
it's going to put them
into an array called bar.

22
00:01:09.480 --> 00:01:13.280
Okay, and I can do array
things to it like join, right.

23
00:01:13.280 --> 00:01:15.880
So I'm going to say I, can, haz, teh,

24
00:01:15.880 --> 00:01:19.780
arguments It will go ahead and
put that into a string for me.

25
00:01:19.780 --> 00:01:21.490
That makes sense?

26
00:01:21.490 --> 00:01:24.872
What is doing it's just,
it's allowing you to catch all

27
00:01:24.872 --> 00:01:29.420
the parameters in one into an array.

28
00:01:30.440 --> 00:01:32.590
So, simple, right?

29
00:01:32.590 --> 00:01:36.273
It's not too hard, I think.

30
00:01:36.273 --> 00:01:39.580
It loads them all into an array
called bar in this example.

31
00:01:39.580 --> 00:01:44.087
And you can use it just
like you would any array.

32
00:01:44.087 --> 00:01:47.011
And some of you guys are like, my gosh,

33
00:01:47.011 --> 00:01:52.500
I finally have an object that I can
capture all the arguments onto, right?

34
00:01:52.500 --> 00:01:53.750
I've never had that before.

35
00:01:56.140 --> 00:01:59.050
So, no one's thinking this,
cuz we've always had that already, right?

36
00:01:59.050 --> 00:02:02.570
We've already been able to do this,
essentially, right?

37
00:02:04.130 --> 00:02:09.640
Because we've had the arguments object,
right?

38
00:02:09.640 --> 00:02:12.890
We've always been able to
talk to the arguments object.

39
00:02:12.890 --> 00:02:14.840
Yeah, did you have a-
&gt;&gt; Speaker 2: But,

40
00:02:14.840 --> 00:02:19.400
is this a proper array or is this
the arguments object in the array objects?

41
00:02:19.400 --> 00:02:20.644
&gt;&gt; Aaron Frost: So
I'm gonna talk about that.

42
00:02:20.644 --> 00:02:24.610
It is a proper array, yeah, and so
I'm gonna point out the differences here.

43
00:02:24.610 --> 00:02:27.814
So with arguments,
arguments isn't a natural array.

44
00:02:27.814 --> 00:02:32.915
Okay, it's array-ish, you poke it and
you can see it has a length property,

45
00:02:32.915 --> 00:02:36.392
so you think that you might be
able to call joint on a but

46
00:02:36.392 --> 00:02:38.920
it freaks out cuz it's not an array.

47
00:02:38.920 --> 00:02:41.030
It's a pseudo array, almost.

48
00:02:41.030 --> 00:02:46.313
And so in order to kind of give you
the same thing, you'd have to join

49
00:02:46.313 --> 00:02:52.260
it out here, or you could always do
something that's even more confusing.

50
00:02:54.790 --> 00:02:56.280
I'll show you what you could do.

51
00:02:57.390 --> 00:03:05.445
You could say
array.prototype.join.call(arguments) and

52
00:03:05.445 --> 00:03:09.834
that would do the exact same thing,

53
00:03:09.834 --> 00:03:14.470
as calling arrary.join, okay.

54
00:03:14.470 --> 00:03:15.410
So, you could always do this.

55
00:03:15.410 --> 00:03:18.970
You could always pass arguments
to the array prototype and

56
00:03:18.970 --> 00:03:21.090
it usually can figure out what to do,
but not always.

57
00:03:22.580 --> 00:03:25.250
But, anyways, so yeah,

58
00:03:25.250 --> 00:03:29.630
that's kind of where I was going was,
we always have been able to do this.

59
00:03:29.630 --> 00:03:30.730
It's not a big deal, right?

60
00:03:30.730 --> 00:03:32.150
It's array-ish, it has a length.

61
00:03:32.150 --> 00:03:35.090
I get things out of arguments by index,
right.

62
00:03:36.110 --> 00:03:37.480
It's got three things in it,

63
00:03:37.480 --> 00:03:42.350
I can get the first one by arguments
sub 0 arguments sub 1 arguments sub 2.

64
00:03:42.350 --> 00:03:44.880
So I kind of treat it like
an array in some aspect, but

65
00:03:44.880 --> 00:03:48.110
it's totally not an array, right?

66
00:03:48.110 --> 00:03:50.510
And so
any of the array methods aren't there and

67
00:03:50.510 --> 00:03:52.310
if you call them then
you're gonna get an error.

68
00:03:52.310 --> 00:03:56.318
So we've always been able
to have the arguments, but

69
00:03:56.318 --> 00:04:01.584
now we kind of have a different way
to do it that's, I think, better.

70
00:04:01.584 --> 00:04:02.332
And let me explain why.

71
00:04:02.332 --> 00:04:08.487
So,
&gt;&gt; Aaron Frost: Yeah,

72
00:04:08.487 --> 00:04:10.670
here's what I was saying earlier.

73
00:04:10.670 --> 00:04:12.600
I forgot I had this slide, sorry.

74
00:04:13.940 --> 00:04:19.180
But yeah, you could call
array.prototype.join.call(arguments).

75
00:04:19.180 --> 00:04:21.928
Yeah you have to pass it the space so
that it knows what to join on.

76
00:04:21.928 --> 00:04:23.973
Anyway, so yeah, so

77
00:04:23.973 --> 00:04:29.894
you've always been kind of able
to do the same kind of things.

78
00:04:29.894 --> 00:04:32.620
There's some major differences, though.

79
00:04:32.620 --> 00:04:37.936
The rest argument only includes
non-specified arguments, okay?

80
00:04:37.936 --> 00:04:41.313
So arguments includes every argument,

81
00:04:41.313 --> 00:04:45.890
regardless of whether you specified it or
not, okay.

82
00:04:46.980 --> 00:04:49.897
Let me kind of give an example of that.

83
00:04:49.897 --> 00:04:54.152
So, with this argument function,
argumenty,

84
00:04:54.152 --> 00:04:58.636
I have name and
if I console log name and arguments.

85
00:04:58.636 --> 00:05:02.290
It's gonna go ahead, well actually,

86
00:05:02.290 --> 00:05:07.834
let's go to run this in Firefox so
everyone can kind of see.

87
00:05:17.108 --> 00:05:17.710
&gt;&gt; Aaron Frost: Can you guys see that?

88
00:05:17.710 --> 00:05:23.882
Is that big enough?

89
00:05:23.882 --> 00:05:28.140
Okay so I'm going to go ahead and
run this and we'll look at the outcome.

90
00:05:29.400 --> 00:05:36.160
So when this first was called, it logged
the name, like we thought it was,

91
00:05:36.160 --> 00:05:40.630
but it also logged the arguments,
and the name was in the arguments.

92
00:05:40.630 --> 00:05:41.780
You see that?

93
00:05:41.780 --> 00:05:44.452
So I kind of got the name two times,
right?

94
00:05:48.046 --> 00:05:49.530
&gt;&gt; Aaron Frost: Look over here.

95
00:05:49.530 --> 00:05:54.110
And then in the second one, where I used
the rest parameters, I put in the name and

96
00:05:54.110 --> 00:05:56.470
then all the other ones over here.

97
00:05:56.470 --> 00:05:58.060
And when I look at it,
I got the name over here.

98
00:05:58.060 --> 00:06:02.060
And when you look at this array,
the name's not in there right any more.

99
00:06:02.060 --> 00:06:04.920
Only the last name and
the city and state and stuff.

100
00:06:04.920 --> 00:06:08.390
So you don't,
it just picks up the rest of the stuff,

101
00:06:08.390 --> 00:06:10.210
not everything like the arguments object.

102
00:06:10.210 --> 00:06:14.360
So that's one of the major differences.

