WEBVTT

1
00:00:00.000 --> 00:00:03.755
[MUSIC]

2
00:00:03.755 --> 00:00:05.500
&gt;&gt; Aaron Frost: So when we get the health.

3
00:00:05.500 --> 00:00:10.380
So the health is not protected
behind this obscurity

4
00:00:12.820 --> 00:00:18.420
pattern where people won't be able to see
what the key is to get the health out or

5
00:00:18.420 --> 00:00:19.820
to manipulate it.

6
00:00:19.820 --> 00:00:22.120
So they'll set the health.

7
00:00:22.120 --> 00:00:23.700
You know,
they'll be able to get the health out.

8
00:00:23.700 --> 00:00:27.050
And then they can say get.isAlive.

9
00:00:27.050 --> 00:00:30.980
So they'll be able to just say,
monster.isAlive, and

10
00:00:30.980 --> 00:00:35.560
it will return if the health
is greater than 0.

11
00:00:35.560 --> 00:00:38.750
So you'll be able to know if it's alive or
not, right?

12
00:00:38.750 --> 00:00:44.120
And like,
you could make it an attack method

13
00:00:44.120 --> 00:00:49.450
that could pick some random number between
zero and the amount of points remaining.

14
00:00:49.450 --> 00:00:54.000
And it does some calculation to
subtract some of the health left,

15
00:00:54.000 --> 00:00:57.540
and then isAlive could
fire something else, or.

16
00:00:57.540 --> 00:00:59.530
And you could, anyway, yeah.

17
00:01:00.730 --> 00:01:02.429
So does that make sense?

18
00:01:02.429 --> 00:01:08.830
Like, you could make one that says,
alert when dead, that returns a promise.

19
00:01:10.022 --> 00:01:11.130
We didn't talk about promises yet.

20
00:01:11.130 --> 00:01:14.280
Anyways, this is the syntax.

21
00:01:14.280 --> 00:01:17.030
Sorry, I'm nerding out on
the monster concept, I apologize.

22
00:01:18.050 --> 00:01:20.280
I've got a three year old, and
we talk a lot about it at my house.

23
00:01:21.367 --> 00:01:22.475
Okay.
&gt;&gt; Speaker 2: And how do you call that

24
00:01:22.475 --> 00:01:23.949
get function now [INAUDIBLE]?

25
00:01:23.949 --> 00:01:24.607
&gt;&gt; Aaron Frost: Yeah, yeah, yeah.

26
00:01:24.607 --> 00:01:25.479
Good call.

27
00:01:25.479 --> 00:01:26.840
Let's copy this back over.

28
00:01:28.800 --> 00:01:32.201
Copy, Traceur.

29
00:01:32.201 --> 00:01:36.050
And then we're gonna change this to var so
it doesn't freak.

30
00:01:36.050 --> 00:01:39.661
And then we're gonna say,

31
00:01:39.661 --> 00:01:44.057
var kevin = new Monster Kevin and

32
00:01:44.057 --> 00:01:50.818
we'll give him more hit points this time,
right?

33
00:01:50.818 --> 00:01:54.287
And then we'll say,

34
00:01:54.287 --> 00:01:59.114
alert(kevin.isAlive).

35
00:02:01.628 --> 00:02:04.101
&gt;&gt; Aaron Frost: So
when you use that get syntax,

36
00:02:04.101 --> 00:02:09.517
you specify it as like a method call,
but you treat it like a property.

37
00:02:09.517 --> 00:02:13.989
And this is part of ES5 spec,
they have like a define on property.

38
00:02:13.989 --> 00:02:17.720
And it's kind of like getters and
setters for JavaScript.

39
00:02:17.720 --> 00:02:20.901
And you could do the same
thing if you wanted to.

40
00:02:20.901 --> 00:02:24.920
You could be like, set isAlive.

41
00:02:32.409 --> 00:02:38.490
&gt;&gt; Aaron Frost: Alive.

42
00:02:38.490 --> 00:02:40.737
Bloody thing.

43
00:02:40.737 --> 00:02:41.911
Hold on, I've got to kill him.

44
00:02:45.668 --> 00:02:53.316
&gt;&gt; Aaron Frost: And
then we'll just be like, if not alive.

45
00:02:55.692 --> 00:03:02.189
&gt;&gt; Aaron Frost: This sub monsterHealth

46
00:03:02.189 --> 00:03:06.415
is equal to 0.

47
00:03:06.415 --> 00:03:10.252
And then we could say

48
00:03:10.252 --> 00:03:15.671
kevin.isAlive = false and

49
00:03:15.671 --> 00:03:23.131
then we can say alert kevin.isAlive.

50
00:03:23.131 --> 00:03:28.367
And he's dead.
We killed him with one Voldemort thing.

51
00:03:28.367 --> 00:03:29.278
&gt;&gt; Speaker 2: Hope you feel better.

52
00:03:29.278 --> 00:03:33.158
&gt;&gt; Aaron Frost: Yeah, I do.

53
00:03:33.158 --> 00:03:35.270
Anyway, does that make sense?

54
00:03:35.270 --> 00:03:38.945
Anyone, if you're not super familiar
with getters and setters properties,

55
00:03:38.945 --> 00:03:39.730
check them out.

56
00:03:39.730 --> 00:03:40.463
They're pretty cool.

57
00:03:40.463 --> 00:03:41.480
You should start using them.

58
00:03:42.940 --> 00:03:44.070
But yeah.

59
00:03:44.070 --> 00:03:44.820
Good question.

60
00:03:44.820 --> 00:03:47.230
Thanks for asking that,
cuz I didn't include it in the slide.

61
00:03:47.230 --> 00:03:48.049
&gt;&gt; Speaker 2: I'm sorry.
And one more.

62
00:03:48.049 --> 00:03:51.710
[INAUDIBLE] Can you also
do it with this.isAlive?

63
00:03:51.710 --> 00:03:55.560
Does it work from within the class,
or does it only work externally?

64
00:03:55.560 --> 00:03:56.496
&gt;&gt; Aaron Frost: No, no, no.
It totally works for

65
00:03:56.496 --> 00:03:57.413
me from within the class.

66
00:03:57.413 --> 00:03:58.880
So yeah, let's do that.

67
00:04:00.630 --> 00:04:03.940
I'll actually show you a weakness in
the current implementation, if you want,

68
00:04:03.940 --> 00:04:05.262
that they're not going to fix.

69
00:04:05.262 --> 00:04:07.795
[LAUGH] How awesome is that?

70
00:04:07.795 --> 00:04:11.952
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Aaron Frost: Shh, quiet down, you.

71
00:04:17.446 --> 00:04:19.727
&gt;&gt; Aaron Frost: You go away.

72
00:04:19.727 --> 00:04:22.432
And you come out, okay.

73
00:04:22.432 --> 00:04:24.894
And you go away.

74
00:04:24.894 --> 00:04:28.680
Okay, so we're just gonna make a property.

75
00:04:29.820 --> 00:04:32.011
What did you want me to do,
what was your question again, sorry?

76
00:04:32.011 --> 00:04:34.071
&gt;&gt; Speaker 2: So I asked,
you already answered,

77
00:04:34.071 --> 00:04:37.311
if you can do this.isAlive
instead of just [INAUDIBLE]?

78
00:04:37.311 --> 00:04:40.051
&gt;&gt; Aaron Frost: Yeah,
totally, so we'll say foo.

79
00:04:44.669 --> 00:04:49.050
&gt;&gt; Aaron Frost: So now we have a method
foo our on our prototype, right?

80
00:04:49.050 --> 00:04:55.905
And we're gonna say console.log

81
00:04:55.905 --> 00:05:00.871
foo and this.isAlive.

82
00:05:00.871 --> 00:05:03.499
And then for that.

83
00:05:13.891 --> 00:05:18.003
&gt;&gt; Aaron Frost: Someone wants
to know I'm alive, and then.

84
00:05:22.019 --> 00:05:27.646
&gt;&gt; Aaron Frost: So we're just gonna

85
00:05:27.646 --> 00:05:32.947
call kevin.foo.

86
00:05:32.947 --> 00:05:36.797
So when we called this,

87
00:05:36.797 --> 00:05:40.840
it was like, am I alive?

88
00:05:40.840 --> 00:05:46.015
And he's like, someone wants to know if
I'm alive, and then he logged foo.true.

89
00:05:46.015 --> 00:05:47.064
So you can totally do that.

90
00:05:47.064 --> 00:05:48.966
Awesome, right?

91
00:05:48.966 --> 00:05:50.735
Who's ready for an endless loop?

92
00:05:50.735 --> 00:05:53.020
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Aaron Frost: Okay, I'm ready.

93
00:05:54.130 --> 00:05:57.678
I'll show you, cuz we're friends, okay?

94
00:05:59.583 --> 00:06:02.840
&gt;&gt; Aaron Frost: All right.
[COUGH] All right, I'm gonna delete these,

95
00:06:02.840 --> 00:06:05.277
just because we're done with them.

96
00:06:05.277 --> 00:06:08.789
Okay, so I'm going to say set name.

97
00:06:10.589 --> 00:06:11.597
&gt;&gt; Aaron Frost: Name.

98
00:06:20.673 --> 00:06:23.940
&gt;&gt; Aaron Frost: this.name = name.

99
00:06:25.310 --> 00:06:26.270
Who can see the problem?

100
00:06:27.610 --> 00:06:28.950
I mean, it's down here in red.

101
00:06:30.920 --> 00:06:32.170
Who can tell why that's happening?

102
00:06:34.920 --> 00:06:35.670
Can you guys see it?

103
00:06:35.670 --> 00:06:36.170
Sorry.

104
00:06:37.240 --> 00:06:38.980
If I blow it up,
it's going to go off the bottom.

105
00:06:38.980 --> 00:06:42.271
So you pretty much got to
get what I can show you.

106
00:06:47.551 --> 00:06:51.285
&gt;&gt; Speaker 3: Because it already have
a name property assigned to it, and

107
00:06:51.285 --> 00:06:53.660
you're assigning to it.

108
00:06:53.660 --> 00:06:57.990
&gt;&gt; Aaron Frost: So
when you call set name, yeah.

109
00:06:57.990 --> 00:07:04.870
So right here, he's going to,
he assigns this.name equals set name.

110
00:07:04.870 --> 00:07:08.010
Well, this.name is a call to
this function right here.

111
00:07:08.010 --> 00:07:09.740
So he sets name.

112
00:07:09.740 --> 00:07:11.627
He does the same thing, he's like, well,

113
00:07:11.627 --> 00:07:14.177
this.name is equal to whatever
name is being passed to me.

114
00:07:14.177 --> 00:07:18.834
So I'm going to call this and pass that,
which is going to do this and

115
00:07:18.834 --> 00:07:21.460
call that, which is going to do this.

116
00:07:21.460 --> 00:07:24.951
So you're in an endless loop, all right?

117
00:07:24.951 --> 00:07:30.159
So that sucks.

118
00:07:30.159 --> 00:07:30.860
Can you do it?

119
00:07:30.860 --> 00:07:31.450
Yeah, you can totally do it.

120
00:07:31.450 --> 00:07:34.484
You could probably do it
in ES5 today anyway, so

121
00:07:34.484 --> 00:07:37.310
It's probably not a thing
you need classes.

122
00:07:37.310 --> 00:07:41.030
I just noticed it when I was testing
this out, because I'm not smart, and

123
00:07:41.030 --> 00:07:45.660
I did this, and I was like,
yeah, that was stupid of me.

124
00:07:45.660 --> 00:07:49.430
And I did it, so, good question.

125
00:07:49.430 --> 00:07:53.400
You can do this stuff and
end up in the cyclical death trap.

126
00:07:54.430 --> 00:07:57.195
So we good?

127
00:07:57.195 --> 00:07:57.939
Okay.

128
00:08:00.850 --> 00:08:01.737
&gt;&gt; Aaron Frost: All right.

129
00:08:08.209 --> 00:08:12.893
&gt;&gt; Aaron Frost: Okay, set health,
and I can pass in the value.

130
00:08:12.893 --> 00:08:18.010
And then this is how you set it, by using
that same key that we talked about above.

131
00:08:19.440 --> 00:08:23.670
So you would call monster.health=100 and
it would pass in a new health.

132
00:08:25.370 --> 00:08:28.768
Attack, you could you could
pass in another monster and

133
00:08:28.768 --> 00:08:34.399
you could say, so, Kevin attacks
whoever our second monster is, right?

134
00:08:36.110 --> 00:08:40.360
And it would log that if you called
Kevin.attack and passed it another person.

135
00:08:42.050 --> 00:08:45.950
Which we may attack Kevin if he keeps it
up with the thick arrow thing, right?

136
00:08:45.950 --> 00:08:47.633
Or was that not Kevin?

137
00:08:47.633 --> 00:08:50.449
That was like Seth or somebody?

138
00:08:50.449 --> 00:08:52.259
Okay.

139
00:08:52.259 --> 00:08:53.009
So, yeah.

140
00:08:54.490 --> 00:08:56.822
You can have static properties.

141
00:08:56.822 --> 00:09:00.196
Like, every time you create a monster,

142
00:09:00.196 --> 00:09:04.880
if you wanted to add yourself
to the allMonsters array.

143
00:09:04.880 --> 00:09:08.690
You can go and
push yourself into the allMonsters array.

144
00:09:08.690 --> 00:09:11.570
So that's a static
property onto the class.

145
00:09:11.570 --> 00:09:15.250
Okay, so you can have static class
properties if you wanted to do that.

