WEBVTT

1
00:00:00.000 --> 00:00:04.441
[MUSIC]

2
00:00:04.441 --> 00:00:09.569
&gt;&gt; Aaron Frost: LET, CONST, and
Blocks, has anyone read about these?

3
00:00:09.569 --> 00:00:12.351
A little bit, a little bit, two guys.

4
00:00:12.351 --> 00:00:14.280
Online pricing, okay.

5
00:00:14.280 --> 00:00:18.902
So we've got two new types of variables,
and

6
00:00:18.902 --> 00:00:22.191
then a new thing called Blocks.

7
00:00:22.191 --> 00:00:26.008
So, CONST and LET replace VAR, right?

8
00:00:26.008 --> 00:00:27.072
We're done.

9
00:00:27.072 --> 00:00:28.043
Thank you very much.

10
00:00:28.043 --> 00:00:29.480
Any questions?
&gt;&gt; Off Camera 1: [LAUGH]

11
00:00:29.480 --> 00:00:31.876
&gt;&gt; Aaron Frost: No, it's actually a lot

12
00:00:31.876 --> 00:00:34.505
more technical than that.

13
00:00:34.505 --> 00:00:37.048
Douglas Crockford's got a sweet quote.

14
00:00:37.048 --> 00:00:39.896
This is,
don't grep-replace "var" with "let" or

15
00:00:39.896 --> 00:00:41.786
you will break the Internet, okay?

16
00:00:41.786 --> 00:00:44.376
Because they work very differently.

17
00:00:44.376 --> 00:00:50.824
And even though LET works rate,
your code depends on var,

18
00:00:50.824 --> 00:00:55.045
it depends on, it work in the var way.

19
00:00:55.045 --> 00:00:58.650
I'm a call the var way because it's not
the wrong way, just some of our works.

20
00:00:58.650 --> 00:01:04.168
And if you try to force your code
that works with var to use let,

21
00:01:04.168 --> 00:01:09.585
I'm gonna say probably won't
work just because most people

22
00:01:09.585 --> 00:01:14.493
don't understand what var
is actually doing, okay?

23
00:01:14.493 --> 00:01:19.739
So the topics for LET, CONST and BLOCK is,
I wanna talk of variable hoisting first.

24
00:01:19.739 --> 00:01:23.665
A lot of people who are advanced JAVA
are people don't necessarily understand

25
00:01:23.665 --> 00:01:24.746
Variable Hoisting.

26
00:01:24.746 --> 00:01:26.954
So I'm gonna go over it,
so you can understand.

27
00:01:26.954 --> 00:01:29.298
Now you get what LET's doing.

28
00:01:29.298 --> 00:01:32.726
Cuz a lot of people who don't
understand what Variable Hoisting is,

29
00:01:32.726 --> 00:01:34.509
don't understand why we need LET.

30
00:01:34.509 --> 00:01:37.483
So I'm gonna go through that, and
then we are gonna talk about LET.

31
00:01:37.483 --> 00:01:38.266
We are gonna talk about CONST.

32
00:01:38.266 --> 00:01:40.245
We are gonna talk about Block Functions.

33
00:01:40.245 --> 00:01:43.204
And Block Functions are really cool,
you guys will like him, I promise,

34
00:01:43.204 --> 00:01:44.890
even though you may not have heard of him.

35
00:01:44.890 --> 00:01:47.929
So, Variable Hoisting.

36
00:01:47.929 --> 00:01:50.962
So again, we're gonna talk about it
because we need to understand why we

37
00:01:50.962 --> 00:01:51.618
need to do LET.

38
00:01:51.618 --> 00:01:58.253
What this LET deal and a lot of,
there's a lot to understand about LET,

39
00:01:58.253 --> 00:02:02.026
it's not as simple as, it's a new VAR.

40
00:02:02.026 --> 00:02:05.092
You just use it when you want
to cuz it works differently.

41
00:02:05.092 --> 00:02:07.025
And there's a mentor who sees,

42
00:02:07.025 --> 00:02:11.963
your code will actually run different with
LET than it will with VAR, that's why I

43
00:02:11.963 --> 00:02:16.850
want to explain how VAR actually works as
opposed to how VAR may work in your head.

44
00:02:16.850 --> 00:02:21.135
And some people they think
they have the way LET works,

45
00:02:21.135 --> 00:02:23.974
they think that that's how VAR works.

46
00:02:23.974 --> 00:02:27.064
So when I explain LET,
they are like that's how VAR works, so

47
00:02:27.064 --> 00:02:28.498
what are you talking about?

48
00:02:28.498 --> 00:02:30.162
I'm like dude,
VAR does not work like that.

49
00:02:30.162 --> 00:02:33.460
So, that's why we go
through Variable Hoisting.

50
00:02:33.460 --> 00:02:36.968
So this is why a schmuck this
quote is says, using LET and

51
00:02:36.968 --> 00:02:41.449
CONST instead of VAR will have the odd
side effect, where your code will

52
00:02:41.449 --> 00:02:45.650
execute at runtime just as it
appears at development time, okay?

53
00:02:45.650 --> 00:02:50.115
And what that means is VAR,
the way you wrote your code,

54
00:02:50.115 --> 00:02:54.690
that's not how it's gonna be
executed by the compiler.

55
00:02:54.690 --> 00:02:57.042
You think it is, but it isn't,
and some of us know that and

56
00:02:57.042 --> 00:02:59.260
we write our code differently.

57
00:02:59.260 --> 00:03:04.078
But people who think that your code
written with VAR, that's how the compiler

58
00:03:04.078 --> 00:03:08.689
let's it execute, this is now the
compilers execute the way you wrote it.

59
00:03:08.689 --> 00:03:12.868
Another way of saying the same thing is
with VAR, the arrangement of your code has

60
00:03:12.868 --> 00:03:15.831
less to do with the way it
executes than you think it does.

61
00:03:15.831 --> 00:03:19.211
So, I'm gonna go ahead and explain this.

62
00:03:19.211 --> 00:03:24.239
So, I want everyone to take a second and
grok this function, okay?

63
00:03:24.239 --> 00:03:27.311
So, we have a call called outer and
we're gonna call it.

64
00:03:27.311 --> 00:03:31.433
And it's gonna make a variable called
a and that's gonna call a function

65
00:03:31.433 --> 00:03:35.029
call inner and all that's gonna
do is make a variable called b.

66
00:03:35.029 --> 00:03:36.740
Does anyone know what's gonna happen here?

67
00:03:38.550 --> 00:03:41.788
What's going to happen with a and b?
&gt;&gt; Off Camera 1: They're global.

68
00:03:41.788 --> 00:03:42.868
&gt;&gt; Aaron Frost: They're gonna become

69
00:03:42.868 --> 00:03:43.725
global, right?

70
00:03:43.725 --> 00:03:46.427
Because that used the word
VAR in strict mode.

71
00:03:46.427 --> 00:03:47.918
By the way,
if you're running a strict mode,

72
00:03:47.918 --> 00:03:49.302
you're gonna get an error for doing this.

73
00:03:49.302 --> 00:03:55.803
Anyway, by doing this
you wrote it like this.

74
00:03:55.803 --> 00:03:57.269
Okay, this is how you wrote it.

75
00:03:57.269 --> 00:04:01.756
Let me show you what the G
compiler evaluated it at us.

76
00:04:01.756 --> 00:04:07.210
There's how G evaluated your code, it said
cool, you didn't make valid declaration,

77
00:04:07.210 --> 00:04:11.064
I'm gonna hoist the declaration
of a clear to the very, very,

78
00:04:11.064 --> 00:04:12.900
very top of the scope, okay?

79
00:04:13.930 --> 00:04:17.412
Which is global and
I'm gonna set it equal to undefined.

80
00:04:17.412 --> 00:04:22.900
Okay, so it means like right here, I could
reference a and it would be undefined.

81
00:04:22.900 --> 00:04:27.691
And then I'm simply gonna assign it down
here in these two methods like these guys

82
00:04:27.691 --> 00:04:29.745
are simply going to assign a and b.

83
00:04:29.745 --> 00:04:31.473
That makes sense?

84
00:04:31.473 --> 00:04:33.165
So the way I wrote it,

85
00:04:33.165 --> 00:04:37.587
not a lot to do with the way
that it executed can we agree?

86
00:04:37.587 --> 00:04:41.025
Okay, we're going some
more examples of this.

87
00:04:41.025 --> 00:04:42.149
&gt;&gt; Off Camera 2: There is a question in

88
00:04:42.149 --> 00:04:43.544
chat
&gt;&gt; Aaron Frost: Yeah.

89
00:04:43.544 --> 00:04:45.437
&gt;&gt; Off Camera 2: Any idea why hoisting was

90
00:04:45.437 --> 00:04:51.745
invented?
&gt;&gt; Aaron Frost: That's a good question.

91
00:04:51.745 --> 00:04:53.620
I'm not positive but

92
00:04:53.620 --> 00:04:59.680
I remember we talked about where
automatic semi-colons came from.

93
00:04:59.680 --> 00:05:04.102
They were trying to make it like
a forgiving language so that,

94
00:05:04.102 --> 00:05:09.810
if you forgot a semi-colon you weren't
gonna kill your website because of it.

95
00:05:09.810 --> 00:05:13.250
I think it may have come from that,
however, I'm not 100% positive.

96
00:05:13.250 --> 00:05:15.192
And it may have been a mistake,

97
00:05:15.192 --> 00:05:19.239
that by the time they realized it
was there it was too late to fix.

98
00:05:19.239 --> 00:05:22.669
And so, I like talking to
Brendan Eich he was like, dude,

99
00:05:22.669 --> 00:05:28.360
yeah we wanted to change some stuff but we
couldn't break the way it currently works.

100
00:05:28.360 --> 00:05:30.973
We couldn't have a new version
of Firefox come out and

101
00:05:30.973 --> 00:05:35.156
then all the websites don't work anymore
because Variable Hoisting whether you love

102
00:05:35.156 --> 00:05:38.291
it or hate it or whether you don't
care at all, the way it works,

103
00:05:38.291 --> 00:05:42.387
the Internet needs it to work that way
still, otherwise your code breaks, right?

104
00:05:42.387 --> 00:05:49.448
And so, I don't know if it was
intentional, a side effect.

105
00:05:49.448 --> 00:05:51.591
I'm not 100% positive.

106
00:05:51.591 --> 00:05:58.075
But if you tweeted Brendan,
I'm sure he'd reply pretty quick.

107
00:05:58.075 --> 00:05:59.615
Good question, though.

108
00:05:59.615 --> 00:06:03.663
Okay, so I want gratis real quick.

109
00:06:03.663 --> 00:06:05.752
Gratis, gratis code right here.

110
00:06:05.752 --> 00:06:10.663
Look at it, and
figure out you had what it's going to do.

111
00:06:10.663 --> 00:06:15.431
So we're gonna say,
foo = 2, and then if(true).

112
00:06:15.431 --> 00:06:17.536
So this is always gonna evaluate, right?

113
00:06:17.536 --> 00:06:20.091
Var bar = 1.

114
00:06:20.091 --> 00:06:22.159
So, what's this gonna do?

115
00:06:22.159 --> 00:06:23.983
Is it gonna throw an error?

116
00:06:23.983 --> 00:06:26.092
Is it gonna log a two or
three or an undefined?

117
00:06:26.092 --> 00:06:27.510
What's it gonna do?

118
00:06:27.510 --> 00:06:28.696
Does anyone know?

119
00:06:28.696 --> 00:06:32.606
So while you're thinking about this,
put on your C hats though, right?

120
00:06:32.606 --> 00:06:35.339
Cuz a lot of us came from
a C based language, right?

121
00:06:35.339 --> 00:06:40.268
Where things worked different
than they do in JavaScript.

122
00:06:40.268 --> 00:06:44.667
So think about it like that,
like you are a C programmer still or

123
00:06:44.667 --> 00:06:46.909
a C based language programmer.

124
00:06:46.909 --> 00:06:49.707
What is this gonna do?

125
00:06:49.707 --> 00:06:52.435
What's gonna happen here when it consoles?

126
00:06:52.435 --> 00:06:56.952
What's it gonna log?
&gt;&gt; Off Camera 1: [INAUDIBLE]

127
00:06:56.952 --> 00:06:58.159
&gt;&gt; Aaron Frost: Yeah, no totally,

128
00:06:58.159 --> 00:07:00.808
it's definitely gonna log a three.

129
00:07:00.808 --> 00:07:01.476
Okay.

130
00:07:01.476 --> 00:07:03.171
It's definitely gonna log a three.

131
00:07:03.171 --> 00:07:07.671
It's not gonna throw an error
because I wrote it this way but

132
00:07:07.671 --> 00:07:11.970
let me show you what
the compiler thought I wrote.

133
00:07:11.970 --> 00:07:13.560
Well, that's not thought I wrote.

134
00:07:13.560 --> 00:07:18.360
Let me show you what the compiler
did to make sure that it ran right.

135
00:07:18.360 --> 00:07:23.157
The compiler said, dude, you totally
didn't mean to do a VAR declaration inside

136
00:07:23.157 --> 00:07:26.996
this block because this block
doesn't actually mean anything.

137
00:07:26.996 --> 00:07:30.770
So, I'm gonna hoist your
variable declarations to the top.

138
00:07:30.770 --> 00:07:34.820
So anytime you're inside of a,
global or inside of a function,

139
00:07:34.820 --> 00:07:39.845
any time you use the word VAR, no matter
where it is, no matter how deep you are,

140
00:07:39.845 --> 00:07:45.027
your code is going to hoist your variable
declaration to the top when it executes.

141
00:07:45.027 --> 00:07:49.820
Not like that it's gonna compile it to
that and it's like you could see it.

142
00:07:49.820 --> 00:07:52.105
That's just how it's going
to get evaluated, okay?

143
00:07:52.105 --> 00:07:57.113
And so this is how or
if statement happened so.

144
00:07:57.113 --> 00:07:59.817
It's not gonna throw an error
because some people were like,

145
00:07:59.817 --> 00:08:02.209
it's gonna throw an error
because the VAR bar in here,

146
00:08:02.209 --> 00:08:05.205
it's not gonna be reachable outside
of the sys statement, right?

147
00:08:05.205 --> 00:08:08.021
Cuz we're looking at it with our C hat on.

148
00:08:08.021 --> 00:08:13.150
But it hoisted the variable up, so when we
get down here, VAR is totally accessible.

149
00:08:13.150 --> 00:08:16.939
It still has the value that was assigned
to it, and it's gonna log a three, okay?

150
00:08:16.939 --> 00:08:18.229
So, this is Variable Hoisting.

151
00:08:18.229 --> 00:08:21.532
These are super simple examples,
but whether you know it or not,

152
00:08:21.532 --> 00:08:24.790
this is what's happening in your
code every single day, okay?

153
00:08:24.790 --> 00:08:28.900
So some people are like, dude,
check, move onto the next thing, but

154
00:08:28.900 --> 00:08:31.140
others of us are like, what, right?

155
00:08:32.170 --> 00:08:37.108
And so, do we have any questions
I need to answer on the chat?

156
00:08:37.108 --> 00:08:39.367
I don't see any hands in here.
&gt;&gt; Off Camera 2: Yeah,

157
00:08:39.367 --> 00:08:40.542
let them just peel up.

158
00:08:40.542 --> 00:08:44.172
So, when you declare a variable within
a function, it only hoists to the top of

159
00:08:44.172 --> 00:08:46.086
that function, correct?
&gt;&gt; Aaron Frost: Yes.

160
00:08:46.086 --> 00:08:52.840
So, pre-ES6,
JavaScript is function scoped, okay?

161
00:08:52.840 --> 00:08:53.996
So, an if block?

162
00:08:53.996 --> 00:08:55.380
That is not a block at all.

163
00:08:55.380 --> 00:08:57.813
That is just code formatting.

164
00:08:57.813 --> 00:08:59.489
The syntax on top of what you're doing.

165
00:09:01.290 --> 00:09:03.889
And it's execution control, but

166
00:09:03.889 --> 00:09:07.839
it has nothing to do with
where your hoisting stops.

167
00:09:07.839 --> 00:09:10.420
It's always gonna hoist at
the top of a function, okay?

168
00:09:11.420 --> 00:09:13.746
So if you have a function
inside of a function,

169
00:09:13.746 --> 00:09:17.700
any variables from this nested one will
only hoist to the top of that function.

170
00:09:17.700 --> 00:09:21.300
And any functions inside of this
function will hoist to the top of it.

171
00:09:21.300 --> 00:09:24.506
The only things that go global are the
ones where you don't put VAR on but

172
00:09:24.506 --> 00:09:27.730
if you're using strict mode,
that's not possible anyway, right?

173
00:09:27.730 --> 00:09:30.935
Yeah?
&gt;&gt; Off Camera 3: I want to quick mention

174
00:09:30.935 --> 00:09:35.933
that this is great to review, but
Calsomson will go, he goes really,

175
00:09:35.933 --> 00:09:40.101
really deep into the compiler and
compiler terminology.

176
00:09:40.101 --> 00:09:45.709
And all those scope like
really deep in the stuff and

177
00:09:45.709 --> 00:09:48.847
then I'm from the masters.

178
00:09:48.847 --> 00:09:53.702
If you want to go further a few more
years for the- [CROSSTALK] Yeah,

179
00:09:53.702 --> 00:09:57.865
this was a big area that's
a good place cause whatever but

180
00:09:57.865 --> 00:10:00.611
it's awesome that we're-
&gt;&gt; Aaron Frost: Yeah, but

181
00:10:00.611 --> 00:10:02.701
here's another simple example.

182
00:10:02.701 --> 00:10:03.625
What's gonna happen here?

183
00:10:03.625 --> 00:10:04.455
Sorry, we have a hand.

184
00:10:04.455 --> 00:10:06.664
Go ahead.
&gt;&gt; Off Camera 2: Somebody is asking

185
00:10:06.664 --> 00:10:09.366
functions are hoisted before VARS,
but why?

186
00:10:09.366 --> 00:10:10.427
&gt;&gt; Aaron Frost: I'm gonna talk about that

187
00:10:10.427 --> 00:10:11.831
cuz they're not always hoisted.

188
00:10:11.831 --> 00:10:13.318
So, let me talk about that.

189
00:10:13.318 --> 00:10:17.258
I'll get to that though
whoever asked that.

190
00:10:17.258 --> 00:10:18.709
So, what's gonna happen here?

191
00:10:18.709 --> 00:10:20.230
What's it gonna log?

192
00:10:20.230 --> 00:10:21.275
Put your C hat on.

193
00:10:21.275 --> 00:10:22.902
Is it gonna throw an error?

194
00:10:22.902 --> 00:10:24.797
Now, I already tricked
you on the last one.

195
00:10:24.797 --> 00:10:25.661
It's not gonna throw an error.

196
00:10:25.661 --> 00:10:28.430
What's it gonna do?
&gt;&gt; Off Camera 1: It's gonna log undefined.

197
00:10:28.430 --> 00:10:31.152
&gt;&gt; Aaron Frost: It's gonna log undefined,

198
00:10:31.152 --> 00:10:31.950
right?

199
00:10:31.950 --> 00:10:33.959
Cuz this is what's gonna happen.

200
00:10:33.959 --> 00:10:34.639
Sorry, so

201
00:10:34.639 --> 00:10:39.559
what it's gonna do is it's gonna hoist
var name equals undefined at the top.

202
00:10:39.559 --> 00:10:43.990
It's gonna log undefined, and then it
will assign Marc to name down here, okay?

203
00:10:43.990 --> 00:10:45.856
So, this is how it's gonna run.

204
00:10:45.856 --> 00:10:54.198
So, you go back to my
statement I said earlier.

205
00:10:54.198 --> 00:10:57.893
With VAR, the arrangement of your code has
less to do with the way it execute than

206
00:10:57.893 --> 00:10:59.173
you think it does, right?

207
00:10:59.173 --> 00:11:05.661
So, this is what I was talking about.

208
00:11:05.661 --> 00:11:08.474
Okay, all right.

209
00:11:08.474 --> 00:11:14.765
So if we run this code,
talking about Functions Scoped.

210
00:11:14.765 --> 00:11:16.997
And I'm almost done with with hoisting,
I promise.

211
00:11:16.997 --> 00:11:22.443
So we have VAR A out here,
we have a in here and

212
00:11:22.443 --> 00:11:29.080
we log a and then we call run and
we do a console log of a.

213
00:11:29.080 --> 00:11:31.559
This is going to log 2 but this a,

214
00:11:31.559 --> 00:11:35.832
it was actually trapped inside
this function properly.

215
00:11:35.832 --> 00:11:40.248
So I'm just trying to prove
that it is function scope,

216
00:11:40.248 --> 00:11:44.568
it doesn't hoist everything
up to the top of global,

217
00:11:44.568 --> 00:11:47.931
your scope instead of a function, okay?

218
00:11:47.931 --> 00:11:48.960
So, Function Hoisting.

219
00:11:48.960 --> 00:11:53.166
Functions hoists to which someone
alluded to but not always, okay.

220
00:11:53.166 --> 00:11:57.860
There's two ways to make a function,
so we're going to talk about them.

221
00:11:57.860 --> 00:12:00.233
So, you can make a function Declaration.

222
00:12:00.233 --> 00:12:04.670
Which is the top one and
the second one is a function Expression.

223
00:12:05.760 --> 00:12:09.428
Who prefers declarations?

224
00:12:09.428 --> 00:12:10.110
Nobody.

225
00:12:10.110 --> 00:12:12.845
Who prefers expressions?

226
00:12:12.845 --> 00:12:17.580
Okay, so
they perform very differently, okay?

227
00:12:17.580 --> 00:12:19.776
And let me run through it real quick.

228
00:12:19.776 --> 00:12:24.780
It doesn't have a lot to do with LET,
so I'm not gonna spend a lot time on it.

229
00:12:25.780 --> 00:12:30.189
So that same code we had back here,
this is what's gonna happen.

230
00:12:30.189 --> 00:12:34.980
It's gonna hoist bar to the top,
so instead of bar bar = function.

231
00:12:34.980 --> 00:12:40.009
It's gonna hoist bar to the top and
its gonna hoist function food to the top.

232
00:12:40.009 --> 00:12:43.158
So, it's gonna hoist the declaration
all the way to the top, but

233
00:12:43.158 --> 00:12:45.840
the expressions don't get hoisted.

234
00:12:45.840 --> 00:12:52.268
So when people write expressions, I can't
call bar till the next line of code right?

235
00:12:52.268 --> 00:12:57.071
If I try and call bar before it,
what's it gonna say?

236
00:12:57.071 --> 00:12:59.006
Undefined is not a function, right?

237
00:12:59.006 --> 00:13:01.260
So, I'm gonna get undefined
out a function error.

238
00:13:03.700 --> 00:13:07.536
And again, that's preference but
that's how it functions hoist.

239
00:13:07.536 --> 00:13:11.806
So if you guys go look at Crockford's
JavaScript Styleguide, he says,

240
00:13:11.806 --> 00:13:17.510
define all your variables at the top of
the function, just write code like that.

241
00:13:17.510 --> 00:13:19.303
So, if you ever get into a function and

242
00:13:19.303 --> 00:13:22.554
it's like var something comma
something comma, something comma,

243
00:13:22.554 --> 00:13:25.706
something semi-colon,
like they just put all their vars up top?

244
00:13:25.706 --> 00:13:27.391
And you're like,
I don't write it like that.

245
00:13:27.391 --> 00:13:29.923
Why did that guy write it like that?

246
00:13:29.923 --> 00:13:34.319
That person was hoisting their own stuff,
they were trying to be cryptic.

247
00:13:34.319 --> 00:13:37.254
They were trying to make it
look like it was gonna run,

248
00:13:37.254 --> 00:13:39.222
that's all they're trying to do.

249
00:13:39.222 --> 00:13:41.454
So yeah, hoist your stuff.

250
00:13:41.454 --> 00:13:43.077
So, that's Variable Hoisting
in a Nutshell.

251
00:13:43.077 --> 00:13:44.494
Any questions on Variable Hoisting?

252
00:13:44.494 --> 00:13:46.966
I know I didn't answer everything.

253
00:13:46.966 --> 00:13:51.175
Any questions on the chat?.
&gt;&gt; Off Camera 2: How do you use interior

254
00:13:51.175 --> 00:13:52.789
slides like you did?

255
00:13:52.789 --> 00:13:54.270
What button?
&gt;&gt; Aaron Frost: O.

256
00:13:54.270 --> 00:13:55.430
&gt;&gt; Off Camera 2: O?

257
00:13:55.430 --> 00:13:56.854
&gt;&gt; Aaron Frost: What?

258
00:13:56.854 --> 00:13:59.189
Someone's following me.
&gt;&gt; Off Camera 2: That was

259
00:13:59.189 --> 00:13:59.703
an actual question.

260
00:13:59.703 --> 00:14:02.262
Yeah, that was a question.
&gt;&gt; Aaron Frost: O.

261
00:14:02.262 --> 00:14:06.470
I hit O and it goes to the O review and
I enter and it comes out [INAUDIBLE].

262
00:14:06.470 --> 00:14:09.582
So this slides,
I got in from the Google IO side deck.

263
00:14:09.582 --> 00:14:13.930
So that's why the the code works
instead of networks, right?

