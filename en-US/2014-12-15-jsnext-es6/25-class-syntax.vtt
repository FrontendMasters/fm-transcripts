WEBVTT

1
00:00:00.000 --> 00:00:03.991
[MUSIC]

2
00:00:03.991 --> 00:00:06.030
&gt;&gt; Aaron Frost: So again,
I showed you this earlier today.

3
00:00:06.030 --> 00:00:10.810
I'm going to go back down to the bottom
in case someone didn't see it.

4
00:00:10.810 --> 00:00:15.970
But even here on this class proposal,
like they're like hey, be warned.

5
00:00:15.970 --> 00:00:21.840
Be ye warned, if you even think about
modifying this spec, it will kill it.

6
00:00:21.840 --> 00:00:26.480
Basically if you read this,
those are the same don't, don't, don't.

7
00:00:26.480 --> 00:00:30.090
You know you want to shush
up you know he's like

8
00:00:30.090 --> 00:00:32.350
this don't know like push
it to the next release.

9
00:00:32.350 --> 00:00:35.610
We're releasing this and
everyone every kind of agrees.

10
00:00:39.420 --> 00:00:42.650
So yeah, that's where we ended up.

11
00:00:42.650 --> 00:00:44.910
And that's that's what we got today.

12
00:00:44.910 --> 00:00:48.910
We got this max and minimal class system.

13
00:00:48.910 --> 00:00:52.430
So here's a class,
this is what a class looks like.

14
00:00:52.430 --> 00:00:56.010
Okay, these guys
are functionally the same.

15
00:00:57.790 --> 00:01:01.460
So I showed you this because I wanted
to point out that the classicism,

16
00:01:01.460 --> 00:01:08.400
the class system is only sugar on top
of things you can already do today.

17
00:01:08.400 --> 00:01:15.530
And we're not gonna do anything right
now that you cant do today, okay.

18
00:01:15.530 --> 00:01:19.960
And so
I think we should state that up front.

19
00:01:19.960 --> 00:01:24.250
I think it's a little more
elegant in the class syntax and

20
00:01:24.250 --> 00:01:30.580
I'm going to embrace it until
we start seeing crazy, crazy.

21
00:01:30.580 --> 00:01:33.020
The first time I see an IMBO
in JavaScript, I'm out.

22
00:01:36.970 --> 00:01:41.400
So fortunately these are the same though I
can new on both up there both can execute

23
00:01:41.400 --> 00:01:46.535
what I call new, this is the same thing.

24
00:01:46.535 --> 00:01:49.710
Okay, again remember earlier though,

25
00:01:49.710 --> 00:01:53.760
I said if we got rid of all
function constructors and

26
00:01:53.760 --> 00:01:57.660
only had class constructors, then
functions could be lightweight long term.

27
00:01:57.660 --> 00:02:03.425
Which means they could take up less memory
and less footprint in memory, which means

28
00:02:03.425 --> 00:02:07.950
JavaScript applications could potentially
weigh less and maybe run faster.

29
00:02:07.950 --> 00:02:10.200
So, the long term performance,

30
00:02:10.200 --> 00:02:13.240
we're not getting rid of constructors
on functions for years, right?

31
00:02:13.240 --> 00:02:15.205
Just because of legacy.

32
00:02:15.205 --> 00:02:19.788
But, it could potentially,
if everyone only used class stuff, and

33
00:02:19.788 --> 00:02:24.528
like maybe they do some opt in someday
in the future where you're like,

34
00:02:24.528 --> 00:02:29.446
I opt in to never use function
constructors and only class constructors.

35
00:02:29.446 --> 00:02:33.570
It might be able to have some performance
gains but for now it's just sugar, okay.

36
00:02:35.840 --> 00:02:42.050
All right, so a class has a constructor
function and it's just called constructor.

37
00:02:42.050 --> 00:02:43.220
Other languages,

38
00:02:43.220 --> 00:02:45.680
if you have a class called foo,
what's your constructor called?

39
00:02:46.690 --> 00:02:47.810
Foo, right?

40
00:02:47.810 --> 00:02:50.724
So, in here it's constructor, right.

41
00:02:50.724 --> 00:02:55.999
And if someone passes it,
like if I have this animal class,

42
00:02:55.999 --> 00:03:02.767
I make it a constructor called name and
I can say this .name = name, right.

43
00:03:02.767 --> 00:03:08.070
Again, can you do this in
JavaScript today with functions?

44
00:03:08.070 --> 00:03:09.780
You can right, easy.

45
00:03:12.790 --> 00:03:16.020
So I wanted to kind of point
out private properties,

46
00:03:17.540 --> 00:03:21.090
because a lot of people were like,
dude, private properties, so cool.

47
00:03:22.340 --> 00:03:25.810
They're all right, I mean, it's not
amazing, they're only kind of cool and

48
00:03:25.810 --> 00:03:27.750
it's really only private
because of obscurity.

49
00:03:29.060 --> 00:03:30.599
So who here is familiar with symbols?

50
00:03:32.800 --> 00:03:36.562
You are, okay, I'm gonna use a symbol in
the console real quick to see you guys

51
00:03:36.562 --> 00:03:41.547
kinda get what it is.
&gt;&gt; Aaron Frost: Is that big

52
00:03:41.547 --> 00:03:45.939
enough can you guys see that?
&gt;&gt; Aaron Frost: Var so

53
00:03:45.939 --> 00:03:50.846
I'm just gonna just say new
no I don't have to call new

54
00:03:50.846 --> 00:03:51.729
Symbol.

55
00:04:02.710 --> 00:04:09.759
&gt;&gt; Aaron Frost: Come on, man.
&gt;&gt; Aaron Frost: Dude,

56
00:04:09.759 --> 00:04:10.353
why aren't you working?

57
00:04:22.155 --> 00:04:23.420
&gt;&gt; Aaron Frost: Why
isn't my symbol working?

58
00:04:25.170 --> 00:04:27.410
So, okay, screw this, let's go to-
&gt;&gt; Off Camera 1: Is

59
00:04:27.410 --> 00:04:29.248
it the constructor?
&gt;&gt; Aaron Frost: No,

60
00:04:29.248 --> 00:04:32.907
it's just say use call, or
it's like a static function.

61
00:04:42.300 --> 00:04:43.125
&gt;&gt; Aaron Frost: Actually Traceur doesn't

62
00:04:43.125 --> 00:04:50.090
have it, I don't think, maybe it does.
&gt;&gt; Aaron Frost: Okay,

63
00:04:50.090 --> 00:04:56.500
so this is what they look like,
they've kind of got like a one key value?

64
00:04:56.500 --> 00:04:59.520
So it's basically like making a unique ID,
right?

65
00:04:59.520 --> 00:05:02.696
It's kind of like having a GUI generator,
okay, but

66
00:05:02.696 --> 00:05:05.390
make sure you don't have
two of the same one.

67
00:05:06.750 --> 00:05:12.040
So then, you would have like your own,
you would wrap all your code inside of

68
00:05:12.040 --> 00:05:16.520
an IIFE or inside of a function instead
of a closure, so that people can't see.

69
00:05:16.520 --> 00:05:20.420
So okay, sorry, I'm getting ahead of
myself, I'm gonna go back to the slides.

