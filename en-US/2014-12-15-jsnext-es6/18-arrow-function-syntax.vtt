WEBVTT

1
00:00:00.000 --> 00:00:03.929
[MUSIC]

2
00:00:03.929 --> 00:00:08.529
&gt;&gt; Aaron Frost: This function comes from,
a lot of languages have

3
00:00:08.529 --> 00:00:13.577
these things now,
they're called lambdas, right?

4
00:00:13.577 --> 00:00:17.300
In JavaScript, the idea of lambda
doesn't make a lot of sense.

5
00:00:17.300 --> 00:00:21.206
Not that it doesn't make sense,
but in other languages,

6
00:00:21.206 --> 00:00:26.866
it's more significant, because you have to
tie functions to methods to objects and

7
00:00:26.866 --> 00:00:30.214
it's just like a random
object-less function,

8
00:00:30.214 --> 00:00:33.982
that doesn't make a lot of sense,
but we have that now.

9
00:00:33.982 --> 00:00:37.100
And for
us it's just a different syntax for

10
00:00:37.100 --> 00:00:41.350
functions than we've
always kind of have this.

11
00:00:41.350 --> 00:00:46.130
But it does have some
different performance stuff

12
00:00:46.130 --> 00:00:48.270
that you may not be used to.

13
00:00:48.270 --> 00:00:53.150
Like the way your code used to run is not
the way it's gonna run if you use these

14
00:00:53.150 --> 00:00:54.378
arrow functions.

15
00:00:54.378 --> 00:00:55.986
So I'm gonna go through that, and

16
00:00:55.986 --> 00:00:59.520
I'm gonna explain to you how will
my code be running different?

17
00:00:59.520 --> 00:01:04.580
If I just replace my functions with
lambdas, not only will it kind of break,

18
00:01:04.580 --> 00:01:06.270
it's gonna totally break.

19
00:01:06.270 --> 00:01:09.090
Like big time, major.

20
00:01:09.090 --> 00:01:09.808
And I'll explain why.

21
00:01:09.808 --> 00:01:13.620
So, yeah, so arrow functions,

22
00:01:13.620 --> 00:01:20.310
that terminology comes from CoffeeScript,
again.

23
00:01:20.310 --> 00:01:23.591
And CoffeeScript has two
versions of the same thing, okay?

24
00:01:23.591 --> 00:01:24.954
So CoffeeScript, and

25
00:01:24.954 --> 00:01:29.987
I'm gonna explain it because it has some
relevance in what we're gonna do, okay?

26
00:01:29.987 --> 00:01:36.040
So, CoffeeScript has a fat arrow function,
and a skinny arrow function, okay?

27
00:01:36.040 --> 00:01:38.346
So we have two flavors of arrow functions.

28
00:01:38.346 --> 00:01:42.536
JavaScript only took the fat
arrow function, okay?

29
00:01:42.536 --> 00:01:44.536
And if anyone knows CoffeeScript,

30
00:01:44.536 --> 00:01:49.071
and you understand the difference between
the fat arrow functions and the skinny

31
00:01:49.071 --> 00:01:53.424
arrow functions, then you already know
what I'm about to teach you, okay?

32
00:01:53.424 --> 00:01:59.220
Because this arrow function in JavaScript,
does the exact same thing.

33
00:02:01.480 --> 00:02:04.140
Which it didn't, regular functions don't.

34
00:02:04.140 --> 00:02:07.918
So precedence, you've got lambdas and
the fat arrow function from CoffeeScript.

35
00:02:09.580 --> 00:02:14.423
Again, we're taking these de facto
standards from other languages.

36
00:02:14.423 --> 00:02:19.333
And ES6 is gonna throw
the word fat off of the front,

37
00:02:19.333 --> 00:02:23.140
and just call it arrow functions.

38
00:02:23.140 --> 00:02:25.780
They didn't need to call it fat arrow,
because we don't have two of them, so

39
00:02:25.780 --> 00:02:28.200
we don't have to specify the difference.

40
00:02:28.200 --> 00:02:31.450
And there was talk, there was talk
about bringing over the other one too,

41
00:02:31.450 --> 00:02:34.460
but they were like we can
already do it that way.

42
00:02:35.760 --> 00:02:37.870
Let's not bring over both,
it's too much of a learning curve for

43
00:02:37.870 --> 00:02:39.929
new people, let's just keep one.

44
00:02:42.030 --> 00:02:45.890
And if you guys go through the logs
you'll read why it ended up this way.

45
00:02:47.460 --> 00:02:55.004
So these two functions are a lot alike,
okay?

46
00:02:55.004 --> 00:02:59.321
And if you execute them, for this example,

47
00:02:59.321 --> 00:03:03.410
they'll execute the exact same, okay?

48
00:03:03.410 --> 00:03:06.310
So, like one of the main
differences you'll notice is

49
00:03:07.350 --> 00:03:11.510
we had to use the word function for
our first example.

50
00:03:11.510 --> 00:03:13.794
So we're not using the word function,
okay?

51
00:03:13.794 --> 00:03:19.440
So that will help with minification,
that's kind of nice, right?

52
00:03:19.440 --> 00:03:23.820
So, we'll get performance enhancements
at least there by using these.

53
00:03:25.040 --> 00:03:27.570
We're still using parenthesis for
the parameters.

54
00:03:27.570 --> 00:03:31.340
So we don't have any parameters, so
up here we have these parameters,

55
00:03:31.340 --> 00:03:37.380
these parentheses with nothing in them,
over here empty parentheses so.

56
00:03:37.380 --> 00:03:41.739
And then, we just kinda do this fat arrow.

57
00:03:41.739 --> 00:03:44.515
We kinda point at the function body and

58
00:03:44.515 --> 00:03:49.320
we just put a 2, and
it's gonna implicitly return that.

59
00:03:49.320 --> 00:03:53.900
Whereas in the top function,
if we wanted it to return it,

60
00:03:53.900 --> 00:03:57.458
we had to say go ahead and
return this, okay?

61
00:03:57.458 --> 00:04:03.330
So you could wrap the body
of this arrow function.

62
00:04:03.330 --> 00:04:06.020
You could wrap it in
braces if you want to.

63
00:04:06.020 --> 00:04:08.480
Like if you wanna put squiggly
braces around it, do it.

64
00:04:09.620 --> 00:04:12.770
It's gonna stop implicitly
returning though.

65
00:04:12.770 --> 00:04:16.580
It only implicitly returns if
you don't wrap the body, okay?

66
00:04:17.900 --> 00:04:19.962
So the second you put
parenthesis up there,

67
00:04:19.962 --> 00:04:25.120
you're gonna lose that implicit return, so
you're gonna have to type the word return.

68
00:04:25.120 --> 00:04:28.166
So that might be confusing.

69
00:04:28.166 --> 00:04:34.200
Parens for parameters, no single brace for
the single-line arrow of function bodies.

70
00:04:34.200 --> 00:04:36.540
So you could do multiple-line
on arrow function bodies and

71
00:04:36.540 --> 00:04:39.460
on multiple-lines you are gonna
need to wrap it with braces.

72
00:04:39.460 --> 00:04:43.658
But if you're just doing one line,
I'm thinking D3.

73
00:04:43.658 --> 00:04:49.176
D3 there's a lot of like .data and
then a function, and .this and a function.

74
00:04:49.176 --> 00:04:52.730
And then just one thing in the line thing.

75
00:04:52.730 --> 00:04:58.968
You could do a lot of this stuff for
that kind of stuff.

76
00:04:58.968 --> 00:05:01.501
So on the single line arrow
functions with no braces,

77
00:05:01.501 --> 00:05:04.030
it does implicitly return like we said.

78
00:05:04.030 --> 00:05:11.780
So I kinda wanna talk about the
parentheses around the parameters rules.

79
00:05:11.780 --> 00:05:14.300
And some of you guys are gonna love this.

80
00:05:14.300 --> 00:05:14.950
I can already tell.

81
00:05:16.270 --> 00:05:20.280
But shout it out if you
absolutely love it.

82
00:05:20.280 --> 00:05:23.100
Shout it out.
Okay, so if you have no parameters,

83
00:05:23.100 --> 00:05:24.140
you have to use parentheses.

84
00:05:26.200 --> 00:05:29.480
So if you don't have any parameters,
you must use parentheses.

85
00:05:31.200 --> 00:05:35.980
If you have one parameter and
one only, it's optional,

86
00:05:35.980 --> 00:05:39.800
you can either use parentheses or
not, okay?

87
00:05:39.800 --> 00:05:42.340
Everything else but
I'm not talking about everything else,

88
00:05:42.340 --> 00:05:46.010
I'm just talking about the parameters,
okay?

89
00:05:46.010 --> 00:05:49.460
And then two or more,
you have to parentheses around them.

90
00:05:49.460 --> 00:05:54.488
So basically another way to
sum this up is with only one

91
00:05:54.488 --> 00:05:59.315
parameter, it's optional parentheses,
okay?

92
00:05:59.315 --> 00:06:01.696
So I wish they wouldn't have done that,

93
00:06:01.696 --> 00:06:05.067
I wish they would just say
hey it's always parentheses.

94
00:06:05.067 --> 00:06:09.648
There's no not parentheses,
it's always parentheses, do it that way.

95
00:06:09.648 --> 00:06:12.403
Anyway so
that's the other way to sum this up,

96
00:06:12.403 --> 00:06:17.006
is when you only have one parameter you
don't have to put the parentheses in.

97
00:06:17.006 --> 00:06:20.670
Because you're probably going to come
in here one day and refactor it and

98
00:06:20.670 --> 00:06:21.870
do comma other thing and

99
00:06:21.870 --> 00:06:25.793
you're gonna get an error because you
forgot to put the parentheses around.

100
00:06:25.793 --> 00:06:27.403
I'll probably always use them,

101
00:06:27.403 --> 00:06:31.300
just because I don't like to deal
with those kind of problems.

102
00:06:31.300 --> 00:06:34.763
And I'm sure like uglify will go through
and be like, hey do you only have one,

103
00:06:34.763 --> 00:06:37.004
cool, I'm gonna freaking
remove the stuff out.

104
00:06:37.004 --> 00:06:41.418
I'm sure all our build tools will
take care of stripping off that

105
00:06:41.418 --> 00:06:44.537
extra parentheses, if we don't need them.

106
00:06:44.537 --> 00:06:45.670
You know what I'm saying?

107
00:06:45.670 --> 00:06:49.810
And if you have a function that's only one
line, and you have a return statement.

108
00:06:49.810 --> 00:06:51.555
I'm sure that the uglifiers will be like,

109
00:06:51.555 --> 00:06:54.560
dude get rid of the return or
take the braces off and just make it one.

110
00:06:55.800 --> 00:06:56.960
We'll get some stuff.

111
00:06:59.250 --> 00:07:01.928
We'll get some tooling around that
will make this stuff easier, but

112
00:07:01.928 --> 00:07:02.721
yeah I'm not sure.

113
00:07:02.721 --> 00:07:10.270
So anyway, so
let's talk about the body declaration.

114
00:07:10.270 --> 00:07:12.609
So again I kind of talked about this.

115
00:07:14.190 --> 00:07:15.671
So here we have a function.

116
00:07:15.671 --> 00:07:20.662
It takes a number, and then it returns
the number times itself, right?

117
00:07:24.455 --> 00:07:30.151
&gt;&gt; Aaron Frost: And this is if you want
to wrap the body with braces, you can,

118
00:07:30.151 --> 00:07:34.974
but you've got to then give
it a return statement.

119
00:07:36.983 --> 00:07:38.350
&gt;&gt; Aaron Frost: So
that's gonna get confusing too.

120
00:07:38.350 --> 00:07:43.168
I think some people run into some bugs
where they take a one line method in make

121
00:07:43.168 --> 00:07:47.249
it two and they forget to add
the return value on the second line.

122
00:07:47.249 --> 00:07:48.284
You know what I'm saying?

123
00:07:48.284 --> 00:07:50.765
Or the return instruction.

124
00:07:50.765 --> 00:07:52.751
I think that they'll be like,
why isn't this working?

125
00:07:52.751 --> 00:07:56.010
So anyway, just keep that in mind.

