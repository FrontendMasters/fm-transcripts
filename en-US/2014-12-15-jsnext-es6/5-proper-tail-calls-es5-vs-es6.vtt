WEBVTT

1
00:00:00.000 --> 00:00:03.912
[MUSIC]

2
00:00:03.912 --> 00:00:06.912
&gt;&gt; Aaron Frost: I feel bad for
even showing a Fibonacci example.

3
00:00:06.912 --> 00:00:11.433
What's that law, if you talk long
enough about anything on the Internet,

4
00:00:11.433 --> 00:00:13.892
it'll go back to the Nazis or to Hitler?

5
00:00:13.892 --> 00:00:15.392
It's like some law,
I can't remember the name.

6
00:00:15.392 --> 00:00:16.652
Does anyone in the chat have it?

7
00:00:16.652 --> 00:00:20.271
Anyway, there's a law that the longer
you talk about someone online,

8
00:00:20.271 --> 00:00:23.970
it's eventually gonna go out to some
crazy extreme like tied to Hitler.

9
00:00:25.230 --> 00:00:25.970
And it does,

10
00:00:25.970 --> 00:00:29.290
like the the longer it goes the likeliness
of that happening increases.

11
00:00:30.860 --> 00:00:35.010
I think the longer you talk about any
language on the planet, someone's gonna

12
00:00:35.010 --> 00:00:37.870
try to make fun of it by saying you
can't do Fibonacci correctly, right?

13
00:00:37.870 --> 00:00:40.690
Even though none of us and
none of the people we know besides for

14
00:00:40.690 --> 00:00:44.140
home Godwin's law, that's Godwin's law is,

15
00:00:45.270 --> 00:00:49.750
it ties to the Hitler, the percentage of
references to Hitler goes up after time.

16
00:00:49.750 --> 00:00:53.790
So, thank you, Steve W.

17
00:00:53.790 --> 00:00:56.980
So yeah, and people have definitely
criticized JavaScript for

18
00:00:56.980 --> 00:01:01.560
not being able to calculate Fibonacci,
NBD though right, who cares?

19
00:01:04.830 --> 00:01:10.620
So pre ES6, this is what Fibonacci
looked like in JavaScript.

20
00:01:10.620 --> 00:01:15.280
So you'd have your Fibonacci function and
you'd say,

21
00:01:15.280 --> 00:01:21.110
hey I want the third number in Fibonacci,
and it would return a 2.

22
00:01:21.110 --> 00:01:25.270
And you'd say, cool give me the tenth
one now and it would say, cool, 55.

23
00:01:25.270 --> 00:01:28.103
And then you'd say, okay, give me
something bigger than that 10,000 limit

24
00:01:28.103 --> 00:01:29.564
that we talked about earlier, remember?

25
00:01:29.564 --> 00:01:33.042
And it would say, all right,
dude I know how to do that,

26
00:01:33.042 --> 00:01:37.288
it's called a range error,
like it knows exactly what to do there.

27
00:01:37.288 --> 00:01:42.310
And so yeah, however I will say that this

28
00:01:42.310 --> 00:01:48.369
call to Fibonacci was
proper tail call because,

29
00:01:48.369 --> 00:01:52.376
well it is actually a tail call.

30
00:01:52.376 --> 00:01:56.537
Because it doesn't need anything to
calculate like it could release a stack if

31
00:01:56.537 --> 00:01:58.879
the language let it, but it's not really.

32
00:01:58.879 --> 00:02:01.750
Anyway, it was written correctly
is all I'm trying to say.

33
00:02:03.220 --> 00:02:07.871
And now with ES6 the same code,
so each call adds another stack,

34
00:02:07.871 --> 00:02:13.386
each stack needs more memory and then
the memory eventually is gonna run out.

35
00:02:13.386 --> 00:02:17.793
And you have to wrap up this with a try
catch if you don't want to kill your

36
00:02:17.793 --> 00:02:18.607
execution.

37
00:02:18.607 --> 00:02:22.072
So with ES6 though it will say, yeah,

38
00:02:22.072 --> 00:02:27.112
I know how to do three,
I still don't know how to do ten but

39
00:02:27.112 --> 00:02:31.780
I also know how to do
Fibonacci to that number.

40
00:02:31.780 --> 00:02:33.800
Has anyone calculated that?

41
00:02:33.800 --> 00:02:37.070
It's like a lot of bloody number,
it's really a long number.

42
00:02:37.070 --> 00:02:39.660
Okay, I don't know how many digits long
it was, like I did it online though and

43
00:02:39.660 --> 00:02:41.927
it was really, really long.

44
00:02:41.927 --> 00:02:48.360
So yeah, so
this is what it looked like in ES6.

45
00:02:48.360 --> 00:02:53.710
So the same code that we had on the
previous slide, on ES6 it just will work.

46
00:02:53.710 --> 00:02:58.220
So if you got something that wasn't
working, I mean you didn't release it,

47
00:02:58.220 --> 00:03:01.100
but it would just work in ES6.

48
00:03:01.100 --> 00:03:04.480
And if you did have recursion in your
code and it was proper recursion,

49
00:03:04.480 --> 00:03:08.530
like you wrote it's where it could
release the stack if it didn't need it.

50
00:03:08.530 --> 00:03:11.900
Your code could get faster like

51
00:03:11.900 --> 00:03:15.470
just by grace of the the runtime being
able to handle that stuff better.

52
00:03:17.098 --> 00:03:19.209
So proper tail calls only
work in strict mode, so

53
00:03:19.209 --> 00:03:21.427
if you don't use strict
mode you're gonna get it.

54
00:03:21.427 --> 00:03:23.807
So that's something you're
gonna wanna turn on.

55
00:03:23.807 --> 00:03:28.553
And then optimize your
code if you do recursion,

56
00:03:28.553 --> 00:03:34.704
to where it can use this method
of releasing the current stack.

57
00:03:34.704 --> 00:03:37.346
If you make a method call,
pass it everything it needs so

58
00:03:37.346 --> 00:03:38.990
it can release the current stack.

59
00:03:38.990 --> 00:03:43.775
And actually this is not the worst idea
for every method call that you did,

60
00:03:43.775 --> 00:03:48.010
cuz it's not just recursion that's going
to benefit from this kind of stuff.

61
00:03:48.010 --> 00:03:51.730
Any method call that doesn't
need the prior stack,

62
00:03:51.730 --> 00:03:55.360
that's running in strict mode would get
the benefit of this memory consumption.

63
00:03:55.360 --> 00:03:59.386
So if all your methods and that might make
your code look ugly if you're passing

64
00:03:59.386 --> 00:04:03.117
everything into the method that it needs,
like it could kill your code.

65
00:04:03.117 --> 00:04:09.617
But I'm just saying you may want to
think about it, right, for the future.

66
00:04:09.617 --> 00:04:12.911
So that's PTC, any questions,

67
00:04:12.911 --> 00:04:17.976
proper tail calls,
we're good, anyone online?

68
00:04:17.976 --> 00:04:20.520
My man, any questions online?

69
00:04:22.780 --> 00:04:24.050
&gt;&gt; Speaker 2: I think we're all caught up.

70
00:04:24.050 --> 00:04:24.720
&gt;&gt; Aaron Frost: We're all caught up?

71
00:04:24.720 --> 00:04:25.610
Okay, cool.

72
00:04:25.610 --> 00:04:28.280
&gt;&gt; Speaker 2: Is there any
difference on my own questions?

73
00:04:28.280 --> 00:04:32.015
If I pass an object with
the key value pairs and stuff,

74
00:04:32.015 --> 00:04:33.480
does it know-
&gt;&gt; Aaron Frost: No,

75
00:04:33.480 --> 00:04:36.560
as long as that call that's
right before the return.

76
00:04:36.560 --> 00:04:41.340
As long as that's a call to another method
and inside of that call, if it's back to

77
00:04:41.340 --> 00:04:44.570
itself, it doesn't need any other
variables from the current scope,

78
00:04:44.570 --> 00:04:45.790
like you're passing them into it.

79
00:04:47.080 --> 00:04:51.969
It can really it will be like ES6 will
enable it to release that current stack,

80
00:04:51.969 --> 00:04:54.429
and and just kind of go on with a new one.

81
00:04:54.429 --> 00:04:57.620
Doesn't matter what you're passing it,

82
00:04:57.620 --> 00:05:01.350
you can pass it as a function,
as object nothing.

83
00:05:01.350 --> 00:05:02.450
Yeah?

84
00:05:02.450 --> 00:05:06.676
&gt;&gt; Speaker 2: One thing that did come
up earlier, I wrote down, with ES6,

85
00:05:06.676 --> 00:05:10.496
there's a lot of the features
in CoffeeScript in it, so

86
00:05:10.496 --> 00:05:13.680
why learn CoffeeScript, he was asking.

87
00:05:13.680 --> 00:05:17.970
&gt;&gt; Aaron Frost: Exactly,
but I say that and

88
00:05:17.970 --> 00:05:20.070
it sounds like I'm really
mocking copy script.

89
00:05:20.070 --> 00:05:21.650
But I'm not because

90
00:05:22.650 --> 00:05:27.200
we're gonna see a lot of really cool
features today that came from it.

91
00:05:27.200 --> 00:05:30.740
So, I'm not trying to say
CoffeeScript didn't serve a point and

92
00:05:30.740 --> 00:05:33.150
doesn't still serve a point.

93
00:05:33.150 --> 00:05:37.870
It was like a breeding ground for a lot
of really important functionality, okay.

94
00:05:37.870 --> 00:05:39.740
Another breeding ground that
I didn't actually talk about,

95
00:05:39.740 --> 00:05:41.620
I actually kind of skipped over this was.

96
00:05:41.620 --> 00:05:46.766
So when the two camps were like hey,
we're not gonna agree on ES4,

97
00:05:46.766 --> 00:05:50.740
ES3 or ES4, we're not gonna agree.

98
00:05:50.740 --> 00:05:53.319
Mozilla was back at headquarters

99
00:05:53.319 --> 00:05:57.561
implementing the features
that they wanted, right.

100
00:05:57.561 --> 00:06:01.939
So we're gonna hear about let,
we're gonna hear about destructuring,

101
00:06:01.939 --> 00:06:07.240
we're gonna hear a lot of stuff that
Firefox has had for over half a decade.

102
00:06:07.240 --> 00:06:09.130
Because they just went back to
headquarters and implemented it.

103
00:06:09.130 --> 00:06:12.994
And honestly that was how they got some of
the best feedback, like when they came to

104
00:06:12.994 --> 00:06:16.905
implement any ES6, they're like well,
we've found the blah, right?

105
00:06:16.905 --> 00:06:20.438
And the CoffeScript guys would say well,
when it comes to arrow functions, and

106
00:06:20.438 --> 00:06:23.445
fat arrows and skinny arrows,
we don't think you should have two,

107
00:06:23.445 --> 00:06:24.620
you should just have one.

108
00:06:24.620 --> 00:06:28.660
If there's a lot of good feedback
that can come from a CoffeScript, or

109
00:06:28.660 --> 00:06:32.565
like a Mozilla Trailblazing
functionality without it being part of

110
00:06:32.565 --> 00:06:34.220
the standardization body.

111
00:06:34.220 --> 00:06:38.120
So that was a good question, again.

112
00:06:38.120 --> 00:06:40.491
Again, I'm not arguing that
we should write CoffeeScript.

113
00:06:40.491 --> 00:06:42.946
However, I'm also not
mocking people that do and

114
00:06:42.946 --> 00:06:45.900
I'm not saying that it
didn't serve purpose, yeah?

115
00:06:45.900 --> 00:06:50.961
&gt;&gt; Speaker 2: There's a question in
the chat about ES6 and how would you write

116
00:06:50.961 --> 00:06:55.662
a non PTC Fibonacci,
will that just work across the board?

117
00:06:55.662 --> 00:06:57.555
&gt;&gt; Aaron Frost: I should've
written that ahead of time.

118
00:06:57.555 --> 00:06:59.015
It's not gonna work across the board.

119
00:06:59.015 --> 00:07:05.624
Some people when they write it,
here I'm just gonna pull up a console.

120
00:07:05.624 --> 00:07:08.881
They write it so

121
00:07:08.881 --> 00:07:13.640
that inside the code,

122
00:07:13.640 --> 00:07:20.662
you'll be fib and then (n) +.

123
00:07:20.662 --> 00:07:25.245
So, in their code they'll say,

124
00:07:25.245 --> 00:07:30.158
return fib(n) + fib(n-1) or

125
00:07:30.158 --> 00:07:34.262
something like that, okay?

126
00:07:34.262 --> 00:07:37.948
The last instruction getting evaluated on

127
00:07:37.948 --> 00:07:42.530
that return call is not
either of the fib calls.

128
00:07:42.530 --> 00:07:45.544
It's the addition of
the two results together.

129
00:07:45.544 --> 00:07:50.254
So and that's why I call it a close
call because you're like, dude,

130
00:07:50.254 --> 00:07:53.566
it's in the return spot or
it's in the tail spot.

131
00:07:53.566 --> 00:07:57.546
It's a call to a method, it's a tail call.

132
00:07:57.546 --> 00:08:01.385
This is not a tail call because
the last instruction it's gonna

133
00:08:01.385 --> 00:08:05.525
execute is now add the result of this
call to the result of this call.

134
00:08:05.525 --> 00:08:10.296
The addition is the last
instruction that's gonna happen, so

135
00:08:10.296 --> 00:08:15.166
that looks this looks like a tail call,
totally not a tail call.

136
00:08:15.166 --> 00:08:18.386
And if you roll your Fibonacci like this,

137
00:08:18.386 --> 00:08:24.270
you'd still have your 10,000 stack cap,
and it would die.

138
00:08:24.270 --> 00:08:27.260
And probably less, because there's
significantly more variables and

139
00:08:27.260 --> 00:08:27.904
code in there.

140
00:08:27.904 --> 00:08:31.784
Good question,
did anyone else have that question?

141
00:08:31.784 --> 00:08:36.204
Good question, any other questions?

142
00:08:36.204 --> 00:08:38.364
No, we're good, okay.

143
00:08:38.364 --> 00:08:41.286
So remember I said I was gonna want you
guys to try it out, I was like hey guys,

144
00:08:41.286 --> 00:08:43.409
we're gonna talk about it and
we're gonna try it out.

145
00:08:43.409 --> 00:08:47.706
And so if you look at proper tail calls,
it's like the saddest,

146
00:08:47.706 --> 00:08:50.960
it's like the loneliest number right.

147
00:08:50.960 --> 00:08:56.540
Like nobody is doing it, and
tracer can't do it, cuz tracer

148
00:09:02.440 --> 00:09:07.840
has a lot of these features but
it doesn't have a PDC because tracer,

149
00:09:07.840 --> 00:09:10.750
it compiles from ES6 into ES5.

150
00:09:11.840 --> 00:09:15.541
So it can affect the runtime environment,
it couldn't make tail calls,

151
00:09:15.541 --> 00:09:18.718
it couldn't make the recursion happen,
if it even wanted to.

152
00:09:18.718 --> 00:09:23.640
And so, but no one else has implemented
it yet, not even Firefox,Chrome hasn't.

153
00:09:23.640 --> 00:09:26.424
So yeah, it's just kind of a sad,

154
00:09:26.424 --> 00:09:30.648
sad little feature so
we're just gonna keep going.

155
00:09:30.648 --> 00:09:31.808
This is the only one
that's like that though.

156
00:09:31.808 --> 00:09:34.510
Everything else you guys
will be able to try, so

