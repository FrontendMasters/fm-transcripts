WEBVTT

1
00:00:00.000 --> 00:00:04.177
[MUSIC]

2
00:00:04.177 --> 00:00:07.546
&gt;&gt; Aaron Frost: So destructuring allows
you to bind a set of variables to

3
00:00:07.546 --> 00:00:10.070
a corresponding set of values.

4
00:00:10.070 --> 00:00:13.010
Anywhere that you can normally
bind a value to a single variable.

5
00:00:15.530 --> 00:00:16.180
Awesome right?

6
00:00:17.620 --> 00:00:18.750
We're like what does that even mean.

7
00:00:18.750 --> 00:00:19.440
Okay.

8
00:00:19.440 --> 00:00:24.410
So normally we build stuff and
when we take things apart when we destruct

9
00:00:24.410 --> 00:00:29.992
an object it's always
with manual destructuring

10
00:00:29.992 --> 00:00:35.700
adds a lot of well not a lot
of adds some new syntax and

11
00:00:35.700 --> 00:00:40.120
some new paradigms into JavaScript.

12
00:00:40.120 --> 00:00:42.410
Things that we haven't seen before.

13
00:00:42.410 --> 00:00:46.700
And we're gonna talk about those.

14
00:00:46.700 --> 00:00:48.120
We're gonna talk about pattern matching.

15
00:00:48.120 --> 00:00:54.410
The pattern matching the more we get into
it the more advanced they can be in it.

16
00:00:54.410 --> 00:00:57.370
It Changer this year and
I think it's solid again.

17
00:00:57.370 --> 00:01:00.380
However it could change again.

18
00:01:00.380 --> 00:01:05.410
But, for now, and you guys are like,
what does pattern matching even mean?

19
00:01:05.410 --> 00:01:06.448
But I'll show you.

20
00:01:06.448 --> 00:01:09.830
So, but some of this stuff,

21
00:01:09.830 --> 00:01:14.390
I mean, I don't think it's
going to change, but it could.

22
00:01:14.390 --> 00:01:16.450
So, there's really two approaches,

23
00:01:16.450 --> 00:01:18.590
there's two main things
you're trying to destructure.

24
00:01:18.590 --> 00:01:21.200
When we pull an object apart what
are we trying to pull apart?

25
00:01:21.200 --> 00:01:24.430
We're trying to pull
apart bits of JSON right.

26
00:01:24.430 --> 00:01:26.480
We're trying to pull apart arrays.

27
00:01:26.480 --> 00:01:29.580
Really, when we take something I want
to do with that piece that array or

28
00:01:29.580 --> 00:01:34.750
give me give me this value by this key
into an object we trying to pull apart.

29
00:01:34.750 --> 00:01:39.040
And so we're gonna I'm gonna talk about
those separately not in the same section

30
00:01:39.040 --> 00:01:41.180
of slides because they are different.

31
00:01:41.180 --> 00:01:44.440
And when we talk about patterns,
the patterns change.

32
00:01:44.440 --> 00:01:48.110
And the concepts are similar,
but the stuff's gonna change.

33
00:01:48.110 --> 00:01:51.400
So we're gonna talk about them separately,
structuring objects and

34
00:01:51.400 --> 00:01:52.960
then we'll talk about
destructuring arrays second.

35
00:01:55.810 --> 00:01:59.220
So here's kind of your first
view at destructuring.

36
00:02:00.610 --> 00:02:06.260
So Imagine I have like this this object

37
00:02:06.260 --> 00:02:11.330
at a city say it is that BEEN it and I go
I go I called get an address to get it.

38
00:02:11.330 --> 00:02:13.840
OK.
And I want to pull

39
00:02:13.840 --> 00:02:16.030
I want to I want to pull
the city in the state.

40
00:02:16.030 --> 00:02:17.440
This is about.

41
00:02:17.440 --> 00:02:20.950
So, this is the syntax you're going
to use to put up with the structure.

42
00:02:20.950 --> 00:02:21.620
OK.

43
00:02:21.620 --> 00:02:24.890
And with just one line of code,
I've got three new variables.

44
00:02:25.920 --> 00:02:31.090
That all went into the return that value
of that get address call to say hey,

45
00:02:31.090 --> 00:02:34.640
I'm equal to the city
property of that object.

46
00:02:34.640 --> 00:02:37.830
State says I'm equal to the state
property of that object.

47
00:02:37.830 --> 00:02:42.630
And zip said I'm equal to zip
of that object Very sense.

48
00:02:43.780 --> 00:02:44.430
What's going on there?

49
00:02:44.430 --> 00:02:46.720
And then you can kind
of log them separately.

50
00:02:47.780 --> 00:02:52.480
So, normally we spend like the tour
to the top of our functions.

51
00:02:52.480 --> 00:02:57.640
We spend a lot of time, like making sure
something is got a default value, and

52
00:02:57.640 --> 00:03:02.880
pulling things out, and We spent a lot of

53
00:03:02.880 --> 00:03:06.140
time of at the top of each our functions
kinda data proving the function and,

54
00:03:06.140 --> 00:03:08.590
kinda setting up the code
that is gonna run below.

55
00:03:08.590 --> 00:03:11.430
And destructuring helps us
get that done quicker, okay.

56
00:03:11.430 --> 00:03:14.033
So helps us pull incoming
objects apart so.

57
00:03:16.636 --> 00:03:21.480
&gt;&gt; Aaron Frost: Sorry.

58
00:03:21.480 --> 00:03:22.000
Okay.

59
00:03:22.000 --> 00:03:24.004
So You could.

60
00:03:24.004 --> 00:03:26.553
Yeah.

61
00:03:28.633 --> 00:03:31.705
&gt;&gt; Aaron Frost: Okay, so one thing to
notice is that we have braces on the left

62
00:03:31.705 --> 00:03:35.520
side of the same expression now like
we've never really seen that before.

63
00:03:36.980 --> 00:03:40.370
Before the braces have only ever existed
on the right side of an assignment

64
00:03:40.370 --> 00:03:43.640
expression so
whenever we've seen an equal sign.

65
00:03:43.640 --> 00:03:48.270
It's not been on the left,
unless we're comparing an object on

66
00:03:48.270 --> 00:03:53.260
the left to something like, but that's
a comparative that's not equals, right?

67
00:03:53.260 --> 00:03:55.200
So when we're assigning
something we've never

68
00:03:56.680 --> 00:03:59.730
been able to have a curly brace
on the left side of that.

69
00:03:59.730 --> 00:04:02.700
So that's a new thing that they kinda
when you look at this that might be

70
00:04:02.700 --> 00:04:03.940
kinda what grabs you first.

71
00:04:05.370 --> 00:04:10.510
And we were able to make three separate
variables just by comma separating them.

72
00:04:10.510 --> 00:04:11.320
OK.

73
00:04:11.320 --> 00:04:14.860
And this this over here this is
called the restructuring pattern.

74
00:04:14.860 --> 00:04:15.760
OK.

75
00:04:15.760 --> 00:04:20.530
So I had to call those things very
specific names like I knew in

76
00:04:20.530 --> 00:04:24.459
an address there was a city property so I
called my value my variable city as well.

77
00:04:25.950 --> 00:04:27.070
Otherwise this would've worked.

78
00:04:28.200 --> 00:04:32.540
Like if I tried to get through out of it
there's probably not a foo in the address,

79
00:04:32.540 --> 00:04:33.238
a foo properties.

80
00:04:33.238 --> 00:04:40.110
If I want to alias in though like let's
say I wanted to pull city out and

81
00:04:40.110 --> 00:04:45.500
I wanna call it c this is kind of
the pattern that you would use and

82
00:04:45.500 --> 00:04:49.820
if I want to pull state out And
I wanna call S, in zip.

83
00:04:49.820 --> 00:04:50.320
And call it Z.

84
00:04:52.030 --> 00:04:54.840
This is the syntax,
that you would do that with.

85
00:04:54.840 --> 00:04:57.800
So you can kinda alias, some names.

86
00:04:57.800 --> 00:04:59.961
So if we want to dork around with this.

87
00:05:10.126 --> 00:05:11.665
&gt;&gt; Aaron Frost: Yeah,.
Yeah, yeah, yeah, yeah.

88
00:05:19.491 --> 00:05:20.930
&gt;&gt; Aaron Frost: Okay.

89
00:05:20.930 --> 00:05:23.870
So, I'm gonna turn this off.

90
00:05:23.870 --> 00:05:24.850
Show generated code, okay.

91
00:05:25.950 --> 00:05:28.670
So, this is kind of how you would use it.

92
00:05:28.670 --> 00:05:34.040
When I log the city, state, zip, the c,
s and the z, this is what I get.

93
00:05:34.040 --> 00:05:39.140
If I try and log city, state, zip,
it's not gonna have them anymore.

94
00:05:39.140 --> 00:05:42.118
It freaks out and
actually throws a compile error.

95
00:05:42.118 --> 00:05:46.780
It says, I can't find city, and it would
do the same thing for state or zip.

96
00:05:46.780 --> 00:05:49.830
So this is kind of
destructuring on the fly.

97
00:05:51.640 --> 00:05:57.690
So this is kinda how you alias the names
of the things that you're pulling out.

98
00:05:57.690 --> 00:06:02.730
So this becomes the name of
the property inside the address, and

99
00:06:02.730 --> 00:06:06.080
then you wanna alias it to
whatever you wanna alias it to.

100
00:06:06.080 --> 00:06:06.580
That's how you do it.

