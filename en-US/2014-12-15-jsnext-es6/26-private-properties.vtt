WEBVTT

1
00:00:00.000 --> 00:00:04.214
[MUSIC]

2
00:00:04.214 --> 00:00:07.646
&gt;&gt; Aaron Frost: I don't want people to
access my monsters health property,

3
00:00:07.646 --> 00:00:12.380
like manual, I don't want them to be able
to say, what's the monster's health.

4
00:00:14.270 --> 00:00:16.930
So I want to have like this
private property called health,

5
00:00:16.930 --> 00:00:19.510
and if you want it,
you got to call get health.

6
00:00:19.510 --> 00:00:23.240
You can't just say like
give me the health.

7
00:00:23.240 --> 00:00:26.410
I don't want you to be able to manipulate
it because if you adjust the health

8
00:00:26.410 --> 00:00:29.220
I need to be able to react
to that internally right.

9
00:00:29.220 --> 00:00:35.020
And so I'm going to make so

10
00:00:35.020 --> 00:00:39.730
by saying this sub monster
health equals health.

11
00:00:40.880 --> 00:00:45.610
If you pass in the in the health
in the constructor, it's going to

12
00:00:45.610 --> 00:00:51.070
sign like some GUID on
the this equal to health.

13
00:00:51.070 --> 00:00:55.890
So the reason it's private is because
you're not going to be able to

14
00:00:55.890 --> 00:01:00.930
predictably know what property belongs
to what, you know what I'm saying,

15
00:01:00.930 --> 00:01:02.340
does that make sense?

16
00:01:02.340 --> 00:01:08.910
And so especially,
like if you take this code and

17
00:01:10.280 --> 00:01:16.388
over in the REPL.
&gt;&gt; Aaron Frost: So

18
00:01:16.388 --> 00:01:21.161
if you take this and
you say, var a = new Monster

19
00:01:25.970 --> 00:01:26.820
&gt;&gt; Aaron Frost: What's our monster's name?

20
00:01:29.330 --> 00:01:31.500
Kevin, of course dude.

21
00:01:32.780 --> 00:01:34.250
All right his hit point is one.

22
00:01:35.250 --> 00:01:42.850
Kevin's not a very powerful monster.
&gt;&gt; Aaron Frost: Come on

23
00:01:42.850 --> 00:01:51.240
Kevin
&gt;&gt; Aaron Frost: Why

24
00:01:51.240 --> 00:01:52.400
is it aligning my style?

25
00:01:52.400 --> 00:01:54.460
Dude, is my browser broken?

26
00:01:54.460 --> 00:02:01.230
How come none of my stuff's working?
&gt;&gt; Mark: But

27
00:02:01.230 --> 00:02:07.303
it works in [INAUDIBLE]

28
00:02:13.380 --> 00:02:15.806
&gt;&gt; Aaron Frost: Dude, it's totally so

29
00:02:15.806 --> 00:02:25.010
not even working.
&gt;&gt; Aaron Frost: There we go.

30
00:02:26.330 --> 00:02:30.020
My man's got, he's got my stuff cranked
up so high, I can't even see it.

31
00:02:31.730 --> 00:02:36.443
That was you, Mark.
&gt;&gt; Mark: Always the font size.

32
00:02:39.942 --> 00:02:43.659
&gt;&gt; Mark: Just [INAUDIBLE]

33
00:02:43.659 --> 00:02:44.532
&gt;&gt; Aaron Frost: Yeah.

34
00:02:46.600 --> 00:02:50.990
Let about var, because we're
going to put in a closure anyway.

35
00:02:50.990 --> 00:02:51.900
There we go.

36
00:02:53.230 --> 00:02:56.530
Now it logged the monster.

37
00:02:57.580 --> 00:03:03.280
So, this monster, and
his name's Kevin, and he's

38
00:03:03.280 --> 00:03:08.730
got some random property,
that's got a one in it.

39
00:03:08.730 --> 00:03:09.840
Okay.

40
00:03:09.840 --> 00:03:12.920
And the only people that
know what that property is,

41
00:03:12.920 --> 00:03:17.030
is us because when we
declare a function and

42
00:03:17.030 --> 00:03:21.740
we need a private property like this,
were to put it inside of a closure.

43
00:03:23.340 --> 00:03:29.132
So, that we're the only
ones that have access.

44
00:03:29.132 --> 00:03:31.454
We're the only ones that have
access to that symbol and

45
00:03:31.454 --> 00:03:34.544
we don't want the world to be able to
gain access to that symbol, right?

46
00:03:34.544 --> 00:03:38.000
Otherwise everyone's going to know what it
is, they're going to manipulate or stuff.

47
00:03:38.000 --> 00:03:41.648
So, we just go ahead and
we wrap like that in a runtime.

48
00:03:41.648 --> 00:03:49.387
There's no certifiable way to
detect what's going on here.

49
00:03:49.387 --> 00:03:53.042
So if I say this.monster.

50
00:04:49.313 --> 00:04:51.721
&gt;&gt; Aaron Frost: So
I should pull this back out.

51
00:05:05.368 --> 00:05:06.457
&gt;&gt; Aaron Frost: Okay, I got it.

52
00:05:06.457 --> 00:05:08.460
Sorry that was so painful.

53
00:05:09.680 --> 00:05:15.760
So, this way everyone can see what
monsters they can all constructed but

54
00:05:15.760 --> 00:05:18.820
they can't see, they're not gonna be able
to know what my private variables are.

55
00:05:18.820 --> 00:05:24.438
So, like, if I had health and then maybe,

56
00:05:24.438 --> 00:05:29.790
what's another feature of a monster?
&gt;&gt; Speaker 3: Horns.

57
00:05:34.920 --> 00:05:35.469
&gt;&gt; Aaron Frost: Horns?

58
00:05:36.630 --> 00:05:39.310
Right?
&gt;&gt; Speaker 4: Attack value.

59
00:05:39.310 --> 00:05:40.837
&gt;&gt; Aaron Frost: Attack value?

60
00:05:40.837 --> 00:05:44.262
&gt;&gt; Speaker 5: [INAUDIBLE] Speed?

61
00:05:44.262 --> 00:05:45.583
&gt;&gt; Aaron Frost: Speed.

62
00:05:45.583 --> 00:05:49.010
&gt;&gt; Speaker 5: Line movement.

63
00:05:49.010 --> 00:05:49.760
&gt;&gt; Aaron Frost: Yeah yeah.

64
00:05:49.760 --> 00:05:50.760
Speed is good.

65
00:05:50.760 --> 00:05:55.050
I don't want other people like to be
able to mess with my guy's speed, right?

66
00:05:55.050 --> 00:05:57.980
Like, they can maybe find out what it is,
but

67
00:05:57.980 --> 00:06:00.810
I don't want them to be able to
alter the value of that property.

68
00:06:00.810 --> 00:06:03.210
So that's kind of a thing that I would
definitely want to use this for too,

69
00:06:03.210 --> 00:06:05.520
that was a good call.

70
00:06:07.830 --> 00:06:12.544
So, when you do the sub,
you could be like speed,

71
00:06:12.544 --> 00:06:15.699
he does speed, this[monster.

72
00:06:20.890 --> 00:06:24.740
&gt;&gt; Aaron Frost: Right, and then if we need

73
00:06:24.740 --> 00:06:30.900
to get the speed out we can say,
get speed.

74
00:06:32.650 --> 00:06:37.038
So we can use one of the ES5 getters or
properties I'm gonna say,

75
00:06:37.038 --> 00:06:44.480
return this[monsterSpeed, right.

76
00:06:44.480 --> 00:06:51.020
So now over here, I've gotta say a dot,
I didn't pass it in.

77
00:06:54.100 --> 00:06:54.630
Who's Kevin?

78
00:06:56.110 --> 00:06:58.250
Kevin?
Is there a Kevin in here?

79
00:06:58.250 --> 00:06:59.130
Not a real person.

80
00:06:59.130 --> 00:07:00.570
I thought you're trolling someone.

81
00:07:00.570 --> 00:07:02.460
But it's not even a real person.

82
00:07:02.460 --> 00:07:03.110
Who said Kevin?

83
00:07:04.540 --> 00:07:05.270
Is it a real guy?
&gt;&gt; Speaker 6: No.

84
00:07:05.270 --> 00:07:07.020
&gt;&gt; Aaron Frost: Just made him up.

85
00:07:07.020 --> 00:07:09.634
&gt;&gt; Speaker 7: There's a Kevin in the chat

86
00:07:09.634 --> 00:07:12.555
room.
&gt;&gt; Aaron Frost: Kevin, take that buddy.

87
00:07:12.555 --> 00:07:14.900
&gt;&gt; Students: [LAUGH]

88
00:07:14.900 --> 00:07:15.768
&gt;&gt; Aaron Frost: Kevin is like dude,

89
00:07:15.768 --> 00:07:19.395
the monster's strength is a million.
&gt;&gt; Students: [LAUGH]

90
00:07:19.395 --> 00:07:20.120
&gt;&gt; Aaron Frost: No, it's not, buddy,

91
00:07:20.120 --> 00:07:23.400
it's not a million,
it's negative one, the speed.

92
00:07:23.400 --> 00:07:24.020
Anyway, so,

93
00:07:25.500 --> 00:07:28.750
that's how you implement a private
property are you guys in love with that?

94
00:07:28.750 --> 00:07:31.290
You hate it, you love it, hate it.

95
00:07:31.290 --> 00:07:37.790
Hate, love, I don't mind much, either way.

96
00:07:37.790 --> 00:07:39.340
Who's just happy that
they got something out?

97
00:07:39.340 --> 00:07:41.940
I'm just happy that I got something out.
&gt;&gt; Speaker 9: [INAUDIBLE] they made

98
00:07:41.940 --> 00:07:44.700
a way to do private property.
&gt;&gt; Aaron Frost: If they agreed on

99
00:07:44.700 --> 00:07:49.520
something, GUID generator, and
if they agreed on this class syntax, and

100
00:07:49.520 --> 00:07:52.360
we could combine the two to
get it private-ish property,

101
00:07:52.360 --> 00:07:55.970
even though if it's only private
by obscurity That's fine with me.

102
00:07:55.970 --> 00:07:58.398
I don't care.
&gt;&gt; Speaker 9: In chat, there's a question,

103
00:07:58.398 --> 00:08:01.270
if you could just explain
symbol really quickly.

104
00:08:01.270 --> 00:08:01.840
&gt;&gt; Aaron Frost: Symbol?

105
00:08:01.840 --> 00:08:04.990
I actually haven't read the spec.

106
00:08:04.990 --> 00:08:07.830
I only know that this is what
we're going to use it for.

107
00:08:07.830 --> 00:08:16.895
But let's go read it real quick.
&gt;&gt; Aaron Frost: Actually it's more,

108
00:08:16.895 --> 00:08:19.629
on and pull the other site.

109
00:08:19.629 --> 00:08:22.283
That was a good question.

110
00:08:22.283 --> 00:08:27.680
Harmony proposals,
tone that back up a little bit.

111
00:08:27.680 --> 00:08:35.390
It's not even on there that's what
I thought I never saw it on here.

112
00:08:35.390 --> 00:08:43.053
So if you go to symbols over here
&gt;&gt; Mark: There

113
00:08:43.053 --> 00:08:44.540
it is.
&gt;&gt; Aaron Frost: Yeah.

114
00:08:44.540 --> 00:08:47.450
Take you over here and
it is super easy to understand.

115
00:08:49.700 --> 00:08:56.327
Okay, the symbol constructor,

116
00:08:56.327 --> 00:09:00.593
is what the [INAUDIBLE]

117
00:09:03.596 --> 00:09:08.439
&gt;&gt; [INAUDIBLE]
&gt;&gt; Aaron Frost: The symbol constructor is

118
00:09:08.439 --> 00:09:13.359
the %Symbol% intrinsic
object of the initial value

119
00:09:13.359 --> 00:09:18.890
of symbol property of
the global object Totally.

120
00:09:18.890 --> 00:09:21.160
That's what we thought it was right?

121
00:09:22.810 --> 00:09:26.320
I don't even know what that means?
&gt;&gt; Speaker 10: Perfectly clear

122
00:09:26.320 --> 00:09:27.190
now.
&gt;&gt; Aaron Frost: Yeah.

123
00:09:27.190 --> 00:09:29.630
When a symbol is called as a function

124
00:09:29.630 --> 00:09:32.860
rather than as a constructor
it returns a new symbol value.

125
00:09:34.260 --> 00:09:36.210
That's counterintuitive.

126
00:09:36.210 --> 00:09:41.850
When you call without the new, you get
a new symbol value, it's cool, whatever.

127
00:09:43.420 --> 00:09:46.630
The symbol constructor is not intended
to be used with a new operator.

128
00:09:46.630 --> 00:09:47.280
Okay, that's fine.

129
00:09:47.280 --> 00:09:48.270
Or to be subclassed.

130
00:09:48.270 --> 00:09:53.910
It may be used as the value of an extends
clause of the class declaration.

131
00:09:53.910 --> 00:09:57.496
But a super call to the symbol
constructor will not instantiate any

132
00:09:57.496 --> 00:09:58.720
subclass instances.

133
00:10:00.520 --> 00:10:01.510
Anyone?

134
00:10:01.510 --> 00:10:03.305
Did that answer no one's questions?

135
00:10:03.305 --> 00:10:05.510
Yeah, I think that answered
nobody's question.

136
00:10:05.510 --> 00:10:08.856
But that's what it is,
because it's not on the proposal site.

137
00:10:08.856 --> 00:10:14.840
So sorry to disappoint.

138
00:10:14.840 --> 00:10:20.060
For now I think of symbol
as like a GUID generator.

139
00:10:20.060 --> 00:10:21.900
That's never gonna give
you the same one twice.

140
00:10:21.900 --> 00:10:22.570
Can we agree on that?

141
00:10:22.570 --> 00:10:27.124
At least for the purposes of classes?
&gt;&gt; Speaker 9: So when you use it for

142
00:10:27.124 --> 00:10:31.716
a property name, I feel like I
read that it's treated specially,

143
00:10:31.716 --> 00:10:35.898
like it doesn't return a string so
much as like it makes it not

144
00:10:35.898 --> 00:10:40.170
a new mobile property it's well
that's sounds great to you.

145
00:10:40.170 --> 00:10:44.527
It's like if I create a Monster and
just like,

146
00:10:44.527 --> 00:10:49.559
there's properties the monster
health does not show

147
00:10:49.559 --> 00:10:53.950
up on the list of property names I think?
&gt;&gt; Aaron Frost: Maybe.

148
00:10:53.950 --> 00:10:55.000
I don't know.

149
00:10:55.000 --> 00:10:55.550
I don't think so.

150
00:10:57.380 --> 00:10:58.040
Okay.

151
00:10:58.040 --> 00:10:59.380
Yeah, yeah, yeah, yeah.

152
00:10:59.380 --> 00:11:02.690
So ,if I say this.getOwnProperty.

153
00:11:02.690 --> 00:11:03.800
Yeah it won't be able to find it.

154
00:11:03.800 --> 00:11:09.880
Like so you know on an object you can say,
object.getOwnProperties?

155
00:11:09.880 --> 00:11:13.280
And it says hey, well,
I've got a name property, and

156
00:11:13.280 --> 00:11:18.080
I got one of these, and
then I got one of these, right?

157
00:11:18.080 --> 00:11:19.440
I got a speed and health.

158
00:11:20.450 --> 00:11:23.520
Well, if you use this symbol supposedly,

159
00:11:23.520 --> 00:11:25.790
it's not gonna show up on
the getOwnProperty list.

160
00:11:25.790 --> 00:11:28.640
So, people won't even be able
to like poke the thing, and

161
00:11:28.640 --> 00:11:33.330
they would be like, hey what keys
are on you, like they won't know.

162
00:11:33.330 --> 00:11:36.110
So that if that makes any sense.

