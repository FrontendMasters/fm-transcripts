WEBVTT

1
00:00:04.090 --> 00:00:05.750
[MUSIC]
&gt;&gt; Aaron Frost: Proper tail calls.

2
00:00:05.750 --> 00:00:06.997
So this is a quote by Dave Herman.

3
00:00:06.997 --> 00:00:08.575
Does anyone, Dave Herman?

4
00:00:08.575 --> 00:00:12.221
Super smart guy, architect,
no, principal researcher,

5
00:00:12.221 --> 00:00:16.378
I think that's better than architect,
I don't know, at Mozilla.

6
00:00:16.378 --> 00:00:20.669
He's super wicked smart, and
he's as nice as he is smart.

7
00:00:21.790 --> 00:00:25.300
He wrote the, why am I drawing a blank,
Effective JavaScript,

8
00:00:25.300 --> 00:00:29.135
he wrote the book called Effective
JavaScript, which for me is like,

9
00:00:29.135 --> 00:00:33.818
when someone's like, hey, I'm gonna learn
JavaScript, what book should I read?

10
00:00:33.818 --> 00:00:35.201
Effective JavaScript by Dave Herman.

11
00:00:35.201 --> 00:00:40.079
So he says, proper tail recursion is
a property of the asymptotic space

12
00:00:40.079 --> 00:00:43.430
complexity of a language's
runtime behavior.

13
00:00:44.580 --> 00:00:49.292
That is, in improperly tail recursive
languages, control can consume unbounded

14
00:00:49.292 --> 00:00:54.138
amounts of space for programs that, when
run in properly tail recursive languages,

15
00:00:54.138 --> 00:00:56.517
only require a constant amount of space.

16
00:00:56.517 --> 00:00:58.204
So that's it.

17
00:00:58.204 --> 00:00:59.249
You guys got it?

18
00:00:59.249 --> 00:01:02.830
So this is how he talks, though.

19
00:01:02.830 --> 00:01:05.480
And it makes perfect sense to Dave.

20
00:01:05.480 --> 00:01:06.020
But I read that,

21
00:01:06.020 --> 00:01:08.840
I got to read like 40 times cuz I don't
even know what he's talking about.

22
00:01:09.840 --> 00:01:11.500
So this is what I think Dave meant.

23
00:01:13.310 --> 00:01:17.871
In an improperly tail recursive languages.

24
00:01:17.871 --> 00:01:21.380
And I'll explain tail
recursion in a second.

25
00:01:21.380 --> 00:01:26.980
But when your language has implemented
improper tail recursion, as

26
00:01:26.980 --> 00:01:32.350
time goes on, as the number
of recursive calls increases,

27
00:01:32.350 --> 00:01:38.270
your memory usage also increases
without a bound, it's unbounded, okay.

28
00:01:38.270 --> 00:01:42.420
And in a language that properly
implements tail calls,

29
00:01:44.650 --> 00:01:47.920
with each number of recursive
calls into that function,

30
00:01:47.920 --> 00:01:50.880
you're not gonna increase
your memory usage over time.

31
00:01:50.880 --> 00:01:54.630
Like, it will maintain a constant
level of memory usage.

32
00:01:54.630 --> 00:01:57.566
So that's what Dave's trying to say.

33
00:01:57.566 --> 00:01:59.251
So clearly we've got this, right.

34
00:01:59.251 --> 00:02:03.095
If you try and do recursion in JavaScript,
and we'll do an example here

35
00:02:03.095 --> 00:02:07.339
in a second just to kind of show how far
we can get, this is why it doesn't work.

36
00:02:07.339 --> 00:02:11.443
Because when it makes the new call,
it doesn't drop the old stack,

37
00:02:11.443 --> 00:02:14.836
it keeps a hold of that,
which is gonna consume memory.

38
00:02:14.836 --> 00:02:17.656
And in a language where
recursion was meant to happen,

39
00:02:17.656 --> 00:02:22.129
if it doesn't need that whole stack, like
if it doesn't need anything from up there,

40
00:02:22.129 --> 00:02:24.850
it will just drop it and
it can go on to the next thing.

41
00:02:26.810 --> 00:02:31.350
So here we've got a foo method,
it's a recursive method.

42
00:02:31.350 --> 00:02:34.661
It's just gonna sit here and
call itself until it dies,

43
00:02:34.661 --> 00:02:40.310
essentially, and then it will return
whatever number that it died on, okay.

44
00:02:40.310 --> 00:02:43.887
So I'm gonna go ahead and run this real
quick just so we can kind of see it.

45
00:02:51.145 --> 00:02:52.729
&gt;&gt; Aaron Frost: So if we go here.

46
00:02:52.729 --> 00:02:56.401
Can everyone see this okay?

47
00:02:56.401 --> 00:02:58.462
So we're gonna run this, and

48
00:02:58.462 --> 00:03:03.909
it's gonna return the number of times it
called before it just blew the stack.

49
00:03:05.020 --> 00:03:08.175
So we get about 10,460,
that's pretty constant.

50
00:03:08.175 --> 00:03:12.549
And those are pretty shallow frames,
right, there's not a lot

51
00:03:12.549 --> 00:03:17.340
happening frame to frame,
they're just saving a value for a number.

52
00:03:17.340 --> 00:03:19.602
So in Firefox, this was awesome.

53
00:03:19.602 --> 00:03:22.294
In Firefox.

54
00:03:22.294 --> 00:03:26.543
No, dude, no.

55
00:03:29.464 --> 00:03:34.820
&gt;&gt; Aaron Frost: I'm actually
gonna refresh the page.

56
00:03:36.520 --> 00:03:38.560
Okay, let's paste this in there.

57
00:03:38.560 --> 00:03:43.340
So Firefox actually gets way more,
like than almost five times more, right?

58
00:03:44.570 --> 00:03:48.381
So Firefox has figured out
a way to make the current

59
00:03:48.381 --> 00:03:53.170
implementation not suck as bad,
but it still kind of sucks.

60
00:03:53.170 --> 00:03:57.250
But anyway, so that's how far
you're going to get before you die.

61
00:03:57.250 --> 00:04:02.614
So if you have a recursive method that you
can guarantee that n is less than 10,000.

62
00:04:02.614 --> 00:04:04.250
And IE is actually lower.

63
00:04:04.250 --> 00:04:06.470
I don't have an IE,
though, so I can't run it.

64
00:04:06.470 --> 00:04:13.018
But if you can guarantee it's going
to run less than 10,000 times,

65
00:04:13.018 --> 00:04:19.688
then you could possibly use recursion
in JavaScript, but you wouldn't.

66
00:04:19.688 --> 00:04:24.889
And so this PTC functionality
is to get proper tail recursion.

67
00:04:24.889 --> 00:04:28.440
So I wanted to explain what it
takes to have a proper tail call.

68
00:04:28.440 --> 00:04:33.280
So here's a diagram of what's happening
for those that aren't grokking it.

69
00:04:33.280 --> 00:04:36.766
So when we make the first call,
it puts one stack in the memory, right.

70
00:04:36.766 --> 00:04:40.706
And then when it makes a second call into
the method, it's gonna put a second stack.

71
00:04:40.706 --> 00:04:42.947
And then we got a third one
with a new context, and

72
00:04:42.947 --> 00:04:44.600
those new contexts take up memory.

73
00:04:44.600 --> 00:04:47.317
And then by the time you
get N deep into here,

74
00:04:47.317 --> 00:04:51.520
every single one of them is putting
a new stack into memory, right.

75
00:04:51.520 --> 00:04:53.220
And it's consuming more memory.

76
00:04:53.220 --> 00:04:57.150
So this is why the graph just kinda showed
the memory take off up into outer space,

77
00:04:57.150 --> 00:04:59.670
because it's taking more memory every
single time it makes that call.

78
00:05:00.810 --> 00:05:05.332
And it's not releasing those
current stacks like it

79
00:05:05.332 --> 00:05:09.451
could do if we had a proper
tail recursion, so.

80
00:05:09.451 --> 00:05:12.370
ES6 brings proper tail calls.

81
00:05:12.370 --> 00:05:14.220
So that's one of the new features.

82
00:05:14.220 --> 00:05:19.084
And if you if you use your tail calls
correctly, you'll be able to get that

83
00:05:19.084 --> 00:05:23.727
proper tail call functionality and
you'll be able to get recursion.

84
00:05:23.727 --> 00:05:30.400
So let me explain how you're going to
be able to get a proper tail call.

85
00:05:30.400 --> 00:05:35.600
And in a proper tail call, those
previous stacks are gonna get GCed or

86
00:05:35.600 --> 00:05:38.570
reused, so it will release that stuff.

87
00:05:39.670 --> 00:05:43.100
So there's some vocab around this.

88
00:05:43.100 --> 00:05:44.980
Let me explain tail position.

89
00:05:44.980 --> 00:05:49.840
So tail position is the last instruction
before the return statement, okay?

90
00:05:49.840 --> 00:05:56.890
So in this little function right here, in
tail position, we've got a string, okay?

91
00:05:56.890 --> 00:05:58.190
So it's gonna eval that string.

92
00:05:58.190 --> 00:06:00.592
That's the last instruction before return.

93
00:06:00.592 --> 00:06:03.629
So that string is in tail position, okay.

94
00:06:03.629 --> 00:06:06.930
And some functions are going to have.

95
00:06:12.081 --> 00:06:14.278
&gt;&gt; Aaron Frost: Some functions have
multiple tail positions, right.

96
00:06:14.278 --> 00:06:18.345
Have you guys ever seen a function
with two return statements?

97
00:06:18.345 --> 00:06:22.500
Two return statements, like if,
return this, else, return that?

98
00:06:22.500 --> 00:06:23.650
Yeah.

99
00:06:23.650 --> 00:06:29.372
Not return return, but
in two different lines of code, yeah.

100
00:06:29.372 --> 00:06:32.500
So we understand what tail position is,

101
00:06:32.500 --> 00:06:37.650
it's the last thing that's gonna
happen before the tail call.

102
00:06:37.650 --> 00:06:38.703
Before the return statement, okay.

103
00:06:38.703 --> 00:06:41.090
But then we have this tail call.

104
00:06:41.090 --> 00:06:42.470
So here's two different functions.

105
00:06:43.500 --> 00:06:46.470
So, PTC stands for
proper tail calls, sorry.

106
00:06:49.070 --> 00:06:52.470
So here we've got two tail positions.

107
00:06:52.470 --> 00:06:56.970
We've got our function here, again, where
we've got hello in the tail position.

108
00:06:56.970 --> 00:06:59.160
We've also got a call to getSalutation,
and

109
00:06:59.160 --> 00:07:01.880
that's in tail position as well, right?

110
00:07:02.970 --> 00:07:05.709
So this is actually a call
to another method, though.

111
00:07:05.709 --> 00:07:10.980
And it doesn't need to hold on any of the
variables up inside this block right here.

112
00:07:12.690 --> 00:07:15.715
So that's actually in,
that's a tail call, and it's proper,

113
00:07:15.715 --> 00:07:19.125
because it doesn't need any,
when you make that call to getSalutation,

114
00:07:19.125 --> 00:07:23.050
it doesn't need to maintain any
variables from the current stack.

115
00:07:23.050 --> 00:07:26.590
So that's what a proper
tail call looks like.

116
00:07:26.590 --> 00:07:31.330
But for vocab sakes, anything that's
in the tail position that's a call to

117
00:07:31.330 --> 00:07:33.783
a method, that's a tail call, okay.

118
00:07:33.783 --> 00:07:39.890
So when that last instruction is a call
to another function, that's a tail call.

119
00:07:39.890 --> 00:07:41.999
So we know what tail position and
tail calls are.

120
00:07:43.090 --> 00:07:49.616
&gt;&gt; Aaron Frost: So let's talk about,
and we've seen these all over, right.

121
00:07:49.616 --> 00:07:53.230
Like, anyone who's done some Node, and
I don't know why I put script tags on this

122
00:07:53.230 --> 00:07:56.360
slide, but anyone who's done Node has
seen a results handler like this, right.

123
00:07:56.360 --> 00:07:58.330
Like if you call the database,
you're like,

124
00:07:58.330 --> 00:08:00.920
hey, I'm gonna get an error or
a result set back.

125
00:08:00.920 --> 00:08:05.240
And if I have an error,
I freak out and pass the error back.

126
00:08:05.240 --> 00:08:08.310
Otherwise, I call the callback
with whatever the results were.

127
00:08:08.310 --> 00:08:13.485
So we have two tail positions and
two tail calls on this thing.

128
00:08:13.485 --> 00:08:14.860
And this is common.

129
00:08:14.860 --> 00:08:16.200
We've all seen this.

130
00:08:16.200 --> 00:08:17.904
And we've probably seen worse.

131
00:08:17.904 --> 00:08:21.675
So a close call.

132
00:08:21.675 --> 00:08:26.904
Which isn't, this isn't a tail call even
though it looks like a tail call, okay.

133
00:08:26.904 --> 00:08:34.547
So what's the last thing that's gonna
happen before the return statement?

134
00:08:34.547 --> 00:08:38.946
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Aaron Frost: It's gonna add 1 to

135
00:08:38.946 --> 00:08:41.300
whatever bar returns, right?

136
00:08:41.300 --> 00:08:44.761
So even though bar is on that line,
and you're like, hey,

137
00:08:44.761 --> 00:08:49.335
I'm doing recursion the right way,
this is proper, it's still not proper,

138
00:08:49.335 --> 00:08:53.910
cuz it has to return back to this
stack in order to finish execution.

139
00:08:53.910 --> 00:08:57.791
It's gonna call bar, but
then it has to come back to this stack and

140
00:08:57.791 --> 00:08:59.851
add the result of it to 1, right.

141
00:08:59.851 --> 00:09:01.770
So it needs to maintain this stack, still.

142
00:09:02.810 --> 00:09:07.760
So that's a close call,
that's not a tail call, though.

143
00:09:07.760 --> 00:09:10.900
Even though it's trying to
disguise itself as a tail call.

