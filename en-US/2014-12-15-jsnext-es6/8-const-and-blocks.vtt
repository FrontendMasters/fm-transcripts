WEBVTT

1
00:00:00.000 --> 00:00:03.880
[MUSIC]

2
00:00:03.880 --> 00:00:05.970
&gt;&gt; Aaron: All right,
let's move on to constant.

3
00:00:05.970 --> 00:00:12.538
This one is wicked hard to grasp, right?

4
00:00:12.538 --> 00:00:13.750
Not wicked hard at all.

5
00:00:14.770 --> 00:00:19.860
So, it's just "CONST", use const a = 0.

6
00:00:19.860 --> 00:00:21.510
Don't ever try and assign me again.

7
00:00:23.350 --> 00:00:24.480
You'll get an error.

8
00:00:24.480 --> 00:00:30.830
Some of the implementations currently just
go, if you tried to do a = 1 on line two,

9
00:00:30.830 --> 00:00:35.030
they just let you think everything's
good and then you log it,

10
00:00:35.030 --> 00:00:37.140
and it's like I'm still zero though.

11
00:00:37.140 --> 00:00:38.750
I'm not one.

12
00:00:38.750 --> 00:00:42.100
So they don't die when
you're trying to do it, but

13
00:00:42.100 --> 00:00:45.808
when it all works they'll die,
just trust me it will die.

14
00:00:45.808 --> 00:00:48.954
So, constant to like it, yeah and

15
00:00:48.954 --> 00:00:53.824
as far as like scoping,
it behaves just like LET does, so

16
00:00:53.824 --> 00:00:59.616
it's lexically scoped inside of
you curly braces wherever you go.

17
00:00:59.616 --> 00:01:01.860
You can't re-declare it either.

18
00:01:04.480 --> 00:01:08.310
Any questions on constant before
we move on on block functions.

19
00:01:09.500 --> 00:01:10.866
Constant was super simple.

20
00:01:13.023 --> 00:01:15.560
&gt;&gt; Aaron: Okay, all right,
block functions.

21
00:01:15.560 --> 00:01:20.050
These are cool and because of this that's
what this feature called LET expressions

22
00:01:20.050 --> 00:01:24.030
LET statements, if anyone knows what
those were, they're gone because of this.

23
00:01:25.660 --> 00:01:29.320
So, if you wanted to make
a temporary variable and

24
00:01:30.980 --> 00:01:34.550
you're a clever developer cuz
we all have clever developers,

25
00:01:34.550 --> 00:01:39.550
we would just say if-true and
put on some false block, right?

26
00:01:39.550 --> 00:01:43.303
So, because they're like yeah dude,
they're just gonna put on an if-true and

27
00:01:43.303 --> 00:01:44.664
get a temporal scope there.

28
00:01:44.664 --> 00:01:50.140
Let's just let them lay down
a new scope just for fun.

29
00:01:50.140 --> 00:01:52.810
So you use a pair of curly braces and

30
00:01:52.810 --> 00:01:55.720
do some stuff and
you've got your own scope on the fly.

31
00:01:55.720 --> 00:01:57.140
So that's block scope.

32
00:01:58.350 --> 00:02:01.960
So, I'd imagine this is gonna
make code look kind of wonky and

33
00:02:01.960 --> 00:02:04.179
sometimes if you have three or
four of these,

34
00:02:05.270 --> 00:02:10.020
I can imagine like a crazy pyramid of
death out of this, but it's there.

35
00:02:10.020 --> 00:02:12.110
So so yeah.

36
00:02:12.110 --> 00:02:15.453
So you don't have to do that if anymore or

37
00:02:15.453 --> 00:02:19.570
the if-true and
scopes just as if you had an if-true.

38
00:02:19.570 --> 00:02:21.225
Well done with LET's stuff.

39
00:02:21.225 --> 00:02:23.260
Yeah.
&gt;&gt; Speaker 2: Question back on the CONST,

40
00:02:23.260 --> 00:02:25.526
do CONST have the same scope as LETs?

41
00:02:25.526 --> 00:02:26.790
&gt;&gt; Aaron: Yeah.

42
00:02:26.790 --> 00:02:31.510
Yep, totally,
they work just like LET, except for,

43
00:02:31.510 --> 00:02:35.600
you can't reassign the value
once it's been assigned, so.

44
00:02:35.600 --> 00:02:38.300
&gt;&gt; Speaker 2: Could you assign
a function to a constant?

45
00:02:40.000 --> 00:02:41.860
&gt;&gt; Aaron: Yeah, I mean if, yeah.

46
00:02:41.860 --> 00:02:42.774
&gt;&gt; Speaker 2: I don't know
why you would want to, but

47
00:02:42.774 --> 00:02:45.640
I'm just saying,
&gt;&gt; Aaron: Why wouldn't you want to?

48
00:02:45.640 --> 00:02:47.746
I mean like let's say you were,

49
00:02:47.746 --> 00:02:52.120
you know how we can monkey patch
functionalities data prototype.

50
00:02:52.120 --> 00:02:54.630
I mean maybe, I don't know maybe
you don't want to do that.

51
00:02:54.630 --> 00:02:58.890
Maybe you wanna make a function that
you can't overwrite I don't know.

52
00:02:58.890 --> 00:03:02.091
I'm not saying you do,
I'm not saying you don't though like,

53
00:03:02.091 --> 00:03:03.880
you might wanna say good question.

54
00:03:06.170 --> 00:03:09.840
Good.
&gt;&gt; Speaker 4: Do a CONST a function, so.

55
00:03:09.840 --> 00:03:11.310
&gt;&gt; Aaron: Const A equals function?

56
00:03:12.510 --> 00:03:13.970
&gt;&gt; Speaker 4: Yeah, or
something like that.

57
00:03:13.970 --> 00:03:15.052
&gt;&gt; Aaron: Yeah.
&gt;&gt; Speaker 4: So you don't

58
00:03:15.052 --> 00:03:20.110
have to worry about somebody else
accidentally conflicting with your code?

59
00:03:20.110 --> 00:03:21.120
&gt;&gt; Aaron: Yeah.

60
00:03:21.120 --> 00:03:24.262
Yeah, you can do that.

61
00:03:24.262 --> 00:03:25.716
You could do that.

62
00:03:25.716 --> 00:03:26.830
Totes.

63
00:03:26.830 --> 00:03:30.582
With goats, anyone?

64
00:03:30.582 --> 00:03:31.553
Anyone else?
Okay, so

65
00:03:31.553 --> 00:03:36.060
I'm gonna let you guys try out let and,
yeah?

66
00:03:36.060 --> 00:03:37.800
&gt;&gt; Speaker 2: Blocks,
can you pass blocks around?

67
00:03:39.340 --> 00:03:43.550
&gt;&gt; Aaron: That would mean that
blocks are an object, and

68
00:03:43.550 --> 00:03:47.510
no, I mean Block is like code flow.

69
00:03:47.510 --> 00:03:49.860
It's not an object, yeah.

70
00:03:49.860 --> 00:03:50.710
It's not a function.

71
00:03:50.710 --> 00:03:54.850
A block is just a set of curly
braces that the scope off

72
00:03:54.850 --> 00:03:56.770
where you want traffic to go.

73
00:03:56.770 --> 00:03:58.535
That's all it is.

74
00:03:58.535 --> 00:04:04.889
So, so,
&gt;&gt; Aaron: If you guys wanna pull up,

75
00:04:04.889 --> 00:04:08.910
there were not Firefox installed, I asked
everybody to get Firefox installed.

76
00:04:08.910 --> 00:04:10.874
So I'm gonna go through
this real quick and

77
00:04:10.874 --> 00:04:12.847
I'm gonna have you guys try this step out.

78
00:04:12.847 --> 00:04:17.486
So if you go to the compatibility
tables and we go to LET and

79
00:04:17.486 --> 00:04:21.753
CONST, these are all supported in Firefox,
okay?

80
00:04:21.753 --> 00:04:25.630
They do have that weird temporal dead-zone
bug that I was telling you guys about.

81
00:04:25.630 --> 00:04:27.030
And then block functions.

82
00:04:27.030 --> 00:04:29.845
They're here too.

83
00:04:29.845 --> 00:04:32.070
Block-level functions.

84
00:04:32.070 --> 00:04:34.410
And these are supported in
the latest Firefox as well.

85
00:04:35.500 --> 00:04:36.430
So you should be good to go.

86
00:04:36.430 --> 00:04:37.700
So I'm going to pull up Firefox.

87
00:04:37.700 --> 00:04:43.059
I'm gonna start stuttering cuz,
I don't know exactly

88
00:04:43.059 --> 00:04:49.260
how you guys want me to say
this without being confusing.

89
00:04:49.260 --> 00:04:55.528
So, if I come over here and
say let A equal one, it won't work.

90
00:04:55.528 --> 00:05:02.962
So, CONST b= 10.

91
00:05:08.552 --> 00:05:09.533
&gt;&gt; Aaron: Const.

92
00:05:16.204 --> 00:05:17.410
&gt;&gt; Aaron: B sorry.

93
00:05:17.410 --> 00:05:18.210
Anyway.

94
00:05:18.210 --> 00:05:18.711
Yeah.
So

95
00:05:18.711 --> 00:05:20.439
you guys can kind of dork around with it.

96
00:05:20.439 --> 00:05:26.294
If you wanna to write like a,
&gt;&gt; Aaron: Like

97
00:05:26.294 --> 00:05:28.626
a function with a block
scope inside of it and

98
00:05:28.626 --> 00:05:32.270
then call it just to make sure
that the block scopes working.

99
00:05:32.270 --> 00:05:33.260
Go ahead and do that.

100
00:05:33.260 --> 00:05:36.021
I want you to try couple things out and
then we'll come back and,

101
00:05:36.021 --> 00:05:38.698
we probably move right on because
we were kind of over on time.

102
00:05:38.698 --> 00:05:42.099
I want you guys to try these out for
a few minutes or so let's take five and

103
00:05:42.099 --> 00:05:43.687
pull the Firefox your console and

104
00:05:43.687 --> 00:05:47.060
try some of these are just some
kind of keys to Unicode with them.

105
00:05:47.060 --> 00:05:51.200
So, along with Firefox or node or

106
00:05:51.200 --> 00:05:55.960
chrome, you can also try to run
some of your code in tracer or

107
00:05:55.960 --> 00:05:59.450
new if you come over to table and
you're like dude tracer's got it.

108
00:06:00.870 --> 00:06:01.890
That table we messed up.

109
00:06:03.020 --> 00:06:03.840
There we go, that's right.

110
00:06:04.920 --> 00:06:09.500
So if you're like cool tracer's
tracers got and you want to try.

111
00:06:09.500 --> 00:06:11.490
You don't have to open Firefox.

112
00:06:11.490 --> 00:06:15.280
You can come to the tracer
good job site and

113
00:06:15.280 --> 00:06:19.310
they actually have a live rebel
where you can use code in line.

114
00:06:19.310 --> 00:06:24.701
So, I'm actually showing you guys a class
but, if you wanted to be like let equal

115
00:06:24.701 --> 00:06:30.034
one and it's going ,and out down here
it's going to say unexpected token LET.

116
00:06:30.034 --> 00:06:34.436
So, I'm going to say, "dude turn on
experimental features" and it says,

117
00:06:34.436 --> 00:06:35.811
" yeah, no cool.

118
00:06:35.811 --> 00:06:39.982
I know what LET is and if you're like,
"okay, what about this?"

119
00:07:00.180 --> 00:07:01.247
&gt;&gt; Aaron: Right, so

120
00:07:01.247 --> 00:07:04.100
do you see what it did there?

121
00:07:05.810 --> 00:07:10.290
So, anyway it's like live
transpiling this into a thing that

122
00:07:12.190 --> 00:07:18.080
It's not the exact same, but
it will hopefully act to the same, right?

123
00:07:18.080 --> 00:07:21.380
And I know all you guys would want
to rite your code like that anyway.

124
00:07:21.380 --> 00:07:26.110
[LAUGH] But, yeah they let you do that.

125
00:07:26.110 --> 00:07:26.610
So.

126
00:07:28.230 --> 00:07:29.800
So yeah that's tracer though.

127
00:07:29.800 --> 00:07:33.750
And if you want to see what some
stuff is gonna the work like

128
00:07:33.750 --> 00:07:37.880
You can control it out
here in the live rebel.

129
00:07:37.880 --> 00:07:42.290
It's kind of nice tracers a command line
tool though you actually would install it

130
00:07:42.290 --> 00:07:47.440
locally and then you can add it to your
build process with like a grant tracer.

131
00:07:47.440 --> 00:07:52.100
I started grant tracer and
it's super simple to use but,

132
00:07:52.100 --> 00:07:56.670
if you want to just try to live online,
this is rebels probably

133
00:07:56.670 --> 00:08:00.270
the easiest things of in between
sessions when you're trying to stuff.

134
00:08:00.270 --> 00:08:03.020
Feel free to just come out of this
rubble and try to get in the way.

135
00:08:03.020 --> 00:08:05.700
So all right, let's move on to.

136
00:08:05.700 --> 00:08:09.091
Did anyone have any questions when
they were trying this stuff out or

137
00:08:09.091 --> 00:08:10.648
did they find anything wonky?

138
00:08:12.807 --> 00:08:15.540
&gt;&gt; Aaron: Okay.
Why I asked you to use Firefox, one time,

139
00:08:15.540 --> 00:08:20.330
I was talking about this in a
presentation, and someone got really mad,

140
00:08:20.330 --> 00:08:24.100
and sent feedback that I'd
favored Firefox over Chrome, and

141
00:08:24.100 --> 00:08:26.980
they were really upset
that I had done that.

142
00:08:26.980 --> 00:08:30.560
And I wasn't, I mean,
its wasn't trying to do that, it's just,

143
00:08:30.560 --> 00:08:31.900
Firefox has got the stuff.

144
00:08:31.900 --> 00:08:34.360
And,Chrome doesn't yet, so.

145
00:08:34.360 --> 00:08:35.970
I'm only asking to use it where it exists.

146
00:08:35.970 --> 00:08:39.440
I'm not trying to force used to Mozilla or
anything.

147
00:08:39.440 --> 00:08:40.810
Use whatever browser you want.

148
00:08:40.810 --> 00:08:42.490
I'm only asking you to
use it where it exists.

149
00:08:42.490 --> 00:08:44.900
So used dragster or use Firefox.

150
00:08:44.900 --> 00:08:48.170
If you see chrome like,
if it's a feature that's in Chrome good.

151
00:08:48.170 --> 00:08:48.860
Try that in chrome.

