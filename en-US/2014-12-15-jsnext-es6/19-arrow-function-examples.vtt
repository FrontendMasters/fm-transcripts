WEBVTT

1
00:00:00.000 --> 00:00:03.962
[MUSIC]

2
00:00:03.962 --> 00:00:06.602
&gt;&gt; Aaron Frost: In some places
where you could use them,

3
00:00:06.602 --> 00:00:10.440
like if you wanna make
a map out of something.

4
00:00:10.440 --> 00:00:12.380
Currently we do something like this.

5
00:00:14.987 --> 00:00:19.952
&gt;&gt; Aaron Frost: Where
&gt;&gt; Aaron Frost: Come on.

6
00:00:21.825 --> 00:00:22.325
&gt;&gt; Aaron Frost: Where

7
00:00:40.703 --> 00:00:41.695
&gt;&gt; Aaron Frost: Sorry,
we're doing map, right?

8
00:00:47.918 --> 00:00:49.530
&gt;&gt; Aaron Frost: So, currently,
this is what that would look like.

9
00:00:52.198 --> 00:00:55.020
&gt;&gt; Aaron Frost: Everything kinda
squares up and it returns it to you.

10
00:00:55.020 --> 00:01:01.970
So this is what that would look
like with an arrow function.

11
00:01:01.970 --> 00:01:04.370
It would be one line less code.

12
00:01:04.370 --> 00:01:12.260
If you ever have the need to make a map
of squared numbers, you could do that.

13
00:01:12.260 --> 00:01:13.830
But a lot of times when
we call a math function,

14
00:01:13.830 --> 00:01:15.880
we're just returning like some some ID.

15
00:01:15.880 --> 00:01:20.180
So instead of, you could pass
in an array of user objects and

16
00:01:20.180 --> 00:01:24.740
just say return user dot ID and
you'd have a map of user object.

17
00:01:24.740 --> 00:01:26.500
Anyway, just a thought.

18
00:01:27.640 --> 00:01:30.610
This is somewhere where you could use it.

19
00:01:30.610 --> 00:01:34.800
You could have a key_maker
where you pass it a value and

20
00:01:34.800 --> 00:01:37.720
it says the key is this value,
I don't know.

21
00:01:37.720 --> 00:01:42.229
And then you could make 100 keys or you
could make a key with the value of 100.

22
00:01:45.240 --> 00:01:49.280
Let's talk about the real benefits
of these arrow functions and

23
00:01:49.280 --> 00:01:53.250
I say benefits and it will also be the,
kind of the source of some confusion.

24
00:01:53.250 --> 00:01:56.460
So let's talk about it.

25
00:01:57.720 --> 00:02:03.156
The way that this, one to ten,
who really understands this in JavaScript?

26
00:02:03.156 --> 00:02:07.290
Who's like a three?

27
00:02:07.290 --> 00:02:09.492
Who's like a six or a five to six?

28
00:02:09.492 --> 00:02:11.153
Who's like a seven or eight?

29
00:02:11.153 --> 00:02:13.897
Who's like a seven or eight?

30
00:02:13.897 --> 00:02:16.887
Who's like a nine or a ten?

31
00:02:16.887 --> 00:02:18.090
I'm gonna raise my hand.

32
00:02:18.090 --> 00:02:19.450
I think I get it, but I don't know.

33
00:02:19.450 --> 00:02:20.830
Maybe I'm a seven.

34
00:02:20.830 --> 00:02:24.830
Okay, if I was in an interview I'm a ten,
but like if I'm in front of my peers,

35
00:02:24.830 --> 00:02:26.565
it's probably like an eight or nine.

36
00:02:26.565 --> 00:02:28.263
Anyway, okay.

37
00:02:28.263 --> 00:02:31.580
Okay, I want you look at this function.

38
00:02:31.580 --> 00:02:33.150
Let's talk about what it's doing, okay?

39
00:02:34.990 --> 00:02:36.248
So we have a widget object.

40
00:02:36.248 --> 00:02:37.373
True?

41
00:02:37.373 --> 00:02:41.558
Everyone agree?

42
00:02:41.558 --> 00:02:43.594
Okay, and we're gonna call it widget.init.

43
00:02:43.594 --> 00:02:44.872
Right?

44
00:02:44.872 --> 00:02:48.460
And widget.init is gonna say cool.

45
00:02:49.460 --> 00:02:51.390
Under the document let's
add a click listener.

46
00:02:52.860 --> 00:02:57.770
And
&gt;&gt; Aaron Frost: We're gonna say,

47
00:02:57.770 --> 00:03:01.740
I want you to call this .doSomething and
pass it to the event type.

48
00:03:01.740 --> 00:03:03.290
Cuz the clicking handler has an event,
right.

49
00:03:04.860 --> 00:03:07.680
So does anyone know why this,
why that line is gonna error?

50
00:03:08.700 --> 00:03:12.233
&gt;&gt; Speaker 2: Because doSomething is
scope to the anonymous function or

51
00:03:12.233 --> 00:03:14.986
the this is scope to
the anonymous function.

52
00:03:14.986 --> 00:03:18.575
So the do something is scope to the-
&gt;&gt; Aaron Frost: In the context that this

53
00:03:18.575 --> 00:03:19.806
exists, what is this?

54
00:03:19.806 --> 00:03:20.660
&gt;&gt; Speaker 3: It's a document.

55
00:03:23.268 --> 00:03:24.515
&gt;&gt; Aaron Frost: Is it the document?

56
00:03:24.515 --> 00:03:25.400
&gt;&gt; Speaker 4: It's the anonymous function.

57
00:03:30.345 --> 00:03:33.373
&gt;&gt; Aaron Frost: So,
are you sure it's not like the dom moment?

58
00:03:33.373 --> 00:03:35.253
Might be the dom moment.

59
00:03:35.253 --> 00:03:35.937
&gt;&gt; Speaker 5: No, cuz it's live.

60
00:03:35.937 --> 00:03:39.037
&gt;&gt; Aaron Frost: None of us really know?
[CROSSTALK] We just all went down a level?

61
00:03:39.037 --> 00:03:43.987
It's it's not the widget though,
is what I'm trying to say.

62
00:03:43.987 --> 00:03:47.570
So and when you say this.doSomething.

63
00:03:48.760 --> 00:03:51.940
You think you're saying
widget.doSomething.

64
00:03:53.770 --> 00:03:56.250
You're not saying that,
that's not what you're saying.

65
00:03:56.250 --> 00:04:01.190
You're actually saying window.doSomething,
okay.

66
00:04:01.190 --> 00:04:03.660
And window doesn't have
a doSomething method.

67
00:04:03.660 --> 00:04:05.690
So what's going to
happen when you try and,

68
00:04:05.690 --> 00:04:11.600
it's going to say window.doSomething is
undefined and I want to invoke undefined.

69
00:04:11.600 --> 00:04:14.860
Once again, what's gonna happen
when we try to invoke undefined?

70
00:04:14.860 --> 00:04:16.130
Undefined is not a function, right?

71
00:04:19.180 --> 00:04:23.130
Okay, that's exactly what's gonna happen.

72
00:04:23.130 --> 00:04:27.530
So there's two ways,
normally people correct this,

73
00:04:27.530 --> 00:04:30.250
do you guys,
does anyone wanna shout them off for me?

74
00:04:30.250 --> 00:04:31.400
&gt;&gt; Speaker 6: self is this.

75
00:04:32.520 --> 00:04:33.680
&gt;&gt; Aaron Frost: So who said bind?

76
00:04:34.810 --> 00:04:37.150
Bind.
An then the other way is?

77
00:04:37.150 --> 00:04:38.160
&gt;&gt; Speaker 7: Var self is this.

78
00:04:38.160 --> 00:04:40.710
&gt;&gt; Aaron Frost: Yeah.
Var something equals this.

79
00:04:40.710 --> 00:04:43.640
And then instead of, here I'll pull it up.

80
00:04:43.640 --> 00:04:48.468
So here's the two ways you can do it.

81
00:04:48.468 --> 00:04:54.200
Your function handler for your event,
you can say go ahead and bind it

82
00:04:54.200 --> 00:04:59.920
to this and when this line of code is
running this is actually the widget, okay?

83
00:05:01.330 --> 00:05:06.030
So you combined that function to this or

84
00:05:06.030 --> 00:05:11.840
you can say var me or var self or
var underscore this equals this.

85
00:05:11.840 --> 00:05:18.511
And then instead of calling
this.doSomething, you call me.doSomething.

86
00:05:18.511 --> 00:05:19.430
Or whatever you use, right?

87
00:05:19.430 --> 00:05:20.450
Who uses Self?

88
00:05:22.320 --> 00:05:23.480
No one?
Who uses Bind?

89
00:05:24.820 --> 00:05:27.442
Yeah.
I use me.

90
00:05:27.442 --> 00:05:33.930
So, anyway,
this is how you fix it today, right?

91
00:05:33.930 --> 00:05:40.980
And when I used to write,
I used to write in Sencha, is that okay?

92
00:05:40.980 --> 00:05:46.560
Anyway, I did and it was cool,
but I had to do this a lot.

93
00:05:46.560 --> 00:05:49.820
It was a lot that we had
to do this kind of stuff.

94
00:05:51.080 --> 00:05:53.930
And so fat arrow or arrow functions,

95
00:05:53.930 --> 00:05:58.180
sorry I keep calling them fat arrow and
I don't mean to.

96
00:05:58.180 --> 00:06:00.820
Anyway, arrow functions
aims to solve this problem

97
00:06:00.820 --> 00:06:03.170
that we're dealing with right there.

98
00:06:03.170 --> 00:06:05.070
This is what arrow functions is for okay.

99
00:06:10.773 --> 00:06:14.887
&gt;&gt; Aaron Frost: Okay, so,
this is how you would rewrite

100
00:06:14.887 --> 00:06:19.857
the exact same function
with an arrow function.

101
00:06:25.170 --> 00:06:29.054
&gt;&gt; Aaron Frost: So it's basically
the same syntax but instead over here,

102
00:06:29.054 --> 00:06:32.310
you just have one of those
anonymous functions.

103
00:06:32.310 --> 00:06:36.860
And I've wrapped it with braces,
so it's not gonna return.

104
00:06:36.860 --> 00:06:39.660
It's just gonna call this.doSomething, but

105
00:06:39.660 --> 00:06:43.310
in this context when you
use an arrow function,

106
00:06:43.310 --> 00:06:48.380
at the time that this line of code was
evaluated, this was widget, right?

107
00:06:48.380 --> 00:06:53.010
So it's actually gonna go ahead and
bind this event call to this.

108
00:06:53.010 --> 00:06:55.220
So instead of our frameworks
like our backbones and

109
00:06:55.220 --> 00:06:58.490
stuff, people are gonna start using
this syntax because it is nice.

110
00:06:59.580 --> 00:07:02.940
It's nice to not have to worry about
that stuff or to have to go through and

111
00:07:02.940 --> 00:07:06.402
bind all your own functions or
alias this onto something else.

112
00:07:06.402 --> 00:07:11.510
&gt;&gt; Speaker 8: So
in coffee script you end up

113
00:07:12.520 --> 00:07:16.500
actually almost always using fat
arrow rather than the normal arrow?

114
00:07:16.500 --> 00:07:18.440
Do you think that we'll be
sending JavaScript as well?

115
00:07:18.440 --> 00:07:21.000
&gt;&gt; Aaron Frost: I'm gonna show
an example why you won't.

116
00:07:21.000 --> 00:07:25.920
Cuz in this example, think about it.

117
00:07:27.220 --> 00:07:32.400
When this widget is being created, and
can I answer that on another slide?

118
00:07:32.400 --> 00:07:34.130
Okay, good.
I don't want to ruin my slide.

119
00:07:34.130 --> 00:07:35.960
I don't want to ruin my own wave, dude.

120
00:07:39.620 --> 00:07:41.750
Does anyone have any comments or
question about that?

121
00:07:41.750 --> 00:07:44.660
That makes pretty good sense,
what's going on here, right?

122
00:07:44.660 --> 00:07:49.280
When that line of code gets
added as an event listener,

123
00:07:49.280 --> 00:07:53.020
this is the widget and so
it knows exactly what to do.

124
00:07:53.020 --> 00:07:59.835
So in that way the code, it will at
least run like we think it's gonna run.

125
00:07:59.835 --> 00:08:07.155
Whereas with, sorry,
with a regular anonymous function,

126
00:08:07.155 --> 00:08:13.040
it doesn't run like we
think it's gonna run.

127
00:08:13.040 --> 00:08:17.980
Okay, so I want to talk a little
bit more about these functions.

128
00:08:17.980 --> 00:08:24.680
So the type of arrow function is function,
okay?

129
00:08:24.680 --> 00:08:26.630
So, actually,
Rick Waldron corrected me on this,

130
00:08:26.630 --> 00:08:32.300
it does have a prototype and
it is function.

131
00:08:32.300 --> 00:08:33.920
But there's something about
function it doesn't have.

132
00:08:33.920 --> 00:08:35.170
Sorry I can't remember.

133
00:08:35.170 --> 00:08:38.751
He corrected me on this and
I didn't put it in to the slide.

134
00:08:40.320 --> 00:08:42.160
Kind of nullifying itself.

135
00:08:42.160 --> 00:08:44.150
Now that I think about it.

136
00:08:44.150 --> 00:08:47.930
Anyway, so if you call
getPrototypeOf an arrow function,

137
00:08:47.930 --> 00:08:50.810
it's gonna return the function prototype.

138
00:08:56.597 --> 00:08:58.050
&gt;&gt; Aaron Frost: So
here's a big difference, though.

139
00:08:58.050 --> 00:09:03.480
So if I have a function Foo,
And a function

140
00:09:03.480 --> 00:09:07.770
bar and the one is a regular function and
the other one is an arrow function.

141
00:09:09.110 --> 00:09:12.515
I can use the regular function
as a class constructor.

142
00:09:12.515 --> 00:09:19.430
I can say new Foo, and if I try and
do new Bar, it's not going to work.

143
00:09:19.430 --> 00:09:24.560
You can't make, you can't make
classes out of arrow functions.

144
00:09:25.650 --> 00:09:27.930
&gt;&gt; Speaker 9: Because of the binding-
&gt;&gt; Aaron Frost: Is basically what it is.

145
00:09:27.930 --> 00:09:30.630
Yeah, because of how it's gonna bind this.

146
00:09:30.630 --> 00:09:33.590
If it bound this on an arrow function,
what would this always be,

147
00:09:33.590 --> 00:09:34.160
100% of the time?

148
00:09:34.160 --> 00:09:35.860
The window.

149
00:09:35.860 --> 00:09:37.190
So it would be tough.

150
00:09:37.190 --> 00:09:40.120
So you can't, I mean,
it wouldn't really be usable.

151
00:09:40.120 --> 00:09:42.955
I guess they could make an exception
in the case of the word new.

152
00:09:42.955 --> 00:09:45.602
But, I don't know.

153
00:09:45.602 --> 00:09:48.694
So the rule is,
you can't use it as a constructor.

154
00:09:48.694 --> 00:09:49.974
We're cool?

155
00:09:49.974 --> 00:09:57.142
So, someone, you asked about this earlier.

156
00:09:57.142 --> 00:10:01.310
You were like, hey man, why don't I just.

157
00:10:05.315 --> 00:10:07.504
&gt;&gt; Aaron Frost: Hold on.

158
00:10:16.399 --> 00:10:17.618
&gt;&gt; Aaron Frost: I can't remember
what I was trying to teach you

159
00:10:17.618 --> 00:10:18.217
guys with this slide.

160
00:10:21.672 --> 00:10:25.945
&gt;&gt; Aaron Frost: Yeah, yeah got it.

161
00:10:25.945 --> 00:10:28.324
Good I got it.

162
00:10:28.324 --> 00:10:32.920
I got it.

163
00:10:32.920 --> 00:10:40.210
Okay, so I have a widget here right.

164
00:10:40.210 --> 00:10:42.474
It's got an ID of 123.

165
00:10:42.474 --> 00:10:45.070
And it's got a log method.

166
00:10:45.070 --> 00:10:45.601
Okay?

167
00:10:45.601 --> 00:10:51.570
And my call log,
it's just gonna say is it a log this.id.

168
00:10:51.570 --> 00:10:54.317
Simple, everyone understand
what's going here?

169
00:10:54.317 --> 00:11:00.759
So if I say new widget, new Widget.log
is gonna just log Widget.log in 123.

170
00:11:00.759 --> 00:11:02.427
Simple, does anyone not get that?

171
00:11:02.427 --> 00:11:04.350
We should all get that.

172
00:11:04.350 --> 00:11:04.880
Okay, we got it.

173
00:11:06.160 --> 00:11:09.490
All right, so
now I'm gonna say newWidget.log.call.

174
00:11:09.490 --> 00:11:12.446
And I'm gonna pass a different this.

175
00:11:12.446 --> 00:11:16.890
When you do on the method,
when you do a .call,

176
00:11:16.890 --> 00:11:20.680
the very first parameter is a new this.

177
00:11:20.680 --> 00:11:24.200
You're basically reassigning the this.

178
00:11:24.200 --> 00:11:28.170
So I'm trying to say,
instead of treating the widget as this,

179
00:11:28.170 --> 00:11:31.390
treat this pseudo-widget as this.

180
00:11:31.390 --> 00:11:32.530
So it should call log.

181
00:11:32.530 --> 00:11:37.150
And instead of, and
I'm trying to make it call, instead of,

182
00:11:37.150 --> 00:11:41.970
I'm trying to make it use this ID
instead of the ID up here, okay.

183
00:11:41.970 --> 00:11:43.660
But it's not going to, okay.

184
00:11:50.321 --> 00:11:52.100
&gt;&gt; Aaron Frost: Yeah,
it's not going to log in.

185
00:11:52.100 --> 00:11:56.445
Because because the ID was bound
lexically even if I try and

186
00:11:56.445 --> 00:11:58.610
over-ride it it still
going to use this ID.

187
00:11:58.610 --> 00:12:01.270
It's not going to use the ID I'm
trying to cram down its throat.

188
00:12:04.380 --> 00:12:05.540
We get it, we're seeing eye to eye?

189
00:12:07.720 --> 00:12:08.583
Proceed?

190
00:12:08.583 --> 00:12:13.237
&gt;&gt; Speaker 10: The chat was asking
about the call applied bind, but

191
00:12:13.237 --> 00:12:16.744
you'vealready touched on call here.

192
00:12:16.744 --> 00:12:17.543
&gt;&gt; Aaron Frost: Yes.

193
00:12:17.543 --> 00:12:19.253
&gt;&gt; Speaker 10: The same,
generally applies?

194
00:12:19.253 --> 00:12:20.011
&gt;&gt; Aaron Frost: Yes.

195
00:12:20.011 --> 00:12:22.130
Yeah.
So, even if you try and

196
00:12:22.130 --> 00:12:24.650
override it you're not going to get it.

197
00:12:24.650 --> 00:12:25.250
So, it's bound.

