WEBVTT

1
00:00:00.000 --> 00:00:03.895
[MUSIC]

2
00:00:03.895 --> 00:00:05.790
&gt;&gt; Aaron Frost: Okay, maps.

3
00:00:05.790 --> 00:00:08.450
Okay, so
JSON I just make a map like this, right.

4
00:00:08.450 --> 00:00:11.370
The very first thing,
I say name is Aaron, right.

5
00:00:13.170 --> 00:00:18.590
Well in a map, I make a map and
I say map.set name Aaron.

6
00:00:18.590 --> 00:00:22.380
And I can say map.getaaron or name and
it will give me Aaron back, okay.

7
00:00:22.380 --> 00:00:24.240
So that's how you make a map.

8
00:00:24.240 --> 00:00:27.280
So you get map.set and map.get.

9
00:00:27.280 --> 00:00:29.720
Again there's no type casting on them.

10
00:00:29.720 --> 00:00:34.400
So if I say map.set one and
I set it to true, if I say has one,

11
00:00:34.400 --> 00:00:36.196
it's gonna be false.

12
00:00:36.196 --> 00:00:40.850
But if I then set one,
it will has one at that point too.

13
00:00:40.850 --> 00:00:43.778
So, that makes sense, no type casting?

14
00:00:43.778 --> 00:00:49.270
Cuz on an object, on a JSON object,
it's gonna type cast, right.

15
00:00:49.270 --> 00:00:54.880
So if you say object sub one it's
gonna cast that to a string and

16
00:00:54.880 --> 00:00:58.230
make a property on the object
that's called one, right.

17
00:00:58.230 --> 00:01:00.830
So this is not gonna do that.

18
00:01:00.830 --> 00:01:04.630
So this is like a JSON object but
these two things would both be treated as

19
00:01:04.630 --> 00:01:09.050
separate keys as opposed to the same key.

20
00:01:11.840 --> 00:01:14.135
So, the old way,

21
00:01:14.135 --> 00:01:21.132
if I take a user,
&gt;&gt; Aaron Frost: So let's say I create this

22
00:01:21.132 --> 00:01:24.970
user, and maybe I got this user from the
server, maybe I got out at local storage.

23
00:01:24.970 --> 00:01:26.250
I don't know where I
got this server object,

24
00:01:26.250 --> 00:01:27.860
I got it from something though, okay?

25
00:01:27.860 --> 00:01:32.317
Something gave me this user object and
I'm gonna make a new map for

26
00:01:32.317 --> 00:01:33.867
user hobbies, okay?

27
00:01:33.867 --> 00:01:40.049
And I can actually use
an object as the key, okay.

28
00:01:40.049 --> 00:01:44.343
So for hobbies, I can put in there,
and the key can be the user.

29
00:01:44.343 --> 00:01:50.203
So instead of having to go through and
reference it based on ID and

30
00:01:50.203 --> 00:01:55.193
use primitives only as the keys,
you can use objects,

31
00:01:55.193 --> 00:01:59.440
functions, primitives distill as well.

32
00:01:59.440 --> 00:02:06.120
But you can use complex objects as
the keys as opposed to just primitives.

33
00:02:06.120 --> 00:02:11.406
So here I have a hobby map and I get my
hobbies out by just passing it the user.

34
00:02:11.406 --> 00:02:15.185
So I would say userHobbyMap.get and
I'd pass up my user and

35
00:02:15.185 --> 00:02:17.620
give me back my hobbies.

36
00:02:17.620 --> 00:02:21.547
That's one thing you can do.

37
00:02:21.547 --> 00:02:29.884
So, it can't be a second copy of
an object that looks identical cuz here,

38
00:02:29.884 --> 00:02:35.535
I've got two users that look a lot alike,
right.

39
00:02:35.535 --> 00:02:38.392
And by a lot alike, I mean they have
all the same values but in memory,

40
00:02:38.392 --> 00:02:40.180
they're two different objects, right.

41
00:02:41.330 --> 00:02:46.630
So if I make this HobbyMap when I
set user1 and I set his hobbies,

42
00:02:46.630 --> 00:02:49.300
if I'm trying get user2
it's gonna be undefined.

43
00:02:49.300 --> 00:02:53.990
So even though they look alike,
it is completely separate key because

44
00:02:53.990 --> 00:02:58.410
it's using the pointer
instead of the object itself.

45
00:02:58.410 --> 00:02:59.470
Does that makes sense?

46
00:02:59.470 --> 00:03:04.301
Okay, so yeah.

47
00:03:04.301 --> 00:03:08.170
And then usage, some people were like hey,

48
00:03:08.170 --> 00:03:11.934
I'd like to make a map
of my DOM elements and

49
00:03:11.934 --> 00:03:16.760
put them into a map so
that I don't keep querying them.

50
00:03:16.760 --> 00:03:20.940
And I could get their properties
just by referencing them themselves.

51
00:03:20.940 --> 00:03:25.939
So you could go get some element off
the DOM and you could set element and

52
00:03:25.939 --> 00:03:29.941
you could say loaded is true,
opacity is zero, right.

53
00:03:29.941 --> 00:03:33.449
And then later on in some
other section of your code,

54
00:03:33.449 --> 00:03:36.860
you could get the element back out, right?

55
00:03:36.860 --> 00:03:39.350
So why is this a bad idea,
does anyone know?

56
00:03:41.630 --> 00:03:43.524
Can anyone think of it?
&gt;&gt; Off Camera 1: The DOM might

57
00:03:43.524 --> 00:03:45.276
change.
&gt;&gt; Aaron Frost: The DOM might

58
00:03:45.276 --> 00:03:46.660
change, right?

59
00:03:46.660 --> 00:03:52.435
Yeah, so if something happens and
the DOM changes, anything that's not

60
00:03:52.435 --> 00:03:58.700
in my map memory, the garbage collection's
gonna go, I'm gonna kill that he's gone.

61
00:03:58.700 --> 00:04:01.401
Just because you're removed it from
the DOM doesn't mean it's not in

62
00:04:01.401 --> 00:04:03.680
your JavaScript memory, right.

63
00:04:03.680 --> 00:04:07.363
So if you've thrown all these
references to DOMs inside your map.

64
00:04:07.363 --> 00:04:11.504
Now all of a sudden we got a problem
because you got a huge memory leak.

65
00:04:11.504 --> 00:04:16.011
Because anytime the DOM changes, you're
still flooding out memory because you're

66
00:04:16.011 --> 00:04:19.890
packing them into your map,
and this is a problem, right?

67
00:04:19.890 --> 00:04:23.580
Okay, I'm gonna talk
about why this is bad.

68
00:04:23.580 --> 00:04:25.760
I'm gonna show why this
is bad in a second.

69
00:04:25.760 --> 00:04:29.564
The one last thing I didn't show about
a map, and let's just show it real quick.

70
00:04:59.529 --> 00:05:00.437
&gt;&gt; Aaron Frost: There is a question in

71
00:05:00.437 --> 00:05:03.423
chat, I don't know if you wanna do
it after you're done with this or?

72
00:05:10.409 --> 00:05:12.160
&gt;&gt; Aaron Frost: Yeah, one second.

73
00:05:12.160 --> 00:05:15.821
So, you can get a map
iterator out of it and

74
00:05:15.821 --> 00:05:20.744
you can iterate over all
the properties inside the map.

75
00:05:20.744 --> 00:05:21.953
There's not a size is there?

76
00:05:21.953 --> 00:05:23.990
Yeah, yeah, there's a size.

77
00:05:25.050 --> 00:05:28.270
So you can pull the size
off of a map as well,

78
00:05:28.270 --> 00:05:32.000
just to see how many things in my map,
how many key value pairs.

79
00:05:32.000 --> 00:05:37.513
So yeah, what's the question?
&gt;&gt; Off Camera 2: Do

80
00:05:37.513 --> 00:05:39.510
you see the chat there?
&gt;&gt; Aaron Frost: Yeah, so it says,

81
00:05:39.510 --> 00:05:42.420
can you provide a custom-
&gt;&gt; Off Camera 2: There's one right before

82
00:05:42.420 --> 00:05:44.376
that, then maybe you
can ask that one next.

83
00:05:50.167 --> 00:05:51.390
&gt;&gt; Aaron Frost: The ones by James G?

84
00:05:51.390 --> 00:05:52.066
&gt;&gt; Off Camera 2: No,

85
00:05:52.066 --> 00:05:56.440
the one above it Mike.
&gt;&gt; Aaron Frost: As I understand,

86
00:05:56.440 --> 00:06:00.880
let is occupying only
one position in memory.

87
00:06:00.880 --> 00:06:04.700
So we can't use it with map set

88
00:06:06.090 --> 00:06:10.459
because they always have more
than one values, is that right?

89
00:06:11.690 --> 00:06:15.840
Yeah, I'm with James G, I'm not sure
that I understand the question.

90
00:06:15.840 --> 00:06:18.080
So I'm gonna go to the next question.

91
00:06:18.080 --> 00:06:21.860
Can you write a custom hash function for
sets and maps?

92
00:06:23.020 --> 00:06:25.190
Robby, I don't know what
a custom hash function is.

93
00:06:25.190 --> 00:06:27.100
&gt;&gt; Off Camera 2: I think he means like to

94
00:06:27.100 --> 00:06:28.712
tell what a key is.

95
00:06:28.712 --> 00:06:34.935
In Java or whatever other languages,
sometimes you can control a get

96
00:06:34.935 --> 00:06:40.098
hash such that it's not just
based on the object itself.

97
00:06:40.098 --> 00:06:44.009
It could be unique by its name plus value

98
00:06:44.009 --> 00:06:48.150
boundary.
&gt;&gt; Aaron Frost: Not really,

99
00:06:48.150 --> 00:06:52.560
not built in to the framework,
you would just make that the key, right.

100
00:06:52.560 --> 00:06:55.360
So yeah, sorry dude, I don't think so.

101
00:06:56.970 --> 00:06:59.610
So yeah, so
last thing I need to show is the size.

102
00:06:59.610 --> 00:07:02.910
And that really matters because we're
about to show a different kind of map.

103
00:07:02.910 --> 00:07:05.900
I talked to you about the memory leak
that you're gonna get if you try and

104
00:07:05.900 --> 00:07:08.014
put these DOM objects into a map.

105
00:07:08.014 --> 00:07:11.880
It's gonna be efficient because you're
like dude, this is actually really fast.

106
00:07:11.880 --> 00:07:15.400
But once at first, but
then all of a sudden,

107
00:07:15.400 --> 00:07:19.760
it's gonna get really slow because
you're throwing DOM elements into a map.

108
00:07:19.760 --> 00:07:22.810
The DOM releases its reference but
your code never released its reference.

109
00:07:22.810 --> 00:07:26.910
So garbage collection can't pick up,
your map just grows and explodes.

110
00:07:26.910 --> 00:07:29.702
So a weak map is a different thing,

111
00:07:29.702 --> 00:07:34.568
okay, altogether.

112
00:07:34.568 --> 00:07:39.805
So, a weak map is like a map except for
it doesn't have that,

113
00:07:39.805 --> 00:07:45.260
it potentially can avoid
that memory leak problem.

114
00:07:45.260 --> 00:07:47.210
So if we have a weak map and

115
00:07:47.210 --> 00:07:51.590
we set name equals Aaron,
we can get name, and Aaron comes out.

116
00:07:51.590 --> 00:07:56.170
So, a lot like a map, right, has a user.

117
00:07:56.170 --> 00:07:59.850
So, if we say has user, we'll say false.

118
00:07:59.850 --> 00:08:02.660
We can set the has(user) true.

119
00:08:02.660 --> 00:08:05.810
We can delete me,
you won t have many more anyway.

120
00:08:05.810 --> 00:08:09.262
So it's just exactly like the map, okay,
that's all I'm trying to show here.

121
00:08:09.262 --> 00:08:12.940
But it's not exactly.

122
00:08:12.940 --> 00:08:18.119
When I said exactly, I meant not exactly,
it's just a lot like a map.

123
00:08:18.119 --> 00:08:23.567
So inside a map if you go ahead and set,

124
00:08:23.567 --> 00:08:31.440
let's say we put the same user
set of a map in a WeakMap.

125
00:08:31.440 --> 00:08:33.570
The map has a size,
the WeakMap doesn't have a size.

126
00:08:35.090 --> 00:08:41.830
And it's important,
because what that means is

127
00:08:44.650 --> 00:08:47.600
it's not actually keeping track of how
many things are inside of it, okay.

128
00:08:47.600 --> 00:08:51.530
It's kind of hard to explain but

129
00:08:51.530 --> 00:08:57.230
If you put a key, let's say my user key,
or let's say I get some DOM element and

130
00:08:57.230 --> 00:09:02.110
I store that inside my map as the key and
the value can be foo, I don't care, right.

131
00:09:03.370 --> 00:09:06.450
If my map is,
let's say the DOM goes in and removes it.

132
00:09:06.450 --> 00:09:11.220
And so the only thing on the whole planet
referring to that DOM anymore is my map,

133
00:09:11.220 --> 00:09:12.290
my WeakMap anyway.

134
00:09:13.600 --> 00:09:16.880
If a WeakMap sees that it's the only
thing holding onto an object,

135
00:09:16.880 --> 00:09:18.578
it will release it, okay.

136
00:09:18.578 --> 00:09:22.025
So you can go ahead and you could
set the key to be some DOM element.

137
00:09:22.025 --> 00:09:27.791
And then once it's gone, your WeakMap's
the only thing holding a copy or

138
00:09:27.791 --> 00:09:30.145
reference that DOM element.

139
00:09:30.145 --> 00:09:32.580
The WeakMap will let it go, okay?

140
00:09:32.580 --> 00:09:35.650
And because that only has
a weak reference to it,

141
00:09:35.650 --> 00:09:37.720
that's why it doesn't know like
how many things are in it.

142
00:09:37.720 --> 00:09:39.310
It doesn't know its size or anything.

143
00:09:39.310 --> 00:09:43.370
That make sense?
&gt;&gt; Aaron Frost: But it's okay because if

144
00:09:43.370 --> 00:09:47.013
the DOM element was gone and
you were the only thing pointing to it,

145
00:09:47.013 --> 00:09:50.130
then there's no way you
could unlock it anyway.

146
00:09:50.130 --> 00:09:53.694
So it should get rid of it,
cuz there's no other pointers to it.

147
00:09:53.694 --> 00:09:57.554
You would never have the cipher to get
it back out because the DOM element was

148
00:09:57.554 --> 00:10:00.381
the cipher, right,
that's how you could get it out.

149
00:10:00.381 --> 00:10:05.078
[INAUDIBLE] hopefully, I didn't weed.
&gt;&gt; Off Camera 3: [INAUDIBLE] believe if

150
00:10:05.078 --> 00:10:09.354
you have multiple WeakMaps pointing
to the same [CROSSTALK] key,

151
00:10:09.354 --> 00:10:12.439
then they'll still let it go, or not.
&gt;&gt; Aaron Frost: I don't know,

152
00:10:12.439 --> 00:10:14.000
that's a good question.

153
00:10:14.000 --> 00:10:16.700
Great question, actually, yeah.
&gt;&gt; Off Camera 3: I think

154
00:10:16.700 --> 00:10:19.750
maybe the one that you didn't understand,
they were just

155
00:10:19.750 --> 00:10:23.180
wondering why you have to use bar instead
of let when you're assigning map me,

156
00:10:23.180 --> 00:10:25.580
version, and set.
&gt;&gt; Aaron Frost: No,

157
00:10:25.580 --> 00:10:26.910
you don't have to.
&gt;&gt; Off Camera 3: So

158
00:10:26.910 --> 00:10:28.500
you can use LET?
&gt;&gt; Aaron Frost: Yeah.

159
00:10:28.500 --> 00:10:29.310
&gt;&gt; Off Camera 3: Okay, I think that's

160
00:10:29.310 --> 00:10:31.885
[CROSSTALK]
&gt;&gt; Aaron Frost: I'm just doing it to be

161
00:10:31.885 --> 00:10:38.000
friendly, I don't want to freak
anyone out with the let word.

162
00:10:38.000 --> 00:10:40.730
I don't know dude,
I wasn't paying that much attention.

163
00:10:40.730 --> 00:10:42.520
It wasn't intentional let's just say that.

164
00:10:43.620 --> 00:10:44.305
Good question though.

165
00:10:44.305 --> 00:10:47.845
Okay, a weakmap holds only
a weak reference to a key.

166
00:10:47.845 --> 00:10:52.012
Which means the reference inside
the weakmap doesn't prevent

167
00:10:52.012 --> 00:10:54.927
garbage collection of that object, okay.

168
00:10:54.927 --> 00:10:58.214
And Nic Zakas wrote an article about
it and that was, he summed it up and

169
00:10:58.214 --> 00:11:00.350
I thought that was
an elegant way to state it.

170
00:11:00.350 --> 00:11:05.790
So if the only pointer is my map,
the map gives up and says take it, okay.

171
00:11:07.150 --> 00:11:10.040
So if that element right there,
if that's the only pointer

172
00:11:10.040 --> 00:11:13.980
to that element is right there
where I've set it in my WeakMap.

173
00:11:15.310 --> 00:11:16.940
It just lets it go, okay?

