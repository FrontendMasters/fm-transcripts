WEBVTT

1
00:00:00.000 --> 00:00:03.759
[MUSIC]

2
00:00:03.759 --> 00:00:05.791
&gt;&gt; Aaron Frost: Modules,
it's hard to discuss.

3
00:00:05.791 --> 00:00:07.901
Because there's not any great support for
it right now.

4
00:00:07.901 --> 00:00:11.730
It's changing even a lot, recently.

5
00:00:11.730 --> 00:00:15.400
So no one's really had a lot of time
to get in there and implement it.

6
00:00:15.400 --> 00:00:19.020
So a lot of the decisions are made,
and people keep saying, no.

7
00:00:19.020 --> 00:00:22.310
And by people,
I mean the people who understand it.

8
00:00:22.310 --> 00:00:23.690
They're talking about how
great it's going to be.

9
00:00:23.690 --> 00:00:26.740
It's hard to really show off, though.

10
00:00:26.740 --> 00:00:27.851
Like in code.

11
00:00:27.851 --> 00:00:29.336
Because I can't really have you guys,

12
00:00:29.336 --> 00:00:31.810
like, there's no way to
mess around with it.

13
00:00:31.810 --> 00:00:35.340
So it's really only available
via polyfills right now.

14
00:00:35.340 --> 00:00:36.580
It's still super fresh.

15
00:00:37.620 --> 00:00:38.960
Let me show you guys this.

16
00:00:41.450 --> 00:00:45.600
So these are their notes from June, right?

17
00:00:45.600 --> 00:00:50.790
They just barely met in June and
made some fairly major discussions to it.

18
00:00:50.790 --> 00:00:52.930
These are their module
breakout session notes.

19
00:00:52.930 --> 00:00:58.250
They made some changes,
significant ones even, in June.

20
00:00:58.250 --> 00:01:02.810
So, when I say it's still fresh, I mean,
it's still one of the ones they're

21
00:01:02.810 --> 00:01:06.278
still talking about and
trying to make sure they get right.

22
00:01:06.278 --> 00:01:10.533
And it does have the least amount tooling
of all the other things that we've talked

23
00:01:10.533 --> 00:01:11.220
about, so.

24
00:01:12.760 --> 00:01:16.560
Who here is familiar with
modules like CommonJS and AMD?

25
00:01:16.560 --> 00:01:17.840
We kind of get them?

26
00:01:17.840 --> 00:01:18.500
Yeah?

27
00:01:18.500 --> 00:01:20.028
Okay.
So a lot of us kind of get them.

28
00:01:20.028 --> 00:01:21.340
They've got bits from both.

29
00:01:21.340 --> 00:01:22.860
Both have their merits.

30
00:01:22.860 --> 00:01:27.780
When Dave Herman and company set down to
spec out what modules would look like,

31
00:01:27.780 --> 00:01:29.660
they came up with some goals.

32
00:01:29.660 --> 00:01:33.110
And they wanted to make
it similar to both.

33
00:01:33.110 --> 00:01:38.949
So it's similar to CommonJS in
that it favors a single export.

34
00:01:40.010 --> 00:01:42.590
In CommonJS, you can export more than one.

35
00:01:42.590 --> 00:01:46.250
But it really kind of lends itself
well to that single export.

36
00:01:46.250 --> 00:01:49.400
And it also supports cyclic dependencies.

37
00:01:49.400 --> 00:01:53.370
So, if A depends on B, and if you try and

38
00:01:53.370 --> 00:01:58.330
import A, and B depends on A, that's okay.

39
00:01:58.330 --> 00:02:00.430
Cuz otherwise you'd have an endless cycle.

40
00:02:00.430 --> 00:02:04.530
And that's something that other
module systems will support.

41
00:02:04.530 --> 00:02:07.019
But it's similar to AMD.

42
00:02:07.019 --> 00:02:13.230
And it has async loading support and
configurable module loading, okay?

43
00:02:13.230 --> 00:02:16.170
So let's kinda talk about this stuff.

44
00:02:16.170 --> 00:02:19.550
The major design goals, when they sat down
and talked about them, they had a lot, but

45
00:02:19.550 --> 00:02:21.200
these are some of the default ones.

46
00:02:21.200 --> 00:02:24.892
So default exports are favored.

47
00:02:24.892 --> 00:02:29.806
They wanted a static module
structure instead of a dynamic one

48
00:02:29.806 --> 00:02:33.110
like we can get in other systems.

49
00:02:33.110 --> 00:02:37.010
And they also wanted these the support for
the sync or async and

50
00:02:37.010 --> 00:02:38.860
then the cyclical dependencies.

51
00:02:38.860 --> 00:02:40.610
So let's start with each one.

52
00:02:40.610 --> 00:02:41.880
Import/export syntax.

53
00:02:41.880 --> 00:02:45.712
So there's two pieces inside of.

54
00:02:47.747 --> 00:02:49.590
&gt;&gt; Aaron Frost: That you
really need to focus on.

55
00:02:49.590 --> 00:02:52.060
The one is the import/export syntax.

56
00:02:52.060 --> 00:02:54.550
Because as you're writing your code,
you need to export it, and

57
00:02:54.550 --> 00:02:56.470
then you also need to
import other people's code.

58
00:02:56.470 --> 00:03:01.740
But then there's also this programmatic
loading API that they've built as well.

59
00:03:01.740 --> 00:03:03.810
So let's talk about these two things.

60
00:03:03.810 --> 00:03:06.570
Let's talk about
the import/export syntax first.

61
00:03:08.620 --> 00:03:15.060
So if you want to do like this single
export, you write your class, and

62
00:03:15.060 --> 00:03:20.380
then in your MyClass.js, you say,
export default MyClass;.

63
00:03:20.380 --> 00:03:23.390
So the word default is a keyword.

64
00:03:23.390 --> 00:03:25.720
And that means when they import it,

65
00:03:25.720 --> 00:03:28.710
whatever the default is is
what they're gonna get.

66
00:03:28.710 --> 00:03:31.140
Like, that's gonna be whatever,
the thing that gets imported.

67
00:03:32.140 --> 00:03:36.180
So if someone imports,
if they were to do this,

68
00:03:36.180 --> 00:03:41.060
import MyClass from 'MyClass';,
that's what they're gonna get.

69
00:03:41.060 --> 00:03:44.839
They're gonna get a reference to
this MyClass constructor, okay.

70
00:03:44.839 --> 00:03:49.830
So that's kind of the basic
import/export syntax.

71
00:03:49.830 --> 00:03:56.740
If you had some library, and it was like,
hey, export this constant square root,

72
00:03:58.290 --> 00:04:02.770
export the square function,
and export this diag function.

73
00:04:04.910 --> 00:04:08.460
And then in main,
if you could import only some of,

74
00:04:08.460 --> 00:04:10.750
you could, if you wanted import
only some of them, you could.

75
00:04:12.200 --> 00:04:15.972
So if you were like, hey, go ahead and
import just square and diag from lib.

76
00:04:15.972 --> 00:04:19.420
And it would see lib and it would
know to go ahead and asynchronously,

77
00:04:19.420 --> 00:04:21.870
it would load that and
go ahead and import those.

78
00:04:24.720 --> 00:04:28.681
And then you could, you know,
square whatever you wanted to or

79
00:04:28.681 --> 00:04:31.330
you could call diag or anything.

80
00:04:31.330 --> 00:04:37.025
Does that make sense, how you're gonna
import functionality from other stuff?

81
00:04:37.025 --> 00:04:43.510
You could also, if you wanted to, you
could call import * as lib from 'lib';.

82
00:04:44.570 --> 00:04:49.271
And then instead of being able to call
square, you have to call lib.square or

83
00:04:49.271 --> 00:04:50.600
lib.diag.

84
00:04:50.600 --> 00:04:52.700
So that's other syntax on top of it.

85
00:04:54.110 --> 00:04:58.119
So if you wanted to alias
what you're exporting,

86
00:04:58.119 --> 00:05:02.060
you could say, export MyClass as Dude.

87
00:05:02.060 --> 00:05:05.251
And then you could import
Dude as Bro from 'lib'.

88
00:05:05.251 --> 00:05:09.798
So you can alias them on the export,
you can alias them on the import as well.

89
00:05:09.798 --> 00:05:11.046
Make sense?

90
00:05:11.046 --> 00:05:16.800
And bro is an instance of MyClass, like
if you were to do that, it would work.

91
00:05:16.800 --> 00:05:17.466
Okay.

92
00:05:17.466 --> 00:05:20.216
So, cyclic dependencies, so

93
00:05:20.216 --> 00:05:25.200
import Main from 'main' and
import lib from 'lib'.

94
00:05:27.010 --> 00:05:31.590
That would be like if, no matter which
one of these things you required or

95
00:05:31.590 --> 00:05:35.000
that you imported from a third module,
they would both sit there and

96
00:05:35.000 --> 00:05:37.390
have this cyclical dependency on
each other, but that would be okay.

97
00:05:37.390 --> 00:05:40.963
Like, it would load the dependencies
of the imports first and

98
00:05:40.963 --> 00:05:42.620
then it would run them, so.

99
00:05:42.620 --> 00:05:47.027
&gt;&gt; Off Camera 1: And main and
lib strings, are they normal paths, or?

100
00:05:47.027 --> 00:05:47.677
&gt;&gt; Aaron Frost: Come again?

101
00:05:47.677 --> 00:05:49.788
&gt;&gt; Off Camera 1: Are they paths,
or what, file paths?

102
00:05:49.788 --> 00:05:50.601
&gt;&gt; Aaron Frost: Yeah, they're paths.

103
00:05:50.601 --> 00:05:52.090
&gt;&gt; Off Camera 1: Okay.
&gt;&gt; Aaron Frost: Yeah, yeah, yeah.

104
00:05:52.090 --> 00:05:54.238
&gt;&gt; Off Camera 1: So they don't have to
be in the same directory or anything?

105
00:05:54.238 --> 00:05:54.925
&gt;&gt; Aaron Frost: No.

106
00:05:54.925 --> 00:05:56.707
&gt;&gt; Off Camera 1: Okay.
&gt;&gt; Aaron Frost: Yeah.

107
00:05:56.707 --> 00:06:00.741
So here's a different example that uses
file paths a little bit just to kind of

108
00:06:00.741 --> 00:06:02.242
show it off a little better.

109
00:06:02.242 --> 00:06:09.268
So like in lib, if you wanted to import,
you could import the default thing or

110
00:06:09.268 --> 00:06:13.604
you could import some
named things from mylib.

111
00:06:13.604 --> 00:06:16.120
That's one syntax.

112
00:06:16.120 --> 00:06:19.339
You could import just the default, or

113
00:06:19.339 --> 00:06:25.820
you could import just the named things,
the properties on top of it.

114
00:06:25.820 --> 00:06:27.260
You could rename them if you wanted to.

115
00:06:27.260 --> 00:06:32.531
So if you were like, hey, import named1 as
myNamed1, and then import named2 as well.

116
00:06:32.531 --> 00:06:35.244
So that's one way.

117
00:06:35.244 --> 00:06:39.410
Importing the module as an object
with one property per named import.

118
00:06:39.410 --> 00:06:44.646
So import * as mylib, and
then anything exported

119
00:06:44.646 --> 00:06:49.297
you'd call as mylib.foo and mylib.bar.

120
00:06:49.297 --> 00:06:52.100
And then if you only wanted
to import the module but

121
00:06:52.100 --> 00:06:56.660
not actually do anything with it,
you could just say import and

122
00:06:56.660 --> 00:07:00.090
give it the path, because that
might be a thing you wanna do.

123
00:07:00.090 --> 00:07:03.720
Like a polyfill, you know what I'm saying,
or, I don't know, something.

124
00:07:04.770 --> 00:07:06.030
So that's an option.

125
00:07:07.120 --> 00:07:14.680
So here's how you export, you'd say export
var myVar, export let, export const.

126
00:07:14.680 --> 00:07:16.456
You can export a function.

127
00:07:16.456 --> 00:07:18.683
You can export a generator.

128
00:07:18.683 --> 00:07:22.680
You can export a class.

129
00:07:22.680 --> 00:07:24.565
If you put the word
default in there anywhere,

130
00:07:24.565 --> 00:07:29.810
that will be treated just
like the default thing.

131
00:07:29.810 --> 00:07:34.130
Otherwise, this export class
you'd have to specify,

132
00:07:34.130 --> 00:07:37.232
like, it would only be like
a like a dot dependency,

133
00:07:37.232 --> 00:07:42.770
it wouldn't be the main export,
if that makes any sense.

134
00:07:42.770 --> 00:07:45.728
Exporting, you can say export *.

135
00:07:45.728 --> 00:07:51.770
So I could re-export,
if that makes any sense.

136
00:07:52.950 --> 00:07:56.840
So let's say I want to import something,
like import foo from foo.js,

137
00:07:56.840 --> 00:08:00.310
and then I want to export it
back out to someone else.

138
00:08:00.310 --> 00:08:06.131
You could just use this syntax,
export * from some other module.

139
00:08:06.131 --> 00:08:09.560
So that would basically bring it and
go ahead and

140
00:08:09.560 --> 00:08:11.966
export all of its stuff back out.

141
00:08:11.966 --> 00:08:13.916
Awesome, weird?

142
00:08:13.916 --> 00:08:15.374
It's awesome.

143
00:08:15.374 --> 00:08:18.438
You can export foo or
bar from that other module.

144
00:08:18.438 --> 00:08:22.942
Like, you could export just pieces
of it if you didn't want to export

145
00:08:22.942 --> 00:08:24.582
the whole entire thing.

146
00:08:24.582 --> 00:08:29.238
You can use the as syntax as
you're reexporting as well, okay.

147
00:08:32.123 --> 00:08:34.834
&gt;&gt; Off Camera 1: Can you maybe
give a use case for that?

148
00:08:34.834 --> 00:08:38.756
&gt;&gt; Aaron Frost: For what,
the aliasing or the reexporting?

149
00:08:38.756 --> 00:08:39.969
&gt;&gt; Off Camera 1: The reexporting.

150
00:08:39.969 --> 00:08:46.449
&gt;&gt; Aaron Frost: So let's say that
you had some module that was like,

151
00:08:46.449 --> 00:08:51.457
I don't know, some extension of the web

152
00:08:51.457 --> 00:08:56.188
socket object like I showed earlier.

153
00:08:56.188 --> 00:09:02.945
And you were like, hey, if I'm in IE,
import this thing, and export it out.

154
00:09:02.945 --> 00:09:04.567
I don't know.

155
00:09:04.567 --> 00:09:06.230
Yeah, that make sense?

156
00:09:06.230 --> 00:09:06.961
&gt;&gt; Off Camera 1: Yeah.

157
00:09:06.961 --> 00:09:08.790
[LAUGH]
&gt;&gt; Off Camera 2: Maybe you want to create

158
00:09:08.790 --> 00:09:13.815
a library and you want to split it into
a bunch of different files [INAUDIBLE] and

159
00:09:13.815 --> 00:09:16.597
then just reexport them from one place, so

160
00:09:16.597 --> 00:09:21.182
you can just import that whole
library into files, things like that.

161
00:09:21.182 --> 00:09:24.012
&gt;&gt; Aaron Frost: Yeah, kinda.

162
00:09:24.012 --> 00:09:26.940
I don't know, I've never done this.

163
00:09:26.940 --> 00:09:28.844
I don't even know if it's
possible in CommonJS.

164
00:09:28.844 --> 00:09:33.812
But, I mean, I imagine in CommonJS,
you would just be like, require,

165
00:09:33.812 --> 00:09:35.939
or var foo equals require foo.

166
00:09:35.939 --> 00:09:38.167
And then I can say, export.foo equals foo.

167
00:09:38.167 --> 00:09:41.280
So I could reexport, I've never done it,
though, so I don't know.

168
00:09:42.470 --> 00:09:43.957
Yeah?
&gt;&gt; Off Camera 3: Are the paths relative to

169
00:09:43.957 --> 00:09:44.978
the current file?

170
00:09:44.978 --> 00:09:46.002
&gt;&gt; Aaron Frost: That's a good question,
I don't know.

171
00:09:46.002 --> 00:09:46.725
I couldn't try it out.

172
00:09:46.725 --> 00:09:48.351
But that's a good question.

173
00:09:48.351 --> 00:09:50.797
So, I wish I could have tried that out.

174
00:09:50.797 --> 00:09:51.970
I knew you guys were gonna ask, though.

