WEBVTT

1
00:00:00.000 --> 00:00:04.082
[MUSIC]

2
00:00:04.082 --> 00:00:06.440
&gt;&gt; Aaron: Promises, what problems
do they solve, why do we need them?

3
00:00:06.440 --> 00:00:09.730
So, async code,
async code looks messed up, right?

4
00:00:10.890 --> 00:00:12.800
It's not always clean.

5
00:00:12.800 --> 00:00:16.580
And when you just get done writing
this perfect async structure,

6
00:00:16.580 --> 00:00:20.430
this is messed up, I shouldn't have done
this, there's gotta be a better way.

7
00:00:20.430 --> 00:00:23.680
Cuz sometimes, especially in jQueryville,
you end up with this guy.

8
00:00:24.760 --> 00:00:25.657
And who's ever had one of these?

9
00:00:25.657 --> 00:00:31.040
You're 18 levels deep, and
you're like wait, where did I define name?

10
00:00:31.040 --> 00:00:34.575
And it's seven levels up, and
your days look really sad.

11
00:00:34.575 --> 00:00:38.603
And maybe it helps with your code
organization cuz some people are like

12
00:00:38.603 --> 00:00:41.700
dude, I do async for
breakfast, it's no big deal.

13
00:00:41.700 --> 00:00:43.500
I have two more for lunch.

14
00:00:43.500 --> 00:00:45.995
But your code looks like
it's totally jacked, and

15
00:00:45.995 --> 00:00:51.940
promises are here to help us kind of,
&gt;&gt; Aaron: Make that stuff cleaner.

16
00:00:51.940 --> 00:00:55.076
And an example is something that's dirty,
and this is a simple example, but

17
00:00:55.076 --> 00:00:58.470
it's like you're trying to load an image,
and you just wanna see when it's done.

18
00:00:58.470 --> 00:01:00.950
You know what I'm saying?

19
00:01:00.950 --> 00:01:05.069
All this async stuff, so, I get this
image, and you get this loaded function,

20
00:01:05.069 --> 00:01:08.635
and if the image is loaded,
then just call loaded, but if it's not,

21
00:01:08.635 --> 00:01:11.486
add an event listener for
loaded and then call loaded.

22
00:01:11.486 --> 00:01:14.870
And then I also have to have
an error functionality.

23
00:01:14.870 --> 00:01:19.715
So if you just make the code for
something that's fairly

24
00:01:19.715 --> 00:01:24.561
simple look really ugly and
if this is promise-based,

25
00:01:24.561 --> 00:01:31.079
you could just say image.load.vent,
or image.ready, or something.

26
00:01:31.079 --> 00:01:35.782
And if that ready was a promise, then you
could just daisy-chain your .vent there,

27
00:01:35.782 --> 00:01:36.776
and be good to go.

28
00:01:36.776 --> 00:01:40.190
You wouldn't have to deal with
all this stuff, so anyway.

29
00:01:41.510 --> 00:01:42.770
It helps keep your code clean.

30
00:01:43.790 --> 00:01:46.367
So let's talk about
the promise constructor,

31
00:01:46.367 --> 00:01:48.504
I wanna talk about how you construct.

32
00:01:48.504 --> 00:01:50.400
I wanna talk about once you've
constructed, you have instances, and

33
00:01:50.400 --> 00:01:52.430
then there's some static
methods that you use as well.

34
00:01:53.780 --> 00:01:58.270
So this is the constructor,
it's just new Promise, and

35
00:01:58.270 --> 00:01:59.660
you have to give it a function.

36
00:02:01.080 --> 00:02:04.300
And the function has got two things
it's gonna get passed into it,

37
00:02:04.300 --> 00:02:06.620
a resolve method and a reject method.

38
00:02:06.620 --> 00:02:09.090
Okay, so you can do some code here,

39
00:02:09.090 --> 00:02:13.860
some amazing talk to the server,
do something async, who cares?

40
00:02:13.860 --> 00:02:14.510
But then later on,

41
00:02:14.510 --> 00:02:20.940
if everything turned out fine, you call
resolve with the stuff that it worked.

42
00:02:20.940 --> 00:02:25.940
Okay, and if it doesn't turn out well,
then you go ahead and reject it.

43
00:02:25.940 --> 00:02:27.728
And you say why you rejected it, okay?

44
00:02:27.728 --> 00:02:32.984
And this is how you use a promise, okay?

45
00:02:32.984 --> 00:02:36.337
And then in your code where
you created this promise,

46
00:02:36.337 --> 00:02:41.029
you just give this promise back to
somebody and that somebody can listen and

47
00:02:41.029 --> 00:02:43.430
wait for the events to happen, okay?

48
00:02:44.950 --> 00:02:49.200
All right, so what are some
things you can do that's async?

49
00:02:49.200 --> 00:02:49.900
Can anybody think of any?

50
00:02:51.130 --> 00:02:55.978
Like something AJAXy, maybe something web
sockety, maybe you could load an image.

51
00:02:55.978 --> 00:03:00.181
You could read-write to local storage,
that's synchronous, but

52
00:03:00.181 --> 00:03:02.871
it looks ugly when you
get everything done.

53
00:03:02.871 --> 00:03:07.620
And you can do a lot of DOM writing,
you can show some sort of spinner loading.

54
00:03:07.620 --> 00:03:16.280
Anyway, but this is the simple As and
Bs and Cs of the constructor.

55
00:03:16.280 --> 00:03:17.320
Any questions on this?

56
00:03:18.740 --> 00:03:21.285
No?
Pretty simple, in the success,

57
00:03:21.285 --> 00:03:24.410
we kind of use this when
we do the callback pattern,

58
00:03:25.770 --> 00:03:30.524
we usually make you pass
in two callback functions,

59
00:03:30.524 --> 00:03:33.570
the success callback handler and
error callback handler.

60
00:03:33.570 --> 00:03:37.232
So this is like that, the resolve is
kind of like the success handler,

61
00:03:37.232 --> 00:03:39.739
except for
I don't have to pass it into your scope.

62
00:03:40.870 --> 00:03:42.989
You just tell me which one should I fire,

63
00:03:42.989 --> 00:03:45.780
and I can kind of keep the code over
in my line if that makes any sense.

64
00:03:45.780 --> 00:03:48.610
It's gonna execute in my context,
which is really nice.

65
00:03:48.610 --> 00:03:51.970
So yeah, and the reject is kind
of like the error handler.

66
00:03:51.970 --> 00:03:56.490
So anyway, so that's the constructor,
let's talk about instances.

67
00:03:56.490 --> 00:04:00.154
So now we have an instance,
a promise can be in one of four states.

68
00:04:00.154 --> 00:04:04.000
So it can be fulfilled,
which means it was resolved.

69
00:04:05.040 --> 00:04:07.220
It can be rejected,
which means it was rejected.

70
00:04:09.030 --> 00:04:14.470
It can be pending, which means whatever
it's doing before it calls resolve or

71
00:04:14.470 --> 00:04:16.480
reject, that's still happening.

72
00:04:16.480 --> 00:04:18.920
It hasn't called either of those yet.

73
00:04:18.920 --> 00:04:20.590
Maybe it's waiting for
a DOM click, I don't know.

74
00:04:21.590 --> 00:04:23.250
And then it can be settled.

75
00:04:23.250 --> 00:04:26.120
So and settled is more for
like terminology only.

76
00:04:26.120 --> 00:04:29.650
We just use it, so
that we can say it's either rejected or

77
00:04:29.650 --> 00:04:31.530
resolved without having
to use that many words.

78
00:04:31.530 --> 00:04:35.566
So anyway, so
let's say someone gives me this promise.

79
00:04:35.566 --> 00:04:40.512
I could say promise.then,
and this then's not gonna

80
00:04:40.512 --> 00:04:45.458
get executed until,
if this thing took 20 seconds,

81
00:04:45.458 --> 00:04:49.772
my code would just register
this then handler.

82
00:04:49.772 --> 00:04:55.670
And it's not gonna call this until
the resolve method is called.

83
00:04:55.670 --> 00:04:58.074
So, you just kind of sit there,
and it just sits there and waits.

84
00:04:58.074 --> 00:05:01.090
For those that aren't familiar with
promise, it's a pretty cool syntax.

85
00:05:01.090 --> 00:05:05.580
So in then,

86
00:05:05.580 --> 00:05:08.930
you could pass in a second function,
which is kind of like the error handler.

87
00:05:08.930 --> 00:05:09.910
So that's the reject handler.

88
00:05:12.010 --> 00:05:16.997
So if I made my own GET method, like okay,
so I'm gonna do this jQuery get, and

89
00:05:16.997 --> 00:05:21.930
when I get back from the server, I'm
gonna call resolve and pass it the data.

90
00:05:21.930 --> 00:05:24.395
But if I fail,
I'm just gonna call reject, right?

91
00:05:24.395 --> 00:05:29.231
So this is my jQuery HTTP method,
but I've gone and

92
00:05:29.231 --> 00:05:32.730
wrapped it in this new promise.

93
00:05:32.730 --> 00:05:38.056
So I return this promise,
and over in my code,

94
00:05:38.056 --> 00:05:43.795
sorry, I can just say get('users.all') and

95
00:05:43.795 --> 00:05:48.720
then myController.users = users.

96
00:05:48.720 --> 00:05:51.767
And if there's an error, I can just state,
go ahead and delete myController.users.

97
00:05:51.767 --> 00:05:55.330
This is kind of how you would use it,
does that make sense?

98
00:05:55.330 --> 00:05:58.600
So if the server was super slow,
so I call this, and

99
00:05:58.600 --> 00:06:02.380
then it gives me back the promise, and
then we register this then handler.

100
00:06:02.380 --> 00:06:05.270
If the server was super slow, and
that took a minute, which it shouldn't,

101
00:06:05.270 --> 00:06:09.050
but even 100 milliseconds
can be a long time.

102
00:06:09.050 --> 00:06:10.340
This just kind of sits around, and

103
00:06:10.340 --> 00:06:15.960
it's not gonna fire until that thing
resolves or rejects, so that's that.

104
00:06:15.960 --> 00:06:20.630
You could also catch it in a second
handler, in a second .then.

105
00:06:20.630 --> 00:06:25.600
So if you don't like the two
functions in the .then,

106
00:06:25.600 --> 00:06:28.820
you could put your reject
handler in a .catch.

107
00:06:28.820 --> 00:06:33.630
That's the other API on the instance.

108
00:06:33.630 --> 00:06:38.430
So we could do this, we could say go
ahead and get all the users, go ahead and

109
00:06:38.430 --> 00:06:43.830
get all the posts, and then there's
this promise is the all, which

110
00:06:43.830 --> 00:06:49.410
basically says wait till all of these
are done, and then go ahead and do this.

111
00:06:49.410 --> 00:06:53.920
And if any of them fail, go ahead and
do this, if that makes any sense.

112
00:06:53.920 --> 00:06:57.360
So there's promises to all, which will
allow you to wait for multiple things.

113
00:06:58.510 --> 00:07:04.245
And then,
&gt;&gt; Aaron: So yeah, you could do this too,

114
00:07:04.245 --> 00:07:07.420
let's say the server didn't give you JSON,
it gave you a string.

115
00:07:07.420 --> 00:07:13.560
So you could say users.get,
users.all, or get all.

116
00:07:13.560 --> 00:07:16.670
And then you have this string,
so you could say go ahead and

117
00:07:16.670 --> 00:07:18.715
return the JSON parse of that string.

118
00:07:18.715 --> 00:07:23.253
And then you could do it a second .then,
and

119
00:07:23.253 --> 00:07:28.210
you could say myController.users = users.

120
00:07:28.210 --> 00:07:31.587
So basically, when you return something,

121
00:07:31.587 --> 00:07:36.960
it's gonna pass whatever you
returned into the next .then.

122
00:07:36.960 --> 00:07:38.558
So see how I did two .thens,

123
00:07:38.558 --> 00:07:42.660
whatever I return gets now
passed into the second .then.

124
00:07:42.660 --> 00:07:44.000
So you can kind of,
when you chain them up,

125
00:07:44.000 --> 00:07:45.710
you can kind of override what you specify.

126
00:07:45.710 --> 00:07:48.218
Yeah?
&gt;&gt; Speaker 2: Well, one question on

127
00:07:48.218 --> 00:07:53.133
the chat here,
do the ES 6 promises implement

128
00:07:53.133 --> 00:07:58.232
the promises A spec or the A plus?
&gt;&gt; Aaron: I think it's A plus.

129
00:07:58.232 --> 00:07:58.784
&gt;&gt; Speaker 2: Okay.

130
00:07:58.784 --> 00:08:02.510
&gt;&gt; Aaron: But yeah, so, I'm not positive.

131
00:08:02.510 --> 00:08:05.230
I know that some of the browser
vendors are working on making it be

132
00:08:05.230 --> 00:08:09.590
more integrated into just the elements,
but I'm not sure 100%.

133
00:08:09.590 --> 00:08:11.090
So, that was a good question.

134
00:08:12.860 --> 00:08:17.926
Even more compact,
you could just say get('users.all') and

135
00:08:17.926 --> 00:08:24.077
then you could say .then(JSON.parse),
which it would call JSON.parse and

136
00:08:24.077 --> 00:08:27.888
pass it the users, and
then you could say .then.

137
00:08:27.888 --> 00:08:34.390
And it would actually return it, right,
cuz JSON.parse doesn't impose a return.

138
00:08:34.390 --> 00:08:39.810
Anyway, so yeah,
you could even make it even more compact.

139
00:08:39.810 --> 00:08:44.402
So that's the instances of promises, and
then you've got these static methods,

140
00:08:44.402 --> 00:08:48.860
like promise.all is what, remember what
we said, you give it an array of them,

141
00:08:48.860 --> 00:08:52.230
and it won't fire the .then
until all of them are resolved?

142
00:08:52.230 --> 00:08:57.990
You've got a promise.race, which is
basically saying hey, of all of these,

143
00:08:57.990 --> 00:09:00.890
don't call the .then until one of
them settles, like just wait for one.

144
00:09:02.210 --> 00:09:07.700
You can say promise.reject, and that
will just give you a rejected promise.

145
00:09:07.700 --> 00:09:11.550
Cuz like if you're in a circumstance,

146
00:09:11.550 --> 00:09:14.640
maybe you don't even wanna go to
the server and do your async stuff, and

147
00:09:14.640 --> 00:09:18.320
you don't wanna just create a promise and
reject it for the sake of doing that.

148
00:09:18.320 --> 00:09:23.234
So the short code for
that is promise.reject,

149
00:09:23.234 --> 00:09:26.730
and you can just make a rejected
promise and return it.

150
00:09:26.730 --> 00:09:29.985
And then the opposite of that is
maybe there's one time when you don't

151
00:09:29.985 --> 00:09:32.724
wanna go to the server, and so
you can just do promise.resolve, so.

