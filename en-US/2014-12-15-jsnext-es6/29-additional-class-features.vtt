WEBVTT

1
00:00:00.000 --> 00:00:03.909
[MUSIC]

2
00:00:03.909 --> 00:00:09.250
&gt;&gt; Aaron Frost: There is some,
remember I said it is a little bit up for

3
00:00:09.250 --> 00:00:11.282
discussion still?

4
00:00:11.282 --> 00:00:12.373
Take a look at it real quick,

5
00:00:12.373 --> 00:00:16.384
I'm gonna zoom in on it.
&gt;&gt; Aaron Frost: So

6
00:00:16.384 --> 00:00:22.180
around the calls to super(),
this might change a little bit.

7
00:00:22.180 --> 00:00:24.232
So what they're thinking is, and

8
00:00:24.232 --> 00:00:28.778
I actually wanted to ask everyone here
because I just barely found this out.

9
00:00:28.778 --> 00:00:35.060
And I just barely found it out because
they just barely are talking about it.

10
00:00:35.060 --> 00:00:37.650
This is brand new, this is still
subject to change on classes.

11
00:00:37.650 --> 00:00:40.749
So when we say this thing's
still being talked about,

12
00:00:42.040 --> 00:00:45.160
it's totally still being
talked about as we speak.

13
00:00:46.200 --> 00:00:50.520
So the thought is,

14
00:00:50.520 --> 00:00:56.220
if I have this Godzilla class
that extends Monster and

15
00:00:56.220 --> 00:00:59.530
someone calls attack() on Godzilla.

16
00:00:59.530 --> 00:01:05.270
And I wanna do some Godzilla things, but
I also want to call my super.attack().

17
00:01:05.270 --> 00:01:08.720
Does it make more sense
just to call super() or

18
00:01:08.720 --> 00:01:12.710
does it make more sense
to call super.attack()?

19
00:01:12.710 --> 00:01:16.760
That was I wanted to ask you guys, cuz
that's what's clearly up for discussion.

20
00:01:16.760 --> 00:01:21.120
So the argument is if you're in
the attack method and you call super(),

21
00:01:21.120 --> 00:01:25.610
it should look for the parent class and
just call the function of the same name.

22
00:01:27.320 --> 00:01:28.568
That's what some people are saying.

23
00:01:28.568 --> 00:01:33.380
So they think that the super
just calling super() is good.

24
00:01:33.380 --> 00:01:37.850
And other people are like just dropping
the word super in random places doesn't

25
00:01:37.850 --> 00:01:42.950
make any sense to me,
I want you to make me say super.attack().

26
00:01:42.950 --> 00:01:47.679
So, what do you guys think?
&gt;&gt; Off Camera 1: If you wanted to do

27
00:01:47.679 --> 00:01:51.053
a different super function, right,

28
00:01:51.053 --> 00:01:55.625
how the prepare to attack method on super.
&gt;&gt; Aaron Frost: Yeah well you could

29
00:01:55.625 --> 00:01:56.302
always call it.

30
00:01:56.302 --> 00:02:01.281
If it's a different function name you
don't really run the risk of calling

31
00:02:01.281 --> 00:02:03.820
this dot prepare for attack, right?

32
00:02:03.820 --> 00:02:07.159
You would be fine if you said,
you could say, this dot prepare for

33
00:02:07.159 --> 00:02:11.136
attack because that's not cyclical,
that's a totally another function.

34
00:02:11.136 --> 00:02:13.870
We're just talking about the two
that are called the same thing.

35
00:02:13.870 --> 00:02:16.158
If I call this dot that attack,
I'm effed, right?

36
00:02:16.158 --> 00:02:17.580
Cuz it's just going to start all over.

37
00:02:17.580 --> 00:02:21.682
So the question is specifically around
the two methods is called the same thing.

38
00:02:21.682 --> 00:02:23.026
&gt;&gt; Off Camera 1: I prefer the first.

39
00:02:23.026 --> 00:02:24.381
&gt;&gt; Aaron Frost: You prefer the first,

40
00:02:24.381 --> 00:02:25.963
yeah, yeah.
&gt;&gt; Off Camera 2: Or

41
00:02:25.963 --> 00:02:29.921
you're overriding basically the attack()
function but what if your super class

42
00:02:29.921 --> 00:02:33.380
doesn't do certain things that you
want the attack() function to do?

43
00:02:33.380 --> 00:02:38.252
Like if you attack, you also want to
subtract from your action point pool.

44
00:02:38.252 --> 00:02:41.320
But you have a separate function that
would subtract from the action point pool

45
00:02:41.320 --> 00:02:41.841
[CROSSTALK].

46
00:02:41.841 --> 00:02:44.625
So you could do super dot-
&gt;&gt; Aaron Frost: Exactly, but

47
00:02:44.625 --> 00:02:49.355
what if you have like a really good
dodger, that was like, hey dude,

48
00:02:49.355 --> 00:02:52.901
I'm gonna dodge stuff as I attack,
I don't know.

49
00:02:52.901 --> 00:02:57.160
So my attack() method here is incomplete,

50
00:02:57.160 --> 00:03:00.230
you could have more code
beside just calling super.

51
00:03:00.230 --> 00:03:02.805
I could have code that could
like do a million things,

52
00:03:02.805 --> 00:03:04.305
and then call super to attack.

53
00:03:04.305 --> 00:03:09.408
Or what if you just want to call three
super functions, but not have any

54
00:03:09.408 --> 00:03:15.437
of those functions on your extended class?
&gt;&gt; Off Camera 1: That's

55
00:03:15.437 --> 00:03:18.834
how you'd call this guy.
&gt;&gt; Aaron Frost: Yeah I see what

56
00:03:18.834 --> 00:03:19.600
you're saying.

57
00:03:20.850 --> 00:03:25.300
And if that's something that would make
sense, and I'm not sure that it does, and

58
00:03:25.300 --> 00:03:25.980
I'm not sure that doesn't.

59
00:03:25.980 --> 00:03:28.190
I just haven't thought about it, but

60
00:03:28.190 --> 00:03:34.130
if that was what it was then this
the super.attack() would be better, right?

61
00:03:34.130 --> 00:03:37.550
The dot syntax would better
than just the super syntax.

62
00:03:37.550 --> 00:03:42.540
Anyway guys see these guys,
these super smart people

63
00:03:43.620 --> 00:03:49.580
they sit at the TC39 things and they're
like, they talk about that like at length.

64
00:03:50.610 --> 00:03:52.180
We talked about a for
five minutes and I'm done.

65
00:03:52.180 --> 00:03:54.160
Like I already want to give up and
go home.

66
00:03:54.160 --> 00:03:58.900
They talk about this and
they email about it for like days, okay?

67
00:03:58.900 --> 00:04:01.150
So this is what the TC39 does.

68
00:04:01.150 --> 00:04:02.910
So this is something
that still subject for

69
00:04:02.910 --> 00:04:04.600
change which is why I'm not
going to teach it to you.

70
00:04:04.600 --> 00:04:09.498
Like I just wanted to point out that
that's a thing that might change,

71
00:04:09.498 --> 00:04:10.420
make sense?

72
00:04:10.420 --> 00:04:17.443
Okay, all right?
&gt;&gt; Aaron Frost: You

73
00:04:17.443 --> 00:04:21.070
can't use it before it's been it's
like let like it's looks like.

74
00:04:22.300 --> 00:04:22.930
It's not gonna.

75
00:04:22.930 --> 00:04:26.190
Okay, what I meant to say it's
not going to get hoisted, okay?

76
00:04:26.190 --> 00:04:31.290
So if you have class Bar{} on line ten,
and you try and new one up on line one,

77
00:04:31.290 --> 00:04:34.700
you are gonna get an error
because they don't hoist.

78
00:04:36.810 --> 00:04:38.710
At least they shouldn't hoist.

79
00:04:38.710 --> 00:04:42.683
You guys might try it out on tracer and
it works, but they shouldn't hoist.

80
00:04:42.683 --> 00:04:45.941
So if no constructor default behavior,
yeah, so

81
00:04:45.941 --> 00:04:49.750
if you don't have a If you
don't have it is a constructor.

82
00:04:49.750 --> 00:04:53.151
Like let's say you just make
a class called foo, and

83
00:04:53.151 --> 00:04:55.401
you don't give it a constructor.

84
00:04:55.401 --> 00:04:58.870
Or you're like foo, and
it extends something else.

85
00:04:58.870 --> 00:05:00.536
If you don't give it a constructor,

86
00:05:00.536 --> 00:05:03.816
it's gonna do the same thing that
we're used to other languages doing,

87
00:05:03.816 --> 00:05:07.232
which is just calling the super
constructor and passing in the arguments.

88
00:05:07.232 --> 00:05:08.059
So that's all it's gonna do.

89
00:05:10.030 --> 00:05:14.070
So it will implement default behavior
when a constructor is absent.

90
00:05:15.070 --> 00:05:17.390
But if it's a class as we
talked about in sugar.

91
00:05:17.390 --> 00:05:19.625
I think it's easier to learn for
newbs too, though,

92
00:05:19.625 --> 00:05:25.100
like the some of us have i really honed
our skills on prototypes and I sometimes

93
00:05:25.100 --> 00:05:31.020
look at my classes my prototypes and
I'm like, that is beautiful.

94
00:05:31.020 --> 00:05:33.804
I've done a great job today.

95
00:05:33.804 --> 00:05:37.599
But I think for for new people for
people just learning the language,

96
00:05:37.599 --> 00:05:41.420
which hopefully we get a lot
more JavaScript learners.

97
00:05:41.420 --> 00:05:42.421
I think it's a good thing,

98
00:05:42.421 --> 00:05:46.900
I think classes will help.
&gt;&gt; Aaron Frost: I think especially

99
00:05:46.900 --> 00:05:52.809
subclassing, specifically, I think it
will make it easier for new people.

100
00:05:52.809 --> 00:05:55.560
You can also subclass built in stuff.

101
00:05:55.560 --> 00:05:57.338
Some of the benefits.

102
00:05:57.338 --> 00:06:01.060
I think it will make code ports between
languages a little bit easier too.

103
00:06:01.060 --> 00:06:01.780
Just to compile,

104
00:06:01.780 --> 00:06:06.910
I think will make JavaScript a better
compiled to language,personally.

105
00:06:06.910 --> 00:06:11.820
And I talked about the possible
perf games long term if

106
00:06:11.820 --> 00:06:15.100
if we got rid of function constructors and
only use classes.

107
00:06:15.100 --> 00:06:19.000
You could see some, I don't know,

108
00:06:19.000 --> 00:06:23.795
I think big big performance gains if
all functions lost their constructor.

109
00:06:23.795 --> 00:06:29.390
But yeah, that's classes,
we did it, we good?

110
00:06:29.390 --> 00:06:33.655
Any questions, online?

111
00:06:33.655 --> 00:06:37.160
No Okay.

112
00:06:37.160 --> 00:06:38.980
Let's go ahead and try it out real quick.

113
00:06:38.980 --> 00:06:44.526
So go ahead and try and
build something in parallel,

114
00:06:44.526 --> 00:06:47.180
a prototype and a class.

115
00:06:48.300 --> 00:06:52.570
Or like for some method
implementation from Super, try that.

116
00:06:52.570 --> 00:06:56.810
Maybe someone could like,
extend array and make it so

117
00:06:56.810 --> 00:07:02.089
that calling array.push() returns
the instance of the array so

118
00:07:02.089 --> 00:07:05.308
that you can like chain your calls to it.

119
00:07:05.308 --> 00:07:06.120
You know what I'm saying?

120
00:07:06.120 --> 00:07:11.062
So you could do like,
kinda like how you can in Lodash,

121
00:07:11.062 --> 00:07:14.294
like array.map.filter.blah.

122
00:07:14.294 --> 00:07:19.060
Well actually you can with those ones but
not with like push and pop but, anyway

