WEBVTT

1
00:00:00.000 --> 00:00:03.687
[MUSIC]

2
00:00:03.687 --> 00:00:05.130
&gt;&gt; Aaron Frost: Okay,
what do generators solve?

3
00:00:05.130 --> 00:00:07.550
Let's talk about it real quick.

4
00:00:07.550 --> 00:00:08.966
So consider this code here.

5
00:00:08.966 --> 00:00:14.040
So, we're going to say,
set timeout and after

6
00:00:14.040 --> 00:00:19.210
one millisecond go ahead and log this,
just wait a millisecond and log it, right?

7
00:00:19.210 --> 00:00:22.350
Is it going to wait a millisecond?

8
00:00:24.160 --> 00:00:26.480
It might wait as little as a millisecond,

9
00:00:26.480 --> 00:00:29.770
but there's no guarantee it's going
to fire in a millisecond, at all.

10
00:00:31.250 --> 00:00:33.020
It will at least wait a millisecond,
though.

11
00:00:33.020 --> 00:00:34.500
That's the only thing you know for

12
00:00:34.500 --> 00:00:37.820
sure is it will not fire
in less than a millisecond.

13
00:00:37.820 --> 00:00:39.299
That's all you know for a fact.

14
00:00:40.780 --> 00:00:43.510
So, then we have this foo function
that we're going to call right here.

15
00:00:43.510 --> 00:00:48.669
And we're going to say,
wall I is less than 1E10,

16
00:00:48.669 --> 00:00:52.090
which is a gigantic number.

17
00:00:52.090 --> 00:00:56.150
Go ahead and just start logging stuff for
the console.

18
00:00:56.150 --> 00:00:58.970
It's going to be awesome,
just go ahead and log it all out.

19
00:01:02.280 --> 00:01:04.350
So, how long is this going to run for?

20
00:01:04.350 --> 00:01:07.064
When we call foo,
how long is going to take to execute?

21
00:01:07.064 --> 00:01:07.840
Anyone know?

22
00:01:10.209 --> 00:01:11.825
&gt;&gt; Aaron Frost: A long time,
probably, right?

23
00:01:11.825 --> 00:01:12.688
&gt;&gt; Speaker 2: Longer than one millisecond.

24
00:01:12.688 --> 00:01:15.057
&gt;&gt; Aaron Frost: Way longer
than one millisecond, right?

25
00:01:15.057 --> 00:01:16.800
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Aaron Frost: So

26
00:01:16.800 --> 00:01:22.190
when you run this code, this is actually
going to print out in this order.

27
00:01:22.190 --> 00:01:25.250
It's actually going to log all this stuff,
and it's going to block for

28
00:01:25.250 --> 00:01:30.890
however long it needs, and then it will
return control back to the timeout,

29
00:01:30.890 --> 00:01:33.330
so the timeout can do
what it wanted to do.

30
00:01:33.330 --> 00:01:38.010
So when you say setTimeout, basically
all you're saying is you're up next.

31
00:01:38.010 --> 00:01:43.550
Like, no guarantees when you're up, but
whenever that is, you're up next, okay.

32
00:01:43.550 --> 00:01:45.160
So this is kind of a problem,

33
00:01:45.160 --> 00:01:49.730
and this is this is partly why
generators came around to help.

34
00:01:52.110 --> 00:01:54.100
So, what if you could pause that and
restart it, though?

35
00:01:55.960 --> 00:01:58.810
Like if you could say, dude, why don't
you take a break off for a second?

36
00:01:58.810 --> 00:02:03.645
As soon as you said pause, the setTimeout
would go, I've been waiting for

37
00:02:03.645 --> 00:02:06.700
like five milliseconds,
what took you so long?

38
00:02:06.700 --> 00:02:09.780
And then it would run and then maybe
you could resume again at that point.

39
00:02:09.780 --> 00:02:14.000
If you could pause, stop blocking the
flow, and then let everything through and

40
00:02:14.000 --> 00:02:16.359
then take back over when you're done,
that might help the flow,

41
00:02:16.359 --> 00:02:20.050
might make performance
look a little bit better.

42
00:02:21.270 --> 00:02:24.379
If you could though, those two
things would switch places, right?

43
00:02:24.379 --> 00:02:26.981
The wait millisecond would finish
before that, the four one,

44
00:02:26.981 --> 00:02:29.450
because that wouldn't block
the process any more, okay.

45
00:02:30.730 --> 00:02:34.520
So generators enable JavaScript to
be a little bit more cooperative on

46
00:02:34.520 --> 00:02:36.190
long running stuff like that.

47
00:02:36.190 --> 00:02:38.600
So this is the syntax for a generator.

48
00:02:38.600 --> 00:02:42.720
Make a function and
you put a star before the name.

49
00:02:44.270 --> 00:02:44.770
Cool?

50
00:02:45.830 --> 00:02:51.170
You can put it after function,
as well, you see what I did there?

51
00:02:51.170 --> 00:02:52.590
I'm switching the star back and forth.

52
00:02:53.660 --> 00:02:55.200
Apparently either one is cool.

53
00:02:56.880 --> 00:02:58.580
I'm just putting it on the function,

54
00:02:58.580 --> 00:03:03.030
in the name of it, because it seems
to make more sense to me like that.

55
00:03:03.030 --> 00:03:09.839
And then, the other new syntax
you gain is this yield guy, okay?

56
00:03:09.839 --> 00:03:14.780
So, we've picked up this star symbol,
along with our name, and

57
00:03:14.780 --> 00:03:18.910
then you've picked up yield as well,
which is a thing we haven't had before.

58
00:03:18.910 --> 00:03:21.316
And yield is going to take
a second to understand, so

59
00:03:21.316 --> 00:03:23.132
let me show you how it's going to work.

60
00:03:25.259 --> 00:03:28.161
&gt;&gt; Aaron Frost: Besides yield, this body
of this code in this generator is just

61
00:03:28.161 --> 00:03:31.720
a regular method body,
with the exception of the word yield.

62
00:03:31.720 --> 00:03:32.903
So let me show you how you use it.

63
00:03:34.764 --> 00:03:36.562
&gt;&gt; Aaron Frost: So if I call this geni,

64
00:03:36.562 --> 00:03:40.169
it's actually not going
to execute my code.

65
00:03:41.470 --> 00:03:46.530
Okay, it just returned to me
this generator iterator, okay?

66
00:03:48.010 --> 00:03:50.170
That's all it did.

67
00:03:50.170 --> 00:03:58.670
So in order to execute it,
I actually have to call geni.next.

68
00:03:58.670 --> 00:04:02.250
And then geni.next is going
to start the execution.

69
00:04:02.250 --> 00:04:06.430
Okay, and the first time I called next,
it ran to this yield.

70
00:04:06.430 --> 00:04:11.210
Okay, and what it yielded,
yield is kind of like return, but

71
00:04:11.210 --> 00:04:14.130
it's more like pause and
send this value back.

72
00:04:14.130 --> 00:04:16.160
Okay, that's more what yield stands for.

73
00:04:16.160 --> 00:04:20.760
So when it yielded, it went ahead and
it yielded this one back to me, okay?

74
00:04:20.760 --> 00:04:25.548
So I now, it gave me back this thing that
said value is one and done is false,

75
00:04:25.548 --> 00:04:27.360
I'm still not done.

76
00:04:27.360 --> 00:04:30.600
Okay, so then I'm going to call it again.

77
00:04:31.750 --> 00:04:34.910
Yes, anyways, treat yield like return.

78
00:04:36.910 --> 00:04:41.340
So notice that when I called it
a second time, it yielded me this 2.

79
00:04:41.340 --> 00:04:44.950
It said go ahead and return this 2 but
pause, done's still false.

80
00:04:46.020 --> 00:04:50.980
And then the third time, go ahead and
return the 3, so it didn't yield anymore.

81
00:04:50.980 --> 00:04:54.880
So my generator is kind
of done at this point.

82
00:04:54.880 --> 00:04:58.820
It's like there's no more yields,
you actually called return, so I'm done,

83
00:04:58.820 --> 00:05:00.539
I'm breaking out of this generator code.

84
00:05:02.190 --> 00:05:03.520
Okay, so

85
00:05:03.520 --> 00:05:07.130
if I call next one more time, it just
is going to return an undefined value.

86
00:05:07.130 --> 00:05:09.200
It's going to say, yeah, you're done.

87
00:05:09.200 --> 00:05:12.000
There's nothing coming out of this
generator, it's not generating anymore.

88
00:05:13.720 --> 00:05:19.007
Okay so, if we call this,
it's going to go ahead and

89
00:05:19.007 --> 00:05:24.980
it's going to log 1,2,3,4,5 but not 6.

90
00:05:24.980 --> 00:05:28.840
Okay, because when you call foo
what does foo give you back?

91
00:05:30.510 --> 00:05:32.749
Do you guys remember the terminology?

92
00:05:32.749 --> 00:05:34.020
A generator iterator.

93
00:05:34.020 --> 00:05:38.860
So when you call the generator function,
it gives you back a generator iterator.

94
00:05:38.860 --> 00:05:40.770
I wish there was a better name,
but there's not.

95
00:05:41.850 --> 00:05:45.330
So, it gives you, and then it's for
of syntax, you guys remember the for

96
00:05:45.330 --> 00:05:46.670
of syntax?

97
00:05:46.670 --> 00:05:49.340
It will take anything that's
got an iterable on it and

98
00:05:49.340 --> 00:05:51.250
it will iterate through it, okay?

99
00:05:51.250 --> 00:05:56.810
Well the iterator only returns
something if done is not equal to true.

100
00:05:56.810 --> 00:06:01.950
So, when it returned this, done was true.

101
00:06:01.950 --> 00:06:04.990
That's why 6 didn't get logged,
because done was true.

102
00:06:04.990 --> 00:06:07.740
So it's kind of like
a no op on that thing.

103
00:06:08.900 --> 00:06:09.790
That make sense?

104
00:06:10.840 --> 00:06:15.430
Okay, we're going to take it
to the next level real quick.

105
00:06:15.430 --> 00:06:16.980
&gt;&gt; Speaker 3: Sorry, one more thing.

106
00:06:16.980 --> 00:06:20.724
So you cannot have a return
value in a generator function?

107
00:06:20.724 --> 00:06:21.499
&gt;&gt; Aaron Frost: Yes, at the end.

108
00:06:21.499 --> 00:06:24.981
As soon as you call return,
your generator function,

109
00:06:24.981 --> 00:06:28.395
you've got to get a new one,
your generator is dead.

110
00:06:28.395 --> 00:06:30.966
Like not dead, but it's done.

111
00:06:30.966 --> 00:06:34.646
&gt;&gt; Speaker 3: But I mean, if I would
like to get the 6 out, what should I do?

112
00:06:34.646 --> 00:06:36.150
&gt;&gt; Aaron Frost: You would yield the 6.

113
00:06:36.150 --> 00:06:38.096
&gt;&gt; Speaker 3: Okay,
yes, on the return, but

114
00:06:38.096 --> 00:06:42.420
then basically the return value
of the return gets ignored.

115
00:06:42.420 --> 00:06:45.502
&gt;&gt; Aaron Frost: Yes, and then on the next
line you can say return undefined,

116
00:06:45.502 --> 00:06:46.595
I don't care, yes.

117
00:06:46.595 --> 00:06:49.433
Or just return semicolon, so yes.

118
00:06:49.433 --> 00:06:55.280
So yes, the for loops only continue
on an iterator while done is false.

119
00:06:55.280 --> 00:06:59.270
So that's why 6 didn't get logged,
okay, so-

120
00:06:59.270 --> 00:07:00.269
&gt;&gt; Speaker 4: Quick question on it,

121
00:07:00.269 --> 00:07:01.960
can you do a plus one to get the return?

122
00:07:01.960 --> 00:07:06.030
In the for loop, I think?

123
00:07:06.030 --> 00:07:07.200
&gt;&gt; Aaron Frost: Plus one?

124
00:07:07.200 --> 00:07:07.980
Where?

125
00:07:07.980 --> 00:07:12.871
&gt;&gt; Speaker 4: Yes, so I guess-
&gt;&gt; Aaron Frost: I don't even know what

126
00:07:12.871 --> 00:07:13.400
that means.

127
00:07:13.400 --> 00:07:15.340
&gt;&gt; Speaker 4: Yes, I don't know
where you would put it, but yes.

128
00:07:15.340 --> 00:07:17.160
&gt;&gt; Aaron Frost: Yes.
I'm going to say I don't know what

129
00:07:17.160 --> 00:07:17.679
that means.

130
00:07:18.950 --> 00:07:25.220
If you, Tony, if you figure it out let
me know, if you know what you asked.

131
00:07:25.220 --> 00:07:29.430
Okay, so now we've gotten
data out of a generator, so

132
00:07:29.430 --> 00:07:32.070
I've showed you guys how to make
it yield things back to you.

133
00:07:32.070 --> 00:07:34.880
Now let me show you how
to get things into it.

134
00:07:34.880 --> 00:07:38.204
Okay, this function is super exciting.

135
00:07:38.204 --> 00:07:40.420
Okay, don't kill me for it, is an example.

136
00:07:41.880 --> 00:07:45.930
I'm just trying to show you how you can
control some flow with these generators.

137
00:07:45.930 --> 00:07:50.979
Okay, so I made a generator and
I passed it 5,

138
00:07:50.979 --> 00:07:55.080
I called next, it returned to me 6.

139
00:07:55.080 --> 00:07:59.153
I called next passing it 12, it gave me 8,
I called next passing it 13,

140
00:07:59.153 --> 00:08:00.820
it gave me 32, and so and so.

141
00:08:00.820 --> 00:08:04.191
Let me walk you through what happened
here, because this code right here,

142
00:08:04.191 --> 00:08:07.414
doesn't make a lot of sense unless
you understand what yield is doing.

143
00:08:07.414 --> 00:08:12.373
So I'm trying to explain
what yield is doing, okay?

144
00:08:12.373 --> 00:08:17.720
Everyone's got to focus though,
because it takes a second.

145
00:08:17.720 --> 00:08:23.950
I mean I know it's the end of the day, but
like seriously, bloody like focus on it.

146
00:08:23.950 --> 00:08:29.370
Okay, so we called foo and
we passed it 5, agreed?

147
00:08:30.640 --> 00:08:34.810
That means that x is equal to 5,
our incoming parameter is 5.

148
00:08:34.810 --> 00:08:37.190
We cool so far?

149
00:08:37.190 --> 00:08:40.700
Okay, but remember when we called foo
it didn't actually execute any code,

150
00:08:40.700 --> 00:08:44.253
all it did was set the parameter to 5 and
returned me a generator iterator.

151
00:08:44.253 --> 00:08:46.159
We agree?

152
00:08:46.159 --> 00:08:51.930
Okay, so now I called genit.next and
it went ahead and

153
00:08:51.930 --> 00:08:56.860
it executed that code that's in blue.

154
00:08:56.860 --> 00:09:00.790
It went ahead and yielded x plus 1.

155
00:09:00.790 --> 00:09:03.054
Okay, so what's x plus 1?

156
00:09:03.054 --> 00:09:05.680
Who remembers what x is?

157
00:09:05.680 --> 00:09:06.190
X is five.

158
00:09:07.620 --> 00:09:10.083
So it yielded x plus one, so it yielded 6.

159
00:09:10.083 --> 00:09:12.280
So we got value 6, done false.

160
00:09:12.280 --> 00:09:17.410
Okay so, all right, good so far.

161
00:09:18.990 --> 00:09:22.590
Okay, now we're going to do our next one.

162
00:09:24.680 --> 00:09:28.890
So now we called next, and
passed it 12, you guys agree?

163
00:09:28.890 --> 00:09:30.750
So when we passed it 12,

164
00:09:30.750 --> 00:09:35.450
it went ahead and put the 12 in
the space of where our code was, okay?

165
00:09:35.450 --> 00:09:38.240
So that's how I get values into it.

166
00:09:38.240 --> 00:09:40.840
So I said, go ahead and
call .next and pass 12 in.

167
00:09:42.030 --> 00:09:43.515
So what is y going to equal?

168
00:09:46.782 --> 00:09:49.650
&gt;&gt; Aaron Frost: Y is equal to 2
times anything in these parentheses.

169
00:09:49.650 --> 00:09:52.515
So what does it equal?

170
00:09:52.515 --> 00:09:53.320
&gt;&gt; Speaker 2: 24.
&gt;&gt; Aaron Frost: 24, right?

171
00:09:53.320 --> 00:09:54.360
So y is equal to 24.

172
00:09:54.360 --> 00:09:56.981
Okay, and then it's going to keep going.

173
00:10:02.430 --> 00:10:08.510
&gt;&gt; Aaron Frost: So it's going to go ahead
and yield back to me y divided by 23.

174
00:10:08.510 --> 00:10:12.330
What's y divided by 23, or
sorry, what's y divided by 3?

175
00:10:12.330 --> 00:10:14.692
You guys know, I know you know.

176
00:10:17.971 --> 00:10:19.400
&gt;&gt; Aaron Frost: I can has math.

177
00:10:19.400 --> 00:10:20.812
Yes, it's 8.

178
00:10:20.812 --> 00:10:26.360
So it's going to go ahead and yield 8 back
to me, okay, and the done is still false.

179
00:10:26.360 --> 00:10:32.040
So then, I'm going to go ahead and I'm
going to call next again, passing it 13.

180
00:10:32.040 --> 00:10:38.531
Which is going to set z equal to 13,
and then it's going to go ahead and

181
00:10:38.531 --> 00:10:43.850
yield back to me 5 + 24 +13,
which is equal to 42.

182
00:10:43.850 --> 00:10:49.080
You can see it, it's in the slide and
the done is true now.

183
00:10:51.380 --> 00:10:54.250
My gosh, did everyone understand that?

184
00:10:56.220 --> 00:10:58.694
Tell me if I didn't have my blue
highlights you would have got it.

185
00:10:58.694 --> 00:11:01.490
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Aaron Frost: It took me a while to get

186
00:11:01.490 --> 00:11:04.530
the highlights in there, but it's
the only way I could conceptualize it so

187
00:11:04.530 --> 00:11:05.960
I figured it would make sense.

188
00:11:05.960 --> 00:11:08.260
So that kind of makes
sense how generators work.

189
00:11:08.260 --> 00:11:11.420
And again, Kyle Simpson,

190
00:11:11.420 --> 00:11:16.840
he's got a bunch of generator stuff, in
one of the other Frontend Masters courses,

191
00:11:16.840 --> 00:11:19.970
so if you really want to dive into
generators, check out his course.

192
00:11:21.720 --> 00:11:24.700
Okay.
&gt;&gt; Speaker 2: Is there a practical

193
00:11:24.700 --> 00:11:27.870
application of actually setting
up a generator like that?

194
00:11:27.870 --> 00:11:29.750
&gt;&gt; Aaron Frost: Yes,
check out Kyle's stuff.

195
00:11:29.750 --> 00:11:33.550
Mark says he's a genius
on how it can be really,

196
00:11:33.550 --> 00:11:36.710
really cool to fit the way we think.

197
00:11:36.710 --> 00:11:41.975
&gt;&gt; Speaker 5: Yes, I mean his basic
case is that humans kind of think

198
00:11:41.975 --> 00:11:48.187
synchronously, logic and
reason about code synchronously.

199
00:11:48.187 --> 00:11:52.510
And if you are coding with generators, and

200
00:11:52.510 --> 00:11:57.194
he has some different patterns and
whatever,

201
00:11:57.194 --> 00:12:04.546
you can write synchronous code, but
are doing asynchronous routines.

202
00:12:04.546 --> 00:12:10.875
So yes, I mean he has a talk on,
I think it's recorded on [INAUDIBLE] for

203
00:12:10.875 --> 00:12:16.454
all of his stuff for free out there,
as well as the last section

204
00:12:16.454 --> 00:12:21.638
of the advanced JavaScript
course kind of discusses it.

205
00:12:21.638 --> 00:12:22.775
It's worth checking out.

206
00:12:22.775 --> 00:12:23.391
&gt;&gt; Aaron Frost: Check it out.

207
00:12:23.391 --> 00:12:25.728
&gt;&gt; Speaker 3: And
it's great for Fibonacci.

208
00:12:25.728 --> 00:12:28.832
&gt;&gt; Aaron Frost: Yes,
it's great for Fibonacci.

209
00:12:28.832 --> 00:12:32.809
Godwin's Law,
we just did Godwin's Law again.

210
00:12:32.809 --> 00:12:38.425
Okay so it has a companion feature
called Generator Expressions,

211
00:12:38.425 --> 00:12:40.940
and those got pushed to ES7.

212
00:12:43.210 --> 00:12:44.339
So they're not going to be in.

213
00:12:44.339 --> 00:12:47.500
So if you heard about them and you're like
dude, Generator Expressions, they're out.

