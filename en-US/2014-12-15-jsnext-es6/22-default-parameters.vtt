WEBVTT

1
00:00:00.000 --> 00:00:03.844
[MUSIC]

2
00:00:03.844 --> 00:00:07.258
&gt;&gt; Aaron Frost: So, some other ways to
refer to default parameters because they

3
00:00:07.258 --> 00:00:09.864
call them a million things and
I don't know why.

4
00:00:09.864 --> 00:00:13.967
But when you go through the documentation
that I don't know if they've called

5
00:00:13.967 --> 00:00:16.277
the same thing twice in the documentation.

6
00:00:16.277 --> 00:00:20.414
Default Arguments, Default Values,
Devault Function Arguments,

7
00:00:20.414 --> 00:00:25.532
Default Optional Parameters, any similar
combination of any to the words used here,

8
00:00:25.532 --> 00:00:29.970
or anything that you could possibly imply,
also refers to the same topic.

9
00:00:31.410 --> 00:00:34.180
It's kind of a mess as
far as the wording goes.

10
00:00:34.180 --> 00:00:37.780
And this is kind of a new version of
an old seam, we've seen this before.

11
00:00:37.780 --> 00:00:42.640
In C++ we've got them, Python's got them,
CoffeeScript's got them and

12
00:00:42.640 --> 00:00:44.747
now EcmaScript has got them too.

13
00:00:44.747 --> 00:00:49.674
So historically, like, we spend the first
few lines of our code data proofing,

14
00:00:49.674 --> 00:00:50.190
right.

15
00:00:50.190 --> 00:00:53.040
And we've talked about all these things
we do at the top of our functions,

16
00:00:53.040 --> 00:00:55.150
and data proofing's definitely
one of them, right?

17
00:00:55.150 --> 00:00:58.210
Who's done this kind of stuff before,
this kind of data proofing, right?

18
00:00:58.210 --> 00:01:03.130
Cuz we can't get down into the internals
of the function, the lower lines,

19
00:01:03.130 --> 00:01:05.800
if we've got a random
undefined floating through.

20
00:01:05.800 --> 00:01:10.770
And invariably like it once you hit
you first bug, how do you fix the bug?

21
00:01:11.880 --> 00:01:16.520
You say like go to the very top of your
function go down a line, and you do this.

22
00:01:16.520 --> 00:01:18.700
So even if you didn't write
it that way the first time,

23
00:01:18.700 --> 00:01:21.330
maintenance mode kicks in and
you do these kind of things.

24
00:01:21.330 --> 00:01:23.669
You kind of data proof yourself
at the top of the function.

25
00:01:24.990 --> 00:01:27.650
So we spend the first and depending on
what kind of function is it can be you

26
00:01:27.650 --> 00:01:32.120
know quite a few lines
data proofing our stuff.

27
00:01:32.120 --> 00:01:37.150
So I call it data proofing that's not
like it a word that you should pretend

28
00:01:37.150 --> 00:01:41.870
is real like that's just what I'm talking
that's just me that's how I say it.

29
00:01:42.890 --> 00:01:47.480
So sometimes we'll use the short circuit
expression some people will use a ternary

30
00:01:47.480 --> 00:01:48.920
example.

31
00:01:48.920 --> 00:01:56.040
It's up to you guys, you know,
everyone's different, and that's fine.

32
00:01:56.040 --> 00:01:58.290
So here's kind of how you'd use it.

33
00:01:58.290 --> 00:02:02.140
So we have the sayHello thing,
and we've got a name.

34
00:02:02.140 --> 00:02:05.030
And I'm going to give
it a default of World.

35
00:02:05.030 --> 00:02:09.420
Okay, so this function, all it does
is says hello to you, that's it.

36
00:02:09.420 --> 00:02:11.770
When you call sayHello,
you got to give it a name, if you don't,

37
00:02:11.770 --> 00:02:12.950
it's gonna use world.

38
00:02:12.950 --> 00:02:17.750
Suffice it to say, hello diet dew, which
there is none around here for some reason.

39
00:02:19.660 --> 00:02:20.580
&gt;&gt; Speaker 2: Diet Coke.

40
00:02:20.580 --> 00:02:25.420
&gt;&gt; Aaron Frost: Right?
It's a little weird, but so

41
00:02:25.420 --> 00:02:29.880
yeah, so you say hello.

42
00:02:29.880 --> 00:02:31.840
You pass it Dt Dew,
it's going to say hello there too.

43
00:02:31.840 --> 00:02:39.390
You pass an empty string, and
it says hello and a space, okay.

44
00:02:39.390 --> 00:02:44.370
You pass it undefined or
you don't pass anything which is the same

45
00:02:44.370 --> 00:02:47.130
as passing undefined and you can see
that here in these last two examples.

46
00:02:48.750 --> 00:02:54.580
So, what you can tell from these four
examples is passing in an empty string.

47
00:02:54.580 --> 00:02:59.380
So, it's not faulty, what triggers
the assignment expression, okay.

48
00:03:00.570 --> 00:03:02.890
It's undefined that triggers it and

49
00:03:02.890 --> 00:03:06.827
some people like there was there's like
actually big conversation in the TC 39.

50
00:03:06.827 --> 00:03:10.110
And they went back, I don't know if it
like if they got physical, I don't think

51
00:03:10.110 --> 00:03:14.290
anyone got punched over it but it was like
there was like serious conflict where

52
00:03:14.290 --> 00:03:20.262
they're like hey if I purposefully passed
you on the find arguments.link, we won.

53
00:03:20.262 --> 00:03:25.461
And if arguments.linked is one end it's
undefined, then I think you shouldn't

54
00:03:25.461 --> 00:03:30.710
trigger the default value sign,
that means I wanted it to be undefined.

55
00:03:30.710 --> 00:03:36.860
And some people were like,
well that's a silly use case.

56
00:03:36.860 --> 00:03:40.380
Like that's not a good use case for
what we're doing here, so no.

57
00:03:40.380 --> 00:03:45.360
And that was kind of the generally,
like that was a good opinion to have,

58
00:03:45.360 --> 00:03:47.590
that was a solid thing,
if I purposefully pass it in,

59
00:03:47.590 --> 00:03:50.590
that's at least something to consider
whether it's a good idea or not.

60
00:03:50.590 --> 00:03:54.480
At least they considered it and decided
even if you purposely pass in undefined

61
00:03:55.610 --> 00:03:58.300
it's still not going to,
it will still trigger it.

62
00:03:58.300 --> 00:03:59.525
Even though you meant,

63
00:03:59.525 --> 00:04:03.821
you're trying to put something there
besides undefined when you're passing it.

64
00:04:03.821 --> 00:04:12.449
Anyway, so yeah, it's not just that
arguments.length is not where you're at.

65
00:04:12.449 --> 00:04:15.186
As long as the thing is undefined
it's gonna trigger that default

66
00:04:15.186 --> 00:04:16.040
assignment event.

67
00:04:20.170 --> 00:04:24.170
So empty string doesn't trigger it,
and it's kind of important.

68
00:04:24.170 --> 00:04:24.681
Like again,

69
00:04:24.681 --> 00:04:27.425
I want you guys to know that [INAUDIBLE]
is not gonna trigger obviously.

70
00:04:31.195 --> 00:04:32.310
&gt;&gt; Aaron Frost: So what does it give me?

71
00:04:32.310 --> 00:04:34.090
It gets you less code, right,

72
00:04:34.090 --> 00:04:36.490
we talked about that,
you're gonna be able to write less stuff.

73
00:04:37.810 --> 00:04:41.880
I think that code written with
default parameters is easy to read.

74
00:04:41.880 --> 00:04:43.210
I showed you a couple of examples today.

75
00:04:43.210 --> 00:04:46.170
And just kind of cramming that stuff
up in the method signature, for

76
00:04:46.170 --> 00:04:49.459
me, makes a lot of sense,
it makes some good sense.

77
00:04:51.570 --> 00:04:53.810
And it also gives you some
improved predictability.

78
00:04:53.810 --> 00:04:57.610
Like when you look at the function,
I think having it in the signature,

79
00:04:57.610 --> 00:05:00.030
kind of tells you some of
the stuff that's going to happen.

80
00:05:00.030 --> 00:05:04.120
Versus having to read through the body and
see all the ternary code

81
00:05:04.120 --> 00:05:09.400
about what's going to happen based on if
it is in the find, it's another thing.

82
00:05:09.400 --> 00:05:11.230
I think it improves
the predictability as well.

83
00:05:12.470 --> 00:05:18.430
So you can, you don't deserve to
sign it like to a static value,

84
00:05:18.430 --> 00:05:21.970
you can just assign it with a method call.

85
00:05:21.970 --> 00:05:26.756
So if I have a function
that just logs the ID, and

86
00:05:26.756 --> 00:05:32.619
if I do use empty, I can call
getRandom and it will go out and

87
00:05:32.619 --> 00:05:38.991
try to generate some random function,
or some random number.

88
00:05:38.991 --> 00:05:41.553
&gt;&gt; Speaker 3: Can you point it
to a reference to a function, or

89
00:05:41.553 --> 00:05:43.098
does it have to be executed?

90
00:05:43.098 --> 00:05:45.475
&gt;&gt; Aaron Frost: So
it is actually a call at that,

91
00:05:45.475 --> 00:05:51.150
it's only gonna execute that method
call just as if it was in line.

92
00:05:51.150 --> 00:05:54.240
So you don't pass a pointer to
a function you pass it like

93
00:05:54.240 --> 00:05:57.116
what you want to call it then
you know you are going to.

94
00:05:57.116 --> 00:06:00.750
&gt;&gt; Speaker 3: I'm asking if you pass it
a pointer, is it going to throw an error?

95
00:06:00.750 --> 00:06:05.274
&gt;&gt; Aaron Frost: No I mean this is
the same concept as like yeah he's

96
00:06:05.274 --> 00:06:09.813
straight on this is to
ensure that I get the skins.

97
00:06:09.813 --> 00:06:13.666
&gt;&gt; Speaker 4: And then that function's
only gonna get called when that parameter

98
00:06:13.666 --> 00:06:14.552
is undefined.

99
00:06:14.552 --> 00:06:17.160
&gt;&gt; Aaron Frost: Yeah,
yeah, only on that trigger.

100
00:06:17.160 --> 00:06:21.930
Like the last slide, we talked about
the triggers, how does it get triggered?

101
00:06:21.930 --> 00:06:25.690
And only on the trigger events is
it going to actually call that.

102
00:06:25.690 --> 00:06:29.280
&gt;&gt; Speaker 3: I was assuming
that they called it immediately,

103
00:06:29.280 --> 00:06:34.230
and that it just cached value.

104
00:06:34.230 --> 00:06:38.400
Cuz it's set up like a function call and
you're giving in the return value, right?

105
00:06:38.400 --> 00:06:39.030
&gt;&gt; Aaron Frost: Yeah, yeah, yeah, yeah.

106
00:06:39.030 --> 00:06:41.020
&gt;&gt; Speaker 4: It doesn't
call once undefined?

107
00:06:41.020 --> 00:06:45.310
When you define x, it's not called
once and always uses that value,

108
00:06:45.310 --> 00:06:49.660
it's called every time a is
undefined when you call this.

109
00:06:49.660 --> 00:06:50.490
&gt;&gt; Aaron Frost: Yeah, no, totally.

110
00:06:50.490 --> 00:06:52.942
You guys, let's write this out real quick.

111
00:06:52.942 --> 00:06:58.040
So what he's saying is he figured
it would only call the default

112
00:06:58.040 --> 00:07:03.030
value once,
as opposed to every single time through.

