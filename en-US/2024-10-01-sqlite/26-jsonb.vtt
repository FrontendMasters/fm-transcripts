WEBVTT

1
00:00:00.000 --> 00:00:03.173
&gt;&gt; Brian Holt: So everything that
we just did, let's go back to this,

2
00:00:03.173 --> 00:00:05.746
that's just the select
JSON that I did here.

3
00:00:05.746 --> 00:00:07.518
Or maybe I'll just go grab it.

4
00:00:07.518 --> 00:00:09.066
Yeah, let's just go grab it from here.

5
00:00:15.277 --> 00:00:21.404
&gt;&gt; Brian Holt: So, so far, we've just
been running this query, the JSON, right?

6
00:00:21.404 --> 00:00:23.240
And we get back this whole object.

7
00:00:23.240 --> 00:00:26.080
This is actually literally how it's
being stored inside of SQLite.

8
00:00:26.080 --> 00:00:31.020
It's literally just a string that's
a valid representation of the JSON object.

9
00:00:31.020 --> 00:00:34.144
There is a better way, okay?

10
00:00:34.144 --> 00:00:39.357
So if I put JSON and
then I put B here, the B stands for

11
00:00:39.357 --> 00:00:45.431
binary, you get back this kind
of mangled looking string.

12
00:00:45.431 --> 00:00:51.374
And this is how you should actually
work with JSON in the context of SQLite.

13
00:00:51.374 --> 00:00:53.862
For that matter,
works in Postgres as well, both of them.

14
00:00:53.862 --> 00:00:57.721
The JSONB data type is superior.

15
00:00:57.721 --> 00:01:00.035
Compact sounds more smalley,

16
00:01:00.035 --> 00:01:04.488
I think that's probably
the biggest advantage in SQLite.

17
00:01:04.488 --> 00:01:08.561
And I believe there's actually advantage
too that it executes faster on those

18
00:01:08.561 --> 00:01:09.496
queries as well.

19
00:01:09.496 --> 00:01:13.518
At the cost of not being human
readable at rest, right,

20
00:01:13.518 --> 00:01:17.977
how it's stored in the database
is a little bit more mangled.

21
00:01:17.977 --> 00:01:23.572
I probably could figure out what this
all means, but I don't want to, right?

22
00:01:23.572 --> 00:01:29.436
So you can use JSON to just the normal
JSON one to kinda mess around so

23
00:01:29.436 --> 00:01:32.069
you can read the output of it.

24
00:01:32.069 --> 00:01:34.697
But when you actually
go to store something,

25
00:01:34.697 --> 00:01:38.442
make sure you're doing it in JSONB,
it's just always better.

26
00:01:38.442 --> 00:01:42.354
I believe the advice is the only time
to use JSON is either when you're

27
00:01:42.354 --> 00:01:46.817
trying to do stuff in a human readable
way within the context of your database.

28
00:01:46.817 --> 00:01:49.617
Or, I think, if you're just reading and

29
00:01:49.617 --> 00:01:52.818
you just want raw JSON
out of your database, and

30
00:01:52.818 --> 00:01:57.795
you don't wanna do any of the accessors or
manipulation of JSON objects.

31
00:01:57.795 --> 00:02:00.605
You can store it directly in JSON and
then you don't have to do any sort

32
00:02:00.605 --> 00:02:02.946
of conversion when it comes
out of the database, right?

33
00:02:02.946 --> 00:02:06.706
That would be the other reason
to use JSON, otherwise,

34
00:02:06.706 --> 00:02:09.589
100% of the time you want to use JSONB.

35
00:02:09.589 --> 00:02:12.679
But notice everything still works, right?

36
00:02:16.927 --> 00:02:18.011
&gt;&gt; Brian Holt: If I do that,

37
00:02:18.011 --> 00:02:23.855
everything that I just taught you
100% of it all works with JSONB.

38
00:02:23.855 --> 00:02:31.294
I think you can go in and do,
&gt;&gt; Brian Holt: Yeah,

39
00:02:31.294 --> 00:02:32.711
all the other functions.

40
00:02:32.711 --> 00:02:34.367
Let me just validate if that's the case.

41
00:02:34.367 --> 00:02:41.214
But if we go grab one of these,
let's do this one.

42
00:02:41.214 --> 00:02:45.476
There's a JSONB, replace JSONB,
remove JSONB insert, I think.

43
00:02:49.440 --> 00:02:53.986
&gt;&gt; Brian Holt: I don't think this will
work, because that's not a JSONB object,

44
00:02:53.986 --> 00:02:57.874
it actually might just work,
let's just with a JSON.

45
00:02:57.874 --> 00:03:00.917
No, look, it did work, and
it gives you back JSONB, cool, right?

46
00:03:00.917 --> 00:03:04.106
So all of those still work, you just
add the B instead of just the JSON.

47
00:03:08.866 --> 00:03:12.860
&gt;&gt; Brian Holt: Cool, so that's great.

48
00:03:12.860 --> 00:03:17.176
Let's go make a user table and
start writing some queries,

49
00:03:17.176 --> 00:03:19.519
yeah, do some real life stuff.

50
00:03:19.519 --> 00:03:22.558
I made a table here for
you with just a bunch of JSON,

51
00:03:22.558 --> 00:03:26.405
notice they're all using JSONB,
just copy and paste all that.

52
00:03:26.405 --> 00:03:33.286
Again, nobody wants to watch me write any
of that, and I frankly don't want to.

53
00:03:33.286 --> 00:03:39.306
Okay, this just created a table called
Users, and it has email and data.

54
00:03:39.306 --> 00:03:43.094
So email is gonna be their email
address that we can query by it.

55
00:03:43.094 --> 00:03:50.196
And the data is going to be all the data
in their grab bag of data, right?

56
00:03:50.196 --> 00:03:54.156
And you can see I added
admin on some of these.

57
00:03:54.156 --> 00:03:58.859
So there's kind of a grab bag of various
different properties of them, names, and

58
00:03:58.859 --> 00:04:01.495
then they have various
different favorites.

59
00:04:03.827 --> 00:04:07.436
&gt;&gt; Brian Holt: Now I will tell you one of
my favorite things about GitHub Copilot is

60
00:04:07.436 --> 00:04:10.281
it's really good at generating test data,
right?

61
00:04:10.281 --> 00:04:15.139
I just typed into Copilot, it generated
me data that looks like this and has so

62
00:04:15.139 --> 00:04:20.175
many things and give me some variants,
and it just generated all of that for me.

63
00:04:20.175 --> 00:04:21.777
I used to type this stuff by hand.

64
00:04:21.777 --> 00:04:24.137
The one that I did for
the complete intro to SQL,

65
00:04:24.137 --> 00:04:26.617
I wrote the entire
ingredients database by hand.

66
00:04:26.617 --> 00:04:30.996
That took me two days of just writing
stupid, repetitive queries, right?

67
00:04:30.996 --> 00:04:35.895
So anyway, that's my biggest plug for AI
encoding is that it's spectacular at that

68
00:04:35.895 --> 00:04:38.107
and terrible at a lot of other things.

69
00:04:38.107 --> 00:04:39.296
So now we have a whole database.

70
00:04:39.296 --> 00:04:46.624
So if I say SELECT data from users,
what do you expect to get back?

71
00:04:46.624 --> 00:04:51.710
Whole mess of stuff,
&gt;&gt; Brian Holt: Right,

72
00:04:51.710 --> 00:04:57.538
this is JSONB representation of all of
our data that we inserted into that.

73
00:04:57.538 --> 00:05:01.548
That's good, that's exactly what we want,
this is not meant to be human readable.

74
00:05:01.548 --> 00:05:04.481
And my biggest plea for
you is never, ever,

75
00:05:04.481 --> 00:05:08.460
ever try to directly manipulate
the JSONB format, right?

76
00:05:08.460 --> 00:05:12.506
Don't try and go in there and manipulate
Led Zeppelin to be something else because

77
00:05:12.506 --> 00:05:15.907
you are going to get it wrong, and
it's using special characters and

78
00:05:15.907 --> 00:05:19.033
other stuff like that,
you're just never gonna get it right.

79
00:05:19.033 --> 00:05:23.846
Always use the JB within
a context of SQLite, please,

80
00:05:23.846 --> 00:05:29.405
as you're potentially being my
future coworkers, I beg you.

81
00:05:32.599 --> 00:05:36.406
&gt;&gt; Brian Holt: So what happens if I
wanted to get everyone's first and

82
00:05:36.406 --> 00:05:38.323
last name from this table?

83
00:05:41.230 --> 00:05:47.465
&gt;&gt; Brian Holt: SELECT data 'name'.

84
00:05:52.697 --> 00:05:55.989
&gt;&gt; Brian Holt: One more time, 'first,

85
00:05:58.889 --> 00:06:02.368
&gt;&gt; Brian Holt: data 'name',

86
00:06:05.126 --> 00:06:12.801
&gt;&gt; Brian Holt: 'last' FROM users.

87
00:06:17.500 --> 00:06:20.036
&gt;&gt; Brian Holt: What's going on there?

88
00:06:20.036 --> 00:06:23.161
&gt;&gt; Speaker 2: You didn't close
the single quote on first.

89
00:06:23.161 --> 00:06:24.419
&gt;&gt; Brian Holt: Dumb, let's try it again.

90
00:06:27.554 --> 00:06:29.873
&gt;&gt; Brian Holt: You were correct,
all right, let's try that again.

91
00:06:29.873 --> 00:06:34.510
SELECT data 'name'.

92
00:06:37.815 --> 00:06:41.210
&gt;&gt; Brian Holt: Double there,

93
00:06:41.210 --> 00:06:46.694
'first' data 'name'

94
00:06:46.694 --> 00:06:51.656
'last' FROM users,

95
00:06:51.656 --> 00:06:54.801
there you go.

96
00:06:54.801 --> 00:06:56.663
So your queries are just gonna
end up looking like that.

97
00:06:56.663 --> 00:07:01.099
You just have accessors directly and where
the ones you're getting out of there.

98
00:07:01.099 --> 00:07:02.522
This comes back as some
weird mangled name.

99
00:07:02.522 --> 00:07:06.898
If you pass it back to nodes
you'll do it like as this, right,

100
00:07:06.898 --> 00:07:08.930
as first, as last, right?

101
00:07:08.930 --> 00:07:13.424
And then this will be named more
appropriately for what you're querying.

102
00:07:13.424 --> 00:07:20.366
So what if you want to find
less engaged users, right?

103
00:07:20.366 --> 00:07:24.426
You would look at your users table,
you would look at the favorites array, and

104
00:07:24.426 --> 00:07:27.809
you'd find people that have one or
zero favorites in your table,

105
00:07:27.809 --> 00:07:30.409
and you'd identify those
as less engaged users.

106
00:07:30.409 --> 00:07:36.998
You could write a query where you
essentially use the JSON link to get that.

107
00:07:36.998 --> 00:07:41.332
So I have that same query that we were
running before, which is this one.

108
00:07:44.592 --> 00:07:49.251
&gt;&gt; Brian Holt: Okay, that's giving
us all of the users in our table,

109
00:07:49.251 --> 00:07:54.232
and all we have to do is we
say WHERE json_array_length.

110
00:07:54.232 --> 00:07:56.509
We don't have to do json_B here,

111
00:07:56.509 --> 00:08:00.523
cuz json_array_length can take json_A or
json_B Data.

112
00:08:00.523 --> 00:08:06.699
The name of the column and
the thing that we want out of it,

113
00:08:06.699 --> 00:08:11.858
and we would just say
where that is less than 2.

114
00:08:14.489 --> 00:08:15.992
&gt;&gt; Brian Holt: And it's just Bob Smith.

115
00:08:15.992 --> 00:08:20.624
So we can send 1,000 emails to Bob
saying hey, Bob, like something else.

