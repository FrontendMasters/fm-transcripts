WEBVTT

1
00:00:00.010 --> 00:00:06.505
&gt;&gt; Brian Holt: The only file that you
need to modify here is this invoice.js.

2
00:00:06.505 --> 00:00:08.450
You're gonna connect to the database here.

3
00:00:08.450 --> 00:00:12.984
The name of the file is data.db, so

4
00:00:12.984 --> 00:00:17.519
you're basically just gonna say,

5
00:00:17.519 --> 00:00:22.366
const db = new sqlite3.database.

6
00:00:22.366 --> 00:00:25.891
And you're gonna do data.db,
because it is in the same directory.

7
00:00:25.891 --> 00:00:29.099
You can also do dot slash,
if that makes you feel any better.

8
00:00:29.099 --> 00:00:31.598
And now you have a DB object.

9
00:00:31.598 --> 00:00:38.590
One thing, I know someone's gonna wanna
come in here and say database like this.

10
00:00:38.590 --> 00:00:41.223
I don't believe that this will work,

11
00:00:41.223 --> 00:00:46.506
cuz I don't think SQLite3 is ES
module-aware, if I remember correctly.

12
00:00:46.506 --> 00:00:49.312
You might correct me, but
I think that's the case.

13
00:00:51.431 --> 00:00:54.558
&gt;&gt; Brian Holt: Okay,
your code is gonna go here.

14
00:00:54.558 --> 00:00:57.475
And what I want you to do
here is you're going to,

15
00:00:57.475 --> 00:01:01.048
I gave you the ID that's already
coming back from Fastify.

16
00:01:01.048 --> 00:01:04.225
So that's this number here.

17
00:01:04.225 --> 00:01:10.479
And you're gonna do at least a couple of
queries to get everything from the invoice

18
00:01:10.479 --> 00:01:16.822
table, and then you're gonna have to get
everything from the invoice line table,

19
00:01:16.822 --> 00:01:22.647
which is where all of the various
different line items and every invoice is.

20
00:01:22.647 --> 00:01:27.789
You're then going to aggregate it into
an objects that look like this, right?

21
00:01:27.789 --> 00:01:32.084
So this is the object
I want you to return.

22
00:01:32.084 --> 00:01:37.628
You're gonna have an invoice object
that's going to have the ID,

23
00:01:37.628 --> 00:01:44.873
date, address, city, state, I don't know
where that is, was on a different line.

24
00:01:44.873 --> 00:01:49.961
State, city, and state for Dublin, I guess
for the same thing, country, Ireland.

25
00:01:49.961 --> 00:01:55.055
Ireland has no postal code, but
if you're coming from Massachusetts,

26
00:01:55.055 --> 00:01:58.237
it will, the total,
which will be a number.

27
00:01:58.237 --> 00:02:02.490
And then it's gonna have the results
from the invoice line table, and

28
00:02:02.490 --> 00:02:06.817
it's going to be an array of these
objects with unit price, quantity,

29
00:02:06.817 --> 00:02:09.579
track name, album title, and artist name.

30
00:02:12.240 --> 00:02:16.026
&gt;&gt; Brian Holt: Notice that these are not
capitalized, so I'm gonna suggest that you

31
00:02:16.026 --> 00:02:19.954
might use ads in your queries to get
these to be the correct names as well.

32
00:02:22.477 --> 00:02:25.639
&gt;&gt; Brian Holt: And then down here
I already send the reply.send.

33
00:02:25.639 --> 00:02:30.431
But you're gonna have to populate this
invoice object and this lines object.

34
00:02:33.921 --> 00:02:36.498
&gt;&gt; Brian Holt: And do I call done for you?

35
00:02:36.498 --> 00:02:38.178
I do, so you don't have to
worry about calling done.

36
00:02:42.669 --> 00:02:46.636
&gt;&gt; Brian Holt: I would love for
you to take a running leap at this,

37
00:02:46.636 --> 00:02:47.871
give it a shot.

38
00:02:47.871 --> 00:02:49.621
It's likely possible, it is.

39
00:02:49.621 --> 00:02:51.678
It's possible to do this all in one query.

40
00:02:51.678 --> 00:02:54.993
It would be weird and
gross to do it that way, so please don't.

41
00:02:54.993 --> 00:02:57.915
I would not write this as one query,

42
00:02:57.915 --> 00:03:02.116
I would definitely write
this as two plus queries.

43
00:03:02.116 --> 00:03:05.204
Likely two,
I can't imagine writing three for this.

44
00:03:05.204 --> 00:03:08.009
And then let's pop back in here.

45
00:03:08.009 --> 00:03:11.568
I think I have to tell you a little
bit about how SQLite3 works.

46
00:03:11.568 --> 00:03:16.679
If you wanna see what these look like,
you can hit the endpoint for invoice

47
00:03:16.679 --> 00:03:22.471
complete here, invoice dash complete,
and it'll show you what this looks like.

48
00:03:22.471 --> 00:03:26.271
I just wanted you to see what a properly
formatted query would look like.

49
00:03:28.757 --> 00:03:32.583
&gt;&gt; Brian Holt: This is what
it should return to you.

50
00:03:32.583 --> 00:03:38.460
In fact, I think I can I just,
can I just say in the frontend,

51
00:03:38.460 --> 00:03:42.284
and then you can see what it looks like?

52
00:03:42.284 --> 00:03:46.719
Invoice-complete.

53
00:03:52.724 --> 00:03:53.702
&gt;&gt; Brian Holt: Yeah, there you go.

54
00:03:53.702 --> 00:03:56.837
So if you change it to use
invoice-complete instead of invoice,

55
00:03:56.837 --> 00:04:00.485
you'll actually be able to see what
these things look like at the frontend,

56
00:04:00.485 --> 00:04:01.739
they'll look like this.

57
00:04:01.739 --> 00:04:04.506
I don't worry about area handling or
anything like that,

58
00:04:04.506 --> 00:04:07.109
you can assume that they're
well formatted queries.

59
00:04:07.109 --> 00:04:08.551
Not interested in that right now,

60
00:04:08.551 --> 00:04:11.044
I'm really just interested in
you querying the database.

61
00:04:11.044 --> 00:04:14.841
If you're not familiar with Node, and

62
00:04:14.841 --> 00:04:20.136
specifically old Node,
which is how SQLite3 works,

63
00:04:20.136 --> 00:04:24.753
there are Nodebacks, they're not promises.

64
00:04:24.753 --> 00:04:28.585
You can't await answers,
you have to use callbacks, right?

65
00:04:28.585 --> 00:04:32.640
There is docs here, if you click here,
this will take you to the official docs.

66
00:04:32.640 --> 00:04:38.900
This particular official SDK or
library is maintained

67
00:04:38.900 --> 00:04:44.215
by the people at Ghost,
which is really cool.

68
00:04:44.215 --> 00:04:47.059
So that's there available for you.

69
00:04:47.059 --> 00:04:49.542
Again, SQLite3,
it's cuz it's version 3 of SQLite.

70
00:04:51.934 --> 00:04:54.597
&gt;&gt; Brian Holt: I showed you how to
do the connection there already.

71
00:04:54.597 --> 00:04:57.634
So the ones that you're probably
gonna be most interested in,

72
00:04:57.634 --> 00:05:00.228
you're gonna be interested
in probably in db.all.

73
00:05:00.228 --> 00:05:03.070
That's one that I tended to use,
but you can do get, or each, or

74
00:05:03.070 --> 00:05:04.823
there's a bunch of different things.

75
00:05:04.823 --> 00:05:08.050
Each is basically map for the result set.

76
00:05:08.050 --> 00:05:13.013
Get, if I remember correctly,
only one line at a time, and

77
00:05:13.013 --> 00:05:16.009
you can basically iterate as well.

78
00:05:16.009 --> 00:05:19.101
And then you use run for
updates and deletes, right?

79
00:05:19.101 --> 00:05:22.734
So something that you're firing off
a query and you don't care what you get

80
00:05:22.734 --> 00:05:25.800
back like you would with an update,
you would use run for that.

81
00:05:25.800 --> 00:05:29.870
I think in my code,
I just used all for both of them.

82
00:05:29.870 --> 00:05:32.858
I did, yeah, so up to you.

83
00:05:32.858 --> 00:05:35.917
Nodebacks, Node.js style callbacks.

84
00:05:35.917 --> 00:05:40.494
If you know what they are, you can pause
or fast forward or something like that.

85
00:05:40.494 --> 00:05:43.761
But basically,
you're gonna give it the query.

86
00:05:43.761 --> 00:05:48.563
You're gonna give it, we'll talk about
the array here in just a second,

87
00:05:48.563 --> 00:05:49.885
but an empty array.

88
00:05:49.885 --> 00:05:54.450
And then this function is called
a Nodeback or a Node JSL callback,

89
00:05:54.450 --> 00:05:56.662
where it's always a function.

90
00:05:56.662 --> 00:05:59.399
The first parameter is always
if there's an error, and

91
00:05:59.399 --> 00:06:00.981
the second thing is the result.

92
00:06:00.981 --> 00:06:04.719
Then you can always say, if error,
handle all of my errors here.

93
00:06:04.719 --> 00:06:06.780
And then if you get
past this if statement,

94
00:06:06.780 --> 00:06:10.116
then you know that there's no error,
and you can keep working on it.

95
00:06:10.116 --> 00:06:12.585
So that rows is valid.

96
00:06:12.585 --> 00:06:15.817
Back before promises,
this was how everything was done in Node.

97
00:06:15.817 --> 00:06:22.131
Was pleasant enough,
if you're not mad about using Nodebacks.

98
00:06:22.131 --> 00:06:25.041
So that's that.

99
00:06:25.041 --> 00:06:28.027
This is the code that'll run
once the query comes back.

100
00:06:28.027 --> 00:06:32.906
Let's talk about SQL injection for
just a second because we're

101
00:06:32.906 --> 00:06:37.254
writing code now and
SQL injection's a very real thing.

102
00:06:37.254 --> 00:06:39.823
What is wrong with this query right here?

103
00:06:44.993 --> 00:06:46.851
&gt;&gt; Brian Holt: Well, what's that?

104
00:06:46.851 --> 00:06:49.418
&gt;&gt; Speaker 1: I don't know if you
were asking, but [CROSSTALK] I'm just

105
00:06:49.418 --> 00:06:52.905
saying it's not parameterized,
you could just stick whatever you wanted.

106
00:06:52.905 --> 00:06:54.822
&gt;&gt; Brian Holt: That's exactly right.

107
00:06:54.822 --> 00:07:00.126
So this Git ID from user, assuming that
a user can type whatever they want there,

108
00:07:00.126 --> 00:07:05.196
they give you an ID of drop-table users
like this, this would totally work.

109
00:07:05.196 --> 00:07:09.194
You can run two queries at the same
time if you do the db.get or db.run or

110
00:07:09.194 --> 00:07:10.468
something like that.

111
00:07:10.468 --> 00:07:15.028
And so if you did this, and they put
in something like this, 15 drop-table

112
00:07:15.028 --> 00:07:19.610
customer, all of a sudden you have lost
your entire customer table, right?

113
00:07:19.610 --> 00:07:25.289
This is called SQL injection, cuz this is
the query that would actually get run.

114
00:07:25.289 --> 00:07:29.077
It would be two queries, the select star,
and then drop-table customer.

115
00:07:31.256 --> 00:07:33.128
&gt;&gt; Brian Holt: SQL injection,
extremely common.

116
00:07:33.128 --> 00:07:38.039
I think I read one time that SQL
injection is the most common vector of

117
00:07:38.039 --> 00:07:39.598
attack on websites.

118
00:07:39.598 --> 00:07:40.764
So how do you avoid this?

119
00:07:40.764 --> 00:07:42.489
It's extremely simple.

120
00:07:42.489 --> 00:07:47.490
You do select star from track where
track ID equals question mark,

121
00:07:47.490 --> 00:07:50.089
and then you just provide ID here.

122
00:07:50.089 --> 00:07:53.905
And anytime that it finds the question
mark, it'll just replace it.

123
00:07:53.905 --> 00:07:57.591
And you can be guaranteed that they've
covered all of the corner cases.

124
00:07:57.591 --> 00:07:58.982
They've done a really good job,

125
00:07:58.982 --> 00:08:02.371
it's well tested that you're not gonna
get SQL-injected if you do it this way.

126
00:08:05.034 --> 00:08:09.885
&gt;&gt; Brian Holt: Okay, you can also use
this way as well where you identify them

127
00:08:09.885 --> 00:08:13.801
as names, right, and
then you give it an object,

128
00:08:13.801 --> 00:08:17.738
and it will replace the objects instead,
right?

129
00:08:17.738 --> 00:08:20.760
Cuz here if you have five
different question marks,

130
00:08:20.760 --> 00:08:22.827
it's gonna replace them in order.

131
00:08:22.827 --> 00:08:25.439
So you would have five different
parameters in there as well.

132
00:08:28.243 --> 00:08:31.351
&gt;&gt; Brian Holt: Both are fine, I use
question marks when I have one or two,

133
00:08:31.351 --> 00:08:33.393
I use the object for everything else.

134
00:08:33.393 --> 00:08:34.469
That's up to you.

135
00:08:37.363 --> 00:08:38.218
&gt;&gt; Brian Holt: Okay.

136
00:08:41.191 --> 00:08:44.976
&gt;&gt; Brian Holt: Yeah, never, ever, ever put
user input directly into a SQL statement.

137
00:08:44.976 --> 00:08:50.485
If you learn one thing from this course,
it's that, right?

138
00:08:50.485 --> 00:08:53.472
This is how entire companies get ruined.

139
00:08:53.472 --> 00:08:57.008
This is why if you go
to haveibeenpwned.com,

140
00:08:57.008 --> 00:08:59.736
your stuff is everywhere, right?

141
00:08:59.736 --> 00:09:04.710
Probably half of it is from SQL injection,
the other half is from social engineering.

142
00:09:07.372 --> 00:09:10.782
&gt;&gt; Brian Holt: Okay, any questions
about the Node.js driver of SQLite?

143
00:09:12.669 --> 00:09:16.101
&gt;&gt; Speaker 1: Again, it does not
have promises, which I apologize.

144
00:09:16.101 --> 00:09:18.796
&gt;&gt; Brian Holt: I don't use
this one directly myself,

145
00:09:18.796 --> 00:09:23.135
I use one that has promises,
right, because I like promises.

146
00:09:23.135 --> 00:09:26.583
I'm fine if you feel like you wanna rip it
out and replace it with something else,

147
00:09:26.583 --> 00:09:27.557
totally cool with me.

148
00:09:27.557 --> 00:09:32.076
But I wanted you to use the OG because
it is still the most popular one.

149
00:09:32.076 --> 00:09:35.636
So again, you can click there,
that's the file you're gonna edit.

150
00:09:35.636 --> 00:09:41.558
You already went through that quite a bit,
so you've been explained to that.

151
00:09:41.558 --> 00:09:43.038
It's a Fastify app, but doesn't matter.

152
00:09:43.038 --> 00:09:45.139
It's written in HTMX and CSS.

153
00:09:45.139 --> 00:09:47.655
Again, you shouldn't have
to touch any frontend code.

154
00:09:47.655 --> 00:09:50.463
I don't care if this is
the most optimized code.

155
00:09:50.463 --> 00:09:54.998
The code that I wrote was intentionally
simple and not the most optimized, so

156
00:09:54.998 --> 00:09:57.528
I'm encouraging you to just make it work.

157
00:09:57.528 --> 00:10:03.756
For example, if you want to nest
callbacks, totally okay with that.

158
00:10:03.756 --> 00:10:08.263
You can make multiple queries, you can
make single query, all of it's fine.

159
00:10:08.263 --> 00:10:12.224
I've installed SQLite3 for you already, so
you don't have to MPM-install anything.

160
00:10:12.224 --> 00:10:14.274
The point here is to learn and experiment.

161
00:10:14.274 --> 00:10:17.265
So give it a shot, and then we will
come back and we'll write it together,

162
00:10:17.265 --> 00:10:18.630
we'll go through the solution.

