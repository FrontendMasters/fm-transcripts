WEBVTT

1
00:00:00.127 --> 00:00:04.538
&gt;&gt; Brian Holt: So what if people want to
find all customer invoices using a certain

2
00:00:04.538 --> 00:00:05.652
email address?

3
00:00:05.652 --> 00:00:08.964
So we haven't looked at invoices yet,
I don't think,

4
00:00:08.964 --> 00:00:10.873
it's invoice is the name of it.

5
00:00:15.293 --> 00:00:17.595
&gt;&gt; Brian Holt: You can see
this is a invoice table.

6
00:00:17.595 --> 00:00:23.103
There's an ID, Customer ID,
it's a foreign key that refers something

7
00:00:23.103 --> 00:00:28.086
to the customer table, date,
address, all that kind of stuff.

8
00:00:28.086 --> 00:00:35.371
And we wanna know all invoices
that come from a certain email.

9
00:00:35.371 --> 00:00:40.654
That email comes from customer.

10
00:00:40.654 --> 00:00:45.567
So schema customer.

11
00:00:45.567 --> 00:00:50.662
You can see email is right there, right?

12
00:00:50.662 --> 00:00:55.796
So how do we reference that?

13
00:00:55.796 --> 00:00:56.663
So how do we filter that?

14
00:00:56.663 --> 00:00:58.211
Right, we have the invoice table.

15
00:00:58.211 --> 00:01:01.754
We wanna get all the invoices that
belong to a certain customer.

16
00:01:01.754 --> 00:01:04.480
I've already given the tools
to do it one way, right?

17
00:01:04.480 --> 00:01:07.212
Which is joins, right?

18
00:01:07.212 --> 00:01:08.882
We can just join the tables and
filter on there.

19
00:01:08.882 --> 00:01:10.281
That's exactly what this does.

20
00:01:14.378 --> 00:01:15.422
&gt;&gt; Brian Holt: That's a little small.

21
00:01:20.602 --> 00:01:27.506
&gt;&gt; Brian Holt: Maybe we just
want to just do invoice ID for

22
00:01:27.506 --> 00:01:33.436
now, i.invoiceid and c.email.

23
00:01:36.534 --> 00:01:41.771
&gt;&gt; Brian Holt: Right, so
you can see these are all of the invoices

24
00:01:41.771 --> 00:01:46.772
that we have that
are from hholy@gmail.com.

25
00:01:46.772 --> 00:01:48.517
Pretty cool,
we could definitely be done there.

26
00:01:48.517 --> 00:01:52.124
There's properly zero things
wrong with doing it this way.

27
00:01:52.124 --> 00:01:55.373
So if you're happy with that,
then just skip this part of the course.

28
00:01:55.373 --> 00:01:56.013
Now I'm just kidding.

29
00:01:56.013 --> 00:02:02.736
You do wanna learn subqueries, but
I'm very happy with this query.

30
00:02:02.736 --> 00:02:06.218
However, we're looking for
just one email, right?

31
00:02:06.218 --> 00:02:08.668
We actually don't need everything
in the customer table.

32
00:02:08.668 --> 00:02:10.659
We just need one, right?

33
00:02:10.659 --> 00:02:15.656
And sometimes it can kind of be a pain in
the butt to think through all of the join,

34
00:02:15.656 --> 00:02:16.190
right?

35
00:02:16.190 --> 00:02:20.987
Okay, I have this table, this ID, this
table refers to this ID over here, just,

36
00:02:20.987 --> 00:02:22.118
join them on this.

37
00:02:22.118 --> 00:02:24.733
Also that results that can be enormous,
right?

38
00:02:24.733 --> 00:02:31.574
And then it's kind of big to filter all of
that down, to join everything together,

39
00:02:31.574 --> 00:02:36.774
just to filter it back down,
especially if it's not indexed.

40
00:02:36.774 --> 00:02:38.328
Let's just go different.

41
00:02:38.328 --> 00:02:41.265
It's gonna have a different
performance profile.

42
00:02:41.265 --> 00:02:44.273
But the jury's out if it's better, right?

43
00:02:44.273 --> 00:02:45.917
But in certain cases it would be better.

44
00:02:45.917 --> 00:02:49.373
Certain cases,
it's probably worse as well.

45
00:02:49.373 --> 00:02:53.860
So we're gonna,

46
00:02:53.860 --> 00:03:02.239
select invoice ID from invoice.

47
00:03:02.239 --> 00:03:06.830
Where customer ID equals,
opening parentheses, and

48
00:03:06.830 --> 00:03:11.835
then we're gonna just write
a second query inside of here.

49
00:03:11.835 --> 00:03:17.643
Select customer ID from customer where

50
00:03:17.643 --> 00:03:25.035
email equals whatever
email we're looking for,

51
00:03:25.035 --> 00:03:31.196
hholy@gmail.com close parentheses.

52
00:03:31.196 --> 00:03:32.462
There you go.

53
00:03:32.462 --> 00:03:35.109
So this should work as well, right?

54
00:03:35.109 --> 00:03:38.059
We got all of the things back here.

55
00:03:39.806 --> 00:03:42.638
&gt;&gt; Brian Holt: So what is this?

56
00:03:42.638 --> 00:03:46.135
This is a subquery,
it's going to run this query first.

57
00:03:46.135 --> 00:03:51.111
Whatever gets selected from this
CustomerId is then going to be given

58
00:03:51.111 --> 00:03:51.807
to this.

59
00:03:54.282 --> 00:03:56.613
&gt;&gt; Brian Holt: Sometimes it might be
better, sometimes it might be worse.

60
00:03:56.613 --> 00:03:59.135
In this case, it doesn't matter,

61
00:03:59.135 --> 00:04:03.010
because our results just
really not that big, right?

62
00:04:03.010 --> 00:04:07.843
So either one of these is totally,
totally fine.

63
00:04:07.843 --> 00:04:11.707
I could see this in scenarios where this
is an indexed query, where it's really,

64
00:04:11.707 --> 00:04:12.383
really fast.

65
00:04:12.383 --> 00:04:16.478
And then we're only getting a couple
things out of this table, and maybe that

66
00:04:16.478 --> 00:04:21.155
that part's inefficient, I would see this
being a superior way of doing that, right?

67
00:04:21.155 --> 00:04:24.117
Maybe you need to reference a bunch of
stuff from both tables, in which case,

68
00:04:24.117 --> 00:04:25.865
yeah, you'd probably need to join things.

69
00:04:25.865 --> 00:04:28.926
It gets really weird and complicated
when you're trying to do multiple

70
00:04:28.926 --> 00:04:30.770
kind of things together with sub queries.

71
00:04:33.793 --> 00:04:37.066
&gt;&gt; Brian Holt: But just know there are a
tool out there sometimes two queries is

72
00:04:37.066 --> 00:04:38.002
better than one.

73
00:04:38.002 --> 00:04:39.813
Sometimes they're not.

74
00:04:39.813 --> 00:04:43.551
Actually, I don't put
this under my course, but

75
00:04:43.551 --> 00:04:48.713
there's actually a kind of idea in
SQLite that running lots of little

76
00:04:48.713 --> 00:04:53.439
fast queries is better than
running one really big slow query.

77
00:04:53.439 --> 00:04:56.468
And that's a bit
counterintuitive especially for

78
00:04:56.468 --> 00:04:58.518
old school database developers.

79
00:04:58.518 --> 00:05:02.177
Generally, the thought was always
one query, one result set,

80
00:05:02.177 --> 00:05:03.954
don't run multiple queries.

81
00:05:03.954 --> 00:05:07.207
And the reason for that is that you have
a server here, and you have your client

82
00:05:07.207 --> 00:05:09.859
over here, and if you're sending
lots of stuff over the wire,

83
00:05:09.859 --> 00:05:13.186
it's always network latency that's
the slowest part of your stack, right?

84
00:05:13.186 --> 00:05:16.785
Because you can't go faster
than the speed of light.

85
00:05:16.785 --> 00:05:21.751
With SQLite it's not a problem, cuz
you're just on the same computer, right?

86
00:05:21.751 --> 00:05:24.502
You're going at the speed of electrons,
right?

87
00:05:24.502 --> 00:05:27.595
Just going across your CPU.

88
00:05:27.595 --> 00:05:32.493
So there's a bit of a paradigm shift
there with thinking about SQLite

89
00:05:32.493 --> 00:05:36.308
running locally that lots
of little queries is good.

90
00:05:36.308 --> 00:05:37.978
And they state that in their docs.

91
00:05:40.691 --> 00:05:44.100
&gt;&gt; Brian Holt: So in which case,
this might be faster.

92
00:05:44.100 --> 00:05:47.791
It's always gonna be a big,
it depends, right?

93
00:05:47.791 --> 00:05:53.823
And the other thing I'm always gonna
tell you is, don't try and guess, right?

94
00:05:53.823 --> 00:05:55.987
Always try and wait for
it to become a problem before you try and

95
00:05:55.987 --> 00:05:56.699
solve the problem.

96
00:05:56.699 --> 00:05:58.729
Premature optimization, you're always
gonna solve the wrong problem.

