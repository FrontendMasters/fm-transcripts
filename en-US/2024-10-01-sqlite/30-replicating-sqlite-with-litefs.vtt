WEBVTT

1
00:00:00.000 --> 00:00:04.287
&gt;&gt; Brian Holt: So,
I want to show you how to do this.

2
00:00:04.287 --> 00:00:09.433
So let's go ahead and
get back into my notes here.

3
00:00:09.433 --> 00:00:12.454
Let's see if I can make sure
I cover everything, yeah,

4
00:00:12.454 --> 00:00:14.200
it's eventually consistent.

5
00:00:14.200 --> 00:00:18.647
As you might imagine, if you have your
blog and it's on a secondary node and

6
00:00:18.647 --> 00:00:21.132
you try and write to it and
it passes it up.

7
00:00:21.132 --> 00:00:24.170
Gets written and passed back down,
it's time, right?

8
00:00:24.170 --> 00:00:28.293
That's a lot of network travel
that's gonna be going on there, so

9
00:00:28.293 --> 00:00:32.209
it's a little eventually
consistent from that perspective.

10
00:00:32.209 --> 00:00:36.814
Yeah, for most people, that's not probably
if you're just tracking visitors on

11
00:00:36.814 --> 00:00:41.701
a blog, 200 milliseconds, a delay on that
kind of stuff is perfectly fine, right?

12
00:00:41.701 --> 00:00:46.244
If you're doing like life-saving medicine,
maybe don't use this product,

13
00:00:46.244 --> 00:00:51.149
maybe use something different, right,
where the latency might make a difference.

14
00:00:51.149 --> 00:00:55.595
Yeah, if you need strong consistency,
this is not it.

15
00:00:56.744 --> 00:00:58.121
&gt;&gt; Brian Holt: So let's do it.

16
00:00:58.121 --> 00:01:00.029
Let's try it, right?

17
00:01:00.029 --> 00:01:03.289
I had to retool the code a little bit.

18
00:01:03.289 --> 00:01:08.001
So, I need you to clone
another version of this repo,

19
00:01:08.001 --> 00:01:12.001
which I have called sqlite-apps-litefs.

20
00:01:12.001 --> 00:01:15.926
Quite similar, but there's a couple of key
changes here and I didn't want everyone to

21
00:01:15.926 --> 00:01:19.598
have to sit there and write code that
wasn't really that much more interesting.

22
00:01:19.598 --> 00:01:26.489
I want you to kind of experience
more what's possible with litefs.

23
00:01:26.489 --> 00:01:28.683
All right,
make sure that I have everything here.

24
00:01:28.683 --> 00:01:30.030
Do I have my data in here?

25
00:01:30.030 --> 00:01:33.379
I do.
So, this is almost the same code, really,

26
00:01:33.379 --> 00:01:34.597
really similar.

27
00:01:38.481 --> 00:01:39.892
&gt;&gt; Brian Holt: What is critical here,

28
00:01:39.892 --> 00:01:43.359
is there's a lot of docker stuff
that I put in here for you.

29
00:01:43.359 --> 00:01:46.285
So there's a Dockerfile
to build this correctly.

30
00:01:46.285 --> 00:01:50.283
There's a docker-compose file that
actually connects everything together.

31
00:01:50.283 --> 00:01:52.757
And then I have an nginx
container in here,

32
00:01:52.757 --> 00:01:57.434
which is basically just running ingress
proxy, and it does a round robin between

33
00:01:57.434 --> 00:02:01.583
all of the various different light
FS servers that you're gonna have.

34
00:02:05.258 --> 00:02:08.220
&gt;&gt; Brian Holt: That's really it.

35
00:02:08.220 --> 00:02:12.661
You can maybe state it
a little bit more simply.

36
00:02:12.661 --> 00:02:15.567
We have a primary server,

37
00:02:15.567 --> 00:02:20.850
which is going to be
the actual primary litefs,

38
00:02:20.850 --> 00:02:27.335
sqlite node is primary true,
you see that there, right?

39
00:02:27.335 --> 00:02:29.413
And then you have a replica1.

40
00:02:29.413 --> 00:02:33.385
I'm only gonna have one replica,
just to show you like a one to one.

41
00:02:33.385 --> 00:02:34.948
I try to make this as simple as possible.

42
00:02:34.948 --> 00:02:38.319
You can certainly have up to 100 or
1000 or something like that.

43
00:02:38.319 --> 00:02:42.313
You'd have to retool this a little bit to
be a bit more smart about what port things

44
00:02:42.313 --> 00:02:43.625
get listened on, right?

45
00:02:43.625 --> 00:02:47.400
You'd have to have something that
would do a better job of that.

46
00:02:47.400 --> 00:02:55.457
Otherwise, nothing else here is
particularly interesting, okay?

47
00:02:55.457 --> 00:02:59.418
Yeah, let's go into talk
about docker-compose,

48
00:02:59.418 --> 00:03:02.663
you don't have to write any code for this.

49
00:03:02.663 --> 00:03:06.518
I just want you to stand it
up if you're following along.

50
00:03:06.518 --> 00:03:08.651
I do have a whole segment
on docker-compose,

51
00:03:08.651 --> 00:03:10.137
if you're interested on that.

52
00:03:10.137 --> 00:03:15.276
That's on my other course, Reason nginx,
you have the primary and secondaries.

53
00:03:15.276 --> 00:03:18.715
Yeah, I wanted to show
you in invoice here.

54
00:03:18.715 --> 00:03:21.880
Notice that we're reading from litefs.

55
00:03:21.880 --> 00:03:26.408
This is the actual shared file directory,

56
00:03:26.408 --> 00:03:30.321
file system that they're sharing.

57
00:03:30.321 --> 00:03:33.945
One thing to know about fuse or
at least the litefs' version of it,

58
00:03:33.945 --> 00:03:38.250
you can't nest directories any further,
it's all one top level directory.

59
00:03:38.250 --> 00:03:41.652
That bit me a little bit,
that's why I'm sharing it with you.

60
00:03:41.652 --> 00:03:47.099
And feel free to look at the Dockerfile
again, pretty standard stuff.

61
00:03:47.099 --> 00:03:52.092
Interesting things here is fuse3 and
sqlite that we're pulling in here and

62
00:03:52.092 --> 00:03:56.461
we're getting it from, yeah,
that's that's essentially it,

63
00:03:56.461 --> 00:03:58.503
that's all we really needed.

64
00:03:58.503 --> 00:04:02.373
Cool, that's it, and
then if you're gonna do this yourself,

65
00:04:02.373 --> 00:04:05.607
you have to have litefs be
the entry point to your app.

66
00:04:05.607 --> 00:04:10.448
And then I think I had to do a shell here.

67
00:04:10.448 --> 00:04:15.825
Yeah, I had to do some shell stuff to
get everything to kind of work together,

68
00:04:15.825 --> 00:04:18.411
but that's neither here nor there.

69
00:04:18.411 --> 00:04:23.902
Didn't I have another thing in here to
get all this all running correctly?

70
00:04:23.902 --> 00:04:27.372
I thought I did, yeah,
down here at the bottom,

71
00:04:27.372 --> 00:04:32.367
I just had to make sure that it execs
this code, so it runs an import that

72
00:04:32.367 --> 00:04:37.809
script that I was showing you, and
then it runs the server, but that's it.

73
00:04:37.809 --> 00:04:40.955
So in theory,
let's shutdown this container,

74
00:04:40.955 --> 00:04:43.189
we don't need to do this anymore.

75
00:04:43.189 --> 00:04:50.981
And we're gonna go into sqlite-app-litefs.

76
00:04:55.488 --> 00:04:56.890
&gt;&gt; Brian Holt: All right, in theory,

77
00:04:56.890 --> 00:05:00.685
crossing fingers whenever you're
doing big darker projects.

78
00:05:00.685 --> 00:05:02.916
Things are known to go on awry.

79
00:05:02.916 --> 00:05:07.864
Docker compose up -- build.

80
00:05:07.864 --> 00:05:12.214
Docker compose is the thing where you'll
run multiple containers at the same time.

81
00:05:12.214 --> 00:05:16.339
Up is saying just read all of
the individual Dockerfiles and

82
00:05:16.339 --> 00:05:18.659
the docker-compose directly.

83
00:05:18.659 --> 00:05:22.715
And then the build is if the containers
are not built, please build them for me.

84
00:05:28.543 --> 00:05:31.393
&gt;&gt; Brian Holt: All right,
it might be working.

85
00:05:31.393 --> 00:05:32.715
It seems like it could be working.

86
00:05:32.715 --> 00:05:37.334
So you can see the nginx container
started up just fine, that's great.

87
00:05:37.334 --> 00:05:39.373
Primary container looks
like it started okay.

88
00:05:39.373 --> 00:05:42.382
The replica seems like it started okay.

89
00:05:42.382 --> 00:05:46.115
You can see all of these
are coming from that and

90
00:05:46.115 --> 00:05:50.532
you can see this one is,
they're all both listening.

91
00:05:50.532 --> 00:05:53.480
All right, so in theory,

92
00:05:53.480 --> 00:05:58.575
I should be able to read localhost 8080.

93
00:05:58.575 --> 00:06:02.206
And this is our same app,
but it's running on.

94
00:06:11.690 --> 00:06:13.604
&gt;&gt; Brian Holt: All right, so, I wanted to
show you here, if I click Get Invoice 1,

95
00:06:13.604 --> 00:06:14.571
it read from the replica, right?

96
00:06:14.571 --> 00:06:19.300
And if I read from it again,
it reads from the primary.

97
00:06:19.300 --> 00:06:21.842
And that's because nginx is doing
the route, it's passing them back and

98
00:06:21.842 --> 00:06:24.099
forth to make sure that they get
equal load between them, right?

99
00:06:24.099 --> 00:06:25.926
It's load balancing.

100
00:06:25.926 --> 00:06:29.341
It's literally a term for
that, load balancing.

101
00:06:29.341 --> 00:06:32.839
And it worked, so
that's pretty cool as well, right?

102
00:06:32.839 --> 00:06:38.085
Now we have one database that's reading
from literally the same database, right?

103
00:06:38.085 --> 00:06:42.114
And if we don't have anything in our
particular that writes back to it,

104
00:06:42.114 --> 00:06:44.812
but it would also work in
that capacity as well.

105
00:06:44.812 --> 00:06:50.390
So, wanted to demonstrate to you, this is
also super possible to do on your own.

106
00:06:50.390 --> 00:06:53.074
If you don't feel like having
a cloud hosted database,

107
00:06:53.074 --> 00:06:56.229
which you wanna have replicas,
you can do it with litefs as well.

108
00:06:59.654 --> 00:07:03.419
&gt;&gt; Brian Holt: And then you would have
litestream on probably on one of your

109
00:07:03.419 --> 00:07:04.634
secondary nodes.

110
00:07:04.634 --> 00:07:07.119
Yeah, probably one of
your secondary nodes,

111
00:07:07.119 --> 00:07:09.679
just streaming off backups
in the background.

112
00:07:09.679 --> 00:07:12.506
And then you would have backed-up and
replicated databases.

113
00:07:12.506 --> 00:07:16.994
You can see that this is starting to
feel like a real database now, right?

114
00:07:16.994 --> 00:07:20.978
You don't have to worry about any
sort of network or ingress traffic,

115
00:07:20.978 --> 00:07:24.367
cuz it's all happened locally
on your particular server.

116
00:07:24.367 --> 00:07:28.968
Reason why you might not wanna do this,
let's say you have a very busy database,

117
00:07:28.968 --> 00:07:33.233
your database, and let's say you just
blowing up SQL with how many queries

118
00:07:33.233 --> 00:07:37.045
you're gonna run to it,
it's going to slow down your app server.

119
00:07:37.045 --> 00:07:40.781
Because now your database and
your app server competing for

120
00:07:40.781 --> 00:07:43.853
resources on the same box,
that's can be hard.

121
00:07:43.853 --> 00:07:47.724
What's cool about running something
like postgres or something like that,

122
00:07:47.724 --> 00:07:50.591
is you can scale database and
app server independently.

123
00:07:50.591 --> 00:07:54.275
Normally, it's like your database is fine,
because those things can handle so

124
00:07:54.275 --> 00:07:55.365
much traffic, right?

125
00:07:55.365 --> 00:07:58.153
But your app servers are coded by us,
and we're all, well,

126
00:07:58.153 --> 00:07:59.531
I won't include you in this.

127
00:07:59.531 --> 00:08:02.866
I'm an idiot and I write bad code and
therefore I take down my servers and

128
00:08:02.866 --> 00:08:06.051
then therefore slow down my
database right, which sucks, right?

129
00:08:06.051 --> 00:08:09.317
It's cool that you can scale
those things independently.

130
00:08:09.317 --> 00:08:12.189
We've lost that capability
with what we're doing here.

131
00:08:12.189 --> 00:08:13.629
Does it matter?

132
00:08:13.629 --> 00:08:18.564
On many things it won't, but the one time
it matters is going to matter a lot too.

133
00:08:18.564 --> 00:08:22.338
So I have this running in
the background as well.

134
00:08:22.338 --> 00:08:26.022
I don't need litestream going anymore.

135
00:08:26.022 --> 00:08:30.053
I'm gonna just grab this container or
this command here.

136
00:08:37.412 --> 00:08:42.065
&gt;&gt; Brian Holt: And then we're gonna
put this into here, docker exec.

137
00:08:42.065 --> 00:08:49.269
This is basically say, hey, connect to
this container, and then run this command.

138
00:08:49.269 --> 00:08:54.604
This -it means make it interactive,
don't run it in the background.

139
00:08:54.604 --> 00:08:57.146
And then I'm going to
connect to my primary and

140
00:08:57.146 --> 00:08:59.306
I'm going to connect to the database.

141
00:09:03.857 --> 00:09:05.625
&gt;&gt; Brian Holt: It's not running, so

142
00:09:05.625 --> 00:09:10.101
you might have to do docker ps
to figure out the name of it.

143
00:09:10.101 --> 00:09:12.838
Yeah, see, it's something else.

144
00:09:12.838 --> 00:09:15.260
It's this one I think that I want.

145
00:09:21.325 --> 00:09:25.766
&gt;&gt; Brian Holt: Is that not the same thing?

146
00:09:25.766 --> 00:09:29.600
Okay, for whatever reason,
that was not the same thing.

147
00:09:29.600 --> 00:09:35.449
So I just copy and pasted this one to make
sure that it was called the correct thing.

148
00:09:35.449 --> 00:09:39.028
And then we're just running sqlite3 and
connecting to the database.

149
00:09:39.028 --> 00:09:43.703
And if I say, here, .table,
it's all the table.

150
00:09:43.703 --> 00:09:46.887
So this is actually me connecting
into the docker container and

151
00:09:46.887 --> 00:09:48.217
looking at the database.

152
00:09:51.926 --> 00:09:56.576
&gt;&gt; Brian Holt: CREATE TABLE users.

153
00:09:56.576 --> 00:10:02.418
I gotta remember that, I can't remember
the syntax off the top of my head.

154
00:10:02.418 --> 00:10:05.803
Luckily, I know someone
that wrote a code on this.

155
00:10:05.803 --> 00:10:09.456
And we're just gonna put ( id Primary key,

156
00:10:09.456 --> 00:10:13.713
I think this should be enough,
that's all I need.

157
00:10:13.713 --> 00:10:16.768
I need integer as well.

158
00:10:24.333 --> 00:10:29.128
&gt;&gt; Brian Holt: Okay, tables,
you can see now I have a users table.

159
00:10:29.128 --> 00:10:33.076
In theory, if I say exit,
and I do this again, but

160
00:10:33.076 --> 00:10:39.389
I do it with the other container that I
have running here, which is the replica.

161
00:10:47.814 --> 00:10:52.096
&gt;&gt; Brian Holt: And I say tables, you can
see that users table that I just created

162
00:10:52.096 --> 00:10:54.723
from the other node is in there, cool.

163
00:10:54.723 --> 00:10:58.421
And I should be able as well,
to just do that again, right?

164
00:10:58.421 --> 00:10:59.393
CREATE TABLE,

165
00:11:05.783 --> 00:11:09.542
&gt;&gt; Brian Holt: And users2.

166
00:11:09.542 --> 00:11:13.184
So this is connected in read only mode,
that makes sense.

167
00:11:13.184 --> 00:11:17.935
So, yeah, that's true, because then
you would you have to basically

168
00:11:17.935 --> 00:11:22.845
connect to the primary, which you can
read into the documentation here,

169
00:11:22.845 --> 00:11:27.066
on how you connect to the primary
to be able to write too as well.

170
00:11:27.066 --> 00:11:30.858
But that's all built into litefs.

171
00:11:30.858 --> 00:11:34.058
I wasn't planning on trying to do this
demo, so I hadn't tried it before.

172
00:11:36.430 --> 00:11:38.870
&gt;&gt; Brian Holt: Cool,
one thing that you might be seeing here,

173
00:11:38.870 --> 00:11:42.293
you might see this weird,
sorry, that's not the right one.

174
00:11:42.293 --> 00:11:46.014
It's down here in Replication.

175
00:11:46.014 --> 00:11:49.346
If you see this weird SQLITE ERROR,
error number 1,

176
00:11:49.346 --> 00:11:54.101
it means that your node modules are not
playing nicely with the Dockerfile.

177
00:11:54.101 --> 00:11:59.372
So, all you've got to do is just delete
your node modules on your local computer

178
00:11:59.372 --> 00:12:04.657
and re-run Docker, so it builds the
container again and you should be golden.

