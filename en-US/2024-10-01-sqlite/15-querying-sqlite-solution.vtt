WEBVTT

1
00:00:00.298 --> 00:00:03.476
&gt;&gt; Brian Holt: We are gonna
write some JavaScript.

2
00:00:03.476 --> 00:00:07.688
First thing we're gonna do here,
we have the id already, and

3
00:00:07.688 --> 00:00:10.045
we're gonna put our code in here.

4
00:00:10.045 --> 00:00:14.782
We are already connecting to
the database here, database.db, right?

5
00:00:14.782 --> 00:00:16.932
And then we're gonna do a db.all.

6
00:00:19.494 --> 00:00:22.331
&gt;&gt; Brian Holt: And I'm gonna write
the query first to get the invoice.

7
00:00:22.331 --> 00:00:27.004
And so I'm gonna do,
&gt;&gt; Brian Holt: A select statement here.

8
00:00:27.004 --> 00:00:28.206
SELECT,

9
00:00:32.019 --> 00:00:37.341
&gt;&gt; Brian Holt: InvoiceID as id,

10
00:00:40.498 --> 00:00:46.094
&gt;&gt; Brian Holt: InvoiceDate as date.

11
00:00:48.368 --> 00:00:56.366
&gt;&gt; Brian Holt: BillingAddress as address,
&gt;&gt; Brian Holt: BillingCity,

12
00:00:58.513 --> 00:01:00.262
&gt;&gt; Brian Holt: As city,

13
00:01:00.262 --> 00:01:04.856
BillingState as state,

14
00:01:04.856 --> 00:01:10.326
BillingCountry as country,

15
00:01:10.326 --> 00:01:17.109
BillingPostalCode as postalcode,

16
00:01:17.109 --> 00:01:20.840
and Total as total.

17
00:01:24.763 --> 00:01:28.389
&gt;&gt; Brian Holt: I will say that I
find using select star in code to

18
00:01:28.389 --> 00:01:33.282
be a bit of an anti-pattern to
the point that I think it's almost

19
00:01:33.282 --> 00:01:36.199
never right unless you truly intend.

20
00:01:36.199 --> 00:01:40.310
I need everything from this query and
it's arbitrary,

21
00:01:40.310 --> 00:01:43.982
as in maybe that table gets altered and
added to and

22
00:01:43.982 --> 00:01:47.932
subtracted to frequently and
that doesn't matter.

23
00:01:47.932 --> 00:01:50.283
You still want everything from the table.

24
00:01:50.283 --> 00:01:54.479
One, I have serious questions about
what you're doing with your data, but

25
00:01:54.479 --> 00:01:57.508
that would be the intent that
I would derive from star.

26
00:01:57.508 --> 00:02:01.948
I don't approve of it in terms of just
being lazy about not wanting to write all

27
00:02:01.948 --> 00:02:02.506
of this.

28
00:02:02.506 --> 00:02:06.775
I think this is annoying to write,
but it's better to maintain.

29
00:02:06.775 --> 00:02:08.947
And I always err on the side
of maintaining code.

30
00:02:14.644 --> 00:02:19.242
Secondly, if you have something like that,
you should use a JSON store,

31
00:02:19.242 --> 00:02:22.745
which we'll talk about at
the end of the course as well.

32
00:02:22.745 --> 00:02:25.660
FROM Invoice,

33
00:02:28.722 --> 00:02:34.809
&gt;&gt; Brian Holt: WHERE InvoiceId = ?.

34
00:02:39.357 --> 00:02:43.305
&gt;&gt; Brian Holt: Okay, and
then we're gonna take id here.

35
00:02:43.305 --> 00:02:47.255
And here,
we're gonna take our node error back.

36
00:02:49.381 --> 00:02:56.425
&gt;&gt; Brian Holt: InvoiceRows,
&gt;&gt; Brian Holt: Okay,

37
00:02:56.425 --> 00:02:59.529
it's an error function if
you've not seen that before.

38
00:02:59.529 --> 00:03:06.697
It's just equal and angle bracket,
my editor combines them.

39
00:03:06.697 --> 00:03:12.838
If err, then you would do your whatever
error handling you wanna do here.

40
00:03:12.838 --> 00:03:15.099
I don't care,
you can do nothing if you want.

41
00:03:15.099 --> 00:03:21.575
I think I actually did take
the time to say, reply.code(500).

42
00:03:21.575 --> 00:03:27.323
And reply.send (error: err,

43
00:03:27.323 --> 00:03:31.432
and errorLocation).

44
00:03:33.767 --> 00:03:39.491
&gt;&gt; Brian Holt: Reply.send,
I'll just pass back the error.

45
00:03:39.491 --> 00:03:41.598
You can do whatever error
handling you want here.

46
00:03:41.598 --> 00:03:46.003
This was mostly when I was just writing
this myself, I was writing it so

47
00:03:46.003 --> 00:03:48.105
I could have some better errors.

48
00:03:48.105 --> 00:03:49.671
Cuz I'm going write two queries,

49
00:03:49.671 --> 00:03:53.517
I'm gonna let myself know this happened
with the invoice query, not the other one.

50
00:03:53.517 --> 00:03:56.720
This is actually probably
not a great idea for a code,

51
00:03:56.720 --> 00:04:00.289
you don't wanna tell people
what's going on in your code.

52
00:04:00.289 --> 00:04:04.228
But for our purposes, it works just fine.

53
00:04:04.228 --> 00:04:09.424
So the beauty of a node callback
is if we get past this,

54
00:04:09.424 --> 00:04:14.749
then we know that invoiceRows
is fine to operate with.

55
00:04:17.515 --> 00:04:22.859
&gt;&gt; Brian Holt: So now, I'm gonna say,

56
00:04:22.859 --> 00:04:29.738
if invoiceRows.length = 0.

57
00:04:32.286 --> 00:04:34.176
&gt;&gt; Brian Holt: Then,
we know we've 404, right?

58
00:04:34.176 --> 00:04:41.154
So cuz there's no invoice there, so
we're gonna say reply.code(404).

59
00:04:41.154 --> 00:04:47.520
And reply.send( error: err,

60
00:04:47.520 --> 00:04:53.436
errorLocation: Invoice).

61
00:04:56.850 --> 00:04:59.995
&gt;&gt; Brian Holt: Okay, now, we know we
have rows if we'll get past this point.

62
00:05:02.870 --> 00:05:07.201
&gt;&gt; Brian Holt: You also need to put
returns in there, right, return and

63
00:05:07.201 --> 00:05:07.931
return.

64
00:05:11.263 --> 00:05:13.207
&gt;&gt; Brian Holt: Now,
I'm gonna do my second query.

65
00:05:13.207 --> 00:05:15.303
Now, I'm nesting queries here.

66
00:05:15.303 --> 00:05:19.268
In reality, these two queries could
be totally run in parallel, right?

67
00:05:19.268 --> 00:05:24.111
In theory, that's faster, but also
we're using SQLite where it's so fast.

68
00:05:24.111 --> 00:05:27.508
We're talking,
I don't even know if we can really

69
00:05:27.508 --> 00:05:31.537
time the difference between how
slow our nozzle is gonna be.

70
00:05:31.537 --> 00:05:33.295
It would all be in the JavaScript stack.

71
00:05:33.295 --> 00:05:40.300
So milliseconds, single,
they're probably even smaller than that.

72
00:05:40.300 --> 00:05:44.285
I don't know, someone should test it and
tell you, okay?

73
00:05:44.285 --> 00:05:45.535
But I'm just gonna nest them, right?

74
00:05:45.535 --> 00:05:48.206
I'm gonna nest them, because that
made the code easier to write.

75
00:05:48.206 --> 00:05:50.277
So another db.all call.

76
00:05:53.746 --> 00:05:56.777
Okay, and en I'm gonna do another SELECT.

77
00:05:59.292 --> 00:06:01.177
And we're gonna have to do a join here.

78
00:06:01.177 --> 00:06:03.577
We're gonna have to do a few joins,

79
00:06:03.577 --> 00:06:07.897
because we want to get all of
the artist names, album names, and

80
00:06:07.897 --> 00:06:12.236
track names, and the unit prices
as well from the invoice list.

81
00:06:14.456 --> 00:06:18.469
So we're gonna do

82
00:06:18.469 --> 00:06:25.158
i.UnitPrice as unitPrice,

83
00:06:25.158 --> 00:06:31.315
i.Quantity as quantity.

84
00:06:31.315 --> 00:06:35.247
You could have ignored quantity, cuz I
didn't see anyone that ordered the same

85
00:06:35.247 --> 00:06:37.955
track twice, but it's in there,
so I put it in there.

86
00:06:37.955 --> 00:06:43.531
t.Name as trackName,

87
00:06:43.531 --> 00:06:49.665
a.Title as albumTitle,

88
00:06:49.665 --> 00:06:58.315
and ar.name as artistName, okay?

89
00:06:58.315 --> 00:07:00.445
That's all of our selects.

90
00:07:00.445 --> 00:07:06.364
We're gonna select FROM InvoiceLine i.

91
00:07:08.357 --> 00:07:10.332
&gt;&gt; Brian Holt: And a couple of JOIN here,

92
00:07:13.275 --> 00:07:18.669
&gt;&gt; Brian Holt: Track t ON t.track,

93
00:07:21.321 --> 00:07:27.156
&gt;&gt; Brian Holt: Id = i.TrackId,

94
00:07:27.156 --> 00:07:31.532
JOIN album a ON

95
00:07:31.532 --> 00:07:35.915
a.albumId.

96
00:07:38.610 --> 00:07:41.550
&gt;&gt; Brian Holt: Trying to
keep this consistent,

97
00:07:41.550 --> 00:07:45.334
even if it doesn't matter, t.AlbumId.

98
00:07:49.099 --> 00:07:51.670
&gt;&gt; Brian Holt: Again, I don't think
you can do natural joins here,

99
00:07:51.670 --> 00:07:53.567
because multiple means name, right?

100
00:07:53.567 --> 00:07:57.597
So this would be a place where natural
joins could seem like they work, but

101
00:07:57.597 --> 00:07:58.903
in reality wouldn't.

102
00:08:03.167 --> 00:08:04.973
&gt;&gt; Brian Holt: It's bad pattern,
don't do it.

103
00:08:09.825 --> 00:08:13.435
&gt;&gt; Brian Holt: ArtistId = a.ArtistId.

104
00:08:18.402 --> 00:08:23.877
&gt;&gt; Brian Holt: WHERE InvoiceId equals,
actually have this

105
00:08:23.877 --> 00:08:29.792
in here as without even
putting something on it.

106
00:08:29.792 --> 00:08:32.909
Again, I think because it's not ambiguous,
or

107
00:08:32.909 --> 00:08:38.166
they're all joined to each other, I think
it's fine, but you might as well put,

108
00:08:40.524 --> 00:08:43.431
&gt;&gt; Brian Holt: InvoiceId as i.

109
00:08:48.342 --> 00:08:51.088
&gt;&gt; Brian Holt: Okay,
we've got to pass it our Id parameter,

110
00:08:53.584 --> 00:08:55.658
&gt;&gt; Brian Holt: And you can do the object

111
00:08:55.658 --> 00:09:00.549
one as well, that's totally fine,
err, trackRows.

112
00:09:02.972 --> 00:09:06.202
&gt;&gt; Brian Holt: Then if, err,

113
00:09:06.202 --> 00:09:12.911
then reply.code (500),

114
00:09:12.911 --> 00:09:19.122
reply.send (error: err,

115
00:09:19.122 --> 00:09:23.352
errorLocation).

116
00:09:23.352 --> 00:09:30.829
SQLite does not give very helpful messages
of what went wrong, just be aware of that.

117
00:09:30.829 --> 00:09:38.648
It's very likely gonna be something like
SQLite error, but just be aware of that.

118
00:09:38.648 --> 00:09:40.713
This is track or invoice line.

119
00:09:40.713 --> 00:09:43.913
You can call this whatever you want or
nothing at all.

120
00:09:43.913 --> 00:09:46.700
You don't have to do any error handling,
I just did.

121
00:09:46.700 --> 00:09:51.018
Return,
&gt;&gt; Brian Holt: Okay,

122
00:09:51.018 --> 00:09:53.268
there's the error, there's that.

123
00:09:57.060 --> 00:10:00.502
&gt;&gt; Brian Holt: And then, now here,

124
00:10:00.502 --> 00:10:05.677
we can just say, reply.send.

125
00:10:05.677 --> 00:10:09.584
In fact, we can just move this up here,
because that's really what we want.

126
00:10:09.584 --> 00:10:16.703
InvoiceLine, we want invoiceRows[0],
cuz I did all.

127
00:10:16.703 --> 00:10:20.706
You probably could do get, I didn't try
that, but I'm just doing invoiceRows all.

128
00:10:20.706 --> 00:10:24.212
And then it's only gonna
return one record.

129
00:10:24.212 --> 00:10:28.914
So we'll get the first one and
then lines will just be trackRows,

130
00:10:28.914 --> 00:10:30.975
because we want all of them.

131
00:10:30.975 --> 00:10:34.033
And because up here I
named them all correctly,

132
00:10:34.033 --> 00:10:37.024
I can just pass them
directly back to the user.

133
00:10:37.024 --> 00:10:39.847
If you didn't do all these as statements,
you'd have to go through and

134
00:10:39.847 --> 00:10:41.456
rename them to be all the correct thing.

135
00:10:41.456 --> 00:10:44.184
That's why this as aliasing
stuff can be super helpful.

136
00:10:46.497 --> 00:10:51.650
&gt;&gt; Brian Holt: And cool,
I think, see how we did.

137
00:10:51.650 --> 00:10:53.516
All right, I need to go change my index.

138
00:10:53.516 --> 00:10:55.189
You shouldn't have to change yours.

139
00:10:57.705 --> 00:11:02.635
&gt;&gt; Brian Holt: But now,
make sure my server is running.

140
00:11:02.635 --> 00:11:05.646
That's what this Nodemon does for you is
every time you save your note code or

141
00:11:05.646 --> 00:11:06.223
restarts it.

142
00:11:09.431 --> 00:11:13.241
&gt;&gt; Brian Holt: Do be aware if you're
doing SQLite and Nodemon together,

143
00:11:13.241 --> 00:11:17.984
make sure you exclude your database
file from what Nodemon is watching or

144
00:11:17.984 --> 00:11:20.254
any file watcher for that matter.

145
00:11:20.254 --> 00:11:22.829
Because every time you
change your database,

146
00:11:22.829 --> 00:11:27.198
it's gonna restart your database or
your app, which may not be what you want.

147
00:11:27.198 --> 00:11:29.320
Ask me how I know.

148
00:11:29.320 --> 00:11:32.581
Cuz I was doing it when I
was developing this class.

149
00:11:32.581 --> 00:11:34.652
I was like, why does this keep changing?

150
00:11:34.652 --> 00:11:35.694
That's why.

151
00:11:35.694 --> 00:11:37.860
Okay, so refresh the page, and

152
00:11:37.860 --> 00:11:43.500
looks like we're working,
&gt;&gt; Brian Holt: Like magic.

