WEBVTT

1
00:00:00.110 --> 00:00:01.440
&gt;&gt; Brian Holt: Tables, we're doing tables.

2
00:00:03.430 --> 00:00:10.052
So if you look at this, we say .tables in,

3
00:00:10.052 --> 00:00:13.536
I'm not in my data.db.

4
00:00:13.536 --> 00:00:16.530
And thank you for
telling me it is .shell clear.

5
00:00:17.770 --> 00:00:21.608
And I do tables, you can see
those are the tables that I have,

6
00:00:21.608 --> 00:00:24.630
but I don't have one
that tracks band members.

7
00:00:24.630 --> 00:00:27.310
Let's say that suddenly becomes very
important to me for whatever reason.

8
00:00:29.410 --> 00:00:32.550
Let's go ahead and create a table,
I'll show you how to create one.

9
00:00:32.550 --> 00:00:34.450
It's not particularly difficult.

10
00:00:34.450 --> 00:00:40.996
We're going to say create table,
what it's called,

11
00:00:40.996 --> 00:00:45.266
and then opening parentheses, and

12
00:00:45.266 --> 00:00:51.950
I'm going to do an ID,
I'm going to call it an integer,

13
00:00:51.950 --> 00:00:56.669
and I'm going to call it a primary key.

14
00:00:56.669 --> 00:01:02.506
Okay, I'm going to do a name,

15
00:01:02.506 --> 00:01:05.206
text unique.

16
00:01:06.216 --> 00:01:11.064
We're insisting, for at least the purpose
is this, which is certainly not accurate,

17
00:01:11.064 --> 00:01:13.881
that every band member's
name must be unique, and

18
00:01:13.881 --> 00:01:15.796
we must insist that it is not null.

19
00:01:17.916 --> 00:01:23.363
And then we're going to
give them a role if they're

20
00:01:23.363 --> 00:01:28.432
the guitarist or
something like that text, and

21
00:01:28.432 --> 00:01:33.743
we'll call it
&gt;&gt; Brian Holt: Close the parentheses and

22
00:01:33.743 --> 00:01:39.114
semicolon, and
now a have it called M member and

23
00:01:39.114 --> 00:01:42.738
i do a schema on bend member, and

24
00:01:42.738 --> 00:01:47.858
you can see it's all
the stuff that I gave it.

25
00:01:50.291 --> 00:01:55.244
&gt;&gt; Brian Holt: So you might be
familiar with like Postgres and

26
00:01:55.244 --> 00:02:01.118
your ability to say,
&gt;&gt; Brian Holt: Like

27
00:02:01.118 --> 00:02:05.681
instead of being text,
I can do like, far char,100 right?

28
00:02:05.681 --> 00:02:11.903
Then I'm limiting it to 100 characters,
you can do this, that would pass SQLite,

29
00:02:11.903 --> 00:02:16.608
and want a limit, then you can put
two gigabytes of data in there.

30
00:02:16.608 --> 00:02:17.658
It just doesn't care.

31
00:02:17.658 --> 00:02:21.242
It's like, you want a limit,
yeah, I don't care, right?

32
00:02:21.242 --> 00:02:24.574
And so that's one of the interesting
things about sqlite is there's only

33
00:02:24.574 --> 00:02:25.992
four types.

34
00:02:25.992 --> 00:02:29.472
Integers, real,
which is like a real number, right?

35
00:02:29.472 --> 00:02:33.432
So decimals and
stuff like that floats, if you will.

36
00:02:33.432 --> 00:02:36.682
Text and blob, which is like a big blob,
like an image or

37
00:02:36.682 --> 00:02:38.492
something like that, right?

38
00:02:40.732 --> 00:02:44.638
It's a dynamically type system, so
if you like throw numbers or texts and

39
00:02:44.638 --> 00:02:48.861
texts at numbers, it really does its
best to try and accommodate that, right?

40
00:02:48.861 --> 00:02:53.135
If you try and insert a literal number,
100 into a text field,

41
00:02:53.135 --> 00:02:56.971
it's like, cool,
you now have a text 100, right?

42
00:02:56.971 --> 00:03:00.131
And it just kinda does its best to do
backflips and make everything work.

43
00:03:01.346 --> 00:03:04.510
And again, you can give it like
bar chart 255 where in Postgres,

44
00:03:04.510 --> 00:03:08.776
it would be cut off after 255 characters,
it's just gonna be I don't care.

45
00:03:08.776 --> 00:03:11.012
I'm not tracking it, not my problem,
your problem, right?

46
00:03:13.849 --> 00:03:16.466
&gt;&gt; Brian Holt: All of those
are technically valid SQL, right?

47
00:03:16.466 --> 00:03:20.759
Or SQL, and so it will respect those
like you can give it a tiny int,

48
00:03:20.759 --> 00:03:24.302
which is like a small number,
you can give it a big int.

49
00:03:24.302 --> 00:03:27.311
Those are all valid types in SQL,
and it accepts them, and

50
00:03:27.311 --> 00:03:30.518
it just then it just was, like,
cool, but it's an integer.

51
00:03:30.518 --> 00:03:31.854
I don't care, right?

52
00:03:33.404 --> 00:03:34.914
So that's something to keep in mind.

53
00:03:34.914 --> 00:03:39.224
Some people love that, I think that
did I put a link in here to it?

54
00:03:40.834 --> 00:03:44.322
I didn't, yeah, no, I did right there.

55
00:03:44.322 --> 00:03:48.750
I think, this is gets into like,
what is so

56
00:03:48.750 --> 00:03:56.252
all of these convert to integers,
all of these convert to texts.

57
00:03:56.252 --> 00:03:57.912
Blob is a blob.

58
00:03:57.912 --> 00:04:00.472
All of these can convert to real numbers.

59
00:04:00.472 --> 00:04:04.342
And, these numeric ones, so,
like, a good example is there,

60
00:04:04.342 --> 00:04:06.650
notice there's no Boolean, right?

61
00:04:06.650 --> 00:04:08.423
It just converts a Boolean to one and
zero.

62
00:04:08.423 --> 00:04:10.863
So you can say, select where true, right?

63
00:04:10.863 --> 00:04:14.843
And it's under the hood, just like cool,
true is one, and so it is stored as a one.

64
00:04:16.263 --> 00:04:19.567
And so if you create a Boolean,
feel and then you insert seven into it,

65
00:04:19.567 --> 00:04:22.762
which is definitely not Boolean,
it's like, cool, here you go.

66
00:04:22.762 --> 00:04:24.752
Here's your seven, right?

67
00:04:24.752 --> 00:04:31.542
You know, seventh level of truth or
whatever that is, it's really interesting.

68
00:04:31.542 --> 00:04:36.510
Some people, again, swear by I was looking
for a, there's some part of the docs here

69
00:04:36.510 --> 00:04:40.022
where it says like,
it's a feature, not a bug, right?

70
00:04:40.022 --> 00:04:45.883
And they make a big case of why this,
like, flexible typing is good.

71
00:04:45.883 --> 00:04:49.977
I like JavaScript and it's flexible
typing because it helps me be productive.

72
00:04:49.977 --> 00:04:53.575
And I feel like this doesn't help me be
productive, so I'm not actually like,

73
00:04:53.575 --> 00:04:56.651
this is one of the things about
SQLite that I don't care as much for.

74
00:04:56.651 --> 00:04:57.287
But, you know,

75
00:04:57.287 --> 00:05:00.110
I'm not the person that created
a database that's in a trillion places.

76
00:05:00.110 --> 00:05:01.384
So maybe you don't listen to me.

77
00:05:01.384 --> 00:05:04.117
Listen to the guy that did that,
so, that's up to you.

78
00:05:04.117 --> 00:05:07.748
Yep, we have a table, a band member,
a table contains records,

79
00:05:07.748 --> 00:05:11.391
you can call them records, rows,
whatever you wanna call them.

80
00:05:11.391 --> 00:05:14.341
A record can be thought of
as a row in a spreadsheet.

81
00:05:14.341 --> 00:05:16.041
And that's actually not
too far from the truth.

82
00:05:16.041 --> 00:05:18.855
You can literally use
Google Sheets as a database.

83
00:05:18.855 --> 00:05:21.708
And if you're doing something very small,
why not?

84
00:05:21.708 --> 00:05:26.664
A kind of simple way to use it,
&gt;&gt; Brian Holt: I

85
00:05:26.664 --> 00:05:29.806
think this is literally an NPM package,
yeah, this is an NPM package

86
00:05:29.806 --> 00:05:32.908
where you can use Google spreadsheet as,
basically as a database.

87
00:05:34.258 --> 00:05:37.571
Some of the ORMs, like, I don't
know if drizzle will do it now, but

88
00:05:37.571 --> 00:05:41.235
some of the older ORMs, you can literally
hook up to spreadsheets as well,

89
00:05:41.235 --> 00:05:42.357
which is kind of cool.

90
00:05:46.600 --> 00:05:51.134
&gt;&gt; Brian Holt: Okay, so
let's insert a record into our database.

91
00:05:51.134 --> 00:05:52.114
I'm just gonna copy and

92
00:05:52.114 --> 00:05:54.863
paste this since we already talked
about insert into band member.

93
00:06:00.279 --> 00:06:07.833
&gt;&gt; Brian Holt: So you insert into
band member, name, role, values.

94
00:06:07.833 --> 00:06:11.823
I put Thom Yorke,
because he's lead singer of Radiohead.

95
00:06:11.823 --> 00:06:15.403
And you can see there, he got an ID.

96
00:06:15.403 --> 00:06:17.033
It starts from 1, right?

97
00:06:18.263 --> 00:06:20.345
Thom Yorke, and he is a singer.

98
00:06:23.641 --> 00:06:31.223
&gt;&gt; Brian Holt: Okay, and now we can select
star from band member, pretty cool.

99
00:06:35.406 --> 00:06:38.701
&gt;&gt; Brian Holt: So let's add a few more.

100
00:06:38.701 --> 00:06:39.784
Again, I'm going to copy and paste this.

101
00:06:39.784 --> 00:06:43.246
Because you don't wanna watch me type
this, but it's exactly the same thing.

102
00:06:45.366 --> 00:06:49.489
Insert into band member name,
roll, and then values.

103
00:06:49.489 --> 00:06:50.204
And then you just,

104
00:06:50.204 --> 00:06:52.993
as long as you come to separate them,
you can put as many values in at once.

105
00:06:52.993 --> 00:06:56.920
So this is gonna actually
create four more rows and

106
00:06:56.920 --> 00:07:01.419
you can see here,
these are all the ones that it created.

107
00:07:04.201 --> 00:07:08.651
&gt;&gt; Brian Holt: Again, all members of
Radiohead, if you were wondering.

108
00:07:08.651 --> 00:07:12.813
And now if I select star again,
I have the five members of Radiohead.

109
00:07:12.813 --> 00:07:17.747
Okay, so let's alter our table, let's
say that we wanted to add image to it.

110
00:07:17.747 --> 00:07:19.665
So I'm gonna say alter table.

111
00:07:21.216 --> 00:07:23.692
Band member and
I'm going to say add column.

112
00:07:25.732 --> 00:07:27.929
&gt;&gt; Brian Holt: Image text.

113
00:07:30.542 --> 00:07:31.271
&gt;&gt; Brian Holt: Done.

114
00:07:33.934 --> 00:07:36.432
&gt;&gt; Brian Holt: As you might imagine,
you can also drop column.

115
00:07:39.057 --> 00:07:40.128
&gt;&gt; Brian Holt: That's you
don't need that last part.

116
00:07:40.128 --> 00:07:46.520
You can just say no image, there you go,

117
00:07:46.520 --> 00:07:50.852
very easy to alter tables.

118
00:07:50.852 --> 00:07:53.134
We didn't put anything in there, so
I think that would just go ahead and

119
00:07:53.134 --> 00:07:55.214
create all of them, and
it would just set them to null, right?

120
00:07:55.214 --> 00:07:57.782
They wouldn't have anything.

121
00:07:57.782 --> 00:07:59.734
So let's add a.

122
00:07:59.734 --> 00:08:02.306
Something that we're with a default value.

123
00:08:02.306 --> 00:08:07.833
So we're gonna say alter
table band member.

124
00:08:07.833 --> 00:08:12.708
We're gonna say add column,
text not null, default,

125
00:08:12.708 --> 00:08:17.377
and we're just gonna assume
that if you don't give us

126
00:08:17.377 --> 00:08:20.799
a nationality that you are from the UK,

127
00:08:20.799 --> 00:08:26.422
which seems like a definitely
not problematic thing to assume.

128
00:08:26.422 --> 00:08:29.216
Right, and now if I do select
star from radio from band member,

129
00:08:29.216 --> 00:08:31.190
what do you expect to
say from nationality?

130
00:08:31.190 --> 00:08:34.544
For all of the people that
are already at the table,

131
00:08:34.544 --> 00:08:39.381
that they're from the UK, which in this
case happens to be true because we

132
00:08:39.381 --> 00:08:43.535
only have Radiohead at the table,
and they are all from the UK.

133
00:08:43.535 --> 00:08:46.394
I think so I actually didn't
bother looking that up, but

134
00:08:46.394 --> 00:08:48.369
hopefully that I'm not wrong on that.

135
00:08:48.369 --> 00:08:53.095
If so, I deeply apologize to
the members of Radiohead.

136
00:08:53.095 --> 00:08:56.461
You can also insert think
something in there, and

137
00:08:56.461 --> 00:09:00.404
if you didn't include it, so
if I insert something else.

138
00:09:00.404 --> 00:09:04.681
I think it would assume
it to be UK as well.

139
00:09:04.681 --> 00:09:11.824
Schema band member, yeah, and
it would just all fall to UK.

140
00:09:18.107 --> 00:09:22.829
&gt;&gt; Brian Holt: Cool, yeah, and if you null
and you have things in the table already,

141
00:09:22.829 --> 00:09:25.002
you do have to give it a default.

142
00:09:25.002 --> 00:09:27.848
Otherwise it's gonna fail
because those would be null.

143
00:09:31.969 --> 00:09:34.870
&gt;&gt; Brian Holt: One thing that you cannot
do in SQLite that you can do in just about

144
00:09:34.870 --> 00:09:36.536
every other database that I know of,

145
00:09:36.536 --> 00:09:39.845
is you cannot alter multiple tables
at once or multiple columns at once.

146
00:09:39.845 --> 00:09:44.712
So you have to have One distinct query for
every alter table that you wanna do.

147
00:09:44.712 --> 00:09:47.523
In Postgres, if you wanna modify
10 columns at the same time,

148
00:09:47.523 --> 00:09:48.574
it just doesn't care.

149
00:09:48.574 --> 00:09:51.140
It's like, cool,
it'll do all of them in one swoop.

150
00:09:51.140 --> 00:09:53.726
SQLite's like, nope,
we only do one at a time.

151
00:09:53.726 --> 00:09:55.304
So that is something to keep in mind.

152
00:09:59.804 --> 00:10:05.674
&gt;&gt; Brian Holt: Okay, cool, let's say
that we're done with band member.

153
00:10:05.674 --> 00:10:11.019
Just do drop table,
band member, you are done.

154
00:10:14.071 --> 00:10:18.064
&gt;&gt; Brian Holt: So go to work tomorrow and
say drop table users and see what happens.

155
00:10:19.664 --> 00:10:22.761
&gt;&gt; Speaker 2: Someone said you forgot to
add the column name, but it still worked.

156
00:10:26.751 --> 00:10:28.199
&gt;&gt; Brian Holt: It did, that's correct.

157
00:10:28.199 --> 00:10:31.968
Yeah, it probably assumed it
to be right here at column,

158
00:10:31.968 --> 00:10:34.488
I just didn't even call it anything.

159
00:10:37.705 --> 00:10:42.082
&gt;&gt; Brian Holt: Let's see what happened,
let's Let's create the table again.

160
00:10:47.449 --> 00:10:48.132
&gt;&gt; Brian Holt: Again,

161
00:10:48.132 --> 00:10:53.799
this is kinda like their permissive
thing where they're like cool.

162
00:10:53.799 --> 00:11:00.487
We'll just assume that you
have a null named column.

163
00:11:00.487 --> 00:11:02.023
I didn't put in nationality, right?

164
00:11:02.023 --> 00:11:10.696
So let's delete that
&gt;&gt; Brian Holt: From band member,

165
00:11:10.696 --> 00:11:15.133
yeah, does it have anything in there?

166
00:11:15.133 --> 00:11:22.516
But if I do scheme a band member, yeah,
see it just doesn't have anything there.

167
00:11:22.516 --> 00:11:29.199
I think that's what that column
means is a nully named column.

168
00:11:29.199 --> 00:11:31.849
Probably not a great idea.

169
00:11:31.849 --> 00:11:35.397
But again, this is going to ask you
guys like, sure, you wanted that.

170
00:11:35.397 --> 00:11:37.286
It's valid SQL, so go for it.

