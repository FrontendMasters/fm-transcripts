WEBVTT

1
00:00:00.060 --> 00:00:03.010
&gt;&gt; Brian Holt: That's foreign keys,
let's get into aggregation.

2
00:00:03.010 --> 00:00:06.220
So, you've probably
seen this query before.

3
00:00:06.220 --> 00:00:08.658
It's one of the most
common ones you'll run.

4
00:00:08.658 --> 00:00:12.580
What if you just wanna know how many
tracks we have in our database?

5
00:00:17.395 --> 00:00:22.110
&gt;&gt; Brian Holt: You have this thing called
an aggregation function, which is count.

6
00:00:22.110 --> 00:00:26.325
Count star, as you might guess, is just
count how many things are that, you know,

7
00:00:26.325 --> 00:00:28.870
are in this database and
give me back the number.

8
00:00:28.870 --> 00:00:34.517
So, in our database we have 3,503 tracks.

9
00:00:34.517 --> 00:00:38.986
As you might imagine, you're able to count
how many DISTINCT things you have in

10
00:00:38.986 --> 00:00:41.064
the database like DISTINCT values.

11
00:00:41.064 --> 00:00:43.145
You can count how many things
are greater than a hundred.

12
00:00:43.145 --> 00:00:47.065
You can give it a bunch of
different aggregation things.

13
00:00:48.675 --> 00:00:49.555
Let's do DISTINCT.

14
00:00:51.025 --> 00:00:52.515
So, we're gonna do SELECT COUNT.

15
00:00:52.515 --> 00:00:56.305
There's no space there, it doesn't matter.

16
00:00:56.305 --> 00:01:02.845
But DISTINCT GenreId

17
00:01:02.845 --> 00:01:06.843
FROM Track.

18
00:01:06.843 --> 00:01:10.389
So, basically,
we went into the Track database, and

19
00:01:10.389 --> 00:01:14.323
we counted how many different,
DISTINCT means different,

20
00:01:14.323 --> 00:01:19.276
in this particular case, different
values of GenreId that I have, right?

21
00:01:19.276 --> 00:01:23.185
Now I could have also done
SELECT COUNT star from genre, right?

22
00:01:23.185 --> 00:01:25.755
That would also give you the same thing.

23
00:01:25.755 --> 00:01:30.147
But we could also do ArtistId.

24
00:01:30.147 --> 00:01:31.317
That might actually be interesting.

25
00:01:31.317 --> 00:01:32.903
I don't know what that's gonna be.

26
00:01:32.903 --> 00:01:36.087
There is no known Track.

27
00:01:36.087 --> 00:01:37.998
You have to do album ID and join anyway.

28
00:01:37.998 --> 00:01:41.840
Never mind, we couldn't do AlbumId.

29
00:01:41.840 --> 00:01:46.907
So, 347, how many

30
00:01:46.907 --> 00:01:53.141
things do we have in Album?

31
00:01:53.141 --> 00:01:55.121
Is it the same number?

32
00:01:57.101 --> 00:02:01.377
It is, that's kind of interesting, right?

33
00:02:01.377 --> 00:02:03.318
But now what if we do artist?

34
00:02:03.318 --> 00:02:07.189
We have 275 artists, and

35
00:02:07.189 --> 00:02:12.512
we do SELECT DISTINCT Album ArtistId,

36
00:02:12.512 --> 00:02:17.847
nope, that's not what I wanted to do.

37
00:02:17.847 --> 00:02:19.127
Yeah, no, it is.

38
00:02:19.127 --> 00:02:21.273
ArtistId from Album.

39
00:02:21.273 --> 00:02:23.886
Is that the same number?

40
00:02:23.886 --> 00:02:29.311
It's not,
which is kind of interesting, right?

41
00:02:29.311 --> 00:02:31.964
So, we have 275 artists.

42
00:02:31.964 --> 00:02:38.261
However, we only ever see 204
referenced from the album table,

43
00:02:38.261 --> 00:02:44.339
which implies the fact that we
have 71 artists without albums,

44
00:02:44.339 --> 00:02:47.226
kind of interesting, right?

45
00:02:47.226 --> 00:02:49.323
So, that's what DISTINCT does.

46
00:02:49.323 --> 00:02:55.584
You can also just do
SELECT DISTINCT GenreId from Track, and

47
00:02:55.584 --> 00:03:00.882
this will actually give you the whole set,
right?

48
00:03:00.882 --> 00:03:04.518
So, we have,
as you might imagine, 1 to 25.

49
00:03:04.518 --> 00:03:07.178
And again, if you don't do DISTINCT,

50
00:03:07.178 --> 00:03:11.380
it's gonna give you multiple
copies of everything, right?

51
00:03:11.380 --> 00:03:17.190
So, if I do GenreId, how many copies
of everything that I'm getting, right?

52
00:03:19.000 --> 00:03:21.363
There's a lot of sevens.

53
00:03:21.363 --> 00:03:26.543
I'm gonna guess seven is probably rock,
right?

54
00:03:26.543 --> 00:03:33.359
So, DISTINCT basically says, collapse this
down so, I only have one value per row.

55
00:03:33.359 --> 00:03:34.385
Yeah, Mark.

56
00:03:34.385 --> 00:03:40.511
&gt;&gt; Mark: What happens with count if
you have a column that contains nulls?

57
00:03:40.511 --> 00:03:41.581
&gt;&gt; Brian Holt: That's a good question.

58
00:03:45.523 --> 00:03:49.862
&gt;&gt; Brian Holt: Well, if you're just doing
count star, it's gonna count them, right?

59
00:03:49.862 --> 00:03:51.033
Cuz there's still rows, right?

60
00:03:51.033 --> 00:03:53.433
As long as it's in the results set,
it doesn't matter.

61
00:03:53.433 --> 00:03:59.057
If you're doing a DISTINCT, my thought,
and I think I'm right here,

62
00:03:59.057 --> 00:04:03.088
is that it'll count null
as just a distinct value,

63
00:04:03.088 --> 00:04:05.929
cuz it is a distinct value, right?

64
00:04:05.929 --> 00:04:10.302
So, if we had 1 through 25 and
null, right?

65
00:04:10.302 --> 00:04:15.663
We would get 26 because null would be
an additional distinct value in there,

66
00:04:15.663 --> 00:04:17.138
that's my thought.

67
00:04:22.886 --> 00:04:24.706
&gt;&gt; Brian Holt: Okay, cool.

68
00:04:29.519 --> 00:04:34.245
&gt;&gt; Brian Holt: So, what if we wanna
see which genre has the most,?

69
00:04:34.245 --> 00:04:38.601
Seems like a pretty
reasonable question to ask.

70
00:04:38.601 --> 00:04:44.859
We can do SELECt GenreId and

71
00:04:44.859 --> 00:04:50.853
then COUNT(GenreId).

72
00:04:50.853 --> 00:04:55.600
When you do these aggregation functions,
you'll frequently say like AS count or

73
00:04:55.600 --> 00:04:56.923
something like that.

74
00:04:56.923 --> 00:04:59.750
This is just aliasing it to
be called something else.

75
00:04:59.750 --> 00:05:03.215
And it doesn't really matter for
what we're doing here because

76
00:05:03.215 --> 00:05:07.515
we're not actually gonna be referencing
that column later, but in your code,

77
00:05:07.515 --> 00:05:10.357
you don't wanna reference
the column name as this.

78
00:05:10.357 --> 00:05:12.224
You wanna reference it as count, right?

79
00:05:15.976 --> 00:05:18.354
&gt;&gt; Brian Holt: Up to you to do whatever
you want, this is totally valid.

80
00:05:18.354 --> 00:05:21.854
But in code,
I would alias it to be something else.

81
00:05:23.444 --> 00:05:28.430
From Track, and then you're

82
00:05:28.430 --> 00:05:33.221
gonna do a GROUP BY GenreId.

83
00:05:33.221 --> 00:05:38.515
So, you can see 7 has 579.

84
00:05:38.515 --> 00:05:44.638
And you can see 1, whatever 1 is,
maybe that's rock is has 1300.

85
00:05:44.638 --> 00:05:49.758
And 25,
there is only one track that has genre 25.

86
00:05:49.758 --> 00:05:53.499
Still not super useful, cuz what is 25?

87
00:05:53.499 --> 00:05:54.375
Now, I'm deadly curious.

88
00:05:54.375 --> 00:05:55.431
I don't remember.

89
00:05:55.431 --> 00:05:57.162
What is it?

90
00:05:57.162 --> 00:06:00.384
Well, what are we gonna do if we
have something that is referenced in

91
00:06:00.384 --> 00:06:01.183
another table?

92
00:06:01.183 --> 00:06:04.274
Join [INAUDIBLE] We're gonna join them,
right?

93
00:06:04.274 --> 00:06:14.168
So,
&gt;&gt; Brian Holt: Let's do it.

94
00:06:14.168 --> 00:06:17.543
So, I'll just modify this one a bit.

95
00:06:17.543 --> 00:06:21.072
We're gonna have to make it reference.

96
00:06:21.072 --> 00:06:26.695
So, it's gonna be Track.GenreId.

97
00:06:26.695 --> 00:06:34.352
There we go,
we're gonna put a Genre Name and

98
00:06:34.352 --> 00:06:39.197
then we're gonna do Track.

99
00:06:39.197 --> 00:06:41.579
This actually doesn't matter.

100
00:06:41.579 --> 00:06:45.070
You can say Track.GenreId or
you can do Genre.GenreId.

101
00:06:45.070 --> 00:06:48.818
I think you can actually even omit it
since it's not ambiguous, but don't.

102
00:06:48.818 --> 00:06:50.381
Please just give it a table.

103
00:06:53.504 --> 00:07:03.423
Then from Track JOIN Genre ON
Genre.GenreId = Track.GenreId.

104
00:07:03.423 --> 00:07:09.496
GROUP BY Track, or Genre.GenreId,

105
00:07:09.496 --> 00:07:14.621
it doesn't matter cuz they're

106
00:07:14.621 --> 00:07:18.430
the same thing, okay?

107
00:07:22.453 --> 00:07:27.110
&gt;&gt; Brian Holt: There's one Track of opera,
and rock was 1, that was wrong.

108
00:07:27.110 --> 00:07:28.533
Latin was seven.

109
00:07:31.675 --> 00:07:33.221
&gt;&gt; Brian Holt: Kinda cool, right?

110
00:07:33.221 --> 00:07:37.055
You're now data scientists.

111
00:07:37.055 --> 00:07:39.196
I'm just kidding.
Well, not really, I mean,

112
00:07:39.196 --> 00:07:41.931
this is a lot of what
being a data scientist is.

113
00:07:41.931 --> 00:07:47.025
They probably do a little bit more
complicated [LAUGH] Queries than this,

114
00:07:47.025 --> 00:07:48.452
but sometimes not.

115
00:07:50.262 --> 00:07:54.555
I will say that I get by with a lot of
times not having a data scientist because

116
00:07:54.555 --> 00:07:56.952
I can do basic queries like this, right?

117
00:07:58.118 --> 00:08:01.305
Not being afraid of SQL is actually
kind of a superpower for a developer.

118
00:08:08.912 --> 00:08:10.357
&gt;&gt; Brian Holt: Cool,

119
00:08:19.240 --> 00:08:19.987
&gt;&gt; Brian Holt: Yeah, and

120
00:08:19.987 --> 00:08:22.644
we're using COUNT because I'm gonna

121
00:08:22.644 --> 00:08:26.225
say that count is usually
the most common one used.

122
00:08:26.225 --> 00:08:27.811
You're gonna use that one a lot.

123
00:08:27.811 --> 00:08:31.088
But there's definitely others.

124
00:08:31.088 --> 00:08:35.046
What if, instead of saying we
wanna see how many tracks,

125
00:08:35.046 --> 00:08:38.513
we wanna see the highest Track ID for
every genre?

126
00:08:38.513 --> 00:08:41.625
I don't know why that's useful,
but it could be.

127
00:08:41.625 --> 00:08:45.821
Instead of saying COUNT,
you would just say MAX, right?

128
00:08:49.491 --> 00:08:54.291
And you need to do Track ID, not GenreId,
because that would be silly.

129
00:08:54.291 --> 00:08:56.221
It doesn't make any sense.

130
00:08:56.221 --> 00:09:01.229
Track.Track ID
&gt;&gt; Brian Holt: So,

131
00:09:01.229 --> 00:09:04.576
you can see the highest rock is 3,355.

132
00:09:04.576 --> 00:09:09.016
That's the highest ID
that it has on the table.

133
00:09:09.016 --> 00:09:11.118
Which one is the lowest?

134
00:09:11.118 --> 00:09:15.495
Yeah, heavy metal,
they stopped after 1304, Bossa Nova, 660.

135
00:09:15.495 --> 00:09:19.573
Rock and Roll, 122.

136
00:09:19.573 --> 00:09:24.446
And again, you probably guessed but
you can also do a MIN.

137
00:09:29.221 --> 00:09:30.066
&gt;&gt; Brian Holt: Right?

138
00:09:30.066 --> 00:09:32.805
And so, the first thing in
the table is an ACDC song.

139
00:09:32.805 --> 00:09:35.516
We saw that already, so it is one.

140
00:09:35.516 --> 00:09:39.130
But there's only one opera song and
it's 3451.

141
00:09:43.022 --> 00:09:45.501
&gt;&gt; Brian Holt: So, again,
these are called aggregation functions.

142
00:09:50.954 --> 00:09:53.450
&gt;&gt; Brian Holt: Okay, I'm gonna
scroll down here a little bit, and

143
00:09:53.450 --> 00:09:57.859
we're gonna talk about HAVING
&gt;&gt; Brian Holt: So,

144
00:09:57.859 --> 00:10:00.918
what is wrong with this query right here?

145
00:10:00.918 --> 00:10:05.673
So, we're selecting Track GenreId,
Genre.Name, and

146
00:10:05.673 --> 00:10:09.165
the count of how many Track IDs or
genres for

147
00:10:09.165 --> 00:10:14.127
each track there is from Genre,
from Track, JOIN, Genre.

148
00:10:14.127 --> 00:10:18.169
And then we're giving it a WHERE COUNt
where the count of the GenreId is greater

149
00:10:18.169 --> 00:10:22.715
than 500 cuz I only wanna see things that
have 500 or more in the database, right?

150
00:10:22.715 --> 00:10:25.676
I don't wanna see opera that only has one.

151
00:10:25.676 --> 00:10:29.938
Why does this WHERE clause not work?

152
00:10:33.157 --> 00:10:35.351
It is kinda confusing.

153
00:10:35.351 --> 00:10:40.118
Where works on the result set, right?

154
00:10:40.118 --> 00:10:45.000
So, it's gonna run, basically this SELECT,
and it's gonna go grab all

155
00:10:45.000 --> 00:10:49.746
of the rows that match the things
that we're not aggregating, right?

156
00:10:49.746 --> 00:10:51.324
So, all the genre IDs and the names.

157
00:10:51.324 --> 00:10:54.094
And you're gonna have in
this particular case,

158
00:10:54.094 --> 00:10:56.805
you're gonna grab every
item in the database.

159
00:10:56.805 --> 00:10:59.786
So, it's 3503,
I think is what we saw it was, right?

160
00:10:59.786 --> 00:11:03.281
Then the WHERE clause is then going to

161
00:11:03.281 --> 00:11:08.143
go rip out all of the things
that don't match that.

162
00:11:08.143 --> 00:11:12.310
What's the problem here is that
we haven't aggregated yet, right?

163
00:11:12.310 --> 00:11:15.058
So, we haven't collapsed
everything down yet.

164
00:11:15.058 --> 00:11:18.926
So, we can't filter based on TrackId
because we don't have the count yet.

165
00:11:18.926 --> 00:11:20.466
We haven't filtered out
all the things yet.

166
00:11:22.016 --> 00:11:26.241
So, this won't work because that only
applies to the original results set and

167
00:11:26.241 --> 00:11:27.596
not the aggregated set.

168
00:11:29.346 --> 00:11:32.266
This is the only time where
I think the grammar is

169
00:11:32.266 --> 00:11:34.894
important of what order things operated.

170
00:11:34.894 --> 00:11:39.193
So, there's basically a second HAVING,
if you will, or

171
00:11:39.193 --> 00:11:41.756
a second WHERE, called halving.

172
00:11:41.756 --> 00:11:47.292
So, instead of doing WHERE,
you do HAVING at the end.

173
00:11:47.292 --> 00:11:53.013
And that will filter based on the
aggregated set not the initial result set.

174
00:11:53.013 --> 00:11:54.878
Does that make sense?

175
00:11:54.878 --> 00:11:59.040
And it's actually important
because you can have a WHERE and

176
00:11:59.040 --> 00:12:02.230
you can have a HAVING at the same time,
right?

177
00:12:02.230 --> 00:12:06.290
You can filter down to
a smaller initial result set,

178
00:12:06.290 --> 00:12:11.926
aggregate based on that, and
then filter based on that aggregated set.

179
00:12:11.926 --> 00:12:13.551
So, that's why you have to have both,

180
00:12:13.551 --> 00:12:15.487
because they are actually
different things.

181
00:12:15.487 --> 00:12:18.147
You're filtering in different places, and

182
00:12:18.147 --> 00:12:21.580
it makes a difference on
where you're filtering, yeah.

183
00:12:21.580 --> 00:12:23.352
&gt;&gt; Student 1: You could
do this as a subquery?

184
00:12:23.352 --> 00:12:25.973
&gt;&gt; Brian Holt: You could
definitely do this as a subquery.

185
00:12:25.973 --> 00:12:28.959
We're gonna talk about
subqueries perhaps even next.

186
00:12:28.959 --> 00:12:29.868
&gt;&gt; Student 1: Okay.
&gt;&gt; Brian Holt: Yeah.

187
00:12:29.868 --> 00:12:35.789
Like programming,
there's many ways to go about doing this,

188
00:12:35.789 --> 00:12:41.038
and I just invite you,
999 times out of 1,000,

189
00:12:41.038 --> 00:12:45.060
go with the way that
makes the most sense and

190
00:12:45.060 --> 00:12:51.223
is the most readable because most
databases are extremely fast.

191
00:12:51.223 --> 00:12:56.867
So, yeah, I'm showing you how to
do this with HAVING and JOINS.

192
00:12:56.867 --> 00:12:59.874
I won't show you necessarily how
to do this with subqueries, but

193
00:12:59.874 --> 00:13:02.290
you could definitely do this
a couple of other ways.

194
00:13:05.035 --> 00:13:10.833
&gt;&gt; Student 2: So, is the important part
that it's the same count in the select and

195
00:13:10.833 --> 00:13:16.341
HAVING or is that just coincidence,
like the Track.GenreId?

196
00:13:16.341 --> 00:13:18.674
Is it important that it matches
in the SELECT and the HAVING?

197
00:13:18.674 --> 00:13:23.645
&gt;&gt; Brian Holt: Yeah, I mean, what actually
would be a better way of writing this?

198
00:13:23.645 --> 00:13:27.804
I mean, let's just run it,
just so you can see what it is.

199
00:13:27.804 --> 00:13:29.910
That's the result there.

200
00:13:29.910 --> 00:13:33.546
Again, if I was just writing this for
myself

201
00:13:41.107 --> 00:13:42.649
&gt;&gt; Brian Holt: Way clearer, right?

202
00:13:42.649 --> 00:13:45.141
Yeah, that's why,
AS is super helpful here.

203
00:13:49.654 --> 00:13:51.061
&gt;&gt; Brian Holt: But yeah,
you cannot reference

204
00:13:51.061 --> 00:13:52.944
anything aggregated in the where clause.

205
00:13:52.944 --> 00:13:56.436
That's the rule for
you to hold on to in your brain.

206
00:13:56.436 --> 00:14:01.967
If you're doing any sort of COUNT,
MAX, MIN, any of that kind of

207
00:14:01.967 --> 00:14:07.812
aggregation stuff, DISTINCT is
another one sometimes, depends.

208
00:14:07.812 --> 00:14:10.426
I guess even still,
if you're doing DISTINCT,

209
00:14:10.426 --> 00:14:13.371
you're gonna reference what
happens in the GROUP BY.

210
00:14:13.371 --> 00:14:16.986
I mean the GROUP BYs actually ends up
being really important here, right?

211
00:14:16.986 --> 00:14:20.066
Because that's actually what you're
gonna be collapsing back down on to.

