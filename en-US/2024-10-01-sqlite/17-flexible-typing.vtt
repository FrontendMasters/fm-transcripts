WEBVTT

1
00:00:00.410 --> 00:00:02.995
&gt;&gt; Brian Holt: We at this point have
gone almost everything that we've

2
00:00:02.995 --> 00:00:03.770
covered so far.

3
00:00:05.120 --> 00:00:09.636
Pretty generally applicable to Postgres,
my SQL,

4
00:00:09.636 --> 00:00:14.410
Oracle, Snowflake,
any one of those things.

5
00:00:14.410 --> 00:00:17.249
Now, we're gonna start
getting a little bit more

6
00:00:17.249 --> 00:00:19.420
into what is more peculiar to SQLite.

7
00:00:20.832 --> 00:00:25.011
Yeah, basically for
the rest of the time here.

8
00:00:28.126 --> 00:00:30.978
&gt;&gt; Brian Holt: So
we talked a bit about this, but,

9
00:00:30.978 --> 00:00:34.221
SQL is not rigid at all about its typing.

10
00:00:34.221 --> 00:00:38.392
In fact, it's the opposite, it's
intentionally flexible about its typing.

11
00:00:41.670 --> 00:00:44.959
What's nice about this is like you
can almost always take queries for

12
00:00:44.959 --> 00:00:47.523
other databases and
not have any problems with them.

13
00:00:47.523 --> 00:00:49.971
Whereas, like sometimes even mysql and

14
00:00:49.971 --> 00:00:53.211
postgres, which are somewhat
similar in many ways,

15
00:00:53.211 --> 00:00:58.047
will fight each other about types and
how you extract them and things like that.

16
00:00:58.047 --> 00:01:00.292
But just yeah,
be aware if you limit something to 250.

17
00:01:00.292 --> 00:01:06.702
55 characters, it can still be two
gigabytes, and SQLite does not care.

18
00:01:06.702 --> 00:01:10.972
They did add a strict
table function in 2021.

19
00:01:10.972 --> 00:01:14.062
It makes its SQLite slightly
more opinionated about it.

20
00:01:14.062 --> 00:01:17.242
But even they say like,
we don't think this is a good idea, but

21
00:01:17.242 --> 00:01:19.222
we cave to peer pressure essentially.

22
00:01:21.345 --> 00:01:23.740
Yeah, where is it?

23
00:01:25.469 --> 00:01:28.321
&gt;&gt; Brian Holt: I think
it's done at the end.

24
00:01:28.321 --> 00:01:30.238
If you insist on rigid typing,

25
00:01:30.238 --> 00:01:33.915
SQLite supports this development
using strict tables.

26
00:01:33.915 --> 00:01:36.556
If you find a real world use case
prevented that would have prevented

27
00:01:36.556 --> 00:01:39.195
a bug in application, let us know,
because we don't believe you,

28
00:01:39.195 --> 00:01:40.653
[LAUGH] is essentially what they say.

29
00:01:40.653 --> 00:01:43.261
Here, which I thought was just
the funniest thing when I was reading

30
00:01:43.261 --> 00:01:43.866
through this.

31
00:01:45.246 --> 00:01:50.306
Yeah, embrace freedom, not the kind of
freedom I typically think of for sure.

32
00:01:50.306 --> 00:01:51.276
Yeah, cool.

33
00:01:51.276 --> 00:01:53.247
Anyway, you can read their treatise here.

34
00:01:53.247 --> 00:01:56.568
They're smarter computer scientists
than me, so maybe they have a point.

35
00:01:56.568 --> 00:01:59.398
They just that'll like it.

36
00:01:59.398 --> 00:02:03.346
&gt;&gt; Speaker 1: Can you Leverage,
like, ORMs and

37
00:02:03.346 --> 00:02:09.337
TypeScript to sort of do
that enforcement from you,

38
00:02:09.337 --> 00:02:14.113
for you sort of at the application layer?

39
00:02:14.113 --> 00:02:18.182
&gt;&gt; Brian Holt: Maybe I don't know if
Prisma or Drizzle have a built into ' but

40
00:02:18.182 --> 00:02:23.127
like truly important that you really
wanna your emails to be 200 characters,

41
00:02:23.127 --> 00:02:25.107
or less or something like that.

42
00:02:25.107 --> 00:02:28.391
You are gonna have to
write it in app code.

43
00:02:28.391 --> 00:02:30.967
&gt;&gt; Speaker 1: Okay.

44
00:02:30.967 --> 00:02:35.858
&gt;&gt; Brian Holt: Yep, there's no
timestamp that really does actually

45
00:02:35.858 --> 00:02:40.441
bite you in the ass sometimes
having no times type.

46
00:02:40.441 --> 00:02:42.806
Just seems like a massive miss to me.

47
00:02:42.806 --> 00:02:45.387
But they don't have any sort of timestamp.

48
00:02:45.387 --> 00:02:48.817
They do have a bunch of functions
that will operate on times for you.

49
00:02:48.817 --> 00:02:51.643
So, you just store it as a string and
then you pull it out and

50
00:02:51.643 --> 00:02:54.737
you do conversions on the fly and
then put it back.

51
00:02:54.737 --> 00:02:57.929
If it sounds messy,
it's because it is messy.

52
00:03:01.090 --> 00:03:04.691
&gt;&gt; Brian Holt: I'm very good friends
with the maintainers of moment and

53
00:03:04.691 --> 00:03:09.655
date functions and they're not fans of
how they choose to handle times in SQL.

54
00:03:09.655 --> 00:03:10.594
I'll put it that way.

55
00:03:12.364 --> 00:03:16.644
No Booleans, zeros and ones, true and
false are just aliases of 0 and 1.

56
00:03:16.644 --> 00:03:18.349
I wish I'd always thought that was funny.

