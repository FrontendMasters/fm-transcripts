WEBVTT

1
00:00:00.340 --> 00:00:03.717
&gt;&gt; Brian Holt: So,
let's hop back into our class here,

2
00:00:03.717 --> 00:00:07.686
we're on basic SQL here and
SELECT statements.

3
00:00:10.233 --> 00:00:12.734
&gt;&gt; Brian Holt: So, I am a big
fan of learning SQL by doing and

4
00:00:12.734 --> 00:00:15.645
not by sitting here and
breaking the grammar down,

5
00:00:15.645 --> 00:00:18.909
which is how a bunch of other
people choose to teach this.

6
00:00:18.909 --> 00:00:22.634
Of like, you run this query and
it breaks down into this grammar,

7
00:00:22.634 --> 00:00:25.495
which is then parse this way and
run in this order.

8
00:00:25.495 --> 00:00:29.529
I just like learning by doing, so
that's the way I'm gonna teach you.

9
00:00:30.669 --> 00:00:34.576
SQL has a very structured, I mean,
it's literally in the name,

10
00:00:34.576 --> 00:00:38.499
way of parsing queries and
running queries and things like that.

11
00:00:39.559 --> 00:00:44.288
And I'm gonna say 99% of the time
it really doesn't matter.

12
00:00:44.288 --> 00:00:50.001
The only time it really kind of matters
is you have to do SELECT first,

13
00:00:50.001 --> 00:00:52.871
and then FROM here and WHERE here.

14
00:00:52.871 --> 00:00:57.003
The order of those clauses matters,
but you kind of just get used to it.

15
00:00:57.003 --> 00:01:00.693
And for the most part,
it's pretty intuitive,

16
00:01:00.693 --> 00:01:05.643
I will show you the one part where
you kinda have to think about what

17
00:01:05.643 --> 00:01:10.693
order things happens in,
otherwise it's just kinda intuitive.

18
00:01:10.693 --> 00:01:15.011
I will say that for this course, I am
gonna give you a little brief intro to SQL

19
00:01:15.011 --> 00:01:17.792
enough for
you to just kinda be dangerous in SQL.

20
00:01:17.792 --> 00:01:21.435
But I don't go as much into depth in it,
as I do in this course,

21
00:01:21.435 --> 00:01:25.235
the complete intro to SQL and
Postgres, I go deeper in this one.

22
00:01:25.235 --> 00:01:27.671
A lot of those concepts, in fact,

23
00:01:27.671 --> 00:01:31.289
almost all those concepts
apply to SQLite as well.

24
00:01:31.289 --> 00:01:35.188
I wanna to be a lighter course, so
we're talking a little bit less about it.

25
00:01:37.508 --> 00:01:40.837
&gt;&gt; Brian Holt: And most of this is built
around the idea of development, and

26
00:01:40.837 --> 00:01:44.626
not necessarily around the idea of
being a database administrator,

27
00:01:44.626 --> 00:01:48.175
because I am a developer and
I'm not a database administrator.

28
00:01:48.175 --> 00:01:52.168
So I'm not gonna necessarily
give you the best ops tips, but

29
00:01:52.168 --> 00:01:56.988
I am gonna give you the best tips I
know around writing apps with SQL.

30
00:01:56.988 --> 00:02:04.063
The first thing I'll just mention
is that SQL is a defined language.

31
00:02:04.063 --> 00:02:09.803
There's a standards body, and everyone
kinda has to agree on how SQL works.

32
00:02:09.803 --> 00:02:14.503
And that is then applied to Snowflake,
and Oracle, and

33
00:02:14.503 --> 00:02:18.913
DB2, and SQLite, and Postgres, and MySQL.

34
00:02:18.913 --> 00:02:22.637
They all have to have to kind
of adhere to this one standard,

35
00:02:22.637 --> 00:02:27.030
which was great about that,
because this SELECT FROM Artist now works

36
00:02:27.030 --> 00:02:32.829
across basically any SQL database that
you choose to write against, right?

37
00:02:32.829 --> 00:02:35.500
If you learn a bunch of stuff about
SQLite, and then you hop over to Postgres,

38
00:02:35.500 --> 00:02:36.909
things are gonna feel really familiar.

39
00:02:37.939 --> 00:02:41.983
In fact, almost all of it that I'm
teaching you today will apply to Postgres,

40
00:02:41.983 --> 00:02:46.665
and the couple of times that it doesn't,
I'll highlight, because it's interesting.

41
00:02:46.665 --> 00:02:51.098
They do have some very key differences
in terms of how they do things, but for

42
00:02:51.098 --> 00:02:56.160
the most part, you kinda get to treat them
all as the same, which is pretty cool.

43
00:02:56.160 --> 00:03:00.093
The first thing we're gonna do is we're
gonna learn about how to read from

44
00:03:00.093 --> 00:03:04.273
a database, which is probably most of
the time what you're gonna be doing.

45
00:03:04.273 --> 00:03:10.374
So if you have your database open here,
let's go ahead and

46
00:03:10.374 --> 00:03:16.863
just write a query right away and
say, SELECT * FROM Artist.

47
00:03:16.863 --> 00:03:18.608
None of this capitalization matters.

48
00:03:18.608 --> 00:03:24.926
You can write this as
silly as you want to.

49
00:03:29.807 --> 00:03:30.926
&gt;&gt; Brian Holt: This is hard for
me to write.

50
00:03:35.088 --> 00:03:38.078
&gt;&gt; Brian Holt: The one thing
you'll find about SQLite,

51
00:03:38.078 --> 00:03:42.702
it does not care about capitalization
at all in almost any case.

52
00:03:42.702 --> 00:03:50.646
Yeah, that's a nice dad joke there for
you [LAUGH].

53
00:03:50.646 --> 00:03:52.813
I entertain myself sometimes.

54
00:03:52.813 --> 00:03:58.466
So let's talk about the query that we
just wrote, so, SELECT * FROM Artist.

55
00:03:58.466 --> 00:04:02.668
You'll see that I tend to
capitalize the grammar words.

56
00:04:02.668 --> 00:04:06.727
When I started writing code 15 years ago,
well, actually,

57
00:04:06.727 --> 00:04:11.205
longer than that,
professionally, 15 years ago.

58
00:04:11.205 --> 00:04:14.091
This is what most people did all the time,

59
00:04:14.091 --> 00:04:18.585
it was like a way to indicate this
part of the grammar does this.

60
00:04:18.585 --> 00:04:20.295
You'll see in a lot of tutorials,
people still do it.

61
00:04:20.295 --> 00:04:24.924
You'll see that I mostly still do it
because it is so ingrained in me.

62
00:04:24.924 --> 00:04:28.783
You don't have to, and I would say a lot
of people don't these days, right?

63
00:04:28.783 --> 00:04:33.919
You will see a lot of people
just do SELECT * FROM Artist,

64
00:04:33.919 --> 00:04:36.763
or even just artist like this.

65
00:04:36.763 --> 00:04:40.650
And to be honest with you, when I'm
just writing it for myself and not for

66
00:04:40.650 --> 00:04:43.380
anybody else, this is what I tend to do.

67
00:04:43.380 --> 00:04:47.420
So the SELECT part of this means that we
are going to be reading from a database.

68
00:04:47.420 --> 00:04:51.017
The star means give me
back everything in table.

69
00:04:51.017 --> 00:04:53.037
FROM just tells what table, right?

70
00:04:53.037 --> 00:04:57.951
So, we can change to be select * from
Genre, right, which is another table that

71
00:04:57.951 --> 00:05:02.455
we have in here, and you'll see that
it gives me everything in the table.

72
00:05:05.495 --> 00:05:07.181
&gt;&gt; Brian Holt: All right, so star,

73
00:05:07.181 --> 00:05:12.731
just as it means across many of much
of computing, means everything.

74
00:05:12.731 --> 00:05:14.513
When you're just there by yourself and

75
00:05:14.513 --> 00:05:18.077
you're querying, I do a lot of SELECT *
just to see like what's in the table,

76
00:05:18.077 --> 00:05:22.129
how is the data structured,
it kinda gives you a nice visualization.

77
00:05:22.129 --> 00:05:23.741
But when you're writing queries for

78
00:05:23.741 --> 00:05:26.299
your apps, be specific of what
you want out of the tables.

79
00:05:26.299 --> 00:05:31.512
You wanna do something like SELECT

80
00:05:31.512 --> 00:05:35.839
name FROM Artists, right?

81
00:05:35.839 --> 00:05:39.254
Notice this is just giving
me the name of the artist.

82
00:05:39.254 --> 00:05:42.588
Notice I don't have the ID that
I got when I did SELECT *.

83
00:05:45.137 --> 00:05:49.180
&gt;&gt; Brian Holt: All right, numbers' here
now, which I think they call ArtistId.

84
00:05:53.322 --> 00:05:56.856
&gt;&gt; Brian Holt: Yep, and so you can
see I'm getting just the number now.

85
00:05:56.856 --> 00:05:58.953
And it does give it back in
the order that you ask it for.

86
00:05:58.953 --> 00:06:02.780
So if you wanted to do name first and
then ArtisId,

87
00:06:02.780 --> 00:06:05.889
you can see now it's in the other order.

88
00:06:05.889 --> 00:06:09.704
So the number comes second,
and the artist comes first.

89
00:06:11.570 --> 00:06:16.134
&gt;&gt; Brian Holt: So when you are writing
code in SQL and any variant of SQL,

90
00:06:16.134 --> 00:06:20.143
be specific of the field
that you're asking for.

91
00:06:20.143 --> 00:06:22.872
It makes your code a lot more readable.

92
00:06:22.872 --> 00:06:26.252
And later you might alter your table and
add more columns and

93
00:06:26.252 --> 00:06:28.221
you might not need those columns.

94
00:06:28.221 --> 00:06:32.691
It's always a good idea for
the code that you're intending to live for

95
00:06:32.691 --> 00:06:37.557
a while to be specific about the things
that you want back and not just a star.

96
00:06:37.557 --> 00:06:42.142
If you need help with what's in a table,
I do .schema Artist a lot.

97
00:06:42.142 --> 00:06:46.536
And then you can see here I have
an ArtistId which is an integer.

98
00:06:46.536 --> 00:06:50.045
I have a name which is a text, right?

99
00:06:50.045 --> 00:06:52.701
And then we'll talk about
constraints later, but

100
00:06:52.701 --> 00:06:55.801
it means that the ArtistId is unique for
the table, right?

101
00:06:55.801 --> 00:06:58.100
It's the primary key for the table.

102
00:06:58.100 --> 00:07:01.966
Honestly, this is probably the most useful
thing you'll learn all day is just how to

103
00:07:01.966 --> 00:07:04.702
select something from a table
cuz it's mostly what you do.

104
00:07:07.383 --> 00:07:09.430
&gt;&gt; Brian Holt: So
every time that I do that SELECT,

105
00:07:09.430 --> 00:07:12.503
I think I'm getting like
300 something artists or

106
00:07:12.503 --> 00:07:16.344
something like that because there's
a lot in this table, right?

107
00:07:16.344 --> 00:07:20.217
But you might imagine, what happens
if you do SELECT posts FROM Facebook?

108
00:07:21.258 --> 00:07:24.073
You're gonna get a trillion rows back,
I don't know, but

109
00:07:24.073 --> 00:07:27.578
a very much many large amount of rows,
right, which you don't wanna do.

110
00:07:28.708 --> 00:07:33.196
Typically, you're looking for
a row or a group of rows.

111
00:07:33.196 --> 00:07:34.618
So let's do that first.

112
00:07:34.618 --> 00:07:40.793
Let's do SELECT name FROM Artist,
and then we're gonna do a WHERE,

113
00:07:40.793 --> 00:07:47.082
which is basically, say,
limit this down to a specific subsection.

114
00:07:47.082 --> 00:07:52.669
I'm going to do ArtistId =, and
then just give it a number,

115
00:07:52.669 --> 00:07:56.627
I think it's 1 to 275, it looks like.

116
00:07:58.267 --> 00:08:02.869
I did 174, I don't remember what that is,
The Postal Service,

117
00:08:02.869 --> 00:08:07.986
which not intentionally, but that is
the hoodie I am wearing today [LAUGH].

118
00:08:10.090 --> 00:08:13.471
&gt;&gt; Brian Holt: Okay,
I think this makes sense, intuitively.

119
00:08:13.471 --> 00:08:14.698
You're saying,

120
00:08:14.698 --> 00:08:19.694
I want everything where this particular
little clause is true, right?

121
00:08:19.694 --> 00:08:24.314
As you might imagine, if I wanted to say

122
00:08:24.314 --> 00:08:29.494
SELECT ArtistId FROM Artist WHERE name =,

123
00:08:29.494 --> 00:08:35.882
single quote, very important here,
single quote.

124
00:08:35.882 --> 00:08:39.498
We'll talk about that in a second,
The Postal Service.

125
00:08:42.088 --> 00:08:43.266
&gt;&gt; Brian Holt: And
you can see there I got the,

126
00:08:46.213 --> 00:08:47.662
&gt;&gt; Brian Holt: 174 back.

127
00:08:47.662 --> 00:08:52.160
Now, if I actually remember correctly,
I think that's actually a Postgres thing.

128
00:08:52.160 --> 00:08:54.720
Double quotes actually might work here.

129
00:08:54.720 --> 00:08:55.917
Nope, okay, I was right.

130
00:08:55.917 --> 00:08:57.912
It is important that you only
use single quotes there.

131
00:08:59.395 --> 00:09:00.695
SQLite is really permissive,

132
00:09:00.695 --> 00:09:03.795
that's actually one of their core
tendencies to be permissive and try and

133
00:09:03.795 --> 00:09:06.895
make sense out of anything that you
give it, even if it's wrong, right?

134
00:09:06.895 --> 00:09:10.335
This is wrong SQL, and
I thought, I was like,

135
00:09:10.335 --> 00:09:13.345
they might handle it, but they don't.

136
00:09:13.345 --> 00:09:17.259
Single quotes in SQL, and
this applies across databases,

137
00:09:17.259 --> 00:09:21.414
means string literal or
an actual value was being put in there.

138
00:09:21.414 --> 00:09:23.214
Or you can just think of a string, right?

139
00:09:24.924 --> 00:09:29.764
Double quotes means a table-level value,
right?

140
00:09:29.764 --> 00:09:32.697
So this is actually going to look for
a column called The Postal Service,

141
00:09:32.697 --> 00:09:34.004
which doesn't exist, right?

142
00:09:35.064 --> 00:09:41.364
I could actually come in here and I could
put name in quotes, and this will work.

143
00:09:41.364 --> 00:09:45.525
&gt;&gt; Brian Holt: Right, because that
actually is the name of the table-level

144
00:09:45.525 --> 00:09:48.735
value, same thing here with Artists,
right?

145
00:09:48.735 --> 00:09:52.962
Artists can be put in double quotes,
you don't need to because that's

146
00:09:52.962 --> 00:09:56.494
kinda nonsensical to put it there,
but you could, right?

147
00:09:56.494 --> 00:10:00.269
&gt;&gt; Speaker 2: How do you get SQL
syntax highlighting in your terminal?

148
00:10:00.269 --> 00:10:02.824
Has anybody gotten that set up?

149
00:10:04.374 --> 00:10:08.491
&gt;&gt; Brian Holt: I intentionally didn't
get that set up because I expected most

150
00:10:08.491 --> 00:10:10.128
people to not have that.

151
00:10:10.128 --> 00:10:14.712
Really, to be super honest with you,
the way I do all of this

152
00:10:14.712 --> 00:10:19.754
stuff is I go into VS Code, I do,
Change Language Mode to SQL, and

153
00:10:19.754 --> 00:10:24.663
then I do SELECT * FROM blah,
and then I start writing in here.

154
00:10:24.663 --> 00:10:29.639
Because, as you'll see later in
the course, our queries get quite long and

155
00:10:29.639 --> 00:10:32.300
then I'll copy and paste them in there.

156
00:10:32.300 --> 00:10:37.161
It's hard to edit all this stuff
on the terminal because I am

157
00:10:37.161 --> 00:10:41.160
not a Vim slash terminal purist,
as you can see.

158
00:10:41.160 --> 00:10:43.351
So that's why I never
bothered to set it up,

159
00:10:43.351 --> 00:10:46.385
is cuz I always write them in VS Code and
then I move them over.

160
00:10:48.255 --> 00:10:51.498
There's even VS Code extensions here
where you can just directly do all

161
00:10:51.498 --> 00:10:53.830
of this stuff in VS Code,
which works really well.

