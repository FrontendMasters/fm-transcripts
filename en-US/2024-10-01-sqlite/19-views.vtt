WEBVTT

1
00:00:00.450 --> 00:00:02.700
&gt;&gt; Brian Holt: Views, I like views.

2
00:00:02.700 --> 00:00:04.374
Views are not unique to see light, but

3
00:00:04.374 --> 00:00:06.630
they certainly have their
own kind of spin on them.

4
00:00:08.810 --> 00:00:12.066
So this query right here,

5
00:00:12.066 --> 00:00:17.850
this is just joining
track to album to artist.

6
00:00:18.920 --> 00:00:22.735
So if you run this, where is my database?

7
00:00:22.735 --> 00:00:23.895
So I need to get rid of that.

8
00:00:25.355 --> 00:00:27.787
Git status I'm just going,
no, that's fine, okay.

9
00:00:31.852 --> 00:00:34.295
&gt;&gt; Brian Holt: Data.db and
I run this query.

10
00:00:35.585 --> 00:00:41.563
You can see I'm just getting id,
name, title and name.

11
00:00:41.563 --> 00:00:45.190
And I'm doing it with
two different joints and

12
00:00:45.190 --> 00:00:51.577
I'm getting all of the artists,
the album names and the tracks, right?

13
00:00:51.577 --> 00:00:52.687
Nothing too interesting here.

14
00:00:54.027 --> 00:00:57.807
Now imagine like I'm Spotify, and
every time that someone goes anywhere in

15
00:00:57.807 --> 00:01:01.704
the Spotify UI, you have to show them all
three pieces of information about any

16
00:01:01.704 --> 00:01:06.288
music that they're looking at,
because they wanna see all of it, right?

17
00:01:06.288 --> 00:01:10.928
Can you imagine having to do this
join any time that you wanna do that?

18
00:01:10.928 --> 00:01:12.308
It's like on every page, right?

19
00:01:12.308 --> 00:01:13.978
It would be a pain in the but
to do it that way.

20
00:01:15.598 --> 00:01:18.398
It would be nice if they're on
the same table, but they're not.

21
00:01:18.398 --> 00:01:21.286
They can't be because of the reasons
we've all just talked about.

22
00:01:22.586 --> 00:01:24.046
This is what a view is for.

23
00:01:24.046 --> 00:01:27.756
A view is basically saying like,
it's like a layer on top.

24
00:01:27.756 --> 00:01:30.356
It's like an abstraction away
from a table where you can say,

25
00:01:30.356 --> 00:01:33.156
I'm going to present something to
you that looks like a table, but

26
00:01:33.156 --> 00:01:37.096
underneath the hood, it's going to be
querying other tables underneath it.

27
00:01:37.096 --> 00:01:39.633
It's a view into other tables.

28
00:01:39.633 --> 00:01:43.253
So basically you're gonna construct
a query that's going to define a view.

29
00:01:43.253 --> 00:01:48.032
And then from there, you can query
that set of data as if it was a table,

30
00:01:48.032 --> 00:01:50.423
which is kind of cool, right?

31
00:01:50.423 --> 00:01:51.863
You can call this whatever you want.

32
00:01:51.863 --> 00:01:57.693
I'm gonna call mine create view,
easy tracks as.

33
00:02:00.639 --> 00:02:05.684
So here, you're just

34
00:02:05.684 --> 00:02:10.730
gonna write your query

35
00:02:10.730 --> 00:02:14.979
t.trackId as id,

36
00:02:14.979 --> 00:02:19.760
ar.name as artist,

37
00:02:19.760 --> 00:02:24.807
al.title as album and

38
00:02:24.807 --> 00:02:29.067
t.name as track.

39
00:02:29.067 --> 00:02:33.003
From track t, oops,

40
00:02:33.003 --> 00:02:37.602
that might be a problem.

41
00:02:39.868 --> 00:02:42.352
&gt;&gt; Brian Holt: It will be,
let's try that again.

42
00:02:48.780 --> 00:02:52.038
&gt;&gt; Brian Holt: So shell.clear,
we'll just, we'll start again.

43
00:02:53.598 --> 00:02:58.342
Create view easy tracks as and

44
00:02:58.342 --> 00:03:03.846
then here you're just gonna write

45
00:03:03.846 --> 00:03:11.055
your query as if it was
a normal SQLite query,

46
00:03:11.055 --> 00:03:17.506
t.TrackIs as id, ar.name as artist,

47
00:03:17.506 --> 00:03:23.029
l.title as album t.name as track

48
00:03:28.032 --> 00:03:32.216
&gt;&gt; Brian Holt: From track t,

49
00:03:32.216 --> 00:03:36.749
join album al on

50
00:03:36.749 --> 00:03:42.330
t.album id equals

51
00:03:42.330 --> 00:03:46.877
al.album id.

52
00:03:50.442 --> 00:03:55.835
&gt;&gt; Brian Holt: And join artist ar on

53
00:03:55.835 --> 00:04:01.547
ar.artist id equals

54
00:04:01.547 --> 00:04:05.996
al.artist id.

55
00:04:10.493 --> 00:04:12.415
&gt;&gt; Brian Holt: Okay, pretty simple,
it's just create view as and

56
00:04:12.415 --> 00:04:14.394
then you just give it the query
that defines the view.

57
00:04:16.464 --> 00:04:23.063
Okay, now I just say select
star from easy tracks,

58
00:04:23.063 --> 00:04:31.673
limit 10, and now that is a way
easier query to wrangle, right?

59
00:04:34.224 --> 00:04:34.864
&gt;&gt; Brian Holt: Pretty cool.

60
00:04:34.864 --> 00:04:37.674
I think it's pretty cool,
it can make your job a lot easier.

61
00:04:39.564 --> 00:04:41.399
Lots of really cool reasons to use views.

62
00:04:41.399 --> 00:04:44.859
One of them is just simplicity like this.

63
00:04:44.859 --> 00:04:48.897
A lot of times what I'll see people use
views for, we did this at snowflake,

64
00:04:48.897 --> 00:04:51.259
I remember quite frequently.

65
00:04:51.259 --> 00:04:56.074
Let's say I'm writing a piece
of software that exposes

66
00:04:56.074 --> 00:05:00.997
some subset of the large amount
of data that I have to you.

67
00:05:00.997 --> 00:05:05.775
Let's say I have a media
database that you can use and

68
00:05:05.775 --> 00:05:12.665
it's a shared view in snowflake
which is something they support.

69
00:05:12.665 --> 00:05:16.352
And I have TVs, movies, video games,
all that kind of stuff but

70
00:05:16.352 --> 00:05:19.065
you only bought the music database.

71
00:05:19.065 --> 00:05:22.943
I can say, here's my view,
which is a subset of my data.

72
00:05:22.943 --> 00:05:28.103
And you can query this table
as a limited use user, right?

73
00:05:28.103 --> 00:05:29.683
But you can't query anything else.

74
00:05:29.683 --> 00:05:32.873
That's all my private
data that you don't get.

75
00:05:32.873 --> 00:05:38.413
You can do a view from that perspective,
you can only expose just the view.

76
00:05:38.413 --> 00:05:40.892
You could write code that
would do that and SQ,

77
00:05:40.892 --> 00:05:45.405
nothing is built into escalate would allow
you to do some data sharing like that, but

78
00:05:45.405 --> 00:05:49.116
it would be a, that's how you would
probably implement it, right?

79
00:05:52.650 --> 00:05:59.474
&gt;&gt; Brian Holt: What's problematic about
this is that, let's say I use this and

80
00:05:59.474 --> 00:06:05.565
then I do a bunch of joins and,
some other stuff like that.

81
00:06:07.045 --> 00:06:10.247
Every time that I run
a query against easy tracks,

82
00:06:10.247 --> 00:06:13.311
it's running this query
underneath the hood.

83
00:06:13.311 --> 00:06:17.735
That could be good, that could be bad.

84
00:06:17.735 --> 00:06:20.535
In this case, I imagine it's bad.

85
00:06:20.535 --> 00:06:24.661
That's a pretty huge result set, and
I don't think it's particularly optimized.

86
00:06:27.121 --> 00:06:30.101
And imagine you're Spotify, and
you have a hundred million tracks now.

87
00:06:30.101 --> 00:06:33.105
Imagine running that query against their
table every single time someone opened

88
00:06:33.105 --> 00:06:34.351
a webpage, right, it's wild.

89
00:06:34.351 --> 00:06:36.421
You just would never wanna do that.

90
00:06:36.421 --> 00:06:38.061
So that's the downside of use.

91
00:06:38.061 --> 00:06:40.874
It's like kind of hiding
the complexity from you.

92
00:06:40.874 --> 00:06:43.429
And if you don't know that you're
using a view underneath the hood and

93
00:06:43.429 --> 00:06:45.484
what that view is actually doing.

94
00:06:45.484 --> 00:06:47.299
Yeah, you can end up with some
like performance problems,

95
00:06:47.299 --> 00:06:48.366
because it's hiding it from you.

96
00:06:51.216 --> 00:06:55.995
&gt;&gt; Brian Holt: One thing that escalate
does not support that other databases will

97
00:06:55.995 --> 00:06:59.589
do for
you something called a materialized view.

98
00:06:59.589 --> 00:07:04.195
And so again, referencing my
other course here about Postgres,

99
00:07:04.195 --> 00:07:09.471
it actually makes that problem go away
where you basically run the query and

100
00:07:09.471 --> 00:07:12.456
then you just store the results set.

101
00:07:12.456 --> 00:07:16.356
And so you actually do get to query
a real table as opposed to this virtual

102
00:07:16.356 --> 00:07:17.806
abstract table.

103
00:07:17.806 --> 00:07:21.260
And then anytime that you want to update
it, you just say, hey, materialize this

104
00:07:21.260 --> 00:07:24.584
If you rerun yourself and repopulate
your data based on the underlying query.

105
00:07:24.584 --> 00:07:29.185
But then actually in this lesson, I think
I show you down here at the bottom, we

106
00:07:29.185 --> 00:07:35.216
optimize the query by about 40,000 using
a materialized view, which is wild, right?

107
00:07:35.216 --> 00:07:40.051
You go from this astronomically large
query to running it in 0.43, 0.75,

108
00:07:40.051 --> 00:07:44.621
which is, that's like measuring how
many CPU shares or something like that.

109
00:07:45.981 --> 00:07:46.931
Fun, crazy stuff.

110
00:07:48.441 --> 00:07:52.400
Okay, so all that to say,
here's a shiny toy that you don't get to

111
00:07:52.400 --> 00:07:56.096
play with because SQLite does
not have that feature built in.

112
00:07:58.877 --> 00:08:02.402
&gt;&gt; Brian Holt: Another thing that
SQLite does not support is you cannot

113
00:08:02.402 --> 00:08:03.680
insert into a view.

114
00:08:05.950 --> 00:08:09.345
So imagine you just inserted into easy
tracks and you gave it the track name,

115
00:08:09.345 --> 00:08:11.640
title, name, all that stuff.

116
00:08:11.640 --> 00:08:14.980
It wouldn't work because it doesn't have
genre and all that stuff underneath it.

117
00:08:14.980 --> 00:08:16.887
But if it did have everything in there and

118
00:08:16.887 --> 00:08:20.757
you were storing everything in there in
Postgres, you can insert into the view and

119
00:08:20.757 --> 00:08:24.972
it'll distribute it amongst the three
tables that you joined from.

120
00:08:24.972 --> 00:08:27.432
SQLite does not support that.

121
00:08:27.432 --> 00:08:29.962
I'm kind of okay with that.

122
00:08:29.962 --> 00:08:31.565
Not a feature I was using frequently.

