WEBVTT

1
00:00:00.150 --> 00:00:02.073
Just a tiny, brief history here.

2
00:00:02.073 --> 00:00:06.932
SQLite was created for
the Navy by a contractor

3
00:00:06.932 --> 00:00:11.416
named Dr D Richard Hipp in about 2000,

4
00:00:11.416 --> 00:00:15.913
he was writing something for a destroyer.

5
00:00:15.913 --> 00:00:19.420
I don't remember exactly what it was,
it was some piece of the destroyer.

6
00:00:20.637 --> 00:00:25.772
He evaluated a bunch of technologies,
but he ended up just kind of designing

7
00:00:25.772 --> 00:00:30.265
his own to be very small,
very limited, and very single purpose,

8
00:00:30.265 --> 00:00:34.544
to like, I need a library to be
able to write SQLite queries to.

9
00:00:34.544 --> 00:00:42.912
And we'll get more into that here in
just a second, that is open source.

10
00:00:42.912 --> 00:00:47.897
I mean, this was today, so
you can see very active development.

11
00:00:47.897 --> 00:00:51.577
These are all things that have been
checked in today, which is pretty cool.

12
00:00:53.497 --> 00:00:56.740
It's also on GitHub,
it's just mirrored there.

13
00:00:56.740 --> 00:01:01.344
But you can see here 50 minutes ago, they
changed the README, which is pretty cool.

14
00:01:04.212 --> 00:01:06.888
&gt;&gt; Brian Holt: And
its open source license is public domain,

15
00:01:06.888 --> 00:01:09.709
which is not something
you see very frequently.

16
00:01:09.709 --> 00:01:12.876
But it's been around long enough as
open source that they released it under

17
00:01:12.876 --> 00:01:15.949
the public domain,
which is interesting as well.

18
00:01:15.949 --> 00:01:19.909
The one thing about SQLite is
that it is not open contribution.

19
00:01:19.909 --> 00:01:23.358
Whereas normally you can hop on GitHub and
you find a problem,

20
00:01:23.358 --> 00:01:27.521
you can just submit a fix, they do
not accept any outside contribution.

21
00:01:27.521 --> 00:01:31.782
There's just a core small set
of developers of which Dr.

22
00:01:31.782 --> 00:01:33.302
Hipp is one of them.

23
00:01:33.302 --> 00:01:39.336
He keeps a really tight control over what
is SQLite, what's the meaning for SQLite.

24
00:01:39.336 --> 00:01:44.727
He is what they call a BDFL,
the benevolent dictator for life,

25
00:01:44.727 --> 00:01:51.767
which is what Guido Van Rossum was for
Python, and there's been a couple of them.

26
00:01:51.767 --> 00:01:55.746
But anyway, obviously he's been
a very good steward of SQLite.

27
00:02:00.164 --> 00:02:04.015
&gt;&gt; Brian Holt: Just an interesting fact
that I found is he didn't wanna use Git,

28
00:02:04.015 --> 00:02:08.578
so he invented his own source control
management software called Fossil.

29
00:02:08.578 --> 00:02:13.346
It was made for the single
purpose of supporting SQLite, and

30
00:02:13.346 --> 00:02:19.345
basically the two biggest projects on
Fossil are SQLite and Fossil itself.

31
00:02:20.515 --> 00:02:23.061
So in other words,
not many other people use it.

32
00:02:23.061 --> 00:02:26.537
I left a link there if you
wanna look at how they differ.

33
00:02:26.537 --> 00:02:28.703
I've never even tried to use it myself.

34
00:02:28.703 --> 00:02:33.935
But as you might guess, Dr.
Hipp is the maintainer of Fossil as well.

35
00:02:35.985 --> 00:02:37.575
So anyway, in practice,
you don't really need to care.

36
00:02:37.575 --> 00:02:39.339
None of this is actually
super important to you,

37
00:02:39.339 --> 00:02:41.326
I just found all the history
here fairly interesting.

38
00:02:43.696 --> 00:02:48.963
In theory,
SQLite is the most deployed library ever,

39
00:02:48.963 --> 00:02:53.091
most deployed software ever, in theory.

40
00:02:53.091 --> 00:02:55.846
They can't really prove it,
because how do you prove that?

41
00:02:55.846 --> 00:03:00.444
But they've estimated that there's
a trillion SQLite databases that exist out

42
00:03:00.444 --> 00:03:03.495
there, which is pretty wild
to say out loud, right?

43
00:03:05.355 --> 00:03:07.122
So I left another link in there,

44
00:03:07.122 --> 00:03:10.993
they have a more thorough explanation
of how they come to that number.

45
00:03:10.993 --> 00:03:15.260
But here's just some basic
things that are using SQLite.

46
00:03:15.260 --> 00:03:20.402
Every iPhone, every Mac, every Android,
every Windows 10 computer,

47
00:03:20.402 --> 00:03:25.148
all of your browsers, every Skype,
iTunes, Dropbox, TurboTax.

48
00:03:25.148 --> 00:03:30.222
PHP and Python use it on the internals
of the library or of the runtimes.

49
00:03:30.222 --> 00:03:35.926
TV sets, set-top boxes,
your car very likely runs SQLite.

50
00:03:36.986 --> 00:03:41.146
Your fridge might run it if it has
software on it, like gets on everything.

51
00:03:41.146 --> 00:03:43.355
That's how they get to a trillion, right?

52
00:03:43.355 --> 00:03:46.470
Because your iPhone probably has,
I'm gonna guess,

53
00:03:46.470 --> 00:03:49.854
100 instances of SQLite running
across all of the apps,

54
00:03:49.854 --> 00:03:53.187
because it's very common to
put it inside of apps as well.

55
00:03:53.187 --> 00:03:56.865
So wild of how frequently
this library is deployed.

56
00:03:56.865 --> 00:03:57.639
In other words,

57
00:03:57.639 --> 00:04:00.967
it's probably the most battle-tested
piece of software of all time.

58
00:04:00.967 --> 00:04:07.683
It runs everywhere, it requires so little
resources that it will run on any device.

59
00:04:07.683 --> 00:04:09.940
It runs on low power,
it runs on high power,

60
00:04:09.940 --> 00:04:11.895
it will just run on any architecture.

61
00:04:11.895 --> 00:04:15.957
It's one of the first piece of software
that they tend to convert when they're

62
00:04:15.957 --> 00:04:17.751
creating new operating systems.

63
00:04:17.751 --> 00:04:25.935
Cool, so what is SQLite not?

64
00:04:25.935 --> 00:04:30.697
It's not a server, and that's probably
gonna be one of the most confusing things.

65
00:04:30.697 --> 00:04:34.167
If you've never approached SQLite before
and you've used a database before,

66
00:04:34.167 --> 00:04:35.745
it's not a server.

67
00:04:35.745 --> 00:04:39.506
So when you wanna use Mongo or
Postgres or MySQL or

68
00:04:39.506 --> 00:04:44.402
something like that,
you have to start a server, right?

69
00:04:44.402 --> 00:04:47.078
You'd say MongoD or Postgres or
something like that, and

70
00:04:47.078 --> 00:04:49.050
then you just see
the output of the server.

71
00:04:49.050 --> 00:04:52.072
And then all of a sudden,
you can start connecting to your server.

72
00:04:52.072 --> 00:04:55.494
That is not what SQLite is,
and it's not what it does.

73
00:04:55.494 --> 00:04:59.314
Instead, you can think of SQLite
as basically a way to read and

74
00:04:59.314 --> 00:05:00.350
write to a file.

75
00:05:01.530 --> 00:05:05.786
So it's not running a server,
it's a library that just allows you

76
00:05:05.786 --> 00:05:10.195
to basically spit out input into
a file and then read output back out.

77
00:05:10.195 --> 00:05:15.380
It's a way more closer to accurate way of
thinking what SQLite is gonna do for you.

78
00:05:16.610 --> 00:05:21.869
So, in other words,
SQLite has no network access.

79
00:05:21.869 --> 00:05:26.816
It doesn't have users, it doesn't
have passwords and management, and

80
00:05:26.816 --> 00:05:28.501
all that kind of things.

81
00:05:28.501 --> 00:05:31.446
It doesn't handle any of
those kind of things.

82
00:05:33.046 --> 00:05:37.728
It's designed to work on the same computer
as the app that is using it, right?

83
00:05:37.728 --> 00:05:41.211
&gt;&gt; Student: You don't have an SQLite
container that you then connect into,

84
00:05:41.211 --> 00:05:44.058
as opposed to like Postgres,
where you do, right?

85
00:05:44.058 --> 00:05:47.078
You have a node app that
then starts reading and

86
00:05:47.078 --> 00:05:49.797
writing to a file via the SQLite library.

87
00:05:51.947 --> 00:05:55.035
We'll do this over and over and
over again, but for me,

88
00:05:55.035 --> 00:05:58.801
I found this very confusing when I
was getting started with SQLite.

89
00:06:01.723 --> 00:06:04.551
&gt;&gt; Brian Holt: It's a single node,
so there's no replication,

90
00:06:04.551 --> 00:06:06.869
there's no primaries and secondaries.

91
00:06:06.869 --> 00:06:11.673
It's zero configuration to start it,

92
00:06:11.673 --> 00:06:15.754
you just run it and it just works.

93
00:06:17.464 --> 00:06:18.711
Yeah.

94
00:06:18.711 --> 00:06:23.778
&gt;&gt; Student: If the data is locally,
how would you encrypt it?

95
00:06:23.778 --> 00:06:24.564
&gt;&gt; Brian Holt: It's a good question,

96
00:06:24.564 --> 00:06:26.657
not something that we would
necessarily cover in this course.

97
00:06:26.657 --> 00:06:32.390
But there is an extension to SQLite
that you can encrypt your files as well.

98
00:06:32.390 --> 00:06:37.006
And then you can give it a key and
it'll read and write based on the key.

99
00:06:40.668 --> 00:06:44.017
&gt;&gt; Brian Holt: Not something that I've
actually done myself, so I'm not gonna say

100
00:06:44.017 --> 00:06:47.322
a lot more than that, but
I know there's a crypto extension for it.

101
00:06:47.322 --> 00:06:51.015
In other words, it's not built into
escalate itself, I'm pretty sure.

102
00:06:54.117 --> 00:06:57.030
&gt;&gt; Brian Holt: Cool, so single node,
there's no replication,

103
00:06:57.030 --> 00:07:01.071
there's no consensus,
it's designed to be a node of one.

104
00:07:01.071 --> 00:07:05.535
You can do backups, and we will actually
do backups at the end of this, but

105
00:07:05.535 --> 00:07:11.311
there's no concept of primary leader or
secondary follower or anything like that.

106
00:07:11.311 --> 00:07:13.854
So it's on one hand like
a paradigm shift for

107
00:07:13.854 --> 00:07:18.115
I imagine how some of you think about
databases, or maybe for some of you,

108
00:07:18.115 --> 00:07:22.554
this is all you know and you don't know
how to do the other style of database.

109
00:07:22.554 --> 00:07:29.111
But yeah, it's a library,
it's not a server.

110
00:07:29.111 --> 00:07:31.497
SQLite is unbelievably fast,

111
00:07:31.497 --> 00:07:36.372
it's made to work in
performance-sensitive environments.

112
00:07:36.372 --> 00:07:41.353
They take great care to make sure that it
reads and writes at incredible speeds.

113
00:07:41.353 --> 00:07:45.118
That is one of the biggest benefits
of SQLite, is it's just very, very,

114
00:07:45.118 --> 00:07:45.739
very fast.

115
00:07:45.739 --> 00:07:47.653
Particularly cuz you're not
hitting the network at all, right?

116
00:07:47.653 --> 00:07:51.462
It's basically as fast as your
disk can read and write to it.

117
00:07:51.462 --> 00:07:55.235
And sometimes they use tricks to make it
even faster than it probably could be,

118
00:07:55.235 --> 00:07:56.729
right, which is pretty cool.

119
00:07:59.583 --> 00:08:01.558
&gt;&gt; Brian Holt: So
can I use SQLite in production?

120
00:08:01.558 --> 00:08:04.719
And the answer to that is yes and
no, right?

121
00:08:04.719 --> 00:08:10.745
Or the most common cop out answer that
I just love to give, which it depends.

122
00:08:10.745 --> 00:08:16.323
So it depends on what you're storing, it
depends on your sensitivity to downtime,

123
00:08:16.323 --> 00:08:21.112
it depends on how much you kind of wanna
roll your own kind of encryption or

124
00:08:21.112 --> 00:08:22.072
user access.

125
00:08:22.072 --> 00:08:25.321
Or a bunch of things like that
where you can use in production and

126
00:08:25.321 --> 00:08:27.844
now they're actually
tools that will help you.

127
00:08:27.844 --> 00:08:29.547
We'll look at some of them.

128
00:08:29.547 --> 00:08:34.304
But if you wanna just use vanilla SQLite
and you're trying to run Facebook

129
00:08:34.304 --> 00:08:39.044
entirely off of one SQLite node with
no help, no, you can't do that.

130
00:08:39.044 --> 00:08:43.145
It's just not gonna work the way
that you want it to, it's not.

131
00:08:43.145 --> 00:08:47.456
You're gonna be so bound to your
app servers staying up, right?

132
00:08:47.456 --> 00:08:52.589
That is just not gonna work very well,
so it depends on what you need.

133
00:08:52.589 --> 00:08:56.598
The other thing that we'll find out
is that it's intentionally limited.

134
00:08:56.598 --> 00:09:01.947
They intentionally keep
a very small subsection

135
00:09:01.947 --> 00:09:06.774
of features from all of
SQL to keep it small,

136
00:09:06.774 --> 00:09:10.173
fast, performant, simple.

137
00:09:11.713 --> 00:09:16.593
So there's a bunch of features that
Postgres and MySQL and Snowflake and

138
00:09:16.593 --> 00:09:21.965
Mongo and all your other favorite database
pieces of software implement that.

139
00:09:21.965 --> 00:09:25.068
SQLite intentionally does not, and

140
00:09:25.068 --> 00:09:29.306
you have to be willing to
make those trade-offs.

141
00:09:29.306 --> 00:09:32.769
I do have another course on here,
the complete intro to databases,

142
00:09:32.769 --> 00:09:35.952
where we go over several of those
databases and how they work.

143
00:09:35.952 --> 00:09:39.513
I don't talk about SQLite in particular,
but

144
00:09:39.513 --> 00:09:44.712
I do talk about Postgres versus
Mongo versus Neo4j versus Redis.

145
00:09:44.712 --> 00:09:48.058
I think that's it,
I think that's all I cover in there,

146
00:09:48.058 --> 00:09:52.244
which is cool because that kind of
examines all of the various different

147
00:09:52.244 --> 00:09:54.636
perspectives on how to write data apps.

148
00:09:54.636 --> 00:09:59.318
Okay, so
there are several paid services that do

149
00:09:59.318 --> 00:10:03.668
SQLite in the cloud and
they're all lovely.

150
00:10:03.668 --> 00:10:07.103
I've used all of them personally
as part of my day job.

151
00:10:07.103 --> 00:10:10.487
I'll leave it to you to go
figure out which one you like,

152
00:10:10.487 --> 00:10:13.667
but they all kind of take it
from Spin on those ideas.

153
00:10:15.523 --> 00:10:17.459
&gt;&gt; Brian Holt: Cool, any questions so far?

154
00:10:18.489 --> 00:10:19.494
Yeah.

155
00:10:19.494 --> 00:10:22.389
&gt;&gt; Student: So
is it feasible to start with SQLite and

156
00:10:22.389 --> 00:10:28.452
then migrate to Postgres later, or is it
an interoperability concern syntax wise?

157
00:10:28.452 --> 00:10:29.694
&gt;&gt; Brian Holt: It's
a really good question.

158
00:10:29.694 --> 00:10:36.614
I would say most people use it that way,
so extremely viable.

159
00:10:36.614 --> 00:10:39.247
For example, if you go to
the Rails tutorials and try and

160
00:10:39.247 --> 00:10:41.806
teach yourself Rails
just from their website.

161
00:10:41.806 --> 00:10:45.530
They have you start on SQLite,
get really far into it, and

162
00:10:45.530 --> 00:10:48.198
then migrate over to Postgres, I think.

163
00:10:48.198 --> 00:10:50.756
It might be MySQL, it's one of the two.

164
00:10:52.606 --> 00:10:53.899
Super viable, lots of people do it,

165
00:10:53.899 --> 00:10:55.496
there's tons of tools
that help you do that.

166
00:10:55.496 --> 00:11:00.139
There's one that's called pgloader where
you can take a SQLite database and say,

167
00:11:00.139 --> 00:11:03.851
go ahead and dump this directly
into Postgres, and it just works,

168
00:11:03.851 --> 00:11:05.125
which is pretty cool.

169
00:11:06.615 --> 00:11:09.309
It'll work with CSVs and
a bunch of stuff like that.

170
00:11:09.309 --> 00:11:14.435
I'll tell you that for a decade,
that's the way I've used SQLite.

171
00:11:14.435 --> 00:11:19.064
I will say now that these tools that
exist now can scale that out, right?

172
00:11:19.064 --> 00:11:22.307
You can actually just continue
on SQLite as well, and

173
00:11:22.307 --> 00:11:24.549
that's just a choice that you have.

