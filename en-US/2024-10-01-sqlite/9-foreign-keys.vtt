WEBVTT

1
00:00:00.100 --> 00:00:01.970
&gt;&gt; Brian Holt: This, is this fair to say?

2
00:00:01.970 --> 00:00:05.979
Yeah, this is my least favorite part
about SQLITE versus other databases.

3
00:00:05.979 --> 00:00:09.258
This is the thing that drives
me absolutely bananas about it.

4
00:00:09.258 --> 00:00:14.021
And there's like not unless someone
has some magic wand that they

5
00:00:14.021 --> 00:00:15.590
know what to tell me.

6
00:00:15.590 --> 00:00:18.314
There's no better way to do this.

7
00:00:18.314 --> 00:00:20.919
So let's first talk about foreign keys.

8
00:00:20.919 --> 00:00:25.319
Foreign Keys are basically what you and
I have been looking at already,

9
00:00:25.319 --> 00:00:30.104
where we have the album ID in the track,
and that refers to the track, right?

10
00:00:30.104 --> 00:00:31.730
It's a foreign key.

11
00:00:31.730 --> 00:00:37.031
So let's look at schema.

12
00:00:37.031 --> 00:00:40.989
Let's let's do album that might
be a little bit more clear.

13
00:00:40.989 --> 00:00:43.228
So you had this in the album table,

14
00:00:43.228 --> 00:00:46.326
you have an artistid that
refers to the artist.

15
00:00:46.326 --> 00:00:49.897
It is a foreign key, because it's
a key that refers to another table.

16
00:00:49.897 --> 00:00:52.440
That's the foreign part of it, right?

17
00:00:52.440 --> 00:00:57.156
Very useful and you can see here
there's actually a constraint on this,

18
00:00:57.156 --> 00:01:01.497
that it's a foreign key and
that it references a different table.

19
00:01:01.497 --> 00:01:02.995
Which is cool.

20
00:01:02.995 --> 00:01:08.104
The constraint is here ON DELETE NO ACTION
which is basically saying

21
00:01:08.104 --> 00:01:14.468
if this foreign key, let's see, if the
artist gets deleted without deleting their

22
00:01:14.468 --> 00:01:19.955
albums out of the album table,
it's just gonna fail the query, right?

23
00:01:19.955 --> 00:01:22.271
That's what the no action is.

24
00:01:22.271 --> 00:01:26.333
You could have this be set null,
you could have this be set default.

25
00:01:26.333 --> 00:01:27.726
You could have it be
a bunch of other things.

26
00:01:27.726 --> 00:01:33.924
But no action just means, before you let
the other table delete that particular

27
00:01:33.924 --> 00:01:40.139
thing that this is referencing, make
sure that this is deleted first, right?

28
00:01:40.139 --> 00:01:43.427
So, if I want to go delete
Led Zeppelin from the artist table,

29
00:01:43.427 --> 00:01:47.602
I have to go delete all their albums
first, and then I can delete Led Zeppelin,

30
00:01:47.602 --> 00:01:48.824
which I think is good.

31
00:01:48.824 --> 00:01:53.149
It promotes data hygiene,
is what you would call that, right?

32
00:01:53.149 --> 00:01:54.772
That's what a foreign key is.

33
00:01:54.772 --> 00:01:57.476
It's a very common thing
to do in databases,

34
00:01:57.476 --> 00:02:00.606
not that this is way beyond
the scope of this class but

35
00:02:00.606 --> 00:02:05.390
there's some people that would say
like there's performance implications.

36
00:02:05.390 --> 00:02:08.817
And maybe at scale you don't
want to do foreign keys and

37
00:02:08.817 --> 00:02:13.812
so companies like extremely large
companies like Facebook, sometimes don't

38
00:02:13.812 --> 00:02:18.602
use foreign keys even though when
they're you it's a foreign key, right?

39
00:02:18.602 --> 00:02:22.707
I'm gonna say that I don't believe that
I think just use foreign keys, and

40
00:02:22.707 --> 00:02:26.433
then wait until you're as big as
Facebook to solve those problems.

41
00:02:26.433 --> 00:02:28.922
So that's kind of up to you but

42
00:02:28.922 --> 00:02:34.506
[COUGH] If you don't have an opinion yet,
please use foreign keys.

43
00:02:34.506 --> 00:02:37.138
Let's go with that and then Brennan's
problems with foreign keys and

44
00:02:37.138 --> 00:02:39.562
then you can tell me that I'm
wrong when you're a billionaire.

45
00:02:39.562 --> 00:02:43.160
Just give me a couple million as
a compensation for my opinion.

46
00:02:43.160 --> 00:02:46.712
Okay, so foreign keys, I'm a fan.

47
00:02:46.712 --> 00:02:47.922
I think they're a good idea.

48
00:02:47.922 --> 00:02:52.184
I use them in all of in professional and
personal contexts,

49
00:02:52.184 --> 00:02:57.057
as you can see here this is a foreign
key that references the artist.

50
00:02:57.057 --> 00:03:01.656
I think it's useful that you have to go
delete things out of artists before you

51
00:03:01.656 --> 00:03:03.225
can delete them in album.

52
00:03:03.225 --> 00:03:05.854
Anything that helps keep
your data organized,

53
00:03:05.854 --> 00:03:10.452
I think is very positive because not all
of us will have Facebook scaling problems,

54
00:03:10.452 --> 00:03:13.487
but all of us will have data
hygiene problems, right?

55
00:03:13.487 --> 00:03:16.172
That's just a universal
thing when you have tables.

56
00:03:16.172 --> 00:03:17.314
What's my problem, right?

57
00:03:17.314 --> 00:03:19.832
Why am I complaining about SQLITE?

58
00:03:19.832 --> 00:03:24.649
Because SQLITE by default does
not respect foreign keys.

59
00:03:24.649 --> 00:03:29.001
So despite the fact that this knows,
and I have set this to

60
00:03:29.001 --> 00:03:33.987
not delete something from my album or
yeah, from my album table,

61
00:03:33.987 --> 00:03:38.631
if there's an artist that
references it all the way around.

62
00:03:38.631 --> 00:03:43.085
If there's an artist that references
the album table, it will.

63
00:03:43.085 --> 00:03:44.927
It doesn't care, which drives me bananas,

64
00:03:44.927 --> 00:03:47.695
because why do we have this if
you're not gonna respect it, right?

65
00:03:47.695 --> 00:03:51.401
And you can obviously
see that it accepted it.

66
00:03:51.401 --> 00:03:53.936
Let's even go prove my point.

67
00:03:56.630 --> 00:04:01.808
&gt;&gt; Brian Holt: Artist where name equals,

68
00:04:01.808 --> 00:04:04.738
I don't know.

69
00:04:04.738 --> 00:04:10.042
Is it AC/DC, all right, so it's one so

70
00:04:10.042 --> 00:04:17.069
and then if I say SELECT star
FROM ALBUM WHERE ARTIST.

71
00:04:17.069 --> 00:04:22.349
I don't know why I'm doing this all caps,

72
00:04:22.349 --> 00:04:27.336
probably because I'm angry right now,

73
00:04:27.336 --> 00:04:31.744
where artistid equal one, right?

74
00:04:31.744 --> 00:04:33.030
What did I do here?

75
00:04:33.030 --> 00:04:36.756
I had to wear twice.

76
00:04:42.419 --> 00:04:47.925
&gt;&gt; Brian Holt: Select star from
album where artistid equal 1.

77
00:04:47.925 --> 00:04:52.385
Okay, so I should not be able to
delete AC/DC right now, right?

78
00:04:56.049 --> 00:05:00.947
&gt;&gt; Brian Holt: Artist where artistid = 1.

79
00:05:04.877 --> 00:05:10.470
&gt;&gt; Brian Holt: So those are still there,
&gt;&gt; Brian Holt: And

80
00:05:10.470 --> 00:05:13.239
that is gone.

81
00:05:13.239 --> 00:05:14.065
Are you upset?

82
00:05:14.065 --> 00:05:15.476
I'm upset.

83
00:05:15.476 --> 00:05:20.248
I am viscerally upset right now
that this database let me do this

84
00:05:20.248 --> 00:05:24.669
despite the fact that it knows
it should not do that, why?

85
00:05:24.669 --> 00:05:27.250
Why does it do this?

86
00:05:27.250 --> 00:05:33.106
Well, SQLITE is aggressively
backwards compatible.

87
00:05:33.106 --> 00:05:37.225
And so back, way back when it didn't,
I don't even know if it had foreign keys.

88
00:05:37.225 --> 00:05:41.022
And if it did,
it didn't really respect them, right?

89
00:05:41.022 --> 00:05:45.072
And so if you wrote an app way back
then you had foreign keys, and

90
00:05:45.072 --> 00:05:46.608
it wasn't respected.

91
00:05:46.608 --> 00:05:51.203
They didn't wanna break those apps by
failing queries that were not failing

92
00:05:51.203 --> 00:05:52.070
previously.

93
00:05:52.070 --> 00:05:58.064
And so,
they made this the default practice

94
00:05:58.064 --> 00:06:05.200
that now you have to say
PRAGMA foreign-keys=on.

95
00:06:05.200 --> 00:06:10.304
Okay, now that I've typed this now,

96
00:06:10.304 --> 00:06:14.457
it will respect foreign keys.

97
00:06:14.457 --> 00:06:22.878
But, what happens if I just disconnect
from my database and reconnect?

98
00:06:22.878 --> 00:06:26.426
Well, now it's not respecting fragments
of my foreign keys anymore, right?

99
00:06:26.426 --> 00:06:30.262
It's on a per connection basis.

100
00:06:30.262 --> 00:06:32.161
You can't even set it for,
like, the whole file, right?

101
00:06:32.161 --> 00:06:34.147
I can't even just, like,
set it once and say, like, okay.

102
00:06:34.147 --> 00:06:37.596
Anyone reading from this file
has to respect foreign keys.

103
00:06:37.596 --> 00:06:44.686
It's per, yeah, poor connection, upset.

104
00:06:44.686 --> 00:06:46.838
I'm still upset.

105
00:06:46.838 --> 00:06:51.159
So let's just go ahead and
do another delete from artistid2.

106
00:06:51.159 --> 00:06:52.671
It should now tell me, yeah,

107
00:06:52.671 --> 00:06:55.887
I got a foreign key constraint
that's gonna fail this for you.

108
00:07:00.561 --> 00:07:01.804
&gt;&gt; Brian Holt: Pretty silly, right?

109
00:07:01.804 --> 00:07:04.303
Pretty dumb, let me fix my database now.

110
00:07:04.303 --> 00:07:08.372
Now, since I deleted AC/DC, git status.

111
00:07:08.372 --> 00:07:12.574
I just need to get checkout data.db.

112
00:07:12.574 --> 00:07:15.489
If you did what I did,
then you can just go re-download it again.

113
00:07:15.489 --> 00:07:17.939
That also works.

114
00:07:17.939 --> 00:07:19.759
All right, so I'm back in here.

115
00:07:19.759 --> 00:07:22.338
I'm gonna say PRAGMA foreign_keys=on.

116
00:07:22.338 --> 00:07:28.098
And let's do
&gt;&gt; Brian Holt: This,

117
00:07:28.098 --> 00:07:32.189
cuz this should fail
a foreign key constraint.

118
00:07:32.189 --> 00:07:34.694
It does why does it fail that?

119
00:07:34.694 --> 00:07:39.284
Is because I'm trying to tell
it what album ID it is, and

120
00:07:39.284 --> 00:07:44.182
because 9999 and media type,
all these aren't real.

121
00:07:44.182 --> 00:07:48.156
It's like you can't reference
a foreign key that doesn't exist.

122
00:07:48.156 --> 00:07:48.718
If again,

123
00:07:48.718 --> 00:07:53.161
if I tried to do this without the PRAGMA
foreign_key=on it would just be like cool.

124
00:07:53.161 --> 00:07:54.037
Here you go.

125
00:07:54.037 --> 00:07:59.915
Here's a, what is this a track
that references no one, right?

126
00:08:02.482 --> 00:08:06.599
And same thing here I
can't delete from genre.

127
00:08:06.599 --> 00:08:10.564
WHERE GenreId = 24 because this
is a foreign key as well, right?

128
00:08:13.648 --> 00:08:18.673
So what I'm telling you here is anytime
that you're inserting or deleting

129
00:08:18.673 --> 00:08:24.111
from your database, your first query that
you have to send to SQLITE is this one.

130
00:08:24.111 --> 00:08:28.698
Just do it, get into a habit,
make it automatic, just always send it.

131
00:08:28.698 --> 00:08:31.007
You're just always gonna do it every
time you open that connection.

132
00:08:35.483 --> 00:08:41.168
&gt;&gt; Brian Holt: So
there is something that you can do by a,

133
00:08:41.168 --> 00:08:46.046
there's like a computer-level.

134
00:08:46.046 --> 00:08:47.612
Automatically do this on my computer.

135
00:08:47.612 --> 00:08:52.410
Anytime I open any SQLITE file,
put the PRAGMA = foreign key on.

136
00:08:52.410 --> 00:08:56.068
I'm gonna argue that's actually worse
because as soon as your someone else gets

137
00:08:56.068 --> 00:08:58.865
cloned into their computer,
they're not gonna have that and

138
00:08:58.865 --> 00:09:00.821
they're gonna have a different problem.

139
00:09:00.821 --> 00:09:04.854
Or you spin up a new server that
doesn't have that config file, right?

140
00:09:04.854 --> 00:09:10.488
Just don't try and
solve it just suffer, is what I'm trying

141
00:09:10.488 --> 00:09:15.580
to tell you just suffer and
complain that's what I do.

142
00:09:15.580 --> 00:09:20.403
Cool PRAGMAs are basically like
policies that you can tell SQLITE to

143
00:09:20.403 --> 00:09:25.058
respect we're saying for
this it's always on a per connection or

144
00:09:25.058 --> 00:09:29.559
per open session maybe per session
is a better way of saying it.

145
00:09:29.559 --> 00:09:31.936
You have to do it for
every connection to SQLITE Cloud.

146
00:09:31.936 --> 00:09:35.781
There's a bunch of PRAGMAs, but this
is basically the only one that I use on

147
00:09:35.781 --> 00:09:38.477
a consistent basis,
which is the foreign keys one.

148
00:09:42.633 --> 00:09:46.333
&gt;&gt; Brian Holt: Yeah,
you can set it on the connection.

149
00:09:46.333 --> 00:09:47.467
I think I read this somewhere.

150
00:09:47.467 --> 00:09:52.730
I didn't actually put
this into the course,

151
00:09:52.730 --> 00:09:57.727
but, yeah, apparently that's a thing.

152
00:09:57.727 --> 00:09:59.338
So we did constraints here.

153
00:09:59.338 --> 00:10:00.973
We're not going to talk
anymore about constraints.

154
00:10:00.973 --> 00:10:06.114
Again, I talked more about it in
the Postgres one, constraints.

155
00:10:06.114 --> 00:10:07.145
There's some other stuff in there.

156
00:10:07.145 --> 00:10:11.793
They can basically make enumerated types
where basically it has to be one of

157
00:10:11.793 --> 00:10:13.284
these things, right?

158
00:10:13.284 --> 00:10:14.632
We're not gonna talk too much about it.

159
00:10:14.632 --> 00:10:19.344
That's not that interesting for
the sake of this class.

160
00:10:19.344 --> 00:10:20.198
We did a no action.

161
00:10:20.198 --> 00:10:21.955
We talked about that.

162
00:10:21.955 --> 00:10:25.112
There's also one called restrict,
which is essentially the same thing and

163
00:10:25.112 --> 00:10:28.665
actually don't fundamentally understand
the difference between to do no action and

164
00:10:28.665 --> 00:10:29.173
restrict.

165
00:10:29.173 --> 00:10:32.008
I guess there's some minute
differences there, but

166
00:10:32.008 --> 00:10:34.661
I see everyone do no action,
so that's what I do.

167
00:10:34.661 --> 00:10:37.184
There's a pretty cool one
called On DELETE CASCADE.

168
00:10:37.184 --> 00:10:39.012
If I delete something
from the artist table,

169
00:10:39.012 --> 00:10:41.379
then go ahead and
delete all their albums automatically.

170
00:10:41.379 --> 00:10:44.098
That actually,
that behavior would make sense to me.

171
00:10:44.098 --> 00:10:48.865
So you could do that, just being aware
that you can accidentally cascade deletes

172
00:10:48.865 --> 00:10:53.859
into things, because that's gonna then
delete all of your tracks as well, right?

173
00:10:53.859 --> 00:10:58.144
If you did like multiple
on cascade deletes, and

174
00:10:58.144 --> 00:11:01.184
then you can do ON DELETE SET null.

175
00:11:01.184 --> 00:11:05.537
So if this gets deleted then and
there's a foreign key reference, right,

176
00:11:05.537 --> 00:11:08.247
then you can do a null and
set a default as well.

