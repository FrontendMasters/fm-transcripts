WEBVTT

1
00:00:00.000 --> 00:00:03.159
&gt;&gt; Brian Holt: So we're gonna start doing
inserting things into the database.

2
00:00:07.337 --> 00:00:11.895
&gt;&gt; Brian Holt: So I'm gonna say
INSERT INTO whatever table that you wanna

3
00:00:11.895 --> 00:00:14.964
insert into, INSERT INTO Artist, and

4
00:00:14.964 --> 00:00:21.032
then you're going to give it a list of
values of that you're going to give it.

5
00:00:21.032 --> 00:00:23.928
We're only going to give it one value
because there's only two values and

6
00:00:23.928 --> 00:00:26.088
one of them is automatically
assigned which is the ID.

7
00:00:26.088 --> 00:00:30.451
So I'm gonna say,
I want to put in a name but

8
00:00:30.451 --> 00:00:34.572
as you might imagine if I had like genre,

9
00:00:34.572 --> 00:00:39.438
year, number_of_band_members, right?

10
00:00:39.438 --> 00:00:43.455
Like you would just do that here,
we'll only have name,

11
00:00:43.455 --> 00:00:46.725
because that's the only
column that exists.

12
00:00:46.725 --> 00:00:51.614
And we'll say values, and
whatever you want to insert into there.

13
00:00:51.614 --> 00:00:55.938
I think it's a crying shame that
Radiohead is not in this list, so

14
00:00:55.938 --> 00:01:01.380
I'm going to put in Radiohead, but feel
free to put in your favorite band, okay?

15
00:01:01.380 --> 00:01:06.170
It didn't yell at me so that is sqlite way
of saying, yeah, sure, I did it, right?

16
00:01:06.170 --> 00:01:08.112
Whatever you told me to do, I did it,

17
00:01:08.112 --> 00:01:10.830
I'm not gonna tell you any
more about it than that.

18
00:01:10.830 --> 00:01:12.006
What if I wanna see it?

19
00:01:12.006 --> 00:01:19.277
Well, as you might imagine, you're
just gonna write another query, great.

20
00:01:19.277 --> 00:01:25.761
WHERE name = 'Radiohead';
&gt;&gt; Brian Holt: You

21
00:01:25.761 --> 00:01:29.590
can see there,
row number 276 is Radiohead.

22
00:01:35.437 --> 00:01:38.261
&gt;&gt; Brian Holt: Cool, just to show you
something here cuz we're not gonna do it

23
00:01:38.261 --> 00:01:41.909
with a table that has multiple values, but
I wrote a query like this here as well.

24
00:01:41.909 --> 00:01:45.775
So INSERT INTO food (name,
food_group, color).

25
00:01:45.775 --> 00:01:49.147
And then when you're doing VALUES,
it just matters the order,

26
00:01:49.147 --> 00:01:53.468
that order, so the name, carrot,
food_group, vegetable, color, orange.

27
00:01:53.468 --> 00:01:56.565
Just make sure that you follow
the same pattern, right?

28
00:01:56.565 --> 00:02:00.261
If you switch vegetable and carrot,
it thinks the name is gonna be vegetable,

29
00:02:00.261 --> 00:02:03.230
the food_group will be carrot,
which is incorrect, right?

30
00:02:03.230 --> 00:02:04.819
So, the order is important there.

31
00:02:08.055 --> 00:02:11.017
&gt;&gt; Brian Holt: Yeah,
this is just talking about quotes,

32
00:02:11.017 --> 00:02:14.077
we already talked about
that a bit earlier.

33
00:02:14.077 --> 00:02:18.395
Let's talk about updates.

34
00:02:18.395 --> 00:02:24.004
So let's decide for a second that I
didn't want to do Radiohead instead,

35
00:02:24.004 --> 00:02:27.179
I really actually wanted to do Daft Punk.

36
00:02:27.179 --> 00:02:30.913
We're gonna do

37
00:02:30.913 --> 00:02:36.372
UPDATE Artist SET name

38
00:02:36.372 --> 00:02:41.828
= 'Daft Punk' WHERE

39
00:02:41.828 --> 00:02:49.591
name= 'Radiohead'; okay?

40
00:02:52.120 --> 00:02:56.031
&gt;&gt; Brian Holt: Again, by it not saying
anything, that's its way of saying like,

41
00:02:56.031 --> 00:02:57.893
sure, cool, I did it, right?

42
00:02:57.893 --> 00:03:00.490
So now if I go back and say,
by the all, you can just hit up,

43
00:03:00.490 --> 00:03:03.306
just like in a terminal, and
it'll give you back old queries.

44
00:03:03.306 --> 00:03:07.413
So I'm just gonna go update this
one to say instead of radiohead,

45
00:03:07.413 --> 00:03:08.765
I'll say daft punk.

46
00:03:08.765 --> 00:03:11.847
276, notice it's the same one, and
if I run the Radiohead one again,

47
00:03:11.847 --> 00:03:14.747
notice that it doesn't get anything
'cause it updated the old one.

48
00:03:14.747 --> 00:03:18.656
What do you think would happen if I
didn't put that where clause in there?

49
00:03:18.656 --> 00:03:23.973
Let's see, not that, there we go.

50
00:03:23.973 --> 00:03:27.579
So if I do UPDATE Artist SET
name = 'Daft Punk';

51
00:03:31.683 --> 00:03:34.117
&gt;&gt; Brian Holt: SELECT FROM Artist.

52
00:03:38.639 --> 00:03:40.626
&gt;&gt; Brian Holt: Everything
is now Daft Punk.

53
00:03:40.626 --> 00:03:42.725
That is the only music
that we now have forever.

54
00:03:42.725 --> 00:03:46.309
I'm not gonna complain too much.

55
00:03:46.309 --> 00:03:47.006
Pretty funny, right?

56
00:03:47.006 --> 00:03:53.035
Don't do that, by the way,
you just blew up your database.

57
00:03:53.035 --> 00:03:56.978
There's not really a good way to recover
in SQLite, because they just again,

58
00:03:56.978 --> 00:03:58.902
they don't include stuff like that.

59
00:03:58.902 --> 00:04:03.520
So we really have to go get another
copy of the database if you follow

60
00:04:03.520 --> 00:04:04.597
along with me.

61
00:04:04.597 --> 00:04:08.980
I, knowing this, can just say git

62
00:04:08.980 --> 00:04:14.280
checkout data, because I have it in git.

63
00:04:14.280 --> 00:04:16.506
And now if I do select star from artist,

64
00:04:16.506 --> 00:04:19.620
it knows everything's back
to normal again, right?

65
00:04:19.620 --> 00:04:24.579
But be very careful with SQL because it
will do precisely what you tell it to do,

66
00:04:24.579 --> 00:04:25.115
right?

67
00:04:25.115 --> 00:04:25.800
It does not care,

68
00:04:25.800 --> 00:04:28.415
it's like you want to update
literally everything to be Daft Punk?

69
00:04:28.415 --> 00:04:32.147
Sure man, you're the boss, right?

70
00:04:32.147 --> 00:04:34.576
So just be careful about that.

71
00:04:38.697 --> 00:04:41.796
&gt;&gt; Brian Holt: We actually don't
talk about upserts in here,

72
00:04:41.796 --> 00:04:46.521
you can also do upserts in SQLite,
where basically like if this exists,

73
00:04:46.521 --> 00:04:49.083
then insert, if not, then create it.

74
00:04:49.083 --> 00:04:53.313
Don't really need to talk
about that today, but

75
00:04:53.313 --> 00:04:56.621
feel free to look into that yourself.

76
00:04:59.017 --> 00:05:02.815
&gt;&gt; Brian Holt: So
let's insert back our Daft Punk.

77
00:05:05.569 --> 00:05:09.245
&gt;&gt; Brian Holt: We're going to do that and

78
00:05:09.245 --> 00:05:12.985
then
&gt;&gt; Brian Holt: All right, so now I have a

79
00:05:18.770 --> 00:05:20.535
&gt;&gt; Brian Holt: There we go,

80
00:05:20.535 --> 00:05:24.067
record 276 Daft Punk.

81
00:05:24.067 --> 00:05:29.002
So we're gonna say UPDATE Artist SET Name

82
00:05:29.002 --> 00:05:33.665
to another must be French techno band.

83
00:05:33.665 --> 00:05:39.576
I'm just kidding, but I happened to
pick another French techno band,

84
00:05:39.576 --> 00:05:43.923
so we want'Justice' WHERE
name = 'Daft punk'.

85
00:05:43.923 --> 00:05:48.786
And then let's say you're not satisfied
with the fact that it doesn't

86
00:05:48.786 --> 00:05:50.091
return anything.

87
00:05:50.091 --> 00:05:55.469
You can say RETURNING whatever you
want that select statement to be.

88
00:05:55.469 --> 00:05:59.411
So I'm just going to say RETURNING
star and now, I updated it and

89
00:05:59.411 --> 00:06:02.048
now it gives me back
the new record as well.

90
00:06:02.048 --> 00:06:06.616
Which can be helpful sometimes,
if you wanted to just do it like one go,

91
00:06:06.616 --> 00:06:09.527
you don't want to do two
queries to get that.

92
00:06:09.527 --> 00:06:10.692
That can be helpful as well.

93
00:06:10.692 --> 00:06:14.604
I frequently will do that just when I'm,
you know, interacting with the CLI.

94
00:06:17.922 --> 00:06:24.214
&gt;&gt; Brian Holt: RETURNING star and you
can just do like RETURNING name, right?

95
00:06:24.214 --> 00:06:25.052
Or something like that.

96
00:06:25.052 --> 00:06:28.287
That's
&gt;&gt; Brian Holt: And

97
00:06:28.287 --> 00:06:33.105
again, I did this look,
It didn't complain cuz it was valid query.

98
00:06:33.105 --> 00:06:34.919
Nothing would match this, right?

99
00:06:34.919 --> 00:06:37.586
Because there's no Daft Punk
in the database, right?

100
00:06:37.586 --> 00:06:38.755
And so I did RETURNING name.

101
00:06:38.755 --> 00:06:40.797
It didn't do anything,
because nothing was updated, right?

102
00:06:40.797 --> 00:06:45.697
So we returned the entire set
which was a set of zero, right?

103
00:06:45.697 --> 00:06:46.444
Nothing in there.

104
00:06:49.678 --> 00:06:52.191
&gt;&gt; Brian Holt: So
that's something to be aware of,

105
00:06:52.191 --> 00:06:57.062
you do wanna understand sometimes if
your queries did anything or not.

106
00:06:57.062 --> 00:06:59.960
Because if they're valid,
they will run and it won't complain.

107
00:07:05.125 --> 00:07:08.834
&gt;&gt; Brian Holt: Okay, and then we can do

108
00:07:08.834 --> 00:07:16.446
a DELETE FROM Artist WHERE
name = 'Justice'.

109
00:07:16.446 --> 00:07:20.094
And you can just end that query there and
again if it does anything,

110
00:07:20.094 --> 00:07:23.494
it won't tell you, or
you can do RETURNING star here as well.

111
00:07:23.494 --> 00:07:26.804
Returning works on deletes, but
you don't have to have it as well.

112
00:07:28.893 --> 00:07:32.595
&gt;&gt; Brian Holt: And this will give
you back everything that it deleted.

113
00:07:32.595 --> 00:07:36.845
And select star WHERE 'Justice'.

114
00:07:36.845 --> 00:07:40.191
Not in there anymore.

115
00:07:40.191 --> 00:07:42.621
So that is deletes.

116
00:07:42.621 --> 00:07:48.119
&gt;&gt; Student 1: Where is sqlite
storing these data updates?

117
00:07:48.119 --> 00:07:48.863
&gt;&gt; Brian Holt: That's a good question.

118
00:07:48.863 --> 00:07:53.638
So if I get out of my database here,

119
00:07:53.638 --> 00:08:01.233
you can see I'm modifying
this file called data.db.

120
00:08:01.233 --> 00:08:05.041
And if I just do an ls here, you can see
I have this data.db file right here.

121
00:08:05.041 --> 00:08:07.736
If I do a git status?

122
00:08:07.736 --> 00:08:11.726
Yeah, you can see it's modified,
because we've been working on this, right?

123
00:08:11.726 --> 00:08:16.948
Since the original check into which
was just the original Chinook data.

124
00:08:19.164 --> 00:08:24.027
Sqlite is a library for editing files
in a particular way that's stored in

125
00:08:24.027 --> 00:08:28.272
a certain way that's compatible
with other sqlite databases.

126
00:08:28.272 --> 00:08:29.503
It's not a server, right?

127
00:08:29.503 --> 00:08:34.184
It's not doing of those things,
it's just modifying this file,

128
00:08:34.184 --> 00:08:38.457
it's a library for
modifying these sqlite database files.

129
00:08:38.457 --> 00:08:44.693
You can see here I'm actually
tracking my database data in git.

130
00:08:44.693 --> 00:08:48.549
I'm gonna say that this is not
a normal pattern for the most part.

131
00:08:48.549 --> 00:08:51.075
It depends totally on what your data is,
right?

132
00:08:51.075 --> 00:08:57.918
This Chinook database is not very dynamic,
right?

133
00:08:57.918 --> 00:09:03.594
It's example, it totally makes sense that
I would track this in my database or

134
00:09:03.594 --> 00:09:07.649
my git report because it's
not meant really to change.

135
00:09:07.649 --> 00:09:10.058
But imagine if you have like
a Shopify storefront or

136
00:09:10.058 --> 00:09:12.644
just like a normal storefront or
something like that.

137
00:09:12.644 --> 00:09:15.418
And you're reading and
writing to a database in production,

138
00:09:15.418 --> 00:09:17.936
that would mean that you would
have data in production.

139
00:09:17.936 --> 00:09:23.223
Production that would mean your production
servers would have to check intogGit and

140
00:09:23.223 --> 00:09:25.465
then push back into your git repos.

141
00:09:25.465 --> 00:09:29.408
That feels really weird,
and I'm gonna say bad.

142
00:09:29.408 --> 00:09:33.079
To me I wouldn't suggest doing that.

143
00:09:33.079 --> 00:09:38.608
That it just kinda depends on your
tolerance for those kind of things,

144
00:09:38.608 --> 00:09:44.901
and for pushing back into your git repo
and the potential for data loss, right?

145
00:09:44.901 --> 00:09:49.287
Cuz imagine like your server goes down,
how long ago was your last check-in?

146
00:09:49.287 --> 00:09:50.385
Was it a day?

147
00:09:50.385 --> 00:09:51.086
Was it an hour?

148
00:09:51.086 --> 00:09:52.627
Was it two months, right?

149
00:09:52.627 --> 00:09:55.400
You would lose all that data.

150
00:09:55.400 --> 00:09:58.485
So normally I wouldn't do that.

151
00:09:58.485 --> 00:10:01.494
You might do something like where you're
running in like Kubernetes or Docker or

152
00:10:01.494 --> 00:10:02.345
something like that.

153
00:10:02.345 --> 00:10:05.635
And there's a shared volume maybe or
something like that.

154
00:10:05.635 --> 00:10:06.785
That feels weird too.

155
00:10:06.785 --> 00:10:11.106
That's where you get into these like
weird problems with sqlite of like when,

156
00:10:11.106 --> 00:10:13.343
how do you get all this into production?

157
00:10:13.343 --> 00:10:19.420
Actually, the best way and
I'll show you here at the end,

158
00:10:19.420 --> 00:10:24.023
is this thing called
light FS backups here.

159
00:10:24.023 --> 00:10:27.921
Every time that you write
to the sqlite file,

160
00:10:27.921 --> 00:10:31.418
it will stream off to another location.

161
00:10:31.418 --> 00:10:34.645
So it's just basically like,
right to your database, and

162
00:10:34.645 --> 00:10:37.495
then this gets streamed to
an S3 bucket somewhere.

163
00:10:37.495 --> 00:10:40.102
That's how I would end
up choosing to do it.

