WEBVTT

1
00:00:00.300 --> 00:00:06.020
&gt;&gt; Speaker 1: Where would you kind of
draw the lines as far as writing tests or

2
00:00:06.020 --> 00:00:10.100
test-driven development around SQLite?

3
00:00:10.100 --> 00:00:14.547
&gt;&gt; Brian Holt: I was literally talking
about this with my boss yesterday.

4
00:00:16.259 --> 00:00:20.645
&gt;&gt; Brian Holt: You don't have to test
SQLite, it's extremely well tested.

5
00:00:21.705 --> 00:00:26.494
Dr. Hipp is obsessive with the test that
he writes, and I mean that in actually

6
00:00:26.494 --> 00:00:31.335
an admiring way, that he writes tester
to test his software extremely well.

7
00:00:31.335 --> 00:00:35.176
I think it's part of the reason they
don't accept outside contributions,

8
00:00:35.176 --> 00:00:38.425
is because they're obsessed with
keeping it so battle tested.

9
00:00:39.555 --> 00:00:45.650
So, if I call this select, do I get
the correct thing back from the database?

10
00:00:45.650 --> 00:00:47.239
I'm not testing that, right?

11
00:00:47.239 --> 00:00:54.209
I'm assuming that SQLite is going to
continue to be extremely reliable.

12
00:00:56.549 --> 00:01:00.513
If you have strong business
logic tied into your database,

13
00:01:00.513 --> 00:01:05.510
which you can using things like
constraints and triggers and functions and

14
00:01:05.510 --> 00:01:10.501
all sorts of wild things, much of which
we're not gonna talk about today,

15
00:01:10.501 --> 00:01:14.809
because I don't think a lot of
that stuff belongs in a database.

16
00:01:14.809 --> 00:01:17.492
Then you'd wanna write some integration
tests to make sure that your

17
00:01:17.492 --> 00:01:20.268
business logic that you're providing
to SQLite to run on your behalf,

18
00:01:20.268 --> 00:01:21.674
run the way that you expect them to.

19
00:01:23.014 --> 00:01:23.924
So, I would test that.

20
00:01:26.654 --> 00:01:29.334
Beyond that,
most of the danger is in your code, right?

21
00:01:29.334 --> 00:01:32.683
So I'm much more into the unit test
of make things modular, make them

22
00:01:32.683 --> 00:01:37.444
self-contained where possible, and then
pull them out and test them individually.

23
00:01:37.444 --> 00:01:39.493
The nice thing about SQLite
is it runs anywhere.

24
00:01:39.493 --> 00:01:45.013
It can run inside of GitHub actions,
it can run in circle, Jenkins, wherever.

25
00:01:45.013 --> 00:01:48.541
So you can just spin up a database,
run a bunch of tests that call and

26
00:01:48.541 --> 00:01:49.553
hit the database.

27
00:01:49.553 --> 00:01:52.517
It'll be very fast,
you don't have to worry about latency or

28
00:01:52.517 --> 00:01:55.823
anything like that, or
tear down or anything like that.

29
00:01:55.823 --> 00:02:00.247
So those are kind of like they're almost
integration tests, I guess, there's two

30
00:02:00.247 --> 00:02:04.502
different pieces working together, but
it's a library at that point, right?

31
00:02:04.502 --> 00:02:07.642
So, I wouldn't be too
amiss to just go ahead and

32
00:02:07.642 --> 00:02:10.712
write those tests using
the SQLite database.

33
00:02:11.822 --> 00:02:14.633
Perhaps one of the strongest arguments for

34
00:02:14.633 --> 00:02:18.613
SQLite is that these kind of
scenarios are really possible,

35
00:02:18.613 --> 00:02:23.468
that you can have just a normal,
vanilla copy of SQLite running locally.

36
00:02:23.468 --> 00:02:27.968
That you read and write to a bunch of
times for your local development cycle,

37
00:02:27.968 --> 00:02:31.623
and then you push into the your
Git repo that then deploys, and

38
00:02:31.623 --> 00:02:36.079
then it calls something like tersa or
SQLite cloud or something like that.

39
00:02:39.449 --> 00:02:43.180
That's a really good workflow,
that works really well for me, and

40
00:02:43.180 --> 00:02:44.559
it tests very well.

41
00:02:44.559 --> 00:02:47.882
So, that's kind of some unsorted
thoughts about what I think about

42
00:02:47.882 --> 00:02:49.739
testing with SQLite.

43
00:02:49.739 --> 00:02:53.335
Don't test the database itself,
test your code, and

44
00:02:53.335 --> 00:02:58.354
if you have heavy lifting being done
in your database, then test those two.

45
00:03:02.178 --> 00:03:08.703
&gt;&gt; Speaker 1: So, [COUGH] like in
a pipeline, you would just install

46
00:03:08.703 --> 00:03:15.115
a new instance of SQLite
as part of a workflow?

47
00:03:15.115 --> 00:03:18.065
&gt;&gt; Brian Holt: Basically, I mean,
essentially what I would do is,

48
00:03:18.065 --> 00:03:22.835
this is the app that we're gonna be
working on here in just a little bit.

49
00:03:22.835 --> 00:03:26.122
You can see I include here data.db.

50
00:03:26.122 --> 00:03:30.945
I might just include a test.db,
preceded with a bunch of valid data,

51
00:03:30.945 --> 00:03:33.795
script of PII and stuff like that.

52
00:03:33.795 --> 00:03:36.592
And then all of your tests can
just obliterate that database and

53
00:03:36.592 --> 00:03:37.955
not check it in, right?

54
00:03:37.955 --> 00:03:39.595
And so you can just think run
all your tests, no problem.

55
00:03:41.880 --> 00:03:42.671
&gt;&gt; Brian Holt: Pretty hot, right?

56
00:03:42.671 --> 00:03:47.622
Like, it's so much easier to not have to
spin up a version of your database and

57
00:03:47.622 --> 00:03:52.420
do a bunch of tests by that and then
throw it away and then re instantiate it,

58
00:03:52.420 --> 00:03:54.194
and all that kind of stuff.

59
00:03:54.194 --> 00:03:56.946
Yeah, that workflow works
really well with SQLite.

