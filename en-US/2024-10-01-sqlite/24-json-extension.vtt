WEBVTT

1
00:00:00.000 --> 00:00:01.397
&gt;&gt; Brian Holt: So
I showed that to you just so

2
00:00:01.397 --> 00:00:05.125
you can go play around with all these
if you're interested in playing with,

3
00:00:05.125 --> 00:00:07.998
I don't know, Base64 encoding or
anything like that.

4
00:00:07.998 --> 00:00:12.316
But we are gonna use JSON1, which is,
yeah, I'm gonna go ahead and say it's

5
00:00:12.316 --> 00:00:16.779
the most useful of these, or probably
the one that you'll end up using the most.

6
00:00:19.633 --> 00:00:22.110
&gt;&gt; Brian Holt: So let's go to that one.

7
00:00:22.110 --> 00:00:24.797
So sqlpkg install json1.

8
00:00:24.797 --> 00:00:26.481
Okay, so we're going to install that.

9
00:00:26.481 --> 00:00:30.218
I already have it installed, so
you'll see this at the latest version.

10
00:00:30.218 --> 00:00:32.745
Here, you should see that it'll load.

11
00:00:32.745 --> 00:00:38.002
And we will grab the which here,
so we can get the path.

12
00:00:38.002 --> 00:00:39.429
Very good, we have that.

13
00:00:39.429 --> 00:00:40.725
I'll copy that.

14
00:00:40.725 --> 00:00:45.836
We're gonna do edu-sqLite 3, and
we're gonna open data.db, and

15
00:00:45.836 --> 00:00:51.740
then we're gonna do .load.pathway here,
just like we did with the hello one.

16
00:00:51.740 --> 00:00:56.284
Okay, now it's all loaded, now,
we have our JSON extension loaded, and

17
00:00:56.284 --> 00:00:58.105
we can start making queries.

18
00:00:58.105 --> 00:01:00.389
Why do we care about the JSON extension?

19
00:01:00.389 --> 00:01:01.346
Why is this an important one?

20
00:01:01.346 --> 00:01:04.355
Why do I think you should probably
be using this quite a bit?

21
00:01:05.825 --> 00:01:09.897
&gt;&gt; Brian Holt: I think it's important
because it allows you to have unstructured

22
00:01:09.897 --> 00:01:11.941
data and still be able to use SQL.

23
00:01:11.941 --> 00:01:16.165
So kind a Mongo, where it's just kinda
a grab bag of various different keys and

24
00:01:16.165 --> 00:01:16.684
values.

25
00:01:16.684 --> 00:01:20.301
You can do that with an SQL,
you don't have to have a rigid column for

26
00:01:20.301 --> 00:01:21.076
everything.

27
00:01:21.076 --> 00:01:24.349
This is how you end up 2000
columns in a database,

28
00:01:24.349 --> 00:01:27.346
if you have a bunch of
different potential keys.

29
00:01:27.346 --> 00:01:31.068
30 of them are null, right, and
the rest of them are sometimes populated,

30
00:01:31.068 --> 00:01:31.884
sometimes not.

31
00:01:31.884 --> 00:01:36.784
If you find yourself in that pattern
where, you're taking metadata for media,

32
00:01:36.784 --> 00:01:41.826
maybe, for an example, and if it's a
movie, it has a director, if it's a track,

33
00:01:41.826 --> 00:01:45.955
it has an artist, right, and
a producer, and blah, blah, blah.

34
00:01:45.955 --> 00:01:49.163
There's, this sometime has this,
this sometimes has this, and

35
00:01:49.163 --> 00:01:51.008
you're trying to mix them together.

36
00:01:51.008 --> 00:01:53.370
You don't wanna have 2,000 columns.

37
00:01:53.370 --> 00:01:58.272
What you wanna have is a way to have
unstructured data that can sometimes be

38
00:01:58.272 --> 00:02:00.183
defined and sometimes not.

39
00:02:00.183 --> 00:02:04.699
Normally, you would reach for
Mongo in that kinda situation, but

40
00:02:04.699 --> 00:02:10.103
now with PostgreSQL and JSONB, both in
PostgreSQL and MySQL and now in SQLite,

41
00:02:10.103 --> 00:02:15.770
it's a much better pattern and it's more
accessible within those databases now.

42
00:02:15.770 --> 00:02:18.687
But .load is how you load an extension.

43
00:02:18.687 --> 00:02:20.634
That's just what it's there for.

44
00:02:24.037 --> 00:02:25.923
&gt;&gt; Brian Holt: So you might be wondering,

45
00:02:25.923 --> 00:02:30.681
how do I load this within a Node.js
scenario or something like that?

46
00:02:30.681 --> 00:02:34.927
Because I don't think the dot notation
is gonna work from the clients.

47
00:02:34.927 --> 00:02:36.214
I've never tried.

48
00:02:36.214 --> 00:02:37.340
One might try.

49
00:02:37.340 --> 00:02:44.341
But you can compile SQLite with
the JSON extension pre-built in so

50
00:02:44.341 --> 00:02:48.850
you don't have to do it every single time.

51
00:02:48.850 --> 00:02:53.885
Anyway, yeah, well,
it would be very easy to just say load

52
00:02:53.885 --> 00:02:59.037
sqlite3 with extensions node.js or
something like that.

53
00:02:59.037 --> 00:03:04.421
And I'm sure at the top, I think, a Stack
Overflow, it's something like this, right?

54
00:03:04.421 --> 00:03:06.990
There you go.
It's db.loadExtension is exactly what you

55
00:03:06.990 --> 00:03:07.614
would do.

56
00:03:07.614 --> 00:03:09.900
So there you go.

57
00:03:09.900 --> 00:03:11.361
So that would work.

58
00:03:11.361 --> 00:03:15.385
You can also pre-compile it.

59
00:03:15.385 --> 00:03:17.532
There's a bunch of ways
to go about handling it.

60
00:03:17.532 --> 00:03:21.643
So would you version control
the dependency in your repository, or

61
00:03:21.643 --> 00:03:24.816
would that be installed and
it would be get ignored,

62
00:03:24.816 --> 00:03:27.139
like any other software dependency?

63
00:03:27.139 --> 00:03:32.984
Yeah, the question is, do I keep
it in source control or do I not?

64
00:03:32.984 --> 00:03:36.006
I would be sorely tempted to
just keep it in source control.

65
00:03:36.006 --> 00:03:37.637
It doesn't update that frequently.

66
00:03:37.637 --> 00:03:40.009
Reliably, get the same
one every single time.

67
00:03:40.009 --> 00:03:42.969
It's not a trillion files,
it's a couple of files.

68
00:03:42.969 --> 00:03:51.530
And SQL package, I don't think this has
a manifest that you're able to install.

69
00:03:51.530 --> 00:03:52.720
Maybe it does.

70
00:03:52.720 --> 00:03:55.352
&gt;&gt; Speaker 2: Thought I saw a lockfile
at the bottom of the documentation, but

71
00:03:55.352 --> 00:03:56.230
I didn't-
&gt;&gt; Brian Holt: Lockfile.

72
00:03:56.230 --> 00:03:57.185
&gt;&gt; Speaker 2: Really dig into it.

73
00:03:57.185 --> 00:03:59.818
&gt;&gt; Brian Holt: Neither did I, cool.

74
00:03:59.818 --> 00:04:03.906
Well, if that works well,
I might be tempted to try it.

75
00:04:03.906 --> 00:04:05.285
Good question.

76
00:04:05.285 --> 00:04:09.334
I will say, historically,
I think I've curled it and

77
00:04:09.334 --> 00:04:14.262
just pulled it down, which is probably
not the best way cuz then you

78
00:04:14.262 --> 00:04:17.881
have this point of failure
if it's not working.

79
00:04:17.881 --> 00:04:23.777
But YOLO works on my computer, so
source control seems fine to me.

80
00:04:23.777 --> 00:04:26.771
Typically, I'm not a person to
put generated files into source

81
00:04:26.771 --> 00:04:29.599
control unless it's something
like this where it changes so

82
00:04:29.599 --> 00:04:32.779
infrequently that you
wouldn't be remiss to do so.

83
00:04:32.779 --> 00:04:37.230
So I will say of the two comparing
SQLite's version of the JSON kind of

84
00:04:37.230 --> 00:04:42.398
extension and the one that's built into
Postgres, I prefer the Postgres one.

85
00:04:42.398 --> 00:04:44.499
I think it just makes it a bit cleaner.

86
00:04:44.499 --> 00:04:49.583
This feels kinda tacked on, and
that's because it's kind of tacked on,

87
00:04:49.583 --> 00:04:52.783
whereas it's a core
feature of Postgres now.

88
00:04:52.783 --> 00:04:57.304
That being said, they both work, so.

89
00:04:57.304 --> 00:05:01.755
So we're gonna do that same pattern of
just like using SELECT run functions, cuz

90
00:05:01.755 --> 00:05:06.086
I just want you to see how to formulate
all of these various different queries.

91
00:05:06.086 --> 00:05:10.118
So SELECT json, and it's just a function
that you give it a JSON string, and

92
00:05:10.118 --> 00:05:13.404
it will give you back a JSON
representation of that in SQLite.

93
00:05:15.544 --> 00:05:19.255
So it's kind of awkward to type out, and
I would suggest all of you just copy and

94
00:05:19.255 --> 00:05:22.629
paste this, because, I don't know
if you've ever tried to handcraft

95
00:05:22.629 --> 00:05:26.678
JSON before, but I always get it wrong the
first time, because I get the wrong quote,

96
00:05:26.678 --> 00:05:27.831
the wrong curly brace.

97
00:05:27.831 --> 00:05:29.690
I just never get it right.

98
00:05:29.690 --> 00:05:36.175
username,
&gt;&gt; Brian Holt: btholt,

99
00:05:36.175 --> 00:05:41.039
and then I'm gonna do "favorite".

100
00:05:43.932 --> 00:05:48.673
&gt;&gt; Brian Holt: So we're kinda
gonna start modeling users table.

101
00:05:48.673 --> 00:05:51.481
Maybe we have some sort of ability for
people to log into our site and

102
00:05:51.481 --> 00:05:54.341
click favorites of their band so
they get notified of new releases or

103
00:05:54.341 --> 00:05:55.308
something like that.

104
00:05:55.308 --> 00:05:58.741
That's kind of what we're gonna
model here with the JSON extension.

105
00:05:58.741 --> 00:06:03.448
Mostly, why I would choose JSON in
this particular case is now I can

106
00:06:03.448 --> 00:06:08.409
start modeling favorites as an array
of their favorite artists rather

107
00:06:08.409 --> 00:06:12.632
than have to have another table
of their favorite artists.

108
00:06:12.632 --> 00:06:16.998
To be super frank, given the structure
of our data that already exists where we

109
00:06:16.998 --> 00:06:21.100
already have an artist table,
I probably wouldn't model it this way, or

110
00:06:21.100 --> 00:06:25.022
I would rather collect IDs here,
like 115 or something like that.

111
00:06:25.022 --> 00:06:26.547
That's kind of up to you.

112
00:06:28.995 --> 00:06:33.312
&gt;&gt; Brian Holt: But it does make
it easy to have relations without

113
00:06:33.312 --> 00:06:37.855
necessarily having to have
another table with it.

114
00:06:37.855 --> 00:06:40.346
What's hard though is you can't make
these foreign keys here, right?

115
00:06:40.346 --> 00:06:46.194
So you can't have any sort of protection
that foreign keys should guarantee you.

116
00:06:46.194 --> 00:06:48.242
Cool,, so I did that.

117
00:06:48.242 --> 00:06:54.750
Close, close, close that.

118
00:06:54.750 --> 00:06:56.747
Let's see, I always mess it up.

119
00:06:56.747 --> 00:06:59.945
Nope, that was the wrong one.

120
00:06:59.945 --> 00:07:03.765
No, that was correct.

121
00:07:03.765 --> 00:07:07.372
Never write JSON by hand.

122
00:07:07.372 --> 00:07:11.803
It's embarrassing, username-
&gt;&gt; Speaker 3: Closing paren, right?

123
00:07:11.803 --> 00:07:12.617
&gt;&gt; Brian Holt: Is that what it is?

124
00:07:12.617 --> 00:07:13.401
Yeah, you're right.

125
00:07:13.401 --> 00:07:15.167
You're absolutely right.

126
00:07:15.167 --> 00:07:22.689
There you go, and now I have a full
representation of this in JSON.

127
00:07:22.689 --> 00:07:26.817
Now you might ask me, what is
the actual data type being stored here?

128
00:07:26.817 --> 00:07:30.374
And if you guessed string,
you were correct.

129
00:07:30.374 --> 00:07:31.642
It's just a string.

130
00:07:31.642 --> 00:07:34.897
It's just a JSON string that
you're putting in there.

131
00:07:34.897 --> 00:07:35.966
However, well,

132
00:07:35.966 --> 00:07:40.326
we'll get to that here in a little bit
when we start talking about JSONB.

133
00:07:40.326 --> 00:07:45.159
So what's nice about this, though,
is once you pass it into the JSON object,

134
00:07:45.159 --> 00:07:49.628
it's then ready and available and
validated to be able to be accessed and

135
00:07:49.628 --> 00:07:51.481
queried and stuff like that.

136
00:07:51.481 --> 00:07:56.103
So you'll find yourself using this
JSON function to craft things.

137
00:07:56.103 --> 00:08:00.101
The key here, when working with this
extension, is you wanna use the built-in

138
00:08:00.101 --> 00:08:03.874
functions here to make sure that all
of your data is formulated correctly.

139
00:08:03.874 --> 00:08:06.472
Because right now,
we're using this JSON function, but

140
00:08:06.472 --> 00:08:10.184
we're gonna get to another one that's
actually a binary representation of JSON,

141
00:08:10.184 --> 00:08:11.739
and it's not stored the same way.

142
00:08:11.739 --> 00:08:14.196
It is still a string, but it's compressed.

143
00:08:14.196 --> 00:08:16.662
You'll see when we get there.

144
00:08:16.662 --> 00:08:17.901
Let's do an array.

145
00:08:17.901 --> 00:08:19.633
So this one's helpful.

146
00:08:19.633 --> 00:08:25.015
Craft me an array using JSON, and you just
give it a bunch of pieces of information.

147
00:08:25.015 --> 00:08:31.422
And as you might guess,
it gives you a well-formatted array back.

148
00:08:31.422 --> 00:08:33.140
That's good.

149
00:08:33.140 --> 00:08:35.211
I'm gonna take this one, this function.

150
00:08:35.211 --> 00:08:36.011
I don't wanna write it again.

151
00:08:36.011 --> 00:08:38.239
No one wants to watch me write it again.

152
00:08:38.239 --> 00:08:43.438
And we'll just talk through here,
what's in here?

153
00:08:43.438 --> 00:08:46.360
So json_array_length,
as you might imagine,

154
00:08:46.360 --> 00:08:49.080
you might want to get
a length back from array.

155
00:08:49.080 --> 00:08:50.731
You wanna see how many
favorites Brian has,

156
00:08:50.731 --> 00:08:53.190
so that you can render the UI correctly,
or something like that.

157
00:08:54.510 --> 00:08:58.584
So the first part of the function here is
the actual piece of JSON that you have,

158
00:08:58.584 --> 00:09:01.509
and then the second thing is
the selector that you want.

159
00:09:01.509 --> 00:09:05.406
So dollar sign represents
the object itself, right?

160
00:09:05.406 --> 00:09:06.770
Then period is the accessor.

161
00:09:06.770 --> 00:09:09.255
And then you say,
I know favorites is an array,

162
00:09:09.255 --> 00:09:11.817
give me the number back of
how long that array is.

163
00:09:11.817 --> 00:09:14.181
So what do you expect to get back here?

164
00:09:14.181 --> 00:09:20.043
Here's favorites, there's Daft Punk,
Radiohead, 2, right?

165
00:09:20.043 --> 00:09:21.899
There you go, 2.

166
00:09:21.899 --> 00:09:27.467
JSON type, if you wanna get back
type information, obviously,

167
00:09:27.467 --> 00:09:32.743
this is not gonna give you back
useful type information as is.

168
00:09:32.743 --> 00:09:36.704
So what happens if you
wanna get the username?

169
00:09:36.704 --> 00:09:38.134
Type back.

170
00:09:38.134 --> 00:09:43.171
So again, json_type,
json_string, same one, and

171
00:09:43.171 --> 00:09:47.899
I say $.username, and
we expect to get back what?

172
00:09:47.899 --> 00:09:49.091
String, I think.

173
00:09:49.091 --> 00:09:51.230
Text, there you go, yeah.

174
00:09:51.230 --> 00:09:56.675
What happens if we do,
I don't know if you can even

175
00:09:56.675 --> 00:10:02.261
just do dollar sign,
yeah, object .favorites.

176
00:10:02.261 --> 00:10:06.653
It's an array, and
I think you can even just say that, and

177
00:10:06.653 --> 00:10:09.264
that should give you as well text.

178
00:10:09.264 --> 00:10:11.254
What's happens if we give it 3?

179
00:10:11.254 --> 00:10:12.587
I have no idea.

180
00:10:12.587 --> 00:10:14.584
Nothing, it's not anything.

181
00:10:18.224 --> 00:10:22.414
&gt;&gt; Brian Holt: Says json_type, again,
that's not what I typically use a bunch,

182
00:10:22.414 --> 00:10:23.845
but it's there.

183
00:10:23.845 --> 00:10:25.294
You could definitely
use it if you want to.

184
00:10:29.256 --> 00:10:31.965
&gt;&gt; Brian Holt: This is kind
of an interesting one.

185
00:10:31.965 --> 00:10:36.675
SELECT json_object, and
you just give it pairs of things.

186
00:10:36.675 --> 00:10:43.158
So if I wanted to basically recreate this
one, I would say json_object ['username,

187
00:10:43.158 --> 00:10:48.447
and then whatever comes next is
what's gonna be paired with it.

188
00:10:48.447 --> 00:10:51.157
So I'm gonna do btholt.

189
00:10:51.157 --> 00:10:52.039
Then I can do another one.

190
00:10:52.039 --> 00:10:54.289
As you might guess,
I would have to do favorites.

191
00:10:56.421 --> 00:11:02.157
&gt;&gt; Brian Holt: And then I would
have to do a json_array, right,

192
00:11:02.157 --> 00:11:08.317
so I can embed that here,
of Daft Punk and Radio Head.

193
00:11:08.317 --> 00:11:11.320
Okay, close that and close the other one.

194
00:11:11.320 --> 00:11:13.104
And I think that should be good.

195
00:11:13.104 --> 00:11:16.660
And you can see here we get
the same object back out.

196
00:11:16.660 --> 00:11:19.525
They just have to be in pairs.

197
00:11:19.525 --> 00:11:23.016
Maybe it'll just give it nothing.

198
00:11:23.016 --> 00:11:25.645
I actually don't know if you don't
pair it correctly, what happens.

199
00:11:28.601 --> 00:11:30.919
&gt;&gt; Brian Holt: Yeah, so it has to
have an even number of arguments,

200
00:11:30.919 --> 00:11:32.142
otherwise it won't work.

201
00:11:32.142 --> 00:11:33.184
Could be helpful.

202
00:11:33.184 --> 00:11:36.544
I'll confess, I learned about this
when I was writing this course, so

203
00:11:36.544 --> 00:11:39.203
I have never used it, but
it is there if you need it.

204
00:11:39.203 --> 00:11:41.978
I could see this being useful with
subqueries where you're just kinda putting

205
00:11:41.978 --> 00:11:43.292
subqueries to put things together.

206
00:11:43.292 --> 00:11:45.761
That would make a lot of sense to
me that that's how that would work.

