WEBVTT

1
00:00:00.126 --> 00:00:04.485
&gt;&gt; Brian Holt: Let's talk about like so
let's say you didn't remember if it's

2
00:00:04.485 --> 00:00:07.904
Postal Service or
The Postal Service, all right?

3
00:00:07.904 --> 00:00:12.601
Very probably common use case there.

4
00:00:12.601 --> 00:00:17.470
But what if I want to
find their artist ID, and

5
00:00:17.470 --> 00:00:21.059
I'm not sure what it's called,

6
00:00:21.059 --> 00:00:26.698
you can do SELECT ArtistID
from Artist WHERE name and

7
00:00:26.698 --> 00:00:30.944
then you can do this thing called like.

8
00:00:30.944 --> 00:00:35.918
And then you basically say,
where you can have more characters here so

9
00:00:35.918 --> 00:00:39.807
you put a percent sign here and
then do Postal Service.

10
00:00:39.807 --> 00:00:42.615
And you're basically saying, hey, look for

11
00:00:42.615 --> 00:00:47.079
something that has postal service that
is affixed by Postal Service, and

12
00:00:47.079 --> 00:00:51.045
it might have stuff at the beginning and
it might not, all right?

13
00:00:51.045 --> 00:00:52.038
And if you do that,

14
00:00:52.038 --> 00:00:55.591
you should get 174 because
the Postal Service would match this.

15
00:00:55.591 --> 00:00:58.295
Also, Postal Service would match it.

16
00:00:58.295 --> 00:01:00.395
Definitely not the Postal Service
would match it, all right?

17
00:01:00.395 --> 00:01:08.987
Anything that's fixed by that
would return true there,

18
00:01:08.987 --> 00:01:13.465
so that it means zero to many.

19
00:01:13.465 --> 00:01:17.724
One thing that anyone
coming from another one,

20
00:01:17.724 --> 00:01:22.409
there's I like in other
versions of other databases

21
00:01:22.409 --> 00:01:26.467
that I like does not
exist inside of a SQLite.

22
00:01:26.467 --> 00:01:30.425
It only handles LIKE, and
it's already case insensitive.

23
00:01:30.425 --> 00:01:31.193
That's what the idea.

24
00:01:31.193 --> 00:01:32.296
The I means insensitive.

25
00:01:32.296 --> 00:01:38.084
So yeah, you just have LIKE in SQLite.

26
00:01:38.084 --> 00:01:39.027
So let's do another one.

27
00:01:39.027 --> 00:01:44.539
Let's do SELECT name FROM Artist,
WHERE name LIKE,

28
00:01:44.539 --> 00:01:52.633
and I wanna find all of the artists that
have orchestra in their name anywhere.

29
00:01:52.633 --> 00:01:54.931
So you'll just put it on both sides.

30
00:01:54.931 --> 00:01:57.450
Orchestra, and
you'll put it on both sides.

31
00:01:57.450 --> 00:02:02.949
This means orchestra exist somewhere
inside of this particular string,

32
00:02:02.949 --> 00:02:08.903
and you'll find that there's quite a bit
of them in this database, all right?

33
00:02:08.903 --> 00:02:16.116
Orchestra, orchestra,
orchestra, orchestra.

34
00:02:16.116 --> 00:02:19.300
If you got rid of the last one, you'd only
get it where orchestra was at the end.

35
00:02:19.300 --> 00:02:22.329
Notice that these all end in orchestra.

36
00:02:22.329 --> 00:02:27.314
And if you did it just at the end you'll
get anything that begins with orchestra,

37
00:02:27.314 --> 00:02:29.015
right, which is just one.

38
00:02:29.015 --> 00:02:30.139
Pretty cool.

39
00:02:30.139 --> 00:02:33.920
Something that they use from time time.

40
00:02:33.920 --> 00:02:38.735
This is useful for queries like this,
where you're looking as like,

41
00:02:38.735 --> 00:02:42.994
does this string is this string
contained in another string.

42
00:02:42.994 --> 00:02:47.658
If you are looking for something like full
text search, something that like elastic

43
00:02:47.658 --> 00:02:52.005
search would do for you, we'll talk about
that towards the end of the course.

44
00:02:52.005 --> 00:02:54.415
That's also built into SQL as well.

45
00:02:54.415 --> 00:02:55.421
This is much more simple.

46
00:02:55.421 --> 00:02:59.192
This is just looking for the,
does this string contain this?

47
00:02:59.192 --> 00:03:00.969
We'll talk about full text search later.

48
00:03:00.969 --> 00:03:05.720
Let's do one here just to
show you that there are other

49
00:03:05.720 --> 00:03:09.108
comparators other than just equals.

50
00:03:09.108 --> 00:03:12.607
Artistid is less than or equal to 10.

51
00:03:17.621 --> 00:03:20.131
&gt;&gt; Brian Holt: From, I need from,
that's what I did there.

52
00:03:23.937 --> 00:03:27.016
&gt;&gt; Brian Holt: So you can see here,
I got everything up into including 10.

53
00:03:27.016 --> 00:03:30.344
I can get rid of the equals too.

54
00:03:30.344 --> 00:03:33.108
And I won't get the inclusive as well,
all right?

55
00:03:33.108 --> 00:03:36.154
All that stuff exists as well.

56
00:03:36.154 --> 00:03:39.767
If you haven't seen what
are these called ligatures before,

57
00:03:39.767 --> 00:03:44.640
you can see that when I put the two glyphs
next to each other, they combine into one.

58
00:03:44.640 --> 00:03:48.620
I have a note at the beginning of
the course where I'm talking about all

59
00:03:48.620 --> 00:03:50.913
the stuff that I used how to enable that,

60
00:03:50.913 --> 00:03:55.858
but that's just why that's combining, is
it's just those two things put together.

61
00:03:55.858 --> 00:03:57.206
I always forget that I have that on.

62
00:04:01.210 --> 00:04:04.130
&gt;&gt; Brian Holt: Cool,
let's talk about pagination,

63
00:04:04.130 --> 00:04:07.943
that's something else you
have to frequently do.

64
00:04:07.943 --> 00:04:12.771
Select star from artists, I run this
a lot because I don't want 300 artists

65
00:04:12.771 --> 00:04:17.819
every single time that I query, so I will
LIMIT 5 and I'll grab only 5 results and

66
00:04:17.819 --> 00:04:22.960
it will just give you the first five in
the set, and then it'll finish, all right?

67
00:04:22.960 --> 00:04:25.946
Obviously, you can do 15 or
whatever you wanna do.

68
00:04:25.946 --> 00:04:30.590
And then if you wanna paginate
through them, you can also offset.

69
00:04:30.590 --> 00:04:36.084
So notice that this first one
that I did was 1 through 5,

70
00:04:36.084 --> 00:04:39.986
and then this one now is 6 through 10.

71
00:04:39.986 --> 00:04:44.237
11 through 15, so on and so forth.

72
00:04:44.237 --> 00:04:48.978
I will say this is not best practice if
you're writing an app to paginate through

73
00:04:48.978 --> 00:04:52.395
something, because what
happens if I add something in.

74
00:04:52.395 --> 00:04:55.873
I mean, these are sequential, but imagine
if I had something in the middle, there

75
00:04:55.873 --> 00:04:59.517
could be problematic, because everything
would shift and would look a little weird.

76
00:04:59.517 --> 00:05:03.191
You like get repeat results or
you would skip results.

77
00:05:03.191 --> 00:05:08.417
So basically what you'll do is
you'll look at the last one and

78
00:05:08.417 --> 00:05:15.668
you'll basically just say rather than
OFFSET 10, you'll give it a WHERE clause.

79
00:05:15.668 --> 00:05:21.167
WHERE ArtistId is greater than 16 or
something like that.

80
00:05:24.040 --> 00:05:27.038
&gt;&gt; Brian Holt: Or
greater than or equal to rather.

81
00:05:27.038 --> 00:05:28.426
No, wrong side.

82
00:05:32.117 --> 00:05:34.087
&gt;&gt; Brian Holt: Okay,
same thing, all right?

83
00:05:34.087 --> 00:05:37.691
But now you're basing it on the last
ID that you saw, all right?

84
00:05:37.691 --> 00:05:42.030
That's a little bit more secure assuming
these things are sequential wherever

85
00:05:42.030 --> 00:05:44.422
you can do that,
to base it more on the data,

86
00:05:44.422 --> 00:05:48.713
rather than just an offset, will help
you and get better pagination results.

87
00:05:53.778 --> 00:05:56.695
&gt;&gt; Brian Holt: Okay, and ORDER BY.

88
00:05:56.695 --> 00:05:57.391
Let's do ORDER BY.

89
00:05:57.391 --> 00:06:01.662
SELECT * FROM Artist.

90
00:06:01.662 --> 00:06:03.199
And then you say ORDER BY.

91
00:06:06.089 --> 00:06:09.516
&gt;&gt; Brian Holt: Name, LIMIT 5.

92
00:06:14.679 --> 00:06:18.010
&gt;&gt; Brian Holt: What did I forget here?

93
00:06:18.010 --> 00:06:19.317
&gt;&gt; Speaker 1: You got ordery.

94
00:06:19.317 --> 00:06:19.978
&gt;&gt; Brian Holt: Ordery.

95
00:06:23.290 --> 00:06:29.194
&gt;&gt; Brian Holt: So now notice that these
aren't in the order of their IDs anymore,

96
00:06:29.194 --> 00:06:33.842
they actually are ordered
by the names themselves.

97
00:06:33.842 --> 00:06:36.615
And then you can say ascending,

98
00:06:36.615 --> 00:06:41.453
which as you might imagine
is what it's already doing.

99
00:06:41.453 --> 00:06:43.613
And as you probably have guessed,

100
00:06:43.613 --> 00:06:48.613
descending will give you everything in
reverse, which can be helpful as well.

