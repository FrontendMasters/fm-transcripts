WEBVTT

1
00:00:00.250 --> 00:00:01.348
&gt;&gt; Brian Holt: Let's talk about JSON.

2
00:00:01.348 --> 00:00:03.435
Okay, so we're here on JSON.

3
00:00:03.435 --> 00:00:06.730
We're gonna go into
the SQLite extensions here.

4
00:00:07.780 --> 00:00:13.392
So as I mentioned probably a bit earlier,
SQLite intentionally maintains a really

5
00:00:13.392 --> 00:00:18.454
tight, small core features and
they intentionally push everything out.

6
00:00:18.454 --> 00:00:25.648
That's not just a database
function into extensions.

7
00:00:25.648 --> 00:00:30.899
They made it very easy to add extensions,
and Dr. Hip himself,

8
00:00:30.899 --> 00:00:35.566
as I'm gonna guess,
has written dozens of extensions,

9
00:00:35.566 --> 00:00:39.769
many much extensions is
the technical term for it.

10
00:00:39.769 --> 00:00:42.639
And then there's a bunch of
other ones that have been

11
00:00:42.639 --> 00:00:44.800
written by other really smart people.

12
00:00:44.800 --> 00:00:52.375
And there is a cool, unofficial package
manager for SQLite called sqlpkg.

13
00:00:52.375 --> 00:00:58.063
And you can see here that, there's been
one added since I wrote this l last week.

14
00:00:58.063 --> 00:01:03.547
So there's now 103 extensions in
their unofficial extension store.

15
00:01:03.547 --> 00:01:05.317
You can see all these
written by Richard Hipp.

16
00:01:05.317 --> 00:01:08.087
That's the creator of SQLite.

17
00:01:08.087 --> 00:01:12.251
Alex Garcia is another one that's a pretty

18
00:01:12.251 --> 00:01:16.770
proficient person,
as is this Anton as well.

19
00:01:16.770 --> 00:01:19.108
So there's a bunch of them in here.

20
00:01:19.108 --> 00:01:22.944
I'm gonna show you how
to use this quickly so

21
00:01:22.944 --> 00:01:26.994
that you can use it in
the future if you want to.

22
00:01:26.994 --> 00:01:30.678
So first thing here is we're
gonna use one called hello,

23
00:01:30.678 --> 00:01:33.295
which I think is written by Alex Garcia.

24
00:01:33.295 --> 00:01:40.512
It's just like the Hello World
of SQLite extensions.

25
00:01:40.512 --> 00:01:42.903
We can really just say, hello.

26
00:01:42.903 --> 00:01:44.386
It's really meant for testing, so

27
00:01:44.386 --> 00:01:47.655
that you can test that extensions are
loading correctly and that kinda stuff.

28
00:01:47.655 --> 00:01:50.463
It's also kinda helpful if you're
interested in how they work.

29
00:01:50.463 --> 00:01:57.798
I am not a C developer, so I'm not going
to try and pretend I know how to do this.

30
00:01:57.798 --> 00:02:02.433
But yeah,
we're gonna load the hello extension.

31
00:02:02.433 --> 00:02:06.658
Okay, so first thing we're gonna
do is we're gonna go to the,

32
00:02:06.658 --> 00:02:09.951
I think this is
the installation instructions.

33
00:02:09.951 --> 00:02:12.959
Both of these should work.

34
00:02:12.959 --> 00:02:16.845
If you're comfortable with like
the pipe into shell command,

35
00:02:16.845 --> 00:02:20.892
which you probably shouldn't be,
but I still do it all the time.

36
00:02:20.892 --> 00:02:26.763
You can also just do the download and
install manually kinda thing.

37
00:02:26.763 --> 00:02:29.436
If we're being honest,
I just did this one, and so far,

38
00:02:29.436 --> 00:02:32.241
that they've only stolen my credit card,
and that's it.

39
00:02:35.107 --> 00:02:42.151
&gt;&gt; Brian Holt: Okay, once you have that
installed, let's put my terminal here,

40
00:02:42.151 --> 00:02:46.846
you should end up with a,
sorry, mute that,

41
00:02:46.846 --> 00:02:51.930
you should end up with
a SQL package right there.

42
00:02:51.930 --> 00:02:54.223
And it's a package manager, cool.

43
00:02:54.223 --> 00:03:00.810
And from there, we're just gonna do this,

44
00:03:00.810 --> 00:03:07.053
right there, sqlpkg install this repo.

45
00:03:07.053 --> 00:03:08.018
And I think that should work.

46
00:03:08.018 --> 00:03:10.850
Mine, I have already installed it,
so it's gonna say, cool.

47
00:03:10.850 --> 00:03:11.966
I did that already.

48
00:03:11.966 --> 00:03:15.784
But if you haven't,
it should go and install it.

49
00:03:15.784 --> 00:03:21.107
And then what you wanna do right after
that is you wanna run this which command,

50
00:03:21.107 --> 00:03:25.315
which is going to give you
the actual pathway to your package.

51
00:03:28.593 --> 00:03:35.928
&gt;&gt; Brian Holt: Cool, interesting that
it didn't give me, all right, hold on.

52
00:03:35.928 --> 00:03:39.625
I think this is giving me a relative path,
which is actually not what I want.

53
00:03:39.625 --> 00:03:47.023
So if I go to personal,
&gt;&gt; Brian Holt: sqlite-app.

54
00:03:47.023 --> 00:03:48.974
I'd run that again.

55
00:03:48.974 --> 00:03:50.437
Yeah, see, it's gonna give me a full path.

56
00:03:50.437 --> 00:03:51.529
You want a full path,

57
00:03:51.529 --> 00:03:54.935
and I think that's just cuz I was
hanging out in my home directory.

58
00:03:54.935 --> 00:04:00.858
You want the whole path so
that SQLite will load it correctly.

59
00:04:00.858 --> 00:04:05.337
So I'm just gonna open
my database again here.

60
00:04:05.337 --> 00:04:06.094
There we go.

61
00:04:06.094 --> 00:04:11.099
And I think it's just.load in that path,
if I'm not mistaken.

62
00:04:11.099 --> 00:04:12.980
It didn't yell at me, so
I'm assuming that's correct.

63
00:04:12.980 --> 00:04:20.538
And then I'm gonna do SELECT hello(
'Brian' ), and I should get Hello,, Brian.

64
00:04:20.538 --> 00:04:23.992
That's how you know that our
extension loaded correctly.

65
00:04:23.992 --> 00:04:26.259
So as you can see, pretty straightforward,

66
00:04:26.259 --> 00:04:28.713
very light in the sense
that it's not that hard.

67
00:04:28.713 --> 00:04:31.285
You just point it to this dylib,

68
00:04:31.285 --> 00:04:36.061
which is what the file extension for
SQLite extensions is.

69
00:04:36.061 --> 00:04:41.218
And then you just run a SELECT
hello ( 'Brian' ), there you go.

70
00:04:41.218 --> 00:04:46.035
So yeah,
this might seem like weird syntax.

71
00:04:46.035 --> 00:04:46.991
This is just a function.

72
00:04:46.991 --> 00:04:52.870
You can also just do SELECT max (1,2,3,4).

73
00:04:52.870 --> 00:04:56.230
You can do this if you're just
trying to test stuff out, right?

74
00:04:56.230 --> 00:04:57.226
I do it all the time.

75
00:04:57.226 --> 00:05:01.557
But it has to be phrased in the form
of SELECT statement, otherwise, SQLite

76
00:05:01.557 --> 00:05:06.041
doesn't know what to do with it, which
is why you see this SELECT afterwards.

77
00:05:06.041 --> 00:05:10.859
What's really weird is I see a lot
of these extensions that are adding

78
00:05:10.859 --> 00:05:16.188
additional capabilities, like time
series and sync and that kinda stuff.

79
00:05:16.188 --> 00:05:21.424
You'll have to run a SELECT do__thing_to

80
00:05:21.424 --> 00:05:26.806
db(123, 5), or something like that.

81
00:05:26.806 --> 00:05:30.777
And it's a SELECT statement, but
this function here will actually go and

82
00:05:30.777 --> 00:05:32.131
write to your database.

83
00:05:32.131 --> 00:05:35.673
I really don't like that pattern,
because you write a SELECT statement and

84
00:05:35.673 --> 00:05:38.066
it doesn't make any sense
that they would do that.

85
00:05:38.066 --> 00:05:41.282
But anyway,
you will see that it's becoming more and

86
00:05:41.282 --> 00:05:45.928
more common because it's the way you
have to run a function within Postgres,

87
00:05:45.928 --> 00:05:48.090
within SQL, at any version of SQL.

88
00:05:48.090 --> 00:05:49.802
Probably worth poking around,
it's kinda fun.

89
00:05:49.802 --> 00:05:52.156
There's a bunch of really
cool packages on here.

90
00:05:52.156 --> 00:05:54.864
Browse all extensions.

91
00:05:54.864 --> 00:05:57.904
Protobufs, That's kind of interesting.

92
00:05:57.904 --> 00:06:04.807
You can make HTTP request directly
from SQLite, which is kinda cool.

93
00:06:04.807 --> 00:06:11.163
So you end up doing something like,
&gt;&gt; Brian Holt: Load http_get_body.

94
00:06:11.163 --> 00:06:11.986
There's a bunch of stuff in there.

95
00:06:11.986 --> 00:06:17.643
And then you can do that, and you can
do JSON extraction from SQL commands.

96
00:06:17.643 --> 00:06:20.936
I don't know why you wanna do that,
but you could, right?

97
00:06:20.936 --> 00:06:23.273
I guess it could take
your place of your cURL.

98
00:06:23.273 --> 00:06:25.881
That seems like a terrible idea,
but you could.

99
00:06:25.881 --> 00:06:27.761
I don't know, I'm not your mom.

100
00:06:27.761 --> 00:06:29.302
You can do whatever you want.

101
00:06:29.302 --> 00:06:34.507
Okay, so yeah, have peruse around there.

102
00:06:34.507 --> 00:06:37.095
This is the one I'm probably
most excited about, vec.

103
00:06:37.095 --> 00:06:41.945
This is the one that's coming out from
Alex Garcia that it's a vector search,

104
00:06:41.945 --> 00:06:42.471
right?

105
00:06:42.471 --> 00:06:44.749
So instead of having Pinecone or
something like that,

106
00:06:44.749 --> 00:06:47.185
you can run this all with an SQLite,
which is pretty cool.

107
00:06:49.256 --> 00:06:51.652
&gt;&gt; Brian Holt: It's not out yet,
but I should mention that,

108
00:06:51.652 --> 00:06:54.553
that it is still in alpha or
beta or something like that.

