WEBVTT

1
00:00:00.114 --> 00:00:04.162
&gt;&gt; Brian Holt: You and I have been
writing, I'm just gonna copy and

2
00:00:04.162 --> 00:00:08.028
paste this in here,
what are called INNER JOINs.

3
00:00:08.028 --> 00:00:11.752
An INNER JOIN,
if you're thinking about a Venn diagram,

4
00:00:11.752 --> 00:00:16.540
let's actually even just open this
that takes you directly to Wikipedia,

5
00:00:16.540 --> 00:00:18.593
which is where I got that image.

6
00:00:18.593 --> 00:00:20.547
Open image in new Tab.

7
00:00:26.271 --> 00:00:28.075
&gt;&gt; Brian Holt: So think of a Venn diagram.

8
00:00:28.075 --> 00:00:33.620
You have two tables, an INNER JOIN or
just join, which is what we've been doing.

9
00:00:33.620 --> 00:00:37.108
Some people say always write
INNER JOIN to be clear.

10
00:00:37.108 --> 00:00:39.739
To me, it's very obvious that
just join means INNER JOIN.

11
00:00:39.739 --> 00:00:43.447
So that take that as you will.

12
00:00:43.447 --> 00:00:49.271
And it's saying if something
that exists in table A and

13
00:00:49.271 --> 00:00:54.471
exists in table B,
then give me that result set.

14
00:00:54.471 --> 00:00:57.999
But if it only exists in A or
if it only exists in B,

15
00:00:57.999 --> 00:01:00.245
do not give me that result set.

16
00:01:00.245 --> 00:01:05.390
So a good example of this is in our data
set, I know for a fact that there are no

17
00:01:05.390 --> 00:01:11.056
postal service albums, which is a damn
shame because there's only one, right?

18
00:01:11.056 --> 00:01:16.202
So if I did an INNER JOIN between track or
no, artist and album, we

19
00:01:16.202 --> 00:01:22.676
would get nothing from postal service back
because it exists in the artist table.

20
00:01:22.676 --> 00:01:24.692
It does not exist in the album table.

21
00:01:24.692 --> 00:01:27.431
So you're saying leave out anything,

22
00:01:27.431 --> 00:01:31.664
leave out any artist that
doesn't have any albums, right?

23
00:01:31.664 --> 00:01:32.906
That's what an INNER JOIN is.

24
00:01:32.906 --> 00:01:34.823
That's what joins do by default.

25
00:01:34.823 --> 00:01:37.611
I would say it's one of the more
common ones you're gonna use,

26
00:01:37.611 --> 00:01:40.308
if not the most common one,
it's why it's the default one.

27
00:01:42.170 --> 00:01:43.248
&gt;&gt; Brian Holt: But
that's not always what you want.

28
00:01:43.248 --> 00:01:47.839
Sometimes you, let's say we do want,
I want every artist in the table and

29
00:01:47.839 --> 00:01:50.727
I also want all the albums
that belong to them,

30
00:01:50.727 --> 00:01:55.191
but still include all the artists
that don't have any albums, right?

31
00:01:55.191 --> 00:01:59.457
That would be called a LEFT JOIN,
which do I have that in here?

32
00:01:59.457 --> 00:02:01.274
I do, it's this one.

33
00:02:01.274 --> 00:02:03.669
Left joint says from my from clause,

34
00:02:03.669 --> 00:02:07.466
which is what the left is in
this particular case, right?

35
00:02:07.466 --> 00:02:12.277
From table A, which is this one, which if
you're drawing a bend diagram would be on

36
00:02:12.277 --> 00:02:15.533
the left side,
that's why it's called the LEFT JOIN.

37
00:02:15.533 --> 00:02:20.109
Include everything that's not in the other
table and also give me everything that is

38
00:02:20.109 --> 00:02:23.663
in the other the table as well
that has something join on, right?

39
00:02:23.663 --> 00:02:27.794
So that's the part of the Venn
diagram that you get back.

40
00:02:27.794 --> 00:02:32.388
As you might imagine, there is
a RIGHT JOIN and the right is the table B,

41
00:02:32.388 --> 00:02:36.306
the table that you're joining
into the result set, right?

42
00:02:36.306 --> 00:02:39.938
So this would be saying,
give me all of the orphaned albums.

43
00:02:39.938 --> 00:02:42.571
It's right, maybe I don't have
an artist to represent this album, but

44
00:02:42.571 --> 00:02:43.359
give me them anyway.

45
00:02:43.359 --> 00:02:48.895
Maybe the way that you represent various
artists would be to leave it null.

46
00:02:48.895 --> 00:02:51.733
That's a terrible way to model this,
but you could, right?

47
00:02:51.733 --> 00:02:57.357
In which case a RIGHT JOIN, in that
particular case would be useful to you.

48
00:02:57.357 --> 00:03:03.345
That's 99% of what you want out
of joins is between these three,

49
00:03:03.345 --> 00:03:08.505
there is a full join,
FULL OUTER JOIN, which is this one.

50
00:03:08.505 --> 00:03:11.987
So, this would be saying,
I might have artists with no albums,

51
00:03:11.987 --> 00:03:13.994
I might have albums with no artists.

52
00:03:13.994 --> 00:03:17.326
Give me everything that is
a FULL OUTER JOIN is like,

53
00:03:17.326 --> 00:03:21.282
I want something represented for
everything in both tables.

54
00:03:21.282 --> 00:03:25.308
And then for everything else, you kind
of start getting into weird places.

55
00:03:25.308 --> 00:03:28.718
It's like a LEFT JOIN
where the B key is null.

56
00:03:28.718 --> 00:03:31.545
That will give you just things
that are in the left table and

57
00:03:31.545 --> 00:03:33.513
none of the intersection in the middle.

58
00:03:33.513 --> 00:03:34.822
This is quite rare.

59
00:03:34.822 --> 00:03:40.050
The only time I end up doing joins like
this is when I'm trying to clean up data.

60
00:03:40.050 --> 00:03:44.005
It's hey, what exists in this table that
should have something in the other table

61
00:03:44.005 --> 00:03:45.166
but doesn't, right?

62
00:03:45.166 --> 00:03:49.569
Then you get into these kind of
scenarios where we're trying to do

63
00:03:49.569 --> 00:03:53.104
these like LEFT JOIN and
where B key is null, right?

64
00:03:53.104 --> 00:03:58.001
Because that would be indicative that
it didn't exist in the other table.

65
00:03:58.001 --> 00:04:00.027
Same thing here.

66
00:04:00.027 --> 00:04:01.575
And that's, that's basically it, yeah.

67
00:04:01.575 --> 00:04:05.245
There's like this FULL OUTER JOIN where
the A key is noll and the B key is null,

68
00:04:05.245 --> 00:04:09.105
which is basically gimme everything
that doesn't exist in the middle, right?

69
00:04:09.105 --> 00:04:14.416
I can't, I have not done that before,
but it's there you quit.

70
00:04:14.416 --> 00:04:20.138
There's also a CROSS JOIN, which is like
the, you never wanna do that, right?

71
00:04:20.138 --> 00:04:23.737
If you had like, a matrix of one,
two and three, and you cross,

72
00:04:23.737 --> 00:04:28.072
joined that to a different table that
had four or five, six, it would give you

73
00:04:28.072 --> 00:04:32.030
every possible combination of all
of those things together, right?

74
00:04:32.030 --> 00:04:36.638
It's the cross I'm it's been forever
since I've had to do matrix math,

75
00:04:36.638 --> 00:04:39.027
20 years at this point, but it's.

76
00:04:39.027 --> 00:04:40.436
It's a matrix math operation where,

77
00:04:40.436 --> 00:04:43.220
basically you're giving me the cross
product of two different matrixes.

78
00:04:43.220 --> 00:04:45.207
That's what a cross join is.

79
00:04:45.207 --> 00:04:49.075
I don't even know if SQLITE does it
because it's a nonsensical thing to do.

80
00:04:53.973 --> 00:04:58.189
&gt;&gt; Brian Holt: Okay, so again, INNER JOIN
or join are the same thing some people

81
00:04:58.189 --> 00:05:01.728
tell you always write the inner
I think they are silly.

82
00:05:01.728 --> 00:05:04.422
I don't think you need to.

83
00:05:04.422 --> 00:05:06.716
I use INNER JOIN the most.

84
00:05:06.716 --> 00:05:08.105
I use LEFT JOIN quite a bit.

85
00:05:08.105 --> 00:05:10.743
I occasionally use RIGHT JOINs.

86
00:05:10.743 --> 00:05:14.612
Everything else is I
fairly infrequently used.

87
00:05:14.612 --> 00:05:16.679
Same with the self joins that
we were just talking about.

88
00:05:21.011 --> 00:05:29.180
&gt;&gt; Brian Holt: Yeah, okay, so,
&gt;&gt; Brian Holt: Yeah,

89
00:05:29.180 --> 00:05:33.826
if we do an interview, Snow Patrol,
another band that I liked,

90
00:05:33.826 --> 00:05:38.127
first time I ever crowd surfed
was at a Snow Patrol concert,

91
00:05:38.127 --> 00:05:41.501
which is a weird thing to say,
but it's true.

92
00:05:41.501 --> 00:05:45.875
If I do this one, I know for a fact that
they haven't put any of the albums for

93
00:05:45.875 --> 00:05:49.430
snow patrol in there, so
we should get a set of zero, right?

94
00:05:49.430 --> 00:05:55.220
However, if we do a RIGHT JOIN because
the artist is the table being joined in,

95
00:05:55.220 --> 00:05:55.852
right?

96
00:05:55.852 --> 00:05:58.204
So that's the right side
of the Venn diagram.

97
00:05:58.204 --> 00:05:59.970
We should get Snow Patrol.

98
00:06:02.691 --> 00:06:04.107
&gt;&gt; Brian Holt: With nothing there right?

99
00:06:07.924 --> 00:06:10.215
&gt;&gt; Brian Holt: Now you might ask me,
could you do it the other way and

100
00:06:10.215 --> 00:06:11.116
make it a LEFT JOIN?

101
00:06:11.116 --> 00:06:11.795
The answer is absolutely.

102
00:06:11.795 --> 00:06:13.952
You could totally make this.

103
00:06:13.952 --> 00:06:18.538
Let's just do it to prove my point here.

104
00:06:18.538 --> 00:06:23.842
So if I, switch artist and

105
00:06:23.842 --> 00:06:32.932
album A
&gt;&gt; Brian Holt: I'm not gonna fix spacing,

106
00:06:32.932 --> 00:06:34.560
you know what I'm talking about, though.

107
00:06:34.560 --> 00:06:36.362
And then I make this a LEFT JOIN.

108
00:06:39.832 --> 00:06:41.665
&gt;&gt; Brian Holt: It's not patrol, right?

109
00:06:41.665 --> 00:06:44.876
Cuz then now this is the left
side of the table and

110
00:06:44.876 --> 00:06:50.133
the what's being joined in is
the right side of the table, right?

111
00:06:50.133 --> 00:06:54.876
&gt;&gt; Brian Holt: In this case, maybe
an index might affect this sometime, but

112
00:06:54.876 --> 00:06:59.440
I can't really imagine there's
really a beneficial way of

113
00:06:59.440 --> 00:07:03.013
thinking about this one
way versus the other.

114
00:07:03.013 --> 00:07:06.791
Maybe on large results sets you
might start getting into which

115
00:07:06.791 --> 00:07:11.673
one has more rows might be better to
select second, maybe which one's better.

116
00:07:11.673 --> 00:07:15.429
And honestly, it's so
hard to kind of predict what,

117
00:07:15.429 --> 00:07:18.856
how that's gonna be better,
you'd have to do.

118
00:07:18.856 --> 00:07:21.961
Do a performance impact on both of those,
and

119
00:07:21.961 --> 00:07:25.161
I'll show you how to do
that here in just a bit.

120
00:07:25.161 --> 00:07:28.025
In this case, we're only talking
about a couple 1000 rows.

121
00:07:28.025 --> 00:07:33.315
Makes properly, zero difference
of if which one's in the from and

122
00:07:33.315 --> 00:07:35.400
which one's in the join.

123
00:07:35.400 --> 00:07:38.741
And frequently, you don't have a choice
based on how your query is structured.

124
00:07:38.741 --> 00:07:40.244
Yeah and let's do an outer, right?

125
00:07:40.244 --> 00:07:42.246
Outer join,
that's kind of an interesting one.

126
00:07:48.477 --> 00:07:54.273
&gt;&gt; Brian Holt: So,
looking at our table here.

127
00:08:00.936 --> 00:08:05.580
&gt;&gt; Brian Holt: We are gonna do,
&gt;&gt; Brian Holt: RIGHT OUTER JOIN

128
00:08:05.580 --> 00:08:09.222
that outer is just optional, right?

129
00:08:09.222 --> 00:08:10.960
It's the same thing as this.

130
00:08:16.458 --> 00:08:22.123
&gt;&gt; Brian Holt: This is all of
the artists that don't have albums,

131
00:08:22.123 --> 00:08:27.544
which is what that query did,
which is this one.

132
00:08:27.544 --> 00:08:30.883
And again,
you can leave the outer out, right?

133
00:08:30.883 --> 00:08:34.648
Totally optional some people
like to have it there.

134
00:08:34.648 --> 00:08:35.701
It's always implied.

135
00:08:35.701 --> 00:08:37.554
If it's a RIGHT JOIN, it's you can't.

136
00:08:37.554 --> 00:08:39.526
There's no RIGHT INNER JOIN.

137
00:08:39.526 --> 00:08:40.535
Is nonsensical, right?

138
00:08:40.535 --> 00:08:41.824
That's not a thing, right?

139
00:08:41.824 --> 00:08:45.354
So if it's a RIGHT or a LEFT JOIN, it's a
LEFT OUTER JOIN or a RIGHT OUTER JOIN, and

140
00:08:45.354 --> 00:08:47.929
you can just omit them,
which is why they let you omit them.

141
00:08:54.113 --> 00:08:58.836
&gt;&gt; Brian Holt: Okay,
&gt;&gt; Brian Holt: Let's talk about

142
00:08:58.836 --> 00:09:02.144
NATURAL JOINs, I don't care for these.

143
00:09:02.144 --> 00:09:04.076
Some people like them.

144
00:09:04.076 --> 00:09:07.913
Those people are kind
of wrong in my opinion.

145
00:09:07.913 --> 00:09:13.128
B.name, A.title.

146
00:09:13.128 --> 00:09:20.623
From album A NATURAL JOIN B limit 5

147
00:09:24.642 --> 00:09:28.399
&gt;&gt; Brian Holt: NATURAL JOIN artist B.

148
00:09:33.507 --> 00:09:38.573
&gt;&gt; Brian Holt: Notice I have on clause.

149
00:09:38.573 --> 00:09:42.662
NATURAL JOIN is basically
telling SQLITE figure it out.

150
00:09:42.662 --> 00:09:46.318
You go, figure out how to join these
tables and give me the result set.

151
00:09:46.318 --> 00:09:50.459
And the way it figures it out is if you
have something called the same thing in

152
00:09:50.459 --> 00:09:51.266
both tables.

153
00:09:51.266 --> 00:09:56.538
So again, schema artist and
schema album because

154
00:09:56.538 --> 00:10:03.576
of the way that the chinook developer
chose to name these columns.

155
00:10:03.576 --> 00:10:09.597
They're both called artistid, and that's
the only thing that they share in common.

156
00:10:09.597 --> 00:10:12.060
So NATURAL JOIN works here.

157
00:10:12.060 --> 00:10:17.206
If you name your stuff, well,
you can use NATURAL JOINs that way.

158
00:10:17.206 --> 00:10:19.389
I think this is too magical.

159
00:10:19.389 --> 00:10:22.503
I think it's a prone to break.

160
00:10:22.503 --> 00:10:23.813
What happens if you rename something?

161
00:10:23.813 --> 00:10:28.503
What happens if you add notes
to both of them, right?

162
00:10:28.503 --> 00:10:31.077
All of a sudden it's going to
see notes in both of this cool.

163
00:10:31.077 --> 00:10:33.603
I'm gonna join on those too, right?

164
00:10:33.603 --> 00:10:34.168
It's a bad idea.

165
00:10:34.168 --> 00:10:41.367
Yep, and I have a longer one here, if you
want to see it with the track as well.

166
00:10:41.367 --> 00:10:43.682
It writes really well, right?

167
00:10:51.772 --> 00:10:56.668
&gt;&gt; Brian Holt: You know what actually,
I think this might even be wrong.

168
00:10:56.668 --> 00:11:00.052
I hadn't even realized that.

169
00:11:00.052 --> 00:11:07.663
It is wrong you know why B.name and
track and dot name, that's hilarious.

170
00:11:07.663 --> 00:11:12.638
I hadn't even thought about
that was gonna happen.

171
00:11:12.638 --> 00:11:18.151
So it's only going to give you
back where the artist's name and

172
00:11:18.151 --> 00:11:20.864
the track, name are the same.

173
00:11:23.409 --> 00:11:27.601
&gt;&gt; Brian Holt: It is, how funny.

174
00:11:27.601 --> 00:11:29.634
Well, there you go.
This is exactly the reason to

175
00:11:29.634 --> 00:11:32.694
not use because that query
seems totally fine, right?

176
00:11:32.694 --> 00:11:35.449
Seems totally fine to write,
and it is not correct.

177
00:11:35.449 --> 00:11:36.633
It's not what you were looking for.

178
00:11:41.889 --> 00:11:43.469
&gt;&gt; Brian Holt: I love
accidentally proving my point.

