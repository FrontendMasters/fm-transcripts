WEBVTT

1
00:00:00.236 --> 00:00:04.817
&gt;&gt; Brian Holt: So
now that I made you walk through sqlite3,

2
00:00:04.817 --> 00:00:09.400
the base default original sqlite3 client,

3
00:00:09.400 --> 00:00:14.840
I went ahead and
linked to other ones that you can use.

4
00:00:14.840 --> 00:00:19.375
Eventually, hopefully by
the time I do v2 of this course

5
00:00:19.375 --> 00:00:24.013
there's going to be a built-in
sqlite client to node JS.

6
00:00:24.013 --> 00:00:30.122
It's just gonna ship with it starting in
22, and we're in 20 right now, right?

7
00:00:30.122 --> 00:00:35.687
Yes, I think we're in 20 right now.

8
00:00:35.687 --> 00:00:37.631
Yeah, you can see this
is active developments.

9
00:00:37.631 --> 00:00:42.132
You can try it right now I thought
about making you try it, but getting

10
00:00:42.132 --> 00:00:47.110
people to start no 22 with experimental
flags seemed a little dicey to me.

11
00:00:47.110 --> 00:00:52.453
But eventually you're gonna be
able to do things like this,

12
00:00:52.453 --> 00:00:55.923
and it's just gonna look a lot better.

13
00:00:55.923 --> 00:00:57.731
Yeah, you're gonna do a database.prepare.

14
00:00:57.731 --> 00:01:01.300
You're gonna insert all your values into
it and then you can just run the query,

15
00:01:01.300 --> 00:01:04.511
and it makes this like reusable object
that you can run multiple times.

16
00:01:04.511 --> 00:01:10.262
It's a it's a nice way of doing it.

17
00:01:10.262 --> 00:01:13.368
Bun already does this,
if you're familiar with bun,

18
00:01:13.368 --> 00:01:15.605
which is another JavaScript runtime.

19
00:01:15.605 --> 00:01:18.247
I think Denno has their own as well, so

20
00:01:18.247 --> 00:01:23.364
I think that kinda puts some pressure
back onto the Node core team to like,

21
00:01:23.364 --> 00:01:27.264
hey, maybe we should adopt
an internal sqlite client.

22
00:01:27.264 --> 00:01:31.616
They've always kind of had this
thought process on the Node team,

23
00:01:31.616 --> 00:01:36.449
that like, let's the community do it,
let's not prescribe anything.

24
00:01:36.449 --> 00:01:40.408
But this one seems useful to me.

25
00:01:40.408 --> 00:01:46.285
So that eventually will be what
I would suggest all of you use.

26
00:01:46.285 --> 00:01:50.876
If this is available by the time that you
watch this video, use the official Node 1.

27
00:01:54.574 --> 00:01:59.734
&gt;&gt; Brian Holt: The second most popular
as far as I can tell is Better Sqlite3.

28
00:01:59.734 --> 00:02:03.755
I'm not gonna say that
it's necessarily better.

29
00:02:03.755 --> 00:02:08.127
I do use it probably the most.

30
00:02:08.127 --> 00:02:12.190
They purport to be significantly faster.

31
00:02:12.190 --> 00:02:14.857
Sure, it's already fast enough for me.

32
00:02:17.835 --> 00:02:21.996
They had this ability to do the prepare
thing which we were talking about.

33
00:02:21.996 --> 00:02:26.079
You can do pragmas,
as we talked about earlier.

34
00:02:26.079 --> 00:02:31.608
They have a promise library built into it,
so

35
00:02:31.608 --> 00:02:37.143
you can do promises, I think, pretty sure.

36
00:02:37.143 --> 00:02:42.489
And the one thing that SQLite 3, just
the normal one that we were just using,

37
00:02:42.489 --> 00:02:47.752
it doesn't have the ability to do
queries sync, which basically means like

38
00:02:47.752 --> 00:02:52.952
run this and pause the entire runtime
until this is done and then continue.

39
00:02:52.952 --> 00:02:54.517
Usually that's not what you wanna do,

40
00:02:54.517 --> 00:02:56.470
especially if you're
doing like web services.

41
00:02:56.470 --> 00:03:00.138
But if you're just running a script, it
actually is nice like, hey, do this wait,

42
00:03:00.138 --> 00:03:03.198
do this wait, do this wait,
do this wait, and then now you're done.

43
00:03:03.198 --> 00:03:06.364
Better sqlite3 can do that, no problem.

44
00:03:06.364 --> 00:03:11.959
Sqlite 3, just a normal one cannot or
doesn't have a easy way to do that,

45
00:03:11.959 --> 00:03:17.016
I should say Yeah, Promise sqlite3,
I've used this one a couple

46
00:03:17.016 --> 00:03:22.563
of times It really is just the exact
same thing, but they have promises.

47
00:03:22.563 --> 00:03:25.872
It's really just a very thin wrapper
that allows you to do a sync await and

48
00:03:25.872 --> 00:03:26.694
stuff like that.

49
00:03:31.832 --> 00:03:35.498
&gt;&gt; Brian Holt: That's probably a good
time as any for me to talk about ORMs and

50
00:03:35.498 --> 00:03:37.906
my love-hate relationship with them.

51
00:03:37.906 --> 00:03:43.839
My experience is primarily
with old Django ORMs or

52
00:03:43.839 --> 00:03:49.066
specifically, the Django built in ORM back

53
00:03:49.066 --> 00:03:54.867
in 2013 I think when I
was working at Reddit.

54
00:03:54.867 --> 00:03:56.413
It does some things really well for you.

55
00:03:56.413 --> 00:03:58.697
It does data migrations and
some other things.

56
00:03:58.697 --> 00:04:02.184
But it also makes a lot
of things really hard.

57
00:04:02.184 --> 00:04:06.348
And so an ORM, if you're not familiar,
is basically a library that lets it so

58
00:04:06.348 --> 00:04:08.733
you don't write sequel, it does, right?

59
00:04:08.733 --> 00:04:14.193
And so you say, database.createobject
with this information,

60
00:04:14.193 --> 00:04:19.463
and then it generates sequel and
it runs those commands for you.

61
00:04:19.463 --> 00:04:22.176
Ten years ago,
I would have told you never use an ORM,

62
00:04:22.176 --> 00:04:24.116
it's not worth it just learn sequel.

63
00:04:24.116 --> 00:04:29.569
Get good, essentially,
is what I would tell people, skill issue.

64
00:04:29.569 --> 00:04:31.353
I don't think that's true anymore.

65
00:04:31.353 --> 00:04:36.405
I think Prisma and Drizzle and
even sequelae have come a long ways

66
00:04:36.405 --> 00:04:43.160
of making ORMs a much more desirable thing
to use, particularly Prisma and Drizzle.

67
00:04:43.160 --> 00:04:47.782
I haven't used sequalaes in a while, but
I'm told that it's gotten much better over

68
00:04:47.782 --> 00:04:52.228
the years, pleasant experiences and
come recommended from people that I trust.

69
00:04:52.228 --> 00:04:56.679
I'm not gonna talk about them today, cuz
I really couldn't tell you too much about

70
00:04:56.679 --> 00:04:59.603
them, cuz, again,
I've been writing sequels for so

71
00:04:59.603 --> 00:05:02.670
long that I'm just kind of
stuck in my ways at this point.

72
00:05:02.670 --> 00:05:08.482
But you should have a look.

73
00:05:08.482 --> 00:05:11.427
Yeah, and then, in that case,
you wouldn't include any of these.

74
00:05:11.427 --> 00:05:17.339
You would just interact with the ORMs
then query your database for you.

75
00:05:17.339 --> 00:05:20.493
All of these have sqlite clients,

76
00:05:20.493 --> 00:05:23.567
I think I even,
&gt;&gt; Brian Holt: Yeah,

77
00:05:23.567 --> 00:05:25.910
so this one starts with
SQLite you can see.

78
00:05:29.327 --> 00:05:34.000
&gt;&gt; Brian Holt: Yeah, so you can see
this one works as well with Turso and

79
00:05:34.000 --> 00:05:38.289
Bun, React Native,
Cloudflare, they all work.

80
00:05:44.115 --> 00:05:47.013
&gt;&gt; Brian Holt: Things to just keep an eye
on with ORMs, like you'll do something

81
00:05:47.013 --> 00:05:50.977
that you find very straightforward and you
think, this should be a nice fast query.

82
00:05:50.977 --> 00:05:54.714
And then you find out that your ORM
is doing something bananas, right?

83
00:05:54.714 --> 00:05:59.765
And that was my experience is like,
they'd run these big weird queries.

84
00:05:59.765 --> 00:06:04.269
And so I'd find myself fighting the ORM,
which defeats the purpose, right?

85
00:06:06.895 --> 00:06:09.314
&gt;&gt; Brian Holt: But they do handle
things like data migrations,

86
00:06:09.314 --> 00:06:11.324
which are very hard to handle yourself.

