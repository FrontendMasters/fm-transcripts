WEBVTT

1
00:00:00.730 --> 00:00:03.645
&gt;&gt; Brian Holt: Let's talk a little
bit about local first coz I

2
00:00:03.645 --> 00:00:06.936
think it's a really interesting idea and
Sqlite and

3
00:00:06.936 --> 00:00:11.750
postgres to a different degree are kinda
on the forefront of this movement.

4
00:00:12.880 --> 00:00:17.987
So there's a local first web.dev,
kind of an interesting site

5
00:00:17.987 --> 00:00:24.517
with a lot of different there's Kyle
from Frontend Masters right there.

6
00:00:24.517 --> 00:00:27.037
Nice to see you, Kyle.

7
00:00:27.037 --> 00:00:29.890
There's a bunch of articles on
here on what local first is.

8
00:00:29.890 --> 00:00:34.394
Definitely take a look at
that if you're interested.

9
00:00:34.394 --> 00:00:35.862
I actually gave a presentation.

10
00:00:35.862 --> 00:00:38.027
Let me pull that up.

11
00:00:38.027 --> 00:00:42.963
Postgres, this one.

12
00:00:42.963 --> 00:00:45.856
I just wanted to show you a slide
from this, which was this one.

13
00:00:45.856 --> 00:00:50.496
I'll just make it full screen.

14
00:00:50.496 --> 00:00:54.883
So, this is what we do now, and this is
what I've been showing you how to do,

15
00:00:54.883 --> 00:00:58.602
which is there's a front end that
makes an API call to a backend.

16
00:00:58.602 --> 00:01:03.201
The backend does backend logic and
then it stores to your database.

17
00:01:03.201 --> 00:01:06.623
And that gives data back to your back end
and then that communicates through front

18
00:01:06.623 --> 00:01:09.461
end that I would call that
the conventional web development flow.

19
00:01:10.801 --> 00:01:16.321
The idea behind local first
is you have your front end.

20
00:01:16.321 --> 00:01:20.041
There is a local copy of your database
running in your browser and you're just

21
00:01:20.041 --> 00:01:24.009
reading and writing queries to that
database, not caring really what happened.

22
00:01:24.009 --> 00:01:25.744
So you just save to it and read from it.

23
00:01:25.744 --> 00:01:28.528
Save to it and read from it,
and then in the background,

24
00:01:28.528 --> 00:01:32.006
it's back hauling that data
back to your database, right?

25
00:01:32.006 --> 00:01:37.676
So if I say update user, my name is
now Todd instead of Brian, right?

26
00:01:37.676 --> 00:01:41.062
It's gonna accept that locally.

27
00:01:41.062 --> 00:01:42.726
And say, hey, front end, I got it.

28
00:01:42.726 --> 00:01:46.584
And then behind the scenes, it's gonna
be like, okay, hey, Cloud Database,

29
00:01:46.584 --> 00:01:49.161
they said that this is what
their name is now, right?

30
00:01:49.161 --> 00:01:51.906
And then that's gonna
get synced back to here.

31
00:01:51.906 --> 00:01:54.456
This is saying the local data
is going back to the back end.

32
00:01:54.456 --> 00:01:57.820
And the scenario that I'm talking about
is actually going to the database, right?

33
00:01:57.820 --> 00:02:00.735
So it's directly talking to Terso.

34
00:02:00.735 --> 00:02:03.545
It's not talking to your back end,
which is cool.

35
00:02:04.545 --> 00:02:06.335
Why is this interesting?

36
00:02:06.335 --> 00:02:09.405
It seems like more steps
than what we already have.

37
00:02:09.405 --> 00:02:14.427
Well, when you read something locally,
it's significantly faster, right?

38
00:02:14.427 --> 00:02:18.890
If someone says hey, show me all of
the artists, and it's just instant, and

39
00:02:18.890 --> 00:02:22.187
it doesn't have to hit any
API you're shaving minimum,

40
00:02:22.187 --> 00:02:25.045
200 milliseconds off of that, right?

41
00:02:25.045 --> 00:02:26.945
Maximum, several seconds off of that.

42
00:02:28.535 --> 00:02:31.379
That's why local first is
super compelling to me,

43
00:02:31.379 --> 00:02:35.915
is that it makes the user's experience so
much better, so much faster.

44
00:02:35.915 --> 00:02:38.829
You can literally cut
seconds off of the wire,

45
00:02:38.829 --> 00:02:42.204
which I think is extremely
interesting to me, cool.

46
00:02:43.898 --> 00:02:45.861
&gt;&gt; Brian Holt: So
I wanna show you how to do it.

47
00:02:45.861 --> 00:02:49.005
Turso has this as like
a first class support.

48
00:02:49.005 --> 00:02:52.418
Another one that you might
look at is ElectricSQL.

49
00:02:54.520 --> 00:02:58.290
&gt;&gt; Brian Holt: This is the same idea,
but done with Postgres.

50
00:02:59.780 --> 00:03:03.273
So there's something called PG light,
which as you might imagine,

51
00:03:03.273 --> 00:03:05.814
is similar to SQLite,
which is invented at NEON.

52
00:03:05.814 --> 00:03:07.978
It's pretty cool company I hear.

53
00:03:07.978 --> 00:03:12.939
You write, read, write, locally to
a Postgres database that runs in your

54
00:03:12.939 --> 00:03:16.904
browser, and then it syncs that
to your back end services.

55
00:03:16.904 --> 00:03:18.948
That's Postgres as well.

56
00:03:18.948 --> 00:03:22.549
So that's another one to keep an eye on.

57
00:03:22.549 --> 00:03:25.468
ElectricSQL is its own company that's
doing some interesting things, so

58
00:03:25.468 --> 00:03:27.008
definitely worth a look there as well.

59
00:03:29.574 --> 00:03:36.526
&gt;&gt; Brian Holt: Okay, so what I wanna
do now is we're going to make it so

60
00:03:36.526 --> 00:03:41.528
we can run local first in our code here.

61
00:03:42.869 --> 00:03:44.759
So I want you to clear here.

62
00:03:44.759 --> 00:03:46.396
We're gonna run SQLD.

63
00:03:48.676 --> 00:03:52.828
&gt;&gt; Brian Holt: SQLD, but
we have to do it with this

64
00:03:52.828 --> 00:04:01.284
--grpc-listen-addr=127.0.0.1:5,001, and

65
00:04:01.284 --> 00:04:06.298
that's basically saying, I'm gonna be

66
00:04:06.298 --> 00:04:11.324
expecting someone to be syncing with me.

67
00:04:11.324 --> 00:04:13.538
Here's my exposed address for doing that.

68
00:04:15.460 --> 00:04:18.649
&gt;&gt; Brian Holt: That should just work,
okay?

69
00:04:22.747 --> 00:04:27.501
&gt;&gt; Brian Holt: And then now I want you
to go take a look at in your code,

70
00:04:27.501 --> 00:04:30.257
invoice stash, local first.

71
00:04:32.619 --> 00:04:36.970
&gt;&gt; Brian Holt: Okay, you're gonna
see here we have this Create Client.

72
00:04:36.970 --> 00:04:42.462
This is the official SDK from
turtle that I was talking about.

73
00:04:42.462 --> 00:04:45.552
Here you're creating a client,
you're giving it the URL where you want to

74
00:04:45.552 --> 00:04:48.658
install locally, coz again, local first,
you have to give it a file.

75
00:04:48.658 --> 00:04:51.425
If you don't give it a file, it's just
gonna go directly to the cloud database,

76
00:04:51.425 --> 00:04:53.338
which is not what we want right now.

77
00:04:53.338 --> 00:04:55.418
We want a local file,
we want it to call local data.

78
00:04:55.418 --> 00:05:01.154
We're gonna tell it where to sync, which
is that GRPC address we gave, port 5001.

79
00:05:01.154 --> 00:05:04.909
And sync period is how frequently it up,
updates 60.

80
00:05:04.909 --> 00:05:08.338
I don't know how frequent that is, but
it's the number that was in their doc.

81
00:05:08.338 --> 00:05:11.908
So that's what I took and
then you say, sync.

82
00:05:11.908 --> 00:05:15.722
That's it the end.

83
00:05:15.722 --> 00:05:18.312
That's all the code that you
have to add to get local first.

84
00:05:19.532 --> 00:05:23.534
This is why I find this so compelling,
is that it's a good developer experience,

85
00:05:23.534 --> 00:05:24.641
this is cool, right?

86
00:05:24.641 --> 00:05:31.538
That I only had to do this and it should
in theory make our users stuff faster.

87
00:05:31.538 --> 00:05:35.820
So openserver.js,
I need you to uncomment this line,

88
00:05:35.820 --> 00:05:40.193
registerInvoiceLocalFirst, and
then this line here,

89
00:05:40.193 --> 00:05:44.494
fastify.register, and
Invoice local first, okay?

90
00:05:44.494 --> 00:05:48.337
You should be able to save that and

91
00:05:48.337 --> 00:05:53.551
then here we're gonna say npm run dev.

92
00:05:53.551 --> 00:05:54.985
This will start our server.

93
00:05:56.877 --> 00:06:01.041
&gt;&gt; Brian Holt: And you will see
here this line here frames synced.

94
00:06:01.041 --> 00:06:02.611
I think I had already run this first.

95
00:06:02.611 --> 00:06:05.320
Some of you, I imagine most
people will see a number here.

96
00:06:05.320 --> 00:06:08.765
You might see 581 here or
582 or something like that.

97
00:06:08.765 --> 00:06:09.655
You might not as either.

98
00:06:09.655 --> 00:06:13.271
But this is basically saying, hey,
I pulled this many frames down from

99
00:06:13.271 --> 00:06:17.515
the database for you to go ahead and
start reading and writing from.

100
00:06:17.515 --> 00:06:22.223
Now, you can go to localhost/ what's the,

101
00:06:24.996 --> 00:06:27.678
&gt;&gt; Brian Holt:
Localhost/invoicelocalfirst,

102
00:06:27.678 --> 00:06:28.753
give it an ID.

103
00:06:28.753 --> 00:06:30.776
You'll see everything here
is working just fine.

104
00:06:30.776 --> 00:06:34.788
Again, same different thing.

105
00:06:34.788 --> 00:06:37.006
You can also do invoice.

106
00:06:37.006 --> 00:06:38.463
This is the normal one, right?

107
00:06:38.463 --> 00:06:43.542
[LAUGH] this is the error
that we were getting earlier.

108
00:06:44.732 --> 00:06:45.721
Restart your server.

109
00:06:48.067 --> 00:06:48.938
&gt;&gt; Brian Holt: You can go to this one.

110
00:06:48.938 --> 00:06:54.857
You can see it's exactly the same, but if
I go in here and say, invoice-localfirst,

111
00:06:54.857 --> 00:06:59.812
you'll see here exact same thing,
but the difference between that.

112
00:06:59.812 --> 00:07:05.136
This one that you're seeing here and
the other one is that this is all now

113
00:07:05.136 --> 00:07:11.114
running locally entirely on what would
be your back-end app service, right?

114
00:07:11.114 --> 00:07:16.921
As opposed to directly on your database,
right?

115
00:07:16.921 --> 00:07:19.711
So this is keeping a local copy
of your data on your app server,

116
00:07:19.711 --> 00:07:21.413
which is making this faster.

117
00:07:21.413 --> 00:07:24.678
We could make this even faster in theory
by moving this down to our front end, but

118
00:07:24.678 --> 00:07:26.770
we're not gonna do that quite yet.

119
00:07:26.770 --> 00:07:30.160
The code would look very,
very similar to this, though, right?

120
00:07:30.160 --> 00:07:34.018
And then we'd be running escalate and
WebAssembly and so on and so forth.

121
00:07:36.222 --> 00:07:37.210
&gt;&gt; Brian Holt: Does that make sense?

122
00:07:38.260 --> 00:07:40.105
You're not gonna notice speed up and

123
00:07:40.105 --> 00:07:43.558
speed because we were already
doing this locally, right?

124
00:07:43.558 --> 00:07:46.262
But a user would not have an extra
round trip to your database,

125
00:07:46.262 --> 00:07:48.248
which is what makes that compelling.

126
00:07:48.248 --> 00:07:50.417
This probably needs to be
a whole course on local first.

127
00:07:50.417 --> 00:07:55.396
If we're being honest,
I think it's really bleeding edge, but

128
00:07:55.396 --> 00:07:59.208
there's compelling value
in that much speed up.

129
00:07:59.208 --> 00:08:01.312
So I think it might be
a thing that catches on.

