WEBVTT

1
00:00:00.000 --> 00:00:04.094
What if you wanna know
the most favorited band?

2
00:00:04.094 --> 00:00:06.597
It's a pretty good one, right?

3
00:00:08.385 --> 00:00:15.740
SELECT, and we're gonna do COUNT(f.value),

4
00:00:15.740 --> 00:00:20.700
and we're gonna call favorites,

5
00:00:20.700 --> 00:00:25.454
value, AS count, and

6
00:00:25.454 --> 00:00:30.186
f.value, cool, FROM users, or,

7
00:00:30.186 --> 00:00:35.386
let's just do it this way, FROM users.

8
00:00:35.386 --> 00:00:41.028
And then we're gonna use something
called a table-valued functions.

9
00:00:41.028 --> 00:00:44.134
I'll be honest, again,
I learned about this for this course, so

10
00:00:44.134 --> 00:00:46.241
I've not previously used these before, but

11
00:00:46.241 --> 00:00:50.013
I was just sitting there looking at the
data and was like, what other interesting

12
00:00:50.013 --> 00:00:53.146
things could we derive from a table
with this kind of information?

13
00:00:53.146 --> 00:00:57.058
And so
there's a function here called json_each.

14
00:00:57.058 --> 00:01:00.028
You give it the data and
give it the value out of it.

15
00:01:00.028 --> 00:01:03.898
The reason why you have to query this
as a table is because it's actually

16
00:01:03.898 --> 00:01:05.262
creating rows, right?

17
00:01:05.262 --> 00:01:07.801
It's actually gonna pull
all of the tables out, and

18
00:01:07.801 --> 00:01:11.678
it's gonna make them their own row,
whereas before they were not rows before.

19
00:01:11.678 --> 00:01:15.002
So you have to essentially
add to your result set.

20
00:01:15.002 --> 00:01:18.629
And if you hear that, like, hey,
I'm adding things to my results set,

21
00:01:18.629 --> 00:01:20.839
it's probably a table-valued function.

22
00:01:23.533 --> 00:01:26.852
&gt;&gt; Brian Holt: Favorites, and
I'm gonna call that f, right?

23
00:01:26.852 --> 00:01:31.008
That's where the f.value and the f,
yeah, all that stuff is coming from.

24
00:01:33.201 --> 00:01:36.074
&gt;&gt; Brian Holt: And then, after I've done
that, I can just do a group by, right?

25
00:01:36.074 --> 00:01:40.276
GROUP BY, f.value and

26
00:01:40.276 --> 00:01:45.324
then ORDER BY, count DESC.

27
00:01:45.324 --> 00:01:46.344
Hopefully that works.

28
00:01:46.344 --> 00:01:51.182
So you can see here, 4 people liked
Radiohead, 3 people liked Daft Punk,

29
00:01:51.182 --> 00:01:54.750
and then a bunch of people liked 2,
and a bunch of ones.

30
00:01:58.365 --> 00:01:59.483
&gt;&gt; Brian Holt: Pretty cool, though, right?

31
00:02:05.117 --> 00:02:06.849
&gt;&gt; Brian Holt: So I left a link in here,

32
00:02:06.849 --> 00:02:11.023
if you wanna learn more about
table-valued functions.

33
00:02:11.023 --> 00:02:15.386
It's one of the things I like about, these
are obviously very technical docs, but

34
00:02:15.386 --> 00:02:19.437
I think they do a pretty good job of
taking pretty serious technical topics and

35
00:02:19.437 --> 00:02:22.388
making them as accessible as
database language can be.

36
00:02:27.817 --> 00:02:31.417
&gt;&gt; Brian Holt: Okay, again,
I don't too commonly use them, but

37
00:02:31.417 --> 00:02:34.282
it's cool to know that they're there.

38
00:02:34.282 --> 00:02:39.446
Another thing I wanted to know is how
do I add someone to my favorites?

39
00:02:39.446 --> 00:02:43.209
This is one that, it took me a bit
of spinning to figure out, but

40
00:02:43.209 --> 00:02:46.551
remember whenever you use
one of those JSON functions.

41
00:02:46.551 --> 00:02:49.964
Because it's just a string and
it's not really an object,

42
00:02:49.964 --> 00:02:54.485
it's not like JavaScript where you just
add to the object that works, right?

43
00:02:54.485 --> 00:02:56.744
You actually have to
create a new object and

44
00:02:56.744 --> 00:02:59.521
reinsert it back into
the database using a replace.

45
00:02:59.521 --> 00:03:02.628
So, let's do that.

46
00:03:02.628 --> 00:03:08.512
We're gonna do a UPDATE,
users, SET, data =,

47
00:03:08.512 --> 00:03:13.425
and then we're gonna do a json_insert.

48
00:03:15.978 --> 00:03:17.871
&gt;&gt; Brian Holt: Let's do
this on its own line.

49
00:03:17.871 --> 00:03:22.266
And then what I'm gonna do is,

50
00:03:22.266 --> 00:03:25.986
I'm gonna do a subquery,

51
00:03:25.986 --> 00:03:30.891
SELECT data FROM users WHERE email

52
00:03:30.891 --> 00:03:35.471
= 'brian@example.com'.

53
00:03:38.299 --> 00:03:42.931
&gt;&gt; Brian Holt: That's gonna give me back
the actual current jsonb representation of

54
00:03:42.931 --> 00:03:45.686
the user brian@example.com, right?

55
00:03:45.686 --> 00:03:51.598
So that's the first argument
in my json_insert, okay?

56
00:03:51.598 --> 00:03:54.277
I'm gonna go and I'm gonna grab favorites.

57
00:03:56.949 --> 00:03:59.193
&gt;&gt; Brian Holt: And
then I wanna put it on the end, and

58
00:03:59.193 --> 00:04:02.608
this actually wasn't possible
until quite recently.

59
00:04:02.608 --> 00:04:06.849
You actually had to pull out the entire
array and reconstruct the entire array.

60
00:04:06.849 --> 00:04:10.986
But they added this thing here
where you can just put a # here and

61
00:04:10.986 --> 00:04:15.609
that just says, tack it on the end,
right, which is much nicer to do.

62
00:04:15.609 --> 00:04:22.768
Okay, and then I wanna add The xx,
which is sort of my other favorite bands.

63
00:04:22.768 --> 00:04:25.940
I'm gonna close that.

64
00:04:25.940 --> 00:04:31.337
And then now we're just
gonna say WHERE email

65
00:04:31.337 --> 00:04:36.034
= `brian@example.com`, okay?

66
00:04:36.034 --> 00:04:39.295
And now I guess I could
have done returning, right?

67
00:04:39.295 --> 00:04:46.589
But now let's just say SELECT,
&gt;&gt; Brian Holt: *FROM

68
00:04:46.589 --> 00:04:51.964
users,
&gt;&gt; Brian Holt: WHERE email

69
00:04:51.964 --> 00:04:57.996
= `brian@example.com`,
you know what I did?

70
00:04:57.996 --> 00:04:59.274
I didn't even realize that.

71
00:04:59.274 --> 00:05:02.826
I did json_insert, which is actually
not what we really wanted to do.

72
00:05:02.826 --> 00:05:04.264
We wanted to do jsonb.

73
00:05:04.264 --> 00:05:08.523
So now notice this is actually,
it looks JSON now, right?

74
00:05:08.523 --> 00:05:11.843
One of the dangers of flexible typing.

75
00:05:14.805 --> 00:05:18.360
&gt;&gt; Brian Holt: And
the fact that these are just strings,

76
00:05:18.360 --> 00:05:22.227
they're not actually really JSON objects.

77
00:05:28.176 --> 00:05:29.427
&gt;&gt; Brian Holt: How would I fix that?

78
00:05:29.427 --> 00:05:36.595
This is almost close to
what you would need,

79
00:05:36.595 --> 00:05:43.699
just not a,
&gt;&gt; Brian Holt: So

80
00:05:43.699 --> 00:05:50.189
get rid of this, get rid of that,
&gt;&gt; Brian Holt: And

81
00:05:50.189 --> 00:05:52.436
I think you just say jsonb, right?

82
00:05:58.749 --> 00:06:02.938
&gt;&gt; Brian Holt: Yolo,
when you send an SQL query,

83
00:06:02.938 --> 00:06:08.289
you have to yell yolo, or it doesn't work.

84
00:06:08.289 --> 00:06:10.762
&gt;&gt; Student: [LAUGH]
&gt;&gt; Brian Holt: Cool, all right, so

85
00:06:10.762 --> 00:06:14.019
now this is actually correct
where you really want it to be.

86
00:06:14.019 --> 00:06:17.777
BrianGlasstGHolt, that's really my name.

87
00:06:17.777 --> 00:06:19.940
I didn't know that but SQL knew.

88
00:06:19.940 --> 00:06:27.353
You are all now JSON Jedis,
as they call them.

