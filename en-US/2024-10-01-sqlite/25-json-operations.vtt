WEBVTT

1
00:00:00.250 --> 00:00:01.904
&gt;&gt; Brian Holt: Let's talk about
how to manipulate things,

2
00:00:01.904 --> 00:00:03.260
cuz that becomes really important.

3
00:00:03.260 --> 00:00:09.760
Let's say that you know BT Holt
is browsing on your website and

4
00:00:09.760 --> 00:00:14.510
he wants to, update or
add his address to it,

5
00:00:14.510 --> 00:00:18.760
right so we can do select JSON, insert.

6
00:00:20.476 --> 00:00:26.548
And you would do,
let's get that whole, where is this?

7
00:00:31.181 --> 00:00:35.890
&gt;&gt; Brian Holt: So we have this object,
we give it there, we have that, and

8
00:00:35.890 --> 00:00:39.471
then you wanna tell what you wanna insert,
so

9
00:00:39.471 --> 00:00:43.263
I'm gonna put in I want to put in a city,
right.

10
00:00:44.263 --> 00:00:50.098
And then you tell it what you wanna put
in there, and I wanna put in Sacramento.

11
00:00:51.217 --> 00:00:54.253
&gt;&gt; Brian Holt: Okay, so
what do I expect to get back?

12
00:00:54.253 --> 00:00:57.486
I expect to get back this object
that I've defined up here, but

13
00:00:57.486 --> 00:01:01.775
it has one more key in it, which is city
and the value of that city is Sacramento.

14
00:01:01.775 --> 00:01:07.965
Lo and behold, there you go,
worked okay, right?

15
00:01:07.965 --> 00:01:14.073
Remove is kind of similar as well,
so I'm gonna do select,

16
00:01:14.073 --> 00:01:19.708
JSON, remove,
I'm gonna need a single quote there.

17
00:01:26.257 --> 00:01:29.381
&gt;&gt; Brian Holt: Yeah, I don't think
I mentioned this anywhere else, but

18
00:01:29.381 --> 00:01:33.841
just as a pro tip, if you ever need to put
single quotes inside of the single quotes,

19
00:01:33.841 --> 00:01:35.595
double single quotes, right.

20
00:01:35.595 --> 00:01:39.324
So if I wanted this to
end with a double or

21
00:01:39.324 --> 00:01:43.957
with a one quote,
you have to put two quotes, and

22
00:01:43.957 --> 00:01:50.174
that's how you do a single quote
inside of a SQLite query string.

23
00:01:51.287 --> 00:01:53.960
&gt;&gt; Brian Holt: Cool,
there's that remove, and

24
00:01:53.960 --> 00:01:58.879
then I want to remove favorites,
so I would do $.favorites.

25
00:01:58.879 --> 00:01:59.957
What do I expect to get back?

26
00:01:59.957 --> 00:02:04.946
I expect to get back this particular
object, but lacking favorites because I

27
00:02:04.946 --> 00:02:09.872
told it to remove it with this JSON
remove function, and that's what I got.

28
00:02:13.829 --> 00:02:18.597
&gt;&gt; Brian Holt: And JSON replace,
pretty similar as you might imagine,

29
00:02:18.597 --> 00:02:23.574
you just wanna update the username or
something like that.

30
00:02:25.140 --> 00:02:29.477
&gt;&gt; Brian Holt: So there's replace,
we're gonna update username.

31
00:02:32.624 --> 00:02:35.739
&gt;&gt; Brian Holt: And we are gonna
update it to holt bt because I always

32
00:02:35.739 --> 00:02:37.985
wanted I wanted btholt on Twitter and

33
00:02:37.985 --> 00:02:43.133
it was taken By someone that hasn't
tweeted in like a decade, not bitter.

34
00:02:43.133 --> 00:02:47.303
And so I have to go by HoltBT on Twitter,
there you go.

35
00:02:47.303 --> 00:02:50.114
So this is just all the functions
we'll get back into actually how you

36
00:02:50.114 --> 00:02:52.113
use them with the database
here in just a second.

37
00:02:52.113 --> 00:02:56.958
I just wanted you to be exposed to all
the various different ways to craft

38
00:02:56.958 --> 00:02:58.667
a JSON object to be used.

39
00:02:58.667 --> 00:03:00.396
Now I'm gonna show you
how to do accessors,

40
00:03:00.396 --> 00:03:03.079
which is actually part of the part
that you'll be using quite a bit.

41
00:03:09.595 --> 00:03:15.381
&gt;&gt; Brian Holt: Okay, so let's grab our,
&gt;&gt; Brian Holt: This thing again,

42
00:03:15.381 --> 00:03:17.863
this one, okay, we have a object here.

43
00:03:19.765 --> 00:03:23.408
What happens, I'll make this a little bit
wider so you can see it's all one line.

44
00:03:27.829 --> 00:03:32.351
&gt;&gt; Brian Holt: Okay, so I have this JSON
object and I want to get btholt out of it,

45
00:03:32.351 --> 00:03:36.155
right, or I want to get
the username out of it, right.

46
00:03:36.155 --> 00:03:38.365
So maybe I'm selecting
from my database and

47
00:03:38.365 --> 00:03:41.842
I want to grab the user's name of
all the people in my users database.

48
00:03:41.842 --> 00:03:42.562
What would I do?

49
00:03:43.602 --> 00:03:48.128
Well, there's this like really
convenient way of doing it with SQL, and

50
00:03:48.128 --> 00:03:50.752
there are these accessor arrows.

51
00:03:50.752 --> 00:03:54.117
So again, this is just my font
combining them, it's a minus sign and

52
00:03:54.117 --> 00:03:58.122
an angle bracket next to each other, which
it combines into a nice looking arrow,

53
00:03:58.122 --> 00:03:59.374
which is nice.

54
00:03:59.374 --> 00:04:02.240
And you just give it that,
and whatever you want out of

55
00:04:02.240 --> 00:04:07.360
it,
&gt;&gt; Brian Holt: Okay and if I run that,

56
00:04:07.360 --> 00:04:12.328
then I get BTHolt back,
&gt;&gt; Brian Holt: Pretty convenient,

57
00:04:12.328 --> 00:04:16.855
right,
&gt;&gt; Brian Holt: Something critical about

58
00:04:16.855 --> 00:04:19.064
this, which will make sense
here in just a second.

59
00:04:19.064 --> 00:04:23.618
This is actually still a JSON object,
it's just a JSON object of a string, and

60
00:04:23.618 --> 00:04:26.074
that's essentially the same thing.

61
00:04:26.074 --> 00:04:30.518
But if you actually want the value out of
it, cuz this could be a number, right, and

62
00:04:30.518 --> 00:04:34.604
SQLite would still give it to you at back
as a string as a JSON object, right.

63
00:04:34.604 --> 00:04:39.704
A JSON value, essentially, if you
want the actual real item out of it,

64
00:04:39.704 --> 00:04:42.345
you put another angle bracket here.

65
00:04:42.345 --> 00:04:46.009
Mine will combine it into this fun looking
double arrow, and if I do that again,

66
00:04:46.009 --> 00:04:49.728
you'll notice that there's no double
quotes there, that's kind of how you can

67
00:04:49.728 --> 00:04:54.181
tell that it's not actually a JSON object,
it's really the value itself.

68
00:04:54.181 --> 00:04:59.783
So I don't know, let's just fathom for
a second that your username

69
00:04:59.783 --> 00:05:05.485
was the actual number 15,
as opposed to that's the double arrow,

70
00:05:05.485 --> 00:05:10.138
single arrow,
it actually does give it back to as that.

71
00:05:10.138 --> 00:05:15.041
So, that's the important distinction
between the single arrow and the double

72
00:05:15.041 --> 00:05:19.886
arrow is the single arrow you can keep
doing more JSON Accessors in it, right.

73
00:05:19.886 --> 00:05:24.284
So if it's a deeply nested object,
you can keep pulling stuff out of it, and

74
00:05:24.284 --> 00:05:27.444
then the last one, the leaf,
the terminal accessor,

75
00:05:27.444 --> 00:05:31.318
you wanna have the double arrow to
actually get the value out of it.

76
00:05:31.318 --> 00:05:33.829
I think this is less important in SQLite,

77
00:05:33.829 --> 00:05:38.782
this is extremely important in Postgres,
cuz it's like a bunch of stuff doesn't

78
00:05:38.782 --> 00:05:42.391
work in Postgres the way that
you expect it to if you don't.

79
00:05:42.391 --> 00:05:45.436
But in SQLite because
everything's string based,

80
00:05:45.436 --> 00:05:49.114
I don't think it actually
matters too too much.

81
00:05:49.114 --> 00:05:52.198
This is all real SQL grammar
that's built into the spec, so

82
00:05:52.198 --> 00:05:54.799
I think they have to support
both ways of doing it.

83
00:05:58.151 --> 00:06:03.021
&gt;&gt; Brian Holt: Yeah just to give you
some more examples of that, and again,

84
00:06:03.021 --> 00:06:07.701
I don't think anyone wants to
watch me write this all out,

85
00:06:07.701 --> 00:06:10.582
I'm just gonna grab one like this.

86
00:06:12.612 --> 00:06:17.824
So this is a JSON username, and this has a
name field that is a deeply nested object,

87
00:06:17.824 --> 00:06:21.415
that's another one that has first in it.

88
00:06:21.415 --> 00:06:26.396
If I wanted to get just the whole object
out of there, I can do that in the notes,

89
00:06:26.396 --> 00:06:30.115
this will give me back the whole
object of the name object.

90
00:06:30.115 --> 00:06:34.897
And if I wanted to get out of it,
my actual name first like that,

91
00:06:34.897 --> 00:06:39.428
then I would use the double arrow and
I would get back Brian.

92
00:06:39.428 --> 00:06:44.460
Yeah, just to I'm now curious
what happens if we ask this JSON,

93
00:06:44.460 --> 00:06:48.837
type on the single error,
single arrow, it might say,

94
00:06:48.837 --> 00:06:54.023
I'm gonna guess it's gonna say,
&gt;&gt; Brian Holt: I don't know.

95
00:06:57.795 --> 00:06:58.586
&gt;&gt; Brian Holt: Yeah.

96
00:07:04.266 --> 00:07:07.040
&gt;&gt; Brian Holt: I segfaulted,
that's interesting,

97
00:07:07.040 --> 00:07:10.514
I have not segfaulted SQLite before.

98
00:07:10.514 --> 00:07:12.823
Wild, let's load that.

99
00:07:18.827 --> 00:07:24.069
&gt;&gt; Brian Holt: Okay,
because I needed to get this all inside,

100
00:07:27.693 --> 00:07:29.653
&gt;&gt; Brian Holt: It does give you back,

101
00:07:29.653 --> 00:07:34.812
text, interesting, okay,
well, do what you want YOLO,

102
00:07:34.812 --> 00:07:38.438
[LAUGH] I guess both of
them are gonna work.

103
00:07:38.438 --> 00:07:42.479
It sounds like with escalate for the most
part, you might be able to ignore it,

104
00:07:42.479 --> 00:07:46.247
this is untested advice,
this is just based on my observation here.

105
00:07:46.247 --> 00:07:49.053
I will tell you that just out of habit
from doing this with PostgreSQL,

106
00:07:49.053 --> 00:07:52.242
I will always make the last one the double
arrow just to get the actual value out,

107
00:07:52.242 --> 00:07:53.980
that's what it's supposed to work like.

108
00:07:58.499 --> 00:08:02.981
&gt;&gt; Brian Holt: Interesting, okay, so
I might retract what I just said because

109
00:08:02.981 --> 00:08:06.965
this actually worked because
it's still a JSON object,

110
00:08:06.965 --> 00:08:12.173
this didn't because it's like
this isn't valid JSON anymore.

111
00:08:12.173 --> 00:08:15.930
It found that to be valid JSON, it found
this to be just a normal value and

112
00:08:15.930 --> 00:08:19.000
therefore not valid,
cuz you'll get the double quotes,

113
00:08:19.000 --> 00:08:21.588
it's back I think that's
the difference here.

114
00:08:23.498 --> 00:08:28.772
I'm learning, learning is fun, so I think
if you do this like within a node app,

115
00:08:28.772 --> 00:08:32.187
you'll get your string
back within double quotes,

116
00:08:32.187 --> 00:08:34.608
which is probably not what you want.

117
00:08:34.608 --> 00:08:36.725
You want it without the double quotes,

118
00:08:36.725 --> 00:08:39.481
which is why the double
arrow becomes useful.

119
00:08:39.481 --> 00:08:43.733
Okay, I talked myself out of it,
don't do this, do this.

