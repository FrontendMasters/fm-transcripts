WEBVTT

1
00:00:00.530 --> 00:00:01.442
&gt;&gt; Brian Holt: If you're Spotify and

2
00:00:01.442 --> 00:00:04.754
you're scanning a hundred million rows
every time that you land on the homepage,

3
00:00:04.754 --> 00:00:06.820
you have a problem,
you should use an index.

4
00:00:06.820 --> 00:00:10.800
So let's figure out how to do that.

5
00:00:10.800 --> 00:00:15.766
So let's do a, first of all,

6
00:00:15.766 --> 00:00:22.535
pragma index underscore list, track.

7
00:00:27.086 --> 00:00:32.039
&gt;&gt; Brian Holt: This is gonna tell
you all of the indexes that already

8
00:00:32.039 --> 00:00:33.621
exist on track.

9
00:00:33.621 --> 00:00:37.155
As you probably would have guessed,
they're the foreign keys.

10
00:00:37.155 --> 00:00:39.415
That's just how foreign keys work.

11
00:00:39.415 --> 00:00:41.106
They are gonna happen in index.

12
00:00:42.646 --> 00:00:45.802
Because whenever you insert into another
table or delete from another table, it's

13
00:00:45.802 --> 00:00:48.836
got to query the other table and they want
all of those to be really, really fast.

14
00:00:48.836 --> 00:00:53.957
So they just automatically
index foreign keys for you.

15
00:00:53.957 --> 00:00:57.276
Notice that these are just the ID's.

16
00:00:58.646 --> 00:01:03.381
We do not have an ID for the name,
which let's suppose that that's what we're

17
00:01:03.381 --> 00:01:06.407
gonna be querying a lot,
and we have a lot of them.

18
00:01:06.407 --> 00:01:12.417
So what we're gonna do is we're gonna say,
create index IDX.

19
00:01:12.417 --> 00:01:14.943
Everyone calls them IDX,
I don't know why idx is index, right?

20
00:01:14.943 --> 00:01:20.131
But track name.

21
00:01:20.131 --> 00:01:25.144
On track name, okay?

22
00:01:25.144 --> 00:01:31.328
This is going to create an index on
the name column on the track table.

23
00:01:32.608 --> 00:01:35.948
So now, if we look at our indexes,
notice we got IDX track name here.

24
00:01:35.948 --> 00:01:37.922
Cool, like that.

25
00:01:39.771 --> 00:01:44.863
&gt;&gt; Brian Holt: Let's run our explain
query plan, Black Dog here again.

26
00:01:44.863 --> 00:01:47.904
Remember up there, it says scan track.

27
00:01:49.114 --> 00:01:51.184
We're hoping that it says search track.

28
00:01:53.604 --> 00:01:56.794
Yeah, using index IDX, track name.

29
00:01:58.834 --> 00:01:59.786
Why is this really cool?

30
00:01:59.786 --> 00:02:04.229
This means that it's using its index
to find those tracks as opposed to

31
00:02:04.229 --> 00:02:08.446
using that scan of like looking
at every item in the list.

32
00:02:08.446 --> 00:02:10.336
And what the way it does
is it uses a B-tree.

33
00:02:11.486 --> 00:02:15.226
I'm definitely not gonna explain to
you too much about what a B-tree is.

34
00:02:15.226 --> 00:02:16.826
Stands for balanced tree.

35
00:02:18.696 --> 00:02:23.837
There is a phenomenal
friend of master's course.

36
00:02:26.187 --> 00:02:27.417
Just kidding, I mean, I like it.

37
00:02:29.317 --> 00:02:33.717
Completing show of computer science,
there is one down here on trees.

38
00:02:35.617 --> 00:02:39.364
And pretty,
this AVL tree is kind of like the junior

39
00:02:39.364 --> 00:02:43.508
version of what it's
doing inside of a B-tree.

40
00:02:43.508 --> 00:02:46.298
This is telling how to
self balance a tree.

41
00:02:46.298 --> 00:02:52.698
So, that's what it's doing
underneath the hood for you.

42
00:02:54.798 --> 00:02:57.577
So instead of having to
look through 3500 rows,

43
00:02:57.577 --> 00:03:00.240
it's gonna have to look at log n of those,
right?

44
00:03:00.240 --> 00:03:02.313
Which is gonna be like.

45
00:03:02.313 --> 00:03:06.550
My math isn't great here,
but under ten, right?

46
00:03:06.550 --> 00:03:10.620
It's not gonna have to
look at very many of them.

47
00:03:10.620 --> 00:03:17.070
I wish that SQLite would tell you
how much computation it took.

48
00:03:17.070 --> 00:03:20.754
Postgres does an awesome job of saying,
I took this long and

49
00:03:20.754 --> 00:03:25.839
I could have taken this long, but
SQLite just doesn't do that for you.

50
00:03:25.839 --> 00:03:28.229
Again, normally cuz it doesn't need to,
it's usually fast enough.

51
00:03:29.899 --> 00:03:34.619
But search and scan, those are the two
things that you're looking for

52
00:03:34.619 --> 00:03:38.249
when it comes to query plans in Europe.

53
00:03:38.249 --> 00:03:39.629
Again, you don't need to index everything.

54
00:03:39.629 --> 00:03:44.526
In fact, when you index something,
it makes all of your searches that

55
00:03:44.526 --> 00:03:49.274
can use it, all of your selects
that can use it faster.

56
00:03:49.274 --> 00:03:53.174
It makes all of your inserts slower
because now every time you insert,

57
00:03:53.174 --> 00:03:55.194
you have to go update your B-tree.

58
00:03:55.194 --> 00:03:59.720
It makes your deletes slower because
you have to go update the B-tree.

59
00:03:59.720 --> 00:04:04.597
All those things get slower because now
you have to update both an index and

60
00:04:04.597 --> 00:04:06.574
you have to update the table.

61
00:04:07.714 --> 00:04:09.931
So if you have a high right table,

62
00:04:09.931 --> 00:04:14.380
you want to be really cautious about
how many indexes you use on it.

63
00:04:17.955 --> 00:04:21.537
&gt;&gt; Brian Holt: Cool, I'm not going to
get too much into it more than that.

64
00:04:21.537 --> 00:04:25.585
SQLite really only has that one index
that it makes available to as opposed to

65
00:04:25.585 --> 00:04:28.824
Postgres where you have several
types of indexes to choose.

66
00:04:30.534 --> 00:04:33.614
But yeah, use them sparingly.

67
00:04:33.614 --> 00:04:36.084
Use them on high hot path traffic.

68
00:04:36.084 --> 00:04:39.824
And usually I don't try and guess,
usually I just kinda wait until they

69
00:04:39.824 --> 00:04:42.953
become a Problem and
then I index them, but it's up to you.

70
00:04:45.433 --> 00:04:47.247
Sometimes it's just obvious, right?

