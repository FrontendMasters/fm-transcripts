WEBVTT

1
00:00:00.450 --> 00:00:03.340
&gt;&gt; Brian Holt: So far, we've just been
selecting from one table at a time.

2
00:00:04.440 --> 00:00:09.688
That's a frequent use case for databases,
but it is a relational database.

3
00:00:09.688 --> 00:00:12.025
The relational there is for a reason,

4
00:00:12.025 --> 00:00:16.857
it's because generally you have tables
that kind of correlate to each other.

5
00:00:16.857 --> 00:00:22.866
So a good example of this would be,

6
00:00:22.866 --> 00:00:26.605
I have clear tables.

7
00:00:26.605 --> 00:00:30.902
I have artist, album, and track, right?

8
00:00:30.902 --> 00:00:33.110
I have all the tracks that are in
the various different albums.

9
00:00:33.110 --> 00:00:38.541
I have all the albums and all the artists
that made all of these albums.

10
00:00:38.541 --> 00:00:42.721
Now you could basically go in and say,

11
00:00:42.721 --> 00:00:48.872
here's this track from,
Led Zeppelin album, right?

12
00:00:48.872 --> 00:00:53.525
And it has the artist, Led Zeppelin,
and it has the album of IV, and

13
00:00:53.525 --> 00:00:57.865
it has the track of Black Dog,
or something like that, right?

14
00:00:57.865 --> 00:01:00.373
The problem is what happens if
Led Zeppelin changes their name?

15
00:01:00.373 --> 00:01:03.687
What if they're Prince, and they become
the artist formerly known as Prince?

16
00:01:03.687 --> 00:01:06.437
You have to now go and
update every row in your database and

17
00:01:06.437 --> 00:01:08.222
hopefully find all of them, right?

18
00:01:08.222 --> 00:01:13.647
Particularly if they have a weird symbol
for a name now, which has never happened,

19
00:01:13.647 --> 00:01:17.534
very appropriate to talk about
this in Minnesota, right?

20
00:01:17.534 --> 00:01:18.488
Difficult, right?

21
00:01:18.488 --> 00:01:21.973
And anyone that's done any amount of
trying to keep two things in sync,

22
00:01:21.973 --> 00:01:24.369
knows that everything
always falls out of sync.

23
00:01:24.369 --> 00:01:28.241
That's just the facts of life when
it comes to computer science.

24
00:01:28.241 --> 00:01:29.826
So it's a bad idea.

25
00:01:29.826 --> 00:01:32.082
Artists rename themselves,
albums get changed,

26
00:01:32.082 --> 00:01:33.970
tracks get added, they get subtracted and

27
00:01:33.970 --> 00:01:37.387
trying to keep all that stuff in sync
would be a nightmare to try and maintain.

28
00:01:38.537 --> 00:01:40.107
That's why we have multiple tables.

29
00:01:40.107 --> 00:01:41.445
We have artists.

30
00:01:41.445 --> 00:01:45.029
We have albums and we have track, and
they're all separate from each other, but

31
00:01:45.029 --> 00:01:47.415
they all relate to each
other using relational data.

32
00:01:47.415 --> 00:01:50.604
That's kind of the point of a relational
database, if I'm being super honest.

33
00:01:53.349 --> 00:01:59.801
&gt;&gt; Brian Holt: So
let's talk about one to one relationships.

34
00:01:59.801 --> 00:02:04.524
One track belongs to one album, assuming
you're modeling it that way, right?

35
00:02:04.524 --> 00:02:09.864
So you don't have a track
belonging to multiple albums,

36
00:02:09.864 --> 00:02:12.764
it's just a track on an album.

37
00:02:12.764 --> 00:02:18.927
Another example of that would
be members of a band, right?

38
00:02:18.927 --> 00:02:23.933
So you have someone like Dave Grohl
that's been in a bunch of bands, right?

39
00:02:23.933 --> 00:02:29.130
But he's has that
one-to-one relationship for

40
00:02:29.130 --> 00:02:35.943
them or many-to-one, one-to-many,
something like that.

41
00:02:35.943 --> 00:02:40.236
So I think this gets more concrete once
we start writing the queries here.

42
00:02:40.236 --> 00:02:44.966
So I say SELECT * FROM Album,
and I'm just going to

43
00:02:44.966 --> 00:02:49.807
LIMIT it to 5,
because I don't want to see a bunch.

44
00:02:49.807 --> 00:02:55.244
Now let's just do .schema of Album.

45
00:02:55.244 --> 00:02:56.625
So it has an album ID.

46
00:02:56.625 --> 00:02:59.391
It has a title,
which you see these, right?

47
00:02:59.391 --> 00:03:04.445
These are all, as you probably know,
these are ACDC songs.

48
00:03:04.445 --> 00:03:10.374
So you have this artist ID that
corresponds to what artist wrote this,

49
00:03:10.374 --> 00:03:16.617
and you have an album ID which corresponds
to which album this is, right?

50
00:03:16.617 --> 00:03:19.120
As you probably guessed,

51
00:03:19.120 --> 00:03:25.052
if you go into track they have a track ID,
an album ID, right?

52
00:03:25.052 --> 00:03:28.955
But notice that there is
no artist ID on this, why?

53
00:03:30.785 --> 00:03:34.905
Because the artist ID is on the album,
so that belongs at the album level.

54
00:03:34.905 --> 00:03:39.480
You don't repeat it into the track level
because they all kind of correspond to

55
00:03:39.480 --> 00:03:41.715
each other in kind of a chain, right?

56
00:03:48.631 --> 00:03:52.379
&gt;&gt; Brian Holt: Yeah, so going back to Dave
Grohl and him belonging in multiple bands,

57
00:03:52.379 --> 00:03:55.002
he was in Nirvana,
he was in the Foo Fighters, and

58
00:03:55.002 --> 00:03:57.829
he's in another band called
Them Crooked Vultures.

59
00:03:57.829 --> 00:04:02.686
That, where you have a band member, and
they can belong to multiple bands and

60
00:04:02.686 --> 00:04:05.090
and bands can have multiple members.

61
00:04:05.090 --> 00:04:08.574
This is called a many-to-many
relationship, right?

62
00:04:08.574 --> 00:04:09.834
I always have to look this stuff up,

63
00:04:09.834 --> 00:04:11.520
because it only matters
when I'm teaching it.

64
00:04:11.520 --> 00:04:16.010
I never talk about this stuff
out loud like this, right?

65
00:04:16.010 --> 00:04:19.809
Maybe another concrete way of showing
this as ingredients and recipes.

66
00:04:19.809 --> 00:04:21.966
A recipe has many ingredients.

67
00:04:21.966 --> 00:04:24.071
An ingredient can belong to many recipes.

68
00:04:24.071 --> 00:04:27.589
They have a many-to-many
relationship,as opposed to a track,

69
00:04:27.589 --> 00:04:29.803
a track just belongs to an album, right?

70
00:04:29.803 --> 00:04:31.752
It doesn't belong to multiple albums.

71
00:04:31.752 --> 00:04:34.066
It just belongs to one album.

72
00:04:34.066 --> 00:04:40.891
Cool, okay, so
there are these one to one relationships.

73
00:04:40.891 --> 00:04:45.713
Where you have two tables and
they join together on just one thing and

74
00:04:45.713 --> 00:04:48.003
they only belong to each other.

75
00:04:48.003 --> 00:04:52.050
I guess you could think of it like people
being married or something like that,

76
00:04:52.050 --> 00:04:55.813
where in theory you're monogamous and
you only belong in to each other.

77
00:04:55.813 --> 00:04:59.124
Normally you would just have
that exist in a table, right?

78
00:04:59.124 --> 00:05:02.922
One, if it's one to one, then they can
just be the same row on the same table.

79
00:05:02.922 --> 00:05:07.094
So typically, you don't model too
much in one to one relationships, but

80
00:05:07.094 --> 00:05:10.743
that one to many relationship
with an album owning many tracks.

81
00:05:10.743 --> 00:05:13.383
That very common,
the many to many exists like

82
00:05:13.383 --> 00:05:17.522
an artist belonging to multiple bands,
that exists quite a bit as well.

83
00:05:19.422 --> 00:05:21.905
Okay, so again, we talked about this.

84
00:05:21.905 --> 00:05:24.831
What if a band renames themselves,
like On A Friday became Radiohead,

85
00:05:24.831 --> 00:05:26.995
Prince became
The Artist Formerly Known As Prince.

86
00:05:26.995 --> 00:05:29.045
The Quarrymen became the Beatles, right?

87
00:05:29.045 --> 00:05:34.283
The nice thing is you have to update
one row to end all of a sudden,

88
00:05:34.283 --> 00:05:37.585
it's fixed everywhere, right?

89
00:05:37.585 --> 00:05:39.487
That's one of the advantages
of doing this.

90
00:05:44.006 --> 00:05:46.329
&gt;&gt; Brian Holt: Okay, so now I have these,

91
00:05:46.329 --> 00:05:51.551
this is not a very useful thing for
me to pass back to a user.

92
00:05:51.551 --> 00:05:54.103
They're not gonna know what album one is,
and

93
00:05:54.103 --> 00:05:56.995
they're not gonna know what artist one is,
right?

94
00:05:56.995 --> 00:06:00.475
Because they don't have any purview
into your data Database, so

95
00:06:00.475 --> 00:06:03.314
you have to somehow join
these things together.

96
00:06:03.314 --> 00:06:05.995
Now, we're gonna talk about joins.

97
00:06:05.995 --> 00:06:08.418
We're gonna say select.

98
00:06:11.095 --> 00:06:18.881
&gt;&gt; Brian Holt: Artist.name,
&gt;&gt; Brian Holt: And album.title.

99
00:06:23.208 --> 00:06:27.749
&gt;&gt; Brian Holt: From album join artist on,
and

100
00:06:27.749 --> 00:06:32.815
you're just gonna tell it what two

101
00:06:32.815 --> 00:06:37.888
things correspond to each other?

102
00:06:37.888 --> 00:06:42.948
How can I tell that this, artist and
this album meet up together,

103
00:06:42.948 --> 00:06:48.382
they're gonna have some sort of
mutual ID typically, which they do.

104
00:06:48.382 --> 00:06:52.057
We're gonna say

105
00:06:52.057 --> 00:06:56.521
Album.ArtistId =

106
00:06:56.521 --> 00:07:01.252
Artist.ArtistID.

107
00:07:03.462 --> 00:07:06.949
Okay, and I'm just going to
put limit five there again.

108
00:07:06.949 --> 00:07:12.781
And now, we get AC/DC, accept AC/DC,

109
00:07:12.781 --> 00:07:19.126
Aerosmith, all that kind of stuff, right?

110
00:07:19.126 --> 00:07:23.909
So we took back the information
that was in this album table, and

111
00:07:23.909 --> 00:07:28.428
we joined it together with the one
that was in the artist table

112
00:07:28.428 --> 00:07:31.721
to get one result set
based on both of those.

113
00:07:34.612 --> 00:07:39.479
&gt;&gt; Brian Holt: And
let's just do .schema Artist,

114
00:07:39.479 --> 00:07:44.803
.schema Album
&gt;&gt; Brian Holt: Notice

115
00:07:44.803 --> 00:07:49.870
both of them have ArtistId and ArtistId,

116
00:07:49.870 --> 00:07:57.125
and we are joining them here
together on ArtistId, right?

117
00:07:57.125 --> 00:08:03.081
So that's how they're the database
knows to do that join correctly.

118
00:08:06.431 --> 00:08:07.800
&gt;&gt; Brian Holt: Okay.

119
00:08:11.392 --> 00:08:13.107
&gt;&gt; Brian Holt: Questions about that,
does that make sense?

120
00:08:17.945 --> 00:08:23.407
&gt;&gt; Brian Holt: Cool, as you might imagine,
this can make things a bit easier.

121
00:08:23.407 --> 00:08:27.739
I'm just gonna copy and paste this
because this was not interesting for

122
00:08:27.739 --> 00:08:28.829
me to type again.

123
00:08:32.707 --> 00:08:34.613
&gt;&gt; Brian Holt: You can do what's
called a table alias, right?

124
00:08:34.613 --> 00:08:38.231
So I called it Album a, and
now instead of having to type out album

125
00:08:38.231 --> 00:08:41.784
every single time, I can just type a and
same Artist b, right?

126
00:08:41.784 --> 00:08:44.439
So now, a.Artist.Id = b Artist.Id.

127
00:08:44.439 --> 00:08:46.972
You'll see me almost always do that,

128
00:08:46.972 --> 00:08:51.022
because typing out the whole
table name is just burdensome.

129
00:08:51.022 --> 00:08:54.803
And then you can select b.Name, a.Title.

130
00:08:54.803 --> 00:08:56.093
That's extremely helpful for you to know.

131
00:08:56.093 --> 00:08:58.873
You can see that still works, okay?

132
00:09:02.739 --> 00:09:06.915
&gt;&gt; Brian Holt: And
you can even use where in here,

133
00:09:06.915 --> 00:09:10.373
which is quite nice as well.

134
00:09:11.873 --> 00:09:16.865
So I'll give her that limit five, and

135
00:09:16.865 --> 00:09:19.834
I'm gonna do where a.

136
00:09:19.834 --> 00:09:24.723
What I call artist b.Name = 'Nirvana'.

137
00:09:27.241 --> 00:09:29.627
&gt;&gt; Brian Holt: There you go.

138
00:09:32.465 --> 00:09:38.312
&gt;&gt; Brian Holt: And now you can do
WHERE based on either table, right?

139
00:09:38.312 --> 00:09:40.848
Cuz you can filter on either one of those.

140
00:09:40.848 --> 00:09:48.202
So I could also do WHERE.Title things,

141
00:09:48.202 --> 00:09:57.512
yeah, Title = Nevermind,
&gt;&gt; Brian Holt: Right?

142
00:09:57.512 --> 00:10:00.266
And that works, okay as well,
you could even do and, right?

143
00:10:00.266 --> 00:10:01.756
All that stuff all works together.

144
00:10:01.756 --> 00:10:03.975
That's kind of the fun part about SQL
is all the pieces kind of compose

145
00:10:03.975 --> 00:10:04.555
into each other.

146
00:10:12.346 --> 00:10:13.400
&gt;&gt; Brian Holt: Yeah,
this one's a pretty cool one.

147
00:10:13.400 --> 00:10:16.621
Let's look at this one here.

148
00:10:16.621 --> 00:10:17.396
We use like.

149
00:10:19.026 --> 00:10:23.376
So let's say we want to find
everything in our database where

150
00:10:23.376 --> 00:10:25.266
the title includes live.

151
00:10:26.306 --> 00:10:30.526
You can see there's quite a few live
albums in here, which is pretty cool.

152
00:10:30.526 --> 00:10:33.366
You can join multiple tables together.

153
00:10:33.366 --> 00:10:35.845
So let's do that.

154
00:10:35.845 --> 00:10:39.192
So .shell clear.

155
00:10:41.242 --> 00:10:43.814
Let's just do this in kind
of my scratchpad here,

156
00:10:43.814 --> 00:10:45.608
I think this is going to be easier.

157
00:10:50.442 --> 00:10:54.094
&gt;&gt; Brian Holt: And
I want to change language mode SQL.

158
00:10:54.094 --> 00:10:58.401
SELECT, let's just.

159
00:11:02.394 --> 00:11:05.443
&gt;&gt; Brian Holt: So artist is probably not
arduous enough for me to shorten it,

160
00:11:05.443 --> 00:11:08.091
or shouldn't be, but
I'm still gonna do it anyway.

161
00:11:08.091 --> 00:11:15.396
So I'm gonna say, call it ar,
ar.Name and I'll call album al.

162
00:11:15.396 --> 00:11:19.095
I try and give them
somewhat,correlative names, right?

163
00:11:19.095 --> 00:11:22.185
Instead of just ABCD, I see a bunch
of people that do that as well.

164
00:11:22.185 --> 00:11:23.835
It just helps me read it later.

165
00:11:25.969 --> 00:11:30.370
&gt;&gt; Brian Holt: Title and do T for

166
00:11:30.370 --> 00:11:36.663
track name from album.

167
00:11:41.588 --> 00:11:47.885
&gt;&gt; Brian Holt: And
then we're going to JOIN Artist.

168
00:11:47.885 --> 00:11:52.885
I have to call this al,

169
00:11:52.885 --> 00:11:59.215
Artist ar ON al.ArtistId,

170
00:12:03.037 --> 00:12:06.653
&gt;&gt; Brian Holt: = ar.ArtistId.

171
00:12:06.653 --> 00:12:11.733
JOIN, frequently,
I will put multiple spaces

172
00:12:11.733 --> 00:12:17.071
between these cuz then
it's even easier to read.

173
00:12:17.071 --> 00:12:19.844
Each individual kind of JOIN clause.

174
00:12:19.844 --> 00:12:25.213
Track t ON

175
00:12:25.213 --> 00:12:33.268
t.AlbumId =

176
00:12:33.268 --> 00:12:41.997
al.AlbumId.

177
00:12:41.997 --> 00:12:44.844
And then here you could
just give it all of it, but

178
00:12:44.844 --> 00:12:50.000
I think there's 3,500 tracks in this
database, so it's a pretty big result set.

179
00:12:50.000 --> 00:12:52.853
So you can just ask for one album,
or something like that.

180
00:12:52.853 --> 00:12:56.746
W're gonna do the Led Zeppelin album.

181
00:12:56.746 --> 00:13:03.329
al.Title = 'IV'.

182
00:13:07.013 --> 00:13:09.754
&gt;&gt; Brian Holt: And you can see why I do
this in VS Code rather than just directly

183
00:13:09.754 --> 00:13:10.400
into the CLI.

184
00:13:10.400 --> 00:13:11.152
This is a lot easier to read.

185
00:13:11.152 --> 00:13:15.310
I have all of my syntax
highlighting I can click.

186
00:13:17.124 --> 00:13:19.480
&gt;&gt; Brian Holt: And I just copy and
paste it over here.

187
00:13:19.480 --> 00:13:23.314
And you can see there, I get
everything in the Led Zeppelin album.

188
00:13:23.314 --> 00:13:25.109
And I get all the tracks back as well,
which is pretty cool.

189
00:13:30.264 --> 00:13:31.352
&gt;&gt; Brian Holt: Pretty cool, right?

190
00:13:31.352 --> 00:13:32.289
I think it's cool.

191
00:13:34.275 --> 00:13:35.564
&gt;&gt; Brian Holt: And you can keep going.

192
00:13:35.564 --> 00:13:38.535
I actually found out you can go 64 times.

193
00:13:38.535 --> 00:13:39.972
You can do 64 joins.

194
00:13:39.972 --> 00:13:44.745
I am not telling you should do 64 joins,
but in SQLite,

195
00:13:44.745 --> 00:13:48.832
it is only possible to
join 64 tables at a time.

196
00:13:50.912 --> 00:13:56.464
And I found out it's cuz they
have a 8 byte registry for

197
00:13:56.464 --> 00:14:05.778
those various different tables,
&gt;&gt; Brian Holt: Cool.

198
00:14:09.034 --> 00:14:12.837
&gt;&gt; Brian Holt: Yeah,
you can just keep going.

199
00:14:12.837 --> 00:14:14.463
So this one has four.

200
00:14:14.463 --> 00:14:18.962
Let's just go copy and paste it.

201
00:14:18.962 --> 00:14:20.621
Which is this one.

202
00:14:20.621 --> 00:14:28.242
&gt;&gt; Brian Holt: So this is all the Foo
Fighter albums and all of their genres,

203
00:14:28.242 --> 00:14:33.183
cuz we pulled it out of genre ID as well.

204
00:14:33.183 --> 00:14:36.347
And you can see some of them they
classify as alternative and punk,

205
00:14:36.347 --> 00:14:38.056
some of them they classify as rock.

206
00:14:38.056 --> 00:14:40.453
I think that's the only two
that they have in there.

