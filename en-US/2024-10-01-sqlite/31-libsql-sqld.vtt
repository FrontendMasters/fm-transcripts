WEBVTT

1
00:00:00.400 --> 00:00:02.050
&gt;&gt; Brian Holt: We did replication,
we did backups.

2
00:00:02.050 --> 00:00:07.410
This was all straight up Vanilla SQLite,
no modifications, stock running as is.

3
00:00:08.920 --> 00:00:13.734
There's a lovely group of people
that decided that they wanted to

4
00:00:13.734 --> 00:00:18.300
build a lot of these features
that SQLite lacked into SQLite.

5
00:00:19.420 --> 00:00:23.421
The problem with SQLite and
for that scenario,

6
00:00:23.421 --> 00:00:26.530
is that it's closed contribution.

7
00:00:26.530 --> 00:00:28.813
You cannot open a pull request to SQLite,
and

8
00:00:28.813 --> 00:00:32.190
particularly if you haven't gotten
approved by their core team.

9
00:00:33.300 --> 00:00:37.110
So, what they decided to do is they
created something called libSQL.

10
00:00:38.710 --> 00:00:39.260
Looks like that.

11
00:00:39.260 --> 00:00:41.718
And it's made It's made by
this company called Turso.

12
00:00:42.858 --> 00:00:45.568
It's a straight up fork.

13
00:00:45.568 --> 00:00:50.203
It started with their base code of SQLite
and they started adding a bunch of

14
00:00:50.203 --> 00:00:56.358
features that in their view, and I would
argue many's view was lacking from SQLite.

15
00:00:56.358 --> 00:00:58.972
They turned it into just
a file based system to it,

16
00:00:58.972 --> 00:01:01.977
it is now a real server that you run,
just like Postgres.

17
00:01:04.327 --> 00:01:06.197
It has a user management system.

18
00:01:07.707 --> 00:01:09.557
It's works totally over HTTP.

19
00:01:09.557 --> 00:01:12.924
So if you just want to
like do it all via API and

20
00:01:12.924 --> 00:01:17.677
like all the reads and writes,
so that's totally possible.

21
00:01:19.367 --> 00:01:22.287
Luckily they do maintain
their own libSQL-js,

22
00:01:22.287 --> 00:01:26.212
so that you don't have to do that,
you can just use their client.

23
00:01:27.882 --> 00:01:32.572
You cannot use SQLite three, the library
that we've been using directly, but

24
00:01:32.572 --> 00:01:35.162
they do maintain their own version of it,
so

25
00:01:35.162 --> 00:01:38.762
that you can actually just
drop it in as a replacement.

26
00:01:38.762 --> 00:01:40.482
I'll show you that here in just a second.

27
00:01:41.531 --> 00:01:43.100
And then at that point,

28
00:01:43.100 --> 00:01:47.965
once they kind of had all the base
features to make SQLite cloud hostable,

29
00:01:47.965 --> 00:01:53.071
they went ahead and started adding
features that they view were lacking.

30
00:01:53.071 --> 00:01:57.073
One that we already talked about today,
during this course rather,

31
00:01:57.073 --> 00:02:01.006
is that ALTER TABLE only allowed
you to add one thing at a time.

32
00:02:01.006 --> 00:02:06.236
Well, with libSQL,
you can do multiple alter tables, right?

33
00:02:06.236 --> 00:02:08.111
So some of those kind of historic things,

34
00:02:08.111 --> 00:02:11.446
I think you don't have to do the plagma
foreign keys on every single time.

35
00:02:11.446 --> 00:02:12.598
I haven't checked that, but

36
00:02:12.598 --> 00:02:16.376
I if they haven't, I'm gonna go march down
there and yell at them to do it right now.

37
00:02:16.376 --> 00:02:19.129
It's the first thing I would change.

38
00:02:19.129 --> 00:02:21.085
A bunch of things like that.

39
00:02:21.085 --> 00:02:24.312
I think you can go down and
they have somewhere in here,

40
00:02:24.312 --> 00:02:27.625
like what are the differences and
what have they added?

41
00:02:30.432 --> 00:02:32.820
&gt;&gt; Brian Holt: Yeah,
I linked the docs in there already.

42
00:02:36.354 --> 00:02:39.425
&gt;&gt; Brian Holt: So
hopefully it does all that stuff.

43
00:02:39.425 --> 00:02:42.498
Cool, okay, so

44
00:02:42.498 --> 00:02:47.553
that is what libSQL is for.

45
00:02:47.553 --> 00:02:52.314
And we're gonna give her a shot here.

46
00:02:52.314 --> 00:02:56.565
So the first thing you'd have to install
for libSQL is a thing called sqld.

47
00:02:56.565 --> 00:03:00.990
The D stands for daemon,
if that is, I mean,

48
00:03:00.990 --> 00:03:07.053
it is just like Postgres D or
Mongo D, sqld is for the base SQL.

49
00:03:07.053 --> 00:03:09.583
So let's go ahead and get that running.

50
00:03:09.583 --> 00:03:11.413
They bless them.

51
00:03:11.413 --> 00:03:16.313
They try to make it as
straightforward as running SQLite.

52
00:03:16.313 --> 00:03:21.258
They recognize that the reason
why SQLite is as popular as

53
00:03:21.258 --> 00:03:26.713
it is because it's so
simple to use and get started with.

54
00:03:26.713 --> 00:03:30.419
So I left a link here,
go install sqld first.

55
00:03:30.419 --> 00:03:35.398
I used Homebrew you can use
Docker if you're okay with that.

56
00:03:35.398 --> 00:03:41.539
Again you might be in the dark here
if you're doing this on Windows?

57
00:03:41.539 --> 00:03:42.229
That's a good question.

58
00:03:42.229 --> 00:03:46.463
So you'd have to go the route of running
it either from WSL2 or doing it from

59
00:03:46.463 --> 00:03:51.459
Docker, both which are totally
acceptable ways of doing this as well.

60
00:03:51.459 --> 00:03:54.189
Luckily with Mac,
you can just run it directly from Mac.

61
00:03:54.189 --> 00:03:58.029
So I think it's just brew install sqld,
if you're gonna do it that way, and

62
00:03:58.029 --> 00:03:59.109
I have it installed.

63
00:04:01.706 --> 00:04:07.707
And yeah, so if you just do sqld,
no options, no configuration,

64
00:04:07.707 --> 00:04:12.546
it'll just figure it out and
it'll get you started.

65
00:04:13.746 --> 00:04:17.626
Which I love that it's like, no config,
let's just get this running and get going.

66
00:04:19.646 --> 00:04:25.371
You can see here that we are running
on port 8080 which is cool.

67
00:04:25.371 --> 00:04:27.231
I can stop all this stuff, by the way.

68
00:04:28.981 --> 00:04:30.121
Get that started again.

69
00:04:31.801 --> 00:04:32.841
There we go.

70
00:04:32.841 --> 00:04:36.591
I think I was colliding with other things,
so make sure everything else is shut down.

71
00:04:39.281 --> 00:04:41.361
Okay, you'll notice that if you try and
go to local host,

72
00:04:41.361 --> 00:04:42.899
8080 I don't think it does anything.

73
00:04:42.899 --> 00:04:44.819
I don't think there's any
web front end to this.

74
00:04:44.819 --> 00:04:47.387
Yeah, it's just gonna blink cuz
it's not expecting an actual

75
00:04:47.387 --> 00:04:49.189
GET request from a browser.

76
00:04:49.189 --> 00:04:53.019
So you're gonna have to use some
sort of API request library.

77
00:04:54.439 --> 00:04:56.419
For me, I use Bruno.

78
00:04:59.259 --> 00:05:02.070
Bruno is just like Postman.

79
00:05:02.070 --> 00:05:06.290
It's like Insomnia,
there's one built into VS code.

80
00:05:06.290 --> 00:05:08.280
I'm fine with you
choosing any one of them.

81
00:05:08.280 --> 00:05:09.546
I am a fan of Bruno.

82
00:05:09.546 --> 00:05:15.309
This one, use bruno.com.

83
00:05:15.309 --> 00:05:17.789
And it's just a really
nice piece of software,

84
00:05:17.789 --> 00:05:21.323
it's kind of like how Postman used
to be and then how Insomnia was and

85
00:05:21.323 --> 00:05:24.183
both of those got,
Postman turned into a big company.

86
00:05:24.183 --> 00:05:27.497
Insomnia got bought by Kong, and
they kind of just started adding

87
00:05:27.497 --> 00:05:31.003
stuff that was conducive to their
businesses into those two things.

88
00:05:31.003 --> 00:05:35.570
And I found Bruno to be more stripped down
and more just an API request client, so

89
00:05:35.570 --> 00:05:36.193
I like it.

90
00:05:37.843 --> 00:05:40.853
Okay, so there's Bruno.

91
00:05:43.700 --> 00:05:48.426
And then what I want you to do here,
I think if you just click here, it'll.

92
00:05:48.426 --> 00:05:50.080
Yeah, it's just a JSON file.

93
00:05:53.730 --> 00:05:55.063
Just hit command or

94
00:05:55.063 --> 00:06:00.200
save this file somewhere where
you can access it from Bruno.

95
00:06:00.200 --> 00:06:03.858
I went ahead and wrote all of
the various different print queries for

96
00:06:03.858 --> 00:06:08.029
you because they were annoying to write
and I didn't want you to have to do it,

97
00:06:08.029 --> 00:06:10.165
and it's not the point of this course.

98
00:06:10.165 --> 00:06:14.729
But once you open this file open

99
00:06:14.729 --> 00:06:19.303
collection it'll just work.

100
00:06:19.303 --> 00:06:23.075
This is a postman compatible collection.

101
00:06:23.075 --> 00:06:24.245
So this will work in Postman.

102
00:06:24.245 --> 00:06:25.405
This will work in Insomnia.

103
00:06:25.405 --> 00:06:26.545
This will work in Bruno just fine.

104
00:06:30.288 --> 00:06:33.771
&gt;&gt; Brian Holt: And if you just want
the JSON that I used to query it,

105
00:06:33.771 --> 00:06:35.717
I created that here as well.

106
00:06:37.510 --> 00:06:40.877
&gt;&gt; Brian Holt: So you can literally
copy and paste all of this and

107
00:06:40.877 --> 00:06:45.654
put that directly into a new request
here and that would work as well.

108
00:06:47.064 --> 00:06:52.481
Okay, assuming that you did it that way,
we're gonna find the Chinook query here,

109
00:06:52.481 --> 00:06:56.014
where I went and did this by hand,
and it was annoying.

110
00:06:56.014 --> 00:06:59.554
Actually, I probably could have asked
ChatGPT to do it, but I didn't.

111
00:06:59.554 --> 00:07:04.536
You'll see here in the body,
it's just a ton of statements.

112
00:07:04.536 --> 00:07:07.836
So this is actually the way that
you communicate directly with sqld.

113
00:07:07.836 --> 00:07:12.126
It's just a JSON object, and
I just gave it a bunch of statements.

114
00:07:12.126 --> 00:07:20.282
And this is literally the statements
from the Chinook database, right?

115
00:07:20.282 --> 00:07:22.893
Chinook, yeah.

116
00:07:22.893 --> 00:07:28.887
And if you go in here and you look,
not that, you go to releases,

117
00:07:28.887 --> 00:07:34.659
and if you look at this SQLite,
this one here, click on that,

118
00:07:34.659 --> 00:07:40.098
and I open that,
you'll see I literally took this file and

119
00:07:40.098 --> 00:07:45.458
I translated it into a sqld
compatible JSON object.

120
00:07:45.458 --> 00:07:47.616
So, now if I go back to Bruno.

121
00:07:53.607 --> 00:07:58.229
&gt;&gt; Brian Holt: Cool, and I just click run
here, which I think is this right arrow,

122
00:07:58.229 --> 00:08:03.336
you'll see here that it created all
my tables, and down here you'll see,

123
00:08:03.336 --> 00:08:08.445
like some of these, it wrote 3,000
rows here, it wrote 720 here,

124
00:08:08.445 --> 00:08:12.697
it took out 3 Bitcoin here,
it's all very standard things.

125
00:08:13.877 --> 00:08:17.767
Cool, so
now we can go into basic query here.

126
00:08:17.767 --> 00:08:20.627
You can see my body here,
cuz these are all posts, right?

127
00:08:20.627 --> 00:08:23.662
And you just give it an array of
statements that you want it to run.

128
00:08:25.672 --> 00:08:29.993
I do this and I click post here, and

129
00:08:29.993 --> 00:08:36.254
I got the column largest number and
the row is ten.

130
00:08:36.254 --> 00:08:38.192
Pretty cool, right?

131
00:08:38.192 --> 00:08:43.435
If I wanna do get tracks, I have another
one here where it's doing a join and

132
00:08:43.435 --> 00:08:48.262
a bunch of stuff like that, and
I press play here you'll see that I get

133
00:08:48.262 --> 00:08:52.952
all of my tracks, sessions,
artists, all those kind of things.

134
00:08:57.222 --> 00:08:58.092
Make sense?

135
00:09:00.232 --> 00:09:03.797
&gt;&gt; Student 1: So like semantically
why is it a post request to get data,

136
00:09:03.797 --> 00:09:07.009
just cuz you wouldn't want
it in the query string.

137
00:09:08.009 --> 00:09:10.699
&gt;&gt; Brian Holt: I mean, I suppose it could
be pedantic about the rest nature of it.

138
00:09:10.699 --> 00:09:14.929
And turn it all gets, all selects, must
be gets ,all post must be inserts, right?

139
00:09:14.929 --> 00:09:16.999
I think they just tried to keep it simple.

140
00:09:16.999 --> 00:09:22.716
So is the entire of the API
is just post on slash?

141
00:09:22.716 --> 00:09:23.476
Yeah.
&gt;&gt; Student 1: Okay.

142
00:09:23.476 --> 00:09:27.506
&gt;&gt; Brian Holt: Yep, generally, you won't
be interacting with with HTTP anyway.

143
00:09:27.506 --> 00:09:31.906
You'll be using some library
to interact with it.

144
00:09:31.906 --> 00:09:36.121
I think you can create multiple
databases in here, so you could have,

145
00:09:36.121 --> 00:09:41.206
slash data.db, and slash user.db and
they'll be connecting to different data.

146
00:09:41.206 --> 00:09:48.495
So the URL schema can be important, but,
yeah, this will all just be statements.

147
00:09:50.115 --> 00:09:56.165
There is a way for you to do
the parameterized queries where you say,

148
00:09:56.165 --> 00:09:59.046
equals question mark, right?

149
00:09:59.046 --> 00:10:01.815
And then you can have it go replace it.

150
00:10:01.815 --> 00:10:04.523
I forgot the syntax for it though,
but you can look it in the docs, and

151
00:10:04.523 --> 00:10:05.851
there's a way to do that as well.

152
00:10:09.220 --> 00:10:11.160
&gt;&gt; Brian Holt: Cool, other questions?

153
00:10:14.576 --> 00:10:15.293
&gt;&gt; Brian Holt: Cool, so

154
00:10:15.293 --> 00:10:21.145
we have this working now we have our
database loaded into it, which is great.

155
00:10:22.978 --> 00:10:27.532
When you stop this by the way, your sdld,
I'm pretty sure we did not write it out to

156
00:10:27.532 --> 00:10:30.438
a file, so
it's just going to drop everything.

157
00:10:30.438 --> 00:10:31.868
So just be aware of that.

158
00:10:34.358 --> 00:10:37.103
Okay, so
now we wanna get our app working with it.

159
00:10:40.804 --> 00:10:43.537
&gt;&gt; Brian Holt: Cool, so
let's go back to my notes here.

160
00:10:48.852 --> 00:10:53.834
&gt;&gt; Brian Holt: And
we are going to go clone this repo,

161
00:10:53.834 --> 00:10:59.101
and you're gonna go to your terminal.

162
00:10:59.101 --> 00:11:04.365
I already have it cloned, but
notice here, this is a SQLite app,

163
00:11:04.365 --> 00:11:08.217
dash live SQL, so
make sure you clone that one.

164
00:11:09.557 --> 00:11:15.905
I'm gonna go into SQLite app,

165
00:11:15.905 --> 00:11:20.307
dash lite FS, okay?

166
00:11:20.307 --> 00:11:22.092
I have this one, I'm gonna to do an MPI.

167
00:11:23.233 --> 00:11:25.838
Install, no I did the wrong one, sorry.

168
00:11:25.838 --> 00:11:30.371
Sqlite-app-
&gt;&gt; Student 2: libsql.

169
00:11:30.371 --> 00:11:34.478
&gt;&gt; Brian Holt: So sqlite-app-libsql,
where in that one,

170
00:11:34.478 --> 00:11:37.543
you're gonna run an npm install.

171
00:11:38.903 --> 00:11:40.413
And I'm gonna open this in code.

172
00:11:41.443 --> 00:11:46.209
And make sure if you're doing this
that you have the two lines here about

173
00:11:46.209 --> 00:11:48.126
local first commented out.

174
00:11:48.126 --> 00:11:49.196
They should already be.

175
00:11:49.196 --> 00:11:51.196
We'll come back to that
in the next lesson here.

176
00:11:52.596 --> 00:12:00.036
And then here you'll see that
we're using libsql/sqlite3.

177
00:12:00.036 --> 00:12:05.407
This is an sqlite3 compatible SDK,
which is cool.

178
00:12:05.407 --> 00:12:08.338
We're just gonna drop this into
our code base, update the URL and

179
00:12:08.338 --> 00:12:09.627
then we are good to fly here.

180
00:12:12.377 --> 00:12:15.848
This is nice for
existing SQLite databases but

181
00:12:15.848 --> 00:12:18.881
I would not suggest starting with this.

182
00:12:18.881 --> 00:12:22.283
If you are starting a new project and
you're gonna use SQL or Terraso or

183
00:12:22.283 --> 00:12:25.975
anything like that, just go ahead and
start with their official SDK because

184
00:12:25.975 --> 00:12:28.413
that's one that they're
updating all the time.

185
00:12:29.923 --> 00:12:34.177
This is only good if you are replacing
something like we are, okay?

186
00:12:34.177 --> 00:12:37.333
So I'm going to say npm run dev.

187
00:12:37.333 --> 00:12:43.734
The one thing I will caution you on
is I had to comment out, all right?

188
00:12:43.734 --> 00:12:46.500
This is not refreshing every
time you change the node code.

189
00:12:46.500 --> 00:12:50.937
So if you do change node code here just be
aware that you have to stop the server,

190
00:12:50.937 --> 00:12:54.670
start the server to get
the new refresh changes.

191
00:12:54.670 --> 00:12:58.593
The reason why I did that is because
libsql writes a lot of files locally and

192
00:12:58.593 --> 00:13:00.818
it was constantly restarting my server.

193
00:13:03.114 --> 00:13:04.315
&gt;&gt; Brian Holt: Okay, cool.

194
00:13:04.315 --> 00:13:09.804
So now our app is listening on port
3000 I had to change it because

195
00:13:09.804 --> 00:13:14.734
that's what sqld runs on, and
you can see no invites found.

196
00:13:17.969 --> 00:13:21.353
&gt;&gt; Student 1: What is our problem here?

197
00:13:21.353 --> 00:13:24.404
&gt;&gt; Brian Holt: So this is all working,
it's making a request here.

198
00:13:27.253 --> 00:13:31.232
&gt;&gt; Brian Holt: We can look at
our network debugger here,

199
00:13:31.232 --> 00:13:36.359
let's say getinvoice,
getting a 500 response.

200
00:13:36.359 --> 00:13:39.259
You're getting a closed error.

201
00:13:39.259 --> 00:13:40.469
Stream expired.

202
00:13:40.469 --> 00:13:47.077
Interesting, so
I might just restart this server again.

203
00:13:52.649 --> 00:13:57.766
&gt;&gt; Brian Holt: Yeah, okay, it closed
the connection for whatever reason.

204
00:13:57.766 --> 00:14:02.667
Who knows why, but if you see something
like that, just stop your node server,

205
00:14:02.667 --> 00:14:04.289
restart the node server.

206
00:14:05.699 --> 00:14:09.886
&gt;&gt; Student 3: Kyle in the chat mentioned
that you could add the dash dash watch

207
00:14:09.886 --> 00:14:12.839
flag or
node dash dash watch server dot js.

208
00:14:12.839 --> 00:14:15.849
&gt;&gt; Brian Holt: I constantly forgot that
that's there, but that's a good point.

209
00:14:15.849 --> 00:14:18.315
That node will actually
do that watching now,

210
00:14:18.315 --> 00:14:21.721
I'm old habits die hard that I was like,
how do I do that?

211
00:14:21.721 --> 00:14:23.555
Mpm installed No Damon, right?

212
00:14:23.555 --> 00:14:28.201
So as you can see Lib SQL does require
a bit more knowhow a little bit more.

213
00:14:29.271 --> 00:14:30.481
Yeah, it's hard to run by yourself.

214
00:14:30.481 --> 00:14:32.121
I'll just put it that way right?

215
00:14:32.121 --> 00:14:35.831
And I'm gonna say it's not really
intended for you to run by yourself.

216
00:14:35.831 --> 00:14:38.411
It's cool to develop locally with.

217
00:14:38.411 --> 00:14:39.867
If I was building app on Terraso,

218
00:14:39.867 --> 00:14:43.087
i'd probably would still
just develop with SQLite.

219
00:14:43.087 --> 00:14:46.955
Plus you know that's not true,
cuz I'd want to use their SDK, so but

220
00:14:46.955 --> 00:14:50.155
in any case, if I was really
interested in using libSQL,

221
00:14:50.155 --> 00:14:53.437
I would just use Terraso,
because that's what they do.

222
00:14:53.437 --> 00:14:55.255
That's what they're built for.

223
00:14:55.255 --> 00:14:57.673
It's a really small startup, and so

224
00:14:57.673 --> 00:15:02.509
their documentation is focused on
getting their paid product working and

225
00:15:02.509 --> 00:15:07.975
not necessarily getting the open source
projects adopted outside of their walls.

226
00:15:07.975 --> 00:15:11.534
I wanted to demonstrate to you though,
there's forward progress here.

227
00:15:11.534 --> 00:15:16.737
There's more interesting
revolutions coming with SQLite,

228
00:15:16.737 --> 00:15:19.804
libSQL, so pretty cool stuff.

229
00:15:19.804 --> 00:15:23.051
It's kinda an alternative to
running LiteFS on your own.

230
00:15:24.431 --> 00:15:28.348
And you can self host libSQL, they've said
that that's part of their ethos going

231
00:15:28.348 --> 00:15:30.981
forward, they wanna make
that available for people.

232
00:15:30.981 --> 00:15:33.986
So, solid choice if
that's what you wanna do

