WEBVTT

1
00:00:00.000 --> 00:00:04.507
&gt;&gt; Brian Holt: So imagine for
a second you are building an app.

2
00:00:04.507 --> 00:00:06.245
It's a music app because
that's on the mind.

3
00:00:06.245 --> 00:00:07.828
We've been talking about that all day.

4
00:00:07.828 --> 00:00:09.455
Let's keep talking about it.

5
00:00:09.455 --> 00:00:13.384
If you go to Spotify and
you type in black,

6
00:00:13.384 --> 00:00:17.550
what do you expect to
get back from Spotify?

7
00:00:17.550 --> 00:00:21.695
Black Sabbath, probably,
which is a band, right?

8
00:00:21.695 --> 00:00:25.242
Amy Winehouse's Back to Black,
that's a track.

9
00:00:25.242 --> 00:00:27.819
And Metallica has the black album, right?

10
00:00:27.819 --> 00:00:31.724
Those are three different
columns in a database, right?

11
00:00:31.724 --> 00:00:34.511
So what are you gonna do about that?

12
00:00:34.511 --> 00:00:39.690
Well, you could write a big,
long, ugly core that says,

13
00:00:39.690 --> 00:00:43.178
like this, like this, like this, and

14
00:00:43.178 --> 00:00:48.482
have three different like clauses,
probably works okay.

15
00:00:48.482 --> 00:00:54.394
But now imagine you're searching
across 30 different columns,

16
00:00:54.394 --> 00:00:59.371
or you need additional kind of joins or
concatenations or

17
00:00:59.371 --> 00:01:03.843
other sort of machinations
that SQL provides you.

18
00:01:03.843 --> 00:01:06.713
It gets really complicated really quickly,
and

19
00:01:06.713 --> 00:01:09.165
trying to do that with like is difficult.

20
00:01:09.165 --> 00:01:15.145
So we're gonna look at something called
FTS, which stands for full text search.

21
00:01:15.145 --> 00:01:19.733
We're gonna look at something called FTS5,

22
00:01:19.733 --> 00:01:24.331
which is full text search version 5,
right?

23
00:01:24.331 --> 00:01:28.349
That's the way that Doctor Hip
likes to version things.

24
00:01:28.349 --> 00:01:29.932
You'll notice that it's JSON one.

25
00:01:29.932 --> 00:01:32.652
It's the first version
of the JSON extension.

26
00:01:32.652 --> 00:01:36.218
FTS5 is the fifth version of
the full text search extension.

27
00:01:36.218 --> 00:01:38.220
SQLite 3 is the third version.

28
00:01:38.220 --> 00:01:40.670
So that's where all
the numbers are coming from.

29
00:01:40.670 --> 00:01:45.170
I actually didn't know that until
I started researching this course,

30
00:01:45.170 --> 00:01:47.353
I just didn't ask any questions.

31
00:01:47.353 --> 00:01:49.843
It's called FDS5, we're gonna use FDS5.

32
00:01:52.651 --> 00:01:57.387
&gt;&gt; Brian Holt: So if you use a full
text search, if you use the extension,

33
00:01:57.387 --> 00:02:01.265
you can do something called Match,
like this.

34
00:02:01.265 --> 00:02:06.224
Select star from track_search
where track_search Match black,

35
00:02:06.224 --> 00:02:11.189
instead of having to say this or
this or this or this or this, right?

36
00:02:11.189 --> 00:02:16.438
So assuming you already still have

37
00:02:16.438 --> 00:02:21.150
tables, easy_tracks here.

38
00:02:21.150 --> 00:02:24.923
We're gonna use this and
we're gonna reuse it, and

39
00:02:24.923 --> 00:02:28.541
we're going to do a ful
text search on that table.

40
00:02:28.541 --> 00:02:33.708
If you don't have it,
you can just run this query.

41
00:02:33.708 --> 00:02:36.827
Notice this is two queries,
it says drop view if exists.

42
00:02:36.827 --> 00:02:41.710
You can probably imagine what
if it exists, does, right?

43
00:02:41.710 --> 00:02:44.480
If it exists, drop it,
if it doesn't, do nothing.

44
00:02:44.480 --> 00:02:49.721
So even if you have it and
it exists, you can just run this.

45
00:02:49.721 --> 00:02:53.103
And you can see it's still there.

46
00:02:54.966 --> 00:02:56.205
&gt;&gt; Brian Holt: Okay.

47
00:02:57.950 --> 00:03:01.600
&gt;&gt; Brian Holt: So now we're gonna do
something called a virtual table,

48
00:03:01.600 --> 00:03:07.226
which is, as you might imagine, it's not a
table backed by necessarily full rows, but

49
00:03:07.226 --> 00:03:12.495
it's going to be something that's going
to be provided by one of the extensions.

50
00:03:15.848 --> 00:03:19.338
&gt;&gt; Brian Holt: Since it won't
actually contain the rows, right,

51
00:03:19.338 --> 00:03:24.572
the rows are actually going to stay in
their original tables, it's going to be

52
00:03:24.572 --> 00:03:30.230
referencing other tables, which is where
the virtual part of it comes from, okay?

53
00:03:30.230 --> 00:03:33.334
So let's go ahead and
write this query here.

54
00:03:37.730 --> 00:03:42.840
&gt;&gt; Brian Holt: Create
virtual table track_seach,

55
00:03:42.840 --> 00:03:48.756
is what we're gonna call it, using FTS5.

56
00:03:48.756 --> 00:03:52.404
By the way,
FTS5 is an extension of SQLite.

57
00:03:52.404 --> 00:03:54.984
It's actually not built into
the core library itself.

58
00:03:54.984 --> 00:04:01.009
However, it's actually included with the
pre-bundled binary, which is two things.

59
00:04:01.009 --> 00:04:04.898
Essentially, you can always use it,
cuz I never recompile SQLite myself,

60
00:04:04.898 --> 00:04:08.447
I would tell you, you probably never
wanna do that yourself either.

61
00:04:08.447 --> 00:04:13.211
It is possible, for whatever reason, if
you didn't want it and you wanted to pair

62
00:04:13.211 --> 00:04:17.436
it out, you could recompile SQLite
without FTS5 bundled in, I think.

63
00:04:17.436 --> 00:04:22.245
Again, didn't really check that
cuz it never would want to, but

64
00:04:22.245 --> 00:04:24.003
you could, in theory.

65
00:04:24.003 --> 00:04:28.190
The content, you can tell where
the information is going to come from.

66
00:04:28.190 --> 00:04:32.464
It's gonna come from our view,
easy_tracks, but, and by the way,

67
00:04:32.464 --> 00:04:36.967
we are using a view, but it doesn't
have to be a view, it could be a table.

68
00:04:36.967 --> 00:04:40.630
It could be a view,
it could be a view of views.

69
00:04:40.630 --> 00:04:45.324
Turtles all the way down, right,
it doesn't really matter, okay?

70
00:04:45.324 --> 00:04:50.516
And you have to say content_rowid = id.

71
00:04:50.516 --> 00:04:54.959
So it expects a column in
there to be called rowid.

72
00:04:54.959 --> 00:04:58.954
So if we had called our ID rowid,
we wouldn't have to put this whole thing.

73
00:04:58.954 --> 00:05:02.853
We didn't, we just called it ID, so
you have to tell it what the rowid is.

74
00:05:02.853 --> 00:05:07.524
It's important because that's
how it's going to reference

75
00:05:07.524 --> 00:05:10.860
back the original table and
bring data out.

76
00:05:10.860 --> 00:05:17.065
And by the way, these have to be
double quotes on easy_tracks, I think.

77
00:05:19.343 --> 00:05:21.812
&gt;&gt; Brian Holt: Put single
quotes on the column of our ID.

78
00:05:21.812 --> 00:05:23.679
I don't know,
that's what I have in my notes.

79
00:05:23.679 --> 00:05:28.261
I'm never quite sure what they're
going to accept with quotes,

80
00:05:28.261 --> 00:05:32.525
if we're being super honest,
track, album, and artist.

81
00:05:32.525 --> 00:05:38.927
So with this, you're telling it, what do
you wanna include in the full text search?

82
00:05:38.927 --> 00:05:42.412
So let's say we had 30 columns in here,
and

83
00:05:42.412 --> 00:05:47.293
we only wanted to index three of them for
this full text search.

84
00:05:47.293 --> 00:05:48.760
This is where you would identify that.

85
00:05:48.760 --> 00:05:53.548
So that's what we're doing here,
and now that should be enough.

86
00:05:53.548 --> 00:05:55.976
Cool, we now have a virtual table.

87
00:05:59.460 --> 00:06:01.608
&gt;&gt; Brian Holt: Right, the track_search.

88
00:06:01.608 --> 00:06:03.463
Notice, it came with
a bunch of other stuff.

89
00:06:05.833 --> 00:06:06.932
I don't know why they're there.

90
00:06:06.932 --> 00:06:10.759
I never use them, but all you really
care about is the track_search.

91
00:06:12.792 --> 00:06:20.006
&gt;&gt; Brian Holt: And now we can do what
our original query that we wanted to do,

92
00:06:20.006 --> 00:06:25.099
which is select star from track_search,

93
00:06:25.099 --> 00:06:29.348
where track_search Match black.

94
00:06:35.877 --> 00:06:39.573
&gt;&gt; Brian Holt: Yeah, see, this is another
thing that bothers me about SQLite is I

95
00:06:39.573 --> 00:06:42.279
forget that they don't
populate it right away.

96
00:06:42.279 --> 00:06:45.681
So you have to go tell it to, hey,
actually, you need to go build this now.

97
00:06:45.681 --> 00:06:48.994
So we created everything,
we've done nothing wrong so far.

98
00:06:48.994 --> 00:06:52.068
This is all working so far, but
you actually have to go and

99
00:06:52.068 --> 00:06:53.682
insert these into the table.

100
00:06:53.682 --> 00:06:57.793
So we're actually gonna say,

101
00:06:57.793 --> 00:07:03.803
insert into track_search, select album,

102
00:07:03.803 --> 00:07:08.715
artist, track from easy_tracks.

103
00:07:13.897 --> 00:07:16.072
&gt;&gt; Brian Holt: This is all coming
from the eqp that I have on.

104
00:07:16.072 --> 00:07:18.081
You can turn it off too.

105
00:07:18.081 --> 00:07:23.469
Now this query that I
thought was going to work.

106
00:07:23.469 --> 00:07:28.919
Now if I run it again,
you can see now it's working, right?

107
00:07:28.919 --> 00:07:31.971
All of these have blackened
them somewhere, right?

108
00:07:31.971 --> 00:07:36.101
So good and bad here,
the cool thing is that this

109
00:07:36.101 --> 00:07:40.868
virtual table is not
repopulating every single time.

110
00:07:40.868 --> 00:07:43.675
And if we update things,
things should work.

111
00:07:43.675 --> 00:07:47.116
Because they're referencing the row IDs,
it should work okay.

112
00:07:47.116 --> 00:07:51.391
But what starts getting kind of messy is,
what happens when we start deleting

113
00:07:51.391 --> 00:07:54.903
from the table, inserting into the table,
changing the row?

114
00:07:54.903 --> 00:07:59.000
Where you can get really messed up is,
let's say I had one here called,

115
00:07:59.000 --> 00:08:03.256
I don't know, what if Amy Winehouse,
or let's choose a different one.

116
00:08:03.256 --> 00:08:07.591
What if the Black Crowes
renamed to be the Pink Crowes?

117
00:08:07.591 --> 00:08:10.168
This would start getting
really weird because it's

118
00:08:10.168 --> 00:08:13.925
actually indexed on Black Crowes, but
it's referencing the Pink Crowes.

119
00:08:13.925 --> 00:08:18.037
If I don't run that query again,
the insert into,

120
00:08:18.037 --> 00:08:23.202
it's going to give me back
the Pink Crowes matching a black query

121
00:08:23.202 --> 00:08:28.869
because I didn't update the virtual table,
right, kinda strange.

122
00:08:28.869 --> 00:08:32.041
So there's two things
you can either do here.

123
00:08:32.041 --> 00:08:35.735
You can either have some sort of cron job,
some sort of normal job that says,

124
00:08:35.735 --> 00:08:38.681
goes through, basically drops a table,
recreates it, and

125
00:08:38.681 --> 00:08:40.211
inserts everything in again.

126
00:08:40.211 --> 00:08:45.184
If you're doing something where it's
infrequent in how much it updates, and

127
00:08:45.184 --> 00:08:48.117
you only need to update it once a day,
an hour,

128
00:08:48.117 --> 00:08:51.835
a half hour, totally great,
very much understandable.

129
00:08:51.835 --> 00:08:56.017
We're not talking about
triggers in this course,

130
00:08:56.017 --> 00:09:00.209
cuz it just didn't feel
useful to teach triggers.

131
00:09:00.209 --> 00:09:02.875
However, if you go to
the Stack Overflow answer,

132
00:09:02.875 --> 00:09:06.239
you'll see here that you can
create what are called triggers,

133
00:09:06.239 --> 00:09:09.557
which are basically responses
to something being inserted.

134
00:09:09.557 --> 00:09:13.778
And you can say, hey, when this
something gets inserted into this table,

135
00:09:13.778 --> 00:09:18.003
go update my virtual view so that my
full text search is always up-to date.

136
00:09:18.003 --> 00:09:19.762
That's what you would do there.

137
00:09:19.762 --> 00:09:24.256
So this would be on, yeah,
on deletes, do this,

138
00:09:24.256 --> 00:09:28.751
on updates, do this,
a bunch of stuff like that.

139
00:09:28.751 --> 00:09:30.943
It's all in there if you
wanna learn how to do it.

140
00:09:30.943 --> 00:09:37.603
So we did match here,
I wanted to show you white as well.

141
00:09:37.603 --> 00:09:41.314
You can see all these are matching white,
and

142
00:09:41.314 --> 00:09:44.544
last one is gonna show you there is red.

143
00:09:47.203 --> 00:09:50.638
&gt;&gt; Brian Holt: And
all that is working as well,

144
00:09:50.638 --> 00:09:56.117
looking at red across
various different columns.

145
00:09:58.307 --> 00:10:02.546
&gt;&gt; Brian Holt: So my point here being,
you can use match, you can use equals, or

146
00:10:02.546 --> 00:10:07.803
you can call it a function, or at least
it looks like a function call, like that.

147
00:10:07.803 --> 00:10:12.662
These all do, as far as I can tell,
precisely the same thing.

148
00:10:12.662 --> 00:10:15.641
I will say that I learned match first, so

149
00:10:15.641 --> 00:10:19.683
that's what I've always
used with full text search.

150
00:10:19.683 --> 00:10:21.381
I also like it because at a glance,

151
00:10:21.381 --> 00:10:24.969
it's very obvious that this is a full
text search if you use match there.

152
00:10:27.402 --> 00:10:31.475
&gt;&gt; Brian Holt: So that's kind of up to
you, choose what you want, I use match.

153
00:10:35.256 --> 00:10:38.958
&gt;&gt; Brian Holt: There's a whole
myriad of ways to use this.

154
00:10:38.958 --> 00:10:42.609
I linked to the docs here, and
there's more stuff you can,

155
00:10:42.609 --> 00:10:47.078
I don't really use too much beyond match,
but feel free to look at this.

156
00:10:47.078 --> 00:10:52.195
There's other ways you can use full
text search to say, include this,

157
00:10:52.195 --> 00:10:59.910
don't include this, all that kinda stuff
&gt;&gt; Brian Holt: You can use it for

158
00:10:59.910 --> 00:11:01.104
things like type ahead.

159
00:11:01.104 --> 00:11:03.295
There's cool stuff you can do with that.

160
00:11:03.295 --> 00:11:07.200
There's near, again, I'm not gonna
speculate too much on what those

161
00:11:07.200 --> 00:11:11.121
do because I haven't used them, and
I haven't found need to use them.

162
00:11:11.121 --> 00:11:13.264
Let's talk about bm25.

163
00:11:13.264 --> 00:11:20.249
Right now we're just showing
you anything that matches it.

164
00:11:20.249 --> 00:11:22.512
So if I come back here,
where's my black one?

165
00:11:22.512 --> 00:11:30.194
That one, and
I'm gonna do bm25(track_search).

166
00:11:33.592 --> 00:11:36.019
&gt;&gt; Brian Holt: This is gonna
give you back a score.

167
00:11:40.793 --> 00:11:43.503
&gt;&gt; Brian Holt: Of how close
it is to the term, right?

168
00:11:43.503 --> 00:11:47.478
So again, assuming you're searching for
black on Spotify,

169
00:11:47.478 --> 00:11:51.001
you probably want the one
that's the closest result.

170
00:11:51.001 --> 00:11:55.305
Now, basically everything in there that I
showed you did match black perfectly, so

171
00:11:55.305 --> 00:11:58.169
you would assume that they're
basically all the same.

172
00:11:58.169 --> 00:12:00.812
I don't actually
understand how bm25 works,

173
00:12:00.812 --> 00:12:04.365
I just know this is how you're
supposed to get the closest match.

174
00:12:04.365 --> 00:12:10.828
Order by bm25(track_search).

175
00:12:13.430 --> 00:12:14.953
&gt;&gt; Brian Holt: Limit 15.

176
00:12:17.095 --> 00:12:19.663
&gt;&gt; Brian Holt: So, well,
I guess this makes sense,

177
00:12:19.663 --> 00:12:22.729
Black Sabbath shows up three times, right?

178
00:12:22.729 --> 00:12:27.005
So that is the most black, right?

179
00:12:27.005 --> 00:12:32.770
And then down here, it looks like
this is two blacks, blah, blah, blah.

180
00:12:32.770 --> 00:12:38.152
I think you can get, so
it'll do near queries as well.

181
00:12:38.152 --> 00:12:43.625
However, in any case, all of this to say,
this is how you tell SQLite,

182
00:12:43.625 --> 00:12:47.933
give me your best guess of
which one is the most correct.

183
00:12:47.933 --> 00:12:54.988
Now again, if you're Spotify, this is
probably not really what you want, right?

184
00:12:54.988 --> 00:12:57.948
If someone searches for black,
they're probably searching for

185
00:12:57.948 --> 00:13:01.119
whatever is the latest most popular
song with the word black in it, and

186
00:13:01.119 --> 00:13:03.183
then you have some other
way of ranking that.

187
00:13:03.183 --> 00:13:03.872
As opposed to,

188
00:13:03.872 --> 00:13:06.955
which one says the word black literally
the most times in the string?

189
00:13:06.955 --> 00:13:10.076
Otherwise, you'd have song titles
that were just that, right?

190
00:13:10.076 --> 00:13:16.571
So I just wanted to call your awareness
to it, that it's something that exists,

191
00:13:16.571 --> 00:13:23.660
if you need to do something that's nearest
match, or closest match, just lexically.

192
00:13:23.660 --> 00:13:26.691
And yeah, the smaller the number, or

193
00:13:26.691 --> 00:13:31.160
the more negative the number,
the better the match is.

194
00:13:33.682 --> 00:13:35.898
&gt;&gt; Brian Holt: I think it's distance,
right?

195
00:13:35.898 --> 00:13:40.051
I guess that would make sense cuz
it's in there three times, and so

196
00:13:40.051 --> 00:13:42.586
it continues to get even more negative.

197
00:13:42.586 --> 00:13:44.453
I don't know, again,
I'm just speculating there.

198
00:13:44.453 --> 00:13:46.911
The docs here, as you can see, explain it.

199
00:13:46.911 --> 00:13:50.160
And I took one look at that and
I said, nope, and

200
00:13:50.160 --> 00:13:54.323
I just closed the web page,
[LAUGH] cuz I did not wanna do math.

