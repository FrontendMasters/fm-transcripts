WEBVTT

1
00:00:00.000 --> 00:00:03.749
&gt;&gt; Brian Holt: So we've been
building locally with SQLite here,

2
00:00:03.749 --> 00:00:06.457
and I would say most people end here.

3
00:00:06.457 --> 00:00:10.572
This is the extent of their journey with
SQLite that they build something locally,

4
00:00:10.572 --> 00:00:13.862
they get far enough in their tutorial,
and they're like, cool,

5
00:00:13.862 --> 00:00:15.762
it's now time to move on to Postgres.

6
00:00:15.762 --> 00:00:18.306
And again, I fully endorse that path.

7
00:00:18.306 --> 00:00:20.517
If we're being honest,
it's still what I do.

8
00:00:20.517 --> 00:00:25.610
But I do want to shine a light on it is
possible to continue scaling with SQLite,

9
00:00:25.610 --> 00:00:30.237
and the way you do that, if you don't
wanna use any other paid service,

10
00:00:30.237 --> 00:00:32.193
is something called LiteFS.

11
00:00:34.447 --> 00:00:37.936
&gt;&gt; Brian Holt: LiteFS is made
by a company called Fly.

12
00:00:37.936 --> 00:00:42.040
So I'm sure many of
you've heard of fly.io.

13
00:00:42.040 --> 00:00:48.016
It's a,
that is the weirdest way to say that.

14
00:00:48.016 --> 00:00:51.273
Anyway, I'm sorry,
I got pulled away by their marketing.

15
00:00:51.273 --> 00:00:56.585
Fly.io is essentially,
I would consider them

16
00:00:56.585 --> 00:01:01.378
kinda the spiritual successor to Heroku.

17
00:01:01.378 --> 00:01:06.462
Heroku, for me, is the OG,
really cool developer product that

18
00:01:06.462 --> 00:01:12.130
took the cloud market by storm by
just making a really good experience.

19
00:01:12.130 --> 00:01:14.634
And it was expensive, but
it worked really well, and

20
00:01:14.634 --> 00:01:18.265
everyone still liked it and was happy to
pay them because it was so good to use.

21
00:01:18.265 --> 00:01:23.262
And then Salesforce bought them and
just let them languish forever, right?

22
00:01:23.262 --> 00:01:25.570
So Heroku, in my opinion,
is a shadow of itself.

23
00:01:25.570 --> 00:01:29.218
That's not even an opinion,
that's just true.

24
00:01:29.218 --> 00:01:30.691
Fly kinda took up that mantle.

25
00:01:30.691 --> 00:01:34.161
It's like,
we're gonna keep this idea going.

26
00:01:34.161 --> 00:01:35.415
And there's a bunch of them out there now.

27
00:01:35.415 --> 00:01:38.173
There's Azure App Service,

28
00:01:38.173 --> 00:01:44.027
there's AWS Elastic Beanstalk,
Render is another good one.

29
00:01:44.027 --> 00:01:46.318
They're all cool,
I'm a fan of all of them.

30
00:01:46.318 --> 00:01:50.839
Fly is definitely a good
user experience as well.

31
00:01:50.839 --> 00:01:57.077
Whereas a GCP App Engine is their
version of it, there's a bunch of them.

32
00:01:57.077 --> 00:02:01.164
It's essentially autoscaling VMs,

33
00:02:01.164 --> 00:02:04.745
essentially, is what they are.

34
00:02:04.745 --> 00:02:10.166
So, anyway, they invented this
where basically you can do SQLite,

35
00:02:10.166 --> 00:02:14.754
and then you can have it be
replicated to other locations.

36
00:02:14.754 --> 00:02:19.938
So let's say you're running on Fly,
which auto scales, right?

37
00:02:19.938 --> 00:02:24.537
So let's say you have your blog,
it gets front page of Hacker News,

38
00:02:24.537 --> 00:02:25.665
all of a sudden,

39
00:02:25.665 --> 00:02:31.254
Fly is gonna scale you up to ten servers
running your blog at the same time, right?

40
00:02:31.254 --> 00:02:37.214
What's the problem with SQLite
in this particular situation?

41
00:02:37.214 --> 00:02:40.035
You can't write to those cuz they
can't all talk to each other,

42
00:02:40.035 --> 00:02:41.562
they're not replications of it.

43
00:02:41.562 --> 00:02:45.837
They're just one copy of a file
running on the particular location.

44
00:02:45.837 --> 00:02:49.758
You can have some maybe constant
restores of Litestream,

45
00:02:49.758 --> 00:02:54.329
but that's a terrible idea,
please don't do it that way, right?

46
00:02:55.954 --> 00:02:57.954
&gt;&gt; Brian Holt: This is
what LiteFS is though.

47
00:02:57.954 --> 00:03:02.745
You're gonna have one primary database
that you're writing to, and then when you

48
00:03:02.745 --> 00:03:07.476
write to that one, it's going to replicate
to whatever else is subscribed to it.

49
00:03:07.476 --> 00:03:10.566
And then if anyone ever on those
kind of replicated versions try and

50
00:03:10.566 --> 00:03:14.168
write to their secondary, it's just
going to pass it back up to the primary.

51
00:03:14.168 --> 00:03:16.387
The primary is going to write it, and

52
00:03:16.387 --> 00:03:21.124
it's gonna be passed back down to all
the various other subscribed versions.

53
00:03:21.124 --> 00:03:26.144
I don't know if this is fully
based on Litestream, if it's not,

54
00:03:26.144 --> 00:03:32.100
it's strongly inspired by it, I think
they even say that in here somewhere.

55
00:03:32.100 --> 00:03:37.900
But that's why they're named very similar
things is because Litestream came first,

56
00:03:37.900 --> 00:03:40.373
then LiteFS copied a lot of the idea.

57
00:03:40.373 --> 00:03:46.309
And it does this based on what
it calls a fuse-based system.

58
00:03:46.309 --> 00:03:50.881
You can read more into that how it works,
but it's basically a shared file system I

59
00:03:50.881 --> 00:03:54.076
think it's a primitive of Linux,
if I'm not mistaken.

60
00:03:54.076 --> 00:03:58.372
I might be because I'm a little out of my
depth when it comes to that law of level

61
00:03:58.372 --> 00:03:59.640
of Linux kinda stuff.

