WEBVTT

1
00:00:00.000 --> 00:00:02.752
&gt;&gt; Brian Holt: That was
a complete intro to SQLite.

2
00:00:02.752 --> 00:00:04.320
It's pretty cool, I think.

3
00:00:04.320 --> 00:00:07.949
In this course, you should have hopefully
picked up on a little bit of SQL,

4
00:00:07.949 --> 00:00:11.925
if it wasn't familiar to you, if it was,
hopefully there was some refreshers and

5
00:00:11.925 --> 00:00:13.616
some new things that you learned.

6
00:00:13.616 --> 00:00:21.906
Yeah, hopefully I shed some light on
how SQLite fits into the ecosystem.

7
00:00:21.906 --> 00:00:28.583
And it's gone from kind of a grow up from
this local library that was only meant for

8
00:00:28.583 --> 00:00:34.291
embedded systems, all the way to
now powerful cloud database area.

9
00:00:34.291 --> 00:00:39.923
So again, people like to ask
me which one's my favorite.

10
00:00:39.923 --> 00:00:42.021
I think I've probably
talked about it enough.

11
00:00:42.021 --> 00:00:45.124
You can probably guess that
I do like Postgres, but

12
00:00:45.124 --> 00:00:47.444
I don't regret any time with SQLite.

13
00:00:47.444 --> 00:00:50.143
I've really enjoyed it.

14
00:00:50.143 --> 00:00:55.167
I'll fix this link here, but I do have
another course on Intro to Databases,

15
00:00:55.167 --> 00:00:58.895
which goes over Postgres,
Mongo, Redis, and Neo4j.

16
00:00:58.895 --> 00:01:03.285
That's another good course if you're
interested in getting kind of more

17
00:01:03.285 --> 00:01:08.188
varieties of other databases that are out
there, all really cool things as well.

18
00:01:08.188 --> 00:01:10.549
In general, Postgres has gotten so

19
00:01:10.549 --> 00:01:14.968
far that it's just kind of a general
purpose tool for everything.

20
00:01:14.968 --> 00:01:18.101
It handles queues,
it handles key value stores,

21
00:01:18.101 --> 00:01:21.990
it handles document based storage,
it just does so much now.

22
00:01:21.990 --> 00:01:26.605
But SQLite is making bounds, particularly
with some of the powerful people

23
00:01:26.605 --> 00:01:30.732
behind it, like the powerful
movement that's growing behind it.

24
00:01:30.732 --> 00:01:34.970
So we went over how to get SQLite running,
the basics of SQL,

25
00:01:34.970 --> 00:01:39.126
how to build an app with Node JS,
what's unique to SQLite,

26
00:01:39.126 --> 00:01:43.386
how to use JSON extension, and
just extensions in general.

27
00:01:43.386 --> 00:01:46.183
Some of the performance aspects of it,

28
00:01:46.183 --> 00:01:52.290
some of the futuristic cool stuff that's
like recent innovations with Litestream,

29
00:01:52.290 --> 00:01:57.121
LiteFS, the libSQL, and
a little bit of local first development,

30
00:01:57.121 --> 00:02:00.200
kind of first steps
into that kind of area.

31
00:02:00.200 --> 00:02:04.095
So with that, I'll take any
questions if there's any left here.

32
00:02:04.095 --> 00:02:09.359
&gt;&gt; Speaker 2: Do you have any thoughts on
when local first wouldn't be a good idea?

33
00:02:09.359 --> 00:02:11.856
&gt;&gt; Brian Holt: I do.

34
00:02:11.856 --> 00:02:14.651
It is more complicated infrastructure, so

35
00:02:14.651 --> 00:02:18.280
you're gonna end up with just
more stuff to worry about.

36
00:02:18.280 --> 00:02:20.742
That can be problematic.

37
00:02:20.742 --> 00:02:25.960
As far from a use case,
if you are very consistency bound,

38
00:02:25.960 --> 00:02:31.817
again, if you read from the database and
you have no tolerance for

39
00:02:31.817 --> 00:02:35.651
it being late, that's not a good thing for

40
00:02:35.651 --> 00:02:41.324
local first cuz you have to be
okay with eventual consistency.

41
00:02:41.324 --> 00:02:42.310
You wouldn't use Mongo.

42
00:02:42.310 --> 00:02:43.781
Mongo has eventual consistency.

43
00:02:43.781 --> 00:02:47.544
You wouldn't use Cassandra,
another eventually consistent database.

44
00:02:47.544 --> 00:02:53.898
You would use something like Postgres, and
turn on all the consistency knobs, right?

45
00:02:53.898 --> 00:02:58.168
It's like, if this is written to the
database, I need you to acknowledge for

46
00:02:58.168 --> 00:03:02.440
all of my secondary replicas that it's
been written to those as well before we

47
00:03:02.440 --> 00:03:03.840
return is true, right?

48
00:03:03.840 --> 00:03:08.641
That's probably the biggest
one I would think of.

49
00:03:08.641 --> 00:03:12.825
Local first requires some discipline
of how you structure your data as well.

50
00:03:12.825 --> 00:03:16.287
Because as you imagine, you don't wanna
send an entire copy of your database to

51
00:03:16.287 --> 00:03:19.398
your user because there could be a lot
of private information in there.

52
00:03:19.398 --> 00:03:23.369
So you have to structure it in such
a way that you can kind of section off

53
00:03:23.369 --> 00:03:27.821
little shards of data to give to your
user that's okay for them to know about,

54
00:03:27.821 --> 00:03:29.822
write to all those kind of things.

55
00:03:29.822 --> 00:03:35.280
And if you can't structure your data
that way, then you can't do local first.

56
00:03:35.280 --> 00:03:39.553
And then the other thing
is you are targeting

57
00:03:39.553 --> 00:03:43.491
browsers that can handle WebAssembly.

58
00:03:43.491 --> 00:03:48.262
So if you're targeting 2G devices in the
middle of Montana or the middle of India

59
00:03:48.262 --> 00:03:52.279
or something like that,
local first is not gonna help you, right?

60
00:03:52.279 --> 00:03:56.970
Because those probably can't run
WebAssembly with any amount of speed.

61
00:03:58.527 --> 00:04:02.269
&gt;&gt; Brian Holt: But if you're targeting
iPhone users in Montana, rural Montana or

62
00:04:02.269 --> 00:04:06.932
India, it was actually a perfect use case
for that because when they're on Wi-Fi,

63
00:04:06.932 --> 00:04:09.888
they can get their data and
then they can go offline and

64
00:04:09.888 --> 00:04:11.616
it works really well, right?

65
00:04:11.616 --> 00:04:16.716
So that's some initial thoughts,
I'm sure I'm missing some stuff,

66
00:04:16.716 --> 00:04:20.202
but that's at least a good
place to get started.

67
00:04:20.202 --> 00:04:22.245
&gt;&gt; Speaker 2: When would you
use something like Neon?

68
00:04:22.245 --> 00:04:24.988
&gt;&gt; Brian Holt: All the time, just kidding.

69
00:04:24.988 --> 00:04:28.690
Yeah, I get a bonus every time I say that.

70
00:04:28.690 --> 00:04:34.506
My opinion on Postgres is that
it's the default database for

71
00:04:34.506 --> 00:04:38.839
most use cases, and
that for me personally,

72
00:04:38.839 --> 00:04:42.271
I need a reason to not use Postgres.

73
00:04:42.271 --> 00:04:46.166
I need to use Neo4j's cuz I have graph and
I'm just using graph, right?

74
00:04:46.166 --> 00:04:51.942
Then I would use Neo4j's, or
some other graph based database.

75
00:04:51.942 --> 00:04:53.547
So with that in mind and

76
00:04:53.547 --> 00:04:58.535
my bias towards it that existed even
before I started working at Neon.

77
00:04:58.535 --> 00:05:01.114
I like Neon because I like serverless,
right?

78
00:05:01.114 --> 00:05:01.639
And that's what they did.

79
00:05:01.639 --> 00:05:05.653
They took it apart the database,
they separated the storage and

80
00:05:05.653 --> 00:05:09.086
the compute layer so
that it can scale independently.

81
00:05:09.086 --> 00:05:11.344
And you only pay for consumption.

82
00:05:11.344 --> 00:05:15.431
So if you're not doing very much,
you don't pay very much, which is cool.

83
00:05:15.431 --> 00:05:18.824
So to answer the question
of when do I use Neon,

84
00:05:18.824 --> 00:05:23.350
I use Neon unless I have a reason not to,
which there are some.

85
00:05:23.350 --> 00:05:26.989
There's some reasons to
host Postgres yourself.

86
00:05:26.989 --> 00:05:29.671
There's some reasons to
host Postgres other places,

87
00:05:29.671 --> 00:05:32.597
cuz they have different features
that Neon doesn't have.

88
00:05:32.597 --> 00:05:36.863
But Neon for the most part,
is just stock serverless Postgres,

89
00:05:36.863 --> 00:05:41.933
which is just knowable, right,
which I quite appreciate, all right?

90
00:05:41.933 --> 00:05:45.550
Well, thank you, hope you enjoyed
the course, and we'll see you next time.

91
00:05:45.550 --> 00:05:48.824
&gt;&gt; [APPLAUSE]

