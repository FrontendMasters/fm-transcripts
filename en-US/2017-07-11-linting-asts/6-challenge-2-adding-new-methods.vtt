WEBVTT

1
00:00:00.270 --> 00:00:03.530
&gt;&gt; Kent C Dodds: Yeah, so
you're gonna run the exercise script again

2
00:00:03.530 --> 00:00:05.200
to get to our next exercise.

3
00:00:05.200 --> 00:00:10.180
So this, if you did a really
complicated plugin that you

4
00:00:10.180 --> 00:00:15.020
were really proud of or something,
then you're gonna want to copy this.

5
00:00:15.020 --> 00:00:17.160
Because when you run the exercise script,

6
00:00:17.160 --> 00:00:19.730
it's gonna totally delete
all the work that you had.

7
00:00:19.730 --> 00:00:21.520
This way, we're all on the same page for

8
00:00:21.520 --> 00:00:25.160
every exercise, so nobody falls behind,
and that kinda thing.

9
00:00:25.160 --> 00:00:29.860
But if you're really proud of
your work here, then copy it.

10
00:00:29.860 --> 00:00:34.397
You can save it somewhere else and
show it to your family or something.

11
00:00:34.397 --> 00:00:38.671
[LAUGH] Okay, so we're gonna do
npm start exercise.eslint.1.

12
00:00:40.126 --> 00:00:46.608
&gt;&gt; Kent C Dodds: And
now your exercise should look like mine,

13
00:00:46.608 --> 00:00:51.390
and your test should be failing.

14
00:00:53.010 --> 00:00:56.180
So we have more tests,
more use cases we didn't consider before.

15
00:00:59.133 --> 00:01:03.240
&gt;&gt; Kent C Dodds: Fun fact on this npm
start, you can actually use prefixes.

16
00:01:03.240 --> 00:01:08.000
So if you don't wanna type out exercise,
you can do ex and then es.

17
00:01:08.000 --> 00:01:11.240
And that still works, so that's kinda fun.

18
00:01:13.806 --> 00:01:15.283
&gt;&gt; Kent C Dodds: Okay, cool, so

19
00:01:15.283 --> 00:01:20.140
let's see these new use cases
that we need to support.

20
00:01:24.007 --> 00:01:26.450
&gt;&gt; Kent C Dodds: Whoops, yeah.

21
00:01:26.450 --> 00:01:35.650
So now we need to make sure that if I
use foo.console, that should still work.

22
00:01:35.650 --> 00:01:39.525
Maybe I have a method called console, or
even a property on an object or something.

23
00:01:39.525 --> 00:01:42.730
If I just call a console function,
that should still work.

24
00:01:42.730 --> 00:01:48.425
What if I have a function that accepts a
console function, or something like that?

25
00:01:48.425 --> 00:01:53.400
Or this is the one that'll be
a little bit more tricky is,

26
00:01:53.400 --> 00:01:58.065
if I'm calling a function on
console that is not one of

27
00:01:58.065 --> 00:02:03.120
some disallowed functions,
then that should be fine.

28
00:02:03.120 --> 00:02:06.255
Which it's a little bit contrived
because I wouldn't want people calling

29
00:02:06.255 --> 00:02:07.190
console.baz.

30
00:02:07.190 --> 00:02:08.660
That doesn't make sense.

31
00:02:08.660 --> 00:02:10.870
But my goal here is to

32
00:02:12.340 --> 00:02:16.570
show you how to scope down what
you're looking for further.

33
00:02:19.120 --> 00:02:24.113
As far as anything else that you need to
know, I'll just give you a little tip.

34
00:02:26.802 --> 00:02:31.297
&gt;&gt; Kent C Dodds: What I do in
my solution is, at the very top,

35
00:02:31.297 --> 00:02:36.655
I create this variable
called disallowedMethods.

36
00:02:37.780 --> 00:02:41.479
And I put all the console methods in here,
so log,

37
00:02:41.479 --> 00:02:45.372
and warn, and
all the ones I wanna prevent against.

38
00:02:45.372 --> 00:02:50.723
And then I use that with array includes,
to determine whether or

39
00:02:50.723 --> 00:02:57.400
not the thing that is being called is
included in that, those design methods.

40
00:02:57.400 --> 00:02:58.710
So fun little tip.

