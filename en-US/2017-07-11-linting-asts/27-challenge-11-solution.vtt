WEBVTT

1
00:00:00.250 --> 00:00:04.830
&gt;&gt; Kent C Dodds: Okay, so
I'm gonna copy this into our AST Explorer

2
00:00:06.000 --> 00:00:10.970
and take our test cases, and
also bring those into AST Explorer.

3
00:00:12.670 --> 00:00:18.207
And to simplify my life a little bit
I'm just comment out everything for

4
00:00:18.207 --> 00:00:21.078
the one that we want, for right now.

5
00:00:24.301 --> 00:00:27.370
&gt;&gt; Kent C Dodds: And
that way we only go through stuff once.

6
00:00:29.780 --> 00:00:36.852
&gt;&gt; Kent C Dodds: So
here we go, let's go ahead and

7
00:00:36.852 --> 00:00:42.680
look at the, yeah, Dane.

8
00:00:42.680 --> 00:00:46.340
This would take a while for
me to write up and

9
00:00:46.340 --> 00:00:51.080
I don't think that you would get a whole
lot more out of it to watch me do it.

10
00:00:51.080 --> 00:00:54.570
So I'm gonna just take you through
the finished code, that's all right?

11
00:00:54.570 --> 00:01:00.400
Okay, also I think our brains are fried,
so I think we'll be okay.

12
00:01:03.745 --> 00:01:06.220
&gt;&gt; Kent C Dodds: So
this is what we've got going on.

13
00:01:07.850 --> 00:01:12.950
In our call expression, now this looks
like is much simpler we can probably

14
00:01:12.950 --> 00:01:19.760
just do away with the looks like entirely
and just do path.node.callee.name is $.

15
00:01:19.760 --> 00:01:24.392
And the reason for that is because
this code is using dollar and

16
00:01:24.392 --> 00:01:26.809
we wanna catch those, as well.

17
00:01:26.809 --> 00:01:31.260
That we wanna be able to
hang onto those references.

18
00:01:31.260 --> 00:01:34.790
And so if it's not using dollar
sign then we don't care.

19
00:01:34.790 --> 00:01:37.570
It could be a call to any other function.

20
00:01:37.570 --> 00:01:41.790
And then we can check if it's
a supported jQuery function call.

21
00:01:41.790 --> 00:01:45.370
So for our other cases where,

22
00:01:47.570 --> 00:01:51.230
like for this case for example,
like this we can still do right now.

23
00:01:51.230 --> 00:01:54.792
We don't have to wait until the program
exists or anything like that.

24
00:01:54.792 --> 00:01:59.011
And so if it's not a supported
jQuery function call,

25
00:01:59.011 --> 00:02:04.072
which is just doing the rest of
our like thing that we had before,

26
00:02:04.072 --> 00:02:09.750
so if it's not, then we'll see,
okay, is this a variable declator?

27
00:02:09.750 --> 00:02:11.466
Is this part of a variable declaration?

28
00:02:11.466 --> 00:02:14.950
If it is,
then I'm going to keep track of this path.

29
00:02:14.950 --> 00:02:17.830
Now with our ESLint plug in,
we did things differently.

30
00:02:17.830 --> 00:02:23.490
We created a variable up here at
the top to keep track of everything,

31
00:02:23.490 --> 00:02:26.930
and the reason that we can't
do that here is because

32
00:02:26.930 --> 00:02:31.810
the way that Babel works
as far as the API goes.

33
00:02:31.810 --> 00:02:39.130
If I were to do const myCollection as
an array and just add stuff to that, then

34
00:02:39.130 --> 00:02:45.120
every file that this plugin runs across is
going to have nodes added to this list.

35
00:02:45.120 --> 00:02:49.440
Things aren't scoped to the file,
whereas with ESLint

36
00:02:49.440 --> 00:02:54.160
you're doing module.exports an object, and

37
00:02:54.160 --> 00:02:59.890
you have a create(context), and
this function is called for every file.

38
00:02:59.890 --> 00:03:04.516
And so you can have stuff scoped down,
collection,

39
00:03:04.516 --> 00:03:10.730
down to this function, and
that's new for every single file.

40
00:03:10.730 --> 00:03:14.320
But we can't do that with
the API that Babel gives us, and

41
00:03:14.320 --> 00:03:19.350
that's okay though because one of
the things that Babel will give us.

42
00:03:19.350 --> 00:03:20.520
I'm sorry, one other thing.

43
00:03:20.520 --> 00:03:23.280
One other difference that's useful

44
00:03:23.280 --> 00:03:27.880
is Program.exit was what you had to do for
ESLint.

45
00:03:27.880 --> 00:03:31.940
And for Babel, it's actually,
I think this is a little bit nicer.

46
00:03:31.940 --> 00:03:34.770
If you want to be specific about enter or

47
00:03:34.770 --> 00:03:39.000
exit, then you can make it an object and
have it enter or exit.

48
00:03:39.000 --> 00:03:40.820
So by default, it'll be enter, but

49
00:03:40.820 --> 00:03:44.850
if you make it an object you
can specify which one you want.

50
00:03:44.850 --> 00:03:49.295
And so on the enter, we're going to set

51
00:03:49.295 --> 00:03:55.916
assignedJQueryEls to a new set
that we can add stuff into.

52
00:03:55.916 --> 00:04:00.234
And so we get a bunch of like kinda
contextual information like some

53
00:04:00.234 --> 00:04:05.090
options and stuff like that as a second
argument to all of our visitors, and

54
00:04:05.090 --> 00:04:10.080
file's one of those things and
you can set things on the file.

55
00:04:10.080 --> 00:04:11.880
So that way,
things are scoped to the file.

56
00:04:13.440 --> 00:04:19.120
So down here, if it's not a supported
jQuery function call like this,

57
00:04:19.120 --> 00:04:24.320
it's not actually a function call and
it is a variable.

58
00:04:24.320 --> 00:04:29.728
The parent is a variable declaritor so
this thing, then we're going

59
00:04:29.728 --> 00:04:35.618
to get the assigned jQuery L's set that
we created and add the pack to that.

60
00:04:35.618 --> 00:04:39.250
And then we'll return because we
can't do anything with this anyways.

61
00:04:39.250 --> 00:04:43.066
We have to wait until the rest
of the program's been traversed.

62
00:04:43.066 --> 00:04:47.980
Otherwise, if it is, a supported jQuery
function called and we'll continue.

63
00:04:47.980 --> 00:04:52.896
And we'll get the jQuery function,
we'll get the path to replace,

64
00:04:52.896 --> 00:04:54.520
and let's see right.

65
00:04:56.160 --> 00:04:58.710
Right here would be the path to replace,

66
00:04:58.710 --> 00:05:00.660
that was the overall
path that we had before.

67
00:05:01.920 --> 00:05:08.130
And then we'll get element
that is being selected on,

68
00:05:08.130 --> 00:05:13.610
so the thing that we need to
call our raw dom APIs on.

69
00:05:14.910 --> 00:05:16.920
And then we'll handle
support to jQuery function.

70
00:05:16.920 --> 00:05:20.530
So if that jQuery function is addClass,
then we'll update addClass,

71
00:05:20.530 --> 00:05:22.990
otherwise we'll update this way,
with addTemplate stuff.

72
00:05:25.650 --> 00:05:30.270
So, so far most of that's refactor and
storing

73
00:05:30.270 --> 00:05:34.670
a couple of things for
those that are variable assignments.

74
00:05:36.500 --> 00:05:41.407
So once our program is finished reversing,
we'll hit this exit, and

75
00:05:41.407 --> 00:05:44.650
we're gonna get that set that we created,
and

76
00:05:44.650 --> 00:05:49.830
that's gonna be a collection of all
the jQuery el variable declerators.

77
00:05:49.830 --> 00:05:55.290
And we'll turn that set into an array so
we can call forEach on it.

78
00:05:55.290 --> 00:06:02.270
And for each assigned call expression,
we'll get the declerator path.

79
00:06:02.270 --> 00:06:05.530
So here,
what we have in our collection are these.

80
00:06:05.530 --> 00:06:07.130
Let me just expand that just a titch.

81
00:06:07.130 --> 00:06:10.280
So we have a bunch of these dollar Ls'.

82
00:06:10.280 --> 00:06:15.792
So we're gonna get the parent path,
so that'll give us this and

83
00:06:15.792 --> 00:06:20.756
with that declared a path we
can get all the bindings.

84
00:06:20.756 --> 00:06:26.280
So with ESLint, you would just give
context.get declared variables,

85
00:06:26.280 --> 00:06:28.010
you give that a variable declerator and

86
00:06:28.010 --> 00:06:32.920
that would give you all the an object
that had bindings on it with the ESLint.

87
00:06:32.920 --> 00:06:35.470
You take a pass.

88
00:06:35.470 --> 00:06:37.730
And you get the scope from that patch.

89
00:06:37.730 --> 00:06:43.300
And you call get binding and
provide it a name, a variable name.

90
00:06:43.300 --> 00:06:46.280
In our case, that's gonna be myEL.

91
00:06:46.280 --> 00:06:50.308
So it will take the path that
this line of code is in,

92
00:06:50.308 --> 00:06:56.340
whether that is in a bunch of closures or
the root level of the module.

93
00:06:56.340 --> 00:07:00.710
And give us this binding object that has
a bunch of information about how this

94
00:07:00.710 --> 00:07:02.200
variable is used.

95
00:07:02.200 --> 00:07:04.160
And one of those things
is reference paths.

96
00:07:05.590 --> 00:07:10.070
And so the reference path would
be this identifier right here,

97
00:07:10.070 --> 00:07:11.290
the path to that identifier.

98
00:07:12.500 --> 00:07:14.550
So for each one of these reference paths,

99
00:07:14.550 --> 00:07:20.560
we're gonna make sure that it
looks like a call expression,

100
00:07:20.560 --> 00:07:26.240
or that it's part of a member
expression that's a call expression.

101
00:07:26.240 --> 00:07:31.091
So here's our identifier,
that identifier is part of the member

102
00:07:31.091 --> 00:07:34.630
expression that's part
of a call expression.

103
00:07:34.630 --> 00:07:38.977
And if that is the case and it's not
a jquery supported function called,

104
00:07:38.977 --> 00:07:44.690
like this myOtherEl.unsupported function,
then we're gonna return, we'll exit early.

105
00:07:46.090 --> 00:07:50.273
Otherwise, in this case, where it is
a supported jQuery function call, then,

106
00:07:50.273 --> 00:07:53.750
we're gonna get all
the things that we need to

107
00:07:53.750 --> 00:07:57.170
handle that supported jQuery function.

108
00:07:57.170 --> 00:08:00.290
Whether that be hide or show or add class.

109
00:08:00.290 --> 00:08:02.095
And we'll pass in the argument.

110
00:08:02.095 --> 00:08:07.800
So in our case,
this is the assignedCallExpression,

111
00:08:07.800 --> 00:08:10.210
so that is this thing.

112
00:08:10.210 --> 00:08:13.870
And we're gonna get the node for
that and the arguments.

113
00:08:13.870 --> 00:08:15.970
And we'll pop off the first one,
so we're getting el.

114
00:08:17.320 --> 00:08:22.180
We'll pass that in and, in addition to
that, we'll take the reference path, so

115
00:08:22.180 --> 00:08:24.820
that is this thing right here.

116
00:08:24.820 --> 00:08:26.400
Come on, that reference path.

117
00:08:26.400 --> 00:08:31.040
We'll take the parent and
the property is this.

118
00:08:31.040 --> 00:08:33.630
And the name is add class.

119
00:08:33.630 --> 00:08:36.200
And so we pass that in for
the jQuery function.

120
00:08:37.220 --> 00:08:40.170
And then the last piece is
the path to replace and

121
00:08:40.170 --> 00:08:44.830
the path we want to replace is this line.

122
00:08:44.830 --> 00:08:49.390
Well, pretty much all of this stuff
which is kind of interesting.

123
00:08:49.390 --> 00:08:55.479
Yeah, so, actually, this is not quite
finished as far as implementation goes,

124
00:08:55.479 --> 00:09:01.587
cuz I'm fairly certain that when we're
done, we still have, no, we don't.

125
00:09:01.587 --> 00:09:02.730
How do we do that?

126
00:09:04.430 --> 00:09:05.830
That's right, that's right.

127
00:09:05.830 --> 00:09:09.420
So what we wanna replace here
is this call right there.

128
00:09:10.790 --> 00:09:15.170
And then we replace that with the new ROM,
DOM,

129
00:09:15.170 --> 00:09:18.230
API call and
then we remove the declaratory path.

130
00:09:18.230 --> 00:09:23.380
So we remove this guy and that's it.

131
00:09:23.380 --> 00:09:27.220
So, sorry, that would've taken
quite awhile to type all out.

132
00:09:27.220 --> 00:09:31.310
I would encourage you to try and
do this exercise.

133
00:09:31.310 --> 00:09:32.950
It will teach you a lot.

