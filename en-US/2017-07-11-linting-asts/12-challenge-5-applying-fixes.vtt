WEBVTT

1
00:00:00.100 --> 00:00:06.384
&gt;&gt; Kent C. Dodds: So go ahead and
run, npm start exercise.eslint.,

2
00:00:06.384 --> 00:00:09.325
what are we on, 3, 4?

3
00:00:09.325 --> 00:00:11.103
4.

4
00:00:20.413 --> 00:00:24.090
&gt;&gt; Kent C. Dodds: Okay so with this one,
the test changed slightly.

5
00:00:25.780 --> 00:00:30.490
Now this invalid case that
we just solved for is, or

6
00:00:30.490 --> 00:00:36.740
not all of the invalid cases,
this invalid function that we had,

7
00:00:36.740 --> 00:00:39.560
now it's accepting a second
argument called output.

8
00:00:41.010 --> 00:00:45.420
And if that output is present then
we'll add that to our invalid test.

9
00:00:45.420 --> 00:00:48.640
So part of this tester API,

10
00:00:48.640 --> 00:00:54.710
just to show it less abstracted,
is code like the bad code.

11
00:00:54.710 --> 00:00:59.128
The errors that you expect to see, and

12
00:00:59.128 --> 00:01:04.802
properties from those errors,
and the output.

13
00:01:04.802 --> 00:01:11.270
So ESLint has the capability
of automatically fixing code.

14
00:01:11.270 --> 00:01:14.470
And you as a plug-in
author are responsible for

15
00:01:14.470 --> 00:01:18.440
writing the code to
automatically fix the code, so

16
00:01:18.440 --> 00:01:22.880
doing things like adding or
removing semicolons or spacing.

17
00:01:22.880 --> 00:01:26.240
Adding a block, like that if
statement that we were doing earier,

18
00:01:26.240 --> 00:01:32.260
you could add a block around that,
and so for us, we

19
00:01:32.260 --> 00:01:36.310
don't want people to use console because
we have problems with console in our app.

20
00:01:36.310 --> 00:01:40.200
Instead, we want people to use this
global logger that we have available.

21
00:01:40.200 --> 00:01:44.060
So because it's nice to
have the lint rule so

22
00:01:44.060 --> 00:01:48.240
that we make sure nobody pushes
stuff that is using console.

23
00:01:48.240 --> 00:01:51.420
But it's even better if we
can automatically fix it.

24
00:01:51.420 --> 00:01:56.075
And especially if it's something kind
of simple that we know we're not gonna

25
00:01:56.075 --> 00:01:59.941
break anything, then may as well
just automatically fix it, so

26
00:01:59.941 --> 00:02:01.104
that is your task.

27
00:02:01.104 --> 00:02:02.770
A couple of things.

28
00:02:05.143 --> 00:02:07.564
&gt;&gt; Kent C. Dodds: A couple of things
that you need to make sure or

29
00:02:07.564 --> 00:02:10.950
that I need to make sure
you know about doing this.

30
00:02:10.950 --> 00:02:16.470
So first off, on this meta object here,

31
00:02:16.470 --> 00:02:19.630
You have to provide a property,
called fixable.

32
00:02:21.050 --> 00:02:23.880
And so I'll just type that here fixable.

33
00:02:23.880 --> 00:02:26.580
And you can either put white space or
code.

34
00:02:26.580 --> 00:02:31.360
And I'm not sure what impact that
actually has on anything, but

35
00:02:31.360 --> 00:02:34.800
we're gonna be fixing code,
so just put code in there.

36
00:02:34.800 --> 00:02:38.968
&gt;&gt; Kent C. Dodds: And then from here,

37
00:02:38.968 --> 00:02:44.610
let's see, no, no, no.

38
00:02:44.610 --> 00:02:49.859
Yeah, so from here, you,
on your contacts.report,

39
00:02:49.859 --> 00:02:55.442
you provide a fix function that
accepts a fixer parameter,

40
00:02:55.442 --> 00:03:01.150
and this fixer has some methods
on it to help you fix the code.

41
00:03:04.251 --> 00:03:09.036
&gt;&gt; Kent C. Dodds: And that is documented
in a place that I will show you, fixer,

42
00:03:09.036 --> 00:03:10.427
Applying Fixes.

43
00:03:12.976 --> 00:03:15.390
&gt;&gt; Kent C. Dodds: And here are all
the fixer functions you can call.

44
00:03:18.040 --> 00:03:21.060
I'll just give you a tip,
the one you're gonna call is replace text.

45
00:03:23.756 --> 00:03:28.570
&gt;&gt; Kent C. Dodds: So
here we'll say fixer.replaceText.

46
00:03:28.570 --> 00:03:32.530
You'll pass in the note that you want
to replace and then a string for

47
00:03:32.530 --> 00:03:33.810
what you want to replace it with.

48
00:03:33.810 --> 00:03:37.559
So the node and the string.

49
00:03:41.362 --> 00:03:45.499
&gt;&gt; Kent C. Dodds: Another tip
is this report function, or

50
00:03:45.499 --> 00:03:48.180
the this context report.

51
00:03:49.180 --> 00:03:52.140
We're using it twice and
using it in a pretty similar way.

52
00:03:52.140 --> 00:03:54.840
And our fixer is actually
going to be identical.

53
00:03:54.840 --> 00:03:58.160
And so you could refactor
this a couple different ways.

54
00:03:58.160 --> 00:04:02.660
I see in lots of ESLint plugins,
people will create a report function that

55
00:04:02.660 --> 00:04:07.101
accepts parameters, because often
the report looks exactly the same.

56
00:04:07.101 --> 00:04:11.150
And yeah, so that's what my solution does.

57
00:04:11.150 --> 00:04:15.100
But you could also just create
a fixer function up here and

58
00:04:15.100 --> 00:04:17.700
just pass it along to both
of those report calls.

59
00:04:17.700 --> 00:04:18.480
However you wanna do that.

60
00:04:20.514 --> 00:04:23.790
&gt;&gt; Kent C. Dodds: One last
thing that is kinda sad.

61
00:04:23.790 --> 00:04:25.093
I'm gonna have to make you all do this.

62
00:04:25.093 --> 00:04:29.021
You don't have to if you don't want
to but, well actually two things,

63
00:04:29.021 --> 00:04:32.560
first off AST explorer doesn't
support the fixture function.

64
00:04:32.560 --> 00:04:34.670
So it's not gonna run your fixture
function you won't see that

65
00:04:34.670 --> 00:04:35.980
which is kinda sad.

66
00:04:35.980 --> 00:04:39.660
Pull requests welcome I'm sure.

67
00:04:39.660 --> 00:04:44.170
But ESLint, the test runner,

68
00:04:45.180 --> 00:04:49.820
if your code is different, here, actually
we'll just experience this right now.

69
00:04:51.370 --> 00:04:53.695
Let me run npm start.

70
00:04:56.276 --> 00:05:00.714
&gt;&gt; Kent C. Dodds: So we're getting
a bunch of errors because our fixed code,

71
00:05:00.714 --> 00:05:04.550
actually, we're not
actually fixing anything.

72
00:05:04.550 --> 00:05:07.740
So the code looks exactly the same
after it runs through our fixer.

73
00:05:09.050 --> 00:05:10.580
And so we're getting this error,

74
00:05:10.580 --> 00:05:13.540
output is incorrect, but we're not
seeing what the output looks like.

75
00:05:13.540 --> 00:05:15.470
That's a real bummer.

76
00:05:15.470 --> 00:05:19.460
And ESLint is using Node's assert module,
and

77
00:05:19.460 --> 00:05:21.380
the testing framework we're using is Jest.

78
00:05:21.380 --> 00:05:26.230
And until the next version, just for this

79
00:05:26.230 --> 00:05:30.300
workshop I made a pull request to Jest to
make it support the assert module better.

80
00:05:30.300 --> 00:05:35.010
And the next version is going
to have much nicer output, but

81
00:05:35.010 --> 00:05:36.160
it didn't quite get shipped.

82
00:05:36.160 --> 00:05:39.281
So I will show you how to hack ESLint so

83
00:05:39.281 --> 00:05:43.410
that it will show you what
the code looks like, so

84
00:05:43.410 --> 00:05:48.674
that as you're developing things
it's a little bit better.

85
00:05:48.674 --> 00:05:54.094
Actually, I kinda documented this

86
00:05:54.094 --> 00:06:00.070
in the other directory, /copy.md.

87
00:06:00.070 --> 00:06:04.710
So you'll go to this file,
go to line 532, and paste this code, and

88
00:06:04.710 --> 00:06:07.950
then you'll get better output.

89
00:06:07.950 --> 00:06:12.640
So I'll do that really quick, and
then you can just look at that copy.md.

90
00:06:12.640 --> 00:06:16.027
And we'll find ESLint.

91
00:06:18.093 --> 00:06:23.330
&gt;&gt; Kent C. Dodds: And
it's in lib &gt; testers &gt; rule-tester.

92
00:06:23.330 --> 00:06:24.630
It's line 523.

93
00:06:27.933 --> 00:06:30.284
&gt;&gt; Kent C. Dodds: Hold on,
is that right, 532.

94
00:06:32.160 --> 00:06:33.510
There we go.

95
00:06:33.510 --> 00:06:35.840
So it looks like this where
it has the fixed results and

96
00:06:35.840 --> 00:06:38.040
it does this assert.equal, right here.

97
00:06:38.040 --> 00:06:44.984
So right above that assert .equal, you'll
paste that code that I have in the copy.

98
00:06:44.984 --> 00:06:49.747
And then if we rerun the test then
we're gonna see much more much more

99
00:06:49.747 --> 00:06:50.930
useful output.

100
00:06:51.960 --> 00:06:57.140
Which again, the next version of Jest
will show this in an even better way.

101
00:06:58.760 --> 00:07:00.390
So sorry that you have to do that for now.

102
00:07:02.010 --> 00:07:04.690
And next time you install the modules
all this will be blown away,

103
00:07:04.690 --> 00:07:05.440
which is really sad.

