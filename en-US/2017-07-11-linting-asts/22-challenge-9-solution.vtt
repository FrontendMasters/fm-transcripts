WEBVTT

1
00:00:00.330 --> 00:00:03.080
&gt;&gt; Kent C Dodds: I realize
that the actual solution that

2
00:00:03.080 --> 00:00:07.650
loaded into all of your stuff was
a little bit different in implementation.

3
00:00:07.650 --> 00:00:12.524
I added this looks like instead
of trying to determine whether

4
00:00:12.524 --> 00:00:14.970
it's a variable declarator.

5
00:00:14.970 --> 00:00:19.752
Yeah, so, or sorry, I added it looks
like on the parent function to see

6
00:00:19.752 --> 00:00:23.661
if it had an identifier for
the function declaration, and

7
00:00:23.661 --> 00:00:27.600
if there's a variable declared
then I'll give the name.

8
00:00:27.600 --> 00:00:31.990
So multiple ways to do the same
thing in JavaScript, who knew.

9
00:00:31.990 --> 00:00:37.260
Let's go ahead and support this pattern,
function expressions.

10
00:00:39.000 --> 00:00:44.030
So should be pretty straight
forward after our last experience.

11
00:00:44.030 --> 00:00:47.150
So we're just gonna add another or here.

12
00:00:47.150 --> 00:00:51.501
Or is regular function expression

13
00:00:51.501 --> 00:00:56.134
and,
&gt;&gt; Kent C Dodds: Let's see.

14
00:00:58.422 --> 00:00:59.283
&gt;&gt; Kent C Dodds: Yeah, okay.

15
00:00:59.283 --> 00:01:05.960
And then we say, if it's a variable
declared, let's see, hold on, sorry.

16
00:01:07.860 --> 00:01:10.410
Yeah, okay, that makes sense, yeah.

17
00:01:10.410 --> 00:01:17.208
So if what we're providing
is a variable declarator or

18
00:01:17.208 --> 00:01:24.762
t.isFunctionExpression(parentFunction.par-
ent).

19
00:01:24.762 --> 00:01:29.462
And actually we should probably look at
the AST really quick before I just type

20
00:01:29.462 --> 00:01:29.990
stuff.

21
00:01:29.990 --> 00:01:33.452
And so what we're looking at,
this is the parent function.

22
00:01:33.452 --> 00:01:36.864
It is this function expression
is the parent function.

23
00:01:36.864 --> 00:01:43.216
So then we want to look at the parent and
if that, let's see.

24
00:01:46.995 --> 00:01:48.570
&gt;&gt; Kent C Dodds: I've
just confused myself.

25
00:01:49.630 --> 00:01:54.780
My solution that I have shouldn't
actually work, but it does.

26
00:01:54.780 --> 00:01:57.850
So now I'm confused as to why it works.

27
00:01:58.950 --> 00:02:02.380
Well it just happens to work because

28
00:02:03.970 --> 00:02:08.560
it's a function expression but we don't
actually verify that it's a declarator.

29
00:02:08.560 --> 00:02:10.610
I'm pretty sure we don't even need this.

30
00:02:10.610 --> 00:02:12.542
Yeah, we don't need that.

31
00:02:12.542 --> 00:02:14.958
[LAUGH] That was easier than I thought.

32
00:02:14.958 --> 00:02:17.199
That was kinda weird.

33
00:02:17.199 --> 00:02:18.112
Yeah, so my solution was wrong.

34
00:02:18.112 --> 00:02:22.372
If anybody wants to make a poll request
to remove that from my solution,

35
00:02:22.372 --> 00:02:23.940
you're welcome to do so.

36
00:02:25.670 --> 00:02:27.960
So yeah,
to recap because I was all confusing,

37
00:02:27.960 --> 00:02:32.640
all that we needed to do is just add
this or case for isFunctionExpression.

38
00:02:32.640 --> 00:02:37.330
And then, yeah,
then everything else works.

39
00:02:37.330 --> 00:02:41.868
If it's a variable declarator,
if the parent is a variable declarator,

40
00:02:41.868 --> 00:02:43.688
then use that parent's ID.

41
00:02:43.688 --> 00:02:48.600
And let's just put that in here, make
sure our tests are passing, and they are.

42
00:02:50.630 --> 00:02:53.440
Anybody learn anything interesting
out of that one, hopefully?

43
00:02:53.440 --> 00:02:55.950
Yes, something.

44
00:02:55.950 --> 00:02:57.820
&gt;&gt; Student: Just look at the prototype.

45
00:02:57.820 --> 00:03:02.780
When in doubt, I was trying to, I was
stuck and then I just happened to glance

46
00:03:02.780 --> 00:03:08.820
at the prototype and see, right, this
is a lot more obvious then I imagined.

47
00:03:08.820 --> 00:03:09.980
&gt;&gt; Kent C Dodds: Yeah, yeah.

48
00:03:09.980 --> 00:03:15.860
Just to be clear for folks at home or
anybody who's not certain what you're

49
00:03:15.860 --> 00:03:21.310
talking about, you're kind of talking
about taking the path, logging that,

50
00:03:22.480 --> 00:03:27.750
and then looking at the proto object
here and just reading through that.

51
00:03:27.750 --> 00:03:32.080
&gt;&gt; Student: Yeah, I mean just finding the
method I needed or the function I needed.

52
00:03:32.080 --> 00:03:35.040
&gt;&gt; Kent C Dodds: Yeah,
it's pretty handy stuff.

53
00:03:35.040 --> 00:03:38.570
And you could do some JavaScipt
magic to have a filter or

54
00:03:38.570 --> 00:03:42.980
something for, it has these words or
something like that.

55
00:03:44.010 --> 00:03:48.600
Yeah, and another one to
look at would be path.scope.

56
00:03:48.600 --> 00:03:52.850
This one has a lot of things on it
as well that are really useful.

57
00:03:54.440 --> 00:03:55.955
Great, so that is our Babel plug-in.

58
00:03:55.955 --> 00:03:58.140
Captains log.

59
00:03:58.140 --> 00:04:00.070
Cool stuff,
love the reference to Star Trek.

