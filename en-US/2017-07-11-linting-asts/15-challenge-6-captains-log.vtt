WEBVTT

1
00:00:00.450 --> 00:00:06.811
&gt;&gt; Kent C. Dodds: So go ahead and
run npm-start exercise babel0.

2
00:00:06.811 --> 00:00:13.447
Now you're going to see
a captains-log.js file.

3
00:00:13.447 --> 00:00:17.788
Shout out to my friend Kyle Welch
who created an actual plugin called

4
00:00:17.788 --> 00:00:21.840
captains-log that does basically
what we're gonna do here.

5
00:00:22.920 --> 00:00:29.238
And I think he's watching, so [SOUND].

6
00:00:29.238 --> 00:00:33.666
So we have the captains log plugin
file it's basically empty and

7
00:00:33.666 --> 00:00:38.510
except it has the looks like
because that's pretty darn useful.

8
00:00:38.510 --> 00:00:42.660
And we can that through our plugins and

9
00:00:42.660 --> 00:00:47.840
stuff and actually the, yeah, anyway.

10
00:00:47.840 --> 00:00:50.780
And then, yeah,
it has the structure for you so

11
00:00:50.780 --> 00:00:51.900
you don't have to write all that out.

12
00:00:51.900 --> 00:00:54.770
And then our tests are a little
bit different than before.

13
00:00:54.770 --> 00:00:58.910
So ESLint has a rule tester and
it's really awesome,

14
00:00:58.910 --> 00:01:05.550
a really great abstraction for the common
things you need to test with ESLint.

15
00:01:05.550 --> 00:01:06.730
Babel doesn't quite have that.

16
00:01:06.730 --> 00:01:09.350
I think that they have some
internal stuff that they use for

17
00:01:09.350 --> 00:01:13.910
their own plugins, but yeah,
we don't quite have that.

18
00:01:13.910 --> 00:01:19.520
What we're doing is we provide
our own source code and

19
00:01:19.520 --> 00:01:24.410
using template literal so that we
don't have to do concatenation stuff.

20
00:01:24.410 --> 00:01:29.290
And then we're stripping the indentation
so it's nice and indented.

21
00:01:29.290 --> 00:01:37.340
But anyway, from there we trans
pile using Babel.transform.

22
00:01:37.340 --> 00:01:41.210
We pass it along that source,
and some configuration stuff

23
00:01:41.210 --> 00:01:43.960
which most of this is not totally
relevant to what we're doing.

24
00:01:43.960 --> 00:01:46.410
The only piece that
really is is this plugin.

25
00:01:47.690 --> 00:01:51.030
So it's using the plugin
that we are writing.

26
00:01:52.440 --> 00:01:56.020
And then,
based off of that we get the code back.

27
00:01:56.020 --> 00:01:58.390
And we call this toMatchSnapshot thing.

28
00:01:58.390 --> 00:02:00.070
Does anybody know what this is?

29
00:02:00.070 --> 00:02:04.419
To match snapshot,
this is gest snapshot testing.

30
00:02:04.419 --> 00:02:10.230
It's amazing and you don't need to
understand and totally for our stuff.

31
00:02:10.230 --> 00:02:15.525
But what you need to understand is
that is going to create a new file

32
00:02:15.525 --> 00:02:21.027
next to our test in an underscore
underscore snapshots directory.

33
00:02:21.027 --> 00:02:27.187
And it creates a .snap file that
is basically the serialized

34
00:02:27.187 --> 00:02:33.610
version of what we passed it,
so the transpiled code.

35
00:02:33.610 --> 00:02:39.210
And so this is what our stuff is
supposed to look like when we're done.

36
00:02:39.210 --> 00:02:43.090
So this is what the plugin does.

37
00:02:43.090 --> 00:02:49.610
We have some console logs inside of our
functions, and a console log outside.

38
00:02:49.610 --> 00:02:54.494
And what we want to do for
this first iteration of our

39
00:02:54.494 --> 00:02:59.378
plugin is we want to replace
this with the column and

40
00:02:59.378 --> 00:03:04.275
the line except the actual column and
line number.

41
00:03:04.275 --> 00:03:09.240
And so that's where we get two,
two or sorry that's line in column.

42
00:03:09.240 --> 00:03:13.640
I think it's mixed up, I don't know
what it's normal in stack traces but

43
00:03:13.640 --> 00:03:15.190
that's what we're doing sorry.

44
00:03:15.190 --> 00:03:19.920
It's line in column,
I think it's line in column normally.

45
00:03:19.920 --> 00:03:23.310
But yeah, the actual line in column.

46
00:03:23.310 --> 00:03:28.550
And you can get that information
from RAST, oops, where did it go?

47
00:03:28.550 --> 00:03:34.978
Yeah here,
if you console.log the path.node,

48
00:03:34.978 --> 00:03:39.874
then you can see we have LOC object that

49
00:03:39.874 --> 00:03:45.390
has a start which has a column and a line.

50
00:03:45.390 --> 00:03:50.034
So that's where you're gonna be
getting it, is from the LOC.

51
00:03:50.034 --> 00:03:54.412
Yeah, and it just makes it so,
when we like uglify this or whatever,

52
00:03:54.412 --> 00:03:57.655
we see those logs later,
we can see where those were

53
00:03:57.655 --> 00:04:00.915
in the original source code
which is kind of handy.

54
00:04:00.915 --> 00:04:02.514
So it's kind of handy.

55
00:04:02.514 --> 00:04:06.089
So it's kind of ironic that our last one
was to talk about getting rid of console

56
00:04:06.089 --> 00:04:08.480
and now we're talking
about like adding it in.

57
00:04:08.480 --> 00:04:12.860
But yeah, now we're making it more useful.

58
00:04:12.860 --> 00:04:16.930
So now we don't need the no console
really anymore, I don't know.

59
00:04:16.930 --> 00:04:18.930
So go ahead and have at it.

60
00:04:18.930 --> 00:04:23.100
When you run the test
you'll do npm start and

61
00:04:23.100 --> 00:04:28.580
you're going to enter just watch
mode here, and you'll see a failure.

62
00:04:28.580 --> 00:04:32.070
And it's really nice, and
we'll show you exactly what

63
00:04:32.070 --> 00:04:37.220
the differences are between what
you have and what you should have.

64
00:04:37.220 --> 00:04:39.970
So you can base things off of that.

65
00:04:39.970 --> 00:04:43.761
Also most of this stuff you can
develop in AST Explorer as well.

