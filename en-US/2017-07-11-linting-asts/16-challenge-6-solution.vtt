WEBVTT

1
00:00:00.080 --> 00:00:03.370
&gt;&gt; Kent C. Dodds: So I'm gonna pull
this into AST Explorer really quick.

2
00:00:03.370 --> 00:00:06.890
Gotta make sure that I am
using VV6 with Babylon.

3
00:00:08.400 --> 00:00:13.448
And I'll just bring this code over.

4
00:00:13.448 --> 00:00:14.807
Oops.

5
00:00:19.161 --> 00:00:23.025
&gt;&gt; Kent C. Dodds: Okay, Great,
so now we can try it and

6
00:00:23.025 --> 00:00:27.660
manipulate this AST and
bend it to our will.

7
00:00:29.600 --> 00:00:32.330
So the thing that I'm gonna be looking for
is call expressions,

8
00:00:32.330 --> 00:00:35.630
because I don't care if I'm using
console.log and not calling it.

9
00:00:35.630 --> 00:00:39.730
I don't care about console
just hanging out by itself.

10
00:00:39.730 --> 00:00:41.930
I'm interested in this whole
call expression cuz I need to

11
00:00:41.930 --> 00:00:42.920
add arguments to it.

12
00:00:42.920 --> 00:00:46.800
So that's why I chose call expression for
my visitor.

13
00:00:48.355 --> 00:00:52.010
&gt;&gt; Kent C. Dodds: And my call
expression is going to accept a path.

14
00:00:53.700 --> 00:00:56.800
And then for,
let's expand this out a little bit.

15
00:00:58.939 --> 00:01:00.034
&gt;&gt; Kent C. Dodds: With this path,

16
00:01:00.034 --> 00:01:03.658
I want to make sure that
it is what I'm looking for.

17
00:01:03.658 --> 00:01:10.010
So isConsoleCall and

18
00:01:10.010 --> 00:01:17.170
I'm going to make that something
that looks like this object.

19
00:01:17.170 --> 00:01:19.750
So really quickly inspect that.

20
00:01:22.725 --> 00:01:25.700
&gt;&gt; Kent C. Dodds: Path
console.log the path.

21
00:01:25.700 --> 00:01:31.030
One thing to note, this looks like
thing will totally fall to pieces

22
00:01:31.030 --> 00:01:35.810
if you try to pass a path or
a node as the second argument.

23
00:01:35.810 --> 00:01:39.510
Don't do that because it's
circular references and

24
00:01:39.510 --> 00:01:41.630
this doesn't handle circular references.

25
00:01:41.630 --> 00:01:47.202
So your, yeah, stack overflow.

26
00:01:47.202 --> 00:01:52.160
And I could write an ESLint
plugin that makes sure that you

27
00:01:52.160 --> 00:01:55.620
only pass in object literals or
an object that you created.

28
00:01:55.620 --> 00:01:56.920
So, isn't that awesome?

29
00:01:56.920 --> 00:01:57.870
Yes, that is awesome.

30
00:01:57.870 --> 00:01:59.060
The answer is yes.

31
00:01:59.060 --> 00:02:02.450
Okay, great, so
here I'm gonna look for, well,

32
00:02:02.450 --> 00:02:06.680
first off,
I want to get the node off of the path.

33
00:02:08.323 --> 00:02:14.870
&gt;&gt; Kent C. Dodds: And
I want to verify the call expressions.

34
00:02:14.870 --> 00:02:21.590
Let's actually go down to the node and
the callee.

35
00:02:21.590 --> 00:02:25.310
Looks like the callee needs
to be a member expression.

36
00:02:25.310 --> 00:02:28.590
And the object needs to
have a name called console.

37
00:02:28.590 --> 00:02:30.930
I don't really care what the property is.

38
00:02:30.930 --> 00:02:35.230
If it's called expression, member
expression, where the object is console,

39
00:02:35.230 --> 00:02:37.970
I'm gonna guess that it's gonna
be logger info or something.

40
00:02:37.970 --> 00:02:43.433
I'm gonna wanna manipulate that, so
yeah, let's go ahead and do that.

41
00:02:45.450 --> 00:02:49.087
&gt;&gt; Kent C. Dodds: Yeah,
so we'll say callee,

42
00:02:49.087 --> 00:02:54.036
we want it to be type MemberExpression.

43
00:02:54.036 --> 00:03:01.310
And we want the object of the member
expression to have a name of console.

44
00:03:04.312 --> 00:03:08.589
&gt;&gt; Kent C. Dodds: Cool, let's go ahead and
say if it is a console call, or

45
00:03:08.589 --> 00:03:12.360
sorry if it's not let's exit return.

46
00:03:12.360 --> 00:03:19.200
Otherwise we'll log the path and
we'll get rid of these other logs, great.

47
00:03:19.200 --> 00:03:22.020
So we had a bunch of expressions,
now we just have these three.

48
00:03:22.020 --> 00:03:23.740
So that's great,

49
00:03:23.740 --> 00:03:28.220
we'll just verify really quick that is
what we are expecting, we want the node.

50
00:03:29.930 --> 00:03:36.279
Callee object, that's a console,
and our arguments, okay cool.

51
00:03:36.279 --> 00:03:40.630
So if we want to change this into this.

52
00:03:40.630 --> 00:03:44.880
We need to modify the arguments,
and we need to put

53
00:03:44.880 --> 00:03:49.940
a string literal as the first argument,
so let's do that first.

54
00:03:56.038 --> 00:04:00.402
&gt;&gt; Kent C. Dodds: So we're gonna get the,
actually I should never

55
00:04:00.402 --> 00:04:04.670
close this thing cuz I'm
always reopening it.

56
00:04:04.670 --> 00:04:11.620
We'll get the path.node.arguments,
and we get an array of arguments.

57
00:04:12.690 --> 00:04:17.180
And that is just an array that
we manipulate however we want.

58
00:04:17.180 --> 00:04:19.220
So I'm going to say, unshift.

59
00:04:20.640 --> 00:04:25.871
And you can't just unshift anything,
I couldn't just unshift the string

60
00:04:25.871 --> 00:04:31.198
hide because that's going to actually
evaluate too an identifier, high.

61
00:04:31.198 --> 00:04:36.084
And so I need to be explicit about
what node I'm trying to unshift so

62
00:04:36.084 --> 00:04:39.315
I'm going too Use the babel's type thing,

63
00:04:39.315 --> 00:04:43.310
that's really handy to
create a new string literal.

64
00:04:43.310 --> 00:04:46.720
t.string literal, and
I'll pass the string, and

65
00:04:46.720 --> 00:04:48.970
now I get hi in front
of all my console logs.

66
00:04:50.580 --> 00:04:54.940
So we want it to actually
be our line numbers.

67
00:04:54.940 --> 00:05:02.760
And so we can get that if we
console.log (path.node.loc).

68
00:05:02.760 --> 00:05:04.340
It's gonna give us a start and end.

69
00:05:04.340 --> 00:05:05.430
We only care about the start.

70
00:05:06.960 --> 00:05:12.700
The reason that it has a start and an end
is because nodes can be on multiple lines.

71
00:05:12.700 --> 00:05:17.220
For example, this function
declaration spans three lines.

72
00:05:17.220 --> 00:05:22.270
And so you have the very start
of that node which would be, for

73
00:05:22.270 --> 00:05:28.100
this function that would be
line 6 Column 0 or 1, I guess.

74
00:05:28.100 --> 00:05:32.370
And then the n would be line 9,
column, here, we can just look, ha.

75
00:05:34.380 --> 00:05:36.160
The end is line 9, column 1.

76
00:05:36.160 --> 00:05:41.450
But for us, I think we're good
to just stick with the start and

77
00:05:41.450 --> 00:05:42.740
get the line in the column from that.

78
00:05:44.030 --> 00:05:47.868
So we'll do that cont start equals that.

79
00:05:47.868 --> 00:05:52.532
And then we're going to turn this string

80
00:05:52.532 --> 00:05:57.888
literal into start.line:start.column.

81
00:05:59.147 --> 00:06:02.290
&gt;&gt; Kent C. Dodds: Great I think
that looks like it's supposed to.

82
00:06:02.290 --> 00:06:08.410
So let's copy this over back to our
captain's log.js, paste that in and poof.

83
00:06:10.117 --> 00:06:15.813
&gt;&gt; Kent C. Dodds: It works like magic.

84
00:06:17.970 --> 00:06:21.126
&gt;&gt; Kent C. Dodds: And then we can go
ahead and fill out our elaboration and

85
00:06:21.126 --> 00:06:23.030
feedback form.

86
00:06:23.030 --> 00:06:24.125
Which I hope you've all done.

87
00:06:24.125 --> 00:06:28.513
And now I'm gonna ask you, well,
let me first change this to true and

88
00:06:28.513 --> 00:06:33.390
unskip that, and now all of our
tests are passing, which is great.

89
00:06:33.390 --> 00:06:37.580
So now I'm gonna ask you what is
a takeaway from this exercise?

90
00:06:37.580 --> 00:06:40.140
What's something that you
learned from this exercise?

91
00:06:43.040 --> 00:06:45.000
&gt;&gt; Speaker 2: That you only want start.

92
00:06:45.000 --> 00:06:47.710
That took a minute to figure out,
instead of getting start and then end,

93
00:06:47.710 --> 00:06:50.542
assuming that that was-
&gt;&gt; Kent C. Dodds: Yeah, for

94
00:06:50.542 --> 00:06:55.882
this particular exercise, just using
start for the line numbers, yeah.

95
00:06:55.882 --> 00:07:00.990
What else, anything about Babel
generally that was useful?

96
00:07:00.990 --> 00:07:02.590
&gt;&gt; Speaker 2: Just pulled
way too many methods.

97
00:07:02.590 --> 00:07:04.050
&gt;&gt; Kent C. Dodds: Way too many methods.

98
00:07:04.050 --> 00:07:07.320
There are so many,
did you look at the prototype?

99
00:07:07.320 --> 00:07:10.710
It's totally loaded, yeah, it's true.

100
00:07:10.710 --> 00:07:14.390
And like that babble types docs,
it's enormous.

101
00:07:14.390 --> 00:07:16.740
Yeah, that actually is kind of a problem.

102
00:07:16.740 --> 00:07:18.360
It's part of the reason
I'm doing this workshop,

103
00:07:18.360 --> 00:07:23.670
is because there's not a lot of
material of learning how to do this.

104
00:07:23.670 --> 00:07:28.540
And I feel like it's more
approachable than people think.

105
00:07:28.540 --> 00:07:31.880
And part of the problem is
not enough material, so.

106
00:07:31.880 --> 00:07:35.980
Yeah, so hopefully I'm showing
you most of the useful things and

107
00:07:35.980 --> 00:07:40.079
giving you an idea of what you can find,
answers to your questions.

108
00:07:41.803 --> 00:07:44.300
&gt;&gt; Kent C. Dodds: Yeah lots of methods.

109
00:07:44.300 --> 00:07:49.100
But yeah seriously like console logging
path or console logging babel core even.

110
00:07:49.100 --> 00:07:53.090
And then just reading some of those
methods will give you an idea of what's

111
00:07:53.090 --> 00:07:54.360
possible.

112
00:07:54.360 --> 00:07:58.400
Not all of it is super well documented,
but it's all right.

113
00:07:58.400 --> 00:07:59.510
We can all improve that.

114
00:07:59.510 --> 00:08:02.540
Hey that's the cool thing, it's open
source so you can go fix it, so cool.

