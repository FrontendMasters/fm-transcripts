WEBVTT

1
00:00:00.280 --> 00:00:04.310
&gt;&gt; Kent C. Dodds: Okay, so
it's time to go through this solution.

2
00:00:04.310 --> 00:00:09.424
What we're looking for
is we need to find the function that this

3
00:00:09.424 --> 00:00:14.152
console long statement is inside of,
and if it has a name,

4
00:00:14.152 --> 00:00:18.782
and if there is a function,
and that function has a name,

5
00:00:18.782 --> 00:00:22.377
then we're gonna prefix our log with that.

6
00:00:22.377 --> 00:00:26.500
So, I'm gonna start out with our prefix.

7
00:00:26.500 --> 00:00:30.380
This is what we're gonna call
the string literal that we

8
00:00:30.380 --> 00:00:33.620
attach to the arguments list.

9
00:00:33.620 --> 00:00:42.600
And we're gonna find the parentFunction
with path.findParent.

10
00:00:42.600 --> 00:00:51.940
t.isFunctionDeclaration,
isFunctionDeclaration, think that's right.

11
00:00:51.940 --> 00:00:59.080
And actually, I'm gonna move over here, so
we can have this here to the log stuff.

12
00:01:00.340 --> 00:01:05.160
Actually, yeah, because console
logging nodes when you're in Node,

13
00:01:05.160 --> 00:01:06.920
and it logs out to your terminal.

14
00:01:06.920 --> 00:01:08.420
It's like this giant, really,

15
00:01:08.420 --> 00:01:11.880
really big object that you can't
really make sense of, so it's a lot.

16
00:01:11.880 --> 00:01:15.130
That's one of the reasons why
developing in here's a lot simpler.

17
00:01:16.290 --> 00:01:23.030
But yeah, let's console.log this parent
function, console.log(parentFunction).

18
00:01:24.310 --> 00:01:26.810
And we're getting two, sweet.

19
00:01:26.810 --> 00:01:30.030
We have two in our program so
that's exactly what we're looking for.

20
00:01:30.030 --> 00:01:32.370
And then we have a log of null,

21
00:01:32.370 --> 00:01:35.014
because one of our console logs
isn't inside of our function.

22
00:01:35.014 --> 00:01:38.310
Ans so let's look at these ones that are.

23
00:01:38.310 --> 00:01:39.280
They have a node.

24
00:01:39.280 --> 00:01:40.420
That node has an ID.

25
00:01:40.420 --> 00:01:42.794
That ID has a name.

26
00:01:42.794 --> 00:01:47.695
So, let's say if(parentFunction) exists,

27
00:01:47.695 --> 00:01:51.521
thank you truthiness of JavaScript,

28
00:01:51.521 --> 00:01:57.268
then we'll log that, and
we'll log the node ID.name.

29
00:01:57.268 --> 00:01:59.580
And we'll get add and subtract, perfect.

30
00:01:59.580 --> 00:02:01.990
So we'll make that part of our prefix.

31
00:02:01.990 --> 00:02:05.090
Say prefix +=.

32
00:02:07.214 --> 00:02:08.840
&gt;&gt; Kent C. Dodds: And then we'll.

33
00:02:08.840 --> 00:02:10.620
Let's see.

34
00:02:10.620 --> 00:02:12.600
Yeah, say prefix.

35
00:02:12.600 --> 00:02:16.167
In either case we'll add our.

36
00:02:18.360 --> 00:02:19.690
&gt;&gt; Kent C. Dodds: That line information.

37
00:02:21.900 --> 00:02:28.240
And put that in our prefix and
also, do things in the right order.

38
00:02:28.240 --> 00:02:35.820
And we wanna have a space here, so we'll
stick a space, yeah, as part of this.

39
00:02:37.290 --> 00:02:38.030
And we've got it.

40
00:02:39.930 --> 00:02:41.380
Coolio?

41
00:02:41.380 --> 00:02:41.880
Coolio.

42
00:02:43.400 --> 00:02:44.650
Paste that in.

43
00:02:44.650 --> 00:02:47.880
Hit Save and tests are passing.

44
00:02:47.880 --> 00:02:51.330
Don't forget your elaboration and
feedback.

45
00:02:51.330 --> 00:02:56.270
We remove that and
now all of our tests are passing.

46
00:02:56.270 --> 00:02:59.131
&gt;&gt; Speaker 2: Could you look at the,
I just want to see the spacing thing?

47
00:02:59.131 --> 00:02:59.897
About 30 with what I did.

48
00:02:59.897 --> 00:03:00.490
&gt;&gt; Kent C. Dodds: The spacing.

49
00:03:00.490 --> 00:03:02.623
&gt;&gt; Speaker 2: Yeah,
just the actual [INAUDIBLE],

50
00:03:02.623 --> 00:03:07.340
when you add the space in front of
the method, or after the method name?

51
00:03:07.340 --> 00:03:07.980
&gt;&gt; Kent C. Dodds: Yeah, right there.

52
00:03:09.410 --> 00:03:11.080
&gt;&gt; Speaker 2: So you just, okay.

53
00:03:11.080 --> 00:03:13.860
&gt;&gt; Kent C. Dodds: Actually,
in my solution, when you run the exercise,

54
00:03:13.860 --> 00:03:18.222
what I did instead,
&gt;&gt; Kent C. Dodds: I didn't think about it,

55
00:03:18.222 --> 00:03:19.950
until just now while I was doing it.

56
00:03:19.950 --> 00:03:23.100
Is I put the space right there and
then I did a .trim.

57
00:03:23.100 --> 00:03:26.860
Or actually, I did a .trim here.

58
00:03:26.860 --> 00:03:32.183
So both will work, but what I did just
shows you that was probably better.

59
00:03:34.427 --> 00:03:36.140
&gt;&gt; Kent C. Dodds: JavaScript,
so many ways to do things.

60
00:03:36.140 --> 00:03:40.240
Okay, what were some of
the key takeaways here?

61
00:03:40.240 --> 00:03:42.974
Well before that,
any questions that anybody has?

62
00:03:45.553 --> 00:03:47.820
&gt;&gt; Kent C. Dodds: Has this
been fairly straight forward?

63
00:03:47.820 --> 00:03:50.960
It's pretty much once
you understand ASTs or

64
00:03:50.960 --> 00:03:54.572
the APIs, then it's like I'm
just running JavaScript now.

65
00:03:55.660 --> 00:04:00.510
So great, now any key takeaways?

66
00:04:00.510 --> 00:04:05.099
Let me just get one takeaway
from this exercise.

67
00:04:05.099 --> 00:04:06.284
&gt;&gt; Speaker 3: Function.

68
00:04:06.284 --> 00:04:08.404
&gt;&gt; Speaker 4: These function declaration.

69
00:04:08.404 --> 00:04:09.570
&gt;&gt; Kent C. Dodds: Yeah, yeah, yeah.

70
00:04:09.570 --> 00:04:11.810
t., is function declaration fine parent.

71
00:04:11.810 --> 00:04:13.980
This pattern is really common,

72
00:04:13.980 --> 00:04:17.610
because they just compose
together really nicely, yep.

