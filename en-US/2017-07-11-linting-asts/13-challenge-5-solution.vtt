WEBVTT

1
00:00:00.038 --> 00:00:03.279
&gt;&gt; Kent C Dodds: As far as a solution
is concerned, for my solution,

2
00:00:03.279 --> 00:00:05.650
I wanted to create a report function.

3
00:00:05.650 --> 00:00:07.516
So I'm gonna do that right here.

4
00:00:07.516 --> 00:00:15.453
And I'm going to accept the property,

5
00:00:15.453 --> 00:00:19.308
so the offending.

6
00:00:19.308 --> 00:00:23.788
This is the log, or the info, or whatever.

7
00:00:23.788 --> 00:00:29.020
And then also the consoleObject so
that I can swap it out.

8
00:00:30.270 --> 00:00:34.980
And then I'll just move this down here,
and

9
00:00:34.980 --> 00:00:40.910
I'll call report with the property.

10
00:00:40.910 --> 00:00:47.560
And then the consoleObject is gonna be
reference.identifier.parent.object.

11
00:00:47.560 --> 00:00:51.224
So this parent is gonna
be the member expression,

12
00:00:51.224 --> 00:00:55.520
that's the console.info,
or csl.log, or whatever.

13
00:00:55.520 --> 00:00:59.070
And it has a property,
that'll be the info or

14
00:00:59.070 --> 00:01:03.500
the log, and it has an object, and

15
00:01:03.500 --> 00:01:08.390
that'll be the csl, or
console, or whatever.

16
00:01:08.390 --> 00:01:10.420
So I haven't actually fixed anything yet,
but

17
00:01:10.420 --> 00:01:15.320
let's just refactor our report
up here to do the same thing.

18
00:01:15.320 --> 00:01:21.947
Report on the property and the object.

19
00:01:21.947 --> 00:01:25.478
Could probably just pass
the member expression and

20
00:01:25.478 --> 00:01:31.072
then have our report function deal with
that, which probably work just as well.

21
00:01:31.072 --> 00:01:34.480
Okay, great, so
we haven't actually fixed any code, but

22
00:01:34.480 --> 00:01:37.290
we haven't broken anything,
so that's good.

23
00:01:38.580 --> 00:01:41.650
Okay, so then we'll take our fixer and
replaceText.

24
00:01:41.650 --> 00:01:45.110
We're gonna replace, or here,
actually, before we do this,

25
00:01:45.110 --> 00:01:47.170
let me show you with this handy trick.

26
00:01:48.190 --> 00:01:53.350
With the context,
if you want to see what the source code is

27
00:01:53.350 --> 00:01:57.350
that a certain node represents,
you can do that with context.

28
00:01:57.350 --> 00:02:05.854
So we'll say,
sourceCode = context.getSourceCode().

29
00:02:07.951 --> 00:02:12.626
&gt;&gt; Kent C Dodds: And then down here
in our report, we're going to,

30
00:02:12.626 --> 00:02:19.403
I think it's getText, I might have to
reference this, for the consoleObject.

31
00:02:23.170 --> 00:02:26.426
&gt;&gt; Kent C Dodds: And
it's gonna be in here somewhere.

32
00:02:26.426 --> 00:02:32.610
I have this fancy thing I call space
console that's impossible to miss.

33
00:02:33.720 --> 00:02:35.240
So it's gonna be in here.

34
00:02:36.690 --> 00:02:40.400
Actually, did I forget to put,
no, I put fixable in there.

35
00:02:41.740 --> 00:02:42.539
What?

36
00:02:45.993 --> 00:02:48.400
&gt;&gt; Kent C Dodds: Let's put this up here.

37
00:02:48.400 --> 00:02:50.556
Okay, so we are seeing that sourceCode,

38
00:02:50.556 --> 00:02:53.278
I'm not sure why it wasn't
happening in our fixer.

39
00:02:53.278 --> 00:02:59.990
So yeah, if we wanted to do the property,
and then that's gonna be the log.

40
00:02:59.990 --> 00:03:05.150
We could do parent, and that csl.log,
we'd do parent from that.

41
00:03:06.720 --> 00:03:09.280
And that gives us the call expression.

42
00:03:09.280 --> 00:03:11.471
And a parent from that is gonna be,

43
00:03:11.471 --> 00:03:16.696
I'm not even sure what the parent of our
call expression is, but you get the idea.

44
00:03:16.696 --> 00:03:19.838
You pass it a node, it will give you
the text that that node represents.

45
00:03:19.838 --> 00:03:23.730
Which is really, really handy,
and I use it often.

46
00:03:23.730 --> 00:03:30.114
So we want to swap out the csl,
or the console reference.

47
00:03:30.114 --> 00:03:34.054
And so, whoops.

48
00:03:36.666 --> 00:03:38.096
&gt;&gt; Kent C Dodds: Let's just
get rid of this stuff.

49
00:03:40.577 --> 00:03:43.067
&gt;&gt; Kent C Dodds: And
we'll swap out the consoleObject.

50
00:03:45.636 --> 00:03:48.818
&gt;&gt; Kent C Dodds: And sorry,
I didn't make that clear, super sorry, but

51
00:03:48.818 --> 00:03:50.220
you need to return this.

52
00:03:50.220 --> 00:03:52.800
Did anybody, yeah, catch that?

53
00:03:55.100 --> 00:03:59.951
Reference is not defined, what?

54
00:03:59.951 --> 00:04:02.067
&gt;&gt; Student: Node, I think the node.

55
00:04:02.067 --> 00:04:02.897
&gt;&gt; Kent C Dodds: Thank you.

56
00:04:07.678 --> 00:04:12.312
&gt;&gt; Kent C Dodds: And the node, wait,
we wanna replace consoleObject,

57
00:04:12.312 --> 00:04:15.475
sorry, consoleObject with logger.

58
00:04:18.346 --> 00:04:21.750
&gt;&gt; Kent C Dodds: Output is incorrect for
this one.

59
00:04:23.130 --> 00:04:24.040
Yeah, that's right, okay.

60
00:04:24.040 --> 00:04:31.720
So for this one,
we don't wanna replace csl.

61
00:04:31.720 --> 00:04:37.520
We wanna replace the console, so
that csl will be assigned to console.

62
00:04:37.520 --> 00:04:43.240
So instead of passing
the identifier.parent.object,

63
00:04:43.240 --> 00:04:48.618
we're just gonna pass
the consoleUsage identifier.

64
00:04:48.618 --> 00:04:49.678
Does that make sense?

65
00:04:49.678 --> 00:04:55.779
So remember this consoleUsage is a
collection of all of the identifiers that

66
00:04:55.779 --> 00:05:01.042
are console, and in the case of it
being a reference of some kind.

67
00:05:01.042 --> 00:05:05.550
Or sorry, whoops, I got the wrong one.

68
00:05:05.550 --> 00:05:08.572
That is this one.

69
00:05:11.869 --> 00:05:15.211
&gt;&gt; Kent C Dodds: Yeah, that one.

70
00:05:17.870 --> 00:05:20.838
&gt;&gt; Kent C Dodds: Yeah, cool, and
then I gotta remove this bad code test.

71
00:05:25.101 --> 00:05:26.892
&gt;&gt; Kent C Dodds: Let me just
expand this out a little bit.

72
00:05:29.196 --> 00:05:33.984
&gt;&gt; Kent C Dodds: So just to recap, we have
our report function, takes a property,

73
00:05:33.984 --> 00:05:39.120
and then the consoleObject that
we wanna have be replaced.

74
00:05:39.120 --> 00:05:43.230
And we do our normal reporting
on that property, and

75
00:05:43.230 --> 00:05:46.010
then we provide a fix that takes a fixer.

76
00:05:46.010 --> 00:05:50.076
We call replaceText on that
consoleObject that we wanna replace.

77
00:05:50.076 --> 00:05:54.675
We replace it with logger, which is
presumably some global that we have for

78
00:05:54.675 --> 00:05:56.520
our app or something.

79
00:05:56.520 --> 00:06:04.280
Yeah, so these ESLint rules
can get decently complicated.

80
00:06:04.280 --> 00:06:09.520
But what I think is really cool about
them is if you really feel like

81
00:06:09.520 --> 00:06:14.800
you need to control against developers
doing some really potentially bad things,

82
00:06:14.800 --> 00:06:21.570
an ESLint rule is great because you can
find a lot of really common patterns.

83
00:06:21.570 --> 00:06:26.317
And even if the developers are doing
some kinda wacky things like assigning

84
00:06:26.317 --> 00:06:29.631
console to another object and
calling logs on that,

85
00:06:29.631 --> 00:06:32.965
you can still accomplish
your static analyzation.

