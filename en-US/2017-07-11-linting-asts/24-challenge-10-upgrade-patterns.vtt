WEBVTT

1
00:00:00.360 --> 00:00:03.960
&gt;&gt; Speaker 1: The transform we're
gonna do I think is kind of fun.

2
00:00:03.960 --> 00:00:08.540
So has anybody heard of
youmaynotneedjquery.com?

3
00:00:08.540 --> 00:00:09.700
It's pretty cool.

4
00:00:09.700 --> 00:00:14.640
So when this came out, it's like,
I didn't realize, I only support IE10, and

5
00:00:14.640 --> 00:00:19.530
I didn't realize that some of
these things were just one liners,

6
00:00:19.530 --> 00:00:21.050
it's just exactly the same.

7
00:00:21.050 --> 00:00:22.490
And this is IE8+.

8
00:00:22.490 --> 00:00:30.344
I could just be doing this all the time
instead of the selecting thing.

9
00:00:30.344 --> 00:00:35.925
So what our plugin is going to do is take
a legacy code base that's doing all this

10
00:00:35.925 --> 00:00:42.580
stuff and automatically upgrade it to Not
Use jQuery for simple things like this.

11
00:00:42.580 --> 00:00:44.210
So we've got exercises.

12
00:00:44.210 --> 00:00:48.229
It'll all be the same plug-in, but
we have exercises for hide/show,

13
00:00:48.229 --> 00:00:52.420
add class, and I think that's it.

14
00:00:52.420 --> 00:00:57.140
The last exercise adds a little
bit of complexity because for

15
00:00:57.140 --> 00:00:59.690
most of the exercises,
it's just this pattern.

16
00:00:59.690 --> 00:01:02.610
If it looks like this,
then change it to this.

17
00:01:02.610 --> 00:01:06.080
The last exercise allows you to say var,

18
00:01:07.120 --> 00:01:11.750
what just happened, myEl = $(el).

19
00:01:11.750 --> 00:01:16.680
And then trace where myEl is being
used and update those references.

20
00:01:16.680 --> 00:01:22.980
So if we get to that point,
then that'll be the last one.

21
00:01:22.980 --> 00:01:25.100
But if not it's not a huge deal so.

22
00:01:27.480 --> 00:01:30.260
Okay, cool, do you wanna look at it?

23
00:01:30.260 --> 00:01:31.276
Yes.

24
00:01:31.276 --> 00:01:36.143
[LAUGH] So this, whoa, to go to that or

25
00:01:36.143 --> 00:01:41.167
go to that exercise, it's going to be

26
00:01:41.167 --> 00:01:46.034
npm start exercise.codemod.0.

27
00:01:56.740 --> 00:01:59.290
&gt;&gt; Speaker 1: And
this one is also using snapshots, so

28
00:01:59.290 --> 00:02:04.170
it's pretty much the same thing as what
we had with our other Babel plug-in.

29
00:02:05.940 --> 00:02:09.100
Yeah, really the only difference
between what we're doing here and

30
00:02:09.100 --> 00:02:13.740
what we did with our last
exercises is the use case.

31
00:02:13.740 --> 00:02:15.590
This one is intended to be run once.

32
00:02:15.590 --> 00:02:19.820
Our last one was intended to run every
time you'd compile your program.

33
00:02:23.523 --> 00:02:25.280
&gt;&gt; Speaker 1: Yeah, so
then we go ahead and start.

34
00:02:27.290 --> 00:02:28.200
And we'll get a failure.

35
00:02:29.350 --> 00:02:30.000
Supposed to fix it.

36
00:02:32.570 --> 00:02:35.320
Let me just make sure that there wasn't
anything else I needed to tell you.

37
00:02:40.720 --> 00:02:43.430
Yeah, I need to demo something for you.

38
00:02:44.900 --> 00:02:53.102
So yeah, I'll demo it you instead of
having you doing it the harder way.

39
00:02:53.102 --> 00:02:54.870
That'll be good.

40
00:02:56.680 --> 00:03:01.390
So I've got this right
here I'm gonna copy.

41
00:03:03.310 --> 00:03:05.296
We're gonna go back to Babel v6.

42
00:03:07.450 --> 00:03:13.049
And just going to say const

43
00:03:13.049 --> 00:03:18.394
Hello, end template and

44
00:03:18.394 --> 00:03:22.721
we will do instead of

45
00:03:22.721 --> 00:03:27.557
this will do a variable

46
00:03:27.557 --> 00:03:34.170
declaration, there we go.

47
00:03:34.170 --> 00:03:35.470
Okay, cool.

48
00:03:35.470 --> 00:03:37.690
So why is that not going away?

49
00:03:40.660 --> 00:03:45.610
Okay, so what our transform is doing is
it's taking any variable declaration and

50
00:03:45.610 --> 00:03:46.289
changing it to this.

51
00:03:47.300 --> 00:03:48.740
So not really useful, but

52
00:03:48.740 --> 00:03:52.060
it uses a feature that I think
you should probably know about.

53
00:03:53.620 --> 00:03:55.325
And that is babel.template.

54
00:03:55.325 --> 00:04:00.701
Now I should tell you that I talked with
Logan on the Babel team, and he really

55
00:04:00.701 --> 00:04:06.260
wants to pull template off of Babel Core
and just have it as a separate package.

56
00:04:06.260 --> 00:04:10.580
And I begged him not to because if he
did that we couldn't use it in our

57
00:04:10.580 --> 00:04:11.990
AST explorer.

58
00:04:11.990 --> 00:04:14.400
So we'll see if that ends up happening.

59
00:04:14.400 --> 00:04:18.220
But if you can't get template off
of Babel, that's what happened and

60
00:04:18.220 --> 00:04:22.040
you'll just have to get it
in the separate package.

61
00:04:22.040 --> 00:04:25.280
It is already distributed
as a separate package.

62
00:04:25.280 --> 00:04:29.304
So what this is doing,
though, this template thing,

63
00:04:29.304 --> 00:04:35.086
is sometimes constructing the ast like
we did like t.VariableDeclaration.

64
00:04:35.086 --> 00:04:38.970
Yeah, t.VariableDeclaration takes a kind,
and

65
00:04:38.970 --> 00:04:44.662
then an array of VariableDeclaratives,
and VariableDeclaratives takes

66
00:04:44.662 --> 00:04:49.738
like all this construction is awesome,
but is not super awesome.

67
00:04:49.738 --> 00:04:52.467
So what this does is you
provide a template string,

68
00:04:52.467 --> 00:04:56.110
something that you want your
code to actually look like.

69
00:04:56.110 --> 00:05:01.794
And you pass it to template, and
that's gonna give you back, here,

70
00:05:01.794 --> 00:05:07.776
we'll call this a callExpressionBuilder =,
or, actually, sorry.

71
00:05:07.776 --> 00:05:10.580
This is the callExpressionBuilder.

72
00:05:12.788 --> 00:05:15.950
&gt;&gt; Speaker 1: There we go, just to make it
a little bit more clear what's going on.

73
00:05:15.950 --> 00:05:18.841
So we call the template with
our templateString, and

74
00:05:18.841 --> 00:05:23.222
that gives us a call expression builder,
or it gives us a builder for that .AST.

75
00:05:23.222 --> 00:05:27.563
And then we call that with an object, and

76
00:05:27.563 --> 00:05:34.380
it replaces any matching instance
of our data with a template.

77
00:05:34.380 --> 00:05:37.890
So it's not using double curly braces
like you would see in Mustache or

78
00:05:37.890 --> 00:05:38.700
Angular or something.

79
00:05:39.940 --> 00:05:42.300
It's just straight up replace.

80
00:05:42.300 --> 00:05:48.510
Couple of things to know is you can't
just do straight up strings here.

81
00:05:48.510 --> 00:05:49.770
That's not gonna work.

82
00:05:49.770 --> 00:05:52.510
It needs to be actual nodes that
you're replacing things with.

83
00:05:53.920 --> 00:05:57.500
So we're gonna grant an identifier and
another identifier and

84
00:05:57.500 --> 00:06:00.180
then numeric literals here for
our arguments.

85
00:06:00.180 --> 00:06:04.250
But these could also be any type of node,
so string,

86
00:06:04.250 --> 00:06:09.090
literal, or whatever you want it to be.

87
00:06:09.090 --> 00:06:16.970
So yeah, the templateString stuff, or
the babel.template is pretty cool.

88
00:06:16.970 --> 00:06:21.490
And I use it in my solution for
this exercise,

89
00:06:21.490 --> 00:06:23.160
so it might be something to look at.

90
00:06:24.230 --> 00:06:27.753
If you want to reference this,

91
00:06:27.753 --> 00:06:32.097
that example is in other/schedule.

92
00:06:32.097 --> 00:06:35.970
We're at the bottom, right here.

93
00:06:35.970 --> 00:06:41.532
So I've got my file really
big at the bottom, right,

94
00:06:41.532 --> 00:06:47.354
so other/schedule.md and
it's around line 115.

