WEBVTT

1
00:00:00.583 --> 00:00:04.043
&gt;&gt; Speaker 1: The JSON schema, if you're
not familiar with that it's actually

2
00:00:04.043 --> 00:00:07.140
a pretty solid standard,
lots of things use it.

3
00:00:07.140 --> 00:00:11.150
And it's great for validating options and
stuff, so if somebody is using your plug

4
00:00:11.150 --> 00:00:16.660
in, they configure it wrong, and
then they'll get some validation here.

5
00:00:16.660 --> 00:00:20.030
So the schema is gonna be an array.

6
00:00:20.030 --> 00:00:26.600
And the way that it's
configured in the ESLint rule,

7
00:00:26.600 --> 00:00:30.120
when you actually configure ESLint here,
actually,

8
00:00:30.120 --> 00:00:35.140
let's see,
we have an .eslintrc right here.

9
00:00:35.140 --> 00:00:39.000
So if I were to configure
our no console rule.

10
00:00:42.030 --> 00:00:47.410
You can configure it to just be off or
to warn or to error out.

11
00:00:47.410 --> 00:00:52.390
But if you wanna be able to pass some
options then you turn this into an array.

12
00:00:52.390 --> 00:00:57.470
And then all the other things that you
provide here are the rest of the options.

13
00:00:57.470 --> 00:01:03.150
And so often you'll see that there will
only be one option that's an object and

14
00:01:03.150 --> 00:01:06.060
that has properties on it
just because it's easier than

15
00:01:06.060 --> 00:01:07.870
a big long list of options.

16
00:01:07.870 --> 00:01:11.670
As far as reading the configuration later.

17
00:01:11.670 --> 00:01:15.543
And so since we're gonna have this
allowedMethods the way that this would be

18
00:01:15.543 --> 00:01:18.380
is like allowedMethods: ['warn'].

19
00:01:18.380 --> 00:01:23.070
So that's how you'd configure this
once we have this all finished up.

20
00:01:23.070 --> 00:01:32.210
And then in our test we have that
configuration as part of the rule tester,

21
00:01:32.210 --> 00:01:36.110
where if you provide an object with code,

22
00:01:36.110 --> 00:01:39.690
then you can provide options and
that's the configuration options.

23
00:01:39.690 --> 00:01:42.720
So sorry, I didn't really
quite make that clear before.

24
00:01:42.720 --> 00:01:44.900
That may have given
a little bit more context.

25
00:01:44.900 --> 00:01:49.164
The other thing that's unfortunate is
AST explorer doesn't support providing

26
00:01:49.164 --> 00:01:53.377
configuration options, which I probably
should've mentioned earlier too.

27
00:01:53.377 --> 00:01:55.710
So sorry about that.

28
00:01:55.710 --> 00:01:59.670
But, never fear we have really
great tests running and

29
00:01:59.670 --> 00:02:03.599
everything so we can still do this.

30
00:02:04.690 --> 00:02:08.170
So for our schema,
we're gonna have an object.

31
00:02:08.170 --> 00:02:13.420
And inside of this object
we have our configuration.

32
00:02:13.420 --> 00:02:17.920
So just the fact that this schema
is an object doesn't mean that

33
00:02:17.920 --> 00:02:19.780
the first argument is gonna be an object.

34
00:02:19.780 --> 00:02:23.811
This is just our configuration object
that says what the schema should be.

35
00:02:23.811 --> 00:02:28.390
This type property is where we define
what type we want this to be, and we do,

36
00:02:28.390 --> 00:02:32.790
in fact, want it to be an object,
so we're setting type: 'object'.

37
00:02:32.790 --> 00:02:36.130
And the properties of that object

38
00:02:38.250 --> 00:02:41.700
is an object that have keys of
what the property should be,

39
00:02:41.700 --> 00:02:46.030
and then the value will be the schema for
that property.

40
00:02:46.030 --> 00:02:50.770
So ours will be allowedMethods, and

41
00:02:50.770 --> 00:02:53.340
this is our schema for
the allowedMethods property.

42
00:02:54.650 --> 00:03:00.380
The type of allowedMethods will
be an array, and the items,

43
00:03:00.380 --> 00:03:05.080
which hopefully you were able to glean
that piece from the JSON schema examples.

44
00:03:06.370 --> 00:03:10.918
Items for us, you could say the type is
a string and that would work just fine.

45
00:03:10.918 --> 00:03:17.180
But we're gonna say that it's an enum to
specify exactly what strings are allowed.

46
00:03:17.180 --> 00:03:21.300
And I'll just copy the disallowed methods.

47
00:03:21.300 --> 00:03:23.480
So that you can allow those methods.

48
00:03:24.900 --> 00:03:29.630
And also a couple of extra pieces of

49
00:03:29.630 --> 00:03:35.120
our schema specification here,
just to make it even more useful,

50
00:03:35.120 --> 00:03:39.750
is if you are going to specify a lot
of methods, then we want minItems of 1.

51
00:03:39.750 --> 00:03:42.949
So we wouldn't want to have allowed
methods with an empty array,

52
00:03:42.949 --> 00:03:44.119
that would be useless.

53
00:03:44.119 --> 00:03:48.220
And so we'll require people provide one.

54
00:03:48.220 --> 00:03:50.644
And uniqueItems is true, just so

55
00:03:50.644 --> 00:03:55.070
that people aren't repeating
themselves unnecessarily.

56
00:03:55.070 --> 00:03:59.827
Getting the actual options,
well we get it from context.options,

57
00:03:59.827 --> 00:04:04.050
and we can save that and
we'll see these console logs.

58
00:04:04.050 --> 00:04:04.740
Here's something cool.

59
00:04:04.740 --> 00:04:07.120
So we're using Jest as
a testing framework, and

60
00:04:07.120 --> 00:04:09.530
it shows us where that
console log came from.

61
00:04:09.530 --> 00:04:11.720
And then it shows us what the log is.

62
00:04:11.720 --> 00:04:12.920
Which is totally rad.

63
00:04:14.280 --> 00:04:17.930
Line 34 in no-console.js, yeah.

64
00:04:17.930 --> 00:04:22.240
Okay cool, so most of these are empty
arrays, so there's no configuration.

65
00:04:22.240 --> 00:04:25.170
But one of them has an item in it.

66
00:04:25.170 --> 00:04:30.290
The configuration we want,
so we'll get the config

67
00:04:30.290 --> 00:04:35.700
from context.options first item, or

68
00:04:35.700 --> 00:04:41.000
we'll just make it an empty object
just to make things easier for us.

69
00:04:41.000 --> 00:04:46.560
And then we'll get
the allowed Methods from

70
00:04:46.560 --> 00:04:51.000
the config.allowedMethods.

71
00:04:51.000 --> 00:04:54.466
And let's go ahead and
we'll console.log just here, and

72
00:04:54.466 --> 00:04:57.320
we'll default that to an empty array,
as well.

73
00:04:57.320 --> 00:05:00.790
Destructuring would really help right
here, but we're not gonna do that.

74
00:05:00.790 --> 00:05:06.550
Okay, cool, so now we have an empty array
for most of them, but one for this one.

75
00:05:06.550 --> 00:05:10.540
And now it just becomes a matter of

76
00:05:10.540 --> 00:05:15.580
including this as part of our check as to
whether or not this thing is okay, and

77
00:05:15.580 --> 00:05:18.370
we should exit early or
if we should report on it.

78
00:05:18.370 --> 00:05:22.470
And the thing that, sorry,
should make that bigger.

79
00:05:22.470 --> 00:05:27.070
The thing that determines
what function is being called

80
00:05:27.070 --> 00:05:30.090
is this property right here, so we have.

81
00:05:30.090 --> 00:05:33.070
The identifier were the name is console,

82
00:05:33.070 --> 00:05:37.220
yeah console the parent has
a type of member expression, and

83
00:05:37.220 --> 00:05:40.050
that member expression has an object
which would be the console,

84
00:05:40.050 --> 00:05:44.885
and a property which would be log,
or dir, of whatever.

85
00:05:44.885 --> 00:05:49.017
And so
here we can say we wanna make sure that

86
00:05:49.017 --> 00:05:54.640
the property name value is either not in

87
00:05:54.640 --> 00:06:00.760
the allowedMethods.includes(val),

88
00:06:00.760 --> 00:06:04.790
and it's also in the disallowedMethods.

89
00:06:04.790 --> 00:06:11.320
So lots of negation and
stuff going on here, but basically,

90
00:06:11.320 --> 00:06:18.260
this thing, this node looks like something
we don't want, if it has these properties,

91
00:06:18.260 --> 00:06:23.570
and the function that's being called
is not in the allowedMethods.

92
00:06:23.570 --> 00:06:26.750
So if it's in the allowedMethods,
we're good, and

93
00:06:26.750 --> 00:06:31.970
it's in the disc lab methods, so if it's
in disc lab methods, we're not good.

94
00:06:31.970 --> 00:06:34.100
Okay, hopefully that logic
kind of makes sense.

95
00:06:36.020 --> 00:06:38.530
And we have passing tests.

96
00:06:38.530 --> 00:06:40.800
Everything's green,
remove that console.log there.

97
00:06:42.200 --> 00:06:46.727
So that was fun,
&gt;&gt; Speaker 1: Providing options is

98
00:06:46.727 --> 00:06:51.803
something that you do quite frequently,
so that learning and

99
00:06:51.803 --> 00:06:56.988
using JSON schema is a valuable skill for
ESlint programmers.

100
00:06:56.988 --> 00:07:01.042
And JSON schema is useful for
lots of other things,

101
00:07:01.042 --> 00:07:07.670
like there's a module called joi, J O I,
that uses JSON schema to validate stuff.

102
00:07:07.670 --> 00:07:13.470
And it's great, it's a really powerful
system so I recommend learning it.

103
00:07:13.470 --> 00:07:18.640
Okay, that's it for that exercise, and

104
00:07:18.640 --> 00:07:26.000
let's just ask really quick what are some
of the take aways from this exercise?

105
00:07:26.000 --> 00:07:30.271
I will sit in here silence until I get
at least one person to say one takeaway.

106
00:07:32.482 --> 00:07:35.010
&gt;&gt; Speaker 2: I learned
something about schema today.

107
00:07:35.010 --> 00:07:37.327
&gt;&gt; Speaker 1: You learned something
about schema, JSON schema, excellent!

108
00:07:37.327 --> 00:07:38.460
&gt;&gt; Speaker 2: Yes, JSON schema.

109
00:07:38.460 --> 00:07:43.199
&gt;&gt; Speaker 1: Yeah, and
that's great, good takeaway.

110
00:07:43.199 --> 00:07:50.330
Yeah, and the ability to provide options,
provide that in your test.

111
00:07:50.330 --> 00:07:56.320
And validate those things so that your
plug in can be more configurable,

112
00:07:56.320 --> 00:07:57.390
and more useful to more people.

