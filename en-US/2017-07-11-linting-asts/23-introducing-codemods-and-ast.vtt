WEBVTT

1
00:00:00.220 --> 00:00:03.410
&gt;&gt; Kent C. Dodds: Great, so
now we're gonna be talking about codemods.

2
00:00:03.410 --> 00:00:05.340
Codemods are awesome.

3
00:00:05.340 --> 00:00:10.040
This is where I think, things start to
get really practical because codemods

4
00:00:10.040 --> 00:00:12.420
are often pretty domain specific.

5
00:00:12.420 --> 00:00:16.342
It's like,
we have this internal company module and

6
00:00:16.342 --> 00:00:19.795
we're upgrading from
version one to version two.

7
00:00:19.795 --> 00:00:23.400
And the API changed from
callbacks to promises.

8
00:00:23.400 --> 00:00:27.261
So now we need to find all of the
instances where we're using old API and

9
00:00:27.261 --> 00:00:29.565
change that from callbacks to promises.

10
00:00:29.565 --> 00:00:32.544
It's something you can totally do.

11
00:00:32.544 --> 00:00:37.542
Pretty much everything about code mods,

12
00:00:37.542 --> 00:00:40.265
so I should step back.

13
00:00:40.265 --> 00:00:44.865
Codemods started gaining popularity
in the last year or two.

14
00:00:44.865 --> 00:00:50.625
And the tool that is kinda the de facto
for codemods is called JS code shift.

15
00:00:52.170 --> 00:00:55.962
And I will paste a link to this
in the chat here really quick.

16
00:00:55.962 --> 00:01:00.648
So this is a really awesome tool,
it's a CLI and

17
00:01:00.648 --> 00:01:08.381
you provide a codemod which you can create
even in share choose JS code shift and

18
00:01:08.381 --> 00:01:14.260
it has a pretty different API
from what we've seen before.

19
00:01:14.260 --> 00:01:18.180
It still exports the function and
gives you a file and an API.

20
00:01:18.180 --> 00:01:22.710
The API has JS code shift on it and
this is your jQuery thing right here.

21
00:01:23.750 --> 00:01:28.335
So you select the file source and
then you do find and for

22
00:01:28.335 --> 00:01:33.228
each and all kinds of interesting
things to make changes.

23
00:01:33.228 --> 00:01:37.899
I love the people who build this tool and
I love that this tool exists but

24
00:01:37.899 --> 00:01:43.510
I've tried like six or seven times to use
this tool and I can never figure it out.

25
00:01:43.510 --> 00:01:47.720
So, to me it's just hard.

26
00:01:47.720 --> 00:01:52.428
I like the visitor pattern of Babel a lot.

27
00:01:52.428 --> 00:01:58.030
I think it's a really nice way
to manipulate and look at ASTs.

28
00:01:58.030 --> 00:02:05.010
And so there's recently,
I actually gave my beginners AST talk.

29
00:02:05.010 --> 00:02:06.910
And as part of that,
I decided to see what would

30
00:02:08.470 --> 00:02:12.000
the tooling like to use
Babel to do codemods.

31
00:02:12.000 --> 00:02:13.180
And it turns out it was really easy.

32
00:02:13.180 --> 00:02:15.790
I've got a little
ten-minute video on YouTube

33
00:02:15.790 --> 00:02:19.170
that I think I linked here at the end
where I demonstrate how to do this.

34
00:02:19.170 --> 00:02:23.000
And then somebody at Square
built this babel-codemod tool.

35
00:02:23.000 --> 00:02:28.050
And so
now you can just use codemod --plugin,

36
00:02:28.050 --> 00:02:33.140
you'd specify your plugin, and
then your path to your files.

37
00:02:33.140 --> 00:02:38.077
And you can even use like
Babel in your plug in and

38
00:02:38.077 --> 00:02:42.526
it'll require Babel register and stuff.

39
00:02:42.526 --> 00:02:49.560
But here, this would run the my-plugin
against the whole source directory.

40
00:02:49.560 --> 00:02:53.470
And what happens is for

41
00:02:53.470 --> 00:02:57.780
each file in the source directory,
it will run your plug-in on it and

42
00:02:57.780 --> 00:03:01.940
take the output of that and
save it to the file, and so

43
00:03:01.940 --> 00:03:07.840
where Babel plug-ins are generally for
compile time.

44
00:03:07.840 --> 00:03:10.700
They don't actually finish the source,
they just change what you're shipping.

45
00:03:12.105 --> 00:03:17.550
Codemods are intended to change the source
code so that you can migrate away from

46
00:03:17.550 --> 00:03:22.602
an old API, or something like that,
old testing framework, whatever.

47
00:03:22.602 --> 00:03:25.790
And they're super duper cool.

48
00:03:25.790 --> 00:03:29.703
And because it uses babel, or
because we can use Babel to do this,

49
00:03:29.703 --> 00:03:33.903
you pretty much know every thing you
need to know about building this,

50
00:03:33.903 --> 00:03:38.266
it's just taking the time getting used
to the APIs and that kinda thing.

51
00:03:38.266 --> 00:03:43.798
And so, instead of doing a full-on
AFC Expo Demo, I have for

52
00:03:43.798 --> 00:03:49.765
the other two concepts,
I'm just going to show you one briefly,

53
00:03:49.765 --> 00:03:53.778
I'm not gonna show you how it all works,
but

54
00:03:53.778 --> 00:03:59.338
just give you an idea use case
that is pretty cool to codemod.

55
00:03:59.338 --> 00:04:03.250
So last night I rewrote all
of these demos and exercises.

56
00:04:04.540 --> 00:04:08.463
And they're so much better than
what you would have had to endure.

57
00:04:08.463 --> 00:04:12.011
It still would have been cool, but
it would have been maybe more confusing.

58
00:04:12.011 --> 00:04:17.255
But one of the demos, or actually I think
it's one of the exercises, the very last

59
00:04:17.255 --> 00:04:22.280
exercise is a really cool codemod that
I think we should probably open source.

60
00:04:23.860 --> 00:04:26.830
And what it is is I can

61
00:04:29.240 --> 00:04:33.020
show you the text fixtures.

62
00:04:34.540 --> 00:04:40.280
Here we have this file here, our main.js.

63
00:04:40.280 --> 00:04:44.080
And it's importing some things
from the file system, or

64
00:04:44.080 --> 00:04:47.360
from the like corn node modules.

65
00:04:47.360 --> 00:04:52.630
This is commonjs module but
it's still using ES6 imports.

66
00:04:52.630 --> 00:04:54.710
This is another commonjs module.

67
00:04:54.710 --> 00:04:58.670
This one actually uses both commonjs and
ES modules.

68
00:04:58.670 --> 00:05:01.930
So we have this big mix of commonjs and
ES modules.

69
00:05:01.930 --> 00:05:05.220
And the way that things are developing,

70
00:05:05.220 --> 00:05:10.500
it appears to be like 99% sure that

71
00:05:10.500 --> 00:05:16.270
when ES modules land into node,
you will not be able to do this.

72
00:05:18.020 --> 00:05:25.589
You can only do a default import and that
default import will have like a resolve so

73
00:05:25.589 --> 00:05:31.486
the way that you'd have to write
this is it'd have to be path and

74
00:05:31.486 --> 00:05:35.631
then you'd say const {resolve} = path.

75
00:05:35.631 --> 00:05:39.150
Or you just do path.resolve everywhere.

76
00:05:39.150 --> 00:05:44.060
So that's kind of unfortunate, especially
since there's tons of code out in

77
00:05:44.060 --> 00:05:50.630
the world that's doing this pattern where
you have common JS modules, and you're

78
00:05:50.630 --> 00:05:55.340
importing them like they're ES modules
with import specifiers and all that stuff.

79
00:05:55.340 --> 00:05:56.828
So this is great use case for

80
00:05:56.828 --> 00:06:00.140
us to build a codemod that can
upgrade the entire community.

81
00:06:01.230 --> 00:06:07.280
And what's cool about this codemod and one
of the reasons why I wanted to show you is

82
00:06:07.280 --> 00:06:11.900
that the power of Babel is not limited to
your little function that you provide it.

83
00:06:11.900 --> 00:06:13.370
It's running in node.

84
00:06:13.370 --> 00:06:17.510
And one of the requirements is
that it runs synchronously.

85
00:06:17.510 --> 00:06:19.700
You can't do any asynchronous stuff.

86
00:06:19.700 --> 00:06:21.790
But outside of that,
pretty much anything's game.

87
00:06:21.790 --> 00:06:26.270
And we kind of abuse that for
our purposes here.

88
00:06:26.270 --> 00:06:30.080
So really quickly I'll just show you th,
actually I can't.

89
00:06:30.080 --> 00:06:32.770
I can't show you the result,
cuz I deleted the snapshot.

90
00:06:32.770 --> 00:06:36.800
But I think you get the idea of
what is supposed to happened here.

91
00:06:36.800 --> 00:06:41.360
So I'll show you what
the plugin actually looks like.

92
00:06:41.360 --> 00:06:43.200
So we visit import declarations.

93
00:06:43.200 --> 00:06:45.660
All those things were import declarations.

94
00:06:45.660 --> 00:06:48.250
And, actually,
I should have that open just to reference.

95
00:06:48.250 --> 00:06:51.200
So, all these things, import declarations.

96
00:06:51.200 --> 00:06:56.160
And we split them up to default,
name, spaced, and named.

97
00:06:56.160 --> 00:07:01.640
So this is default, this is named,
and this is namespaced.

98
00:07:01.640 --> 00:07:04.890
Split those up, and
we also get the source.

99
00:07:06.350 --> 00:07:07.600
So this would be the source.

100
00:07:09.810 --> 00:07:16.390
And then we determine whether or
not, let's see, I'll skip over that.

101
00:07:16.390 --> 00:07:17.900
We determine whether or

102
00:07:17.900 --> 00:07:22.435
not the module that these are being
imported from is a common JS module.

103
00:07:22.435 --> 00:07:24.953
The way that we do that,
I won't show you, but

104
00:07:24.953 --> 00:07:28.790
the way that that happens is first
we see is this a built-in module?

105
00:07:28.790 --> 00:07:32.030
And there's a known module that has
a function that says whether or

106
00:07:32.030 --> 00:07:34.550
not something's a built-in module,
which is kinda cool.

107
00:07:34.550 --> 00:07:37.140
If it is then that's definitely CommonJS.

108
00:07:37.140 --> 00:07:43.240
If it is like a relative mantra or
something, we actually read the file.

109
00:07:43.240 --> 00:07:45.330
I'll show you, it's kinda cool.

110
00:07:45.330 --> 00:07:51.880
We read the file in and
right here we get the contents and

111
00:07:51.880 --> 00:07:56.440
then I use Babel to parse the contents and
I get the AST and then I traverse the AST.

112
00:07:57.600 --> 00:08:02.721
So I'm doing, inside of my Babel plug-in,
I'm starting a whole new traversal.

113
00:08:02.721 --> 00:08:05.870
And this right here is
the visitor pattern over again.

114
00:08:06.970 --> 00:08:09.320
Pretty wild, I love that this is possible.

115
00:08:10.760 --> 00:08:15.248
And if it has an export specifier
of any kind, it's using ES modules.

116
00:08:15.248 --> 00:08:20.468
And that means that
exports as an ES module,

117
00:08:20.468 --> 00:08:23.299
so it's not CommonJS.

118
00:08:23.299 --> 00:08:28.980
And then there's the concept of mixed and
stuff like that.

119
00:08:28.980 --> 00:08:33.297
None of this stuff is super pregnant, but
hopefully you're following along pretty

120
00:08:33.297 --> 00:08:35.625
well to get an idea of
what's possible here.

121
00:08:35.625 --> 00:08:39.375
And so based off of whether
there's a default specifier,

122
00:08:39.375 --> 00:08:41.860
we'll use that variable name.

123
00:08:41.860 --> 00:08:44.630
Otherwise we'll make a new one.

124
00:08:44.630 --> 00:08:50.510
And then for each one of our coingest
modules that are using import specifiers

125
00:08:50.510 --> 00:08:55.320
or name spaced imports, we're gonna go
update not only the import itself but

126
00:08:55.320 --> 00:08:58.410
also any code that's using those names.

127
00:08:58.410 --> 00:09:02.780
And so this is where we're
getting reference paths from

128
00:09:02.780 --> 00:09:03.710
the binding of that name.

129
00:09:03.710 --> 00:09:09.700
So this is similar to the ES int stuff
we did with the git two card variables.

130
00:09:09.700 --> 00:09:13.410
We're getting all the references
to this import and

131
00:09:13.410 --> 00:09:18.200
updating them all to use this,
our new finangled thing.

132
00:09:20.170 --> 00:09:23.980
So anyway, if you didn't really
totally follow what's going on here,

133
00:09:23.980 --> 00:09:26.410
don't worry too much about it.

134
00:09:26.410 --> 00:09:31.000
Just know that doing pretty
complex transformations

135
00:09:31.000 --> 00:09:34.890
is a lot easier when you can use ASTs.

136
00:09:34.890 --> 00:09:38.860
And it's really fun and exciting and
yeah, ASTs are awesome.

