WEBVTT

1
00:00:00.090 --> 00:00:03.310
&gt;&gt; Kent C Dodds: Yeah, so
how do we actually use these things?

2
00:00:03.310 --> 00:00:08.030
So we're gonna be talking
about three use cases for

3
00:00:08.030 --> 00:00:11.690
ASTs, Babel Plugins,
ESLint Plugins and Codemods.

4
00:00:11.690 --> 00:00:15.290
And we're actually gonna start
with the ESLint Plugin first and

5
00:00:15.290 --> 00:00:18.700
then we'll get in to
the Babel Plugin stuff.

6
00:00:19.820 --> 00:00:24.650
So
&gt;&gt; Kent C Dodds: Here we have

7
00:00:24.650 --> 00:00:29.849
something set up and you can feel free
to follow along if you like but I do

8
00:00:29.849 --> 00:00:35.780
have exercises that I'll be giving you
to actually work with the AST yourself.

9
00:00:36.980 --> 00:00:41.316
So yeah I,
&gt;&gt; Kent C Dodds: Feel free to just watch

10
00:00:41.316 --> 00:00:46.610
and then you can have time for
the exercises, yeah, when we do those.

11
00:00:46.610 --> 00:00:51.570
ESLint is really good at identifying
patterns that are not the kind of

12
00:00:51.570 --> 00:00:56.760
patterns you want in your code base,
and that includes stylistic issues, but

13
00:00:56.760 --> 00:01:02.630
also actual logical problems or
domain specific things.

14
00:01:02.630 --> 00:01:09.580
At PayPal we have several ESLint plugins
where it's like, don't call this function

15
00:01:09.580 --> 00:01:13.930
with the request object because it's going
to take that and try to pretty print it.

16
00:01:13.930 --> 00:01:18.370
And that takes a minute and our CPU
spikes, this literally just happened and

17
00:01:18.370 --> 00:01:19.780
that release was a nightmare.

18
00:01:19.780 --> 00:01:24.000
And now we have a plugin for ESLint
that means we will never do that again

19
00:01:24.000 --> 00:01:26.740
which is super cool, talk about practical.

20
00:01:26.740 --> 00:01:32.590
So what we're gonna be doing is
Is kind of some stylistic stuff.

21
00:01:32.590 --> 00:01:37.960
And I can show you a couple of examples
of bigger plugins that prevent real,

22
00:01:37.960 --> 00:01:39.860
actual bugs from happening.

23
00:01:39.860 --> 00:01:43.420
And my hope is that when
you go back to work or

24
00:01:43.420 --> 00:01:47.480
your own projects, that you can
take the things about ASTs and

25
00:01:47.480 --> 00:01:51.098
ESLint that you've learned and
prevent bugs in your program.

26
00:01:51.098 --> 00:01:54.190
&gt;&gt; Student: It's almost pre-unit testing,
right?

27
00:01:54.190 --> 00:01:55.560
&gt;&gt; Kent C Dodds: Yeah, yeah exactly.

28
00:01:55.560 --> 00:01:59.170
And actually my workshop
yesterday was about testing and

29
00:01:59.170 --> 00:02:03.120
your lines of defense against bugs are,
first, static types.

30
00:02:03.120 --> 00:02:07.660
So use Flow or TypeScript, and
if you can't or don't want to do that,

31
00:02:07.660 --> 00:02:12.340
then make ESLint plugins that guard
against the common things that

32
00:02:12.340 --> 00:02:16.860
are in your code base or
in your domain specific stuff.

33
00:02:16.860 --> 00:02:19.750
And if that doesn't work,
then you go into your testing.

34
00:02:19.750 --> 00:02:24.580
But if you just write test for every
single thing you're gonna miss something,

35
00:02:24.580 --> 00:02:29.030
you're gonna have to write
the same style of test everywhere.

36
00:02:29.030 --> 00:02:33.900
And so it's just much better to have
something that works statically.

37
00:02:33.900 --> 00:02:40.190
I forgot to mention, I should have,
ASTs don't run your code.

38
00:02:40.190 --> 00:02:44.930
You'll notice there's no
something to find in this file.

39
00:02:44.930 --> 00:02:48.181
So if I were running this is strict mode,
this is gonna give me an error.

40
00:02:48.181 --> 00:02:52.573
But with the AST, it doesn't actually
run my code and just analyzes it,

41
00:02:52.573 --> 00:02:56.390
generates this JSON or
this JavaScript object for me.

42
00:02:56.390 --> 00:03:02.180
And so you can have this ESLint
plugin that checks your code without

43
00:03:02.180 --> 00:03:07.460
even running it and you find out much
quicker that you have a serious problem.

44
00:03:07.460 --> 00:03:12.420
So the thing that we're gonna write
here really quick, just to give

45
00:03:12.420 --> 00:03:16.540
you kind of an example of what the API
looks like for a ESLint plugin,

46
00:03:16.540 --> 00:03:22.040
is something that will
prevent you from doing this.

47
00:03:22.040 --> 00:03:24.400
So this is an if statement
without a block.

48
00:03:25.670 --> 00:03:29.180
And the problem with this is, if you were
to write it like this which is totally

49
00:03:29.180 --> 00:03:35.460
legit works, you might be tempted to
say console.log something else and

50
00:03:35.460 --> 00:03:40.720
expect that it would run inside of
the consequent for this if statement.

51
00:03:40.720 --> 00:03:43.050
But it won't because it
doesn't have a block.

52
00:03:43.050 --> 00:03:47.260
And so a pretty common pattern is just
to always make sure you have a block.

53
00:03:47.260 --> 00:03:48.830
And then it's very clear whether or

54
00:03:48.830 --> 00:03:51.020
not your code is gonna be
running in the block or not.

55
00:03:53.040 --> 00:03:57.030
So what you do with an ESLint plugin

56
00:03:57.030 --> 00:04:01.260
when you're developing it
in the AST Explorer is I

57
00:04:02.400 --> 00:04:06.620
generally will put a couple of examples
of the kind of thing that I want to lint.

58
00:04:06.620 --> 00:04:13.510
So both the I'll have some invalid and
some valid stuff.

59
00:04:13.510 --> 00:04:17.610
And I will make sure that my plugin can
lint against the invalid stuff, but

60
00:04:17.610 --> 00:04:19.750
it doesn't break the valid stuff.

61
00:04:19.750 --> 00:04:23.010
And then once I have my plugin
pretty solid in the ASTexplorer,

62
00:04:23.010 --> 00:04:26.920
then I can pull it down and I can write
actual tests using these test cases.

63
00:04:26.920 --> 00:04:27.440
And we'll do that.

64
00:04:29.090 --> 00:04:30.038
&gt;&gt; Kent C Dodds: Okay, cool so

65
00:04:30.038 --> 00:04:34.100
on the bottom here we have
our ESLint plugin definition.

66
00:04:34.100 --> 00:04:38.650
And what we're doing here
is we export a module and

67
00:04:38.650 --> 00:04:44.070
that module is an object that has
these two properties, meta and create.

68
00:04:44.070 --> 00:04:48.710
So the meta bit has some documentation
information, has fixable and

69
00:04:48.710 --> 00:04:51.018
schema and we'll talk about those later,
not right now.

70
00:04:51.018 --> 00:04:58.500
And yeah, that's useful for
generating docs and other things.

71
00:04:58.500 --> 00:05:00.610
And then it has this create method.

72
00:05:00.610 --> 00:05:05.850
And this is where you're creating
what's called a visitor and

73
00:05:05.850 --> 00:05:09.050
both ESLint and Babel use what's
called the visitor pattern.

74
00:05:10.090 --> 00:05:12.630
So let's talk about the visitor pattern
really quick because you're gonna

75
00:05:12.630 --> 00:05:14.650
get to know it really well.

76
00:05:14.650 --> 00:05:20.330
The visitor pattern makes it much
easier for you to traverse your AST,

77
00:05:20.330 --> 00:05:26.060
because I tried to write a AST
traverser just for fun and it was hard.

78
00:05:26.060 --> 00:05:28.290
So let's traverse this
ourselves really quick.

79
00:05:28.290 --> 00:05:33.120
Let's say we wanna find
all of the if statements.

80
00:05:33.120 --> 00:05:40.042
Here, and we'll make our thing
a little bit more complex,

81
00:05:40.042 --> 00:05:44.210
just for illustrations purposes.

82
00:05:44.210 --> 00:05:45.940
So we wrap this in a function.

83
00:05:45.940 --> 00:05:48.450
Our body has a function declaration.

84
00:05:48.450 --> 00:05:52.757
And so inside of this function
declaration, every time we come across

85
00:05:52.757 --> 00:05:57.729
a function declaration, we have to know
that a function declaration has a body.

86
00:05:57.729 --> 00:06:01.896
And that body can be a box statement,
or it is a box statement.

87
00:06:01.896 --> 00:06:06.100
And so now we have to know that
block statements also have bodies.

88
00:06:06.100 --> 00:06:10.311
So as we're traversing things,
we have to say okay I hit a block

89
00:06:10.311 --> 00:06:15.009
statement let me traverse down into
the body of that block statement.

90
00:06:15.009 --> 00:06:17.054
Okay that has an if statement, perfect.

91
00:06:17.054 --> 00:06:18.747
I found what I was looking for but

92
00:06:18.747 --> 00:06:21.840
let's say inside of this if
statement there's another.

93
00:06:24.323 --> 00:06:28.353
&gt;&gt; Kent C Dodds: And now, once we hit this
if statement, we have to know that there's

94
00:06:28.353 --> 00:06:31.910
a consequence and an alternate and
we have to dive into that.

95
00:06:31.910 --> 00:06:33.130
And that can be a block statement.

96
00:06:33.130 --> 00:06:36.300
And so okay, we found a block statement,
now we have to dive into the body.

97
00:06:36.300 --> 00:06:40.600
So as you can see, with a bigger program,
you have to know every single node type

98
00:06:40.600 --> 00:06:44.650
and where you can find more
node types inside of that node.

99
00:06:44.650 --> 00:06:45.420
So it's not easy.

100
00:06:46.630 --> 00:06:50.740
I spent quite a bit of time on it and
it was fun because ASTs are awesome.

101
00:06:50.740 --> 00:06:54.540
But I'm so glad that we have these
tools to traverse the AST for

102
00:06:54.540 --> 00:06:57.240
us because that's a lot of complexity
we don't have to deal with.

103
00:06:59.030 --> 00:07:03.500
Any questions about traversing, how that,
at a high level how that works?

104
00:07:04.550 --> 00:07:06.230
Pretty much just find the node.

105
00:07:06.230 --> 00:07:09.050
Know all the places that you can
find more nodes in that node, and

106
00:07:09.050 --> 00:07:12.770
keep going until you find
all the things you want.

107
00:07:12.770 --> 00:07:16.630
So the visitor pattern makes it, I don't
know why this red line keeps on appearing.

108
00:07:18.140 --> 00:07:18.660
Yeah, there we go.

109
00:07:19.870 --> 00:07:24.420
The visitor pattern allows you to say,
I only care about nodes of this type.

110
00:07:24.420 --> 00:07:27.010
It's almost like a jQuery selector.

111
00:07:27.010 --> 00:07:33.160
So you say, I've got this huge DOM tree,
just like an AST, abstract syntax tree.

112
00:07:33.160 --> 00:07:34.390
It's the DOM.

113
00:07:34.390 --> 00:07:37.669
And I want to find nodes
that have this class.

114
00:07:38.810 --> 00:07:40.570
With a visitor pattern,

115
00:07:40.570 --> 00:07:45.160
you don't have quite the granularity
you do with css selectors.

116
00:07:45.160 --> 00:07:51.040
But you can, actually there's
a cool project called esquery that

117
00:07:51.040 --> 00:07:57.040
lets you create an AST-like with css
selectors, even pseudoselectors and stuff.

118
00:07:57.040 --> 00:07:58.270
It's pretty wild.

119
00:07:58.270 --> 00:07:59.520
I just found out about it last night.

120
00:07:59.520 --> 00:08:01.040
It's kinda interesting.

121
00:08:01.040 --> 00:08:06.000
But with the regular visitor pattern,
the only mechanism you have for

122
00:08:06.000 --> 00:08:09.820
selecting specific nodes is the node type.

123
00:08:09.820 --> 00:08:14.100
And so if I want to get all of
the if statements, then I'm going to

124
00:08:14.100 --> 00:08:17.550
click on the if statement,
find out what the node type is called.

125
00:08:17.550 --> 00:08:23.280
And I will put a function on my
visitor object that is of that name.

126
00:08:24.620 --> 00:08:28.260
And this function is going
to accept a node, and

127
00:08:28.260 --> 00:08:33.430
now I can console.log that node,
and write it in our browser here.

128
00:08:33.430 --> 00:08:37.330
We can pop open our DevTools, and

129
00:08:37.330 --> 00:08:41.679
we'll see two nodes were
logged to the console.

130
00:08:43.240 --> 00:08:46.460
So iconsole log and
ast explorer all the time.

131
00:08:46.460 --> 00:08:52.520
It's really fantastic,
it's the best way to develop.

132
00:08:52.520 --> 00:08:57.070
You can try and do like debugger
statements and stuff and sometimes that's

133
00:08:57.070 --> 00:09:00.980
helpful, but lots of times it's kind
of messy, so console logs are great.

134
00:09:02.110 --> 00:09:04.510
Okay cool, so
we found two if statements, and

135
00:09:04.510 --> 00:09:06.350
we didn't have to do any
traversing ourselves.

136
00:09:06.350 --> 00:09:10.650
We just said, hey, I wanna find all
the if statements, and it gave it to us.

137
00:09:10.650 --> 00:09:15.900
And it's important to know that this
happens as ESLint is traversing the tree.

138
00:09:15.900 --> 00:09:19.000
So by the time it gets to
that first if statement,

139
00:09:19.000 --> 00:09:21.150
it doesn't even know that there's
another if statement yet.

140
00:09:22.320 --> 00:09:24.320
Well, that's not true.

141
00:09:25.330 --> 00:09:28.220
It still does know that
the if statement is there but

142
00:09:28.220 --> 00:09:32.650
some of the bindings from variables
to where they're declared and

143
00:09:32.650 --> 00:09:35.170
that kind of thing, some of those
things haven't been set up yet.

144
00:09:35.170 --> 00:09:37.960
And we'll run into some problems
with that a little bit later.

145
00:09:37.960 --> 00:09:46.920
Makes things a little bit more complicated
but that's when things get kind of fun.

146
00:09:46.920 --> 00:09:49.650
We have our invalid first and
our valid second so

147
00:09:49.650 --> 00:09:52.424
let's see some of the differences
between these two nodes.

148
00:09:52.424 --> 00:09:56.370
So on our valid example,

149
00:09:56.370 --> 00:10:01.450
if we look at the consequent,
that type is a block statement.

150
00:10:01.450 --> 00:10:06.004
If we look at the consequent
of our first if statement,

151
00:10:06.004 --> 00:10:09.080
the invalid example,
that type is an expression statement.

152
00:10:09.080 --> 00:10:09.830
So that's the difference.

153
00:10:09.830 --> 00:10:11.864
That's the thing that we
want to lint against.

154
00:10:11.864 --> 00:10:14.370
We wanna make sure that all if statements

155
00:10:14.370 --> 00:10:17.600
have a consequent that is
a block statement, okay?

156
00:10:18.740 --> 00:10:21.060
So let's go ahead and do that.

157
00:10:21.060 --> 00:10:25.080
What I like to do at the top of,
most of my visitors at the top,

158
00:10:25.080 --> 00:10:29.620
I will filter out the things that are
fine, that aren't what I'm looking for.

159
00:10:29.620 --> 00:10:36.340
So I'll say, if the node.consequent,
actually, another little tip that I do is

160
00:10:36.340 --> 00:10:42.040
I'll console.log the thing that I'm
trying to explore a little more about.

161
00:10:42.040 --> 00:10:48.890
So I can see right here as I'm typing
what it is that I'm gonna be testing.

162
00:10:48.890 --> 00:10:53.280
So node.consequent.type, okay so
now I've got an ExpressionStatement and

163
00:10:53.280 --> 00:10:54.420
a BlockStatement.

164
00:10:54.420 --> 00:10:58.853
And I can say,
is not equal to a BlockStatement or

165
00:10:58.853 --> 00:11:03.410
sorry, it's equal to a BlockStatement,
okay.

166
00:11:03.410 --> 00:11:05.640
And then I'll turn that
into an if statement.

167
00:11:08.951 --> 00:11:12.480
&gt;&gt; Kent C Dodds: And I'll return.

168
00:11:12.480 --> 00:11:15.470
So now if I console.log the node,
I should only get one, and

169
00:11:15.470 --> 00:11:17.249
it's the one that's breaking the rule.

170
00:11:19.980 --> 00:11:23.480
With this I need to tell ESLint,
hey this thing broke the rules so

171
00:11:23.480 --> 00:11:24.580
do something about that.

172
00:11:24.580 --> 00:11:29.002
I don't have to like console log
to tell the user, hey fix this.

173
00:11:29.002 --> 00:11:32.265
ESLint has an API around
reporting a problem on a node and

174
00:11:32.265 --> 00:11:36.363
then it takes care of actually telling
the user that there's a problem

175
00:11:36.363 --> 00:11:39.015
based off of their configuration and
stuff.

176
00:11:40.235 --> 00:11:46.095
So the way that we do that is
with this context property or

177
00:11:46.095 --> 00:11:48.175
parameter that we get
in the create function.

178
00:11:49.495 --> 00:11:53.590
So the context actually
gives us a lot of things,

179
00:11:53.590 --> 00:11:56.200
and one of those is the report function.

180
00:11:57.870 --> 00:12:01.770
And the report function takes an object,

181
00:12:01.770 --> 00:12:04.420
there are a couple of APIs but
we're gonna use the object.

182
00:12:04.420 --> 00:12:09.560
And it takes a node property and
a message property.

183
00:12:09.560 --> 00:12:12.259
And I'm gonna say, y u no block.

184
00:12:14.270 --> 00:12:15.360
And if we look over here now,

185
00:12:15.360 --> 00:12:18.280
we're gonna see our ESLint rule
is firing on the right thing.

186
00:12:25.820 --> 00:12:29.068
&gt;&gt; Kent C Dodds: We're filtering
out the ones that are cool,

187
00:12:29.068 --> 00:12:31.900
the ones that are not cool we report on.

188
00:12:33.160 --> 00:12:34.660
And ESLint will tell us there's a problem.

189
00:12:36.370 --> 00:12:40.610
So some takeaways here,
ASTs are just JavaScript objects.

190
00:12:40.610 --> 00:12:45.020
They are complex,
there's a lot to them, but

191
00:12:45.020 --> 00:12:50.500
tools like ESLint and Babel will shield
you from lots of that complexity,

192
00:12:50.500 --> 00:12:56.300
provide you a visitor pattern for you to
just care about the things you care about.

193
00:12:56.300 --> 00:13:00.090
And then, because you don't have

194
00:13:00.090 --> 00:13:04.440
a whole lot of granularity
at the top of my visitors,

195
00:13:04.440 --> 00:13:09.770
I normally eject early if it's not the
type of or not the thing I'm looking for.

196
00:13:11.330 --> 00:13:12.097
Okay.

197
00:13:12.097 --> 00:13:13.477
&gt;&gt; Student: Question.

198
00:13:13.477 --> 00:13:14.350
&gt;&gt; Kent C Dodds: Yes?

199
00:13:14.350 --> 00:13:16.290
&gt;&gt; Student: So

200
00:13:16.290 --> 00:13:20.300
it's the actual transform that we're
using that is the context, right?

201
00:13:20.300 --> 00:13:23.550
So you're saying the context
is the insulin API.

202
00:13:23.550 --> 00:13:24.250
&gt;&gt; Kent C Dodds: That's right, yep.

203
00:13:24.250 --> 00:13:25.640
Context is the ESLint API.

204
00:13:28.130 --> 00:13:32.594
&gt;&gt; Kent C Dodds: And actually I
should link you all to the docs for

205
00:13:32.594 --> 00:13:37.760
this stuff cuz you will
probably be interested.

206
00:13:37.760 --> 00:13:40.900
It's working with rules, and
I'll just paste that in here.

207
00:13:41.940 --> 00:13:47.860
And there is the context object.

208
00:13:47.860 --> 00:13:50.210
This will tell you the properties
you have available and

209
00:13:50.210 --> 00:13:52.230
the functions you have available to call.

210
00:13:52.230 --> 00:13:56.310
And we'll definitely be using
that during the workshop.

211
00:13:59.572 --> 00:14:03.006
&gt;&gt; Kent C Dodds: I'm gonna take
this just one more step further and

212
00:14:03.006 --> 00:14:05.780
then we'll get into an exercise.

213
00:14:05.780 --> 00:14:10.180
So it's not just the consequent
that can be missing a block.

214
00:14:10.180 --> 00:14:16.540
You can also have an if false,
whatever, or if thing.

215
00:14:16.540 --> 00:14:18.380
Then we will have a block here.

216
00:14:20.810 --> 00:14:29.195
So that's valid, but we can also have
no block on our alternate console.log.

217
00:14:32.255 --> 00:14:35.253
&gt;&gt; Kent C Dodds: And that's valid code,
that's totally fine, but

218
00:14:35.253 --> 00:14:38.900
it isn't what we're looking for
out of code.

219
00:14:38.900 --> 00:14:43.000
And so here we're going to say, yeah,

220
00:14:44.800 --> 00:14:50.400
so we want both the consequent and
the alternate to be a block statement,

221
00:14:50.400 --> 00:14:54.210
but right here,
we don't have an alternate at all.

222
00:14:54.210 --> 00:14:59.840
And so we basically what we want
to say is that the consequent and

223
00:14:59.840 --> 00:15:03.960
the alternate both if they exist
that they are block statements.

224
00:15:03.960 --> 00:15:05.610
So I'm gonna make a utility function.

225
00:15:05.610 --> 00:15:08.920
And I do this all the time
when developing plugins.

226
00:15:08.920 --> 00:15:17.870
So right at the bottom, I'll make a
isBlock function here that takes any node,

227
00:15:17.870 --> 00:15:22.040
and it will return,
if there's not a node, then that's fine.

228
00:15:24.280 --> 00:15:27.930
It's basically, maybe I should name this
function is block or doesn't exist, but

229
00:15:27.930 --> 00:15:31.270
that's kind of long, so
I'm just going to leave it this way.

230
00:15:31.270 --> 00:15:35.820
So if it's not, if the node
doesn't exist then that's fine.

231
00:15:35.820 --> 00:15:40.070
Otherwise, the node.type needs
to be a block statement.

232
00:15:41.710 --> 00:15:44.029
So then I can swap this with is block.

233
00:15:47.223 --> 00:15:49.816
&gt;&gt; Kent C Dodds: And
that should still be working and

234
00:15:49.816 --> 00:15:53.800
I can in addition to that,
I can say and the alternate.

235
00:15:55.690 --> 00:16:01.680
So now I'm getting a warning
except here's another little

236
00:16:01.680 --> 00:16:07.470
tip is where the warning appears
is on this if statement.

237
00:16:07.470 --> 00:16:12.180
But the consequent has a block,
so that's fine.

238
00:16:12.180 --> 00:16:16.650
And so it's a little misleading, so what
we can do is instead of reporting on this

239
00:16:16.650 --> 00:16:22.854
node, we can actually report on the node
that actually is the problem case.

240
00:16:22.854 --> 00:16:27.550
And so we could rework this a little bit
further if we wanted to, to basically

241
00:16:27.550 --> 00:16:30.780
say if it's the consequent that's the
problem, then report on the consequent.

242
00:16:30.780 --> 00:16:34.131
That's what we'll do,

243
00:16:34.131 --> 00:16:39.398
we'll say if it's not consequent then

244
00:16:39.398 --> 00:16:44.546
we'll report on node.consequent.

245
00:16:44.546 --> 00:16:47.550
Otherwise, else

246
00:16:47.550 --> 00:16:54.763
if (!isBlock(node.alternate)),

247
00:16:54.763 --> 00:17:01.610
then we'll report on the alternate.

248
00:17:01.610 --> 00:17:03.850
Sorry, I'm used to prettier
formatting all my code for me.

249
00:17:05.535 --> 00:17:06.280
Cool, so

250
00:17:06.280 --> 00:17:10.970
now we're getting an error message like
very specifically where the problem is.

251
00:17:12.210 --> 00:17:15.970
And the error message should probably
be a little bit more friendly and

252
00:17:15.970 --> 00:17:18.380
useful but we're having fun so

