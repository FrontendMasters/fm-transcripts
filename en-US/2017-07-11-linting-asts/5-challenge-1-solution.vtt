WEBVTT

1
00:00:00.270 --> 00:00:03.730
&gt;&gt; Kent C. Dodds: Let's go ahead and
write out our ESLint plugin.

2
00:00:03.730 --> 00:00:06.400
When you write a plugin for ESLint,

3
00:00:06.400 --> 00:00:11.730
you're generally spending as much
time in AST Explorer as you can.

4
00:00:11.730 --> 00:00:17.170
And so, actually, I often won't
even use any third party modules

5
00:00:17.170 --> 00:00:22.110
in my plugins until the very, very end
because I can't use those in AST Explorer.

6
00:00:22.110 --> 00:00:25.060
So sometimes I'll even
copy the module source and

7
00:00:25.060 --> 00:00:28.980
put it at the bottom of my
plug-in in AST Explorer so

8
00:00:28.980 --> 00:00:34.420
that I can do most of my development here,
cuz it's just that nice of an experience.

9
00:00:34.420 --> 00:00:36.390
But it's all trade-off, so

10
00:00:36.390 --> 00:00:42.600
here we're gonna find the offending
nodes and this log is fine.

11
00:00:42.600 --> 00:00:44.700
But these consoles are not and

12
00:00:44.700 --> 00:00:48.870
the common thing across these is that
they're identifiers with the name console.

13
00:00:48.870 --> 00:00:53.560
So we're going to use
the identifier visitor and

14
00:00:53.560 --> 00:00:59.592
we'll accept a node here and
we'll say if (node.name

15
00:00:59.592 --> 00:01:05.570
console I== 'console'),
then we'll exit early, this node is fine.

16
00:01:05.570 --> 00:01:10.883
Otherwise we're gonna use context to
report that our node has a problem,

17
00:01:10.883 --> 00:01:15.526
and now we're getting an undefined
error message on all those.

18
00:01:15.526 --> 00:01:21.070
So, we'll say the message is
'Using console is not allowed'.

19
00:01:23.034 --> 00:01:27.630
&gt;&gt; Kent C. Dodds: And so we're getting all
of those error messages, which is great.

20
00:01:27.630 --> 00:01:30.330
So I'll copy that and paste it in here.

21
00:01:30.330 --> 00:01:34.040
We'll save and we get passing test,
so we're good.

22
00:01:35.200 --> 00:01:41.776
And then we do this elaboration and
feedback and change this to true.

23
00:01:43.064 --> 00:01:46.738
&gt;&gt; Kent C. Dodds: And then we have
all passing tests, which is great.

24
00:01:46.738 --> 00:01:48.720
Any questions?

25
00:01:50.617 --> 00:01:51.990
&gt;&gt; Kent C. Dodds: Did
anybody struggle with this?

26
00:01:51.990 --> 00:01:56.844
Was there any, what were the points
that tripped you up, aside from typos?

27
00:02:00.020 --> 00:02:05.951
&gt;&gt; Speaker 2: Which node type to use, or
I use like call or express or something.

28
00:02:05.951 --> 00:02:09.320
I had to have conditions of if
there was an object or something.

29
00:02:09.320 --> 00:02:10.400
&gt;&gt; Kent C. Dodds: Yeah.
&gt;&gt; Speaker 2: I

30
00:02:10.400 --> 00:02:11.500
started at too high of a level.

31
00:02:11.500 --> 00:02:14.220
I didn't think of it as
just using an identifier.

32
00:02:14.220 --> 00:02:15.280
&gt;&gt; Kent C. Dodds: Yeah, yeah and

33
00:02:15.280 --> 00:02:21.560
eventually we're going to get to that
because we don't want to warn on that.

34
00:02:21.560 --> 00:02:24.090
I mean, maybe that's a problem for us, but

35
00:02:24.090 --> 00:02:26.830
honestly we're not doing
anything wrong there.

36
00:02:26.830 --> 00:02:28.900
Even this, it should be fine and

37
00:02:28.900 --> 00:02:32.170
so using something like a call expression
ultimately would be a better solution.

38
00:02:32.170 --> 00:02:34.700
And we're gonna iterate and
make this solution better.

39
00:02:36.240 --> 00:02:39.370
So yeah, knowing which node
type to use can be a challenge.

40
00:02:39.370 --> 00:02:44.750
I'm glad that you brought that up, because
generally you kind of want to start

41
00:02:44.750 --> 00:02:50.400
at a higher level node type just so that
you have all of the context that you need.

42
00:02:50.400 --> 00:02:53.890
But the nice thing is,
once you get your node you can go up and

43
00:02:53.890 --> 00:02:58.310
down the tree yourself and
we will definitely be doing that.

44
00:02:58.310 --> 00:03:03.100
What were some of the key take-aways that
you talked about in your elaboration?

45
00:03:05.140 --> 00:03:06.880
There hopefully was at least one.

46
00:03:06.880 --> 00:03:08.090
Yeah.
&gt;&gt; Speaker 3: Do you want us to do that

47
00:03:08.090 --> 00:03:09.140
for every exercise?

48
00:03:09.140 --> 00:03:11.650
&gt;&gt; Kent C. Dodds: Yeah,
we'll do one of these for every exercise.

49
00:03:11.650 --> 00:03:12.830
Yep.

50
00:03:12.830 --> 00:03:16.730
So any key takeaways from this exercise?

51
00:03:16.730 --> 00:03:18.060
Anything that you learned.

52
00:03:18.060 --> 00:03:19.804
&gt;&gt; Speaker 4: Identifier as a node type.

53
00:03:19.804 --> 00:03:21.975
&gt;&gt; Kent C. Dodds: Yeah,
that's something to learn.

54
00:03:21.975 --> 00:03:23.170
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Kent C. Dodds: Identifier's a node

55
00:03:23.170 --> 00:03:25.170
type, it's one that you'll
get to know very much.

