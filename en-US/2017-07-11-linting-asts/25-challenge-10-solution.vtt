WEBVTT

1
00:00:00.280 --> 00:00:04.144
&gt;&gt; Kent C. Dodds: So what we're looking
for is we want to change, yeah,

2
00:00:04.144 --> 00:00:05.575
basically change.

3
00:00:05.575 --> 00:00:10.650
Well, here it'd be handy to have what
we're ultimately looking to have,

4
00:00:10.650 --> 00:00:13.916
we'll just stick that right there.

5
00:00:13.916 --> 00:00:17.130
So we wanna change this first line
to that, but not change this, right?

6
00:00:18.970 --> 00:00:24.254
So looks like we want to really
change this CallExpression,

7
00:00:24.254 --> 00:00:27.581
well, pretty much this whole thing.

8
00:00:27.581 --> 00:00:31.765
But we're gonna start out by looking for
this CallExpression and

9
00:00:31.765 --> 00:00:36.329
see if that CallExpression is part of
a MemberExpression that is part of

10
00:00:36.329 --> 00:00:37.790
the CallExpression.

11
00:00:38.860 --> 00:00:40.460
Lots of words, let's get some code.

12
00:00:42.250 --> 00:00:47.220
So we're gonna start out with
the CallExpression with our path.

13
00:00:48.480 --> 00:00:50.730
And we're going to filter
out anything that isn't

14
00:00:51.940 --> 00:00:53.560
a CallExpression that looks like this.

15
00:00:54.560 --> 00:00:56.950
So to do that,
we're gonna use a looksLike.

16
00:00:56.950 --> 00:01:03.139
So we'll say const isJqueryCallExpression,

17
00:01:03.139 --> 00:01:09.180
say, looksLike path and
a giant object here.

18
00:01:10.510 --> 00:01:14.690
So the node callee should
be the dollar sign.

19
00:01:14.690 --> 00:01:18.150
Let's move this down a little bit,
more space here.

20
00:01:19.390 --> 00:01:23.820
So here's our CallExpression,
has a callee, and the name is dollar sign.

21
00:01:23.820 --> 00:01:28.247
So we can say node callee.

22
00:01:30.764 --> 00:01:33.120
&gt;&gt; Kent C. Dodds: So name,
that is the dollar sign.

23
00:01:34.270 --> 00:01:38.574
Okay, that actually,
just right there, we'll apply that,

24
00:01:38.574 --> 00:01:41.837
if isJqueryCallExpression, we'll return.

25
00:01:41.837 --> 00:01:45.552
If it's not, we console.log the path.

26
00:01:45.552 --> 00:01:46.737
We should only see one.

27
00:01:46.737 --> 00:01:50.500
Yep, that filters out the foo.hide,
so we're great.

28
00:01:51.800 --> 00:01:56.490
In addition to that, I'm gonna just add

29
00:01:57.530 --> 00:02:01.080
another little feature
into what we've got here.

30
00:02:01.080 --> 00:02:04.764
We don't want to add in
anything that's like forEach.

31
00:02:06.180 --> 00:02:10.490
Maybe this would be something to add to
our plugin eventually, but right now,

32
00:02:10.490 --> 00:02:12.310
we don't want to select that.

33
00:02:12.310 --> 00:02:14.510
And with what we have right now,
we're gonna get both of those.

34
00:02:14.510 --> 00:02:19.360
So let's filter that out as well to just
be the stuff that we're interested in.

35
00:02:20.860 --> 00:02:24.900
So in addition to just doing the node,

36
00:02:24.900 --> 00:02:32.366
we're gonna actually take that,
let's see what we want, this one.

37
00:02:32.366 --> 00:02:34.710
This is the CallExpression
that we're visiting.

38
00:02:34.710 --> 00:02:39.539
We wanna take this one and
check its parent path that

39
00:02:39.539 --> 00:02:44.266
the parent path's property
has a name with hide.

40
00:02:46.722 --> 00:02:49.532
&gt;&gt; Kent C. Dodds: So we'll say,
not on the node, but

41
00:02:49.532 --> 00:02:57.583
parentPath,
&gt;&gt; Kent C. Dodds: I'm

42
00:02:57.583 --> 00:02:59.963
gonna do things differently than
my solution, so let me just check.

43
00:02:59.963 --> 00:03:04.421
The type is a,
&gt;&gt; Kent C. Dodds: Yeah,

44
00:03:04.421 --> 00:03:07.180
the type of the parentPath
is a MemberExpression.

45
00:03:09.322 --> 00:03:11.363
&gt;&gt; Kent C. Dodds: And it has a property.

46
00:03:11.363 --> 00:03:14.490
Actually, we want the parent,
not the parentPath.

47
00:03:14.490 --> 00:03:18.170
Because we want the parent node so
we can inspect this stuff.

48
00:03:19.210 --> 00:03:21.920
So the type of the parent
is a MemberExpression and

49
00:03:21.920 --> 00:03:27.010
the property is going to be
an identifier that has a name of hide.

50
00:03:28.280 --> 00:03:30.200
So now let's see our console logs.

51
00:03:30.200 --> 00:03:32.958
We're limiting it down to
exactly what we need, perfect.

52
00:03:35.415 --> 00:03:40.168
&gt;&gt; Kent C. Dodds: Now, let's see,
so if we look at what it is

53
00:03:40.168 --> 00:03:44.394
that we're gonna be replacing with,

54
00:03:44.394 --> 00:03:50.120
this is a perfect use case for
using a template.

55
00:03:50.120 --> 00:03:55.668
So I'm gonna copy this and
I'm gonna give myself a templateString.

56
00:03:58.711 --> 00:04:04.550
&gt;&gt; Kent C. Dodds: And I use single
quotes because that's the way I roll.

57
00:04:04.550 --> 00:04:07.862
And that can be our templateString.

58
00:04:07.862 --> 00:04:11.395
But this el thing needs to be the same
thing that's being referenced in here, so

59
00:04:11.395 --> 00:04:14.170
that's gonna be the dynamic
part of our template.

60
00:04:14.170 --> 00:04:17.040
So we can do el or element.

61
00:04:17.040 --> 00:04:19.110
We'll just do all caps EL.

62
00:04:19.110 --> 00:04:20.650
It doesn't actually have to be all caps.

63
00:04:20.650 --> 00:04:26.617
What the important piece is, is that when
you compile this template into an AST,

64
00:04:26.617 --> 00:04:31.736
that the key for the data that you're
passing in needs to be the same.

65
00:04:31.736 --> 00:04:33.840
So it's pretty common
to just use all caps.

66
00:04:35.280 --> 00:04:39.410
Okay, great, and I'm pretty sure
we have template right there.

67
00:04:39.410 --> 00:04:41.754
So let's create our const.

68
00:04:45.496 --> 00:04:46.097
&gt;&gt; Kent C. Dodds: I don't know,

69
00:04:46.097 --> 00:04:52.469
it's our assignmentBuilder,
&gt;&gt; Kent C. Dodds: template

70
00:04:52.469 --> 00:04:55.060
with the templateString.

71
00:04:55.060 --> 00:05:03.055
And then we'll get our assignment
with the assignmentBuilder.

72
00:05:03.055 --> 00:05:06.936
And we'll pass it our data for the EL.

73
00:05:06.936 --> 00:05:10.860
That's going to be the thing that's inside
of our CallExpression, so the argument.

74
00:05:12.050 --> 00:05:14.380
And it needs to be an identifier.

75
00:05:14.380 --> 00:05:17.490
We can reuse that
identifier if we want to.

76
00:05:17.490 --> 00:05:22.510
But things can get messy
if we reuse existing nodes

77
00:05:22.510 --> 00:05:26.360
because maybe some other plugin is gonna
remove that node or something like that.

78
00:05:26.360 --> 00:05:30.906
So if you don't absolutely have to reuse
the same node as something else that

79
00:05:30.906 --> 00:05:32.906
exists, it's nice to clone it.

80
00:05:32.906 --> 00:05:37.918
And I'm pretty sure that there is
a clone function that we could use.

81
00:05:37.918 --> 00:05:39.462
Now, let's just find out really quick,
console.log to path.

82
00:05:45.855 --> 00:05:50.852
&gt;&gt; Kent C. Dodds: And luckily,
this is alphabetical, I think.

83
00:05:50.852 --> 00:05:52.665
Yeah, it doesn't look like
there's a clone here,

84
00:05:52.665 --> 00:05:55.550
but there might be something off of
Babel core that we could look at.

85
00:05:55.550 --> 00:05:59.657
But we'll just make one
ourselves really quick so

86
00:05:59.657 --> 00:06:03.176
I don't waste your time looking for that,

87
00:06:03.176 --> 00:06:07.072
and,
&gt;&gt; Kent C. Dodds: Actually,

88
00:06:07.072 --> 00:06:10.820
my solution is reusing the same node,
so there's that.

89
00:06:10.820 --> 00:06:16.800
Okay, we'll do path.node.arguments.

90
00:06:16.800 --> 00:06:18.960
So this is a CallExpression path.

91
00:06:18.960 --> 00:06:22.260
And so CallExpressions have arguments.

92
00:06:22.260 --> 00:06:26.680
And there is the argument, it is that el.

93
00:06:26.680 --> 00:06:30.738
So I'm gonna take the first one and
get the name, or, yeah,

94
00:06:30.738 --> 00:06:33.296
we got that name, poof, like magic.

95
00:06:35.906 --> 00:06:38.799
&gt;&gt; Kent C. Dodds: And
we'll say t.identifier and

96
00:06:38.799 --> 00:06:43.218
make a new identifier with that, and-
&gt;&gt; Speaker 2: You have a typo in that

97
00:06:43.218 --> 00:06:44.339
function call, yeah.

98
00:06:44.339 --> 00:06:45.797
&gt;&gt; Kent C. Dodds: Thank you.

99
00:06:45.797 --> 00:06:48.780
And t, I need to bring in types.

100
00:06:49.910 --> 00:06:50.800
There we go.

101
00:06:51.910 --> 00:06:54.730
Cool, so we've created an assignment.

102
00:06:54.730 --> 00:06:59.153
Actually, I haven't shown you this before,
but

103
00:06:59.153 --> 00:07:04.006
I'm pretty sure this would
be a good thing to show you.

104
00:07:04.006 --> 00:07:07.213
So we can log out our AST
that we just created.

105
00:07:07.213 --> 00:07:09.347
It's an expression statement,

106
00:07:09.347 --> 00:07:12.866
has an expression that's
an assignment expression.

107
00:07:12.866 --> 00:07:17.190
And yeah, interesting stuff.

108
00:07:17.190 --> 00:07:21.810
But there is, look,
there's a clone function.

109
00:07:21.810 --> 00:07:23.854
Looks like we probably shouldn't use it,
though.

110
00:07:25.823 --> 00:07:29.165
&gt;&gt; Kent C. Dodds: With the path,
now how do we do this?

111
00:07:29.165 --> 00:07:34.950
There's a way to, just like with
the ESLint plugin that we're developing,

112
00:07:34.950 --> 00:07:38.514
where you could get
the source text from a node.

113
00:07:38.514 --> 00:07:39.447
You can do that with Babel.

114
00:07:39.447 --> 00:07:42.480
And I didn't think about telling
you that until just now.

115
00:07:44.550 --> 00:07:47.700
So you'll have to go look up in the docs
later cuz I don't wanna fish around in

116
00:07:47.700 --> 00:07:53.160
the docs right now, but there is a way to
do that and it's very useful sometimes.

117
00:07:53.160 --> 00:07:57.751
So when you're debugging stuff and
whatnot,

118
00:07:57.751 --> 00:08:01.173
I recommend taking a look at that.

119
00:08:01.173 --> 00:08:03.669
Okay, so now, I'm gonna go ahead and save.

120
00:08:06.077 --> 00:08:07.940
&gt;&gt; Kent C. Dodds: Well, okay,
we have this assignment.

121
00:08:07.940 --> 00:08:14.580
And this assignment needs
to replace the full text.

122
00:08:14.580 --> 00:08:18.990
Not just the thing that we're visiting
right now, but the whole thing.

123
00:08:18.990 --> 00:08:25.670
And so the path that we have
right now is just this $(el),

124
00:08:25.670 --> 00:08:30.230
but we need to find the overall path.

125
00:08:30.230 --> 00:08:34.525
And that is going to be,
if you look at this for just for a sec,

126
00:08:34.525 --> 00:08:36.983
this is the path we're visiting.

127
00:08:36.983 --> 00:08:39.229
This is the parent path
that's a MemberExpression.

128
00:08:39.229 --> 00:08:41.525
And this is the parent path
of the MemberExpression,

129
00:08:41.525 --> 00:08:42.780
which is a CallExpression.

130
00:08:42.780 --> 00:08:44.900
We can explore that really quick.

131
00:08:46.200 --> 00:08:48.199
We can see the CallExpression
we're visiting,

132
00:08:48.199 --> 00:08:51.335
the parent path is a MemberExpression and
that parent is a CallExpression.

133
00:08:51.335 --> 00:08:55.290
So we'll say,

134
00:08:55.290 --> 00:09:02.597
parentPath.parentPath.

135
00:09:02.597 --> 00:09:04.030
Let's get that really quick.

136
00:09:04.030 --> 00:09:05.810
That is what we're looking for,
the CallExpression.

137
00:09:06.980 --> 00:09:12.150
So we're gonna call that our overallPath
or we can call that whatever.

138
00:09:12.150 --> 00:09:14.474
And then we'll say,

139
00:09:14.474 --> 00:09:19.907
overallPath.replaceWith our
new assignment.

140
00:09:24.138 --> 00:09:27.100
&gt;&gt; Kent C. Dodds: assignment,
you gotta spell correctly.

141
00:09:27.100 --> 00:09:28.028
Otherwise, it doesn't work.

142
00:09:28.028 --> 00:09:33.074
[LAUGH] Okay, that is the plugin.

143
00:09:33.074 --> 00:09:38.820
So let's copy that over, make sure that
our tests are working, and they are.

144
00:09:38.820 --> 00:09:43.180
And we felt the feedback and
the elaboration and learn things.

145
00:09:44.480 --> 00:09:45.770
So did we learn anything?

146
00:09:45.770 --> 00:09:48.783
&gt;&gt; Speaker 3: Template [CROSSTALK] Babel,
awesome.

147
00:09:48.783 --> 00:09:50.715
&gt;&gt; Kent C. Dodds: Yeah, babel.template.

148
00:09:50.715 --> 00:09:52.820
I loved all those things you said,
especially awesome.

