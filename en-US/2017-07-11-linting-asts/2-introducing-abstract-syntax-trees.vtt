WEBVTT

1
00:00:00.270 --> 00:00:02.830
&gt;&gt; Kent C. Dodds: All of this talk
about is really awesome things,

2
00:00:02.830 --> 00:00:04.020
gets me super excited.

3
00:00:04.020 --> 00:00:07.260
But, what is an AST?

4
00:00:07.260 --> 00:00:12.390
We talk about how this AST can
accomplish these really cool things,

5
00:00:12.390 --> 00:00:13.317
but what even is that?

6
00:00:14.640 --> 00:00:19.861
So this is code, it is a module,
it is something you can actually install

7
00:00:19.861 --> 00:00:25.784
to code transformers' names, and
it'll get you a random Transformers' name.

8
00:00:25.784 --> 00:00:28.730
I don't even know what
their names are anymore.

9
00:00:28.730 --> 00:00:31.540
But if you're into
Transformers you might care.

10
00:00:31.540 --> 00:00:34.120
So this is code, and it's code for humans.

11
00:00:34.120 --> 00:00:38.630
I'm using variable names here that
are useful for us, but as far as

12
00:00:38.630 --> 00:00:43.610
the computer's concerned that could be
variable A and this could be variable B.

13
00:00:43.610 --> 00:00:45.077
It really doesn't matter.

14
00:00:45.077 --> 00:00:49.175
But for us it does, and so
we write our code in a way that,

15
00:00:49.175 --> 00:00:53.972
that makes sense for us and then,
we send that off to a computer and

16
00:00:53.972 --> 00:00:57.570
it turns it into something
that looks like this.

17
00:00:58.730 --> 00:01:02.980
This is a JavaScript object
that represents that program.

18
00:01:02.980 --> 00:01:07.360
It's much bigger to
represent what we had there.

19
00:01:07.360 --> 00:01:09.509
It's pretty wild stuff.

20
00:01:09.509 --> 00:01:14.321
So this is an AST, maybe it looks
a little bit scary, maybe not, but

21
00:01:14.321 --> 00:01:18.205
hopefully by the end of this,
it's not scary to you and

22
00:01:18.205 --> 00:01:22.533
it's just a JavaScript object
cuz that's really all it is.

23
00:01:22.533 --> 00:01:23.280
It's pretty cool.

24
00:01:24.710 --> 00:01:30.960
So that's kinda hard to read so we're
going to explore an AST using this really

25
00:01:30.960 --> 00:01:38.520
neat demo from this
company called JointJS.

26
00:01:38.520 --> 00:01:41.220
This demo is, actually,

27
00:01:41.220 --> 00:01:47.010
it's purpose is to show you how cool their
draphing tool is, and they just happen

28
00:01:47.010 --> 00:01:52.650
to be using an AST to demonstrate that, so
we're gonna be abusing this a little bit.

29
00:01:52.650 --> 00:01:54.518
Thank you JointJS.

30
00:01:54.518 --> 00:01:55.627
Okay, cool.

31
00:01:55.627 --> 00:02:02.090
So this is some code,
here let's bump this up a little bit.

32
00:02:02.090 --> 00:02:04.260
And we're declaring some variables.

33
00:02:04.260 --> 00:02:08.568
We have this function declaration, and
we're making some assignments here.

34
00:02:08.568 --> 00:02:12.860
If we click Show AST,
then we'll see that AST out here.

35
00:02:12.860 --> 00:02:14.940
So let's explore this a little bit.

36
00:02:14.940 --> 00:02:16.530
The AST starts out with a program.

37
00:02:17.650 --> 00:02:19.720
And the program has a body, and

38
00:02:19.720 --> 00:02:23.140
all of what's inside of our
program is in that body.

39
00:02:24.450 --> 00:02:29.360
And then as part of that
body we have four things.

40
00:02:29.360 --> 00:02:31.750
And that first one if our
variable declaration.

41
00:02:31.750 --> 00:02:35.240
So you can see at the top of our
program is that variable declaration

42
00:02:35.240 --> 00:02:36.930
that's happening right there.

43
00:02:36.930 --> 00:02:40.540
And that variable declaration
has a single declarator.

44
00:02:41.900 --> 00:02:47.690
So the variable declaration of type
var has a declarator that is a = 42.

45
00:02:47.690 --> 00:02:50.280
And that variable declarator has
a left side and a right side.

46
00:02:50.280 --> 00:02:54.403
The left side is a and
the right side is 42, literal 42.

47
00:02:54.403 --> 00:02:57.959
One of the things that I really
like about working with ASTs

48
00:02:57.959 --> 00:03:00.810
is it makes me better at JavaScript.

49
00:03:00.810 --> 00:03:03.841
Because I understand what the purpose

50
00:03:03.841 --> 00:03:07.637
of these different pieces
of the language are.

51
00:03:07.637 --> 00:03:10.180
And also how they work together.

52
00:03:10.180 --> 00:03:15.710
So sometimes I forget that a variable
declaration can have multiple declarators,

53
00:03:15.710 --> 00:03:18.010
and that's why these two
things are separate.

54
00:03:18.010 --> 00:03:21.522
So if I add another declarator here,

55
00:03:21.522 --> 00:03:26.180
we'll say q = 23,
we'll show the AST again.

56
00:03:27.540 --> 00:03:31.220
Now, this variable declaration
has two variable declarators.

57
00:03:31.220 --> 00:03:35.180
And each have a left side and
a right side.

58
00:03:35.180 --> 00:03:41.852
Left side and right side can be a little
bit more complex, so we could say a + 23.

59
00:03:41.852 --> 00:03:48.005
And now, this q variable declarator
has a left side of the identifier q.

60
00:03:48.005 --> 00:03:49.910
So this is what we're assigning things to.

61
00:03:49.910 --> 00:03:52.610
And then the right side
is a binary expression.

62
00:03:52.610 --> 00:03:56.930
And so now, like,
we see this addition operator.

63
00:03:56.930 --> 00:03:58.220
And we can actually give it a name.

64
00:03:58.220 --> 00:03:59.709
It's a binary expression.

65
00:03:59.709 --> 00:04:03.330
And a binary expression also has
a left side and a right side.

66
00:04:03.330 --> 00:04:06.700
And it can go down as deep as you want.

67
00:04:06.700 --> 00:04:09.440
You can keep going forever and
ever and ever.

68
00:04:10.560 --> 00:04:12.360
And that's just JavaScript.

69
00:04:12.360 --> 00:04:16.373
But it kind of changes
the way that our ast

70
00:04:16.373 --> 00:04:21.920
represents itself,
I think it's pretty rad.

71
00:04:21.920 --> 00:04:27.659
So the left side of a BinaryExpression can
be another one, and another, and another.

72
00:04:27.659 --> 00:04:32.512
And what's cool about this is you
get to learn about precedence,

73
00:04:32.512 --> 00:04:36.160
about how JavaScript is evaluating things.

74
00:04:36.160 --> 00:04:39.010
So if we toss in a multiplication in here,

75
00:04:39.010 --> 00:04:44.010
it's gonna throw the AST off like
it's gonna be totally different.

76
00:04:44.010 --> 00:04:48.650
So now this BinaryExpression branches off
with the right side as a BinaryExpression

77
00:04:48.650 --> 00:04:52.000
23 times a because of precedence.

78
00:04:52.000 --> 00:04:58.570
And so you learn about how JavaScript
works by working with these ASTs.

79
00:04:58.570 --> 00:05:01.112
We'll just explore a couple
more things here just so

80
00:05:01.112 --> 00:05:03.547
you can get some exposure
to a few more node types.

81
00:05:03.547 --> 00:05:08.917
And I failed to mentioned each of
these is called a node in AST,

82
00:05:08.917 --> 00:05:11.306
the Abstract Syntax Tree.

83
00:05:11.306 --> 00:05:17.180
And each one of these can have branches,
and then you get to your leaf nodes.

84
00:05:17.180 --> 00:05:20.810
Often, that winds up being
an identifier or something.

85
00:05:20.810 --> 00:05:23.390
So here we have another
variable declaration,

86
00:05:23.390 --> 00:05:26.040
that's not interesting anymore,
we know that.

87
00:05:26.040 --> 00:05:32.990
Now we have a function declaration,
that has a block statement.

88
00:05:32.990 --> 00:05:34.940
And that block statement has a body.

89
00:05:34.940 --> 00:05:37.130
Which can have one or
more elements inside of it.

90
00:05:37.130 --> 00:05:39.150
It only has one, it's a return statement.

91
00:05:39.150 --> 00:05:41.397
Let's make it have another one.

92
00:05:41.397 --> 00:05:45.970
So I'll say d += 1.

93
00:05:49.250 --> 00:05:53.510
And so now that function block
statement has two items in it.

94
00:05:53.510 --> 00:05:55.910
So the first is an expression statement.

95
00:05:55.910 --> 00:06:00.983
Within an assignment expression, with the
left side as d and the right side as 1.

96
00:06:00.983 --> 00:06:05.944
And then our block statement also has
a return statement as the last item, and

97
00:06:05.944 --> 00:06:09.740
that's a binary expression for
the left and right.

98
00:06:09.740 --> 00:06:11.530
So we could do this all day long.

99
00:06:11.530 --> 00:06:14.620
There are all kinds of different
node types that you can mess with.

100
00:06:14.620 --> 00:06:22.217
But it's more fun to actually really mess
with them and we're gonna do that next.

101
00:06:22.217 --> 00:06:27.420
Before I move on,
any questions about AST's in general?

102
00:06:28.530 --> 00:06:30.310
Yeah?
&gt;&gt; Speaker 2: There's a question online,

103
00:06:30.310 --> 00:06:35.830
does the variable declaration
distinguish between LAR CONST or LET.

104
00:06:35.830 --> 00:06:37.570
And how is that represented in the tree?

105
00:06:37.570 --> 00:06:40.640
&gt;&gt; Kent C. Dodds: Yes, it does,
I will show you in just a sec.

106
00:06:40.640 --> 00:06:45.750
That's a great leading in question for
this bit.

107
00:06:45.750 --> 00:06:51.391
So everybody feel free to
go to ASTExplorer.net.

108
00:06:51.391 --> 00:06:54.778
And you won't see what I'm seeing,
unless you're on my slides,

109
00:06:54.778 --> 00:06:56.460
you click on this link.

110
00:06:56.460 --> 00:07:01.020
But, yeah, it's fun to play around with
regardless of what code's in there.

111
00:07:02.730 --> 00:07:07.248
So yeah, let's, actually, I'll show you
this variable declaration right here.

112
00:07:07.248 --> 00:07:12.250
And the distinction is in this kind
property on the variable declaration node.

113
00:07:16.570 --> 00:07:21.190
So you can also, here we'll change this
to var, that changes the kind to var.

114
00:07:21.190 --> 00:07:23.120
And let that changes the kind to let.

115
00:07:24.880 --> 00:07:29.480
So before I explore this code and

116
00:07:30.710 --> 00:07:35.040
the ast any further,
I wanna just show you the AST Explorer.

117
00:07:35.040 --> 00:07:36.930
Because as you work with ASTs,

118
00:07:36.930 --> 00:07:40.650
you'll spend a huge amount of
your time in the AST Explorer.

119
00:07:41.700 --> 00:07:46.672
So here you can Fork, and Save, and
create a new one, share things.

120
00:07:46.672 --> 00:07:52.585
And then, I don't even know what
this icon is supposed to be,

121
00:07:52.585 --> 00:07:58.976
but this all of the different ASTs
that are available to be parsed.

122
00:07:58.976 --> 00:08:04.278
So you can actually parse the CSS AST,
or the CSS code into an AST and

123
00:08:04.278 --> 00:08:10.055
graph UL and mark down and like actually,
wait, there is no mark down but

124
00:08:10.055 --> 00:08:14.791
there should be and
you could add it because it's awesome,

125
00:08:14.791 --> 00:08:20.830
because there are markdown parsers
that create ASTs out of things.

126
00:08:20.830 --> 00:08:27.790
Yeah, JSON, I don't understand why
you'd wanna parse JSON, to be honest.

127
00:08:27.790 --> 00:08:29.770
From a JSON object into a JSON,

128
00:08:29.770 --> 00:08:33.770
I don't know, but I'm sure some
people have use cases for that.

129
00:08:33.770 --> 00:08:37.530
Even regex, all kinds of really
interesting and awesome things.

130
00:08:37.530 --> 00:08:41.700
And I'm glad that we could do this,
cuz it's a lot of fun.

131
00:08:41.700 --> 00:08:43.780
We're gonna stick with JavaScript here.

132
00:08:43.780 --> 00:08:50.910
And then this next session, based off
of the language that you've chosen,

133
00:08:50.910 --> 00:08:58.780
you have various parsers, and with
JavaScript, there are several parsers.

134
00:08:58.780 --> 00:09:02.650
And there's an effort to standardize
on the AST that they create, but

135
00:09:02.650 --> 00:09:07.020
they do create slightly different
representations of the code.

136
00:09:07.020 --> 00:09:11.920
So here we can see if I choose acorn,
the root node is a program.

137
00:09:11.920 --> 00:09:18.212
If I choose babel-eslint, then here
the root note is a program, as well.

138
00:09:18.212 --> 00:09:21.950
But if I choose Babylon,
the root note is a file.

139
00:09:21.950 --> 00:09:27.100
So there are like some subtle
differences between these and

140
00:09:27.100 --> 00:09:33.470
each has like some extra properties that
are useful for the purpose of this parser.

141
00:09:34.668 --> 00:09:40.816
So we're gonna be starting out with ES
lint and ES lint's parser is espree.

142
00:09:40.816 --> 00:09:47.916
Or, you can use babel ESLint
which uses babel's parser and

143
00:09:47.916 --> 00:09:54.200
then converts it into
ESLint supported AST.

144
00:09:54.200 --> 00:09:57.750
And so you'd use that if you're using
features that the ESLint parser doesn't

145
00:09:57.750 --> 00:09:59.040
support yet.

146
00:09:59.040 --> 00:10:03.360
But most things are supported by Esprit,
so we'll stick with that.

147
00:10:03.360 --> 00:10:06.710
You can specify some options here, and

148
00:10:06.710 --> 00:10:11.620
then you can do this really neat
transform thing right in the browser.

149
00:10:11.620 --> 00:10:13.690
You can write your plugins in the browser.

150
00:10:13.690 --> 00:10:20.270
This is the enabling tool for
writing plugins and

151
00:10:20.270 --> 00:10:24.470
for pretty much everything.

152
00:10:24.470 --> 00:10:26.170
It's awesome.

153
00:10:26.170 --> 00:10:29.740
As I click around, I have this autofocus
thing checked and so as I click around

154
00:10:29.740 --> 00:10:34.100
it's going to automatically focus
to the node that my cursor is on.

155
00:10:34.100 --> 00:10:38.650
So you'll see that most things
that I click on are identifiers.

156
00:10:38.650 --> 00:10:43.120
So those are bits of text that identify

157
00:10:44.140 --> 00:10:49.050
a piece of a node,
that's the idea of this property.

158
00:10:50.070 --> 00:10:57.890
And so if I go ahead and explore a little
bit further, I'll just, here we go.

159
00:10:57.890 --> 00:11:00.890
We're on a block statement
in this random function.

160
00:11:00.890 --> 00:11:02.180
And we can see some properties here.

161
00:11:02.180 --> 00:11:07.720
It gives us a range,
a start, and an end for

162
00:11:07.720 --> 00:11:12.650
where the first character
exists in the source code.

163
00:11:12.650 --> 00:11:15.445
It gives us a body and
that body is an array and

164
00:11:15.445 --> 00:11:18.544
it only has one node it's
just an if statement and

165
00:11:18.544 --> 00:11:23.650
inside of that if statement it has a test
and a consequent and an alternate.

166
00:11:23.650 --> 00:11:26.660
Now we have like names for these things,
like you always use to say,

167
00:11:26.660 --> 00:11:32.320
the if statement like passes and
then the other one.

168
00:11:32.320 --> 00:11:36.470
Now you can say, okay,
my test is failing, so

169
00:11:36.470 --> 00:11:38.630
my consequent isn't running,
my alternate is running.

170
00:11:38.630 --> 00:11:43.330
You can actually talk about code
using proper names, which is cool.

171
00:11:44.640 --> 00:11:46.660
So the test is a binary expression.

172
00:11:47.750 --> 00:11:50.860
Binary expression nodes have a left and
right and

173
00:11:50.860 --> 00:11:56.500
consequent, which in this case has a body
but it doesn't have to have a body.

174
00:11:56.500 --> 00:11:59.460
We can actually fun fact with JavaScript.

175
00:11:59.460 --> 00:12:01.600
You don't need to have those braces.

176
00:12:01.600 --> 00:12:05.980
And you learn stuff like that when
you're messing around with ASTs and

177
00:12:05.980 --> 00:12:09.850
you realize that would be hard
code to read and update and stuff.

178
00:12:09.850 --> 00:12:12.142
So we should always do blind statement.

179
00:12:12.142 --> 00:12:13.540
But you don't have to.

180
00:12:13.540 --> 00:12:15.907
That consequent can be any expression.

181
00:12:15.907 --> 00:12:20.910
And then we have an alternate and
it's a BlockStatement that has a body.

182
00:12:20.910 --> 00:12:24.000
So, again,
we could explore ASTs like all day.

183
00:12:24.000 --> 00:12:27.550
There are tons and
tons of different node types, but

184
00:12:27.550 --> 00:12:31.410
we're going to actually dig into this and
manipulate and

185
00:12:31.410 --> 00:12:37.340
inspect these things to get a good
idea of how to actually leverage this

186
00:12:37.340 --> 00:12:41.020
to be useful for the things that
we're doing for work or whatever.

