WEBVTT

1
00:00:00.290 --> 00:00:01.770
&gt;&gt; Kent C. Dodds: Okay, great.
Let's go ahead and solve this.

2
00:00:01.770 --> 00:00:04.480
In my solution,
I actually stick with identifier and

3
00:00:04.480 --> 00:00:10.810
I verify the parents to
do the full on solution.

4
00:00:10.810 --> 00:00:13.540
And what you probably
have in your solution,

5
00:00:13.540 --> 00:00:17.950
whatever you ended up using is a lot of
dot this, dot this, dot this, dot this.

6
00:00:17.950 --> 00:00:21.026
Comparing is this thing
equal to this other thing.

7
00:00:21.026 --> 00:00:24.160
So I'm gonna show you a little utility
that I wrote and that we'll be using for

8
00:00:24.160 --> 00:00:26.610
the rest of the workshop and

9
00:00:26.610 --> 00:00:30.350
I'm just gonna copy it to
save us a little bit of time.

10
00:00:30.350 --> 00:00:34.198
But it is this function called looks like.

11
00:00:34.198 --> 00:00:38.823
So what this does is it's like

12
00:00:38.823 --> 00:00:43.800
a deep equal, basically.

13
00:00:43.800 --> 00:00:47.560
It's a pretty simple function,
but in a second,

14
00:00:47.560 --> 00:00:51.850
when I use it, you'll see that it actually
simplifies our stuff quite a bit.

15
00:00:51.850 --> 00:00:57.930
And I think that's something like
this exists 1 million times on NPM.

16
00:00:57.930 --> 00:01:01.126
But it's in my plug in so
I can use it in AST explorer.

17
00:01:01.126 --> 00:01:06.599
So I'm gonna copy all this
over to AST explorer,

18
00:01:06.599 --> 00:01:11.939
I'm gonna bring over
a couple of the use cases or

19
00:01:11.939 --> 00:01:16.770
all of the user, a quick thing.

20
00:01:16.770 --> 00:01:23.088
I'll ust pull all these over and

21
00:01:23.088 --> 00:01:30.080
just change this out a little bit.

22
00:01:30.080 --> 00:01:35.110
And so I should have this
done before we even start up.

23
00:01:36.690 --> 00:01:37.770
Good lesson for next time.

24
00:01:37.770 --> 00:01:44.053
Okay, so these are the invalid and
these are valid.

25
00:01:44.053 --> 00:01:46.666
And we are getting a bunch of warnings,
but

26
00:01:46.666 --> 00:01:51.700
we're getting warnings on the valid
ones in addition to the invalid ones.

27
00:01:51.700 --> 00:01:58.590
So we want to make our solution
a little bit more robust.

28
00:01:59.840 --> 00:02:04.270
So what we're going to do
is let's take a look at

29
00:02:04.270 --> 00:02:10.320
the valid ones and see how those
differ from the invalid ones.

30
00:02:10.320 --> 00:02:14.655
So, in both cases, we have an identifier
that has the name of console.

31
00:02:14.655 --> 00:02:19.719
But the difference here is in the parent,

32
00:02:19.719 --> 00:02:23.046
the parent has an object and

33
00:02:23.046 --> 00:02:28.701
that object is something
totally different.

34
00:02:28.701 --> 00:02:31.896
Actually, let's move over
to the invalid case and

35
00:02:31.896 --> 00:02:35.093
see the things that are common
among the invalid and

36
00:02:35.093 --> 00:02:39.120
then we can make sure that we're
not hitting our valid cases.

37
00:02:39.120 --> 00:02:40.890
That would be a lot better.

38
00:02:40.890 --> 00:02:46.190
So the console has a parent
that's a MemberExpression,

39
00:02:46.190 --> 00:02:51.100
and that MemberExpression is using
a property or has a property that's

40
00:02:51.100 --> 00:02:56.010
an identifier that's one of our
disallowed functions for console.

41
00:02:56.010 --> 00:03:00.210
So I'm gonna go ahead and
make disallowedMethods

42
00:03:03.330 --> 00:03:06.620
and we'll do "log', and 'info', 'warn',

43
00:03:06.620 --> 00:03:11.460
and there are a bunch more and
we can add those pretty easily later on.

44
00:03:12.850 --> 00:03:17.060
And so instead fo doing this,
we're going to do

45
00:03:17.060 --> 00:03:22.510
something with this looks
like function that I have.

46
00:03:22.510 --> 00:03:28.250
So I will say isConsoleCall = looksLike.

47
00:03:29.420 --> 00:03:33.150
And we're going to pass the node and

48
00:03:33.150 --> 00:03:36.980
determine whether the node
looks like some other object.

49
00:03:36.980 --> 00:03:39.120
And then we'll use that in here instead.

50
00:03:39.120 --> 00:03:44.298
Actually, let's first say that
the name is console, and now these two

51
00:03:44.298 --> 00:03:50.008
things are functionally equivalent,
what we had before and what we have now.

52
00:03:50.008 --> 00:03:55.273
And so these this identifiers and
older looking at has a name console and

53
00:03:55.273 --> 00:04:01.290
then each one of these nodes here will
console like this so you can see this.

54
00:04:01.290 --> 00:04:04.651
Cuz you don't really see
that in the AST Explorer.

55
00:04:04.651 --> 00:04:08.052
But each one of these has a parent, and

56
00:04:08.052 --> 00:04:12.410
that parent has a type of
member expression, and

57
00:04:12.410 --> 00:04:19.126
that MemberExpression also has a parent
that's of type call expression.

58
00:04:19.126 --> 00:04:24.253
And then that member expression also has

59
00:04:24.253 --> 00:04:32.140
a property that has a type of
identifier and a name of console.

60
00:04:32.140 --> 00:04:36.440
So that's the type of node
that we're looking for.

61
00:04:36.440 --> 00:04:38.170
And so
that's what we're gonna write out here.

62
00:04:39.770 --> 00:04:44.790
So we're gonna say parent, and

63
00:04:44.790 --> 00:04:49.640
the type of our parent needs
to be a MemberExpression, so

64
00:04:49.640 --> 00:04:53.610
that's going to actually filter out this,
because this isn't a member expression.

65
00:04:53.610 --> 00:04:55.800
So we won't see that in here anymore,
which is pretty cool.

66
00:04:56.820 --> 00:05:00.580
And this should also have a parent
that is a call expression.

67
00:05:01.970 --> 00:05:04.330
So they type is a call expression.

68
00:05:05.740 --> 00:05:08.300
And then it should have a property.

69
00:05:09.350 --> 00:05:15.510
So where we'll look at that
member expression has a property

70
00:05:15.510 --> 00:05:20.160
that is one of our disallowed arguments.

71
00:05:20.160 --> 00:05:23.640
Or has a name with one of
our disallowed methods.

72
00:05:23.640 --> 00:05:25.990
So this is where things
get a little bit tricky.

73
00:05:25.990 --> 00:05:27.950
So far it's just been literal stuff.

74
00:05:27.950 --> 00:05:29.330
But if there's something that's dynamic,

75
00:05:29.330 --> 00:05:33.570
like it needs to have one of these
disallowed methods, then our looks like

76
00:05:33.570 --> 00:05:38.950
function can allow us to use a function so
that will give us the value and

77
00:05:39.990 --> 00:05:44.530
we'll say disallowed
methods includes the value.

78
00:05:46.536 --> 00:05:52.460
And that is it.

79
00:05:52.460 --> 00:05:55.780
So that looksLike function really
makes things a lot simpler, right?

80
00:05:57.370 --> 00:06:03.160
The alternative is a lot of checking
whether properties exist and stuff.

81
00:06:06.090 --> 00:06:09.095
Okay, let's go ahead and we'll copy this,

82
00:06:09.095 --> 00:06:13.285
make sure this actually does pass tests,
and we're good, and

83
00:06:13.285 --> 00:06:17.737
then also fill out the feedback and
all of that elaboration stuff.

84
00:06:17.737 --> 00:06:21.450
Any questions?

85
00:06:21.450 --> 00:06:23.960
&gt;&gt; Speaker 2: So that call expression
check is to actually check on

86
00:06:23.960 --> 00:06:24.566
the function?

87
00:06:24.566 --> 00:06:25.345
&gt;&gt; Kent C. Dodds: Yes.

88
00:06:25.345 --> 00:06:27.920
&gt;&gt; Speaker 2: If you it,
it would just be a member expression.

89
00:06:27.920 --> 00:06:30.580
&gt;&gt; Kent C. Dodds: Yeah, and we didn't
really have a test case for that, so

90
00:06:30.580 --> 00:06:35.180
I probably shouldn't have even included
that, but that would be a console.log.

91
00:06:35.180 --> 00:06:39.130
And if I didn't have this in here,
then that console log

92
00:06:39.130 --> 00:06:44.180
would not be filtered out, so good point.

93
00:06:44.180 --> 00:06:45.230
Any other questions?

94
00:06:45.230 --> 00:06:46.260
&gt;&gt; Speaker 3: From your experience,

95
00:06:46.260 --> 00:06:51.700
have you learned a best practice in
regards to enforcing a rule like this?

96
00:06:51.700 --> 00:06:56.990
For instance, I solved mine with
another expression, a keyword

97
00:06:56.990 --> 00:07:02.660
function rather than an identifier.

98
00:07:02.660 --> 00:07:05.770
&gt;&gt; Kent C. Dodds: Yeah,
it really kinda depends.

99
00:07:05.770 --> 00:07:10.445
It would look similar to this solution if
we use this looks like function too if you

100
00:07:10.445 --> 00:07:13.390
used a member expression instead.

101
00:07:13.390 --> 00:07:16.940
So the difference is whether you're
going up the tree to find the parent or

102
00:07:16.940 --> 00:07:19.410
whether you're going down
the tree to find the children or

103
00:07:19.410 --> 00:07:23.020
the relevant identifier information.

104
00:07:23.020 --> 00:07:27.688
So the only real difference or
consideration might be that one performs

105
00:07:27.688 --> 00:07:32.434
better because there are way more
identifiers in your program than there

106
00:07:32.434 --> 00:07:38.064
are member expressions, and so the member
expression one would probably be faster.

107
00:07:38.064 --> 00:07:41.341
And so, yeah, if that was really an issue,

108
00:07:41.341 --> 00:07:46.127
I try not to think of performance
in especially context like this

109
00:07:46.127 --> 00:07:50.320
where it probably really
doesn't matter but it could.

110
00:07:50.320 --> 00:07:52.965
If it's just as easy to do it
one way as it is the other,

111
00:07:52.965 --> 00:07:54.580
may as well do the faster one.

112
00:07:54.580 --> 00:07:56.310
So yeah, you could totally
do a member expression or

113
00:07:56.310 --> 00:08:00.240
even a call expression if you're
filtering out the call expressions.

114
00:08:00.240 --> 00:08:01.269
Yeah.
&gt;&gt; Speaker 4: Not to hit too much on

115
00:08:01.269 --> 00:08:02.542
performance, cuz as you said-
&gt;&gt; Kent C. Dodds: Yeah.

116
00:08:02.542 --> 00:08:05.291
&gt;&gt; Speaker 4: It's not necessarily
important in this context, but

117
00:08:05.291 --> 00:08:08.300
is it cheaper to reach up the tree or
down the tree?

118
00:08:08.300 --> 00:08:09.990
&gt;&gt; Kent C. Dodds: It
doesn't make a difference.

119
00:08:11.060 --> 00:08:13.922
Well, all that matters is how often
is your function gonna be called, and

120
00:08:13.922 --> 00:08:15.216
if you're using an identifier,

121
00:08:15.216 --> 00:08:17.313
it'll be called a lot because
there are tons of them.

122
00:08:17.313 --> 00:08:20.629
But if you use call expression or function
declaration then it won't be as much.

123
00:08:21.680 --> 00:08:23.006
Yeah.
&gt;&gt; Speaker 4: There is a question from

124
00:08:23.006 --> 00:08:26.190
online just working do you find
what the method looks like?

125
00:08:26.190 --> 00:08:29.470
&gt;&gt; Kent C. Dodds: Yeah, yeah.
So when we bumb up to the next exercise,

126
00:08:29.470 --> 00:08:33.490
your plugin will have
the looks like function.

127
00:08:33.490 --> 00:08:37.148
So, yeah,
I literally just wrote this last night and

128
00:08:37.148 --> 00:08:40.330
it made all of my examples
some much simpler.

129
00:08:40.330 --> 00:08:45.920
So that's kinda nice shoutout
to cowboy for creating this.

130
00:08:45.920 --> 00:08:48.890
It's primitive in a gist
that I just ripped.

131
00:08:48.890 --> 00:08:49.390
And it's great.

132
00:08:51.010 --> 00:08:54.680
I want at least one person to tell me a
key takeaway that they wrote down in their

133
00:08:54.680 --> 00:08:56.320
elaboration piece.

134
00:08:59.410 --> 00:09:04.500
What did you learn from this,
from working with this plugin.

135
00:09:05.950 --> 00:09:09.100
&gt;&gt; Speaker 5: Writing these rules is
just like any other program you'd write.

136
00:09:09.100 --> 00:09:10.320
So you'd wanna dry it up.

137
00:09:10.320 --> 00:09:11.920
You'd wanna write utility functions.

138
00:09:14.150 --> 00:09:15.630
Wanna make it as readable as possible.

139
00:09:17.250 --> 00:09:18.270
&gt;&gt; Kent C. Dodds: Absolutely.

140
00:09:18.270 --> 00:09:23.001
And I'm really glad you got that
takeaway because that's what I'm

141
00:09:23.001 --> 00:09:25.911
trying to communicate in this workshop.

142
00:09:25.911 --> 00:09:29.506
Lots of people hear AST, or
abstract syntax tree, and

143
00:09:29.506 --> 00:09:33.210
just the word abstract freaks people out.

144
00:09:33.210 --> 00:09:37.810
It freaked me out until I started working
with it, and then I realized, no, wait,

145
00:09:37.810 --> 00:09:43.240
it's literally all it is is a JavaScript
program, and I get this thing.

146
00:09:43.240 --> 00:09:46.010
The tools just make it so approachable.

147
00:09:46.010 --> 00:09:49.079
And so if you're struggling with it,
that's fine.

148
00:09:49.079 --> 00:09:52.364
It takes a while to get
used to these things.

149
00:09:52.364 --> 00:09:55.460
But at the same time,
it is something that you can learn.

150
00:09:55.460 --> 00:09:57.870
It's not something for
computer science only,

151
00:09:57.870 --> 00:10:02.460
like really smart writing
compilers type people.

152
00:10:02.460 --> 00:10:06.380
This is for everybody,
and anybody can use ASTs.

153
00:10:06.380 --> 00:10:08.290
So yeah, it's just a program.

154
00:10:08.290 --> 00:10:12.480
Yeah, and dry up, and
utility functions, and stuff like that.

