WEBVTT

1
00:00:00.000 --> 00:00:01.110
&gt;&gt; Kent C. Dodds: Let's go ahead and
get started.

2
00:00:01.110 --> 00:00:06.590
I have this talk that I'm basically just
going to give you a beginners guide to

3
00:00:06.590 --> 00:00:09.640
ASTs, because you're beginners,

4
00:00:09.640 --> 00:00:13.180
or my assumption is that you're
coming here as beginners.

5
00:00:13.180 --> 00:00:16.712
Most of you, based off the feedback
server, that's the case.

6
00:00:16.712 --> 00:00:17.850
And so, yeah,

7
00:00:17.850 --> 00:00:23.639
this will be useful to give us all context
around why we should care about ASTs.

8
00:00:25.510 --> 00:00:27.450
So how many people here use Babel?

9
00:00:28.800 --> 00:00:33.330
Okay, it's awesome, you can use
the latest version of JavaScript but

10
00:00:33.330 --> 00:00:35.220
still ship to the older browsers.

11
00:00:35.220 --> 00:00:36.900
It's pretty sweet.

12
00:00:36.900 --> 00:00:40.018
So Babel uses ASTs to accomplish this.

13
00:00:40.018 --> 00:00:45.210
And Babel is a tool that can take
some code, turn it into an AST and

14
00:00:45.210 --> 00:00:49.538
then traverse that AST to
make manipulations to it and

15
00:00:49.538 --> 00:00:55.308
it has plugins to do that and we'll be
writing some plugins to do that but

16
00:00:55.308 --> 00:01:00.598
the ones that we're all familiar
with are the ones that transpile

17
00:01:00.598 --> 00:01:06.290
all the latest version of JavaScript
to what we can use today.

18
00:01:06.290 --> 00:01:12.280
And Babel can be used to create all
kinds of different plugins, as well.

19
00:01:12.280 --> 00:01:15.620
So I've got a couple of examples,
some of my favorites.

20
00:01:15.620 --> 00:01:19.170
This babel-plugin-lodash is super awesome.

21
00:01:19.170 --> 00:01:22.410
So here, let's look at this code first.

22
00:01:22.410 --> 00:01:27.660
If you care about the size of your
bundle that you're sending to users,

23
00:01:27.660 --> 00:01:31.510
like this is in a client side application
or something, then you probably don't want

24
00:01:31.510 --> 00:01:36.770
to ascend the entire lodash module to
the browser cuz it's pretty enormous.

25
00:01:36.770 --> 00:01:41.360
And so what you can do instead is you
can kinda cherry pick off the methods,

26
00:01:41.360 --> 00:01:45.074
the specific methods,
that you need in your application.

27
00:01:45.074 --> 00:01:48.005
By just lodash/map or lodash/get and

28
00:01:48.005 --> 00:01:52.444
then you'll only get that method and
its dependencies, so

29
00:01:52.444 --> 00:01:58.380
it's significantly smaller, but
nobody wants to write code like this.

30
00:01:58.380 --> 00:02:04.090
This is not very fun to do
all this cherry picking,

31
00:02:04.090 --> 00:02:07.100
and let's say you're using six or
seven lodash methods.

32
00:02:07.100 --> 00:02:11.790
You have to import them all,
it's just not a great thing to do,

33
00:02:11.790 --> 00:02:16.240
and what happens when some developer
unwittingly imports all of low dash.

34
00:02:16.240 --> 00:02:17.576
You'd have to have like a lentor or

35
00:02:17.576 --> 00:02:19.381
something to make sure
that doesn't happen.

36
00:02:19.381 --> 00:02:25.018
So instead, there's this plug-in where
you can write your code like this,

37
00:02:25.018 --> 00:02:31.400
however the normal way you'd want to and
then will transpile it down to this.

38
00:02:31.400 --> 00:02:35.240
So one of the key things about Babel

39
00:02:35.240 --> 00:02:40.170
is that like Babel plugins
generally is try to

40
00:02:40.170 --> 00:02:44.940
make the development experience better
without reducing the user experience.

41
00:02:44.940 --> 00:02:47.920
Or sometimes even enhancing
the user experience.

42
00:02:47.920 --> 00:02:52.720
And so, in this case,
it actually like would enhance the users

43
00:02:52.720 --> 00:02:58.050
experience because you wouldn't
accidentally send low dash and the Babel

44
00:02:58.050 --> 00:03:02.286
plugin for low dash just kinda does
that for you automatically it's great.

45
00:03:02.286 --> 00:03:04.849
And if you're not using it, I recommend
that you do, it's really, really good.

46
00:03:07.160 --> 00:03:11.320
Then this one is awesome,
the babel-plugin-module-alias.

47
00:03:11.320 --> 00:03:15.110
So how many people have written imports or

48
00:03:15.110 --> 00:03:19.090
require statements with a bunch
of dots like this before?

49
00:03:19.090 --> 00:03:22.950
Yeah, it's a pain, and
most of the time it's not a huge deal, but

50
00:03:22.950 --> 00:03:27.820
if you have this utils file or
folder that you're using everywhere, what

51
00:03:27.820 --> 00:03:31.590
really stinks is when you move a big group
of files from one place to another and you

52
00:03:31.590 --> 00:03:36.320
have to update all the require statements
or imports, and that is, yeah, no fun.

53
00:03:36.320 --> 00:03:41.680
And so what this allows you
to do is specify aliases for

54
00:03:41.680 --> 00:03:44.900
directories so you can say, hey,
this utils directory right here,

55
00:03:44.900 --> 00:03:50.250
I wanna alias it to open caret,
utils, close caret, or whatever.

56
00:03:50.250 --> 00:03:52.390
Less than, greater than.

57
00:03:52.390 --> 00:03:57.170
And then anytime Babel comes
across an import that uses that,

58
00:03:57.170 --> 00:04:00.040
it's going to update it
with the correct full path.

59
00:04:00.040 --> 00:04:03.870
Or the relative path, and
everything else works just fine.

60
00:04:04.980 --> 00:04:11.900
So that's also quite handy, and just
as kind of a fun tip, instead of utils,

61
00:04:11.900 --> 00:04:16.180
when you're making these things, name this
directory something like to be published.

62
00:04:16.180 --> 00:04:19.340
Something that you're going
to open source eventually,

63
00:04:19.340 --> 00:04:24.270
because one of the reasons that, or one of
the really nice things about publishing

64
00:04:24.270 --> 00:04:27.710
packages to NPM is now you can
install it in your node modules and

65
00:04:27.710 --> 00:04:30.110
you don't have to do this
relative path stuff at all.

66
00:04:30.110 --> 00:04:36.180
And so this kinda gets you halfway
there by giving you those alliases.

67
00:04:36.180 --> 00:04:40.687
Again, this is enhancing
the developer experience without

68
00:04:40.687 --> 00:04:45.118
reducing the user's experience,
which is pretty great.

69
00:04:45.118 --> 00:04:49.873
And then this one is definitely
a must if you're doing React,

70
00:04:49.873 --> 00:04:54.360
especially now with the way
PropTypes have changed.

71
00:04:54.360 --> 00:04:58.270
But in production mode
React.PropTypes.string and

72
00:04:58.270 --> 00:05:01.500
all of this stuff, it actually doesn't
do anything in production mode.

73
00:05:01.500 --> 00:05:06.810
And so all of this text is pretty much
useless when you're in production.

74
00:05:06.810 --> 00:05:10.219
And so this plugin will
remove it from your code, and

75
00:05:10.219 --> 00:05:14.264
so you're not sending those
extra bytes for that extra code.

76
00:05:14.264 --> 00:05:19.096
And also the memory allocation for the
PropTypes object, all that just goes away,

77
00:05:19.096 --> 00:05:22.640
because it's something that
you just don't need at all.

78
00:05:22.640 --> 00:05:24.850
Again, enhancing the developer experience,
and

79
00:05:24.850 --> 00:05:26.950
actually enhancing the user experience,
as well.

80
00:05:28.530 --> 00:05:32.570
So, it's great, any questions or
comments about Babel plugins?

81
00:05:34.110 --> 00:05:35.720
Okay, cool.

82
00:05:35.720 --> 00:05:41.270
So ESLint is super, so ESLint,
there's this plugin for ESLint.

83
00:05:41.270 --> 00:05:42.990
So, sorry, take a state back.

84
00:05:42.990 --> 00:05:47.535
ESLint is a linter for
JavaScript and what that means is,

85
00:05:47.535 --> 00:05:52.555
it will tell you when there's
a problem with your JavaScript,

86
00:05:52.555 --> 00:05:57.972
whether that be stylistic or
actual potential bug in your program.

87
00:05:57.972 --> 00:06:02.734
And this ESLint ships with a whole
bunch of rules to help you with that,

88
00:06:02.734 --> 00:06:05.420
but it's very pluggable.

89
00:06:05.420 --> 00:06:09.338
And one of my favorite plugin's
is this eslint plugin import.

90
00:06:09.338 --> 00:06:12.830
And this is integration with my editor,
I use Atom.

91
00:06:12.830 --> 00:06:15.720
And I have this import for getLogger.

92
00:06:15.720 --> 00:06:18.450
And I got this red line and
my editor is saying, hey,

93
00:06:18.450 --> 00:06:21.030
you have a linting error on that line.

94
00:06:21.030 --> 00:06:23.580
The linting error is coming
from this ESLint plugin.

95
00:06:23.580 --> 00:06:26.120
It says, hey, I'm looking for

96
00:06:26.120 --> 00:06:30.500
this get logger module but
I can't find it anywhere.

97
00:06:30.500 --> 00:06:34.750
And normally you would only
discover that at runtime, but

98
00:06:34.750 --> 00:06:38.790
ESLint can tell you that
statically before anything runs.

99
00:06:38.790 --> 00:06:41.450
And it's using ASTs to do that.

100
00:06:41.450 --> 00:06:43.680
Then there are a whole bunch
of other plugins, too.

101
00:06:43.680 --> 00:06:47.850
There's one that helps you make sure
you're doing promises correctly.

102
00:06:47.850 --> 00:06:52.648
Some helpful things for React,
whether it's the React stuff or

103
00:06:52.648 --> 00:06:56.421
actual, hey,
you shouldn't be using a ref as a string,

104
00:06:56.421 --> 00:07:00.457
because that's something we
shouldn't be doing anymore.

105
00:07:00.457 --> 00:07:02.560
All kinds of that stuff.

106
00:07:02.560 --> 00:07:07.430
There's the security one that's
definitely recommend you give it a look.

107
00:07:07.430 --> 00:07:10.140
Make sure that you're using
JavaScript in a secure way.

108
00:07:10.140 --> 00:07:11.730
And this accessibility one, like,

109
00:07:11.730 --> 00:07:16.000
don't forget your Alt on an image for
in your JSX.

110
00:07:16.000 --> 00:07:20.290
So all of these things
are using ASTs to do their job.

111
00:07:20.290 --> 00:07:22.570
And they do it remarkably well.

112
00:07:22.570 --> 00:07:23.167
It's very cool.

113
00:07:23.167 --> 00:07:25.670
And then, finally, codemods.

114
00:07:27.230 --> 00:07:30.760
Who here has heard of the term codemod?

115
00:07:30.760 --> 00:07:35.460
Okay, so codemods are basically
super awesome find and replace.

116
00:07:35.460 --> 00:07:40.250
So I don't care how good your regex
skills are, you will not do as good as

117
00:07:40.250 --> 00:07:45.470
a codemod for most things.

118
00:07:45.470 --> 00:07:48.898
So there are a whole bunch
of codemods out there.

119
00:07:48.898 --> 00:07:52.786
Basically the idea behind a codemod
is I need to take my code, and

120
00:07:52.786 --> 00:07:55.670
I need to forever change
it to be this new thing.

121
00:07:55.670 --> 00:08:00.100
So I'm migrating to the Jest
testing framework from Ava or

122
00:08:00.100 --> 00:08:02.000
from Mocha or from Jasmine.

123
00:08:02.000 --> 00:08:06.800
So I need to take all my tests and change
them so that they still work the same, but

124
00:08:06.800 --> 00:08:09.380
they're just using the APIs
from the new framework.

125
00:08:09.380 --> 00:08:10.817
Same thing with Ava.

126
00:08:10.817 --> 00:08:16.224
The eact team creates codemods to
automatically update all of Facebook's

127
00:08:16.224 --> 00:08:21.130
30,000 components that they have,
or something like that.

128
00:08:21.130 --> 00:08:22.920
As well as the entire community.

129
00:08:22.920 --> 00:08:27.939
So with React version 15.5,
they just deprecated PropTypes and

130
00:08:27.939 --> 00:08:32.540
put that in a separate package,
same with Create Class.

131
00:08:32.540 --> 00:08:36.380
And they released a codemod,
which magically upgrades all of your code.

132
00:08:36.380 --> 00:08:40.380
So you're using new APIs,
which is pretty sweet.

133
00:08:40.380 --> 00:08:43.541
And then there's this 5to6-codemod if
you're like, okay, I'm done with ES5.

134
00:08:43.541 --> 00:08:46.093
I wanna use ES6 and
this will upgrade stuff and

135
00:08:46.093 --> 00:08:49.560
even can take the prototype pattern and
change it to classes.

136
00:08:49.560 --> 00:08:50.070
It's pretty cool.

