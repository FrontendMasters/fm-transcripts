WEBVTT

1
00:00:00.370 --> 00:00:07.494
&gt;&gt; Speaker 1: You just wanna

2
00:00:07.494 --> 00:00:12.839
watch it?

3
00:00:12.839 --> 00:00:14.982
Yeah, okay, cool.

4
00:00:14.982 --> 00:00:19.930
Because we don't care about the config or
anything.

5
00:00:19.930 --> 00:00:26.640
We can now copy this into
that AST explorer and

6
00:00:26.640 --> 00:00:31.570
we will, I'm just gonna I'll leave
the other examples in there but

7
00:00:31.570 --> 00:00:36.600
I'm just gonna pull this in here as
well as another invalid example.

8
00:00:36.600 --> 00:00:41.228
And we'll know our rule is working
as soon as we see this line

9
00:00:41.228 --> 00:00:43.275
getting an ESLint error.

10
00:00:44.850 --> 00:00:50.510
&gt;&gt; Speaker 1: Okay, so here's, yeah,
let's just go ahead and give this a shot.

11
00:00:50.510 --> 00:00:53.040
We're gonna run into a problem
that we'll have to address, and

12
00:00:53.040 --> 00:00:57.040
that will drastically change
how we accomplish this task.

13
00:00:58.270 --> 00:01:00.639
Well, not drastically, but
it'll change it quite a bit.

14
00:01:01.960 --> 00:01:08.120
So we have all the identifiers and
we know in their console.

15
00:01:08.120 --> 00:01:10.910
But for

16
00:01:10.910 --> 00:01:16.130
this console all these other
requirements are not going to pass,

17
00:01:16.130 --> 00:01:20.010
because this console doesn't have a parent
that's a member expression or any of that.

18
00:01:20.010 --> 00:01:22.070
It's not part of a call expression.

19
00:01:22.070 --> 00:01:26.420
And so we need to find all
nodes that are console, and

20
00:01:26.420 --> 00:01:29.760
then find out if it's being
assigned to a variable.

21
00:01:29.760 --> 00:01:33.230
And then track that variable,
and all that variable's usages.

22
00:01:33.230 --> 00:01:36.533
The same thing actually
would apply if we said,

23
00:01:36.533 --> 00:01:41.001
= require {'console'},
which you can totally do in Node.

24
00:01:41.001 --> 00:01:46.140
Which is kind of weird because console
is global, but you can do that.

25
00:01:46.140 --> 00:01:48.140
And I've actually done it
to make it easier to mock,

26
00:01:48.140 --> 00:01:49.220
which is kind of interesting too.

27
00:01:50.690 --> 00:01:55.390
But yeah, so we're just gonna handle this
case and what we're gonna need to do is

28
00:01:55.390 --> 00:01:59.930
simplify our looks like thing
to what we had before node.name.

29
00:01:59.930 --> 00:02:04.552
Oops, is equal, or not equal to console.

30
00:02:06.614 --> 00:02:07.742
&gt;&gt; Speaker 1: Then we'll return.

31
00:02:10.788 --> 00:02:13.362
&gt;&gt; Speaker 1: Otherwise,
we're going to, yeah, so

32
00:02:13.362 --> 00:02:18.450
we need to get all the references to the
variable that this is being assigned to.

33
00:02:19.600 --> 00:02:25.890
And so we're going to, here let's just
console.log the node really quick.

34
00:02:25.890 --> 00:02:30.180
I'm gonna comment out all this stuff,
just so

35
00:02:30.180 --> 00:02:33.010
we only have one node to worry about for
right now.

36
00:02:34.640 --> 00:02:39.370
And we'll pull up our console and

37
00:02:39.370 --> 00:02:44.200
see, okay, so this has a parent
that is a variable declarator.

38
00:02:44.200 --> 00:02:45.120
Okay, that's good.

39
00:02:46.750 --> 00:02:50.724
So we'll take that variable,
or, let's see.

40
00:02:50.724 --> 00:02:56.390
We're gonna that open again,
look at the parent.

41
00:02:56.390 --> 00:02:58.360
You see that variable declarator?

42
00:02:58.360 --> 00:03:04.100
That variable declarator has a init,
which is the console that is our node.

43
00:03:04.100 --> 00:03:05.700
The init node is us.

44
00:03:05.700 --> 00:03:07.000
And it has an ID.

45
00:03:07.000 --> 00:03:11.376
And that is the thing we need to find
all the references to this variable,

46
00:03:11.376 --> 00:03:12.828
whatever it is called.

47
00:03:15.113 --> 00:03:21.371
&gt;&gt; Speaker 1: So,
&gt;&gt; Speaker 1: Sorry,

48
00:03:21.371 --> 00:03:27.500
yeah, so we're gonna use context from
ESLint to get all references to this node.

49
00:03:27.500 --> 00:03:31.280
So we don't have to traverse it ourselves
and find out all the references,

50
00:03:31.280 --> 00:03:34.480
with babel you have a similar
thing where you can say, okay,

51
00:03:34.480 --> 00:03:38.640
I have this variable I want to find all
the references to that variable in our

52
00:03:38.640 --> 00:03:40.970
program which is really, really nice.

53
00:03:41.970 --> 00:03:46.093
And to do this I should just
leave the console open here.

54
00:03:46.093 --> 00:03:55.230
I'm going to say
context.getDeclaredVariables and

55
00:03:55.230 --> 00:04:00.006
pass in that node.parent.

56
00:04:00.006 --> 00:04:05.120
So this getDeclaredVariables
accepts a variable declarator, and

57
00:04:05.120 --> 00:04:07.540
that's that node.parent, or

58
00:04:07.540 --> 00:04:12.440
it also accepts a variable declaration,
which can have multiple declarators.

59
00:04:12.440 --> 00:04:17.110
And because it accepts a variable
declaration, it will return an array.

60
00:04:17.110 --> 00:04:21.230
Because of variable declaration can
have multiple declarators and so

61
00:04:21.230 --> 00:04:23.990
our array is always gonna be one
because we're just passing in

62
00:04:23.990 --> 00:04:26.770
a variable declaration or declarators.

63
00:04:26.770 --> 00:04:29.112
Lots of words so is that confusing?

64
00:04:29.112 --> 00:04:33.986
That, so it's giving us back
a single a single item because we

65
00:04:33.986 --> 00:04:38.340
only we're passing it
a single variable declarator.

66
00:04:38.340 --> 00:04:42.480
And that single item has
all the information for

67
00:04:42.480 --> 00:04:44.790
where that variable is being
used in our code base.

68
00:04:45.980 --> 00:04:49.080
As you can see, this is why this exercise
would have taken a little bit of time.

69
00:04:49.080 --> 00:04:49.780
Because it's,

70
00:04:49.780 --> 00:04:53.010
this is where you start getting into
a little bit more confusing stuff.

71
00:04:53.010 --> 00:04:55.070
And it's only just begun.

72
00:04:55.070 --> 00:04:57.570
&gt;&gt; Speaker 2: Sorry,
a declarator is like one binding,

73
00:04:57.570 --> 00:05:01.750
one variable binding declaration
could be multiple on the same line.

74
00:05:01.750 --> 00:05:03.787
&gt;&gt; Speaker 1: Yeah,
yeah, let me show this.

75
00:05:03.787 --> 00:05:04.368
&gt;&gt; Speaker 2: I already showed them.

76
00:05:04.368 --> 00:05:06.460
&gt;&gt; Speaker 1: In the AST really quick,
yeah.

77
00:05:06.460 --> 00:05:07.980
That's exactly right.

78
00:05:07.980 --> 00:05:09.370
So we have a variable declaration,

79
00:05:09.370 --> 00:05:12.620
on the left side you see
the highlight when I hover.

80
00:05:12.620 --> 00:05:17.510
And a variable declaration
has a declarations property.

81
00:05:17.510 --> 00:05:20.910
And that can have any number
of variable declarators.

82
00:05:20.910 --> 00:05:26.950
So when we pass, get declared variables,
a variable declarator, then it's

83
00:05:26.950 --> 00:05:32.500
just gonna give us back all the references
to that variable that was declared.

84
00:05:32.500 --> 00:05:35.820
If we gave it a whole variable
declaration, then it will give us

85
00:05:35.820 --> 00:05:40.580
an array of all of the ones that
variable declaration is declaring.

86
00:05:43.790 --> 00:05:46.810
Okay, cool, so
we only care about this first item, so

87
00:05:46.810 --> 00:05:53.150
we're gonna just pop off the first one,
right one, pop out the first, and this

88
00:05:54.620 --> 00:06:00.160
has a references thing
that is very useful to us.

89
00:06:00.160 --> 00:06:04.040
So we'll see the first item in
reference is an identifier.

90
00:06:04.040 --> 00:06:07.940
That is the name, CSL,
that identifier has a parent.

91
00:06:07.940 --> 00:06:09.410
And that is the variable declarator.

92
00:06:09.410 --> 00:06:13.360
So what we're looking at right now,
is the variable declaration itself.

93
00:06:13.360 --> 00:06:17.089
So it's referencing itself,
it includes itself in it's own references.

94
00:06:18.300 --> 00:06:21.620
And so then the second item is
what we're more interested in.

95
00:06:21.620 --> 00:06:23.700
And that is an identifier.

96
00:06:23.700 --> 00:06:27.160
If we look at the parent,
it is part of a member expression.

97
00:06:27.160 --> 00:06:29.370
If we look at that parent,
it's part of a call expression.

98
00:06:29.370 --> 00:06:32.080
So we're looking at this node here.

99
00:06:32.080 --> 00:06:37.600
And if I did a couple of these,
we'll look at, yeah,

100
00:06:37.600 --> 00:06:40.910
we'll just pull up references, and
we're gonna see all of the references.

101
00:06:40.910 --> 00:06:45.870
Every single time I use CSL,
I'm gonna see a reference there, okay?

102
00:06:47.100 --> 00:06:51.324
So here's where things start
to get a little bit trippy,

103
00:06:51.324 --> 00:06:53.883
if they haven't gotten already.

104
00:06:53.883 --> 00:06:55.146
So we're going to, yes?

105
00:06:55.146 --> 00:06:57.790
&gt;&gt; Speaker 2: Question,
are the references scoped?

106
00:06:57.790 --> 00:07:01.030
&gt;&gt; Speaker 1: Yes, so if I were to,
here let's do that actually.

107
00:07:01.030 --> 00:07:07.120
We'll just have one, and then we'll
make a function called scopedThing.

108
00:07:08.150 --> 00:07:12.300
And inside of here we'll
say constCSL = CSL.

109
00:07:14.090 --> 00:07:16.680
And now if we look in our
reference there's still only two,

110
00:07:16.680 --> 00:07:19.910
even though there are three CSLs.

111
00:07:19.910 --> 00:07:24.510
Yeah, that's thank you, ESLint,
for making that possible.

112
00:07:26.100 --> 00:07:32.100
Okay, and this is why regex just is not as
good [LAUGH] for doing stuff like this.

113
00:07:33.230 --> 00:07:37.550
Okay, so let's get the references here.

114
00:07:37.550 --> 00:07:39.030
We're gonna get to.

115
00:07:39.030 --> 00:07:41.520
We'll look at that,
we'll look at the second one.

116
00:07:43.020 --> 00:07:47.370
And then we'll get the ident,
or, yeah, the identifier.

117
00:07:48.680 --> 00:07:50.260
And the parent.

118
00:07:50.260 --> 00:07:52.260
And we're gonna get undefined here.

119
00:07:52.260 --> 00:07:54.140
This is where things
are a little bit tricky.

120
00:07:55.390 --> 00:07:59.000
So let's just walk through what.

121
00:07:59.000 --> 00:08:00.930
what nodes we're touching here.

122
00:08:00.930 --> 00:08:02.516
So we get the references.

123
00:08:02.516 --> 00:08:05.544
These are the two references here.

124
00:08:05.544 --> 00:08:09.060
We're gonna grab index one,
so we'll get this one.

125
00:08:09.060 --> 00:08:11.243
So this reference right there.

126
00:08:11.243 --> 00:08:14.420
And we get the identifier
from that reference.

127
00:08:14.420 --> 00:08:16.300
So that's the CSL right here.

128
00:08:16.300 --> 00:08:20.090
And then we get the parent so that we
can get this full member expression.

129
00:08:21.440 --> 00:08:26.130
The problem is that this relationship
hasn't been established at this

130
00:08:26.130 --> 00:08:30.500
point of ESLint's traversal.

131
00:08:30.500 --> 00:08:35.970
And so the identifier,
even though it exists, that relationship

132
00:08:35.970 --> 00:08:39.830
between the identifier and it's parent
hasn't been established at this point.

133
00:08:39.830 --> 00:08:43.010
And we need to have ESLint
finish traversing everything so

134
00:08:43.010 --> 00:08:48.600
it can establish that relationship, which
make things a little bit complicated,

135
00:08:48.600 --> 00:08:54.050
but it's pretty
straightforward to do that.

136
00:08:54.050 --> 00:08:59.176
Basically what we need to do is
keep a record of all of the usages

137
00:08:59.176 --> 00:09:03.820
of console that we're
interested in looking at later.

138
00:09:03.820 --> 00:09:08.811
And then when the program has finished
being traversed, then we iterate over

139
00:09:08.811 --> 00:09:13.050
those because, at that time,
we'll have access to the parent.

140
00:09:13.050 --> 00:09:15.360
We can validate things.

141
00:09:15.360 --> 00:09:19.300
And this is why this exercise would
have taken a little bit longer.

142
00:09:19.300 --> 00:09:23.220
But you're learning this now, and so next
time you have to face something like this,

143
00:09:23.220 --> 00:09:24.470
you'll know exactly what's going on and

144
00:09:24.470 --> 00:09:27.850
you don't have to deal with
that which is pretty nice.

145
00:09:27.850 --> 00:09:35.330
So how do we know when ESLint is
finished traversing our program?

146
00:09:35.330 --> 00:09:39.670
Well, by default when ESLint hits a node,

147
00:09:39.670 --> 00:09:45.140
it's going to do what's called
it enters traversing the node.

148
00:09:45.140 --> 00:09:47.616
And then when it's finished
reversing that node and

149
00:09:47.616 --> 00:09:50.822
finished dealing with all the other
plug-in's that are using it,

150
00:09:50.822 --> 00:09:54.830
then it's going to exit the traversal of
that node and start traversing more nodes.

151
00:09:54.830 --> 00:10:01.010
And in our case, we know that it's
finished when it exits the program,

152
00:10:01.010 --> 00:10:06.140
and so we're going to make a visitor for
the program.

153
00:10:06.140 --> 00:10:10.120
But we want our visitor to be called
when it exists, so when it's done.

154
00:10:10.120 --> 00:10:14.510
To do that there's some special syntax for
our visitor.

155
00:10:14.510 --> 00:10:17.058
And it is Program:exit and

156
00:10:17.058 --> 00:10:22.880
this visitor will only be called
when the program is done.

157
00:10:22.880 --> 00:10:28.089
So here we can console.log('done') And

158
00:10:28.089 --> 00:10:32.490
console.log('Identifier').

159
00:10:32.490 --> 00:10:37.470
We'll see all the identifiers are logged,
and then done is logged.

160
00:10:37.470 --> 00:10:44.270
Okay with that,
we need to inside of this Program:exit,

161
00:10:44.270 --> 00:10:48.750
the visitor,
we need to have access to all of

162
00:10:48.750 --> 00:10:54.210
the declared variables for the console
nodes that we are interested in.

163
00:10:56.306 --> 00:11:01.160
&gt;&gt; Speaker 1: So
let's go ahead and do that.

164
00:11:02.360 --> 00:11:07.121
So I wanna keep all the logic all
together, and so what we're gonna do

165
00:11:07.121 --> 00:11:11.980
is I'm gonna move all this reporting
stuff into this Program:exit.

166
00:11:11.980 --> 00:11:16.590
And what we're gonna do instead
is we'll have an array up here

167
00:11:16.590 --> 00:11:18.460
called consoleUsages.

168
00:11:20.509 --> 00:11:24.578
&gt;&gt; Speaker 1: And
If it is an identifier called console,

169
00:11:24.578 --> 00:11:30.228
then we're going to push
the node onto the console usages,

170
00:11:30.228 --> 00:11:37.140
and I'll just comment this stuff out
really quick for reference later.

171
00:11:38.840 --> 00:11:43.527
So then if I console.log
the consoleUsages,

172
00:11:45.429 --> 00:11:46.535
&gt;&gt; Speaker 1: We're only gonna get one,

173
00:11:46.535 --> 00:11:47.550
which is totally weird.

174
00:11:47.550 --> 00:11:49.170
Why is that happening?

175
00:11:49.170 --> 00:11:53.080
Right, because I commented all
the other ones out, yeah, that's why.

176
00:11:53.080 --> 00:11:55.460
So we only have one reference,
we'll uncomment those later.

177
00:11:56.640 --> 00:11:57.970
Just make things a little bit easier.

178
00:11:59.260 --> 00:12:04.110
And now at this point I'm
gonna take this big consult

179
00:12:04.110 --> 00:12:08.796
log that we had before,
&gt;&gt; Speaker 1: And

180
00:12:08.796 --> 00:12:14.249
we'll say
consuleusages.forEach(consoleUsage,

181
00:12:14.249 --> 00:12:18.660
or let's see, we can call that identifier.

182
00:12:22.094 --> 00:12:24.486
&gt;&gt; Speaker 1: And say identifier.

183
00:12:24.486 --> 00:12:31.094
And now, before, here let's take that out.

184
00:12:33.767 --> 00:12:38.359
&gt;&gt; Speaker 1: Lots and
lots of consoles all over the place, but

185
00:12:38.359 --> 00:12:41.010
before it was undefined.

186
00:12:41.010 --> 00:12:45.114
Now that we're done, all those bindings
and relationships have been established,

187
00:12:45.114 --> 00:12:48.470
and so now it's actually a number
expression, so we're good.

188
00:12:48.470 --> 00:12:51.210
From here on out,
pretty much everything is the same.

189
00:12:51.210 --> 00:12:55.348
You don't need to worry about whether
relationships have been established or

190
00:12:55.348 --> 00:12:56.484
anything like that.

191
00:12:56.484 --> 00:13:02.250
It's just verifying the AST looks
the way that you want it to.

192
00:13:04.000 --> 00:13:09.250
So let's go ahead and move this stuff to

193
00:13:10.280 --> 00:13:14.910
where it was before, just inside of here.

194
00:13:14.910 --> 00:13:21.290
And instead of,
let's auto format that a little bit.

195
00:13:21.290 --> 00:13:23.980
Instead of node we're gonna
reference identifier,

196
00:13:26.112 --> 00:13:27.370
&gt;&gt; Speaker 1: And put that there.

197
00:13:27.370 --> 00:13:31.592
And then let me uncomment this stuff and
just make sure that all of our other stuff

198
00:13:31.592 --> 00:13:34.060
is still working,
which of course it's not.

199
00:13:35.760 --> 00:13:40.622
And that is because of this line,
we'll just comment that out really quick.

200
00:13:43.675 --> 00:13:48.794
&gt;&gt; Speaker 1: Hold on, references,
event define, let's just get rid of all

201
00:13:48.794 --> 00:13:54.029
this extra nonsense, too, except for
that really important piece.

202
00:13:59.465 --> 00:14:03.936
&gt;&gt; Speaker 1: There, so we essentially,
so far, just refactored it so

203
00:14:03.936 --> 00:14:09.231
that our code runs at a point in time
where any variables that have been

204
00:14:09.231 --> 00:14:16.420
assigned to console have all of their
references' relationships established.

205
00:14:16.420 --> 00:14:22.903
So far we haven't actually
effectively done anything.

206
00:14:22.903 --> 00:14:27.863
Okay cool, so now in addition
to if it looks like these other

207
00:14:27.863 --> 00:14:32.925
invalid use cases,
we're also going to check the reference

208
00:14:32.925 --> 00:14:38.360
here to see if that looks like
this other use case as well.

209
00:14:38.360 --> 00:14:43.090
Yeah, so everything about this piece
right here looks a lot like this,

210
00:14:43.090 --> 00:14:45.860
except the name here is different.

211
00:14:45.860 --> 00:14:52.800
So we want the name for
our identifier to be dynamic in some way.

212
00:14:52.800 --> 00:14:59.010
And what we can do,
is we're going to take most of this stuff

213
00:14:59.010 --> 00:15:05.570
inside of our looksLike, and
pull that out into a function

214
00:15:06.930 --> 00:15:12.580
called isDisallowedFunctionCall.

215
00:15:12.580 --> 00:15:17.977
That'll take an identifier,
&gt;&gt; Speaker 1: And this is going to return

216
00:15:17.977 --> 00:15:24.226
a looksLike from that identifier,
and we'll remove the console.

217
00:15:24.226 --> 00:15:29.722
So if everything else,
it doesn't matter what it's called and

218
00:15:29.722 --> 00:15:33.406
at this point it can be like foobar.info.

219
00:15:33.406 --> 00:15:40.303
And if we were to pass this identifier
in to isDisallowedFunctionCall,

220
00:15:40.303 --> 00:15:43.590
then that would also be reported.

221
00:15:43.590 --> 00:15:49.996
But that allows us to share this logic
between when we're specifying console and

222
00:15:49.996 --> 00:15:54.840
when it's a totally
dynamic thing altogether.

223
00:15:54.840 --> 00:16:00.050
So I'm going to say that this looks like

224
00:16:03.520 --> 00:16:09.600
It has the name of console so
we're still just refactoring, he re.

225
00:16:09.600 --> 00:16:11.750
Well, we kinda wanna
merge these two things.

226
00:16:11.750 --> 00:16:21.580
Well, actually, sorry, at this point
we know that, sorry, sorry, sorry.

227
00:16:22.670 --> 00:16:24.930
I am in the wrong context.

228
00:16:24.930 --> 00:16:27.232
We want to do this, here.

229
00:16:31.553 --> 00:16:35.020
&gt;&gt; Speaker 1: Sorry,
nevermind, I've lost myself.

230
00:16:36.360 --> 00:16:38.120
So we could this a couple of ways.

231
00:16:38.120 --> 00:16:42.560
What I'm gonna do is Just
probably what's the simplest.

232
00:16:42.560 --> 00:16:47.368
Let's say identifier.name is console.

233
00:16:49.815 --> 00:16:51.490
&gt;&gt; Speaker 1: And is looks like.

234
00:16:53.800 --> 00:16:55.840
&gt;&gt; Speaker 1: Is disallowed function call.

235
00:16:59.480 --> 00:17:04.140
Sorry, no, no,
isDisallowedFunctionCall, there we go.

236
00:17:05.570 --> 00:17:08.260
Hold on a minute,
that's not defined, sorry, so

237
00:17:08.260 --> 00:17:11.520
we're gonna need this to
be in scope of our options.

238
00:17:15.633 --> 00:17:20.440
&gt;&gt; Speaker 1: Right here,
there we go, and is totally busted.

239
00:17:24.607 --> 00:17:27.883
&gt;&gt; Speaker 1: Okay, sorry about that.

240
00:17:31.162 --> 00:17:33.420
&gt;&gt; Speaker 1: Now it's still
just a re-factor here.

241
00:17:33.420 --> 00:17:40.275
So what we have effectively done,
Is we simplified this.

242
00:17:40.275 --> 00:17:44.224
This looks like to not verify
whether the node name or

243
00:17:44.224 --> 00:17:48.810
the identifier name is console,
it can be anything.

244
00:17:48.810 --> 00:17:56.009
And we moved that logic to just
a regular part of our if statement test.

245
00:17:58.232 --> 00:18:00.786
&gt;&gt; Speaker 1: So
the reason that we did that is so

246
00:18:00.786 --> 00:18:05.730
that we can verify that this also
is a disallowed function call.

247
00:18:10.009 --> 00:18:16.560
&gt;&gt; Speaker 1: Okay, cool, so now let's
actually do something Kind of useful.

248
00:18:20.445 --> 00:18:27.936
&gt;&gt; Speaker 1: And add more stuff to
what we're trying to accomplish here.

249
00:18:30.715 --> 00:18:32.457
&gt;&gt; Speaker 1: The reason
I keep stopping is,

250
00:18:32.457 --> 00:18:36.010
I keep on thinking of a better way
to do things than I did before.

251
00:18:36.010 --> 00:18:40.300
But okay, so for

252
00:18:40.300 --> 00:18:44.460
every one of these identifiers we have
all of the references to console.

253
00:18:44.460 --> 00:18:48.230
And so that includes these as well,
and these haven't been reassigned.

254
00:18:48.230 --> 00:18:52.550
And that's when we were making this
call to Get.DeclaredVariables.

255
00:18:52.550 --> 00:18:57.140
we were getting this error
because the declared variables of

256
00:18:57.140 --> 00:18:59.200
this member expression.

257
00:18:59.200 --> 00:19:02.360
There are none it's not
a variable declarative.

258
00:19:02.360 --> 00:19:07.850
So we're gonna wrap this,
and if identifier.parent is

259
00:19:07.850 --> 00:19:10.720
equal to a variable declarator.

260
00:19:12.756 --> 00:19:15.770
&gt;&gt; Speaker 1: Then we'll do
this console log here, great.

261
00:19:19.228 --> 00:19:25.040
&gt;&gt; Speaker 1: And in that case,
let's just pop open this.

262
00:19:28.100 --> 00:19:30.450
Sorry, this needs to be dot type.

263
00:19:30.450 --> 00:19:32.900
So the type if parent
is variable declarator.

264
00:19:34.750 --> 00:19:39.710
So now we can start checking
the shape of this identifier to see

265
00:19:39.710 --> 00:19:42.360
whether it is using a disallowed function.

266
00:19:42.360 --> 00:19:43.760
And if it is then we can report that.

267
00:19:45.070 --> 00:19:50.930
Or sorry, of usages of that identifier and
we get those usages from the references.

268
00:19:52.460 --> 00:19:57.350
So because there could be multiple
references, we're going to be iterating

269
00:19:57.350 --> 00:20:02.380
all over all of these references and
doing this checking also.

270
00:20:05.190 --> 00:20:07.310
The also nothing.

271
00:20:07.310 --> 00:20:10.300
We'll just talk about that,
here in a second.

272
00:20:10.300 --> 00:20:13.380
So we'll get the references.

273
00:20:13.380 --> 00:20:19.820
Declared variables dot references,
and we're starting at one here.

274
00:20:19.820 --> 00:20:24.200
Because the first index zero of
these references will include

275
00:20:24.200 --> 00:20:27.410
the variable declared during the first
place and we don't care about that.

276
00:20:27.410 --> 00:20:32.700
So I'm going to slice zero,
or starting at one, so

277
00:20:32.700 --> 00:20:40.390
we just get the, everything from,
just skipping the first one.

278
00:20:40.390 --> 00:20:47.140
So now if we console a log, the references
&gt;&gt; Speaker 1: Well see we only have one.

279
00:20:47.140 --> 00:20:50.480
If I add a couple more than that,
it should work just fine.

280
00:20:50.480 --> 00:20:53.050
Have two, and then three, okay?

281
00:20:54.720 --> 00:21:01.240
Cool, so with these references,
we can iterate over them for each,

282
00:21:02.370 --> 00:21:07.880
and get the reference console.

283
00:21:07.880 --> 00:21:12.960
Log the reference dot identifier and

284
00:21:12.960 --> 00:21:17.140
we have these identifiers that
are referencing those 3 CSL.

285
00:21:19.180 --> 00:21:27.420
And from here we can verify that
this is a disallowed function call.

286
00:21:27.420 --> 00:21:29.060
So it's part of
a disallowed function call.

287
00:21:29.060 --> 00:21:31.270
So let's just verify that manually.

288
00:21:31.270 --> 00:21:34.300
This identifier that we're
looking at here has a parent.

289
00:21:34.300 --> 00:21:37.190
That parent type is remember
an expression that we're looking at here.

290
00:21:37.190 --> 00:21:40.600
And that member expression has a parent
that's a call expression, so so

291
00:21:40.600 --> 00:21:41.870
far so good.

292
00:21:41.870 --> 00:21:48.220
That member expression also has
a property that has a name of log.

293
00:21:49.450 --> 00:21:51.500
So we're, yeah,

294
00:21:51.500 --> 00:21:56.060
it looks like it's going to pass this
is disallowed function call test here.

295
00:21:58.130 --> 00:22:01.200
So we can pass that there,
we'll console log that.

296
00:22:02.780 --> 00:22:04.390
We're going to get three trues.

297
00:22:04.390 --> 00:22:06.770
Let's change this one to stuff.

298
00:22:06.770 --> 00:22:10.600
We'll get two trues and a false because
that's not a disallowed function call.

299
00:22:12.180 --> 00:22:14.059
Great, so
now we turn this into an if statement.

300
00:22:17.177 --> 00:22:23.900
&gt;&gt; Speaker 1: And we do the same thing
in this case that we did for this.

301
00:22:23.900 --> 00:22:24.900
I'll just copy that for now.

302
00:22:27.585 --> 00:22:32.247
&gt;&gt; Speaker 1: Except
the note that we're gonna

303
00:22:32.247 --> 00:22:37.409
report on is going to be the reference

304
00:22:37.409 --> 00:22:42.470
dot identifier dot parent to get.

305
00:22:42.470 --> 00:22:49.130
So we get the reference identifier dot
parent to get the whole member expression.

306
00:22:49.130 --> 00:22:51.990
Dot property to get the property
side of the member expression.

307
00:22:51.990 --> 00:22:53.500
So we're reporting it on the right side.

308
00:22:57.901 --> 00:23:01.217
&gt;&gt; Speaker 1: So I'm glad that I
didn't have you do this exercise,

309
00:23:01.217 --> 00:23:03.880
cuz it probably would have taken forever.

310
00:23:03.880 --> 00:23:05.790
And I think it's more valuable for

311
00:23:05.790 --> 00:23:10.470
you to just see that doing something
like this is totally possible.

312
00:23:10.470 --> 00:23:13.020
We're just dealing with
JavaScript objects.

313
00:23:13.020 --> 00:23:17.290
There is a little bit of quirks with
the fact that we had to wait for

314
00:23:17.290 --> 00:23:23.480
the traversal to finish, before we could
actually see all these relationships.

315
00:23:23.480 --> 00:23:27.320
But outside of that from then on
is just more Java scripts stuff

316
00:23:28.740 --> 00:23:31.260
to make sure you're checking for
the right stuff.

317
00:23:31.260 --> 00:23:36.240
And as wild as people's code gets,
most of the time you should be able to

318
00:23:36.240 --> 00:23:40.060
track everything when people have issues,
yeah.

319
00:23:41.710 --> 00:23:43.150
&gt;&gt; Speaker 2: So
I'm trying to follow all that.

320
00:23:43.150 --> 00:23:47.340
I kind of just spaced
the why you needed to wait.

321
00:23:47.340 --> 00:23:49.490
For the end of the traversal,
could you just reiterate again?

322
00:23:49.490 --> 00:23:54.400
&gt;&gt; Speaker 1: Yeah, yeah, sure, I can
demonstrate that problem again, here.

323
00:23:55.970 --> 00:24:01.500
So if I put this down in here, out here,
we'll need to put this inside of

324
00:24:03.120 --> 00:24:08.125
a check
&gt;&gt; Speaker 1: So

325
00:24:08.125 --> 00:24:14.106
if it's part of a VariableDeclarator,
then we can get the references.

326
00:24:14.106 --> 00:24:17.342
Or sorry,

327
00:24:17.342 --> 00:24:22.900
we would expect that we could get
the references if these didn't blow up.

328
00:24:23.960 --> 00:24:31.290
It's not Identifier,
it is node here, okay.

329
00:24:31.290 --> 00:24:36.910
And we can get the references
we get all the references.

330
00:24:36.910 --> 00:24:41.670
But if let's just pull off
this first one and than

331
00:24:41.670 --> 00:24:46.150
get the identifier from that cause that's
the actual node that it's referencing.

332
00:24:46.150 --> 00:24:48.780
And then try to get the parent from that.

333
00:24:48.780 --> 00:24:51.630
We don't get the parent and

334
00:24:51.630 --> 00:24:55.280
it's because that relationship
between the identifier reference.

335
00:24:55.280 --> 00:24:59.520
And its parent hasn't been established
at this point of the traversal.

336
00:24:59.520 --> 00:25:04.920
So you have to, so that's why we
store this node in console usages.

337
00:25:04.920 --> 00:25:07.640
And then when the program
is exiting traversal,

338
00:25:07.640 --> 00:25:10.000
all those relationships
have been established.

339
00:25:10.000 --> 00:25:16.860
And we can iterate over console usages and
do that verification at that point.

340
00:25:16.860 --> 00:25:20.430
We'll find the same problem in
Babel that we have to overcome.

341
00:25:20.430 --> 00:25:22.900
And we do it in basically, the same way.

342
00:25:22.900 --> 00:25:26.040
It has a slightly different API, but
it's basically the Same concept.

343
00:25:27.560 --> 00:25:32.120
And maybe we'll have time to do that
exercise so you can do this yourself.

344
00:25:34.694 --> 00:25:36.550
&gt;&gt; Speaker 1: Okay, any questions?

345
00:25:36.550 --> 00:25:37.610
Anything from online?

346
00:25:41.212 --> 00:25:44.082
&gt;&gt; Speaker 1: Where can we find context?

347
00:25:44.082 --> 00:25:49.420
Yeah, so think, if you scroll up
you should find it but it is here.

348
00:25:49.420 --> 00:25:52.528
And I will give it to you right now.

349
00:25:55.411 --> 00:25:56.510
&gt;&gt; Speaker 1: There is context.

350
00:25:59.000 --> 00:25:59.500
Thank you.

351
00:26:02.298 --> 00:26:07.002
&gt;&gt; Speaker 1: Okay, great, let's just
go ahead and make sure that this works,

352
00:26:07.002 --> 00:26:08.100
I hope it does.

353
00:26:08.100 --> 00:26:10.010
That would be really sad if I
just went through all that, and

354
00:26:10.010 --> 00:26:10.870
it doesn't work on our tests.

355
00:26:12.230 --> 00:26:13.200
Yay, it does.

356
00:26:13.200 --> 00:26:13.700
That's great.

