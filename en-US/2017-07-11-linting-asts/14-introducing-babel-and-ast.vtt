WEBVTT

1
00:00:00.060 --> 00:00:00.720
&gt;&gt; Kent C Dodds: That is ESLint.

2
00:00:00.720 --> 00:00:02.480
There are more things about ESLints.

3
00:00:02.480 --> 00:00:07.460
Like I said, I'm not giving an exhaustive
list of every feature of these tools.

4
00:00:07.460 --> 00:00:11.220
But hopefully you can take that back or

5
00:00:11.220 --> 00:00:15.220
like, you're learning back to you
teams and improve the code quality of

6
00:00:15.220 --> 00:00:20.900
your projects with the ESLint.

7
00:00:20.900 --> 00:00:23.599
And lots of the same
concepts apply with Babel.

8
00:00:23.599 --> 00:00:28.689
It's just a couple of differences
in the API, and Babel you'll find

9
00:00:28.689 --> 00:00:35.690
is a lot more powerful, especially with
regard to actually manipulating the AST.

10
00:00:35.690 --> 00:00:39.631
So let's close my Twitter and stuff.

11
00:00:39.631 --> 00:00:43.610
And let's see, we have slides over here.

12
00:00:43.610 --> 00:00:49.011
Okay, so let's look at a Babel example,
Babel plugin.

13
00:00:52.386 --> 00:00:56.524
&gt;&gt; Kent C Dodds: So right here,
we have, I'm in AST Explorer, and

14
00:00:56.524 --> 00:00:59.254
when you go into AST Explorer again,

15
00:00:59.254 --> 00:01:03.925
you'll wanna switch from
the espree parser to babylon6, and

16
00:01:03.925 --> 00:01:09.150
your transform will be babelv7,
or sorry, v6, v7 is not out yet.

17
00:01:11.400 --> 00:01:19.500
And with that, you'll be presented with
kind of a default that will plug in and

18
00:01:19.500 --> 00:01:24.671
some code,
yours won't look exactly like this.

19
00:01:24.671 --> 00:01:29.585
So I've got some code here,
I have this git version from a where

20
00:01:29.585 --> 00:01:33.060
I pass a version string, like 3.4.5.

21
00:01:33.060 --> 00:01:37.690
And I expect to get a major
minor in patch here, and

22
00:01:39.030 --> 00:01:42.730
you probably wouldn't actually
want to do this in real life.

23
00:01:42.730 --> 00:01:47.450
But what were going to do is anytime that
I have a RegExpLiteral inside of a loop or

24
00:01:47.450 --> 00:01:50.832
inside of a function somewhere,
I just think to myself,

25
00:01:50.832 --> 00:01:55.412
wouldn't it be nice if I just had it up
there, then I don't have to reallocate

26
00:01:55.412 --> 00:01:59.583
memory every single time I call that
function or something like that.

27
00:01:59.583 --> 00:02:04.486
I expect that JavaScript engines
are smart enough to basically do that for

28
00:02:04.486 --> 00:02:05.839
you under the hood.

29
00:02:05.839 --> 00:02:10.459
But there are some things that JavaScript
engines can't determine statically that we

30
00:02:10.459 --> 00:02:14.950
could that could library-specific like if
you call this function a million times,

31
00:02:14.950 --> 00:02:17.560
it's always gonna give
you the same thing back.

32
00:02:17.560 --> 00:02:22.660
And so you cache that in some way or
something.

33
00:02:22.660 --> 00:02:26.240
Or evaluate it or something.

34
00:02:26.240 --> 00:02:31.350
So, anyway, the idea of hoisting stuff,
though, is not near like React.

35
00:02:31.350 --> 00:02:37.390
There's a plugin for React that will
hoist your JSX that's not dynamic to,

36
00:02:37.390 --> 00:02:40.430
say if I were to do a little
better performance.

37
00:02:40.430 --> 00:02:47.090
So anyway, we're gonna just write a little
plugin that will hoist any reject or

38
00:02:47.090 --> 00:02:51.610
reject p literal to like
the read of our program, and

39
00:02:51.610 --> 00:02:55.350
make sure that it doesn't conflict with
any variables or anything like that.

40
00:02:56.930 --> 00:03:01.230
So let's look at a couple of
the differences of the API.

41
00:03:01.230 --> 00:03:04.790
Before we did module.exports,
now we're doing export default.

42
00:03:04.790 --> 00:03:09.168
So as I mentioned earlier, your Babel
plugins will be transpiled by Babel.

43
00:03:09.168 --> 00:03:12.915
And so you can use whatever you want.

44
00:03:12.915 --> 00:03:17.633
And I'm 99% confident that
the way it's transpiled is

45
00:03:17.633 --> 00:03:22.600
based off of your configuration
in your projects.

46
00:03:22.600 --> 00:03:26.130
So you can use whatever your project's
configured with the Babel RC.

47
00:03:26.130 --> 00:03:28.369
So for us, we can use CSS modules.

48
00:03:28.369 --> 00:03:32.674
Another difference is instead of exporting
an object that has metadata on it and

49
00:03:32.674 --> 00:03:35.210
stuff, you're exporting a function.

50
00:03:35.210 --> 00:03:39.640
And this function returns an object
that has some metadata on it.

51
00:03:39.640 --> 00:03:41.380
And one of those
properties is the visitor.

52
00:03:43.260 --> 00:03:45.060
Similar to ESLint,

53
00:03:45.060 --> 00:03:50.420
you do provide a function that
they call with a utility library.

54
00:03:50.420 --> 00:03:55.200
And ESM provides context and
Babel provides Babel, and this is actually

55
00:03:55.200 --> 00:04:00.760
the same thing that you would get
if you were to require Babel Core.

56
00:04:01.910 --> 00:04:06.060
So these are the exactly the same.

57
00:04:06.060 --> 00:04:10.500
One thing that's really common to use
from Babel Core is Babel Types, and

58
00:04:10.500 --> 00:04:15.370
I'm gonna get the documentation for

59
00:04:15.370 --> 00:04:20.210
this in the chat,
because it is really, really useful.

60
00:04:20.210 --> 00:04:25.340
And this is enormous, but
it lists not all but most of the,

61
00:04:25.340 --> 00:04:30.060
well, it lists out all of the node
types that Babel supports and

62
00:04:30.060 --> 00:04:34.566
many of the functions
that you can call on this

63
00:04:34.566 --> 00:04:40.250
babel.types, which we're destructuring and
assigning to t.

64
00:04:40.250 --> 00:04:47.690
That's a really common thing to just
assign babel types to t in your plug-ins.

65
00:04:47.690 --> 00:04:51.706
And we'll definitely be using those.

66
00:04:51.706 --> 00:04:54.320
And then you can provide a name,
it's not required.

67
00:04:55.600 --> 00:04:57.750
And then this is your visitor.

68
00:04:58.900 --> 00:05:04.790
From visitor on down,
there's only one other slight difference.

69
00:05:04.790 --> 00:05:10.790
Everything else is just nodes and
things, so.

70
00:05:10.790 --> 00:05:13.870
Well, two slight differences, and
we'll see both of those later.

71
00:05:13.870 --> 00:05:16.270
Well, actually we'll see
one of them right now.

72
00:05:16.270 --> 00:05:19.940
So the first one,
we're gonna be wanting to hoist, or

73
00:05:19.940 --> 00:05:23.620
any RegExpLiteral we find,
we wanna hoist it to the top.

74
00:05:23.620 --> 00:05:26.530
And so
I'm gonna create a visitor for that.

75
00:05:27.660 --> 00:05:32.062
And with ESLint, this visitor would
be passed the node, but with Babel,

76
00:05:32.062 --> 00:05:33.556
this is passed the path.

77
00:05:33.556 --> 00:05:37.924
And the path is a special object
that has a lot of context and

78
00:05:37.924 --> 00:05:40.240
a lot of utilities on it.

79
00:05:40.240 --> 00:05:42.120
So let's go ahead and console log that.

80
00:05:48.080 --> 00:05:53.400
So the path has a ton of and

81
00:05:53.400 --> 00:05:57.010
really I don't even know what
hub even means, or data.

82
00:05:57.010 --> 00:06:01.990
Lots of this stuff I haven't even
bumped into because it's just so

83
00:06:01.990 --> 00:06:04.670
full featured, it has so much stuff on it.

84
00:06:04.670 --> 00:06:06.800
We'll be looking at Scope eventually.

85
00:06:06.800 --> 00:06:10.240
Scope is similar to that get
declared variables thing where it'll

86
00:06:10.240 --> 00:06:13.240
give us some scope of our variables.

87
00:06:14.578 --> 00:06:19.850
It does have access to the node.

88
00:06:19.850 --> 00:06:24.850
So this node here is what
we would get in ESLint so

89
00:06:24.850 --> 00:06:28.920
instead of just getting the node,
we get a path that has a node.

90
00:06:28.920 --> 00:06:31.286
And we'll definitely be referencing this.

91
00:06:31.286 --> 00:06:34.225
And then if you look at
the prototype of the path,

92
00:06:34.225 --> 00:06:37.090
it has tons of utility methods on it.

93
00:06:37.090 --> 00:06:43.090
And many of these, actually,
are the same that you have from types,

94
00:06:43.090 --> 00:06:47.125
except these will be
evaluated on the path, so

95
00:06:47.125 --> 00:06:52.505
if I say path.isClassProperty,
that'll tell me whether or

96
00:06:52.505 --> 00:06:56.447
not this path that I
have is a class property.

97
00:06:56.447 --> 00:07:01.090
Yeah, who would've thought there was so
much stuff in JavaScript.

98
00:07:01.090 --> 00:07:02.440
There it is.

99
00:07:02.440 --> 00:07:05.291
Lot of node types.

100
00:07:05.291 --> 00:07:09.840
And then you also have a parent here,
and this is the parent node.

101
00:07:09.840 --> 00:07:14.230
But if you want to have all this
context and stuff for the parent node,

102
00:07:14.230 --> 00:07:16.370
then you would look at the parent path.

103
00:07:16.370 --> 00:07:22.583
And you can keep going up
in the parent path chain.

104
00:07:22.583 --> 00:07:26.630
Yeah, I think that pretty much explores
most of the differences in the APIs.

105
00:07:26.630 --> 00:07:33.189
Anybody have questions about
differences in ESLint versus Babel?

106
00:07:33.189 --> 00:07:36.780
Okay, cool.

107
00:07:36.780 --> 00:07:39.699
Yeah, lots of the knowledge is
transferable, which is nice.

108
00:07:40.850 --> 00:07:46.200
So yeah, what we want to do is

109
00:07:46.200 --> 00:07:53.040
find any RegExp that is a RegExp literal,
and we found it here.

110
00:07:53.040 --> 00:07:58.030
We could potentially
have a situation where

111
00:07:58.030 --> 00:08:03.020
something that's not assigned to any
variable, and we could probably hoist that

112
00:08:04.500 --> 00:08:08.218
But we'll just skip over that for now.

113
00:08:08.218 --> 00:08:12.360
You've seen how we can solidify things a
little bit further, but we'll not do that.

114
00:08:14.140 --> 00:08:21.960
Okay, so we want to get a couple of
things off of this path, and because,

115
00:08:21.960 --> 00:08:26.750
what we need to do, if we were to do this
manually ourselves, well what do we do?

116
00:08:26.750 --> 00:08:34.080
We would say, okay, I'm gonna copy this,
I'll paste it up here, and just in case

117
00:08:34.080 --> 00:08:38.938
there was some other version RegEx in this
scope, I'm gonna give this a unique name.

118
00:08:38.938 --> 00:08:43.430
I'll say _versionRegEx, okay,
now it has a unique name.

119
00:08:43.430 --> 00:08:45.869
And then I'm going to go
down back in here, and

120
00:08:45.869 --> 00:08:49.574
I'm going to find any instance of
where versionRegEx was being used.

121
00:08:49.574 --> 00:08:54.496
And I'll replace it with my new
one that's at the root scope, and

122
00:08:54.496 --> 00:08:58.800
then I'll remove the declaration
of that variable.

123
00:08:58.800 --> 00:09:02.060
So that is kind of the process
that we want to do,

124
00:09:02.060 --> 00:09:04.220
just automatically using Babel.

125
00:09:06.590 --> 00:09:12.900
So let's first generate, or let's see.

126
00:09:13.990 --> 00:09:18.630
Yeah, let's first generate the new
identifier, the unique identifier, for

127
00:09:18.630 --> 00:09:20.530
our new variable that we're gonna create.

128
00:09:21.830 --> 00:09:25.520
And to do that we're going
to get a new identifier.

129
00:09:26.990 --> 00:09:34.070
And we need to get a new identifier
that's unique to the whole program

130
00:09:36.100 --> 00:09:40.060
as well as, yeah, so yeah.

131
00:09:41.060 --> 00:09:44.200
So we need to be able to somehow get
a reference to the whole program so

132
00:09:44.200 --> 00:09:49.350
that we don't conflict with any other
variables that exist in the program.

133
00:09:49.350 --> 00:09:53.840
But in addition to that, it also
needs to be unique to this function.

134
00:09:53.840 --> 00:09:59.740
So let's say we had a, well you'll see
why that's important here in a second.

135
00:09:59.740 --> 00:10:05.480
So we're going to take the path,
&gt;&gt; Kent C Dodds: And

136
00:10:05.480 --> 00:10:08.990
we're going to use that scope property
that we were looking at earlier.

137
00:10:08.990 --> 00:10:14.400
And we're gonna ask the scope
to generate a NewUidIdentifier,

138
00:10:16.140 --> 00:10:19.540
and I think I'm spelling something wrong.

139
00:10:19.540 --> 00:10:23.610
Yeah, it's not new,
it's just generateUidIdentifier.

140
00:10:23.610 --> 00:10:28.360
Then if we console.log the newIdentifier,

141
00:10:28.360 --> 00:10:31.080
then we're gonna see an object,
and this is a node.

142
00:10:31.080 --> 00:10:35.380
Its type is identifier,
its name is temp, _temp.

143
00:10:35.380 --> 00:10:39.612
And if we actually look
at our node types here,

144
00:10:39.612 --> 00:10:43.950
this is type is identifier,
the name is versionRegEx.

145
00:10:43.950 --> 00:10:46.930
It has a couple extra properties,
but for all intents and purposes,

146
00:10:46.930 --> 00:10:50.640
other than those location
in the code properties,

147
00:10:50.640 --> 00:10:55.050
what we just created with this generate
UID identifier is exactly the same.

148
00:10:55.050 --> 00:10:57.420
It is an identifier node,
it's what we made.

149
00:10:59.980 --> 00:11:00.480
Okay, great.

150
00:11:01.774 --> 00:11:06.580
But _temp isn't very useful if
we're looking in our debugging or

151
00:11:06.580 --> 00:11:08.250
something like that.

152
00:11:08.250 --> 00:11:15.220
So it is nice to be able to give it
some sort of name to base things off of.

153
00:11:15.220 --> 00:11:17.840
So I'll just say hi really quick.

154
00:11:17.840 --> 00:11:23.200
And it's gonna base its generated
ID off of what I provide.

155
00:11:23.200 --> 00:11:26.860
So let's go ahead and
get the name of this declared variable.

156
00:11:28.090 --> 00:11:30.849
So let's console log the path.

157
00:11:32.130 --> 00:11:36.490
And we'll see if we look at the parent,
that's our variable declarator.

158
00:11:36.490 --> 00:11:40.270
And look at the ID is gonna be our
identifier which has the name.

159
00:11:41.280 --> 00:11:47.090
So we'll say path.parent.id.name,

160
00:11:47.090 --> 00:11:53.630
and that is the version RegEx that we
want to use to generate our identifier.

161
00:11:53.630 --> 00:11:55.908
Great, so
now we've generated a unique identifier.

162
00:11:55.908 --> 00:12:00.385
And,
&gt;&gt; Kent C Dodds: [SOUND]

163
00:12:00.385 --> 00:12:04.677
This is hard because small screens.

164
00:12:04.677 --> 00:12:11.738
If we had a versionRegex here,
then it's gonna create a versionRegex2.

165
00:12:11.738 --> 00:12:15.716
So that's one really really
handy things about Babel,

166
00:12:15.716 --> 00:12:21.132
is that it's able to understand the whole
scope of the program statically so

167
00:12:21.132 --> 00:12:25.297
that it doesn't generate any code for
us that's broken.

168
00:12:25.297 --> 00:12:27.387
Okay cool.

169
00:12:27.387 --> 00:12:30.710
So we have an identifier.

170
00:12:30.710 --> 00:12:35.608
Now we need to basically take this node
and move it because here we're not

171
00:12:35.608 --> 00:12:39.705
just inspecting things,
we're actually making things and

172
00:12:39.705 --> 00:12:43.905
moving things and removing things,
manipulating this AST.

173
00:12:46.411 --> 00:12:51.747
&gt;&gt; Kent C Dodds: So let's go ahead and
we'll take this new identifier and

174
00:12:51.747 --> 00:12:56.428
basically make a variable
declaration out of it.

175
00:12:58.923 --> 00:13:01.433
&gt;&gt; Kent C Dodds: So
if we look at this versionRegex,

176
00:13:01.433 --> 00:13:06.380
that's a variable declarator, and
we have a variable declaration.

177
00:13:06.380 --> 00:13:10.110
So how do we create a new
variable declaration?

178
00:13:10.110 --> 00:13:11.840
This is where types come in.

179
00:13:11.840 --> 00:13:14.829
So Babel types allows
us to create new nodes.

180
00:13:16.180 --> 00:13:21.411
So we're gonna see our
VariableDeclaration =

181
00:13:21.411 --> 00:13:27.440
t.variableDeclaration, Declaration, okay.

182
00:13:27.440 --> 00:13:30.298
Now this is where you can look in
the docs and see what that does.

183
00:13:30.298 --> 00:13:35.684
VariableDeclaration,
&gt;&gt; Kent C Dodds: And

184
00:13:35.684 --> 00:13:38.323
this is the API.

185
00:13:38.323 --> 00:13:43.438
You pass in a kind, so var, let, or const,
and then you pass in your declarations.

186
00:13:43.438 --> 00:13:47.183
It's an array of variable declarators.

187
00:13:47.183 --> 00:13:51.827
And the t.variableDeclarators, here we go,

188
00:13:51.827 --> 00:13:56.473
that's how you create
a variableDeclarator,

189
00:13:56.473 --> 00:14:00.850
you give it an identifier and an init.

190
00:14:00.850 --> 00:14:02.570
So what to initialize it to,

191
00:14:02.570 --> 00:14:06.720
an expression to initialize this, so
the right side of the equal sign.

192
00:14:08.510 --> 00:14:11.700
So let's go ahead and do that.

193
00:14:11.700 --> 00:14:15.210
The kind that we want,
we'll just start with const here.

194
00:14:15.210 --> 00:14:19.960
And we could expand this further to say,
okay,

195
00:14:19.960 --> 00:14:25.770
I want to use the same one that
the original variable was declared as,

196
00:14:25.770 --> 00:14:28.420
and we can do that here in a little bit.

197
00:14:28.420 --> 00:14:33.340
And yeah, then we'll pass
an array of variable declarators,

198
00:14:33.340 --> 00:14:37.640
so t.variableDeclarator.

199
00:14:37.640 --> 00:14:42.620
And that is gonna take our new identifier
that we just created and an expression.

200
00:14:42.620 --> 00:14:46.463
So I'll just do one really quick and
than we can do a real one.

201
00:14:46.463 --> 00:14:51.602
So a t.string literal high,

202
00:14:51.602 --> 00:14:56.542
and I think missing, yeah.

203
00:14:56.542 --> 00:15:01.299
Okay, so then we have this variable
declaration that's console.logthat.

204
00:15:03.572 --> 00:15:04.900
&gt;&gt; Kent C Dodds: And
see what we're looking at.

205
00:15:04.900 --> 00:15:07.196
So we still haven't
actually manipulated data.

206
00:15:07.196 --> 00:15:11.760
See, we're just, based off the AST we're
generating some new nodes ourselves.

207
00:15:11.760 --> 00:15:15.941
So we have this variable declaration,
it is a constavariable declaration,

208
00:15:15.941 --> 00:15:17.432
it has a few declarations.

209
00:15:17.432 --> 00:15:23.370
And we have an init, and we have an id,
so we've created a node, cool.

210
00:15:23.370 --> 00:15:29.170
So how do we manipulate a JavaScript AST?

211
00:15:29.170 --> 00:15:32.480
Well you kind of just manipulate it.

212
00:15:32.480 --> 00:15:37.600
So where we wanna put
this is in our program.

213
00:15:37.600 --> 00:15:43.660
So we need to find that program node, and
we need to stick something into its body.

214
00:15:43.660 --> 00:15:44.890
And we'll just stick it right at the top.

215
00:15:46.190 --> 00:15:48.860
So let's find that program node.

216
00:15:48.860 --> 00:15:53.740
One of the cool things that the path
allows us to do is find a parent.

217
00:15:54.990 --> 00:16:00.230
And this takes a function so,
which it calls on every parent.

218
00:16:00.230 --> 00:16:07.087
It's very much like jQuery, where you
can find dom notes further up the tree.

219
00:16:07.087 --> 00:16:11.437
We can say t.isProgram(parent), and

220
00:16:11.437 --> 00:16:17.027
this will find us the parent node,
so const program,

221
00:16:17.027 --> 00:16:24.000
the parent node that is the program,
console.log(program).

222
00:16:25.460 --> 00:16:27.740
We found it, hooray!

223
00:16:27.740 --> 00:16:30.428
So just as kind of a shortcut,

224
00:16:30.428 --> 00:16:35.597
because t.isProgram just
accepts a parent parameter.

225
00:16:35.597 --> 00:16:39.950
You'll often see code that
just looks like this.

226
00:16:39.950 --> 00:16:42.787
So find me the parent that isProgram.

227
00:16:45.008 --> 00:16:50.097
&gt;&gt; Kent C Dodds: So we found the program,
now if we look at the program.node.body,

228
00:16:50.097 --> 00:16:54.490
that's gonna be our array
that has all of our entries.

229
00:16:54.490 --> 00:16:59.200
Or all of our code, and we want to
tack something onto the front of it,

230
00:16:59.200 --> 00:17:00.275
and it's just an array.

231
00:17:00.275 --> 00:17:05.355
So how do you tack something
onto the front of an array?

232
00:17:05.355 --> 00:17:08.394
If you're gonna put something on the back,
you push,

233
00:17:08.394 --> 00:17:10.490
on the front it is-
&gt;&gt; Class: Unshift.

234
00:17:10.490 --> 00:17:11.860
&gt;&gt; Kent C Dodds: Unshift, exactly.

235
00:17:13.310 --> 00:17:17.690
Yep, so we will say unshift,
and what are we unshifting?

236
00:17:17.690 --> 00:17:19.340
This variable declaration we just created.

237
00:17:21.530 --> 00:17:25.378
So now if we look we've
actually manipulated the ISD.

238
00:17:25.378 --> 00:17:27.485
Ta-da!

239
00:17:27.485 --> 00:17:32.744
That's cool, but
is not what we want quite yet,

240
00:17:32.744 --> 00:17:37.889
so let's go ahead and
take this a step further.

241
00:17:37.889 --> 00:17:41.837
We can take this version regex and

242
00:17:41.837 --> 00:17:47.759
the parent is the original
variable declarator so

243
00:17:47.759 --> 00:17:55.808
we'll say path.parentPath.remove
we want it out, it's gone.

244
00:17:57.498 --> 00:18:00.880
&gt;&gt; Kent C Dodds: But there's still
two important things missing,

245
00:18:00.880 --> 00:18:04.710
the one that we're creating
isn't the redjacks.

246
00:18:04.710 --> 00:18:09.078
And all the references aren't being
updated to our new variable name.

247
00:18:09.078 --> 00:18:12.110
So let's fix those things really quick.

248
00:18:14.555 --> 00:18:17.640
&gt;&gt; Kent C Dodds: We'll
do the renaming first.

249
00:18:17.640 --> 00:18:21.330
We'll say path.scope.rename.

250
00:18:21.330 --> 00:18:27.270
So and lots of these things,
I'll show you, there's the Babel handbook.

251
00:18:27.270 --> 00:18:31.542
I'll just copy that
over here really quick.

252
00:18:34.660 --> 00:18:41.674
&gt;&gt; Kent C Dodds: Common things like rename
and findParent, and some of these things.

253
00:18:41.674 --> 00:18:44.280
Over time,
you'll learn about these things.

254
00:18:44.280 --> 00:18:48.380
And the Babel handbook has a lot of these,
but something

255
00:18:48.380 --> 00:18:52.130
I find something really useful is just to
log it, and then look at the prototype.

256
00:18:52.130 --> 00:18:55.340
And just read the functions, and
then if it looks interesting,

257
00:18:55.340 --> 00:18:57.530
I'll go try and
find some docs or something.

258
00:18:57.530 --> 00:19:02.450
But rename is one thing that you can
do and it's super duper awesome.

259
00:19:02.450 --> 00:19:07.366
And I'm gonna actually
rename all instances

260
00:19:07.366 --> 00:19:12.290
of our version regex
name to something else.

261
00:19:12.290 --> 00:19:15.800
So first let me take this and
make this a variable.

262
00:19:18.430 --> 00:19:26.005
And then I'm gonna rename all instances of
that name, with our newIdentifier.name.

263
00:19:27.305 --> 00:19:30.504
&gt;&gt; Kent C Dodds: And you can't see that
because we commented that out but,

264
00:19:30.504 --> 00:19:32.520
we leave that where it is.

265
00:19:32.520 --> 00:19:34.320
It is our new name.

266
00:19:34.320 --> 00:19:39.190
Both the exec and the instantiation.

267
00:19:39.190 --> 00:19:42.070
Pretty cool, so
we just have one thing left right?

268
00:19:42.070 --> 00:19:47.240
Just need to initialize this with the same
thing that's with our original reg XP.

269
00:19:48.380 --> 00:19:53.185
And we can actually do that pretty easily
because the reg XP is what we're visiting,

270
00:19:53.185 --> 00:19:54.749
so we just say path.note.

271
00:19:57.501 --> 00:20:02.101
&gt;&gt; Kent C Dodds: And now this code
functions basically the same, except for

272
00:20:02.101 --> 00:20:06.425
the fact that I recently found
out exec is stateful and,

273
00:20:06.425 --> 00:20:09.650
yeah, keeps track of when it was called.

274
00:20:09.650 --> 00:20:13.853
And if you call it once with one thing and
then call it again with something else,

275
00:20:13.853 --> 00:20:16.641
I'm pretty sure it returns
where the one thing was.

276
00:20:16.641 --> 00:20:20.099
It's weird, JavaScript,
it's kind of funny stuff.

277
00:20:20.099 --> 00:20:23.328
So instead you might do something like
test or matches or something like that.

278
00:20:23.328 --> 00:20:29.640
But anyway, yeah, we've written
Babel plugin that hoists our regex.

279
00:20:31.380 --> 00:20:34.080
And it wasn't the most terrible
experience of our lives right?

280
00:20:34.080 --> 00:20:36.468
It was better than visiting
the dentist hopefully?

281
00:20:36.468 --> 00:20:41.219
So just to recap on things,
differences from ESLint,

282
00:20:41.219 --> 00:20:45.366
you're exporting a function,
not an object.

283
00:20:45.366 --> 00:20:49.109
That function accepts
the Babel core object.

284
00:20:49.109 --> 00:20:52.715
The Babel core has a bunch of
things on it that are useful, and

285
00:20:52.715 --> 00:20:54.660
one of those things is types.

286
00:20:54.660 --> 00:20:58.160
You use that quite often
to create new nodes and

287
00:20:58.160 --> 00:21:01.404
to test whether nodes are what you expect.

288
00:21:01.404 --> 00:21:04.810
And then what you return from
that function, I don't need this.

289
00:21:04.810 --> 00:21:09.880
What you return from that function
is a name for your plugin,

290
00:21:09.880 --> 00:21:15.190
and I think that's for
debugging purposes, and visitor object.

291
00:21:15.190 --> 00:21:18.870
And from there, it's pretty much the same
except instead of a node, you get a path.

292
00:21:18.870 --> 00:21:24.530
And that path has a ton of
useful functions you can call.

