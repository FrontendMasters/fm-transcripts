WEBVTT

1
00:00:00.290 --> 00:00:02.320
&gt;&gt; Kent C. Dodds: All righty,
let's do this thing.

2
00:00:02.320 --> 00:00:05.470
So, captain's log is getting cooler and
cooler all the time,

3
00:00:05.470 --> 00:00:09.730
supporting more use cases, and
now we need to support arrow functions.

4
00:00:09.730 --> 00:00:15.300
And, so we can't just do
is function declaration or

5
00:00:15.300 --> 00:00:17.750
a arrow function with
this nice type of API.

6
00:00:17.750 --> 00:00:19.750
We are gonna have to
make our own function,

7
00:00:19.750 --> 00:00:23.020
to find the parent that we're looking for.

8
00:00:23.020 --> 00:00:26.270
And so, let's go ahead and
I'm just going to copy all this,

9
00:00:26.270 --> 00:00:28.420
make sure that we're
on the same page here.

10
00:00:28.420 --> 00:00:35.660
And I'm going to make a new function that
will get us the parent function's name.

11
00:00:35.660 --> 00:00:38.450
So that's what it will be responsible for.

12
00:00:38.450 --> 00:00:40.676
And it can just be at
the root of our module.

13
00:00:40.676 --> 00:00:45.921
So let's say function get,
let's see what I call it, functionName.

14
00:00:45.921 --> 00:00:48.520
And we'll take a path.

15
00:00:48.520 --> 00:00:51.308
Doesn't matter what path,
it can be any old path.

16
00:00:51.308 --> 00:00:57.560
And we're going to get the parentFunction

17
00:00:57.560 --> 00:01:01.735
called path.findParent.

18
00:01:01.735 --> 00:01:07.779
And here, we're gonna get a parent and
we're going to determine whether or

19
00:01:07.779 --> 00:01:12.503
not this parent is a function
that we're interested in, so

20
00:01:12.503 --> 00:01:16.670
a return t., or
actually we can do several things.

21
00:01:16.670 --> 00:01:23.599
We could either say t., is function or we
can actually call directly on the parent.

22
00:01:24.610 --> 00:01:29.740
Say isFunctionDeclaration, and
I'm just gonna leave it at that.

23
00:01:29.740 --> 00:01:32.542
We're doing a pure refactor here first.

24
00:01:32.542 --> 00:01:37.409
And we can say if there's
a parentFunction,

25
00:01:37.409 --> 00:01:43.951
then we will return
the parentFunction.node.id.name.

26
00:01:43.951 --> 00:01:47.955
And otherwise we'll return null.

27
00:01:47.955 --> 00:01:51.726
And so then from here,
we're gonna pass in our path, and

28
00:01:51.726 --> 00:01:55.745
this no parentFunction,
this is the parentFunctionName.

29
00:02:00.320 --> 00:02:01.485
&gt;&gt; Kent C. Dodds: Okay, pure refactor,

30
00:02:01.485 --> 00:02:04.550
everything that was working
before is still working.

31
00:02:04.550 --> 00:02:08.958
I forgot to pull in our new test case
here so let's do that really quick.

32
00:02:11.899 --> 00:02:15.266
&gt;&gt; Kent C. Dodds: And pop that in.

33
00:02:15.266 --> 00:02:18.108
Okay, so multiply the console.log
is getting that, but

34
00:02:18.108 --> 00:02:21.070
it doesn't have the name so
let's add that functionality.

35
00:02:22.070 --> 00:02:27.438
So we're going to say or the parent is,
let's find out what type this is.

36
00:02:29.718 --> 00:02:31.200
&gt;&gt; Kent C. Dodds: ArrowFunctionExpression.

37
00:02:32.970 --> 00:02:34.690
So if it's an ArrowFunctionExpression or

38
00:02:34.690 --> 00:02:38.650
a function declaration,
then that's the parent we're looking for.

39
00:02:38.650 --> 00:02:40.412
The problem here is that,

40
00:02:40.412 --> 00:02:44.680
the ArrowFunctionExpression
does not have an id.

41
00:02:44.680 --> 00:02:45.970
It's null.

42
00:02:45.970 --> 00:02:50.894
And that's just part of the nature
of functionExpressions or

43
00:02:50.894 --> 00:02:54.080
of ArrowFunctionExpressions.

44
00:02:54.080 --> 00:03:01.210
But it does have a name that we can infer,
and that's the variable assignment.

45
00:03:01.210 --> 00:03:06.399
So w could say, if the parentFunction

46
00:03:06.399 --> 00:03:11.110
is an ArrowFunctionExpression.

47
00:03:13.540 --> 00:03:17.518
Then we can do that otherwise, well here,

48
00:03:17.518 --> 00:03:25.484
let's actually we'll put that statement
inside of here, so we don't break stuff.

49
00:03:25.484 --> 00:03:30.190
So, if it's narrow functionExpression
that we're going to

50
00:03:30.190 --> 00:03:33.455
get the name from the variable to.

51
00:03:33.455 --> 00:03:35.690
So we can say, and

52
00:03:35.690 --> 00:03:42.639
the
parentFunction.parentPath.isVariableDecla-

53
00:03:42.639 --> 00:03:43.591
rator.

54
00:03:45.519 --> 00:03:47.660
&gt;&gt; Kent C. Dodds: Cannot
read name of undefined.

55
00:03:47.660 --> 00:03:52.260
We're gonna return,
we'll just return nothing for right now.

56
00:03:53.280 --> 00:03:55.665
So what we're saying here is,

57
00:03:55.665 --> 00:04:00.930
if the parentFunction happens to
be an ArrowFunctionExpression.

58
00:04:00.930 --> 00:04:07.490
Then let's see if the parent, or here,
let's do this with the explorer here.

59
00:04:07.490 --> 00:04:12.850
So our do do do,
our ArrowFunctionExpression's right here,

60
00:04:12.850 --> 00:04:14.490
okay, that is an ArrowFunctionExpression.

61
00:04:14.490 --> 00:04:17.780
Now let's go to the parent, and
see if that's a variable declarator.

62
00:04:17.780 --> 00:04:20.409
Because if it is, then it's going
to have an ID that we can use.

63
00:04:22.000 --> 00:04:26.455
So that being the case, we're going to

64
00:04:26.455 --> 00:04:31.452
return the parenyFunction.parentpath or

65
00:04:31.452 --> 00:04:36.853
we could say parentpath.node so
that we can get

66
00:04:36.853 --> 00:04:42.118
the identifier, or
we can shortcut to that and

67
00:04:42.118 --> 00:04:47.668
just get parent and
that will be the parent node.

68
00:04:47.668 --> 00:04:50.815
And we want the ID.name.

69
00:04:50.815 --> 00:04:52.560
And that solves our problem.

70
00:04:53.620 --> 00:04:58.400
There is another problem here that I
could work through if you want me to,

71
00:04:58.400 --> 00:05:04.110
where if this is an anonymous function,
anonymous arrow function,

72
00:05:04.110 --> 00:05:06.360
then it's gonna run this line of code.

73
00:05:06.360 --> 00:05:10.150
And so maybe what I, actually,
I'll just do that really quick.

74
00:05:10.150 --> 00:05:13.120
So, we'll say else if.

75
00:05:13.120 --> 00:05:16.690
It is an arrowFunctionExpression,
but it doesn't have a variable,

76
00:05:16.690 --> 00:05:19.950
at declarator as its parent,
then we'll just return that thing.

77
00:05:19.950 --> 00:05:21.425
No no wait, we covered that case too.

78
00:05:23.653 --> 00:05:26.400
&gt;&gt; Kent C. Dodds: Okay,
let's go ahead and copy this over here.

79
00:05:28.030 --> 00:05:29.580
Save that.

80
00:05:29.580 --> 00:05:31.790
And our tests are passing, excellent.

81
00:05:31.790 --> 00:05:35.000
Hopefully, you all did
the evaluation feedback and.

82
00:05:36.910 --> 00:05:40.360
Great, so
what questions do you have about that bit?

83
00:05:41.360 --> 00:05:45.870
&gt;&gt; Speaker 2: Is there a function
that identifies all function types?

84
00:05:45.870 --> 00:05:49.321
So you don't have to say,
have a whole bunch of Braintree logic for

85
00:05:49.321 --> 00:05:52.278
anonymous functions or
function expressions?

86
00:05:52.278 --> 00:05:55.828
&gt;&gt; Kent C. Dodds: So just kind of like
a generic, I'm looking for a function.

87
00:05:55.828 --> 00:05:56.522
&gt;&gt; Speaker 2: Yeah.

88
00:05:56.522 --> 00:05:59.250
&gt;&gt; Kent C. Dodds: Yeah,
I don't know of anything that does that.

89
00:05:59.250 --> 00:06:04.420
You might be able to make something
that's kind of generic, but I'm

90
00:06:04.420 --> 00:06:10.110
pretty sure there are only four or five of
them, so you can make a helper to do that.

