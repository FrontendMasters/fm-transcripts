WEBVTT

1
00:00:00.330 --> 00:00:02.780
&gt;&gt; Mike North: All right, so
looking back at the slides,

2
00:00:02.780 --> 00:00:06.740
now we want to add a reasonable
content security policy.

3
00:00:06.740 --> 00:00:09.950
So I'm gonna open up Helmet JS and
look at their example here.

4
00:00:11.100 --> 00:00:15.710
And basically we require this thing,
we bring this in, and

5
00:00:15.710 --> 00:00:18.900
it is a middleware for

6
00:00:18.900 --> 00:00:23.760
connect, which also means that it's
gonna generally work with Express.

7
00:00:23.760 --> 00:00:27.410
So I'll just grab this whole thing

8
00:00:30.370 --> 00:00:33.410
and we'll trim down to what
we really need in here.

9
00:00:33.410 --> 00:00:37.500
Now I made the claim that you really
only need to work in index.js

10
00:00:37.500 --> 00:00:40.146
in the server folder,
so let's start there.

11
00:00:40.146 --> 00:00:45.787
Get rid of that,
get rid of this we don't need it anymore,

12
00:00:45.787 --> 00:00:50.854
all right, so
I wanna paste it right here just to make

13
00:00:50.854 --> 00:00:56.335
it consistent, so
we're grabbing the CSP object.

14
00:00:56.335 --> 00:00:59.875
And effectively, when you're
dealing particularly with Express,

15
00:00:59.875 --> 00:01:03.325
all of these app.use things,
this is a stack of middlewares.

16
00:01:03.325 --> 00:01:07.835
So these think of them as little
pieces of code that each get a chance

17
00:01:07.835 --> 00:01:11.815
to do something, to request as it
kind of filters down and comes in.

18
00:01:11.815 --> 00:01:15.790
And then potentially do something to
respond as it bubbles back up, right?

19
00:01:15.790 --> 00:01:19.660
So we talk about it like it's a stack,
and think of it like a stack of things.

20
00:01:19.660 --> 00:01:23.890
And we kinda bounce all the way
down until we get to the bottom and

21
00:01:23.890 --> 00:01:25.150
everything handles it.

22
00:01:25.150 --> 00:01:28.190
And then we travel all the way
back up through the stack, and

23
00:01:28.190 --> 00:01:30.240
ultimately return the value.

24
00:01:30.240 --> 00:01:34.300
So because of that, we gotta pick
kinda where we want this to go.

25
00:01:34.300 --> 00:01:39.630
And you want your CSP to be wherever
any of the other headers you have are.

26
00:01:39.630 --> 00:01:46.060
And I recognize cores as something that
deals with headers, so we can do that.

27
00:01:46.060 --> 00:01:49.890
Now if you needed like a value
from a cookie or something,

28
00:01:49.890 --> 00:01:52.570
like when we talk about
cross-site request forgery.

29
00:01:52.570 --> 00:01:55.660
You might want to say, well this is
something that like extracts the cookie

30
00:01:55.660 --> 00:01:58.370
out of a header and
gives me a reasonable value for it.

31
00:01:58.370 --> 00:02:02.790
That might be a reason to sort of say,
well let's deal with cookies first.

32
00:02:02.790 --> 00:02:06.520
And then now I can access
the cookie values easily and

33
00:02:06.520 --> 00:02:08.480
because I need those for something.

34
00:02:09.960 --> 00:02:15.670
All right, so the way I like to do this
is there are a bunch of options here,

35
00:02:15.670 --> 00:02:19.030
a lot of them are worth looking at but
we don't need them for

36
00:02:19.030 --> 00:02:21.540
this first intro to this library.

37
00:02:21.540 --> 00:02:23.990
I'm gonna leave report only as true.

38
00:02:25.020 --> 00:02:28.736
This basically means that it's not
gonna block anything from working, but

39
00:02:28.736 --> 00:02:30.100
it's gonna yell at me.

40
00:02:32.250 --> 00:02:37.430
Note that we have this report URI thing
that's available in the configuration for

41
00:02:37.430 --> 00:02:38.720
our CSP headers.

42
00:02:38.720 --> 00:02:41.910
So what this means is you
can specify an end point or

43
00:02:41.910 --> 00:02:46.100
errors will be sent from
browsers that detect violations.

44
00:02:47.260 --> 00:02:52.300
This can be used for what some people
call a dynamic kill switch, where you

45
00:02:53.670 --> 00:03:01.480
basically, in the event that you get
information about a CSP violation.

46
00:03:01.480 --> 00:03:06.070
You can pass along with that
some safe indication that can

47
00:03:06.070 --> 00:03:09.870
be used to find that user's session and
essentially terminate them right away.

48
00:03:11.270 --> 00:03:15.310
Essentially logging them out
if any CSP thing happens and

49
00:03:15.310 --> 00:03:20.210
triggering some escalation in whatever
security management software you use.

50
00:03:20.210 --> 00:03:21.310
This is a good place to hook in.

51
00:03:22.360 --> 00:03:27.492
The downside is, it does give us some

52
00:03:27.492 --> 00:03:34.623
ability to figure out
status about current users.

53
00:03:34.623 --> 00:03:39.646
It bleeds information out about domains
that our code is not executing on,

54
00:03:39.646 --> 00:03:42.390
which potentially we could use.

55
00:03:42.390 --> 00:03:47.070
So for example, if we tried to
request an asset from Facebook,

56
00:03:48.510 --> 00:03:52.860
and we were able to put our own
report uri violation there.

57
00:03:52.860 --> 00:03:55.560
So say I get you to click on a link and
go to this page.

58
00:03:55.560 --> 00:03:59.250
And now you try to access Facebook.

59
00:03:59.250 --> 00:04:02.310
I can get some information about,
were you allowed to see that?

60
00:04:02.310 --> 00:04:03.600
Were you logged in or not?

61
00:04:03.600 --> 00:04:07.270
So we can kinda infer by
whether a request was sent out,

62
00:04:07.270 --> 00:04:08.600
what is this user allowed to do or not.

63
00:04:10.520 --> 00:04:15.610
So I wanna not deal with objects,
we can leave that as is actually.

64
00:04:15.610 --> 00:04:19.530
Sandbox, this has to do with iframes.

65
00:04:19.530 --> 00:04:24.570
So you can only permit iframes that
have the Sandbox attribute on them.

66
00:04:24.570 --> 00:04:29.870
Which would say, you're not allowed
to cause navigation in the top frame.

67
00:04:29.870 --> 00:04:32.170
You're not allowed to open
up post message channels.

68
00:04:32.170 --> 00:04:34.430
You're not allowed to run scripts, right?

69
00:04:34.430 --> 00:04:38.820
You can limit what an iframe can do, and
this would say well, we can have iframes,

70
00:04:38.820 --> 00:04:41.439
but only if they are at
least this restrictive.

71
00:04:42.830 --> 00:04:46.510
Image source, we're going to say that
falls back to our default source,

72
00:04:46.510 --> 00:04:47.910
that's fine.

73
00:04:47.910 --> 00:04:51.480
Font source we're gonna need,
we'll leave self in there,

74
00:04:51.480 --> 00:04:53.140
that's probably a good practice.

75
00:04:53.140 --> 00:04:58.220
And we're gonna add data; cuz we'll find
that we've got a base 64 in coded one.

76
00:04:58.220 --> 00:05:01.580
I'll actually get rid of that just so
we can see the error.

77
00:05:02.860 --> 00:05:04.990
And we can get rid of unsafe-inline.

78
00:05:04.990 --> 00:05:08.350
Let's see if we can get away
with not including that,

79
00:05:08.350 --> 00:05:10.890
we certainly don't need this.

80
00:05:15.456 --> 00:05:17.790
&gt;&gt; Mike North: All right, let's try it.

81
00:05:17.790 --> 00:05:19.830
So I'm gonna bring our app
back into the picture.

82
00:05:25.531 --> 00:05:27.970
&gt;&gt; Mike North: And
this is where you wanna open up Dev Tools.

83
00:05:29.880 --> 00:05:30.820
&gt;&gt; Mike North: Refresh.

84
00:05:31.820 --> 00:05:33.378
We're gonna stay on authenticated now.

85
00:05:33.378 --> 00:05:36.110
All right, so
you see we got a bunch of errors here.

86
00:05:37.990 --> 00:05:40.199
So let's just stop up at the top.

87
00:05:40.199 --> 00:05:45.070
It says Sandbox is ignored when
delivered in a report only property.

88
00:05:45.070 --> 00:05:46.010
Okay, we'll get rid of that.

89
00:05:48.492 --> 00:05:53.240
&gt;&gt; Mike North: And we'll refresh again,
a hard refresh, so we don't hit our cache.

90
00:05:53.240 --> 00:05:54.529
I'm still preserving my log.

91
00:05:58.125 --> 00:05:59.620
&gt;&gt; Mike North: There we go.

92
00:05:59.620 --> 00:06:03.650
So upgrade-insecure-requests is ignored
when delivered in a report-only policy.

93
00:06:03.650 --> 00:06:06.600
That's fine, we'll leave that,
it'll disappear.

94
00:06:06.600 --> 00:06:10.260
So default-src, blah, blah, blah.

95
00:06:10.260 --> 00:06:13.864
It was delivered in report-only mode,
but does not support a report-uri.

96
00:06:14.910 --> 00:06:18.542
Let's see what happens when we
get out of report only mode.

97
00:06:20.902 --> 00:06:29.578
&gt;&gt; Mike North: All right,
&gt;&gt; Mike North: So

98
00:06:29.578 --> 00:06:32.580
now you see, stuff's breaking down.

99
00:06:32.580 --> 00:06:37.960
The browser has obviously refused to do
some things that it was doing before.

100
00:06:37.960 --> 00:06:40.460
It refused to load this style sheet

101
00:06:40.460 --> 00:06:43.210
because it violates
the content security policy.

102
00:06:43.210 --> 00:06:44.950
And it states my policy right there.

103
00:06:48.171 --> 00:06:49.995
&gt;&gt; Mike North: Style-src
was explicitly set, so

104
00:06:49.995 --> 00:06:51.949
default-src was used as a fallback.

105
00:06:53.460 --> 00:06:58.880
Sorry, it was not explicitly set so
default source is used as a fall back.

106
00:06:58.880 --> 00:07:03.570
So we can add into default
sources self is added there.

107
00:07:05.538 --> 00:07:12.840
&gt;&gt; Mike North: I know what I
&gt;&gt; Mike North: That's interesting.

108
00:07:12.840 --> 00:07:20.380
I would have expected self to work, but
no matter, we can just add it here.

109
00:07:20.380 --> 00:07:27.040
Let me look at the policy I asked you to
implement, it might the unsafe inline.

110
00:07:28.580 --> 00:07:29.430
So let's add that.

111
00:07:34.048 --> 00:07:37.200
&gt;&gt; Mike North: And
self must be in those quotes,

112
00:07:37.200 --> 00:07:42.053
it has to be in the CSP
header value between quotes.

113
00:07:50.316 --> 00:07:55.976
&gt;&gt; Mike North: So
something crashed the app,

114
00:07:55.976 --> 00:08:01.199
let's see what it could be,

115
00:08:01.199 --> 00:08:05.779
styleSrc, objectSrc.

116
00:08:10.466 --> 00:08:11.870
&gt;&gt; Mike North: Problem was what?

117
00:08:16.548 --> 00:08:19.500
&gt;&gt; Mike North: It must be quoted,
unsafe-inline must be quoted.

118
00:08:24.186 --> 00:08:33.225
&gt;&gt; Mike North: Okay,
&gt;&gt; Mike North: Do a hard refresh,

119
00:08:33.225 --> 00:08:34.800
see if we get a new policy.

120
00:08:39.773 --> 00:08:41.244
&gt;&gt; Mike North: Let's try our lvh.me

121
00:08:54.266 --> 00:08:55.046
&gt;&gt; Mike North: All right,

122
00:08:55.046 --> 00:08:59.805
I'm just gonna continue to just implement
the CSP that I asked you to do,

123
00:08:59.805 --> 00:09:04.329
which is style source self, unsafe,
inline, font source is data,

124
00:09:04.329 --> 00:09:06.970
and default source is only self.

125
00:09:06.970 --> 00:09:11.910
So default source is, sorry,
I lost my place, default source is self.

126
00:09:14.080 --> 00:09:15.740
Font source is data.

127
00:09:17.370 --> 00:09:18.850
We'll take out the object source.

128
00:09:18.850 --> 00:09:20.799
Take out this, take out this.

129
00:09:26.466 --> 00:09:28.177
&gt;&gt; Mike North: I'm gonna
in a second try to stop and

130
00:09:28.177 --> 00:09:31.550
restart my server just to
make sure all that works.

131
00:09:31.550 --> 00:09:36.488
I had to have,
&gt;&gt; Mike North: Yep,

132
00:09:36.488 --> 00:09:40.309
it looks like I'm on there,
maybe I just need to stop and restart.

133
00:09:41.658 --> 00:09:47.452
&gt;&gt; Mike North: There

134
00:09:47.452 --> 00:09:54.406
we go.

135
00:09:54.406 --> 00:09:56.720
So this is why I'd advise
you test a couple domains.

136
00:09:56.720 --> 00:10:01.420
Sometimes this stuff sticks
into the browser and basically,

137
00:10:01.420 --> 00:10:05.020
you gotta kick the cache
to make sure it works.

138
00:10:05.020 --> 00:10:08.230
So if we look at our
network request here for

139
00:10:08.230 --> 00:10:13.690
the document, we can look down at
the headers, the response headers.

140
00:10:13.690 --> 00:10:16.690
And you can see,
here's our content security policy.

141
00:10:16.690 --> 00:10:20.500
And effectively, this little
package that we added made it so

142
00:10:20.500 --> 00:10:23.200
that we only permit the things
that we really want to permit.

143
00:10:25.560 --> 00:10:32.120
I think there's, so
I'm using inline styles on some elements.

144
00:10:32.120 --> 00:10:35.646
On a dom element, for example,
saying style equals something,

145
00:10:35.646 --> 00:10:39.040
that would be something I should
probably get rid of, right?

146
00:10:39.040 --> 00:10:44.070
Cuz if I can forbid it entirely
within this app, I can

147
00:10:44.070 --> 00:10:49.180
now basically eliminate a possible
cross site scripting vector entirely.

148
00:10:50.390 --> 00:10:53.750
And it's gonna as far as CSS
practice to do that anyway.

149
00:10:53.750 --> 00:10:58.810
So, what we've effectively done here is
we've allowed our view library to work for

150
00:10:58.810 --> 00:11:06.294
us by telling it to escape
any untrusted user input.

151
00:11:06.294 --> 00:11:11.410
Ad we have added a content
security policy header,

152
00:11:11.410 --> 00:11:15.320
so that basically you can't inject
arbitrary code into this thing.

153
00:11:15.320 --> 00:11:20.450
For example, that cross site script
injection that I did earlier

154
00:11:20.450 --> 00:11:25.630
on Carnegie Mellon's website,
that would not have worked.

155
00:11:25.630 --> 00:11:28.200
Now of course,
because that was over plain http,

156
00:11:28.200 --> 00:11:33.190
I could have modified that CSP
as it was going over the wire.

157
00:11:33.190 --> 00:11:37.400
And basically said to the browser,
yeah you can trust anything.

158
00:11:37.400 --> 00:11:41.270
That would absolutely be the kind of
thing that these tools like the man

159
00:11:41.270 --> 00:11:44.440
in the middle framework,
that'll just strip that header out and

160
00:11:44.440 --> 00:11:46.910
the browser will never get it.

161
00:11:46.910 --> 00:11:49.810
So obviously we have to go
a couple steps further here.

