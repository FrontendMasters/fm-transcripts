WEBVTT

1
00:00:00.000 --> 00:00:00.596
&gt;&gt; Mike North: All right, so

2
00:00:00.596 --> 00:00:03.440
let's talk about the TLS
handshake in a different way.

3
00:00:03.440 --> 00:00:04.260
I like chat bubbles.

4
00:00:04.260 --> 00:00:08.050
So the client says, I'd like to
communicate securely with you, server.

5
00:00:08.050 --> 00:00:11.891
And I understand the following ciphers,
they're called orange, whiskey,

6
00:00:11.891 --> 00:00:13.250
and cherry.

7
00:00:13.250 --> 00:00:16.990
So the server says, well,
amongst those options,

8
00:00:16.990 --> 00:00:21.843
I support whiskey and it is the most
secure of the ones that we share.

9
00:00:21.843 --> 00:00:24.012
So we'll use that in the future,

10
00:00:24.012 --> 00:00:28.680
when we start communicating
securely with that session key.

11
00:00:28.680 --> 00:00:32.520
By the way, here's my certificate,
it is signed by someone you trust.

12
00:00:32.520 --> 00:00:39.010
So check me out, and if all looks good
you may continue communicating with me.

13
00:00:39.010 --> 00:00:41.489
And server delivers it's public key,

14
00:00:41.489 --> 00:00:44.650
which enables the client
to send it some secrets.

15
00:00:44.650 --> 00:00:48.980
The client says, yes your certificate
checks out the way it does this.

16
00:00:50.410 --> 00:00:54.208
It will compare that certificate
to some trusted roots that come

17
00:00:54.208 --> 00:00:56.610
with your operating system or browser.

18
00:00:56.610 --> 00:01:00.088
And these are the things like
a Comodo root certificate,

19
00:01:00.088 --> 00:01:02.906
right, Apple has a root certificate.

20
00:01:02.906 --> 00:01:08.538
These are basically,
people who we trust to validate and

21
00:01:08.538 --> 00:01:13.010
vet owners of certificates they authorize.

22
00:01:13.010 --> 00:01:16.371
So if you say,
I trust a Comoda root certificate,

23
00:01:16.371 --> 00:01:20.580
you trust anything that it signs.
&gt;&gt; Mike North: And

24
00:01:20.580 --> 00:01:26.600
that allows them to distribute things,
that other users will trust.

25
00:01:26.600 --> 00:01:29.257
So if you check,
if you like the certificate,

26
00:01:29.257 --> 00:01:31.450
then you can proceed to the next step.

27
00:01:31.450 --> 00:01:34.790
So a night is for the client to
generate the big random number.

28
00:01:34.790 --> 00:01:36.977
The session key encrypted
with the public key, so

29
00:01:36.977 --> 00:01:38.860
the server is the only
one that can read it.

30
00:01:38.860 --> 00:01:44.110
It never leaves the client except
when encrypted by that public key.

31
00:01:44.110 --> 00:01:48.574
And at this point, it basically announces
that it is done with plain communication,

32
00:01:48.574 --> 00:01:50.186
unencrypted communication.

33
00:01:50.186 --> 00:01:55.382
From this point on,
it's gonna use the whiskey algorithm

34
00:01:55.382 --> 00:02:00.380
with the symmetric key of
whatever that big number was.

35
00:02:01.775 --> 00:02:06.540
Server agrees, and then it begins
encrypted communication at which point we

36
00:02:06.540 --> 00:02:08.750
have completed the TLS handshake.

37
00:02:08.750 --> 00:02:11.588
So the takeaway here, is the public and

38
00:02:11.588 --> 00:02:17.010
private keys you generate that's just for
the key exchange.

39
00:02:17.010 --> 00:02:20.148
All of the other stuff is
done by symmetric encryption,

40
00:02:20.148 --> 00:02:23.020
because it's must faster
it can encrypt content of

41
00:02:23.020 --> 00:02:25.931
an arbitrary length.
&gt;&gt; Mike North: And

42
00:02:25.931 --> 00:02:29.640
it's better to just use those
disposable keys back and forth, right?

