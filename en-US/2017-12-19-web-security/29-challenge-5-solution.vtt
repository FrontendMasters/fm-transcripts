WEBVTT

1
00:00:00.310 --> 00:00:03.650
&gt;&gt; Mike North: So we're going to go
through the process of adding CSRF

2
00:00:03.650 --> 00:00:06.050
protection to this app.

3
00:00:06.050 --> 00:00:07.470
And to do so,

4
00:00:07.470 --> 00:00:12.590
we're going to use a library that's
already been installed called CSURF.

5
00:00:13.830 --> 00:00:17.400
It is maintained by the Express team,
right.

6
00:00:17.400 --> 00:00:20.000
So that's the same people
that make the framework.

7
00:00:20.000 --> 00:00:22.460
It's already installed, I'm just going
through the process of adding it.

8
00:00:22.460 --> 00:00:25.690
The first thing you're gonna
do is import the library.

9
00:00:26.730 --> 00:00:28.550
Again, it's been installed.

10
00:00:28.550 --> 00:00:31.022
So when you've got all the dependencies,
you got this.

11
00:00:33.736 --> 00:00:38.219
&gt;&gt; Mike North: So there's the library,
the second thing we end up doing here is,

12
00:00:38.219 --> 00:00:42.622
if we go down, we're going to
basically create this thing here,

13
00:00:42.622 --> 00:00:45.121
it is a CSRF Protection middleware.

14
00:00:47.808 --> 00:00:54.100
&gt;&gt; Mike North: So we're gonna put that
in here and I'll just leave that there.

15
00:00:55.330 --> 00:01:02.791
And at this point we can use this in
both of the routes of interest here.

16
00:01:02.791 --> 00:01:07.540
We can add it to this get request and
that is what's generating the form.

17
00:01:07.540 --> 00:01:08.910
And we can use it here as well,

18
00:01:08.910 --> 00:01:14.530
this is what's actually causing
the funds transfer to take place.

19
00:01:14.530 --> 00:01:18.900
At this point now if we look at this
documentation, we have the ability to get

20
00:01:18.900 --> 00:01:23.890
this value off of the request object,
req.csrfToken.

21
00:01:23.890 --> 00:01:26.790
So we want to have that
available inside our template.

22
00:01:26.790 --> 00:01:28.880
So essentially we come down here.

23
00:01:28.880 --> 00:01:30.156
This is not using the same.

24
00:01:30.156 --> 00:01:32.474
This is handlebar style but

25
00:01:32.474 --> 00:01:37.930
we're able to basically place
the csrfToken in a hidden input.

26
00:01:37.930 --> 00:01:42.325
So that it becomes part of the form
post data that we receive when the funds

27
00:01:42.325 --> 00:01:44.260
transfer takes place.

28
00:01:44.260 --> 00:01:48.910
You can only see this if your code
that's running inside this frame, and

29
00:01:48.910 --> 00:01:50.198
we can pull that, right?

30
00:01:50.198 --> 00:01:56.130
So we will look down here.

31
00:01:56.130 --> 00:01:59.200
This is where the title and
the accounts and

32
00:01:59.200 --> 00:02:02.390
all that are passed to the template and
we can do the same thing here,

33
00:02:02.390 --> 00:02:04.860
basically passing the CSRF token along for
the ride.

34
00:02:06.050 --> 00:02:10.330
Over here in the template for this form,
we can now go all the way up at

35
00:02:10.330 --> 00:02:15.454
the top just so it's easy to find,
just inside the form tag here.

36
00:02:15.454 --> 00:02:21.130
We're gonna add an input that is hidden,
and

37
00:02:21.130 --> 00:02:25.220
it's name, I'm just gonna follow
their exact example actually.

38
00:02:25.220 --> 00:02:28.640
Just to ensure that their library
sees what it expects to see.

39
00:02:31.420 --> 00:02:37.620
Instead of this, we're just
gonnareplace it with the equivalent

40
00:02:38.630 --> 00:02:42.920
in our EJS thing, EJS view library.

41
00:02:42.920 --> 00:02:47.630
So now when I render this form,
and it's not started.

42
00:02:47.630 --> 00:02:50.960
When I render the form I should see an
additional field added, and we should be

43
00:02:50.960 --> 00:02:55.329
able to kinda inspect element and see that
we've done has had some sort of an effect.

44
00:02:57.560 --> 00:02:58.660
What are you complaining about?

45
00:03:00.140 --> 00:03:02.090
CSRF is not defined.

46
00:03:02.090 --> 00:03:04.710
Maybe it's because I called this csurf.

47
00:03:04.710 --> 00:03:09.100
And down here,
there's a little spelling error.

48
00:03:13.260 --> 00:03:16.729
And there's a disk error, but
when I refresh it will be fine.

49
00:03:18.830 --> 00:03:19.750
There we go.

50
00:03:19.750 --> 00:03:24.040
Okay, so now if we go to this
transfers page and we inspect element

51
00:03:24.040 --> 00:03:28.320
on this form and go right up to the top,
right under the form open tag.

52
00:03:28.320 --> 00:03:30.570
We should be able to see something new and
there it is.

53
00:03:30.570 --> 00:03:37.470
This is our unpredictably
changing non-reusable token.

54
00:03:37.470 --> 00:03:43.210
And if I refresh again, starts with vSW
right now and now it's starts with LEO.

55
00:03:43.210 --> 00:03:44.840
It's a new value every single time.

56
00:03:46.350 --> 00:03:48.950
So we can go back here and

57
00:03:48.950 --> 00:03:53.124
now actually, let's see what we have
to do for processing and protection.

58
00:03:53.124 --> 00:03:55.800
And maybe that it just kinda works,
let's see.

59
00:03:55.800 --> 00:03:57.200
In process,

60
00:03:57.200 --> 00:04:02.250
looks like we're only allowed in in
the event that the CSRF token is there.

61
00:04:02.250 --> 00:04:05.110
Can anyone think of how I might test
to make sure that this is effective,

62
00:04:05.110 --> 00:04:08.060
short of going to our JS Bin?

63
00:04:09.690 --> 00:04:13.790
What if I just messed this up?

64
00:04:13.790 --> 00:04:17.795
Delete a big chunk of it, Save.

65
00:04:17.795 --> 00:04:20.449
Try to send $99 to that account.

66
00:04:20.449 --> 00:04:22.940
That's getting a little low.

67
00:04:22.940 --> 00:04:24.720
Transfer funds.

68
00:04:24.720 --> 00:04:25.990
Invalid csrf token.

69
00:04:27.160 --> 00:04:30.830
So now we're sort of insulated
against that type of attack.

70
00:04:30.830 --> 00:04:32.650
Let me go back and make sure so.

71
00:04:34.610 --> 00:04:40.949
I hope to fix this login issue soon,
but let me go back to our JS Bin for

72
00:04:40.949 --> 00:04:45.900
example, and I think it was this one here.

73
00:04:45.900 --> 00:04:50.659
Yep, and
now when we basically try to run it,

74
00:04:50.659 --> 00:04:54.427
we should see an error of some sort.

75
00:04:56.335 --> 00:04:56.835
&gt;&gt; Mike North: Run.

76
00:05:00.495 --> 00:05:03.420
&gt;&gt; Mike North: Let me just make
sure I'm getting the right, yep.

77
00:05:03.420 --> 00:05:04.330
This is the runner.

78
00:05:05.670 --> 00:05:07.160
I just wanna see the right errors here.

79
00:05:09.880 --> 00:05:10.890
There we go.

80
00:05:10.890 --> 00:05:16.220
So our cross-site scripting attack,
sorry our CSRF attack no longer works.

81
00:05:16.220 --> 00:05:22.110
If we look at the actual response that
the user gets from this, it's the same.

82
00:05:23.600 --> 00:05:26.500
This is still not a great response,
by the way.

83
00:05:26.500 --> 00:05:30.088
You're showing a stack trace where it's
telling people a lot about the internals

84
00:05:30.088 --> 00:05:31.470
of our system here.

85
00:05:31.470 --> 00:05:35.930
So you would want to basically,
the best way to handle this kind of thing,

86
00:05:35.930 --> 00:05:38.480
especially for a CSRF token issue,

87
00:05:38.480 --> 00:05:43.190
Is to send the user to a page that says,
basically, your page is broken.

88
00:05:44.910 --> 00:05:49.290
Something something, you abused the back
button, please do a hard refresh and

89
00:05:49.290 --> 00:05:53.010
you'll begin a new request to our
server and you'll get a new CSRF token.

90
00:05:53.010 --> 00:05:56.810
So anytime you've hit the back button and
things have broken,

91
00:05:56.810 --> 00:05:59.410
it's probably because of
an approach like this.

92
00:05:59.410 --> 00:06:02.850
Simply because sometimes your
browser caches that old HTML,

93
00:06:02.850 --> 00:06:05.030
including that old CSRF token.

94
00:06:05.030 --> 00:06:09.570
And if you used a post request to get
from one page to another page to another,

95
00:06:09.570 --> 00:06:12.160
that's a situation where that
token doesn't work anymore,

96
00:06:12.160 --> 00:06:13.059
it's already been used.

97
00:06:14.890 --> 00:06:20.110
For a single page app the way you
might use a CSRF token is to serve

98
00:06:20.110 --> 00:06:24.870
it up with the initial page and then every
time you send a request that mutates data,

99
00:06:24.870 --> 00:06:29.400
when you get a response in the response
header, the CSRF token is there.

100
00:06:29.400 --> 00:06:32.450
And you basically get that and
store it in memory, so

101
00:06:32.450 --> 00:06:35.530
you can do the same exact thing, but.

102
00:06:35.530 --> 00:06:40.740
Just know that the idea of a CSRF token
has nothing to do with a hidden form input

103
00:06:40.740 --> 00:06:41.670
or a meta tag.

104
00:06:41.670 --> 00:06:46.240
It is just this concept of incrementing
this value over and over and over again.

105
00:06:46.240 --> 00:06:50.450
So whatever pattern you follow,
you should be able to do

106
00:06:50.450 --> 00:06:52.950
the same thing regardless of which
kinda app you're working with.

