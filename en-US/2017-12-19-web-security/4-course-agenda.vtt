WEBVTT

1
00:00:00.560 --> 00:00:04.460
&gt;&gt; Mike North: And with that let's
talk about the agenda for today.

2
00:00:04.460 --> 00:00:09.090
So this is like a rough outline
of a web application system.

3
00:00:09.090 --> 00:00:12.920
And we're going to stage a bunch
of attacks on the client.

4
00:00:12.920 --> 00:00:15.950
So we're gonna deal with
cross-site scripting.

5
00:00:15.950 --> 00:00:18.570
We're going to talk about
third-party assets.

6
00:00:18.570 --> 00:00:23.330
Does anyone here break in
like NPM dependencies,

7
00:00:23.330 --> 00:00:25.860
anything in your node
modules folder at all?

8
00:00:25.860 --> 00:00:29.910
We'll talk about CSRF which is
cross-site request forgery.

9
00:00:29.910 --> 00:00:33.950
These are attacks that take advantage of
the fact that when we send a request to

10
00:00:33.950 --> 00:00:38.720
another origin,
we pass cookies along the way by default.

11
00:00:38.720 --> 00:00:42.360
And if you use HTTP basic authentication,
which, hopefully,

12
00:00:42.360 --> 00:00:45.955
nobody in the room does, those credentials
are sent along the way as well.

13
00:00:45.955 --> 00:00:50.475
The last attack we'll deal with
on the client is click jacking.

14
00:00:50.475 --> 00:00:54.875
This category of attacks is called a UI
redress attack where users think they're

15
00:00:54.875 --> 00:00:58.665
interacting with one application, but
in fact they're interacting with another.

16
00:01:00.352 --> 00:01:02.862
Moving away from the client
we'll talk about CDNs.

17
00:01:02.862 --> 00:01:05.412
So if you bring in libraries via a CDN,

18
00:01:05.412 --> 00:01:10.662
and I'm not implying that I know
of any that are untrustworthy.

19
00:01:10.662 --> 00:01:16.352
But things like unpackage, or CDNJS.

20
00:01:16.352 --> 00:01:18.222
These are controlled by people.

21
00:01:18.222 --> 00:01:23.009
They're like a small group of people
you're trusting to never change the files

22
00:01:23.009 --> 00:01:24.161
that are on there.

23
00:01:24.161 --> 00:01:26.000
Never allow malicious code to be in there.

24
00:01:26.000 --> 00:01:30.178
And they can have the best intentions,
but maybe they use their deploy key for

25
00:01:30.178 --> 00:01:31.989
that CDN and for something else.

26
00:01:31.989 --> 00:01:34.580
And maybe there's a breach
with that something else.

27
00:01:34.580 --> 00:01:38.420
And so we'll talk about,
how do we make sure that we are, for

28
00:01:38.420 --> 00:01:42.290
code that is hosted in a place we
don't directly have control over.

29
00:01:42.290 --> 00:01:45.950
How can we have assurance
that some subtle change

30
00:01:47.060 --> 00:01:50.600
can be made to that code
without our knowledge?

31
00:01:50.600 --> 00:01:54.430
How can we be assured that when
that code changes we are alerted?

32
00:01:56.280 --> 00:02:00.790
Finally, we will talk about
the connection between client and server.

33
00:02:00.790 --> 00:02:05.000
We will look at an HTTPS downgrade attack.

34
00:02:05.000 --> 00:02:09.640
And man in the middle attacks in general,
where basically

35
00:02:09.640 --> 00:02:14.370
an attacker positions
themselves between a target and

36
00:02:14.370 --> 00:02:17.070
someone the target thinks
they're communicating with.

37
00:02:17.070 --> 00:02:19.580
And they're trying to tamper with or

38
00:02:19.580 --> 00:02:23.538
eavesdrop on traffic that is
going along that channel.

39
00:02:23.538 --> 00:02:31.060
So, that is seven attacks and
I think we have 10 exercises today.

40
00:02:31.060 --> 00:02:34.589
Because, some of them,
we end up not just defending against, but

41
00:02:34.589 --> 00:02:36.740
trying to stage the attacks ourselves.

