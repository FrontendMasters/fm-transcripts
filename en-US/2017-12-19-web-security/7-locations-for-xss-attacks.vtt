WEBVTT

1
00:00:00.410 --> 00:00:02.965
&gt;&gt; Mike North: So
let's talk about places to look for

2
00:00:02.965 --> 00:00:04.600
cross-site scripting vulnerabilities,

3
00:00:04.600 --> 00:00:09.210
cuz it's overwhelming to think that this
could happen across your entire app.

4
00:00:09.210 --> 00:00:14.140
Anywhere you have a WYSIWYG,
which is a really long abbreviation for

5
00:00:14.140 --> 00:00:15.770
what you see is what you get.

6
00:00:15.770 --> 00:00:20.320
So this is the ability to
add rich text as content

7
00:00:20.320 --> 00:00:25.280
to a particular area where you can say,
you can drop an image tag here, right.

8
00:00:25.280 --> 00:00:29.708
Anywhere you have that it is
a potential place where you can start

9
00:00:29.708 --> 00:00:34.382
experimenting and seeing if you can
slip in any of a number of three or

10
00:00:34.382 --> 00:00:39.080
four dozen cross-site
scripting attack techniques.

11
00:00:39.080 --> 00:00:44.242
Embedded content, so if you can drop
an Iframe somewhere or if you can put

12
00:00:44.242 --> 00:00:50.480
an object, right, like a flash embed,
those are cross-site vulnerabilities.

13
00:00:50.480 --> 00:00:55.250
Anywhere users have full control over a
URL, that is a vulnerability potentially,

14
00:00:55.250 --> 00:00:59.940
right, because in much older browsers

15
00:00:59.940 --> 00:01:04.290
you can have a URL that begins with
JavaScript: and then code follows that.

16
00:01:04.290 --> 00:01:07.790
And this is not the current
version of Firefox and Chrome and

17
00:01:07.790 --> 00:01:09.870
Safari, this is older browsers, but

18
00:01:09.870 --> 00:01:15.010
imagine that you've allowed someone
to even have a CSS background image.

19
00:01:15.010 --> 00:01:19.130
And the background image that the user
has selected is JavaScript: and

20
00:01:19.130 --> 00:01:22.180
then some code, yeah,
their image isn't going to render but

21
00:01:22.180 --> 00:01:24.920
by the time people see that it's too late,
right.

22
00:01:26.910 --> 00:01:31.708
Anywhere that input is reflected back,
like, I couldn't find x y z,

23
00:01:31.708 --> 00:01:36.330
right, anywhere that,
whatever the user just typed it sent back.

24
00:01:36.330 --> 00:01:40.653
That is a potential place you could
have a reflected cross-site scripting

25
00:01:40.653 --> 00:01:41.540
vulnerability.

26
00:01:41.540 --> 00:01:45.810
Anywhere query parameters are rendered
into the DOM, that's a typical vector for

27
00:01:45.810 --> 00:01:48.480
a DOM-based cross-site scripting attack.

28
00:01:48.480 --> 00:01:52.640
And then innerHTML,
that's element.innerHTML,

29
00:01:52.640 --> 00:01:58.790
that can be arbitrary HTML, and that's
where you could just add a script tag,

30
00:01:58.790 --> 00:02:02.620
and that is an exceptionally
easy one to exploit.

