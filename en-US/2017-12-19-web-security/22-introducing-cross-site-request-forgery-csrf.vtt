WEBVTT

1
00:00:00.294 --> 00:00:04.355
&gt;&gt; Mike North: We're moving on from
cross-site scripting to the second most

2
00:00:04.355 --> 00:00:08.492
prevalent vulnerability in web
applications and that is CSRF,

3
00:00:08.492 --> 00:00:12.310
which stands for
cross site request forgery.

4
00:00:12.310 --> 00:00:17.402
And what this takes advantage of,
what this exploits, is the fact that, by

5
00:00:17.402 --> 00:00:23.630
default, cookies and basic authentication
credentials, which look like these, right?

6
00:00:23.630 --> 00:00:27.033
If you've ever seen this before,
this is basic authentication,

7
00:00:27.033 --> 00:00:30.265
where your browser's asking for
your username and password.

8
00:00:30.265 --> 00:00:34.920
They are sent along with each
request our user makes by default,

9
00:00:34.920 --> 00:00:36.910
unless you sort of opt out.

10
00:00:36.910 --> 00:00:41.180
And so if we, for example,
currently in this app right now,

11
00:00:41.180 --> 00:00:45.440
we have a pretty horrifying problem,
where we can actually make a get request

12
00:00:45.440 --> 00:00:48.400
that will transfer our funds
from one account to another.

13
00:00:48.400 --> 00:00:51.650
So imagine I've got a little
image tag like this and

14
00:00:51.650 --> 00:00:57.400
I put that image tag into an html
email and I send it to a customer.

15
00:00:57.400 --> 00:00:58.790
If they happen to be logged in,

16
00:00:58.790 --> 00:01:02.860
if their cookie works,
they'll make a request to this.

17
00:01:02.860 --> 00:01:07.410
Their credentials will be passed along,
and by the time that request finishes,

18
00:01:07.410 --> 00:01:11.230
they will have basically asked the bank
to transfer funds to some other account.

19
00:01:12.280 --> 00:01:15.650
So this is an obviously good reason to

20
00:01:18.590 --> 00:01:21.840
align with RESTful HTTP verb usage, right?

21
00:01:21.840 --> 00:01:23.890
We don't want get requests
that mutate data.

22
00:01:25.160 --> 00:01:30.543
But we're not safe even if we
only allow post and put requests.

23
00:01:30.543 --> 00:01:34.034
Because now I just have to
take a different approach,

24
00:01:34.034 --> 00:01:38.691
where I would use some social engineering
to basically call up and say,

25
00:01:38.691 --> 00:01:43.449
hey, this is the IT department and
we're about to roll out a new update.

26
00:01:43.449 --> 00:01:45.543
I just wanted you,
can you click on this link.

27
00:01:45.543 --> 00:01:47.870
And I'll send it to you
in an email in a second,

28
00:01:47.870 --> 00:01:50.190
and just please verify that it works.

29
00:01:50.190 --> 00:01:54.360
And then have code that looks like this
in that landing page that I control,

30
00:01:54.360 --> 00:01:56.202
where basically we have a hidden form and

31
00:01:56.202 --> 00:02:00.055
with JavaScript we can programmatically
tell that form to submit.

32
00:02:00.055 --> 00:02:02.635
So this will make a post request happen.

33
00:02:02.635 --> 00:02:05.245
By default, we won't be able
to see what happens, right?

34
00:02:05.245 --> 00:02:08.235
This will be what is
called an opaque request.

35
00:02:08.235 --> 00:02:09.295
But we don't need to.

36
00:02:09.295 --> 00:02:14.435
We can just try to hit a bunch of people
with this and whatever happens, happens.

37
00:02:14.435 --> 00:02:16.775
I mean, we'll know what happens
if we control the other account.

38
00:02:16.775 --> 00:02:18.855
We'll see money coming into it.

39
00:02:18.855 --> 00:02:22.704
So we just need to basically attempt
to run this on a bunch of users

40
00:02:22.704 --> 00:02:26.572
who may currently have cookies
that can be used as credentials.

41
00:02:26.572 --> 00:02:33.335
And now, that the backend will say you
are an authorized user, please go ahead.

42
00:02:33.335 --> 00:02:36.730
This takes advantage of the fact
that I can run code on any domain

43
00:02:36.730 --> 00:02:40.790
that'll potentially hit this
across origins, across sites.

