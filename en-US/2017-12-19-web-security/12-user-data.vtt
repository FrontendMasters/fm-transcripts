WEBVTT

1
00:00:00.380 --> 00:00:03.045
&gt;&gt; Mike North: First thing you need
to know is, you never ever, ever,

2
00:00:03.045 --> 00:00:04.720
ever can trust user data.

3
00:00:04.720 --> 00:00:07.065
Don't ever trust user data, raw user data.

4
00:00:07.065 --> 00:00:10.947
And in particular,
these are some absolutely

5
00:00:10.947 --> 00:00:15.033
terrible places to put
raw untrusted user data.

6
00:00:15.033 --> 00:00:20.890
Anything that you put in between script
tags obviously will be treated as script.

7
00:00:20.890 --> 00:00:22.760
Don't put stuff there.

8
00:00:22.760 --> 00:00:28.740
It may be tempting, so I heard you're
a word processor theme developer.

9
00:00:28.740 --> 00:00:30.660
Imagine you had a really terrible idea.

10
00:00:30.660 --> 00:00:33.901
We're gonna have a theme where users
can inject their own little snippets to

11
00:00:33.901 --> 00:00:35.230
customize their experience.

12
00:00:35.230 --> 00:00:39.790
And give us some JavaScript and
we'll execute it on this page.

13
00:00:39.790 --> 00:00:44.920
This would not be a good idea, because
now other people can see this page.

14
00:00:44.920 --> 00:00:48.430
If you can click a link and
run a script and that does not

15
00:00:48.430 --> 00:00:53.910
originate from the developer it
originates from another user, bad times.

16
00:00:53.910 --> 00:00:57.207
You don't wanna put any user
data in an HTML comment.

17
00:00:57.207 --> 00:01:02.103
So this is a little tricky but can anyone
think of something you could do inside for

18
00:01:02.103 --> 00:01:03.480
the second line here.

19
00:01:03.480 --> 00:01:07.230
What value could we have for
user data that would cause us trouble?

20
00:01:09.230 --> 00:01:10.900
So if.
&gt;&gt; Speaker 2: Close off the comment?

21
00:01:10.900 --> 00:01:12.040
&gt;&gt; Mike North: Yes, exactly.

22
00:01:12.040 --> 00:01:13.260
&gt;&gt; Speaker 2: Put your script in there.

23
00:01:13.260 --> 00:01:14.260
Whatever you want.
&gt;&gt; Mike North: So

24
00:01:14.260 --> 00:01:18.660
you would begin, your string would
not be like, hello, I'm Mike.

25
00:01:18.660 --> 00:01:23.300
It would be like dash, dash,
greater than, to finish the comment,

26
00:01:23.300 --> 00:01:26.710
and then begin executing our script.

27
00:01:26.710 --> 00:01:30.812
And the real comment close to the right
of that line, that'll appear as text, but

28
00:01:30.812 --> 00:01:32.250
it'll be too late.

29
00:01:32.250 --> 00:01:36.320
In fact, you could end with beginning
a new comment and it would be fine.

30
00:01:36.320 --> 00:01:37.940
So that's why.

31
00:01:37.940 --> 00:01:43.334
Basically if you put stuff,
unsanitized user input into a context,

32
00:01:43.334 --> 00:01:46.220
be it between quotes or within a tag.

33
00:01:46.220 --> 00:01:50.240
Know that you could always get out of
that context by closing the quote or

34
00:01:50.240 --> 00:01:53.610
by having the close tag or
by finishing the comment.

35
00:01:53.610 --> 00:01:59.580
And now you're back into code land,
where you're injecting your code in there.

36
00:02:01.530 --> 00:02:02.830
Attribute names.

37
00:02:02.830 --> 00:02:07.610
I've never seen this, I think this is an
unlikely one for a developer to fall into.

38
00:02:07.610 --> 00:02:11.280
But users should not have
control over HTML attributes.

39
00:02:11.280 --> 00:02:15.480
Obviously if user data were source in
this situation, it'd be pretty easy for

40
00:02:15.480 --> 00:02:19.970
them to like manipulate that,
no, it's not classes.

41
00:02:19.970 --> 00:02:23.270
It's not the name of my theme that's gonna
be here, it's gonna be the source, and

42
00:02:23.270 --> 00:02:24.840
we're gonna download the script.

43
00:02:26.520 --> 00:02:28.770
Tag names, again never seen that.

44
00:02:28.770 --> 00:02:32.360
But a bad idea, this is probably
one that we don't need to remember,

45
00:02:32.360 --> 00:02:35.920
because it just seems like common sense,
don't do that.

46
00:02:35.920 --> 00:02:37.150
Stuff that's directly in the style block.

47
00:02:37.150 --> 00:02:43.130
So it is very, very hard to do style based
cross-site scripting in modern browsers.

48
00:02:43.130 --> 00:02:45.420
It is pretty easy in older browsers.

49
00:02:45.420 --> 00:02:49.475
Anywhere you have a URL, that
basically can turn into a get request.

50
00:02:49.475 --> 00:02:56.260
Well I mean it is a get request, but
it can turn into a JavaScript execution.

51
00:02:56.260 --> 00:03:00.880
So CSS, background image with a URL
of JavaScript colon transfer all my

52
00:03:00.880 --> 00:03:03.480
money out of the account.

53
00:03:03.480 --> 00:03:05.240
You know, something like that.

