WEBVTT

1
00:00:00.200 --> 00:00:02.320
&gt;&gt; Mike North: So I've got something here.

2
00:00:02.320 --> 00:00:07.550
These are tools that are typically
used by the whole range of hackers.

3
00:00:07.550 --> 00:00:09.900
You can use these for good or for evil.

4
00:00:09.900 --> 00:00:13.380
What I've got here is a tool called BeEF,

5
00:00:13.380 --> 00:00:16.430
they call it a cross
side scripting framework.

6
00:00:16.430 --> 00:00:17.410
Where you basically,

7
00:00:17.410 --> 00:00:22.740
when you start it up, we'll see if
I can actually get this working.

8
00:00:22.740 --> 00:00:24.456
You may have to use your imagination here.

9
00:00:24.456 --> 00:00:26.769
So I start it up, and it basically says,

10
00:00:26.769 --> 00:00:29.570
okay well this is where
I"m hosting the script.

11
00:00:31.020 --> 00:00:36.051
I'm hosting it locally and
hook JS is the name of the file

12
00:00:36.051 --> 00:00:42.725
that we're serving up on port 3000.
&gt;&gt; Mike North: Okay,

13
00:00:42.725 --> 00:00:44.871
so now I've got this running.

14
00:00:44.871 --> 00:00:48.808
And I'm gonna use a second
tool called MITMF.

15
00:00:48.808 --> 00:00:50.880
That's Man in the Middle Framework.

16
00:00:50.880 --> 00:00:55.436
I need my IP address, so I'm just gonna
show you the visual way to look at that.

17
00:00:55.436 --> 00:00:56.857
We can look at our network settings.

18
00:00:56.857 --> 00:01:02.140
I've got 192.168.3.239.

19
00:01:02.140 --> 00:01:05.390
And I've got a command that's
already prepared here.

20
00:01:05.390 --> 00:01:07.220
I'm just gonna check my laptop's IP,

21
00:01:07.220 --> 00:01:10.210
if it's still what it was when we started,
and it is.

22
00:01:11.970 --> 00:01:16.480
And I'm just gonna update
my IP address here, 239.

23
00:01:16.480 --> 00:01:20.840
Okay, so effectively what
this code is doing here is,

24
00:01:20.840 --> 00:01:22.710
I'm running the man in
the middle framework.

25
00:01:22.710 --> 00:01:25.080
I'm launching an ARP spoofing attack.

26
00:01:25.080 --> 00:01:27.115
Don't worry about the particulars
of what that means,

27
00:01:27.115 --> 00:01:31.210
this goes beyond what web app
developers need to know about.

28
00:01:31.210 --> 00:01:35.221
You need to know what this does,
not how it works.

29
00:01:35.221 --> 00:01:38.406
I am providing a gateway and a target.

30
00:01:38.406 --> 00:01:42.735
And all you need to know about this ARP
spoofing is, essentially I'm interfering

31
00:01:42.735 --> 00:01:46.876
with the connection between an individual
client on this Wi-Fi network, and

32
00:01:46.876 --> 00:01:47.970
the router.

33
00:01:47.970 --> 00:01:52.890
And I am making it so
that this Linux Virtual Machine

34
00:01:52.890 --> 00:01:57.900
seems to look like
the router to my laptop.

35
00:01:57.900 --> 00:02:00.610
So I'm using the Virtual Machine
to hack my laptop.

36
00:02:00.610 --> 00:02:04.150
The reason that this might
not work is cuz it's

37
00:02:04.150 --> 00:02:05.800
all sharing the same Internet connection.

38
00:02:07.140 --> 00:02:12.840
So we will see if the VM can
still operate the way it should.

39
00:02:14.580 --> 00:02:17.680
All right, and then finally,
I am adding this attack here.

40
00:02:17.680 --> 00:02:19.920
So I launched the ARP attack, and

41
00:02:19.920 --> 00:02:22.510
then you have to say now what
do you wanna do about it?

42
00:02:22.510 --> 00:02:24.490
Now that you're the router,
what should we do?

43
00:02:24.490 --> 00:02:27.540
We want to inject a piece of
JavaScript into the page.

44
00:02:27.540 --> 00:02:29.760
Anytime there's a plain HTTP connection,

45
00:02:31.480 --> 00:02:35.320
we will inject a little script that is
coming from this BeEF tool over here.

46
00:02:36.790 --> 00:02:40.512
So I'm going to run this,
Man in the Middle Framework will start.

47
00:02:40.512 --> 00:02:45.630
And I'm gonna actually go to,
I'm going to pick on my

48
00:02:45.630 --> 00:02:51.310
beloved alma mater,
Carnegie Mellon University.

49
00:02:51.310 --> 00:02:53.150
Plain HTTP connection, and

50
00:02:53.150 --> 00:02:57.210
you can see that we've got
a bunch of stuff happening here.

51
00:02:57.210 --> 00:03:02.770
It looks like I was downloading
fonts.gstatic.com, googlemanager, right?

52
00:03:02.770 --> 00:03:06.280
These are all the requests that went out.

53
00:03:06.280 --> 00:03:07.050
Well, look at this.

54
00:03:07.050 --> 00:03:10.850
There's a strict transport
security header that came through,

55
00:03:10.850 --> 00:03:14.540
and It says it zapped it.

56
00:03:14.540 --> 00:03:17.730
So this was a security precaution
that this app tried to take,

57
00:03:17.730 --> 00:03:22.200
which would have prevent
cross-site scripting from working.

58
00:03:22.200 --> 00:03:23.740
But this thing took care of it.

59
00:03:23.740 --> 00:03:26.540
It got rid of it before
it reached my browser.

60
00:03:26.540 --> 00:03:31.230
And now what I've got here
is I've got a little page

61
00:03:31.230 --> 00:03:33.180
that looks like doubleclick.net.

62
00:03:33.180 --> 00:03:36.610
I managed to get a script
injected through doubleclick.net.

63
00:03:36.610 --> 00:03:41.253
Now we can go to this commands tab, and
I have a variety of things that we can do.

64
00:03:41.253 --> 00:03:43.867
Let's see if we can do
something funny here.

65
00:03:43.867 --> 00:03:50.710
So, you see, I can detect server light,
see if this user has LastPass installed.

66
00:03:50.710 --> 00:03:54.655
There's one that's funny
if I could find it here.

67
00:03:54.655 --> 00:03:59.330
Cross-site scripting.

68
00:03:59.330 --> 00:04:03.818
So these are known exploits where we can
take advantage of certain things that

69
00:04:03.818 --> 00:04:09.987
are in routers.
&gt;&gt; Mike North: If you go to,

70
00:04:09.987 --> 00:04:14.510
we can get the HTML of the current page.

71
00:04:14.510 --> 00:04:18.913
I can show you what that looks like.
&gt;&gt; Mike North: So

72
00:04:18.913 --> 00:04:20.673
that's the current page right now.

73
00:04:20.673 --> 00:04:25.608
It's just a little iframe or something
like that cuz this is just an ad tracker.

74
00:04:37.462 --> 00:04:38.941
&gt;&gt; Mike North: What if we did this,

75
00:04:38.941 --> 00:04:41.552
redirect the browser to Rick Roll.

76
00:04:41.552 --> 00:04:47.466
Execute the attack.
&gt;&gt; Mike North: Did

77
00:04:47.466 --> 00:04:50.723
that work?
&gt;&gt; Speaker 2: You can hear

78
00:04:50.723 --> 00:04:55.499
it.
&gt;&gt; Mike North: You can hear it

79
00:04:55.499 --> 00:04:56.390
really softly.

80
00:04:56.390 --> 00:04:58.440
It's happening.

81
00:04:58.440 --> 00:05:01.423
See that little?

82
00:05:01.423 --> 00:05:04.070
This tab is playing audio.

83
00:05:04.070 --> 00:05:06.230
So right now,
I haven't totally compromised anything.

84
00:05:06.230 --> 00:05:08.214
This is a pretty benign
attack I've launched here.

85
00:05:08.214 --> 00:05:11.810
But now, there's a tiny little
hidden iframe somewhere in this

86
00:05:11.810 --> 00:05:15.957
page that's playing,
never gonna give you up.

87
00:05:15.957 --> 00:05:22.210
[LAUGH] And unless you know that you
can like right click on this and

88
00:05:22.210 --> 00:05:25.810
mute the tab, this is frustrating for
a user, right?

89
00:05:25.810 --> 00:05:27.470
Now you could do far more malicious stuff,

90
00:05:27.470 --> 00:05:29.690
you could execute
requests on their behalf.

91
00:05:29.690 --> 00:05:31.830
But I just Man-in-the-Middled myself,

92
00:05:31.830 --> 00:05:36.510
I just threw a virtual machine, with
tools that are designed for testing apps.

93
00:05:36.510 --> 00:05:42.790
I was able to inject the script in between
this site and a plain HTTP connection.

94
00:05:42.790 --> 00:05:46.650
Didn't have to get this computer
to join a new Wi-Fi network,

95
00:05:46.650 --> 00:05:49.190
I just use something called ARP spoofing.

96
00:05:49.190 --> 00:05:53.570
So, this is why we've gotta use HTTPS,
this was pretty trivial for me to do.

97
00:05:53.570 --> 00:05:56.638
Please, go ahead.
&gt;&gt; Speaker 2: So you started with the ARP

98
00:05:56.638 --> 00:06:00.991
spoof was to get the double-click hook.js,

99
00:06:00.991 --> 00:06:05.710
is that where you started?
&gt;&gt; Mike North: So the two tools involved,

100
00:06:05.710 --> 00:06:11.215
there's BeEF, which basically has
a generic script you can insert,

101
00:06:11.215 --> 00:06:15.320
and then it'll open up
a socket to that target.

102
00:06:15.320 --> 00:06:17.070
And you can run arbitrary
commands on that.

103
00:06:17.070 --> 00:06:19.930
It's just very well orchestrated XSS.

104
00:06:19.930 --> 00:06:22.310
Man in the Middle Framework
with ARP spoofing.

105
00:06:22.310 --> 00:06:26.725
That is what actually got
that script into the page.

106
00:06:26.725 --> 00:06:30.320
All beef does is it manages
that script really well.

107
00:06:30.320 --> 00:06:33.100
Man in the Middle Framework is what
you use to to actually get that

108
00:06:33.100 --> 00:06:33.900
into the page.
&gt;&gt; Speaker 2: And, so

109
00:06:33.900 --> 00:06:35.240
what I'm just asking is,

110
00:06:35.240 --> 00:06:38.420
was the browser going after
the double click JavaScript that

111
00:06:38.420 --> 00:06:41.986
the Man in the Middle attack hijacked?
&gt;&gt; Mike North: Yes, so that was a plain

112
00:06:41.986 --> 00:06:48.880
HTML request, and it was basically going
through my virtual machine at that point.

113
00:06:48.880 --> 00:06:52.850
And as it was coming back, we basically
added our little script tag in there, and

114
00:06:52.850 --> 00:06:54.180
then let it go to the browser.

115
00:06:54.180 --> 00:06:57.567
And now we're in and
I just want you to see that,

116
00:06:57.567 --> 00:07:02.059
cross-site scripting is not
a matter of you have to design this

117
00:07:02.059 --> 00:07:06.744
intricate script and
find a vulnerability in a web application.

118
00:07:06.744 --> 00:07:09.814
There are tools with
menus of attacks here.

119
00:07:09.814 --> 00:07:15.082
Some of these,
you can see which social networks the user

120
00:07:15.082 --> 00:07:22.180
has logged in to by seeing if you can
make requests to various domains.

121
00:07:22.180 --> 00:07:27.840
And whether they'll come back, or
whether they'll say you got a 401.

122
00:07:27.840 --> 00:07:32.230
You can, in cases where the user has
flash enabled, turn on the users web-cam.

123
00:07:33.680 --> 00:07:35.510
Which is, that's pretty terrifying.

124
00:07:35.510 --> 00:07:39.530
So here, I'm not authenticated to Gmail,
I am authenticated to Twitter,

125
00:07:39.530 --> 00:07:43.770
I am not authenticated to Facebook,
and that's true.

126
00:07:43.770 --> 00:07:45.102
That's accurate.

127
00:07:45.102 --> 00:07:50.752
So it's able to get some information
based on the ability to make requests.

128
00:07:50.752 --> 00:07:55.200
Even though it can't see the response,
it can know whether that succeeded or not.

129
00:07:57.210 --> 00:08:03.410
So, when I say it's easy to launch
attacks, I mean there's a GUI for it.

130
00:08:03.410 --> 00:08:07.850
And right-click menus,
and tables, and plug-ins.

131
00:08:07.850 --> 00:08:09.512
Yes?
&gt;&gt; Speaker 3: A thing that's relevant for

132
00:08:09.512 --> 00:08:13.700
front end developers to know,
is that there's 16 under PhoneGap.

133
00:08:13.700 --> 00:08:18.760
PhoneGap also encompasses Ionic and
Cordova and

134
00:08:18.760 --> 00:08:24.770
is a thing that renders
JavaScript apps into native apps.

135
00:08:24.770 --> 00:08:29.210
It's horrendously vulnerable as indicated
by the fact that there are 16 things here.

136
00:08:29.210 --> 00:08:33.840
And it's an important thing to know about,
is that the thing that you work with.

137
00:08:33.840 --> 00:08:34.750
&gt;&gt; Mike North: Great point there.

138
00:08:34.750 --> 00:08:38.200
One thing that makes, sorry, let me
get PhoneGap back on the screen here.

139
00:08:38.200 --> 00:08:43.140
One thing that makes PhoneGap particularly
vulnerable and, so just to be clear,

140
00:08:43.140 --> 00:08:44.000
it is Ionic.

141
00:08:45.230 --> 00:08:47.360
Ionic is highly optimized PhoneGap.

142
00:08:47.360 --> 00:08:50.430
If you're using, what's the other one?
&gt;&gt; Speaker 3: Cordova.

143
00:08:50.430 --> 00:08:50.980
&gt;&gt; Mike North: Cordova and

144
00:08:50.980 --> 00:08:54.250
PhoneGap are the same thing,
there's a third one I'm forgetting.

145
00:08:54.250 --> 00:08:57.430
React Native doesn't necessarily
fit into this category, right?

146
00:08:57.430 --> 00:09:01.073
Anything that is taking JavaScript and
transforming it into native code.

147
00:09:01.073 --> 00:09:02.440
That's not what we're talking about here.

148
00:09:02.440 --> 00:09:05.820
We're talking about
essentially a UI web view,

149
00:09:05.820 --> 00:09:08.740
a big iframe that your app is running in.

150
00:09:08.740 --> 00:09:13.560
The big thing that makes this a little
bit, where extra due diligence is required

151
00:09:13.560 --> 00:09:17.080
is, you get JavaScript bindings
into native functionality.

152
00:09:17.080 --> 00:09:20.300
So you break through the typical sandbox
container that a web application

153
00:09:20.300 --> 00:09:23.950
would run into and you can access
files off of that user's device.

154
00:09:23.950 --> 00:09:27.560
Or the mobile equivalent of files, right?

155
00:09:27.560 --> 00:09:31.960
So it's not, where usually you're
saying well a web app can't do that.

156
00:09:31.960 --> 00:09:35.680
In PhoneGap, often times it can,
depending on which plugins are installed.

157
00:09:35.680 --> 00:09:36.640
Great point.

158
00:09:36.640 --> 00:09:39.170
If you think of anything else like that,
please interject.

159
00:09:40.750 --> 00:09:43.490
Alright, so
that's my cross-site scripting demo.

160
00:09:43.490 --> 00:09:47.820
What you should take away from that is
it's horrifyingly easy for me to do that.

161
00:09:47.820 --> 00:09:49.570
I did it while talking to you.

162
00:09:49.570 --> 00:09:51.880
I was able to pretty reliably do it.

163
00:09:51.880 --> 00:09:55.070
I did it from one machine to another while
they were sharing an Internet connection.

164
00:09:55.070 --> 00:09:58.750
I could have done it to anyone else in
the room if you're accessing a plain

165
00:09:58.750 --> 00:09:59.830
HTTP domain.

