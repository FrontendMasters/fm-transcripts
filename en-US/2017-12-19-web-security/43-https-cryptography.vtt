WEBVTT

1
00:00:00.190 --> 00:00:03.110
&gt;&gt; Mike North: So in order to communicate
securely with another server,

2
00:00:03.110 --> 00:00:06.200
we need to deal with two
types of encryption.

3
00:00:06.200 --> 00:00:09.570
Symmetric encryption and
Public Key encryption.

4
00:00:09.570 --> 00:00:12.000
Symmetric encryption is really fast.

5
00:00:12.000 --> 00:00:13.460
It is quite fast.

6
00:00:13.460 --> 00:00:17.270
And the idea here is you have a secret,
and

7
00:00:17.270 --> 00:00:23.210
that is used both to write Right encrypted
data and read from encrypted data.

8
00:00:23.210 --> 00:00:27.080
So the mental model here
is a file with a password.

9
00:00:27.080 --> 00:00:28.850
We've all dealt with that before.

10
00:00:28.850 --> 00:00:33.760
Imagine we just had an object where we
change letters like every Z becomes a Q,

11
00:00:33.760 --> 00:00:35.510
every H becomes an I.

12
00:00:35.510 --> 00:00:40.011
You can think of that as the magic key
that can be used both to translate garbled

13
00:00:40.011 --> 00:00:43.650
data or to create garbled data but
it's the same key.

14
00:00:43.650 --> 00:00:48.580
I want you to imagine that it's that
easy that you can use that to sort of

15
00:00:48.580 --> 00:00:49.700
almost like a decoder ring.

16
00:00:51.920 --> 00:00:56.920
So we don't wanna reuse keys because
randomness when you're dealing

17
00:00:56.920 --> 00:01:01.460
with cryptography randomness is great,
we love randomness because it means that.

18
00:01:01.460 --> 00:01:04.620
What's working right now will not
necessarily be the same thing,

19
00:01:04.620 --> 00:01:06.960
same way it's gonna work in the future.

20
00:01:06.960 --> 00:01:13.090
So it would be great if we could generate
some key on a per-connection basis.

21
00:01:13.090 --> 00:01:17.010
But the problem we run into is
how do we share that secret?

22
00:01:17.010 --> 00:01:21.350
If I was trying to talk securely
to Johnny here, at some point,

23
00:01:21.350 --> 00:01:24.740
I have to say the password is banana.

24
00:01:24.740 --> 00:01:28.240
And now everybody in the room knows
the password is banana, right?

25
00:01:28.240 --> 00:01:31.140
So how do I get that to him in a way that

26
00:01:32.400 --> 00:01:34.670
doesn't expose that secret
to the outside world?

27
00:01:36.380 --> 00:01:40.790
So for that, we need what it's
called Public Key cryptography.

28
00:01:40.790 --> 00:01:46.980
And the idea there is that with Public Key
cryptography you have two keys.

29
00:01:46.980 --> 00:01:49.230
A private key and a public key.

30
00:01:49.230 --> 00:01:52.800
The public key is used to
create encrypted messages.

31
00:01:52.800 --> 00:01:56.120
The private key is used to
read encrypted messages.

32
00:01:56.120 --> 00:02:00.650
And this is a really
complicated algorithm.

33
00:02:00.650 --> 00:02:04.850
I mean, that the class of algorithms that
can do this they’re really complicated

34
00:02:04.850 --> 00:02:09.690
because it is not as simple as like
having some cipher were I can just

35
00:02:09.690 --> 00:02:12.820
say this letter goes to that letter and
this letter goes to another one.

36
00:02:12.820 --> 00:02:14.750
It’s sort of like the tools I have for

37
00:02:14.750 --> 00:02:19.870
making a message are not the same as
the tools I need for reading that message.

38
00:02:19.870 --> 00:02:23.470
It’s almost like an irreversible
process to make a message.

39
00:02:25.090 --> 00:02:30.140
So we'll describe how it works, and
then we'll dive a little bit into how

40
00:02:30.140 --> 00:02:35.490
this encryption, the mental model I
like to use for public encryption.

41
00:02:36.600 --> 00:02:41.400
So but know that public key is for
writing, private key is for reading.

42
00:02:41.400 --> 00:02:44.020
So we begin with public
key encryption just for

43
00:02:44.020 --> 00:02:48.000
a phase of this TLS handshake
called the key exchange.

44
00:02:49.410 --> 00:02:54.240
Public key encryption is really slow
relative to symmetric encryption.

45
00:02:54.240 --> 00:02:57.280
It involves some much more complex math.

46
00:02:57.280 --> 00:03:01.460
But the idea is the server makes its
public key available to anyone that wants

47
00:03:01.460 --> 00:03:06.180
to use it that's just for sending messages
that can only be read by the server and

48
00:03:06.180 --> 00:03:08.390
it sends it's certificate along the way.

49
00:03:08.390 --> 00:03:11.587
The client then compares
something called cipher suites and

50
00:03:11.587 --> 00:03:15.285
cipher suites are basically
the methodologies used for that faster,

51
00:03:15.285 --> 00:03:17.050
symmetric encryption later on.

52
00:03:18.970 --> 00:03:21.740
The client then generates
what's called the session key.

53
00:03:21.740 --> 00:03:26.536
So this is that disposable,
one-time use just for that session.

54
00:03:26.536 --> 00:03:30.510
One-time use key is for
that fast symmetric encryption.

55
00:03:30.510 --> 00:03:36.180
So it's generated on the client, but the
client then uses the server's public key

56
00:03:36.180 --> 00:03:39.320
to encrypt it in such a way that
by the time it leaves the client,

57
00:03:39.320 --> 00:03:43.990
even if there's a man-in-the-middle
that's sniffing all the packets going by.

58
00:03:43.990 --> 00:03:46.940
It's just gonna look at this and
its garbled nonsense.

59
00:03:46.940 --> 00:03:48.330
Only the server can read that.

60
00:03:48.330 --> 00:03:53.849
And the client never let go of that
session key that it generated.

61
00:03:56.000 --> 00:04:01.000
So then, when the server gets that,
it of course can open up this locked box,

62
00:04:01.000 --> 00:04:05.450
grab the session key out, and then they
have exchanged the secret successfully.

63
00:04:05.450 --> 00:04:08.970
So that they can have that fast,
efficient, symmetric,

64
00:04:08.970 --> 00:04:14.314
encrypted communication between them.
&gt;&gt; Mike North: So

65
00:04:14.314 --> 00:04:17.501
going back to this public key
encryption just for a moment,

66
00:04:17.501 --> 00:04:22.190
we write messages with the public key,
we read messages with the private key.

67
00:04:22.190 --> 00:04:23.870
And a popular algorithm for

68
00:04:23.870 --> 00:04:28.810
this is called RSA, they are the initials
of some of the discoverers.

69
00:04:29.850 --> 00:04:35.490
And the exponential math is involved,
so the size of the message is limited.

70
00:04:35.490 --> 00:04:38.220
Just think of it like
exponents can only get so

71
00:04:38.220 --> 00:04:43.490
big before it's prohibitively expensive
for us to do this calculation.

72
00:04:43.490 --> 00:04:48.140
Like rounding errors for floating point
numbers start to degrade the message, and

73
00:04:48.140 --> 00:04:51.400
we lose accuracy, and we can't get
the message back out reliably.

74
00:04:52.550 --> 00:04:57.496
So what I wanna describe to you is, let's
imagine that instead of this algorithm

75
00:04:57.496 --> 00:05:01.512
that is based on keys being used
to encrypt and decrypt messages.

76
00:05:01.512 --> 00:05:05.465
I'm just gonna convince you that there
are situations where math can be more

77
00:05:05.465 --> 00:05:08.460
difficult in one direction than another.

78
00:05:08.460 --> 00:05:15.120
And essentially, public key encryption
operates under the principle that

79
00:05:15.120 --> 00:05:20.140
some math is damn near impossible in one
direction and pretty easy in the other.

80
00:05:20.140 --> 00:05:22.500
So squares and square roots.

81
00:05:22.500 --> 00:05:26.320
So if I gave you a pocket calculator
everyone could square that number

82
00:05:26.320 --> 00:05:26.905
no problem.

83
00:05:26.905 --> 00:05:35.080
17.47 squared, 17.47 times 17.47 you
don't even need an exponent ability here.

84
00:05:35.080 --> 00:05:38.310
It's pretty easy everyone would
be able to figure that out.

85
00:05:38.310 --> 00:05:41.180
Coming up with the square root is
considerably harder if we don't know

86
00:05:41.180 --> 00:05:44.047
what the square root of this number is,
right.

87
00:05:44.047 --> 00:05:47.310
So, addition and
subtraction obviously symmetric, right?

88
00:05:47.310 --> 00:05:50.680
We can add and
subtract with relative ease.

89
00:05:50.680 --> 00:05:51.890
Here you can square something but

90
00:05:51.890 --> 00:05:56.470
we don't necessarily, you might need
some help to get the square root.

91
00:05:56.470 --> 00:06:01.480
And let's pretend the private key is
like maybe a secret mechanism for

92
00:06:01.480 --> 00:06:06.270
computing square roots really easily,
and we can get that out.

93
00:06:06.270 --> 00:06:11.280
So that should convince you that like now
we have that imbalance and difficulty.

94
00:06:11.280 --> 00:06:15.680
And now take that to the extreme,
make it so that we can encrypt messages

95
00:06:15.680 --> 00:06:20.910
in a millisecond and take a thousand
years to guess the algorithm correctly,

96
00:06:20.910 --> 00:06:25.240
to decrypt an RSA message.

97
00:06:25.240 --> 00:06:27.801
We can also use private
keys to sign messages, so

98
00:06:27.801 --> 00:06:31.557
basically we'll take a known value
that's not currently encrypted.

99
00:06:31.557 --> 00:06:36.988
And the server will basically perform
their decryption algorithm and

100
00:06:36.988 --> 00:06:40.585
they'll form,
some people call this a hash.

101
00:06:40.585 --> 00:06:45.897
But they will create something for
us that when we encrypt it,

102
00:06:45.897 --> 00:06:49.240
it becomes that known value again.

103
00:06:49.240 --> 00:06:53.890
So if we give a server 64 and
it gives us back this mysterious value, 8.

104
00:06:53.890 --> 00:06:55.710
It turns out when we use squaring.

105
00:06:55.710 --> 00:06:57.840
That's our public key, right?

106
00:06:57.840 --> 00:06:59.350
Anyone can square numbers.

107
00:06:59.350 --> 00:07:02.210
When we square it, magically,
we get back to 64.

108
00:07:02.210 --> 00:07:06.270
So that is how we can determine
if I have a known value,

109
00:07:06.270 --> 00:07:08.650
I pass it to a server,
it gives me something back.

110
00:07:08.650 --> 00:07:14.620
Think of it almost like doing
the decryption one level too far.

111
00:07:14.620 --> 00:07:18.670
And then when we encrypt it,
we get back to the normal value again.

112
00:07:18.670 --> 00:07:20.530
And then we can say, yes,

113
00:07:20.530 --> 00:07:24.280
only in that server, because they're
the only ones with that private key.

114
00:07:24.280 --> 00:07:28.680
Only that server could have given
me this because when I encrypt it,

115
00:07:28.680 --> 00:07:31.210
now I am back to the normal
value that I expect.

116
00:07:31.210 --> 00:07:33.900
This is readable text, I can see this now.

117
00:07:33.900 --> 00:07:35.930
Does that make sense to everyone,
how signing works?

