WEBVTT

1
00:00:00.500 --> 00:00:05.780
&gt;&gt; Mike North: So, what we will do now is
let's defend against that CSRF attack.

2
00:00:05.780 --> 00:00:10.620
So you have already installed
another express thing.

3
00:00:10.620 --> 00:00:12.280
It's called C surf.

4
00:00:12.280 --> 00:00:15.730
And it's for
defending against CSRF attacks.

5
00:00:15.730 --> 00:00:22.290
This is what lets you add a token and
add a token when you render a form,

6
00:00:22.290 --> 00:00:27.440
and then verify when that attempt
to modify the form comes back in.

7
00:00:27.440 --> 00:00:32.790
You can see, yes, that was a token
that looks like one I generated.

8
00:00:32.790 --> 00:00:34.760
You will be working in these two files,
and

9
00:00:34.760 --> 00:00:38.390
I'm about to show you where
exactly you may make your change.

10
00:00:38.390 --> 00:00:41.330
Because there's some code there.

11
00:00:41.330 --> 00:00:47.070
We should be able to look at this
previous example of CSRF attacks.

12
00:00:47.070 --> 00:00:51.280
This JS bin that I had should not
work anymore once we are done.

13
00:00:51.280 --> 00:00:53.571
So with that let me just
open up the code and

14
00:00:53.571 --> 00:00:56.914
show you where you may find it
valuable to insert some stuff.

15
00:00:59.962 --> 00:01:03.870
&gt;&gt; Mike North: So we'll be dealing with,
I only want you to focus on one area.

16
00:01:03.870 --> 00:01:07.560
We'll be dealing with that form where you
transfer funds from one person to another.

17
00:01:07.560 --> 00:01:12.230
That seems to be a pretty good
place to have CSRF protection.

18
00:01:13.540 --> 00:01:18.230
So in the server folder you'll
see a transfers JS file.

19
00:01:18.230 --> 00:01:19.820
So we'll look at that one.

20
00:01:19.820 --> 00:01:26.900
And we'll look at the associated HTML
like thing that goes along with it.

21
00:01:26.900 --> 00:01:28.180
That's in the views.

22
00:01:28.180 --> 00:01:29.940
It's the server views folder.

23
00:01:29.940 --> 00:01:32.295
And it's transfers.ejs.

24
00:01:32.295 --> 00:01:33.987
So you should only need these two files.

25
00:01:36.897 --> 00:01:41.563
&gt;&gt; Mike North: So what you'll end up doing
is you'll probably up near the top of this

26
00:01:41.563 --> 00:01:45.205
JavaScript file import this CSRF library.

27
00:01:45.205 --> 00:01:48.345
And then you can create what is called,

28
00:01:48.345 --> 00:01:51.995
if I get my auto-completion here,
so you can, thank you.

29
00:01:54.070 --> 00:01:58.326
So up near the top you'll add
to your imports this CSRF file,

30
00:01:58.326 --> 00:02:00.416
I'll move this over for now.

31
00:02:02.992 --> 00:02:04.114
&gt;&gt; Mike North: And then down here,

32
00:02:04.114 --> 00:02:07.490
when you're,
these we would call route handlers, right?

33
00:02:07.490 --> 00:02:11.120
They receive a request, they're
responsible for generating a response.

34
00:02:13.120 --> 00:02:19.230
Between this path and the function
that ultimately does the work here,

35
00:02:19.230 --> 00:02:23.090
you can add any number of what
are called request handlers.

36
00:02:23.090 --> 00:02:26.420
And in fact, this function at the end,
that's also a request handler.

37
00:02:26.420 --> 00:02:32.050
So the way this CSRF library works,
you will end up creating a course

38
00:02:32.050 --> 00:02:37.200
verifier thing that will take care of
token generation and token verification.

39
00:02:37.200 --> 00:02:41.986
And you'll probably,
&gt;&gt; Mike North: Create something that

40
00:02:41.986 --> 00:02:43.520
looks like this.

41
00:02:43.520 --> 00:02:45.632
And you'll do the same thing down here.

42
00:02:45.632 --> 00:02:49.876
I will tell you router.all, if you
looked at router.get and router.all,

43
00:02:49.876 --> 00:02:52.240
what would you think all might mean there?

44
00:02:56.085 --> 00:03:00.010
&gt;&gt; Student: So that all the not
handled by the rest of them, right?

45
00:03:00.010 --> 00:03:03.500
&gt;&gt; Mike North: This is all HTTP verbs.

46
00:03:03.500 --> 00:03:04.710
If it's a get or a post.

47
00:03:04.710 --> 00:03:08.090
So this is why we can use
that image tag attack.

48
00:03:08.090 --> 00:03:12.580
So feel free to solve this
one by just saying, post.

49
00:03:13.920 --> 00:03:17.060
We don't wanna allow you to
mutate data with a get request.

50
00:03:17.060 --> 00:03:19.500
So you can defeat that
one attack that way, but

51
00:03:19.500 --> 00:03:24.500
you'll also have to add something
like a CSRF verifier there.

52
00:03:24.500 --> 00:03:27.990
So let's take ten minutes to go ahead and
set this up.

53
00:03:27.990 --> 00:03:31.500
I've kinda taken you, let's say,
10% of the way there.

54
00:03:31.500 --> 00:03:37.330
And in the end, and I'll post this, the JS
bin, in chat with that form post example.

55
00:03:37.330 --> 00:03:42.200
You should be able to safely run
the script in that JS bin and

56
00:03:42.200 --> 00:03:46.890
see that in your console,
you're not able to mutate that data.

