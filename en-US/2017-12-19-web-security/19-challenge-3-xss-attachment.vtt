WEBVTT

1
00:00:00.220 --> 00:00:02.920
&gt;&gt; Mike North: All right welcome back,
so we're going to

2
00:00:02.920 --> 00:00:07.120
jump into this first exercise here,
or sorry this third exercise here.

3
00:00:07.120 --> 00:00:09.370
The scenario I want you to imagine,

4
00:00:09.370 --> 00:00:12.730
we don't have this implemented in our app
because it would make this a little bit

5
00:00:12.730 --> 00:00:17.090
more difficult to play with,
certainly not impossible, but

6
00:00:17.090 --> 00:00:21.650
we want to allow image uploads which
are hosted on the same domain as our app.

7
00:00:21.650 --> 00:00:26.980
The important thing that this introduces
is any script that is in this that we can

8
00:00:26.980 --> 00:00:31.700
trick the browser into executing,
that will be a same origin

9
00:00:31.700 --> 00:00:35.150
request with the credentials that
are associated with this origin.

10
00:00:35.150 --> 00:00:36.630
You'll get that cookie.

11
00:00:36.630 --> 00:00:39.830
If you transfer a bank
account balance like that,

12
00:00:39.830 --> 00:00:41.860
you're credentials will be passed along.

13
00:00:43.330 --> 00:00:49.540
So we're gonna allow users to
upload images, and for some reason

14
00:00:49.540 --> 00:00:54.450
because the product team requested it,
you just have the ability to rename stuff.

15
00:00:54.450 --> 00:00:58.140
So essentially they end up with
the ability to get the squirrel.html file.

16
00:00:59.630 --> 00:01:02.470
So we already saw what happens
when we visit that URL.

17
00:01:02.470 --> 00:01:06.767
Basically it's the same file,
it is that squirrel.html and

18
00:01:06.767 --> 00:01:09.370
squirrel.jpg in your examples folder.

19
00:01:09.370 --> 00:01:11.940
They are byte for byte identical,

20
00:01:11.940 --> 00:01:16.680
except based on whether we are requesting
it as a document request or

21
00:01:16.680 --> 00:01:20.310
whether it's an image, the browser's
going to treat it completely differently.

22
00:01:22.030 --> 00:01:27.010
So in terms of creating mischief, you
have a little tool that I built for you.

23
00:01:27.010 --> 00:01:29.780
And I did not build
the interesting part of this,

24
00:01:29.780 --> 00:01:32.270
which is the library that reads and
writes this data.

25
00:01:32.270 --> 00:01:35.600
I simply built a little
command line thing around it.

26
00:01:35.600 --> 00:01:37.990
So I don't deserve much credit here.

27
00:01:37.990 --> 00:01:43.830
But you can run node and then it's this
program in the script folder called XFJS.

28
00:01:43.830 --> 00:01:47.640
You can add double dash help to that if
you want to say something similar to what

29
00:01:47.640 --> 00:01:49.390
you're looking at now.

30
00:01:49.390 --> 00:01:51.930
But basically you can read that

31
00:01:53.190 --> 00:01:57.800
text data that's in the comment
field of that jpeg header.

32
00:01:57.800 --> 00:02:00.450
You can read that and
you pipe it to pbcopy.

33
00:02:00.450 --> 00:02:01.870
That'll just add it to your clipboard.

34
00:02:01.870 --> 00:02:05.170
The other command, the lower one,

35
00:02:05.170 --> 00:02:11.110
it'll basically write data in a file
that you specify to that jpg header.

36
00:02:11.110 --> 00:02:15.900
I'd do it this way because
one of the constraints here

37
00:02:15.900 --> 00:02:20.670
has to do with this particular exploit,
I don't know if it's an exploit.

38
00:02:20.670 --> 00:02:24.480
But this particular technique
can only be performed if

39
00:02:24.480 --> 00:02:27.790
all of your text is on one single line.

40
00:02:27.790 --> 00:02:30.010
So you can't have
a multiline html document.

41
00:02:30.010 --> 00:02:31.600
It has to be one single line.

42
00:02:31.600 --> 00:02:34.290
But what we're gonna do for
the second example,

43
00:02:34.290 --> 00:02:39.510
we'll read everything in scratch.html,
which is a file you'd have to create,

44
00:02:40.520 --> 00:02:44.920
and it'll put that into the jpg
under that comment field.

45
00:02:44.920 --> 00:02:49.620
And so using this combination, you should
be able to manipulate that squirrel image

46
00:02:49.620 --> 00:02:52.502
and cause some trouble with it, and

47
00:02:52.502 --> 00:02:58.240
basically put your own text, replace the
text that's in there with your own text.

48
00:02:58.240 --> 00:03:01.020
So I would advise like,
create an HTML file,

49
00:03:01.020 --> 00:03:04.210
use the first command to get stuff
on the clipboard, paste that in,

50
00:03:04.210 --> 00:03:08.340
use that as a starting point because there
is some stuff that's useful in there.

51
00:03:08.340 --> 00:03:13.900
For example,
there are a few characters that begin,

52
00:03:13.900 --> 00:03:18.130
think of it like the part of a file
that indicates that this is a JPG,

53
00:03:18.130 --> 00:03:20.380
that ends up being rendered as text.

54
00:03:20.380 --> 00:03:24.310
So if you were to select everything on
your screen you'd actually pick that up.

55
00:03:24.310 --> 00:03:29.360
But we kind of hide that with a comment so
that's why our HTML might

56
00:03:29.360 --> 00:03:34.550
begin with a comment so
that we get rid of all that garble mess.

57
00:03:34.550 --> 00:03:37.440
So there are some things in there you
might wanna preserve, but you can

58
00:03:37.440 --> 00:03:43.460
experiment with how this works and how the
browser responds to different MIME types.

59
00:03:43.460 --> 00:03:48.840
Just note that you have to have one
line of stuff in that HTML file or

60
00:03:48.840 --> 00:03:52.880
whatever text file you wanna create and
you can run the second command and

61
00:03:52.880 --> 00:03:56.390
it'll write that data to the image and
then you can load it again in the browser.

