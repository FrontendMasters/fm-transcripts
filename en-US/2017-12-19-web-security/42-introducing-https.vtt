WEBVTT

1
00:00:00.210 --> 00:00:03.770
&gt;&gt; Mike North: So over the past couple of
years, we've been really trying to push up

2
00:00:03.770 --> 00:00:07.420
the percentage of the web if
that is served over HTTPS.

3
00:00:08.460 --> 00:00:13.520
We're at about 56% and
moving forward nicely.

4
00:00:13.520 --> 00:00:19.724
This big uptick we're seeing in,
I guess, it's not really a clear uptick,

5
00:00:19.724 --> 00:00:24.220
but starting from about
November of 2016 upwards.

6
00:00:25.310 --> 00:00:27.610
That's impacted a lot by Let's Encrypt,

7
00:00:27.610 --> 00:00:32.040
which is an attempt to make
the first free certificate authority

8
00:00:32.040 --> 00:00:35.870
where you could automatically go through
the process of getting one of these.

9
00:00:35.870 --> 00:00:40.670
And it wasn't about paying $100 for
three years, and

10
00:00:40.670 --> 00:00:42.780
now you have the certificate you need.

11
00:00:42.780 --> 00:00:44.160
Everyone should have access to this.

12
00:00:44.160 --> 00:00:49.200
It's in everyone's interests to make
this something that everyone can add to,

13
00:00:49.200 --> 00:00:52.990
even their blogs and things like that.

14
00:00:52.990 --> 00:00:55.730
Everything should be HTTPS.

15
00:00:55.730 --> 00:00:59.845
So in terms of how we got here,
in the 90s, HTTP was invented.

16
00:00:59.845 --> 00:01:03.024
93, there was something called S-HTTP.

17
00:01:03.024 --> 00:01:10.421
That was the first secure HTTP protocol,
and that was from Secure Mosaic.

18
00:01:10.421 --> 00:01:14.810
That was back when you had to download
the secure version of Mosaic, a separate

19
00:01:14.810 --> 00:01:19.900
program, then the regular Mosaic,
which was for your general Internet use.

20
00:01:19.900 --> 00:01:27.790
In 94, Netscape invented and implemented
SSL, HTTPS was the first thing to use SSL.

21
00:01:27.790 --> 00:01:30.776
SSL stands for secure socket layer.

22
00:01:30.776 --> 00:01:32.697
And what that means,

23
00:01:32.697 --> 00:01:38.689
just think that it is sort of a lower
level idea than HTTPS, right?

24
00:01:38.689 --> 00:01:42.625
It doesn't care about what
protocol you're using,

25
00:01:42.625 --> 00:01:48.052
like whether this is something called
a request that has a head and a body.

26
00:01:48.052 --> 00:01:53.212
It involves something in a lower layer,
at the socket layer, rather,

27
00:01:53.212 --> 00:01:59.064
which is why we can use it for things like
WebSockets as well, which are not HTTP.

28
00:01:59.064 --> 00:02:03.198
In 99, we got our first version of TLS,

29
00:02:03.198 --> 00:02:07.108
which also is also known as SSL 3.1.

30
00:02:07.108 --> 00:02:12.470
It is more accurate now to
refer to this as TLS, right?

31
00:02:12.470 --> 00:02:16.630
And 2008, we got the current
version that we're using now, and

32
00:02:16.630 --> 00:02:19.750
it is regarded to be
the safe version to use.

33
00:02:19.750 --> 00:02:22.780
So we're gonna dive a little
bit into cryptography.

34
00:02:22.780 --> 00:02:26.090
I hope I made this reasonably accessible.

35
00:02:26.090 --> 00:02:30.690
I want you to understand at the end of
this what role the certificate plays.

36
00:02:30.690 --> 00:02:35.050
What role symmetric and
asymmetric encryption plays,

37
00:02:35.050 --> 00:02:36.610
we'll define those terms.

38
00:02:36.610 --> 00:02:41.428
So you know when we start working with
OpenSSL, which is what we're about to do

39
00:02:41.428 --> 00:02:46.615
to generate a certificate safely, you will
not just look at this as a bunch of files.

40
00:02:46.615 --> 00:02:50.440
You'll understand each piece and
the point of each piece.

