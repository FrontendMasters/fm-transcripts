WEBVTT

1
00:00:00.330 --> 00:00:02.710
&gt;&gt; Mike North: So
that's a second best practice.

2
00:00:02.710 --> 00:00:06.810
A third best practice is to set
your CORS headers properly.

3
00:00:06.810 --> 00:00:11.670
So CORS stands for
cross-origin resource sharing,

4
00:00:11.670 --> 00:00:16.520
and this is what basically permits
browsers to allow you to send

5
00:00:16.520 --> 00:00:22.200
a request from one domain to another,
from one origin to another.

6
00:00:22.200 --> 00:00:27.330
It involves, often times, what is
called an options preflight request.

7
00:00:27.330 --> 00:00:31.890
So think of it as,
if you're a web browser,

8
00:00:31.890 --> 00:00:36.610
if you're a modern browser, you basically
send a low overhead small request

9
00:00:36.610 --> 00:00:41.850
to the server saying I am planning
on asking you for data in a moment.

10
00:00:41.850 --> 00:00:45.770
I'm planning on passing these headers
along when I ask you for data and

11
00:00:45.770 --> 00:00:48.890
I'm going to use this http verb post.

12
00:00:48.890 --> 00:00:51.810
So that's this first
section of headers here.

13
00:00:51.810 --> 00:00:54.640
And that request it has no body.

14
00:00:54.640 --> 00:00:55.490
It's just headers.

15
00:00:55.490 --> 00:00:57.130
It's like a head request.

16
00:00:57.130 --> 00:01:01.710
When that response comes back,
basically, the server would say,

17
00:01:01.710 --> 00:01:06.350
yes, I see you're coming from
the following origin, foo.example.

18
00:01:06.350 --> 00:01:11.760
And I allow not only the post request
you're thinking about making but

19
00:01:11.760 --> 00:01:14.160
the following other types of requests.

20
00:01:14.160 --> 00:01:17.670
It absolutely fine to send
me the authorization and

21
00:01:17.670 --> 00:01:20.590
the content type headers
that you mentioned before.

22
00:01:20.590 --> 00:01:25.130
And, by the way, you don't have
to ask me again for a while.

23
00:01:25.130 --> 00:01:28.390
Is that an hour and seconds?

24
00:01:28.390 --> 00:01:31.690
Anyway, you don't have to ask me for
a while, for that period of time,

25
00:01:31.690 --> 00:01:33.600
however much time that is to.

26
00:01:33.600 --> 00:01:38.360
You kind of, remember this and
follow my instructions for

27
00:01:38.360 --> 00:01:42.140
the time being and just go ahead and
make your requests.

28
00:01:42.140 --> 00:01:45.310
And then finally the browser can say,
okay I've verified this.

29
00:01:45.310 --> 00:01:48.480
Now I'm gonna actually
initiate the main request.

30
00:01:48.480 --> 00:01:52.010
All of this happens within
the browser's internals.

31
00:01:52.010 --> 00:01:56.890
It is not something that your app sees or
has control over but if you're making

32
00:01:56.890 --> 00:02:04.776
a cross-origin request you may see
these options preflight happen.

