WEBVTT

1
00:00:00.240 --> 00:00:02.500
&gt;&gt; Mike North: How do we know
if we're vulnerable or not?

2
00:00:02.500 --> 00:00:08.600
You are vulnerable if your server looks
to a cookie sent along with the request,

3
00:00:08.600 --> 00:00:13.090
or basic authentication credentials
sent along with the request,

4
00:00:13.090 --> 00:00:16.110
in order to authenticate or
authorize a user.

5
00:00:16.110 --> 00:00:18.830
Authenticate would be
like this is who you are.

6
00:00:18.830 --> 00:00:22.740
Authorize would be these
are the privileges that you have.

7
00:00:22.740 --> 00:00:26.260
Like are you as a user able
to view this resource?

8
00:00:28.830 --> 00:00:31.240
So the exception here would
be a client side cookie.

9
00:00:31.240 --> 00:00:35.750
So if, for example,
if you pluck something out of a cookie

10
00:00:35.750 --> 00:00:41.330
that then needs to be placed
into a request header.

11
00:00:41.330 --> 00:00:43.840
That is the kind of thing that

12
00:00:43.840 --> 00:00:47.460
is not susceptible to
a Cross-Site Request Forgery.

13
00:00:47.460 --> 00:00:48.810
So here's why.

14
00:00:48.810 --> 00:00:50.722
In order to read that cookie,

15
00:00:50.722 --> 00:00:55.009
you need to be running code on
a domain that can access that cookie.

16
00:00:55.009 --> 00:00:59.280
Web storage is partitioned
on a per domain basis.

17
00:00:59.280 --> 00:01:03.160
So if you're using the cookie
as a storage mechanism only.

18
00:01:03.160 --> 00:01:04.400
And if the server,

19
00:01:04.400 --> 00:01:08.490
when it receives a request is not looking
at that cookie as the means of identifying

20
00:01:08.490 --> 00:01:12.840
the user, then this method of
attack doesn't work any more.

21
00:01:12.840 --> 00:01:17.390
This attack works because I can write code
on my site that will make a request to

22
00:01:17.390 --> 00:01:18.800
someone else's site.

23
00:01:18.800 --> 00:01:20.700
And although I can't read those cookies,

24
00:01:20.700 --> 00:01:23.930
I take advantage of the fact that
the cookies are sent along for the ride.

25
00:01:23.930 --> 00:01:30.013
I actually can't see any communication
between the user and that remote server,

26
00:01:30.013 --> 00:01:35.669
but I can basically trick them into
mutating data into changing something.

27
00:01:35.669 --> 00:01:41.006
So as soon as the methodology
of authenticating a user

28
00:01:41.006 --> 00:01:48.242
depends on something that only code
running on that domain can perform,

29
00:01:48.242 --> 00:01:53.342
such as placing a value in
a authorization header,

30
00:01:53.342 --> 00:01:56.630
you're in the clear here.

31
00:01:56.630 --> 00:02:01.060
You are, I gotta be careful about saying
you're in the clear in a security course,

32
00:02:01.060 --> 00:02:04.950
but you have mitigated the broadest
form of this kind of attack.

33
00:02:07.010 --> 00:02:12.240
Local storage and session storage, these
are accessible only on the client side.

34
00:02:12.240 --> 00:02:15.837
If you don't know the difference,
session storage,

35
00:02:15.837 --> 00:02:19.837
that is when the user logs out,
that's destroyed, right?

36
00:02:19.837 --> 00:02:21.670
When they close the browser,
that's destroyed.

37
00:02:21.670 --> 00:02:24.250
Sorry, it's not log out,
it's close the browser.

38
00:02:24.250 --> 00:02:26.244
Local storage can live for much longer.

39
00:02:26.244 --> 00:02:31.055
Neither of these are passed along by
default with each request as cookies are.

40
00:02:35.691 --> 00:02:37.835
&gt;&gt; Mike North: So
one typical mechanism for

41
00:02:37.835 --> 00:02:42.730
solving this is to create
something called a CSRF token.

42
00:02:42.730 --> 00:02:47.340
And this, like the cryptographic
nonsense we talked about earlier,

43
00:02:47.340 --> 00:02:52.830
they are generated in an unpredictable
way with each page load.

44
00:02:52.830 --> 00:02:58.550
So basically, the server knows that
these are the keys that I've generated.

45
00:02:58.550 --> 00:03:03.893
It might be that if we think about
a simplistic definition it could be,

46
00:03:03.893 --> 00:03:08.781
it generates numbers but
they have to meet a certain condition,

47
00:03:08.781 --> 00:03:13.866
like they're divisible by 67,
5, 812, and 1,984.

48
00:03:13.866 --> 00:03:18.651
Only if it meets that condition, we can
generate many numbers that meet that

49
00:03:18.651 --> 00:03:23.603
condition, but we have some way of
verifying that yes, that is a genuine one.

50
00:03:23.603 --> 00:03:28.724
And they are disposable,
meaning you can only use them once and

51
00:03:28.724 --> 00:03:32.920
then that CSRF token value
is not usable again.

52
00:03:32.920 --> 00:03:37.633
So typically you want to have an iterative
algorithm that generates new ones.

53
00:03:37.633 --> 00:03:41.836
And you can basically say that this is
almost treated like a monotonically

54
00:03:41.836 --> 00:03:45.950
increasing value, where you go one,
two, three, four, five.

55
00:03:45.950 --> 00:03:48.990
And you can basically read into
the value of this token and

56
00:03:48.990 --> 00:03:51.680
say, nope, that's too old.

57
00:03:51.680 --> 00:03:54.090
So sometimes it's like a salt.

58
00:03:54.090 --> 00:03:57.170
That is,
it is a secure value generated for

59
00:03:57.170 --> 00:04:02.020
that server combined with a time stamp or
a counter so

60
00:04:02.020 --> 00:04:06.260
that you can ensure these do not
get reused over and over again.

61
00:04:07.790 --> 00:04:11.450
I like to think of this kind of like,
it is

62
00:04:11.450 --> 00:04:16.990
like two factor authentication in
that you have two pieces involved.

63
00:04:16.990 --> 00:04:20.060
One proving that you are authenticated,
right?

64
00:04:20.060 --> 00:04:23.020
That cookie was not something
that anyone can fake.

65
00:04:23.020 --> 00:04:26.730
You get a cookie by logging
in as a legitimate user.

66
00:04:26.730 --> 00:04:29.220
We could even encrypt the cookie, right?

67
00:04:29.220 --> 00:04:32.090
And say only the server can
make sense of this thing.

68
00:04:33.520 --> 00:04:38.552
And then the second piece, it basically
proves that you came from code

69
00:04:38.552 --> 00:04:44.450
running on that origin that is intended
to make requests to the back end.

70
00:04:44.450 --> 00:04:49.500
Something that only code running
in on that domain could do,

71
00:04:49.500 --> 00:04:54.130
because it's reaching into local storage,
or it's reading something from a meta tag.

72
00:04:54.130 --> 00:04:57.660
These are things that we talked
about opaque requests earlier.

73
00:04:57.660 --> 00:05:02.470
These are things that you would not be
able to see because an opaque request

74
00:05:02.470 --> 00:05:06.170
would not let the attacker's
code see that kind of thing.

