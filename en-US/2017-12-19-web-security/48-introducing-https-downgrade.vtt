WEBVTT

1
00:00:00.490 --> 00:00:03.697
&gt;&gt; Mike North: Let's say that,
we get this certificate in place, right?

2
00:00:03.697 --> 00:00:07.570
We get this certificate in place,
we're serving over HTTPS.

3
00:00:07.570 --> 00:00:14.270
What we want to see is, like now that we
should distribute links that are HTTPS,

4
00:00:14.270 --> 00:00:18.870
we should encourage users to
visit our new secure URL.

5
00:00:18.870 --> 00:00:23.343
But what can happen is a man
in the middle can stage

6
00:00:23.343 --> 00:00:27.177
what is called a HTTPS downgrade attack.

7
00:00:27.177 --> 00:00:32.680
So it's fantastic that everyone's
moving to HTTPS, we're at 56%.

8
00:00:32.680 --> 00:00:36.325
We're moving more and
more towards a fully-encrypted web.

9
00:00:36.325 --> 00:00:43.232
And what do you do about those plain
HTTP connections is typically,

10
00:00:43.232 --> 00:00:48.453
you just want to redirect
users from HTTP to HTTPS.

11
00:00:48.453 --> 00:00:52.825
This is our raising
awareness marketing material

12
00:00:52.825 --> 00:00:57.610
to try to get people to bother
to setup a certificate.

13
00:00:57.610 --> 00:01:04.095
And to use a secure connection to
their users, so this seems great.

14
00:01:04.095 --> 00:01:09.120
But you should still have plain HTTP
links, right, they have bookmarks.

15
00:01:09.120 --> 00:01:10.832
Occasionally, people still spread these.

16
00:01:10.832 --> 00:01:13.820
Occasionally, they still
pop in search results.

17
00:01:13.820 --> 00:01:16.549
And that initial request comes over HTTP,
and this is what we do.

18
00:01:16.549 --> 00:01:19.390
This is how we typically handle that.

19
00:01:19.390 --> 00:01:22.523
You ask for HTTP,
I'm going to redirect you.

20
00:01:22.523 --> 00:01:24.760
A 301 redirect is a permanent redirect.

21
00:01:24.760 --> 00:01:28.868
So that basically tells the browser,
I'm sending you here and remember for

22
00:01:28.868 --> 00:01:31.446
next time,
I'm always going to send you here.

23
00:01:31.446 --> 00:01:35.927
You can in the future,
just go straight there,

24
00:01:35.927 --> 00:01:39.746
don't bother to ask me for directions.

25
00:01:39.746 --> 00:01:42.640
However, what if we get into
the middle of this as an attacker.

26
00:01:43.730 --> 00:01:46.494
What we can do is stage this attack.

27
00:01:46.494 --> 00:01:49.940
This is called HTTPS Downgrading.

28
00:01:49.940 --> 00:01:53.441
There's a library that is basically,
made for

29
00:01:53.441 --> 00:01:57.301
this called SSL Strip, or
SSL Split is another one.

30
00:01:57.301 --> 00:02:04.250
But the idea is, we maintain
an insecure session with the user.

31
00:02:04.250 --> 00:02:07.222
And maintain a secure
session with the server.

32
00:02:07.222 --> 00:02:10.980
So we're actually, the ones that are
communicating securely with the server.

33
00:02:10.980 --> 00:02:15.091
And the server will think that it has
an https connection to the client.

34
00:02:15.091 --> 00:02:18.620
It will say everything looks good.

35
00:02:18.620 --> 00:02:19.600
I'm encrypting everything.

36
00:02:19.600 --> 00:02:22.721
Someone's listening on the other side,
but it's really the attacker.

37
00:02:22.721 --> 00:02:26.923
And then, we're basically creating
insecure proxy that downgrades

38
00:02:26.923 --> 00:02:29.510
that connection to an insecure one.

39
00:02:29.510 --> 00:02:32.205
And then, of course we can
mend in the middle both ways.

40
00:02:32.205 --> 00:02:34.210
Because in this situation,

41
00:02:34.210 --> 00:02:39.567
we're holding that session key it was
us who initiated that TLS handshake.

42
00:02:39.567 --> 00:02:42.749
It was us, the attacker who has created

43
00:02:42.749 --> 00:02:47.530
a means of securely
communicating with the server.

44
00:02:47.530 --> 00:02:53.287
And so, we can man in the middle
this way as well as we ever could.

45
00:02:53.287 --> 00:02:55.990
So for people out there, for your users,

46
00:02:55.990 --> 00:03:00.250
you want to encourage them to try and
not get into this situation.

