WEBVTT

1
00:00:01.020 --> 00:00:05.720
&gt;&gt; Mike North: So in terms of how we
can save ourselves from these things,

2
00:00:05.720 --> 00:00:09.190
you want to escape user data
before putting it into HTML.

3
00:00:09.190 --> 00:00:11.070
So there are two things you wanna do.

4
00:00:12.270 --> 00:00:15.730
One is sanitize it before
data is persistent.

5
00:00:16.890 --> 00:00:22.510
And the other is sanitize data before
it's rendered onto the screen.

6
00:00:22.510 --> 00:00:27.710
And so typically,
you want to do both because

7
00:00:27.710 --> 00:00:32.820
there are always holes in
sanitatization methods, little holes.

8
00:00:32.820 --> 00:00:35.676
And if you have two layers of defense,

9
00:00:35.676 --> 00:00:41.043
then you're less likely to have
something that is truly exploitable.

10
00:00:41.043 --> 00:00:45.566
And furthermore, it's quite a bit
easier to sanitize data right

11
00:00:45.566 --> 00:00:50.254
before you render it, than to worry
about properly disallowing all

12
00:00:50.254 --> 00:00:54.880
bad things without interfering
with genuine user input, right?

13
00:00:56.250 --> 00:01:01.949
So in this case, we can see that the
script above turns into the string below.

14
00:01:01.949 --> 00:01:07.740
And the JavaScript functions you'd use
to run that are escape URI component,

15
00:01:07.740 --> 00:01:09.440
or escape URI.

16
00:01:09.440 --> 00:01:14.310
That will basically make it so
that you end up with a string

17
00:01:14.310 --> 00:01:19.290
that when rendered will be text for
a scrip tag on a screen.

18
00:01:19.290 --> 00:01:23.609
You will see that scrip
tag as text instead of

19
00:01:23.609 --> 00:01:28.640
feeling it being run as code,
if that makes sense.

20
00:01:28.640 --> 00:01:33.562
So every view library you've heard of for
the most part does this automatically.

21
00:01:33.562 --> 00:01:34.484
This is not a guarantee.

22
00:01:34.484 --> 00:01:39.110
I'm not saying you are safe with
the thing that you're using.

23
00:01:39.110 --> 00:01:43.970
But most of them react to in ember and
view.

24
00:01:43.970 --> 00:01:48.310
They have considerable cross-site
scripting protection built in, right?

25
00:01:48.310 --> 00:01:53.530
Where you have to do work to
get out to deviate from it.

26
00:01:53.530 --> 00:01:57.990
You have to do extra work in order to make
it so that a vulnerability is present,

27
00:01:57.990 --> 00:02:01.881
basically opt in to the unsafe.
&gt;&gt; Mike North: For

28
00:02:01.881 --> 00:02:07.850
the library we're using here today,
here's the convention that's used.

29
00:02:07.850 --> 00:02:12.240
So anything between percent signs is
generally, that's a JavaScript expression.

30
00:02:12.240 --> 00:02:16.660
If you use percent equals,
that ends up being an escaped expression,

31
00:02:16.660 --> 00:02:21.430
meaning that's cross-site scripting
protection is working for us there.

32
00:02:21.430 --> 00:02:25.780
If instead of the equals,
we use a dash, there is no protection.

33
00:02:25.780 --> 00:02:30.748
And if we have neither an equals nor
a dash, just the percent sign alone,

34
00:02:30.748 --> 00:02:36.044
that's just a JavaScript expression
that will be evaluated, but the output

35
00:02:36.044 --> 00:02:40.983
will not be rendered into the HTML.
&gt;&gt; Mike North: So

36
00:02:40.983 --> 00:02:44.854
here's a little cheat sheet for
different libraries and

37
00:02:44.854 --> 00:02:48.510
how you can know that
you're in the danger zone.

38
00:02:48.510 --> 00:02:50.380
These are the danger zones.

39
00:02:50.380 --> 00:02:55.450
In Ember and Vue it's the triple curlies,
triple handlebars.

40
00:02:55.450 --> 00:02:59.260
Anytime you see that,
it's gonna take that string unescaped and

41
00:02:59.260 --> 00:03:02.610
it's gonna treat it as HTML, right?

42
00:03:02.610 --> 00:03:07.300
So if that turned into a script tag,
you are potentially vulnerable there.

43
00:03:07.300 --> 00:03:09.330
React, I love their approach here.

44
00:03:09.330 --> 00:03:13.810
You have to actually write the words
dangerously set in their HTML.

45
00:03:13.810 --> 00:03:19.220
And if you find yourself writing
that word, stop and think.

46
00:03:19.220 --> 00:03:21.260
Ejs, that is the unsafe thing there.

47
00:03:21.260 --> 00:03:23.610
So there are a couple of
things like that in this app,

48
00:03:23.610 --> 00:03:27.070
and we may be on our way
to going to fix them.

49
00:03:27.070 --> 00:03:31.190
So you'd wanna change that minus
sign after the first percent

50
00:03:31.190 --> 00:03:33.440
in the Ejs row to an equals.

51
00:03:33.440 --> 00:03:36.190
And then we would get our protection,
right?

52
00:03:36.190 --> 00:03:38.940
Angular, there's an attribute.

53
00:03:38.940 --> 00:03:43.030
Inside square brackets called innerHTML,
and that will be Unescaped.

54
00:03:43.030 --> 00:03:45.290
That one is not necessarily as obvious,

55
00:03:45.290 --> 00:03:48.780
unless you know that innerHTML
is potentially dangerous.

56
00:03:48.780 --> 00:03:52.590
You could let that sail through
a code review pretty easily.

57
00:03:52.590 --> 00:03:53.790
And then, finally, in Jade,

58
00:03:53.790 --> 00:03:58.100
if anyone is using Jade, that is the form
with exclamation marks on either side.

59
00:03:58.100 --> 00:04:02.702
That'll be treated as
basically an HTML value

60
00:04:02.702 --> 00:04:07.202
instead of a text value.
&gt;&gt; Mike North: So

61
00:04:07.202 --> 00:04:12.478
that is defense
&gt;&gt; Mike North: Yeah,

62
00:04:12.478 --> 00:04:14.980
that is defense number one, escaping data.

63
00:04:17.170 --> 00:04:19.050
Sanitize it first.

64
00:04:19.050 --> 00:04:23.820
Also, when you are putting stuff
in attributes, Escape it as well.

65
00:04:23.820 --> 00:04:27.950
There's a great node library
that is maintained by a set of

66
00:04:27.950 --> 00:04:29.310
penetration testers.

67
00:04:29.310 --> 00:04:33.260
It is not small, but it is comprehensive.

68
00:04:33.260 --> 00:04:38.680
So it might be good to take this if you
wanted to sanitize a database, this would

69
00:04:38.680 --> 00:04:42.700
be a good service, I think, to use where
you're going through all of your values,

70
00:04:42.700 --> 00:04:48.080
and basically evaluating whether
anything seems to raise any flags.

71
00:04:48.080 --> 00:04:53.110
There are so many different tricks
you can use involving things

72
00:04:53.110 --> 00:04:57.920
like capitalization and
adding funky forms of white space that

73
00:04:59.260 --> 00:05:05.060
are designed to basically pass through
rudimentary cross-site scripting filters.

74
00:05:05.060 --> 00:05:08.380
So it's not as simple as just look for
a script tag.

75
00:05:08.380 --> 00:05:13.333
There are other ways that you can
defeat some of the basic detection

76
00:05:13.333 --> 00:05:17.678
methods.
&gt;&gt; Mike North: And then, be super, super

77
00:05:17.678 --> 00:05:22.810
careful, anywhere that you're putting
a user's value templated into code.

78
00:05:22.810 --> 00:05:27.500
Meaning if you have a JavaScript file
that, when it's rendered up by a server,

79
00:05:27.500 --> 00:05:31.230
it puts something into place,
that is absolutely bad.

80
00:05:31.230 --> 00:05:32.790
Do not do that.

81
00:05:32.790 --> 00:05:37.080
Have it so that your code will go and
retrieve a value from somewhere and

82
00:05:37.080 --> 00:05:38.780
consume the value that way.

83
00:05:38.780 --> 00:05:44.399
You want user input to be
treated as values, not as code.

84
00:05:45.460 --> 00:05:48.860
And in this case,
that could easily become code, right?

85
00:05:48.860 --> 00:05:51.240
If it starts and ends with a quote, and

86
00:05:51.240 --> 00:05:55.230
then we have alert whatever in the middle,
that'll be executed.

87
00:05:55.230 --> 00:05:59.510
But there's no way that that would happen
if, for example, it was a templated JSON

88
00:05:59.510 --> 00:06:03.929
file that your code was reading, cuz you
cannot have executable code in there.

89
00:06:04.970 --> 00:06:06.960
Does that make sense to everyone?

90
00:06:06.960 --> 00:06:09.190
Keep user values a values, not as code.

