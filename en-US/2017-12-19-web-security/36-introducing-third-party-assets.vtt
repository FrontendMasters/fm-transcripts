WEBVTT

1
00:00:00.500 --> 00:00:04.590
&gt;&gt; Mike North: So, last area that we'll
look at when it comes to client side

2
00:00:04.590 --> 00:00:11.370
development, well, attacking by way
of the client, is third party assets.

3
00:00:11.370 --> 00:00:15.740
And when we talk about third party assets,
all three of these things apply.

4
00:00:15.740 --> 00:00:20.600
On the top, we're pulling in a resource
that we're not hosting, right?

5
00:00:20.600 --> 00:00:22.070
Someone else is hosting that.

6
00:00:22.070 --> 00:00:24.220
We're pulling it in off of a cdn.

7
00:00:24.220 --> 00:00:27.300
In the second example,
we are using a version dependency.

8
00:00:27.300 --> 00:00:31.939
We're pulling down source
code from some repository.

9
00:00:31.939 --> 00:00:36.314
And in fact, we have a fuzzy dependency
here, where we're saying we'll allow patch

10
00:00:36.314 --> 00:00:39.959
and minor version increments to come
into our code base any time we go and

11
00:00:39.959 --> 00:00:41.860
retrieve dependencies.

12
00:00:41.860 --> 00:00:45.280
Right, we'll take 4.16, 4.18,
we'll take any of those.

13
00:00:46.480 --> 00:00:53.290
The third and the worst, honestly,
is when someone says to use our service,

14
00:00:53.290 --> 00:00:58.750
please drop this script tag, this big
chunk of HTML right into your application.

15
00:00:59.860 --> 00:01:00.970
So that's bad.

16
00:01:00.970 --> 00:01:04.270
Worse is when we kind of look at
what this script is doing, and

17
00:01:04.270 --> 00:01:07.831
I don't know if it's because I've
been doing this for a while and

18
00:01:07.831 --> 00:01:10.640
can cross my eyes and
look at minified JavaScript.

19
00:01:10.640 --> 00:01:16.600
But it is pretty clear to me that
this is creating a new script tag.

20
00:01:16.600 --> 00:01:20.090
So this chunk of HTML that
we're dropping into our app,

21
00:01:21.190 --> 00:01:26.080
when it runs, it'll create its own script
tag that will bring in the real program.

22
00:01:26.080 --> 00:01:31.530
This is bad because it can
basically be released,

23
00:01:31.530 --> 00:01:35.410
a new version can be released
without us deploying our app.

24
00:01:35.410 --> 00:01:38.688
The same might be true of
the first example here, but

25
00:01:38.688 --> 00:01:42.799
at least someone's making
the attempt to version that, right?

26
00:01:42.799 --> 00:01:47.699
3.2.1, one would assume that
they will not write over

27
00:01:47.699 --> 00:01:52.110
that same version,
that should be an immutable URL.

28
00:01:53.200 --> 00:01:57.374
Down here,
it's googleanalytics.com/analytics.js.

29
00:01:57.374 --> 00:02:00.130
That is definitely not an immutable URL.

30
00:02:00.130 --> 00:02:03.876
They are changing that
program all the time.

31
00:02:03.876 --> 00:02:07.910
So all three of these we would say
are third party because we didn't write

32
00:02:07.910 --> 00:02:08.510
the code.

33
00:02:09.720 --> 00:02:14.060
We probably didn't thoroughly review
the code before bringing it into our app,

34
00:02:14.060 --> 00:02:18.440
and with the exception of the middle one,
we're not even hosting the code.

35
00:02:21.000 --> 00:02:24.260
So for situations like this where
we're bringing in a dependency,

36
00:02:24.260 --> 00:02:29.670
but at least we're
packaging it into our app,

37
00:02:29.670 --> 00:02:34.790
keep in mind that although people who
manage these dependencies, core teams,

38
00:02:34.790 --> 00:02:40.350
experts, they make big security mistakes,
just like everybody does.

39
00:02:40.350 --> 00:02:45.405
So do not fall into the trap of
thinking that it was written by,

40
00:02:45.405 --> 00:02:51.740
in particular, a big tech company, and
therefore you can blindly trust it.

41
00:02:51.740 --> 00:02:57.050
These people find issues in those
kinds of projects all the time.

42
00:02:57.050 --> 00:03:01.500
So recommendations for dealing with
this are to have reproducible build.

43
00:03:01.500 --> 00:03:05.900
So even if you have those fuzzy
dependencies, you want to make sure that

44
00:03:05.900 --> 00:03:12.260
you define when you're willing to take
in any change in those dependencies.

45
00:03:12.260 --> 00:03:18.015
You may say I'm okay with any
express version 415 or above.

46
00:03:18.015 --> 00:03:21.085
But that doesn't mean that
every time you NPM install,

47
00:03:21.085 --> 00:03:25.170
you necessarily wanna pull in
any potential new version there.

48
00:03:25.170 --> 00:03:28.940
Right, that is why we have
a yarn.lock in this file.

49
00:03:28.940 --> 00:03:32.690
Or if you're using NPM,
you probably have a package lock.

50
00:03:34.160 --> 00:03:39.330
That basically says, yes, we know that
we're allowed to take in new versions.

51
00:03:39.330 --> 00:03:42.614
But for this build,
until the user says all right, go and

52
00:03:42.614 --> 00:03:45.290
see what's upgradable and
we'll pull it in.

53
00:03:45.290 --> 00:03:47.040
That is what you're shipping.

54
00:03:49.580 --> 00:03:54.130
When you don't care about bleeding edge
features and an LTS release, right, long

55
00:03:54.130 --> 00:03:59.150
term support, when a long term support
release is available, consider using that.

56
00:03:59.150 --> 00:04:02.260
That is not as quickly a moving target,
right?

57
00:04:02.260 --> 00:04:05.512
They will usually release
at a slower frequency, but

58
00:04:05.512 --> 00:04:09.060
security issues will get
patched back into them.

59
00:04:09.060 --> 00:04:13.170
And the benefit there is that you're
using kind of hardened, well,

60
00:04:13.170 --> 00:04:14.370
hardened is the wrong word.

61
00:04:14.370 --> 00:04:16.740
You're using more mature code.

62
00:04:16.740 --> 00:04:20.662
You get all of the security
benefits of future development, but

63
00:04:20.662 --> 00:04:25.679
none of the risks associated with new
feature development between LTS releases.

64
00:04:25.679 --> 00:04:30.395
And essentially you're letting kind
of those who wish to adopt bleeding

65
00:04:30.395 --> 00:04:34.567
edge versions of a package to test it out,
identify any issues,

66
00:04:34.567 --> 00:04:38.960
fix any problems before you
start taking it on immediately.

67
00:04:38.960 --> 00:04:43.314
And this would be in the case where maybe
it's a library that you're just using in

68
00:04:43.314 --> 00:04:46.339
a basic way, and
you don't need the most modern stuff.

69
00:04:46.339 --> 00:04:49.550
Your code would have worked
with the ten year old version.

70
00:04:49.550 --> 00:04:53.560
So why are we taking each
new patch into account?

71
00:04:53.560 --> 00:04:55.820
Now, you would wanna look for
an LTS release there,

72
00:04:55.820 --> 00:04:59.296
because without that, you wouldn't be
getting any security fixes, right?

73
00:05:01.370 --> 00:05:05.310
So this doesn't mean just stick with an
old version, but when someone says here's

74
00:05:05.310 --> 00:05:10.830
a very stable version that doesn't get
incremented as much and it's secure and

75
00:05:10.830 --> 00:05:16.290
any new issues we find will be
ported into that, that's good.

76
00:05:16.290 --> 00:05:18.614
Support bug bounty programs and

77
00:05:18.614 --> 00:05:23.699
official security reporting channels
in your open source projects.

78
00:05:23.699 --> 00:05:27.912
So there are great programs now,
like Open Collective,

79
00:05:27.912 --> 00:05:31.073
that fund costs related to maintenance and

80
00:05:31.073 --> 00:05:35.770
development of projects that
we use all the time, right?

81
00:05:35.770 --> 00:05:40.040
I think webpack, and preact, and
a couple others that don't have

82
00:05:40.040 --> 00:05:43.880
an official association with a company,
they're supported by this kind of thing.

83
00:05:43.880 --> 00:05:48.815
What you wanna see is that some
of that is going to incentivizing

84
00:05:48.815 --> 00:05:54.510
security researchers to go and
look at what trouble could be caused here.

85
00:05:54.510 --> 00:05:59.040
You wanna see that because it shows you
that that is being taken seriously.

86
00:05:59.040 --> 00:06:01.387
It's not a bullet point on a website, but

87
00:06:01.387 --> 00:06:04.078
it is allocation of scarce resources,
right?

88
00:06:04.078 --> 00:06:06.070
They're putting some thought into it.

89
00:06:06.070 --> 00:06:13.444
Even just go into GitHub and see, do they
have an issue label called security?

90
00:06:13.444 --> 00:06:15.730
That at least shows you, and look at,

91
00:06:15.730 --> 00:06:20.250
have any issues been created there and
how seriously have they been taken?

92
00:06:20.250 --> 00:06:25.210
Finally, I like to use,

93
00:06:25.210 --> 00:06:28.320
when I'm writing my acceptance tests,
especially for

94
00:06:28.320 --> 00:06:33.500
a single page app, I like some form of
these acceptance tests to assert that only

95
00:06:33.500 --> 00:06:37.960
the requests that I expect
are being sent out, right?

96
00:06:37.960 --> 00:06:42.450
So this typically,
you wanna hijack XML HTTP request or

97
00:06:42.450 --> 00:06:47.780
hijack fetch so that you can simulate
a JSON response from some server.

98
00:06:47.780 --> 00:06:51.420
I do like to write these tests in such
a way that if a new request goes out for

99
00:06:51.420 --> 00:06:56.450
some sneaky reason and it didn't go out in
the last release, I am alerted to that.

100
00:06:56.450 --> 00:07:00.120
And any unusual change in the way
network traffic is behaving

101
00:07:00.120 --> 00:07:02.410
like that causes a test failure.

102
00:07:02.410 --> 00:07:04.350
Someone must go in and address that.

103
00:07:04.350 --> 00:07:08.040
And a minor package version
increment should not, I don't know,

104
00:07:08.040 --> 00:07:10.780
send a bunch of stuff to pastebin or
wherever.

105
00:07:12.216 --> 00:07:16.340
So assert that expected

106
00:07:16.340 --> 00:07:20.880
application behavior does not
change as you release new packages.

107
00:07:20.880 --> 00:07:26.290
And you can even do something as
simple as setting Chrome up to record

108
00:07:26.290 --> 00:07:32.060
network traffic and then assert
the list of URLs is of the same length

109
00:07:32.060 --> 00:07:36.650
when you updated ten of your packages,
right, something like that.

110
00:07:38.440 --> 00:07:44.530
So for third party assets,
one that you pull in from CDN, I'm

111
00:07:44.530 --> 00:07:51.940
not saying that any of these CDNs, like
CDN JS or unpackage, are untrustworthy.

112
00:07:51.940 --> 00:07:57.100
But they are maintained by
a group of people, and they

113
00:07:57.100 --> 00:08:02.170
hold the private keys to be able to deploy
new versions of things to these CDNs.

114
00:08:02.170 --> 00:08:08.010
So effectively, if you choose to trust
these people, then you're trusting

115
00:08:08.010 --> 00:08:14.440
them to not add something malicious to
these scripts that you're pulling in.

116
00:08:14.440 --> 00:08:17.627
And I'm not suggesting that
they have bad intent, but

117
00:08:17.627 --> 00:08:22.128
they could maybe just do something like
use that same password that they use to

118
00:08:22.128 --> 00:08:24.840
deploy a version of
a library somewhere else.

119
00:08:24.840 --> 00:08:27.921
And then that application
has a database leak,

120
00:08:27.921 --> 00:08:31.130
and now someone can figure this stuff out.

121
00:08:31.130 --> 00:08:34.720
So you're trusting them not only to have
good intentions, but to be vigilant and

122
00:08:34.720 --> 00:08:38.430
protecting you and your users and
to not alter that code.

123
00:08:39.490 --> 00:08:44.400
In the event that you do decide to
pull stuff in via a CDN, you can,

124
00:08:44.400 --> 00:08:47.640
of course, use, actually,
we didn't talk about this yet.

125
00:08:47.640 --> 00:08:51.030
You can use something similar
to what we're doing for

126
00:08:51.030 --> 00:08:55.630
our content security policy stuff, and
that is called subresource integrity.

127
00:08:55.630 --> 00:08:59.391
So what we've done here is we've added
to the script tag an attribute called

128
00:08:59.391 --> 00:09:00.049
integrity.

129
00:09:00.049 --> 00:09:04.199
And that is basically a hash, right?

130
00:09:04.199 --> 00:09:08.321
It's like a checksum of
the contents of that file.

131
00:09:08.321 --> 00:09:11.234
If the contents of that file change,
the browser,

132
00:09:11.234 --> 00:09:14.410
if it supports SRI,
will refuse to load this file.

133
00:09:14.410 --> 00:09:17.856
And we're also saying don't send any
cookies along with this request.

134
00:09:17.856 --> 00:09:22.546
So essentially, now,
we can pull stuff down from the CDN, and

135
00:09:22.546 --> 00:09:28.670
if even one semi colon was moved, we will
know about it and we fail secure, right?

136
00:09:28.670 --> 00:09:34.670
We fail secure means we
break in the event that

137
00:09:34.670 --> 00:09:38.680
we're potentially about to do something
dangerous, would we continue to operate?

138
00:09:40.860 --> 00:09:43.694
The easiest way to get this hash here,

139
00:09:43.694 --> 00:09:47.510
just like content security policy,
leave it out.

140
00:09:47.510 --> 00:09:49.007
Your browser will complain, and

141
00:09:49.007 --> 00:09:52.390
it'll tell you exactly the right
value to add into this.

142
00:09:52.390 --> 00:09:54.552
Right, and
this asset should not be changing much, so

143
00:09:54.552 --> 00:09:55.727
you don't need build tools.

144
00:09:55.727 --> 00:09:59.770
You just need to do it once per time
you change the version of the asset.

145
00:10:00.950 --> 00:10:02.490
You can do it on stylesheets too,
by the way.

146
00:10:04.880 --> 00:10:07.450
So for situations where we're
pulling in vendor tags,

147
00:10:07.450 --> 00:10:11.660
this is the chunk of HTML that
Google Analytics asks us to paste in.

148
00:10:12.840 --> 00:10:15.780
You have to be really careful about these.

149
00:10:15.780 --> 00:10:18.640
But keep in mind, it's just JavaScript.

150
00:10:18.640 --> 00:10:23.340
And you can modify that little chunk of
code that they asked you to put in there.

151
00:10:23.340 --> 00:10:28.590
And add your own integrity attribute
to the script tag that they create.

152
00:10:28.590 --> 00:10:32.720
Right, that code that you're pasting into
your project, that's under your control.

153
00:10:32.720 --> 00:10:36.340
And so you can basically say,
all right, Google Analytics,

154
00:10:36.340 --> 00:10:40.380
if you start messing with your JavaScript,
we're gonna get an error.

155
00:10:40.380 --> 00:10:47.750
And in fact, you can even have,
I believe that SRI errors will ping out.

156
00:10:47.750 --> 00:10:51.660
So there's a report URL thing you can
add to your content security policy,

157
00:10:51.660 --> 00:10:52.720
where basically you'll say,

158
00:10:53.750 --> 00:10:58.120
let us know at this endpoint if you
encounter any errors on a browser.

159
00:10:58.120 --> 00:11:01.684
I believe that SRI errors
will also use that URL, and

160
00:11:01.684 --> 00:11:07.122
you can be informed that hey, looks
like Google Analytics changed something.

161
00:11:07.122 --> 00:11:10.899
We'll have to evaluate that script and
upgrade to it.

162
00:11:10.899 --> 00:11:13.750
Now obviously,
it would break in the meantime.

163
00:11:13.750 --> 00:11:16.851
But if you're really trying
to tighten things up,

164
00:11:16.851 --> 00:11:21.539
that is the preferable option over
potentially allowing some malicious code

165
00:11:21.539 --> 00:11:25.290
into your app.
&gt;&gt; Mike North: Yes?

166
00:11:25.290 --> 00:11:26.339
&gt;&gt; Student: Is there,

167
00:11:26.339 --> 00:11:30.186
in kind of JavaScript world, anything

168
00:11:30.186 --> 00:11:34.902
like Brakeman that's used in Ruby world?
&gt;&gt; Mike North: So for

169
00:11:34.902 --> 00:11:39.797
aggregating logs and things like that?
&gt;&gt; Student: But also,

170
00:11:39.797 --> 00:11:44.190
I think, isn't that the gem checker?

171
00:11:44.190 --> 00:11:49.660
They'll kind of look and see if there's
been a security, it's a security scanner.

172
00:11:49.660 --> 00:11:52.387
So I think it also checks your gems, or

173
00:11:52.387 --> 00:11:55.977
maybe that's something else.
&gt;&gt; Mike North: I don't believe such

174
00:11:55.977 --> 00:11:58.398
a thing exists in the JavaScript world.

175
00:11:58.398 --> 00:12:02.979
I don't think there's any
automated scanning of modules.

176
00:12:02.979 --> 00:12:05.720
Sorry.
&gt;&gt; Student2: There is one, I mean,

177
00:12:05.720 --> 00:12:09.170
that I've seen, SNYK it's called.
&gt;&gt; Mike North: SNYK,

178
00:12:09.170 --> 00:12:12.707
should we take a look?
&gt;&gt; Student2: Sure, if you want.

179
00:12:12.707 --> 00:12:15.930
It has a library of third party
vulnerabilities, and it can be set up to

180
00:12:15.930 --> 00:12:20.253
automatically scan your build.
&gt;&gt; Mike North: Interesting.

181
00:12:20.253 --> 00:12:21.020
&gt;&gt; Student2: Kind of a new thing,

182
00:12:21.020 --> 00:12:23.550
but it's pretty cool.
&gt;&gt; Mike North: Okay, I have not seen this

183
00:12:23.550 --> 00:12:28.470
before, but definitely fits into
what we were just talking about.

184
00:12:28.470 --> 00:12:32.010
So looks like it is library
scanning as a service.

185
00:12:33.400 --> 00:12:38.333
And this is fantastic cuz there's
not even a consolidated place where

186
00:12:38.333 --> 00:12:40.513
people are reporting issues.

187
00:12:40.513 --> 00:12:43.810
It is great to be notified
of stuff that's happening.

188
00:12:43.810 --> 00:12:45.871
So, I haven't used this,
I'm not here endorsing it.

189
00:12:45.871 --> 00:12:50.817
But I'm glad to see that people are
working on solving this problem because

190
00:12:50.817 --> 00:12:52.635
it's a tough one, right?

