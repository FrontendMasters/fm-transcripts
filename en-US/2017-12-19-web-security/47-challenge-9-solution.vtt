WEBVTT

1
00:00:00.070 --> 00:00:04.601
&gt;&gt; Mike North: So we're gonna learn how
to defend against man in the middle

2
00:00:04.601 --> 00:00:09.674
attacks by installing a certificate
in our app and serving our site

3
00:00:09.674 --> 00:00:14.445
over https instead of plain http.
&gt;&gt; Mike North: So

4
00:00:14.445 --> 00:00:18.448
what we will end up doing, I'm just
gonna copy this little bit of text here,

5
00:00:18.448 --> 00:00:20.030
we will need that in a moment.

6
00:00:21.610 --> 00:00:25.798
Go over to our app, and I can delete this,

7
00:00:25.798 --> 00:00:31.676
that was just our demo for
making subresource integrity.

8
00:00:31.676 --> 00:00:38.439
We go into index.js and I'm just
going to find out where http is used.

9
00:00:38.439 --> 00:00:40.280
I could just do it right here.

10
00:00:43.020 --> 00:00:43.660
Or you know what?

11
00:00:43.660 --> 00:00:45.710
I actually think it's in a different file,
crap.

12
00:00:46.800 --> 00:00:47.478
Yep, there it is.

13
00:00:47.478 --> 00:00:52.840
index.js, not serverindex.js.

14
00:00:52.840 --> 00:00:55.900
So we've got this http here.

15
00:00:55.900 --> 00:00:58.460
We're gonna basically
replace it with https, so

16
00:00:58.460 --> 00:01:00.620
we can just go ahead and add that here.

17
00:01:02.300 --> 00:01:05.130
I'm gonna carry this with me as
we find where that was used.

18
00:01:05.130 --> 00:01:08.333
Should be a little red squiggle now
because we don't have that defined

19
00:01:08.333 --> 00:01:14.525
anymore.
&gt;&gt; Mike North: There it is,

20
00:01:14.525 --> 00:01:16.060
http create server.

21
00:01:16.060 --> 00:01:19.140
So here's our new method for
creating a server with https.

22
00:01:19.140 --> 00:01:20.050
We don't want this anymore.

23
00:01:21.610 --> 00:01:25.610
And we've got a file name and we've got
a key, and then the key passphrase.

24
00:01:25.610 --> 00:01:31.370
So, all that's left is for
us to generate a certificate.

25
00:01:33.140 --> 00:01:36.570
So let's go through
those openSSL commands.

26
00:01:37.570 --> 00:01:40.169
So first, generating the secure key.

27
00:01:48.096 --> 00:01:49.670
&gt;&gt; Mike North: Did I do something wrong?

28
00:01:49.670 --> 00:01:51.150
Maybe I flipped this.

29
00:01:52.540 --> 00:01:55.880
Turns out pasting multi-line is not nice.

30
00:01:55.880 --> 00:01:58.860
Okay, so now we're being
asked to enter a passphrase.

31
00:01:58.860 --> 00:02:03.697
This, private keys are not
something that you want

32
00:02:03.697 --> 00:02:07.200
to store in their unencrypted form.

33
00:02:07.200 --> 00:02:12.000
You basically want this to be locked
with the password, symmetric encrypted.

34
00:02:12.000 --> 00:02:16.800
It's like it is half of a public
key encryption key pair and

35
00:02:16.800 --> 00:02:19.170
we're going to symmetric encrypt this so

36
00:02:19.170 --> 00:02:23.490
that any time we wanna use it we must
provide the pass key in order to use it.

37
00:02:23.490 --> 00:02:25.980
That means that if someone
gets a hold of this file,

38
00:02:25.980 --> 00:02:29.200
they're basically gonna have to
work really hard to open it up.

39
00:02:29.200 --> 00:02:30.580
So I'm gonna create a super,

40
00:02:30.580 --> 00:02:37.140
super safe password.
&gt;&gt; Mike North: Okay, so enter it again.

41
00:02:39.330 --> 00:02:42.950
All right, so now we have our key,
and I'm gonna put that here.

42
00:02:42.950 --> 00:02:47.736
I'll build the path for that, so
this is the proper way to do it in node.

43
00:02:53.350 --> 00:02:53.990
&gt;&gt; Mike North: I'd do something like this.

44
00:02:58.519 --> 00:03:03.575
&gt;&gt; Mike North: Or there's __dirname plus

45
00:03:03.575 --> 00:03:11.060
my, sorry comma separated my private key.

46
00:03:14.130 --> 00:03:15.790
So there we've got our path.

47
00:03:15.790 --> 00:03:16.993
And for a passphrase,

48
00:03:16.993 --> 00:03:20.360
I'm actually not going to commit
this into my GIT repository.

49
00:03:20.360 --> 00:03:21.550
That would be a bad idea.

50
00:03:21.550 --> 00:03:26.040
What we're going to do here is pass
this in as an environment variable.

51
00:03:26.040 --> 00:03:29.970
And that will mean that we can set
that up on our production machines,

52
00:03:29.970 --> 00:03:34.700
whoever needs to know about it, but our
source code is not gonna deal with this.

53
00:03:34.700 --> 00:03:37.750
So maybe our developers don't even
have access to this private key.

54
00:03:37.750 --> 00:03:39.200
They probably shouldn't.

55
00:03:39.200 --> 00:03:41.830
And the SRA team, maybe only one or

56
00:03:41.830 --> 00:03:45.280
two people would have the ability
to actually read this thing.

57
00:03:45.280 --> 00:03:48.919
Only the server that's running
should be able to grab this.

58
00:03:48.919 --> 00:03:52.106
And if you work for
an Internet scale company,

59
00:03:52.106 --> 00:03:57.092
like LinkedIn, I'm not sure,
I don't think anybody has the ability,

60
00:03:57.092 --> 00:04:01.772
possibly at the executive level,
they could grab the private key.

61
00:04:01.772 --> 00:04:05.579
But everyone else just refers
to it in an abstract way and

62
00:04:05.579 --> 00:04:09.467
when our production apps have
been up like they are gravid

63
00:04:09.467 --> 00:04:14.013
programmatically from something
that manages the keys, right?

64
00:04:14.013 --> 00:04:16.545
So you don't want human hands touching

65
00:04:16.545 --> 00:04:21.444
this.
&gt;&gt; Mike North: We'll just call it

66
00:04:21.444 --> 00:04:21.984
passphrase.

67
00:04:23.620 --> 00:04:25.380
So now we need to generate a certificate.

68
00:04:26.420 --> 00:04:28.440
For that we need a public key.

69
00:04:28.440 --> 00:04:31.774
And I will get rid of
these slashes in a moment.

70
00:04:41.279 --> 00:04:43.090
&gt;&gt; Mike North: The private key's password.

71
00:04:43.090 --> 00:04:49.143
We need to enter this anytime we use it.
&gt;&gt; Mike North: Okay so

72
00:04:49.143 --> 00:04:50.500
now I've got my public key.

73
00:04:50.500 --> 00:04:52.090
We can look at what these look like.

74
00:04:52.090 --> 00:04:54.710
Here's my encrypted private key and

75
00:04:54.710 --> 00:04:57.890
you know that it's encrypted
because you see this.

76
00:04:57.890 --> 00:05:01.690
If it weren't encrypted that
word encrypted would be missing.

77
00:05:01.690 --> 00:05:02.980
Public key is not encrypted.

78
00:05:02.980 --> 00:05:04.710
Anyone can use this right?

79
00:05:04.710 --> 00:05:06.820
This is out there for the world to use.

80
00:05:06.820 --> 00:05:10.430
It is for creating messages
only that the server can read.

81
00:05:10.430 --> 00:05:12.080
So there's the public key.

82
00:05:12.080 --> 00:05:14.570
No the encrypted word is not present.

83
00:05:14.570 --> 00:05:17.510
So now we will copy this.

84
00:05:17.510 --> 00:05:19.370
Use it for the cert as well.

85
00:05:19.370 --> 00:05:21.780
I think, we don't have a cert yet.

86
00:05:21.780 --> 00:05:22.310
One last step.

87
00:05:23.810 --> 00:05:25.020
Let me close all this.

88
00:05:25.020 --> 00:05:25.890
We don't need it anymore.

89
00:05:28.020 --> 00:05:30.580
So generate the certificate
signing request.

90
00:05:32.380 --> 00:05:33.430
That's the next step.

91
00:05:33.430 --> 00:05:35.880
And this requires entering
some additional information,

92
00:05:37.100 --> 00:05:40.750
where we would say, passphrase.

93
00:05:43.300 --> 00:05:44.210
Okay, so now.

94
00:05:44.210 --> 00:05:47.010
If you ever wondered where
all the information when you

95
00:05:47.010 --> 00:05:50.400
look at a certificate,
where all that comes from, this is it.

96
00:05:50.400 --> 00:05:53.520
This is where you enter
the name of your business and

97
00:05:53.520 --> 00:05:58.260
the name of the server that you're looking
to align with to name the certificate so

98
00:05:58.260 --> 00:06:00.230
it works for a particular domain.

99
00:06:00.230 --> 00:06:01.730
All of that happens now.

100
00:06:01.730 --> 00:06:04.720
So I'll say we're from the US.

101
00:06:04.720 --> 00:06:08.943
Our state is,
&gt;&gt; Mike North: Anyone know where

102
00:06:08.943 --> 00:06:13.120
Equifax is?
&gt;&gt; Mike North: State of confusion.

103
00:06:14.620 --> 00:06:15.563
We'll leave this out.

104
00:06:15.563 --> 00:06:19.163
Organization name, so

105
00:06:19.163 --> 00:06:25.284
[LAUGH] Private Data Disclosure Division

106
00:06:29.730 --> 00:06:30.545
&gt;&gt; Mike North: Common name, so

107
00:06:30.545 --> 00:06:34.460
this is where we'd wanna do something
that relates to our domain name.

108
00:06:34.460 --> 00:06:36.110
So see where it says FQDN?

109
00:06:36.110 --> 00:06:38.650
That's fully qualified domain name.

110
00:06:38.650 --> 00:06:46.249
And in this case,
let's call it equihax.lvh.me.

111
00:06:46.249 --> 00:06:52.620
Because lvh.me is the wildcard
domain we can use for localhost.

112
00:06:52.620 --> 00:06:55.610
We're gonna use this so that we can see
like that, hey, it works for one domain.

113
00:06:55.610 --> 00:06:58.008
Here's a warning that we get
when we try different domain.

114
00:06:58.008 --> 00:07:07.090
Email address.
&gt;&gt; Mike North: And challenge password.

115
00:07:08.160 --> 00:07:11.731
So we're not gonna add a challenge
password to this certificate signing

116
00:07:11.731 --> 00:07:12.265
request.

117
00:07:12.265 --> 00:07:17.051
You would add this if you were
sending it over a connection that you

118
00:07:17.051 --> 00:07:22.011
didn't trust and maybe the certificate
authority would say here,

119
00:07:22.011 --> 00:07:25.680
use this challenge password
to encrypt your CSR.

120
00:07:25.680 --> 00:07:29.185
We're not gonna bother with it, it is
not as necessary to put it here as it

121
00:07:29.185 --> 00:07:33.845
would be on the private key.
&gt;&gt; Mike North: Okay, so

122
00:07:33.845 --> 00:07:38.080
now we've got our certificate signing
request, and that's this thing here.

123
00:07:38.080 --> 00:07:42.025
Again, not readable.
&gt;&gt; Mike North: And

124
00:07:42.025 --> 00:07:45.470
the last step here is to generate,
to sign that certificate and

125
00:07:45.470 --> 00:07:48.890
finally our certificate
will end up being created.

126
00:07:48.890 --> 00:07:51.950
So delete all these new lines.

127
00:07:54.360 --> 00:07:56.460
We're gonna say days one instead of three.

128
00:07:57.920 --> 00:07:58.780
All right, and this should work.

129
00:08:00.150 --> 00:08:02.320
And it didn't, what's wrong?

130
00:08:02.320 --> 00:08:07.720
There's the key, there's the out,
myrequest.csr that looks right.

131
00:08:07.720 --> 00:08:11.178
What are you complaining about openSSL?

132
00:08:11.178 --> 00:08:16.044
Unknown option myrequest.csr.

133
00:08:24.513 --> 00:08:25.176
&gt;&gt; Mike North: That looks right,

134
00:08:25.176 --> 00:08:27.390
and there's definitely an in argument,
is there not?

135
00:08:27.390 --> 00:08:29.892
There it is, in arg.

136
00:08:29.892 --> 00:08:33.960
Let's get rid of this,
make sure I don't have a new line.

137
00:08:40.800 --> 00:08:41.360
&gt;&gt; Mike North: Odd.

138
00:08:51.518 --> 00:08:52.254
&gt;&gt; Mike North: So

139
00:08:55.169 --> 00:08:56.070
&gt;&gt; Mike North: I'm just looking for

140
00:08:56.070 --> 00:08:59.037
other ones that I have run,
just to see what those commands look like.

141
00:09:19.864 --> 00:09:23.820
&gt;&gt; Mike North: Looks right.

142
00:09:23.820 --> 00:09:25.343
OpenSSL x509.

143
00:09:34.320 --> 00:09:34.820
&gt;&gt; Mike North: Okay.

144
00:09:36.790 --> 00:09:38.399
Let me just check my
file names one more time.

145
00:09:45.051 --> 00:09:47.168
&gt;&gt; Mike North: My private key.

146
00:09:47.168 --> 00:09:50.749
My certificate there, my request.csr.

147
00:09:58.348 --> 00:09:58.875
&gt;&gt; Mike North: Nope.

148
00:10:03.910 --> 00:10:04.858
&gt;&gt; Mike North: All right.

149
00:10:04.858 --> 00:10:11.085
Days three.
&gt;&gt; Mike North: Come on now.

150
00:10:20.814 --> 00:10:21.777
&gt;&gt; Mike North: Let's just try a part of

151
00:10:21.777 --> 00:10:23.060
the command.

152
00:10:23.060 --> 00:10:24.969
You need a private key
to sign with obviously.

153
00:10:40.106 --> 00:10:40.906
&gt;&gt; Mike North: Hm.

154
00:10:40.906 --> 00:10:42.314
&gt;&gt; Student2: Is your private key

155
00:10:42.314 --> 00:10:42.981
there?
&gt;&gt; Mike North: It's right here.

156
00:10:42.981 --> 00:10:48.305
[CROSSTALK] You know what?

157
00:10:48.305 --> 00:10:53.414
No, I just created the CSR, it's just
not giving me very useful output.

158
00:10:59.200 --> 00:10:59.900
&gt;&gt; Mike North: There it is.

159
00:10:59.900 --> 00:11:02.679
Okay, what's the error message?

160
00:11:02.679 --> 00:11:04.295
Unknown option req.

161
00:11:04.295 --> 00:11:07.609
That was the one where
I took the dash off,

162
00:11:07.609 --> 00:11:12.046
that I shouldn't have done.
&gt;&gt; Mike North: Okay,

163
00:11:12.046 --> 00:11:14.314
unknown option my-restquest.csr.

164
00:11:14.314 --> 00:11:18.828
I've got in, the input file,

165
00:11:18.828 --> 00:11:22.307
out is the output file.

166
00:11:30.336 --> 00:11:31.337
&gt;&gt; Mike North: Actually this,

167
00:11:31.337 --> 00:11:33.344
that was the full command there.

168
00:11:42.641 --> 00:11:48.059
&gt;&gt; Mike North: Unknown option
my-request.cxr, which is there after in.

169
00:11:57.190 --> 00:11:58.022
&gt;&gt; Mike North: I must have updated

170
00:11:58.022 --> 00:12:05.390
a version of my library or something.
&gt;&gt; Mike North: Let's try this.

171
00:12:06.520 --> 00:12:07.875
Maybe it's sensitive to order.

172
00:12:16.110 --> 00:12:18.093
&gt;&gt; Student2: I pasted in what I used and

173
00:12:18.093 --> 00:12:23.200
what worked in the chat.
&gt;&gt; Student2: It looks exactly

174
00:12:23.200 --> 00:12:31.234
like what you've been doing but.
&gt;&gt; Mike North: Can

175
00:12:31.234 --> 00:12:33.626
you check your version?
&gt;&gt; Student2: Yeah.

176
00:12:39.634 --> 00:12:40.948
&gt;&gt; Mike North: There is no version command

177
00:12:40.948 --> 00:12:41.580
on OpenSSL.

178
00:12:45.570 --> 00:12:50.435
Not user friendly, indeed.
&gt;&gt; Student2: Space

179
00:12:50.435 --> 00:12:55.840
version.
&gt;&gt; Mike North: There we go.

180
00:12:57.320 --> 00:12:58.287
&gt;&gt; Student2: Yeah, we're on the same.

181
00:12:58.287 --> 00:12:59.740
&gt;&gt; Mike North: [LAUGH] What?

182
00:12:59.740 --> 00:13:08.473
Okay, let me try hand creating this
openssl x509 -req -in and then my-request.

183
00:13:08.473 --> 00:13:13.114
And then signkey,

184
00:13:13.114 --> 00:13:19.207
my.private.key, out

185
00:13:19.207 --> 00:13:26.171
my certificate.crt-days

186
00:13:26.171 --> 00:13:31.623
1.
&gt;&gt; Mike North: Dear lord,

187
00:13:31.623 --> 00:13:33.600
that looks like exactly what I was typing.

188
00:13:33.600 --> 00:13:37.900
All right, we'll have to look at
the instant replay on that but whatever.

189
00:13:37.900 --> 00:13:39.720
So passphrase for the private key.

190
00:13:41.600 --> 00:13:43.910
And we have created our certificate,
here it is.

191
00:13:43.910 --> 00:13:49.150
So you'll note that if you
get a certificate that is

192
00:13:49.150 --> 00:13:54.650
from a real certificate
authority that signs this.

193
00:13:54.650 --> 00:13:56.580
You may get more than one file.

194
00:13:56.580 --> 00:14:00.450
You will usually get any intermediate
certificates that you need in order to

195
00:14:00.450 --> 00:14:03.340
build what is called
the whole trust chain.

196
00:14:03.340 --> 00:14:07.100
So you wanna see often times it
is not really the trust root

197
00:14:07.100 --> 00:14:08.350
that signs your certificate.

198
00:14:08.350 --> 00:14:13.470
It would be an intermediate certificate
authority signs your certificate,

199
00:14:13.470 --> 00:14:16.510
and it's maybe trusted by another
intermediate authority, and

200
00:14:16.510 --> 00:14:18.730
then maybe that is trusted by the root.

201
00:14:18.730 --> 00:14:22.300
They really don't like to use
the root to sign every certificate,

202
00:14:22.300 --> 00:14:25.060
simply because if something goes wrong,

203
00:14:25.060 --> 00:14:30.636
if something gets out,
they have a lot of clean up to do, right?

204
00:14:30.636 --> 00:14:35.108
And so, if they want intermediate
authorities that expire in a shorter

205
00:14:35.108 --> 00:14:39.669
period of time and that way you can
manage this kind of stuff more easily.

206
00:14:39.669 --> 00:14:46.518
So, now we've got my private key and
my certificate.CRT.

207
00:14:46.518 --> 00:14:49.949
And we should be able to start this up and
see what happens.

208
00:14:56.464 --> 00:14:58.400
&gt;&gt; Mike North: Okay, so now, oop.

209
00:14:58.400 --> 00:14:59.040
Anything wrong?

210
00:15:00.450 --> 00:15:02.160
No startlet, okay.

211
00:15:02.160 --> 00:15:04.620
So what we've done here is we've
started here without providing that

212
00:15:04.620 --> 00:15:06.110
environment variable.

213
00:15:06.110 --> 00:15:09.330
https, this node module
could not read my key.

214
00:15:09.330 --> 00:15:13.997
So I'll add my super secret passphrase.
&gt;&gt; Mike North: Don't tell

215
00:15:13.997 --> 00:15:20.810
anybody.
&gt;&gt; Student2: I had that same error.

216
00:15:20.810 --> 00:15:21.340
&gt;&gt; Mike North: And it didn't work.

217
00:15:27.886 --> 00:15:29.900
&gt;&gt; Mike North: God, it's so silly.

218
00:15:29.900 --> 00:15:34.781
I think.
&gt;&gt; Student2: So I just shoved

219
00:15:34.781 --> 00:15:37.340
my passphrase right in there.
&gt;&gt; Mike North: Into that?

220
00:15:37.340 --> 00:15:38.219
&gt;&gt; Student2: Yeah, and

221
00:15:38.219 --> 00:15:40.669
I still had that funny error.

222
00:15:48.584 --> 00:15:56.918
&gt;&gt; Mike North: Really strange.
&gt;&gt; Mike North: So

223
00:15:56.918 --> 00:16:03.633
server options.
&gt;&gt; Mike North: Clearly

224
00:16:03.633 --> 00:16:05.380
takes the passphrase, that's a string.

225
00:16:07.360 --> 00:16:08.920
It's got a cert and a key.

226
00:16:16.908 --> 00:16:17.860
&gt;&gt; Mike North: Okay, so

227
00:16:17.860 --> 00:16:22.744
we've got my certificate
just to double check,

228
00:16:22.744 --> 00:16:28.113
my-certificate.crt, my-private
key is there.

229
00:16:28.113 --> 00:16:29.865
Honestly, I don't see any
reason why this shouldn't work.

230
00:16:40.785 --> 00:16:41.403
&gt;&gt; Mike North: Set cert.

231
00:16:45.390 --> 00:16:47.050
&gt;&gt; Mike North: It cannot read that key for

232
00:16:47.050 --> 00:16:48.820
some reason.

233
00:16:48.820 --> 00:16:53.300
Okay, so we'll have to leave this as
the last little bit of the solution that

234
00:16:53.300 --> 00:16:57.940
you'll look at the video course for
and check out the commit for

235
00:16:57.940 --> 00:16:58.869
the solution on this.

236
00:16:59.940 --> 00:17:02.310
This is in general what you have to do.

237
00:17:02.310 --> 00:17:05.430
I for the life of me cannot
understand what's going on here.

238
00:17:05.430 --> 00:17:10.339
So, it should be passphrase like that,
but it is probably like a slightly

239
00:17:10.339 --> 00:17:15.900
different openSSL command to put the key
in the right format that the server wants.

