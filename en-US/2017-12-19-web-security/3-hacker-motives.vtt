WEBVTT

1
00:00:00.640 --> 00:00:04.632
&gt;&gt; Mike North: So regardless of which
of these categories someone fits into,

2
00:00:04.632 --> 00:00:07.433
they kinda follow the same procedure here.

3
00:00:07.433 --> 00:00:09.740
The first thing they do is reconnaissance.

4
00:00:09.740 --> 00:00:12.140
They're gonna gather
information about your system.

5
00:00:12.140 --> 00:00:15.650
They're gonna use that in order to
research known vulnerabilities.

6
00:00:15.650 --> 00:00:17.860
So they might be able to
look at your system and

7
00:00:17.860 --> 00:00:23.390
see that, this person is using
Express on their back end.

8
00:00:23.390 --> 00:00:27.100
And they're using NGINX as a proxy server.

9
00:00:27.100 --> 00:00:29.370
And looks like they're using
a new version of React.

10
00:00:30.790 --> 00:00:35.491
They'll put that together and there
are databases of known vulnerabilities for

11
00:00:35.491 --> 00:00:39.789
certain versions of software that you
can just basically look up and see.

12
00:00:39.789 --> 00:00:43.412
There maybe some ready-made,
easy to execute attacks and

13
00:00:43.412 --> 00:00:45.883
it’s basically like pushing a button.

14
00:00:45.883 --> 00:00:50.365
You can run a shell script and it’ll
just pull an attack from a database and

15
00:00:50.365 --> 00:00:51.530
try to execute it.

16
00:00:53.135 --> 00:00:57.705
So, and I want you to also understand
that like the game over situation,

17
00:00:57.705 --> 00:01:00.605
it may not necessarily look
like a game over situation.

18
00:01:00.605 --> 00:01:04.645
Meaning sometimes getting
a foothold into a system is not,

19
00:01:04.645 --> 00:01:08.895
it is not like I can open up a terminal
and start executing my own code.

20
00:01:08.895 --> 00:01:13.350
It might just be that I can put
a file in a particular place.

21
00:01:13.350 --> 00:01:17.690
And the point is,
you wanna be able to get some foothold and

22
00:01:17.690 --> 00:01:19.400
then escalate from there.

23
00:01:19.400 --> 00:01:22.910
Maybe it's just a cross-site scripting
error, but I can eventually hit an admin's

24
00:01:22.910 --> 00:01:26.615
account and that will let me put
a file in a particular place and

25
00:01:26.615 --> 00:01:29.135
that will allow me to install a root kit.

26
00:01:29.135 --> 00:01:31.775
And at that point I have
full control of the system.

27
00:01:31.775 --> 00:01:33.515
But it happens in increments.

28
00:01:33.515 --> 00:01:36.625
And I want us to recognize
that the game over situation,

29
00:01:36.625 --> 00:01:39.125
that was the cross-site scripting error.

30
00:01:39.125 --> 00:01:42.620
That was the cross-site
scripting vulnerability.

31
00:01:42.620 --> 00:01:45.373
You have to assume that
these can be exploited and

32
00:01:45.373 --> 00:01:48.463
escalated to a point where
the consequences become way

33
00:01:48.463 --> 00:01:53.116
more severe than like you can run code
in my browser as an authenticated user.

34
00:01:53.116 --> 00:01:56.356
I understand that's not good,
but what's the big deal?

35
00:01:56.356 --> 00:02:00.982
The big deal is that is used to stage
something else, to stage something else,

36
00:02:00.982 --> 00:02:04.643
to stage something else, and
then you've lost everything.

37
00:02:04.643 --> 00:02:09.143
So we need to understand that I
may not be able to, right now,

38
00:02:09.143 --> 00:02:15.342
on your HTTPS connections to Frontend
Masters, interfere with what's going on.

39
00:02:15.342 --> 00:02:18.077
But I could get you to go
to another website, right?

40
00:02:18.077 --> 00:02:22.437
And then eventually get you to accept
a certificate that will then let me get in

41
00:02:22.437 --> 00:02:25.271
between you and
who you think you're talking to.

42
00:02:27.201 --> 00:02:30.021
So just lower the bar on
the game over situation.

