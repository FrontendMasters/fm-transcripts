WEBVTT

1
00:00:00.270 --> 00:00:04.310
&gt;&gt; Mike North: So the last little
couple topics I want to talk about,

2
00:00:04.310 --> 00:00:05.930
we don't have an exercise for them, but

3
00:00:05.930 --> 00:00:12.000
I just want to close out about like topics
that go beyond what we've done so far.

4
00:00:12.000 --> 00:00:15.680
The first is
a Certificate Authority Compromise.

5
00:00:15.680 --> 00:00:20.450
We trust certificate authorities
to identify the servers that we're

6
00:00:20.450 --> 00:00:21.870
talking to.

7
00:00:21.870 --> 00:00:24.250
But occasionally they do get compromised.

8
00:00:24.250 --> 00:00:25.490
This really does happen.

9
00:00:26.950 --> 00:00:31.780
A little while back,
this was in 2015, just two years ago,

10
00:00:31.780 --> 00:00:35.970
a certificate authority was
compromised by a government and

11
00:00:35.970 --> 00:00:39.939
it was found that the form
that this took was

12
00:00:41.460 --> 00:00:46.290
the government got ahold of
the private key of a certificate root.

13
00:00:46.290 --> 00:00:49.890
And so they could issue whatever
certificates they want, if they wanted.

14
00:00:49.890 --> 00:00:54.460
Among the things that ended
up happening were a wild card

15
00:00:54.460 --> 00:00:59.140
Google certificate was generated and
it was found for sale on the dark web.

16
00:00:59.140 --> 00:01:02.020
So star.google.com, that's pretty bad.

17
00:01:03.570 --> 00:01:09.390
Another one was that a huge DDoS
attack was directed at GitHub

18
00:01:10.620 --> 00:01:15.500
where basically the certificate was used
to inject scripts into ad trackers, these

19
00:01:15.500 --> 00:01:21.140
little like doubleclick.net, these things
that are ever-present on all of our pages.

20
00:01:21.140 --> 00:01:25.782
Imagine if with your
doubleclick.net you also got like,

21
00:01:25.782 --> 00:01:31.000
by the way every half a second
please send a request to GitHub.com.

22
00:01:31.000 --> 00:01:34.970
And multiply that by a billion people or
so, it starts to become very serious.

23
00:01:38.550 --> 00:01:41.440
When you trust a certificate authority,

24
00:01:41.440 --> 00:01:45.470
when you add a trust root to your
operating system, you basically add

25
00:01:45.470 --> 00:01:51.500
anything that this assigns to
the list of things that you trust.

26
00:01:51.500 --> 00:01:53.428
That is the point of being an authority.

27
00:01:53.428 --> 00:01:57.110
You sign others' certificates and
you're basically vouching for them, so

28
00:01:57.110 --> 00:02:02.090
you have to be careful about
whose vouches you listen to.

29
00:02:02.090 --> 00:02:06.340
So the one thing that save Google
in this case something called http

30
00:02:06.340 --> 00:02:08.350
public key pinning.

31
00:02:08.350 --> 00:02:13.580
And the idea behind this is, again it's
another header that you add to response.

32
00:02:13.580 --> 00:02:17.620
But the idea is rather than saying, for

33
00:02:17.620 --> 00:02:22.310
me to trust a certificate you must be
signed by an authority who I trust.

34
00:02:22.310 --> 00:02:25.660
And you must have a name that aligns
with the name of your domain.

35
00:02:27.040 --> 00:02:29.900
We basically say,
okay that's a minimum requirement.

36
00:02:29.900 --> 00:02:34.990
But also here is a hash of my public key.

37
00:02:34.990 --> 00:02:39.660
Remember this for a long time, and if you
ever see a certificate that otherwise

38
00:02:39.660 --> 00:02:45.020
would seem valid but it's fingerprint
does not match mine, do not trust it.

39
00:02:45.020 --> 00:02:46.920
You're not allowed to use it.

40
00:02:46.920 --> 00:02:51.440
So that's this pin value that we
have in the public key pin's header.

41
00:02:51.440 --> 00:02:54.800
We add what is called the public
key fingerprint to this.

42
00:02:54.800 --> 00:02:59.070
And essentially, that means,
no longer do we simply

43
00:03:00.150 --> 00:03:03.380
need that to be a valid certificate, but

44
00:03:03.380 --> 00:03:07.030
it has to be the very certificate
that I have and I am holding.

45
00:03:07.030 --> 00:03:11.990
At that point, you know that you're
not gonna have some malicious party

46
00:03:11.990 --> 00:03:15.720
who maybe has momentary control
over your domain going out and

47
00:03:15.720 --> 00:03:17.970
requesting a bunch of other certificates.

48
00:03:17.970 --> 00:03:25.110
And allowing users to basically
emulating you or man-in-the-middling

49
00:03:25.110 --> 00:03:31.870
with the certificate and able to interfere
with what's going on, it's only yours.

50
00:03:31.870 --> 00:03:35.960
So the problem here is almost
nobody uses this standard.

51
00:03:37.790 --> 00:03:42.836
This survey here, and I had to dig
down and research that raw data

52
00:03:42.836 --> 00:03:48.450
a little bit more cuz it's it seems
like suspect cuz it's so dramatic.

53
00:03:48.450 --> 00:03:53.550
375 domains in the top 1 million
Alexa sites use public key pinning,

54
00:03:53.550 --> 00:03:57.812
75 more are in report only
mode where they don't enforce,

55
00:03:57.812 --> 00:04:02.090
they just sort of ping URL,
whatever the detector problem.

56
00:04:03.370 --> 00:04:05.750
So it is a good idea to use this, but

57
00:04:05.750 --> 00:04:08.920
again make sure that you're
ready to make the transition.

58
00:04:08.920 --> 00:04:10.880
Same with HSTS,

59
00:04:10.880 --> 00:04:15.720
because now you've got this certificate
and you can't use another one.

60
00:04:15.720 --> 00:04:21.450
So if something happened to that or
if your private key were disclosed,

61
00:04:21.450 --> 00:04:25.370
now you're in a real bind because
you can't use another's certificate.

62
00:04:25.370 --> 00:04:29.290
You've got a bunch of users
that expect this one, right?

63
00:04:29.290 --> 00:04:33.230
And so if it gets compromised,
it becomes very difficult to revoke

64
00:04:33.230 --> 00:04:37.800
because now you've said browsers
only trust the one that I have.

65
00:04:37.800 --> 00:04:40.399
And sometimes we need to generate
new certificates ourselves.

66
00:04:42.370 --> 00:04:44.940
So finally I want to mention that we

67
00:04:44.940 --> 00:04:48.520
should treat certificates with
extreme care as developers.

68
00:04:48.520 --> 00:04:51.780
I want to just tell
a quick little story and

69
00:04:51.780 --> 00:04:55.120
I'm not trying to be criticizing or
harping on anyone.

70
00:04:55.120 --> 00:04:57.400
Vulnerabilities pop up everywhere.

71
00:04:57.400 --> 00:05:02.250
But this was one that was a collaboration
between a lot of really smart developers,

72
00:05:02.250 --> 00:05:04.510
and just something slipped
through the cracks.

73
00:05:04.510 --> 00:05:10.300
So if you use Webpack dev server
specifically, Preact-CLI,

74
00:05:10.300 --> 00:05:15.490
or create react app, there was
a vulnerability that just this summer,

75
00:05:15.490 --> 00:05:19.610
where there was just some private
key mishandling that happened.

76
00:05:19.610 --> 00:05:24.090
And it ended up prompting a bunch
of users to trust a route

77
00:05:24.090 --> 00:05:27.130
where the private key
was checked into GitHub.

78
00:05:27.130 --> 00:05:30.630
And so ultimately what that means is if

79
00:05:30.630 --> 00:05:33.910
you went to a Preact conference or
something.

80
00:05:33.910 --> 00:05:38.630
You could man in the in the middle a large
swath of people across any domain.

81
00:05:38.630 --> 00:05:41.790
Totally undetected because
you have the private key.

82
00:05:41.790 --> 00:05:44.960
We're needing to as UI
developers get more and

83
00:05:44.960 --> 00:05:49.750
more into dealing with
security issues like these.

84
00:05:49.750 --> 00:05:53.370
And it is important to sort of move

85
00:05:54.820 --> 00:05:58.850
any responsible speed and
to make sure we do things the right way.

86
00:05:58.850 --> 00:06:01.890
These teams did a fantastic
job of patching things and

87
00:06:01.890 --> 00:06:06.010
now what we get is an automatic
certificate generation on a per-machine

88
00:06:06.010 --> 00:06:10.160
basis where there's a hidden
certificate authority.

89
00:06:10.160 --> 00:06:13.990
And then each application has its own leaf
level certification that has a very short

90
00:06:13.990 --> 00:06:15.090
lifetime.

91
00:06:15.090 --> 00:06:19.200
It's a great solution and these teams
showed how much they care about their

92
00:06:19.200 --> 00:06:21.234
users by addressing it so promptly.

93
00:06:21.234 --> 00:06:24.322
But this was the mistake where, basically,

94
00:06:24.322 --> 00:06:28.637
a self-signed certificate,
by default, is a root, right?

95
00:06:28.637 --> 00:06:29.960
It is a certificate root.

96
00:06:29.960 --> 00:06:35.330
So you can call it local host, but this
can be used to sign other certificates.

97
00:06:35.330 --> 00:06:39.710
And so it's not really a one-off and
trusting this has the effect

98
00:06:39.710 --> 00:06:43.610
of basically making it so
that you trust anything at signs as well.

99
00:06:43.610 --> 00:06:47.360
And once the private key's exposed, anyone
can create something signed by this.

100
00:06:49.150 --> 00:06:52.554
So you would think that public
key pinning would help us

101
00:06:52.554 --> 00:06:56.923
here because this is the same as
a certificate authority compromise.

102
00:06:56.923 --> 00:07:01.498
But unfortunately, there in
the spec is a loophole that's says,

103
00:07:01.498 --> 00:07:05.177
basically we ignore public
key pending violations,

104
00:07:05.177 --> 00:07:09.870
if you've added this trust route
to your machine deliberately.

105
00:07:09.870 --> 00:07:11.018
Which in this case you would've done.

106
00:07:11.018 --> 00:07:19.160
So recognize that we as developers
are pretty terrible about security.

107
00:07:19.160 --> 00:07:22.410
We are actually worse then
the general public in terms of

108
00:07:22.410 --> 00:07:26.740
being vigilant about passwords and
protecting SSH keys and secrets and

109
00:07:26.740 --> 00:07:30.740
things, reviewing all of the code
we incorporate into our apps.

110
00:07:30.740 --> 00:07:35.240
So recognize that we have
a responsibility to our users to

111
00:07:35.240 --> 00:07:37.580
be a little bit more vigilant.

112
00:07:37.580 --> 00:07:41.960
And when things arise to
respond in a prompt way

113
00:07:41.960 --> 00:07:45.510
that demonstrates that we take this kinda
stuff seriously like those two teams did.

