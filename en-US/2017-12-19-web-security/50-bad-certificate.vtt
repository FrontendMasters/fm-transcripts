WEBVTT

1
00:00:00.450 --> 00:00:05.711
&gt;&gt; Mike North: So, let's say we go through
those steps, and we're using HTTPS.

2
00:00:05.711 --> 00:00:08.136
What we can do, though, is,

3
00:00:08.136 --> 00:00:13.860
we can even try to create a slightly
broken HTTPS connection here.

4
00:00:13.860 --> 00:00:16.345
So the users now, they've got this plugin,

5
00:00:16.345 --> 00:00:21.120
they clicked their bookmark
that was already HTTPS.

6
00:00:21.120 --> 00:00:23.830
So we can't really downgrade
them quite as easily.

7
00:00:23.830 --> 00:00:26.910
But what we can do is forge a certificate.

8
00:00:26.910 --> 00:00:31.242
And we're gonna take advantage
of the fact that there is

9
00:00:31.242 --> 00:00:35.110
something called server name indication.

10
00:00:35.110 --> 00:00:37.070
I've been mispronouncing that for a while.

11
00:00:37.070 --> 00:00:41.390
Server name indication, and basically,
that means that when you begin TLS

12
00:00:41.390 --> 00:00:45.720
handshake, you announce the domain
that you're attempting to talk to.

13
00:00:45.720 --> 00:00:50.398
And this is an important part of
how we can have multi-tenancy and

14
00:00:50.398 --> 00:00:53.375
things like Cloudflare, which is like,

15
00:00:53.375 --> 00:00:59.007
they do a great job at providing some,
especially DDOS protection for sites.

16
00:00:59.007 --> 00:01:02.583
But if you look at a certificate for
something that is operating through

17
00:01:02.583 --> 00:01:06.754
Cloudflare, you'll see that the bottom
of the certificate, it's about a list of

18
00:01:06.754 --> 00:01:10.525
100 different domains that that same
certificate is used for, right?

19
00:01:10.525 --> 00:01:13.630
It will work across all of those domains.

20
00:01:13.630 --> 00:01:18.531
And in order to disambiguate between
which one are you talking about, you have

21
00:01:18.531 --> 00:01:23.152
to basically announce your intention
to talk to that particular domain.

22
00:01:23.152 --> 00:01:29.130
We can use that for evil by basically
saying, so the user asks attacker,

23
00:01:29.130 --> 00:01:33.770
like, I'm looking to talk
to the newyorktimes.com.

24
00:01:33.770 --> 00:01:35.150
Are you the newyorktimes.com?

25
00:01:35.150 --> 00:01:39.200
And then it very quickly creates the
certificate and says, yes, of course I am.

26
00:01:39.200 --> 00:01:41.235
Now this is a broken certificate.

27
00:01:41.235 --> 00:01:42.680
You're gonna get a warning here.

28
00:01:42.680 --> 00:01:45.470
But you can create one
where the name matches.

29
00:01:45.470 --> 00:01:48.410
It'll just say,
this wasn't created by a trusted root.

30
00:01:48.410 --> 00:01:51.620
But if you were to click on it,
it can say nytimes.com,

31
00:01:51.620 --> 00:01:55.060
it can have the address in there of
the New York Times headquarters.

32
00:01:55.060 --> 00:01:59.950
It can look very official,
except for the fact that something's

33
00:01:59.950 --> 00:02:03.640
wrong with it in a way that most users
would not be able to understand.

34
00:02:03.640 --> 00:02:05.320
It's not signed by a trusted route, but

35
00:02:05.320 --> 00:02:09.330
it looks complete,
there's no misspellings, it looks fine.

36
00:02:11.470 --> 00:02:17.130
So yeah, even if you don't see anything
else about that initial HTTPS request, cuz

37
00:02:18.690 --> 00:02:24.130
you won't be able to see, for
example, which path they're

38
00:02:24.130 --> 00:02:29.670
trying to visit or the payload that
they're trying to send or query params.

39
00:02:29.670 --> 00:02:33.872
How much would you really suspect
just getting kicked back to the root

40
00:02:33.872 --> 00:02:35.120
of o domain.

41
00:02:35.120 --> 00:02:37.300
Like you clicked on a bookmark,
and it kicked me out, and

42
00:02:37.300 --> 00:02:40.780
I'm at the homepage of the app,
that is not suspicious behavior.

43
00:02:40.780 --> 00:02:42.550
So we don't really need
that in order to do this.

44
00:02:43.810 --> 00:02:46.130
This is the message that
users will be presented with.

45
00:02:47.160 --> 00:02:49.320
Google has done a lot of research, and

46
00:02:49.320 --> 00:02:51.650
I'm sure other browser teams
have done research too.

47
00:02:51.650 --> 00:02:54.100
But Google has worked
with universities and

48
00:02:54.100 --> 00:03:00.340
experts in this field to try to make
this as effective a warning as possible.

49
00:03:00.340 --> 00:03:05.695
And you see that it's red, and we've got
two buttons that say Proceed anyway and

50
00:03:05.695 --> 00:03:11.152
Back to safety.
&gt;&gt; Mike North: But we have

51
00:03:11.152 --> 00:03:15.320
a problem here in that we don't maintain
certificates very well as developers.

52
00:03:15.320 --> 00:03:21.811
So a lot of domains have
problems with certificates.

53
00:03:21.811 --> 00:03:27.708
And effectively, if you've ever heard
the story of the boy who cried wolf,

54
00:03:27.708 --> 00:03:32.955
we have trained users through
false alerts and false warnings.

55
00:03:32.955 --> 00:03:35.292
We've trained them to just
click through this stuff.

56
00:03:35.292 --> 00:03:42.035
And as a result,
&gt;&gt; Mike North: Chrome has been able to,

57
00:03:42.035 --> 00:03:46.877
through its vast improvements, reduce
the number of people who are wiling to

58
00:03:46.877 --> 00:03:50.550
click through this kind of
thing from 70% down to 42.

59
00:03:50.550 --> 00:03:56.340
So just less than half of users are kinda
just gonna proceed anyway, right?

60
00:03:56.340 --> 00:04:00.751
If you catch them when they're in a rush,

61
00:04:00.751 --> 00:04:06.305
say it's build some social
engineering around it.

62
00:04:06.305 --> 00:04:10.171
There's this sweepstakes prize, but in
the next 30 seconds after receiving this

63
00:04:10.171 --> 00:04:13.010
email, you have to go through and
you have to click this link.

64
00:04:13.010 --> 00:04:15.551
And then you throw that
warning in front of them.

65
00:04:15.551 --> 00:04:20.648
If you've really managed to convince
someone that the time is running out,

66
00:04:20.648 --> 00:04:25.020
they're absolutely gonna
choose convenience with risk.

67
00:04:25.020 --> 00:04:26.600
That is the choice people typically make.

68
00:04:28.110 --> 00:04:31.933
But that's a much higher number
than most people would imagine.

69
00:04:31.933 --> 00:04:35.644
42% of people click through
that kind of thing.

70
00:04:35.644 --> 00:04:37.465
And then even those who click through,

71
00:04:37.465 --> 00:04:41.232
half of them don't really understand
the risk that they're taking on, right?

72
00:04:41.232 --> 00:04:45.473
What could happen by way of
installing something on my machine,

73
00:04:45.473 --> 00:04:48.694
versus visiting a site
where there's an error,

74
00:04:48.694 --> 00:04:53.267
versus visiting something with plain HTTP,
versus public Wi-Fi?

75
00:04:53.267 --> 00:04:56.515
Your users do not understand
the risk exposure and

76
00:04:56.515 --> 00:04:59.620
how it varies with all
those different things.

