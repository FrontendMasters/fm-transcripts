WEBVTT

1
00:00:00.460 --> 00:00:04.620
&gt;&gt; Mike North: So there are three
plus one kinds of cross-site

2
00:00:04.620 --> 00:00:07.490
scripting attack categories.

3
00:00:07.490 --> 00:00:12.130
I say three plus one cuz the last
one here is debatable, like two or

4
00:00:12.130 --> 00:00:15.980
three penetration testing firms
talk about this last one.

5
00:00:15.980 --> 00:00:19.628
I'm going to present it to you as
a fourth category cuz it's interesting.

6
00:00:19.628 --> 00:00:21.742
So stored cross-site scripting attacks,

7
00:00:21.742 --> 00:00:24.790
that means you're adding
something to a database, right.

8
00:00:24.790 --> 00:00:27.430
I am registering an account and

9
00:00:27.430 --> 00:00:30.780
my user name has a script tag in it,
that is a stored record.

10
00:00:30.780 --> 00:00:34.990
And so
that data ends up living a long time, and

11
00:00:34.990 --> 00:00:39.530
it gets pulled out of the database for
the purpose of rendering pages.

12
00:00:39.530 --> 00:00:42.006
And so that is how that attack looks.

13
00:00:42.006 --> 00:00:46.500
A reflected cross-site scripting attack
means that a temporary response from

14
00:00:46.500 --> 00:00:54.380
a server, you can trick that into having
some code that executes on the page.

15
00:00:54.380 --> 00:01:00.024
So imagine if it was a validation
error message saying, I'm sorry,

16
00:01:00.024 --> 00:01:05.010
you may not sign up for
an account because script tag terrible is

17
00:01:05.010 --> 00:01:09.637
not a valid username, and
it would allow that to execute.

18
00:01:09.637 --> 00:01:13.513
DOM based cross-site scripting attacks,
they don't involve a server,

19
00:01:13.513 --> 00:01:17.512
so this would be like a query param being
rendered without any filtering of any

20
00:01:17.512 --> 00:01:20.066
kind, no filtering,
no escaping into the DOM.

21
00:01:20.066 --> 00:01:24.520
Blind cross-site scripting,

22
00:01:24.520 --> 00:01:30.470
you could argue that this is basically
the same as stored cross site scripting,

23
00:01:30.470 --> 00:01:33.700
but it is sort of
an interesting subcategory.

24
00:01:33.700 --> 00:01:36.260
So here's what that would look like.

25
00:01:36.260 --> 00:01:42.540
You worked really hard to shore
up your public facing app.

26
00:01:42.540 --> 00:01:48.400
But I can create some logging
out of that public facing app.

27
00:01:48.400 --> 00:01:51.380
You're tailoring the logs, maybe you're
bringing it into a log aggregator.

28
00:01:51.380 --> 00:01:53.650
It's an internal project at your company.

29
00:01:53.650 --> 00:01:58.920
And I can basically trick the app into
logging something out, that when it's

30
00:01:58.920 --> 00:02:03.800
read by your internal app,
which likely gets far less scrutiny,

31
00:02:03.800 --> 00:02:09.190
far less protection then
your public facing stuff.

32
00:02:09.190 --> 00:02:15.790
Now I can basically get an app that I
can't see to run this malicious code.

33
00:02:15.790 --> 00:02:19.427
And what's interesting about
these is they can actually,

34
00:02:19.427 --> 00:02:23.802
the attack can happen years after
that log gets put into place, right.

35
00:02:23.802 --> 00:02:29.027
So this would be, and it takes advantage
of the fact that all of our internal apps,

36
00:02:29.027 --> 00:02:33.192
I know for a fact having worked
with teams at Yahoo, at LinkedIn,

37
00:02:33.192 --> 00:02:36.470
at Microsoft, at Facebook, at Google.

38
00:02:36.470 --> 00:02:39.400
When they have an internal app,
there is far less review,

39
00:02:39.400 --> 00:02:43.710
far less scrutiny, you can take shortcuts,
they have fewer tests,

40
00:02:43.710 --> 00:02:47.890
just because that's
the mindset is that's for them.

41
00:02:47.890 --> 00:02:51.550
But if you're sucking public data into it,

42
00:02:51.550 --> 00:02:55.430
with that data can come,
that is a vector for an attack.

43
00:02:55.430 --> 00:02:58.530
And if you can trick that app
into evaluating something,

44
00:02:59.580 --> 00:03:03.640
now you're attacking an app that
you didn't even know was there.

45
00:03:03.640 --> 00:03:07.126
And you can take advantage
of usually escalated,

46
00:03:07.126 --> 00:03:12.023
usually you have credentials to be
able to do interesting things there

47
00:03:12.023 --> 00:03:15.261
because you are behind the firewall,
right.

48
00:03:15.261 --> 00:03:18.567
And you usually have the freedom to
read all data across the system that

49
00:03:18.567 --> 00:03:20.540
the application didn't have access to.

