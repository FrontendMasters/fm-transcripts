WEBVTT

1
00:00:00.590 --> 00:00:02.440
&gt;&gt; Mike North: So
one of the defenses we can use and

2
00:00:02.440 --> 00:00:04.100
I heard this as we went
around the room and

3
00:00:04.100 --> 00:00:08.960
talked about like different things that
security issues that were on our mind.

4
00:00:08.960 --> 00:00:12.950
I heard content security policy or CSP.

5
00:00:13.950 --> 00:00:15.910
The reason we have this is that,

6
00:00:15.910 --> 00:00:19.650
browsers can't tell the difference between
code that is brought in from a URL on

7
00:00:19.650 --> 00:00:22.700
a different domain versus
code that we're serving up.

8
00:00:22.700 --> 00:00:26.220
Meaning, like once we fetch that
resource and start processing it and

9
00:00:26.220 --> 00:00:30.540
treating it as a script,
it's really all one pile of code

10
00:00:30.540 --> 00:00:33.290
that's sitting within the same
execution environment.

11
00:00:33.290 --> 00:00:39.407
We really don't draw a distinction between
like, well, I got react from the CBN and

12
00:00:39.407 --> 00:00:43.730
I got my program from somewhere else,
it's all together.

13
00:00:43.730 --> 00:00:48.278
It all has the same rights and privileges.

14
00:00:48.278 --> 00:00:54.994
So CSP allows us to inform the browsers
to where it's allowed to receive stuff,

15
00:00:54.994 --> 00:01:01.950
or where it's allowed to do certain things
as it pertains to different sources.

16
00:01:01.950 --> 00:01:07.132
For example you could say,
as the app running on frontendmasters.com,

17
00:01:07.132 --> 00:01:14.130
I'm only allowed to execute scripts if
they come from assets.frontendmasters.com

18
00:01:14.130 --> 00:01:19.430
and Google Analytics, and
GitHub, and that's it.

19
00:01:19.430 --> 00:01:22.828
But if it comes from mike.works,
if it comes from my site,

20
00:01:22.828 --> 00:01:25.930
like the browser will basically,

21
00:01:25.930 --> 00:01:31.350
even if I injected some script that was
trying to download something I've hosted,

22
00:01:32.540 --> 00:01:37.410
the browser would fail to treat this
as JavaScript it's allowed to execute.

23
00:01:37.410 --> 00:01:39.770
So that's the point of
content security policy.

24
00:01:39.770 --> 00:01:44.300
It comes with, like you delivered this
information to browsers via either a meta

25
00:01:44.300 --> 00:01:48.120
tag or an HTTP response
header that looks like this.

26
00:01:48.120 --> 00:01:50.680
So this would say,
&gt;&gt; Mike North: In this case,

27
00:01:50.680 --> 00:01:54.630
we've got a directive which has a name.

28
00:01:54.630 --> 00:01:57.449
The name sort of tells
us what's the flavor

29
00:01:57.449 --> 00:02:00.510
of resource that we're talking about.

30
00:02:00.510 --> 00:02:01.530
And script source would mean,

31
00:02:01.530 --> 00:02:06.870
we're talking about where you're allowed
to get scripts that you may execute.

32
00:02:06.870 --> 00:02:11.640
Self would mean like, the origin that
this frame is currently being served on.

33
00:02:11.640 --> 00:02:16.060
And then this other domain I've
added a second allowed source.

34
00:02:16.060 --> 00:02:20.971
But for example plain HTTP on
the same domain would not be allowed,

35
00:02:20.971 --> 00:02:25.600
so an origin includes a protocol,
host, and a port.

36
00:02:25.600 --> 00:02:30.930
And so, now I've just said, if you get
JavaScript over plain HTTP, not allowed.

37
00:02:30.930 --> 00:02:34.040
Do not execute it in browser,
it will never get a chance to run.

38
00:02:36.240 --> 00:02:39.600
So you can have multiple directives
that are separated by semicolon.

39
00:02:39.600 --> 00:02:46.059
As you see below, you're allowed to
get web funds from Google funds.

40
00:02:47.090 --> 00:02:49.360
And that could be added
on top of script source.

41
00:02:49.360 --> 00:02:53.601
If you happen to double-down on
a directive, so if we had another script

42
00:02:53.601 --> 00:02:58.440
source after the font thing,
the second one would be disregarded.

43
00:02:58.440 --> 00:02:59.830
So only the first one is respected.

44
00:03:01.370 --> 00:03:05.850
And the default setting if you don't
specify anything for CSP, you kind of let

45
00:03:05.850 --> 00:03:12.090
everything fly, which is understandable
because the web existed before CSP.

46
00:03:12.090 --> 00:03:15.790
And this is the kind of thing where

47
00:03:15.790 --> 00:03:20.130
it is our responsibility to tighten
things up, it's our task to do.

48
00:03:20.130 --> 00:03:22.789
You can't start with
the default being restrictive.

49
00:03:24.930 --> 00:03:30.540
So here is a selection of,
it is a subset of useful CSP directives.

50
00:03:30.540 --> 00:03:36.050
Child source, that tells the browser that
you're only allowed to spin up workers and

51
00:03:36.050 --> 00:03:39.989
frames from the following domains,
from the following origins, rather.

52
00:03:41.070 --> 00:03:45.080
Connect source, that lets you have
a white list of what you're allowed to do

53
00:03:45.080 --> 00:03:49.590
stuff like fetch, open up WebSocket
connections, or use EventSource.

54
00:03:49.590 --> 00:03:51.639
If you don't know what Event source is,

55
00:03:51.639 --> 00:03:54.973
maybe you've heard the term server
sent events it's over HTTP.

56
00:03:54.973 --> 00:03:59.983
It's a long polling connection, basically
in the background that let's you Like,

57
00:03:59.983 --> 00:04:05.500
basically ping a client from the server
and say, hit me up for some more data.

58
00:04:05.500 --> 00:04:09.910
Form action, that is a white list of
origins that you can form posts to.

59
00:04:11.370 --> 00:04:16.060
Image, media, and object source,
those are get requests, right?

60
00:04:16.060 --> 00:04:20.120
That's a white list of only
allowing images from this domain or

61
00:04:20.120 --> 00:04:23.340
flesh embeds, things like that.

62
00:04:23.340 --> 00:04:27.070
We've got style sheets, upgrade and secure
request, this is an interesting one.

63
00:04:27.070 --> 00:04:31.270
So if you have a huge web application
you're trying to migrate to HTTPS and

64
00:04:31.270 --> 00:04:32.580
you have a whole bunch of links.

65
00:04:32.580 --> 00:04:38.670
Say you're a CMS,
a Content Management System.

66
00:04:38.670 --> 00:04:41.500
And users have generated a ton of content.

67
00:04:41.500 --> 00:04:45.290
And you've got a bunch of HTTP
links baked into your data.

68
00:04:45.290 --> 00:04:48.929
What this will do is it will instruct
the browser that you wish to take those

69
00:04:48.929 --> 00:04:50.580
links And rewrite them to HTTPS.

70
00:04:50.580 --> 00:04:57.720
And then, obviously you're gonna wannna
go through and alter your data over time.

71
00:04:57.720 --> 00:05:00.950
But this kind of tells
the browser that you wish

72
00:05:02.570 --> 00:05:05.880
to have it assist you in the meantime,
while that effort is underway.

73
00:05:07.346 --> 00:05:10.930
So default source, think of that as
the general fallback in the event that you

74
00:05:10.930 --> 00:05:13.720
don't have a named directive,

75
00:05:13.720 --> 00:05:19.820
like if we had no image source directive
in our content security policy.

76
00:05:19.820 --> 00:05:23.718
We could basically say, by default,
unless I've specifically name

77
00:05:23.718 --> 00:05:29.080
a directive, here are the sources
that you should allow for that.

78
00:05:31.030 --> 00:05:33.550
Any questions about
content security policy?

79
00:05:33.550 --> 00:05:35.660
&gt;&gt; Speaker 2: To a great and secure quest.

80
00:05:35.660 --> 00:05:41.250
This is gonna automatically, [COUGH] flip
HTTP to HTTPS then for in the browser like

81
00:05:41.250 --> 00:05:43.820
in the client or how is it gonna work?
&gt;&gt; Mike North: It depends what

82
00:05:43.820 --> 00:05:44.690
you mean by that.

83
00:05:44.690 --> 00:05:46.406
Can you?
&gt;&gt; Speaker 2: Well, so let's say the user

84
00:05:46.406 --> 00:05:48.360
requests the resource by HTTP.
&gt;&gt; Mike North: Yes.

85
00:05:48.360 --> 00:05:50.544
&gt;&gt; Speaker 2: And we have that specified,

86
00:05:50.544 --> 00:05:55.943
so is the browser gonna flip it to HTTPS?
&gt;&gt; Mike North: That's not what this does.

87
00:05:55.943 --> 00:06:00.811
Basically it means that when the browser
finds HTTP links in your HTML, it will

88
00:06:00.811 --> 00:06:03.620
attempt to rewrite them as HTTPS links.
&gt;&gt; Speaker 2: Okay, got it.

89
00:06:03.620 --> 00:06:04.290
&gt;&gt; Mike North: Right.

90
00:06:05.824 --> 00:06:06.680
&gt;&gt; Speaker 3: John and Chad's

91
00:06:06.680 --> 00:06:09.860
asking if older browsers
understand the headers for

92
00:06:09.860 --> 00:06:13.400
CSP?
&gt;&gt; Mike North: Some of them.

93
00:06:13.400 --> 00:06:20.200
So older browsers have implemented
a subset of CSP headers.

94
00:06:20.200 --> 00:06:23.530
In fact, some newer browsers
are trying to lean more on CSP and

95
00:06:23.530 --> 00:06:26.760
less on separate headers and meta tags.

96
00:06:26.760 --> 00:06:31.562
So you'll see, this is almost like,
if you've ever dealt with SEO and

97
00:06:31.562 --> 00:06:36.444
meta tags, we've gotta have a huge
list of non-intersecting stuff for

98
00:06:36.444 --> 00:06:37.820
Apple and Android.

99
00:06:37.820 --> 00:06:41.164
And you basically have to
just define whatever you can,

100
00:06:41.164 --> 00:06:45.020
hope that browser respect it,
and then put in some extra stuff.

101
00:06:45.020 --> 00:06:50.950
We'll talk about some legacy stuff we can
use for older browsers like IE9 that don't

102
00:06:50.950 --> 00:06:56.770
handle CSP or release than newer version
of CSP that I do stuff properly.

103
00:06:56.770 --> 00:06:59.960
So there are a few keywords we
can use along side sources.

104
00:06:59.960 --> 00:07:01.800
So sources are typically origins.

105
00:07:02.960 --> 00:07:06.699
None is like it's make
certain things forbidden,,

106
00:07:06.699 --> 00:07:11.610
imagine if we had object source,
like I don't allow flash.

107
00:07:11.610 --> 00:07:15.590
So object source none would say,
I never allow flash.

108
00:07:15.590 --> 00:07:20.890
In a document served up from this domain,
flash is off limits

109
00:07:22.530 --> 00:07:26.980
even if I happen to have some
in the code ,don't run it.

110
00:07:26.980 --> 00:07:31.600
Self is whatever the current origin is,
so that's usually pretty safe and

111
00:07:31.600 --> 00:07:32.120
pretty smart.

112
00:07:32.120 --> 00:07:35.535
Same origin, like we already trust
that for a variety of reasons.

113
00:07:35.535 --> 00:07:39.740
Unsafe-inline, that allows
inline JavaScript and CSS,

114
00:07:39.740 --> 00:07:45.710
meaning like a unclick equals
execute this function,

115
00:07:45.710 --> 00:07:48.625
or a script tag that's
baked into your HTML.

116
00:07:48.625 --> 00:07:51.140
Unsafe-eval would allow eval.

117
00:07:52.480 --> 00:07:55.510
So by default, if you have script source,

118
00:07:55.510 --> 00:08:01.200
if you're gonna start to define the kinds
of JavaScript that you'll allow.

119
00:08:01.200 --> 00:08:02.750
The default is like, all right,

120
00:08:02.750 --> 00:08:06.730
now that you're defining it, we're not
in everything is allowed mode anymore.

121
00:08:07.780 --> 00:08:10.010
The default position is,
eval is not allowed,

122
00:08:10.010 --> 00:08:16.170
which is a good thing simply because that
is a potentially dangerous thing to do.

123
00:08:16.170 --> 00:08:18.450
Now unfortunately on the other side,

124
00:08:18.450 --> 00:08:21.810
we found that eval can be
a performant thing to do.

125
00:08:21.810 --> 00:08:27.800
Some of the common templating engines and
stuff, instead of sending code over

126
00:08:27.800 --> 00:08:33.550
the wire to represent a UI component,
they'll send a string or something else.

127
00:08:33.550 --> 00:08:36.740
And we only evaluate that
into code just in time.

128
00:08:36.740 --> 00:08:41.424
We only pay the cost of turning text
into an abstract syntax tree right

129
00:08:41.424 --> 00:08:42.730
before we render.

130
00:08:42.730 --> 00:08:45.500
And so, there you might find that
you have to flip the switch back on.

131
00:08:47.940 --> 00:08:50.870
All right, however,

132
00:08:50.870 --> 00:08:55.640
there are ways that we can make
unsafe-inline a little less unsafe.

133
00:08:56.920 --> 00:09:01.797
But it's important to realize,
this is the most common

134
00:09:01.797 --> 00:09:05.986
means of cross-site
script injection today.

135
00:09:05.986 --> 00:09:10.800
When I recalled myself earlier with
Man-In-The-Middle Framework and

136
00:09:10.800 --> 00:09:15.680
the BeEF Framework,
that was by adding a little script tag.

137
00:09:15.680 --> 00:09:18.170
So this is what we have to watch out for.

138
00:09:18.170 --> 00:09:21.770
And sometimes it's been official to have
one of these little things in there.

139
00:09:21.770 --> 00:09:25.330
Maybe it's that our app is a little
bit on the heavy side, and

140
00:09:25.330 --> 00:09:28.980
we want just some core
piece of script to run.

141
00:09:28.980 --> 00:09:32.630
Just enough to make our navigation work or
something, while we wait for

142
00:09:32.630 --> 00:09:34.320
our client's side app to download.

143
00:09:34.320 --> 00:09:35.880
That is a real use case.

144
00:09:37.260 --> 00:09:38.150
What we can do,

145
00:09:38.150 --> 00:09:42.620
one way of solving that is to generate
what's called a cryptographic nonce.

146
00:09:42.620 --> 00:09:46.110
And these are generated on each payload.

147
00:09:46.110 --> 00:09:50.740
They increment in an unpredictable way,
so that an attacker can't read this and

148
00:09:50.740 --> 00:09:53.230
figure out what a future nonce might be.

149
00:09:53.230 --> 00:09:56.440
And we add that to our
Content Security Policy header.

150
00:09:56.440 --> 00:10:01.050
So basically, the response header and

151
00:10:01.050 --> 00:10:06.470
the script itself here, they must line
up in order for that tag to be run.

152
00:10:06.470 --> 00:10:08.810
So that's one way of doing it.

153
00:10:08.810 --> 00:10:12.660
Another way of doing
it is to add basically

154
00:10:12.660 --> 00:10:18.250
a checksum to the content security policy.

155
00:10:18.250 --> 00:10:24.390
So what we have here is a script tag,
and we've got some inline code in it.

156
00:10:24.390 --> 00:10:25.570
And basically,

157
00:10:25.570 --> 00:10:30.330
we have permitted it by adding this
sha256 string to the bottom here.

158
00:10:30.330 --> 00:10:32.250
The easiest way to generate this,

159
00:10:32.250 --> 00:10:37.340
the easiest way to find this is to use
the browser itself, use a browser itself.

160
00:10:37.340 --> 00:10:42.403
So basically, you would leave this out of
the content security policy, try to visit

161
00:10:42.403 --> 00:10:47.323
the page, the error message is gonna be
like, I'm sorry, you're not allowed to

162
00:10:47.323 --> 00:10:52.200
run this piece of code that I found with
the following hash, sha256, [SOUND].

163
00:10:52.200 --> 00:10:56.920
And then, you take that and
you can move it into your CSP.

