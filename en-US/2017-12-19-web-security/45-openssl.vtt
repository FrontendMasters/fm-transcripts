WEBVTT

1
00:00:00.570 --> 00:00:01.330
&gt;&gt; Mike North: So

2
00:00:01.330 --> 00:00:05.120
the way we typically generate this
kind of thing is we use OpenSSL.

3
00:00:05.120 --> 00:00:10.130
You probably have a version of
OpenSSL on your operating system.

4
00:00:10.130 --> 00:00:14.240
It is the most used library for

5
00:00:14.240 --> 00:00:18.580
doing this kind of thing and
you want to use a library in this case.

6
00:00:18.580 --> 00:00:22.310
Do not try to invent your
own encryption algorithm,

7
00:00:22.310 --> 00:00:25.720
do not invent your own hashing algorithms,

8
00:00:25.720 --> 00:00:30.866
this is like an area of code you
don't want to play amateur with.

9
00:00:30.866 --> 00:00:37.900
Simply because there are known documented
easy mistakes and you're gonna have to

10
00:00:37.900 --> 00:00:43.030
go through like the first 15 years of
hardening the way this should work.

11
00:00:43.030 --> 00:00:47.380
Leave this stuff to experts,
consume it from the library.

12
00:00:47.380 --> 00:00:50.320
OpenSSL's are very tried and
tested library.

13
00:00:50.320 --> 00:00:53.840
They did have an issue called
heart bleed a couple years ago.

14
00:00:56.920 --> 00:00:59.230
This is a zero day bug I believe,

15
00:00:59.230 --> 00:01:03.010
where people just had to patch a whole
bunch of crap really, really quickly.

16
00:01:03.010 --> 00:01:05.270
But it still is the best we've got here.

17
00:01:05.270 --> 00:01:08.870
So, what you need to know is
it's a command line driven tool.

18
00:01:08.870 --> 00:01:13.910
There is no good UI I'm aware
of that sits on top of OpenSSL.

19
00:01:13.910 --> 00:01:18.370
Typical thing you do is you just learn
to use a couple different commands and

20
00:01:18.370 --> 00:01:20.130
Iâ€™ve given them to you.

21
00:01:20.130 --> 00:01:23.280
So what were gonna do
in this next exercise

22
00:01:23.280 --> 00:01:28.800
it involves generating a certificate,
so if you'tr tuning out pay attention.

23
00:01:28.800 --> 00:01:33.229
The four steps here, number one you
want to generate a private key.

24
00:01:34.530 --> 00:01:38.250
And this is the thing that you
would never let anyone else see.

25
00:01:38.250 --> 00:01:39.770
This is what allows you to

26
00:01:41.390 --> 00:01:46.410
decode messages that are sent to you and
hidden for your eyes only.

27
00:01:46.410 --> 00:01:49.640
Then we're going to generate
a public key from the private key.

28
00:01:49.640 --> 00:01:53.430
And this only has the power
to write encrypted messages.

29
00:01:54.690 --> 00:01:56.710
You're gonna take that private key and

30
00:01:56.710 --> 00:01:59.920
you're also gonna make something
called a certificate signing request.

31
00:01:59.920 --> 00:02:05.360
Think of this as the precursor of that
certificate that identifies your domain.

32
00:02:05.360 --> 00:02:09.560
And the last step is signing
the certificate with your private key, so

33
00:02:09.560 --> 00:02:14.830
this creates what is called
a self-signed certificate.

34
00:02:14.830 --> 00:02:17.700
Your system is not going
to trust it by default,

35
00:02:17.700 --> 00:02:20.770
I'll show you how can add
it to your trust store.

36
00:02:20.770 --> 00:02:26.630
Keep in mind, see that -days 3 in the 4th
step on the 1st line of the 4th step.

37
00:02:26.630 --> 00:02:31.020
So you want to, whenever you're playing
around with this kind of stuff, just for

38
00:02:31.020 --> 00:02:34.190
added safety,
make really short-lived certificates.

39
00:02:34.190 --> 00:02:36.680
That just, even if you trust manually.

40
00:02:36.680 --> 00:02:40.280
Like, in the next step, we're gonna
make a certificate that lasts one day.

41
00:02:40.280 --> 00:02:42.930
By tomorrow, it won't work anymore.

42
00:02:42.930 --> 00:02:45.559
So if I'm tricking you and
stealing stuff, I better do it quick.

43
00:02:47.520 --> 00:02:51.082
&gt;&gt; Mike North: Typically if you were
getting this certificate signed by

44
00:02:51.082 --> 00:02:56.277
a certificate authority, like a trusted
root like Komodo or like Let's Encrypt,

45
00:02:56.277 --> 00:03:01.620
this last step would be something that
they would do with their private key.

46
00:03:01.620 --> 00:03:03.569
And in doing so, they're basically saying

47
00:03:05.220 --> 00:03:08.440
this person has gone through
the appropriate validation procedure,

48
00:03:08.440 --> 00:03:13.540
I hereby sign off on this request
to generate a certificate.

49
00:03:13.540 --> 00:03:17.970
Please consider it valid, and
I am hereby attaching my seal on this,

50
00:03:17.970 --> 00:03:19.740
I am the one who approved it.

