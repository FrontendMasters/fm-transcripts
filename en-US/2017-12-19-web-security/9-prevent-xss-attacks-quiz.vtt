WEBVTT

1
00:00:00.640 --> 00:00:03.870
&gt;&gt; Mike North: So, companies are even
starting to treat cross set scripting as

2
00:00:03.870 --> 00:00:05.790
a future, which is pretty terrible.

3
00:00:05.790 --> 00:00:08.490
And Xfinity, you're setting a bad example.

4
00:00:08.490 --> 00:00:12.440
This is a user visiting
Reddit without HTCBS and

5
00:00:12.440 --> 00:00:17.330
Xfinity has injected a script to do
the service to their user of saying,

6
00:00:17.330 --> 00:00:21.570
you're approaching your limit for your
quota on your home internet connection.

7
00:00:21.570 --> 00:00:25.500
They should not be,
this scares me when I see this.

8
00:00:25.500 --> 00:00:27.740
Xfinity should not belong on Reddit.

9
00:00:27.740 --> 00:00:29.740
It shouldn't be able to
inject its script here and

10
00:00:29.740 --> 00:00:32.600
Reddit should be upset about it,
and they are.

11
00:00:32.600 --> 00:00:35.600
So if you see this kind of thing,
take five minutes,

12
00:00:35.600 --> 00:00:40.220
write an email, saying like, Jesus,
stay out of my, don't eavesdrop.

13
00:00:40.220 --> 00:00:42.610
Don't tamper with my traffic.

14
00:00:42.610 --> 00:00:46.530
This is a good reason to
support net neutrality,

15
00:00:46.530 --> 00:00:48.290
an ISP should not be doing this.

16
00:00:48.290 --> 00:00:50.664
And they do this today
as a regular practice.

17
00:00:53.064 --> 00:00:56.330
&gt;&gt; Mike North: So cross-site scripting
questions you should ask yourself.

18
00:00:56.330 --> 00:01:02.080
One is, how confident are you in the,
your libraries.

19
00:01:02.080 --> 00:01:02.839
Are they bulletproof?

20
00:01:04.110 --> 00:01:06.387
Are all of the cross-site
scripting vulnerabilities patched?

21
00:01:06.387 --> 00:01:09.841
One thing that you should look for
in libraries that you use,

22
00:01:09.841 --> 00:01:14.107
particularly a view library is, you
wanna see that there is a procedure for

23
00:01:14.107 --> 00:01:15.818
resolving security issues.

24
00:01:15.818 --> 00:01:20.438
They should have an email
address that sends stuff to

25
00:01:20.438 --> 00:01:24.323
a subset of their core team or
whoever it is,

26
00:01:24.323 --> 00:01:28.750
where you can support
specific security issues.

27
00:01:28.750 --> 00:01:31.050
You wanna see that they basically
have planned the procedure,

28
00:01:31.050 --> 00:01:33.800
if something is found,
to address it promptly and

29
00:01:33.800 --> 00:01:37.360
to make sure that it doesn't just
get reported as a GitHub issue.

30
00:01:37.360 --> 00:01:40.440
That is not the appropriate way
to report this kind of thing.

31
00:01:40.440 --> 00:01:41.680
You open that ticket.

32
00:01:41.680 --> 00:01:43.620
Anyone who's watching knows
that there's an issue,

33
00:01:43.620 --> 00:01:46.220
there's a problem that can be exploited.

34
00:01:46.220 --> 00:01:49.487
So you wanna see that
there's a procedure in place.

35
00:01:49.487 --> 00:01:53.790
If you're using a library that
doesn't have this procedure in place,

36
00:01:53.790 --> 00:01:57.449
one they just, they might don't
have gotten around to it yet

37
00:01:57.449 --> 00:02:00.121
like don't use the stick, use the carrot.

38
00:02:00.121 --> 00:02:05.646
Encourage them to get that in place but
it does mean that they've either never

39
00:02:05.646 --> 00:02:10.930
found an issue like this or they are not
thinking about this kind of thing.

40
00:02:12.430 --> 00:02:17.437
So one step better than that would
be some sort of recorded set

41
00:02:17.437 --> 00:02:22.710
of cross-site scripting vulnerabilities
that they know are not possible.

42
00:02:22.710 --> 00:02:26.750
Just like an insurance policy, you want to
see that they cover this, they cover this,

43
00:02:26.750 --> 00:02:28.510
they cover this, they cover this.

44
00:02:28.510 --> 00:02:31.710
And they may even list a couple of things
saying like, we're not responsible for

45
00:02:31.710 --> 00:02:34.270
this, this, and this.

46
00:02:34.270 --> 00:02:39.290
Ember, for example,
they don't support browsers

47
00:02:39.290 --> 00:02:43.870
older than, like Ember 1.x supported IE8.

48
00:02:43.870 --> 00:02:47.230
IE9 is what Ember 2.0 supports.

49
00:02:47.230 --> 00:02:52.206
So if you start filing
&gt;&gt; Mike North: Attacks that would only

50
00:02:52.206 --> 00:02:57.160
be possible on IE 6, the framework is
probably not going to worry about it.

51
00:02:57.160 --> 00:02:58.910
It's not going to insulate you from.

52
00:02:58.910 --> 00:03:01.010
So look at browser requirements as well.

53
00:03:01.010 --> 00:03:06.340
This is a good reason where if you
see it's advertised that this thing,

54
00:03:06.340 --> 00:03:09.690
it works on most of the browsers
I need and I just tested it, and

55
00:03:09.690 --> 00:03:12.310
it works on one version older as well.

56
00:03:12.310 --> 00:03:12.930
Be careful.

57
00:03:12.930 --> 00:03:15.750
It's not just about
whether you have boots and

58
00:03:15.750 --> 00:03:20.330
render stuff on the screen,
it's also about what the project

59
00:03:20.330 --> 00:03:24.000
is taking on in terms of assuring you that
your users will have a secure experience.

60
00:03:26.050 --> 00:03:30.954
So another thing to consider is how many
people in the room have a browser plugin

61
00:03:30.954 --> 00:03:31.859
of some sort?

62
00:03:33.680 --> 00:03:35.810
Chrome plugins, yep, me too.

63
00:03:35.810 --> 00:03:39.170
And how many of us look really
carefully at the permissions

64
00:03:39.170 --> 00:03:42.370
that those plugins ask for when they join?

65
00:03:43.710 --> 00:03:44.650
For every single one?

66
00:03:46.370 --> 00:03:48.470
And do you look at the code
in the Chrome plugins?

67
00:03:48.470 --> 00:03:53.040
&gt;&gt; Speaker 2: No not in the code, usually
it's, is about to modify the page or

68
00:03:53.040 --> 00:03:54.270
something like that.

69
00:03:54.270 --> 00:03:56.310
&gt;&gt; Mike North: Yup.
&gt;&gt; Speaker 2: So you just keep those.

70
00:03:56.310 --> 00:03:59.700
&gt;&gt; Mike North: So, I think what we're
likely, even if you're vigilant.

71
00:04:00.990 --> 00:04:04.830
There is skeptical, and
then there is vigilant.

72
00:04:04.830 --> 00:04:08.560
If you're skeptical,
you would say, wait a minute.

73
00:04:08.560 --> 00:04:13.200
This is just,
this is like a social media plugin.

74
00:04:13.200 --> 00:04:16.410
It has no business,
it's asking for permissions

75
00:04:16.410 --> 00:04:20.050
that go beyond the scope of what I
would expect for this particular thing.

76
00:04:20.050 --> 00:04:21.810
So that's suspicious behavior.

77
00:04:21.810 --> 00:04:27.260
But if you installed
the plugin that was for,

78
00:04:27.260 --> 00:04:31.420
it's a dev tool and
it's designed to work on any domain.

79
00:04:31.420 --> 00:04:36.630
I don't know anyone that will heavily
scrutinize the source code of that.

80
00:04:36.630 --> 00:04:41.866
So know that when you install a browser
plugin, and it falls into that category,

81
00:04:41.866 --> 00:04:45.331
and it says it can modify
content on all of your pages,

82
00:04:45.331 --> 00:04:48.190
it can cross-site script anything at all.

83
00:04:49.250 --> 00:04:53.060
Over HTTPS, over HTTP,
it can do anything at all.

84
00:04:53.060 --> 00:04:56.080
So this is the reason when you do your
online banking and stuff like that,

85
00:04:56.080 --> 00:05:00.660
incognito tab and
if you really trust something.

86
00:05:00.660 --> 00:05:04.780
For example, I allow one password
to Chrome extension in my browser.

87
00:05:04.780 --> 00:05:07.100
I already trust one password.

88
00:05:07.100 --> 00:05:09.830
It's already keeping all of my secrets,
right.

89
00:05:09.830 --> 00:05:12.650
And so in that situation,
yes, I'll trust that.

90
00:05:12.650 --> 00:05:13.762
I did actually take a look.

91
00:05:13.762 --> 00:05:16.700
It is a signed extension so

92
00:05:16.700 --> 00:05:22.180
no one can tamper with that code without
having their private code signing key.

93
00:05:22.180 --> 00:05:24.610
I know it genuinely is from that company.

94
00:05:24.610 --> 00:05:25.700
I already trust them, but

95
00:05:25.700 --> 00:05:29.320
I have no other extensions that
are allowed in in cognito mode.

96
00:05:29.320 --> 00:05:32.640
Even if it's a community sourced
thing like ReactDevTools or

97
00:05:32.640 --> 00:05:38.190
the Ember Inspector, anything like that,
don't let it in incognito.

98
00:05:38.190 --> 00:05:40.990
And use that for
things that are particularly sensitive,

99
00:05:40.990 --> 00:05:45.290
where you have Social Security numbers or
banking data, anything like that.

100
00:05:46.660 --> 00:05:50.720
Because a browser plug-in
can do basically anything.

101
00:05:50.720 --> 00:05:54.650
In fact, these day it's probably the most
easy way to get into someone's machine.

102
00:05:55.780 --> 00:05:59.290
It just sits there,
you can make it where it has no icon,

103
00:05:59.290 --> 00:06:03.110
people just forget that it's even there,
and it can just gather data for months.

104
00:06:04.270 --> 00:06:06.778
Really, really nasty way to
get into someone's machine.

105
00:06:06.778 --> 00:06:10.480
Also, if Cross-Site Scripting happens,
what's your exposure?

106
00:06:10.480 --> 00:06:13.440
So, this is a good thing
to think about in terms of

107
00:06:13.440 --> 00:06:15.300
limiting what web applications can do.

108
00:06:15.300 --> 00:06:21.840
And another lesson we can learn from the
recent Equifax hack where we like, there

109
00:06:21.840 --> 00:06:26.840
are reasons to restrict what is possible
through your UI and through your API.

110
00:06:26.840 --> 00:06:29.500
Therearesome things that you
just shouldn't be able to do.

111
00:06:29.500 --> 00:06:31.840
Like, I realize if you have
a team that works remotely or

112
00:06:31.840 --> 00:06:35.580
something it might be convenient to allow
a database dump to happen through some

113
00:06:35.580 --> 00:06:37.430
secret URL within your app.

114
00:06:37.430 --> 00:06:38.930
Don't do it, don't do it.

115
00:06:38.930 --> 00:06:41.530
That is just asking for
someone to take advantage of it.

116
00:06:41.530 --> 00:06:45.110
You're more protected if
the public facing app

117
00:06:45.110 --> 00:06:49.770
that is available to your users is
limited in terms of what it can do.

118
00:06:49.770 --> 00:06:50.280
Right?

119
00:06:50.280 --> 00:06:52.430
Don't let something return
as many rows as possible.

120
00:06:52.430 --> 00:06:55.900
Don't build a secret query pram in
there that's for advanced users and

121
00:06:55.900 --> 00:06:59.100
dumps the content of a whole table.

122
00:06:59.100 --> 00:07:01.000
This is just asking for trouble.

123
00:07:01.000 --> 00:07:02.140
And then finally,

124
00:07:02.140 --> 00:07:06.510
what could you do if you escalated
a successful cross-site scripting attack?

125
00:07:06.510 --> 00:07:09.620
So this would be a difference where For

126
00:07:09.620 --> 00:07:14.102
Frontend Masters, maybe you can get
access to a bunch of video courses.

127
00:07:14.102 --> 00:07:19.080
For IOHealth a cross-site scripting attack

128
00:07:19.080 --> 00:07:24.200
to potentially allow people to see
private health data from other people.

129
00:07:24.200 --> 00:07:26.040
That's clearly more severe.

130
00:07:26.040 --> 00:07:30.900
For Experian, now you have Social Security
numbers and credit card numbers and

131
00:07:30.900 --> 00:07:32.570
that is at the catastrophic level.

132
00:07:34.620 --> 00:07:35.680
What's your exposure?

133
00:07:35.680 --> 00:07:38.180
And that will help you prioritize, right?

134
00:07:38.180 --> 00:07:42.401
You've got a fixed amount of time, and
features and bugs and tech to pay down and

135
00:07:42.401 --> 00:07:43.410
security issues.

136
00:07:44.530 --> 00:07:48.970
If the consequence of risk is high,
this should

137
00:07:48.970 --> 00:07:52.900
increase priority of addressing these
kinds of things proportionately.

