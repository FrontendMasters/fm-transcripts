WEBVTT

1
00:00:00.340 --> 00:00:05.050
&gt;&gt; Mike North: So we're going to look
at how we can cause some trouble,

2
00:00:05.050 --> 00:00:09.980
and see if we can stir up the other
cross-site scripting bug that

3
00:00:09.980 --> 00:00:11.600
wasn't directly shown to you.

4
00:00:11.600 --> 00:00:14.760
So the first one is basically this,

5
00:00:14.760 --> 00:00:19.100
when you create a new account this is the
way you'd be able to spot it easily and

6
00:00:19.100 --> 00:00:21.390
something that already
had some data in there.

7
00:00:21.390 --> 00:00:26.380
If someone said, Mike's checking like
this, and I create a new account.

8
00:00:26.380 --> 00:00:28.880
Oops, looks like my
server's restarting too.

9
00:00:31.260 --> 00:00:32.710
Mike's checking, new account.

10
00:00:33.960 --> 00:00:40.490
So the fact that we see this in bold, that
should raise a little bit of a red flag.

11
00:00:40.490 --> 00:00:44.218
If you're a penetration tester and
you see this, you just got curious.

12
00:00:44.218 --> 00:00:49.490
You just thought, hey,
this is not just raw text.

13
00:00:49.490 --> 00:00:53.648
There is some markup, and
I wonder what markup is allowed, and

14
00:00:53.648 --> 00:00:56.007
I wonder what they are preventing?

15
00:00:56.007 --> 00:00:58.490
And in this case we don't happen
to be preventing anything.

16
00:00:58.490 --> 00:01:03.591
So we could do something like this,

17
00:01:03.591 --> 00:01:09.543
totally safe account, not a hack at all,

18
00:01:09.543 --> 00:01:16.872
script, alert.
&gt;&gt; Mike North: I

19
00:01:16.872 --> 00:01:20.000
put semicolons in my JavaScript
even when I'm cross-site scripting.

20
00:01:21.600 --> 00:01:22.600
Take that Brian Hull.

21
00:01:25.080 --> 00:01:28.650
So, and now you see that we've actually,
this is the little skull up here.

22
00:01:28.650 --> 00:01:32.780
We've gotten the browser to run our code.

23
00:01:32.780 --> 00:01:34.220
So I'm seeing it twice here.

24
00:01:35.460 --> 00:01:37.610
Here's another cross-site
scripting attack.

25
00:01:37.610 --> 00:01:41.620
If we inspect this here,
I mean it was sort of blurred a little bit

26
00:01:41.620 --> 00:01:44.833
with the first one, so
it was difficult to pick up.

27
00:01:44.833 --> 00:01:49.598
But this is actually a separate
vulnerability where a validation message,

28
00:01:49.598 --> 00:01:53.700
in this case it's a success message,
it is sent back to the user.

29
00:01:53.700 --> 00:01:59.340
So this is a stored and
a reflected cross-site scripting attack.

30
00:01:59.340 --> 00:02:03.170
Because this, what we're looking at now,
inside this alert panel,

31
00:02:03.170 --> 00:02:07.730
this is a transient piece of data, right.

32
00:02:07.730 --> 00:02:10.470
The third one in the profile page.

33
00:02:10.470 --> 00:02:14.730
So when you see something like this,
you might have gotten curious and

34
00:02:14.730 --> 00:02:16.860
deleted a letter here.

35
00:02:16.860 --> 00:02:19.010
No user found example.co.

36
00:02:19.010 --> 00:02:22.530
What if we did no user
found script alert hi?

37
00:02:23.650 --> 00:02:26.942
And we can make this work here.

38
00:02:26.942 --> 00:02:30.436
Browsers typically,
Chrome will prevent this.

39
00:02:30.436 --> 00:02:34.420
They have a cross-site scripting filter
where if they see a portion of your URL

40
00:02:34.420 --> 00:02:41.990
that exactly matches code that it's being
asked to execute, it'll pump the brakes.

41
00:02:41.990 --> 00:02:47.630
I've done something deliberately,
I'm trying not to sand bag Chrome here.

42
00:02:47.630 --> 00:02:54.130
I've done something to
deliberately circumvent this by,

43
00:02:54.130 --> 00:02:58.380
I basically add a console log done
to the end of the script tag.

44
00:02:58.380 --> 00:03:00.280
So if we were to look
at what happens here,

45
00:03:01.400 --> 00:03:05.430
I just alter it enough that it's like,
well that's not a text for

46
00:03:05.430 --> 00:03:08.950
text match for
something that was present in the URL.

47
00:03:08.950 --> 00:03:12.400
So this is the kind of error you would
absolutely see in older browsers,

48
00:03:12.400 --> 00:03:14.070
Chrome saves us from that.

49
00:03:14.070 --> 00:03:18.530
So if we were just to, instead of doing
this replace, if we got rid of that.

50
00:03:18.530 --> 00:03:20.530
Which I will just for
demonstration purposes here.

51
00:03:22.110 --> 00:03:23.735
And wonder if I need to restart.

52
00:03:31.982 --> 00:03:33.455
&gt;&gt; Mike North: So there's my first error.

53
00:03:36.461 --> 00:03:37.870
&gt;&gt; Mike North: And this is the second one.

54
00:03:37.870 --> 00:03:42.931
See look at the nature of the error, the
last line in what Chrome is telling us.

55
00:03:42.931 --> 00:03:47.463
This type of error is called
blocked by XSS Auditor,

56
00:03:47.463 --> 00:03:51.070
detected some unusual code on this page.

57
00:03:52.840 --> 00:03:57.620
And if we look in the console, I think it
gives us, let's see, any more information?

58
00:03:57.620 --> 00:04:03.201
Let's preserve the log.
&gt;&gt; Mike North: So

59
00:04:03.201 --> 00:04:08.520
the XSS Auditor blocked access to
this script because the source

60
00:04:08.520 --> 00:04:13.650
code of the script was found
within the request, right.

61
00:04:13.650 --> 00:04:18.860
So you can disable this, if you really
wanted to, from your app by saying

62
00:04:18.860 --> 00:04:23.830
XSS protection in a response header and
the value of that header would be zero.

63
00:04:23.830 --> 00:04:26.111
That's telling Chrome to back off.

64
00:04:26.111 --> 00:04:31.700
I would be interested in hearing if
there's a good reason for disabling this.

65
00:04:31.700 --> 00:04:33.320
It's pretty nice.

66
00:04:33.320 --> 00:04:37.450
But in older browsers like this,
there is no XSS filter.

67
00:04:37.450 --> 00:04:40.660
It would be really easy
to slip this thing by.

68
00:04:40.660 --> 00:04:46.620
So those are the three errors,
the one is this that

69
00:04:46.620 --> 00:04:51.370
we're looking at here which I had done
some shenanigans in my back end, right.

70
00:04:51.370 --> 00:04:55.980
It's not immediately obvious what this is,
what's going on here.

71
00:04:55.980 --> 00:05:00.068
Imagine instead of console log done it was
some tracking event that's like, yeah,

72
00:05:00.068 --> 00:05:03.970
we're just gonna add something like
page loaded, something like that.

73
00:05:03.970 --> 00:05:06.240
Fire beacon out to Google Analytics.

74
00:05:06.240 --> 00:05:09.400
There are ways to make this look not so
suspicious.

75
00:05:09.400 --> 00:05:13.956
But this line of code here just modified
things enough to where Chrome was like,

76
00:05:13.956 --> 00:05:18.830
well no, that is not an exact match for
something I found inside the request.

77
00:05:18.830 --> 00:05:23.791
And so you are free,
that must be code that originates from

78
00:05:23.791 --> 00:05:27.750
the program that you wrote,
and in part it is.

79
00:05:27.750 --> 00:05:35.016
And so now it would work.
&gt;&gt; Mike North: This is gonna bug me,

80
00:05:35.016 --> 00:05:38.120
I'll fix this between exercises for
you all.

81
00:05:40.220 --> 00:05:45.880
So this is number one, number two is
on the main page here where every

82
00:05:45.880 --> 00:05:52.460
time we reload this page, this here is
evaluated as a cross-site scripting error.

83
00:05:52.460 --> 00:05:55.910
Now if I refresh the page and
don't touch it, you're gonna see that it

84
00:05:55.910 --> 00:06:00.820
becomes pretty easy for us to figure
out where these inline scripts are.

85
00:06:02.870 --> 00:06:06.010
Notice that the page stops rendering
at that specific point there,

86
00:06:06.010 --> 00:06:07.980
that's where the script tag is.

87
00:06:07.980 --> 00:06:10.750
It's right after not a hack at all.

88
00:06:10.750 --> 00:06:13.440
And you see we don't get the account
number, we don't get the balance.

89
00:06:14.840 --> 00:06:22.562
Now this is just because this is
a blocking call alert freezes execution.

90
00:06:22.562 --> 00:06:26.780
But this is,
just know that it's evaluated inline.

91
00:06:26.780 --> 00:06:31.330
So whatever's happening, if you set
a couple break points you can figure out

92
00:06:32.740 --> 00:06:36.430
is this part of data or what's going on.

93
00:06:36.430 --> 00:06:38.850
The third one of course is
when we create a new account.

94
00:06:38.850 --> 00:06:41.230
We already showed you,
that was in that little alert drop down.

95
00:06:41.230 --> 00:06:44.310
So that was,
that happens to also be persisted but

96
00:06:44.310 --> 00:06:47.220
that's also reflected back at us
as soon as we create an account.

97
00:06:47.220 --> 00:06:51.640
The consequence there being you
could create a form that would

98
00:06:51.640 --> 00:06:53.760
post to that address, and

99
00:06:53.760 --> 00:06:58.530
then users would potentially see
the HTML resulting from that post call.

100
00:06:58.530 --> 00:07:00.440
There are two different
ways to exploit that.

101
00:07:01.590 --> 00:07:04.650
So those are our three
cross-site scripting attacks.

102
00:07:04.650 --> 00:07:10.000
Now we're gonna move on to talking
about how we can make it not so easy to

103
00:07:10.000 --> 00:07:14.990
send links to people and trick them into
running code as their authenticated user.

104
00:07:14.990 --> 00:07:16.710
So we'll talk about how we
can defend against them.

