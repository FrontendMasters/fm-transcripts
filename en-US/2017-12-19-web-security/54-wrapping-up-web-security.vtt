WEBVTT

1
00:00:00.310 --> 00:00:05.130
&gt;&gt; Mike North: So just to recap we started
a bunch of different attacks today.

2
00:00:05.130 --> 00:00:07.610
We began with cross sites scripting and

3
00:00:07.610 --> 00:00:12.860
we injected code into an app that we could
potentially use to affect another user.

4
00:00:12.860 --> 00:00:18.350
We used a CSRF attack to create
a landing page that sent off a request

5
00:00:18.350 --> 00:00:22.700
to transfer funds from one bank account to
another, using a GET request approach with

6
00:00:22.700 --> 00:00:28.430
an image tag and a form that had
a JavaScript like programmatic submit.

7
00:00:28.430 --> 00:00:33.380
But in either case, once a user lands on
that page, the CSRF attack is carried out

8
00:00:33.380 --> 00:00:37.710
and by time they know what's happened,
it's already too late.

9
00:00:37.710 --> 00:00:42.454
We built an example of clickjacking and
positioned an eye frame over a submit

10
00:00:42.454 --> 00:00:47.120
button and tricked the user into
interacting with an app that was not ours,

11
00:00:47.120 --> 00:00:48.990
just through basically CSS.

12
00:00:48.990 --> 00:00:53.322
We talked a little bit about
third party assets and

13
00:00:53.322 --> 00:00:58.271
how we can use sub-resource
integrity in order to ensure

14
00:00:58.271 --> 00:01:02.085
that assets that are not
under our control,

15
00:01:02.085 --> 00:01:06.930
when they change we will be
notified of those changes and

16
00:01:06.930 --> 00:01:13.200
we will sort of have to patch things
up in order to take them into our app.

17
00:01:13.200 --> 00:01:16.490
We discussed resource
tampering a little bit, and

18
00:01:16.490 --> 00:01:22.520
how things could happen on a CDN and
how to insulate ourselves from that risk.

19
00:01:22.520 --> 00:01:25.070
And then finally we dealt with a couple

20
00:01:25.070 --> 00:01:28.260
different things that could happen
with a man in the middle attack.

21
00:01:28.260 --> 00:01:34.060
And specifically how we can downgrade
https connections into plain http and

22
00:01:34.060 --> 00:01:36.580
then talked about HSTS and

23
00:01:36.580 --> 00:01:41.050
public key pinning could be used to combat
the basic version of that attack where you

24
00:01:41.050 --> 00:01:46.920
have an unencrypted session between
the attacker and the target.

25
00:01:46.920 --> 00:01:52.590
And then public key pinning which would
basically say for the half of users

26
00:01:52.590 --> 00:01:57.060
who would click through the warning saying
this certificate doesn't look quite right.

27
00:01:57.060 --> 00:02:01.170
Now you'd be in a position where the user
doesn't get to make that decision, and

28
00:02:01.170 --> 00:02:05.460
if there's a man in the middle that
has forged a certificate they're

29
00:02:05.460 --> 00:02:09.640
not allowed to accept that and they're not
allowed to carry on and perform that task.

30
00:02:10.720 --> 00:02:11.920
So I hope you found this useful.

31
00:02:11.920 --> 00:02:16.720
I hope you know more about web app
security and those concerns that

32
00:02:16.720 --> 00:02:22.889
developers focused on JavaScript apps and
TypeScript apps should be cognizant of.

33
00:02:24.060 --> 00:02:26.780
And hopefully you'll save yourself some

34
00:02:28.290 --> 00:02:31.090
stressful problem as a result
of this new knowledge.

