WEBVTT

1
00:00:00.090 --> 00:00:01.380
&gt;&gt; Mike North: So what we're gonna do,

2
00:00:01.380 --> 00:00:04.900
you have a bunch of cross site scripting
stuff that you've figured out.

3
00:00:04.900 --> 00:00:06.290
We've got our three little bugs.

4
00:00:07.590 --> 00:00:11.875
We're going to fix the bugs by
editing some of that server side code.

5
00:00:11.875 --> 00:00:16.867
So we know the unsafe thing to check for,
remember,

6
00:00:16.867 --> 00:00:19.821
it's less than percent dash.

7
00:00:19.821 --> 00:00:23.640
Eradicate that from the code base,
with a couple exceptions.

8
00:00:23.640 --> 00:00:28.590
There are some places where, due to
the layouts, like any time we've got like

9
00:00:28.590 --> 00:00:33.270
html wrapping other html,
you should leave some of these intact.

10
00:00:33.270 --> 00:00:35.870
But anything that's user generated input,

11
00:00:35.870 --> 00:00:41.410
we should make sure that
we sanitize appropriately.

12
00:00:41.410 --> 00:00:46.350
What we wanna do then is add
a reasonable content security policy.

13
00:00:46.350 --> 00:00:48.930
And here is something that
is pretty reasonable here.

14
00:00:48.930 --> 00:00:51.920
There's an additional
twist I've added here.

15
00:00:51.920 --> 00:00:54.720
I didn't explain it in slides,
so I wanna explain it now.

16
00:00:54.720 --> 00:00:58.970
Note that font source has a data colon

17
00:00:58.970 --> 00:01:03.880
as the source of that directive, right?

18
00:01:04.900 --> 00:01:10.050
That basically means we allow base64
encoded URLs to be font sources.

19
00:01:10.050 --> 00:01:14.440
So in this case the font is
expressed as a base64 encoded URL.

20
00:01:14.440 --> 00:01:17.740
So content security policy like
this should make the app work.

21
00:01:17.740 --> 00:01:20.730
You just have to figure
out how to express that.

22
00:01:20.730 --> 00:01:23.967
There is a library already installed
that is popular option for

23
00:01:23.967 --> 00:01:25.562
adding a CSP to an express app.

24
00:01:25.562 --> 00:01:28.722
It is called helmetjs/csp.

25
00:01:28.722 --> 00:01:35.240
helmetjs just deals with adding
headers to requests, basically.

26
00:01:35.240 --> 00:01:37.520
So there are a couple of
different libraries there.

27
00:01:37.520 --> 00:01:39.370
This is the file you'll be working with.

28
00:01:39.370 --> 00:01:41.787
It's in server/index.js, and

29
00:01:41.787 --> 00:01:47.632
reading the documentation here should give
you a clue as to how you should proceed.

30
00:01:47.632 --> 00:01:51.800
I will say that it's best here
to start relatively simple and

31
00:01:51.800 --> 00:01:53.442
to increment forward.

32
00:01:53.442 --> 00:02:00.628
And this is where your lvh.me domains
might be useful because browsers might,

33
00:02:00.628 --> 00:02:05.778
depending on how,
you may find that the content security

34
00:02:05.778 --> 00:02:11.053
policy sticks on a particular
domain beyond one request.

35
00:02:11.053 --> 00:02:14.521
So you want to test this out,
tighten things up.

36
00:02:14.521 --> 00:02:18.622
You'll basically like lock things down to
the point where the CSS is not gonna work,

37
00:02:18.622 --> 00:02:20.528
the JavaScript's not gonna work, and

38
00:02:20.528 --> 00:02:24.800
piece by piece you kinda get back to where
we don't have error messages anymore.

39
00:02:24.800 --> 00:02:29.906
But you should find that if you go and try
to tamper with any of those static assets,

40
00:02:29.906 --> 00:02:32.126
like the script tag, for example,

41
00:02:32.126 --> 00:02:37.588
that's being inserted.
&gt;&gt; Mike North: It'll complain about it,

42
00:02:37.588 --> 00:02:38.705
and it'll say oops.

43
00:02:38.705 --> 00:02:40.360
Some unauthorized change has been made.

