WEBVTT

1
00:00:00.590 --> 00:00:03.086
So now we get into some really fun stuff.

2
00:00:03.086 --> 00:00:05.636
This one is called duplexify.

3
00:00:05.636 --> 00:00:11.840
So duplexify lets you define a stream,

4
00:00:11.840 --> 00:00:18.220
where maybe you have to do some setup
first before you can really get a handle.

5
00:00:18.220 --> 00:00:22.520
So as an example,
good thing that you can use duplexify for

6
00:00:22.520 --> 00:00:27.860
is maybe you have to do some setup and
then you're gonna write to a file.

7
00:00:27.860 --> 00:00:30.870
So maybe you have to make
a directory first, and

8
00:00:30.870 --> 00:00:34.852
then you have to write
input into that directory.

9
00:00:34.852 --> 00:00:38.299
So duplexify, I can show you
an example for how to do that.

10
00:00:38.299 --> 00:00:40.490
It makes setting that up a lot easier.

11
00:00:40.490 --> 00:00:43.712
And then you don't have to expose
an asynchronous interface like with

12
00:00:43.712 --> 00:00:44.319
a callback.

13
00:00:44.319 --> 00:00:47.445
You can just expose something that
people can write to right away.

14
00:00:47.445 --> 00:00:50.280
Those writes get buffered and
it gets put into the file.

15
00:00:50.280 --> 00:00:56.130
So let's go ahead and do that with
duplexify, call this one dup.js.

16
00:00:56.130 --> 00:00:59.049
So we require duplexify,
I think I have that installed.

17
00:01:00.250 --> 00:01:04.724
Just in case I don't,
require('duplexify').

18
00:01:04.724 --> 00:01:07.122
And now maybe we have.

19
00:01:07.122 --> 00:01:14.553
So this is gonna be a module, suppose,
that is gonna be a logger, so,

20
00:01:17.314 --> 00:01:22.704
It'll take a log name and
we're gonna return a stream that

21
00:01:22.704 --> 00:01:27.991
consumers can write their log
data to in a log directory.

22
00:01:27.991 --> 00:01:32.109
So we can use this package called mkdirp,

23
00:01:32.109 --> 00:01:36.816
which you can install
with npm install mkdirp,

24
00:01:36.816 --> 00:01:40.110
like that, do it the faster way,

25
00:01:40.110 --> 00:01:46.110
and, This is like the Unix
command mkdir -p.

26
00:01:46.110 --> 00:01:49.580
So if the directory already exists,
that's fine.

27
00:01:49.580 --> 00:01:51.480
If it doesn't exist, then it creates it.

28
00:01:52.590 --> 00:01:56.440
So we're gonna make
a directory called logs.

29
00:01:56.440 --> 00:02:03.477
And then inside of that directory,
we're gonna,

30
00:02:05.691 --> 00:02:10.072
We're gonna make a new log
file that we'll write to.

31
00:02:10.072 --> 00:02:14.532
So to do that,
we can return the duplexify stream.

32
00:02:14.532 --> 00:02:17.521
And then later,
once we've done something asynchronous,

33
00:02:17.521 --> 00:02:21.814
there could be even more steps involved,
we're gonna call fs.createWriteStream.

34
00:02:23.783 --> 00:02:25.850
So we'll do fs.createWriteStream.

35
00:02:27.530 --> 00:02:34.160
And it'll be logs/the name.log, why not?

36
00:02:34.160 --> 00:02:38.492
So we couldn't do this if the directory
called logs didn't exist.

37
00:02:38.492 --> 00:02:43.585
So this module, duplexify, sort of lets
us defer some of those interfaces that

38
00:02:43.585 --> 00:02:49.010
we don't, so that we don't have to write
our own buffering, queueing logic.

39
00:02:49.010 --> 00:02:51.200
It's pretty useful sometimes.

40
00:02:51.200 --> 00:02:55.990
So this is a writable stream that we
can now set into our duplexify stream.

41
00:02:55.990 --> 00:03:01.353
So you call d.setWritable(w),
which is gonna be that stream.

42
00:03:01.353 --> 00:03:03.657
And duplexify will also
forward the errors.

43
00:03:03.657 --> 00:03:08.177
So if there's an error event on
the w instance, which is an event,

44
00:03:08.177 --> 00:03:10.455
you have to listen for normally.

45
00:03:10.455 --> 00:03:16.360
Then duplexify will sort of take that
in and put it out the other side.

46
00:03:16.360 --> 00:03:19.410
So someone who's consuming it can use it.

47
00:03:19.410 --> 00:03:24.900
So gotta move this example
into the directory.

48
00:03:26.380 --> 00:03:31.230
So we'll call this file our api.js, and

49
00:03:31.230 --> 00:03:35.360
then we'll make our script
that's gonna run this file.

50
00:03:35.360 --> 00:03:38.270
So we'll load our duplexified API.

51
00:03:38.270 --> 00:03:42.839
So this is like a logger script, so

52
00:03:42.839 --> 00:03:47.257
we could call it, whoops, log.

53
00:03:47.257 --> 00:03:50.820
So it's gonna give us a stream back,
a writable stream.

54
00:03:50.820 --> 00:03:55.350
So I don't know, we'll just stream.write,

55
00:03:57.938 --> 00:03:59.910
(Date.now) plus new line.

56
00:04:01.300 --> 00:04:05.340
And maybe we'll do that a couple of times,
and then we'll quit.

57
00:04:07.190 --> 00:04:12.536
So just do it every 100 milliseconds

58
00:04:12.536 --> 00:04:20.479
until, 5 times.

59
00:04:28.232 --> 00:04:29.960
And then we'll close the stream.

60
00:04:31.260 --> 00:04:37.000
Okay, so we're just using our interface
that's provided by duplexify.

61
00:04:37.000 --> 00:04:39.107
Notice how there's no log directory.

62
00:04:39.107 --> 00:04:43.940
Now when we run this script,
there is a log directory.

63
00:04:43.940 --> 00:04:46.380
And inside of that log directory,
we didn't pass a name in, so

64
00:04:46.380 --> 00:04:48.550
we got undefined.log, but that's okay.

65
00:04:49.720 --> 00:04:51.322
So there we go, some data.

66
00:04:51.322 --> 00:04:54.590
That's about what I would expect it to do,
so good.

67
00:04:54.590 --> 00:04:55.951
I'll just commit these.

