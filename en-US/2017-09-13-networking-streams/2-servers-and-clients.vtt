WEBVTT

1
00:00:00.280 --> 00:00:04.090
We have this idea of a server
which is kind of you,

2
00:00:04.090 --> 00:00:09.890
should maybe in a lot of cases think of
it as a role that a computer system or

3
00:00:09.890 --> 00:00:14.850
a computer program can play, is really
anytime that you are listening for

4
00:00:14.850 --> 00:00:18.710
incoming connections like we're doing
with like we just did with Netcat,

5
00:00:18.710 --> 00:00:23.193
with dash LP, then that is a server.

6
00:00:23.193 --> 00:00:27.022
So that's one sense of it.

7
00:00:27.022 --> 00:00:30.800
So any computer really, that has
a networking stack can be a server in

8
00:00:30.800 --> 00:00:35.760
different circumstances, even if the only
incoming connections are from localhost.

9
00:00:35.760 --> 00:00:42.314
This is just kind of how they work.

10
00:00:42.314 --> 00:00:44.016
Clients on the other hands are,

11
00:00:44.016 --> 00:00:48.377
you can think of those as the computer
that's going to initiate that connection.

12
00:00:48.377 --> 00:00:53.451
So, if you wanna make a TCP connection,
you've gotta have an address

13
00:00:53.451 --> 00:00:58.439
on the network, and you have to have
your network card plugged in, or

14
00:00:58.439 --> 00:01:03.950
you have to be associated with a wireless
access point, that kind of thing.

15
00:01:03.950 --> 00:01:08.850
And there has to be a server listening on
the other end for incoming connections.

16
00:01:08.850 --> 00:01:09.650
But there's yet

17
00:01:09.650 --> 00:01:15.000
another kind of architecture that I'm
gonna talk about a bit more tomorrow,

18
00:01:16.060 --> 00:01:21.180
and probably also on day four as well,
that is called peer to peer.

19
00:01:21.180 --> 00:01:27.830
And peer to peer system, you don't really
have this kind of client and server role.

20
00:01:27.830 --> 00:01:31.860
Everything is both a client and
both a server at the same time.

21
00:01:33.150 --> 00:01:36.460
So peers might be listening for
incoming connections, but

22
00:01:36.460 --> 00:01:40.490
they're also initiating connections
to other peers on the network.

23
00:01:40.490 --> 00:01:44.130
And it's a little bit trickier to set up
this kind of a network, because you have

24
00:01:44.130 --> 00:01:49.500
to build things like bootstrapping lists
to get the network off the ground.

25
00:01:49.500 --> 00:01:54.050
And there's a lot more trickiness,
like building a symmetric protocol versus

26
00:01:54.050 --> 00:01:57.650
building kind of like a client server
protocol that you have to contend with and

27
00:01:57.650 --> 00:01:59.890
you also have to contend with well.

28
00:01:59.890 --> 00:02:01.960
There's no like server that you own.

29
00:02:01.960 --> 00:02:06.490
So you have to sort of deal with
the fact that anyone can kind of do

30
00:02:06.490 --> 00:02:10.060
anything that they want and
we have to manage that complexity.

31
00:02:11.640 --> 00:02:13.820
But these systems can work pretty well.

32
00:02:13.820 --> 00:02:16.870
So some big examples of

33
00:02:16.870 --> 00:02:21.380
peer to peer protocols would be peer to
peer networks like BitTorrent or IPFS.

34
00:02:21.380 --> 00:02:23.510
If you've ever heard of that.

35
00:02:25.810 --> 00:02:30.370
Or there's also a web
standard called WebRTC,

36
00:02:30.370 --> 00:02:36.480
that lets you initiate peer to peer
protocol connections from the web browser.

37
00:02:36.480 --> 00:02:40.890
So, this is often used for
things like video and

38
00:02:40.890 --> 00:02:45.930
audio chat, because to run all of
the bandwidth to make a connection for

39
00:02:45.930 --> 00:02:49.420
audio or video through a central
server can get very expensive, and

40
00:02:49.420 --> 00:02:51.460
it's also adds more latency.

41
00:02:51.460 --> 00:02:55.930
Then you need to build a direct
connection between clients.

42
00:02:55.930 --> 00:03:02.020
It's also used, I think for here and
there for a couple of games on the web.

