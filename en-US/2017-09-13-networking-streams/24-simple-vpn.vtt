WEBVTT

1
00:00:00.000 --> 00:00:01.021
Question.

2
00:00:01.021 --> 00:00:02.290
&gt;&gt; This is maybe too much of a sidetrack.

3
00:00:02.290 --> 00:00:05.872
But I'm just curious if we added
some encryption into that,

4
00:00:05.872 --> 00:00:09.893
would we have the beginnings of a VPN
we could use or is that totally-

5
00:00:09.893 --> 00:00:11.011
&gt;&gt; Yeah, we can do that.

6
00:00:11.011 --> 00:00:13.316
If you want, I can do that,
that sounds fun.

7
00:00:13.316 --> 00:00:16.676
&gt;&gt; [LAUGH]
&gt;&gt; Okay, so actually, a bit later,

8
00:00:16.676 --> 00:00:19.134
I'm gonna talk about core streams,

9
00:00:19.134 --> 00:00:22.715
so we can use one of these
methods like create cipher.

10
00:00:22.715 --> 00:00:25.895
These algorithms actually aren't great.

11
00:00:25.895 --> 00:00:29.882
This is more like a topic for
tomorrow's workshop.

12
00:00:29.882 --> 00:00:35.155
But I would use something like the lib
sodium implementations available in node.

13
00:00:35.155 --> 00:00:39.099
But whatever, we'll just use some aes or
whatever I guess for this purpose.

14
00:00:39.099 --> 00:00:43.068
Yeah, let's build the crappy VPN-
&gt;&gt; [LAUGH]

15
00:00:43.068 --> 00:00:46.406
&gt;&gt; [LAUGH] With just like a password,

16
00:00:46.406 --> 00:00:50.574
sure so, It's getting interesting.

17
00:00:50.574 --> 00:00:55.158
Okay, so we'll copy your proxy server and
we'll call it vpn.js now.

18
00:00:55.158 --> 00:00:57.856
So our VPN will be an echo server VPN,

19
00:00:57.856 --> 00:01:03.352
it'll connect to our echo server inside
of our network and back out again.

20
00:01:03.352 --> 00:01:07.812
So there's a crypto module in node
that provides different kinds of

21
00:01:07.812 --> 00:01:09.385
streaming endpoints.

22
00:01:09.385 --> 00:01:13.963
So what we need to do is we need to,

23
00:01:17.998 --> 00:01:21.448
So our client now is gonna
have to be crypto aware.

24
00:01:21.448 --> 00:01:24.055
So we're gonna have to
write a separate client.

25
00:01:24.055 --> 00:01:24.766
I'll write this server first.

26
00:01:24.766 --> 00:01:28.285
So we need to create a password.

27
00:01:29.557 --> 00:01:31.269
That's pretty secure.

28
00:01:31.269 --> 00:01:35.525
And then we need to create a cipher for
that, so

29
00:01:35.525 --> 00:01:39.674
I'll call it enc = crypto.createCipher,

30
00:01:39.674 --> 00:01:43.835
I believe, and
then it takes the algorithm.

31
00:01:43.835 --> 00:01:45.520
That's in algorithm ab, right?

32
00:01:45.520 --> 00:01:50.279
readme crypto, there's a great
command that you can get at NPM called

33
00:01:50.279 --> 00:01:52.711
the readmeNPM install-greadme.

34
00:01:52.711 --> 00:01:55.112
And I actually wrote this patch,

35
00:01:55.112 --> 00:02:00.532
you can read the core docs offline in
your terminal for any kind of package.

36
00:02:00.532 --> 00:02:06.921
So just find an exit,
whoops, createCipher.

37
00:02:06.921 --> 00:02:10.379
So here's an example right there,
we'll just use that,

38
00:02:10.379 --> 00:02:12.858
whatever that is aes192, who cares?

39
00:02:12.858 --> 00:02:17.630
[LAUGH]
&gt;&gt; I'll be doing my banking on this later

40
00:02:17.630 --> 00:02:19.024
so please do it right.

41
00:02:19.024 --> 00:02:23.442
&gt;&gt; [LAUGH] So
this is gonna be a transform stream,

42
00:02:23.442 --> 00:02:26.709
this createCipher provides us.

43
00:02:26.709 --> 00:02:32.782
So we need to take the incoming
data that's gonna be encrypted.

44
00:02:32.782 --> 00:02:34.776
We need to decipher it actually.

45
00:02:34.776 --> 00:02:36.904
So we would call createDecipher, I think.

46
00:02:41.870 --> 00:02:46.778
Yeah, createDecipher with the algorithm
name and then the password,

47
00:02:46.778 --> 00:02:49.409
so just a standard symmetric cipher.

48
00:02:49.409 --> 00:02:54.547
So we'll pipe our
encryption into a stream.

49
00:02:54.547 --> 00:02:59.134
Or sorry, our stream goes
into our encryption like so.

50
00:02:59.134 --> 00:03:03.026
Actually, we could do this in line and
it will look cooler.

51
00:03:03.026 --> 00:03:06.692
Although I'll cover a better way to
sort of set up these pipe chains a bit

52
00:03:06.692 --> 00:03:10.861
later with a module called pump defy that
it's better for production purposes.

53
00:03:10.861 --> 00:03:13.667
But whatever,
don't do this in production anyways,

54
00:03:13.667 --> 00:03:15.562
don't roll your own crypto please.

55
00:03:15.562 --> 00:03:21.997
And then so our echo server is gonna
be a piece of legacy software so

56
00:03:21.997 --> 00:03:26.680
it's not gonna be able
to support encryption.

57
00:03:26.680 --> 00:03:30.544
So we're gonna pipe plain
text to it behind our VPN.

58
00:03:30.544 --> 00:03:34.251
And then at the other end, we need to
encrypt the data on the way out again.

59
00:03:37.543 --> 00:03:41.683
So right, and then, of course, this is
gonna be vulnerable to all kinds of

60
00:03:41.683 --> 00:03:44.595
terrible things like replay attacks and
whatever.

61
00:03:44.595 --> 00:03:48.542
So [LAUGH] again,
it's just an example, don't use it.

62
00:03:48.542 --> 00:03:53.386
&gt;&gt; What's a replay attack?

63
00:03:53.386 --> 00:03:57.259
&gt;&gt; It's when you take a packet that's
been sent and you just send it again.

64
00:03:57.259 --> 00:03:58.653
&gt;&gt; Okay.

65
00:03:58.653 --> 00:04:02.510
&gt;&gt; [LAUGH] And if the if the crypto
doesn't set a sequence and

66
00:04:02.510 --> 00:04:07.036
doesn't do a bunch of other tricks,
then it'll just accept it.

67
00:04:07.036 --> 00:04:11.946
And so if you know when somebody submitted
something, you can sort of figure out

68
00:04:11.946 --> 00:04:15.550
what packet that was and
send it again and again and again.

69
00:04:15.550 --> 00:04:19.620
If somebody sent you $5,
you just capture when they did it, and

70
00:04:19.620 --> 00:04:24.439
then just send it again and again, and
you have a million dollars, anyways.

71
00:04:24.439 --> 00:04:25.574
&gt;&gt; Let's do that next.

72
00:04:25.574 --> 00:04:32.085
&gt;&gt; [LAUGH] It'd be a little bit trickier
to do that just on the fly, unprepared.

73
00:04:32.085 --> 00:04:36.619
So we can pipe the other end into
createCiphers that it's also encrypted

74
00:04:36.619 --> 00:04:37.595
on the way out.

75
00:04:37.595 --> 00:04:39.860
That's another kind of transform stream.

76
00:04:39.860 --> 00:04:42.100
And then we could pipe that
back out to our stream.

77
00:04:42.100 --> 00:04:47.460
So here's what our pipeline is,
this is still sort of a basic

78
00:04:47.460 --> 00:04:51.120
duplex pipeline because it starts with
a stream and it ends with the same stream.

79
00:04:52.240 --> 00:04:54.340
And in between,
we have another duplex stream, but

80
00:04:54.340 --> 00:04:57.340
we sort of sandwiched in two
transforms in the middle.

81
00:04:58.610 --> 00:05:01.757
So we're gonna take our encrypted stream.

82
00:05:01.757 --> 00:05:06.331
We're gonna decrypt it, we're gonna
pipe that data to our echo server and

83
00:05:06.331 --> 00:05:10.268
our VPN and then we're gonna encrypt
it again and send it on out.

84
00:05:10.268 --> 00:05:11.717
So that's what this should do.

85
00:05:11.717 --> 00:05:12.969
And again, this is on the fly.

86
00:05:12.969 --> 00:05:16.696
So we're playing with fire a little bit.

87
00:05:16.696 --> 00:05:23.246
So we need to make a custom client now,
vpn-client.js.

88
00:05:23.246 --> 00:05:28.178
Whoops, so
I just copied the existing VPN server and

89
00:05:28.178 --> 00:05:33.459
we're gonna modify this client
to try to get it to work.

90
00:05:33.459 --> 00:05:39.327
So instead of net.createServer,
we create our stream now with net.connect.

91
00:05:39.327 --> 00:05:42.561
And we can give it a port and I'm sorry,

92
00:05:42.561 --> 00:05:47.563
our port is actually a 5005
is where our VPN server runs.

93
00:05:47.563 --> 00:05:52.642
So our VPN client is gonna
take standard in and

94
00:05:52.642 --> 00:05:57.062
we're gonna pipe that to encryption.

95
00:05:57.062 --> 00:06:02.397
So all that we need to do is sort of
swap the order of the decipher and

96
00:06:02.397 --> 00:06:04.243
the cipher, like so.

97
00:06:04.243 --> 00:06:08.944
And our decipher goes there.

98
00:06:08.944 --> 00:06:14.560
And we put the stream in the middle,
and then we pipe the standard out.

99
00:06:14.560 --> 00:06:17.798
And now we are the duplex stream.

100
00:06:17.798 --> 00:06:21.963
So notice how process standard
in goes into a duplex stream,

101
00:06:21.963 --> 00:06:24.339
goes out to process standard out.

102
00:06:24.339 --> 00:06:28.915
But then, we are the duplex stream that's
gonna type things into the keyboard and

103
00:06:28.915 --> 00:06:29.856
also read them.

104
00:06:29.856 --> 00:06:33.237
So we're sort of supplying the input and

105
00:06:33.237 --> 00:06:38.911
interpreting the output as our
human meet machine can uniquely do.

106
00:06:38.911 --> 00:06:40.599
So I don't know, this might work.

107
00:06:40.599 --> 00:06:41.347
Let's give it a shot.

108
00:06:43.463 --> 00:06:50.555
So node vpn.js, and
now node vpn-client.js.

109
00:06:50.555 --> 00:06:54.990
A digital envelope routing,
weird, connection refused.

110
00:06:54.990 --> 00:06:56.480
All right,
I'm not running the echo server.

111
00:06:56.480 --> 00:06:59.983
So I need to run the echo server,
port 5000.

112
00:06:59.983 --> 00:07:06.683
I'm the sysadmin now, so standing up
all of the servers to run the vpn.

113
00:07:06.683 --> 00:07:10.695
Now I run the vpn client, I say hi.

114
00:07:10.695 --> 00:07:15.616
And no data comes back
which I think is because,

115
00:07:15.616 --> 00:07:18.908
yeah, so it's-
&gt;&gt; There was an error on the [INAUDIBLE].

116
00:07:18.908 --> 00:07:20.179
&gt;&gt; What?

117
00:07:20.179 --> 00:07:22.485
&gt;&gt; There was an error on the echo server.

118
00:07:22.485 --> 00:07:25.417
&gt;&gt; No, what it's actually
doing is it's buffering.

119
00:07:25.417 --> 00:07:30.270
So the way these crypto streams work is
you have to actually fill them up with

120
00:07:30.270 --> 00:07:33.287
enough data before they'll provide output.

121
00:07:33.287 --> 00:07:37.769
And this is done for some good
security reasons but if you notice,

122
00:07:37.769 --> 00:07:42.431
once I typed a bunch of gibberish,
and indeed told us back, hello.

123
00:07:42.431 --> 00:07:46.134
So with some other
improvements to do filling,

124
00:07:46.134 --> 00:07:52.256
I mean I wouldn't really mess with this
anymore cuz it's horribly insecure.

125
00:07:52.256 --> 00:07:56.463
But in due time, you could have a semi
decent kinda thing if you wanted to spend

126
00:07:56.463 --> 00:07:59.050
a lot of time-
&gt;&gt; Could you trace through what happened

127
00:07:59.050 --> 00:08:02.712
again, just like all the servers and
where everything went and went back to?

128
00:08:02.712 --> 00:08:05.880
&gt;&gt; Yeah, so to recap,
we have our echo server.

129
00:08:05.880 --> 00:08:07.179
Our echo server is very simple.

130
00:08:07.179 --> 00:08:08.590
We were testing it with Netcat.

131
00:08:08.590 --> 00:08:12.454
So it takes input and
writes out the output again.

132
00:08:12.454 --> 00:08:15.964
We can also stick it to uppercase
stream in there if we want it to,

133
00:08:15.964 --> 00:08:20.200
the uppercase echo server or whatever,
but it's just a simple echo server.

134
00:08:21.590 --> 00:08:25.410
We have our VPN server, runs on port 5005.

135
00:08:25.410 --> 00:08:30.150
And it connects to the echo
server which runs on port 5000.

136
00:08:30.150 --> 00:08:35.781
It takes incoming connections,
unencrypts them.

137
00:08:35.781 --> 00:08:38.737
And then sends the plaintext
to our echo server,

138
00:08:38.737 --> 00:08:42.281
our echo server sends the response
back to the VPN server.

139
00:08:42.281 --> 00:08:48.400
And the VPN server then encrypts the data
and sends it back out to the client.

140
00:08:48.400 --> 00:08:52.889
So it's encrypted both ways on
the boundary of the network.

141
00:08:54.590 --> 00:08:58.920
Then in our VPN client, it does the same
thing but in an opposite order.

142
00:08:58.920 --> 00:09:04.250
So it takes input from standard in,
pipes that to our encryption,

143
00:09:04.250 --> 00:09:10.454
pipes that back out to the stream,
which is the connection to the VPN server.

144
00:09:10.454 --> 00:09:15.130
And anything that comes back from the VPN
server then needs to be decrypted which is

145
00:09:15.130 --> 00:09:16.159
done right here.

146
00:09:16.159 --> 00:09:20.652
And the plaintext is written to
standard out, so that's what we have.

147
00:09:20.652 --> 00:09:22.351
&gt;&gt; We could validate this
by running TCP dump and

148
00:09:22.351 --> 00:09:24.418
listening to see if it's encrypted or
not encrypted?

149
00:09:24.418 --> 00:09:29.217
&gt;&gt; Yeah, you would see
encrypted data on on the port.

150
00:09:29.217 --> 00:09:34.050
But you'd see unencrypted data
on port 5000 if you're gonna get

151
00:09:34.050 --> 00:09:36.477
all on the same machine, so yeah.

152
00:09:36.477 --> 00:09:40.747
You could use some of those TCP dump
commands from the networking section to

153
00:09:40.747 --> 00:09:41.300
do that.

