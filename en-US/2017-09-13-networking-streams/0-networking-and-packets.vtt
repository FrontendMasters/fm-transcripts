WEBVTT

1
00:00:00.380 --> 00:00:01.204
Hello, everyone.

2
00:00:01.204 --> 00:00:04.717
So today we're gonna start
out with networking,

3
00:00:04.717 --> 00:00:07.477
which can mean a lot of things but here,

4
00:00:07.477 --> 00:00:12.497
I mean this word in terms of what
are clients, and what are servers, and

5
00:00:12.497 --> 00:00:18.123
what does TCP look like, and what kinds
of protocols do we typically deal with?

6
00:00:18.123 --> 00:00:21.774
So that will be the first part.

7
00:00:21.774 --> 00:00:27.613
So there are a lot of ideas that people
might have about what is a server and

8
00:00:27.613 --> 00:00:31.921
what is a client in terms of
what that physically might

9
00:00:31.921 --> 00:00:34.142
manifest as like a server.

10
00:00:34.142 --> 00:00:39.902
I think people usually think of a big
rack mounted thing with blinky lights and

11
00:00:39.902 --> 00:00:40.530
stuff.

12
00:00:40.530 --> 00:00:45.381
But really, any networked computer can
be a server just like any networked

13
00:00:45.381 --> 00:00:47.083
computer can be a client.

14
00:00:47.083 --> 00:00:55.955
These are more roles that
computers play in how we use them.

15
00:00:57.078 --> 00:01:02.386
So, Usually,

16
00:01:02.386 --> 00:01:08.754
this kind of stuff runs based on little
pieces of data, little chunks of data,

17
00:01:08.754 --> 00:01:14.164
which is also an important idea for
later when we get into streams.

18
00:01:14.164 --> 00:01:18.676
And these packets are kind of
chopped up into little pieces and

19
00:01:18.676 --> 00:01:20.421
sent over the network.

20
00:01:20.421 --> 00:01:25.300
So you might get them
out of order as well.

21
00:01:25.300 --> 00:01:30.091
So there's all kinds of different ways,
different little sequence numbers that get

22
00:01:30.091 --> 00:01:32.899
attached to the packets as
they fly over the wire.

23
00:01:32.899 --> 00:01:38.179
With TCP you get acknowledgments,
so for every packet you sent you

24
00:01:38.179 --> 00:01:43.659
get an ACK back from the other side
that says, yes, I received this.

25
00:01:43.659 --> 00:01:45.524
But with UDP you don't.

26
00:01:45.524 --> 00:01:50.219
We're mostly gonna be playing around
with TCP because it's usually easier

27
00:01:50.219 --> 00:01:54.472
to think about if you send something,
it's gonna arrive in order and

28
00:01:54.472 --> 00:01:56.910
you know whether you get it back or not.

29
00:01:56.910 --> 00:01:57.927
You have a question?

30
00:01:57.927 --> 00:02:01.822
&gt;&gt; So you just use UDP cuz it's faster
then or why would you ever use it?

31
00:02:01.822 --> 00:02:05.196
&gt;&gt; You would use UDP if,
for example, a good use for

32
00:02:05.196 --> 00:02:07.993
it is something like a streaming audio or

33
00:02:07.993 --> 00:02:13.858
streaming video where you don't wanna
resend things that didn't go through okay.

34
00:02:13.858 --> 00:02:17.211
You just want it to send
the latest version always.

35
00:02:17.211 --> 00:02:20.274
That would be a good example.

36
00:02:20.274 --> 00:02:25.030
Actually for streaming audio and
video, those are mostly done these

37
00:02:25.030 --> 00:02:29.469
days with TCP but I think a lot of
games still use UDP for reasons.

38
00:02:29.469 --> 00:02:34.195
But the much more common
one is TCP these days.

39
00:02:36.503 --> 00:02:39.015
Yeah, everything else is TCP.

40
00:02:39.015 --> 00:02:39.808
[LAUGH]

