WEBVTT

1
00:00:00.580 --> 00:00:04.690
So we looked a little bit about
how the through2 userland package

2
00:00:04.690 --> 00:00:09.350
compares to the transform
stream that's part of core.

3
00:00:09.350 --> 00:00:12.340
Just use whatever version you like better.

4
00:00:13.830 --> 00:00:14.825
It doesn't matter very much.

5
00:00:14.825 --> 00:00:21.690
So if you do use core,
then you have to pass in a, you can

6
00:00:21.690 --> 00:00:26.750
pass in a function that's gonna be acting
on each chunk of data as it comes in.

7
00:00:26.750 --> 00:00:30.790
And you can also pass in a function
that will get called when the stream is

8
00:00:30.790 --> 00:00:36.010
finished at the end, which is called
flush is the name of the key.

9
00:00:36.010 --> 00:00:39.448
And if you call through2, then you
can pass these in just as positional

10
00:00:39.448 --> 00:00:41.931
arguments, you don't have
to provide an object.

11
00:00:47.756 --> 00:00:51.383
So here's what the through2
interface looks like,

12
00:00:51.383 --> 00:00:54.130
you provide a right and an end function.

13
00:00:54.130 --> 00:00:58.270
And optionally at the beginning, you can
provide an options object to control some

14
00:00:58.270 --> 00:01:02.890
of the sort of obscure options that
are available like object mode and

15
00:01:03.910 --> 00:01:05.400
also things like the high watermark.

16
00:01:06.980 --> 00:01:10.450
So the signature of these things is we
already saw the right function, you have

17
00:01:10.450 --> 00:01:14.550
the buffer, the encoding, which you can
mostly ignore and the next function.

18
00:01:14.550 --> 00:01:17.796
One thing that I didn't cover yet

19
00:01:17.796 --> 00:01:22.522
is that so sometimes, most of the time,

20
00:01:22.522 --> 00:01:26.110
you'll wanna do something like call the
next function with the data that you have,

21
00:01:27.140 --> 00:01:32.530
but not every piece of data might
correspond to a piece of output.

22
00:01:32.530 --> 00:01:39.280
So what you can use instead in those cases
is you can call next separately without

23
00:01:39.280 --> 00:01:44.310
any data, and you can call this.push
to sort of provide data to the stream.

24
00:01:46.330 --> 00:01:50.760
So for example, maybe if you're writing
something like a gzip compression,

25
00:01:50.760 --> 00:01:55.658
you have to buffer things up
into this set buffer size.

26
00:01:55.658 --> 00:01:58.450
So if you only got 100 bytes of data,

27
00:01:58.450 --> 00:02:01.610
then you don't really have enough
to fill up your buffer yet.

28
00:02:01.610 --> 00:02:04.280
So you might not have any
data to push right away.

29
00:02:04.280 --> 00:02:06.790
So you might just call next a couple
of times until you have enough

30
00:02:06.790 --> 00:02:07.690
data, for example.

31
00:02:08.710 --> 00:02:10.220
But these are interchangeable.

32
00:02:10.220 --> 00:02:17.201
So how this would work is, So
these two things do the same thing.

33
00:02:24.486 --> 00:02:28.830
&gt;&gt; So it will push it to the next
widget to the output of that.

34
00:02:28.830 --> 00:02:30.770
&gt;&gt; Yes, yeah, push provides output.

35
00:02:31.790 --> 00:02:34.710
And there's a special case for
the push method.

36
00:02:34.710 --> 00:02:39.620
If you push null, that's the same
as sending an end signal and

37
00:02:39.620 --> 00:02:40.930
that's also true for next.

38
00:02:40.930 --> 00:02:47.140
So if you provide null as the data
portion of the next callback, that's like

39
00:02:47.140 --> 00:02:51.830
you're telling downstream consumers
that okay, this stream is finished.

40
00:02:51.830 --> 00:02:56.762
It's sort of if you hit Ctrl D on
the input of a program that's reading from

41
00:02:56.762 --> 00:03:00.434
the keyboard on standardin,
that's a similar idea.

42
00:03:03.561 --> 00:03:07.880
Another handy thing is if you
don't give through any arguments,

43
00:03:07.880 --> 00:03:09.760
it sets some defaults.

44
00:03:09.760 --> 00:03:11.140
They're pretty convenient.

45
00:03:11.140 --> 00:03:13.764
So if you need a pass through stream for
whatever reason,

46
00:03:13.764 --> 00:03:17.221
something that's just gonna take
the input and copy it to the output side.

47
00:03:17.221 --> 00:03:21.178
And occasionally,
you need something like this,

48
00:03:21.178 --> 00:03:24.405
just don't give through any arguments.

49
00:03:24.405 --> 00:03:29.275
Or if you only want something that's going
to hook into the end portion of through,

50
00:03:29.275 --> 00:03:32.977
you can pass null or
undefined as the first argument for right.

51
00:03:36.581 --> 00:03:41.918
&gt;&gt; Wouldn't it just do
that without through?

52
00:03:41.918 --> 00:03:43.500
&gt;&gt; For a transform stream, yeah.

53
00:03:45.800 --> 00:03:49.600
So an example for
when you might wanna do that is if you

54
00:03:49.600 --> 00:03:53.720
need to use an API that has
a stream shaped hole and

55
00:03:53.720 --> 00:03:58.740
you need to fit a stream into it and you
just want it to kind of just pass through.

56
00:03:58.740 --> 00:04:00.860
So this crops up now and then.

57
00:04:00.860 --> 00:04:05.040
It's kind of hard to articulate
when that happens exactly

58
00:04:05.040 --> 00:04:07.825
without a really contrived example,
but it does happen.

59
00:04:07.825 --> 00:04:09.710
&gt;&gt; Okay.
&gt;&gt; Actually, pretty commonly.

60
00:04:09.710 --> 00:04:11.182
So just something to be aware of.

61
00:04:11.182 --> 00:04:17.770
I also see that there's a question for
best practices for errors.

62
00:04:17.770 --> 00:04:18.530
So yeah,

63
00:04:18.530 --> 00:04:22.640
I have some stuff about errors a bit
later and dealing with clean up properly.

64
00:04:22.640 --> 00:04:26.260
There's some good modules for that,
like a pump and pump of fire pretty good.

