WEBVTT

1
00:00:00.000 --> 00:00:05.580
Sorry, so a would be like a readable or
a transform.

2
00:00:06.913 --> 00:00:08.517
No, a it actually is a duplex.

3
00:00:08.517 --> 00:00:10.222
&gt;&gt; It's gonna be an another duplex stream.

4
00:00:10.222 --> 00:00:10.728
&gt;&gt; Okay.

5
00:00:10.728 --> 00:00:12.643
&gt;&gt; Both of these are duplex
streams actually.

6
00:00:12.643 --> 00:00:13.539
&gt;&gt; Okay.

7
00:00:13.539 --> 00:00:14.332
&gt;&gt; Yeah.

8
00:00:14.332 --> 00:00:18.999
&gt;&gt; So a would pipe something into stream,
which is duplex and

9
00:00:18.999 --> 00:00:21.306
then stream, also-
&gt;&gt; Yeah.

10
00:00:21.306 --> 00:00:23.405
&gt;&gt; Okay.
&gt;&gt; So maybe this is a good time for

11
00:00:23.405 --> 00:00:27.663
me to just write out an example of how we
would use a duplex stream to make like

12
00:00:27.663 --> 00:00:31.500
a little echo server,
cuz this is I think a good opportunity.

13
00:00:31.500 --> 00:00:37.880
All right, so
I'll make a file called echo.js.

14
00:00:37.880 --> 00:00:40.930
And I'm gonna push these all in
a moment so that you can play around.

15
00:00:42.120 --> 00:00:48.480
So if we require the net module,
we can do net.createServer.

16
00:00:48.480 --> 00:00:53.270
The net.createServer function by default,

17
00:00:53.270 --> 00:00:58.730
accepts function argument that for
every TCP connection

18
00:00:58.730 --> 00:01:03.830
that's incoming, returns a stream,
and that stream is a duplex stream.

19
00:01:05.870 --> 00:01:09.557
And then you can call .listen
on that server object.

20
00:01:09.557 --> 00:01:13.538
So here we're gonna create
a TCP server on port 5000.

21
00:01:13.538 --> 00:01:18.438
And what we can do is, we can just,

22
00:01:20.155 --> 00:01:23.584
Pipe, Let me think.

23
00:01:23.584 --> 00:01:30.181
So we can pipe, Well, here's another thing

24
00:01:30.181 --> 00:01:33.361
that you can do with the duplex stream
is you can pipe a stream into itself.

25
00:01:33.361 --> 00:01:35.063
Because the readable and writable side,

26
00:01:35.063 --> 00:01:38.875
it's not like a transform stream
where it's doing a transformation.

27
00:01:38.875 --> 00:01:41.660
It's actually decoupled, so

28
00:01:41.660 --> 00:01:45.750
this will not create an infinite loop, it
will actually just create an echo server.

29
00:01:45.750 --> 00:01:50.695
And then maybe we can, I'll create
another stream where we can sort

30
00:01:50.695 --> 00:01:54.267
of do a proxy would be
a good second step for this.

31
00:01:54.267 --> 00:01:56.600
And then it will look more
like a duplex stream.

32
00:01:58.270 --> 00:02:01.813
Okay, so if I run this program and

33
00:02:01.813 --> 00:02:06.244
now if I do netcat to localhost 5000,

34
00:02:06.244 --> 00:02:10.305
I get back the same thing that I put in.

35
00:02:10.305 --> 00:02:15.718
This used to be the de facto
example that Ryan Dahl would do,

36
00:02:15.718 --> 00:02:21.043
or other people would do to
like show node js echo servers.

37
00:02:21.043 --> 00:02:26.589
Cuz echo servers are actually pretty
hard to write in languages that don't

38
00:02:26.589 --> 00:02:32.046
have kind of a runtime that can handle
asynchronous pulling in sockets and

39
00:02:32.046 --> 00:02:34.352
all that kind of stuff easily.

40
00:02:34.352 --> 00:02:40.213
So it's a pretty nice little thing to do.

41
00:02:40.213 --> 00:02:42.935
And the next thing that we could do is,

42
00:02:42.935 --> 00:02:46.348
let's make a little proxy now,
an echo proxy.

43
00:02:46.348 --> 00:02:49.769
So we're gonna keep our echo
server running on port 5000, but

44
00:02:49.769 --> 00:02:52.346
we're gonna run a proxy
server on port 5001.

45
00:02:52.346 --> 00:02:56.318
That's going to forward incoming
connections to our proxy server and

46
00:02:56.318 --> 00:02:57.537
then back out again.

47
00:02:57.537 --> 00:03:00.798
So I'll call this proxy.js.

48
00:03:00.798 --> 00:03:04.419
We can use the net module to
make our TCP connections.

49
00:03:04.419 --> 00:03:07.647
And we're gonna have a server as well.

50
00:03:07.647 --> 00:03:10.707
So we need to create a server.

51
00:03:10.707 --> 00:03:15.868
We get a duplex stream and
our server will listen on port 5001.

52
00:03:15.868 --> 00:03:18.963
But then every time we get a connection,

53
00:03:18.963 --> 00:03:24.620
we need to actually connect to
the other server running on port 5000.

54
00:03:24.620 --> 00:03:29.990
So you can omit the localhost, but
this just makes a bit more explicit.

55
00:03:30.990 --> 00:03:35.880
Now we can pipe the incoming
data into that socket.

56
00:03:35.880 --> 00:03:40.873
And then the outgoing data can go back
into the other end of the duplex stream.

57
00:03:40.873 --> 00:03:45.344
So this is more similar to
the example that I put in

58
00:03:45.344 --> 00:03:50.045
the slides where you
have a.pipeb.pipea again.

59
00:03:50.045 --> 00:03:54.992
So if I run our proxy server now,
whoop, it's not on 5001,

60
00:03:54.992 --> 00:03:57.664
I must be peering something else.

61
00:03:57.664 --> 00:04:05.280
5005, okay, so now if I connect
to local host 5005, say hello.

62
00:04:05.280 --> 00:04:08.640
And it's actually going
to the proxy server and

63
00:04:08.640 --> 00:04:13.518
then the proxy server is going to
the echo server and then back again.

64
00:04:18.301 --> 00:04:23.066
Cool, hopefully this is a more
concrete example of what is

65
00:04:23.066 --> 00:04:25.410
meant by the duplex stream.

66
00:04:25.410 --> 00:04:31.019
I think it mostly takes just playing
around with this kind of stuff and

67
00:04:31.019 --> 00:04:34.307
then you sort of build up an intuition for

68
00:04:34.307 --> 00:04:39.640
how you can use these kinds of
abstractions in your own programs.

