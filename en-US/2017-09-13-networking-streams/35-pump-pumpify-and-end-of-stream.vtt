WEBVTT

1
00:00:00.340 --> 00:00:03.910
So we've been doing a lot of
these streaming pipelines.

2
00:00:03.910 --> 00:00:09.040
And it's actually kind of easy to mess
up when you write things in this way.

3
00:00:09.040 --> 00:00:11.890
I mean, I've been doing it this way for
brevity, so far, so

4
00:00:11.890 --> 00:00:14.910
I don't have to explain all of the caveats
why you wouldn't wanna do that.

5
00:00:14.910 --> 00:00:19.050
So, in a more realistic setting,
you probably wanna use a module

6
00:00:19.050 --> 00:00:22.240
that's gonna handle the error
propagation in all of the streams.

7
00:00:22.240 --> 00:00:25.430
So, how error propagation
works in node is,

8
00:00:25.430 --> 00:00:29.890
anytime, I think our HTTP
example was guilty of this, or

9
00:00:29.890 --> 00:00:34.320
maybe something with one of those long
pipelines, let's look at one of those.

10
00:00:34.320 --> 00:00:37.230
So, our vpn-client, maybe, yeah.

11
00:00:37.230 --> 00:00:39.400
Although it's better, in a server.

12
00:00:40.970 --> 00:00:44.410
All right, so
here's our VPN server from earlier.

13
00:00:44.410 --> 00:00:47.810
It's got this long list
of events that happen.

14
00:00:47.810 --> 00:00:54.840
The problem is, that if any of these has
an error, streams are also event emitters.

15
00:00:54.840 --> 00:00:59.220
And if an event emitter emits
an error event that has no listeners,

16
00:00:59.220 --> 00:01:00.720
the node will crash.

17
00:01:00.720 --> 00:01:04.330
It's designed to do this, so
that if there is a problem,

18
00:01:04.330 --> 00:01:08.645
your server will just crash
instead of it being eaten and

19
00:01:08.645 --> 00:01:14.490
stuff's silently tearing itself apart,
it's probably better if it just crashes.

20
00:01:15.530 --> 00:01:21.030
So, one way that we can rewrite this sort
of thing to be a little bit more robust

21
00:01:21.030 --> 00:01:27.340
is to use a module like pump, that's going
to pipe all these things together for us.

22
00:01:27.340 --> 00:01:31.270
So, if you call pump
with a bunch of streams,

23
00:01:31.270 --> 00:01:33.970
it's gonna set up the pipes
internally between each stream.

24
00:01:33.970 --> 00:01:37.935
So, it's doing stream1.pipe,
stream2.pipe, stream3, but

25
00:01:37.935 --> 00:01:40.270
in a way that's gonna deal with errors.

26
00:01:40.270 --> 00:01:43.964
And, in fact, you can also put
a callback at the end of that,

27
00:01:43.964 --> 00:01:45.862
that's gonna handle errors.

28
00:01:47.889 --> 00:01:49.271
So, I'll require pump.

29
00:01:51.419 --> 00:01:54.927
Pump is also better than
just doing it this way,

30
00:01:54.927 --> 00:01:58.268
sort of cleaning up after streams,
as well.

31
00:01:58.268 --> 00:02:00.820
So, sometimes you can get
file descriptor leaks and

32
00:02:00.820 --> 00:02:03.550
things that pump is a little
bit better at dealing with.

33
00:02:04.600 --> 00:02:07.630
So there are some questions earlier
in the chat about this sort of thing.

34
00:02:09.130 --> 00:02:12.480
So now,
we wanna take our stream is the first one.

35
00:02:12.480 --> 00:02:18.640
And now instead of calling that pipe,
we just replaced these all with commas.

36
00:02:18.640 --> 00:02:20.140
And, I think it ought to work.

37
00:02:20.140 --> 00:02:22.340
If there's an error,
you can optionally listen for one.

38
00:02:23.610 --> 00:02:26.578
So, I'll just print it out.

39
00:02:26.578 --> 00:02:32.525
Okay, so I think if I stand up
our VPN echo server from earlier,

40
00:02:32.525 --> 00:02:40.376
now, It should be more enterprise ready.

41
00:02:40.376 --> 00:02:46.266
[LAUGH] And I'm gonna send
it a bigger chunk this time.

42
00:02:48.187 --> 00:02:50.100
Great, so it's working.

43
00:02:50.100 --> 00:02:52.410
And, if I kill the connection.

44
00:02:54.530 --> 00:02:59.720
So, this message was printed because
it's coming from our handler, and

45
00:02:59.720 --> 00:03:01.210
it didn't crash the server, all right?

46
00:03:01.210 --> 00:03:05.820
It otherwise would have,
so, useful to do with pump.

47
00:03:05.820 --> 00:03:08.860
Actually, I think if you use pump
it's just gonna eat these errors and

48
00:03:08.860 --> 00:03:09.580
you won't see them.

49
00:03:09.580 --> 00:03:13.250
But if you do pass in a function
at the end of that chain,

50
00:03:13.250 --> 00:03:15.340
you can handle them, if you like.

51
00:03:15.340 --> 00:03:16.070
Because most of the time,

52
00:03:16.070 --> 00:03:20.470
when you have one of those pipelines
that's coming off a duplex socket,

53
00:03:20.470 --> 00:03:25.100
it's errors are probably caused by the
network transport just ending abruptly.

54
00:03:25.100 --> 00:03:28.424
And so, it's not really something
that you need to worry about,

55
00:03:28.424 --> 00:03:32.112
although it might cause some different
kinds of file descriptor leaks or

56
00:03:32.112 --> 00:03:33.877
custom memory leaks of some sort.

57
00:03:33.877 --> 00:03:41.277
So it's just easier to wrap your pipelines
with these kinds of tools, all right?

58
00:03:41.277 --> 00:03:42.070
That's all working well.

59
00:03:44.020 --> 00:03:45.810
There's just a version called pumpify.

60
00:03:47.810 --> 00:03:52.600
And, unlike pump, where it's gonna
just pipe everything together,

61
00:03:52.600 --> 00:03:57.630
with pumpify, you get back a stream
that you can write to and read from.

62
00:03:57.630 --> 00:04:03.760
So this is often more useful if you have
a module like an API where you wanna

63
00:04:03.760 --> 00:04:09.000
return a stream that sort of encapsulates
this whole streaming pipeline end-to-end.

64
00:04:09.000 --> 00:04:10.840
You can use pumpify for that.

65
00:04:10.840 --> 00:04:12.070
So, you need to do that?

66
00:04:12.070 --> 00:04:14.320
There you go.

67
00:04:14.320 --> 00:04:19.260
One of the final things is, streams
are actually really, it's really difficult

68
00:04:19.260 --> 00:04:23.810
oftentimes to know when a stream is over,
when it's done with.

69
00:04:23.810 --> 00:04:28.010
So, there's this fantastic
package called end-of-stream that

70
00:04:28.010 --> 00:04:32.980
knows about all of the obscure subtle
ways about how streams can end,

71
00:04:32.980 --> 00:04:35.630
be they readable, or
writable, or whatever.

72
00:04:36.812 --> 00:04:40.250
Because also, if there's an error,
then the stream is over but

73
00:04:40.250 --> 00:04:43.400
it won't admit an end event because
end is for a successful termination.

74
00:04:43.400 --> 00:04:47.840
So it just sort of encapsulates all
of those use cases into something

75
00:04:47.840 --> 00:04:51.990
where you can just stick your
cleanup logic into one place,

76
00:04:51.990 --> 00:04:55.800
and you don't have to worry about all of
these edge cases if you use this package.

77
00:04:55.800 --> 00:04:57.104
So, how end-of-stream, whoa.

78
00:05:03.201 --> 00:05:07.718
How end-of-stream works is
you provide it with a stream,

79
00:05:07.718 --> 00:05:12.595
as an argument, and you provide
it with a function that's going

80
00:05:12.595 --> 00:05:17.650
to be called whenever that stream is done,
whether it errors out,

81
00:05:17.650 --> 00:05:23.830
whether it closes cleanly, or what have
you, then this function is gonna fire.

82
00:05:30.704 --> 00:05:36.039
Okay, so, I'm

83
00:05:36.039 --> 00:05:41.140
gonna pumpify the vpn and
push that result.

84
00:05:41.140 --> 00:05:45.820
I don't know if we wanna take
another little short break, maybe,

85
00:05:45.820 --> 00:05:46.910
to play around with this stuff?

