WEBVTT

1
00:00:00.120 --> 00:00:04.597
We've now seen a couple of examples
of different text-based protocols,

2
00:00:04.597 --> 00:00:06.665
like we saw HTTP, SMTP, and IRC.

3
00:00:06.665 --> 00:00:09.887
And we were able to just
type everything out by hand,

4
00:00:09.887 --> 00:00:12.970
because these protocols are designed for
that.

5
00:00:12.970 --> 00:00:17.788
They're designed to be easy to implement,

6
00:00:17.788 --> 00:00:21.053
just by generating strings.

7
00:00:21.053 --> 00:00:24.110
What's really nice about
text-based protocols too,

8
00:00:24.110 --> 00:00:28.530
is that they're really easy to
inspect as they travel over the wire.

9
00:00:28.530 --> 00:00:33.420
So this means that if you can somehow
capture the information that's

10
00:00:34.470 --> 00:00:37.870
going over the wire, like going over
the Wi-Fi, going over the Ethernet,

11
00:00:39.000 --> 00:00:42.150
then you can more easily debug things.

12
00:00:42.150 --> 00:00:45.692
You can also just poke around and
see what's happening.

13
00:00:45.692 --> 00:00:49.490
With binary protocols,
this is harder because you have to

14
00:00:49.490 --> 00:00:53.367
have like a decoder that's
gonna require something like,

15
00:00:53.367 --> 00:00:57.648
special logic that knows how to
parse that particular protocol.

16
00:01:00.790 --> 00:01:04.520
A good example of binary protocol is SSH.

17
00:01:04.520 --> 00:01:08.022
So if you try to connect
with netcat over SSH and

18
00:01:08.022 --> 00:01:11.075
you can just type something like hello,
then it's just gonna tell you,

19
00:01:11.075 --> 00:01:13.795
no, you're not speaking this
protocol correctly, go away.

20
00:01:13.795 --> 00:01:15.550
[LAUGH] Which is what it does here.

21
00:01:18.380 --> 00:01:23.410
Although with SSH, the first bit right
here is actually a bit of text, but

22
00:01:23.410 --> 00:01:25.370
then everything else
past that point is not.

23
00:01:26.400 --> 00:01:28.908
So this actually discloses
a lot of information,

24
00:01:28.908 --> 00:01:31.774
like about what version of
open SSH you're running, and

25
00:01:31.774 --> 00:01:35.612
maybe not the best idea for every protocol
to do that, but that's how it is.

26
00:01:35.612 --> 00:01:40.350
Also what operating system you're running.

27
00:01:40.350 --> 00:01:42.556
So to use these kinds of protocols,

28
00:01:42.556 --> 00:01:46.525
we have to use custom programs
like the SSH command, or mosh, or

29
00:01:46.525 --> 00:01:51.102
something like that, that knows how
to speak that combiner or protocol.

30
00:01:51.102 --> 00:01:51.859
&gt;&gt; Wireshark.

31
00:01:51.859 --> 00:01:52.667
&gt;&gt; Yeah.

32
00:01:52.667 --> 00:01:56.351
However, if we want to
know what's going on,

33
00:01:56.351 --> 00:02:00.506
not in SSH because it's
an encrypted protocol, but

34
00:02:00.506 --> 00:02:05.606
in other kinds of protocols that
are unencrypted including some

35
00:02:05.606 --> 00:02:10.423
binary protocols,
we can use something like Wireshark, or

36
00:02:10.423 --> 00:02:16.230
I like tcpdump is very fantastic for
writing little shell scripts.

37
00:02:16.230 --> 00:02:19.780
There's also TShark, which is
command line version of Wireshark.

38
00:02:19.780 --> 00:02:24.348
That's quite good, and
you can sort of inspect what's

39
00:02:24.348 --> 00:02:29.509
traveling over the wire on the network,
and it's lots of fun.

40
00:02:29.509 --> 00:02:31.780
It's also a useful
debugging tool sometimes.

41
00:02:31.780 --> 00:02:36.344
If you're running a program,
it's like doing stuff, it's phoning home,

42
00:02:36.344 --> 00:02:39.921
doing all kinds of things that
you maybe don't want it to do or

43
00:02:39.921 --> 00:02:44.745
you need to know what it's doing, then
this is sometimes the best way to do that.

44
00:02:44.745 --> 00:02:48.980
Oops, so

45
00:02:48.980 --> 00:02:54.540
if you have tcpdump, crap,
I don't have that installed.

46
00:02:55.980 --> 00:02:57.845
I do have TShark though.

47
00:02:57.845 --> 00:03:00.053
If you have tcpdump installed,

48
00:03:00.053 --> 00:03:05.039
on Linux at least you can run this
command, tcpdump -x, which will show

49
00:03:05.039 --> 00:03:09.970
a hex representation of all of the data
that's going over the network.

50
00:03:09.970 --> 00:03:14.508
So if I do tcpdump -x,
I see all of this wonderful

51
00:03:14.508 --> 00:03:20.062
information that's just
traveling over the Wi-Fi here.

52
00:03:20.062 --> 00:03:23.310
You'll notice that a lot of this
is actually kind of in plain text.

53
00:03:26.040 --> 00:03:34.519
Like if I scroll up, I see I have a bunch
of HTTP traffic up there, anyways.

54
00:03:34.519 --> 00:03:38.760
So how tcpdump is formatted on the left,

55
00:03:38.760 --> 00:03:45.130
you have the hexadecimal representation,
and this column is the byte offset.

56
00:03:45.130 --> 00:03:47.590
And then you have
the ASCII representation.

57
00:03:47.590 --> 00:03:50.915
So a lot of packets have the source and

58
00:03:50.915 --> 00:03:55.318
destination host just in
an ASCII over the wire.

59
00:03:58.541 --> 00:04:00.430
You can also filter.

60
00:04:00.430 --> 00:04:03.327
So if we only want to see port 80,
we can run these commands.

61
00:04:06.150 --> 00:04:09.700
And 80 is HTTP, which is unencrypted.

62
00:04:09.700 --> 00:04:13.532
So we should be able to
see a lot of fun stuff.

63
00:04:13.532 --> 00:04:18.546
So I can generate an HTTP
response by opening up cURL and

64
00:04:18.546 --> 00:04:22.220
requesting some data from my website.

65
00:04:22.220 --> 00:04:27.570
And here we can see if I scroll up a bit,
indeed here is just raw

66
00:04:27.570 --> 00:04:32.650
HTML coming down the pipe, and
we can also see the request.

67
00:04:34.670 --> 00:04:38.940
This is also true if you're on the same
Wi-Fi, even if it's encrypted by

68
00:04:38.940 --> 00:04:43.618
someone you'll be able to, unless
you're using one of the sophisticated

69
00:04:43.618 --> 00:04:48.710
WPA-Enterprise E versions, your

70
00:04:48.710 --> 00:04:54.800
computer will be able to see everything
that's not encrypted over the wire.

71
00:04:54.800 --> 00:04:59.673
So use HTTPS and use encryption,
unless you want people to be reading

72
00:04:59.673 --> 00:05:04.138
what you're doing on the web,
at a coffee shop, or whatever.

73
00:05:08.271 --> 00:05:13.015
So some fun stuff to try and of course,
you'll see that the browser, or

74
00:05:13.015 --> 00:05:17.630
cURL, or whatever is sending all
of this information in plain text.

75
00:05:17.630 --> 00:05:21.888
So you can see GET, and
that's a space slash space HTTP,

76
00:05:21.888 --> 00:05:26.074
when that one user agent
cURL hosts subset.net, etc.

77
00:05:32.481 --> 00:05:34.300
This is also a fun thing to try.

78
00:05:34.300 --> 00:05:36.975
I forget what capital A does,
but probably it's something cool.

79
00:05:40.564 --> 00:05:44.043
Yeah, this is just another way
of formatting the data, so

80
00:05:44.043 --> 00:05:46.671
you can read the HTML
a little more clearly.

81
00:05:46.671 --> 00:05:51.812
You can see that this is also
using transfer encoding chunked,

82
00:05:51.812 --> 00:05:55.214
with these byte lengths which are in hex.

83
00:06:02.873 --> 00:06:08.449
Okay, so if you want to read more about
these different kinds of text protocols,

84
00:06:08.449 --> 00:06:12.959
I think the best way is to just dive
into these files called RFCs and

85
00:06:12.959 --> 00:06:14.115
just read them.

86
00:06:14.115 --> 00:06:17.649
All right, you don't have to read them
like front to end or anything, but

87
00:06:17.649 --> 00:06:21.297
just skimming them is oftentimes a great
way to learn about new little bits of

88
00:06:21.297 --> 00:06:23.364
trivia that maybe you didn't know about.

89
00:06:23.364 --> 00:06:27.120
I'm sure if I read these, I would learn
stuff that I don't know right now,

90
00:06:27.120 --> 00:06:29.160
cuz I haven't read these in a long time.

91
00:06:29.160 --> 00:06:30.630
So here are some links for that.

92
00:06:32.700 --> 00:06:37.319
And that's all that I have for
the networking section.

93
00:06:37.319 --> 00:06:41.230
So thanks, and
play around with all of this stuff.

94
00:06:41.230 --> 00:06:42.030
Hopefully, it was helpful.

