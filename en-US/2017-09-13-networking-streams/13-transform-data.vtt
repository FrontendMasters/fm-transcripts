WEBVTT

1
00:00:00.080 --> 00:00:04.360
A way that we might modify
this program now is to

2
00:00:04.360 --> 00:00:06.580
transform the data before we print it out.

3
00:00:06.580 --> 00:00:10.280
So a fun thing that we
might be able to do is

4
00:00:11.860 --> 00:00:16.240
maybe we want to convert those
chunks of data to uppercase.

5
00:00:16.240 --> 00:00:19.980
That's a really simple kind of
transformation that we could do.

6
00:00:19.980 --> 00:00:23.790
So for that example, we're gonna
use a module called through2 and

7
00:00:23.790 --> 00:00:25.480
we're gonna insert it into our pipeline.

8
00:00:25.480 --> 00:00:30.170
So, we have the readableStream,
was the first part of our pipeline, and

9
00:00:30.170 --> 00:00:35.300
the final part was to print out
the data to standard output.

10
00:00:35.300 --> 00:00:38.877
And now we're gonna insert
this part in the middle so

11
00:00:38.877 --> 00:00:44.880
you call through with write function,
or an in function that's optional.

12
00:00:44.880 --> 00:00:48.580
And the write function is
going to transform each chunk.

13
00:00:48.580 --> 00:00:50.410
So let's just write that out.

14
00:00:50.410 --> 00:00:52.220
Modifier program.

15
00:00:52.220 --> 00:00:57.029
Maybe I'll call it a loud.js because
it's going to uppercase things.

16
00:00:58.550 --> 00:01:00.420
So we require the through2 package.

17
00:01:03.310 --> 00:01:07.900
And now we pipe to through and we're going
to have a right function that's going to.

18
00:01:10.600 --> 00:01:13.520
So with the function that
you provide to through and

19
00:01:13.520 --> 00:01:17.940
this is also true if you use
the core transform stream method.

20
00:01:17.940 --> 00:01:22.037
You get these three arguments
buffer encoding, and next.

21
00:01:22.037 --> 00:01:27.378
Buffer is a node.js buffer object,
which is kind of like

22
00:01:27.378 --> 00:01:32.290
a binary representation
of data that's coming in.

23
00:01:32.290 --> 00:01:34.480
Encoding, you can just ignore encoding.

24
00:01:35.880 --> 00:01:41.631
I don't think that I've ever
used that option in any program,

25
00:01:41.631 --> 00:01:44.246
maybe like once that's it.

26
00:01:44.246 --> 00:01:47.840
And then the next function is what you
call when you want the next piece of data.

27
00:01:47.840 --> 00:01:52.360
So there's two ways to write out how
you want the output to be formatted.

28
00:01:53.720 --> 00:01:56.720
The first way I'll show you
is to call the next function.

29
00:01:56.720 --> 00:02:00.420
The first parameter that you pass
the next function is going to be

30
00:02:00.420 --> 00:02:01.900
an error object if you have one.

31
00:02:01.900 --> 00:02:05.060
So this is similar to
the node,js callback convention.

32
00:02:05.060 --> 00:02:12.270
Where are the err back where the air
is the first argument to a function,

33
00:02:12.270 --> 00:02:15.300
so we're going to call it with null
because we don't have an error.

34
00:02:15.300 --> 00:02:19.470
The next piece is the piece
of data that we want to send

35
00:02:19.470 --> 00:02:21.830
out on our transform stream.

36
00:02:21.830 --> 00:02:27.495
So if we convert that buffer object to a
string, then we can call that touppercase.

37
00:02:29.210 --> 00:02:33.250
And in this way of dealing
with transform streams,

38
00:02:33.250 --> 00:02:35.570
the output has to be a buffer or a string.

39
00:02:35.570 --> 00:02:39.210
So this should give us a string of output,
so that should work.

40
00:02:41.180 --> 00:02:42.190
Okay, question.

41
00:02:43.400 --> 00:02:48.657
&gt;&gt; I just don't quite understand
why you couldn't just do the to

42
00:02:48.657 --> 00:02:55.241
string like pipe in that directly instead
of going through the hole through.

43
00:02:55.241 --> 00:02:59.556
&gt;&gt; Why you couldn't pipe
tostring in directly?

44
00:02:59.556 --> 00:03:03.920
&gt;&gt; [COUGH] Yeah like you got your files,
and then you just like,

45
00:03:03.920 --> 00:03:09.153
do like a dot pipe kind of make us up,
I don't know but like to upper, and

46
00:03:09.153 --> 00:03:15.030
that like does that I don't know what
the through gets us that's the question.

47
00:03:15.030 --> 00:03:17.658
&gt;&gt; The through is gonna
turn this function into

48
00:03:17.658 --> 00:03:21.210
a stream into a transformed
stream in particular.

49
00:03:21.210 --> 00:03:23.400
&gt;&gt; Okay.
&gt;&gt; We could write it that way.

50
00:03:23.400 --> 00:03:28.170
Maybe you're thinking about this,
like if we had a two upper function, and

51
00:03:28.170 --> 00:03:32.600
we instantiate it, and
then we have a function to upper, and

52
00:03:32.600 --> 00:03:36.110
we could return through with that function

53
00:03:38.080 --> 00:03:41.010
that would be another way that we could
write it if that makes more sense.

54
00:03:42.250 --> 00:03:45.710
But through is going to take these
functions that we provide that can

55
00:03:45.710 --> 00:03:50.460
act on our data, and
it builds a stream out of those functions.

56
00:03:50.460 --> 00:03:52.660
But both of these are fine
ways to write it.

57
00:03:52.660 --> 00:03:56.010
It just kind of depends on what
your needs are in particular.

58
00:03:56.010 --> 00:03:59.340
&gt;&gt; Keep in mind it's working on
a chunk of data, not the whole file.

59
00:04:00.830 --> 00:04:01.400
&gt;&gt; Yeah.

60
00:04:01.400 --> 00:04:05.650
&gt;&gt; So these chunks also
can be arbitrarily sized.

61
00:04:05.650 --> 00:04:11.720
So you can't really have
in this case shouldn't have

62
00:04:11.720 --> 00:04:16.440
assumptions about the size of the data or
how that data is going to be broken up.

63
00:04:17.535 --> 00:04:21.710
Because, things, it could have new lines,
or maybe it doesn't or,

64
00:04:22.820 --> 00:04:27.150
things can be spaced, it could be a single
byte, or they could be kilobytes.

65
00:04:27.150 --> 00:04:32.018
That's not really that's more up to
the operating system in this case than

66
00:04:32.018 --> 00:04:33.496
it is to your program.

67
00:04:33.496 --> 00:04:36.789
There are ways of chunking data that
are streaming transforms which we'll

68
00:04:36.789 --> 00:04:37.840
get into some of those.

69
00:04:38.930 --> 00:04:44.340
But if you deal with input, then
the chunk sizes aren't really up to you.

70
00:04:44.340 --> 00:04:45.799
So you have to deal with them yourself.

71
00:04:48.826 --> 00:04:52.006
&gt;&gt; So anytime we want to modify
the stream we need to use through and

72
00:04:52.006 --> 00:04:54.420
then do whatever it is that we want to do?

73
00:04:54.420 --> 00:04:58.182
&gt;&gt; Yeah, you can use through or you can
use some of the other userland modules, or

74
00:04:58.182 --> 00:04:59.442
you can use core streams.

75
00:04:59.442 --> 00:05:03.760
I've got an example of using core
streams I like to use through it's

76
00:05:03.760 --> 00:05:08.682
kind of just what I have a habit of using
but the, so the stream requires stream

77
00:05:08.682 --> 00:05:13.160
transform method is actually a lot
more ergonomic than it used to be.

78
00:05:13.160 --> 00:05:15.190
So you could also use that if you like.

79
00:05:16.520 --> 00:05:19.680
Okay, so there's a question in the chat,

80
00:05:20.750 --> 00:05:25.610
is it suggested to use nodes built in
modules are usually in NPM packages.

81
00:05:25.610 --> 00:05:29.253
So I would say generally
that I think it's better to

82
00:05:29.253 --> 00:05:33.334
use the userland packages
because they're just nicer.

83
00:05:33.334 --> 00:05:35.136
There's kind of like less boilerplate.

84
00:05:35.136 --> 00:05:42.661
They're less particular and I tend myself
to use the user land stuff a lot more.

85
00:05:42.661 --> 00:05:47.770
And when I do use the core modules,
I actually don't tend to require a stream.

86
00:05:47.770 --> 00:05:51.840
I tend to require the readable stream
package from NPM because that way,

87
00:05:51.840 --> 00:05:57.020
you don't have this implicit
peer dependency on node core,

88
00:05:57.020 --> 00:05:59.610
because node core can change things and
they've done that and

89
00:05:59.610 --> 00:06:03.140
they've broken my packages, and
I didn't like that very much.

90
00:06:03.140 --> 00:06:07.430
But when you use a userland package like
readable stream, and all of these, well,

91
00:06:07.430 --> 00:06:09.930
most of these userland
packages like through2

92
00:06:09.930 --> 00:06:12.060
depend on the readable stream package.

93
00:06:12.060 --> 00:06:14.150
And behind the scenes,
they don't require a stream.

94
00:06:15.730 --> 00:06:20.610
Then you actually have explicit
versioning control so you don't have to

95
00:06:20.610 --> 00:06:25.570
worry about either like the next version
of node breaking your package and

96
00:06:25.570 --> 00:06:30.050
you don't have to worry about people
in different versions of node

97
00:06:30.050 --> 00:06:34.534
who have like different versions
of the stream interfacing core.

98
00:06:34.534 --> 00:06:39.567
This is kind of a general pattern that I
think works a lot better, especially over

99
00:06:39.567 --> 00:06:44.380
time is to use userland packages that
have semver because otherwise, like,

100
00:06:44.380 --> 00:06:49.810
who knows what version of stream you get
from node core, it's whatever is there.

101
00:06:49.810 --> 00:06:53.237
So, okay, so
if you people wanna try this out,

102
00:06:53.237 --> 00:06:56.937
you can change this program
in different ways too.

103
00:06:56.937 --> 00:07:02.115
You might make it lowercase or
you could replace all a's with at signs or

104
00:07:02.115 --> 00:07:04.410
something with that replace.

105
00:07:04.410 --> 00:07:07.923
But let's just run this program
to make sure that it works.

106
00:07:09.848 --> 00:07:18.460
Oops, right, so we have to give it
a program as input or a file as input.

107
00:07:18.460 --> 00:07:24.670
So if I run that program with our file,
indeed it converts it to uppercase.

108
00:07:28.690 --> 00:07:31.950
Another fun way that we might change our
programme is maybe instead of reading

109
00:07:31.950 --> 00:07:34.590
from a file,
we can read from standard input.

110
00:07:36.370 --> 00:07:40.580
So, if you read from standard input then

111
00:07:41.630 --> 00:07:44.800
the input of your programme doesn't
have to be a file it could actually be

112
00:07:44.800 --> 00:07:49.590
the output of another programme which
is sometimes a lot more useful.

113
00:07:49.590 --> 00:07:56.408
So we can just take this piece right
here and replace it with process.stdin.

114
00:07:56.408 --> 00:08:00.698
Now if we run the program now
it's gonna sit and wait for

115
00:08:00.698 --> 00:08:04.627
us to type stuff in on the keyboard so
I can type hi.

116
00:08:04.627 --> 00:08:09.838
Hello, Types in gibberish

117
00:08:09.838 --> 00:08:14.953
on the command line and
it indeed buffers everything up.

118
00:08:14.953 --> 00:08:19.183
Could also use,
could pipe the input of a file into it and

119
00:08:19.183 --> 00:08:24.498
now is allowed version of our program
we just typed, it's kinda fun.

