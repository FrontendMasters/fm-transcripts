WEBVTT

1
00:00:00.040 --> 00:00:02.070
Let's take a look at
another UserLAnd module.

2
00:00:02.070 --> 00:00:04.340
We saw this a bit earlier
in the networking section,

3
00:00:04.340 --> 00:00:05.690
it's called concat-stream.

4
00:00:05.690 --> 00:00:11.710
You can use concat-stream when you need
something that's just gonna go against

5
00:00:11.710 --> 00:00:17.658
many of the ideas of streams and just
concatenate something to fit into memory.

6
00:00:17.658 --> 00:00:22.306
But, you got to make compromises
pretty often when you're programming.

7
00:00:22.306 --> 00:00:26.787
So if we want something that will
just take all of the standard in,

8
00:00:26.787 --> 00:00:31.675
and once the standard in is closed,
it'll give us back just a big blob of

9
00:00:31.675 --> 00:00:35.290
memory like a buffer that
contains all of the data.

10
00:00:35.290 --> 00:00:37.790
We can use concat-stream like this.

11
00:00:37.790 --> 00:00:42.690
So I can show you what that looks like,
we could call it cat.js.

12
00:00:42.690 --> 00:00:45.416
You require a concat-stream.

13
00:00:45.416 --> 00:00:47.456
You might also do something,

14
00:00:47.456 --> 00:00:52.550
like you might transform the input
before you pipe it to concat-stream.

15
00:00:52.550 --> 00:00:55.490
But here I'm just going to
take process standard in,

16
00:00:55.490 --> 00:00:58.586
pipe that to the concat-stream module.

17
00:00:58.586 --> 00:01:05.350
concat-stream can take some different
options, but it always takes a function.

18
00:01:05.350 --> 00:01:08.260
And the function is where you can
handle what the input is going to be.

19
00:01:09.270 --> 00:01:14.180
So I can print out the body.length,
and this should work

20
00:01:14.180 --> 00:01:18.910
similar to the wc-c command that counts
the number of bytes from standard in.

21
00:01:18.910 --> 00:01:23.480
Although this is a very memory
intensive version of that

22
00:01:23.480 --> 00:01:27.130
program because the WC program will
actually not buffer everything up.

23
00:01:27.130 --> 00:01:29.535
It'll just count it as it
comes across the wire.

24
00:01:29.535 --> 00:01:32.660
So we'll build an example that's
more memory efficient in a moment.

25
00:01:32.660 --> 00:01:36.660
But for now,
here's just a simple way of doing that.

26
00:01:36.660 --> 00:01:42.180
So, if I write some data to
standard in and then I press CTRL+D

27
00:01:42.180 --> 00:01:47.607
to standard out, then I get
a count of how much data was sent.

28
00:01:47.607 --> 00:01:51.166
So 20 bytes in this case.

29
00:01:51.166 --> 00:01:55.010
&gt;&gt; So CTRL+D and standard in?

30
00:01:55.010 --> 00:01:55.527
&gt;&gt; Yeah,

31
00:01:55.527 --> 00:02:01.570
CTRL+ D from standard in is how you tell
the program that you're finished typing.

32
00:02:04.360 --> 00:02:09.170
Whereas Ctrl+C is like just stop
the program, kill the program.

33
00:02:09.170 --> 00:02:15.409
Stop has another meaning like SIG stop,
but yeah.

34
00:02:15.409 --> 00:02:19.663
Okay, so a more practical use of when
you might want to use something like

35
00:02:19.663 --> 00:02:23.986
concat-stream is, again, if you have
an HTTP server where you need to,

36
00:02:23.986 --> 00:02:28.243
parse some format that's, maybe you
don't have a streaming parser for

37
00:02:28.243 --> 00:02:31.868
it, you just have a parser that
works on big blocks of memory,

38
00:02:31.868 --> 00:02:34.350
like you need to parse your encoded data.

39
00:02:37.100 --> 00:02:40.800
So why don't we, we did this already
in the streaming section, but

40
00:02:40.800 --> 00:02:44.660
I can type it out again, or in the network
section, but I can type that out again, so

41
00:02:44.660 --> 00:02:49.240
we can, little HTTP server.

42
00:02:49.240 --> 00:02:54.710
Maybe this time we'll do it properly and
we'll only let a certain

43
00:02:54.710 --> 00:02:57.740
number of bytes go through and we can
use the through to module to do that.

44
00:02:57.740 --> 00:03:00.123
So I think this would be a good example.

45
00:03:00.123 --> 00:03:05.452
So we'll listen on the port,
now instead of process standard in,

46
00:03:05.452 --> 00:03:08.770
we can use request.pipe to our concat.

47
00:03:08.770 --> 00:03:11.380
So when you have an HTTP server,

48
00:03:11.380 --> 00:03:16.100
the request object that you
get is a readable stream.

49
00:03:16.100 --> 00:03:18.710
And I'll go more into the difference
between readable and writable and

50
00:03:18.710 --> 00:03:20.350
duplex and transform streams in a moment.

51
00:03:20.350 --> 00:03:24.870
But for now, so we have a readable
stream and a writable stream.

52
00:03:24.870 --> 00:03:29.670
We can pipe the readable stream
into this concat-stream module.

53
00:03:29.670 --> 00:03:35.230
And maybe we'll just
parse the form upload.

54
00:03:37.050 --> 00:03:40.535
So we can use the christian
module qs.parse(body).

55
00:03:41.878 --> 00:03:47.050
And, it just so happens that you
can pass an encoding of string,

56
00:03:47.050 --> 00:03:52.000
in this case, which saves us having to
call to string on the body ourselves.

57
00:03:55.230 --> 00:04:00.395
And then we'll just console log the parsed

58
00:04:00.395 --> 00:04:04.277
parameters and call res.end.

59
00:04:04.277 --> 00:04:09.653
So this will work but someone could
send us a 50 gigabyte input and

60
00:04:09.653 --> 00:04:14.747
then our server would crash because
it would run out of memory.

61
00:04:14.747 --> 00:04:16.470
So we'll fix that in just a moment.

62
00:04:16.470 --> 00:04:18.828
But for now,
I just want to make sure that it works.

63
00:04:29.573 --> 00:04:30.247
Yeah.

64
00:04:30.247 --> 00:04:33.706
So the server works using concat-stream.

65
00:04:33.706 --> 00:04:41.824
Now let's add our through stream to make
sure that we're not getting too much data.

66
00:04:41.824 --> 00:04:45.339
So let's set a real hard limit
of 20 bytes, we're gonna

67
00:04:45.339 --> 00:04:50.242
be really aggressive about making sure
that people don't send us too much data.

68
00:04:50.242 --> 00:04:54.401
So what that might look like is, I'm just
gonna move stuff around a little bit so

69
00:04:54.401 --> 00:04:56.962
it's easier to deal with,
so call that onbody.

70
00:04:59.865 --> 00:05:04.731
This is another useful thing to do if
you find yourself in some callback

71
00:05:04.731 --> 00:05:08.942
soup it's just to start naming
your functions a little bit.

72
00:05:08.942 --> 00:05:11.680
And then it can be easier to work with.

73
00:05:11.680 --> 00:05:14.520
So now we need to put a new
piece into our pipeline.

74
00:05:14.520 --> 00:05:16.848
So we're going to use through
which you got to require.

75
00:05:21.320 --> 00:05:26.072
And we're gonna have a counter function
that's just gonna count the number of

76
00:05:26.072 --> 00:05:28.088
bytes that have been sent so far.

77
00:05:28.088 --> 00:05:33.708
So call that function counter.

78
00:05:36.214 --> 00:05:37.230
We write it like that, I guess.

79
00:05:39.960 --> 00:05:41.896
Now we need to save some state outside.

80
00:05:41.896 --> 00:05:45.950
So, actually, it might be better to
do that inside of the functions.

81
00:05:45.950 --> 00:05:49.630
So we'll have the counter function take
care of creating the through stream.

82
00:05:51.350 --> 00:05:53.320
We have our buffer, encoding and next.

83
00:05:54.610 --> 00:05:56.860
And we also need to save
our piece of state,

84
00:05:56.860 --> 00:06:00.100
that's the number of bytes
that we've seen so far.

85
00:06:00.100 --> 00:06:05.090
So every time we get a buffer, we need to
increase the size by the buffer length.

86
00:06:07.140 --> 00:06:12.968
And if the size is greater than 20,

87
00:06:12.968 --> 00:06:19.926
we need to just end
the stream prematurely.

88
00:06:19.926 --> 00:06:23.940
We can do that by not calling next, but
then we need to terminate the stream.

89
00:06:25.030 --> 00:06:28.640
But in this case,
I'm just gonna call next with null,

90
00:06:28.640 --> 00:06:31.380
which will just end the stream input.

91
00:06:31.380 --> 00:06:36.812
So the body function will
actually see a truncated input.

92
00:06:36.812 --> 00:06:41.200
We're not dealing with sending
a different response, but we could.

93
00:06:41.200 --> 00:06:48.100
Otherwise we're just gonna call
next with the buffer, okay?

94
00:06:48.100 --> 00:06:53.980
So, if I run this program now,
then it should truncate the input.

95
00:06:53.980 --> 00:06:59.620
So, it works properly with the previous
input but now if I provide too much data,

96
00:06:59.620 --> 00:07:03.110
like if I hold down the O key that
should be more than 20 bytes.

97
00:07:03.110 --> 00:07:07.853
It says okay, but
you'll notice that now it's actually not

98
00:07:07.853 --> 00:07:12.513
parsing the input because
the inputs have been truncated.

99
00:07:12.513 --> 00:07:15.788
So, there we go.

100
00:07:15.788 --> 00:07:20.650
I'll add that to the get repo and,
and we'll give everyone a little

101
00:07:20.650 --> 00:07:25.670
bit of time to play around with this
example and see what's going on.

102
00:07:25.670 --> 00:07:28.480
And then we'll talk more about
the different kinds of stream types.

