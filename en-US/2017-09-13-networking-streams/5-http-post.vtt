WEBVTT

1
00:00:00.440 --> 00:00:04.160
If we want to send a post request
instead of a get request,

2
00:00:04.160 --> 00:00:06.400
we can send a message looks like this.

3
00:00:06.400 --> 00:00:10.050
So instead of the get HTTP verb,
we use the post verb.

4
00:00:11.310 --> 00:00:14.480
And so
I think that you have to remember is that

5
00:00:14.480 --> 00:00:18.300
I guess some servers really don't like it
if you don't specify the content type.

6
00:00:18.300 --> 00:00:24.230
So this is the content type, which is
pretty nasty and hard to remember,

7
00:00:24.230 --> 00:00:28.940
but it means that the server is going to
interpret this kind of string correctly.

8
00:00:28.940 --> 00:00:36.270
So the post says, just like the get
example, that the host is localhost.

9
00:00:36.270 --> 00:00:41.390
Content length is 51 bytes which refers
to the length of this string right here.

10
00:00:41.390 --> 00:00:44.530
And that it's this kind
of formatted string.

11
00:00:46.050 --> 00:00:52.202
So here I have a little server written
in Node.js that uses the body module

12
00:00:52.202 --> 00:00:56.257
from npm to do,

13
00:00:56.257 --> 00:01:01.470
to parse the form data, and it's also
going to print out the request method,

14
00:01:01.470 --> 00:01:06.880
the request URL and the headers,
which is misspelled, so that won't work.

15
00:01:08.400 --> 00:01:13.695
But anyways, we should see something
like this in addition to the examples so

16
00:01:13.695 --> 00:01:15.650
if we go ahead and do that, so

17
00:01:15.650 --> 00:01:19.975
here I can run the server I'm
gonna fix that typo really quick.

18
00:01:21.912 --> 00:01:23.640
So here we can run the server.

19
00:01:23.640 --> 00:01:27.490
And I have the post right
here in a text file.

20
00:01:27.490 --> 00:01:31.940
So that's the same from the slides,
and I can send it to netcat.

21
00:01:31.940 --> 00:01:34.130
So I'm going to do netcat localhost.

22
00:01:34.130 --> 00:01:36.510
Send that post file.

23
00:01:36.510 --> 00:01:42.340
And here we go, we can see that the server
got a post request to slash form and

24
00:01:42.340 --> 00:01:44.380
here are the headers that it saw.

25
00:01:44.380 --> 00:01:46.890
And then it parsed the,

26
00:01:46.890 --> 00:01:51.490
the body that we sent in our
request to generate this object.

27
00:01:51.490 --> 00:01:53.700
So you can do all kinda
things with that information.

28
00:01:53.700 --> 00:01:57.193
You can take off pieces of that object and

29
00:01:57.193 --> 00:02:02.658
like interpret usernames and
sessions and whatever you like.

30
00:02:05.475 --> 00:02:08.060
Okay, I'm gonna put
that in the git report.

31
00:02:08.060 --> 00:02:17.690
So that So that people can play around.

32
00:02:22.057 --> 00:02:27.040
Okay, and then another important thing
to know is that we should get back

33
00:02:27.040 --> 00:02:30.430
something from the server
that looks like this.

34
00:02:30.430 --> 00:02:35.330
So from netcat,
we got back these headers from

35
00:02:35.330 --> 00:02:40.280
the HTTP server status code of 200,
which means this request is good.

36
00:02:40.280 --> 00:02:44.714
And I have the server says and
I have something for that document.

37
00:02:44.714 --> 00:02:50.131
The important thing to note is
that this header transfer encoding

38
00:02:50.131 --> 00:02:55.155
chunked is kinda an alternative
to the content link header,

39
00:02:55.155 --> 00:03:01.810
it means that the server is gonna send
back these links for each of these chunks.

40
00:03:01.810 --> 00:03:07.270
So just like just like a packets
are kinda chopped up into little pieces.

41
00:03:07.270 --> 00:03:11.350
This way the server doesn't have to
know how much data it's going to send.

42
00:03:11.350 --> 00:03:16.220
So if it has something that
might take a variable amount of

43
00:03:17.440 --> 00:03:20.410
information that it doesn't quite know,

44
00:03:20.410 --> 00:03:26.070
in advance how long the response that it's
gonna send then it can use this method.

45
00:03:26.070 --> 00:03:31.080
So these are encoded I think in hex and
little data payloads.

46
00:03:31.080 --> 00:03:35.793
And then if there is more data, it would
have a new number on its own line.

47
00:03:35.793 --> 00:03:39.838
But when it's when
the request is finished,

48
00:03:39.838 --> 00:03:44.210
it prints out a zero which
is kind of like the end.

49
00:03:44.210 --> 00:03:45.103
No more data.

