WEBVTT

1
00:00:00.643 --> 00:00:06.216
There's another really great module for
taking streams that are duplex,

2
00:00:06.216 --> 00:00:11.965
for example, RPC stream and packing
many of them, maybe some bulk streams,

3
00:00:11.965 --> 00:00:16.671
maybe streams that do all kinds
of things into a single stream.

4
00:00:16.671 --> 00:00:21.016
Because for example, in browsers you
only can establish so many outgoing

5
00:00:21.016 --> 00:00:26.360
connections, maybe they're WebRTC sockets,
maybe they're WebSocket connections.

6
00:00:26.360 --> 00:00:30.734
But you don't necessarily want to have
to open up a new WebSocket connection to

7
00:00:30.734 --> 00:00:32.866
deal with a new streaming interface.

8
00:00:32.866 --> 00:00:38.825
So this package multiplex lets you pack
multiple streams into the same one.

9
00:00:38.825 --> 00:00:43.792
So here's what that can look like, so
this is a pretty complicated example but

10
00:00:43.792 --> 00:00:47.799
these ideas tend to be somewhat
more complicated in practice.

11
00:00:47.799 --> 00:00:53.524
So in this example,
we're starting up a new multiplex

12
00:00:53.524 --> 00:01:00.501
system on it's just a TCP server
like before with a duplex stream.

13
00:01:00.501 --> 00:01:06.623
So we create plex which is also a duplex
stream because we see this pattern here

14
00:01:06.623 --> 00:01:11.725
is stream.pipe(plex).pipe(stream),
very familiar.

15
00:01:11.725 --> 00:01:15.670
Then we can create a client just like
before, like RPC stream in this case.

16
00:01:15.670 --> 00:01:20.547
But the RPC stream function is also
creating more streams inside of it.

17
00:01:20.547 --> 00:01:24.645
So this is just getting back cuz I love
that satellite example we talked about way

18
00:01:24.645 --> 00:01:25.632
in the beginning.

19
00:01:25.632 --> 00:01:30.460
Where you kind of have your FTP style port
where you've got your control signal,

20
00:01:30.460 --> 00:01:35.075
and then you've got like your high
bandwidth other signals that are opened up

21
00:01:35.075 --> 00:01:36.850
this is sort of the same idea.

22
00:01:36.850 --> 00:01:41.746
Where RPC signal is we're talking
text to the satellite over some

23
00:01:41.746 --> 00:01:44.693
low frequency that's more reliable.

24
00:01:44.693 --> 00:01:49.193
Then we have our higher frequency
band that we're gonna use

25
00:01:49.193 --> 00:01:52.705
to just pull down dumps
of like cloud imagery.

26
00:01:52.705 --> 00:01:55.542
I don't know whatever satellites do.

27
00:01:55.542 --> 00:02:02.060
So here in our read function we
taken the name as an argument.

28
00:02:02.060 --> 00:02:06.884
If the name has some screwy characters
in it we're just gonna say nope not

29
00:02:06.884 --> 00:02:09.110
gonna do that and bail out early.

30
00:02:09.110 --> 00:02:14.513
Otherwise, we can create a ReadStream
from files in a files directory and

31
00:02:14.513 --> 00:02:18.693
if that file doesn't exist
then an error will happen, so

32
00:02:18.693 --> 00:02:22.895
that'll just call the callback
with an error response.

33
00:02:22.895 --> 00:02:26.665
Otherwise, we have yet
another duplex stream.

34
00:02:26.665 --> 00:02:30.810
Notice a.pipe.b.pipe.a
again where we take the, or

35
00:02:30.810 --> 00:02:36.786
sorry that's a ReadStream, so I don't
even know how that would not blow up but.

36
00:02:36.786 --> 00:02:37.332
Wait, I see.

37
00:02:37.332 --> 00:02:38.700
Yeah, okay, whatever.

38
00:02:38.700 --> 00:02:43.862
So we can call plex.createReadStream or
.createStream

39
00:02:43.862 --> 00:02:49.560
which sets up a different channel
on the same multiplex system.

40
00:02:49.560 --> 00:02:51.458
So we've got our RPC channel, and

41
00:02:51.458 --> 00:02:55.596
then we've got however many other
channels that are sort of for bulk data.

42
00:02:55.596 --> 00:03:00.156
So we don't have to sort of squish that
kind of stuff through an RPC system which

43
00:03:00.156 --> 00:03:03.417
was inefficient,
it doesn't really make much sense.

44
00:03:03.417 --> 00:03:08.391
Multiplex uses protobufs behind
the scenes, so it's got a lot better

45
00:03:08.391 --> 00:03:13.127
framing protocol then we would
probably come up with very easily.

46
00:03:13.127 --> 00:03:17.841
So and then at the end,
just call back null no error, it's fine.

47
00:03:20.099 --> 00:03:26.468
We still hook up the RPC stream to
the duplex connection and that's it.

48
00:03:26.468 --> 00:03:29.456
It's a very complicated example, but
hopefully it'll shed some light.

49
00:03:29.456 --> 00:03:32.120
The client is a little
bit easier to understand.

50
00:03:33.869 --> 00:03:40.573
So what the client does in this case is it
pulls down, so it sets up a connection,

51
00:03:40.573 --> 00:03:45.694
duplex connection with TCP
socket listening to the server.

52
00:03:45.694 --> 00:03:50.612
And then every time there's a stream
that is created with createStream on

53
00:03:50.612 --> 00:03:53.482
the other end this function is gonna fire.

54
00:03:53.482 --> 00:03:58.457
If it's a stream that starts with
file then we can print out a message

55
00:03:58.457 --> 00:04:03.621
that we received it, and we can just
dump the results to standard out.

56
00:04:03.621 --> 00:04:08.104
We could also dump it to other kinds
of writable streams like for example,

57
00:04:08.104 --> 00:04:12.168
like fs.createWriteStream or
create G zip or whatever you like.

58
00:04:13.834 --> 00:04:18.321
Then finally, we wire up the multiplex
to the RPC connection as well on

59
00:04:18.321 --> 00:04:20.908
the SharedStream which our server has,

60
00:04:20.908 --> 00:04:25.873
so you notice that these lines are the
same between our server and our client.

61
00:04:25.873 --> 00:04:28.954
And then finally,
we can call some of these remote methods.

62
00:04:28.954 --> 00:04:34.161
So we can call remote.read with a command
line argument that's gonna be the name

63
00:04:34.161 --> 00:04:39.000
of the file that we wanna read out of
the files directory, so that was a lot.

64
00:04:39.000 --> 00:04:43.954
I can step through it again if people
are still wanna do it, but I wanna run

65
00:04:43.954 --> 00:04:49.006
through actually running it first and
I can show you how it works that way.

66
00:04:49.006 --> 00:04:50.665
Okay, so I'll make a directory plex.

67
00:04:50.665 --> 00:04:55.266
Gonna Copy &gt; Paste these examples
cuz these are real tricky to get

68
00:04:55.266 --> 00:04:58.035
working the first time let me tell you.

69
00:04:59.925 --> 00:05:00.837
Can't live code everything.

70
00:05:00.837 --> 00:05:05.411
[LAUGH] And then our client, here we go.

71
00:05:08.279 --> 00:05:16.509
So I'm gonna run the server so
that opens up, TCP connection on 5000.

72
00:05:16.509 --> 00:05:19.883
I need to make a files directory
because that's where our client is

73
00:05:19.883 --> 00:05:20.795
gonna read from.

74
00:05:20.795 --> 00:05:25.808
And I can go ahead and
make some files like hello in there.

75
00:05:28.466 --> 00:05:30.275
And I'll make a second file too.

76
00:05:34.991 --> 00:05:38.009
Some of these dog sounds.

77
00:05:40.325 --> 00:05:44.519
They sorta say like rawr, rawr, as well,
so I'm gonna put that in there.

78
00:05:44.519 --> 00:05:49.156
Okay, so we have two files in our files
directory and now I can run the client

79
00:05:49.156 --> 00:05:54.324
which remember is gonna take an argument
from standard in or from the command line.

80
00:05:54.324 --> 00:06:01.311
So it's gonna, Open up hello.

81
00:06:01.311 --> 00:06:03.608
RECEIVED FILE hello with
the contents from the server.

82
00:06:03.608 --> 00:06:07.984
I can also do dog.sounds.

83
00:06:07.984 --> 00:06:09.980
RECEIVED FILE dog.sounds.

84
00:06:09.980 --> 00:06:11.553
Dogs sound.

85
00:06:11.553 --> 00:06:14.337
Right, so that file didn't exist so
it didn't do anything,

86
00:06:14.337 --> 00:06:16.271
but we've now received both of our files.

87
00:06:16.271 --> 00:06:20.645
So this is sort of like,
kind of like an ad hoc implementation of

88
00:06:20.645 --> 00:06:25.612
something like HTTP but pipelines so
it's all in the same connection.

89
00:06:25.612 --> 00:06:30.041
And not that much code, I mean,
you could step through it in two slides.

90
00:06:30.041 --> 00:06:34.198
Although, it's nontrivial just the same.

91
00:06:34.198 --> 00:06:39.034
Just to go over what's in those again.

92
00:06:40.716 --> 00:06:44.518
So we have our TCP server.

93
00:06:44.518 --> 00:06:49.276
We've got our multiplex connection
which is a duplex stream.

94
00:06:49.276 --> 00:06:55.305
We pipe our TCP connection into
our duplex multiplex stream and

95
00:06:55.305 --> 00:06:59.514
this sort of like just
gloms them together so

96
00:06:59.514 --> 00:07:06.700
that the multiplex can communicate on
the TCP connection when it comes in.

97
00:07:06.700 --> 00:07:11.519
We then establish an RPC connection
on one of the channels that multiplex

98
00:07:11.519 --> 00:07:15.551
provides which is wired up
right here it's called 'rpc'.

99
00:07:15.551 --> 00:07:18.020
We can name them if we like.

100
00:07:18.020 --> 00:07:23.254
Then when the client calls our
read: function we can load a file

101
00:07:23.254 --> 00:07:28.406
from the files directory and
pipe it into, should actually,

102
00:07:30.574 --> 00:07:33.714
Be like that.

103
00:07:33.714 --> 00:07:37.788
And we can pipe those file
contents into a shared stream.

104
00:07:37.788 --> 00:07:40.181
Meanwhile, on the client side of things,

105
00:07:40.181 --> 00:07:43.445
the client does the same thing
setting up the connection.

106
00:07:43.445 --> 00:07:48.781
And when the client calls that
function defined on the server

107
00:07:48.781 --> 00:07:54.115
with the name that we give it
on (process.argv) then it's

108
00:07:54.115 --> 00:07:59.990
gonna kick off this function that
fires with the stream and the id.

109
00:07:59.990 --> 00:08:03.810
And we can pipe the stream to
standard out or wherever we like, and

110
00:08:03.810 --> 00:08:07.573
we can print out what the id is for
the file that we've received.

111
00:08:07.573 --> 00:08:13.675
So that again is how you can wire up
something that's pretty powerful,

112
00:08:13.675 --> 00:08:17.946
pretty sophisticated with
a couple of modules and

113
00:08:17.946 --> 00:08:22.337
some very interesting
ideas like duplex streams.

114
00:08:22.337 --> 00:08:25.270
So that is all I have for this workshop.

115
00:08:25.270 --> 00:08:30.071
So if anyone has any questions both on
the chat or in person you can ask them but

116
00:08:30.071 --> 00:08:32.183
otherwise, that's all I have.

