WEBVTT

1
00:00:00.280 --> 00:00:01.400
Okay.
So next stop,

2
00:00:01.400 --> 00:00:03.630
we can do with another
fan user online package.

3
00:00:03.630 --> 00:00:08.295
This one is gonna, be useful for the next
two examples, so its called rpc-stream.

4
00:00:09.400 --> 00:00:13.889
The rpc-stream, Read me,
is really worth reading for

5
00:00:13.889 --> 00:00:18.483
some sort of like some ideology about
how you should try to make your your

6
00:00:18.483 --> 00:00:23.233
interfaces as general as possible so
that you get the flexibility of, for

7
00:00:23.233 --> 00:00:26.090
example, what we did with the VPN example.

8
00:00:27.210 --> 00:00:30.150
If that network connection had baked
in its own crypto, we couldn't

9
00:00:30.150 --> 00:00:34.290
have done any of that, or if it had been
hardwired to a particular interface.

10
00:00:35.510 --> 00:00:39.220
I recommend you give that a read,
I can just give you an example.

11
00:00:39.220 --> 00:00:44.154
It's like a nice rant about how you
can build little pipelines like that,

12
00:00:44.154 --> 00:00:45.120
it's great.

13
00:00:46.435 --> 00:00:51.320
rpc-stream lets you call
methods on a remote service.

14
00:00:51.320 --> 00:00:55.460
So it's rpc remote procedure call,
and you can pack it into a stream.

15
00:00:55.460 --> 00:00:58.280
So, this isn't always the best idea, but

16
00:00:58.280 --> 00:01:01.190
sometimes it's convenient
enough way to do things,

17
00:01:02.820 --> 00:01:08.440
it works based on defining methods.

18
00:01:08.440 --> 00:01:11.940
And the methods have callbacks, and
then you need to call the callback to

19
00:01:11.940 --> 00:01:14.370
inform the remote end
that everything is okay.

20
00:01:15.660 --> 00:01:17.620
And this all works in a stream, so

21
00:01:17.620 --> 00:01:21.680
here I've got a server that's set
up with a duplex stream connection.

22
00:01:21.680 --> 00:01:27.289
If we run this, anytime a client connects
that can speak the rpc-stream protocol,

23
00:01:27.289 --> 00:01:30.686
they can call a method called
hello with a name, and

24
00:01:30.686 --> 00:01:35.190
then the server responds back
prepending a string to the response.

25
00:01:35.190 --> 00:01:37.700
So how do you in this case with
the name that they provide?

26
00:01:39.180 --> 00:01:41.940
Here's a client for that, so,
I'm just gonna go ahead and

27
00:01:41.940 --> 00:01:45.980
copy paste these because they're
kind of hard to write freehand.

28
00:01:45.980 --> 00:01:46.808
I usually mess them up.

29
00:01:46.808 --> 00:01:53.993
So make a directory rpc, [SOUND] and
write that out to server.js,

30
00:01:53.993 --> 00:01:58.707
and then write this one out to client.js,

31
00:02:03.477 --> 00:02:06.004
So if we go ahead and look at the server,

32
00:02:06.004 --> 00:02:09.230
could just step through
what's happening here.

33
00:02:11.920 --> 00:02:18.140
So we've got our TCP server, stream is
a duplex stream, inside of that function.

34
00:02:18.140 --> 00:02:23.930
And then we pipe stream into rpc,
which also returns a duplex stream.

35
00:02:23.930 --> 00:02:28.110
So yet again, we have a.pipe.b.pipe a.

36
00:02:28.110 --> 00:02:31.080
So it's common pattern
with this kind of stuff.

37
00:02:31.080 --> 00:02:35.450
Then we've got the rpc internals,
like defining some methods.

38
00:02:35.450 --> 00:02:36.720
And that's it.

39
00:02:36.720 --> 00:02:37.600
We're listening on a port.

40
00:02:40.330 --> 00:02:44.410
The client, meanwhile,
does a similar kind of thing.

41
00:02:45.834 --> 00:02:48.350
a.pipe b.pipe a again, by the way,

42
00:02:50.310 --> 00:02:54.340
except this is the client
side of a TCP connection.

43
00:02:54.340 --> 00:02:57.300
So we're doing client that pipe, whatever.

44
00:02:57.300 --> 00:03:02.130
And then, we need to list out
the methods that the remote has,

45
00:03:02.130 --> 00:03:03.800
and we can then call those methods.

46
00:03:03.800 --> 00:03:09.932
So here I'm using process.env.USER, which
is just like the USER, in your system.

47
00:03:09.932 --> 00:03:17.790
&gt;&gt; Read me, and print out the results,
and then we close the connection.

48
00:03:17.790 --> 00:03:23.630
So, now if I run the server, and
I run the client, I get howdy substack.

49
00:03:23.630 --> 00:03:25.396
That's exactly what I would expect.

50
00:03:25.396 --> 00:03:33.480
So, rpc-streams are like sometimes useful,

51
00:03:33.480 --> 00:03:36.680
sometimes you just have something that
sort of just some methods that you wanna

52
00:03:36.680 --> 00:03:40.718
expose, and you don't wanna make
your own hardwired wire protocol.

53
00:03:40.718 --> 00:03:44.220
You don't wanna have to like sit down and
come up with like a JSON,

54
00:03:44.220 --> 00:03:49.580
like new line delimited schema for doing
this stuff, and like having the sequence

55
00:03:49.580 --> 00:03:52.860
numbers on every method, so that things
get routed to the correct place.

56
00:03:52.860 --> 00:03:55.930
So these kinds of tools are sometimes
handy for this sort of thing.

