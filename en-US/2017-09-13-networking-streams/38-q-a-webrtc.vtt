WEBVTT

1
00:00:00.581 --> 00:00:02.850
Yeah I can do it,
&gt;&gt; It was [CROSSTALK] the end.

2
00:00:02.850 --> 00:00:05.710
&gt;&gt; That's right.
&gt;&gt; So what what else you got obviously?

3
00:00:05.710 --> 00:00:09.450
&gt;&gt; Well,
I could do something with simple-peer,

4
00:00:09.450 --> 00:00:11.160
I've to install it really quick.

5
00:00:11.160 --> 00:00:14.020
&gt;&gt; Yeah I think we should see
some peer to peer, it's okay.

6
00:00:16.160 --> 00:00:17.200
&gt;&gt; Let's go ahead and do that.

7
00:00:17.200 --> 00:00:21.916
So I'm gonna use this module by
Feros called simple-peer which

8
00:00:21.916 --> 00:00:26.160
is WebRTC peer to peer
streams in the browser.

9
00:00:26.160 --> 00:00:29.950
You do need a bunch of
other pieces though,

10
00:00:29.950 --> 00:00:35.019
we're gonna need a signalhub,
and I forgot to ask that.

11
00:00:38.893 --> 00:00:44.316
Yeah, it's been a while since
I've done one of these demos off

12
00:00:44.316 --> 00:00:49.446
the top of my head, so
I think I'm gonna have to look at the,

13
00:00:55.960 --> 00:00:58.815
Some claps in the chat, very good.

14
00:00:58.815 --> 00:01:03.640
[LAUGH] Okay, so with simple-peer.

15
00:01:07.810 --> 00:01:09.590
No, this is not the one
that I actually use.

16
00:01:09.590 --> 00:01:14.130
I use a module that's on top of
simple-peer that hooks into signal hub.

17
00:01:14.130 --> 00:01:16.750
I think it's called WebRTC stream.

18
00:01:16.750 --> 00:01:17.440
That's the one.

19
00:01:18.880 --> 00:01:20.860
Yeah, webrtc-stream.

20
00:01:22.172 --> 00:01:25.280
Swarm, webrtc-swarm,
that's the one that we can use.

21
00:01:26.320 --> 00:01:28.240
Yeah, this is the one that
you hook up to signal hubs.

22
00:01:28.240 --> 00:01:30.050
You don't have to write
your own initializer.

23
00:01:37.994 --> 00:01:39.089
Okay, so.

24
00:01:42.065 --> 00:01:46.504
It's more or less like the hello world for
webrtc-swarm so nothing too sophisticated

25
00:01:46.504 --> 00:01:49.602
you can just read the example of
the readme of this package and

26
00:01:49.602 --> 00:01:50.820
do the same yourself.

27
00:01:50.820 --> 00:01:55.365
But pretty much, if you set up

28
00:01:55.365 --> 00:02:00.050
webrtc-swarm, you can talk to a signal
hub, which is a special kind of server.

29
00:02:00.050 --> 00:02:02.570
I hope that mafintosh is
still running a signal hub.

30
00:02:02.570 --> 00:02:06.090
Otherwise if they're running locally,
it's sorry.

31
00:02:06.090 --> 00:02:11.410
hub.mafintosh.com, yes, great.

32
00:02:11.410 --> 00:02:12.739
It's still running fantastic.

33
00:02:15.120 --> 00:02:20.030
So, what we can do now is build
their own little program.

34
00:02:20.030 --> 00:02:24.598
So, call it swarm.js.

35
00:02:24.598 --> 00:02:28.080
This is gonna be browser code that
we're gonna run in the browser,

36
00:02:28.080 --> 00:02:30.600
because it's easiest way to get WebRTC.

37
00:02:30.600 --> 00:02:34.841
That's not true actually, electrons
bond is kind of easy and people do that,

38
00:02:34.841 --> 00:02:39.744
all right, So we've got to require

39
00:02:39.744 --> 00:02:45.270
WebRTC swarm, Requires signal hub.

40
00:02:49.240 --> 00:02:53.754
Signal hub is the only piece of
infrastructure that sort of like

41
00:02:53.754 --> 00:02:57.450
a server because the peers
have sort of a lobby.

42
00:02:57.450 --> 00:03:02.380
Where they're gonna exchange router

43
00:03:02.380 --> 00:03:08.140
hole punching information to go through
nets, network address table, anyways.

44
00:03:08.140 --> 00:03:11.090
&gt;&gt; That's like a requisite
of WebRTC itself.

45
00:03:11.090 --> 00:03:15.350
&gt;&gt; Yeah, yeah, it's something that's
required, it's a server, but whatever.

46
00:03:15.350 --> 00:03:16.010
It's in the browser.

47
00:03:16.010 --> 00:03:16.620
That's pretty cool.

48
00:03:16.620 --> 00:03:19.630
&gt;&gt; So it's just used in initialization.

49
00:03:19.630 --> 00:03:21.750
&gt;&gt; Yeah, and
it's only during the initial phases.

50
00:03:21.750 --> 00:03:24.960
So it's not like the server is
gonna see any of the content and

51
00:03:24.960 --> 00:03:29.380
it's not like the server is gonna
be mediating the connections.

52
00:03:29.380 --> 00:03:30.720
&gt;&gt; Just gonna intiate connections.

53
00:03:30.720 --> 00:03:32.519
&gt;&gt; Yeah, initiating the connection only.

54
00:03:33.620 --> 00:03:37.090
&gt;&gt; Okay, so we need to come up
with a name for our signalhub.

55
00:03:37.090 --> 00:03:41.555
I'll call it streams-day, I don't know.

56
00:03:41.555 --> 00:03:45.640
[LAUGH] Then we need to
provide a list of signalhub.

57
00:03:45.640 --> 00:03:48.080
So you could actually provide
more than one signalhub and

58
00:03:48.080 --> 00:03:50.790
this package is smart enough
to kind of round robin them or

59
00:03:50.790 --> 00:03:52.369
I don't know what it
does exactly internally.

60
00:03:53.500 --> 00:03:58.560
But I'm gonna use the one that
mafintosh runs who wrote signal hub.

61
00:03:58.560 --> 00:04:00.220
He works on the debt project.

62
00:04:00.220 --> 00:04:01.580
I use a lot of this modules.

63
00:04:01.580 --> 00:04:03.280
You've seen a lot of his modules today.

64
00:04:03.280 --> 00:04:05.977
In fact, like duplexerfy for example,

65
00:04:10.004 --> 00:04:13.740
Anyways, so the next thing we
need to do is set up our swarm.

66
00:04:15.320 --> 00:04:18.150
So we do that with the hub and then

67
00:04:19.610 --> 00:04:24.110
we also need to if we're not in the
browser provider WebRTC implementation.

68
00:04:24.110 --> 00:04:26.960
But we are gonna be in the browser or
electron or

69
00:04:26.960 --> 00:04:29.470
something, I'm not quite sure yet.

70
00:04:29.470 --> 00:04:31.860
So now we can listen for peer events

71
00:04:33.720 --> 00:04:39.210
in the peer that we get
back as a duplex stream.

72
00:04:39.210 --> 00:04:43.617
So we can do everything that we've already
learned in the browser over WebRTC.

73
00:04:43.617 --> 00:04:47.339
In with this peer object.

74
00:04:47.339 --> 00:04:50.019
The thing about peer to peer though,

75
00:04:50.019 --> 00:04:55.209
is that you've actually got to have
symmetric protocols and symmetric

76
00:04:55.209 --> 00:05:00.670
connections because which side is
the server and which side is the client.

77
00:05:00.670 --> 00:05:02.255
Which side is gonna initiate the data,

78
00:05:02.255 --> 00:05:06.140
and it's a little bit hard to
complicated to think through.

79
00:05:07.210 --> 00:05:10.780
But, if you,
have done this mental, exercise,

80
00:05:10.780 --> 00:05:15.170
then, you can build something that works,
in this kinda architecture.

81
00:05:16.220 --> 00:05:21.040
So, what we can do now, that we've got,
this, duplex stream, when it

82
00:05:21.040 --> 00:05:25.590
would do something fun, it could make an
echo server, it would just be that, right?

83
00:05:25.590 --> 00:05:27.020
We could also just, lift.

84
00:05:28.210 --> 00:05:29.840
Yeah, I'm just I'm feeling
kind of lazy right now.

85
00:05:29.840 --> 00:05:32.720
So I'm just gonna lift
at the loud example.

86
00:05:32.720 --> 00:05:37.695
So we're just gonna make
a echo server that's loud,

87
00:05:37.695 --> 00:05:44.672
loud echo server require through, And

88
00:05:44.672 --> 00:05:50.530
we'll pipe our incoming connection to our
to upper and then pipe it back out again.

89
00:05:52.632 --> 00:05:58.070
All right, so, now we need a way of
writing data into the other side

90
00:05:58.070 --> 00:06:01.970
of the connection and also reading data so
that we can see what were being sent.

91
00:06:03.380 --> 00:06:07.650
Well, I guess we don't have
to do that we can only, yeah.

92
00:06:07.650 --> 00:06:12.400
So, except all of these peers now

93
00:06:12.400 --> 00:06:16.990
are gonna be writing to upper in a loop
because it's a symmetric connection.

94
00:06:16.990 --> 00:06:23.040
So maybe that's not the best idea,
what else could we do?

95
00:06:23.040 --> 00:06:27.844
I guess we can use this terrible hack
to just see what people are sending us.

96
00:06:31.358 --> 00:06:33.030
Yeah, this will be fine.

97
00:06:33.030 --> 00:06:35.690
And then we need some sort of text box.

98
00:06:35.690 --> 00:06:38.270
I'm just gonna hack one
of those out really fast.

99
00:06:38.270 --> 00:06:40.520
This time I'm gonna Ctrl+Shift+R so

100
00:06:40.520 --> 00:06:43.540
that Chrome doesn't give
me that horrible problem.

101
00:06:45.350 --> 00:06:49.820
So, I'll just create a document,
create element,

102
00:06:51.790 --> 00:06:55.930
div and I'm gonna pin that
to the dom by doing this.

103
00:06:55.930 --> 00:07:00.420
And then I'm gonna,
have an update function which I

104
00:07:00.420 --> 00:07:04.279
call immediately cuz I always forget to do
that, and then it's gonna look like that.

105
00:07:05.370 --> 00:07:11.250
And then I'm gonna html.updates
with the root element and

106
00:07:11.250 --> 00:07:14.140
DomString and
a template with a div wrapper.

107
00:07:15.960 --> 00:07:19.423
Can I have a form with an on submit?

108
00:07:24.831 --> 00:07:28.247
Given, had a chance to play with
template strings, they're really great.

109
00:07:28.247 --> 00:07:30.340
It's the only part of ESX that I use.

110
00:07:32.290 --> 00:07:35.418
And I'll just use my
favorite input type="test",

111
00:07:35.418 --> 00:07:37.980
name="msg" tag that I always use for
everything.

112
00:07:38.980 --> 00:07:42.116
Sure, and I'll even do the pre thing
that we did in the other demo, why not?

113
00:07:44.822 --> 00:07:46.464
So have an output array.

114
00:07:50.051 --> 00:07:52.132
That'll work, I think.

115
00:07:52.132 --> 00:07:56.791
So now if we get data,
we need to push it to output

116
00:07:56.791 --> 00:08:01.227
array in order to log it and
then call update.

117
00:08:03.122 --> 00:08:06.694
And our onsubmit function now,

118
00:08:09.411 --> 00:08:13.620
Will send data to all of
the peers that are connected.

119
00:08:13.620 --> 00:08:16.990
So first of all, we're gonna need
to keep track of all of our peers.

120
00:08:18.230 --> 00:08:20.050
So I'm gonna do that with an object.

121
00:08:21.410 --> 00:08:24.509
And if we get a new peer, gonna do.

122
00:08:26.744 --> 00:08:30.991
So, let me think here.

123
00:08:30.991 --> 00:08:33.060
&gt;&gt; Peers id is the second.

124
00:08:33.060 --> 00:08:35.870
&gt;&gt; Yeah, peer.id, so
I can do peers, peer.id.

125
00:08:35.870 --> 00:08:37.240
I'll go with this the second argument?

126
00:08:37.240 --> 00:08:38.686
&gt;&gt; Yeah.
&gt;&gt; Okay, yeah, that works better.

127
00:08:38.686 --> 00:08:42.980
Okay = peer, and
then there's a disconnect event or

128
00:08:42.980 --> 00:08:44.790
I could use the end of stream function.

129
00:08:44.790 --> 00:08:46.720
Why don't use that cuz I covered it, sure.

130
00:08:48.020 --> 00:08:52.080
So on end equals require and of stream cuz

131
00:08:52.080 --> 00:08:56.180
I don't like to think about all of
the different ways that streams can end.

132
00:08:56.180 --> 00:09:00.310
So, that stream ends then
delete it from the list.

133
00:09:02.430 --> 00:09:06.510
This hacky function,
why don't I do things properly?

134
00:09:06.510 --> 00:09:07.830
This is a class in everything.

135
00:09:07.830 --> 00:09:13.820
So to.function buf, enc, next.

136
00:09:16.020 --> 00:09:17.970
All right there I did it proper, whatever.

137
00:09:19.270 --> 00:09:21.000
Okay, and we need to require that.

138
00:09:21.000 --> 00:09:23.020
So am I even using three two anymore?

139
00:09:23.020 --> 00:09:23.720
I don't think so.

140
00:09:23.720 --> 00:09:30.259
All right, so we require to two,
we have our HTML garbage.

141
00:09:31.490 --> 00:09:36.810
And now finally we need to ev.prevent
default in our on submit handler.

142
00:09:36.810 --> 00:09:40.220
We need to this dot elements
that messaged value

143
00:09:40.220 --> 00:09:42.150
gets pushed to each one of the peers.

144
00:09:42.150 --> 00:09:45.288
So we need to loop over
object.keys peers for each.

145
00:09:45.288 --> 00:09:49.660
And that's gonna give us
the ID is the key, so

146
00:09:49.660 --> 00:09:54.590
we need to do peers ID these are duplex
stream so we can write to them, id write.

147
00:09:54.590 --> 00:09:56.185
That plus a new line, why not?

148
00:09:56.185 --> 00:10:03.661
Cuz new ones are nice and,
Guess that's it.

149
00:10:03.661 --> 00:10:07.150
Yeah, this.reset that's nice.

150
00:10:07.150 --> 00:10:09.500
You hit enter,
it's nice if like the text goes away.

151
00:10:11.480 --> 00:10:17.090
You could also assign it but this is less
typing, so this might work who knows?

152
00:10:19.960 --> 00:10:20.970
Try it here.

153
00:10:23.950 --> 00:10:26.020
Okay, so I'm gonna have, so

154
00:10:26.020 --> 00:10:29.590
I'm using budo which does browserify
on your files automatically.

155
00:10:30.610 --> 00:10:32.890
It's 1 megabyte of
JavaScript cuz there's so

156
00:10:32.890 --> 00:10:34.550
many dependencies underneath this thing.

157
00:10:36.440 --> 00:10:40.010
So if here I've got an incognito
window and I've got a normal window so

158
00:10:40.010 --> 00:10:45.560
they are gonna talk to each other,
hopefully, okay?

159
00:10:47.230 --> 00:10:49.430
All right type error message of undefined.

160
00:10:49.430 --> 00:10:53.106
Let's see what I messed up.

161
00:10:55.682 --> 00:10:59.690
This.elements do you see what it is?

162
00:10:59.690 --> 00:11:00.900
I see it.

163
00:11:00.900 --> 00:11:05.550
This inside of object keys for each,

164
00:11:05.550 --> 00:11:10.955
I'm just gonna save that outside of here.

165
00:11:16.823 --> 00:11:17.430
There we go.

166
00:11:19.130 --> 00:11:23.075
I do that budo's gonna recompile it for
me so

167
00:11:23.075 --> 00:11:29.380
I don't have to think about it,
Ctrl+ Shift+R, Ctrl+Shift+R.

168
00:11:33.120 --> 00:11:37.315
It's talking peer to peer.

169
00:11:37.315 --> 00:11:42.303
If all of you run this program,
you will also join the same chatroom,

170
00:11:42.303 --> 00:11:45.399
even though it's running on your system,

171
00:11:45.399 --> 00:11:50.790
I'm gonna leave this running and
I'm gonna push the get code.

172
00:11:50.790 --> 00:11:55.140
And if you run the program, you should
start to show up on this as well.

