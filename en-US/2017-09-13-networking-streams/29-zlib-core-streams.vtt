WEBVTT

1
00:00:00.400 --> 00:00:04.669
Other fun things to do is to
poke around at the zlib module,

2
00:00:04.669 --> 00:00:10.001
which is also part of Node core, so
you get this when you do require zlib.

3
00:00:10.001 --> 00:00:14.245
And there's all kinds of methods for
doing inflate and

4
00:00:14.245 --> 00:00:19.052
deflate, which are used in HTTP
servers or, I guess, yeah.

5
00:00:19.052 --> 00:00:23.506
So I guess createUnzip can
sort of automatically detect

6
00:00:23.506 --> 00:00:26.074
whether it's inflate or gzip.

7
00:00:26.074 --> 00:00:29.508
But what we can do right here is to use

8
00:00:29.508 --> 00:00:33.868
createGunzip to unzip
something on the fly.

9
00:00:33.868 --> 00:00:37.392
And maybe we could take the hash
of it after that, I don't know,

10
00:00:37.392 --> 00:00:38.840
something fun like that.

11
00:00:38.840 --> 00:00:43.429
And we can verify that our program
works like we would expect by using

12
00:00:43.429 --> 00:00:47.387
the command line alternatives
to doing that in Node core.

13
00:00:47.387 --> 00:00:53.755
So from day1, we had this file,
I guess I deleted it,

14
00:00:53.755 --> 00:00:57.800
but we had a file that was gzipped.

15
00:00:57.800 --> 00:00:58.992
I'll just make one really quick.

16
00:00:58.992 --> 00:01:04.605
So do gzip from standard in,
from file hello.txt,

17
00:01:04.605 --> 00:01:08.954
and then hello.txt.gz, there we go.

18
00:01:08.954 --> 00:01:14.247
Just to verify that it has
the correct output, there we go.

19
00:01:14.247 --> 00:01:18.958
If I cat it, it's gonna look real nasty,

20
00:01:18.958 --> 00:01:23.682
there we go, it's some binary garbage.

21
00:01:23.682 --> 00:01:29.733
So we can write a note
program now called gunzip.js

22
00:01:29.733 --> 00:01:37.600
that uses zlib.createGunzip
to decompress that input.

23
00:01:37.600 --> 00:01:39.205
So I like to take standard in,

24
00:01:39.205 --> 00:01:43.853
you can of course use fs.createReadStream
if you wanna read from a particular file.

25
00:01:43.853 --> 00:01:47.510
But this is a nice flexible
way to do it as well.

26
00:01:47.510 --> 00:01:48.931
And we can pipe that to standard out.

27
00:01:48.931 --> 00:01:53.638
So this is pretty much what the gunzip
utility on the command line can do,

28
00:01:53.638 --> 00:01:59.059
although that one's faster, but this
one is JavaScript, so that's nice, too.

29
00:01:59.059 --> 00:02:02.497
So if we take our file hello.txt.gz,

30
00:02:02.497 --> 00:02:07.090
we get the plaintext version,
which is very handy.

31
00:02:07.090 --> 00:02:11.570
Let's go ahead and add a hash as well,
why not, to our little pipeline,

32
00:02:11.570 --> 00:02:13.046
I think that'd be fun.

33
00:02:15.567 --> 00:02:21.606
So we'll load createHash from,
I guess for consistency,

34
00:02:21.606 --> 00:02:28.750
I don't have to do zlib.createGunzip,
I could just createGunzip.

35
00:02:28.750 --> 00:02:33.089
And then we'll require crypto.createHash.

36
00:02:33.089 --> 00:02:38.608
And now we'll pipe into
createHash('sha512').

37
00:02:38.608 --> 00:02:44.482
And now if I run this program, it should
first take the compressed gzip input,

38
00:02:44.482 --> 00:02:50.094
it should decompress it, and
it should pipe it into streaming SHA 512.

39
00:02:50.094 --> 00:02:55.224
And it should print out the,
I'll set it to hex encoding so

40
00:02:55.224 --> 00:02:59.608
that we can look at it and verify on the
command line that the program is working

41
00:02:59.608 --> 00:03:02.989
like we think it ought to,
okay, does this all make sense?

42
00:03:02.989 --> 00:03:07.280
So again, standard in comes in,
it's a readable stream.

43
00:03:07.280 --> 00:03:09.385
It goes into createGunzip,

44
00:03:09.385 --> 00:03:13.774
and the compressed input turns
into uncompressed output.

45
00:03:13.774 --> 00:03:18.742
Then we compute the SHA
512 hash of that input,

46
00:03:18.742 --> 00:03:22.542
and then we print the resulting hash.

47
00:03:22.542 --> 00:03:25.459
And all of these happens in
a streaming way, except for

48
00:03:25.459 --> 00:03:29.466
at the very end because the hashing
algorithms have to buffer up the input.

49
00:03:29.466 --> 00:03:33.868
But it's not like you're
consuming a lot of extra memory,

50
00:03:33.868 --> 00:03:38.458
because the hash is done in place
with a fixed chunk of memory.

51
00:03:38.458 --> 00:03:42.401
So if we run this program on
our compressed input now,

52
00:03:42.401 --> 00:03:46.791
we should get the hash back
that should match the original.

53
00:03:46.791 --> 00:03:51.274
So let me just run that a different way,
okay, so here's our hash.

54
00:03:51.274 --> 00:03:55.295
And that should match up to the shasum for

55
00:03:55.295 --> 00:03:58.967
512 of hello.txt, and it does.

56
00:03:58.967 --> 00:04:01.983
And if we wanna do the same thing on the
command line that we just did in our Node

57
00:04:01.983 --> 00:04:03.836
program, it would look
something like this.

58
00:04:03.836 --> 00:04:09.102
So we could gunzip hello.txt.gz and
pipe that to shasum -a 512.

59
00:04:09.102 --> 00:04:15.908
And we get back the same hash,
so any questions?

60
00:04:15.908 --> 00:04:19.988
These are core streams that
are good to play around with,

61
00:04:19.988 --> 00:04:22.797
good to practice, good to know about.

62
00:04:22.797 --> 00:04:26.189
Comes up now and
then when you're building stuff.

63
00:04:26.189 --> 00:04:29.010
I think it's really fun
way to build programs,

64
00:04:29.010 --> 00:04:33.606
instead of just building these really
big and clunky, enterprisey things.

65
00:04:33.606 --> 00:04:39.382
Just throw down some shell scripts,
throw down some little pipes and stuff.

66
00:04:39.382 --> 00:04:44.960
So I'm gonna add, what was that
example called, gunzip.js as well.

67
00:04:44.960 --> 00:04:47.040
And then maybe we can
take a little break so

68
00:04:47.040 --> 00:04:49.306
people can play around
with these examples.

69
00:04:49.306 --> 00:04:52.210
And if you have any questions,
be a good time.

