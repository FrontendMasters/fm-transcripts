WEBVTT

1
00:00:00.462 --> 00:00:05.340
So I see on the chat,
Justin has a question about

2
00:00:05.340 --> 00:00:10.720
when and how you would need to
explicitly close the stream.

3
00:00:10.720 --> 00:00:13.340
So, generally you don't need to do this,

4
00:00:13.340 --> 00:00:18.059
although sometimes a stream might have
some internal state like file descriptors

5
00:00:19.110 --> 00:00:21.990
that it ought to free back
to the operating system.

6
00:00:21.990 --> 00:00:24.683
So usually,
you don't have to worry about it, but

7
00:00:24.683 --> 00:00:27.893
sometimes you do would be my question,
my answer, I guess.

8
00:00:30.710 --> 00:00:34.591
And it sort of depends on the
implementation details of the stream that

9
00:00:34.591 --> 00:00:35.923
you're dealing with.

10
00:00:38.311 --> 00:00:43.441
So why don't I just go in and
show you how I would do that

11
00:00:43.441 --> 00:00:48.803
modification, you can
compare with how you've done.

12
00:00:54.380 --> 00:00:57.079
So in here,
instead of truncating the output,

13
00:00:57.079 --> 00:00:59.310
I guess we could send an error message.

14
00:01:02.532 --> 00:01:03.923
And not call next at all.

15
00:01:10.705 --> 00:01:13.180
This, whatever message you like.

16
00:01:13.180 --> 00:01:15.633
So that ought to work,
let's just double check.

17
00:01:20.443 --> 00:01:25.460
And now we can do that curl command again,
ETOOBIG, very good.

18
00:01:26.600 --> 00:01:33.730
And now if I remove the 0's, or those
O's rather, and we get ok, fantastic.

19
00:01:33.730 --> 00:01:37.240
So now we've got program
that parses question.

20
00:01:37.240 --> 00:01:41.125
&gt;&gt; So in your program, does that res.end,

21
00:01:41.125 --> 00:01:47.119
does that cause the execution
inside that if statement to end for

22
00:01:47.119 --> 00:01:49.790
that particular function?

23
00:01:49.790 --> 00:01:55.434
&gt;&gt; So basically, if we never call next,
then we're never pulling from the stream

24
00:01:55.434 --> 00:02:00.424
to get more data, so the stream
isn't gonna even generate more data.

25
00:02:00.424 --> 00:02:03.375
&gt;&gt; Do you still need the else block?

26
00:02:03.375 --> 00:02:05.180
&gt;&gt; Yes, yeah.

27
00:02:05.180 --> 00:02:09.317
So this only happens if the size is over
the threshold that we've established.

28
00:02:15.474 --> 00:02:19.018
&gt;&gt; Could you, this may be semantical, but

29
00:02:19.018 --> 00:02:23.291
could you get rid of the else,
and then it would,

30
00:02:23.291 --> 00:02:30.315
does res.end just totally exit out of
the function like a return or does it end?

31
00:02:30.315 --> 00:02:35.310
&gt;&gt; Res.end is just going to, so
we're doing res.end right here,

32
00:02:35.310 --> 00:02:38.670
and not calling next, so
that this part never fires.

33
00:02:38.670 --> 00:02:42.670
So you need to call res.end if you're
writing an HTTP server just to tell

34
00:02:42.670 --> 00:02:46.880
the client that, okay, you've got all
of the data that you're gonna get.

35
00:02:48.980 --> 00:02:51.620
So end is actually a method
on writable streams, and

36
00:02:51.620 --> 00:02:52.480
we'll get to that in a little bit.

37
00:02:53.820 --> 00:02:58.160
&gt;&gt; But to your question, you could just
put a return keyword after the res.end and

38
00:02:58.160 --> 00:03:00.600
get the behavior you're talking about.

39
00:03:00.600 --> 00:03:01.710
&gt;&gt; Like this, you mean?

40
00:03:01.710 --> 00:03:02.240
&gt;&gt; Yeah.
&gt;&gt; And

41
00:03:02.240 --> 00:03:04.280
then if this were written like this.

42
00:03:04.280 --> 00:03:04.780
&gt;&gt; Yeah.

43
00:03:04.780 --> 00:03:06.600
&gt;&gt; Okay, yeah, this is also valid.

44
00:03:06.600 --> 00:03:09.700
Just early return versus else, yep.

45
00:03:11.380 --> 00:03:14.960
Everything is valid [LAUGH],
okay.

