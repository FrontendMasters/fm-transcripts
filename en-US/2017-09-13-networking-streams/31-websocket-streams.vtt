WEBVTT

1
00:00:00.160 --> 00:00:05.562
I think it'd be really useful, probably
for a lot of folks to get some experience

2
00:00:05.562 --> 00:00:11.500
doing node.js streams in the browser,
which we can do, of course.

3
00:00:11.500 --> 00:00:16.151
So there's a package that I like to use
called websocket-stream to do this.

4
00:00:18.403 --> 00:00:22.277
So why don't we go ahead and
write a server that,

5
00:00:22.277 --> 00:00:25.690
I'll make a separate directory for this.

6
00:00:28.510 --> 00:00:35.160
So we'll have our server, you have to
create an HTTP server to begin with,

7
00:00:35.160 --> 00:00:40.880
so server is gonna do things
like serve up static files.

8
00:00:40.880 --> 00:00:43.320
I like to use this package
called ecstatic for that, so

9
00:00:43.320 --> 00:00:46.840
I'm just gonna quickly install
it in the background as I type.

10
00:00:46.840 --> 00:00:51.600
Cuz I don't wanna have to write out
fs.createreadstream for all of the paths

11
00:00:51.600 --> 00:00:55.000
that we're gonna take because we're also
gonna have to distribute some browser code

12
00:00:55.000 --> 00:00:55.700
for this example.

13
00:00:55.700 --> 00:01:01.011
All right, so do http.createServer, and

14
00:01:01.011 --> 00:01:08.473
then we can let it ecstatic take
care of the http serving part,

15
00:01:08.473 --> 00:01:13.822
so I'll let it serve out
of public directory.

16
00:01:15.932 --> 00:01:21.180
So I have a public directory now,

17
00:01:21.180 --> 00:01:27.371
and then we've got to listen on a port.

18
00:01:27.371 --> 00:01:32.199
We've also now got to use the WebSocket
stream module to set up our WebSocket

19
00:01:32.199 --> 00:01:32.810
server.

20
00:01:32.810 --> 00:01:37.810
So this works just like creating a TCP
server with net.createServer, so you get

21
00:01:37.810 --> 00:01:41.580
a duplex stream, that's by directional
that you could talk to the browser with.

22
00:01:42.900 --> 00:01:47.870
So what that looks like is we
require a websocket-stream,

23
00:01:47.870 --> 00:01:51.000
then you call wsock.createServer.

24
00:01:51.000 --> 00:01:56.249
And then you have to give it your
HTTP server in this object, and

25
00:01:56.249 --> 00:02:03.102
then you provide a function, and inside of
this function stream is a duplex stream

26
00:02:07.514 --> 00:02:11.140
So we can do all of the things that
we're used to with duplex streams.

27
00:02:11.140 --> 00:02:14.308
So for example, if we just want to make
an echo server, we could do stream,

28
00:02:14.308 --> 00:02:17.650
stream.pipestream, for example.

29
00:02:17.650 --> 00:02:19.340
Or maybe we'll do something
a little more fun,

30
00:02:19.340 --> 00:02:24.920
like we'll create an echo server
that converts to uppercase first.

31
00:02:24.920 --> 00:02:32.720
So we can make a little loud
transform to put in that pipeline,

32
00:02:32.720 --> 00:02:37.670
so we'll need to load through first for

33
00:02:37.670 --> 00:02:42.032
that, then in our loud function,

34
00:02:45.685 --> 00:02:51.454
buf, enc, next, and
then we'll do next, null for

35
00:02:51.454 --> 00:02:58.070
the errors,
buf.toString.toUpperCase, okay?

36
00:02:58.070 --> 00:03:02.470
So that's all we need aside from some
client side code now and some HTML,

37
00:03:02.470 --> 00:03:03.670
all right?

38
00:03:03.670 --> 00:03:08.700
So that's our server,
let's build a client, so

39
00:03:08.700 --> 00:03:12.720
in client,
we're also gonna load WebSocket stream.

40
00:03:12.720 --> 00:03:18.872
So we'll require websocket-stream,
and what we can do then is.

41
00:03:18.872 --> 00:03:23.682
So you have to give wsock a ws:// or

42
00:03:23.682 --> 00:03:28.648
wss for SSL connections address which

43
00:03:28.648 --> 00:03:34.093
looks like something like that for that.

44
00:03:34.093 --> 00:03:38.823
So happens that run port 5000,
but if we weren't in the browser,

45
00:03:38.823 --> 00:03:43.650
we actually know what port we're on
which is location dot or here I can.

46
00:03:45.880 --> 00:03:50.921
Well, it's gonna be a location.host I

47
00:03:50.921 --> 00:03:57.060
think it's gonna be like
localhost:5000 anyways.

48
00:03:57.060 --> 00:04:00.500
So we get a duplex stream,
which is the stream object, so

49
00:04:00.500 --> 00:04:04.675
now we can decide how to use it.

50
00:04:04.675 --> 00:04:09.680
So we're gonna need
a little bit of boilerplate

51
00:04:09.680 --> 00:04:14.370
stuff to kinda like have an input box,
and put it in the HTML and whatever.

52
00:04:14.370 --> 00:04:17.650
So I'm just gonna whip up one
of those really fast, and

53
00:04:17.650 --> 00:04:21.320
then we can play with our
example in the browser.

54
00:04:23.170 --> 00:04:25.510
So I'm just gonna use some of
my favorite modules to do this,

55
00:04:25.510 --> 00:04:26.569
this one's called the yo-yo,

56
00:04:26.569 --> 00:04:31.690
it used template strings if you've ever
seen these before, it uses backticks.

57
00:04:31.690 --> 00:04:33.820
I'm just gonna write it out and
you can see how it works.

58
00:04:33.820 --> 00:04:39.870
So we need an update function, we're also
gonna need a way of latching onto the DOM.

59
00:04:42.620 --> 00:04:48.082
So we'll create element, a div, and
we'll append that to the document body.

60
00:04:50.643 --> 00:04:55.383
Okay, and then we need to call
html.update with our root element, and

61
00:04:55.383 --> 00:04:58.470
then we can give it a block
of markup to insert.

62
00:04:58.470 --> 00:05:02.850
So here, I'm gonna have a div, and
the div is gonna have a form, and

63
00:05:02.850 --> 00:05:05.605
the form is gonna have
an input type=textbox.

64
00:05:07.990 --> 00:05:12.190
And that's where we can type our messages
that we're gonna send to the server.

65
00:05:13.520 --> 00:05:19.340
And then we need a way of handling submit
events, so we can do onsubmit like so.

66
00:05:21.040 --> 00:05:25.527
So in our onsubmit function,
we need to prevent default so

67
00:05:25.527 --> 00:05:30.105
that it doesn't try to like,
do a get form request things,

68
00:05:30.105 --> 00:05:33.330
because we wanna handle that ourselves.

69
00:05:33.330 --> 00:05:36.480
Then we can do this.elements,
we need to give our textbox a name,

70
00:05:36.480 --> 00:05:38.310
I'll call it message.

71
00:05:38.310 --> 00:05:45.240
So this.elements.msg.value is gonna be the
whatever string we type in the textbox.

72
00:05:45.240 --> 00:05:49.250
So what we need to do is stream.write,

73
00:05:49.250 --> 00:05:53.460
the message plus a new line, and
that gets sent to our server.

74
00:05:53.460 --> 00:05:57.730
The final piece that we need to do is for
the data that comes back from the server,

75
00:05:57.730 --> 00:05:59.660
we're gonna need to render that.

76
00:05:59.660 --> 00:06:05.170
So I'll make a pre-tag, and
we can stick it into the DOM, so I'll

77
00:06:06.820 --> 00:06:12.308
create an array called output, and
we can do output.join, just the string.

78
00:06:12.308 --> 00:06:16.970
And we're gonna push on to that as
we receive data from the server.

79
00:06:18.800 --> 00:06:27.010
So I can also require through even though
this is browser code, so our stream now,

80
00:06:27.010 --> 00:06:32.610
right here, we can pipe into
a little function with through.

81
00:06:34.820 --> 00:06:39.661
And then we can do
output.push(buf.toString.

82
00:06:39.661 --> 00:06:44.950
It a lot to take in, but

83
00:06:44.950 --> 00:06:48.662
this is all that we need
to have a streaming client,

84
00:06:48.662 --> 00:06:52.760
that's gonna run in the browser,
display HTML and such.

85
00:06:52.760 --> 00:06:57.680
So there's a final step that we need to
take if I've done everything correctly.

86
00:06:57.680 --> 00:07:02.270
And that, aside from rendering the initial
code, I often forget to do that, so

87
00:07:02.270 --> 00:07:03.330
it's gonna be remembered.

88
00:07:03.330 --> 00:07:08.380
Yeah, and this.reset is a property
that's available on forms,

89
00:07:08.380 --> 00:07:12.450
it just clears out all of the form
records, so that's handy to know.

90
00:07:12.450 --> 00:07:16.130
Anyways, so we do all of this stuff,
now in the public directory,

91
00:07:16.130 --> 00:07:17.190
we need to make some HTML.

92
00:07:18.190 --> 00:07:19.907
This is the HTML that I like to write.

93
00:07:22.677 --> 00:07:24.730
That's it.

94
00:07:24.730 --> 00:07:29.070
Just to show you again,
very simple, body tag so

95
00:07:29.070 --> 00:07:33.750
that you don't have to do any
DOM on ready shenanigans.

96
00:07:33.750 --> 00:07:37.300
And just put your script tag in there,
and /body is probably a good idea, too,

97
00:07:37.300 --> 00:07:37.910
I don't know.

98
00:07:39.190 --> 00:07:40.970
Okay, so the final thing we need to do is,

99
00:07:40.970 --> 00:07:43.420
we can run this tool called
browserify that I wrote.

100
00:07:43.420 --> 00:07:49.350
A long time ago, you can install it
like this, you should probably do that,

101
00:07:49.350 --> 00:07:52.230
it might take a while,
because it's got a lot of dependencies.

102
00:07:52.230 --> 00:07:57.660
Once you have it, you can do browserify
client.js and by default, it writes to

103
00:07:57.660 --> 00:08:03.930
standard out, so you can redirect
standard out into public/bundle.js.

104
00:08:03.930 --> 00:08:07.820
And once you've done all of these things,

105
00:08:07.820 --> 00:08:11.926
then you should be able to run the server,
and

106
00:08:11.926 --> 00:08:17.994
you should be able to go to,
in a browser to localhost:5000.

107
00:08:17.994 --> 00:08:22.353
And if I did everything correctly,
good, we see a textbox,

108
00:08:22.353 --> 00:08:27.585
Hit enter, I know what it is,
I forgot to call the update function.

109
00:08:27.585 --> 00:08:33.330
One moment, I'll fix that, call the update
function every time we modify the state.

110
00:08:33.330 --> 00:08:37.425
Remember browserify again, whoops, because
I don't have it in the history for there.

111
00:08:38.935 --> 00:08:41.275
There's also tools like Watcher File and

112
00:08:41.275 --> 00:08:47.175
Budo that you can use to recompile
things every time you change your file.

113
00:08:47.175 --> 00:08:49.619
Anyways, that's not for today's workshop,

114
00:08:49.619 --> 00:08:51.826
the details of that
will be some other day.

115
00:08:51.826 --> 00:08:58.300
Reoad, Hello, we strike that one as well.

116
00:09:01.015 --> 00:09:04.960
No, now we have to debug this thing
that I live coded, let me think.

