WEBVTT

1
00:00:00.230 --> 00:00:06.271
So the next thing that I wanted to cover
is a handy little module called split2,

2
00:00:06.271 --> 00:00:11.710
the 2 is because of this
streams 2 interface.

3
00:00:11.710 --> 00:00:16.660
So this module can split on new lines or
any other kind of delimiter.

4
00:00:16.660 --> 00:00:20.810
So if you, for example,
have a little program here and

5
00:00:20.810 --> 00:00:24.590
you wanna count the number of lines,
the number of times a new line occurs,

6
00:00:24.590 --> 00:00:30.910
you could do that by scanning through
the buffers for new line characters.

7
00:00:30.910 --> 00:00:36.355
But here's another way to do it where
you actually buffer up the input chunks,

8
00:00:36.355 --> 00:00:38.098
which could be any size.

9
00:00:38.098 --> 00:00:41.610
So those input chunks could
span new lines or not.

10
00:00:41.610 --> 00:00:48.180
But the split2 module, by default,
will split on a new line delimiter.

11
00:00:48.180 --> 00:00:52.550
So you can be assured that each
buffer will be a single line.

12
00:00:54.000 --> 00:00:54.769
So here's a little program.

13
00:00:54.769 --> 00:01:00.410
I'll go ahead and just type this one out.

14
00:01:00.410 --> 00:01:04.490
So it's like line-count.js.

15
00:01:04.490 --> 00:01:09.878
So we load split2,
we can also load through, And

16
00:01:09.878 --> 00:01:15.386
we can take stdin and
pipe that into split,

17
00:01:15.386 --> 00:01:19.058
and pipe that into through.

18
00:01:19.058 --> 00:01:23.660
And then inside of through,

19
00:01:23.660 --> 00:01:30.000
every chunk should be a separate line.

20
00:01:31.280 --> 00:01:35.860
So I can do, first,
I'll just print out the buffer so

21
00:01:35.860 --> 00:01:38.260
you can see that everyone
is on a single line.

22
00:01:38.260 --> 00:01:40.374
And if I run this, I gotta do next.

23
00:01:40.374 --> 00:01:43.020
Yeah, if your stream seems to stall,

24
00:01:43.020 --> 00:01:47.340
then you're probably not calling next and
that's why.

25
00:01:47.340 --> 00:01:48.535
So if you ever hit that problem.

26
00:01:48.535 --> 00:01:53.754
So one, two, three.

27
00:01:53.754 --> 00:01:58.582
Or just to prove that it's
actually buffering by line, so

28
00:01:58.582 --> 00:02:01.052
I'll do it more in one chunk.

29
00:02:05.125 --> 00:02:07.440
So that's peculiar.

30
00:02:07.440 --> 00:02:10.390
&gt;&gt; You didn't put it in [CROSSTALK]
&gt;&gt; Forgot your n.

31
00:02:10.390 --> 00:02:11.440
&gt;&gt; Thank you.

32
00:02:11.440 --> 00:02:13.230
Yeah, it was a tab character.

33
00:02:13.230 --> 00:02:14.490
There we go.

34
00:02:14.490 --> 00:02:15.966
Three lines, fantastic.

35
00:02:15.966 --> 00:02:24.043
So we can also now start counting the
number of lines, so cap a little counter.

36
00:02:24.043 --> 00:02:29.860
I call it lineCount = 0.

37
00:02:29.860 --> 00:02:35.220
And then increament that for every
time we get junk, I'm gonna move these

38
00:02:35.220 --> 00:02:40.765
out to an end functions cuz I think it's
a little bit easier to do it that way.

39
00:02:44.049 --> 00:02:50.350
So then in our end function,
we can just print out the lineCount.

40
00:02:50.350 --> 00:02:52.370
The end function also
gets the next callback,

41
00:02:52.370 --> 00:02:57.942
which if we were consuming the stream
anywhere would forward along the sort of

42
00:02:57.942 --> 00:03:03.740
the stream signal,
I guess you could call it.

43
00:03:03.740 --> 00:03:07.540
Anyways, this program is more less
what wc -l does on the cmdline.

44
00:03:07.540 --> 00:03:14.070
So okay, like if I do wc -l line-count-js,
you see 16 lines.

45
00:03:14.070 --> 00:03:18.330
And now, if I run line-count program
in node, I also get 16 lines, cool.

46
00:03:20.760 --> 00:03:22.850
Or you know any other file
will work here as well.

47
00:03:22.850 --> 00:03:26.940
So I think code that txt has 3 lines yeah.

48
00:03:26.940 --> 00:03:34.035
Cool, so there's a example of a line
counter using the split module.

49
00:03:37.624 --> 00:03:41.710
One thing you should note about split
is that it removes the delimiter.

50
00:03:41.710 --> 00:03:45.673
So just something to have to know about.

51
00:03:45.673 --> 00:03:48.890
You can also give it a custom regex.

52
00:03:48.890 --> 00:03:53.850
So if you remember from the really
early on, we had the Moby-Dick example.

53
00:03:53.850 --> 00:03:59.650
So in that command line example,
we split using said every

54
00:03:59.650 --> 00:04:03.020
whitespace character returned into a new
line so that we could filter with grep.

55
00:04:03.020 --> 00:04:08.740
So it's kind of a similar thing that you
can do with this split package here.

56
00:04:08.740 --> 00:04:12.340
If you wanted to like do some kind
of custom regex delimiter you can.

