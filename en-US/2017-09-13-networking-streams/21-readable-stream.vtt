WEBVTT

1
00:00:00.330 --> 00:00:03.470
The next thing that we can look
at is readable stream methods.

2
00:00:03.470 --> 00:00:07.510
readable stream methods
are anything that you pipe from, so

3
00:00:07.510 --> 00:00:10.585
you call .pipe on
the readable stream itself.

4
00:00:10.585 --> 00:00:16.572
And, Readable streams have an event
called end that just like finish fires

5
00:00:16.572 --> 00:00:20.980
exactly once so you can listen for those
with on or once, doesn't really matter.

6
00:00:22.150 --> 00:00:26.830
And do something when the readable
stream is done reading.

7
00:00:28.420 --> 00:00:32.545
Readable streams also have some other
methods and events like the read method

8
00:00:32.545 --> 00:00:36.542
and the readable method, but you usually
don't have to call these methods

9
00:00:36.542 --> 00:00:40.107
yourself and it's kinda error
prone to do that yourself anyways.

10
00:00:40.107 --> 00:00:44.882
So I would kinda recommend letting modules
and letting the pipe method take care of

11
00:00:44.882 --> 00:00:49.680
calling these things like .read and
listening for the readable event.

12
00:00:49.680 --> 00:00:53.330
But it's good to know that they're
there in case you really have to

13
00:00:53.330 --> 00:00:55.950
dive into the weeds of how streams work.

14
00:00:57.540 --> 00:01:03.110
So we've seen some examples, but
just to show you again how that works,

15
00:01:03.110 --> 00:01:06.980
you can call createReadStream
to get a readable stream or

16
00:01:06.980 --> 00:01:09.776
also process.standardIn
is a readable stream.

17
00:01:09.776 --> 00:01:12.548
And then,

18
00:01:12.548 --> 00:01:18.410
instead of trying to call read yourself,

19
00:01:18.410 --> 00:01:22.400
which has kind of complicated semantics,
it's best just to pipe it somewhere and

20
00:01:22.400 --> 00:01:26.460
I'm gonna cover some good modules for
consuming readable streams in a bit.

21
00:01:27.460 --> 00:01:29.120
So we've already seen this kind of thing.

22
00:01:29.120 --> 00:01:29.620
Whoops.

23
00:01:30.950 --> 00:01:34.080
All right, you have to actually
provide createReadStream with

24
00:01:34.080 --> 00:01:35.000
some kind of file name.

25
00:01:36.220 --> 00:01:40.220
So I'll just read in the programs
on source and printed out again.

26
00:01:40.220 --> 00:01:41.542
That's what a readable stream looks like.

27
00:01:43.927 --> 00:01:49.818
Two other kinds of streams and
then I think we can take maybe a break.

28
00:01:49.818 --> 00:01:54.408
So the important thing to notice
about readable streams is that

29
00:01:54.408 --> 00:01:58.700
there's this notion of paused mode and
flowing mode.

30
00:01:58.700 --> 00:02:04.640
So, by default,
all readable streams are in paused mode.

31
00:02:04.640 --> 00:02:06.520
This means that they're

32
00:02:08.040 --> 00:02:12.650
only going to produce data when
you're actually consuming data.

33
00:02:12.650 --> 00:02:16.120
So if you remember from the example
we had a bit ago using concat-stream

34
00:02:16.120 --> 00:02:20.990
in an HTTP server,
when we wanted to stop consuming data,

35
00:02:20.990 --> 00:02:24.090
all that we needed to do
was to not call next.

36
00:02:25.260 --> 00:02:28.860
And calling next inside of
that transform function

37
00:02:28.860 --> 00:02:30.870
stopped reading from the readable stream.

38
00:02:30.870 --> 00:02:34.470
So the readable stream
stopped producing data.

39
00:02:34.470 --> 00:02:41.210
This is the system that Node.js
introduced with streams2 and what

40
00:02:41.210 --> 00:02:45.570
it gives you is this kind of automatic
way of dealing with back pressure.

41
00:02:45.570 --> 00:02:49.990
So back pressure is important concept for
Node.js streams.

42
00:02:49.990 --> 00:02:52.140
You could think of it like, all right, so

43
00:02:52.140 --> 00:02:56.070
you've got a really nice
server on a really fat pipe.

44
00:02:56.070 --> 00:03:00.526
And you can push terabytes maybe it's
like 10 gigabit fiber, I don't know.

45
00:03:00.526 --> 00:03:05.820
So your server is really good and
you're trying to push down a video file.

46
00:03:05.820 --> 00:03:10.800
But somebody is trying to watch
that video from a phone on

47
00:03:10.800 --> 00:03:12.590
an edge connection on like 2G.

48
00:03:13.970 --> 00:03:17.603
So it wouldn't really make sense to keep
pushing data at that client because it

49
00:03:17.603 --> 00:03:18.823
can't read it very fast.

50
00:03:18.823 --> 00:03:24.150
So it's just gonna either drop packets or
it's gonna lose that data.

51
00:03:24.150 --> 00:03:28.568
So what backpressure lets
you do at the protocol level

52
00:03:28.568 --> 00:03:33.477
there's a lot happening in TCP
land where with windowing,

53
00:03:33.477 --> 00:03:39.466
where the connection can sort of
inform the consumer to stop producing,

54
00:03:39.466 --> 00:03:45.918
and so Node.js will provide a lot of
this for you relatively automatically.

55
00:03:45.918 --> 00:03:51.110
So, when your readable

56
00:03:51.110 --> 00:03:55.900
stream can know when it should
sort of produce more data and

57
00:03:55.900 --> 00:03:59.590
when it shouldn't, and some of the pieces
behind the scenes deal with this.

58
00:04:01.700 --> 00:04:06.890
The other way that readable streams
works is called flowing mode.

59
00:04:06.890 --> 00:04:11.176
And this for compatibility
reasons can still be invoked, and

60
00:04:11.176 --> 00:04:16.205
it's sometimes useful if you just
wanna consume a stream really quick,

61
00:04:16.205 --> 00:04:20.410
in a kind of non-production
setting just to see something or

62
00:04:20.410 --> 00:04:23.970
if you're gonna buffer up
all of the data anyways.

63
00:04:23.970 --> 00:04:27.106
It really doesn't matter and you can
do it this way but generally speaking,

64
00:04:27.106 --> 00:04:30.510
you don't wanna invoke flowing mode
unless you have a good reason.

65
00:04:30.510 --> 00:04:35.820
But you do that by calling .resume or
if you listen for the data event,

66
00:04:35.820 --> 00:04:40.590
then it sort of kicks off this
old node because streams v1 would

67
00:04:40.590 --> 00:04:44.910
only emit data and events and
you had to listen for those.

68
00:04:44.910 --> 00:04:51.140
So this is kind of just a hack for
compatibility that is still around.

69
00:04:51.140 --> 00:04:54.410
You can still use it but
generally you can avoid it.

