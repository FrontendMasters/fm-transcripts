WEBVTT

1
00:00:00.540 --> 00:00:04.845
We've been using Netcat to make these
requests, but it's pretty long winded,

2
00:00:04.845 --> 00:00:07.963
pretty difficult way of making
requests to HTTP servers.

3
00:00:07.963 --> 00:00:09.943
There's a command that's available on,

4
00:00:09.943 --> 00:00:12.804
I think should probably already
be installed on your system.

5
00:00:12.804 --> 00:00:15.734
If it's not,
I highly recommend that you install it.

6
00:00:15.734 --> 00:00:16.580
It's called curl.

7
00:00:18.940 --> 00:00:25.233
In curl is a really easy way
of sending HTTP requests.

8
00:00:25.233 --> 00:00:28.841
So the default way that
curl works is it will

9
00:00:28.841 --> 00:00:33.764
print out the contents of
an HTTP request to standard out.

10
00:00:33.764 --> 00:00:38.110
So here you can try that
with any URL that you want.

11
00:00:38.110 --> 00:00:40.980
If my website's running, then yep,
I get back a bunch HTML.

12
00:00:42.150 --> 00:00:45.513
I don't get back the headers,
I just get back the content.

13
00:00:45.513 --> 00:00:48.781
But if you want the headers as well,
you can do capital I and

14
00:00:48.781 --> 00:00:51.733
it will only print out the headers and
the response.

15
00:00:51.733 --> 00:00:56.155
So this is really useful if you need to
debug an HTTP server that you're working

16
00:00:56.155 --> 00:00:58.433
on and you only care about the headers and

17
00:00:58.433 --> 00:01:02.721
you don't wanna have to write out long
form with Netcat the actual request or

18
00:01:02.721 --> 00:01:05.340
like parse it with some regex,
or something.

19
00:01:08.281 --> 00:01:14.100
Some other things I think I will print out
the headers in addition to the content and

20
00:01:14.100 --> 00:01:17.401
all kinds of other fun
things that you can try.

21
00:01:17.401 --> 00:01:20.815
The small s is to get rid of
a really annoying progress bar

22
00:01:20.815 --> 00:01:24.812
that's printed to standard error
that I pretty much never want,

23
00:01:24.812 --> 00:01:28.883
unless I'm downloading a big file
which I'd probably use wget for

24
00:01:28.883 --> 00:01:33.850
that anyways, cuz it can use HTTP range
headers to continue the download, but.

25
00:01:36.350 --> 00:01:39.850
If you wanna always use little s,

26
00:01:39.850 --> 00:01:44.733
you could setup an alias for
it in your bashrc.

27
00:01:44.733 --> 00:01:48.916
Probably not the worst idea.

28
00:01:48.916 --> 00:01:54.910
If you wanna o specify the HTTP verb
with the curl command you can use -X.

29
00:01:54.910 --> 00:01:57.101
So here, we can send a POST request.

30
00:01:57.101 --> 00:02:03.140
The default is to send a GET request, but
we can send a POST request like this.

31
00:02:03.140 --> 00:02:06.023
So you do -X POST, the URL.

32
00:02:06.023 --> 00:02:11.979
And then for each of those URL encoded
form parameters, you can use -d and

33
00:02:11.979 --> 00:02:18.060
then you specify the name of the form
element and equals sign and the value.

34
00:02:18.060 --> 00:02:21.305
So if I use that example from before,

35
00:02:21.305 --> 00:02:25.923
our example server we were just using,
let's see.

36
00:02:25.923 --> 00:02:27.581
So here, our server's running again.

37
00:02:27.581 --> 00:02:33.130
And now, I can use curl to send that
request and it works just the same.

38
00:02:33.130 --> 00:02:38.020
So I get back an ok response from the
server and curl is smart enough to know

39
00:02:38.020 --> 00:02:45.310
how to print out documents that have been
encoding with transfer encoding chunked.

40
00:02:45.310 --> 00:02:48.460
So all that I see is the ok and

41
00:02:48.460 --> 00:02:51.960
we can see that the server was able to
parse our form upload successfully.

