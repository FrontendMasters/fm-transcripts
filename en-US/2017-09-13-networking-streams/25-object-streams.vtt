WEBVTT

1
00:00:00.260 --> 00:00:04.360
We just left off on an example
using duplex streams.

2
00:00:04.360 --> 00:00:08.320
The next thing that I want to
talk about is object streams.

3
00:00:08.320 --> 00:00:12.720
So thus far, we've been dealing
with buffers and strings, but

4
00:00:12.720 --> 00:00:17.190
it's also possible to
use arbitrary objects.

5
00:00:17.190 --> 00:00:21.090
So, I think this is most useful when
you have something like a parser.

6
00:00:21.090 --> 00:00:26.260
And you want the parser to
produce objects from strings.

7
00:00:26.260 --> 00:00:29.890
And you also want it to sort
of respect back pressure.

8
00:00:29.890 --> 00:00:34.320
So you can have a whole pipeline of
operations that happen in a streaming

9
00:00:34.320 --> 00:00:39.680
fashion, without having to serialize,
and then deserialize a bunch of times.

10
00:00:39.680 --> 00:00:40.550
So, it's kind of,

11
00:00:40.550 --> 00:00:44.670
it can be useful for different
sorts of optimizations like that.

12
00:00:46.510 --> 00:00:51.330
To use objects streams,
you have to enable them

13
00:00:51.330 --> 00:00:56.140
with a special Object Mode
colon true in camel case.

14
00:00:56.140 --> 00:00:59.610
Or if you use through2,
you can use this method through.obj,

15
00:00:59.610 --> 00:01:01.220
and that does it for you.

16
00:01:01.220 --> 00:01:02.280
So, these are equivalent.

17
00:01:03.480 --> 00:01:08.720
Of course when you pipe an object
stream to somewhere else,

18
00:01:08.720 --> 00:01:15.200
that destination stream also has to
be capable of object streaming mode.

19
00:01:15.200 --> 00:01:17.180
So, you'll have to enable it separately.

20
00:01:20.190 --> 00:01:23.310
Yeah, why don't we go ahead and just poke
around a little bit with object streams.

21
00:01:23.310 --> 00:01:24.959
So, I'll make a new file obj.js.

22
00:01:27.735 --> 00:01:33.990
We'll use through2, and we'll just read
data from standardin for right now.

23
00:01:35.030 --> 00:01:38.720
I'm gonna cover some other modules that
will make some of this stuff a little bit

24
00:01:38.720 --> 00:01:43.278
more flexible and powerful later, but for
now, this, I think will do the trick.

25
00:01:43.278 --> 00:01:45.520
So there are two ways of doing it,
I'll just type them both out.

26
00:01:45.520 --> 00:01:48.200
So you can do objectMode true.

27
00:01:48.200 --> 00:01:51.694
This is the only way if you're
using the core stream.transform.

28
00:01:51.694 --> 00:01:56.996
Or you can do, Or

29
00:01:56.996 --> 00:02:00.177
you can do just through.obj,
is a nice little shorthand for that.

30
00:02:02.873 --> 00:02:09.229
And then in our write function, We can

31
00:02:12.517 --> 00:02:15.990
Turn those buffers into objects, why not?

32
00:02:15.990 --> 00:02:20.190
So why don't I keep a running
tally of bytes, and

33
00:02:20.190 --> 00:02:27.548
I'll just output the total number of bytes
that we've seen so far in the message.

34
00:02:27.548 --> 00:02:33.220
So can do, just like normal, just like
how you normally use the next function or

35
00:02:33.220 --> 00:02:38.160
this stop, push to produce values
into the output side of the stream.

36
00:02:38.160 --> 00:02:43.680
This time I'm gonna include length,
buffed out length,

37
00:02:43.680 --> 00:02:48.055
and then total will be size
plus equals about that length.

38
00:02:49.310 --> 00:02:50.850
You can put whatever you want in here.

39
00:02:53.020 --> 00:02:57.480
So this is gonna produce values, but
we haven't read the values anywhere yet.

40
00:02:57.480 --> 00:03:04.030
So to read the values, what we can do
is pipe into another object stream.

41
00:03:04.030 --> 00:03:08.220
So we'll call this, better name these
write functions a little bit differently.

42
00:03:08.220 --> 00:03:13.220
So this one will be write1, write2, sure.

43
00:03:14.900 --> 00:03:17.670
Okay, so
the next one we make is called write2.

44
00:03:19.020 --> 00:03:21.530
Now we're gonna get objects
as input not buffers.

45
00:03:22.545 --> 00:03:26.900
And we don't have to produce anything in
this one, because it's a terminal stream.

46
00:03:26.900 --> 00:03:30.650
There's another module called two two
that I'll get to in a moment, for

47
00:03:30.650 --> 00:03:32.710
doing that without a transform stream.

48
00:03:32.710 --> 00:03:37.380
But for now,
I'll just say console.log obj equals obj.

49
00:03:37.380 --> 00:03:41.390
So now if we run this program,
we should get a running tally

50
00:03:41.390 --> 00:03:45.540
of the total amount of data
that we've seen so far.

51
00:03:45.540 --> 00:03:50.450
And the other property in the object
should be the size of each piece

52
00:03:50.450 --> 00:03:52.300
of data that we write.

53
00:03:52.300 --> 00:03:54.690
So if I run it, lets say one.

54
00:03:54.690 --> 00:03:58.710
We get length of 4, because it
includes the new line at the end,

55
00:03:58.710 --> 00:04:00.801
O-N-E new line, and total 4.

56
00:04:00.801 --> 00:04:05.300
Two is also length 4 but
now we've seen 8 bytes.

57
00:04:05.300 --> 00:04:09.930
Three is gonna be 6 bytes, and
we've seen 14 bytes so far and so on.

58
00:04:09.930 --> 00:04:12.710
So, just kind of a fun thing to do.

59
00:04:12.710 --> 00:04:19.650
One other thing that we haven't used yet
is through, and also the core stream,

60
00:04:19.650 --> 00:04:26.490
core transform constructor,
can take end function.

61
00:04:26.490 --> 00:04:28.260
In core, it's called flush.

62
00:04:28.260 --> 00:04:29.920
It's the same thing.

63
00:04:29.920 --> 00:04:33.340
So, why don't we have a little
function that can happen at the end?

64
00:04:35.000 --> 00:04:40.840
So now maybe instead of just
calculating the stuff from objects,

65
00:04:40.840 --> 00:04:44.510
we can do something at
the end here as well.

66
00:04:44.510 --> 00:04:49.928
So maybe our object

67
00:04:49.928 --> 00:04:57.490
stream won't tally these itself, but
we can keep that in a piece of state.

68
00:04:57.490 --> 00:04:59.360
So I'm just moving some
stuff around to show.

69
00:05:00.480 --> 00:05:09.170
And then at the end we'll say,
size equal size.

70
00:05:10.400 --> 00:05:11.050
Make sense?

71
00:05:12.210 --> 00:05:18.110
Okay, so when I run this program now, it
should just printout the number of bytes,

72
00:05:18.110 --> 00:05:20.880
I mean, they're better ways to write
this that don't use object streams.

73
00:05:20.880 --> 00:05:24.210
But this is just an example
of how to use object streams.

74
00:05:24.210 --> 00:05:27.890
And later, we'll use some modules
that deal with object streams for

75
00:05:27.890 --> 00:05:30.830
us, that are a bit easier to use.

76
00:05:30.830 --> 00:05:33.090
So whoops.

77
00:05:34.440 --> 00:05:39.359
Right, shouldn't be called buff,
it should be obj.

78
00:05:43.693 --> 00:05:47.260
Now I do Ctrl D to end it and
I get the total link.

79
00:05:47.260 --> 00:05:49.940
So that's just kind of
an example of the end function.

80
00:05:49.940 --> 00:05:51.030
You can also listen for

81
00:05:51.030 --> 00:05:55.530
the end event, because transform
streams are both readable and writable.

82
00:05:55.530 --> 00:05:57.740
So there's an indent present.

83
00:05:57.740 --> 00:05:59.920
The end function is a little
bit easier sometimes.

84
00:06:01.380 --> 00:06:06.450
Another important thing to note
about readable streams is that,

85
00:06:06.450 --> 00:06:11.180
because you're pulling from them,
if you don't hook them up to an output,

86
00:06:11.180 --> 00:06:14.740
they will just sit there and
not do anything.

87
00:06:14.740 --> 00:06:17.940
So you'll never get an end event if
you don't actually read the data.

88
00:06:19.320 --> 00:06:23.250
Because they're only pulling from the data
source when you tell them to pull,

89
00:06:24.560 --> 00:06:25.450
something to keep in mind.

