WEBVTT

1
00:00:00.250 --> 00:00:03.440
Also, HTTP servers provide streams.

2
00:00:03.440 --> 00:00:07.400
In this case, instead of a duplex
stream that would have would

3
00:00:07.400 --> 00:00:09.420
sort of bundled the readable and
writable side.

4
00:00:10.420 --> 00:00:14.320
If you have a HTTP server
with a request and response,

5
00:00:14.320 --> 00:00:20.600
then the request object is readable, so
you can pipe from it to somewhere else.

6
00:00:20.600 --> 00:00:22.550
And the response object is writable.

7
00:00:22.550 --> 00:00:27.170
So you can write to that stream, or
you can pipe something into that stream.

8
00:00:28.730 --> 00:00:31.000
The opposite is true
when you make a request,

9
00:00:31.000 --> 00:00:34.580
which is like a client
connection with http.request, or

10
00:00:34.580 --> 00:00:38.930
when you use something like the request
package from NPM, or similar packages.

11
00:00:38.930 --> 00:00:43.080
So in that case, the request is
writable because you're the client and

12
00:00:43.080 --> 00:00:44.500
you're sending data.

13
00:00:44.500 --> 00:00:49.410
So you can send your post body form,
upload that kinda thing.

14
00:00:49.410 --> 00:00:53.420
And the response is gonna be readable
because it's the response from the server.

15
00:00:53.420 --> 00:00:55.380
So it's sort of like the flip side.

16
00:00:55.380 --> 00:00:59.490
Whether you're making, when you're
handling a server connection or

17
00:00:59.490 --> 00:01:04.112
whether you're sending
a request from an HTTP client.

18
00:01:04.112 --> 00:01:06.130
So while we go ahead and
play with those a little bit,

19
00:01:06.130 --> 00:01:07.650
cuz I think that's a good something.

20
00:01:07.650 --> 00:01:09.327
We've already done that
a little bit already.

21
00:01:09.327 --> 00:01:13.850
But as we'll make a server, and
then we'll make a client and

22
00:01:13.850 --> 00:01:19.240
maybe in our server will pipe from
a file to the response object.

23
00:01:19.240 --> 00:01:21.150
It's a fun thing to do.

24
00:01:21.150 --> 00:01:24.320
Of course, there's plenty of modules for
doing things like serving up static files

25
00:01:24.320 --> 00:01:28.540
that you should use instead, but
this is a good exercise nonetheless, okay?

26
00:01:28.540 --> 00:01:34.060
So we're gonna need the HTTP module, and
we're also gonna need the FS module.

27
00:01:34.060 --> 00:01:41.420
So we do http.createserver,
and pass in a function.

28
00:01:41.420 --> 00:01:46.290
The function is gonna take a request,
it's gonna receive a request instance and

29
00:01:46.290 --> 00:01:48.050
a response instance.

30
00:01:48.050 --> 00:01:50.940
And so, the request is readable.

31
00:01:50.940 --> 00:01:58.010
So if we have req.method === 'Post' or
input.

32
00:01:58.010 --> 00:02:05.467
Then, maybe we will pipe
the request to standard out.

33
00:02:05.467 --> 00:02:12.960
And once, the request is finished we
can maybe correct that end, okay?

34
00:02:12.960 --> 00:02:17.814
But otherwise let's read from a file and

35
00:02:17.814 --> 00:02:21.820
just pump it out to the response.

36
00:02:23.490 --> 00:02:24.890
So what files do we have?

37
00:02:24.890 --> 00:02:26.440
I guess we have this file cool.txt.

38
00:02:26.440 --> 00:02:27.800
That looks good.

39
00:02:27.800 --> 00:02:29.340
Maybe hello.txt.

40
00:02:29.340 --> 00:02:30.487
Sure.

41
00:02:30.487 --> 00:02:31.877
So we can do

42
00:02:31.877 --> 00:02:40.076
fs.createReadStream('hello.txt').pipe(r-
es).

43
00:02:40.076 --> 00:02:42.166
And you can also do things
like set headers and

44
00:02:42.166 --> 00:02:43.763
whatever probably how to do that.

45
00:02:43.763 --> 00:02:51.897
So do setHeader('content-type','
text/plain'), okay?

46
00:02:51.897 --> 00:02:55.095
So if I run this program now,

47
00:02:55.095 --> 00:02:59.770
I gotta listen on a port of course, okay?

48
00:02:59.770 --> 00:03:04.050
So now I can make this server run soon.

49
00:03:04.050 --> 00:03:06.800
Next, we need an http-client.

50
00:03:06.800 --> 00:03:11.800
We can use http.requests to do that,
and request and

51
00:03:11.800 --> 00:03:15.620
response are flipped in terms
of writable and readable.

52
00:03:15.620 --> 00:03:21.590
So we get the request
back from http.request.

53
00:03:21.590 --> 00:03:25.510
And then, you have to provide
it some things like maybe,

54
00:03:25.510 --> 00:03:29.620
we'll send a POST method first, and
then, we can send a get method in a sec.

55
00:03:30.820 --> 00:03:35.970
So url, and then,
we get back the response.

56
00:03:37.080 --> 00:03:41.299
So, we can print out the res.statusCode.

57
00:03:41.299 --> 00:03:45.910
And then, we'll pipe the response
out to standard out.

58
00:03:45.910 --> 00:03:49.460
Now, it's a post, so
we need to write some data.

59
00:03:49.460 --> 00:03:52.650
So, we could call that write and
then call that end.

60
00:03:52.650 --> 00:03:56.397
But there's a nice shortcut that
I mentioned in the part about

61
00:03:56.397 --> 00:04:00.296
writable streams where you can
just provide the data like that.

62
00:04:00.296 --> 00:04:02.542
Just in one go, all right?

63
00:04:02.542 --> 00:04:08.830
So, again, we have our server,
whoops, which looks like this.

64
00:04:09.930 --> 00:04:14.270
If we get a post, then we're just
gonna dump the data to standard out.

65
00:04:14.270 --> 00:04:17.690
And then, we'll, once the request
is finished, we'll print, okay?

66
00:04:18.960 --> 00:04:20.910
And otherwise,

67
00:04:20.910 --> 00:04:26.040
we're gonna take data from hello.txt,
and we'll pipe it to the response.

68
00:04:26.040 --> 00:04:27.370
This is what the server does.

69
00:04:28.450 --> 00:04:29.130
So I'll run it.

70
00:04:30.350 --> 00:04:32.360
Now, we can run our client program,

71
00:04:32.360 --> 00:04:37.562
which sends a POST request
to slash on our server.

72
00:04:37.562 --> 00:04:41.547
Sorry, I've actually gotta
put in a real url here.

73
00:04:43.703 --> 00:04:45.790
5000/.

74
00:04:45.790 --> 00:04:48.750
And then,
we're gonna print out the status code, and

75
00:04:48.750 --> 00:04:50.800
we're gonna pipe everything
else to standard out.

76
00:04:52.320 --> 00:04:55.442
We should get the message.

77
00:04:58.948 --> 00:05:03.405
Or maybe it's right,
I think actually with the http.request.

78
00:05:03.405 --> 00:05:07.853
You've got to provide the host and
the port separately for

79
00:05:07.853 --> 00:05:11.860
some reason, and it's,
maybe it works like this.

80
00:05:15.126 --> 00:05:15.699
There we go.

81
00:05:15.699 --> 00:05:16.710
So that's what I expected.

82
00:05:17.710 --> 00:05:20.970
So it says, okay, and
then if we look over here to our server,

83
00:05:20.970 --> 00:05:25.580
we see the message that we sent from
the client program that we just wrote.

84
00:05:26.790 --> 00:05:28.590
So that's a post program.

85
00:05:28.590 --> 00:05:30.770
The other thing that our server does,

86
00:05:30.770 --> 00:05:35.410
is our server can respond
with the file hello.txt.

87
00:05:35.410 --> 00:05:37.980
So we need either to modify
our existing client or

88
00:05:37.980 --> 00:05:39.790
to make a new client program to do that.

89
00:05:39.790 --> 00:05:46.532
So I'm gonna move http-client.js,
call it http-post-client.js.

90
00:05:46.532 --> 00:05:51.653
And then,
we can copy that to be http-get-client.js.

91
00:05:55.355 --> 00:05:58.190
So now, we can make a get request.

92
00:05:58.190 --> 00:06:03.040
And we don't need to end
the request because the request

93
00:06:03.040 --> 00:06:07.610
object is not a writable stream
when we send a get request.

94
00:06:08.900 --> 00:06:14.200
So if I run the server again, whoops.

95
00:06:14.200 --> 00:06:18.930
And now, if I run the get client,

96
00:06:18.930 --> 00:06:22.370
then or maybe,

97
00:06:22.370 --> 00:06:26.360
I do need to end it actually,
because I guess you do need to end it.

98
00:06:26.360 --> 00:06:27.700
That's interesting.

99
00:06:27.700 --> 00:06:31.826
Anyways, here I get the status code
is printed out in our client program.

100
00:06:31.826 --> 00:06:36.718
And then, the response is pipe to standard
out which is from that file hello.txt.

101
00:06:36.718 --> 00:06:39.770
So just shows you what's up with that.

102
00:06:40.780 --> 00:06:43.459
Gonna go ahead and
add these to the get repo.

