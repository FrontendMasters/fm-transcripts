WEBVTT

1
00:00:00.210 --> 00:00:03.760
So another module I'm gonna show
because sometimes this is really handy.

2
00:00:03.760 --> 00:00:05.750
I find that this module, collect-stream,

3
00:00:05.750 --> 00:00:09.670
is really useful when doing
things like in unit tests.

4
00:00:09.670 --> 00:00:12.850
When you just have a streaming
interface and you wanna test it,

5
00:00:12.850 --> 00:00:16.970
but you don't wanna have to write a bunch
of stream glue to hook it all together.

6
00:00:16.970 --> 00:00:21.814
If you just wanna save it all to an array
and then do a deep equality test on your

7
00:00:21.814 --> 00:00:25.135
array, you can use this
module collect-stream.

8
00:00:25.135 --> 00:00:28.110
It's sort of like concat-stream, but

9
00:00:28.110 --> 00:00:32.270
it gives you an array of the chunks
instead of a single thing.

10
00:00:32.270 --> 00:00:36.610
So it's really useful for stuff like
object streams or what have you.

11
00:00:36.610 --> 00:00:43.212
Here's a little example you can run that
will take lines of JSON from standard in,

12
00:00:43.212 --> 00:00:47.914
turn them to objects, and
collect it all in one big array.

13
00:00:47.914 --> 00:00:52.832
Another package that's super
useful is if you wanna implement

14
00:00:52.832 --> 00:00:57.294
readable streams,
you could use the core readable API.

15
00:00:57.294 --> 00:00:59.303
But it's actually really difficult, and

16
00:00:59.303 --> 00:01:01.935
I don't really recommend it
unless you really need to.

17
00:01:01.935 --> 00:01:05.121
Instead, you can use a lot
of these util packages and

18
00:01:05.121 --> 00:01:07.666
sort of compose what you need from there.

19
00:01:07.666 --> 00:01:10.230
One of these is called from to.

20
00:01:10.230 --> 00:01:15.580
It takes a function as an argument and
the function

21
00:01:15.580 --> 00:01:21.695
is called whenever a downstream consumer
that you're piping into needs data.

22
00:01:21.695 --> 00:01:25.177
So that downstream consumer
will call its next function,

23
00:01:25.177 --> 00:01:28.595
which will trigger your
function to generate some data.

24
00:01:28.595 --> 00:01:31.089
So by default in Node,
you get the size and

25
00:01:31.089 --> 00:01:35.172
you also get a function to call when
you're ready to send more data.

26
00:01:35.172 --> 00:01:36.712
It looks like this.

27
00:01:36.712 --> 00:01:41.550
So if you have some messages
pre-baked like this, of course.

28
00:01:41.550 --> 00:01:45.000
And a more practical example might
come from a file descriptor,

29
00:01:45.000 --> 00:01:48.710
it might come from a hardware device,
it might come from all kinds of places.

30
00:01:48.710 --> 00:01:53.660
But here's how you can more
easily assemble a readable

31
00:01:53.660 --> 00:01:57.790
stream rather than having to wade
through the Node core docks about

32
00:01:57.790 --> 00:02:01.700
all of the intricate ways that you have to
set it up like with the readable event.

33
00:02:01.700 --> 00:02:06.359
And then you have to implement
a read function yourself.

34
00:02:06.359 --> 00:02:08.476
I like this way of doing it a lot better.

35
00:02:08.476 --> 00:02:14.409
to2 is really handy when you have
something, like if you're using through2,

36
00:02:14.409 --> 00:02:20.183
but you're not piping it anywhere,
you can just swap out through2 for to2.

37
00:02:20.183 --> 00:02:23.429
Which is hard to say out loud,
it sounds very silly.

38
00:02:23.429 --> 00:02:29.993
But to2 implements just
the writable side of the stream.

39
00:02:29.993 --> 00:02:32.417
So you can pipe into it, but
you can't pipe out of it.

40
00:02:32.417 --> 00:02:37.217
So if you wanna implement a module that
exposes an interface, for example,

41
00:02:37.217 --> 00:02:42.520
that only provides the writable side of
a connection, you can use this package.

42
00:02:42.520 --> 00:02:47.110
So we had some of these already,
so why don't I go in and

43
00:02:47.110 --> 00:02:50.270
I'll just swap out one
of the through packages.

44
00:02:50.270 --> 00:02:56.040
I think the line count one
was a good example of that.

45
00:02:56.040 --> 00:02:59.730
So here we have through, but
we're not piping it anywhere.

46
00:02:59.730 --> 00:03:06.028
So we could just as well
use the to package.

47
00:03:06.028 --> 00:03:11.139
Select that, if I run it,
then it works just the same.

48
00:03:11.139 --> 00:03:15.573
It's good if you do have something
that's only gonna be a writable or

49
00:03:15.573 --> 00:03:20.542
only gonna be a readable stream and
you have a module that you're either using

50
00:03:20.542 --> 00:03:24.100
internally in something or
you're exposing it.

51
00:03:24.100 --> 00:03:28.639
As soon as other people start using it,
they're probably gonna try to wrap it in

52
00:03:28.639 --> 00:03:31.640
all of these ways that you
didn't intend them to do.

53
00:03:31.640 --> 00:03:35.560
And then if you change it later,
if you get rid of the readable side,

54
00:03:35.560 --> 00:03:38.330
their code will break
because it was set up wrong.

55
00:03:38.330 --> 00:03:42.177
There's a bunch of Gulp plugins
that did this with Browserify.

56
00:03:42.177 --> 00:03:44.329
Cuz I was doing the same thing.

57
00:03:44.329 --> 00:03:46.891
I just had a through package cuz whatever.

58
00:03:46.891 --> 00:03:51.681
But that broke some stuff from some
really poorly written plugins,

59
00:03:51.681 --> 00:03:55.979
I think, in the Gulp ecosystem
at one point, as an example.

60
00:03:55.979 --> 00:03:58.693
So to2 is very handy for that.

