WEBVTT

1
00:00:00.500 --> 00:00:05.500
Okay, so one thing that we can
try is we can try to speak

2
00:00:05.500 --> 00:00:08.800
with our typing meat fingers,
the HTTP protocol.

3
00:00:08.800 --> 00:00:15.400
So this is how your browser
communicates with a web server.

4
00:00:16.680 --> 00:00:19.910
It's a fairly,
I don't want to call it a simple protocol,

5
00:00:19.910 --> 00:00:22.650
but it's an easy protocol to type out.

6
00:00:22.650 --> 00:00:27.910
Because HTTP, as we know it today,
evolved from something a lot simpler and

7
00:00:27.910 --> 00:00:32.440
it still uses fairly readable,
fairly understandable and

8
00:00:32.440 --> 00:00:36.460
fairly tolerant, text based format.

9
00:00:38.130 --> 00:00:44.079
The main thing to know about HTTP is that
it operates on different kinds of verbs.

10
00:00:45.260 --> 00:00:49.690
So the main idea, and of course,
you can take these verbs and

11
00:00:49.690 --> 00:00:51.460
use them for whatever purpose you want.

12
00:00:51.460 --> 00:00:55.680
But the way that you're
supposed to use it is,

13
00:00:55.680 --> 00:01:00.480
you typically use a GET request to
fetch something to retrieve a document.

14
00:01:01.570 --> 00:01:07.020
You typically use a POST to send

15
00:01:07.020 --> 00:01:12.340
data like a form submission and you're
supposed to use it to upload a file.

16
00:01:12.340 --> 00:01:14.170
Although it's also common
to use a POST for that,

17
00:01:14.170 --> 00:01:19.810
because different kinds of network
proxies and things of that sort will

18
00:01:19.810 --> 00:01:23.130
sort of drop anything that's not a GET or
a POST request a lot of the time.

19
00:01:24.440 --> 00:01:28.144
You can fetch metadata with HEAD,
there's also delete and

20
00:01:28.144 --> 00:01:32.751
options and all kinds of other stuff
that's kind of less used these days.

21
00:01:35.228 --> 00:01:40.162
The other thing that we need to know about
HTTP is it works on this sort of key value

22
00:01:40.162 --> 00:01:41.630
idea about headers.

23
00:01:41.630 --> 00:01:46.840
So how this looks is on the left,
you have a key,

24
00:01:46.840 --> 00:01:51.380
it's just some string and
then you have a colon.

25
00:01:51.380 --> 00:01:55.890
And usually a space but
it's not required and

26
00:01:55.890 --> 00:01:59.980
then you have the values, so an example
of what that might look like is.

27
00:01:59.980 --> 00:02:04.309
Here we have an HTTP verb,
that's gonna GET /, so

28
00:02:04.309 --> 00:02:07.380
you could do this right now if you like.

29
00:02:07.380 --> 00:02:12.335
You could type in nc google.com 80,

30
00:02:12.335 --> 00:02:16.846
you could try GET / HTTP/1.0.

31
00:02:16.846 --> 00:02:21.267
And then this is gonna be
a header Host: google.com.

32
00:02:21.267 --> 00:02:26.654
And what this host header
does is it tells the server

33
00:02:26.654 --> 00:02:32.310
google.com what a domain
you're trying to access.

34
00:02:32.310 --> 00:02:36.410
Because when you connect to a server,

35
00:02:37.890 --> 00:02:41.330
that server might actually
be serving multiple domains.

36
00:02:41.330 --> 00:02:44.380
Or it might be like a load
balancer that needs to know

37
00:02:44.380 --> 00:02:48.730
which server to sort of forward with
your connection to behind the scenes.

38
00:02:48.730 --> 00:02:52.110
So that's what the host header does, and

39
00:02:52.110 --> 00:02:55.170
then hit return twice as well,
after you do the host.

40
00:02:55.170 --> 00:03:00.220
Because that's how the block of the HTTP
verb in the headers is separated from.

41
00:03:01.320 --> 00:03:05.141
That's how that's how the server
knows that you're done kind of, so

42
00:03:05.141 --> 00:03:06.323
let's try that out.

43
00:03:08.521 --> 00:03:14.114
So the GET / HTTP/1.0 and
then Host google.com, Enter,

44
00:03:14.114 --> 00:03:20.150
Enter and I get back a response
from the server, yeah, a question?

45
00:03:20.150 --> 00:03:23.940
&gt;&gt; Yeah, just was that whole thing
the header, like including the GET and

46
00:03:23.940 --> 00:03:27.110
HTTP version, or just the host?

47
00:03:27.110 --> 00:03:32.480
&gt;&gt; This part is the header so you can
have multiple different headers and

48
00:03:32.480 --> 00:03:34.620
then once you're done
specifying the headers.

49
00:03:34.620 --> 00:03:39.970
Then you do two new lines, you hit Enter
twice, yeah, double tap the Enter.

50
00:03:39.970 --> 00:03:44.760
And then, so we get back in this
case a response from google.com.

51
00:03:44.760 --> 00:03:47.513
And Google, in this case, is sending, so

52
00:03:47.513 --> 00:03:51.110
this is the status code
right here after HTTP/1.0.

53
00:03:51.110 --> 00:03:54.841
So it sent us 301,
which is the HTTP code for redirect,

54
00:03:54.841 --> 00:04:00.790
I think a permanent redirect, if I'm
not mistaken, yeah, moved permanently.

55
00:04:00.790 --> 00:04:03.590
And then Google is sending some
HTTP headers of its own, so

56
00:04:03.590 --> 00:04:05.880
these are all of the headers right here.

57
00:04:05.880 --> 00:04:09.961
One of these headers
called location tells us,

58
00:04:09.961 --> 00:04:15.077
you need to go over here to HTTP,
whatever, www.google.com.

59
00:04:15.077 --> 00:04:15.915
Why do you have to do that?

60
00:04:15.915 --> 00:04:18.680
I don't know,
that's just how they set it up.

61
00:04:18.680 --> 00:04:24.340
It also tells us some other things like
the content type of this document,

62
00:04:24.340 --> 00:04:32.100
which is HTML in UTF-8, tells us some
other stuff like the date, I guess.

63
00:04:32.100 --> 00:04:36.610
Sometimes that's useful for doing cache
control, different kinds of expired

64
00:04:36.610 --> 00:04:42.640
different kinds of knowing when you ought
to fetch the next version of something.

65
00:04:42.640 --> 00:04:47.377
Because the server might know
something about when the new documents

66
00:04:47.377 --> 00:04:48.526
are gonna be up.

67
00:04:48.526 --> 00:04:52.851
And another stuff,
they aren't too important usually,

68
00:04:52.851 --> 00:04:58.522
content type is in location and content
length are the most important ones.

69
00:04:58.522 --> 00:05:01.820
There's also ways of doing
chunked encodings, so

70
00:05:01.820 --> 00:05:07.087
in this case, Google is telling us
that the body which is down here.

71
00:05:07.087 --> 00:05:11.690
If I scroll down a little bit
is gonna be 209 bytes, so

72
00:05:11.690 --> 00:05:17.740
it hits return twice on
its machine keyboard.

73
00:05:17.740 --> 00:05:21.190
First right here with this empty line, and
then it starts sending its response, so

74
00:05:21.190 --> 00:05:22.930
this is all of the HTML that it sent us.

75
00:05:24.750 --> 00:05:30.260
This particular thing is,
in case your browser doesn't know

76
00:05:30.260 --> 00:05:33.580
how to understand the location header,
then you'll get a link you can click on.

77
00:05:36.900 --> 00:05:40.938
Okay, so we can do some other stuff,
for example,

78
00:05:40.938 --> 00:05:46.160
if you wanna fetch other kinds of
documents instead of getting /,

79
00:05:46.160 --> 00:05:51.460
we could do something
like GET /favicon.ico.

80
00:05:51.460 --> 00:05:53.280
For example, that's usually defined,

81
00:05:53.280 --> 00:05:56.150
I think I have one of those on
substack.net if you wanna try that.

82
00:05:57.300 --> 00:06:02.880
So if I do GET /favicon.ico HTTP /1.0

83
00:06:02.880 --> 00:06:08.150
Host: substack.net and Enter Enter.

84
00:06:09.560 --> 00:06:14.090
I don't actually have one cuz I get
this status code 404 which you might

85
00:06:14.090 --> 00:06:17.810
recognize from using the internet,
file not found.

86
00:06:17.810 --> 00:06:21.063
So I guess I don't have
one that's /favicon.ico.

87
00:06:21.063 --> 00:06:25.508
A lot of websites do, you'll probably get
a bunch of binary garbage in your terminal

88
00:06:25.508 --> 00:06:29.600
because it's probably like a PNG file or
something like that.

89
00:06:29.600 --> 00:06:32.680
Or maybe it's like a Windows
bitmap cuz it's what ICOs are.

