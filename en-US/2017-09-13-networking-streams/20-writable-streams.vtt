WEBVTT

1
00:00:00.260 --> 00:00:03.112
For writable streams,
we have some methods.

2
00:00:03.112 --> 00:00:06.658
We've got things like .write,
which we've seen.

3
00:00:06.658 --> 00:00:12.754
There's also .end, and this is how you
put data into the writable stream.

4
00:00:12.754 --> 00:00:17.158
You can give end a buffer if you like,
and that's basically shorthand for

5
00:00:17.158 --> 00:00:21.206
doing a write with that buffer and
then calling an int immediately,

6
00:00:21.206 --> 00:00:23.210
just a nice little convenience.

7
00:00:25.190 --> 00:00:28.544
Writable streams emit a finish event
when they're done writing data.

8
00:00:28.544 --> 00:00:30.039
So that's important to know about as well.

9
00:00:32.192 --> 00:00:33.112
So let's go ahead and

10
00:00:33.112 --> 00:00:35.931
make a quick little writable stream
here to just test things out.

11
00:00:35.931 --> 00:00:41.182
So we'll call it w.js, and
we use fs.createWriteStream.

12
00:00:43.000 --> 00:00:48.855
So fs.createWriteStream('cool.txt').

13
00:00:48.855 --> 00:00:54.259
And then we'll just w.write('hi\n'),

14
00:00:54.259 --> 00:00:59.128
w.write('wow\n'), w.end().

15
00:00:59.128 --> 00:01:02.329
That's just an example for
what a writable stream looks like.

16
00:01:02.329 --> 00:01:05.610
And maybe we'll also listen for
the finish event.

17
00:01:05.610 --> 00:01:09.761
Just so I can prove to you
that there's a finish event.

18
00:01:09.761 --> 00:01:11.770
You only get one finish event.

19
00:01:11.770 --> 00:01:17.080
So there's a method on
the Node.js event emitter API

20
00:01:17.080 --> 00:01:19.890
called once that will only listen for
one of them.

21
00:01:19.890 --> 00:01:24.654
There should only ever be a single event,
so either on or once is fine.

22
00:01:24.654 --> 00:01:29.060
So I'll just print out FINISHED.

23
00:01:29.060 --> 00:01:33.740
Sometimes you might not wanna do
something until a writable stream

24
00:01:33.740 --> 00:01:35.850
has actually finished writing the results.

25
00:01:35.850 --> 00:01:40.720
So a good example of that is if
you're writing out to a log file or

26
00:01:40.720 --> 00:01:43.950
an important, if you're writing
some JSON to a file, then you wanna

27
00:01:43.950 --> 00:01:47.500
make sure that you've actually written
everything until you do the next step.

28
00:01:47.500 --> 00:01:49.982
Because maybe the next step
is just gonna read that file.

29
00:01:49.982 --> 00:01:55.003
And again, you're not really
guaranteed immediately after

30
00:01:55.003 --> 00:01:59.745
you end writable stream that
it's gonna be finished yet.

31
00:01:59.745 --> 00:02:03.768
Because there could be other stuff
happening, at the operating system level,

32
00:02:03.768 --> 00:02:05.038
and all kinds of levels.

33
00:02:05.038 --> 00:02:08.811
So far in this program now,
we get the event finished, and

34
00:02:08.811 --> 00:02:12.970
there should be a new file called
cool.txt that has the output.

35
00:02:16.545 --> 00:02:18.835
So we'll add that to the git.

