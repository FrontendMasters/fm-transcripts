WEBVTT

1
00:00:00.250 --> 00:00:03.917
One of the other things, one of the other
kinds of streams, is the transform stream.

2
00:00:03.917 --> 00:00:08.735
Transform streams have all of the methods
of readable and writable streams.

3
00:00:08.735 --> 00:00:14.177
So you can call .pipe on them,
and you can pipe to them.

4
00:00:14.177 --> 00:00:17.008
And all of the events are there as well.

5
00:00:17.008 --> 00:00:21.756
So there's the finished event, there's
the readable event, end event, everything.

6
00:00:21.756 --> 00:00:27.898
And you place the transform
stream between two other streams.

7
00:00:27.898 --> 00:00:33.399
And you can also chain transform
streams in between a source and a sync.

8
00:00:35.727 --> 00:00:40.590
Transform streams, I think, are more
intuitive than the next kind of stream,

9
00:00:40.590 --> 00:00:42.198
which is a duplex stream.

10
00:00:42.198 --> 00:00:45.846
So duplex streams you can think of as,

11
00:00:45.846 --> 00:00:50.520
imagine if you had a separate
readable stream and

12
00:00:50.520 --> 00:00:55.536
a separate writable stream,
but they're just sort

13
00:00:55.536 --> 00:01:00.327
of glued together into
the same stream instance.

14
00:01:00.327 --> 00:01:02.005
You can also sort of think
of them like a telephone.

15
00:01:02.005 --> 00:01:05.864
Like with a telephone, you can talk
whenever you want, the other person can

16
00:01:05.864 --> 00:01:09.556
listen to whatever they want,
they could also talk whenever they want.

17
00:01:09.556 --> 00:01:12.306
So both sides can be
talking at the same time.

18
00:01:12.306 --> 00:01:18.156
And the flow of information
is inherently bidirectional.

19
00:01:21.559 --> 00:01:24.743
And again,
whenever you see something like this,

20
00:01:24.743 --> 00:01:28.670
a.pipe(stream).pipe(a), or
whatever it looks like,

21
00:01:28.670 --> 00:01:33.496
this piping a stream into itself, there
could even be a few steps in between.

22
00:01:33.496 --> 00:01:36.291
But when you basically have
this kind of architecture,

23
00:01:36.291 --> 00:01:38.260
you're dealing with a duplex stream.

24
00:01:39.270 --> 00:01:44.184
And some examples of duplex stream in
Node core are things like if you create

25
00:01:44.184 --> 00:01:47.929
a server, like a TCP server
with net.createServer, or

26
00:01:47.929 --> 00:01:52.937
if you create a TCP connection with
net.connect, you get a duplex stream.

27
00:01:52.937 --> 00:01:56.316
So you can read and write to it,
and so can the other side.

28
00:01:56.316 --> 00:02:00.540
There are more examples of
these in Node core, as well.

