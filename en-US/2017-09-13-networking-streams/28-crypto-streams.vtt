WEBVTT

1
00:00:00.146 --> 00:00:01.884
There's some more things.

2
00:00:01.884 --> 00:00:03.790
We've already, of course,
seen some of these.

3
00:00:03.790 --> 00:00:07.176
I wasn't expecting, it's early, but

4
00:00:07.176 --> 00:00:12.262
there are a lot of core methods
in crypto that are streaming.

5
00:00:12.262 --> 00:00:15.820
Like doing hashing, signing verification.

6
00:00:15.820 --> 00:00:20.012
We already saw creating symmetric ciphers

7
00:00:21.696 --> 00:00:25.514
Deciphering as well,
as the streaming interface.

8
00:00:25.514 --> 00:00:27.663
This is a better method
to use that we used.

9
00:00:27.663 --> 00:00:32.522
We used this createCipherIv,
which is the sequence-based encoding, so

10
00:00:32.522 --> 00:00:36.545
that would protect you against
some kinds of replay attacks.

11
00:00:36.545 --> 00:00:40.685
Why don't we go ahead and
use crypto.createHash to make a little

12
00:00:40.685 --> 00:00:44.159
program that's gonna hash
the results of some input.

13
00:00:44.159 --> 00:00:48.527
And maybe we can also play
around with zlib a little bit.

14
00:00:48.527 --> 00:00:50.167
So let's just make these, and

15
00:00:50.167 --> 00:00:53.899
then I'll give all of you a chance to
poke around at these APIs as well.

16
00:00:53.899 --> 00:01:01.813
So, If we want to create a program
that just computes the hash,

17
00:01:01.813 --> 00:01:07.778
we can require createHash
from ('crypto').createHash.

18
00:01:09.336 --> 00:01:13.284
So I believe you give
createHash an algorithm name,

19
00:01:13.284 --> 00:01:16.437
like sha512, think it's like that.

20
00:01:16.437 --> 00:01:22.357
So we can Pipe, stdin into that.

21
00:01:22.357 --> 00:01:23.609
It's an easy default.

22
00:01:23.609 --> 00:01:28.378
And then pipe the hash back out to stdout,
if we like.

23
00:01:28.378 --> 00:01:32.258
And I think now we've got a little
program, give it some input.

24
00:01:32.258 --> 00:01:33.647
And we get back some output.

25
00:01:33.647 --> 00:01:38.000
Of course, this is binary output, so
maybe it's not the nicest to look at.

26
00:01:38.000 --> 00:01:42.167
So we can modify our program
to use a hex encoding, or

27
00:01:42.167 --> 00:01:45.593
a base-64 encoding, or what have you.

28
00:01:45.593 --> 00:01:51.374
So now, If I do Ctrl+B,
we get a nice hash.

29
00:01:51.374 --> 00:01:56.920
Just to verify that this works correctly,
we can take a known string,

30
00:01:56.920 --> 00:02:00.868
like abcd, without a new line,
and get the hash.

31
00:02:00.868 --> 00:02:02.850
Hang on,
it's a little bit hard to see like that.

32
00:02:02.850 --> 00:02:03.939
So do.

33
00:02:03.939 --> 00:02:06.831
Okay, so this is our hash for
the string abcd.

34
00:02:06.831 --> 00:02:11.308
If I do the same thing for shasum -a 512,

35
00:02:11.308 --> 00:02:15.183
I think works, we get the same thing.

36
00:02:15.183 --> 00:02:18.964
So our program is working
like we would expect, cool.

37
00:02:18.964 --> 00:02:20.154
Just add that.

38
00:02:21.888 --> 00:02:26.631
If you ever need to do something, like if
you have if you implement something like

39
00:02:26.631 --> 00:02:28.653
a file upload on your HTTP server,

40
00:02:28.653 --> 00:02:33.078
a really useful thing to do is to take
the hash of any type of incoming files.

41
00:02:33.078 --> 00:02:37.113
Because then if someone ever uploads
the same file, either by mistake or

42
00:02:37.113 --> 00:02:40.420
maybe the network connection was flaky so
they do it again,

43
00:02:40.420 --> 00:02:44.474
you could save some space by only
storing a single copy by using the hash.

44
00:02:45.548 --> 00:02:49.546
Because if someone uploads the same file
twice, the hash will be the same, so

45
00:02:49.546 --> 00:02:51.343
you don't have to store it again.

46
00:02:51.343 --> 00:02:56.230
And the hashes will check that
property for you automatically.

