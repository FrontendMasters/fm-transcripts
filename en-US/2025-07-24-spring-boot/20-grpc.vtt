WEBVTT

1
00:00:00.080 --> 00:00:00.960
&gt;&gt; Josh Long: GraphQL is really good.

2
00:00:00.960 --> 00:00:02.320
I love GraphQL.

3
00:00:02.320 --> 00:00:06.064
But, you know, if you're doing really
highly efficient kind of services,

4
00:00:06.064 --> 00:00:08.560
you probably care about
something like grpc.

5
00:00:08.560 --> 00:00:11.440
And so we're going to build
a GRPC service this time.

6
00:00:11.440 --> 00:00:15.248
The problem with GRPC is, I mean,
it's not a problem, it's not a feature,

7
00:00:15.248 --> 00:00:16.960
it's not a bug, it's a feature.

8
00:00:16.960 --> 00:00:18.400
Right?

9
00:00:18.400 --> 00:00:19.680
It's schema first.

10
00:00:19.680 --> 00:00:22.560
Very much like the GraphQL stuff
we've just looked at here.

11
00:00:22.560 --> 00:00:23.920
It's schema first.

12
00:00:23.920 --> 00:00:27.850
And it's also, it's a little overbearing,
if you ask me.

13
00:00:27.850 --> 00:00:30.130
It really requires you to change
the way you write your code.

14
00:00:30.130 --> 00:00:32.130
So let's do this.

15
00:00:32.130 --> 00:00:33.022
We're going to go over here.

16
00:00:33.022 --> 00:00:35.370
We went to start.spring today,
we chose GRPC.

17
00:00:35.370 --> 00:00:39.050
That was nice enough to initialize
us with a folder here called Proto.

18
00:00:39.050 --> 00:00:44.093
And in the build we have down here
we have the GRPC dependencies and

19
00:00:44.093 --> 00:00:49.686
the spring GRPC project,
Spring GRPC testing, and most importantly,

20
00:00:49.686 --> 00:00:55.840
a whole bunch of different maven
plugins to support configuring that.

21
00:00:55.840 --> 00:00:57.420
So let's do our last thing here.

22
00:00:57.420 --> 00:01:02.216
Okay, we're gonna say users.proto, okay?

23
00:01:02.216 --> 00:01:03.920
We're gonna create a GRPC file.

24
00:01:03.920 --> 00:01:07.256
The syntax will be Proto 3,

25
00:01:07.256 --> 00:01:11.843
we're going to say service users, and

26
00:01:11.843 --> 00:01:19.850
it'll be a RPC service that'll
define a collection of users.

27
00:01:19.850 --> 00:01:24.474
Now, in grpc, if you want to have
a collection of things, there's no like,

28
00:01:24.474 --> 00:01:25.410
array syntax.

29
00:01:25.410 --> 00:01:29.250
You just have to define a thing that
defines a collection of other things.

30
00:01:29.250 --> 00:01:30.950
Right?

31
00:01:30.950 --> 00:01:32.410
And in GRPC you also.

32
00:01:34.170 --> 00:01:35.764
What is happening with this?

33
00:01:35.764 --> 00:01:36.530
User service.

34
00:01:36.530 --> 00:01:37.030
Yeah.

35
00:01:38.250 --> 00:01:42.210
Okay, so in grpc,
everything needs to be accounted for.

36
00:01:42.210 --> 00:01:43.481
So you need to tell the,

37
00:01:43.481 --> 00:01:47.690
the protocol what is the offset of a given
type relative to the root of the type.

38
00:01:47.690 --> 00:01:55.290
So int32id equals one string name
equals two string description.

39
00:01:55.290 --> 00:01:57.130
Wait, no, what is the payload there?

40
00:01:57.130 --> 00:02:03.201
It's ID, name, username, okay?

41
00:02:03.201 --> 00:02:04.250
Equals 3, there we go.

42
00:02:04.250 --> 00:02:06.901
So I'm just going to
return those three and

43
00:02:06.901 --> 00:02:10.550
we'll say users returns
a collection of users.

44
00:02:10.550 --> 00:02:16.264
We'll have an endpoint here, RPC style, as
opposed to fire and forget, whatever, rpc.

45
00:02:16.264 --> 00:02:23.750
And we're gonna call this all,
which returns this, right?

46
00:02:24.950 --> 00:02:26.229
So there's that.

47
00:02:26.229 --> 00:02:27.510
And it's going to take nothing in it.

48
00:02:27.510 --> 00:02:28.602
It's going to be a void.

49
00:02:28.602 --> 00:02:30.390
So there's no default syntax there.

50
00:02:30.390 --> 00:02:33.488
So I'm going to say Google protobuf empty.

51
00:02:33.488 --> 00:02:35.139
I'll pass that in here, okay?

52
00:02:37.294 --> 00:02:40.528
Google.protobuf.Empty, there you go.

53
00:02:40.528 --> 00:02:43.200
So that's my service,
my one endpoint called all.

54
00:02:43.200 --> 00:02:44.440
Maybe I'll just call it Users.

55
00:02:44.440 --> 00:02:45.748
&gt;&gt; Speaker 2: Sure.

56
00:02:45.748 --> 00:02:50.160
&gt;&gt; Josh Long: And user is the payload
type and there's the collection of them.

57
00:02:50.160 --> 00:02:53.132
Now, because this is going to
be transpiled into Java code,

58
00:02:53.132 --> 00:02:55.360
I need to provide some options.

59
00:02:55.360 --> 00:02:56.440
So what is the outer name?

60
00:02:56.440 --> 00:02:57.240
What is the package?

61
00:02:57.240 --> 00:02:57.811
First of all,

62
00:02:57.811 --> 00:03:00.440
that I want the code generated to
be the generated codes I live in.

63
00:03:00.440 --> 00:03:06.350
Well, com example.web.grpc sure, why not?

64
00:03:06.350 --> 00:03:07.066
Right.

65
00:03:07.066 --> 00:03:11.576
And then java_outer_classname,

66
00:03:11.576 --> 00:03:16.830
I'm gonna call this UsersProto, okay?

67
00:03:16.830 --> 00:03:20.750
And then finally Java
multiple files is true.

68
00:03:21.790 --> 00:03:24.150
Okay, there's my schema.

69
00:03:24.150 --> 00:03:26.110
Now I need to compile that schema.

70
00:03:26.110 --> 00:03:28.378
So maven package.

71
00:03:37.493 --> 00:03:41.730
Users is not a message type, I disagree.

72
00:03:47.218 --> 00:03:49.490
Let me just do all.

73
00:03:49.490 --> 00:03:51.410
&gt;&gt; Speaker 2: Gosh, so tedious.

74
00:03:53.100 --> 00:03:55.340
&gt;&gt; Josh Long: Okay, so
that's done some code generation.

75
00:03:55.340 --> 00:03:58.620
If you look at the target directory,
go to the generated sources.

76
00:03:58.620 --> 00:04:00.220
There's a folder called protobuf.

77
00:04:00.220 --> 00:04:04.300
There you'll find two subfolders,
grpc, Java and Java.

78
00:04:04.300 --> 00:04:06.830
In Intellij you need to mark
them as source code roots,

79
00:04:06.830 --> 00:04:09.340
otherwise they won't get
picked up by your editor.

80
00:04:09.340 --> 00:04:13.666
But in Eclipse and Visual Studio code, I'm
told you wouldn't have that problem, so

81
00:04:13.666 --> 00:04:14.460
bully for you.

82
00:04:14.460 --> 00:04:16.940
Okay, now we actually have
to implement that code.

83
00:04:16.940 --> 00:04:19.832
And the way it works is you take the code
that was just generated for you and

84
00:04:19.832 --> 00:04:20.551
you subclass it.

85
00:04:20.551 --> 00:04:27.019
Okay, so class UsersService extends,

86
00:04:27.019 --> 00:04:31.205
let's see, it's called

87
00:04:31.205 --> 00:04:36.860
UsersServiceGRPCBase, okay?

88
00:04:36.860 --> 00:04:42.940
And so I have to extend the one that's
given to me by the GRPC compiler.

89
00:04:42.940 --> 00:04:44.801
It gives me a stub.

90
00:04:44.801 --> 00:04:49.097
The super class implementation
does nothing, right?

91
00:04:49.097 --> 00:04:50.590
It says it does something.

92
00:04:50.590 --> 00:04:53.790
It'll actually actively blow
up if you try and call it.

93
00:04:53.790 --> 00:04:55.550
Because it doesn't do anything useful.

94
00:04:55.550 --> 00:04:56.790
That's what it's trying to say.

95
00:04:56.790 --> 00:05:00.230
So what I need to do is to implement
it in terms of my own business logic.

96
00:05:00.230 --> 00:05:03.670
But remember, we've just had
everything transpiled for us, right?

97
00:05:03.670 --> 00:05:06.163
So as a result, we can't use our domain,

98
00:05:06.163 --> 00:05:10.390
we have to use the transpiled code
generated versions of our domain.

99
00:05:10.390 --> 00:05:15.250
So we're going to say this usersclient
Users get the collection of users.

100
00:05:15.250 --> 00:05:18.870
For each one,
we're going to map through the results and

101
00:05:18.870 --> 00:05:22.650
we're going to turn it into
the GRPC package user, right?

102
00:05:22.650 --> 00:05:23.450
So this is ours.

103
00:05:23.450 --> 00:05:25.010
This is what was code generated.

104
00:05:25.010 --> 00:05:31.210
We're going to use the builder and we'll
say build and we're going to say set.

105
00:05:31.210 --> 00:05:37.237
Username is u.username, setName is u.name.

106
00:05:37.237 --> 00:05:44.806
setID is u.id, okay, .toList.

107
00:05:44.806 --> 00:05:45.820
Okay, var all.

108
00:05:47.900 --> 00:05:49.380
And now I'm going to return that.

109
00:05:49.380 --> 00:05:50.700
I'll say response observer.

110
00:05:52.780 --> 00:05:53.540
Okay, do that.

111
00:05:53.540 --> 00:05:54.700
And then that.

112
00:05:54.700 --> 00:05:56.980
Okay, so that should be.

113
00:05:56.980 --> 00:05:58.300
Okay, let's see what that gives us.

114
00:06:02.380 --> 00:06:05.350
&gt;&gt; Speaker 2: None public interface.

115
00:06:09.190 --> 00:06:10.950
&gt;&gt; Josh Long: I don't
know what that means.

116
00:06:10.950 --> 00:06:12.550
When in doubt, delete target.

117
00:06:18.310 --> 00:06:19.910
&gt;&gt; Speaker 2: Okay.

118
00:06:19.910 --> 00:06:21.030
&gt;&gt; Josh Long: And then just do this.

119
00:06:31.424 --> 00:06:34.000
Wait.
Non declarative.

120
00:06:34.000 --> 00:06:36.600
I don't know what this
is some weird thing, but

121
00:06:36.600 --> 00:06:38.560
we can fix that by just ignoring it.

122
00:06:48.320 --> 00:06:50.000
That is interesting, though.

123
00:06:50.000 --> 00:06:52.320
So, okay, wait, comment this out.

124
00:07:01.610 --> 00:07:02.762
Okay.

125
00:07:02.762 --> 00:07:07.657
And then we'll use the one
that I commented out earlier.

126
00:07:10.854 --> 00:07:12.010
&gt;&gt; Speaker 2: And we'll inject that here.

127
00:07:12.010 --> 00:07:13.530
&gt;&gt; Josh Long: So actually,
I wonder if that.

128
00:07:13.530 --> 00:07:14.970
We can just leave the code.

129
00:07:18.490 --> 00:07:19.610
&gt;&gt; Speaker 2: Here.

130
00:07:19.610 --> 00:07:20.410
&gt;&gt; Josh Long: Inject that.

131
00:07:22.220 --> 00:07:22.780
Check that.

132
00:07:28.220 --> 00:07:31.459
&gt;&gt; Speaker 2: Okay,
let's see if that runs.

133
00:07:31.459 --> 00:07:33.900
This, staring me right in the face.

134
00:07:33.900 --> 00:07:34.620
&gt;&gt; Josh Long: It's been a day.

135
00:07:34.620 --> 00:07:35.740
Okay, here we go.

136
00:07:35.740 --> 00:07:38.302
Take 512.

137
00:07:38.302 --> 00:07:44.084
&gt;&gt; Speaker 2: Okay, I've got two different
REST clients, yeah, that's fair.

138
00:07:44.084 --> 00:07:45.340
&gt;&gt; Josh Long: Let's just
comment at one of them.

139
00:07:48.310 --> 00:07:48.950
&gt;&gt; Speaker 2: Get rid of that.

140
00:07:51.750 --> 00:07:52.550
Get rid of that.

141
00:07:57.910 --> 00:07:58.470
&gt;&gt; Josh Long: Neato.

142
00:07:58.470 --> 00:08:02.149
Okay, so the service is up and
running after all.

143
00:08:02.149 --> 00:08:03.910
Much ado about nothing.

144
00:08:03.910 --> 00:08:08.210
And you can see that the GRPC
service is up and running as well.

145
00:08:08.210 --> 00:08:14.820
So now we go to the console grpccurl,
--plaintext, okay?

146
00:08:14.820 --> 00:08:15.780
And it's going to be called.

147
00:08:18.820 --> 00:08:19.500
What do we call it?

148
00:08:19.500 --> 00:08:20.580
User Service all.

149
00:08:25.556 --> 00:08:30.020
And then it's localhost8080.

150
00:08:36.580 --> 00:08:38.118
What did I do?

151
00:08:38.118 --> 00:08:41.190
That's because of the declarative client.

152
00:08:41.190 --> 00:08:44.310
It's not the GRPC stuff,
it's the client itself.

153
00:08:45.590 --> 00:08:50.974
Where's the simple client?

154
00:08:50.974 --> 00:08:56.352
&gt;&gt; Speaker 2: And
it's that HTTP typee code.

155
00:09:01.211 --> 00:09:02.310
Okay, simple.

156
00:09:04.480 --> 00:09:04.980
&gt;&gt; Josh Long: Client.

157
00:09:13.200 --> 00:09:14.160
Put that in there.

158
00:09:15.360 --> 00:09:15.860
&gt;&gt; Speaker 2: Return.

159
00:09:20.800 --> 00:09:21.840
&gt;&gt; Josh Long: There we go.

160
00:09:21.840 --> 00:09:23.680
So I called the GRPC endpoint.

161
00:09:23.680 --> 00:09:28.047
It was having trouble calling the backend
HTTP service, but I'm getting the data now

162
00:09:28.047 --> 00:09:31.865
via GRPC Curl, which is talking to my
GRPC service hosted in my Spring app,

163
00:09:31.865 --> 00:09:34.490
which is running on HTTP
2 because GRPC requires.

