WEBVTT

1
00:00:00.241 --> 00:00:01.948
&gt;&gt; Josh Long: So
with actuator on the class path, and

2
00:00:01.948 --> 00:00:04.760
now you've got a kind of a sense
of what you're doing with that.

3
00:00:04.760 --> 00:00:06.640
You're making your application
production worthy.

4
00:00:06.640 --> 00:00:10.160
Because remember, in production, nobody
can hear your application scream, okay?

5
00:00:10.160 --> 00:00:12.280
It's very important to give
it the ability to speak.

6
00:00:12.280 --> 00:00:13.560
The actuator is how you do that.

7
00:00:13.560 --> 00:00:16.247
And that's been there since day zero,
right?

8
00:00:16.247 --> 00:00:19.680
We introduced spring
boot 0.4 back in 2013.

9
00:00:19.680 --> 00:00:20.800
We had this.

10
00:00:20.800 --> 00:00:24.513
This was part and
parcel of the spring boot experience,

11
00:00:24.513 --> 00:00:28.630
is production worthiness out of the box,
okay, so now what?

12
00:00:28.630 --> 00:00:29.910
Let's get this thing to production.

13
00:00:29.910 --> 00:00:32.750
And here we have a couple of different
things you might want to do.

14
00:00:32.750 --> 00:00:34.677
Maybe you wanna build a native image,
right?

15
00:00:34.677 --> 00:00:36.150
We talked about that yesterday.

16
00:00:36.150 --> 00:00:38.470
So maven skip tests.

17
00:00:38.470 --> 00:00:42.150
P Native, native colon compile.

18
00:00:42.150 --> 00:00:43.750
Okay, you can do that.

19
00:00:43.750 --> 00:00:47.246
That'll build a Native GraalVM Image
that you can run in your environment.

20
00:00:47.246 --> 00:00:49.590
We have a native binary at this point,
right?

21
00:00:49.590 --> 00:00:51.030
At that point you're going to try and
run it.

22
00:00:51.030 --> 00:00:52.810
You go to the target directory,
you choose.

23
00:00:52.810 --> 00:00:54.770
I'm going to choose E2E because
that's what I named it.

24
00:00:54.770 --> 00:00:56.250
And it's going to fail, right?

25
00:00:56.250 --> 00:00:59.939
So the reason it's going to fail well in
my case is because the port's already

26
00:00:59.939 --> 00:01:02.290
being used by the same
existing process in Java.

27
00:01:02.290 --> 00:01:06.216
But it's going to fail again because
it doesn't have any credentials for

28
00:01:06.216 --> 00:01:07.047
the database.

29
00:01:07.047 --> 00:01:09.766
The reason it doesn't
have those credentials is

30
00:01:09.766 --> 00:01:12.550
because we are using
the Docker compose support,

31
00:01:12.550 --> 00:01:16.929
which automatically prescribes the
username, password and host and port for

32
00:01:16.929 --> 00:01:20.900
the service when we start up
the application in development mode.

33
00:01:20.900 --> 00:01:22.100
But we're not in development mode.

34
00:01:22.100 --> 00:01:23.380
We have a production binary now.

35
00:01:23.380 --> 00:01:25.300
So how do we run this thing in production?

36
00:01:25.300 --> 00:01:27.540
Well, you need to give it configuration.

37
00:01:27.540 --> 00:01:31.049
You could do a couple things here, right?

38
00:01:31.049 --> 00:01:34.257
If I take spring,
I can do this the old-fashioned way,

39
00:01:34.257 --> 00:01:37.340
spring.datasource.password=secret, right?

40
00:01:37.340 --> 00:01:41.380
Spring.username is myuser, right?

41
00:01:41.380 --> 00:01:45.024
And then spring.datasource.url is

42
00:01:45.024 --> 00:01:51.320
jdbc:postgresql://localhost/mydatabase,
okay?

43
00:01:51.320 --> 00:01:52.301
So this is the configuration.

44
00:01:52.301 --> 00:01:55.320
I'm gonna put that in a separate
file here in the target directory.

45
00:01:55.320 --> 00:01:58.360
It's called application properties.

46
00:01:59.480 --> 00:02:01.480
So let me open up this one.

47
00:02:01.480 --> 00:02:02.600
I'm just pasting it there.

48
00:02:02.600 --> 00:02:04.247
In the target directory
I've got a separate

49
00:02:04.247 --> 00:02:07.160
property file called
application.properties, okay?

50
00:02:07.160 --> 00:02:11.187
That's gonna be added to the properties
that are already in the native code, so

51
00:02:11.187 --> 00:02:12.099
let's try that.

52
00:02:12.099 --> 00:02:13.901
So the next problem we're going to run.

53
00:02:13.901 --> 00:02:18.260
If we'd run that though, before we do
that is this is not running publicly.

54
00:02:18.260 --> 00:02:19.660
It's not exposed over the port.

55
00:02:19.660 --> 00:02:22.220
So I need to restart my Docker image,
right?

56
00:02:22.220 --> 00:02:27.043
Go to the target and
then docker compose up, manually,

57
00:02:27.043 --> 00:02:31.100
okay, cd target, and now there you go.

58
00:02:31.100 --> 00:02:33.100
So now the application's up and running.

59
00:02:33.100 --> 00:02:35.660
It connected to the SQL database, right?

60
00:02:36.860 --> 00:02:41.260
And of course, it's running in a tenth
of a second with much less RAM.

61
00:02:41.260 --> 00:02:44.668
So the key bit there was that we are no
longer able to rely on the Docker Compose

62
00:02:44.668 --> 00:02:47.100
support in the production environment.

63
00:02:47.100 --> 00:02:49.980
So you have to manually
specify how to connect, right?

64
00:02:49.980 --> 00:02:52.460
I did that by putting
properties in a property file.

65
00:02:52.460 --> 00:02:54.121
The other thing you could have done,
I could have done this.

66
00:02:54.121 --> 00:02:56.700
I could have gotten rid of that and
just done.

67
00:02:56.700 --> 00:03:02.700
Spring data source username equals secret,
right?

68
00:03:02.700 --> 00:03:07.186
Or sorry, myuser, right, or

69
00:03:07.186 --> 00:03:11.671
better, just to export that,

70
00:03:11.671 --> 00:03:17.720
export the PASSWORD equals this, okay?

71
00:03:17.720 --> 00:03:26.943
And then the
URL=jdbc:postgresql://localhost/mydatab-

72
00:03:26.943 --> 00:03:29.200
ase, yeah?

73
00:03:29.200 --> 00:03:32.790
So now I do this again, same thing.

74
00:03:32.790 --> 00:03:37.198
It draws the config from the environment
variables or from the property files,

75
00:03:37.198 --> 00:03:39.646
external, outside of the binary, right?

76
00:03:39.646 --> 00:03:43.384
So you can deploy the binary from one
environment to another, development Q&amp;A,

77
00:03:43.384 --> 00:03:44.207
sit, whatever.

78
00:03:44.207 --> 00:03:46.470
And it's the same binary, but
you have externalized properties.

