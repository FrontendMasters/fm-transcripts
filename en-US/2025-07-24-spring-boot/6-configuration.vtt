WEBVTT

1
00:00:00.320 --> 00:00:01.200
&gt;&gt; Josh Long: Okay.

2
00:00:01.200 --> 00:00:04.831
And then finally,
as we kind of wind down this section here,

3
00:00:04.831 --> 00:00:08.400
the last thing I want to talk
to you about is configuration.

4
00:00:09.520 --> 00:00:12.960
I've been making changes to this
program using application properties.

5
00:00:12.960 --> 00:00:15.600
Yeah, I can change things like
the port on which this runs.

6
00:00:15.600 --> 00:00:17.600
Like I can do 8081.

7
00:00:17.600 --> 00:00:21.120
Or if I want it to run on random port,
I can choose zero, right?

8
00:00:21.120 --> 00:00:24.080
It'll just pick a random unused
port on the operating system.

9
00:00:24.080 --> 00:00:25.400
That's an environment
variable that could be.

10
00:00:25.400 --> 00:00:28.240
I'm sorry, that's a property file,
a property value.

11
00:00:28.240 --> 00:00:33.309
If I go to the command line and
I do /maven spring-boot:run.

12
00:00:33.309 --> 00:00:35.320
Actually here,
let me just do maven package.

13
00:00:35.320 --> 00:00:38.788
So I'll have a compiled jar, okay?

14
00:00:38.788 --> 00:00:40.560
Now I go to the target directory.

15
00:00:40.560 --> 00:00:43.280
Du -ds is, there's a jar here, right?

16
00:00:43.280 --> 00:00:46.440
I can do Java minus jar Java.

17
00:00:46.440 --> 00:00:47.880
Actually, can I do this one?

18
00:00:47.880 --> 00:00:48.400
I think I can.

19
00:00:48.400 --> 00:00:51.840
No, java- jar, that, okay?

20
00:00:51.840 --> 00:00:55.530
That's the application up and
running on which port its random port.

21
00:00:55.530 --> 00:00:57.530
But now let's say I wanna override that.

22
00:00:57.530 --> 00:01:04.250
Well, I can say --, or sorry,
Dserver.port=8082, okay?

23
00:01:05.450 --> 00:01:08.650
So now you can see it
started up on port 8082.

24
00:01:09.690 --> 00:01:11.210
I can also do environment variables.

25
00:01:11.210 --> 00:01:16.493
I can say serverport equals 8083 and
we can keep that one there and

26
00:01:16.493 --> 00:01:20.970
we'll see there's 8082 and
environment variable.

27
00:01:22.230 --> 00:01:27.430
Get rid of this run that.

28
00:01:27.430 --> 00:01:29.990
I can see it's on Port 8083.

29
00:01:29.990 --> 00:01:33.876
So every property that you see me put
in here can be made into an environment

30
00:01:33.876 --> 00:01:34.510
variable.

31
00:01:34.510 --> 00:01:37.539
So when I specify spring data source,
secret or

32
00:01:37.539 --> 00:01:41.790
password, obviously you're not
going to do that in production.

33
00:01:41.790 --> 00:01:45.035
You're not going to check in the source
code to your production Oracle database or

34
00:01:45.035 --> 00:01:46.362
whatever into your source code.

35
00:01:46.362 --> 00:01:50.960
What you do is you'd
say SPRING_DATASOURCE.

36
00:01:50.960 --> 00:01:52.480
At the very least, you do this, right?

37
00:01:52.480 --> 00:01:56.000
DATASOURCE_PASSWORD=foo, right?

38
00:01:56.000 --> 00:01:58.960
And then run the process, okay?

39
00:01:58.960 --> 00:02:02.280
So you can pass in configurate, you can
override the default configuration.

40
00:02:02.280 --> 00:02:05.200
This is the 12 factor app
style deployments, right?

41
00:02:05.200 --> 00:02:08.832
You don't have configuration that changes
from one environment to another in

42
00:02:08.832 --> 00:02:09.720
the build itself.

43
00:02:09.720 --> 00:02:11.520
It should be externalizable.

44
00:02:13.050 --> 00:02:15.850
And finally, I would definitely
recommend using something like.

45
00:02:15.850 --> 00:02:18.330
Do you use a dir env?

46
00:02:18.330 --> 00:02:21.210
Anybody here use something like dir env?

47
00:02:21.210 --> 00:02:25.839
Direnv is another really handy tool for

48
00:02:25.839 --> 00:02:28.930
configuration, right?

49
00:02:28.930 --> 00:02:32.742
So let me see, if I do this here.

50
00:02:32.742 --> 00:02:38.250
If I create a file in the root of this
folder, touch _envrc, right, okay.

51
00:02:40.120 --> 00:02:45.400
I'm going to open this up now,
echo hello frontendmasters.

52
00:02:48.200 --> 00:02:51.400
Now I'm going to do DRM allow.

53
00:02:53.240 --> 00:02:57.600
So if I go back to here and I go to demo,
it says hello friend and masters.

54
00:02:57.600 --> 00:02:59.400
I can even export environment variables.

55
00:02:59.400 --> 00:03:02.280
So export foo equals bar.

56
00:03:03.320 --> 00:03:08.351
So now I go back up echo foo,
nothing CD into this and

57
00:03:08.351 --> 00:03:15.470
it's asking me do I want to run this
file because it's new drmvalao.

58
00:03:15.470 --> 00:03:16.990
Great.
Now what is foo?

59
00:03:18.510 --> 00:03:19.710
If I echo foo.

60
00:03:21.550 --> 00:03:22.710
So why does that matter?

61
00:03:22.710 --> 00:03:25.950
Well, it means you can put environment
variables in this directory.

62
00:03:27.070 --> 00:03:28.773
Somebody cd's into this directory,

63
00:03:28.773 --> 00:03:32.400
now they have the correct version of
Java because you have SDK main rc.

64
00:03:32.400 --> 00:03:35.600
You can also have the correct
environment variables, right?

65
00:03:35.600 --> 00:03:39.520
Now, should you put your AWS S3
cluster credentials in this?

66
00:03:39.520 --> 00:03:40.800
Definitely not, right?

67
00:03:40.800 --> 00:03:43.840
Which brings us back
around to one more thing.

68
00:03:43.840 --> 00:03:45.760
Use your password manager.

69
00:03:45.760 --> 00:03:49.200
Most of them have clis.

70
00:03:49.200 --> 00:03:51.608
I don't know what your organization uses,
but

71
00:03:51.608 --> 00:03:55.279
what I find to be very effective is to
have like if you're using one pass or

72
00:03:55.279 --> 00:03:59.090
LastPass or I use bitwarden, which I love,
you can use whatever you want.

73
00:03:59.090 --> 00:04:02.690
The point is they all have clis,
even Apple, there's a third party.

74
00:04:02.690 --> 00:04:06.578
I'm not sure how good it is, don't quote
me, but there's an Apple passwords CLI now

75
00:04:06.578 --> 00:04:09.930
that somebody else built that you can
use to talk to the password manager.

76
00:04:09.930 --> 00:04:13.890
That's new in Mac OS 15.4 or
whatever it was.

77
00:04:13.890 --> 00:04:18.210
And so you can use that to, given
the name of a key, pull down the value so

78
00:04:18.210 --> 00:04:21.170
it'll prompt you to
authenticate in the shell.

79
00:04:22.210 --> 00:04:26.281
You log into your password manager,
in effect in the console, and then you can

80
00:04:26.281 --> 00:04:30.416
actually use the token that it gives you
back to make requests against the API for

81
00:04:30.416 --> 00:04:31.750
the password manager.

82
00:04:31.750 --> 00:04:33.270
So what would you put in here?

83
00:04:33.270 --> 00:04:37.670
Well, imagine somebody
CDs into this directory.

84
00:04:37.670 --> 00:04:41.793
Now you have environment variables
that are in session or in scope, but

85
00:04:41.793 --> 00:04:43.590
you need to get certain items.

86
00:04:43.590 --> 00:04:47.137
So the way it works in
Bitwarden is use BW getitem and

87
00:04:47.137 --> 00:04:51.560
then the name of the item
it'll ask you to authenticate.

88
00:04:51.560 --> 00:04:53.721
So you authenticate,
then it'll get the item and

89
00:04:53.721 --> 00:04:56.040
then foo will be equal to that value.

90
00:04:56.040 --> 00:05:00.759
So now, as long as everybody's using
1Password or Bitwarden or whatever,

91
00:05:00.759 --> 00:05:02.800
cuz I showed you Docker, right?

92
00:05:02.800 --> 00:05:05.640
Docker is great for
things you can run locally.

93
00:05:05.640 --> 00:05:10.467
But S3, you've got a development S3
cluster or development S3 bucket,

94
00:05:10.467 --> 00:05:13.080
I mean, or buckets, right?

95
00:05:13.080 --> 00:05:17.029
You don't want to store that in the source
code, so you store that in the Password

96
00:05:17.029 --> 00:05:19.720
manager for your group and
then each of you has access.

97
00:05:19.720 --> 00:05:22.720
You can share that secret with everybody.

98
00:05:22.720 --> 00:05:24.880
The admin or the team leader,
whatever can do that.

99
00:05:24.880 --> 00:05:27.501
Now, when they CD into this directory,
DRMV runs and

100
00:05:27.501 --> 00:05:30.531
it automatically tries to set
up these environment variables

101
00:05:30.531 --> 00:05:34.046
that has the S3 credential for
you by talking to the password manager.

102
00:05:34.046 --> 00:05:39.841
Now in this shell,
that is when you run idea pom.xml, right?

103
00:05:39.841 --> 00:05:44.650
Because now, so if I close this out,
I command qt intellij, right?

104
00:05:44.650 --> 00:05:46.250
It's gone, there's no room intellij now.

105
00:05:46.250 --> 00:05:50.410
So now I'm going to go to demo DRM allow.

106
00:05:50.410 --> 00:05:52.970
Okay, so
now it's asking me to get an item.

107
00:05:52.970 --> 00:05:54.285
It's going to fail because I don't have a.

108
00:05:54.285 --> 00:05:55.290
I didn't ask it to get anything.

109
00:05:55.290 --> 00:05:58.330
But echo foo is still there, right?

110
00:05:58.330 --> 00:06:04.890
Whoops, I forgot to set this
back to something usable.

111
00:06:04.890 --> 00:06:09.290
Bar CD demo.

112
00:06:09.290 --> 00:06:09.850
There you go.

113
00:06:09.850 --> 00:06:14.984
Echo foo And I open this up again,
Pom xml and I'm opening it

114
00:06:14.984 --> 00:06:20.130
up in the same shell where I
set that environment variable.

115
00:06:20.130 --> 00:06:23.410
So now in my Java code,
what if I need to depend on that value?

116
00:06:23.410 --> 00:06:24.690
Well, I can inject it.

117
00:06:24.690 --> 00:06:31.090
I can get access to that value like so,
right, foo.

118
00:06:37.020 --> 00:06:39.260
Okay, so now I restart this.

119
00:06:39.260 --> 00:06:41.100
I've injected the environment
variable there.

120
00:06:42.540 --> 00:06:43.660
Go to the console.

121
00:06:46.060 --> 00:06:48.140
Hi, what did I call it?

122
00:06:50.220 --> 00:06:51.420
I did call it hi, right?

123
00:06:53.948 --> 00:06:54.940
It's port 8083.

124
00:06:54.940 --> 00:06:55.740
Right.
We changed that.

125
00:06:58.700 --> 00:06:59.500
What's the port?

126
00:07:01.024 --> 00:07:01.820
It's random.

127
00:07:02.850 --> 00:07:03.930
That's zero by default.

128
00:07:03.930 --> 00:07:05.330
Okay, so there you go.

129
00:07:05.330 --> 00:07:06.573
You can see I was able to access and

130
00:07:06.573 --> 00:07:09.650
reference those environment variables
from within my spring boot application.

131
00:07:11.730 --> 00:07:14.634
You can also reference them
from within this property file.

132
00:07:14.634 --> 00:07:18.138
So for example, maybe the secret,
maybe the password for

133
00:07:18.138 --> 00:07:22.930
your database is whatever is in
the environment variable called foo.

134
00:07:22.930 --> 00:07:24.210
You can just reference it like that.

135
00:07:25.650 --> 00:07:27.170
So far, so good.

136
00:07:27.170 --> 00:07:32.315
So this is all stuff, there's no reason
anybody should ever store credentials

137
00:07:32.315 --> 00:07:37.400
in source code unless it's like SQLite
on the local machine shared by nobody.

