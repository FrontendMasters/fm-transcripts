WEBVTT

1
00:00:00.640 --> 00:00:02.440
&gt;&gt; Josh Long: Okay,
this is a front end master's course.

2
00:00:02.440 --> 00:00:03.600
So what does this have to
do with the front end?

3
00:00:03.600 --> 00:00:08.480
Well, like I said,
this is all in the JVM right here, right?

4
00:00:08.480 --> 00:00:12.083
My tool calling is another function,
another module, another object,

5
00:00:12.083 --> 00:00:13.920
another thing in the same jvm.

6
00:00:13.920 --> 00:00:18.953
But like I said earlier,
the front end today is AI models.

7
00:00:18.953 --> 00:00:21.200
It's chat clients, right?

8
00:00:21.200 --> 00:00:24.720
It's a chat assistance,
it's assistants in general.

9
00:00:24.720 --> 00:00:27.394
And they can do increasingly
powerful things.

10
00:00:27.394 --> 00:00:32.427
Back in November, Anthropic,
the makers of Claude Claude Desktop,

11
00:00:32.427 --> 00:00:38.150
C L A U D E, they announced this new
thing called MCP model Context protocol.

12
00:00:38.150 --> 00:00:42.954
And MCP is a protocol you can
use to give CLAUDE access to

13
00:00:42.954 --> 00:00:46.310
your tools on your local machine.

14
00:00:46.310 --> 00:00:47.270
It's a network protocol.

15
00:00:47.270 --> 00:00:47.790
It's a protocol.

16
00:00:47.790 --> 00:00:52.067
Rather the first version wasn't a network
protocol so much as it was a standard in,

17
00:00:52.067 --> 00:00:53.850
standard out protocol protocol.

18
00:00:53.850 --> 00:00:58.624
But the point is two separate processes
on the same host could now talk to each

19
00:00:58.624 --> 00:00:59.674
other, right?

20
00:00:59.674 --> 00:01:00.771
So you have Cloud desktop.

21
00:01:00.771 --> 00:01:02.822
It's like ChatGPT except it's a.

22
00:01:02.822 --> 00:01:05.279
And ChatGPT has a ChatGPT.app,

23
00:01:05.279 --> 00:01:10.730
which is your Mac OS native binary that
wraps the the web view for ChatGPT.

24
00:01:10.730 --> 00:01:12.890
There's also ChatGPT.exe.

25
00:01:12.890 --> 00:01:14.520
Well, the same thing for Claude.

26
00:01:14.520 --> 00:01:17.690
There's Claude.app and Claude.exe, right?

27
00:01:17.690 --> 00:01:21.062
And they both, I imagine one assumes they
just wrap the webview and make it so

28
00:01:21.062 --> 00:01:23.704
that you can install them in
your local operating systems.

29
00:01:23.704 --> 00:01:28.392
But Claude Desktop ships with a new
feature where you can configure

30
00:01:28.392 --> 00:01:32.996
a JSON config file and list enumerate
the paths of binaries that if

31
00:01:32.996 --> 00:01:37.530
Claude Desktop wants to,
it can invoke to get some responses.

32
00:01:37.530 --> 00:01:39.850
So what protocol do these binaries speak?

33
00:01:39.850 --> 00:01:44.992
Like I said, they speak this MCP protocol.

34
00:01:44.992 --> 00:01:48.110
Well, I mean, that's awesome, right?

35
00:01:48.110 --> 00:01:49.550
There's a protocol you can
actually talk to things.

36
00:01:49.550 --> 00:01:51.110
So people have done thousands.

37
00:01:51.110 --> 00:01:53.181
There's thousands of
MCP services out there.

38
00:01:53.181 --> 00:01:55.654
This thing is taken off like wildfire,
right?

39
00:01:55.654 --> 00:02:00.259
There's actually directories you can go to
that just list really cool MCP services.

40
00:02:00.259 --> 00:02:02.546
There's actually,
I saw this the other week,

41
00:02:02.546 --> 00:02:06.470
a directory of directories of other MCP
services that you can download and use.

42
00:02:06.470 --> 00:02:09.444
Every big vendor,
every cloud, hyperscaler, or

43
00:02:09.444 --> 00:02:12.848
almost all of them at least
have MCP services now, right?

44
00:02:12.848 --> 00:02:17.038
Zapier just announced
a cloud like a MCP service.

45
00:02:17.038 --> 00:02:21.806
Everybody has an MCP service now and
eventually that host to host.

46
00:02:21.806 --> 00:02:26.153
Sorry, in host intro host
process to process standard

47
00:02:26.153 --> 00:02:31.076
IO Standard out based protocol
evolved to also support HTTP.

48
00:02:31.076 --> 00:02:33.027
This is where it gets
really interesting for

49
00:02:33.027 --> 00:02:35.038
us because it's a front-end master thing.

50
00:02:35.038 --> 00:02:40.038
So now you can build a service speaking
MCP on top of just regular Spring

51
00:02:40.038 --> 00:02:42.170
right on top of the web stack.

52
00:02:42.170 --> 00:02:44.530
And you can do McP with
standard IO as well.

53
00:02:44.530 --> 00:02:47.850
We on the Spring AI team
really love this protocol.

54
00:02:47.850 --> 00:02:50.536
In the weeks that followed
the announcement of it,

55
00:02:50.536 --> 00:02:53.290
we built a Java SDK
implementation of the protocol.

56
00:02:53.290 --> 00:02:57.810
We did it so early that in fact Anthropic
reached out to us and that we donated.

57
00:02:57.810 --> 00:03:02.478
We ended up donating the core
implementation from Spring AI support for

58
00:03:02.478 --> 00:03:07.399
MCP to the Anthropic Model Context
Protocol IO foundation thing, right?

59
00:03:07.399 --> 00:03:09.770
Their effort,
their open-source thing, right.

60
00:03:09.770 --> 00:03:13.050
So the core Java SDK
is code that we wrote.

61
00:03:13.050 --> 00:03:17.002
And so if you want to write
MCP services using the jvm.

62
00:03:17.002 --> 00:03:18.050
And why wouldn't you?

63
00:03:18.050 --> 00:03:19.847
Well, you're using our code anyway,

64
00:03:19.847 --> 00:03:22.410
even if you're not using
Spring AI on top of it, right?

65
00:03:23.530 --> 00:03:24.530
So that's what we're going to do.

66
00:03:24.530 --> 00:03:29.850
We're going to turn this admittedly bit
of a trivial thing into an MCP service.

67
00:03:29.850 --> 00:03:31.290
I've got the scheduler here.

68
00:03:31.290 --> 00:03:33.003
I'm going to stand up a new MCP service.

69
00:03:33.003 --> 00:03:39.310
We'll go over here, start Spring IO and
I'm going to call this Scheduler.

70
00:03:39.310 --> 00:03:42.061
I'm going to say

71
00:03:42.061 --> 00:03:50.519
MCP Server Web Enter UAO Server Scheduler
rather.

72
00:03:50.519 --> 00:03:55.783
And I'm going to run this
in port 8081 because I need

73
00:03:55.783 --> 00:04:00.935
a port 8081 and
I'll say Scheduler application.

74
00:04:00.935 --> 00:04:04.904
I'm going to cut and paste this
proprietary patent pending business logic

75
00:04:04.904 --> 00:04:07.930
for my adoption service over
here to my Scheduler thing.

76
00:04:08.970 --> 00:04:15.130
And I need to tell the auto configuration
here in my MCP server to export that tool.

77
00:04:15.130 --> 00:04:17.970
So I'll just do that
with this auto config.

78
00:04:17.970 --> 00:04:24.570
I'll say tool objects and I'll inject
the old, dogged option scheduler, okay.

79
00:04:26.980 --> 00:04:28.620
Okay, so let me start that up.

80
00:04:28.620 --> 00:04:30.083
I don't know.
Yeah, that'll be fine.

81
00:04:30.083 --> 00:04:32.740
So that'll start up on
tomcat on port 8081.

82
00:04:34.980 --> 00:04:37.300
There it is right there, port 8081.

83
00:04:37.300 --> 00:04:38.609
So now we go back over here and

84
00:04:38.609 --> 00:04:42.003
now that I've left a little dog adoption
scheduler shape hole in my code.

85
00:04:42.003 --> 00:04:45.626
I got to replace it and tell it to instead
get that functionality from the service

86
00:04:45.626 --> 00:04:48.340
that we just stood up instead
of from the local Java object.

87
00:04:48.340 --> 00:04:51.800
So I'll do that by
configuring an MCP client.

88
00:04:51.800 --> 00:04:55.706
Okay, so Bean mcp sync client,

89
00:04:55.706 --> 00:05:00.920
mcp sync client return mcp client.sync.

90
00:05:00.920 --> 00:05:01.836
and then it's a.

91
00:05:01.836 --> 00:05:04.370
This one changed recently, so
I have to like, remember, okay.

92
00:05:04.370 --> 00:05:13.484
Yeah, localhost8081.build, .build.

93
00:05:13.484 --> 00:05:18.576
Okay and actually technically

94
00:05:18.576 --> 00:05:23.479
you're supposed to do this.

95
00:05:23.479 --> 00:05:25.104
Okay, so restart and

96
00:05:25.104 --> 00:05:30.172
I need to now tell Spring's chat
client to then talk to that thing.

97
00:05:30.172 --> 00:05:31.696
So I'll inject that here.

98
00:05:31.696 --> 00:05:33.859
McP sync client.

99
00:05:33.859 --> 00:05:35.495
McP sync client.

100
00:05:35.495 --> 00:05:38.803
Put that here and

101
00:05:38.803 --> 00:05:44.476
new sync that that Restart.

102
00:05:44.476 --> 00:05:47.930
So I had to add this one object
that wrapped the thing I passed in.

103
00:05:47.930 --> 00:05:50.747
I had to define this one bean,
kind of like a data source,

104
00:05:50.747 --> 00:05:53.410
telling it to source the MCP
tools from that service.

105
00:05:53.410 --> 00:05:54.450
And I could have more than one.

106
00:05:54.450 --> 00:05:56.329
In this case,
I've just got the one scheduler.

107
00:05:56.329 --> 00:05:58.184
But you could have thousands, right?

108
00:05:58.184 --> 00:06:03.050
Okay, so whoops,
it's not going to know what to do.

109
00:06:03.050 --> 00:06:04.790
Control C.

110
00:06:04.790 --> 00:06:08.970
Do you have any direct dogs?

111
00:06:10.740 --> 00:06:11.580
Okay, great.

112
00:06:11.580 --> 00:06:12.527
We have Prancer.

113
00:06:12.527 --> 00:06:16.420
Okay, when can I adopt Prancer
from the Minneapolis location?

114
00:06:17.700 --> 00:06:19.620
April 26th.

115
00:06:19.620 --> 00:06:20.940
So this is the adoption service.

116
00:06:20.940 --> 00:06:22.340
Nothing on the console there.

117
00:06:22.340 --> 00:06:25.292
Here's the scheduler service.

118
00:06:25.292 --> 00:06:29.460
The model talked to the scheduler via mcp,
right.

119
00:06:29.460 --> 00:06:33.771
And it got the response back and
it incorporated that response.

120
00:06:33.771 --> 00:06:36.495
You could write these MCP services
in all sorts of other languages.

121
00:06:36.495 --> 00:06:40.411
Just find me one that'll be as productive
and efficient and wide scoping and

122
00:06:40.411 --> 00:06:42.560
fast and scalable as the one in Java.

123
00:06:42.560 --> 00:06:43.280
It's amazing.

124
00:06:43.280 --> 00:06:44.480
This is an amazing time.

125
00:06:44.480 --> 00:06:47.672
Now, when I say that there
are thousands of MCP services,

126
00:06:47.672 --> 00:06:49.440
I might be under exaggerating.

127
00:06:49.440 --> 00:06:51.120
What's the opposite of exaggerating?

128
00:06:51.120 --> 00:06:52.559
I might be underselling it.

129
00:06:52.559 --> 00:06:54.160
There might be tens of
thousands at this point.

130
00:06:54.160 --> 00:06:55.680
There are countless.

131
00:06:55.680 --> 00:07:00.220
I mean, I saw one again, you have to
be careful because there's mcphtp,

132
00:07:00.220 --> 00:07:02.280
MCP standard in, standard out.

133
00:07:02.280 --> 00:07:07.990
There's an MCP service that does like,
it uses blender, the 3D tool.

134
00:07:07.990 --> 00:07:12.391
So you go to Claude desktop, you point it
to one of these standard, standard in,

135
00:07:12.391 --> 00:07:16.750
standard out, MCP services and
say render a scene of 1920s Parisian Cafe.

136
00:07:16.750 --> 00:07:17.750
Parisian cafe.

137
00:07:17.750 --> 00:07:19.510
And it'll just do it, right?

138
00:07:19.510 --> 00:07:21.030
I mean people are.

139
00:07:21.030 --> 00:07:23.510
It's like Star Trek computer,
make me a cup of coffee.

140
00:07:23.510 --> 00:07:26.191
I mean, people are doing
amazing things with this now.

141
00:07:26.191 --> 00:07:29.011
And the interface for
all this is just a chat.

142
00:07:29.011 --> 00:07:31.000
A chat box, right?

143
00:07:31.000 --> 00:07:32.029
So if you can build your.

144
00:07:32.029 --> 00:07:35.701
If you can export your business logic,
your organization's functionality in terms

145
00:07:35.701 --> 00:07:38.410
of these MCP services,
you can do all sorts of amazing things.

146
00:07:38.410 --> 00:07:40.250
I showed you spring batch yesterday.

147
00:07:40.250 --> 00:07:43.938
We built an MCP service that allows you
to ask questions about the state of your

148
00:07:43.938 --> 00:07:44.914
spring batch jobs.

149
00:07:44.914 --> 00:07:47.610
How many jobs are running,
what state are they in?

150
00:07:47.610 --> 00:07:50.512
Right, just really amazing things.

151
00:07:50.512 --> 00:07:54.930
Cloud hyperscalers are letting
you create and manipulate stuff.

152
00:07:54.930 --> 00:07:58.980
GitHub, they released an MCP service
just recently, the MCP service.

153
00:07:58.980 --> 00:08:03.425
I built a demo on my stream, my live
stream last week with Microsoft's vice

154
00:08:03.425 --> 00:08:07.540
president of developer advocacy or
whatever, Patrick Shannazol.

155
00:08:07.540 --> 00:08:12.090
In that we talked about how to use Spring
AI to talk to the MCP service to ask

156
00:08:12.090 --> 00:08:15.780
questions and or
mutate state on my GitHub account.

157
00:08:15.780 --> 00:08:19.700
Like I could commit stuff via text.

158
00:08:19.700 --> 00:08:21.353
I could say, hey, add a file,

159
00:08:21.353 --> 00:08:26.300
add a readme that analyzes the source code
of this Git repository and it would do it.

160
00:08:26.300 --> 00:08:27.980
We live in an amazing time.

161
00:08:27.980 --> 00:08:28.980
An amazing time.

162
00:08:28.980 --> 00:08:30.980
And of course, this is all AI.

163
00:08:30.980 --> 00:08:31.780
And guess what this is doing?

164
00:08:31.780 --> 00:08:33.121
It's just doing network I O.

165
00:08:33.121 --> 00:08:33.688
And guess what?

166
00:08:33.688 --> 00:08:37.260
You don't want to do network
I O without virtual threads.

