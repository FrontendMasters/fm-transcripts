WEBVTT

1
00:00:00.080 --> 00:00:00.925
&gt;&gt; Josh Long: We're going
to talk about security.

2
00:00:00.925 --> 00:00:03.740
We're going to talk about what it
looks like to do security in a spring

3
00:00:03.740 --> 00:00:04.379
application.

4
00:00:04.379 --> 00:00:05.200
Typically.

5
00:00:05.200 --> 00:00:08.560
Now I'm going to build a new
service here called Auth, right.

6
00:00:08.560 --> 00:00:11.520
And it's going to be a web application.

7
00:00:11.520 --> 00:00:13.840
I'm going to use spring security.

8
00:00:13.840 --> 00:00:16.680
I'm also going to bring in the OAUTH
authorization service support.

9
00:00:16.680 --> 00:00:19.240
We'll come back and
talk about that means in just a second.

10
00:00:19.240 --> 00:00:25.730
I also want a SQL database, so
you know our old friend JDBC and Postgres.

11
00:00:25.730 --> 00:00:30.690
Okay, there's that uao, auth, zip.

12
00:00:32.850 --> 00:00:35.890
Okay, do I have a Docker image running?

13
00:00:39.410 --> 00:00:44.490
Good, go back here.

14
00:00:44.490 --> 00:00:48.210
Okay, I don't think I created
a Docker compose file.

15
00:00:48.210 --> 00:00:49.730
Do I need it?

16
00:00:49.730 --> 00:00:50.530
Maybe not.

17
00:00:56.060 --> 00:00:59.900
Copy, go to my Downloads directory.

18
00:01:00.940 --> 00:01:08.042
Touch compose, YAML,
subol compose YAML paste that in.

19
00:01:08.042 --> 00:01:08.980
Same old same, okay.

20
00:01:08.980 --> 00:01:13.816
Same old PostgreSQL directory
thing since time immemorial.

21
00:01:13.816 --> 00:01:15.367
So Docker compose up.

22
00:01:15.367 --> 00:01:17.938
Okay, so I'm going to talk about security.

23
00:01:17.938 --> 00:01:20.057
Security is really hard and I'm doing the,

24
00:01:20.057 --> 00:01:23.505
I've done you a disservice by leaving
security to the very end of this.

25
00:01:23.505 --> 00:01:26.867
Really, this should be a conversation you
have at the very beginning of your system

26
00:01:26.867 --> 00:01:27.597
design, right?

27
00:01:27.597 --> 00:01:31.341
It's one of those things where
if you get it right, as my dad,

28
00:01:31.341 --> 00:01:33.357
my late father, I have two dads,

29
00:01:33.357 --> 00:01:37.990
my late father he would have said it's
a cinch by the inch, hard by the art.

30
00:01:37.990 --> 00:01:39.868
Apologies to everybody else who doesn't.

31
00:01:39.868 --> 00:01:43.252
Doesn't use freedom units, but it just
means that it's easy by the centimeter,

32
00:01:43.252 --> 00:01:44.390
hard by the meter, right?

33
00:01:44.390 --> 00:01:47.470
It's more difficult if you wait
until it accrues and do it later.

34
00:01:47.470 --> 00:01:51.470
Whereas if you do it as you go, it's
a very easy thing to kind of contend with.

35
00:01:51.470 --> 00:01:54.030
So security is one of the things
you really want to do up front.

36
00:01:54.030 --> 00:01:58.320
And my central thesis today is
that security with passwords is

37
00:01:58.320 --> 00:02:00.390
fundamentally just broken.

38
00:02:00.390 --> 00:02:02.030
It's not a good way to build a system.

39
00:02:02.030 --> 00:02:05.624
So what we're going to look at today is a
number of things that you can use to make

40
00:02:05.624 --> 00:02:06.830
your system more secure.

41
00:02:06.830 --> 00:02:07.550
I'm going to use.

42
00:02:09.559 --> 00:02:12.532
This is the rare Josh editing.

43
00:02:12.532 --> 00:02:20.199
Upon that XML moment here, I'm going to
add a dependency called Webauthn core.

44
00:02:21.879 --> 00:02:22.635
Look at that.

45
00:02:22.635 --> 00:02:24.202
So that's very important.

46
00:02:24.202 --> 00:02:25.799
Blink and you'll miss it.

47
00:02:25.799 --> 00:02:27.479
Dependency for Webauthn.

48
00:02:28.679 --> 00:02:31.039
Now what I want to do is I want
to secure this application.

49
00:02:31.039 --> 00:02:33.909
I've got a Java application here.

50
00:02:33.909 --> 00:02:38.031
Let's just get a simple HTTP
controller Response body.

51
00:02:38.031 --> 00:02:42.758
Hello, controller Git mapping.

52
00:02:42.758 --> 00:02:45.251
Hello, okay, and
what am I going to put in here?

53
00:02:45.251 --> 00:02:48.106
Yes, you guessed it, a simple message.

54
00:02:48.106 --> 00:02:55.446
So string hello, hello,
principal return map of.

55
00:02:55.446 --> 00:02:56.383
So what did I just do there?

56
00:02:56.383 --> 00:02:58.520
I injected the principle.

57
00:02:58.520 --> 00:03:00.760
This is a Java security printable object.

58
00:03:00.760 --> 00:03:01.720
And what does it do?

59
00:03:01.720 --> 00:03:05.659
This has been in the Java security
specification for, I don't know,

60
00:03:05.659 --> 00:03:08.040
20 years, as long as I can remember.

61
00:03:08.040 --> 00:03:10.467
And the principal has just
one interesting method,

62
00:03:10.467 --> 00:03:13.680
which is give me the name of
the currently authenticated principle.

63
00:03:13.680 --> 00:03:14.560
Where does that come from?

64
00:03:14.560 --> 00:03:15.920
Well, somebody's got to put that there.

65
00:03:15.920 --> 00:03:17.960
It's got to make it available
to the rest of the system.

66
00:03:17.960 --> 00:03:19.680
That's where Spring security comes in.

67
00:03:19.680 --> 00:03:23.602
Think of Spring security as a big filter
that sits around your application,

68
00:03:23.602 --> 00:03:26.972
guarding it from requests from
the outside world and, you know,

69
00:03:26.972 --> 00:03:29.890
demanding that there be some
sort of authentication.

70
00:03:29.890 --> 00:03:30.690
That happens.

71
00:03:30.690 --> 00:03:36.151
And then once you're authenticated,
handling authorization, right?

72
00:03:36.151 --> 00:03:40.650
That is to say, authentication is the
question what who is making the request?

73
00:03:40.650 --> 00:03:43.690
Authorization is what permissions do they
have once they're inside the system?

74
00:03:43.690 --> 00:03:45.250
Okay, so I want to handle that.

75
00:03:45.250 --> 00:03:49.170
So I'm going to create
a security filter chain.

76
00:03:49.170 --> 00:03:53.118
So my auth security filter chain and

77
00:03:53.118 --> 00:03:56.940
I'm going to throw an exception.

78
00:03:56.940 --> 00:04:01.552
I'm going to inject something
called HTTP security,

79
00:04:01.552 --> 00:04:05.772
HTTP security, and
I will use that to call build.

80
00:04:05.772 --> 00:04:09.737
So this is in theory a functioning
Spring Security app, right.

81
00:04:09.737 --> 00:04:11.020
It'll do the job, right.

82
00:04:11.020 --> 00:04:13.660
In fact,
this doesn't do anything different.

83
00:04:13.660 --> 00:04:15.131
In fact, if you just left it out,

84
00:04:15.131 --> 00:04:18.460
it would still do something in that
this endpoint is no longer accessible.

85
00:04:18.460 --> 00:04:20.707
I've got Spring security
in the class path and

86
00:04:20.707 --> 00:04:23.192
by default everything is
locked down on the class.

87
00:04:23.192 --> 00:04:27.946
But let me spring data source JDBC,

88
00:04:27.946 --> 00:04:33.181
PostgreSQL, Localhost my database.

89
00:04:33.181 --> 00:04:35.359
Okay, username.

90
00:04:35.359 --> 00:04:39.469
My user password is secret.

91
00:04:39.469 --> 00:04:43.349
Okay, so I'm going to start that again.

92
00:04:43.349 --> 00:04:45.400
Go to localhost8080.

93
00:04:45.400 --> 00:04:47.349
Hello?

94
00:04:47.349 --> 00:04:48.048
Nothing, right?

95
00:04:48.048 --> 00:04:49.228
It wouldn't let me log in.

