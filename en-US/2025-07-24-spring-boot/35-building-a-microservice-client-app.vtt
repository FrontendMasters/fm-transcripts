WEBVTT

1
00:00:00.720 --> 00:00:02.422
&gt;&gt; Josh Long: Okay, so
let's actually build a client and

2
00:00:02.422 --> 00:00:04.040
kind of see what I'm talking about here.

3
00:00:04.040 --> 00:00:07.890
So I've got two services, both of
which are discoverable via the service

4
00:00:07.890 --> 00:00:11.880
registry and both of which are drawing
their config from the config server.

5
00:00:11.880 --> 00:00:13.400
Let's go back and build a client.

6
00:00:13.400 --> 00:00:16.480
Okay, Start that spring IO,
build a client.

7
00:00:16.480 --> 00:00:21.720
We're gonna use Spring Cloud Gateway,
which is a micro proxy.

8
00:00:21.720 --> 00:00:24.803
We're going to use the web support,
we're going to use the config client and

9
00:00:24.803 --> 00:00:27.860
we use the discovery client support for
talking to the service registry.

10
00:00:27.860 --> 00:00:29.860
Okay, here we go.

11
00:00:29.860 --> 00:00:32.340
And then we go back to
the downloads directory.

12
00:00:32.340 --> 00:00:37.071
Uao client.zip, okay,
application properties,

13
00:00:37.071 --> 00:00:40.180
ports, sorry, Config server.

14
00:00:40.180 --> 00:00:41.540
Config is there.

15
00:00:41.540 --> 00:00:46.245
And what we're going to do, the first
thing we're going to do is going to

16
00:00:46.245 --> 00:00:51.220
create a REST client that is load
balanced automatically, right?

17
00:00:51.220 --> 00:00:54.110
Using the Spring cloud discovery client.

18
00:00:54.110 --> 00:00:55.550
So I'll say REST client builders.

19
00:00:55.550 --> 00:00:58.533
Notice that I'm not defining the REST
client, I'm defining the builder,

20
00:00:58.533 --> 00:01:00.270
which is the prototype for
the REST client.

21
00:01:01.470 --> 00:01:05.030
Then once I've done that,
I can inject that REST client.

22
00:01:05.030 --> 00:01:10.190
I can create a REST client that uses
that load balanced builder like so.

23
00:01:10.190 --> 00:01:16.830
So add controller, add response body,
load balanced controller.

24
00:01:18.190 --> 00:01:22.370
Okay, hello, string hello.

25
00:01:22.370 --> 00:01:28.130
So I'm going to say return,
I'm going to use the REST client.

26
00:01:28.130 --> 00:01:32.290
Add that to the constructor,
add the builder build.

27
00:01:33.810 --> 00:01:38.500
I'll say this REST client.get.uri, and

28
00:01:38.500 --> 00:01:43.250
notice that I'm doing a http service.

29
00:01:43.250 --> 00:01:44.250
A logical name.

30
00:01:44.250 --> 00:01:46.670
This is not the host name or DNS.

31
00:01:46.670 --> 00:01:50.270
This is the logical name as it's
registered in the service registry.

32
00:01:51.470 --> 00:01:52.510
Where's my service registry?

33
00:01:52.510 --> 00:01:54.350
I've got too many things going on here.

34
00:01:54.350 --> 00:01:55.390
Close that.

35
00:01:55.390 --> 00:01:57.790
The logical name is called service.

36
00:01:57.790 --> 00:02:04.075
So I use that in the Java code
here when I make the call,

37
00:02:04.075 --> 00:02:11.639
hello.retrieve.string.class, okay,
sorry, retreat.

38
00:02:13.719 --> 00:02:15.239
This one.

39
00:02:15.239 --> 00:02:15.739
Body.

40
00:02:16.919 --> 00:02:20.559
Okay, so let's try that out.

41
00:02:20.559 --> 00:02:21.399
That should be on port.

42
00:02:21.399 --> 00:02:22.799
I don't know what port this will run on.

43
00:02:22.799 --> 00:02:24.161
9090 I think.

44
00:02:28.203 --> 00:02:29.399
Okay, 8081, great.

45
00:02:29.399 --> 00:02:30.919
So we go to localhost 8081.

46
00:02:32.279 --> 00:02:32.839
Hello.

47
00:02:35.799 --> 00:02:36.759
See what's happening there.

48
00:02:40.880 --> 00:02:45.280
I'm making the request from my client.

49
00:02:45.280 --> 00:02:46.600
It is using a REST client.

50
00:02:46.600 --> 00:02:48.960
It's load balanced,
it's talking to the downstream services.

51
00:02:48.960 --> 00:02:51.437
But first it's going to
the service registry and

52
00:02:51.437 --> 00:02:54.080
load balancing across the two of them.

53
00:02:54.080 --> 00:02:54.720
See that?

54
00:02:56.720 --> 00:03:01.760
That's all happening in the client in
the Java code that's doing the call.

55
00:03:01.760 --> 00:03:04.500
You can configure the algorithm
that you use for that.

56
00:03:04.500 --> 00:03:05.340
This is an abstraction.

57
00:03:05.340 --> 00:03:06.672
It's called load balancer, right?

58
00:03:06.672 --> 00:03:09.700
You can plug in your own implementation,
but we have other implementations.

