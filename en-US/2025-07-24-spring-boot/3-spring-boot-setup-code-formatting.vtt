WEBVTT

1
00:00:01.040 --> 00:00:03.600
&gt;&gt; Josh Long: We used Start Spring IO.

2
00:00:03.600 --> 00:00:06.592
This is another thing that's worth
understanding is that Start Spring IO is

3
00:00:06.592 --> 00:00:08.800
where I'm going to generate
all my new projects today.

4
00:00:08.800 --> 00:00:12.720
I'm going to go here, Start Spring IO and
we're going to generate new projects.

5
00:00:12.720 --> 00:00:14.640
You can choose all these different things.

6
00:00:14.640 --> 00:00:17.840
We saw an enumeration of
that when you use your ide.

7
00:00:17.840 --> 00:00:22.570
If you go to Intellij for example,
and you go to File new project and

8
00:00:22.570 --> 00:00:28.330
then you choose Spring boot, this is in
turning, in turn using Start Spring IO.

9
00:00:29.850 --> 00:00:33.897
So the integration in your
IDE is just talking to

10
00:00:33.897 --> 00:00:37.347
the REST API powered by Start Spring IO.

11
00:00:37.347 --> 00:00:38.170
And then that's a good point.

12
00:00:38.170 --> 00:00:41.929
Start Spring IO is a REST API,
it's a service.

13
00:00:41.929 --> 00:00:46.870
So if I curl Start Spring IO,
you get a menu of all the different

14
00:00:46.870 --> 00:00:51.250
dependencies that are available here,
there you go.

15
00:00:51.250 --> 00:00:52.210
It's a table, believe it or not.

16
00:00:52.210 --> 00:00:54.810
You just can't really
see because it's weird.

17
00:00:54.810 --> 00:00:56.730
So go over here.

18
00:00:56.730 --> 00:00:57.370
There you go.

19
00:00:57.370 --> 00:00:59.610
Start that Spring.io,
here's the web service.

20
00:00:59.610 --> 00:01:00.970
You just curl it, right?

21
00:01:00.970 --> 00:01:01.873
So you can initialize,

22
00:01:01.873 --> 00:01:04.970
you can automate all these different
projects that we're going to build.

23
00:01:04.970 --> 00:01:08.599
And in fact, if you go here and
you get a configuration of a project you

24
00:01:08.599 --> 00:01:12.916
really like, let's say I want to make sure
that every using Java 24 and Maven and

25
00:01:12.916 --> 00:01:16.410
3.4 and the web support,
just share it, right?

26
00:01:16.410 --> 00:01:17.850
Share.

27
00:01:17.850 --> 00:01:24.020
So that is your endpoint
to generate that project.

28
00:01:24.020 --> 00:01:27.083
Go there and it'll actually
generate the same exact project,

29
00:01:27.083 --> 00:01:28.426
identically configured.

30
00:01:28.426 --> 00:01:31.261
Or you can script it, like I said,
you can do one of these.

31
00:01:31.261 --> 00:01:35.876
You can take curl start.spring.io and
add web,data-jpa,

32
00:01:35.876 --> 00:01:40.260
specify gradle,
specify base directory, etc.

33
00:01:40.260 --> 00:01:43.580
So this is a very,
very useful tool to incept new projects.

34
00:01:43.580 --> 00:01:48.990
I use the browser based
experience because I'm a noob.

35
00:01:48.990 --> 00:01:51.167
But you can use whatever you want, right?

36
00:01:51.167 --> 00:01:53.979
If you wanna do the CLI and that makes
you happy, go for it, it's there.

37
00:01:53.979 --> 00:01:57.870
It's the same thing that
the IDEs use to win.

38
00:01:57.870 --> 00:01:58.990
What about IDEs?

39
00:01:58.990 --> 00:02:01.870
What are you using for your editor?

40
00:02:01.870 --> 00:02:02.670
&gt;&gt; Speaker 2: IntelliJ.

41
00:02:02.670 --> 00:02:04.066
&gt;&gt; Josh Long: Okay.

42
00:02:04.066 --> 00:02:06.270
Same.
Same, IntelliJ?

43
00:02:06.270 --> 00:02:10.670
That's probably gonna be in the norm,
but it doesn't have to be.

44
00:02:10.670 --> 00:02:12.510
I love intellij, I'm using intellij.

45
00:02:12.510 --> 00:02:14.230
You don't have to though,
that's all I'm trying to say.

46
00:02:14.230 --> 00:02:17.850
So in the Java ecosystem there's a.

47
00:02:17.850 --> 00:02:20.010
It used to be that Eclipse was the thing,
right?

48
00:02:20.010 --> 00:02:21.690
Eclipse was the IDE of choice.

49
00:02:21.690 --> 00:02:24.890
And so when I started in my Role
as a spring developer Advocate.

50
00:02:24.890 --> 00:02:27.713
Back in 2010, I would ask people,
I'd poll the audience,

51
00:02:27.713 --> 00:02:30.450
how many people are using Eclipse,
how many using IntelliJ?

52
00:02:30.450 --> 00:02:35.370
The minority were using IntelliJ and
the very vast majority was using Eclipse.

53
00:02:35.370 --> 00:02:38.490
That said, the tables have
sort of turned at this point.

54
00:02:38.490 --> 00:02:39.502
Yes sir.

55
00:02:39.502 --> 00:02:44.508
&gt;&gt; Speaker 3: People online were
saying IntelliJ, VS Code and.

56
00:02:44.508 --> 00:02:45.880
&gt;&gt; Josh Long: Dope, so good.

57
00:02:45.880 --> 00:02:48.440
Okay, so
we'll talk about those in a second.

58
00:02:48.440 --> 00:02:49.920
Things have definitely changed.

59
00:02:49.920 --> 00:02:51.480
IntelliJ is now the majority.

60
00:02:51.480 --> 00:02:54.840
That said, there's a new contender
in town, isn't there, right?

61
00:02:54.840 --> 00:02:57.280
Which he just alluded to,
which is Visual Studio code.

62
00:02:57.280 --> 00:02:59.560
When I say new,
I mean more than a decade at this point.

63
00:02:59.560 --> 00:03:02.854
But one of the things that's so
interesting about Visual Studio code

64
00:03:02.854 --> 00:03:05.600
is that it has this thing
called a language server model.

65
00:03:05.600 --> 00:03:10.136
And basically Microsoft, faced with
trying to make inroads in existing,

66
00:03:10.136 --> 00:03:14.888
well entrenched industries and ecosystems
like Java, was wondering how they

67
00:03:14.888 --> 00:03:19.580
could bring the best of that
ecosystem into an IDE built in node.

68
00:03:19.580 --> 00:03:23.246
And they realized, okay,
well we're not going to be

69
00:03:23.246 --> 00:03:27.980
able to rebuild the best Java tooling
in a language that's not Java.

70
00:03:27.980 --> 00:03:32.380
Ditto for net, ditto for Python,
ditto for every other language.

71
00:03:32.380 --> 00:03:36.020
So they built a component model, they
built a plugin model based on a protocol.

72
00:03:36.020 --> 00:03:37.180
It's a network, it's a wire protocol.

73
00:03:37.180 --> 00:03:37.860
It's not a wire protocol.

74
00:03:37.860 --> 00:03:40.830
It's a in process,
separate process protocol.

75
00:03:40.830 --> 00:03:44.430
It's called Language Server
LSP Language Server Protocol.

76
00:03:44.430 --> 00:03:47.661
And that protocol, super good, right?

77
00:03:47.661 --> 00:03:48.230
It's taken off.

78
00:03:48.230 --> 00:03:49.350
There's been a Cambrian explosion.

79
00:03:49.350 --> 00:03:51.550
That's why Visual Studio code is so
darn popular.

80
00:03:51.550 --> 00:03:53.176
And that's why you can run and

81
00:03:53.176 --> 00:03:57.790
write code so effectively in one tool
against a number of different languages.

82
00:03:57.790 --> 00:03:59.773
So we who have we on the spring team,

83
00:03:59.773 --> 00:04:02.694
we built this tooling called
the Spring Tool Suite.

84
00:04:02.694 --> 00:04:06.230
It's a set of plug-ins for
Eclipse that was very, very popular.

85
00:04:06.230 --> 00:04:10.070
Obviously these days I would expect that
IntelliJ is more popular that plugin.

86
00:04:10.070 --> 00:04:12.630
That support though was still very good.

87
00:04:12.630 --> 00:04:16.710
We extracted that from Eclipse and
packaged it as an lsp.

88
00:04:16.710 --> 00:04:20.456
So now when you use Visual Studio code and
you install the spring boot support,

89
00:04:20.456 --> 00:04:23.510
you're using the support that we built for
Eclipse.

90
00:04:23.510 --> 00:04:25.150
It's as good as anything out there, right?

91
00:04:25.150 --> 00:04:25.990
It's very, very good.

92
00:04:25.990 --> 00:04:29.609
So the most popular way to build
spring boot tools is to use the,

93
00:04:29.609 --> 00:04:31.724
what is it called, the Java bundle or

94
00:04:31.724 --> 00:04:35.345
whatever in Visual Studio code
that installs the JVM support,

95
00:04:35.345 --> 00:04:40.680
the JVM Java LSP and then it installs
the spring boot support, which is from us.

96
00:04:40.680 --> 00:04:44.643
So we are the maintainers of that
LSP that's also very recommended and

97
00:04:44.643 --> 00:04:46.600
same thing in those experiences.

98
00:04:46.600 --> 00:04:48.922
Inside of Eclipse or
inside of Visual Studio code,

99
00:04:48.922 --> 00:04:51.520
there is a wizard that you can
use to go to start spring IO.

100
00:04:51.520 --> 00:04:52.040
And guess what?

101
00:04:52.040 --> 00:04:55.240
All it does is it talks to the backend
rest API that I just showed you.

102
00:04:55.240 --> 00:04:58.481
So all roads lead to start.spring.io,
okay?

103
00:04:58.481 --> 00:05:02.480
Command line, the browser, your IntelliJ,
your Eclipse, your Visual Studio Code.

104
00:05:02.480 --> 00:05:03.560
Somebody mentioned neovim.

105
00:05:03.560 --> 00:05:05.280
You can use LSPS from neovim.

106
00:05:05.280 --> 00:05:10.263
Don't ask me how I
actually got LSPS working

107
00:05:10.263 --> 00:05:15.120
in Emacs and that felt satisfying enough.

108
00:05:15.120 --> 00:05:17.360
I don't know about neovim.

109
00:05:17.360 --> 00:05:21.720
I wish prime were here,
he'd sort us out, but okay.

110
00:05:21.720 --> 00:05:22.760
Anyway, use whatever you want.

111
00:05:22.760 --> 00:05:23.680
It's my point.

112
00:05:23.680 --> 00:05:24.520
I don't actually care.

113
00:05:24.520 --> 00:05:28.147
And the reason I don't care is because you
should build your project in such a way

114
00:05:28.147 --> 00:05:31.466
that it doesn't matter what tools
you yourself are working on, right?

115
00:05:31.466 --> 00:05:33.260
Again, git clone run.

116
00:05:33.260 --> 00:05:39.980
So we talked about start.spring.io and how
you can use it to incept a new project.

117
00:05:39.980 --> 00:05:41.100
I actually just did that.

118
00:05:41.100 --> 00:05:45.220
I have a project here, Start Spring
that I built and I wrote some code.

119
00:05:45.220 --> 00:05:46.140
Not a lot of code.

120
00:05:46.140 --> 00:05:52.100
This is 1, 2, 3, 4, 5, 6,
this is 7 and technically 8.

121
00:05:52.100 --> 00:05:52.740
But do we really.

122
00:05:52.740 --> 00:05:53.540
Is that fair?

123
00:05:54.740 --> 00:05:56.980
Couldn't it just be seven?

124
00:05:56.980 --> 00:05:59.500
And does this have to be there?

125
00:05:59.500 --> 00:06:00.660
See, that's still fine.

126
00:06:00.660 --> 00:06:01.540
Right?
Whatever.

127
00:06:01.540 --> 00:06:03.180
And my point is,
it's not even 10 lines of code.

128
00:06:03.180 --> 00:06:06.965
Even if you have the extra new lines for
the one curly bracket, it's a very,

129
00:06:06.965 --> 00:06:08.339
very small amount of code.

130
00:06:08.339 --> 00:06:11.860
But imagine something more significant,
more meaty, right?

131
00:06:11.860 --> 00:06:15.876
And imagine people contributing in
every other IDE I'm using IntelliJ,

132
00:06:15.876 --> 00:06:19.850
if I do this, let's say I just
commit the code like that into the.

133
00:06:19.850 --> 00:06:21.770
Into the git repository.

134
00:06:21.770 --> 00:06:23.173
Is that gonna make me friends?

135
00:06:23.173 --> 00:06:26.090
This is not how we should behave.

136
00:06:26.090 --> 00:06:28.150
Now, if we're all using IntelliJ,

137
00:06:28.150 --> 00:06:32.610
maybe we can just have a pre commit that
just does the IntelliJ code formatting.

138
00:06:32.610 --> 00:06:36.090
But I quite like having a little
bit of enforcement whenever I can.

139
00:06:36.090 --> 00:06:42.530
So one of my favorite tools is the Spring
Java format Maven plugin or Gradle.

140
00:06:42.530 --> 00:06:43.450
It's available for Gradle.

141
00:06:43.450 --> 00:06:45.480
The Spring boot team built this.

142
00:06:45.480 --> 00:06:46.920
We actually built this plugin ourselves.

143
00:06:48.200 --> 00:06:52.590
And it's called, there you go,
spring-javaformat,

144
00:06:52.590 --> 00:06:57.080
GitHub.com, spring-io spring-javaformat,
okay?

145
00:06:57.080 --> 00:07:02.720
Okay, and I'll just go ahead and
copy and paste this Stanza.

146
00:07:02.720 --> 00:07:04.120
Here, take that.

147
00:07:04.120 --> 00:07:06.120
Put that in my pom xml.

148
00:07:06.120 --> 00:07:09.320
Go down to my plugins paste.

149
00:07:09.320 --> 00:07:12.820
Get rid of the extra duplicative
plugins stands elements.

150
00:07:15.300 --> 00:07:16.100
Fantastic.

151
00:07:16.100 --> 00:07:20.900
Now if I go back to my source code,
lose friends.

152
00:07:22.740 --> 00:07:23.620
Get rid of that.

153
00:07:23.620 --> 00:07:26.999
Now I do maven package.

154
00:07:26.999 --> 00:07:28.500
Let's say I do a package.

155
00:07:28.500 --> 00:07:29.620
I'm going to build the code.

156
00:07:29.620 --> 00:07:33.860
In effect, it says, hey,
formatting violations found.

157
00:07:33.860 --> 00:07:34.540
Okay, fine.

158
00:07:34.540 --> 00:07:35.380
How do I fix it?

159
00:07:36.740 --> 00:07:42.590
Maven do that, oops, don't wanna subshell.

160
00:07:42.590 --> 00:07:43.270
Okay, there you go.

161
00:07:43.270 --> 00:07:44.990
So now it's formatted the code.

162
00:07:44.990 --> 00:07:47.230
Okay, so the code looks exactly the same.

163
00:07:47.230 --> 00:07:50.430
I'm going to say something and
I'll never repeat it, but I will say it.

164
00:07:50.430 --> 00:07:54.430
This is one of two things
that go got right.

165
00:07:55.470 --> 00:07:56.430
There, I've said it.

166
00:07:57.470 --> 00:07:59.790
Surely nobody heard that though.

167
00:07:59.790 --> 00:08:01.150
This is one of two things that got right.

168
00:08:01.150 --> 00:08:02.750
Go format is awesome.

169
00:08:02.750 --> 00:08:03.463
It's good.

170
00:08:03.463 --> 00:08:04.900
It's a very good idea, right?

171
00:08:04.900 --> 00:08:07.020
It ensures peace in the office space,
right?

172
00:08:07.020 --> 00:08:08.420
Like this is such a good idea.

173
00:08:08.420 --> 00:08:12.125
Because it doesn't matter if you're
using neovim or Visual Studio code, or

174
00:08:12.125 --> 00:08:14.260
Intellij or Eclipse or whatever.

175
00:08:14.260 --> 00:08:15.940
There's only one true formatting.

176
00:08:15.940 --> 00:08:17.820
The build will break if
you don't adhere to it.

177
00:08:17.820 --> 00:08:20.380
And it's automated, so
just why not, right, who cares?

178
00:08:20.380 --> 00:08:22.220
You can use whatever local thing you want.

179
00:08:22.220 --> 00:08:24.060
There's no arguments
about tab versus space.

180
00:08:24.060 --> 00:08:25.540
None of that just goes out the window.

181
00:08:25.540 --> 00:08:26.980
You can focus on the things that matter.

182
00:08:28.740 --> 00:08:29.660
Now look at this.

183
00:08:29.660 --> 00:08:30.740
This is kind of ugly.

184
00:08:30.740 --> 00:08:31.900
Look what just happened to my code.

185
00:08:31.900 --> 00:08:32.700
Though.

186
00:08:32.700 --> 00:08:36.299
Clearly this is not meant to be written in
such a way that they're all kind of like

187
00:08:36.299 --> 00:08:38.540
a train car crash collision thing here.

188
00:08:38.540 --> 00:08:44.220
So I hit Enter, //, right,
and then over here.

189
00:08:44.220 --> 00:08:45.820
Now go back, reformat again.

190
00:08:47.100 --> 00:08:47.660
There you go.

191
00:08:47.660 --> 00:08:48.201
That's better.
So

192
00:08:48.201 --> 00:08:53.011
the end of line format character helps it
decide to move things to the next line and

193
00:08:53.011 --> 00:08:55.500
does a pretty good job given that advice.

194
00:08:55.500 --> 00:08:58.940
If you need things to be on the next line,
use at the end of the line.

195
00:09:00.480 --> 00:09:02.880
Okay, So
I love that Spring Java format plugin.

196
00:09:02.880 --> 00:09:07.437
You notice that I've got it set up to bark
if the code doesn't have correct Java

197
00:09:07.437 --> 00:09:08.000
format.

198
00:09:09.360 --> 00:09:10.988
That's very, very useful because again,

199
00:09:10.988 --> 00:09:13.360
you want people to validate
this before they push.

200
00:09:13.360 --> 00:09:21.110
So it's validate, etc.

