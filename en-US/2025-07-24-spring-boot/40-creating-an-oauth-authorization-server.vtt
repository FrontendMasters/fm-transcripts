WEBVTT

1
00:00:00.160 --> 00:00:01.448
&gt;&gt; Josh Long: So
I've got my application here.

2
00:00:01.448 --> 00:00:02.725
This is a off.

3
00:00:02.725 --> 00:00:04.080
It's an authenticated application.

4
00:00:04.080 --> 00:00:06.198
But I've got just the one application,
right?

5
00:00:06.198 --> 00:00:07.560
That's not how things work normally.

6
00:00:07.560 --> 00:00:10.480
Normally I've got more
than one application.

7
00:00:10.480 --> 00:00:12.840
I don't want to like have
to add all this stuff.

8
00:00:12.840 --> 00:00:13.725
It wasn't that bad.

9
00:00:13.725 --> 00:00:17.727
To be fair, I added lines 90, so 73 to 96,

10
00:00:17.727 --> 00:00:22.240
so 23 lines of code or
something like that with.

11
00:00:22.240 --> 00:00:24.893
With ample spacing and
new lines and all that.

12
00:00:24.893 --> 00:00:30.448
But still, I don't want to have to
duplicate this for every single API.

13
00:00:30.448 --> 00:00:32.423
I want to centralize all this logic and

14
00:00:32.423 --> 00:00:35.430
certainly what am I going to
do with a backend REST API?

15
00:00:35.430 --> 00:00:39.223
How are they going to authenticate
if they're using passkeys, whatever?

16
00:00:39.223 --> 00:00:42.554
So what I want is some way
to handle authentication and

17
00:00:42.554 --> 00:00:47.227
then use the fact of that authentication
to then vend and validate tokens.

18
00:00:47.227 --> 00:00:49.313
This is what OAuth does, right?

19
00:00:49.313 --> 00:00:52.209
So what I want to do is I want to
create a OAuth authorization server.

20
00:00:52.209 --> 00:00:55.190
Okay, and so
we're going to use Spring security to.

21
00:00:55.190 --> 00:00:59.670
And Spring Security's authorization server
to create a spring authorization server.

22
00:00:59.670 --> 00:01:00.383
So here we go.

23
00:01:00.383 --> 00:01:04.687
Authorization server

24
00:01:04.687 --> 00:01:10.352
as.idc customer defaults.

25
00:01:10.352 --> 00:01:12.507
Defaults, okay.

26
00:01:12.507 --> 00:01:16.701
Do I have to restart this?

27
00:01:16.701 --> 00:01:19.220
Okay,
&gt;&gt; Josh Long: I need to provide

28
00:01:19.220 --> 00:01:20.624
some configuration.

29
00:01:20.624 --> 00:01:25.920
So OAuth is an OAuth
identity provider IDP.

30
00:01:25.920 --> 00:01:28.324
It needs to know about what
clients might connect to it.

31
00:01:28.324 --> 00:01:32.497
If you've ever gone to like
developer.facebook.com or developer.

32
00:01:32.497 --> 00:01:36.486
What used to be called twitter.com or
x.com or whatever, or developer LinkedIn,

33
00:01:36.486 --> 00:01:39.760
most of these pages, most of these
sites have a developer dot there.

34
00:01:39.760 --> 00:01:43.221
You can register to build a new app or
something,

35
00:01:43.221 --> 00:01:47.197
a client that will talk to
that company's APIs, okay.

36
00:01:47.197 --> 00:01:50.210
And that's OAuth behind the scenes.

37
00:01:50.210 --> 00:01:52.210
You're registering to
build an OAuth client.

38
00:01:52.210 --> 00:01:56.850
So that will talk to these
backend APIs that OAuth client.

39
00:01:56.850 --> 00:02:00.053
You need to specify things like where
you want to redirect after the OAuth

40
00:02:00.053 --> 00:02:00.690
flow is done.

41
00:02:00.690 --> 00:02:02.530
Are you building a mobile phone or
a web app?

42
00:02:02.530 --> 00:02:04.723
Right, is it a desktop console thing or
whatever so

43
00:02:04.723 --> 00:02:06.917
that you have to stipulate
all this stuff up front.

44
00:02:06.917 --> 00:02:11.259
But these are all things that you specify
when you register an OAuth client, okay?

45
00:02:11.259 --> 00:02:15.147
And then what that OAuth client
will do is it'll you're gonna,

46
00:02:15.147 --> 00:02:19.482
it'll allow you to write a program
that identifies itself as a client.

47
00:02:19.482 --> 00:02:24.270
Some user will hit your app and then you
acting as a client of like Facebook or

48
00:02:24.270 --> 00:02:29.058
LinkedIn or whatever will redirect
them to a trusted, well known domain,

49
00:02:29.058 --> 00:02:32.482
which is facebook.com or
GitHub.com or whatever.

50
00:02:32.482 --> 00:02:35.800
They'll authenticate GitHub.com with
a padlock in the browser and all that.

51
00:02:35.800 --> 00:02:36.954
You know you're in the right place.

52
00:02:36.954 --> 00:02:41.206
They'll redirect you back to the web app
and there the web app will have a token

53
00:02:41.206 --> 00:02:45.620
that they can use on your behalf
to then talk to LinkedIn's APIs.

54
00:02:45.620 --> 00:02:49.140
So at no point does this app
have your username and password.

55
00:02:49.140 --> 00:02:52.100
Only LinkedIn or only GitHub or
only Facebook has that.

56
00:02:52.100 --> 00:02:54.180
Okay, so this is very important.

57
00:02:54.180 --> 00:02:55.780
They can't lock you out of your account.

58
00:02:55.780 --> 00:02:57.220
They can't do anything malicious.

59
00:02:57.220 --> 00:03:01.300
They don't have access to pseudo
root mode in your account.

60
00:03:01.300 --> 00:03:04.860
They only have access to what you've
specifically allocated them to do.

61
00:03:04.860 --> 00:03:07.130
That's called a grant, right?

62
00:03:07.130 --> 00:03:07.760
An oauth grant.

63
00:03:07.760 --> 00:03:11.630
I give you permission to read from my
Google Drive but not write, for example.

64
00:03:12.830 --> 00:03:14.270
So I need to specify those clients.

65
00:03:14.270 --> 00:03:16.405
There's a Java object and
you can see that it's saying, hey,

66
00:03:16.405 --> 00:03:18.670
you don't have any registered
client repositories here.

67
00:03:18.670 --> 00:03:19.990
You can configure an interface.

68
00:03:19.990 --> 00:03:22.030
You can implement this
a number of different ways.

69
00:03:22.030 --> 00:03:26.198
There's one with JDBC and in memory on the
classpath and you can easily build one.

70
00:03:26.198 --> 00:03:28.954
It's not a., look,
it's a very easy API to build.

71
00:03:28.954 --> 00:03:31.280
You can imagine doing it with Mongo or
Dynamo or whatever.

72
00:03:31.280 --> 00:03:35.256
But I'm going to use
the config file version of it.

73
00:03:35.256 --> 00:03:39.059
So I shall go over here to config and

74
00:03:39.059 --> 00:03:43.920
remember that AUTH YAML
that I had earlier.

75
00:03:45.040 --> 00:03:46.595
It's back.

76
00:03:46.595 --> 00:03:51.887
So we're going to use configuration here.

77
00:03:51.887 --> 00:03:52.960
I'm going to do something.

78
00:03:52.960 --> 00:03:56.280
Spring boot supports both properties and
YAML.

79
00:03:56.280 --> 00:04:01.260
So I have to, unfortunately I
have to refactor this to be YAML.

80
00:04:01.260 --> 00:04:07.340
Okay, so spring application name is.

81
00:04:10.780 --> 00:04:16.288
Come on, it's called Auth and SQL init.

82
00:04:16.288 --> 00:04:20.220
So it's a Spring SQL init mode is always.

83
00:04:21.740 --> 00:04:22.810
Got that.

84
00:04:22.810 --> 00:04:24.702
And then finally the data source bits,
right?

85
00:04:24.702 --> 00:04:31.530
So spring data source,
URL, username password.

86
00:04:34.330 --> 00:04:35.930
Okay, so it'll be secret.

87
00:04:37.290 --> 00:04:42.750
My user, JDBC, PostgreSQL

88
00:04:42.750 --> 00:04:48.260
localhost my database.

89
00:04:48.260 --> 00:04:49.980
Okay, so now let's comment all that out.

90
00:04:49.980 --> 00:04:50.580
Good.

91
00:04:50.580 --> 00:04:52.540
Now we've got a valid YAML file.

92
00:04:52.540 --> 00:04:53.860
It's just the same thing as I had before.

93
00:04:53.860 --> 00:04:57.460
What's new is I've also configured
a client I've registered.

94
00:04:57.460 --> 00:04:58.746
You can register as many as you want.

95
00:04:58.746 --> 00:05:02.180
I've given the name OIDC Client
because I'm great with names, right?

96
00:05:02.180 --> 00:05:02.940
So here's.

97
00:05:02.940 --> 00:05:04.337
Oops, what happened there?

98
00:05:04.337 --> 00:05:05.980
It's got a client ID of spring.

99
00:05:05.980 --> 00:05:07.980
It's got a not bcrypt.

100
00:05:07.980 --> 00:05:10.420
I'm just using a no op so
it's easy to understand what password is.

101
00:05:10.420 --> 00:05:14.825
It's a password that's been encoded
with no encoding called Spring.

102
00:05:14.825 --> 00:05:18.654
And I'm asking for this client will
have the ability, if it's authenticated,

103
00:05:18.654 --> 00:05:21.390
to do client secret basic authentication.

104
00:05:21.390 --> 00:05:24.583
And it does authorization code and
refresh token flows.

105
00:05:24.583 --> 00:05:28.190
And when it's done it'll
redirect back to a client.

106
00:05:28.190 --> 00:05:32.170
Okay, so what we're building
here is an authentication and

107
00:05:32.170 --> 00:05:34.831
authorization service, an OAuth IDP.

108
00:05:34.831 --> 00:05:37.697
You might have heard of
other OAuth IDPs like Okta,

109
00:05:37.697 --> 00:05:41.960
they support OAuth Active Directory
supports OAuth, right.

110
00:05:41.960 --> 00:05:45.640
Keycloak in the Java community
supports OAuth, right.

111
00:05:45.640 --> 00:05:47.562
And this is.

112
00:05:47.562 --> 00:05:49.410
I'm going to change the port
to run in port 9090.

113
00:05:49.410 --> 00:05:51.640
So my auth application
will run in port 9090.

114
00:05:52.760 --> 00:05:54.089
Let's go to the code down here.

115
00:05:54.089 --> 00:05:57.148
I'm going to comment out this controller.

116
00:05:57.148 --> 00:05:59.160
So now this is just a pure AUTH server.

117
00:06:00.520 --> 00:06:01.320
Start that up.

118
00:06:03.320 --> 00:06:09.418
So now we go back to the lab again and
here we're going to build a service.

119
00:06:09.418 --> 00:06:11.360
And this service is a REST API.

120
00:06:11.360 --> 00:06:14.800
It's just a pure REST API that
doesn't have a front end.

121
00:06:14.800 --> 00:06:17.006
No user will hit this directly.

122
00:06:17.006 --> 00:06:19.629
They're going to hit something
in front of this, but

123
00:06:19.629 --> 00:06:22.160
they're not going to hit this directly.

124
00:06:22.160 --> 00:06:24.520
This is a REST API, but
we need to protect it.

125
00:06:24.520 --> 00:06:28.664
We need to make sure that requests
that go to the service are validated,

126
00:06:28.664 --> 00:06:30.336
that tokens are validated.

127
00:06:30.336 --> 00:06:34.638
So we've used Spring Security's
resource server, okay.

128
00:06:34.638 --> 00:06:35.724
This is in the OAUTH spec.

129
00:06:35.724 --> 00:06:37.638
You have OAuth authorization servers,

130
00:06:37.638 --> 00:06:40.396
you have OAuth resource servers
which are backend APIs and

131
00:06:40.396 --> 00:06:43.690
you have OAuth clients which
are the things that intercept the.

132
00:06:43.690 --> 00:06:48.366
They're the user facing thing that
initiates the request response dance to

133
00:06:48.366 --> 00:06:52.542
incept the token which you can then
use to call the backend service.

134
00:06:52.542 --> 00:06:57.805
So in order for this to work,
it's going to run in port 8080.

135
00:06:57.805 --> 00:06:59.950
Remember the auth server
is running on 9090.

136
00:06:59.950 --> 00:07:01.320
This is my backend API.

137
00:07:01.320 --> 00:07:02.990
It's going to run on 8080.

138
00:07:02.990 --> 00:07:05.310
And I'm going to let's.

139
00:07:05.310 --> 00:07:08.750
You know the simple controller that I had
earlier, I'LL just do the same thing here.

140
00:07:08.750 --> 00:07:11.040
Class hello, controller.

141
00:07:12.281 --> 00:07:18.245
&gt;&gt; Josh Long: Okay, hello, map.

142
00:07:18.245 --> 00:07:19.870
String string.

143
00:07:19.870 --> 00:07:22.350
Hello, principal.

144
00:07:22.350 --> 00:07:27.950
Okay, and
then it's just going to be hello.

145
00:07:27.950 --> 00:07:29.080
Okay, good.

146
00:07:29.080 --> 00:07:30.040
Seems pretty straightforward.

147
00:07:30.040 --> 00:07:31.120
Right, I'm just going to start this up.

148
00:07:31.120 --> 00:07:36.204
The only thing this is going to need to
do its work is the location of the Auth

149
00:07:36.204 --> 00:07:42.040
server where it can validate the tokens,
which we know to be on localhost 9090.

150
00:07:43.720 --> 00:07:47.379
So basically, requests are going to come
into this service and if they don't have

151
00:07:47.379 --> 00:07:50.680
a token, the filter is going to reject
the request and say, no, denied.

152
00:07:51.890 --> 00:07:54.007
And if they do have a token,
we need to know if they're valid.

153
00:07:54.007 --> 00:07:56.872
So we're going to call the Auth server
whenever the request comes in and

154
00:07:56.872 --> 00:07:58.890
the Auth server,
that's called the issuer uri.

155
00:07:58.890 --> 00:08:00.170
Okay, so that's good.

156
00:08:00.170 --> 00:08:01.330
But now we need something to.

157
00:08:01.330 --> 00:08:06.450
We need again, the service is not going
to be visible to the open world, right?

158
00:08:06.450 --> 00:08:09.250
The outside of the world is not going
to ever talk to that service directly.

159
00:08:09.250 --> 00:08:13.090
You don't even need to have a route to it,
basically, right in the cloud.

160
00:08:13.090 --> 00:08:14.130
But I do need something.

161
00:08:14.130 --> 00:08:15.360
The user is going to talk to something.

162
00:08:15.360 --> 00:08:19.448
They're going to go to acme.com or
whatever, some website, and

163
00:08:19.448 --> 00:08:23.463
they're going to see your beautiful
React app and angular code.

164
00:08:23.463 --> 00:08:25.981
And that React app is going
to call your backend APIs and

165
00:08:25.981 --> 00:08:29.730
that's going to call the service
behind the scenes, right?

166
00:08:29.730 --> 00:08:31.730
So we need to build that front end.

167
00:08:31.730 --> 00:08:34.046
Well, remember what we just talked about,
right?

168
00:08:34.046 --> 00:08:38.248
What's a really good way to centralize
things like authentication and

169
00:08:38.248 --> 00:08:42.379
to make access to your JavaScript and
your APIs easy?

170
00:08:42.379 --> 00:08:43.299
Spring Cloud gateway.

171
00:08:43.299 --> 00:08:45.899
Right, so go back to the lab again, okay?

172
00:08:45.899 --> 00:08:49.858
And here we're going to build a client,
an OAuth client, and

173
00:08:49.858 --> 00:08:53.339
we're going to bring in the web support.

174
00:08:53.339 --> 00:08:56.299
And that's it?

175
00:08:56.299 --> 00:08:57.339
No, that's not it.

176
00:08:58.459 --> 00:08:59.819
Just testing you.

177
00:08:59.819 --> 00:09:01.196
Okay.
Gateway.

178
00:09:01.196 --> 00:09:04.374
Go back here, okay.

179
00:09:05.524 --> 00:09:12.427
Nope, no, don't do that.

180
00:09:12.427 --> 00:09:13.510
Get nervous every time I do that.

181
00:09:13.510 --> 00:09:14.310
Okay, here we go.

182
00:09:14.310 --> 00:09:21.260
UAO client, zip.

183
00:09:21.260 --> 00:09:24.510
So service properties,
application properties.

184
00:09:24.510 --> 00:09:27.494
Service port is going to be 8081.

185
00:09:27.494 --> 00:09:29.190
Remember in the auth server.

186
00:09:29.190 --> 00:09:34.746
In our application YAML we said that when
a user has visited the Auth server and

187
00:09:34.746 --> 00:09:37.056
successfully authenticated,

188
00:09:37.056 --> 00:09:42.790
they're going to be redirected back
to 8081loginoauth2 code spring.

189
00:09:42.790 --> 00:09:45.590
This is the name, that's this, right?

190
00:09:45.590 --> 00:09:46.710
That's the client.

191
00:09:46.710 --> 00:09:51.416
This is the URL set up by
the OAuth client support on

192
00:09:51.416 --> 00:09:56.470
the OAuth client API that
we're building right now.

193
00:09:56.470 --> 00:09:58.070
So yeah, this is going to be a.

194
00:09:58.070 --> 00:10:05.230
Well, first of all, it's going to need
to stipulate as what OAuth client.

195
00:10:05.230 --> 00:10:06.758
We want to behave or act or whatever.

196
00:10:06.758 --> 00:10:12.114
So I'll take some properties from
this config file, paste them here.

197
00:10:12.114 --> 00:10:16.000
This is the mirror image of what
we provided on the server side.

198
00:10:16.000 --> 00:10:20.320
In the OAuth IDP, we're saying I want
to act as a client called Spring.

199
00:10:20.320 --> 00:10:22.640
Here's my client ID and my client secret.

200
00:10:22.640 --> 00:10:26.817
And when I'm done,
redirect me back to this endpoint.

201
00:10:26.817 --> 00:10:28.906
So I'm going to say I'm
acting as a client,

202
00:10:28.906 --> 00:10:32.160
talk to that AUTH server to get
the token one time redirected back.

203
00:10:32.160 --> 00:10:33.290
Then here's what to do.

204
00:10:33.290 --> 00:10:34.890
Okay, so I'm, I'm acting as that.

205
00:10:34.890 --> 00:10:40.631
So now in the code,
remember I want this to be a proxy.

206
00:10:40.631 --> 00:10:46.414
So we're going to use Spring Cloud Gateway

207
00:10:46.414 --> 00:10:50.592
server response gateway, and

208
00:10:50.592 --> 00:10:57.192
we're going to say return route.build.get.

209
00:10:57.192 --> 00:11:01.563
So for all requests that have
no particular place to go,

210
00:11:01.563 --> 00:11:07.893
we're going to serve up some JavaScript
on port whatever, 8020, I think.

211
00:11:07.893 --> 00:11:14.028
Okay, but for requests that
are bound to the API like that,

212
00:11:14.028 --> 00:11:18.580
we'll serve it up on port 8080, okay.

213
00:11:18.580 --> 00:11:20.301
Now, of course,
remember what we saw before,

214
00:11:20.301 --> 00:11:22.020
we're going to have to do a before filter.

215
00:11:22.020 --> 00:11:25.780
So before filter functions
to rewrite the path.

216
00:11:25.780 --> 00:11:28.580
So API just becomes this.

217
00:11:28.580 --> 00:11:31.297
And then also we want to handle OAuth.

218
00:11:31.297 --> 00:11:35.033
We want to make sure that when somebody
goes to the proxy on port 8081,

219
00:11:35.033 --> 00:11:38.548
that if there's no token,
that we immediately reject the request.

220
00:11:38.548 --> 00:11:42.294
And then redirect them to the Auth
server to authenticate, right?

221
00:11:42.294 --> 00:11:45.942
And that token,
that filter is called a token relay.

222
00:11:45.942 --> 00:11:50.441
So filter, token relay,
filter functions, okay?

223
00:11:50.441 --> 00:11:53.758
And this is going to be aware of the fact
that you've got Spring Security's client

224
00:11:53.758 --> 00:11:56.110
support there and
it's going to incept the flow.

225
00:11:56.110 --> 00:11:58.950
So before we start this up,
let's get this JavaScript going.

226
00:11:58.950 --> 00:11:59.870
Where did I put that?

227
00:11:59.870 --> 00:12:01.997
I think I trust me, I care for

228
00:12:01.997 --> 00:12:06.721
you too much to make you watch me
code JavaScript live on stage.

229
00:12:06.721 --> 00:12:08.350
So we're going to just do this like this.

230
00:12:08.350 --> 00:12:12.237
We'll say, security ui,

231
00:12:12.237 --> 00:12:16.126
here's my index HTML and.

232
00:12:16.126 --> 00:12:19.410
And you can see this HTML page is
the ultimate in trivial, right?

233
00:12:19.410 --> 00:12:20.570
I've added a listener.

234
00:12:20.570 --> 00:12:25.210
I'm calling API and
I'm getting the endpoint, right?

235
00:12:25.210 --> 00:12:27.349
The hello, the name.

236
00:12:27.349 --> 00:12:31.097
So that's the endpoint in the Service.

237
00:12:31.097 --> 00:12:32.370
Where's my service here?

238
00:12:33.970 --> 00:12:34.690
What does it say?

239
00:12:34.690 --> 00:12:36.388
It's called name.

240
00:12:37.686 --> 00:12:38.850
&gt;&gt; Josh Long: And
actually let me just return that.

241
00:12:38.850 --> 00:12:41.001
I'll say name.

242
00:12:42.999 --> 00:12:44.721
&gt;&gt; Josh Long: Okay, so
I'm going to restart the service.

243
00:12:44.721 --> 00:12:45.770
So now here's my JavaScript.

244
00:12:45.770 --> 00:12:50.050
I'm going to start it by just
running this little script run.

245
00:12:50.050 --> 00:12:52.650
All that's going to do is use Python and
serve it.

246
00:12:52.650 --> 00:12:55.570
You can use Node, you can use whatever,
you can even use Java.

247
00:12:55.570 --> 00:12:56.850
But it's a little verbose in that case.

248
00:12:58.930 --> 00:13:01.970
Okay, so that's up and running,
service is up and running.

249
00:13:01.970 --> 00:13:02.770
Here's the gateway.

250
00:13:02.770 --> 00:13:03.270
Let's start that up.

251
00:13:07.410 --> 00:13:13.853
&gt;&gt; Josh Long: So
now if I go to 8081 incognito mode.

252
00:13:13.853 --> 00:13:19.276
Okay, 127.0.0.1:8081,

253
00:13:19.276 --> 00:13:26.964
I think it redirects me to
the auth server and port 9090.

254
00:13:26.964 --> 00:13:33.750
Now I log in, redirects me back, and
there's my JavaScript page on the client.

255
00:13:35.840 --> 00:13:38.158
So the gateway proxied two things.

256
00:13:38.158 --> 00:13:43.024
It proxied forward slash API
in the same host and port.

257
00:13:43.024 --> 00:13:48.080
I'm proxying API and that gives me the
back end service, which is on port 8080.

258
00:13:48.080 --> 00:13:51.200
And it proxied the JavaScript
which is in my.

259
00:13:51.200 --> 00:13:55.808
You can imagine a CDN, but
in this case it's being run from a static

260
00:13:55.808 --> 00:14:00.760
directory in my local file system
because there's a security filter.

261
00:14:00.760 --> 00:14:02.670
There's a spring security filter here.

262
00:14:02.670 --> 00:14:06.710
I tried to access this JavaScript before
I ever got a chance to render that page.

263
00:14:06.710 --> 00:14:08.350
Before those bytes ever got to me.

264
00:14:08.350 --> 00:14:10.092
I was redirected to get a token.

265
00:14:10.092 --> 00:14:11.950
It redirected back to the gateway.

266
00:14:11.950 --> 00:14:14.110
The gateway established
the session with a token in it.

267
00:14:14.110 --> 00:14:19.070
And now every request is in terms
of this authenticated session.

268
00:14:19.070 --> 00:14:21.175
Easy, notice how nice and
clean my code is.

269
00:14:21.175 --> 00:14:23.950
I don't have JWT tokens
being banded around.

270
00:14:23.950 --> 00:14:26.910
I don't have to worry about sending
the header in the JavaScript code.

271
00:14:26.910 --> 00:14:28.750
I don't have to worry about cores either.

272
00:14:28.750 --> 00:14:31.640
This is actually a much more
efficient way to build a system.

273
00:14:32.680 --> 00:14:34.680
Okay, any questions on all that?

274
00:14:34.680 --> 00:14:36.313
Or at least do you understand the concept?

275
00:14:36.313 --> 00:14:38.520
Like conceptually passwords terrible.

276
00:14:38.520 --> 00:14:42.392
There's a lot of ways to avoid them,
including one time tokens, pass keys,

277
00:14:42.392 --> 00:14:43.474
and of course OAuth.

278
00:14:43.474 --> 00:14:47.057
And OAuth lets you scale out all those
approaches for your entire system, right?

279
00:14:47.057 --> 00:14:51.066
It's not just one app at a time now and
this code for your full analysis and

280
00:14:51.066 --> 00:14:52.856
scrutiny is in the repository.

