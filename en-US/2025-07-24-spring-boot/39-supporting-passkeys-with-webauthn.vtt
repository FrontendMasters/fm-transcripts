WEBVTT

1
00:00:00.240 --> 00:00:01.440
&gt;&gt; Josh Long: But
how do I avoid passwords?

2
00:00:01.440 --> 00:00:05.240
Well, you use a different factor here.

3
00:00:05.240 --> 00:00:08.360
I'm using secure encoded passwords,
but it's still a password.

4
00:00:08.360 --> 00:00:10.640
I want to avoid that even
with a password manager.

5
00:00:10.640 --> 00:00:11.400
Still tedious.

6
00:00:11.400 --> 00:00:12.800
So I can use a different factor.

7
00:00:12.800 --> 00:00:16.698
One thing I can do, let's go back
to my code here is I go back to my.

8
00:00:16.698 --> 00:00:19.520
I'm gonna add authorization.

9
00:00:19.520 --> 00:00:22.106
I'm going to start actually configuring
the security filter chain that we talked

10
00:00:22.106 --> 00:00:23.280
about earlier.

11
00:00:23.280 --> 00:00:27.050
Okay, there we go.

12
00:00:27.050 --> 00:00:28.970
And I'm going to say I want to enable.

13
00:00:30.090 --> 00:00:31.267
I'll say build.

14
00:00:31.267 --> 00:00:32.330
I'll say return that.

15
00:00:32.330 --> 00:00:35.370
And here I'm going to do one time tokens.

16
00:00:36.650 --> 00:00:38.330
We'll talk about this in a second.

17
00:00:38.330 --> 00:00:42.260
I want to recreate the default behavior
which is what I'm overriding by creating

18
00:00:42.260 --> 00:00:42.850
this bean.

19
00:00:42.850 --> 00:00:44.970
So form login is what we had before.

20
00:00:44.970 --> 00:00:45.970
I'm gonna recreate that.

21
00:00:45.970 --> 00:00:50.388
That's still there, but
now I'm going to enable one time tokens.

22
00:00:50.388 --> 00:00:53.630
So token generation success center.

23
00:00:53.630 --> 00:00:58.590
Okay, and this, the way this works.

24
00:00:58.590 --> 00:00:59.590
You've probably seen these before.

25
00:00:59.590 --> 00:01:02.310
They're called like magic links
in other contexts, right?

26
00:01:02.310 --> 00:01:05.750
You go to a website, you say,
it says, what's your email username?

27
00:01:05.750 --> 00:01:08.757
Or whatever.
You say, okay, it's whatever joshlung.com

28
00:01:08.757 --> 00:01:12.510
it sends you a link and you click
on the link and you're logged in.

29
00:01:12.510 --> 00:01:16.762
The reasoning behind that being, okay,
well if you have access to your email,

30
00:01:16.762 --> 00:01:19.550
you know, you must be who you say you are.

31
00:01:19.550 --> 00:01:20.750
So we're not trusting that.

32
00:01:20.750 --> 00:01:24.480
We have a system that's secure enough
to protect you, but we're trusting that

33
00:01:24.480 --> 00:01:28.350
Google does, or Microsoft or whoever
administers your email account does.

34
00:01:28.350 --> 00:01:29.350
Here's that callback.

35
00:01:29.350 --> 00:01:32.430
I'm not going to set up Twilio or
SendGrid or whatever for you.

36
00:01:32.430 --> 00:01:32.950
You can do that.

37
00:01:32.950 --> 00:01:36.077
There's Java APIs and even spring
boot integrations for all that.

38
00:01:36.077 --> 00:01:37.230
But let's just do a simple example.

39
00:01:37.230 --> 00:01:40.950
Let's suppose I am going to send
a response to the client out of band.

40
00:01:40.950 --> 00:01:45.160
I'm going to use a magical out of band
communication mechanism called console

41
00:01:45.160 --> 00:01:47.660
mail where I just send
things to standard out.

42
00:01:47.660 --> 00:01:52.460
So we're going to say
response.set header HTTP headers.

43
00:01:53.500 --> 00:01:58.350
Wrong one, httpheaders.content.TYPE

44
00:01:58.350 --> 00:02:03.740
MediaType is TEXT_PLAIN_VALUE, okay?

45
00:02:03.740 --> 00:02:08.300
And then we're gonna say response.set or
getWriter.

46
00:02:08.300 --> 00:02:09.940
This is the low level servlet API.

47
00:02:09.940 --> 00:02:14.230
This is the API that underpins Spring MVC
and all the other stuff we've seen so far.

48
00:02:14.230 --> 00:02:16.461
So I'm just using the low level thing.

49
00:02:16.461 --> 00:02:19.310
I'm gonna say,
you've got console mail, right?

50
00:02:20.430 --> 00:02:22.350
And then we'll say flush, okay?

51
00:02:23.950 --> 00:02:28.690
And here, please visit and

52
00:02:28.690 --> 00:02:34.669
it'll be HTTP localhost8080

53
00:02:34.669 --> 00:02:41.640
login OTT token equals one time token.

54
00:02:41.640 --> 00:02:43.160
Get token value.

55
00:02:43.160 --> 00:02:45.800
Okay, so let's try that out.

56
00:02:45.800 --> 00:02:48.520
So that's the token that's generated
by spring security for you.

57
00:02:48.520 --> 00:02:49.760
Obviously this can be a lambda.

58
00:02:49.760 --> 00:02:50.840
That's a lot nicer that way.

59
00:02:52.680 --> 00:02:59.640
So now command shift n incognito window.

60
00:02:59.640 --> 00:03:02.680
Okay, what happened?

61
00:03:06.496 --> 00:03:09.855
I forgot to add the authorization.

62
00:03:09.855 --> 00:03:10.580
What is this?
Since so

63
00:03:10.580 --> 00:03:13.370
as soon as you define one of these,
you're overriding the defaults.

64
00:03:13.370 --> 00:03:14.450
So you go back to zero.

65
00:03:14.450 --> 00:03:16.130
You have no protection at all.

66
00:03:16.130 --> 00:03:17.480
So when you start doing that,

67
00:03:17.480 --> 00:03:20.370
make sure that you lock down
to get the equivalent effect.

68
00:03:20.370 --> 00:03:23.730
I'm saying any request that comes
in needs to be authenticated.

69
00:03:23.730 --> 00:03:24.810
Make sure you don't forget that.

70
00:03:24.810 --> 00:03:27.850
Okay, so these two things are equivalent
to what you get out of the box.

71
00:03:27.850 --> 00:03:30.576
If you don't define one of these
beans by yourself, you are saying,

72
00:03:30.576 --> 00:03:33.250
I support login and
all requests need to be authenticated.

73
00:03:33.250 --> 00:03:34.930
So hello.

74
00:03:34.930 --> 00:03:36.010
Okay, look at that.

75
00:03:36.010 --> 00:03:38.370
So I've got the username and
password just like before.

76
00:03:38.370 --> 00:03:39.210
We can prove that.

77
00:03:39.210 --> 00:03:40.370
Still working, right?

78
00:03:40.370 --> 00:03:41.250
Good.

79
00:03:41.250 --> 00:03:44.530
Go back to hello,
command shift n incognito window.

80
00:03:44.530 --> 00:03:46.770
Now I'm going to ask for a console mail.

81
00:03:46.770 --> 00:03:48.610
Okay, you've got console mail.

82
00:03:48.610 --> 00:03:51.311
Great.
Click on this link, give me a token,

83
00:03:51.311 --> 00:03:53.584
hit enter, and now I'm logged in.

84
00:03:53.584 --> 00:03:56.140
You can prove it by going to hello.

85
00:03:56.140 --> 00:04:00.380
Okay, so that's one time tokens or
magic links or whatever.

86
00:04:00.380 --> 00:04:03.580
Again, you can send an email instead of
doing what I just did on the console.

87
00:04:03.580 --> 00:04:06.220
You can send a phone message,
something like that.

88
00:04:06.220 --> 00:04:07.820
Okay, so that avoids passwords.

89
00:04:07.820 --> 00:04:10.300
You're trusting some other
factor besides the password.

90
00:04:12.220 --> 00:04:16.540
But have you all set up passkeys?

91
00:04:17.900 --> 00:04:19.980
Passkeys are pretty dope.

92
00:04:19.980 --> 00:04:21.020
Have you heard of passkeys?

93
00:04:21.020 --> 00:04:23.380
Passkeys, they're everywhere.

94
00:04:23.380 --> 00:04:25.020
Google, GitHub, Microsoft.

95
00:04:25.020 --> 00:04:27.263
Everybody's saying, hey,
every time you log in, they're like,

96
00:04:27.263 --> 00:04:28.820
are you sure you don't
want to set up a passkey?

97
00:04:28.820 --> 00:04:29.860
You should set up a passkey.

98
00:04:29.860 --> 00:04:30.940
And it's actually pretty great.

99
00:04:30.940 --> 00:04:31.940
It's the idea.

100
00:04:31.940 --> 00:04:33.220
Are you using passkeys?

101
00:04:33.220 --> 00:04:36.874
&gt;&gt; Speaker 2: I was just going to say that
we also have a course by Max Fertman that

102
00:04:36.874 --> 00:04:40.740
covers some web authentication strategies,
including passkeys.

103
00:04:40.740 --> 00:04:41.620
&gt;&gt; Josh Long: Yes, yes.

104
00:04:41.620 --> 00:04:42.380
Okay, there you go.

105
00:04:42.380 --> 00:04:43.640
Seconded.

106
00:04:43.640 --> 00:04:48.481
Passkeys are super-duper good and
it's a marketing name for

107
00:04:48.481 --> 00:04:51.470
a protocol called WebAuthn, right?

108
00:04:51.470 --> 00:04:57.394
WebAuthn is a open specification
that allows you, basically,

109
00:04:57.394 --> 00:05:04.318
to package up the idea of using a public
key in as palatable way as possible.

110
00:05:04.318 --> 00:05:07.889
Usually by storing it in either
a trusted agent like your browser or

111
00:05:07.889 --> 00:05:11.030
your operating system or
your password manager, right?

112
00:05:11.030 --> 00:05:13.310
And then usually also federating it.

113
00:05:13.310 --> 00:05:17.320
So, so
what does that mean in practical purposes?

114
00:05:17.320 --> 00:05:20.400
It means I can use my face to
log into a web app on my iPhone.

115
00:05:20.400 --> 00:05:21.040
Face ID.

116
00:05:21.040 --> 00:05:25.805
It means I can use my touch sensor
to log into a web app on my Mac or

117
00:05:25.805 --> 00:05:27.640
Windows or whatever.

118
00:05:27.640 --> 00:05:30.920
I can use a yubikey,
an external key in certain devices.

119
00:05:30.920 --> 00:05:32.680
I can use my watch, whatever.

120
00:05:32.680 --> 00:05:37.880
In the Apple ecosystem, my public keys,
my pass keys are stored in icloud.

121
00:05:37.880 --> 00:05:42.850
So any device to which I have access
can authenticate as me, right?

122
00:05:42.850 --> 00:05:44.810
So let's set up Webauthn.

123
00:05:44.810 --> 00:05:50.210
When I set up this project though, I had
to manually the rare manual addition.

124
00:05:50.210 --> 00:05:52.370
I went out of my way to
manually type this in.

125
00:05:52.370 --> 00:05:55.715
It's not on the spring initializer,
it's not on start.spring layout, okay, so

126
00:05:55.715 --> 00:05:57.250
WebAuthn Core, I have to do that.

127
00:05:57.250 --> 00:06:02.792
But now with that in,
I'm going to say webauthn web authn and

128
00:06:02.792 --> 00:06:06.932
you've got a few things
you need to specify.

129
00:06:06.932 --> 00:06:11.020
Allowed origins is this host import,
obviously.

130
00:06:11.020 --> 00:06:12.780
Can you see that font
back there in the back?

131
00:06:14.060 --> 00:06:14.900
I'm sorry about that.

132
00:06:14.900 --> 00:06:17.820
I'm being greedy.

133
00:06:17.820 --> 00:06:24.220
So I'll call this
Bootiful Frontend Masters, okay?

134
00:06:25.260 --> 00:06:30.221
And then rpid is I just put local host.

135
00:06:30.221 --> 00:06:31.530
Okay, it's distinct.

136
00:06:31.530 --> 00:06:33.850
Okay, so let's go ahead and restart that.

137
00:06:33.850 --> 00:06:35.530
It's a lot of work.

138
00:06:35.530 --> 00:06:36.850
I don't do this kind of work lightly.

139
00:06:36.850 --> 00:06:39.010
Okay.
It's like six lines of code, but

140
00:06:39.010 --> 00:06:40.570
I think it's worth it.

141
00:06:40.570 --> 00:06:45.240
So now I'm going to log in
with one of these three,

142
00:06:45.240 --> 00:06:48.970
right, Josh PW, whatever, right?

143
00:06:48.970 --> 00:06:50.490
Actually, here, let me make this.

144
00:06:50.490 --> 00:06:53.690
I hate having to remember to redirect
myself back to that endpoint.

145
00:06:53.690 --> 00:06:54.650
So let's just do that.

146
00:06:55.690 --> 00:06:56.570
I'm very lazy.

147
00:06:58.050 --> 00:06:58.550
Okay.

148
00:07:00.530 --> 00:07:03.850
Okay, Josh P.W. great, that's worked.

149
00:07:03.850 --> 00:07:08.098
Once you're logged in the normal way,
whether it's magic links or username and

150
00:07:08.098 --> 00:07:11.010
passwords, then you go
to webauthn register.

151
00:07:11.010 --> 00:07:16.358
Okay, so now I'm gona register
a passkey via the browser.

152
00:07:16.358 --> 00:07:21.280
Now, before Mac OS 15.4,
I think the latest one,

153
00:07:21.280 --> 00:07:28.050
latest big one, the passkeys for
all of macOS were stored in Safari.

154
00:07:28.050 --> 00:07:29.775
So if you registered a passkey in Chrome,

155
00:07:29.775 --> 00:07:33.090
you still had to go to Safari to delete
and manage and update them, right?

156
00:07:33.090 --> 00:07:37.570
But now in the new one,
they have this passwords app, okay?

157
00:07:37.570 --> 00:07:42.700
Passwords.app, it'll manage your passkey.

158
00:07:42.700 --> 00:07:47.822
So I wanna make sure that I've
got the passkeys app loaded and

159
00:07:47.822 --> 00:07:49.920
then passkeys, okay?

160
00:07:49.920 --> 00:07:54.631
So you can see at the moment I've got
no passkeys in my passwords app, okay?

161
00:07:54.631 --> 00:07:58.040
My operating systems password manager,
which is where you can find passkeys.

162
00:07:58.040 --> 00:07:59.600
So I'm gonna call this mbp.

163
00:07:59.600 --> 00:08:01.440
Now, there's two flows here.

164
00:08:01.440 --> 00:08:02.440
They're both very useful.

165
00:08:02.440 --> 00:08:03.440
So I'm going to do the first one.

166
00:08:04.800 --> 00:08:06.280
Use touch ID to sign in.

167
00:08:06.280 --> 00:08:07.920
Why, yes, yes, I will.

168
00:08:07.920 --> 00:08:10.720
So I click on my little
finger there on the sensor.

169
00:08:12.560 --> 00:08:20.280
Now I've got a passkey stored in the
operating system that was created today.

170
00:08:20.280 --> 00:08:22.680
Doesn't give me anything more specific,
but whatever.

171
00:08:22.680 --> 00:08:30.600
So now I go over here,
Incognito mode login.

172
00:08:30.600 --> 00:08:36.680
Now I'm gonna say sign in with passkey,
okay, so you can ting.

173
00:08:40.129 --> 00:08:41.889
Okay, so now I'm logged in, hello, Josh.

174
00:08:43.729 --> 00:08:44.529
Nice?

175
00:08:46.209 --> 00:08:49.071
If I go to the same app, same website,

176
00:08:49.071 --> 00:08:53.729
in a completely new session,
go to my phone, I can do face id.

177
00:08:53.729 --> 00:08:56.367
The same key works.

178
00:08:56.367 --> 00:08:59.569
I don't have to register a face ID token,
right, or whatever.

179
00:08:59.569 --> 00:09:01.809
It's shared, it's federated with iCloud.

180
00:09:01.809 --> 00:09:04.049
My public key is presented by icloud.

181
00:09:04.049 --> 00:09:07.350
So I can do that in any device that's
connected to my icloud account.

182
00:09:07.350 --> 00:09:08.070
Super good.

183
00:09:08.070 --> 00:09:12.964
Okay, now, what about the, so
common, I don't know when the last

184
00:09:12.964 --> 00:09:17.862
time this was actually a thing that
happened to you, but when was the last

185
00:09:17.862 --> 00:09:22.150
time you were in a library looking
up things on the web, right?

186
00:09:22.150 --> 00:09:27.110
I get that it's a really common scenario,
but it hasn't been.

187
00:09:27.110 --> 00:09:28.310
I don't even know where my library is.

188
00:09:28.310 --> 00:09:30.550
Sadly, you know, I'm very lucky that way.

189
00:09:30.550 --> 00:09:35.080
So I do want to take care
of that scenario though.

190
00:09:35.080 --> 00:09:37.760
So that is one of the nice
strengths of passkeys.

191
00:09:38.880 --> 00:09:39.920
I'm going to delete this.

192
00:09:41.280 --> 00:09:42.000
Goodbye.

193
00:09:43.200 --> 00:09:44.520
I no longer have a passkey.

194
00:09:44.520 --> 00:09:47.360
I can't log into that website anymore.

195
00:09:47.360 --> 00:09:53.131
So localhost:8080, okay?

196
00:09:53.131 --> 00:09:55.920
So now I'm gonna log in again, Josh PW.

197
00:09:55.920 --> 00:10:02.446
Okay, so now go back to the WebAuthin
registration endpoint, okay?

198
00:10:02.446 --> 00:10:03.930
Because the service is still running.

199
00:10:03.930 --> 00:10:04.970
Let me restart the service.

200
00:10:04.970 --> 00:10:05.650
It's in memory.

201
00:10:05.650 --> 00:10:06.210
It's got that.

202
00:10:06.210 --> 00:10:08.398
You can.
By the way, it's a bean, right?

203
00:10:08.398 --> 00:10:11.281
You create an object of a certain type
that implements the interface and

204
00:10:11.281 --> 00:10:13.537
you can store the stuff in SQL or
you can start in memory,

205
00:10:13.537 --> 00:10:15.090
you can start in MongoDB, whatever.

206
00:10:15.090 --> 00:10:19.170
Okay, restart, Josh, there you go.

207
00:10:19.170 --> 00:10:21.450
So no passkeys, no pass keys.

208
00:10:21.450 --> 00:10:22.400
Okay.
The world is.

209
00:10:22.400 --> 00:10:23.600
The world is consistent again.

210
00:10:23.600 --> 00:10:25.040
I'm gonna register a new one.

211
00:10:25.040 --> 00:10:28.960
So mbp, okay, register.

212
00:10:28.960 --> 00:10:32.000
And instead of choosing touch id,
I'm going to choose other options.

213
00:10:33.280 --> 00:10:36.160
And there I'm going to say
register with my iPhone.

214
00:10:37.360 --> 00:10:38.720
So I don't trust this terminal.

215
00:10:38.720 --> 00:10:42.832
I'm at a computer that has goodness
knows what spyware on it and

216
00:10:42.832 --> 00:10:47.040
stuff like that, and
cameras pointed at me and all that stuff.

217
00:10:47.040 --> 00:10:48.350
So instead of doing that, I.

218
00:10:48.350 --> 00:10:50.690
I'm gonna log in with my iPhone,
which I do trust.

219
00:10:50.690 --> 00:10:54.090
This I've had in my pocket the entire
time I've come to this library.

220
00:10:54.090 --> 00:10:56.076
So I now hit continue and

221
00:10:56.076 --> 00:11:01.930
it's going to ask me to scan this QR code,
which I shall do.

222
00:11:01.930 --> 00:11:04.490
And it says, do I want to sign in?

223
00:11:04.490 --> 00:11:06.330
It says,
do I want to store it in passwords?

224
00:11:06.330 --> 00:11:08.410
Or my bit warden, I'll choose passwords.

225
00:11:08.410 --> 00:11:11.130
It's asking me to do face id.

226
00:11:11.130 --> 00:11:14.150
Okay, and now I've got a WebAuth in there.

227
00:11:14.150 --> 00:11:16.790
Did you see that thing update
while I was looking at my camera?

228
00:11:16.790 --> 00:11:19.110
So now I've got a token.

229
00:11:19.110 --> 00:11:20.750
And I never entered a password.

230
00:11:20.750 --> 00:11:22.630
I never gave my fingerprint.

231
00:11:22.630 --> 00:11:25.270
I never did anything with this computer.

232
00:11:25.270 --> 00:11:27.910
I did it with a trusted factor,
my phone or my.

233
00:11:27.910 --> 00:11:29.441
Actually, you can also
do it with your watch,

234
00:11:29.441 --> 00:11:30.750
right, if you have the Apple watch on.

235
00:11:30.750 --> 00:11:33.671
I don't have the Apple watch on because
the glare is weird when I'm gesticulating

236
00:11:33.671 --> 00:11:34.310
in the camera.

237
00:11:34.310 --> 00:11:38.150
Okay, so now we go here, log out.

238
00:11:41.120 --> 00:11:43.040
Let me just do a new incognito mode.

239
00:11:43.040 --> 00:11:44.378
Here we go.

240
00:11:44.378 --> 00:11:49.308
So now log in again, finger down,

241
00:11:49.308 --> 00:11:52.200
okay, that works.

242
00:11:52.200 --> 00:11:53.600
Now let's log out again.

243
00:11:56.080 --> 00:12:00.880
Localhost:8080 and
I'll sign in with a passkey this time.

244
00:12:00.880 --> 00:12:04.108
And this time I'm going to use
my phone again because again,

245
00:12:04.108 --> 00:12:06.080
I don't trust this dirty computer.

246
00:12:08.850 --> 00:12:13.410
Okay, so now I'm going to choose continue,
scan the QR code.

247
00:12:17.490 --> 00:12:20.210
Do I want to do face ID to sign in?

248
00:12:20.210 --> 00:12:20.710
Continue.

249
00:12:23.010 --> 00:12:24.930
Okay, and there we go.

250
00:12:24.930 --> 00:12:25.650
Hello, Josh.

251
00:12:26.850 --> 00:12:27.490
Good.

252
00:12:27.490 --> 00:12:29.912
Any questions on that stuff?

253
00:12:29.912 --> 00:12:30.930
That's a really great experience.

254
00:12:30.930 --> 00:12:33.508
That's not just the more
secure experience,

255
00:12:33.508 --> 00:12:35.980
it's actually the easier one too.

256
00:12:35.980 --> 00:12:37.300
Nobody has to remember a password.

257
00:12:37.300 --> 00:12:38.780
They don't have to learn
about password managers.

258
00:12:38.780 --> 00:12:42.370
They just have to have their phone or
their watch or whatever and

259
00:12:42.370 --> 00:12:46.540
Google has the same sort of
arrangement in the Android space.

260
00:12:46.540 --> 00:12:48.059
As far as I know.

261
00:12:48.059 --> 00:12:49.940
You can also store this stuff
in your password manager.

262
00:12:49.940 --> 00:12:52.380
1Password bitwarden they all support.

263
00:12:52.380 --> 00:12:55.962
So as long as you've got your password
manager, you can authenticate with that

264
00:12:55.962 --> 00:13:00.060
instead of in lieu of icloud, which is
acting as the holder of the passkey.

265
00:13:00.060 --> 00:13:01.100
Very, very powerful.

