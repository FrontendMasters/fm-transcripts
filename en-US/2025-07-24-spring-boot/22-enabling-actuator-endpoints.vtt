WEBVTT

1
00:00:00.240 --> 00:00:01.200
&gt;&gt; Josh Long: Now we're
going to build on this.

2
00:00:01.200 --> 00:00:04.320
We've got a toy of an application.

3
00:00:04.320 --> 00:00:07.040
It is an application,
it's just a bit of a contrived one.

4
00:00:07.040 --> 00:00:08.560
That's fine.

5
00:00:08.560 --> 00:00:12.200
But let's imagine that now we're
under the gun to get this thing to

6
00:00:12.200 --> 00:00:13.437
production, right?

7
00:00:13.437 --> 00:00:15.600
We need to get to production.

8
00:00:15.600 --> 00:00:16.960
What does that look like?

9
00:00:16.960 --> 00:00:22.160
And at this point it's a matter of
packaging and making it production worthy.

10
00:00:22.160 --> 00:00:26.330
So to that end, go to your pom xml, okay?

11
00:00:26.330 --> 00:00:29.122
And you wanna add a starter.

12
00:00:29.122 --> 00:00:32.090
And the starter is this one.

13
00:00:32.090 --> 00:00:32.890
Just add.

14
00:00:32.890 --> 00:00:37.905
Org Spring framework boot
spring boot starter actuator

15
00:00:37.905 --> 00:00:43.770
Actuator in physics is a thing that
takes a little bit of energy and

16
00:00:43.770 --> 00:00:46.450
turns it into a lot of energy.

17
00:00:46.450 --> 00:00:50.250
So the actuators are observability module,
right?

18
00:00:51.700 --> 00:00:53.930
One of the things that
sets spring boot apart and

19
00:00:53.930 --> 00:00:57.442
one of the reasons it's become so popular
is because even from day one it was

20
00:00:57.442 --> 00:01:00.260
designed in such a way that you
could take it to production.

21
00:01:00.260 --> 00:01:03.972
It was not just cool looking code, it was
actually code that would integrate with

22
00:01:03.972 --> 00:01:07.619
the rest of your infrastructure, with
the rest of your operations and so on.

23
00:01:07.619 --> 00:01:11.854
Or better, it would actually level up
your operations because it would demand

24
00:01:11.854 --> 00:01:16.180
observability in a way that most
applications don't by default.

25
00:01:16.180 --> 00:01:19.027
So once you've got actuator
on the class path,

26
00:01:19.027 --> 00:01:24.240
we're going to do something you shouldn't
do in production, but that we want to see.

27
00:01:24.240 --> 00:01:30.080
So add this property file,
this property value,

28
00:01:30.080 --> 00:01:34.531
it's called management endpoints,

29
00:01:34.531 --> 00:01:38.843
web exposure, include equals * and

30
00:01:38.843 --> 00:01:42.753
then restart your application.

31
00:01:42.753 --> 00:01:44.170
I'm gonna close the SQL files here, okay?

32
00:01:44.170 --> 00:01:45.730
I'm assuming we're all
on the same page there.

33
00:01:45.730 --> 00:01:47.930
So let's just keep it down to these two.

34
00:01:47.930 --> 00:01:50.170
And notice that I haven't changed
anything in the Java code.

35
00:01:50.170 --> 00:01:52.573
I've just added the starter for
the actuator and

36
00:01:52.573 --> 00:01:55.450
I've added this one property file,
one property value.

37
00:01:58.810 --> 00:02:03.250
What that will let you do is
go to localhost 8080Actuator.

38
00:02:03.250 --> 00:02:05.530
This is the spring boot actuator.

39
00:02:05.530 --> 00:02:08.290
Like I said, we've done a thing you
won't want to do in production.

40
00:02:08.290 --> 00:02:11.579
We, we've told the actuator
make everything visible.

41
00:02:11.579 --> 00:02:12.939
That's what this property is doing.

42
00:02:12.939 --> 00:02:13.979
This is for our demo.

43
00:02:13.979 --> 00:02:15.139
Don't do this in production, okay?

44
00:02:15.139 --> 00:02:17.019
Don't do this last thing in production.

45
00:02:17.019 --> 00:02:21.259
By default, if you don't have this,
you only see three actuator endpoints.

46
00:02:21.259 --> 00:02:24.678
The actuator endpoint is meant to surface
information about the state of your

47
00:02:24.678 --> 00:02:27.979
application, the health,
the well being of your application.

48
00:02:27.979 --> 00:02:30.455
So you can see things like this.

49
00:02:30.455 --> 00:02:31.547
If you go to forward/actuator,

50
00:02:31.547 --> 00:02:33.659
it shows you all the different
endpoints that are available.

51
00:02:33.659 --> 00:02:35.680
This is a hypermedia.

52
00:02:35.680 --> 00:02:37.094
So now we have a list of beans.

53
00:02:37.094 --> 00:02:39.989
You wanna know what Java objects
have been configured by spring?

54
00:02:39.989 --> 00:02:41.360
Go to \slash beans, right?

55
00:02:41.360 --> 00:02:45.458
You can see their dependencies,
their make, the classes that they live in,

56
00:02:45.458 --> 00:02:46.920
their scopes, et cetera.

57
00:02:46.920 --> 00:02:49.160
Right, scopes means how
many of them are there?

58
00:02:49.160 --> 00:02:51.600
Is it just one per application,
is it one per request?

59
00:02:51.600 --> 00:02:52.240
Whatever.

60
00:02:52.240 --> 00:02:54.187
You can look at all the different
cache implementations.

61
00:02:54.187 --> 00:02:57.097
So if you have the spring
cache abstraction set up,

62
00:02:57.097 --> 00:02:59.680
you can see what caches you've configured.

63
00:03:00.810 --> 00:03:03.067
You've got your health endpoint and

64
00:03:03.067 --> 00:03:07.890
the health endpoint gives you a status
code 200 if your service is healthy.

65
00:03:07.890 --> 00:03:10.390
But let's say that you
start up the program and

66
00:03:10.390 --> 00:03:14.010
the database connection pool
can't connect to the data source.

67
00:03:14.010 --> 00:03:17.099
Well then this will reflect that
the status is unhealthy and

68
00:03:17.099 --> 00:03:18.530
it'll show 500 error.

69
00:03:18.530 --> 00:03:21.050
Okay, so this is what you would
feed to your load balancer.

70
00:03:21.050 --> 00:03:28.020
If you're using Kubernetes you
could do probes enabled is true.

71
00:03:28.020 --> 00:03:31.380
That'll enable Kubernetes liveness and
readiness probes for you.

72
00:03:31.380 --> 00:03:32.980
So if I go back over here.

73
00:03:32.980 --> 00:03:33.580
Reload.

74
00:03:33.580 --> 00:03:34.180
There you go.

75
00:03:34.180 --> 00:03:37.965
Now I've got two different sub endpoints
and I go to here liveness and it shows me

76
00:03:37.965 --> 00:03:42.179
this liveness and the readiness and these
behave exactly as they're supposed to.

77
00:03:42.179 --> 00:03:45.875
For Kubernetes you can
show the details for

78
00:03:45.875 --> 00:03:50.260
the health endpoint, show details always.

79
00:03:50.260 --> 00:03:51.460
I'm going to do that.

80
00:03:51.460 --> 00:03:54.930
If you do that and then go back over here,
you can see now we got what is valid,

81
00:03:54.930 --> 00:03:57.810
what's not valid,
what's wrong with something.

82
00:03:57.810 --> 00:04:02.641
If any one of these subsystems, your disk
space, your database, et cetera, returns

83
00:04:02.641 --> 00:04:07.890
false, then the overall aggregate status
will be down and it'll give a 500 error.

84
00:04:07.890 --> 00:04:10.130
You can contribute your
own health indicators.

85
00:04:10.130 --> 00:04:13.650
In fact, just register a bean
of type health indicator.

86
00:04:13.650 --> 00:04:16.456
So if you have some other network service
that you need to be up in order for

87
00:04:16.456 --> 00:04:19.170
you to function, create a health
indicator that pulls that service.

88
00:04:20.450 --> 00:04:23.010
It's literally interface
is called health indicator.

89
00:04:23.010 --> 00:04:25.570
It's a one-method lambda,
you'll know what to do.

90
00:04:25.570 --> 00:04:26.530
It returns a boolean.

91
00:04:26.530 --> 00:04:30.134
Basically the health indicator is very,
very good for guess what, determining

92
00:04:30.134 --> 00:04:33.454
the health of your system and you can
contribute to it as much as you want.

93
00:04:33.454 --> 00:04:34.530
Yeah, look at that.

94
00:04:34.530 --> 00:04:38.370
Do we have valid SSL
certs does the ping work?

95
00:04:38.370 --> 00:04:40.194
Is the service live?

96
00:04:40.194 --> 00:04:41.570
Is a disk space good?

97
00:04:41.570 --> 00:04:43.850
Do we have too much or
too little database?

98
00:04:43.850 --> 00:04:47.680
All this stuff is there for you and each
project will add more and more of these.

99
00:04:47.680 --> 00:04:49.416
If you add MongoDB support,

100
00:04:49.416 --> 00:04:54.200
you'll get a health indicator from
MongoDB on all these different projects.

101
00:04:54.200 --> 00:04:55.640
Add relevant things there.

102
00:04:55.640 --> 00:05:00.440
Okay, back to the actuator
at health we have info.

103
00:05:00.440 --> 00:05:02.920
Info is a tabula rasa, okay?

104
00:05:02.920 --> 00:05:07.155
It's empty info tells you
whatever you want it to tell.

105
00:05:07.155 --> 00:05:10.828
So if I do a management info,

106
00:05:10.828 --> 00:05:17.150
default info env enabled is true, okay?

107
00:05:17.150 --> 00:05:18.207
Do that and

108
00:05:18.207 --> 00:05:25.390
then you do info.best-course-ever=frontend
masters, right?

109
00:05:25.390 --> 00:05:26.870
So I'm going to add that little property.

110
00:05:26.870 --> 00:05:27.550
It's arbitrary.

111
00:05:27.550 --> 00:05:30.070
This is obviously just me
making something up, right?

112
00:05:30.070 --> 00:05:34.076
So I go over here, refresh and now I've
got this custom attribute there called

113
00:05:34.076 --> 00:05:37.000
best course ever equals frontend masters,
right?

114
00:05:37.000 --> 00:05:38.600
So I can now export that.

115
00:05:38.600 --> 00:05:40.579
So imagine you've got
a service in production and

116
00:05:40.579 --> 00:05:42.240
you're trying to identify the service.

117
00:05:42.240 --> 00:05:43.560
You don't know which one it is.

118
00:05:43.560 --> 00:05:45.000
Well, you can put information in here.

119
00:05:45.000 --> 00:05:49.720
You know one way to, you know one good way
to identify a service by its git commit.

120
00:05:49.720 --> 00:05:51.160
You want to know who contributed.

121
00:05:51.160 --> 00:05:54.200
If you got an error in production,
something's going wrong.

122
00:05:54.200 --> 00:05:55.640
Which build am I running?

123
00:05:55.640 --> 00:05:57.160
You want to put the git
information in there.

124
00:05:57.160 --> 00:05:58.120
You know how you do that?

125
00:05:58.120 --> 00:06:02.130
You go to your build back in maven land,
right?

126
00:06:02.130 --> 00:06:06.690
And we preconfigure for
you the git commit ID plugin.

127
00:06:06.690 --> 00:06:08.930
All you gotta do is opt into it.

128
00:06:08.930 --> 00:06:13.155
So I go down here,
gonna copy and paste that.

129
00:06:13.155 --> 00:06:16.512
And we're gonna go back to our build,
pom.xml, and

130
00:06:16.512 --> 00:06:21.370
down here in the plugins section, paste
that and just get rid of the version.

131
00:06:21.370 --> 00:06:23.090
You don't need the version.

132
00:06:23.090 --> 00:06:26.530
Now I'm going to stop the process since
this is a change the dependencies.

133
00:06:26.530 --> 00:06:28.340
I've added something to the classpath.

134
00:06:28.340 --> 00:06:29.620
I'm going to rebuild this.

135
00:06:30.980 --> 00:06:33.100
It's going to fail because I
don't have a git repository.

136
00:06:33.100 --> 00:06:38.336
So I'm going to say git init
git add git commit a m yolo and

137
00:06:38.336 --> 00:06:46.580
then do skip test package or clean package
even to rebuild everything from scratch.

138
00:06:46.580 --> 00:06:52.020
What that's done is it's just added
a git properties file to the code base.

139
00:06:52.020 --> 00:06:53.060
See that file there?

140
00:06:53.060 --> 00:06:57.670
If I cat the file you can see it shows
information about the git commit.

141
00:06:57.670 --> 00:07:02.310
The name, the tag, the date,
all this kind of stuff that is relevant

142
00:07:02.310 --> 00:07:06.310
to my project and
that's going to be compiled into.

143
00:07:06.310 --> 00:07:08.830
Like I said, it's going to be compiled
into the code of the program.

144
00:07:08.830 --> 00:07:13.321
So now if I restart the project having
done nothing else besides add that,

145
00:07:13.321 --> 00:07:14.630
enable that plugin.

146
00:07:14.630 --> 00:07:18.026
Now, the info endpoint gives you
the information about what version of

147
00:07:18.026 --> 00:07:19.390
the commit is running here.

148
00:07:19.390 --> 00:07:22.210
So imagine you make changes,
you do git commit, git push.

149
00:07:22.210 --> 00:07:24.562
It goes to your CI environment,
GitHub Actions,

150
00:07:24.562 --> 00:07:26.410
whatever you do a maven clean package.

151
00:07:26.410 --> 00:07:30.690
Now, it automatically includes the current
build revision in the info endpoint.

152
00:07:30.690 --> 00:07:35.590
Now you can go there and say, okay, this
is Josh, he committed a bug, get blame and

153
00:07:35.590 --> 00:07:37.850
fire, that kind of thing.

154
00:07:37.850 --> 00:07:39.090
So this is very, very useful.

155
00:07:39.090 --> 00:07:45.370
Now you know what's going on,
what else you've got conditions.

156
00:07:45.370 --> 00:07:48.870
So you know that spring boot is
doing a lot of things magically.

157
00:07:48.870 --> 00:07:52.770
It just starts up stuff for you on your
behalf based on cues and clues that

158
00:07:52.770 --> 00:07:57.515
you give it, including property files,
including the definition of certain beans,

159
00:07:57.515 --> 00:08:00.910
including the presence of certain
classes on the class path.

160
00:08:00.910 --> 00:08:03.270
We talked about conditional yesterday.

161
00:08:03.270 --> 00:08:06.230
Well, do you want to know what conditions
are true and which ones are false?

162
00:08:06.230 --> 00:08:10.155
Which ones resulted in the coalesced final
form of the application that you see

163
00:08:10.155 --> 00:08:12.070
before you click on conditions?

164
00:08:12.070 --> 00:08:14.970
This is a report of all
the conditions that were evaluated.

165
00:08:14.970 --> 00:08:18.392
Which ones are positive,
that is to say they resulted in true,

166
00:08:18.392 --> 00:08:22.477
which ones are negative, and
which ones are evaluated unconditionally.

167
00:08:22.477 --> 00:08:25.130
There's no test, it's always true, right?

168
00:08:25.130 --> 00:08:25.810
So let me see.

169
00:08:25.810 --> 00:08:26.310
Negative.

170
00:08:27.370 --> 00:08:27.890
There you go.

171
00:08:27.890 --> 00:08:28.650
Negative matches.

172
00:08:28.650 --> 00:08:32.664
Okay, so for example, because I don't
have rabbitmq in the class path,

173
00:08:32.664 --> 00:08:36.552
I don't have RABBITT template and
therefore the condition for on class

174
00:08:36.552 --> 00:08:41.062
condition in the Rabbit health contributor
auto configuration class was false.

175
00:08:41.062 --> 00:08:43.620
Okay, so go back here.

176
00:08:44.660 --> 00:08:47.340
Now we've got the config props.

177
00:08:47.340 --> 00:08:50.135
And this is for
people who are reasonable and smart and

178
00:08:50.135 --> 00:08:54.740
don't want to waste time paying jetbrains
for extra things that they may not need.

179
00:08:54.740 --> 00:08:56.340
If you want property files.

180
00:08:56.340 --> 00:08:57.460
Autocompletion.

181
00:08:57.460 --> 00:09:01.500
Right, My friend in the front, you know
how we couldn't do auto completion for

182
00:09:01.500 --> 00:09:02.660
the properties?

183
00:09:02.660 --> 00:09:06.360
There's a cheat code here that auto
completion is based on this index that

184
00:09:06.360 --> 00:09:07.560
gets shown right here.

185
00:09:07.560 --> 00:09:09.680
Actuator config props.

186
00:09:09.680 --> 00:09:14.160
So these are the properties to which
spring boot will respond given

187
00:09:14.160 --> 00:09:16.080
the types on the class path.

188
00:09:16.080 --> 00:09:19.760
So if I wanted to change something
about the web server, right?

189
00:09:19.760 --> 00:09:21.297
I could choose.

190
00:09:21.297 --> 00:09:24.800
Let's see,
management.server.base.path, right?

191
00:09:24.800 --> 00:09:25.720
Management server.

192
00:09:25.720 --> 00:09:26.760
Sorry, prefixes.

193
00:09:26.760 --> 00:09:29.520
Management server base path.

194
00:09:29.520 --> 00:09:30.960
Management server.

195
00:09:30.960 --> 00:09:32.810
Inputs that base path, right, okay.

196
00:09:32.810 --> 00:09:36.863
Or if I wanted to change SSL,
I could say spring.ssl.bundle.pem.

197
00:09:36.863 --> 00:09:39.991
Or spring.ssl.bundle.jks.

198
00:09:39.991 --> 00:09:44.307
Or spring.ssl.watch.file.quietperiod,
okay?

199
00:09:44.307 --> 00:09:48.663
So you have all these properties that
if you don't have the plugin that'll do

200
00:09:48.663 --> 00:09:49.937
the autocompletion,

201
00:09:49.937 --> 00:09:53.770
this shows you all the properties
that are available to you anyway.

202
00:09:53.770 --> 00:09:55.450
It's a menu, okay?

203
00:09:55.450 --> 00:09:58.730
And it shows you the values,
if they're not masked off, okay?

204
00:09:58.730 --> 00:10:01.610
Okay, what else we got here?

205
00:10:01.610 --> 00:10:02.970
Env.

206
00:10:02.970 --> 00:10:04.210
I'm not going to click on this one.

207
00:10:04.210 --> 00:10:05.450
You can guess what this is.

208
00:10:05.450 --> 00:10:07.130
It's just your environment variables.

209
00:10:07.130 --> 00:10:09.050
Probably don't want to show that on stage.

210
00:10:09.050 --> 00:10:12.650
That's why I'm saying do not leave
this property open in production.

211
00:10:12.650 --> 00:10:13.570
Actually, I will show it.

212
00:10:13.570 --> 00:10:15.610
Let me see if it shows anything.

213
00:10:15.610 --> 00:10:18.770
Yeah, it masks off a lot of
things actually, so it's okay.

214
00:10:18.770 --> 00:10:19.930
But still, I would definitely not.

215
00:10:19.930 --> 00:10:21.370
This is your property sources.

216
00:10:21.370 --> 00:10:22.831
This is the environment variable,

217
00:10:22.831 --> 00:10:25.800
the environment object I taught you
about yesterday that has the keys and

218
00:10:25.800 --> 00:10:29.354
values in your environment, your system
properties, your environment variables,

219
00:10:29.354 --> 00:10:32.100
your application properties,
all that stuff, all the loggers.

220
00:10:32.100 --> 00:10:35.639
Let's say you're trying to debug
a nasty bug in production and

221
00:10:35.639 --> 00:10:40.179
you've got an error happening and you've
got some debug at level fine or trace,

222
00:10:40.179 --> 00:10:44.660
you want to see that log output, but
it's not set to debug that by default.

223
00:10:44.660 --> 00:10:48.311
You can hit this endpoint and
while the program is running,

224
00:10:48.311 --> 00:10:51.900
update a log level granularity for
a particular package.

225
00:10:53.100 --> 00:10:54.940
So that's pretty good.

226
00:10:54.940 --> 00:10:56.860
What else do we have here?

227
00:10:56.860 --> 00:10:57.700
Heap dump.

228
00:10:57.700 --> 00:11:01.103
You want to get a heap dump to
understand where the memory is and

229
00:11:01.103 --> 00:11:04.980
put it in a profiler, click on,
you guessed it, actuator heap dump.

230
00:11:04.980 --> 00:11:07.815
And that'll download a heap dump that
you can put in a profiler to understand

231
00:11:07.815 --> 00:11:09.900
a stack trace from production.

232
00:11:09.900 --> 00:11:10.860
Thread dump.

233
00:11:10.860 --> 00:11:14.540
You wanna see what threads are waiting and
what are idle and what are doing what.

234
00:11:14.540 --> 00:11:16.630
Just go to /threaddump.

235
00:11:16.630 --> 00:11:20.070
Okay, what else do we got here?

236
00:11:20.070 --> 00:11:22.470
Metrics, aha,
this one's the important one.

237
00:11:22.470 --> 00:11:22.990
Metrics.

238
00:11:22.990 --> 00:11:25.190
Okay, so we have metrics.

239
00:11:26.790 --> 00:11:28.630
This, it gives you guess what.

240
00:11:28.630 --> 00:11:30.310
Metrics.

241
00:11:30.310 --> 00:11:33.967
These are things that show you the state
of different parts of your application,

242
00:11:33.967 --> 00:11:37.139
including how many web sessions
you've got, what your CPU usage is,

243
00:11:37.139 --> 00:11:39.989
how many connections you've got
to the database, et cetera,

244
00:11:39.989 --> 00:11:42.568
how much disk space you've got free,
how long it took for

245
00:11:42.568 --> 00:11:45.150
the applications to start
versus get ready to be ready.

246
00:11:45.150 --> 00:11:49.121
So now let's say I want to look at
how Many requests there have been,

247
00:11:49.121 --> 00:11:53.858
I go to actuator metrics, httpserver
requests, and it says, hey, you've had

248
00:11:53.858 --> 00:11:58.910
12 requests total time across, all them
aggregate was that the max time was this.

249
00:11:58.910 --> 00:12:02.961
And if you want to, you can also break it
down by whether there was an exception,

250
00:12:02.961 --> 00:12:07.270
whether what method was used, what errors
occurred and what endpoints there were.

251
00:12:07.270 --> 00:12:09.230
Okay, now why is this useful?

252
00:12:09.230 --> 00:12:13.780
Well, because it pairs with another
project that we built called Micrometer.

253
00:12:13.780 --> 00:12:18.820
Micrometer is the de facto way to do any
kind of observability in the JVM space.

254
00:12:18.820 --> 00:12:22.740
It is a, as it says, vendor neutral
application observability facade.

255
00:12:22.740 --> 00:12:24.780
You don't need Spring to use this, right?

256
00:12:24.780 --> 00:12:25.500
It's the other way around.

257
00:12:25.500 --> 00:12:28.100
Spring needs this to be workable,
but it's not the other way.

258
00:12:28.100 --> 00:12:32.580
So you can, and people do use
Micrometer independent of Spring.

259
00:12:32.580 --> 00:12:36.180
So, for example, database libraries,
they're not gonna import a whole frame.

260
00:12:36.180 --> 00:12:38.213
You know, if you're a driver,
if you're providing a driver,

261
00:12:38.213 --> 00:12:39.320
you're not gonna import Spring.

262
00:12:39.320 --> 00:12:40.040
That makes no sense.

263
00:12:40.040 --> 00:12:41.640
Spring will consume the database driver.

264
00:12:41.640 --> 00:12:45.976
But because this is just a core spi,
like a logging library, people include

265
00:12:45.976 --> 00:12:50.680
Micrometer in their driver and they emit
metrics that make sense for them, okay?

266
00:12:50.680 --> 00:12:54.360
Aha.
SBOM software bill of materials, right?

267
00:12:54.360 --> 00:12:59.320
You can't deploy mystery meat applications
to production these days, right?

268
00:12:59.320 --> 00:13:03.067
There's actually government regulation
in some areas where you need to be

269
00:13:03.067 --> 00:13:04.018
able to account for

270
00:13:04.018 --> 00:13:07.890
the mystery, like the provenance of
the dependencies in that application.

271
00:13:07.890 --> 00:13:08.890
We see this all the time.

272
00:13:08.890 --> 00:13:12.894
This is a discussion around the Docker
image area as well as in your application

273
00:13:12.894 --> 00:13:13.650
artifacts.

274
00:13:13.650 --> 00:13:15.370
So we have an SBOM support right now.

275
00:13:15.370 --> 00:13:17.250
It's not enabled though.

276
00:13:17.250 --> 00:13:18.090
I need to enable it.

277
00:13:18.090 --> 00:13:22.758
And the way you do that is by
going back to start spring IO,

278
00:13:22.758 --> 00:13:28.810
I'm going to add one dependency here,
SBoM software build of material.

279
00:13:28.810 --> 00:13:33.370
So add that and it'll just give you
a plugin that you can add to your build.

280
00:13:33.370 --> 00:13:35.248
It's the same as the commit ID
thing I showed you earlier.

281
00:13:35.248 --> 00:13:39.118
All you gotta do is add this to your build
and then rebuild the project, right?

282
00:13:39.118 --> 00:13:42.694
I'm going to just paste that in.

283
00:13:42.694 --> 00:13:45.445
And that'll give me a cyclonedx
maven build on material.

284
00:13:45.445 --> 00:13:50.010
So maven skip tests package.

285
00:13:53.530 --> 00:13:54.610
I'm going to do nothing else.

286
00:13:54.610 --> 00:13:59.450
I'm just going to restart the project now,
having added that thing to my build.

287
00:13:59.450 --> 00:14:00.250
Go back over here.

288
00:14:00.250 --> 00:14:03.370
You can see it says now I
have an application, SBoM.

289
00:14:03.370 --> 00:14:08.090
So I go to actuator SBOM application and
look at that.

290
00:14:08.090 --> 00:14:11.887
I have a full manifest of every
dependency and their sha and

291
00:14:11.887 --> 00:14:16.250
where they come from and
the creator of it, and so on, right?

292
00:14:16.250 --> 00:14:17.210
So this is really good.

293
00:14:17.210 --> 00:14:20.450
If you want to do production, then this
is what you need to do these days, right?

294
00:14:20.450 --> 00:14:21.330
This is very, very important.

295
00:14:21.330 --> 00:14:23.370
Your security team wants this,
they just don't.

296
00:14:23.370 --> 00:14:26.500
They maybe didn't, maybe they haven't
told you that yet, but they do.

297
00:14:26.500 --> 00:14:28.740
So this will show you
the provenance of every dependency.

298
00:14:28.740 --> 00:14:29.620
Very, very important.

299
00:14:30.740 --> 00:14:34.475
We learned a lot in the Java community
from the left pad incident from 10 years

300
00:14:34.475 --> 00:14:36.020
ago, whatever it was.

301
00:14:36.020 --> 00:14:37.394
Ever since then it's been very,

302
00:14:37.394 --> 00:14:41.140
very important to be very clear about
what nonsense you have in your build.

303
00:14:41.140 --> 00:14:45.180
Okay, what else do we have in here,
friends?

304
00:14:45.180 --> 00:14:49.900
We've got actuator info.

305
00:14:49.900 --> 00:14:52.201
We talked about that,
we talked about conditions,

306
00:14:52.201 --> 00:14:54.790
we talked about heap dump metrics,
scheduled tasks.

307
00:14:54.790 --> 00:14:56.790
Mappings.
This is another one that's really useful.

308
00:14:56.790 --> 00:14:59.430
Do you want to know what
endpoints are exposed?

309
00:14:59.430 --> 00:15:00.420
You've got controllers.

310
00:15:00.420 --> 00:15:04.733
Those controllers respond to
certain HTTP URL predicates, right,

311
00:15:04.733 --> 00:15:07.590
like a request comes into /customers.

312
00:15:07.590 --> 00:15:09.350
How do I know that that
endpoint is exposed?

313
00:15:09.350 --> 00:15:11.876
Especially if I've got these
routes strewn about my code base,

314
00:15:11.876 --> 00:15:14.550
as is pretty common when you have
a lot of different controllers.

315
00:15:14.550 --> 00:15:16.750
Well, go to mappings.

316
00:15:16.750 --> 00:15:20.306
This will show you all the different
HTTP endpoints and the component

317
00:15:20.306 --> 00:15:24.363
that handles them and the content types
that they accept and produce and so on.

318
00:15:24.363 --> 00:15:28.360
So for example, there's a delete
endpoint for actuator caches.

319
00:15:28.360 --> 00:15:31.240
It is handled by this Java
component right here.

320
00:15:31.240 --> 00:15:34.600
And the method is here,
it's called handle and it takes us.

321
00:15:34.600 --> 00:15:37.930
This is the signature of
the types that it expects,

322
00:15:37.930 --> 00:15:41.269
the request mapping conditions,
etc., right?

323
00:15:41.269 --> 00:15:42.440
So that's the actuator.

