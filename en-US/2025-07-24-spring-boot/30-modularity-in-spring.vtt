WEBVTT

1
00:00:00.160 --> 00:00:03.775
&gt;&gt; Josh Long: We just spent a moment
looking at messaging, which I think is,

2
00:00:03.775 --> 00:00:07.680
I hate to think that it's niche,
I don't think it should be niche.

3
00:00:07.680 --> 00:00:09.408
I think it should be
the prevalent standard,

4
00:00:09.408 --> 00:00:12.080
should be the way we think
about building systems today.

5
00:00:12.080 --> 00:00:17.840
But admittedly, for the moment,
it's not an everybody concern.

6
00:00:17.840 --> 00:00:21.360
What we're going to talk about next I
think is more of an everybody concern.

7
00:00:21.360 --> 00:00:23.447
Before you've ever gotten
a bite across a network socket,

8
00:00:23.447 --> 00:00:26.140
you're going to have to think about
how you structure your code base.

9
00:00:26.140 --> 00:00:30.309
And in a Spring project, which is,
remember, Spring is Java and Java, say

10
00:00:30.309 --> 00:00:35.020
what you will about Java, but it is really
good at building large code bases, right?

11
00:00:35.020 --> 00:00:37.740
It's got a good strong type system,
very fast compiler.

12
00:00:37.740 --> 00:00:39.980
Well, if you're not doing Graalvm,
that is.

13
00:00:39.980 --> 00:00:42.842
And it's got, you know,
modularity, it's got rigidity,

14
00:00:42.842 --> 00:00:45.927
it's got good information hiding
in private privacy controls and

15
00:00:45.927 --> 00:00:47.980
it's easy to create
a mess because of that.

16
00:00:47.980 --> 00:00:51.847
It's easy to create a very large code base
with too many moving parts that don't play

17
00:00:51.847 --> 00:00:52.930
well together.

18
00:00:52.930 --> 00:00:57.370
My muse is, as ever, Peanut and
Prancer, the terrible, terrible dogs.

19
00:00:57.370 --> 00:01:00.450
So we're going to build a modular
system to support adopting them.

20
00:01:00.450 --> 00:01:02.850
Okay, we're going to go to the lab again,
we're going to generate a new project.

21
00:01:02.850 --> 00:01:04.210
I'm going to call it Adoptions.

22
00:01:04.210 --> 00:01:06.730
We'll bring in the Spring web support,
we're going to bring in the postgres

23
00:01:06.730 --> 00:01:08.849
support, we're going to bring
in the Docker compose support.

24
00:01:08.849 --> 00:01:12.065
Although I've got a database that I've
already got pre seeded with some data,

25
00:01:12.065 --> 00:01:13.610
so I'm not going to bother with this.

26
00:01:13.610 --> 00:01:14.290
But you could.

27
00:01:14.290 --> 00:01:19.623
I'm gonna bring in Spring Data JDBC,
I'm gonna bring in the DevTools, I'm gonna

28
00:01:19.623 --> 00:01:25.294
bring in the Spring Modulus project, and
I'll bring in GraalVM, I think that's it.

29
00:01:25.294 --> 00:01:26.470
Maybe, yeah, that's it.

30
00:01:26.470 --> 00:01:28.030
Let's just call that, okay?

31
00:01:28.030 --> 00:01:30.627
And now, adoptions.zip, open in my IDE.

32
00:01:30.627 --> 00:01:36.105
And again, I wanna do this in such a way
as to reduce the blast radius of change so

33
00:01:36.105 --> 00:01:38.430
that I layer things logically.

34
00:01:38.430 --> 00:01:41.326
So I'll create a package
here called Adoptions and

35
00:01:41.326 --> 00:01:43.828
there I'll create a dog adoption service.

36
00:01:43.828 --> 00:01:48.040
And this will be @service, @transactional.

37
00:01:48.040 --> 00:01:49.640
Why is it public?

38
00:01:49.640 --> 00:01:51.920
Right, this is an IntelliJ thing, right?

39
00:01:51.920 --> 00:01:54.484
I don't know why the ID insists
on making things public, but

40
00:01:54.484 --> 00:01:55.880
they should not be by default.

41
00:01:55.880 --> 00:01:58.600
In Java, things are not public by default.

42
00:01:58.600 --> 00:02:00.360
You have to go out of your
way to make them public.

43
00:02:00.360 --> 00:02:01.400
And that's by design.

44
00:02:01.400 --> 00:02:04.400
So why intellij insists on adding
that extra token, I'll never know.

45
00:02:04.400 --> 00:02:06.200
It encourages bad design.

46
00:02:06.200 --> 00:02:10.110
The result is that everything in your
code is public by default, right?

47
00:02:10.110 --> 00:02:13.637
Which is, it's contrary to what we're
trying to do with an object oriented

48
00:02:13.637 --> 00:02:16.130
language like Java,
which has information hiding.

49
00:02:16.130 --> 00:02:20.050
The whole point of information hiding
is to hide information, right?

50
00:02:20.050 --> 00:02:22.930
That's one of the benefits there because
it gives you that encapsulation.

51
00:02:22.930 --> 00:02:27.285
If you want everything to be in a big
flat global namespace where everything is

52
00:02:27.285 --> 00:02:28.499
public, just use C.

53
00:02:28.499 --> 00:02:29.890
It's more honest.

54
00:02:29.890 --> 00:02:30.450
Do that.

55
00:02:30.450 --> 00:02:33.650
Don't do this,
don't torture Java like that.

56
00:02:33.650 --> 00:02:38.410
So we'll create a dog type here,
string name,

57
00:02:38.410 --> 00:02:43.420
string owner, string description, okay?

58
00:02:43.420 --> 00:02:46.380
And I'll have my ID annotation here.

59
00:02:46.380 --> 00:02:52.940
I have my repository here, DogRepository,
extends ListCrudRepository, okay?

60
00:02:52.940 --> 00:02:54.460
And I'm going to be
connecting to a database.

61
00:02:54.460 --> 00:02:59.109
I've already got a database
running locally, so

62
00:02:59.109 --> 00:03:05.421
I'll do spring dataset data source,
my user password is Secret and

63
00:03:05.421 --> 00:03:10.310
then URL is jdbc PostgreSQL
localhost my database.

64
00:03:10.310 --> 00:03:14.486
Okay, so we have a method here called
adopt void, adopt int dog id and

65
00:03:14.486 --> 00:03:19.310
we're going to pass in the new owner and
that's going to connect to a database.

66
00:03:19.310 --> 00:03:20.870
Like I said, nice thing.

67
00:03:20.870 --> 00:03:24.475
In Intellij ultimate, you can click on
this, click on that, click on that,

68
00:03:24.475 --> 00:03:28.030
Go over here, go over there, go over
there, go over there, go over there.

69
00:03:28.030 --> 00:03:29.290
Tables, dogs.

70
00:03:29.290 --> 00:03:31.250
Okay, so there's our dog, Prancer.

71
00:03:31.250 --> 00:03:33.170
This is our buddy that we
talked about yesterday.

72
00:03:33.170 --> 00:03:36.922
He's a demonic,
neurotic man hating, animal hating,

73
00:03:36.922 --> 00:03:40.530
children hating dog that
looks like a gremlin, okay?

74
00:03:40.530 --> 00:03:43.499
And awkwardly, no owner, right?

75
00:03:43.499 --> 00:03:47.010
So our goal is to write a little bit of
software to help remedy that situation.

76
00:03:48.050 --> 00:03:51.232
And so
we're going to use the DogRepository here,

77
00:03:51.232 --> 00:03:56.270
add that to the constructor, and
we'll say this.dogRepository.findById.

78
00:03:56.270 --> 00:03:57.479
If the dog is present,

79
00:03:57.479 --> 00:04:01.872
we're going to update it by writing out an
updated version of the owner of the dog,

80
00:04:01.872 --> 00:04:05.590
rather to the database with
a new owner attribute there.

81
00:04:05.590 --> 00:04:10.230
And so I'll then say dogRepository.save(),
and so on, okay?

82
00:04:10.230 --> 00:04:16.470
And now I might just announce,
hey, adopted this dog, okay?

83
00:04:16.470 --> 00:04:18.630
Updated like that.

84
00:04:18.630 --> 00:04:19.830
And then that.

85
00:04:19.830 --> 00:04:21.310
And now I want to test this out.

86
00:04:21.310 --> 00:04:23.180
I want somebody to interact
with that service.

87
00:04:23.180 --> 00:04:26.580
So I'll build a controller and notice that
everything has been packaged private.

88
00:04:26.580 --> 00:04:27.420
It's not public.

89
00:04:27.420 --> 00:04:29.700
I'm just doing everything
in the same package.

90
00:04:29.700 --> 00:04:30.500
You don't have to.

91
00:04:30.500 --> 00:04:34.060
You can do everything in the same package
as separate classes and separate files.

92
00:04:34.060 --> 00:04:35.580
And that works as well.

93
00:04:35.580 --> 00:04:38.844
So, /dog/{id}/adoptions, void adopt, and

94
00:04:38.844 --> 00:04:44.300
it'll be a @PathVariable int dogId,
and it'll be a @RequestParam, right?

95
00:04:44.300 --> 00:04:47.100
An attribute in the request
that'll get sent in.

96
00:04:47.100 --> 00:04:49.270
So that's called owner.

97
00:04:49.270 --> 00:04:55.561
And then we'll say
dogService.adopt dot dot, okay?

98
00:04:55.561 --> 00:04:59.596
So there's my DogController,
my DogService, my repository, and

99
00:04:59.596 --> 00:05:03.430
my entity in 50 lines of code,
50-something lines of code.

100
00:05:03.430 --> 00:05:04.190
Now let's try that out.

101
00:05:04.190 --> 00:05:05.390
Okay, I'm going to start this up.

102
00:05:05.390 --> 00:05:06.862
Hopefully this will work.

103
00:05:06.862 --> 00:05:07.990
There's only one way to find out.

104
00:05:09.110 --> 00:05:10.844
Okay, it looks like it's good.

105
00:05:10.844 --> 00:05:16.960
So HTTP form post HTTP.

106
00:05:16.960 --> 00:05:24.680
Sorry, it's at :8080/dogs/45/adoptions
owner=jlong, right?

107
00:05:24.680 --> 00:05:30.400
And remember, I haven't run that thing
yet, but remember, owner is null for 45.

108
00:05:30.400 --> 00:05:33.920
His ID is 45, okay?

109
00:05:33.920 --> 00:05:37.652
Dogs 45 adoptions post refresh that.

110
00:05:37.652 --> 00:05:39.200
And now the owner's JLong.

111
00:05:39.200 --> 00:05:40.480
So it's worked.

112
00:05:40.480 --> 00:05:41.638
Yeah, kinda.

113
00:05:41.638 --> 00:05:44.400
But come on,
that's a bit of a contrivance, isn't it?

114
00:05:44.400 --> 00:05:45.440
That's a silly example.

115
00:05:45.440 --> 00:05:49.031
I mean, I wrote everything is in its place
and everything kind of makes sense for

116
00:05:49.031 --> 00:05:50.976
what it's doing, but it's a lot of code.

117
00:05:50.976 --> 00:05:55.360
Just update one little column, and one
table, and one database somewhere, right?

118
00:05:55.360 --> 00:05:56.680
And yeah, that's pretty trivial.

119
00:05:56.680 --> 00:05:57.640
I get it, I get it.

120
00:05:57.640 --> 00:05:59.120
It's a bit of a contrivance.

121
00:05:59.120 --> 00:06:01.040
And it's not real, is it?

122
00:06:01.040 --> 00:06:03.130
In most organizations,
in most jurisdictions,

123
00:06:03.130 --> 00:06:06.364
you can't just take possession of a live
animal by updating a single column in

124
00:06:06.364 --> 00:06:07.674
a single database somewhere.

125
00:06:07.674 --> 00:06:09.280
There's typically more process involved,
right?

126
00:06:09.280 --> 00:06:13.050
You might have to schedule
an appointment to see the veterinarian.

127
00:06:13.050 --> 00:06:19.641
Okay, so we're go over here and we'll
create a new package here called vet.

128
00:06:19.641 --> 00:06:25.294
And then in there, the veterinarian is
a doctor for dogs, so it's a dogtor.

129
00:06:25.294 --> 00:06:26.249
Okay, we should call it that.

130
00:06:26.249 --> 00:06:28.090
And now I could, I could make this public.

131
00:06:28.090 --> 00:06:28.810
I could do that.

132
00:06:28.810 --> 00:06:34.009
I could say public void
schedule(int dogId), and

133
00:06:34.009 --> 00:06:41.940
then `System.out.println("Scheduling for
this dog ID"), right?

134
00:06:41.940 --> 00:06:45.300
And then I could use that dog tour
back over here in my main code.

135
00:06:45.300 --> 00:06:46.740
So close that, close that.

136
00:06:46.740 --> 00:06:47.580
And down here, right.

137
00:06:47.580 --> 00:06:50.900
Before I print out the confirmation,
I could say dog tour.

138
00:06:50.900 --> 00:06:55.002
Schedule dog ID so I can schedule
an appointment to have the doctor have

139
00:06:55.002 --> 00:06:56.820
the dog looked at by a dog tour.

140
00:06:56.820 --> 00:07:01.560
Okay, so now we go back over here,
publish the same request.

141
00:07:01.560 --> 00:07:02.360
There you go.

142
00:07:02.360 --> 00:07:03.720
And go back to the command line.

143
00:07:05.240 --> 00:07:06.120
Where's my Command line?

144
00:07:06.120 --> 00:07:07.320
Command five.

145
00:07:07.320 --> 00:07:10.840
Okay, you can see it says Scheduling for
45 and adopted this ID.

