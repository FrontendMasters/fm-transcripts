WEBVTT

1
00:00:00.240 --> 00:00:02.670
&gt;&gt; Josh Long: So
now we're gonna talk about data.

2
00:00:02.670 --> 00:00:07.823
And I think it's important
to at this point,

3
00:00:07.823 --> 00:00:13.532
we need to have a discussion
about my muse, okay?

4
00:00:13.532 --> 00:00:14.474
The thing that drives me.

5
00:00:14.474 --> 00:00:16.720
I think about two things all the time.

6
00:00:19.440 --> 00:00:22.203
Their names are Peanut and Prancer.

7
00:00:22.203 --> 00:00:27.562
And see, normally when I look for when I
wanted to do demonstrations I look for

8
00:00:27.562 --> 00:00:30.694
things I can use onto
which people can latch,

9
00:00:30.694 --> 00:00:34.908
something that's familiar,
something that's natural.

10
00:00:34.908 --> 00:00:38.121
And I naturally tend to look at things
like the Spring Pet Clinic, right?

11
00:00:38.121 --> 00:00:41.257
The Spring Pet Clinic is a sample
application that demonstrates the moving

12
00:00:41.257 --> 00:00:42.960
parts in a typical spring application.

13
00:00:42.960 --> 00:00:46.274
And this application was written,
I don't know, well, it's been updated,

14
00:00:46.274 --> 00:00:49.374
look at that, 11 hours ago, but
it originated from 20 years ago, right?

15
00:00:49.374 --> 00:00:50.950
It's a sample application, right?

16
00:00:50.950 --> 00:00:51.750
So close that.

17
00:00:51.750 --> 00:00:52.932
Here we go.

18
00:00:52.932 --> 00:00:56.080
So, Spring project,
Spring Pet Clinic sample application.

19
00:00:56.080 --> 00:00:56.720
There you go.

20
00:00:56.720 --> 00:01:01.099
And there's Even a whole GitHub
organization called Spring Pet Clinic,

21
00:01:01.099 --> 00:01:01.840
right?

22
00:01:01.840 --> 00:01:07.328
And there's just dozens of different
versions of the Pet Clinic written in

23
00:01:07.328 --> 00:01:13.423
terms of like Spring AI or the REST API or
Spring Data, JDBC or Angular or Kotlin, or

24
00:01:13.423 --> 00:01:19.114
Vaadin Flow or LangChain or Microservices
or Hilla or React JS or istio htmx.

25
00:01:19.114 --> 00:01:21.369
Yay, and all this kind of stuff, right?

26
00:01:21.369 --> 00:01:24.592
All these different implementations
of basically the same domain.

27
00:01:24.592 --> 00:01:26.932
And I think it's a really
approachable domain because come on,

28
00:01:26.932 --> 00:01:27.850
it's animals, right?

29
00:01:27.850 --> 00:01:31.670
It's pets and dogs and cats and the like
and who doesn't love a good animal,

30
00:01:31.670 --> 00:01:33.250
a good pet, right?

31
00:01:33.250 --> 00:01:34.530
I love animals.

32
00:01:34.530 --> 00:01:35.570
Everybody loves animals, right?

33
00:01:35.570 --> 00:01:38.606
Surely, you all like animals.

34
00:01:38.606 --> 00:01:39.873
Who doesn't love animals?

35
00:01:39.873 --> 00:01:41.610
Let's look at some data stuff, okay?

36
00:01:41.610 --> 00:01:45.650
We're gonna look at data here and
you've already seen some of these pieces.

37
00:01:45.650 --> 00:01:47.050
We're gonna use the postgres support.

38
00:01:47.050 --> 00:01:52.710
We're gonna use Docker compose, we're
gonna use Spring Data JDBC here, okay?

39
00:01:54.230 --> 00:01:56.291
And I think we want to
do database migration.

40
00:01:56.291 --> 00:01:59.910
So we use Flyway and
of course, graalvm, right?

41
00:02:01.350 --> 00:02:04.140
And we use Spring Batch, okay?

42
00:02:04.140 --> 00:02:06.104
We're going to look at that.

43
00:02:06.104 --> 00:02:08.950
I'm going to open this
up as an application.

44
00:02:08.950 --> 00:02:12.181
Let me delete all that.

45
00:02:12.181 --> 00:02:15.435
Okay, so we're going to look at it.

46
00:02:15.435 --> 00:02:18.142
We're going to start from very simple,
basic stuff and

47
00:02:18.142 --> 00:02:21.260
progress all the way to sort of
a batch centric workload, okay?

48
00:02:21.260 --> 00:02:23.140
So we have a Docker compose file.

49
00:02:23.140 --> 00:02:25.340
I'm just going to start it up and
let it run in the background there.

50
00:02:25.340 --> 00:02:27.421
I'm not going to have spring
boot started up for me, but

51
00:02:27.421 --> 00:02:29.340
I do want to make sure it's
the only thing running.

52
00:02:29.340 --> 00:02:33.613
So, kill all Docker containers.

53
00:02:33.613 --> 00:02:38.310
Okay, so now docker compose up minus D.

54
00:02:38.310 --> 00:02:41.310
So there's my spring data source.

55
00:02:41.310 --> 00:02:49.070
Okay, let's go and
hide the docker compose support, okay.

56
00:02:49.070 --> 00:02:51.185
Command shift I reload.

57
00:02:51.185 --> 00:02:54.141
Okay, so
let's say I've got an application, and

58
00:02:54.141 --> 00:02:57.870
this application,
it's going to need some SQL, some schema.

59
00:02:57.870 --> 00:02:59.586
So I showed you earlier,
but let's just rehash.

60
00:02:59.586 --> 00:03:04.637
We're gonna create two files here,
data.sql,

61
00:03:04.637 --> 00:03:09.818
and we'll have another
file called schema.sql.

62
00:03:09.818 --> 00:03:13.226
So create table if not exists,

63
00:03:13.226 --> 00:03:19.160
dog id serial primary key
name text not null, okay?

64
00:03:19.160 --> 00:03:22.232
Owner text null and

65
00:03:22.232 --> 00:03:27.000
description text not null.

66
00:03:27.000 --> 00:03:30.520
So we're going to have a table of dogs
that we can adopt eventually, okay?

67
00:03:30.520 --> 00:03:32.360
So this is our dog table.

68
00:03:32.360 --> 00:03:34.920
And we want to insert some
sample data in there.

69
00:03:36.030 --> 00:03:38.045
We can do it in the data.sql file,

70
00:03:38.045 --> 00:03:41.950
but for now let's just, I don't know,
do we actually want to do.

71
00:03:41.950 --> 00:03:46.990
We can create some,
what else do I want to put in there?

72
00:03:46.990 --> 00:03:49.190
Maybe we could put
a person object as well.

73
00:03:49.190 --> 00:03:55.590
So create table, person id,
serial primary key, and then that's it.

74
00:03:55.590 --> 00:03:57.470
So we can do that.

75
00:03:57.470 --> 00:04:00.710
And then the person will have
a collection of dogs, I guess.

76
00:04:00.710 --> 00:04:04.395
So we have to have a foreign key,
yeah, in this over here.

77
00:04:04.395 --> 00:04:10.524
So we'll say person, big int,

78
00:04:10.524 --> 00:04:15.067
references person id.

79
00:04:15.067 --> 00:04:16.150
I think that'll be okay, right?

80
00:04:16.150 --> 00:04:17.750
That's a foreign key as
long as I can remember.

81
00:04:17.750 --> 00:04:21.230
So now spring boot will
automatically run these two files.

82
00:04:21.230 --> 00:04:23.150
There's nothing in
the data file right now.

83
00:04:23.150 --> 00:04:24.591
Let's comment that out for now.

84
00:04:24.591 --> 00:04:29.346
It'll run that file if you're using
an embedded database like H2 or HSQL or

85
00:04:29.346 --> 00:04:29.879
Derby.

86
00:04:29.879 --> 00:04:32.159
But I'm not using an embedded database,
I'm using postgres,

87
00:04:32.159 --> 00:04:33.560
which is on a separate host and port.

88
00:04:33.560 --> 00:04:38.526
So I need to tell IT to run those
initialization scripts always, right?

89
00:04:38.526 --> 00:04:41.480
You can do always, you can do never,
you can do embedded.

90
00:04:41.480 --> 00:04:42.440
I'm gonna do always, okay?

91
00:04:43.560 --> 00:04:45.040
So now if I do that, let's see.

92
00:04:45.040 --> 00:04:46.095
We've done nothing else.

93
00:04:46.095 --> 00:04:49.888
Let's just see if that runs, okay.

94
00:04:49.888 --> 00:04:52.700
It's not gonna work cuz I haven't
specified my connectivity credentials,

95
00:04:52.700 --> 00:04:54.310
of course, same, so we'll do that again.

96
00:04:54.310 --> 00:04:59.984
So spring data source password is secret,

97
00:04:59.984 --> 00:05:06.129
username is my user URL, JDBC, PostgreSQL,

98
00:05:06.129 --> 00:05:10.710
Localhost, MyDatabase, okay?

99
00:05:13.110 --> 00:05:15.670
And what did I do wrong now?

100
00:05:15.670 --> 00:05:16.550
My user?

101
00:05:19.520 --> 00:05:20.360
Person doesn't exist.

102
00:05:20.360 --> 00:05:23.360
Does it have to be one before the other?

103
00:05:23.360 --> 00:05:24.280
I guess it does?

104
00:05:24.280 --> 00:05:27.628
So let's go down over here, over there.

105
00:05:27.628 --> 00:05:32.867
Get rid of that, okay.

106
00:05:32.867 --> 00:05:36.844
Take five, okay.

107
00:05:36.844 --> 00:05:37.960
I don't have any web server.

108
00:05:37.960 --> 00:05:38.640
It doesn't matter.

109
00:05:38.640 --> 00:05:41.348
So now, if we go to our property file,
one of the nice things about

110
00:05:41.348 --> 00:05:44.257
Intellij Ultimate Edition is you can
click on that little icon there,

111
00:05:44.257 --> 00:05:46.050
hit the little button, it gives you this.

112
00:05:46.050 --> 00:05:50.686
Go to there, go over here, go to your
database, go there, go to there,

113
00:05:50.686 --> 00:05:53.044
go to your tables, and there you go.

114
00:05:53.044 --> 00:05:56.387
You got the schema for
dog and you got the table.

115
00:05:56.387 --> 00:05:58.210
You got the table for dog and
the table for person.

116
00:05:58.210 --> 00:06:00.260
There's no data in there as such,
but we're getting there.

117
00:06:00.260 --> 00:06:01.931
Okay, so Spring Boot can help you.

118
00:06:01.931 --> 00:06:05.437
If this is all you want to do,
right, this is probably fine.

119
00:06:05.437 --> 00:06:08.960
But this is day one, right?

120
00:06:08.960 --> 00:06:14.127
In the real application, you're going to
probably do more changes to the schema.

121
00:06:14.127 --> 00:06:17.360
And then this gets into a question
of database migrations.

122
00:06:17.360 --> 00:06:19.200
Here there's a lot of good
choices in the JVM community.

123
00:06:19.200 --> 00:06:20.742
There's Liquibase, there's Flyway.

124
00:06:20.742 --> 00:06:21.920
I happen to like Flyway.

125
00:06:21.920 --> 00:06:25.224
And the way it works is you just create
a database migration folder, you

126
00:06:25.224 --> 00:06:29.205
enable the Flyway plugin in your build,
which I already have here, Flyway, right?

127
00:06:29.205 --> 00:06:34.623
I got that all by choosing
Flyway Migration on the initializer,

128
00:06:34.623 --> 00:06:38.148
and then you put your schema file in here.

129
00:06:38.148 --> 00:06:45.330
I'm going to create a new file
here called V1__setup.sql.

130
00:06:45.330 --> 00:06:49.850
Okay, I'll move that to this,
move that to that.

131
00:06:49.850 --> 00:06:52.315
Okay, now I've got these three tables.

132
00:06:52.315 --> 00:06:58.396
I'm going to delete everything and
I'm going to delete schema, SQL.

133
00:06:58.396 --> 00:07:05.490
Okay, I'm going to say baseline true,
okay?

134
00:07:05.490 --> 00:07:06.610
Let's restart the program, okay?

135
00:07:10.380 --> 00:07:12.940
Refresh tables, three tables.

136
00:07:12.940 --> 00:07:16.300
So we've got dog and person,
they've both been created.

137
00:07:16.300 --> 00:07:20.677
And you can see that the migration table
here in Flyway that is created for

138
00:07:20.677 --> 00:07:23.282
us knows which ones have been run already.

139
00:07:23.282 --> 00:07:27.580
It knows which files already been run,
okay, and so it won't run that again.

140
00:07:27.580 --> 00:07:29.011
If I change it, it'll bark at me.

141
00:07:29.011 --> 00:07:32.397
So if I change this file,
delete from Dog or

142
00:07:32.397 --> 00:07:36.818
something like that data application,
it says, hey,

143
00:07:36.818 --> 00:07:42.107
you've done something to the file,
it's no longer consistent.

144
00:07:42.107 --> 00:07:45.572
The hash is inconsistent because it wants
to give you a way to know what changes

145
00:07:45.572 --> 00:07:48.684
have been applied to the database so
that it doesn't run them again.

146
00:07:48.684 --> 00:07:52.294
So it computes a hash and
it thinks it's seen this file before, but

147
00:07:52.294 --> 00:07:54.104
the hash doesn't match, okay?

148
00:07:54.104 --> 00:07:57.409
So you're encouraged to be very
deliberate about where you make changes.

149
00:07:57.409 --> 00:08:01.256
So I'm going to do rollback.

150
00:08:01.256 --> 00:08:02.000
I think that's it.

151
00:08:04.240 --> 00:08:05.920
Okay, so good.

152
00:08:05.920 --> 00:08:09.840
Now if I want to make changes,
let's say I want to insert a record, okay?

153
00:08:09.840 --> 00:08:13.840
V2 person.sql.

154
00:08:13.840 --> 00:08:20.480
Okay, I'll say insert into
person name values JLo.

155
00:08:21.600 --> 00:08:24.922
Okay, so I'm going to insert that.

156
00:08:24.922 --> 00:08:29.525
This is just and the scheme is
just V underscore, V number and

157
00:08:29.525 --> 00:08:32.060
then whatever into column name.

158
00:08:32.060 --> 00:08:33.260
What did I call it over here then?

159
00:08:35.666 --> 00:08:37.900
I don't even have a name.

160
00:08:37.900 --> 00:08:39.256
Okay, text.

161
00:08:39.256 --> 00:08:40.260
So I can't do that.

162
00:08:40.260 --> 00:08:40.860
Look at that.

163
00:08:40.860 --> 00:08:42.019
Actually, that's not going to be allowed.

164
00:08:42.019 --> 00:08:46.085
So I have to go over here, alter table,

165
00:08:46.085 --> 00:08:50.540
person, add column name text, not null.

166
00:08:52.150 --> 00:08:54.230
Okay, and then run this again.

167
00:08:57.030 --> 00:09:00.710
Okay, so now does that person
table have that new column?

168
00:09:02.390 --> 00:09:03.110
Yes, it does.

169
00:09:03.110 --> 00:09:04.470
And it's got the new record.

170
00:09:04.470 --> 00:09:05.950
Now it's an insert though.

171
00:09:05.950 --> 00:09:09.243
So if I run again,
we only have the one record,

172
00:09:09.243 --> 00:09:12.870
it doesn't rerun the same thing over and
over.

173
00:09:12.870 --> 00:09:16.674
If you want to roll these changes back,
if something should go wrong,

174
00:09:16.674 --> 00:09:21.340
if there's an exception, you create
a new file called R to --person.sql.

175
00:09:21.340 --> 00:09:22.420
That's the rollback script.

176
00:09:22.420 --> 00:09:25.177
It'll undo the change if something
went wrong to put it back in

177
00:09:25.177 --> 00:09:26.300
a consistent state.

178
00:09:26.300 --> 00:09:30.286
If there are things that need
to happen for every, sorry, no,

179
00:09:30.286 --> 00:09:34.287
it's called U2 underscore,
underscore, person SQL undo.

180
00:09:34.287 --> 00:09:37.958
If there's some things that
need to happen all the time,

181
00:09:37.958 --> 00:09:42.478
I think it's a resource like R,
dot, whatever, setup SQL, right?

182
00:09:42.478 --> 00:09:45.420
So either way, very, very, very powerful
system to do database migrations.

