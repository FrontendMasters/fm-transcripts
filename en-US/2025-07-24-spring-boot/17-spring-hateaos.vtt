WEBVTT

1
00:00:00.240 --> 00:00:02.720
&gt;&gt; Josh Long: So
we have a project called Spring Hateous.

2
00:00:05.280 --> 00:00:10.360
Okay, this is Spring and
then this is an acronym.

3
00:00:10.360 --> 00:00:13.840
It means Hypermedia as
the Engine of Application State.

4
00:00:13.840 --> 00:00:17.920
This is a pattern that predates
Spring's support of it, right?

5
00:00:17.920 --> 00:00:20.375
We created a framework to
support the pattern, but

6
00:00:20.375 --> 00:00:23.280
the pattern existed long before we did.

7
00:00:23.280 --> 00:00:26.370
And so, it's basically a separate project.

8
00:00:26.370 --> 00:00:28.279
It builds on top of what
we've just looked at and

9
00:00:28.279 --> 00:00:29.770
I happen to have it on the class path.

10
00:00:29.770 --> 00:00:33.756
So what I'm going to do now is I'm
going to build a very quick sort of

11
00:00:33.756 --> 00:00:36.490
hypermedia friendly version of this code.

12
00:00:36.490 --> 00:00:42.712
So let's say, and by the way,
in the meantime, since this is not rest,

13
00:00:42.712 --> 00:00:47.850
I'll restore this to response body and
addcontroller.

14
00:00:47.850 --> 00:00:50.290
Once we've moved to hypermedia,
I'll feel ok.

15
00:00:50.290 --> 00:00:52.747
Adding back response body,
sorry, Rest Controller.

16
00:00:52.747 --> 00:00:54.055
Okay, so let's do this.

17
00:00:54.055 --> 00:00:59.499
So we've got this, this is the old one.

18
00:00:59.499 --> 00:01:04.167
Okay, this is an HTTP endpoint, but
let's do hypermedia endpoint, right?

19
00:01:04.167 --> 00:01:08.353
So let's just do users collection, and

20
00:01:08.353 --> 00:01:13.410
I'm gonna return entity model of users,
okay?

21
00:01:15.090 --> 00:01:18.405
And in order to get
an entity model of users,

22
00:01:18.405 --> 00:01:22.180
I need to have a representation
model assembler.

23
00:01:22.180 --> 00:01:27.700
Okay, Representation model assembler for
user.

24
00:01:28.900 --> 00:01:30.420
Entity model user.

25
00:01:30.420 --> 00:01:31.300
So let me see.

26
00:01:33.859 --> 00:01:34.900
Entity model.

27
00:01:36.420 --> 00:01:39.380
Well, let me build that first and
we'll get to that later.

28
00:01:39.380 --> 00:01:42.500
So it'll be called user model assembler.

29
00:01:42.500 --> 00:01:45.938
And the idea is that there's gonna be
many places in the model where I need to

30
00:01:45.938 --> 00:01:49.830
contribute and assess the links that are
viable for that thing in the model, right?

31
00:01:49.830 --> 00:01:53.423
So these are assemblers,
you can reuse these all over the code and

32
00:01:53.423 --> 00:01:55.110
they do that work for you.

33
00:01:55.110 --> 00:01:59.430
So you just get used to like, you know,
calling them or invoking them.

34
00:01:59.430 --> 00:02:02.070
So I'm gonna call to_model, okay?

35
00:02:02.070 --> 00:02:03.430
There you go.

36
00:02:03.430 --> 00:02:05.990
And my job is to build out
this thing right here.

37
00:02:05.990 --> 00:02:08.150
So var controller is equal to.

38
00:02:09.750 --> 00:02:10.590
What did I call this?

39
00:02:10.590 --> 00:02:16.330
Let's call this, okay,
Media controller or users controller.

40
00:02:16.330 --> 00:02:19.530
Put that in there, okay?

41
00:02:20.810 --> 00:02:24.354
And then here, that's the controller name.

42
00:02:24.354 --> 00:02:30.084
The link to self is equal to LinkTo,

43
00:02:30.084 --> 00:02:35.050
okay, method on controller.

44
00:02:36.570 --> 00:02:40.678
And I've only got one method, so

45
00:02:40.678 --> 00:02:44.900
I'll call that the self link.

46
00:02:44.900 --> 00:02:47.380
But now imagine I had a method for
just one.

47
00:02:47.380 --> 00:02:48.540
I don't, but imagine I did.

48
00:02:48.540 --> 00:02:51.380
Okay, so okay, there we go.

49
00:02:52.740 --> 00:02:58.260
So it's just one, and
we can do usersClient.by_id.

50
00:02:59.700 --> 00:03:01.860
Okay, and then I do model assembler.

51
00:03:01.860 --> 00:03:03.440
We'll come back to that In a second.

52
00:03:03.440 --> 00:03:07.355
So now I have another link here to 1, and

53
00:03:07.355 --> 00:03:12.320
I can say 1 passing in the ID for
the entity, okay?

54
00:03:14.000 --> 00:03:20.160
So this would be called, actually
withRel(all), that'll be called 1 or self.

55
00:03:20.160 --> 00:03:22.240
And then I'm going to
return an entity model.

56
00:03:22.240 --> 00:03:25.040
So entity model of entity self one.

57
00:03:25.040 --> 00:03:28.747
Okay, so now I can use this
component in my controller when I

58
00:03:28.747 --> 00:03:34.010
want to produce a response of type
entity model back to the controller.

59
00:03:34.010 --> 00:03:34.730
There we go.

60
00:03:37.050 --> 00:03:42.970
This is here, final.

61
00:03:44.569 --> 00:03:47.817
There we go.

62
00:03:47.817 --> 00:03:49.850
Good, okay, so go there.

63
00:03:49.850 --> 00:03:50.810
Now I go here.

64
00:03:50.810 --> 00:03:56.275
I'm gonna create the User Model
Assembler.toModel, this one.

65
00:03:56.275 --> 00:04:04.180
Good, and then here .toCollection
model usersClient.users, okay?

66
00:04:05.940 --> 00:04:07.540
So what's the issue with this one now?

67
00:04:08.686 --> 00:04:10.143
It's a collection model of entity.

68
00:04:10.143 --> 00:04:12.127
Yeah, yeah, there you go.

69
00:04:12.127 --> 00:04:17.140
So, it's basically the same code, but I'm
wrapping it in this model envelope, okay?

70
00:04:17.140 --> 00:04:19.060
And the model envelope
has links attached to it.

71
00:04:22.189 --> 00:04:26.349
Okay, so now what happens if I go here?

72
00:04:26.349 --> 00:04:28.589
Nothing, I didn't configure a menu.

73
00:04:28.589 --> 00:04:33.614
But if I go here, you can see now
there's links, there's metadata attached

74
00:04:33.614 --> 00:04:38.275
in the JSON payload that shows me
the navigable useful endpoints here.

75
00:04:38.275 --> 00:04:42.269
And I'm doing it based
on this model assembler.

76
00:04:42.269 --> 00:04:46.404
Dynamically, I'm saying when somebody
calls this method on my controller of this

77
00:04:46.404 --> 00:04:48.660
type all, then that's called the all link.

78
00:04:48.660 --> 00:04:50.380
When they call this one,
that's called self.

79
00:04:50.380 --> 00:04:51.340
That's my current one.

80
00:04:51.340 --> 00:04:52.180
And you can do some.

81
00:04:52.180 --> 00:04:57.003
If you can say if entity deleted
is suspended or whatever, and

82
00:04:57.003 --> 00:05:02.291
then put different links in there so
you can dynamically show more or

83
00:05:02.291 --> 00:05:06.860
less of the links based on
the state of the entity.

84
00:05:06.860 --> 00:05:10.182
So the server side drives the
representation of the state on the client

85
00:05:10.182 --> 00:05:10.753
side here.

86
00:05:10.753 --> 00:05:12.350
So that's called hypermedia.

87
00:05:12.350 --> 00:05:13.420
We could get into the whole thing.

88
00:05:13.420 --> 00:05:16.030
You really should, but
I gotta move on here quickly.

89
00:05:16.030 --> 00:05:17.390
Any questions on that one, though?

90
00:05:20.110 --> 00:05:21.630
You can see it's got
an embedded list here.

91
00:05:21.630 --> 00:05:24.366
So if I go down to the bottom.

92
00:05:24.366 --> 00:05:26.030
Yeah, look at that.

93
00:05:26.030 --> 00:05:29.150
I could actually add links to
the resource as well, but I didn't.

94
00:05:29.150 --> 00:05:32.751
And this is HAL, this is hypertext
application links or whatever.

95
00:05:32.751 --> 00:05:36.350
There's other encodings as well,
for this, so lots of good stuff.

