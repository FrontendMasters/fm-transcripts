WEBVTT

1
00:00:00.480 --> 00:00:03.840
&gt;&gt; Josh Long: Now I mentioned earlier
that we have a separate table called dog.

2
00:00:03.840 --> 00:00:05.560
And you know, I want to map that dog.

3
00:00:05.560 --> 00:00:07.120
It's a one to many relationship there.

4
00:00:07.120 --> 00:00:11.680
Right?
So set of dog, dogs, record dog.

5
00:00:11.680 --> 00:00:12.480
Hey, come back.

6
00:00:12.480 --> 00:00:19.120
Record dog, entity, string name,
string owner, string description.

7
00:00:21.040 --> 00:00:21.680
Okay.

8
00:00:22.720 --> 00:00:24.000
And then I'm going to make a set.

9
00:00:25.360 --> 00:00:27.590
Okay, there's my updated code.

10
00:00:27.590 --> 00:00:28.670
I have no dogs though.

11
00:00:28.670 --> 00:00:30.510
Right.
So let's go back and create yet

12
00:00:30.510 --> 00:00:31.590
another migration.

13
00:00:32.870 --> 00:00:39.270
V3 Prancer and Peanut.

14
00:00:40.870 --> 00:00:43.590
Okay, so insert.

15
00:00:43.590 --> 00:00:45.830
And by the way, insert into dog.

16
00:00:45.830 --> 00:00:49.510
Do we know what the ID is for person?

17
00:00:49.510 --> 00:00:50.190
Surely it's one.

18
00:00:50.190 --> 00:00:51.110
Yeah.
Okay, it's one.

19
00:00:51.110 --> 00:00:52.470
So we go back to this.

20
00:00:54.080 --> 00:00:55.760
Insert into dog.

21
00:00:55.760 --> 00:00:58.829
Name, person,

22
00:00:58.829 --> 00:01:03.440
description, values.

23
00:01:05.360 --> 00:01:07.040
Prancer.

24
00:01:07.040 --> 00:01:09.527
Okay, Prancer.

25
00:01:09.527 --> 00:01:13.733
bbb The person is one and

26
00:01:13.733 --> 00:01:18.410
the description is.

27
00:01:18.410 --> 00:01:19.930
Where's my guy, Prancer?

28
00:01:21.530 --> 00:01:26.410
He is a.

29
00:01:30.490 --> 00:01:38.650
Okay, so he is a neurotic man hating
animal, hating children, hating dog.

30
00:01:38.650 --> 00:01:40.690
That looks like a gremlin.

31
00:01:40.690 --> 00:01:41.530
Okay, there we go.

32
00:01:41.530 --> 00:01:42.810
That's Prancer.

33
00:01:42.810 --> 00:01:44.730
And then we'll have Peanut.

34
00:01:46.520 --> 00:01:51.280
Okay, Peanut,

35
00:01:51.280 --> 00:01:54.920
the worst.

36
00:01:54.920 --> 00:01:55.920
Okay, there we go.

37
00:01:55.920 --> 00:01:57.040
So there's my two dogs.

38
00:01:57.040 --> 00:01:59.240
Let's go ahead and now restart this.

39
00:02:01.560 --> 00:02:04.680
Okay, so now if I go over here,
I've got person.

40
00:02:04.680 --> 00:02:05.320
Great.

41
00:02:05.320 --> 00:02:06.240
Two dogs, great.

42
00:02:06.240 --> 00:02:06.840
No owners.

43
00:02:06.840 --> 00:02:07.640
Very surprising.

44
00:02:07.640 --> 00:02:09.400
Okay, nobody could have seen this coming.

45
00:02:11.520 --> 00:02:14.840
But if I go down here and I print out the
person, I do the find all and I'm doing.

46
00:02:14.840 --> 00:02:16.440
It's now mapped 1 to n, right?.

47
00:02:16.440 --> 00:02:21.040
So if I look at the results there
dogs says dog one and then dog two.

48
00:02:22.080 --> 00:02:24.658
So it's automatically figured
out that relationship for me,

49
00:02:24.658 --> 00:02:25.880
which I think is pretty nice.

50
00:02:25.880 --> 00:02:27.000
This is a very concise way.

51
00:02:27.000 --> 00:02:29.592
Okay, so I've got spring data,
I've got 1 to n relationships,

52
00:02:29.592 --> 00:02:32.160
I've got schema migrations,
I think we're doing pretty good.

