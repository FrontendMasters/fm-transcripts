WEBVTT

1
00:00:00.320 --> 00:00:02.712
&gt;&gt; Josh Long: I wanted to spend a brief
moment here talking about enterprise

2
00:00:02.712 --> 00:00:03.760
integration patterns.

3
00:00:03.760 --> 00:00:07.438
And the reason I think about this
stuff a lot is because increasingly,

4
00:00:07.438 --> 00:00:09.429
as we move forward in time, the body,

5
00:00:09.429 --> 00:00:12.880
the surface area of things with
which I cannot talk grows bigger.

6
00:00:12.880 --> 00:00:15.919
There's a whole ecosystem here around
enterprise integration patterns.

7
00:00:15.919 --> 00:00:20.704
Usually this stuff comes from the world of
like legacy 90s software, you know, where

8
00:00:20.704 --> 00:00:25.440
you've got like very, very hard, isolated
things with which you want to integrate.

9
00:00:25.440 --> 00:00:27.470
But now everything is
a distributed system.

10
00:00:27.470 --> 00:00:31.070
And so this technology, this idea, this
practice has become more useful than ever.

11
00:00:31.070 --> 00:00:35.210
What has changed is the idea of the
broker, of the messaging queue as the hub

12
00:00:35.210 --> 00:00:38.710
around all around,
which all of this sort of rotates, right?

13
00:00:38.710 --> 00:00:40.270
That just isn't a thing anymore, right?

14
00:00:40.270 --> 00:00:44.068
Nowadays you have your applications, those
things need to talk to other things and so

15
00:00:44.068 --> 00:00:46.110
they hang off integration functionality.

16
00:00:46.110 --> 00:00:49.040
So we could take that example
that we looked at earlier, and

17
00:00:49.040 --> 00:00:53.025
if you needed to listen to messages coming
in From Kafka or RabbitMQ or whatever,

18
00:00:53.025 --> 00:00:56.774
you could just add this method and be done
with it in much the same way as you did

19
00:00:56.774 --> 00:00:59.190
event listener with
the Spring boot events.

20
00:00:59.190 --> 00:01:02.757
But what happens if you want to need to do
a little bit more than just take a message

21
00:01:02.757 --> 00:01:04.470
straight off the wire and process it?

22
00:01:04.470 --> 00:01:08.190
This is where you get into the realm
of enterprise integration patterns.

23
00:01:08.190 --> 00:01:14.790
And so we have this amazing book
written by Bobby Hope and Gregor Wolff.

24
00:01:14.790 --> 00:01:17.328
Bobby Hope was one of the people
in the design patterns world back

25
00:01:17.328 --> 00:01:18.230
in the 90s, right?

26
00:01:18.230 --> 00:01:19.670
And it changed the world.

27
00:01:19.670 --> 00:01:22.770
And this is actually how I got into
Spring is because of this book.

28
00:01:22.770 --> 00:01:24.450
This book was written in 2004.

29
00:01:24.450 --> 00:01:25.650
I was already using Spring.

30
00:01:25.650 --> 00:01:27.250
But I mean, when I say got into.

31
00:01:27.250 --> 00:01:29.250
I mean, I started writing code for right.

32
00:01:29.250 --> 00:01:33.970
To contribute to the spring projects is
because this book kind of changed my life.

33
00:01:33.970 --> 00:01:38.850
I was already dealing with
Messaging Technologies circa 2004, 2005.

34
00:01:38.850 --> 00:01:41.934
I was using Rendezvous,
I was using web methods,

35
00:01:41.934 --> 00:01:45.679
I was using Rendezvous from tibco,
I was using web methods,

36
00:01:45.679 --> 00:01:51.730
I was using X Way integrator, which is
not my friend, we didn't love each other.

37
00:01:51.730 --> 00:01:55.298
And then I started realizing,
okay, these things are very hard,

38
00:01:55.298 --> 00:01:58.690
sort of isolated things and
they require a lot of consultants.

39
00:01:58.690 --> 00:02:00.930
You know, same thing for
MQ series from IBM.

40
00:02:00.930 --> 00:02:03.095
They really wanted a lot of consultants.

41
00:02:03.095 --> 00:02:06.970
Biz talk I don't know about,
I bet it's fine, I'm sure it is.

42
00:02:06.970 --> 00:02:07.490
I don't know.

43
00:02:07.490 --> 00:02:11.827
But the point is I was really looking for
something that would give me some of this

44
00:02:11.827 --> 00:02:15.844
integration capability, but
that didn't require 10 consultants and

45
00:02:15.844 --> 00:02:20.050
golf games to get the job done, you know,
So I look for open source options and

46
00:02:20.050 --> 00:02:24.649
there are some open source enterprise
service buses right in the Java community.

47
00:02:24.649 --> 00:02:28.070
Yeah, they even mentioned a whole
bunch of different open source ESPs.

48
00:02:28.070 --> 00:02:34.470
Apache Camel, Mule, WC02, Oracle Service
Bus, ESP fuse, Sonic Mix, Sonic, ESP, etc.

49
00:02:35.910 --> 00:02:40.309
One of these, I think it's Sonic,
there's a guy named Dave Chappell,

50
00:02:40.309 --> 00:02:41.977
not the comedian, right?

51
00:02:41.977 --> 00:02:45.920
[LAUGH] Dave Chappell, not the comedian,
I think it's spelled basically the same.

52
00:02:45.920 --> 00:02:50.240
Dave Chappell wrote the original
O'Reilly JMS book, right.

53
00:02:50.240 --> 00:02:51.760
And that book.

54
00:02:51.760 --> 00:02:54.594
You know, I didn't, I didn't love the
technology, but I appreciated what this

55
00:02:54.594 --> 00:02:56.851
guy was doing because I think he was
working at Sonic at the time and

56
00:02:56.851 --> 00:02:58.960
he did some really good stuff
in the messaging space.

57
00:02:58.960 --> 00:03:03.760
So I actually got him to sign a copy of
that book and he, he signed the message.

58
00:03:03.760 --> 00:03:05.200
He signed the book.

59
00:03:05.200 --> 00:03:06.960
Get the message, exclamation mark.

60
00:03:10.160 --> 00:03:13.520
Anyway, all that to say messaging,
super good, super interesting.

61
00:03:13.520 --> 00:03:16.970
There's a whole world of stuff around it,
around how to process messaging,

62
00:03:16.970 --> 00:03:17.880
how to deal with it.

63
00:03:17.880 --> 00:03:21.311
And there's four different types of
integration styles that sort of naturally

64
00:03:21.311 --> 00:03:23.520
lend themselves to this discussion.

65
00:03:23.520 --> 00:03:24.320
File transfer.

66
00:03:24.320 --> 00:03:27.213
This is where one system produces data
that gets written to a file that another

67
00:03:27.213 --> 00:03:27.800
one consumes.

68
00:03:27.800 --> 00:03:30.956
You've got shared database, in which one
system writes something to a database and

69
00:03:30.956 --> 00:03:32.120
then another one consumes it.

70
00:03:32.120 --> 00:03:36.428
That's a bit of an anti-pattern,
right, that's a very un microservice.

71
00:03:36.428 --> 00:03:37.880
Today you've got rpc.

72
00:03:37.880 --> 00:03:39.080
Why is RPC a problem?

73
00:03:39.080 --> 00:03:43.000
Well, you're making invocations of methods
on a remote service synchronously.

74
00:03:43.000 --> 00:03:44.760
What happens if that service disappears?

75
00:03:44.760 --> 00:03:46.151
You're hosed, aren't you, right?

76
00:03:46.151 --> 00:03:49.280
So it's the worst of possible integration
options, but it's very common.

77
00:03:49.280 --> 00:03:53.400
And then messaging, Messaging gives
you all the benefits of all these.

78
00:03:53.400 --> 00:03:56.440
You're not coupled in that you
don't have to be in the same place.

79
00:03:56.440 --> 00:03:57.160
Like files.

80
00:03:57.160 --> 00:04:00.080
I can write a file and then disappear and
you can read the file later on.

81
00:04:00.080 --> 00:04:01.360
So it's asynchronous.

82
00:04:01.360 --> 00:04:04.720
And all they have to agree on
is the location of the file.

83
00:04:04.720 --> 00:04:08.400
Shared database has the same kind
of benefits of file transfer.

84
00:04:08.400 --> 00:04:11.920
And then RPC requires you to be in
the same place and at the same time.

85
00:04:13.040 --> 00:04:15.280
So these both require
being in the same place.

86
00:04:15.280 --> 00:04:19.800
Messaging requires you to know about the
same broker, but you can be asynchronous.

87
00:04:19.800 --> 00:04:23.628
So this gives you all the benefits
of these three things without any of

88
00:04:23.628 --> 00:04:25.120
the drawbacks.

89
00:04:25.120 --> 00:04:28.753
So messaging is a asynchronous by default,
you can do things like fire and

90
00:04:28.753 --> 00:04:31.272
forget you don't have to
operate at the same time,

91
00:04:31.272 --> 00:04:35.159
I can make a request and you can produce
the response five hours later, right?

92
00:04:35.159 --> 00:04:36.930
So it gives you a lot of decoupling.

93
00:04:36.930 --> 00:04:40.063
So by default, when you think about
decoupling and building integrations

94
00:04:40.063 --> 00:04:43.130
in systems, you've got to think
about it in terms of messaging.

95
00:04:43.130 --> 00:04:49.930
So I've shown you how to do REST and web
stuff, right, the hypermedia and all that.

96
00:04:49.930 --> 00:04:53.800
But the final form of a big distributed
system is going to be messaging, right?

97
00:04:53.800 --> 00:04:57.902
You'll start doing it in terms of I send
a message and that updates the state,

98
00:04:57.902 --> 00:05:00.883
as opposed to I ask a system
to give me the state, right?

99
00:05:00.883 --> 00:05:04.320
And so I really, I hope you'll like,
keep messaging in your heart.

100
00:05:04.320 --> 00:05:06.720
And I'm going to show you a quick
framework here called Spring Integration.

101
00:05:06.720 --> 00:05:08.784
Yes, sir.
&gt;&gt; Speaker 2: Is there anything that does,

102
00:05:08.784 --> 00:05:10.920
like state management of messaging?

103
00:05:10.920 --> 00:05:11.600
Like, so

104
00:05:11.600 --> 00:05:18.120
it's like a process of multiple messages
that completes to do some specific task.

105
00:05:18.120 --> 00:05:19.480
&gt;&gt; Josh Long: Did you look ahead?

106
00:05:19.480 --> 00:05:20.440
&gt;&gt; Speaker 2: I have not.

107
00:05:20.440 --> 00:05:21.800
&gt;&gt; Josh Long: Did you cheat?

108
00:05:21.800 --> 00:05:23.560
That's what we're talking about right now.

109
00:05:23.560 --> 00:05:25.240
Right now.
That's what I was about to say.

110
00:05:25.240 --> 00:05:28.280
Spring Integration is the project
that does exactly that.

111
00:05:28.280 --> 00:05:31.200
And it has the ability to
support all these patterns.

112
00:05:31.200 --> 00:05:32.520
See all these patterns on the right here?

113
00:05:33.960 --> 00:05:37.880
So this is where my story finishes up,
which is I read this book, I'm a big fan.

114
00:05:37.880 --> 00:05:39.320
And you know who else read this book?

115
00:05:39.320 --> 00:05:42.200
A gentleman named Mark Fisher
over on the Spring team, right?

116
00:05:42.200 --> 00:05:47.860
Mark Fisher, he's a genius
that makes terrible mistakes.

117
00:05:47.860 --> 00:05:51.380
And the terrible mistake that
he made was he hired me, right?

118
00:05:51.380 --> 00:05:53.380
Which is regrettable, I'm sure.

119
00:05:53.380 --> 00:05:58.273
And he built this technology to support
these patterns in an open source

120
00:05:58.273 --> 00:06:01.460
way in a nice clean, idiomatic spring way.

121
00:06:01.460 --> 00:06:05.493
And so the API elements in Spring
Integration map one to one to the concepts

122
00:06:05.493 --> 00:06:09.200
in this book, as opposed to what so
many of these other technologies

123
00:06:09.200 --> 00:06:12.740
do where they have different names for
what's already.

124
00:06:12.740 --> 00:06:15.120
This is the lingua franca of integration,
these patterns.

125
00:06:15.120 --> 00:06:17.520
If you understand these patterns,
then you're ready to go, right?

126
00:06:17.520 --> 00:06:18.873
And if you understand these patterns,

127
00:06:18.873 --> 00:06:20.640
you can start writing code
in Spring Integration.

128
00:06:20.640 --> 00:06:23.600
So I'm going to show you a very simple
example using Spring Integration.

129
00:06:23.600 --> 00:06:27.480
And I've just shown you how to do Kafka.

130
00:06:27.480 --> 00:06:30.831
But we're gonna keep it much
more simple here, right?

131
00:06:30.831 --> 00:06:35.731
Remember, in most integration flows,
you've got a thing that produces events

132
00:06:35.731 --> 00:06:38.480
and then a thing that
consumes those events.

133
00:06:38.480 --> 00:06:41.130
So a source and a sync, right?

134
00:06:41.130 --> 00:06:44.787
In a messaging world, the thing that
consumes the events from the external

135
00:06:44.787 --> 00:06:48.445
world is an inbound adapter, it takes
the results of some external thing,

136
00:06:48.445 --> 00:06:50.650
be it a new file that
appears in a file system,

137
00:06:50.650 --> 00:06:54.656
a new message that appears in Kafka, a new
message that appears in an email inbox,

138
00:06:54.656 --> 00:06:57.410
a new tweet that gets sent out,
a new whatever, right?

139
00:06:57.410 --> 00:07:01.784
Any event that happens in the real world,
you have an inbound adapter that allows

140
00:07:01.784 --> 00:07:05.770
you to pull those things in and
then deliver them to consumers.

141
00:07:05.770 --> 00:07:09.632
Those consumers sit in a pipeline,
like you were saying, right, things that

142
00:07:09.632 --> 00:07:13.510
process these messages, and there
are components that act in that pipeline.

143
00:07:13.510 --> 00:07:16.450
There's things for filtering, for
transforming, for routing, for

144
00:07:16.450 --> 00:07:18.270
splitting, for aggregating, et cetera.

145
00:07:18.270 --> 00:07:21.070
And then finally, when you're done,
you write the thing somewhere.

146
00:07:21.070 --> 00:07:23.910
You write the results of that
processing out somewhere, usually.

147
00:07:23.910 --> 00:07:25.950
And that's an outbound adapter.

148
00:07:25.950 --> 00:07:26.950
So you might take a data.

149
00:07:26.950 --> 00:07:29.024
You might take,
as we're going to do in this example,

150
00:07:29.024 --> 00:07:31.390
we're going to read data
from a file system.

151
00:07:31.390 --> 00:07:33.667
As new files arrive,
we'll listen for the files and

152
00:07:33.667 --> 00:07:37.000
we'll start reading them as they
get dropped into a folder, right?

153
00:07:37.000 --> 00:07:39.097
And then we'll process them and
then, I don't know,

154
00:07:39.097 --> 00:07:40.840
write them out to the console or
put them out.

155
00:07:40.840 --> 00:07:42.655
You could put them in a database,
you could send them over Kafka,

156
00:07:42.655 --> 00:07:43.320
you could do whatever.

157
00:07:43.320 --> 00:07:46.765
The point is, the code in the middle
is completely unawares of what

158
00:07:46.765 --> 00:07:49.360
you did at the end and
what you do in the beginning.

159
00:07:49.360 --> 00:07:51.560
It's a pipes and
filters architecture, right?

160
00:07:51.560 --> 00:07:55.760
So the inbound adapter is the only thing
you swap out to change the behavior of

161
00:07:55.760 --> 00:07:57.280
the connections, right?

162
00:07:57.280 --> 00:07:59.405
The code in the middle is
unaware of the inbound and

163
00:07:59.405 --> 00:08:01.640
the outbound adapters that proceed and
succeed it.

