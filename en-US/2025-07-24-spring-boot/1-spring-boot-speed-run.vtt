WEBVTT

1
00:00:00.400 --> 00:00:02.160
&gt;&gt; Josh Long: So what is it?

2
00:00:02.160 --> 00:00:03.323
What does it look like when it's done?

3
00:00:03.323 --> 00:00:05.760
Well, I don't know if I can do it well,
but let's just take a look at it.

4
00:00:05.760 --> 00:00:07.760
We're going to build something very,
very quickly here.

5
00:00:07.760 --> 00:00:09.680
We're going to go to my second
favorite place on the Internet.

6
00:00:09.680 --> 00:00:11.120
This is Start Spring IO.

7
00:00:11.120 --> 00:00:13.960
This is where I'm going to begin
all my little Spring Boot projects.

8
00:00:13.960 --> 00:00:16.657
Today you have some choices you need
to make when you build your first

9
00:00:16.657 --> 00:00:17.280
application.

10
00:00:18.560 --> 00:00:20.098
What build tool do you want to use?

11
00:00:20.098 --> 00:00:21.640
Look, this thing has memory, right?

12
00:00:21.640 --> 00:00:23.994
So Start Spring IO, it keeps a cookie.

13
00:00:23.994 --> 00:00:26.911
So if I go here, refresh and
it says Kotlin again,

14
00:00:26.911 --> 00:00:30.740
even though I chose Maven before,
now I refresh, it says Maven.

15
00:00:30.740 --> 00:00:31.860
Get it?
Yeah, okay, good.

16
00:00:31.860 --> 00:00:32.807
So that's convenient.

17
00:00:32.807 --> 00:00:34.261
I'll be choosing Maven for you.

18
00:00:34.261 --> 00:00:37.049
The default will probably be Gradle and
Groovy, right?

19
00:00:37.049 --> 00:00:39.266
If you want Maven,
just check that old box there.

20
00:00:39.266 --> 00:00:40.220
What language do you like to use?

21
00:00:40.220 --> 00:00:42.368
I'm going to use Java, just because for

22
00:00:42.368 --> 00:00:45.413
the moment it is the most widely
used language on the jvm.

23
00:00:45.413 --> 00:00:47.914
How many of you are using Java?

24
00:00:47.914 --> 00:00:49.639
Kotlin.

25
00:00:49.639 --> 00:00:52.421
Okay, well, Kotlin is very,
very popular in the Java community.

26
00:00:52.421 --> 00:00:57.132
I think an owing into in part to
the prevalence of its use in Android and

27
00:00:57.132 --> 00:00:59.815
of course the full throated support for

28
00:00:59.815 --> 00:01:04.302
it by spring in the spring
ecosystem back in 2016 and onward.

29
00:01:04.302 --> 00:01:05.729
So Kotlin's a very good choice.

30
00:01:05.729 --> 00:01:07.011
Groovy, a nice language as well.

31
00:01:07.011 --> 00:01:08.470
Very, very well supported as well.

32
00:01:08.470 --> 00:01:09.150
So that's that.

33
00:01:09.150 --> 00:01:10.521
What version of Spring Boot
are we going to use?

34
00:01:10.521 --> 00:01:13.327
Well, of course,
the latest and greatest 3.4.4.

35
00:01:13.327 --> 00:01:15.390
And then what questions do we want to ask?

36
00:01:15.390 --> 00:01:17.183
What do we want to name this service?

37
00:01:17.183 --> 00:01:21.786
Well, I'm going to call this service
Service because I'm amazing with names.

38
00:01:21.786 --> 00:01:22.500
Amazing with names.

39
00:01:22.500 --> 00:01:23.508
I get that from my dad.

40
00:01:23.508 --> 00:01:25.020
My dad was amazing with names.

41
00:01:25.020 --> 00:01:26.060
When we had a small.

42
00:01:26.060 --> 00:01:29.660
When I was a boy, we had a small white
dog and my father named him White Dog.

43
00:01:29.660 --> 00:01:31.260
Again, amazing with names.

44
00:01:31.260 --> 00:01:35.088
Okay, now we have a choice also down
here of what version of Java do you

45
00:01:35.088 --> 00:01:35.820
want to use?

46
00:01:35.820 --> 00:01:40.864
Friends, I would be doing you a disservice
if I recommended anything but

47
00:01:40.864 --> 00:01:45.426
the latest and greatest GA version,
which to wit, is Java 24.

48
00:01:45.426 --> 00:01:46.700
So we're going to use Java 24.

49
00:01:48.180 --> 00:01:50.606
If you wanted to do it wrong,
you could use one of these other ones.

50
00:01:50.606 --> 00:01:52.088
Right, but that would be.

51
00:01:52.088 --> 00:01:54.260
There's a lot of reasons why
you should be using Java 24,

52
00:01:54.260 --> 00:01:55.744
about which we'll speak in due course.

53
00:01:55.744 --> 00:01:58.043
But just keep in mind Java
24 is a great version.

54
00:01:58.043 --> 00:02:01.100
So anyway, we have this new project and
we're going to add some dependencies.

55
00:02:01.100 --> 00:02:02.794
We're just going to build
something very quickly.

56
00:02:02.794 --> 00:02:06.454
This is not really an introduction
to any of these technologies per se,

57
00:02:06.454 --> 00:02:10.428
just a demonstration of what is possible
if you're sort of inspired enough.

58
00:02:10.428 --> 00:02:13.165
So I'm going to use the Spring
Boot DevTools to do fast reloads.

59
00:02:13.165 --> 00:02:16.040
I'll bring in Spring's Web support
to support building a Web server.

60
00:02:16.040 --> 00:02:18.751
I'm gonna bring in the Spring Boot
Actuator to support observability.

61
00:02:18.751 --> 00:02:21.457
I'm gonna bring in Spring Data JDBC
to bring in an ORM.

62
00:02:21.457 --> 00:02:24.967
I'm gonna bring in Postgres, the driver,
the client to talk to the Postgres

63
00:02:24.967 --> 00:02:28.761
database that will be stood up for me by
Docker Compose, which I'll also bring in.

64
00:02:28.761 --> 00:02:32.553
And I'm also gonna bring in GraalVM's
Native Image support technology, and

65
00:02:32.553 --> 00:02:33.595
I think that'll do.

66
00:02:33.595 --> 00:02:35.040
So let's go ahead and hit Generate.

67
00:02:35.040 --> 00:02:38.120
I'm going to open this up in my IDE now,
friends, I have this.

68
00:02:38.120 --> 00:02:39.800
Unzip and open uao.

69
00:02:39.800 --> 00:02:47.810
This is a Java and what I mean by that
is I'm using this Java program, right?

70
00:02:47.810 --> 00:02:50.725
It's a void main var find the file,

71
00:02:50.725 --> 00:02:55.497
detect the presence of a file
that is a build file, right?

72
00:02:55.497 --> 00:02:58.370
And if it's there, I shell out and
I run idea space buildFile.

73
00:02:58.370 --> 00:03:01.370
It's written in Java and
I'm not even running the class file.

74
00:03:01.370 --> 00:03:03.134
Notice this is just a source code file.

75
00:03:03.134 --> 00:03:07.061
You can run this on the JVM just by saying
java --enable-preview --source 24 and

76
00:03:07.061 --> 00:03:08.855
then pointing to the source code file.

77
00:03:08.855 --> 00:03:10.670
So it's a script written in Java.

78
00:03:10.670 --> 00:03:11.526
Notice that there's no class.

79
00:03:11.526 --> 00:03:15.350
There's no class main whatever
around the void main method.

80
00:03:15.350 --> 00:03:17.510
And there's no public static either.

81
00:03:17.510 --> 00:03:18.470
So it's very, very convenient.

82
00:03:18.470 --> 00:03:19.710
So that's an alias in my shell.

83
00:03:19.710 --> 00:03:23.479
All it's doing is running unzip,
seeding into the directory and

84
00:03:23.479 --> 00:03:25.821
then running idea space pom xml, okay?

85
00:03:25.821 --> 00:03:28.604
So you can do the same at home or
you could use that same source code or

86
00:03:28.604 --> 00:03:29.270
whatever.

87
00:03:29.270 --> 00:03:33.711
So uao, there we go.

88
00:03:33.711 --> 00:03:35.280
And we're not going to
spend too long here.

89
00:03:35.280 --> 00:03:37.453
I've got a brand new project
that was created for

90
00:03:37.453 --> 00:03:39.520
me that gave me a Docker Compose file,
right?

91
00:03:39.520 --> 00:03:40.946
You can see that right here.

92
00:03:40.946 --> 00:03:43.560
I'm going to manually connect to this.

93
00:03:43.560 --> 00:03:46.715
I'm gonna add the port so it's exposed,
it's for Postgres, obviously.

94
00:03:46.715 --> 00:03:49.520
I'm going to disable the spring
boot support for Docker Compose.

95
00:03:49.520 --> 00:03:53.360
We'll get into this stuff a little bit
later, but don't need it just now.

96
00:03:53.360 --> 00:03:55.320
I'm going to go ahead and
run the Docker image.

97
00:03:55.320 --> 00:03:58.213
So Docker compose up- D, okay?

98
00:03:58.213 --> 00:03:59.532
That should.

99
00:03:59.532 --> 00:04:01.241
Wow, pulling, okay.

100
00:04:01.241 --> 00:04:04.718
And we're going to build a simple
application that talks to that database to

101
00:04:04.718 --> 00:04:06.410
store data of type customer.

102
00:04:06.410 --> 00:04:08.824
So let's talk about the code here first.

103
00:04:08.824 --> 00:04:10.410
The code is the hardest part, right.

104
00:04:10.410 --> 00:04:12.855
We want to get that done
as quickly as possible.

105
00:04:12.855 --> 00:04:20.793
So we'll create a domain called
customer int ID string name and

106
00:04:20.793 --> 00:04:25.150
there's this customer integer.

107
00:04:25.150 --> 00:04:28.630
And then this would be called
customer repository, okay.

108
00:04:28.630 --> 00:04:29.251
So there's that.

109
00:04:29.251 --> 00:04:30.950
That's my whole ORM domain model.

110
00:04:30.950 --> 00:04:32.710
And I want a simple HTTP endpoint.

111
00:04:32.710 --> 00:04:38.670
Yeah, so I'll say bean router function,
server response, okay.

112
00:04:38.670 --> 00:04:41.109
Server response HT.

113
00:04:41.109 --> 00:04:44.070
Whatever my routes, right.

114
00:04:44.070 --> 00:04:46.518
Return route.

115
00:04:46.518 --> 00:04:48.790
Okay, .build.

116
00:04:48.790 --> 00:04:50.878
Get customers.

117
00:04:50.878 --> 00:04:55.600
And we're going to return
a handler server response, okay.

118
00:04:55.600 --> 00:04:59.680
Body passing in the results from the orm.

119
00:04:59.680 --> 00:05:02.536
So we'll say customer
repository repository.

120
00:05:02.536 --> 00:05:06.960
Injecting that there for
reference, find all, okay.

121
00:05:08.560 --> 00:05:11.080
So that's the core code.

122
00:05:11.080 --> 00:05:12.720
Remove this.

123
00:05:12.720 --> 00:05:14.988
Get rid of the static import.

124
00:05:14.988 --> 00:05:15.586
Fantastic.

125
00:05:15.586 --> 00:05:17.280
Get rid of the unused variable.

126
00:05:17.280 --> 00:05:18.277
Good.

127
00:05:18.277 --> 00:05:25.666
And we want to say, okay,
let's get rid of that dot body.

128
00:05:25.666 --> 00:05:27.030
Put that in there.

129
00:05:27.030 --> 00:05:28.950
And then we don't need this.

130
00:05:28.950 --> 00:05:31.070
Okay, that looks like it should work.

131
00:05:31.070 --> 00:05:32.230
So that's my basic code.

132
00:05:32.230 --> 00:05:34.830
But we need a domain obviously we
need something in the database.

133
00:05:34.830 --> 00:05:37.110
So let's actually initialize
some schema here.

134
00:05:37.110 --> 00:05:42.282
So I'll create a little
file here called schema SQL

135
00:05:42.282 --> 00:05:50.870
create table if not exists customer Idaho
serial primary key name text not null.

136
00:05:50.870 --> 00:05:52.950
And I'll create some sample data as well.

137
00:05:52.950 --> 00:05:59.750
So I'll say data SQL insert
into customer name values.

138
00:05:59.750 --> 00:06:00.790
My name is Josh.

139
00:06:00.790 --> 00:06:02.710
Let's go around the room and
get some other names here.

140
00:06:02.710 --> 00:06:03.670
What's your name, friend?

141
00:06:03.670 --> 00:06:04.545
If you want.

142
00:06:04.545 --> 00:06:06.025
&gt;&gt; Tom: Tom.
&gt;&gt; Josh Long: Tom, okay.

143
00:06:06.025 --> 00:06:08.150
You can give me fake names, by the way.

144
00:06:08.150 --> 00:06:09.350
There's no requirement here.

145
00:06:09.350 --> 00:06:10.150
&gt;&gt; Ben: Ben.

146
00:06:10.150 --> 00:06:11.310
&gt;&gt; Josh Long: Ben,
nice to meet you all by the way.

147
00:06:11.310 --> 00:06:13.190
Tom and Ben.

148
00:06:13.190 --> 00:06:14.310
Just go for a few of them.

149
00:06:14.310 --> 00:06:14.830
Here we go.

150
00:06:14.830 --> 00:06:15.510
&gt;&gt; Luke: Luke.

151
00:06:15.510 --> 00:06:17.190
&gt;&gt; Josh Long: Hi, Luke.

152
00:06:17.190 --> 00:06:18.470
&gt;&gt; Sam: Sam.

153
00:06:18.470 --> 00:06:20.194
&gt;&gt; Josh Long: Okay, people in the room.

154
00:06:20.194 --> 00:06:21.510
Okay, so that's some sample data.

155
00:06:21.510 --> 00:06:25.005
I'm going to drop the table if
it exists before I recreate it,

156
00:06:25.005 --> 00:06:26.710
because it's going to get.

157
00:06:26.710 --> 00:06:28.550
We'll restart all the time.

158
00:06:28.550 --> 00:06:30.550
So if table exists customer.

159
00:06:30.550 --> 00:06:33.350
And then we're going to tell spring
boot to connect to that data source.

160
00:06:33.350 --> 00:06:38.873
So spring data Source
data source URL JDBC,

161
00:06:38.873 --> 00:06:44.111
PostgreSQL, Localhost, MyDatabase.

162
00:06:44.111 --> 00:06:49.920
Yeah, and then we'll say username,
my user and then password.

163
00:06:49.920 --> 00:06:52.480
And again we specified this
in the docker compose file.

164
00:06:52.480 --> 00:06:55.400
You can see it says database Secret,
MyUser, etc.

165
00:06:55.400 --> 00:06:56.040
So secret.

166
00:06:56.040 --> 00:06:56.960
Don't tell anybody.

167
00:06:56.960 --> 00:06:57.920
That's our little secret.

168
00:06:57.920 --> 00:07:01.172
I'm going to tell spring boot also to
initialize the database with the schema

169
00:07:01.172 --> 00:07:02.434
files that we've put there.

170
00:07:02.434 --> 00:07:03.415
And I think that's it.

171
00:07:03.415 --> 00:07:05.679
Let's go ahead and
spin that up and see what we get.

172
00:07:05.679 --> 00:07:09.788
So we'll go over to the browser
localhost 8080 customers and

173
00:07:09.788 --> 00:07:13.160
there's our HTTP endpoint
with some customer data.

174
00:07:13.160 --> 00:07:14.053
Fine, okay.

175
00:07:14.053 --> 00:07:17.454
Now of course I've got the application
up and running over here and

176
00:07:17.454 --> 00:07:19.894
I've got dev tools working
in the background.

177
00:07:19.894 --> 00:07:21.722
So let's just create a simple hello world.

178
00:07:21.722 --> 00:07:23.498
I suppose I should have done that first,
right?

179
00:07:23.498 --> 00:07:26.164
So I can go over here,

180
00:07:26.164 --> 00:07:31.211
I'll add hello world, map of message.

181
00:07:31.211 --> 00:07:33.050
Hello world.

182
00:07:33.050 --> 00:07:36.890
Go over here and I go to hello and
there's that endpoint.

183
00:07:36.890 --> 00:07:38.850
The codes in the repo, it's called intro.

184
00:07:38.850 --> 00:07:42.163
It's the first folder called there and
I've got a readme in the base

185
00:07:42.163 --> 00:07:44.790
of the repository called readme and
you can see that.

186
00:07:44.790 --> 00:07:48.386
But I wanted to do just let me just
spin through this here quickly and so

187
00:07:48.386 --> 00:07:52.240
you can kind of see what we're going for
and then we'll slowly unwind it.

188
00:07:52.240 --> 00:07:54.890
Okay, so okay, so we've got the
application, we're able to move quickly.

189
00:07:54.890 --> 00:07:56.370
I'm able to add HTTP endpoints here.

190
00:07:56.370 --> 00:07:59.219
I think it's now time to by the way,
also observability.

191
00:07:59.219 --> 00:08:00.470
Right, we've got to actuator.

192
00:08:00.470 --> 00:08:03.390
You've got these endpoints that show you
the health status of the application.

193
00:08:03.390 --> 00:08:04.230
This kind of stuff.

194
00:08:04.230 --> 00:08:07.070
You can easily imagine deploying
this to a production environment and

195
00:08:07.070 --> 00:08:10.190
it would play well with your
load balancers and the like.

196
00:08:10.190 --> 00:08:14.110
But now I want to actually make this a
production worthy application by default.

197
00:08:14.110 --> 00:08:18.923
In spring boot,
if you compile a spring boot application,

198
00:08:18.923 --> 00:08:24.232
you say maven clean package and
then compile and run that, okay.

199
00:08:24.232 --> 00:08:24.990
CD target.

200
00:08:24.990 --> 00:08:26.470
By default you get a jar, right?

201
00:08:26.470 --> 00:08:28.470
This is a jar right here and
you can run the jar.

202
00:08:28.470 --> 00:08:30.030
Let me stop the running process here.

203
00:08:31.620 --> 00:08:32.900
Stop that.

204
00:08:32.900 --> 00:08:36.500
You can run the jar over here by
saying Java minus jar service jar.

205
00:08:36.500 --> 00:08:41.380
The problem with that is that this
requires you to have a JRE on your host.

206
00:08:41.380 --> 00:08:45.168
You need to have the Java runtime
installed for this to work.

207
00:08:45.168 --> 00:08:48.835
So what we'll talk about today,
a lot is graalvm.

208
00:08:48.835 --> 00:08:50.260
So here's what that's going to look like.

209
00:08:50.260 --> 00:08:52.980
I'm going to compile
this into a native image.

210
00:08:54.180 --> 00:08:55.100
We're going to compile this.

211
00:08:55.100 --> 00:08:57.380
This will take, I don't know, 30 seconds.

212
00:08:57.380 --> 00:08:59.062
Did I not choose Graal?

213
00:08:59.062 --> 00:09:00.281
What did I do?

214
00:09:00.281 --> 00:09:02.849
D, there we go.

215
00:09:02.849 --> 00:09:04.474
It's going to turn it into
a graalvm native image.

216
00:09:04.474 --> 00:09:06.780
This is a JVM that we're
having on our local machine.

217
00:09:06.780 --> 00:09:10.627
And we're going to talk about how to get
your machine set up accordingly in just

218
00:09:10.627 --> 00:09:11.780
a bit here.

219
00:09:11.780 --> 00:09:16.215
But basically, when I install GraalVM for
Java 24, and this will take a little while

220
00:09:16.215 --> 00:09:20.260
to compile, this takes a fair bit
longer than any JRE compilation.

221
00:09:20.260 --> 00:09:24.859
Okay, like it could be 10, 20, 30 seconds,
I don't know, something like that,

222
00:09:24.859 --> 00:09:26.200
maybe as much as a minute.

223
00:09:28.360 --> 00:09:31.720
But the benefit of this is that it's
not going to require a Java runtime.

224
00:09:31.720 --> 00:09:34.877
It's going to have everything
it needs to run and

225
00:09:34.877 --> 00:09:37.960
execute efficiently on
an operating system.

226
00:09:37.960 --> 00:09:39.160
So target.

227
00:09:39.160 --> 00:09:39.760
Here we go.

228
00:09:39.760 --> 00:09:41.880
DU HS service.

229
00:09:41.880 --> 00:09:43.494
There you go, 90 megs.

230
00:09:43.494 --> 00:09:46.454
That includes the JRE,
that includes your binary, the web server,

231
00:09:46.454 --> 00:09:49.118
the ORM data access technology,
the postgres client, etc.

232
00:09:49.118 --> 00:09:51.802
And there's the program up and running.

233
00:09:51.802 --> 00:09:53.630
So that's been a speedrun.

234
00:09:53.630 --> 00:09:55.810
We've gone from zero to
hero in no time at all.

235
00:09:55.810 --> 00:09:57.770
I don't know how long that took,
but a matter of minutes.

236
00:09:57.770 --> 00:10:00.579
And that includes a walking tour
of everything as we went along.

237
00:10:00.579 --> 00:10:02.114
We didn't really get into the dips, but

238
00:10:02.114 --> 00:10:04.431
now you kind of understand
what we're looking for, right?

239
00:10:04.431 --> 00:10:06.603
My goal is to get us to the point
where by the end of this,

240
00:10:06.603 --> 00:10:08.037
you're all able to do that as well.

