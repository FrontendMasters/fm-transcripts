WEBVTT

1
00:00:00.244 --> 00:00:03.710
&gt;&gt; Kyle Simpson: All right, let's talk
about how we solve the final part of this

2
00:00:03.710 --> 00:00:05.550
exercise.

3
00:00:05.550 --> 00:00:09.300
I'm gonna rename that to sending so
that we're clear what we're doing,

4
00:00:09.300 --> 00:00:11.804
we're sending these requests.

5
00:00:11.804 --> 00:00:14.230
All right, so what we wanna do, I think,

6
00:00:14.230 --> 00:00:19.960
is set up an array of children that is
going to be filled by this for loop.

7
00:00:19.960 --> 00:00:25.098
So I'm gonna set (let i =0; i

8
00:00:25.098 --> 00:00:30.060
&lt; MAX_CHILDREN; i++).

9
00:00:30.060 --> 00:00:33.968
And inside of this loop,
what I'm going to do,

10
00:00:33.968 --> 00:00:38.965
is simply push the spawned
object directly into that array.

11
00:00:41.669 --> 00:00:45.762
&gt;&gt; Kyle Simpson: So basically I'm
gonna end up at the end of that for

12
00:00:45.762 --> 00:00:49.181
loop with five child processes spawned.

13
00:00:51.960 --> 00:00:57.250
Now after that,
I need to basically turn those five or

14
00:00:57.250 --> 00:01:02.940
however many child processes into
a list of promises that will resolve

15
00:01:02.940 --> 00:01:07.140
after those child processes finish,
whether they're successful or not.

16
00:01:07.140 --> 00:01:12.816
So, I'm gonna turn those children

17
00:01:12.816 --> 00:01:17.360
into an array of responses.

18
00:01:19.040 --> 00:01:23.291
I'm going to use .map for that.

19
00:01:28.148 --> 00:01:33.116
&gt;&gt; Kyle Simpson: So the child, each child
I'm gonna listen for the exit event,

20
00:01:33.116 --> 00:01:38.010
but remember I wanna turn these
child objects into promises.

21
00:01:38.010 --> 00:01:40.709
So I need to return a new promise.

22
00:01:54.578 --> 00:01:58.114
&gt;&gt; Kyle Simpson: And
I need to determine if code is equal to 0,

23
00:01:58.114 --> 00:02:03.080
then I'm gonna resolve
the promise with Boolean true.

24
00:02:03.080 --> 00:02:07.688
Otherwise, I'm gonna resolve
the promise with Boolean false.

25
00:02:07.688 --> 00:02:09.513
So that lets me know whether or

26
00:02:09.513 --> 00:02:14.050
not I'm gonna have eventually an array
of trues and falses, basically.

27
00:02:19.217 --> 00:02:22.641
&gt;&gt; Kyle Simpson: Now I need to wait for
all of those promises to resolve in

28
00:02:22.641 --> 00:02:26.110
whatever order they finish
in before moving on.

29
00:02:26.110 --> 00:02:33.380
So I'm gonna simply say,
Promise.all with those responses.

30
00:02:34.550 --> 00:02:39.840
So now resps is going to be an array
of trues and/or falses in it.

31
00:02:39.840 --> 00:02:43.130
And I need to figure out if
this array has all trues in it,

32
00:02:43.130 --> 00:02:46.390
then it was a success otherwise,
it was a failure.

33
00:02:46.390 --> 00:02:53.017
And there's a little trick which is,
if I filter the resps

34
00:02:53.017 --> 00:02:58.860
array with a function that filters out
Booleans, like the Boolean function.

35
00:03:01.960 --> 00:03:06.130
If the length of that array is equal to
MAX_CHILDREN, then all of them are true.

36
00:03:07.510 --> 00:03:09.733
Otherwise, if even one
of them was removed,

37
00:03:09.733 --> 00:03:11.730
then the length won't be equal to true.

38
00:03:35.676 --> 00:03:37.166
&gt;&gt; Kyle Simpson: I didn't uncomment it.

39
00:03:37.166 --> 00:03:38.219
Okay, there we go.

40
00:03:44.846 --> 00:03:45.986
&gt;&gt; Kyle Simpson: All right, so

41
00:03:45.986 --> 00:03:50.960
we are now hammering our server
with these child requests.

42
00:03:50.960 --> 00:03:54.960
Seems to be handling five
concurrent requests pretty well.

43
00:03:54.960 --> 00:03:56.805
I say we amped the number of,
what do you think?

44
00:03:56.805 --> 00:04:01.360
&gt;&gt; Class: [INAUDIBLE]
&gt;&gt; Kyle Simpson: Let's go in increments.

45
00:04:01.360 --> 00:04:05.580
We'll see, I don't want us
literally set my computer on fire.

46
00:04:05.580 --> 00:04:08.027
Let's try 100.
If it handled five well,

47
00:04:08.027 --> 00:04:13.600
it's gonna take longer, but
let's see how it does with 100.

48
00:04:15.080 --> 00:04:18.262
&gt;&gt; Kyle Simpson: Taking
a little bit longer.

49
00:04:19.420 --> 00:04:23.460
Remember, these server
responses are waiting a second.

50
00:04:23.460 --> 00:04:25.052
There's an artificial delay in there so.

51
00:04:31.790 --> 00:04:34.070
&gt;&gt; Kyle Simpson: It seems to be
doing all right with 100 request.

52
00:04:34.070 --> 00:04:37.550
It's going a little slower.

53
00:04:37.550 --> 00:04:41.080
So, maybe we should up it to like 250.

54
00:04:41.080 --> 00:04:42.930
See what that does.

55
00:04:42.930 --> 00:04:43.790
Certainly gonna take longer.

56
00:04:49.388 --> 00:04:53.016
&gt;&gt; Kyle Simpson: Remember,
this is 250 child processes being spun up,

57
00:04:53.016 --> 00:04:56.980
all hammering the server and
then all being shut down.

58
00:04:56.980 --> 00:05:00.695
And then 250 more spun up, hammering
the server and then being shut down.

59
00:05:00.695 --> 00:05:05.020
So it's definitely taking
a little bit longer this time but

60
00:05:05.020 --> 00:05:07.190
doing okay, no error so far.

61
00:05:10.133 --> 00:05:13.860
&gt;&gt; Kyle Simpson: Let's try 500.

62
00:05:30.464 --> 00:05:31.680
&gt;&gt; Student: I think I
just heard the machine.

63
00:05:31.680 --> 00:05:33.192
&gt;&gt; Kyle Simpson: I think I
just heard my fan spin on.

64
00:05:33.192 --> 00:05:36.732
[LAUGH] I think we definitely
crossed the limit where it's like,

65
00:05:36.732 --> 00:05:39.492
I gotta turn the fan on to
start cooling this down.

66
00:05:39.492 --> 00:05:47.010
It's taking a while, but it hasn't failed,
so maybe that's a good sign.

67
00:05:47.010 --> 00:05:49.090
We were able to do 500.

68
00:05:49.090 --> 00:05:55.733
All right, let's try 1,500, as was
suggested by our good friend [LAUGH].

69
00:05:55.733 --> 00:05:56.364
&gt;&gt; Student: Sparks will fly.

70
00:05:56.364 --> 00:06:01.560
&gt;&gt; Kyle Simpson: Sparks may fly
&gt;&gt; Student2: Now,

71
00:06:01.560 --> 00:06:03.796
were you to decrease the delay timeout,

72
00:06:03.796 --> 00:06:07.873
would that in fact make it more difficult
for the server because it would be

73
00:06:07.873 --> 00:06:10.526
getting a little more frequently or-
&gt;&gt; Kyle Simpson: Probably more

74
00:06:10.526 --> 00:06:11.317
frequently, yeah.

75
00:06:11.317 --> 00:06:11.930
&gt;&gt; Student2: Okay.

76
00:06:11.930 --> 00:06:14.600
&gt;&gt; Kyle Simpson: Cuz it's got some down
time in here where it's able to recover.

77
00:06:14.600 --> 00:06:15.990
&gt;&gt; Student2: I'm not suggesting that.

78
00:06:15.990 --> 00:06:16.870
&gt;&gt; Kyle Simpson: I'm
surprised it hasn't died yet.

79
00:06:16.870 --> 00:06:19.770
I thought it might have died by now but
we'll see.

80
00:06:19.770 --> 00:06:24.355
We'll see if it's able to manage 1500
child processes at the same time.

81
00:06:33.100 --> 00:06:33.836
&gt;&gt; Kyle Simpson: The suspense
is killing me.

82
00:06:37.786 --> 00:06:39.625
&gt;&gt; Student3: Says I see smoke.

83
00:06:39.625 --> 00:06:45.890
&gt;&gt; Class: [LAUGH]
&gt;&gt; Kyle Simpson: I definitely hear fans.

84
00:06:45.890 --> 00:06:47.200
&gt;&gt; Student3: Maybe that
camera can pick up smoke.

85
00:06:47.200 --> 00:06:51.730
&gt;&gt; Kyle Simpson: [LAUGH] There we go,
it finally died.

86
00:06:51.730 --> 00:06:54.850
I wonder how many it was able to do,
that was quite a few.

87
00:06:54.850 --> 00:06:55.720
Probably got almost over 1000.

88
00:06:55.720 --> 00:07:01.411
All right, so my little old machine is
unable to handle that many requests, but.

