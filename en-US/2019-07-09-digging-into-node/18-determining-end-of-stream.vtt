WEBVTT

1
00:00:00.220 --> 00:00:03.240
&gt;&gt; Kyle Simpson: Okay,
we're gonna move on to exercise three.

2
00:00:03.240 --> 00:00:06.010
We're gonna do the same thing as before,
which is we're gonna,

3
00:00:06.010 --> 00:00:10.824
from the command line,
copy ex2.js into ex3.js.

4
00:00:10.824 --> 00:00:13.640
That will maintain our executable bit.

5
00:00:14.950 --> 00:00:20.050
And then we'll open up ex3.js
in the exercises folder.

6
00:00:21.070 --> 00:00:24.311
Before I forget like I did before,
I'm gonna go ahead and update my help so

7
00:00:24.311 --> 00:00:27.472
that we know that we're talking
about ex3 so I don't confuse myself.

8
00:00:30.716 --> 00:00:34.856
&gt;&gt; Kyle Simpson: And we're gonna
start talking about some other issues

9
00:00:34.856 --> 00:00:39.640
related to this streaming that
may not have been that obvious.

10
00:00:39.640 --> 00:00:43.670
One of the nice parts about working with
a stream is that we're basically saying,

11
00:00:43.670 --> 00:00:46.550
listen, do whatever you need to do,
take however long you need to take,

12
00:00:46.550 --> 00:00:48.030
just do all those chunks.

13
00:00:48.030 --> 00:00:51.660
We sorta fire those off and
then we're finished.

14
00:00:51.660 --> 00:00:56.280
So for example,
if I were to insert a console.log

15
00:00:56.280 --> 00:01:00.680
statement after this
processFile statement.

16
00:01:00.680 --> 00:01:05.602
If I said console.log("Complete":).

17
00:01:08.418 --> 00:01:12.210
&gt;&gt; Kyle Simpson: If we
were to run that with say

18
00:01:12.210 --> 00:01:17.044
the,
&gt;&gt; Kyle Simpson: Make sure

19
00:01:17.044 --> 00:01:18.868
to update ex3.js.

20
00:01:18.868 --> 00:01:25.370
Let's say, file=files/hello.txt.

21
00:01:25.370 --> 00:01:29.260
If we were to update,if
we were to run this, and

22
00:01:29.260 --> 00:01:34.330
we'll say, --out, so
we're trying to print stuff out.

23
00:01:34.330 --> 00:01:38.480
You'll notice what happens is that the
complete message happens before we've done

24
00:01:38.480 --> 00:01:43.500
our stream processing, even though the
console message came after process file.

25
00:01:43.500 --> 00:01:48.020
It's because inherently all of
the stream operations are asynchronous.

26
00:01:48.020 --> 00:01:52.861
So how could we wait until all
the stream operations were complete

27
00:01:52.861 --> 00:01:57.272
before doing something like
printing a complete message?

28
00:02:00.067 --> 00:02:04.348
&gt;&gt; Kyle Simpson: Well what we're gonna
need to do is treat process file as

29
00:02:04.348 --> 00:02:09.189
a function that can signal to us
when it has completed its work.

30
00:02:09.189 --> 00:02:15.220
One way of thinking about doing that
is making it to be an async function.,

31
00:02:15.220 --> 00:02:21.184
so it's gonna give us a promise back,
and we can listen for that promise.

32
00:02:25.187 --> 00:02:27.528
&gt;&gt; Kyle Simpson: And then print
the complete message when the promise

33
00:02:27.528 --> 00:02:28.065
finishes.

34
00:02:34.974 --> 00:02:40.374
&gt;&gt; Kyle Simpson: Just so I catch, don't
forget, cuz I often forget to put a .catch

35
00:02:40.374 --> 00:02:46.200
on here so that we can see any
errors that we make in our coding.

36
00:02:46.200 --> 00:02:47.399
Don't forget to do that.

37
00:02:53.584 --> 00:02:58.012
&gt;&gt; Kyle Simpson: Okay, so
how do we make process file wait for

38
00:02:58.012 --> 00:03:02.808
the completion of all of
this streaming stuff?

39
00:03:02.808 --> 00:03:06.085
Well we don't need to hook
into all of these things, but

40
00:03:06.085 --> 00:03:10.081
we need to hook into the very final
stream that is the output stream.

41
00:03:10.081 --> 00:03:14.268
Just before it starts to go to the target
stream, we need to hook into that stream

42
00:03:14.268 --> 00:03:18.140
and we need to know when that
stream finishes, when it closes.

43
00:03:18.140 --> 00:03:20.330
So what I'm gonna do is make
myself a little bit of a helper.

44
00:03:20.330 --> 00:03:26.702
I'm gonna come up here and define a
helper, I'm gonna call it streamComplete.

45
00:03:29.222 --> 00:03:32.425
&gt;&gt; Kyle Simpson: It's gonna take a stream,
and we want to listen for

46
00:03:32.425 --> 00:03:36.596
some stuff on the stream to let us
know when the stream is finished,

47
00:03:36.596 --> 00:03:39.145
and we're gonna return back a promise.

48
00:03:52.797 --> 00:03:56.013
&gt;&gt; Kyle Simpson: The reason I didn't make
stream completely an sync function is

49
00:03:56.013 --> 00:04:00.610
because I need actual control over when
the promise is gonna get resolved.

50
00:04:00.610 --> 00:04:03.040
So I need to actually make a promise here.

51
00:04:03.040 --> 00:04:08.130
Now how am I gonna detect when the stream
that I'm monitoring has finished?

52
00:04:08.130 --> 00:04:12.220
Well they are going to emit
certain different kinds of events.

53
00:04:12.220 --> 00:04:17.180
So under the covers the .pipe utility
is automatically listening for

54
00:04:17.180 --> 00:04:20.160
these various events,
like the data event and so forth.

55
00:04:20.160 --> 00:04:24.640
But there's an end event that is
fired whenever a stream finishes.

56
00:04:24.640 --> 00:04:28.710
So if we were to listen for that event,
then we would know that it had been

57
00:04:28.710 --> 00:04:33.050
finished and that would allow us to know
that we were done with the process files.

58
00:04:33.050 --> 00:04:38.707
So if we said stream.on ("end") event,

59
00:04:44.119 --> 00:04:46.642
&gt;&gt; Kyle Simpson: Then we could call c to

60
00:04:46.642 --> 00:04:52.534
signal that the stream had
reached Its end event.

61
00:05:00.396 --> 00:05:03.731
&gt;&gt; Kyle Simpson: And since I don't need
to do anything else in, I'm sorry, not c,

62
00:05:03.731 --> 00:05:04.635
it's res.

63
00:05:04.635 --> 00:05:08.268
Since I don't need to do anything
else inside of that function,

64
00:05:08.268 --> 00:05:09.763
I'm just gonna pass res.

65
00:05:13.677 --> 00:05:15.050
&gt;&gt; Kyle Simpson: So
how are we gonna use that?

66
00:05:15.050 --> 00:05:17.110
Well down in process file,

67
00:05:17.110 --> 00:05:21.610
remember the thing that we want
to monitor is the output stream.

68
00:05:21.610 --> 00:05:25.860
We wanna monitor when the output stream
fires its end event, that means it has

69
00:05:25.860 --> 00:05:31.400
completely flushed itself to the target
stream, and that means that we are done.

70
00:05:31.400 --> 00:05:39.649
So we're gonna basically say,
&gt;&gt; Kyle Simpson: Set up the piping here.

71
00:05:39.649 --> 00:05:44.689
And then what we basically wanna
do is await the promise completion

72
00:05:44.689 --> 00:05:50.084
of stream complete,
&gt;&gt; Kyle Simpson: With output stream.

73
00:05:56.966 --> 00:06:01.589
&gt;&gt; Kyle Simpson: That should now cause it
to wait the extra couple of milliseconds

74
00:06:01.589 --> 00:06:06.590
so that hello world prints
before the complete message.

75
00:06:06.590 --> 00:06:10.966
And if we use the larger file,
like lorem.txt,

76
00:06:10.966 --> 00:06:16.425
it waits all the way to the end
before printing the complete.

77
00:06:22.229 --> 00:06:25.299
&gt;&gt; Kyle Simpson: Now it's true
that we are able to listen for

78
00:06:25.299 --> 00:06:28.380
the completion of the stream operations.

79
00:06:28.380 --> 00:06:32.140
It's a little bit manual, but we're at
least able to hook into an event and

80
00:06:32.140 --> 00:06:34.650
be notified that something has finished.

81
00:06:34.650 --> 00:06:36.950
But there is a downside here,

82
00:06:36.950 --> 00:06:41.250
and it's especially acute if we start
thinking about building programs

83
00:06:41.250 --> 00:06:45.300
that might be doing really,
really large data set processing.

84
00:06:45.300 --> 00:06:48.210
Because it might be the case
that we write this program, and

85
00:06:48.210 --> 00:06:51.690
then we run it against a file
that's local and it's always there.

86
00:06:51.690 --> 00:06:55.980
But what if this was running against
a really large file that was on a network

87
00:06:55.980 --> 00:07:00.930
mount that had sort of a spotty connection
to the network mountor something, and

88
00:07:00.930 --> 00:07:02.570
things were delayed?

89
00:07:02.570 --> 00:07:07.210
We might want to essentially say, there's
a certain maximum amount of time that

90
00:07:07.210 --> 00:07:11.330
I want to allow this to
go before I give up.

91
00:07:11.330 --> 00:07:15.940
I maybe don't want for my automation
server to just sit there and spin for

92
00:07:15.940 --> 00:07:17.530
hours and hours and hours.

93
00:07:17.530 --> 00:07:21.490
It's not able to process the file within
five minutes, for example, then it should

94
00:07:21.490 --> 00:07:26.090
probably give up and let somebody know
that something's down or whatever.

