WEBVTT

1
00:00:00.000 --> 00:00:01.732
&gt;&gt; Kyle Simpson: All right,
let's go ahead and

2
00:00:01.732 --> 00:00:04.070
turn our attention now to exercise five.

3
00:00:04.070 --> 00:00:10.614
Again there's a new file provided for you,
ex5.js, so go ahead and open that one up.

4
00:00:10.614 --> 00:00:14.017
And you'll see that we've got
a few different things going on,

5
00:00:14.017 --> 00:00:15.980
we are still gonna work with sqlite.

6
00:00:15.980 --> 00:00:19.654
But now we're gonna working with http,

7
00:00:19.654 --> 00:00:24.201
so we're gonna be building
our first web server.

8
00:00:24.201 --> 00:00:28.731
And our web server is going
to have an API endpoint that

9
00:00:28.731 --> 00:00:33.270
serves up the records from
our database to a web page.

10
00:00:33.270 --> 00:00:36.648
That's what we're gonna to be
building here in exercise five.

11
00:00:36.648 --> 00:00:41.597
First things first,
we need to pull in the http Module that

12
00:00:41.597 --> 00:00:46.445
handles all of the gory details
of doing http response and

13
00:00:46.445 --> 00:00:50.695
request and
response handling in our web server.

14
00:00:50.695 --> 00:00:55.505
And then we're also going to use this
package that I've downloaded for

15
00:00:55.505 --> 00:00:57.599
you called node static alias.

16
00:00:57.599 --> 00:01:02.136
That's a wrapper around a more commonly
known package called nodes static,

17
00:01:02.136 --> 00:01:05.575
which is one of the more common
of the static file servers.

18
00:01:05.575 --> 00:01:09.853
Specifically, that one handles
all of the mime type handling and

19
00:01:09.853 --> 00:01:15.220
content link calculation, all that other
junk that we don't wanna do, whenever

20
00:01:15.220 --> 00:01:20.152
we serve up JavaScript and CSS and
images and all those other kind of files.

21
00:01:20.152 --> 00:01:23.095
Static file servers are what do that for
us, and

22
00:01:23.095 --> 00:01:28.395
node static is probably one of the most
well known of those, node-static-alias has

23
00:01:28.395 --> 00:01:33.489
a wrapper around it that gives us a little
bit more declarative alias URL routing.

24
00:01:33.489 --> 00:01:36.498
So we're gonna use "node-static-alias" for
them, but

25
00:01:36.498 --> 00:01:39.394
we'll come back to
the node-static-alias in a moment.

26
00:01:39.394 --> 00:01:43.567
Let's instantiate our server,

27
00:01:43.567 --> 00:01:48.484
so line 45 is how we make a new server,

28
00:01:48.484 --> 00:01:54.444
we use the http module and
we say create server,

29
00:01:54.444 --> 00:01:57.739
and then handle request.

30
00:01:57.739 --> 00:02:00.687
And we haven't defined the handle
request function yet, but

31
00:02:00.687 --> 00:02:02.285
we're going to in just a moment.

32
00:02:02.285 --> 00:02:06.799
Before we do that I've just wanna point
out that I have set up a variable called

33
00:02:06.799 --> 00:02:08.615
HTTP Port with port 8039.

34
00:02:08.615 --> 00:02:11.998
That's the one we are gonna use for
the purposes of this discussion.

35
00:02:11.998 --> 00:02:15.682
If you wanna change that port to different
port cuz you don't like the number 8039

36
00:02:15.682 --> 00:02:16.361
that's fine.

37
00:02:16.361 --> 00:02:21.849
Just make sure in all the rest of our
exercises you keep updating that,

38
00:02:21.849 --> 00:02:24.555
cuz we'll be assuming 8039.

39
00:02:24.555 --> 00:02:29.665
Okay, so
we need to actually listen on that port,

40
00:02:29.665 --> 00:02:33.923
and the way we do that
is to call httpserv,

41
00:02:33.923 --> 00:02:39.156
that's the server instance
that we just created,

42
00:02:39.156 --> 00:02:45.625
call httpserv.listen and
we're gonna use (HTTP_PORT).

43
00:02:45.625 --> 00:02:50.194
And for
good measure we'll just go ahead and

44
00:02:50.194 --> 00:02:54.650
uncomment that console.log statement.

45
00:02:59.011 --> 00:03:03.384
&gt;&gt; Kyle Simpson: Now we need to define
that handle request function that we've

46
00:03:03.384 --> 00:03:04.822
referenced above.

47
00:03:04.822 --> 00:03:08.313
So function handleRequest takes a req and
a res,

48
00:03:08.313 --> 00:03:12.070
that is the request stream and
the response stream.

49
00:03:12.070 --> 00:03:14.948
Remember, we talked about
streams earlier in the course.

50
00:03:14.948 --> 00:03:19.826
These are streams, they're specifically
HTTP streams, but they are streams.

51
00:03:19.826 --> 00:03:24.632
They have all the same read and write
semantics that we've talked about, so

52
00:03:24.632 --> 00:03:29.290
you theoretical could be piping a request
stream into a response stream or

53
00:03:29.290 --> 00:03:30.959
things like that, okay?

54
00:03:30.959 --> 00:03:35.771
I'm gonna go ahead and make this an async
function, because we eventually are gonna

55
00:03:35.771 --> 00:03:40.201
be doing some asynchronous operations
as we, handle our incoming request.

56
00:03:40.201 --> 00:03:45.500
But for now, we wanna just kinda
do the hello world of HTTP server,

57
00:03:45.500 --> 00:03:48.719
which is that on each incoming request,

58
00:03:48.719 --> 00:03:54.132
we just wanna respond on the response
stream with some text, okay?

59
00:03:54.132 --> 00:03:58.213
So basic way for
us to do that is we're gonna call res,

60
00:03:58.213 --> 00:04:00.584
which is our response string.

61
00:04:00.584 --> 00:04:05.182
It has a method on it since it's an HTTP
string that has a special method called

62
00:04:05.182 --> 00:04:09.592
writeHead which is gonna write out all
the headers for our HTTP response.

63
00:04:09.592 --> 00:04:13.169
We're gonna give it 200 because
this is gonna be a success.

64
00:04:13.169 --> 00:04:21.577
And for now let's just send
a Content-Type of text/plain.

65
00:04:26.660 --> 00:04:31.340
&gt;&gt; Kyle Simpson: And then we need to
write some content to this stream,

66
00:04:31.340 --> 00:04:34.469
so I'm just gonna say Hello world.

67
00:04:34.469 --> 00:04:38.888
And then we have to make
sure to end this stream so

68
00:04:38.888 --> 00:04:43.426
that everything is flushed so
we call res.end.

69
00:04:43.426 --> 00:04:46.704
But for our purposes,
since we're only sending one string,

70
00:04:46.704 --> 00:04:49.237
you can actually pass
that string to res.end.

71
00:04:49.237 --> 00:04:54.782
So we really just need these two lines,
res.end, okay,

72
00:04:54.782 --> 00:04:59.658
so I'm gonna switch back
over to our command line.

73
00:04:59.658 --> 00:05:04.514
I'm gonna run node ex5.js and
you'll notice that instead of running and

74
00:05:04.514 --> 00:05:07.916
finishing, now it's just
sitting there waiting.

75
00:05:07.916 --> 00:05:12.486
It's because it's going to run
essentially forever until we stop it,

76
00:05:12.486 --> 00:05:16.993
the way you stop it is with the Ctrl+C,
so if I say Ctrl+C it stops it.

77
00:05:16.993 --> 00:05:24.137
We're going to run our server, and then
I'm going to switch over to a browser.

78
00:05:24.137 --> 00:05:30.825
Let's come here, and
let's say http local host for

79
00:05:30.825 --> 00:05:36.762
at 8039 and there you see our Hello world.

80
00:05:44.611 --> 00:05:46.734
&gt;&gt; Kyle Simpson: And
if we look at the local host,

81
00:05:46.734 --> 00:05:51.928
specifically in our Network tab over here,
you'll notice that the headers,

82
00:05:51.928 --> 00:05:56.808
when we look at the headers they came
back, the Response Headers included

83
00:05:56.808 --> 00:06:03.072
are text plain content type
&gt;&gt; Kyle Simpson: In

84
00:06:03.072 --> 00:06:06.774
fact we could send any custom headers
that we wanted to if we really felt

85
00:06:06.774 --> 00:06:15.564
like
&gt;&gt; Kyle Simpson: Okay,

86
00:06:15.564 --> 00:06:19.412
writing out text like that is
not particularly interesting.

87
00:06:19.412 --> 00:06:22.234
We're probably immediately gonna think,

88
00:06:22.234 --> 00:06:24.987
well how do I send out
like whole websites.

89
00:06:24.987 --> 00:06:26.285
If I can serve up some text,

90
00:06:26.285 --> 00:06:29.396
I'm gonna probably wanna start
searching serving up a website.

91
00:06:29.396 --> 00:06:32.112
So before we,
actually before we get there,

92
00:06:32.112 --> 00:06:34.620
I just want to point out one little thing.

93
00:06:34.620 --> 00:06:39.410
All of the big, major frameworks
that are out there, like Express.js,

94
00:06:39.410 --> 00:06:43.505
and Sales, and all those others
that are node frameworks, and

95
00:06:43.505 --> 00:06:48.236
node router frameworks, there are dozens
and dozens of them out there.

96
00:06:48.236 --> 00:06:51.548
Really they boil down to
a series of if statements,

97
00:06:51.548 --> 00:06:56.411
they have very fancy APIs, lots of
complexity, lots of sophistication.

98
00:06:56.411 --> 00:07:00.460
But what they really boil down to in
all their routing goodness and magic,

99
00:07:00.460 --> 00:07:03.085
they really boil down to
a set of if statements.

100
00:07:03.085 --> 00:07:07.478
So if we wanted to do our own custom
routing, and I literally do this in my

101
00:07:07.478 --> 00:07:12.474
production sites, because why put extra
abstraction when it's unnecessary?

102
00:07:12.474 --> 00:07:20.916
We can literally just do an if
statement like if req.url equals hello,

103
00:07:20.916 --> 00:07:26.264
then we're gonna respond with hello world,

104
00:07:26.264 --> 00:07:30.204
and otherwise, we're gonna say

105
00:07:30.204 --> 00:07:35.706
res.writehead(404), and res.end.

106
00:07:35.706 --> 00:07:41.173
So we're gonna send a 404 and
if you don't go to /hello.

107
00:07:41.173 --> 00:07:46.533
So I'm gonna save my server,
I'm gonna start stop and

108
00:07:46.533 --> 00:07:53.416
restart it, I'm gonna refresh the browser,
and now we got a 404.

109
00:07:53.416 --> 00:07:58.020
Couldn't be found but
if we then add /hello,

110
00:07:58.020 --> 00:08:01.568
now suddenly we have our page back.

111
00:08:03.724 --> 00:08:07.915
&gt;&gt; Kyle Simpson: So it really doesn't get
any more complicated than a series of

112
00:08:07.915 --> 00:08:12.843
matching decisions that you could
model with a series of if statements.

113
00:08:12.843 --> 00:08:17.265
You might match on whether or
not the request method was a get or

114
00:08:17.265 --> 00:08:20.507
a post or
whether there's a certain header.

115
00:08:20.507 --> 00:08:23.529
Or whether there's certain
cookies involved or

116
00:08:23.529 --> 00:08:26.930
the URL matches some
particular regular expression.

117
00:08:26.930 --> 00:08:30.710
All of the fanciness of those
frameworks boils down to,

118
00:08:30.710 --> 00:08:34.650
can I do some matching and
decide where to dispatch this stuff?

119
00:08:34.650 --> 00:08:38.812
And I've written whole production websites
on node, using nothing other than just

120
00:08:38.812 --> 00:08:42.110
a series of if statements or
switch statements exactly like that.

121
00:08:43.440 --> 00:08:48.202
&gt;&gt; Student: Is the browser just throwing
that hello world into the body tag?

122
00:08:48.202 --> 00:08:51.489
&gt;&gt; Kyle Simpson: Yes, it is, because
we sent, actually not even a body tag,

123
00:08:51.489 --> 00:08:55.426
since we sent that text plain,
it's not interpreting it as HTML at all.

124
00:08:55.426 --> 00:08:57.131
If we sent that text HTML,

125
00:08:57.131 --> 00:09:01.322
then it would be assuming that we
have a body to put that stuff in.

126
00:09:01.322 --> 00:09:04.285
But this is literally
just plain text response.

