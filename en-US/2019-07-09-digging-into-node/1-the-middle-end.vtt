WEBVTT

1
00:00:00.280 --> 00:00:03.081
&gt;&gt; Kyle Simpson: I'm not suggesting that
what you do on the back-end is wrong.

2
00:00:03.081 --> 00:00:05.690
And I don't wanna suggest that what
we do on the front end is wrong.

3
00:00:05.690 --> 00:00:10.640
But they're very different worlds, and
they don't play very well together.

4
00:00:10.640 --> 00:00:14.772
And so we need some sort of buffer zone,
a demilitarized zone, if you will,

5
00:00:14.772 --> 00:00:16.143
a DMZ between these two.

6
00:00:16.143 --> 00:00:20.060
And I formulated these thoughts into
something that I called, the middle end.

7
00:00:20.060 --> 00:00:22.000
What sits between the front-end and
the back-end?

8
00:00:22.000 --> 00:00:23.530
It's the middle end.

9
00:00:23.530 --> 00:00:28.570
And essentially those are a collection of
behaviors that basically every web app,

10
00:00:28.570 --> 00:00:31.400
even web apps today, every web app does.

11
00:00:31.400 --> 00:00:34.100
Things like routing,
things like templating,

12
00:00:34.100 --> 00:00:38.370
things like data formatting and
data validation, things like bundling and

13
00:00:38.370 --> 00:00:41.300
packaging a resources,
responding to API request.

14
00:00:41.300 --> 00:00:44.936
These are things that every single
web application in existence do.

15
00:00:44.936 --> 00:00:49.479
And what they all share in common is
that they all bridge the gap between

16
00:00:49.479 --> 00:00:52.150
the browser and the server.

17
00:00:52.150 --> 00:00:55.890
As opposed to something like your database
rights, which is clearly back-end,

18
00:00:55.890 --> 00:01:01.850
it's clearly business logic, we have all
these pieces that touch the front-end.

19
00:01:01.850 --> 00:01:05.020
So I just started defining
these as middle-end.

20
00:01:05.020 --> 00:01:07.110
And as I started to think about
the middle-end, I say, well,

21
00:01:07.110 --> 00:01:10.370
if I wanna build a nice
clean middle-end and

22
00:01:10.370 --> 00:01:15.740
essentially turn the back-end of
any application into a black box

23
00:01:15.740 --> 00:01:21.930
API a state full API that I can send
at some JSON and get some JSON back.

24
00:01:21.930 --> 00:01:25.155
And I don't care what that back-end is,
it could be .NET today and

25
00:01:25.155 --> 00:01:28.453
it could be Python tomorrow but
there's an API that I send that data.

26
00:01:28.453 --> 00:01:32.657
And then I decide in the middle-end
how to make things ready and

27
00:01:32.657 --> 00:01:35.640
how to adapt things for the front end.

28
00:01:35.640 --> 00:01:39.780
And the middle end gets to design, I'm
talking to a mobile app, or I'm talking to

29
00:01:39.780 --> 00:01:43.866
a web browser, or I'm talking to a robot,
or a smart watch, or whatever.

30
00:01:43.866 --> 00:01:46.790
But the back-end doesn't have to concern
itself with any of those things.

31
00:01:46.790 --> 00:01:50.190
The back-end people don't
like the front-end anyway.

32
00:01:50.190 --> 00:01:52.510
So let's just tell them,
just delete all that code,

33
00:01:52.510 --> 00:01:54.800
just stop dealing with any of that stuff.

34
00:01:54.800 --> 00:01:55.840
Let the middle end handle it.

35
00:01:55.840 --> 00:02:00.330
These are the thoughts I had
in late 2008 and early 2009.

36
00:02:00.330 --> 00:02:06.287
And so I began surveying,
what could I do to write middle-end code,

37
00:02:06.287 --> 00:02:09.792
and write it in JAVA script, and run it.

38
00:02:09.792 --> 00:02:13.444
The same code in the browser and also
on the server, to handle these things,

39
00:02:13.444 --> 00:02:15.310
to talk to each other.

40
00:02:15.310 --> 00:02:18.260
At the time,
there were a couple of options for

41
00:02:18.260 --> 00:02:21.930
putting JavaScript on a server,
but none of them were suitable.

42
00:02:21.930 --> 00:02:26.950
One of them was Rhino,
which was Java's JavaScript engine.

43
00:02:26.950 --> 00:02:32.648
And I happen to be working at a PHP shop
at the time, and there was definitely

44
00:02:32.648 --> 00:02:37.893
no way that a PHP shop was gonna allow
me to install [LAUGH] a Java stack,

45
00:02:37.893 --> 00:02:43.256
just so I could run Rhino to run
JavaScript, that's a bridge too far.

46
00:02:43.256 --> 00:02:44.870
So I wasn't gonna be able to do that.

47
00:02:44.870 --> 00:02:49.500
And there were a couple of other options,
but they had similar problems.

48
00:02:49.500 --> 00:02:52.140
Actually, most of them
seemed to require Java.

49
00:02:52.140 --> 00:02:56.690
Because that was the way to do
platform independence at the time,

50
00:02:56.690 --> 00:02:59.170
it was to make it built on top of Java.

51
00:02:59.170 --> 00:03:03.420
And so essentially, after serving those
I realized, this isn't gonna work.

52
00:03:03.420 --> 00:03:04.940
None of these options are sufficient.

53
00:03:04.940 --> 00:03:08.410
And it was around that same period
of time, I think it had been 2008,

54
00:03:08.410 --> 00:03:10.790
if my history remembers.

55
00:03:10.790 --> 00:03:13.700
But it was around that same period of
time that Google had launched Chrome with

56
00:03:13.700 --> 00:03:15.460
their own JavaScript engine, V8.

57
00:03:16.570 --> 00:03:21.549
And I had remembered, just randomly
reading a blog post somewhere V8 was

58
00:03:21.549 --> 00:03:27.140
a C++ program that you could
literally write your own bindings to.

59
00:03:27.140 --> 00:03:29.800
And I hadn't done C++ in a decade.

60
00:03:29.800 --> 00:03:33.020
But I thought,
I could probably dust off some C++ skills.

61
00:03:33.020 --> 00:03:35.030
So I began to formulate this idea.

62
00:03:35.030 --> 00:03:38.740
What I wanna build is a server side
JavaScript environment that's totally

63
00:03:38.740 --> 00:03:40.650
not based on Java or something like that.

64
00:03:40.650 --> 00:03:42.330
It's gonna use the V8 engine.

65
00:03:42.330 --> 00:03:43.880
It's gonna run JavaScript on the server.

66
00:03:43.880 --> 00:03:47.650
And I'm gonna run these
middle-end tasks in this engine.

67
00:03:47.650 --> 00:03:51.830
So I set out to start building that,
I'd begin doing conference talks about it.

68
00:03:51.830 --> 00:03:56.180
And that project, nobody should use this
anymore it's completely deformed, but

69
00:03:56.180 --> 00:03:58.280
if you are curious it's
still in my GitHub.

70
00:03:58.280 --> 00:03:59.760
It's called bite chain.

71
00:03:59.760 --> 00:04:02.990
I wrote a server side JavaScript
environment, this is all pre node.

72
00:04:02.990 --> 00:04:06.058
I wrote a server side JavaScript
environment called bite chain.

73
00:04:06.058 --> 00:04:09.550
And I actually launched a number
of sites for employers and

74
00:04:09.550 --> 00:04:11.973
myself using this idea of middle-end,

75
00:04:11.973 --> 00:04:16.636
where it treated the back-end agnostically
as just an API that it talked to.

76
00:04:16.636 --> 00:04:20.950
And the middle-end handled all those
middle-end tasks, like formatting and

77
00:04:20.950 --> 00:04:23.400
presenting of materials,
templating, all that other stuff.

78
00:04:24.790 --> 00:04:29.100
Well, I'd been working on this for
probably a good six to eight months.

79
00:04:29.100 --> 00:04:32.133
So I was pretty deeply invested in it.

80
00:04:32.133 --> 00:04:34.170
A little beyond proof of concept.

81
00:04:34.170 --> 00:04:38.220
It's more like alpha to
beta stage at that point.

82
00:04:38.220 --> 00:04:42.750
I was using it in production at a couple
of the jobs that I had been at.

83
00:04:42.750 --> 00:04:47.350
And then I get to JS coffe and

84
00:04:47.350 --> 00:04:50.830
Ryan stands up and says, hey,
I've been building this thing for a while.

85
00:04:50.830 --> 00:04:52.830
It's amazing, It's called node.

86
00:04:52.830 --> 00:04:56.060
And we all lost our minds because we
all thought, wow, that's incredible,

87
00:04:56.060 --> 00:04:57.670
like what we're going to be able to do?

88
00:04:57.670 --> 00:05:00.190
Where we're going to be
able to put JavaScript?

89
00:05:00.190 --> 00:05:03.035
And I think a lot of people at
the time and maybe even still today,

90
00:05:03.035 --> 00:05:06.830
ten years later, the message they
took was, that's the answer for

91
00:05:06.830 --> 00:05:08.950
putting JavaScript on the server.

92
00:05:08.950 --> 00:05:12.470
But that's not really what
captured my attention.

93
00:05:12.470 --> 00:05:14.740
Captured my interest in node.

94
00:05:14.740 --> 00:05:17.070
In fact I was a little bit
of a slow adopter to it.

95
00:05:17.070 --> 00:05:19.442
I was excited about the fact
that it was going to exist.

96
00:05:19.442 --> 00:05:22.364
But I was pretty heavily invested
in bite chain at the time and

97
00:05:22.364 --> 00:05:24.036
they were very different models.

98
00:05:24.036 --> 00:05:28.800
Bite chain was a synchronous environment
and node was an asynchronous environment.

99
00:05:28.800 --> 00:05:33.660
I was building it so that you could
call it directly from a PHP script.

100
00:05:33.660 --> 00:05:35.890
And you can't really,
at least at the time,

101
00:05:35.890 --> 00:05:38.540
you can really do something
asynchronous from PHP like that.

102
00:05:38.540 --> 00:05:39.040
So

