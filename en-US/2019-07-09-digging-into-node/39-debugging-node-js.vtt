WEBVTT

1
00:00:00.240 --> 00:00:04.930
&gt;&gt; Kyle Simpson: I thought where we might
stop or finish or come to a conclusion for

2
00:00:04.930 --> 00:00:09.620
this workshop would be to kind of come
full circle back to the beginning.

3
00:00:09.620 --> 00:00:14.530
And I deliberately didn't start
the workshop by talking about this

4
00:00:14.530 --> 00:00:17.950
topic because I wanted us to have
had more experience with node.

5
00:00:17.950 --> 00:00:21.810
But as you write more and more node,
you're gonna more and more bugs, more and

6
00:00:21.810 --> 00:00:23.070
more problems.

7
00:00:23.070 --> 00:00:26.320
And you're gonna face
the challenges of trying to debug

8
00:00:26.320 --> 00:00:28.110
in a command line environment.

9
00:00:28.110 --> 00:00:32.400
And you'll quickly see that it
can get very difficult to debug.

10
00:00:32.400 --> 00:00:37.580
So I wanted to just end by showing you
a quick example of how you can use

11
00:00:37.580 --> 00:00:42.620
The Chrome DevTools debugging remotely for
your node process.

12
00:00:42.620 --> 00:00:47.350
So here, we have our EX7 process that we
were working on, in the previous exercise.

13
00:00:47.350 --> 00:00:53.310
And what I wanna do is basically insert
a little bit of a bug into this program.

14
00:00:53.310 --> 00:00:56.753
That's gonna create and exception and

15
00:00:56.753 --> 00:01:01.140
I'm gonna run it with the DevTools,
listening.

16
00:01:01.140 --> 00:01:06.832
And we'll see that when the exception is
thrown it actually pops up that exception

17
00:01:06.832 --> 00:01:12.840
over in the Chrome DevTools and pauses our
node process so that we can debug things.

18
00:01:12.840 --> 00:01:17.300
So that's an example of how you can
use more sophisticated debugging if

19
00:01:17.300 --> 00:01:21.620
you're a basic console log type of
debugging is not working for you.

20
00:01:21.620 --> 00:01:25.080
So just kind of trying to
come up with an example here.

21
00:01:25.080 --> 00:01:28.770
What I'm gonna do is basically
set up a counter here.

22
00:01:28.770 --> 00:01:33.506
So I'm gonna say var x = 0,
and each time we do this thing

23
00:01:33.506 --> 00:01:37.860
I'm gonna setup,
I'm gonna increment it by ++.

24
00:01:37.860 --> 00:01:41.602
And after I've spun up
these child processes,

25
00:01:41.602 --> 00:01:45.820
what I'm gonna do is,
right here, let me do it here.

26
00:01:50.580 --> 00:01:54.234
&gt;&gt; Kyle Simpson: What I'm gonna do is,
if x has gotten over a certain number,

27
00:01:54.234 --> 00:01:56.470
I'm just gonna throw an exception.

28
00:01:56.470 --> 00:01:59.850
And that way, just sort of artificially,
we can see that thing happening.

29
00:01:59.850 --> 00:02:05.190
So if x is greater than five, then

30
00:02:05.190 --> 00:02:10.040
let's call a function that doesn't exist
like food, which will throw an exception.

31
00:02:10.040 --> 00:02:12.810
We'll see that in our debugger, okay.

32
00:02:12.810 --> 00:02:15.540
So the way that you do this is twofold.

33
00:02:15.540 --> 00:02:19.950
First of all you need to open up,
and I'm using Chrome here.

34
00:02:19.950 --> 00:02:25.820
I've opened up, you do chrome://inspect,

35
00:02:25.820 --> 00:02:28.690
and it automatically appends
here to the devices.

36
00:02:28.690 --> 00:02:33.580
We don't see a remote target listed yet,
but it is trying to listen on local host

37
00:02:33.580 --> 00:02:39.060
for a sort of, by convention, a specific
port that it's going to listen for.

38
00:02:39.060 --> 00:02:43.670
By the way, this link here where it says
Open dedicated DevTools for Node, I don't

39
00:02:43.670 --> 00:02:47.260
know what that is and I've never been
able to get that to do anything useful.

40
00:02:47.260 --> 00:02:49.780
So maybe that's like an experiment
that they're thinking about.

41
00:02:49.780 --> 00:02:52.183
But we're not gonna use that one despite
the fact that that looks like what

42
00:02:52.183 --> 00:02:52.700
we're using.

43
00:02:52.700 --> 00:02:54.379
It's gonna pop up a link for

44
00:02:54.379 --> 00:02:58.040
us to inspect once we start our
process in a listening mode.

45
00:02:58.040 --> 00:03:00.550
So we'll come back to this
screen in just a moment.

46
00:03:01.750 --> 00:03:03.590
But I'm gonna go over here and

47
00:03:03.590 --> 00:03:08.200
I'm gonna start up that node,
and I'm gonna put --inspect.

48
00:03:08.200 --> 00:03:12.898
That flag on the node process is gonna
tell it to go ahead and expose itself,

49
00:03:12.898 --> 00:03:16.040
It's listening protocol
on that specific port.

50
00:03:16.040 --> 00:03:17.191
And then Chrome DevTool,

51
00:03:17.191 --> 00:03:20.360
since it's listening on that port's
immediately gonna pick up on it.

52
00:03:20.360 --> 00:03:22.548
And start being able to inspect that.

53
00:03:22.548 --> 00:03:26.672
So I'm gonna click this and
I'm gonna move over here and

54
00:03:26.672 --> 00:03:29.930
you'll notice that we now have an inspect.

55
00:03:29.930 --> 00:03:34.095
So we can now actually see in our Chrome
Devtools what is happening and boom,

56
00:03:34.095 --> 00:03:36.240
there was our reference.

57
00:03:36.240 --> 00:03:37.520
There was our FOO reference there.

58
00:03:37.520 --> 00:03:40.464
And we would have been able to,
for example, tell it,

59
00:03:40.464 --> 00:03:42.070
let's go back and tell it to.

60
00:03:46.490 --> 00:03:49.510
&gt;&gt; Kyle Simpson: I'm gonna close it and
restart.

61
00:03:49.510 --> 00:03:52.270
And then we'll tell it to
like pause on exception.

62
00:03:53.540 --> 00:03:58.670
Okay, hopefully 12 gives me a long enough
time to make all of the settings so

63
00:03:58.670 --> 00:04:01.460
that we can see this happened,
let's inspect.

64
00:04:01.460 --> 00:04:02.900
Let's go to the sources tab.

65
00:04:02.900 --> 00:04:04.850
I've got Paul's on exception.

66
00:04:04.850 --> 00:04:06.410
And I've got the checkmark.

67
00:04:06.410 --> 00:04:07.490
So now,

68
00:04:07.490 --> 00:04:12.412
we should see here in just a few moments,
it actually pause on our exception.

69
00:04:12.412 --> 00:04:20.040
[LAUGH]
&gt;&gt; Kyle Simpson: There we go.

70
00:04:20.040 --> 00:04:21.890
We have succeeded.

71
00:04:21.890 --> 00:04:26.880
We have an exception that it paused
on in the middle of our node program.

72
00:04:26.880 --> 00:04:31.208
And if we switch back over here you'll
notice that it is literally paused to

73
00:04:31.208 --> 00:04:32.040
the node process.

74
00:04:32.040 --> 00:04:33.950
It didn't like crash it or something.

75
00:04:33.950 --> 00:04:36.380
It's literally paused the node process.

76
00:04:36.380 --> 00:04:38.340
And we can do stepping through it.

77
00:04:38.340 --> 00:04:39.920
We can do watch expressions,

78
00:04:39.920 --> 00:04:42.980
all of the things that we
normally need to do in debugging.

79
00:04:42.980 --> 00:04:46.410
But now we're actually debugging
remotely a node process.

80
00:04:46.410 --> 00:04:48.260
So this is an incredibly powerful tool.

81
00:04:48.260 --> 00:04:51.680
I'll be honest with you that with the
extra hoops that you have to jump through,

82
00:04:51.680 --> 00:04:54.230
of like starting it and
then going and clicking to,

83
00:04:54.230 --> 00:04:56.990
because you can't really get
a dedicated window for it.

84
00:04:56.990 --> 00:05:01.850
Sometimes it can get a little
bit annoying to deal with.

85
00:05:01.850 --> 00:05:06.756
There is a program called NDB which
came out, which is basically a packaging

86
00:05:06.756 --> 00:05:11.680
of Chrome where when it opens,
it's just the developer tools from Chrome.

87
00:05:11.680 --> 00:05:15.470
And they kind of animate some of
this stuff a little bit better.

88
00:05:15.470 --> 00:05:18.390
I wasn't able to get that installed on
my system when I was preparing for this.

89
00:05:18.390 --> 00:05:23.255
But a lot of people swear by NDB is that
it might be a little bit more successful

90
00:05:23.255 --> 00:05:24.480
of a route for you.

91
00:05:24.480 --> 00:05:29.117
But the few times that I've really needed
to do some kind of deeper debugging or

92
00:05:29.117 --> 00:05:32.240
even memory profiling or
something like that.

93
00:05:32.240 --> 00:05:34.865
I've been able to use this
remote debugging from Chrome and

94
00:05:34.865 --> 00:05:36.080
it's worked pretty well.

95
00:05:40.360 --> 00:05:42.130
&gt;&gt; Kyle Simpson: Let's go ahead and
let it finish itself.

96
00:05:46.620 --> 00:05:50.974
&gt;&gt; Kyle Simpson: I guess it's gonna
run into an exception and finish, and

97
00:05:50.974 --> 00:05:53.250
then it crashed the process.

