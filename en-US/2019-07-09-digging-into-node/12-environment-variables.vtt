WEBVTT

1
00:00:00.020 --> 00:00:03.850
&gt;&gt; Kyle Simpson: Pulling in inputs from
standard end or from the parameters,

2
00:00:03.850 --> 00:00:04.740
that's pretty good.

3
00:00:04.740 --> 00:00:09.490
But we also can get inputs into
our program in one other way

4
00:00:09.490 --> 00:00:12.340
which is through the use
of environment variables.

5
00:00:12.340 --> 00:00:15.735
This is again one of those ones that may
change a little bit depending on if you're

6
00:00:15.735 --> 00:00:19.155
using a Linux or
Mac system versus a Windows system.

7
00:00:19.155 --> 00:00:23.475
But in Linux or Mac, if you want
to set an environment variable,

8
00:00:23.475 --> 00:00:26.295
it's kind of like setting
a global variable.

9
00:00:26.295 --> 00:00:29.795
It's a variable that would be
automatically available to a program.

10
00:00:29.795 --> 00:00:31.965
But if you wanna do it
on a per command basis,

11
00:00:31.965 --> 00:00:34.640
you basically just prefix something.

12
00:00:34.640 --> 00:00:38.451
So if i said HELLO=WORLD, and

13
00:00:38.451 --> 00:00:44.611
then I said ./ex1.js,
&gt;&gt; Kyle Simpson: That

14
00:00:44.611 --> 00:00:49.438
would set an environment variable for
my shell environment called

15
00:00:49.438 --> 00:00:54.030
HELLO with the value WORLD,
but only for this command.

16
00:00:54.030 --> 00:00:55.350
And then it goes away.

17
00:00:55.350 --> 00:00:57.088
So it's like creating an environment.

18
00:00:57.088 --> 00:01:00.815
Now these are typically used to
configure a development versus

19
00:01:00.815 --> 00:01:04.470
a production environment or
paths or things like that.

20
00:01:04.470 --> 00:01:08.500
But there's a lot of different ways
that you might wanna take a program and

21
00:01:08.500 --> 00:01:12.350
being able to configure it through
the usage of environment variables.

22
00:01:12.350 --> 00:01:16.250
So what we're gonna do if I run that,
nothing, it doesn't see that but

23
00:01:16.250 --> 00:01:20.860
we're gonna make our program be able
to see and use that information.

24
00:01:20.860 --> 00:01:26.314
So what I'm going to
do is I'll do it here.

25
00:01:29.128 --> 00:01:33.900
&gt;&gt; Kyle Simpson: I'm
gonna say if process.env.

26
00:01:33.900 --> 00:01:37.400
And then the properties
on this one will be

27
00:01:37.400 --> 00:01:40.930
the environment variables that have been
set including the one that we just set.

28
00:01:40.930 --> 00:01:46.280
So if there's a process.env.HELLO,
we wanna go ahead and print that out.

29
00:01:53.281 --> 00:01:55.140
&gt;&gt; Kyle Simpson: Let's
see what happens now.

30
00:01:56.210 --> 00:02:01.400
You'll notice that it did in fact find and
print out our environment variable there.

31
00:02:08.391 --> 00:02:11.353
&gt;&gt; Kyle Simpson: So we can use this for,
in this particular case,

32
00:02:11.353 --> 00:02:15.300
we're gonna use it for
configuring a base file path.

33
00:02:15.300 --> 00:02:20.149
Okay, so I'm gonna say

34
00:02:20.149 --> 00:02:24.758
that our BASE_PATH.

35
00:02:24.758 --> 00:02:29.538
And we want a default base path to
underscore underscore dirname unless this

36
00:02:29.538 --> 00:02:33.580
process environment has been set,
in which case we'll use it.

37
00:02:33.580 --> 00:02:41.154
So we're gonna say,
&gt;&gt; Kyle Simpson: We're

38
00:02:41.154 --> 00:02:45.730
gonna use path.resolve, and
we're gonna use either,

39
00:02:48.035 --> 00:02:51.716
&gt;&gt; Kyle Simpson: The process.env.BASE_PATH

40
00:02:51.716 --> 00:02:55.394
or if that one hasn't been set,

41
00:02:55.394 --> 00:03:00.171
then we're just gonna use _ _ dirname.

42
00:03:16.061 --> 00:03:17.936
&gt;&gt; Kyle Simpson: Armed
with that information,

43
00:03:17.936 --> 00:03:21.760
we're gonna change our
usage of path.resolve here.

44
00:03:21.760 --> 00:03:23.270
So instead of saying path.resolve,

45
00:03:23.270 --> 00:03:27.086
we're gonna use a different
one that's called path.join.

46
00:03:27.086 --> 00:03:31.320
path.join will take any number of inputs,
and

47
00:03:31.320 --> 00:03:35.760
use the appropriate directory
separator for your platform.

48
00:03:35.760 --> 00:03:38.690
So on Linux or Mac,
it will use the forward slash, on Windows,

49
00:03:38.690 --> 00:03:40.310
it'll use the backslash.

50
00:03:40.310 --> 00:03:42.490
It'll do any other kind of
escaping it needs to do.

51
00:03:42.490 --> 00:03:47.742
So here, we can just say,
path.join(BASE_PATH) with our args.file.

52
00:03:49.961 --> 00:03:53.091
&gt;&gt; Kyle Simpson: That'll allow us to
assume dirname unless we override it with

53
00:03:53.091 --> 00:03:56.959
an environment variable, and that tells
us to find it from somewhere else.

54
00:04:05.580 --> 00:04:08.747
&gt;&gt; Kyle Simpson: So let's use BASE_PATH.

55
00:04:11.493 --> 00:04:14.988
&gt;&gt; Kyle Simpson: And
let's say files/ because that's the one

56
00:04:14.988 --> 00:04:18.810
we've already been grabbing stuff from.

57
00:04:18.810 --> 00:04:23.954
And now let's use --file=, and
we can just say hello.txt.

58
00:04:25.200 --> 00:04:30.749
Because it's going to know to look for
it in this configured base path.

