WEBVTT

1
00:00:00.000 --> 00:00:02.153
&gt;&gt; Kyle Simpson: And
of course we could do text to HTML and

2
00:00:02.153 --> 00:00:05.631
literally type out some HTML
stream right here if we wanted to.

3
00:00:05.631 --> 00:00:08.150
That thing gonna be a very
effective way of doing it.

4
00:00:08.150 --> 00:00:13.130
You might wonder, well to serve up some
files, could we, like, use file streams.

5
00:00:13.130 --> 00:00:16.040
I mean, we learned about file
streams earlier in the course, and

6
00:00:16.040 --> 00:00:17.890
now we know we have a response stream.

7
00:00:17.890 --> 00:00:22.690
So what if I were to open up read
stream to an each HTML file, and

8
00:00:22.690 --> 00:00:27.550
then pipe that read stream directly
to my response writable stream, and

9
00:00:27.550 --> 00:00:29.540
then just send it right on up?

10
00:00:29.540 --> 00:00:33.430
And it's true that the content would
make its way to your web browser.

11
00:00:33.430 --> 00:00:37.996
But what's missing there is that you
wouldn't have all of the important stuff

12
00:00:37.996 --> 00:00:40.986
that your static file server
is gonna take care of.

13
00:00:40.986 --> 00:00:44.500
Which is you wouldn't have a content
type that had been discovered.

14
00:00:44.500 --> 00:00:46.390
You wouldn't have the content length.

15
00:00:46.390 --> 00:00:50.358
It wouldn't have handled any content
encoding or chunking if it was doing any

16
00:00:50.358 --> 00:00:54.160
of [INAUDIBLE] compression, none of
that would have been handled for you.

17
00:00:54.160 --> 00:00:56.990
And as soon as you start trying
to implement all of that stuff,

18
00:00:56.990 --> 00:01:00.320
you're gonna realize very quickly, no,
I just want to use somebody else's file

19
00:01:00.320 --> 00:01:03.830
server, that's already handled
all of that mess for me.

20
00:01:03.830 --> 00:01:06.730
So that's why we're going
to use node static alias.

21
00:01:06.730 --> 00:01:10.676
I want you to open up, if you'll
notice in the directory that we're in,

22
00:01:10.676 --> 00:01:14.235
I've already given you a web
directory with some files in it, and

23
00:01:14.235 --> 00:01:16.326
we're going to open up index.HTML.

24
00:01:16.326 --> 00:01:21.790
This is our EX5 exercise,
we're gonna be using this as for

25
00:01:21.790 --> 00:01:26.450
both exercise five and
six as our little page.

26
00:01:26.450 --> 00:01:29.910
And there's a couple of other HTML
files in here if you wanted to look at

27
00:01:29.910 --> 00:01:31.860
the about or whatever.

28
00:01:31.860 --> 00:01:36.320
Anyway, so what we're gonna be
doing is serving up these HTML and

29
00:01:36.320 --> 00:01:41.510
JavaScript files to the browser
thru our node instance.

30
00:01:41.510 --> 00:01:45.390
To do that we're gonna set
ourselves up a static file server.

31
00:01:45.390 --> 00:01:49.420
So I've already started up
our static file server here.

32
00:01:49.420 --> 00:01:52.499
This is our node staticAlias.Server,

33
00:01:52.499 --> 00:01:58.380
we give it a path which is going to
be essentially the document route.

34
00:01:58.380 --> 00:02:00.800
So unless you change the configuration,

35
00:02:00.800 --> 00:02:06.780
it will never allow a relative access of
any file outside of that document route.

36
00:02:07.850 --> 00:02:12.100
So WEB_PATH here is defined
as our web directory,

37
00:02:12.100 --> 00:02:16.870
which means nobody will ever be able to
make some kinda malicious HTTP request and

38
00:02:16.870 --> 00:02:22.690
go get some other file off of
our servers file system, okay?

39
00:02:22.690 --> 00:02:25.600
So we're gonna use web
path as our doc route.

40
00:02:25.600 --> 00:02:30.250
I've set it up as a very short
100 milliseconds caching.

41
00:02:30.250 --> 00:02:33.440
Here's what gets sent as the server name.

42
00:02:33.440 --> 00:02:37.790
And the important part here is that
we wanna set up some routes to

43
00:02:37.790 --> 00:02:42.690
determine what our incoming URLs,
what files those might map to.

44
00:02:42.690 --> 00:02:45.876
Some of them they're gonna map directly,
and

45
00:02:45.876 --> 00:02:49.886
some of them we're gonna set
up some virtual aliases for.

46
00:02:49.886 --> 00:02:56.024
I want for our web page for us to be able
to say something like slash about without

47
00:02:56.024 --> 00:03:02.730
having to have the .html part on there or
have a slightly nicer nicer looking URL.

48
00:03:02.730 --> 00:03:06.630
So we're gonna set ourselves up
with a bit of an alias for this.

49
00:03:06.630 --> 00:03:09.970
Now I could type this stuff out,
and you could type this stuff out.

50
00:03:09.970 --> 00:03:13.740
But I think it's gonna be much
less prone for us to make mistakes

51
00:03:13.740 --> 00:03:17.230
rather that we should just do some copying
and pasting from out solution file.

52
00:03:17.230 --> 00:03:21.340
So I'm gonna recommend you do what I do
here, which is we're gonna go look in our

53
00:03:21.340 --> 00:03:24.800
solution file for
these regular expressions.

54
00:03:24.800 --> 00:03:29.390
I'm just gonna pull the first
clause from our alias list over.

55
00:03:29.390 --> 00:03:31.430
And then explain how this one works.

56
00:03:32.740 --> 00:03:33.820
And it's not too complex.

57
00:03:33.820 --> 00:03:36.020
I just don't wanna fat finger something.

58
00:03:36.020 --> 00:03:38.729
And then be debugging regular
expressions for the next five minutes.

59
00:03:39.770 --> 00:03:43.160
So basically what I'm saying here
in this regular expression is that,

60
00:03:43.160 --> 00:03:47.360
if the URL,
which does not include the HTTP part.

61
00:03:47.360 --> 00:03:51.710
It only includes everything from
the slash and the rest of the path.

62
00:03:51.710 --> 00:03:56.141
I'm saying,
if it has a slash at the beginning, and

63
00:03:56.141 --> 00:03:59.985
then either it has the word index or
nothing.

64
00:03:59.985 --> 00:04:03.600
So it might just be slash or
it might say slash index,

65
00:04:03.600 --> 00:04:08.863
if either one of those is true and
then optionally, if it's followed by some

66
00:04:08.863 --> 00:04:14.800
past separator like URL, question mark or
the hash symbol or whatever.

67
00:04:14.800 --> 00:04:17.390
And that's optional, or
just the end of the string.

68
00:04:17.390 --> 00:04:22.348
So in other words, if we just have index
all by itself without anything else on it

69
00:04:22.348 --> 00:04:25.246
then we want to serve
up the index.html file.

70
00:04:25.246 --> 00:04:28.560
So let's try just that alias.

71
00:04:28.560 --> 00:04:32.317
And by the way the force here
tells us that if that matches then

72
00:04:32.317 --> 00:04:36.454
it has to be able to find index.html or
it's got to throw a 404.

73
00:04:36.454 --> 00:04:41.159
So in other words it doesn't fall
through any other alias routes.

74
00:04:42.447 --> 00:04:45.020
&gt;&gt; Kyle Simpson: So we're gonna use
the file server that we've set up and

75
00:04:45.020 --> 00:04:47.120
we're gonna set up other
routes in a moment.

76
00:04:47.120 --> 00:04:50.990
We're gonna use the file server
down here in our handle request.

77
00:04:50.990 --> 00:04:53.920
Let's get rid of all of this code
that we were writing before.

78
00:04:55.460 --> 00:04:59.880
And let's just delegate each
incoming request to the file server.

79
00:04:59.880 --> 00:05:08.770
So let's say fileServer.serve(req,res).

80
00:05:08.770 --> 00:05:13.040
And so we tell it, hey file server you
handle this particular incoming request.

81
00:05:15.090 --> 00:05:19.150
So I'm gonna stop my server and
start it up again.

82
00:05:19.150 --> 00:05:24.972
Come over here to the browser,
take off the slash hello,

83
00:05:24.972 --> 00:05:30.673
and now you'll see that we
are serving up this web page,

84
00:05:30.673 --> 00:05:33.969
let me zoom in just a [INAUDIBLE].

85
00:05:33.969 --> 00:05:36.552
So you can see it,
now I can't click on these links yet

86
00:05:36.552 --> 00:05:39.482
because we haven't set up the other
routes to handle that but

87
00:05:39.482 --> 00:05:42.350
we are at least able to serve
up this index html five.

88
00:05:42.350 --> 00:05:47.170
This index HTML page
directly to the web browser.

89
00:05:47.170 --> 00:05:50.420
And if we were to test just
to make sure that slash

90
00:05:50.420 --> 00:05:53.270
index also serves up that same file.

91
00:06:05.583 --> 00:06:09.300
&gt;&gt; Kyle Simpson: All right,
let's try to set up some other routes.

92
00:06:09.300 --> 00:06:12.900
We wanna handle the about route.

93
00:06:12.900 --> 00:06:15.350
So we're gonna come over here.

94
00:06:16.940 --> 00:06:22.800
Actually, we wanna set up a route that
handles our JavaScript files being loaded.

95
00:06:22.800 --> 00:06:24.470
So I'm gonna copy that one over.

96
00:06:28.831 --> 00:06:32.631
&gt;&gt; Kyle Simpson: This is saying that,
if the incoming requests as /js and

97
00:06:32.631 --> 00:06:36.480
then has anything else on it,
just serve it as is.

98
00:06:36.480 --> 00:06:40.426
Don't do any rewriting of it,
just serve the absolute path for it.

99
00:06:40.426 --> 00:06:44.138
So that should be able to
load our JavaScript files.

100
00:06:44.138 --> 00:06:51.819
This one is the one that does
the more friendly URL rewriting.

101
00:06:55.757 --> 00:07:00.589
&gt;&gt; Kyle Simpson: So I'm basically saying,
if there's any portion on this URL that

102
00:07:00.589 --> 00:07:06.368
has words or numbers, followed by URL
separators on it, if any of that is true,

103
00:07:06.368 --> 00:07:11.610
then just serve up exactly that
with .HTML attended to it.

104
00:07:11.610 --> 00:07:15.822
So if it says slash about
serve up slash about .html.

105
00:07:19.135 --> 00:07:23.839
&gt;&gt; Kyle Simpson: And then last thing
is that, because I didn't do a force on

106
00:07:23.839 --> 00:07:28.063
that one,
that we're gonna fall through if you've

107
00:07:28.063 --> 00:07:32.767
say something that a slash for
a page that doesn't exist,

108
00:07:32.767 --> 00:07:38.630
then this sort of catch all here is
gonna serve up a friendly 404 page.

109
00:07:46.591 --> 00:07:50.220
&gt;&gt; Kyle Simpson: Again, all of this work
that I'm doing here this is sort of like

110
00:07:50.220 --> 00:07:54.057
framework like, like setting up
regular expressions and stuff,

111
00:07:54.057 --> 00:07:58.800
this really literally It's just a series
of If statements in a four loop, right?

112
00:07:58.800 --> 00:08:01.580
So we could have done all of this
stuff with our own If statements and

113
00:08:01.580 --> 00:08:04.470
handle requests and serve up the files.

114
00:08:04.470 --> 00:08:08.540
It's just slightly more declarative
to use this static alias server.

115
00:08:10.690 --> 00:08:12.120
All right, let's try that.

116
00:08:12.120 --> 00:08:14.900
That should have all of
our routing in place now.

117
00:08:14.900 --> 00:08:21.900
Let's stop the server and restart it and
then come back over here and refresh.

118
00:08:21.900 --> 00:08:26.966
And now, I should be able to click on
About and the About page comes up.

119
00:08:26.966 --> 00:08:31.016
And then if I were to type
in something like /hello,

120
00:08:31.016 --> 00:08:35.445
we should get a nice friendly
404 page served up to us.

