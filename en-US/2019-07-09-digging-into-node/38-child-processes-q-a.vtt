WEBVTT

1
00:00:00.350 --> 00:00:03.575
&gt;&gt; Kyle Simpson: All right, any questions
about working with child processes?

2
00:00:06.256 --> 00:00:07.900
&gt;&gt; Student: So
in production how would you handle this?

3
00:00:07.900 --> 00:00:12.690
You would have some kind of load
balancer or hit up another?

4
00:00:12.690 --> 00:00:15.470
&gt;&gt; Kyle Simpson: This isn't about
load balancing, this is load testing.

5
00:00:15.470 --> 00:00:18.210
We're trying to crash the server.

6
00:00:18.210 --> 00:00:22.490
And I'm just doing it in a really
cheap way, with child processes.

7
00:00:22.490 --> 00:00:24.391
If you were really trying to hammer it,

8
00:00:24.391 --> 00:00:28.147
you'd probably have some kind of
automation of a bunch of virtual machines.

9
00:00:28.147 --> 00:00:31.450
And different hardware trying to
hammer it with tens of thousands

10
00:00:31.450 --> 00:00:33.866
of requests at a time,
or something like that.

11
00:00:33.866 --> 00:00:38.272
This is just to illustrating the idea
that you might wanna spin up things.

12
00:00:38.272 --> 00:00:42.534
Where I got my first exposure
to child process management

13
00:00:42.534 --> 00:00:47.063
before wasn't really from
a load testing perspective, but

14
00:00:47.063 --> 00:00:50.726
certainly from a testing
at scale perspective.

15
00:00:50.726 --> 00:00:55.490
I worked for a game company and
we had the game of Bingo.

16
00:00:56.770 --> 00:01:03.190
And so we had some basic logic that
a player would take in terms of keeping

17
00:01:03.190 --> 00:01:05.880
track of the numbers were that were
called or whether they called the bingo.

18
00:01:05.880 --> 00:01:07.850
Or whether it was true or not or whatever.

19
00:01:07.850 --> 00:01:13.640
So I coded this basic logic and
then I wrote a node thing

20
00:01:13.640 --> 00:01:18.889
that would basically hammer our
server with like ten or 20,000.

21
00:01:20.680 --> 00:01:23.560
And I would do more than one
player per child process, but

22
00:01:23.560 --> 00:01:27.055
I would hammer the server with as many
players as I could spin it up to.

23
00:01:27.055 --> 00:01:32.145
And I think I got it up to about 60,000
players hammering our production game

24
00:01:32.145 --> 00:01:37.329
server before it really started to have
trouble keeping up or something like that.

25
00:01:37.329 --> 00:01:41.158
But I've actually used this
in real world scenarios,

26
00:01:41.158 --> 00:01:45.140
to try to kind of at-scale
be able to manage things.

27
00:01:45.140 --> 00:01:50.050
A single node process is limited
by the synchrony of JavaScript

28
00:01:50.050 --> 00:01:51.680
that it can only do so
many things at once.

29
00:01:51.680 --> 00:01:54.120
So by spinning it up into,

30
00:01:54.120 --> 00:01:57.860
even if you weren't doing one request
per child like we're doing here.

31
00:01:57.860 --> 00:01:59.980
If you did ten children but

32
00:01:59.980 --> 00:02:03.180
ten requests per child,
that's gonna be more concurrent,

33
00:02:03.180 --> 00:02:08.920
more parallel than if you try to do all
100 of those in the same node process.

34
00:02:08.920 --> 00:02:11.690
There are some benefits
in terms of load testing,

35
00:02:11.690 --> 00:02:14.520
to being able to spin up child processes.

36
00:02:14.520 --> 00:02:19.100
In terms of production systems, I can't
really come up with very many situations

37
00:02:19.100 --> 00:02:24.350
where a live production system
would spawn off child processes.

38
00:02:24.350 --> 00:02:29.450
If I needed to do that I would delegate to
somewhere lower in the stack below node,

39
00:02:29.450 --> 00:02:34.190
in sort of a, but it certainly helps for
scripting and testing.

40
00:02:34.190 --> 00:02:34.710
Yes?

41
00:02:34.710 --> 00:02:38.090
&gt;&gt; Student2: I was just curious about
like what's the mechanism that's

42
00:02:38.090 --> 00:02:39.400
actually causing it to fail?

43
00:02:39.400 --> 00:02:42.640
Is it that the CPU on the machine
is just maxed out, or?

44
00:02:42.640 --> 00:02:46.040
&gt;&gt; Kyle Simpson: In this particular case,
it was most likely,

45
00:02:46.040 --> 00:02:51.040
I don't know exactly what this means,
but it was most likely that

46
00:02:51.040 --> 00:02:55.850
the operating system refused to
spin up another child process.

47
00:02:55.850 --> 00:03:00.180
So it literally just failed to
spin up another child process.

48
00:03:00.180 --> 00:03:02.810
I don't think it was the web
server itself that crashed.

49
00:03:02.810 --> 00:03:05.060
I think it was the child
process limitation.

50
00:03:05.060 --> 00:03:09.080
Which is why I said before,
you wouldn't necessarily in a real load

51
00:03:09.080 --> 00:03:12.540
testing scenario,
do like one per child process.

52
00:03:12.540 --> 00:03:17.460
You would just kind of chunk them up, like
do a hundred requests for children, and

53
00:03:17.460 --> 00:03:20.940
then do a couple hundred children
with a hundred request in each, or

54
00:03:20.940 --> 00:03:22.210
something like that.

55
00:03:22.210 --> 00:03:25.480
That'd be better usage of
your system resources.

56
00:03:27.440 --> 00:03:28.220
Yes?

57
00:03:28.220 --> 00:03:32.394
&gt;&gt; Student3: When you said you might
consider on a production situation

58
00:03:32.394 --> 00:03:36.482
delegating some of these tasks
not to child processes but

59
00:03:36.482 --> 00:03:38.706
somewhere lower on the stack.

60
00:03:38.706 --> 00:03:43.754
Can you speak a little more to what sort
of alternatives you would consider like.

61
00:03:43.754 --> 00:03:46.897
&gt;&gt; Kyle Simpson: Any other
non JavaScript language-

62
00:03:46.897 --> 00:03:47.578
&gt;&gt; Student3: Fair enough.

63
00:03:47.578 --> 00:03:50.013
&gt;&gt; Kyle Simpson: Right, I don't know
the go programming language but

64
00:03:50.013 --> 00:03:52.674
I know that it's famously
good at threaded programming.

65
00:03:52.674 --> 00:03:56.323
And if I needed to do some massive
parallel programming kind of thing

66
00:03:56.323 --> 00:04:00.950
rather than spending up node processes
which are relatively kind of heavy.

67
00:04:00.950 --> 00:04:04.380
I'd probably delegate to some highly
optimized system like Scala or

68
00:04:04.380 --> 00:04:05.200
Gala, or something.

69
00:04:05.200 --> 00:04:07.870
And have it do a bunch of really
efficient threaded programming.

