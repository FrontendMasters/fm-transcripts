WEBVTT

1
00:00:00.000 --> 00:00:03.940
&gt;&gt; Kyle Simpson: We talked earlier
about the standard in stream.

2
00:00:03.940 --> 00:00:08.070
We said we want to be able to pull from
a standard in but we don't want to have to

3
00:00:08.070 --> 00:00:11.881
do our own like invention of that logic,
so we're going to go ahead and

4
00:00:11.881 --> 00:00:16.561
pull in another package that I've already
pre-installed for you called getStdin.

5
00:00:20.543 --> 00:00:22.897
&gt;&gt; Kyle Simpson: get-stdin.

6
00:00:22.897 --> 00:00:26.410
While I'm up here at the top, I'm gonna
go ahead and add another package.

7
00:00:26.410 --> 00:00:27.870
We're gonna use this
one a little bit later,

8
00:00:27.870 --> 00:00:30.350
but I'm gonna add another
package called util.

9
00:00:30.350 --> 00:00:32.990
That's another one of
the built-in ones in node.

10
00:00:34.310 --> 00:00:40.386
So we want to be able to support not only
telling you a file by name, but also

11
00:00:40.386 --> 00:00:47.161
we want our program to be able to receive
the file inputs on the standard in stream.

12
00:00:47.161 --> 00:00:53.890
So we need some way of indicating that to
our program on a command line parameter.

13
00:00:53.890 --> 00:00:58.310
We need some flag to tell it hey get your
stuff from standard in instead of trying

14
00:00:58.310 --> 00:00:59.820
to look for it in the file.

15
00:00:59.820 --> 00:01:03.990
So what we're going to do then is say,
we're gonna add a boolean flag and

16
00:01:03.990 --> 00:01:10.595
we'll call this "in", and
then we will handle "in" by saying if

17
00:01:10.595 --> 00:01:17.055
args.in we're gonna be getting from the
&gt;&gt; Kyle Simpson: Standard in,

18
00:01:17.055 --> 00:01:21.230
otherwise we're gonna be
getting from a file system.

19
00:01:21.230 --> 00:01:26.250
Now you'll notice that we're going
to wanna call process file, but

20
00:01:26.250 --> 00:01:30.350
we're gonna need to not pass it,
necessarily a string path anymore.

21
00:01:30.350 --> 00:01:33.620
We're gonna want to go ahead and
pass it, the contents of the file.

22
00:01:33.620 --> 00:01:36.830
Cuz we either might have
gotten it from a file or

23
00:01:36.830 --> 00:01:38.250
we might have gotten it from standard in.

24
00:01:38.250 --> 00:01:43.110
So I'm gonna change process file,
basically I'm gonna take this code and

25
00:01:43.110 --> 00:01:48.330
move it, or at least some of it,
I'm gonna move it up to here temporarily.

26
00:02:01.179 --> 00:02:08.375
&gt;&gt; Kyle Simpson: So
we're going to do "processfile(contents);"

27
00:02:08.375 --> 00:02:11.372
&gt;&gt; Kyle Simpson: And we're gonna make

28
00:02:11.372 --> 00:02:16.540
processFile receive the contents.

29
00:02:17.900 --> 00:02:18.970
Now, what's it gonna do?

30
00:02:18.970 --> 00:02:25.500
It's gonna say contents
= contents.toUpperCase.

31
00:02:27.774 --> 00:02:37.218
&gt;&gt; Kyle Simpson: And then we're gonna
call process.stdout.write(contents).

32
00:02:41.014 --> 00:02:45.111
&gt;&gt; Kyle Simpson: This code should
still work exactly the same,

33
00:02:45.111 --> 00:02:49.219
we just moved where that
logic was happening.

34
00:02:49.219 --> 00:02:53.210
But we want to be able to support
receiving that stuff from stdin.

35
00:02:53.210 --> 00:02:58.220
We're gonna call the getStdin function and

36
00:02:58.220 --> 00:03:01.150
this is a promise returning mechanism.

37
00:03:01.150 --> 00:03:04.590
So that's our first sense of using
asynchrony without a callback.

38
00:03:04.590 --> 00:03:06.930
This is a promise returning mechanism.

39
00:03:06.930 --> 00:03:10.350
And so it's going to resolve
a promise with all the contents

40
00:03:10.350 --> 00:03:11.820
that it got from the standard in.

41
00:03:11.820 --> 00:03:16.640
It'll capture all of them and
resolve to all of those.

42
00:03:16.640 --> 00:03:21.200
So we're gonna call getStdin and
then we're gonna say .then.

43
00:03:21.200 --> 00:03:26.290
And what we wanna do is now we know we
will have those contents at this point so

44
00:03:26.290 --> 00:03:29.400
we can just call processFile.

45
00:03:31.030 --> 00:03:35.080
And if there's an error somewhere,
we wanna catch it, and

46
00:03:35.080 --> 00:03:38.530
the catch should send the error
message to our error handler.

47
00:03:42.145 --> 00:03:43.890
&gt;&gt; Kyle Simpson: Okay, let's try that out.

48
00:03:43.890 --> 00:03:46.150
There's one more thing we wanna do.

49
00:03:46.150 --> 00:03:51.150
One of the conventions that is
somewhat common within parameters

50
00:03:51.150 --> 00:03:55.830
speak is that if you have a hyphen,
a single

51
00:03:55.830 --> 00:04:00.120
hyphen at the end of the line that's
another way of saying, hey guess what?

52
00:04:00.120 --> 00:04:02.860
Standard in is gonna provide
all the rest of the inputs.

53
00:04:02.860 --> 00:04:03.980
So we wanna handle that and

54
00:04:03.980 --> 00:04:08.500
we know that minimist doesn't know
how to process a single hyphen.

55
00:04:08.500 --> 00:04:16.874
So we're going to say, if args.in or,
&gt;&gt; Kyle Simpson: And

56
00:04:16.874 --> 00:04:22.820
remember we had the args._ was an array of
all the things that it couldn't process.

57
00:04:22.820 --> 00:04:27.470
We're gonna say if that array
includes the single hyphen.

58
00:04:27.470 --> 00:04:31.080
Then that will tell us that we
want to do standard in processing.

59
00:04:31.080 --> 00:04:32.259
Let's update our help.

60
00:04:58.805 --> 00:05:00.101
&gt;&gt; Kyle Simpson: Let's try it again,

61
00:05:00.101 --> 00:05:05.145
we'll try it with something where it was
already working, which was hello.txt.

62
00:05:06.739 --> 00:05:13.800
&gt;&gt; Kyle Simpson: All right,
cuz we need to make sure it's a string.

63
00:05:19.650 --> 00:05:23.230
&gt;&gt; Kyle Simpson: So process file
is now expecting already a string.

64
00:05:24.620 --> 00:05:26.417
So we updated that to call toString on it.

65
00:05:34.703 --> 00:05:38.072
&gt;&gt; Kyle Simpson: Now it's able to process
it if we grab it from a file, but

66
00:05:38.072 --> 00:05:41.390
we also want to be able to do
it with standard in input.

67
00:05:41.390 --> 00:05:44.060
So let's try that out.

68
00:05:44.060 --> 00:05:49.330
Let's say that we're going to use
the built in command called cat.

69
00:05:49.330 --> 00:05:52.790
We're gonna say files/hello.text and

70
00:05:52.790 --> 00:05:58.126
we're going to pipe that
information into our ./ex1.js and

71
00:05:58.126 --> 00:06:03.780
we're just going to tell it to
expect the process from standard in.

72
00:06:07.473 --> 00:06:12.070
&gt;&gt; Kyle Simpson: And now it received
it through standard in instead.

73
00:06:12.070 --> 00:06:14.250
Same thing if we do
a single hyphen at the end.

74
00:06:16.510 --> 00:06:17.080
Yes?

75
00:06:17.080 --> 00:06:21.670
&gt;&gt; Speaker 2: Could you maybe go a little
more in-depth on what standard in is,

76
00:06:22.990 --> 00:06:25.060
I got lost there.

77
00:06:25.060 --> 00:06:28.000
&gt;&gt; Kyle Simpson: Yeah, so
if standard out is our output stream,

78
00:06:28.000 --> 00:06:31.000
where we're pushing from our
program back out to the shell.

79
00:06:31.000 --> 00:06:35.660
Standard in is the stream of any contents
that are currently in the buffer

80
00:06:35.660 --> 00:06:39.340
of our shell that are going
to go into the next program.

81
00:06:39.340 --> 00:06:45.730
So when we do a pipe command here,
what we're saying is anything that this

82
00:06:45.730 --> 00:06:51.210
created as a standard output, it would
normally just be dumped to the shell.

83
00:06:51.210 --> 00:06:56.890
But if we pipe it that's saying turn
the output into an input stream,

84
00:06:56.890 --> 00:06:59.220
and then we're basically saying
take that input stream and

85
00:06:59.220 --> 00:07:00.940
pipe it directly into this program.

