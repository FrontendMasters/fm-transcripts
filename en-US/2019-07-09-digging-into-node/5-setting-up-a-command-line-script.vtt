WEBVTT

1
00:00:00.070 --> 00:00:03.690
&gt;&gt; Kyle Simpson: So we're gonna
set about to make, essentially,

2
00:00:03.690 --> 00:00:05.450
an executable shell script.

3
00:00:06.830 --> 00:00:10.770
And the one that we're gonna do in this
exercise is admittedly a little silly, but

4
00:00:10.770 --> 00:00:13.720
you can probably imagine a variety
of shell scripts that you've

5
00:00:13.720 --> 00:00:15.040
used from time to time.

6
00:00:15.040 --> 00:00:19.290
Even stuff where you have like
you're running a babble or

7
00:00:19.290 --> 00:00:26.900
you're running something like a web pack
or something, those command line scripts.

8
00:00:26.900 --> 00:00:31.950
Those are essentially like bash scripts
but they've been written in node.

9
00:00:31.950 --> 00:00:38.270
So let's talk about how we could
write a command line script and

10
00:00:38.270 --> 00:00:42.070
have it actually execute similar
to if it was a bash script.

11
00:00:42.070 --> 00:00:45.630
Again, this is gonna be a thing that's
gonna be different between the Linux,

12
00:00:45.630 --> 00:00:48.410
Mac, Crowd, and
if you're working on Windows.

13
00:00:48.410 --> 00:00:52.450
But one of the standard conventions if
you're working in a typical Linux kind of

14
00:00:52.450 --> 00:00:58.580
shell like bash or ZHS or
whatever, is that you can

15
00:00:58.580 --> 00:01:03.460
put what's called the shebang
comment at the top of a file and

16
00:01:03.460 --> 00:01:07.720
that will tell the shell environment
that when it starts to execute it,

17
00:01:07.720 --> 00:01:11.420
it knows what program to
hand that execution off to.

18
00:01:11.420 --> 00:01:14.220
Instead of trying to
interpret it as a bash script

19
00:01:14.220 --> 00:01:15.330
it'll handed off to something else.

20
00:01:15.330 --> 00:01:20.710
So that's called the shebang or
the hash bang because, we do hash symbol.

21
00:01:20.710 --> 00:01:27.990
And then the bang and then we give it
a file to use for the interpretation.

22
00:01:27.990 --> 00:01:31.760
So we want ours to be interpreted by
node so we can give it the full path

23
00:01:31.760 --> 00:01:36.130
to our node program, but
it turns out that there are places,

24
00:01:36.130 --> 00:01:40.060
there are differences were node gets
installed in different systems and

25
00:01:40.060 --> 00:01:44.210
if you want your script to be able to
run on all of your developer machines

26
00:01:44.210 --> 00:01:47.300
at your company, you probably want to
be a little more agnostic about it.

27
00:01:47.300 --> 00:01:50.340
So there's a trick,
there's another program called env,

28
00:01:50.340 --> 00:01:55.550
E N V that'll be included in all
your distributions of Linux or Mac.

29
00:01:56.930 --> 00:02:01.200
You give it the name of an executable and
it finds where that is for you.

30
00:02:01.200 --> 00:02:07.160
So what we're actually
gonna do is do usr/bin/env,

31
00:02:07.160 --> 00:02:08.630
and then we're gonna tell it node.

32
00:02:08.630 --> 00:02:12.820
This is saying go find node
wherever it is in my system and

33
00:02:12.820 --> 00:02:16.980
use node to interpret
the rest of my program.

34
00:02:16.980 --> 00:02:19.850
Before I forget,
because I always seem to forget this,

35
00:02:19.850 --> 00:02:22.600
you should always be running
your code in strict mode.

36
00:02:22.600 --> 00:02:24.200
So go ahead and put a use strict there.

37
00:02:25.430 --> 00:02:29.010
But I wanna make a point about use strict
because we typically think of use strict

38
00:02:29.010 --> 00:02:34.790
as only working if it's at the very top of
the file without anything in front if it.

39
00:02:34.790 --> 00:02:37.336
And we actually have something
here in front of it.

40
00:02:37.336 --> 00:02:42.244
So the thing that you should be aware of
is that by the time this line of code

41
00:02:42.244 --> 00:02:46.330
runs with node,
that line of code is actually empty.

42
00:02:46.330 --> 00:02:50.300
So it's already been stripped out
by the processing environment by

43
00:02:50.300 --> 00:02:51.090
the time it runs.

44
00:02:51.090 --> 00:02:54.195
You don't have to worry about this
being invalid JavaScript syntax.

45
00:02:56.110 --> 00:03:00.250
All right, so now that we have it
interpretable by an environment,

46
00:03:00.250 --> 00:03:01.700
by the shell environment.

47
00:03:01.700 --> 00:03:06.430
Now what we wanna do is
actually make it an executable.

48
00:03:06.430 --> 00:03:12.461
So again, because I'm in a kind of Linuxy
sort of a system, if you look at the file

49
00:03:12.461 --> 00:03:17.729
descriptors here, you'll see that
the user has execution bit on it.

50
00:03:17.729 --> 00:03:21.242
That's because that's how I have
already edited this file and

51
00:03:21.242 --> 00:03:25.748
it may already be depending on how you got
these files, it may already be set, but

52
00:03:25.748 --> 00:03:29.087
if that x is not there,
then it can't be executed as a user.

53
00:03:29.087 --> 00:03:34.882
So if you don't have
the x there you can say,

54
00:03:34.882 --> 00:03:40.052
change mod and you can say user plus x and

55
00:03:40.052 --> 00:03:42.750
then say ex1.js.

56
00:03:42.750 --> 00:03:47.710
And that will tell it to put that x bit
on there if you didn't already have it.

57
00:03:47.710 --> 00:03:50.570
Once you have that executable bit,

58
00:03:50.570 --> 00:03:55.419
that file permission on your .ex1
instead of saying node ex1.js,

59
00:03:55.419 --> 00:04:01.590
now you're gonna be able
to say just ./ex1.js.

60
00:04:01.590 --> 00:04:04.330
Very similar to how you might run
any other program that might be

61
00:04:04.330 --> 00:04:08.780
installed on your computer,
you can say .1./exi.js.

62
00:04:08.780 --> 00:04:11.150
So now we've made it an executable script.

63
00:04:12.400 --> 00:04:16.600
But one other thing that we wanna do,
right off the bat whenever you're going to

64
00:04:16.600 --> 00:04:21.070
work with a node script, or any kind
of shell script that you're making

65
00:04:21.070 --> 00:04:26.050
is you wanna have a good,
clean output for these things.

66
00:04:26.050 --> 00:04:29.170
And it's incredibly common
to skip this step, and

67
00:04:29.170 --> 00:04:31.500
I'm just gonna tell you
don't skip this step.

68
00:04:31.500 --> 00:04:36.140
Whenever you're writing scripts, put for
yourself some kind of help output for your

69
00:04:36.140 --> 00:04:39.570
scripts, because you will come back to the
script three days from now and completely

70
00:04:39.570 --> 00:04:43.590
forget how it is you're supposed to
pass stuff in or run it or whatever.

71
00:04:43.590 --> 00:04:47.660
Just always remember,
it's a good idea to have some help output.

72
00:04:47.660 --> 00:04:49.940
So we're just going to, and
you can do this however you like.

73
00:04:49.940 --> 00:04:52.630
But I'm gonna write a little
print help function,

74
00:04:52.630 --> 00:04:54.640
just to print some basic help output.

75
00:04:54.640 --> 00:04:59.729
So we're gonna say, console.log,

76
00:04:59.729 --> 00:05:05.300
and then we'll say ("ex1 usage").

77
00:05:05.300 --> 00:05:12.338
I will say ("ex1 usage") and
then console.log,

78
00:05:12.338 --> 00:05:18.769
and then we'll say ("ex1.js--help").

79
00:05:18.769 --> 00:05:19.843
And then,

80
00:05:40.281 --> 00:05:43.978
&gt;&gt; Kyle Simpson: However you want it to
read, but just something kind of slightly

81
00:05:43.978 --> 00:05:47.546
friendly for future you or
anybody else who wants to use this.

82
00:05:47.546 --> 00:05:50.286
So, just define that function and
then call it.

83
00:05:59.482 --> 00:06:01.302
&gt;&gt; Kyle Simpson: And
then as you start to run this,

84
00:06:01.302 --> 00:06:04.630
if you go back to your command line and
you run it.

85
00:06:04.630 --> 00:06:07.965
Now you should see what looks like
a typical command line script,

86
00:06:07.965 --> 00:06:10.770
this got some like official
looking output to it.

87
00:06:10.770 --> 00:06:13.260
You can put a copyright there if
you really want to protect your

88
00:06:13.260 --> 00:06:14.190
intellectual property.

