WEBVTT

1
00:00:00.110 --> 00:00:03.310
&gt;&gt; Kyle Simpson: Okay, but
notice that it's returning us back a 0.

2
00:00:03.310 --> 00:00:10.100
That is the default exit code when
a process finishes with success, okay?

3
00:00:10.100 --> 00:00:13.910
So let's just go back to our child for
a moment.

4
00:00:13.910 --> 00:00:18.800
And before we finish,
let's set our exit code,

5
00:00:18.800 --> 00:00:21.555
process.exitCode = 1.

6
00:00:26.387 --> 00:00:29.294
&gt;&gt; Kyle Simpson: And
then if we run our ex7

7
00:00:29.294 --> 00:00:34.753
again,
&gt;&gt; Kyle Simpson: You

8
00:00:34.753 --> 00:00:39.730
notice now that exit code is coming back,
it's detecting that that exit code was 1.

9
00:00:39.730 --> 00:00:45.440
In POSIX standard convention,
a 0 exit code

10
00:00:45.440 --> 00:00:50.310
means everything was fine, anything
non-zero means something went wrong, okay?

11
00:00:50.310 --> 00:00:53.800
And we're going to use the exit
code as our communication channel,

12
00:00:53.800 --> 00:00:56.580
instead of worrying about standard in and
standard out.

13
00:00:56.580 --> 00:01:00.823
We're just going to use exit code that
if our child is successful at its task,

14
00:01:00.823 --> 00:01:04.610
it's going to return 0, and
if it's unsuccessful for any reason,

15
00:01:04.610 --> 00:01:06.790
it's going to return one.

16
00:01:06.790 --> 00:01:11.675
And so our parent, our ex7,
is going to need to listen for

17
00:01:11.675 --> 00:01:16.962
these children and see if their
exit code is returning back 0 or

18
00:01:16.962 --> 00:01:20.287
not to know whether it was successful.

19
00:01:20.287 --> 00:01:28.042
So ex7-child, what we really want
it to do is not do a for loop.

20
00:01:28.042 --> 00:01:32.050
What we really want it to
do is make an AJAX request.

21
00:01:32.050 --> 00:01:38.470
We're going to use fetch and
we're going to fetch against our server.

22
00:01:39.470 --> 00:01:44.180
So let's call fetch, and
here since we're not in

23
00:01:44.180 --> 00:01:49.463
a browser we are going to have
to give it a full URL to use.

24
00:01:49.463 --> 00:01:55.541
So we're going to say
http://localhost:8039,

25
00:01:55.541 --> 00:02:01.376
or whatever port you chose,
and then /get-records.

26
00:02:01.376 --> 00:02:06.871
And we're going to say, res = await fetch,

27
00:02:12.588 --> 00:02:16.239
&gt;&gt; Kyle Simpson: If, let's do this.

28
00:02:16.239 --> 00:02:21.378
Let's do a try catch because these
can fail if things are down.

29
00:02:30.972 --> 00:02:35.581
&gt;&gt; Kyle Simpson: So then if res &amp;&amp; res.ok,

30
00:02:35.581 --> 00:02:38.851
then we want to say,

31
00:02:42.104 --> 00:02:50.800
&gt;&gt; Kyle Simpson: records = await res.json.

32
00:02:50.800 --> 00:02:53.250
Same thing we did in the web browser.

33
00:02:53.250 --> 00:02:55.380
We're basically just now
doing it on the server.

34
00:02:55.380 --> 00:02:58.570
I think it was asked earlier in
the course how would I handle making

35
00:02:58.570 --> 00:02:59.390
outbound requests.

36
00:02:59.390 --> 00:03:01.290
This is exactly how I would do it.

37
00:03:01.290 --> 00:03:03.302
I'd use fetch exactly
like I do in a browser.

38
00:03:03.302 --> 00:03:04.736
I'd just use it here on node.

39
00:03:06.704 --> 00:03:12.194
&gt;&gt; Kyle Simpson: Okay, so
if (records &amp;&amp; records.length

40
00:03:12.194 --> 00:03:17.310
&gt; 0) then we know we were successful.

41
00:03:17.310 --> 00:03:24.170
So let's just for good measure,
set process.exitCode = 0, and return.

42
00:03:24.170 --> 00:03:27.914
And otherwise,
if any of that fails for any reason,

43
00:03:27.914 --> 00:03:30.393
then we want to set exitCode = 1.

44
00:03:33.505 --> 00:03:37.410
&gt;&gt; Kyle Simpson: Let's try
our ex7-child right now.

45
00:03:40.600 --> 00:03:42.100
And it just runs for a little bit,

46
00:03:42.100 --> 00:03:46.510
and it doesn't give us any indication
about whether it succeeded or not.

47
00:03:46.510 --> 00:03:50.270
So how could we test from the command
line what the exit code is?

48
00:03:50.270 --> 00:03:52.080
We can't really see the exit code, but

49
00:03:52.080 --> 00:03:57.340
there is a way to implicitly determine
what that exit code might have done.

50
00:03:57.340 --> 00:04:02.040
So the way we're going to implicitly
determine that is to observe that

51
00:04:02.040 --> 00:04:06.540
the reason for exit codes is because the
way the command line works if you're doing

52
00:04:06.540 --> 00:04:09.710
multiple commands,
is that if any command fails and

53
00:04:09.710 --> 00:04:14.670
fives a non-zero exit code, it stops
the rest of the processing from happening.

54
00:04:14.670 --> 00:04:21.740
So for example,
if I were to say node ex7-child.js &amp;&amp; and

55
00:04:21.740 --> 00:04:24.900
then do a directory listing.

56
00:04:24.900 --> 00:04:29.816
The directory listing is only going to
happen if ex7-child.js gives us a 0

57
00:04:29.816 --> 00:04:31.520
exit code.

58
00:04:31.520 --> 00:04:35.040
So when we run it, we noticed that
we got a directory listing, so

59
00:04:35.040 --> 00:04:36.750
that means it's successful.

60
00:04:36.750 --> 00:04:38.370
I'm going to run that same command.

61
00:04:38.370 --> 00:04:41.520
But before I run that command,
I'm going to take the server down.

62
00:04:42.870 --> 00:04:47.200
And now when I run the command,
it fails right away because we got

63
00:04:47.200 --> 00:04:51.770
an exit code of 1, which then caused
it to short circuit and not run.

64
00:04:51.770 --> 00:04:56.040
So that's how you can test for
yourself that in fact you've got

65
00:04:56.040 --> 00:05:00.346
a child process doing what it's supposed
to be doing, giving you a 1 or a 0.

