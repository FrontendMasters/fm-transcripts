WEBVTT

1
00:00:00.000 --> 00:00:01.823
&gt;&gt; Kyle Simpson: Let's
look at exercise seven.

2
00:00:01.823 --> 00:00:05.561
We're gonna shift gears back again,
we were kind of moving our way up into

3
00:00:05.561 --> 00:00:07.991
the web stack for
the last couple of exercises.

4
00:00:07.991 --> 00:00:10.456
We're gonna shift gears back
to the command line, and

5
00:00:10.456 --> 00:00:12.339
we're gonna go real low level with this.

6
00:00:12.339 --> 00:00:17.236
We're gonna talk about about how to
deal with Node across multiple process

7
00:00:17.236 --> 00:00:18.097
instances.

8
00:00:18.097 --> 00:00:22.205
Specifically how to spin off child
processes from a main node process and

9
00:00:22.205 --> 00:00:26.446
how to communicate with them,
how to receive information back from them,

10
00:00:26.446 --> 00:00:27.610
that sort of thing.

11
00:00:27.610 --> 00:00:34.500
So, what we're gonna do is start by using
the built-in Node childProc process.

12
00:00:34.500 --> 00:00:40.965
That's how we're gonna spin off
a child process is using childProc.

13
00:00:40.965 --> 00:00:43.334
For now,
we're only gonna do one of these, but

14
00:00:43.334 --> 00:00:46.010
we're gonna end up spinning
off multiples of these.

15
00:00:46.010 --> 00:00:51.370
Because the spirit of this exercise is now
that we have a web server that's running,

16
00:00:51.370 --> 00:00:56.123
I thought maybe it'd be kind of fun to
try to build a load tester that tries to

17
00:00:56.123 --> 00:00:59.994
spin up multiple child processes and
hammer our web server.

18
00:00:59.994 --> 00:01:03.454
And see how many child processes
we can get before it crashes.

19
00:01:03.454 --> 00:01:08.872
So we're gonna be spinning up a load
tester here in exercise seven.

20
00:01:08.872 --> 00:01:12.226
All right, so
the basic concept behind a child

21
00:01:12.226 --> 00:01:16.526
process is that you end up
spinning up this separate thing,

22
00:01:16.526 --> 00:01:21.269
and then you get back an object
that has standard IO streams on it.

23
00:01:21.269 --> 00:01:26.744
And that's how you know what input you
might send to the child process and

24
00:01:26.744 --> 00:01:29.706
what output you might be getting back or

25
00:01:29.706 --> 00:01:34.040
errors you might be getting
back from the child process.

26
00:01:34.040 --> 00:01:42.265
So we're gonna end up calling a method
called spawn on this childProc module.

27
00:01:42.265 --> 00:01:45.969
That's gonna end up creating us
an object that represents the child.

28
00:01:45.969 --> 00:01:48.167
So let's try that.

29
00:02:06.764 --> 00:02:10.946
&gt;&gt; Kyle Simpson: We'll
call childProc.spawn.

30
00:02:10.946 --> 00:02:14.659
The executable is actually Node itself,
we're gonna call Node again.

31
00:02:14.659 --> 00:02:19.503
And then the parameters that we wanna

32
00:02:19.503 --> 00:02:24.198
pass to Node are ex7-child.js.

33
00:02:24.198 --> 00:02:25.752
We'll talk about that
one in just a moment.

34
00:02:25.752 --> 00:02:28.293
So we're gonna be spinning
off a child process.

35
00:02:28.293 --> 00:02:31.240
Now child, as I said, that comes back,

36
00:02:31.240 --> 00:02:35.682
that has elements on it where we
can listen to an event for it.

37
00:02:35.682 --> 00:02:40.314
And we can also read and
write from its standard IO.

38
00:02:40.314 --> 00:02:45.091
In our particular case, I think all
we wanna do is ask, did it finish?

39
00:02:45.091 --> 00:02:49.297
So we're gonna basically
say child.on("exit".

40
00:02:52.902 --> 00:02:58.855
&gt;&gt; Kyle Simpson: And then we'll say
console.log("Child finished") and

41
00:02:58.855 --> 00:03:02.408
then whatever that code was, okay?

42
00:03:02.408 --> 00:03:06.872
So we're gonna spin off this child
process and then just simply wait until

43
00:03:06.872 --> 00:03:10.559
it finishes, and
then we'll be notified that it finished.

44
00:03:16.530 --> 00:03:20.362
&gt;&gt; Kyle Simpson: So what are we
gonna put in our child process?

45
00:03:20.362 --> 00:03:24.709
Well for now, let's just do something
simple so that we can test whether or

46
00:03:24.709 --> 00:03:27.960
not our child process
communication stuff is working.

47
00:03:27.960 --> 00:03:32.152
Let's just do a long running for

48
00:03:32.152 --> 00:03:38.208
loop like (let i=0; i&lt;1000000;

49
00:03:38.208 --> 00:03:43.029
i++), and then we'll say i = i.

50
00:03:43.029 --> 00:03:45.071
We'll just let that for loop run.

51
00:03:45.071 --> 00:03:50.375
Or maybe we'll say,
&gt;&gt; Kyle Simpson: We'll let it run for half

52
00:03:50.375 --> 00:03:54.535
the length of that by double incrementing
it, and then it'll be finished.

53
00:03:54.535 --> 00:03:58.571
So if we spin up this child process,
it should just run for a brief,

54
00:03:58.571 --> 00:04:01.254
brief amount of time and
then be completed.

55
00:04:01.254 --> 00:04:08.598
So let's test that at the command
line by just running our node ex7.js.

56
00:04:10.624 --> 00:04:16.123
&gt;&gt; Kyle Simpson: And
then if we run ex7-child.js, it just runs.

57
00:04:16.123 --> 00:04:19.533
It doesn't take very long, so
maybe we should go back and

58
00:04:19.533 --> 00:04:21.534
make it take a little bit longer.

59
00:04:23.406 --> 00:04:27.444
&gt;&gt; Kyle Simpson: Just for
demonstration purposes, still pretty fast.

60
00:04:27.444 --> 00:04:33.976
We might be running into V8 trying
to optimize away this loop.

61
00:04:33.976 --> 00:04:38.328
So maybe I can get a little bit tricky and
try to get it to not do that.

62
00:04:49.277 --> 00:04:49.837
&gt;&gt; Kyle Simpson: There we go.

63
00:04:49.837 --> 00:04:54.038
Now I, at least, made it wait a little
bit longer, so it waits about a second.

64
00:04:54.038 --> 00:04:57.420
And then if we run ex7,
then you notice it waits for

65
00:04:57.420 --> 00:05:01.128
a moment before telling us
that the child has finished.

