WEBVTT

1
00:00:00.040 --> 00:00:04.030
&gt;&gt; Kyle Simpson: We've built our own
web server and static file server and

2
00:00:04.030 --> 00:00:05.390
API endpoint.

3
00:00:05.390 --> 00:00:07.980
But the truth is, you're almost
certainly gonna be working with

4
00:00:07.980 --> 00:00:10.420
one of those more well known frameworks.

5
00:00:10.420 --> 00:00:13.670
And I thought it would be a good idea to
at least get you a little bit of exposure

6
00:00:13.670 --> 00:00:17.890
to probably the most well known of those,
which is Express.js.

7
00:00:17.890 --> 00:00:21.430
So in exercise six, we're gonna just
switch over everything that we were doing

8
00:00:21.430 --> 00:00:26.409
on the server side from doing a kind
of manually to using Express.js.

9
00:00:26.409 --> 00:00:28.430
I've already got express installed for
you,

10
00:00:28.430 --> 00:00:31.910
which is actually a good thing because
if you try to do npn install express,

11
00:00:31.910 --> 00:00:34.670
you'll see the download is
something like 300 packages.

12
00:00:34.670 --> 00:00:37.250
It's kind of got a lot of dependencies.

13
00:00:37.250 --> 00:00:39.760
But anyway, we've got express
already installed for you.

14
00:00:41.700 --> 00:00:46.060
And we are gonna start wiring
it up to using express.

15
00:00:46.060 --> 00:00:50.780
The way express works is you
call the express function

16
00:00:52.420 --> 00:00:55.370
and you can pass some config but
we don't need to.

17
00:00:55.370 --> 00:01:01.800
And you get back a thing which
is almost always called app.

18
00:01:01.800 --> 00:01:06.516
So that represents your express app,
this thing called app.

19
00:01:06.516 --> 00:01:09.650
And you may wonder what is app,
is it some kind of object,

20
00:01:09.650 --> 00:01:13.010
is it instantiation of a class?

21
00:01:13.010 --> 00:01:16.980
To understand what app is,
let's see how we use it.

22
00:01:16.980 --> 00:01:23.590
We actually use app,
by passing it to our HTTP server instance.

23
00:01:23.590 --> 00:01:28.430
If you remember from the previous
exercise, what did we pass

24
00:01:28.430 --> 00:01:33.400
to create server, we passed the function
handle request that we defined.

25
00:01:33.400 --> 00:01:39.980
So in other words, app is an automatically
generated handle request function.

26
00:01:39.980 --> 00:01:44.960
That receives req request and
response streams and handles them.

27
00:01:44.960 --> 00:01:48.810
And in fact, inside of that app function,
if you were open up its guts and look at

28
00:01:48.810 --> 00:01:52.990
it, is basically just going to be a fancy
for loop with some if statements in it.

29
00:01:52.990 --> 00:01:57.450
Okay, so we are not going to define and

30
00:01:57.450 --> 00:02:01.770
handle requests anymore because
that's being done for us by Express.

31
00:02:01.770 --> 00:02:04.930
But we need we do need
to configure Express so

32
00:02:04.930 --> 00:02:08.840
that it knows what routes we wanna use.

33
00:02:08.840 --> 00:02:14.700
So, we are going to do that by
defining routes for Express.

34
00:02:14.700 --> 00:02:24.209
I'm going to create a function
called define routes.

35
00:02:27.175 --> 00:02:30.160
&gt;&gt; Kyle Simpson: We'll actually move
this stuff probably into there.

36
00:02:35.531 --> 00:02:39.770
&gt;&gt; Kyle Simpson: And then we'll just
call that defineRoutes function.

37
00:02:41.360 --> 00:02:43.340
So, that's kind of like
the placeholder for

38
00:02:43.340 --> 00:02:47.100
our handle request and
it's the placeholder for

39
00:02:47.100 --> 00:02:50.780
our node's static alias, cuz we're
gonna be defining all these routes.

40
00:02:50.780 --> 00:02:53.520
And just for hint's sake, so
that it's easier for copy and

41
00:02:53.520 --> 00:02:56.290
pasting, these are the alias

42
00:02:56.290 --> 00:03:00.050
routes that we set up previously when
we were using node's static alias.

43
00:03:00.050 --> 00:03:03.510
We're going to need to do
the equivalent of those with express.

44
00:03:03.510 --> 00:03:05.430
So how do we do that?

45
00:03:05.430 --> 00:03:12.450
Well first off we have to tell app,
which is again it's our function object.

46
00:03:12.450 --> 00:03:16.610
But we've got to tell it
what routes to set up.

47
00:03:16.610 --> 00:03:18.550
And we do that by defining,

48
00:03:18.550 --> 00:03:23.180
in express.js terms, we do that by
defining something called a middleware.

49
00:03:23.180 --> 00:03:27.790
And that's a fancy way of basically just
saying a function that gets called if

50
00:03:27.790 --> 00:03:31.690
the incoming request matches
some particular criteria.

51
00:03:31.690 --> 00:03:34.670
So we're gonna set up a couple of
different middlewares here that

52
00:03:34.670 --> 00:03:37.340
are the equivalent of these
routes that we were handling.

53
00:03:47.025 --> 00:03:51.065
&gt;&gt; Kyle Simpson: So
first let's handle our API endpoint.

54
00:03:51.065 --> 00:03:55.511
You recall that we had,
we wanted to handle our API endpoint.

55
00:03:55.511 --> 00:04:02.680
Let's call app.get, that's how we tell it
that we wanna handle inbound get requests.

56
00:04:02.680 --> 00:04:05.920
And we're gonna give it a URL,
in this case, it's gonna be a string,

57
00:04:05.920 --> 00:04:08.110
we could have also done
a regular expression.

58
00:04:08.110 --> 00:04:10.460
Remember we called it get-records.

59
00:04:10.460 --> 00:04:14.841
And if an incoming request matches
that we're going to receive req and

60
00:04:14.841 --> 00:04:20.561
res
&gt;&gt; Kyle Simpson: And we want for

61
00:04:20.561 --> 00:04:25.635
this route to do exactly the same
thing as it was doing in ex5,

62
00:04:25.635 --> 00:04:28.870
which was we were getting the records.

63
00:04:30.930 --> 00:04:33.800
So I'm gonna make this an async
function just to be safe.

64
00:04:33.800 --> 00:04:38.610
We're gonna get the records from,

65
00:04:38.610 --> 00:04:41.496
get all records, and

66
00:04:41.496 --> 00:04:46.800
then we're going to res.writeHead.

67
00:05:14.737 --> 00:05:20.257
&gt;&gt; Kyle Simpson: That's
basically the exact

68
00:05:20.257 --> 00:05:26.010
same code that we did in EX5.

69
00:05:27.060 --> 00:05:34.730
And there are a whole wide range
of plugins that express provides.

70
00:05:34.730 --> 00:05:38.200
And I know that there are a couple
of out a couple of them out there,

71
00:05:38.200 --> 00:05:42.520
which specifically give you a little
bit of syntactic sugar for doing, say,

72
00:05:42.520 --> 00:05:44.140
a JSON response like this.

73
00:05:44.140 --> 00:05:48.070
You don't have to come up with your
own content type header or whatever.

74
00:05:48.070 --> 00:05:52.730
But what you're gonna find with express
is that what ships out of the box,

75
00:05:52.730 --> 00:05:54.530
even though there's a ton of dependencies,

76
00:05:54.530 --> 00:05:59.110
what ships out of the box doesn't even
really do some of these basic things.

77
00:05:59.110 --> 00:06:02.772
You end up having to go searching
around the ecosystem for

78
00:06:02.772 --> 00:06:05.600
somebody having written
a plugin to do XYZ.

79
00:06:05.600 --> 00:06:09.625
So, you end up using Express plus
a variety of Express plugins for

80
00:06:09.625 --> 00:06:10.950
doing these things.

81
00:06:10.950 --> 00:06:13.290
And just to save time in
terms of our learning,

82
00:06:13.290 --> 00:06:15.510
we're just gonna end up repeating things.

83
00:06:15.510 --> 00:06:20.495
But the point I want you to get here is
that instead of writing an if statement

84
00:06:20.495 --> 00:06:25.100
somewhere, we declaratively state
the route by calling app.get.

85
00:06:25.100 --> 00:06:29.373
And Express will internally match
to make sure that any get methods

86
00:06:29.373 --> 00:06:31.900
with that URL will call this function.

