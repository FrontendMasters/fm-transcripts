WEBVTT

1
00:00:00.590 --> 00:00:05.141
&gt;&gt; Kyle Simpson: So now that we've written
our child process, your final exercise

2
00:00:05.141 --> 00:00:10.682
here, and you're gonna have to put on your
thinking caps to figure this one out.

3
00:00:10.682 --> 00:00:15.481
What you're going to be doing is
trying to run your child process,

4
00:00:15.481 --> 00:00:17.966
check to see if it was successful,

5
00:00:17.966 --> 00:00:22.440
and then wait 1,000 milliseconds and
then try it again.

6
00:00:22.440 --> 00:00:27.910
So we basically just wanna keep running
by spinning up a child process.

7
00:00:27.910 --> 00:00:33.390
And actually, eventually we wanna be able
to spin up multiple child processes.

8
00:00:33.390 --> 00:00:38.028
So you're gonna want to have essentially,
I'll uncomment this.

9
00:00:38.028 --> 00:00:42.157
You're gonna wanna essentially
have a while (true) loop, so

10
00:00:42.157 --> 00:00:46.450
that it basically runs forever
until somebody stops the program.

11
00:00:47.560 --> 00:00:53.496
And inside your while (true) loop,
you're gonna wanna have a for loop.

12
00:00:53.496 --> 00:00:57.644
And that for loop is gonna loop up to
the number of MAX_CHILDREN, and for

13
00:00:57.644 --> 00:01:01.384
each iteration of it,
it's going to spin off new child process,

14
00:01:01.384 --> 00:01:05.140
you're gonna spin off five,
or 10, or 20 of these.

15
00:01:05.140 --> 00:01:08.655
But the trick is for
each of these child processes,

16
00:01:08.655 --> 00:01:11.282
you need to listen to their exit code.

17
00:01:11.282 --> 00:01:14.023
You're not gonna be doing
a console statement, but

18
00:01:14.023 --> 00:01:17.025
you need to be checking their
exit code to see if it's 0.

19
00:01:18.300 --> 00:01:23.330
And only if all of the children that
you just spun off in this particular

20
00:01:23.330 --> 00:01:28.840
iteration return a 0,
should you mark that as a success.

21
00:01:28.840 --> 00:01:37.435
So for example,
you can say process.stdout.write, trying.

22
00:01:49.457 --> 00:01:53.542
&gt;&gt; Kyle Simpson: And then you're
going to either print success with

23
00:01:53.542 --> 00:01:56.687
a consoled.log statement down here.

24
00:01:56.687 --> 00:02:02.190
You're gonna say,
console.log("success") if all five or

25
00:02:02.190 --> 00:02:08.701
10 of those were able to succeed, or
a failure if one or more of them failed.

26
00:02:08.701 --> 00:02:12.993
And then you're gonna want to, and
we have the delay function here,

27
00:02:12.993 --> 00:02:15.879
you're gonna want to do in a wait and
delay by,

28
00:02:15.879 --> 00:02:21.070
let's just say every 500 milliseconds
we'll retry against the server.

29
00:02:21.070 --> 00:02:26.160
So, your task is to figure out
how do I set up this for loop so

30
00:02:26.160 --> 00:02:30.490
that it can keep making
sets of these children, and

31
00:02:30.490 --> 00:02:35.180
how do I collect all of their results and
figure out if all of them finished.

32
00:02:35.180 --> 00:02:39.828
And your hint is that we
earlier on talked about

33
00:02:39.828 --> 00:02:44.607
a way of turning event
handlers into promises.

34
00:02:44.607 --> 00:02:47.643
And if you were to collect
every group of promises and

35
00:02:47.643 --> 00:02:51.231
then check to see if all those
promises succeeded correctly,

36
00:02:51.231 --> 00:02:55.460
then you would be able to know if
all of your children finished.

37
00:02:55.460 --> 00:02:58.580
So, we'll take about ten minutes or
so on this.

38
00:02:58.580 --> 00:03:02.700
It's a little tricky to figure out the
mechanics but try your hand at spinning

39
00:03:02.700 --> 00:03:07.110
off multiple children, and then we'll
come back and talk about this solution.

