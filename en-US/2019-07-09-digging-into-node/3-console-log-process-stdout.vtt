WEBVTT

1
00:00:00.000 --> 00:00:03.699
&gt;&gt; Kyle Simpson: When I when I want
to write system automation scripts

2
00:00:03.699 --> 00:00:07.460
of any sort,
command line scripts of any sort?

3
00:00:07.460 --> 00:00:10.892
My go-to is to write it in JavaScript and
run it with Node.

4
00:00:10.892 --> 00:00:13.960
So that's where we're
gonna our workshop today,

5
00:00:13.960 --> 00:00:16.756
is how do I run Node in
that sort of enviroment?

6
00:00:16.756 --> 00:00:20.973
And then we will progressively move to
bigger and bigger things, like listening

7
00:00:20.973 --> 00:00:25.200
for web requests, and serving up files,
and those other more exciting things.

8
00:00:25.200 --> 00:00:26.874
But we're gonna start there, and

9
00:00:26.874 --> 00:00:30.740
we're actually gonna start even
deeper than that in the stack.

10
00:00:30.740 --> 00:00:31.874
So to dive in,

11
00:00:31.874 --> 00:00:37.750
I want to make sure you all have ex1.js
from your exercises folder open.

12
00:00:37.750 --> 00:00:41.040
And you should see that there is literally
nothing but a code comment here.

13
00:00:41.040 --> 00:00:43.111
We're gonna write our
very first Node program.

14
00:00:43.111 --> 00:00:46.490
If you're listening to this, and
you've never written a Node program?

15
00:00:46.490 --> 00:00:50.030
We're about to fix that, cuz you're
about to write your first Node program.

16
00:00:50.030 --> 00:00:52.676
So before we can even
write a Node program,

17
00:00:52.676 --> 00:00:55.430
we have to ask ourselves the question.

18
00:00:55.430 --> 00:00:59.330
How am I going to get information
into my program, in some way?

19
00:00:59.330 --> 00:01:02.610
But even more importantly than that,
how am I gonna get information out?

20
00:01:04.020 --> 00:01:06.819
And I said that Node is all about I/O,

21
00:01:06.819 --> 00:01:10.680
Node is all about modeling
I/O in an efficient way.

22
00:01:10.680 --> 00:01:15.490
Which means we need to understand I/O at a
deeper level than you're perhaps used to.

23
00:01:16.890 --> 00:01:22.334
So how could I do the canonical
hello-world of JavaScript programming,

24
00:01:22.334 --> 00:01:24.016
of Node programming?

25
00:01:24.016 --> 00:01:28.727
Well, you probably know in JavaScript,
that we can do something like console.log,

26
00:01:28.727 --> 00:01:31.900
and you could type in hello
World in a console.log.

27
00:01:31.900 --> 00:01:36.880
Before we even run this program,
however, I want to ask the question,

28
00:01:36.880 --> 00:01:40.210
how is that gonna get
printed out to the screen?

29
00:01:40.210 --> 00:01:42.960
A lot of us just take that stuff for
granted.

30
00:01:42.960 --> 00:01:47.100
But if you're going to write Node,
and do so well, and

31
00:01:47.100 --> 00:01:52.330
use the system to its most advantage,
and be most efficient with it?

32
00:01:52.330 --> 00:01:55.563
I think you need to understand
something about how Node connects to

33
00:01:55.563 --> 00:01:57.920
the environment around it.

34
00:01:57.920 --> 00:02:01.230
So we're gonna go even deeper
than just an API, console.log.

35
00:02:01.230 --> 00:02:07.568
We need to understand a standard for
I/O and system integration,

36
00:02:07.568 --> 00:02:13.700
system- level task calling,
called POSIX, P-O-S-I-X.

37
00:02:13.700 --> 00:02:16.884
You Google around for that, you'll
find a lot of information about that.

38
00:02:16.884 --> 00:02:19.884
I'm sure I'm not even gonna
be completely accurate on it,

39
00:02:19.884 --> 00:02:22.750
because I'm not a Unix
programmer from the 1970s.

40
00:02:22.750 --> 00:02:27.718
But I can tell you that POSIX is
essentially the way that C-style

41
00:02:27.718 --> 00:02:32.410
programs integrate with
Linux-style operating systems.

42
00:02:32.410 --> 00:02:34.166
So when we talk about POSIX,

43
00:02:34.166 --> 00:02:39.970
one of the major things that we're talking
about is the standard I/O subsystem.

44
00:02:39.970 --> 00:02:47.660
Standard I/O is a set of three streams
that model input and output to a program.

45
00:02:47.660 --> 00:02:53.364
If you've ever written a C program, for
example, you might remember reading and

46
00:02:53.364 --> 00:02:57.098
writing from file descriptors like 0,
1, and 2.

47
00:02:57.098 --> 00:03:01.945
That's the POSIX subsystem being
exposed to your C program by way

48
00:03:01.945 --> 00:03:05.745
of these file identifiers,
or file descriptors.

49
00:03:05.745 --> 00:03:09.649
0 being stdout, 1 being stdin, I'm sorry,

50
00:03:09.649 --> 00:03:14.250
0 being stdin, 1 being stdout,
and 2 being stderr.

51
00:03:14.250 --> 00:03:18.981
So we have these file descriptors
that reference input, output, and

52
00:03:18.981 --> 00:03:21.800
a second channel of output called error.

53
00:03:22.950 --> 00:03:25.903
And we're not writing C programs here,
so it's not particularly interesting,

54
00:03:25.903 --> 00:03:26.900
how you do it in a C program.

55
00:03:26.900 --> 00:03:30.017
But how would we access,
at a fundamental level,

56
00:03:30.017 --> 00:03:34.050
those I/O streams that
are exposed to our Node program?.

57
00:03:34.050 --> 00:03:38.866
Cuz Node made the choice to
expose most of the system

58
00:03:38.866 --> 00:03:43.470
connections through
a POSIX-like interface.

59
00:03:43.470 --> 00:03:47.676
So it'll be familiar to you, if you've
ever done POSIX-style programming in some

60
00:03:47.676 --> 00:03:51.200
other language,
you'll find bits of familiarity here.

61
00:03:51.200 --> 00:03:52.699
How do we access those, well,

62
00:03:52.699 --> 00:03:56.230
the main touchpoint that we're gonna
access them on is called process.

63
00:03:56.230 --> 00:04:00.630
This is an object that's available
in all of your Node programs.

64
00:04:00.630 --> 00:04:04.745
And they hang a bunch of stuff
off of process that are these

65
00:04:04.745 --> 00:04:08.100
connections to your
overall hosting system.

66
00:04:08.100 --> 00:04:12.330
By the way, I keep saying this I/O thing
because we have to deal with POSIX.

67
00:04:12.330 --> 00:04:17.017
You should be aware that the reason we
have Node choosing to do it with POSIX,

68
00:04:17.017 --> 00:04:20.680
but we don't write something
like process in the browser,

69
00:04:20.680 --> 00:04:24.806
is because JavaScript does not
have anything in the spec for I/O.

70
00:04:24.806 --> 00:04:29.440
console.log is not in the JavaScript spec.

71
00:04:29.440 --> 00:04:33.351
There's actually a secondary spec for
console, but not everybody adheres to it.

72
00:04:33.351 --> 00:04:37.980
But it's not in the JavaScript spec,
JavaScript is agnostic to I/O.

73
00:04:37.980 --> 00:04:40.786
And I actually think that's one of
the reasons why JavaScript has been so

74
00:04:40.786 --> 00:04:41.343
successful.

75
00:04:41.343 --> 00:04:46.100
It's been so much easier for
JavaScript to adapt to other environments,

76
00:04:46.100 --> 00:04:48.180
like smart watches and robots.

77
00:04:48.180 --> 00:04:51.802
And light bulbs, and refrigerators,
and TVs, and computers, and

78
00:04:51.802 --> 00:04:54.500
every other kind of device
that you could imagine.

79
00:04:54.500 --> 00:04:57.135
Because the language
doesn't make very many

80
00:04:57.135 --> 00:05:00.480
assumptions about how
communication's gonna happen.

81
00:05:00.480 --> 00:05:01.478
It's up to the environment to decide that.

82
00:05:01.478 --> 00:05:04.567
Since Node was originally designed,

83
00:05:04.567 --> 00:05:09.110
and likely going to be run
in those POSIX environments?

84
00:05:09.110 --> 00:05:13.233
It makes an awful lot of sense that they
would choose to expose the I/O to our

85
00:05:13.233 --> 00:05:15.530
programs through that POSIX interface.

86
00:05:15.530 --> 00:05:18.616
In the browser,
that's not a POSIX environment,

87
00:05:18.616 --> 00:05:23.770
you're not dealing with processes, and
process IDs, and that kind of stuff.

88
00:05:23.770 --> 00:05:26.363
So when you do console.log, and
it's running in the browser,

89
00:05:26.363 --> 00:05:28.390
the browser chose to expose
it in a different way.

90
00:05:28.390 --> 00:05:32.900
It's just a direct connection over
to the developer tools, right?

91
00:05:32.900 --> 00:05:37.530
And that's a difference based on
the hosting environment exposing the I/O.

92
00:05:37.530 --> 00:05:41.434
So we're in Node here, and
we've been exposed to POSIX interface, and

93
00:05:41.434 --> 00:05:43.920
we said there are standard I/O streams.

94
00:05:43.920 --> 00:05:52.080
So we can say process.stdout to access
the stream for standard output.

95
00:05:52.080 --> 00:05:56.941
And streams are a first-class citizen,
they are an actual kind of data structure

96
00:05:56.941 --> 00:06:01.980
in Node that we're gonna get real
familiar with, as we go throughout today.

97
00:06:01.980 --> 00:06:05.749
So the first exposure
that we have to it is,

98
00:06:05.749 --> 00:06:11.420
if you want to write some content
to a stream, you call .write.

99
00:06:11.420 --> 00:06:17.561
So we could have said console.log, or
we could have said process.stdout.write.

100
00:06:17.561 --> 00:06:20.466
Now, I'm gonna have both of these here,
but

101
00:06:20.466 --> 00:06:26.216
let's first run the console.log statement,
comment out the stdout for just a moment.

102
00:06:26.216 --> 00:06:28.992
Either one of these,
they're gonna do something very similar,

103
00:06:28.992 --> 00:06:30.540
which is send some output.

104
00:06:30.540 --> 00:06:36.267
Switch over to your console,
and run node ex1.js,

105
00:06:36.267 --> 00:06:41.240
and you see the hello
world being printed out.

106
00:06:41.240 --> 00:06:44.394
Now, let's go back to that code, and

107
00:06:44.394 --> 00:06:50.870
let's comment out the stdout.write
version of it, and then rerun it.

108
00:06:50.870 --> 00:06:54.774
Okay, so we want to compare,
what happened when I did console.log,

109
00:06:54.774 --> 00:06:57.760
and what happens when I
do process.stdout.write?

110
00:06:57.760 --> 00:07:02.443
And if we run this differently,
you should notice a slight difference,

111
00:07:02.443 --> 00:07:08.100
which is that the process.stdout.write
output did not include a trailing newline.

112
00:07:08.100 --> 00:07:12.609
Which is why it ended up right here,
just continuing my command line

113
00:07:12.609 --> 00:07:16.500
prompt right after that,
there was no trailing newline.

114
00:07:16.500 --> 00:07:21.663
So one way you might think of it is,
you might think of it as console.log is

115
00:07:21.663 --> 00:07:27.800
a wrapper around process.stdout.write
that throws on a trailing newline.

116
00:07:27.800 --> 00:07:32.348
That’s not actually accurate,
the console.log is doing other things,

117
00:07:32.348 --> 00:07:36.620
many other things besides simply
calling process.stdout.write.

118
00:07:36.620 --> 00:07:40.638
But in the case of a very simple string,
we could sort of think of it in that way.

119
00:07:40.638 --> 00:07:46.053
It's kind of the equivalent of if we'd
put a trailing newline in our output,

120
00:07:46.053 --> 00:07:47.730
before sending it out.

121
00:07:49.450 --> 00:07:54.316
The reason why I wanna make the point
about accessing these output streams in

122
00:07:54.316 --> 00:07:59.106
a very bare way, is because the whole
point of Node using this asynchronous

123
00:07:59.106 --> 00:08:03.310
I/O model is so that I/O can
happen as efficiently as possible.

124
00:08:03.310 --> 00:08:08.426
And the least possible efficient way for
I/O to happen is for

125
00:08:08.426 --> 00:08:13.262
you to print a character string
directly to some stream.

126
00:08:13.262 --> 00:08:16.835
So process.stdout.write,
with a character string like that,

127
00:08:16.835 --> 00:08:19.847
is the least efficient way for
that to possibly happen.

128
00:08:19.847 --> 00:08:24.145
Because it has to go through some layers
of translation to end at the host

129
00:08:24.145 --> 00:08:28.945
environment, that is, our shell
environment that we're running things in,

130
00:08:28.945 --> 00:08:31.255
and actually end up getting printed.

131
00:08:31.255 --> 00:08:32.886
We don't see that detail, but

132
00:08:32.886 --> 00:08:37.225
there's layers of abstraction where that
stuff is being converted or whatever.

133
00:08:37.225 --> 00:08:41.430
So if we were to, for example,
have a stream that already had

134
00:08:41.430 --> 00:08:46.129
the binary bits of information for
the hello world string in it, and

135
00:08:46.129 --> 00:08:50.390
we did .write with a binary stream,
with a buffer?

136
00:08:50.390 --> 00:08:55.068
Then it would go much more efficiently,
directly through those subsystems, and

137
00:08:55.068 --> 00:08:58.610
then still get printed out as
characters in our shell, okay?

138
00:08:58.610 --> 00:09:02.110
So console.log is a developer convenience,
but under the covers,

139
00:09:02.110 --> 00:09:05.130
there's a lot more detail
about how things are going.

140
00:09:05.130 --> 00:09:08.818
And as we get later into our exercises,
we're gonna want to be able to efficiently

141
00:09:08.818 --> 00:09:11.930
write lots of information to a stream,
even something like stdout.

142
00:09:11.930 --> 00:09:16.787
And we're going to want to be doing so
at the at the sort of binary buffer level,

143
00:09:16.787 --> 00:09:19.960
rather than in encoded character strings,
okay?

144
00:09:19.960 --> 00:09:24.464
So that's our first kind of lesson here,
is that we're dealing with standard

145
00:09:24.464 --> 00:09:29.185
output, that's kind of wrapped in
a developer convenience called console.log

