WEBVTT

1
00:00:00.090 --> 00:00:04.910
&gt;&gt; Kyle Simpson: So we're gonna use the
fetch command and we're gonna fetch from,

2
00:00:07.790 --> 00:00:11.022
&gt;&gt; Kyle Simpson: /get-records, is the URL,

3
00:00:11.022 --> 00:00:15.730
and that's gonna give us a result.

4
00:00:15.730 --> 00:00:23.360
And if that result and
comes back correctly and it’s okay.

5
00:00:23.360 --> 00:00:24.700
There’s a couple of
different ways to do this.

6
00:00:24.700 --> 00:00:27.820
You could either say res.okay
which just tells you whether or

7
00:00:27.820 --> 00:00:32.860
not it was successful or you could look at
the specific status code if you wanted to.

8
00:00:32.860 --> 00:00:37.720
I used to do the status code cuz I cared
a little bit more specifically but

9
00:00:37.720 --> 00:00:40.400
now I kind of just tend to do res.okay.

10
00:00:40.400 --> 00:00:44.370
And if that was true,
we still don't have the full response yet.

11
00:00:44.370 --> 00:00:48.050
This is something interesting about
the way fetch works, cuz fetch

12
00:00:49.430 --> 00:00:54.690
first does a request, and then you have
to wait for the body of the response.

13
00:00:54.690 --> 00:00:59.410
And that allows you to basically do some
streaming processing on a response body,

14
00:00:59.410 --> 00:01:00.590
if it were large.

15
00:01:00.590 --> 00:01:06.660
So we only care about a json response,
so we're just simply gonna say,

16
00:01:06.660 --> 00:01:12.400
records = res, no,
we're gonna await res.json().

17
00:01:12.400 --> 00:01:17.928
That takes the body and parses it as
json and gives us that json object back.

18
00:01:17.928 --> 00:01:25.244
So if records and
records.length is greater than 0,

19
00:01:25.244 --> 00:01:32.250
then what we wanna do is
call renderRecords with it.

20
00:01:34.579 --> 00:01:42.665
&gt;&gt; Kyle Simpson: We didn't change
anything about our server,

21
00:01:42.665 --> 00:01:47.960
so I'll leave it running.

22
00:01:47.960 --> 00:01:52.610
Gonna come over here, and I'm gonna
reload to get the new JavaScript.

23
00:01:52.610 --> 00:01:57.990
And then we'll cross our fingers and
hope that when we run fetch records,

24
00:01:57.990 --> 00:02:01.550
it fetched the JSON, printed the results.

25
00:02:01.550 --> 00:02:06.440
I'm gonna go back and
make one last change to our

26
00:02:06.440 --> 00:02:10.680
server now that we're seeing results and
they came back almost immediately.

27
00:02:10.680 --> 00:02:14.400
Let's simulate that the results
might be coming back

28
00:02:14.400 --> 00:02:19.150
a little bit more slowly if we were
talking to a really far away server.

29
00:02:19.150 --> 00:02:25.266
So in our results here I'm going to,
if you see right here, I've already got,

30
00:02:25.266 --> 00:02:30.310
remember util.promisify,
it makes a promise from a callback.

31
00:02:30.310 --> 00:02:35.160
I'm just gonna artificially
insert a delay of one second into

32
00:02:35.160 --> 00:02:38.350
our response from the database.

33
00:02:38.350 --> 00:02:41.810
So I'm gonna just say await delay(1000).

34
00:02:48.817 --> 00:02:53.640
&gt;&gt; Kyle Simpson: We're only
gonna delay on the API.

35
00:02:53.640 --> 00:02:55.270
We're not gonna delay on
the static file serving.

36
00:02:59.520 --> 00:03:02.260
&gt;&gt; Kyle Simpson: I'll kill the server and
start it one last time.

37
00:03:06.545 --> 00:03:09.948
&gt;&gt; Kyle Simpson: And refresh, and
then we'll see that when I click

38
00:03:09.948 --> 00:03:14.580
the Fetch Records, it takes a full
second before we get a response.

39
00:03:16.330 --> 00:03:19.220
Simulates a little bit more like
what it would be on a real website.

40
00:03:21.503 --> 00:03:26.312
&gt;&gt; Kyle Simpson: Okay, any questions about
how we've handled setting up a basic

41
00:03:26.312 --> 00:03:30.140
HTTP server and
doing static file serving from it,

42
00:03:30.140 --> 00:03:33.359
as well as handling a simple API endpoint?

43
00:03:34.620 --> 00:03:36.690
Yeah.
&gt;&gt; Student: There was a question with,

44
00:03:36.690 --> 00:03:42.280
if you have a lot of data,
is JSON.stringify okay or

45
00:03:42.280 --> 00:03:45.440
would you stream that or what would you?

46
00:03:45.440 --> 00:03:51.679
&gt;&gt; Kyle Simpson: It depends on what we
mean by a lot, so if it was upwards of

47
00:03:52.990 --> 00:03:57.240
five to ten megabytes of JSON,
I would probably still stringify it.

48
00:03:57.240 --> 00:04:00.010
If we were talking about
hundreds of megabytes or

49
00:04:00.010 --> 00:04:04.470
gigabytes of data,
then I would probably look for streaming.

50
00:04:04.470 --> 00:04:11.369
And it turns out there are actually
streaming JSON serializers and parsers.

51
00:04:12.410 --> 00:04:13.930
They are,

52
00:04:13.930 --> 00:04:18.990
it's not perfect because the JSON format
is not exactly designed for streaming.

53
00:04:18.990 --> 00:04:23.750
So there's some convention
involved in how you search up and

54
00:04:23.750 --> 00:04:25.780
how you have to chunk things up.

55
00:04:25.780 --> 00:04:29.832
But I would probably, if I was doing a
really, really large chunk of JSON getting

56
00:04:29.832 --> 00:04:33.706
sent to the server, I mean to the browser,
anything over say ten megabytes or

57
00:04:33.706 --> 00:04:36.950
something I will definitely
probably start streaming that up.

58
00:04:39.572 --> 00:04:44.505
&gt;&gt; Kyle Simpson: Otherwise,
the chunking that the HTML

59
00:04:44.505 --> 00:04:51.140
protocol already has is
probably good enough.

60
00:04:51.140 --> 00:04:52.993
It's probably only for really,

61
00:04:52.993 --> 00:04:57.706
really large payloads that you would wanna
step in and do your own sort of streaming.

62
00:04:57.706 --> 00:05:02.468
And maybe even would stream over
something like a WebSocket protocol

63
00:05:02.468 --> 00:05:06.420
in that case since it might be open for
a really long time.

64
00:05:06.420 --> 00:05:11.280
So I might open up a WebSocket protocol
and keep that persistent for a while, or

65
00:05:11.280 --> 00:05:11.860
something like that.

