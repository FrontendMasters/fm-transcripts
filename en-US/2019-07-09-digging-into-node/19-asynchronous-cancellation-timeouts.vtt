WEBVTT

1
00:00:00.060 --> 00:00:04.620
&gt;&gt; Kyle Simpson: One of the problems
with using promises to model asynchrony

2
00:00:04.620 --> 00:00:07.220
is that they're kind of
a black box from the outside.

3
00:00:07.220 --> 00:00:10.850
Once you have a promise,
you have no way of telling process file or

4
00:00:10.850 --> 00:00:12.642
even really the streams per se.

5
00:00:12.642 --> 00:00:15.870
You have no way of telling them
stop doing what you're doing.

6
00:00:15.870 --> 00:00:19.870
We've got a timeout that has occurred and
I don't want you to do that anymore.

7
00:00:19.870 --> 00:00:24.260
So for that reason,
there's a tool that I've built

8
00:00:24.260 --> 00:00:27.400
that allows us to do asynchrony but
with cancelation.

9
00:00:27.400 --> 00:00:29.320
And we're gonna pull in that tool and

10
00:00:29.320 --> 00:00:31.910
use it in the modeling of
what we're doing here.

11
00:00:31.910 --> 00:00:36.373
We're gonna pull in a tool called CAF,
C-A-F.

12
00:00:38.522 --> 00:00:40.979
&gt;&gt; Kyle Simpson: Again,
that package is already installed for you.

13
00:00:40.979 --> 00:00:45.074
If I come over here to a browser,
if we look up CAF,

14
00:00:45.074 --> 00:00:49.284
you'll see it stands for
Cancelable Async Flows.

15
00:00:52.245 --> 00:00:54.029
&gt;&gt; Kyle Simpson: And
here's all the documentation for it.

16
00:00:54.029 --> 00:00:58.961
Essentially, it allows you to
turn a generator into something

17
00:00:58.961 --> 00:01:02.520
that looks like an async function.

18
00:01:02.520 --> 00:01:05.310
But that generator uses
cancelation tokens so

19
00:01:05.310 --> 00:01:10.490
that you can cancel it if it's stuck or
taking too long, you can use it to cancel.

20
00:01:10.490 --> 00:01:15.470
So that's what we're gonna do
is use CAF with generator style

21
00:01:15.470 --> 00:01:19.900
instead of with async function style.

22
00:01:19.900 --> 00:01:22.050
So the only things that I
really need to change here,

23
00:01:22.050 --> 00:01:24.530
I'm gonna change process
file into a generator.

24
00:01:26.620 --> 00:01:31.486
And process file is going to
receive as its first input,

25
00:01:31.486 --> 00:01:36.880
it's going to receive the signal for
the cancelation token.

26
00:01:40.904 --> 00:01:45.392
&gt;&gt; Kyle Simpson: And
then we need to adapt process file so

27
00:01:45.392 --> 00:01:51.513
here I will say processFile
= CAF(processFile).

28
00:01:54.627 --> 00:01:57.306
&gt;&gt; Kyle Simpson: That's the magic
that turns it into a thing

29
00:01:57.306 --> 00:01:59.921
that still looks like an async function.

30
00:02:03.350 --> 00:02:04.288
&gt;&gt; Kyle Simpson: But when we call it,

31
00:02:04.288 --> 00:02:07.780
we're now gonna be calling it with
two inputs instead of with one.

32
00:02:07.780 --> 00:02:11.340
We're gonna be calling it with the
cancelation token as the first input, and

33
00:02:11.340 --> 00:02:13.990
then in this case,
the stream is the second input.

34
00:02:13.990 --> 00:02:17.395
So let's make a cancelation token to use.

35
00:02:31.862 --> 00:02:33.354
&gt;&gt; Kyle Simpson: I'll call it tooLong.

36
00:02:33.354 --> 00:02:39.247
We'll just say CAF.timeout, and I'll give
it a really short amount of time like,

37
00:02:39.247 --> 00:02:43.320
say 3 milliseconds just for
our illustration purposes.

38
00:02:43.320 --> 00:02:48.192
So this is gonna be a cancelation
token that fires its signal really,

39
00:02:48.192 --> 00:02:49.284
really quick.

40
00:02:49.284 --> 00:02:53.863
And we're gonna pass in the tooLong
cancelation token there.

41
00:02:56.703 --> 00:02:59.284
&gt;&gt; Kyle Simpson: I need to do the same
thing up here so I don't forget.

42
00:03:07.215 --> 00:03:08.063
&gt;&gt; Kyle Simpson: All right, so

43
00:03:08.063 --> 00:03:11.750
let's see what this does by just
canceling the process file.

44
00:03:11.750 --> 00:03:13.830
We're just saying listen, you're done.

45
00:03:13.830 --> 00:03:15.850
You don't need to do anything else.

46
00:03:19.135 --> 00:03:20.586
&gt;&gt; Kyle Simpson: And let me actually
give it a little message here

47
00:03:20.586 --> 00:03:21.210
like Took too long.

48
00:03:21.210 --> 00:03:28.794
This will be the custom message.

49
00:03:31.031 --> 00:03:35.679
&gt;&gt; Kyle Simpson: Uh-oh, I forgot we
gotta change any awaits back to yields.

50
00:03:35.679 --> 00:03:40.353
That was the other thing that we
needed to fix in our process file, so

51
00:03:40.353 --> 00:03:43.665
our await down here needs
to be a yield instead.

52
00:03:43.665 --> 00:03:47.349
That's the difference
between a generator and

53
00:03:47.349 --> 00:03:52.890
an async function is at the signature,
you use a star instead of async.

54
00:03:52.890 --> 00:03:56.943
And then for any place that you would
have said await you say yield, otherwise,

55
00:03:56.943 --> 00:03:58.708
they're pretty much identical.

56
00:04:01.183 --> 00:04:02.358
&gt;&gt; Kyle Simpson: Let's try that again.

57
00:04:04.980 --> 00:04:08.060
&gt;&gt; Kyle Simpson: So you notice that it did
fire our Took too long, which is great.

58
00:04:08.060 --> 00:04:11.220
We got notified that it had timed out, but

59
00:04:11.220 --> 00:04:14.870
it didn't stop the stream
processing from doing its work.

60
00:04:14.870 --> 00:04:19.260
It did allow us to tell process
file not to wait any longer,

61
00:04:19.260 --> 00:04:22.020
which is why we were able to
print that message right away.

62
00:04:22.020 --> 00:04:27.210
But it didn't actually stop the
asynchronous work, which is what we want.

63
00:04:27.210 --> 00:04:32.580
We want sort of a deeper cancelation
rather than a shallow cancelation.

64
00:04:32.580 --> 00:04:37.153
So to do that, we're gonna need
to take the cancelation token,

65
00:04:37.153 --> 00:04:40.128
which were provided via this parameter.

66
00:04:40.128 --> 00:04:42.759
We're gonna need to take that signal and
do something with it.

67
00:04:42.759 --> 00:04:44.943
We're gonna need to have that signal,

68
00:04:44.943 --> 00:04:48.500
tell us that we need to
stop the stream processing.

69
00:04:48.500 --> 00:04:52.760
So what I'm gonna do right
here is set up signal.

70
00:04:52.760 --> 00:04:57.330
Signal comes in with a promise on it
that is going to be rejected whenever

71
00:04:57.330 --> 00:05:00.720
the timeout has fired or
whenever the cancelation is fired.

72
00:05:00.720 --> 00:05:06.290
So this is how we're gonna know
that the timeout has occurred.

73
00:05:06.290 --> 00:05:10.060
And here's where we want to do
something to tell the streams,

74
00:05:10.060 --> 00:05:12.024
stop doing what you're doing.

75
00:05:20.967 --> 00:05:24.380
&gt;&gt; Kyle Simpson: So there's two steps that
we wanna do to tell the streams to stop.

76
00:05:24.380 --> 00:05:29.760
The first one is, we wanna undo
the last piping that occurred.

77
00:05:29.760 --> 00:05:34.554
So let me just actually move this down so
it's closer to what we can see.

78
00:05:40.194 --> 00:05:44.330
&gt;&gt; Kyle Simpson: What we wanna do is
unpipe so literally it's the same call.

79
00:05:44.330 --> 00:05:49.305
We're gonna say
outputStream.unpipe(targetStream).

80
00:05:51.920 --> 00:05:52.700
&gt;&gt; Kyle Simpson: In other words,

81
00:05:52.700 --> 00:05:56.439
we're basically saying that piping that
you were doing wherever you're out in

82
00:05:56.439 --> 00:05:59.190
the middle of that stops sending
more chunks of data to it.

83
00:05:59.190 --> 00:06:03.025
So it's like a removeEventListener
almost for this.

84
00:06:03.025 --> 00:06:04.571
We're saying unpipe it.

85
00:06:04.571 --> 00:06:08.960
And then for good measure because
the stream up to this point

86
00:06:08.960 --> 00:06:13.696
might have a big old long line of things
that are processing through the and stuff.

87
00:06:13.696 --> 00:06:14.750
What we wanna go ahead and

88
00:06:14.750 --> 00:06:18.560
do is tell the rest of the stream,
you don't need to do any other work.

89
00:06:18.560 --> 00:06:21.050
So we're gonna call
destroy on output stream.

90
00:06:21.050 --> 00:06:24.070
And that is the effect
of basically pushing

91
00:06:24.070 --> 00:06:27.630
that signal all the way back up through
the other streams and telling all of them

92
00:06:27.630 --> 00:06:30.900
there's no more piping to happen because
there's no more target for it to go to.

93
00:06:31.930 --> 00:06:36.141
So we call outStream.destroy after we
call the unpipe and that will have

94
00:06:36.141 --> 00:06:40.570
the effect of basically killing that
stream processing wherever it's at.

95
00:06:49.704 --> 00:06:55.250
&gt;&gt; Kyle Simpson: So now when we run this,
we just get the Took too long message.

96
00:06:55.250 --> 00:06:58.200
It doesn't print the HELLO WORLD
because it was able to abort it.

97
00:06:58.200 --> 00:07:04.611
And if I go back and change that
timeout to be just slightly too longer,

98
00:07:04.611 --> 00:07:10.368
if I make it 13 instead of 3,
we should see it just go ahead and

99
00:07:10.368 --> 00:07:14.297
print HELLO WORLD and not print, uh-oh.

100
00:07:22.629 --> 00:07:30.737
&gt;&gt; Kyle Simpson: Took too long,
&gt;&gt; Kyle Simpson: Maybe

101
00:07:30.737 --> 00:07:32.164
we need it slightly longer.

102
00:07:39.447 --> 00:07:40.500
&gt;&gt; Kyle Simpson: There we go.

103
00:07:40.500 --> 00:07:44.830
13 was just accidentally just
a brief moment too short.

104
00:07:44.830 --> 00:07:48.270
Okay, so you can see that we're able
to print out the contents of it.

105
00:07:48.270 --> 00:07:51.390
But now if I were to run it with lorem,

106
00:07:51.390 --> 00:07:54.516
we're gonna stop somewhere in
the middle of the lorem file.

107
00:07:54.516 --> 00:07:58.384
Cuz it's gonna be able to get through a
pretty good amount of the lorem file, but

108
00:07:58.384 --> 00:07:59.955
probably not the entire thing.

109
00:07:59.955 --> 00:08:02.835
So it stopped right there.

110
00:08:02.835 --> 00:08:07.025
Maybe I make it a little
bit shorter of a delay.

111
00:08:07.025 --> 00:08:11.130
Let's make that back down to 12.

112
00:08:11.130 --> 00:08:13.760
And you'll notice this time when it runs

113
00:08:13.760 --> 00:08:16.310
should stop in a different
location in the file.

114
00:08:17.690 --> 00:08:20.880
I wasn't able to get any of
it in that 12 milliseconds.

115
00:08:20.880 --> 00:08:23.576
Let's fiddle with it and
make it slightly longer then.

116
00:08:48.498 --> 00:08:50.326
&gt;&gt; Kyle Simpson: And there we
are stopping in a different place in it.

117
00:08:50.326 --> 00:08:53.067
So the longer that that
time not happening, again,

118
00:08:53.067 --> 00:08:57.571
you have to use your imagination imagining
we were processing a gigabyte sized file.

119
00:08:57.571 --> 00:09:01.180
Those timeouts would be like a minute or
five minutes or something like that.

120
00:09:01.180 --> 00:09:03.900
But the point is that you can
see that we're able to stop

121
00:09:03.900 --> 00:09:07.830
an asynchronous operation like a streaming
operation right in the middle of it,

122
00:09:07.830 --> 00:09:12.630
instead of continuing to consume
system resources unnecessarily.

123
00:09:12.630 --> 00:09:16.060
So that's a big deal.

124
00:09:16.060 --> 00:09:21.245
I think it's underutilized,
the idea of asynchronous cancelation.

125
00:09:21.245 --> 00:09:23.020
And this is one of
the points I wanna make.

126
00:09:23.020 --> 00:09:25.359
It's kinda the point of EX3.

127
00:09:25.359 --> 00:09:27.213
It's not just the streams interface.

128
00:09:27.213 --> 00:09:30.665
It's really all of
the asynchronous interfaces in

129
00:09:30.665 --> 00:09:35.446
Node.js are very,
&gt;&gt; Kyle Simpson: Optimistic.

130
00:09:35.446 --> 00:09:37.980
They're optimistic that
they're always gonna finish.

131
00:09:37.980 --> 00:09:42.100
Whenever we do a fs.readFile,
we're just assuming that's

132
00:09:42.100 --> 00:09:45.660
definitely gonna eventually open up
the file and give me the contents.

133
00:09:45.660 --> 00:09:49.590
But what about if it's on a network
mount and there's just a never

134
00:09:49.590 --> 00:09:53.870
ending delay of the network,
being down or something like that?

135
00:09:53.870 --> 00:09:57.700
Well, that's just gonna sit there and spin
forever and ever and hang up your program.

136
00:09:57.700 --> 00:10:00.656
So really all asynchrony
whether it's a database,

137
00:10:00.656 --> 00:10:04.687
whether it's a file system access,
network call, any sort of thing,

138
00:10:04.687 --> 00:10:07.913
even a stream operation like
what we're talking about,

139
00:10:07.913 --> 00:10:12.169
I think it makes sense to at least
consider, do I need some kind of timeout?

140
00:10:12.169 --> 00:10:15.676
And that was really the reason I
designed that CAF package was to make it

141
00:10:15.676 --> 00:10:19.481
a little bit easier to model the idea
of asynchronous cancelation with these

142
00:10:19.481 --> 00:10:20.618
cancelation tokens.

