WEBVTT

1
00:00:00.380 --> 00:00:04.670
&gt;&gt; Kyle Simpson: Now we're using
a synchronous form of this read file,

2
00:00:04.670 --> 00:00:08.880
because it's really easy to
use synchronous commands.

3
00:00:08.880 --> 00:00:13.160
But you probably know that one of
the things that Node was designed to be is

4
00:00:13.160 --> 00:00:16.310
asynchronous everywhere at
least as much as possible.

5
00:00:16.310 --> 00:00:21.240
That's not entirely true because
from the very beginning, Node had

6
00:00:21.240 --> 00:00:26.540
a synchronous require, so the truth is,
actually, that Node said,

7
00:00:26.540 --> 00:00:32.170
everything thatâ€™s not part of
the startup should be asynchronous.

8
00:00:32.170 --> 00:00:36.970
Well, in a command line script, everything
is part of the startup, basically.

9
00:00:36.970 --> 00:00:41.260
So technically it doesn't matter if we
stay synchronous, because the chances of

10
00:00:41.260 --> 00:00:46.080
you running thousands of
instances of your command line

11
00:00:46.080 --> 00:00:50.270
script all at the same time, all against
the same part of the file system, and

12
00:00:50.270 --> 00:00:52.919
blocking each other or whatever,
the chances of that are really low.

13
00:00:54.580 --> 00:00:59.046
So it would be okay for us if we were just
doing some quick and dirty scripting,

14
00:00:59.046 --> 00:01:00.845
to use the synchronous forms.

15
00:01:00.845 --> 00:01:04.444
But since we're gonna be doing lots of
other things throughout the rest of

16
00:01:04.444 --> 00:01:05.199
the exercise,

17
00:01:05.199 --> 00:01:09.350
we really want to get experience
with practicing asynchronous stuff.

18
00:01:09.350 --> 00:01:15.610
So if we take off the sync part, we're
now gonna be using the asynchronous form.

19
00:01:15.610 --> 00:01:20.220
And the asynchronous form of
readFile expects a callback.

20
00:01:21.360 --> 00:01:25.290
It's not gonna give us
our contents like that.

21
00:01:25.290 --> 00:01:27.110
It's going to expect a callback.

22
00:01:27.110 --> 00:01:32.906
So we can say onContents,
&gt;&gt; Kyle Simpson: And

23
00:01:32.906 --> 00:01:37.296
there's one other little nuance,
which is that Node for

24
00:01:37.296 --> 00:01:42.783
the most part uses a standard for
its callback signatures that the first

25
00:01:42.783 --> 00:01:47.821
parameter is always the error parameter,
typically named err.

26
00:01:48.860 --> 00:01:52.340
And we always need to check to make
sure that there wasn't an error, so

27
00:01:52.340 --> 00:01:57.330
we're gonna say if(err),
then we probably just want to pass

28
00:01:57.330 --> 00:02:01.350
that error directly along
to our print error handler.

29
00:02:04.220 --> 00:02:09.800
But error here is gonna be another buffer,

30
00:02:09.800 --> 00:02:13.440
so we wanna go ahead, I mean, it's gonna
be an object, so we wanna call ahead and

31
00:02:13.440 --> 00:02:17.370
call toString on it so that will actually
print something useful for the reader.

32
00:02:19.660 --> 00:02:23.720
And if it wasn't an error,
then we can write out thoser contents.

33
00:02:28.244 --> 00:02:33.050
&gt;&gt; Kyle Simpson: When we run it
with an existent file, no change.

34
00:02:33.050 --> 00:02:36.540
But now what happens if I give it
a file name that doesn't exist?

35
00:02:38.520 --> 00:02:39.928
Well, now we get an error message.

36
00:02:39.928 --> 00:02:43.816
It's not a great error message, but
it does at least tell us no such file or

37
00:02:43.816 --> 00:02:48.520
directory, it was trying to access
this file and it couldn't find it.

38
00:02:48.520 --> 00:02:50.329
So it's slightly more graceful handling.

