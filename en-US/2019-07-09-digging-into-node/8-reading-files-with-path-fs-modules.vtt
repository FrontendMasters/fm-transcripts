WEBVTT

1
00:00:00.040 --> 00:00:04.580
&gt;&gt; Kyle Simpson: So now that we know
we can specify something like a string.

2
00:00:04.580 --> 00:00:07.960
But since it's a file,
we wanna actually treat it as a file.

3
00:00:07.960 --> 00:00:10.910
And we know that we need a full path

4
00:00:10.910 --> 00:00:13.460
name if we're gonna do
something with this file.

5
00:00:13.460 --> 00:00:19.810
So let's pull in another built in
package from Node called path.

6
00:00:19.810 --> 00:00:25.800
Minimist was a user provided one and

7
00:00:25.800 --> 00:00:29.990
it would show up in the node modules
folder but path is just built into node.

8
00:00:29.990 --> 00:00:33.134
It's one of the many that's just built
into node and we can use for free.

9
00:00:33.134 --> 00:00:39.049
And path has a number of different
methods that are helpful for

10
00:00:39.049 --> 00:00:46.665
us, but in particular, the one that we
wanna look at if we were to say filepath,

11
00:00:46.665 --> 00:00:52.036
we say path.resolve and
then give it (arg.files).

12
00:00:52.036 --> 00:00:54.203
And then we'll print that out.

13
00:00:54.203 --> 00:00:58.352
Let's see what that does
at the command line.

14
00:00:58.352 --> 00:01:04.830
If I just say file= hello, you'll notice
that it is implying that there should

15
00:01:04.830 --> 00:01:11.466
be a file at this absolute location in
the directory that we're at called hello.

16
00:01:11.466 --> 00:01:16.070
So it's default behavior is if
we give it a relative path,

17
00:01:16.070 --> 00:01:17.720
it figures it out according to that.

18
00:01:17.720 --> 00:01:24.720
If I were to do something like
../hello and we do like a relative

19
00:01:24.720 --> 00:01:29.010
path that way, you notice that it
automatically figures out where that is.

20
00:01:29.010 --> 00:01:32.290
So it handles all of
the relative path thing logic,

21
00:01:32.290 --> 00:01:36.030
all that other stuff that you should
not actually go invent yourself.

22
00:01:36.030 --> 00:01:38.530
Just use path.resolve to do that.

23
00:01:38.530 --> 00:01:40.830
Now notice that it's referencing a file,
but

24
00:01:40.830 --> 00:01:43.230
it's not telling us this
is just a string operation.

25
00:01:43.230 --> 00:01:48.000
It's not telling us that that file exist,
just saying if you specify it according to

26
00:01:48.000 --> 00:01:51.960
that, then that seems like that's
a file that you're trying to indicate.

27
00:01:51.960 --> 00:01:55.202
So let's go back to our code and

28
00:01:55.202 --> 00:01:59.927
let's,
&gt;&gt; Kyle Simpson: Look at one other

29
00:01:59.927 --> 00:02:07.510
property that we might wanna
use which is called dirname.

30
00:02:07.510 --> 00:02:09.600
__dirname.

31
00:02:09.600 --> 00:02:16.745
If I said console.log(__dirname);

32
00:02:20.912 --> 00:02:22.520
&gt;&gt; Kyle Simpson: That's a magic variable

33
00:02:22.520 --> 00:02:26.010
that's available in all
of our Node programs.

34
00:02:26.010 --> 00:02:29.190
And it tells us the working direct
not the current working directory,

35
00:02:29.190 --> 00:02:34.280
it tells us the current directory of the
current file that we're accessing it in.

36
00:02:34.280 --> 00:02:38.360
So if you access a file that's deep,
it'll give you the directory of that.

37
00:02:38.360 --> 00:02:44.100
So, if we check this out,
run this again with just hello.

38
00:02:44.100 --> 00:02:46.286
You notice that dirname is that.

39
00:02:46.286 --> 00:02:50.990
So basically path.resolves, defaulting to
saying, if you don't give me something

40
00:02:50.990 --> 00:02:56.570
that's absolute, then I'm gonna go ahead
and make it relative to current dirname.

41
00:02:56.570 --> 00:02:59.968
If we were to give it an absolute path,

42
00:02:59.968 --> 00:03:04.655
like /tmp/hello,
then it doesn't use dirname.

43
00:03:04.655 --> 00:03:08.470
So it only uses dirname if
we've given it a relative path.

44
00:03:11.080 --> 00:03:15.190
Okay, so now that we know we
have a path to something, and

45
00:03:15.190 --> 00:03:19.470
if as long as we give it a file, we're
gonna be able to do something with it.

46
00:03:19.470 --> 00:03:22.759
Let's make our command line script
that we're building or ex1 here.

47
00:03:22.759 --> 00:03:27.950
Let's make it access that file and
just print the contents onto the screen.

48
00:03:27.950 --> 00:03:29.870
Very simple task.

49
00:03:29.870 --> 00:03:34.360
To access the file system, we're gonna
need another built in module from node

50
00:03:34.360 --> 00:03:38.700
called fs for file system.

51
00:03:40.840 --> 00:03:44.410
And then rather than dumping this
logic all into that if statement,

52
00:03:44.410 --> 00:03:49.300
I'm gonna go ahead and write a function
down here called processFile().

53
00:03:49.300 --> 00:03:51.065
It's gonna take a file path.

54
00:03:51.065 --> 00:03:55.990
It's gonna do something
with that filepath.

55
00:03:55.990 --> 00:04:02.909
So let's just go ahead and
call processFile with that path.

56
00:04:10.001 --> 00:04:13.290
&gt;&gt; Kyle Simpson: So
what do we wanna do with our filepath?

57
00:04:13.290 --> 00:04:17.924
We want to get the contents of the file.

58
00:04:17.924 --> 00:04:21.410
There's a couple of ways that
we're going to accomplish that.

59
00:04:21.410 --> 00:04:25.757
So first, what we're gonna do,

60
00:04:25.757 --> 00:04:32.293
is just simply do contents
= fs.readFileSync.

61
00:04:32.293 --> 00:04:35.716
Sync stands for synchronous.

62
00:04:35.716 --> 00:04:38.750
So we're gonna tell it, I'm gonna wait
around while you go get this file.

63
00:04:40.430 --> 00:04:41.950
And then we're gonna give it the filepath.

64
00:04:43.940 --> 00:04:47.242
And then we're gonna do
console.log(contents).

65
00:04:53.530 --> 00:04:54.775
&gt;&gt; Kyle Simpson: When we run this,

66
00:04:54.775 --> 00:04:59.430
you're going to see a little bit
of a quirk about how buffers work.

67
00:04:59.430 --> 00:05:03.836
So let's run this code.

68
00:05:03.836 --> 00:05:07.553
And we're gonna give it a file that
actually exists and you'll notice

69
00:05:07.553 --> 00:05:11.774
in your current directory you have a files
subdirectory that I've given you and

70
00:05:11.774 --> 00:05:14.306
in there, there's a file called hello.txt.

71
00:05:15.722 --> 00:05:19.245
&gt;&gt; Kyle Simpson: So we're gonna give
it a file that actually exists and

72
00:05:19.245 --> 00:05:23.472
when I run this program,
we don't see the contents of the file,

73
00:05:23.472 --> 00:05:27.260
we actually see the stringification
of a binary buffer.

74
00:05:28.350 --> 00:05:34.400
That's because, by default,
the file system commands,

75
00:05:34.400 --> 00:05:39.570
in fact, most I/O commands, they're
assuming these low-level binary buffers.

76
00:05:39.570 --> 00:05:43.530
They're not assuming that you
wanna represent things as strings.

77
00:05:43.530 --> 00:05:48.090
Interestingly, if we had
taken console.log out and

78
00:05:48.090 --> 00:05:53.630
instead done process.stdout.write,
let's look at what happens here.

79
00:05:55.140 --> 00:05:59.669
Now we're passing not a steam, but
a buffer directly to process.stdout.write.

80
00:06:05.820 --> 00:06:07.020
And if we run that,

81
00:06:08.750 --> 00:06:12.400
now you'll see that we passed the binary
buffer directly to the shell.

82
00:06:12.400 --> 00:06:14.670
The shell knew what to
do with those bites, and

83
00:06:14.670 --> 00:06:17.230
it translated them into characters.

84
00:06:17.230 --> 00:06:20.490
So the reason the previous
example wasn't being translated

85
00:06:20.490 --> 00:06:22.584
is because by the time
that got to the shell,

86
00:06:22.584 --> 00:06:26.590
console.log had already stringfied it
into those characters that you saw.

87
00:06:26.590 --> 00:06:30.900
It wasn't passing along a buffer, it was
passing along a string of characters that

88
00:06:30.900 --> 00:06:33.650
said buffer 0c all that stuff.

89
00:06:33.650 --> 00:06:36.490
So when we want to pass along
a buffer we've got to make

90
00:06:36.490 --> 00:06:38.430
sure we're actually
dealing with a buffer and

91
00:06:38.430 --> 00:06:41.240
not something that's going to
turn it into a string first.

92
00:06:41.240 --> 00:06:45.450
And that's why I said earlier that
console.log does more than just put a new

93
00:06:45.450 --> 00:06:46.684
line on the end.

94
00:06:46.684 --> 00:06:51.410
It actually,
tries to do some processing on the values.

95
00:06:51.410 --> 00:06:56.999
That's why a video console.log42 or
you do console.log'42.

96
00:06:56.999 --> 00:06:59.524
It does different colored
output in your shell,

97
00:06:59.524 --> 00:07:03.800
it's because console log is doing
a bunch of extra value processing.

98
00:07:03.800 --> 00:07:08.078
And when we don’t want the value
processing what we really wanna do is

99
00:07:08.078 --> 00:07:10.158
just process.stdout.write.

100
00:07:10.158 --> 00:07:14.322
So in this particular case,
that ends up being exactly what we want.

101
00:07:14.322 --> 00:07:17.302
We want process.stdout.write
instead of console.log.

102
00:07:17.302 --> 00:07:22.450
Now one other thing that you could have
done if you really needed it as a string

103
00:07:22.450 --> 00:07:28.090
and not as a buffer, you could’ve told the
read file to use a particular encoding.

104
00:07:29.540 --> 00:07:34.930
If you pass an encoding to one of the
&gt;&gt; Kyle Simpson: File system

105
00:07:34.930 --> 00:07:38.815
commands like a read file command, and
you give it an encoding it will say, okay,

106
00:07:38.815 --> 00:07:42.568
I know you're not wanting the buffer,
you're actually wanting a real string.

107
00:07:42.568 --> 00:07:44.530
So we could have said UTFA.

108
00:07:44.530 --> 00:07:47.430
So this code's going to do exactly
the same thing when we run it.

109
00:07:50.760 --> 00:07:53.110
No difference at all,
except under the covers,

110
00:07:53.110 --> 00:07:55.420
there is a slight performance difference.

111
00:07:55.420 --> 00:08:00.010
Because now what we've handed from our
Node program over to the shell environment

112
00:08:00.010 --> 00:08:04.100
is a preprocessed string,
which is slightly less efficient by like

113
00:08:04.100 --> 00:08:08.980
microseconds, but slightly less efficient
than handing it a stream of binary data.

114
00:08:10.580 --> 00:08:14.200
That's just something to keep in mind
when you're dealing with input and

115
00:08:14.200 --> 00:08:15.090
output of data.

