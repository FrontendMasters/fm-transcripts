WEBVTT

1
00:00:00.040 --> 00:00:03.170
&gt;&gt; Kyle Simpson: Okay, let's keep
moving forward with our exercise 1.

2
00:00:03.170 --> 00:00:06.750
We wanna do some more interesting things
than just print out some static help text.

3
00:00:08.100 --> 00:00:13.130
First thing that we want to do is try
to get some input into our program, but

4
00:00:13.130 --> 00:00:14.460
we're not gonna use stdin yet.

5
00:00:14.460 --> 00:00:19.726
So there are other ways of getting input
from the outer system into our program.

6
00:00:19.726 --> 00:00:24.660
And one of the most common of those is
to use the command line parameters.

7
00:00:24.660 --> 00:00:29.610
So if we're on a command line,
and we say something like ex1.js,

8
00:00:29.610 --> 00:00:34.560
and then we say, hello=world.

9
00:00:34.560 --> 00:00:35.568
That's some input,

10
00:00:35.568 --> 00:00:38.881
that's a command line parameter that
is gonna come into our program.

11
00:00:38.881 --> 00:00:42.360
And we wanna be able to access
that command line parameter.

12
00:00:42.360 --> 00:00:43.760
So how are we gonna do that?

13
00:00:43.760 --> 00:00:49.674
Well, first off, what we're gonna
do is access the arguments that

14
00:00:49.674 --> 00:00:54.862
were passed to our program by
way of another of the exposures

15
00:00:54.862 --> 00:00:59.864
of the POSIX, which is process.args,
args is plural.

16
00:00:59.864 --> 00:01:04.587
Process.args will be an array of
all of the arguments that were

17
00:01:04.587 --> 00:01:07.790
passed in from the executing shell.

18
00:01:07.790 --> 00:01:10.911
So if we were to do
console.log(process.args),

19
00:01:10.911 --> 00:01:16.650
that's gonna let us see the array and
see what's being passed into our program.

20
00:01:19.050 --> 00:01:21.630
Whoops, sorry.

21
00:01:21.630 --> 00:01:22.860
It's process.argv.

22
00:01:23.950 --> 00:01:27.539
That's probably why it was in
the wrong syntax highlighting [LAUGH].

23
00:01:27.539 --> 00:01:32.550
Okay, it's process.argv because that's the
traditional name from the C programming.

24
00:01:32.550 --> 00:01:38.710
We called it argv for the list of
arguments, and argc for the count.

25
00:01:38.710 --> 00:01:44.400
Now when we run it,
we'll see an array of the arguments.

26
00:01:44.400 --> 00:01:48.122
Now, you'll notice that we have two
arguments at the top which we probably

27
00:01:48.122 --> 00:01:50.456
don't really actually
care that much about.

28
00:01:50.456 --> 00:01:56.087
We've got the argument that is
the location where my node is installed,

29
00:01:56.087 --> 00:01:59.980
and then the fully qualified
path to my ex1.js.

30
00:01:59.980 --> 00:02:03.184
That also is not something that typically
your program is gonna care that

31
00:02:03.184 --> 00:02:04.110
much about.

32
00:02:04.110 --> 00:02:09.098
So what we typically will do is just
slice off the first two of those,

33
00:02:09.098 --> 00:02:11.732
so process.argv.slice(2).

34
00:02:11.732 --> 00:02:13.888
And then when we run it again,

35
00:02:13.888 --> 00:02:18.558
we'll now see that it's just
an array of the single parameter.

36
00:02:18.558 --> 00:02:24.786
And of course if I were to call it
again and pass in extra parameters,

37
00:02:24.786 --> 00:02:30.600
like that, we notice that that
comes in as another entry in it.

38
00:02:30.600 --> 00:02:35.210
Now, there are a bunch of different
conventions for how command line arguments

39
00:02:35.210 --> 00:02:40.150
get specified on the command line.

40
00:02:40.150 --> 00:02:43.840
So there's this dash
dash long parameter name.

41
00:02:43.840 --> 00:02:48.470
There's a single dash with
a short parameter name,

42
00:02:48.470 --> 00:02:51.140
there's single dash with
a space in between.

43
00:02:51.140 --> 00:02:56.470
There's a bunch of different ways that
are a bunch of different conventions for

44
00:02:56.470 --> 00:02:58.590
the way parameters get specified.

45
00:02:58.590 --> 00:03:02.740
And you'll notice that none of that
parsing is happening for us by node.

46
00:03:02.740 --> 00:03:06.960
So we could do our own regular
expression parsing and

47
00:03:06.960 --> 00:03:10.720
come up with the parsing rules for
all those various different conventions.

48
00:03:10.720 --> 00:03:14.170
But that's a bunch of work that
we shouldn't do ourselves.

49
00:03:14.170 --> 00:03:19.080
So we're gonna go back and use a package,
one that's already installed for you,

50
00:03:19.080 --> 00:03:22.290
but the name of this
package is called minimist.

51
00:03:22.290 --> 00:03:26.125
So we're gonna grab minimist.

52
00:03:26.125 --> 00:03:29.405
We're gonna just do require("minimist").

53
00:03:31.000 --> 00:03:35.686
And what that comes in, that package
that comes in, is actually a function.

54
00:03:35.686 --> 00:03:40.770
So we're gonna add another parentheses
set onto it to execute that function.

55
00:03:40.770 --> 00:03:44.526
And we're going to tell it what
array we want it to parse,

56
00:03:44.526 --> 00:03:47.518
which is the process.argv.slice(2).

57
00:03:47.518 --> 00:03:52.280
So I'm gonna copy that and put it in
here as the input to that function.

58
00:03:54.040 --> 00:03:57.560
And then what comes back
from that function call

59
00:03:57.560 --> 00:04:02.510
is our actual object that
has all of our args in it.

60
00:04:02.510 --> 00:04:05.360
So I'm gonna set that equal to args.

61
00:04:07.206 --> 00:04:09.646
We need to console.log the args [LAUGH].

62
00:04:14.523 --> 00:04:17.110
&gt;&gt; Kyle Simpson: You'll notice
now we're getting an object back.

63
00:04:17.110 --> 00:04:21.271
There's an object that has a hello
property on it with the world, and

64
00:04:21.271 --> 00:04:23.372
then there's another one with c.

65
00:04:23.372 --> 00:04:28.110
And you'll notice this one knew it was
a number, or it assumed it was a number.

66
00:04:28.110 --> 00:04:32.463
Again, there's a bunch of conventions
around that sort of thing where if there's

67
00:04:32.463 --> 00:04:35.759
a short parameter name and
then something looks like a number,

68
00:04:35.759 --> 00:04:38.670
it's assumed to be a number
instead of a string.

69
00:04:38.670 --> 00:04:43.250
So you don't wanna go reinvent all of
those wheels, minimist does that for us.

70
00:04:43.250 --> 00:04:44.780
The underscore over here,

71
00:04:44.780 --> 00:04:48.680
by the way, that's in this object,
this is the overflow if there's

72
00:04:48.680 --> 00:04:53.730
anything else on the line that minimist
couldn't figure out what to do with.

73
00:04:53.730 --> 00:04:58.670
So if I were to do a single hyphen and
something like foobar,

74
00:05:00.280 --> 00:05:04.200
you'll notice that we have the hyphen and
the foobar in the underscore.

75
00:05:04.200 --> 00:05:06.084
Cuz it's like,
I don't know what's happening here,

76
00:05:06.084 --> 00:05:07.778
that doesn't look like
anything I can deal with.

77
00:05:07.778 --> 00:05:12.736
So that's sort of the overflow if
there's stuff on the line that it hasn't

78
00:05:12.736 --> 00:05:16.530
been able to parse according
to its conventions, okay?

79
00:05:18.320 --> 00:05:21.520
Let's go back to our code for
a moment, and

80
00:05:21.520 --> 00:05:26.210
let's observe that we can also pass
in a configuration to minimist.

81
00:05:26.210 --> 00:05:30.500
So I'm gonna add a second
argument here that is an object.

82
00:05:30.500 --> 00:05:33.260
And this configuration,
among other things,

83
00:05:33.260 --> 00:05:37.269
is gonna allow us to control some
of the guesses that minimist makes.

84
00:05:37.269 --> 00:05:41.125
So minimist might be guessing that we
want something to be a boolean, and

85
00:05:41.125 --> 00:05:44.490
we want it to be a string,
for example, or vice versa.

86
00:05:44.490 --> 00:05:49.140
So first off, what I wanna do
is I want to assume that help,

87
00:05:50.140 --> 00:05:53.030
in particular,
help is always gonna be a boolean.

88
00:05:54.170 --> 00:05:58.890
So by saying boolean and then giving
an array of parameters that I'm expecting,

89
00:05:58.890 --> 00:06:01.690
and you don't need to put any
of the dash or dash dash stuff.

90
00:06:01.690 --> 00:06:05.695
You just say, any parameter that's called
help, I want you to assume that's always

91
00:06:05.695 --> 00:06:09.110
a boolean,
even if it comes in with a value or not.

92
00:06:09.110 --> 00:06:11.400
And then we might have a different one,

93
00:06:11.400 --> 00:06:14.980
and this is gonna lead to where
we're going with the exercise.

94
00:06:14.980 --> 00:06:16.480
If we specified, say,

95
00:06:16.480 --> 00:06:20.170
a file parameter, we want that one
to always be treated as a string.

96
00:06:20.170 --> 00:06:26.814
So let's configure that string, that
anything in this list is always a string.

97
00:06:31.658 --> 00:06:35.622
&gt;&gt; Kyle Simpson: So if we try this
again now, if we run our code,

98
00:06:35.622 --> 00:06:40.518
I'm gonna say ./ex1.js,
I'm gonna say --help.

99
00:06:40.518 --> 00:06:43.000
And I'll try to give it
some kind of value, and

100
00:06:43.000 --> 00:06:45.810
you'll notice that it still
treats it as a boolean.

101
00:06:45.810 --> 00:06:48.420
Because we have overridden
the default guessing

102
00:06:48.420 --> 00:06:52.250
to tell it no matter how it's specified,
I always want it to be a boolean.

103
00:06:52.250 --> 00:06:55.850
If it's present, it's true,
if it's not present, it's false, okay?

104
00:06:57.100 --> 00:07:01.120
And then if we do something like --file,
and

105
00:07:01.120 --> 00:07:05.420
we give it no value, that would
typically be assumed to be a boolean.

106
00:07:05.420 --> 00:07:08.580
But because we've told it to be a string,

107
00:07:08.580 --> 00:07:11.190
you'll notice that it comes
in as an empty string.

108
00:07:11.190 --> 00:07:15.492
So we're overriding some of those
defaults, allowing us to very specifically

109
00:07:15.492 --> 00:07:18.844
control we know this one should
always be treated as a string.

