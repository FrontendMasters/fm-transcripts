WEBVTT

1
00:00:00.230 --> 00:00:01.140
&gt;&gt; Kyle Simpson: Alright,
we're gonna go ahead and

2
00:00:01.140 --> 00:00:04.170
switch now into Exercise 2,
which is really,

3
00:00:04.170 --> 00:00:07.730
just gonna be a continuation of what
we've been doing in Exercise 1.

4
00:00:07.730 --> 00:00:09.900
So there's a couple of
different ways to do that.

5
00:00:09.900 --> 00:00:14.120
I'm just gonna copy
the ex1.js into ex2.js so

6
00:00:14.120 --> 00:00:18.730
that it is a starting point for us.

7
00:00:18.730 --> 00:00:22.560
And the benefit of doing the copy
approach is that it keeps,

8
00:00:22.560 --> 00:00:26.480
if you're on a system like this,
it'll keep the executable bit for you.

9
00:00:28.470 --> 00:00:34.180
So let's open up the ex2.js and
our exercises folder.

10
00:00:34.180 --> 00:00:35.930
And then we'll move on from there.

11
00:00:36.930 --> 00:00:43.950
So we talked about several things
in our Exercise 1 discussion.

12
00:00:43.950 --> 00:00:49.360
For example, we talked about the problem,
if we were to process a really large file,

13
00:00:49.360 --> 00:00:54.660
our current approach is that we're pulling
this whole thing in and dumping it out.

14
00:00:54.660 --> 00:00:58.100
So let's talk about how we
might deal with streams.

15
00:00:58.100 --> 00:01:01.070
And I wanna talk for
a moment about how node streams work.

16
00:01:02.426 --> 00:01:08.700
I also wanna point out to you that there's
a really fantastic resource on this topic.

17
00:01:08.700 --> 00:01:13.560
It is the node stream handbook and
I will show,

18
00:01:13.560 --> 00:01:17.860
you literally just Google node stream
handbook and it's the very first link.

19
00:01:17.860 --> 00:01:22.820
This handbook written by sub stack
is probably the best resource I

20
00:01:22.820 --> 00:01:25.876
have found to talk about node stream.

21
00:01:25.876 --> 00:01:28.230
So I'm gonna briefly
introduce the concept, but

22
00:01:28.230 --> 00:01:33.240
I strongly strongly recommend that
you go read the node stream handbook.

23
00:01:33.240 --> 00:01:37.381
&gt;&gt; Student: Sub stack actually has
a course on streams on Front End Masters.

24
00:01:37.381 --> 00:01:39.729
&gt;&gt; Kyle Simpson: Excellent,
see the node stream handbook and

25
00:01:39.729 --> 00:01:43.570
sub stack has a course here on
Front End Masters about node streams.

26
00:01:43.570 --> 00:01:48.440
Basic idea that you need to grasp
on to is that streams have,

27
00:01:49.870 --> 00:01:54.340
they can be in a mode where you can read
from them, meaning they're producing and

28
00:01:54.340 --> 00:01:56.550
you can consume from them,
you can read from them.

29
00:01:56.550 --> 00:01:59.890
That's called a read stream or
a readable stream.

30
00:01:59.890 --> 00:02:02.870
And then, the other mode would be
that they're a writable stream,

31
00:02:02.870 --> 00:02:06.510
meaning that they can receive inputs and
you can write to them.

32
00:02:06.510 --> 00:02:10.810
So you can read from a readable stream,
write to a writable stream.

33
00:02:10.810 --> 00:02:14.438
Those are both called simplex streams,
meaning they're just unidirectional.

34
00:02:14.438 --> 00:02:17.580
You can either read from it or
write to it.

35
00:02:17.580 --> 00:02:20.200
There is a special kind of
stream called a duplex stream,

36
00:02:20.200 --> 00:02:24.890
which can be both read to and written
from, that's not what we're covering here.

37
00:02:24.890 --> 00:02:28.220
But just so you're aware, you have
readable streams and writable streams.

38
00:02:28.220 --> 00:02:31.930
So let me just actually
open up an empty file and

39
00:02:31.930 --> 00:02:33.940
give you an idea of what
I'm talking about here.

40
00:02:33.940 --> 00:02:37.866
If I have a stream that's
come from somewhere and

41
00:02:37.866 --> 00:02:43.539
I wanna say stream2 and I wanna get
some information out of stream1.

42
00:02:43.539 --> 00:02:47.579
Let's say I have a stream1 and
a stream2, and

43
00:02:47.579 --> 00:02:54.050
these have been created somehow, and
I want to take the output of stream1.

44
00:02:54.050 --> 00:02:58.664
So let's say that stream one is a readable
streams, I wanna be able to read from it.

45
00:02:58.664 --> 00:03:02.220
And let's say stream2 is a writable
stream, so I'll annotate that here.

46
00:03:02.220 --> 00:03:06.220
We'll say this is a readable stream and
this is a writable stream.

47
00:03:06.220 --> 00:03:08.580
If I want to connect those two,

48
00:03:08.580 --> 00:03:13.100
it's kind of like literally if you
connected a garden hose to the outlet.

49
00:03:13.100 --> 00:03:18.140
I want to connect these so that the flow
of data is continuous through them.

50
00:03:18.140 --> 00:03:21.510
Then you literally will take
the readable stream and

51
00:03:21.510 --> 00:03:24.580
pipe it into the writable stream.

52
00:03:24.580 --> 00:03:30.564
So we would say, stream1.pipe stream2.

53
00:03:30.564 --> 00:03:35.390
You call .pipe on a readable stream.

54
00:03:35.390 --> 00:03:40.150
And that hooks up a listener to listen for
chunks of data that are coming through.

55
00:03:40.150 --> 00:03:43.880
These streams under
the covers are in chunks.

56
00:03:43.880 --> 00:03:47.150
I think the default chunk
size is 65,000 bytes.

57
00:03:47.150 --> 00:03:51.500
In chunks, they are reading binary
data from a readable stream and

58
00:03:51.500 --> 00:03:54.540
then pushing it out to
the writable side of a stream.

59
00:03:54.540 --> 00:03:57.020
And so they're just doing that
chunks at a time, chunks at a time.

60
00:03:57.020 --> 00:04:01.330
And they're doing it highly efficiently,
using these binary buffers.

61
00:04:01.330 --> 00:04:04.430
And so what we're saying is,
take my readable stream and

62
00:04:04.430 --> 00:04:06.440
pipe it to my writable stream.

63
00:04:06.440 --> 00:04:10.560
You'll notice if you ever try
to do a writable stream.pipe,

64
00:04:10.560 --> 00:04:11.740
that method isn't there.

65
00:04:11.740 --> 00:04:15.770
So pipe is a part of
the readable interface.

66
00:04:15.770 --> 00:04:20.850
And the mechanisms under the covers
that pipe uses to attach and

67
00:04:20.850 --> 00:04:24.465
start writing into it, those will
only be available if you pass in

68
00:04:24.465 --> 00:04:27.614
a writable stream because it's
got the writable interface.

69
00:04:27.614 --> 00:04:34.195
So if I wanted to find out what
was coming out of that process.

70
00:04:34.195 --> 00:04:37.665
In other words, I wanna be reading from,

71
00:04:37.665 --> 00:04:42.055
if stream2 was a duplex stream then I
could both write to it and read from it.

72
00:04:42.055 --> 00:04:44.531
But in general,
it's gonna be a simplex stream.

73
00:04:44.531 --> 00:04:49.910
It's not gonna have the readable interface
to it, so I can't read from stream2.

74
00:04:49.910 --> 00:04:54.530
But if I wanted to pipe the output
of stream to somewhere else,

75
00:04:54.530 --> 00:04:56.130
then I don't really have a way to do that.

76
00:04:56.130 --> 00:05:01.660
And so that's the third part that you need
to know is that the return value from

77
00:05:01.660 --> 00:05:09.340
a .pipe call stream three that
is another readable stream.

78
00:05:10.540 --> 00:05:17.210
So the pattern here is
readable.pipe writable,

79
00:05:17.210 --> 00:05:19.290
and what you get back is another readable.

80
00:05:19.290 --> 00:05:22.620
And that means that you could then
have kind of a chain of these.

81
00:05:22.620 --> 00:05:28.978
You could have stream1,
.pipe(stream2), .pipe(stream5),

82
00:05:28.978 --> 00:05:34.290
.pipe you know it just takes the readable,
pipes it to a writable and

83
00:05:34.290 --> 00:05:38.380
then exposes a readable that can
read from the other end of that and

84
00:05:38.380 --> 00:05:39.700
then lets you keep you chaining that,

85
00:05:39.700 --> 00:05:44.990
lets you keep piping that to as many
places as you need to go, okay.

86
00:05:44.990 --> 00:05:49.310
So here, we would basically be saying,
stream1 is gonna go into stream2,

87
00:05:49.310 --> 00:05:52.770
stream2 is gonna go into stream5,
stream5 is gonna go into final.

88
00:05:52.770 --> 00:05:57.060
And if final had any outputs, then that
would actually be coming into stream3.

89
00:05:57.060 --> 00:06:02.020
So the pattern again is readable.pipe
passed into writable and

90
00:06:02.020 --> 00:06:04.150
you get back a readable.

91
00:06:04.150 --> 00:06:07.885
And that's literally like 85% of
understanding how to work with streams,

92
00:06:07.885 --> 00:06:11.600
it's just figuring out how to have
a readable stream hooked up to a writable

93
00:06:11.600 --> 00:06:16.310
stream and how to then take some data
from one location and push it to another.

94
00:06:16.310 --> 00:06:18.140
So how are we gonna use that?

95
00:06:18.140 --> 00:06:20.250
Well, let's go back to our exercise and

96
00:06:20.250 --> 00:06:25.210
let's think about what we were doing
with our files and our get standard in.

97
00:06:25.210 --> 00:06:29.310
Remember, I said that gets,
that standard in is a stream.

98
00:06:29.310 --> 00:06:35.240
But we have been pulling in
the files as a string, not a stream.

99
00:06:35.240 --> 00:06:38.690
Well, what if we were to switch
this to a streaming interface?

100
00:06:38.690 --> 00:06:42.888
Meaning, we could get a stream for the
standard in, we could get a stream from

101
00:06:42.888 --> 00:06:46.870
our file, and then we could do
the processing chunk by chunk.

102
00:06:46.870 --> 00:06:49.290
That's gonna be a switch of our strategy.

103
00:06:49.290 --> 00:06:53.050
Same outcome but a switch of our strategy
that's gonna be much more efficient,

104
00:06:53.050 --> 00:06:55.560
much more the way that you ought
to be doing things in node.

105
00:06:56.730 --> 00:07:01.603
So number one, we're gonna change, we're
gonna get rid of our usage of getStdin

106
00:07:01.603 --> 00:07:06.133
now, because we're gonna actually just
use the straight up Stdin stream.

107
00:07:06.133 --> 00:07:12.097
So I'm gonna take this part out and
I'm gonna call processFile and

108
00:07:12.097 --> 00:07:17.104
I'm gonna pass in process.stdin,
because we're now

109
00:07:17.104 --> 00:07:23.220
gonna make processFile actually
able to handle a stream.

110
00:07:23.220 --> 00:07:25.210
It's gonna be a stream of contents, okay?

111
00:07:26.400 --> 00:07:29.760
Now, how would we do it
with the file system?

112
00:07:29.760 --> 00:07:33.620
Well, we have a method on the FS module

113
00:07:33.620 --> 00:07:38.220
that can give us a readable stream
that's connected to a file.

114
00:07:38.220 --> 00:07:39.740
So what we're gonna do is say.

115
00:07:44.755 --> 00:07:49.367
&gt;&gt; Kyle Simpson: fs.createReadStream.

116
00:07:49.367 --> 00:07:53.133
And we're gonna give it that same path.

117
00:07:55.713 --> 00:07:58.727
&gt;&gt; Kyle Simpson: And now rather than
getting the whole contents of the file,

118
00:07:58.727 --> 00:08:02.880
we have a readable stream that's hooked
up to that file, and we can read from it.

119
00:08:02.880 --> 00:08:05.180
Just like we can read from standard in.

120
00:08:05.180 --> 00:08:07.870
So now, we just wanna to
pass that into processFile.

121
00:08:17.091 --> 00:08:21.890
&gt;&gt; Kyle Simpson: So we’ve changed our
processFile to take a readable stream as

122
00:08:21.890 --> 00:08:22.820
its input.

123
00:08:24.100 --> 00:08:27.580
I'm gonna come here and
modify process file.

124
00:08:27.580 --> 00:08:30.140
We're gonna call this in stream.

125
00:08:30.140 --> 00:08:31.750
That's the incoming stream.

126
00:08:33.600 --> 00:08:36.040
And then at the very end of this,

127
00:08:36.040 --> 00:08:40.720
we're gonna have an output
stream that we want to send out.

128
00:08:40.720 --> 00:08:45.440
So we're gonna say
process.stdout is gonna be

129
00:08:45.440 --> 00:08:50.281
our target stream will
call that target for now.

130
00:08:50.281 --> 00:08:53.709
That's gonna be our target stream.

131
00:08:53.709 --> 00:08:59.990
And what we're gonna do is have an output
stream that we pipe to our target.

132
00:09:01.630 --> 00:09:02.620
I'll call it target stream.

133
00:09:07.402 --> 00:09:07.933
&gt;&gt; Kyle Simpson: Okay.

134
00:09:07.933 --> 00:09:12.920
So our input stream is coming in and
we could just literally dump it.

135
00:09:12.920 --> 00:09:20.350
We could literally just say
outStream = inStream or

136
00:09:20.350 --> 00:09:24.600
we could say input stream.pipe
to the output stream.

137
00:09:24.600 --> 00:09:29.007
We could literally do nothing in between,
but that's not particularly interesting we

138
00:09:29.007 --> 00:09:31.960
wanted to be able to do
the upper casing of the values.

139
00:09:31.960 --> 00:09:38.114
So if we're gonna have our input stream,
let me just show you the intermediate,

140
00:09:38.114 --> 00:09:41.840
we'll do that, we'll say,
the input stream.

141
00:09:43.640 --> 00:09:48.311
The out stream, sorry,

142
00:09:48.311 --> 00:09:52.987
outStream = inStream.

143
00:09:52.987 --> 00:09:58.228
And this would allow us to dump
the contents to the standard out from

144
00:09:58.228 --> 00:10:04.950
our file or from our standard in without
any processing happening whatsoever.

145
00:10:04.950 --> 00:10:09.030
So when we pass in this
ReadStream from our file, or

146
00:10:09.030 --> 00:10:12.360
when we process process standard in,
it's this thing and

147
00:10:12.360 --> 00:10:15.430
we're just making a reference
to it called outStream.

148
00:10:15.430 --> 00:10:17.679
And because we know it's a readable,

149
00:10:17.679 --> 00:10:23.040
we can .pipe it to a writable stream
process.stdout as a writable stream.

150
00:10:23.040 --> 00:10:24.460
So our shapes line up.

151
00:10:24.460 --> 00:10:30.650
So let's just go back to our
command line and try it.

152
00:10:30.650 --> 00:10:33.103
Remember, you wanna be using ex2,js, so

153
00:10:33.103 --> 00:10:35.900
don't forget to update
your command line usage.

154
00:10:35.900 --> 00:10:42.478
And we're gonna just say,
file=files/hello.txt,

155
00:10:42.478 --> 00:10:46.330
we still get the same output.

156
00:10:46.330 --> 00:10:48.660
Same thing if I change it to lorem.txt,

157
00:10:48.660 --> 00:10:52.040
it'll now stream the entire
contents of that file.

158
00:10:52.040 --> 00:10:56.290
It's not doing any changes to the file,
but it's streaming in the entire context.

159
00:10:56.290 --> 00:10:59.260
Now, if we were really getting into
the nitty gritty, we could like debug

160
00:10:59.260 --> 00:11:05.380
the memory process and see that this was
different than what we did before when we

161
00:11:05.380 --> 00:11:11.400
have this one big megabyte of content, we
never have the whole megabyte in memory.

162
00:11:11.400 --> 00:11:15.900
Effectively, we only had about 65,000
bytes in memory anytime because it would

163
00:11:15.900 --> 00:11:18.660
read a chunk, and
then write it out to the standard out and

164
00:11:18.660 --> 00:11:21.280
then read another chunk and
read it out to the standard out.

165
00:11:21.280 --> 00:11:25.200
Instead of like we were doing before,
which is we read it into a buffer and then

166
00:11:25.200 --> 00:11:29.490
converted it to a string and changed it to
an uppercase string and then wrote it out.

167
00:11:29.490 --> 00:11:32.708
That would have been a lot of
copies of that megabyte of memory,

168
00:11:32.708 --> 00:11:36.440
being juggled in garbage collector and
so forth.

