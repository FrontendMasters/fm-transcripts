WEBVTT

1
00:00:00.020 --> 00:00:02.940
&gt;&gt; Kyle Simpson: Let's see
the contents of our database.

2
00:00:02.940 --> 00:00:08.030
So let's make one final addition
to this exercise, that if

3
00:00:08.030 --> 00:00:12.800
we have successfully inserted, let's get
all the records out of the database.

4
00:00:12.800 --> 00:00:20.373
So we're gonna say,
records = await getAllRecords.

5
00:00:22.300 --> 00:00:27.462
&gt;&gt; Kyle Simpson: And then, if we've
received those records, if (records &amp;&amp;

6
00:00:27.462 --> 00:00:34.050
records.length &gt; 0, that means
there are records in the database.

7
00:00:34.050 --> 00:00:37.070
Then we wanna go ahead and
print out that array.

8
00:00:37.070 --> 00:00:40.686
So that's when we're
gonna use console.table,

9
00:00:40.686 --> 00:00:45.910
which prints out a nice prettified
version of our two dimensional array.

10
00:00:47.580 --> 00:00:51.320
So we need to implement
the getAll records function.

11
00:00:57.529 --> 00:01:00.297
&gt;&gt; Kyle Simpson: We're gonna
do a join select here, so

12
00:01:00.297 --> 00:01:04.882
I'm gonna say result = SQL3,
and this time we're gonna call

13
00:01:04.882 --> 00:01:09.855
.all because we can get multiple
records back instead of just one.

14
00:01:09.855 --> 00:01:13.871
.all is gonna give us
back an array of records.

15
00:01:15.810 --> 00:01:17.166
&gt;&gt; Kyle Simpson: I need an await there.

16
00:01:22.100 --> 00:01:26.250
&gt;&gt; Kyle Simpson: So
I'm gonna do a SELECT and

17
00:01:26.250 --> 00:01:31.844
I'm gonna select the Other.data AS

18
00:01:31.844 --> 00:01:37.077
'other', and I'm gonna select

19
00:01:37.077 --> 00:01:42.860
Something.data AS 'something'.

20
00:01:46.602 --> 00:01:54.020
&gt;&gt; Kyle Simpson: FROM, and
I'll select from the something table.

21
00:01:56.330 --> 00:02:00.783
JOIN with Other ON,

22
00:02:09.494 --> 00:02:14.767
&gt;&gt; Kyle Simpson: We want Something.otherID

23
00:02:14.767 --> 00:02:17.650
= Other.id.

24
00:02:17.650 --> 00:02:19.310
That's how we join.

25
00:02:19.310 --> 00:02:22.550
And then for good measure I'm gonna go
ahead and do an order by clause here.

26
00:02:23.620 --> 00:02:28.939
I'm gonna ORDER BY, and let's see,

27
00:02:28.939 --> 00:02:32.928
I wanna ORDER BY Something,

28
00:02:32.928 --> 00:02:37.270
no, ORDER BY Other.id DESC.

29
00:02:37.270 --> 00:02:41.092
So I want the newest other values first,
and

30
00:02:41.092 --> 00:02:46.474
then within that group we'll
order by Something.data ASC.

31
00:02:52.050 --> 00:02:58.994
&gt;&gt; Kyle Simpson: We don't need to pass
in any values to be interpolated,

32
00:02:58.994 --> 00:03:03.724
so if (result &amp;&amp; result.length &gt;

33
00:03:03.724 --> 00:03:09.870
0),
&gt;&gt; Kyle Simpson: Then return the result.

34
00:03:12.230 --> 00:03:17.039
If I wrote my SQL correctly,
which about half the time I write

35
00:03:17.039 --> 00:03:21.674
SQL correctly,
then we should be able to call this again.

36
00:03:21.674 --> 00:03:24.222
And now calling it
the third time there should

37
00:03:24.222 --> 00:03:27.384
be three records that we've
inserted in the database.

38
00:03:27.384 --> 00:03:32.258
Ut-oh, I forgot to make
it an async fraction.

39
00:03:37.306 --> 00:03:39.950
&gt;&gt; Kyle Simpson: It'll be a win if I
didn't make a SQL mistake in the entire

40
00:03:39.950 --> 00:03:40.510
exercise.

41
00:03:42.580 --> 00:03:43.400
There we go.

42
00:03:43.400 --> 00:03:45.780
All right, so
we have three different values in there.

43
00:03:45.780 --> 00:03:49.304
Let’s give it a different other,
we give it world.

44
00:03:54.081 --> 00:03:55.110
&gt;&gt; Kyle Simpson: And
it seems to be working.

45
00:03:57.810 --> 00:04:03.086
I guess the last thing for good measure
is that we should be returning here so

46
00:04:03.086 --> 00:04:06.876
that we don’t end up printing
out that oops message.

47
00:04:17.675 --> 00:04:20.726
&gt;&gt; Kyle Simpson: All right, so now we’re
able to save data to a database and

48
00:04:20.726 --> 00:04:22.299
retrieve it from a database.

49
00:04:23.850 --> 00:04:26.800
So the question is in get all
records I'm not returning anything,

50
00:04:26.800 --> 00:04:31.180
if this fails to get us anything or
if it gave us an empty array.

51
00:04:31.180 --> 00:04:35.700
If we come up here,
I'm only in my if statement.

52
00:04:37.190 --> 00:04:42.330
I'm only gonna do console.table if we
got an actual array that was non empty,

53
00:04:42.330 --> 00:04:45.200
otherwise we fall through to that oops.

54
00:04:45.200 --> 00:04:49.142
So I think we only need to return
an array if it's non empty.

55
00:04:52.880 --> 00:04:55.182
&gt;&gt; Kyle Simpson: Something would
have had to have gone wrong for

56
00:04:55.182 --> 00:04:57.240
us to get to this point.

57
00:04:57.240 --> 00:04:59.820
We thought we inserted some
stuff to get to this point and

58
00:04:59.820 --> 00:05:00.860
still have an empty array.

59
00:05:00.860 --> 00:05:03.627
Something definitely more
drastic has gone wrong, so.

