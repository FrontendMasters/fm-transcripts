WEBVTT

1
00:00:00.120 --> 00:00:04.548
&gt;&gt; Student: So you're giving in
streams not from local machine but

2
00:00:04.548 --> 00:00:06.334
over the network?

3
00:00:06.334 --> 00:00:09.204
&gt;&gt; Kyle Simpson: Mm-hm, so you've
made a network request somewhere and

4
00:00:09.204 --> 00:00:12.147
you've got a response stream
that you're listening to?

5
00:00:12.147 --> 00:00:18.460
&gt;&gt; Student: Yeah can you, let's say
you've got two of them coming in,

6
00:00:18.460 --> 00:00:23.145
but you have to wait for
the result for both.

7
00:00:23.145 --> 00:00:23.856
&gt;&gt; Kyle Simpson: Okay.

8
00:00:23.856 --> 00:00:28.844
&gt;&gt; Student: To run some process to, you're
depending on both results, but you don't

9
00:00:28.844 --> 00:00:34.020
know when they're both gonna show up or
when they're both going to finish.

10
00:00:34.020 --> 00:00:34.550
&gt;&gt; Kyle Simpson: Yep.

11
00:00:34.550 --> 00:00:35.600
&gt;&gt; Student: I guess.
&gt;&gt; Kyle Simpson: Mm-hm.

12
00:00:35.600 --> 00:00:39.030
&gt;&gt; Student: How do you, can you,
is there a way to deal with that?

13
00:00:39.030 --> 00:00:43.160
&gt;&gt; Kyle Simpson: Yeah, I mean basically
this has it's less to do with streams, but

14
00:00:43.160 --> 00:00:48.480
it's the idea if I have two different
concurrent things that are happening,

15
00:00:48.480 --> 00:00:51.200
and I don't know what order they're
gonna finish in, but I wanna wait for

16
00:00:51.200 --> 00:00:53.240
both of them to finish.

17
00:00:53.240 --> 00:00:57.370
That general concept in asynchrony
can be modeled with a gate,

18
00:00:57.370 --> 00:00:59.590
which we can do with promise.all.

19
00:00:59.590 --> 00:01:03.960
So if you were to take a promise, similar
to what get standard in did, where it had

20
00:01:03.960 --> 00:01:07.750
a stream and it had a promise on the end,
if you were to attach a promise to the end

21
00:01:07.750 --> 00:01:13.050
of a stream read, very much like what we
just did with the stream complete, right?

22
00:01:13.050 --> 00:01:16.580
Attach a promise to it that tells you
when the stream has finished, and

23
00:01:16.580 --> 00:01:18.870
it gives you all of its contents.

24
00:01:18.870 --> 00:01:21.510
If you were to make a promise for
each of those two streams and

25
00:01:21.510 --> 00:01:25.540
then put both of those
promises into a promise.all,

26
00:01:25.540 --> 00:01:30.330
that promise would resolve whenever
both of them had successfully completed.

27
00:01:30.330 --> 00:01:31.090
&gt;&gt; Student: Okay.
&gt;&gt; Kyle Simpson: Whichever

28
00:01:31.090 --> 00:01:32.490
order they finish in.

29
00:01:32.490 --> 00:01:34.200
&gt;&gt; Student: All right, and
that promise.all obviously-

30
00:01:34.200 --> 00:01:36.230
&gt;&gt; Kyle Simpson: It would look like this.

31
00:01:36.230 --> 00:01:37.070
&gt;&gt; Student: It's an array, right?

32
00:01:37.070 --> 00:01:39.779
&gt;&gt; Kyle Simpson: It would look like this,

33
00:01:39.779 --> 00:01:45.464
if you had a stream1 [SOUND] and
a stream two, right?

34
00:01:45.464 --> 00:01:49.565
And those were attached to respond,
those were response streams from some

35
00:01:49.565 --> 00:01:54.560
basically node Ajax requests, like he
made a get request somewhere else, right?

36
00:01:54.560 --> 00:01:58.550
So all you need to do is call something
very much like the stream complete that we

37
00:01:58.550 --> 00:02:01.740
used to make a promise for stream one.

38
00:02:01.740 --> 00:02:06.510
And then another one for stream two, and

39
00:02:06.510 --> 00:02:12.268
then pass both of those,
and the promise.all.

40
00:02:21.146 --> 00:02:23.933
&gt;&gt; Kyle Simpson: And this will be
a promise that will get resolved whenever

41
00:02:23.933 --> 00:02:27.022
both of those are finished no
matter what order they finish in.

42
00:02:27.022 --> 00:02:32.314
&gt;&gt; Student: Okay, and
what you get back are two objects or

43
00:02:32.314 --> 00:02:34.932
whatever to-
&gt;&gt; Kyle Simpson: You're talking about

44
00:02:34.932 --> 00:02:36.120
the contents of the stream?

45
00:02:36.120 --> 00:02:39.809
So streamComplete the way we wrote it
did not actually concern itself with

46
00:02:39.809 --> 00:02:40.920
the contents.

47
00:02:40.920 --> 00:02:45.080
But you could very easily adapt this
streamComplete to have been listening for

48
00:02:45.080 --> 00:02:48.080
the data, collecting it,
getting all the data from that stream and

49
00:02:48.080 --> 00:02:51.650
then resolving the promise with
the contents of the stream.

50
00:02:53.320 --> 00:02:54.520
Don't make sense?

51
00:02:54.520 --> 00:02:59.910
&gt;&gt; Student: So promise.all then you,
will give you back as many,

52
00:02:59.910 --> 00:03:05.307
return as many outputs as you
have input is that right?

53
00:03:05.307 --> 00:03:06.805
&gt;&gt; Kyle Simpson: That's correct.

54
00:03:06.805 --> 00:03:07.995
&gt;&gt; Student: Okay.
&gt;&gt; Kyle Simpson: This promise would be

55
00:03:07.995 --> 00:03:11.685
resolved within an array
of all the response

56
00:03:11.685 --> 00:03:15.025
with all of the completions
of these promises.

57
00:03:15.025 --> 00:03:17.175
So right now we're not
completing it with anything, but

58
00:03:17.175 --> 00:03:21.975
we could if we wire this a little bit
to actually have that resolve function

59
00:03:21.975 --> 00:03:25.875
resolve with the contents that
we've collected from stream.

60
00:03:26.970 --> 00:03:30.820
But actually that's much harder
there's packages that already do this.

61
00:03:30.820 --> 00:03:34.930
There's packages that will turn a streams,
completion,

62
00:03:34.930 --> 00:03:37.700
just like get standard in
does that uses one of them.

63
00:03:37.700 --> 00:03:40.740
They'll turn a stream
into a completed promise.

64
00:03:40.740 --> 00:03:44.730
And then you would just call one,
call those on your streams,

65
00:03:44.730 --> 00:03:50.060
pass them into promise.all, and then
what you'd have as a result of the .then

66
00:03:50.060 --> 00:03:55.100
is you'd have a responses array,
where responses of

67
00:03:55.100 --> 00:04:01.120
zero is stream1's content.

68
00:04:01.120 --> 00:04:08.709
And responses of 1 is stream2's contents.

69
00:04:08.709 --> 00:04:12.434
So you can't really use this stream,
complete the way I've written it, but

70
00:04:12.434 --> 00:04:15.242
you could use one of those like
what I'm talking about, or

71
00:04:15.242 --> 00:04:17.103
you could adopt this if you wanna try.

72
00:04:17.103 --> 00:04:18.819
That make sense?

73
00:04:21.358 --> 00:04:24.718
&gt;&gt; Kyle Simpson: This is a general
strategy for any sort of concurrency,

74
00:04:24.718 --> 00:04:28.740
if you have two or
more things happening at the same time.

75
00:04:28.740 --> 00:04:29.980
Don't know when they're gonna finish, but

76
00:04:29.980 --> 00:04:32.405
I want all of the results
whenever they do finish.

77
00:04:32.405 --> 00:04:35.900
Promise.all is kind of your go to for
that.

78
00:04:35.900 --> 00:04:39.870
&gt;&gt; Student: Going back a bit,
is there a rule of thumb for

79
00:04:39.870 --> 00:04:43.590
when you would want to create and

80
00:04:43.590 --> 00:04:48.609
work with duplex streams versus piping,
or treating the pipes of readables?

81
00:04:50.270 --> 00:04:53.750
&gt;&gt; Kyle Simpson: I have never once
created a duplex stream so anecdotally,

82
00:04:53.750 --> 00:04:55.940
I would say not very often.

83
00:04:55.940 --> 00:05:00.070
There are some times on occasion where
you will interact with something that

84
00:05:00.070 --> 00:05:04.240
is created one for you, and maybe you
need to read from it and write to it.

85
00:05:05.360 --> 00:05:10.020
I could imagine, for example, a database
that gave you a duplex stream so

86
00:05:10.020 --> 00:05:14.010
you could write SQL queries to it and
read responses maybe.

87
00:05:14.010 --> 00:05:16.420
But, I don't do that very often.

88
00:05:16.420 --> 00:05:18.413
It's almost always the simplex
streams readables and

89
00:05:18.413 --> 00:05:19.720
writables that you find together.

90
00:05:25.197 --> 00:05:27.087
&gt;&gt; Kyle Simpson: And
honestly, with the database,

91
00:05:27.087 --> 00:05:30.426
I'd probably just end up exposing to,
if I were designing it,

92
00:05:30.426 --> 00:05:34.090
I'd end up exposing a readable and
a writer will stream separately.

93
00:05:34.090 --> 00:05:37.430
It doesn't seem like there's a ton
of benefit to the complexity of

94
00:05:37.430 --> 00:05:38.120
a duplex stream.

95
00:05:38.120 --> 00:05:40.090
But maybe there are some
scenarios where it's useful.

96
00:05:41.600 --> 00:05:42.810
&gt;&gt; Kyle Simpson: Yes.

97
00:05:42.810 --> 00:05:45.733
&gt;&gt; Student2: Why do you use
a REST API over Streams?

98
00:05:47.500 --> 00:05:52.530
&gt;&gt; Kyle Simpson: Well, the REST API is
a sort of a separate kind of question.

99
00:05:52.530 --> 00:05:54.500
I mean, it's a good question,
but it's a separate question.

100
00:05:56.390 --> 00:06:01.860
If the rest API was in the habit
of streaming it's responses, yes.

101
00:06:01.860 --> 00:06:04.540
If the rest API gives you
everything as one big chunk,

102
00:06:04.540 --> 00:06:08.610
you're not gonna get a ton of benefit
out of consuming it as a stream.

103
00:06:08.610 --> 00:06:11.110
But once you have it,
whether you've got it as a stream or

104
00:06:11.110 --> 00:06:15.200
not, if you need to do processing on it, I
would absolutely dump it into a stream and

105
00:06:15.200 --> 00:06:16.439
then do the rest of the process.

106
00:06:17.630 --> 00:06:23.320
But if your rest API has a sort of
streaming response, for example HTTP

107
00:06:23.320 --> 00:06:29.800
is a streaming protocol, and
HTTP can send you chunked responses.

108
00:06:29.800 --> 00:06:33.910
That's an example of streaming, so if you
were downloading from an HTTP server,

109
00:06:34.910 --> 00:06:37.050
that was sending out chunk responses.

110
00:06:37.050 --> 00:06:39.560
Your rest API was sending
out chunk responses,

111
00:06:39.560 --> 00:06:41.900
then yeah it would make
sense to stream those.

112
00:06:41.900 --> 00:06:46.550
But a lot of times a rest API just
give you one big old blob of json,

113
00:06:46.550 --> 00:06:50.960
that's going to be one chunk
in your stream response.

114
00:06:50.960 --> 00:06:56.010
So there isn't as much benefit to
the stream in that specific scenario.

115
00:06:56.010 --> 00:07:00.120
&gt;&gt; Student2: So in that scenario, what
would you use then instead of streams?

116
00:07:00.120 --> 00:07:05.370
&gt;&gt; Kyle Simpson: We just use one of the,
there's about a million different

117
00:07:05.370 --> 00:07:13.110
ajax kinds of methods in node that
can make outbound network requests.

118
00:07:13.110 --> 00:07:15.820
The most common of which we are gonna
actually gonna practice a little bit later

119
00:07:15.820 --> 00:07:16.700
in the course.

120
00:07:16.700 --> 00:07:19.845
But I think one of the most common
ones is they have taken the Fetch API

121
00:07:19.845 --> 00:07:24.810
that was a web based,
web platform API for making Ajax.

122
00:07:24.810 --> 00:07:28.960
There is a port of that to node,
and any time I would make

123
00:07:28.960 --> 00:07:34.100
a outbound Ajax sort of request or
get or post request from node.

124
00:07:34.100 --> 00:07:35.820
I would just use the node fetch.

125
00:07:35.820 --> 00:07:39.520
And by the way, that fetch actually
supports the Streaming API.

126
00:07:39.520 --> 00:07:42.370
So you would either make a regular old

127
00:07:42.370 --> 00:07:45.240
normal fetch when all you
want is just the big thing.

128
00:07:45.240 --> 00:07:49.110
Or if you end up connecting to
something that has a stream,

129
00:07:49.110 --> 00:07:51.570
fetch automatically has
that built into it.

130
00:07:51.570 --> 00:07:54.450
Where you can listen and
receive the stream.

131
00:07:54.450 --> 00:07:57.820
So the web platform has been adding
a bunch of stuff about streams,

132
00:07:57.820 --> 00:08:03.830
JavaScript added in ES 2018,
last year, the AC generators and

133
00:08:03.830 --> 00:08:07.780
with basic generators, we can now
basically have readable streams and

134
00:08:07.780 --> 00:08:11.360
I mean interval streams and
nodes adding support for that.

135
00:08:11.360 --> 00:08:14.770
I think in the next stable version,
if not already.

136
00:08:14.770 --> 00:08:16.290
I might already be in here,

137
00:08:16.290 --> 00:08:20.230
but basically there's a bunch of different
ways now that we can consume those things.

138
00:08:20.230 --> 00:08:24.790
So I would just start by calling fetch and
making a request somewhere.

139
00:08:24.790 --> 00:08:27.010
And then depending on
what I was expecting,

140
00:08:27.010 --> 00:08:30.076
I would either consume it as a stream or
just as a single blob.

141
00:08:34.406 --> 00:08:35.320
&gt;&gt; Kyle Simpson: Yeah.

142
00:08:35.320 --> 00:08:38.520
&gt;&gt; Student3: So why do we need streams?

143
00:08:38.520 --> 00:08:41.840
So there's a default size range.

144
00:08:41.840 --> 00:08:45.360
&gt;&gt; Kyle Simpson: I think it's
65k is the internal buffer size.

145
00:08:47.440 --> 00:08:50.210
&gt;&gt; Student3: What would
be the alternative?

146
00:08:50.210 --> 00:08:51.740
We are supposed, I am sorry.

147
00:08:53.080 --> 00:08:54.160
Why do we need chunks?

148
00:08:55.470 --> 00:08:58.340
&gt;&gt; Kyle Simpson: Well if you think about
the scenario like what we've been doing in

149
00:08:58.340 --> 00:09:01.890
this exercise where we're like
converting a whole word upper case,

150
00:09:01.890 --> 00:09:05.720
I know that's silly but think about
doing some kind of processing on a file.

151
00:09:05.720 --> 00:09:10.020
When its only one megabyte in size,
then you use 2 or 3 megabytes of memory

152
00:09:10.020 --> 00:09:13.820
to reread the whole thing in, you convert
it, you write it back out, it’s maybe 2 or

153
00:09:13.820 --> 00:09:17.320
3 times it’s been copied
in RAM at that point.

154
00:09:17.320 --> 00:09:21.320
But if that file was a gigabyte in size,
now all of a sudden you just used up

155
00:09:21.320 --> 00:09:25.910
3 gigabytes of RAM to read the entire
thing into memory, do your transform and

156
00:09:25.910 --> 00:09:30.190
write it back out,
you see how much worse that would be?

157
00:09:30.190 --> 00:09:34.220
As opposed to only having 65K
in memory at any given time

158
00:09:34.220 --> 00:09:36.420
by doing a chunk at
a time to the streaming.

159
00:09:36.420 --> 00:09:40.700
So the advantage of the streaming protocol
is not always a more efficient, but

160
00:09:40.700 --> 00:09:42.350
it's also gonna use much less memory.

