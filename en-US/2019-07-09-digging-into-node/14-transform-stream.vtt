WEBVTT

1
00:00:00.040 --> 00:00:04.150
&gt;&gt; Kyle Simpson: We do want to
actually do some processing

2
00:00:04.150 --> 00:00:05.510
on our streams as they go by.

3
00:00:05.510 --> 00:00:11.300
And the way we're gonna do that is
we're gonna set up a transform stream.

4
00:00:11.300 --> 00:00:16.184
So I'm going to pull
in let's see what it's

5
00:00:16.184 --> 00:00:20.938
called here at transform from the stream.

6
00:00:23.826 --> 00:00:26.674
&gt;&gt; Kyle Simpson: There's another built
in node model called stream, and

7
00:00:26.674 --> 00:00:31.570
we're gonna just pull off specifically
the transform string constructor from it.

8
00:00:31.570 --> 00:00:35.390
We're gonna make a transform stream and
the reason we're making a transform stream

9
00:00:35.390 --> 00:00:40.320
is so that we can step in
the middle of a stream pipe and

10
00:00:40.320 --> 00:00:43.320
item by item we can process
what's going through it.

11
00:00:43.320 --> 00:00:48.470
So, instead of having
output stream immediately.

12
00:00:50.770 --> 00:00:53.850
In there what we're just gonna
do is step in the middle of it.

13
00:00:53.850 --> 00:00:59.860
So let's make an upperStream
that's gonna say new Transform.

14
00:01:01.470 --> 00:01:06.710
And the constructor takes an object that
can have several configurations in it but

15
00:01:06.710 --> 00:01:11.460
the one we want to care about is that
it needs a method called transform.

16
00:01:11.460 --> 00:01:18.029
And this method will receive some inputs,
it will receive a chunk.

17
00:01:18.029 --> 00:01:22.240
It will receive an encoding which
we don't care about in here.

18
00:01:22.240 --> 00:01:24.380
Doesn't even always know the encoding and

19
00:01:24.380 --> 00:01:29.460
then it seems a method to let
us know that it's finished.

20
00:01:29.460 --> 00:01:31.760
I'll call it next, or
maybe we'll call it cb.

21
00:01:31.760 --> 00:01:36.000
This is just a notifier
that we have finished.

22
00:01:36.000 --> 00:01:39.800
The way that this transform stream works,
it may seem a little bit strange, but

23
00:01:39.800 --> 00:01:41.980
it's basically kind of like an array.

24
00:01:41.980 --> 00:01:46.160
So if we wanna put something
into our stream from that chunk,

25
00:01:46.160 --> 00:01:50.360
we literally just say this.push and
give it something.

26
00:01:50.360 --> 00:01:55.270
Okay, so we're not passing it to callback,
but we do need to execute callback so

27
00:01:55.270 --> 00:01:59.170
that the stream knows this chunk has
been processed and it can move on.

28
00:01:59.170 --> 00:02:02.570
And that allows you to do asynchronous
processing if you need to.

29
00:02:02.570 --> 00:02:06.740
Here we literally just wanna take
the chunk, turn it into a string and

30
00:02:06.740 --> 00:02:08.180
upper case it.

31
00:02:08.180 --> 00:02:10.780
So we'll do that we'll say chunk.toString.

32
00:02:10.780 --> 00:02:12.298
Chunk of course is a buffer.

33
00:02:12.298 --> 00:02:16.276
We'll take chunk.toString which
turns it into a string and

34
00:02:16.276 --> 00:02:18.853
then we'll call it toUpperCase on it.

35
00:02:22.019 --> 00:02:25.495
&gt;&gt; Kyle Simpson: That pushes the
transformed chunk into our upperStream.

36
00:02:26.680 --> 00:02:31.860
Now, we need to get input
stream into upperStream.

37
00:02:33.490 --> 00:02:34.814
Anybody remember how we do that?

38
00:02:39.029 --> 00:02:41.169
&gt;&gt; Kyle Simpson: Think about the shapes
of the streams that we're dealing with.

39
00:02:43.270 --> 00:02:46.133
UpperStream is going to be a writable.

40
00:02:50.061 --> 00:02:53.950
&gt;&gt; Speaker 2: Would it be outstream.pipe
with upperStream as the argument?

41
00:02:53.950 --> 00:02:56.370
&gt;&gt; Kyle Simpson: And
output stream won't have a .pipe

42
00:02:56.370 --> 00:02:59.300
on it because the output stream is
&gt;&gt; Speaker 2: nstream.pipe

43
00:02:59.300 --> 00:03:00.335
&gt;&gt; Kyle Simpson: So it's going to be

44
00:03:00.335 --> 00:03:08.230
inStream.pipe and we're going to give
it a readable stream so upperStream and

45
00:03:08.230 --> 00:03:11.380
what's gonna come back from that is-
&gt;&gt; Speaker 2: A readable stream.

46
00:03:11.380 --> 00:03:12.050
&gt;&gt; Kyle Simpson: outStream.

47
00:03:17.808 --> 00:03:20.744
&gt;&gt; Kyle Simpson: So
we're taking inStream in to this thing and

48
00:03:20.744 --> 00:03:23.170
then we're transforming it.

49
00:03:23.170 --> 00:03:26.340
Now I'm just gonna do one extra
little intermediary step,

50
00:03:26.340 --> 00:03:29.160
which is gonna set us up for
stuff we're doing later.

51
00:03:29.160 --> 00:03:33.290
When I assign outputStream there
we're just gonna use outputStream.

52
00:03:33.290 --> 00:03:35.850
It's gonna allow us to do a bunch of
transformations that we'll get to.

53
00:03:35.850 --> 00:03:39.839
So we're just gonna keep reassigning
this variable outStream is equal toi

54
00:03:39.839 --> 00:03:43.230
outStream.pipe into something else, and
then we'll do that over and over and

55
00:03:43.230 --> 00:03:43.970
over again, okay?

56
00:03:45.900 --> 00:03:50.970
And now we have a targetStream to write
to, and we can finally say at the very

57
00:03:50.970 --> 00:03:55.130
end outStream into our targetStream and
it should dump those contents.

58
00:03:57.580 --> 00:04:04.356
So let's go over to our code.

59
00:04:04.356 --> 00:04:08.617
And we're gonna try it
with the Lauren.text.

60
00:04:08.617 --> 00:04:11.997
And we'll see that it was able
to uppercase all of them, but

61
00:04:11.997 --> 00:04:15.173
to prove to you that it's
happening one chunk at a time,

62
00:04:15.173 --> 00:04:19.856
now that we have a transform stream, but
I'm actually gonna do is insert a delay.

63
00:04:19.856 --> 00:04:24.840
Into each step of the transformation,
make it obvious what's happening.

64
00:04:24.840 --> 00:04:27.040
So I'm gonna just do
a simple old set timeout.

65
00:04:31.390 --> 00:04:37.490
So I can just say cb and let's just delay
by 500 milliseconds for each chunk and

66
00:04:37.490 --> 00:04:41.620
then when we run this you're gonna see
that each chunk is getting processed.

67
00:04:41.620 --> 00:04:43.122
Every 500 milliseconds.

68
00:04:52.363 --> 00:04:53.838
&gt;&gt; Kyle Simpson: So it's roughly 11 or

69
00:04:53.838 --> 00:04:58.499
12 chunks to go through the whole
megabyte file and then it's finished.

70
00:04:59.720 --> 00:05:02.540
So that proves to us it's not
doing everything all at once.

71
00:05:02.540 --> 00:05:04.040
It's doing it efficiently.

72
00:05:04.040 --> 00:05:07.880
It's using these internal buffer sizes.

73
00:05:07.880 --> 00:05:11.760
I assume that they have some conditions
within it where maybe they adjust those or

74
00:05:11.760 --> 00:05:16.745
even configure those, but
I think the default is 65K.

75
00:05:18.890 --> 00:05:21.300
All right, let's take that timer back out.

76
00:05:21.300 --> 00:05:23.840
That was just for illustration purposes.

77
00:05:25.200 --> 00:05:26.463
Make sure you call cb.

