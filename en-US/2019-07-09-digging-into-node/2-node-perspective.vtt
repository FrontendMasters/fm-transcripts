WEBVTT

1
00:00:00.260 --> 00:00:03.450
&gt;&gt; Kyle Simpson: So I wasn't really
sure if node was gonna catch on for

2
00:00:03.450 --> 00:00:04.780
what I was thinking.

3
00:00:04.780 --> 00:00:06.640
And it wasn't until about a year or

4
00:00:06.640 --> 00:00:11.150
two later that I realized,
why is node so important?

5
00:00:11.150 --> 00:00:14.600
Why is it so tremendously transformative?

6
00:00:14.600 --> 00:00:17.520
And it's the message that I wanna share
with you to frame our discussion today.

7
00:00:18.880 --> 00:00:22.330
Because if you think about node as,

8
00:00:22.330 --> 00:00:26.960
it's just server side JavaScript,
that sort of actually betrays its history.

9
00:00:26.960 --> 00:00:29.760
If you were to find the original
node repo and go all the way

10
00:00:29.760 --> 00:00:34.070
back to the very beginning of the commits
that Ryan was committing back in 2008 and

11
00:00:34.070 --> 00:00:39.300
2009, you'd find that it wasn't
even NodeJS at the time.

12
00:00:39.300 --> 00:00:43.540
Ryan said out, as I've heard him say,
I don't personally know him but

13
00:00:43.540 --> 00:00:47.480
as I've heard him say,
Ryan set out to build high throughput,

14
00:00:47.480 --> 00:00:52.710
low latency socket servers, his idea what
we might call like nano or microservices.

15
00:00:52.710 --> 00:00:57.420
Now he's idea of system architecture
was that a system was comprised

16
00:00:57.420 --> 00:01:02.030
of a bunch of tiny little single
purpose socket services that all

17
00:01:02.030 --> 00:01:06.610
communicated with each other through
very efficient network communications.

18
00:01:06.610 --> 00:01:10.020
And he set out to build
a thing called node and

19
00:01:10.020 --> 00:01:12.630
the language that he knew at
the time was actually Ruby.

20
00:01:12.630 --> 00:01:14.840
So he was building node in Ruby.

21
00:01:14.840 --> 00:01:19.370
It was no.rb or no.Ruby, if you will, and

22
00:01:19.370 --> 00:01:23.770
very quickly realized that he needed
this concept of an event loop,

23
00:01:23.770 --> 00:01:27.110
to make that kind of a synchrony work and
Ruby didn't have that.

24
00:01:27.110 --> 00:01:31.840
And so he began trying to build
essentially an event loop for Ruby.

25
00:01:31.840 --> 00:01:35.280
And somewhere along his exploration,
I don't know exactly how it happened.

26
00:01:35.280 --> 00:01:39.250
But somewhere along his exploration,
he realized, why am I doing all that?

27
00:01:39.250 --> 00:01:41.310
JavaScript has it for free.

28
00:01:41.310 --> 00:01:43.420
And that's the fateful move.

29
00:01:43.420 --> 00:01:46.430
He rewrote everything to use JavaScript

30
00:01:46.430 --> 00:01:49.480
to get the event loop
semantic built in for free.

31
00:01:49.480 --> 00:01:51.690
That's why we have a Node JS today.

32
00:01:51.690 --> 00:01:56.260
It wasn't because he wanted to
put JavaScript on the server.

33
00:01:56.260 --> 00:01:59.050
We certainly can use that
as a justification now.

34
00:01:59.050 --> 00:02:01.630
But that's not what node
was really built for.

35
00:02:01.630 --> 00:02:07.170
And I think somewhere deep in
the guts of nodes, DNA still,

36
00:02:07.170 --> 00:02:13.380
is the fact that why node is so
compelling is because it was,

37
00:02:13.380 --> 00:02:18.080
I think, the first time that we got
a really strong compelling argument for

38
00:02:18.080 --> 00:02:23.560
how asyncronist communication,
I/O bound tasks should be modeled.

39
00:02:23.560 --> 00:02:26.980
And specifically,
they should be modeled with JavaScript.

40
00:02:26.980 --> 00:02:28.720
When we talk about I/O bound tasks,

41
00:02:28.720 --> 00:02:33.040
we're talking about tasks that use
the I/O subsystems of the computer.

42
00:02:33.040 --> 00:02:37.300
So for example, reading and writing
from a disk, making network connections.

43
00:02:37.300 --> 00:02:38.500
That sorta thing.

44
00:02:38.500 --> 00:02:42.490
As opposed to CPU bound tasks,
which are literally just in the CPU.

45
00:02:42.490 --> 00:02:48.120
I/O bound tasks are two to three to
four orders of magnitudes lower.

46
00:02:48.120 --> 00:02:50.270
We're still talking about milliseconds,
but

47
00:02:50.270 --> 00:02:55.330
there orders of magnitudes lower than
what happens inside of the processor.

48
00:02:55.330 --> 00:02:57.722
And the prevailing thought for

49
00:02:57.722 --> 00:03:02.235
a long time was the way you do
concurrency is with threads.

50
00:03:02.235 --> 00:03:04.912
Well, it turns out that
threads are pretty good for

51
00:03:04.912 --> 00:03:07.963
modeling things that are CPU
bound tasks where you can take

52
00:03:07.963 --> 00:03:12.020
a take advantage of massive
parallelism across a bunch of cores.

53
00:03:12.020 --> 00:03:15.830
And it's not to say that you can't do
I/O bound tasks with threading, but

54
00:03:15.830 --> 00:03:19.700
it turns out that they're not exactly
the most efficient way to do it.

55
00:03:19.700 --> 00:03:23.310
And I think we have a very
strong argument today

56
00:03:23.310 --> 00:03:28.070
that the asynchronous event loop is a much
more compelling model for I/O bound tasks.

57
00:03:28.070 --> 00:03:29.500
And I think it's one of the reasons.

58
00:03:29.500 --> 00:03:30.520
Without us realizing,

59
00:03:30.520 --> 00:03:35.840
it's one of the reasons why node ended up
succeeding at all of those big companies.

60
00:03:35.840 --> 00:03:39.935
It is not the case that Netflix and
Walmart and

61
00:03:39.935 --> 00:03:44.570
5,000 other giant cooperation
we wrote their entire

62
00:03:44.570 --> 00:03:49.570
part of their stuck just because they had
so many people that loved JavaScript.

63
00:03:49.570 --> 00:03:53.240
I'm sure there are JavaScript efficient
in each of those companies but

64
00:03:53.240 --> 00:03:56.350
the reason they did that, but
the reason they invested that much effort

65
00:03:56.350 --> 00:04:00.800
is not that they didn't have
an existing working architecture.

66
00:04:00.800 --> 00:04:04.700
They rewrote and redesigned their
architecture because there's some really

67
00:04:04.700 --> 00:04:09.180
compelling benefits when you think
about modelling high throughput,

68
00:04:09.180 --> 00:04:13.660
low latency I/O communications
the way node does it.

69
00:04:13.660 --> 00:04:17.300
And that's one of the things I want you
to take away from our discussion today.

70
00:04:17.300 --> 00:04:20.320
Is that is, I think,
still one of the sweet spots for node.

71
00:04:21.550 --> 00:04:27.380
If somebody asked me,
could you do CPU bound tasks in node?

72
00:04:28.430 --> 00:04:31.490
Sure, you could probably
do multi processing and

73
00:04:31.490 --> 00:04:34.990
we're gonna actually see that
at the end of our workshop.

74
00:04:34.990 --> 00:04:37.660
Today, we're gonna see how to
spin up a child processes and

75
00:04:37.660 --> 00:04:40.020
work with you can probably do that stuff.

76
00:04:40.020 --> 00:04:44.180
But if you were gonna do a lot of
really significant CPU bound tasks,

77
00:04:44.180 --> 00:04:46.210
I think you'd be crazy to
use something like node.

78
00:04:46.210 --> 00:04:49.200
And this is not the right system for that.

79
00:04:49.200 --> 00:04:52.590
And I'm saying that as somebody who
loves JavaScript, and I'm telling you,

80
00:04:52.590 --> 00:04:54.420
you shouldn't use it for that.

81
00:04:54.420 --> 00:04:58.310
But by the same token,
if you're doing high throughput,

82
00:04:58.310 --> 00:05:03.410
low latency I/O tasks and you're not using
Node JS, I think you're doing it wrong.

83
00:05:03.410 --> 00:05:08.210
Because anything that you build that isn't
this, I just think it's not as compelling.

84
00:05:08.210 --> 00:05:10.470
Now I know that's gonna be
a very strong statement and

85
00:05:10.470 --> 00:05:13.760
some of you out there
vehemently disagree with that.

86
00:05:13.760 --> 00:05:15.870
There's lots of great stacks out there,
but

87
00:05:15.870 --> 00:05:18.810
notice a really compelling answer for
that.

88
00:05:18.810 --> 00:05:20.691
And I think specifically know it's so

89
00:05:20.691 --> 00:05:25.000
compelling because JavaScript the language
is so well-adapted to that kinda thing.

90
00:05:26.570 --> 00:05:30.020
So that's one takeaway, but the other
takeaway that I want you get to get is

91
00:05:30.020 --> 00:05:33.300
back to the anecdotal story
of the middle-end stuff.

92
00:05:33.300 --> 00:05:39.780
I still think today that node's
best story at any company

93
00:05:39.780 --> 00:05:44.983
that doesn't already have it, is not, or
we gonna rewrite our whole architecture.

94
00:05:44.983 --> 00:05:49.063
I still think it's best adoptions
strategy is to be inserted

95
00:05:49.063 --> 00:05:53.625
essentially as a middle end proxy,
whether you call it that or not.

96
00:05:53.625 --> 00:05:57.446
To be inserted as the touch point,
between any front end and

97
00:05:57.446 --> 00:06:01.640
whatever your back end systems are,
insert a node system.

98
00:06:01.640 --> 00:06:06.720
Makes much more sense to me than let
me go rewrite my entire back end.

99
00:06:06.720 --> 00:06:09.750
Now, I know companies have done that and
done it successfully, and that's fine,

100
00:06:09.750 --> 00:06:11.580
I'm not saying anything wrong with that.

101
00:06:11.580 --> 00:06:14.050
But if you're at a company that
doesn't already use node, and

102
00:06:14.050 --> 00:06:17.900
you're thinking about how can I convince
somebody to use something like node if

103
00:06:17.900 --> 00:06:24.190
this workshop sparks some curiosity,
I think one of the ways you could do that,

104
00:06:24.190 --> 00:06:29.150
is to pitch an idea, what if we just had
our front-end talking to a node system?

105
00:06:29.150 --> 00:06:31.630
And what if we have the node
system responsible for

106
00:06:31.630 --> 00:06:33.760
communicating with our backend?

107
00:06:33.760 --> 00:06:39.180
And begin shifting those tasks
that touch the front-end into

108
00:06:39.180 --> 00:06:41.300
essentially into a middle-end tasks.

109
00:06:41.300 --> 00:06:42.920
So those are just some
thoughts about node.

110
00:06:42.920 --> 00:06:46.354
They frame where it is positioned.

111
00:06:46.354 --> 00:06:51.431
We're certainly gonna start with an even
lower level perspective on node,

112
00:06:51.431 --> 00:06:56.180
which is just using it to run
command line system level tasks.

113
00:06:56.180 --> 00:06:59.688
If you have ever done Pearl scripting or
Bash scripting before and

114
00:06:59.688 --> 00:07:04.410
you've dealt with hundreds and hundreds of
lines of these other languages that aren't

115
00:07:04.410 --> 00:07:08.108
your primary language, and
every time you need to touch the script,

116
00:07:08.108 --> 00:07:10.749
you gotta go Google the syntax for
it like I have.

117
00:07:10.749 --> 00:07:14.060
To this day, I can't even tell you how
many times I have written an if statement

118
00:07:14.060 --> 00:07:16.540
in Bash and I still don't know the syntax.

119
00:07:16.540 --> 00:07:19.191
Every single time I need
to write the if statement,

120
00:07:19.191 --> 00:07:20.803
I gotta go look it up on Google.

121
00:07:20.803 --> 00:07:24.444
It's like some square brackets
with a semicolon somewhere, and

122
00:07:24.444 --> 00:07:29.640
I get it wrong every freaking time,
because Bash is not my primary language.

123
00:07:29.640 --> 00:07:33.370
So it's not gonna be the one that I'm
most fluent in expressing my ideas in,

124
00:07:33.370 --> 00:07:35.420
which is why I don't like to
write Bash scripts anymore.

