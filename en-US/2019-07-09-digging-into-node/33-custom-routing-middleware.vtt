WEBVTT

1
00:00:00.280 --> 00:00:05.391
&gt;&gt; Kyle Simpson: I have looked and looked
and looked around the Express ecosystem

2
00:00:05.391 --> 00:00:10.027
for some good plugin for
handling friendly URL rewrites,

3
00:00:10.027 --> 00:00:13.826
of the sort that we were
doing in exercise five.

4
00:00:13.826 --> 00:00:16.399
And I only found a couple of them, and

5
00:00:16.399 --> 00:00:20.309
when I installed them it caused
my Express app to crash.

6
00:00:20.309 --> 00:00:23.500
I was never able to get any
of them to actually work.

7
00:00:23.500 --> 00:00:27.366
So maybe there's one out there that
just doesn't have good SEO and

8
00:00:27.366 --> 00:00:29.140
isn't Googleable.

9
00:00:29.140 --> 00:00:33.880
But whenever I use Express to
do URL rewriting of that sort,

10
00:00:33.880 --> 00:00:36.840
I end up falling back to
exactly the same techniques,

11
00:00:36.840 --> 00:00:40.960
which is basically using regular
expression matching and replacing.

12
00:00:40.960 --> 00:00:49.050
So the way you end up doing that then is
just to have a simple app.use middleware.

13
00:00:52.811 --> 00:00:56.584
&gt;&gt; Kyle Simpson: And what you should be
aware of with your own middleware is if

14
00:00:56.584 --> 00:01:00.886
you're receiving them is that if
they're gonna be asynchronous,

15
00:01:00.886 --> 00:01:06.169
which in this case it might be, if they're
gonna be asynchronous then you want to,

16
00:01:06.169 --> 00:01:10.610
there's a third parameter that
you have to call as the callback.

17
00:01:10.610 --> 00:01:13.910
That's what lets it know, or
sometimes its often called next, I guess.

18
00:01:13.910 --> 00:01:19.300
You have to execute next to tell Express
that it should move on to the next route.

19
00:01:19.300 --> 00:01:24.760
If you don't call next it will assume
that you completely handled the response,

20
00:01:24.760 --> 00:01:28.906
but if you want it to flow to
the next thing you need to call next.

21
00:01:28.906 --> 00:01:33.710
Here in app.use, we're not gonna handle
the response, we're only going to

22
00:01:33.710 --> 00:01:38.630
rewrite the URL from the friendly
version to the real version and

23
00:01:38.630 --> 00:01:43.530
then hand it over to the next route,
which is gonna be our static file server.

24
00:01:43.530 --> 00:01:45.890
So we do definitely need
to call the next function.

25
00:01:47.170 --> 00:01:48.300
Before I even write this,

26
00:01:48.300 --> 00:01:52.810
I just want to again point out that what
is basically happening here is these calls

27
00:01:52.810 --> 00:01:57.560
are adding these functions that you've
defined into an internal array.

28
00:01:57.560 --> 00:02:01.820
And what Express does every time a request
comes in is just loop over that array,

29
00:02:01.820 --> 00:02:04.470
calling a function, and seeing whether or

30
00:02:04.470 --> 00:02:07.760
not that function fully
handles the response or not.

31
00:02:07.760 --> 00:02:09.050
If so, then it's done.

32
00:02:09.050 --> 00:02:12.420
If not, it moves on to the next one
in the for loop, and the next one and

33
00:02:12.420 --> 00:02:12.980
the next one.

34
00:02:12.980 --> 00:02:17.590
So it's a top down, the order that
you define these routes matters.

35
00:02:17.590 --> 00:02:21.080
If you define a more general
catch all route earlier and

36
00:02:21.080 --> 00:02:24.350
it's going to catch all of them and
never get to the specific one.

37
00:02:24.350 --> 00:02:30.121
So you end up defining these from specific
back to general in terms of the ordering.

38
00:02:33.896 --> 00:02:37.087
&gt;&gt; Kyle Simpson: Okay, so
to accomplish our URL rewriting,

39
00:02:37.087 --> 00:02:42.090
our strategy is to take that wreck
object that has a wrecked out URL and

40
00:02:42.090 --> 00:02:46.937
literally just replace that value
with the new value that we want.

41
00:02:46.937 --> 00:02:52.150
So if it said /index,
then we want to make it say index.html.

42
00:02:52.150 --> 00:02:56.510
And if it said /about,
we want wanna to make it say about.html.

43
00:02:56.510 --> 00:03:00.590
That way when it gets to
Express' static file server,

44
00:03:00.590 --> 00:03:04.210
it's a correct URL and
it knows to just go find the file.

45
00:03:04.210 --> 00:03:05.580
That's what we're gonna be doing.

46
00:03:05.580 --> 00:03:08.550
So again, just to save the time,
I'm gonna go ahead and

47
00:03:08.550 --> 00:03:12.500
copy this, these if else statements.

48
00:03:12.500 --> 00:03:16.983
These are basically the equivalent of
the static aliases that we used in

49
00:03:16.983 --> 00:03:20.655
the previous expression,
I mean the previous exercise.

50
00:03:20.655 --> 00:03:26.148
So we're checking to see if it's index,
and then we're gonna say /index.html.

51
00:03:26.148 --> 00:03:29.930
If it's JS we don't need
to do any rewriting, so

52
00:03:29.930 --> 00:03:35.650
we just immediately call next
without doing any other processing.

53
00:03:35.650 --> 00:03:42.360
If it's one of these, this is where we
switch it from /about to about.html.

54
00:03:42.360 --> 00:03:50.018
And then finally we say req.url is for

55
00:03:50.018 --> 00:03:56.009
a for.html in the last case.

56
00:03:56.009 --> 00:03:59.258
All right, so,
&gt;&gt; Kyle Simpson: Save this.

57
00:04:12.385 --> 00:04:15.838
&gt;&gt; Kyle Simpson: Then we'll close
our define routes function,

58
00:04:15.838 --> 00:04:18.690
we're calling define routes.

59
00:04:18.690 --> 00:04:25.827
So hopefully now we should
be able to start up our ex6.

60
00:04:25.827 --> 00:04:27.899
Let me do one thing before we start it up.

61
00:04:27.899 --> 00:04:34.805
Let's update our HTML file so that we can
tell that it's serving up that new thing.

62
00:04:48.557 --> 00:04:51.856
&gt;&gt; Kyle Simpson: Now we're in exercise
six, and if we fetch the records,

63
00:04:51.856 --> 00:04:53.520
it still grabs the records.

64
00:04:54.750 --> 00:04:59.762
So we've got Express doing the same thing
that our previous routing logic was doing.

65
00:05:02.151 --> 00:05:05.540
&gt;&gt; Kyle Simpson: Notice it's coming back
right away cuz I don't have that delay.

66
00:05:05.540 --> 00:05:11.539
We could go back to Express and put that
delay in, and that would be right here.

67
00:05:13.691 --> 00:05:16.137
&gt;&gt; Kyle Simpson: await delay(1000)

68
00:05:26.386 --> 00:05:28.627
&gt;&gt; Kyle Simpson: Now we have
1,000 millisecond delay.

69
00:05:33.092 --> 00:05:37.220
&gt;&gt; Student: Yeah, so
what's the benefit then of using Express?

70
00:05:37.220 --> 00:05:42.270
&gt;&gt; Kyle Simpson: The large community
behind it, tons of documentation,

71
00:05:42.270 --> 00:05:46.220
huge ecosystem of contributed plugins for
it.

72
00:05:46.220 --> 00:05:52.121
And just generally it's almost on every
job posting that's ever been written for

73
00:05:52.121 --> 00:05:55.212
Node, that they want you to know Express.

74
00:05:55.212 --> 00:05:56.950
&gt;&gt; Student: There are alternatives though?

75
00:05:56.950 --> 00:05:59.268
&gt;&gt; Kyle Simpson: There are many,
many alternatives, there are lots and

76
00:05:59.268 --> 00:06:00.290
lots of them.

77
00:06:00.290 --> 00:06:05.430
It's just that Express was kind of
the first big one that got hugely popular.

78
00:06:05.430 --> 00:06:08.890
And probably for at least the next decade
people are gonna be talking about and

79
00:06:08.890 --> 00:06:09.790
still using it.

80
00:06:09.790 --> 00:06:12.361
But yeah, there's tons and
tons of other ones out there.

81
00:06:12.361 --> 00:06:17.250
Express is not, I wouldn't
necessarily call Express a framework,

82
00:06:17.250 --> 00:06:19.190
it's a little more like a library.

83
00:06:19.190 --> 00:06:25.950
But there's lots and lots of frameworks on
top of Express, and actually Express was

84
00:06:25.950 --> 00:06:30.690
on top of another thing which is even more
low level called Connect back in the day.

85
00:06:30.690 --> 00:06:34.204
That was kind of the original thing and
then Express was kind of a framework.

86
00:06:34.204 --> 00:06:39.133
And now you have much more
sophisticated things on top of it from

87
00:06:39.133 --> 00:06:43.390
lots of companies like media and
sales and who knows.

88
00:06:43.390 --> 00:06:47.150
It's a thousand others out
there that do Node frameworks,

89
00:06:47.150 --> 00:06:51.740
loop back from the folks at Strong Loop
and IBM, there's a ton of those out there.

90
00:06:53.030 --> 00:06:54.160
Yes.

91
00:06:54.160 --> 00:06:58.710
&gt;&gt; Student2: Also just mention that Scott
Moss has an entire course on API design

92
00:06:58.710 --> 00:07:02.980
with Node using Express,
which covers lots and

93
00:07:02.980 --> 00:07:08.180
lots of different things from
authentication to using.

94
00:07:09.330 --> 00:07:10.944
He even has like a graph QL,

95
00:07:10.944 --> 00:07:14.680
interpret graph QL which uses
Apollo server through Express.

96
00:07:14.680 --> 00:07:22.040
So Express has a lot of adapters for
other types of tooling and what not.

97
00:07:22.040 --> 00:07:22.860
&gt;&gt; Kyle Simpson: Yeah, absolutely.

98
00:07:22.860 --> 00:07:26.420
So that'd be a great place to go if
you're more curious about Express.

99
00:07:26.420 --> 00:07:29.470
I'm sure he'll tell you a lot more
official information about it.

100
00:07:29.470 --> 00:07:32.500
I've used Express a handful of times ever.

101
00:07:32.500 --> 00:07:35.920
And the vast majority of times
that I make my own Node servers,

102
00:07:35.920 --> 00:07:39.910
I just end up falling back to my own
routing logic cuz I don't end up needing

103
00:07:39.910 --> 00:07:42.970
a lot of that really sophisticated
stuff for most of what I do.

