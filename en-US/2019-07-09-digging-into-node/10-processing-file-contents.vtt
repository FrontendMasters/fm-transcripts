WEBVTT

1
00:00:00.250 --> 00:00:05.310
&gt;&gt; Kyle Simpson: Now, dumping the contents
of a file is not particularly interesting.

2
00:00:05.310 --> 00:00:07.670
We wanna do some more stuff with it.

3
00:00:07.670 --> 00:00:12.230
So let's consider just a very simple thing
that we could do, which is that whatever

4
00:00:12.230 --> 00:00:16.930
the contents are of the file, we're gonna
uppercase all of those string characters.

5
00:00:16.930 --> 00:00:19.490
We'll assume we're working
with Text files, and

6
00:00:19.490 --> 00:00:21.650
we're gonna uppercase the characters.

7
00:00:21.650 --> 00:00:24.740
Now, contents here is a buffer,
if you remember.

8
00:00:24.740 --> 00:00:27.940
And we can't really
uppercase a binary buffer.

9
00:00:27.940 --> 00:00:31.970
We're gonna have to turn it into a string,
so that we can do that uppercasing on it.

10
00:00:31.970 --> 00:00:37.390
So we're gonna have to say, contents
= contents, turn it into a string,

11
00:00:37.390 --> 00:00:41.830
so we can Call.toString on it.

12
00:00:41.830 --> 00:00:44.872
And then call toUpperCase.

13
00:00:51.493 --> 00:00:53.800
&gt;&gt; Kyle Simpson: Let's try
it again with this file.

14
00:00:53.800 --> 00:00:57.820
And we notice that it prints
the hello world in uppercase text.

15
00:00:58.910 --> 00:01:01.730
By the way, there's another file in
that directory if you just want to

16
00:01:01.730 --> 00:01:03.050
see it dumping a bunch of stuff.

17
00:01:03.050 --> 00:01:05.580
There's a file in that directory
that's called lorem.txt which is

18
00:01:05.580 --> 00:01:08.450
one megabyte of lorem and some text.

19
00:01:08.450 --> 00:01:12.930
So now we can dump one megabyte to our
shell if we really want to go crazy.

20
00:01:17.147 --> 00:01:21.580
&gt;&gt; Kyle Simpson: But let's talk about
that for a moment because I just

21
00:01:21.580 --> 00:01:25.812
pulled in an entire megabyte
as a binary buffer and

22
00:01:25.812 --> 00:01:30.060
then I turned that entire
megabyte into a string.

23
00:01:30.060 --> 00:01:32.970
So I made a separate string
representation of it.

24
00:01:32.970 --> 00:01:36.190
And then I made a third
representation of that megabyte.

25
00:01:36.190 --> 00:01:41.490
By turning it into the uppercase form and
then I wrote that string out and there

26
00:01:41.490 --> 00:01:45.780
had to been at least one or two levels of
translation to get it from the string back

27
00:01:45.780 --> 00:01:48.880
in the binary buffer so that it
could go out to the pausing system.

28
00:01:48.880 --> 00:01:50.430
That's not what we would consider,

29
00:01:50.430 --> 00:01:54.370
general speaking,
to be very efficient processing of that.

30
00:01:54.370 --> 00:01:57.581
And that's some foreshadowing the stuff
that will be talking about in later

31
00:01:57.581 --> 00:01:58.660
exercises.

32
00:01:58.660 --> 00:02:02.630
You need to be wary of, if it's just a
small like 11 characters like hello world,

33
00:02:02.630 --> 00:02:03.610
not a big deal.

34
00:02:03.610 --> 00:02:07.729
But if you're dealing with processing some
giant files, maybe like a gigabyte file,

35
00:02:07.729 --> 00:02:10.239
you don't want to pull the whole
thing into memory at once,

36
00:02:10.239 --> 00:02:13.299
you're going to want to be processing
things a little bit at a time.

37
00:02:13.299 --> 00:02:16.169
And that's really where
node starts to shine.

38
00:02:16.169 --> 00:02:20.129
We'll see in a little while the usage
of stream operations to do that.

