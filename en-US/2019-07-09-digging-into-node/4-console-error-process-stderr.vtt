WEBVTT

1
00:00:00.000 --> 00:00:02.210
&gt;&gt; Kyle Simpson: What
about standard error?

2
00:00:02.210 --> 00:00:07.090
Because there's regular success output and
then there's error output.

3
00:00:07.090 --> 00:00:08.090
How would we hook into that?

4
00:00:08.090 --> 00:00:12.250
Well you could say,
process.standarderror.right, and

5
00:00:12.250 --> 00:00:15.360
send some stuff to that
particular file descriptor.

6
00:00:15.360 --> 00:00:18.191
There's also another convenience helper,
which for

7
00:00:18.191 --> 00:00:21.708
our purposes right now we'll just use,
which is console.error.

8
00:00:24.551 --> 00:00:29.296
&gt;&gt; Kyle Simpson: Okay, so console.log and
console.error are gonna direct themselves

9
00:00:29.296 --> 00:00:34.620
to two different standard IO streams,
one standard out and one standard error.

10
00:00:34.620 --> 00:00:39.840
Let's just run this program and see if we
can tell any difference between the two.

11
00:00:41.290 --> 00:00:43.007
It doesn't really look
any different does it?

12
00:00:43.007 --> 00:00:45.800
They both look like they're
showing up as console logs.

13
00:00:45.800 --> 00:00:49.890
That's because by default the shell
environment that we're running in is gonna

14
00:00:49.890 --> 00:00:56.460
interpret standard out and standard error
outputs both the same and just print them.

15
00:00:56.460 --> 00:00:57.880
But they are actually different and

16
00:00:57.880 --> 00:01:03.750
we can prove to ourselves that they're
different by doing some file redirection,

17
00:01:03.750 --> 00:01:06.530
file descriptor redirection,
some output redirection.

18
00:01:06.530 --> 00:01:08.900
So I'm gonna try to run this again and
this is,

19
00:01:08.900 --> 00:01:13.490
again, we mentioned at the outset that if
you're running in a Windows environment,

20
00:01:13.490 --> 00:01:15.080
this may be slightly different for you.

21
00:01:16.150 --> 00:01:18.910
I think this part actually works the same
in Windows, but just be aware there

22
00:01:18.910 --> 00:01:24.210
are sometimes nuance differences between a
Linux or a Mac environment versus Windows.

23
00:01:24.210 --> 00:01:27.710
But I wanna do a redirect,
which is the greater than symbol.

24
00:01:27.710 --> 00:01:31.088
And I wanna basically
redirect a file descriptor.

25
00:01:31.088 --> 00:01:34.836
So I wanna redirect the one file
descriptor, which is standard out, and

26
00:01:34.836 --> 00:01:38.602
I wanna redirect it to, and
this is definitely different from Windows.

27
00:01:38.602 --> 00:01:41.848
On a Linux or
Mac system there's a thing called Devnull,

28
00:01:41.848 --> 00:01:44.420
which is basically a bit trashcan.

29
00:01:44.420 --> 00:01:47.130
Anything that goes there just
is completely thrown away.

30
00:01:48.150 --> 00:01:51.637
So, if I say one redirected to Devnull and
we rerun the program,

31
00:01:51.637 --> 00:01:55.448
you'll notice that the hello world
stuff didn't print out anymore,

32
00:01:55.448 --> 00:01:58.759
it's cuz we redirected the standard
out stream to Devnull.

33
00:02:00.120 --> 00:02:01.570
If I were to run that again but

34
00:02:01.570 --> 00:02:05.690
change it to two, you'll notice that
it's gonna print hello world and

35
00:02:05.690 --> 00:02:10.620
not the oops because now it's
redirecting the standard error output.

36
00:02:10.620 --> 00:02:15.190
This is critical to understand these
basic ideas of file descriptors and

37
00:02:15.190 --> 00:02:16.940
standard out versus standard error.

38
00:02:16.940 --> 00:02:19.838
Because if you're going to write
a command line shell tool,

39
00:02:19.838 --> 00:02:24.380
something like a replacement of
a Bash script or a Perl script.

40
00:02:24.380 --> 00:02:28.980
One of the strong conventions is
that you do regular debug output on

41
00:02:28.980 --> 00:02:33.080
the standard out, and you do any sort
of error outputs on standard error.

42
00:02:33.080 --> 00:02:36.440
And the reason is system
monitoring tools will often

43
00:02:36.440 --> 00:02:41.810
hook into the standard error stream and
write those to log files, for example.

44
00:02:41.810 --> 00:02:44.340
They may not write all the debug
information that's coming out, but

45
00:02:44.340 --> 00:02:45.510
they want all the errors.

46
00:02:45.510 --> 00:02:48.420
So it's good for you to make sure,
it's really important for you,

47
00:02:48.420 --> 00:02:53.030
if you're gonna do an error don't just do
console.log because that's your habit.

48
00:02:53.030 --> 00:02:58.997
Do something like console.errors so
that it goes to the error stream, okay?

49
00:02:58.997 --> 00:03:01.862
And by the way, we can actually
redirect both of them at the same time.

50
00:03:01.862 --> 00:03:05.781
We could redirect to the Devnull,
and then we could, and

51
00:03:05.781 --> 00:03:09.220
I always seem to get this one,
this syntax wrong.

52
00:03:09.220 --> 00:03:13.860
We're gonna redirect to to the address
that we're redirecting, I'm sorry,

53
00:03:13.860 --> 00:03:18.650
we're gonna redirect one to the address
that we're already redirecting to, and

54
00:03:18.650 --> 00:03:20.410
now both of them are gone.

55
00:03:20.410 --> 00:03:22.930
So now both of them
are getting sent to Devnull.

56
00:03:22.930 --> 00:03:25.150
Now you don't typically do that
yourself on a command line, but

57
00:03:25.150 --> 00:03:28.060
this is the sort of thing that
your system automation tools will

58
00:03:28.060 --> 00:03:30.640
often be doing when they run
your programs, they'll be

59
00:03:30.640 --> 00:03:34.662
redirecting outputs to different log
files and things like that, okay.

60
00:03:36.354 --> 00:03:40.280
&gt;&gt; Kyle Simpson: All right,
let's go back to our code.

61
00:03:40.280 --> 00:03:45.430
Now we are outputting to standard out and
outputting to standard error, that's good.

62
00:03:45.430 --> 00:03:48.250
But I said there's three
standard IO streams.

63
00:03:48.250 --> 00:03:53.350
The other of the standard IO streams
is standard in, that's an input stream.

64
00:03:53.350 --> 00:03:58.070
And we could, in theory,
access that stream directly.

65
00:03:58.070 --> 00:04:02.260
We could say something
like process.stdin.read.

66
00:04:02.260 --> 00:04:05.590
Cuz it's an input stream so we need to
read from it rather than write to it.

67
00:04:05.590 --> 00:04:08.870
We can do that, we can call read and
read a character,

68
00:04:08.870 --> 00:04:11.390
read a bite off of
the standard end stream.

69
00:04:11.390 --> 00:04:13.117
But we're not gonna do that for now,

70
00:04:13.117 --> 00:04:15.474
we are gonna do standard
input a little bit later.

71
00:04:15.474 --> 00:04:20.721
But we're not gonna use the raw stream,
and it's because standard in streams

72
00:04:20.721 --> 00:04:26.390
are much more finicky, they're much
more quirky than the output streams.

73
00:04:26.390 --> 00:04:33.436
They are significantly affected by
variances in your interactive shell.

74
00:04:33.436 --> 00:04:38.376
And there's a bunch of little quirks and
weirdnesses about how it knows an end of

75
00:04:38.376 --> 00:04:42.900
input signal, how that gets sent in,
and all of that other stuff.

76
00:04:42.900 --> 00:04:46.030
And that's not code that
we want to reinvent.

77
00:04:46.030 --> 00:04:48.930
So when we get to the point
where we wanna use standard in,

78
00:04:48.930 --> 00:04:52.820
we're gonna use a package that already
does that and it's called get standard in.

79
00:04:52.820 --> 00:04:56.630
It already handles all their
weirdnesses in a platform agnostic way.

80
00:04:56.630 --> 00:04:58.370
We don't wanna reauthor that logic.

81
00:04:58.370 --> 00:05:01.906
So just be aware that there is a process,
.stdin, but we're not gonna use it for

82
00:05:01.906 --> 00:05:02.434
right now.

