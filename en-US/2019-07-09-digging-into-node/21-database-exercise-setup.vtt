WEBVTT

1
00:00:00.170 --> 00:00:02.810
&gt;&gt; Kyle Simpson: All right,
well moving forward here in the course,

2
00:00:02.810 --> 00:00:07.120
we're gonna turn our attention from
strictly just building a command line

3
00:00:07.120 --> 00:00:14.670
utility dealing with files, to trying
to use databases to persist data.

4
00:00:14.670 --> 00:00:16.660
So we're gonna look,
if you'll go ahead and

5
00:00:16.660 --> 00:00:20.680
open up exercise four,
EX4.js in your exercises folder.

6
00:00:20.680 --> 00:00:23.420
I've already got a different file kind of

7
00:00:23.420 --> 00:00:25.910
filed out with some of the basic
information we're gonna need.

8
00:00:25.910 --> 00:00:30.540
And then we're gonna be writing some
SQL to do some database query's.

9
00:00:30.540 --> 00:00:33.140
So hopefully you're at least
roughly familiar with some SQL.

10
00:00:33.140 --> 00:00:37.640
If not, we'll walk through how that works,
so don't feel too intimidated.

11
00:00:37.640 --> 00:00:42.560
But our goal here is to use
a database in a very simplistic way.

12
00:00:42.560 --> 00:00:45.430
This is not a complex database but
we just wanna

13
00:00:45.430 --> 00:00:50.140
show the idea of how we can store some
data in and how we can pull some data out.

14
00:00:50.140 --> 00:00:56.031
And the database that I chose to use
is SQLite, specifically SQLite3.

15
00:00:56.031 --> 00:00:59.980
You'll notice that I am requiring that
package here cuz we're gonna use that.

16
00:00:59.980 --> 00:01:04.040
The reason for my choice of
SQLite 3 is because it doesn't

17
00:01:04.040 --> 00:01:09.070
require a separate database
program running on your system.

18
00:01:09.070 --> 00:01:14.940
SQLite by virtue of the name
is a sort of strip down but

19
00:01:14.940 --> 00:01:16.300
not, it's still very powerful.

20
00:01:16.300 --> 00:01:19.924
But sort of a strip down
environment where the file is

21
00:01:19.924 --> 00:01:23.010
maintained directly by your application.

22
00:01:23.010 --> 00:01:27.840
So there's gonna be the SQLite3 module
literally just modifies the file directly.

23
00:01:27.840 --> 00:01:31.070
You don't have to like talk
via the network to some other

24
00:01:31.070 --> 00:01:35.970
big program like a SQL server or Oracle,
or PostgreSQL, or something like that.

25
00:01:35.970 --> 00:01:41.340
And it keeps them in flat binary file
format locally right where you're working.

26
00:01:41.340 --> 00:01:43.731
So there's a lot of advantages to it,

27
00:01:43.731 --> 00:01:46.800
if not having to administer
a whole separate server.

28
00:01:46.800 --> 00:01:51.230
It's not the kind of database where you're
gonna run that on a separate machine and

29
00:01:51.230 --> 00:01:55.510
have 15 different master and
15 slaves, and bunch of replication.

30
00:01:55.510 --> 00:01:57.524
That's not what you're
gonna be doing with SQLite.

31
00:01:57.524 --> 00:02:00.078
But if you just need to
build an application,

32
00:02:00.078 --> 00:02:04.590
persist a little bit of data and have
sort of a relational SQL access to it.

33
00:02:04.590 --> 00:02:07.788
SQLite is actually a really
strong powerful option, and

34
00:02:07.788 --> 00:02:10.660
you might think it's just for
demo purposes.

35
00:02:10.660 --> 00:02:11.970
And it's certainly is convenient for

36
00:02:11.970 --> 00:02:15.180
us so that you don't have to go and
install your own database.

37
00:02:15.180 --> 00:02:20.100
But it is used, it is production quality,
and is used in a lot of places.

38
00:02:20.100 --> 00:02:24.680
In fact, web browsers have SQLite built
into them, and they literally use them for

39
00:02:24.680 --> 00:02:28.470
their data, for
some of their data storage and so forth.

40
00:02:28.470 --> 00:02:32.380
So it's actually a really strong,
I've launched a number of production

41
00:02:32.380 --> 00:02:37.590
websites based entirely on SQLite,
and would do so unreservedly.

42
00:02:37.590 --> 00:02:40.031
Obviously, I wouldn't run
Amazon on SQLite, but

43
00:02:40.031 --> 00:02:42.870
if you're running just kind of
a basic one-off website and

44
00:02:42.870 --> 00:02:46.124
you needed a simple database,
SQLite's a great choice to look at.

45
00:02:48.256 --> 00:02:52.045
&gt;&gt; Kyle Simpson: We wanna make sure that
SQLite is installed, so unlike the other

46
00:02:52.045 --> 00:02:56.790
packages which were already included
in your exercises distribution.

47
00:02:56.790 --> 00:02:59.490
We need to actually make sure
that SQLite is installed.

48
00:02:59.490 --> 00:03:03.060
And it's because it uses
a binary node extension, so

49
00:03:03.060 --> 00:03:07.370
your particular operating system and
version of node needs to be built.

50
00:03:07.370 --> 00:03:13.380
So if you issue the command npm install
sqlite3, you're gonna see that mine prints

51
00:03:13.380 --> 00:03:17.860
out something a little bit different
because I've already got it installed.

52
00:03:17.860 --> 00:03:21.656
But if you run it,
you're gonna want to install SQLite, and

53
00:03:21.656 --> 00:03:27.323
it should at the time anyway, right now
it's gonna install that's version 4.0.7.

54
00:03:27.323 --> 00:03:31.270
So you should get something roughly like
that for the installation of SQLite.

55
00:03:31.270 --> 00:03:35.550
And by the way, make sure you install it
both in this local directory as well as

56
00:03:35.550 --> 00:03:41.680
also in the solutions directory so
that it works correctly for you.

57
00:03:41.680 --> 00:03:46.580
Okay, so with SQLlite installed, one
other little thing to point out I've got

58
00:03:46.580 --> 00:03:50.450
this package already installed for
you but it's commented out.

59
00:03:50.450 --> 00:03:56.830
If you're using a version of node that's
beyond version say, I think 10.2 or above.

60
00:03:56.830 --> 00:04:01.264
Then you already have this method called
console.table built in for you, but

61
00:04:01.264 --> 00:04:05.870
10.1 and before, or somewhere
around in those early ten versions.

62
00:04:05.870 --> 00:04:09.809
It didn't have that in this package,
it was kind of a user land package for

63
00:04:09.809 --> 00:04:10.710
patching that.

64
00:04:10.710 --> 00:04:15.040
So if you end up running this exercise
later and you don't have a console.table

65
00:04:15.040 --> 00:04:19.200
because of your version of node, then just
simply uncomment that package and use it.

66
00:04:19.200 --> 00:04:21.850
Otherwise we'll use the built-in one,

67
00:04:21.850 --> 00:04:24.150
orienting you to this
exercise a little bit.

68
00:04:24.150 --> 00:04:27.549
This exercise file, you'll notice that
I'm setting up a couple of paths.

69
00:04:29.290 --> 00:04:32.340
Here's one for
where I'm gonna store my database, and

70
00:04:32.340 --> 00:04:36.480
here's one where I'm gonna store
the schema for my database.

71
00:04:36.480 --> 00:04:39.530
So I wanna open up that file for
just a moment.

72
00:04:39.530 --> 00:04:45.610
If you look at the MyDB.SQL,
I have all of this stuff commented out.

73
00:04:45.610 --> 00:04:48.680
We need to actually uncomment this code so

74
00:04:48.680 --> 00:04:52.310
that it will run these
particular statements.

75
00:04:52.310 --> 00:04:57.890
So if you uncomment all of that,
and then save that file,

76
00:04:58.930 --> 00:05:02.580
and then you're gonna be able to use,
we're gonna load these contents up.

77
00:05:02.580 --> 00:05:05.020
And we're gonna execute
them against our database.

78
00:05:05.020 --> 00:05:09.590
And I've written the SQL in such a way
that with the IF NOT EXISTS clause.

79
00:05:09.590 --> 00:05:11.130
So that it can rerun over and

80
00:05:11.130 --> 00:05:14.610
over, and it doesn't clobber the existing
tables if they're already there.

81
00:05:14.610 --> 00:05:18.080
So it's just sort of an initialization
SQL that we want to run.

82
00:05:18.080 --> 00:05:22.306
So go ahead and save that file so
that we can use it.

83
00:05:27.650 --> 00:05:30.875
&gt;&gt; Kyle Simpson: And
then you'll notice that in our function,

84
00:05:30.875 --> 00:05:35.830
I've got a setup here where I
am opening up our database.

85
00:05:35.830 --> 00:05:39.370
That's initializing it in our memory here.

86
00:05:39.370 --> 00:05:42.570
So it's going ahead and
creating a database file there,

87
00:05:42.570 --> 00:05:46.590
with all the basic things that
the SQLite database needs.

88
00:05:46.590 --> 00:05:48.630
But it doesn't have any
of our SQL stuff in it.

89
00:05:48.630 --> 00:05:50.940
And then I'm setting up some helpers here.

90
00:05:50.940 --> 00:05:55.030
And I wanna point out what's
happening with util.promisify.

91
00:05:55.030 --> 00:05:58.771
So each of these methods that is
exposed by the SQLite extension,

92
00:05:58.771 --> 00:06:01.490
they're callback expecting functions.

93
00:06:01.490 --> 00:06:05.550
But I wanna work with promises because
it's a cleaner interface for a synchrony.

94
00:06:05.550 --> 00:06:10.530
And so node ships with
a utility called util.promisify

95
00:06:10.530 --> 00:06:14.410
where you can pass it a function
that expects callbacks, and

96
00:06:14.410 --> 00:06:17.510
you get back a function
that gives you promises.

97
00:06:17.510 --> 00:06:20.273
It literally just wraps it in
a promise creating interface.

98
00:06:20.273 --> 00:06:23.220
So that's what I'm doing is
just making promise interfaces.

99
00:06:23.220 --> 00:06:25.570
You have to do a little bit
of extra work with the run,

100
00:06:25.570 --> 00:06:26.820
which is what this code is about.

101
00:06:26.820 --> 00:06:32.560
But basically, I'm making promise based
interfaces around my SQLlite 3 APIs.

102
00:06:32.560 --> 00:06:36.660
The four methods that we'll use are run,
get, all, and exec.

103
00:06:39.160 --> 00:06:43.420
Okay, so
first thing is we need to load initSQL.

104
00:06:43.420 --> 00:06:46.960
The SQL from that file,
we need to load it, and because we're

105
00:06:46.960 --> 00:06:50.620
just gonna do a single start up here,
I'm gonna go ahead and use readFileSync.

106
00:06:50.620 --> 00:06:51.900
But earlier in the course,

107
00:06:51.900 --> 00:06:55.739
we talked about how you could've done this
with asynchronous file reading as well.

108
00:06:56.790 --> 00:07:00.610
Since it's a small chunk of text,
should be no performance difference.

109
00:07:00.610 --> 00:07:05.650
We need to execute that
initSQL against our database.

110
00:07:05.650 --> 00:07:09.365
And remember, since it's written in
such a way that it can be re-executed,

111
00:07:09.365 --> 00:07:11.146
we just basically do it all the time.

112
00:07:11.146 --> 00:07:15.765
So we have our SQL3, name,
space with out helpers,

113
00:07:15.765 --> 00:07:21.730
specifically, we wanna call exec and
we're gonna pass in initSQL.

114
00:07:23.730 --> 00:07:28.600
And that is an asynchronous operation,
we're in an async function, so

115
00:07:28.600 --> 00:07:32.780
we need to go ahead and wait on it to
finish, so do a wait in front of it.

116
00:07:32.780 --> 00:07:36.536
And that will make sure that
we've initialized our SQL.

117
00:07:42.175 --> 00:07:44.060
&gt;&gt; Kyle Simpson: Now what is
the substance of this exercise?

118
00:07:44.060 --> 00:07:46.345
What are we gonna be
doing with this exercise?

119
00:07:46.345 --> 00:07:51.041
Well, we're gonna make a simple little
command line app that when we run it,

120
00:07:51.041 --> 00:07:54.087
we can pass in a value as
a command line parameter.

121
00:07:54.087 --> 00:07:57.064
It takes that,
it generates another value and

122
00:07:57.064 --> 00:08:01.875
it sticks those two values related
with keys into a database record.

123
00:08:01.875 --> 00:08:04.985
And so we can add a new record
each time we call the program, and

124
00:08:04.985 --> 00:08:06.975
then dump all of the current content.

125
00:08:06.975 --> 00:08:11.960
So real simple, basic, but it shows
you the ins and outs of persisting and

126
00:08:11.960 --> 00:08:16.580
retrieving data in a relational
way from SLQLite database.

127
00:08:16.580 --> 00:08:18.980
So, I got real creative
with the naming here.

128
00:08:18.980 --> 00:08:23.870
The two values that we're gonna be putting
in are called something and other.

129
00:08:23.870 --> 00:08:26.850
The something is gonna be a random number.

130
00:08:26.850 --> 00:08:30.040
And other is gonna be the value
that you're gonna be supplying at

131
00:08:30.040 --> 00:08:31.380
the command line.

132
00:08:31.380 --> 00:08:35.540
If we scroll up a little bit you'll see
that we're expecting you to pass a --other

133
00:08:35.540 --> 00:08:37.270
with some value in it.

134
00:08:37.270 --> 00:08:43.300
That will be used along with
the randomly generated number.

135
00:08:43.300 --> 00:08:46.550
If we go back to our schema you'll
notice exactly what's happening here

136
00:08:46.550 --> 00:08:49.980
is we have a something table,
which is gonna hold something values.

137
00:08:49.980 --> 00:08:52.840
Those are the randomly generated numbers.

138
00:08:52.840 --> 00:08:56.330
And then we have an other table,
which stores the normalized.

139
00:08:56.330 --> 00:09:00.760
It only stores each unique other
value that you've ever passed.

140
00:09:00.760 --> 00:09:04.240
So it's relating these two
through the foreign key.

141
00:09:04.240 --> 00:09:06.730
So if I kept calling it with foo over and
over again,

142
00:09:06.730 --> 00:09:09.030
there would only be one
record in the other table.

143
00:09:09.030 --> 00:09:13.017
And a bunch of related records
in the something table.

144
00:09:13.017 --> 00:09:17.770
[COUGH] So, if we've provided an other and
a something,

145
00:09:17.770 --> 00:09:23.130
how are we gonna get those
values into our database?

146
00:09:23.130 --> 00:09:26.430
I'm gonna go ahead and comment out
this oops part for just a moment.

147
00:09:26.430 --> 00:09:30.195
We'll put that in at the end just to make
sure that we're not missing anything.

