WEBVTT

1
00:00:00.140 --> 00:00:06.120
&gt;&gt; Kyle Simpson: So uppercasing files
is not terribly interesting or useful.

2
00:00:06.120 --> 00:00:10.775
What are some kinds of processing on these
files that we might do that would be more

3
00:00:10.775 --> 00:00:11.671
interesting?

4
00:00:11.671 --> 00:00:15.600
One of the common sorts of
transformations that you may see or

5
00:00:15.600 --> 00:00:20.960
encodings that you may run across on files
is that they've been gzip compressed.

6
00:00:20.960 --> 00:00:25.950
You may wanna unzip them,
process them, and then rezip them.

7
00:00:25.950 --> 00:00:30.620
This happens a lot when you're say
downloading a big file from an FTP site,

8
00:00:30.620 --> 00:00:34.720
processing it, adding some stuff to it,
and then rezipping it and

9
00:00:34.720 --> 00:00:39.650
uploading it to some other HTTP server,
that sort of streaming kind of operation.

10
00:00:39.650 --> 00:00:45.260
So let's pull in some gzipping and
gunzipping.

11
00:00:45.260 --> 00:00:48.590
And luckily, this is, again,
built in for us in Node.

12
00:00:48.590 --> 00:00:54.620
They have a streaming implementation of
the gzip algorithm built into Node and

13
00:00:54.620 --> 00:00:55.900
it's called zlib.

14
00:00:55.900 --> 00:01:01.777
So we're gonna pull in zlib,
&gt;&gt; Kyle Simpson: From Node.

15
00:01:06.144 --> 00:01:09.370
&gt;&gt; Kyle Simpson: Now let's think about
this, let's first talk about compressing

16
00:01:09.370 --> 00:01:12.910
our output, and
then we'll talk about decompressing input.

17
00:01:12.910 --> 00:01:17.230
Let's say that we want to allow
an option for compressing the output.

18
00:01:18.430 --> 00:01:22.260
So we are gonna add a Boolean
flag called compress.

19
00:01:22.260 --> 00:01:24.830
Before I forget, let's go ahead and
update our help.

20
00:01:26.230 --> 00:01:31.516
We can say console.log{"--compress,

21
00:01:31.516 --> 00:01:34.440
we'll gzip the output.

22
00:01:39.105 --> 00:01:44.137
&gt;&gt; Kyle Simpson: So here we are in
our process file, and we need to set

23
00:01:44.137 --> 00:01:49.960
up a streaming gzip
transform stream basically.

24
00:01:49.960 --> 00:01:52.970
So it turns out that's a whole
lot easier than that sentence

25
00:01:52.970 --> 00:01:54.600
sounded like it would be.

26
00:01:54.600 --> 00:01:58.700
We need to figure out where in this
function, do we wanna do the gzipping

27
00:01:58.700 --> 00:02:02.110
of the compression before or
after we've done our transformation?

28
00:02:02.110 --> 00:02:05.070
We wanna do it after, so

29
00:02:05.070 --> 00:02:09.170
we wanna make our capitalization of stuff,
and then we wanna do our gzipping.

30
00:02:09.170 --> 00:02:15.770
So here we're going to
say if (args.compress),

31
00:02:15.770 --> 00:02:19.360
then we need to insert a step
into our stream processing here.

32
00:02:19.360 --> 00:02:24.680
We need to say here,
if {args.compress}, we need to pipe

33
00:02:24.680 --> 00:02:29.310
our outStream into a gzipping stream and
then have it.

34
00:02:29.310 --> 00:02:34.654
So we're gonna say
outStream = outStream.pipe.

35
00:02:34.654 --> 00:02:41.180
And the thing that we wanna pipe
it to is going to be a gzipStream.

36
00:02:42.880 --> 00:02:44.720
So how do we define a gzipStream?

37
00:02:47.875 --> 00:02:51.474
&gt;&gt; Kyle Simpson: It's as
easy as zlib.createGzip.

38
00:02:53.280 --> 00:02:58.220
That makes us a transform stream,
kinda like the one we did manually.

39
00:02:58.220 --> 00:03:02.205
It makes this a transform stream that
already understands the streaming

40
00:03:02.205 --> 00:03:03.350
gzipped protocol.

41
00:03:03.350 --> 00:03:05.400
By the way,
I never knew this about gzip, but

42
00:03:05.400 --> 00:03:08.940
the compression protocol was
literally designed for streaming.

43
00:03:08.940 --> 00:03:10.100
That's why it's so easy for

44
00:03:10.100 --> 00:03:14.370
them to have a streaming gzip
because the actual protocol for

45
00:03:14.370 --> 00:03:18.770
gzipping was designed with this use case
in mind, to be able to do it streaming.

46
00:03:19.860 --> 00:03:23.970
All right, so we are conditionally adding
an additional step of processing which is

47
00:03:23.970 --> 00:03:25.920
that we want to gzip things.

48
00:03:25.920 --> 00:03:31.270
Now if we're going to gzip an output file,
then we might want

49
00:03:31.270 --> 00:03:36.490
to change the file extension
from saying out.txt to having

50
00:03:36.490 --> 00:03:41.210
like .gz extension because that's a pretty
common convention for that file name.

51
00:03:41.210 --> 00:03:47.210
So if we are doing a right stream here,
let's go ahead and

52
00:03:47.210 --> 00:03:51.839
say output stream, if we are compressing.

53
00:03:51.839 --> 00:03:56.595
Let's go ahead and say that output
stream is equal to whatever output

54
00:03:56.595 --> 00:04:01.600
stream already is, but then let's
just appended a .gz on the end of it.

55
00:04:01.600 --> 00:04:03.190
I'm sorry, not out stream, it's out file.

56
00:04:24.480 --> 00:04:26.320
&gt;&gt; Kyle Simpson: Let's test this out.

57
00:04:26.320 --> 00:04:30.730
We're gonna pull up our ex2.js.

58
00:04:30.730 --> 00:04:34.140
And here I'm gonna switch back, just for
the time being, I'm gonna switch back to

59
00:04:34.140 --> 00:04:39.160
the hello.txt, and
I'm gonna use standard out to see things.

60
00:04:39.160 --> 00:04:42.610
And then let's go ahead and
add the compress, so

61
00:04:42.610 --> 00:04:48.200
we should see all the gzipping
junk show up in our shell.

62
00:04:48.200 --> 00:04:50.690
And sure enough we see that, okay.

63
00:04:50.690 --> 00:04:55.824
But if I were to take off the out and
just do the compression,

64
00:04:55.824 --> 00:05:02.314
now we won't see it but it'll end up
creating a file called out.txt.gz.

65
00:05:02.314 --> 00:05:08.477
And if we look, we now have an out.txt.gz.

66
00:05:08.477 --> 00:05:13.299
And here's something interesting that
I found when I was first teaching

67
00:05:13.299 --> 00:05:18.436
this workshop, because I went to open up
the file and I was expecting to see all

68
00:05:18.436 --> 00:05:24.170
the gzipping junk, and it turns out that
we can see the plain text of the file.

69
00:05:24.170 --> 00:05:28.388
And so I spent a good half a day trying to
figure out why is my ziping not working?

70
00:05:28.388 --> 00:05:30.973
What's happening?
It turns out that them,

71
00:05:30.973 --> 00:05:36.722
automatically if you have a file
extension that says .txt.gz,

72
00:05:36.722 --> 00:05:41.446
it automatically gunzips it for
you when you open it.

73
00:05:41.446 --> 00:05:47.000
So this is them's magic showing
us the contents of the gzip file.

74
00:05:47.000 --> 00:05:50.840
If you wanted to verify that
you could a actual cat of it.

75
00:05:50.840 --> 00:05:52.910
And then you'll see
the junk is in the file.

76
00:05:54.720 --> 00:05:58.100
Okay, so
we're able to compress on the fly.

77
00:05:58.100 --> 00:06:02.687
Let's try it again but
let's try it with Lorem, and

78
00:06:02.687 --> 00:06:07.180
we'll see that it creates
a somewhat bigger file.

79
00:06:07.180 --> 00:06:10.665
But that still is
significantly smaller at 226K,

80
00:06:10.665 --> 00:06:15.010
significantly smaller than the 1
gigabyte that we started with.

