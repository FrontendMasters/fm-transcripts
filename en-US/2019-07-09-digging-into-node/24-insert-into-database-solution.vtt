WEBVTT

1
00:00:00.140 --> 00:00:04.400
&gt;&gt; Kyle Simpson: Let's talk about how
to write the insertSomething function.

2
00:00:04.400 --> 00:00:07.797
To save myself a little bit of work, I'm
gonna do some copying and pasting here.

3
00:00:07.797 --> 00:00:11.910
So I'm gonna pull in this part and
then we'll just adopt it.

4
00:00:15.080 --> 00:00:17.060
&gt;&gt; Kyle Simpson: So
I'm gonna say var result = and

5
00:00:17.060 --> 00:00:20.850
we're gonna be doing a run
because we're doing an INSERT.

6
00:00:20.850 --> 00:00:22.130
We don't need to do the lookup here,

7
00:00:22.130 --> 00:00:26.200
we always unconditionally
insert the something value.

8
00:00:26.200 --> 00:00:29.140
We're gonna be inserting into Something.

9
00:00:29.140 --> 00:00:31.860
And the two fields that
we're gonna be inserting,

10
00:00:31.860 --> 00:00:36.610
if we look at our schema,
they're gonna be called otherID and data.

11
00:00:36.610 --> 00:00:44.900
So let's say,
&gt;&gt; Kyle Simpson: otherID and data.

12
00:00:46.330 --> 00:00:51.020
And then we're gonna have two values
that we're inserting into Something.

13
00:00:51.020 --> 00:00:54.726
And then we need to supply otherID and
data.

14
00:00:54.726 --> 00:00:57.620
if (result),

15
00:00:57.620 --> 00:01:03.050
and the object that comes back might still
indicate that Something didn't work.

16
00:01:03.050 --> 00:01:08.220
So to make sure that there really was
legitimately something that was changed

17
00:01:08.220 --> 00:01:13.480
about the database, like there was
a record added to the database.

18
00:01:13.480 --> 00:01:17.842
There's a property in here
called result.changes.

19
00:01:17.842 --> 00:01:19.770
If that is greater than 0,

20
00:01:19.770 --> 00:01:23.360
because that would indicate how many
rows where changed on the database.

21
00:01:23.360 --> 00:01:28.040
In this case, how many rows Inserted, as
long as that's greater than zero than 0,

22
00:01:28.040 --> 00:01:31.530
know that we definitely were
successful in inserting the record, so

23
00:01:31.530 --> 00:01:33.060
then we can simply return true.

24
00:01:35.970 --> 00:01:40.350
And if we don't get there, then we'll
just return false just for good measure.

25
00:01:50.200 --> 00:01:57.261
&gt;&gt; Kyle Simpson: Just to test ourselves
and make sure we haven't gone awry here,

26
00:01:57.261 --> 00:02:02.562
let's try console.log("Success!").

27
00:02:02.562 --> 00:02:06.570
Let's try to run this at the command
line and see if it works.

28
00:02:09.706 --> 00:02:14.491
&gt;&gt; Kyle Simpson: So
we're gonna say node ex4.js.

29
00:02:14.491 --> 00:02:17.690
And if we run it without anything,
it's gonna tell us out and

30
00:02:17.690 --> 00:02:19.330
you got to specify another.

31
00:02:19.330 --> 00:02:25.000
So if we say -- other =, And
then we give it some name like hello.

32
00:02:26.590 --> 00:02:27.720
Yep, something's wrong.

33
00:02:27.720 --> 00:02:28.590
So where was data?

34
00:02:30.596 --> 00:02:32.130
&gt;&gt; Kyle Simpson: That
says it's on line 113.

35
00:02:35.665 --> 00:02:38.188
&gt;&gt; Kyle Simpson: Of course,
cuz it's called something.

36
00:02:40.139 --> 00:02:40.680
&gt;&gt; Kyle Simpson: There we go.

37
00:02:42.830 --> 00:02:47.950
Try to run it again, we got a success
let's do it a couple of times, all right.

38
00:02:47.950 --> 00:02:50.243
So we know that things
are working there but

39
00:02:50.243 --> 00:02:52.482
let's see the contents of our database.

40
00:02:52.482 --> 00:02:56.890
So let's make one final
addition to this exercise.

41
00:02:56.890 --> 00:02:59.408
That if we have successfully inserted,

42
00:02:59.408 --> 00:03:02.376
let's get all the records
out of the database.

43
00:03:02.376 --> 00:03:07.366
So we're gonna say records
= await getAllRecords.

44
00:03:07.366 --> 00:03:11.284
And then, if we've received those records,

45
00:03:11.284 --> 00:03:18.825
if (records &amp;&amp; records.length &gt; 0), it
means there are records in the database.

46
00:03:18.825 --> 00:03:23.697
Then we wanna go ahead and
print out that array, so

47
00:03:23.697 --> 00:03:28.453
that's when we're gonna use console.table,

48
00:03:28.453 --> 00:03:35.650
which prints out a nice prettyfide
version of our two dimensional array.

49
00:03:37.340 --> 00:03:39.937
So we need to implement
the getAllRecords function.

50
00:03:47.057 --> 00:03:50.260
&gt;&gt; Kyle Simpson: We're going
to do join select here.

51
00:03:50.260 --> 00:03:55.040
So I'm going to say result = SQL3, and

52
00:03:55.040 --> 00:03:58.880
this time we're going to call .all because
we can get multiple records back instead

53
00:03:58.880 --> 00:04:03.266
of just one .all is going to give
us back an array of records.

54
00:04:05.370 --> 00:04:06.593
&gt;&gt; Kyle Simpson: I need an await there.

