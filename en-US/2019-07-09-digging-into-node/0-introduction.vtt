WEBVTT

1
00:00:00.100 --> 00:00:02.800
&gt;&gt; Kyle Simpson: Welcome
to Digging Into Node.

2
00:00:02.800 --> 00:00:07.530
In the year of 2019, which is the year
we're currently recording this,

3
00:00:07.530 --> 00:00:11.490
this is the ten-year anniversary
of Node.js being released.

4
00:00:11.490 --> 00:00:12.976
I'm actually really excited about that.

5
00:00:12.976 --> 00:00:17.314
Because I was at the conference
in Berlin in 2009,

6
00:00:17.314 --> 00:00:23.726
JSConf EU in Berlin in 2009, when a
relatively unknown Ryan Dahl stood up and

7
00:00:23.726 --> 00:00:28.050
introduced this thing
called Node to the world.

8
00:00:28.050 --> 00:00:32.893
And we all lost our minds with excitement
over, we could tell what a huge

9
00:00:32.893 --> 00:00:37.513
inflection point that was gonna mean for
the future of JavaScript.

10
00:00:37.513 --> 00:00:43.411
And the last ten years have really shown
just how monumental of a change that was,

11
00:00:43.411 --> 00:00:49.390
where JavaScript could very easily have
begun to fade into some obscurity.

12
00:00:49.390 --> 00:00:53.740
And it was just the right timing to
reinvigorate a lot of excitement in

13
00:00:53.740 --> 00:00:54.810
JavaScript.

14
00:00:54.810 --> 00:00:59.410
And now you couldn't hardly
find a production stack

15
00:00:59.410 --> 00:01:02.650
of any significant scale that doesn't
at least in some way, shape, or

16
00:01:02.650 --> 00:01:06.890
form, include JavaScript,
and often Node.js.

17
00:01:06.890 --> 00:01:12.563
Certainly all the big players seem to
be using Node.js in one way or another,

18
00:01:12.563 --> 00:01:17.818
from the Netflixes of the world and
Walmarts, to mid-level players.

19
00:01:17.818 --> 00:01:20.468
It's probably even more
popular with startups,

20
00:01:20.468 --> 00:01:24.900
because it's very low barrier to entry in
terms of getting a platform up and going.

21
00:01:24.900 --> 00:01:29.885
So Node definitely,
permanently re-wrote the future path

22
00:01:29.885 --> 00:01:34.683
of where JavaScript was, and
that's an exciting thing.

23
00:01:34.683 --> 00:01:40.430
I wanna talk just a moment about
framing what Node.js is about.

24
00:01:40.430 --> 00:01:43.850
Because it means a lot of different
things to a lot of different people.

25
00:01:43.850 --> 00:01:49.118
And anecdotally, to frame that,
I wanna talk about what I was

26
00:01:49.118 --> 00:01:55.112
doing in late 2008 and early 2009,
prior to Node coming out.

27
00:01:55.112 --> 00:01:59.367
I had been, at that point, a developer for
about a decade, about ten years or so,

28
00:01:59.367 --> 00:02:02.036
eight or nine years,
I guess something like that.

29
00:02:02.036 --> 00:02:04.271
I'd been a programmer for a while, and

30
00:02:04.271 --> 00:02:07.760
had bounced around to a bunch
of different tech stacks.

31
00:02:07.760 --> 00:02:11.470
But at that point, I was definitely like,
I really like JavaScript.

32
00:02:11.470 --> 00:02:13.980
I wanna focus entirely on JavaScript.

33
00:02:13.980 --> 00:02:18.826
And so I was shifting my career away
from doing things like PHP or .NET,

34
00:02:18.826 --> 00:02:21.920
to I just wanna write
my code in JavaScript.

35
00:02:21.920 --> 00:02:28.400
And at the time, I was still dealing
with having to write back-end

36
00:02:28.400 --> 00:02:34.110
code in one of those languages for
wherever I worked, but begrudgingly so.

37
00:02:34.110 --> 00:02:36.060
I would do the bare minimum on the server,
and

38
00:02:36.060 --> 00:02:39.420
then try to bootstrap as much
of it as I could in the client.

39
00:02:39.420 --> 00:02:41.550
Give me an HTML file,
give me a JavaScript file.

40
00:02:41.550 --> 00:02:44.170
And I remember actually
saying literally that.

41
00:02:44.170 --> 00:02:47.265
I showed up at a job and
they were a Grail's back-end,

42
00:02:47.265 --> 00:02:51.456
which is Groovy on Rails, which is
this Java flavor variant or whatever.

43
00:02:51.456 --> 00:02:54.489
And I was supposed to build
this very client front-end,

44
00:02:54.489 --> 00:02:57.940
embed-able widget thing for
other people's websites.

45
00:02:57.940 --> 00:03:00.680
Didn't need to do
anything with the server.

46
00:03:00.680 --> 00:03:04.090
And I said to the tech lead on
my literal first day at work,

47
00:03:04.090 --> 00:03:06.020
I was like, all right, I'm ready to go.

48
00:03:06.020 --> 00:03:07.440
I know how to write this.

49
00:03:07.440 --> 00:03:10.890
I need an empty HTML file and
an empty JavaScript file.

50
00:03:10.890 --> 00:03:14.700
Put it somewhere on the server, tell me
where it's at, and I'll take it from here.

51
00:03:14.700 --> 00:03:18.879
And he paused awkwardly for
several moments, and

52
00:03:18.879 --> 00:03:23.655
then he picked up this giant book called,
I don't know,

53
00:03:23.655 --> 00:03:26.359
the Grails Bible or something.

54
00:03:26.359 --> 00:03:29.180
I don't know what it was called,
but some big, giant book on Grails.

55
00:03:29.180 --> 00:03:32.483
And he said you're gonna need to
read chapters four through six of

56
00:03:32.483 --> 00:03:35.663
this book to figure out how to set
up all the routes and stuff, so

57
00:03:35.663 --> 00:03:38.626
that you can get an HTML and
JavaScript file on our server.

58
00:03:38.626 --> 00:03:44.280
And I had that sorta metaphorical jaw drop
moment, like you've gotta be kidding me.

59
00:03:44.280 --> 00:03:48.230
I'm doing all front-end stuff, and
yet I've gotta work with the back-end?

60
00:03:48.230 --> 00:03:52.200
How ridiculous is this premise?

61
00:03:52.200 --> 00:03:55.759
And so I didn't read that book.

62
00:03:55.759 --> 00:03:59.322
[LAUGH] I asked a co-worker to
make me the two empty files.

63
00:03:59.322 --> 00:04:03.504
[LAUGH] Because I didn't really
wanna spend my mental energy

64
00:04:03.504 --> 00:04:06.130
focusing on something like Grails.

65
00:04:06.130 --> 00:04:09.240
Not to say anything bad about Grails,
but that's not where I wanted to be.

66
00:04:09.240 --> 00:04:12.896
I wanted to play in
the space of JavaScript.

67
00:04:12.896 --> 00:04:18.420
And so
I share this story because that's really

68
00:04:18.420 --> 00:04:23.190
what started me curious about, well, how
could I do all of my code in JavaScript?

69
00:04:24.490 --> 00:04:28.320
What's wrong with this picture where I
have to go learn some other platform

70
00:04:28.320 --> 00:04:31.070
entirely, some other language entirely,
just so

71
00:04:31.070 --> 00:04:33.320
I can do some stuff with JavaScript?

72
00:04:33.320 --> 00:04:35.420
And I started thinking
about code architecture,

73
00:04:35.420 --> 00:04:39.380
and I reflected back upon
a lot of jobs that I'd had.

74
00:04:39.380 --> 00:04:44.140
I'd worked at jobs that WordPress was
the platform, if you can believe it.

75
00:04:44.140 --> 00:04:47.180
And I worked at jobs where
.NET was the platform, and

76
00:04:47.180 --> 00:04:49.770
Python with Django was the platform.

77
00:04:49.770 --> 00:04:54.660
And I saw something interesting,
consistent across all of those,

78
00:04:54.660 --> 00:04:57.772
which was almost a contempt for

79
00:04:57.772 --> 00:05:03.816
everything front-end from the people
that built the back-end systems.

80
00:05:03.816 --> 00:05:09.980
That they sorta considered anything HTML,
CSS, or JavaScript to be as impure and

81
00:05:09.980 --> 00:05:14.279
dirty as possible, and so
we want to abstract it as far as possible.

82
00:05:15.890 --> 00:05:20.260
It's kinda the Java serverless approach
to things, like I wanna write Java and

83
00:05:20.260 --> 00:05:23.020
have somebody generate
all of that code for me.

84
00:05:23.020 --> 00:05:26.870
I don't ever wanna see a line
of JavaScript, or HTML, or CSS.

85
00:05:26.870 --> 00:05:31.320
And I saw that consistently
across a lot of platforms.

86
00:05:31.320 --> 00:05:36.210
And what occurred to me as I
was reflecting upon this, and

87
00:05:36.210 --> 00:05:39.910
frustrated with the constraints of
the particular one I was at, at the time,

88
00:05:39.910 --> 00:05:44.650
which was Grails, what frustrated me was,
why is it that there are so

89
00:05:44.650 --> 00:05:47.500
many things that are related
to the front-end, but

90
00:05:47.500 --> 00:05:51.166
they're buried deep down
inside the guts of a back-end?

91
00:05:51.166 --> 00:05:54.870
And a front-end developer can't touch
them without going into all of this

92
00:05:54.870 --> 00:05:56.540
ridiculousness.

93
00:05:56.540 --> 00:06:01.860
Why isn't the stuff that relates to
the front-end adjacent to the front-end?

94
00:06:01.860 --> 00:06:03.900
Why isn't it nearer to the front-end?

95
00:06:03.900 --> 00:06:08.020
And in fact, why isn't it using
Web-friendly technologies?

96
00:06:08.020 --> 00:06:11.780
Why is it that we're building these
systems that are very stratified,

97
00:06:11.780 --> 00:06:17.378
where 90% of everything that needs to
get done happens in this back-end, and

98
00:06:17.378 --> 00:06:21.190
the back-end choice entirely determines
what you can do in the front-end?

99
00:06:21.190 --> 00:06:25.710
I had a job, remember I said I had
a job at a Python Django shop one time.

100
00:06:25.710 --> 00:06:28.510
And I remember building
this front-end piece.

101
00:06:28.510 --> 00:06:31.540
And we had this page,
it was an admin portal page

102
00:06:31.540 --> 00:06:34.560
where there were a bunch of settings,
a bunch of check boxes.

103
00:06:34.560 --> 00:06:39.550
And I remember wanting to submit,
in a form submit, wanting to

104
00:06:39.550 --> 00:06:45.064
submit all of those check boxes, or maybe
they were radio buttons or something.

105
00:06:45.064 --> 00:06:48.546
I think that maybe they were radio
buttons, but radio buttons or check boxes,

106
00:06:48.546 --> 00:06:49.990
submit a bunch of these things.

107
00:06:49.990 --> 00:06:54.127
And if you know much about how you can
do that in forms, you can actually

108
00:06:54.127 --> 00:06:58.630
submit it as an array of values,
an array of true falses from HTML post.

109
00:06:58.630 --> 00:07:00.860
And that's obviously
the most natural thing.

110
00:07:00.860 --> 00:07:06.000
Embrace what the HTML does, just doing
a form post and post these things.

111
00:07:06.000 --> 00:07:07.670
Well, no, no, no, that's not gonna work.

112
00:07:07.670 --> 00:07:11.418
Because our Python Django routing thing,

113
00:07:11.418 --> 00:07:15.700
it doesn't know how to
handle arrays of values.

114
00:07:15.700 --> 00:07:20.070
So I had to go do all of this
ridiculous extra work on the front-end

115
00:07:20.070 --> 00:07:25.130
to generate actual unique names for
every single one of those elements.

116
00:07:25.130 --> 00:07:29.630
So that everything that came through
to the server was uniquely named, so

117
00:07:29.630 --> 00:07:32.350
that their routing system
could handle it or whatever.

118
00:07:32.350 --> 00:07:33.730
It's that kinda nonsense.

119
00:07:33.730 --> 00:07:36.270
Why do we bastardize what
we're doing on the front-end

120
00:07:36.270 --> 00:07:38.400
because of some constraints
on the back-end?

121
00:07:38.400 --> 00:07:39.700
This never made any sense to me.

122
00:07:39.700 --> 00:07:42.830
And so what I began to formulate
were these thoughts like,

123
00:07:42.830 --> 00:07:45.150
we need something in between these two.

