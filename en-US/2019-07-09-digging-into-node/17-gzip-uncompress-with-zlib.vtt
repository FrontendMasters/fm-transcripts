WEBVTT

1
00:00:00.280 --> 00:00:02.870
&gt;&gt; Kyle Simpson: Okay, so
we are able to compress.

2
00:00:02.870 --> 00:00:08.080
The next logical step would be
to uncompress our input stream,

3
00:00:08.080 --> 00:00:09.340
decompress our input stream.

4
00:00:10.470 --> 00:00:14.800
So let's go and add an uncompress.

5
00:00:14.800 --> 00:00:17.310
I don't know whether we should call
it uncompress or decompress, but

6
00:00:17.310 --> 00:00:18.970
I wanna to call it uncompress.

7
00:00:18.970 --> 00:00:20.990
Uncompress as a boolean flag.

8
00:00:22.460 --> 00:00:24.688
Add it to our printHelp output.

9
00:00:42.103 --> 00:00:46.043
&gt;&gt; Kyle Simpson: And then we know in
a our process file that we're gonna

10
00:00:46.043 --> 00:00:49.908
be handled an input stream
which may have been Gzip.

11
00:00:49.908 --> 00:00:53.186
So before our transformation stream,

12
00:00:53.186 --> 00:00:57.550
we need to insert a step
that does the G unzipping.

13
00:00:57.550 --> 00:01:02.809
So if args.uncompress has been set

14
00:01:02.809 --> 00:01:08.592
that we want to do some decompression,

15
00:01:08.592 --> 00:01:14.028
we're gonna say, let gunzipStream

16
00:01:14.028 --> 00:01:18.776
equal to zlib.createGunzip.

17
00:01:18.776 --> 00:01:23.110
I do not know why
the capitalization worked that way.

18
00:01:23.110 --> 00:01:25.520
That looks so weird to me,
it looks like Gunzip, but

19
00:01:25.520 --> 00:01:28.710
whatever that's how it's spelled.

20
00:01:28.710 --> 00:01:34.360
So that makes our decompression,
our Gzip uncompression transform stream.

21
00:01:34.360 --> 00:01:38.018
And then the same pattern,

22
00:01:38.018 --> 00:01:43.107
we're gonna say outStream is equal to

23
00:01:43.107 --> 00:01:48.844
outStream.pipe into our gunzipStream.

24
00:01:50.566 --> 00:01:52.590
&gt;&gt; Kyle Simpson: Let's go try this.

25
00:01:52.590 --> 00:01:57.820
First of all,
we'll just have a dash dash out.

26
00:01:59.750 --> 00:02:03.978
And the file that we wanna
use is not the lorem,

27
00:02:03.978 --> 00:02:07.675
we wanna use our current out.txt.gz.

28
00:02:07.675 --> 00:02:11.360
So there's our gzip compressed thing.

29
00:02:11.360 --> 00:02:17.640
So we need to say,
--uncompress and then --out,

30
00:02:17.640 --> 00:02:22.350
which should print the lorem ipsum
uncompressed to our standard out.

31
00:02:23.400 --> 00:02:24.770
So first we will,

32
00:02:27.874 --> 00:02:32.603
&gt;&gt; Kyle Simpson: Make our out.txt.gz.

33
00:02:35.924 --> 00:02:40.825
&gt;&gt; Kyle Simpson: There's
our 266K out.txt.gz, and

34
00:02:40.825 --> 00:02:46.151
then I will cut out.txt.gz into ex2.js.

35
00:02:49.718 --> 00:02:53.910
&gt;&gt; Kyle Simpson: And we will uncompress.

36
00:02:53.910 --> 00:02:56.320
And we'll pull it from the input.

37
00:02:56.320 --> 00:02:58.480
And we'll write it to the output.

38
00:02:58.480 --> 00:02:59.840
And then, we're seeing the whole thing.

39
00:03:01.080 --> 00:03:06.000
So now we're able to input,
we're able to unzip on the inbound.

40
00:03:06.000 --> 00:03:08.088
We're able to zip on the outbound.

41
00:03:08.088 --> 00:03:10.620
We're able to mix and
match those as we see fit.

42
00:03:10.620 --> 00:03:17.012
And the inputs can either be from
a file system or from our standard in.

43
00:03:18.520 --> 00:03:21.280
Last thing I forgot about our ex,

44
00:03:21.280 --> 00:03:24.160
just to make sure we don't
confuse ourselves is we should be

45
00:03:24.160 --> 00:03:28.914
updating each time we make a new file,
updating that to say ex2s instead of ex1.

46
00:03:30.840 --> 00:03:33.730
So that's it for the exercise two section.

47
00:03:36.270 --> 00:03:38.420
&gt;&gt; Speaker 2: The output
of the uncompressed,

48
00:03:38.420 --> 00:03:42.222
I'm sorry of the compressed gzip output.

49
00:03:42.222 --> 00:03:43.200
&gt;&gt; Kyle Simpson: It's
the gzip binary data.

50
00:03:43.200 --> 00:03:43.789
&gt;&gt; Speaker 2: Binary.

51
00:03:43.789 --> 00:03:45.456
&gt;&gt; Kyle Simpson: Yes, it's binary data.

52
00:03:45.456 --> 00:03:49.580
You're asking in here?

53
00:03:49.580 --> 00:03:50.450
These are all streams, right?

54
00:03:50.450 --> 00:03:53.612
So inputs are coming in
as binary buffers and

55
00:03:53.612 --> 00:03:56.607
outputs are going out as binary buffers.

56
00:03:56.607 --> 00:04:00.913
The only time that it's ever in string
form is temporarily when we transform it

57
00:04:00.913 --> 00:04:02.740
from lowercase to uppercase.

58
00:04:02.740 --> 00:04:04.980
But then as soon as it goes
through its next step,

59
00:04:04.980 --> 00:04:06.650
it's now back to being a binary buffer.

60
00:04:06.650 --> 00:04:07.390
As a matter of fact,

61
00:04:07.390 --> 00:04:12.610
when we do a this.push and we push this
thing in, it turns it back into a buffer.

62
00:04:12.610 --> 00:04:16.710
So internally the streams are just moving
buffers along from pipe to pipe to pipe.

63
00:04:18.078 --> 00:04:23.614
&gt;&gt; Speaker 3: This .push it's not
overriding the .push method on

64
00:04:23.614 --> 00:04:28.274
a raise because this here refers to the-
&gt;&gt; Kyle Simpson: You're

65
00:04:28.274 --> 00:04:29.820
talking about right here?

66
00:04:29.820 --> 00:04:31.031
&gt;&gt; Speaker 3: Yep.
&gt;&gt; Kyle Simpson: Yeah, the transformed

67
00:04:31.031 --> 00:04:32.930
stream is not actually an array.

68
00:04:32.930 --> 00:04:33.500
&gt;&gt; Speaker 3: Yes, so I mean yeah.

69
00:04:33.500 --> 00:04:36.635
&gt;&gt; Kyle Simpson: It just happens to
look kind of like an array since we're

70
00:04:36.635 --> 00:04:37.920
calling .push on it.

71
00:04:37.920 --> 00:04:41.824
But this is just an object that
they define a push method on.

72
00:04:41.824 --> 00:04:42.324
&gt;&gt; Speaker 3: Cool.

