WEBVTT

1
00:00:00.490 --> 00:00:06.420
To serve the files, what we need to
do is to listen for another event.

2
00:00:06.420 --> 00:00:11.458
It's called fetch,
the fetch event handler.

3
00:00:11.458 --> 00:00:12.466
And this is how it looks like.

4
00:00:15.266 --> 00:00:21.058
What we're going to do,
is the event argument

5
00:00:21.058 --> 00:00:27.453
that we received has
a method called respondWith.

6
00:00:27.453 --> 00:00:32.451
It receives as an argument or
an HTTP response, or

7
00:00:32.451 --> 00:00:35.551
a promise of an HTTP response.

8
00:00:35.551 --> 00:00:39.570
So it can be a sync response or
an async response.

9
00:00:40.630 --> 00:00:47.542
So for example, just for testing this,
I can create my own response like this.

10
00:00:47.542 --> 00:00:51.163
Now, JavaScript because now
we can create web servers or

11
00:00:51.163 --> 00:00:55.322
kind of web servers,
I'm going to create a new response object.

12
00:00:55.322 --> 00:00:59.225
So we have a constructor or
a class if you want,

13
00:00:59.225 --> 00:01:05.343
responseR that receives a content
like hello, I'm a response, okay?

14
00:01:05.343 --> 00:01:09.504
So I'm going to respond
with that response.

15
00:01:09.504 --> 00:01:14.332
So this is like if you have
experienced with node JS,

16
00:01:14.332 --> 00:01:21.814
this is like serving like the rest don't
write something like that, on node JS.

17
00:01:21.814 --> 00:01:23.531
So let's see what happens.

18
00:01:25.522 --> 00:01:29.871
I'm going back to Chrome,
I'm going to refresh.

19
00:01:29.871 --> 00:01:37.281
And now I see hello, I'm in response,
I'm not even seeing my HTML.

20
00:01:37.281 --> 00:01:39.411
Where is my HTML?

21
00:01:39.411 --> 00:01:44.438
Well, now the server,
that is the service worker says,

22
00:01:44.438 --> 00:01:47.492
this is the content that you want.

23
00:01:47.492 --> 00:01:54.761
So any URL that we try, any URL, even
URLs that we know that they don't exist,

24
00:01:54.761 --> 00:02:00.502
will actually answer hello,
I'm a response, that's all.

25
00:02:00.502 --> 00:02:06.860
So we can just kill our
website in one second.

26
00:02:06.860 --> 00:02:10.747
So if you upload the service
worker to an actual real website,

27
00:02:10.747 --> 00:02:12.555
your website will not work.

28
00:02:12.555 --> 00:02:17.131
And it will say, hello,
I'm a response on every URL.

29
00:02:17.131 --> 00:02:20.669
There is one trick though,
without using that tools.

30
00:02:20.669 --> 00:02:25.952
If you do shift+refresh,
it will bypass the service worker.

31
00:02:25.952 --> 00:02:30.791
So Shift+Refresh will give me a 404,
a real 404 because yeah,

32
00:02:30.791 --> 00:02:34.899
now it's bypassing the service worker,
the middleware.

33
00:02:34.899 --> 00:02:39.812
And if I try the homepage will
Shift+Refresh you can see my HTML

34
00:02:39.812 --> 00:02:40.652
is there.

35
00:02:40.652 --> 00:02:47.221
But if I refresh, normal refresh without
Shift, my service worker will respond.

36
00:02:47.221 --> 00:02:52.664
So this is how you synthesize
responses with a service worker,

37
00:02:52.664 --> 00:02:55.370
you shall say respond in one.

38
00:02:55.370 --> 00:03:00.510
So do we have any tool to know if
there are assets in the cache or not?

39
00:03:00.510 --> 00:03:03.672
We have an API and we're going to
see the API in a couple of minutes.

40
00:03:03.672 --> 00:03:08.562
So we can query the cache to see
if an asset is there or not.

41
00:03:08.562 --> 00:03:12.738
As a developer the tool to check
is this one, exactly this one.

42
00:03:12.738 --> 00:03:16.258
So you go to Dev Tools application,
cache storage and

43
00:03:16.258 --> 00:03:18.849
you can see if the asset is there or not.

44
00:03:18.849 --> 00:03:24.139
And in terms of libraries, if you don't
wanna write your own service worker,

45
00:03:24.139 --> 00:03:27.922
the the one that you're looking for
is called workbox.

46
00:03:27.922 --> 00:03:32.602
Workbox, it's a library
by the Chrome team,

47
00:03:32.602 --> 00:03:38.482
workbox JS,
that will actually make this easier, okay?

48
00:03:38.482 --> 00:03:42.002
So it's like, someone told me once,

49
00:03:42.002 --> 00:03:46.188
is like the jQuery of service worker,
okay?

50
00:03:46.188 --> 00:03:52.300
It's the library that you wanna use
when you're doing mid to large PWAs.

51
00:03:52.300 --> 00:03:56.769
And actually, if you're using
the Angular CLI, the Vue CLI,

52
00:03:56.769 --> 00:03:59.384
or the create-react-app CLI, and

53
00:03:59.384 --> 00:04:04.382
you're creating progressive web
apps with those build chain tools.

54
00:04:04.382 --> 00:04:07.675
Actually, they're using
workbox behind the scenes.

55
00:04:07.675 --> 00:04:09.955
So this is probably the library
that you are looking for.

56
00:04:12.396 --> 00:04:16.269
So of course,
these response can actually be different.

57
00:04:16.269 --> 00:04:22.026
For example,
I can change this to a template of string,

58
00:04:22.026 --> 00:04:27.920
and I can ask for the URL,
the event has a request option.

59
00:04:29.880 --> 00:04:32.403
And that request option has a URL.

60
00:04:32.403 --> 00:04:35.521
So this is actually
similar to one in node JS,

61
00:04:35.521 --> 00:04:39.062
you receive the request and
you return a response.

62
00:04:39.062 --> 00:04:43.067
Well, you have all the option,
you have the headers, the cookies,

63
00:04:43.067 --> 00:04:46.728
everything because,
you are acting in the name of a server, so

64
00:04:46.728 --> 00:04:49.231
you can see everything the server can see.

65
00:04:49.231 --> 00:04:55.012
So now the difference is that if
I refresh, Now, I see the URL,

66
00:04:55.012 --> 00:05:00.270
so any URL that I'm trying to load,
it's actually part of the response.

67
00:05:00.270 --> 00:05:03.983
So I'm like echoing the URL, okay?

68
00:05:03.983 --> 00:05:08.348
Of course, this is useless,
but I think that you

69
00:05:08.348 --> 00:05:13.820
can get an idea of how powerful
the service worker is.

70
00:05:13.820 --> 00:05:20.351
Because now using that URL,
you can serve something different for

71
00:05:20.351 --> 00:05:26.308
example, if the URL is /fake,
I'm going to use this code.

72
00:05:26.308 --> 00:05:29.592
And if not, I will just leave it as it is.

73
00:05:29.592 --> 00:05:32.127
So I'm not going to
respond with in that case,

74
00:05:32.127 --> 00:05:35.774
it will bypass the service worker and
it will go into the next work.

75
00:05:35.774 --> 00:05:42.103
So with this code, now, if I look for
the CSS, I'm getting the CSS,

76
00:05:42.103 --> 00:05:47.362
and if I'm getting the homepage,
I'm getting the PWA.

77
00:05:47.362 --> 00:05:51.503
So if I try /fake,
I might still get a 404.

78
00:05:51.503 --> 00:05:57.044
So the service worker is not acting
because the URL is always absolute.

79
00:05:57.044 --> 00:06:01.060
So I need to actually say,
localhost 5000 fake.

80
00:06:01.060 --> 00:06:06.084
If you don't wanna do that,
there is a URL API in JavaScript,

81
00:06:06.084 --> 00:06:11.026
so you can actually take each part and
look for the path only.

82
00:06:14.672 --> 00:06:20.179
And now /fake will give me
the synthesize response.

83
00:06:20.179 --> 00:06:23.123
So when you're writing
your own service worker,

84
00:06:23.123 --> 00:06:26.777
you need to be very careful
about what you're doing, right?

85
00:06:26.777 --> 00:06:30.521
Because you can actually mess
with the navigation of your app.

86
00:06:30.521 --> 00:06:35.211
Fortunately for you, you just need to
upload a new version, if you have a bug or

87
00:06:35.211 --> 00:06:38.352
something and
the browser has an update algorithm.

88
00:06:38.352 --> 00:06:42.581
So without that they don't reload there
is an update algorithm going on here.

89
00:06:42.581 --> 00:06:46.493
So when the browser realized
that there is a new version,

90
00:06:46.493 --> 00:06:50.008
it will prepare that new version for
the next user.

91
00:06:50.008 --> 00:06:55.915
So you always have one version of
the service worker that will be old but

92
00:06:55.915 --> 00:07:01.841
then on the next load, like in one
minute after the old one was killed.

93
00:07:01.841 --> 00:07:07.944
On the next one, you will see the new one,
the new service worker instance.

94
00:07:07.944 --> 00:07:12.869
So the service worker is a new paradigm
on the web, is really powerful but

95
00:07:12.869 --> 00:07:18.060
you need to know what you're doing
because if not, you will have problems.

