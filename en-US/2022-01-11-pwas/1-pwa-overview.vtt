WEBVTT

1
00:00:00.604 --> 00:00:02.951
Let's try to understand the PWA.

2
00:00:02.951 --> 00:00:08.244
And compare the PWA platform with other
approaches, App Development Approaches.

3
00:00:08.244 --> 00:00:13.490
And, when we are talking about apps,
most people think about Native SDKs.

4
00:00:13.490 --> 00:00:18.092
As I mentioned before,
we're talking about Kotlin for Android and

5
00:00:18.092 --> 00:00:21.805
maybe Android Studio, or
we are talking about Swift or

6
00:00:21.805 --> 00:00:25.133
Objective C for iOS, or
even .NET for Windows.

7
00:00:25.133 --> 00:00:30.046
Well, that's something that typically
we don't know as web developers.

8
00:00:30.046 --> 00:00:33.441
And also we have web development,
something that we like, right?

9
00:00:33.441 --> 00:00:35.577
We are here, so we like the web.

10
00:00:35.577 --> 00:00:40.170
And we typically think that,
and we are right by the way,

11
00:00:40.170 --> 00:00:46.123
that Native SDKs will actually compile or
will target specific devices.

12
00:00:46.123 --> 00:00:49.955
So, if you create an app that works for
Android,

13
00:00:49.955 --> 00:00:54.171
it's actually only available for
Android devices.

14
00:00:54.171 --> 00:00:57.993
It's for one specific device or
one specific platform.

15
00:00:57.993 --> 00:01:02.966
Maybe you're thinking, hey Max, but we do
have some cross platform solutions such

16
00:01:02.966 --> 00:01:05.638
as React Native, NativeScript, Flutter.

17
00:01:05.638 --> 00:01:11.756
Well, in those cases, you also need to
create different packages per platform.

18
00:01:11.756 --> 00:01:14.243
So even if it's the same source code,

19
00:01:14.243 --> 00:01:19.312
you still need to make different
packages because they're not compatible.

20
00:01:19.312 --> 00:01:25.395
And you know, we know, that when we
are under the web development universe,

21
00:01:25.395 --> 00:01:29.150
we are actually targeting the browser,
okay?

22
00:01:29.150 --> 00:01:34.306
So the user actually needs to
open the browser, type the URL,

23
00:01:34.306 --> 00:01:40.140
or search in the search engine,
or find our content somehow.

24
00:01:40.140 --> 00:01:42.403
But we always have the browser right?

25
00:01:42.403 --> 00:01:47.555
In between, we have a solution,
and I would like to say

26
00:01:47.555 --> 00:01:53.046
we used to have a solution,
known as hybrid development.

27
00:01:53.046 --> 00:01:57.737
If you have ever heard about,
Adobe PhoneGap, or Apache Cordova,

28
00:01:57.737 --> 00:01:59.728
we're talking about this.

29
00:01:59.728 --> 00:02:05.721
In this case, we were taking a web app,
web development, and Native SDKs, and

30
00:02:05.721 --> 00:02:11.726
we were creating an app for one particular
device as well, not for the browser.

31
00:02:11.726 --> 00:02:14.718
So PhoneGap is not for the browser.

32
00:02:14.718 --> 00:02:20.359
And at this point you're asking,
okay, where is PWA?

33
00:02:20.359 --> 00:02:25.910
Well, a PWA as I mentioned before,
it's the current DNA of the web.

34
00:02:25.910 --> 00:02:27.689
So it's pure web.

35
00:02:27.689 --> 00:02:32.989
We don't have any native SDK
involvement as with hybrids.

36
00:02:32.989 --> 00:02:35.465
This is pure web.

37
00:02:35.465 --> 00:02:37.995
And because it's pure web,
we are targeting the browser.

38
00:02:39.445 --> 00:02:41.165
But it's not just the browser.

39
00:02:41.165 --> 00:02:46.680
And here comes the nice part,
we can also target specific devices.

40
00:02:46.680 --> 00:02:51.367
So, our app now will work
in the browser as before,

41
00:02:51.367 --> 00:02:56.275
but it's also available
as a device-specific app.

42
00:02:56.275 --> 00:03:02.868
So on Android for example, it can actually
become an APK, that's an Android package.

43
00:03:02.868 --> 00:03:09.677
On the desktop, it can become
a Windows package or a Mac OS package.

44
00:03:09.677 --> 00:03:14.009
And for that,
we don't need to do any additional work

45
00:03:14.009 --> 00:03:17.008
from what we're going to see today.

46
00:03:17.008 --> 00:03:22.966
So it's just JavaScript, JSON,
HTML, CSS, and standards.

47
00:03:22.966 --> 00:03:25.779
We don't need to install any SDK.

48
00:03:25.779 --> 00:03:29.800
We don't need to know anything
about native development.

49
00:03:29.800 --> 00:03:34.032
So that's the idea of
the progressive web apps platform.

50
00:03:34.032 --> 00:03:39.403
Before actually seeing a PWA in action,
we are trying to bring

51
00:03:39.403 --> 00:03:45.104
the best of these two universes,
the web, and the native world.

52
00:03:45.104 --> 00:03:49.943
From the web, we want everything
that we love about the web.

53
00:03:49.943 --> 00:03:54.393
For example, links and
the ability to discover content and

54
00:03:54.393 --> 00:03:56.983
services from different places.

55
00:03:56.983 --> 00:04:03.184
It can be social media, it can be SEO,
and finding content on Google.

56
00:04:03.184 --> 00:04:07.425
And we want that also in the PWA platform.

57
00:04:07.425 --> 00:04:11.290
And that we just copy and paste a link, or

58
00:04:11.290 --> 00:04:17.318
share the current URL with a friend,
send that over a message,

59
00:04:17.318 --> 00:04:23.607
or WhatsApp, or Email,
we can still do that in the PWA platform.

60
00:04:23.607 --> 00:04:25.838
Also, deploying a website,

61
00:04:25.838 --> 00:04:30.487
it's actually simple compared
with deploying a native app.

62
00:04:30.487 --> 00:04:35.420
For example, a native app for
iOS or Android needs packaging.

63
00:04:35.420 --> 00:04:37.387
So you need to package your app.

64
00:04:37.387 --> 00:04:40.385
That includes of course,
compiling the app first.

65
00:04:40.385 --> 00:04:45.808
So you compile, you package, you need to
sign the app, you need to upload the app.

66
00:04:45.808 --> 00:04:49.021
And for that you need a publisher account,
and pay for that.

67
00:04:49.021 --> 00:04:53.512
And you need to wait for
the QA team within the stores

68
00:04:53.512 --> 00:04:57.907
to actually test your app,
and improve your app.

69
00:04:57.907 --> 00:05:04.486
So, on the web, you just deploy
your files on a server, using Git.

70
00:05:04.486 --> 00:05:11.050
Or even if you want, classic FTP, or you
copy the files in the server, that's all.

71
00:05:11.050 --> 00:05:16.753
And that's all we need to publish a PWA
as well because a PWA is a website.

72
00:05:16.753 --> 00:05:18.879
I'm going to repeat
that a couple of times.

73
00:05:18.879 --> 00:05:24.306
And it's not just easy to deploy,
it's easy to update.

74
00:05:24.306 --> 00:05:28.152
What happens if you find
a bug in your website?

75
00:05:28.152 --> 00:05:35.871
You change the file, and you deploy that
file only to the server, that's all.

76
00:05:35.871 --> 00:05:38.638
What happens if you find
a bug in a native app?

77
00:05:38.638 --> 00:05:43.189
You need to recompile,
repackage, resign, re-upload.

78
00:05:43.189 --> 00:05:47.600
You need to wait for the QA team
to actually check your app again.

79
00:05:47.600 --> 00:05:53.227
And also you need to wait for all your
users to download the new binary package.

80
00:05:53.227 --> 00:05:55.310
And that takes a lot of time.

81
00:05:55.310 --> 00:05:59.721
Well, in the PWA world,
we have the same way to

82
00:05:59.721 --> 00:06:04.690
update a website, we just change the file.

83
00:06:04.690 --> 00:06:08.683
We upload a new JavaScript file,
or a new CSS file, and that's all.

84
00:06:08.683 --> 00:06:14.062
And the other thing that we love,
is that we can use standards,

85
00:06:14.062 --> 00:06:18.843
specs that we know, and
every tool that we're used to.

86
00:06:18.843 --> 00:06:23.144
I mean, if you like React, you can
use React, ifyou like VJS, go ahead.

87
00:06:23.144 --> 00:06:27.379
Even if you like jQuery,
you're gonna still use jQuery for PWAs.

88
00:06:27.379 --> 00:06:32.195
Anything that works on the web,
works actually in a PWA.

89
00:06:32.195 --> 00:06:36.964
So all the tools that you know and love,
are actually available in this platform.

90
00:06:36.964 --> 00:06:41.174
But, here this is just the web, right?

91
00:06:41.174 --> 00:06:44.358
This is not enough.

92
00:06:44.358 --> 00:06:46.613
It feels like we need more.

93
00:06:46.613 --> 00:06:52.832
And that's what we're going to bring from
the native universe to the PWA platform.

94
00:06:52.832 --> 00:06:57.735
And here,
we're going to have offline access.

95
00:06:57.735 --> 00:07:01.984
Something that I don't wanna say
it wasn't possible before but

96
00:07:01.984 --> 00:07:03.880
it was actually difficult.

97
00:07:03.880 --> 00:07:08.872
If you have ever played with app cache or
application cache that is currently

98
00:07:08.872 --> 00:07:12.928
deprecated on the web,
it was actually really problematic.

99
00:07:12.928 --> 00:07:17.997
So, having reliable offline access
to our web content, or web services,

100
00:07:17.997 --> 00:07:22.837
it's actually something that we're
bringing from the native world.

101
00:07:22.837 --> 00:07:26.723
I mean, if you're offline, if you're
on a plane without Wi-Fi, actually,

102
00:07:26.723 --> 00:07:28.413
you can open all your native apps.

103
00:07:28.413 --> 00:07:32.047
Yeah, maybe not all of them
will work completely, but

104
00:07:32.047 --> 00:07:36.789
at least they will appear,
they will render their own user interface.

105
00:07:36.789 --> 00:07:41.189
And you won't see a message,
never a message from the browser.

106
00:07:41.189 --> 00:07:45.032
Well, we want that also here,
and we will get it.

107
00:07:45.032 --> 00:07:50.746
Also, we want an icon in the operating
system, it can be the dock,

108
00:07:50.746 --> 00:07:55.557
the homescreen, the start menu,
it depends on the OS.

109
00:07:55.557 --> 00:07:59.576
And we want that icon to actually open,
or open and

110
00:07:59.576 --> 00:08:04.655
stand alone experience that is
outside of the browser, okay?

111
00:08:04.655 --> 00:08:10.086
So we don't wanna push the user to
open the browser to use our web app.

112
00:08:10.086 --> 00:08:14.778
So we wanna be like
a standalone app in the OS.

113
00:08:14.778 --> 00:08:19.577
And talking about OS, we also sometimes
want some kind of integration with

114
00:08:19.577 --> 00:08:21.489
the OS and with the platform.

115
00:08:21.489 --> 00:08:23.759
That can be push notifications, so

116
00:08:23.759 --> 00:08:27.702
sending messages when the user
is not actually using the app.

117
00:08:27.702 --> 00:08:31.808
It can be opening links
automatically in our app or

118
00:08:31.808 --> 00:08:36.108
it can also be changing
the icon with a badge number,

119
00:08:36.108 --> 00:08:40.470
when something happens in the background.

120
00:08:40.470 --> 00:08:45.390
Well, we can actually get
that also in the PWA world.

121
00:08:46.730 --> 00:08:48.720
And finally, we want performance.

122
00:08:48.720 --> 00:08:53.295
And we want the user experience
from the native world.

123
00:08:53.295 --> 00:08:57.933
Something that we heard a lot as
web professionals is that some

124
00:08:57.933 --> 00:09:00.709
people think that the web is so slow.

125
00:09:00.709 --> 00:09:03.813
Or, if you create the web app, yeah,

126
00:09:03.813 --> 00:09:09.010
the experience will not look like an app,
or it will be slow.

127
00:09:09.010 --> 00:09:12.740
And we don't want that,
we want a faster user experience.

128
00:09:12.740 --> 00:09:16.600
And for that, they think that
native is the only solution.

129
00:09:16.600 --> 00:09:21.615
Well, with the specs and the new API
that we're going to cover today,

130
00:09:21.615 --> 00:09:26.376
we can actually make a really good
application that will perform as

131
00:09:26.376 --> 00:09:30.985
well as a native app, and
it will have the same user experience.

132
00:09:30.985 --> 00:09:35.320
So finally, we are getting
the best of these two universes,

133
00:09:35.320 --> 00:09:39.315
the best from the web and
the best from the native world.

134
00:09:39.315 --> 00:09:42.614
That's the idea of the PWA platform.

135
00:09:42.614 --> 00:09:47.142
So the question is how we compare
the PWA platform with Flutter?

136
00:09:47.142 --> 00:09:53.688
Well, let me start saying this,
Flutter, it's a multi target solution.

137
00:09:53.688 --> 00:09:57.529
So from the Flutter source code,
that is actually Dart,

138
00:09:57.529 --> 00:10:00.970
you can actually compile
to an iOS native package,

139
00:10:00.970 --> 00:10:07.060
an Android native package, a desktop
native package for Windows, Mac OS.

140
00:10:07.060 --> 00:10:12.440
And there are other platforms like
smaller platforms, and also to a PWA.

141
00:10:12.440 --> 00:10:15.980
Actually Flutter today can target the web.

142
00:10:15.980 --> 00:10:21.900
So you can actually get a PWA,
a progressive web app from Flutter.

143
00:10:21.900 --> 00:10:25.860
I'm not saying that a lot of PWAs out
there are actually using that technique,

144
00:10:25.860 --> 00:10:27.430
but it's actually possible.

145
00:10:27.430 --> 00:10:32.200
In terms of what's the difference,
the difference is that when you go with

146
00:10:32.200 --> 00:10:36.529
Flutter, you actually need to
learn some native design patterns.

147
00:10:36.529 --> 00:10:41.074
I mean, you cannot use jQuery,
you need to actually use Dart.

148
00:10:41.074 --> 00:10:47.940
And you need to understand their design
patterns, and how they think app design.

149
00:10:47.940 --> 00:10:53.521
You cannot use HTML, you cannot use
CSS even when you're targeting PWA.

150
00:10:53.521 --> 00:10:56.603
So, Flutter for the web, and

151
00:10:56.603 --> 00:11:01.536
that's the PWA solution,
will create HTML and

152
00:11:01.536 --> 00:11:06.976
sometimes Canvas based coding from Dart,
okay,?

153
00:11:06.976 --> 00:11:09.631
So, no HTML, no CSS involved.

154
00:11:09.631 --> 00:11:16.219
And you cannot get all the advantages such
as using your current toolchain, okay?

155
00:11:16.219 --> 00:11:20.610
And you cannot convert your
current website into a PWA.

156
00:11:20.610 --> 00:11:22.503
And that's also something interesting.

157
00:11:22.503 --> 00:11:26.112
We are going to start
the PWA from scratch today.

158
00:11:26.112 --> 00:11:30.915
But something really useful is
that you can actually convert

159
00:11:30.915 --> 00:11:33.655
a website that you have into a PWA.

160
00:11:33.655 --> 00:11:36.400
It's also possible,
you don't need to start from scratch.

161
00:11:36.400 --> 00:11:40.198
And if you go with Flutter,
you need to start from scratch, and

162
00:11:40.198 --> 00:11:41.566
learn Flutter first.

163
00:11:41.566 --> 00:11:44.139
So the question has to do with iOS.

164
00:11:44.139 --> 00:11:48.788
And this is a question that,
we will see these a lot,

165
00:11:48.788 --> 00:11:53.345
probably during the day and
also in the community.

166
00:11:53.345 --> 00:11:58.025
So, we typically have a big
elephant in the room, and

167
00:11:58.025 --> 00:12:01.566
that's Apple, iOS, and PWA support.

168
00:12:01.566 --> 00:12:03.840
So now we're going to talk about
the state of the platform.

169
00:12:03.840 --> 00:12:05.187
So we're going to get deeper with that.

170
00:12:05.187 --> 00:12:08.411
To the question, if push notifications or

171
00:12:08.411 --> 00:12:12.716
app batch notifications
are actually available on iOS.

172
00:12:12.716 --> 00:12:18.942
Let me answer this, it depends on how
you're going to distribute your app.

173
00:12:18.942 --> 00:12:23.057
If you're going to distribute your
app with the browser only, and

174
00:12:23.057 --> 00:12:27.846
that's the default PWA implementation
that we're going to see in a minute.

175
00:12:27.846 --> 00:12:35.373
As of today and of as iOS 15, we do not
have support for push notifications.

176
00:12:35.373 --> 00:12:42.182
However, the WebKit, source code, that is
open source so we can actually check that.

177
00:12:42.182 --> 00:12:45.538
It has started to implement Web Push.

178
00:12:45.538 --> 00:12:51.566
We don't know if that will be shipped
with iOS in the future or not, okay?

179
00:12:51.566 --> 00:12:55.995
But the WebKit,
the engine behind Safari on iOS,

180
00:12:55.995 --> 00:13:00.331
is actually working on Web Push,
so it may work.

181
00:13:00.331 --> 00:13:06.347
However, as we mentioned before,
a PWA can also be shaped in the App Store.

182
00:13:06.347 --> 00:13:09.678
And when your PWA then
goes to the App Store,

183
00:13:09.678 --> 00:13:13.474
you can actually have web push and
also batching.

184
00:13:13.474 --> 00:13:18.851
In that case, yeah, you will probably
need to add some native code,

185
00:13:18.851 --> 00:13:21.830
but only on that specific situation.

186
00:13:21.830 --> 00:13:22.986
Okay, make sense?

187
00:13:22.986 --> 00:13:27.952
But yeah,
iOS will always be something that we need

188
00:13:27.952 --> 00:13:31.423
to always be careful about, okay?

189
00:13:34.185 --> 00:13:42.419
&gt;&gt; Are you gonna cover using frameworks
with PWAs at all like Angular or React?

190
00:13:42.419 --> 00:13:45.888
&gt;&gt; So, in the bracket that
we're going to do today,

191
00:13:45.888 --> 00:13:48.790
we are not going to use
any library at all.

192
00:13:48.790 --> 00:13:51.994
Because the idea is that this
is building PWA from scratch.

193
00:13:51.994 --> 00:13:58.039
The idea is for you to understand
the technologies that actually makes

194
00:13:58.039 --> 00:14:03.680
a PWA a PWA, and that you can add
that to any library or framework.

195
00:14:03.680 --> 00:14:08.353
So you don't need to know react or
Vue to actually make a PWA.

196
00:14:08.353 --> 00:14:14.386
But, of course, you can have everything,
the layers that we're going to see today,

197
00:14:14.386 --> 00:14:18.519
can be actually added to any
app that you create with React,

198
00:14:18.519 --> 00:14:23.418
with Angular, with Vue,
with with any framework, okay?

199
00:14:23.418 --> 00:14:28.705
Our project, we're going to start with
that after seeing some PWAs in action.

200
00:14:28.705 --> 00:14:32.075
Our project will be just
Vanilla JavaScript.

201
00:14:32.075 --> 00:14:34.655
So it's just HTML, CSS and JavaScript.

