WEBVTT

1
00:00:00.002 --> 00:00:05.856
So something that we need to do is to
use that service worker to cache and

2
00:00:05.856 --> 00:00:08.545
serve the resources of our PWA.

3
00:00:08.545 --> 00:00:12.443
So the service worker has a local cache.

4
00:00:12.443 --> 00:00:14.993
In fact to be technically accurate,

5
00:00:14.993 --> 00:00:19.116
the cache is also available
outside of the service worker.

6
00:00:19.116 --> 00:00:22.128
It's called the cache storage API.

7
00:00:22.128 --> 00:00:28.424
With that storage, we can save all
the resources that we need or just a few.

8
00:00:28.424 --> 00:00:30.151
We decide.

9
00:00:30.151 --> 00:00:33.800
Everything is heavily based
in JavaScript promises.

10
00:00:33.800 --> 00:00:38.715
So please have in mind that we're
going to see a lot of async/await or

11
00:00:38.715 --> 00:00:41.531
a lot of them when we are using this API.

12
00:00:41.531 --> 00:00:48.758
Most of the common scenarios include
the ability to prefetch on installation.

13
00:00:48.758 --> 00:00:52.479
That means,
when you install a service worker,

14
00:00:52.479 --> 00:00:56.473
what will happen is that
you're going to prefetch so

15
00:00:56.473 --> 00:01:01.031
you're going to download assets
that you will need later.

16
00:01:01.031 --> 00:01:03.361
Also you can do cache on request.

17
00:01:03.361 --> 00:01:07.365
So instead of pre caching,
you can cache a request.

18
00:01:07.365 --> 00:01:13.199
So when you are actually getting into a
section of the PWA, and you're downloading

19
00:01:13.199 --> 00:01:18.219
for the first time, the assets,
you cache those assets at that point.

20
00:01:18.219 --> 00:01:23.503
So this is a big advantage over
a classic native app development.

21
00:01:23.503 --> 00:01:28.349
Because that means that you decide
here the algorithm that you

22
00:01:28.349 --> 00:01:33.378
wanna use in terms of the resources,
HTML, CSS, JavaScript,

23
00:01:33.378 --> 00:01:37.590
JSON, videos,
anything that you need for your PWA.

24
00:01:37.590 --> 00:01:41.312
Most of the time we follow
an app shell pattern.

25
00:01:41.312 --> 00:01:46.286
That means that we download
at least all the files that

26
00:01:46.286 --> 00:01:49.942
are necessary to render the app shell.

27
00:01:49.942 --> 00:01:53.617
So the app shell is everything that
you see in the user interface.

28
00:01:53.617 --> 00:01:59.349
Maybe there is a section that is not
actually downloaded, but at least

29
00:01:59.349 --> 00:02:06.166
we have the basics to actually render an
error message in case that's what we want.

30
00:02:06.166 --> 00:02:10.220
After we cache the resources,
we need to serve them,

31
00:02:10.220 --> 00:02:13.834
because remember,
we are going to be a server.

32
00:02:13.834 --> 00:02:19.224
So in this case,
the service worker will respond for

33
00:02:19.224 --> 00:02:22.660
every request that the PWA make.

34
00:02:22.660 --> 00:02:25.843
It can make a decision
serve from the cache,

35
00:02:25.843 --> 00:02:31.447
forward the request to the network where
you can even synthesize a response.

36
00:02:31.447 --> 00:02:36.947
That means create a response on
the fly as if we were Apache with PHP,

37
00:02:36.947 --> 00:02:38.406
okay if you want.

38
00:02:38.406 --> 00:02:43.120
So but in this case is JavaScript and
it's executed client side.

39
00:02:45.568 --> 00:02:48.880
Any mixed algorithm is possible here.

40
00:02:48.880 --> 00:02:52.213
So you are in charge and
that's an advantage but

41
00:02:52.213 --> 00:02:56.809
also responsibilities that we
have that we didn't have before.

42
00:02:56.809 --> 00:03:02.962
So a warning here, the serviceWorker
API it's a low level API.

43
00:03:02.962 --> 00:03:07.575
So that means that we have a lot of power,
but

44
00:03:07.575 --> 00:03:13.321
also we need to put out of work for
some basic behavior.

45
00:03:13.321 --> 00:03:18.516
So the question is that, can we have
a PWA that doesn't actually need a real

46
00:03:18.516 --> 00:03:24.061
server because the service worker can
actually answer for all those requests?

47
00:03:24.061 --> 00:03:26.782
So in theory, yes.

48
00:03:26.782 --> 00:03:30.917
The problem is who is serving
the service worker the first time.

49
00:03:30.917 --> 00:03:34.839
So you actually need a server
to serve the service worker and

50
00:03:34.839 --> 00:03:37.747
the HTML that register the service worker.

51
00:03:37.747 --> 00:03:42.670
And then probably the service worker will
need someplace to download the resources

52
00:03:42.670 --> 00:03:43.664
the first time.

53
00:03:43.664 --> 00:03:48.486
But after everything was registered and
installed,

54
00:03:48.486 --> 00:03:54.608
then in theory, you could potentially
shut down your real server.

55
00:03:54.608 --> 00:03:56.826
However, that's the theory.

56
00:03:56.826 --> 00:04:02.431
In practice, because the ServiceWorker
is a middleware, you should

57
00:04:02.431 --> 00:04:08.607
always think that something will happen
that will probably remove the data.

58
00:04:08.607 --> 00:04:13.321
It can be the user going to settings and
deleting everything.

59
00:04:13.321 --> 00:04:17.637
It can be the user buying a new device,
you go and buy a new device, a new laptop,

60
00:04:17.637 --> 00:04:18.353
a new phone.

61
00:04:18.353 --> 00:04:22.902
Yeah, maybe you're you have the icon again
because you are recovering your backup but

62
00:04:22.902 --> 00:04:24.406
you don't have the assets.

63
00:04:24.406 --> 00:04:30.005
So that's why we are not going
to stop using the server.

64
00:04:30.005 --> 00:04:32.193
So the server is always there.

65
00:04:32.193 --> 00:04:37.570
We are using the service worker as
a middleware to help performance and

66
00:04:37.570 --> 00:04:39.220
offline abilities.

