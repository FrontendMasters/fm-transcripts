WEBVTT

1
00:00:00.110 --> 00:00:04.265
So we have a question about
updating the cache or how to.

2
00:00:04.265 --> 00:00:08.740
Or if we should check if
the cache is updated.

3
00:00:08.740 --> 00:00:13.110
And this is a big topic,
the cache updated.

4
00:00:13.110 --> 00:00:17.072
Because the first problem that we have,
because we are serving from the cache,

5
00:00:17.072 --> 00:00:19.690
some of you are realizing
that we may have a problem.

6
00:00:19.690 --> 00:00:24.414
Because we are always serving
from an old version of the file.

7
00:00:24.414 --> 00:00:27.766
The file that we register when
we install the service worker,

8
00:00:27.766 --> 00:00:29.320
that maybe it was a year ago.

9
00:00:30.990 --> 00:00:34.801
So the problem,
the challenge that we have here,

10
00:00:34.801 --> 00:00:38.157
is that there is no way
in the HTTP protocol,

11
00:00:38.157 --> 00:00:42.999
or simple way, to know which
assets were changed server side.

12
00:00:42.999 --> 00:00:44.993
But we don't have a way to that.

13
00:00:44.993 --> 00:00:49.380
So, we need to define our own algorithm,
to detect or

14
00:00:49.380 --> 00:00:53.864
to know that the file has been
updated in the server, so

15
00:00:53.864 --> 00:00:56.515
we can update that client side.

16
00:00:58.205 --> 00:01:00.510
There are a couple of solutions and
best practices, and

17
00:01:00.510 --> 00:01:01.915
we're going to see some,okay?

18
00:01:01.915 --> 00:01:03.648
But that's the first response.

19
00:01:03.648 --> 00:01:06.459
Or the fourth point is that,
yeah, it depends, okay?

20
00:01:06.459 --> 00:01:08.345
And it's not so simple.

21
00:01:08.345 --> 00:01:11.548
But before I tell you,
moving on on that part,

22
00:01:11.548 --> 00:01:15.645
here is a part we're
actually following the code.

23
00:01:15.645 --> 00:01:17.470
Take some time.

24
00:01:17.470 --> 00:01:20.960
So that's why I want to show out
the snippets that I have here.

25
00:01:20.960 --> 00:01:21.581
It's not a big deal.

26
00:01:21.581 --> 00:01:24.981
But in case you want to copy and
paste, or something like that,

27
00:01:24.981 --> 00:01:27.270
it will be better to follow this.

28
00:01:27.270 --> 00:01:30.840
For example,
here I have the cache first strategy.

29
00:01:30.840 --> 00:01:35.618
Okay, so it's similar to the one that I
have, but without that fake URL designing

30
00:01:35.618 --> 00:01:38.681
some noise,
in case we want to understand the code.

31
00:01:38.681 --> 00:01:43.134
So, I'm going to replace this with this
snippet that is just a simple version of

32
00:01:43.134 --> 00:01:44.470
that, okay?

33
00:01:44.470 --> 00:01:48.150
So, we are actually matching
the request to see if it's there.

34
00:01:48.150 --> 00:01:50.860
If we do have a response, we return that.

35
00:01:50.860 --> 00:01:52.190
If not, we return a fetch.

36
00:01:52.190 --> 00:01:53.630
So it's the same code.

37
00:01:53.630 --> 00:01:56.970
And we are returning these
to respond with, actually.

38
00:01:56.970 --> 00:01:59.122
Okay, so this is cash first.

39
00:01:59.122 --> 00:02:02.870
So, let's write this algorithm first,
and then we move to another one.

40
00:02:04.560 --> 00:02:07.840
So I'm going to refresh first.

41
00:02:07.840 --> 00:02:09.030
Everything is okay.

42
00:02:09.030 --> 00:02:10.460
Everything seems fine.

43
00:02:10.460 --> 00:02:13.180
Yep, now I will try offline.

44
00:02:13.180 --> 00:02:17.986
So, now is the time where we're going to
cross fingers with offline clicked, and

45
00:02:17.986 --> 00:02:20.290
I'm going to reload.

46
00:02:20.290 --> 00:02:24.516
if I reload, now, my PWA works.

47
00:02:24.516 --> 00:02:26.617
It is still working while offline.

48
00:02:26.617 --> 00:02:33.180
If you don't believe this is true,
we can also turn off the server.

49
00:02:33.180 --> 00:02:37.270
So now, we don't have the server,
and I refresh.

50
00:02:37.270 --> 00:02:39.120
Now, I only need update and reload.

51
00:02:40.590 --> 00:02:41.920
But I need offline.

52
00:02:41.920 --> 00:02:44.294
I refresh, and the app is there.

53
00:02:44.294 --> 00:02:48.330
So we are offline,
we are officially offline.

54
00:02:48.330 --> 00:02:50.940
Okay, just because I'm doing this.

55
00:02:50.940 --> 00:02:53.280
So now, our app is offline capable.

56
00:02:53.280 --> 00:02:58.193
So if we go to manifest, now we can
see we do not have any warnings.

57
00:02:58.193 --> 00:03:04.260
Which means,
now it's officially installable as a PWA.

58
00:03:04.260 --> 00:03:07.196
So now on desktop,
I can go to the menu, and

59
00:03:07.196 --> 00:03:11.450
I can see install Codepad Masters,
the best PWA in town.

60
00:03:11.450 --> 00:03:15.615
I can click there,
I can install the app, and

61
00:03:15.615 --> 00:03:19.573
now I have a real PWA
running on my desktop.

62
00:03:23.247 --> 00:03:25.023
And it also works offline.

63
00:03:26.576 --> 00:03:28.500
But we are still missing one piece.

64
00:03:28.500 --> 00:03:34.088
If I add some node here,
and then I refresh,

65
00:03:34.088 --> 00:03:37.775
I'm loosing that content.

66
00:03:37.775 --> 00:03:41.305
And to be offline,
we are trying to save the data.

67
00:03:41.305 --> 00:03:42.505
That simple.

68
00:03:42.505 --> 00:03:45.405
That has nothing to do
with the PWA platform.

69
00:03:45.405 --> 00:03:46.975
That's just the web.

70
00:03:46.975 --> 00:03:50.871
You can use index TV, or
local storage, to save the data

71
00:03:56.704 --> 00:03:59.980
In my case, I will just use local storage.

72
00:03:59.980 --> 00:04:01.144
It's actually pretty simple.

73
00:04:01.144 --> 00:04:04.658
I'm going to app.js.

74
00:04:04.658 --> 00:04:10.050
And first, every time we need
to save the data, that is for

75
00:04:10.050 --> 00:04:16.674
example here, this is when we are pushing
a new note, we can call save.

76
00:04:20.251 --> 00:04:24.420
And also, when we are deleting,
we can call save as well.

77
00:04:26.030 --> 00:04:30.747
That save function does not exist, so
we need to actually create that one.

78
00:04:30.747 --> 00:04:35.110
Function save,
by going to take local storage.

79
00:04:35.110 --> 00:04:38.274
We're going to set an item,
this will create a new entry.

80
00:04:38.274 --> 00:04:41.760
With one particular key,
we can call this notes.

81
00:04:41.760 --> 00:04:45.782
And we can only store on a string.

82
00:04:45.782 --> 00:04:52.781
So we need to astringify our
array of notes into JSON format.

83
00:04:52.781 --> 00:04:55.920
So actually, it's going to be string.

84
00:04:55.920 --> 00:04:58.570
Do you see how we save?

85
00:04:58.570 --> 00:05:03.450
And then, when the page loads
in our DOM content loaded event,

86
00:05:03.450 --> 00:05:08.347
before rendering a note,
I can check if I have some save notes.

87
00:05:08.347 --> 00:05:10.230
And then, I will retrieve them.

88
00:05:10.230 --> 00:05:12.650
So, that's easy as well.

89
00:05:12.650 --> 00:05:19.129
I will check if in the local storage,
we have something for the item notes.

90
00:05:21.069 --> 00:05:27.288
And if we do,
we are going to save in our collection

91
00:05:27.288 --> 00:05:33.370
JSON.parse of local storage,
get item notes.

92
00:05:35.340 --> 00:05:39.899
So now, let's go back to Chrome and
see if it now works completely offline.

93
00:05:45.212 --> 00:05:47.173
We can refresh or reload.

94
00:05:47.173 --> 00:05:50.429
Right click reload to
get the latest version.

95
00:05:54.783 --> 00:05:56.228
And let's see.

96
00:05:58.348 --> 00:05:59.670
If it's saving.

97
00:05:59.670 --> 00:06:03.321
If I click and reload,
you can see it's not.

98
00:06:03.321 --> 00:06:06.106
And you say, what's going on?

99
00:06:06.106 --> 00:06:10.398
Well, I am not using dev tools here.

100
00:06:10.398 --> 00:06:16.465
So, which means, the reload system
that reloads the ServiceWorker,

101
00:06:16.465 --> 00:06:19.930
it's not actually working.

102
00:06:19.930 --> 00:06:22.320
And I didn't change
the ServiceWorker file.

103
00:06:22.320 --> 00:06:29.530
So, now that I have installed a version,
I always have the old version.

104
00:06:29.530 --> 00:06:32.960
So I always have the old
version of app.js.

105
00:06:32.960 --> 00:06:33.850
That's my problem.

106
00:06:34.970 --> 00:06:37.699
So how can I actually do this?

107
00:06:38.730 --> 00:06:40.280
How can I force an update?

108
00:06:41.450 --> 00:06:49.350
Well, we can see that cache
first has some limitations.

109
00:06:49.350 --> 00:06:53.890
So, we have a problem,
like when you drop the these app.js.

110
00:06:53.890 --> 00:06:55.780
Let me show you the same
with another example.

111
00:06:57.020 --> 00:06:58.700
We can change one color.

112
00:06:58.700 --> 00:07:05.342
For example, instead of the title back,
we can change these to red, okay?

113
00:07:05.342 --> 00:07:08.737
So, I'm changing that color to red, and

114
00:07:08.737 --> 00:07:13.104
I'm coming here right click Reload,
it's all red.

115
00:07:13.104 --> 00:07:16.471
Right click Reload, it's not red, why?

116
00:07:16.471 --> 00:07:20.370
Because I'm using
the cached version always.

117
00:07:20.370 --> 00:07:22.320
So, we have a problem.

118
00:07:23.710 --> 00:07:24.940
Can I shift Reload?

119
00:07:24.940 --> 00:07:28.080
Well, not actually from the PWA.

120
00:07:28.080 --> 00:07:30.251
If I'm in the browser,
I can do Shift Reload.

121
00:07:30.251 --> 00:07:31.297
In fact, let's do that.

122
00:07:31.297 --> 00:07:34.565
Let's close the PWA, and
open this in the browser.

123
00:07:34.565 --> 00:07:37.815
I can close that,
where I can use the menu opening Chrome.

124
00:07:40.125 --> 00:07:42.369
And now we are back into Chrome.

125
00:07:42.369 --> 00:07:44.160
Again, I refresh nothing happens.

126
00:07:44.160 --> 00:07:46.865
I shift refresh, and I see red.

127
00:07:46.865 --> 00:07:49.569
Because now,
I'm bypassing the service worker, and

128
00:07:49.569 --> 00:07:51.342
I'm going directly to the server.

129
00:07:51.342 --> 00:07:56.767
But if I go back and refresh normally,
I'm back in the old version.

130
00:07:56.767 --> 00:07:59.169
So we have a problem, okay?

131
00:07:59.169 --> 00:08:02.850
So we shift reload,
this will probably save the data.

132
00:08:04.000 --> 00:08:05.885
Shift reload, it works.

133
00:08:05.885 --> 00:08:08.360
I'm shift reloading,
I still have the data.

134
00:08:08.360 --> 00:08:11.550
But if I reload normally,
I don't have the data.

135
00:08:11.550 --> 00:08:16.483
So, it's like we have two versions
of the app running at the same time.

136
00:08:16.483 --> 00:08:21.462
So that's because,
cache first it's actually limited.

137
00:08:21.462 --> 00:08:25.830
And we need another way to update the app.

138
00:08:25.830 --> 00:08:31.818
One simple way that you have is that,
you can go to a ServiceWorker, okay?

139
00:08:31.818 --> 00:08:37.728
And then change something,
such as one space.

140
00:08:37.728 --> 00:08:39.335
Doesn't make any sense.

141
00:08:39.335 --> 00:08:44.900
More than changing a space, you can change
a character, such as the version number.

142
00:08:44.900 --> 00:08:48.992
So, every time there is a change in
one bite, because the browser is doing

143
00:08:48.992 --> 00:08:53.350
the byte by byte comparison in the
ServiceWorker, it will trigger an update.

144
00:08:54.400 --> 00:08:59.368
The parameters of the update will
actually install the assets again.

145
00:08:59.368 --> 00:09:03.929
Okay, so let's say,
I'm coming here and going to reload.

146
00:09:03.929 --> 00:09:06.226
I may still do in the old version, but

147
00:09:06.226 --> 00:09:11.139
if I reload again without shift normal
reload, I'm getting the new version.

148
00:09:11.139 --> 00:09:14.930
And now,
I will always have the new version.

149
00:09:16.670 --> 00:09:17.220
Let's do that again.

150
00:09:18.360 --> 00:09:23.827
If we don't like that red, and we wanna go
back to the previous color, we go back.

151
00:09:23.827 --> 00:09:25.420
We save the file.

152
00:09:25.420 --> 00:09:30.288
And we also go and change the version
of a ServiceWorker, or a timestamp, or

153
00:09:30.288 --> 00:09:32.240
any character.

154
00:09:32.240 --> 00:09:35.234
So now, if I go back to Chrome,

155
00:09:35.234 --> 00:09:41.010
I reload twice, and
I'm getting the new version.

156
00:09:41.010 --> 00:09:45.450
Okay, so this is one solution
to the update problem.

157
00:09:45.450 --> 00:09:49.483
If every time you make a change
in one asset, you go and

158
00:09:49.483 --> 00:09:54.145
update something in the service worker,
it can be a comment,

159
00:09:54.145 --> 00:09:58.470
then the user will actually
get the whole package again.

160
00:09:59.660 --> 00:10:02.300
That's one way, and
now everything works offline.

161
00:10:02.300 --> 00:10:05.720
Even deleting data, or saving new notes.

162
00:10:06.860 --> 00:10:09.740
Another solution is to
change the algorithm.

163
00:10:12.050 --> 00:10:16.411
If you look at the snippets that
we have here, in this case,

164
00:10:16.411 --> 00:10:18.169
it goes to the network.

165
00:10:18.169 --> 00:10:23.339
And only if that operation fails,
it goes to the cache.

166
00:10:23.339 --> 00:10:28.594
But on network first, we also have
the problem of updating the assets,

167
00:10:28.594 --> 00:10:32.190
because we are not updating the assets.

168
00:10:32.190 --> 00:10:39.151
So when I show you the other one, that is
like larger, so I'm going to copy this.

169
00:10:39.151 --> 00:10:41.731
And we can replace the fetch.

170
00:10:41.731 --> 00:10:45.840
Or I can comment this fetch,
and just replace with this.

171
00:10:45.840 --> 00:10:49.870
This is called stale while revaluate.

172
00:10:49.870 --> 00:10:54.500
Let's first analyze the code,
and then we see it in action.

173
00:10:55.540 --> 00:10:58.080
It's gonna respond with cache is much.

174
00:10:58.080 --> 00:11:00.530
So, it's actually similar
to the cache first.

175
00:11:00.530 --> 00:11:05.350
Okay, so it goes to the cache,
and see if the request is there.

176
00:11:05.350 --> 00:11:09.310
Then, it will return that cached response.

177
00:11:09.310 --> 00:11:13.080
In fact, if you want,
we can change the name here too.

178
00:11:13.080 --> 00:11:15.500
So it's going to be more clear.

179
00:11:15.500 --> 00:11:18.240
So it's going to return the cache respond.

180
00:11:18.240 --> 00:11:20.210
And there is an order here.

181
00:11:20.210 --> 00:11:24.945
So if it's undefined, so
if we do not have a cache respond,

182
00:11:24.945 --> 00:11:27.333
I'm returning with a fetch.

183
00:11:27.333 --> 00:11:33.558
So it looks similar to cache first,
with one particular addition.

184
00:11:33.558 --> 00:11:37.730
We are always going to the network,
even if it's in the cache.

185
00:11:39.170 --> 00:11:40.677
So, here's the deal.

186
00:11:40.677 --> 00:11:45.280
You're asking me for a PNG,
so I go to the cache, okay?

187
00:11:45.280 --> 00:11:52.255
And no matter the result, I'm also going
to the network to bring that PNG file.

188
00:11:52.255 --> 00:11:56.488
If I do have that file in the cache,
I will give you the cache file.

189
00:11:56.488 --> 00:12:01.163
But I'm also going to the network, I'm
bringing that PNG from the network, and

190
00:12:01.163 --> 00:12:02.692
I'm updating the cache.

191
00:12:04.738 --> 00:12:08.680
Okay, so this is what this code is doing.

192
00:12:08.680 --> 00:12:11.540
It's updating the cache always.

193
00:12:11.540 --> 00:12:16.748
Every time you request a file, it returns
the file from the cache if it's there.

194
00:12:16.748 --> 00:12:19.930
But it's updating the file
in the background.

195
00:12:19.930 --> 00:12:25.950
So, next time someone is requesting that
file, it will be an updated version.

196
00:12:27.150 --> 00:12:28.750
Does it make sense?

197
00:12:28.750 --> 00:12:29.620
Let's see it in action.

198
00:12:31.940 --> 00:12:36.980
So, first because I have changed
a ServiceWorker, it's a good idea to

199
00:12:36.980 --> 00:12:43.160
maybe open the Service Workers panel,
and check that we have updated reload.

200
00:12:43.160 --> 00:12:44.911
I'm going to refresh so I know for

201
00:12:44.911 --> 00:12:49.000
sure that I'm in the latest
version of the Service Worker.

202
00:12:49.000 --> 00:12:52.240
So now, I'm going to untick update and
reload.

203
00:12:52.240 --> 00:12:55.460
So now, I'm a normal user, okay?

204
00:12:55.460 --> 00:12:58.780
So I'm going to change one CSS.

205
00:13:00.070 --> 00:13:04.530
So for example,
if we wanna change this color with pink.

206
00:13:04.530 --> 00:13:09.030
Now going back here,
what I knew is to get the pink.

207
00:13:09.030 --> 00:13:12.553
So I'm going to reload ones,
I'm gonna stealing yellow, and

208
00:13:12.553 --> 00:13:15.560
then I'm finally getting the new color.

209
00:13:15.560 --> 00:13:20.591
So with the stale while revaluate,
you can change assets individually.

210
00:13:20.591 --> 00:13:24.590
And then, you don't need to
change the service worker.

211
00:13:24.590 --> 00:13:28.631
So, I don't need to go and
change one bit the ServiceWorker.

212
00:13:28.631 --> 00:13:31.601
It is still a double reload,
which is expectable.

213
00:13:31.601 --> 00:13:32.184
Why?

214
00:13:32.184 --> 00:13:35.442
Think about the native app,
or native apps,

215
00:13:35.442 --> 00:13:41.027
you are always having an old version
because it's installed in your device.

216
00:13:41.027 --> 00:13:44.010
So here, we have the same idea.

217
00:13:44.010 --> 00:13:47.680
So, we are always loading
the version that we have.

218
00:13:47.680 --> 00:13:50.601
Then in the background,
we can realize there is a new version and

219
00:13:50.601 --> 00:13:51.590
update the assets.

220
00:13:51.590 --> 00:13:55.060
This can get more complicated
with your own algorithm.

221
00:13:55.060 --> 00:13:57.601
And some libraries, such as workbooks,

222
00:13:57.601 --> 00:14:02.030
will actually help you in
improving this user experience.

223
00:14:02.030 --> 00:14:06.132
But before moving on,
let's go back to our original color.

224
00:14:08.901 --> 00:14:10.504
And now we are here.

225
00:14:12.346 --> 00:14:16.389
So, when we are serving file from
the cache, we have different strategies.

226
00:14:16.389 --> 00:14:20.800
Cache first, network first,
or stale while revalidate.

227
00:14:20.800 --> 00:14:22.600
And we can do a mix.

228
00:14:22.600 --> 00:14:28.954
It's up to you, it's up to your own
algorithm, and also it can defer per URL.

229
00:14:30.538 --> 00:14:34.944
Updating the resources,
it's actually a challenge.

230
00:14:34.944 --> 00:14:38.039
Because files are served in the client,
and

231
00:14:38.039 --> 00:14:43.740
updating files in the server won't trigger
any automatic change in the client.

232
00:14:44.740 --> 00:14:49.140
So we need to define, and code,
and update algorithm, okay?

233
00:14:49.140 --> 00:14:51.422
So, if you have a build process,

234
00:14:51.422 --> 00:14:56.568
such as you're doing a react application,
sometimes we hash resources.

235
00:14:56.568 --> 00:14:58.619
Or we version resources, so

236
00:14:58.619 --> 00:15:03.490
we can create the manifest file
separated from your web manifest and

237
00:15:03.490 --> 00:15:09.000
assets manifest that can define all
the assets with a version number.

238
00:15:09.000 --> 00:15:14.925
And then, the service worker can
actually see and compare the assets,

239
00:15:14.925 --> 00:15:20.270
and let's say, upgrade all
the assets that are old in the cash.

240
00:15:21.570 --> 00:15:29.101
Developer is in full control of how to
cache and serve the resources of a PWA.

241
00:15:29.101 --> 00:15:31.619
And also, how to manage API calls.

242
00:15:31.619 --> 00:15:35.264
Because if you want,
you can also cache API calls.

243
00:15:35.264 --> 00:15:38.380
Or you can synthesize responses.

244
00:15:38.380 --> 00:15:42.175
So, you can have some Graph QL API, but

245
00:15:42.175 --> 00:15:46.210
completely client signed over IndexDB.

246
00:15:46.210 --> 00:15:47.200
She has an example.

247
00:15:48.680 --> 00:15:54.630
Updating the app doesn't require full
reinstallation as the native apps.

248
00:15:54.630 --> 00:15:59.980
We can just replace the updated files
silently, or with a user's notification.

249
00:16:01.350 --> 00:16:08.343
And that's actually one of the challenges
of PWA development, how to do that.

250
00:16:08.343 --> 00:16:13.611
To synthesize the service worker solution,
before actually seeing

251
00:16:13.611 --> 00:16:19.880
our app installed on android,
let's talk about the life cycle again.

252
00:16:19.880 --> 00:16:24.430
So, the first time you load a PWA,
you don't have a ServiceWorker.

253
00:16:24.430 --> 00:16:28.613
The ServiceWorker is then passed,
installed, and it's waiting.

254
00:16:28.613 --> 00:16:30.470
Waiting for what?

255
00:16:30.470 --> 00:16:32.256
You will see in a minute.

256
00:16:32.256 --> 00:16:35.537
After waiting, it goes to activated, and

257
00:16:35.537 --> 00:16:39.374
is now in full control of
the origins of the scope.

258
00:16:39.374 --> 00:16:44.705
And then, it's not executing code,
it's waiting for an event.

259
00:16:44.705 --> 00:16:50.657
It can be a fetch, a push message, or
a message that is received by a client.

260
00:16:50.657 --> 00:16:54.002
In that case,
the Service Worker goes to running.

261
00:16:54.002 --> 00:16:55.740
So now, it's running.

262
00:16:55.740 --> 00:17:00.398
And after some seconds of inactivity,
but in Chromium is 40.

263
00:17:00.398 --> 00:17:04.005
On Safari it's less than 40, around 15.

264
00:17:04.005 --> 00:17:05.440
It goes against your Idle.

265
00:17:06.820 --> 00:17:11.157
And at one point,
it can be stopped or terminated.

266
00:17:11.157 --> 00:17:17.941
And it can go back to running
automatically when another event happens.

267
00:17:17.941 --> 00:17:20.030
That's how it works.

268
00:17:21.820 --> 00:17:28.250
And every time the service worker appears
again, it might not be the same instance.

269
00:17:28.250 --> 00:17:34.080
So we don't wanna use, for example, global
variables in the service workers scope.

270
00:17:34.080 --> 00:17:36.660
Because maybe after 40 seconds,
they are gone.

271
00:17:37.950 --> 00:17:41.960
Yeah, maybe you're back,
but it's a new instance.

272
00:17:41.960 --> 00:17:44.010
So nothing is the same.

273
00:17:44.010 --> 00:17:48.097
So, the question has to do that, if we
have any ability to increase the idle time

274
00:17:48.097 --> 00:17:50.580
of a service worker, the answer is no.

275
00:17:50.580 --> 00:17:54.813
In fact, we don't even know that
time we are not in control of that.

276
00:17:54.813 --> 00:17:56.544
The Service Worker is in control.

277
00:17:56.544 --> 00:18:01.248
And even, when we are asking
the Service Worker to wait for

278
00:18:01.248 --> 00:18:06.660
us with wait until, the browser
can always kill us at any time.

279
00:18:06.660 --> 00:18:11.379
It can kill our process if the browser
thinks that we are doing something wrong

280
00:18:11.379 --> 00:18:13.680
with the CPU, for example.

281
00:18:13.680 --> 00:18:16.640
Remember that we don't
need users permission for

282
00:18:16.640 --> 00:18:19.000
installing a Service Worker.

283
00:18:19.000 --> 00:18:22.132
So that's why the browser
is actually really careful

284
00:18:22.132 --> 00:18:24.853
about the permission
that it's granting us.

