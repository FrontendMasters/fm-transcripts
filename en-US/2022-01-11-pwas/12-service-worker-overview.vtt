WEBVTT

1
00:00:00.000 --> 00:00:07.543
So our PWA now works on iOS, it's still
not working offline, but it looks good.

2
00:00:07.543 --> 00:00:13.075
So service workers, so
far our PWA has As the heart man,

3
00:00:13.075 --> 00:00:18.273
not the brain, so
we need to add the Service Worker.

4
00:00:18.273 --> 00:00:22.747
So native apps in the store or
from the store, when you install an app

5
00:00:22.747 --> 00:00:27.392
from the store, you actually
are downloading a big package, right?

6
00:00:27.392 --> 00:00:31.988
So sometimes it's really big
like a couple of gigabytes.

7
00:00:31.988 --> 00:00:36.082
So on that package,
you will find all the resources place.

8
00:00:36.082 --> 00:00:40.568
Remember, I'm talking about native
apps that you download from the store.

9
00:00:41.872 --> 00:00:44.417
Then that app can consume web services.

10
00:00:44.417 --> 00:00:48.155
And if you update the app,
you need to update everything,

11
00:00:48.155 --> 00:00:51.759
the whole package again,
that's native apps, okay?

12
00:00:51.759 --> 00:00:57.280
And offline works because when you open an
app, all the resources that are needed for

13
00:00:57.280 --> 00:01:00.483
rendering that app
are actually on your device.

14
00:01:00.483 --> 00:01:04.284
That's why is tasked and
that's why it's working offline.

15
00:01:04.284 --> 00:01:08.658
On classic web apps, in case you
have experience doing websites and

16
00:01:08.658 --> 00:01:12.432
web apps, let me guess,
you have, you download an HTML.

17
00:01:12.432 --> 00:01:18.824
The user is typing a URL, clicking on the
link and the browser downloads on HTML,

18
00:01:18.824 --> 00:01:23.243
then it downloads other
resources on demand, mainly.

19
00:01:23.243 --> 00:01:26.932
And then the app can consume
web services as you're used to.

20
00:01:26.932 --> 00:01:30.470
But offline doesn't work
because if you're offline,

21
00:01:30.470 --> 00:01:33.115
there is no way to even download the HTML.

22
00:01:33.115 --> 00:01:36.335
So you don't have ob=n device,

23
00:01:36.335 --> 00:01:41.626
all the resources that
are needed to render in the app.

24
00:01:41.626 --> 00:01:46.335
So, but we are impressive web apps,
we are in a different world.

25
00:01:46.335 --> 00:01:49.883
So in this case, it's a website, so

26
00:01:49.883 --> 00:01:54.003
we are still going to download an HTML,
but

27
00:01:54.003 --> 00:01:59.965
that HTML will register something
known as a service worker.

28
00:01:59.965 --> 00:02:06.851
And that's a term that we have been
mentioning many times during the day.

29
00:02:06.851 --> 00:02:13.943
That service worker can
install client side resources.

30
00:02:13.943 --> 00:02:19.224
Then the browser will still download
resources on demand as before.

31
00:02:19.224 --> 00:02:23.795
But now they can be served
by the service worker also

32
00:02:23.795 --> 00:02:27.953
known as the local cache or
by the real server.

33
00:02:29.963 --> 00:02:35.083
Then the app can consume web services
as usual, and now offline works, why?

34
00:02:35.083 --> 00:02:38.607
Because the service worker was installed.

35
00:02:38.607 --> 00:02:42.184
And the service worker
installed all the assets, or

36
00:02:42.184 --> 00:02:46.741
at least many of the assets that
are needed for rendering that app.

37
00:02:46.741 --> 00:02:52.383
That's why the service worker
leads to an offline experience.

38
00:02:52.383 --> 00:02:54.834
But what's a Service Worker?

39
00:02:54.834 --> 00:02:57.453
It's first a JavaScript file.

40
00:02:57.453 --> 00:02:58.886
So it's one js file.

41
00:02:58.886 --> 00:03:03.704
We can split that into several files,
but we start with one.

42
00:03:03.704 --> 00:03:05.867
It has its own thread, so

43
00:03:05.867 --> 00:03:11.026
the code that we're writing in
the file has its own thread.

44
00:03:11.026 --> 00:03:13.612
And it acts as a middleware.

45
00:03:13.612 --> 00:03:15.035
So what's a middleware?

46
00:03:15.035 --> 00:03:23.233
A middleware is a piece of software
that sits between two other actors.

47
00:03:23.233 --> 00:03:25.233
Like in this case,
the server and the client.

48
00:03:25.233 --> 00:03:26.918
We have the browser,
we have the web server.

49
00:03:26.918 --> 00:03:31.921
The service worker sits in the middle,
and it's a middleware,

50
00:03:31.921 --> 00:03:37.492
meaning that I can remove it putting
on everything should work anyway.

51
00:03:37.492 --> 00:03:42.464
That's a view of middleware,
it's like a plugin, if you want.

52
00:03:42.464 --> 00:03:44.369
So once installed,

53
00:03:44.369 --> 00:03:49.979
it can act as an installed local
web server, or a web proxy.

54
00:03:49.979 --> 00:03:51.955
Let me repeat that.

55
00:03:51.955 --> 00:03:57.503
This is not like the official definition,
let's say it's my definition.

56
00:03:57.503 --> 00:04:04.739
The service worker is a web server,
web server that we installed client side.

57
00:04:04.739 --> 00:04:08.817
So we install a web server but
client side.

58
00:04:08.817 --> 00:04:13.476
Okay, so because it's a server,
it can serve files so

59
00:04:13.476 --> 00:04:18.662
it's actually answering HTTP
request as if it's a server.

60
00:04:18.662 --> 00:04:21.901
We're going to see this
in action in a minute.

61
00:04:21.901 --> 00:04:24.550
But if you understand that idea,

62
00:04:24.550 --> 00:04:28.721
then you got the message of
what a service worker is.

63
00:04:28.721 --> 00:04:32.548
As well, let us serve all the assets or

64
00:04:32.548 --> 00:04:38.537
at least the assets that you
want directly from the client.

65
00:04:38.537 --> 00:04:43.404
So it runs client-side
within the browser's engine.

66
00:04:43.404 --> 00:04:48.908
So it's like a server, but anyway
it's running in the browser's engine,

67
00:04:48.908 --> 00:04:52.692
which means if we will kill
the browser's process,

68
00:04:52.692 --> 00:04:55.791
you're also killing the Service Worker.

69
00:04:55.791 --> 00:04:59.589
HTTPS is required, so
you cannot install or

70
00:04:59.589 --> 00:05:04.937
register as service worker if
it's not a secure connection.

71
00:05:04.937 --> 00:05:09.476
The only exception to that is local host,
and

72
00:05:09.476 --> 00:05:16.888
not just your local IP address, it must
be the term local host in any port.

73
00:05:16.888 --> 00:05:21.401
So the service worker is
installed by a web page,

74
00:05:21.401 --> 00:05:27.125
any HTML within for now,
let's say your origin can install or

75
00:05:27.125 --> 00:05:30.996
register a service worker, the server.

76
00:05:30.996 --> 00:05:33.440
It has its own thread and
its own lifecycle,

77
00:05:33.440 --> 00:05:36.026
we're going to see this
in action in a minute.

78
00:05:36.026 --> 00:05:42.715
And after it was installed, it can act
as a network proxy, or local web server.

79
00:05:42.715 --> 00:05:47.367
In the name of the real server,
this is also important.

80
00:05:47.367 --> 00:05:53.056
The service worker is kind of
impersonating the real server.

81
00:05:53.056 --> 00:05:57.338
So your webpage, your PWA,
your JavaScript content

82
00:05:57.338 --> 00:06:02.001
will never know if the response
is coming from the server or

83
00:06:02.001 --> 00:06:07.539
if the response is coming from
the service worker, you don't know.

84
00:06:07.539 --> 00:06:12.649
And actually, you don't care, or you
shouldn't care, because it's a middleware.

85
00:06:12.649 --> 00:06:17.543
If the service worker is there,
it would probably enhance the experience.

86
00:06:17.543 --> 00:06:23.199
And if it's not there,
everything should work anyway, as usual.

87
00:06:23.199 --> 00:06:28.760
And the service worker has some abilities
on top of what we know to run and

88
00:06:28.760 --> 00:06:31.368
execute code in the background.

89
00:06:31.368 --> 00:06:36.375
And the background means that you can
close the app, you can close the browser

90
00:06:36.375 --> 00:06:40.629
stuff, but you can still execute
code in the background, okay?

91
00:06:40.629 --> 00:06:44.673
The service worker has its own
life cycle with these abilities.

92
00:06:44.673 --> 00:06:49.464
Another thing that is actually
important and if this is the first

93
00:06:49.464 --> 00:06:54.532
time you're hearing about service worker,
it's a little scary.

94
00:06:54.532 --> 00:06:59.489
There is no need for user's permission,
so when you get into a website

95
00:06:59.489 --> 00:07:04.542
that has a service worker,
the service worker is installed silently.

96
00:07:04.542 --> 00:07:09.036
You don't see any user permission dialog,

97
00:07:09.036 --> 00:07:13.169
it just works, it just been installed.

98
00:07:13.169 --> 00:07:17.128
Every service worker has a scope, a scope,

99
00:07:17.128 --> 00:07:23.129
it's a nourishing host and import,
let's say a domain on a path.

100
00:07:23.129 --> 00:07:27.453
The path is optional, or
it can be just the root folder,

101
00:07:27.453 --> 00:07:32.789
which means you can have the service
worker owning the whole domain or

102
00:07:32.789 --> 00:07:35.644
owning just a folder in your domain.

103
00:07:35.644 --> 00:07:41.472
Which also means you can have more than
one service worker in your domain,

104
00:07:41.472 --> 00:07:46.739
if they areiIn different folders,
that's the idea of the scope.

105
00:07:46.739 --> 00:07:52.229
So the service worker will manage
all pages within the browser,

106
00:07:52.229 --> 00:07:56.204
I'm willing to install
apps from that scope.

107
00:07:56.204 --> 00:08:03.357
So every HTML, every URL within your scope
will be managed by that service worker.

108
00:08:03.357 --> 00:08:09.012
So it can serve as server resources for
that scope.

109
00:08:10.906 --> 00:08:13.575
Any page in the scope can
install a service worker.

110
00:08:13.575 --> 00:08:18.845
So it's not like if I have
indexed HTML and index to HTML.

111
00:08:18.845 --> 00:08:23.069
If index HTML is installing or
registering a service worker,

112
00:08:23.069 --> 00:08:26.736
it will be for the whole scope,
including index too.

113
00:08:26.736 --> 00:08:28.036
After installed,

114
00:08:28.036 --> 00:08:32.677
then it will be able to serve all
the files requested from the scope.

115
00:08:32.677 --> 00:08:35.809
So if the scope is requesting a PNG file,

116
00:08:35.809 --> 00:08:39.967
a CSS file or a web font,
then it will be responsible.

117
00:08:39.967 --> 00:08:43.031
The service worker will be responsible for

118
00:08:43.031 --> 00:08:48.235
serving that resource in case it wants to,
because it's a middleware.

119
00:08:48.235 --> 00:08:51.488
If it's not there, or
if the service worker says, you know what?

120
00:08:51.488 --> 00:08:56.820
I don't wanna deal with these requests,
it will go to the real server anyway.

121
00:08:56.820 --> 00:09:02.508
Only one service worker
is allowed per scope.

122
00:09:02.508 --> 00:09:06.956
But you can have more than one
service worker in the same

123
00:09:06.956 --> 00:09:11.511
origin because in that case
you have different scopes.

124
00:09:11.511 --> 00:09:15.678
WebKit, that's Safari on the Mac,
and also WebKit on iOS adds

125
00:09:15.678 --> 00:09:20.473
another layer of complexity here,
I don't wanna get too deep here, but

126
00:09:20.473 --> 00:09:23.794
it has something known
as partition management.

127
00:09:23.794 --> 00:09:28.616
With partition management,
what happens is that, if you have iFrames,

128
00:09:28.616 --> 00:09:31.978
things are going to gets more complicated,
okay?

129
00:09:31.978 --> 00:09:34.514
The same happens with cookies and storage.

130
00:09:34.514 --> 00:09:39.592
So if you have been dealing with that,
you probably know the deal.

131
00:09:39.592 --> 00:09:44.993
So the question is that if the service
worker is replacing the server but

132
00:09:44.993 --> 00:09:49.325
client side,
the answer is that it's one possibility.

133
00:09:49.325 --> 00:09:54.143
So it can impersonate the real server but
client side,

134
00:09:54.143 --> 00:09:57.926
but you still need the real server, okay?

135
00:09:57.926 --> 00:10:02.179
And so that's important,
we are not replacing the server, okay?

136
00:10:02.179 --> 00:10:07.422
So it can go on top of the real server and
like a middleware,

137
00:10:07.422 --> 00:10:12.246
and it can respond from in
the name of the real server.

138
00:10:12.246 --> 00:10:14.859
But we always need the real server anyway.

139
00:10:14.859 --> 00:10:18.889
Because the service worker can
make a different decision, or

140
00:10:18.889 --> 00:10:23.151
the service worker maybe has an exception,
or is not working, or

141
00:10:23.151 --> 00:10:25.952
the user uninstalled the service worker.

142
00:10:25.952 --> 00:10:29.696
And in that case, the request will
go directly to the real server.

143
00:10:29.696 --> 00:10:33.992
So that's why I don't wanna say that
is actually replacing it, okay?

144
00:10:33.992 --> 00:10:36.001
It's like working with,

145
00:10:36.001 --> 00:10:41.677
it's working with the real server to
actually serve defies client side.

146
00:10:44.060 --> 00:10:46.062
So we have a question about installation.

147
00:10:46.062 --> 00:10:50.710
Can we defer the installation or
registration of the service worker?

148
00:10:50.710 --> 00:10:54.702
Or is this going to reinstall
on the first load automatically?

149
00:10:54.702 --> 00:10:57.933
You decide when you register
the service worker.

150
00:10:57.933 --> 00:11:00.222
So it's actually on a JavaScript API.

151
00:11:00.222 --> 00:11:04.663
So it depends on when are we calling
the API is going to register the service

152
00:11:04.663 --> 00:11:06.535
worker immediately or later.

153
00:11:06.535 --> 00:11:11.280
So the most common scenario is to
register the service worker as

154
00:11:11.280 --> 00:11:14.962
soon as possible, but
there is no need for that.

155
00:11:14.962 --> 00:11:19.603
And for example, when we have
a large client side apps such as

156
00:11:19.603 --> 00:11:24.162
a big React app from a couple
of megabytes, don't do that.

157
00:11:24.162 --> 00:11:28.755
But in case you have that,
maybe we wanna defer the service worker

158
00:11:28.755 --> 00:11:32.273
registration after the app
was loaded actually.

159
00:11:32.273 --> 00:11:36.950
Because you don't wanna mess with
that already a slow process with

160
00:11:36.950 --> 00:11:39.300
the service worker registration

