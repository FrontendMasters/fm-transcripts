WEBVTT

1
00:00:00.000 --> 00:00:04.340
So now our service worker is
actually caching the files, but

2
00:00:04.340 --> 00:00:07.328
no one is using those files to serve them.

3
00:00:07.328 --> 00:00:12.472
So the thing is that here we don't
have a simple straightforward

4
00:00:12.472 --> 00:00:16.198
API that says,
go to the cache and serve that.

5
00:00:16.198 --> 00:00:19.714
So we each actually search
into the cash manually.

6
00:00:23.461 --> 00:00:27.848
So going back here, what we need to do for

7
00:00:27.848 --> 00:00:32.623
example in the case that
is not the phase 0,

8
00:00:32.623 --> 00:00:37.676
we want to try and
see if the request is cached.

9
00:00:37.676 --> 00:00:41.870
So to do that,
we need to call the API manually.

10
00:00:41.870 --> 00:00:44.139
First, we need to open the cache.

11
00:00:44.139 --> 00:00:49.174
Remember that we were opening
the cache with caches that open,

12
00:00:49.174 --> 00:00:53.357
that name we should create a constant for
this name.

13
00:00:53.357 --> 00:00:55.575
Then when I have the cache.

14
00:00:58.568 --> 00:01:01.757
I wanna search within the cache, so

15
00:01:01.757 --> 00:01:06.433
what I'm going to do is
called much that's actually

16
00:01:06.433 --> 00:01:11.232
the name of the search function,
match or match all.

17
00:01:11.232 --> 00:01:14.671
So match will try to find the first one.

18
00:01:14.671 --> 00:01:18.536
So we're going to match what,
a request and

19
00:01:18.536 --> 00:01:24.190
the request is coming from event,
request from our arguments.

20
00:01:24.190 --> 00:01:29.925
So it's going to see if that request
has an entry in the cache and

21
00:01:29.925 --> 00:01:35.026
that leads to another important
piece of information.

22
00:01:35.026 --> 00:01:39.085
The cache storage API is a dictionary,

23
00:01:39.085 --> 00:01:46.344
with it's key being an HTTP request,
and the value an HTTP response.

24
00:01:46.344 --> 00:01:51.832
So, in for
example in local storage we save string,

25
00:01:51.832 --> 00:01:55.822
in index DV, we are saving ID object,

26
00:01:55.822 --> 00:02:01.089
here we are saving HTTP request,
HTTP response.

27
00:02:01.089 --> 00:02:05.009
So actually this is also a promise, so

28
00:02:05.009 --> 00:02:08.929
we get their response from the cache,

29
00:02:08.929 --> 00:02:12.983
we can call that cached response here.

30
00:02:12.983 --> 00:02:16.878
And if we have a response, actually,

31
00:02:16.878 --> 00:02:21.271
we can respond with that cached response.

32
00:02:21.271 --> 00:02:25.070
I'm not saying this code is correct, okay?

33
00:02:25.070 --> 00:02:30.438
But, I will try to guide
you through the code.

34
00:02:30.438 --> 00:02:32.497
In fact, this code is not correct.

35
00:02:32.497 --> 00:02:34.420
Let me explain why it's not correct.

36
00:02:34.420 --> 00:02:40.612
We cannot respond with in an async code,
why is that?

37
00:02:40.612 --> 00:02:46.380
Because if the end of the function
the fetch event handler is reached,

38
00:02:46.380 --> 00:02:51.072
then and no one has called
respond with what will happen is

39
00:02:51.072 --> 00:02:55.591
that the browser will go
directly to another network.

40
00:02:55.591 --> 00:03:01.343
And if I tried to call respond with
later I will get an exception.

41
00:03:01.343 --> 00:03:06.000
But if you remember,
I mentioned that actually respond

42
00:03:06.000 --> 00:03:10.669
with accepts both a response or
a promise of a response.

43
00:03:10.669 --> 00:03:14.781
So actually what I can do,
I got both here so

44
00:03:14.781 --> 00:03:18.911
I can respond with this chain of promises.

45
00:03:20.494 --> 00:03:23.802
And then I need to balance parentheses.

46
00:03:23.802 --> 00:03:29.328
So now, if I have a cached response and I
will explain what that means in a minute,

47
00:03:29.328 --> 00:03:33.800
I'm going to return that cache
responds to the promise chain, so

48
00:03:33.800 --> 00:03:37.159
actually, he will actually
respond with that.

49
00:03:37.159 --> 00:03:39.289
Okay, it's a little weird.

50
00:03:39.289 --> 00:03:43.366
And here comes the part where I
mentioned that it's a good idea,

51
00:03:43.366 --> 00:03:48.367
to actually be an expert in promises to
actually understand better this code.

52
00:03:48.367 --> 00:03:51.386
So, we're actually go into the cache and

53
00:03:51.386 --> 00:03:55.797
if there is a response,
I'm returning with that response.

54
00:03:55.797 --> 00:04:00.388
So, the thing is,
what happens if it's not in the cache so,

55
00:04:00.388 --> 00:04:05.984
I'm checking for a PNG file, and
it's not there, so it's a cache miss.

56
00:04:05.984 --> 00:04:10.714
So in that case, we're going to
receive an undefined object, so

57
00:04:10.714 --> 00:04:13.724
we are not going to receive the argument.

58
00:04:13.724 --> 00:04:16.145
So it will go to the else.

59
00:04:16.145 --> 00:04:22.780
But some people will think that maybe we
should capture catch like an exception?

60
00:04:22.780 --> 00:04:27.066
Well, that's not correct,
because if I ask you to search for

61
00:04:27.066 --> 00:04:32.093
something in the library for
a book in the library, and it's not there,

62
00:04:32.093 --> 00:04:35.983
so you come back and you tell me,
hey, it's not there.

63
00:04:35.983 --> 00:04:39.299
Actually, you could finish the process.

64
00:04:39.299 --> 00:04:46.293
You finished the operation, you search for
the book and the answer is no, okay?

65
00:04:46.293 --> 00:04:51.050
That's different, than if you try to go to
the library and it's locked with a key and

66
00:04:51.050 --> 00:04:52.793
you couldn't enter the room.

67
00:04:52.793 --> 00:04:57.384
In that case,
that's a promise that fail, okay.

68
00:04:57.384 --> 00:05:00.385
So in this case,
it's not a failed promise.

69
00:05:00.385 --> 00:05:04.413
So it just the object is not there,
and if it's not there,

70
00:05:04.413 --> 00:05:06.315
we return with a Fetch API.

71
00:05:06.315 --> 00:05:11.692
Be careful, this is not a fetch event,
we have the fetch event and the Fetch API.

72
00:05:11.692 --> 00:05:18.079
This is the same API that we use to
replace AJAX or XML HTTP request.

73
00:05:18.079 --> 00:05:21.591
And we are going to fetch for

74
00:05:21.591 --> 00:05:27.714
that request that we have
in event dot request.

75
00:05:27.714 --> 00:05:32.780
So in this case, if we are here,
it's a cache hit.

76
00:05:32.780 --> 00:05:36.096
So it means it's in the cache,

77
00:05:36.096 --> 00:05:41.203
if not it's a cache miss,
so we go to a network.

78
00:05:41.203 --> 00:05:47.491
This pattern that we have here,
it's called cache first.

79
00:05:47.491 --> 00:05:52.871
So, when the PWA or
the browser needs a restart,

80
00:05:52.871 --> 00:05:56.029
we first check in the cache.

81
00:05:56.029 --> 00:06:00.252
If it's there, I will use that one.

82
00:06:00.252 --> 00:06:03.437
And if it's not there,
I will go to the network so

83
00:06:03.437 --> 00:06:07.031
that's why it's called cache first,
then network.

84
00:06:09.252 --> 00:06:11.512
Before actually testing this,

85
00:06:11.512 --> 00:06:15.453
something that I wanna add
here when we are installing.

86
00:06:15.453 --> 00:06:19.498
I mean this code works, and
it will probably work most cases.

87
00:06:19.498 --> 00:06:24.363
But what happens,
if you hear you're downloading

88
00:06:24.363 --> 00:06:27.880
a video file, that is one gigabyte.

89
00:06:27.880 --> 00:06:30.721
So, what happens with that?

90
00:06:30.721 --> 00:06:32.348
Mostly what happens?

91
00:06:32.348 --> 00:06:37.572
Because the service worker will
actually be stopped after 40 seconds,

92
00:06:37.572 --> 00:06:41.374
so what happens if the videos
are still downloading?

93
00:06:41.374 --> 00:06:45.225
Well, we don't want that situation, so

94
00:06:45.225 --> 00:06:52.056
that's why typically we wrap this
caches not open within a call to event.

95
00:06:53.707 --> 00:06:58.958
Wait until, so we can actually ask
the browser to wait until something

96
00:06:58.958 --> 00:07:03.865
happens and we do that with wait until,
that receives a promise.

97
00:07:03.865 --> 00:07:07.478
So it will wait until that
promise is fulfilled.

98
00:07:07.478 --> 00:07:10.507
In this case,
it's asking the browser hey browser,

99
00:07:10.507 --> 00:07:14.221
please don't kill me because I will
try to go on grab some fights.

100
00:07:14.221 --> 00:07:17.939
Again, if you don't have that,
for most PWA's,

101
00:07:17.939 --> 00:07:23.999
it's not going to be a big deal because
in 40 seconds everything should be lower.

102
00:07:23.999 --> 00:07:29.544
But just in case it's better
to add event wait until So

103
00:07:29.544 --> 00:07:34.939
now we go back to chrome and
we see if we have something different

104
00:07:39.331 --> 00:07:43.800
Back to chrome,
I'm going to click update and

105
00:07:43.800 --> 00:07:48.967
reload the page but
not the fake URL but the homepage.

106
00:07:50.769 --> 00:07:55.148
I'm back here and yeah,
I don't see any difference yet okay?

107
00:07:55.148 --> 00:08:02.076
So I should try the offline simulator and
see if this is offline ready.

108
00:08:02.076 --> 00:08:06.610
So the question is what's the chance
of getting a service workers tack on

109
00:08:06.610 --> 00:08:07.439
the client?

110
00:08:07.439 --> 00:08:13.741
So the thing is that it depends on
the definition of or what can happen.

111
00:08:13.741 --> 00:08:17.042
Actually if there is an exception
in the service worker,

112
00:08:17.042 --> 00:08:21.513
what will happen is that everything
will work without the service worker, so

113
00:08:21.513 --> 00:08:23.596
it will bypass the service worker.

114
00:08:23.596 --> 00:08:25.702
And that's why we're within the fallback.

115
00:08:25.702 --> 00:08:30.697
And, the only thing that
might happen is that

116
00:08:30.697 --> 00:08:35.699
you are delivering a file
that has some bugs.

117
00:08:35.699 --> 00:08:41.033
We are backs, and the only
the worst case scenario is that for

118
00:08:41.033 --> 00:08:45.231
a day,
you will end up messing with your users.

119
00:08:45.231 --> 00:08:47.640
If you find that you have a problem and

120
00:08:47.640 --> 00:08:51.605
you upload a new version of
the service worker to the server,

121
00:08:51.605 --> 00:08:56.730
it might take up to a day on some
browsers, also known as Safari.

122
00:08:56.730 --> 00:09:02.688
On Firefox and Chrome, it will take like
a second reload to actually get that.

123
00:09:02.688 --> 00:09:06.693
But if you mess with
the service worker file and

124
00:09:06.693 --> 00:09:10.695
the HTTP cache header,
it may take up to a day,

125
00:09:10.695 --> 00:09:15.842
that's the longest that you
can get that problem with you.

