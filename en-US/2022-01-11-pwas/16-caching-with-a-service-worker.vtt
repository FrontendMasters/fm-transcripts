WEBVTT

1
00:00:00.220 --> 00:00:03.590
So far, our service worker is useless.

2
00:00:03.590 --> 00:00:05.270
It's actually doing nothing.

3
00:00:05.270 --> 00:00:08.430
So this console,
we're going to remove that.

4
00:00:08.430 --> 00:00:11.749
And most of the time that we're
going to do here, is to listen for

5
00:00:11.749 --> 00:00:13.840
service workers events.

6
00:00:13.840 --> 00:00:19.011
I'm going to start with,
an event that is called InStyle.I'm

7
00:00:19.011 --> 00:00:23.893
going to use Self,
as a way to reference the service worker,

8
00:00:23.893 --> 00:00:28.199
avoiding the use of 'this',
the 'this' object,

9
00:00:28.199 --> 00:00:34.670
will have some problem mostly when you
are doing OOP, with the class syntax.

10
00:00:34.670 --> 00:00:40.650
Anyway, and the service worker will
use self And then add event listener.

11
00:00:40.650 --> 00:00:43.590
So in this case,
we are installing the ServiceWorker.

12
00:00:43.590 --> 00:00:48.020
So when the ServiceWorker is being
installed, we actually go into something.

13
00:00:48.020 --> 00:00:53.207
And something that we typically
do here is we ask the caches API,

14
00:00:53.207 --> 00:00:56.700
and that's how we access that API.

15
00:00:56.700 --> 00:01:02.350
caches we open a cache with a cache name.

16
00:01:02.350 --> 00:01:03.930
That's like a folder.

17
00:01:03.930 --> 00:01:07.970
If you want, we can call these
assets we can create more than one.

18
00:01:09.130 --> 00:01:11.190
And this is promise based.

19
00:01:11.190 --> 00:01:14.390
So I can use async await,
or I can use them.

20
00:01:14.390 --> 00:01:16.424
So when the cache is open,

21
00:01:16.424 --> 00:01:21.240
Then I can receive that cache object and
do something with it.

22
00:01:22.640 --> 00:01:28.274
And what we typically doing the first
time when we are installing

23
00:01:28.274 --> 00:01:34.639
the ServiceWorker is to cache resources
one by one with another method or

24
00:01:34.639 --> 00:01:40.910
at all Receives an array of assets
that I need you to find somewhere.

25
00:01:40.910 --> 00:01:46.590
So just here is going
to be an array of URLs.

26
00:01:46.590 --> 00:01:53.580
For example, I know in my my HTML
needs the styles dot CSS object.

27
00:01:53.580 --> 00:01:54.250
Yes.

28
00:01:54.250 --> 00:02:00.261
So I'm going to start
listing my assets So,

29
00:02:00.261 --> 00:02:03.840
styles dot CSS app dot JS.

30
00:02:06.080 --> 00:02:08.330
And we have SW register dot JS.

31
00:02:08.330 --> 00:02:08.830
Okay?

32
00:02:10.580 --> 00:02:13.080
So let's see what happens with this.

33
00:02:13.080 --> 00:02:14.570
I'm not saying this is done.

34
00:02:14.570 --> 00:02:17.770
I'm not saying this is correct but
I want to see what happens.

35
00:02:17.770 --> 00:02:25.840
So if I run this code, and now if I go
back to chrome, we have our first problem.

36
00:02:25.840 --> 00:02:27.250
What happens if I refresh?

37
00:02:28.480 --> 00:02:32.300
Because I already
registered a ServiceWorker.

38
00:02:32.300 --> 00:02:35.770
So my ServiceWorker was still there.

39
00:02:35.770 --> 00:02:37.460
It's in my computer.

40
00:02:37.460 --> 00:02:43.460
I have just changed it in the server,
but if I reload which version will use?

41
00:02:43.460 --> 00:02:50.300
Well by default, it's always using the
version that you have already registered.

42
00:02:50.300 --> 00:02:55.530
So let's say it's like the old version,
not the new version.

43
00:02:55.530 --> 00:03:01.809
When you are, with depth tools,
enable in Google Chrome or Microsoft Edge,

44
00:03:01.809 --> 00:03:08.089
you can enable this debug tool known
as update or reload, update and reload,

45
00:03:08.089 --> 00:03:14.960
will actually force a ServiceWorker
update, when you reload the patient.

46
00:03:14.960 --> 00:03:16.840
That's not going to happen.

47
00:03:16.840 --> 00:03:19.200
On normal users visiting your website.

48
00:03:19.200 --> 00:03:20.060
Okay?

49
00:03:20.060 --> 00:03:21.381
But while debugging,

50
00:03:21.381 --> 00:03:26.050
while writing your ServiceWorkers code
it's actually a good idea to use that.

51
00:03:27.180 --> 00:03:28.910
So I'm going to refresh now.

52
00:03:30.590 --> 00:03:34.850
Okay nothing happens be
surely which is okay.

53
00:03:34.850 --> 00:03:39.760
But now I have something here that says
caches storage with a little arrow.

54
00:03:39.760 --> 00:03:45.050
And I can open that arrow and
I can see a storage within the assets.

55
00:03:45.050 --> 00:03:51.110
And if I click there, you can see the
three resources that I have shares cached.

56
00:03:52.270 --> 00:03:52.770
Okay?

57
00:03:53.780 --> 00:03:55.040
And they are there.

58
00:03:55.040 --> 00:03:59.530
So now these three
assets are in my device.

59
00:03:59.530 --> 00:04:03.992
So if I turn off my server,
or turn off the WiFi or

60
00:04:03.992 --> 00:04:09.920
my connection, we guess that it
should be available offline.

61
00:04:11.070 --> 00:04:16.090
To actually test that, something that
we have is an offline simulator.

62
00:04:16.090 --> 00:04:20.110
Also here in the service workers,
dev tools.

63
00:04:20.110 --> 00:04:22.230
So then we don't need to stop the server.

64
00:04:22.230 --> 00:04:24.480
We don't need to turn off our Wi Fi.

65
00:04:24.480 --> 00:04:27.484
We just need to click here, refresh and

66
00:04:27.484 --> 00:04:31.770
see how our our app will work offline or
not.

67
00:04:31.770 --> 00:04:34.145
My app is still not working off.

68
00:04:34.145 --> 00:04:40.590
Okay.There are many reasons of
why it's still not offline ready.

69
00:04:40.590 --> 00:04:45.350
But let's say first,
that we are not serving the files.

70
00:04:45.350 --> 00:04:51.160
We are caching the files, but the service
worker is doing nothing automatically.

71
00:04:51.160 --> 00:04:53.800
We actually need to write our code.

72
00:04:53.800 --> 00:04:59.505
We need to write the server code okay so
it's not like an nginx or

73
00:04:59.505 --> 00:05:04.567
Apache that has some behavior
by default here our server

74
00:05:04.567 --> 00:05:10.220
will do nothing okay but
also another issue that we have.

75
00:05:10.220 --> 00:05:13.306
That's why is this is not
completely well done yet,

76
00:05:13.306 --> 00:05:15.420
is that we are not serving the HTML.

77
00:05:16.520 --> 00:05:19.190
We are not caching the HTML.

78
00:05:19.190 --> 00:05:21.360
And if we don't have the HTML,
we won't have an app.

79
00:05:22.620 --> 00:05:26.180
So you actually need to
always cache the HTML.

80
00:05:26.180 --> 00:05:30.950
And the most common mistake
here is to boot index HTML.

81
00:05:30.950 --> 00:05:35.295
Here as a name that we want to cash,
it will cash the asset,

82
00:05:35.295 --> 00:05:38.940
the HTML, but then it's going to work.

83
00:05:38.940 --> 00:05:39.780
Why?

84
00:05:39.780 --> 00:05:43.730
Because we are caching URLs,
not file names.

85
00:05:43.730 --> 00:05:51.050
So don't use index html, use forward slash
to represent the root of this domain.

86
00:05:51.050 --> 00:05:54.340
Also, we do think about other
resources that we need.

87
00:05:54.340 --> 00:05:58.450
For example, if we look at our HTML,
I think we are good.

88
00:05:58.450 --> 00:06:01.030
So we have maybe you're thinking
what happened with the icons?

89
00:06:01.030 --> 00:06:05.498
Well, because the icon is being installed
by the by the browser when we install

90
00:06:05.498 --> 00:06:08.150
the app,
we don't need to actually cache it.

91
00:06:09.170 --> 00:06:11.920
Okay, you can if you want,
but there is no need to.

92
00:06:11.920 --> 00:06:17.463
And something similar happened with
the money First, we don't actually need to

93
00:06:17.463 --> 00:06:23.190
hash these files because we are not using
those files in our, let's say, web app.

94
00:06:23.190 --> 00:06:30.500
These are more like metadata that happens
around the PWA and not inside the PWA.

95
00:06:30.500 --> 00:06:39.101
But if you go to the CSS We are gonna
see that we need one more asset and

96
00:06:39.101 --> 00:06:44.570
that Google forms the wealth file.

97
00:06:44.570 --> 00:06:47.697
The icons are actually
coming from this file so

98
00:06:47.697 --> 00:06:52.540
if I don't have that file while offline,
I won't have icon.

99
00:06:52.540 --> 00:06:54.680
And add that that song sounds good.

100
00:06:54.680 --> 00:06:56.250
Which leads to the question.

101
00:06:57.560 --> 00:07:02.100
Can we cache assets that
are not part of our scope?

102
00:07:02.100 --> 00:07:05.740
Because this asset is coming
from a different domain.

103
00:07:05.740 --> 00:07:08.140
It's a cross domain resource.

104
00:07:08.140 --> 00:07:10.460
And the answer is a big Yes.

105
00:07:11.690 --> 00:07:17.658
Our service worker can cache
assets from the whole web The only

106
00:07:17.658 --> 00:07:25.310
thing is that it can only serve that
asset to our scope or to its own scope.

107
00:07:25.310 --> 00:07:32.481
Okay, so I can cache this file, but it our
ServiceWorker can serve that fine only for

108
00:07:32.481 --> 00:07:37.838
our PWA and not for other PWA s or
websites requesting the file.

109
00:07:40.260 --> 00:07:46.792
So I will go to my ServiceWorker, and
I will add another acid here, like this.

110
00:07:49.014 --> 00:07:53.374
And now I will refresh with update and
reload.

111
00:07:55.702 --> 00:08:00.406
So now our caches storage has
all the assets that we need jog

112
00:08:00.406 --> 00:08:05.398
trolley finally rendering the app but
for rendering the app we

113
00:08:05.398 --> 00:08:10.678
actually need one more step we need
the service worker to actually

114
00:08:10.678 --> 00:08:15.290
serve the files right now we
are just installing the files

