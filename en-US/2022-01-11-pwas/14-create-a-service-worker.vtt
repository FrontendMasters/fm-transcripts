WEBVTT

1
00:00:00.319 --> 00:00:04.880
So it's time to go back to the code and
write our first service worker.

2
00:00:04.880 --> 00:00:07.934
I'm in VS code and
now I'm going to create a new file.

3
00:00:07.934 --> 00:00:12.093
It's JavaScript file, so
I'm going to create a new file,

4
00:00:12.093 --> 00:00:15.790
I'm going to save that
file as serviceworker.js.

5
00:00:15.790 --> 00:00:19.377
Typically we have only one
service worker per PWA.

6
00:00:19.377 --> 00:00:23.880
As I mentioned before, you can have more
than one if they are in different folders.

7
00:00:23.880 --> 00:00:26.463
That typically we don't
wanna mess with that.

8
00:00:26.463 --> 00:00:28.450
So there are not so many use cases.

9
00:00:28.450 --> 00:00:32.866
So we put the file in the root
folder of our project, and

10
00:00:32.866 --> 00:00:36.514
we can call that sw JS,
or service worker JS,

11
00:00:36.514 --> 00:00:41.506
any name we work, but
those are the typical names that we use.

12
00:00:41.506 --> 00:00:45.271
And for now,
I'm just going to say console.log.

13
00:00:45.271 --> 00:00:48.690
Hello from the ServiceWorker.

14
00:00:48.690 --> 00:00:52.130
Just understand how this works.

15
00:00:52.130 --> 00:00:56.514
It's a JavaScript file, but
we are not going to use it or

16
00:00:56.514 --> 00:01:00.110
important as any other JavaScript.

17
00:01:00.110 --> 00:01:03.464
So in the HTML,
then we are not going to run a script.

18
00:01:03.464 --> 00:01:07.502
So this is wrong I'm not going
to call this script like this.

19
00:01:07.502 --> 00:01:12.694
If we do this it will execute that
ServiceWorker file in the main thread and

20
00:01:12.694 --> 00:01:14.130
we do not want that.

21
00:01:14.130 --> 00:01:16.146
Okay so that's not how it works.

22
00:01:16.146 --> 00:01:21.460
We actually need to register
the service worker with its own API.

23
00:01:21.460 --> 00:01:26.201
So to do that I'm going to
create another normal standard

24
00:01:26.201 --> 00:01:31.348
script just to separate these
from the current app behavior.

25
00:01:31.348 --> 00:01:36.925
So we can call this sw-register.js,

26
00:01:36.925 --> 00:01:39.800
SW ServiceWorker.

27
00:01:39.800 --> 00:01:44.946
So I'm going to create that file
Ctrl click or Command click and here

28
00:01:44.946 --> 00:01:50.739
I'm going to register the serviceworker
remember this is the main thread.

29
00:01:52.140 --> 00:01:57.870
So to register a service worker,
we use navigator.serviceworker,

30
00:01:57.870 --> 00:02:01.947
be careful with a capital
W there .register, and

31
00:02:01.947 --> 00:02:07.490
it receives as the first argument,
the URL of the service worker.

32
00:02:07.490 --> 00:02:08.858
So it's actually pretty simple.

33
00:02:08.858 --> 00:02:12.306
serviceworker.js.

34
00:02:12.306 --> 00:02:16.970
So we have,
like 8% of the users right now browsing

35
00:02:16.970 --> 00:02:21.112
the web without support for
service workers.

36
00:02:21.112 --> 00:02:23.703
And probably you already
know this at this point.

37
00:02:23.703 --> 00:02:28.240
But what will happen if the service
worker API is not available?

38
00:02:28.240 --> 00:02:34.267
This line will create an exception,
so it's a good idea to check for

39
00:02:34.267 --> 00:02:39.147
service worker support
before registering the file.

40
00:02:39.147 --> 00:02:43.183
To do that,
we can verify if the service worker

41
00:02:43.183 --> 00:02:47.440
property is available in
the navigator option.

42
00:02:47.440 --> 00:02:52.580
So if that's true then we
register the service worker.

43
00:02:52.580 --> 00:02:57.788
Please warning here be careful with
in this case using camel case so

44
00:02:57.788 --> 00:03:02.817
be careful with that capital W
because if not isn't gonna work.

45
00:03:02.817 --> 00:03:08.534
Okay, so actually registering a service
worker is pretty simple is this.

46
00:03:08.534 --> 00:03:13.569
So let's see this in action, and
back here in Google Chrome and

47
00:03:13.569 --> 00:03:18.414
now we are going to pay attention
to the second section within

48
00:03:18.414 --> 00:03:22.680
the application tab that says,
service workers.

49
00:03:22.680 --> 00:03:26.460
So, if you click there right now,
nothing appears.

50
00:03:26.460 --> 00:03:31.130
So we don't have any anything there
because we didn't have a serviceworker.

51
00:03:31.130 --> 00:03:34.219
But now I'm going to refresh.

52
00:03:34.219 --> 00:03:39.031
Whenever refreshing now you see
that something appears here,

53
00:03:39.031 --> 00:03:42.036
we have a source, we have a timestamp.

54
00:03:42.036 --> 00:03:46.754
Also we have the current status it
says it's activated and running.

55
00:03:46.754 --> 00:03:49.211
And I can stop it if I want to.

56
00:03:49.211 --> 00:03:51.000
Okay, so it's currently running.

57
00:03:51.000 --> 00:03:52.615
If I go to the console,

58
00:03:52.615 --> 00:03:57.039
you can see the message saying
hello from the service worker.

59
00:03:57.039 --> 00:03:59.669
It's coming from the service worker JS.

60
00:03:59.669 --> 00:04:01.196
Let me show you something.

61
00:04:01.196 --> 00:04:07.103
If you are execute code here in the
console, by default, you're in the window.

62
00:04:07.103 --> 00:04:12.924
But also you can click in the top
drop down and change the context.

63
00:04:12.924 --> 00:04:17.766
And at the bottom you will find
the service workers context and

64
00:04:17.766 --> 00:04:21.599
now if you do this you're
in the service worker.

65
00:04:21.599 --> 00:04:26.118
So sometimes when you're in the dev
tools you can pick if you want to

66
00:04:26.118 --> 00:04:29.116
execute code in the service worker thread.

67
00:04:29.116 --> 00:04:33.991
Or in the main UI thread and when you're
in the service worker have in mind that

68
00:04:33.991 --> 00:04:38.116
after a few seconds of inactivity
without any network activity,

69
00:04:38.116 --> 00:04:40.870
your thread will be terminated.

70
00:04:40.870 --> 00:04:45.615
So you will see in a couple of seconds
that serviceworker.js will actually not be

71
00:04:45.615 --> 00:04:47.867
there anymore and he will disappear.

72
00:04:47.867 --> 00:04:52.166
It's still active area, but
at one point, it will just disappear.

73
00:04:52.166 --> 00:04:57.453
Okay so that also means that
the service worker is not

74
00:04:57.453 --> 00:05:03.140
the right place to put some content or
some logic.

75
00:05:03.140 --> 00:05:06.536
For example,
if you want to communicate with a server,

76
00:05:06.536 --> 00:05:11.087
like with a web socket or something
like that, this is not the right place,

77
00:05:11.087 --> 00:05:15.590
because after 40 seconds of inactivity,
your serviceworker is dead.

78
00:05:15.590 --> 00:05:22.950
So we don't want that so have in mind
this the lifecycle of the service worker.

79
00:05:22.950 --> 00:05:28.183
So now we do have a service worker but
that doesn't mean that our app

80
00:05:28.183 --> 00:05:33.613
is passing the criteria in fact
going back to application manifest?

81
00:05:33.613 --> 00:05:36.484
Now, we don't have
the message saying that,

82
00:05:36.484 --> 00:05:40.544
that there is no serviceworker
because we have a serviceworker.

83
00:05:40.544 --> 00:05:43.132
But the page doesn't work offline.

84
00:05:43.132 --> 00:05:47.380
So we have a serviceworker but
it's completely useless at this point.

