WEBVTT

1
00:00:00.066 --> 00:00:05.596
There is a whole working group at the W3C,
it's a performance working group, and

2
00:00:05.596 --> 00:00:11.370
they're creating a lot of other specs that
some browsers are implementing with time.

3
00:00:11.370 --> 00:00:17.406
Typically, Chromium browsers are the one
implementing these API first,

4
00:00:17.406 --> 00:00:21.540
and Safari and
Firefox are a little behind, okay?

5
00:00:21.540 --> 00:00:23.626
But there are a lot of APIs.

6
00:00:23.626 --> 00:00:29.416
So every API actually worked with that
performance property that we saw before.

7
00:00:29.416 --> 00:00:31.585
So everything is there.

8
00:00:31.585 --> 00:00:38.472
And we have on modern APIs, entries.

9
00:00:38.472 --> 00:00:41.291
And that entries
are collections of metrics.

10
00:00:41.291 --> 00:00:44.214
And we can query entries using filters.

11
00:00:44.214 --> 00:00:46.944
I know it sounds weird, but
let me show you some samples.

12
00:00:46.944 --> 00:00:49.596
For example,
you can get navigation entries.

13
00:00:49.596 --> 00:00:53.089
Those are the entry we saw before.

14
00:00:53.089 --> 00:00:58.788
We can get resource entries, the spec
is known as a Resource Timing API.

15
00:00:58.788 --> 00:01:03.293
In this case, you can get the DNS
resolution, the TCP timings,

16
00:01:03.293 --> 00:01:06.130
the download times for every resource,

17
00:01:06.130 --> 00:01:10.478
for every PNG, for every CSS,
for every JavaScript, okay?

18
00:01:10.478 --> 00:01:14.687
You can say a mark,
that's known as User Timing.

19
00:01:14.687 --> 00:01:18.994
In this case, you can mark your
own events in the timeline.

20
00:01:18.994 --> 00:01:22.991
So in this case, you say, okay,
my tweet is ready, if you're Twitter.

21
00:01:22.991 --> 00:01:26.244
My tweet is ready, or
something is rendered.

22
00:01:26.244 --> 00:01:32.721
And then you can actually get
an observation of when that happen, okay?

23
00:01:32.721 --> 00:01:37.498
So you can create your own custom
metrics with User Timing API.

24
00:01:37.498 --> 00:01:42.001
And if you use User Timing API,
you can measure, so you can calculate.

25
00:01:42.001 --> 00:01:44.934
I have this measure and that one, well,

26
00:01:44.934 --> 00:01:49.697
give me the duration of that process and
I do something with that.

27
00:01:49.697 --> 00:01:55.311
Analytics, making a decision on the fly,
then you wanna change something.

28
00:01:55.311 --> 00:02:00.981
So the old version to getEntries
is performance .getEntriesByType.

29
00:02:00.981 --> 00:02:02.129
That's deprecated.

30
00:02:02.129 --> 00:02:05.191
It's still working, but it's deprecated.

31
00:02:05.191 --> 00:02:11.129
The properties are name, entryType,
startTime, and duration.

32
00:02:11.129 --> 00:02:16.790
And I know it's still feels still weird,
we will show that in code in a minute.

33
00:02:16.790 --> 00:02:22.433
And the new version, instead of getting
the entries, we create observers.

34
00:02:22.433 --> 00:02:23.055
Why?

35
00:02:23.055 --> 00:02:26.967
Because sometimes we don't have
the data yet, we need to wait for it.

36
00:02:26.967 --> 00:02:29.004
So now we create observer.

37
00:02:29.004 --> 00:02:31.713
They are listeners.

38
00:02:31.713 --> 00:02:38.047
So we observe for
those kind of performance moments.

39
00:02:38.047 --> 00:02:41.444
For example,
let's see what you see here in action.

40
00:02:41.444 --> 00:02:44.382
PerformanceObserver.supportedEntries.

41
00:02:44.382 --> 00:02:49.890
If we go here to Chrome, and
we talk to the performanceObserver,

42
00:02:49.890 --> 00:02:52.708
and we asked for the entry types.

43
00:02:52.708 --> 00:02:56.329
So Chrome supports all
these types of observers.

44
00:02:56.329 --> 00:03:00.685
So for example,
I can observe largest-contentful-paint.

45
00:03:03.063 --> 00:03:05.514
Which is good, so
now you know what that is.

46
00:03:05.514 --> 00:03:08.981
It's the most important metric
that we saw from Web Vitals.

47
00:03:08.981 --> 00:03:14.509
So which means that if I create
an observer over that entry,

48
00:03:14.509 --> 00:03:19.706
then when the browser has said,
we had the winner,

49
00:03:19.706 --> 00:03:25.347
we know which element is
the largest-contentful-paint,

50
00:03:25.347 --> 00:03:27.576
and we have the metric.

51
00:03:27.576 --> 00:03:31.561
It will execute our observer,
and we will receive the data.

52
00:03:31.561 --> 00:03:35.936
We will know the LCP in JavaScript.

53
00:03:35.936 --> 00:03:37.556
Does it make sense?

54
00:03:37.556 --> 00:03:39.530
First-input delay is this one.

55
00:03:39.530 --> 00:03:40.811
This is CLS.

56
00:03:40.811 --> 00:03:46.571
So actually from Chrome, you can
actually get the three Web Vitals in

57
00:03:46.571 --> 00:03:52.546
JavaScript just by creating our
server over the performance options.

58
00:03:52.546 --> 00:03:57.680
Let's say, for example,
longtask is the observer

59
00:03:57.680 --> 00:04:02.590
you will use to know when
a task is over the budget.

60
00:04:02.590 --> 00:04:03.216
What's a task?

61
00:04:03.216 --> 00:04:04.589
A JavaScript thread.

62
00:04:04.589 --> 00:04:09.517
If you have some JavaScript code that
is looping through 1,000 elements and

63
00:04:09.517 --> 00:04:13.005
doing something with that,
it's taking too much time.

64
00:04:13.005 --> 00:04:15.420
Well, the observer will
receive the information.

65
00:04:15.420 --> 00:04:21.155
That script, that line, it has just
execute code for 100 milliseconds.

66
00:04:21.155 --> 00:04:22.746
It's over the line.

67
00:04:22.746 --> 00:04:26.256
And then you can query your server.

68
00:04:26.256 --> 00:04:30.505
But not every browser supports
the same kind of types.

69
00:04:30.505 --> 00:04:32.461
That's not what I want.

70
00:04:32.461 --> 00:04:35.412
If I open Safari, we inspect here.

71
00:04:35.412 --> 00:04:36.320
We go to the console.

72
00:04:39.597 --> 00:04:41.632
We only have five kinds.

73
00:04:41.632 --> 00:04:45.050
We have mark, measure,
navigation, paint, and resource.

74
00:04:45.050 --> 00:04:48.587
So we don't have Web Vitals.

75
00:04:48.587 --> 00:04:51.499
We have paint, that's first paint.

76
00:04:51.499 --> 00:04:55.708
First paint is when something
appears on the screen,

77
00:04:55.708 --> 00:05:00.302
that doesn't mean it's content or
it's useful, okay?

78
00:05:00.302 --> 00:05:02.086
So how does this work?

79
00:05:05.176 --> 00:05:08.289
We can actually try this
directly in our code.

80
00:05:08.289 --> 00:05:11.478
You can see it's actually pretty simple,
it's not so complicated.

81
00:05:11.478 --> 00:05:18.058
For example, in our script,
we create a new PerformanceObserver, okay?

82
00:05:18.058 --> 00:05:20.021
Just that.

83
00:05:20.021 --> 00:05:24.880
And we observe different entries.

84
00:05:24.880 --> 00:05:28.429
For example,
here I can say which entries do I want?

85
00:05:28.429 --> 00:05:31.566
For example,
I want largest-contentful-paint.

86
00:05:31.566 --> 00:05:33.185
We are talking about this.

87
00:05:33.185 --> 00:05:35.269
I want largest-contentful-paint.

88
00:05:35.269 --> 00:05:36.550
And it's an array.

89
00:05:36.550 --> 00:05:41.120
So if I want all the web vitals,
I can also pass the other two.

90
00:05:41.120 --> 00:05:42.968
But for some reason,
they don't have the full name.

91
00:05:42.968 --> 00:05:45.719
So it's not CLS, content layer shift.

92
00:05:45.719 --> 00:05:47.421
It's just layer shift.

93
00:05:47.421 --> 00:05:49.253
Who knows?

94
00:05:49.253 --> 00:05:54.000
And the other one is also first-input and
not.

95
00:05:54.000 --> 00:05:58.988
The second argument is buffered,
true or false.

96
00:05:58.988 --> 00:05:59.903
Why is that?

97
00:05:59.903 --> 00:06:04.188
If you say true,
when you start observing events,

98
00:06:04.188 --> 00:06:07.486
maybe the event has already happened.

99
00:06:07.486 --> 00:06:08.763
Does it make sense?

100
00:06:08.763 --> 00:06:11.829
So if you say buffer true,
you're asking, hey,

101
00:06:11.829 --> 00:06:16.139
if the event already happened,
give me a call anyway, immediately.

102
00:06:16.139 --> 00:06:17.134
I wanna receive that.

103
00:06:17.134 --> 00:06:23.773
Buffer false will just give me
an execution only from now on,

104
00:06:23.773 --> 00:06:27.819
not if the data is already buffered.

105
00:06:27.819 --> 00:06:29.238
Does that make sense?

106
00:06:29.238 --> 00:06:30.954
&gt;&gt; So is it false in Safari?

107
00:06:30.954 --> 00:06:35.517
&gt;&gt; In this case, I mean,
Safari also supports true and false, but

108
00:06:35.517 --> 00:06:38.404
Safari will not support these entries.

109
00:06:38.404 --> 00:06:40.523
So it will never execute my.

110
00:06:40.523 --> 00:06:45.497
I can also add paint, that's the one
supported by Safari, for example.

111
00:06:45.497 --> 00:06:50.919
And there, it's going execute your
observer and you will receive entries.

112
00:06:50.919 --> 00:06:56.220
And for now, I can just do console.log
just to see what's going on.

113
00:06:56.220 --> 00:06:56.883
Does it make sense?

114
00:06:56.883 --> 00:06:59.071
I mean,
the code is not really complicated,

115
00:06:59.071 --> 00:07:03.117
the thing is understanding that that's
a possibility, that that's available.

116
00:07:03.117 --> 00:07:08.249
So I'm going to refresh, and
now I'm seeing some outputs.

117
00:07:08.249 --> 00:07:10.885
I have actually two outputs.

118
00:07:10.885 --> 00:07:15.081
One, it seems like at the same time,
we've got first-paint and

119
00:07:15.081 --> 00:07:17.080
first-contentful-paint.

120
00:07:17.080 --> 00:07:24.240
Why we've got it at the same time,
probably because they were buffered.

121
00:07:24.240 --> 00:07:26.027
I don't know, but maybe.

122
00:07:26.027 --> 00:07:28.870
And each entry has the startTime.

123
00:07:31.706 --> 00:07:35.546
They happen at the same time,
first-paint and first-contentful-paint.

124
00:07:35.546 --> 00:07:39.829
And then we have the
largest-contentful-paint that if you try

125
00:07:39.829 --> 00:07:42.057
again, it takes some more time.

126
00:07:44.808 --> 00:07:48.226
This is the low time,
the renderTime, okay?

127
00:07:48.226 --> 00:07:52.014
And even if we receive
the URL of the image that is

128
00:07:52.014 --> 00:07:56.680
actually pointing to
the largest-contentful-paint.

129
00:07:56.680 --> 00:08:03.409
And by the way, we can go back to our
delay thing just to see this in action.

130
00:08:03.409 --> 00:08:08.481
And we can even increase
the maximum delay,

131
00:08:08.481 --> 00:08:11.643
so it's not so immediate.

132
00:08:11.643 --> 00:08:13.088
So now we get this.

133
00:08:15.962 --> 00:08:21.903
In this case, you can see it started at
2.7 seconds, largest-contentful-paint.

134
00:08:21.903 --> 00:08:23.762
So that's the LCP.

135
00:08:25.886 --> 00:08:30.109
Okay, does that makes sense,
how that works?

136
00:08:30.109 --> 00:08:31.524
Why do you want the data?

137
00:08:31.524 --> 00:08:32.814
It's up to you.

138
00:08:32.814 --> 00:08:35.394
Maybe you want to send
the data to the server.

139
00:08:35.394 --> 00:08:37.523
Maybe you wanna make
a decision on the fly.

140
00:08:37.523 --> 00:08:41.891
Like, hey, I mean,
loading this app took lot of time.

141
00:08:41.891 --> 00:08:45.799
So from now on,
let's load a basic version of the app.

142
00:08:45.799 --> 00:08:51.851
Or let's jump into a standard version
instead of high definition, whatever.

143
00:08:51.851 --> 00:08:54.558
So the API is just giving you the data.

144
00:08:54.558 --> 00:08:57.018
It's up to you what you're
going to do with that.

145
00:08:57.018 --> 00:09:02.510
If I try this on Safari,
because it's not supporting the whole API,

146
00:09:02.510 --> 00:09:07.434
we should get only the entries
that are important for Safari,

147
00:09:07.434 --> 00:09:09.724
and that's first-paint.

148
00:09:09.724 --> 00:09:14.467
First-contentful-paint also
known as first-paint,

149
00:09:14.467 --> 00:09:17.471
it happened in almost five seconds.

150
00:09:17.471 --> 00:09:21.780
We don't have the largest-contentful-paint
here, we have the first-contentful-paint.

