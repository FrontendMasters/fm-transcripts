WEBVTT

1
00:00:00.000 --> 00:00:01.544
Well, hacking performance.

2
00:00:01.544 --> 00:00:04.000
So far those were the basic ideas.

3
00:00:04.000 --> 00:00:10.951
Some are very general, but now we will
get deeper into how to hack performance,

4
00:00:10.951 --> 00:00:15.021
how to count every millisecond for
us, okay?

5
00:00:15.021 --> 00:00:19.394
There will be a couple of things that we
will see that they are really hacky.

6
00:00:19.394 --> 00:00:23.752
And they have a really
cost of implementation, so

7
00:00:23.752 --> 00:00:28.333
it will be worth the effort
on some situations only.

8
00:00:28.333 --> 00:00:34.891
There are other techniques that are more
okay for most websites and web apps, okay?

9
00:00:34.891 --> 00:00:36.629
That's a warning.

10
00:00:36.629 --> 00:00:39.632
We're going to start
hacking the first load,

11
00:00:39.632 --> 00:00:43.261
that is when you get into the website for
the first time.

12
00:00:43.261 --> 00:00:48.456
So, first, avoid more than one roundtrip.

13
00:00:48.456 --> 00:00:52.108
The first one is really hacky.

14
00:00:52.108 --> 00:00:55.496
You have the warning.

15
00:00:55.496 --> 00:00:57.979
So, avoid more than one roundtrip.

16
00:00:57.979 --> 00:00:59.229
What is this?

17
00:00:59.229 --> 00:01:02.229
It has to do with TCP, how TCP works.

18
00:01:02.229 --> 00:01:06.061
Remember I mentioned before that TCP,

19
00:01:06.061 --> 00:01:10.240
the low level protocol that HTTP is using,

20
00:01:10.240 --> 00:01:17.341
TCP will split our response in
several packets, okay, remember that?

21
00:01:17.341 --> 00:01:21.509
And each packet will go through
the network, and sometimes.

22
00:01:21.509 --> 00:01:24.822
TCP will need to send another one again,

23
00:01:24.822 --> 00:01:28.529
because it gets lost,
and things like that.

24
00:01:28.529 --> 00:01:31.534
But there is a hack that says,

25
00:01:31.534 --> 00:01:36.712
what if we try to send
a response in only one packet?

26
00:01:36.712 --> 00:01:39.223
So the HTTP response, the first one.

27
00:01:39.223 --> 00:01:40.440
What's the first one?

28
00:01:40.440 --> 00:01:45.385
The HTML the most important one
because if the browser doesn't

29
00:01:45.385 --> 00:01:50.063
have the HTML,
it can't move the loading process, okay?

30
00:01:50.063 --> 00:01:53.101
So what if we send only one packet?

31
00:01:53.101 --> 00:01:56.310
For that,
we need to get into the TCP protocol and

32
00:01:56.310 --> 00:01:59.220
learn about something known as slow start.

33
00:01:59.220 --> 00:02:02.614
Because what's the size of a packet?

34
00:02:02.614 --> 00:02:04.810
We don't know.
In fact, it's dynamic.

35
00:02:04.810 --> 00:02:06.746
But we know about the first one.

36
00:02:06.746 --> 00:02:10.977
The first answer will start slowly.

37
00:02:10.977 --> 00:02:15.681
That means that there is something
known as initial congestion window.

38
00:02:15.681 --> 00:02:17.538
It doesn't matter, it's too technical.

39
00:02:17.538 --> 00:02:22.633
But anyway, on Linux or
Linux-based servers,

40
00:02:22.633 --> 00:02:28.351
if you don't touch that set up,
it's 14.6KiB and

41
00:02:28.351 --> 00:02:32.716
the next question is, KiB what's that?

42
00:02:32.716 --> 00:02:37.012
Well, let me ask you a question.

43
00:02:37.012 --> 00:02:41.181
How many bytes in a kilobyte?

44
00:02:41.181 --> 00:02:42.830
&gt;&gt; 1,000.

45
00:02:42.830 --> 00:02:44.681
&gt;&gt; 1,000?

46
00:02:48.058 --> 00:02:49.946
&gt;&gt; Is that 1,024?

47
00:02:49.946 --> 00:02:51.653
&gt;&gt; 1,024?

48
00:02:51.653 --> 00:02:54.632
Which one, 1,000, 1,024?

49
00:02:54.632 --> 00:02:55.934
It's a very basic question.

50
00:02:55.934 --> 00:02:56.705
&gt;&gt; [LAUGH].

51
00:02:56.705 --> 00:02:59.619
&gt;&gt; And
you're giving me weird faces right now.

52
00:02:59.619 --> 00:03:02.252
&gt;&gt; The metric prefects for kilo is 1,000.

53
00:03:02.252 --> 00:03:04.322
But 2 to the 10 almost is 1000.

54
00:03:04.322 --> 00:03:09.953
&gt;&gt; So let's say to answer the question.

55
00:03:09.953 --> 00:03:10.928
Well, 1KiB is 1024.

56
00:03:10.928 --> 00:03:14.560
That's what most people will answer.

57
00:03:14.560 --> 00:03:19.853
Actually, when you do a survey, I'm not
saying this yet as the final statement

58
00:03:19.853 --> 00:03:24.909
saying, I'm saying that typically,
a survey between technical people,

59
00:03:24.909 --> 00:03:29.970
even developers,
80 percent will respond 1,024, so 1,024.

60
00:03:29.970 --> 00:03:32.856
But actually, that's wrong.

61
00:03:32.856 --> 00:03:36.445
I know that a lot of you,
mostly here on the video,

62
00:03:36.445 --> 00:03:41.164
are trying to kill me at this point,
but bear with me for a second.

63
00:03:41.164 --> 00:03:42.964
Actually, it's 1,000.

64
00:03:42.964 --> 00:03:47.042
Because the kilo prefix is 1000 and
it's not just me, right?

65
00:03:47.042 --> 00:03:51.920
So you can go and
ask Siri that is asking actually,

66
00:03:51.920 --> 00:03:57.145
WolframAlpha,
that is a scientific say website.

67
00:03:57.145 --> 00:04:00.395
You can ask Google how
many bytes in a kilobyte.

68
00:04:00.395 --> 00:04:03.053
You can ask ChatGPT if you want.

69
00:04:03.053 --> 00:04:06.640
I don't have the ChatGPT you think,
you can have Wikipedia.

70
00:04:06.640 --> 00:04:10.400
It's 1000.
Yeah, we were wrong.

71
00:04:10.400 --> 00:04:13.776
There is a history of what happened blah,

72
00:04:13.776 --> 00:04:17.252
the binary if I were
actually that was set.

73
00:04:17.252 --> 00:04:23.653
That was set legally and
formally within standards in 1998.

74
00:04:23.653 --> 00:04:27.169
Okay, so a long time ago, 25 years ago.

75
00:04:27.169 --> 00:04:31.393
And we are still not sure
about what kilobytes mean.

76
00:04:31.393 --> 00:04:32.963
Well, anyway.

77
00:04:32.963 --> 00:04:41.022
A kibibyte, not kilobyte kibibyte
is a one that still exists for

78
00:04:41.022 --> 00:04:45.211
1024, that's KiB, okay?

79
00:04:45.211 --> 00:04:48.261
So KiB means kibibyte.

80
00:04:48.261 --> 00:04:53.147
So I'm saying this because you when we're
talking about bytes and milliseconds,

81
00:04:53.147 --> 00:04:54.420
everything counts.

82
00:04:54.420 --> 00:05:00.756
So this is a KiB byte, Man in Black or
[LAUGH] maybe bytes, GB bytes.

83
00:05:00.756 --> 00:05:06.119
So those are the ones that
are using powers of two and

84
00:05:06.119 --> 00:05:10.861
then the other ones legally, technically,

85
00:05:10.861 --> 00:05:14.378
are actually using, 1000.

86
00:05:14.378 --> 00:05:19.294
The main responsible of
the confusion today is

87
00:05:19.294 --> 00:05:24.467
Windows because Windows
is not following this.

88
00:05:24.467 --> 00:05:29.370
Linux and Mac OS based on
UNIX is using this one

89
00:05:29.370 --> 00:05:33.323
the idea is it's KiB or it's KB 1000.

90
00:05:33.323 --> 00:05:37.576
But Windows is using KB for 1024.

91
00:05:37.576 --> 00:05:43.206
So he's not following the spec,
the standards, the industry.

92
00:05:43.206 --> 00:05:48.781
Anyway, going back,
we were saying that 1KiB,

93
00:05:48.781 --> 00:05:52.376
1 kibibyte is 1024 bytes.

94
00:05:52.376 --> 00:05:56.374
So going back to this idea,
we were saying that on Linux.

95
00:05:56.374 --> 00:06:01.281
14.6 KiB is the initial congestion window,

96
00:06:01.281 --> 00:06:07.144
which means if you can fit
within 14.6 KiB, the HTML,

97
00:06:07.144 --> 00:06:12.062
it won't be split into
more than one TCP packet.

98
00:06:12.062 --> 00:06:16.871
So it will arrive to the client
as soon as possible.

99
00:06:16.871 --> 00:06:21.615
Because we don't need to send more than
one packet, wait for them, reorder them.

100
00:06:21.615 --> 00:06:24.723
See if it's there or not, blah.

101
00:06:24.723 --> 00:06:27.663
Thinking you have 14, yeah, it's not so

102
00:06:27.663 --> 00:06:31.884
good but remember that it's HTML and
we are GZIP-ing the HTML.

103
00:06:31.884 --> 00:06:36.505
So that's roughly 70K of HTML,
which sounds better than 14.

104
00:06:36.505 --> 00:06:40.282
This is very hacky, okay.

105
00:06:40.282 --> 00:06:41.746
I know it's very hacky.

106
00:06:41.746 --> 00:06:44.935
And also,
when we are doing web performance,

107
00:06:44.935 --> 00:06:49.892
typically we say now that we have
something known as above the fold, ATF.

108
00:06:49.892 --> 00:06:56.005
And something known as below the fold BTF.

109
00:06:56.005 --> 00:07:00.616
Some people deeply ask the fold,
are we talking about foldables?

110
00:07:00.616 --> 00:07:05.713
Well, actually that these terms
are coming from printed newspapers.

111
00:07:05.713 --> 00:07:09.960
Okay, so the idea when you are paying for
an ad in a newspaper,

112
00:07:09.960 --> 00:07:12.917
you have above the fold, this is the fold.

113
00:07:12.917 --> 00:07:15.788
Above the fold below
the fold below the fold

114
00:07:15.788 --> 00:07:18.910
is cheaper than putting
an ad above the fold.

115
00:07:18.910 --> 00:07:23.023
Okay, so that's we are using
those terms here as well.

116
00:07:23.023 --> 00:07:26.507
On the web of course, we don't have a
fold even if you have a foldable device.

117
00:07:26.507 --> 00:07:29.874
We're talking about the scroll actually,
so

118
00:07:29.874 --> 00:07:32.993
above fold is the first scroll, okay?

119
00:07:32.993 --> 00:07:38.721
Everything that goes below what you see
without scrolling, that's below fold.

120
00:07:38.721 --> 00:07:42.627
So when we're talking
about 14.6 KiB bytes,

121
00:07:42.627 --> 00:07:46.168
maybe we don't need to
serve the whole HTML.

122
00:07:46.168 --> 00:07:49.610
We can serve just above fold.

123
00:07:49.610 --> 00:07:54.004
Because what we need is to achieve
user's perception of performance,

124
00:07:54.004 --> 00:07:58.193
that that is, for example,
largest contentful paint, remember?

125
00:07:58.193 --> 00:08:03.225
So if you achieve that,
then maybe we can fit

126
00:08:03.225 --> 00:08:10.569
in 70K of HTML the code necessary
to render the above fold.

127
00:08:10.569 --> 00:08:14.996
So what can you add that there?

128
00:08:14.996 --> 00:08:20.393
If you can embed CSS and
JavaScript much better.

129
00:08:20.393 --> 00:08:24.367
And if there is a space,
you can even embed the logo in SVG.

130
00:08:24.367 --> 00:08:27.397
Everything that you can fit within 70K

131
00:08:27.397 --> 00:08:31.854
well worth the effort. who is going
to use this technique today this

132
00:08:31.854 --> 00:08:36.576
technique is being used a lot on
some special regions of the world.

133
00:08:36.576 --> 00:08:41.576
Africa some countries in South Asia
where they have a really

134
00:08:41.576 --> 00:08:47.179
performance penalty for
example they have 30% of users on 2G.

135
00:08:47.179 --> 00:08:50.826
We have a really,
big latency problem there.

136
00:08:50.826 --> 00:08:55.314
So we don't want to have
a lot of TCP packets, okay?

137
00:08:55.314 --> 00:08:56.156
Make sense?

138
00:08:56.156 --> 00:08:59.874
In fact, I'm not saying that
they're using this technique today.

139
00:08:59.874 --> 00:09:01.318
They used to use that.

140
00:09:01.318 --> 00:09:06.411
Google.com, the mobile version you should
have some of this technique in action.

141
00:09:06.411 --> 00:09:11.455
So if I enable the mobile user agent,
so I simulate,

142
00:09:11.455 --> 00:09:16.041
Galaxy, the mobile version, let's see now,

143
00:09:16.041 --> 00:09:23.290
because I don't know what's going on,
but yes, they have CSS, inline.

144
00:09:23.290 --> 00:09:24.798
So it's not an external file.

145
00:09:24.798 --> 00:09:26.624
Can you see that CSS there?

146
00:09:26.624 --> 00:09:30.847
In fact,
let's see the source code like so.

147
00:09:30.847 --> 00:09:32.653
We have JavaScript.

148
00:09:32.653 --> 00:09:33.478
That's JavaScript.

149
00:09:33.478 --> 00:09:36.902
Let me increase the font size JavaScript.

150
00:09:36.902 --> 00:09:41.100
That's more JavaScript.

151
00:09:41.100 --> 00:09:43.584
We need to have CSS somewhere.

152
00:09:43.584 --> 00:09:46.278
And sometimes, I'm not sure right
now if I'm going to find it.

153
00:09:46.278 --> 00:09:50.240
Yeah, I have sometimes images,

154
00:09:50.240 --> 00:09:54.776
everything embedded in the HTML why?

155
00:09:54.776 --> 00:09:57.640
To avoid more TCP rounds.

156
00:09:57.640 --> 00:10:00.896
So avoid more HTTP requests.

157
00:10:00.896 --> 00:10:04.745
So then the content can be as
fast as possible, really fast.

158
00:10:04.745 --> 00:10:07.698
It's really hacky, yes, it is.

159
00:10:07.698 --> 00:10:11.267
&gt;&gt; So that's all become like that in that
file during whatever your build is for

160
00:10:11.267 --> 00:10:12.064
whatever your.

161
00:10:12.064 --> 00:10:14.314
&gt;&gt; Yeah, you can have a build process,
your development process.

162
00:10:14.314 --> 00:10:19.234
It can be server-side rendering as
well that is merging all these files

163
00:10:19.234 --> 00:10:20.300
into just one.

164
00:10:20.300 --> 00:10:21.784
&gt;&gt; kinda like tailwind I guess.

165
00:10:21.784 --> 00:10:26.304
&gt;&gt; Yeah but if you can fit
this in 14.6 compressed then

166
00:10:26.304 --> 00:10:29.652
everything will fit in one TCP packet.

167
00:10:29.652 --> 00:10:34.067
Okay, hacky yeah but
yeah we're hacking web performance,

168
00:10:34.067 --> 00:10:37.080
right, [COUGH] this one is interesting.

169
00:10:37.080 --> 00:10:40.713
You should avoid http to https redirect.

170
00:10:40.713 --> 00:10:44.282
Fortunately for us,
this is being replaced on many browsers.

171
00:10:44.282 --> 00:10:47.740
So, here is the deal. What happens
when you type a URL, right?

172
00:10:47.740 --> 00:10:49.941
You see an ad on TV, okay?

173
00:10:49.941 --> 00:10:52.121
Buyme.com.

174
00:10:52.121 --> 00:10:53.601
So, you go and type buyme.com.

175
00:10:53.601 --> 00:10:58.690
You don't type https:,
you just type buyme.com.

176
00:10:58.690 --> 00:11:00.789
So easy trying http or https.

177
00:11:03.574 --> 00:11:06.690
Typically originally it was http and

178
00:11:06.690 --> 00:11:12.126
then the server was saying no we
have we have a redirect to https.

179
00:11:12.126 --> 00:11:17.474
So for that for a long time browsers
were using something known as

180
00:11:17.474 --> 00:11:23.121
HSTS, HTTP Strict Transport Security,
which is just a header that

181
00:11:23.121 --> 00:11:28.194
you can add in your website and
you can opt in within that URL.

182
00:11:28.194 --> 00:11:31.247
Let me explain what that is [COUGH].

183
00:11:31.247 --> 00:11:34.563
When you go to that website,
hstspreload and

184
00:11:34.563 --> 00:11:41.253
you have a website, You can add a URL.

185
00:11:41.253 --> 00:11:44.879
Let's add, I don't know,
New York times.com.

186
00:11:44.879 --> 00:11:46.163
Let's check.

187
00:11:46.163 --> 00:11:50.338
And it says now it's not
supporting the standard so

188
00:11:50.338 --> 00:11:53.453
it's not supporting it, maybe CNN.

189
00:11:53.453 --> 00:11:57.866
Now you can see there are a lot of
websites that are still not using

190
00:11:57.866 --> 00:12:01.711
this technique was the google.com
no say what's going

191
00:12:01.711 --> 00:12:06.073
on well what's this it saying
that you don't have the header.

192
00:12:06.073 --> 00:12:11.237
And what's the deal with this is just
this header that you need to have

193
00:12:11.237 --> 00:12:17.205
when you're responding with your HTML.
That header will say to the browser hey

194
00:12:17.205 --> 00:12:22.753
browser what here in this website,
we always support HTTPS on every URL.

195
00:12:22.753 --> 00:12:28.190
So it's safe from now on to
always go to HTTPS first.

196
00:12:30.917 --> 00:12:32.566
That's HSTS.

197
00:12:32.566 --> 00:12:38.790
So in that case when your user is typing
your URL it will go directly to HTTPS.

198
00:12:38.790 --> 00:12:40.837
It's avoiding one redirect.

199
00:12:40.837 --> 00:12:41.885
Does it make sense?

200
00:12:41.885 --> 00:12:48.727
And if you log in your website here,
whitehouse.gov.

201
00:12:48.727 --> 00:12:51.321
I don't want to try gov.

202
00:12:51.321 --> 00:12:52.231
That's green.

203
00:12:52.231 --> 00:12:53.010
So white house.

204
00:12:53.010 --> 00:12:54.660
It's actually preloaded.

205
00:12:54.660 --> 00:12:59.126
That means if you try
whitehub.gov in your browsers

206
00:12:59.126 --> 00:13:03.703
without the protocol,
it will go directly to HTTPS.

207
00:13:03.703 --> 00:13:07.200
&gt;&gt; How many milliseconds does that save?

208
00:13:07.200 --> 00:13:11.347
&gt;&gt; That's going to save
one TCP connection, and

209
00:13:11.347 --> 00:13:15.716
it can be around 150-200 milliseconds.

210
00:13:18.454 --> 00:13:23.888
Which is, again, 5% of our budget,
so it's not bad.

211
00:13:23.888 --> 00:13:25.563
So again, what do you need to do?

212
00:13:25.563 --> 00:13:27.503
You need to set up this in your server.

213
00:13:27.503 --> 00:13:28.951
It's a header.

214
00:13:28.951 --> 00:13:35.509
And of course, for that, every URL in
your domain must be served with HTTPS.

215
00:13:35.509 --> 00:13:39.923
And today there are a couple of domains
that you can buy, such as .app.

216
00:13:39.923 --> 00:13:42.784
Have you seen the .app?

217
00:13:42.784 --> 00:13:44.803
.app or .web?

218
00:13:44.803 --> 00:13:50.286
And those domains are HSTS by default,
actually,

219
00:13:50.286 --> 00:13:56.032
you cannot serve HTTP over
those domains you cannot.

220
00:13:56.032 --> 00:13:57.267
It's not gonna work.

221
00:13:57.267 --> 00:14:01.092
&gt;&gt; Do you need a certificate or
anything like that?

222
00:14:01.092 --> 00:14:07.226
&gt;&gt; You need the same certificate as https
so you don't need a special certificate.

223
00:14:07.226 --> 00:14:12.462
You need to send the header and
then add your domain in this website And

224
00:14:12.462 --> 00:14:16.433
you will get into a wide list,
that's the name, and

225
00:14:16.433 --> 00:14:20.059
allow list that then you
can remove if you want.

226
00:14:20.059 --> 00:14:26.457
Several browsers, Safari, Firefox and Chrome
are using the list from this website.

227
00:14:26.457 --> 00:14:29.421
It's kind of a standard.

228
00:14:29.421 --> 00:14:34.551
Anyway some browsers today
are changing the algorithm and

229
00:14:34.551 --> 00:14:37.377
they're trying HTTPS first and

230
00:14:37.377 --> 00:14:42.097
only if it's returning
an error it's going to HTTP.

231
00:14:42.097 --> 00:14:43.890
Fortunately they're
changing the algorithm.

