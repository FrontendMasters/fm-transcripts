W/EBVTT

1
00:00:00.210 --> 00:00:03.760
Another section is hacking data transfer.

2
00:00:05.650 --> 00:00:11.092
Well first, HTTP/3, we have already
mentioned this, but try to enable HTTP/3.

3
00:00:11.092 --> 00:00:15.881
We already mentioned it's the transport
protocol over UDP that will reduce latency

4
00:00:15.881 --> 00:00:18.430
and connection messages.

5
00:00:18.430 --> 00:00:21.676
It's the same HTTP/2, so no different API.

6
00:00:21.676 --> 00:00:25.980
It's not gonna add you a lot of overhead.

7
00:00:25.980 --> 00:00:27.930
So this is roughly how it works.

8
00:00:27.930 --> 00:00:31.064
By the way, it says QUIC,
because QUIC was the,

9
00:00:31.064 --> 00:00:35.930
let's say the draft name of HTTP/3,
but it's HTTP/3.

10
00:00:35.930 --> 00:00:42.049
So on a normal TCP + TLS, so that's HTTPS,
you have all these handshakes,

11
00:00:42.049 --> 00:00:45.600
you need to go back, go back, go back, go.

12
00:00:46.630 --> 00:00:49.779
And, of course, that has a latency.

13
00:00:49.779 --> 00:00:51.575
With HTTP/3, you just go.

14
00:00:54.440 --> 00:00:58.059
Okay, so even it's called, for

15
00:00:58.059 --> 00:01:03.891
the second communication,
there is a zero latency.

16
00:01:03.891 --> 00:01:08.366
Zero RTT, round-trip time.

17
00:01:08.366 --> 00:01:11.800
So on Google, it improved 3%.

18
00:01:12.900 --> 00:01:18.439
On YouTube, it has reduced
the buffering of video by 30%.

19
00:01:18.439 --> 00:01:21.570
And Facebook is using a similar
protocol on their native app.

20
00:01:21.570 --> 00:01:23.840
And it has improved 2% performance.

21
00:01:23.840 --> 00:01:26.866
Just by enabling something
in your server or

22
00:01:26.866 --> 00:01:31.410
using tools such as Cloudflare,
that will do that for you.

23
00:01:31.410 --> 00:01:34.860
I'm saying all the time Cloudflare because
it's the one that has a free tier that

24
00:01:34.860 --> 00:01:36.870
you can apply on free
websites pretty quickly.

25
00:01:36.870 --> 00:01:40.080
If not, there are a lot of other
providers that you have to pay for.

26
00:01:40.080 --> 00:01:43.571
Also, Cloudflare has a premium account,
but

27
00:01:43.571 --> 00:01:48.776
Cloudflare is used a lot on many
websites because it has a free tier.

28
00:01:48.776 --> 00:01:53.717
And according to Google,
    75% of requests that are happening

    29
    00:01:53.717 --> 00:01:57.890
    on the web can be optimized
    if HTTP/3 is enabled.

    30
    00:01:57.890 --> 00:02:01.330
    &gt;&gt; So the difference between,
    what is it, UDP and?

    31
    00:02:02.330 --> 00:02:04.537
    &gt;&gt; TCP.
    &gt;&gt; TCP, is with UDP,

    32
    00:02:04.537 --> 00:02:10.440
    it allows you to sort of,
    you don't retry any failed packets?

    33
    00:02:11.680 --> 00:02:14.548
    What are the,
    I guess I don't quite understand.

    34
    00:02:14.548 --> 00:02:17.109
    Sounds like that would be
    a bad thing with web traffic.

35
00:02:17.109 --> 00:02:18.260
&gt;&gt; I know, yeah.

36
00:02:18.260 --> 00:02:19.320
It sounds like that.

37
00:02:19.320 --> 00:02:24.057
For live video, it sounds okay because,
okay, if you have lost some frames,

38
00:02:24.057 --> 00:02:26.550
well, okay, let's move on.

39
00:02:26.550 --> 00:02:29.030
With data, you want all the data.

40
00:02:29.030 --> 00:02:33.000
So it feels dangerous,
you're losing packets.

41
00:02:33.000 --> 00:02:37.119
But actually, HTTP/3 is using UDP and

42
00:02:37.119 --> 00:02:41.960
adding a control thin
layer on top of that.

43
00:02:41.960 --> 00:02:46.523
So HTTP/3 is guaranteeing that
the packets will be received, and

44
00:02:46.523 --> 00:02:49.332
they will retry packets if they are lost.

45
00:02:49.332 --> 00:02:53.934
But it's a thin layer written from
a scratch in the latest five years,

46
00:02:53.934 --> 00:02:55.494
three years actually.

47
00:02:55.494 --> 00:03:02.625
It's not the original TCP protocol that
was written like 30 something years ago.

48
00:03:02.625 --> 00:03:07.220
And they created that thin layer,
that control layer,

49
00:03:07.220 --> 00:03:11.329
specifically targeting
HTTP-based messages,

50
00:03:11.329 --> 00:03:15.743
which means that it's much
more efficient than TCP.

51
00:03:15.743 --> 00:03:17.110
Does it make sense?

52
00:03:17.110 --> 00:03:23.760
So with UDP alone, yeah, we will lose
the quality of the content, right?

53
00:03:23.760 --> 00:03:26.832
But it's not UDP alone.

54
00:03:26.832 --> 00:03:31.660
HTTP/3 uses UDP, but also it has
its own algorithm on top of UDP.

55
00:03:32.720 --> 00:03:34.270
&gt;&gt; Okay, yeah, no, that makes sense.

56
00:03:34.270 --> 00:03:38.457
I can imagine with TCP there
was sort of old spec and

57
00:03:38.457 --> 00:03:41.530
baggage you had to deal with-
&gt;&gt; Something like that.

58
00:03:41.530 --> 00:03:42.772
Yeah, it has to do with that.

59
00:03:42.772 --> 00:03:43.904
&gt;&gt; iiii On top, it works so much faster.
&gt;&gt; Something like that.

60
00:03:43.904 --> 00:03:44.744
&gt;&gt; That makes sense.

61
00:03:48.024 --> 00:03:49.600
&gt;&gt; Okay, use Zopfli.

62
00:03:50.650 --> 00:03:51.800
What's Zopfli?

63
00:03:53.360 --> 00:03:55.400
It can save you data over GZIP.

64
00:03:55.400 --> 00:03:58.260
Remember that we mentioned
that we can use GZIP.

65
00:03:58.260 --> 00:04:00.950
Well, Zopfli, it's a new algorithm.

66
00:04:00.950 --> 00:04:05.120
It's recent over GZIP, okay?

67
00:04:05.120 --> 00:04:09.398
So it's still using
the same ZIP container, but

68
00:04:09.398 --> 00:04:15.170
it's using a different
algorithm to compress the data.

69
00:04:15.170 --> 00:04:19.840
The problem is that 80 times slower for
compression, not for decompression.

70
00:04:20.930 --> 00:04:27.100
So it's more time on your server, not on
users' devices, which is not so bad, okay?

71
00:04:27.100 --> 00:04:33.770
Anyway, I will go really quickly over this
because there is a better one, Brotli.

72
00:04:33.770 --> 00:04:40.154
Brotli is a completely new encoding
format that replaces completely GZIP,

73
00:04:40.154 --> 00:04:44.952
and it can save on text-based
files up to 50% of data.

74
00:04:44.952 --> 00:04:47.818
So if you compress with Brotli,

75
00:04:47.818 --> 00:04:53.029
the amount of data that you
are sending is 20% smaller.

76
00:04:53.029 --> 00:04:58.930
And if that happens, the file will
be on users browsers before and

77
00:04:58.930 --> 00:05:01.090
it will help everyone.

78
00:05:02.120 --> 00:05:05.301
Today, Brotli is compatible
with every browser.

79
00:05:05.301 --> 00:05:10.040
But anyway, if a browser is not supporting
it, the server typically checks

80
00:05:10.040 --> 00:05:14.670
the encoding header and
if it works, it will return Brotli.

81
00:05:14.670 --> 00:05:20.557
I'm not sure if you remember that
before I checked into the headers here.

82
00:05:20.557 --> 00:05:23.989
And there was one header, request header,

83
00:05:23.989 --> 00:05:28.450
that says Accept-Encoding,
gzip, deflate, and br.

84
00:05:28.450 --> 00:05:29.590
Br is Brotli.

85
00:05:30.590 --> 00:05:35.545
In this case, the browser was telling the
server, hey server, I accept Brotli, okay?

86
00:05:35.545 --> 00:05:39.420
So then the server can decide
to return a Brotli-based file.

87
00:05:41.170 --> 00:05:46.190
Brotli, it has the disadvantage
of consuming more CPU as well.

88
00:05:46.190 --> 00:05:49.644
So most of the time you wanna cache it.

89
00:05:49.644 --> 00:05:51.580
That's done by the server.

90
00:05:51.580 --> 00:05:57.790
The server typically caches
the Brotli file of resource.

91
00:05:57.790 --> 00:06:01.630
So it's not compressing the file
on every request, okay?

92
00:06:02.790 --> 00:06:06.693
And LinkedIn has saved 4% in load time.

93
00:06:06.693 --> 00:06:10.390
Facebook savings on CSS and
JavaScript files.

94
00:06:12.390 --> 00:06:15.873
And yeah, that's a lot because we
know that those resources are also

95
00:06:15.873 --> 00:06:19.170
the ones that are blocking rendering or
blocking parsing.

96
00:06:19.170 --> 00:06:23.900
So we wanna get them as soon as
possible on users' browsers.

97
00:06:23.900 --> 00:06:26.700
So just check that you have that enabled.

98
00:06:26.700 --> 00:06:31.160
Again, if you are setting up your own web
server, it's something you need to add.

99
00:06:31.160 --> 00:06:32.890
It's a module in Apache.

100
00:06:32.890 --> 00:06:37.553
It's something you need to enable on IIS,
if you're on the Microsoft side.

101
00:06:37.553 --> 00:06:42.264
And if you're using the Cloud, typically,
it's a setting that you have to enable,

102
00:06:42.264 --> 00:06:47.120
and sometimes it's already enabled if you
are starting now, setting up those things.

103
00:06:47.120 --> 00:06:49.761
So have in mind, and
now we can serve content using Brotli.

