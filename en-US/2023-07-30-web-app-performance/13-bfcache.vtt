WEBVTT

1
00:00:00.140 --> 00:00:05.135
There is also a cache that has been
with Safari and Firefox for a while, and

2
00:00:05.135 --> 00:00:09.480
it has just arrived into
Chrome a few versions ago.

3
00:00:09.480 --> 00:00:12.970
It's called bfcache or back/forward cache.

4
00:00:12.970 --> 00:00:15.690
In this case, it's not about resources.

5
00:00:15.690 --> 00:00:18.562
It's about saving your
page navigation in memory.

6
00:00:18.562 --> 00:00:24.184
So you are in frontendmasters.com,
you have a session, you have the JavaScript loaded,

7
00:00:24.184 --> 00:00:28.647
you have done a lot of stuff, and
then you go to google.com, okay?

8
00:00:28.647 --> 00:00:32.490
What happens when you go back,
we press the back key to Frontend Masters?

9
00:00:33.910 --> 00:00:38.915
Normally, it was loaded
again like a new navigation.

10
00:00:38.915 --> 00:00:45.363
With bfcache, no, it will just
defreeze that page from memory.

11
00:00:45.363 --> 00:00:51.210
And of course,
the performance of that is a lot better.

12
00:00:51.210 --> 00:00:56.792
When you go back and forward, then you
don't need to reload the pages, okay?

13
00:00:56.792 --> 00:00:59.099
In this case, it's automatic.

14
00:00:59.099 --> 00:01:01.940
So it's not an API,
it's not something that we have to do.

15
00:01:03.280 --> 00:01:08.161
But there are some things that you
can be doing in your website that can

16
00:01:08.161 --> 00:01:10.024
disable bfcache for you.

17
00:01:10.024 --> 00:01:14.772
For example, unload events or
a kind of cache known as no-store.

18
00:01:14.772 --> 00:01:18.309
So you can say to the browser no-store,
I don't want you to store the data.

19
00:01:18.309 --> 00:01:21.710
If you say that, the browser will
disable bfcache for your site.

20
00:01:23.930 --> 00:01:26.950
How do you know if that works or not?

21
00:01:26.950 --> 00:01:33.124
Using Chrome DevTools, you can go to
Application, the Application tab,

22
00:01:33.124 --> 00:01:39.070
and within the Application tab,
you will find, where is it?

23
00:01:39.070 --> 00:01:39.680
They changed it?

24
00:01:41.690 --> 00:01:42.569
No, here it is.

25
00:01:42.569 --> 00:01:45.869
Within Background Services,
Back/forward cache.

26
00:01:45.869 --> 00:01:48.265
So here, because it's local host,

27
00:01:48.265 --> 00:01:53.570
it's not giving you by default any
information, but you can test it.

28
00:01:53.570 --> 00:01:56.280
So it says that it worked.

29
00:01:56.280 --> 00:01:59.069
So you're not using any weird tricks or

30
00:01:59.069 --> 00:02:03.760
things that will disable bfcache for
your real user.

31
00:02:03.760 --> 00:02:06.720
So you can go to your website,
make that test.

32
00:02:06.720 --> 00:02:11.139
And if there is a problem, you will see
a red with a list of problems that you

33
00:02:11.139 --> 00:02:15.580
should change in your code if you wanna
enable bfcache for your websites.

34
00:02:15.580 --> 00:02:16.900
Does that make sense?

35
00:02:16.900 --> 00:02:18.780
So we're not in control of that.

36
00:02:18.780 --> 00:02:22.501
The only thing that we have is
the ability to not use some APIs so

37
00:02:22.501 --> 00:02:26.810
the browser will increase
the opportunity for enabling bfcache.

38
00:02:26.810 --> 00:02:30.800
&gt;&gt; Does adding query parameters
after a filename make a difference?

39
00:02:30.800 --> 00:02:31.452
&gt;&gt; That's a good question.

40
00:02:31.452 --> 00:02:37.006
So the cache that we were seeing here,
we were talking about here,

41
00:02:37.006 --> 00:02:43.267
we didn't see here how the database or
the data storage works internally.

42
00:02:43.267 --> 00:02:45.390
But what's the key of that storage?

43
00:02:46.450 --> 00:02:53.908
Well, one key is the URL,
but not the whole URL.

44
00:02:53.908 --> 00:02:55.941
There are keys to the method
if it's get or post.

45
00:02:55.941 --> 00:03:00.300
But let's simplify this
only on get requests.

46
00:03:00.300 --> 00:03:02.604
Is the URL without the hash.

47
00:03:02.604 --> 00:03:04.700
So, what's the hash?

48
00:03:04.700 --> 00:03:09.633
So the URL has a protocol,
has a host, the origin.

49
00:03:09.633 --> 00:03:16.212
It has a path,
it can contain a query string and a hash.

50
00:03:16.212 --> 00:03:21.141
Well, the hash is what goes
after the pound symbol or

51
00:03:21.141 --> 00:03:25.110
the hash, that's not part of the key.

52
00:03:25.110 --> 00:03:28.820
But I think the question was
that part is part of it.

53
00:03:28.820 --> 00:03:34.410
So if you have mydomain.com/css,
and then query string 1 and

54
00:03:34.410 --> 00:03:39.585
query string 2,
even if in the server it's the same file,

55
00:03:39.585 --> 00:03:46.332
from a browser's perspective,
we are talking about two different assets.

56
00:03:46.332 --> 00:03:48.684
Does it make sense?
Because it's two different URLs,

57
00:03:48.684 --> 00:03:50.649
even if server-side is different.

58
00:03:50.649 --> 00:03:55.385
And we were using this technique
actually a few years ago

59
00:03:55.385 --> 00:03:57.817
when we wanna change a file.

60
00:03:57.817 --> 00:04:00.294
So it's actually a hack.

61
00:04:00.294 --> 00:04:05.795
If you set the expiration date of your
assets for 60 years in the future,

62
00:04:05.795 --> 00:04:10.140
but then tomorrow,
you have to change your CSS.

63
00:04:10.140 --> 00:04:13.163
So how can you force an update?

64
00:04:13.163 --> 00:04:13.942
Well, we go to your HTML and
you add a timestamp or

65
00:04:13.942 --> 00:04:14.688
a version number,
something like this here.

66
00:04:14.688 --> 00:04:19.602
And your users will see a new CSS file,

67
00:04:19.602 --> 00:04:27.460
not the previous one,
because it's a different URL.

68
00:04:27.460 --> 00:04:28.040
Does it make sense?

69
00:04:28.040 --> 00:04:32.642
So, what goes after the question mark
is actually part of the URL, and

70
00:04:32.642 --> 00:04:38.236
it will create unique URLs, Okay?

71
00:04:38.236 --> 00:04:42.749
Cool, well, so how do you know if

72
00:04:42.749 --> 00:04:48.780
the user is going out or in the bfcache?

73
00:04:48.780 --> 00:04:50.887
Well, you have a Page Navigation API.

74
00:04:50.887 --> 00:04:55.675
And with that API, you can know when
the user is getting out of your app, and

75
00:04:55.675 --> 00:05:00.251
you can open and restore connections,
such as if you have a web socket.

76
00:05:00.251 --> 00:05:04.108
Maybe you wanna close that web socket
when the user is going out of your page.

77
00:05:04.108 --> 00:05:07.853
And if the user is going back,
because it's being restored now,

78
00:05:07.853 --> 00:05:10.250
you need to reconnect to that web socket.

79
00:05:11.380 --> 00:05:15.510
If you wanna get deeper on that,
check the other workshop on

80
00:05:15.510 --> 00:05:21.000
Frontend Masters that I also did
on JavaScript in the background.

81
00:05:21.000 --> 00:05:25.900
We explain and do some examples on
Page Navigation APIs on that workshop.

