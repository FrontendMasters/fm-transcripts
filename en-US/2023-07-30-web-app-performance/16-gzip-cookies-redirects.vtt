WEBVTT

1
00:00:00.290 --> 00:00:04.474
Now we finally start talking about,
now that we understand, how if everything

2
00:00:04.474 --> 00:00:08.980
work, how important performance is,
it's time to start optimizing performance.

3
00:00:10.430 --> 00:00:14.180
So first,
basic things that you have to check.

4
00:00:14.180 --> 00:00:16.750
We need to enable as
GZIP on text-based files,

5
00:00:16.750 --> 00:00:19.075
this is typically happening everywhere.

6
00:00:19.075 --> 00:00:22.112
But if you are setting up
your server yourself and

7
00:00:22.112 --> 00:00:26.707
you're not using a cloud-based
service like GitHub or, I don't know,

8
00:00:26.707 --> 00:00:32.170
Vercel or something like that,
maybe you have to check how it's set up.

9
00:00:32.170 --> 00:00:34.897
I'm pretty sure that for
HTML, CSS, and JavaScript,

10
00:00:34.897 --> 00:00:37.340
you are serving those with Zip.

11
00:00:37.340 --> 00:00:38.820
But what about SVG?

12
00:00:40.140 --> 00:00:41.840
What about APIs and JSON?

13
00:00:43.090 --> 00:00:48.566
Because that's text also, you don't
wanna compress JPEG files to font files,

14
00:00:48.566 --> 00:00:51.580
no, just text-based lines, okay?

15
00:00:51.580 --> 00:00:54.837
This is very basic, okay, it is from
the beginning of web performance.

16
00:00:54.837 --> 00:00:57.974
But just have in mind that you are doing,

17
00:00:57.974 --> 00:01:01.401
how do you know if your
server is doing that?

18
00:01:01.401 --> 00:01:05.101
Well, Lighthouse,
the tool that will give you the score,

19
00:01:05.101 --> 00:01:07.173
will give you a hint, but if not,

20
00:01:07.173 --> 00:01:11.549
you can just click on any text-based
file here and check the headers.

21
00:01:11.549 --> 00:01:15.818
In the response headers you can
check if it's compressed or not, and

22
00:01:15.818 --> 00:01:20.674
also you will see in the request that
the browser is accepting GZIP, deflate,

23
00:01:20.674 --> 00:01:25.253
and we don't know what that is,
I will explain what that is later, okay?

24
00:01:25.253 --> 00:01:28.958
So that's how you check
if it's compressed or

25
00:01:28.958 --> 00:01:33.715
not, and you can also see that
on the main HTML file, okay?

26
00:01:35.385 --> 00:01:37.995
So looking at the headers,
you can detect that.

27
00:01:37.995 --> 00:01:42.185
We have already mentioned this, make
static content expire late in the future.

28
00:01:42.185 --> 00:01:48.767
I know it sounds scary, but for those of
you that are creating React applications,

29
00:01:48.767 --> 00:01:53.107
Angular applications,
you're already doing this.

30
00:01:53.107 --> 00:01:58.390
I'm not sure if you know that, but if you
have your app.js, your bundle.js that

31
00:01:58.390 --> 00:02:03.540
the output of your react application
typically has a hash, have you seen that?

32
00:02:03.540 --> 00:02:10.410
It's not app.js, it's app.059D8.js, why?

33
00:02:10.410 --> 00:02:13.630
Because every time you
change the build process,

34
00:02:13.630 --> 00:02:17.398
there is something new in the build,
you change the hash.

35
00:02:17.398 --> 00:02:19.050
And why it's doing that?

36
00:02:19.050 --> 00:02:22.894
The idea is to make all that files
expire late in the future, because if

37
00:02:22.894 --> 00:02:27.540
you change a bit, you know it's going to
be a different file name, a different URL.

38
00:02:29.350 --> 00:02:31.000
Use a CDN for a static content.

39
00:02:31.000 --> 00:02:38.040
This is all, but the CDN will
actually get closer to the user.

40
00:02:38.040 --> 00:02:41.130
So the CDNs,
they have mirrors all over the world.

41
00:02:41.130 --> 00:02:44.740
So then it will serve your
content closer to the user.

42
00:02:44.740 --> 00:02:51.420
So the latencies will be shorter and
that will lead to better experience.

43
00:02:52.940 --> 00:02:58.542
You can see that so far, these are not yet
things that have to do with frontend.

44
00:02:58.542 --> 00:03:01.945
It's more about the server and
yeah, there are a couple of,

45
00:03:01.945 --> 00:03:06.017
the first thing that we are seeing
are more related to the network layer,

46
00:03:06.017 --> 00:03:08.909
to infrastructure,
to settings in your servers.

47
00:03:10.400 --> 00:03:12.320
Well, consider moving to HTTP/2.

48
00:03:12.320 --> 00:03:15.940
You must move to HTTP/2, we know that.

49
00:03:15.940 --> 00:03:18.970
Cookie-less domain,
do you know how cookies work?

50
00:03:18.970 --> 00:03:22.733
They are being stored in local storage,
yes.

51
00:03:22.733 --> 00:03:24.580
What else?

52
00:03:24.580 --> 00:03:27.260
First, are cookies client side or
server side?

53
00:03:29.540 --> 00:03:31.058
&gt;&gt; They live on the client and

54
00:03:31.058 --> 00:03:34.370
tell the server's status
about the client's browser?

55
00:03:34.370 --> 00:03:38.933
&gt;&gt; Correct, so they live on the client,
but both the client and

56
00:03:38.933 --> 00:03:41.805
the server have access to them, how?

57
00:03:41.805 --> 00:03:44.410
How does the server know
what you have on the client?

58
00:03:44.410 --> 00:03:45.660
&gt;&gt; You have to send it there.

59
00:03:45.660 --> 00:03:46.820
&gt;&gt; You have to send it, how?

60
00:03:46.820 --> 00:03:47.843
Who is you?

61
00:03:47.843 --> 00:03:49.990
&gt;&gt; I mean, the browser sends-
&gt;&gt; Browser or the developer?

62
00:03:51.060 --> 00:03:52.702
&gt;&gt; The browser.
&gt;&gt; The browser,

63
00:03:52.702 --> 00:03:57.700
the browser sends cookies to
the server on every request.

64
00:03:59.040 --> 00:04:01.840
On every request,
it sends all the cookies.

65
00:04:02.960 --> 00:04:09.170
So for example,
if you have cookies storing 2K of data and

66
00:04:09.170 --> 00:04:13.606
then you have a website with 50 assets,

67
00:04:13.606 --> 00:04:18.831
you will send 50 times over the app link,
2K.

68
00:04:18.831 --> 00:04:23.546
100K of data that you
are sending on every request,

69
00:04:23.546 --> 00:04:28.064
even if you're not using
that cookie on the server.

70
00:04:28.064 --> 00:04:33.265
So using cookie-less domains
means that for your assets,

71
00:04:33.265 --> 00:04:38.258
it may be a good idea sometimes
to create another domain,

72
00:04:38.258 --> 00:04:43.459
maybe can be also CDN that will
give you a different domain,

73
00:04:43.459 --> 00:04:50.556
and that again will be cookie-less, so
the cookie won't travel to the server.

74
00:04:50.556 --> 00:04:52.073
Does it make sense?

75
00:04:52.073 --> 00:04:53.306
&gt;&gt; Can you set up the cookies so

76
00:04:53.306 --> 00:04:56.760
that there are some that don't
always send to the server as well?

77
00:04:56.760 --> 00:05:00.750
&gt;&gt; Cookies by default are sent per origin.

78
00:05:00.750 --> 00:05:05.660
So every request, you can set
an expiration date, so it can expire, but

79
00:05:05.660 --> 00:05:09.701
you cannot say, I want cookies per,
so only for that HTML.

80
00:05:09.701 --> 00:05:10.800
No, it's per origin.

81
00:05:10.800 --> 00:05:13.960
So all the origin will
get all the cookies.

82
00:05:13.960 --> 00:05:18.270
Anyway, cookies are maybe
getting away in the future.

83
00:05:18.270 --> 00:05:21.543
So they have problems everywhere,
so try not to use cookies.

84
00:05:21.543 --> 00:05:23.690
But anyway, have that in mind.

85
00:05:23.690 --> 00:05:26.550
Even if you have cookies,
try to reduce cookie size.

86
00:05:26.550 --> 00:05:29.540
For example, this is delta time.

87
00:05:31.100 --> 00:05:34.424
If your cookie is 3k,
it might add on HTTP/1.1, or

88
00:05:34.424 --> 00:05:38.670
HTTP/2 it's a little better
because it's compressed.

89
00:05:38.670 --> 00:05:40.860
Remember, the cookie goes in the header.

90
00:05:40.860 --> 00:05:43.183
And HTTP/2 is compressing headers.

91
00:05:43.183 --> 00:05:49.772
On HTTP/1.1 it was adding 78 milliseconds

92
00:05:49.772 --> 00:05:54.610
per request, per request, okay?

93
00:05:54.610 --> 00:05:56.670
This one is interesting, reduce redirects.

94
00:05:58.830 --> 00:06:03.150
So a redirect is a stop sign, okay?

95
00:06:04.150 --> 00:06:07.632
And for
those of you in different countries,

96
00:06:07.632 --> 00:06:12.950
I'm using the definition of a stop
sign of US, Canada and Europe.

97
00:06:12.950 --> 00:06:18.327
Because there are many countries where
the stop sign is mostly a suggestion for

98
00:06:18.327 --> 00:06:20.030
slow down, okay?

99
00:06:20.030 --> 00:06:21.474
No one actually stops them.

100
00:06:21.474 --> 00:06:22.972
In Argentina, we don't stop.

101
00:06:22.972 --> 00:06:26.670
There is a stop sign, but
actually, you don't stop.

102
00:06:26.670 --> 00:06:29.870
It's more a warning,
be careful, than a stop.

103
00:06:29.870 --> 00:06:35.244
Anyway, so the stop sign here is
the one where you actually stop,

104
00:06:35.244 --> 00:06:39.300
see, both ways, and restart, okay?

105
00:06:39.300 --> 00:06:40.997
When you have a redirect,
that's what's going on.

106
00:06:40.997 --> 00:06:41.620
What's a redirect?

107
00:06:42.790 --> 00:06:47.453
You go to a website, and the website says,
you know what, it's not here, it's there.

108
00:06:47.453 --> 00:06:50.686
Go there.
So remember that all the process that we

109
00:06:50.686 --> 00:06:54.360
mentioned that we have when
we are browsing the web,

110
00:06:56.560 --> 00:07:00.882
When you make a redirect,
at one point, actually here,

111
00:07:00.882 --> 00:07:06.280
the browser says, no, it's not here,
we need to go somewhere else.

112
00:07:06.280 --> 00:07:09.948
So we just start again from 1 to 7.

113
00:07:09.948 --> 00:07:13.140
And there are situations where
this can be really complicated.

114
00:07:13.140 --> 00:07:17.171
I remember one airline,
I'm not gonna say which airline,

115
00:07:17.171 --> 00:07:22.160
let's say aa.com, just a generic LA,
that they were doing this.

116
00:07:22.160 --> 00:07:25.978
You are on a mobile device,
you are going to aa.com and

117
00:07:25.978 --> 00:07:30.510
they were saying,
you're on an iPhone or an Android.

118
00:07:30.510 --> 00:07:33.090
You need to go to mobile.aa.com.

119
00:07:33.090 --> 00:07:36.616
Then when you get there,
when your browser gets there,

120
00:07:36.616 --> 00:07:40.533
they will say, no,
it's mobile.aa.com/default.

121
00:07:40.533 --> 00:07:44.362
And then it's mobile.aa.com/Page.aspx,

122
00:07:44.362 --> 00:07:49.225
something like that, but
probably slash default actually.

123
00:07:52.614 --> 00:07:55.610
And then you say, but no,
you have an iPhone, right?

124
00:07:55.610 --> 00:07:58.850
No, we have a special version for
iPhone that is just for iPhone.

125
00:07:58.850 --> 00:08:00.610
So it's iPhone dot blah, blah, blah.

126
00:08:00.610 --> 00:08:06.390
And the problem is that every redirect,
it's a stop sign and we start again.

127
00:08:06.390 --> 00:08:07.740
We stop, we start again.

128
00:08:07.740 --> 00:08:09.390
And the user is seeing
nothing in the meantime.

129
00:08:11.180 --> 00:08:13.324
Make sense?
So we should avoid redirects, and

130
00:08:13.324 --> 00:08:16.158
sometimes you have redirects
that you don't realize.

131
00:08:16.158 --> 00:08:20.368
For example,
if I type frontendmasters.com,

132
00:08:20.368 --> 00:08:26.540
maybe redirects should
www.frontendmasters.com, for redirect.

133
00:08:26.540 --> 00:08:29.040
www dot is another DNS query.

134
00:08:30.300 --> 00:08:34.600
So we also have a DNS query that
was taking 150 milliseconds.

135
00:08:34.600 --> 00:08:39.861
So then you have 150 milliseconds of,
let's say 100 of DNS.

136
00:08:39.861 --> 00:08:42.410
Then 150 of TCP.

137
00:08:42.410 --> 00:08:47.457
Then, let's say,
if I simplify it, 150 for SSL.

138
00:08:47.457 --> 00:08:51.691
And then the HTTP request.

139
00:08:51.691 --> 00:08:54.610
Finally to realize that it wasn't there,
so I need to start again.

140
00:08:55.670 --> 00:08:57.705
And we haven't seen a pixel yet.

141
00:08:59.900 --> 00:09:03.920
So we need to avoid redirects
as much as possible.

142
00:09:05.720 --> 00:09:07.090
And the redirect look like this.

143
00:09:07.090 --> 00:09:13.993
The redirect is pushing all
your diagram to the right,

144
00:09:13.993 --> 00:09:18.201
and with that, all the metrics.

145
00:09:19.928 --> 00:09:20.972
Does it make sense?

146
00:09:24.160 --> 00:09:28.750
So each redirect will consume between
100 milliseconds and 1 second.

147
00:09:28.750 --> 00:09:32.184
It depends on the latency and
it depends on if you're redirecting

148
00:09:32.184 --> 00:09:36.000
to the same machine or if it's
a different domain, a different origin.

149
00:09:36.000 --> 00:09:42.240
So there is a lot of possible differences
there, but it's really, really expensive.

150
00:09:42.240 --> 00:09:47.329
And also social networks will
typically use one, such as bit.ly,

151
00:09:47.329 --> 00:09:53.230
t.to, when you are publishing on Twitter,
so that's a redirect.

152
00:09:53.230 --> 00:09:57.192
You don't manage that, but
you know that there will be one redirect,

153
00:09:57.192 --> 00:09:59.890
where at least don't add
more on your own side.

154
00:10:01.080 --> 00:10:05.065
Typically, there is a question, but I need
to go to another server because I first

155
00:10:05.065 --> 00:10:08.855
detect the language and the country based
on the country well do that server side.

156
00:10:08.855 --> 00:10:17.030
Don't send that navigation
path to the client.

157
00:10:18.520 --> 00:10:22.636
Find a way to do everything
within your boundaries, and

158
00:10:22.636 --> 00:10:26.060
then just answer with
the HTML the user wants.

159
00:10:27.930 --> 00:10:31.302
Don't send HTTP redirects,
they're really, really expensive.

