WEBVTT

1
00:00:00.150 --> 00:00:02.902
Another thing to know about the browser,

2
00:00:02.902 --> 00:00:07.313
because we are talking about how
the browser works, is the Cache.

3
00:00:07.313 --> 00:00:11.700
So, typically, or originally,

4
00:00:11.700 --> 00:00:16.400
we developers, we hated the Cache.

5
00:00:16.400 --> 00:00:19.848
So, it's like, in fact,
let me see if this is still working.

6
00:00:19.848 --> 00:00:23.572
It was working like a year ago or
in the past ten years.

7
00:00:23.572 --> 00:00:27.879
When you were doing a search on Google and
you search, for

8
00:00:27.879 --> 00:00:31.848
example, php no, let's see,
yeah, there it is.

9
00:00:31.848 --> 00:00:32.656
Now it's the second one.

10
00:00:32.656 --> 00:00:35.141
It was originally the first one, no cache.

11
00:00:35.141 --> 00:00:39.523
So the most searched thing
is how I disable the cache.

12
00:00:39.523 --> 00:00:42.137
So you use a back end server know.

13
00:00:42.137 --> 00:00:45.052
And the next thing is,
I don't want to cache.

14
00:00:45.052 --> 00:00:48.854
Why, because you we don't
manage the cache initially.

15
00:00:48.854 --> 00:00:52.698
So we are scared of things, we don't manage.

16
00:00:52.698 --> 00:00:54.978
So it's like,
I don't know what's going on.

17
00:00:54.978 --> 00:00:57.697
So I don't know if it's a cache problem,

18
00:00:57.697 --> 00:01:02.437
this is browser it my users' browsers
are caching data that I don't want,

19
00:01:02.437 --> 00:01:07.356
then I'm not going to send the user
the right message or the right content.

20
00:01:07.356 --> 00:01:09.125
So we typically say no to the cache.

21
00:01:09.125 --> 00:01:13.054
Well, we need to make cache a friend,
okay?

22
00:01:13.054 --> 00:01:16.863
So how the cache works?

23
00:01:16.863 --> 00:01:22.360
And typically,
we will focus on caching on the,

24
00:01:22.360 --> 00:01:26.392
resource discovery queue, okay?

25
00:01:26.392 --> 00:01:28.512
So we have a resource discovery queue.

26
00:01:28.512 --> 00:01:31.577
So now the browser is parsing the HTML,
but

27
00:01:31.577 --> 00:01:36.516
now the browser knows that it needs
to download a CSS, an image file,

28
00:01:36.516 --> 00:01:41.479
a JSON file, an SVG file, it has
a list of elements to be downloaded.

29
00:01:41.479 --> 00:01:45.868
So, what happens is that in this case,

30
00:01:45.868 --> 00:01:54.513
the browser will check the cache to see
if we have a version of that file or not.

31
00:01:54.513 --> 00:01:56.350
And how does that work?

32
00:01:56.350 --> 00:01:59.865
You know how that works,
how the cache works.

33
00:01:59.865 --> 00:02:05.390
So is that is the browser making
the decision about what to cache and

34
00:02:05.390 --> 00:02:08.557
for how long who makes that decision?

35
00:02:08.557 --> 00:02:10.305
Well, actually us, and

36
00:02:10.305 --> 00:02:15.561
the problem of not knowing the cache
is that we are not making any decision.

37
00:02:15.561 --> 00:02:23.432
Okay, so actually we will
define cache headers per file.

38
00:02:23.432 --> 00:02:28.507
Sometimes it's not per file, but per
type of file for

39
00:02:28.507 --> 00:02:33.165
all the CSS files, or for
all the CSS files in that folder, etc.

40
00:02:33.165 --> 00:02:37.442
We can define an absolute typos again,

41
00:02:37.442 --> 00:02:42.238
absolute expiration date that was actually

42
00:02:42.238 --> 00:02:47.292
said in the original 1.0, HTTP protocol,

43
00:02:47.292 --> 00:02:51.846
we can set the relative expiration date.

44
00:02:51.846 --> 00:02:58.026
I will give you examples in a second,
That was added in 1.1.

45
00:02:58.026 --> 00:03:03.012
And there are more specs,
more values that we will see, but

46
00:03:03.012 --> 00:03:05.816
the original ones are these two.

47
00:03:05.816 --> 00:03:12.244
Absolute expiration date means when the
server is given to the browser a CSS file.

48
00:03:12.244 --> 00:03:18.282
In the headers, we add one that says,

49
00:03:18.282 --> 00:03:23.379
that CSS file expires May 21st

50
00:03:23.379 --> 00:03:29.246
of 2024, at 4PM Pacific time.

51
00:03:29.246 --> 00:03:32.049
Then the browser will save the file.

52
00:03:32.049 --> 00:03:36.435
In the users local storage
in the user's device,

53
00:03:36.435 --> 00:03:42.597
let's say until that day. It does not work
like that but okay makes sense?

54
00:03:42.597 --> 00:03:47.821
And relative expiration date
means I want this file

55
00:03:47.821 --> 00:03:52.748
will last for an hour or for
two years, or for one month.

56
00:03:52.748 --> 00:03:57.413
And then the browser will calculate
the real expiration date, okay?

57
00:03:57.413 --> 00:04:01.767
So now,
let's say the browser needs a resource.

58
00:04:01.767 --> 00:04:03.937
So first, it checks.

59
00:04:07.891 --> 00:04:09.629
The cache.

60
00:04:09.629 --> 00:04:16.719
It can be a cache miss, or
a cache hit, a miss means it's not there.

61
00:04:16.719 --> 00:04:21.575
And that simple if it's not there,
okay, we go to our network as usual.

62
00:04:21.575 --> 00:04:23.086
Business as usual.

63
00:04:23.086 --> 00:04:29.352
If it's a cache hit, okay, it means the
file that we need is the cache okay.

64
00:04:29.352 --> 00:04:34.931
So it will verify if it's expired or not.

65
00:04:34.931 --> 00:04:39.524
Let's say it's expired, it's not expired.

66
00:04:39.524 --> 00:04:45.978
If it's not expired, we will say,
well, let's use it from the cache.

67
00:04:45.978 --> 00:04:48.676
So we use the file from the cache.

68
00:04:48.676 --> 00:04:50.064
We don't go to a network.

69
00:04:50.064 --> 00:04:52.223
So we don't have the HTTP request.

70
00:04:52.223 --> 00:04:54.733
We don't have the latency for
that request.

71
00:04:54.733 --> 00:05:00.296
We don't need to wait for
the server to respond or to get the bytes.

72
00:05:00.296 --> 00:05:02.460
Okay, we have the file.

73
00:05:02.460 --> 00:05:05.829
What happens if it's expired?

74
00:05:05.829 --> 00:05:09.317
So we have the file, but it's expired.

75
00:05:09.317 --> 00:05:11.203
What do you think that will happen?

76
00:05:11.203 --> 00:05:12.220
&gt;&gt; Goes to the network.

77
00:05:12.220 --> 00:05:14.994
&gt;&gt; It goes to the network,
&gt;&gt; Delete it from the cache first.

78
00:05:14.994 --> 00:05:17.288
&gt;&gt; Delete from the cache first.

79
00:05:17.288 --> 00:05:21.767
Let's say, kind of, and a no.

80
00:05:21.767 --> 00:05:24.947
It's not going to delete
it from the cache.

81
00:05:24.947 --> 00:05:29.786
It's going to the network, but
not for what you're expecting.

82
00:05:29.786 --> 00:05:32.408
It's making what is known
as a conditional request.

83
00:05:34.330 --> 00:05:38.861
It will say, hey server,
for that CSS file,

84
00:05:38.861 --> 00:05:43.281
I have a version, and
what do I do with that?

85
00:05:43.281 --> 00:05:47.065
And the server can respond
with not modified,

86
00:05:47.065 --> 00:05:50.072
that means the file you have is okay,

87
00:05:50.072 --> 00:05:55.326
go ahead with that. Here, in
the server, we didn't change it.

88
00:05:55.326 --> 00:06:00.618
So let's keep it and
it can attach updated cache

89
00:06:00.618 --> 00:06:07.912
headers such as keep it move your
expiration date for two months.

90
00:06:07.912 --> 00:06:11.384
Or you can say no the one
you have is gone.

91
00:06:11.384 --> 00:06:16.850
So I'm going to respond with an OK
and a new file. HTTP 200, okay?

92
00:06:16.850 --> 00:06:20.964
Which seems like not so bad,
the conditional request.

93
00:06:20.964 --> 00:06:24.995
The problem of the conditional request
is that it's waiting an HTTP request,

94
00:06:24.995 --> 00:06:26.467
it needs to go to the server.

95
00:06:26.467 --> 00:06:32.184
So the overhead for
a conditional request is still almost as

96
00:06:32.184 --> 00:06:37.226
the same as making the normal
request from scratch.

97
00:06:37.226 --> 00:06:41.591
So typically we wanna avoid conditional
requests because it's not adding any

98
00:06:41.591 --> 00:06:42.391
value there.

99
00:06:42.391 --> 00:06:45.512
The idea originally was good,
probably, but in the real world,

100
00:06:45.512 --> 00:06:47.291
it's like making a normal request.

101
00:06:47.291 --> 00:06:51.394
It takes the same amount of time,
we need to go to a server and

102
00:06:51.394 --> 00:06:53.703
the whole overhead is there, okay?

103
00:06:53.703 --> 00:06:55.546
Makes sense?

104
00:06:55.546 --> 00:06:59.109
So we need to understand this,
and then use this in our favor.

105
00:06:59.109 --> 00:07:04.023
How, we need to maximize
the opportunity of always

106
00:07:04.023 --> 00:07:07.573
having the file on user's devices.

107
00:07:07.573 --> 00:07:10.317
If we do that,
we will improve performance,

108
00:07:10.317 --> 00:07:13.509
because performance is
about user's perception.

109
00:07:13.509 --> 00:07:17.233
Okay, so yeah,
the problem is that I know, but yeah, but

110
00:07:17.233 --> 00:07:22.021
I have my manager here that she always
wanted to keep fresh the data so we need

111
00:07:22.021 --> 00:07:27.049
to push always the latest version just in
case we change the CSS with the color.

112
00:07:27.049 --> 00:07:28.406
but performance is more important.

113
00:07:28.406 --> 00:07:31.745
So we need to find a way
to go over that and

114
00:07:31.745 --> 00:07:36.709
there are design patterns to do that so
it's always better

115
00:07:36.709 --> 00:07:41.588
to set static resources with
a far late expiration date.

116
00:07:41.588 --> 00:07:44.889
It will last for 60 years.

117
00:07:44.889 --> 00:07:46.501
It doesn't matter.

118
00:07:46.501 --> 00:07:51.491
And it's, you're not going to waste users'
space because browsers will delete your,

119
00:07:51.491 --> 00:07:54.162
they have their own expiration rules for
that.

120
00:07:54.162 --> 00:07:57.371
So it's,
you shouldn't care too much about, okay?

121
00:07:57.371 --> 00:08:00.379
Do you have any question about
how the browser's cache work?

122
00:08:05.332 --> 00:08:08.607
&gt;&gt; So I guess just like
differentiate between caching,

123
00:08:08.607 --> 00:08:11.591
like passwords and
username, like login info,

124
00:08:11.591 --> 00:08:16.340
would that really be the only thing that
you'd want to have, like a more set?

125
00:08:16.340 --> 00:08:20.390
&gt;&gt; Yeah, in this case,
the browser's cache is a separate storage

126
00:08:20.390 --> 00:08:23.243
compared with other
storages that you have.

127
00:08:23.243 --> 00:08:28.088
If you're interested in how that works and
all the storage,

128
00:08:28.088 --> 00:08:33.038
I have another workshop on
Frontend Masters on storage APIs.

129
00:08:33.038 --> 00:08:37.843
So if you check that one
with more information about

130
00:08:37.843 --> 00:08:41.427
storing credentials and databases.

131
00:08:41.427 --> 00:08:46.760
And the next I think it is exactly
what we are going to see in a second.

