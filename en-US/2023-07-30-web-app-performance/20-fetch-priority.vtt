WEBVTT

1
00:00:00.160 --> 00:00:01.347
Fetch priority.

2
00:00:01.347 --> 00:00:07.165
Now, what if we make a change in our code?

3
00:00:07.165 --> 00:00:15.544
What if we finally convince our manager
that we have to change our architecture.

4
00:00:15.544 --> 00:00:19.228
So this idea that the HTML
needs to wait for

5
00:00:19.228 --> 00:00:23.861
a JavaScript to download
the JSON to parse the JSON to

6
00:00:23.861 --> 00:00:28.730
actually know what's in
the first at least in the LCP.

7
00:00:29.850 --> 00:00:31.720
So we convince the manager,
that's a bad idea.

8
00:00:32.870 --> 00:00:37.358
So the best idea which is
making a server side render,

9
00:00:37.358 --> 00:00:41.780
somehow, Next.js or
something like that.

10
00:00:41.780 --> 00:00:47.920
Just a few minutes ago,
I saw a tweet from Guillermo Rauch.

11
00:00:47.920 --> 00:00:50.880
We can even look at that tweet so
you can see it.

12
00:00:50.880 --> 00:00:52.660
So we're from some minutes ago.

13
00:00:52.660 --> 00:00:54.680
He's the CEO of Vercel.

14
00:00:54.680 --> 00:00:57.730
He's the creator of Next.js, and Vercel.

15
00:00:57.730 --> 00:01:01.900
And he tweeted about, where is it?

16
00:01:01.900 --> 00:01:03.710
Should be here.

17
00:01:03.710 --> 00:01:05.150
This one.

18
00:01:05.150 --> 00:01:11.324
The biggest product of the past 20 years,
ChatGPT, is a website built with Next.js,

19
00:01:11.324 --> 00:01:17.027
which is saying that the biggest, the
largest, like ChatGPT is using Next.js.

20
00:01:17.027 --> 00:01:18.974
And what's Next.js?

21
00:01:18.974 --> 00:01:26.460
It's a library to use react components,
but server side, no clients side.

22
00:01:26.460 --> 00:01:30.115
And typically that leads to performance,
okay?

23
00:01:30.115 --> 00:01:32.009
And so the idea here is that, well,

24
00:01:32.009 --> 00:01:34.980
ChatGPT so
fast because it's based on Next.js.

25
00:01:34.980 --> 00:01:37.390
So it's not client based JavaScript.

26
00:01:37.390 --> 00:01:39.180
It's server based JavaScript.

27
00:01:39.180 --> 00:01:44.821
So if you like React, it's okay, but
maybe making those React components

28
00:01:44.821 --> 00:01:50.720
being rendered only client side,
it's not really the best of the ideas.

29
00:01:50.720 --> 00:01:54.822
&gt;&gt; Just one thing I didn't really fully
understand with that was because with

30
00:01:54.822 --> 00:01:58.910
React, it would be just re-rendering
a specific DOM section.

31
00:01:58.910 --> 00:02:02.210
But then with Next.js, it's like
re-rendering the whole page, right?

32
00:02:02.210 --> 00:02:03.390
&gt;&gt; Not really.

33
00:02:03.390 --> 00:02:07.000
So Next.js is not re-rendering
all the time the same page.

34
00:02:07.000 --> 00:02:09.450
So it's a mix, it's hybrid technology.

35
00:02:09.450 --> 00:02:11.710
So even it has several names.

36
00:02:11.710 --> 00:02:18.240
So sometimes it's not just like classic
server-side with PHP or ASP classic.

37
00:02:18.240 --> 00:02:22.540
So it starts from the server, but
then it can continue client-side.

38
00:02:22.540 --> 00:02:27.140
So it's not completely server-side,
so it's a mix.

39
00:02:28.280 --> 00:02:32.998
The idea of the first rendering
should be server-side.

40
00:02:32.998 --> 00:02:36.000
It's actually the best idea for
performance, why?

41
00:02:36.000 --> 00:02:38.740
Because if not, we have the problem here.

42
00:02:38.740 --> 00:02:41.580
Our content, we just see a logo.

43
00:02:41.580 --> 00:02:42.760
What do we have in our HTML?

44
00:02:42.760 --> 00:02:45.460
A logo, that's all, and
an empty main element.

45
00:02:46.520 --> 00:02:51.120
For rendering the content, we need to wait
for JavaScript to download, execute it.

46
00:02:51.120 --> 00:02:53.969
And in our case, that JavaScript
was also going to a JSON file.

47
00:02:55.080 --> 00:03:01.070
So then we have a sequence of downloads
that cannot be done in parallel.

48
00:03:01.070 --> 00:03:06.260
Yeah, I could add
a preload also to the JSON.

49
00:03:06.260 --> 00:03:07.970
So then we also download the JSON.

50
00:03:07.970 --> 00:03:12.130
So when JavaScript needs the JSON,
it's already there.

51
00:03:12.130 --> 00:03:18.444
But the best idea here is that maybe what
we need is at least for the first item.

52
00:03:18.444 --> 00:03:21.530
I can just for now,
I can do this really quickly.

53
00:03:21.530 --> 00:03:27.030
I can take the article, right click,
and I can copy this as HTML.

54
00:03:28.550 --> 00:03:30.780
Copy the element or the outer HTML.

55
00:03:30.780 --> 00:03:34.820
So and somehow, let's say server
side with a build process.

56
00:03:34.820 --> 00:03:36.760
We just paste the article.

57
00:03:36.760 --> 00:03:40.304
So if we do that, then this is going
to be as fast as possible because yeah,

58
00:03:40.304 --> 00:03:42.210
we don't need to wait for JavaScript.

59
00:03:42.210 --> 00:03:44.996
We don't need to wait for
the JSON to appear.

60
00:03:44.996 --> 00:03:46.730
Now we will have that twice.

61
00:03:46.730 --> 00:03:51.458
We should skip it in the JSON,
but and now look at this.

62
00:03:51.458 --> 00:03:55.983
Now that we have the image here,
maybe the preload is not

63
00:03:55.983 --> 00:04:00.810
necessary because we don't
need to actually discover it.

64
00:04:00.810 --> 00:04:03.250
It's going to be discovered automatically.

65
00:04:03.250 --> 00:04:07.020
So I can get rid of that now.

66
00:04:07.020 --> 00:04:07.980
However, wait a minute.

67
00:04:09.100 --> 00:04:10.285
So if I run this now.

68
00:04:12.471 --> 00:04:13.120
It looks better.

69
00:04:13.120 --> 00:04:15.980
Yeah, I have two Ancient Greek,
I should remove the second one.

70
00:04:15.980 --> 00:04:20.750
But I'm not sure if you realize that it's
getting kind of a little better, okay?

71
00:04:20.750 --> 00:04:23.865
The LCP, it's getting a little better.

72
00:04:23.865 --> 00:04:28.162
But when we go back to the network and

73
00:04:28.162 --> 00:04:35.332
try to find the image here,
the Ancient Greece, that one.

74
00:04:35.332 --> 00:04:40.160
Now, it's not,
actually it has two for some reason.

75
00:04:40.160 --> 00:04:42.254
This is the other one, okay?

76
00:04:42.254 --> 00:04:44.960
Although I think that was
the preload because I didn't reload.

77
00:04:46.680 --> 00:04:50.550
This is the one from
the script is still here.

78
00:04:50.550 --> 00:04:54.270
So we still have a gap there.

79
00:04:55.420 --> 00:04:56.630
So what is that?

80
00:04:56.630 --> 00:05:02.850
Remember that when I started showing
you this, I right click on the columns.

81
00:05:02.850 --> 00:05:07.030
And from here, there are a lot
of columns that we can add.

82
00:05:07.030 --> 00:05:09.527
And I can add Priority.

83
00:05:09.527 --> 00:05:14.279
With priority, you can see the priority

84
00:05:14.279 --> 00:05:19.110
of some resources based on the type.

85
00:05:19.110 --> 00:05:21.300
This priority was set by the browser.

86
00:05:22.710 --> 00:05:26.470
And we have highest, high, low.

87
00:05:26.470 --> 00:05:28.740
For example, the script.js is low.

88
00:05:28.740 --> 00:05:31.410
And now when you think about this,
no, I don't think it's low.

89
00:05:31.410 --> 00:05:33.930
So I'm the author of the website.

90
00:05:33.930 --> 00:05:38.640
I think it's important because that's
the one that is rendering the content.

91
00:05:38.640 --> 00:05:39.954
So no, why low?

92
00:05:39.954 --> 00:05:45.820
Well, other images are also giving,
having a low priority.

93
00:05:45.820 --> 00:05:49.850
Well, there is a new spec now,
fetch priority,

94
00:05:49.850 --> 00:05:53.521
where you can override
the default priority.

95
00:05:53.521 --> 00:05:58.820
And you can use it on rel preload and
also directly over images.

96
00:06:00.150 --> 00:06:02.662
So for example, that means that for

97
00:06:02.662 --> 00:06:08.140
our LCP image, the one that we know,
that is the most important one.

98
00:06:08.140 --> 00:06:10.214
I can change the fetch priority.

99
00:06:10.214 --> 00:06:11.770
So I can go to this img.

100
00:06:13.730 --> 00:06:17.850
And I can search, say,
fetch priority high.

101
00:06:19.360 --> 00:06:25.240
So now I don't rely on
browser's algorithm.

102
00:06:25.240 --> 00:06:27.260
I say no, no browser,
this is high priority.

103
00:06:29.620 --> 00:06:33.290
Next question is what happens if I
add high priority on every resource?

104
00:06:33.290 --> 00:06:38.440
Well, again, if everything is important,
nothing is important, so don't do that.

105
00:06:38.440 --> 00:06:43.931
Be smart, and pick the ones
that you prefer, that you need.

106
00:06:46.330 --> 00:06:47.580
Does it make sense?

107
00:06:47.580 --> 00:06:52.330
And this will improve a lot LCP,
mostly when it's image-based.

108
00:06:52.330 --> 00:06:57.890
So remember, 75% of LCPs are actually
image based, not text based.

109
00:06:57.890 --> 00:07:01.260
For example, I could change also
fetch priority on the preload.

110
00:07:01.260 --> 00:07:06.010
If I feel that that font is important,
I can also change the fetch priority and

111
00:07:06.010 --> 00:07:07.480
say high.

112
00:07:07.480 --> 00:07:12.402
And if I see that my browser is
setting high on something that

113
00:07:12.402 --> 00:07:14.871
I don't think is important.

114
00:07:14.871 --> 00:07:17.910
For example, aristotle, I can add low.

115
00:07:20.370 --> 00:07:23.200
So I can change the default priority.

116
00:07:23.200 --> 00:07:27.710
But I can help the browser make
a right decision to improve the user

117
00:07:27.710 --> 00:07:31.900
experience based on my content
on how my content looks like.

118
00:07:33.410 --> 00:07:34.703
Does it makes sense?

119
00:07:34.703 --> 00:07:38.970
Have in mind that fetch priority
was called Priority hints before.

120
00:07:38.970 --> 00:07:42.949
In fact, all my previous workshops and
talks on web performance,

121
00:07:42.949 --> 00:07:45.090
I call that Priority hints.

122
00:07:45.090 --> 00:07:46.590
So now it's called fetch priority.

123
00:07:46.590 --> 00:07:49.755
So when the standard
specs discuss the idea,

124
00:07:49.755 --> 00:07:55.320
they changed the name and also they
changed the name of the property.

125
00:07:55.320 --> 00:07:59.697
Okay, before it was called importance,
importance equals low or high.

126
00:07:59.697 --> 00:08:00.920
Well, now it's fetch priority.

