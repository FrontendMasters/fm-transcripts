WEBVTT

1
00:00:00.000 --> 00:00:03.545
For those of you that are using
setTimeout and setInterval,

2
00:00:03.545 --> 00:00:06.948
there is a much better way that
has been for a while now, but

3
00:00:06.948 --> 00:00:10.232
it's still not the way that
most developers are using.

4
00:00:10.232 --> 00:00:13.536
It's requestAnimationFrame.

5
00:00:13.536 --> 00:00:15.812
It's part of the HTML5 today.

6
00:00:15.812 --> 00:00:20.416
And let us execute code on the next
frame before painting the frame.

7
00:00:20.416 --> 00:00:24.103
Remember that we saw that diagram
with what's going on there.

8
00:00:24.103 --> 00:00:28.735
And it's guaranteed to be executed on the
next frame because you know what happened

9
00:00:28.735 --> 00:00:29.802
with setTimeout.

10
00:00:29.802 --> 00:00:34.146
So setTimeout or setInterval.

11
00:00:34.146 --> 00:00:41.078
So if I do setInterval, and
execute some code, okay?

12
00:00:41.078 --> 00:00:46.770
I do something here like say "Hello".

13
00:00:46.770 --> 00:00:49.737
And then I say 100.

14
00:00:49.737 --> 00:00:51.602
What do you think that
this code is going to do?

15
00:00:55.113 --> 00:00:56.601
&gt;&gt; Console log ten times.

16
00:00:56.601 --> 00:01:00.403
&gt;&gt; Console log ten times per second,
right?

17
00:01:00.403 --> 00:01:03.201
Is it guaranteed?

18
00:01:03.201 --> 00:01:08.256
&gt;&gt; No, it'll end based on where it
isn't like the call queue that can-

19
00:01:08.256 --> 00:01:09.292
&gt;&gt; Yeah, in fact,

20
00:01:09.292 --> 00:01:11.077
it is not guaranteed at all.

21
00:01:11.077 --> 00:01:14.734
In fact, if you use instead of
setInterval, setTimeout, and

22
00:01:14.734 --> 00:01:19.023
let's say you have a very important
task that you need to do in one second.

23
00:01:19.023 --> 00:01:22.289
You are confident that that will work.

24
00:01:22.289 --> 00:01:24.484
But not really.

25
00:01:24.484 --> 00:01:25.838
This is how it works.

26
00:01:25.838 --> 00:01:30.117
So when we have that process of painting,

27
00:01:30.117 --> 00:01:34.042
things that we have been seeing here.

28
00:01:34.042 --> 00:01:41.918
So setTimeout are actually being
executed within idle callback time.

29
00:01:41.918 --> 00:01:45.255
Between one frame and the other frame.

30
00:01:45.255 --> 00:01:49.496
The problem is that what happens
if there is no idle callback time?

31
00:01:49.496 --> 00:01:51.813
You have some code here
in your input events.

32
00:01:51.813 --> 00:01:52.716
You have an onclick.

33
00:01:52.716 --> 00:01:56.282
You have something that
is taking a lot of time.

34
00:01:56.282 --> 00:01:59.193
So there is no idle time.

35
00:01:59.193 --> 00:02:03.793
The browser says no, I'm sorry,
I need to make the other frame,

36
00:02:03.793 --> 00:02:08.392
I need to make the other frame,
I need to make the other frame, and

37
00:02:08.392 --> 00:02:12.511
maybe it doesn't have enough
time to execute your timer.

38
00:02:12.511 --> 00:02:16.832
So actually,
every time you are saying setTimeout or

39
00:02:16.832 --> 00:02:21.537
setInterval, you are actually,
it's not a real timer,

40
00:02:21.537 --> 00:02:26.350
it's not an alarm that will wake
up that code in one second.

41
00:02:26.350 --> 00:02:31.046
It's just setting that function
in some kind of a queue

42
00:02:31.046 --> 00:02:34.935
in the table of call to
execute in the future.

43
00:02:34.935 --> 00:02:38.390
And the 1000 is not a timer.

44
00:02:38.390 --> 00:02:39.026
It's not an alarm.

45
00:02:39.026 --> 00:02:41.781
It's actually an expiration date.

46
00:02:41.781 --> 00:02:46.851
So when the browser is doing nothing,
it says, okay, let's go and see if we

47
00:02:46.851 --> 00:02:52.186
have something pending and he goes over
the list and see if it's expired or not.

48
00:02:52.186 --> 00:02:55.090
If it's expired it will execute it but

49
00:02:55.090 --> 00:03:00.547
maybe has expire 10 seconds ago so
it's going to execute that later.

50
00:03:00.547 --> 00:03:03.410
And of course, that's bad for
a lot of situations.

51
00:03:03.410 --> 00:03:08.911
So that's why it's a better
idea to use request animation

52
00:03:08.911 --> 00:03:16.217
frame because it's guaranteed to be
executed at that moment on every frame.

53
00:03:16.217 --> 00:03:20.158
But your code should be short.

54
00:03:20.158 --> 00:03:21.427
Right, why?

55
00:03:21.427 --> 00:03:26.264
Because if it's too long,
you will push the whole frame, and

56
00:03:26.264 --> 00:03:29.997
then we'll have a frame
drop in the animation.

57
00:03:29.997 --> 00:03:35.529
So that's why we should keep that code
small under 10 milliseconds of execution.

58
00:03:35.529 --> 00:03:39.946
It's more in execution not in size.

59
00:03:39.946 --> 00:03:41.730
It's much better than timers, okay?

60
00:03:41.730 --> 00:03:45.603
You just request animation frame and
do some code that's all and

61
00:03:45.603 --> 00:03:49.203
it's guaranteed is going to be
executed on the next frame.

62
00:03:53.629 --> 00:03:59.768
Sometimes you need to do something in that
diagram, but it's not really important.

63
00:03:59.768 --> 00:04:04.321
So if it's enough time you wanna
execute that, but if not, I'm okay.

64
00:04:04.321 --> 00:04:06.656
Okay, I can wait.

65
00:04:06.656 --> 00:04:11.971
For that,
we can use that idle time if it's there.

66
00:04:11.971 --> 00:04:14.627
It's called idle callback.

67
00:04:14.627 --> 00:04:18.884
Actually, the spec is known
as request background task.

68
00:04:18.884 --> 00:04:24.223
And in that case,
you will use that time that can be long or

69
00:04:24.223 --> 00:04:28.249
short, you can try to use that one, okay?

70
00:04:28.249 --> 00:04:36.254
For that, you use then request idle
callback and you pass a function.

71
00:04:36.254 --> 00:04:36.781
Makes sense?

72
00:04:36.781 --> 00:04:40.967
It's just another way that you have
to make things more performant.

73
00:04:40.967 --> 00:04:45.791
Something relatively new on

74
00:04:45.791 --> 00:04:50.213
the web is isInputPending.

75
00:04:50.213 --> 00:04:56.606
If you look at that diagram,
it's has one specific blue color there.

76
00:04:56.606 --> 00:04:58.660
I'm not sure if you recognize that blue.

77
00:04:58.660 --> 00:05:01.138
When I tell you why,
you will recognize it.

78
00:05:01.138 --> 00:05:02.865
That's Facebook's blue.

79
00:05:02.865 --> 00:05:07.298
Because that API was proposed by Facebook.

80
00:05:07.298 --> 00:05:10.865
And that's from the original documentation
that was proposed by Facebook.

81
00:05:10.865 --> 00:05:13.018
And now it's on Chrome, that API.

82
00:05:13.018 --> 00:05:17.608
isInputPending will give
you the idea of if there is

83
00:05:17.608 --> 00:05:22.854
anything in the queue pending
that needs to be processed.

84
00:05:22.854 --> 00:05:28.608
So let's say you have a long runnig
JavaScript you need to execute, okay?

85
00:05:28.608 --> 00:05:32.692
Then you end that process and
at that moment,

86
00:05:32.692 --> 00:05:39.474
the browser has time to check if the user
clicked or scrolled, input events.

87
00:05:39.474 --> 00:05:43.703
But that can lead to a problem because for
a lot of milliseconds or

88
00:05:43.703 --> 00:05:46.929
even seconds,
the user didn't see any change.

89
00:05:46.929 --> 00:05:51.290
Well, instead of doing that, you can split
your JavaScript and every once in a while,

90
00:05:51.290 --> 00:05:54.248
you can check is there any
input pending to the processed.

91
00:05:54.248 --> 00:05:59.056
And if the answer is yes, you'll release
the threat and you'll continue later.

92
00:05:59.056 --> 00:06:02.730
So you register another
request animation frame.

93
00:06:02.730 --> 00:06:03.682
Does that make sense?

94
00:06:03.682 --> 00:06:09.208
So you leave, it's just a flag from
the browser to the developer saying,

95
00:06:09.208 --> 00:06:13.750
I have pending things, so
if you can, leave me some space.

96
00:06:16.619 --> 00:06:17.735
Does it make sense?

97
00:06:17.735 --> 00:06:20.960
That is input pending.

98
00:06:20.960 --> 00:06:28.491
So then you can make small spaces asking.

99
00:06:30.989 --> 00:06:32.082
Does it make sense?

100
00:06:32.082 --> 00:06:36.676
And because you're asking, you are not
yielding between the browser and

101
00:06:36.676 --> 00:06:37.422
your code.

102
00:06:37.422 --> 00:06:40.747
You're just asking, if there is
anything pending, I will give you time.

103
00:06:40.747 --> 00:06:43.983
If not, I don't need to give you time.

104
00:06:43.983 --> 00:06:46.099
That's much faster, okay?

105
00:06:46.099 --> 00:06:48.597
This is how it works in terms of code.

106
00:06:48.597 --> 00:06:53.637
And it's not a big deal,
we don't need to cover it too deeply, but

107
00:06:53.637 --> 00:06:58.506
actually, it's
navigator.scheduling.isInputPending().

