WEBVTT

1
00:00:00.000 --> 00:00:05.508
LPC, we mentioned that LCP, Largest contentful
paint, is the most important metric for

2
00:00:05.508 --> 00:00:07.013
our website, right?

3
00:00:07.013 --> 00:00:12.780
So it's the largest part of content
that the user's brain will parse,

4
00:00:12.780 --> 00:00:16.369
so we need to hack that
as much as possible.

5
00:00:16.369 --> 00:00:18.884
One thing that we can do is preload.

6
00:00:18.884 --> 00:00:20.746
What is this?

7
00:00:20.746 --> 00:00:25.600
It will help the browser discover
resources that are obscure in

8
00:00:25.600 --> 00:00:26.799
the document.

9
00:00:26.799 --> 00:00:29.677
Let's try to understand
what that is first.

10
00:00:29.677 --> 00:00:33.466
Going back to our solution, that remember,

11
00:00:33.466 --> 00:00:38.563
you can try on your own device,
let's see our content here.

12
00:00:38.563 --> 00:00:41.981
Let me get out of this, Frontend Museum.

13
00:00:44.124 --> 00:00:49.235
I think that image is our
largest contentful paint, okay?

14
00:00:49.235 --> 00:00:54.685
So if you look at the image,
the image is gallery/ancient-greece.png,

15
00:00:54.685 --> 00:00:57.334
okay, that's the name of the file.

16
00:00:57.334 --> 00:01:03.354
Okay, when we see here,
it's not in the HTML.

17
00:01:03.354 --> 00:01:04.784
So we know it's important.

18
00:01:04.784 --> 00:01:07.003
Actually, it's the most important part for
performance.

19
00:01:07.003 --> 00:01:09.958
We want that image as soon as possible,
right?

20
00:01:09.958 --> 00:01:12.279
We all agree on that, right?

21
00:01:12.279 --> 00:01:17.384
So if we go to the Network tab,
I'm going to move it.

22
00:01:17.384 --> 00:01:19.612
Where is that jpg file here?

23
00:01:19.612 --> 00:01:20.226
Let's see.

24
00:01:20.226 --> 00:01:24.139
That's a script, that's a logo,
that's a gradient,

25
00:01:24.139 --> 00:01:28.228
that's a font, the JSON,
ancient-greece, here it is.

26
00:01:29.945 --> 00:01:33.949
So when we look at the diagram,

27
00:01:33.949 --> 00:01:42.111
we wasted all this time to actually
download the file earlier.

28
00:01:42.111 --> 00:01:45.855
And if I see the details of that,

29
00:01:45.855 --> 00:01:51.279
we can see that it was
queued at 516 second.

30
00:01:51.279 --> 00:01:52.308
What is that?

31
00:01:52.308 --> 00:01:55.675
That is at that moment it was discovered.

32
00:01:55.675 --> 00:01:58.291
When it's queued is when it's discover.

33
00:01:58.291 --> 00:02:04.266
So for five seconds, the browser
didn't know about that PNG file.

34
00:02:04.266 --> 00:02:08.689
That by the way, shouldn't be a PNG,
but that's for another slide.

35
00:02:08.689 --> 00:02:09.841
So what's going on?

36
00:02:09.841 --> 00:02:11.756
So we need to analyze what's going on.

37
00:02:11.756 --> 00:02:16.116
Why is that the browser is not
downloading that PNG file faster?

38
00:02:16.116 --> 00:02:21.674
Well, the problem is that on how this
website is being created, that there

39
00:02:21.674 --> 00:02:27.247
are a lot of websites out there, like
there is a script file that we can see.

40
00:02:27.247 --> 00:02:34.517
The script file, it's registering
an event on the load event, okay?

41
00:02:34.517 --> 00:02:36.146
We already mentioned that.

42
00:02:36.146 --> 00:02:37.739
Is it a good idea?

43
00:02:37.739 --> 00:02:44.309
No, the load event will happen after all
the images and everything is downloaded.

44
00:02:44.309 --> 00:02:47.196
So we can start helping this.

45
00:02:47.196 --> 00:02:52.803
We can change onload for onDomContentLoaded
or use addEventListener.

46
00:02:52.803 --> 00:02:54.342
It's DOMContentLoader.

47
00:02:54.342 --> 00:02:57.940
So I'm going to call
load on DOMContentLoaded.

48
00:02:57.940 --> 00:03:02.814
This will save a couple of milliseconds,
if not seconds,

49
00:03:02.814 --> 00:03:05.407
to start executing this code.

50
00:03:05.407 --> 00:03:08.994
Then this code is downloading a JSON file.

51
00:03:08.994 --> 00:03:13.391
And based on that JSON file,
it's rendering articles on the screen.

52
00:03:13.391 --> 00:03:18.433
That's why the image is
being discovered late.

53
00:03:18.433 --> 00:03:21.486
So the browser needs to
execute the JavaScript.

54
00:03:21.486 --> 00:03:26.124
So it was waiting for the load,
executing the JavaScript,

55
00:03:26.124 --> 00:03:30.298
going and fetching the JSON,
then parsing the JSON,

56
00:03:30.298 --> 00:03:36.080
then looping through the objects that
we have there, and creating HTML.

57
00:03:36.080 --> 00:03:40.664
At one point, the browser says,
there is an image I need to go and find.

58
00:03:40.664 --> 00:03:44.918
We lost not five seconds,
but probably four, and

59
00:03:44.918 --> 00:03:48.475
we could download that PNG file earlier.

60
00:03:48.475 --> 00:03:51.611
So we can, of course, change this.

61
00:03:51.611 --> 00:03:54.659
So we have a big problem here.

62
00:03:54.659 --> 00:04:00.949
The big problem is that this was
a bad idea from the first time, okay?

63
00:04:00.949 --> 00:04:05.204
So rendering content on the screen based
on JavaScript that needs to download

64
00:04:05.204 --> 00:04:07.503
a JSON file is a bad
idea from the scratch.

65
00:04:07.503 --> 00:04:13.679
But let's say that for now we cannot
change that, what else we can do?

66
00:04:13.679 --> 00:04:15.544
We can use preload.

67
00:04:15.544 --> 00:04:20.761
So we can help the discovery
of that file with preload.

68
00:04:20.761 --> 00:04:27.958
Preload is a link element that we can
set typically in the head of our HTML.

69
00:04:27.958 --> 00:04:34.263
And in this case, we are going to help
that queue of discovered elements.

70
00:04:34.263 --> 00:04:38.513
We are going to say, hey, browser,
we will need that PNG file.

71
00:04:38.513 --> 00:04:41.804
You don't know yet that we will need that,
but believe me, I'm the author.

72
00:04:41.804 --> 00:04:43.682
I know that you will need that later.

73
00:04:43.682 --> 00:04:49.362
So for that, then we go to the HTML and
add that link.

74
00:04:49.362 --> 00:04:53.904
It's link rel="preload".

75
00:04:56.579 --> 00:05:04.027
The name is going to be images/,
no images, no, I'm sorry gallery/.

76
00:05:04.027 --> 00:05:09.718
It was ancient-greece, and
it's mandatory to set as.

77
00:05:09.718 --> 00:05:15.922
So I'm going to download this as an image,
as a style sheet, as a script.

78
00:05:15.922 --> 00:05:20.462
So there is a list in
the spec of values for that 'as'.

79
00:05:20.462 --> 00:05:25.573
So in this case,
we are moving within the timeline within

80
00:05:25.573 --> 00:05:30.477
our waterfall chart,
the discovery of that element.

81
00:05:30.477 --> 00:05:34.300
We will still have the problem that the
browser will not know what to do with it

82
00:05:34.300 --> 00:05:36.644
for a while before
executing the JavaScript.

83
00:05:36.644 --> 00:05:42.386
But at least when that moment is there,
the image is there waiting for

84
00:05:42.386 --> 00:05:46.156
the browser, so
it will be rendered faster.

85
00:05:46.156 --> 00:05:47.284
Does it make sense?

86
00:05:47.284 --> 00:05:50.815
&gt;&gt; Sorry, so that link with the preload,

87
00:05:50.815 --> 00:05:55.312
that line there when
actually display the image.

88
00:05:55.312 --> 00:05:57.946
&gt;&gt; No.
&gt;&gt; It try to prepares it for when it's in.

89
00:05:57.946 --> 00:06:01.082
So when is it actually
being asked to be rendered?

90
00:06:01.082 --> 00:06:02.274
It's within that script?

91
00:06:02.274 --> 00:06:04.305
&gt;&gt; We didn't change that,
we didn't change that part.

92
00:06:04.305 --> 00:06:05.525
In this case, it's the script.

93
00:06:05.525 --> 00:06:07.880
The only thing that we change,
we change the event.

94
00:06:07.880 --> 00:06:10.339
So now instead of being the load event,

95
00:06:10.339 --> 00:06:13.553
we improve that a little
bit on DOMContentLoader.

96
00:06:13.553 --> 00:06:17.549
And within this event is
fetching that data.JSON.

97
00:06:17.549 --> 00:06:20.803
And for each element that we have here,
we are creating

98
00:06:20.803 --> 00:06:25.212
this little HTML that we're injecting,
and that HTML is gonna have an image.

99
00:06:25.212 --> 00:06:28.852
&gt;&gt; Yeah, and so
at that line there in that loop there-

100
00:06:28.852 --> 00:06:31.376
&gt;&gt; Here, and that line 13, actually,

101
00:06:31.376 --> 00:06:33.061
not even in the line 13.

102
00:06:33.061 --> 00:06:36.824
When we release the thread
of that event listener,

103
00:06:36.824 --> 00:06:41.472
the browser will say, okay,
let's see what has just passed.

104
00:06:41.472 --> 00:06:44.014
It will say, we have more HTML to render.

105
00:06:44.014 --> 00:06:48.814
It will parse that new HTML,
it will update the DOM, and

106
00:06:48.814 --> 00:06:53.513
it will realize that there is
a new image to render, and

107
00:06:53.513 --> 00:06:56.804
it will fire the queue, not this one.

108
00:06:56.804 --> 00:07:00.022
I think, yeah, this one.

109
00:07:00.022 --> 00:07:00.955
It will need a resource.

110
00:07:00.955 --> 00:07:02.673
It will check the cache.

111
00:07:02.673 --> 00:07:04.039
It's in the cache.

112
00:07:04.039 --> 00:07:07.867
So actually, it's a cache hit and
it's not expired.

113
00:07:07.867 --> 00:07:09.289
So you will use the file from the cache.

114
00:07:09.289 --> 00:07:11.415
It works like that, that's the idea.

115
00:07:11.415 --> 00:07:15.332
So when you need it,
when the browser needs that file, it's there.

116
00:07:17.557 --> 00:07:18.980
I'm in the final version.

117
00:07:18.980 --> 00:07:23.093
No, I'm applying small updates, okay,

118
00:07:23.093 --> 00:07:27.333
to these code to make it even better,
okay?

119
00:07:27.333 --> 00:07:31.627
I'm not saying that it's fine, but
it's getting better on each iteration.

120
00:07:31.627 --> 00:07:33.943
So how do I know?

121
00:07:33.943 --> 00:07:36.440
And now it's better,
look at the image now.

122
00:07:36.440 --> 00:07:40.852
Let's go like this
ancient-greece now is being

123
00:07:40.852 --> 00:07:45.484
downloaded in parallel
with the CSS immediately.

124
00:07:45.484 --> 00:07:48.522
I'm not saying it's being rendered
there after downloading the file,

125
00:07:48.522 --> 00:07:51.025
because I'm not saying that
because it's not happening.

126
00:07:51.025 --> 00:07:55.219
But at least it's being downloaded
as soon as possible, and

127
00:07:55.219 --> 00:07:57.946
then when the JavaScript is executed.

128
00:07:57.946 --> 00:07:59.707
This is the JavaScript file.

129
00:07:59.707 --> 00:08:01.932
And then the data.json file is here.

130
00:08:01.932 --> 00:08:06.858
So after this is parsed at that point,
it realized, yeah,

131
00:08:06.858 --> 00:08:10.806
the image, but
the image was already downloaded.

132
00:08:10.806 --> 00:08:15.956
So we use data preload, sorry, we use link

133
00:08:15.956 --> 00:08:22.265
rel="preload" to help
that discovery process.

134
00:08:22.265 --> 00:08:29.185
And we typically use that for elements
that are hidden or obscure in the HTML.

135
00:08:29.185 --> 00:08:32.584
So we don't typically
do that with logo.png.

136
00:08:32.584 --> 00:08:37.043
There is no need for that, because
logo.png is already in the HTML defined.

137
00:08:37.043 --> 00:08:40.336
So the discovery will
happen anyway pretty soon.

138
00:08:40.336 --> 00:08:43.259
&gt;&gt; What would happen if you
just put that on every single?

139
00:08:43.259 --> 00:08:46.739
&gt;&gt; Well,
if you add that on every single element,

140
00:08:46.739 --> 00:08:52.317
what happens is that when everything
is important, nothing is important.

141
00:08:52.317 --> 00:08:57.004
So it's like not doing it, actually.

142
00:08:57.004 --> 00:09:02.709
The advantage of using these APIs is that
now you have control to help the browser

143
00:09:02.709 --> 00:09:07.818
prioritize what you need to make it
better that by default, the browser

144
00:09:07.818 --> 00:09:14.144
doesn't know exactly what will happen with
that website with that rendering process.

145
00:09:14.144 --> 00:09:19.277
But we know because we are the authors,
so we know what we are trying

146
00:09:19.277 --> 00:09:24.237
to achieve here, and
then based with that we wanna improve LCP.

147
00:09:24.237 --> 00:09:27.814
And we know that that image is the LCP,
then we apply that.

148
00:09:27.814 --> 00:09:30.788
So this is one example for preload.

149
00:09:30.788 --> 00:09:34.006
In our work code,
what other example do we have for preload?

150
00:09:34.006 --> 00:09:37.884
How fonts work? This is a CSS file, okay?

151
00:09:37.884 --> 00:09:42.016
So this link is not downloading the font.

152
00:09:42.016 --> 00:09:48.511
This link is downloading the CSS
file that is pointing to a font.

153
00:09:48.511 --> 00:09:49.756
Does it make sense?

154
00:09:49.756 --> 00:09:54.948
If the font is important for LCP,
I'm not saying it's the case for

155
00:09:54.948 --> 00:10:00.341
every case, we should check which
of these fonts are the ones I need.

156
00:10:00.341 --> 00:10:01.526
How do I check that?

157
00:10:01.526 --> 00:10:05.540
Well, maybe I can go to
the network layer and

158
00:10:05.540 --> 00:10:09.346
see which font file is being downloaded.

159
00:10:09.346 --> 00:10:11.410
It's this one.

160
00:10:11.410 --> 00:10:16.090
So if I believe that font is mandatory for
the LCP,

161
00:10:16.090 --> 00:10:21.216
don't do this for every font,
only for the one that you

162
00:10:21.216 --> 00:10:26.131
know it will improve or
it may improve your web vitals.

163
00:10:26.131 --> 00:10:30.856
You can go copy the URL, and add the rel

164
00:10:30.856 --> 00:10:37.624
="preload", For the fonts file itself.

165
00:10:37.624 --> 00:10:41.914
So rel="preload" href=,

166
00:10:41.914 --> 00:10:48.021
that long list, long URL, as"font"&gt;.

167
00:10:51.391 --> 00:10:57.701
So in this case, that URL,
the actual, it's a woff file.

168
00:10:57.701 --> 00:11:02.682
That woff file was obscure for the HTML,
the HTML didn't know about that.

169
00:11:02.682 --> 00:11:05.310
The HTML need to first download the CSS,

170
00:11:05.310 --> 00:11:08.411
parse that CSS to actually
know that woff file.

171
00:11:08.411 --> 00:11:13.487
Well, we can preload it,
that's another use case.

172
00:11:13.487 --> 00:11:16.493
But again,
don't add preload on everything or

173
00:11:16.493 --> 00:11:21.251
don't add preload with elements that
are already visible in the HTML.

174
00:11:21.251 --> 00:11:26.210
So if you see the reference in the HTML,
you don't need to preload,

175
00:11:26.210 --> 00:11:29.085
because it will be in the queue anyway.

176
00:11:29.085 --> 00:11:33.877
Preload is being used to
actually help the discovery.

177
00:11:33.877 --> 00:11:38.981
By the way, if you're wondering why,
if you try this Frontend Museum website,

178
00:11:38.981 --> 00:11:42.207
every time you reload,
it's different, right,

179
00:11:42.207 --> 00:11:46.501
the performance sometimes it's better,
sometimes it's worse.

180
00:11:46.501 --> 00:11:49.009
It seems a little bit inconsistent, right?

181
00:11:49.009 --> 00:11:49.620
Why is that?

182
00:11:49.620 --> 00:11:53.142
And I'm sure if you were
curious enough to go and

183
00:11:53.142 --> 00:11:57.733
see what's going on,
the server is actually making a pause.

184
00:11:57.733 --> 00:12:03.425
It's a middleware in express.js
that is making a random delay.

185
00:12:03.425 --> 00:12:11.956
Let's say a fake delay on every request
from 100 to 1,600 milliseconds.

186
00:12:11.956 --> 00:12:15.478
So every request, every image,
every CSS will have a delay.

187
00:12:15.478 --> 00:12:18.257
It's like the server is, or the latency.

188
00:12:18.257 --> 00:12:22.602
I'm faking this so
we can see better in action how small

189
00:12:22.602 --> 00:12:27.329
changes in the front end can
lead to much better web vitals.

190
00:12:27.329 --> 00:12:31.472
So instead of adding it in the HTML,

191
00:12:31.472 --> 00:12:37.688
you can even went a little
bit lower in the timeline and

192
00:12:37.688 --> 00:12:42.675
add that as an HTTP
header in the response.

193
00:12:42.675 --> 00:12:46.828
So you a browser,
you're asking me for the HTML and

194
00:12:46.828 --> 00:12:52.151
I'm responding, I'm saying,
hey, go and download that CSS.

195
00:12:52.151 --> 00:12:53.429
Here, you have the HTML.

196
00:12:53.429 --> 00:12:56.371
So then your browser will know that CSS or

197
00:12:56.371 --> 00:13:01.491
that woff file will be needed even
before starting rendering the HTML.

198
00:13:01.491 --> 00:13:02.345
Does it make sense?

199
00:13:02.345 --> 00:13:04.105
So then with the headers,

200
00:13:04.105 --> 00:13:09.155
the browser will know that there is
a need to preload some other resources.

