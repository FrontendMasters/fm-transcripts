WEBVTT

1
00:00:00.000 --> 00:00:00.860
Device memory.

2
00:00:00.860 --> 00:00:03.262
This is available on some browsers.

3
00:00:03.262 --> 00:00:05.906
Again, why is this important?

4
00:00:05.906 --> 00:00:07.149
Just for the context.

5
00:00:07.149 --> 00:00:08.637
You have more context.

6
00:00:08.637 --> 00:00:13.325
It will give us the number
expressed in gibiytes, okay?

7
00:00:13.325 --> 00:00:20.708
And it's giving just 1, 2, 4, or 8.

8
00:00:20.708 --> 00:00:22.003
That's all.

9
00:00:22.003 --> 00:00:27.761
For example, my Mac has 64, but it's not
going to give me 64 gigabytes of RAM.

10
00:00:27.761 --> 00:00:29.428
It's navigator.deviceMemory.

11
00:00:29.428 --> 00:00:30.925
Pretty simple.

12
00:00:30.925 --> 00:00:37.794
So we go to navigator.deviceMemory, 8.

13
00:00:37.794 --> 00:00:39.985
Let me show you that that's false.

14
00:00:39.985 --> 00:00:41.725
It's 64.

15
00:00:41.725 --> 00:00:45.760
Anyway, the idea is to
reduce fingerprinting.

16
00:00:45.760 --> 00:00:52.192
So whoever wrote that part of the spec,
believe that having 8,16,

17
00:00:52.192 --> 00:00:56.922
34, 64 from a web perspective
is just the same.

18
00:00:56.922 --> 00:00:59.676
You don't need to know more details.

19
00:00:59.676 --> 00:01:00.879
I didn't write the spec.

20
00:01:00.879 --> 00:01:02.585
Don't look at me like that.

21
00:01:02.585 --> 00:01:05.882
That's what the spec says.

22
00:01:05.882 --> 00:01:09.585
So as of today, it will give you up to 8.

23
00:01:09.585 --> 00:01:16.252
I mean, for WebGL or WebGPU apps, games,
yeah, that might be important, but anyway.

24
00:01:16.252 --> 00:01:21.247
In this case, the idea is to actually
know when you are in a low-end device,

25
00:01:21.247 --> 00:01:23.136
like an Android cheap phone.

26
00:01:23.136 --> 00:01:25.195
And if that's the case,

27
00:01:25.195 --> 00:01:30.792
you wanna reduce as much as possible
code execution client-side.

28
00:01:30.792 --> 00:01:32.464
Okay, make sense?

29
00:01:32.464 --> 00:01:37.381
That device, Save Data Flag.

30
00:01:37.381 --> 00:01:41.960
So I mentioned before,
it's navigator.connection.saveData.

31
00:01:41.960 --> 00:01:46.064
And for example, an Android, on Chrome
on Android, that's how it looks like.

32
00:01:46.064 --> 00:01:48.015
So you will enable that in settings.

33
00:01:48.015 --> 00:01:51.169
And if you enable that
then in JavaScript or

34
00:01:51.169 --> 00:01:56.172
through HTTP clients hints,
you will get to your server the flag.

35
00:01:56.172 --> 00:02:02.210
It's up to you if you wanna do
something or not about that.

36
00:02:02.210 --> 00:02:04.049
Okay, that's Save Data.

37
00:02:04.049 --> 00:02:10.029
So just a summary of this part of API's.

38
00:02:10.029 --> 00:02:12.841
We can use all the API's
that I mentioned and

39
00:02:12.841 --> 00:02:16.650
there are more I'm just giving
you like a quick rough idea.

40
00:02:16.650 --> 00:02:21.268
To apply these reactive web
performance techniques, okay,

41
00:02:21.268 --> 00:02:24.034
to serve better responsive images.

42
00:02:24.034 --> 00:02:28.804
So now, the current device
has a device pixel ratio,

43
00:02:28.804 --> 00:02:31.777
that's the resolution of four.

44
00:02:31.777 --> 00:02:37.579
So it's four times the resolution
of a classic standard display.

45
00:02:37.579 --> 00:02:42.403
Well, based on that,
you may wanna provide an image

46
00:02:42.403 --> 00:02:46.143
that is four times by four times bigger.

47
00:02:46.143 --> 00:02:51.127
So 16 times bigger,
unless you realize that the memory is

48
00:02:51.127 --> 00:02:55.326
not good enough or
the latency is not good enough.

49
00:02:55.326 --> 00:02:58.495
So it's not just about one data,
it's the mix.

50
00:02:58.495 --> 00:03:03.448
The mix of information that will let
you have better conclusions about this.

