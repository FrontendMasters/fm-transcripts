WEBVTT

1
00:00:00.240 --> 00:00:04.561
Two other things before actually
starting to analyze how to improve

2
00:00:04.561 --> 00:00:08.896
performance now that we understand
roughly how everything works.

3
00:00:08.896 --> 00:00:11.970
Typically, let's simplify a website a lot.

4
00:00:11.970 --> 00:00:14.882
We have HTML, we have JavaScript,
and we have CSS, okay?

5
00:00:14.882 --> 00:00:16.250
That's the minimum.

6
00:00:17.710 --> 00:00:22.020
What I'm not sure if you know is that CSS,
let's start with JavaScript.

7
00:00:22.020 --> 00:00:26.551
JavaScript blocks parsing by default,

8
00:00:26.551 --> 00:00:31.620
which means the browser
is reading the HTML.

9
00:00:32.890 --> 00:00:37.351
If the browser encounters a JavaScript,
it will stop parsing, so

10
00:00:37.351 --> 00:00:39.830
it will not read the rest of the HTML.

11
00:00:40.950 --> 00:00:42.650
Let me show you this in action.

12
00:00:42.650 --> 00:00:47.538
In our Frontend Museum, example,
when you look at the HTML,

13
00:00:47.538 --> 00:00:53.648
parsing is about reading, let's say,
line by line and analyzing the code,

14
00:00:53.648 --> 00:01:00.820
understanding the elements, and creating
the DOM, the document object model.

15
00:01:00.820 --> 00:01:06.720
Well, here, for example, on line four,
it gets into a script tag.

16
00:01:06.720 --> 00:01:10.709
Well, because there is a script there,
it will block the parsing.

17
00:01:10.709 --> 00:01:13.608
So it's not going to read the meta or

18
00:01:13.608 --> 00:01:18.829
the rest of the HTML until that
JavaScript file is downloaded and

19
00:01:18.829 --> 00:01:23.700
executed, which is pretty bad for
performance.

20
00:01:23.700 --> 00:01:31.463
In the network layer, Let me refresh so
we can get the full waterfall.

21
00:01:36.509 --> 00:01:41.864
Let me get off of the screenshot so
we have more space, like so.

22
00:01:45.322 --> 00:01:51.154
We could see at some point,
I'm not sure if it's easy to see here,

23
00:01:51.154 --> 00:01:57.728
but maybe here, that logo.png file
didn't start the download process,

24
00:02:00.073 --> 00:02:03.190
Before the script finishes downloading.

25
00:02:04.510 --> 00:02:05.150
Can you see that?

26
00:02:06.550 --> 00:02:13.239
So that's typically a case of,
A problem like this.

27
00:02:13.239 --> 00:02:19.265
For example, if I open my index.html and
I have more scripts like so,

28
00:02:19.265 --> 00:02:24.576
I can even add the hack like this,
you will see how performance

29
00:02:24.576 --> 00:02:30.220
gets worse and worse,
because it will wait for this one.

30
00:02:30.220 --> 00:02:35.096
It's not going to download more files
in parallel, it will go in sequence,

31
00:02:35.096 --> 00:02:36.660
one by one.

32
00:02:36.660 --> 00:02:41.002
That was ten years ago,
there was best practice in web

33
00:02:41.002 --> 00:02:46.130
development that was saying,
move all your script to the end.

34
00:02:46.130 --> 00:02:47.360
Have you seen that?

35
00:02:48.750 --> 00:02:53.034
That is both because let's
defer that to the end so

36
00:02:53.034 --> 00:02:57.030
we don't block the rendering, okay?

37
00:02:57.030 --> 00:02:59.010
Anyway, we'll get into that in a second.

38
00:02:59.010 --> 00:03:02.920
So JavaScript blocks parsing and
rendering goes after parsing.

39
00:03:02.920 --> 00:03:07.574
So if we are blocking parsing,
we're also blocking rendering,

40
00:03:07.574 --> 00:03:09.528
we are pushing rendering.

41
00:03:09.528 --> 00:03:15.078
CSS blocks rendering, which means
the browser will never render a pixel on

42
00:03:15.078 --> 00:03:21.360
the screen if all the CSS that is known at
that moment was not downloaded and parsed.

43
00:03:22.800 --> 00:03:25.867
Even CSS that is not going
to be applied right now, or

44
00:03:25.867 --> 00:03:30.190
even if the CSS it has a media query and
the media query is currently false,

45
00:03:30.190 --> 00:03:33.130
it's going to download everything.

46
00:03:33.130 --> 00:03:35.695
It's going to parse the CSS, and

47
00:03:35.695 --> 00:03:40.740
only at that moment it will start
rendering things on the screen.

48
00:03:41.840 --> 00:03:47.062
And we know that most of the core
web vitals has to do with rendering,

49
00:03:47.062 --> 00:03:49.689
with seeing things on the screen.

50
00:03:49.689 --> 00:03:52.590
Well, and the last thing is frames and
interactivity.

51
00:03:52.590 --> 00:03:57.500
That is just showing you this
particular slide diagram

52
00:03:57.500 --> 00:04:00.280
that has to do with animation.

53
00:04:00.280 --> 00:04:05.065
So after the page was loaded,
the browser has an animation loop,

54
00:04:05.065 --> 00:04:10.410
even if nothing moves on the page,
there is an animation loop.

55
00:04:10.410 --> 00:04:14.260
When you scroll with your finger,
with your phone, you scroll,

56
00:04:14.260 --> 00:04:16.550
that's an animation loop going on.

57
00:04:16.550 --> 00:04:18.440
So there is always an animation.

58
00:04:18.440 --> 00:04:23.038
And the animation renders a frame,
and then it analyzes input events.

59
00:04:23.038 --> 00:04:29.100
Input events is, have you scrolled, have
you clicked, is your mouse over something?

60
00:04:29.100 --> 00:04:33.740
So every event that you have in
JavaScript can be an input event.

61
00:04:33.740 --> 00:04:38.860
After parsing those events, and that's
actually your code, your JavaScript code.

62
00:04:38.860 --> 00:04:43.521
When your JavaScript code releases the
thread, then the browser parses the HTML,

63
00:04:43.521 --> 00:04:47.583
styles, and layout in case you have
changed something or in case you have

64
00:04:47.583 --> 00:04:51.970
moved the page and there is something
else that needs to be analyzed.

65
00:04:51.970 --> 00:04:55.015
Then it goes into paints and
composite, and

66
00:04:55.015 --> 00:04:58.486
maybe there is an idle time
before the next frame.

67
00:05:01.134 --> 00:05:08.497
And it's doing that, for example, 60
times per second, Okay, that's the idea.

68
00:05:08.497 --> 00:05:12.704
The problem is, what happens if your
JavaScript code is taking a second

69
00:05:12.704 --> 00:05:13.550
to execute?

70
00:05:15.540 --> 00:05:19.350
We have a problem because we are pushing
the rest because it's only one thread.

71
00:05:20.370 --> 00:05:26.455
So that means the animation will be bad,
you won't get 60 frames per seconds,

72
00:05:26.455 --> 00:05:30.510
and you get into performance penalties,
okay?

73
00:05:30.510 --> 00:05:33.440
So this is just, again,
just how the browser works.

