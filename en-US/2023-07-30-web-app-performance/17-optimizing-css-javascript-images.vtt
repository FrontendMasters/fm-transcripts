WEBVTT

1
00:00:00.210 --> 00:00:03.230
Well, remember we
mentioned CSS as appetizer.

2
00:00:03.230 --> 00:00:06.460
CSS should be small and
as soon as possible.

3
00:00:06.460 --> 00:00:11.350
In fact, in our code,
let's look at our code.

4
00:00:11.350 --> 00:00:15.650
Let me close these things I have here,
index.html.

5
00:00:15.650 --> 00:00:16.760
I start with the script.

6
00:00:16.760 --> 00:00:21.750
I will solve the script problem
in a minute, but that's wrong.

7
00:00:21.750 --> 00:00:24.793
The first thing I need is a stylesheet.

8
00:00:24.793 --> 00:00:30.020
So I should move both stylesheets
to the top, before anything else.

9
00:00:30.020 --> 00:00:32.335
So, I wanna help discovery, and

10
00:00:32.335 --> 00:00:36.740
I want the browser to discover
my CSS file as soon as possible.

11
00:00:36.740 --> 00:00:37.790
Why?

12
00:00:37.790 --> 00:00:40.910
Because the CSS file will block render.

13
00:00:40.910 --> 00:00:44.193
I know that the browser will need
all the CSS files to render anything

14
00:00:44.193 --> 00:00:44.950
on the screen.

15
00:00:46.700 --> 00:00:49.850
So I don't wanna make a late discovery.

16
00:00:49.850 --> 00:00:53.770
I don't want the browser to
discover this when it's late, okay?

17
00:00:55.060 --> 00:00:56.150
Make sense?

18
00:00:56.150 --> 00:00:59.443
Well, that's for CSS.

19
00:00:59.443 --> 00:01:06.648
Also, if I analyze what's going on here,
I actually have three CSS files.

20
00:01:06.648 --> 00:01:11.711
Styles CSS, one that comes from Google,
and background CSS.

21
00:01:11.711 --> 00:01:15.780
And, you say, okay, why background CSS?

22
00:01:15.780 --> 00:01:17.170
Look at this.

23
00:01:17.170 --> 00:01:18.270
Why background CSS?

24
00:01:19.430 --> 00:01:20.420
It's this one.

25
00:01:20.420 --> 00:01:24.820
It's difficult to show you
this without the hovering.

26
00:01:24.820 --> 00:01:29.610
This one, why is not downloading
really fast as the other two?

27
00:01:31.340 --> 00:01:34.916
So if I have a style CSS here,
it's starting the download process,

28
00:01:34.916 --> 00:01:36.320
it starts here.

29
00:01:36.320 --> 00:01:39.110
But background CSS takes a while.

30
00:01:39.110 --> 00:01:41.930
I wanna push this back.

31
00:01:41.930 --> 00:01:43.260
Why?

32
00:01:43.260 --> 00:01:47.370
You see the red line, the vertical line.

33
00:01:47.370 --> 00:01:52.389
That vertical line doesn't
happen before that CSS file.

34
00:01:52.389 --> 00:01:56.850
Because we know that
the browser will never rend,

35
00:01:56.850 --> 00:02:03.340
the never rend the pixel until all the CSS
files were downloaded and parsed.

36
00:02:03.340 --> 00:02:11.010
And if I can move this somehow that way,
maybe I can move that line as well.

37
00:02:11.010 --> 00:02:14.369
It's not about the line, it's about
the metric that will improve user's

38
00:02:14.369 --> 00:02:17.210
perception, and
that will improve conversion, okay?

39
00:02:17.210 --> 00:02:18.490
Remember that.

40
00:02:18.490 --> 00:02:20.270
So what's going on with
our background CSS?

41
00:02:20.270 --> 00:02:24.960
Well, if we look at the code,
the code is just adding styles.css.

42
00:02:24.960 --> 00:02:32.240
But when we get into styles.css,
it's importing the background CSS file.

43
00:02:32.240 --> 00:02:37.883
Because some designers prefer to
do that to separate the CSS file,

44
00:02:37.883 --> 00:02:44.930
like in per topic or per section, but
this is pretty bad for performance.

45
00:02:44.930 --> 00:02:45.650
Why?

46
00:02:45.650 --> 00:02:54.379
Because we have to wait until
the browser downloaded and parsed.

47
00:02:54.379 --> 00:02:59.608
Styles CSS file to actually realize
that there is another one to download,

48
00:02:59.608 --> 00:03:04.599
so we have late discovery,
the browser discover background CSS late.

49
00:03:06.765 --> 00:03:07.950
Does it make sense?

50
00:03:07.950 --> 00:03:11.740
So we don't want that late discovery for
our CSS.

51
00:03:11.740 --> 00:03:13.289
So don't use @import.

52
00:03:14.520 --> 00:03:19.002
So here we can just copy and
paste the CSS into one file or

53
00:03:19.002 --> 00:03:23.679
if you want on HTTP/2 is not
going to have a lot of problems

54
00:03:23.679 --> 00:03:28.370
to add background CSS here,
so we have early discovery.

55
00:03:29.440 --> 00:03:36.730
Later today, we will see how to improve
that in case you cannot do this.

56
00:03:36.730 --> 00:03:40.300
Say for some reason that CSS,
the name of the CSS,

57
00:03:40.300 --> 00:03:46.010
we know that after some execution, well,
we will see how to solve the problem.

58
00:03:47.650 --> 00:03:52.930
So now if I refresh, I should see
a difference on loading CSS files

59
00:03:52.930 --> 00:03:58.306
that now background and
styles are being downloaded in parallel,

60
00:03:58.306 --> 00:04:01.190
at the same time, not in sequence.

61
00:04:03.060 --> 00:04:03.960
Can you see that?

62
00:04:03.960 --> 00:04:08.832
So then we are letting the browser know

63
00:04:08.832 --> 00:04:12.950
all the CSS as soon as possible.

64
00:04:14.830 --> 00:04:15.330
Make sense?

65
00:04:17.540 --> 00:04:19.978
We still have some problems
with JavaScript, okay.

66
00:04:19.978 --> 00:04:21.050
But we will get there.

67
00:04:22.320 --> 00:04:26.138
Because JavaScript should be the dessert,
as I mentioned before.

68
00:04:26.138 --> 00:04:29.891
So we need to defer JavaScript
as soon as possible.

69
00:04:29.891 --> 00:04:34.360
So because JavaScript will block parsing.

70
00:04:34.360 --> 00:04:38.351
And it also uses the main thread,
the same main thread that is

71
00:04:38.351 --> 00:04:42.820
used by the browser to layout,
composite, and make all the stuff.

72
00:04:44.550 --> 00:04:47.050
So first, remove or defer unused code.

73
00:04:48.140 --> 00:04:53.413
So I remember a research
that found that typically

74
00:04:53.413 --> 00:04:59.070
20% of the JavaScript file
is not being used ever.

75
00:05:00.150 --> 00:05:05.049
It's like orphan code that you have there
in your JavaScript file that is not going

76
00:05:05.049 --> 00:05:08.360
to be used, but
it needs to be parsed anyway.

77
00:05:08.360 --> 00:05:14.069
And JavaScript is the most expensive
asset that you have in your website.

78
00:05:15.930 --> 00:05:21.350
It's not because of the file size,
because maybe JPEG files can be larger.

79
00:05:21.350 --> 00:05:26.490
It's because of the CPU cost, because
we have to compile the JavaScript code.

80
00:05:26.490 --> 00:05:29.881
So there is a just in time compiler,
user's devices and

81
00:05:29.881 --> 00:05:34.369
parse and compile the JavaScript and
then execute that JavaScript code.

82
00:05:36.160 --> 00:05:41.810
And then that's typically 1000
times more costly than a JPEG.

83
00:05:43.400 --> 00:05:46.191
So that's why JavaScript can be so,
so important.

84
00:05:46.191 --> 00:05:47.480
And how to do that.

85
00:05:47.480 --> 00:05:49.180
So how to defer JavaScript code?

86
00:05:49.180 --> 00:05:53.780
Well, we need to convert our script
tags into non-blocking script

87
00:05:53.780 --> 00:05:57.331
because by default when
you have blocking scripts,

88
00:05:57.331 --> 00:06:01.705
you will see things like this,
like a stair here in the diagram.

89
00:06:01.705 --> 00:06:03.698
Can you see that there is like a stair.

90
00:06:03.698 --> 00:06:07.567
But you don't see any
other parallel downloads.

91
00:06:07.567 --> 00:06:11.650
You just see one, one, one, one,
and then parallel downloads.

92
00:06:11.650 --> 00:06:14.134
When you see this in your waterfall chart,

93
00:06:14.134 --> 00:06:17.040
that typically means you
have blocking scripts.

94
00:06:18.170 --> 00:06:19.530
In this case, we have three scripts.

95
00:06:19.530 --> 00:06:22.040
The first one is HTML, and
then script, script, script.

96
00:06:23.610 --> 00:06:27.801
That's because we already mentioned this,
but

97
00:06:27.801 --> 00:06:31.795
by default we have HTML
parsing here going on.

98
00:06:31.795 --> 00:06:33.110
Here.

99
00:06:33.110 --> 00:06:34.790
The HTML is parsing.

100
00:06:34.790 --> 00:06:37.480
And it founds a script, and
it says, there is a script.

101
00:06:37.480 --> 00:06:41.450
Okay, we do nothing else.

102
00:06:41.450 --> 00:06:42.520
We pause parsing.

103
00:06:42.520 --> 00:06:44.430
We pause everything else.

104
00:06:44.430 --> 00:06:48.160
We download the script and
execute the script, and then we continue.

105
00:06:49.340 --> 00:06:50.320
And that's wrong.

106
00:06:50.320 --> 00:06:51.580
We don't want that.

107
00:06:51.580 --> 00:06:54.639
That's why HTML5 supports
now the defer attribute.

108
00:06:56.290 --> 00:06:59.045
If you use the defer attribute,

109
00:06:59.045 --> 00:07:03.841
it will download the script
in parallel with the rest and

110
00:07:03.841 --> 00:07:09.680
it will wait for the HTML to end
parsing to execute your JavaScript.

111
00:07:09.680 --> 00:07:10.940
That's defer.

112
00:07:10.940 --> 00:07:12.410
And then you have also async.

113
00:07:13.530 --> 00:07:18.809
That async will download in parallel, but
it will try to execute it immediately,

114
00:07:18.809 --> 00:07:22.340
as soon as possible,
pausing the parsing for a while.

115
00:07:24.210 --> 00:07:27.168
If you don't know which one to use,

116
00:07:27.168 --> 00:07:32.010
you should use defer by default and
let async only for one.

117
00:07:33.100 --> 00:07:37.276
It's a very specific case such as
analytics and it should be really,

118
00:07:37.276 --> 00:07:42.670
really short because you're still
harming performance of your parsing.

119
00:07:42.670 --> 00:07:44.797
So in our example,
we can go to the script,

120
00:07:44.797 --> 00:07:47.870
we don't need to move the script
to the bottom of the body.

121
00:07:47.870 --> 00:07:51.150
That was an old trick, no need to do that.

122
00:07:51.150 --> 00:07:53.370
You just need to add the defer attribute.

123
00:07:53.370 --> 00:07:55.140
It's a Boolean attribute.

124
00:07:55.140 --> 00:07:56.060
And that's all.

125
00:07:56.060 --> 00:08:01.040
So now that JavaScript code is
not going to block the parsing.

126
00:08:02.750 --> 00:08:07.529
Have in mind,
your JavaScript code won't be

127
00:08:07.529 --> 00:08:11.690
executed until the body ends parsing.

128
00:08:12.980 --> 00:08:15.333
Okay, so it will take more
time to execute that code.

129
00:08:17.818 --> 00:08:20.720
By the way we are still on basics.

130
00:08:20.720 --> 00:08:27.865
These are basics of
optimizing performance.

131
00:08:27.865 --> 00:08:30.962
Compress and Obfuscate JavaScript and CSS.

132
00:08:30.962 --> 00:08:33.310
This is still valid on HTTP2.

133
00:08:33.310 --> 00:08:36.604
Compress is going through
a compression tool and

134
00:08:36.604 --> 00:08:39.183
obfuscating the JavaScript and CSS.

135
00:08:39.183 --> 00:08:42.466
So it has been proven that if you do that,

136
00:08:42.466 --> 00:08:47.888
you may still improve the file size and
transfer by around 10%.

137
00:08:47.888 --> 00:08:49.052
It's not mandatory.

138
00:08:49.052 --> 00:08:54.612
I mean, it's not one of the things that
will change your life in performance,

139
00:08:54.612 --> 00:08:56.812
but every small thing counts.

140
00:08:56.812 --> 00:09:02.135
I remember a joke from a web
performance engineer saying

141
00:09:02.135 --> 00:09:07.118
that we as web performance
engineers we are counting

142
00:09:07.118 --> 00:09:12.454
milliseconds as top models or
counting grams, right?

143
00:09:12.454 --> 00:09:14.989
Like saying that we are counting
milliseconds and for

144
00:09:14.989 --> 00:09:17.940
us milliseconds are really
really important, okay?

145
00:09:17.940 --> 00:09:20.700
Release the main thread
as soon as possible.

146
00:09:21.820 --> 00:09:23.100
What's the main thread?

147
00:09:23.100 --> 00:09:25.720
The only thread where you're
executing code by default.

148
00:09:26.750 --> 00:09:31.033
So you shouldn't start executing code,
actually,

149
00:09:31.033 --> 00:09:36.870
you shouldn't take more than
15 milliseconds of the thread.

150
00:09:36.870 --> 00:09:39.630
Actually, that's known as a long task.

151
00:09:39.630 --> 00:09:42.794
If you have something, some JavaScript
code that is taking more than 15

152
00:09:42.794 --> 00:09:45.050
milliseconds and
of course that depends on the CPU.

153
00:09:46.060 --> 00:09:48.360
But if it's taking more
than 15 milliseconds,

154
00:09:48.360 --> 00:09:50.170
it's converting into a long task.

155
00:09:50.170 --> 00:09:53.880
And that long task is probably pushing
the rendering of the next frames.

156
00:09:55.130 --> 00:10:02.590
So you have kind of clunky user
interface if that happens.

157
00:10:02.590 --> 00:10:04.780
Embrace responsive images.

158
00:10:04.780 --> 00:10:09.143
Responsive images means that
you are providing to the user

159
00:10:09.143 --> 00:10:11.930
the image that it needs.

160
00:10:11.930 --> 00:10:16.464
Not just a large image that
then with CSS resize, or

161
00:10:16.464 --> 00:10:21.660
things like that, and
we will get into that later.

162
00:10:21.660 --> 00:10:27.250
Embrace SVG, for icons, for logos,
every time it's a vector-based image.

163
00:10:27.250 --> 00:10:30.330
It will be much better to send SVG.

164
00:10:30.330 --> 00:10:36.938
On 98% of the situation there are some
cases, and remember, don't trust me.

165
00:10:36.938 --> 00:10:38.535
Try it.

166
00:10:38.535 --> 00:10:41.047
Test that.

167
00:10:41.047 --> 00:10:42.110
Make two versions.

168
00:10:42.110 --> 00:10:43.380
Compare the versions.

169
00:10:43.380 --> 00:10:45.030
See the waterfall charts.

170
00:10:45.030 --> 00:10:50.960
See how the the web vitals are doing
on each case and then make a decision.

171
00:10:52.850 --> 00:10:56.430
Compress images define placeholder size.

172
00:10:56.430 --> 00:10:59.562
Placeholder size is use CSS or
HTML to define the width and

173
00:10:59.562 --> 00:11:02.390
the height of the image placeholder.

174
00:11:02.390 --> 00:11:03.648
If you don't do that,

175
00:11:03.648 --> 00:11:07.700
and I think that's one of
the problems we have in our website.

176
00:11:07.700 --> 00:11:10.250
we will have content layer shift.

177
00:11:10.250 --> 00:11:14.465
Because the browser will not know
the size of the image before actually

178
00:11:14.465 --> 00:11:15.970
downloading the image.

179
00:11:15.970 --> 00:11:18.105
So it needs to download the image,

180
00:11:18.105 --> 00:11:23.300
decode the image to actually know,
that image is 100 by 50.

181
00:11:23.300 --> 00:11:26.600
And then it needs to lay out
the rest of the elements around.

182
00:11:27.760 --> 00:11:29.030
Okay, make sense?

183
00:11:29.030 --> 00:11:34.657
And compress images is using tools
that will compress your JPEG files,

184
00:11:34.657 --> 00:11:38.560
your PNG files to remove unnecessary data.

185
00:11:38.560 --> 00:11:41.550
Careful with web fonts.

186
00:11:41.550 --> 00:11:43.130
We are using web fonts.

187
00:11:43.130 --> 00:11:44.570
What's the problem with web fonts?

188
00:11:44.570 --> 00:11:46.100
Web fonts are really nice.

189
00:11:46.100 --> 00:11:49.025
They can be really nice in your screen,
but

190
00:11:49.025 --> 00:11:51.958
actually text by default is non blocking.

191
00:11:51.958 --> 00:11:57.073
When you have text in your HTML, your text
will appear unless you use web fonts.

192
00:11:57.073 --> 00:12:00.870
When you use web fonts, and
it depends how you're using web fonts.

193
00:12:00.870 --> 00:12:06.276
By default you are converting something
that is nonblocking into something that

194
00:12:06.276 --> 00:12:11.930
is blocking because now you won't see text
until the font is downloaded and parsed.

195
00:12:13.250 --> 00:12:16.630
There are ways to solve that problem or
to deal with that, okay?

196
00:12:16.630 --> 00:12:19.470
But for now let's say be careful.

197
00:12:19.470 --> 00:12:23.440
So those were just basic
ideas on web optimization.

198
00:12:23.440 --> 00:12:25.569
Do you have any questions on any of those?

