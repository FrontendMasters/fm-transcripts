WEBVTT

1
00:00:00.154 --> 00:00:02.530
Okay, so what else with images?

2
00:00:02.530 --> 00:00:05.230
We now have lazy load.

3
00:00:05.230 --> 00:00:11.710
So with lazy load, we can apply
loading="lazy" to some images.

4
00:00:11.710 --> 00:00:13.170
What's the idea?

5
00:00:13.170 --> 00:00:16.926
The idea is to lazy load images
that are not in the viewport, so

6
00:00:16.926 --> 00:00:20.840
are not currently visible,
they're not in the above default.

7
00:00:20.840 --> 00:00:25.694
When you start scrolling and those images
are becoming to be in the viewport,

8
00:00:25.694 --> 00:00:30.472
not exactly, it's not waiting for
them to be in the viewport, it's when it

9
00:00:30.472 --> 00:00:36.190
feels like you will see more images,
it then goes and loads those images there.

10
00:00:36.190 --> 00:00:40.149
This has pros and cons,
because yeah, when you scroll,

11
00:00:40.149 --> 00:00:44.786
you may see some white spaces,
because the image is not there yet.

12
00:00:44.786 --> 00:00:50.550
But also what it's doing is clearing
up the bandwidth for the initial load.

13
00:00:51.640 --> 00:00:55.301
So we're not downloading everything.

14
00:00:55.301 --> 00:00:59.334
So, for example, in our case, we do have,

15
00:00:59.334 --> 00:01:04.468
let me close this,
images that typically can be there.

16
00:01:04.468 --> 00:01:09.990
Before HTML support in this, we were
typically using JavaScript libraries,

17
00:01:09.990 --> 00:01:14.845
some external dependencies that were
looking at the scroll event and

18
00:01:14.845 --> 00:01:19.627
verifying the position of images and
loading these with lazy load.

19
00:01:19.627 --> 00:01:22.550
Well, now it's pretty simple,
it's just loading=lazy.

20
00:01:22.550 --> 00:01:28.780
So we can go to our code, script.js,
and add to the images loading="lazy".

21
00:01:28.780 --> 00:01:33.840
So if the image is in the viewport when
the page loads, it won't change a thing.

22
00:01:33.840 --> 00:01:40.380
If it's below, it won't download the image
until it's close to appear on the screen.

23
00:01:41.820 --> 00:01:46.651
Which again, well, probably,
not everyone is scrolling your websites,

24
00:01:46.651 --> 00:01:51.190
it depends on the website, but
sometimes it's even less than 20%.

25
00:01:51.190 --> 00:01:56.780
And why are you downloading resources
that 80% of your user won't see?

26
00:01:56.780 --> 00:02:01.724
Well, that will also leave your
server a little bit more space

27
00:02:01.724 --> 00:02:04.685
to do other stuff, so it helps a lot.

28
00:02:04.685 --> 00:02:07.954
Should we use loading="lazy"
with everything?

29
00:02:07.954 --> 00:02:08.761
No, not really.

30
00:02:08.761 --> 00:02:12.243
Definitely not for
LCP images, definitely not.

31
00:02:12.243 --> 00:02:17.366
So for our LCP image that
now is embedded in the HTML,

32
00:02:17.366 --> 00:02:22.029
talking about this one,
don't use lazy load.

33
00:02:22.029 --> 00:02:26.369
Because a lazy load also change
your priority to low, and no,

34
00:02:26.369 --> 00:02:29.465
we want high priority, okay, on that one.

35
00:02:29.465 --> 00:02:32.702
Remember, don't mess with your LCP image.

36
00:02:35.791 --> 00:02:39.708
Also something to play with,

37
00:02:39.708 --> 00:02:43.629
it's async image decoding.

38
00:02:43.629 --> 00:02:47.794
So this is something that we
don't have enough research yet

39
00:02:47.794 --> 00:02:53.123
to have a final conclusion on when it's
a good idea to change that or not, but

40
00:02:53.123 --> 00:02:58.649
decoding the image is actually a process
that is being done in the main thread.

41
00:02:58.649 --> 00:03:03.260
It's not the biggest of
the deals in page loading, okay?

42
00:03:03.260 --> 00:03:07.013
This is taking the bytes of a JPEG and
actually getting a bitmap on the screen,

43
00:03:07.013 --> 00:03:09.420
that's decoding the image.

44
00:03:09.420 --> 00:03:11.680
You can actually say sync or async.

45
00:03:11.680 --> 00:03:17.174
When the image is really important,
you want sync, because,

46
00:03:17.174 --> 00:03:24.234
okay, you just stop everything and go and
decode that image as soon as possible.

47
00:03:24.234 --> 00:03:28.563
I want you to do that when you have time,
no, no, no, now.

48
00:03:28.563 --> 00:03:33.130
So decoding sync, we have a candidate for

49
00:03:33.130 --> 00:03:36.658
decoding sync, our LCP image.

50
00:03:36.658 --> 00:03:38.096
Does it make sense?

51
00:03:38.096 --> 00:03:43.618
Decoding="sync", because this is the most
important image for our web vitals.

52
00:03:43.618 --> 00:03:47.904
And remember, it's not because of the sake
of performance, or the sake of having good

53
00:03:47.904 --> 00:03:51.428
web vitals, it's because that will
improve user's perception, and

54
00:03:51.428 --> 00:03:55.610
that will increase business opportunities
and conversion for our websites.

55
00:03:55.610 --> 00:03:57.610
That's why we're doing this, okay?

56
00:03:59.430 --> 00:04:02.501
So web fonts,
someone asked about web fonts here,

57
00:04:02.501 --> 00:04:04.510
I have more and more info on that.

58
00:04:05.880 --> 00:04:09.303
We try avoid FOUT, Flash of Unstyled Text.

59
00:04:09.303 --> 00:04:12.635
Remember I mentioned that text
by default is non-blocking, and

60
00:04:12.635 --> 00:04:15.797
when we add web fonts,
we are converting that into blocking.

61
00:04:15.797 --> 00:04:20.759
Well, something that we can do is
to use font-display optional or

62
00:04:20.759 --> 00:04:22.449
font-display swap.

63
00:04:22.449 --> 00:04:27.300
And in this case, every browser might
change the implementation of this,

64
00:04:27.300 --> 00:04:30.539
but we are saying, hey,
let's start with swap.

65
00:04:30.539 --> 00:04:35.185
If you say font-display swap,
the browser will first, it will wait.

66
00:04:35.185 --> 00:04:36.954
It will start downloading the font.

67
00:04:36.954 --> 00:04:39.491
You have a title with a nice font.

68
00:04:39.491 --> 00:04:44.752
It will download the font, but
it will wait 200 milliseconds around that.

69
00:04:44.752 --> 00:04:49.916
If within 200 milliseconds it
cannot get the web font yet,

70
00:04:49.916 --> 00:04:54.400
it will render the text with
the next font in the list.

71
00:04:55.420 --> 00:04:59.944
Font family has
a comma-separated list of fonts.

72
00:04:59.944 --> 00:05:03.311
And when the font appears,
it will swap the font.

73
00:05:03.311 --> 00:05:05.720
So you will see kind of a flash.

74
00:05:05.720 --> 00:05:10.185
I mean, it's Times New Roman and
then it's a fancy font.

75
00:05:10.185 --> 00:05:16.041
Optional, it says, you know what,
if you can't load the font,

76
00:05:16.041 --> 00:05:19.665
it's okay, go ahead with the next one.

77
00:05:19.665 --> 00:05:22.867
In this case, typically the browsers
are waiting a little more.

78
00:05:22.867 --> 00:05:25.020
It can wait 100 milliseconds.

79
00:05:26.180 --> 00:05:30.411
If the web font is not ready, at that
point, they say, okay, we give up, let's

80
00:05:30.411 --> 00:05:35.160
move to the next font, and it will render
the text immediately with the next font.

81
00:05:35.160 --> 00:05:39.235
You won't see a flash and
you won't see a text for

82
00:05:39.235 --> 00:05:42.525
some milliseconds, but not forever.

83
00:05:42.525 --> 00:05:44.559
Make sense?

84
00:05:44.559 --> 00:05:46.323
Let's go to our example.

85
00:05:46.323 --> 00:05:49.954
In the case of web font, today, well,

86
00:05:49.954 --> 00:05:54.830
I think this is the one
I pasted from Google.

87
00:05:54.830 --> 00:05:59.249
You can add that property in the URL,
such as in this case, display=swap.

88
00:06:00.270 --> 00:06:03.980
In this case, we are asking
Google to add font display swap.

89
00:06:03.980 --> 00:06:09.062
But if you don't want swap and you want
optional, you can say optional here.

90
00:06:09.062 --> 00:06:12.904
And in our case,
it will use the next font in the list.

91
00:06:12.904 --> 00:06:16.097
So if Inter is not within one second,

92
00:06:16.097 --> 00:06:21.041
it will go to Sans Serif, or
I can have Arial, whatever.

93
00:06:22.932 --> 00:06:24.080
Make sense?

94
00:06:24.080 --> 00:06:27.329
With that, you will avoid
that flash of unstyled text.

95
00:06:27.329 --> 00:06:30.169
Sometimes you get into your website,
you see buttons,

96
00:06:30.169 --> 00:06:31.927
you see a logo, and nothing else.

97
00:06:31.927 --> 00:06:34.540
You see, well, why we have whites around?

98
00:06:34.540 --> 00:06:37.060
Because the font is still loading.

99
00:06:37.060 --> 00:06:40.617
The text is there, the browser
is ready to render the text, but

100
00:06:40.617 --> 00:06:42.171
it doesn't have the font.

101
00:06:42.171 --> 00:06:45.180
There are more things to do about
fonts than we have in API, so

102
00:06:45.180 --> 00:06:47.131
you can check if the font is installed.

103
00:06:47.131 --> 00:06:48.286
If it's installed,

104
00:06:48.286 --> 00:06:52.084
you can use the installed version
of the font instead of downloading.

105
00:06:52.084 --> 00:06:55.570
So if you wanna get more into web fonts,
there are much more to read about that.

