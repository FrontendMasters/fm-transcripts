WEBVTT

1
00:00:00.210 --> 00:00:02.950
Request Idle Callback is the one
that I mentioned before.

2
00:00:02.950 --> 00:00:06.103
It's known as cooperative
scheduling of background tasks.

3
00:00:06.103 --> 00:00:08.813
And when I say background tasks,
a lot of people say, that's good, but

4
00:00:08.813 --> 00:00:10.373
that's not what you're thinking, okay?

5
00:00:10.373 --> 00:00:14.866
So it's just to execute low-priority
code before each frame,

6
00:00:14.866 --> 00:00:16.620
if there is enough time.

7
00:00:18.700 --> 00:00:22.680
Remember, the idea here is to
keep the frame rate consistent.

8
00:00:23.780 --> 00:00:28.630
And it sends an argument where we
can query how much time is left.

9
00:00:28.630 --> 00:00:32.417
So it's like, it says there
is only ten milliseconds, and

10
00:00:32.417 --> 00:00:34.860
you say, I can't do what I need.

11
00:00:34.860 --> 00:00:36.550
So, okay, let's try the next one.

12
00:00:37.870 --> 00:00:38.550
Okay, makes sense?

13
00:00:40.060 --> 00:00:42.290
So it's requestIdleCallback.

14
00:00:42.290 --> 00:00:46.009
You receive that argument and
then you check how much time is left.

15
00:00:47.030 --> 00:00:48.060
That's all.

16
00:00:48.060 --> 00:00:50.700
So instead of setTimeout,
you use this one.

17
00:00:52.490 --> 00:00:53.870
It's requestIdleCallback.

18
00:00:55.150 --> 00:00:56.390
What if there is no idle time?

19
00:00:57.690 --> 00:01:02.070
The browser will retry on each frame,
and you can specify a timeout.

20
00:01:02.070 --> 00:01:03.450
It's like, you know what?

21
00:01:03.450 --> 00:01:07.917
I can wait, I'm patient,
but after three seconds,

22
00:01:07.917 --> 00:01:12.297
okay, give me some time
even if it's not idle time.

23
00:01:14.168 --> 00:01:15.754
Okay, makes sense?

24
00:01:15.754 --> 00:01:17.395
It's just the timeout property.

25
00:01:20.654 --> 00:01:22.690
So you can see the APIs are pretty simple.

26
00:01:22.690 --> 00:01:27.670
You just need to understand when to use
them and how you need them, that's all.

27
00:01:29.590 --> 00:01:31.730
Efficient script yielding.

28
00:01:31.730 --> 00:01:36.260
In this case, it's a way to yield control
to the browser before running our code.

29
00:01:36.260 --> 00:01:39.640
It's the new version of setTimeout zero.

30
00:01:39.640 --> 00:01:40.970
I'm not sure if you have seen that before.

31
00:01:42.080 --> 00:01:45.956
So I've used that in a lot of web apps,

32
00:01:45.956 --> 00:01:52.390
like decade ago when doing apps for
smart TVs and smartphones.

33
00:01:52.390 --> 00:01:55.312
The idea is that you say, you know what?

34
00:01:55.312 --> 00:01:57.260
I need to execute this code, okay?

35
00:01:57.260 --> 00:02:04.430
I but first browser, go and
do your stuff and then go back to me.

36
00:02:05.740 --> 00:02:06.782
Why do you wanna do that?

37
00:02:06.782 --> 00:02:11.086
When you're doing Vanilla JS and
you're working with the DOM, and

38
00:02:11.086 --> 00:02:14.859
you make a change in the DOM,
until you release the thread,

39
00:02:14.859 --> 00:02:17.600
that change is not actually on the screen.

40
00:02:17.600 --> 00:02:18.910
Does that make sense?

41
00:02:18.910 --> 00:02:24.314
So maybe you change the DOM and you want
the browser to update the DOM immediately,

42
00:02:24.314 --> 00:02:27.460
but you still need to
continue executing code.

43
00:02:27.460 --> 00:02:31.060
So then you yield control to the browser,
and then you go back.

44
00:02:31.060 --> 00:02:31.950
It's called setImmediate.

45
00:02:33.630 --> 00:02:38.467
It is not a big deal, but
setImmediate and you pass a code, and

46
00:02:38.467 --> 00:02:41.570
so then the browser will do its stuff.

47
00:02:41.570 --> 00:02:42.750
And after that,

48
00:02:42.750 --> 00:02:47.818
immediately it will execute the function
that you pass as an argument.

