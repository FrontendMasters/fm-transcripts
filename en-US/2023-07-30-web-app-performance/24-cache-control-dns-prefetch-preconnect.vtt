WEBVTT

1
00:00:00.180 --> 00:00:03.254
But more things that we can do.

2
00:00:03.254 --> 00:00:08.367
Do you remember from two hours ago

3
00:00:08.367 --> 00:00:14.659
that we were mentioning
the conditional request.

4
00:00:14.659 --> 00:00:21.077
That when you have an asset,
a resource in the cache, but it's expired,

5
00:00:21.077 --> 00:00:27.910
so then the browser needs to make
a conditional request to the server.

6
00:00:27.910 --> 00:00:31.962
Well, on some assets,
we know that that will never happen.

7
00:00:31.962 --> 00:00:37.210
For example, when you're using React or
Angular or Vue CLI, all

8
00:00:37.210 --> 00:00:43.231
the assets that you get, the JavaScript,
the CSS, they have a hash name.

9
00:00:43.231 --> 00:00:45.143
So the name is hashed.

10
00:00:45.143 --> 00:00:51.030
We have something like app05d.js.

11
00:00:51.030 --> 00:00:54.653
So we know that those
files will never change.

12
00:00:54.653 --> 00:00:59.817
So a conditional request on
those assets will always return,

13
00:00:59.817 --> 00:01:06.685
go ahead, the one you have is still valid
because those assets will never expire.

14
00:01:06.685 --> 00:01:07.799
Does it make sense?

15
00:01:07.799 --> 00:01:12.849
When you know that the asset
will never expire,

16
00:01:12.849 --> 00:01:17.025
we can use cache-control immutable.

17
00:01:17.025 --> 00:01:20.655
It's an HTTP header that
you set on those assets.

18
00:01:20.655 --> 00:01:24.917
And for that, we are saying to
the browser, you know what, browser,

19
00:01:24.917 --> 00:01:26.807
this asset will never expire.

20
00:01:26.807 --> 00:01:31.122
So you don't need to make
a conditional request, ever.

21
00:01:33.124 --> 00:01:33.960
Okay, makes sense?

22
00:01:35.560 --> 00:01:40.489
Another cache-control that we have
today is a new pattern that for

23
00:01:40.489 --> 00:01:44.274
those of you with experience
with service worker,

24
00:01:44.274 --> 00:01:49.923
you have been already implementing it
that you need a file, you need a logo.

25
00:01:49.923 --> 00:01:53.179
Okay, if it's in the cache,
here, you have the logo.

26
00:01:53.179 --> 00:01:56.603
So I'm serving the logo from the cache,
okay, makes sense?

27
00:01:56.603 --> 00:01:58.549
For that, that's simple.

28
00:01:58.549 --> 00:02:04.022
But also in the background as
a completely separate thread and process,

29
00:02:04.022 --> 00:02:10.430
I will go to the server and download
the logo again and save it in the cache.

30
00:02:10.430 --> 00:02:14.923
I'm not updating it for you, for
this navigation, it's for the next one.

31
00:02:17.170 --> 00:02:18.544
Does it make sense?

32
00:02:18.544 --> 00:02:23.224
That has a name,
it's called stale-while-revalidate.

33
00:02:23.224 --> 00:02:28.502
And now it's also available on some
browsers directly for the browser's cache.

34
00:02:28.502 --> 00:02:32.220
So you can express that for that image,

35
00:02:32.220 --> 00:02:36.503
you wanna use state-while-revalidate and

36
00:02:36.503 --> 00:02:43.049
with the time that you want that for,
can be minutes, hours, days.

37
00:02:43.049 --> 00:02:45.876
So you want that behavior.

38
00:02:45.876 --> 00:02:48.004
You always serve from the cache,

39
00:02:48.004 --> 00:02:52.806
but also you are updating that in the
background for the next time I need it.

40
00:02:52.806 --> 00:02:57.834
It's just a cache policy

41
00:02:57.834 --> 00:03:03.107
over the browser, okay?

42
00:03:03.107 --> 00:03:08.835
Now, I'm going to mention something
that was asked on the chat,

43
00:03:08.835 --> 00:03:11.030
warming up the engines.

44
00:03:12.890 --> 00:03:16.405
Sometimes it's a good idea to
help the browser to start as

45
00:03:16.405 --> 00:03:18.318
soon as possible everything.

46
00:03:18.318 --> 00:03:21.828
But as we mentioned before, if everything
is important, nothing is important.

47
00:03:21.828 --> 00:03:24.419
So I don't wanna preload everything.

48
00:03:24.419 --> 00:03:31.591
But maybe, maybe I can do some things
that can warm up some engines.

49
00:03:31.591 --> 00:03:38.803
Let's look into our app, into Frontend
Museum, and let me show you something.

50
00:03:38.803 --> 00:03:43.330
Let me do a clean reload.

51
00:03:43.330 --> 00:03:46.018
So I'm going to disable cache.

52
00:03:46.018 --> 00:03:50.095
That means that every time you reload,
it's a start from a scratch.

53
00:03:52.925 --> 00:03:57.569
Let me see if we can find this,
what I want to

54
00:03:57.569 --> 00:04:02.472
show you is that we do
have fonts.googleapis

55
00:04:02.472 --> 00:04:06.858
that is coming from a different domain,

56
00:04:06.858 --> 00:04:11.220
fonts.googleapis.com, right?

57
00:04:11.220 --> 00:04:16.068
So I have my website is localhost,
that's one host, and

58
00:04:16.068 --> 00:04:19.605
Google font is coming from another file.

59
00:04:19.605 --> 00:04:23.908
So another server, and
the same happens if you're using CDNs or

60
00:04:23.908 --> 00:04:30.500
if you're using Google Analytics, or you
are including a chat from a chat provider.

61
00:04:30.500 --> 00:04:36.939
So you're including scripts, files,
resources from third-party domains.

62
00:04:36.939 --> 00:04:40.694
But you don't wanna preload
all of them because, again,

63
00:04:40.694 --> 00:04:42.770
we cannot preload everything.

64
00:04:43.780 --> 00:04:48.795
But something that we can do is
we can warm up the engine to

65
00:04:48.795 --> 00:04:54.150
help with the DNS query and
with the TCP and TLS connection.

66
00:04:56.050 --> 00:05:01.251
So, okay, don't download the file, but
at least go and grab the DNS query,

67
00:05:01.251 --> 00:05:06.310
the IP address from that other domain
before you know that you will need it.

68
00:05:07.850 --> 00:05:11.543
Or go and open the TCP connection and

69
00:05:11.543 --> 00:05:17.094
start the SSL private key,
public key negotiation.

70
00:05:17.094 --> 00:05:22.270
And for that, we can use dns-prefetch
that it looks similar to preload,

71
00:05:22.270 --> 00:05:27.626
but in this case, it's not preloading
a file, it's just getting the DNS.

72
00:05:27.626 --> 00:05:32.509
We are letting the browser know that
it will need to know the IP address

73
00:05:32.509 --> 00:05:33.696
of that domain.

74
00:05:36.124 --> 00:05:40.749
Also, we can preconnect, in this case,
we're asking the browser, hey,

75
00:05:40.749 --> 00:05:43.990
why don't you go and
start opening the connection?

76
00:05:43.990 --> 00:05:46.250
Because I know that you will
need something from there.

77
00:05:48.170 --> 00:05:50.864
The browser doesn't know
what to download yet,

78
00:05:50.864 --> 00:05:54.949
what to request over that connection,
but it will start making the call.

79
00:05:54.949 --> 00:05:56.810
Does it make sense?

80
00:05:56.810 --> 00:06:01.907
So that's why you can start
doing that with a link

81
00:06:01.907 --> 00:06:09.378
element also as an HTTP response, and
we can use this with early hints.

82
00:06:09.378 --> 00:06:10.657
Remember early hints?

83
00:06:10.657 --> 00:06:17.964
While the server is working, we already
sent some hints earlier to the browser.

84
00:06:17.964 --> 00:06:21.250
Well, we can send, hey,
open a connection to that.

85
00:06:21.250 --> 00:06:27.410
Start the DNS with that while I'm working
on the server for giving you the HTML.

86
00:06:27.410 --> 00:06:32.587
So in our case, in our project, something
that we can do is with the only external

87
00:06:32.587 --> 00:06:37.990
file that we have is fonts.googleapis,
also fonts.gstatic.com.

88
00:06:37.990 --> 00:06:41.681
So we can add the link rel, and

89
00:06:41.681 --> 00:06:46.721
it can be dns-prefetch or preconnect.

90
00:06:46.721 --> 00:06:49.966
It's up to you, what do you wanna do?

91
00:06:49.966 --> 00:06:53.079
And you just preconnect to that domain.

92
00:06:55.121 --> 00:07:02.317
In fact, in a modern Google Fonts,
you will get that by default.

93
00:07:02.317 --> 00:07:05.652
Two, three years ago, it wasn't available.

94
00:07:05.652 --> 00:07:08.685
Google Fonts, I'm using the font Inter.

95
00:07:08.685 --> 00:07:10.345
So you go to Google Fonts.

96
00:07:12.676 --> 00:07:18.040
You search for that font Inter, this one.

97
00:07:18.040 --> 00:07:20.529
Here it says how to copy and
paste the code.

98
00:07:20.529 --> 00:07:23.027
And you will see, let me copy that now.

99
00:07:25.779 --> 00:07:30.215
If you paste the one you have,
it's already preconnecting to both domain.

100
00:07:30.215 --> 00:07:32.672
Can you see that, those two preconnects?

101
00:07:32.672 --> 00:07:35.297
But if you were copying
the code a few years ago and

102
00:07:35.297 --> 00:07:39.690
you still have your website up and
running, you don't have those preconnects.

103
00:07:39.690 --> 00:07:43.468
So now Google is suggesting me to
add the preconnect to both domains.

104
00:07:46.369 --> 00:07:48.320
Does it make sense?

105
00:07:48.320 --> 00:07:50.000
Not preload, preconnect.

106
00:07:50.000 --> 00:07:54.052
&gt;&gt; So how does this differ from preload?

107
00:07:54.052 --> 00:07:57.970
&gt;&gt; That preload will also go and
fetch the file.

108
00:07:57.970 --> 00:08:02.090
&gt;&gt; So why would you not just do
preload instead of preconnect?

109
00:08:02.090 --> 00:08:08.190
&gt;&gt; You can, the problem is that sometimes
you have a lot of third-party domains.

110
00:08:08.190 --> 00:08:12.165
And maybe some of those domains are not so
important for

111
00:08:12.165 --> 00:08:14.594
competing on the preload stuff.

112
00:08:14.594 --> 00:08:19.592
Because preconnecting and DNS prefetching
is not competing with preload because

113
00:08:19.592 --> 00:08:24.380
it's not competing with the priority
list or with the discovery list.

114
00:08:24.380 --> 00:08:25.846
It's just something on the network layer.

115
00:08:25.846 --> 00:08:30.583
It's opening some things, and so
you can do that in parallel without

116
00:08:30.583 --> 00:08:35.905
affecting the discovery queue and
the priorities that you are downloading.

117
00:08:35.905 --> 00:08:36.436
Does it make sense?

118
00:08:36.436 --> 00:08:38.690
So it's like a different process.

119
00:08:38.690 --> 00:08:40.379
&gt;&gt; Yeah, it's sort of like-
&gt;&gt; But

120
00:08:40.379 --> 00:08:45.243
if you need something to be preloaded,
then you don't need to preconnect or

121
00:08:45.243 --> 00:08:49.520
DNS prefetch, because preload
will do all the stuff as well.

122
00:08:49.520 --> 00:08:53.566
&gt;&gt; Do it anyway, but
if you preconnect to the URL, and

123
00:08:53.566 --> 00:09:00.350
then you preload one image, the preload
is fine, but then it might mean that.

124
00:09:00.350 --> 00:09:01.426
&gt;&gt; In fact, maybe you're right.

125
00:09:01.426 --> 00:09:04.219
In our case, I shouldn't be doing this for

126
00:09:04.219 --> 00:09:09.390
gstatic.com because we are already
preloading a resource from it.

127
00:09:09.390 --> 00:09:12.840
So I guess I should keep fonts.googleapis.

128
00:09:12.840 --> 00:09:17.196
&gt;&gt; But if you did,
if you were loading from gstatic.com,

129
00:09:17.196 --> 00:09:22.110
something else that you didn't preload,
that would also load

130
00:09:22.110 --> 00:09:24.465
a little quicker because-
&gt;&gt; Yeah,

131
00:09:24.465 --> 00:09:25.741
because the connection is already there.

132
00:09:25.741 --> 00:09:29.687
And the connection is not
lost immediately after one,

133
00:09:29.687 --> 00:09:34.921
because this actually would be two,
the connection keeps connected for

134
00:09:34.921 --> 00:09:38.978
a while to see if you're
still downloading more stuff.

135
00:09:38.978 --> 00:09:42.422
So it will wait one, two, three seconds
before actually cutting the connection.

136
00:09:42.422 --> 00:09:44.659
&gt;&gt; Yeah, you sort of have
to know what you're doing.

137
00:09:44.659 --> 00:09:45.201
&gt;&gt; Yeah.

138
00:09:45.201 --> 00:09:45.900
&gt;&gt; While using-
&gt;&gt; But

139
00:09:45.900 --> 00:09:49.996
if you don't know what you're doing,
at least you know where to look for

140
00:09:49.996 --> 00:09:53.904
it, and that's the browser,
the DevTools, the waterfall chart.

141
00:09:53.904 --> 00:09:57.280
You can use webpage test
to analyze what's going on.

142
00:09:57.280 --> 00:10:00.125
And then you know, maybe this is because,

143
00:10:00.125 --> 00:10:02.980
the thing is that
sometimes you don't assume.

144
00:10:02.980 --> 00:10:07.676
Sometimes it's better to go test this,
see it on a waterfall chart and

145
00:10:07.676 --> 00:10:09.194
see what's going on.

146
00:10:09.194 --> 00:10:12.760
&gt;&gt; Yeah, cuz weird things could be
going on specific to your site.

147
00:10:12.760 --> 00:10:14.050
&gt;&gt; Yeah, exactly.

148
00:10:14.050 --> 00:10:18.610
&gt;&gt; In this particular example, do you
need to do a preconnect to a domain when

149
00:10:18.610 --> 00:10:22.180
the next line is accessing
the resource on that domain?

150
00:10:22.180 --> 00:10:26.220
&gt;&gt; No, in that case, as I said, for
this particular example, because I already

151
00:10:26.220 --> 00:10:29.910
have, well, let's say if the next
line is preload, the answer is no.

152
00:10:29.910 --> 00:10:34.780
If the next line is this one,
the stylesheet, the answer is yes, why?

153
00:10:34.780 --> 00:10:38.940
Because having the link,
this has to do with discovery, right?

154
00:10:38.940 --> 00:10:43.693
So yeah, the browser will know
that it has that file, but

155
00:10:43.693 --> 00:10:48.368
that doesn't mean that it
will download that file now.

156
00:10:48.368 --> 00:10:53.456
Preconnect will say, hey,
open the connection now, because when

157
00:10:53.456 --> 00:10:59.280
the browser will download the file will
depend on the priority of that site.

158
00:10:59.280 --> 00:11:02.978
In fact, I think that the answer,
Google has an answer for

159
00:11:02.978 --> 00:11:05.483
you even without explaining you this.

160
00:11:05.483 --> 00:11:09.928
But they are giving you a suggestion of
adding the preconnect even if the next

161
00:11:09.928 --> 00:11:11.740
line is downloading the file.

162
00:11:12.750 --> 00:11:17.684
So Google is saying, yeah, you need
the preconnect because maybe the browser

163
00:11:17.684 --> 00:11:23.560
will download that CSS in 100 millisecond,
in 150 millisecond, not now.

164
00:11:23.560 --> 00:11:25.757
The browser will discover the file, but

165
00:11:25.757 --> 00:11:30.293
the browser is not downloading all the
files immediately after discovering them.

166
00:11:30.293 --> 00:11:31.466
It can wait.

167
00:11:31.466 --> 00:11:36.378
Preconnect will start that,
will warm up the engine immediately.

