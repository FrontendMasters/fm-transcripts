WEBVTT

1
00:00:00.140 --> 00:00:03.890
Now that we have that,
let's go back to the slides,

2
00:00:03.890 --> 00:00:08.980
and let's understand the browser,
how the browser works.

3
00:00:08.980 --> 00:00:11.903
I'm not going to get too deep here, but

4
00:00:11.903 --> 00:00:17.320
enough to understand where performance
solutions, or tips and hacks.

5
00:00:17.320 --> 00:00:20.410
So why we are going to do some things.

6
00:00:20.410 --> 00:00:23.320
So what happens when we browse the web?

7
00:00:23.320 --> 00:00:26.300
So we need to talk about
the network layer, quickly.

8
00:00:26.300 --> 00:00:29.975
We're not going to get too deep into
the fundamentals of networking, but

9
00:00:29.975 --> 00:00:32.827
at least, basic enough to
understand what's going on.

10
00:00:32.827 --> 00:00:36.726
The parsing part when
the browser is parsing the HTML,

11
00:00:36.726 --> 00:00:40.456
the resource discovery phase,
where in this case,

12
00:00:40.456 --> 00:00:45.799
the browser is discovering other assets,
other resources that are needed

13
00:00:45.799 --> 00:00:50.665
to render the page, JPEG files,
JavaScript files, style sheet.

14
00:00:50.665 --> 00:00:56.000
Then, the way that the browser
has to prioritize elements for

15
00:00:56.000 --> 00:01:01.960
it needs to download 10 assets,
which one should download first?

16
00:01:01.960 --> 00:01:04.054
Well, there is a process for that.

17
00:01:04.054 --> 00:01:09.013
And then, layout and paint and
we won't get too deep into layout and

18
00:01:09.013 --> 00:01:13.450
paint that has to do with how
the browser works with the GPU and

19
00:01:13.450 --> 00:01:16.501
measuring stuff, and things like that.

20
00:01:16.501 --> 00:01:18.948
I need to get out of the slides and

21
00:01:18.948 --> 00:01:25.000
make a quick text file we're going
to do this in a simple, easy way.

22
00:01:25.000 --> 00:01:31.890
So when you type www.frontendmasters.com,
what's going on?

23
00:01:31.890 --> 00:01:37.090
Let's say it's the first time, it's the
first time you're going to that website.

24
00:01:37.090 --> 00:01:43.240
The first step, and I'm talking about
the network layer, is a DNS query.

25
00:01:43.240 --> 00:01:47.106
Actually, your browser needs the IP
address of the web server for

26
00:01:47.106 --> 00:01:49.330
front-end master.

27
00:01:49.330 --> 00:01:54.210
That's using a TCP connection, so
you need to connect to your own DNS server

28
00:01:54.210 --> 00:01:57.040
that goes to check into
another DNS server.

29
00:01:57.040 --> 00:01:59.700
There is a process there,
I'm not going to get too deep here.

30
00:01:59.700 --> 00:02:05.445
But that DNS query might take,
without taking latency in consideration,

31
00:02:05.445 --> 00:02:08.100
might take 100 milliseconds.

32
00:02:10.330 --> 00:02:13.750
So in average, it can be more,
it can be less.

33
00:02:15.240 --> 00:02:20.129
So 100 milliseconds without latency,
so if you are in 3G,

34
00:02:20.129 --> 00:02:24.200
we need to have the latency,
remember the latency.

35
00:02:25.990 --> 00:02:31.750
So when we have the IP address,
we need to make a TCP connection.

36
00:02:31.750 --> 00:02:34.040
Actually, we're going to
start the HTTP connection.

37
00:02:34.040 --> 00:02:39.328
Okay, but it started the TCP connection
that I'm not sure if you have experience

38
00:02:39.328 --> 00:02:44.149
working with the network, but
there are at least, three messages that we

39
00:02:44.149 --> 00:02:49.640
need to send and receive from the client
to the server that goes, right?

40
00:02:49.640 --> 00:02:54.850
So that might take another 100,
120 milliseconds.

41
00:02:56.150 --> 00:03:02.031
We still didn't get any HTML,
actually within request yet,

42
00:03:02.031 --> 00:03:07.260
the HTML,
we are just opening the connections.

43
00:03:07.260 --> 00:03:12.390
And now, we are working with TLS,
what's TLS, SSL, HTTPS?

44
00:03:13.720 --> 00:03:17.120
So we know that today we
are all going to HTTPS, right?

45
00:03:17.120 --> 00:03:18.440
Do you know why?

46
00:03:18.440 --> 00:03:23.300
Why every website today should
be HTTPS and not HTTP anymore?

47
00:03:24.490 --> 00:03:25.960
&gt;&gt; It's encrypted by default.

48
00:03:25.960 --> 00:03:27.436
&gt;&gt; It's encrypted by default.

49
00:03:27.436 --> 00:03:28.548
&gt;&gt; Yeah.

50
00:03:28.548 --> 00:03:32.243
&gt;&gt; But it was encrypted by
default in the 90s as well, and

51
00:03:32.243 --> 00:03:35.082
we didn't push every website to be HTTPS.

52
00:03:35.082 --> 00:03:37.560
Is that because we didn't
care about security there?

53
00:03:38.600 --> 00:03:41.130
Then, so does it make sense?

54
00:03:41.130 --> 00:03:44.800
So the question is, yeah,
it's more secure, okay, cool.

55
00:03:44.800 --> 00:03:49.897
But the same thing happened in
the early 2000, even 10 years ago.

56
00:03:49.897 --> 00:03:54.817
Why is that we weren't actually pushing

57
00:03:54.817 --> 00:03:59.166
every website into HTTPS as today?

58
00:03:59.166 --> 00:04:01.460
Is today's security more important?

59
00:04:02.720 --> 00:04:06.300
You may say, yeah, but
we have more bad actors, maybe.

60
00:04:06.300 --> 00:04:09.097
But that's not actually, that's excuse,

61
00:04:09.097 --> 00:04:11.900
not the real reason of
why we're doing this.

62
00:04:13.260 --> 00:04:15.850
&gt;&gt; HTTPS allows for HTTP2?

63
00:04:17.420 --> 00:04:22.205
&gt;&gt; HTTPS allows for HTTP2, but
that's a consequence, not a cost, so

64
00:04:22.205 --> 00:04:24.280
the question is still there.

65
00:04:24.280 --> 00:04:25.440
So why HTTP two?

66
00:04:25.440 --> 00:04:27.447
In fact, let me tell you this, HTTP2,

67
00:04:27.447 --> 00:04:31.750
the second version of the HTTP
language that we will see in a minute.

68
00:04:31.750 --> 00:04:34.286
The spec doesn't require HTTPS, but

69
00:04:34.286 --> 00:04:38.576
all the implementation from
the browser's are required is up.

70
00:04:38.576 --> 00:04:43.424
So it's not really a requirement
from an spec point of view from

71
00:04:43.424 --> 00:04:45.445
a protocol point of view.

72
00:04:45.445 --> 00:04:49.020
So what's going on?

73
00:04:49.020 --> 00:04:54.562
So I was simplify this really quickly,
but let's take HTTP2 as an example,

74
00:04:54.562 --> 00:04:58.500
and this has to do with a lot
of research made by Google.

75
00:04:59.720 --> 00:05:07.928
Google realized that there are a lot of
actors in the current backbone of the web,

76
00:05:07.928 --> 00:05:12.897
that are not following
the HTTP protocol rules.

77
00:05:12.897 --> 00:05:17.350
Example, let's say we create today HTTP14,
okay?

78
00:05:18.730 --> 00:05:23.902
So HTTP14 means it's a TCP
request that in the header,

79
00:05:23.902 --> 00:05:26.825
somewhere, it says HTTP14.

80
00:05:26.825 --> 00:05:31.723
Well, the specs if l you're making
a proxy, a router, so you're making

81
00:05:31.723 --> 00:05:37.160
a device that receives a packet and
sends the packet somewhere else.

82
00:05:37.160 --> 00:05:42.557
When you receive the packet, if you wanna
open, let's say you wanna open that, and

83
00:05:42.557 --> 00:05:48.480
you see a protocol that you don't know,
the full is to just forward the packet.

84
00:05:48.480 --> 00:05:53.673
You are not responsible for making
a decision, but there are a lot of routers

85
00:05:53.673 --> 00:05:59.390
out there that says, no, actually be 14,
no, that's probably wrong.

86
00:05:59.390 --> 00:06:02.520
So let's discard the packet,
I'm simplifying this, but

87
00:06:02.520 --> 00:06:04.510
just to give you an idea.

88
00:06:04.510 --> 00:06:08.140
So with that in mind, we had a problem.

89
00:06:08.140 --> 00:06:13.100
To evolve the protocols,
we need to change those routers and

90
00:06:13.100 --> 00:06:17.660
we don't know who owns them,
where they are.

91
00:06:17.660 --> 00:06:22.538
They probably has written 15
years ago based on Google

92
00:06:22.538 --> 00:06:25.660
research on some countries.

93
00:06:25.660 --> 00:06:30.230
Let's say China, there are a good
amount of routers doing that.

94
00:06:31.520 --> 00:06:36.200
So we realized that to
improve the web's protocols,

95
00:06:36.200 --> 00:06:41.504
we need a way to bypass that
without changing those routers,

96
00:06:41.504 --> 00:06:46.496
and the way to do that is to
encapsulate those packets into

97
00:06:46.496 --> 00:06:51.800
something that the router cannot read,
and that's HTTPS.

98
00:06:52.800 --> 00:06:57.721
So HTTPS, because it's encrypted,
any proxy in the middle cannot actually

99
00:06:57.721 --> 00:07:03.450
open the package and see what's inside,
and they just forward, the packet.

100
00:07:03.450 --> 00:07:06.603
So that's the reason why we
are pushing this harder, or

101
00:07:06.603 --> 00:07:09.700
we have been pushing this
harder in the past six years.

102
00:07:10.900 --> 00:07:15.566
Not because of security, yeah,
we have a nice thing saying,

103
00:07:15.566 --> 00:07:19.620
hey, this is more secure,
but it was before as well.

104
00:07:21.110 --> 00:07:24.160
But that's why browsers today,
if you're in a website that is not secure,

105
00:07:24.160 --> 00:07:25.730
will give you a warning.

106
00:07:25.730 --> 00:07:29.900
Hey, this is a theta HTTP, we have
a problem, you don't send any form.

107
00:07:29.900 --> 00:07:32.292
Yeah, that's a security thing, but

108
00:07:32.292 --> 00:07:36.555
there is another problem behind,
and it was performance because we

109
00:07:36.555 --> 00:07:41.220
couldn't move the protocols further
if we left them as they were, okay?

110
00:07:41.220 --> 00:07:41.840
Does it make sense?

111
00:07:41.840 --> 00:07:45.560
So that's actually the reason
why we need HTTPS.

112
00:07:45.560 --> 00:07:49.810
And why not every website
10 years ago were HTTPS?

113
00:07:49.810 --> 00:07:50.560
You know one reason?

114
00:07:50.560 --> 00:07:53.340
There is one big reason of why.

115
00:07:53.340 --> 00:07:57.610
10 years ago,
only 5% of the websites were HTTPS.

116
00:07:58.950 --> 00:08:00.970
Changing protocols is hard?

117
00:08:00.970 --> 00:08:03.765
&gt;&gt; No, because you're not
actually changing protocol,

118
00:08:03.765 --> 00:08:06.330
you're just adding something
on your web server.

119
00:08:06.330 --> 00:08:07.550
What's that something?

120
00:08:07.550 --> 00:08:08.270
A certificate.

121
00:08:08.270 --> 00:08:09.130
&gt;&gt; Certificate.

122
00:08:09.130 --> 00:08:10.630
&gt;&gt; And that certificate was expensive.

123
00:08:12.210 --> 00:08:17.609
Originally, I remember in the 90s, my
first HTTPS certificate that I bought for

124
00:08:17.609 --> 00:08:21.710
a customer, it was if I remember
correctly $950 per year.

125
00:08:23.480 --> 00:08:27.820
So yeah, when I do that, yeah,
maybe 10 years ago, that was better.

126
00:08:27.820 --> 00:08:32.218
We had other companies
offering also certificates,

127
00:08:32.218 --> 00:08:39.750
maybe you can get one by $30 per year,
but still it's something you need to pay.

128
00:08:39.750 --> 00:08:44.170
But because that was a problem and
we all wanted to push HTTPS,

129
00:08:44.170 --> 00:08:49.270
that's why there was a new organization
that you probably know, it's

130
00:08:49.270 --> 00:08:55.305
called let's encrypt, it's a nonprofit
organization created by the browsers and

131
00:08:55.305 --> 00:09:00.940
other companies to push HTTPS,
those are the founders and sponsor chip.

132
00:09:00.940 --> 00:09:02.784
They wanna push HTTPS so

133
00:09:02.784 --> 00:09:08.700
they provide you with a free SSL
certificate that wasn't possible before.

134
00:09:09.750 --> 00:09:15.580
Now, that was a parenthesis to
understand why we need to move to HTTPS.

135
00:09:15.580 --> 00:09:18.940
Anyway, because we need to move to HTTPS,
let's go back here.

136
00:09:18.940 --> 00:09:26.131
We also need to make a process to
negotiate public keys and private keys.

137
00:09:26.131 --> 00:09:31.846
That might also take 150, and
it depends on your servers.

138
00:09:31.846 --> 00:09:39.240
So far, we haven't even request the file,
that's the next step, an HTTP request.

139
00:09:39.240 --> 00:09:44.090
That is to, hey, I'm the browser,
now we are securely connected.

140
00:09:44.090 --> 00:09:48.740
I have your IP address, I have a TCP
connection open with you, now I'm gonna

141
00:09:48.740 --> 00:09:53.480
request a document, like your default
document in the route the index html.

142
00:09:54.750 --> 00:09:56.990
So what's the problem with that?

143
00:09:56.990 --> 00:10:01.817
So far, we have spent without
taking latency in consideration,

144
00:10:01.817 --> 00:10:03.935
we haven't spent how much?

145
00:10:03.935 --> 00:10:07.926
350, almost 400 milliseconds.

146
00:10:07.926 --> 00:10:11.218
For our lashes contentful paint,

147
00:10:11.218 --> 00:10:17.006
we have a budget of 2.5 seconds,
so yeah, that's a lot,

148
00:10:17.006 --> 00:10:21.470
we're taking a lot from our budget, 10%.

149
00:10:21.470 --> 00:10:28.900
We have just wasted, invested 10% of
our budget just in the network layer.

150
00:10:30.260 --> 00:10:33.734
So now that you understand
that we have a budget,

151
00:10:33.734 --> 00:10:38.650
there is a limited budget as any budget,
how important is just 100

152
00:10:38.650 --> 00:10:44.100
milliseconds because sometimes,
you say well, 100 minute segments.

153
00:10:45.570 --> 00:10:49.701
Yeah, but now we are adding more
handy 150, 100 from here, from there,

154
00:10:49.701 --> 00:10:52.170
from there a way to reach our goal.

155
00:10:52.170 --> 00:10:57.522
The user should see the largest
contentful paint within 2.5 seconds,

156
00:10:57.522 --> 00:11:03.710
and this is without taking cellular
network latencies in consideration.

157
00:11:03.710 --> 00:11:07.010
If you are on a 4G network or
a 3G network,

158
00:11:07.010 --> 00:11:11.429
you may add 80 milliseconds
on each of those requests.

159
00:11:13.250 --> 00:11:14.260
Okay, makes sense?

160
00:11:14.260 --> 00:11:15.390
Well, what else?

161
00:11:15.390 --> 00:11:19.279
We made the request and
then the server has two process,

162
00:11:19.279 --> 00:11:22.190
that is what is known as the backend time.

163
00:11:23.980 --> 00:11:27.640
If you are just requesting an static HML,
that's easy.

164
00:11:27.640 --> 00:11:31.340
The server just go to the file system,
gives the file and give you the file.

165
00:11:31.340 --> 00:11:34.936
But anyway,
that might take 200 milliseconds.

166
00:11:34.936 --> 00:11:39.598
If you have a server side library, PHP,

167
00:11:39.598 --> 00:11:43.988
Java, node.js, next.js, well,

168
00:11:43.988 --> 00:11:49.885
that may take 500,
600 shots to get the final

169
00:11:49.885 --> 00:11:55.112
HTML that we are still
using from our budget.

170
00:11:55.112 --> 00:12:01.302
When the server is ready and he has the
string or the bytes that wants to send,

171
00:12:01.302 --> 00:12:07.040
it grades and introduce the response
that goes over the downloading.

172
00:12:07.040 --> 00:12:09.369
In fact, we didn't mention this but

173
00:12:09.369 --> 00:12:14.040
this is using the app link of your
connection, and this is your downlink.

174
00:12:14.040 --> 00:12:18.843
You know that when you have a network
connection, you have an uplink and

175
00:12:18.843 --> 00:12:20.535
a downlink connection.

176
00:12:20.535 --> 00:12:25.500
Typically, the uplink is slower in terms
of bandwidth, it has less bandwidth, okay?

177
00:12:25.500 --> 00:12:31.008
So that's another thing to have in mind,
so then, the HTTP response appears and

178
00:12:31.008 --> 00:12:36.400
then the browser, it starts the HTML
parsing, the document parsing.

179
00:12:36.400 --> 00:12:41.355
So it start reading the HTML, we have
a tag, a head tag, we have a title tag,

180
00:12:41.355 --> 00:12:44.550
and it's creating the dome on the fly.

181
00:12:44.550 --> 00:12:49.200
And while it's finding
some other resources,

182
00:12:49.200 --> 00:12:52.686
it's creating that idea of it's,

183
00:12:52.686 --> 00:12:57.350
we've mentioned here is
the discovery phase.

184
00:12:58.450 --> 00:13:03.040
So it's a resource discovery,
so it's discovering resources.

185
00:13:03.040 --> 00:13:08.231
I need CSS, I need that were fun,
I need an icon, I need a PNG.

186
00:13:08.231 --> 00:13:13.173
Okay, and it's creating a table,
and on that table,

187
00:13:13.173 --> 00:13:20.489
it's also adding a prayer, it's setting
a priority for each resource, okay?

188
00:13:20.489 --> 00:13:27.082
And after that, at one point,
the browser decided to render.

189
00:13:27.082 --> 00:13:30.536
That inside,
it has more steps such as layout and

190
00:13:30.536 --> 00:13:33.327
pain that we won't get too deep today.

191
00:13:36.018 --> 00:13:42.208
But that means that a lot is happening
here, and when we understand what's

192
00:13:42.208 --> 00:13:47.230
going on, we can make better
decisions on what to do and how.

193
00:13:47.230 --> 00:13:52.227
Remember, my goal is for
you to feel bad today about how you're

194
00:13:52.227 --> 00:13:57.050
doing things and you need to feel
the pain that is here to get.

195
00:13:57.050 --> 00:14:02.225
We have a very limited budget and we need
to achieve the goal that in our website,

196
00:14:02.225 --> 00:14:06.088
we are not achieving because when I'm,
let me close this,

197
00:14:06.088 --> 00:14:10.210
when we are here, let me see if
this lighthouse is still there.

198
00:14:10.210 --> 00:14:14.820
Yeah, we are not achieving largest
contentful paint in 2.5 seconds.

199
00:14:14.820 --> 00:14:18.339
In fact, it says 7.5 seconds, so

200
00:14:18.339 --> 00:14:22.790
this is pretty bad even
with a simple website.

201
00:14:22.790 --> 00:14:27.895
Yeah, I pushed a couple of weird
things in that code on purpose

202
00:14:27.895 --> 00:14:32.940
that we will see in a minute,
but that's the goal, okay?

203
00:14:32.940 --> 00:14:36.620
Once we understand the process,
we can make things better.

