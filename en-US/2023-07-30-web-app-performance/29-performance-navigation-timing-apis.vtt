WEBVTT

1
00:00:00.006 --> 00:00:05.521
So far,
we've seen how to apply web performance.

2
00:00:05.521 --> 00:00:10.802
We create a website, right,
then you are attending this workshop,

3
00:00:10.802 --> 00:00:16.082
you are watching this course, and
then you learn to measure things,

4
00:00:16.082 --> 00:00:21.088
you apply some techniques that we
have been seeing to see if that,

5
00:00:21.088 --> 00:00:24.392
I mean, preload, DNS prefetch, 14K.

6
00:00:24.392 --> 00:00:28.050
And then, you go back,
make changes, measure, okay,

7
00:00:28.050 --> 00:00:31.610
that's kind of one thing, which is okay.

8
00:00:31.610 --> 00:00:34.520
We do that in the lab, okay?

9
00:00:34.520 --> 00:00:41.541
We iterate over this many
times until you go and deploy.

10
00:00:41.541 --> 00:00:43.922
When you deploy, that goes to the user.

11
00:00:43.922 --> 00:00:45.354
It shouldn't, I mean,

12
00:00:45.354 --> 00:00:49.390
web performance optimization
shouldn't stop with the deployment.

13
00:00:50.580 --> 00:00:54.380
You should also measure
real user metrics and

14
00:00:54.380 --> 00:00:59.080
do two things,
make decisions on the fly for that user,

15
00:00:59.080 --> 00:01:03.488
that's why I mentioned
reactive web performance.

16
00:01:03.488 --> 00:01:08.483
So for example, if the latency is too
high, well, let's decrease the amount of

17
00:01:08.483 --> 00:01:12.970
data or let's make only one request and
try to bring many things at once.

18
00:01:13.990 --> 00:01:19.490
And also, with those measurements,
we can go back to apply techniques.

19
00:01:19.490 --> 00:01:22.122
We can gather real user metrics and

20
00:01:22.122 --> 00:01:26.860
make new decisions that will make
changes to the code as well.

21
00:01:27.910 --> 00:01:32.029
So that's how your performance
process should look like.

22
00:01:32.029 --> 00:01:38.870
So it's not just static performance,
also dynamic performance on the fly, okay?

23
00:01:38.870 --> 00:01:41.410
The APIs, as we will see,
work client-side.

24
00:01:42.570 --> 00:01:46.718
Some data that you get there can be
share with the server automatically or

25
00:01:46.718 --> 00:01:50.254
manually, and as every API in
the web world is not available,

26
00:01:50.254 --> 00:01:54.140
some APIs will not be available
in every browser, okay?

27
00:01:54.140 --> 00:02:00.571
So sometimes, we have polyfills,
that's a library that will simulate,

28
00:02:00.571 --> 00:02:05.264
will fill the gap that we have
on some browsers, and for

29
00:02:05.264 --> 00:02:08.990
that, we can measure timings.

30
00:02:08.990 --> 00:02:10.430
What is timing?

31
00:02:10.430 --> 00:02:12.450
Remember the waterfall chart?

32
00:02:12.450 --> 00:02:16.091
We could recreate the waterfall
chart in a JavaScript structure.

33
00:02:16.091 --> 00:02:20.089
So all the information you see in
the waterfall chart can be accessed by

34
00:02:20.089 --> 00:02:22.136
JavaScript, by a JavaScript API.

35
00:02:22.136 --> 00:02:22.780
For what?

36
00:02:23.970 --> 00:02:24.510
For what you need.

37
00:02:26.290 --> 00:02:29.881
You can read type of connection,
bandwidth latency, device memory, and

38
00:02:29.881 --> 00:02:32.570
you can create your own custom
metrics with these APIs.

39
00:02:34.580 --> 00:02:38.634
You can read paint timings such
as first-contentful-paint,

40
00:02:38.634 --> 00:02:43.064
large-contentful-paint, and
CPU-intense operations such as,

41
00:02:43.064 --> 00:02:48.016
remember the dimension long tasks,
these tasks that are taking more than 50

42
00:02:48.016 --> 00:02:52.840
milliseconds, you can get warned every
time you're going over that line.

43
00:02:53.910 --> 00:02:58.811
So then, you can gather real user
metrics for that user, for that CPU,

44
00:02:58.811 --> 00:03:02.415
for that device,
we might have a long task problem.

45
00:03:04.865 --> 00:03:10.198
So that's known as real user monitoring or
ROM, because we don't

46
00:03:10.198 --> 00:03:16.309
know how users are working with our site,
just working with our lab, okay?

47
00:03:16.309 --> 00:03:19.115
So it's a good idea to take analytics.

48
00:03:19.115 --> 00:03:21.971
Of course,
there are a lot of providers out there,

49
00:03:21.971 --> 00:03:25.960
companies, where you inject the code and
they will do that for you.

50
00:03:25.960 --> 00:03:30.962
They have nice dashboards, alerts,
but also, you can do it yourself,

51
00:03:30.962 --> 00:03:35.892
and I will just give you a hint of some
ideas that you can use for the APIs.

52
00:03:35.892 --> 00:03:39.411
There are many APIs,
we are not going to cover all the APIs.

53
00:03:39.411 --> 00:03:43.941
We can do a full workshop
on performance APIs,

54
00:03:43.941 --> 00:03:50.455
it's just an idea to get you up and
running with the basics, okay?

55
00:03:50.455 --> 00:03:55.323
Let's say that the base of everything
that we will mention in this

56
00:03:55.323 --> 00:04:00.648
section is under the performance option,
have you ever seen that one?

57
00:04:00.648 --> 00:04:03.750
It's a global object
available in the context.

58
00:04:03.750 --> 00:04:07.712
So if I open any website,
it can be my website,

59
00:04:07.712 --> 00:04:13.008
let's go back to Frontend Museum,
let me close everything.

60
00:04:13.008 --> 00:04:17.010
If I go to the console,
we can try the performance object.

61
00:04:19.792 --> 00:04:25.710
So that object is actually like the root
of most of the performance APIs.

62
00:04:26.750 --> 00:04:29.170
For example,
there we have a navigation option.

63
00:04:30.500 --> 00:04:34.996
On that navigation, we can know
which type of navigation do we have.

64
00:04:34.996 --> 00:04:39.630
One is actually a normal navigation,
so I just type the URL.

65
00:04:39.630 --> 00:04:44.698
I can also have a BFCache navigation,
so it means the current navigation,

66
00:04:44.698 --> 00:04:50.180
the user is going back, or the user went
back to our website, remember BFCache.

67
00:04:51.960 --> 00:04:55.549
And also, I can see the redirect count, so

68
00:04:55.549 --> 00:05:00.956
to get to this navigation,
how many redirects were necessary?

69
00:05:02.476 --> 00:05:08.866
So over here also,
there is a performance.now

70
00:05:08.866 --> 00:05:15.110
function that will give
you the current time.

71
00:05:16.654 --> 00:05:23.790
But you say, the current time expressed in
which unit, which kind of weird, right?

72
00:05:23.790 --> 00:05:26.768
If I refresh this, [COUGH] and
get performance.now(),

73
00:05:26.768 --> 00:05:28.420
it's actually a small number.

74
00:05:30.200 --> 00:05:34.545
It's expressed in milliseconds
since the zero of the timeline,

75
00:05:34.545 --> 00:05:37.079
since I have started the navigation.

76
00:05:37.079 --> 00:05:41.078
And you can use this to
measure things on your page,

77
00:05:41.078 --> 00:05:44.054
to see how much time has passed since,

78
00:05:44.054 --> 00:05:49.373
performance on that will give you,
and also it's high precision.

79
00:05:49.373 --> 00:05:54.673
Technically, the precision
goes to the nanoseconds.

80
00:05:54.673 --> 00:05:58.585
But yeah, it's a theory,
right, not the reality.

81
00:05:58.585 --> 00:06:03.952
So it's milliseconds,
okay, it's much better

82
00:06:03.952 --> 00:06:09.336
than doing this, new date().getTime, why?

83
00:06:09.336 --> 00:06:15.820
Because this is, first, the amount of
milliseconds since 1st of January, 1970.

84
00:06:15.820 --> 00:06:17.500
The precision is milliseconds only.

85
00:06:18.540 --> 00:06:23.217
And also, you're creating an object
in memory, new date, looking for

86
00:06:23.217 --> 00:06:26.985
memory, so
you're actually changing the observation.

87
00:06:26.985 --> 00:06:29.060
That's not a good idea.

88
00:06:29.060 --> 00:06:33.231
performance.now(), you can see it's
faster, it's actually native, and

89
00:06:33.231 --> 00:06:35.630
it's accessing like
a high precision timer.

90
00:06:36.950 --> 00:06:39.682
So on this performance object,

91
00:06:39.682 --> 00:06:44.346
we have everything you need for
the performance APIs.

92
00:06:44.346 --> 00:06:46.848
So we have already seen this, so

93
00:06:46.848 --> 00:06:51.676
how to get the current timestamp,
we have already seen that.

94
00:06:51.676 --> 00:06:56.108
By the way, the timeOrigin will
give you the timestamp for

95
00:06:56.108 --> 00:07:00.460
the zero, if you need to convert
that into a normal date.

96
00:07:02.200 --> 00:07:03.920
Also, you can get the redirectCount.

97
00:07:03.920 --> 00:07:08.075
I already say that, and this is the kind
of kind of navigation you have,

98
00:07:08.075 --> 00:07:12.041
it's a normal navigation,
it's a reload or it's a back forward.

99
00:07:18.436 --> 00:07:22.347
And level 2,
level 2 means the version 2 of the API.

100
00:07:22.347 --> 00:07:29.220
We do have a lot of timestamps, a lot.

101
00:07:29.220 --> 00:07:37.400
So actually, what you see there is
all the steps of loading a web page.

102
00:07:37.400 --> 00:07:41.600
And actually, you have lot of places
there where you can get the timestamp,

103
00:07:41.600 --> 00:07:43.810
navigationStart, fetchStart.

104
00:07:43.810 --> 00:07:47.940
When the SSL connection started,
it's called connectEnd.

105
00:07:47.940 --> 00:07:51.487
When the HTTP request started,
that's requestStart.

106
00:07:51.487 --> 00:07:56.785
When the CSS and JavaScript parsing
started, that's domInteractive, and so on.

107
00:07:56.785 --> 00:08:02.551
And you can read the timestamp, so
you can actually design, if you want,

108
00:08:02.551 --> 00:08:07.759
on the screen using Canvas, for
example, you can actually design

109
00:08:07.759 --> 00:08:13.064
a waterfall chart just by gathering
the information from this API.

110
00:08:13.064 --> 00:08:17.654
And again, with this,
you can make some decisions, for example.

111
00:08:17.654 --> 00:08:22.205
So if you wanna, for example,
calculate time to first byte,

112
00:08:22.205 --> 00:08:27.467
you get responseStart minus fetchStart,
that's time to first byte.

113
00:08:27.467 --> 00:08:30.840
Anyway, time to first byte is
kind of at the backend time.

114
00:08:32.370 --> 00:08:36.770
If you want download time, so
the downloading of the HTML,

115
00:08:36.770 --> 00:08:40.130
responses and minus responseStart.

116
00:08:40.130 --> 00:08:43.524
You want DOM load time,
domInteractive minus,

117
00:08:43.524 --> 00:08:48.340
parsing and rendering time, and
you use that for your own purposes.

118
00:08:49.560 --> 00:08:50.290
Does it make sense?

119
00:08:50.290 --> 00:08:51.054
That's kind of the idea.

120
00:08:51.054 --> 00:08:55.692
And page load time that
no one cares anymore,

121
00:08:55.692 --> 00:09:00.098
okay, is domComplete minus fetchStart.

