WEBVTT

1
00:00:00.014 --> 00:00:03.447
Service workers and cache storage.

2
00:00:03.447 --> 00:00:10.581
So does anyone know what
a service worker is here?

3
00:00:10.581 --> 00:00:13.086
&gt;&gt; A background JavaScript cache,
I think, that can run.

4
00:00:13.086 --> 00:00:16.918
&gt;&gt; It's a background JavaScript cache.

5
00:00:16.918 --> 00:00:23.617
Let's say,
it depends on what you mean by background.

6
00:00:23.617 --> 00:00:28.140
It's not a cache, but
the service worker can use a cache.

7
00:00:28.140 --> 00:00:31.331
So it's a use case more than
what's a service worker.

8
00:00:31.331 --> 00:00:36.116
So we have a service worker and
then we have the cache storage.

9
00:00:36.116 --> 00:00:40.417
What you said is the service
worker using the cache storage,

10
00:00:40.417 --> 00:00:43.294
not exactly what the service worker is.

11
00:00:43.294 --> 00:00:44.803
So a service worker is a JavaScript file.

12
00:00:44.803 --> 00:00:50.478
I think I have the original definition
here, but the service worker,

13
00:00:50.478 --> 00:00:54.906
it's a middleware written
in JavaScript between your

14
00:00:54.906 --> 00:00:59.923
progressive web app or website and
the servers and the cloud.

15
00:00:59.923 --> 00:01:04.315
It can be more things, it's actually
a different thread, it's a worker,

16
00:01:04.315 --> 00:01:06.523
that's why it has its own life cycle.

17
00:01:06.523 --> 00:01:10.312
There is a lot to talk
about service workers, and

18
00:01:10.312 --> 00:01:15.220
I recommend you two workshops or
courses in Frontend Masters.

19
00:01:15.220 --> 00:01:18.259
One from Kyle Simpson on service workers,
specifically.

20
00:01:18.259 --> 00:01:23.539
And the other one, the same I mentioned
before on JavaScript in the background,

21
00:01:23.539 --> 00:01:26.269
we also cover the service workers there.

22
00:01:26.269 --> 00:01:31.610
But actually, it's something that you
can install in users' devices for

23
00:01:31.610 --> 00:01:32.723
your website.

24
00:01:32.723 --> 00:01:36.413
And next time the user is
visiting your website,

25
00:01:36.413 --> 00:01:40.466
the service worker can
actually act like the server.

26
00:01:40.466 --> 00:01:42.757
In fact, let me make you a quick and

27
00:01:42.757 --> 00:01:47.579
dirty definition of a service worker
that is not 100% accurate, but

28
00:01:47.579 --> 00:01:52.495
you will get it pretty quickly in case
you haven't heard about it before.

29
00:01:52.495 --> 00:01:57.664
A service worker is a web server written

30
00:01:57.664 --> 00:02:04.251
in JavaScript that we
install in user's device.

31
00:02:04.251 --> 00:02:08.963
So we are creating a web server and
we are installing that web server

32
00:02:08.963 --> 00:02:13.524
locally in the user's device,
in the phone or in the computer.

33
00:02:13.524 --> 00:02:17.697
So next time the user is accessing our
website, instead of going to the real

34
00:02:17.697 --> 00:02:22.351
server, that is, in the cloud, that has
the latency because the latency is here.

35
00:02:22.351 --> 00:02:27.508
When we are going to the cloud,
to the network, that's the latency.

36
00:02:27.508 --> 00:02:31.344
If we stay here, we are within
the boundaries of the device.

37
00:02:31.344 --> 00:02:34.091
We are not going to the network,
we don't have the latency.

38
00:02:34.091 --> 00:02:37.456
So the service worker is
written in JavaScript and

39
00:02:37.456 --> 00:02:39.625
can serve files to the browser.

40
00:02:39.625 --> 00:02:44.691
&gt;&gt; So you can also simplify down just
being a caching middleware as well?

41
00:02:44.691 --> 00:02:50.556
&gt;&gt; Yeah, you can, in this case, using
that API, you have control of the cache.

42
00:02:50.556 --> 00:02:53.626
Instead of relying on the browser's cache,

43
00:02:53.626 --> 00:02:58.493
now you can have your own cache and
serve your own files locally, okay?

44
00:02:58.493 --> 00:03:02.864
So here, you have one use case,
one design pattern for

45
00:03:02.864 --> 00:03:06.213
using service workers and cache storage.

46
00:03:06.213 --> 00:03:09.863
So you have a PWA or a website,
remember a PWA is just a website,

47
00:03:09.863 --> 00:03:14.617
that makes a request to the server, but
there is a service worker installed.

48
00:03:14.617 --> 00:03:18.514
So the service worker will say, okay,
let me search first in the cache.

49
00:03:18.514 --> 00:03:22.208
The cache is a local storage
available in the browser.

50
00:03:22.208 --> 00:03:27.462
If it's a cache hit, we respond to
the browser with that response,

51
00:03:27.462 --> 00:03:29.594
if not, we go to a network.

52
00:03:29.594 --> 00:03:31.641
So if you think about this,

53
00:03:31.641 --> 00:03:36.006
this is similar to what I wrote
over the browser's cache.

54
00:03:36.006 --> 00:03:40.847
It's kind of the similar algorithm, the
difference is that this is written by us.

55
00:03:40.847 --> 00:03:48.273
We have control of this algorithm,
we write this in JavaScript.

56
00:03:48.273 --> 00:03:53.267
And a service worker will not
help the first initial visit

57
00:03:53.267 --> 00:03:57.542
of your user, but
it might help the next visits.

58
00:03:57.542 --> 00:04:02.043
Because the next time the user
is getting into our websites,

59
00:04:02.043 --> 00:04:04.434
we can serve the files locally.

60
00:04:04.434 --> 00:04:06.698
It's like a local host on users' devices.

61
00:04:06.698 --> 00:04:12.643
Do you have any question on that?

62
00:04:12.643 --> 00:04:16.773
It's kind of a new paradigm on
the web that has been for a while now.

63
00:04:16.773 --> 00:04:20.096
Compatible with all the browsers,
we are probably three or

64
00:04:20.096 --> 00:04:23.626
four years with all the browsers
supporting service workers.

65
00:04:23.626 --> 00:04:29.157
But we are still far away from
a lot of websites using it.

66
00:04:29.157 --> 00:04:34.101
It's still some kind of a scary part
of web development getting into

67
00:04:34.101 --> 00:04:35.495
service workers.

68
00:04:35.495 --> 00:04:40.486
And it can help a lot performance
because it can improve web vitals

69
00:04:40.486 --> 00:04:44.586
a lot if we don't need to go
to the network every time.

70
00:04:44.586 --> 00:04:49.545
Of course, there will be a lot of
use cases where we still need to

71
00:04:49.545 --> 00:04:52.460
go to the real server on the network.

72
00:04:52.460 --> 00:04:56.574
&gt;&gt; So it's not sending just a more
compressed version to the same network,

73
00:04:56.574 --> 00:04:58.808
it's just not even touching it at all?

74
00:04:58.808 --> 00:05:03.067
&gt;&gt; It's not even touching the network,
and that's why using service worker,

75
00:05:03.067 --> 00:05:07.211
it's an API that will let you make
an offline web, an offline capable web.

76
00:05:07.211 --> 00:05:09.216
Because then even if you
don't have connection,

77
00:05:09.216 --> 00:05:10.800
you can still serve the files locally.

78
00:05:14.936 --> 00:05:19.492
Okay, so it's a huge deal, that's why
you have here in Frontend Masters a full

79
00:05:19.492 --> 00:05:21.397
course just on service workers.

80
00:05:21.397 --> 00:05:26.257
And there are also courses
that are taking that topic.

81
00:05:26.257 --> 00:05:30.598
&gt;&gt; Why do you think the adoption of
service workers has been so slow?

82
00:05:30.598 --> 00:05:34.900
&gt;&gt; I think the adoption of
service worker is slow, first,

83
00:05:34.900 --> 00:05:39.581
because it's a new paradigm and
it changes the whole scope.

84
00:05:39.581 --> 00:05:44.539
It's also not simple to implement,
actually.

85
00:05:44.539 --> 00:05:48.859
So it's a low level API,
so you actually need to

86
00:05:48.859 --> 00:05:53.395
understand what you're doing,
or use library.

87
00:05:53.395 --> 00:05:57.374
In fact, Workbox is, for
example, one of the libraries.

88
00:05:57.374 --> 00:06:02.686
I still find myself getting a lot of
developers that don't understand,

89
00:06:02.686 --> 00:06:06.006
maybe some of you that
you didn't know what.

90
00:06:06.006 --> 00:06:09.000
I mean, you know that they were there, but

91
00:06:09.000 --> 00:06:13.332
I don't know exactly what that is,
okay, haven't used it.

92
00:06:13.332 --> 00:06:18.057
So because it's so
different from what we were used to

93
00:06:18.057 --> 00:06:22.993
use in the web space,
it's a completely new paradigm.

94
00:06:22.993 --> 00:06:28.303
I feel it's one of the reasons
of why it's still slow.

95
00:06:28.303 --> 00:06:32.480
Also debugging with service workers,
it's really painful,

96
00:06:32.480 --> 00:06:36.831
because now you are not hitting
directly the server all the time.

97
00:06:36.831 --> 00:06:41.043
So sometimes you don't know
which version you're rendering,

98
00:06:41.043 --> 00:06:44.868
is the one that is locally,
I mean, you can control that.

99
00:06:44.868 --> 00:06:49.150
But it feels like it's not so
simple as with just files

100
00:06:49.150 --> 00:06:53.539
on my server that users are getting,
and that's all.

101
00:06:53.539 --> 00:06:59.273
It's like you are creating copies of
your server on millions of users and

102
00:06:59.273 --> 00:07:03.974
you feel you're losing control
of what's going on there.

103
00:07:03.974 --> 00:07:06.640
So it's hard work, yeah,
that's probably one reason.

