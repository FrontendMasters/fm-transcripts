WEBVTT

1
00:00:00.000 --> 00:00:03.118
So, both the HTTP request and

2
00:00:03.118 --> 00:00:08.120
the HTTP response both have a header and
a body.

3
00:00:08.120 --> 00:00:13.598
That for the request, the initial
request the body is typically empty.

4
00:00:13.598 --> 00:00:19.019
So the header is text that
the browser is sending to the server,

5
00:00:19.019 --> 00:00:26.406
saying, hey, I'm Chrome, I want that
document, I accept PNG files, JPEG files.

6
00:00:26.406 --> 00:00:30.854
So it's a lot of information that
the browser is sending to the server.

7
00:00:30.854 --> 00:00:33.754
And when the server is responding,
there is a header.

8
00:00:33.754 --> 00:00:36.279
In that header, for example,

9
00:00:36.279 --> 00:00:41.729
the server adds the status
code such as 404, 500, 200.

10
00:00:41.729 --> 00:00:46.731
Saying that, yeah, I have the file
you requested, I don't have it, or

11
00:00:46.731 --> 00:00:52.401
I have an error, and the body, that is
the actual data that you requested, okay?

12
00:00:52.401 --> 00:00:56.402
When you're in the network
layer within Chrome,

13
00:00:56.402 --> 00:01:01.174
you can click on each request and
actually see the headers.

14
00:01:01.174 --> 00:01:04.155
So if we go to the headers we have,

15
00:01:04.155 --> 00:01:08.944
let me increase the font size
a little bit for you, and

16
00:01:08.944 --> 00:01:14.065
we have their response headers and
the request headers.

17
00:01:14.065 --> 00:01:19.784
So this is going right
now to request the HTML.

18
00:01:19.784 --> 00:01:25.955
All these strings are sent
through the uplink to the server,

19
00:01:25.955 --> 00:01:33.347
and then the server responds with
that information apart from the HTML.

20
00:01:33.347 --> 00:01:34.557
That's how that works.

21
00:01:34.557 --> 00:01:37.499
Just have that in mind for now.

22
00:01:37.499 --> 00:01:41.695
Okay, so HTTP has several versions.

23
00:01:41.695 --> 00:01:47.322
I'm not going to even mention HTTP
1.0 because it's been not deprecated,

24
00:01:47.322 --> 00:01:53.216
but it's not in the wild, and it hasn't
been in the wild for probably 15 years.

25
00:01:53.216 --> 00:01:58.023
So HTTP 1.1, it's still 15% or

26
00:01:58.023 --> 00:02:01.636
20% of the market share.

27
00:02:01.636 --> 00:02:06.571
In fact, how can we know the percentage of

28
00:02:06.571 --> 00:02:11.083
HTTP based network communications,

29
00:02:11.083 --> 00:02:14.473
HTTP 1.1, 2 or even 3?

30
00:02:14.473 --> 00:02:20.733
One resource of information is
a website known as HTTP Archive.

31
00:02:20.733 --> 00:02:23.011
I'm not sure if you've
heard about HTTP Archive.

32
00:02:23.011 --> 00:02:27.424
Have you heard about archive.org,
that's the Internet Archive?

33
00:02:27.424 --> 00:02:30.658
Well, based on the Internet Archive,

34
00:02:30.658 --> 00:02:35.954
it's actually saving resources,
the HTML, CSS of websites.

35
00:02:35.954 --> 00:02:41.824
So you can see here how Google
was like 20 years ago, okay?

36
00:02:41.824 --> 00:02:47.107
So you can actually see how Google was,
you can see the website, okay?

37
00:02:47.107 --> 00:02:52.883
But the Internet Archive is
not saving the HTTP headers or

38
00:02:52.883 --> 00:02:55.659
performance data, okay?

39
00:02:55.659 --> 00:02:58.572
So that was the homepage,
I remember that one.

40
00:02:58.572 --> 00:03:01.414
Well, the logo is not there for
some reason.

41
00:03:01.414 --> 00:03:02.405
There it is.

42
00:03:02.405 --> 00:03:04.978
I used that version of Google, by the way.

43
00:03:07.199 --> 00:03:09.741
But it's just the contents of the file.

44
00:03:09.741 --> 00:03:13.939
Well, HTTP Archive,
it's actually saving not the file but

45
00:03:13.939 --> 00:03:18.220
all the headers, all the information
that is useful for, for

46
00:03:18.220 --> 00:03:21.532
example, web performance, or for analysis.

47
00:03:21.532 --> 00:03:28.584
So here, for example, we can get reports
about the loading speeds of websites.

48
00:03:28.584 --> 00:03:36.286
That's how we know how performance is
doing over time, generally, on the web.

49
00:03:36.286 --> 00:03:41.442
There are a lot of reports here,
from here, we can also check for

50
00:03:41.442 --> 00:03:46.230
example, how many,
I think it's here, State of the Web?

51
00:03:46.230 --> 00:03:50.854
Yeah, how many requests
do we have in HTTP/2?

52
00:03:50.854 --> 00:03:53.901
So this is how it's
getting better over time.

53
00:03:53.901 --> 00:04:00.508
But we are right now on around 68%
of the web is in HTTP/2, okay?

54
00:04:00.508 --> 00:04:02.417
And I will explain what
that is in a minute.

55
00:04:02.417 --> 00:04:05.210
HTTP/3 is 20%, and

56
00:04:05.210 --> 00:04:11.203
there's still some network
connections on 1.1.

57
00:04:11.203 --> 00:04:13.159
So on 1.1, the biggest problem,

58
00:04:13.159 --> 00:04:16.442
that is not the problem today
anymore because we don't have so

59
00:04:16.442 --> 00:04:20.503
many connections on this version,
we have one request per TCP connection.

60
00:04:20.503 --> 00:04:28.103
Which means that if I call you, I can
only request you one file over that call.

61
00:04:28.103 --> 00:04:32.579
So if I wanna download in parallel
more files, I wanna download PNG file,

62
00:04:32.579 --> 00:04:35.194
CSS file, I need to make different calls.

63
00:04:35.194 --> 00:04:38.527
I need to have four phone numbers,
eight phone numbers,

64
00:04:38.527 --> 00:04:42.426
eight phone devices, I'm sorry,
and then call you eight times.

65
00:04:42.426 --> 00:04:48.504
I need to open four TCP connections,
okay, which is kind of a problem.

66
00:04:48.504 --> 00:04:54.886
It was a problem at the time to
download several resources in parallel.

67
00:04:54.886 --> 00:04:58.424
This version accepted GZIP.

68
00:04:58.424 --> 00:05:02.514
I'm not sure if you know this,
but when you're browsing the web,

69
00:05:02.514 --> 00:05:07.487
if everything is set up correctly,
you're downloading ZIP files, at least for

70
00:05:07.487 --> 00:05:10.509
the HTML, the CSS, and
the text-based files.

71
00:05:10.509 --> 00:05:15.652
Everything is zipped, so
then the transfer part is smaller.

72
00:05:15.652 --> 00:05:18.946
HTTP/2 altered performance from scratch.

73
00:05:18.946 --> 00:05:26.723
HTTP/2 came from an experimental protocol
created by Google with the name SPDY.

74
00:05:26.723 --> 00:05:32.898
And that became the standard then that was
created with performance from scratch.

75
00:05:32.898 --> 00:05:38.538
And here was the moment where we realized
that we have to switch to HTTPS.

76
00:05:38.538 --> 00:05:42.288
Because if not,
we cannot change the protocol safely.

77
00:05:42.288 --> 00:05:44.525
HTTP/2 added header compression.

78
00:05:44.525 --> 00:05:48.856
So those headers that I mentioned before
are compressed as well, not with GZIP, but

79
00:05:48.856 --> 00:05:50.079
different algorithm.

80
00:05:50.079 --> 00:05:53.147
But on HTTP 1.1, they were not compressed.

81
00:05:53.147 --> 00:05:59.868
And the space that headers
consume is typically around 1K.

82
00:05:59.868 --> 00:06:03.996
So you have 1K for the request and 1K for

83
00:06:03.996 --> 00:06:08.991
the response,
even if it's an empty response.

84
00:06:08.991 --> 00:06:14.567
So, you have 1.5 to 2 kilobytes,
per request,

85
00:06:14.567 --> 00:06:19.654
wasted just in metadata,
not in the real data.

86
00:06:19.654 --> 00:06:22.950
Well, HTTP/2 is compressing that so
it's not a problem, and

87
00:06:22.950 --> 00:06:25.584
also has something known
as TCP connection reuse.

88
00:06:25.584 --> 00:06:30.880
It opens just one TCP connection and over
that connection it can send and receive

89
00:06:30.880 --> 00:06:36.341
several files at a time, Okay, using
different algorithm, it doesn't matter.

90
00:06:36.341 --> 00:06:39.931
But that's having in mind that HTTP/2
is much better for performance.

91
00:06:39.931 --> 00:06:42.899
And now we have HTTP, before that.

92
00:06:42.899 --> 00:06:46.775
HTTP/2 is TLS-based only,
as we mentioned before.

93
00:06:46.775 --> 00:06:48.696
Today, it's good compatibility.

94
00:06:48.696 --> 00:06:53.185
You just need to upgrade your servers or
use a CDN, okay?

95
00:06:53.185 --> 00:06:54.764
It works with upgrading connections.

96
00:06:54.764 --> 00:06:59.208
So the first connection, we start
with HTTP/1, that is a standard, and

97
00:06:59.208 --> 00:07:03.102
we ask the server, hey server,
I accept 2 if you wanna upgrade.

98
00:07:03.102 --> 00:07:06.719
And the server will say, okay,
let's upgrade, and from now on,

99
00:07:06.719 --> 00:07:07.825
it continues in 2.

100
00:07:07.825 --> 00:07:13.610
If the browser is not supporting 2 or
the server is not supporting HTTP/2,

101
00:07:13.610 --> 00:07:16.636
everything is done over HTTP/1.1.

102
00:07:16.636 --> 00:07:22.466
And HTTP/3 It's exactly the same as
HTTP/2, so it's the same interface.

103
00:07:22.466 --> 00:07:26.772
But instead of using TCP, it's using UDP.

104
00:07:26.772 --> 00:07:28.674
Does anyone know what that means?

105
00:07:32.661 --> 00:07:36.178
You have the face of I know it but
I'm not sure.

106
00:07:36.178 --> 00:07:41.427
&gt;&gt; Universal digital packet or
unstructured digital packet?

107
00:07:41.427 --> 00:07:46.122
&gt;&gt; No, it's not about unstructure,
but I mean, I'm not talking about

108
00:07:46.122 --> 00:07:51.067
what the acronym means, but
what's the difference between TCP and UDP?

109
00:07:51.067 --> 00:07:53.770
&gt;&gt; Yeah, it's packet-based
as opposed to [INAUDIBLE].

110
00:07:53.770 --> 00:07:55.241
&gt;&gt; Both are packet-based.

111
00:07:55.241 --> 00:07:57.715
&gt;&gt; But it's asynchronous.

112
00:07:57.715 --> 00:08:02.242
That UDP doesn't necessarily have to
maintain a handshake continuously.

113
00:08:02.242 --> 00:08:08.395
&gt;&gt; [SOUND] You're close, but
I'm not sure I like the answer.

114
00:08:08.395 --> 00:08:11.381
&gt;&gt; Doesn't UDP allow
dropping some packets,

115
00:08:11.381 --> 00:08:13.967
you can lose some data in the process?

116
00:08:13.967 --> 00:08:14.791
&gt;&gt; Yeah, we are close.

117
00:08:14.791 --> 00:08:19.518
It's not that it's allowing dropping
the packets, but actually what is

118
00:08:19.518 --> 00:08:24.261
happening is it's not detecting if
packages are being delivered or not.

119
00:08:24.261 --> 00:08:29.108
TCP is guaranteeing that packages
will be delivered, and if it's not,

120
00:08:29.108 --> 00:08:34.193
I mean, it's checking that every packet
is getting into the destination,

121
00:08:34.193 --> 00:08:36.588
and if it's not, it's retrying.

122
00:08:36.588 --> 00:08:37.584
&gt;&gt; Is it the ordering?

123
00:08:37.584 --> 00:08:41.271
Is UDP not necessarily in this order
that it's supposed to be [INAUDIBLE]?

124
00:08:41.271 --> 00:08:46.043
&gt;&gt; That's another thing, so actually,
TCP is guarantee the order.

125
00:08:46.043 --> 00:08:51.528
So actually, because when you're
sending messages over TCP,

126
00:08:51.528 --> 00:08:57.533
for example, the message typically
is split in chunks, in packets.

127
00:08:57.533 --> 00:09:02.541
And they go over the network, and
they are traveling around the Internet.

128
00:09:02.541 --> 00:09:06.134
And they might arrive in different orders,
or

129
00:09:06.134 --> 00:09:11.027
maybe one packet is lost, so
that's why TCP is managing that.

130
00:09:11.027 --> 00:09:15.407
UDP, it's more that, okay,
I'm sending this, I don't care,

131
00:09:15.407 --> 00:09:17.454
okay, I will continue my job.

132
00:09:17.454 --> 00:09:21.462
HTTP/3 is based on UDP.

133
00:09:21.462 --> 00:09:24.946
And maybe you're thinking,
well, but what happens then?

134
00:09:24.946 --> 00:09:28.321
My packets will not get
into the destination.

135
00:09:28.321 --> 00:09:31.405
Well, actually, there is another
protocol on top of that that will.

136
00:09:31.405 --> 00:09:36.205
There is a thin layer,
there is much performance that TCP,

137
00:09:36.205 --> 00:09:38.417
that makes things faster.

138
00:09:38.417 --> 00:09:42.799
Anyway, the only thing that you need
to know is that it's faster, and

139
00:09:42.799 --> 00:09:46.382
it's something that you have
to support in your server.

140
00:09:46.382 --> 00:09:50.653
If you don't want to, or
don't have the resources to do that,

141
00:09:50.653 --> 00:09:55.744
maybe your infrastructure team is
telling you we're not going to do that.

142
00:09:55.744 --> 00:10:00.233
The solution you have is a layer on top,
such as Cloudflare.

143
00:10:00.233 --> 00:10:06.305
There are companies, free or paid,
where you add a frontend to your website,

144
00:10:06.305 --> 00:10:12.382
they offer HTTP/3 to your users and
they contact you over an older protocol.

145
00:10:12.382 --> 00:10:15.132
Cloudflare is one example of that, okay?

146
00:10:15.132 --> 00:10:18.470
Anyway, those are the versions
of HTTP are available today.

