WEBVTT

1
00:00:00.000 --> 00:00:04.543
Let's say that your website is
already loaded, you are okay with it,

2
00:00:04.543 --> 00:00:09.086
now we will see in our example if
there is anything else we can improve,

3
00:00:09.086 --> 00:00:12.166
well, you will have
interaction experience.

4
00:00:12.166 --> 00:00:17.870
Well, first and big warning,
we shouldn't do client-side rendering,

5
00:00:17.870 --> 00:00:20.503
I'm sorry I know it hurts, okay?

6
00:00:20.503 --> 00:00:25.077
But client-side rendering for the initial
load, for the content that you see

7
00:00:25.077 --> 00:00:29.525
initially, it's a very bad idea,
it's a terrible idea for performance.

8
00:00:29.525 --> 00:00:34.291
And again, yeah, but we know we like
React because blah-blah, I don't care,

9
00:00:34.291 --> 00:00:35.633
we're losing money.

10
00:00:35.633 --> 00:00:39.168
So it's not enough reason,
whatever reason you are thinking,

11
00:00:39.168 --> 00:00:41.795
it's not enough reason
if we are losing money.

12
00:00:41.795 --> 00:00:46.489
If you are paying for ads,
if my company is paying for ads, for

13
00:00:46.489 --> 00:00:51.022
a website that then users
are not using because it's slow.

14
00:00:51.022 --> 00:00:54.983
And if you don't believe me,
because I know that a lot of you will not,

15
00:00:54.983 --> 00:00:57.669
you are not really convinced
that this is true,

16
00:00:57.669 --> 00:01:00.781
that a couple of milliseconds
will make a difference.

17
00:01:00.781 --> 00:01:05.020
There are a lot of research on that,
but do a research on your own website.

18
00:01:05.020 --> 00:01:08.487
So do some A-B testing,
in fact, Amazon did that and

19
00:01:08.487 --> 00:01:12.046
they released the research,
that was a long time ago.

20
00:01:12.046 --> 00:01:15.727
They they were creating
experiments with groups, so

21
00:01:15.727 --> 00:01:21.058
let's say in the next hour, we split
all the Amazon visitors in 10 groups.

22
00:01:21.058 --> 00:01:26.130
Group A, we won't give them
any delay Group B we have

23
00:01:26.130 --> 00:01:31.090
50 milliseconds delay, 100 milliseconds,

24
00:01:31.090 --> 00:01:35.029
150 and then we analyze conversion.

25
00:01:35.029 --> 00:01:39.208
If you are large as Amazon,
you will see a lot of traffic and

26
00:01:39.208 --> 00:01:44.598
in one hour you can get enough details
to have conclusions and you will see.

27
00:01:44.598 --> 00:01:47.647
Okay, what's the difference
when you have delays and

28
00:01:47.647 --> 00:01:50.107
when you don't have delays for
the same UI?

29
00:01:50.107 --> 00:01:53.776
And on the Amazon research,
like a decade ago,

30
00:01:53.776 --> 00:01:58.914
they realized that they were
losing 1% of sales, 1% of sales,

31
00:01:58.914 --> 00:02:05.275
every 100 milliseconds of delay,
that's a lot, it's a lot of money, okay?

32
00:02:05.275 --> 00:02:08.892
That might be different for your case,
that might be not the case today,

33
00:02:08.892 --> 00:02:11.799
it was 10 years ago,
maybe it's different but anyway,

34
00:02:11.799 --> 00:02:15.922
it has been proven that always, better
performance leads to better conversion.

35
00:02:15.922 --> 00:02:16.908
How much?

36
00:02:16.908 --> 00:02:21.319
It depends on the case and again, you can
measure that, you can do an experiment and

37
00:02:21.319 --> 00:02:24.040
that's why client-side
rendering is a bad idea.

38
00:02:24.040 --> 00:02:29.379
That's why even the React team,
if you go today to the React documentation

39
00:02:29.379 --> 00:02:35.419
that was updated a few weeks ago, now
they don't suggest client-side rendering.

40
00:02:35.419 --> 00:02:41.082
It's still there as one option, but
it's not the recommended way to do React,

41
00:02:41.082 --> 00:02:46.677
the React team is recommended to do
React with a framework, such as Next.js.

42
00:02:46.677 --> 00:02:49.245
The framework that is
server-side rendered or

43
00:02:49.245 --> 00:02:52.324
it's a mix,
it's a start as a server-side render, and

44
00:02:52.324 --> 00:02:56.636
then you move to the client, which is
fair and that's because of performance.

45
00:02:56.636 --> 00:03:02.669
Because now we know that pure client-side
rendering has performance issues and

46
00:03:02.669 --> 00:03:05.692
pretty bad performance issues, okay?

47
00:03:05.692 --> 00:03:07.395
Does it make sense?

48
00:03:07.395 --> 00:03:10.648
So also if you really have heavy tasks,

49
00:03:10.648 --> 00:03:16.078
you're gonna start thinking about
moving that to WebAssembly.

50
00:03:16.078 --> 00:03:19.581
So if you're taking,
you have a long, really long task and

51
00:03:19.581 --> 00:03:24.138
creating a thread is not making that
better because you can create web workers

52
00:03:24.138 --> 00:03:25.698
as well with transcript.

53
00:03:25.698 --> 00:03:28.543
Another way is to create
a module in WebAssembly,

54
00:03:28.543 --> 00:03:32.879
now it's compatible with every browser
Squoosh, the app that we saw that is

55
00:03:32.879 --> 00:03:36.829
converting the apps, is making all
the conversion in WebAssembly.

56
00:03:36.829 --> 00:03:41.158
So it's an option, it's there for
us, I know that as web developers,

57
00:03:41.158 --> 00:03:45.994
it feels really strange, like some strange
guy there that we don't wanna see,

58
00:03:45.994 --> 00:03:49.921
we don't wanna touch but
it's something interesting, okay?

59
00:03:49.921 --> 00:03:54.842
To see,
we're not going to write dumb code in

60
00:03:54.842 --> 00:04:00.421
WebAssembly but for
a lot of processing in my work.

61
00:04:00.421 --> 00:04:01.498
Yeah.

62
00:04:01.498 --> 00:04:06.793
&gt;&gt; Can you give me a real life example of
something you would use WebAssembly for?

63
00:04:06.793 --> 00:04:12.428
&gt;&gt; Well, Squoosh is one example, in that
case, so processing bytes, binary data,

64
00:04:12.428 --> 00:04:17.268
in this case converting JPEGs into
web files, that's a good example.

65
00:04:17.268 --> 00:04:22.424
Today, decoding and
encoding things like Amazon Prime, video,

66
00:04:22.424 --> 00:04:28.041
Netflix, StarPlus, Barmah cloud,
they are all using WebAssembly for

67
00:04:28.041 --> 00:04:33.677
decoding and encoding video,
typically it's about processing data.

68
00:04:33.677 --> 00:04:37.157
Of course then we have,
talking about legacy,

69
00:04:37.157 --> 00:04:40.992
we have some interesting
things going on on the web.

70
00:04:40.992 --> 00:04:45.320
You can run any legacy DOS application,
for example or

71
00:04:45.320 --> 00:04:49.459
you can run Windows on top of a browser or
Quake III and

72
00:04:49.459 --> 00:04:54.938
there are a lot of examples like that and
they are using WebAssembly.

73
00:04:54.938 --> 00:04:59.834
They are just taking some code written
in C, 20 years ago, 30 years ago, and

74
00:04:59.834 --> 00:05:04.806
they're converting that into a WebAssembly
model and running it in the browser.

75
00:05:04.806 --> 00:05:08.949
So yeah, those are very niche idea for
a web app,

76
00:05:08.949 --> 00:05:13.901
but my thinking is that if you
are parsing a lot of content,

77
00:05:13.901 --> 00:05:18.854
making a lot of calculations,
and you see in the console or

78
00:05:18.854 --> 00:05:22.519
using APIs that I will
mention in a minute.

79
00:05:22.519 --> 00:05:27.304
That it's a long task, so
it's taking too much time to execute,

80
00:05:27.304 --> 00:05:33.742
then you might be thinking, well, maybe we
should start thinking about WebAssembly.

81
00:05:33.742 --> 00:05:39.394
&gt;&gt; And I'll just add that we have a course
by Jim Young on WebAssembly as well.

82
00:05:39.394 --> 00:05:42.416
&gt;&gt; There you have it Frontend Master for
everything, you know that.

83
00:05:42.416 --> 00:05:45.171
You shouldn't be watching Netflix at all,

84
00:05:45.171 --> 00:05:48.227
everything should be
here at Frontend Masters.

85
00:05:48.227 --> 00:05:51.297
Okay, so stop serving legacy code,
what is that?

86
00:05:51.297 --> 00:05:55.480
That is unless you really have a need for
that,

87
00:05:55.480 --> 00:06:00.847
like you're serving some
customers that are still on IE for

88
00:06:00.847 --> 00:06:06.343
some reason,
you shouldn't export ES5 content anymore.

89
00:06:06.343 --> 00:06:11.848
From, if you're using a framework or
library, you can change the setting,

90
00:06:11.848 --> 00:06:16.593
it's safe to move to ESX today,
that will ship less JavaScript and

91
00:06:16.593 --> 00:06:20.681
we know that JavaScript is
really harming performance.

92
00:06:20.681 --> 00:06:23.100
If you still need to serve some old user,

93
00:06:23.100 --> 00:06:26.954
maybe it's better to have two versions or
something like that.

94
00:06:26.954 --> 00:06:29.541
Because we don't wanna
have performance just for

95
00:06:29.541 --> 00:06:32.188
0.1% of your users that
might have a problem and

96
00:06:32.188 --> 00:06:36.147
you're harming performance for
99.9%, it doesn't make any sense.

97
00:06:36.147 --> 00:06:41.018
Reactive Web Performance
is kind of an intro for

98
00:06:41.018 --> 00:06:46.754
the next and final part of the workshop,
it's an idea.

99
00:06:46.754 --> 00:06:52.248
What if you can know about the context
with APIs, what's the context?

100
00:06:52.248 --> 00:06:56.718
The performance context,
such as how's the latency,

101
00:06:56.718 --> 00:07:00.437
how's the math with,
how's the CPU and GPU?

102
00:07:00.437 --> 00:07:03.902
And you can make decisions about that,
so using different Apis,

103
00:07:03.902 --> 00:07:08.501
Network Information API, it's a Javascript
API that will let you know the current for

104
00:07:08.501 --> 00:07:09.645
example, latency.

105
00:07:09.645 --> 00:07:15.618
Performance observers, Save-Data, that's
client hint that I mentioned before,

106
00:07:15.618 --> 00:07:18.969
if the user wants to save data,
Device Memory and

107
00:07:18.969 --> 00:07:23.666
more and then based on that,
you Provide a Consistent Experience.

108
00:07:23.666 --> 00:07:28.603
I mentioned Netflix and
other video-based apps in

109
00:07:28.603 --> 00:07:33.899
the past 10 minutes and
we can take them as examples.

110
00:07:33.899 --> 00:07:39.475
So, think about this,
when you're watching a TV show or

111
00:07:39.475 --> 00:07:46.688
a movie on Netflix, do you see a buffering
a lot, like a loading spinner?

112
00:07:46.688 --> 00:07:50.726
Maybe the first second, but
then while you're watching,

113
00:07:50.726 --> 00:07:55.664
you get a consistent experience even
if you're having network issues.

114
00:07:55.664 --> 00:07:58.913
I'm not sure if you have
seen that in action, but

115
00:07:58.913 --> 00:08:04.229
maybe you're watching a 4k video and at
one point it lowers down the quality and

116
00:08:04.229 --> 00:08:08.854
maybe it's very pixelated at one point and
then it comes back to 4k.

117
00:08:08.854 --> 00:08:13.041
So that's actually providing
a consistent experience, so

118
00:08:13.041 --> 00:08:16.241
it's not like breaking
the flow of watching or

119
00:08:16.241 --> 00:08:20.441
having that experience,
it's just changing the quality.

120
00:08:20.441 --> 00:08:24.271
What if we can think for
some web apps, something similar?

121
00:08:24.271 --> 00:08:29.263
So enable or disable Web Fonts,
Change the Service Worker's

122
00:08:29.263 --> 00:08:34.644
cache policy to be more local or
be more remote like cloud-based.

123
00:08:34.644 --> 00:08:36.863
Remember service worker
that can serve locally?

124
00:08:36.863 --> 00:08:41.571
Well, maybe we can serve locally
only if the latency is too high and

125
00:08:41.571 --> 00:08:47.726
if the latency is pretty good, well, maybe
let's go to the cloud and be more updated.

126
00:08:47.726 --> 00:08:51.026
Decide between server-side render or
client-side render, maybe you say,

127
00:08:51.026 --> 00:08:52.631
you know what, I can't change this.

128
00:08:52.631 --> 00:08:58.146
Maybe you say I can't change this but
if the user is in a mobile phone,

129
00:08:58.146 --> 00:09:04.913
that is a low level, low memory, maybe
I'm, let's jump to server-side render.

130
00:09:04.913 --> 00:09:08.578
Because it's going to
be really painful for

131
00:09:08.578 --> 00:09:14.829
the user to execute our three megabytes
React application client-side.

132
00:09:14.829 --> 00:09:18.507
Reduce the amount of data that
we are loading by default,

133
00:09:18.507 --> 00:09:23.257
and even delivering a 1x image that
is an image without high resolution,

134
00:09:23.257 --> 00:09:27.488
standard resolution image,
not matter the device pixel ratio.

135
00:09:27.488 --> 00:09:32.148
Because maybe you are in
an iPhone 17 pro ultra max, but

136
00:09:32.148 --> 00:09:37.973
you are in the middle of nowhere with 2G,
so it's not about the phone,

137
00:09:37.973 --> 00:09:43.728
the context is more than the phone,
the device, and the screen size.

138
00:09:43.728 --> 00:09:48.785
In this case, the content is about
the latency, the bandwidth, if you're in

139
00:09:48.785 --> 00:09:54.393
roaming and paying for the data or not, so
maybe you can change the experience, okay?

140
00:09:54.393 --> 00:09:56.010
Makes sense?

141
00:09:56.010 --> 00:10:00.073
So you can define based
on different situations,

142
00:10:00.073 --> 00:10:03.273
what are you going to send to that user?

143
00:10:03.273 --> 00:10:09.444
Google is using this a lot, because we
need to serve users everywhere, okay?

144
00:10:09.444 --> 00:10:14.381
That's one provider doing that,
and even you can even set

145
00:10:14.381 --> 00:10:19.922
different budgets based on
the context you set, so you say okay,

146
00:10:19.922 --> 00:10:24.857
if we are in this context we
set a budget of 170k total for

147
00:10:24.857 --> 00:10:27.810
all the JavaScript, all the CSS.

148
00:10:27.810 --> 00:10:32.424
If you're in Wi-Fi on desktop, we have
more batches, so let's use it, of course,

149
00:10:32.424 --> 00:10:36.525
this has a lot of work behind because you
need to think about how we are going to

150
00:10:36.525 --> 00:10:39.880
do that, how you're going to
create that structure, okay?

151
00:10:39.880 --> 00:10:43.804
But it's possible,
I'm saying that it's possible.

152
00:10:43.804 --> 00:10:47.620
Also today,
you can get reports from the browser,

153
00:10:47.620 --> 00:10:53.680
I'm not sure if you know this, so you can
get real user metrics from JavaScript.

154
00:10:53.680 --> 00:10:59.559
There is, for example,
the reporting API,with the reporting API,

155
00:10:59.559 --> 00:11:06.746
when you are serving the user the HTML,
you can add a header, it's called report2.

156
00:11:06.746 --> 00:11:12.339
And that header will have a server
endpoint, then the browser in user's

157
00:11:12.339 --> 00:11:17.568
device will send you information
every once in a while about what's

158
00:11:17.568 --> 00:11:23.184
going on with performance and
other problems for that particular user.

159
00:11:23.184 --> 00:11:28.344
And you will receive that
information at your endpoint, okay?

160
00:11:28.344 --> 00:11:29.634
Make sense?

161
00:11:29.634 --> 00:11:33.509
&gt;&gt; Is there any kind of
permission problem with that or-

162
00:11:33.509 --> 00:11:35.626
&gt;&gt; It's first domain only, so

163
00:11:35.626 --> 00:11:40.391
it should work on the same origin,
so it's your own website just

164
00:11:40.391 --> 00:11:45.349
giving the browser an endpoint,
so you don't need a permission.

165
00:11:45.349 --> 00:11:47.926
And it's on a best effort scenario, so

166
00:11:47.926 --> 00:11:51.753
it's not guaranteed that you'll
receive all the data but

167
00:11:51.753 --> 00:11:57.080
you will receive some and then you can
gather analytics and do something with it.

