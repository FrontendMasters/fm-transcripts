WEBVTT

1
00:00:00.007 --> 00:00:01.159
Now we know the problem.

2
00:00:01.159 --> 00:00:04.199
So we have that we have this problem okay?

3
00:00:04.199 --> 00:00:09.381
And the next step is to
talk about metrics, okay?

4
00:00:09.381 --> 00:00:13.147
Because we can't improve
what we can measure, so

5
00:00:13.147 --> 00:00:16.298
we need to measure to improve something.

6
00:00:16.298 --> 00:00:21.339
Is not like am going to look at
the website and say, it is faster now

7
00:00:21.339 --> 00:00:26.822
because my brain thinks it is faster
than yesterday thus not how this works.

8
00:00:26.822 --> 00:00:30.695
And in terms of metrics we have
two kinds of metrics today,

9
00:00:30.695 --> 00:00:34.500
browser-centric metrics and
user-centric metrics.

10
00:00:34.500 --> 00:00:39.080
These are just two examples of those
we will not get into the details.

11
00:00:39.080 --> 00:00:43.128
For example browser-centric metric,
I mean time to first buy your load,

12
00:00:43.128 --> 00:00:47.304
user centric metric content layout shift,
large shift contents will pane,

13
00:00:47.304 --> 00:00:48.669
we will see them, okay?

14
00:00:48.669 --> 00:00:55.100
Typically web performance or regionally if
were focusing on browser-centric metrics,

15
00:00:55.100 --> 00:00:59.849
because it's something that
the browser will tell us sometimes.

16
00:00:59.849 --> 00:01:02.614
So what's a browser-centric metric?

17
00:01:02.614 --> 00:01:07.510
First, it's a metric that is important for
the browser, so

18
00:01:07.510 --> 00:01:12.224
the user is not actually
affected directly by the metric.

19
00:01:12.224 --> 00:01:17.492
Maybe that was metric there will
affect other user-centric metrics,

20
00:01:17.492 --> 00:01:18.906
but not by itself.

21
00:01:18.906 --> 00:01:22.570
The first metric that we typically use,

22
00:01:22.570 --> 00:01:28.193
it's time to first byte,
known as TTFB, time to first byte.

23
00:01:28.193 --> 00:01:33.794
Previously, we were saying
this us back in time.

24
00:01:33.794 --> 00:01:38.434
Actually the latency will
actually appear here.

25
00:01:38.434 --> 00:01:40.611
It's the time that it takes for

26
00:01:40.611 --> 00:01:46.061
the browser to receive the first byte
from the HTTP response from the server.

27
00:01:46.061 --> 00:01:48.623
So I'm requesting the index HTML.

28
00:01:48.623 --> 00:01:50.217
I'm requesting your website.

29
00:01:50.217 --> 00:01:54.217
And the server is doing
something server side, and

30
00:01:54.217 --> 00:01:59.346
returning me the bytes of that response,
the bytes of that file.

31
00:01:59.346 --> 00:02:03.496
Well, at the moment where we get that
file, that's time to first byte,

32
00:02:03.496 --> 00:02:05.481
and we measure that from the zero.

33
00:02:05.481 --> 00:02:08.322
The zero is when the navigation starts.

34
00:02:08.322 --> 00:02:12.362
The navigation starts when you
type a URL and press return, or

35
00:02:12.362 --> 00:02:15.636
when you click on a link
pointing to that website.

36
00:02:15.636 --> 00:02:17.309
That's our zero, okay?

37
00:02:17.309 --> 00:02:20.517
That's the beginning of the timeline.

38
00:02:20.517 --> 00:02:24.513
Then over the timeline,
we will see different milestones.

39
00:02:24.513 --> 00:02:28.416
Time to first byte is at
which point in the timeline,

40
00:02:28.416 --> 00:02:31.530
the browser has received the first byte.

41
00:02:31.530 --> 00:02:35.389
That means that it knows
that the server is there and

42
00:02:35.389 --> 00:02:39.983
is responding because I'm
getting some information back.

43
00:02:39.983 --> 00:02:43.501
Another browser-centric
metric is first paint.

44
00:02:43.501 --> 00:02:48.329
First paint will actually tell you
at which moment in the timeline

45
00:02:48.329 --> 00:02:53.329
the browser has paint something,
but that something can be a line,

46
00:02:53.329 --> 00:02:57.387
or a background color,
not actually content, okay?

47
00:02:57.387 --> 00:03:04.315
So that's why it's not a user-centric
matric, can be white, can be black.

48
00:03:04.315 --> 00:03:06.608
But the browser to decision to say okay,

49
00:03:06.608 --> 00:03:09.515
we are going to start rendering something,
okay?

50
00:03:09.515 --> 00:03:12.290
And that's first thing.

51
00:03:12.290 --> 00:03:17.077
Page load is another one that
is actually browser-centric.

52
00:03:17.077 --> 00:03:21.864
That was actually the one that
we were using before 2005.

53
00:03:21.864 --> 00:03:23.258
During the 90s and

54
00:03:23.258 --> 00:03:28.595
the early 2000s we were using the page
load time to measure performance.

55
00:03:28.595 --> 00:03:33.970
You know when page load is fire,
does anyone know?

56
00:03:33.970 --> 00:03:35.307
Page load?

57
00:03:35.307 --> 00:03:37.365
What page load means?

58
00:03:37.365 --> 00:03:38.882
What does it mean?

59
00:03:38.882 --> 00:03:43.862
&gt;&gt; Is it when the last byte
in the get request arrives?

60
00:03:43.862 --> 00:03:48.749
&gt;&gt; When the last byte arrives, no,
it's actually farther away from that.

61
00:03:48.749 --> 00:03:53.213
It's actually when the browser has nothing
else to do about that page navigation.

62
00:03:53.213 --> 00:03:56.073
Which means,
all the files were downloaded,

63
00:03:56.073 --> 00:04:00.929
all the resources were downloaded, and
everything is painted on the screen.

64
00:04:00.929 --> 00:04:03.586
So everything is ready, okay?

65
00:04:03.586 --> 00:04:07.328
That is including iframes that you
might have, if you have an iframe.

66
00:04:07.328 --> 00:04:11.282
Even content that is
actually below the fold.

67
00:04:11.282 --> 00:04:13.945
I will explain what that is in a minute,
but after the scroll.

68
00:04:13.945 --> 00:04:17.614
Even content that is a mile
away in this scroll,

69
00:04:17.614 --> 00:04:21.764
when everything is ready,
page load is fire, okay?

70
00:04:21.764 --> 00:04:26.117
And we realized after a couple of
years that that's actually not so

71
00:04:26.117 --> 00:04:27.759
important for the user.

72
00:04:27.759 --> 00:04:32.175
It was important on
the Internet Explorer era.

73
00:04:32.175 --> 00:04:35.629
Have you ever browse the web with IE?

74
00:04:35.629 --> 00:04:39.453
Yeah, we have two and
a lot of lucky youth again.

75
00:04:39.453 --> 00:04:44.021
So on IE, at least the first versions,
like IE5, IE6,

76
00:04:44.021 --> 00:04:47.772
IE4, we used to have an animation,
the logo.

77
00:04:47.772 --> 00:04:50.022
The same on Netscape,
by the way, not just IE.

78
00:04:50.022 --> 00:04:52.318
So when you are loading a website,

79
00:04:52.318 --> 00:04:57.079
we had a logo that was spinning around,
and the logo stops at one point.

80
00:04:57.079 --> 00:04:57.894
At which point?

81
00:04:57.894 --> 00:04:59.618
When the page loads.

82
00:04:59.618 --> 00:05:03.106
So there were a lot of users
that were actually waiting for

83
00:05:03.106 --> 00:05:06.313
that logo to stop to start
using the website, okay?

84
00:05:06.313 --> 00:05:08.560
You remember that,
you're laughing because you remember that.

85
00:05:08.560 --> 00:05:10.480
Well, that's actually a page load.

86
00:05:10.480 --> 00:05:14.082
The problem is that page
load needs a lot of time.

87
00:05:14.082 --> 00:05:19.043
And it's not so important because we know
that the page is actually ready to use

88
00:05:19.043 --> 00:05:24.323
before that moment, before everything
was downloaded, parsed, and rendered.

89
00:05:24.323 --> 00:05:26.135
We don't need to wait for that time.

90
00:05:26.135 --> 00:05:30.706
So it's a browser-centric metric that,
and we won't use anymore.

91
00:05:30.706 --> 00:05:32.080
It's not important.

92
00:05:32.080 --> 00:05:33.251
It's not an important metric.

93
00:05:33.251 --> 00:05:35.731
You will still get that metric
from different tools, but

94
00:05:35.731 --> 00:05:37.340
it's not really important, okay?

95
00:05:37.340 --> 00:05:41.397
In fact, browser-centric
metrics are not so important.

96
00:05:41.397 --> 00:05:44.900
Yeah, some of the metrics
will be important.

97
00:05:44.900 --> 00:05:48.609
Maybe time to first byte is
something that we will check, but

98
00:05:48.609 --> 00:05:53.200
it's not really, really the ones that
we will care the most about, yeah?

99
00:05:53.200 --> 00:05:57.023
&gt;&gt; So if you have an event listener for
on-page load.

100
00:05:57.023 --> 00:06:00.119
It's gonna be very pessimistic
about when that JavaScript fires?

101
00:06:00.119 --> 00:06:04.811
&gt;&gt; Yeah that's correct,
that's why using on-page load, on load or

102
00:06:04.811 --> 00:06:08.858
adamant listener load,
it's actually a bad idea today.

103
00:06:08.858 --> 00:06:12.400
And instead of doing that you
shouldn't be using DOM content loaded.

104
00:06:12.400 --> 00:06:16.830
DOM content load is fired when
the HTML has finished parsing and

105
00:06:16.830 --> 00:06:18.759
the DOM is ready in memory.

106
00:06:18.759 --> 00:06:21.388
It doesn't matter what,
if the images are loaded,

107
00:06:21.388 --> 00:06:23.976
if the CSS are loaded,
what happens with iframes.

108
00:06:23.976 --> 00:06:26.545
So you can start firing JavaScript there.

109
00:06:26.545 --> 00:06:31.487
So using the load event in JavaScript,
it's a very bad practice today, but

110
00:06:31.487 --> 00:06:35.208
it was pretty common in the 90s or
the early 2000s.

111
00:06:35.208 --> 00:06:36.608
I used that, yeah.

112
00:06:36.608 --> 00:06:37.815
Guilty.

113
00:06:37.815 --> 00:06:40.019
But it's not important anymore.

114
00:06:40.019 --> 00:06:42.130
We shouldn't be doing that anymore, okay?

115
00:06:42.130 --> 00:06:44.397
So forget about page load.

116
00:06:44.397 --> 00:06:46.564
So during the rest of the day,

117
00:06:46.564 --> 00:06:50.920
probably we won't use page load
as actually a real metric.

118
00:06:50.920 --> 00:06:55.334
Sometimes we say page load,
but we're not thinking about

119
00:06:55.334 --> 00:06:59.490
the real browser-centric
metric known as page load.

120
00:06:59.490 --> 00:07:02.288
We will care about user-centric metrics.

121
00:07:02.288 --> 00:07:08.518
And the problem with these metrics
is that they cannot be defined or

122
00:07:08.518 --> 00:07:14.762
expressed by code, actually,
because it has to do with the user.

123
00:07:14.762 --> 00:07:19.747
How the user perceives performance,
it's about user's perception.

124
00:07:19.747 --> 00:07:23.710
So we have to wait for
browser vendors first to

125
00:07:23.710 --> 00:07:28.509
the community to define some units and
some metrics and

126
00:07:28.509 --> 00:07:33.532
how to define the metric and
how to calculate the metric.

127
00:07:33.532 --> 00:07:35.982
And then we need to wait for browsers or

128
00:07:35.982 --> 00:07:39.130
tools to actually calculate the metric,
okay?

129
00:07:39.130 --> 00:07:41.836
So for example, we have first interactive,

130
00:07:41.836 --> 00:07:46.834
that's the one also known as time to
interactive, sometimes names might change.

131
00:07:46.834 --> 00:07:52.437
But first interactive means that
the main thread has been released,

132
00:07:52.437 --> 00:07:55.632
at least for a couple of milliseconds.

133
00:07:55.632 --> 00:07:59.633
So you know, well I'm not sure if
you know, but now you will know,

134
00:07:59.633 --> 00:08:02.571
that the browser has only
one thread by default.

135
00:08:02.571 --> 00:08:04.436
It's a single thread.

136
00:08:04.436 --> 00:08:08.103
Everything that the browser
is doing goes in one thread.

137
00:08:08.103 --> 00:08:10.880
Your JavaScript runs on the same thread,
okay?

138
00:08:10.880 --> 00:08:15.625
So if it's occupied by the browser doing
something, you cannot execute JavaScript.

139
00:08:15.625 --> 00:08:18.301
If the thread is occupied
by your JavaScript code,

140
00:08:18.301 --> 00:08:19.803
the browser cannot render.

141
00:08:19.803 --> 00:08:24.651
Because it's the same threat
is like it's like a highway

142
00:08:24.651 --> 00:08:28.998
with only one play for
only one car at a time, okay?

143
00:08:28.998 --> 00:08:33.022
So we have one lane, so only one by one.

144
00:08:33.022 --> 00:08:39.652
And first directive means that
the browser left some room for

145
00:08:39.652 --> 00:08:44.334
a while so
we can write our own code, okay?

146
00:08:44.334 --> 00:08:45.269
What the browser is doing?

147
00:08:45.269 --> 00:08:49.090
Well, parsing, downloading files, parsing.

148
00:08:49.090 --> 00:08:51.963
Actually, downloading
files can be asynchronous.

149
00:08:51.963 --> 00:08:53.701
So that can be in a different thread.

150
00:08:53.701 --> 00:08:59.508
But parsing and laying out and
rendering that is calculating the CSS and

151
00:08:59.508 --> 00:09:03.683
then actually making
the rendering on the screen.

152
00:09:03.683 --> 00:09:05.765
Happens in the same thread, so

153
00:09:05.765 --> 00:09:11.226
if it's taking too much time you're not
leaving a space to execute JavaScript.

154
00:09:11.226 --> 00:09:14.244
So first interactive is I wish
moment there was some relief so

155
00:09:14.244 --> 00:09:17.036
actually it's interactive,
why it's interactive?

156
00:09:17.036 --> 00:09:21.185
Because when you click when
you drag when you scroll

157
00:09:21.185 --> 00:09:25.528
the browser needs to receive
the input from the user,

158
00:09:25.528 --> 00:09:29.692
from the scroll operation,
the click operation.

159
00:09:29.692 --> 00:09:32.900
For that, it needs to be interactive.

160
00:09:32.900 --> 00:09:34.748
Speed index.

161
00:09:34.748 --> 00:09:36.869
I think that speed index is pretty cool.

162
00:09:36.869 --> 00:09:40.379
It's underused.

163
00:09:40.379 --> 00:09:45.195
The first time you see the metric,
it's not easy to get it.

164
00:09:45.195 --> 00:09:47.429
So let me explain why that is.

165
00:09:47.429 --> 00:09:52.966
Always if you see the even the number
to say speed Index, three seconds.

166
00:09:52.966 --> 00:09:54.371
Let me explain that.

167
00:09:54.371 --> 00:09:55.224
We have an example.

168
00:09:55.224 --> 00:09:59.904
So on the x-axis, we have time,
in this case in milliseconds, so

169
00:09:59.904 --> 00:10:02.843
100, 200 milliseconds, right?

170
00:10:02.843 --> 00:10:04.985
And then we have
screenshots at the bottom.

171
00:10:04.985 --> 00:10:09.425
So we see a screenshots of
that website over time.

172
00:10:09.425 --> 00:10:10.462
What's the end?

173
00:10:10.462 --> 00:10:14.588
The end of the timeline is
when the page is loaded.

174
00:10:14.588 --> 00:10:19.692
And then what we measure at
any point in the x-axis is

175
00:10:19.692 --> 00:10:26.310
how much of the final rendering is
actually rendered at that point.

176
00:10:26.310 --> 00:10:30.989
So, for example,
here we see nothing because it's white,

177
00:10:30.989 --> 00:10:33.849
the line is over zero on the y-axis.

178
00:10:33.849 --> 00:10:40.441
So the y-axis that we see here actually
at the right, it's actually percentage.

179
00:10:40.441 --> 00:10:46.926
How much of the final rendering was
rendered at each point of the timeline?

180
00:10:46.926 --> 00:10:49.388
So when we start seeing a logo,

181
00:10:49.388 --> 00:10:55.465
we see here that we are going up on the
presentation because now we see a logo.

182
00:10:55.465 --> 00:10:58.703
And then of course it's
getting better over time.

183
00:10:58.703 --> 00:11:00.649
So a speed index.

184
00:11:00.649 --> 00:11:02.794
This is how you calculate the speed index.

185
00:11:02.794 --> 00:11:09.809
We need to make, this operation, so we
need to take screenshots of the website.

186
00:11:09.809 --> 00:11:15.725
And then we calculate the percentage
of the final render at every point.

187
00:11:15.725 --> 00:11:19.577
Let me show you another example and
you will get the idea.

188
00:11:19.577 --> 00:11:22.060
This is Amazon.

189
00:11:22.060 --> 00:11:28.589
On Amazon, we see for 100 milliseconds,
nothing, so we are at zero.

190
00:11:28.589 --> 00:11:34.624
And then, quickly,
it goes over 75% of the final rendering,

191
00:11:34.624 --> 00:11:39.027
and then the rest, until we get 100, okay?

192
00:11:39.027 --> 00:11:44.349
Both are being loaded at the same time,
so the page load time it's the same.

193
00:11:44.349 --> 00:11:47.947
Let's say 1.3 seconds, roughly.

194
00:11:47.947 --> 00:11:49.085
Both, okay?

195
00:11:49.085 --> 00:11:55.017
So both are 1.3 seconds,
but which one is faster?

196
00:11:55.017 --> 00:11:59.254
Gmail or Amazon?

197
00:11:59.254 --> 00:11:59.936
&gt;&gt; Amazon.

198
00:11:59.936 --> 00:12:02.947
The area under the Amazon curve is bigger.

199
00:12:02.947 --> 00:12:06.040
&gt;&gt; The area under the Amazon
curve is bigger, and

200
00:12:06.040 --> 00:12:08.588
is that better or worse being bigger?

201
00:12:08.588 --> 00:12:10.392
&gt;&gt; Feel faster for the user.

202
00:12:10.392 --> 00:12:11.400
&gt;&gt; It feels faster.

203
00:12:11.400 --> 00:12:19.245
Amazon feels faster because we render more
content in less time in the timeline.

204
00:12:19.245 --> 00:12:22.374
So if you think about this so
what being faster means,

205
00:12:22.374 --> 00:12:24.748
we don't know what that means, right?

206
00:12:24.748 --> 00:12:27.740
But it feels faster,
I like the idea of feels.

207
00:12:27.740 --> 00:12:31.600
So it feels faster, the perception
of performance is better on Amazon.

208
00:12:31.600 --> 00:12:38.753
&gt;&gt; So what happens if like say Amazon
have the last percent took three seconds?

209
00:12:38.753 --> 00:12:42.343
That curve would be very large Is
there any way like normalize for.

210
00:12:42.343 --> 00:12:47.149
&gt;&gt; So actually we're not normalizing
the value, in fact I didn't explain

211
00:12:47.149 --> 00:12:51.029
what the speed index is yet,
this is how you calculate it.

212
00:12:51.029 --> 00:12:56.092
So what is the index is it's the area
above the curve not below the above,

213
00:12:56.092 --> 00:12:58.010
in this case the gray area.

214
00:12:58.010 --> 00:13:00.648
The bigger the area the worse.

215
00:13:00.648 --> 00:13:05.410
So in this case when you're
expanding the x axis you

216
00:13:05.410 --> 00:13:09.079
will get we will have more, more area.

217
00:13:09.079 --> 00:13:14.509
So what we need is to reduce
the gray area that in short words,

218
00:13:14.509 --> 00:13:21.434
it's like measuring how much blank
the user sees over the page load process.

219
00:13:21.434 --> 00:13:26.888
And we need to reduce that blank, so
that nothing that the user sees, okay?

220
00:13:26.888 --> 00:13:28.980
Makes sense, kind of?

221
00:13:28.980 --> 00:13:32.637
So the value that we receive as
a page index, it's a number,

222
00:13:32.637 --> 00:13:34.516
it's the area above the cure.

223
00:13:34.516 --> 00:13:37.075
But the number by itself
doesn't say anything.

224
00:13:37.075 --> 00:13:40.339
So it's expressing which unit.

225
00:13:40.339 --> 00:13:42.928
Pixels per time, percentage per time,

226
00:13:42.928 --> 00:13:47.584
it's not important to understand
the number, but how it's measured.

227
00:13:47.584 --> 00:13:50.664
And the number by itself,
it's also useless.

228
00:13:50.664 --> 00:13:54.230
That's why we will talk a little
bit about performance budgets.

229
00:13:54.230 --> 00:13:57.012
So it's not just about the number,

230
00:13:57.012 --> 00:14:02.413
we need to define which number is good and
which number is bad, okay?

231
00:14:02.413 --> 00:14:06.774
So it's not just getting the value,
it's knowing, we are really bad, or

232
00:14:06.774 --> 00:14:07.892
we are really good.

233
00:14:07.892 --> 00:14:11.623
So when you look at both websites,
the loading process,

234
00:14:11.623 --> 00:14:13.966
you can feel that Amazon is better.

235
00:14:13.966 --> 00:14:18.038
Even the page load time is the same for
both.

236
00:14:18.038 --> 00:14:22.645
And a speed index will measure that
feeling, that's the idea, right?

237
00:14:22.645 --> 00:14:25.441
So speed index is measuring that feeling.

238
00:14:25.441 --> 00:14:28.537
The feeling that Amazon is faster, okay?

239
00:14:28.537 --> 00:14:29.826
Make sense?

240
00:14:29.826 --> 00:14:31.546
That's speed index.

241
00:14:31.546 --> 00:14:36.763
We will see how to measure
these metrics in Dev Tools and

242
00:14:36.763 --> 00:14:40.402
in other tools in a couple of minutes.

243
00:14:40.402 --> 00:14:43.266
Time to interactive.

244
00:14:43.266 --> 00:14:48.073
We saw first interactive first, time to
interactive it's not just the first time

245
00:14:48.073 --> 00:14:53.102
it's interactive, is that it's interactive
enough for a couple of milliseconds.

246
00:14:53.102 --> 00:14:57.868
So you can scroll safely and
you won't see chunks as scroll or

247
00:14:57.868 --> 00:15:04.046
things like that because it has enough
time left for us to execute JavaScript.

248
00:15:05.931 --> 00:15:09.191
Largest contentful paint,
also known as LCP.

249
00:15:09.191 --> 00:15:13.426
That's the one that we
will focus the most for

250
00:15:13.426 --> 00:15:17.218
measuring a goal loading performance,

251
00:15:17.218 --> 00:15:22.135
at least the initial loading process,
LCP, okay?

252
00:15:22.135 --> 00:15:25.433
LCP, largest contentful paint.

253
00:15:25.433 --> 00:15:29.043
We will explain that better in
a couple of minutes with examples.

254
00:15:29.043 --> 00:15:34.029
But actually, remember,
every metric in this case, it's calculated

255
00:15:34.029 --> 00:15:38.785
over the timeline, and it's at
which point in the loading process.

256
00:15:38.785 --> 00:15:43.391
The largest contentful element
of your screen was painted.

257
00:15:43.391 --> 00:15:45.314
What is the largest content for paint?

258
00:15:45.314 --> 00:15:47.446
It depends on your website.

259
00:15:47.446 --> 00:15:51.736
It can be a text, title,
a paragraph of text, it can be an image,

260
00:15:51.736 --> 00:15:57.513
actually 75% of the websites are using an
image after our largest content for paint.

261
00:15:57.513 --> 00:16:02.205
It's like, the largest part of your
website that is actually content, and

262
00:16:02.205 --> 00:16:03.319
not just a color.

263
00:16:03.319 --> 00:16:05.059
We'll see some examples there.

264
00:16:05.059 --> 00:16:10.789
And also, you can create your custom
metric, and this is actually pretty cool.

265
00:16:10.789 --> 00:16:16.270
You can define for your website, for
your experience, what's a good metric.

266
00:16:16.270 --> 00:16:20.404
So for example, Twitter used
to have a time to first tweet.

267
00:16:20.404 --> 00:16:26.880
So when you get in twitter.com, at which
point the user is seeing one tweet, okay?

268
00:16:26.880 --> 00:16:28.197
And that's time to first tweet.

269
00:16:28.197 --> 00:16:33.099
So you can actually define your own
metric, so then you can see how to

270
00:16:33.099 --> 00:16:38.345
improve that metric based on what
experience looks like for your users.

271
00:16:38.345 --> 00:16:39.181
Do we have a question?

272
00:16:39.181 --> 00:16:43.704
&gt;&gt; Is time to interact somewhere
between DOM content loaded and load?

273
00:16:43.704 --> 00:16:50.219
&gt;&gt; Typically, it's after DOM content
loaded, and it can be after on-load.

274
00:16:50.219 --> 00:16:54.172
So it can be between, that's probably
the most common scenario, but

275
00:16:54.172 --> 00:16:55.386
it can also be after.

276
00:16:55.386 --> 00:16:57.975
I mean,
if you are executing out of JavaScript.

277
00:16:57.975 --> 00:17:02.857
And I'm talking to you,
react developers, or angular developers,

278
00:17:02.857 --> 00:17:06.745
or Vue.js developer,
that are not using a framework,

279
00:17:06.745 --> 00:17:11.152
a server-side framework,
maybe that happens after unload.

280
00:17:11.152 --> 00:17:12.786
So it depends, actually.

281
00:17:12.786 --> 00:17:13.673
Let me add a warning.

282
00:17:13.673 --> 00:17:18.246
I think I have that slide later, but
let me add a warning at this point.

283
00:17:18.246 --> 00:17:25.470
With web performance,
don't trust anyone, don't even trust me.

284
00:17:25.470 --> 00:17:28.106
So you need to trust on the data.

285
00:17:28.106 --> 00:17:33.685
You need to measure and
see everything in action for your website.

286
00:17:33.685 --> 00:17:40.044
And if you can, for your real users, with
something known as real user metrics, RUM.

287
00:17:40.044 --> 00:17:44.880
So don't trust, like the check the top
ten things you need to do to improve

288
00:17:44.880 --> 00:17:49.018
your website then you go and
do those ten, it doesn't matter.

289
00:17:49.018 --> 00:17:54.191
So don't trust that because every
website is different, so you need to see

290
00:17:54.191 --> 00:17:59.872
a lot of techniques, test them, measure
them and see if that's better or worse.

291
00:17:59.872 --> 00:18:02.439
We don't have silver bullets here.

292
00:18:02.439 --> 00:18:07.866
So we actually need to measure,
test and then apply techniques,

293
00:18:07.866 --> 00:18:12.612
test again and see if it's better or
not for our website.

294
00:18:12.612 --> 00:18:17.166
Of course, we have some basic
ideas that will apply for

295
00:18:17.166 --> 00:18:22.908
most of all the apps, but for
some a lot of small things, it depends.

296
00:18:22.908 --> 00:18:25.792
So it depends on your
website on your content.

