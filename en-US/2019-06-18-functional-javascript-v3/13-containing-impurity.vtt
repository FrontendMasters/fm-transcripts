WEBVTT

1
00:00:00.080 --> 00:00:04.520
&gt;&gt; Kyle Simpson: If you can't
extract the impurity, another way of

2
00:00:04.520 --> 00:00:09.580
getting around the problem of function
impurity, the pollution that it has,

3
00:00:09.580 --> 00:00:12.310
the polluting effect that it
has on the rest of the code.

4
00:00:12.310 --> 00:00:14.310
Another way to do that is
to contain the impurity.

5
00:00:16.080 --> 00:00:17.070
What do I mean by contain?

6
00:00:18.240 --> 00:00:22.800
This is sometimes hard for people, so
let me make sure we're real clear here.

7
00:00:22.800 --> 00:00:30.580
It is not that we don't make impurity
happen, impurity may have to happen.

8
00:00:30.580 --> 00:00:33.840
But if there's some way for
us to structure things so

9
00:00:33.840 --> 00:00:38.850
that the impurity does not affect
other parts of the application.

10
00:00:38.850 --> 00:00:43.509
If there's some way for us to reduce
the surface area of the impurity.

11
00:00:44.880 --> 00:00:47.580
We've had a net overall
benefit to our application.

12
00:00:50.410 --> 00:00:53.838
In other words, if the side effect
can pollute the global scope,

13
00:00:53.838 --> 00:00:56.650
that's bad, right?

14
00:00:56.650 --> 00:00:59.890
But what if the side
effect that has to happen

15
00:00:59.890 --> 00:01:02.130
only ever has to affect
five lines of code?

16
00:01:03.270 --> 00:01:06.730
That's a lot better than affecting
the entire global scope, right?

17
00:01:06.730 --> 00:01:09.480
So sometimes, we can't get rid
of the impurity, but sometimes,

18
00:01:09.480 --> 00:01:13.470
we can simply contain it,
we can reduce the surface area of it.

19
00:01:13.470 --> 00:01:14.450
One way of doing that.

20
00:01:15.650 --> 00:01:19.770
Here I have a SomeAPI, it's got
a method on it called isBelowThreshold,

21
00:01:19.770 --> 00:01:21.460
and some value on it.

22
00:01:21.460 --> 00:01:24.510
What's important here is
that I call that method.

23
00:01:25.860 --> 00:01:30.546
I'm gonna modify the numbers array,
but I'm calling line 11.

24
00:01:30.546 --> 00:01:33.254
SomeAPI.isBelowThreshold, I'm using that.

25
00:01:33.254 --> 00:01:37.680
So SomeAPI is provided to me by
like a framework or a library.

26
00:01:37.680 --> 00:01:40.025
And it has a function
on it that I wanna use.

27
00:01:40.025 --> 00:01:46.776
Well, one thing that I can do If I don't
want to modify the global numbers array,

28
00:01:46.776 --> 00:01:51.664
and I don't wanna use this
SomeAPI.isBelowThreshold.

29
00:01:51.664 --> 00:01:54.444
If I don't wanna use those side effects,

30
00:01:54.444 --> 00:01:59.450
one way of doing this is to wrap that
entire function so that the side effects

31
00:01:59.450 --> 00:02:04.790
that occur are not in the global scope,
but they are inside of a function scope.

32
00:02:05.820 --> 00:02:06.850
Let's do that.

33
00:02:06.850 --> 00:02:10.013
Let's wrap the insertSortedDescending,

34
00:02:10.013 --> 00:02:15.100
that was the function that previously
existed in the global scope.

35
00:02:15.100 --> 00:02:17.650
We wrapped it in another
function called getSortedNums.

36
00:02:19.500 --> 00:02:23.579
And notice that there is still, line 7,
a global variable called numbers,

37
00:02:23.579 --> 00:02:24.601
there is an array.

38
00:02:24.601 --> 00:02:31.108
But notice now, there is also an array
line 10 inside of getSortedNumbers.

39
00:02:31.108 --> 00:02:37.513
There's an array there that when
insertSortedDescending is called and

40
00:02:37.513 --> 00:02:41.818
line 20 tries to modify it,
it is now modifying

41
00:02:41.818 --> 00:02:46.549
the array from line 10,
not the array from line 7.

42
00:02:48.750 --> 00:02:53.341
And what we did on line 24 and
line 25, and 26, and

43
00:02:53.341 --> 00:02:58.341
27, and 28 is we passed in
the one from the global scope.

44
00:02:58.341 --> 00:03:01.000
And then line 10, we made a copy of it.

45
00:03:02.640 --> 00:03:05.770
So as to not modify
the global numbers array,

46
00:03:05.770 --> 00:03:08.650
only modify the local numbers array.

47
00:03:08.650 --> 00:03:11.810
Did you see how I contained the impurity?

48
00:03:11.810 --> 00:03:15.510
There is an impurity happening,
I am modifying that array and

49
00:03:15.510 --> 00:03:18.360
I'm modifying it by reference and
it's a variable outside of myself.

50
00:03:18.360 --> 00:03:19.940
That's a side effect.

51
00:03:19.940 --> 00:03:24.873
But I have contained that side effect to
lines 9 through 22 instead of the global

52
00:03:24.873 --> 00:03:26.668
scope of the entire program.

53
00:03:29.519 --> 00:03:33.022
&gt;&gt; Kyle Simpson: That's one way of
dealing of impurity is to contain it,

54
00:03:33.022 --> 00:03:35.600
in this case, wrapping a function.

55
00:03:35.600 --> 00:03:39.810
Now, I'll be honest with you,
that doesn't often occur for me.

56
00:03:39.810 --> 00:03:43.240
A handful of times have I ever
been able to take advantage of

57
00:03:43.240 --> 00:03:47.300
wrapping a function around
another function, but sometimes.

58
00:03:47.300 --> 00:03:49.990
Sometimes that is useful.

59
00:03:49.990 --> 00:03:52.680
So it's good technique to be aware of.

60
00:03:52.680 --> 00:03:55.440
But there is still another problem,
there is still an impurity here.

61
00:03:56.590 --> 00:04:02.005
And the impurity is that we
are using the SomeAPI.threshold and

62
00:04:02.005 --> 00:04:05.110
SomeAPI.isBelowThreshold.

63
00:04:05.110 --> 00:04:09.690
Notice line 15,
we are setting the variable.

64
00:04:11.040 --> 00:04:18.560
Line 15, we are setting threshold, which
is modifying something that we don't own.

65
00:04:20.450 --> 00:04:23.570
We're modifying threshold and
then calling this function.

66
00:04:23.570 --> 00:04:24.389
That's having a side effect.

67
00:04:25.520 --> 00:04:29.800
And it really wouldn't work for us to wrap

68
00:04:29.800 --> 00:04:34.910
the SomeAPI up into our function, because
that's a third party provided thing.

69
00:04:34.910 --> 00:04:38.140
It's probably actually in a separate file.

70
00:04:38.140 --> 00:04:39.590
So wrapping it isn't going to work.

71
00:04:41.070 --> 00:04:41.990
Is there any way for

72
00:04:41.990 --> 00:04:45.714
us to contain the impurity when we
can't just wrap a function around it?

73
00:04:45.714 --> 00:04:48.263
There's another technique.

74
00:04:48.263 --> 00:04:53.560
It's uglier than this, it's worse than
this, but it's better than nothing.

75
00:04:54.830 --> 00:04:58.140
The next technique that will look at
instead of wrapping a function around it,

76
00:04:59.140 --> 00:05:03.250
is create alongside of
it an adapter function.

77
00:05:03.250 --> 00:05:07.490
So notice we're back now, line 9,
we have an insertSortedDescription.

78
00:05:07.490 --> 00:05:11.460
That function is just out in
the global scope like it was before.

79
00:05:11.460 --> 00:05:12.832
So is the SomeAPI.

80
00:05:12.832 --> 00:05:14.556
But notice line 18,

81
00:05:14.556 --> 00:05:19.930
we have our getSortedNums alongside
it instead of wrapped around it.

82
00:05:19.930 --> 00:05:24.830
And notice what's important
here is that I first

83
00:05:24.830 --> 00:05:28.190
make a copy of the current state
that is going to be modified.

84
00:05:29.370 --> 00:05:33.585
I take some local variables called
origNumbers and origThreshold,

85
00:05:33.585 --> 00:05:35.919
I get copies of those current values.

86
00:05:35.919 --> 00:05:40.756
And then line 20, step two,
is I set up the environment to be

87
00:05:40.756 --> 00:05:45.880
what I want it to be, which is that
numbers is a copy of this array.

88
00:05:47.370 --> 00:05:48.490
Okay?

89
00:05:48.490 --> 00:05:50.528
It's a copy of the passed in array.

90
00:05:50.528 --> 00:05:53.542
And then I call
the insertSortedDescending.

91
00:05:53.542 --> 00:05:57.877
That's our thing that does all our
side effects that we don't like.

92
00:05:57.877 --> 00:06:00.845
It's gonna make changes to that
global variable numbers, and

93
00:06:00.845 --> 00:06:03.870
that SomeAPI.threshold,
both of those are gonna be changed,

94
00:06:03.870 --> 00:06:06.010
they're gonna be modified as side effects.

95
00:06:07.430 --> 00:06:13.740
And then on line 22, step 4,
we capture that changed state.

96
00:06:13.740 --> 00:06:16.500
In this case, it's only the numbers
array that we care about.

97
00:06:16.500 --> 00:06:19.300
We capture the new changed state.

98
00:06:19.300 --> 00:06:20.570
We save that.

99
00:06:21.700 --> 00:06:24.674
And the most critical piece of all,
line 5,

100
00:06:24.674 --> 00:06:29.469
we return all of the state that was
modified back to its original values.

101
00:06:33.350 --> 00:06:35.977
&gt;&gt; Kyle Simpson: And
finally, line 24, step 6,

102
00:06:35.977 --> 00:06:39.490
we return that new state
that we've computed.

103
00:06:41.040 --> 00:06:42.540
This is very brute force.

104
00:06:42.540 --> 00:06:46.670
It is very ugly and would get very
unmanageable very quickly if we had

105
00:06:46.670 --> 00:06:50.153
a more complex set of state,
like for example, the DOM.

106
00:06:50.153 --> 00:06:54.328
Capturing the current state of the DOM,
modifying it, and

107
00:06:54.328 --> 00:06:56.257
then resetting it is hard.

108
00:06:56.257 --> 00:06:58.090
Possible, but quite difficult.

109
00:06:59.260 --> 00:07:02.750
Capturing the current state of
your database, modifying it, and

110
00:07:02.750 --> 00:07:05.120
resetting it, really hard.

111
00:07:05.120 --> 00:07:07.930
Possible, but probably not worth it.

112
00:07:07.930 --> 00:07:11.767
But in this particular case, we had just
a couple of variables that were getting

113
00:07:11.767 --> 00:07:13.383
changed in a way we didn't like.

114
00:07:13.383 --> 00:07:17.365
And so we said we can capture those
values and then restore them.

115
00:07:17.365 --> 00:07:20.455
From the beginning of
the getSortedNums call on

116
00:07:20.455 --> 00:07:24.275
line 27 to the end of that function call,

117
00:07:24.275 --> 00:07:29.675
from the beginning to the end, during
that call, everything is all messed up.

118
00:07:29.675 --> 00:07:34.216
But by the end,
it's all back to the way it was before.

119
00:07:34.216 --> 00:07:34.800
Are you with me?

120
00:07:36.030 --> 00:07:41.330
So we have contained the observability of
that side effect to the function call.

121
00:07:43.400 --> 00:07:46.410
Even though getSortedNums is not

122
00:07:46.410 --> 00:07:50.450
actually a pure function from
the technical definition.

123
00:07:50.450 --> 00:07:54.815
We have achieved the greater,
the more important outcome,

124
00:07:54.815 --> 00:07:59.277
I argue, which is that line 27
runs as a pure function call.

125
00:07:59.277 --> 00:08:03.547
It satisfies all the conditions that
we want out of a pure function call,

126
00:08:03.547 --> 00:08:07.677
which is that it takes direct inputs,
it gives us a direct output, and

127
00:08:07.677 --> 00:08:12.242
it doesn't change anything else about
the state of the program afterwards.

128
00:08:12.242 --> 00:08:17.450
And it didn't rely upon anything about
the state of the program before.

129
00:08:17.450 --> 00:08:21.039
Those are all the things on our
check mark list that we want, and

130
00:08:21.039 --> 00:08:22.410
line 27 fulfills it.

131
00:08:22.410 --> 00:08:26.955
And so does 28, 29, 30, and 31.

132
00:08:26.955 --> 00:08:31.590
So this is another way of dealing with
side effects, is to contain their effects.

133
00:08:31.590 --> 00:08:33.820
In this case,
contain them to a single function call.

134
00:08:36.130 --> 00:08:37.220
Sometimes they're gonna happen.

135
00:08:38.310 --> 00:08:42.430
We want to reduce the surface area
where side effects happen at all costs.

136
00:08:42.430 --> 00:08:46.750
And if none of these things work, if you
can't write it pure from the beginning,

137
00:08:46.750 --> 00:08:50.730
if you can't refactor it to be pure
because now you know that's important,

138
00:08:50.730 --> 00:08:55.980
if you can't extract the impurities so
that it leaves a pure function.

139
00:08:55.980 --> 00:08:58.520
If you can't make a wrapper
function around it, and

140
00:08:58.520 --> 00:09:00.600
you can't make an adapter function.

141
00:09:00.600 --> 00:09:03.200
If you tried all five of those things and
none of that worked,

142
00:09:04.700 --> 00:09:09.020
you're stuck with the side-effect,
at least make it obvious.

143
00:09:10.290 --> 00:09:12.430
Contain it somewhere, make it obvious.

144
00:09:12.430 --> 00:09:16.141
So that if there are bugs, then the future
reader, the maintainer of your code,

145
00:09:16.141 --> 00:09:17.405
knows where to go looking.

146
00:09:20.246 --> 00:09:21.421
&gt;&gt; Kyle Simpson: How do we
feel about side effects?

147
00:09:21.421 --> 00:09:22.700
Give me a thumbs up, thumbs down.

148
00:09:22.700 --> 00:09:26.840
How are we feeling so far about this idea
of side effects and using pure functions.

149
00:09:29.150 --> 00:09:30.518
Yes?

150
00:09:30.518 --> 00:09:32.702
&gt;&gt; Speaker 2: I've heard before that also,

151
00:09:32.702 --> 00:09:38.770
mutating the state of parameters is
also considered to be unpure, impure.

152
00:09:38.770 --> 00:09:39.973
What are your thoughts on that?

153
00:09:39.973 --> 00:09:43.696
&gt;&gt; Kyle Simpson: Okay, so the question is
if I have a parameter that's passed in and

154
00:09:43.696 --> 00:09:45.260
I mutate the state of it.

155
00:09:45.260 --> 00:09:48.480
Well, unfortunately, we need to be
more specific around that wording.

156
00:09:48.480 --> 00:09:52.315
So let's look for example at
the insertSortedDescription, sorry,

157
00:09:52.315 --> 00:09:54.330
insertSortedDecending function.

158
00:09:54.330 --> 00:09:56.590
The one that's defined on line 9 here.

159
00:09:56.590 --> 00:10:01.290
If I passed in numbers rather than
refering to the global one but

160
00:10:01.290 --> 00:10:04.840
I still called numbers.splice on line 15.

161
00:10:04.840 --> 00:10:11.234
Or if we consider the previous slide,
where I was doing it on the array numbers.

162
00:10:11.234 --> 00:10:17.170
In both of those those cases, I would
be modifying the value by reference.

163
00:10:17.170 --> 00:10:18.621
So I'm not actually
changing the parameter.

164
00:10:18.621 --> 00:10:22.950
I didn't reassign a parameter
to a different value.

165
00:10:22.950 --> 00:10:27.890
I used a reference to mutate
a value at a distance.

166
00:10:29.130 --> 00:10:33.970
Using a reference to mutate a value at
a distance is absolutely a side effect.

167
00:10:33.970 --> 00:10:37.530
That's the whole reason we wanted
to avoid the numbers.splice here,

168
00:10:37.530 --> 00:10:38.879
cuz that is definitely a side effect.

169
00:10:40.220 --> 00:10:44.398
But taking a parameter that, say,
was passed in as the value for or

170
00:10:44.398 --> 00:10:48.351
even an array and reassigning it
to point to a different value,

171
00:10:48.351 --> 00:10:51.652
that doesn't have any effect
on the outside world.

172
00:10:51.652 --> 00:10:54.983
So when you mutate a parameter,
you have to ask,

173
00:10:54.983 --> 00:10:58.884
are you mutating the value
the parameter references, or

174
00:10:58.884 --> 00:11:02.553
are you mutating what
assignment the parameter has?

175
00:11:02.553 --> 00:11:04.845
The former of those is a bad side effect.

176
00:11:04.845 --> 00:11:06.520
The latter of those is totally fine.

