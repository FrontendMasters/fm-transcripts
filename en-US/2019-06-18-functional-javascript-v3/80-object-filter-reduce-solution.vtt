WEBVTT

1
00:00:00.140 --> 00:00:03.130
&gt;&gt; Kyle Simpson: All right, let's take
a look at the solution to part one of this

2
00:00:03.130 --> 00:00:03.850
exercise.

3
00:00:03.850 --> 00:00:07.673
Again, the task was to
implement the filter object and

4
00:00:07.673 --> 00:00:11.258
reduce object utilities
alongside of map object.

5
00:00:11.258 --> 00:00:14.272
So we're going to take
the same general approach,

6
00:00:14.272 --> 00:00:18.280
which is that we're definitely
going to be producing a new object.

7
00:00:19.640 --> 00:00:22.520
And we need to know the list of the keys.

8
00:00:22.520 --> 00:00:27.868
So we're gonna say Object.keys
of the passed in o.

9
00:00:27.868 --> 00:00:34.836
We are gonna loop over all,
&gt;&gt; Kyle Simpson: for (let key of keys).

10
00:00:34.836 --> 00:00:41.095
We're gonna loop over all of those
properties in our passed in o.

11
00:00:41.095 --> 00:00:43.235
And we're going to pass them
to a predicate function.

12
00:00:43.235 --> 00:00:51.398
So if the predicate function
with the value o[key].

13
00:00:51.398 --> 00:00:54.669
If that returns true, then we want for

14
00:00:54.669 --> 00:01:00.000
our new object to include that value and
at that key position.

15
00:01:00.000 --> 00:01:06.487
So we wanna say newObj[key] = o[key].

16
00:01:06.487 --> 00:01:09.394
And then after we've finished that loop,

17
00:01:09.394 --> 00:01:14.170
we know whatever is the contents of
new object, we can simply return.

18
00:01:22.107 --> 00:01:25.683
&gt;&gt; Kyle Simpson: We're gonna take
a not terribly dissimilar approach

19
00:01:25.683 --> 00:01:27.120
with reduce object.

20
00:01:27.120 --> 00:01:29.822
Except here,
because we're reducing agnostically,

21
00:01:29.822 --> 00:01:32.360
we don't even know what we're reducing to.

22
00:01:32.360 --> 00:01:36.980
But we're just gonna end up taking in an
initial value and returning that result.

23
00:01:36.980 --> 00:01:40.160
So I'll start out my result
equal to the initialValue.

24
00:01:41.810 --> 00:01:46.603
And then I'm going to run
through all of the keys in

25
00:01:46.603 --> 00:01:50.950
this object just exactly
like we did before.

26
00:01:50.950 --> 00:01:55.680
So I'll say var keys = Object.keys(o).

27
00:01:55.680 --> 00:01:59.920
We're going to run through
all of those keys.

28
00:01:59.920 --> 00:02:04.340
And for each value in our object,

29
00:02:04.340 --> 00:02:07.970
we're gonna call the reducer function and
get back the result.

30
00:02:07.970 --> 00:02:14.350
So for (let key of keys).

31
00:02:14.350 --> 00:02:19.970
And then we're going to say result =,
calling the reducer function

32
00:02:21.150 --> 00:02:25.890
with the current result,
whatever our current accumulator is,

33
00:02:25.890 --> 00:02:30.050
as well as the o[key].

34
00:02:30.050 --> 00:02:32.100
And then we will return the result.

35
00:02:33.450 --> 00:02:36.860
So the difference here, though, is that we
don't want to assume that we're gonna be

36
00:02:36.860 --> 00:02:43.070
producing a new object the way we do
with our filter and our map utilities.

37
00:02:43.070 --> 00:02:46.326
We just want to assume that whatever our
reducer function is returning to us,

38
00:02:46.326 --> 00:02:48.244
that's the thing that we'll be returning.

39
00:02:48.244 --> 00:02:53.140
Let's double-check to make sure that
this is going to work correctly.

40
00:02:53.140 --> 00:02:55.715
I'm gonna copy some stuff over.

41
00:03:05.720 --> 00:03:07.350
&gt;&gt; Kyle Simpson: And
then we will copy this stuff.

42
00:03:14.998 --> 00:03:18.489
&gt;&gt; Kyle Simpson: And
then because I'm using a curry here,

43
00:03:18.489 --> 00:03:21.890
probably gonna need to implement that.

44
00:03:21.890 --> 00:03:25.382
So just to run this,
just for our purposes.

45
00:03:28.567 --> 00:03:32.950
&gt;&gt; Kyle Simpson: I'll say = (fn).

46
00:03:45.160 --> 00:03:52.020
&gt;&gt; Kyle Simpson: Uh-oh, I didn't
implement the isOdd, of course not.

47
00:03:52.020 --> 00:03:55.790
Okay, sorry about that,
I didn't copy it over.

48
00:04:02.343 --> 00:04:03.967
&gt;&gt; Kyle Simpson: Got these
utilities down here.

49
00:04:13.971 --> 00:04:17.070
&gt;&gt; Kyle Simpson: And
there's our 38886, okay?

