WEBVTT

1
00:00:00.170 --> 00:00:04.753
&gt;&gt; Kyle Simpson: So read-only data
structures are data structures that never

2
00:00:04.753 --> 00:00:07.318
need to be mutated, that's key.

3
00:00:07.318 --> 00:00:11.460
A read-only data structure is a data
structure that never needs to be mutated

4
00:00:11.460 --> 00:00:12.460
ever again.

5
00:00:12.460 --> 00:00:16.618
You might create it and do some
mutation in its creation process, but

6
00:00:16.618 --> 00:00:21.653
at some point, you freeze it, you say
it's done, it's final, it's complete.

7
00:00:24.981 --> 00:00:26.172
&gt;&gt; Kyle Simpson: And then you move on.

8
00:00:26.172 --> 00:00:29.842
You use that in that final value form for
the rest of the program.

9
00:00:32.491 --> 00:00:34.847
&gt;&gt; Kyle Simpson: That actually is,
there's a lot of those.

10
00:00:34.847 --> 00:00:38.471
There's a lot of times when we create a
config object that we're gonna parse in to

11
00:00:38.471 --> 00:00:40.990
an Ajax call or something like that.

12
00:00:40.990 --> 00:00:44.635
That's an object that isn't gonna change
or at least it shouldn't otherwise,

13
00:00:44.635 --> 00:00:46.930
we're probably gonna have
bugs that we don't expect.

14
00:00:48.450 --> 00:00:52.687
So that's an example when we pass in an
object, when you pass in a configuration

15
00:00:52.687 --> 00:00:56.568
array or something like that,
you even take a JSON response from an API.

16
00:00:56.568 --> 00:00:58.285
That's a value that's done.

17
00:00:58.285 --> 00:01:03.030
It's come back from the database,
it's come back from the API, it's done.

18
00:01:03.030 --> 00:01:04.915
It ought to be marked as read-only.

19
00:01:04.915 --> 00:01:07.410
Cuz there's no reason for
us to be mucking with that

20
00:01:07.410 --> 00:01:10.720
in some way that's gonna end up
creating a missed expectation and

21
00:01:10.720 --> 00:01:12.330
therefore a bug somewhere
else in the code.

22
00:01:13.720 --> 00:01:17.149
Those are all data structures
that don't need to be mutated.

23
00:01:19.537 --> 00:01:23.310
&gt;&gt; Kyle Simpson: But that certainly
can't be all of our data structures.

24
00:01:23.310 --> 00:01:27.220
We certainly can't imagine a program
that would do anything useful

25
00:01:27.220 --> 00:01:32.030
if all of our data structures
were in this read-only state.

26
00:01:32.030 --> 00:01:34.720
Some of them, sure, but
all of them in a read-only

27
00:01:34.720 --> 00:01:38.670
state would mean a program that
was fixed and did nothing.

28
00:01:38.670 --> 00:01:40.393
And we could just delete it and move on.

29
00:01:45.418 --> 00:01:48.879
&gt;&gt; Kyle Simpson: So
when I take that processOrder function and

30
00:01:48.879 --> 00:01:55.260
I pass in an order to it, you'll notice
here that I'm trying to change it.

31
00:01:55.260 --> 00:01:59.910
Because I'm doing something that
makes sense only for the database.

32
00:01:59.910 --> 00:02:03.410
I'm not even thinking about what somebody
might have done with that order object

33
00:02:03.410 --> 00:02:04.800
after having called me.

34
00:02:04.800 --> 00:02:07.820
I'm just trying to make sure
there's a particular flag on it

35
00:02:07.820 --> 00:02:10.280
before I try to save it to the database.

36
00:02:10.280 --> 00:02:11.390
You see the mutation there?

37
00:02:12.500 --> 00:02:18.450
The mutation that occurs by reference
is by definition a side effect,

38
00:02:18.450 --> 00:02:19.760
we have an impure function.

39
00:02:19.760 --> 00:02:22.795
Of course, we have an impure function
because of the database call, but

40
00:02:22.795 --> 00:02:25.657
we have another impurity which can
create huge bugs in our program.

41
00:02:28.441 --> 00:02:30.963
&gt;&gt; Kyle Simpson: So
just because somebody may or

42
00:02:30.963 --> 00:02:36.105
may not remember to pass in object.freeze,
I have an even more

43
00:02:36.105 --> 00:02:41.159
important point to make about
this idea of value mutability.

44
00:02:41.159 --> 00:02:47.574
Which is if somebody passes you a value,
that is in its identity,

45
00:02:47.574 --> 00:02:52.357
mutable, something like an array or
an object,

46
00:02:52.357 --> 00:02:58.660
then it is incumbent upon you,
the author of the function.

47
00:02:58.660 --> 00:03:02.000
You don't know all of the call sites for
this function.

48
00:03:02.000 --> 00:03:04.950
You don't know whether they're
going to pass object.freeze or not.

49
00:03:06.360 --> 00:03:07.330
The best thing for

50
00:03:07.330 --> 00:03:12.070
you to do is to always assume that
it's a read-only data structure.

51
00:03:12.070 --> 00:03:15.284
Always assume that you're
not allowed to mutate it.

52
00:03:17.202 --> 00:03:19.958
&gt;&gt; Kyle Simpson: Don't assume
that because you mutate it and

53
00:03:19.958 --> 00:03:22.342
you don't see an error at that point,

54
00:03:22.342 --> 00:03:27.056
that nobody else is gonna try to pass
in an object.freeze data structure.

55
00:03:27.056 --> 00:03:29.257
In which case you would
have a fatal failure.

56
00:03:29.257 --> 00:03:31.965
Always assume that you're
not allowed to do line 3,

57
00:03:31.965 --> 00:03:34.010
you're not allowed to mutate it.

58
00:03:34.010 --> 00:03:34.550
So what do we do?

59
00:03:35.810 --> 00:03:39.420
We need to add a status field to it
before we save it to the database.

60
00:03:39.420 --> 00:03:43.650
The answer is,
you make a copy of the object.

61
00:03:43.650 --> 00:03:47.825
You make a copy of the object
which is what I'm doing on line 2.

62
00:03:47.825 --> 00:03:51.540
And that copy, I'm simply using the dot
dot dot operator, that's object spread.

63
00:03:51.540 --> 00:03:53.190
You make a copy of that object, and

64
00:03:53.190 --> 00:03:56.130
then you can mutate it
internally all that you want.

65
00:03:57.350 --> 00:04:00.967
Because you're not having a side
effect on the outside program.

66
00:04:02.621 --> 00:04:03.669
&gt;&gt; Kyle Simpson: You should always,

67
00:04:03.669 --> 00:04:07.440
always assume that it's a read-only
data structure, no matter what.

68
00:04:09.100 --> 00:04:13.550
So there's two sides of this issue,
and don't lose track of them.

69
00:04:13.550 --> 00:04:16.390
One side of the issue is that
when you call a function and

70
00:04:16.390 --> 00:04:18.600
you're going to pass in a data structure,

71
00:04:18.600 --> 00:04:24.220
do your reader the benefit of annotating
it that you want it to not be changed.

72
00:04:24.220 --> 00:04:27.140
Use something like object.freeze.

73
00:04:27.140 --> 00:04:31.880
And secondly, and maybe even more
importantly, when you write a function

74
00:04:31.880 --> 00:04:36.800
that receives data structures, treat
it as if it's read-only no matter what.

75
00:04:38.750 --> 00:04:42.001
Make a copy of it,
make your changes to your local copy.

76
00:04:44.500 --> 00:04:47.900
&gt;&gt; Kyle Simpson: That's how we deal
effectively with value mutability.

