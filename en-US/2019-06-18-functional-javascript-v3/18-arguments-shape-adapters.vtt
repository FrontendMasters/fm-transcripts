WEBVTT

1
00:00:00.400 --> 00:00:04.915
&gt;&gt; Kyle Simpson: We can also adapt the
shape of functions and this is where we're

2
00:00:04.915 --> 00:00:09.151
gonna really start to push your
thinking around functional programming.

3
00:00:09.151 --> 00:00:12.800
Because we're gonna introduce a concept
I'm sure many of you have heard

4
00:00:12.800 --> 00:00:13.420
this before.

5
00:00:13.420 --> 00:00:17.267
And maybe just didn't fully
connect with what it meant.

6
00:00:17.267 --> 00:00:21.485
Have you heard the term before,
higher order function?

7
00:00:21.485 --> 00:00:27.776
Sometimes it's abbreviated HOF,
H-O-F, okay, so what is a HOF?

8
00:00:27.776 --> 00:00:31.165
Sounds much more complicated
than it actually is.

9
00:00:31.165 --> 00:00:34.090
That's the cool part,
is that when we uncover these meanings,

10
00:00:34.090 --> 00:00:36.373
a lot of this stuff is
actually pretty intuitive.

11
00:00:36.373 --> 00:00:40.330
Not always, but some of it anyway,
so what is a higher order function?

12
00:00:40.330 --> 00:00:45.219
Well, put simply,
a higher-order function is

13
00:00:45.219 --> 00:00:50.238
a function that either receives,
as its inputs.

14
00:00:50.238 --> 00:00:57.860
One or more functions,
and/or returns one or more functions.

15
00:00:57.860 --> 00:01:02.369
That is if the value's going in, or
the value's coming out our functions,

16
00:01:02.369 --> 00:01:05.545
then that thing itself is
the higher order function.

17
00:01:05.545 --> 00:01:11.297
So a thing that doesn't receive functions,
we would call it a single order function.

18
00:01:11.297 --> 00:01:16.208
And if it receives functions or returns
them, we call it a higher order function.

19
00:01:19.225 --> 00:01:23.537
&gt;&gt; Kyle Simpson: So right on line 1, we
see a utility that I've now called unary.

20
00:01:23.537 --> 00:01:29.276
You see that it receives a function
denoted by the parameter fn.

21
00:01:29.276 --> 00:01:33.346
And it returns another function back,
called 1, in this case.

22
00:01:36.415 --> 00:01:39.157
&gt;&gt; Kyle Simpson: That's called
a higher order function,

23
00:01:39.157 --> 00:01:42.535
the unary utility here is
a higher order function.

24
00:01:42.535 --> 00:01:44.430
What is it doing?

25
00:01:44.430 --> 00:01:49.204
Well, it's kinda interesting because that
one function that gets returned back,

26
00:01:49.204 --> 00:01:51.098
it only has one named parameter.

27
00:01:53.577 --> 00:01:54.099
&gt;&gt; Kyle Simpson: You may or

28
00:01:54.099 --> 00:01:58.281
may not be aware that in JavaScript all
functions are what we call variadic.

29
00:01:58.281 --> 00:02:01.697
Meaning, it doesn't matter how
many parameters are declared,

30
00:02:01.697 --> 00:02:04.380
you can pass as many arguments or
as few as you want.

31
00:02:04.380 --> 00:02:08.230
You can define a function that expects
three and you can pass four to it.

32
00:02:08.230 --> 00:02:11.575
You can find a function that expects
three and only past one to it.

33
00:02:11.575 --> 00:02:15.652
JavaScript is not gonna say [SOUND]
you're doing something wrong,

34
00:02:15.652 --> 00:02:17.627
they're variadic functions.

35
00:02:17.627 --> 00:02:23.267
So if I were to take a function that
might expect four and pass it, like for

36
00:02:23.267 --> 00:02:28.366
example, the f from Line 13,
one that expects multiple ones.

37
00:02:28.366 --> 00:02:35.648
It's an n-ary function, but if I pass it
to unary, what I get back, Line 17 g.

38
00:02:35.648 --> 00:02:40.100
G is a new function, which has the name
1 that we see there on line 2.

39
00:02:40.100 --> 00:02:43.784
G, down on line 20,
when we pass in four inputs,

40
00:02:43.784 --> 00:02:48.258
how many inputs actually make
it to the underlying function?

41
00:02:53.007 --> 00:02:54.023
&gt;&gt; Kyle Simpson: How many?

42
00:02:54.023 --> 00:02:59.470
Just one, because on line 2,
we named just a single parameter arg.

43
00:02:59.470 --> 00:03:04.350
So in other words, we took a function
whose shape was to be n-ary.

44
00:03:04.350 --> 00:03:08.649
And we reduced its shape, we restricted
its shape such that it is, what?

45
00:03:10.554 --> 00:03:14.384
&gt;&gt; Kyle Simpson: It's unary,
that's what the unary utility does,

46
00:03:14.384 --> 00:03:20.070
it's a higher order function that adapts
the shape of a function to be unary.

47
00:03:20.070 --> 00:03:22.945
We'll see used cases
throughout the lecture and

48
00:03:22.945 --> 00:03:25.967
exercises where that kind
of thing will be useful.

49
00:03:25.967 --> 00:03:30.322
But I want you to get more comfortable
with the idea that a function of one shape

50
00:03:30.322 --> 00:03:32.669
can be adapted to have a different shape.

51
00:03:32.669 --> 00:03:37.960
That's critical, and that's a key takeaway
from this higher order functions pattern.

52
00:03:37.960 --> 00:03:40.411
Is that we can take any function and
adapt its shape.

53
00:03:40.411 --> 00:03:43.573
And that's critical when we have
two lego pieces that don't fit,

54
00:03:43.573 --> 00:03:45.870
and we need to sort of make ' fit.

55
00:03:45.870 --> 00:03:50.920
We gotta make an adapter, so that they
fit, and that's what these utilities do.

56
00:03:50.920 --> 00:03:53.870
In fact, virtually all
the utilities that you'll find in

57
00:03:53.870 --> 00:03:57.890
whichever functional programming
library you choose to use.

58
00:03:57.890 --> 00:04:00.898
RAM, Lodash whatever,
whichever one you pick,

59
00:04:00.898 --> 00:04:04.772
all of the utilities are these
kinds of higher order functions.

60
00:04:04.772 --> 00:04:07.112
Almost all of them do this kind of thing.

61
00:04:07.112 --> 00:04:10.548
They take a single function in,
they do something,

62
00:04:10.548 --> 00:04:15.561
make a new function that does something
different, has a different shape.

63
00:04:15.561 --> 00:04:19.071
So you're gonna see this kind of
pattern all over the place, and

64
00:04:19.071 --> 00:04:21.874
what's critical is your
takeaway at this moment.

65
00:04:21.874 --> 00:04:29.120
Is that line 1 through 5 is not some sort
of higher black magic kind of coding.

66
00:04:29.120 --> 00:04:32.690
It should feel very tractable,
very sensible to you.

67
00:04:32.690 --> 00:04:37.070
Okay, I can see I take a function and
make another function wrapped around it.

68
00:04:37.070 --> 00:04:41.936
And that's the key, because you as
a functional programmer have to get

69
00:04:41.936 --> 00:04:46.007
comfortable with making your
own higher order functions.

70
00:04:46.007 --> 00:04:49.890
Not just using the result of a higher
order function that's provided to you, but

71
00:04:49.890 --> 00:04:50.756
making your own.

72
00:04:50.756 --> 00:04:54.400
When you see that I have this piece and
this piece and they don't fit.

73
00:04:54.400 --> 00:05:01.048
The functional programmer says, I can see
what kind of adapter I need between them.

74
00:05:01.048 --> 00:05:03.405
And I make myself a utility to do that.

75
00:05:05.738 --> 00:05:12.070
&gt;&gt; Kyle Simpson: And then I create
the shape adjusted adapter, makes sense?

76
00:05:13.322 --> 00:05:17.266
So unary,
g would be called the unary of f,

77
00:05:17.266 --> 00:05:21.112
line 18 we call h equals the binary of f.

78
00:05:21.112 --> 00:05:25.360
So on line 21,
when you see h receiving four arguments.

79
00:05:25.360 --> 00:05:29.828
The underlying function, the f function,
only receives two of them,

80
00:05:29.828 --> 00:05:31.545
we've made it the binary.

81
00:05:31.545 --> 00:05:35.466
If you haven't dealt with higher
order functions before, expect for

82
00:05:35.466 --> 00:05:38.198
that brain to feel a little, I don't know.

83
00:05:38.198 --> 00:05:40.944
But this is critical,
it's going to be core and

84
00:05:40.944 --> 00:05:44.180
central to all of your future
functional programming.

