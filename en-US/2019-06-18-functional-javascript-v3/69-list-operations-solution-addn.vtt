WEBVTT

1
00:00:00.250 --> 00:00:04.670
&gt;&gt; Kyle Simpson: All right,
let's get to the tough stuff.

2
00:00:04.670 --> 00:00:07.890
Let's look at item number
five in the readme,

3
00:00:07.890 --> 00:00:11.970
which says, define an addn utility.

4
00:00:11.970 --> 00:00:16.950
Addn is supposed to receive
a list of functions,

5
00:00:16.950 --> 00:00:20.280
which I'll call fns,
it receives a list of functions.

6
00:00:20.280 --> 00:00:24.400
And it needs to add all of
the values that are represented by

7
00:00:24.400 --> 00:00:28.160
all of those functions together and
return us a final result.

8
00:00:28.160 --> 00:00:31.510
So before I even write it,
it should look this.

9
00:00:31.510 --> 00:00:33.110
We should be able to call addn and

10
00:00:33.110 --> 00:00:37.480
we should be able to say something
like constant of three and

11
00:00:37.480 --> 00:00:45.050
constant of seven and five and nine.

12
00:00:45.050 --> 00:00:49.860
And that's four different functions and
let's throw one more in there.

13
00:00:49.860 --> 00:00:53.390
Let's throw a constant of 11 and

14
00:00:53.390 --> 00:00:57.405
if I'm doing my math correctly
that should end up giving us 35.

15
00:00:57.405 --> 00:00:59.030
Okay?

16
00:00:59.030 --> 00:01:00.780
So that's the thing that
we want to produce.

17
00:01:02.000 --> 00:01:05.820
We wanna be able to pass in any number of
functions that are wrapped around values

18
00:01:05.820 --> 00:01:07.350
and have it add all of those together.

19
00:01:08.570 --> 00:01:10.380
Remember, in the setup to this exercise,

20
00:01:10.380 --> 00:01:15.100
I pointed out that if you take the eager
approach, which is the call add two

21
00:01:15.100 --> 00:01:19.120
with two of these functions, and
then immediately you get a number.

22
00:01:19.120 --> 00:01:22.310
Well now you have a number but
you still have a bunch of functions.

23
00:01:22.310 --> 00:01:25.040
And a number and a function are not
something that can work together.

24
00:01:25.040 --> 00:01:27.120
They are not of the same sort.

25
00:01:27.120 --> 00:01:31.070
But if we were to take the approach
of deferring that addition

26
00:01:31.070 --> 00:01:33.380
by wrapping everything in functions, well,

27
00:01:33.380 --> 00:01:37.170
then everything stays at the function
level and they all work together better.

28
00:01:38.680 --> 00:01:41.020
I'm gonna implement addn
three different times.

29
00:01:41.020 --> 00:01:46.450
The first time I'm gonna implement it, I'm
gonna do it with an iterative approach.

30
00:01:46.450 --> 00:01:50.360
Then we'll try the recursive, and
then we'll try the list operator approach.

31
00:01:50.360 --> 00:01:52.610
All right, so,
what is my strategy gonna be?

32
00:01:52.610 --> 00:01:55.590
Well, let me consider
sort of a base condition.

33
00:01:55.590 --> 00:01:59.880
You remember when we talked about
recursion earlier in the course,

34
00:01:59.880 --> 00:02:01.430
we talked about base conditions.

35
00:02:01.430 --> 00:02:04.517
And even though this isn't
a recursive solution,

36
00:02:04.517 --> 00:02:09.346
we still basically want to ask, how do I
know when my iteration needs to finish?

37
00:02:09.346 --> 00:02:13.986
Well, if my fns dot length
is greater than two,

38
00:02:13.986 --> 00:02:17.358
I'll just do a placeholder here.

39
00:02:17.358 --> 00:02:24.906
If fns dot length is greater than two
then I know I need to do more work.

40
00:02:24.906 --> 00:02:28.300
But if addn is passed only two functions,
and

41
00:02:28.300 --> 00:02:33.640
we're just gonna assume for our purposes
that we don't pass in any fewer than two.

42
00:02:33.640 --> 00:02:36.340
But if it's been passed two functions,

43
00:02:36.340 --> 00:02:38.920
then we're already sort
of done with the work.

44
00:02:38.920 --> 00:02:43.736
So all we really need to do is call
the add to utility with fns of zero and

45
00:02:43.736 --> 00:02:44.580
fns of one.

46
00:02:45.900 --> 00:02:47.970
That's our base condition, right?

47
00:02:47.970 --> 00:02:51.770
We only need to do extra work if
there are more functions in the list.

48
00:02:53.420 --> 00:02:59.300
So I'm gonna turn this from being an if
statement into being a while statement.

49
00:02:59.300 --> 00:03:04.990
I'm gonna iterate until I get my
fns array down to a length of two.

50
00:03:04.990 --> 00:03:09.200
And I'm going to be
modifying this fns array so

51
00:03:09.200 --> 00:03:11.720
immediately you should have
a red flag that pops up.

52
00:03:11.720 --> 00:03:15.830
We definitely want to make a copy
of the fns array rather than,

53
00:03:17.940 --> 00:03:20.519
I'm sorry,
I forgot that we need to be gathering.

54
00:03:22.580 --> 00:03:25.630
If we're passing them separately,
we need to be gathering into an array.

55
00:03:25.630 --> 00:03:27.880
So we definitely wanna
make a copy of an array.

56
00:03:27.880 --> 00:03:32.720
Although in this particular case, the fns
array, since it was gathered for us,

57
00:03:32.720 --> 00:03:34.100
it's not referenced to anywhere else.

58
00:03:34.100 --> 00:03:35.934
So it's probably okay for us to modify.

59
00:03:35.934 --> 00:03:38.830
But generally,
you wanna make a copy of something and

60
00:03:38.830 --> 00:03:41.400
not modify something unless it's
something that you actually own.

61
00:03:42.810 --> 00:03:45.920
Okay, so let's modify our array.

62
00:03:45.920 --> 00:03:50.330
Each time we iterate through,
we want to reduce the array length by one.

63
00:03:51.400 --> 00:03:55.260
The way we're gonna do that is to take
the first two elements in the array,

64
00:03:55.260 --> 00:03:57.210
which are gonna be functions, and

65
00:03:57.210 --> 00:04:01.569
we're gonna make a new function that
wraps around both of those functions.

66
00:04:03.260 --> 00:04:07.890
So I'm gonna basically try to pull off
the first two elements of the array.

67
00:04:07.890 --> 00:04:10.760
Remember, every time I iterate, I'm gonna
have a new array that I'm looking at.

68
00:04:10.760 --> 00:04:13.030
I'm gonna pull off the first
two elements of the array and

69
00:04:13.030 --> 00:04:14.860
I'm gonna use an array
D structure to do that.

70
00:04:14.860 --> 00:04:18.940
I'm gonna say let and
then we'll have fn0 and

71
00:04:18.940 --> 00:04:23.300
fn1 will be the first two elements in that
array and then I'll gather everything else

72
00:04:23.300 --> 00:04:28.260
up into a rest argument and
I will destructure the fns array.

73
00:04:30.070 --> 00:04:32.620
So I'm simply saying, give me a variable
that points to the first one,

74
00:04:32.620 --> 00:04:34.580
a variable that points to the second one,
and

75
00:04:34.580 --> 00:04:37.580
then gather everything else up into
a secondary array called rest.

76
00:04:40.240 --> 00:04:45.110
Now that I have fns of zero and
fns of one, those two functions can be

77
00:04:45.110 --> 00:04:51.320
wrapped in a function and that function
can be inserted back into the fns list.

78
00:04:51.320 --> 00:04:57.506
So what I'm gonna do is redefine
fns to point at a function here,

79
00:04:57.506 --> 00:05:01.517
which we'll define in just a moment, and

80
00:05:01.517 --> 00:05:05.310
everything that's in the rest array.

81
00:05:05.310 --> 00:05:07.837
So we'll spread out whatever's
left in the rest array.

82
00:05:11.250 --> 00:05:13.960
&gt;&gt; Kyle Simpson: What is
this function going to do?

83
00:05:13.960 --> 00:05:17.220
Well, we're trying to defer the add2 work,

84
00:05:17.220 --> 00:05:21.380
rather than doing the add2 work now,
we want to defer the add2 work.

85
00:05:21.380 --> 00:05:24.643
So this function just simply needs

86
00:05:24.643 --> 00:05:29.375
to say return add2 with fns of zero and
fns of one.

87
00:05:34.020 --> 00:05:36.140
&gt;&gt; Kyle Simpson: Conceptualize
what's happening here.

88
00:05:36.140 --> 00:05:40.230
We're going to be taking two functions
that have numbers in them and

89
00:05:40.230 --> 00:05:44.710
replacing those two with a single function
that will eventually add them and

90
00:05:44.710 --> 00:05:49.160
has not added them yet but
will eventually add them together, okay?

91
00:05:49.160 --> 00:05:53.764
And that function is now alongside of a
bunch of other single functions that have

92
00:05:53.764 --> 00:05:54.803
numbers in them.

93
00:05:54.803 --> 00:05:58.430
Every time we loop we take two
functions and make them into one and

94
00:05:58.430 --> 00:06:01.520
then we take two more functions and
make them into one,

95
00:06:01.520 --> 00:06:05.080
so the very first function in this
array just gets as a bigger and

96
00:06:05.080 --> 00:06:09.649
bigger and bigger and bigger function
wrapped around function, wrapped around

97
00:06:09.649 --> 00:06:14.500
function until at the very end,
when functions of length is equal to two.

98
00:06:14.500 --> 00:06:17.440
We have a giant function
in the first position and

99
00:06:17.440 --> 00:06:20.949
a singular value function
in the last position.

100
00:06:22.200 --> 00:06:26.510
And we pass both of those
into the add utility.

101
00:06:26.510 --> 00:06:30.357
That big function, which will be
in the position of fns of zero,

102
00:06:30.357 --> 00:06:35.346
it collapses itself, it computes all of
its partial additions by calling add2 and

103
00:06:35.346 --> 00:06:40.270
adding that to add2 and adding that to
add2 and it gives us back the number.

104
00:06:40.270 --> 00:06:42.420
And that gets added to
whatever is in fns of one.

105
00:06:43.760 --> 00:06:44.920
So let's test this.

106
00:06:44.920 --> 00:06:50.200
If my math was correct, this one should
have produced for us the value 35.

107
00:06:50.200 --> 00:06:55.230
So let's test and see how it works.

108
00:07:00.352 --> 00:07:07.530
&gt;&gt; Kyle Simpson: [LAUGH], of course, I get
back this add, I need to call add2, right?

109
00:07:07.530 --> 00:07:09.110
Because that's the utility we're using.

110
00:07:11.530 --> 00:07:12.455
And there we have the 35.

111
00:07:15.954 --> 00:07:18.220
&gt;&gt; Kyle Simpson: Let me make
sure I fix that before I forget.

112
00:07:18.220 --> 00:07:19.710
I used the wrong function.

113
00:07:19.710 --> 00:07:21.640
I wanna call add2, not add.

114
00:07:23.680 --> 00:07:27.770
Okay, any questions about
the iterative approach that I took?

115
00:07:29.600 --> 00:07:32.850
Do you see why I was talking
about the hint in the setup for

116
00:07:32.850 --> 00:07:36.670
our exercise that if you defer
the work it makes things a lot easier?

117
00:07:36.670 --> 00:07:40.160
By making that into a function
that we'll do the add2 later,

118
00:07:40.160 --> 00:07:43.820
we keep everything at the function level
and functions and functions and functions,

119
00:07:43.820 --> 00:07:45.120
they all just keep working together.

120
00:07:48.412 --> 00:07:51.849
&gt;&gt; Kyle Simpson: All right, let's try
a recursive approach to this problem.

121
00:08:01.841 --> 00:08:05.210
&gt;&gt; Kyle Simpson: I'm still
gonna be taking in a functions.

122
00:08:05.210 --> 00:08:07.420
This time I'm gonna
actually pass in an array.

123
00:08:07.420 --> 00:08:10.700
That's probably a better way rather
than passing them in individually.

124
00:08:10.700 --> 00:08:14.410
We probably should be passing
them in as actual arrays.

125
00:08:14.410 --> 00:08:15.690
So let's do that.

126
00:08:15.690 --> 00:08:19.799
Let's just change to passing in
a real array rather than passing n

127
00:08:19.799 --> 00:08:24.030
individual values.

128
00:08:24.030 --> 00:08:29.170
And what I know about this functions
array is that it has elements,

129
00:08:29.170 --> 00:08:32.190
again, we know we're always
going to pass at least two,

130
00:08:32.190 --> 00:08:35.620
we don't need to worry about the zero or
the one case here.

131
00:08:35.620 --> 00:08:40.510
So I could just destructure
the argument to the function.

132
00:08:41.520 --> 00:08:45.290
So instead of having an fns, I'm just
going to do a destructuring pattern here

133
00:08:45.290 --> 00:08:48.700
that takes fns of zero,
fns of one and everything else.

134
00:08:48.700 --> 00:08:52.810
And I'm gonna literally use the exact
same strategy as I used in the iterative

135
00:08:52.810 --> 00:09:01.990
approach, which is to say, if rest
length is greater than zero basically.

136
00:09:01.990 --> 00:09:07.215
So if rest dot length is greater
than zero, then what we're gonna

137
00:09:07.215 --> 00:09:13.105
need to do is call recursively and
pass along a new function with fn zero and

138
00:09:13.105 --> 00:09:17.450
fn one in it,
along with everything else in rest.

139
00:09:17.450 --> 00:09:22.350
So we're gonna call addn recursively and
the array that we're gonna

140
00:09:22.350 --> 00:09:26.870
pass in is an array that includes
that function that we just did.

141
00:09:26.870 --> 00:09:29.580
The same function here,
which I'll just copy and paste.

142
00:09:29.580 --> 00:09:32.803
So I don't have to re-type it.

143
00:09:35.636 --> 00:09:40.510
&gt;&gt; Kyle Simpson: And then everything else.

144
00:09:40.510 --> 00:09:45.520
So each time we recurse,
we're reducing our list length by one.

145
00:09:45.520 --> 00:09:49.040
Exactly as we were doing iteratively.

146
00:09:49.040 --> 00:09:51.980
Until we get to the base condition.

147
00:09:51.980 --> 00:09:55.460
Which I could've rewritten and I'm gonna
actually rewrite just for clarity.

148
00:09:55.460 --> 00:10:02.368
I could say if rest dot length equals two,
then I can return add2 with fn zero,

149
00:10:02.368 --> 00:10:06.464
I'm sorry, equals zero,
fn zero and fn one.

150
00:10:06.464 --> 00:10:11.715
In other words if there's no
other functions fn zero and

151
00:10:11.715 --> 00:10:15.920
fn one are our only two then just do that.

152
00:10:15.920 --> 00:10:18.213
Otherwise, do the recursive return.

153
00:10:18.213 --> 00:10:23.507
&gt;&gt; Kyle Simpson: This recursive
return makes a new array,

154
00:10:23.507 --> 00:10:27.900
which has one fewer element in it.

155
00:10:27.900 --> 00:10:30.780
And we keep making that array smaller and
smaller and smaller and

156
00:10:30.780 --> 00:10:33.910
smaller until we get an array of size two.

157
00:10:33.910 --> 00:10:37.640
Which leaves rest with array length
of zero, and then we're done.

158
00:10:40.290 --> 00:10:45.160
Let's try that implementation of addn and
make sure that it still works.

159
00:10:56.384 --> 00:10:58.065
&gt;&gt; Kyle Simpson: Uh-oh, I made a mistake.

160
00:10:58.065 --> 00:10:59.425
Let's see,
where did I make a mistake here?

161
00:11:05.519 --> 00:11:06.955
&gt;&gt; Kyle Simpson: I didn't
put the arrays in here.

162
00:11:06.955 --> 00:11:08.110
That's right.

163
00:11:08.110 --> 00:11:13.820
Forgot, okay, we need to put in
the array and that should work.

164
00:11:13.820 --> 00:11:15.046
There we go.
Okay?

165
00:11:15.046 --> 00:11:18.970
So our addn recursive is
doing the same work and

166
00:11:18.970 --> 00:11:22.420
basically the same strategy
as our iterative approach.

167
00:11:23.660 --> 00:11:28.407
By the way, do you notice anything

168
00:11:28.407 --> 00:11:33.490
about our recursive solution here?

169
00:11:33.490 --> 00:11:38.406
Do you notice anything about how
our function calls are in proper

170
00:11:38.406 --> 00:11:40.060
tail call position?

171
00:11:40.060 --> 00:11:43.720
And these function calls are in proper
tail call position, we're creating a big,

172
00:11:43.720 --> 00:11:47.870
big, big nested hairy mess of functions,
but every single one of them,

173
00:11:47.870 --> 00:11:51.610
the whole tree of functions
are all in tail call position.

174
00:11:51.610 --> 00:11:55.770
Which means, if we were to run this
in a tail call enabled environment,

175
00:11:55.770 --> 00:12:01.720
we would take the benefit of tail call
optimization, of proper tail calls.

176
00:12:02.910 --> 00:12:04.100
Okay.

177
00:12:04.100 --> 00:12:09.317
Let's go back and
let's try it one final time.

178
00:12:09.317 --> 00:12:12.300
This time we're gonna do
it with a list operator.

179
00:12:14.130 --> 00:12:15.830
You can probably guess which one.

180
00:12:19.116 --> 00:12:22.262
&gt;&gt; Kyle Simpson: We want to
move through the list and

181
00:12:22.262 --> 00:12:26.790
we want to combine two values into one.

182
00:12:26.790 --> 00:12:31.080
And then combine two more values into one
and combine two more values into one.

183
00:12:31.080 --> 00:12:32.370
What does that sound like to you?

184
00:12:34.310 --> 00:12:35.790
What list operation does that sound like?

185
00:12:38.680 --> 00:12:42.720
What do we do every time we have
a function of a shape that takes two

186
00:12:42.720 --> 00:12:45.300
values and it ends up producing-
&gt;&gt; Speaker 2: Reduce.

187
00:12:45.300 --> 00:12:46.650
&gt;&gt; Kyle Simpson: That's a reduce, right?

188
00:12:46.650 --> 00:12:50.500
So our fundamental strategy here is
very similar to the previous one.

189
00:12:50.500 --> 00:12:55.210
[LAUGH] Which is, we're going
to do a reduce on the fns array.

190
00:12:56.500 --> 00:12:58.700
Reduce requires two inputs, right?

191
00:12:58.700 --> 00:13:02.040
It requires a reducer and
an initial value.

192
00:13:04.085 --> 00:13:06.220
&gt;&gt; Kyle Simpson: So
we're gonna write a reducer.

193
00:13:08.424 --> 00:13:11.020
&gt;&gt; Kyle Simpson: And
then we're gonna need an initial value.

194
00:13:11.020 --> 00:13:13.400
So what should that initial value be here?

195
00:13:14.980 --> 00:13:19.590
We could pass the identity
function in as the initial value.

196
00:13:19.590 --> 00:13:23.120
Whatever gets passed into it
just gets passed right back out.

197
00:13:23.120 --> 00:13:28.200
But there's a trick, as we mentioned
earlier, that the JavaScript array reduce,

198
00:13:28.200 --> 00:13:31.810
the one that's built into JavaScript
arrays, it is a shortcut that if you

199
00:13:31.810 --> 00:13:36.500
don't provide an initial value,
it uses the first value in the list

200
00:13:36.500 --> 00:13:40.020
as the initial value, and it starts
the reduction at the second position.

201
00:13:41.020 --> 00:13:44.640
So that turns out to be really convenient
for us because that's what we want here.

202
00:13:44.640 --> 00:13:50.270
We just want functions to start composing
themselves, combining themselves together.

203
00:13:50.270 --> 00:13:54.480
All right, so what are we gonna call
the two parameters to our reducer?

204
00:13:54.480 --> 00:13:59.280
Canonically they're usually referred to as
acc for accumulator and then v for value.

205
00:13:59.280 --> 00:14:01.690
But I always like to give
them more descriptive names,

206
00:14:01.690 --> 00:14:06.600
so what's a good descriptive name for
this thing that we keep building up?

207
00:14:06.600 --> 00:14:10.070
At the end, as we go along our reduce?

208
00:14:10.070 --> 00:14:13.360
Well, our strategy has been
to take two functions and

209
00:14:13.360 --> 00:14:15.350
make them into a bigger function.

210
00:14:15.350 --> 00:14:18.180
So I'm going to call
this a composed function.

211
00:14:19.330 --> 00:14:22.520
And I'm going to call each
value that comes in the fn.

212
00:14:24.090 --> 00:14:27.475
We could have maybe been even cheeky
about it and called this big fn.

213
00:14:27.475 --> 00:14:30.272
[LAUGH] Because it's a bigger and
bigger and bigger function, right?

214
00:14:30.272 --> 00:14:32.590
Bigger and deeper and deeper function.

215
00:14:32.590 --> 00:14:34.400
We'll leave it at that just
because that's fun and

216
00:14:34.400 --> 00:14:37.570
it's towards the end of
this unit of discussion.

217
00:14:38.590 --> 00:14:41.701
Okay, so, our strategy then is,
we get these two things and

218
00:14:41.701 --> 00:14:43.970
we need to compose them together.

219
00:14:43.970 --> 00:14:45.740
We need to reduce them rather.

220
00:14:45.740 --> 00:14:47.530
So how do we reduce them?

221
00:14:47.530 --> 00:14:52.080
We make a new value,
which is a function, and

222
00:14:52.080 --> 00:14:56.970
that function calls add2
with our two functions.

223
00:14:59.700 --> 00:15:04.320
It's exactly the same function as we did,
and it's basically the same strategy here.

224
00:15:04.320 --> 00:15:07.150
Now what is the end result
of our full reduce?

225
00:15:07.150 --> 00:15:09.640
After we've run through
the entire list and

226
00:15:09.640 --> 00:15:12.990
made functions and functions and functions
into this bigger and bigger function.

227
00:15:12.990 --> 00:15:14.560
What is the end result
of that whole thing?

228
00:15:19.918 --> 00:15:23.540
&gt;&gt; Kyle Simpson: A big function and
we don't want a big function, do we?

229
00:15:23.540 --> 00:15:25.180
We actually want the computed value.

230
00:15:25.180 --> 00:15:26.950
So what do we need to do?

231
00:15:26.950 --> 00:15:28.849
Do a final execution of that function.

232
00:15:29.870 --> 00:15:30.700
To give us the value.

233
00:15:32.730 --> 00:15:38.020
Let's try this final implementation
of addn and see how it works.

234
00:15:42.319 --> 00:15:48.051
&gt;&gt; Kyle Simpson: We should still get 35,
and there we go, there's 35.

