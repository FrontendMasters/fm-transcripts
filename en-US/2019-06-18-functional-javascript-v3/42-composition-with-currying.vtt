WEBVTT

1
00:00:00.140 --> 00:00:02.517
&gt;&gt; Kyle Simpson: Let's look
at how currying can be so

2
00:00:02.517 --> 00:00:04.981
useful combined with composition.

3
00:00:08.069 --> 00:00:11.660
&gt;&gt; Kyle Simpson: I've got
three functions here.

4
00:00:11.660 --> 00:00:15.270
Two of them are binary and
one of them is unary.

5
00:00:15.270 --> 00:00:19.250
The sum and the divBy are binary,
the triple is unary.

6
00:00:20.560 --> 00:00:23.720
Now I'd like to do a composition of these.

7
00:00:23.720 --> 00:00:26.680
But you notice that we
saw in our composition

8
00:00:26.680 --> 00:00:30.310
all of the functions that we did
compositions with our unary.

9
00:00:30.310 --> 00:00:34.870
Why do you suppose we really
only compose unitary functions?

10
00:00:34.870 --> 00:00:37.245
Can anybody guess, can anybody tell me?

11
00:00:40.059 --> 00:00:42.214
&gt;&gt; Speaker 2: Readability.

12
00:00:42.214 --> 00:00:43.446
&gt;&gt; Kyle Simpson: Not really.

13
00:00:43.446 --> 00:00:48.362
There's an actual behavioral reason
why you're basically only ever

14
00:00:48.362 --> 00:00:50.702
gonna compose unary functions.

15
00:00:53.302 --> 00:00:54.630
&gt;&gt; Kyle Simpson: Think about shapes.

16
00:00:56.330 --> 00:00:57.950
Think about it this way.

17
00:00:57.950 --> 00:01:01.750
What would it take to take
the output of triple and

18
00:01:01.750 --> 00:01:03.910
make it the input to the some function?

19
00:01:05.990 --> 00:01:06.923
&gt;&gt; Speaker 3: You have two outputs.

20
00:01:06.923 --> 00:01:09.120
&gt;&gt; Kyle Simpson: You have
that two outputs, right?

21
00:01:09.120 --> 00:01:11.000
Cuz some expects two inputs.

22
00:01:12.070 --> 00:01:16.660
Because of the way functions generally
only produce a single output.

23
00:01:16.660 --> 00:01:21.070
Really, the only natural way to
compose a series of functions is for

24
00:01:21.070 --> 00:01:22.980
them to all be unary.

25
00:01:22.980 --> 00:01:25.980
So, all take one input,
produce one output.

26
00:01:25.980 --> 00:01:29.840
And one output becomes one input, and one
input becomes one output, and so forth.

27
00:01:31.650 --> 00:01:36.520
So there's a reason, shape-wise,
type signature-wise, why it's

28
00:01:36.520 --> 00:01:41.100
vastly more common and more convenient for
you to composed unary functions.

29
00:01:41.100 --> 00:01:43.300
Here I've got one unary function,
which is good,

30
00:01:43.300 --> 00:01:47.630
but how would I express that composition?

31
00:01:47.630 --> 00:01:49.900
I mean, that is a composition,
but it's manual.

32
00:01:49.900 --> 00:01:53.565
How would I express that as
a call to the compose function?

33
00:01:57.065 --> 00:01:59.335
I've got a sum which expects two values.

34
00:01:59.335 --> 00:02:00.515
That doesn't work.

35
00:02:00.515 --> 00:02:02.855
And I've got a divBy which
expects a two values.

36
00:02:02.855 --> 00:02:03.785
That also doesn't work.

37
00:02:07.005 --> 00:02:12.246
Well, what about currying the sum and
the divBy functions,

38
00:02:12.246 --> 00:02:18.328
and then providing two R composition,
this is a now a unary function.

39
00:02:18.328 --> 00:02:20.290
And this is now a unary function.

40
00:02:22.050 --> 00:02:26.791
So remember again, currying allowed
me to reshape those functions

41
00:02:26.791 --> 00:02:29.295
from binary into unary functions.

42
00:02:29.295 --> 00:02:32.829
Which then allowed those uniary
functions to be posed together.

43
00:02:33.920 --> 00:02:36.389
Let's talk about point-free and
let's revisit it.

44
00:02:38.025 --> 00:02:42.540
&gt;&gt; Kyle Simpson: Now that we've seen our
composition and we've seen currying,

45
00:02:42.540 --> 00:02:45.891
we can go back to that example,
with the isOdd.

46
00:02:47.500 --> 00:02:50.010
Remember isOdd from earlier in the course?

47
00:02:50.010 --> 00:02:52.950
And we showed you the use of mod2,

48
00:02:52.950 --> 00:02:57.910
is the mod with the two value passed in,
that's a carried function.

49
00:02:57.910 --> 00:03:02.960
And eq1 is the eq function
with the 1 value carried.

50
00:03:04.200 --> 00:03:11.010
So if we wanted to define isOdd
as a point in free-function,

51
00:03:11.010 --> 00:03:15.190
we now take a compose utility,
in this case composeTwo.

52
00:03:15.190 --> 00:03:20.384
We take a compose utility,
and we compose eq1 and

53
00:03:20.384 --> 00:03:25.850
mod2, which then line 18 is equational.

54
00:03:25.850 --> 00:03:31.239
Using equational reasoning is the same
as the compose two of eq1 mod2.

55
00:03:35.032 --> 00:03:35.868
&gt;&gt; Kyle Simpson: In other words,

56
00:03:35.868 --> 00:03:39.100
we had two binary functions that
we wanted to compose together.

57
00:03:40.500 --> 00:03:43.440
We can't compose two binary functions,
can we?

58
00:03:43.440 --> 00:03:44.970
So what do we do?

59
00:03:44.970 --> 00:03:48.420
We carried both of them,
provided one input to each.

60
00:03:48.420 --> 00:03:51.710
Thereby producing two unary functions
that could be composed together.

