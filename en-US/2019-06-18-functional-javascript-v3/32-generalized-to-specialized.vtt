WEBVTT

1
00:00:00.000 --> 00:00:04.223
&gt;&gt; Kyle Simpson: We talked a bit earlier
in the course about this idea of function

2
00:00:04.223 --> 00:00:07.184
specialization, we briefly glimpsed it.

3
00:00:07.184 --> 00:00:09.643
And I mentioned things like
partial application and currying.

4
00:00:09.643 --> 00:00:11.740
We're gonna come back and
dig into that fully.

5
00:00:11.740 --> 00:00:14.069
So that's what we're gonna talk about,

6
00:00:14.069 --> 00:00:18.736
the idea of going from more generalized
functions to more specialized functions.

7
00:00:18.736 --> 00:00:21.050
This is a key concept in
functional programming.

8
00:00:22.310 --> 00:00:25.250
All right, so let's imagine I
have a function called Ajax.

9
00:00:25.250 --> 00:00:30.260
It takes three inputs, a URL, some sort
of data parameter, and then a callback.

10
00:00:30.260 --> 00:00:34.201
And I might call it like you see on
line three, which is I call it with some

11
00:00:34.201 --> 00:00:38.036
variable called CUSTOMER_API,
pass it a data object with id 42.

12
00:00:38.036 --> 00:00:41.564
And then I pass it a callback that's
gonna render that customer to the screen,

13
00:00:41.564 --> 00:00:43.030
for example.

14
00:00:43.030 --> 00:00:46.380
Now, there's nothing wrong with line
three, it does get the job done.

15
00:00:46.380 --> 00:00:50.690
And you've probably written code like that
on many occasions in your applications.

16
00:00:50.690 --> 00:00:55.820
But what I want to point out is that,
that line has a lot of detail

17
00:00:55.820 --> 00:01:00.590
in it that may not be necessary, for
the reader to see at that exact moment.

18
00:01:00.590 --> 00:01:05.220
And that's really, it's not just that
we want to make the line shorter or

19
00:01:05.220 --> 00:01:06.340
make it longer or something.

20
00:01:06.340 --> 00:01:11.410
But we really want every line of code
to have only the amount of information,

21
00:01:11.410 --> 00:01:15.510
no more, no less, that the reader
needs to see at that point.

22
00:01:15.510 --> 00:01:19.496
So let's consider some intermediary
steps which might allow the reader

23
00:01:19.496 --> 00:01:23.022
to understand things a little bit
more clearly without having to

24
00:01:23.022 --> 00:01:25.976
read through a long line of
a bunch of different data.

25
00:01:25.976 --> 00:01:29.538
So one thing that I could do is I could
make an intermediary function called

26
00:01:29.538 --> 00:01:30.810
getCustomer.

27
00:01:30.810 --> 00:01:35.550
Now, getCustomer already knows that
it's gonna make all of its ajax calls

28
00:01:35.550 --> 00:01:37.600
against CUSTOMER_API.

29
00:01:37.600 --> 00:01:40.770
And it only needs to receive data and
callbacks, but

30
00:01:40.770 --> 00:01:46.060
it doesn't need to receive a URL,
because that's sort of hard coded, okay?

31
00:01:46.060 --> 00:01:49.380
Now, on line 9, I'm calling getCustomer.

32
00:01:49.380 --> 00:01:54.554
And I'm providing that same object with
the id:42, and that same renderCustomer.

33
00:01:54.554 --> 00:01:58.090
So, compare line 3 and
line 9 in your mind.

34
00:01:58.090 --> 00:02:03.906
Which one of those two lines is more
clearly describing to the reader

35
00:02:03.906 --> 00:02:09.224
of the code what the purpose and
intent of that line of code is?

36
00:02:09.224 --> 00:02:12.152
And I think most of you would say line 9.

37
00:02:12.152 --> 00:02:15.009
It has a semantic function name there,

38
00:02:15.009 --> 00:02:20.590
which is better than this general
function name ajax with a CUSTOMER_API.

39
00:02:20.590 --> 00:02:23.640
It describes something more clearly.

40
00:02:23.640 --> 00:02:28.523
So making that function may not
ever be called more than once.

41
00:02:28.523 --> 00:02:32.580
And you're used to, we talked about this
DRY thing, you're used to thinking about,

42
00:02:32.580 --> 00:02:36.190
well, I only make something into a
function if I'm going to call it three, or

43
00:02:36.190 --> 00:02:37.210
five, or ten times.

44
00:02:37.210 --> 00:02:38.653
I think Uncle Bob said,

45
00:02:38.653 --> 00:02:43.572
only make it into a function when you've
copied it the third time, or whatever.

46
00:02:43.572 --> 00:02:47.743
But I'm here to tell you that one of
the reasons why you make something into

47
00:02:47.743 --> 00:02:50.760
a function is so
that the code is more semantic.

48
00:02:50.760 --> 00:02:54.646
The name of a function call
describes its purpose.

49
00:02:54.646 --> 00:02:59.014
And purpose is the key thing that we
want to communicate to our readers.

50
00:02:59.014 --> 00:03:01.843
So even if I never was going
to call it ever again,

51
00:03:01.843 --> 00:03:05.086
there still might be benefit
to defining getCustomer so

52
00:03:05.086 --> 00:03:08.682
that I have a more clear name for
what's happening on line 9.

53
00:03:08.682 --> 00:03:12.240
And if that's true,
then we can extend that even further.

54
00:03:12.240 --> 00:03:15.880
Because there might be places in our
code where we need to get customers.

55
00:03:15.880 --> 00:03:18.830
But there might be other
places in the code where

56
00:03:18.830 --> 00:03:21.351
we need to get a very specific customer.

57
00:03:21.351 --> 00:03:24.554
Like for example,
the currently logged in customer.

58
00:03:26.850 --> 00:03:31.175
&gt;&gt; Kyle Simpson: So we might define
a further specialization function called

59
00:03:31.175 --> 00:03:32.539
getCurrentUser.

60
00:03:32.539 --> 00:03:38.302
And getCurrentUser is hard coded to the ID
of the currently logged in session,

61
00:03:38.302 --> 00:03:41.634
or whatever, and
all it needs is a callback.

62
00:03:43.673 --> 00:03:47.260
&gt;&gt; Kyle Simpson: So
line 16 compared to line 9.

63
00:03:47.260 --> 00:03:50.170
And, therefore, compared also to line 3.

64
00:03:50.170 --> 00:03:54.601
Comparing those three lines of code,
can we see that line 16, for

65
00:03:54.601 --> 00:03:59.966
the places where that would be what we
wanted, line 16 is even more semantically

66
00:03:59.966 --> 00:04:05.596
self-descriptive than is line 9, which
itself was more descriptive than line 3.

67
00:04:07.955 --> 00:04:10.463
&gt;&gt; Kyle Simpson: We haven't changed
any of the functionality here.

68
00:04:10.463 --> 00:04:12.780
That's a key component to understand.

69
00:04:12.780 --> 00:04:15.116
We have not changed the functionality,

70
00:04:15.116 --> 00:04:19.314
we have simply changed the stylization
of this code to be more semantic.

71
00:04:21.384 --> 00:04:26.054
&gt;&gt; Kyle Simpson: Now, defining getCustomer
manually the way I did, and then defining

72
00:04:26.054 --> 00:04:32.100
getCurrentUser manually the way that I
did, that's a bit of extra overhead work.

73
00:04:32.100 --> 00:04:36.700
And you might say, it's unfortunate that I
have to do that definition of a function

74
00:04:36.700 --> 00:04:40.430
just so that I can get a nice clean
function call on the call signature.

75
00:04:41.690 --> 00:04:44.992
By the way, line 12,
I've commented that line out.

76
00:04:44.992 --> 00:04:50.780
Because line 13 defines getCurrentUser
in terms of getCustomer.

77
00:04:50.780 --> 00:04:55.910
But I could have defined getCurrentUser
in terms of just the ajax call,

78
00:04:55.910 --> 00:04:58.060
would have had the exact same outcome.

79
00:04:58.060 --> 00:05:03.502
Can anybody tell me why we might
choose line 13 over line 12?

80
00:05:05.779 --> 00:05:07.797
&gt;&gt; Speaker 2: It's more declarative.

81
00:05:07.797 --> 00:05:08.674
&gt;&gt; Kyle Simpson: It is more declarative.

82
00:05:08.674 --> 00:05:10.380
But more specifically than that?

83
00:05:14.509 --> 00:05:16.650
&gt;&gt; Kyle Simpson: It creates
a clearer relationship.

84
00:05:17.840 --> 00:05:23.910
It says getCurrentUser is
the specialization of getCustomer,

85
00:05:23.910 --> 00:05:26.790
as opposed to saying it is
the specialization of ajax.

86
00:05:28.300 --> 00:05:33.185
Saying it's the specialization
of ajax is a weaker statement

87
00:05:33.185 --> 00:05:39.190
relationally than saying it is
the specialization of getCustomer.

88
00:05:39.190 --> 00:05:43.266
So even though both might have the same
outcome, the choice of line 13 makes

89
00:05:43.266 --> 00:05:47.670
a clearer, more obvious signal about
the relationships between these entities.

90
00:05:47.670 --> 00:05:48.652
Yes?
&gt;&gt; Speaker 3: It just seems

91
00:05:48.652 --> 00:05:52.218
that currentUser also kind of implies
that it is a customer, because of-

92
00:05:52.218 --> 00:05:53.246
&gt;&gt; Kyle Simpson: Yes, basically.

93
00:05:53.246 --> 00:05:57.160
I could have called it getCurrentCustomer
or whatever, but yes, basically, right?

94
00:05:57.160 --> 00:06:04.236
So in our domain model that would
be obvious to the reader, right?

95
00:06:04.236 --> 00:06:08.690
But defining these functions manually
certainly has the downside which is that

96
00:06:08.690 --> 00:06:10.560
we're cluttering up this code.

97
00:06:10.560 --> 00:06:13.470
You might have to take those and
put them somewhere else or whatever.

98
00:06:13.470 --> 00:06:18.050
So is there some way that we could define
these more specialized versions of

99
00:06:18.050 --> 00:06:22.860
functions, but without having to define
manually pointed functions like this.

100
00:06:22.860 --> 00:06:27.706
These are pointed definitions
rather than pointfree.

101
00:06:27.706 --> 00:06:31.309
How could we define them more clearly?

102
00:06:33.885 --> 00:06:38.647
&gt;&gt; Kyle Simpson: First thing you need
to understand before we move into that

103
00:06:38.647 --> 00:06:44.587
solution is, as I said earlier,
the parameter order matters greatly.

104
00:06:44.587 --> 00:06:49.887
When you're going to specialize a
function, that is, an n-ary function that

105
00:06:49.887 --> 00:06:55.994
takes 3, 4, 5, 10, 20, whatever, inputs,
the order of those inputs matters.

106
00:06:55.994 --> 00:07:00.797
And basically, the order should
always be from the most general of

107
00:07:00.797 --> 00:07:06.135
the parameter on the left to the most
specific of parameters on the right.

108
00:07:07.895 --> 00:07:11.675
Because we're going to provide
those inputs one at a time,

109
00:07:11.675 --> 00:07:16.275
the way we were doing manually, and
you want to unfold them in that order.

110
00:07:16.275 --> 00:07:20.335
If you had the most specific one on the
left, well, now it's gonna be harder to

111
00:07:20.335 --> 00:07:24.530
provide that input, because you're trying
to provide a more general input first.

112
00:07:24.530 --> 00:07:27.360
And you're having to skip
over a more specific input.

113
00:07:27.360 --> 00:07:30.930
So it's important when we design
our functions to design them so

114
00:07:30.930 --> 00:07:34.620
that their parameter orders
are going from general to specific.

115
00:07:34.620 --> 00:07:37.710
By the way, you will encounter
this in your functional libraries.

116
00:07:37.710 --> 00:07:40.462
When you're exploring something
like Ramda or whatever.

117
00:07:40.462 --> 00:07:42.290
For example, the map function.

118
00:07:43.470 --> 00:07:48.290
Most of us, I think,
are used to thinking in terms of

119
00:07:48.290 --> 00:07:52.110
a utility like map,
which takes two inputs.

120
00:07:52.110 --> 00:07:55.760
We're used to thinking, okay I'll
pass the array as the first input.

121
00:07:55.760 --> 00:07:57.680
And I'll pass the function
as the second input.

122
00:07:58.980 --> 00:08:02.120
But you'll notice that every
functional library in existence

123
00:08:02.120 --> 00:08:03.380
will do that reversed.

124
00:08:03.380 --> 00:08:08.160
It will pass the function first and
then it will pass the array.

125
00:08:08.160 --> 00:08:12.240
You may never have stopped to wonder,
why is it that they do that?

126
00:08:12.240 --> 00:08:17.030
They do that very specifically
because [LAUGH] the array values,

127
00:08:17.030 --> 00:08:22.799
the data, is the most specific of all of
the inputs that could possibly go in.

128
00:08:24.230 --> 00:08:27.290
And then the callback is
more general of an input.

129
00:08:27.290 --> 00:08:31.743
So we want, if we're gonna specialize
a map call, we're almost always gonna

130
00:08:31.743 --> 00:08:35.318
provide a mapper function and
then provide new pieces of data,

131
00:08:35.318 --> 00:08:39.719
rather than provide a single array and
provide different mapper functions.

132
00:08:39.719 --> 00:08:40.833
Are you with me?

133
00:08:40.833 --> 00:08:43.914
So parameter order does matter
when we shape these things.

134
00:08:43.914 --> 00:08:46.980
And sometimes the parameters are correct,
in the right order.

135
00:08:46.980 --> 00:08:50.548
Sometimes we have to juggle them with
those utilities like flip and stuff.

