WEBVTT

1
00:00:00.220 --> 00:00:03.050
&gt;&gt; Kyle Simpson: The last library I'm
gonna show you is a bit self-serving

2
00:00:03.050 --> 00:00:05.010
cuz I'm gonna show you one that I wrote.

3
00:00:05.010 --> 00:00:08.000
But you notice that I didn't even
recommended that you use this library,

4
00:00:08.000 --> 00:00:11.010
I've recommended that you use
something like Ramda or Lodash.

5
00:00:11.010 --> 00:00:16.410
This library is called FPO and has a very
specific use case that it was built for.

6
00:00:16.410 --> 00:00:21.120
It was, actually my goal was to
create a ramper on top of Ramda.

7
00:00:21.120 --> 00:00:25.470
I set out trying to adapt the Ramda
functions to do a very specific

8
00:00:25.470 --> 00:00:26.880
thing that I wanted.

9
00:00:26.880 --> 00:00:29.914
And I got about a third of
the way through that work.

10
00:00:29.914 --> 00:00:34.354
And I found some implementation details of
Ramda that we're gonna make it impossible

11
00:00:34.354 --> 00:00:37.683
for me to go forward, and
that is the only reason why I and

12
00:00:37.683 --> 00:00:40.040
ended up creating a separate thing.

13
00:00:40.040 --> 00:00:44.200
So it's really not designed to be
radically different from Ramda but

14
00:00:44.200 --> 00:00:47.900
just a different way of dealing
with the function signatures.

15
00:00:47.900 --> 00:00:50.237
So I just wanna talk about
this particular used case.

16
00:00:50.237 --> 00:00:54.268
If you ever run across this particular
problem, maybe you might wanna go look

17
00:00:54.268 --> 00:00:58.940
at FPO, but otherwise use something that's
much more well-established like a Ramda.

18
00:00:58.940 --> 00:01:04.180
The use case I'm talking about is if you
are dealing with a function where there is

19
00:01:04.180 --> 00:01:08.560
an ordering of the arguments
that is inconvenient for you and

20
00:01:08.560 --> 00:01:13.180
find yourself doing a bunch of flips or
reverses or

21
00:01:13.180 --> 00:01:18.050
if you have functions that take
parameters that you want to skip over and

22
00:01:18.050 --> 00:01:23.790
it's really annoying to use undefined
in those parameter positions,

23
00:01:23.790 --> 00:01:26.630
there is a different style of programming.

24
00:01:26.630 --> 00:01:28.440
It's not as common in JavaScript yet

25
00:01:28.440 --> 00:01:32.430
although it's growing and
becoming more common these days.

26
00:01:32.430 --> 00:01:36.200
There's a style of programming
called named arguments.

27
00:01:36.200 --> 00:01:38.900
This is different from
the parameters that are named.

28
00:01:38.900 --> 00:01:41.510
Remember, parameters are in
the function signature.

29
00:01:41.510 --> 00:01:45.840
Named arguments mean at
the call site annotating,

30
00:01:45.840 --> 00:01:49.650
I want this argument to go to
a parameter of this specific name,

31
00:01:50.830 --> 00:01:55.930
that is a feature of some programming
languages like objective C and Scala.

32
00:01:55.930 --> 00:02:00.580
You literally, at the function call site,
can say this value goes to this parameter.

33
00:02:00.580 --> 00:02:04.530
And one of the benefits of a named
argument is that you can skip over them by

34
00:02:04.530 --> 00:02:05.910
just not listing them and

35
00:02:05.910 --> 00:02:08.990
you can also list them in whatever
order is convenient to you.

36
00:02:08.990 --> 00:02:12.610
So you get rid of all those juggling
that you often have to do with

37
00:02:12.610 --> 00:02:14.140
argument ordering.

38
00:02:14.140 --> 00:02:18.389
So what I wanted to do was adapt
functional-programming utilities to use

39
00:02:18.389 --> 00:02:21.482
the named-argument style
that we do in JavaScript.

40
00:02:21.482 --> 00:02:26.130
And the way we do named arguments in
JavaScript is to pass in an object literal

41
00:02:26.130 --> 00:02:29.290
with property names,
the way you see on line 10.

42
00:02:29.290 --> 00:02:34.052
So what FPO does is exposes all of the
common functional programming utilities

43
00:02:34.052 --> 00:02:38.236
that you would expect, like the reduces
and composes and curries and

44
00:02:38.236 --> 00:02:42.779
all that, but it exposes them in a way
where it expects you to pass in a single

45
00:02:42.779 --> 00:02:47.759
object with named properties, named
arguments instead of passing in positional

46
00:02:47.759 --> 00:02:50.696
arguments
&gt;&gt; Kyle Simpson: So

47
00:02:50.696 --> 00:02:55.584
here we see that FPO's.reduce allows
us to skip over the initial value

48
00:02:55.584 --> 00:03:01.440
because we don't need to provide it,
it doesn't clutter up the call site.

49
00:03:01.440 --> 00:03:06.050
Another example is when we have some
argument order juggling that we're doing,

50
00:03:06.050 --> 00:03:10.230
like some kinda crazy flipping of
a partial right of this utility or

51
00:03:10.230 --> 00:03:11.470
something like that.

52
00:03:11.470 --> 00:03:16.050
When we have these weird sorts of
contortions that we have to go through to

53
00:03:16.050 --> 00:03:20.730
rearrange our argument ordering, sometimes
a named argument style is better.

54
00:03:20.730 --> 00:03:24.240
So here with FPO, I just tell it,
listen, I wanna start with the array,

55
00:03:24.240 --> 00:03:27.750
I don't need to do like a flip of a
partial right to start with the array, and

56
00:03:27.750 --> 00:03:29.029
let me provide the function later.

57
00:03:31.170 --> 00:03:36.071
So FPO's style of curried implementation
is named argument aware, which means

58
00:03:36.071 --> 00:03:40.683
you can pass in an object with whatever
property named arguments you want and

59
00:03:40.683 --> 00:03:44.670
it's waiting for the rest of those
arguments on the next column.

60
00:03:46.946 --> 00:03:49.861
&gt;&gt; Kyle Simpson: I released this library
a little like a year and a half ago and

61
00:03:49.861 --> 00:03:53.708
I got a whole bunch of people that were
like, this is awesome, there are people

62
00:03:53.708 --> 00:03:57.998
like Red and others like talking about it,
that we're all like scholar programmers.

63
00:03:57.998 --> 00:04:01.082
Because they were trying to do
functional programming in JavaScript and

64
00:04:01.082 --> 00:04:01.990
this was like, wow,

65
00:04:01.990 --> 00:04:05.420
this is really cool cuz it uses named
arguments the same way we do in Scala.

66
00:04:05.420 --> 00:04:10.178
So, it's not ever gonna be
as popular as like Ramda or

67
00:04:10.178 --> 00:04:14.305
a Lodash/fp or something but it's solving
a very specific problem, which is if you

68
00:04:14.305 --> 00:04:18.520
wanna do functional programming and you
want to avoid some of those weirdnesses or

69
00:04:18.520 --> 00:04:23.890
quirks around positional arguments, you
can use the named argument style with FPO.

70
00:04:23.890 --> 00:04:25.180
Just one last little note on it.

71
00:04:25.180 --> 00:04:30.730
FPO's namespace has all those methods
with this named argument style but

72
00:04:30.730 --> 00:04:36.380
it also provides FPO.STD standard,
which has all of the same method names but

73
00:04:36.380 --> 00:04:40.390
done in the original style you'd expect,
just like in Ramda.

74
00:04:40.390 --> 00:04:44.270
So you should have, you have both
of those in the same library if you

75
00:04:44.270 --> 00:04:46.420
ever end up wanting to use that, okay?

76
00:04:46.420 --> 00:04:48.890
So, definitely go check
out the documentation for

77
00:04:48.890 --> 00:04:52.460
something like Lodash/fp,
check out the documentation for Ramda,

78
00:04:52.460 --> 00:04:55.130
those are great places to start,
really great places.

79
00:04:55.130 --> 00:04:57.940
If you ever run across a need for
a named argument style,

80
00:04:57.940 --> 00:05:01.320
you can check out FPO in
the documentation on that.

81
00:05:01.320 --> 00:05:03.330
But these are a great resource for

82
00:05:03.330 --> 00:05:06.160
you to get started playing with
your functional programming.

83
00:05:06.160 --> 00:05:09.966
Unfortunately, in JavaScript, we don't
really have these things built into

84
00:05:09.966 --> 00:05:12.656
the language like you would
in something like Haskell.

85
00:05:12.656 --> 00:05:15.250
So we're,
we are relegated to using libraries.

86
00:05:15.250 --> 00:05:20.100
But the good news is, that means that
it puts the choice back in your court,

87
00:05:20.100 --> 00:05:23.950
you get to decide which library works
best for your particular scenario.

