WEBVTT

1
00:00:00.070 --> 00:00:04.480
&gt;&gt; Kyle Simpson: In the interim, in any
place where you have a data structure and

2
00:00:04.480 --> 00:00:08.774
it is important for you to manage
the mutations to that data structure.

3
00:00:08.774 --> 00:00:12.980
You're gonna need a library that provides
you an immutable data structure.

4
00:00:12.980 --> 00:00:16.450
And there are a couple of major ones
out there that you will hear about.

5
00:00:16.450 --> 00:00:20.160
Probably the most common of those
is called the immutable-js,

6
00:00:20.160 --> 00:00:22.300
comes from the folks at Facebook.

7
00:00:22.300 --> 00:00:24.970
So if you wanna check out immutable-js,
they've got a bunch of great

8
00:00:24.970 --> 00:00:27.500
documentation, and
there's a huge community around it.

9
00:00:27.500 --> 00:00:29.020
It's a great library.

10
00:00:29.020 --> 00:00:34.240
There's another one out there that seems
to be preferred by people from particular

11
00:00:34.240 --> 00:00:37.470
sects of the functional
programming community.

12
00:00:37.470 --> 00:00:40.190
Especially those that kind of
come from like the closure and

13
00:00:40.190 --> 00:00:43.660
that sort of side of our
programming community.

14
00:00:43.660 --> 00:00:46.510
That's called Mori, M-O-R-I.

15
00:00:46.510 --> 00:00:50.690
ClojureScript, which is
the JavaScript subset of Clojure,

16
00:00:50.690 --> 00:00:53.180
the language,
has immutable data structures in it.

17
00:00:53.180 --> 00:00:56.990
And what they did was extract those
immutable data structures into a library,

18
00:00:56.990 --> 00:00:59.300
and they released it called Mori.

19
00:00:59.300 --> 00:01:02.750
Has a different take on the way that
it works and what the API looks like.

20
00:01:02.750 --> 00:01:05.060
But same general end goal,

21
00:01:05.060 --> 00:01:08.260
which is, give me structured
mutation on my data structures.

22
00:01:09.400 --> 00:01:10.860
So here's an example.

23
00:01:10.860 --> 00:01:13.900
I create an immutable list
of a couple of things.

24
00:01:13.900 --> 00:01:17.120
Now, it doesn't really matter whether
those things like textbook and

25
00:01:17.120 --> 00:01:20.300
supplies are strings or
objects, or arrays.

26
00:01:20.300 --> 00:01:24.700
From the level of the data structure,
the outside, all we're saying is,

27
00:01:24.700 --> 00:01:28.020
the presence of those in this
list is what is immutable.

28
00:01:28.020 --> 00:01:29.350
If those things were objects,

29
00:01:29.350 --> 00:01:32.330
then they would still be
regular old mutable objects.

30
00:01:32.330 --> 00:01:34.818
So, if you want to have deep immutability,

31
00:01:34.818 --> 00:01:37.324
you wanna prevent one
of those sub objects.

32
00:01:37.324 --> 00:01:40.200
Then you're gonna need to immutable
data structures at every level.

33
00:01:40.200 --> 00:01:42.390
But I left it sort of
deliberately general here.

34
00:01:42.390 --> 00:01:45.490
We don't know what textbook,
supplies and calculator are on.

35
00:01:45.490 --> 00:01:47.240
But at this point, that's not our concern.

36
00:01:47.240 --> 00:01:51.520
They could be immutable-js objects,
maps or something like that.

37
00:01:51.520 --> 00:01:55.320
Or they might just be regular old,
plain objects or strings or numbers, or

38
00:01:55.320 --> 00:01:56.280
who knows, whatever.

39
00:01:56.280 --> 00:01:57.680
But the point is, line six,

40
00:01:57.680 --> 00:02:03.050
when I say dot push, on an immutable
data structure, an immutable list.

41
00:02:03.050 --> 00:02:06.230
It's not going to actually modify
that list the way it would have

42
00:02:06.230 --> 00:02:07.550
with the normal array.

43
00:02:07.550 --> 00:02:11.410
Instead, we're gonna get
back a whole new object.

44
00:02:11.410 --> 00:02:13.820
That's called updated items.

45
00:02:13.820 --> 00:02:19.590
And that new updated items object has
all the same stuff as the previous one,

46
00:02:19.590 --> 00:02:21.560
plus the new objects having been added.

47
00:02:21.560 --> 00:02:25.450
And that's why items.size is still two,
it didn't get changed in any way,

48
00:02:25.450 --> 00:02:26.100
shape or form.

49
00:02:26.100 --> 00:02:28.040
It is an immutable data structure.

50
00:02:29.220 --> 00:02:31.880
And internally they've taken
care of the optimization

51
00:02:31.880 --> 00:02:33.540
to have the pointer to
be where it needs to be.

52
00:02:36.380 --> 00:02:38.280
So let's review what
we've talked about here.

53
00:02:38.280 --> 00:02:44.476
We started by talking about
the idea of assignment mutability.

54
00:02:44.476 --> 00:02:47.190
Generally speaking, we're talking
about the const keyword and whether or

55
00:02:47.190 --> 00:02:49.290
not it's gonna provide the benefit.

56
00:02:49.290 --> 00:02:53.400
Usually functional programmers try to
minimize the amount of assignments anyway.

57
00:02:53.400 --> 00:02:57.860
So it probably shouldn't be the case that
you have very many of those declarations.

58
00:02:57.860 --> 00:02:59.820
But for the ones that you do have,

59
00:02:59.820 --> 00:03:02.328
you're generally gonna be doing
them inside of small blocks.

60
00:03:02.328 --> 00:03:05.229
And the const keyword is not gonna
provide much benefit for you.

61
00:03:06.520 --> 00:03:10.290
So maybe it's more appropriate to use
a var or a let in those places, just so

62
00:03:10.290 --> 00:03:11.960
that you don't trip up
the reader of your code.

63
00:03:13.290 --> 00:03:16.250
My rule is, not that I don't
use the const keyword, but

64
00:03:16.250 --> 00:03:20.060
that I use the const keyword only for
things that are already,

65
00:03:20.060 --> 00:03:24.690
by their very nature, unchangeable,
like numbers and strings.

66
00:03:24.690 --> 00:03:28.300
So I'm fine if you say
const basePrice equals 6.

67
00:03:28.300 --> 00:03:32.810
But don't ever please, at least in
my opinion, say const ARR equals and

68
00:03:32.810 --> 00:03:36.780
then use an array, because that is
inviting the reader to get tripped up.

69
00:03:36.780 --> 00:03:40.950
The real point that we should be focusing
on is the value immutability question.

70
00:03:40.950 --> 00:03:45.040
And we have two different ways, actually
three ways of thinking about that problem.

71
00:03:45.040 --> 00:03:48.630
One way is at the call site
when we're gonna pass in

72
00:03:48.630 --> 00:03:50.070
one of those data structures.

73
00:03:50.070 --> 00:03:54.120
We should annotate it with something
like object.freeze to say to the reader,

74
00:03:54.120 --> 00:03:55.760
don't worry about it, it can't be changed.

75
00:03:56.930 --> 00:04:00.560
And if you need to do sort of
a recursive object.freeze thing,

76
00:04:00.560 --> 00:04:04.473
make yourself a little helper and
just use that helper everywhere.

77
00:04:04.473 --> 00:04:08.435
Use the little helper called read
only that you pass in an object and

78
00:04:08.435 --> 00:04:12.040
it traverses an object, and
makes it deeply read only.

79
00:04:12.040 --> 00:04:13.110
That's great.

80
00:04:13.110 --> 00:04:15.137
Whatever you need to do to
annotate to the reader,

81
00:04:15.137 --> 00:04:17.325
they don't need to worry
about that thing changing.

82
00:04:20.630 --> 00:04:24.096
&gt;&gt; Kyle Simpson: Secondly, when you
receive a data structure, no matter what,

83
00:04:24.096 --> 00:04:26.030
assume that it should be read only.

84
00:04:27.090 --> 00:04:32.460
And lastly, if you need to actually
track changes to data structures,

85
00:04:32.460 --> 00:04:35.220
that's what you should be doing
with an immutable data structure.

86
00:04:37.230 --> 00:04:41.590
Immutable data structures
are ones that need to be mutated.

87
00:04:41.590 --> 00:04:44.530
That's what we have to rewire
our brains to think about.

88
00:04:44.530 --> 00:04:48.350
Because we usually think about
immutability as it's not gonna change.

89
00:04:48.350 --> 00:04:51.135
And what we really mean here from
a functional perspective is,

90
00:04:51.135 --> 00:04:55.170
it's things that need to change, but
need to change in a controlled way.

