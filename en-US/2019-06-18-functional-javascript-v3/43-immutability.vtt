WEBVTT

1
00:00:00.080 --> 00:00:01.160
&gt;&gt; Kyle: Immutability.

2
00:00:01.160 --> 00:00:04.930
Now this is a topic that
gets glossed over a lot.

3
00:00:04.930 --> 00:00:07.960
So we wanna make sure we pay
close attention to this.

4
00:00:07.960 --> 00:00:10.750
And in particular,
one of the things that I get kind of

5
00:00:10.750 --> 00:00:13.800
frustrated about is that when
people throw around this word.

6
00:00:13.800 --> 00:00:16.320
They could mean one of at least
two different things, but

7
00:00:16.320 --> 00:00:20.550
they're not very often very clear
about what is being discussed.

8
00:00:20.550 --> 00:00:25.020
So, let's make sure we understand first
why immutability is important, but

9
00:00:25.020 --> 00:00:28.210
then, what kind of immutability
are we talking about?

10
00:00:28.210 --> 00:00:30.570
So, immutability is the idea, obviously,

11
00:00:30.570 --> 00:00:34.930
that the word implies that
something isn't going to change.

12
00:00:34.930 --> 00:00:38.650
But that doesn't fully encompass
what we're talking about.

13
00:00:38.650 --> 00:00:40.710
It's not just that things don't change,

14
00:00:40.710 --> 00:00:43.570
it's that things don't
change unexpectedly.

15
00:00:44.690 --> 00:00:48.190
There is obviously in our
programs a lot of state change,

16
00:00:48.190 --> 00:00:52.010
that is the whole point of our programs
is for state to change over time and

17
00:00:52.010 --> 00:00:54.690
state change being the point.

18
00:00:54.690 --> 00:00:57.150
You don't want to stop
that from happening.

19
00:00:57.150 --> 00:01:00.310
There's really no such thing as like
making an immutable program because

20
00:01:00.310 --> 00:01:02.510
that program wouldn't have any point.

21
00:01:02.510 --> 00:01:06.840
There'd be no reason for that program
to exist if nothing could change.

22
00:01:06.840 --> 00:01:11.160
So really, this idea of immutability is
it's broken in our brains or it's miswired

23
00:01:11.160 --> 00:01:15.010
in our brains when we think about it
in terms of things that can't change.

24
00:01:15.010 --> 00:01:16.630
That's not really the point.

25
00:01:16.630 --> 00:01:21.080
Really, the point of immutability
is that change that needs to occur

26
00:01:21.080 --> 00:01:22.990
needs to be intentional.

27
00:01:22.990 --> 00:01:27.320
It shouldn't be accidental, it shouldn't
be happening without us being aware,

28
00:01:27.320 --> 00:01:30.830
happening at different times,
creating race conditions.

29
00:01:30.830 --> 00:01:32.010
All those sorts of things.

30
00:01:32.010 --> 00:01:36.300
So immutability is this concept
of how do we control mutation?

31
00:01:36.300 --> 00:01:38.400
How do we control change?

32
00:01:38.400 --> 00:01:41.580
And I said there's two different
kinds of immutability that we want to

33
00:01:41.580 --> 00:01:42.370
pay attention to.

34
00:01:42.370 --> 00:01:46.000
So the first of those is
assignment immutability.

35
00:01:46.000 --> 00:01:52.040
Assignment immutability is the idea that
when you assign something to a variable or

36
00:01:52.040 --> 00:01:53.530
to a property,

37
00:01:53.530 --> 00:01:56.900
that it is no longer allowed to be
reassigned to some other value.

38
00:01:58.460 --> 00:02:01.200
And this is often a big
deal is often made of this.

39
00:02:01.200 --> 00:02:04.910
In fact, you'll know we talked earlier
in the course about the const keyword.

40
00:02:04.910 --> 00:02:08.640
This idea that if I create a variable
that can't be reassigned to,

41
00:02:08.640 --> 00:02:11.830
that I've somehow prevented
myself from having bugs.

42
00:02:11.830 --> 00:02:12.930
So let's dig into that.

43
00:02:12.930 --> 00:02:15.460
Let's talk about assignment immutability.

44
00:02:16.890 --> 00:02:22.020
If I declare basePrice as we are on
line one with a var declaration,

45
00:02:22.020 --> 00:02:25.700
and then shipping cost
with a const declaration.

46
00:02:25.700 --> 00:02:27.770
They are both variables.

47
00:02:27.770 --> 00:02:32.460
Variable is sort of a weird word here
because for a const that can't vary, but

48
00:02:32.460 --> 00:02:35.910
it is a placeholder for a value.

49
00:02:35.910 --> 00:02:42.690
It is a symbolic representation in memory,
so that's why we call it still a variable.

50
00:02:42.690 --> 00:02:44.930
Except there's a difference
between these two,

51
00:02:44.930 --> 00:02:48.530
which is how they're going
to handle reassignment.

52
00:02:48.530 --> 00:02:52.550
Where they've all declared or
even let, if you choose to reassign it

53
00:02:52.550 --> 00:02:55.950
to a different value later which
is what's happening on line six.

54
00:02:55.950 --> 00:02:58.070
No problem of course,
everything works fine.

55
00:02:58.070 --> 00:03:02.510
But if you try to reassign something
that is declared as a const,

56
00:03:02.510 --> 00:03:05.140
you get an error saying
that's not allowed.

57
00:03:05.140 --> 00:03:08.580
It's not allowed for
you to change or to reassign.

58
00:03:08.580 --> 00:03:12.310
As a matter of fact, we really
need to get into the word change.

59
00:03:12.310 --> 00:03:17.420
Because the word change implies that we're
changing something about the value itself,

60
00:03:17.420 --> 00:03:19.570
and we're not really changing the value.

61
00:03:19.570 --> 00:03:23.430
basePrice is not being,
it's value is not being changed.

62
00:03:23.430 --> 00:03:24.909
It's value is being reassigned.

63
00:03:26.080 --> 00:03:30.517
We're creating a whole new
value with that plus operation,

64
00:03:30.517 --> 00:03:36.183
the value 94.99, and we're assigning
that new value into basePrice.

65
00:03:36.183 --> 00:03:40.220
And the reason why that's important is
there are values which can be mutated.

66
00:03:40.220 --> 00:03:42.835
A number, for example, can't be mutated.

67
00:03:42.835 --> 00:03:47.840
You can't ever change 3.14
into anything other than 3.14.

68
00:03:47.840 --> 00:03:49.080
It just is that.

69
00:03:49.080 --> 00:03:50.290
Same thing with strings.

70
00:03:50.290 --> 00:03:52.880
You can't take the string hello world and

71
00:03:52.880 --> 00:03:56.270
modify one of the characters
inside of that string.

72
00:03:56.270 --> 00:03:57.620
That isn't a thing that you can do.

73
00:03:58.720 --> 00:04:02.350
Those values are sort of
inherently immutable.

74
00:04:02.350 --> 00:04:04.720
They are primitive values
that can't really be changed.

75
00:04:04.720 --> 00:04:06.730
So we're not changing the value.

76
00:04:06.730 --> 00:04:09.170
We're reassigning the value in basePrice.

77
00:04:09.170 --> 00:04:11.514
We're creating a new value
from an operation, and

78
00:04:11.514 --> 00:04:13.140
assigning it into basePrice.

79
00:04:13.140 --> 00:04:16.830
And when we try to do the same thing on
line ten, we get an error saying, no,

80
00:04:16.830 --> 00:04:19.290
that's not allowed for you to reassign.

81
00:04:19.290 --> 00:04:20.440
That's what the error means,

82
00:04:20.440 --> 00:04:25.930
you can't assign to a consts variable
other than at the first time.

83
00:04:25.930 --> 00:04:27.570
And by the way,
just a little note on const.

84
00:04:27.570 --> 00:04:29.240
This is sometimes overlooked.

85
00:04:29.240 --> 00:04:33.960
You cannot declare a consts
without assigning it a value.

86
00:04:33.960 --> 00:04:37.080
So you can't say like const shippingCost,
and then later,

87
00:04:37.080 --> 00:04:40.470
in that same block of code,
give it its first assignment.

88
00:04:40.470 --> 00:04:44.490
Because actually, that would mean
observing it in two different value

89
00:04:44.490 --> 00:04:48.980
states, one where it was undefined and
then one where it was defined to a value.

90
00:04:48.980 --> 00:04:53.692
And they took great pains to prevent
you from observing a variable in

91
00:04:53.692 --> 00:04:58.480
this sort of two-state or
a const in this two-state situation.

92
00:04:58.480 --> 00:05:01.500
Matter of fact, if you've heard, you may
have read a blog post about something it's

93
00:05:01.500 --> 00:05:04.290
called the temporal dead zone, TDZ.

94
00:05:04.290 --> 00:05:09.420
And temporal dead zone is all about
preventing us from seeing a const ever

95
00:05:09.420 --> 00:05:14.670
be in this weird, in-between, or this gray
area state where it was undefined and

96
00:05:14.670 --> 00:05:16.570
now it's been defined to a variable.

97
00:05:16.570 --> 00:05:20.880
So that we've taken great pains to ensure
that you have to assign it that value and

98
00:05:20.880 --> 00:05:22.820
then you can't resign it later.

99
00:05:22.820 --> 00:05:28.770
Now I've heard many explanations for
why we should use a const in our programs.

100
00:05:28.770 --> 00:05:31.449
And a matter of fact,
some of the most behemoth support for

101
00:05:31.449 --> 00:05:35.008
the const keyword comes from the
functional programming community that does

102
00:05:35.008 --> 00:05:36.550
JavaScript programming.

103
00:05:36.550 --> 00:05:38.160
They feel like this is a big boon,

104
00:05:38.160 --> 00:05:42.200
it's a big improvement to
the language to have a const keyword.

105
00:05:42.200 --> 00:05:46.740
I'm not convinced that it
really does provide the value

106
00:05:46.740 --> 00:05:48.388
that it assumes to provide.

107
00:05:48.388 --> 00:05:51.670
And I wanna dig into why I'm not
really convinced about that.

108
00:05:51.670 --> 00:05:53.610
So if we think about this code,

109
00:05:53.610 --> 00:05:59.250
there's another way of avoiding this
problem of assignment or reassignment.

110
00:05:59.250 --> 00:06:04.210
And this is actually how functional
programmers prefer to work.

111
00:06:04.210 --> 00:06:07.920
If you think about the argument that
a functional programmer makes which says,

112
00:06:07.920 --> 00:06:10.930
I don't want my variable to
get reassigned accidentally.

113
00:06:10.930 --> 00:06:13.920
So I always declare everything with const,
that's the typical line,

114
00:06:13.920 --> 00:06:15.600
that's the typical statement.

115
00:06:15.600 --> 00:06:19.460
But then they don't actually
assign many variables anyway.

116
00:06:19.460 --> 00:06:22.350
Most of the time, I mean this is
called functional programming for

117
00:06:22.350 --> 00:06:26.660
a reason, because most of the time,
we're not doing assignment statements.

118
00:06:26.660 --> 00:06:29.560
Most of the time values are being
passed to functions and

119
00:06:29.560 --> 00:06:31.460
coming back from other functions.

120
00:06:31.460 --> 00:06:36.460
So if you see what's happening here,
I can compute the new basePrice or

121
00:06:36.460 --> 00:06:41.850
the new shippingCost by simply passing
the existing value to a function.

122
00:06:41.850 --> 00:06:45.080
Computing it and having that return
value come back, and I can or

123
00:06:45.080 --> 00:06:48.760
cannot decide to assign that
value to some variable.

124
00:06:48.760 --> 00:06:50.650
But those are separate questions.

125
00:06:50.650 --> 00:06:54.350
The computation of a new value versus
the assignment to another variable.

126
00:06:54.350 --> 00:06:56.060
They're separate questions.

127
00:06:56.060 --> 00:06:56.730
And as a matter of fact,

128
00:06:56.730 --> 00:07:01.140
most functional programmers tell you,
try to avoid assignment at all costs.

129
00:07:01.140 --> 00:07:05.400
You'll see long strings of composition
where a function goes to another function,

130
00:07:05.400 --> 00:07:08.030
and then it goes here, and here,
and here, and here, and here.

131
00:07:08.030 --> 00:07:12.290
Because heaven forbid,
we assign it to a variable temporarily and

132
00:07:12.290 --> 00:07:13.660
then use that variable later.

133
00:07:13.660 --> 00:07:15.770
We want to avoid that at all costs.

134
00:07:15.770 --> 00:07:18.660
So one of the questions that comes up
in my mind when I hear a functional

135
00:07:18.660 --> 00:07:19.590
programmer say.

136
00:07:19.590 --> 00:07:22.630
No, no, no const,
you should absolutely only use const is,

137
00:07:22.630 --> 00:07:25.630
do you really even care
that much about const?

138
00:07:25.630 --> 00:07:29.030
You don't even like to do assignments
if you're a functional programmer.

139
00:07:29.030 --> 00:07:33.120
So that's one of the reasons why
I sort of suspect of, or I'm sort

140
00:07:33.120 --> 00:07:37.190
of in doubt of whether or not it's really
bringing that much benefit to the table.

