WEBVTT

1
00:00:00.310 --> 00:00:01.875
&gt;&gt; Kyle Simpson: So
back to the candy factory.

2
00:00:01.875 --> 00:00:04.680
You've been thinking about this for
a while and

3
00:00:04.680 --> 00:00:07.770
you think you've come up
with a brilliant solution.

4
00:00:07.770 --> 00:00:09.610
I don't need to change
anything about the machines.

5
00:00:09.610 --> 00:00:14.980
All I need to do is wrap one nice little
clean box around the whole setup.

6
00:00:14.980 --> 00:00:19.140
Just make one nice big box that's
wrapped all the way around all those

7
00:00:19.140 --> 00:00:22.090
internal machines.

8
00:00:22.090 --> 00:00:25.500
And on the inside, there'll be a nice
access panel where I can open it up and

9
00:00:25.500 --> 00:00:29.010
get it all the machines and wires and
buttons if I, the engineer,

10
00:00:29.010 --> 00:00:30.800
need to work with it.

11
00:00:30.800 --> 00:00:33.970
But the factory workers just have one on,
off switch.

12
00:00:33.970 --> 00:00:37.170
They have one input valve at the top
where they pour stuff in and

13
00:00:37.170 --> 00:00:40.670
out from the bottom comes the candy
wrapped and nice, ready to go.

14
00:00:42.442 --> 00:00:44.110
And you're thinking to yourself
this is the best of both

15
00:00:44.110 --> 00:00:48.370
worlds because the factory workers
only care about input and output.

16
00:00:49.500 --> 00:00:53.580
But I, the engineer,
I care about how it gets done.

17
00:00:54.800 --> 00:00:55.524
What have I done?

18
00:00:55.524 --> 00:01:03.740
I've created an abstraction for
my composition, all right?

19
00:01:03.740 --> 00:01:05.430
I've wrapped it in a function.

20
00:01:05.430 --> 00:01:07.450
That's what this big box is conceptual.

21
00:01:09.940 --> 00:01:13.520
You implement this solution, and
then you get some feedback from the boss.

22
00:01:13.520 --> 00:01:15.420
He says, all the factory workers love it.

23
00:01:15.420 --> 00:01:17.020
They think it's great.

24
00:01:17.020 --> 00:01:17.570
Every day they're coming in,

25
00:01:17.570 --> 00:01:20.800
they're telling us how easy
it is to push the buttons and

26
00:01:20.800 --> 00:01:24.360
our other maintenance engineers can open
up the access panel whenever they need.

27
00:01:24.360 --> 00:01:27.260
And it's all nice and
great job, great solution.

28
00:01:28.430 --> 00:01:32.070
Six months go by, everything's been
humming along nicely and the boss comes up

29
00:01:32.070 --> 00:01:35.870
to you one day and says I've got
another problem I need you to solve.

30
00:01:35.870 --> 00:01:38.980
This is a very needy boss, right,
got a lot of problems for you to solve.

31
00:01:38.980 --> 00:01:40.180
That's good job security anyways.

32
00:01:40.180 --> 00:01:43.210
All right, so he's got another job for
you to solve, another problem.

33
00:01:44.320 --> 00:01:49.910
You see, what we've noticed is
that our competitors are able to

34
00:01:49.910 --> 00:01:53.189
come up with new kinds of
candy almost on a daily basis.

35
00:01:54.630 --> 00:01:56.380
They try out one kinda candy one day and

36
00:01:56.380 --> 00:01:59.140
the next day they're producing
an entirely different kinda candy.

37
00:01:59.140 --> 00:02:02.870
It's amazing how quickly they can
just spin out new kinds of candy.

38
00:02:02.870 --> 00:02:05.540
And we're not able to keep up
with all the different kinda

39
00:02:05.540 --> 00:02:07.390
experimentation that they're doing.

40
00:02:07.390 --> 00:02:10.570
We just only produce the one
kinda candy over and over again.

41
00:02:10.570 --> 00:02:12.710
And we've tried, we've experimented, but

42
00:02:12.710 --> 00:02:17.810
it's too slow to make these single boxes
with all these machines configured.

43
00:02:17.810 --> 00:02:20.840
Can you come up with some way for
us to do this more efficiently?

44
00:02:20.840 --> 00:02:23.380
For us to make these machines
that make our candy for

45
00:02:23.380 --> 00:02:25.230
us, we want to make them more efficiently.

46
00:02:27.140 --> 00:02:28.290
Without even realizing it,

47
00:02:28.290 --> 00:02:32.280
the boss is asking you the most
ludicrous thing of all.

48
00:02:32.280 --> 00:02:36.635
He's saying, could you make me
a machine that makes machines?

49
00:02:38.896 --> 00:02:41.309
&gt;&gt; Kyle Simpson: A machine that
takes machines as inputs and

50
00:02:41.309 --> 00:02:42.790
outputs other machines.

51
00:02:42.790 --> 00:02:44.250
Could you make me something like that?

52
00:02:44.250 --> 00:02:44.910
Go invent it.

53
00:02:46.550 --> 00:02:47.780
This is a real head scratcher.

54
00:02:47.780 --> 00:02:50.070
It's gonna take a while to
try to invent that, okay?

55
00:02:51.070 --> 00:02:52.710
But you'll work on it.

56
00:02:52.710 --> 00:02:53.859
Let's switch back to the code.

57
00:02:55.460 --> 00:02:58.530
We've been thinking about that
shipping rate calculation, and

58
00:02:58.530 --> 00:03:02.020
it's been going along fine, and
then somebody else in the company says,

59
00:03:02.020 --> 00:03:04.520
we actually have different
kinds of shipping rates.

60
00:03:04.520 --> 00:03:08.010
We have international shipping rate,
we have domestic shipping rate,

61
00:03:08.010 --> 00:03:13.370
we have express shipping rate,
and overnight shipping rate.

62
00:03:13.370 --> 00:03:16.430
But everywhere we keep defining
all these different functions is

63
00:03:16.430 --> 00:03:17.360
cluttering up our code.

64
00:03:18.510 --> 00:03:21.920
Could you make it easier for us to
define these shipping rate functions?

65
00:03:23.920 --> 00:03:29.320
So you, the programmer, think well sure,
because there's a pattern involved in

66
00:03:29.320 --> 00:03:34.450
defining each of these functions, which is
that each of the shipping rate functions

67
00:03:34.450 --> 00:03:40.320
takes a different set of three
functions and calls them in succession.

68
00:03:41.520 --> 00:03:46.020
So you think to yourself,
I'll just make myself a utility.

69
00:03:46.020 --> 00:03:48.700
And maybe I'll call this compose three.

70
00:03:48.700 --> 00:03:50.830
It takes three functions fn3(fn2(fn1.

71
00:03:50.830 --> 00:03:54.520
I'll explain why that
ordering in just a moment.

72
00:03:54.520 --> 00:03:57.040
It takes those three functions and

73
00:03:57.040 --> 00:04:01.750
it produces a new function, which we'll
call each one of those in succession.

74
00:04:01.750 --> 00:04:04.000
First one gets the input value.

75
00:04:04.000 --> 00:04:06.020
Output of that becomes
the input to the next.

76
00:04:06.020 --> 00:04:07.950
Output of that becomes
the input to the next.

77
00:04:07.950 --> 00:04:09.550
And the output of that
is finally returned.

78
00:04:10.800 --> 00:04:13.740
And you notice now that
you can just define

79
00:04:13.740 --> 00:04:15.990
as many shipping rate
functions as you want.

80
00:04:15.990 --> 00:04:19.300
You make the original shipping rate
function like this, but later you might

81
00:04:19.300 --> 00:04:23.070
say the international shipping rate,
and instead of saying- 2, you say- 1.

82
00:04:23.070 --> 00:04:26.450
And instead of saying triple,
you say quadruple.

83
00:04:26.450 --> 00:04:28.756
You just pass in different functions, and

84
00:04:28.756 --> 00:04:31.776
you get a different shipping
rate function as a result.

85
00:04:35.268 --> 00:04:39.349
&gt;&gt; Kyle Simpson: Can you see why the
definition of shipping rate on line five,

86
00:04:39.349 --> 00:04:43.120
not only is it point free,
but it's more declarative?

87
00:04:44.480 --> 00:04:47.540
It says to somebody who
knows what composition is,

88
00:04:47.540 --> 00:04:50.160
I know that it's going to go in order.

89
00:04:52.360 --> 00:04:55.770
I know that it's going to go in order,
from right to left.

90
00:04:55.770 --> 00:04:59.130
It's first gonna call passing
any input to increment.

91
00:04:59.130 --> 00:05:03.041
Then it's gonna pass the input to triple,
then it's gonna pass the input to- 2, and

92
00:05:03.041 --> 00:05:04.877
finally it's gonna return the result.

93
00:05:08.422 --> 00:05:11.109
&gt;&gt; Kyle Simpson: Functional programmers
know that a composition works exactly

94
00:05:11.109 --> 00:05:11.620
like that.

95
00:05:11.620 --> 00:05:14.980
If you have a list of functions, it will
execute them in right to left order,

96
00:05:14.980 --> 00:05:17.930
passing the output of each one
as the input of the next, and

97
00:05:17.930 --> 00:05:19.700
finally giving you that result.

98
00:05:19.700 --> 00:05:25.840
And what we see here now is that
composition is declarative data flow.

99
00:05:28.350 --> 00:05:31.930
It is the flow of data through
a series of operations

100
00:05:31.930 --> 00:05:34.760
defined declaratively
rather than imperatively.

101
00:05:36.530 --> 00:05:38.470
Here is why this is so critical.

102
00:05:38.470 --> 00:05:45.140
Your programs don't mean anything
if they don't mean data flow.

103
00:05:46.150 --> 00:05:51.410
The whole point of your program is
to have data coming in, doing stuff,

104
00:05:51.410 --> 00:05:52.310
and then going back out.

105
00:05:53.880 --> 00:05:56.510
So your entire program is
a series of data flows.

106
00:05:56.510 --> 00:05:59.620
It's a series of state
transition managed data flows.

107
00:05:59.620 --> 00:06:04.915
And the functional programmer knows if
that's what our programs are about,

108
00:06:04.915 --> 00:06:08.173
then I should declare my
data flows in a clear and

109
00:06:08.173 --> 00:06:12.675
obvious way rather than having
my data flows implicitly linked.

110
00:06:12.675 --> 00:06:15.774
This function calls this one,
who calls this one, who calls this one.

111
00:06:15.774 --> 00:06:18.538
Anybody got an application like that
where functions call each other all

112
00:06:18.538 --> 00:06:20.050
over the place?

113
00:06:20.050 --> 00:06:22.460
Tracking the data flow is
pretty difficult, isn't it?

114
00:06:23.710 --> 00:06:26.164
How easy is it to track
the data flow on line 6?

115
00:06:27.280 --> 00:06:29.080
It's as easy as going from right to left,
isn't it?

116
00:06:31.410 --> 00:06:34.300
Composition is so
critical to functional programming

117
00:06:34.300 --> 00:06:38.250
because the entire point of your
program is to have data flow.

118
00:06:38.250 --> 00:06:39.650
This is how we make it declarative.

119
00:06:43.190 --> 00:06:47.170
That compose three utility, by the way,
that I invented for the purposes of this

120
00:06:47.170 --> 00:06:50.740
discussion, there's a general form of
that, which we'll get to later, and

121
00:06:50.740 --> 00:06:54.460
it's just called compose, and
it takes any number of functions.

122
00:06:54.460 --> 00:06:59.080
So you could compose one or
two or five or 100.

123
00:06:59.080 --> 00:07:01.450
It's a general compose utility and

124
00:07:01.450 --> 00:07:04.890
it's provided by all your favorite
functional programming libraries.

