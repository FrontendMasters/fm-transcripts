WEBVTT

1
00:00:00.240 --> 00:00:05.159
&gt;&gt; Speaker 1: So CPS is some sort of
memorization where we're trying to call

2
00:00:05.159 --> 00:00:05.923
Const V?

3
00:00:08.440 --> 00:00:10.496
&gt;&gt; Kyle Simpson: If I go back to CPS for
just a moment,

4
00:00:10.496 --> 00:00:12.424
I'll go back a couple of slides.

5
00:00:12.424 --> 00:00:16.111
In CPS the trick is that
what we're doing is,

6
00:00:16.111 --> 00:00:21.753
instead of actually making
the recursive call, doing the work now.

7
00:00:21.753 --> 00:00:24.988
We're deferring the work by
wrapping it up in a function and

8
00:00:24.988 --> 00:00:27.290
passing that function forward.

9
00:00:27.290 --> 00:00:31.020
So none of that work
is actually happening.

10
00:00:31.020 --> 00:00:34.350
You know how earlier we talked
about do the work now and

11
00:00:34.350 --> 00:00:37.140
pass it along in
a variable as an argument?

12
00:00:37.140 --> 00:00:37.860
Here, we're saying,

13
00:00:37.860 --> 00:00:41.089
don't do work now but pass along
the function which will do the work later.

14
00:00:42.350 --> 00:00:45.616
And then that one passes along another
function which we do their work later.

15
00:00:45.616 --> 00:00:50.700
So that cont variable becomes a bigger and
bigger and bigger wrapped function.

16
00:00:50.700 --> 00:00:53.410
None of the inner functions have ever
been called yet, but it's a bigger and

17
00:00:53.410 --> 00:00:57.720
bigger and bigger wrap function all of
which are actually in tail call form.

18
00:00:57.720 --> 00:01:00.610
It's all a bunch of return
return return return return.

19
00:01:00.610 --> 00:01:02.940
None of the work has been done,
but we have made a bigger and

20
00:01:02.940 --> 00:01:06.140
bigger function with all
that stuff closed over.

21
00:01:06.140 --> 00:01:09.330
And then at the very last thing,
which is what happens on line five,

22
00:01:09.330 --> 00:01:10.380
there's our base condition.

23
00:01:10.380 --> 00:01:13.930
We say,
hey big giant wrapped huge function,

24
00:01:13.930 --> 00:01:15.610
collapse yourself down into one value.

25
00:01:17.000 --> 00:01:18.606
That's what line five does,

26
00:01:18.606 --> 00:01:22.338
it calls that giant function which
[SOUND] computes all those values.

27
00:01:25.966 --> 00:01:30.055
&gt;&gt; Speaker 1: Why have tools to translate
code to CPS if we still have the memory

28
00:01:30.055 --> 00:01:30.670
issues?

29
00:01:31.790 --> 00:01:34.415
&gt;&gt; Kyle Simpson: Well we get
around the stack issue and

30
00:01:34.415 --> 00:01:37.720
they have other ways of dealing
with the heap allocation issue.

31
00:01:37.720 --> 00:01:41.720
This is specifically, my comments were
specifically about JavaScript, which is

32
00:01:41.720 --> 00:01:45.610
that JavaScript is getting around a stack
problem but creating a heap problem.

33
00:01:45.610 --> 00:01:50.320
CPS is actually how languages
like compilers in C

34
00:01:50.320 --> 00:01:53.230
deal with recursion in an optimized form.

35
00:01:53.230 --> 00:01:55.760
They don't necessarily rewrite
it in to a tail call form,

36
00:01:55.760 --> 00:01:58.280
they will rewrite it in to a CPS form.

37
00:01:58.280 --> 00:02:01.010
And that's what the C compiler
does automatically for them.

38
00:02:01.010 --> 00:02:04.740
So they have other techniques for dealing
with the memory allocation problem there.

39
00:02:04.740 --> 00:02:08.148
But for us the problem is, because
they're not dealing with closure there,

40
00:02:08.148 --> 00:02:08.730
like we are.

41
00:02:08.730 --> 00:02:10.610
They're doing in a different way.

42
00:02:10.610 --> 00:02:13.840
We're dealing with closure,
which is allocation off of the heap.

43
00:02:13.840 --> 00:02:15.620
So we have a memory problem
that we have to deal with.

44
00:02:17.150 --> 00:02:18.849
&gt;&gt; Speaker 1: What are good
trampoline libraries?

45
00:02:20.368 --> 00:02:22.332
&gt;&gt; Kyle Simpson: You don't
need a Trampoline library.

46
00:02:22.332 --> 00:02:25.283
Trampoline is a utility that will
be provided to you by your favorite

47
00:02:25.283 --> 00:02:27.290
functional programming library.

48
00:02:27.290 --> 00:02:29.460
Aramda has one, Low Dash has one.

49
00:02:29.460 --> 00:02:32.140
Almost all the functional libraries
will have that utility that you just

50
00:02:32.140 --> 00:02:32.990
pass it in.

51
00:02:32.990 --> 00:02:35.070
Then they have slightly different
quirks for how they work, so

52
00:02:35.070 --> 00:02:36.130
read the documentation.

53
00:02:36.130 --> 00:02:39.562
But, they basically all provide
this because it is generally

54
00:02:39.562 --> 00:02:40.750
one of the accepted or

55
00:02:40.750 --> 00:02:45.313
preferred forms for doing recursion when
you can't take advantage of tail call.

56
00:02:47.630 --> 00:02:53.107
&gt;&gt; Speaker 1: And can you summarize
the difference between trampoline and

57
00:02:53.107 --> 00:02:55.047
regular recursion?

58
00:02:55.047 --> 00:02:56.140
&gt;&gt; Kyle Simpson: Yes.

59
00:02:56.140 --> 00:02:59.779
The difference between a trampoline
call like what we see here and

60
00:02:59.779 --> 00:03:03.629
regular recursion is that in regular
recursion we stack up the work.

61
00:03:03.629 --> 00:03:05.228
We literally stack up the work.

62
00:03:05.228 --> 00:03:08.455
We say you do some work, and then you
do some work, and you do some work, and

63
00:03:08.455 --> 00:03:11.806
you do some work, and you do some work,
and that's growing our memory size.

64
00:03:11.806 --> 00:03:14.640
In a trampoline we never
stack up the work.

65
00:03:14.640 --> 00:03:16.266
We do some work here.

66
00:03:16.266 --> 00:03:19.070
And then we return work
back to this helper,

67
00:03:19.070 --> 00:03:22.840
this utility called trampoline,
by way of returning the function.

68
00:03:22.840 --> 00:03:25.240
That's what we're doing on line 5,
we return a function.

69
00:03:25.240 --> 00:03:29.170
And then the trampoline says you returned
me a function, I need to do that work.

70
00:03:29.170 --> 00:03:31.360
And then we return some more work,
and then we do it.

71
00:03:31.360 --> 00:03:34.280
And so we're bouncing up and
down between a stack depth of zero and

72
00:03:34.280 --> 00:03:36.940
a stack depth of one, over,
and over, and over again.

73
00:03:36.940 --> 00:03:38.160
We're not stacking up.

74
00:03:38.160 --> 00:03:41.840
And that's the difference,
that's how we avoid that range error.

75
00:03:44.500 --> 00:03:47.270
So just as by way of one
final comparison let's put

76
00:03:47.270 --> 00:03:50.635
the two implementations of
countVowels next to each other.

77
00:03:50.635 --> 00:03:55.055
I just want you to see that it's
not actually all that scary.

78
00:03:55.055 --> 00:04:00.915
Writing a trampolinable recursive function
versus a non trampolinable version.

79
00:04:00.915 --> 00:04:05.350
In the first version up on top,
we have a function countVowels,

80
00:04:05.350 --> 00:04:07.960
which is tail call form.

81
00:04:07.960 --> 00:04:11.310
And then in the version on the bottom
we have a trampolined version of it.

82
00:04:11.310 --> 00:04:17.300
And if you notice, line 4 on top and line
2 on the bottom, they are the same line.

83
00:04:17.300 --> 00:04:20.900
Line 5 on top and line 3 on
the bottom they are the same line.

84
00:04:20.900 --> 00:04:24.950
Line 6 on top and line 5 on
the bottom they are the same line.

85
00:04:26.787 --> 00:04:30.272
&gt;&gt; Kyle Simpson: So those are exactly
the same pattern you can write a tail call

86
00:04:30.272 --> 00:04:34.984
form function and then all you have to do
is insert that wrapper function line 4 and

87
00:04:34.984 --> 00:04:36.980
line 6 there at the bottom.

88
00:04:36.980 --> 00:04:40.880
Insert the wrapper function to return
that work and pass it to a trampoline.

