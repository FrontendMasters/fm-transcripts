WEBVTT

1
00:00:00.200 --> 00:00:03.549
&gt;&gt; Kyle Simpson: One final time,
let's go back to that candy factory.

2
00:00:03.549 --> 00:00:06.326
Because you, the engineer have
really been working hard on this.

3
00:00:06.326 --> 00:00:09.113
And you have a big unveil to the boss and
you say,

4
00:00:09.113 --> 00:00:11.290
I have finally cracked the problem.

5
00:00:11.290 --> 00:00:15.593
I realized that all the machines
that we use to make

6
00:00:15.593 --> 00:00:19.901
candy all have a standard input and
output valve.

7
00:00:19.901 --> 00:00:24.326
And they all have standard ways that the
wires plug, and the on off switches work.

8
00:00:24.326 --> 00:00:26.025
There's a nice standardization here.

9
00:00:26.025 --> 00:00:29.277
So what I realized is I could
make a machine making machine.

10
00:00:29.277 --> 00:00:32.822
Drop in any three of those machines
in whatever order you want.

11
00:00:32.822 --> 00:00:39.110
And out spits the nice boxed machine with
the on off switch exactly the way we want.

12
00:00:41.080 --> 00:00:43.130
Now I know it's stretching the metaphor,
but

13
00:00:43.130 --> 00:00:46.994
hopefully you're seeing the connection to
what we did with the composeThree utility.

14
00:00:46.994 --> 00:00:50.630
The composeThree utility is
our higher order utility or

15
00:00:50.630 --> 00:00:54.620
higher order function,
which is a machine making machine.

16
00:00:55.950 --> 00:00:59.480
It takes machines aka functions as inputs.

17
00:00:59.480 --> 00:01:02.160
Produces another function,
another machine as an output.

18
00:01:04.880 --> 00:01:06.541
That's what composition is all about.

19
00:01:09.941 --> 00:01:13.193
&gt;&gt; Kyle Simpson: So we can take
that same compose three utility and

20
00:01:13.193 --> 00:01:14.789
use it multiple times.

21
00:01:14.789 --> 00:01:20.810
If I call it with minus2, triple, and
increment that's the F composition.

22
00:01:21.870 --> 00:01:25.370
Then it's going to first increment and
then triple and then minus2.

23
00:01:25.370 --> 00:01:29.350
But if I give it those in reverse order,
we end up with

24
00:01:29.350 --> 00:01:32.220
a different kind of function which
produces a different result.

25
00:01:32.220 --> 00:01:36.010
The same input 4 to F produces output 13.

26
00:01:36.010 --> 00:01:41.720
But the 4 input to p produces 7, why?

27
00:01:41.720 --> 00:01:46.095
Because the number 4 is incremented to 5,

28
00:01:46.095 --> 00:01:52.006
tripled to 15 and
minus2 to 13 versus 4 minus2 is 2,

29
00:01:52.006 --> 00:01:55.575
tripled to 6, incremented to 7.

30
00:01:55.575 --> 00:01:59.249
So that math is not commutative and that's
why we end up with a different result.

31
00:02:00.720 --> 00:02:04.990
Two different as we said
shipping rate functions, okay.

32
00:02:07.600 --> 00:02:11.110
But what if I wanted to define
them in the opposite order?

33
00:02:11.110 --> 00:02:13.840
You could envision if we've
envisioned to composeThree,

34
00:02:13.840 --> 00:02:18.300
you could envision a pipeThree,
which we list them in the opposite order.

35
00:02:18.300 --> 00:02:20.279
Look at line 11 compared to line 5.

36
00:02:21.810 --> 00:02:27.320
Line 11 has them listed in
the same order as Line 5,

37
00:02:27.320 --> 00:02:32.470
but it produces a result
that is the same as Line 6.

38
00:02:32.470 --> 00:02:35.770
It's the same as the p function.

39
00:02:35.770 --> 00:02:40.130
So in other words, pipe goes left to
right, where compose goes right to left.

40
00:02:42.430 --> 00:02:46.107
&gt;&gt; Student: Could you explain why if it's
beyond the scope of this, that's fine.

41
00:02:46.107 --> 00:02:52.388
But if you could just quick, why does
that go off the back end in the pipe?

42
00:02:52.388 --> 00:02:54.837
&gt;&gt; Kyle Simpson: So
why does compose go right to left, and

43
00:02:54.837 --> 00:02:57.152
why does pipe go left to right, okay?

44
00:02:57.152 --> 00:03:01.494
I don't know the canonical,
absolute correct the answer to that.

45
00:03:01.494 --> 00:03:05.070
But I can give you some
anecdotal evidence for this.

46
00:03:05.070 --> 00:03:09.880
If you think about something, imagine a
function call where you say a parenthesis.

47
00:03:09.880 --> 00:03:15.581
I'll do it backwards here, a parentheses,
b parentheses, c parentheses too.

48
00:03:15.581 --> 00:03:18.179
So you are listing them in ABC order,
right?

49
00:03:19.230 --> 00:03:20.890
What order are they going to execute in?

50
00:03:23.160 --> 00:03:24.922
&gt;&gt; Student: They should just go A, B, C.

51
00:03:24.922 --> 00:03:30.260
&gt;&gt; Kyle Simpson: No, when you have A,
parentheses, and then B, parentheses, and

52
00:03:30.260 --> 00:03:35.700
then C, parentheses, C executes first,
and its output goes to B.

53
00:03:35.700 --> 00:03:37.600
Remember, back a couple of slides?

54
00:03:37.600 --> 00:03:42.816
That Compose utility,
there's my fn3, fn2, fn1.

55
00:03:42.816 --> 00:03:45.028
Which one executes first?

56
00:03:45.028 --> 00:03:47.100
&gt;&gt; Student: Well it's Compose so
it's the f1.

57
00:03:47.100 --> 00:03:51.690
&gt;&gt; Kyle Simpson: Well, don't worry about
what Compose is, just look at line 3.

58
00:03:51.690 --> 00:03:54.479
Those three function calls,
which one runs first?

59
00:03:55.740 --> 00:03:59.550
&gt;&gt; Student: So we're going off
of the DRS my aunt Sally stuff.

60
00:04:00.710 --> 00:04:03.880
So it'd be F1 cuz that's inside
the inner parentheses first.

61
00:04:03.880 --> 00:04:08.173
&gt;&gt; Kyle Simpson: Yes, that one has to
execute first to produce a value that then

62
00:04:08.173 --> 00:04:12.644
gets past the FN2 which then
produces a value that goes to fn2.

63
00:04:12.644 --> 00:04:13.529
&gt;&gt; Student: So is it kinda,

64
00:04:13.529 --> 00:04:17.078
it's similar to the orders of
operations in simple algebra?

65
00:04:17.078 --> 00:04:21.803
That you would do whatever's
in the parentheses first?

66
00:04:21.803 --> 00:04:23.403
&gt;&gt; Kyle Simpson: Yes,
the simple way of saying it is,

67
00:04:23.403 --> 00:04:25.628
that's the way JavaScript syntax works,
right?

68
00:04:25.628 --> 00:04:29.424
The way function calls work is that
arguments are passed in a parenthesis set.

69
00:04:29.424 --> 00:04:33.360
And the argument has to be computed
before the function can be called.

70
00:04:33.360 --> 00:04:35.060
If the argument is itself a function,

71
00:04:35.060 --> 00:04:37.570
that function's got to be
called with its arguments.

72
00:04:37.570 --> 00:04:40.328
If that argument is a function call that,
so

73
00:04:40.328 --> 00:04:45.114
just by virtue of the way syntax works,
you have to go sort of inner to outer.

74
00:04:45.114 --> 00:04:47.502
It's not really right to left,
it's inner to outer.

75
00:04:47.502 --> 00:04:52.131
But in this case, it happens to
execute in a right to left function.

76
00:04:52.131 --> 00:04:56.329
So if you think about compose,
if I had a code,

77
00:04:56.329 --> 00:05:02.254
literally that looked like line
3 somewhere in my app that said,

78
00:05:02.254 --> 00:05:05.395
fn3(fn2(fn1(some value.

79
00:05:05.395 --> 00:05:07.613
If that code existed in my app, and

80
00:05:07.613 --> 00:05:10.990
I wanted to refactor that
code to use a composition.

81
00:05:10.990 --> 00:05:12.718
I would write, compose and

82
00:05:12.718 --> 00:05:16.409
what order would I list
the functions in the compose call?

83
00:05:16.409 --> 00:05:21.738
fn3, fn2, fn1, in other words,
I would write the compose

84
00:05:21.738 --> 00:05:26.950
call in the same order as what
is the equivalent of calls.

85
00:05:26.950 --> 00:05:30.960
And that's why it has to execute right
to left to preserve the same semantic.

86
00:05:32.730 --> 00:05:35.097
That's anecdotal explanation.

87
00:05:35.097 --> 00:05:37.356
I don't know if that's really
why they define it that way.

88
00:05:37.356 --> 00:05:41.614
But in my mind they define it that way
because it matches the source order.

89
00:05:41.614 --> 00:05:44.947
&gt;&gt; Student: Good enough for me.

90
00:05:44.947 --> 00:05:46.140
&gt;&gt; Kyle Simpson: Okay,
let me jump back here.

91
00:05:47.190 --> 00:05:52.550
Pipe is an important operation because
it has the left to right ordering.

92
00:05:52.550 --> 00:05:57.080
And sometimes our brain is actually
thinking, which one am I gonna do first?

93
00:05:57.080 --> 00:05:58.160
That's the thing on the left.

94
00:05:58.160 --> 00:06:00.320
I'm gonna do -2, and
then I'm gonna do triple, and

95
00:06:00.320 --> 00:06:02.260
then I'm gonna do increment line 11.

96
00:06:02.260 --> 00:06:06.170
So sometimes it's more convenient for
us to think left to right.

97
00:06:06.170 --> 00:06:08.609
Oftentimes, it's more convenient for
us to go right to left.

98
00:06:09.670 --> 00:06:14.940
Similar to what I said before where
more people tend to, in my experience,

99
00:06:14.940 --> 00:06:19.474
more people tend to start off
preferring partial application.

100
00:06:19.474 --> 00:06:22.630
And then eventually they become
converts to the school of currying.

101
00:06:23.870 --> 00:06:27.070
The same thing seems to be true
with piping and composing.

102
00:06:27.070 --> 00:06:30.760
People that are not that
familiar with all of the ins and

103
00:06:30.760 --> 00:06:33.180
outs of functional programming.

104
00:06:33.180 --> 00:06:36.720
Maybe they did dabble in it, but they
don't do a lot of functional programming.

105
00:06:36.720 --> 00:06:41.712
They tend to like piping more, because
they tend to think left to right, and

106
00:06:41.712 --> 00:06:44.761
right to left seems to be confusing and
weird.

107
00:06:44.761 --> 00:06:47.052
The more you do functional programming,

108
00:06:47.052 --> 00:06:51.642
the more you will realize you're going to
use compose far more often than use pipe.

109
00:06:51.642 --> 00:06:54.735
So it's one of those things that
is counterintuitive at first and

110
00:06:54.735 --> 00:06:57.840
then becomes more intuitive as
you get more experienced with it.

