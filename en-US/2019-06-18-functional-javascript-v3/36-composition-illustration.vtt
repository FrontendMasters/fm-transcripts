WEBVTT

1
00:00:00.100 --> 00:00:02.400
&gt;&gt; Kyle: All right let's
talk about composition.

2
00:00:02.400 --> 00:00:05.320
We briefly mentioned this one
earlier as well when we're talking

3
00:00:05.320 --> 00:00:08.500
about point free let's
dig into composition.

4
00:00:08.500 --> 00:00:13.330
Let's understand the idea of one
function's output becoming the input

5
00:00:13.330 --> 00:00:14.130
to another function.

6
00:00:15.400 --> 00:00:19.880
Here's an example, I've got three numerary
functions, a minus2, a triple and

7
00:00:19.880 --> 00:00:21.260
an increment.

8
00:00:21.260 --> 00:00:22.748
And they do exactly what you would expect,

9
00:00:22.748 --> 00:00:26.800
minus2 subtracts two, triple triples it,
increment increments by one.

10
00:00:27.930 --> 00:00:31.825
On line six,
I'm going to call increment with four,

11
00:00:31.825 --> 00:00:37.260
because that's my base shipping
rate that I'm going to start with.

12
00:00:37.260 --> 00:00:40.250
Or that's one of my base inputs for
calculating a shipping rate.

13
00:00:40.250 --> 00:00:42.860
And then that gives me
a temporary variable.

14
00:00:42.860 --> 00:00:48.200
And then I'm going to pass that value
line seven into the triple function.

15
00:00:48.200 --> 00:00:52.550
So I went from four to five and
then I passed five into triple.

16
00:00:52.550 --> 00:00:54.420
Which triples it, that becomes 15.

17
00:00:54.420 --> 00:00:55.950
And I save that into temp.

18
00:00:55.950 --> 00:01:02.380
And finally, I pass that 15 value
into the minus2 function line eight.

19
00:01:02.380 --> 00:01:06.310
And that gives me the end result which
would have been my shipping rate

20
00:01:06.310 --> 00:01:08.330
being added to the total
cost of this product.

21
00:01:09.350 --> 00:01:14.190
Okay, this is a scenario that we're going
to use over the next several slides

22
00:01:14.190 --> 00:01:16.570
to try to illustrate
the idea of composition.

23
00:01:17.600 --> 00:01:22.230
And what you need to get out of this, the
take away that you should be looking for

24
00:01:22.230 --> 00:01:27.550
is becoming familiar enough with this
pattern that you spot when one function

25
00:01:27.550 --> 00:01:34.170
call is producing an output that is then
later routed to another function call.

26
00:01:34.170 --> 00:01:37.630
It is often the case that it'll end
up in some kind of variable and

27
00:01:37.630 --> 00:01:39.550
then that variable gets passed.

28
00:01:39.550 --> 00:01:42.350
Sometimes you'll see it literally
written with a nested like

29
00:01:42.350 --> 00:01:43.600
one call inside of another.

30
00:01:43.600 --> 00:01:46.460
But more often you'll see
them assigned to variables,

31
00:01:46.460 --> 00:01:49.710
sometimes things like temporary
variables like you see here.

32
00:01:49.710 --> 00:01:53.193
And you want to get to the point where
you can recognize [SOUND] that's

33
00:01:53.193 --> 00:01:54.058
a composition.

34
00:01:54.058 --> 00:01:56.345
Okay?
That's the take away.

35
00:01:56.345 --> 00:01:58.910
That's the final summary.

36
00:01:58.910 --> 00:02:00.110
Okay?

37
00:02:00.110 --> 00:02:05.230
So what I'm going to do to illustrate
composition for you, is I'm going to

38
00:02:05.230 --> 00:02:09.640
ask you to switch your brain between the
code scenario that we're looking at here.

39
00:02:09.640 --> 00:02:13.810
And I'm gonna ask you to look at
a metaphor that I'm going to use

40
00:02:13.810 --> 00:02:15.620
to describe it, okay?

41
00:02:15.620 --> 00:02:17.130
As we talk about this metaphor,

42
00:02:17.130 --> 00:02:22.430
the first step that I want to
address is this idea of abstraction.

43
00:02:22.430 --> 00:02:24.620
How many of you have heard
that term before, abstraction?

44
00:02:24.620 --> 00:02:25.440
Okay?

45
00:02:25.440 --> 00:02:28.789
Abstraction is one of those terms
that is thrown around in programming.

46
00:02:28.789 --> 00:02:32.140
And nobody really can pinpoint and

47
00:02:32.140 --> 00:02:35.440
say definitely,
this is what I mean by abstraction.

48
00:02:35.440 --> 00:02:39.480
It seems to have lots of different
meanings in lots of different places.

49
00:02:39.480 --> 00:02:43.400
But I want to talk about the original
idea behind abstraction.

50
00:02:43.400 --> 00:02:47.340
The original idea behind
abstraction is that you have two or

51
00:02:47.340 --> 00:02:53.230
more things in say a piece of code
that are intertwined together.

52
00:02:53.230 --> 00:02:54.459
We could look at line six, seven and

53
00:02:54.459 --> 00:02:57.978
eight, and we could say that there
are two distinct concepts happening here.

54
00:02:57.978 --> 00:03:00.510
And they're interwoven.

55
00:03:00.510 --> 00:03:05.050
One of the concept is that we're
calculating a shipping rate and one of

56
00:03:05.050 --> 00:03:10.150
the concepts is we're adding that shipping
rate to the base total for this order.

57
00:03:11.470 --> 00:03:13.530
Those are two distinct concerns, but

58
00:03:13.530 --> 00:03:16.480
in this particular piece of code
they're wrapped up together.

59
00:03:16.480 --> 00:03:17.540
Okay?

60
00:03:17.540 --> 00:03:22.220
The initial original idea
of abstraction was to tease

61
00:03:22.220 --> 00:03:26.050
apart two things which were
otherwise intertwined together.

62
00:03:27.210 --> 00:03:31.580
To tease those two things apart so
that they are separate.

63
00:03:31.580 --> 00:03:36.950
And by way of separation we insert
in between them a semantic boundary.

64
00:03:38.510 --> 00:03:42.010
That allows us not to hide one or
the other.

65
00:03:42.010 --> 00:03:44.500
That's what a lot of people think
abstraction is about hiding.

66
00:03:44.500 --> 00:03:47.970
It's not about hiding,
it's about separating.

67
00:03:47.970 --> 00:03:53.160
Abstraction is saying take these two
things, separate them so that I can

68
00:03:53.160 --> 00:03:57.940
look at this thing and understand it or
look at this thing and understand it.

69
00:03:57.940 --> 00:04:01.320
Without, while looking at this thing,
having to worry about this one, or

70
00:04:01.320 --> 00:04:02.850
vice versa.

71
00:04:02.850 --> 00:04:07.860
By separating them, we make them easier
to understand, easier to analyze.

72
00:04:07.860 --> 00:04:12.150
So how would we abstract lines six,
seven, and eight.

73
00:04:13.430 --> 00:04:17.270
Not hide things, but
rather separate things.

74
00:04:18.360 --> 00:04:22.173
That's what I want you to keep in the back
of your minds as we go throughout this

75
00:04:22.173 --> 00:04:23.050
discussion.

76
00:04:23.050 --> 00:04:24.408
Okay?
So, the metaphor I'm going to use and

77
00:04:24.408 --> 00:04:26.050
we're going to be mentally
jumping back and forth.

78
00:04:26.050 --> 00:04:28.900
So, hopefully you've had your caffeine,
hopefully you're ready to mentally

79
00:04:28.900 --> 00:04:31.730
jump back and
forth between these two scenarios.

80
00:04:31.730 --> 00:04:33.050
For this scenario,

81
00:04:33.050 --> 00:04:38.640
I'm gonna ask you to play as if you
are an engineer at a candy factory.

82
00:04:38.640 --> 00:04:41.140
Okay?
And at the candy factory you have these

83
00:04:41.140 --> 00:04:43.280
machine setups like you see here.

84
00:04:43.280 --> 00:04:46.020
You got these machines with
conveyor belts in between them,

85
00:04:46.020 --> 00:04:50.840
where they produce the candy step by
step by step down the assembly line.

86
00:04:50.840 --> 00:04:52.320
Okay?
So on the far right here,

87
00:04:52.320 --> 00:04:56.290
we see a machine that, you see my great
art skills, I'm a pretty good artist here.

88
00:04:56.290 --> 00:04:59.010
You see this machine that
takes melted chocolate,

89
00:04:59.010 --> 00:05:00.700
you pour in the melted chocolate, and

90
00:05:00.700 --> 00:05:05.260
what comes out on the bottom is these
cooled blocks of chocolate, okay?

91
00:05:05.260 --> 00:05:06.980
That's what machine one does.

92
00:05:06.980 --> 00:05:11.300
Those cooled blocks of chocolate rumble
down the conveyor belt to the left,

93
00:05:11.300 --> 00:05:14.680
they go to the next machine whose job is
to chop it up into tiny little pieces.

94
00:05:15.780 --> 00:05:18.850
And so those tiny little pieces
are coming out of that machine.

95
00:05:18.850 --> 00:05:22.870
They rumble down another conveyor belt and
they fall into the third machine,

96
00:05:22.870 --> 00:05:25.680
whose job is to wrap them up
in the nice candy wrappers.

97
00:05:25.680 --> 00:05:29.870
And those roll along to the next
machine which packages and so on, okay.

98
00:05:29.870 --> 00:05:34.420
So in this candy factory, we got a couple
of these contraptions, if you will.

99
00:05:34.420 --> 00:05:38.530
These machines set up on the factory
floor and everything's going well.

100
00:05:38.530 --> 00:05:41.960
You're the engineer who's responsible for
managing all these machines.

101
00:05:41.960 --> 00:05:46.170
One day the CEO,
the owner of this, president or

102
00:05:46.170 --> 00:05:49.645
whatever of this candy factory
comes to you and says, hey,

103
00:05:49.645 --> 00:05:53.090
you've been doing a really great job,
but we've got a little bit of a problem.

104
00:05:53.090 --> 00:05:56.370
And I wanna see if you can think
about how we could fix this problem?

105
00:05:57.410 --> 00:05:58.050
Okay?

106
00:05:58.050 --> 00:06:02.260
Because he says, you know,
the problem that we have is that our

107
00:06:02.260 --> 00:06:07.296
competitors are producing a lot more
chocolate more quickly than we are.

108
00:06:07.296 --> 00:06:11.540
Like they're producing three or four times
as much chocolate every day as we are.

109
00:06:11.540 --> 00:06:15.360
And we're losing to them and
we got to figure out a way to catch up.

110
00:06:15.360 --> 00:06:16.459
We need some way to catch up.

111
00:06:17.560 --> 00:06:21.800
So, the boss is basically saying,
can you figure out some way for

112
00:06:21.800 --> 00:06:24.370
us to make more chocolates.

113
00:06:24.370 --> 00:06:29.400
Now you know that these machines can't be
sped up, we can't make them run faster.

114
00:06:29.400 --> 00:06:33.740
So the only way to make more
chocolates is to have more machines.

115
00:06:33.740 --> 00:06:35.300
We're going to have more of these setup.

116
00:06:35.300 --> 00:06:38.310
And the problem is we don't
have room on the factory floor.

117
00:06:38.310 --> 00:06:39.957
They are taking up so much space.

118
00:06:39.957 --> 00:06:43.772
We only got a couple, we've only got room
for a couple of these in the factory.

119
00:06:43.772 --> 00:06:46.420
So you begin to roll round at
the back of your head thinking

120
00:06:46.420 --> 00:06:50.012
how could I make more room
on the factory floor for

121
00:06:50.012 --> 00:06:53.590
more of these machines so
that I can make more candy.

122
00:06:53.590 --> 00:06:54.760
We could keep up with our competitor.

123
00:06:55.880 --> 00:06:59.370
That's what you're going to be thinking
as an engineer at this candy factory.

124
00:06:59.370 --> 00:07:01.970
Now I want to press
pause on that scenario.

125
00:07:01.970 --> 00:07:05.800
And I want us to go back to that code
snippet that we were just looking at.

126
00:07:05.800 --> 00:07:10.380
Remember the code snippet where I
had those temp variables, okay.

127
00:07:10.380 --> 00:07:12.720
Those temp variables are kind
of cluttering things up and

128
00:07:12.720 --> 00:07:16.450
they're not really benefiting
us anywhere very much.

129
00:07:16.450 --> 00:07:19.860
And so we think you know what let's
just get rid of the temp variables and

130
00:07:19.860 --> 00:07:24.210
let's just have each function call
nested inside of another function call.

131
00:07:24.210 --> 00:07:28.263
Call increment four and then pass that to
triple and pass that to minus2 and then,

132
00:07:28.263 --> 00:07:30.510
bam, we've calculated the shipping rate.

133
00:07:31.610 --> 00:07:32.710
Anybody every done this before?

134
00:07:32.710 --> 00:07:34.470
Have you ever nested function
calls like that before?

135
00:07:34.470 --> 00:07:35.420
Okay.

136
00:07:35.420 --> 00:07:39.270
So whether you knew it or not,
you were doing composition.

137
00:07:39.270 --> 00:07:40.510
That's a function composition.

138
00:07:40.510 --> 00:07:44.670
Taking the output of one function,
making it the input of another function.

139
00:07:44.670 --> 00:07:46.420
We got rid of those nasty,

140
00:07:46.420 --> 00:07:51.880
ugly temp variables that were taking
up too much space in our program.

141
00:07:53.290 --> 00:07:54.700
You with me?

142
00:07:54.700 --> 00:07:55.712
And we've cleaned up the code.

143
00:07:57.581 --> 00:07:59.880
&gt;&gt; Kyle: Let's go back
to the candy factory.

144
00:07:59.880 --> 00:08:00.770
You're the engineer and

145
00:08:00.770 --> 00:08:04.960
you've been thinking to yourself,
you know, I think what we ought to do.

146
00:08:04.960 --> 00:08:08.240
I think the big problem is
that those conveyor belts

147
00:08:08.240 --> 00:08:09.520
are taking up too much space.

148
00:08:10.760 --> 00:08:12.220
So you get this brilliant idea one day.

149
00:08:12.220 --> 00:08:16.240
You say, what if I just took
out all the conveyor belts, and

150
00:08:16.240 --> 00:08:18.420
what if I just stack the machines
right on top of each other?

151
00:08:20.170 --> 00:08:23.170
And I've got one machine at the very top
where we'll be pouring the chocolate,

152
00:08:23.170 --> 00:08:26.140
the chocolate falls out of that
machine directly into the next one.

153
00:08:26.140 --> 00:08:29.210
It falls out of that machine directly
into the next one and so on and

154
00:08:29.210 --> 00:08:30.721
bam, problem solved.

155
00:08:30.721 --> 00:08:32.321
Because now I can install many,

156
00:08:32.321 --> 00:08:36.970
many more of these on the factory floor
because I got rid of all that unnecessary

157
00:08:36.970 --> 00:08:42.578
clutter of all those conveyor belts,
all those temporary variables.

158
00:08:42.578 --> 00:08:46.010
You with me?

159
00:08:46.010 --> 00:08:48.880
So you install this solution
in the candy factory.

160
00:08:48.880 --> 00:08:51.838
And all of the sudden the factory
starts producing more candy and

161
00:08:51.838 --> 00:08:55.310
everybody seems happy and the boss slaps
you on the back and says great job.

162
00:08:57.380 --> 00:08:59.360
Things go well for six months.

163
00:09:00.400 --> 00:09:05.190
And then one day the boss comes to you and
says, hey we've got another problem.

164
00:09:05.190 --> 00:09:08.460
I need to see if you can try to solve for
us.

165
00:09:08.460 --> 00:09:10.580
We like the fact that we're
able to produce more candy.

166
00:09:10.580 --> 00:09:14.480
But one of the problems with this
new solution that you came up with,

167
00:09:14.480 --> 00:09:18.220
our factory, the line workers,
they've been complaining because

168
00:09:18.220 --> 00:09:20.310
these machines being stacked
on top of each other.

169
00:09:20.310 --> 00:09:21.630
It's very cluttered.

170
00:09:21.630 --> 00:09:25.060
There's wires all over the place and they
have to remember to push the button at

171
00:09:25.060 --> 00:09:29.770
exactly the right time and there's too
many buttons to push and too many wires.

172
00:09:29.770 --> 00:09:33.110
Is there some way that you could
just make a single machine

173
00:09:33.110 --> 00:09:37.270
that they pour in the chocolate and
out comes the wrapped candy?

174
00:09:37.270 --> 00:09:38.380
That's what the boss says.

175
00:09:38.380 --> 00:09:40.270
Right?
You know because bosses they don't

176
00:09:40.270 --> 00:09:44.510
think in terms of reality and they just
say, you engineer, go make it happen.

177
00:09:44.510 --> 00:09:47.170
Okay?
So they're basically asking you to invent

178
00:09:47.170 --> 00:09:49.390
some kind of machine
that does it all in one.

179
00:09:49.390 --> 00:09:51.210
Takes the cool chocolate, I mean,

180
00:09:51.210 --> 00:09:54.590
the melted chocolate at the top and
spits out wrapped candies.

181
00:09:54.590 --> 00:09:56.800
Make it easier for
all the factory workers.

182
00:09:56.800 --> 00:09:57.640
And you're thinking to yourself,

183
00:09:57.640 --> 00:10:02.430
well, even if I could do that, it would
be difficult for me to maintain it.

184
00:10:02.430 --> 00:10:04.758
Each of those individual steps and pieces.

185
00:10:04.758 --> 00:10:08.450
I'm going to have to have some way
to access what's going on, right?

186
00:10:08.450 --> 00:10:10.460
So this is what's rolling around
in the back of your head.

187
00:10:10.460 --> 00:10:12.130
You're the engineer,
you're trying to figure this stuff out.

188
00:10:13.490 --> 00:10:15.660
We have the same problem
back in our code base.

189
00:10:16.810 --> 00:10:21.200
Which is that we've got the place where
we're calculating our shipping and

190
00:10:21.200 --> 00:10:23.970
then we've got the place where
we're adding that to the total.

191
00:10:23.970 --> 00:10:26.800
And these two things are all wired up.

192
00:10:27.800 --> 00:10:31.280
It's hard to reason about
each one independently.

193
00:10:31.280 --> 00:10:35.280
So you think to yourself, I know I'm
good engineer I know what I need to do.

194
00:10:35.280 --> 00:10:38.440
What I need to do is write a function.

195
00:10:38.440 --> 00:10:40.590
Make a function called shippingRate.

196
00:10:40.590 --> 00:10:41.730
Which does that work.

197
00:10:41.730 --> 00:10:44.230
It does minus2, triple, and increment.

198
00:10:44.230 --> 00:10:45.590
It takes in the value.

199
00:10:45.590 --> 00:10:47.590
And now look at line 12.

200
00:10:47.590 --> 00:10:48.990
Line 12 is much cleaner,

201
00:10:50.020 --> 00:10:54.390
because line 12 has semantically
separated the two concerns.

202
00:10:54.390 --> 00:10:58.080
Line six is where we calculate how to do.

203
00:10:58.080 --> 00:11:01.510
Where we say how to do
the shipping rate calculation.

204
00:11:01.510 --> 00:11:05.210
And line 12 is where we
say what to do with it.

205
00:11:05.210 --> 00:11:06.840
Which is to add it into the order total.

206
00:11:09.130 --> 00:11:12.570
This is called an abstraction.

207
00:11:12.570 --> 00:11:18.090
And the semantic boundary that we
inserted is the function name.

208
00:11:19.810 --> 00:11:24.279
The function named shippingRate is
the semantic boundary between how to

209
00:11:24.279 --> 00:11:28.244
compute the shipping rate and
what to do with the shipping rate.

210
00:11:30.178 --> 00:11:33.187
&gt;&gt; Kyle: Those are the two separate
concerns that previously were all

211
00:11:33.187 --> 00:11:34.670
intertwined together.

212
00:11:34.670 --> 00:11:40.010
But because we made a function,
now they're nicely semantically separated.

