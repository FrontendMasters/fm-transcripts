WEBVTT

1
00:00:00.130 --> 00:00:02.060
&gt;&gt; Kyle Simpson: On this topic of closure,

2
00:00:02.060 --> 00:00:07.336
we need to understand the idea of
deferring when things are occurring.

3
00:00:07.336 --> 00:00:10.261
It may not have been obvious from
the code that we've looked at so far,

4
00:00:10.261 --> 00:00:11.740
from exercise or whatever.

5
00:00:11.740 --> 00:00:16.240
I wanna be very clear about
this idea of lazy versus eager,

6
00:00:16.240 --> 00:00:19.680
cuz this is not very obvious
until you dig into it.

7
00:00:19.680 --> 00:00:23.920
But it turns out to be a really
powerful technique in your code.

8
00:00:23.920 --> 00:00:30.198
Let's take this function repeater,
it takes in an input value called count,

9
00:00:30.198 --> 00:00:34.682
so if I call repeater of 10,
then count is value 10.

10
00:00:34.682 --> 00:00:40.210
And it gives me back a function that
is closed over that variable count.

11
00:00:41.670 --> 00:00:47.590
So if I'm closed over count, line 3,
I'm closed over the count from line 1.

12
00:00:47.590 --> 00:00:51.060
And I return back that function,
on line 7,

13
00:00:51.060 --> 00:00:56.200
I have a function called A.

14
00:00:56.200 --> 00:01:01.594
It's remembering the count variable in its
internal stack, as was just being asked.

15
00:01:01.594 --> 00:01:04.249
And on line 9 when I call it,

16
00:01:04.249 --> 00:01:09.790
it uses that information to
print me out a string of 10 As.

17
00:01:09.790 --> 00:01:14.703
And then I call it again and I get another
string of 10 As, everybody with me?

18
00:01:14.703 --> 00:01:18.591
It's able to remember that count
as many times as it's called,

19
00:01:18.591 --> 00:01:20.396
as long as A doesn't go away.

20
00:01:20.396 --> 00:01:25.619
A is gonna continue to remember
the initial value that was passed in for

21
00:01:25.619 --> 00:01:28.198
count, which was the value 10.

22
00:01:28.198 --> 00:01:31.705
Matter of fact I could have called this
variable A10, to make it more explicit.

23
00:01:31.705 --> 00:01:36.735
It's a repeater that is
gonna do things 10 times.

24
00:01:36.735 --> 00:01:38.658
But I want to ask you this question, and

25
00:01:38.658 --> 00:01:41.940
this is how we're gonna dig into
this idea of lazy, versus eager.

26
00:01:42.970 --> 00:01:49.070
On which line of this program,
is it line 7 or is it line 9,

27
00:01:49.070 --> 00:01:55.304
when the actual work of
constructing that string, occurs?

28
00:01:59.657 --> 00:02:03.630
&gt;&gt; Kyle Simpson: Is it on line 7
when I make the string AAAAAA or

29
00:02:03.630 --> 00:02:07.640
is it on line 9 when I
make the string AAAAAA?

30
00:02:07.640 --> 00:02:08.350
&gt;&gt; Speaker 2: 9.
&gt;&gt; Speaker 3: 9.

31
00:02:08.350 --> 00:02:10.150
&gt;&gt; Speaker 4: 9.
&gt;&gt; Kyle Simpson: Line 9, and

32
00:02:10.150 --> 00:02:15.846
then what about line 10,
do I do the work again?

33
00:02:15.846 --> 00:02:18.871
Yeah, as a matter of fact,
if that was really expensive work,

34
00:02:18.871 --> 00:02:21.742
like if I was looping over
a million numbers and calculate.

35
00:02:21.742 --> 00:02:23.092
If that was really expensive work,

36
00:02:23.092 --> 00:02:25.440
I'd do it every single time
the function was called, right?

37
00:02:27.310 --> 00:02:31.500
But what's interesting here is that
I have essentially deferred the work.

38
00:02:31.500 --> 00:02:36.506
By doing the work on line 3
instead of on line one and a half.

39
00:02:36.506 --> 00:02:40.905
I have made it happen on line
9 instead of line 7 where I

40
00:02:40.905 --> 00:02:44.744
located the work determined
when it happened.

41
00:02:44.744 --> 00:02:48.260
That's what we call lazy, or deferred.

42
00:02:48.260 --> 00:02:51.690
We're deferring that work by
putting it into a function and

43
00:02:51.690 --> 00:02:54.447
deferring it until that
function gets called.

44
00:02:54.447 --> 00:02:55.674
And you can do multiple layers,

45
00:02:55.674 --> 00:02:58.279
you could wrap a function inside of
a function inside of a function.

46
00:02:58.279 --> 00:03:01.594
And then there's got to be three
successive function calls there before

47
00:03:01.594 --> 00:03:02.909
the work actually happens.

48
00:03:02.909 --> 00:03:05.982
That's deferring or lazy for that work.

49
00:03:05.982 --> 00:03:08.658
Why might we want to defer the work?

50
00:03:08.658 --> 00:03:13.134
Again, this is very trivial,
padStart kind of stuff, but

51
00:03:13.134 --> 00:03:17.000
what if this was
computationally expensive work?

52
00:03:17.000 --> 00:03:20.614
Why might we want to defer
computationally expensive work?

53
00:03:20.614 --> 00:03:22.162
One reason might be,

54
00:03:22.162 --> 00:03:28.013
if we weren't sure that in all conditions
the function was ever gonna be called.

55
00:03:28.013 --> 00:03:32.744
What if the A function only get
called in 10% of the cases?

56
00:03:32.744 --> 00:03:35.085
90% of the time it never gets called.

57
00:03:35.085 --> 00:03:42.013
If we did the work upfront, 90% of the
time we'd be wasting work, wouldn't we?

58
00:03:42.013 --> 00:03:44.959
By putting it in into this extra
layer of function wrapping,

59
00:03:44.959 --> 00:03:46.362
we have deferred this work.

60
00:03:46.362 --> 00:03:52.358
So that the work will only happen in the
10% of the case, and not in the other 90%.

61
00:03:52.358 --> 00:03:54.125
Do you follow me?

62
00:03:54.125 --> 00:03:58.119
So that is a way to defer the work,
what's the downside of deferring the work?

63
00:04:00.991 --> 00:04:02.670
&gt;&gt; Speaker 5: It happens
every time [INAUDIBLE].

64
00:04:02.670 --> 00:04:06.700
&gt;&gt; Kyle Simpson: Now we're doing it every
single time, so it would be a good idea to

65
00:04:06.700 --> 00:04:11.620
do deferral if we weren't sure
if it was ever gonna be called.

66
00:04:11.620 --> 00:04:14.960
But it's maybe not such a great idea to do
a deferral if we thought it might be call

67
00:04:14.960 --> 00:04:16.560
multiple times whenever it was called.

68
00:04:17.880 --> 00:04:22.731
Cuz then we would be wasting that work 5,
10, 100,000 times, right?

69
00:04:22.731 --> 00:04:27.172
So that's the deferral side of it,
now, if that's a lazy way of doing it,

70
00:04:27.172 --> 00:04:28.874
what would be the opposite?

71
00:04:28.874 --> 00:04:30.942
What would be the eager way of doing it?

72
00:04:30.942 --> 00:04:34.585
Well, that would it be to move
the work up to line one and

73
00:04:34.585 --> 00:04:36.813
a half, right, let's do that.

74
00:04:36.813 --> 00:04:38.530
Let's move the work to line one and
a half.

75
00:04:39.940 --> 00:04:44.271
We still have the exact same outcome,
which is line 10 gives us AAAAA,

76
00:04:44.271 --> 00:04:45.833
line 11 gives us AAAAA.

77
00:04:45.833 --> 00:04:48.834
But now let me ask you the question,
when does the work occur,

78
00:04:48.834 --> 00:04:51.510
does it occur on line 8, or
does it occur on line 10?

79
00:04:51.510 --> 00:04:52.860
&gt;&gt; Speaker 6: 8.

80
00:04:52.860 --> 00:04:56.705
&gt;&gt; Kyle Simpson: Now it
occurs on line 8 it's eager,

81
00:04:56.705 --> 00:05:00.807
what's the benefit of doing an eager?

82
00:05:00.807 --> 00:05:01.521
&gt;&gt; Speaker 7: It's done once.

83
00:05:01.521 --> 00:05:05.281
&gt;&gt; Kyle Simpson: We only do it once,
and if we call A 5,000 times,

84
00:05:05.281 --> 00:05:07.132
we only did the work once.

85
00:05:07.132 --> 00:05:09.532
It's good because we don't need
to do the work unnecessarily.

86
00:05:09.532 --> 00:05:12.305
If we're gonna get the same answer every
time, why do all the work over and

87
00:05:12.305 --> 00:05:13.258
over again, all right?

88
00:05:13.258 --> 00:05:16.868
So that's good, if we know it's gonna
be called a bunch of times, do it once,

89
00:05:16.868 --> 00:05:18.252
cache it basically, right?

90
00:05:18.252 --> 00:05:21.505
Just cache it, and have it ready to go,
that's what we're doing.

91
00:05:21.505 --> 00:05:23.360
What's the downside of doing it eagerly?

92
00:05:27.151 --> 00:05:29.290
&gt;&gt; Kyle Simpson: What
if A never gets called?

93
00:05:29.290 --> 00:05:31.429
Then we did the work unnecessarily.

94
00:05:31.429 --> 00:05:33.410
So you see the trade-off between the two?

95
00:05:33.410 --> 00:05:38.340
Sometimes lazy might be more preferred,
sometimes eager might be more preferred.

96
00:05:38.340 --> 00:05:43.766
Both of these, by the way, are able
to be done because we have closure.

97
00:05:43.766 --> 00:05:46.339
We are, in both cases,
closing over something.

98
00:05:46.339 --> 00:05:48.469
In the previous slide we
were closing over count,

99
00:05:48.469 --> 00:05:50.507
what variable are we
closing over in this code?

100
00:05:53.837 --> 00:05:56.272
&gt;&gt; Kyle Simpson: String,
this str variable from line 2,

101
00:05:56.272 --> 00:05:58.997
that's the variable that we're closing on.

102
00:05:58.997 --> 00:06:03.056
So in both cases, closure enables,
it's a choice of where we put the code.

103
00:06:03.056 --> 00:06:07.040
To decide whether we wanted to
happen eagerly now, or lazily later.

