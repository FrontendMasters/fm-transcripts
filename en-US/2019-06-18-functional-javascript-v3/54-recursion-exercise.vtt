WEBVTT

1
00:00:00.150 --> 00:00:03.800
&gt;&gt; Kyle Simpson: Okay, let's try out
an exercise to practice this whole idea of

2
00:00:03.800 --> 00:00:04.920
recursion.

3
00:00:04.920 --> 00:00:07.870
In this exercise, you're gonna
be writing a palindrome checker.

4
00:00:07.870 --> 00:00:10.090
If you don't know what palindromes are,

5
00:00:10.090 --> 00:00:12.880
this is one of those classic
interview questions.

6
00:00:12.880 --> 00:00:19.050
A palindrome is a string that reads
exactly the same forwards and backwards.

7
00:00:19.050 --> 00:00:26.230
So for example, abcba, if you reverse
that, it's still gonna say abcba.

8
00:00:26.230 --> 00:00:28.180
Okay, so that is a palindrome.

9
00:00:28.180 --> 00:00:30.030
There's a couple of base cases,
by the way.

10
00:00:30.030 --> 00:00:32.380
An empty string is a palindrome, and

11
00:00:32.380 --> 00:00:37.470
a single character is also a palindrome,
because it reads in both directions.

12
00:00:37.470 --> 00:00:42.730
Also we should point out
that both the string aba and

13
00:00:42.730 --> 00:00:46.190
the string abba,
both of those are palindromes,

14
00:00:46.190 --> 00:00:50.114
because in both cases, they read
the same backwards and forwards, okay.

15
00:00:50.114 --> 00:00:55.489
Now there's a very straightforward way
of solving this problem iteratively.

16
00:00:55.489 --> 00:00:58.742
And there's a good chance on some
interview question somewhere that

17
00:00:58.742 --> 00:01:01.782
somebody's gonna have asked you,
implement it iteratively.

18
00:01:01.782 --> 00:01:06.314
But because we're talking about recursion,
we wanna move beyond the iterative

19
00:01:06.314 --> 00:01:10.726
approach, where we just simply go through
all of the characters one at a time.

20
00:01:10.726 --> 00:01:13.078
We wanna move beyond
the iterative approach and

21
00:01:13.078 --> 00:01:14.850
try to think about it recursively.

22
00:01:14.850 --> 00:01:19.287
I'm not gonna tell you exactly how to do
it, but there is a hint here that points

23
00:01:19.287 --> 00:01:23.475
at exactly the right way to think about
palindromes in a recursive sense.

24
00:01:23.475 --> 00:01:26.889
So I want you to make sure you read
that hint as you tackle this exercise.

25
00:01:26.889 --> 00:01:30.661
If you look in the exercise, there's
an isPalindrome function that you need to

26
00:01:30.661 --> 00:01:33.209
fill out the definition of,
it should be recursive.

27
00:01:33.209 --> 00:01:36.889
And also, there's a set of test
cases down here at the bottom, and

28
00:01:36.889 --> 00:01:39.408
all of these should end
up printing out true.

29
00:01:39.408 --> 00:01:44.250
So make sure you test your isPalindrome
function with these particular test cases.

