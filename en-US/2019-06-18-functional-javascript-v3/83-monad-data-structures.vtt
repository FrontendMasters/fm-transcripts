WEBVTT

1
00:00:00.240 --> 00:00:04.270
&gt;&gt; Kyle: Now that you're feeling more
comfortable with the idea of operations at

2
00:00:04.270 --> 00:00:07.950
a data structure level, we're gonna
zero in on, perhaps one of the most

3
00:00:07.950 --> 00:00:12.520
famous of all the functional programming
confusions out there, which is the Monad.

4
00:00:13.520 --> 00:00:18.331
And I'm gonna go ahead and tell you right
now, this is the very first time that I've

5
00:00:18.331 --> 00:00:22.870
ever put this information into a course,
because it's a set of information,

6
00:00:22.870 --> 00:00:26.134
a set of learnings that is
continually evolving for me.

7
00:00:26.134 --> 00:00:30.317
And this is by no means,
an exhaustive look at all things monad,

8
00:00:30.317 --> 00:00:33.105
it's not the mathematical approach, but

9
00:00:33.105 --> 00:00:38.350
I just want essentially to get it so
that monads are not a scary thing.

10
00:00:38.350 --> 00:00:43.450
I just wanna demystify the concept
of a monad, because it is not, as so

11
00:00:43.450 --> 00:00:45.590
many people have said, a burrito or

12
00:00:45.590 --> 00:00:48.810
an onion, or any of these other
silly sorts of metaphors.

13
00:00:48.810 --> 00:00:52.030
And it's also not some sort of scary
concept that we have to run away

14
00:00:52.030 --> 00:00:53.510
screaming.

15
00:00:53.510 --> 00:00:58.630
It is a very useful concept in the larger
canon of functional programming theory.

16
00:00:58.630 --> 00:01:03.673
And really what it boils down to is that
a Monad is a way of creating a functional,

17
00:01:03.673 --> 00:01:06.150
friendly data structure.

18
00:01:06.150 --> 00:01:08.050
We've looked at lists,
we've looked at objects,

19
00:01:08.050 --> 00:01:09.960
we could talk about binary trees, but

20
00:01:09.960 --> 00:01:14.620
another kind of data structure is one that
might hold just one single discreet value.

21
00:01:15.770 --> 00:01:18.650
And you might think,
why do I need a data structure for

22
00:01:18.650 --> 00:01:21.283
one single discrete value
like the number 42?

23
00:01:21.283 --> 00:01:25.562
And the reason is, because data structures
are not just about the values they hold,

24
00:01:25.562 --> 00:01:29.410
but about the behaviors that
they create around those values.

25
00:01:29.410 --> 00:01:32.260
A monad is a wrapper, if you will,

26
00:01:32.260 --> 00:01:38.020
around the value with a set of behaviors
in it that is going to make that value

27
00:01:38.020 --> 00:01:41.930
much easier to interoperate with other
values in a very specific kind of way.

28
00:01:43.160 --> 00:01:48.020
One of the characteristics of
a monad is that it turns that single

29
00:01:48.020 --> 00:01:50.200
value into a functor.

30
00:01:50.200 --> 00:01:52.170
That's not the completeness of a monad,
but

31
00:01:52.170 --> 00:01:54.230
it does turn that value into a functor.

32
00:01:54.230 --> 00:01:58.660
Remember that term, I said it earlier when
we were talking about lists and I said,

33
00:01:58.660 --> 00:02:03.670
any value where we can map
an operation over it is a functor.

34
00:02:03.670 --> 00:02:08.810
So if a monad has a map method on it,
then it's a functor.

35
00:02:08.810 --> 00:02:12.670
What might we wanna do with
a single value in a map?

36
00:02:12.670 --> 00:02:16.480
We might wanna transform that
value into some other value,

37
00:02:16.480 --> 00:02:20.517
that's a way of modeling state change,
where I have a value and

38
00:02:20.517 --> 00:02:24.955
it becomes another value,
we can model that as a mapping operation.

39
00:02:24.955 --> 00:02:27.258
I know some of you have
heard this term before,

40
00:02:27.258 --> 00:02:30.213
monad is just a monoid in
the category of endofunctors, and

41
00:02:30.213 --> 00:02:34.055
that's generally thrown around as kind
of like a joke, because it's like,

42
00:02:34.055 --> 00:02:38.590
how many crazy weird words can we throw
into a sentence and still be valid?

43
00:02:38.590 --> 00:02:41.160
I don't think that's an useful definition,

44
00:02:41.160 --> 00:02:45.370
I know that it actually means
something to functional programmers.

45
00:02:45.370 --> 00:02:46.967
But I don't think it's
an useful definition,

46
00:02:46.967 --> 00:02:50.810
cuz it uses a lot of things that
none of us are familiar with.

47
00:02:50.810 --> 00:02:53.960
First of all, we barely can understand
that a monad is a data structure, and

48
00:02:53.960 --> 00:02:56.060
then we throw in monoid, what's that?

49
00:02:56.060 --> 00:02:59.920
And then category, crap,
we're talking about category theory, and

50
00:02:59.920 --> 00:03:01.170
now endofunctors?

51
00:03:01.170 --> 00:03:03.910
I heard you say functor, but
what on earth is an endofunctor?

52
00:03:03.910 --> 00:03:07.280
That sounds like a planet in
the Star Wars movie, okay?

53
00:03:07.280 --> 00:03:10.540
That's not a real thing
that we could connect

54
00:03:10.540 --> 00:03:13.220
to something that we have
any sort of intuition about.

55
00:03:13.220 --> 00:03:17.850
So this is a bad definition, but
let me try to give you a lamer or

56
00:03:17.850 --> 00:03:20.930
a more approachable sort of definition.

57
00:03:20.930 --> 00:03:24.980
It's just a pattern for pairing some
piece of data with a set of predictable

58
00:03:24.980 --> 00:03:29.060
behaviors that let it interact
with other pairings of data and

59
00:03:29.060 --> 00:03:32.176
behavior, in other words monads.

60
00:03:32.176 --> 00:03:36.050
So monads are a way to take a value and
make it behave in such a way

61
00:03:36.050 --> 00:03:39.080
that is gonna be predictable with
other values that are also monads.

62
00:03:41.430 --> 00:03:45.790
It's not actually that scary, it's just
a set of formalized techniques for

63
00:03:45.790 --> 00:03:49.190
making values easy to interact
in a very specific, and

64
00:03:49.190 --> 00:03:52.900
it turns out mathematical sort of a way.

65
00:03:52.900 --> 00:03:59.160
Now, monads in languages like Haskell
have a very specific way of looking.

66
00:03:59.160 --> 00:04:02.365
When we're in a non functional
programming language like JavaScript,

67
00:04:02.365 --> 00:04:04.055
we have to do a bit of interpretation.

68
00:04:04.055 --> 00:04:07.779
And there are actually a lot of different
ways that I could code up a monad, and

69
00:04:07.779 --> 00:04:09.956
different kinds of monads, obviously, but

70
00:04:09.956 --> 00:04:13.140
there's a lot of different ways
that I could code up a monad.

71
00:04:13.140 --> 00:04:15.260
And I just wanna tell
you right off the bat,

72
00:04:15.260 --> 00:04:20.670
that I'm definitely being very informal
here, as informal as I can do and

73
00:04:20.670 --> 00:04:24.980
still be even remotely true
to the spirit of a monad.

74
00:04:24.980 --> 00:04:28.346
So this is not code that I want you to go
take and put in production, and then say,

75
00:04:28.346 --> 00:04:30.328
hey everybody,
I've got a full blown monad.

76
00:04:30.328 --> 00:04:34.652
You wanna use a library that has
implemented these things and

77
00:04:34.652 --> 00:04:39.566
has all of the is dotted and
ts crossed in terms of working with stuff,

78
00:04:39.566 --> 00:04:43.414
but I just want to illustrate
this concept of a monad.

79
00:04:43.414 --> 00:04:47.595
And I've got a code snippet here, but
you'll notice I've got a bunch of code

80
00:04:47.595 --> 00:04:51.967
hidden right now, because what I want you
to see, I'm showing you the first of,

81
00:04:51.967 --> 00:04:56.531
this is maybe the most basic of the monads
that we could talk about, which is called,

82
00:04:56.531 --> 00:04:59.710
Just, it's literally called, Just.

83
00:04:59.710 --> 00:05:05.820
And what Just is as a monad,
is just a wrapper around a single value.

84
00:05:05.820 --> 00:05:09.454
Now that single value can be
even something like an object or

85
00:05:09.454 --> 00:05:12.505
an array,
it doesn't have to be the number 42,

86
00:05:12.505 --> 00:05:16.810
but from the perspective of the monad
it's a single discreet entity.

87
00:05:16.810 --> 00:05:20.074
And you might wanna do a thing where
the single discreet entity to make it into

88
00:05:20.074 --> 00:05:23.120
another single discreet
entity wrapped in a monad.

89
00:05:23.120 --> 00:05:26.770
Just like with arrays, every time
we do a map we get another array,

90
00:05:26.770 --> 00:05:31.060
if you do a monad and you call a map
on it, you're gonna get another monad.

91
00:05:31.060 --> 00:05:32.450
Same sort of deal here.

92
00:05:32.450 --> 00:05:39.060
So, you'll notice that a Just instance,
a monad that is a Just monad,

93
00:05:39.060 --> 00:05:44.359
has a map method, a chain method and
an AP, an ap method.

94
00:05:45.510 --> 00:05:46.910
That's it, those three.

95
00:05:46.910 --> 00:05:51.760
But there are definitely often more
methods on different kinds of monads.

96
00:05:51.760 --> 00:05:55.410
But those are the kind of three
core methods that are gonna be on

97
00:05:55.410 --> 00:06:00.110
all the monads, and by the way, chain
is often referred to with other names.

98
00:06:01.300 --> 00:06:05.960
So how would we implement those map,
chain and ap?

99
00:06:05.960 --> 00:06:07.570
Before I even show you the implementation,

100
00:06:07.570 --> 00:06:10.740
I just want you to see, is just
an object with three methods on it.

101
00:06:11.890 --> 00:06:15.700
And it's gonna be closed over
a single value that we passed in,

102
00:06:15.700 --> 00:06:19.590
cuz those methods are gonna have
closure and access to val from line 1.

103
00:06:19.590 --> 00:06:23.900
So it's just a value wrapped in some
closure with three methods exposed.

104
00:06:25.390 --> 00:06:29.130
It's not really that complex of
a concept to be honest with you.

105
00:06:29.130 --> 00:06:33.080
It's really just a formalized
way of making that value

106
00:06:33.080 --> 00:06:34.820
be able to interact with other values.

107
00:06:36.080 --> 00:06:40.910
Okay, let's take a look at how we
might implement map, chain and ap.

108
00:06:40.910 --> 00:06:44.250
And remember, map, chain and
ap here are definitely,

109
00:06:44.250 --> 00:06:49.480
I'm giving you the simplest shortcut
way of illustrating what they do.

110
00:06:49.480 --> 00:06:54.960
Here's a map function that takes
a function, calls our closed over val,

111
00:06:54.960 --> 00:06:58.330
line 7, we call our closed over
val with that function, and

112
00:06:58.330 --> 00:07:03.420
whatever that thing returns,
we just make another Just out of it.

113
00:07:04.950 --> 00:07:09.183
Just like in an array map we have to make
a new array in a monad map we have to make

114
00:07:09.183 --> 00:07:10.308
another monad, and

115
00:07:10.308 --> 00:07:14.966
the kind of monad that we're gonna make is
the kind of monad that we're already in.

116
00:07:14.966 --> 00:07:19.154
Arrays make arrays, objects make objects,
monads make monads.

117
00:07:21.639 --> 00:07:26.682
&gt;&gt; Kyle: So, if I had the number 42, and
I'm not inside of a monad, and I called

118
00:07:26.682 --> 00:07:32.412
map on that monad with a mapper function
that imcremented it, what am I gonna get?

119
00:07:32.412 --> 00:07:34.190
A monad that has 43 in it.

120
00:07:35.240 --> 00:07:40.250
That's all that means,
that's the functor nature of a monad,

121
00:07:40.250 --> 00:07:44.670
that we can map over that value and
produce another monad from it.

122
00:07:44.670 --> 00:07:48.820
Now let's look at chain, again, chain
kinda cutting some corners here, is not

123
00:07:48.820 --> 00:07:52.580
intended to be mathematically accurate,
it's just to illustrate the idea here.

124
00:07:52.580 --> 00:07:57.552
Chain is oftentimes referred to in other
implementations as either bind, or

125
00:07:57.552 --> 00:08:00.617
sometimes, and I actually prefer, flatMap.

126
00:08:00.617 --> 00:08:03.903
We've talked about map before, but
we haven't really talked about

127
00:08:03.903 --> 00:08:07.636
flatMap in this course, and I just wanna
briefly mention what flatMap does.

128
00:08:07.636 --> 00:08:11.816
FlatMap is actually a strange name,
because it's the reverse,

129
00:08:11.816 --> 00:08:14.258
it really ought to be called map flat.

130
00:08:14.258 --> 00:08:18.938
Because what flatMap does is,
it maps over a data structure and

131
00:08:18.938 --> 00:08:21.675
then, as it's doing that mapping,

132
00:08:21.675 --> 00:08:26.290
it's flattening it one level,
what do I mean by flattening?

133
00:08:26.290 --> 00:08:29.160
Well, the best way for
you to visualize that is with arrays.

134
00:08:29.160 --> 00:08:32.730
If I had a single dimensional array
of numbers and I did a map over it,

135
00:08:32.730 --> 00:08:35.760
I'd end up with another single
dimensional array of numbers.

136
00:08:35.760 --> 00:08:39.930
But what if my mapper function
returned back tuples?

137
00:08:39.930 --> 00:08:43.506
Instead of taking the number 3 and
returning back 4,

138
00:08:43.506 --> 00:08:46.471
what if it returned back 4,5 for example?

139
00:08:46.471 --> 00:08:48.007
You know, an array or 4 and 5.

140
00:08:48.007 --> 00:08:51.060
Well, now I'd have a two-dimensional
array, wouldn't I?

141
00:08:51.060 --> 00:08:56.600
I'd have an array of tuples, and
you might want an array of tuples, but

142
00:08:56.600 --> 00:09:02.370
you also might want just one flat array
of all the numbers having been combined.

143
00:09:03.578 --> 00:09:08.499
So that flatMap is a way of
taking that nested data type,

144
00:09:08.499 --> 00:09:14.378
like an array inside of an array,
and flattening it out one level.

145
00:09:14.378 --> 00:09:18.675
So if our mapper returned tuples,
and we did flatMap instead of map,

146
00:09:18.675 --> 00:09:23.564
we'd get just a single dimensional array
of all the numbers kind of squished or

147
00:09:23.564 --> 00:09:26.210
flattened out into one big array.

148
00:09:26.210 --> 00:09:30.190
So, when we talk about
flatMap in terms of monad,

149
00:09:30.190 --> 00:09:35.050
that's like doing a mapping,
getting a monad, and

150
00:09:35.050 --> 00:09:38.166
then flattening it out into
the underlying value from the monad.

151
00:09:38.166 --> 00:09:44.440
Here I'm shortcutting, and just not even
going to the trouble of making the monad,

152
00:09:44.440 --> 00:09:49.390
I'm just doing the FN call, and
whatever it returns we're giving it out.

153
00:09:49.390 --> 00:09:54.310
That's not technically true to the spirit
of Monad but it gives you an idea that,

154
00:09:54.310 --> 00:09:56.550
if I call chain on a monad,

155
00:09:56.550 --> 00:10:01.050
I'm gonna get whatever the return
value is of that mapper function.

156
00:10:01.050 --> 00:10:02.860
It's supposed to be another monad, but

157
00:10:02.860 --> 00:10:06.160
in this case we could end up not
being another monad entirely, and

158
00:10:06.160 --> 00:10:09.990
then, that's where we'd start
violating those monad laws.

159
00:10:09.990 --> 00:10:13.210
The third one is ap, and
this one is the strangest of all.

160
00:10:13.210 --> 00:10:17.318
This is one I really haven't fully
wrapped my brain around, but

161
00:10:17.318 --> 00:10:22.185
I just want to give you a glimpse of how
we know that ap is a little bit strange,

162
00:10:22.185 --> 00:10:24.483
because ap takes in another monad.

163
00:10:24.483 --> 00:10:30.300
You say, monad1.ap and
you pass in monad2, okay?

164
00:10:30.300 --> 00:10:35.330
But what we do with monad2, or
in this case the another monad is,

165
00:10:35.330 --> 00:10:38.720
we call.map on it with our monad's value.

166
00:10:41.130 --> 00:10:44.790
So we call somebody else's
map with our value.

167
00:10:46.320 --> 00:10:48.512
The thing that that should raise,

168
00:10:48.512 --> 00:10:53.358
that should be interesting in your
brain is, what does map always require?

169
00:10:56.198 --> 00:11:00.060
&gt;&gt; Kyle: No, what does map, whenever we
call a map, what do we always pass to it?

170
00:11:01.140 --> 00:11:02.678
We always pass?

171
00:11:02.678 --> 00:11:03.290
&gt;&gt; Speaker 2: An array?

172
00:11:03.290 --> 00:11:07.920
&gt;&gt; Kyle: A mapper function, we always
have to pass a mapper function to map,

173
00:11:07.920 --> 00:11:10.380
just like we always have to pass
a predicate function to filter.

174
00:11:11.440 --> 00:11:17.111
So here we are passing our value to .map,
line 16.

175
00:11:17.111 --> 00:11:23.090
That implies that our value to
use this has to be a function.

176
00:11:24.720 --> 00:11:28.844
That's the strange part, our value would
not be able to be the number 42 or

177
00:11:28.844 --> 00:11:30.336
this would throw an error.

178
00:11:30.336 --> 00:11:35.216
Our number couldn't be an array,
our value couldn't be a string,

179
00:11:35.216 --> 00:11:38.383
our value that our monad
is wrapped around,

180
00:11:38.383 --> 00:11:42.870
if we call a .ap on it,
we have to have a function as our value.

181
00:11:42.870 --> 00:11:46.072
So what kind of function
might we have in our monad?

182
00:11:46.072 --> 00:11:51.972
Well, we might have a curried function
that's got some value remembered in it,

183
00:11:51.972 --> 00:11:56.070
and it's gonna be used as the mapper for
another monad.

184
00:11:57.580 --> 00:12:01.140
So .ap is the strangest of
the three in my opinion, map and

185
00:12:01.140 --> 00:12:04.110
chain seem to have a pretty
straight forward intuition.

186
00:12:04.110 --> 00:12:06.830
.App requires you to think
about that currying thing, and

187
00:12:06.830 --> 00:12:08.040
we're gonna look at that in just a moment.

