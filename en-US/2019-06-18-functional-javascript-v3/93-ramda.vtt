WEBVTT

1
00:00:00.070 --> 00:00:03.950
&gt;&gt; Kyle Simpson: The next library I
wanna talk about is called Ramda, and

2
00:00:03.950 --> 00:00:07.240
this is definitely where
my recommendation would be.

3
00:00:07.240 --> 00:00:11.260
If you don't already have a library
that you've been working with and

4
00:00:11.260 --> 00:00:12.000
you're looking for

5
00:00:12.000 --> 00:00:16.800
a place to start, I would unreservedly
recommend starting with Ramda.

6
00:00:16.800 --> 00:00:20.330
It is definitely one of the most popular
of the functional libraries out there.

7
00:00:20.330 --> 00:00:24.830
And I understand that when I call
out 2 libraries there are like 400

8
00:00:24.830 --> 00:00:28.320
others where people are saying,
why didn't you pick my favorite one?

9
00:00:28.320 --> 00:00:31.598
There's nothing wrong with any of
those 400 functional libraries.

10
00:00:31.598 --> 00:00:35.162
If they behave by the functional rules,
then they're great and

11
00:00:35.162 --> 00:00:36.945
whichever one you pick is fine.

12
00:00:36.945 --> 00:00:39.245
But I just wanna give you
some places to start.

13
00:00:39.245 --> 00:00:41.505
There are large communities,
they're mature,

14
00:00:41.505 --> 00:00:45.535
there's lots of documentation,
these things have been around a long time.

15
00:00:45.535 --> 00:00:48.895
And importantly, they've been highly
optimized, because they're in use by so

16
00:00:48.895 --> 00:00:49.915
many places.

17
00:00:49.915 --> 00:00:53.415
So there's benefits to using
the big players if you will,

18
00:00:53.415 --> 00:00:54.990
at least starting with those.

19
00:00:54.990 --> 00:00:59.321
So I would say start with Ramda, unless
you've already worked with Lodash and

20
00:00:59.321 --> 00:01:00.404
then lodash/fp.

21
00:01:00.404 --> 00:01:04.050
This is ramdajs.com,
that's where you can link to.

22
00:01:04.050 --> 00:01:08.290
They have a REPL, it's an online thing
where you can play around with their code,

23
00:01:08.290 --> 00:01:10.141
and then all of the documentation.

24
00:01:10.141 --> 00:01:12.892
So they got a really great
set of resources for you.

25
00:01:14.756 --> 00:01:17.242
&gt;&gt; Kyle Simpson: Same example as I
showed on the previous screen, but

26
00:01:17.242 --> 00:01:18.380
now it's using Ramda.

27
00:01:18.380 --> 00:01:22.420
So know we see R.,
instead of fp., from Lodash.

28
00:01:22.420 --> 00:01:30.070
We see R.reduce, and then we see R.curryN,
R.compose, R.inc, and so forth.

29
00:01:30.070 --> 00:01:35.218
There's a little quirky difference
between lodash/fp and Ramda.

30
00:01:35.218 --> 00:01:38.510
And you'll find these sorts of things
the more you look at these libraries.

31
00:01:38.510 --> 00:01:42.030
Ramda provides us a function called inc,
for doing increment.

32
00:01:43.030 --> 00:01:47.030
lodash doesn't provide us one, but
it did provide us a curried add,

33
00:01:47.030 --> 00:01:50.950
which is why we did add of 1 to
make our increment function, okay?

34
00:01:50.950 --> 00:01:54.370
So there will be those sorts of
tweaks that you have to do as you're

35
00:01:54.370 --> 00:01:56.620
adapting from one library to another.

36
00:01:56.620 --> 00:02:00.650
Definitely play around with these and
check through the documentation,

37
00:02:00.650 --> 00:02:04.410
try it on some of your code, to get
a feeling for the different ebbs and

38
00:02:04.410 --> 00:02:05.800
flows that are provided to you.

