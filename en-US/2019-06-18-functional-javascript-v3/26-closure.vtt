WEBVTT

1
00:00:00.100 --> 00:00:00.930
&gt;&gt; Kyle Simpson: All right, so

2
00:00:00.930 --> 00:00:04.470
we've already hinted at the idea
of closure in this course.

3
00:00:04.470 --> 00:00:06.695
A couple of time, we've already used it.

4
00:00:06.695 --> 00:00:09.257
But I wanna be very specific
about a definition for

5
00:00:09.257 --> 00:00:12.616
closure, cuz there's a lot
misconception about this concept.

6
00:00:12.616 --> 00:00:15.693
And it is absolutely essential.

7
00:00:15.693 --> 00:00:20.140
You just cannot do functional programming
without a solid understanding of closure.

8
00:00:21.176 --> 00:00:23.940
So I wanna give you a very
specific definition for

9
00:00:23.940 --> 00:00:27.600
closure that is based upon what
we can observe in our programs.

10
00:00:27.600 --> 00:00:31.890
And that is closure is when a function
remembers the variables around it

11
00:00:31.890 --> 00:00:34.470
even when that function
is executed elsewhere.

12
00:00:36.130 --> 00:00:40.579
And by around it I mean any variables
that you access outside the function that

13
00:00:40.579 --> 00:00:44.003
aren't directly passed in,
they're accessed like for,

14
00:00:44.003 --> 00:00:47.782
remember when we accessed global
variables, things like that.

15
00:00:47.782 --> 00:00:51.037
Anytime you access a variable
from an outer scope, and

16
00:00:51.037 --> 00:00:54.504
then you take that function
that is doing that access, and

17
00:00:54.504 --> 00:00:59.080
you pass it somewhere else, and
you run it in a different scope.

18
00:00:59.080 --> 00:01:01.000
If you thought about it
logically you'd say, well,

19
00:01:01.000 --> 00:01:04.780
it should forget about that variable,
cuz it's running in a different scope.

20
00:01:04.780 --> 00:01:07.740
But it doesn't forget about the variable,
and

21
00:01:07.740 --> 00:01:10.960
the reason it doesn't
is because of closure.

22
00:01:12.870 --> 00:01:17.510
And if that sounds too abstract to you,
let me remind you that we've already seen

23
00:01:17.510 --> 00:01:19.980
this several times in code
we've looked at today.

24
00:01:21.280 --> 00:01:26.200
Here's an example,
I'm illustrating the idea of closure here.

25
00:01:26.200 --> 00:01:28.460
I have a makeCounter function.

26
00:01:28.460 --> 00:01:31.010
makeCounter doesn't take any inputs in it.

27
00:01:31.010 --> 00:01:36.980
It declares a variable, line 2, called
counter and it returns us back a function,

28
00:01:36.980 --> 00:01:42.299
which every time we call it, is going
to increment that counter variable.

29
00:01:42.299 --> 00:01:46.521
So on line 8, I make my counter,
I say var c = makeCounter.

30
00:01:46.521 --> 00:01:49.950
And I call c with no inputs,
and I get back the value 1.

31
00:01:49.950 --> 00:01:54.444
And then I call c with no inputs and I get
back the value 2, and then 3, and then 4.

32
00:01:54.444 --> 00:01:56.672
So it's in a counter, right?

33
00:01:56.672 --> 00:02:00.453
Could be useful in our
programs to have a counter.

34
00:02:00.453 --> 00:02:04.465
But let me ask you, this is definitely
closure because we have the inner function

35
00:02:04.465 --> 00:02:07.400
increment, closing over
that counter variable.

36
00:02:07.400 --> 00:02:11.950
It's remembering it,
even though makeCounter has finished,

37
00:02:11.950 --> 00:02:15.890
the C function still remembers it and
can still keep updating it.

38
00:02:15.890 --> 00:02:16.760
That's how it works.

39
00:02:17.800 --> 00:02:19.738
That's called closure.

40
00:02:19.738 --> 00:02:24.292
But I wanna ask you,
is the C function a pure function call?

41
00:02:29.000 --> 00:02:30.749
&gt;&gt; Kyle Simpson: Look at like 10,
11, and 12.

42
00:02:30.749 --> 00:02:33.250
Are those pure function calls?

43
00:02:36.503 --> 00:02:39.121
&gt;&gt; Student: It can't be because
it's pulling from the dom.

44
00:02:39.121 --> 00:02:41.353
&gt;&gt; Kyle Simpson: It's not
pulling from the dom.

45
00:02:41.353 --> 00:02:42.980
&gt;&gt; Student: Or pulling information.

46
00:02:42.980 --> 00:02:44.803
&gt;&gt; Student2: Not getting the same output.

47
00:02:44.803 --> 00:02:46.038
&gt;&gt; Student: Yeah.
&gt;&gt; Kyle Simpson: We are not getting

48
00:02:46.038 --> 00:02:47.564
the same output every time.

49
00:02:47.564 --> 00:02:51.290
We're passing in the same input,
which in this case, is no input.

50
00:02:51.290 --> 00:02:52.800
But every time,
we're getting a different output.

51
00:02:53.900 --> 00:02:59.330
So it absolutely violates one of the
fundamental premises of a pure function.

52
00:02:59.330 --> 00:03:06.470
So here's the takeaway, closure is
not necessarily functionally pure.

53
00:03:08.420 --> 00:03:14.643
But closure can absolutely be
used in functional theory.

54
00:03:14.643 --> 00:03:18.603
So the key is if I'm
closing over a variable,

55
00:03:18.603 --> 00:03:22.260
this counter, it can't be reassigned.

56
00:03:22.260 --> 00:03:25.400
And if it's getting reassigned
every time that's a big no,

57
00:03:25.400 --> 00:03:29.404
no because now we're not closed over
a constant anymore, we're just closed

58
00:03:29.404 --> 00:03:33.180
over some changing state, in which
case we now have an impure function.

59
00:03:34.460 --> 00:03:36.168
You might have to do
that in your programs but

60
00:03:36.168 --> 00:03:37.840
that's not gonna be a pure function goal.

61
00:03:37.840 --> 00:03:41.756
Are you with me?

62
00:03:41.756 --> 00:03:46.910
So let's look at some examples of
using closure that is consistent

63
00:03:46.910 --> 00:03:52.074
with functional style,
that is going to produce a pure function.

64
00:03:52.074 --> 00:03:54.640
Remember unary?

65
00:03:54.640 --> 00:03:59.488
That was one of the first utilities that
we looked at, our first higher order

66
00:03:59.488 --> 00:04:04.590
function, It takes it an (fn), and
remembers that (fn) and uses it later.

67
00:04:06.040 --> 00:04:07.270
How does it do that?

68
00:04:07.270 --> 00:04:10.206
Why did the fn variable from line 1,
the parameter,

69
00:04:10.206 --> 00:04:12.890
not get garbage collected
when unary finished?

70
00:04:16.324 --> 00:04:21.227
&gt;&gt; Kyle Simpson: The answer is because the
inner function one which got returned is

71
00:04:21.227 --> 00:04:25.519
holding onto that parameter,
via what we call closure.

72
00:04:25.519 --> 00:04:27.730
It still has access to that thing.

73
00:04:27.730 --> 00:04:32.962
So later on whenever we call f somewhere,
it still remembers

74
00:04:32.962 --> 00:04:39.230
the original thing that was passed
into unary by way of the parameter fn.

75
00:04:39.230 --> 00:04:43.578
And that's not the only example we
saw of closure, remember addAnother?

76
00:04:43.578 --> 00:04:47.503
We talked about this one, remember
how it's referencing that z variable,

77
00:04:47.503 --> 00:04:50.650
even though that z variable was
passed in and an outer scope.

78
00:04:52.312 --> 00:04:55.716
The addTwo function is
closed over the variable z,

79
00:04:55.716 --> 00:04:58.652
which is why it's able
to use that later on.

80
00:05:01.028 --> 00:05:05.070
&gt;&gt; Kyle Simpson: And the key thing here is
that in the both of those slides the fn on

81
00:05:05.070 --> 00:05:08.190
the previous slide and
the z on this slide.

82
00:05:08.190 --> 00:05:13.197
In both of those cases we are referencing
a variable outside of ourselves,

83
00:05:13.197 --> 00:05:15.977
which seems like it would to be a no no,
but

84
00:05:15.977 --> 00:05:19.646
it's safe functionally
because it doesn't change.

85
00:05:19.646 --> 00:05:24.409
It's a memory over a thing
that doesn't get modified.

86
00:05:24.409 --> 00:05:27.741
That's what makes it still function pure.

