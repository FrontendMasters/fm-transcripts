WEBVTT

1
00:00:00.070 --> 00:00:03.872
&gt;&gt; Kyle Simpson: So let's talk about
recursion in the practical sense.

2
00:00:03.872 --> 00:00:08.150
We can get a sense of
the theoretical way that this works.

3
00:00:08.150 --> 00:00:12.915
But in the practical sense many of you
probably know that recursion often doesn't

4
00:00:12.915 --> 00:00:17.623
make its way into production applications
for one particularly sticky reason.

5
00:00:17.623 --> 00:00:21.830
Which is that range error that we get
thrown whenever recursion has been running

6
00:00:21.830 --> 00:00:26.290
for too long and we get a range error
thrown, stack overflow exceeded, okay?

7
00:00:26.290 --> 00:00:30.647
That's the major problem that I think,
for the last 50 or 60 years,

8
00:00:30.647 --> 00:00:34.862
has essentially limited the utility
of recursion from being a general

9
00:00:34.862 --> 00:00:39.241
programming thing that everybody has
to learn and everybody has to use.

10
00:00:39.241 --> 00:00:43.186
Is because a lot of people basically think
in the back of their mind that sort of

11
00:00:43.186 --> 00:00:46.159
nagging feeling like,
yeah it sounds good in theory, but

12
00:00:46.159 --> 00:00:49.334
in practice it would probably blow up so
I'm not gonna use it.

13
00:00:49.334 --> 00:00:53.547
And so I want to talk about that because
there are ways of addressing this problem.

14
00:00:53.547 --> 00:00:56.773
In theory your computer
could just run forever, and

15
00:00:56.773 --> 00:00:59.719
you'd have infinite memory and
infinite CPU.

16
00:00:59.719 --> 00:01:02.846
But in practice we know
that's not the case, and so

17
00:01:02.846 --> 00:01:04.750
we do need to actually step in.

18
00:01:04.750 --> 00:01:08.558
A little bit ago I said, try not to
think too much from a computer science

19
00:01:08.558 --> 00:01:11.240
perspective about what's
happening in memory.

20
00:01:11.240 --> 00:01:15.389
But to get an intuition for why there
is a practical limitation problem,

21
00:01:15.389 --> 00:01:19.958
we do need to think just a little bit
about the implementation side of it, okay?

22
00:01:19.958 --> 00:01:21.979
I don't want you thinking
about implementation as your

23
00:01:21.979 --> 00:01:22.799
authoring this code.

24
00:01:22.799 --> 00:01:26.634
But it's just to get us a sense of
the problem of the range error,

25
00:01:26.634 --> 00:01:28.565
of the stack overflow problem.

26
00:01:28.565 --> 00:01:31.830
So if we think about when
a function gets called,

27
00:01:31.830 --> 00:01:36.303
when one function is running and
it calls off to another function.

28
00:01:36.303 --> 00:01:40.410
It doesn't have to be it's own function,
it doesn't have to be recursion.

29
00:01:40.410 --> 00:01:43.110
It's just the general problem
that when one function

30
00:01:43.110 --> 00:01:46.250
calls out to another function,
at that moment,

31
00:01:46.250 --> 00:01:50.720
everything that was currently happening in
that function needs to get saved somehow.

32
00:01:50.720 --> 00:01:54.090
So that all the stuff that happens in
the other function doesn't mess up

33
00:01:54.090 --> 00:01:55.720
what was happening in the first one.

34
00:01:55.720 --> 00:01:59.120
So if you are in the middle of function
A and you call off the function B,

35
00:01:59.120 --> 00:02:05.050
you kinda have to have somewhere where
all of A's in-progress work is saved so

36
00:02:05.050 --> 00:02:10.400
that there's some place, a scratch pad if
you will, for the work for B to happen.

37
00:02:10.400 --> 00:02:13.300
And in computer science terms,
we call these stack frames.

38
00:02:13.300 --> 00:02:17.081
Every time a function gets executed,
an area of memory is reserved and

39
00:02:17.081 --> 00:02:18.630
it's called a stack frame.

40
00:02:18.630 --> 00:02:21.380
And we call it a stack frame,
we actually call it a memory frame.

41
00:02:21.380 --> 00:02:25.501
We call it a stack frame because when one
function calls another and then that one

42
00:02:25.501 --> 00:02:29.945
calls another, and that one calls another,
what we have is a stack that's growing.

43
00:02:29.945 --> 00:02:33.537
You have at the bottom level the initial
function that called off to B.

44
00:02:33.537 --> 00:02:37.464
And B called off to C and C called
off to D, you're building up a stack.

45
00:02:37.464 --> 00:02:42.375
And we use the stack data structure
idea because when this final-most,

46
00:02:42.375 --> 00:02:46.561
this top-most function if you will,
finishes running, and

47
00:02:46.561 --> 00:02:49.797
its work is done,
we can get rid of that memory.

48
00:02:49.797 --> 00:02:54.627
And we pop the stack back to the previous
one and it picks up where it left off.

49
00:02:54.627 --> 00:02:56.999
And then we pop the stack
back to the previous one, and

50
00:02:56.999 --> 00:02:59.600
it might call another and
another, and keep coming back.

51
00:02:59.600 --> 00:03:01.508
So we have this stack data structure.

52
00:03:01.508 --> 00:03:05.481
Whether or not the computer actually
uses the stack, conceptually,

53
00:03:05.481 --> 00:03:09.785
it usually a stack to manage all of the
work as it builds up and goes back down,

54
00:03:09.785 --> 00:03:11.700
and builds up and goes back down.

55
00:03:11.700 --> 00:03:15.500
So what kinds of things
are in these stack frames?

56
00:03:15.500 --> 00:03:18.530
Well, you have all of the local
variables that have been assigned,

57
00:03:18.530 --> 00:03:20.620
any memory that's being assigned for
those.

58
00:03:20.620 --> 00:03:25.600
You have the program counter which is
basically what line of code it's on,

59
00:03:25.600 --> 00:03:28.660
or what part of an expression it's on,
or something like that.

60
00:03:28.660 --> 00:03:32.617
So basic things like that, very low-level
things that the computer needs to track

61
00:03:32.617 --> 00:03:34.603
what's happening inside of a function.

62
00:03:34.603 --> 00:03:36.506
And it doesn't take up a lot of memory,

63
00:03:36.506 --> 00:03:39.058
we are not talking about
megabytes worth of memory.

64
00:03:39.058 --> 00:03:43.560
The stack frame is probably like a few
hundred bytes or a K or something.

65
00:03:43.560 --> 00:03:47.450
It's probably like a couple hundred
bytes at most for each stack frame.

66
00:03:47.450 --> 00:03:50.150
And if you're calling a hundred
functions in a chain,

67
00:03:50.150 --> 00:03:52.130
which almost never happens by the way.

68
00:03:52.130 --> 00:03:55.017
Probably at the most you probably go 5,
10 maybe 15 deep.

69
00:03:55.017 --> 00:03:57.955
But if you've called even
100 of those functions and

70
00:03:57.955 --> 00:04:02.670
you've still only used up a fraction of
a megabyte of memory, it's not a big deal.

71
00:04:02.670 --> 00:04:05.225
You never see any sort
of a problem with that.

72
00:04:05.225 --> 00:04:09.195
But as soon as we get into programming
practices like recursion, it becomes

73
00:04:09.195 --> 00:04:14.935
dramatically more likely that that stack
frame, that might grow to thousands,

74
00:04:14.935 --> 00:04:18.645
tens of thousands, hundreds of thousands,
millions and even beyond.

75
00:04:18.645 --> 00:04:22.440
And that does start to chew up
some non-trivial amount of memory.

76
00:04:22.440 --> 00:04:25.380
Now, this is not a new thought,
this is not a new occurrence.

77
00:04:25.380 --> 00:04:29.090
Almost the day that recursion was
invented back in the, whatever, 60s,

78
00:04:29.090 --> 00:04:35.321
the very next day, somebody thought,
we only have 4K of RAM on this computer.

79
00:04:35.321 --> 00:04:39.630
[LAUGH] We can't do very many
function calls in 4K of RAM, right?

80
00:04:39.630 --> 00:04:43.540
So back then they had much more
of a pronounced limitation

81
00:04:43.540 --> 00:04:47.110
than we even do with our fancy
gigabytes worth of memory.

82
00:04:47.110 --> 00:04:51.430
They had way less memory, so
this was a very present problem for them.

83
00:04:51.430 --> 00:04:55.030
The math predicted that recursion
was this great way of doing things.

84
00:04:55.030 --> 00:04:59.390
But in practice we're limited by
the amount of memory that we can run.

85
00:04:59.390 --> 00:05:03.480
So, they immediately had to confront,
is recursion something that

86
00:05:03.480 --> 00:05:07.840
should just be filed away as a nice great
theory but not something that can be used?

87
00:05:07.840 --> 00:05:09.300
Or is there some way to address it?

