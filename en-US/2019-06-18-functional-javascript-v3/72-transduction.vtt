WEBVTT

1
00:00:00.030 --> 00:00:02.620
&gt;&gt; Kyle Simpson: So
let's think about how it was nice and

2
00:00:02.620 --> 00:00:07.390
easy if we wanted to compose three
maps together because their shapes

3
00:00:07.390 --> 00:00:11.000
are compatible there using
our equational reasoning.

4
00:00:11.000 --> 00:00:12.208
And we know they can be interchanged and

5
00:00:12.208 --> 00:00:14.210
that means that they can
be composed together.

6
00:00:14.210 --> 00:00:17.200
But let's talk in a broader sense

7
00:00:17.200 --> 00:00:20.360
about other things that we
might wanna compose together.

8
00:00:20.360 --> 00:00:22.220
For example, filters and reduces.

9
00:00:23.390 --> 00:00:27.300
If we had a chain of several maps and
a few filters and maybe a reducer or

10
00:00:27.300 --> 00:00:30.370
two, how could we put those together?

11
00:00:30.370 --> 00:00:32.760
And the answer to that
question in transducing.

12
00:00:33.840 --> 00:00:36.230
This is a much more complicated topic.

13
00:00:36.230 --> 00:00:37.467
And I wanna warn you right now.

14
00:00:37.467 --> 00:00:40.414
Of all the things that we've
talked about in this course,

15
00:00:40.414 --> 00:00:44.100
this is going to be one of the most
challenging to wrap your brain around.

16
00:00:44.100 --> 00:00:49.580
It's something that I've spent months
trying to come more to terms with.

17
00:00:49.580 --> 00:00:52.500
And it's still something that
I may say something wrong or

18
00:00:52.500 --> 00:00:53.720
get it backwards or something.

19
00:00:53.720 --> 00:00:55.620
It still kinda sometimes trips me up.

20
00:00:55.620 --> 00:00:58.460
I'm at least comfortable enough
with it that I can talk about it.

21
00:00:58.460 --> 00:01:02.200
But it is definitely
an advanced technique.

22
00:01:02.200 --> 00:01:06.120
Or at least it's an intermediate technique
that builds on the basics that we've been

23
00:01:06.120 --> 00:01:07.690
covering in this course.

24
00:01:07.690 --> 00:01:12.120
So the way I'm gonna present this to you
is actually to show you the end result

25
00:01:12.120 --> 00:01:13.480
first.

26
00:01:13.480 --> 00:01:15.140
And then in sort of an advanced way,

27
00:01:15.140 --> 00:01:19.160
we're gonna talk about how
that solution is derived.

28
00:01:19.160 --> 00:01:23.330
And the reason I'm gonna do it this way
is because what you can actually do

29
00:01:23.330 --> 00:01:25.440
is skip over the derivation.

30
00:01:25.440 --> 00:01:26.530
From here on out.

31
00:01:26.530 --> 00:01:30.100
It is not necessary for you to fully
understand all the mechanics of

32
00:01:30.100 --> 00:01:34.790
transduction, to be able to use
transduction to your benefit.

33
00:01:34.790 --> 00:01:39.040
It is not something that I would
encourage you actively to ignore.

34
00:01:39.040 --> 00:01:41.311
I as a teacher want you to
learn all of these things.

35
00:01:41.311 --> 00:01:44.328
But I also want you to be able to
practically use this stuff and

36
00:01:44.328 --> 00:01:48.312
you don't have to become a mathematician
to use and benefit from these things.

37
00:01:48.312 --> 00:01:52.809
So you're gonna see an API called
transduce that allows us to take advantage

38
00:01:52.809 --> 00:01:53.939
of transduction.

39
00:01:53.939 --> 00:01:57.407
And you will see what Lego pieces
you pass in to make it work and

40
00:01:57.407 --> 00:02:01.352
then we will peak under the covers and
we'll see how potentially some

41
00:02:01.352 --> 00:02:04.020
mathematician came up
with this crazy thing.

42
00:02:05.160 --> 00:02:08.070
But once we've seen that, I don't want
you to feel like you're gonna have

43
00:02:08.070 --> 00:02:11.590
to go through all those mental
hoops every time you wanna use it.

44
00:02:11.590 --> 00:02:15.570
Essentially, pattern match
if you see a map, a filter,

45
00:02:15.570 --> 00:02:20.250
a reduce, or any combination thereof,
that you need to compose together.

46
00:02:20.250 --> 00:02:23.660
Think about your mapper,
your filter and your reducer.

47
00:02:23.660 --> 00:02:26.650
Those three functions
are incompatible shapes.

48
00:02:27.770 --> 00:02:30.570
Map and filter are incompatible shapes.

49
00:02:30.570 --> 00:02:34.338
Because map has a single value in and
a single value out.

50
00:02:34.338 --> 00:02:40.370
But filter, a predicate,
is a single value in, Boolean value out.

51
00:02:40.370 --> 00:02:44.712
That's a different sort of a thing,
it's a different kind of a mapping.

52
00:02:44.712 --> 00:02:47.921
You couldn't take a value and
have it propagate through a filter and

53
00:02:47.921 --> 00:02:51.700
have the value come out on the other side,
it changes its nature.

54
00:02:51.700 --> 00:02:55.340
So you can't really just take a filter and
a map and compose them together.

55
00:02:55.340 --> 00:02:58.300
And you certainly can't compose
either one of them with a reducer,

56
00:02:58.300 --> 00:02:59.479
which takes two inputs.

57
00:03:01.010 --> 00:03:04.520
So if we ended up in a scenario like
this where we had a map, a filter,

58
00:03:04.520 --> 00:03:05.070
and a reduce.

59
00:03:06.090 --> 00:03:10.050
And I don't really care about the .map,
.filter, and .calls themselves.

60
00:03:10.050 --> 00:03:13.230
What I care about is the add1,
isOdd, and sum.

61
00:03:14.810 --> 00:03:17.840
Those three are incompatible shapes and

62
00:03:17.840 --> 00:03:20.530
I would like to be able
to compose them together.

63
00:03:20.530 --> 00:03:25.650
But I can't see how to do that readily
with just my regular compose utility

64
00:03:25.650 --> 00:03:28.150
because of their incompatible shapes.

65
00:03:28.150 --> 00:03:31.520
So what we're gonna talk about
this transduction technique

66
00:03:31.520 --> 00:03:36.390
is a mathematical transformation
of those functions.

67
00:03:36.390 --> 00:03:39.650
It literally reshapes those functions so

68
00:03:39.650 --> 00:03:42.870
that they become a compatible shape
that can be composed together.

69
00:03:44.380 --> 00:03:52.185
In other words,
transducing is composition of reducers.

70
00:03:52.185 --> 00:03:57.889
Transduction, transducing
is composition of reducers.

71
00:03:59.050 --> 00:04:03.950
In other words, we don't wanna compose
a mapper and a predicate and a reducer.

72
00:04:03.950 --> 00:04:09.880
What we wanna do is turn the mappers and
predicates into reducers.

73
00:04:09.880 --> 00:04:13.910
And then we want a mathematical transform
that allows reducers to compose together.

74
00:04:15.220 --> 00:04:19.178
And that is the magic that this tool we're
about to look at is gonna give us this API

75
00:04:19.178 --> 00:04:19.920
that's been built.

76
00:04:19.920 --> 00:04:21.632
That's the magic it's gonna give us.

77
00:04:21.632 --> 00:04:24.390
We're gonna show you under the covers
how you will do it manually and

78
00:04:24.390 --> 00:04:27.120
talk about why that's
a terrible idea to do.

79
00:04:27.120 --> 00:04:32.657
You could manually put all of these
three together into a reduce.

80
00:04:32.657 --> 00:04:34.885
You could manually say I'm
gonna first add it and

81
00:04:34.885 --> 00:04:37.790
then I'm gonna call the if
statement with the predicate.

82
00:04:37.790 --> 00:04:42.720
And then I'm gonna do a reducer
to compute the new total and

83
00:04:42.720 --> 00:04:44.270
that could be your reduction.

84
00:04:44.270 --> 00:04:50.500
And this is showing you again, the power
of reducers, which is that they are this.

85
00:04:50.500 --> 00:04:54.650
They are this powerful that they can
literally do mapping and filtering and

86
00:04:54.650 --> 00:04:55.750
reduction all at the same time.

87
00:04:57.860 --> 00:05:02.730
But what does this, what do
the lines 9 through 13 shout out at

88
00:05:02.730 --> 00:05:06.620
you in plain and obvious language?

89
00:05:08.100 --> 00:05:08.850
&gt;&gt; Speaker 2: Imperative code.

90
00:05:08.850 --> 00:05:11.480
&gt;&gt; Kyle Simpson: Imperative,
that is the imperative approach.

91
00:05:12.520 --> 00:05:14.350
So yes you can do that.

92
00:05:14.350 --> 00:05:18.220
And it would probably be better
to do that than to do nothing,

93
00:05:18.220 --> 00:05:20.310
especially if you have
large data structures.

94
00:05:20.310 --> 00:05:22.200
But this isn't the functional
way of doing it.

95
00:05:22.200 --> 00:05:25.230
We don't wanna come up
with imperative solutions.

96
00:05:25.230 --> 00:05:28.380
We want declarative
mathematical solutions, and

97
00:05:28.380 --> 00:05:30.230
that's what transducing is, okay?

98
00:05:30.230 --> 00:05:33.290
So instead of doing that,
we don't wanna take that approach.

99
00:05:33.290 --> 00:05:35.950
Instead of doing that we
want to use transducing.

100
00:05:37.060 --> 00:05:38.970
Here's how transducers works.

101
00:05:38.970 --> 00:05:41.580
We have a compose function,

102
00:05:41.580 --> 00:05:44.770
which is exactly the same as
the Compose that we've seen.

103
00:05:44.770 --> 00:05:47.201
There's literally no difference.

104
00:05:47.201 --> 00:05:49.440
It's not a special compose.

105
00:05:49.440 --> 00:05:54.190
But notice what I'm composing here,
I'm not composing add one and is odd.

106
00:05:54.190 --> 00:05:57.700
I am composing this thing
that has come back from

107
00:05:57.700 --> 00:06:02.270
these two different little utilities,
map producer and filter producer.

108
00:06:02.270 --> 00:06:05.690
Those are utilities which
will be provided to you

109
00:06:05.690 --> 00:06:09.110
by your functional programming
library that supports transition.

110
00:06:09.110 --> 00:06:10.550
So you don't have to
write those utilities.

111
00:06:10.550 --> 00:06:12.410
You just have to use them.

112
00:06:12.410 --> 00:06:15.540
And the way you know how to use
them is if you have a mapper,

113
00:06:15.540 --> 00:06:17.980
you pass it to a thing
called map producer.

114
00:06:17.980 --> 00:06:21.830
If you have a filter, you pass it to
a thing called filter reducer, and

115
00:06:21.830 --> 00:06:24.240
if you have a reducer,
you don't need to pass it to anything,

116
00:06:24.240 --> 00:06:27.280
because it's already a reducer okay?

117
00:06:27.280 --> 00:06:31.680
It's a mathematical thing that is
essentially reshaping the map, into

118
00:06:31.680 --> 00:06:36.680
a reducer, or a mathematical thing that
is shaping the filter, into a reducer.

119
00:06:36.680 --> 00:06:38.580
The way it does that's kind of magical.

120
00:06:38.580 --> 00:06:41.860
And we'll talk about it but
it's reshaping them into reducers.

121
00:06:43.360 --> 00:06:48.010
A special kind of reducer, not exactly
the same kind as you might expect.

122
00:06:48.010 --> 00:06:51.580
It's a special kind of
reducer that is composable.

123
00:06:51.580 --> 00:06:55.650
So how do we put these together then.

124
00:06:55.650 --> 00:06:58.300
Because you notice I didn't
list some in the composition.

125
00:06:59.540 --> 00:07:02.580
That's because those,
the result of MapReducer and

126
00:07:02.580 --> 00:07:07.850
the result of Filter Reducer
are a special kind of reducer, which is,

127
00:07:07.850 --> 00:07:10.410
it's not really ready yet.

128
00:07:10.410 --> 00:07:15.025
It needs a reducer to be passed
to it to become a reducer.

129
00:07:15.025 --> 00:07:16.852
And I know that sounds strange.

130
00:07:16.852 --> 00:07:19.912
But it's like in this prototype stage,
it's like,

131
00:07:19.912 --> 00:07:22.980
I can become a reducer as long
as you pass me a reducer.

132
00:07:24.870 --> 00:07:26.587
That's what those utilities are doing.

133
00:07:26.587 --> 00:07:30.390
That's the mathematical shape
transformation that they're doing.

134
00:07:30.390 --> 00:07:35.850
So we compose those things of
that prototypical shape together.

135
00:07:35.850 --> 00:07:38.950
And that becomes what
we call a transducer.

136
00:07:38.950 --> 00:07:43.920
So specifically a transducer
is one of those prototypal

137
00:07:43.920 --> 00:07:49.060
shaped producers, which will become
a reducer if passed a reducer.

138
00:07:51.150 --> 00:07:53.670
Okay, that's what a transducer is.

139
00:07:53.670 --> 00:07:56.250
So how are we going to use that thing?

140
00:07:56.250 --> 00:08:02.180
We're gonna make that transducer, notice
that I did not add in my final reducer.

141
00:08:02.180 --> 00:08:06.250
The reason I didn't add in my final
reducer is it's the thing we're gonna pass

142
00:08:06.250 --> 00:08:09.550
in to make all of that into a reducer,
right?

143
00:08:09.550 --> 00:08:12.630
I said a transducer needs
a reducer passed into it.

144
00:08:12.630 --> 00:08:14.370
So I'm holding some back.

145
00:08:14.370 --> 00:08:16.640
I didn't include it in the composition.

146
00:08:16.640 --> 00:08:19.750
The function itself is going to
become the input to this composition.

147
00:08:20.750 --> 00:08:25.560
And that mathematical transformation
then produces this composed reducer.

148
00:08:26.850 --> 00:08:27.640
So how are we going to use it?

149
00:08:27.640 --> 00:08:31.070
We're gonna call a utility
called transduce.

150
00:08:31.070 --> 00:08:34.400
This again will be provided to
you by a functional library.

151
00:08:34.400 --> 00:08:38.660
And we're going to pass in
a transducer which we've made.

152
00:08:38.660 --> 00:08:43.400
And we're gonna pass in a reducer,
a combinator, which we have here,

153
00:08:43.400 --> 00:08:45.430
in this case, the sum function.

154
00:08:45.430 --> 00:08:49.080
We're gonna pass in an initial value,
that's the zero.

155
00:08:49.080 --> 00:08:52.040
And we're gonna pass in our data
structure, in this case, the array.

156
00:08:54.090 --> 00:08:56.690
Those are the four pieces
that transducers needs.

157
00:08:56.690 --> 00:08:58.470
It needs the transducers.

158
00:08:58.470 --> 00:09:01.640
It needs the reducer that is going
to get passed into that thing

159
00:09:01.640 --> 00:09:03.320
to produce the reducer.

160
00:09:03.320 --> 00:09:06.630
It needs the initial value, and
it needs the data structure.

161
00:09:07.780 --> 00:09:12.540
And what it does under the covers is
it passes some in the transducer for

162
00:09:12.540 --> 00:09:15.840
us producing that new composed reducer.

163
00:09:17.030 --> 00:09:24.120
And then it reduces the list with
that new reducer.That's it actually.

164
00:09:24.120 --> 00:09:28.250
Actually all of the hard work was done
by Map Producer and Filter Reducer.

165
00:09:28.250 --> 00:09:31.040
Transduce as a function is two lines long.

166
00:09:31.040 --> 00:09:32.840
It doesn't do much.

167
00:09:32.840 --> 00:09:37.130
It simply passes one thing into another
and calls a reduce on it, okay?

168
00:09:39.360 --> 00:09:45.120
So, There is another helper
which makes it even easier.

169
00:09:45.120 --> 00:09:48.780
Another helper that is generally provided
by this libraries and it's called into.

170
00:09:49.820 --> 00:09:53.542
You'll notice that into
is taking our reducer,

171
00:09:53.542 --> 00:09:57.912
I mean our transducer,
our initial value and our array.

172
00:09:57.912 --> 00:10:01.840
But what's missing is that we didn't
need to provide it a reducer.

173
00:10:01.840 --> 00:10:07.380
Because what into does, is it looks at
the data type of the initial volume.

174
00:10:07.380 --> 00:10:08.900
In this case it's a number.

175
00:10:08.900 --> 00:10:13.800
And it says, I know what kind
of combinator numbers need.

176
00:10:15.050 --> 00:10:17.410
Numbers need a thing that
adds two numbers together.

177
00:10:17.410 --> 00:10:21.570
That's the general Combinator for numbers.

178
00:10:21.570 --> 00:10:26.400
So it automatically supplies us a thing
that looks like the sum function.

179
00:10:26.400 --> 00:10:31.880
If we had said into transducer and
we'd given in the string,

180
00:10:31.880 --> 00:10:36.440
then into would substitute in,
a string concatenation combinator.

181
00:10:36.440 --> 00:10:42.070
If we had passed it an array, it would
institute an array push combinator.

182
00:10:42.070 --> 00:10:46.030
So it knows, based upon the data type,
what kind of combinator,

183
00:10:46.030 --> 00:10:47.750
what kind of reducer is needed.

184
00:10:47.750 --> 00:10:48.920
We don't even need to pass one in.

185
00:10:50.150 --> 00:10:56.090
So either what we do on line 10 or
what we do on line 18 is transducing.

186
00:10:56.090 --> 00:11:00.930
It is running through the list, just once,
and doing the mapping, filtering, and

187
00:11:00.930 --> 00:11:03.040
reducing, all at the same time.

