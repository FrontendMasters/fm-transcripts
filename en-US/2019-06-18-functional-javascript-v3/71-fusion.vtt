WEBVTT

1
00:00:00.040 --> 00:00:03.457
&gt;&gt; Kyle Simpson: So now hopefully you're
feeling a lot more confident having

2
00:00:03.457 --> 00:00:08.024
practiced in an exercise, practiced
the whole map and filter and reduce thing.

3
00:00:08.024 --> 00:00:12.429
But one thing that we wanna know is that
it's going to be extremely common as you

4
00:00:12.429 --> 00:00:14.780
start using these utilities more often.

5
00:00:14.780 --> 00:00:19.810
It's gonna be extremely common that you
end up in a scenario where you have say

6
00:00:19.810 --> 00:00:24.200
a chain of a map and then a reduce and, or
a map and then a filter and then reduce.

7
00:00:24.200 --> 00:00:27.217
Or two or three maps, and
then another filter, or a map and

8
00:00:27.217 --> 00:00:29.330
a couple of filters and another reduce.

9
00:00:29.330 --> 00:00:32.170
Those sorts of chains of things
are gonna happen very often.

10
00:00:32.170 --> 00:00:33.800
And by the way, those are good things.

11
00:00:33.800 --> 00:00:36.889
It's good if your mapper or
your predicate or

12
00:00:36.889 --> 00:00:40.238
your reducer is a single
responsibility thing.

13
00:00:40.238 --> 00:00:41.900
That's a good outcome.

14
00:00:41.900 --> 00:00:46.625
But there are some downsides to
having a chain of several maps and

15
00:00:46.625 --> 00:00:50.820
then several filters and
then several reducers.

16
00:00:50.820 --> 00:00:53.771
One of those downsides is from
a performance perspective.

17
00:00:53.771 --> 00:00:57.774
You have to remember, especially if we're
thinking about larger data structures,

18
00:00:57.774 --> 00:01:00.130
things that aren't just
a few values in an array.

19
00:01:00.130 --> 00:01:04.740
You have to remember that each time
one of those map or filters or

20
00:01:04.740 --> 00:01:08.920
reduces gets called, it's producing
a whole new data structure as a result.

21
00:01:08.920 --> 00:01:13.700
So if I have a chain of ten of those, then
I'm ending up producing nine intermediary

22
00:01:13.700 --> 00:01:18.210
results of that data structure,
nine intermediary copies of that data

23
00:01:18.210 --> 00:01:21.670
structure, and
those copies are then thrown away.

24
00:01:21.670 --> 00:01:26.270
So not only is the extra processing of
going through the list over and over.

25
00:01:26.270 --> 00:01:28.990
If it's 1,000 items,
then we've gone through it 9,000 times.

26
00:01:28.990 --> 00:01:32.160
But it's also the garbage
collection overhead

27
00:01:32.160 --> 00:01:36.480
of throwing away those nine extra copies
of the thing that we don't actually need.

28
00:01:36.480 --> 00:01:38.480
So from a performance perspective,

29
00:01:38.480 --> 00:01:41.660
there is a particular concern
if you have several items, or

30
00:01:41.660 --> 00:01:46.070
if the data structures involved are gonna
be rather large or could be large.

31
00:01:46.070 --> 00:01:47.500
There's a processing problem there.

32
00:01:47.500 --> 00:01:52.480
But I would say there's an even more
important or at least as important issue,

33
00:01:52.480 --> 00:01:58.810
which is that if you're listing out these
steps, step by step by step by step, it's

34
00:01:58.810 --> 00:02:02.980
a little bit more difficult for somebody
to track, what is the flow of my data?

35
00:02:04.070 --> 00:02:05.490
Even a vertical chain of things,

36
00:02:05.490 --> 00:02:08.020
they're still having to step
from line the line to line.

37
00:02:08.020 --> 00:02:12.660
And when we talked earlier in
the course about flow of data,

38
00:02:12.660 --> 00:02:17.410
we said that a much more declarative way
of describing how data is gonna flow

39
00:02:17.410 --> 00:02:21.300
is by using something like composition,
or a pipe.

40
00:02:21.300 --> 00:02:25.450
Compose or pipe makes it clear
where our data flows are.

41
00:02:25.450 --> 00:02:28.400
And so functional programmers,
instead of seeing or

42
00:02:28.400 --> 00:02:34.830
liking a long chain of method calls,
they're going to prefer a composition.

43
00:02:34.830 --> 00:02:36.570
So let's consider this usecase.

44
00:02:36.570 --> 00:02:41.460
Let's imagine that we add
several maps that ended up

45
00:02:41.460 --> 00:02:46.470
together subsequently off of
a chain off of some array.

46
00:02:47.770 --> 00:02:54.050
Well we know the add1 and mul2 and
div3 because they're mapper functions.

47
00:02:54.050 --> 00:02:57.930
They have a shape that is
compatible with each other.

48
00:02:57.930 --> 00:03:00.578
They can be interchanged with each other,
and if

49
00:03:00.578 --> 00:03:05.112
they can be interchanged with each other
that means they can be composed together.

50
00:03:05.112 --> 00:03:08.760
Remember that whole idea of
composition associativity.

51
00:03:08.760 --> 00:03:14.220
That means that if I were to group add1
and mul2 together in a composition,

52
00:03:14.220 --> 00:03:18.520
that would be the same as if I grouped
mul2 and div3 together in a composition.

53
00:03:18.520 --> 00:03:21.670
And those are both the same as if I
put all three of those together in

54
00:03:21.670 --> 00:03:22.249
a composition.

55
00:03:23.470 --> 00:03:26.780
There's an associativity
involved with composition.

56
00:03:26.780 --> 00:03:30.330
And I just wanna take
a moment to remind you,

57
00:03:30.330 --> 00:03:34.990
because it's extremely common in
programming specially in JavaScript,

58
00:03:34.990 --> 00:03:40.374
you don't get these benefits that we keep
talking about just because you use .map.

59
00:03:41.490 --> 00:03:45.880
You get these benefits if you adhere to
the principles of functional programming.

60
00:03:45.880 --> 00:03:49.050
It's extremely common for
people to call a .map, but

61
00:03:49.050 --> 00:03:52.840
inside of their mapper function, they're
accessing something on the outside because

62
00:03:52.840 --> 00:03:56.080
it's too hard to figure out how to
get that into the mapper function.

63
00:03:56.080 --> 00:03:57.812
So they just sort of cut corners and

64
00:03:57.812 --> 00:04:01.740
they say, I'll just access
some value on the outside.

65
00:04:01.740 --> 00:04:05.630
And that sort of side
effect impurity invalidates

66
00:04:05.630 --> 00:04:09.650
all of the mathematical assumptions
that go into what we're talking about.

67
00:04:09.650 --> 00:04:12.750
You cannot assume that
things compose nicely.

68
00:04:12.750 --> 00:04:15.790
You can't assume
the associativity of composite.

69
00:04:15.790 --> 00:04:19.750
You can't assume any of those mathematical
principles if you violate the most

70
00:04:19.750 --> 00:04:23.372
fundamental of all the principles, which
is that this only worked for functions.

71
00:04:24.720 --> 00:04:29.550
So it is critical, it is important, I
wanna reemphasized, even though it's much,

72
00:04:29.550 --> 00:04:30.235
much easier,

73
00:04:30.235 --> 00:04:35.180
[LAUGH] it is much easier to reference
something outside of your .map call.

74
00:04:35.180 --> 00:04:37.500
I see people all the time
do a .map call and

75
00:04:37.500 --> 00:04:40.569
they're basically adding elements
into some other array outside of it.

76
00:04:41.920 --> 00:04:44.640
And it's essentially like a .forEach but

77
00:04:44.640 --> 00:04:48.370
they don't feel good about using .forEach
so they use .map in an impure way.

78
00:04:49.550 --> 00:04:52.190
So we're just using this as a looping API.

79
00:04:52.190 --> 00:04:55.140
We're not using it to mean
anything significant or

80
00:04:55.140 --> 00:04:57.900
semantic like it's
mapping data structures.

81
00:04:57.900 --> 00:05:02.250
Just because you use .map doesn't make
you a functional programmer, okay?

82
00:05:02.250 --> 00:05:04.960
Using functional principles in your code

83
00:05:04.960 --> 00:05:09.440
is what gives you those sought of
guarantees that essentially avoid

84
00:05:09.440 --> 00:05:12.590
entire classes of problem
that could otherwise happen.

85
00:05:13.730 --> 00:05:15.910
We want to avoid those kinds of problems.

86
00:05:15.910 --> 00:05:18.720
I don't want to make easy to find bugs

87
00:05:18.720 --> 00:05:22.089
if I can just make it easy to never
have the bugs in the first place.

88
00:05:23.750 --> 00:05:28.740
You see how the ladder of those two is
far preferable if it's possible to do so.

89
00:05:28.740 --> 00:05:31.240
So it's important that we think about and

90
00:05:31.240 --> 00:05:36.190
reemphasize, these have got to be
pure functions, in our case they are.

91
00:05:36.190 --> 00:05:39.670
And in that case that means that we can
take advantage of composition here.

92
00:05:39.670 --> 00:05:41.780
Those three functions can
be composed together.

93
00:05:41.780 --> 00:05:44.500
And that's a technique we call fusion.

94
00:05:44.500 --> 00:05:49.943
So if we take those three, add1, mul2, and
dive3, and put them into a composition,

95
00:05:49.943 --> 00:05:53.512
and use that single resulting
function as as a .map call.

96
00:05:53.512 --> 00:05:55.696
What we have said to
the reader of this code is,

97
00:05:55.696 --> 00:05:58.496
you don't need to go track the data flow,
I'm declarative

98
00:05:58.496 --> 00:06:01.860
telling you it's a composition of
these three in this specific order.

99
00:06:03.460 --> 00:06:05.470
We're gonna go add1,
then mul2, and then div3.

100
00:06:06.880 --> 00:06:10.580
And if you visualize,
I wish I had the animation skills here.

101
00:06:10.580 --> 00:06:16.140
If you visualize the numbers,
the number two moves through those.

102
00:06:16.140 --> 00:06:20.900
The number two goes into the add1 and then
that result of three goes into mul2, and

103
00:06:20.900 --> 00:06:22.615
that result goes into div3.

104
00:06:22.615 --> 00:06:23.780
Those numbers,

105
00:06:23.780 --> 00:06:28.780
those values that data is flowing
through that stream of composition.

106
00:06:29.810 --> 00:06:34.530
And that's how we're ending up with the
new data structure that is 2, 4, 6, 8, 10,

107
00:06:34.530 --> 00:06:35.040
12, 14.

108
00:06:35.040 --> 00:06:39.910
So if we have a chain of maps together,
composition is a much

109
00:06:39.910 --> 00:06:43.810
better way of declaratively saying
what all of those steps are gonna be.

110
00:06:43.810 --> 00:06:45.474
Rather than three .map calls,

111
00:06:45.474 --> 00:06:49.610
it would be preferable from functional
perspective to use composition.

112
00:06:49.610 --> 00:06:52.270
I should also point out,
and I definitely cover this

113
00:06:52.270 --> 00:06:55.240
in a lot more detail in the book,
so I'll just briefly mention.

114
00:06:55.240 --> 00:06:56.780
That generally speaking,

115
00:06:56.780 --> 00:07:01.600
functional programmers don't
like to see methods on values.

116
00:07:01.600 --> 00:07:04.910
They don't like to see an array and
then a .map call.

117
00:07:04.910 --> 00:07:09.380
And the reason they don't like to see
that is because that is essentially from

118
00:07:09.380 --> 00:07:12.550
the broader perspective that
essentially falls into this idea

119
00:07:12.550 --> 00:07:14.080
of class-oriented thinking.

120
00:07:14.080 --> 00:07:17.629
We have this value that has data.

121
00:07:17.629 --> 00:07:20.490
It has behavior associated with the data.

122
00:07:20.490 --> 00:07:23.950
There's this class called array that
has a method called map on it and

123
00:07:23.950 --> 00:07:25.880
we're invoking that array.

124
00:07:25.880 --> 00:07:31.694
And the reason why this is a problem
is because that map call in and

125
00:07:31.694 --> 00:07:33.965
out of itself is impure.

126
00:07:33.965 --> 00:07:38.618
And the reason it's impure is because
it is receiving as an implicit

127
00:07:38.618 --> 00:07:44.080
input of this context that tells it,
use this particular array.

128
00:07:44.080 --> 00:07:46.720
The reason why that's a problem,
the reason why

129
00:07:46.720 --> 00:07:51.590
the whole idea of using this aware things,
methods on values, that sort of thing,

130
00:07:51.590 --> 00:07:56.350
the reason why that's a problem is
those are inherently uncomposable.

131
00:07:56.350 --> 00:08:01.510
I can't take another map call, a map on
this array method and easily compose that

132
00:08:01.510 --> 00:08:05.880
with some other function because the input
to that map call, part of it is indirect.

133
00:08:07.670 --> 00:08:09.940
So I end up having to create
a hardbound version of it,

134
00:08:09.940 --> 00:08:11.760
do all these other weird workarounds.

135
00:08:11.760 --> 00:08:13.270
It makes it much more awkward.

136
00:08:13.270 --> 00:08:16.041
The math doesn't work out, if you will.

137
00:08:16.041 --> 00:08:19.340
Because we're not really following
the true functional principles.

138
00:08:19.340 --> 00:08:23.995
So that's why you'll actually
see in libraries like Ramda and

139
00:08:23.995 --> 00:08:27.570
Lodash and stuff, you won't see
a method like .map on an array,

140
00:08:27.570 --> 00:08:32.940
you'll see a standalone map method that
takes both the mapper function and

141
00:08:32.940 --> 00:08:38.070
the array as explicit inputs rather than
one of them being an implicit input.

142
00:08:38.070 --> 00:08:41.616
That makes those inherently more
curryable, more composable,

143
00:08:41.616 --> 00:08:45.106
all of these principles that
we've been talking about, okay?

144
00:08:45.106 --> 00:08:49.907
So we're using the array, built-in array
map and array-reduce, we're using them for

145
00:08:49.907 --> 00:08:52.324
convenience sake in the illustration here.

146
00:08:52.324 --> 00:08:55.787
But you should be aware in this bigger
sense that you're traditionally

147
00:08:55.787 --> 00:08:59.251
gonna be wanting to use these standalone
function versions of all these

148
00:08:59.251 --> 00:09:01.460
utilities rather than the method versions.

