WEBVTT

1
00:00:00.030 --> 00:00:03.625
&gt;&gt; Kyle Simpson: All right moving
right along let's talk about lists.

2
00:00:03.625 --> 00:00:07.090
And actually right off the bat I need
to clarify we're not really only

3
00:00:07.090 --> 00:00:08.295
talking about arrays.

4
00:00:08.295 --> 00:00:12.827
Although these kind of operations are
almost always illustrated using arrays,

5
00:00:12.827 --> 00:00:15.910
we are actually talking
about data structures.

6
00:00:15.910 --> 00:00:20.950
The functional programming concept
of doing operations is not limited

7
00:00:20.950 --> 00:00:26.510
to I can only do a map across an array or
I can only do a filter across an array.

8
00:00:26.510 --> 00:00:30.674
These sorts of operations, like maps and
filters and reduces, are actually

9
00:00:30.674 --> 00:00:35.428
generalized operations that should be able
to be performed across any data structure.

10
00:00:35.428 --> 00:00:38.247
It just happens to be,
especially in JavaScript,

11
00:00:38.247 --> 00:00:42.080
that it's super convenient to
illustrate in the context of arrays.

12
00:00:42.080 --> 00:00:45.243
So for now we are gonna look at
them in the context of arrays, but

13
00:00:45.243 --> 00:00:48.352
then we're gonna circle back and
we're gonna talk about this

14
00:00:48.352 --> 00:00:51.836
larger concept of adapting these
ideas to general data structures.

15
00:00:51.836 --> 00:00:56.017
Essentially what we are saying here is
that there are operations that we've

16
00:00:56.017 --> 00:00:58.844
learned how to perform on
single discrete values.

17
00:00:58.844 --> 00:01:02.863
And now what we'd like to
is adapt those operations,

18
00:01:02.863 --> 00:01:08.415
lift those operations, so that they
work across a collection of values.

19
00:01:08.415 --> 00:01:13.301
There's a scary sounding functional
programming term here that

20
00:01:13.301 --> 00:01:17.440
is heavily related and
it is called functor.

21
00:01:17.440 --> 00:01:23.420
A functor is a value, and by value I
mean could be a collection of values,

22
00:01:23.420 --> 00:01:28.060
it is a value over which those
values in it can be mapped.

23
00:01:29.250 --> 00:01:34.050
So if we talk about an array since we
know we can call dot map on an array,

24
00:01:34.050 --> 00:01:35.300
it's a functor.

25
00:01:35.300 --> 00:01:40.222
In fact, any data structure for
which we have identified and

26
00:01:40.222 --> 00:01:43.793
defined a map operation
that constitutes or

27
00:01:43.793 --> 00:01:48.341
gives the characteristic that
it behaves as a functor.

28
00:01:48.341 --> 00:01:51.934
And I only use that word to demystify
these words, not because I want

29
00:01:51.934 --> 00:01:55.667
you to go around, start talking
about functor this and functor that.

30
00:01:55.667 --> 00:01:57.720
But rather that if you
ever hear that word,

31
00:01:57.720 --> 00:01:59.785
I don't want you to be
scared by that word.

32
00:01:59.785 --> 00:02:04.184
You just need to think essentially
that's a value that I can map

33
00:02:04.184 --> 00:02:06.124
an operation across, okay?

34
00:02:06.124 --> 00:02:07.411
So let's talk about map.

35
00:02:07.411 --> 00:02:08.743
What is map?

36
00:02:08.743 --> 00:02:12.290
It is fundamentally
a transformation operation.

37
00:02:12.290 --> 00:02:15.620
Meaning that we're gonna to take
the values in some collection and

38
00:02:15.620 --> 00:02:18.440
perform a conversion on each of them.

39
00:02:18.440 --> 00:02:23.760
And remember that a data structure doesn't
imply necessarily multiple values.

40
00:02:23.760 --> 00:02:26.850
A single value in a single data structure

41
00:02:26.850 --> 00:02:31.870
can be that functor idea can be mapped
over and that's still entirely valid.

42
00:02:31.870 --> 00:02:36.398
It's just that we often illustrated
in terms of lists of values like I've

43
00:02:36.398 --> 00:02:37.431
depicted here.

44
00:02:37.431 --> 00:02:42.361
So the transformation, it's important to
note that it's not happening in place.

45
00:02:42.361 --> 00:02:46.182
For it to be the functor, for it to
behave according to these principles,

46
00:02:46.182 --> 00:02:47.671
it has to be a pure function.

47
00:02:47.671 --> 00:02:49.835
It can't be mutating this stuff.

48
00:02:49.835 --> 00:02:53.485
Your map transformation has to be
producing a new data structure.

49
00:02:53.485 --> 00:02:57.976
With the values having been transformed
as they are projected to the new data

50
00:02:57.976 --> 00:02:59.610
structure, okay?

51
00:02:59.610 --> 00:03:02.510
So if we start out with
an array of four numbers, and

52
00:03:02.510 --> 00:03:07.460
then we map that to a new array of
different numbers that have been added or

53
00:03:07.460 --> 00:03:10.580
subtracted from or something,
that's a mapping operation.

54
00:03:12.560 --> 00:03:16.640
The key takeaway here mentally
is that map always results

55
00:03:16.640 --> 00:03:19.430
in the same kind of data
structure as it started with.

56
00:03:20.530 --> 00:03:23.690
You start with an array,
map is gonna give you another array.

57
00:03:23.690 --> 00:03:27.144
You start with an object,
map is gonna give you another object.

58
00:03:27.144 --> 00:03:30.966
If you start with a monad,
map is gonna give you another monad, okay?

59
00:03:30.966 --> 00:03:36.227
The map always produces a transformed
values but the same data structure,

60
00:03:36.227 --> 00:03:40.360
same kind,
same shape of data structure, okay?

61
00:03:40.360 --> 00:03:41.282
That's a key takeaway.

62
00:03:41.282 --> 00:03:46.758
So how would we implement a very simple
map transform kind of function for

63
00:03:46.758 --> 00:03:47.760
ourselves?

64
00:03:47.760 --> 00:03:50.750
Well, let's say that I had
a list of strings, and

65
00:03:50.750 --> 00:03:55.810
I wanted to turn it into a list of objects
where those strings have been included.

66
00:03:55.810 --> 00:03:59.054
I can have a function called makeRecord.

67
00:03:59.054 --> 00:04:02.130
And makeRecord is a pure function
because it takes in a name and

68
00:04:02.130 --> 00:04:04.570
it produces a new function back.

69
00:04:04.570 --> 00:04:08.750
And I'm going to use asterisks on that
pure, because we are technically doing

70
00:04:08.750 --> 00:04:12.890
an impurity with the unique random
number generation or something.

71
00:04:12.890 --> 00:04:17.220
But from the perspective of passing in
a value and getting back an object,

72
00:04:17.220 --> 00:04:22.350
it's returning a value rather than
the mutating something for us, okay?

73
00:04:22.350 --> 00:04:27.355
So if I do a map over the array "Kyle" and
"Susan" with makeRecord as our map

74
00:04:27.355 --> 00:04:32.822
function, you'll notice that what I'm
basically saying is call mapper with every

75
00:04:32.822 --> 00:04:38.155
original element, and whatever it returns,
stick it in the new data structure.

76
00:04:38.155 --> 00:04:40.474
That new less that we
then return line ten, and

77
00:04:40.474 --> 00:04:42.801
that's how we end up
with an array of objects.

78
00:04:42.801 --> 00:04:46.833
We have not mutated the original
array of Kyle and Susan.

79
00:04:50.601 --> 00:04:54.502
&gt;&gt; Kyle Simpson: Because arrays are the
most common ways that people think about

80
00:04:54.502 --> 00:04:58.476
these operations, there is built
in into the array prototype,

81
00:04:58.476 --> 00:05:00.842
the equivalent of these operations.

82
00:05:00.842 --> 00:05:03.458
So we have a .map on the array prototype.

83
00:05:03.458 --> 00:05:08.214
I can take that makeRecord and
call it with my array directly with

84
00:05:08.214 --> 00:05:11.929
the array.map and
use the mapper as MakeRecord.

85
00:05:11.929 --> 00:05:14.133
And we'll end up with
the same kind of thing,

86
00:05:14.133 --> 00:05:15.942
an array with those kind of objects.

87
00:05:15.942 --> 00:05:19.770
So think about any sort of source value,
any sort of conversion or

88
00:05:19.770 --> 00:05:25.200
transformation that you wanna do on that
value to project the new value from it.

89
00:05:25.200 --> 00:05:27.420
We could take a number and

90
00:05:27.420 --> 00:05:32.610
map it with some sort of arithmetic
operation and come up with a new number.

91
00:05:32.610 --> 00:05:36.890
We could take a string and map it with
some kind of string concatenation,

92
00:05:36.890 --> 00:05:39.630
where we're prefixing or
suffixing the string.

93
00:05:39.630 --> 00:05:42.940
We could take a string and
map it with a two lowercase or

94
00:05:42.940 --> 00:05:44.830
a two uppercase transformation.

95
00:05:44.830 --> 00:05:47.290
In which case we're making
all the strings uppercase.

96
00:05:47.290 --> 00:05:51.880
We could take a single promise and
map it into a return promise.

97
00:05:51.880 --> 00:05:54.100
We could take a string and
turn it into a promise.

98
00:05:54.100 --> 00:05:58.420
Any sort of source value with any
sort of transformation can be mapped.

99
00:05:58.420 --> 00:06:01.755
And any collection of those
values can be mapped.

100
00:06:01.755 --> 00:06:06.127
One thing that is also important to
point out is that the idea of map,

101
00:06:06.127 --> 00:06:10.730
the idea of the other ones that we'll
look at is that we are using the same

102
00:06:10.730 --> 00:06:14.902
transformation across all of
the values in the data structure.

103
00:06:14.902 --> 00:06:18.971
So it's not the case that we do, some of
them we map the numbers to strings, and

104
00:06:18.971 --> 00:06:22.254
some of them, we map the strings
into promises, or whatever.

105
00:06:22.254 --> 00:06:27.223
That would be two separate distinct
map operations across sub sections

106
00:06:27.223 --> 00:06:28.888
of our data structure.

107
00:06:28.888 --> 00:06:32.837
We pass in one mapper function and
it does one set of things.

108
00:06:32.837 --> 00:06:36.869
It is possible for your mapper function to
have some sort of if statement logic in

109
00:06:36.869 --> 00:06:40.298
it, some branching logic in it
where it returns different things,

110
00:06:40.298 --> 00:06:43.322
but that's a sort of polymorphic
way of thinking about it.

111
00:06:43.322 --> 00:06:47.529
And even though you might be able to
do that I'm gonna strongly caution

112
00:06:47.529 --> 00:06:50.184
that a mapper function
should do one thing.

113
00:06:50.184 --> 00:06:54.197
It should turn strings into numbers or
strings into promises or functions into

114
00:06:54.197 --> 00:06:57.926
numbers or something like that instead
of doing a bunch of polymorphic.

115
00:06:57.926 --> 00:07:01.356
And that's just a fancy way of
saying branching based upon types.

116
00:07:01.356 --> 00:07:04.780
It shouldn't do a bunch of different
things based on different input types.

117
00:07:04.780 --> 00:07:07.254
That's generally not a great idea.

118
00:07:07.254 --> 00:07:11.578
Again the key take away here is anytime I
start out with a collection of values like

119
00:07:11.578 --> 00:07:12.798
an array or an object.

120
00:07:12.798 --> 00:07:16.672
A collection of values and
I wanna perform a common operation for

121
00:07:16.672 --> 00:07:20.905
all of the values that transforms them
into some other kind of value and

122
00:07:20.905 --> 00:07:23.002
come up with a new data structure.

123
00:07:23.002 --> 00:07:26.040
Then what I'm pattern matching in my
head against is that's called a map.

