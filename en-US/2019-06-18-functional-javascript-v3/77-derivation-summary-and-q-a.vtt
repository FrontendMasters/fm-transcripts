WEBVTT

1
00:00:00.490 --> 00:00:05.554
&gt;&gt; Kyle Simpson: And so now we have
ended up back where we started several

2
00:00:05.554 --> 00:00:12.392
slides back which is now we have
a single reduction using our transducer.

3
00:00:12.392 --> 00:00:14.797
Take several deep breaths,
I heard a couple, but

4
00:00:14.797 --> 00:00:16.411
take several more deep breaths.

5
00:00:16.411 --> 00:00:18.518
That's some really heavy stuff, okay?

6
00:00:21.219 --> 00:00:24.959
&gt;&gt; Kyle Simpson: One out of 1,000
people might have any clue what

7
00:00:24.959 --> 00:00:29.302
the gobbledygook that just came
out of my mouth says, okay?

8
00:00:29.302 --> 00:00:32.348
I get it, it's very confusing stuff.

9
00:00:32.348 --> 00:00:36.455
But what I want you to come back to
is to remember that we don't have

10
00:00:36.455 --> 00:00:38.933
to understand how 1 plus 1 equals 2.

11
00:00:38.933 --> 00:00:41.781
We don't have to able
mathematically prove or

12
00:00:41.781 --> 00:00:45.442
derive that to be able to add
up our check at the restaurant.

13
00:00:45.442 --> 00:00:49.557
I've now shown you that there
is a way to derive things and

14
00:00:49.557 --> 00:00:52.401
there is a meta commentary that I make.

15
00:00:52.401 --> 00:00:55.976
The reason I include this derivation
in the course, it's not just, so

16
00:00:55.976 --> 00:00:57.953
that I can like totally blow your mind.

17
00:00:57.953 --> 00:01:02.031
But the reason I wanted to include this
is if you go back through these slides,

18
00:01:02.031 --> 00:01:05.919
you won't be able to do it right at
this moment, cuz I know things are awash

19
00:01:05.919 --> 00:01:09.032
in your head, just like they
almost are in mine, I get it.

20
00:01:09.032 --> 00:01:11.955
But if you go back and
you look through these slides,

21
00:01:11.955 --> 00:01:16.606
you're gonna see that every single step of
that derivation that I did uses the basic

22
00:01:16.606 --> 00:01:19.410
principles that I've
taught you in this course.

23
00:01:19.410 --> 00:01:22.179
There was actually no black magic at all.

24
00:01:22.179 --> 00:01:25.850
There was no fancy other utility
that I came up with out of the blue.

25
00:01:25.850 --> 00:01:27.954
No other kind of pattern I used.

26
00:01:27.954 --> 00:01:32.592
I just did abstraction which we've
talked about, we did composition,

27
00:01:32.592 --> 00:01:35.329
we did currying,
we did all of those little

28
00:01:35.329 --> 00:01:38.995
Lego pieces that I've already
taught you in the course.

29
00:01:38.995 --> 00:01:43.618
And what's fascinating and amazing,
to me, is that those little pieces can,

30
00:01:43.618 --> 00:01:48.524
in just the right configuration, produce
something as powerful as transduction.

31
00:01:48.524 --> 00:01:53.611
Imagine what other sorts of things we can
accomplish if we really get our brains

32
00:01:53.611 --> 00:01:58.326
wrapped around the power of these
fundamental functional principles.

33
00:01:59.953 --> 00:02:00.612
&gt;&gt; Kyle Simpson: Yes?

34
00:02:00.612 --> 00:02:04.012
&gt;&gt; Speaker 2: Could you take it us,
well I sure maybe you can or can't, or

35
00:02:04.012 --> 00:02:05.992
maybe it wouldn't be a good idea.

36
00:02:05.992 --> 00:02:10.562
But you could take it a step farther and
adjust and

37
00:02:10.562 --> 00:02:15.915
change the shape of that reducer so
that instead of having

38
00:02:15.915 --> 00:02:21.061
pass in 2 arguments,
you could just then pass in sum.

39
00:02:21.061 --> 00:02:21.809
&gt;&gt; Kyle Simpson: I'm
not sure I understand.

40
00:02:21.809 --> 00:02:26.755
&gt;&gt; Speaker 2: So
instead of having to pass in 2

41
00:02:26.755 --> 00:02:30.838
arguments then-
&gt;&gt; Kyle Simpson: Reductions always need

42
00:02:30.838 --> 00:02:31.904
an initial value.

43
00:02:31.904 --> 00:02:32.467
&gt;&gt; Speaker 2: Yeah.

44
00:02:32.467 --> 00:02:35.340
&gt;&gt; Kyle Simpson: So you remember
several slides back when I showed you

45
00:02:35.340 --> 00:02:38.407
the transduce utility it also
takes an initial value and

46
00:02:38.407 --> 00:02:40.313
into also takes an initial value.

47
00:02:40.313 --> 00:02:44.355
Generally speaking a reduction
always needs an initial value.

48
00:02:44.355 --> 00:02:48.278
Could you make it so that that initial
value could somehow be assumed?

49
00:02:48.278 --> 00:02:52.720
Well, in a particular problem domain, if
you knew you were doing numeric addition,

50
00:02:52.720 --> 00:02:53.840
you could assume 0.

51
00:02:53.840 --> 00:02:54.360
&gt;&gt; Speaker 2: Yeah.

52
00:02:54.360 --> 00:02:56.530
&gt;&gt; Kyle Simpson: But if your
transducer was doing multiplication,

53
00:02:56.530 --> 00:02:59.356
you'd have to assume 1 and
if it was doing string concatenation,

54
00:02:59.356 --> 00:03:00.926
you'd have to assume empty string.

55
00:03:00.926 --> 00:03:05.080
So, generally speaking, the safest
approach is to always know that when

56
00:03:05.080 --> 00:03:08.565
you're going to do a reduction
you need a good initial value.

57
00:03:10.604 --> 00:03:12.183
&gt;&gt; Speaker 2: Thanks.

58
00:03:12.183 --> 00:03:13.770
&gt;&gt; Kyle Simpson: What's
key to note here though,

59
00:03:13.770 --> 00:03:16.045
is 0 doesn't get passed
into the transducer.

60
00:03:16.045 --> 00:03:18.297
The transducer didn't
care about the 0 at all.

61
00:03:18.297 --> 00:03:24.030
0 is for the purposes of the .reduce,
cuz reduce has to have somewhere to start.

62
00:03:24.030 --> 00:03:24.745
&gt;&gt; Speaker 2: That's right.

63
00:03:24.745 --> 00:03:27.858
&gt;&gt; Kyle Simpson: Okay, transducer itself
is a mathematic thing that's been reshaped

64
00:03:27.858 --> 00:03:31.618
entirely and it's completely agnostic of
what values are about to flow through it.

65
00:03:33.885 --> 00:03:34.478
&gt;&gt; Kyle Simpson: Yes?

66
00:03:34.478 --> 00:03:39.098
&gt;&gt; Speaker 3: I'm curious, if you
weren't actually summing it afterwards,

67
00:03:39.098 --> 00:03:41.870
how far back would you go to set this up?

68
00:03:41.870 --> 00:03:45.931
Cuz I can picture a bunch of times when I
would wanna just filter and map something.

69
00:03:45.931 --> 00:03:51.122
&gt;&gt; Kyle Simpson: So if I didn't pass in
sum, if I passed in a string concatenator.

70
00:03:51.122 --> 00:03:54.373
It takes an x and a y and adds them
together as a string concatenation,

71
00:03:54.373 --> 00:03:56.513
what would the end results
of this have been?

72
00:04:01.864 --> 00:04:03.212
&gt;&gt; Speaker 3: It would just
be a string of all those-

73
00:04:03.212 --> 00:04:04.184
&gt;&gt; Kyle Simpson: It would be a string of

74
00:04:04.184 --> 00:04:08.019
each one of those individual numbers which
ended up adding up to the number 42, but

75
00:04:08.019 --> 00:04:10.953
it would've been each of those
individual numbers as a string.

76
00:04:10.953 --> 00:04:13.544
What if I passed in list combination,
what would we have gotten?

77
00:04:16.406 --> 00:04:17.377
&gt;&gt; Speaker 3: An array?

78
00:04:17.377 --> 00:04:21.312
&gt;&gt; Kyle Simpson: We would have an array
that had the values that had been mapped

79
00:04:21.312 --> 00:04:22.321
and filtered.

80
00:04:22.321 --> 00:04:28.502
So what reducer I pass into my transducer
completely decides what end results I get.

81
00:04:28.502 --> 00:04:30.464
&gt;&gt; Speaker 4: Yes, but if-
&gt;&gt; Kyle Simpson: If I want to mathematics

82
00:04:30.464 --> 00:04:31.929
summing, I pass in sum.

83
00:04:31.929 --> 00:04:36.438
If I want a string concatenation, I pass
in and that's exactly what into is doing.

84
00:04:36.438 --> 00:04:38.865
Into's saying you gave me
a 0 as an initial value,

85
00:04:38.865 --> 00:04:41.631
it's a pretty good bet that
what you want back is a number,

86
00:04:41.631 --> 00:04:45.254
I'm gonna go ahead and guess that you
want to just add everything together.

87
00:04:45.254 --> 00:04:46.070
That's what it's doing.

88
00:04:46.070 --> 00:04:49.718
It's making those sorts of assumptions and
we can see the power of that here.

89
00:04:49.718 --> 00:04:54.551
We can use this exact same transducer
with any different reducer and

90
00:04:54.551 --> 00:04:57.195
come up with a different end result.

91
00:04:57.195 --> 00:04:59.600
&gt;&gt; Speaker 3: So if you just
wanted to do the filter in map,

92
00:04:59.600 --> 00:05:04.089
would you not do a transducer or would you
pass in like identity or something that?

93
00:05:04.089 --> 00:05:04.935
&gt;&gt; Kyle Simpson: Yeah,
you pass an identity.

94
00:05:04.935 --> 00:05:08.141
That's exactly right.

95
00:05:08.141 --> 00:05:11.318
If you feel awash with confusion,
and fear and terror,

96
00:05:11.318 --> 00:05:15.576
come back to what hopefully was a little
bit more comfortable, which was,

97
00:05:15.576 --> 00:05:17.954
how do I just use that transduce utility?

98
00:05:17.954 --> 00:05:20.055
Let the API do it for me, right?

99
00:05:20.055 --> 00:05:24.400
[LAUGH] I need to pass any of my filters
to a utility called filter reducer,

100
00:05:24.400 --> 00:05:28.189
I need to pass any of my mapper
is to a utility called mapreduce.

101
00:05:28.189 --> 00:05:31.955
And then I compose those using my
plain old normal regular compose,

102
00:05:31.955 --> 00:05:36.265
which we've already written on it in
this course we know how to make compose.

103
00:05:36.265 --> 00:05:42.193
And I take that transducer pass
it into transduce the utility and

104
00:05:42.193 --> 00:05:47.055
we get our end result
&gt;&gt; Speaker 5: Does this it all explain how

105
00:05:47.055 --> 00:05:50.175
RxJS works with streaming?

106
00:05:50.175 --> 00:05:54.438
&gt;&gt; Kyle Simpson: Hm,
I am certainly not qualified

107
00:05:54.438 --> 00:05:58.861
to speak to the internals of RxJS.

108
00:05:58.861 --> 00:06:04.167
I can say that RxJS in the version 6,
which was at this moment,

109
00:06:04.167 --> 00:06:08.786
was the latest version that
had been released of RxJS.

110
00:06:08.786 --> 00:06:13.726
They moved in a direction where
instead of having chained methods that

111
00:06:13.726 --> 00:06:18.010
you basically do piping,
you do a composition with piping.

112
00:06:18.010 --> 00:06:22.826
That's not the same thing
as a transduction, but

113
00:06:22.826 --> 00:06:27.076
it is friendlier to transduction, right.

114
00:06:27.076 --> 00:06:30.441
So with those chain methods
that you had in RxJS before,

115
00:06:30.441 --> 00:06:33.820
you really couldn't have
combined all of those steps.

116
00:06:33.820 --> 00:06:39.737
Now that we're in a piping, but
a composition you at least theoretically

117
00:06:39.737 --> 00:06:44.987
could transform some of those
RxJS operators that are reducers,

118
00:06:44.987 --> 00:06:50.156
you could transform them into
transducers that could compose.

119
00:06:50.156 --> 00:06:55.322
I haven't tried that, but I do think it
would probably be more friendly to that.

120
00:06:55.322 --> 00:06:56.130
&gt;&gt; Speaker 5: Cool, thanks.

121
00:06:56.130 --> 00:06:57.109
&gt;&gt; Kyle Simpson: Yeah.

122
00:06:57.109 --> 00:06:58.169
Yes?

123
00:06:58.169 --> 00:07:00.726
&gt;&gt; Speaker 3: I'm just curious
cuz I was looking earlier.

124
00:07:00.726 --> 00:07:03.297
Do you know why they made a pipe and
not a compose?

125
00:07:05.521 --> 00:07:06.064
&gt;&gt; Kyle Simpson: Where?

126
00:07:06.064 --> 00:07:08.117
&gt;&gt; Speaker 3: RxJS, I was-
&gt;&gt; Kyle Simpson: Why they called it pipe

127
00:07:08.117 --> 00:07:09.045
rather than compose?

128
00:07:09.045 --> 00:07:11.752
&gt;&gt; Speaker 3: Well like you had said
that compose go's is right to left-

129
00:07:11.752 --> 00:07:12.579
&gt;&gt; Kyle Simpson: Right to left.

130
00:07:12.579 --> 00:07:15.617
&gt;&gt; Speaker 3: And pipe is left to right
and I just was looking through the API and

131
00:07:15.617 --> 00:07:18.102
I did notice they didn't
even have a compose at all.

132
00:07:18.102 --> 00:07:19.327
&gt;&gt; Kyle Simpson: Yeah I
don't think they do.

133
00:07:19.327 --> 00:07:22.275
And there's a very simple reason, I don't
know if this is really the reason, but

134
00:07:22.275 --> 00:07:23.439
there's a very simple reason.

135
00:07:23.439 --> 00:07:28.374
What they're trying to do is get you
to convert from your chained list to

136
00:07:28.374 --> 00:07:31.928
a pipe and
those are in the exact same order in pipe.

137
00:07:31.928 --> 00:07:35.716
To convert to a compose you'd have to
reverse everything, and they probably

138
00:07:35.716 --> 00:07:39.561
felt like that would be super confusing
to people, so they just made an API that

139
00:07:39.561 --> 00:07:43.552
allowed you to just probably indent and
take out the dots and that's it, right?

140
00:07:43.552 --> 00:07:45.854
&gt;&gt; Speaker 6: They actually wrote
a tool to do that, so yeah.

141
00:07:45.854 --> 00:07:46.898
[LAUGH]
&gt;&gt; Kyle Simpson: So, there you go.

142
00:07:46.898 --> 00:07:48.929
&gt;&gt; Speaker 3: You could
still write the compose.

143
00:07:48.929 --> 00:07:52.625
&gt;&gt; Kyle Simpson: Yeah, again, we actually
talked about this earlier in the course

144
00:07:52.625 --> 00:07:55.535
when we were talking about composition and
piping.

145
00:07:55.535 --> 00:08:00.860
When you're in the habit of doing these
imperative things like method chaining,

146
00:08:00.860 --> 00:08:03.107
piping feels more natural to you.

147
00:08:03.107 --> 00:08:07.203
When you fully immerse yourself in
the ideas of functional programming,

148
00:08:07.203 --> 00:08:10.251
I think compose ends up being
a lot more natural to use.

149
00:08:10.251 --> 00:08:13.424
So it's kind of,
maybe a different way of getting there.

150
00:08:13.424 --> 00:08:17.761
They still have composition but they got
there from a very sort of imperative

151
00:08:17.761 --> 00:08:19.739
method chaining kind of routine.

152
00:08:19.739 --> 00:08:21.570
&gt;&gt; Speaker 7: It seems much
more natural to me right now.

153
00:08:21.570 --> 00:08:22.129
&gt;&gt; Kyle Simpson: Yeah,

154
00:08:22.129 --> 00:08:26.426
it definitely does to most people, start
out seeming more natural to do piping.

155
00:08:26.426 --> 00:08:31.351
But, my experience and many people
that I've seen is eventually it ends

156
00:08:31.351 --> 00:08:35.318
up being composition is more
convenient and useful, so.

157
00:08:35.318 --> 00:08:39.502
I think that's why it's more
common in functional programming.

158
00:08:39.502 --> 00:08:44.066
Certainly both compose and pipe
are composition from the perspective of

159
00:08:44.066 --> 00:08:47.300
declarative data flow,
and that's a good thing.

160
00:08:47.300 --> 00:08:49.860
That is definitely consistent
with functional principles.

