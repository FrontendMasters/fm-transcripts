WEBVTT

1
00:00:00.510 --> 00:00:03.580
&gt;&gt; Kyle Simpson: Okay,
let's talk about the solution to part one

2
00:00:03.580 --> 00:00:06.610
of the impurity exercise.

3
00:00:06.610 --> 00:00:09.913
So we said we wanna take this
getStudentsByName function,

4
00:00:09.913 --> 00:00:11.903
we're gonna modify it and move it.

5
00:00:11.903 --> 00:00:15.840
So I'm just gonna copy and
then move it up here.

6
00:00:15.840 --> 00:00:20.583
And we're gonna end up
wanting to wrap it around our

7
00:00:20.583 --> 00:00:26.230
sortStudentsByName, so
I'll just kind of indent it here.

8
00:00:26.230 --> 00:00:30.145
And remember, the reason we want
to wrap getStudentsByName around

9
00:00:30.145 --> 00:00:34.963
sortStudentsByName, sortStudentsByName
is a function that has impurity in it.

10
00:00:34.963 --> 00:00:40.130
And for the purposes of this exercise,
for whatever reason, we can't modify it.

11
00:00:40.130 --> 00:00:41.500
We can't change it.

12
00:00:41.500 --> 00:00:46.900
But we can contain the impurity so that it
doesn't leak out to the rest of the scope.

13
00:00:46.900 --> 00:00:49.680
If we reduce the surface
area of that impurity,

14
00:00:49.680 --> 00:00:54.510
then we improve the overall program
readability and maintainability.

15
00:00:54.510 --> 00:00:57.408
So we do wanna pass in,
you'll notice down here,

16
00:00:57.408 --> 00:01:01.893
we are passing in the outer list of
students, the original list of students.

17
00:01:01.893 --> 00:01:04.500
We'll pass that list in.

18
00:01:04.500 --> 00:01:09.040
And we know that that is the thing
that's gonna get modified.

19
00:01:09.040 --> 00:01:13.750
So if we wanna prevent it from being
modified, we've gotta make our local copy

20
00:01:13.750 --> 00:01:18.360
of students be,
our local reference be a copy of students,

21
00:01:18.360 --> 00:01:21.830
not an actual reference to
the original outer one.

22
00:01:21.830 --> 00:01:26.460
So if we left it alone, this wouldn't do
anything to prevent the side effects.

23
00:01:26.460 --> 00:01:30.210
So let's actually make a copy
of the students array.

24
00:01:30.210 --> 00:01:33.210
And that can be done very simply
with just the slice method.

25
00:01:33.210 --> 00:01:36.590
That makes us a shallow copy of an array.

26
00:01:36.590 --> 00:01:41.680
So now our students parameter
is pointing at a local copy

27
00:01:41.680 --> 00:01:45.730
of that array, not the outer global array.

28
00:01:45.730 --> 00:01:51.028
That then allows us to simply
call return sortStudentsByName.

29
00:01:53.367 --> 00:01:56.602
&gt;&gt; Kyle Simpson: Which is going to
end up producing a side effect but

30
00:01:56.602 --> 00:01:59.538
only on our local one,
not on the global one.

31
00:01:59.538 --> 00:02:03.529
And we return the results, since it
returns students, we return the result.

32
00:02:04.750 --> 00:02:09.612
And let's test to make
sure that that works.

33
00:02:09.612 --> 00:02:12.724
I will paste this in and run it.

34
00:02:12.724 --> 00:02:16.612
And what we see is that the first
five tests produce true, and

35
00:02:16.612 --> 00:02:18.840
the last five tests produce true.

36
00:02:18.840 --> 00:02:22.021
These are still false because that's
what we're gonna handle in part two.

