WEBVTT

1
00:00:00.030 --> 00:00:05.890
&gt;&gt; Kyle Simpson: Let's talk about
the solution to our exercise on closure.

2
00:00:05.890 --> 00:00:10.810
Now I am just gonna forewarn you,
I'm going to deliberately solve this

3
00:00:10.810 --> 00:00:15.520
incorrectly to prove a point about the way
that we think about closure and what it

4
00:00:15.520 --> 00:00:19.620
means for functional programming, and
then we're gonna solve it the correct way.

5
00:00:19.620 --> 00:00:24.533
So the first thing to note is
that strBuilder when called

6
00:00:24.533 --> 00:00:27.678
with a string, returns back what?

7
00:00:29.993 --> 00:00:32.768
&gt;&gt; Kyle Simpson: Returns back another
function that's expecting to be called

8
00:00:32.768 --> 00:00:34.200
with another string.

9
00:00:34.200 --> 00:00:36.140
So it's gonna keep returning
back a function, and

10
00:00:36.140 --> 00:00:38.340
it would do that essentially forever.

11
00:00:38.340 --> 00:00:40.928
As long as you keep passing in strings,
even empty strings,

12
00:00:40.928 --> 00:00:43.075
it's just gonna keep
returning back a function.

13
00:00:43.075 --> 00:00:44.819
So what does that pattern look like?

14
00:00:44.819 --> 00:00:49.042
Well, we know at a minimum,
we've got to make and return a function.

15
00:00:49.042 --> 00:00:52.629
So I'm gonna just call this function next
because it's just sitting there waiting

16
00:00:52.629 --> 00:00:55.094
for the next string,
next string, next string, okay?

17
00:00:55.094 --> 00:01:00.691
That function is going
to receive a string.

18
00:01:00.691 --> 00:01:03.195
Well, it's gonna receive a value,
we're not sure if it's a string,

19
00:01:03.195 --> 00:01:04.440
it's gonna receive a value.

20
00:01:04.440 --> 00:01:10.090
Now, I want to keep going, if you will,
in other words, I wanna return a function

21
00:01:10.090 --> 00:01:15.053
if the value that was passed in

22
00:01:15.053 --> 00:01:19.870
was a string,
keep going as long as it's a string.

23
00:01:19.870 --> 00:01:23.400
As soon as it becomes not a string,
that's when I wanna bail out, okay?

24
00:01:23.400 --> 00:01:26.330
But I need to keep track of
the strings that I have seen so

25
00:01:26.330 --> 00:01:30.556
far cuz I'm gonna keep returning this
thing back over and over and over again.

26
00:01:30.556 --> 00:01:33.406
I wanna keep track of those
strings in some way, and

27
00:01:33.406 --> 00:01:37.597
it seems natural that I might just start
concatenating it on to the string.

28
00:01:37.597 --> 00:01:42.897
So if I receive value and it's, oops,

29
00:01:42.897 --> 00:01:47.394
if I receive a value that is of type

30
00:01:47.394 --> 00:01:52.639
string,
&gt;&gt; Kyle Simpson: Then what

31
00:01:52.639 --> 00:01:57.620
I know is that I could just concatenate
it on to the end of str, right?

32
00:01:57.620 --> 00:01:59.107
Cuz that was my initial string.

33
00:01:59.107 --> 00:02:03.023
And then I can just start concatenating
stuff onto the end of it as I see it until

34
00:02:03.023 --> 00:02:05.976
I don't see a string and
then just I need to return string,

35
00:02:05.976 --> 00:02:08.467
that's a convenient way
of keeping track of it.

36
00:02:08.467 --> 00:02:12.420
So if I just said str += v.

37
00:02:12.420 --> 00:02:18.132
And then otherwise, in other words,
so if it was a string and

38
00:02:18.132 --> 00:02:21.948
I concatenate it on, what do I wanna do?

39
00:02:21.948 --> 00:02:25.133
I wanna return that next function again,

40
00:02:25.133 --> 00:02:29.774
just the function itself next,
so that I just keep returning

41
00:02:29.774 --> 00:02:34.600
a function back until I pass in
something that's not a string.

42
00:02:34.600 --> 00:02:39.390
And that's my signal to
return whatever is in str.

43
00:02:39.390 --> 00:02:42.690
Did you follow that thought
process that I went through there?

44
00:02:42.690 --> 00:02:47.270
I need somewhere to store all those
values, and it seems logical that I just

45
00:02:47.270 --> 00:02:51.010
throw them onto the end of the string and
that'll be a good place to store them.

46
00:02:51.010 --> 00:02:54.220
And how do I know if I need to keep
going with a new function or not?

47
00:02:54.220 --> 00:02:57.500
It's whether I passed in a string or not.

48
00:02:57.500 --> 00:02:58.880
Everybody with me?

49
00:02:58.880 --> 00:03:04.150
Now if I take this code, this is
deliberately the wrong solution and

50
00:03:04.150 --> 00:03:08.494
I'll explain why in a moment,
but if I take this code and

51
00:03:08.494 --> 00:03:13.502
we try to run it, we'll notice
that I get several failed tests.

52
00:03:13.502 --> 00:03:18.394
But notice something interesting,
the tests that did succeed is the most,

53
00:03:18.394 --> 00:03:20.465
seemingly complex of the test.

54
00:03:20.465 --> 00:03:23.966
It's the one that was called a bunch
of times, that one passed, and

55
00:03:23.966 --> 00:03:26.069
it's all these ones that didn't pass.

56
00:03:26.069 --> 00:03:29.366
And there's a clue there,
if you're paying close attention,

57
00:03:29.366 --> 00:03:32.369
there's a clue there as to
why our solution didn't work.

58
00:03:32.369 --> 00:03:37.900
And the clue is that what we have
are these intermediary functions.

59
00:03:37.900 --> 00:03:41.660
Notice I've got Kyle and Susan.

60
00:03:41.660 --> 00:03:44.750
Those are sort of a fork, if you will,

61
00:03:44.750 --> 00:03:49.140
from hello where we're gonna end up
with hello Kyle and hello Susan.

62
00:03:49.140 --> 00:03:55.818
But if I have modified string with the
word Kyle and then I try to call Susan,

63
00:03:55.818 --> 00:04:00.588
if this function is close
over that the same string and

64
00:04:00.588 --> 00:04:05.682
our modified string,
that string no longer says hello.

65
00:04:05.682 --> 00:04:11.540
Now, it says hello Kyle, and I'm trying
to put Susan on to the end of hello Kyle.

66
00:04:11.540 --> 00:04:12.040
You follow me?

67
00:04:13.160 --> 00:04:15.960
So that's really kind of where
our problem is stemming,

68
00:04:15.960 --> 00:04:17.900
is that if you think about it,

69
00:04:17.900 --> 00:04:22.780
what we're doing is we're closing over a
variable that's being modified each time.

70
00:04:22.780 --> 00:04:25.850
So in other words,
we have functional impurity here and

71
00:04:25.850 --> 00:04:30.560
that's why this is not working,
it's because we have functional impurity.

72
00:04:30.560 --> 00:04:31.940
So I'm gonna go back and

73
00:04:31.940 --> 00:04:37.400
try to solve this in a different way that
preserves the functional purity, okay?

74
00:04:37.400 --> 00:04:38.480
So let's start over.

75
00:04:38.480 --> 00:04:41.720
Well, I'll leave the function next
part but let's rewrite this part.

76
00:04:41.720 --> 00:04:46.070
So we know now that we never
want string to be modified.

77
00:04:46.070 --> 00:04:49.770
If we're closing over this thing, which is
what this inner function will be doing,

78
00:04:49.770 --> 00:04:53.730
we wanna only close over string
that stays the same, okay?

79
00:04:53.730 --> 00:04:55.390
So I do still wanna do a test.

80
00:04:55.390 --> 00:05:02.190
I wanna say if the type of v is string,
then

81
00:05:02.190 --> 00:05:06.760
I wanna do something, and I am going to
return something here, so we'll do that.

82
00:05:06.760 --> 00:05:13.070
If I don't return a string,
then what is it that I want to return?

83
00:05:13.070 --> 00:05:17.470
Now this is the part that's maybe gonna
be a little bit counterintuitive to you.

84
00:05:17.470 --> 00:05:21.330
Let's talk about what
happens if the string,

85
00:05:21.330 --> 00:05:23.070
we need to figure out
what we're putting here.

86
00:05:23.070 --> 00:05:28.450
Let's talk about what happens if we
have passed in a v that is a string.

87
00:05:28.450 --> 00:05:33.336
We have str, whatever value it
currently has, and we have v.

88
00:05:33.336 --> 00:05:40.550
We don't wanna modify string but what we
want is a new function that will wait for

89
00:05:40.550 --> 00:05:46.050
the next string, and that new function
needs to know about both string and v.

90
00:05:48.370 --> 00:05:53.430
So, in other words, what I really wanna
do is I wanna call string builder again,

91
00:05:54.790 --> 00:05:57.820
I wanna actually call it not return it.

92
00:05:57.820 --> 00:06:02.670
Now when I call string builder,
what is it gonna return to me?

93
00:06:02.670 --> 00:06:05.039
It's gonna return me another function.

94
00:06:05.039 --> 00:06:09.601
But when I pass in
the string builder is that,

95
00:06:09.601 --> 00:06:15.380
it's the new partially
concatenated string each time.

96
00:06:17.140 --> 00:06:20.460
So I'm not modifying a variable
that I'm closing over,

97
00:06:20.460 --> 00:06:22.840
I am calling to the next level.

98
00:06:22.840 --> 00:06:26.290
So this is almost recursion,
it's not exactly recursion, but

99
00:06:26.290 --> 00:06:30.400
when string builder comes back in,
this string

100
00:06:30.400 --> 00:06:35.270
is now gonna be the two strings, and
we're closed over the two strings.

101
00:06:35.270 --> 00:06:39.740
And if we do it again, now it's a bigger
string and we're closing over a bigger and

102
00:06:39.740 --> 00:06:44.528
bigger sting, but
every single level of that closure is only

103
00:06:44.528 --> 00:06:49.160
ever closing over one value, it never
mutates itself within the closure.

104
00:06:50.740 --> 00:06:55.340
So what if I didn't get a v?

105
00:06:56.520 --> 00:06:59.170
Well, now, I just return string.

106
00:07:01.940 --> 00:07:05.452
If v wasn't a string, in other words,
it was undefined or false or

107
00:07:05.452 --> 00:07:09.782
something like that, it wasn't a string,
then I know that whatever this was last

108
00:07:09.782 --> 00:07:13.137
time was the end value of our string and
I should just return it.

109
00:07:18.946 --> 00:07:23.315
&gt;&gt; Kyle Simpson: Let's test myself to
make sure I didn't make a mistake here.

110
00:07:25.925 --> 00:07:30.070
&gt;&gt; Kyle Simpson: And
now all of our tests passed, okay?

111
00:07:30.070 --> 00:07:35.060
So the key takeaway here is that
if you're going to use closure in

112
00:07:35.060 --> 00:07:40.428
functional programming, you have to make
sure you're closing over non-changing,

113
00:07:40.428 --> 00:07:42.450
non-mutating values.

114
00:07:42.450 --> 00:07:45.639
As soon as you start mutating
values that you closed over,

115
00:07:45.639 --> 00:07:47.537
you lose your functional purity.

116
00:07:47.537 --> 00:07:51.804
And it won't often be a catastrophic
test failure like I set up,

117
00:07:51.804 --> 00:07:56.307
it'll often be an extremely subtle
bug that only comes up once every

118
00:07:56.307 --> 00:08:00.960
million requests,
that'll be what you're facing, okay?

119
00:08:00.960 --> 00:08:05.873
So one of the takeaways that I'm hoping
that you're getting from this course

120
00:08:05.873 --> 00:08:09.349
is that if we code using
these functional principles,

121
00:08:09.349 --> 00:08:14.355
we actually avoid entire classes of
bugs that could have happened otherwise.

122
00:08:14.355 --> 00:08:18.812
They're just not even possible to happen
because of the principles of functional

123
00:08:18.812 --> 00:08:21.340
programming being so sound mathematically.

124
00:08:22.850 --> 00:08:25.310
So if we close over
an ever changing values,

125
00:08:25.310 --> 00:08:29.630
we're far less likely to have one
of those bizarre strange cases.

