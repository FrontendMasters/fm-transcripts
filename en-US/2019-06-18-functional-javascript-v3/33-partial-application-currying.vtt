WEBVTT

1
00:00:00.000 --> 00:00:03.976
&gt;&gt; Kyle Simpson: In terms of our AJAX
function, there are two techniques for

2
00:00:03.976 --> 00:00:05.893
how we could specialize it.

3
00:00:05.893 --> 00:00:09.300
One of those techniques is
called partial application, so

4
00:00:09.300 --> 00:00:11.490
let's look at partial application.

5
00:00:11.490 --> 00:00:13.442
Here's my AJAX function, line 1.

6
00:00:13.442 --> 00:00:19.616
Line 3, I am making a partial
application of the AJAX function,

7
00:00:19.616 --> 00:00:22.770
and that result is getCustomer.

8
00:00:22.770 --> 00:00:27.497
And the way that I have made
getCustomer out of AJAX,

9
00:00:27.497 --> 00:00:33.198
is by pre-specifying the customer
API URL as its first input.

10
00:00:33.198 --> 00:00:36.692
So envision a utility called partial,
which I'm not gonna show

11
00:00:36.692 --> 00:00:41.222
the implementation of because it doesn't
really matter how its implemented, but

12
00:00:41.222 --> 00:00:44.283
it's provided to you by all
the functional libraries.

13
00:00:44.283 --> 00:00:48.963
It takes a function is its first input,
and then it takes as its next

14
00:00:48.963 --> 00:00:53.905
inputs a set of arguments to pass
along to that function at some point.

15
00:00:53.905 --> 00:00:57.865
So it's like pre setting those arguments,
and

16
00:00:57.865 --> 00:01:01.831
we get back a new function
called getCustomer.

17
00:01:01.831 --> 00:01:05.447
I can take line 4,
another parcel of AJAX and

18
00:01:05.447 --> 00:01:09.646
provide it to inputs, and
get me a getCurrentUser.

19
00:01:09.646 --> 00:01:15.201
But line 5 is better than line 4, for the
exact same reason is we just talked about.

20
00:01:15.201 --> 00:01:19.695
Line 5 makes a more clear
delineation of the relationship

21
00:01:19.695 --> 00:01:23.096
between getCurrentUser and getCustomer.

22
00:01:23.096 --> 00:01:28.381
That is getCurrentUser is a partial
application of getCustomer.

23
00:01:29.986 --> 00:01:34.355
&gt;&gt; Kyle Simpson: So though that partial
utility allows me each time I call it to

24
00:01:34.355 --> 00:01:36.582
preset one or more inputs, and

25
00:01:36.582 --> 00:01:41.306
produce a function which is expecting
all the rest of the inputs.

26
00:01:41.306 --> 00:01:42.954
That's what partial application is.

27
00:01:45.185 --> 00:01:47.690
&gt;&gt; Kyle Simpson: Partially
applying some of the inputs now,

28
00:01:47.690 --> 00:01:49.727
receiving all of the inputs later.

29
00:01:49.727 --> 00:01:54.629
You'll notice that to do a two-stage
specialization like I did,

30
00:01:54.629 --> 00:01:56.740
I had to call partial twice.

31
00:01:56.740 --> 00:01:58.677
Do you see that?

32
00:01:58.677 --> 00:02:00.749
I had to call partial once, and

33
00:02:00.749 --> 00:02:04.826
then I called it the second time
to make the getCurrentUser.

34
00:02:09.916 --> 00:02:12.641
&gt;&gt; Kyle Simpson: That's one
way of doing specialization,

35
00:02:12.641 --> 00:02:14.994
it's called partial application.

36
00:02:14.994 --> 00:02:20.411
Another way which quite frankly is much
more common within programme functioning.

37
00:02:20.411 --> 00:02:24.814
You will tend to want to do partial
application as you get started, and

38
00:02:24.814 --> 00:02:28.931
then you'll find out actually
everybody does currying, okay?

39
00:02:28.931 --> 00:02:33.224
And you'll see why as you go along, as we
go along in the course and as you get more

40
00:02:33.224 --> 00:02:37.736
practice with this, but currying is the
much more common form of specialization.

41
00:02:37.736 --> 00:02:40.860
I used to tell people and
many people have said this before,

42
00:02:40.860 --> 00:02:44.990
I used to tell people that currying was
a special form of partial application.

43
00:02:44.990 --> 00:02:48.953
I now would describe
them more like cousins.

44
00:02:48.953 --> 00:02:54.182
They both accomplish the same end goal,
they both specialize a generalized

45
00:02:54.182 --> 00:02:59.420
function, but they go about it in
a somewhat significantly different way.

46
00:03:01.010 --> 00:03:02.886
So let's look at currying.

47
00:03:02.886 --> 00:03:09.572
Back to our AJAX function, what if I
wrote the AJAX function like this, okay?

48
00:03:09.572 --> 00:03:14.130
It looks a little bit different
because I have this three levels here.

49
00:03:14.130 --> 00:03:18.828
I have an AJAX level, and then a getData
level, and then a getCallback level, so

50
00:03:18.828 --> 00:03:21.469
I've got three levels
of function going on.

51
00:03:21.469 --> 00:03:26.279
And notice line 7 when I call it,
I'm doing a first set of

52
00:03:26.279 --> 00:03:32.109
parentheses line 7 for the CUSTOMER_API,
that provides the URL.

53
00:03:32.109 --> 00:03:35.588
And I get back another function
which is expecting the next input.

54
00:03:35.588 --> 00:03:39.179
And then I get back another function
which is expecting the next input.

55
00:03:39.179 --> 00:03:40.795
You see where I'm going here?

56
00:03:40.795 --> 00:03:45.925
So I've got three functions nested, and
then I've got three function calls.

57
00:03:45.925 --> 00:03:50.560
That's what I would sort of refer
to as a manual currying, okay?

58
00:03:50.560 --> 00:03:54.563
And you'll sometimes see people define,
if they just have a two or maybe a three

59
00:03:54.563 --> 00:03:58.411
level currying, you'll see them list
out the functions nested like that.

60
00:03:58.411 --> 00:04:03.593
On the next slide we'll see an alternate
way of writing out a manual curry.

61
00:04:03.593 --> 00:04:07.728
But that allows me then to
call those functions and

62
00:04:07.728 --> 00:04:10.886
save off the intermediate function.

63
00:04:10.886 --> 00:04:12.837
That's how we get the specialization.

64
00:04:12.837 --> 00:04:16.457
If I call AJAX with only CUSTOMER_API,

65
00:04:16.457 --> 00:04:21.570
I get back a function which
could be called getCustomer.

66
00:04:21.570 --> 00:04:25.976
The function on line 2 is
essentially getCustomer.

67
00:04:25.976 --> 00:04:29.891
Use your equational reasoning and you'll
see they're basically the same thing.

68
00:04:29.891 --> 00:04:33.756
And then if I call
the getCustomer with the data,

69
00:04:33.756 --> 00:04:36.596
what I get back is getCurrentUser.

70
00:04:36.596 --> 00:04:42.367
So, you'll see the same specialization
just as we're doing on the previous slide,

71
00:04:42.367 --> 00:04:46.631
but now notice that I didn't have
to call a utility every line.

72
00:04:46.631 --> 00:04:50.769
All I had to do to get
the more specialized function,

73
00:04:50.769 --> 00:04:53.411
was just parse in the next input.

74
00:04:53.411 --> 00:04:56.318
Parse in an input,
get a more specialized function.

75
00:04:56.318 --> 00:04:59.622
Parse in another input,
get an even more specialized function.

76
00:04:59.622 --> 00:05:03.062
And you keep doing that, you keep getting
a more specialized function every time.

77
00:05:05.184 --> 00:05:07.663
&gt;&gt; Kyle Simpson: This is
a technique called currying.

78
00:05:07.663 --> 00:05:09.852
Where does that come from by the way?

79
00:05:09.852 --> 00:05:13.048
The Haskell programming language,
everybody knows or

80
00:05:13.048 --> 00:05:16.449
probably has heard at some point or
another about Haskell.

81
00:05:16.449 --> 00:05:18.748
I don't really know anything
at all about Haskell.

82
00:05:18.748 --> 00:05:21.241
I can literally write one line of Haskell,

83
00:05:21.241 --> 00:05:24.781
that's all I know about
the programming language Haskell.

84
00:05:24.781 --> 00:05:30.130
But what I know is that
one of the co-inventors

85
00:05:30.130 --> 00:05:34.938
of Haskell, his name was Haskell Curry.

86
00:05:34.938 --> 00:05:37.538
He invented this technique of currying, or

87
00:05:37.538 --> 00:05:40.641
at least co-invented this
technique of currying.

88
00:05:40.641 --> 00:05:45.325
We call it currying because
it is essentially the way

89
00:05:45.325 --> 00:05:49.481
that all inputs go into
functions in Haskell.

90
00:05:49.481 --> 00:05:53.881
So in Haskell you don't write like
a binary or an unary function,

91
00:05:53.881 --> 00:05:55.488
there is no such thing.

92
00:05:55.488 --> 00:05:58.587
All functions are unary in Haskell.

93
00:05:58.587 --> 00:06:01.778
So, if you wanna pass in three inputs,
what do you do?

94
00:06:01.778 --> 00:06:04.727
You have a curried function
that takes them one at a time.

95
00:06:04.727 --> 00:06:07.693
There's no such thing as parse in
all three all at once kind of thing.

96
00:06:07.693 --> 00:06:12.558
So, currying comes from this idea of,
if I could only parse in in one input at

97
00:06:12.558 --> 00:06:16.452
a time, how could I make multiple
inputs go into a function?

98
00:06:16.452 --> 00:06:21.632
Sometimes my function
needs multiple inputs.

99
00:06:21.632 --> 00:06:26.449
Now, this is doing it manually,
but it would be nice if, for

100
00:06:26.449 --> 00:06:30.611
example, we had a utility
that could do that for us.

101
00:06:30.611 --> 00:06:33.932
And indeed, we do have a utility
that can do that for us.

102
00:06:33.932 --> 00:06:35.926
By the way in the comments in lines,

103
00:06:35.926 --> 00:06:39.394
you will notice that I'm reusing
the arrow function syntax.

104
00:06:39.394 --> 00:06:43.488
Line 1 is the traditional
way that is written out, and

105
00:06:43.488 --> 00:06:46.698
that you will see a URL and
then the fat URL.

106
00:06:46.698 --> 00:06:49.757
Let me highlight this for
you, you'll see URL here.

107
00:06:52.026 --> 00:06:55.229
&gt;&gt; Kyle Simpson: My highlighter
will ever work, there we go.

108
00:06:55.229 --> 00:06:59.509
URL, and then the arrow, and then data,
and then an arrow, and then cb,

109
00:06:59.509 --> 00:07:04.364
and then an arrow, and then whatever the
function needs to do to do its work, okay?

110
00:07:04.364 --> 00:07:07.604
That's that three level nesting,
it's just written all in one line.

111
00:07:07.604 --> 00:07:12.478
And a lot of functional programmers
really like the arrow function syntax,

112
00:07:12.478 --> 00:07:17.354
because this arrow function syntax is
almost identical to the mathematical

113
00:07:17.354 --> 00:07:21.179
notation and the Haskell notation for
a curried function.

114
00:07:21.179 --> 00:07:23.992
That's why they love
writing it in that style.

115
00:07:23.992 --> 00:07:26.709
I am decidedly not a fan
of aero function syntax,

116
00:07:26.709 --> 00:07:30.634
which is why you haven't seen any
arrow functions on any of my slides.

117
00:07:30.634 --> 00:07:35.618
I'm not a fan of that syntax,
but if you absolutely must do

118
00:07:35.618 --> 00:07:40.417
this chained arrow currying thing,
please do line 2.

119
00:07:40.417 --> 00:07:45.381
Do a favor to the reader and at least wrap
parentheses around each function boundary.

120
00:07:45.381 --> 00:07:49.946
Just slightly more not so
crazy on the readability, okay?

121
00:07:49.946 --> 00:07:54.867
If I can't convince you not to do nested
arrow functions, please at least wrap your

122
00:07:54.867 --> 00:07:59.671
arrow functions in parentheses, your
nested arrow functions in parentheses.

123
00:07:59.671 --> 00:08:04.475
Okay, arrow functions aside,
in Javascript we can define a utility,

124
00:08:04.475 --> 00:08:08.892
and indeed all functional libraries
will provide you a utility.

125
00:08:08.892 --> 00:08:14.180
It's often called curry, sometimes they'll
have a variation of it called curry n,

126
00:08:14.180 --> 00:08:16.172
meaning how many I wanna curry.

127
00:08:16.172 --> 00:08:17.032
It looks like this.

128
00:08:17.032 --> 00:08:22.993
You call curry, you tell it how many
inputs you're expecting to receive,

129
00:08:22.993 --> 00:08:25.748
and then you provided a function.

130
00:08:25.748 --> 00:08:30.628
And notice that this function here
doesn't have to be manually curried,

131
00:08:30.628 --> 00:08:35.910
it's a regular old normal function that's
expecting some n number of inputs.

132
00:08:35.910 --> 00:08:39.900
This curry utility automatically
adapts it into being that

133
00:08:39.900 --> 00:08:43.897
unrolled thing that's going to
accept one input at a time.

134
00:08:46.767 --> 00:08:50.559
&gt;&gt; Kyle Simpson: In other words,
it creates a wrapper adapted function,

135
00:08:50.559 --> 00:08:55.563
whose job is to keep returning a new
function that expects another input,

136
00:08:55.563 --> 00:08:59.456
until you've provided
the specified number of inputs.

137
00:08:59.456 --> 00:09:04.191
And then it calls the underlying function
with all those collected inputs.

138
00:09:04.191 --> 00:09:08.253
And that gives us the ability in line
7 to call AJAX with the URL, and

139
00:09:08.253 --> 00:09:10.335
get back a getCustomer function.

140
00:09:10.335 --> 00:09:13.760
And then call getCustomer with
a data object, and get back or

141
00:09:13.760 --> 00:09:15.379
getCurrentUser function.

