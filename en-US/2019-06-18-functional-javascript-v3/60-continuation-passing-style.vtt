WEBVTT

1
00:00:00.100 --> 00:00:02.940
&gt;&gt; Kyle Simpson: Because we
know that proper tail calls

2
00:00:02.940 --> 00:00:04.990
aren't a thing that we can rely upon yet.

3
00:00:06.020 --> 00:00:09.261
We have to consider potentially
other strategies for

4
00:00:09.261 --> 00:00:14.086
writing what are essentially recursive
algorithms without having to rely upon

5
00:00:14.086 --> 00:00:17.700
that optimization of tail calls,
at least in the interim.

6
00:00:17.700 --> 00:00:21.670
And I'm gonna present to you two of these
and I'll just go ahead and tell you,

7
00:00:21.670 --> 00:00:24.616
the first of them,
you're probably never gonna write.

8
00:00:24.616 --> 00:00:28.390
But it's important for you to at least
understand that this technique exists.

9
00:00:28.390 --> 00:00:31.756
The second one is the one that
I'm gonna end up suggesting that

10
00:00:31.756 --> 00:00:33.570
you start doing today.

11
00:00:33.570 --> 00:00:36.317
Because it works now
even without tail calls.

12
00:00:36.317 --> 00:00:40.148
And it will gracefully degrade,
or I mean, it will gracefully,

13
00:00:40.148 --> 00:00:44.540
progressively enhance to nicer
recursion if we ever get tail calls.

14
00:00:44.540 --> 00:00:46.092
So the first of these is called CPS.

15
00:00:46.092 --> 00:00:50.210
It stands for
continuation-passing style, okay?

16
00:00:50.210 --> 00:00:52.550
And just so
you understand what a continuation is,

17
00:00:52.550 --> 00:00:54.120
that's essentially a call back.

18
00:00:54.120 --> 00:00:55.650
So if we say continuation passing,

19
00:00:55.650 --> 00:00:58.300
that means we're passing
some sort of a callback.

20
00:00:58.300 --> 00:01:00.450
This is the CPS style.

21
00:01:00.450 --> 00:01:04.980
You'll notice that lines 4 and
5 of our function look basically the same.

22
00:01:04.980 --> 00:01:07.530
On line 3,
we see something a little bit different,

23
00:01:07.530 --> 00:01:13.400
which is we see a variable there called
continue, cont for continuation.

24
00:01:13.400 --> 00:01:16.770
And it's defaulted to this
special function which returns

25
00:01:16.770 --> 00:01:17.970
whatever it gets back.

26
00:01:17.970 --> 00:01:22.060
That special function, by the way,
which I've only used the arrow function so

27
00:01:22.060 --> 00:01:24.860
that I can save space on the slides, okay?

28
00:01:24.860 --> 00:01:26.840
I don't actually endorse
the arrow function, but

29
00:01:26.840 --> 00:01:31.030
here, it's a nice,
clean way to save space in the slides.

30
00:01:31.030 --> 00:01:33.350
That's called the identity function.

31
00:01:33.350 --> 00:01:37.680
In functional programming speak,
a function that simply returns whatever is

32
00:01:37.680 --> 00:01:40.240
passed to it is called
the identity function.

33
00:01:40.240 --> 00:01:43.380
And it turns out to be a really,
really useful base condition for

34
00:01:43.380 --> 00:01:45.680
a bunch of things in
functional programming.

35
00:01:45.680 --> 00:01:47.550
So we're using the identity function here.

36
00:01:47.550 --> 00:01:51.385
And what I would usually do, rather than
writing an inline function expression is

37
00:01:51.385 --> 00:01:55.221
I'd refer to the identity function that
was provided to me by whatever functional

38
00:01:55.221 --> 00:01:57.130
library I was using, okay?

39
00:01:57.130 --> 00:01:59.810
So I'd say r.identity or whatever,

40
00:01:59.810 --> 00:02:02.680
and that's what I would use as my default,
okay?

41
00:02:02.680 --> 00:02:06.750
But you'll notice that it
starts out as that function.

42
00:02:06.750 --> 00:02:10.410
But then when we make the next recursive
call, we're gonna pass in a different

43
00:02:10.410 --> 00:02:14.090
inline function,
the f that you see there on line 6.

44
00:02:14.090 --> 00:02:15.660
Look at lines 4 and 5 for a moment.

45
00:02:15.660 --> 00:02:16.880
Lines 4 and

46
00:02:16.880 --> 00:02:21.400
5 look almost exactly the same as they
did in the previous implementation.

47
00:02:21.400 --> 00:02:26.510
In fact, the only difference is that
on line 5, instead of returning first,

48
00:02:26.510 --> 00:02:32.040
I'm returning the call to the continuation
callback with first passed in.

49
00:02:32.040 --> 00:02:34.080
That's the only difference
between those two lines.

50
00:02:34.080 --> 00:02:37.780
So it's not very intrusive on
your way of thinking about things

51
00:02:37.780 --> 00:02:38.810
that you need to do that.

52
00:02:38.810 --> 00:02:44.770
Where it gets intrusive is line 6,
because instead of calling count,

53
00:02:44.770 --> 00:02:47.420
I mean we are calling countVowels
directly, which is nice.

54
00:02:47.420 --> 00:02:50.670
But instead of calling it
with just a simple value or

55
00:02:50.670 --> 00:02:55.860
a simple number, we have to make a new
function to pass in for the continuation.

56
00:02:55.860 --> 00:02:59.500
And that new function continuation,
f there at the end of line 6,

57
00:02:59.500 --> 00:03:03.060
you'll notice what it does inside
of it is the same thing as line 5.

58
00:03:03.060 --> 00:03:07.735
It's gonna return a call to
whatever continuation currently is.

59
00:03:07.735 --> 00:03:11.300
Cuz we're crossed over whatever
cont was passed in and

60
00:03:11.300 --> 00:03:14.500
then we're gonna compute
the work first plus b.

61
00:03:14.500 --> 00:03:19.477
Now, all of this is tremendously complex
to like really wrap your brain around.

62
00:03:19.477 --> 00:03:23.800
This took me weeks to get to the point
where I could even remotely talk about

63
00:03:23.800 --> 00:03:29.140
that coherently so if it looks confusing
to you, that is entirely natural.

64
00:03:29.140 --> 00:03:31.630
Almost nobody ever writes CPS.

65
00:03:31.630 --> 00:03:38.155
Continuation-passing style is actually
what is usually converted code.

66
00:03:38.155 --> 00:03:41.656
Meaning you write your code in some
other way in some language, and

67
00:03:41.656 --> 00:03:45.370
it literally converts your code
to be continuation-passing style.

68
00:03:45.370 --> 00:03:48.000
So the fact that it looks
confusing is because it's

69
00:03:48.000 --> 00:03:51.260
actually normally written by
a machine not actually by you.

70
00:03:51.260 --> 00:03:54.890
But I'm showing it to you, because I want
you to understand we're gonna actually use

71
00:03:54.890 --> 00:03:57.540
something kind of like this
in the next technique, okay?

72
00:03:57.540 --> 00:03:59.060
That's the only reason I'm showing you.

73
00:03:59.060 --> 00:04:01.287
So if it's confusing,
that's entirely natural.

74
00:04:01.287 --> 00:04:05.060
It's not usually something that people
read and write themselves anyway.

75
00:04:05.060 --> 00:04:12.360
But the key to understanding what
CPS is doing, it's a cheat, okay?

76
00:04:12.360 --> 00:04:18.714
We are definitely on line 6,
making a tail call call.

77
00:04:18.714 --> 00:04:23.900
But we're not gonna experience
the range error here,

78
00:04:23.900 --> 00:04:29.790
because the function call is
wrapped up in another function.

79
00:04:29.790 --> 00:04:33.289
So we are deferring and
that's not obvious yet.

80
00:04:33.289 --> 00:04:36.968
But we're not actually gonna have a whole
bunch of functions that have all called

81
00:04:36.968 --> 00:04:39.036
each other until the very, very end, okay?

82
00:04:39.036 --> 00:04:43.200
So we're actually deferring the real
recursive call, the one that's on line 7.

83
00:04:43.200 --> 00:04:46.920
We're deferring that at each step by
creating a bigger and bigger function.

84
00:04:46.920 --> 00:04:50.770
And that's sort of cheating
the range error issue.

85
00:04:50.770 --> 00:04:53.380
But it's not actually
fixing the memory problem.

86
00:04:54.400 --> 00:04:56.700
Because every time we
create a new function,

87
00:04:56.700 --> 00:05:00.500
we have to reserve a new area of memory
not off the stack, but off of the heap.

88
00:05:01.610 --> 00:05:05.460
That's a different area of memory
that is the dynamic generation

89
00:05:05.460 --> 00:05:08.420
of stuff that gets allocated off
the heap instead of off the stack.

90
00:05:08.420 --> 00:05:11.370
So we're not actually
growing the stack here.

91
00:05:11.370 --> 00:05:13.990
But we are growing usage of the heap.

92
00:05:13.990 --> 00:05:17.750
Which means, if you were to run
a CPS-style program, theoretically,

93
00:05:17.750 --> 00:05:22.540
you'd eventually exhaust the entire system
of all its memory, and it would crash.

94
00:05:22.540 --> 00:05:27.540
And JavaScript does not have any error
in check for you exhausting the heap.

95
00:05:27.540 --> 00:05:31.600
It only has an error check in place for
you exhausting the stack.

96
00:05:31.600 --> 00:05:36.464
So the bottom line here is that
CPS is not really the solution

97
00:05:36.464 --> 00:05:38.811
that we want in JavaScript.

98
00:05:38.811 --> 00:05:41.572
Because it cheats to get
around one error and

99
00:05:41.572 --> 00:05:44.860
creates another probably worse situation,
okay?

100
00:05:45.917 --> 00:05:47.167
But it's an interesting trick.

101
00:05:47.167 --> 00:05:49.807
This is something that computer
scientists have studied, and

102
00:05:49.807 --> 00:05:50.767
have figured these things out.

103
00:05:50.767 --> 00:05:53.557
And I'm sure there's a mathematical
principle that allowed them to

104
00:05:53.557 --> 00:05:56.787
figure out if we'd defer it
with a wrapped function, and

105
00:05:56.787 --> 00:05:58.327
that gets around this problem,
or whatever.

