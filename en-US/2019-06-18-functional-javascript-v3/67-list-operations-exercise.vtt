WEBVTT

1
00:00:00.000 --> 00:00:00.652
&gt;&gt; Kyle Simpson: All right,

2
00:00:00.652 --> 00:00:04.566
let's try an exercise to practice
these list operations, actually,

3
00:00:04.566 --> 00:00:09.215
data structure operations, but these
list operations map, reduce, and filter.

4
00:00:09.215 --> 00:00:13.310
And actually this exercise is going to
include some other review of functional

5
00:00:13.310 --> 00:00:17.478
programming concepts that we've been
learning up to this point in the course.

6
00:00:17.478 --> 00:00:21.586
So we're going to get a chance to bring in
several different things like closure and

7
00:00:21.586 --> 00:00:23.067
recursion and other things.

8
00:00:23.067 --> 00:00:27.999
All right, so the set up of this exercise
is really important because if you look

9
00:00:27.999 --> 00:00:30.956
at the exercise file,
it's basically empty.

10
00:00:30.956 --> 00:00:35.713
I haven't provided you anything because
the instructions are very explicit on what

11
00:00:35.713 --> 00:00:36.522
you wanna do.

12
00:00:36.522 --> 00:00:40.981
And unlike many times where I know
the temptation is to sort of skip to

13
00:00:40.981 --> 00:00:43.577
the good parts [LAUGH] of some exercise.

14
00:00:43.577 --> 00:00:47.970
It's really important that you follow
each of these steps in order because

15
00:00:47.970 --> 00:00:52.501
they're taking you through a derivation
of problems that you need to bring in

16
00:00:52.501 --> 00:00:55.587
different concepts from our course so
far to solve.

17
00:00:55.587 --> 00:01:00.309
So starting with one, two, three and
four those are fairly straightforward.

18
00:01:00.309 --> 00:01:04.402
Item five on this list is where you're
gonna spend most of your time on this

19
00:01:04.402 --> 00:01:05.072
exercise.

20
00:01:05.072 --> 00:01:09.397
You're gonna be writing an addn
utility that uses functions

21
00:01:09.397 --> 00:01:12.882
that you've created in
items one through four.

22
00:01:12.882 --> 00:01:17.627
But this addn utility you gonna
implement it potentially multiple times.

23
00:01:17.627 --> 00:01:20.294
At a minimum, you need at least
one working implementation.

24
00:01:20.294 --> 00:01:24.170
And you can implement it with a looping
construct, like a for loop or

25
00:01:24.170 --> 00:01:24.990
a while loop.

26
00:01:24.990 --> 00:01:29.454
You could implement it
a second time using recursion.

27
00:01:29.454 --> 00:01:31.389
We talked about that a little
bit earlier in the course.

28
00:01:31.389 --> 00:01:34.447
You could use recursion to implement this.

29
00:01:34.447 --> 00:01:38.469
And still, a third time, and
this is really the important one for

30
00:01:38.469 --> 00:01:43.021
this particular exercise, you can
use a functional helper like reduce.

31
00:01:43.021 --> 00:01:47.381
So at a minimum, I want you to implement
it at least one time, try your hand at

32
00:01:47.381 --> 00:01:51.485
maybe two or three times and definitely
at least try it with the reduce.

33
00:01:51.485 --> 00:01:54.937
So you'll spend a pretty good significant
chunk of time trying to get the addn

34
00:01:54.937 --> 00:01:56.063
function to work there.

35
00:01:56.063 --> 00:02:00.070
Another little hint, it's not here in the
read me, but I just wanna point this out.

36
00:02:00.070 --> 00:02:03.008
What you're gonna be doing is
dealing with functions all-over, and

37
00:02:03.008 --> 00:02:06.211
that shouldn't be surprising,
this is a functional programming course.

38
00:02:06.211 --> 00:02:10.850
But there's a temptation to want to
eagerly reduce everything back to

39
00:02:10.850 --> 00:02:12.115
concrete values.

40
00:02:12.115 --> 00:02:16.992
And the temptation to eagerly reduce these
partial sums back to concrete values is

41
00:02:16.992 --> 00:02:21.599
gonna lead you into a much more awkward,
and less performing solution here.

42
00:02:21.599 --> 00:02:25.114
So think about what we've talked about so
far in this course.

43
00:02:25.114 --> 00:02:29.394
The idea of deferring work by having
things wrapped up in functions.

44
00:02:29.394 --> 00:02:34.075
The deferral of work till the end
is actually the clue of how to get

45
00:02:34.075 --> 00:02:37.290
a much better solution
to the addn problem.

46
00:02:37.290 --> 00:02:40.866
And that's true regardless of which
of the three implementations that you

47
00:02:40.866 --> 00:02:41.668
choose, okay?

48
00:02:41.668 --> 00:02:44.553
So just keep that in mind,
the idea of deferring work,

49
00:02:44.553 --> 00:02:46.638
deferring the addn until a later time.

50
00:02:46.638 --> 00:02:52.451
Keep everything at the function realm and
the solution will end up a lot easier.

51
00:02:52.451 --> 00:02:54.578
But that's not the end of the exercise.

52
00:02:54.578 --> 00:02:57.191
They're still items six,
seven and eight to go through.

53
00:02:57.191 --> 00:02:59.901
That's where you're going to, again,

54
00:02:59.901 --> 00:03:05.253
get more practice with our list operations
like our filter our map and our reduce.

55
00:03:05.253 --> 00:03:09.368
Okay, so you should allow a pretty good
chunk of time to work on this exercise.

56
00:03:09.368 --> 00:03:10.525
It is challenging.

57
00:03:10.525 --> 00:03:14.247
It is bringing in not only the concepts
from this unit of discussion, but

58
00:03:14.247 --> 00:03:17.493
also many of the things that
we've covered up unto this point.

59
00:03:17.493 --> 00:03:19.243
And so
you really want to take your time and

60
00:03:19.243 --> 00:03:21.501
make sure you're getting
all of those pieces right.

61
00:03:21.501 --> 00:03:24.490
Take definitely a good chunk of
time to work on this exercise.

