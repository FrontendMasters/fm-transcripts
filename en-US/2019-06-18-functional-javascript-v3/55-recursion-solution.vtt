WEBVTT

1
00:00:00.320 --> 00:00:05.040
&gt;&gt; Kyle Simpson: Okay, let's talk about
the solution to the recursion exercise.

2
00:00:06.480 --> 00:00:09.950
If it helps,
you might have wanted to try it

3
00:00:09.950 --> 00:00:13.850
iteratively first just to wrap your head
around it, but the hint in the read me

4
00:00:13.850 --> 00:00:18.540
really was designed to help you skip
right to thinking about the isPalindrome.

5
00:00:18.540 --> 00:00:21.430
As we said in the lecture
just a little while ago,

6
00:00:21.430 --> 00:00:25.180
there are various different strategies for
solving things recursively, and

7
00:00:25.180 --> 00:00:30.510
one of those strategies, a very common
strategy, is solve the sub-problem.

8
00:00:30.510 --> 00:00:35.530
Reduce the problem set by one or
more, and solve the sub-problem, so

9
00:00:35.530 --> 00:00:40.806
that's what's hinted at here,
is that the question of if an arbitrarily

10
00:00:40.806 --> 00:00:45.341
long string is a palindrome can
be formulated recursively as.

11
00:00:45.341 --> 00:00:50.213
It is a palindrome if both of
these things are true, number one,

12
00:00:50.213 --> 00:00:55.085
the first in the last letter of
any given string have to be equal,

13
00:00:55.085 --> 00:00:58.900
and everything in between
has to be a palindrome.

14
00:01:00.840 --> 00:01:06.251
So if you think about
this string the abcdcba,

15
00:01:06.251 --> 00:01:10.880
the a and the a are equal, and

16
00:01:10.880 --> 00:01:16.710
if we look only at bcdcb,
that is also a palindrome.

17
00:01:16.710 --> 00:01:20.155
So a recursive definition for
a palindrome is that the first and

18
00:01:20.155 --> 00:01:24.320
the last letter are equal, and everything
in between is also a palindrome.

19
00:01:24.320 --> 00:01:27.769
And of course you answer that by doing
the exact same thing, comparing the b and

20
00:01:27.769 --> 00:01:30.300
the b and
everything in between is a palindrome.

21
00:01:30.300 --> 00:01:34.910
So that hints out at how we would
approach the recursive solution.

22
00:01:34.910 --> 00:01:37.690
Let's take in a string for
our isPalindrome, and

23
00:01:37.690 --> 00:01:42.010
let's consider our base condition, how
do we know what our base conditions are?

24
00:01:42.010 --> 00:01:46.260
Well, I hinted at those here, I said, both
an empty string and the single character

25
00:01:46.260 --> 00:01:50.476
string are in fact palindromes,
just by definition they're palindromes.

26
00:01:50.476 --> 00:01:57.100
So, if str.length is less than or

27
00:01:57.100 --> 00:02:04.830
equal to 1, then we know we have
a palindrome, that's a base condition.

28
00:02:06.250 --> 00:02:11.112
Now, if we are in a length that is 2 or
greater,

29
00:02:11.112 --> 00:02:16.957
then we know we need to do
some comparison of characters.

30
00:02:16.957 --> 00:02:20.112
So the way to look at those characters,

31
00:02:20.112 --> 00:02:25.275
we'll set up the first variable,
we'll look at strings of 0,

32
00:02:25.275 --> 00:02:30.262
and the last variable will
look at str[str.length-1].

33
00:02:30.262 --> 00:02:32.660
So we'll access the first and
the last character.

34
00:02:34.170 --> 00:02:36.320
And we need to check to make
sure that those are equal.

35
00:02:36.320 --> 00:02:38.420
So if those two are equal,

36
00:02:38.420 --> 00:02:43.010
if (first === last),
then we know we have more work to do.

37
00:02:43.010 --> 00:02:45.149
But if first doesn't equal last,

38
00:02:46.390 --> 00:02:50.390
then we definitely don't have
a palindrome, so we can return false.

39
00:02:53.184 --> 00:02:55.956
&gt;&gt; Kyle Simpson: If the first does
equal last, then we want to solve

40
00:02:55.956 --> 00:03:00.314
the sub-problem which is, the stuff in
between is that a palindrome, even if

41
00:03:00.314 --> 00:03:05.340
there's nothing in between, we still have
that question of, is it a palindrome.

42
00:03:05.340 --> 00:03:11.365
So we can simply call
isPalindrome with a substring,

43
00:03:11.365 --> 00:03:17.490
(str.substring), and
that takes in two indices.

44
00:03:17.490 --> 00:03:22.847
We want the substring from
position one to the position

45
00:03:22.847 --> 00:03:27.160
non-inclusive of (str.length-1).

46
00:03:27.160 --> 00:03:33.001
Checking the documentation on substring in
all languages that there's a substring,

47
00:03:33.001 --> 00:03:36.602
it always goes non-inclusive
to the final index, so

48
00:03:36.602 --> 00:03:39.740
that's why we say -1 instead of -2 there.

49
00:03:39.740 --> 00:03:42.380
So this is gonna get
that smaller substring,

50
00:03:42.380 --> 00:03:47.210
which in the case in the read
me would have been the bcdb,

51
00:03:47.210 --> 00:03:50.340
it's gonna get that substring and
it's gonna ask, is that a palindrome?

52
00:03:50.340 --> 00:03:51.940
And then so on and so on.

53
00:03:51.940 --> 00:03:59.560
&gt;&gt; Student: Why is that not the 1, after
the substring the 1, why is that not a 0?

54
00:03:59.560 --> 00:04:00.770
Wouldn't you want.

55
00:04:00.770 --> 00:04:03.955
&gt;&gt; Kyle Simpson: We want, because it's
inclusive on the left hand side and

56
00:04:03.955 --> 00:04:06.430
non-inclusive on the right hand side.

57
00:04:06.430 --> 00:04:08.870
We wanna start at position 1,
not at position 0,

58
00:04:08.870 --> 00:04:10.910
we've already looked at position 0.

59
00:04:10.910 --> 00:04:12.729
&gt;&gt; Student: Okay.

60
00:04:12.729 --> 00:04:15.180
&gt;&gt; Kyle Simpson: Remember,
we've trimmed off two characters here.

61
00:04:15.180 --> 00:04:16.990
We've trimmed off this character and
this character, and

62
00:04:16.990 --> 00:04:18.150
we wanna look at everything in between.

63
00:04:18.150 --> 00:04:20.950
&gt;&gt; Student: But it still knows that spot
is 1, even though you've changed it.

64
00:04:20.950 --> 00:04:22.730
&gt;&gt; Kyle Simpson: We didn't
change the string yet.

65
00:04:22.730 --> 00:04:23.820
&gt;&gt; Student: Okay.
&gt;&gt; Kyle Simpson: We just looked at it,

66
00:04:23.820 --> 00:04:25.360
we said string sub 0.

67
00:04:25.360 --> 00:04:25.930
&gt;&gt; Student: Okay.
&gt;&gt; Kyle Simpson: And

68
00:04:25.930 --> 00:04:30.030
then substring is actually getting
a subset of those characters, still not

69
00:04:30.030 --> 00:04:33.755
modifying the string, remember a string
is immutable, it's not gonna change.

70
00:04:35.410 --> 00:04:40.110
So we'll just do a quick check to make
sure I didn't make a mistake here.

71
00:04:40.110 --> 00:04:43.160
We'll run this code and
we should see all of our test cases pass.

72
00:04:44.540 --> 00:04:45.629
And we see them pass.

73
00:04:46.720 --> 00:04:51.020
And so, we pass the job interview,
and hopefully got the job.

