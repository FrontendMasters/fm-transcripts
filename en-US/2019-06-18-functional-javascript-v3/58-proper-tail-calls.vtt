WEBVTT

1
00:00:00.020 --> 00:00:03.673
&gt;&gt; Kyle Simpson: So
we have traditionally allowed a wide

2
00:00:03.673 --> 00:00:07.886
berth of choice in terms
of implementation.

3
00:00:07.886 --> 00:00:12.683
And if the JavaScript specification steps
in and says, you absolutely must throw

4
00:00:12.683 --> 00:00:17.617
away stack frames and allow 0(1) memory
usage, all of the sudden that now starts

5
00:00:17.617 --> 00:00:21.390
to really encroach upon the space
of these JavaScript engines.

6
00:00:21.390 --> 00:00:25.888
Because there's almost nothing that
JavaScript engines do that is more

7
00:00:25.888 --> 00:00:30.029
intensive, from a resource perspective,
than function calls.

8
00:00:30.029 --> 00:00:33.439
So we're really mucking at the very lowest
levels of the stuff that they're doing in

9
00:00:33.439 --> 00:00:35.470
their memory and
their optimizations and stuff.

10
00:00:35.470 --> 00:00:39.717
We're really reaching far into their
normal realm and saying, no, no,

11
00:00:39.717 --> 00:00:42.400
you have to do it in some
specific kind of a way.

12
00:00:42.400 --> 00:00:46.452
So there has been significant pushback
from JavaScript engines over the years to

13
00:00:46.452 --> 00:00:50.636
say we don't want tail calls, we don't
even think people care about it that much.

14
00:00:50.636 --> 00:00:55.288
I've had conversations with developers
at Microsoft, for example, that told me,

15
00:00:55.288 --> 00:00:59.112
well, nobody uses recursion so
why would we implement that feature?

16
00:00:59.112 --> 00:01:02.974
And my response was, nobody uses the
feature cuz you haven't implemented it,

17
00:01:02.974 --> 00:01:06.156
and they say well nobody uses it so
we're not gonna implement it.

18
00:01:06.156 --> 00:01:08.754
You can see the problem here,
right, the catch 22.

19
00:01:08.754 --> 00:01:12.277
They don't want to implement something
that's hard to implement unless

20
00:01:12.277 --> 00:01:16.101
people wanna use it and nobody wants to
use it cuz it's not even possible to use.

21
00:01:16.101 --> 00:01:17.564
How are we supposed to
resolve this problems?

22
00:01:17.564 --> 00:01:19.928
So I've been fighting
actually this battle for

23
00:01:19.928 --> 00:01:23.131
a long time trying to convince
them please do this sort of thing.

24
00:01:23.131 --> 00:01:27.917
Well, there's a proposal that came in ES6,
this was back in 2014,

25
00:01:27.917 --> 00:01:29.932
2015, when ES6 landed.

26
00:01:29.932 --> 00:01:32.032
There's a proposal that said,

27
00:01:32.032 --> 00:01:37.010
let's finally standardize that JavaScript
engines have to do tail calls,

28
00:01:37.010 --> 00:01:41.927
specifically we called them proper
tail calls, PTC as it's referred to.

29
00:01:41.927 --> 00:01:46.530
Now, just a quick note, there is
a related term that if you do some

30
00:01:46.530 --> 00:01:51.582
Googling you gonna see TCO,
which stands for tail call optimization.

31
00:01:51.582 --> 00:01:55.116
This is different and for a long time
I actually thought they were basically

32
00:01:55.116 --> 00:01:56.925
the same thing, they are different.

33
00:01:56.925 --> 00:02:02.012
So let's make sure we're clear,
proper tail calls are the idea that a tail

34
00:02:02.012 --> 00:02:07.681
call gets memory optimized, that we
only use 0(1) memory space essentially.

35
00:02:07.681 --> 00:02:13.466
PTO, I'm sorry TCO tail call optimization,
too many acronyms,

36
00:02:13.466 --> 00:02:19.254
TCO tail call optimization is
a family of potential optimizations

37
00:02:19.254 --> 00:02:25.896
on top of PTC which are optional that
an engine may decide that it wants to do.

38
00:02:25.896 --> 00:02:28.759
For example,
it may decide to throw away old memory,

39
00:02:28.759 --> 00:02:31.623
it may decide to garbage
collect old stack frames, or

40
00:02:31.623 --> 00:02:35.712
it may decide to reuse a stack frame and
grow its memory usage, or whatever.

41
00:02:35.712 --> 00:02:39.452
Those are this whole other family
of low level optimizations that

42
00:02:39.452 --> 00:02:43.266
essentially have absolutely no
bearing on the JavaScript world.

43
00:02:43.266 --> 00:02:45.705
They matter to JavaScript
engine developers but

44
00:02:45.705 --> 00:02:47.375
they don't matter to us, okay.

45
00:02:47.375 --> 00:02:52.442
The only thing that matters to us is,
is PTC in the language or not?

46
00:02:52.442 --> 00:02:55.234
Do we either get that
members of optimization and

47
00:02:55.234 --> 00:02:57.215
eliminate the range error or not?

48
00:02:57.215 --> 00:03:01.993
So the proposal was let's
standardize proper tail calls and

49
00:03:01.993 --> 00:03:06.584
the language in the spec was
deliberately a bit more open to

50
00:03:06.584 --> 00:03:11.550
essentially say we're not gonna
require specific TCOs we're

51
00:03:11.550 --> 00:03:15.859
just gonna generally say that
it should be possible for

52
00:03:15.859 --> 00:03:21.498
a function in a tail call position to
be able to not take up extra memory.

53
00:03:21.498 --> 00:03:25.438
The language is more formal than that but
it's essentially a bit gray area-ish,

54
00:03:25.438 --> 00:03:29.338
it's not very fine grained like you have
to do the memory in this particular way.

55
00:03:29.338 --> 00:03:33.997
So the proposal was
discussed at TC39 at length

56
00:03:33.997 --> 00:03:38.995
over a period of months,
and sometime in 2014,

57
00:03:38.995 --> 00:03:43.311
or 2015, they voted, that is TC39 and

58
00:03:43.311 --> 00:03:49.108
that was present all members
of all the JavaScript engines,

59
00:03:49.108 --> 00:03:53.084
they voted to say yes, let's go ahead and

60
00:03:53.084 --> 00:03:57.774
include proper tail calls
in the ES6 standard.

61
00:03:57.774 --> 00:04:01.626
So here's what PTC was
standardized on in ES6.

62
00:04:01.626 --> 00:04:04.668
Number one,
you have to have strict mode on.

63
00:04:04.668 --> 00:04:09.041
It's not going to work if you're in the
non-strict mode, sometimes referred to as

64
00:04:09.041 --> 00:04:12.504
sloppy mode, you have to opt in to
strict mode to be able to do this.

65
00:04:12.504 --> 00:04:16.284
By the way, you should already be using
strict mode in all of your programs,

66
00:04:16.284 --> 00:04:20.004
if you're not, it's time to adopt that
cuz that's been around and out for

67
00:04:20.004 --> 00:04:21.202
literally 10 years.

68
00:04:21.202 --> 00:04:22.370
So what are you waiting for?

69
00:04:22.370 --> 00:04:24.429
[LAUGH] Let's get on
the boat with strict mode.

70
00:04:24.429 --> 00:04:31.549
But you have to be in strict mode to be
able to take advantage of tail calls.

71
00:04:31.549 --> 00:04:37.075
Then you have to have your function call
in what is called a proper tail position,

72
00:04:37.075 --> 00:04:39.199
it has to be a proper tail call.

73
00:04:39.199 --> 00:04:44.383
Now, the function call that you see here
is in a proper tail position because

74
00:04:44.383 --> 00:04:49.648
even though there's an x and 1, and
we could even do stuff in the arguments,

75
00:04:49.648 --> 00:04:54.508
what you'll note is that nothing has
to happen after that function call

76
00:04:54.508 --> 00:04:59.788
finishes except for its value to be
returned, that's a tail call position.

77
00:04:59.788 --> 00:05:04.939
It is notable that without the return
keyword it is not a proper tail call,

78
00:05:04.939 --> 00:05:07.763
even if it's at the end of the function,

79
00:05:07.763 --> 00:05:12.685
it's not a proper tail call unless
there's a return keyword, okay.

80
00:05:12.685 --> 00:05:16.477
Proper tail calls require a return
keyword and a single function call, and

81
00:05:16.477 --> 00:05:20.105
nothing else in that expression that
needs to be computed afterwards.

82
00:05:20.105 --> 00:05:23.720
There's a slight little
grammatical nuance there which is,

83
00:05:23.720 --> 00:05:28.585
if you have a ternary expression on your
return statement, and the function call is

84
00:05:28.585 --> 00:05:33.381
in one of the branches that's a tail call,
because nothing else is gonna happen,

85
00:05:33.381 --> 00:05:37.297
the ternary precomputes and
then picks one of the function calls.

86
00:05:37.297 --> 00:05:40.231
So that even though it didn't look
like a tail call that technically is.

87
00:05:40.231 --> 00:05:44.006
But otherwise, generally speaking,
the pattern is you're gonna see return and

88
00:05:44.006 --> 00:05:45.756
then a function call and that's it and

89
00:05:45.756 --> 00:05:48.180
that's gonna mean that it
qualifies as a tail call.

90
00:05:48.180 --> 00:05:50.297
This has nothing to do with recursion.

91
00:05:50.297 --> 00:05:55.462
This is just it's a proper tail call and
the spec then says that the JavaScript

92
00:05:55.462 --> 00:06:00.389
engine has to make sure that no matter
how deep that chain of function calls

93
00:06:00.389 --> 00:06:05.325
gets you won't get a range error,
it won't run the system out of memory.

94
00:06:05.325 --> 00:06:10.591
Of course we're normally gonna see this
in the context of things like recursion,

95
00:06:10.591 --> 00:06:15.171
like this function here which keeps
dividing a number and calling it for

96
00:06:15.171 --> 00:06:19.398
several times and those calls to
diminish are proper tail calls.

97
00:06:19.398 --> 00:06:23.173
Even though there's math that's happening
inside of there the Math.trunc and

98
00:06:23.173 --> 00:06:25.683
the x divided by two 2,
those are proper tail calls.

99
00:06:25.683 --> 00:06:31.087
Notably, Math.trunc is not a proper tail
call cuz there isn't a return before it,

100
00:06:31.087 --> 00:06:36.034
but it's okay, because Math.trunc
doesn't call any further functions,

101
00:06:36.034 --> 00:06:39.781
so it's not contributing to
the growth of the call stack.

102
00:06:39.781 --> 00:06:43.751
The thing that would contribute to the
growth of the call stack is the call to

103
00:06:43.751 --> 00:06:46.722
diminish and that one is in
a proper tail call position.

104
00:06:46.722 --> 00:06:50.538
So theoretically we should never
have a growth of that stack and

105
00:06:50.538 --> 00:06:55.506
therefore we should not ever have a range
error memory no matter how many times that

106
00:06:55.506 --> 00:06:56.663
had to run, okay.

107
00:06:56.663 --> 00:07:00.750
&gt;&gt; Speaker 2: What would happen if instead
of Math.trunc we had another function that

108
00:07:00.750 --> 00:07:02.227
calls another function?

109
00:07:02.227 --> 00:07:03.229
Like something else-
&gt;&gt; Kyle Simpson: That would not, yeah,

110
00:07:03.229 --> 00:07:03.990
that's a great question.

111
00:07:03.990 --> 00:07:07.440
So if that was a call that would
contribute to the growth of the call

112
00:07:07.440 --> 00:07:11.774
stack, like if we're calling another
function that called another function and

113
00:07:11.774 --> 00:07:15.794
created its own call stack growth,
then that would definitely potentially

114
00:07:15.794 --> 00:07:18.534
grow the stock eventually
to create a range error.

115
00:07:18.534 --> 00:07:23.699
So you only get the benefits of removal of
stack frame from a conceptual perspective,

116
00:07:23.699 --> 00:07:26.870
if the function calls are all
in tail call position.

117
00:07:26.870 --> 00:07:29.189
So if you have some that are not and
some that are,

118
00:07:29.189 --> 00:07:31.622
you're getting the benefit
of the ones that are and

119
00:07:31.622 --> 00:07:34.805
not the benefit from the ones that aren't,
so basic bottom line.

120
00:07:34.805 --> 00:07:37.979
So you do want to try to arrange
everything to be in tail all position

121
00:07:37.979 --> 00:07:39.974
if you're expecting for that to happen.

122
00:07:39.974 --> 00:07:44.872
If you're in that fortunate position
where you're writing only for

123
00:07:44.872 --> 00:07:48.424
Safari then you can take
advantage of this today.

124
00:07:48.424 --> 00:07:51.578
And hopefully some day you're gonna be
able to take advantage of this across all

125
00:07:51.578 --> 00:07:52.390
of the JavaScript.

