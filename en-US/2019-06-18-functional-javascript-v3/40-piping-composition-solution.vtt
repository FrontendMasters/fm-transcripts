WEBVTT

1
00:00:00.150 --> 00:00:03.900
&gt;&gt; Kyle Simpson: Okay, let's talk
about the exercise on composition.

2
00:00:05.420 --> 00:00:10.660
We could either implement compose and
then pipe in terms of compose or reverse.

3
00:00:10.660 --> 00:00:15.640
I'm actually gonna do the reverse and
the reason is purely for simplicity.

4
00:00:15.640 --> 00:00:20.300
Because pipe goes left to right, I can
use a very convenient for loop for that.

5
00:00:20.300 --> 00:00:23.570
But there are lots of ways to
implement either compose or pipe,

6
00:00:23.570 --> 00:00:27.790
you could have used reduce or
reduce right or other utilities like that.

7
00:00:27.790 --> 00:00:29.750
I'm just gonna use a simple for loop.

8
00:00:29.750 --> 00:00:34.126
So, pipe is going to take
in a list of functions.

9
00:00:34.126 --> 00:00:38.770
And I'm gonna gather those
up into an array called fns,

10
00:00:38.770 --> 00:00:44.270
which stands for functions and
it needs to return back a new function.

11
00:00:44.270 --> 00:00:48.530
That was piped, and that is going
to receive a single input value

12
00:00:49.650 --> 00:00:51.495
that it passes along to the first one.

13
00:00:51.495 --> 00:00:56.701
Now, my strategy here is to be able
to handle any number of functions,

14
00:00:56.701 --> 00:01:00.321
essentially I want to call
the first function and

15
00:01:00.321 --> 00:01:03.252
then whatever it returns, save that.

16
00:01:03.252 --> 00:01:06.709
And if there's another function,
that becomes the input and

17
00:01:06.709 --> 00:01:08.046
then save that output.

18
00:01:08.046 --> 00:01:11.054
And then just keep doing that until
there's no more functions, and

19
00:01:11.054 --> 00:01:12.580
then I have my output.

20
00:01:12.580 --> 00:01:17.490
So I'm just gonna set up a simple for
loop, let fn of fns,

21
00:01:19.340 --> 00:01:25.250
and I'm going to say,
v = fn, passing in v.

22
00:01:26.340 --> 00:01:29.840
So in other words,
take the current input, whatever it is.

23
00:01:29.840 --> 00:01:33.400
Pass it into the current function,
and capture that output.

24
00:01:33.400 --> 00:01:35.240
And then iterate the loop again.

25
00:01:35.240 --> 00:01:38.190
If there's another function,
do that again, and again, and again.

26
00:01:38.190 --> 00:01:40.384
And at the very end, return v.

27
00:01:42.976 --> 00:01:46.880
&gt;&gt; Kyle Simpson: That should
handle any number of functions.

28
00:01:46.880 --> 00:01:49.010
To implement the compose function,

29
00:01:50.040 --> 00:01:55.010
I gather all of the functions
into an array called fns.

30
00:01:55.010 --> 00:02:01.900
And I need to pass fns to pipe but
I need to reverse the order.

31
00:02:01.900 --> 00:02:07.749
So I'm gonna say return pipe, I'm gonna
pass in fns that has been reversed.

32
00:02:07.749 --> 00:02:10.121
I'll spread fns that has been reversed.

33
00:02:10.121 --> 00:02:11.854
Yes?

34
00:02:11.854 --> 00:02:15.710
&gt;&gt; Speaker 2: What if we started
with compose instead of pipe?

35
00:02:15.710 --> 00:02:19.500
&gt;&gt; Kyle Simpson: You can start with
compose, it's just a little less

36
00:02:19.500 --> 00:02:24.020
clean because your for of loop,
if you choose to use a loop,

37
00:02:24.020 --> 00:02:27.773
needs to loop over the reverse of
the arrays rather than the array itself.

38
00:02:29.020 --> 00:02:31.600
All right,
let's test this just to make sure.

39
00:02:36.450 --> 00:02:37.566
&gt;&gt; Kyle Simpson: And we get all trues.

