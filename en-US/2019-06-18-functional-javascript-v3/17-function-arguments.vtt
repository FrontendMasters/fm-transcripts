WEBVTT

1
00:00:00.160 --> 00:00:02.020
&gt;&gt; Kyle Simpson: Okay,
let's shift our attention,

2
00:00:02.020 --> 00:00:05.680
we're still talking about functions but,
let's shift our attention specifically

3
00:00:05.680 --> 00:00:09.370
to the arguments,
the parameters that functions receive.

4
00:00:09.370 --> 00:00:11.660
And by the way just clear
up some terminology.

5
00:00:12.700 --> 00:00:15.830
Parameter and
argument are often used interchangeably.

6
00:00:15.830 --> 00:00:17.210
They are technically different.

7
00:00:18.630 --> 00:00:21.230
The generally accepted definition here

8
00:00:21.230 --> 00:00:25.250
is that a parameter is the thing
in the function definition.

9
00:00:25.250 --> 00:00:30.050
Like if I say function, add number,
and then I have x and y, the x and

10
00:00:30.050 --> 00:00:32.860
the y are parameters.

11
00:00:34.140 --> 00:00:35.580
What is an argument then?

12
00:00:35.580 --> 00:00:39.920
That's the value that gets passed
in when you call the function.

13
00:00:39.920 --> 00:00:42.560
So if I later say add number 3,
4, the 3 and

14
00:00:43.930 --> 00:00:50.080
the 4 are the arguments that get assigned
to the parameters x and y, respectively.

15
00:00:50.080 --> 00:00:52.950
Arguments get assigned to parameters.

16
00:00:52.950 --> 00:00:54.820
So when I use arguments here,

17
00:00:54.820 --> 00:00:57.210
I'm referring to the things
that are being passed in.

18
00:00:57.210 --> 00:01:02.060
But we also are encompassing in that
umbrella the parameters that they get

19
00:01:02.060 --> 00:01:05.940
assigned to, we're talking about
the inputs to the function.

20
00:01:07.020 --> 00:01:10.604
We wanna look at the nature of
the inputs of those functions.

21
00:01:10.604 --> 00:01:15.130
All right, so
if I have a function called increment,

22
00:01:15.130 --> 00:01:19.770
that takes a single input value,
in this case x, and

23
00:01:19.770 --> 00:01:24.670
it returns a value back, and
in this case it's the sum of x and y.

24
00:01:24.670 --> 00:01:29.630
There's a special term to
describe that shape of function.

25
00:01:29.630 --> 00:01:33.050
And I'm gonna use this idea of shape
throughout the rest of this course, okay?

26
00:01:33.050 --> 00:01:37.690
And I want you to understand I could be
talking about things that are much more

27
00:01:37.690 --> 00:01:41.650
formal like type definitions, but
I don't think that's useful for us.

28
00:01:41.650 --> 00:01:48.700
So I'm gonna use more informal language
here to describe the shape of a function.

29
00:01:48.700 --> 00:01:51.590
Okay, and
here's what the shape of a function is.

30
00:01:51.590 --> 00:01:57.820
The number and the kinds of things you
pass into it, as well as the number and

31
00:01:57.820 --> 00:02:02.730
the kinds of things that come out of it,
that's the shape of a function.

32
00:02:02.730 --> 00:02:05.530
We're being less formal than

33
00:02:05.530 --> 00:02:08.820
restricting ourselves to
particular type language, okay.

34
00:02:08.820 --> 00:02:11.960
We'll talk about type signatures.

35
00:02:11.960 --> 00:02:16.050
So the shape of a function that takes
a single value in and gives us a single

36
00:02:16.050 --> 00:02:19.819
value out, that shape has a special
kind of name we call a unary function.

37
00:02:23.420 --> 00:02:26.960
And if we look on line seven
at a function called sum,

38
00:02:26.960 --> 00:02:31.020
that takes an x and a y,
as x and y formal parameters.

39
00:02:31.020 --> 00:02:35.360
That takes two inputs, so the shape of
that function is a little different.

40
00:02:35.360 --> 00:02:40.984
It takes two inputs, still returns one
output, we call that a binary function.

41
00:02:43.008 --> 00:02:45.090
&gt;&gt; Kyle Simpson: So
we have terms unary and binary.

42
00:02:45.090 --> 00:02:48.590
They could sound scary, but
they're actually pretty straightforward.

43
00:02:48.590 --> 00:02:53.360
They're just describing the shape of
the input signature, if you will.

44
00:02:53.360 --> 00:02:55.746
What do we expect to be able to pass in,
and importantly,

45
00:02:55.746 --> 00:02:57.357
what do we expect to be able to get out?

46
00:02:59.997 --> 00:03:04.670
&gt;&gt; Kyle Simpson: And it turns out that
the shape of functions is super critical.

47
00:03:04.670 --> 00:03:08.570
The functional programmer is almost
obsessed with the shape of functions.

48
00:03:09.880 --> 00:03:13.690
Very similar to if you were playing with a
set of Legos, and you were trying to build

49
00:03:13.690 --> 00:03:17.410
up a model, it would matter if this piece
fit on top of this piece, wouldn't it?

50
00:03:18.460 --> 00:03:21.350
If they didn't fit,
you couldn't use them together.

51
00:03:22.880 --> 00:03:25.840
So if I have a bunch of
functions in my application.

52
00:03:25.840 --> 00:03:32.100
And their shapes are not compatible,
they don't fit like Lego pieces don't fit,

53
00:03:32.100 --> 00:03:33.620
then they're not gonna work together,
are they?

54
00:03:35.140 --> 00:03:38.260
The shapes of our functions matter,
and it matters so

55
00:03:38.260 --> 00:03:42.340
much that in the authoring of our
functions, we're constantly thinking,

56
00:03:42.340 --> 00:03:46.464
what is this shape going to
imply to my future usage of it?

57
00:03:46.464 --> 00:03:51.320
Am I gonna restrict myself to
only using it in certain cases,

58
00:03:51.320 --> 00:03:52.080
if it looks like this?

59
00:03:54.900 --> 00:03:59.190
For functions that we are in control of,
we want to care about the shape.

60
00:03:59.190 --> 00:04:04.230
When I say in control, I mean, we get to
decide the design of the function like

61
00:04:04.230 --> 00:04:07.660
what it's called and
what it takes and what it returns.

62
00:04:07.660 --> 00:04:13.516
For functions that we decide we want
to be very cognizant of that chain and

63
00:04:13.516 --> 00:04:19.440
what it will imply, what it will create
as an effect when it's being used.

64
00:04:21.020 --> 00:04:23.320
For reasons that you won't
fully understand now but

65
00:04:23.320 --> 00:04:26.269
you will begin to get
as we go further along,

66
00:04:27.480 --> 00:04:31.680
functional programmers tend
to prefer unary functions.

67
00:04:31.680 --> 00:04:33.380
Single input, single output.

68
00:04:35.060 --> 00:04:39.240
And their next favorite kind of
function is a binary function,

69
00:04:39.240 --> 00:04:40.680
two inputs single output.

70
00:04:43.620 --> 00:04:48.450
And I'd say probably 95,
98% of all functions you'll ever

71
00:04:48.450 --> 00:04:53.060
see in a good functional program
will be of one of those two sorts.

72
00:04:53.060 --> 00:04:55.330
It's probably like 70,
30 unary versus binary.

73
00:04:56.620 --> 00:04:59.130
There is a term to describe
all of the other functions,

74
00:04:59.130 --> 00:05:03.270
those miscellaneous ones that take 3,
4, 10, 20, whatever.

75
00:05:03.270 --> 00:05:05.890
We call those enary functions.

76
00:05:05.890 --> 00:05:11.610
They're vastly less common because the
more inputs a function has, the harder it

77
00:05:11.610 --> 00:05:15.790
is to make it work with other functions,
harder is to get the shapes to fit.

