WEBVTT

1
00:00:00.000 --> 00:00:03.796
&gt;&gt; Kyle Simpson: At the beginning of this
unit, I mentioned that we were gonna use

2
00:00:03.796 --> 00:00:07.470
arrays, lists as a way to
illustrate a lot of these concepts.

3
00:00:07.470 --> 00:00:09.220
And we have, we've used a lot of arrays.

4
00:00:09.220 --> 00:00:10.837
We've done a bunch of
that in the exercise.

5
00:00:10.837 --> 00:00:14.625
But we really want to generalize
everything that we've been talking about

6
00:00:14.625 --> 00:00:17.730
to the idea of any collection
to any data structure.

7
00:00:17.730 --> 00:00:21.091
So we're gonna now take those
same ideas of map, filter, and

8
00:00:21.091 --> 00:00:24.857
reduce, and, in fact,
indeed even something like a transducing.

9
00:00:24.857 --> 00:00:26.413
We wanna take map, filter, and reduce.

10
00:00:26.413 --> 00:00:28.862
And we wanna think about
them at the bigger level,

11
00:00:28.862 --> 00:00:32.890
which would be at the data structure
level or at the more general level.

12
00:00:32.890 --> 00:00:37.830
So if I had an object, like obj here
at the top, and I wanted to map

13
00:00:37.830 --> 00:00:42.649
over that object and do something, in this
case, make all of the values lowercase.

14
00:00:43.680 --> 00:00:47.800
Then I can define a map object function,
which is similar to the map

15
00:00:47.800 --> 00:00:51.620
that we know that works with arrays,
but this one works with objects.

16
00:00:51.620 --> 00:00:54.710
And this one loops over all
of the keys in an object.

17
00:00:54.710 --> 00:00:56.552
And it calls some mapper function.

18
00:00:56.552 --> 00:01:00.870
In this case, that mapper function
makes everything to lowercase.

19
00:01:01.900 --> 00:01:06.676
So thinking about mapping as an operation
where we are essentially lifting

20
00:01:06.676 --> 00:01:07.827
a value or adapt.

21
00:01:07.827 --> 00:01:11.034
I'm sorry, lifting an operation or

22
00:01:11.034 --> 00:01:17.250
adapting an operation across all of
the values in a container, right?

23
00:01:17.250 --> 00:01:18.830
So it could be an array.

24
00:01:18.830 --> 00:01:22.260
It could be an object like here,
where we're just doing the keys.

25
00:01:22.260 --> 00:01:24.107
It could be a binary tree.

26
00:01:24.107 --> 00:01:28.922
You can imagine doing a map across all
of the leaf nodes in a binary tree, for

27
00:01:28.922 --> 00:01:29.630
example.

28
00:01:29.630 --> 00:01:34.240
So any sort of data structure,
as long as we can create a mapper for it,

29
00:01:34.240 --> 00:01:40.010
we can adapt that operation to work
across the entire set of those values.

30
00:01:40.010 --> 00:01:46.650
So imagine in your mind, what would filter
and reduce look like in an object sense?

