WEBVTT

1
00:00:00.270 --> 00:00:03.238
&gt;&gt; Kyle Simpson: I know when I
bring up that word recursion,

2
00:00:03.238 --> 00:00:07.700
it sends shudders through the spine of
many of you because you're thinking,

3
00:00:07.700 --> 00:00:10.280
it's so difficult and so complicated.

4
00:00:10.280 --> 00:00:14.240
And I want to assuage those fears,
I want to allay those fears and

5
00:00:14.240 --> 00:00:19.810
tell you that recursion is not as
complicated as is often made out to be.

6
00:00:19.810 --> 00:00:25.060
I remember distinctly when I was back in
school, who knows how many years ago.

7
00:00:25.060 --> 00:00:30.420
I remember feeling frustrated and
confused by this topic.

8
00:00:30.420 --> 00:00:35.240
But I think it's more related to
our lack of proper perspective on

9
00:00:35.240 --> 00:00:39.620
the topic than the fact that it is
just inherently hard to understand.

10
00:00:39.620 --> 00:00:41.350
And as a functional programmer,

11
00:00:41.350 --> 00:00:45.787
as somebody who aspires to use functional
techniques, your toolbox would be

12
00:00:45.787 --> 00:00:49.940
incomplete if you were to say no,
I'm just not ever gonna use recursion.

13
00:00:49.940 --> 00:00:51.900
It is a significantly important tool.

14
00:00:51.900 --> 00:00:55.930
So we should spend a significant amount
of time making sure that we can get

15
00:00:55.930 --> 00:00:59.870
comfortable with this topic.

16
00:00:59.870 --> 00:01:05.330
Let's take this example of wanting to
count the number of vowels in a string.

17
00:01:05.330 --> 00:01:08.050
I've got the quick brown fox
jumps over the lazy dog.

18
00:01:10.020 --> 00:01:14.370
That's a weird thing from the days of
typewriters because that's a sentence that

19
00:01:14.370 --> 00:01:18.456
has all of the letters in the alphabet in
it and that's why that sentence exists.

20
00:01:18.456 --> 00:01:20.840
But it was just the first thing
that came up on a Google search.

21
00:01:20.840 --> 00:01:21.580
So there you go.

22
00:01:21.580 --> 00:01:27.362
There's a sentence and we want to count
how many vowels exist in that sentence.

23
00:01:27.362 --> 00:01:31.452
And you can imagine very straightforwardly
an iterative approach which

24
00:01:31.452 --> 00:01:33.940
is what I'm doing on lines 5 through 13.

25
00:01:33.940 --> 00:01:38.120
I'm setting up a counter,
I'm doing a loop over that and

26
00:01:38.120 --> 00:01:42.120
I'm checking to see if it's one of
those five letters that is a vowel.

27
00:01:42.120 --> 00:01:45.312
And if so incrementing my counter and
then returning the number and

28
00:01:45.312 --> 00:01:46.624
indeed the answer is 11.

29
00:01:50.077 --> 00:01:53.186
&gt;&gt; Kyle Simpson: The problem with
this looping approach is that

30
00:01:53.186 --> 00:01:56.056
the looping approach is basically telling

31
00:01:56.056 --> 00:02:00.910
us you have to read the code to
convince yourself of what it does.

32
00:02:00.910 --> 00:02:04.364
You cannot simply glance at any given for
loop somewhere and

33
00:02:04.364 --> 00:02:07.137
absolutely know what that for
loop is gonna do.

34
00:02:07.137 --> 00:02:10.926
You have to read it and execute it, to the
extent that it's written pretty simply,

35
00:02:10.926 --> 00:02:13.530
it doesn't take a lot of
mental processing power.

36
00:02:13.530 --> 00:02:16.900
But you cannot glance at this and
immediately know what it's doing.

37
00:02:18.660 --> 00:02:21.690
So this is one of those
situations where we might ask,

38
00:02:21.690 --> 00:02:23.700
is there some more declarative approach?

39
00:02:23.700 --> 00:02:26.160
And there are multiple ways
to solve this problem.

40
00:02:26.160 --> 00:02:29.970
I am not suggesting that recursion
is the only way to do so.

41
00:02:31.680 --> 00:02:35.217
But recursion is going to be
a significant solution or

42
00:02:35.217 --> 00:02:39.547
an important solution that we
should get more comfortable with.

43
00:02:39.547 --> 00:02:44.096
Because there will be some problems
where recursion is much more of

44
00:02:44.096 --> 00:02:46.300
the best answer to the problem.

45
00:02:46.300 --> 00:02:50.920
And in fact, some cases, almost the only
practical answer to the problem at hand.

46
00:02:52.810 --> 00:02:55.440
So some problems can be
solved with recursion and

47
00:02:55.440 --> 00:02:58.740
some problems really must
be solved with recursion.

48
00:02:58.740 --> 00:03:03.532
And because that is the case, it should be
a tool that we are at least familiar with.

49
00:03:03.532 --> 00:03:09.378
The question you have to ask yourself is
what would be a recursive definition for

50
00:03:09.378 --> 00:03:10.432
any problem.

51
00:03:10.432 --> 00:03:12.983
You have to understand
a recursive definition for

52
00:03:12.983 --> 00:03:16.520
a solution before you can start
writing a recursive function for it.

53
00:03:17.820 --> 00:03:19.930
I know this is a shock,
but as a programmer,

54
00:03:19.930 --> 00:03:21.765
your job is not to get the code to work.

55
00:03:21.765 --> 00:03:24.669
Your job is to actually first
understand the problem.

56
00:03:26.680 --> 00:03:30.810
And so the real question here is,
if my problem that I need,

57
00:03:30.810 --> 00:03:32.560
or the algorithm that I want to design,

58
00:03:32.560 --> 00:03:37.590
the solution that I want to provide,
is how many vowels are in a string?

59
00:03:37.590 --> 00:03:41.450
I have to ask myself how would I define
that in a recursive way before I could

60
00:03:41.450 --> 00:03:43.069
ever start writing a recursive function.

61
00:03:44.430 --> 00:03:49.550
And there are in fact often multiple
ways to recursively define a problem.

62
00:03:49.550 --> 00:03:52.056
Some problems, basically there's only one.

63
00:03:52.056 --> 00:03:54.353
Some problems there's two or three.

64
00:03:54.353 --> 00:03:57.421
So I'm not suggesting this is
the only way to approach to it but

65
00:03:57.421 --> 00:04:00.496
I think it might be one of the most
natural ways to approach it.

66
00:04:00.496 --> 00:04:07.807
And it goes under the general heading
of reducing the problem set, okay?

67
00:04:07.807 --> 00:04:09.818
So I have an undetermined
number of characters,

68
00:04:09.818 --> 00:04:12.031
I don't know how many
characters are in that string.

69
00:04:12.031 --> 00:04:13.791
I have an undetermined
number of characters.

70
00:04:13.791 --> 00:04:18.452
And, in fact, if I'm trying to create
a utility for this, it needs to handle

71
00:04:18.452 --> 00:04:23.145
any string length from zero all the way
up to infinite string length, right?

72
00:04:23.145 --> 00:04:28.000
So I don't know how many characters
I might have to look at.

73
00:04:28.000 --> 00:04:33.200
But what I can say is that it would be
better if I solved a smaller problem.

74
00:04:33.200 --> 00:04:35.490
Whatever the string length is,

75
00:04:35.490 --> 00:04:39.200
if I was looking at one fewer
character in that string,

76
00:04:39.200 --> 00:04:43.680
that would be an easier problem to solve
than my current length by one character.

77
00:04:44.760 --> 00:04:48.340
And if I can think of it as
reducing it by one character,

78
00:04:48.340 --> 00:04:52.540
then I can think about doing that again,
and now I've reduced by another character.

79
00:04:52.540 --> 00:04:55.990
And doing that again, and now I've
reduced by another character, and so on.

80
00:04:55.990 --> 00:05:00.200
And so we can,
from that way of thinking, by saying,

81
00:05:00.200 --> 00:05:03.729
I want to reduce my problem set to
something that is easier to solve.

82
00:05:04.730 --> 00:05:09.370
From that way of thinking we can say
the number of vowels in this string can

83
00:05:09.370 --> 00:05:15.010
be defined as the number of
vowels in the first character,

84
00:05:15.010 --> 00:05:17.700
plus the number of vowels
in the rest of the string.

85
00:05:19.950 --> 00:05:22.890
Now, number of vowels in the first
character sounds like a silly

86
00:05:22.890 --> 00:05:25.850
question to ask, but
it's basically just a binary choice.

87
00:05:25.850 --> 00:05:27.005
Is it a vowel or not?

88
00:05:27.005 --> 00:05:29.850
So it's a zero or one sort of question.

89
00:05:29.850 --> 00:05:34.480
And whatever that number is, plus however
many vowels are left in the string.

90
00:05:36.220 --> 00:05:40.270
And then, I could repeat that process by
saying, I've got a smaller string, and

91
00:05:40.270 --> 00:05:42.080
I could say,
how many vowels are in that one?

92
00:05:43.250 --> 00:05:47.620
As a matter of fact, I could do that exact
thing that I just described iteratively.

93
00:05:47.620 --> 00:05:52.160
You could set up a for loop that looked
at the first character, said if it was

94
00:05:52.160 --> 00:05:56.880
a vowel or not, added zero or one to the
count, and then reduced the string size.

95
00:05:56.880 --> 00:05:59.420
As a matter of fact, that's sort of
what we're doing with the index here.

96
00:06:00.590 --> 00:06:04.495
We're sort of indexing through the string
rather than trimming the string down.

97
00:06:04.495 --> 00:06:09.166
But we're saying, how many vowels are here
plus how many vowels do I need to

98
00:06:09.166 --> 00:06:11.180
count in the rest of the string?

99
00:06:12.820 --> 00:06:17.680
That's the recursive, or a recursive
way of thinking about the problem.

100
00:06:17.680 --> 00:06:21.660
So let's try to set out to
design a recursive function

101
00:06:21.660 --> 00:06:23.580
that solves this problem.

102
00:06:23.580 --> 00:06:29.680
Every single recursive solution is going
to have at a minimum, a base condition.

103
00:06:29.680 --> 00:06:33.180
The base condition is how
you know when to stop.

104
00:06:33.180 --> 00:06:36.420
It's just like in a for loop where you
have a test condition that tells the for

105
00:06:36.420 --> 00:06:38.680
loop to stop, so
you don't get an infinite loop.

106
00:06:39.960 --> 00:06:45.230
In our case, the base condition most
naturally is I have an empty string.

107
00:06:45.230 --> 00:06:47.220
Because if I have an empty string,

108
00:06:47.220 --> 00:06:50.580
I can definitely tell you there
are zero vowels in the empty string.

109
00:06:52.330 --> 00:06:53.710
So that's what I'm checking on line 2.

110
00:06:53.710 --> 00:06:57.671
I'm saying, if string.length = 0,
just return 0.

111
00:06:57.671 --> 00:06:59.710
That is a base condition.

112
00:06:59.710 --> 00:07:05.613
And then I need to ask,
what do I do if it's not 0?

113
00:07:05.613 --> 00:07:11.318
Well, I need to count, whether or
not the current, character is a vowel,

114
00:07:11.318 --> 00:07:17.320
and then I need to count, all the vowels
In the rest of the string, you with me?

115
00:07:17.320 --> 00:07:18.270
So how do we do that?

116
00:07:19.480 --> 00:07:24.412
First we, line 3 create first and
we set it to 1 or 0.

117
00:07:25.450 --> 00:07:31.820
If string sub 0 is a vowel we set it to 1,
otherwise we set it to 0.

118
00:07:31.820 --> 00:07:34.750
And then line 4,
we take whatever that value was and

119
00:07:34.750 --> 00:07:40.130
we add it to the count of the vowels
in the rest of the string.

120
00:07:40.130 --> 00:07:43.409
String.slice with 1 says slice
off the first character and

121
00:07:43.409 --> 00:07:45.410
give me the substring that's left.

122
00:07:47.040 --> 00:07:51.000
So make it a smaller problem,
smaller and smaller and smaller problem.

123
00:07:51.000 --> 00:07:54.231
So if we started out with
a string that was 100 characters,

124
00:07:54.231 --> 00:07:56.479
the next time we called it we'd be at 99.

125
00:07:56.479 --> 00:08:01.168
And then at 98, and at 97, and all the way
down until we got to a string length of 0,

126
00:08:01.168 --> 00:08:03.360
in which case we'd get 0.

127
00:08:03.360 --> 00:08:07.800
Now we'd have all those stacked up ones
and zeros, ones and zeros, ones and

128
00:08:07.800 --> 00:08:11.180
zeros and they're all in a big giant,
basically addition string.

129
00:08:11.180 --> 00:08:15.149
0 plus 0 plus 1 plus 1 plus
1 plus 1 plus 0 plus 0, and

130
00:08:15.149 --> 00:08:17.586
we just need to compute all of that.

131
00:08:17.586 --> 00:08:19.850
And that's what the return
statements are gonna do, and

132
00:08:19.850 --> 00:08:22.743
they're gonna give us back the number,
in this case, the number 11.

133
00:08:24.690 --> 00:08:28.570
&gt;&gt; Kyle Simpson: Now here's why I think
recursion gets confusing for people.

134
00:08:28.570 --> 00:08:32.460
I think recursion gets confusing for
people because they force themselves to

135
00:08:32.460 --> 00:08:36.880
try to think about the implementation
of what's happening with recursion.

136
00:08:36.880 --> 00:08:39.200
The same way they think about
the implementation when they write

137
00:08:39.200 --> 00:08:40.390
the for loop.

138
00:08:40.390 --> 00:08:42.890
And this is where we get off
track because recursion is

139
00:08:42.890 --> 00:08:45.370
not designed to be an imperative approach.

140
00:08:45.370 --> 00:08:49.370
It's designed, it's conceived
to be a declarative approach.

141
00:08:50.520 --> 00:08:55.150
Remember, declarative says I'm not
concerned with how it happens,

142
00:08:55.150 --> 00:08:56.950
I'm concerned with the outcome.

143
00:08:58.360 --> 00:09:03.409
So if I can say in my mind that I
understand the idea that you could

144
00:09:03.409 --> 00:09:08.379
count all of the strings,
all of the vowels to the right of me.

145
00:09:08.379 --> 00:09:09.639
I don't know how you're gonna do it, but

146
00:09:09.639 --> 00:09:11.850
I understand that you could
theoretically do that.

147
00:09:11.850 --> 00:09:13.840
And I can understand
the problem of whether or

148
00:09:13.840 --> 00:09:16.400
not this single character is a vowel.

149
00:09:16.400 --> 00:09:19.900
And I can understand the idea that those
two things add together to give me

150
00:09:19.900 --> 00:09:20.650
a total count.

151
00:09:21.860 --> 00:09:27.262
Then I do not need to concern myself with
how that other sub problem gets solved.

152
00:09:29.486 --> 00:09:32.905
&gt;&gt; Kyle Simpson: You can, if you want to
be a computer scientist, start drawing

153
00:09:32.905 --> 00:09:37.650
all these diagrams of the stack frames and
the function call and what the values are.

154
00:09:37.650 --> 00:09:39.250
But I think that's where
people get off track.

155
00:09:40.670 --> 00:09:45.207
It's not that I don't want you
to understand that stuff, but

156
00:09:45.207 --> 00:09:48.011
that's really deeper like, [LAUGH].

157
00:09:48.011 --> 00:09:51.173
That's like computer science level
kinds of stuff where you need to track

158
00:09:51.173 --> 00:09:53.120
all the memory frames and all that stuff.

159
00:09:53.120 --> 00:09:56.440
What I want you to think about
as a functional programmer,

160
00:09:56.440 --> 00:10:01.410
is can I break this problem into some
pieces that are easy to understand?

161
00:10:01.410 --> 00:10:05.390
I understand that character one is either
a vowel or not, and I understand that

162
00:10:05.390 --> 00:10:10.900
there is some way to compute how many
vowels are left in the other string.

163
00:10:10.900 --> 00:10:13.059
And I'm gonna add those two together,
and give you your result.

164
00:10:14.950 --> 00:10:19.610
And that's as far as we really should
have to go in terms of conceiving and

165
00:10:19.610 --> 00:10:21.690
authoring our recursive algorithms.

166
00:10:21.690 --> 00:10:24.593
If you find yourself having
to go deeper than that,

167
00:10:24.593 --> 00:10:28.117
then recursion might not be
the solution that is best for you.

168
00:10:30.908 --> 00:10:35.973
&gt;&gt; Kyle Simpson: Hopefully, that idea
will resolve some of the frustration that

169
00:10:35.973 --> 00:10:41.974
you may have built up in the past about
recursion being confusing to author,

170
00:10:41.974 --> 00:10:44.150
confusing to understand.

171
00:10:44.150 --> 00:10:48.705
And the point that I wanna make here is
that even though there is some degree of

172
00:10:48.705 --> 00:10:52.835
imperativeness in this code,
this code is much less imperative than

173
00:10:52.835 --> 00:10:56.750
the iterative equivalent
on the previous screen.

174
00:10:56.750 --> 00:11:00.890
If you get to the point where you start to
understand the patterns that happened with

175
00:11:00.890 --> 00:11:01.990
recursion, and

176
00:11:01.990 --> 00:11:06.220
there are a couple of major patterns
that almost all recursion fits into.

177
00:11:06.220 --> 00:11:08.690
One of them is solve the sub problems.

178
00:11:08.690 --> 00:11:11.930
That's the one I just talked about,
do something and reduce my problem,

179
00:11:11.930 --> 00:11:14.180
set it to a sub problem and keep reducing.

180
00:11:14.180 --> 00:11:18.030
Another one's called divide and conquer,
which takes a giant problem set and

181
00:11:18.030 --> 00:11:21.098
says, can I eliminate half of the problem?

182
00:11:21.098 --> 00:11:23.336
And then could I eliminate
another half of the problem, and

183
00:11:23.336 --> 00:11:25.726
another half of the problem,
that's another pattern for it.

184
00:11:25.726 --> 00:11:29.296
If you can get to the point where
you understand those patterns,

185
00:11:29.296 --> 00:11:33.061
then you will start to be able to see
a recursive problem like this and

186
00:11:33.061 --> 00:11:36.050
say I know exactly how they're solving it.

187
00:11:36.050 --> 00:11:39.387
They're solving it with
the iterative sub-problem,

188
00:11:39.387 --> 00:11:43.084
they're solving it with divide and
conquer, etc., okay?

189
00:11:43.084 --> 00:11:48.090
There's a tremendous amount of math behind
that and none of that math even matters.

190
00:11:48.090 --> 00:11:51.653
All that matters is that we can
trust that that stuff works.

191
00:11:51.653 --> 00:11:55.430
You don't have to be able to write
the inductive proof for this thing.

192
00:11:55.430 --> 00:11:58.220
You just have to be able to
intuit that I understand that

193
00:11:58.220 --> 00:12:00.460
this part of the problem
could be solved and

194
00:12:00.460 --> 00:12:03.520
this part of the problem I can
concretely solve, and now I'm done.

