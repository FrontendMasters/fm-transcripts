WEBVTT

1
00:00:00.460 --> 00:00:04.500
&gt;&gt; Kyle Simpson: The next step
of our derivation asks us,

2
00:00:04.500 --> 00:00:08.980
what would we do if we had the list come.

3
00:00:08.980 --> 00:00:13.530
It's essentially we have to identify and
again, this is pulling it out of thin air.

4
00:00:13.530 --> 00:00:18.230
We have to identify that to compose, we
would have to have something to pass in.

5
00:00:18.230 --> 00:00:21.960
So what if that those,
two intermediary functions,

6
00:00:21.960 --> 00:00:27.420
were not being passed in this combination,
what if they were stand alone?

7
00:00:27.420 --> 00:00:30.510
So let's get just the intermediary
function representation,

8
00:00:30.510 --> 00:00:33.260
that transducer representation.

9
00:00:33.260 --> 00:00:34.830
What would that look like?

10
00:00:34.830 --> 00:00:39.000
Well, if I were to take mapReducer,
look at line 19 specifically.

11
00:00:39.000 --> 00:00:41.200
If I were to take mapReducer, and

12
00:00:41.200 --> 00:00:45.730
call it with add1, it is a function
that is expecting a reducer, right?

13
00:00:46.920 --> 00:00:52.670
And if I call filter reducer with we have
another one of those partial reducers or

14
00:00:52.670 --> 00:00:54.600
transducer or higher reducer.

15
00:00:54.600 --> 00:00:57.800
Whatever word you wanna use, we have
another one of those that's waiting for

16
00:00:57.800 --> 00:00:58.900
a reducer.

17
00:00:58.900 --> 00:01:02.999
And what do both of those functions
produce when provided a reducer,

18
00:01:07.770 --> 00:01:11.670
each of those functions
produces a reducer.

19
00:01:11.670 --> 00:01:16.280
If you pass a reducer into a higher
order reducer, AKA a transducer,

20
00:01:16.280 --> 00:01:17.030
what do you get out?

21
00:01:18.080 --> 00:01:22.650
You get a reducer, well that's what's
interesting because,f map reducer add

22
00:01:22.650 --> 00:01:27.010
one is expecting a reducer, how do we
come up with a reducer to give it?

23
00:01:28.550 --> 00:01:33.200
Why don't we call filter reducer,
and give it a reducer, and

24
00:01:33.200 --> 00:01:36.480
then that reducer becomes
the input to the next one.

25
00:01:36.480 --> 00:01:40.150
So rather than thinking about
numbers flowing the composition,

26
00:01:40.150 --> 00:01:43.780
we're actually gonna be thinking about
reducers being the value that travels

27
00:01:43.780 --> 00:01:44.660
through the composition.

28
00:01:46.480 --> 00:01:51.450
So this composed call on line 19
is setting up our two transducers

29
00:01:51.450 --> 00:01:53.870
into a composed transducer.

30
00:01:53.870 --> 00:01:57.660
And then, look on line 24 this is
where the magic starts to happen,

31
00:01:57.660 --> 00:02:01.170
line 24 we pass in list combination.

32
00:02:01.170 --> 00:02:02.890
Where does list combination go?

33
00:02:02.890 --> 00:02:05.409
It goes into the waiting filter reducer.

34
00:02:06.710 --> 00:02:11.240
Right, that waiting filter
reducer transducer thing,

35
00:02:11.240 --> 00:02:13.910
that thing is sitting and
waiting and it goes into that.

36
00:02:13.910 --> 00:02:14.940
And what's the end result?

37
00:02:16.040 --> 00:02:17.690
A reducer that can do filtering.

38
00:02:19.000 --> 00:02:22.120
Now that reducer that can do filtering,

39
00:02:22.120 --> 00:02:26.580
becomes the input to the waiting
map reducer transducer.

40
00:02:26.580 --> 00:02:29.108
The one on line 19, and that thing,

41
00:02:29.108 --> 00:02:32.676
when provided a filtering reducer,
what does it do?

42
00:02:35.025 --> 00:02:36.670
&gt;&gt; Kyle Simpson: It
makes a mapping reducer.

43
00:02:38.190 --> 00:02:38.700
You follow me?

44
00:02:40.370 --> 00:02:45.400
So that mapping, filtering reducer,
that's what we call transducer here,

45
00:02:45.400 --> 00:02:49.989
and that's why we can call list out
reduce line 24 with that reducer.

46
00:02:51.180 --> 00:02:56.270
It's doing both the mapping and
the filtering at the same time, okay.

47
00:02:56.270 --> 00:02:59.800
So if you track this, this is gonna get
really complicated, but I want you track

48
00:02:59.800 --> 00:03:06.010
that the things that are happening right
here, when we call predicate function.

49
00:03:06.010 --> 00:03:07.200
What is that thing?

50
00:03:07.200 --> 00:03:10.130
It was the isOdd, and

51
00:03:10.130 --> 00:03:15.400
it returns this reducer,
is this combined function.

52
00:03:16.410 --> 00:03:19.610
Remember, filter reducer
gives us a reducer, and

53
00:03:19.610 --> 00:03:22.190
that thing becomes the input to combiner.

54
00:03:22.190 --> 00:03:25.300
So when we call combined
function here on line 8,

55
00:03:25.300 --> 00:03:27.780
we're actually calling this reducer.

56
00:03:28.890 --> 00:03:32.140
And this reducer has the filtering in it,
right?

57
00:03:32.140 --> 00:03:34.390
So what we're doing here
on line 8 is saying,

58
00:03:34.390 --> 00:03:39.620
I want you to get this mapped value and
pass it into this combiner and

59
00:03:39.620 --> 00:03:43.400
let the combiner decide if it should
get added to the list or not.

60
00:03:43.400 --> 00:03:46.600
How does the combiner decide if
it should get added to the list?

61
00:03:46.600 --> 00:03:47.929
It calls the predicate function.

62
00:03:50.180 --> 00:03:54.430
So this line of code, line 8, is doing
both mapping and filtering at the same,

63
00:03:54.430 --> 00:03:59.460
time because combiner is the filtering
part, it's the filtering reducer.

64
00:04:00.660 --> 00:04:03.660
And it becomes the mapping
filtering reducer.

65
00:04:03.660 --> 00:04:07.020
If I were to give these, we have several
more slides, and I would give them these

66
00:04:07.020 --> 00:04:12.720
intermediate names, I would call this
thing, filter transducer and I call

67
00:04:12.720 --> 00:04:17.750
this thing nap filter transducer because
it has both mapping in filtering in it.

68
00:04:20.890 --> 00:04:24.450
There's one last step to do, okay?

69
00:04:24.450 --> 00:04:29.520
The last step is that, we now have
only two reduces instead of one.

70
00:04:29.520 --> 00:04:33.594
That's a good start,
we've definitely gone from 3 down to 2, or

71
00:04:33.594 --> 00:04:37.030
if it had been 20 we would
have gone from 20 down to 2.

72
00:04:37.030 --> 00:04:42.300
But there's one last thing, one last,
wow you pulled that out of thin air.

73
00:04:44.030 --> 00:04:45.981
What does listCombination do?

74
00:04:48.367 --> 00:04:51.218
&gt;&gt; Kyle Simpson: listCombination
says I have a value, and

75
00:04:51.218 --> 00:04:55.740
I have a running accumulator,
which happens to be an array.

76
00:04:55.740 --> 00:04:59.020
And the way I combine my
value in my accumulator,

77
00:04:59.020 --> 00:05:00.740
is to stick my value into the array.

78
00:05:02.240 --> 00:05:03.820
What does the sum function do?

79
00:05:05.830 --> 00:05:08.070
The sum function does the same thing,
right?

80
00:05:08.070 --> 00:05:12.240
The sum function says,
I'm going to take a value and

81
00:05:12.240 --> 00:05:16.320
an accumulator and the way I'm gonna get
those together is to do numeric addition.

82
00:05:18.240 --> 00:05:23.180
Both sum and
listCombination are doing the same thing,

83
00:05:23.180 --> 00:05:25.799
which is that they are combining
a value with an accumulator.

84
00:05:28.000 --> 00:05:32.700
So instead of first,
making our intermediary list

85
00:05:32.700 --> 00:05:35.510
because the end result of reduce
would have been a mapped and

86
00:05:35.510 --> 00:05:39.810
filtered array,
that we then shrink down to a number.

87
00:05:39.810 --> 00:05:45.120
Why don't we just pass some in
instead of listCombination?

88
00:05:45.120 --> 00:05:45.999
And in other words,

89
00:05:45.999 --> 00:05:49.632
let's just delete listCombination entirely
because we actually don't need it.

90
00:05:51.091 --> 00:05:54.903
&gt;&gt; Kyle Simpson: Now that we have
parameterized our reducer, our combiner,

91
00:05:54.903 --> 00:05:57.380
we can simply pass in the sum function.

92
00:05:58.650 --> 00:06:03.460
And that's what we do here on line 19,
we pass in the sum function, and

93
00:06:03.460 --> 00:06:06.985
notice now, we don't need an empty
array as our initial value,

94
00:06:06.985 --> 00:06:10.120
[be]cause why even have
the intermediary array?

95
00:06:10.120 --> 00:06:12.700
As we go along and
do our mapping and filtering, and

96
00:06:12.700 --> 00:06:17.040
we finally get to that final delegation
where we say, here's two values,

97
00:06:17.040 --> 00:06:19.090
you figure out what to do with them.

98
00:06:19.090 --> 00:06:22.860
Sum says, I know what to do with those,
I just numerically add them together.

99
00:06:24.400 --> 00:06:27.130
There's no reason to go
through the indirection of

100
00:06:27.130 --> 00:06:29.190
first creating an array that
then has to get reduced.

