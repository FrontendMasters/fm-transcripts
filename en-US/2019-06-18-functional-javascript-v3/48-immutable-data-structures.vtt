WEBVTT

1
00:00:00.180 --> 00:00:03.310
&gt;&gt; Kyle Simpson: But again,
that still only tells something about

2
00:00:03.310 --> 00:00:05.330
data structures that never need to change.

3
00:00:07.050 --> 00:00:10.710
What do we do with data structures
that do need to change?

4
00:00:12.850 --> 00:00:19.580
Well, you can't treat all data
structures as immutable data structure.

5
00:00:19.580 --> 00:00:23.350
As read only data structures, some of
them are going to have to be mutable.

6
00:00:24.870 --> 00:00:27.700
And here's the real
counter intuitive thing.

7
00:00:27.700 --> 00:00:33.900
When you have the need for a mutable
data structure, that is one that is not

8
00:00:33.900 --> 00:00:38.870
read only, what you actually need
is an immutable data structure.

9
00:00:40.460 --> 00:00:43.820
Let me say that again,
because it's really strange.

10
00:00:43.820 --> 00:00:47.960
When you need a mutable data structure,

11
00:00:47.960 --> 00:00:51.590
what you actually need is
an immutable data structure.

12
00:00:52.970 --> 00:00:55.420
So what am I talking about here,
what do I mean by that?

13
00:00:55.420 --> 00:01:00.220
An immutable data structure,
is one that allows

14
00:01:00.220 --> 00:01:04.920
not no mutation, but
rather structured mutation.

15
00:01:06.994 --> 00:01:11.680
Structured controlled intentional
mutation, as opposed to just willy nilly

16
00:01:11.680 --> 00:01:14.130
make an assignment statement and
create a side effects somewhere.

17
00:01:15.740 --> 00:01:20.000
It's the next level from a read only,
you should start by asking,

18
00:01:20.000 --> 00:01:23.670
is this ever going to need to
mutate in any way, shape, or form?

19
00:01:23.670 --> 00:01:28.150
If so, then I don't use a read only,
I need to do something immutable.

20
00:01:28.150 --> 00:01:30.950
But if it never needs to change,
then just stick with the plain,

21
00:01:30.950 --> 00:01:34.060
simple, read-only data structure.

22
00:01:34.060 --> 00:01:37.880
We only step up to this immutable data
structure, if it needs to mutate.

23
00:01:39.360 --> 00:01:42.190
So what exactly is
an immutable data structure?

24
00:01:42.190 --> 00:01:45.100
It is a representation of
the data structures that

25
00:01:45.100 --> 00:01:46.470
we are used to dealing with.

26
00:01:47.690 --> 00:01:49.810
We're used to dealing
with data structures,

27
00:01:49.810 --> 00:01:53.900
like arrays where we can access
things at index positions.

28
00:01:53.900 --> 00:01:55.570
We're used to dealing
with things like objects,

29
00:01:55.570 --> 00:01:58.620
where we can access things
at named property positions.

30
00:01:58.620 --> 00:02:01.120
It's things like that,
it's data structures like that.

31
00:02:02.420 --> 00:02:06.940
But where you don't have access to
the actual underlying data structure,

32
00:02:06.940 --> 00:02:11.830
what you have only is an API to access it.

33
00:02:11.830 --> 00:02:12.680
And the API,

34
00:02:12.680 --> 00:02:18.750
creates a layer of control that prevents
unexpected changes to the data structure.

35
00:02:20.660 --> 00:02:23.980
Specifically what an immutable
data structure says, is,

36
00:02:23.980 --> 00:02:27.560
unless you switch it into
a special mode that allows this.

37
00:02:27.560 --> 00:02:28.978
So by default it's not,

38
00:02:28.978 --> 00:02:33.229
if you switch it into a special mode you
can literally go in and muck with it if

39
00:02:33.229 --> 00:02:36.828
you have like a performance problem
that you need to deal with.

40
00:02:36.828 --> 00:02:41.745
But in a general state, an immutable
data structure says essentially you

41
00:02:41.745 --> 00:02:44.124
cannot change the data structure,

42
00:02:44.124 --> 00:02:49.300
you can only create a new data structure
with the change having been applied.

43
00:02:51.400 --> 00:02:54.990
Similar to what we did, a couple of slides
ago when I made a copy to the thing and

44
00:02:54.990 --> 00:02:56.800
then I added the status field to it.

45
00:02:56.800 --> 00:03:02.340
It's similar to that concept, it says,
listen, I need to add something to it.

46
00:03:02.340 --> 00:03:05.390
And the response from the API is,
okay, but

47
00:03:05.390 --> 00:03:07.950
here's a new data structure
with the change applied.

48
00:03:07.950 --> 00:03:10.250
I'm not gonna let you
modify the previous one.

49
00:03:10.250 --> 00:03:13.975
And the reason I'm not gonna let you
modify the previous one, is that somebody

50
00:03:13.975 --> 00:03:17.599
else in the program might be relying
upon the previous state of that object.

51
00:03:20.261 --> 00:03:25.250
&gt;&gt; Kyle Simpson: They have to opt in to
saying, I want your version of the object.

52
00:03:25.250 --> 00:03:28.360
You don't get to decide, process order,

53
00:03:28.360 --> 00:03:31.400
that you're gonna affect something at
a distance somewhere else in the app.

54
00:03:32.520 --> 00:03:37.610
You could return the new order, the
processed order with the status field, and

55
00:03:37.610 --> 00:03:40.680
allow the caller of your function to
decide what they wanna do with that

56
00:03:40.680 --> 00:03:41.820
information.

57
00:03:41.820 --> 00:03:44.440
But you don't get to mutate it from afar.

58
00:03:44.440 --> 00:03:48.550
That's what I mean by saying that
immutable data structure creates a control

59
00:03:48.550 --> 00:03:54.080
mechanism, it creates a controlled
intentional way for the mutation to occur

60
00:03:54.080 --> 00:03:57.508
and by default, it simply says let's make
a whole new object, a whole new array,

61
00:03:57.508 --> 00:04:00.980
a whole new list, a whole new object,
a whole new map, whatever the data

62
00:04:00.980 --> 00:04:04.660
structure is, make a whole new one of
those with the change having their plight.

63
00:04:06.540 --> 00:04:10.670
Now the question becomes,
how could that possibly be performed,

64
00:04:10.670 --> 00:04:15.560
how could it possibly be performed for
me to make a only copy this array or

65
00:04:15.560 --> 00:04:18.630
only copy of this object every
single time I need to make a change.

66
00:04:18.630 --> 00:04:21.970
Because the kinds of objects and arrays
that we're talking about the need to be

67
00:04:21.970 --> 00:04:24.770
mutated probably need to be mutated a lot.

68
00:04:26.210 --> 00:04:31.400
Not once or twice, not 3 or 10 times but
like thousands of times a second.

69
00:04:33.100 --> 00:04:36.700
So the ante is high for if I'm going
to change this thing over and over and

70
00:04:36.700 --> 00:04:40.750
over and over again so often, and
I'm creating all these new ones and

71
00:04:40.750 --> 00:04:43.660
throwing all the old ones away at worst.

72
00:04:43.660 --> 00:04:47.160
I mean, at best,
I just have a bunch of garbage collection.

73
00:04:47.160 --> 00:04:50.090
But at worst you consider all
the CPU churn of making all

74
00:04:50.090 --> 00:04:51.320
those copies over and over again.

75
00:04:53.050 --> 00:04:57.370
And this is where the real power of
an immutable data structure comes in.

76
00:04:57.370 --> 00:05:00.670
Because the way immutable
data structures are designed,

77
00:05:00.670 --> 00:05:03.800
is designed specifically with
this optimization in mind.

78
00:05:03.800 --> 00:05:08.360
In theory, in functional programming, we
just say, no you don't make a new thing.

79
00:05:08.360 --> 00:05:11.570
You don't make a change to a thing, you
make a new thing with the change applied.

80
00:05:11.570 --> 00:05:16.080
But in practice, that means real cost
like garbage collection and CPU.

81
00:05:16.080 --> 00:05:21.390
And so, it is the job of an immutable
data structure to mitigate

82
00:05:21.390 --> 00:05:25.510
that real practical cost,
so that we get closer back

83
00:05:25.510 --> 00:05:28.980
to the theoretical benefit of what
an immutable data structure is.

84
00:05:30.370 --> 00:05:34.390
So, if you use an immutable data
structure, what it's actually going to do

85
00:05:34.390 --> 00:05:38.280
is not create a whole new copy of the
object when you try to change a property,

86
00:05:38.280 --> 00:05:43.120
but rather make a new object with the new
information in it and internally,

87
00:05:43.120 --> 00:05:45.070
have a pointer back to the previous one.

88
00:05:46.930 --> 00:05:51.750
It's actually a little bit like a get
repo, where every time you've committed

89
00:05:51.750 --> 00:05:57.090
something you're just storing a deaf
compared to what it was before.

90
00:05:57.090 --> 00:06:00.740
And immutable data structure is
essentially conceptually like a get

91
00:06:00.740 --> 00:06:04.530
data structure, where each new object
in the chain that you've created

92
00:06:04.530 --> 00:06:06.420
is just a deaf on the previous object.

93
00:06:07.780 --> 00:06:10.400
Its stores internally that
there's now a new property or

94
00:06:10.400 --> 00:06:12.820
that a properties been changed or
something like that.

95
00:06:12.820 --> 00:06:16.990
And so, you're not paying nearly as
much of the performance penalty CPU and

96
00:06:16.990 --> 00:06:19.270
you're not paying the garbage
collection penalty.

97
00:06:19.270 --> 00:06:21.880
In the general sense,
there's certainly corner cases here and

98
00:06:21.880 --> 00:06:27.220
it's why immutable data structures cannot
allow you to opt-in for time period

99
00:06:27.220 --> 00:06:32.150
you can sort of crack it open, make some
changes and then lock it back together.

100
00:06:32.150 --> 00:06:35.420
Those things have to exist because
sometimes we have performance bottlenecks

101
00:06:35.420 --> 00:06:38.480
that we need to deal with,
but in the general sense,

102
00:06:38.480 --> 00:06:41.690
we want to just use the data
structure in that conceptual way and

103
00:06:41.690 --> 00:06:45.330
allow it to abstract away those
performance optimizations for us.

104
00:06:46.830 --> 00:06:50.130
So, how do we get
immutable data structures?

105
00:06:50.130 --> 00:06:53.930
We do not at the present time
have immutable data structures

106
00:06:53.930 --> 00:06:55.740
natively in JavaScript.

107
00:06:55.740 --> 00:06:59.280
There have been a couple of
rumblings from some people on TC39,

108
00:06:59.280 --> 00:07:01.150
that maybe someday that will happen.

109
00:07:01.150 --> 00:07:03.630
But you need to understand
that when I say,

110
00:07:03.630 --> 00:07:08.760
when somebody says, yeah, somebody on
TC39 has talked about maybe it happening?

111
00:07:08.760 --> 00:07:11.430
That means that we might
get it a decade from now.

112
00:07:11.430 --> 00:07:14.870
That's not, it's gonna happen
in a few weeks, or a few months.

113
00:07:14.870 --> 00:07:18.540
The timelines that we're talking about
here are, well, it's been talked about for

114
00:07:18.540 --> 00:07:22.280
the last five years, and
now there's a first proposal.

115
00:07:22.280 --> 00:07:25.640
And then four years later they vet it,
and now it's finally landing.

116
00:07:25.640 --> 00:07:28.700
So we're not talking about this sort
of stuff landing natively in JavaScript

117
00:07:28.700 --> 00:07:30.020
any time soon.

118
00:07:30.020 --> 00:07:34.510
But it's at least encouraging that some
conversation has started about it.

119
00:07:34.510 --> 00:07:38.880
Some people in that realm have started
to say, maybe this would be useful for

120
00:07:38.880 --> 00:07:41.000
JavaScript to have built it natively.

121
00:07:41.000 --> 00:07:44.580
And there would be a huge benefit
to the language being able to

122
00:07:44.580 --> 00:07:47.080
highly optimize these sorts of
things that we're talking about.

