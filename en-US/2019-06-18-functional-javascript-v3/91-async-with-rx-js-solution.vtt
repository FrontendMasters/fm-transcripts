WEBVTT

1
00:00:00.290 --> 00:00:02.660
&gt;&gt; Kyle Simpson: Okay,
let's take a look at the solution for

2
00:00:02.660 --> 00:00:06.170
our asynchronous exercise
with observables.

3
00:00:06.170 --> 00:00:11.200
As I showed you here in the comments,
the way to call an operator

4
00:00:11.200 --> 00:00:15.410
using Rx version six and above,
is that we take an observable,

5
00:00:15.410 --> 00:00:19.070
which is what we're getting back from
this call, and we call .pipe on it.

6
00:00:19.070 --> 00:00:22.850
And we're going to pipe just like we
did with our pipe in our previous

7
00:00:22.850 --> 00:00:24.934
exercises and in composition.

8
00:00:24.934 --> 00:00:29.160
We're gonna list out one at a time
in order from top to bottom,

9
00:00:29.160 --> 00:00:33.120
AKA left to right, we're gonna list out
any of the operators that we want those

10
00:00:33.120 --> 00:00:34.650
values to be piped through.

11
00:00:34.650 --> 00:00:38.839
In our case, we just have one operator
that we want to pipe it through,

12
00:00:38.839 --> 00:00:41.963
which is that we want to pipe
it through the map call.

13
00:00:41.963 --> 00:00:45.070
Now remember,
map normally takes two inputs.

14
00:00:45.070 --> 00:00:49.060
It would take a mapper function,
and also the thing to be mapped on.

15
00:00:49.060 --> 00:00:53.570
Here, we're only gonna provide the first
of those, because it's a curried function.

16
00:00:53.570 --> 00:00:56.545
So we're gonna provide formatCountdown.

17
00:00:58.230 --> 00:01:03.320
And this will provide us a unary function
that's expecting a value each time.

18
00:01:03.320 --> 00:01:06.530
So each time one of these numbers
comes through this observable,

19
00:01:06.530 --> 00:01:09.970
it will end up piping itself
through this formatCountdown.

20
00:01:09.970 --> 00:01:14.700
And that end result is the end result
of the countdown observable, and

21
00:01:14.700 --> 00:01:18.040
then we are subscribing to
that countdown observable and

22
00:01:18.040 --> 00:01:21.050
simply printing whatever we
get through to the console.

23
00:01:22.330 --> 00:01:27.434
So formatCountdown needs to take
a counter, and if you remember when we ran

24
00:01:27.434 --> 00:01:34.180
the unfixed exercise, the counter started
with -1, and then 0, 1, 2, 3, and 4.

25
00:01:34.180 --> 00:01:38.800
So those are the counter values that are
coming in and we need to format those as

26
00:01:38.800 --> 00:01:44.520
a time, and the time can be formatted
using this formatTime utility.

27
00:01:44.520 --> 00:01:51.320
So if we were to just simply call
return formatTime with the counter and

28
00:01:51.320 --> 00:01:55.640
we ran that, it wouldn't be quite
right because we'd be getting -1 and

29
00:01:55.640 --> 00:02:02.630
we be counting up, we'd get 0, 000,
001, 002, that's not what we want.

30
00:02:02.630 --> 00:02:05.490
We want it to basically go in reverse.

31
00:02:05.490 --> 00:02:06.940
So to make it go in reverse,

32
00:02:06.940 --> 00:02:11.140
what we actually want to do is
do a subtraction from something.

33
00:02:11.140 --> 00:02:13.170
What do we want to subtract from?

34
00:02:13.170 --> 00:02:14.980
How about the countdownLength?

35
00:02:14.980 --> 00:02:20.167
So if my counter is 0,
then what do I want my actual countdown

36
00:02:20.167 --> 00:02:24.966
timer to say, I wanted to say 5 and
4, and 3, and 2.

37
00:02:24.966 --> 00:02:31.670
So, what I'm going to do is do
countdownLength minus counter.

38
00:02:31.670 --> 00:02:36.110
And if you ran this, you would see we have
an off by one error, which is the whole

39
00:02:36.110 --> 00:02:40.617
reason for me throwing the -1 in there so
that we can fix our off by one error, so

40
00:02:40.617 --> 00:02:43.268
we need to subtract out
one more value from it.

41
00:02:43.268 --> 00:02:48.570
And this will now format the -1.

42
00:02:48.570 --> 00:02:53.006
If we say countdownLength of 5 minus -1,
which becomes 6,

43
00:02:53.006 --> 00:02:56.680
minus 1, then we have 5, that becomes 005.

44
00:02:56.680 --> 00:03:03.236
And then countdownLength to 5 minus
counter 0 is 5 minus 1 is 4, and

45
00:03:03.236 --> 00:03:08.916
then countdownLength of 5 minus
1 minus 1 is 3, and so on,

46
00:03:08.916 --> 00:03:14.523
so I'll have 005, 004, 003, 002, 001.

47
00:03:14.523 --> 00:03:19.823
And then finally, the 000 and
immediately after that,

48
00:03:19.823 --> 00:03:25.760
this console complete is fired
when the observable has finished.

49
00:03:27.500 --> 00:03:31.100
The big takeaways here are not so
much about Rx,

50
00:03:31.100 --> 00:03:35.780
the way it works but that we can
understand that we use Rx to take

51
00:03:35.780 --> 00:03:39.748
a stream of values like
a lazy array as we discussed.

52
00:03:39.748 --> 00:03:44.119
And we map that to another lazy array,
we map it to another observable and

53
00:03:44.119 --> 00:03:48.430
then we subscribe to that observable
to see the values coming through.

