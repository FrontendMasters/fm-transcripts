WEBVTT

1
00:00:00.000 --> 00:00:03.794
&gt;&gt; Kyle Simpson: Okay,
what about this function, getId?

2
00:00:03.794 --> 00:00:09.268
And we have an obj parameter,
and it looks like basically

3
00:00:09.268 --> 00:00:16.290
all we do is access the id property
on that obj and return it back.

4
00:00:16.290 --> 00:00:19.630
So let me ask you this question,
if I were to call getId over and over and

5
00:00:19.630 --> 00:00:25.620
over again with the same object,
would I get the same value out every time?

6
00:00:26.630 --> 00:00:28.680
I see different answers,
some of you nodding your heads,

7
00:00:28.680 --> 00:00:29.770
some of you shaking your head.

8
00:00:30.870 --> 00:00:32.800
So think about it this way.

9
00:00:32.800 --> 00:00:37.108
How sure would you be if you saw this
function, if you saw this thing,

10
00:00:37.108 --> 00:00:39.801
which is either a function or a procedure.

11
00:00:39.801 --> 00:00:46.040
If you saw this in your application, how
sure would you be at its predictability?

12
00:00:46.040 --> 00:00:49.059
That every time it's called,
it's always gonna give the same response?

13
00:00:51.452 --> 00:00:53.580
&gt;&gt; Kyle Simpson: Well,
one question you would ask is,

14
00:00:53.580 --> 00:00:56.970
does that object get
mutated at some point?

15
00:00:56.970 --> 00:00:58.108
Well, let's say you had answered that.

16
00:00:58.108 --> 00:01:03.037
Let's say in all places that you saw getId
being called, it was always the same

17
00:01:03.037 --> 00:01:07.840
object, and the object was never
the subject of any reassignment.

18
00:01:07.840 --> 00:01:10.510
Then would you say, yeah,
I feel pretty confident?

19
00:01:13.230 --> 00:01:16.475
What if I reveal a bit more
of the program and I say,

20
00:01:16.475 --> 00:01:21.672
what if that object doesn't have a regular
property, but rather has a getter?

21
00:01:21.672 --> 00:01:24.400
And what if that getter
returns random numbers?

22
00:01:24.400 --> 00:01:28.440
All of a sudden now that I've
revealed more of the program,

23
00:01:28.440 --> 00:01:32.000
our confidence level tanked,
right, down to zero.

24
00:01:33.930 --> 00:01:35.740
You see what I'm saying is
that it's important for

25
00:01:35.740 --> 00:01:37.840
you to be able to see the entire program.

26
00:01:37.840 --> 00:01:41.090
Or better than that,

27
00:01:42.100 --> 00:01:44.840
it's important that you be able to see
all the relevant parts of a program.

28
00:01:46.930 --> 00:01:50.490
The more that you can use the techniques
that we're talking about in this course,

29
00:01:50.490 --> 00:01:55.680
to reduce the surface area where these
non functional things can occur,

30
00:01:57.260 --> 00:02:01.740
the easier it is for somebody to read,
understand and ultimately to rely upon.

31
00:02:03.230 --> 00:02:06.580
We want the reader of our code, which
is not just other people on our team,

32
00:02:06.580 --> 00:02:08.850
it's also our future self,
tomorrow and the next day,

33
00:02:08.850 --> 00:02:12.370
when we don't remember why
we wrote the code that way.

34
00:02:12.370 --> 00:02:17.080
Whoever it is that's reading the code, we
want that person to be able to tell, yeah,

35
00:02:17.080 --> 00:02:18.240
I know we can trust that.

36
00:02:18.240 --> 00:02:19.880
It's definitely pure.

37
00:02:19.880 --> 00:02:23.430
Because if they can,
then they can move on to other stuff.

38
00:02:23.430 --> 00:02:25.980
If they can't trust it,
they can't move on.

39
00:02:27.160 --> 00:02:30.274
So the thing that I'm getting at here and
this is super critical for you to get.

40
00:02:30.274 --> 00:02:35.740
The thing that I'm getting out,
the principle that I'm getting at here,

41
00:02:35.740 --> 00:02:39.140
is that pure function
calls act in isolation.

42
00:02:40.520 --> 00:02:45.350
In other words, given the same inputs,
they always produce the same output.

43
00:02:46.650 --> 00:02:48.660
That's another side of the Rubik's Cube.

44
00:02:48.660 --> 00:02:53.618
If you're looking for another component
of the definition of a pure function,

45
00:02:53.618 --> 00:02:58.502
it is to say that a pure function is one
where every time we execute that function

46
00:02:58.502 --> 00:03:01.832
with the same inputs,
we absolutely, positively,

47
00:03:01.832 --> 00:03:04.738
know that it will always
give the same output.

48
00:03:04.738 --> 00:03:07.070
And here we know it won't, right?

49
00:03:07.070 --> 00:03:11.310
Here we know by definition, if I call
that same line five over and over and

50
00:03:11.310 --> 00:03:13.810
over again, we know we're gonna
get different answers every time.

51
00:03:13.810 --> 00:03:17.444
Otherwise, something's really wrong
with our random number generator, right?

52
00:03:20.427 --> 00:03:23.320
&gt;&gt; Kyle Simpson: So that's the key,
is that we want to design our program so

53
00:03:23.320 --> 00:03:26.342
that as many of our function
calls are like that as possible.

54
00:03:26.342 --> 00:03:31.521
As much as possible, we want our function
calls to behave as pure, meaning

55
00:03:31.521 --> 00:03:36.803
that every time we give it the same input,
we're gonna get the same output.

56
00:03:36.803 --> 00:03:38.330
There's more to the Rubik's Cube but

57
00:03:38.330 --> 00:03:40.580
we'll come back to that as
we continue our discussion.

