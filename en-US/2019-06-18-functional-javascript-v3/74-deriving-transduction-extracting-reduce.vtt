WEBVTT

1
00:00:00.060 --> 00:00:02.820
&gt;&gt; Kyle Simpson: Let's dive into
deriving transduction, okay?

2
00:00:07.840 --> 00:00:09.500
Again, strap on your seatbelts,

3
00:00:09.500 --> 00:00:11.850
because I know that this is
gonna get a little complex.

4
00:00:11.850 --> 00:00:15.110
To help ease the pain of what
we're about to talk about.

5
00:00:15.110 --> 00:00:20.140
I wanna give you an anecdote from my
days in algebra back in like eighth or

6
00:00:20.140 --> 00:00:23.630
ninth grade, and some of you may
relate to this particular story.

7
00:00:24.710 --> 00:00:30.720
This used to drive me absolutely
nuts in my math classes because for

8
00:00:30.720 --> 00:00:35.160
example, the teacher would be up at the
front of the room and she'd be teaching us

9
00:00:35.160 --> 00:00:40.810
how to take some algebra equations.

10
00:00:40.810 --> 00:00:45.490
On one side it's got like x squared minus
three and the square root of that, and

11
00:00:45.490 --> 00:00:47.040
then on the other side
some other kind of thing.

12
00:00:47.040 --> 00:00:50.220
And what we're trying to do
is like solve for x, okay?

13
00:00:50.220 --> 00:00:52.340
And so we're like down each side.

14
00:00:52.340 --> 00:00:56.490
We're doing different thing, s and
at some point you get to a point where

15
00:00:56.490 --> 00:01:00.960
it's not at all obvious how you can
keep reducing either side of it.

16
00:01:00.960 --> 00:01:05.530
It's like, well, this one has
a square root, and this is cubed, and

17
00:01:05.530 --> 00:01:09.500
I don't know what mathematically I
can do with both of those things.

18
00:01:09.500 --> 00:01:12.830
And then the teacher, she'll say,
well, what do we do next?

19
00:01:12.830 --> 00:01:16.360
And everybody's like,
&gt;&gt; Kyle Simpson: Well, I don't know.

20
00:01:17.490 --> 00:01:21.260
And then,
she gets this glimmer in her eye.

21
00:01:21.260 --> 00:01:25.590
This is like 30 years ago and
I still feel like this is today.

22
00:01:25.590 --> 00:01:30.170
She gets this glimmer in her eye and
she says, what if we multiply both sides

23
00:01:30.170 --> 00:01:33.940
by 2x squared to the fourth, or whatever?

24
00:01:33.940 --> 00:01:36.209
And you're like what?

25
00:01:36.209 --> 00:01:37.871
It's completely out of thin air,

26
00:01:37.871 --> 00:01:41.360
you just pulled something entirely
completely unrelated to this.

27
00:01:41.360 --> 00:01:44.860
But sure enough when you multiply
both sides by this weird thing,

28
00:01:44.860 --> 00:01:47.740
everything just fixes itself.

29
00:01:47.740 --> 00:01:49.930
I don't know if anybody can relate
to this, but I see some nods,

30
00:01:49.930 --> 00:01:52.690
some of you seem to have
had similar experiences.

31
00:01:52.690 --> 00:01:55.790
This used to absolutely drive me insane.

32
00:01:55.790 --> 00:01:59.000
Because I go up after class, I was that
annoying student I wanted to understand.

33
00:01:59.000 --> 00:02:01.090
And I'd go up after class and
I pestered the teacher,

34
00:02:01.090 --> 00:02:05.140
I'd say, how did you know about 2x
squared to the fourth, or whatever?

35
00:02:05.140 --> 00:02:05.960
Like how did you know?

36
00:02:07.350 --> 00:02:13.010
And the most annoying response was,
well, I've just done it before, right?

37
00:02:13.010 --> 00:02:14.680
I knew it because I've done it before.

38
00:02:14.680 --> 00:02:17.759
I had an intuition that maybe
it would work and it did.

39
00:02:18.910 --> 00:02:20.470
Because the obvious point is,

40
00:02:20.470 --> 00:02:23.720
well, if you had that intuition how am
I supposed to develop that intuition?

41
00:02:24.930 --> 00:02:30.080
And the frustrating response is,
you just got to do it a bunch, right?

42
00:02:30.080 --> 00:02:31.840
You just gotta do it and
screw up a bunch, and

43
00:02:31.840 --> 00:02:35.790
then eventually you get to the point where
you've seen something like that before and

44
00:02:35.790 --> 00:02:39.319
it occurs to you to try this,
out of the box thing and it works.

45
00:02:40.820 --> 00:02:42.240
I share that anecdote with you,

46
00:02:42.240 --> 00:02:46.350
because that's exactly what I'm about
to do slide after slide, after slide.

47
00:02:46.350 --> 00:02:49.140
I'm about to pull stuff completely
out of thin air that would

48
00:02:49.140 --> 00:02:51.900
completely never occurred to any of you.

49
00:02:51.900 --> 00:02:54.730
It would never have occurred to me in
a million years to try these things.

50
00:02:56.080 --> 00:03:00.300
But somehow the mathematicians tried
it and tried it, and tried it.

51
00:03:00.300 --> 00:03:02.270
And it just makes it work.

52
00:03:02.270 --> 00:03:04.990
I can't explain the math to you,
but I can tell you,

53
00:03:04.990 --> 00:03:09.120
I can explain from a programming
perspective sort of what's going on, okay?

54
00:03:09.120 --> 00:03:11.340
So when you feel like,
why would you try that?

55
00:03:11.340 --> 00:03:12.480
That's exactly what I feel like.

56
00:03:12.480 --> 00:03:13.380
Why did they try it?

57
00:03:13.380 --> 00:03:13.940
I don't know.

58
00:03:13.940 --> 00:03:16.280
Other than that it works, okay?

59
00:03:17.470 --> 00:03:19.920
So let's start again from the beginning.

60
00:03:19.920 --> 00:03:22.930
We have this map filter and reduce.

61
00:03:22.930 --> 00:03:26.916
And we observed that clearly maps filters
don't compose with each other and

62
00:03:26.916 --> 00:03:29.481
they definitely don't
compose with reducers.

63
00:03:29.481 --> 00:03:32.620
As a matter of fact,
two reducers don't compose together.

64
00:03:32.620 --> 00:03:35.780
Two high order reducers
to transistors do but

65
00:03:35.780 --> 00:03:38.950
two reducers can't even compose together.

66
00:03:38.950 --> 00:03:40.840
So these are clearly not
of the right shape and

67
00:03:40.840 --> 00:03:43.479
we've gotta change some shapes
around to make this stuff work.

68
00:03:44.660 --> 00:03:46.050
So how are we gonna do that?

69
00:03:46.050 --> 00:03:48.470
Well, number one,
we want to observe that mapping and

70
00:03:48.470 --> 00:03:53.380
filtering can fundamentally be
modeled as a reduction operation.

71
00:03:53.380 --> 00:03:54.880
And I mentioned this
earlier in the course, but

72
00:03:54.880 --> 00:03:57.020
now I'm gonna show you how we do it, okay?

73
00:03:57.020 --> 00:04:01.950
So what we're first gonna do is take
the map and the filter parts, and

74
00:04:01.950 --> 00:04:05.400
do them with reductions.

75
00:04:05.400 --> 00:04:06.240
Lets look at the top.

76
00:04:06.240 --> 00:04:08.806
I'm going to use my little
cursor here to help you,

77
00:04:08.806 --> 00:04:10.845
cuz there's a lot of code on this slide.

78
00:04:10.845 --> 00:04:13.208
So I'm gonna to help you
know what to focus on.

79
00:04:13.208 --> 00:04:15.753
mapWithReduce, this utility here,

80
00:04:15.753 --> 00:04:20.770
mapWithReduce is taking in an array and
a mapping function, okay?

81
00:04:20.770 --> 00:04:23.020
And it's going to call array.reduce on it.

82
00:04:23.020 --> 00:04:26.510
So all of a sudden you see we're
doing a mapping operation, but

83
00:04:26.510 --> 00:04:29.100
we're doing it with a reducer, okay?

84
00:04:29.100 --> 00:04:31.140
So what does that reduce are going to do?

85
00:04:31.140 --> 00:04:33.040
Well, first to draw
your attention to here.

86
00:04:33.040 --> 00:04:37.690
We're gonna start with an empty array is
the initial value for this reduction.

87
00:04:37.690 --> 00:04:40.710
The general strategy for
using reduced to do a map or

88
00:04:40.710 --> 00:04:44.890
a filter is, you make a new list and
then you stick stuff into it.

89
00:04:44.890 --> 00:04:47.940
So our initial value starts
out as an empty list and

90
00:04:47.940 --> 00:04:53.010
our reducer says I'm going
to push into that new list

91
00:04:53.010 --> 00:04:57.680
that accumulator list every time, the
result of calling mapping function on V.

92
00:04:59.070 --> 00:05:00.640
And then return that list.

93
00:05:00.640 --> 00:05:04.750
So in other words our reduction is not
actually getting the new value every time,

94
00:05:04.750 --> 00:05:07.520
it's just getting a growing and
growing array list.

95
00:05:09.290 --> 00:05:12.500
Everybody follow me there?

96
00:05:12.500 --> 00:05:16.530
The same technique is gonna be
true when we do the filter.

97
00:05:16.530 --> 00:05:20.060
We are going to call arr.reduce,
line nine.

98
00:05:20.060 --> 00:05:24.100
And we are gonna first call the predicate
function and if it returns true,

99
00:05:24.100 --> 00:05:25.880
stick it in the list.

100
00:05:25.880 --> 00:05:29.530
Otherwise, just don't do
anything with that value.

101
00:05:29.530 --> 00:05:33.475
It's not like we need to throw it away,
we just don't put it in the new list and

102
00:05:33.475 --> 00:05:36.420
then we just always keep
returning that list every time.

103
00:05:37.450 --> 00:05:41.870
So both of those have the same strategy,
which is start out with an empty array,

104
00:05:41.870 --> 00:05:46.330
go through the original array, and decide
what values to stick into the new array.

105
00:05:47.700 --> 00:05:51.340
That's how we do map and
filter operations with a reduce.

106
00:05:53.470 --> 00:05:55.480
Okay, so let's take a deep breath.

107
00:05:55.480 --> 00:05:57.040
Did I lose anyone at that point?

108
00:05:57.040 --> 00:06:02.040
Did that make sense to you how we can
do both maps and filters with a reduce?

109
00:06:03.620 --> 00:06:04.680
I wanna call something out.

110
00:06:04.680 --> 00:06:07.530
We're gonna come back to this, but
I wanna call something out just so

111
00:06:07.530 --> 00:06:12.410
that you're trying to develop this
instinct as a functional programmer here.

112
00:06:12.410 --> 00:06:13.808
What am I doing on line three?

113
00:06:17.599 --> 00:06:19.040
&gt;&gt; Speaker 2: Mutating an array
&gt;&gt; Kyle Simpson: I am

114
00:06:19.040 --> 00:06:21.670
mutating an array that was passed in.

115
00:06:21.670 --> 00:06:23.480
Does that smell like
a side effect to anyone?

116
00:06:24.610 --> 00:06:26.540
It absolutely is a side effect.

117
00:06:26.540 --> 00:06:28.458
So you might think to yourself,

118
00:06:28.458 --> 00:06:32.578
maybe the better way of doing this
instead of mutating the array would

119
00:06:32.578 --> 00:06:36.928
have been to create a brand new array
that has the value appended onto it.

120
00:06:36.928 --> 00:06:41.439
And that generally would
be absolutely how you would

121
00:06:41.439 --> 00:06:44.626
want to do a map with a reduce, okay?

122
00:06:44.626 --> 00:06:48.301
But I'm specifically cutting a corner
here, which is gonna turn out to

123
00:06:48.301 --> 00:06:53.175
in the math, it's gonna wash out, it's
gonna factor out, it's not gonna matter.

124
00:06:53.175 --> 00:06:57.295
But I just want you to get that intuition
of looking for side effects and

125
00:06:57.295 --> 00:06:58.025
avoiding them.

126
00:06:58.025 --> 00:07:02.055
The only reason we're using this here is
because the whole point of transduction is

127
00:07:02.055 --> 00:07:03.905
a performance optimization.

128
00:07:03.905 --> 00:07:07.925
We're deliberately in the math allowing
ourselves to cheat just a little bit and

129
00:07:07.925 --> 00:07:12.020
in the end, the solution works out, okay?

130
00:07:12.020 --> 00:07:14.570
But don't in a general sense,

131
00:07:14.570 --> 00:07:19.150
just ignore those sorts of side effects
they are important to pay attention to.

132
00:07:19.150 --> 00:07:23.038
Okay, so we have map with reduce and
we have filter with reduce.

133
00:07:23.038 --> 00:07:28.900
What's happening down on the bottom is
that we are calling first mapWithReduce.

134
00:07:28.900 --> 00:07:31.900
Now we're calling them as standalone
utilities instead of chained

135
00:07:31.900 --> 00:07:32.970
methods, right?

136
00:07:32.970 --> 00:07:36.002
We're passing list with the mapper add1.

137
00:07:36.002 --> 00:07:38.526
And then we're passing that new list,

138
00:07:38.526 --> 00:07:43.160
that mapped list into filterWithReduce
using the isOdd predicate.

139
00:07:43.160 --> 00:07:47.170
And that new list is the thing that
we then reduce with our sum reducer.

140
00:07:48.330 --> 00:07:51.613
And result still ends up at 42.

141
00:07:51.613 --> 00:07:56.529
Okay, so we have a mapWithReduce and
a filterWithReduce, but

142
00:07:56.529 --> 00:08:01.723
it would be easier for us to get
those reducers to be shaped together

143
00:08:01.723 --> 00:08:07.317
to compose if we extracted the reducer
out of these utilities, right?

144
00:08:07.317 --> 00:08:11.100
These utilities are standalone,
they do the reduction for us.

145
00:08:11.100 --> 00:08:15.930
But what if we just have these utilities
give us the reducer that we could use.

146
00:08:17.350 --> 00:08:21.130
So we're gonna make these utilities
instead of do the list thing.

147
00:08:21.130 --> 00:08:23.630
We're gonna make these
utilities return us a reducer.

148
00:08:24.670 --> 00:08:26.990
And then we'll do the reduction ourselves.

149
00:08:26.990 --> 00:08:27.920
Follow me?

150
00:08:27.920 --> 00:08:28.910
So let's do that.

151
00:08:28.910 --> 00:08:33.350
Let's change the mapWithReduce and
the filterWithReduce to instead of doing

152
00:08:33.350 --> 00:08:37.630
the reductions to just produce the reducer
for us, and we'll do the rest.

153
00:08:38.960 --> 00:08:40.230
Here's what that looks like.

154
00:08:40.230 --> 00:08:44.560
I now have a utility called mapReducer,
which only takes a mapping function.

155
00:08:44.560 --> 00:08:47.560
It doesn't need to concern itself
with the list at this point.

156
00:08:47.560 --> 00:08:49.480
It's just gonna take the mapping function.

157
00:08:49.480 --> 00:08:51.860
And it's gonna make me a reducer

158
00:08:51.860 --> 00:08:54.640
that could reduce any list
with that mapping function.

159
00:08:55.950 --> 00:08:58.698
That's what happening up
on lines two through five,

160
00:08:58.698 --> 00:09:02.680
is it's making a reducer that's hard
coded into use that mapping function.

161
00:09:02.680 --> 00:09:04.800
See a mapping function
there on line three?

162
00:09:04.800 --> 00:09:08.720
Back up, see a mapping
function there on line three?

163
00:09:08.720 --> 00:09:12.230
It's hard coded into this
reducer via closure, okay?

164
00:09:14.780 --> 00:09:18.700
The same thing is happening lines eight
through 13, we are going to pass in

165
00:09:18.700 --> 00:09:23.570
a predicate function and create a reducer
that is hard coded to use that predicate

166
00:09:23.570 --> 00:09:28.780
function in it's test of whether it
should push something into a list or not.

167
00:09:30.530 --> 00:09:31.200
Everybody with me here?

168
00:09:32.320 --> 00:09:33.910
So down at the bottom,

169
00:09:33.910 --> 00:09:36.760
what we're doing now is we have
three separate reduce calls.

170
00:09:37.910 --> 00:09:43.030
We create one reducer line
18 by passing in our mapper.

171
00:09:43.030 --> 00:09:47.480
We create another reducer
line 19 by passing in isOdd.

172
00:09:47.480 --> 00:09:49.940
And then, we already have
the sum reducer ready to go.

173
00:09:52.680 --> 00:09:57.710
So that's how we end up creating
the chain of three reductions.

174
00:09:58.820 --> 00:10:01.780
We still haven't put the reducers
together, but can everybody agree?

175
00:10:01.780 --> 00:10:06.491
Now that we've got three reducers, we've
made some significant progress because

176
00:10:06.491 --> 00:10:10.140
those things definitely are shaped
more similarly together, or

177
00:10:10.140 --> 00:10:13.876
at least on the track towards being
able to compose them together.

178
00:10:13.876 --> 00:10:16.460
Are you with me?

179
00:10:16.460 --> 00:10:21.887
Any questions about that step of the
derivation, extracting out our reducers?

180
00:10:24.125 --> 00:10:24.985
&gt;&gt; Kyle Simpson: Yes?

181
00:10:24.985 --> 00:10:29.810
&gt;&gt; Speaker 3: So
reduce is like the adapter, right?

182
00:10:31.180 --> 00:10:32.770
Can you say that, I mean.

183
00:10:32.770 --> 00:10:34.800
&gt;&gt; Kyle Simpson: I'm not
sure what you mean by that.

184
00:10:34.800 --> 00:10:38.970
&gt;&gt; Speaker 3: That it's the one that's
gonna bring the other functions

185
00:10:40.610 --> 00:10:41.330
together, right?

186
00:10:41.330 --> 00:10:42.390
&gt;&gt; Kyle Simpson: Not exactly.

187
00:10:42.390 --> 00:10:45.990
So what's gonna bring,
reduce is sort of the interface.

188
00:10:45.990 --> 00:10:49.070
&gt;&gt; Speaker 3: That's, I mean-
&gt;&gt; Kyle Simpson: It's not the adapter,

189
00:10:49.070 --> 00:10:49.880
it's the interface.

190
00:10:49.880 --> 00:10:54.674
We're saying, the shape of a reducer
is the thing that is mathematically

191
00:10:54.674 --> 00:10:58.697
capable of being composed together
with any other reducer but

192
00:10:58.697 --> 00:11:02.820
actually it's higher order
reduces that composed together.

193
00:11:02.820 --> 00:11:03.622
Yeah.

194
00:11:03.622 --> 00:11:05.084
&gt;&gt; Speaker 3: [INAUDIBLE]
&gt;&gt; Kyle Simpson: Okay, so

195
00:11:05.084 --> 00:11:09.572
reduce kind of just this interface that
we know through the math we know is gonna

196
00:11:09.572 --> 00:11:10.530
work out for us.

