WEBVTT

1
00:00:00.000 --> 00:00:00.653
&gt;&gt; Kyle Simpson: Yes?
&gt;&gt; Speaker 2: So

2
00:00:00.653 --> 00:00:05.266
if you were gonna use a less
common type of combinator, say for

3
00:00:05.266 --> 00:00:10.322
your reducer you wanted to multiply
all of them instead of add them,

4
00:00:10.322 --> 00:00:12.380
will you just not use into?

5
00:00:12.380 --> 00:00:15.420
&gt;&gt; Kyle Simpson: You wouldn't use into,
you would use the general transduce and

6
00:00:15.420 --> 00:00:16.270
pass your own in.

7
00:00:16.270 --> 00:00:22.089
Yep, into literally calls transduce with
the properly selected default combinator.

8
00:00:22.089 --> 00:00:26.742
So it's just a shorthand when you're doing
a general transducing that it can select

9
00:00:26.742 --> 00:00:27.276
for you.

10
00:00:27.276 --> 00:00:30.626
Otherwise, you just use the basic
transduce method, okay?

11
00:00:30.626 --> 00:00:35.354
So what you should pattern match against
is, if I start with a couple of slides

12
00:00:35.354 --> 00:00:39.498
ago, a couple of maps, maybe a filter,
maybe a couple of reduces,

13
00:00:39.498 --> 00:00:44.916
pattern match that and say, I need to turn
that into a single transduction, okay?

14
00:00:44.916 --> 00:00:47.938
And then each of the maps and
each of the filters,

15
00:00:47.938 --> 00:00:52.530
I need to convert the way that I am
converting up here on line 6 and line 7.

16
00:00:52.530 --> 00:00:57.046
I need to convert those into this weirdly
shaped thing, it's a proto-reducer,

17
00:00:57.046 --> 00:00:59.742
it's waiting for
a reducer to become a reducer.

18
00:00:59.742 --> 00:01:03.665
I need to shape those into that and
then compose them together.

19
00:01:03.665 --> 00:01:07.466
And that's really actually the hardest
part, which is not even that hard at all.

20
00:01:07.466 --> 00:01:10.370
But that's the hardest part,
is do that and

21
00:01:10.370 --> 00:01:14.853
then simply call our transduce helper and
it takes care of the rest.

22
00:01:14.853 --> 00:01:15.541
Yes?

23
00:01:15.541 --> 00:01:19.792
&gt;&gt; Speaker 3: Just how would you
compose sorting in something like this?

24
00:01:19.792 --> 00:01:24.176
Cuz that's what I always think of is like,
filter sort map-

25
00:01:24.176 --> 00:01:25.741
&gt;&gt; Kyle Simpson: Sorting.

26
00:01:25.741 --> 00:01:29.132
&gt;&gt; Speaker 3: Is there something like?

27
00:01:29.132 --> 00:01:33.107
&gt;&gt; Kyle Simpson: You can
implement sort as a reduce, but

28
00:01:33.107 --> 00:01:36.731
it would be much more complicated.

29
00:01:36.731 --> 00:01:42.210
So that wouldn't be typically something
that you would transduce over, but

30
00:01:42.210 --> 00:01:47.286
it is certainly possible that you
could write that as a reducer, yeah.

31
00:01:47.286 --> 00:01:51.604
Definitely don't use array.sort,
because that's a mutator in place,

32
00:01:51.604 --> 00:01:53.049
that one's not FP safe.

33
00:01:53.049 --> 00:01:55.920
Essentially the technique
that you would use,

34
00:01:55.920 --> 00:01:59.866
now that I'm think about it,
the technique that you would use for

35
00:01:59.866 --> 00:02:04.409
sorting with reduce, is basically
the same thing as mapping with reduce.

36
00:02:04.409 --> 00:02:07.674
Except that you would be
looking at your accumulator and

37
00:02:07.674 --> 00:02:11.980
in doing a sort of insertion sort kind
of thing, you would be mutating, or

38
00:02:11.980 --> 00:02:15.120
you'd be placing stuff in
at the appropriate thing.

39
00:02:15.120 --> 00:02:18.967
So each time you got a new value, you'd
figure out where it went in the new array.

40
00:02:18.967 --> 00:02:22.806
And the end result of that would have been
like a mapping where everything just got

41
00:02:22.806 --> 00:02:23.720
shuffled around.

42
00:02:23.720 --> 00:02:27.110
So yeah, that you could
absolutely implement it that way.

43
00:02:27.110 --> 00:02:30.974
&gt;&gt; Speaker 4: Is a transducer
a higher order reducer then?

44
00:02:30.974 --> 00:02:34.484
&gt;&gt; Kyle Simpson: Yes, it is,
a transducer is a higher order reducer,

45
00:02:34.484 --> 00:02:36.128
that's exactly right.

46
00:02:36.128 --> 00:02:37.719
It's probably better than proto reducer,

47
00:02:37.719 --> 00:02:39.916
I was struggling to come up with
the right way to describe it.

48
00:02:39.916 --> 00:02:43.868
It is a higher order reducer,
that's exactly what it is.

49
00:02:43.868 --> 00:02:48.505
&gt;&gt; Speaker 4: Or someone else put
partial reducer, I don't know?

50
00:02:48.505 --> 00:02:49.745
&gt;&gt; Kyle Simpson: I don't
think I would call it that.

51
00:02:54.177 --> 00:02:56.344
&gt;&gt; Kyle Simpson: Partial has some
baggage in functional programming,

52
00:02:56.344 --> 00:02:57.810
I don't know if I would call it that.

