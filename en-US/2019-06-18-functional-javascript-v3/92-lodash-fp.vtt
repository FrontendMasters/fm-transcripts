WEBVTT

1
00:00:00.024 --> 00:00:03.290
&gt;&gt; Kyle Simpson: All right, everyone take
a big deep breath because we have come

2
00:00:03.290 --> 00:00:06.250
quite a long way in this course together.

3
00:00:06.250 --> 00:00:11.146
Think back to where we started from the
function, the idea of what a function is,

4
00:00:11.146 --> 00:00:15.698
and what function purity is all about and
how to manage that sort of purity.

5
00:00:15.698 --> 00:00:20.610
And then we talked about closure, and
we talked about value immutability,

6
00:00:20.610 --> 00:00:24.830
and recursion, and lifting operations,
the data structures,

7
00:00:24.830 --> 00:00:28.070
and A Synchrony and so
many other sorts of topics.

8
00:00:29.160 --> 00:00:30.200
All along the way,

9
00:00:30.200 --> 00:00:34.980
we've assumed that the presence of a
variety of helpers to let us do that work.

10
00:00:36.140 --> 00:00:40.040
And I thought it was important for us to
finish our discussion together by pointing

11
00:00:40.040 --> 00:00:42.860
you at a couple of resources
along those lines.

12
00:00:42.860 --> 00:00:47.467
This is certainly not an exhaustive list,
but I wanted to briefly intro or

13
00:00:47.467 --> 00:00:52.300
briefly orient you to a couple of
the major functional programming libraries

14
00:00:52.300 --> 00:00:53.580
that are out there.

15
00:00:53.580 --> 00:00:56.021
So that's what we are gonna
talk about here for

16
00:00:56.021 --> 00:00:58.310
just the last couple of minutes together.

17
00:00:58.310 --> 00:01:01.310
The first one that we're going
to look at is called LODASH/FP.

18
00:01:01.310 --> 00:01:05.517
And what you need to know about
LODASH/FP it is not low dash,

19
00:01:05.517 --> 00:01:10.467
it is low dash where they have adapted
all of the functions to behave as if

20
00:01:10.467 --> 00:01:14.036
they should in a functional
programming library.

21
00:01:14.036 --> 00:01:18.180
And there are a number of places
that I have discovered over time.

22
00:01:18.180 --> 00:01:22.552
Where there's some interesting little
quirks, and so, if you are going to pick

23
00:01:22.552 --> 00:01:26.926
a library, don't just pick a library and
then throw the code snippets from these

24
00:01:26.926 --> 00:01:30.990
slides out it and just expect it to
always work exactly the right way.

25
00:01:30.990 --> 00:01:33.577
It's really important to
read the documentation for

26
00:01:33.577 --> 00:01:34.963
whatever library you pick.

27
00:01:34.963 --> 00:01:41.200
And LODASH/FP is very lodash/esque but
in a in a functional programming flavor.

28
00:01:41.200 --> 00:01:43.020
And if you already use Lodash,

29
00:01:43.020 --> 00:01:46.930
it makes a lot of sense to switch
to using something like LODASH/FP.

30
00:01:46.930 --> 00:01:50.010
If you don't use a functional
programming library at all,

31
00:01:50.010 --> 00:01:53.130
I'm not really sure that this is
the one I'd recommend you switch to.

32
00:01:53.130 --> 00:01:55.790
But if you've already used
a lot of Lodash before,

33
00:01:55.790 --> 00:01:59.040
this is absolutely the next logical step,
okay?

34
00:01:59.040 --> 00:02:02.400
So let's take a look,
there's a way you can find information,

35
00:02:02.400 --> 00:02:04.550
the documentation about Lodash/FP.

36
00:02:04.550 --> 00:02:09.200
Let's take a look at a quick
example of how we use Lodash/FP.

37
00:02:09.200 --> 00:02:13.350
So, we're gonna require and, this is
like if we're using something node JS,

38
00:02:13.350 --> 00:02:16.560
we're gonna require and Lodash/FP.

39
00:02:16.560 --> 00:02:19.980
So it's a separate name space
in Lodash in the package,

40
00:02:19.980 --> 00:02:23.470
that has all of the same
methods copied over but then,

41
00:02:23.470 --> 00:02:27.180
reshaped to look the way that they're
supposed to look for a functional library.

42
00:02:27.180 --> 00:02:31.950
So for example, we have something like
fp.reduce, and we give it the reducer and

43
00:02:31.950 --> 00:02:36.650
the initial value in the array, and
then we get a reduced value out of it.

44
00:02:36.650 --> 00:02:39.970
Exactly the way you'd expect
out of a normal reduce.

45
00:02:39.970 --> 00:02:42.362
Remember, we've talked about
curry a number of times.

46
00:02:42.362 --> 00:02:46.060
In Lodash/fp, and this will be the same
for the next slide we will look at.

47
00:02:46.060 --> 00:02:52.096
If you want to tell it how many values to
curry for, the function name is curryN.

48
00:02:52.096 --> 00:02:57.029
And curryN takes as its first input,
the number that you want to curry for,

49
00:02:57.029 --> 00:02:58.919
so in this case it's three.

50
00:02:58.919 --> 00:03:02.070
And then it takes the function
that you wanna curry.

51
00:03:02.070 --> 00:03:07.885
Interestingly, if you use curry without
the curry in, like if you just use curry.

52
00:03:07.885 --> 00:03:13.240
It will automatically try to detect how
many arguments the function is expecting,

53
00:03:13.240 --> 00:03:15.995
and there are mixed
results with whether or

54
00:03:15.995 --> 00:03:19.320
not that auto-detection will work or not.

55
00:03:19.320 --> 00:03:24.010
So most people that use curry use the
explicit form where they tell it, no, no,

56
00:03:24.010 --> 00:03:26.380
no, I want you to curry for three inputs.

57
00:03:26.380 --> 00:03:30.439
So you'll more often than not use
something like curryN, but just be aware,

58
00:03:30.439 --> 00:03:34.571
if you see curry, it's doing the sort
of auto detection kind of thing, okay?

59
00:03:34.571 --> 00:03:42.396
But f is now, in a three already
curry version of our function f.

60
00:03:42.396 --> 00:03:48.373
And g is the composition
of calling that add(1).

61
00:03:48.373 --> 00:03:54.592
So fp.add(1), that add utility that
Lodash provides is curried, so

62
00:03:54.592 --> 00:04:00.528
we can provide it with only one input,
and we're gonna get back what?

63
00:04:00.528 --> 00:04:05.260
A unary function, so we're gonna get
back an increment that's waiting.

64
00:04:05.260 --> 00:04:08.310
So we're making a composition
between an increment and

65
00:04:08.310 --> 00:04:10.840
whatever came back from f (1,4).

66
00:04:10.840 --> 00:04:15.700
So we would essentially call f (1,4), and
we get back a function that's waiting for

67
00:04:15.700 --> 00:04:17.830
one more input, the z input.

68
00:04:17.830 --> 00:04:21.440
And we give it that z input the value ten.

69
00:04:21.440 --> 00:04:24.710
So 10 is the value z, that goes in,

70
00:04:24.710 --> 00:04:29.620
it's multiplied by the four, and
then we have the one in there.

71
00:04:29.620 --> 00:04:33.680
So we have 41 that flows into
the increment on line 13,

72
00:04:33.680 --> 00:04:35.650
and that's why we get the value 42, okay?

73
00:04:37.520 --> 00:04:38.860
So you see all the bits and

74
00:04:38.860 --> 00:04:41.310
pieces that we've been talking
about through this whole course.

75
00:04:41.310 --> 00:04:45.840
You see curried functions,
you see reduce, you see compose.

76
00:04:45.840 --> 00:04:47.000
All of those same things,

77
00:04:47.000 --> 00:04:49.779
the way we would expect,
they're provided to with lodash/fp.

78
00:04:51.990 --> 00:04:54.750
Any questions about that
particular library?

79
00:04:57.580 --> 00:05:01.200
Definitely check out the documentation
to get more familiar with it.

