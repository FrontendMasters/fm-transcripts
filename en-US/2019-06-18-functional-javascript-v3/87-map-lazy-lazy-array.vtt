WEBVTT

1
00:00:00.030 --> 00:00:01.610
&gt;&gt; Kyle Simpson: So far in this course,

2
00:00:01.610 --> 00:00:04.550
we've looked at a whole bunch
of different perspectives on

3
00:00:04.550 --> 00:00:09.440
how we can perform operations on values
in a functionally consistent way.

4
00:00:10.840 --> 00:00:13.630
But all of the values that we've
been performing them on have been

5
00:00:13.630 --> 00:00:16.640
values that are present
at this exact moment.

6
00:00:16.640 --> 00:00:20.453
For example, we take the number 42 and
we increment it to the number 43.

7
00:00:20.453 --> 00:00:24.830
Or we take a list of these numbers and
we turn them into a list of strings.

8
00:00:24.830 --> 00:00:27.490
These are all things that
are present immediately right now.

9
00:00:28.880 --> 00:00:31.980
The great part about functional
programming is that all of the concepts

10
00:00:31.980 --> 00:00:37.510
that we have learned extend not just
to the values that are present now,

11
00:00:37.510 --> 00:00:41.460
but also to the values that
will be present eventually.

12
00:00:41.460 --> 00:00:45.080
So we wanna look at a way,
a way, not the only way, but

13
00:00:45.080 --> 00:00:50.330
a way of adapting functional
principles to asynchronous programming.

14
00:00:50.330 --> 00:00:53.075
I wanna motivate that by first saying,

15
00:00:53.075 --> 00:00:56.829
here's a synchronous version
of a .map operation.

16
00:00:56.829 --> 00:01:02.111
We have an array called a with
the values 1, 2, and 3 in it and

17
00:01:02.111 --> 00:01:08.916
we call a.map, we're gonna get another
array back b that has 2, 4, 6 in it.

18
00:01:08.916 --> 00:01:13.462
We can only get that array 2,
4, 6 because the numbers 1, 2,

19
00:01:13.462 --> 00:01:16.564
3 were in the array at
the time of .map call.

20
00:01:17.870 --> 00:01:22.725
If I flipped this code around,
if I said a.map on an empty array and

21
00:01:22.725 --> 00:01:27.509
then after the .map call,
I added the numbers 1, 2, 3 in it.

22
00:01:27.509 --> 00:01:32.140
You're not gonna expect those numbers
to have ended up in b, are you?

23
00:01:32.140 --> 00:01:35.280
So that's what we mean by it is
synchronous and it is eager,

24
00:01:35.280 --> 00:01:39.770
it's gonna consume everything that it
has available to it in that array and

25
00:01:39.770 --> 00:01:41.810
it's gonna do it right now.

26
00:01:41.810 --> 00:01:47.977
And if there's a value that comes later,
if I later on line 8 said a.push 4.

27
00:01:47.977 --> 00:01:49.890
A values is not gonna show up in b, is it?

28
00:01:51.420 --> 00:01:54.570
Only the values that show up in
b are the values that were in

29
00:01:54.570 --> 00:01:56.970
a at the time of the map.

30
00:01:56.970 --> 00:01:59.590
That's what we call synchronous and
eager operations.

31
00:02:01.090 --> 00:02:06.668
But how could we do that same sort
of functional concept of mapping and

32
00:02:06.668 --> 00:02:08.601
do it lazily over time?

33
00:02:08.601 --> 00:02:12.900
It seems like such a great concept,
is there any way to adapt it over time?

34
00:02:12.900 --> 00:02:16.950
I'm gonna conceive of
a hypothetical data structure.

35
00:02:16.950 --> 00:02:19.140
This isn't something that actually exists.

36
00:02:19.140 --> 00:02:22.850
But I want you to imagine if I
had an operation called mapLazy,

37
00:02:24.230 --> 00:02:28.560
instead of map which we know is map eager,
what if I had a mapLazy?

38
00:02:28.560 --> 00:02:32.200
It doesn't matter that this doesn't exist,
this is just a construct for

39
00:02:32.200 --> 00:02:34.220
us to consider.

40
00:02:34.220 --> 00:02:39.590
Imagine a mapLazy that creates some
sort of a relationship between a and b.

41
00:02:40.770 --> 00:02:45.260
Where, at the moment,
on line 6, b is empty but

42
00:02:45.260 --> 00:02:49.610
at some later time when
I call a.push(1) and

43
00:02:49.610 --> 00:02:54.940
a has the value 1,
guess what is gonna be in b?

44
00:02:56.390 --> 00:03:01.172
It's gonna sort of retroactively run

45
00:03:01.172 --> 00:03:05.686
that map operation and show up in b.

46
00:03:05.686 --> 00:03:10.590
And then later I could do a.push again and

47
00:03:10.590 --> 00:03:15.480
the value will be not on the originally in
a, but the mapped value will show up in b.

48
00:03:17.360 --> 00:03:22.640
Can you see why a lazy map like that
would be a nice, cool tool if we had,

49
00:03:22.640 --> 00:03:27.290
it could create this sort of asynchronous
relationship between a and b.

50
00:03:27.290 --> 00:03:31.975
And it would solve a lot of our
problems in terms of mapping, or

51
00:03:31.975 --> 00:03:34.678
in terms of annotating in our code,

52
00:03:34.678 --> 00:03:39.922
flows of data that are not synchronous,
but asynchronous, right?

53
00:03:39.922 --> 00:03:43.690
Imagine a composition that was
like an asynchronous composition.

54
00:03:43.690 --> 00:03:46.370
Where the thing was here, and then it
was here, and then it was here, and

55
00:03:46.370 --> 00:03:49.300
then it was here, but
there was time involved in between.

56
00:03:51.360 --> 00:03:57.290
So mapLazy isn't a thing that exists, at
least not in this particular formulation.

57
00:03:57.290 --> 00:04:01.350
Let's twist it around a little bit and
instead of thinking about a mapLazy over

58
00:04:01.350 --> 00:04:05.980
regular arrays,
maybe what we really need is a lazy array.

59
00:04:07.020 --> 00:04:11.605
What is I could construct a thing
called a LazyArray, we'll call it a.

60
00:04:11.605 --> 00:04:16.144
And then over time, I'm just gonna
set up an interval and over time,

61
00:04:16.144 --> 00:04:20.239
once per second, I'm just gonna
push a random number into a.

62
00:04:20.239 --> 00:04:25.199
That would be an interesting
data structure because if I

63
00:04:25.199 --> 00:04:29.628
were then to set up a b,
which was a mapping from a,

64
00:04:29.628 --> 00:04:36.082
over time I would see the value showing
up in b, after they showed up in a.

65
00:04:36.082 --> 00:04:40.242
And the value that would show up in b was
the mapped value from what it was when it

66
00:04:40.242 --> 00:04:41.810
showed up in a.

67
00:04:41.810 --> 00:04:46.250
They've been instantaneous
propagation from a over into b.

68
00:04:46.250 --> 00:04:49.946
Every time and he showed up,
it would get mapped to a new value in b.

69
00:04:49.946 --> 00:04:54.920
In this b.forEach was sort of just
be like an event handler that was

70
00:04:54.920 --> 00:04:59.460
just getting called every time a new value
showed up, it invoked the forEach and

71
00:04:59.460 --> 00:05:01.206
in this case console logged it.

72
00:05:01.206 --> 00:05:03.375
So it's sort of an event listener almost,

73
00:05:03.375 --> 00:05:06.580
lazyArray would be a pretty cool
data structure, wouldn't it?

