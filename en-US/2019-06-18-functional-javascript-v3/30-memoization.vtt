WEBVTT

1
00:00:00.260 --> 00:00:02.280
&gt;&gt; Kyle Simpson: So in both cases,
closure enables us.

2
00:00:02.280 --> 00:00:06.080
It's a choice of where we put the code
to decide whether we want it to happen

3
00:00:06.080 --> 00:00:08.580
eagerly now or lazily later.

4
00:00:08.580 --> 00:00:10.360
The problem is that that's a tradeoff.

5
00:00:12.420 --> 00:00:15.570
It'd be kind of nice if
there was a happy medium,

6
00:00:15.570 --> 00:00:18.150
some way to have the best of both worlds,
right?

7
00:00:18.150 --> 00:00:20.050
Well, let's think about this.

8
00:00:20.050 --> 00:00:23.630
We want to do the work only once but

9
00:00:23.630 --> 00:00:27.000
we don't want to do the work
unless it's been asked for.

10
00:00:28.190 --> 00:00:32.503
So what if we put the work back
inside of the inner function,

11
00:00:32.503 --> 00:00:37.249
back online three and a half now,
but what if we can somehow detect

12
00:00:37.249 --> 00:00:42.287
that the work had it been down and
do it once but then never do it again?

13
00:00:42.287 --> 00:00:45.220
That means it's kind of like
compromised between the two.

14
00:00:45.220 --> 00:00:46.310
So what if we did this?

15
00:00:46.310 --> 00:00:48.720
What if we had a string
variable line two and

16
00:00:48.720 --> 00:00:53.820
then our function that we return,
it checks to see if string is undefined,

17
00:00:53.820 --> 00:00:56.290
which will only ever be
true the first time.

18
00:00:57.530 --> 00:00:59.369
And if it is undefined, we do the work.

19
00:01:00.740 --> 00:01:05.050
And then from then on, we never redo
the work because we only did it once and

20
00:01:05.050 --> 00:01:08.370
now string is actually a string,
it's not undefined anymore.

21
00:01:08.370 --> 00:01:13.897
So we just skip over that if statement and
just keep returning the same result.

22
00:01:13.897 --> 00:01:17.929
Now what line does the work happen on?

23
00:01:17.929 --> 00:01:20.104
Is it line 11 or line 13?

24
00:01:20.104 --> 00:01:20.888
&gt;&gt; Speaker 2: 13.

25
00:01:20.888 --> 00:01:22.040
&gt;&gt; Kyle Simpson: And what about line 14?

26
00:01:22.040 --> 00:01:25.170
It doesn't happen on line 14, right?

27
00:01:25.170 --> 00:01:26.940
Cuz we've already done it on line 13.

28
00:01:26.940 --> 00:01:32.020
So now we have the best of both worlds,
we deferred but

29
00:01:32.020 --> 00:01:35.860
then we still only did it once,
and we cached the result.

30
00:01:36.930 --> 00:01:41.900
Now, in the previous examples,
it was pretty clear,

31
00:01:41.900 --> 00:01:46.320
we are closed our variable that wasn't
changing, so the function was still pure.

32
00:01:46.320 --> 00:01:52.316
But I wanna ask you, how sure are you
that this code is functionally pure?

33
00:01:57.302 --> 00:01:58.725
&gt;&gt; Kyle Simpson: Look at what's happening.

34
00:01:58.725 --> 00:02:02.759
Remember, we said one of the key hallmarks
is that if we're gonna close over

35
00:02:02.759 --> 00:02:05.659
something and
it still needs to be functionally pure,

36
00:02:05.659 --> 00:02:07.631
what did we say we cannot close over?

37
00:02:11.122 --> 00:02:14.766
&gt;&gt; Kyle Simpson: We said absolutely
don't close over something that what?

38
00:02:14.766 --> 00:02:16.550
That changes.

39
00:02:16.550 --> 00:02:20.041
Does the string variable change over time?

40
00:02:20.041 --> 00:02:20.721
&gt;&gt; Speaker 3: Yes.

41
00:02:20.721 --> 00:02:25.474
&gt;&gt; Kyle Simpson: It changes from undefined
to being defined as a string, and

42
00:02:25.474 --> 00:02:29.000
we are closed over
a thing that is changing.

43
00:02:29.000 --> 00:02:34.700
That should be very, very suspicious to
you, red flags should be going off saying.

44
00:02:34.700 --> 00:02:36.050
Is this functionally pure or not?

45
00:02:37.120 --> 00:02:40.030
That's what a functional programmer does,
they look at something and they say,

46
00:02:40.030 --> 00:02:42.540
wait a minute, you closed over
a variable that gets reassigned.

47
00:02:42.540 --> 00:02:44.710
I'm not sure about this, right?

48
00:02:44.710 --> 00:02:48.693
Because, usually, when you close over
a variable that gets reassigned,

49
00:02:48.693 --> 00:02:50.092
what is usually the case?

50
00:02:50.092 --> 00:02:51.389
It's usually impure, right?

51
00:02:53.620 --> 00:02:57.660
So what about our
A function call on line 13?

52
00:02:57.660 --> 00:02:59.117
Is it a pure function call?

53
00:03:03.165 --> 00:03:07.044
&gt;&gt; Kyle Simpson: The answer to that
question can be found on line 14.

54
00:03:07.044 --> 00:03:08.864
And line 15 and 16 and 17.

55
00:03:08.864 --> 00:03:10.430
No matter how many times we call it.

56
00:03:10.430 --> 00:03:14.353
How many times could I
call this function and

57
00:03:14.353 --> 00:03:18.496
have it return the exact
same string of Ten As?

58
00:03:18.496 --> 00:03:21.110
No matter how many times I call it,
I'm always gonna get back As, right?

59
00:03:22.300 --> 00:03:27.000
Remember, when I turned the Rubik's Cube
earlier and I said a pure function call is

60
00:03:27.000 --> 00:03:32.960
characterized by, given the same input,
it always produces the same output.

61
00:03:34.720 --> 00:03:41.339
So A satisfies that definition
of a pure function call.

62
00:03:41.339 --> 00:03:46.700
But the code is not obviously pure.

63
00:03:48.070 --> 00:03:51.256
We have to go convince
ourselves that it is pure.

64
00:03:51.256 --> 00:03:53.626
Are you following me?

65
00:03:53.626 --> 00:03:57.081
So we've defeated one of
the most important reasons for

66
00:03:57.081 --> 00:03:59.890
doing functional programming.

67
00:03:59.890 --> 00:04:03.250
I mean, yes,
we want a program to work, but

68
00:04:03.250 --> 00:04:07.700
functional programming is not worth it
unless it is readable and understandable.

69
00:04:08.880 --> 00:04:13.222
If a reader read this code, if they
glanced at it immediately they would be

70
00:04:13.222 --> 00:04:17.844
much more likely to assume, a functional
programmer, would be more likely to

71
00:04:17.844 --> 00:04:21.576
assume that this code is impure
than to assume that it's pure.

72
00:04:21.576 --> 00:04:24.330
And they would have to convince
themselves that it was pure.

73
00:04:24.330 --> 00:04:30.040
So in other words, I would say, this code
style leads to a low degree of confidence

74
00:04:30.040 --> 00:04:33.010
in the function period, as opposed to
what we saw on the previous slide,

75
00:04:33.010 --> 00:04:36.470
which we probably would've said high
degree of confidence in the purity.

76
00:04:37.510 --> 00:04:40.890
Because it's very clear the variable
doesn't get reassigned.

77
00:04:40.890 --> 00:04:45.270
Here it gets reassigned, but it's a very
special way of getting reassigned that

78
00:04:45.270 --> 00:04:50.400
isn't observable and, therefore, still
preserves the magic of function purity.

79
00:04:52.770 --> 00:04:54.710
So should you do this?

80
00:04:54.710 --> 00:04:57.320
This is certainly better for performance.

81
00:04:58.470 --> 00:05:03.370
We got the better trade off, or the better
performance benefit, we got lazy,

82
00:05:03.370 --> 00:05:05.440
but only did once in cash.

83
00:05:05.440 --> 00:05:07.790
For performance reasons,
you might wanna do this.

84
00:05:07.790 --> 00:05:10.539
But for stylistic reasons,
have we shot ourselves in the foot?

85
00:05:13.228 --> 00:05:16.150
&gt;&gt; Kyle Simpson: So
what if there was a way of achieving

86
00:05:16.150 --> 00:05:20.782
this performance benefit by
having a declarative style?

87
00:05:20.782 --> 00:05:23.430
Well now that would truly
sound functional, wouldn't it?

88
00:05:24.800 --> 00:05:29.680
I turns out, there is a utility for
exactly this kind of purpose.

89
00:05:29.680 --> 00:05:34.640
Which is, if you have a pure function,
which all your functions that

90
00:05:34.640 --> 00:05:37.800
you want to talk about in this course,
they should all be pure.

91
00:05:37.800 --> 00:05:41.210
If you have a pure function, you know that
giving the same input is always gonna

92
00:05:41.210 --> 00:05:44.050
produce the same output, or at least,
It's supposed to if it's pure.

93
00:05:45.150 --> 00:05:49.992
So what if we had some magic
way that we could only ever

94
00:05:49.992 --> 00:05:53.418
compute an output for an input once?

95
00:05:53.418 --> 00:05:58.347
And then sort of cache that information
and every other time that that same set of

96
00:05:58.347 --> 00:06:01.230
inputs came in just
return the cached output.

97
00:06:03.182 --> 00:06:05.410
&gt;&gt; Kyle Simpson: That'd be pretty cool,
wouldn't it?

98
00:06:05.410 --> 00:06:09.360
It turns out just such a utility exists,
and it's called memoize.

99
00:06:10.900 --> 00:06:14.080
We built into all of your favorite
functional programming libraries.

100
00:06:14.080 --> 00:06:15.560
Look at what memoize does.

101
00:06:15.560 --> 00:06:20.130
It takes a function that is not optimized.

102
00:06:20.130 --> 00:06:23.630
What is line 2 through 4 showing us?

103
00:06:23.630 --> 00:06:25.430
A lazy function, right?

104
00:06:25.430 --> 00:06:26.720
One that's gonna do the work every time.

105
00:06:28.060 --> 00:06:32.840
Memoize adapts that function,
it produces a new adapted function.

106
00:06:34.240 --> 00:06:36.630
It doesn't actually have
a different shape this time,

107
00:06:36.630 --> 00:06:38.710
it just has a different behavior.

108
00:06:38.710 --> 00:06:43.133
In this case, the different behavior is
that it's wrapped with some code which you

109
00:06:43.133 --> 00:06:44.089
don't see here.

110
00:06:44.089 --> 00:06:48.685
It's wrapped with some code that
will check all of the inputs, and

111
00:06:48.685 --> 00:06:54.650
if those inputs have been passed in
before, simply return the cache output.

112
00:06:54.650 --> 00:06:57.830
So it maintains an internal
cache that you don't see.

113
00:07:01.140 --> 00:07:02.650
So a couple of takeaways here.

114
00:07:03.750 --> 00:07:09.280
Number one, this style of code hopefully
is much more obviously pure T.

115
00:07:10.950 --> 00:07:14.180
Because we are crossing over any
variable that gets re-assigned.

116
00:07:15.970 --> 00:07:20.640
All the variables that we are using,
they only get assigned once.

117
00:07:20.640 --> 00:07:21.250
Everybody with me?

118
00:07:21.250 --> 00:07:24.020
The count variable, the closed
server count, so in other words,

119
00:07:24.020 --> 00:07:28.310
the original function that we wrote was
the best version of the function we wrote.

120
00:07:28.310 --> 00:07:30.123
We didn't need to change its definition.

121
00:07:30.123 --> 00:07:32.136
We just needed to memoize it.

122
00:07:35.721 --> 00:07:38.534
&gt;&gt; Kyle Simpson: By the way,
this term, memoization,

123
00:07:38.534 --> 00:07:41.530
I don't know where that word comes from.

124
00:07:41.530 --> 00:07:42.310
I've tried to look.

125
00:07:42.310 --> 00:07:43.200
I've tried to search for it.

126
00:07:43.200 --> 00:07:43.990
I don't know where it comes from,

127
00:07:43.990 --> 00:07:48.630
but I have a way of thinking
about it that works for me.

128
00:07:48.630 --> 00:07:53.382
Memoization is like the word memorization,
but they forgot the r.

129
00:07:55.961 --> 00:07:58.640
&gt;&gt; Kyle Simpson: Like 90% of you
didn't get that joke, but that's okay.

130
00:07:58.640 --> 00:08:02.210
Memoization is like the word
memorization without the r in it, okay?

131
00:08:03.320 --> 00:08:05.510
I don't know if that's where it comes
from, but that's what works for me.

132
00:08:05.510 --> 00:08:07.560
That's how I memorize and

133
00:08:07.560 --> 00:08:11.650
how I remember it,
is that it's memorization without the R.

134
00:08:11.650 --> 00:08:13.590
So, memoization, that's this technique.

135
00:08:15.090 --> 00:08:19.260
One takeaway is that it allows us to write
that more declarative style that is more

136
00:08:19.260 --> 00:08:20.050
obviously pure.

137
00:08:21.350 --> 00:08:22.290
But there's another takeaway.

138
00:08:23.290 --> 00:08:26.080
Something that's very important for you,

139
00:08:26.080 --> 00:08:31.770
because you might think to yourself,
seems like this is a pretty cool utility.

140
00:08:31.770 --> 00:08:36.780
Maybe I ought to just memorize every
single function I've ever write, right?

141
00:08:36.780 --> 00:08:37.570
You might be thinking that.

142
00:08:39.380 --> 00:08:42.810
Consider the cost of memoization.

143
00:08:42.810 --> 00:08:45.480
It's not just that we're
wrapping a function around it.

144
00:08:45.480 --> 00:08:46.850
Consider the cost.

145
00:08:46.850 --> 00:08:49.381
Memoization is maintaining
an eternal cache,

146
00:08:49.381 --> 00:08:51.603
which is going to use additional memory.

147
00:08:51.603 --> 00:08:54.070
And there will be some slight
additional processing around.

148
00:08:55.160 --> 00:09:00.260
So you should ask yourself before passing
any function to a memoize utility,

149
00:09:00.260 --> 00:09:05.100
you should ask yourself, is this function
likely to benefit from memorization?

150
00:09:06.740 --> 00:09:09.010
So what are the cases where
memorization is useful?

151
00:09:10.260 --> 00:09:14.920
One characteristic is if
you expect it to be called

152
00:09:14.920 --> 00:09:17.620
multiple times with the same input.

153
00:09:18.910 --> 00:09:21.310
Well then that's clearly a case
where you want to use memorization.

154
00:09:23.380 --> 00:09:27.240
What if you expected it to be
called lots of different times, but

155
00:09:27.240 --> 00:09:30.140
every time it was called, it was
being called with a different input?

156
00:09:31.290 --> 00:09:33.818
Would that be a good
usage of a memoization?

157
00:09:33.818 --> 00:09:35.023
&gt;&gt; Speaker 3: It would
take up a lot of memory.

158
00:09:35.023 --> 00:09:36.830
&gt;&gt; Kyle Simpson: Use up a lot of memory,
right?

159
00:09:36.830 --> 00:09:42.390
So you have to somehow be able to
predict your likely expected use case,

160
00:09:42.390 --> 00:09:46.670
your usage pattern, for a function,
to decide if it should be memoized.

161
00:09:46.670 --> 00:09:49.950
Do not just memoize everything
because it's a cool trick.

162
00:09:50.980 --> 00:09:54.590
Memoize it if the usage pattern dictates
that you would benefit from that

163
00:09:54.590 --> 00:09:55.800
performance improvement.

164
00:09:55.800 --> 00:09:59.004
Otherwise, take out the memoize,
go back to two slides ago, and

165
00:09:59.004 --> 00:10:00.642
just leave it as a lazy function.

166
00:10:02.526 --> 00:10:03.394
&gt;&gt; Kyle Simpson: You with me?

167
00:10:06.514 --> 00:10:11.655
&gt;&gt; Kyle Simpson: That's the benefit of
thinking about this, in this bigger sense,

168
00:10:11.655 --> 00:10:18.540
thinking about function purity as what's
happening with the function calls.

169
00:10:18.540 --> 00:10:22.343
Now, you have a question and-
&gt;&gt; Speaker 2: The last example before we

170
00:10:22.343 --> 00:10:26.747
do the memoize, is that-
&gt;&gt; Speaker 2: Kind of an impure way of

171
00:10:26.747 --> 00:10:27.774
writing memoize?

172
00:10:27.774 --> 00:10:28.340
&gt;&gt; Kyle Simpson: Yep.

173
00:10:28.340 --> 00:10:30.845
&gt;&gt; Speaker 2: I'm just curious how-
&gt;&gt; Kyle Simpson: It's not an impure way of

174
00:10:30.845 --> 00:10:34.390
writing memoize,
it's just not as obviously pure.

175
00:10:34.390 --> 00:10:35.330
&gt;&gt; Speaker 2: Yeah-
&gt;&gt; Kyle Simpson: It's still technically

176
00:10:35.330 --> 00:10:36.140
pure-
&gt;&gt; Speaker 2: I'm just curious-

177
00:10:36.140 --> 00:10:36.793
&gt;&gt; Kyle Simpson: But it's not

178
00:10:36.793 --> 00:10:37.650
obviously so.

179
00:10:37.650 --> 00:10:39.130
And it's more imperative.

180
00:10:39.130 --> 00:10:43.860
&gt;&gt; Speaker 2: I'm just curious
how memoize would be written so

181
00:10:43.860 --> 00:10:47.480
that we wouldn't have this necessarily
obvious, or is it written this way?

182
00:10:47.480 --> 00:10:48.870
&gt;&gt; Kyle Simpson: It's
basically written this way.

183
00:10:48.870 --> 00:10:49.720
&gt;&gt; Speaker 2: But it's just-
&gt;&gt; Kyle Simpson: But

184
00:10:49.720 --> 00:10:53.510
it's inside of a utility that's
a vetted mathematically proven thing,

185
00:10:53.510 --> 00:10:56.450
as opposed to cluttering up our code and

186
00:10:56.450 --> 00:10:59.920
making the reader of our code second
guess, hey, is this pure enough?

187
00:10:59.920 --> 00:11:04.180
We know we can trust memoize is provided
to us by a well-known functional library.

188
00:11:04.180 --> 00:11:08.780
We don't know if you can trust your
ad hoc memoization on the fly.

189
00:11:08.780 --> 00:11:09.740
You follow me?

190
00:11:09.740 --> 00:11:11.420
That's a great question, by the way.

191
00:11:11.420 --> 00:11:12.350
That's the key.

192
00:11:12.350 --> 00:11:15.570
It's not that these things don't happen,
it's where they happen.

193
00:11:15.570 --> 00:11:19.780
Do we shift them into this thing and allow
that detail to be handled over here, so

194
00:11:19.780 --> 00:11:21.830
that my code I can focus
on the important stuff.

