WEBVTT

1
00:00:00.087 --> 00:00:01.669
&gt;&gt; Kyle Simpson: So functions.

2
00:00:01.669 --> 00:00:03.015
What is a function?

3
00:00:03.015 --> 00:00:04.950
Is it just the function keyword?

4
00:00:04.950 --> 00:00:05.597
True story.

5
00:00:05.597 --> 00:00:10.232
In my book, remember I talked
about the Functional-Light book,

6
00:00:10.232 --> 00:00:14.802
in my book I had started a repo,
this is actually how it happened.

7
00:00:14.802 --> 00:00:18.898
I was in Poland, teaching, and I had
people asking me to write a book about

8
00:00:18.898 --> 00:00:22.150
functional programming, but
I kept saying no, no, no.

9
00:00:22.150 --> 00:00:23.972
I'm not qualified.

10
00:00:23.972 --> 00:00:25.094
I don't know how to do that.

11
00:00:25.094 --> 00:00:30.016
I'm the least qualified person as a matter
of fact to write a book on functional

12
00:00:30.016 --> 00:00:30.993
programming.

13
00:00:30.993 --> 00:00:34.290
But I got this weird idea in my head I
said, maybe I could write something about

14
00:00:34.290 --> 00:00:37.767
functional programming sort of from
the perspective of how somebody learns it.

15
00:00:37.767 --> 00:00:40.870
Maybe that would be useful,
so I started a repo.

16
00:00:40.870 --> 00:00:43.460
Empty, and I didn't tell anybody about it.

17
00:00:43.460 --> 00:00:46.828
And I did as I do with all of my books,
which is everything's out there for free.

18
00:00:46.828 --> 00:00:52.299
I just started writing and committing
to this repo, late at night in Poland.

19
00:00:52.299 --> 00:00:56.985
And I wrote a sentence at
the beginning of chapter one.

20
00:00:56.985 --> 00:01:00.365
And that sentence basically said,
almost verbatim, it said,

21
00:01:00.365 --> 00:01:03.189
functional programming is
not all about functions.

22
00:01:04.290 --> 00:01:05.050
And I committed it.

23
00:01:05.050 --> 00:01:06.980
That plus a couple of other
things that I committed.

24
00:01:08.250 --> 00:01:10.860
And remember I hadn't told
anybody that I was doing this.

25
00:01:12.690 --> 00:01:14.910
Before I came back to the repo,
because I had to teach the next day.

26
00:01:14.910 --> 00:01:17.772
Before I came back to the repo,
somebody had found the repo.

27
00:01:17.772 --> 00:01:22.090
Several people had found the repo and
somebody had filed an issue on the repo.

28
00:01:23.170 --> 00:01:29.590
And when I opened the issue, paragraphs
of what are you doing, this is terrible.

29
00:01:29.590 --> 00:01:33.880
I cannot believe there are decades worth
of pedagogy on the topic of functional

30
00:01:33.880 --> 00:01:34.728
programming.

31
00:01:34.728 --> 00:01:39.058
And you are completely spreading
misinformation, telling people functional

32
00:01:39.058 --> 00:01:43.460
programming is not all about the function,
it's all about, just tore into me.

33
00:01:44.830 --> 00:01:48.976
It hurt my feelings for
about five seconds and then I smiled,

34
00:01:48.976 --> 00:01:52.571
because I realized I must
be doing something right.

35
00:01:52.571 --> 00:01:57.246
If I upset the functional programming
police then I must be on the right track.

36
00:01:57.246 --> 00:02:00.994
Now that sentence still exists,
it's the first sentence of chapter 2, and

37
00:02:00.994 --> 00:02:03.080
it's been slightly modified to clarify.

38
00:02:03.080 --> 00:02:05.801
Because I had a whole plan of what
I was going to say in Chapter 1 and

39
00:02:05.801 --> 00:02:06.952
I haven't written it yet.

40
00:02:06.952 --> 00:02:11.768
That was like my you know,
my keyword, my buzz line,

41
00:02:11.768 --> 00:02:15.845
my catch him attention or whatever, right?

42
00:02:15.845 --> 00:02:18.500
That sentence now is the first
sentence of chapter two.

43
00:02:18.500 --> 00:02:23.380
And it now says functional programming
is not all about the function keyword.

44
00:02:24.840 --> 00:02:26.373
Because that's what I meant.

45
00:02:26.373 --> 00:02:29.446
I've been using function
keywords all over my programs but

46
00:02:29.446 --> 00:02:32.709
that doesn't mean I've been
doing functional programming.

47
00:02:32.709 --> 00:02:34.347
Here's a function called add numbers.

48
00:02:34.347 --> 00:02:38.599
It takes in an x, y, zz and
a w, it adds those together to

49
00:02:38.599 --> 00:02:43.046
a variable called total and
it prints it out to the screen.

50
00:02:43.046 --> 00:02:47.660
Well it's using the function keyword,
But the question is, is it a function?

51
00:02:47.660 --> 00:02:49.743
And then we've got extra numbers.

52
00:02:49.743 --> 00:02:52.711
Which takes in some other inputs,
the dot dot dot rx by the way,

53
00:02:52.711 --> 00:02:56.982
if you don't know that, that's the just
gathering up everything into an array.

54
00:02:56.982 --> 00:03:01.331
So extra numbers seems to basically
be calling add numbers, but

55
00:03:01.331 --> 00:03:03.833
adding in a few other values into it.

56
00:03:03.833 --> 00:03:06.786
Sort of wrapping around or
calling this add numbers.

57
00:03:06.786 --> 00:03:07.800
With some of their inputs.

58
00:03:07.800 --> 00:03:12.109
So the question that we need
to confront the most critical

59
00:03:12.109 --> 00:03:16.344
question we can probably
answer in this entire course.

60
00:03:16.344 --> 00:03:19.210
Are those functions and if not, why not?

61
00:03:21.420 --> 00:03:23.741
So let's look at add numbers from them.

62
00:03:23.741 --> 00:03:26.939
It clearly does take some inputs X y z and
W and

63
00:03:26.939 --> 00:03:30.770
it clearly does do something
with those inputs.

64
00:03:30.770 --> 00:03:35.270
It adds them together into a total and
it even prints it out to the console.

65
00:03:35.270 --> 00:03:38.940
Because about it to the Dom or
whatever but it prints at the console.

66
00:03:38.940 --> 00:03:43.833
It's doing something that seems
like at least a minimally-based

67
00:03:43.833 --> 00:03:47.950
level line that it's doing
something with some input.

68
00:03:47.950 --> 00:03:50.660
So it's kind of like a function, right?

69
00:03:52.620 --> 00:03:54.045
Not exactly.

70
00:03:54.045 --> 00:03:58.383
Because the bar for
being a function is higher than that.

71
00:03:58.383 --> 00:04:01.592
If you were thinking about
this in Venn diagram sense,

72
00:04:01.592 --> 00:04:04.114
we've got this bigger outer bubble here.

73
00:04:04.114 --> 00:04:07.430
Of something, and
we gotta figure out what that's called.

74
00:04:07.430 --> 00:04:11.860
And then there's an inner bubble inside of
it of things that qualify as functions.

75
00:04:11.860 --> 00:04:15.514
And this particular add numbers is in
the outer bubble, not the inner one.

76
00:04:15.514 --> 00:04:18.953
It's not a function, so what is it?

77
00:04:18.953 --> 00:04:21.160
Best term you can give for
it is it's a procedure.

78
00:04:22.530 --> 00:04:26.160
A procedure is a collection of operations,

79
00:04:26.160 --> 00:04:28.640
a collection of things that
you need to do in a program.

80
00:04:29.740 --> 00:04:34.070
We all use procedures cuz we all need
to do stuff in our programs, okay?

81
00:04:34.070 --> 00:04:36.830
Just cuz it uses the function
keyword doesn't make it a function.

82
00:04:36.830 --> 00:04:43.170
It at least makes it a procedure
Procedures of course can take inputs,

83
00:04:43.170 --> 00:04:47.040
they can return outputs, they can do
things like print to the console.

84
00:04:48.300 --> 00:04:49.769
They can be called multiple times.

85
00:04:49.769 --> 00:04:52.346
There's lots of benefits to procedures,
but

86
00:04:52.346 --> 00:04:54.800
it's not called procedural programming.

87
00:04:54.800 --> 00:04:57.100
There's a whole thing called
procedural programming,

88
00:04:57.100 --> 00:05:00.940
we're talking about functional programming
which means we got to have functions so.

89
00:05:00.940 --> 00:05:03.087
What's the difference?

90
00:05:03.087 --> 00:05:07.158
Well, to understand the difference where
you and we're actually gonna uncover this

91
00:05:07.158 --> 00:05:10.730
across the next several sections
of our discussion here.

92
00:05:10.730 --> 00:05:13.891
We're gonna begin to
understand that question,

93
00:05:13.891 --> 00:05:19.023
what is the function by first saying, a
function not only has to take some input.

94
00:05:19.023 --> 00:05:23.654
It has to return some output.

95
00:05:23.654 --> 00:05:25.421
Not just print it to the console.

96
00:05:25.421 --> 00:05:27.046
It has to return it.

97
00:05:27.046 --> 00:05:31.006
In other words if it doesn't
have a return keyword,

98
00:05:31.006 --> 00:05:33.890
it is most definitely not a function.

99
00:05:33.890 --> 00:05:37.608
So any functions that you have
that don't ever return keywords,

100
00:05:37.608 --> 00:05:38.967
those are procedures.

101
00:05:38.967 --> 00:05:42.210
Now that's not a complete
definition of function.

102
00:05:42.210 --> 00:05:47.100
We're gonna evolve that definition over
the next, quite a bit of our discussion.

103
00:05:47.100 --> 00:05:51.539
And that evolution of that
definition is not gonna change or

104
00:05:51.539 --> 00:05:54.662
replace or make that statement invalid.

105
00:05:54.662 --> 00:05:59.312
It's more like if I was holding up a rubix
cube and if we looked at one side of

106
00:05:59.312 --> 00:06:04.488
the rubix cube, we'd only be getting the
part of the story of the puzzle, right?

107
00:06:04.488 --> 00:06:06.396
Right now that's just one
side of the Rubik's Cube.

108
00:06:06.396 --> 00:06:09.930
We got to look at all sides of the Rubik's
cube to understand the puzzle.

109
00:06:11.520 --> 00:06:15.630
So number one, it's not only going to take
some inputs and do something with it,

110
00:06:15.630 --> 00:06:18.820
it's got to return something, okay?

111
00:06:20.300 --> 00:06:21.740
What about extra numbers?

112
00:06:21.740 --> 00:06:23.129
It definitely has a return keyword.

113
00:06:23.129 --> 00:06:26.431
So is it a function?

114
00:06:26.431 --> 00:06:29.150
Well you notice that it's taking
some inputs in this case x and

115
00:06:29.150 --> 00:06:31.313
then it's got a number
40 that's hard coded.

116
00:06:31.313 --> 00:06:34.734
And then the rest of any arguments
are passed along in args.

117
00:06:34.734 --> 00:06:37.920
It's passing those along to this
other thing called addNumbers.

118
00:06:37.920 --> 00:06:39.588
And whatever that thing returns,

119
00:06:39.588 --> 00:06:42.298
which from the perspective
of 7 we don't know or care.

120
00:06:42.298 --> 00:06:45.240
Whatever it returns we return.

121
00:06:45.240 --> 00:06:48.877
So is extra numbers a function,
it takes inputs,

122
00:06:48.877 --> 00:06:52.787
it does something and
it returns some sort of output.

123
00:06:52.787 --> 00:06:56.344
You may be aware that in JavaScript
all functions minimally return

124
00:06:56.344 --> 00:06:58.270
the undefined value.

125
00:06:58.270 --> 00:07:00.369
So it is returning undefined, right?

126
00:07:00.369 --> 00:07:03.096
We see online three and
a half that there's no return value, so

127
00:07:03.096 --> 00:07:04.389
it's returning undefined.

128
00:07:06.610 --> 00:07:12.000
Well, there's a different side of
the Rubik's Cube, which is extra numbers,

129
00:07:12.000 --> 00:07:16.940
is not a function, because functions
can only call other functions.

130
00:07:18.810 --> 00:07:22.480
Functions can call procedures,
or poop, they become procedures.

131
00:07:23.640 --> 00:07:26.245
It's turtles all the way down.

132
00:07:26.245 --> 00:07:30.735
Okay, if you have a thing that is not
a function and it's called by something

133
00:07:30.735 --> 00:07:34.680
else, that pollutes that something
else to not being a function.

134
00:07:34.680 --> 00:07:36.260
It makes it a procedure.

135
00:07:36.260 --> 00:07:37.562
It doesn't make it bad.

136
00:07:37.562 --> 00:07:39.697
It doesn't mean that you should
delete it from your program.

137
00:07:39.697 --> 00:07:41.066
It just means it's not a function.

138
00:07:41.066 --> 00:07:45.269
And if it's not a function,
it doesn't get to play at the party.

139
00:07:45.269 --> 00:07:48.466
Of all the functional programming
stuff that we're gonna learn about.

140
00:07:48.466 --> 00:07:50.410
It has to be a function.

141
00:07:50.410 --> 00:07:55.020
That's the it has to be the number one if
we're going to add one in one to get to.

142
00:07:55.020 --> 00:07:58.480
Like this is one of the characteristic
identity things that has to be true

143
00:07:58.480 --> 00:08:02.100
is you can't do any functional programming
with a thing that's not a function.

144
00:08:02.100 --> 00:08:03.291
You follow me?

145
00:08:03.291 --> 00:08:05.913
That sounds obvious, but
we need to state that very clearly.

146
00:08:05.913 --> 00:08:09.870
It has to be a function for you to take
advantage of functional principles.

147
00:08:11.760 --> 00:08:15.172
There's a lot of ways that people use
things that look like functional APIs and

148
00:08:15.172 --> 00:08:16.835
they look like functional patterns.

149
00:08:16.835 --> 00:08:20.730
And they don't do them with those true,
honest-to-goodness functions.

150
00:08:21.860 --> 00:08:23.846
And that's not really functional.

151
00:08:23.846 --> 00:08:27.670
Okay, it's masquerading
as if it's functional.

152
00:08:27.670 --> 00:08:29.467
It's not really functional.

153
00:08:29.467 --> 00:08:33.920
So both of these don't qualify because
both of these violate some aspect of what

154
00:08:33.920 --> 00:08:35.390
we mean about a function.

155
00:08:37.430 --> 00:08:41.584
It's not just enough that you
have a key word there and

156
00:08:41.584 --> 00:08:47.875
just because it uses the word function,
we should still call these procedures.

157
00:08:47.875 --> 00:08:48.810
So what about this one?

158
00:08:50.200 --> 00:08:50.700
Tuple.

159
00:08:51.700 --> 00:08:53.532
Okay?
If you don't know the term tuple,

160
00:08:53.532 --> 00:08:57.350
just like you might not have known the
word coding, you don't know where tuple.

161
00:08:57.350 --> 00:09:02.169
It sounds more complicated is it's
just an array of elements basically.

162
00:09:02.169 --> 00:09:03.745
In JavaScript speak right.

163
00:09:03.745 --> 00:09:06.120
There's a more formal and
other programming languages.

164
00:09:06.120 --> 00:09:10.487
But here you just think of a tuple
as like two values in an array.

165
00:09:10.487 --> 00:09:15.680
So this function takes in an x and y and
it produces a two element array a tuple.

166
00:09:16.910 --> 00:09:21.940
That has x + 1 in the first element and
y- 1 in the second element.

167
00:09:21.940 --> 00:09:23.659
So if I call this tuple function.

168
00:09:23.659 --> 00:09:25.117
With the array five and ten, and

169
00:09:25.117 --> 00:09:28.306
I'm just doing some fancy stuff here
to show you the dot to dot spread.

170
00:09:28.306 --> 00:09:32.700
Can I just pass five and ten, but
essentially x is five and y is ten.

171
00:09:32.700 --> 00:09:36.012
And if I pass those two
values in the tuple,

172
00:09:36.012 --> 00:09:41.175
it's gonna produce an array that
has the values six and nine in it.

173
00:09:41.175 --> 00:09:44.283
Because five plus one and
ten minus one, okay?

174
00:09:44.283 --> 00:09:46.110
So we're gonna produce an array of 6 and
9.

175
00:09:46.110 --> 00:09:52.949
Now look what I'm doing on line 5,
I'm bringing back an array.

176
00:09:52.949 --> 00:09:56.320
But line 5 makes it clear that
I don't actually care about.

177
00:09:56.320 --> 00:09:59.494
Hear about the array.

178
00:09:59.494 --> 00:10:03.090
Line 5 is using a de-structuring syntax,
if you are not familiar with that.

179
00:10:03.090 --> 00:10:06.200
The de-structuring syntax says
hey whatever array you get back,

180
00:10:06.200 --> 00:10:11.040
what I actually care about
is the individual element.

181
00:10:11.040 --> 00:10:13.540
In this case, two individual elements.

182
00:10:13.540 --> 00:10:16.088
Give me those two individual elements,
call them a and b,

183
00:10:16.088 --> 00:10:17.289
that's what I care about.

184
00:10:19.110 --> 00:10:22.981
&gt;&gt; Kyle Simpson: So in essence what I
am saying is as a programmer, what I'm

185
00:10:22.981 --> 00:10:28.517
communicating to the reader of my code is
that tuple actually has two outputs here.

186
00:10:28.517 --> 00:10:30.779
I'm saying I don't care
about the one array,

187
00:10:30.779 --> 00:10:33.340
what I care about is the two
individual values in it.

188
00:10:33.340 --> 00:10:35.397
It's got two outputs.

189
00:10:35.397 --> 00:10:39.423
I'm going a little beyond
the technical definition of

190
00:10:39.423 --> 00:10:45.020
a function to say It takes some inputs,
and return some outputs.

191
00:10:45.020 --> 00:10:48.000
It can be one output, or in this case,

192
00:10:48.000 --> 00:10:51.820
depending on the style of coding,
could end up being multiple options.

