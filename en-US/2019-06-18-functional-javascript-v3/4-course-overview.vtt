WEBVTT

1
00:00:00.060 --> 00:00:01.297
&gt;&gt; Kyle Simpson: What are we in for
in this course?

2
00:00:01.297 --> 00:00:03.490
What are we looking at?

3
00:00:03.490 --> 00:00:07.916
We're gonna start talking about
the carabiners, and the ropes, and

4
00:00:07.916 --> 00:00:09.866
the knots, and the boots, and

5
00:00:09.866 --> 00:00:14.985
all those fundamental equipment things
that let us do functional programming.

6
00:00:14.985 --> 00:00:19.026
Here's a quick overview of what to expect.

7
00:00:19.026 --> 00:00:22.887
We're gonna start first with functions cuz
any discussion of functional programming,

8
00:00:22.887 --> 00:00:26.594
we probably need to understand functions
better, and here's a little bit of a hint,

9
00:00:26.594 --> 00:00:28.569
you probably don't know
what a function is.

10
00:00:28.569 --> 00:00:33.486
I certainly didn't until a couple of years
ago, I've been doing programming for

11
00:00:33.486 --> 00:00:36.479
a long time and
I didn't know what a function was,

12
00:00:36.479 --> 00:00:39.706
that's kind of basic thing
you are gonna start with.

13
00:00:39.706 --> 00:00:42.948
So we are gonna actually dig in a function
way more than we used to probably,

14
00:00:42.948 --> 00:00:44.810
we're gonna look at all different sizes.

15
00:00:44.810 --> 00:00:49.161
We are gonna look at closure,
you've probably heard or

16
00:00:49.161 --> 00:00:53.337
given at job interview at
some point what is closure.

17
00:00:53.337 --> 00:00:57.242
I would venture to say it is impossible
to understand functional programming

18
00:00:57.242 --> 00:00:58.994
without understanding closure.

19
00:00:58.994 --> 00:01:04.111
I've heard many people say,
I understand functional programming and

20
00:01:04.111 --> 00:01:09.074
what they mean is I'll use map and
reduce, that is a little piece of it.

21
00:01:09.074 --> 00:01:13.277
That is one of the pieces of equipment
that we need, but it is not sufficient to

22
00:01:13.277 --> 00:01:17.740
climb the mountain, closure is one of
the most critical pieces of the equipment,

23
00:01:17.740 --> 00:01:20.864
in fact it'll enable almost
everything else that we do.

24
00:01:20.864 --> 00:01:25.126
Now we're gonna look at composition,
the way that data flows and

25
00:01:25.126 --> 00:01:30.011
is mapped through our applications,
we're gonna look at immutability,

26
00:01:30.011 --> 00:01:33.653
how we manage the changes to values and
state over time,

27
00:01:33.653 --> 00:01:38.559
management of state change is one of
the big key ideals of all programming.

28
00:01:38.559 --> 00:01:42.909
Almost every framework, every programming
paradigm, they have some idea of what you

29
00:01:42.909 --> 00:01:46.975
ought to do with managing state over time,
cuz that's what a program really is.

30
00:01:46.975 --> 00:01:51.353
It's a state machine, it's managing state
over time, functional programming has

31
00:01:51.353 --> 00:01:55.816
a very specific way of thinking about that
question, so we'll look at immutability.

32
00:01:55.816 --> 00:01:59.079
Recursion is one that kind of scares
people similar to if I had thrown your

33
00:01:59.079 --> 00:02:01.863
regular expressions,
[LAUGH] if I said regular expressions,

34
00:02:01.863 --> 00:02:04.771
some of you would be like I don't
wanna do regular expressions.

35
00:02:04.771 --> 00:02:09.170
[LAUGH] It's okay,
recursion is useful and important.

36
00:02:09.170 --> 00:02:11.955
Not that you can solve every
problem with recursion, but

37
00:02:11.955 --> 00:02:13.529
you shouldn't be scared of it.

38
00:02:13.529 --> 00:02:14.732
It's a very useful tool and

39
00:02:14.732 --> 00:02:17.308
it's especially useful to
the functional programming.

40
00:02:17.308 --> 00:02:20.478
Then we will finally actually get
to look at the map filter reduce,

41
00:02:20.478 --> 00:02:24.440
that thing that everybody calls functional
part and we're going to look at that and

42
00:02:24.440 --> 00:02:28.063
where it fits in, but you won't understand
or appreciate where it fits in,

43
00:02:28.063 --> 00:02:31.147
unless you've got these other
pieces of equipment ready to go.

44
00:02:33.914 --> 00:02:37.344
&gt;&gt; Kyle Simpson: And all of that will have
taken us to the question of how do we

45
00:02:37.344 --> 00:02:41.614
operate on, in a functional way,
how do we operate on values right now,

46
00:02:41.614 --> 00:02:43.439
values that we have right now?

47
00:02:43.439 --> 00:02:44.374
But guess what?

48
00:02:44.374 --> 00:02:49.306
Our programs all have values now, and they
all have values they will have at a later

49
00:02:49.306 --> 00:02:51.896
time, there's always a time component.

50
00:02:51.896 --> 00:02:56.177
So how do I apply functional
principles over time?

51
00:02:56.177 --> 00:02:59.109
How do I do asynchronous programming?

52
00:02:59.109 --> 00:03:02.236
And there's lots of ways
to answer that question but

53
00:03:02.236 --> 00:03:07.000
the one specific way we're gonna answer
that in this course, is we're going to

54
00:03:07.000 --> 00:03:11.643
look at adapting functional principles
over time with observables, okay?

55
00:03:11.643 --> 00:03:14.660
And we'll end the course by
taking a look at just a few,

56
00:03:14.660 --> 00:03:18.400
of the libraries that you might choose
to use when you wanna go out and

57
00:03:18.400 --> 00:03:22.335
start doing your own functional
programming and you need a library with

58
00:03:22.335 --> 00:03:25.744
helpers to help you do that, and
we'll look at a few of those,

59
00:03:25.744 --> 00:03:30.367
some of the popular ones and a few others,
and that's where we'll end the course.

60
00:03:30.367 --> 00:03:34.401
So that's what to expect
It's a deep journey, okay so

61
00:03:34.401 --> 00:03:38.889
buckle your seat belt because
there's a lot to get through.

62
00:03:41.672 --> 00:03:43.251
&gt;&gt; Kyle Simpson: Before
we jump into the course,

63
00:03:43.251 --> 00:03:46.297
you should definitely hear my
thoughts on code readability.

