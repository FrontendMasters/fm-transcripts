WEBVTT

1
00:00:00.140 --> 00:00:03.380
&gt;&gt; Kyle Simpson: Just for the sake of
brevity and our codes I'm not doing all

2
00:00:03.380 --> 00:00:07.120
the scrolling I'm gonna go ahead and
eliminate those don't worry.

3
00:00:07.120 --> 00:00:12.075
All three versions are in the solution
file species to be able to see those,

4
00:00:12.075 --> 00:00:16.720
okay now item six and
the read me said to start with some just

5
00:00:17.810 --> 00:00:21.560
come up with some list of numbers I'm
just gonna make a list of numbers here.

6
00:00:22.600 --> 00:00:28.538
And let's see, and I'll just start typing

7
00:00:28.538 --> 00:00:33.835
some numbers 4, 2, 7, 9, 17,

8
00:00:33.835 --> 00:00:39.613
6, 3, 2, 4, 8, 10, 5, 12,

9
00:00:39.613 --> 00:00:45.570
13 I'm just making up a bunch of numbers.

10
00:00:45.570 --> 00:00:50.420
Okay, just make a big list of numbers that
way we prove to ourselves that this really

11
00:00:50.420 --> 00:00:52.589
is working fully intuitively okay?

12
00:00:52.589 --> 00:00:56.720
And you notice there's a bunch of
duplicates in there so the first item,

13
00:00:56.720 --> 00:01:00.189
item six says we need to come up
with a unique list of numbers.

14
00:01:02.140 --> 00:01:05.230
How are we gonna take a list
of numbers and produce it or

15
00:01:05.230 --> 00:01:09.970
reduce it down only the unique
numbers have been included?

16
00:01:09.970 --> 00:01:12.500
Well, there's a couple of different
ways of approaching that but

17
00:01:12.500 --> 00:01:14.880
since we're talking
about least operations,

18
00:01:14.880 --> 00:01:18.180
let's think could we use
something like a filter?

19
00:01:18.180 --> 00:01:23.640
It seems like filter might do the job,
the problem with filter is that it

20
00:01:23.640 --> 00:01:28.680
only works on an individual discrete
value we don't know whether that

21
00:01:28.680 --> 00:01:34.350
value is repeated anywhere else because
we don't see the built up list.

22
00:01:34.350 --> 00:01:39.192
So if we can't do it with a filter
the next most powerful tool that

23
00:01:39.192 --> 00:01:42.432
we might turn to would be a reduced, okay?

24
00:01:42.432 --> 00:01:45.706
Map wouldn't work,
because map is gonna produce a new

25
00:01:45.706 --> 00:01:49.904
array of the same length of items,
and we want a shorter list of items,

26
00:01:49.904 --> 00:01:54.053
so since it wasn't gonna be filter,
maybe we can do it with a reduce.

27
00:01:54.053 --> 00:01:58.424
So let's do it that way,
let's do numbers and then .reduce,

28
00:01:58.424 --> 00:02:01.887
basically, anytime Napier or
filter fails you,

29
00:02:01.887 --> 00:02:06.040
you might turn to reduce
because it's more powerful.

30
00:02:06.040 --> 00:02:10.086
Okay, so let's try a reducer,
I'll call it unique and

31
00:02:10.086 --> 00:02:15.512
we're gonna have a acc,v which again
I'm gonna rename in just a moment but

32
00:02:15.512 --> 00:02:20.267
let's think what do we want the end
result of our reduction to be?

33
00:02:23.121 --> 00:02:25.540
&gt;&gt; Kyle Simpson: We want it
to be another list, right?

34
00:02:25.540 --> 00:02:30.019
So what's a good initial value for a
reduction that's reducing to another list?

35
00:02:32.788 --> 00:02:35.390
&gt;&gt; Kyle Simpson: How about an empty list,
okay?

36
00:02:35.390 --> 00:02:40.000
So the thing that's coming in here, the
accumulator is gonna be our new list so

37
00:02:40.000 --> 00:02:43.720
I'm just gonna name it new list and
of course,

38
00:02:43.720 --> 00:02:46.360
the v that's coming in is our number,
okay?

39
00:02:46.360 --> 00:02:49.200
So I'll just leave it at v and
call it num if you prefer, okay?

40
00:02:51.470 --> 00:02:56.566
So how do we decide if num
needs to be put into new list?

41
00:03:00.595 --> 00:03:04.813
&gt;&gt; Speaker 2: Check it against the array-
&gt;&gt; Kyle Simpson: If num is not already in

42
00:03:04.813 --> 00:03:10.843
new Let's try, so if not,
newList.includes num,

43
00:03:10.843 --> 00:03:15.937
then let's stuff num into newList, right.

44
00:03:19.643 --> 00:03:23.079
&gt;&gt; Kyle Simpson: And then, we definitely
need to keep returning newList no matter

45
00:03:23.079 --> 00:03:27.270
what even if we didn't push anything in,
we need to return new list.

46
00:03:27.270 --> 00:03:29.958
Now there should be a red flag
going off on your heads right now,

47
00:03:29.958 --> 00:03:30.936
what's the red flag?

48
00:03:36.668 --> 00:03:37.416
&gt;&gt; Speaker 3: Mutating array.
&gt;&gt; Kyle Simpson: Yep, we're

49
00:03:37.416 --> 00:03:41.220
mutating an array by reference value,
that's a bad sign.

50
00:03:41.220 --> 00:03:45.380
So let's not mutate it, even though we
know in this particular case it's an empty

51
00:03:45.380 --> 00:03:49.865
array and
it's probably safe just to be practicing

52
00:03:49.865 --> 00:03:55.170
this good best practice here,
instead of pushing to a new list,

53
00:03:55.170 --> 00:03:59.070
let's go ahead and just return a new
list with the value having been upended.

54
00:03:59.070 --> 00:04:03.191
So I'm gonna say
newlist.concat num .concat,

55
00:04:03.191 --> 00:04:08.489
if you're not aware of that array method,
it actually produces

56
00:04:08.489 --> 00:04:13.900
a whole new array with the value
array appended onto the end of it.

57
00:04:15.290 --> 00:04:21.610
So rather than calling newList.push, we're
gonna have newList.concat and that's gonna

58
00:04:21.610 --> 00:04:27.180
be returned directly It doesn't mutate it,
it creates a new one, so that's why.

59
00:04:27.180 --> 00:04:30.841
&gt;&gt; Speaker 4: So it basically, in a sense,
does what you did, not right here, but

60
00:04:30.841 --> 00:04:33.068
before when you did the spread operator.

61
00:04:33.068 --> 00:04:33.786
&gt;&gt; Kyle Simpson: Yes.
&gt;&gt; Speaker 4: And you made a copy and

62
00:04:33.786 --> 00:04:34.514
then-
&gt;&gt; Kyle Simpson: Yes, yep,

63
00:04:34.514 --> 00:04:36.769
they're doing that,
I could do it that way, yep,

64
00:04:36.769 --> 00:04:38.770
we could write it that way, as well.

65
00:04:38.770 --> 00:04:41.211
We could say array...

66
00:04:41.211 --> 00:04:47.045
NewList, and then just list none That's
maybe more syntactically declared,

67
00:04:47.045 --> 00:04:52.540
a way of doing it, okay,
good question let's test this real quick.

68
00:04:52.540 --> 00:04:58.090
Let's move this part over to
our little testing round, and-

69
00:04:58.090 --> 00:04:58.681
&gt;&gt; Speaker 5: I'm sorry,

70
00:04:58.681 --> 00:05:01.965
isn't that second return unreachable
in there, did I miss something?

71
00:05:01.965 --> 00:05:05.653
&gt;&gt; Kyle Simpson: No, because it's in an
if-statement we have an if statement there

72
00:05:05.653 --> 00:05:09.017
so we only do the return of
the concatenation otherwise we just

73
00:05:09.017 --> 00:05:10.580
return,
&gt;&gt; Speaker 5: Enter,

74
00:05:10.580 --> 00:05:13.840
I had missed that it was an if statement,
&gt;&gt; Kyle Simpson: Okay, no problem at all.

75
00:05:13.840 --> 00:05:17.560
Let's just test, we know that
this thing is gonna give us 35 so

76
00:05:17.560 --> 00:05:19.110
I'll just comment that out for a moment,

77
00:05:19.110 --> 00:05:24.280
we just wanna see if this is gonna
give us a unique list of numbers, And

78
00:05:24.280 --> 00:05:29.410
if I scan through real quick we'll see
if we see, I don't see any repeats.

79
00:05:29.410 --> 00:05:31.766
So it looks like it's giving
us a unique list, okay?

80
00:05:38.485 --> 00:05:42.955
&gt;&gt; Kyle Simpson: Okay, so item number 7
in the read me tells us that now that

81
00:05:42.955 --> 00:05:47.973
we've got a unique list of numbers,
we want to reduce that list or

82
00:05:47.973 --> 00:05:51.650
break that list down to
only include the evens.

83
00:05:52.720 --> 00:05:55.084
What is that operation sound like?

84
00:05:55.084 --> 00:06:01.913
Sounds like a filter to me so
let's do function only evens or

85
00:06:01.913 --> 00:06:07.921
I'll just call it isEven
&gt;&gt; Kyle Simpson: And

86
00:06:07.921 --> 00:06:13.240
this is real straightforward,
we just simply say v mod 2 = 0,

87
00:06:13.240 --> 00:06:18.165
that lets us know and of course,
if we already had an isOdd,

88
00:06:18.165 --> 00:06:21.120
we could have done the not of isOdd,

89
00:06:21.120 --> 00:06:26.280
if you recall back to early
in the course on Point free.

90
00:06:26.280 --> 00:06:31.345
Alright, so
let's add that filter on to the end, so

91
00:06:31.345 --> 00:06:38.272
lets move that back over to our
test ground and when we do that.

92
00:06:38.272 --> 00:06:41.227
What did I do wrong?

93
00:06:41.227 --> 00:06:42.830
Oops!

94
00:06:42.830 --> 00:06:43.386
There we go.

95
00:06:46.042 --> 00:06:47.772
&gt;&gt; Kyle Simpson: We run the code, and now,

96
00:06:47.772 --> 00:06:52.540
you notice that we have only
even numbers on the list, okay?

97
00:06:52.540 --> 00:06:59.950
So let's go one final time back to
item 8 in the read-me, item 8 said,

98
00:06:59.950 --> 00:07:05.690
we need to turn all of those numbers
which we've now created Into

99
00:07:05.690 --> 00:07:11.100
functions, and then pass them
to the ad and utility, okay?

100
00:07:11.100 --> 00:07:13.600
So how do I take a list of numbers and

101
00:07:13.600 --> 00:07:17.712
turn it into a list of functions that
are wrapped around those numbers.

102
00:07:17.712 --> 00:07:22.452
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle Simpson: What's that?

103
00:07:22.452 --> 00:07:23.580
&gt;&gt; Speaker 6: Say that one more time.

104
00:07:23.580 --> 00:07:26.670
&gt;&gt; Kyle Simpson: If I have a list of
numbers, and I want to turn that into

105
00:07:26.670 --> 00:07:33.995
a list of functions wrapped around those
numbers what list operation is that?

106
00:07:33.995 --> 00:07:39.340
&gt;&gt; [INAUDIBLE].

107
00:07:39.340 --> 00:07:43.045
&gt;&gt; Kyle Simpson: Remember our three
list operations, we have the reduce,

108
00:07:43.045 --> 00:07:46.035
we have the filter, and we have-
&gt;&gt; Speaker 3: Map.

109
00:07:46.035 --> 00:07:47.833
&gt;&gt; Kyle Simpson: Map,
map takes a list of values and

110
00:07:47.833 --> 00:07:51.270
turns it into a new list of
transformed values, right?

111
00:07:51.270 --> 00:07:57.000
So we wanna take dot map on this array and
what is our thing doing?

112
00:07:57.000 --> 00:08:01.560
It's needing to make a function
that's wrapped around the value if we

113
00:08:01.560 --> 00:08:05.320
have been given the value, we need to
make a function and return it back but

114
00:08:05.320 --> 00:08:07.670
this sounds awfully familiar.

115
00:08:08.830 --> 00:08:11.640
It sounds like the function
that we're writing here,

116
00:08:11.640 --> 00:08:15.930
which is making a function that
can remember the value and

117
00:08:15.930 --> 00:08:21.700
return it, does that function
look like that function?

118
00:08:21.700 --> 00:08:29.480
The constant utility, so why don't
we just use constant as our mapper.

119
00:08:29.480 --> 00:08:33.080
Remember equational reasoning if those
functions have the same shape, they

120
00:08:33.080 --> 00:08:39.340
are interchangeable so now if we were to
run this we're not gonna see much from it.

121
00:08:39.340 --> 00:08:40.880
But if we were to pull this over here and

122
00:08:40.880 --> 00:08:44.900
run it now we're gonna get
an array of functions.

123
00:08:46.070 --> 00:08:52.280
We don't know what's in those functions,
but we have an array of functions okay,

124
00:08:52.280 --> 00:08:56.290
the last thing that we need to do
is take that array of functions and

125
00:08:56.290 --> 00:08:58.410
pass it into our ad and utility.

126
00:09:05.000 --> 00:09:09.178
Let's try that out and
we'll copy this over.

127
00:09:13.350 --> 00:09:15.985
&gt;&gt; Kyle Simpson: Let's replace this, and

128
00:09:15.985 --> 00:09:20.665
we cross our fingers and
it completes itself.

129
00:09:28.877 --> 00:09:33.186
&gt;&gt; Kyle Simpson: Okay, So
what questions can I answer about this

130
00:09:33.186 --> 00:09:35.996
exercise on list operations?

131
00:09:45.143 --> 00:09:47.858
&gt;&gt; Kyle Simpson: By the way,
I want to let you in on a little trick,

132
00:09:47.858 --> 00:09:50.909
how did I just randomly type
out all of those numbers and

133
00:09:50.909 --> 00:09:54.120
magically end up with the number
42 having been added?

134
00:09:55.750 --> 00:10:00.200
There's a little mathematic trick that
I used, all of the even numbers from

135
00:10:00.200 --> 00:10:05.150
2 up to 12 when added
together equal to 42.

136
00:10:05.150 --> 00:10:10.580
So as long as I make sure in my random
list of number generation that 246 810 and

137
00:10:10.580 --> 00:10:16.400
12 show up, I can have as many repeats and
as many odds thrown in there as I need to.

138
00:10:16.400 --> 00:10:19.042
We're still gonna end up with a summer 42

