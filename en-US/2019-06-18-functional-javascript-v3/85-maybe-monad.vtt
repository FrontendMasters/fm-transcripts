WEBVTT

1
00:00:00.100 --> 00:00:05.250
&gt;&gt; Kyle Simpson: Now, I wanna show you
one specific way that people use monads.

2
00:00:05.250 --> 00:00:09.170
This is probably the most common
of the illustrations out there for

3
00:00:09.170 --> 00:00:10.920
the usage of monads.

4
00:00:10.920 --> 00:00:14.051
To be honest with you, it's not actually
the most compelling of the monads.

5
00:00:14.051 --> 00:00:16.640
But it's certainly
the most common of them.

6
00:00:16.640 --> 00:00:19.693
And it's called the maybe monad.

7
00:00:19.693 --> 00:00:24.098
So let's look at this
object called someobj.

8
00:00:24.098 --> 00:00:25.565
It has some properties in it.

9
00:00:25.565 --> 00:00:29.030
And I've just, to save space on
the slides, I put it all on one line.

10
00:00:29.030 --> 00:00:33.305
But you can see there in the comments
that we can access the value by saying

11
00:00:33.305 --> 00:00:37.879
someobj.something.else.entirely and
we would get out that value 42.

12
00:00:39.130 --> 00:00:41.120
Which works great on
this particular object.

13
00:00:41.120 --> 00:00:46.240
But what if one of those properties for
whatever reason was null or undefined?

14
00:00:46.240 --> 00:00:47.840
Well, now we're going to get an exception,

15
00:00:47.840 --> 00:00:50.260
because we're accessing
a property that's undefined.

16
00:00:51.430 --> 00:00:54.978
So if you've ever had the problem where
you thought that you could access some

17
00:00:54.978 --> 00:00:58.965
deeply nested property in an object, and
then you sometimes got runtime exceptions,

18
00:00:58.965 --> 00:01:01.273
you know exactly the use
case I'm talking about.

19
00:01:01.273 --> 00:01:05.838
Which is that you'd like to have
some sort of safe way of addressing

20
00:01:05.838 --> 00:01:10.497
a nested property, but
not throwing exceptions if it's missing.

21
00:01:10.497 --> 00:01:13.215
And there are countless
numbers of framework and

22
00:01:13.215 --> 00:01:17.391
library utilities out there that pull
out properties from a nested path and

23
00:01:17.391 --> 00:01:20.919
then give you undefined if
something's missing or whatever.

24
00:01:20.919 --> 00:01:27.900
But this is the canonical example for
illustrating the maybe monad, okay?

25
00:01:28.970 --> 00:01:32.660
So we're gonna take that same
way of accessing a property and

26
00:01:32.660 --> 00:01:36.140
we're gonna do it with a monad
in a safe way, meaning

27
00:01:36.140 --> 00:01:39.429
that it won't throw an exception if one of
those property levels had been missing.

28
00:01:41.710 --> 00:01:42.590
Here's how we're gonna do it.

29
00:01:42.590 --> 00:01:46.140
We're gonna first define another monad,

30
00:01:46.140 --> 00:01:49.250
this one is even less
interesting than the Just monad.

31
00:01:49.250 --> 00:01:50.470
It's called the Nothing monad.

32
00:01:51.670 --> 00:01:55.570
And you'll notice that
Nothing just has map, chain,

33
00:01:55.570 --> 00:01:58.490
and ap methods that just
make another Nothing.

34
00:01:59.490 --> 00:02:01.770
They don't do anything but
make more Nothing's.

35
00:02:03.640 --> 00:02:06.220
It's sort of the black hole of behavior.

36
00:02:06.220 --> 00:02:08.880
Because once you get a Nothing monad,

37
00:02:08.880 --> 00:02:11.260
Nothing else is ever
going to come of that.

38
00:02:11.260 --> 00:02:13.528
Whether you call .map,
.chain, or .ap on it,

39
00:02:13.528 --> 00:02:15.930
you're just going to keep
getting Nothing monads.

40
00:02:15.930 --> 00:02:17.780
No behavior is ever going to occur.

41
00:02:17.780 --> 00:02:21.503
You're never going to execute any mapper
functions, you're never gonna execute any

42
00:02:21.503 --> 00:02:24.676
chain functions, you're never gonna
execute another monad's .map.

43
00:02:24.676 --> 00:02:26.198
None of that's ever gonna happen.

44
00:02:26.198 --> 00:02:29.061
Nothing just becomes this
black hole of nothingness.

45
00:02:29.061 --> 00:02:32.773
And that sounds existential, but
it's actually really useful,

46
00:02:32.773 --> 00:02:37.190
because it's sort of the monadic
way of representing no-op.

47
00:02:37.190 --> 00:02:40.400
I don't want anything to
occur in the case where,

48
00:02:40.400 --> 00:02:44.450
in this case,
a property was missing, okay?

49
00:02:44.450 --> 00:02:48.146
So what we're gonna do is take Just,
which we defined a couple slides ago, and

50
00:02:48.146 --> 00:02:48.658
Nothing.

51
00:02:48.658 --> 00:02:52.936
And we're gonna pair them together
in a very specific way to make this

52
00:02:52.936 --> 00:02:55.760
other kind of a monad
called the Maybe monad.

53
00:02:57.330 --> 00:03:01.416
So notice what Maybe is doing,
line eight, I'm putting Just and

54
00:03:01.416 --> 00:03:03.586
Nothing together into an object.

55
00:03:03.586 --> 00:03:05.526
And then I defined one
other helper method,

56
00:03:05.526 --> 00:03:08.317
which I don't even technically need,
but it's nice to have.

57
00:03:08.317 --> 00:03:10.084
It's a helper method called of.

58
00:03:10.084 --> 00:03:15.420
So you can say Maybe.of, Maybe.of is
the same thing is calling Just, okay?

59
00:03:16.920 --> 00:03:20.385
Now I've defined another
utility called fromNullable.

60
00:03:20.385 --> 00:03:22.536
And that sounds a little
bit like a strange thing.

61
00:03:22.536 --> 00:03:26.460
It's because a functional
programmer named this, okay?

62
00:03:26.460 --> 00:03:27.840
I didn't name it fromNullable.

63
00:03:27.840 --> 00:03:31.510
But this is what functional programmers
would call those particular kind of thing.

64
00:03:31.510 --> 00:03:34.870
And notice what frontNullable does,
it's sort of an interesting idea.

65
00:03:34.870 --> 00:03:39.830
It takes a value and if that value
is null, or in this case undefined,

66
00:03:39.830 --> 00:03:41.510
since I used the double equals operator.

67
00:03:41.510 --> 00:03:44.990
If it's null or undefined,
it just vends a Nothing.

68
00:03:47.060 --> 00:03:50.990
Otherwise it vends a Just with
that value wrapped around it.

69
00:03:52.200 --> 00:03:57.150
So it takes in a value and it decides
which of those two monads should I create?

70
00:03:57.150 --> 00:03:59.300
Should I create a Nothing
monad out of that value,

71
00:03:59.300 --> 00:04:02.600
or should I create a Just
monad out of that value.

72
00:04:04.150 --> 00:04:05.470
It's lifting it if you will.

73
00:04:05.470 --> 00:04:08.370
I would have called it lift,
they like to call it fromNullable, okay?

74
00:04:09.560 --> 00:04:10.660
It's debatable.

75
00:04:10.660 --> 00:04:12.140
I've been having some debates recently.

76
00:04:12.140 --> 00:04:16.370
It's debatable whether
fromNullable is part of Maybe or

77
00:04:16.370 --> 00:04:18.750
it's just like a helper
alongside of Maybe.

78
00:04:18.750 --> 00:04:20.794
Depending on your perspective,
it's part of the monad or

79
00:04:20.794 --> 00:04:21.802
it's not part of the monad.

80
00:04:21.802 --> 00:04:25.508
But it's certainly critical
behavior to decide which one

81
00:04:25.508 --> 00:04:27.950
of those two monads do we want.

82
00:04:27.950 --> 00:04:30.730
Given any particular value
that we're holding onto,

83
00:04:30.730 --> 00:04:34.089
should that become a Just monad or
should it become a Nothing monad?

84
00:04:36.170 --> 00:04:43.785
So with that fromNullable, what we can do
is define, in this case, another helper.

85
00:04:43.785 --> 00:04:47.251
This is a functional
programming helper called prop.

86
00:04:47.251 --> 00:04:49.705
This is one you'll find on all
your functional libraries.

87
00:04:49.705 --> 00:04:52.230
Mine is a little bit special here.

88
00:04:52.230 --> 00:04:54.692
But this prop utility is curried.

89
00:04:54.692 --> 00:04:56.594
You'll notice that it's
curried to take two inputs.

90
00:04:56.594 --> 00:05:00.203
It takes a property name and
it takes an object and

91
00:05:00.203 --> 00:05:03.470
it extracts that property from the object.

92
00:05:03.470 --> 00:05:07.780
I've made prop also have
the fromNullable around it.

93
00:05:07.780 --> 00:05:11.610
So I really maybe should have called
this like monad prop or something.

94
00:05:11.610 --> 00:05:13.100
Cuz it's not the general prop.

95
00:05:13.100 --> 00:05:15.320
It's this very monadic specific prop.

96
00:05:17.060 --> 00:05:22.700
So if I were to literally just call
prop on some random object somewhere and

97
00:05:22.700 --> 00:05:26.290
tell it,
get me x y z property off this object.

98
00:05:26.290 --> 00:05:27.920
What am I gonna get back?

99
00:05:27.920 --> 00:05:30.687
I'm either going to get
back a Nothing monad or

100
00:05:30.687 --> 00:05:34.580
I'm gonna get a Just monad that is
holding the value that it found.

101
00:05:36.070 --> 00:05:37.090
That's what prop does, okay?

102
00:05:39.460 --> 00:05:43.830
So armed with this prop utility,
we can now make

103
00:05:43.830 --> 00:05:49.410
a safe property chaining
access off of our some object.

104
00:05:49.410 --> 00:05:53.288
Because this is a monadic, you can
probably guess, we need to turn some obj,

105
00:05:53.288 --> 00:05:54.732
we need to wrap it in a monad.

106
00:05:54.732 --> 00:05:56.942
And then we're gonna
start calling with prop,

107
00:05:56.942 --> 00:06:00.660
we're gonna start calling to try
to access the subproperties.

108
00:06:00.660 --> 00:06:02.220
So this is what that looks like.

109
00:06:02.220 --> 00:06:07.840
We say Maybe.of to vend
a just from our someObj.

110
00:06:07.840 --> 00:06:09.820
We also could've done fromNullable here,
but

111
00:06:09.820 --> 00:06:13.490
it seems better to me to just
be very explicit about it.

112
00:06:13.490 --> 00:06:16.300
We know it's a real good value,
we want a just for it.

113
00:06:16.300 --> 00:06:19.864
So let's go ahead and do Maybe.of for
someObJ, and then .chain.

114
00:06:21.370 --> 00:06:24.230
And notice what .chain is doing.

115
00:06:24.230 --> 00:06:28.790
Prop of something makes this a function,
doesn't it?

116
00:06:28.790 --> 00:06:31.530
Because remember, prop expects two inputs.

117
00:06:31.530 --> 00:06:35.095
So prop of something is exactly
like earlier, when we were doing,

118
00:06:35.095 --> 00:06:38.976
in the course, when we were doing .map,
and we said, like, add of 1,

119
00:06:38.976 --> 00:06:42.624
we did the currying of a binary
function to make it a unary function.

120
00:06:42.624 --> 00:06:45.806
Here we're doing a curry of
the binary prop function,

121
00:06:45.806 --> 00:06:47.474
giving it one of its values.

122
00:06:47.474 --> 00:06:51.690
And .chain is being called with
that result unary function.

123
00:06:53.020 --> 00:06:59.310
So Maybe.of of someObj,
makes a Just around someObj.

124
00:06:59.310 --> 00:07:01.190
And then it calls .chain on it.

125
00:07:01.190 --> 00:07:05.740
And remember from a few sides ago, .chain
is just gonna simply execute the function

126
00:07:05.740 --> 00:07:07.150
with the value that's in the monad.

127
00:07:08.210 --> 00:07:12.610
So we've got our object being pushed
into that unary waiting function.

128
00:07:12.610 --> 00:07:15.459
And it's gonna try to access
the something property on that object.

129
00:07:16.490 --> 00:07:20.482
And it's either going to find it, in which
case we're going to get a Just monad back,

130
00:07:20.482 --> 00:07:21.868
or it's not going to find it,

131
00:07:21.868 --> 00:07:24.431
in which case we're going to
get a Nothing monad back.

132
00:07:24.431 --> 00:07:29.810
But regardless of which one of those two
comes back, we call .chain on line 21.

133
00:07:29.810 --> 00:07:32.640
We can call .chain because we know

134
00:07:32.640 --> 00:07:36.440
the previous .chain gave
us one of those two monads.

135
00:07:36.440 --> 00:07:40.030
As long as it's behaving by the monadic
laws, we know we can keep chaining.

136
00:07:40.030 --> 00:07:44.218
Just like with promises, we can keep doing
.then, .then, .then, we can keep doing

137
00:07:44.218 --> 00:07:46.970
.chain, .chain, .chain, because we know
we're always going to have a monad.

138
00:07:49.070 --> 00:07:54.931
If it returned us a nothing monad,
then what would the .chain on line 21 do?

139
00:07:59.064 --> 00:08:01.902
&gt;&gt; Kyle Simpson: Just make another
Nothing monad and another Nothing and

140
00:08:01.902 --> 00:08:04.615
just keep going and keep going and
be a big old no-op,

141
00:08:04.615 --> 00:08:06.622
it's a big black hole of nothingness.

142
00:08:06.622 --> 00:08:11.176
But if it gave us a Just monad,
then what would it do?

143
00:08:11.176 --> 00:08:15.999
It would take the function that's waiting,
prop of else, that's waiting on line 21,

144
00:08:15.999 --> 00:08:18.450
and call it with that object.

145
00:08:18.450 --> 00:08:21.093
And it'd either give us a Nothing or
a Just.

146
00:08:21.093 --> 00:08:24.767
And then the same thing
happens again on line 22,

147
00:08:24.767 --> 00:08:27.170
we either get a Nothing or a Just.

148
00:08:27.170 --> 00:08:30.463
If in all of those cases,
we kept getting a Just back,

149
00:08:30.463 --> 00:08:32.454
because we found the property.

150
00:08:32.454 --> 00:08:36.801
On the very last line you see my little
cheat here to look inside of that monad

151
00:08:36.801 --> 00:08:37.839
that we got back.

152
00:08:37.839 --> 00:08:42.140
And you see that we would have a monad
Just wrapped around the value 42.

153
00:08:42.140 --> 00:08:44.828
If at any point along the way,
we got a nothing,

154
00:08:44.828 --> 00:08:48.608
it essentially short circuits
the rest of the chain to be a no-op.

155
00:08:52.589 --> 00:08:54.737
&gt;&gt; Kyle Simpson: So
using the monadic laws and

156
00:08:54.737 --> 00:08:59.752
using this formulation of a maybe
monad gives us a functional way,

157
00:08:59.752 --> 00:09:05.590
a functional consistent way, of dealing
with this optional chaining idea.

158
00:09:07.270 --> 00:09:08.940
Certainly not the only way to do it.

159
00:09:08.940 --> 00:09:12.650
But if you're asking for or
looking for motivations for

160
00:09:12.650 --> 00:09:14.690
how do I do common programming tasks, but

161
00:09:14.690 --> 00:09:19.240
do them the functional way,
this is what we're talking about.

162
00:09:19.240 --> 00:09:23.055
This is, we're moving out of the base
of functional programming and

163
00:09:23.055 --> 00:09:27.270
just starting to glimpse into
more meatier stuff, okay?

164
00:09:27.270 --> 00:09:31.396
This is certainly not a complete look at
all that there is to know about a monad.

165
00:09:31.396 --> 00:09:35.904
But again, my goal is just so
that you can understand a monad,

166
00:09:35.904 --> 00:09:40.931
not be afraid of it, and perhaps if
you see a monad in an application,

167
00:09:40.931 --> 00:09:43.900
be able to understand what it's doing.

168
00:09:45.250 --> 00:09:47.083
There are many kinds of monads.

169
00:09:47.083 --> 00:09:50.271
We've seen a few of them,
the Just, the Nothing, the Maybe.

170
00:09:50.271 --> 00:09:53.547
There are Either monads,
there's the IO monad,

171
00:09:53.547 --> 00:09:56.530
and dozens of other sorts of monads.

172
00:09:56.530 --> 00:09:58.972
We've only looked at a few
of the basic principles.

173
00:09:58.972 --> 00:10:03.960
But armed with those, you should be able
to begin studying other kinds of monads

174
00:10:03.960 --> 00:10:09.630
and broadening your perspective on
where monads can fit into your program.

175
00:10:09.630 --> 00:10:15.340
At this point, you probably have the exact
same question that I've been having for

176
00:10:15.340 --> 00:10:18.110
months and
months while studying this topic.

177
00:10:18.110 --> 00:10:20.990
Which is, should I really use these?

178
00:10:20.990 --> 00:10:21.790
Like, yeah, I get it.

179
00:10:21.790 --> 00:10:25.820
It's kinda like clever and cool and
interesting, but should I really use them?

180
00:10:25.820 --> 00:10:31.800
And my answer, maybe,
maybe you should use them.

181
00:10:31.800 --> 00:10:34.600
But at least don't be scared of them.

182
00:10:34.600 --> 00:10:38.130
At least be able to see them and
recognize them.

183
00:10:38.130 --> 00:10:41.015
And maybe understand what
they're doing in a program.

184
00:10:41.015 --> 00:10:44.610
Because you might see somebody
else use a monad somewhere.

185
00:10:44.610 --> 00:10:46.610
And it shouldn't be that your
eyes glaze over and you're like,

186
00:10:46.610 --> 00:10:48.480
well, I got nothing to
contribute to this code.

187
00:10:49.830 --> 00:10:52.810
The spirit of us learning these things,
of going on this journey,

188
00:10:52.810 --> 00:10:55.380
is that we embrace stuff
that feels uncomfortable.

189
00:10:55.380 --> 00:11:00.204
We embrace stuff that feels weird and
out there and beyond what we can find.

190
00:11:00.204 --> 00:11:04.480
And if we keep embracing it,
eventually it becomes something useful.

191
00:11:05.540 --> 00:11:07.570
Someday, each of you on this journey,

192
00:11:07.570 --> 00:11:10.703
if you keep going, is gonna have
that aha moment where a monad

193
00:11:10.703 --> 00:11:15.084
is exactly the right solution to something
that you're trying to do at that moment.

194
00:11:15.084 --> 00:11:19.362
And I'm somewhere in that journey of
getting to the point where I can eat,

195
00:11:19.362 --> 00:11:21.720
sleep, and breathe this sort of stuff.

196
00:11:21.720 --> 00:11:23.340
I'm not there, yet.

197
00:11:23.340 --> 00:11:26.393
But I can at least articulate
some of the benefits,

198
00:11:26.393 --> 00:11:29.589
the reasons why you might
go about that extra effort.

