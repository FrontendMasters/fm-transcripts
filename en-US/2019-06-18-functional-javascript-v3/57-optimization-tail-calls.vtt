WEBVTT

1
00:00:00.380 --> 00:00:03.720
&gt;&gt; Kyle Simpson: And the way to address it
that they invented back then, it has been

2
00:00:03.720 --> 00:00:09.630
this time on an approach ever since,
is an optimization called tail calls.

3
00:00:09.630 --> 00:00:14.270
To understand what a tale call is and
how until call works we need to understand

4
00:00:14.270 --> 00:00:19.910
when we make this recursive call here, the
call on line four, we need to understand

5
00:00:19.910 --> 00:00:25.900
why the stack frame that is currently
executing needs to be cupped.

6
00:00:25.900 --> 00:00:29.980
What is it about that stack frame
that still needs to be cupped around?

7
00:00:29.980 --> 00:00:33.230
And in particular the reason why
that stack frame needs to be cupped

8
00:00:33.230 --> 00:00:36.500
is because we are doing
that first addition,

9
00:00:36.500 --> 00:00:40.309
the addition of the return result,
after the function completes.

10
00:00:41.730 --> 00:00:44.620
So it's essentially that
part of the program

11
00:00:44.620 --> 00:00:48.070
that's requiring our current
stack frame to be around.

12
00:00:48.070 --> 00:00:50.090
But if there was no more work to do,

13
00:00:51.590 --> 00:00:56.180
if we literally just said return count
vowels, and there was nothing before or

14
00:00:56.180 --> 00:01:00.286
after that, it just called
the function and it was done.

15
00:01:00.286 --> 00:01:04.690
Then we could think at least in theory
that it seems like the current stack frame

16
00:01:04.690 --> 00:01:06.272
isn't needed anymore.

17
00:01:06.272 --> 00:01:09.600
We've done all of our work in
our current stack frame and

18
00:01:09.600 --> 00:01:12.560
we're gonna dispatch to
another function call.

19
00:01:12.560 --> 00:01:16.860
And so why don't we just maybe throw
away the current stack frame or

20
00:01:16.860 --> 00:01:21.970
just reuse the existing stack frame for
the next function call, you follow me?

21
00:01:21.970 --> 00:01:24.440
That's the idea here, behind tail calls.

22
00:01:24.440 --> 00:01:29.700
If a function call happens in a position
which is referred to as a tail call,

23
00:01:29.700 --> 00:01:33.310
meaning it's at the tail
of the execution logic,

24
00:01:33.310 --> 00:01:37.030
it's at the very end of
that function's logic.

25
00:01:37.030 --> 00:01:40.450
Then we don't need the existing
stack frame anymore and

26
00:01:40.450 --> 00:01:45.530
we can essentially dispatch to another
function call and not take up any extra

27
00:01:45.530 --> 00:01:51.060
net memory, which means that function
A can call B, can call C, can call D.

28
00:01:51.060 --> 00:01:53.798
If all of those calls
happen in a tail position,

29
00:01:53.798 --> 00:01:58.119
then we've only ever needed one stack
frame in memory, at any given time.

30
00:01:58.119 --> 00:02:03.033
We don't have this run away of
O of N memory usage where every

31
00:02:03.033 --> 00:02:07.273
function call has taken up
a new section of memory.

32
00:02:07.273 --> 00:02:10.889
And it's an implementation detail,
whether we create a new one and

33
00:02:10.889 --> 00:02:13.620
throw the old one away,
or whether we reuse.

34
00:02:13.620 --> 00:02:17.950
It's different under different situations,
but the general idea is at any given time,

35
00:02:17.950 --> 00:02:20.000
you should basically only
need one stack frame.

36
00:02:21.020 --> 00:02:24.819
That only holds for function calls
that have happened in a tail position.

37
00:02:25.930 --> 00:02:30.480
Now, this is an optimization in
the bigger sense of optimization.

38
00:02:30.480 --> 00:02:36.090
It's not actually a performance
optimization, it's not actually faster.

39
00:02:36.090 --> 00:02:40.040
In some cases, it might actually be
slower to do what we're talking about.

40
00:02:40.040 --> 00:02:43.310
So when people say optimization,
they usually jump to thinking,

41
00:02:43.310 --> 00:02:45.930
well this is a performance,
it's gonna go faster.

42
00:02:45.930 --> 00:02:50.060
It's not necessarily gonna go faster,
and in some particular cases,

43
00:02:50.060 --> 00:02:51.700
might actually go slower.

44
00:02:51.700 --> 00:02:53.730
But it's an optimization
in the bigger sense,

45
00:02:53.730 --> 00:02:56.680
because we're optimizing memory usage.

46
00:02:56.680 --> 00:03:00.320
We're saying, let's not have
runaway memory usage unnecessarily.

47
00:03:00.320 --> 00:03:03.070
Let's not keep all those stack
frames that aren't needed anyway.

48
00:03:03.070 --> 00:03:05.690
Let's run in essentially
fixed memory space,

49
00:03:05.690 --> 00:03:09.800
0 of 1 memory usage instead of 0 of n,
okay.

50
00:03:09.800 --> 00:03:14.670
And it's important to understand that
tail calls are an additional feature

51
00:03:14.670 --> 00:03:19.010
that the system, your language, your
compiler, your runtime, has to support.

52
00:03:20.550 --> 00:03:22.362
You don't get it for free.

53
00:03:22.362 --> 00:03:25.259
So you would wonder then,
well, what about JavaScript?

54
00:03:25.259 --> 00:03:26.910
Does JavaScript have this?

55
00:03:26.910 --> 00:03:30.790
And for literally decades
people have been calling for

56
00:03:30.790 --> 00:03:35.933
JavaScript to have this tail call support,
this memory optimization so

57
00:03:35.933 --> 00:03:42.023
that recursion doesn't need to throw this
error that says range error out of memory.

58
00:03:42.023 --> 00:03:45.287
And by the way, a little side
note on the range error issue,

59
00:03:45.287 --> 00:03:47.705
that range error
Stack Overflow exceeded or

60
00:03:47.705 --> 00:03:51.179
whatever that error is there not
because you ran out of memory.

61
00:03:51.179 --> 00:03:52.930
A lot of people think
that's what's happening.

62
00:03:52.930 --> 00:03:55.630
It's not an out of memory error.

63
00:03:55.630 --> 00:03:59.396
If you've ever had an out of
memory condition in a web app,

64
00:03:59.396 --> 00:04:04.280
I guarantee you that what you saw was,
at a minimum, the browser crashed.

65
00:04:04.280 --> 00:04:07.700
And if it wasn't the browser that crashed,
the whole device crashed.

66
00:04:07.700 --> 00:04:11.610
Anybody ever have your mobile phone
just like shut itself off and restart?

67
00:04:11.610 --> 00:04:14.880
How's that even possible to just
be clicking around on Facebook and

68
00:04:14.880 --> 00:04:16.780
all of a sudden my phone restarts itself?

69
00:04:16.780 --> 00:04:18.960
Congratulations, that was
an out of memory error.

70
00:04:18.960 --> 00:04:22.510
Almost certainly, that's what happens when
the system completely runs out of memory.

71
00:04:22.510 --> 00:04:25.380
It just throws its hands in the air and
says start over, right?

72
00:04:25.380 --> 00:04:27.830
Just restart the device,
cuz I am completely out of memory.

73
00:04:28.900 --> 00:04:33.600
And JavaScript knows that that's a really
terrible idea to allow JavaScript programs

74
00:04:33.600 --> 00:04:35.180
to run the device out of memory.

75
00:04:35.180 --> 00:04:39.500
Because it's a very clear sort of
denial of service attack vector for

76
00:04:39.500 --> 00:04:44.060
somebody to run some infinite loop on
a page and kill people's devices, okay?

77
00:04:44.060 --> 00:04:46.760
So because we know that's a terrible idea,
JavaScript,

78
00:04:46.760 --> 00:04:50.810
essentially from the beginning,
has had a check in place that has said,

79
00:04:50.810 --> 00:04:56.654
let's not run so far that we are going to
definitely eventually run out of memory.

80
00:04:57.930 --> 00:05:02.020
And that heuristic that decision metric
for how does it know if it's going to run

81
00:05:02.020 --> 00:05:05.730
out of memory is more complex
than you might have expected.

82
00:05:05.730 --> 00:05:08.330
It used to be really, really simple.

83
00:05:08.330 --> 00:05:13.035
So this is actually true, back in IE6,
there was a fixed limit for

84
00:05:13.035 --> 00:05:18.205
the number of function calls that could
happen and that limit would in succession.

85
00:05:18.205 --> 00:05:21.745
This doesn't mean total functions
ever executed, it means in a chain or

86
00:05:21.745 --> 00:05:22.905
one it's called the other.

87
00:05:22.905 --> 00:05:25.619
The total stack depth was limited to 13.

88
00:05:27.050 --> 00:05:29.520
I don't have any idea where they
came up with that number but

89
00:05:29.520 --> 00:05:33.280
if you ever had a situation where
you call to that 14th call and

90
00:05:33.280 --> 00:05:36.220
a chain of function calls,
you would get the range error in IE6.

91
00:05:37.580 --> 00:05:41.770
Somehow, someway, they thought 13, maybe
they had a heuristic that said nobody ever

92
00:05:41.770 --> 00:05:45.430
goes over 13 and if they do, it's
almost always recursive, I don't know.

93
00:05:45.430 --> 00:05:48.810
But, anyway, it was limited to 13,
which is ridiculous, right?

94
00:05:48.810 --> 00:05:53.778
That's ridiculously low because that's
probably less than 100 K of memory,

95
00:05:53.778 --> 00:05:56.372
way probably less than 100 k of memory.

96
00:05:56.372 --> 00:05:59.227
So how many function
calls should it allow?

97
00:05:59.227 --> 00:06:03.410
This is a weird prediction because
it's essentially the engine

98
00:06:03.410 --> 00:06:08.400
needing to say this looks like you're
probably gonna run them out of memory.

99
00:06:08.400 --> 00:06:12.520
You can't actually know if
the recursion is just about to finish.

100
00:06:12.520 --> 00:06:14.630
There's no way for
the system to predict that.

101
00:06:14.630 --> 00:06:16.640
So it's gotta run
basically a heuristic and

102
00:06:16.640 --> 00:06:20.460
say, I think this looks like
you're running a lot of memory and

103
00:06:20.460 --> 00:06:23.900
you're probably gonna run the system out
of memory so I'm just going to stop you.

104
00:06:23.900 --> 00:06:26.940
That's the heuristic, and
it's more complex than you might realize.

105
00:06:28.000 --> 00:06:31.630
Luckily, today, in modern browsers,
it is much more sophisticated,

106
00:06:31.630 --> 00:06:33.220
the way they decide this stuff.

107
00:06:33.220 --> 00:06:35.010
I don't know exactly how they work.

108
00:06:35.010 --> 00:06:38.940
I don't know if it's monitoring
the amount of available RAM at any given

109
00:06:38.940 --> 00:06:39.660
point or something.

110
00:06:39.660 --> 00:06:43.350
But in my general testing,
I've seen somewhere

111
00:06:43.350 --> 00:06:47.670
around 20,000 in the VA JavaScript
engine on my Chrome instance.

112
00:06:47.670 --> 00:06:50.681
I don't know if it's different for
VAD on different devices or whatever.

113
00:06:50.681 --> 00:06:55.165
But I've basically been able to get up to
about 20,000 stacked up before I generally

114
00:06:55.165 --> 00:06:58.887
see that Ranger, sometimes 21,000
it's somewhere in that range.

115
00:06:58.887 --> 00:07:00.850
So your mileage literally may vary there,

116
00:07:00.850 --> 00:07:03.038
you may have different
results when you run it.

117
00:07:03.038 --> 00:07:05.106
But it's pretty easy to set up a test,

118
00:07:05.106 --> 00:07:08.599
just write a recursive function
that it just prints out an eye and

119
00:07:08.599 --> 00:07:12.366
then increments and see how many
I's print out, that sort of thing.

120
00:07:12.366 --> 00:07:16.995
So the good news is that actually well
on the topic of writing yourself a test,

121
00:07:16.995 --> 00:07:18.704
just putting in a try catch so

122
00:07:18.704 --> 00:07:22.784
that you can see how how big I was
whenever the exception was strong.

123
00:07:22.784 --> 00:07:25.556
But anyway the point is there
is some sort of limit and

124
00:07:25.556 --> 00:07:29.790
it's going to be different based upon
the environment that you are running in.

125
00:07:29.790 --> 00:07:32.797
Based upon the device, based upon
the browser all of those things,

126
00:07:32.797 --> 00:07:35.182
those are not things that
you can predict or control.

127
00:07:35.182 --> 00:07:37.274
So that is what ups this ante for

128
00:07:37.274 --> 00:07:42.390
saying we need to have JavaScript
support in this idea of telcalls.

129
00:07:42.390 --> 00:07:47.140
And it has never done that, it has never
gone to that level, and one of the reasons

130
00:07:47.140 --> 00:07:52.675
historically for not having that is
because the idea of requiring tail

131
00:07:52.675 --> 00:07:58.180
calls was almost antithetical to the way
the JavaScript specification was written.

132
00:07:58.180 --> 00:08:02.840
I don't really mean antithetical, but
the specification is really deliberately

133
00:08:02.840 --> 00:08:08.040
designed to be as agnostic about
implementation details as possible.

134
00:08:08.040 --> 00:08:12.260
It says, this is the final outcome that
should happen, and it does specify

135
00:08:12.260 --> 00:08:16.590
algorithms for how you should, you know,
go about accomplishing things.

136
00:08:16.590 --> 00:08:21.422
But if the end goal of any operation is
preserved, the JavaScript engines, and

137
00:08:21.422 --> 00:08:26.418
there are many, There are fewer and fewer
each day, but there are many out there.

138
00:08:26.418 --> 00:08:31.184
The JavaScript engines are allowed to
decide, we're gonna cut this corner and

139
00:08:31.184 --> 00:08:32.334
have this effect.

140
00:08:32.334 --> 00:08:37.284
As long as we're spec compliant We have
a lot of leeway to do different sorts of

141
00:08:37.284 --> 00:08:39.736
optimizations, to address things.

142
00:08:39.736 --> 00:08:44.266
So the shocker a JavaScript engine for
Microsoft back when they were running that

143
00:08:44.266 --> 00:08:48.732
did things dramatically differently for
the Windows operating system than say

144
00:08:48.732 --> 00:08:52.412
the chrome V8 was was doing on
the Mako OS architecture, right?

145
00:08:52.412 --> 00:08:56.637
They're dramatically different ways of
approaching those fine level memory

146
00:08:56.637 --> 00:08:58.180
optimizations and things.

