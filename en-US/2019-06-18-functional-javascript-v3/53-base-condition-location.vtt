WEBVTT

1
00:00:00.152 --> 00:00:02.763
&gt;&gt; Kyle Simpson: Now there's one little
part of this particular recursive

2
00:00:02.763 --> 00:00:04.313
algorithm that I want to call out.

3
00:00:04.313 --> 00:00:06.667
This is sort of a little nuance, but

4
00:00:06.667 --> 00:00:10.210
it actually can sometimes
lead to better solutions.

5
00:00:10.210 --> 00:00:11.990
So I wanna at least call this out.

6
00:00:11.990 --> 00:00:16.829
There's one thing that's always kinda
bugged me about recursive solutions

7
00:00:16.829 --> 00:00:19.962
the base condition here is
at that very last time.

8
00:00:19.962 --> 00:00:22.677
Remember we've got a string
that's 100 characters long, and

9
00:00:22.677 --> 00:00:25.100
we pass in that final empty string.

10
00:00:25.100 --> 00:00:26.810
We make a function call.

11
00:00:26.810 --> 00:00:31.330
We pass in an empty string just so
that we get zero back out.

12
00:00:31.330 --> 00:00:35.260
What has annoyed me always is that
always felt like a completely wasted

13
00:00:35.260 --> 00:00:35.860
function call.

14
00:00:37.280 --> 00:00:42.250
If I could just look ahead one character,
I could know that

15
00:00:42.250 --> 00:00:46.810
I don't need to make that final
function call in that particular case.

16
00:00:46.810 --> 00:00:50.860
It's not that that final function call
is the difference between a performance

17
00:00:50.860 --> 00:00:52.140
solution and not, okay.

18
00:00:52.140 --> 00:00:54.090
So I'm not making
a performance question here.

19
00:00:54.090 --> 00:00:58.560
This is more of almost like
an obsessive kind of thing, like, no,

20
00:00:58.560 --> 00:01:01.460
I don't want any more function
calls than I ought to have.

21
00:01:01.460 --> 00:01:06.450
I wanna design an algorithm that only does
the bare minimum necessary function calls.

22
00:01:08.030 --> 00:01:11.600
So is there some way for us to preserve
the declarativeness of this but

23
00:01:11.600 --> 00:01:14.530
still avoid that final base condition?

24
00:01:14.530 --> 00:01:15.640
And this is the pattern,

25
00:01:15.640 --> 00:01:18.310
it's a slight tweak on this pattern
that I want you to consider.

26
00:01:18.310 --> 00:01:22.270
Instead of checking our base condition
first, we can reorient ourselves

27
00:01:22.270 --> 00:01:26.230
to simply checking everything
on this first character and

28
00:01:26.230 --> 00:01:29.260
only doing the recursion if
there's actually more work to do.

29
00:01:30.950 --> 00:01:32.600
It's not as complex as that may sound.

30
00:01:32.600 --> 00:01:33.920
So let's take a look.

31
00:01:35.410 --> 00:01:39.620
Here I'm going to compute first variable,
that first variable,

32
00:01:39.620 --> 00:01:40.809
I'm gonna compute it first.

33
00:01:42.110 --> 00:01:45.120
And then my base condition
is gonna look different.

34
00:01:45.120 --> 00:01:49.240
My base condition is going to check for
a string length less than or

35
00:01:49.240 --> 00:01:51.289
equal to 1 rather than for 0.

36
00:01:51.289 --> 00:01:54.160
Because I've already computed for

37
00:01:54.160 --> 00:01:57.790
a single character string,
I've already computed my 0 or my 1.

38
00:01:57.790 --> 00:02:02.170
And now I'm simply saying I
only need to do more work

39
00:02:02.170 --> 00:02:05.380
if there's actually other
stuff in the string.

40
00:02:05.380 --> 00:02:06.900
If I'm in an empty string or

41
00:02:06.900 --> 00:02:09.490
a single character string,
there is no more work to do.

42
00:02:10.760 --> 00:02:15.087
So let's not even make the recursive colon
that case, simply return the 0 or the 1.

43
00:02:15.087 --> 00:02:18.284
And if we've passed that
return statement on line 3,

44
00:02:18.284 --> 00:02:20.168
we know there is more work to do.

45
00:02:20.168 --> 00:02:24.169
And we simply do the same work we
did before which is first + the rest

46
00:02:24.169 --> 00:02:27.251
of the string,
the count to the rest of the string.

47
00:02:27.251 --> 00:02:31.409
It's just a slight tweak on the way of
thinking, but it says, do the work now,

48
00:02:31.409 --> 00:02:35.319
think about the work now, and
then decide if there's anymore work to do.

49
00:02:35.319 --> 00:02:38.870
Rather than sort of thinking about it in
terms of deferring the work until later.

50
00:02:40.000 --> 00:02:42.209
It just changes the position
of the basic condition.

51
00:02:43.320 --> 00:02:46.790
And I've often found that that
little tweak, even though it's

52
00:02:46.790 --> 00:02:50.930
sort of servicing my obsessiveness
of not doing extra function calls.

53
00:02:50.930 --> 00:02:52.560
Actually that little tweak sometimes,

54
00:02:52.560 --> 00:02:55.620
unlocks better optimizations for
recursion.

55
00:02:55.620 --> 00:02:57.050
So it's something to keep in your mind.

56
00:02:57.050 --> 00:02:58.930
It's something to make
sure you're aware of.

