WEBVTT

1
00:00:00.120 --> 00:00:03.150
&gt;&gt; Kyle Simpson: All right,
we have reached the end of our course and

2
00:00:03.150 --> 00:00:07.320
I wanna make sure that we just
look over where we've come and

3
00:00:07.320 --> 00:00:10.400
give you a road map to going back and
reviewing these things.

4
00:00:10.400 --> 00:00:12.940
The material that we've gone over
in this course is stuff that

5
00:00:12.940 --> 00:00:15.323
you can't learn in eight or ten hours.

6
00:00:15.323 --> 00:00:18.110
It's gonna take days, weeks, months,

7
00:00:18.110 --> 00:00:20.480
even potentially years of
working with this stuff.

8
00:00:20.480 --> 00:00:24.340
So this hopefully is a course and
the book that is a companion to it,

9
00:00:24.340 --> 00:00:29.360
is a road map for you to go back and try
these things little, by little, by little.

10
00:00:29.360 --> 00:00:33.800
What I hope that you get out of this, is
that you could take just the concepts in

11
00:00:33.800 --> 00:00:37.580
the discussion of functions and
the idea of avoiding side effects and

12
00:00:37.580 --> 00:00:40.920
the idea of doing some point
free style refactorings and

13
00:00:40.920 --> 00:00:43.030
just do that in your
programming code base.

14
00:00:44.560 --> 00:00:47.160
And you would improve
things substantially.

15
00:00:47.160 --> 00:00:50.790
And then you could later on some
closure to start remembering things and

16
00:00:50.790 --> 00:00:54.540
using some currying techniques and
then you could layer on composition for

17
00:00:54.540 --> 00:00:57.240
your data flows and
then you could layer on immutability.

18
00:00:57.240 --> 00:01:02.680
And the point that I'm trying to make is
you don't have to go wholesale entirely,

19
00:01:02.680 --> 00:01:05.490
all functional programming.

20
00:01:05.490 --> 00:01:09.720
The idea behind functional line,
is a ground up, pragmatic and

21
00:01:09.720 --> 00:01:13.630
most of all incremental approach
to layering these things,

22
00:01:13.630 --> 00:01:17.020
using immutability,
using the ideas of recursion.

23
00:01:17.020 --> 00:01:21.210
Using lists and data structure
operations and adapting things for

24
00:01:21.210 --> 00:01:22.740
asynchrony over time.

25
00:01:22.740 --> 00:01:26.180
Little, by little, by little,
you'll refactor your code bases.

26
00:01:26.180 --> 00:01:30.510
The truth is, that even several years into
this journey of learning function and

27
00:01:30.510 --> 00:01:32.590
adapting it to my JavaScript code,

28
00:01:32.590 --> 00:01:35.309
I still don't start out
writing a functional program.

29
00:01:36.670 --> 00:01:41.420
I definitely avoid some
problems that I've gotten so

30
00:01:41.420 --> 00:01:44.320
comfortable with,
that from the very beginning I can write.

31
00:01:44.320 --> 00:01:48.600
But for the most part, the way I
still write my programs, is I write

32
00:01:48.600 --> 00:01:53.520
the imperative form and then I go back and
I refactor it to be more functional.

33
00:01:53.520 --> 00:01:55.620
And I do that little,
by little, by little.

34
00:01:55.620 --> 00:01:58.300
And then I'll write another piece of
my app and it's very imperative and

35
00:01:58.300 --> 00:01:59.710
there's bugs and weird stuff.

36
00:01:59.710 --> 00:02:02.780
And little, by little, by little, as I
refactor it, I try to make it better and

37
00:02:02.780 --> 00:02:04.700
better and
better with the principles of functional.

38
00:02:06.020 --> 00:02:08.740
And my journey points to the idea

39
00:02:08.740 --> 00:02:12.850
that you can't really just
go top down at functional.

40
00:02:12.850 --> 00:02:14.760
If you learned as
an imperative programmer,

41
00:02:14.760 --> 00:02:18.670
the way all of us did,
you really have to go bottom up.

42
00:02:18.670 --> 00:02:22.420
There's no other way to climb the cliff,
than one step at a time,

43
00:02:22.420 --> 00:02:25.270
you can't just jump to the top.

44
00:02:25.270 --> 00:02:27.880
You gotta climb this
cliff one step at a time.

45
00:02:27.880 --> 00:02:30.080
And I hope what you've
gotten out of this course,

46
00:02:30.080 --> 00:02:31.650
is now you're not scared of the equipment.

47
00:02:33.040 --> 00:02:36.460
Now you understand what the equipment
does and as you climb up the mountain,

48
00:02:36.460 --> 00:02:39.910
as you figure out that journey,
make sure to leave a map for

49
00:02:39.910 --> 00:02:42.450
other people to see how
you're going as well.

50
00:02:42.450 --> 00:02:47.210
Thanks very much for hanging in
through a pretty intense course.

51
00:02:47.210 --> 00:02:49.540
If your brain is wiped out,
my brain is certainly wiped out.

52
00:02:49.540 --> 00:02:52.230
So thanks for hanging in for
a pretty tough course.

53
00:02:52.230 --> 00:02:56.368
I hope that you have learned and most
of all, I hope that we've sparked some

54
00:02:56.368 --> 00:03:00.783
curiosity for you to see how to apply
these functional principles in your code.

55
00:03:00.783 --> 00:03:01.783
Thanks a lot.

56
00:03:01.783 --> 00:03:05.658
&gt;&gt; Class: [APPLAUSE]

