WEBVTT

1
00:00:00.060 --> 00:00:03.860
&gt;&gt; Kyle Simpson: So what we wanna do is we
wanna get to that idea of the shapes being

2
00:00:03.860 --> 00:00:04.720
equal with each other.

3
00:00:06.050 --> 00:00:08.000
Here I have an isOdd function.

4
00:00:09.050 --> 00:00:10.090
It's pretty straightforward.

5
00:00:10.090 --> 00:00:12.010
It uses the modular operator.

6
00:00:12.010 --> 00:00:16.250
So any value module 02,
if it returns us one,

7
00:00:16.250 --> 00:00:20.180
that means it was an odd number, if it
returns to 0, it was even number, okay?

8
00:00:20.180 --> 00:00:22.580
Very basic math concept there.

9
00:00:22.580 --> 00:00:24.690
But if I wanted to find
the isEven function,

10
00:00:24.690 --> 00:00:26.680
there's a couple of ways
that I could have done it.

11
00:00:26.680 --> 00:00:32.595
I could have said isEven and on line 6,
I could have said, v mod 2 == 0.

12
00:00:34.365 --> 00:00:35.920
&gt;&gt; Kyle Simpson: And
that would work just fine.

13
00:00:35.920 --> 00:00:42.060
It's mathematically accurate to
say that isEven is v mod 2 = 0.

14
00:00:42.060 --> 00:00:43.858
But I did it a little differently,

15
00:00:43.858 --> 00:00:48.379
I defined the isEven in
terms of the isOdd function.

16
00:00:50.180 --> 00:00:53.330
And specifically, I negated it
because we have a binary here,

17
00:00:53.330 --> 00:00:56.240
something is either even or
odd, it's not not both and

18
00:00:56.240 --> 00:00:59.290
it's not neither, it's either
a number is either even or it's not.

19
00:01:01.220 --> 00:01:07.000
So, I'm asking the question here,
if I take this isEven function and

20
00:01:07.000 --> 00:01:09.740
I define it in terms of isOdd.

21
00:01:09.740 --> 00:01:12.950
As opposed to doing just v mod 2 = 0.

22
00:01:12.950 --> 00:01:16.600
What have I purchased with that choice?

23
00:01:16.600 --> 00:01:22.790
What benefit am I getting from
defining isEven in terms of isOdd?

24
00:01:22.790 --> 00:01:24.700
And the answer I would say is,

25
00:01:24.700 --> 00:01:31.100
I have created a more visible
relationship between the two functions.

26
00:01:31.100 --> 00:01:34.720
I have said that isEven
is the negation of isOdd.

27
00:01:35.820 --> 00:01:38.942
Whereas if I just done v mod 2 = 0,

28
00:01:38.942 --> 00:01:44.839
that relationship would exist but
it would be completely non obvious.

29
00:01:47.130 --> 00:01:50.114
Here I am attempting to
make it more obvious,

30
00:01:50.114 --> 00:01:55.469
the relationship between isOdd and isEven
by defining one in terms of the other.

31
00:01:55.469 --> 00:01:58.230
So it's not just about saving keystrokes,

32
00:01:58.230 --> 00:02:03.537
a lot of times you hear people say well I
[SOUND] dry, don't repeat yourself, right?

33
00:02:03.537 --> 00:02:07.120
That might be why a lot of people would
justify dry, don't repeat yourself.

34
00:02:10.090 --> 00:02:11.940
I'm not saying that there
isn't benefit there.

35
00:02:13.770 --> 00:02:17.200
Being unnecessarily repetitive can
sometimes hamper the readability

36
00:02:17.200 --> 00:02:18.140
of a program.

37
00:02:18.140 --> 00:02:19.750
But actually it turns out,

38
00:02:19.750 --> 00:02:24.270
sometimes in functional programming,
it is better to be repetitive.

39
00:02:25.330 --> 00:02:30.580
So we don't want to take dry as like
a religious artifact, like I have to have

40
00:02:30.580 --> 00:02:35.740
every certain thing written only once and
everything is using the generic, whatever.

41
00:02:35.740 --> 00:02:37.670
That's not always the best.

42
00:02:37.670 --> 00:02:40.755
Here, we're not doing, isEven in terms of

43
00:02:40.755 --> 00:02:44.980
isOdd because we want to save a few
characters of the modulo operator.

44
00:02:44.980 --> 00:02:47.370
Because we wanna make it obvious
that there's a relationship,

45
00:02:47.370 --> 00:02:49.140
a negation relationship between the two.

46
00:02:50.330 --> 00:02:51.770
And by thinking that way,

47
00:02:51.770 --> 00:02:56.680
we actually got ourselves 90% of the way
to being able to answer this question

48
00:02:56.680 --> 00:03:01.630
which is, could I define the isEven
function in a point freeway?

49
00:03:01.630 --> 00:03:05.775
Could I define it in terms of isOdd
without having to list out that

50
00:03:05.775 --> 00:03:09.970
v that's being passed in
because there's the point.

51
00:03:09.970 --> 00:03:14.380
This is a pointed definition and we're
asking, could I define it point free?

52
00:03:16.160 --> 00:03:21.440
Before I even show you how to do
the point free, we probably should have

53
00:03:21.440 --> 00:03:27.300
motivated why, what is the point of point
free, like what what are we buying there?

54
00:03:27.300 --> 00:03:30.170
Well what we're doing is we're
moving to that declarative style.

55
00:03:32.090 --> 00:03:33.940
When we have points,

56
00:03:33.940 --> 00:03:39.010
what we have is an imperative style that
routes data from an input to an input.

57
00:03:40.050 --> 00:03:44.160
But when we use point free style,
we have a declarative thing.

58
00:03:44.160 --> 00:03:47.460
Here's a strange phenomenon
that I've seen with

59
00:03:47.460 --> 00:03:49.679
the idea between imperative and
declarative.

60
00:03:50.740 --> 00:03:55.540
Because the words themselves, the physical
letters in those words, to me,

61
00:03:55.540 --> 00:04:01.890
imply that imperative would be implicit,
since the words seem the same.

62
00:04:01.890 --> 00:04:04.840
But it turns out that it's reverse.

63
00:04:04.840 --> 00:04:10.370
It turns out that imperative code
is generally more explicit and

64
00:04:10.370 --> 00:04:13.670
declarative code is
generally more implicit.

65
00:04:14.870 --> 00:04:18.640
Now, you stop any,
100 software developers somewhere and

66
00:04:18.640 --> 00:04:22.280
you ask them the question is it better for
a code to be explicit or implicit,

67
00:04:22.280 --> 00:04:25.590
99 out of 100 are gonna tell
you it's better to be explicit.

68
00:04:27.070 --> 00:04:30.730
And what we're actually suggesting
here is that in some senses,

69
00:04:30.730 --> 00:04:32.720
it's better to be implicit.

70
00:04:32.720 --> 00:04:34.530
It's better to be declarative and

71
00:04:34.530 --> 00:04:39.200
allow the existing Lego pieces that are in
our application, either in the language or

72
00:04:39.200 --> 00:04:44.120
in our libraries to handle
those unnecessary details.

73
00:04:44.120 --> 00:04:45.460
Because it's not important for

74
00:04:45.460 --> 00:04:50.570
the reader of this code to see v on
line five being passed on line six.

75
00:04:50.570 --> 00:04:52.330
That is an unnecessary detail.

76
00:04:54.250 --> 00:04:58.400
If I can define this in a point
free array, I free up the reader to

77
00:04:58.400 --> 00:05:02.360
glance at and realize, okay,
isEven is the negation of isOdd.

78
00:05:04.040 --> 00:05:05.290
So how are we gonna accomplish that?

79
00:05:06.320 --> 00:05:10.450
If you can agree with me that it is
beneficial from a readability perspective,

80
00:05:10.450 --> 00:05:12.050
how are we gonna accomplish it?

81
00:05:12.050 --> 00:05:15.650
We're gonna accomplish
it by creating a utility

82
00:05:15.650 --> 00:05:19.710
that adapts the shape of a function,
exactly like we did before with HOF.

83
00:05:19.710 --> 00:05:21.890
We're gonna make another HOF.

84
00:05:21.890 --> 00:05:24.300
Actually, we don't need to invent one,
one already exists.

85
00:05:24.300 --> 00:05:26.380
I'm just going to tell you about it.

86
00:05:26.380 --> 00:05:29.450
Let's think about a HOF,
a Higher Order Function called not.

87
00:05:31.160 --> 00:05:31.930
This is by the way,

88
00:05:31.930 --> 00:05:35.780
often referred to as complement in
functional programming libraries.

89
00:05:35.780 --> 00:05:38.530
I don't like that name, that confuses me.

90
00:05:38.530 --> 00:05:39.800
So I like to use not.

91
00:05:39.800 --> 00:05:42.340
Sometimes I use negate,
sometimes I use not.

92
00:05:42.340 --> 00:05:43.390
I almost never use complement.

93
00:05:43.390 --> 00:05:45.090
But anyway, if you're looking it up,
you'll find it,

94
00:05:45.090 --> 00:05:47.860
it's called complement in for
something like.

95
00:05:47.860 --> 00:05:50.830
But what it does is it takes
the function fn, line 1,

96
00:05:50.830 --> 00:05:54.592
it makes a new function that's negated,
line 2, and all it does is

97
00:05:54.592 --> 00:05:59.240
call the original underlying function with
all the inputs and return the outputs.

98
00:05:59.240 --> 00:06:02.860
But it does line 3, that little
exclamation mark, it negates it.

99
00:06:04.960 --> 00:06:09.244
So now, when I declare isEven,
I simply call this

100
00:06:09.244 --> 00:06:13.979
Higher Order Function utility not and
I pass in isOdd.

101
00:06:13.979 --> 00:06:19.260
And what I would argue is not
only is line 11 less to read and

102
00:06:19.260 --> 00:06:22.860
mentally juggle, cuz I don't need to see
the function calling another function,

103
00:06:22.860 --> 00:06:24.360
passing the parameters, but

104
00:06:24.360 --> 00:06:28.633
it is even more clearer the relationship
between isOdd and isEven now, right?

105
00:06:29.760 --> 00:06:33.459
You can very clearly see
that isOdd is the negation,

106
00:06:33.459 --> 00:06:38.758
that isEven is the negation of isOdd,
that's where we get the readability

107
00:06:38.758 --> 00:06:43.920
gains in functional programming and
specifically in point freestyle.

108
00:06:43.920 --> 00:06:46.130
You define one function
in terms of another,

109
00:06:46.130 --> 00:06:48.230
you make the relationship
between them much more clear.

110
00:06:50.110 --> 00:06:55.090
You allow the how, the imperative
details to be implicitly hidden

111
00:06:55.090 --> 00:06:56.580
through a declarative style of coding.

112
00:06:58.269 --> 00:07:01.430
&gt;&gt; Kyle Simpson: That's the big takeaway
from all the functional programming,

113
00:07:01.430 --> 00:07:05.700
you could almost stop,
right here at the and just get that and

114
00:07:05.700 --> 00:07:08.910
you've gotten a huge nugget of wisdom
out of functional programming.

115
00:07:08.910 --> 00:07:10.580
That's the key idea.

