WEBVTT

1
00:00:00.200 --> 00:00:04.300
&gt;&gt; Kyle: So here let's make, Just (41).

2
00:00:04.300 --> 00:00:07.680
We've now made ourselves
a monad called fortyOne.

3
00:00:07.680 --> 00:00:12.636
Line 2, let's make a fortyTwo monad that

4
00:00:12.636 --> 00:00:17.323
is the mapping from the fortyOne monad.

5
00:00:17.323 --> 00:00:22.330
fortyTwo here is not the number 42,
it's a monad wrapped around the number 42.

6
00:00:22.330 --> 00:00:23.030
Why?

7
00:00:23.030 --> 00:00:27.829
Because .map always has to return the same
kind of data structure as it started with.

8
00:00:27.829 --> 00:00:30.079
Call it .map on an array,
get an array, call it on a monad,

9
00:00:30.079 --> 00:00:31.390
you're gonna get another monad.

10
00:00:33.040 --> 00:00:34.790
All right,
well that's fairly straightforward.

11
00:00:34.790 --> 00:00:38.440
That's a way of getting one
value changed to another.

12
00:00:38.440 --> 00:00:41.510
It definitely seems like a lot of pomp and
circumstance.

13
00:00:41.510 --> 00:00:44.935
[LAUGH] When we're used to just being
able to do something like plus 1,

14
00:00:44.935 --> 00:00:47.900
this seems like a lot of
extra work to be going to.

15
00:00:47.900 --> 00:00:51.000
And the only reason you
go to this extra work

16
00:00:51.000 --> 00:00:55.000
is because these monads have this nice
clean way of working together that

17
00:00:57.810 --> 00:01:01.440
is more predictable than
just regular old values.

18
00:01:01.440 --> 00:01:05.020
They have these mathematical principles
that we're trying to opt into.

19
00:01:05.020 --> 00:01:09.144
That's why you go to
the trouble of using a monad.

20
00:01:09.144 --> 00:01:11.700
Okay, let's then talk.

21
00:01:11.700 --> 00:01:14.442
Remember, we talked early in
the course of the identity function,

22
00:01:14.442 --> 00:01:16.720
here we're got the identity
function again.

23
00:01:16.720 --> 00:01:21.800
I just want to show you that if
you call chain with a method that

24
00:01:21.800 --> 00:01:26.260
only returns a value like identity, then
you're literally gonna get the value out.

25
00:01:26.260 --> 00:01:30.970
If I say fortyOne.chain(identity),
I'm literally gonna get

26
00:01:30.970 --> 00:01:36.100
the value 41 out, same thing,
line 12 with the value 42.

27
00:01:36.100 --> 00:01:38.740
That technically lines
10 through 12 [LAUGH]

28
00:01:38.740 --> 00:01:41.990
that technically is a violation
of the monadic laws.

29
00:01:41.990 --> 00:01:45.988
You're not supposed to call chain with a
map or function that won't return a monad.

30
00:01:45.988 --> 00:01:50.721
And some monad implementations would
actually catch this problem and

31
00:01:50.721 --> 00:01:54.580
either throw an error or
force it to be wrapped in a monad.

32
00:01:54.580 --> 00:01:58.107
My very loose implementation,
and I'm only doing this here for

33
00:01:58.107 --> 00:02:00.490
our debug inspection purposes.

34
00:02:00.490 --> 00:02:03.410
I'm only showing you that
you can look at a monad and

35
00:02:03.410 --> 00:02:06.240
see what's in it if you sort
of violate that monadic law.

36
00:02:06.240 --> 00:02:07.920
But that's not what you're supposed to do.

37
00:02:07.920 --> 00:02:10.850
What you're supposed to do is
once it's in a monad, just make

38
00:02:10.850 --> 00:02:14.680
another monad out of it, and make another
monad out of that, and so on and so forth.

39
00:02:14.680 --> 00:02:17.440
You're never really supposed to
extract it out of the monad like that.

40
00:02:18.610 --> 00:02:21.036
Okay, so here we are, making monads.

41
00:02:21.036 --> 00:02:24.990
We're able to convert one
monad to another using a .map.

42
00:02:24.990 --> 00:02:27.900
Let's talk about .chain and
.ap calls for just a moment.

43
00:02:29.390 --> 00:02:32.720
If I made a couple of monads that
were wrapped around the strings,

44
00:02:32.720 --> 00:02:34.750
Kyle and Susan.

45
00:02:34.750 --> 00:02:37.662
And then I had a tuple function.

46
00:02:37.662 --> 00:02:40.271
And we've looked at this
earlier in the course, but

47
00:02:40.271 --> 00:02:44.363
this particular version of tuple which is
curry, is going to take in two values and

48
00:02:44.363 --> 00:02:47.450
return us an array with those two values.

49
00:02:47.450 --> 00:02:50.373
That's what it's job is,
is to take in two individual values and

50
00:02:50.373 --> 00:02:52.100
make an array with them.

51
00:02:52.100 --> 00:02:53.470
By the way, what shape is that?

52
00:02:55.500 --> 00:02:56.649
What shape is tuple?

53
00:03:03.995 --> 00:03:07.328
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Kyle: What shape have we been talking

54
00:03:07.328 --> 00:03:08.373
about over and over and

55
00:03:08.373 --> 00:03:11.798
over again when we were talking about
all those transducer discussions?

56
00:03:11.798 --> 00:03:13.591
What shape is tuple?

57
00:03:13.591 --> 00:03:15.940
It looks like a reducer, right?

58
00:03:15.940 --> 00:03:18.640
It's a thing that takes two values and
makes one value out of it.

59
00:03:18.640 --> 00:03:20.450
In this case it takes
two discrete values and

60
00:03:20.450 --> 00:03:22.890
makes it a two element array out of it.

61
00:03:23.950 --> 00:03:27.440
Get used to thinking about every time
you see a function, ask yourself,

62
00:03:27.440 --> 00:03:29.140
what kind of shape is it?

63
00:03:29.140 --> 00:03:32.230
And if I know what kind of shape it is,
what kind of usage can I get out of it?

64
00:03:36.140 --> 00:03:38.451
&gt;&gt; Kyle: Okay, so
let's look at the .ap call,

65
00:03:38.451 --> 00:03:42.634
cuz remember I said the .ap is
sort of a strange little beast.

66
00:03:42.634 --> 00:03:50.134
The .ap call on this line eight is being
called on the result of the .map call.

67
00:03:51.470 --> 00:03:55.353
So we're gonna take user1 and
map it with tuple.

68
00:03:55.353 --> 00:03:59.359
What does user1.map with tuple give us?

69
00:04:03.483 --> 00:04:07.353
&gt;&gt; Speaker 3: It connects it [INAUDIBLE]
&gt;&gt; Kyle: Think carefully,

70
00:04:07.353 --> 00:04:12.910
if I just did user1.map and
I passed in tuple what would we get back?

71
00:04:12.910 --> 00:04:17.491
&gt;&gt; Speaker 4: Function with the x already-
&gt;&gt; Kyle: What is the return

72
00:04:17.491 --> 00:04:19.293
value of every .map call?

73
00:04:19.293 --> 00:04:20.457
&gt;&gt; Speaker 4: An array.

74
00:04:20.457 --> 00:04:25.480
&gt;&gt; Kyle: No, it is the data structure
type that it was called upon.

75
00:04:25.480 --> 00:04:30.080
If we called array.map we're gonna get
an array, but here we are calling what?

76
00:04:30.080 --> 00:04:32.134
&gt;&gt; Speaker 4: Monad.
&gt;&gt; Kyle: We're calling monad.map.

77
00:04:32.134 --> 00:04:33.125
So what are we gonna get?

78
00:04:33.125 --> 00:04:34.118
&gt;&gt; Speaker 3: A monad
&gt;&gt; Kyle: We're gonna get

79
00:04:34.118 --> 00:04:35.320
another monad back.

80
00:04:35.320 --> 00:04:36.990
And what is that monad gonna have in it?

81
00:04:36.990 --> 00:04:42.200
Well it called tuple with the single
value that was inside of user one,

82
00:04:42.200 --> 00:04:44.140
which is a string file.

83
00:04:44.140 --> 00:04:47.770
Tuple expects two inputs, and
it only got called with one input.

84
00:04:48.850 --> 00:04:53.978
So what is going to come back to be
stuck inside of that intermediary monad?

85
00:04:56.630 --> 00:04:57.820
&gt;&gt; Speaker 2: Curry.

86
00:04:57.820 --> 00:05:02.190
&gt;&gt; Kyle: A single function that
is waiting for one more value.

87
00:05:02.190 --> 00:05:08.520
So the monad that we have made with
the user1.map is a monad that is wrapped

88
00:05:08.520 --> 00:05:15.910
around the function that is holding
the string Kyle in its closure, okay?

89
00:05:15.910 --> 00:05:18.340
And then we're gonna
call .ap on that thing.

90
00:05:18.340 --> 00:05:22.930
And if you look back in your slides to
the previous slide, what does .ap do?

91
00:05:22.930 --> 00:05:31.230
It's gonna call user2.map with the
function that's in our temporary monad.

92
00:05:31.230 --> 00:05:36.380
So we have one value coming out
of user1 into the closure, and

93
00:05:36.380 --> 00:05:41.250
then we call .ap on another monad and
it provides the second value, and

94
00:05:41.250 --> 00:05:43.570
what do we get back from that .ap call?

95
00:05:45.390 --> 00:05:49.290
That .ap call is under
the covers a .map call.

96
00:05:49.290 --> 00:05:50.335
So what are we gonna get back?

97
00:05:50.335 --> 00:05:51.375
&gt;&gt; Speaker 3: A monad.

98
00:05:51.375 --> 00:05:53.290
&gt;&gt; Kyle: We're gonna get a monad,
thank you.

99
00:05:53.290 --> 00:05:57.430
And what is that monad gonna have in it?

100
00:05:57.430 --> 00:05:58.660
&gt;&gt; Speaker 4: A tuple.

101
00:05:58.660 --> 00:06:01.070
&gt;&gt; Kyle: It's gonna have the tuple,
thank you very much.

102
00:06:01.070 --> 00:06:06.015
If we called users.chain(identity), our
little cheating the monadic laws thing,

103
00:06:06.015 --> 00:06:08.640
you're gonna see the tuple,
Kyle and Susan.

104
00:06:12.790 --> 00:06:16.892
&gt;&gt; Kyle: So .ap is a way for
us to take one value out of a monad,

105
00:06:16.892 --> 00:06:22.600
put it into a closure, and then use
that as the mapper for the next monad.

106
00:06:26.420 --> 00:06:31.101
&gt;&gt; Kyle: These three functions, map,
chain, or flat map, or bind, whichever one

107
00:06:31.101 --> 00:06:36.003
you want to call it, and .ap, those three
functions have a specific set of ways

108
00:06:36.003 --> 00:06:41.300
that they work together that fulfills
what are called the three monadic laws.

109
00:06:41.300 --> 00:06:44.090
And I'm not even gonna tell you what the
three monastic laws are cuz I don't know

110
00:06:44.090 --> 00:06:46.450
what they are, and
I'm not a mathematician.

111
00:06:46.450 --> 00:06:50.830
But it is important that monads
behave according to those laws.

112
00:06:50.830 --> 00:06:52.490
If they don't behave
according to those laws,

113
00:06:52.490 --> 00:06:55.230
all the math is lost,
all the benefit of this is loss.

114
00:06:55.230 --> 00:06:58.310
There's no point to it,
unless you're getting

115
00:06:58.310 --> 00:07:01.560
all of that mathematical characteristic
out of these operations.

116
00:07:01.560 --> 00:07:06.442
So that's why you go to the extra
trouble to wrap something

117
00:07:06.442 --> 00:07:09.140
like the string Kyle in a monad.

118
00:07:09.140 --> 00:07:13.006
Is that you're gonna get these higher
level mathematical principles as you start

119
00:07:13.006 --> 00:07:15.180
doing bigger and bigger operations.

120
00:07:15.180 --> 00:07:18.050
We're not gonna talk about those
bigger and bigger operations,

121
00:07:18.050 --> 00:07:21.450
partly because I don't even fully
understand the bigger operations and

122
00:07:21.450 --> 00:07:25.580
partly because that's not
the objective of this discussion.

123
00:07:25.580 --> 00:07:28.640
I am not trying to make
you masters of the nomad.

124
00:07:28.640 --> 00:07:32.330
The only thing I wanna show you
is that a nomad is not some

125
00:07:32.330 --> 00:07:35.600
mystical thing that you
can't possibly understand.

126
00:07:35.600 --> 00:07:39.750
It's just an object wrapped around the
value with some specific behaviors on it.

