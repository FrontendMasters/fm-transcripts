WEBVTT

1
00:00:00.220 --> 00:00:01.427
&gt;&gt; Kyle Simpson: Here's a different usage.

2
00:00:01.427 --> 00:00:04.045
You've probably seen
functions used as values,

3
00:00:04.045 --> 00:00:06.610
here I'm returning a function back.

4
00:00:06.610 --> 00:00:10.996
So I have this function called addAnother,
which takes in z as an input.

5
00:00:10.996 --> 00:00:13.260
Now it's not a constant
in the global scope.

6
00:00:13.260 --> 00:00:16.960
It's a parameter that is passed in.

7
00:00:16.960 --> 00:00:20.100
And you'll notice on line seven, this
little strange thing that's happening is

8
00:00:20.100 --> 00:00:24.450
that when I call out another
the first time with the value one,

9
00:00:24.450 --> 00:00:27.920
that gets assigned to the z parameter, and

10
00:00:27.920 --> 00:00:33.520
I get back an addTwo function
that is referencing z, right.

11
00:00:34.560 --> 00:00:39.200
And then I execute that function
that came back, which we know here

12
00:00:39.200 --> 00:00:42.829
to be called addTwo, I execute that
with the second set of parentheses.

13
00:00:44.660 --> 00:00:45.400
They're in line seven.

14
00:00:46.910 --> 00:00:50.200
That second set of parentheses is
executing that inner function that got

15
00:00:50.200 --> 00:00:51.440
returned back, and

16
00:00:51.440 --> 00:00:55.510
when that function runs, it is
referencing a variable outside of itself.

17
00:00:55.510 --> 00:00:59.570
That variable was not declared
with a const, it's a parameter.

18
00:01:02.120 --> 00:01:06.040
But what's interesting about this code
that was not true of the previous slide,

19
00:01:06.040 --> 00:01:11.730
is that this code, has a smaller surface
area that we need to worry about,

20
00:01:11.730 --> 00:01:14.370
with respect to whether z
gets reassigned or not.

21
00:01:15.380 --> 00:01:20.840
If we wanna ask ourselves is z in effect
a constant, there are only two lines that

22
00:01:20.840 --> 00:01:24.270
we need to concern ourselves with, line
one and a half and line two and a half.

23
00:01:25.630 --> 00:01:31.304
They are the only two lines in the entire
program that could possibly re-assign z.

24
00:01:33.739 --> 00:01:36.694
&gt;&gt; Kyle Simpson: Do you see the difference
between that and the previous slide,

25
00:01:36.694 --> 00:01:40.750
where there were 11 lines that could
have theoretically have reassigned z?

26
00:01:40.750 --> 00:01:43.180
But because of the structure
of this program,

27
00:01:43.180 --> 00:01:46.380
I've reduced the surface area
where reassignment could occur.

28
00:01:48.320 --> 00:01:50.750
And as a result of
reducing the surface area,

29
00:01:50.750 --> 00:01:53.439
my argument is we're
increasing readability.

30
00:01:55.110 --> 00:01:58.660
We are increasing the confidence for
the reader of this code

31
00:01:58.660 --> 00:02:03.130
that when they see z passed in as one,
they know it stays as one from then on.

32
00:02:04.360 --> 00:02:04.991
You with me?

33
00:02:04.991 --> 00:02:07.023
You had a question, yes?

34
00:02:07.023 --> 00:02:11.610
&gt;&gt; Speaker 2: Yeah,
would this be considered currying?

35
00:02:11.610 --> 00:02:13.853
&gt;&gt; Kyle Simpson: That's a great question
and we are gonna get to currying.

36
00:02:13.853 --> 00:02:17.218
So the question if you didn't hear it was,
is this currying?

37
00:02:17.218 --> 00:02:20.997
It is in effect a partial
application of a value,

38
00:02:20.997 --> 00:02:24.140
which you could also label as currying.

39
00:02:24.140 --> 00:02:25.915
But we wanna dig into that topic more, so

40
00:02:25.915 --> 00:02:28.330
hold on to that question
till we get to that.

41
00:02:28.330 --> 00:02:33.091
But yes, we are providing some input now,
remembering that input until later.

42
00:02:33.091 --> 00:02:36.607
And that is in the general
scheme of things, yes,

43
00:02:36.607 --> 00:02:39.240
partial application AKA currying.

44
00:02:39.240 --> 00:02:43.869
All right, so our inner function using
that z variable, by the way int is using

45
00:02:43.869 --> 00:02:49.425
closure to do that, we'll come back to
closure in our next section of discussion.

46
00:02:49.425 --> 00:02:54.435
By remembering and using a z variable that
doesn't change, it's in effect a constant.

47
00:02:54.435 --> 00:02:59.271
And therefore, both the outer function
call the one with the first parentheses

48
00:02:59.271 --> 00:03:03.527
set, and the inner function,
the one that is executed with the second

49
00:03:03.527 --> 00:03:07.883
parentheses set, line seven,
both of those function calls are pure.

50
00:03:12.105 --> 00:03:16.441
&gt;&gt; Kyle Simpson: That is to say, they
have the predictability that we need and

51
00:03:16.441 --> 00:03:18.660
expect out of pure functions.

