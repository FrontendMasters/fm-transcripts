WEBVTT

1
00:00:00.160 --> 00:00:05.420
&gt;&gt; Kyle Simpson: Well, let's practice that
topic of containing function impurity.

2
00:00:06.890 --> 00:00:08.710
We talked about two different techniques,
so

3
00:00:08.710 --> 00:00:11.350
we have a two part exercise on impurity.

4
00:00:11.350 --> 00:00:15.760
First part of this exercise, it's laid out
here in the read me, and I encourage you

5
00:00:15.760 --> 00:00:20.296
definitely do read this, but essentially
you're gonna be taking some functions and

6
00:00:20.296 --> 00:00:23.391
moving them around, or
refactoring them, so that they.

7
00:00:23.391 --> 00:00:28.393
The first technique that you're gonna
use is that technique we talked about,

8
00:00:28.393 --> 00:00:33.870
of wrapping a function around, wrapping
a pure function around an impure function.

9
00:00:33.870 --> 00:00:36.499
So if you notice in our excercise, EXJS,

10
00:00:36.499 --> 00:00:42.223
you'll notice we have these functions like
sortStudentsByName and sortStudentsByID.

11
00:00:42.223 --> 00:00:47.766
And you'll notice that these functions
modify a variable outside of themselves.

12
00:00:47.766 --> 00:00:52.509
So there is our side effect, the fact
that students.sort is being called, that

13
00:00:52.509 --> 00:00:57.630
modifies the array in place, and that's
the side effect that we want to avoid.

14
00:00:57.630 --> 00:01:01.980
So our first task, part one,
is to take this function and

15
00:01:01.980 --> 00:01:06.890
to re-factor the code
around this function, so

16
00:01:06.890 --> 00:01:10.060
that it is behaving in
a pure way from the outside.

17
00:01:10.060 --> 00:01:12.810
The way you're gonna do that
actually is to have, or

18
00:01:12.810 --> 00:01:16.300
to define a function
called getStudentsByName.

19
00:01:16.300 --> 00:01:21.158
So this is the function that you're gonna
modify, and in this case most likely move,

20
00:01:21.158 --> 00:01:23.528
to wrap around the sortStudentsByName.

21
00:01:23.528 --> 00:01:27.121
And you'll notice,
in the read me it'll explain,

22
00:01:27.121 --> 00:01:32.105
it needs to receive input and
it's going to return the modified output,

23
00:01:32.105 --> 00:01:35.372
but it will contain that
impurity to itself, so

24
00:01:35.372 --> 00:01:40.874
it will not actually end up changing
the results of these particular students.

25
00:01:40.874 --> 00:01:44.570
You'll notice at the bottom of your
exercise file, there's a variety of

26
00:01:44.570 --> 00:01:48.579
console statements, and these console
statements have comparisons in them.

27
00:01:48.579 --> 00:01:51.289
When your tests pass, essentially,

28
00:01:51.289 --> 00:01:56.610
each of these sections of console
log statements will print true.

29
00:01:56.610 --> 00:02:02.350
So you want to see the getStudentsByName,
when you're passing students

30
00:02:02.350 --> 00:02:08.270
it should produce a return result
that prints true for all of these.

31
00:02:08.270 --> 00:02:10.070
That's part one.

32
00:02:10.070 --> 00:02:15.000
Also, make sure that you
don't break the current

33
00:02:15.000 --> 00:02:18.930
vales that happen, or
these should all print true, as well.

34
00:02:18.930 --> 00:02:23.510
So studentTest1 and
studentTest3 should all print trues.

35
00:02:23.510 --> 00:02:27.110
These won't print true until part two,
okay?

36
00:02:27.110 --> 00:02:31.427
So that is part one, make sure you check
the read me for some hints, some specific

37
00:02:31.427 --> 00:02:35.746
things that you wanna do, you want to
avoid actually changing these functions,

38
00:02:35.746 --> 00:02:37.907
so don't change sortStudentsByName,

39
00:02:37.907 --> 00:02:42.314
simply wrap something around it, that's
how you want to avoid the side effects.

40
00:02:42.314 --> 00:02:46.582
For part two of the exercise,
we wanna do something similar,

41
00:02:46.582 --> 00:02:51.017
we wanna contain the impurity
inside of the sortStudentsByID,

42
00:02:51.017 --> 00:02:53.606
we wanna contain that impurity.

43
00:02:53.606 --> 00:02:57.150
But when we practice the second technique
we talked about, which wasn't wrapping

44
00:02:57.150 --> 00:03:01.560
a function around it, but rather creating
an adapter function alongside it.

45
00:03:01.560 --> 00:03:06.284
So remember, we have this getStudentsByID,
that's gonna be our adapter function,

46
00:03:06.284 --> 00:03:09.532
we wanna have it sitting
alongside the sortStudentsByID.

47
00:03:09.532 --> 00:03:12.541
And remember, it's in the slides,
and you can check that,

48
00:03:12.541 --> 00:03:16.040
remember the six steps that you
basically need to accomplish.

49
00:03:16.040 --> 00:03:21.290
You need to save the current state,
set up the appropriate initial state,

50
00:03:21.290 --> 00:03:26.150
call the side effect, capture the new
state, restore the old state and

51
00:03:26.150 --> 00:03:28.660
then return the captured state.

52
00:03:28.660 --> 00:03:32.580
So make sure you handle all of those
steps in your adapter function.

53
00:03:32.580 --> 00:03:34.960
And at this point,
once you've solved that,

54
00:03:34.960 --> 00:03:37.510
all 15 of these tests should print true.

