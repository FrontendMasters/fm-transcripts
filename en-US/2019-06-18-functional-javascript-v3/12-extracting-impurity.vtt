WEBVTT

1
00:00:00.100 --> 00:00:04.890
&gt;&gt; Kyle Simpson: Okay, so
if a function is not pure for

2
00:00:04.890 --> 00:00:09.420
any of a variety of reasons,
what are our options?

3
00:00:11.060 --> 00:00:15.650
One option, the obvious one is leave it
impure and that's just how it is, right?

4
00:00:15.650 --> 00:00:17.420
It's got a right to the database.

5
00:00:17.420 --> 00:00:18.630
There's no way around it.

6
00:00:18.630 --> 00:00:21.150
Database rights are an impurity.

7
00:00:21.150 --> 00:00:22.780
They are a side effect.

8
00:00:22.780 --> 00:00:26.550
They have to happen in our apps,
there's no way to get around that.

9
00:00:26.550 --> 00:00:28.380
We can certainly be obvious about it.

10
00:00:28.380 --> 00:00:30.560
We can name that function so

11
00:00:30.560 --> 00:00:33.930
that it is clear,
actually we can name that procedure, so

12
00:00:33.930 --> 00:00:39.380
that it is clear that it's gonna do
something like write to the database.

13
00:00:39.380 --> 00:00:42.690
We can even put a comment there like,
there be dragons,

14
00:00:42.690 --> 00:00:45.420
side effects beware, right?

15
00:00:45.420 --> 00:00:48.050
We can put them in a file
called side effects.js.

16
00:00:48.050 --> 00:00:52.381
We can be obvious about our side effects,
and we said earlier the reason for

17
00:00:52.381 --> 00:00:56.111
being obvious is so that we make
it easier to maintain this code.

18
00:00:59.612 --> 00:01:03.300
&gt;&gt; Kyle Simpson: But we do want to
reduce them as much as possible.

19
00:01:03.300 --> 00:01:04.530
And one of the key techniques for

20
00:01:04.530 --> 00:01:09.850
doing that is to take a function that
may have a side effect in it, and ask,

21
00:01:09.850 --> 00:01:14.360
is there some way for me to rearrange
the way this function works, and

22
00:01:14.360 --> 00:01:19.860
extract out the impurity,
leaving just a pure function in place?

23
00:01:21.020 --> 00:01:25.350
That does not mean to remove
that impure functionality.

24
00:01:25.350 --> 00:01:28.730
I do not mean to take that out of the app.

25
00:01:28.730 --> 00:01:31.510
You have to write to the database or
whatever.

26
00:01:31.510 --> 00:01:35.340
What I mean is it doesn't
have to belong right there.

27
00:01:36.830 --> 00:01:40.760
If I have this set of code that's doing
a very important set of computations

28
00:01:40.760 --> 00:01:44.400
on some kind of inputs, and
then it's gonna write it to the database.

29
00:01:46.360 --> 00:01:50.250
The functional programmer says, well,
that could be two separate entities.

30
00:01:50.250 --> 00:01:53.940
That could be a function that
does all the computation, and

31
00:01:53.940 --> 00:01:57.159
it could be a procedure that
does the single side effect.

32
00:01:58.260 --> 00:02:02.630
So what we're talking about
is to extract the impurity,

33
00:02:02.630 --> 00:02:06.220
to bring it to the edge,
to bring it to the outer shell.

34
00:02:06.220 --> 00:02:10.270
That is one way of making
side effects more obvious.

35
00:02:10.270 --> 00:02:13.430
Instead of hiding it inside of the
definition of this thing that looks like

36
00:02:13.430 --> 00:02:18.810
a function but it's actually a procedure,
we bring it to the surface.

37
00:02:18.810 --> 00:02:20.430
And we make it more obvious.

38
00:02:20.430 --> 00:02:25.700
Example, here's an add comment,
which is going to construct an object and

39
00:02:25.700 --> 00:02:29.820
put some values into it and
then it's going to append it to the DOM.

40
00:02:32.090 --> 00:02:34.121
It's an impure function, right?

41
00:02:34.121 --> 00:02:38.269
That is line 11 is an impure function call
because we create a side effect with it,

42
00:02:38.269 --> 00:02:41.020
which is that we modify the state
of the DOM in the page.

43
00:02:43.400 --> 00:02:45.883
But there are some interesting and

44
00:02:45.883 --> 00:02:50.857
useful stuff happening here that
is separate from the side effects.

45
00:02:50.857 --> 00:02:55.861
Matter of fact, not only is there
the side effect of adding to the DOM, but

46
00:02:55.861 --> 00:03:01.213
you might not have spotted this side
effect line three generating a unique ID.

47
00:03:01.213 --> 00:03:02.280
That's also a side effect.

48
00:03:03.590 --> 00:03:07.990
So, is it possible for
me to extract out the impurity and

49
00:03:07.990 --> 00:03:13.730
make that be at the edge, make it be
on the shell, and not be obvious?

50
00:03:13.730 --> 00:03:14.930
Sure it is.

51
00:03:14.930 --> 00:03:18.470
How about if we change this
code to look like that?

52
00:03:19.520 --> 00:03:23.525
We now have a,
not procedure called addComment, but

53
00:03:23.525 --> 00:03:29.403
a function called newComment, whose only
job is to make a new comment object.

54
00:03:30.813 --> 00:03:34.970
&gt;&gt; Kyle Simpson: But you'll notice
now that it receives the commentID as

55
00:03:34.970 --> 00:03:35.770
an input.

56
00:03:37.130 --> 00:03:41.500
We take commentID,
the unique ID generation, and

57
00:03:41.500 --> 00:03:44.450
we pass it in as an argument.

58
00:03:44.450 --> 00:03:47.695
And then instead of mutating the DOM
inside of newComment we return back

59
00:03:47.695 --> 00:03:48.514
the DOM element.

60
00:03:48.514 --> 00:03:54.016
We return back the thing
that is the DOM element and

61
00:03:54.016 --> 00:03:58.610
elsewhere we do the appending to the DOM.

62
00:04:00.630 --> 00:04:03.120
Now that doesn't get
rid of the side effect,

63
00:04:03.120 --> 00:04:08.042
it just extracts it to leave
pure function wherever possible.

64
00:04:09.630 --> 00:04:14.173
That's what a functional programmer
means by making pure functions and

65
00:04:14.173 --> 00:04:17.012
then having side effects
on the outer shell.

66
00:04:17.012 --> 00:04:22.042
Wherever possible look for an opportunity
to extract out the impurity,

67
00:04:22.042 --> 00:04:24.440
leaving a pure function in place.

68
00:04:26.330 --> 00:04:28.843
That will not always be practical.

69
00:04:28.843 --> 00:04:31.206
It will not always be
practical to do that, but

70
00:04:31.206 --> 00:04:35.340
wherever possible this is better than
leaving something as an impure function.

