WEBVTT

1
00:00:00.320 --> 00:00:01.149
&gt;&gt; Kyle Simpson: Our third and

2
00:00:01.149 --> 00:00:06.589
final list/data structure operation that
we're gonna look at, is called reduce.

3
00:00:06.589 --> 00:00:11.169
If map does transformation, and
filter does inclusion or exclusion,

4
00:00:11.169 --> 00:00:15.155
depending upon your perspective,
reduce combines values.

5
00:00:15.155 --> 00:00:19.628
It's a different sort of an operation,
because it's not actually taking

6
00:00:19.628 --> 00:00:23.322
one individual value at a time and
making some decision on it.

7
00:00:23.322 --> 00:00:27.003
The other two, operate
independently on individual values.

8
00:00:27.003 --> 00:00:31.143
For example,
you could imagine implementing map or

9
00:00:31.143 --> 00:00:35.103
filter in an entirely
parallel sort of scenario.

10
00:00:35.103 --> 00:00:38.211
If you had a million
values in an array and

11
00:00:38.211 --> 00:00:43.614
you had a filter that was parallelizible
across background threads.

12
00:00:43.614 --> 00:00:46.218
You could spin up a million
background threads and

13
00:00:46.218 --> 00:00:48.822
do each filter operation
entirely independent,

14
00:00:48.822 --> 00:00:52.488
because the decision is made only
on that value, same thing with map.

15
00:00:52.488 --> 00:00:55.220
And in fact in many scenarios,
not JavaScript but

16
00:00:55.220 --> 00:00:59.840
in many other functional languages, they
do actually implement things like map and

17
00:00:59.840 --> 00:01:01.416
filter entirely threaded.

18
00:01:01.416 --> 00:01:05.196
So that they can happen in parallel is for
large data structures, but

19
00:01:05.196 --> 00:01:09.710
reduce can't really work that way,
because reduce works with multiple values.

20
00:01:09.710 --> 00:01:13.288
It makes its decision based upon
the current running accumulator,

21
00:01:13.288 --> 00:01:14.676
as well as the next value.

22
00:01:14.676 --> 00:01:17.260
So it's not really
readily parallelizable or

23
00:01:17.260 --> 00:01:21.641
independently parallelizable the way
something like map or filter would be.

24
00:01:21.641 --> 00:01:25.897
So here's how it works, we start with a
collection of values and we need to start

25
00:01:25.897 --> 00:01:29.910
with some sort of initial value that
is appropriate for the list of values.

26
00:01:29.910 --> 00:01:32.986
So if we have a list,
I mean a collection of it, so

27
00:01:32.986 --> 00:01:36.061
if we have for example,
an array of numbers, and

28
00:01:36.061 --> 00:01:40.727
we're gonna do something arithmetic
with those numbers like addition.

29
00:01:40.727 --> 00:01:46.403
A good initial value might be zero,
if we were gonna do multiplication or

30
00:01:46.403 --> 00:01:52.187
even division, a better number might
be the number one, are you with me?

31
00:01:52.187 --> 00:01:56.786
If we're gonna start with a set of strings
and do like some sort of concatenation of

32
00:01:56.786 --> 00:02:00.399
all the strings, a good initial
value would be an empty string.

33
00:02:00.399 --> 00:02:04.666
If we were gonna start with a list of
promises and try to chain all those

34
00:02:04.666 --> 00:02:09.686
promises together, a good initial value
might be an already resolved promise.

35
00:02:09.686 --> 00:02:14.153
If we were gonna start with a list of
functions and have one function call

36
00:02:14.153 --> 00:02:19.150
another and that function call another and
so on and so on, aka, composition.

37
00:02:19.150 --> 00:02:25.658
We might start with the identify function
as a good initial value, you with me?

38
00:02:25.658 --> 00:02:29.340
So you have to select an appropriate
initial value for your reduction.

39
00:02:29.340 --> 00:02:33.942
There are some special cased
implementations of reduce which will,

40
00:02:33.942 --> 00:02:36.650
if you don't provide an initial value.

41
00:02:36.650 --> 00:02:41.305
They will select the first item in
the collection as the initial value and

42
00:02:41.305 --> 00:02:43.986
start the reduction with the next value.

43
00:02:43.986 --> 00:02:46.761
That's a special casing not
all implementations do that,

44
00:02:46.761 --> 00:02:49.599
that can be convenient, but
not all implementations do it.

45
00:02:49.599 --> 00:02:54.053
So generally, the problem is you need to
select a good initial value, and sometimes

46
00:02:54.053 --> 00:02:58.714
that's easy like zero or empty string, and
sometimes it's a little bit more awkward.

47
00:02:58.714 --> 00:03:02.501
So you have to be careful in selection
of your initial value, but anyway,

48
00:03:02.501 --> 00:03:06.778
what it does is, whatever the current
accumulator is, either the initial value,

49
00:03:06.778 --> 00:03:08.751
or if we're deep into the reduction.

50
00:03:08.751 --> 00:03:12.113
It takes the current accumulated value,
and

51
00:03:12.113 --> 00:03:15.740
then it adds in the next
value in our collection,

52
00:03:15.740 --> 00:03:21.329
those two come in together, and
somehow they get combined with a reducer.

53
00:03:21.329 --> 00:03:25.223
So they get combined, we take the number
three and the number four and

54
00:03:25.223 --> 00:03:29.472
we combine them, we reduce them with
addition, and that produces seven.

55
00:03:29.472 --> 00:03:32.885
So now our new accumulator is seven,
or we take two strings and

56
00:03:32.885 --> 00:03:37.031
we combine we reduce them with
concatenation, and now we have one string.

57
00:03:37.031 --> 00:03:41.718
So our reducer function like we have
a mapper and a predicate filter function.

58
00:03:41.718 --> 00:03:47.206
We have a reducer, which takes two inputs
now takes the existing accumulator and

59
00:03:47.206 --> 00:03:52.707
the next value in the collection, and
that reducer decides how to combine them.

60
00:03:52.707 --> 00:03:54.973
,And by the way combination,

61
00:03:54.973 --> 00:03:59.342
the idea of reduction it's
a very general concept, okay.

62
00:03:59.342 --> 00:04:04.216
You might think the only way to reduce two
numbers would be to add them together or

63
00:04:04.216 --> 00:04:06.326
divide them or multiply them, but

64
00:04:06.326 --> 00:04:09.775
you could do a reduction that
just picked one of the two.

65
00:04:09.775 --> 00:04:13.661
For example you wanted to pick out all the
evens you could do a reduction that just

66
00:04:13.661 --> 00:04:17.438
only selects evens, right, so combination
is whatever you define it to be.

67
00:04:17.438 --> 00:04:20.051
Reduction is whatever you define it to be,
but

68
00:04:20.051 --> 00:04:24.138
it is often times something where
the values end up together in some way,

69
00:04:24.138 --> 00:04:28.091
like strings or numbers or functions or
promises or whatever, okay?

70
00:04:28.091 --> 00:04:31.382
So, the way it looks is we
start with an initial value and

71
00:04:31.382 --> 00:04:36.228
we start adding stuff in, combining all
of these down to a single discrete value.

72
00:04:37.823 --> 00:04:41.091
&gt;&gt; Kyle Simpson: Often you would
start with say, list of numbers and

73
00:04:41.091 --> 00:04:44.667
produce from a reduction,
a single number as a result.

74
00:04:44.667 --> 00:04:48.129
Or start with a list of strings and
have a single string, but

75
00:04:48.129 --> 00:04:49.661
it is not always the case.

76
00:04:49.661 --> 00:04:53.418
Reduce is actually kind of swiss army
knife of functional programming,

77
00:04:53.418 --> 00:04:56.805
because you don't even have to
produce a single discrete value,

78
00:04:56.805 --> 00:04:59.651
you can produce another data
structure from a reduce.

79
00:04:59.651 --> 00:05:01.920
You could start with a list of numbers and

80
00:05:01.920 --> 00:05:05.610
reduce that to an object with
properties holding those numbers.

81
00:05:05.610 --> 00:05:07.483
Or you could start with
a list of numbers and

82
00:05:07.483 --> 00:05:09.419
produce a whole different list of numbers.

83
00:05:09.419 --> 00:05:11.593
As a matter of fact, counterintuitively,

84
00:05:11.593 --> 00:05:14.958
a list of numbers could be reduced
to an even longer list of numbers.

85
00:05:16.748 --> 00:05:17.638
&gt;&gt; Kyle Simpson: Okay?

86
00:05:17.638 --> 00:05:20.602
So it's a very general operation,
in fact, it's so general, and

87
00:05:20.602 --> 00:05:23.307
we're gonna come back to this
a bit later in this discussion.

88
00:05:23.307 --> 00:05:28.278
It is so general that both map and
filter can be implemented with a reduce.

89
00:05:29.916 --> 00:05:34.620
&gt;&gt; Kyle Simpson: Think about this for a
moment, if reduce, the way a reduce works,

90
00:05:34.620 --> 00:05:37.814
if at each operation I
have an accumulator and

91
00:05:37.814 --> 00:05:41.190
I have a value,
if my accumulator is a new list.

92
00:05:41.190 --> 00:05:44.668
Starts out empty, and
I decide to put stuff into it,

93
00:05:44.668 --> 00:05:49.015
if I call the mapper function, and
I take the value and I put it in,

94
00:05:49.015 --> 00:05:52.277
the end result is a new
list that's been mapped.

95
00:05:52.277 --> 00:05:55.329
Or if I did an if statement with
a predicate and only put stuff

96
00:05:55.329 --> 00:05:59.003
in if the predicate reduced,
the result of that reduction is a filter.

97
00:05:59.003 --> 00:06:03.157
So it's the swiss army, now it can
produce any of the other operations,

98
00:06:03.157 --> 00:06:07.669
basically any of the other operations
can be expressed in terms of reduction.

99
00:06:07.669 --> 00:06:11.553
Tremendously powerful, but
just don't get intimidated by it,

100
00:06:11.553 --> 00:06:16.350
you'll often just do basic reductions,
like a list of numbers down to a number or

101
00:06:16.350 --> 00:06:18.129
something like that, okay.

102
00:06:18.129 --> 00:06:20.121
So how would we implement or reduce?

103
00:06:20.121 --> 00:06:24.503
Let's say that I had a list of lists,
so I have a two dimensional array here,

104
00:06:24.503 --> 00:06:27.463
these are basically,
it's like a list of tuples.

105
00:06:27.463 --> 00:06:30.825
Remember we talked about two
tuples before a two element array?

106
00:06:30.825 --> 00:06:35.205
Well, I'm gonna interpret my tuples
as the first element representing

107
00:06:35.205 --> 00:06:39.100
a property name, and
the second element representing a value.

108
00:06:39.100 --> 00:06:44.495
And I'm gonna reduce my list of tuples
into an object, so here's my reduce,

109
00:06:44.495 --> 00:06:49.063
and you'll notice that my
implementation of reduce is generic.

110
00:06:49.063 --> 00:06:51.754
It doesn't know anything about
what I'm gonna reduce over,

111
00:06:51.754 --> 00:06:55.080
it just knows that I'm reducing over
an array and producing some new value.

112
00:06:55.080 --> 00:07:00.188
So we start with an initial value and
we call the reducer with the current

113
00:07:00.188 --> 00:07:05.143
accumulator the RET variable and
that's the current accumulator.

114
00:07:05.143 --> 00:07:06.683
And the next element, and

115
00:07:06.683 --> 00:07:10.263
whatever that returns becomes
the next accumulated value.

116
00:07:10.263 --> 00:07:15.200
And we just keep doing that over and
over until we're done,

117
00:07:15.200 --> 00:07:21.742
we can pass that a list of tuples, and if
our add to record reducer up at the top.

118
00:07:21.742 --> 00:07:27.251
Takes in a record, that's our object our
running object that we're gonna build up,

119
00:07:27.251 --> 00:07:28.795
and it takes in a tuple.

120
00:07:28.795 --> 00:07:30.673
I'm doing a destructuring there,

121
00:07:30.673 --> 00:07:33.427
this is partly just to be
saving space on the slides,

122
00:07:33.427 --> 00:07:37.828
but I'm showing that my element is a tuple
and I don't really care about the tuple.

123
00:07:37.828 --> 00:07:40.512
I care about the key and
the value in the tuple, so

124
00:07:40.512 --> 00:07:45.228
I've got a desctructuring there that says,
give me the key and give me the value, and

125
00:07:45.228 --> 00:07:47.218
I just make a new copy of the object.

126
00:07:47.218 --> 00:07:52.308
That's what ...record does, and
then I add in the next key,

127
00:07:52.308 --> 00:07:58.640
that bracket key is the computed property
name from key and then I set the value.

128
00:07:58.640 --> 00:08:01.906
Why do you suppose I didn't just
add the property to the object,

129
00:08:01.906 --> 00:08:04.219
why did I make a copy of
the object every time?

130
00:08:06.541 --> 00:08:10.371
&gt;&gt; Student: Because you
don't wanna mutate the-

131
00:08:10.371 --> 00:08:11.017
&gt;&gt; Kyle Simpson: I don't want to

132
00:08:11.017 --> 00:08:11.769
mutate, right?

133
00:08:11.769 --> 00:08:16.574
If I just added the key to the object,
we'd end up with the same result, but

134
00:08:16.574 --> 00:08:19.856
now we would have had
basically an impure reducer,

135
00:08:19.856 --> 00:08:24.463
creating a side effect at each
iteration on some single shared object.

136
00:08:24.463 --> 00:08:28.800
And that may or may not create bugs,
in our particular case,

137
00:08:28.800 --> 00:08:31.023
it may be would have been safe.

138
00:08:31.023 --> 00:08:35.141
But it's a terrible idea to ever,
ever, ever assume that it's okay for

139
00:08:35.141 --> 00:08:39.884
you to just mutate a value that somebody
else passed to you that you don't control.

140
00:08:39.884 --> 00:08:42.745
Remember, we talked in immutability
earlier in the course,

141
00:08:42.745 --> 00:08:46.100
anytime we receive a value assume
that you're not allowed to mutate it,

142
00:08:46.100 --> 00:08:48.590
you've gotta make a copy of
it if you wanna extend it.

143
00:08:48.590 --> 00:08:52.201
So that's why we write to reduce our
online 2 to make a copy of the object.

144
00:08:55.442 --> 00:08:58.983
&gt;&gt; Kyle Simpson: Reduce of course is
implemented on JavaScript arrays.

145
00:08:58.983 --> 00:09:02.624
Same thing, we start with an array,
we call reduce with our reducer, and

146
00:09:02.624 --> 00:09:05.696
then we give it an initial value
in this case the empty object.

147
00:09:09.353 --> 00:09:11.693
&gt;&gt; Kyle Simpson: I wanna call
something out about our reducer,

148
00:09:11.693 --> 00:09:15.593
because I wanna call back to something
we talked about earlier in the course,

149
00:09:15.593 --> 00:09:17.153
which was the shape of things.

150
00:09:17.153 --> 00:09:22.482
Remember we talked about the shape
of functions, look at the shape

151
00:09:22.482 --> 00:09:27.350
of our reducer and compare it to
the say the shape of a mapper.

152
00:09:27.350 --> 00:09:33.752
The shape of our reducer is that it takes
in two values and produces one output,

153
00:09:33.752 --> 00:09:39.669
whereas the mapper function takes in
one value and produces one output.

154
00:09:39.669 --> 00:09:44.495
So a map function is unary a predicate

155
00:09:44.495 --> 00:09:49.173
is unary, but a reducer is binary.

156
00:09:49.173 --> 00:09:52.740
And a little bit later in our discussion,
the shape of these things,

157
00:09:52.740 --> 00:09:55.641
the relative shapes of them
is gonna matter a whole lot.

158
00:09:55.641 --> 00:09:58.662
When we're talking about trying
to put things together if they

159
00:09:58.662 --> 00:10:02.723
don't have a compatible shape, they don't
fit the Lego pieces don't fit, okay.

160
00:10:02.723 --> 00:10:06.683
So remember at the very
beginning of this course I said,

161
00:10:06.683 --> 00:10:10.154
functional programmers
love unary functions.

162
00:10:10.154 --> 00:10:13.618
The math, the way it works out, unary
functions are just so easy, the Lego's

163
00:10:13.618 --> 00:10:16.783
just work together, we can compose them,
we can do all kinds of stuff.

164
00:10:16.783 --> 00:10:21.466
But when we have non unary functions,
the next best thing is

165
00:10:21.466 --> 00:10:26.722
a binary function that looks like this,
which is a reduce, okay.

166
00:10:26.722 --> 00:10:30.222
So essentially,
any function that takes two inputs and

167
00:10:30.222 --> 00:10:33.498
somehow produces one output
from those two inputs,

168
00:10:33.498 --> 00:10:37.460
can be thought of as a reducer,
it fits that shape as a reducer.

169
00:10:37.460 --> 00:10:40.500
And that's something I want you to
keep in the back of your head for

170
00:10:40.500 --> 00:10:41.840
later on in our discussion.

