WEBVTT

1
00:00:00.060 --> 00:00:04.580
&gt;&gt; Kyle Simpson: Let's do an exercise
on extending our functional principles,

2
00:00:04.580 --> 00:00:09.010
our functional programming principles,
over asynchronous, over time,

3
00:00:09.010 --> 00:00:11.690
using what we just learned
about observables.

4
00:00:11.690 --> 00:00:15.480
In this exercise, you're going to
be wiring up an observable and

5
00:00:15.480 --> 00:00:19.370
making it do essentially
a countdown timer in the console.

6
00:00:19.370 --> 00:00:22.260
I think it's probably best to
just run this in a browser so

7
00:00:22.260 --> 00:00:24.439
that you can see what it's supposed to do.

8
00:00:24.439 --> 00:00:27.547
So I'm just gonna switch
over to a browser here and

9
00:00:27.547 --> 00:00:30.147
run the unfixed version of the exercise.

10
00:00:30.147 --> 00:00:34.397
And you'll notice that it prints
out once per second these numbers,

11
00:00:34.397 --> 00:00:39.023
negative one, zero, one, two, three,
four, and then does complete.

12
00:00:39.023 --> 00:00:41.617
But if I run the fixed solution file,

13
00:00:41.617 --> 00:00:46.643
you'll notice that it prints out
a nicely formatted countdown timer,

14
00:00:46.643 --> 00:00:51.519
zero five, zero four, zero three,
two, one, zero and complete.

15
00:00:51.519 --> 00:00:57.399
So your task is to make a change to
the exercise file so that it is properly

16
00:00:57.399 --> 00:01:03.580
formatting those numbers that are coming
through into a countdown timer.

17
00:01:04.870 --> 00:01:08.340
Most of the scaffolding is
already set up for you.

18
00:01:08.340 --> 00:01:11.160
I've got RxJS already loaded in there for
you so

19
00:01:11.160 --> 00:01:14.610
you don't need to learn
about how RxJS works.

20
00:01:14.610 --> 00:01:18.690
And I've already given you,
in the comments here, how with the latest

21
00:01:18.690 --> 00:01:23.110
version, this is version 6 of Rx,
by the way, how with the latest version,

22
00:01:23.110 --> 00:01:26.459
you can take an observable and
call other operators on it.

23
00:01:26.459 --> 00:01:29.851
It involves using the .pipe method,
so that's here.

24
00:01:29.851 --> 00:01:34.722
And you need to list out
an Rx operator to be used.

25
00:01:34.722 --> 00:01:39.651
And the job that you want is to
take a value that's coming in,

26
00:01:39.651 --> 00:01:43.518
like that negative one or
that value three, and

27
00:01:43.518 --> 00:01:49.513
turn that value into a nicely formatted
string like zero colon zero five,

28
00:01:49.513 --> 00:01:54.273
or zero colon zero one,
the nice countdown timer string.

29
00:01:54.273 --> 00:01:58.324
The function that you're going to be
doing that with is formatCountdown, so

30
00:01:58.324 --> 00:02:00.460
it's going to be receiving that value.

31
00:02:00.460 --> 00:02:06.720
You need to wire formatCountdown
up to this observable.

32
00:02:06.720 --> 00:02:12.390
And then take that number and
convert it into the formatted string.

33
00:02:12.390 --> 00:02:15.480
So that's the substance of this exercise.

34
00:02:15.480 --> 00:02:19.370
Remember try it in your browser,
try to see how it works.

35
00:02:19.370 --> 00:02:25.240
And then you can, if you need to, you can
look and get a hint from the fixed file.

36
00:02:25.240 --> 00:02:28.530
You shouldn't need to mess around with
any of the mechanics of the setup of

37
00:02:28.530 --> 00:02:31.580
the reactive observable.

38
00:02:31.580 --> 00:02:35.348
Just simply adapting the format
countdown to be added on

39
00:02:35.348 --> 00:02:37.439
to the end of this observable.

