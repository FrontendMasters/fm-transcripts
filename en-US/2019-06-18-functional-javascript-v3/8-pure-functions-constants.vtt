WEBVTT

1
00:00:00.030 --> 00:00:02.030
&gt;&gt; Kyle Simpson: So these pure
functions that we're talking about,

2
00:00:02.030 --> 00:00:03.550
what does that mean?

3
00:00:03.550 --> 00:00:05.670
What do we mean by a pure function?

4
00:00:05.670 --> 00:00:09.920
Well, the first way we could define
a pure function is as we have designed so

5
00:00:09.920 --> 00:00:13.740
far, it is the function in this
spirit of functional programming.

6
00:00:13.740 --> 00:00:16.390
It is a function that takes
all of its inputs as direct,

7
00:00:16.390 --> 00:00:20.310
all of its outputs as direct,
and it has no side effects.

8
00:00:21.840 --> 00:00:24.130
That's the first way of thinking
about a pure function, but

9
00:00:24.130 --> 00:00:26.290
remember and
we'll come back to this in a bit.

10
00:00:26.290 --> 00:00:31.170
Remember, that I've pointed out
it's not about the function

11
00:00:31.170 --> 00:00:35.800
definition itself for JavaScript,
but rather about the function call.

12
00:00:35.800 --> 00:00:38.890
There really isn't such a thing
as a pure function per se

13
00:00:38.890 --> 00:00:40.790
there is a pure function call.

14
00:00:41.950 --> 00:00:46.510
And that's the thing that we wanna go
after, we want pure function calls.

15
00:00:46.510 --> 00:00:50.080
So yes, we could look at the addTwo
function, and if we were to call it with

16
00:00:50.080 --> 00:00:55.600
two inputs and get a single output out,
that would be a pure function call.

17
00:00:55.600 --> 00:01:00.892
addAnother here however, line 7,
it takes two inputs, yes,

18
00:01:00.892 --> 00:01:06.389
but notice how it also uses a z
variable that's outside of itself.

19
00:01:08.097 --> 00:01:09.630
&gt;&gt; Kyle Simpson: So
that's an indirect input.

20
00:01:09.630 --> 00:01:16.220
And in the strictest sense, using
an indirect input invalidates something

21
00:01:16.220 --> 00:01:20.620
about the nature of what we were supposed
to be able to expect about this function.

22
00:01:20.620 --> 00:01:23.520
We're supposed to be able prove and
predict its behavior.

23
00:01:23.520 --> 00:01:25.790
And because we're relying
upon a side cause,

24
00:01:25.790 --> 00:01:29.690
a side effect,
now we can't really be as sure.

25
00:01:29.690 --> 00:01:33.129
We can't really prove it through
the math in the same way.

26
00:01:35.038 --> 00:01:38.085
&gt;&gt; Kyle Simpson: So that's the kind
of thing that we want to be aware of,

27
00:01:38.085 --> 00:01:42.329
is if we're accessing variables outside
of our self is that in validating,

28
00:01:42.329 --> 00:01:43.256
is it removing,

29
00:01:43.256 --> 00:01:47.340
is it watering down those benefits
from functional programming for us?

30
00:01:49.400 --> 00:01:51.290
It's more complicated than that, though.

31
00:01:51.290 --> 00:01:55.830
It's not just that we can't access
a variable outside of ourselves.

32
00:01:55.830 --> 00:01:59.040
We talked about all the other kinds of
side effects like generating random

33
00:01:59.040 --> 00:02:01.250
numbers and all of that other stuff.

34
00:02:01.250 --> 00:02:05.150
But it's also the case that we could
access a variable outside of ourself and

35
00:02:05.150 --> 00:02:09.630
not invalidate our function purity,
it is more complicated.

36
00:02:09.630 --> 00:02:14.050
But that's a clear signal, it's like
a usual suspect that keys you in,

37
00:02:14.050 --> 00:02:16.830
if you see an access
of a variable outside,

38
00:02:16.830 --> 00:02:20.390
immediately you should be asking
yourself why, why is that?

39
00:02:20.390 --> 00:02:22.561
Is that necessary, is that useful,
is that important?

40
00:02:25.447 --> 00:02:27.540
&gt;&gt; Kyle Simpson: Because
the code might look like this.

41
00:02:29.310 --> 00:02:34.340
The code might have a z
variable in the outer scope and

42
00:02:34.340 --> 00:02:38.420
in this case, line 1,
it's a constant, z = 1.

43
00:02:38.420 --> 00:02:44.830
Now, if on line 8 instead of accessing z,
if I had accessed just the value,

44
00:02:44.830 --> 00:02:50.900
if I'd said add to x, y, and then just
said plus 1, we would all say no problem.

45
00:02:50.900 --> 00:02:53.610
That looks like a pure function,
no side effects, no side causes.

46
00:02:54.950 --> 00:02:59.080
So is the introduction of z here
really a side cause or not?

47
00:03:00.280 --> 00:03:03.560
Cuz if we think about what
a constant is supposed to be,

48
00:03:03.560 --> 00:03:08.190
a constant is supposed to be
a semantic placeholder for a value.

49
00:03:10.360 --> 00:03:15.781
And especially since we're using the const
keyword, but even if we weren't, because

50
00:03:15.781 --> 00:03:20.635
it is a constant, it doesn't change
throughout the lifetime of the program.

51
00:03:22.779 --> 00:03:26.415
&gt;&gt; Kyle Simpson: So really is it
invalidating this as an impure function,

52
00:03:26.415 --> 00:03:31.355
or is addAnother simply referring to
a semantic constant placeholder here?

53
00:03:34.809 --> 00:03:38.184
&gt;&gt; Kyle Simpson: If you could convince
yourself that line 11 is a pure

54
00:03:38.184 --> 00:03:39.234
function call,

55
00:03:39.234 --> 00:03:44.126
and there will be more layers of meaning
to what we mean by pure function call.

56
00:03:44.126 --> 00:03:51.600
But here addAnother does in fact returned
to us the value 42 when we pass in 20 and

57
00:03:51.600 --> 00:03:56.200
21, and it doesn't change anything
else about the state of the program,.

58
00:03:56.200 --> 00:03:59.510
So it doesn't cause any side effects, and

59
00:03:59.510 --> 00:04:03.160
it doesn't use any side effects
other than this constant.

60
00:04:04.890 --> 00:04:08.029
And I would submit to you that it
is therefore still consistent with

61
00:04:08.029 --> 00:04:09.272
functional principles.

62
00:04:11.976 --> 00:04:15.012
&gt;&gt; Kyle Simpson: That line 11 still
counts as a pure function call,

63
00:04:15.012 --> 00:04:19.030
even though we're accessing
a variable outside of ourselves.

64
00:04:19.030 --> 00:04:22.360
Now, you may be able to convince
yourself that that is true

65
00:04:22.360 --> 00:04:26.310
because I pointed out that
we're using the const keyword.

66
00:04:26.310 --> 00:04:30.640
But when I switch it up and I say,
what if I use the var keyword?

67
00:04:30.640 --> 00:04:35.420
Some of you may be saying, well,
now it's not a pure function call, really?

68
00:04:37.240 --> 00:04:40.390
Is my choice of const verses var here

69
00:04:40.390 --> 00:04:44.330
actually going to impact
the readability of this program.

70
00:04:44.330 --> 00:04:47.250
Some say yes, but
am gonna say, I don't think so.

71
00:04:48.920 --> 00:04:51.100
And here is the reason and
this is critical for

72
00:04:51.100 --> 00:04:52.369
all the rest of our discussion.

73
00:04:53.790 --> 00:04:58.270
If it were possible for
me to show you a code snippet that only

74
00:04:58.270 --> 00:05:03.200
had part of the program, and
I were to ask you questions about it, and

75
00:05:03.200 --> 00:05:05.000
I was only showing you
part of the program.

76
00:05:06.470 --> 00:05:11.390
Then you could say virtually anything,
because just about anything else could

77
00:05:11.390 --> 00:05:15.130
also be true in that other part
that I was hiding from you, right?

78
00:05:16.690 --> 00:05:20.950
So its in a sense not
useful to discuss a program

79
00:05:20.950 --> 00:05:23.060
unless we're discussing
it in its entirety.

80
00:05:25.300 --> 00:05:28.000
For our purposes of our
discussion in this course

81
00:05:28.000 --> 00:05:30.700
we need to assume that we
see the entire program.

82
00:05:32.480 --> 00:05:33.980
So let me ask you the question,

83
00:05:33.980 --> 00:05:37.249
anywhere in this program
does z ever get re-assigned?

84
00:05:40.220 --> 00:05:44.250
We can see all the lines of code and
we know that it doesn't get reassigned.

85
00:05:45.590 --> 00:05:50.758
So let me ask you a question, is z serving
the purpose of a constant in this program?

86
00:05:52.814 --> 00:05:57.004
&gt;&gt; Kyle Simpson: I would submit that
it is, whether use the const keyword or

87
00:05:57.004 --> 00:05:59.410
not it is a constant in practice.

88
00:06:00.580 --> 00:06:05.330
And therefore, every bit as much in
the spirit of functional program.

89
00:06:05.330 --> 00:06:08.060
Now I know many functional programmers,
that

90
00:06:08.060 --> 00:06:13.080
are absolutely enamored with the const
keyword, they use it all over the place.

91
00:06:14.700 --> 00:06:18.149
I don't think the const keyword buys
anything for the functional programmer.

92
00:06:19.220 --> 00:06:23.221
Because the real important key is,
is the variable getting reassigned,

93
00:06:23.221 --> 00:06:24.974
not can it be reassigned or not?

94
00:06:26.785 --> 00:06:29.511
&gt;&gt; Kyle Simpson: And in fact,
more important even than whether it gets

95
00:06:29.511 --> 00:06:33.693
assigned, or can it be reassigned is, is
it obvious to the reader that it can't be

96
00:06:33.693 --> 00:06:37.110
reassigned, that it doesn't get
reassigned, is that obvious?

97
00:06:39.574 --> 00:06:44.200
Const has some problems because
it looks like it is making

98
00:06:44.200 --> 00:06:49.340
values that don't change when actually
it's making variables that get reassigned.

99
00:06:49.340 --> 00:06:53.379
And we're gonna come back to that
topic when we talk about immutability.

100
00:06:54.820 --> 00:06:57.667
But I would submit to you
that in this program,

101
00:06:57.667 --> 00:07:00.149
z still serves that role and therefore,

102
00:07:00.149 --> 00:07:05.482
addAnother is still when it's called on
line 11 that's pure a still function call.

103
00:07:09.943 --> 00:07:13.449
&gt;&gt; Kyle Simpson: But none of you seem
to raise your hand and yell at me,

104
00:07:13.449 --> 00:07:18.953
wait a minute, why is it a pure function
when we're using another variable called

105
00:07:18.953 --> 00:07:24.260
addTwo, which is a variable that happens
to reference a different function.

106
00:07:25.680 --> 00:07:29.990
You see how easily you just skipped right
over the usage of that variable and

107
00:07:29.990 --> 00:07:34.340
zeroed in on the z variable and said,
wait a minute, that one that's a problem.

108
00:07:36.020 --> 00:07:39.460
Why is it that we get to
use the addTwo variable?

109
00:07:39.460 --> 00:07:41.300
Just because it points to a function?

110
00:07:42.410 --> 00:07:47.330
I have news for you,
the addTwo variable, the identifier that

111
00:07:47.330 --> 00:07:51.549
points at that function from line 3,
that identifier is not a constant.

112
00:07:52.760 --> 00:07:57.140
It is in fact possible that addTwo could
get reassigned somewhere to a different

113
00:07:57.140 --> 00:07:58.050
function definition.

114
00:07:59.560 --> 00:08:03.540
So it's no more a constant than is var z,

115
00:08:03.540 --> 00:08:09.970
and yet
we can still say that in this program,

116
00:08:09.970 --> 00:08:12.309
we can see that addTwo
does not get reassigned.

117
00:08:14.200 --> 00:08:15.965
And so the behavior of line 11,

118
00:08:15.965 --> 00:08:18.878
is still that we observably
have a pure function call.

119
00:08:21.000 --> 00:08:23.460
&gt;&gt; Kyle Simpson: Functional programmers,
by the way, they do this all the time.

120
00:08:23.460 --> 00:08:25.580
And I don't hear them talk much about it,

121
00:08:25.580 --> 00:08:28.070
it's just one of those things
that they assume you get.

122
00:08:29.780 --> 00:08:33.701
That if you're referencing
a thing that doesn't ever change,

123
00:08:33.701 --> 00:08:38.580
it's exactly as if it had been in lined,
which is the whole point of constants.

124
00:08:40.446 --> 00:08:43.593
&gt;&gt; Kyle Simpson: Functional programmers
use functions inside of other functions

125
00:08:43.593 --> 00:08:47.180
all the time and
they don't always pass those functions in.

126
00:08:47.180 --> 00:08:50.930
You don't always see the 14 lambda

127
00:08:50.930 --> 00:08:54.870
utilities getting passed in as inputs to a
function, and yet you can still use them.

128
00:08:54.870 --> 00:08:58.366
Because it is assumed that lambda and

129
00:08:58.366 --> 00:09:03.910
all of the methods on lambda
are in practice, constants.

130
00:09:03.910 --> 00:09:07.200
Meaning that they don't change
their definition throughout

131
00:09:07.200 --> 00:09:08.240
the lifetime of the program.

132
00:09:09.790 --> 00:09:14.975
And why I'm hammering on this
point is because it emphasizes

133
00:09:14.975 --> 00:09:19.754
our responsibilities the author
of the code to make it as

134
00:09:19.754 --> 00:09:24.137
obvious as possible that
something is a constant.

135
00:09:26.108 --> 00:09:28.396
&gt;&gt; Kyle Simpson: That it's
gonna behave as a constant.

136
00:09:28.396 --> 00:09:30.864
One way you could do that is
with the const keyword, but

137
00:09:30.864 --> 00:09:33.343
I don't think that's the more
effective way to do it.

138
00:09:35.850 --> 00:09:39.040
&gt;&gt; Kyle Simpson: Matter of fact, because
of the baggage that const comes with,

139
00:09:39.040 --> 00:09:42.532
I don't think it's actually serving
a net benefit to your program,

140
00:09:42.532 --> 00:09:44.490
more on that later as I promised.

141
00:09:44.490 --> 00:09:49.450
But whether you use the const keyword or
not, if you make it obvious for

142
00:09:49.450 --> 00:09:55.410
the reader that it's gonna behave
as a constant, that's the key, why?

143
00:09:55.410 --> 00:10:00.160
Why though, it's because we want
the reader of our code to understand,

144
00:10:00.160 --> 00:10:01.620
I don't need to worry
that that thing changed.

145
00:10:02.630 --> 00:10:04.840
If they were trying to
understand line 8 and

146
00:10:04.840 --> 00:10:06.920
they didn't know that z was a constant,

147
00:10:06.920 --> 00:10:10.580
well now all of a sudden they're like,
they're dealing with all the problems

148
00:10:10.580 --> 00:10:13.600
that you have to deal with when you
juggle side effects on your head, right?

149
00:10:15.270 --> 00:10:19.190
As a matter of fact, if they really
didn't know whether z got reassigned or

150
00:10:19.190 --> 00:10:22.810
not, how many lines of code
would they have to execute

151
00:10:22.810 --> 00:10:25.590
to convince themselves
what line 11 would do?

152
00:10:26.870 --> 00:10:30.998
Well, actually they have to mentally
execute lines 1 through 10 to get to that

153
00:10:30.998 --> 00:10:35.264
point, because theoretically at least,
any of those lines could have changed z.

154
00:10:37.907 --> 00:10:41.714
&gt;&gt; Kyle Simpson: So if they're not sure
whether it's going to stay that same value

155
00:10:41.714 --> 00:10:46.282
it's going to act as a constant, then
essentially to read your code means they

156
00:10:46.282 --> 00:10:51.070
have to execute everything before
that line to understand that line.

157
00:10:51.070 --> 00:10:55.610
That's the real problem with side effects,
is that it creates this

158
00:10:56.800 --> 00:11:01.540
outcome which is that to understand any
given line, we have to mentally execute

159
00:11:01.540 --> 00:11:05.382
everything before it so that we know what
state the program was in before we ran it.

160
00:11:05.382 --> 00:11:12.670
But if the addAnother function call
is reliably and obviously pure,

161
00:11:14.080 --> 00:11:18.530
then I can execute line 11 completely in
isolation of all the rest of the program.

162
00:11:20.240 --> 00:11:24.480
Not only do I not need to run anything
before line 11 to figure out what line

163
00:11:24.480 --> 00:11:25.030
11 does,

164
00:11:26.370 --> 00:11:29.899
I also don't need to worry that line 11 is
gonna affect anything else in the program.

165
00:11:31.840 --> 00:11:37.480
And that's the real benefit of a pure
function call, it isolates that line so

166
00:11:37.480 --> 00:11:39.810
that I can analyze it independently.

