WEBVTT

1
00:00:00.100 --> 00:00:02.320
&gt;&gt; Kyle Simpson: I want us to talk
about composition for just a moment.

2
00:00:03.610 --> 00:00:07.430
Remember our reduce function,

3
00:00:07.430 --> 00:00:11.220
there is another companion
function called, reduce right.

4
00:00:11.220 --> 00:00:14.440
So reduce goes from left to
right through an array, but

5
00:00:14.440 --> 00:00:16.170
reduce right goes from right to left.

6
00:00:17.390 --> 00:00:19.320
You might remember earlier in the course.

7
00:00:19.320 --> 00:00:23.050
Another thing that either went
left to right, or right to left.

8
00:00:23.050 --> 00:00:26.540
And that's not accidental,
that's foreshadowing for this discussion.

9
00:00:26.540 --> 00:00:29.660
Remember, we talked about a compose two.

10
00:00:29.660 --> 00:00:32.999
We did look in our exercise at
the general compose utility, but

11
00:00:32.999 --> 00:00:35.680
just think about composeTwo for a moment.

12
00:00:35.680 --> 00:00:39.727
Look at the shape of composeTwo,
what shape does it have?

13
00:00:42.534 --> 00:00:44.814
&gt;&gt; Kyle Simpson: It takes two inputs,
and what does it produce?

14
00:00:46.998 --> 00:00:49.750
&gt;&gt; Kyle Simpson: A single output,
so what shape does that sound like?

15
00:00:52.976 --> 00:00:54.110
&gt;&gt; Speaker 2: Reducer?
&gt;&gt; Kyle Simpson: Sound like a reducer

16
00:00:54.110 --> 00:00:55.050
to anyone?

17
00:00:55.050 --> 00:00:58.100
That's a reducer,
that can be used as a reducer.

18
00:00:58.100 --> 00:00:59.620
What reduction does it do?

19
00:00:59.620 --> 00:01:03.600
It takes two functions, and
it reduces them through,

20
00:01:03.600 --> 00:01:06.770
what do we see on line 7,
what is line 7 doing?

21
00:01:10.330 --> 00:01:12.150
&gt;&gt; Speaker 3: Going over the function.

22
00:01:12.150 --> 00:01:15.801
&gt;&gt; Kyle Simpson: Look at specifically
line 7, what is line 7 doing?

23
00:01:15.801 --> 00:01:16.350
&gt;&gt; Speaker 3: Returning a function.

24
00:01:17.740 --> 00:01:20.523
&gt;&gt; Kyle Simpson: It's not,
that's line 6 what is line 7 doing?

25
00:01:25.403 --> 00:01:28.847
&gt;&gt; Kyle Simpson: What is it called
when one function gets called, and

26
00:01:28.847 --> 00:01:31.989
its output gets past to
another function call?

27
00:01:31.989 --> 00:01:35.125
&gt;&gt; Speaker 4: Composition
&gt;&gt; Kyle Simpson: Composition,

28
00:01:35.125 --> 00:01:36.754
that's a composition.

29
00:01:36.754 --> 00:01:40.640
When fn1 is called with a value, and
its output is immediately passed to

30
00:01:40.640 --> 00:01:44.680
another function, and
that's called a composition.

31
00:01:44.680 --> 00:01:49.810
So the way that we are reducing those
two functions, is through composition.

32
00:01:51.480 --> 00:01:55.270
That's a valid way of composing, and what
I want you to think about when you think

33
00:01:55.270 --> 00:02:01.410
about reducing, reducing is a valid
implementation of composition.

34
00:02:02.640 --> 00:02:07.270
If I asked write me a general compose now,
instead of writing a for loop and

35
00:02:07.270 --> 00:02:10.130
keeping track of stuff now you
should be able to pull out ah-ha,

36
00:02:10.130 --> 00:02:11.490
I can just use a reduce write.

37
00:02:12.530 --> 00:02:15.860
We need to use reduce write,
because composition goes right to left.

38
00:02:15.860 --> 00:02:20.260
If I said write me a pipe,
you could pull out the .reduce, and

39
00:02:20.260 --> 00:02:23.940
reduce through the using
composeTwo as your composer.

40
00:02:23.940 --> 00:02:25.370
So here's what that looks like.

41
00:02:25.370 --> 00:02:28.410
We are doing reduce with the compose Two,
but

42
00:02:28.410 --> 00:02:32.680
we can actually implement
compose with reduce right.

43
00:02:34.260 --> 00:02:37.520
Here I'm calling the list
of functions FN's line 3,

44
00:02:37.520 --> 00:02:42.220
I'm calling reduce right, and
the reducer that I'm using I've named here

45
00:02:42.220 --> 00:02:45.050
invoke just [be]cause I couldn't
come up with a better name for it.

46
00:02:45.050 --> 00:02:49.710
What it does, is it takes two
values of function and a value and

47
00:02:49.710 --> 00:02:54.120
it reduces that function and
value through invocation.

48
00:02:54.120 --> 00:02:58.300
If you were to describe
what is the composition,

49
00:02:58.300 --> 00:03:00.860
I mean what is the reduction
that is happening?

50
00:03:00.860 --> 00:03:07.350
Line 4, is taking a function and a value,
and reducing them through invocation,

51
00:03:07.350 --> 00:03:11.410
which is to say passing the value to the
function, and then returning that result.

52
00:03:13.270 --> 00:03:18.160
So our reduction is an indication, and
that's how we can implement a compose

53
00:03:18.160 --> 00:03:21.960
across a list of functions as a reduction,
as a right reduction basically.

54
00:03:24.070 --> 00:03:28.730
Line 9 we make f which is compose of div3,
null2, add1.

55
00:03:28.730 --> 00:03:34.777
F of 8 gives a 6, because 8 plus
1 multiplied by 2 becomes 18,

56
00:03:34.777 --> 00:03:37.120
divided by 3 becomes 6.

57
00:03:42.304 --> 00:03:45.848
&gt;&gt; Kyle Simpson: As some homework, I want
you to write a pipe function for yourself,

58
00:03:45.848 --> 00:03:48.161
and use the regular reduce utility, okay?

