WEBVTT

1
00:00:00.160 --> 00:00:03.118
&gt;&gt; Kyle Simpson: Okay,
let's talk about part 2 of this exercise.

2
00:00:03.118 --> 00:00:05.316
I trust you found that
sufficiently challenging.

3
00:00:05.316 --> 00:00:10.691
[LAUGH] All right, so we said right before
I gave you the exercise that we can

4
00:00:10.691 --> 00:00:17.121
look at things like listSums, value being
passed into isOdd, that's a composition.

5
00:00:17.121 --> 00:00:23.123
So the point-free representation of this
particular function is just the compose

6
00:00:23.123 --> 00:00:29.138
of isOdd and listSum, so let's just
simply write compose (isOdd, and listSum.

7
00:00:32.520 --> 00:00:34.534
&gt;&gt; Kyle Simpson: And
there's our compose utility.

8
00:00:34.534 --> 00:00:39.902
It takes a list of functions and
it uses reduceRight on those functions,

9
00:00:39.902 --> 00:00:42.454
on that list of functions, okay.

10
00:00:42.454 --> 00:00:45.709
So that made some good progress,
we were point-free there.

11
00:00:45.709 --> 00:00:47.770
Let's look at this particular one.

12
00:00:47.770 --> 00:00:52.932
We have something that takes in a list and
then passes that to listProduct.

13
00:00:52.932 --> 00:00:56.796
Does anybody spot using
equational reasoning a way for

14
00:00:56.796 --> 00:00:59.821
us to use a point-free refactoring here?

15
00:01:01.437 --> 00:01:04.367
&gt;&gt; Kyle Simpson: What do we know about the
shape of this function compared to what we

16
00:01:04.367 --> 00:01:06.243
can see about the shape of that function?

17
00:01:06.243 --> 00:01:08.822
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Kyle Simpson: They're both the same, so

18
00:01:08.822 --> 00:01:09.823
what does that mean?

19
00:01:09.823 --> 00:01:11.318
&gt;&gt; Speaker 3: You can
get rid of one of them.

20
00:01:11.318 --> 00:01:14.482
&gt;&gt; Kyle Simpson: If their shapes
are the same, they're interchangeable,

21
00:01:14.482 --> 00:01:17.022
which means we can simply
pass in listProduct.

22
00:01:21.432 --> 00:01:23.192
&gt;&gt; Kyle Simpson: That's good progress.

23
00:01:23.192 --> 00:01:27.780
All right, our final one that we look
at here, we see a function that takes

24
00:01:27.780 --> 00:01:32.153
a value and another value and
it just adds them together numerically.

25
00:01:32.153 --> 00:01:36.349
So it's just doing a numeric addition.

26
00:01:36.349 --> 00:01:40.338
Well, if you looked through
the functions that were provided to you,

27
00:01:40.338 --> 00:01:43.190
we have just such a function and
it's called sum.

28
00:01:43.190 --> 00:01:49.354
So we don't need ostensibly if something
like that was provided to us by a library,

29
00:01:49.354 --> 00:01:53.329
we don't need to define our own,
we can just use sum.

30
00:01:53.329 --> 00:01:56.818
Okay, we definitely have made
some improvement with point-free.

31
00:01:56.818 --> 00:01:58.608
But we still have a bit
of imperativeness here.

32
00:01:58.608 --> 00:02:03.668
Because we are still calling a function,
grabbing its value into a variable,

33
00:02:03.668 --> 00:02:06.890
then calling passing that
to another function and

34
00:02:06.890 --> 00:02:09.967
then passing that result
to another function.

35
00:02:09.967 --> 00:02:13.675
What's it called when we have one
functions output becoming the input of

36
00:02:13.675 --> 00:02:14.723
another function?

37
00:02:14.723 --> 00:02:16.779
&gt;&gt; Speaker 4: Compose?

38
00:02:16.779 --> 00:02:18.645
&gt;&gt; Kyle Simpson: That's
a composition right?

39
00:02:18.645 --> 00:02:22.752
Well, we could use compose here but since
these are already listed in this order,

40
00:02:22.752 --> 00:02:26.637
why don't we take this as an opportunity
to practice with the pipe function?

41
00:02:26.637 --> 00:02:30.067
Which again, that's provided to
us down here, we have the pipe,

42
00:02:30.067 --> 00:02:32.717
it's just composed with
the functions reversed.

43
00:02:32.717 --> 00:02:37.429
So let's think about a pipe
call where we're gonna

44
00:02:37.429 --> 00:02:40.506
be passing in a set of functions.

45
00:02:40.506 --> 00:02:44.255
We don't need to be saving these
into individual variables, but

46
00:02:44.255 --> 00:02:46.718
we're gonna be passing these functions.

47
00:02:49.615 --> 00:02:53.575
&gt;&gt; Kyle Simpson: Now,
there's a problem which is that each

48
00:02:53.575 --> 00:02:57.429
of these is already receiving the value.

49
00:02:57.429 --> 00:03:01.904
And we want the value to come
through via the piping, right?

50
00:03:01.904 --> 00:03:06.115
And what we're gonna pass into
pipe is that nums object.

51
00:03:06.115 --> 00:03:11.020
So we want nums, we want this
object to sort of flow through.

52
00:03:11.020 --> 00:03:14.531
So we don't wanna be passing
it as an argument, but

53
00:03:14.531 --> 00:03:20.103
now we have a problem which is that those
functions are expecting that argument.

54
00:03:20.103 --> 00:03:25.151
If we look at filter object,
filter object is expecting the O,

55
00:03:25.151 --> 00:03:30.692
map object is expecting the O, and
reduce object is expecting the O.

56
00:03:30.692 --> 00:03:35.310
So what could we do with these to allow
us to provide one of the inputs, but

57
00:03:35.310 --> 00:03:37.372
defer the other input to later?

58
00:03:39.214 --> 00:03:40.275
&gt;&gt; Kyle Simpson: What's that called?

59
00:03:42.354 --> 00:03:46.894
&gt;&gt; Kyle Simpson: Currying, so why don't we
use our curry utility, which if you look

60
00:03:46.894 --> 00:03:52.565
down here, the curry utility, the curry
utility takes the arity and the function.

61
00:03:52.565 --> 00:03:56.034
So we're gonna say 2 and
then the function, but

62
00:03:56.034 --> 00:04:01.119
don't miss the fact that I've already
made curry a curried function.

63
00:04:01.119 --> 00:04:03.608
I used curry on itself, so

64
00:04:03.608 --> 00:04:09.162
we don't have to pass them in
as a single set of arguments.

65
00:04:09.162 --> 00:04:10.433
We can pass them in separately.

66
00:04:10.433 --> 00:04:13.639
So I'm gonna say curry(2) and

67
00:04:13.639 --> 00:04:18.562
then pass in this function and
then curry(2) and

68
00:04:18.562 --> 00:04:24.238
pass in this function,
&gt;&gt; Kyle Simpson: And

69
00:04:24.238 --> 00:04:29.515
then curry(2) and pass in this function.

70
00:04:29.515 --> 00:04:34.597
Now ideally, those functions would've
already been curried, and you remember

71
00:04:34.597 --> 00:04:39.543
I said earlier, it seems like a lot of
times we just end up preferring currying.

72
00:04:39.543 --> 00:04:43.234
We sometimes ask ourselves why aren't
all functions already curried?

73
00:04:43.234 --> 00:04:46.580
The more we end up having to
manually curry things, we wonder,

74
00:04:46.580 --> 00:04:49.692
why can't just everybody have
these functions curried?

75
00:04:49.692 --> 00:04:54.985
Okay, so now we have a list of
functions where nums will flow into

76
00:04:54.985 --> 00:05:01.359
this waiting function, whose output
will flow into this waiting function,

77
00:05:01.359 --> 00:05:05.673
whose output will flow into
this waiting function,

78
00:05:05.673 --> 00:05:09.224
whose output will be the number 3886.

79
00:05:11.664 --> 00:05:16.865
&gt;&gt; Kyle Simpson: But there's one final
refactoring that we could do here.

80
00:05:16.865 --> 00:05:20.045
This is good enough,
this is pretty declarative but

81
00:05:20.045 --> 00:05:24.034
there's one final refactoring
that we might be able to observe.

82
00:05:24.034 --> 00:05:27.982
And it's gonna take advantage of the
associativity of composition in piping.

83
00:05:27.982 --> 00:05:32.433
We could observe that, and this would
definitely be true if we had like 8 or

84
00:05:32.433 --> 00:05:37.380
10 of these in a list, is that manually
specifying each one of these functions and

85
00:05:37.380 --> 00:05:40.655
then passing them into pipe
as individual arguments.

86
00:05:40.655 --> 00:05:41.969
That's one way of doing it.

87
00:05:41.969 --> 00:05:46.200
But another way of thinking
about this is that this

88
00:05:46.200 --> 00:05:50.543
particular operation is
itself a data structure.

89
00:05:50.543 --> 00:05:54.257
Each one of these individual values
being passed into a function,

90
00:05:54.257 --> 00:05:57.521
if we think about that,
that's a very repetitive thing.

91
00:05:57.521 --> 00:06:02.347
Where we're doing something and then
doing it again, and then doing it again,

92
00:06:02.347 --> 00:06:07.051
and doing it again, that sort of almost
begs for a list operation to model it.

93
00:06:07.051 --> 00:06:13.336
So the way I'm going to refactor
this is I'll copy that.

94
00:06:15.349 --> 00:06:18.507
&gt;&gt; Kyle Simpson: What we're going to say
is that we could actually do a list,

95
00:06:18.507 --> 00:06:22.359
an array of these functions, if each
of these functions was in an array,

96
00:06:22.359 --> 00:06:23.767
I shouldn't add a comma.

97
00:06:23.767 --> 00:06:27.844
If each of these functions
was in an array,

98
00:06:27.844 --> 00:06:32.832
remember we're looking for
opportunities where we

99
00:06:32.832 --> 00:06:37.947
can use these list operations
to model our programs.

100
00:06:37.947 --> 00:06:41.505
And in some cases,
a program itself is the data structure or

101
00:06:41.505 --> 00:06:44.152
the structure that we
want to iterate over.

102
00:06:44.152 --> 00:06:51.896
So I've got a list of this functions
that I want to pipe together, right?

103
00:06:51.896 --> 00:06:55.972
Each function I want to compose
with the next one through pipe.

104
00:06:55.972 --> 00:06:59.534
So what's does that sound like if I wanna
take two things to make it into one, and

105
00:06:59.534 --> 00:07:03.118
then two things and make it into one,
then two things, what does it sound like?

106
00:07:03.118 --> 00:07:03.849
&gt;&gt; Speaker 5: Reduce.

107
00:07:03.849 --> 00:07:05.576
&gt;&gt; Kyle Simpson: Sounds like a reduce.

108
00:07:05.576 --> 00:07:11.273
So the function, my reducer would

109
00:07:11.273 --> 00:07:16.775
look like an fn, we'll call it,

110
00:07:16.775 --> 00:07:21.891
reducer (fn1, and fn2).

111
00:07:21.891 --> 00:07:25.708
And we're gonna end up calling,
actually let me reverse that,

112
00:07:25.708 --> 00:07:27.345
no we'll do fn1 and fn2.

113
00:07:27.345 --> 00:07:29.830
We're gonna end up calling fn1 and
then passing it into fn2.

114
00:07:29.830 --> 00:07:38.309
And as soon as we realize we're basically
reimplementing the pipe function,

115
00:07:38.309 --> 00:07:42.552
so our reducer is basically just pipe.

116
00:07:42.552 --> 00:07:46.378
But there's one last little nuance detail.

117
00:07:46.378 --> 00:07:51.720
JavaScript's reduce passes to
the reducer more than just what

118
00:07:51.720 --> 00:07:58.180
we've been thinking about, more than
just the accumulator and the value.

119
00:07:58.180 --> 00:08:01.863
It actually passes in four
arguments instead of two.

120
00:08:01.863 --> 00:08:05.416
This is true for JavaScript's map,
filter and reduce,

121
00:08:05.416 --> 00:08:07.719
it passes in additional arguments.

122
00:08:07.719 --> 00:08:12.853
In this case, it passes in as the 3rd
argument the index of the value,

123
00:08:12.853 --> 00:08:16.346
and as the 4th argument,
the original array.

124
00:08:16.346 --> 00:08:22.297
So that function,
if I were to write it out would take in x,

125
00:08:22.297 --> 00:08:27.531
y, z and w, where x is the accumulator,
y is the v.

126
00:08:27.531 --> 00:08:31.258
This would be the index, and
this would be the original array.

127
00:08:31.258 --> 00:08:36.137
It passes in all 4 of those arguments
rather than only 2 of them,

128
00:08:36.137 --> 00:08:40.497
we've been looking at reduces
that only pass in those 2.

129
00:08:40.497 --> 00:08:46.258
So there's a problem here, which is that
we have the desire to pass in a function,

130
00:08:46.258 --> 00:08:51.784
it should only receive 2 arguments,
but it's gonna be passed 4 arguments.

131
00:08:51.784 --> 00:08:59.050
How could we sort of restrict the inputs
to the pipe function to be only 2?

132
00:08:59.050 --> 00:09:04.204
If you recall back to the very beginning
of our course when we were talking about

133
00:09:04.204 --> 00:09:09.281
adapting argument shapes, one of
the adaptations that we talked about was,

134
00:09:09.281 --> 00:09:14.306
take a function that expects some number
of arguments and change its arity.

135
00:09:14.306 --> 00:09:18.297
And you remember we looked at the unary
utility which takes any function and

136
00:09:18.297 --> 00:09:19.510
turns it into a unary.

137
00:09:19.510 --> 00:09:23.000
And we look at the binary utility
which takes any function and

138
00:09:23.000 --> 00:09:24.376
turns it into a binary.

139
00:09:24.376 --> 00:09:28.692
So the final thing that we need to
do is take our pipe utility and

140
00:09:28.692 --> 00:09:33.174
turn it into binary, so
that it can receive just 2 functions and

141
00:09:33.174 --> 00:09:37.255
pipe those together and
just 2 functions and pipe those.

142
00:09:37.255 --> 00:09:42.639
Finally, what is the end
result of this reduction?

143
00:09:42.639 --> 00:09:47.215
It is the function that we have composed
and we need to call it with the nums.

