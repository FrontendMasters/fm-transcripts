WEBVTT

1
00:00:00.130 --> 00:00:03.550
&gt;&gt; Kyle Simpson: Let's talk about
the solution to the immutability exercise.

2
00:00:04.800 --> 00:00:07.570
Number one we need to
define a pick number that

3
00:00:07.570 --> 00:00:11.430
is going to take the current list
of lucky lottery numbers and

4
00:00:11.430 --> 00:00:15.530
add a new lottery number to it if
it hasn't already been included.

5
00:00:15.530 --> 00:00:19.720
So I'm going to pass in for
sure, the lucky lottery numbers,

6
00:00:19.720 --> 00:00:21.540
the current numbers list.

7
00:00:21.540 --> 00:00:25.840
We know that if we're going to do any
mutations to this list we need to avoid

8
00:00:25.840 --> 00:00:27.530
changing that list.

9
00:00:27.530 --> 00:00:30.530
So I'm immediately going to think,
I better go ahead and

10
00:00:30.530 --> 00:00:35.320
make a copy of it before
I do any changes to it.

11
00:00:35.320 --> 00:00:39.130
And we know at the end, we're definitely
going to be returning that numbers list.

12
00:00:39.130 --> 00:00:43.935
So down here in our while loop,
our pattern is going to be to call

13
00:00:43.935 --> 00:00:47.710
pickNumber with the current list and
get back a new list.

14
00:00:47.710 --> 00:00:52.089
So the way we're going to
do that is just to say

15
00:00:52.089 --> 00:00:58.572
luckylotteryNumbers =
pickNumber(luckylotteryNumbers).

16
00:00:58.572 --> 00:01:03.980
And you recall that we talked about from
a read only data structures perspective,

17
00:01:03.980 --> 00:01:08.240
line 15 in isolation from
seeing how pickNumber works,

18
00:01:08.240 --> 00:01:12.050
could confuse someone into thinking
that it might be mutated in some way.

19
00:01:12.050 --> 00:01:16.839
So what we should do just for good measure
is to use Object.freeze around it.

20
00:01:20.927 --> 00:01:24.485
&gt;&gt; Kyle Simpson: Putting Object.freeze
around the luckyLotteryNumbers value

21
00:01:24.485 --> 00:01:26.459
prevents it from being modified and

22
00:01:26.459 --> 00:01:29.570
also tells the reader you
don't need to worry about it.

23
00:01:29.570 --> 00:01:30.560
It's not getting modified.

24
00:01:30.560 --> 00:01:35.310
It's a little bit of a moot point
here since we're reassigning anyway.

25
00:01:35.310 --> 00:01:38.230
But it's just for good measure to
get practice with the idea that

26
00:01:38.230 --> 00:01:41.470
we shouldn't pass in data structures and
leave it up to the reader for

27
00:01:41.470 --> 00:01:43.360
them to guess what's going to happen.

28
00:01:43.360 --> 00:01:46.350
We should be as clear as possible.

29
00:01:46.350 --> 00:01:48.490
While we're on the topic
of doing this reassignment,

30
00:01:48.490 --> 00:01:51.690
that's the reason I'm going to
leave this as a var declaration

31
00:01:51.690 --> 00:01:55.120
because I do want to be able
to reassign it each time.

32
00:01:55.120 --> 00:02:00.340
And then we have the question about,
what about this number six here?

33
00:02:00.340 --> 00:02:04.170
You can use the number six there, but
generally, when there's a magic number

34
00:02:04.170 --> 00:02:07.860
inside of a program, somebody's going to
ask, how'd you come up with that number?

35
00:02:07.860 --> 00:02:15.030
So, maybe what we ought to do,
is use a constant like NUM_COUNT.

36
00:02:16.470 --> 00:02:19.010
I don't know that may not be a good
name for it but let's just go with that.

37
00:02:19.010 --> 00:02:22.440
We're going to say NUM_COUNT = 6.

38
00:02:22.440 --> 00:02:25.290
And you'll notice here I'm going to go
ahead and use the the const keyword.

39
00:02:25.290 --> 00:02:28.140
Because in this particular
case we are assigning a thing

40
00:02:28.140 --> 00:02:32.110
that is already an immutable value, and
it is serving the purpose of a constant,

41
00:02:32.110 --> 00:02:36.810
which is to be a semantic placeholder for
an otherwise literal value.

42
00:02:36.810 --> 00:02:40.770
So in that case that's exactly
what const should be used for.

43
00:02:40.770 --> 00:02:42.480
That makes sense.

44
00:02:42.480 --> 00:02:46.850
We don't necessarily want to use const for
its ability to be not reassigned but

45
00:02:46.850 --> 00:02:49.540
rather to use it for the semantic signal.

46
00:02:49.540 --> 00:02:55.920
Which is this semantic placeholder for
this particular value.

47
00:02:55.920 --> 00:03:00.098
Okay let's go back to pickNumber we know
we're going to need to grab a lottery

48
00:03:00.098 --> 00:03:02.301
number and then check to see if it's in.

49
00:03:02.301 --> 00:03:08.171
And as soon as we might get a new number
like calling lottery number here what

50
00:03:08.171 --> 00:03:14.152
we should be asking ourselves is that
makes pickNumber an impure function.

51
00:03:14.152 --> 00:03:18.651
As soon as we call that from inside
of here it makes picknumber an impure

52
00:03:18.651 --> 00:03:19.428
function.

53
00:03:19.428 --> 00:03:24.121
So what if instead of doing that we were
to pass in the number to be used, and

54
00:03:24.121 --> 00:03:28.730
that I think is going to end up being
a better way of going about it.

55
00:03:28.730 --> 00:03:32.850
So what we're going to do is generate,
and I'll move this to a separate line.

56
00:03:32.850 --> 00:03:34.831
So it's a little easier to read.

57
00:03:34.831 --> 00:03:38.807
We're going to generate our new
lottery number to insert here.

58
00:03:44.112 --> 00:03:45.900
&gt;&gt; Kyle Simpson: And pass that in.

59
00:03:45.900 --> 00:03:49.990
At this point, pickNumber might be
a slightly wrong name for this function.

60
00:03:49.990 --> 00:03:53.560
We might come up with some other name
if we were really creative like,

61
00:03:53.560 --> 00:03:57.638
insert number or record lottery number,
maybe we'll call it recordNumber.

62
00:04:00.961 --> 00:04:04.480
&gt;&gt; Kyle Simpson: Just to be slightly more
semantic with what its purpose is now.

63
00:04:04.480 --> 00:04:08.730
Okay, so we are passing in the lottery
number that we have generated and

64
00:04:08.730 --> 00:04:10.500
we're passing in the list of numbers.

65
00:04:10.500 --> 00:04:14.510
We need to decide whether that number
should be inserted into the list or not.

66
00:04:14.510 --> 00:04:20.990
So we need to say,
if the numbers.include(num),

67
00:04:20.990 --> 00:04:23.950
and we need to say only
if it doesn't include it.

68
00:04:23.950 --> 00:04:28.830
So I'm going to negate only if it's not
included in the current list of numbers.

69
00:04:28.830 --> 00:04:30.530
Do we want to insert it?

70
00:04:30.530 --> 00:04:33.180
Because we have a local copy of
this array, it's okay to mutate.

71
00:04:33.180 --> 00:04:37.020
We can say numbers.push with the (num).

72
00:04:37.020 --> 00:04:40.320
And then we need to do a sort on this.

73
00:04:40.320 --> 00:04:43.758
So you might call numbers.sort.

74
00:04:43.758 --> 00:04:48.390
There is a little bit of a problem and
it hinted at this in the readme.

75
00:04:48.390 --> 00:04:52.610
There is a problem with the build in
sort method on JavaScript arrays.

76
00:04:52.610 --> 00:04:55.580
Which is that it sorts alpha numerically.

77
00:04:55.580 --> 00:05:00.880
And if you ran it you might accidentally
see something like the number

78
00:05:00.880 --> 00:05:03.270
nine showing up in front
of the number ten.

79
00:05:03.270 --> 00:05:07.270
Or something like that because of
the alphanumeric versus numeric sorting.

80
00:05:07.270 --> 00:05:10.850
So to force numeric sorting,
we need to provide a custom comparator.

81
00:05:12.050 --> 00:05:15.840
I'm going to say,
a custom comparator called ascending.

82
00:05:15.840 --> 00:05:21.030
Where I take two values and the way this
comparator works is it needs to return

83
00:05:21.030 --> 00:05:26.110
negative 1 if X is less than Y or
something greater than 1 if

84
00:05:26.110 --> 00:05:31.300
Y is greater than Y, X or
zero if they're equal.

85
00:05:32.710 --> 00:05:35.990
It turns out there is a nice little
mathematical trick for doing that.

86
00:05:35.990 --> 00:05:39.810
Instead of writing out the if else,
the three if else conditions.

87
00:05:39.810 --> 00:05:44.390
There is a nice little mathematical trick
which is if we want to do numeric sorting,

88
00:05:44.390 --> 00:05:47.570
we can say X- Y.

89
00:05:47.570 --> 00:05:52.370
Because if X is bigger than Y, then that
will return something greater than zero.

90
00:05:52.370 --> 00:05:56.000
If X is less than Y then that will
return something less than zero.

91
00:05:56.000 --> 00:05:58.360
And if X and
Y are equal that will return exactly zero.

92
00:06:00.070 --> 00:06:04.660
So that is a way of kind of short
handing our numeric comparator.

93
00:06:07.020 --> 00:06:09.100
Now we've got a number being pushed in,

94
00:06:09.100 --> 00:06:12.890
we are sorting it and
we are returning the numbers.

95
00:06:12.890 --> 00:06:17.940
So, again we only sort when we
have inserted a new number.

96
00:06:17.940 --> 00:06:19.770
Let's look back at our while loop and

97
00:06:19.770 --> 00:06:23.380
just convince ourselves that the while
loop is still going to work correctly.

98
00:06:23.380 --> 00:06:28.300
Basically what happens if the number has
been included we passed in a number that

99
00:06:28.300 --> 00:06:29.020
was already there.

100
00:06:30.710 --> 00:06:36.090
We end up returning back a numbers
that hasn't even been changed.

101
00:06:36.090 --> 00:06:39.810
So maybe what it would make sense
to do is not even do the copy

102
00:06:39.810 --> 00:06:45.310
of the numbers array unless we know
that we're going to modify it.

103
00:06:45.310 --> 00:06:50.150
Another way of doing a slice and
then a push we could have combined

104
00:06:50.150 --> 00:06:53.122
these two operations we could
have said something like.

105
00:06:53.122 --> 00:06:58.590
And an array where we take in the current
list of numbers and add num on to the end.

106
00:06:58.590 --> 00:07:03.650
That's maybe a little bit more
declarative than doing .slice and .push.

107
00:07:03.650 --> 00:07:07.236
So what's gonna happen with our while
loop is that it's going to keep going.

108
00:07:07.236 --> 00:07:11.350
And if luckyLotteryNumbers length hasn't
changed, it's just going to loop again and

109
00:07:11.350 --> 00:07:13.140
try a new generation for a number.

110
00:07:13.140 --> 00:07:17.920
And it's gonna keep doing that until it's
been able to insert in six unique numbers

111
00:07:17.920 --> 00:07:21.720
and then we'll definitely have
a sorted number at the end.

112
00:07:23.770 --> 00:07:28.720
If I take this code and I move it over
here and try to run it what we should get.

113
00:07:29.720 --> 00:07:32.710
Is a list of six lucky lottery numbers.

114
00:07:32.710 --> 00:07:35.090
All right, there is your lucky
lottery numbers for the day.

115
00:07:35.090 --> 00:07:38.255
If any of you go win a billion dollars,
I expect 10% of it, okay?

116
00:07:38.255 --> 00:07:39.381
[LAUGH]

