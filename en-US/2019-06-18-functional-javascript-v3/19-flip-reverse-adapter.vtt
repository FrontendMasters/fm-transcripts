WEBVTT

1
00:00:00.110 --> 00:00:02.190
&gt;&gt; Kyle Simpson: Let's look at
some other kinds of adapters.

2
00:00:02.190 --> 00:00:04.290
Here's one called flip.

3
00:00:04.290 --> 00:00:06.810
It will sometimes be the case
that you have a function,

4
00:00:06.810 --> 00:00:10.020
let's say you have a binary function,
and it receives an X and a Y.

5
00:00:10.020 --> 00:00:11.880
I don't know what it does,
it doesn't matter.

6
00:00:11.880 --> 00:00:14.810
It's a function that receives an X and
a Y.

7
00:00:14.810 --> 00:00:17.960
And there's a bunch of places
where that works just fine.

8
00:00:17.960 --> 00:00:21.430
But then there's this other place where
you need a function that receives them in

9
00:00:21.430 --> 00:00:22.110
a different order.

10
00:00:22.110 --> 00:00:22.960
You need like yx.

11
00:00:24.200 --> 00:00:27.090
For whatever reason you need to be
able to provide the arguments in

12
00:00:27.090 --> 00:00:27.670
a different order.

13
00:00:29.030 --> 00:00:31.760
That's a new shape adaptation, right?

14
00:00:31.760 --> 00:00:34.420
And if it's a shape adaptation,
then we can make an adapter to do that.

15
00:00:34.420 --> 00:00:37.110
And we call that adapter flip.

16
00:00:37.110 --> 00:00:40.990
Notice what flip does, it takes in a
function, returns back a flipped function,

17
00:00:40.990 --> 00:00:45.920
line 2, it lists arg 1 and
arg 2 and then it transposes

18
00:00:45.920 --> 00:00:50.370
them when it calls the underlying
function on line 3.

19
00:00:50.370 --> 00:00:54.511
And everything else that's passed, if
anything, is passed along untouched, but

20
00:00:54.511 --> 00:00:56.159
flip simply flips the first two.

21
00:00:58.328 --> 00:01:01.363
&gt;&gt; Kyle Simpson: By the way, flip is
the name that is canonically used in most

22
00:01:01.363 --> 00:01:04.410
libraries for exactly this function,
it's called flip.

23
00:01:05.630 --> 00:01:07.280
Same with unary and binary.

24
00:01:07.280 --> 00:01:07.900
Wherever possible,

25
00:01:07.900 --> 00:01:12.030
I'm gonna try to use whatever names
you'll probably see out in the wild.

26
00:01:12.030 --> 00:01:14.170
Not always, but where possible, okay?

27
00:01:14.170 --> 00:01:17.480
So you'll find a flip in there, and
now you know what that does, and

28
00:01:17.480 --> 00:01:21.260
that's like learning about
the plus operation in math.

29
00:01:22.340 --> 00:01:27.730
Because now you know what that does every
time you see flip with an fn passed in,

30
00:01:27.730 --> 00:01:30.515
you know that the thing
that's being passed back has

31
00:01:30.515 --> 00:01:35.500
transposed the two arguments.

32
00:01:35.500 --> 00:01:39.030
The job of becoming a functional
programmer is getting comfortable with

33
00:01:39.030 --> 00:01:43.370
seeing all of these different mathematical
pieces and saying, yep, this is the flip,

34
00:01:43.370 --> 00:01:46.660
and yep, this is the unarian, yep, this
is the binary, and this is the this and

35
00:01:46.660 --> 00:01:47.720
this is the that.

36
00:01:47.720 --> 00:01:50.062
Seeing those and
recognizing those at a glance and

37
00:01:50.062 --> 00:01:52.524
using them just like you use
one plus one equals two.

38
00:01:56.402 --> 00:02:00.240
&gt;&gt; Kyle Simpson: When I make G on line 11,
that is the flip of F.

39
00:02:00.240 --> 00:02:05.268
So when I pass in G 1, 2, 3, 4,
the underlying F actually receives 2,

40
00:02:05.268 --> 00:02:08.690
1, 3, 4, the first two arguments
having been transposed.

41
00:02:09.910 --> 00:02:15.560
A somewhat less common example that
you may find would be reverseArgs.

42
00:02:15.560 --> 00:02:18.390
That's a name that I made up, okay?

43
00:02:18.390 --> 00:02:21.480
Because this isn't one that you're gonna
find in all of your functional programming

44
00:02:21.480 --> 00:02:24.630
libraries, but
it's one that I've often found useful.

45
00:02:25.710 --> 00:02:30.442
So I went and made my own higher order
function utility, because sometimes I have

46
00:02:30.442 --> 00:02:36.000
an n-ary function, three inputs and
I need them all three reverse.

47
00:02:36.000 --> 00:02:40.780
Not just the first two flipped, but I need
all three of them to go in reverse order.

48
00:02:40.780 --> 00:02:42.499
That's happened to me on
a number of occasions.

49
00:02:44.000 --> 00:02:45.680
So what does reverseArgs do?

50
00:02:45.680 --> 00:02:50.502
Exactly what you expect, takes a function
and returns back a new function that

51
00:02:50.502 --> 00:02:54.898
takes the list of arguments, line 2,
and line 3, it reverses them.

52
00:02:59.075 --> 00:03:02.720
&gt;&gt; Kyle Simpson: That's an example of
an adapter that I made that I might use.

53
00:03:02.720 --> 00:03:07.690
Not one you necessarily find but
it's an example, when you find yourself

54
00:03:07.690 --> 00:03:10.640
messing around with the shape of
your functions and they don't fit.

55
00:03:11.980 --> 00:03:14.330
Try to figure out number 1,

56
00:03:14.330 --> 00:03:19.280
can I change the shape of my function
at definition so that it fits better?

57
00:03:20.410 --> 00:03:24.250
If not, can I make an adapter
that changes the shape?

58
00:03:26.310 --> 00:03:29.930
Everywhere that we do this,
we're looking for common patterns.

59
00:03:32.260 --> 00:03:35.310
The functional programmer is looking for
the Lego piece

60
00:03:35.310 --> 00:03:38.530
that looks exactly like the Lego piece
that they have a big old pile of.

61
00:03:40.580 --> 00:03:44.230
I want this thing to look like
a Lego piece that I already have.

62
00:03:44.230 --> 00:03:47.460
I don't want to go invent new
utilities all day every day.

63
00:03:49.490 --> 00:03:52.640
Stop and think about that for a moment,
because that may not be obvious.

64
00:03:52.640 --> 00:03:58.110
Why might I not wanna just invent ad
hoc utilities all over the place?

65
00:03:59.530 --> 00:04:02.350
Because, quite honestly,
it's kind of creative and fun to do so.

66
00:04:02.350 --> 00:04:06.540
I can come up with all kinds of
different shape changing ones.

67
00:04:06.540 --> 00:04:10.990
Why wouldn't that be a good way
of approaching my code base?

68
00:04:10.990 --> 00:04:16.400
And I would suggest to you that maybe why
it's not such a great idea is because

69
00:04:16.400 --> 00:04:21.850
the whole point of being able to glance
at something is the familiarity,

70
00:04:21.850 --> 00:04:22.800
the recognition of it.

71
00:04:24.180 --> 00:04:29.870
Wherever possible if the things that we
are using are the known common things that

72
00:04:29.870 --> 00:04:34.550
every functional programmer for the last
60 something years have used, that's good.

73
00:04:35.770 --> 00:04:38.660
But when a functional programmer comes to
your code base and they see this thing and

74
00:04:38.660 --> 00:04:42.070
they're like, what,
never seen that Lego before.

75
00:04:42.070 --> 00:04:47.080
It's less familiar, so somebody has to
spend more time reasoning about that math.

76
00:04:49.300 --> 00:04:50.850
Where it's possible for

77
00:04:50.850 --> 00:04:55.380
us to do so, we should try to
make it recognizable at a glance.

78
00:04:55.380 --> 00:04:58.240
We should try to use
the standard common ones.

79
00:04:58.240 --> 00:05:03.110
So that means get real familiar with at
least one functional program library and

80
00:05:03.110 --> 00:05:05.010
most of the methods that it provides.

81
00:05:06.360 --> 00:05:10.669
Once you've spent a few hours reading
through the documentation for Ramda, for

82
00:05:10.669 --> 00:05:14.976
example, you're gonna find yourself
looking at a thing, seeing this shape and

83
00:05:14.976 --> 00:05:18.158
this shape and sayng,
I know what that one's called.

84
00:05:18.158 --> 00:05:19.971
I saw that in the Ramda docs.

85
00:05:21.101 --> 00:05:23.098
&gt;&gt; Kyle Simpson: Congratulations,
that's functional programming.

86
00:05:23.098 --> 00:05:28.530
Instead of go invent your own and make
one that isn't consistent and familiar,

87
00:05:28.530 --> 00:05:33.163
try to make it fit in with the existing
patterns wherever possible.

88
00:05:33.163 --> 00:05:37.921
And when you can't, make your own,
document them well, put them in

89
00:05:37.921 --> 00:05:43.107
a standard library that the whole app
uses and use them as much as possible.

90
00:05:43.107 --> 00:05:44.758
That way everybody gets
familiar with them.

