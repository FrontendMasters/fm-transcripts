WEBVTT

1
00:00:00.000 --> 00:00:02.660
&gt;&gt; Kyle Simpson: All right, so let's take
a look at another aspect of functions.

2
00:00:02.660 --> 00:00:05.880
And this is kind of a higher-level concept
and it may twist your brain a little bit,

3
00:00:05.880 --> 00:00:06.860
but that's okay.

4
00:00:06.860 --> 00:00:10.545
That's what we're here for, we wanna push
ourselves, so stick with me on this.

5
00:00:10.545 --> 00:00:12.475
Point-free, what is that?

6
00:00:12.475 --> 00:00:14.569
I'd heard this phrase many,

7
00:00:14.569 --> 00:00:19.613
many times when I was trying to kind
of pick up functional programming.

8
00:00:19.613 --> 00:00:23.089
And it sounded like one of those fancy
concepts that I didn't know what to do,

9
00:00:23.089 --> 00:00:24.980
and didn't know what that meant.

10
00:00:24.980 --> 00:00:26.150
But then I learned about it, and

11
00:00:26.150 --> 00:00:28.724
I was like, well I've kinda
already been doing some of that.

12
00:00:28.724 --> 00:00:32.910
And that's one of the gratifying sort
of takeaways from a lot of functional

13
00:00:32.910 --> 00:00:37.860
programming, is that it turns out that
this big idea of functional programming

14
00:00:37.860 --> 00:00:43.070
is built up by a bunch of tiny little
things, most of which we've already done,

15
00:00:43.070 --> 00:00:45.620
or at least we can find intuitive.

16
00:00:45.620 --> 00:00:48.450
It's rarely the case where you look
at something and say, that is just so

17
00:00:48.450 --> 00:00:51.410
completely out of the realm of
anything I ever would have thought or

18
00:00:51.410 --> 00:00:53.500
done that it just totally mind bends.

19
00:00:53.500 --> 00:00:56.790
It's the combination of all
those things that really

20
00:00:56.790 --> 00:00:59.340
pushes us into this different paradigm.

21
00:00:59.340 --> 00:01:02.590
So we're gonna talk about this
style of writing our functions.

22
00:01:02.590 --> 00:01:03.950
And this may sound a little strange, but

23
00:01:03.950 --> 00:01:08.510
it's a way of defining a function without
actually writing anything in the function.

24
00:01:08.510 --> 00:01:13.520
It's a way of making a function by
making it with other functions.

25
00:01:13.520 --> 00:01:15.670
That's really what
point-free style is about.

26
00:01:15.670 --> 00:01:18.950
So what does this even mean,
what does that name even mean?

27
00:01:18.950 --> 00:01:20.590
Well, I don't know if any
of you remember this.

28
00:01:20.590 --> 00:01:24.630
I have a very vague recollection
back to my seventh, eighth,

29
00:01:24.630 --> 00:01:27.640
ninth grade time frame,
something like that, long time ago.

30
00:01:27.640 --> 00:01:33.240
I remember a teacher saying something
to the effect of fixed point functions,

31
00:01:33.240 --> 00:01:37.250
sometime when we were doing something with
our graphing calculators or something.

32
00:01:37.250 --> 00:01:39.909
And I don't remember
what they meant by that.

33
00:01:39.909 --> 00:01:43.499
I've since googled it and
looked it up on Wikipedia and

34
00:01:43.499 --> 00:01:46.473
I sort of now come to
a better understanding.

35
00:01:46.473 --> 00:01:48.638
I wish they'd just said at
the time more clearly, or

36
00:01:48.638 --> 00:01:51.370
I'd been able to understand more clearly,
what it was.

37
00:01:51.370 --> 00:01:55.900
But the idea of a fixed point function,
remember back to our initial example.

38
00:01:55.900 --> 00:01:59.530
We were talking about, we were motivating
at the beginning of the course,

39
00:01:59.530 --> 00:02:01.850
the f of x and
the two x squared plus three.

40
00:02:01.850 --> 00:02:03.310
Remember that function?

41
00:02:03.310 --> 00:02:08.310
Well, the idea there is that
the input x outputs a y.

42
00:02:08.310 --> 00:02:10.520
What if that function had multiple inputs?

43
00:02:10.520 --> 00:02:13.600
What if it took an x and
a y and it outputed a z?

44
00:02:13.600 --> 00:02:15.375
Well, now we'd have like
a three dimensional,

45
00:02:15.375 --> 00:02:18.758
it'd be a two dimensional surface
in three dimensional space, right?

46
00:02:18.758 --> 00:02:23.240
So,
&gt;&gt; Kyle Simpson: The idea of

47
00:02:23.240 --> 00:02:28.020
a fixed function,
is that if you have more than one input,

48
00:02:28.020 --> 00:02:33.340
you take one of the inputs and
fix it at a certain value.

49
00:02:33.340 --> 00:02:37.660
So for example, I could say take
a function that takes an x and y and

50
00:02:37.660 --> 00:02:44.460
produces a z, and fix the x at
the number three, for whatever reason.

51
00:02:44.460 --> 00:02:49.560
Now that's gonna tell me the line on
that surface at exactly x equals three.

52
00:02:49.560 --> 00:02:51.940
That's mathematically,
what that was all about.

53
00:02:51.940 --> 00:02:56.050
So fixed point functions were where
we took one of the inputs and

54
00:02:56.050 --> 00:02:57.790
we fixed it at a certain value.

55
00:02:57.790 --> 00:03:01.780
Well, that's sort of speaks to why
we're calling this point-free,

56
00:03:01.780 --> 00:03:06.390
because point-free definition
is defining a function

57
00:03:06.390 --> 00:03:11.460
without needing to define its points,
aka, it's inputs.

58
00:03:11.460 --> 00:03:17.850
Without needing to explicitly define and
map its inputs, can we define a function?

59
00:03:17.850 --> 00:03:23.300
And in a sense it really ends up as
a class or a family of techniques for

60
00:03:23.300 --> 00:03:28.330
defining functions by way
of other functions, okay?

61
00:03:28.330 --> 00:03:29.440
So let's take a look.

62
00:03:29.440 --> 00:03:32.310
Some of you have probably done
something like this, many of you,

63
00:03:32.310 --> 00:03:37.560
have passed in a callback, for
example to this getPerson utility.

64
00:03:37.560 --> 00:03:43.130
I pass in this callback that receives
line 1, an input-called person, and

65
00:03:43.130 --> 00:03:48.600
it passes that along to some other
function, in this case to renderPerson.

66
00:03:48.600 --> 00:03:51.254
Anybody seen code like this before?

67
00:03:51.254 --> 00:03:53.270
Seems somewhat familiar, okay?

68
00:03:53.270 --> 00:03:56.990
So this is very, very common,
we receive inputs in one callback.

69
00:03:56.990 --> 00:03:59.070
We pass that input to another callback.

70
00:03:59.070 --> 00:04:04.770
That person parameter there is the point,
it is the input.

71
00:04:04.770 --> 00:04:09.650
In mathematical terms, it's called
a point, for the onPerson function.

72
00:04:09.650 --> 00:04:13.690
And you notice that we've defined
the onPerson function by specifically and

73
00:04:13.690 --> 00:04:15.480
explicitly listing out that point.

74
00:04:17.020 --> 00:04:21.500
So what if we could define
the equivalent of that function

75
00:04:21.500 --> 00:04:23.750
without needing to list the point at all?

76
00:04:24.850 --> 00:04:26.860
Some of you may have
actually done this before.

77
00:04:26.860 --> 00:04:29.910
And this is where when I was first
learning point-free I was like

78
00:04:29.910 --> 00:04:30.670
I've done that before.

79
00:04:30.670 --> 00:04:32.430
I just didn't know that
it was called point-free.

80
00:04:32.430 --> 00:04:37.670
You might notice that the onPerson
function taking a single input, and

81
00:04:37.670 --> 00:04:40.120
the renderPerson taking a single input,

82
00:04:40.120 --> 00:04:43.679
you might notice that they
have basically the same shape.

83
00:04:44.980 --> 00:04:48.690
Which means if they have the same shape,
then they're interchangeable.

84
00:04:49.950 --> 00:04:54.926
Which means that I could just pass
renderPerson as the callback.

85
00:04:54.926 --> 00:04:57.554
Anybody ever done
something like that before?

86
00:04:57.554 --> 00:05:00.445
Where you had this wrapper function and
then realized, I don't need the wrapper,

87
00:05:00.445 --> 00:05:01.510
I can just pass in the function.

88
00:05:02.760 --> 00:05:05.320
Well if you've done that before,
I have good news for you.

89
00:05:05.320 --> 00:05:10.090
Without you even knowing, you were doing
this really, really cool thing that I'm

90
00:05:10.090 --> 00:05:13.830
gonna give you this term, and you're gonna
be able to go back to your teams and

91
00:05:13.830 --> 00:05:16.030
use this term, and
you're gonna sound really smart.

92
00:05:16.030 --> 00:05:19.290
And everybody's gonna be like,
whoa, that was really cool.

93
00:05:19.290 --> 00:05:22.920
What you were doing was
called equational reasoning.

94
00:05:22.920 --> 00:05:24.970
That sounds cool, doesn't it?

95
00:05:24.970 --> 00:05:26.690
I'd like to put that on my business card.

96
00:05:26.690 --> 00:05:28.465
I'm an equational reasoning master.

97
00:05:28.465 --> 00:05:31.460
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kyle Simpson: It sounds cool,

98
00:05:31.460 --> 00:05:34.520
it's actually pretty mundane, okay?

99
00:05:34.520 --> 00:05:38.078
What's mundane about it is
that we're basically saying,

100
00:05:38.078 --> 00:05:41.137
if I have this thing that's
got this one shape, and

101
00:05:41.137 --> 00:05:46.048
I have this other thing that has the same
shape, even if they do different things,

102
00:05:46.048 --> 00:05:49.703
if they have the same shape
then they're interchangeable.

103
00:05:52.159 --> 00:05:56.492
&gt;&gt; Kyle Simpson: Equational reasoning
means reason about this thing and

104
00:05:56.492 --> 00:06:01.561
say that it is equationally not equal,
equal in identity sense,

105
00:06:01.561 --> 00:06:05.640
but equal shape sense
with this other thing.

106
00:06:05.640 --> 00:06:10.530
Here we have an onPerson function
that is equationally, it is

107
00:06:10.530 --> 00:06:15.810
equivalent to, the renderPerson function,
which means that we can pass renderPerson.

108
00:06:15.810 --> 00:06:20.236
And the takeaway here is that we
were able to get away with defining

109
00:06:20.236 --> 00:06:23.379
a function without needing
to list the point.

110
00:06:23.379 --> 00:06:29.643
That's one aspect of point-free, but I
said it's kind of a family of techniques.

111
00:06:29.643 --> 00:06:34.400
So there are other things involved that
fall under this heading of point-free.

112
00:06:34.400 --> 00:06:38.410
And before I even show you some of
these other more advanced techniques,

113
00:06:38.410 --> 00:06:39.560
I just wanna warn you.

114
00:06:39.560 --> 00:06:41.920
It's like what I talked about
in the intro to the course,

115
00:06:41.920 --> 00:06:46.020
when I said that you'll be trying
something, and all of a sudden you'll

116
00:06:46.020 --> 00:06:51.410
cross this line from I was tracking
with you to, what did he just do, right?

117
00:06:51.410 --> 00:06:52.910
At some point in the next slide or

118
00:06:52.910 --> 00:06:54.760
two, we're gonna cross that line for
all of you.

119
00:06:54.760 --> 00:06:57.880
It's okay, we definitely did for
me as well, okay?

120
00:06:59.270 --> 00:07:04.340
But before I even show you though, what I
wanna warn you is, is if you see this and

121
00:07:04.340 --> 00:07:09.050
then you say, as a response, well I don't
get that, that's not more readable.

122
00:07:09.050 --> 00:07:10.870
That's weirder to me, so
I'm not going to do it.

123
00:07:12.070 --> 00:07:15.512
That's not the best response.

124
00:07:15.512 --> 00:07:21.625
A better response would be, wow,
that's not what I was expecting.

125
00:07:21.625 --> 00:07:24.769
And it's going to take some
time to get used to that,

126
00:07:24.769 --> 00:07:27.066
I should try that a bunch more, okay?

127
00:07:27.066 --> 00:07:32.373
But on the other hand, another response,
and I have seen this from folks,

128
00:07:32.373 --> 00:07:38.290
including myself, is that you see this and
you're like, whoa, that's so cool.

129
00:07:38.290 --> 00:07:43.268
I'm gonna do that everywhere,
I'm just gonna point-free everything.

130
00:07:43.268 --> 00:07:47.554
And you very quickly explode
the complexity, the surface area of that

131
00:07:47.554 --> 00:07:52.868
complexity, way beyond your capacity to
even understand what it is you've written.

132
00:07:54.733 --> 00:07:57.401
&gt;&gt; Kyle Simpson: So
that's also not a great healthy response.

133
00:07:57.401 --> 00:08:01.551
The healthy response here is to
push yourself a little bit, but

134
00:08:01.551 --> 00:08:04.695
fall back to things that are practical for
you.

135
00:08:04.695 --> 00:08:07.273
And then push yourself a little bit more
and fall back to what's comfortable and

136
00:08:07.273 --> 00:08:08.970
practical and readable and reasonable.

137
00:08:08.970 --> 00:08:11.320
And do that little by little by little.

138
00:08:11.320 --> 00:08:14.410
What I'm about to show you is
the first time I saw it I was like,

139
00:08:14.410 --> 00:08:15.560
I don't know about that.

140
00:08:15.560 --> 00:08:18.160
And then after a while that
became comfortable and

141
00:08:18.160 --> 00:08:19.460
then my line moved a little bit.

142
00:08:19.460 --> 00:08:23.074
And then I tried a few more more
advanced techniques in point-free and

143
00:08:23.074 --> 00:08:24.960
my line moved a little bit.

144
00:08:24.960 --> 00:08:28.830
And then I tried a bit more, and a few
months later, the line moved a little bit.

145
00:08:28.830 --> 00:08:30.710
So that's the way it's gonna be for
you, and

146
00:08:30.710 --> 00:08:33.660
particularly with point-free,
don't go overboard.

147
00:08:34.800 --> 00:08:36.120
Don't go overboard with it,

148
00:08:36.120 --> 00:08:41.180
because this is that point where my
readability curve started tanking.

149
00:08:41.180 --> 00:08:45.550
It was with point-free,
I was trying it cuz it was so cool.

150
00:08:45.550 --> 00:08:49.760
And I way over-blew the complexity
of it and lost all the benefits.

151
00:08:49.760 --> 00:08:51.770
At the end of the day,
if your code is not more readable and

152
00:08:51.770 --> 00:08:54.115
understandable, then
it's not benefiting you.

