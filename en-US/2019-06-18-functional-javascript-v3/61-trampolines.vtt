WEBVTT

1
00:00:00.000 --> 00:00:04.620
&gt;&gt; Kyle Simpson: That idea that I'm gonna
defer the work of first+v until a later

2
00:00:04.620 --> 00:00:08.360
function call by wrapping
it in a function.

3
00:00:08.360 --> 00:00:12.525
That idea we wanna key off of for
our last technique,

4
00:00:12.525 --> 00:00:16.415
this is the one I want you
to actually use, okay?

5
00:00:16.415 --> 00:00:19.047
That technique is called trampolines.

6
00:00:19.047 --> 00:00:23.349
I want you to use trampolines because
you're gonna see that you write it almost

7
00:00:23.349 --> 00:00:26.363
as if it's just a regular
normal recursive function.

8
00:00:26.363 --> 00:00:31.293
And then you have this adapter that helps
take care of the whole tail calling

9
00:00:31.293 --> 00:00:32.005
problem.

10
00:00:32.005 --> 00:00:34.352
So what is a trampoline?

11
00:00:34.352 --> 00:00:39.017
It's a funny way of basically indicating
that we want something to sort of bounce

12
00:00:39.017 --> 00:00:40.580
back and forth.

13
00:00:40.580 --> 00:00:42.360
That's why it's called a trampoline.

14
00:00:42.360 --> 00:00:43.891
So what's is it bouncing back and forth?

15
00:00:43.891 --> 00:00:47.407
Instead of having function call
function call function, call function,

16
00:00:47.407 --> 00:00:48.202
call function.

17
00:00:48.202 --> 00:00:51.212
Our strategy is basically going to be
function call function, return another

18
00:00:51.212 --> 00:00:54.357
function, then call that one and return
another function, then call that one and

19
00:00:54.357 --> 00:00:57.294
return another function, then call
that one and return another function.

20
00:00:57.294 --> 00:01:00.718
And you can sort of visually get
the idea of somebody bouncing up and

21
00:01:00.718 --> 00:01:01.900
down on a trampoline.

22
00:01:01.900 --> 00:01:05.510
So in other words, we never have the case
where this thing has called this thing.

23
00:01:05.510 --> 00:01:09.860
We never build up a stack at all,
the stack depth never goes beyond 1.

24
00:01:09.860 --> 00:01:14.340
Because what we do instead of
making a recursive call is

25
00:01:14.340 --> 00:01:16.780
we return a function that
will make the next call.

26
00:01:18.330 --> 00:01:19.890
That's how the technique works.

27
00:01:19.890 --> 00:01:22.850
So let's look at utility for
that, this is real simple,

28
00:01:22.850 --> 00:01:25.960
this would be provided to you by your
functional programming librarian.

29
00:01:25.960 --> 00:01:27.350
They are a little more
sophisticated than this.

30
00:01:27.350 --> 00:01:32.073
But essentially a trampoline function
is just gonna do a while loop here, and

31
00:01:32.073 --> 00:01:34.907
as long as you keep
returning a function back,

32
00:01:34.907 --> 00:01:40.082
it's just gonna repeat the loop again and
call the function and then get the result.

33
00:01:40.082 --> 00:01:41.774
And if that's the function again,
it's just gonna keep.

34
00:01:41.774 --> 00:01:46.409
So as long as you keep returning
the function it's gonna assume you want me

35
00:01:46.409 --> 00:01:50.895
to keep going with the trampoline until
the very end when it just returns

36
00:01:50.895 --> 00:01:52.190
the result line 9.

37
00:01:52.190 --> 00:01:55.593
It didn't give back a function,
it got back a number, string,

38
00:01:55.593 --> 00:01:58.061
something non function
that's how it knows.

39
00:01:58.061 --> 00:02:02.042
Now libraries have it little more
sophisticated than just the type of check

40
00:02:02.042 --> 00:02:02.997
on the function.

41
00:02:02.997 --> 00:02:06.242
So there's way to even return
back functions from recursion.

42
00:02:06.242 --> 00:02:10.096
But the point that I want you to get is
that we're just doing a while loop bounce

43
00:02:10.096 --> 00:02:10.935
back and forth.

44
00:02:10.935 --> 00:02:14.505
Call the function, get a function back,
call the function, get a function back,

45
00:02:14.505 --> 00:02:15.377
that sort of thing.

46
00:02:15.377 --> 00:02:17.112
And it can go forever.

47
00:02:17.112 --> 00:02:19.939
Because the stack frame never runs out,
the heap never runs out, and

48
00:02:19.939 --> 00:02:21.810
it only ever executes
one function at a time.

49
00:02:23.170 --> 00:02:28.310
It's an interesting and unique sort
of trick to the tail call problem.

50
00:02:28.310 --> 00:02:31.670
The way we solve the tail call
problem is to just never have

51
00:02:31.670 --> 00:02:32.530
a stack in the first place.

52
00:02:34.100 --> 00:02:36.569
So what does it look like to
use this trampoline utility?

53
00:02:38.250 --> 00:02:42.785
Notice that I've got a countVowels
that from the most prospective,

54
00:02:42.785 --> 00:02:45.930
countVowels looks exactly like
what we implemented before.

55
00:02:45.930 --> 00:02:49.943
I'm wrapping it in a call to trampoline
like we did with memoize earlier in

56
00:02:49.943 --> 00:02:50.665
the course.

57
00:02:50.665 --> 00:02:52.560
But the only difference,

58
00:02:52.560 --> 00:02:57.308
line 6 looks exactly like what we
expected in the tail call form.

59
00:02:57.308 --> 00:03:03.371
The only difference is that line 5 wraps
up line 6 in a function and returns it.

60
00:03:03.371 --> 00:03:06.210
That's the only intrusion
that we have to do.

61
00:03:06.210 --> 00:03:07.859
Line 4 still looks normal.

62
00:03:07.859 --> 00:03:10.001
Line 3 still looks normal.

63
00:03:10.001 --> 00:03:11.413
Line 6 looks normal.

64
00:03:11.413 --> 00:03:16.095
The only difference to use trampoline
is you have to take any call that

65
00:03:16.095 --> 00:03:20.551
would have been recursive and
wrap it in a function and return it.

66
00:03:20.551 --> 00:03:23.323
And that's how you opt into
this whole trampolining thing.

67
00:03:26.347 --> 00:03:30.421
&gt;&gt; Kyle Simpson: And that function that
we're creating, the function f on line 5,

68
00:03:30.421 --> 00:03:35.433
the way that function works is because it
has closure over the stuff that it needed.

69
00:03:35.433 --> 00:03:40.072
So temporarily, for a brief microsecond,
holds on to those values so

70
00:03:40.072 --> 00:03:44.637
that they can be returned back to
the trampolining utility, popping

71
00:03:44.637 --> 00:03:49.538
the call stack, and then immediately
re-invokes that and starts over.

72
00:03:49.538 --> 00:03:53.534
So we're taking advantage of the place
that we store our information is in

73
00:03:53.534 --> 00:03:57.407
the return value of our stack frame
which then pops the stack frame off.

74
00:03:59.157 --> 00:04:00.622
&gt;&gt; Kyle Simpson: That's
how trampolining works.

75
00:04:00.622 --> 00:04:05.604
And the reason I want you to start writing
this form of recursion is because this

76
00:04:05.604 --> 00:04:08.925
form of recursion will be very easy for
you and,, or

77
00:04:08.925 --> 00:04:13.757
a tool to automatically convert to real
tail-call form at some later time,

78
00:04:13.757 --> 00:04:18.460
if we get to the point where tail calls
are reliable and cross JavaScript.

79
00:04:18.460 --> 00:04:20.880
If you use a trampolining like this,

80
00:04:20.880 --> 00:04:25.721
all a tool would have to do is know
that you use trampolining everywhere and

81
00:04:25.721 --> 00:04:29.804
go find those places like line 5 and
7 and just take them out.

82
00:04:29.804 --> 00:04:34.001
And then take out the wrapping around
the trampoline thing that's easily

83
00:04:34.001 --> 00:04:35.363
automatable by tools.

84
00:04:35.363 --> 00:04:38.393
So we can write something
that is in tail call form,

85
00:04:38.393 --> 00:04:42.973
have a small little intrusion on it and
then automatically remove that at some

86
00:04:42.973 --> 00:04:47.706
point if we ever get to the point where
tail calls are supported by the language.

87
00:04:47.706 --> 00:04:50.799
And if not, then our trampolining
just keeps working and

88
00:04:50.799 --> 00:04:55.125
we get most all of the declarative benefit
out of the recursion technique here.

89
00:04:55.125 --> 00:04:58.923
Even though this code is a bit more
complex than where we started it's still

90
00:04:58.923 --> 00:05:02.542
significantly more declarative than
what we did with the iterative for

91
00:05:02.542 --> 00:05:03.342
loop version.

92
00:05:08.363 --> 00:05:12.094
&gt;&gt; Kyle Simpson: This is my current
state of the art, if you will.

93
00:05:12.094 --> 00:05:16.696
This is how I do recursion in my programs,
is I write a tail call form and

94
00:05:16.696 --> 00:05:18.338
wrap it in a trampoline.

95
00:05:18.338 --> 00:05:21.278
But just like everything else I've
taught you, you're not gonna get to be

96
00:05:21.278 --> 00:05:24.229
comfortable with this sort of topic
unless you start to try to practice it.

97
00:05:24.229 --> 00:05:29.035
So retry the exercises,
try the stuff on your own code.

98
00:05:29.035 --> 00:05:31.768
Look for places that you're
doing things iteratively and

99
00:05:31.768 --> 00:05:33.950
ask is there a way I could
do that recursively?

100
00:05:33.950 --> 00:05:36.130
Could I use a trampoline here and
do it recursively?

