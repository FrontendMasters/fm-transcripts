WEBVTT

1
00:00:00.250 --> 00:00:02.252
&gt;&gt; Kyle Simpson: All right,
so this next step,

2
00:00:02.252 --> 00:00:07.417
this is one of those out of thin air, how
would you have ever imagined to do this.

3
00:00:07.417 --> 00:00:10.768
The inside of each of those reducers,

4
00:00:10.768 --> 00:00:15.070
that is lines 3 and 4,
and lines 10 and 11.

5
00:00:15.070 --> 00:00:18.928
I want you to look very closely
at those two sets of lines.

6
00:00:18.928 --> 00:00:23.840
And I want you to see that there is
something very similar about those lines.

7
00:00:26.004 --> 00:00:31.294
&gt;&gt; Kyle Simpson: Do you see that in
both pairs of lines in line 3 and 4 and

8
00:00:31.294 --> 00:00:36.700
in line 10 and 11 in both cases,
what fundamentally

9
00:00:36.700 --> 00:00:42.469
happens is a value and
an array get reduced into a new array.

10
00:00:42.469 --> 00:00:45.550
That is, that we push a value into
an array and then we return it.

11
00:00:48.541 --> 00:00:51.387
&gt;&gt; Kyle Simpson: There is
definitely the if statement, and

12
00:00:51.387 --> 00:00:55.970
there is definitely the mapping,
but abstract with there we see that

13
00:00:55.970 --> 00:01:01.028
there's something generic occurring,
which is take a value in an array and

14
00:01:01.028 --> 00:01:06.900
reduce them combine them together into
a new array, or an extended array rather.

15
00:01:06.900 --> 00:01:09.223
Okay, here's what we're gonna do,

16
00:01:09.223 --> 00:01:12.501
we're gonna factor out that
whole genericism part.

17
00:01:12.501 --> 00:01:18.169
We're gonna say, that taking an array and
the value and combining them, we're gonna

18
00:01:18.169 --> 00:01:23.870
make a combiner, and we are gonna use
that combiner in both of these reducers.

19
00:01:23.870 --> 00:01:26.185
We are gonna do some drying,
if you will, right?

20
00:01:26.185 --> 00:01:31.110
Take those parts that are the same out and
use that combiner.

21
00:01:31.110 --> 00:01:32.559
So here's how we are gonna do that.

22
00:01:32.559 --> 00:01:36.751
Up on the top, line 1 through 4,
I have my list combination function,

23
00:01:36.751 --> 00:01:37.800
it is a combiner.

24
00:01:38.910 --> 00:01:40.162
Look at the shape of it.

25
00:01:40.162 --> 00:01:44.083
It takes two values and
produces one value as a return.

26
00:01:44.083 --> 00:01:44.739
What shape is that?

27
00:01:47.428 --> 00:01:48.373
&gt;&gt; Speaker 2: Reducer.
&gt;&gt; Kyle Simpson: It's just

28
00:01:48.373 --> 00:01:49.880
a reducer, right?

29
00:01:49.880 --> 00:01:50.779
It is the shape of a reducer.

30
00:01:50.779 --> 00:01:54.320
It takes two values and
reduces them into one.

31
00:01:54.320 --> 00:02:00.340
In this case, the kind of reduction
that it's doing is value into an array.

32
00:02:00.340 --> 00:02:04.877
But we've seen lots of other reducers
like two numbers being added together or

33
00:02:04.877 --> 00:02:06.880
two strings being concatenated.

34
00:02:06.880 --> 00:02:08.743
This is just a different
kind of reduction.

35
00:02:08.743 --> 00:02:13.210
Is a reduction between an array and
a value, okay?

36
00:02:13.210 --> 00:02:17.176
So temporarily, we've got this standalone
function called list combination and

37
00:02:17.176 --> 00:02:19.450
it definitely has that
side effect thing in it.

38
00:02:19.450 --> 00:02:20.970
Doesn't it?

39
00:02:20.970 --> 00:02:24.505
Is doing list that push instead
of making a new list and

40
00:02:24.505 --> 00:02:27.109
concatenated on to the end of the list.

41
00:02:27.109 --> 00:02:29.470
It's modifying list by reference.

42
00:02:29.470 --> 00:02:33.310
And that is definitely a bad idea
from the general perspective.

43
00:02:33.310 --> 00:02:36.798
But we're just gonna hold this for
one couple more steps and

44
00:02:36.798 --> 00:02:38.970
then it's not gonna matter, okay?

45
00:02:40.600 --> 00:02:42.380
Let's look at how we're
using that utility.

46
00:02:42.380 --> 00:02:44.688
Look at lines 8 and 14.

47
00:02:44.688 --> 00:02:46.494
On line 8 and line 14,

48
00:02:46.494 --> 00:02:52.260
we're just simply deferring to that list
combination function to do its work.

49
00:02:52.260 --> 00:02:57.640
We're simply passing a long list and
the value to push into it on line 8.

50
00:02:57.640 --> 00:02:58.974
And then on line 14,

51
00:02:58.974 --> 00:03:02.849
we are only calling list combination
if the if statement passed.

52
00:03:02.849 --> 00:03:07.702
But we're letting list combination handle
the details of deciding how to take

53
00:03:07.702 --> 00:03:10.360
an array and a value and
put them together.

54
00:03:12.567 --> 00:03:13.510
&gt;&gt; Kyle Simpson: Everybody with me?

55
00:03:15.277 --> 00:03:17.807
&gt;&gt; Kyle Simpson: So look down at
the bottom, lines 22 through 24,

56
00:03:17.807 --> 00:03:20.080
they haven't changed at all.

57
00:03:20.080 --> 00:03:25.075
All we've done now is factor out
that idea of taking an array,

58
00:03:25.075 --> 00:03:28.256
and a value and putting them together.

59
00:03:28.256 --> 00:03:31.310
We've factored that out as
a generic kind of reducer.

60
00:03:32.390 --> 00:03:37.820
Another one of those that would have never
occurred to me, where did that come from?

61
00:03:37.820 --> 00:03:43.250
Is that we could observe that even
though our reducers are hard coded to

62
00:03:43.250 --> 00:03:50.170
list combination, that's only one kind of
possible way that combination might occur.

63
00:03:52.097 --> 00:03:57.020
&gt;&gt; Kyle Simpson: We might want to
parameterize the combiner function.

64
00:03:57.020 --> 00:04:01.777
We might want to be able to provide
that combiner function as an argument.

65
00:04:05.550 --> 00:04:09.988
&gt;&gt; Kyle Simpson: So we're gonna do one
more step of obstruction which is to add

66
00:04:09.988 --> 00:04:15.036
one more layer of function wrapping
here where before we even provide

67
00:04:15.036 --> 00:04:20.710
the mapping function, we provide
the combiner to use in the reducer, okay?

68
00:04:20.710 --> 00:04:22.200
So, here's what that looks like.

69
00:04:23.620 --> 00:04:28.570
We have a map producer that is
expecting a mapping function and

70
00:04:28.570 --> 00:04:31.910
a combiner and I've done it with a curry.

71
00:04:31.910 --> 00:04:36.182
So look how the map producer
is expecting two inputs, but

72
00:04:36.182 --> 00:04:38.770
I've made it a curried function.

73
00:04:40.370 --> 00:04:43.465
&gt;&gt; Kyle Simpson: And look how filter
reducers is expecting a predicate and

74
00:04:43.465 --> 00:04:46.237
a combiner, but
I've made it a curried function,

75
00:04:46.237 --> 00:04:48.700
specifically it's waiting for two inputs.

76
00:04:49.720 --> 00:04:53.834
So look down on line 22,
you can see that add one,

77
00:04:53.834 --> 00:05:00.350
when I call map producer with add one it's
coming in as the first of these inputs.

78
00:05:00.350 --> 00:05:03.812
It's coming in as the input for
mapping function.

79
00:05:03.812 --> 00:05:05.961
And on line 23, when I say is odd,

80
00:05:05.961 --> 00:05:09.050
that one is going to come
in as predicate function.

81
00:05:10.218 --> 00:05:15.494
And map producer of add one is
returning us a new function,

82
00:05:15.494 --> 00:05:20.570
an intermediate function,
which is waiting for what?

83
00:05:20.570 --> 00:05:22.740
What are we going to pass to it?

84
00:05:24.813 --> 00:05:26.520
&gt;&gt; Kyle Simpson: We're gonna
pass to it a combiner.

85
00:05:26.520 --> 00:05:29.140
We're gonna pass to it a reducer.

86
00:05:29.140 --> 00:05:33.802
So map reducer with add one
has returned to us a high

87
00:05:33.802 --> 00:05:38.630
order reducer, a proto-reducer, right?

88
00:05:38.630 --> 00:05:43.535
It's a thing that will make a reducer if
provided a combiner, aka, another reducer.

89
00:05:43.535 --> 00:05:48.466
And the same is true with filter reducer
that when we pass in is odd we get

90
00:05:48.466 --> 00:05:53.569
back that intermittently function
that's waiting combine function,

91
00:05:53.569 --> 00:05:56.680
and then we pass in list combination for
it.

92
00:05:58.605 --> 00:06:00.380
&gt;&gt; Kyle Simpson: So
rather than having it hard coded,

93
00:06:00.380 --> 00:06:02.970
we've just now made it a thing
that we can pass along.

94
00:06:05.209 --> 00:06:10.380
&gt;&gt; Kyle Simpson: We still have
fundamentally three reduced cost, okay?

95
00:06:10.380 --> 00:06:12.839
I know it feels like when are we
ever gonna make progress, but

96
00:06:12.839 --> 00:06:14.440
it's very incremental here, right?

97
00:06:14.440 --> 00:06:17.970
I'm showing you each of
the steps of the thinking.

98
00:06:17.970 --> 00:06:21.460
And I couldn't even begin to show
you the mathematical steps, but

99
00:06:21.460 --> 00:06:25.713
I can at least kind of explain to you how
these programming steps are working out.

100
00:06:25.713 --> 00:06:30.137
How you might if potentially come
up with the idea that I would

101
00:06:30.137 --> 00:06:34.840
abstract out a generic detail
into something I pass in, right?

102
00:06:34.840 --> 00:06:36.933
We've done that kinda thing
in programming before, and

103
00:06:36.933 --> 00:06:38.640
that's essentially what is happening here.

104
00:06:38.640 --> 00:06:40.340
Did you have a question?

105
00:06:40.340 --> 00:06:44.249
&gt;&gt; Speaker 3: Yes,
we just wanted to ask about curry and

106
00:06:44.249 --> 00:06:47.385
why it was taking two arguments.

107
00:06:47.385 --> 00:06:51.837
&gt;&gt; Kyle Simpson: So curry needs to know
how many arguments it's expecting to wait

108
00:06:51.837 --> 00:06:57.120
for, cuz it can't always determine
how many arguments you are expecting.

109
00:06:57.120 --> 00:06:58.711
So by passing the number two,

110
00:06:58.711 --> 00:07:02.855
we're saying make me a function that's
gonna wait until it gets two inputs.

111
00:07:02.855 --> 00:07:06.194
If we say curry 9 we'd have a function
that would wait for nine inputs,

112
00:07:06.194 --> 00:07:07.285
does that make sense?

113
00:07:07.285 --> 00:07:07.899
&gt;&gt; Speaker 3: Yes.
&gt;&gt; Kyle Simpson: Yeah,

114
00:07:07.899 --> 00:07:09.479
good question, okay?

115
00:07:09.479 --> 00:07:14.403
So curry here is what's allowing
us to provide those separately.

116
00:07:14.403 --> 00:07:18.119
And that looks odd, you might say well
why don't I just, if I'm calling out one

117
00:07:18.119 --> 00:07:21.800
in least combination I can just
call it as a single function call.

118
00:07:21.800 --> 00:07:27.120
Why did we curry several times
earlier in our course together?.

119
00:07:27.120 --> 00:07:30.313
What was the real benefit
of doing currying?.

120
00:07:30.313 --> 00:07:31.829
Yes.
&gt;&gt; Speaker 4: To have a unitary type

121
00:07:31.829 --> 00:07:33.170
of function?

122
00:07:33.170 --> 00:07:35.240
&gt;&gt; Kyle Simpson: That's true,
we wanted a unitary type of function but

123
00:07:35.240 --> 00:07:36.640
what was that accomplishing for us.

124
00:07:36.640 --> 00:07:40.100
What was the whole section of
that discussion talking about?

125
00:07:40.100 --> 00:07:41.980
Why were we doing currying or
partial application?

126
00:07:41.980 --> 00:07:45.755
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle Simpson: To create specialization

127
00:07:45.755 --> 00:07:47.180
from generalization.

128
00:07:47.180 --> 00:07:52.018
So we could say that now producer that
takes two things is a more general

129
00:07:52.018 --> 00:07:53.640
function.

130
00:07:53.640 --> 00:07:57.579
And if I pass it the mapper or
if I pass it the predicate,

131
00:07:57.579 --> 00:08:01.189
it becomes a more specific
function doesn't it?

132
00:08:01.189 --> 00:08:05.734
One that only needs the combiner and
that more specific function, is this

133
00:08:05.734 --> 00:08:11.730
transducers thing that we've been talking
about this high order reducer, okay?

134
00:08:11.730 --> 00:08:16.611
So if we take a series of amounts,
or a series of filters and

135
00:08:16.611 --> 00:08:21.810
turn them into transducers,
that's essentially the goal.

136
00:08:21.810 --> 00:08:26.803
We wanna turn them into these higher
order inducers, that are waiting for

137
00:08:26.803 --> 00:08:30.199
something like list
combination to be passed in.

