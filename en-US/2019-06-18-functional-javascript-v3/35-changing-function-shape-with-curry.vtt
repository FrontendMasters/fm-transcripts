WEBVTT

1
00:00:00.130 --> 00:00:06.935
&gt;&gt; Kyle Simpson: All right,
remember the idea of, we did this

2
00:00:06.935 --> 00:00:12.130
add function before and remember this idea
of binary functions taking two inputs.

3
00:00:12.130 --> 00:00:17.030
What if I wanted to say, do a map corner,
we haven't talked about map but

4
00:00:17.030 --> 00:00:19.630
many of you are familiar with
the idea of map where it

5
00:00:19.630 --> 00:00:22.500
calls a function against
several different values.

6
00:00:22.500 --> 00:00:27.670
If I wanted to addOne to all of
the values in my list, I could take this

7
00:00:27.670 --> 00:00:33.190
addOne wrapper function and
call it pre specifying the number one

8
00:00:33.190 --> 00:00:38.440
line 4 pre specifying the number 1 as one
of the inputs to this general add utility.

9
00:00:38.440 --> 00:00:39.760
Why do I have to do it that way?

10
00:00:39.760 --> 00:00:42.600
Why couldn't I just pass add?

11
00:00:42.600 --> 00:00:44.670
As my mapper function.

12
00:00:44.670 --> 00:00:46.950
&gt;&gt; Speaker 2: You're calling
a function off of the array?

13
00:00:48.510 --> 00:00:51.950
&gt;&gt; Kyle Simpson: Right, map is gonna take
whatever function you provide to it and

14
00:00:51.950 --> 00:00:54.010
it's gonna call it with
each value in the race.

15
00:00:54.010 --> 00:00:56.630
So it's gonna call it five times here.

16
00:00:56.630 --> 00:00:59.020
But why would it not be appropriate for

17
00:00:59.020 --> 00:01:04.200
me to pass add on line 3 instead of this
function that I've called out addOne.

18
00:01:04.200 --> 00:01:05.450
Why couldn't I just pass an ad?

19
00:01:05.450 --> 00:01:07.620
&gt;&gt; Speaker 3: They have
a different number of arguments?

20
00:01:07.620 --> 00:01:08.680
&gt;&gt; Kyle Simpson: They
have a different shape.

21
00:01:08.680 --> 00:01:11.340
Do you see the shape?

22
00:01:11.340 --> 00:01:17.170
Add as a binary function, map or
functions, are expecting unary functions.

23
00:01:17.170 --> 00:01:20.980
A single value is getting passed in,
it's the wrong shape.

24
00:01:20.980 --> 00:01:22.721
So what are we doing with addOne here?

25
00:01:24.832 --> 00:01:28.000
&gt;&gt; Kyle Simpson: Fundamentally
we're changing the shape, right?

26
00:01:28.000 --> 00:01:29.500
And how are we changing the shape?

27
00:01:30.500 --> 00:01:32.480
By specializing it.

28
00:01:32.480 --> 00:01:35.590
By pre-specifying one of the inputs.

29
00:01:35.590 --> 00:01:37.490
In this case,
the first input to the number 1.

30
00:01:37.490 --> 00:01:41.740
So you can probably guess
where I'm going with this.

31
00:01:41.740 --> 00:01:45.020
It might be better to have
a curried version of add, so

32
00:01:45.020 --> 00:01:49.130
that I can call line ten add of one

33
00:01:49.130 --> 00:01:52.320
that makes my more specialized
function that is the correct shape.

34
00:01:54.530 --> 00:01:58.690
This is an extremely common
technique in functional programming.

35
00:01:58.690 --> 00:02:02.670
You will see this hundreds of times a day
when you get into functional programming.

36
00:02:02.670 --> 00:02:06.820
Calling these little functions that
are curried, providing one input.

37
00:02:06.820 --> 00:02:09.890
You get back a unary function and
you pass that into like a mapper or

38
00:02:09.890 --> 00:02:13.600
a composition or anything like that,
you will see this all over the place.

39
00:02:13.600 --> 00:02:17.970
And this is why currying ends up
being the far more preferred form

40
00:02:17.970 --> 00:02:20.220
because you could have done it
with partial application but

41
00:02:20.220 --> 00:02:21.829
it would have been a little
bit more awkward here.

42
00:02:22.870 --> 00:02:27.750
It's nice if the add function is just
automatically curried and anywhere that

43
00:02:27.750 --> 00:02:31.934
I need to make the specialized function,
I just call them, performing them.

44
00:02:34.250 --> 00:02:39.460
&gt;&gt; Speaker 4: Where is
the curry function defined?

45
00:02:39.460 --> 00:02:41.860
&gt;&gt; Kyle Simpson: It would be provided
by a functional programming library.

46
00:02:41.860 --> 00:02:43.350
I'm not showing the implementation of it,

47
00:02:43.350 --> 00:02:46.810
it's a little bit complex, I'm not
showing the implementation of curry.

48
00:02:46.810 --> 00:02:51.430
But it would be a functional
programming library's API,

49
00:02:51.430 --> 00:02:55.850
you call randodotcarrier,
r dot carrier I mean.

50
00:02:55.850 --> 00:03:02.200
&gt;&gt; Speaker 4: So what you're saying, is
that currying is often used to sometimes

51
00:03:03.610 --> 00:03:07.380
call a library that is already
available for the programmer?

52
00:03:08.550 --> 00:03:10.710
&gt;&gt; Kyle Simpson: I would
characterize it this way.

53
00:03:10.710 --> 00:03:14.840
So one used case for
currying is that specialization.

54
00:03:14.840 --> 00:03:19.110
But another offshoot of
the idea of specialization

55
00:03:19.110 --> 00:03:21.000
is that you're changing shape.

56
00:03:21.000 --> 00:03:23.760
And that means that in places where,
for example,

57
00:03:23.760 --> 00:03:27.800
I have a binary function that
I need a unary function.

58
00:03:27.800 --> 00:03:33.890
That a currying specialization is
sometimes the right tool for that job.

59
00:03:33.890 --> 00:03:37.743
So, currying allows you to take an
existing function that has one shape and

60
00:03:37.743 --> 00:03:41.170
specialize it, producing a new
function that is more specialized

61
00:03:41.170 --> 00:03:44.000
with a different shape and
has the shape that you want.

