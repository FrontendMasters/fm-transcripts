WEBVTT

1
00:00:00.230 --> 00:00:04.400
&gt;&gt; Kyle Simpson: Rx is a library that
has been ported to a bunch of different

2
00:00:04.400 --> 00:00:08.200
languages, originally written for
.NET but has been ported to JavaScript,

3
00:00:08.200 --> 00:00:12.446
has been ported to PHP and
Python, and Python and Scalar and

4
00:00:12.446 --> 00:00:16.070
a dozen other languages, and
it's a library for doing observables.

5
00:00:16.070 --> 00:00:18.560
Rx stands for reactive extensions,

6
00:00:18.560 --> 00:00:23.470
reactive programming that's this general
header that observables fall underneath.

7
00:00:23.470 --> 00:00:27.440
So, I'm only showing you
the briefest glimpse at observables.

8
00:00:27.440 --> 00:00:30.744
This course is not actually in scope
to teach you all about observables,

9
00:00:30.744 --> 00:00:34.250
that's a whole other course here
on Frontend Masters actually.

10
00:00:34.250 --> 00:00:39.180
But I just wanna show you how
we can do the functional concept

11
00:00:40.270 --> 00:00:43.030
with an observable, okay?

12
00:00:43.030 --> 00:00:48.578
So I'm gonna say,
Rx.subject that makes me an observable.

13
00:00:48.578 --> 00:00:53.474
And then I can call .next on a subject,
which is what I'm doing over time,

14
00:00:53.474 --> 00:00:57.130
I'm saying a.next, and
pushing a thing into it.

15
00:00:57.130 --> 00:01:05.680
And then somewhere else, I can get
a new observable out by calling a.map.

16
00:01:05.680 --> 00:01:09.060
And that new observable b,
I can subscribe to and

17
00:01:09.060 --> 00:01:13.320
it will be notified every time a new
value shows up in the b observable.

18
00:01:13.320 --> 00:01:17.420
This code is almost identical to
the lazy array that I just showed you.

19
00:01:19.310 --> 00:01:22.500
We've swapped in Rx.Subject for
lazy array, and

20
00:01:22.500 --> 00:01:26.830
we've swapped in a .subscribe for a but
conceptually it's the same thing.

21
00:01:28.120 --> 00:01:30.840
We have one stream of data that is

22
00:01:30.840 --> 00:01:33.950
getting values pushed in to it
.nexting into it over time,

23
00:01:33.950 --> 00:01:38.429
and we have another stream of values,
and those two streams are observables.

24
00:01:39.640 --> 00:01:44.211
And every time we call an operator
on an observable like .map,

25
00:01:44.211 --> 00:01:48.680
or .filter or .reduce or
any of literally 200 different

26
00:01:48.680 --> 00:01:53.140
operators that this API provides,
what do you get out on the other side?

27
00:01:54.140 --> 00:01:56.440
You get another observable.

28
00:01:56.440 --> 00:02:01.336
Just like with map you get another array,
or a monad.map you get another monad,

29
00:02:01.336 --> 00:02:05.010
when you do observable.map,
you get another observable.

30
00:02:06.620 --> 00:02:11.637
So it's these streams of data that
are declaratively flowing from

31
00:02:11.637 --> 00:02:16.923
one to the other, and in between them
are our Rx operators like .map or

32
00:02:16.923 --> 00:02:23.485
.filter or .distinct until changed or
any of the 200 other operators that exist.

33
00:02:26.101 --> 00:02:28.961
&gt;&gt; Kyle Simpson: So all of the things
that we've learned about with

34
00:02:28.961 --> 00:02:34.440
functional programming we first learned
to lift those things to a data structure.

35
00:02:34.440 --> 00:02:36.970
That's what our previous unit
of discussion was all about.

36
00:02:36.970 --> 00:02:39.460
How do we lift things to a data structure?

37
00:02:39.460 --> 00:02:45.110
Well, now let's lift things to
a time oriented data structure

38
00:02:45.110 --> 00:02:46.300
called an observable.

39
00:02:47.900 --> 00:02:49.310
Yes?
&gt;&gt; Student: Would you characterize this

40
00:02:49.310 --> 00:02:55.090
like kind of a functional version
of Pub/Sub kind of architecture?

41
00:02:55.090 --> 00:02:58.320
&gt;&gt; Kyle Simpson: It's a functional
version of event-oriented programming.

42
00:02:58.320 --> 00:03:01.250
I'm not sure I would necessarily go so
far as to say Pub/Sub

43
00:03:01.250 --> 00:03:05.720
because there's more semantics involved
with Pub/Sub, but it's definitely, I mean,

44
00:03:05.720 --> 00:03:10.800
the terms observable and stream and event
stream are almost used interchangably.

45
00:03:10.800 --> 00:03:15.730
They technically mean slightly different
things, but there's 98% overlap.

46
00:03:15.730 --> 00:03:20.700
If you say an observable or you say
an event stream, if you can think in event

47
00:03:20.700 --> 00:03:24.450
oriented programming, that's basically
what reactive programming is doing,

48
00:03:24.450 --> 00:03:27.400
it's reacting to an event coming through,
observing an event coming through.

49
00:03:27.400 --> 00:03:32.610
Observables are not the only way for

50
00:03:32.610 --> 00:03:36.680
you to adapt functional principles over
time, but I think they're one of the most

51
00:03:36.680 --> 00:03:40.550
compelling and certainly one of the most
natural extensions of what we've already

52
00:03:40.550 --> 00:03:44.700
learned because they have method names
like .map and .filter, and they use

53
00:03:44.700 --> 00:03:49.040
the ideas that we've already learned
about, and they extend them over time.

54
00:03:49.040 --> 00:03:52.250
So I think it's a good place to start
when trying to adapt your functional

55
00:03:52.250 --> 00:03:55.570
programming to the time
component of your applications.

