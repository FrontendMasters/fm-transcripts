WEBVTT

1
00:00:00.050 --> 00:00:02.938
&gt;&gt; Kyle Simpson: Our next operation
that we wanna look at, our next list or

2
00:00:02.938 --> 00:00:05.233
data structure operation is called filter.

3
00:00:05.233 --> 00:00:11.200
Now filter is often referred to as, or
thought of as an exclusionary activity.

4
00:00:12.310 --> 00:00:15.037
So let time explain it or
illustrate it in this way.

5
00:00:15.037 --> 00:00:17.972
How many of you have ever made spaghetti?

6
00:00:17.972 --> 00:00:19.644
Anybody?
In my house,

7
00:00:19.644 --> 00:00:25.380
the only meal that I cook
in my house is spaghetti.

8
00:00:25.380 --> 00:00:27.450
I can cook steaks and
other meat on the griller, but

9
00:00:27.450 --> 00:00:29.050
the only meal that I make is spaghetti.

10
00:00:29.050 --> 00:00:32.130
My wife does all the other cooking and
she's great at it.

11
00:00:32.130 --> 00:00:35.001
But I like to make spaghetti, and
I enjoy the process for some reason.

12
00:00:35.001 --> 00:00:36.389
And so in spaghetti,

13
00:00:36.389 --> 00:00:41.650
generally you have a big pot of boiling
water with your spaghetti noodles in it.

14
00:00:41.650 --> 00:00:45.781
And at some point when the noodles are
cooked, you have to pour out the water and

15
00:00:45.781 --> 00:00:47.230
keep the noodles, right?

16
00:00:47.230 --> 00:00:50.850
So what do you do, you take a strainer,
you take a filter.

17
00:00:50.850 --> 00:00:53.113
You hold it over the sink,
you pour everything in.

18
00:00:53.113 --> 00:00:58.660
And the water goes through, but the
noodles are caught in the strainer, okay?

19
00:00:58.660 --> 00:01:03.920
Now, if I were to describe that process
and ask you, would you be more naturally,

20
00:01:03.920 --> 00:01:09.256
or would you be more normally inclined to
describe that as filtering out the water,

21
00:01:09.256 --> 00:01:11.185
or filtering in the noodles?

22
00:01:14.300 --> 00:01:16.743
&gt;&gt; Kyle Simpson: And I don't know
what your particular answer is, but

23
00:01:16.743 --> 00:01:19.740
most of the time, I hear people say,
I would call it a filter out.

24
00:01:19.740 --> 00:01:24.166
I'm excluding the water, and
the noodles are what's left over, right?

25
00:01:24.166 --> 00:01:28.850
I'm not including the noodles in my set,
right?

26
00:01:28.850 --> 00:01:31.371
So we generally think of filtering
as an exclusionary activity.

27
00:01:31.371 --> 00:01:35.229
And in fact, almost every place that
you can think of metaphorically,

28
00:01:35.229 --> 00:01:38.185
or in the English language
when we use the word filter,

29
00:01:38.185 --> 00:01:41.160
we think about it in terms
of filtering something out.

30
00:01:42.520 --> 00:01:46.732
Which is exactly why as programmers,
we decided to actually implement

31
00:01:46.732 --> 00:01:50.396
Filter as an inclusion operation,
just to mess with people.

32
00:01:50.396 --> 00:01:53.990
Just to make it reverse so
that everybody gets confused.

33
00:01:53.990 --> 00:01:59.594
Because in Filter, as it applies to
programming, it's actually a filter in.

34
00:01:59.594 --> 00:02:02.277
And by that I mean when
you tell it whether or

35
00:02:02.277 --> 00:02:06.678
not you wanna keep something You return
True if you want to keep it, and

36
00:02:06.678 --> 00:02:09.600
you return False if you
don't want to keep it.

37
00:02:11.230 --> 00:02:15.295
So the true semantics sort of
implies that I'm filtering it in.

38
00:02:15.295 --> 00:02:18.695
If I went to the grocery store and
there was big old pile of apples and

39
00:02:18.695 --> 00:02:22.580
bananas they were all mixed together,
and all I wanted was the apples.

40
00:02:22.580 --> 00:02:25.886
And I had to sift through every single
fruit pulling out all the apples into my

41
00:02:25.886 --> 00:02:27.500
basket and leaving all the bananas.

42
00:02:27.500 --> 00:02:32.540
Would you describe that as filtering in
the apples or filtering out the bananas?

43
00:02:32.540 --> 00:02:37.255
Most people would say, I'm filtering out
the bananas, I only want the apples.

44
00:02:37.255 --> 00:02:40.450
If I had a list of numbers; 1, 2, 3, 4, 5,

45
00:02:40.450 --> 00:02:45.920
and I ended up with a list of numbers 1,
3, 5, that is the odd numbers.

46
00:02:45.920 --> 00:02:51.580
Would you say that I filtered in
the odds or did I filter out the evens?

47
00:02:51.580 --> 00:02:57.664
The problem is that we use this filter
word when in English we mean filter out,

48
00:02:57.664 --> 00:03:01.420
but in implementation, we mean filter in.

49
00:03:01.420 --> 00:03:03.754
And I don't know if any of you
all have ever had this, but

50
00:03:03.754 --> 00:03:06.050
I've had a bunch of bugs in
my programs over the years.

51
00:03:06.050 --> 00:03:09.588
What I was thinking filter out and
it was actually filter in, and my,

52
00:03:09.588 --> 00:03:12.510
essentially my Boolean logic was worse.

53
00:03:12.510 --> 00:03:15.351
So, I have taken to my own practice,

54
00:03:15.351 --> 00:03:19.033
I never use the method
named filter ever again.

55
00:03:19.033 --> 00:03:22.722
I don;t use filter,
I either call it filter in or filter out.

56
00:03:22.722 --> 00:03:25.670
Because I don't want to be
any confusion in the program.

57
00:03:25.670 --> 00:03:26.986
What am I doing at this point?

58
00:03:26.986 --> 00:03:30.290
Am I filtering in things or
am I filtering out things?

59
00:03:30.290 --> 00:03:33.629
I really wish we could just abolish
the word filter because there's this

60
00:03:33.629 --> 00:03:34.348
baggage here.

61
00:03:34.348 --> 00:03:36.130
So we're gonna build a filter in,

62
00:03:36.130 --> 00:03:40.820
because it's gonna work exactly like
the filter that's on the array prototype.

63
00:03:40.820 --> 00:03:43.222
A filter in method,
which takes a function,

64
00:03:43.222 --> 00:03:45.636
remember up there I
called that a predicate?

65
00:03:45.636 --> 00:03:47.526
Remember earlier in the course,

66
00:03:47.526 --> 00:03:51.540
rather that I called it a predicate
when a function returns a Boolean.

67
00:03:51.540 --> 00:03:56.162
If it returns a true false based upon
some value input it's called a predicate.

68
00:03:56.162 --> 00:03:59.578
So the way the filter works is it
loops through the list of values and

69
00:03:59.578 --> 00:04:01.750
it calls the predicate.

70
00:04:01.750 --> 00:04:05.732
And if the predicate returns true, it
includes it in the new list otherwise it

71
00:04:05.732 --> 00:04:08.260
just ignores it and
then we end up with a new list.

72
00:04:08.260 --> 00:04:10.010
So what's an example of us filtering?

73
00:04:10.010 --> 00:04:13.070
Well if I had a list of session objects,
and

74
00:04:13.070 --> 00:04:16.810
I wanted to figure out if any of those,
I mean sorry,

75
00:04:16.810 --> 00:04:22.200
a list of user objects and figure out
which of those users are logged in.

76
00:04:22.200 --> 00:04:24.450
Meaning which of those have
a session ID attached to them.

77
00:04:24.450 --> 00:04:26.450
Then I can use a filter in, and

78
00:04:26.450 --> 00:04:30.930
the filter in is logged in the function
the predicate up at the top It

79
00:04:30.930 --> 00:04:35.650
returns True if there is a session
property that's non on the object.

80
00:04:37.280 --> 00:04:40.541
So now I'm gonna end up with the list of
users that have a session object attached

81
00:04:40.541 --> 00:04:43.035
versus the ones that don't have
a session object attached.

82
00:04:45.938 --> 00:04:47.150
&gt;&gt; Kyle Simpson: That's filtering in.

83
00:04:47.150 --> 00:04:51.684
And we can do the exact same thing with
the built-in filter method on the array

84
00:04:51.684 --> 00:04:52.465
prototype.

85
00:04:52.465 --> 00:04:57.009
It does the same thing, it takes
a predicate function, it returns a new

86
00:04:57.009 --> 00:05:01.499
array with the values included for
which the predicate returns True.

87
00:05:04.239 --> 00:05:07.858
&gt;&gt; Kyle Simpson: So, the pattern matching
for how to decide is filter the operation

88
00:05:07.858 --> 00:05:11.019
that I want to do,
is when I have some collection of value,

89
00:05:11.019 --> 00:05:13.920
some data structure like an array or
an object.

90
00:05:13.920 --> 00:05:17.015
And I want to produce the same kind
of data structure, but I want some of

91
00:05:17.015 --> 00:05:20.385
the values to be included and potentially
some of the values to be excluded.

92
00:05:23.690 --> 00:05:26.011
&gt;&gt; Kyle Simpson: Whether you think
about that as a filter in or

93
00:05:26.011 --> 00:05:27.273
filter out is up to you.

94
00:05:27.273 --> 00:05:29.278
Hopefully your method
names are unambiguous so

95
00:05:29.278 --> 00:05:31.140
you're not gonna create bugs in your code.

96
00:05:32.450 --> 00:05:35.473
But the idea is I want to start
with one collection of values and

97
00:05:35.473 --> 00:05:37.579
end up with another collection of values.

98
00:05:37.579 --> 00:05:41.660
The values don't get changed at all,
that's what map does.

99
00:05:41.660 --> 00:05:42.980
So we're not picking new values here.

100
00:05:42.980 --> 00:05:46.590
We're just selecting values
based upon some predicate check.

