WEBVTT

1
00:00:00.100 --> 00:00:04.650
&gt;&gt; Kyle: Alright, let's talk about
the solution for this point free exercise.

2
00:00:04.650 --> 00:00:09.166
As you read in the readme,
hopefully you have three functions output,

3
00:00:09.166 --> 00:00:11.440
printIf and isLongEnough.

4
00:00:11.440 --> 00:00:13.040
Let's just go in that order.

5
00:00:13.040 --> 00:00:15.350
We'll start with the output function.

6
00:00:15.350 --> 00:00:19.170
Using our fancy technique
of equational reasoning,

7
00:00:19.170 --> 00:00:23.780
we can see that the output function,
which takes a single string.

8
00:00:23.780 --> 00:00:27.060
Has in this case a compatible
shape with the log function.

9
00:00:28.490 --> 00:00:34.430
Ostensibly it would seem that we could
just say output equals console.log and

10
00:00:34.430 --> 00:00:36.519
that should be our point free definition.

11
00:00:37.750 --> 00:00:41.700
There's one little hiccup depending upon
the JavaScript environment that you may be

12
00:00:41.700 --> 00:00:42.660
running in.

13
00:00:42.660 --> 00:00:47.100
Which is that the log method expects to
be called specifically against a bound

14
00:00:47.100 --> 00:00:48.030
object.

15
00:00:48.030 --> 00:00:52.831
And so if you're doing this indirect
assignment, you may need to do

16
00:00:52.831 --> 00:00:57.564
a hardbound version of it to
the console log to the console object.

17
00:01:01.205 --> 00:01:03.810
&gt;&gt; Kyle: So
that's a point free definition for output.

18
00:01:04.860 --> 00:01:07.170
Let's skip down to isLongEnough.

19
00:01:07.170 --> 00:01:11.420
Recall in our discussion we
talked about the not function,

20
00:01:11.420 --> 00:01:12.660
here's how that one looked.

21
00:01:12.660 --> 00:01:17.890
We said not, it takes in a function,
it returns back a function that's been,

22
00:01:17.890 --> 00:01:19.470
that we'll call negated.

23
00:01:19.470 --> 00:01:25.113
Which receives some arguments and
when those arguments have been received,

24
00:01:25.113 --> 00:01:31.294
it calls the original function with those
arguments but then it negates the result.

25
00:01:36.534 --> 00:01:41.779
&gt;&gt; Kyle: If we had that utility,
then isLongEnough

26
00:01:41.779 --> 00:01:46.149
should be expressed in point free as

27
00:01:46.149 --> 00:01:51.404
isLongEnough = not(isShortEnough);

28
00:01:59.820 --> 00:02:02.612
&gt;&gt; Kyle: And there's our point
free definition for isLongEnough.

29
00:02:06.924 --> 00:02:12.572
&gt;&gt; Kyle: Now the printIf function is going
to be slightly more complex to explain,

30
00:02:12.572 --> 00:02:15.250
but we need to go back to our hints.

31
00:02:15.250 --> 00:02:19.330
We talked about a utility which
you would be able to expect from

32
00:02:19.330 --> 00:02:21.630
many of your functional
programming libraries.

33
00:02:21.630 --> 00:02:26.770
This one is called when [COUGH] it's
referred to by different names but

34
00:02:26.770 --> 00:02:30.900
it is essentially
a functional if statement.

35
00:02:30.900 --> 00:02:36.390
It makes a decision to call a function
only if something else is true.

36
00:02:36.390 --> 00:02:40.900
So the function that we wanna
call is the first input, and then

37
00:02:40.900 --> 00:02:45.840
the test that we want to perform to see
if we should call it is the next input.

38
00:02:45.840 --> 00:02:49.930
And I've named that here predicate
because that is a special term for

39
00:02:49.930 --> 00:02:54.880
a function that is going to
return us a true false value.

40
00:02:54.880 --> 00:03:00.290
So predicates are functions generally
unary functions that return a true false.

41
00:03:00.290 --> 00:03:04.050
So we're going to have a predicate
function that performs our test.

42
00:03:04.050 --> 00:03:05.670
And if it passes,

43
00:03:05.670 --> 00:03:11.610
then we're gonna call the initial function
with the arguments that were passed in.

44
00:03:11.610 --> 00:03:14.840
It's kind of like an IF guard
around a function only call it

45
00:03:14.840 --> 00:03:17.500
if this other predicate passes true.

46
00:03:17.500 --> 00:03:19.810
So I have manually curried this,

47
00:03:21.010 --> 00:03:24.883
that's a technique that we'll talk about
later in the course this idea of currying.

48
00:03:24.883 --> 00:03:29.170
I've manually curried it to receive
these three inputs separately and

49
00:03:29.170 --> 00:03:31.380
if you look at the bottom of the EX,

50
00:03:31.380 --> 00:03:35.150
you'll see that kind of happening
the same with the printIf function.

51
00:03:35.150 --> 00:03:40.480
The way the printIf function was designed,
it also receives inputs separately.

52
00:03:40.480 --> 00:03:43.800
And that's gonna be a hint
towards our solution,

53
00:03:43.800 --> 00:03:45.820
we need to use some equational reasoning.

54
00:03:45.820 --> 00:03:48.320
So, I'm gonna switch to a separate file,
and

55
00:03:48.320 --> 00:03:50.320
we're gonna talk about
this equational reasoning.

56
00:03:50.320 --> 00:03:53.037
Let's start with the printIf function.

57
00:03:56.703 --> 00:03:59.955
&gt;&gt; Kyle: And then, let's start with,

58
00:03:59.955 --> 00:04:04.877
let me copy the when
function from our readme.

59
00:04:04.877 --> 00:04:07.540
We're gonna put these
alongside each other so

60
00:04:07.540 --> 00:04:10.590
that it's easier to see what's happening.

61
00:04:10.590 --> 00:04:15.588
You recall at the bottom that
we call printIf, for example,

62
00:04:15.588 --> 00:04:21.120
we call printIf, with isShortEnough and
then message one.

63
00:04:21.120 --> 00:04:23.880
How would we do it if we were
going to use the when utility?

64
00:04:23.880 --> 00:04:25.360
What would that look like?

65
00:04:25.360 --> 00:04:29.740
Well, we would call when, and
what do we need to pass to when?

66
00:04:29.740 --> 00:04:34.810
We need to pass it the function that
we want to execute if the predicate

67
00:04:34.810 --> 00:04:37.470
that we later pass,that passes.

68
00:04:37.470 --> 00:04:43.360
What do we want to have happen
in the case of it succeeding?

69
00:04:44.510 --> 00:04:47.420
We want to print it so
we need to use the output function.

70
00:04:48.890 --> 00:04:50.160
And then what would we call?

71
00:04:50.160 --> 00:04:53.450
Well, the next thing that's
needed is the predicate.

72
00:04:53.450 --> 00:04:54.396
What's our predicate?

73
00:04:54.396 --> 00:04:59.870
It's the, isShortEnough and

74
00:04:59.870 --> 00:05:03.310
then, what arguments need to be
passed along to isShortEnough?

75
00:05:05.200 --> 00:05:07.495
Message one.

76
00:05:07.495 --> 00:05:11.408
So, these two are going to
give the equivalent output.

77
00:05:13.216 --> 00:05:17.554
&gt;&gt; Kyle: Let's try to use our
equational reasoning skills to figure

78
00:05:17.554 --> 00:05:21.296
out what is the point free definition for
printIf?

79
00:05:21.296 --> 00:05:28.643
If I use some white space in here,
hopefully it becomes obvious to you.

80
00:05:28.643 --> 00:05:35.265
That when of output is returning
a function that has the same shape,

81
00:05:35.265 --> 00:05:40.386
the same kind of signature
as the printIf function.

82
00:05:40.386 --> 00:05:49.124
So our printIf point free
definition would be when about.

83
00:05:49.124 --> 00:05:52.007
He could have done that equational
reasoning at the call site the way I did

84
00:05:52.007 --> 00:05:53.580
that and that's the way I like to do it.

85
00:05:53.580 --> 00:05:56.060
The other way to do
the equational reasoning would

86
00:05:56.060 --> 00:05:58.740
have been to look at
the function signatures.

87
00:05:58.740 --> 00:06:03.660
To look at the fact that this function
takes what is essentially a predicate, and

88
00:06:03.660 --> 00:06:06.200
then some value to pass into it.

89
00:06:06.200 --> 00:06:09.020
And that looks the same
as this function and

90
00:06:09.020 --> 00:06:14.060
this function,
those two have the same generic shape.

91
00:06:14.060 --> 00:06:18.470
So then you would have been able to
see if I just call when with an fn,

92
00:06:18.470 --> 00:06:21.950
I get back a function that is
the same shape as printIf.

93
00:06:23.140 --> 00:06:25.720
That is the other way of applying
the equational reasoning.

94
00:06:27.460 --> 00:06:32.850
We take that back to our exercise file and

95
00:06:32.850 --> 00:06:35.710
printIf can be commented out.

96
00:06:37.620 --> 00:06:41.740
And here's our point free definition for
printIf.

97
00:06:41.740 --> 00:06:44.418
We can copy in the when as well just for
a good measure.

98
00:06:51.612 --> 00:06:55.743
&gt;&gt; Kyle: Collecting those three at the top
just to make sure that we see all of them.

99
00:07:10.616 --> 00:07:15.827
&gt;&gt; Kyle: And there is our solution for
this exercise on point free style.

