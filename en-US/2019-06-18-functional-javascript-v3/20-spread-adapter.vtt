WEBVTT

1
00:00:00.110 --> 00:00:02.630
&gt;&gt; Kyle Simpson: Another example of
shape adaptation that we commonly do,

2
00:00:02.630 --> 00:00:07.910
you will see this much more often
than may be obvious at this moment.

3
00:00:07.910 --> 00:00:13.960
One kind of shape adaptation is I have a
function that takes individual arguments,

4
00:00:13.960 --> 00:00:16.520
but I wanna call that
function with an array.

5
00:00:20.030 --> 00:00:23.110
It's expecting individual arguments,
but here I have an array.

6
00:00:23.110 --> 00:00:24.240
What do I do?

7
00:00:24.240 --> 00:00:27.850
How do I get all the contents of this
array into the individual arguments?

8
00:00:28.970 --> 00:00:32.560
Some of you may know about
JavaScript's .apply method,

9
00:00:32.560 --> 00:00:36.672
which just takes an array and
spreads the values out as arguments.

10
00:00:36.672 --> 00:00:40.126
And there's a reason why that
utility is called .apply,

11
00:00:40.126 --> 00:00:43.449
because that's what functional
programmers call it.

12
00:00:43.449 --> 00:00:46.804
When you take an array and
spread it out as individual arguments,

13
00:00:46.804 --> 00:00:48.150
that's called an apply.

14
00:00:48.150 --> 00:00:53.166
Here I've called it spreadArgs, just so
you knew exactly what it's doing.

15
00:00:53.166 --> 00:00:58.870
It's spreading the argument, the array
of arguments, out into individual ones.

16
00:00:58.870 --> 00:01:02.780
See how it does line three, the ...,
that's the spread operator.

17
00:01:02.780 --> 00:01:06.199
It is spreading out an array of
arguments into individual ones.

18
00:01:07.960 --> 00:01:11.830
But that's exactly what JavaScript's
.apply does, and it turns out the name for

19
00:01:11.830 --> 00:01:15.550
this utility, as you'll find it in almost
all functional programming libraries,

20
00:01:15.550 --> 00:01:17.080
is apply.

21
00:01:19.230 --> 00:01:23.252
So the apply, g is the apply of f.

22
00:01:23.252 --> 00:01:26.582
Line 11, it's the spread Args,
it i's the apply of f.

23
00:01:26.582 --> 00:01:30.350
So, when I call g with an array,
f gets individual arguments.

24
00:01:32.730 --> 00:01:33.370
Everybody follow me?

25
00:01:34.850 --> 00:01:36.062
Here is a little pop quiz.

26
00:01:36.062 --> 00:01:38.974
We're not gonna actually show this code
but I just want you to just play with this

27
00:01:38.974 --> 00:01:41.112
in your head, maybe type it in
your code for just a moment.

28
00:01:41.112 --> 00:01:43.572
This is a pop quiz.

29
00:01:43.572 --> 00:01:46.813
If spreadArgs is a function
that can take an array and

30
00:01:46.813 --> 00:01:50.954
spread it out onto individual ones,
what's the inverse of that?

31
00:01:50.954 --> 00:01:55.792
What would unspreadArgs look like?

32
00:01:55.792 --> 00:01:58.790
Unapply, what would that look like?

33
00:01:58.790 --> 00:02:02.462
I would be able to pass in
individual arguments, and

34
00:02:02.462 --> 00:02:05.724
the underlying function
would receive what?

35
00:02:05.724 --> 00:02:07.430
&gt;&gt; Speaker 2: An array.
&gt;&gt; Kyle Simpson: An array.

36
00:02:07.430 --> 00:02:10.350
Just think about that for just a moment,
we'll just take like 30 seconds.

37
00:02:10.350 --> 00:02:13.958
As the pop quiz, I want you to think
about, look at that spreadArgs and

38
00:02:13.958 --> 00:02:16.419
think how would I change
this to do the inverse?

39
00:02:18.541 --> 00:02:22.575
&gt;&gt; Kyle Simpson: It's not as complex
as you might have thought the ...,

40
00:02:22.575 --> 00:02:27.938
operator on line three, we simply need
to move it from line three to line two.

41
00:02:27.938 --> 00:02:31.869
We need to gather the arguments
from line two and

42
00:02:31.869 --> 00:02:36.880
pass them as a single array,
line three, that's it.

43
00:02:36.880 --> 00:02:41.090
That's the only difference between
a spreadArgs and a gatherArgs or

44
00:02:41.090 --> 00:02:45.650
an apply and an unapply,
is whether we gather first and

45
00:02:45.650 --> 00:02:50.140
then pass the array, or
take an array and then spread it.

46
00:02:51.480 --> 00:02:55.277
It's the only difference between the two,
and you'll find apply and

47
00:02:55.277 --> 00:02:58.895
unapply in all your favorite
functional programming libraries.

