WEBVTT

1
00:00:00.270 --> 00:00:03.360
&gt;&gt; Kyle Simpson: So you notice that
we have the same outcome with curry,

2
00:00:03.360 --> 00:00:05.850
as we had with a partial application.

3
00:00:05.850 --> 00:00:09.130
We just got there in
a decidedly different way.

4
00:00:09.130 --> 00:00:13.230
Same outcome, which is that I have
a general function ajax, an intermediately

5
00:00:13.230 --> 00:00:17.350
more specific function called getCustomer,
and an even more specific, getCurrentUser.

6
00:00:19.630 --> 00:00:23.010
But with partial application,
if you were to look a couple slides back,

7
00:00:23.010 --> 00:00:27.570
to get each level of the specialization,
I had to call the utility again.

8
00:00:29.680 --> 00:00:34.590
With currying, I call it once at
the beginning to set up my function, and

9
00:00:34.590 --> 00:00:37.900
then it automatically specializes
itself as I pass info.

10
00:00:40.060 --> 00:00:43.230
I think that's one of the reasons
why currying is more attractive,

11
00:00:43.230 --> 00:00:49.100
is it ends up being that you write
fewer calls to these utilities.

12
00:00:49.100 --> 00:00:54.010
You call it once to set up a function and
you just automatically can specialize it.

13
00:00:54.010 --> 00:00:55.350
As a matter of fact,

14
00:00:55.350 --> 00:01:00.260
virtually all functional programming
libraries that you will encounter.

15
00:01:00.260 --> 00:01:03.340
All of the methods on those

16
00:01:03.340 --> 00:01:06.670
functional libraries
are automatically already curried.

17
00:01:07.850 --> 00:01:10.880
Because it turns out, functional
programmers want everything to be curried.

18
00:01:12.040 --> 00:01:15.683
And if you remember what I said at the
very beginning when we were talking about

19
00:01:15.683 --> 00:01:19.554
shapes, one of the reasons why functional
programmers like curried functions is

20
00:01:19.554 --> 00:01:21.424
because they like unitary functions.

21
00:01:21.424 --> 00:01:23.626
Single input, another output, and

22
00:01:23.626 --> 00:01:27.090
you can see that a curried
function is exactly that.

23
00:01:27.090 --> 00:01:31.482
It is a chain series of unitary functions.

24
00:01:31.482 --> 00:01:34.133
Single input single output, single input
single output, single input single output.

25
00:01:37.613 --> 00:01:42.474
&gt;&gt; Kyle Simpson: So in another words, to
summarize this partial application versus

26
00:01:42.474 --> 00:01:48.360
currying thing, what we could say is that
they are accomplishing the same thing,

27
00:01:48.360 --> 00:01:51.360
but doing it in a different way.

28
00:01:51.360 --> 00:01:54.368
Both of them
are specialization techniques,

29
00:01:54.368 --> 00:01:59.547
partial application is going to preset
some of the arguments at the beginning.

30
00:01:59.547 --> 00:02:02.480
And then receive all the rest
of them on the next call.

31
00:02:02.480 --> 00:02:05.720
And if you wanna do multiple
steps of that specialization,

32
00:02:05.720 --> 00:02:08.420
you got to keep calling it, the utility.

33
00:02:08.420 --> 00:02:11.649
Currying on the other hand,
doesn't preset any of the arguments.

34
00:02:12.650 --> 00:02:15.031
And it receives each
argument one at a time.

35
00:02:18.362 --> 00:02:20.246
&gt;&gt; Kyle Simpson: If you ever get
asked on a future job interview,

36
00:02:20.246 --> 00:02:21.630
what's the difference?

37
00:02:21.630 --> 00:02:23.900
What's partial application incurring?

38
00:02:23.900 --> 00:02:27.940
The answer is, both of them specialize,
they do it differently.

39
00:02:27.940 --> 00:02:32.060
Partial application takes some input now,
all the rest of the input later.

40
00:02:32.060 --> 00:02:35.473
Currying takes no input now,
each input one at a time.

41
00:02:38.964 --> 00:02:41.119
&gt;&gt; Kyle Simpson: By the way,
I wanna back up real quick one slide,

42
00:02:41.119 --> 00:02:44.030
skipped over one thing I
didn't wanna skip over.

43
00:02:44.030 --> 00:02:49.290
There is this notion of what I would call,
strict versus loose currying.

44
00:02:49.290 --> 00:02:51.770
And I'm calling this out because
you're gonna encounter this and

45
00:02:51.770 --> 00:02:53.930
you may ask yourself.

46
00:02:53.930 --> 00:02:58.501
This idea that I've been showing you
recurring has been like we see online

47
00:02:58.501 --> 00:03:03.230
seven, which is that each time I call
the function I provide only one input.

48
00:03:03.230 --> 00:03:07.329
Cuz that's how we did it when we manually
curried, that's how it works in Haskell,

49
00:03:07.329 --> 00:03:09.460
you provide one input at a time.

50
00:03:09.460 --> 00:03:13.980
I would call that the canonical or
strict interpretation of currying.

51
00:03:13.980 --> 00:03:18.719
But if you had a function, say something
that received five inputs, and

52
00:03:18.719 --> 00:03:23.938
you knew three of them right now, and you
wanted to wait to define the other two.

53
00:03:23.938 --> 00:03:26.941
You can see there would be a little bit
annoying to have to do three separate

54
00:03:26.941 --> 00:03:29.750
function calls with three
separate parentheses.

55
00:03:29.750 --> 00:03:31.070
It might be much more convenient,

56
00:03:31.070 --> 00:03:35.570
like line 10, to just be able to
provide two inputs all in one call.

57
00:03:36.610 --> 00:03:38.700
You see where I'm coming from?

58
00:03:38.700 --> 00:03:43.960
So, that technique is what I
would refer to as loose currying.

59
00:03:43.960 --> 00:03:48.700
Meaning, at each level of the function
call, you can pass in one or

60
00:03:48.700 --> 00:03:50.410
more arguments.

61
00:03:50.410 --> 00:03:52.970
And the function you
get back is waiting for

62
00:03:52.970 --> 00:03:57.020
whatever the next arguments should be,
you with me?

63
00:03:57.020 --> 00:04:00.730
The reason why it's important to
point out loose currying is because,

64
00:04:00.730 --> 00:04:05.310
as far as I'm aware, every JavaScript
functional programming library that I have

65
00:04:05.310 --> 00:04:09.590
seen does loose currying,
not strict currying.

66
00:04:11.520 --> 00:04:16.930
But if you're really trying to adhere to
the true notion of what currying was,

67
00:04:16.930 --> 00:04:21.400
as it was conceived in Haskell,
you'd be doing strict currying.

68
00:04:21.400 --> 00:04:26.380
I think the reason why those libraries
chose the loose carrying form is for

69
00:04:26.380 --> 00:04:29.920
convenience only,
not because it's the more,

70
00:04:29.920 --> 00:04:31.950
economically correct way of doing it.

71
00:04:31.950 --> 00:04:35.816
So, just be aware when you see something
like line 10 where multiple inputs

72
00:04:35.816 --> 00:04:38.324
are being passed,
that still might be currying.

73
00:04:38.324 --> 00:04:41.460
It might just be loose currying instead.

74
00:04:41.460 --> 00:04:47.331
&gt;&gt; Student: Why does partial application
still exist in functional programming?

75
00:04:47.331 --> 00:04:49.240
&gt;&gt; Kyle Simpson: That's a good question.

76
00:04:49.240 --> 00:04:52.724
So the question is,
if currying is generally preferred, and

77
00:04:52.724 --> 00:04:56.746
you will find that it usually is,
why even have a partial application?

78
00:04:56.746 --> 00:05:00.822
The best answer I can give you, I mean,
other than the fact that it's sort of

79
00:05:00.822 --> 00:05:04.339
historical and when something is
in the economical body of work.

80
00:05:04.339 --> 00:05:08.561
It's never gonna get removed, other
than that I would say, there are some

81
00:05:08.561 --> 00:05:13.420
cases where it'd be more convenient to
do partial application than currying.

82
00:05:13.420 --> 00:05:18.510
For example, let's say you have a function
that starts out expecting five inputs.

83
00:05:18.510 --> 00:05:23.042
And you want to produce another
function that expects three inputs,

84
00:05:23.042 --> 00:05:25.630
you wanna preset only two of them.

85
00:05:25.630 --> 00:05:28.090
If you were to curry it,
two things would be true.

86
00:05:28.090 --> 00:05:31.092
First of all, you'd have to call it
twice and that's a little annoying.

87
00:05:31.092 --> 00:05:35.323
But secondly, the function you'd get
back would not be a function that was

88
00:05:35.323 --> 00:05:40.070
expecting three inputs, it would be
occurred function of three more chains.

89
00:05:40.070 --> 00:05:43.870
And that might not be the shape of
function that you wanna pass around.

90
00:05:43.870 --> 00:05:48.630
So it might be the case that
the partial application produces a more

91
00:05:48.630 --> 00:05:52.920
preferable shape,
that's not gonna be common.

92
00:05:52.920 --> 00:05:57.330
But that's why it might still exist is
that, sometimes that tool might produce

93
00:05:57.330 --> 00:06:00.431
a function shape that is more
preferable than a currying function.

