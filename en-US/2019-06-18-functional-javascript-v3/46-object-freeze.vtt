WEBVTT

1
00:00:00.070 --> 00:00:01.580
&gt;&gt; Kyle Simpson: So what do we need?

2
00:00:01.580 --> 00:00:05.300
Your instinct might be to say because
we're talking about immutability, aha!

3
00:00:05.300 --> 00:00:07.400
We need an immutable data structure.

4
00:00:07.400 --> 00:00:07.900
No, we don't.

5
00:00:09.270 --> 00:00:12.470
Because what we need right now is,

6
00:00:12.470 --> 00:00:17.780
we just need to say that
this value is read only.

7
00:00:18.940 --> 00:00:22.800
And that is a different sort
of a claim then asking for

8
00:00:22.800 --> 00:00:25.070
it to be an immutable data structure.

9
00:00:25.070 --> 00:00:27.760
And I know that seems counterintuitive,
but hang with me because we're gonna talk

10
00:00:27.760 --> 00:00:30.130
about what immutable data
structures are about.

11
00:00:30.130 --> 00:00:34.270
And I'm gonna say,
right now we're focused only on the claim.

12
00:00:34.270 --> 00:00:36.719
Could I say that this thing is read only?

13
00:00:37.730 --> 00:00:40.218
That it can not be mutated in any way,

14
00:00:40.218 --> 00:00:44.530
because I think a lot of times when people
think, I guess I need a mutable data

15
00:00:44.530 --> 00:00:48.640
structure, actually what they need
is just a read only data structure.

16
00:00:50.620 --> 00:00:54.840
A data structure that can be read,
but can not be written to and

17
00:00:54.840 --> 00:00:57.190
those are different than
immutable data structures.

18
00:00:57.190 --> 00:01:02.566
So it turns out, it's built into
the language there is a way to have

19
00:01:02.566 --> 00:01:08.806
a read only data structure pretty simple
and that is to call Object.freeze.

20
00:01:08.806 --> 00:01:13.794
Object.freeze as you see on line 11 is
telling that object you should change all

21
00:01:13.794 --> 00:01:17.407
of your properties to have
the read only attribute on them so

22
00:01:17.407 --> 00:01:19.700
that none of them can be changed.

23
00:01:19.700 --> 00:01:23.570
The object can't have properties added,
it can't have properties deleted.

24
00:01:23.570 --> 00:01:26.740
It is, however, only shallow,
so be aware that if you have

25
00:01:26.740 --> 00:01:31.060
nested objects of nested objects of nested
objects of arrays you would have to

26
00:01:31.060 --> 00:01:35.540
freeze each one of those levels to
get that same level of guarantee.

27
00:01:35.540 --> 00:01:39.280
But in our simple case, where we
have a simple, single layer object.

28
00:01:39.280 --> 00:01:44.900
A simple call to Object.freeze
gives us the guarantee.

29
00:01:44.900 --> 00:01:49.250
But I'm actually going to make
a slightly even different claim.

30
00:01:50.460 --> 00:01:56.150
I literally don't care if Object.freeze
actually does what it's supposed to do.

31
00:01:58.330 --> 00:02:01.660
I mean it can be like
an empty [INAUDIBLE].

32
00:02:01.660 --> 00:02:05.490
The real point is that I am
communicating something to the reader of

33
00:02:05.490 --> 00:02:06.340
the code at this point.

34
00:02:08.040 --> 00:02:12.450
It is less important to me that
it actually be read only, and

35
00:02:12.450 --> 00:02:16.340
more important to me that
the reader be able to know,

36
00:02:16.340 --> 00:02:19.429
I am saying you don't have to
worry about this thing changing.

37
00:02:20.690 --> 00:02:21.210
As a matter of fact,

38
00:02:21.210 --> 00:02:24.380
it'd be nice if the language gave us
some sort of syntactic facility for

39
00:02:24.380 --> 00:02:29.070
that, maybe an operator when we make
an object or when we pass it or something.

40
00:02:29.070 --> 00:02:32.980
They're not ever going to
probably add something like this.

41
00:02:32.980 --> 00:02:34.190
But, you know, harebrained idea, but

42
00:02:34.190 --> 00:02:37.960
it'd be nice if there was even a lighter
weight way than saying Object.freeze.

43
00:02:37.960 --> 00:02:41.280
But basically what I want is
an annotation that tells the reader,

44
00:02:43.010 --> 00:02:46.960
you don't have to worry,
it's not gonna be modified.

45
00:02:46.960 --> 00:02:47.610
It's read only.

46
00:02:48.750 --> 00:02:51.680
You don't have to worry about it being
mutated in some way that you don't expect.

47
00:02:52.900 --> 00:02:56.520
Another good part is that object freeze
does actually do what it's supposed to do.

48
00:02:56.520 --> 00:02:59.440
So it gives us not only the signal to it,
but

49
00:02:59.440 --> 00:03:01.880
it enforces it from a runtime perspective.

50
00:03:01.880 --> 00:03:04.837
That if process order where to try
to do something that it shouldn't,

51
00:03:04.837 --> 00:03:08.870
the whole program's gonna blow up and
an exception is gonna be thrown.

52
00:03:08.870 --> 00:03:11.980
Now, the reason why I say I don't
actually care about that part is,

53
00:03:11.980 --> 00:03:16.730
because it is vanishingly rare,
that something like that,

54
00:03:16.730 --> 00:03:21.340
like trying to reassign to a property
that was actually said is read-only.

55
00:03:21.340 --> 00:03:25.030
It's rare that,
that's been wrapped in some try-catch and

56
00:03:25.030 --> 00:03:29.280
gracefully surfaced to the user as a,
oops, something went wrong.

57
00:03:29.280 --> 00:03:34.650
Because if that occurs, if you pass in
a read only data structure to process

58
00:03:34.650 --> 00:03:39.682
order and process order is in the habit
of wanting to mutate the thing,

59
00:03:39.682 --> 00:03:43.971
then you have a fatal,
unrecoverable bug in your program.

60
00:03:46.500 --> 00:03:49.672
&gt;&gt; Kyle Simpson: It's the kind of thing
that we'd like a linter to catch for

61
00:03:49.672 --> 00:03:53.752
us and maybe depending on what kind of,
you know, programming language or

62
00:03:53.752 --> 00:03:56.731
if you're using a type script or
something like that,

63
00:03:56.731 --> 00:04:01.213
maybe you can get linter static checker
to sort of tell you, about that problem.

64
00:04:01.213 --> 00:04:06.480
But, if it passed in, as a read only, and
then process order tried to catch it,

65
00:04:06.480 --> 00:04:08.650
that's gonna create a fatal
error condition and

66
00:04:08.650 --> 00:04:10.630
you the developer gonna fix it.

67
00:04:10.630 --> 00:04:14.210
What I'm really concerned about is when
we don't have those fatal errors, but

68
00:04:14.210 --> 00:04:17.550
we have those subtle crappy bugs that
are really, really hard to debug.

69
00:04:17.550 --> 00:04:19.160
The user's still able to check out but

70
00:04:19.160 --> 00:04:22.230
it charged them $1 extra on
the order than it should have.

71
00:04:22.230 --> 00:04:25.300
And nobody can figure out where
that extra dollar came from.

72
00:04:25.300 --> 00:04:27.670
Those are the terrible bugs, aren't they?

73
00:04:27.670 --> 00:04:31.300
They're the ones where there wasn't
a fatal crash but it was still a bug and

74
00:04:31.300 --> 00:04:33.360
it's really hard to reproduce
the conditions for that.

75
00:04:35.210 --> 00:04:38.110
And one of the ways that we avoid
those sorts of things is by telling

76
00:04:38.110 --> 00:04:41.340
the reader of this code or at least,
whether we avoid the bug or not,

77
00:04:41.340 --> 00:04:45.900
at least make it easier to diagnose, as we
tell the reader, you don't have to worry,

78
00:04:45.900 --> 00:04:48.890
the object didn't change at this point,
it's not gonna change.

