WEBVTT

1
00:00:00.070 --> 00:00:03.800
&gt;&gt; Kyle Simpson: There are certainly
more advanced techniques.

2
00:00:03.800 --> 00:00:05.130
And I wanna give you just a couple,

3
00:00:05.130 --> 00:00:07.560
this is just a quick glimpse
at a couple of these.

4
00:00:07.560 --> 00:00:11.160
And we're gonna come back to them later
in both lecture and exercise, okay?

5
00:00:13.390 --> 00:00:17.560
So if I defined a couple of utilities,
and by the way, I'm not inventing these,

6
00:00:17.560 --> 00:00:20.710
these are ones that you would find
in a functional programming library.

7
00:00:20.710 --> 00:00:26.880
But let's define one called mod,
it's going to do modulus operation.

8
00:00:26.880 --> 00:00:29.830
It's doing something which might
seem a little bit strange to you.

9
00:00:29.830 --> 00:00:33.700
I'm taking the first input mod on line 1,
and taking y.

10
00:00:35.090 --> 00:00:39.270
And then I'm returning a new
function called for x.

11
00:00:39.270 --> 00:00:43.930
In other words, that function's
purpose is to receive the x input.

12
00:00:43.930 --> 00:00:47.260
That's why I called it for x, okay?

13
00:00:47.260 --> 00:00:51.710
And when that has been provided, when we
have provided a y first and then an x,

14
00:00:51.710 --> 00:00:56.450
those are two separate function calls
where we provide two inputs one at a time.

15
00:00:56.450 --> 00:00:59.790
Then what happens, is it does x mod y.

16
00:00:59.790 --> 00:01:02.240
So, we're providing them
in a reverse order.

17
00:01:03.470 --> 00:01:05.060
That's gonna feel a little strange to you,
but

18
00:01:05.060 --> 00:01:07.540
I'll show you in just a moment
why we're gonna do that.

19
00:01:07.540 --> 00:01:11.772
And then I'm going to do the same
thing with an eq operator.

20
00:01:11.772 --> 00:01:15.305
An eq utility which takes a y and
it takes an x, and

21
00:01:15.305 --> 00:01:19.460
then it returns us the equality
comparison of those two.

22
00:01:21.130 --> 00:01:24.860
These two kinds of utilities, which take
their inputs individually, rather than

23
00:01:24.860 --> 00:01:29.610
passing x, y at the same time, taking
them in two separate function calls.

24
00:01:29.610 --> 00:01:33.040
We already saw a brief example of that,
and the question that was asked earlier,

25
00:01:33.040 --> 00:01:34.880
is this sort of currying?

26
00:01:34.880 --> 00:01:38.980
Yes, this is basically a manual form
of currying, we'll get to that.

27
00:01:40.122 --> 00:01:43.663
But I'm saying I want the y
input first and then the x.

28
00:01:43.663 --> 00:01:46.200
And I want to make a point
about that before we move on.

29
00:01:46.200 --> 00:01:47.398
Remember that I said earlier,

30
00:01:47.398 --> 00:01:52.540
functional programmers care a lot
about the shape of their functions.

31
00:01:52.540 --> 00:01:57.130
It matters not just what kinds of
inputs a function receives, but

32
00:01:57.130 --> 00:01:58.220
what order they're listed in.

33
00:01:59.570 --> 00:02:01.570
Because if you list them
in a different order,

34
00:02:01.570 --> 00:02:04.500
guess what people are gonna have to
do to use your function every time?

35
00:02:04.500 --> 00:02:07.960
Flip it, or use reverse orgs or something.

36
00:02:07.960 --> 00:02:11.140
You make it less
ergonomically friendly to use

37
00:02:11.140 --> 00:02:14.460
when the inputs are listed
in an unnatural order.

38
00:02:14.460 --> 00:02:15.480
So it matters what order.

39
00:02:15.480 --> 00:02:18.120
And what you're going to
see here is actually,

40
00:02:18.120 --> 00:02:23.170
there's an order that is much more
natural, which is yx instead of xy,

41
00:02:24.290 --> 00:02:28.660
and yx instead of xy for
the equals function as well.

42
00:02:28.660 --> 00:02:30.910
So that's why I've listed them
in that particular order.

43
00:02:30.910 --> 00:02:35.220
Okay, so let's take a look at
how we can use this mod and

44
00:02:35.220 --> 00:02:39.500
this eq function to define.

45
00:02:39.500 --> 00:02:43.020
Remember we defined is
even in terms of as odd.

46
00:02:43.020 --> 00:02:48.410
But what if we wanted to define
is odd in a point free way.

47
00:02:48.410 --> 00:02:52.930
Remember, is odd was
defined as x mod 2 = 1.

48
00:02:52.930 --> 00:02:55.970
If we had these two utilities in play,

49
00:02:57.040 --> 00:03:03.030
couldn't we define is odd in
terms of those two functions?

50
00:03:03.030 --> 00:03:10.170
So, I'm gonna take mod2, mod(2), that's
gonna return me back a function, right?

51
00:03:11.290 --> 00:03:15.861
Where the y has been provided, but
the x still needs to be provided.

52
00:03:15.861 --> 00:03:18.732
And I'm gonna call that function mod2,

53
00:03:18.732 --> 00:03:23.500
because that function takes any input and
mods it with the number 2.

54
00:03:23.500 --> 00:03:28.450
And then I'm gonna call eq(1) line 13.

55
00:03:28.450 --> 00:03:34.450
And that makes an eq1 function,
whose job is to take any input value and

56
00:03:34.450 --> 00:03:37.861
compare it to the value 1 is equal to 1.

57
00:03:40.494 --> 00:03:43.146
&gt;&gt; Kyle Simpson: Quick little
foreshadowing to stuff we're gonna talk

58
00:03:43.146 --> 00:03:44.300
about earlier.

59
00:03:44.300 --> 00:03:49.050
Do you see that the mod2
function on line 12 is

60
00:03:49.050 --> 00:03:53.930
more specific than the general
mod to function on line 1?

61
00:03:53.930 --> 00:03:57.322
The general mod function
on line 1 takes two inputs,

62
00:03:57.322 --> 00:04:02.380
the mod2 function on line
12 only takes one input.

63
00:04:02.380 --> 00:04:04.580
Cuz it's got one of them
already prespecified.

64
00:04:06.480 --> 00:04:08.255
That's a more specialized function,

65
00:04:08.255 --> 00:04:10.920
we'll come back to the idea of
specialization later, okay?

66
00:04:10.920 --> 00:04:16.082
But I've got a mod 2 an eq1, how can I
define is odd in terms of those functions?

67
00:04:16.082 --> 00:04:17.408
Well, it's actually
pretty straightforward.

68
00:04:17.408 --> 00:04:24.771
Take the mod2 and pass in the X, and
whatever that returns, pass it into eq1.

69
00:04:28.491 --> 00:04:29.410
&gt;&gt; Kyle Simpson: You
follow how I did that?

70
00:04:31.250 --> 00:04:36.756
Now, that's not point free yet,
but we've made a lot of

71
00:04:36.756 --> 00:04:42.060
progress moving from
operators to functions, okay?

72
00:04:42.060 --> 00:04:43.350
So we're halfway there.

73
00:04:43.350 --> 00:04:46.624
If we want a point free definition
of is odd, this is halfway there.

74
00:04:46.624 --> 00:04:51.494
We notice that we have this eq1 and this
mod2, they're useful to us and we can make

75
00:04:51.494 --> 00:04:56.620
those with the mod and eq operators that
are provided by our favorite library.

76
00:04:56.620 --> 00:04:59.620
But we can also notice something
interesting and this is yet

77
00:04:59.620 --> 00:05:04.090
another future thing that we'll
talk about later in this course,

78
00:05:04.090 --> 00:05:09.626
which is the output of the mod2 call
is passed directly to the eq1 call.

79
00:05:10.660 --> 00:05:11.260
Everybody see that?

80
00:05:12.900 --> 00:05:17.230
That concept of having one
function call's output

81
00:05:17.230 --> 00:05:20.080
immediately become the input
to another function.

82
00:05:20.080 --> 00:05:23.660
That is a special name in programming,
that's called composition.

83
00:05:25.494 --> 00:05:29.030
Again, throwback to a math class, you
may have heard somewhere, like fs of g,

84
00:05:29.030 --> 00:05:31.390
or f compose g.

85
00:05:31.390 --> 00:05:35.900
That's all a mathematical idea,
and here we see it in programming.

86
00:05:35.900 --> 00:05:39.500
Take one function's output, and
make the input to another function.

87
00:05:41.300 --> 00:05:46.060
So how can I use the idea that
this is a composition pattern

88
00:05:46.060 --> 00:05:49.290
to my advantage to make
a point free definition?

89
00:05:49.290 --> 00:05:53.580
Well, if I had a compose utility,
here's my is odd,

90
00:05:53.580 --> 00:05:57.510
if I had a compose utility,
whose job was to

91
00:05:57.510 --> 00:06:02.070
do the routing of one functions
output into another functions input.

92
00:06:03.200 --> 00:06:08.577
Now line 14, I just defined is odd
as the composition of the eq1 and

93
00:06:08.577 --> 00:06:10.260
the mod2 function.

94
00:06:14.460 --> 00:06:18.744
Line 14 is my point free definition for
is odd.

95
00:06:18.744 --> 00:06:22.723
It's doing under the covers, mod2 is fn1,

96
00:06:22.723 --> 00:06:28.860
which is called with whatever value
passing to it, that's line 10.

97
00:06:28.860 --> 00:06:33.110
So mod2 here is this function.

98
00:06:33.110 --> 00:06:37.249
And if we pass in a value into is odd,
it will come in to mod2.

99
00:06:37.249 --> 00:06:42.065
Whatever that output is would
come into fn2, which is eq1, and

100
00:06:42.065 --> 00:06:48.830
eq1 is going to return us a true false
just like we want is odd to return, okay?

101
00:06:48.830 --> 00:06:52.240
How am I able to make that analysis?

102
00:06:52.240 --> 00:06:57.279
This is more equational reasoning,
that the function composed here

103
00:06:58.600 --> 00:07:01.080
is the same shape as is odd, isn't it?

104
00:07:02.250 --> 00:07:05.800
Look at those two,
look at composed with an fn1 and

105
00:07:05.800 --> 00:07:09.685
an fn2 and
look at is odd with an fn1 and an fn2.

106
00:07:09.685 --> 00:07:12.915
Look at the input x, look at the input v,

107
00:07:12.915 --> 00:07:16.920
look at the return value and
the return value.

108
00:07:16.920 --> 00:07:19.010
Those two are interchangeable,

109
00:07:19.010 --> 00:07:23.990
which is what lets me know that line
14 is my point free definition.

110
00:07:23.990 --> 00:07:27.676
I simply call compose, and
I get back the equivalent function,

111
00:07:27.676 --> 00:07:30.310
that's the equational reasoning.

112
00:07:30.310 --> 00:07:35.413
And we have one last equational reasoning
trick up our sleeve, which is on

113
00:07:35.413 --> 00:07:40.950
line 1 and line 2, I defined those
intermediary functions mod2, and eq1.

114
00:07:42.326 --> 00:07:49.360
&gt;&gt; Kyle Simpson: But now I can see
that eq1 could be replaced with eq(1).

115
00:07:49.360 --> 00:07:53.409
And mod2 could be replace with mod(2).

116
00:07:54.750 --> 00:08:00.150
So my final point free
definition looks like line 16.

117
00:08:00.150 --> 00:08:04.514
Those pieces are interchangeable
because they have the same shape.

118
00:08:04.514 --> 00:08:06.829
That's equational reasoning, and

119
00:08:06.829 --> 00:08:11.315
equational reasoning is the heart of
being able to do point freestyle.

120
00:08:11.315 --> 00:08:14.195
It's actually the heart of a bunch
of functional programming,

121
00:08:14.195 --> 00:08:15.750
but especially point freestyle.

122
00:08:15.750 --> 00:08:20.142
Asking yourself if I have this function
and I need to make this function,

123
00:08:20.142 --> 00:08:24.683
what kind of shape change needs to
occur so that they are interchangeable?

124
00:08:28.597 --> 00:08:31.619
&gt;&gt; Kyle Simpson: I'm pretty sure that at
some point along the way we crossed that

125
00:08:31.619 --> 00:08:35.200
line, for all of you were like,
I never would have come up with that.

126
00:08:35.200 --> 00:08:36.620
At least that's how I was.

127
00:08:36.620 --> 00:08:40.270
When I first saw this, I was like, woah,
we just went way beyond what I thought

128
00:08:40.270 --> 00:08:42.888
was, like, I'm tracking with
the readability and now I'm lost.

129
00:08:42.888 --> 00:08:46.679
And now I will just tell you that
having spent time practicing this, and

130
00:08:46.679 --> 00:08:50.280
I'm fortunate enough that as a teacher,
I get to re-explain it and

131
00:08:50.280 --> 00:08:55.234
re-show it, and re-code it over, and over,
and over, again, and that's my practice.

132
00:08:55.234 --> 00:08:58.045
But in being able to practice this,

133
00:08:58.045 --> 00:09:01.980
I will tell you that not
only can I read line 16 and

134
00:09:01.980 --> 00:09:06.870
understand it, line 16 is more
readable to me than line 5.

135
00:09:06.870 --> 00:09:11.610
I've gotten to the point where that
familiarity level has switched

136
00:09:11.610 --> 00:09:15.670
to where the point free functional
style is actually more readable to me.

137
00:09:15.670 --> 00:09:19.200
And whenever I see something like line 5,
immediately my brain says that's

138
00:09:19.200 --> 00:09:21.250
a composition,
you should be using compose there.

139
00:09:22.620 --> 00:09:24.060
I didn't get there overnight.

140
00:09:24.060 --> 00:09:26.670
It didn't happen in a week,
it didn't happen in a month.

141
00:09:26.670 --> 00:09:30.710
But over a period of time of practicing
these techniques, you become more familiar

142
00:09:30.710 --> 00:09:34.360
with those patterns and they sort of jump
out at you just like you see the Legos in

143
00:09:34.360 --> 00:09:38.460
the pile, and you say no,
I know exactly what Legos I need.

144
00:09:38.460 --> 00:09:42.210
That's the heart of being
a functional programmer,

145
00:09:42.210 --> 00:09:45.100
is getting used to that being
able to recognize that, and

146
00:09:45.100 --> 00:09:49.410
then being able to read a lot stuff like
line 16 and have it make complete sense.

