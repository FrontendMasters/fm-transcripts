WEBVTT

1
00:00:00.040 --> 00:00:02.660
&gt;&gt; Kyle: How many of you have heard
the term side effects before?

2
00:00:02.660 --> 00:00:07.560
Okay, so what we're getting at, what we're
scratching at here is that in functional

3
00:00:07.560 --> 00:00:12.000
programming for there to be a function
it's got to not have side effects.

4
00:00:12.000 --> 00:00:13.420
But what does that really mean?

5
00:00:15.460 --> 00:00:16.970
That word gets thrown around.

6
00:00:16.970 --> 00:00:18.106
That term gets thrown around a lot.

7
00:00:18.106 --> 00:00:18.980
What do we really mean by that?

8
00:00:18.980 --> 00:00:21.870
Well, it's more than you realize.

9
00:00:23.280 --> 00:00:26.490
Number one, if I were to write
a function called shippingRate,

10
00:00:26.490 --> 00:00:28.390
a procedure called shippingRate.

11
00:00:30.580 --> 00:00:35.410
Number one, right of the bat, you notice
it doesn't have any parameters listed.

12
00:00:35.410 --> 00:00:37.829
And also you notice that it
doesn't have a return keyword.

13
00:00:40.140 --> 00:00:44.820
It does, however,
still do a thing with some values.

14
00:00:45.840 --> 00:00:49.020
It takes a size, a weight, and
a speed and it calculates a rate.

15
00:00:50.590 --> 00:00:56.711
So on line five, six, seven, and eight, we
set up those inputs and output variable.

16
00:00:56.711 --> 00:01:00.071
We call shippingRate on line nine and
on line ten,

17
00:01:00.071 --> 00:01:02.660
we legitimately got a shippingRate.

18
00:01:02.660 --> 00:01:04.840
This code will work all day long.

19
00:01:04.840 --> 00:01:09.230
And this code actually is a lot like
most of the code in most of our apps.

20
00:01:11.720 --> 00:01:13.870
It's using some other stuff around it and

21
00:01:13.870 --> 00:01:17.910
it's affecting somewhere something else,
somewhere else in the program.

22
00:01:17.910 --> 00:01:24.017
And it accomplished our end goal,
which is that it got us a shippingRate,

23
00:01:24.017 --> 00:01:27.179
which is fine as it's not a function.

24
00:01:29.656 --> 00:01:32.914
&gt;&gt; Kyle: And you would say, well, you just
told me on the previous slide that if

25
00:01:32.914 --> 00:01:36.890
there is a semantic relationship between
inputs and outputs it's a function.

26
00:01:36.890 --> 00:01:41.600
Well yes, that's part of it but
we have to keep evolving our definition.

27
00:01:41.600 --> 00:01:45.060
And that is a necessary component but
it's not sufficient as a definition.

28
00:01:46.590 --> 00:01:50.760
Because not only must there be
a relationship between the inputs and

29
00:01:50.760 --> 00:01:55.600
the outputs, but the inputs and
the outputs, to take advantage of the math

30
00:01:55.600 --> 00:01:58.800
that we're benefiting from with
functional programming, the inputs and

31
00:01:58.800 --> 00:01:59.910
the outputs have to be direct.

32
00:02:02.300 --> 00:02:06.930
If the inputs or the outputs or
both are indirect as they are here,

33
00:02:08.690 --> 00:02:12.570
then it's not a true function, even
though there's a semantic relationship.

34
00:02:15.160 --> 00:02:18.930
So when we say side effects,
what we really mean is indirect inputs or

35
00:02:18.930 --> 00:02:20.380
indirect outputs, or both.

36
00:02:21.440 --> 00:02:24.550
Some people like to call
indirect input side causes,

37
00:02:24.550 --> 00:02:26.320
because it's like cause and effect.

38
00:02:26.320 --> 00:02:27.470
Maybe that's useful.

39
00:02:27.470 --> 00:02:30.030
I like to use the big
umbrella term side effects.

40
00:02:30.030 --> 00:02:35.049
Side effects are both side causes,
side indirect inputs, and

41
00:02:35.049 --> 00:02:40.740
potentially indirect outputs
affecting things outside of yourself.

42
00:02:40.740 --> 00:02:45.238
You'll have to trust me and I can't
even really explain to the math, but

43
00:02:45.238 --> 00:02:50.031
the math doesn't work if any of the inputs
or any of the outputs are indirect,

44
00:02:50.031 --> 00:02:51.529
it just doesn't work.

45
00:02:51.529 --> 00:02:56.668
So in a sense, we could twist the rubix
cube around and we could say, well,

46
00:02:56.668 --> 00:03:01.335
its got to take direct inputs,
aka arguments past the parameters.

47
00:03:01.335 --> 00:03:02.354
And it's got to compute and

48
00:03:02.354 --> 00:03:05.500
return a value without assigning
to anything outside of itself.

49
00:03:05.500 --> 00:03:07.750
It can't access anything
outside of itself and

50
00:03:07.750 --> 00:03:09.820
it can't assign to anything
outside of itself.

51
00:03:09.820 --> 00:03:13.520
That's a clear and solid way for us to
avoid the whole side effect of thing, and

52
00:03:13.520 --> 00:03:14.559
that should make it a function.

53
00:03:15.860 --> 00:03:18.180
Close, we're getting closer.

54
00:03:19.730 --> 00:03:21.900
Those are necessary components,
but they're not sufficient.

55
00:03:25.380 --> 00:03:27.170
This is side effects.

56
00:03:27.170 --> 00:03:29.270
And we want to avoid side effects,

57
00:03:29.270 --> 00:03:33.160
because side effects invalidate
the idea of functions.

58
00:03:33.160 --> 00:03:36.390
We don't get functions and
therefore we don't get the benefits.

59
00:03:36.390 --> 00:03:41.210
And by getting the benefits,
I don't mean that we can't use the API's.

60
00:03:41.210 --> 00:03:43.660
We can definitely use the API's.

61
00:03:43.660 --> 00:03:46.750
What we don't get as we
don't get the prove ability.

62
00:03:46.750 --> 00:03:48.200
We don't get the verification,

63
00:03:48.200 --> 00:03:52.420
the security of knowing that this thing is
definitely gonna do what we want it to do.

64
00:03:54.430 --> 00:03:58.650
It's kind of a waste of time to go through
all the motions as if you're doing

65
00:03:58.650 --> 00:04:01.490
functional programming and
not get the real benefit out of it.

66
00:04:03.310 --> 00:04:05.320
And not only you don't get the benefit,
but

67
00:04:05.320 --> 00:04:07.396
your readers don't get the benefit either.

68
00:04:10.511 --> 00:04:14.128
&gt;&gt; Kyle: So that's why when we make
shippingRate and we pass in the inputs and

69
00:04:14.128 --> 00:04:15.526
return an output.

70
00:04:15.526 --> 00:04:19.210
We call shippingRate with some inputs and
we assigned in this case to the rate

71
00:04:19.210 --> 00:04:26.100
variable, the output that's direct input
semantically related to direct output.

72
00:04:26.100 --> 00:04:27.387
And that's a function.

73
00:04:31.752 --> 00:04:33.654
&gt;&gt; Kyle: But I want you to notice
something that's interesting.

74
00:04:33.654 --> 00:04:35.917
And by the way what I'm about to say,

75
00:04:35.917 --> 00:04:40.880
I can only speak to JavaScript since
that's the context of our discussion.

76
00:04:40.880 --> 00:04:44.620
I'm not saying anything about functional
programming in a general big sense.

77
00:04:44.620 --> 00:04:49.540
But I am gonna tell you that in
JavaScript, this much I can say,

78
00:04:50.810 --> 00:04:57.440
there's no such thing as a function,
there's such a thing as a function call.

79
00:04:58.870 --> 00:05:03.346
That for us to have the definition of
a function isn't the important part.

80
00:05:03.346 --> 00:05:07.479
The important part is that,
that function was called on line seven and

81
00:05:07.479 --> 00:05:11.543
gave direct inputs and got a direct
input at that output at that call,

82
00:05:11.543 --> 00:05:13.310
that's the important part.

83
00:05:15.550 --> 00:05:18.290
It is the function call that matters.

84
00:05:18.290 --> 00:05:20.990
It is the characteristics of
that function call that matter.

85
00:05:20.990 --> 00:05:24.310
Are there direct inputs and
direct output from this function call?

86
00:05:24.310 --> 00:05:25.170
That's the question.

87
00:05:26.580 --> 00:05:29.760
Our temptation is to look at
the definition of the function to try to

88
00:05:29.760 --> 00:05:31.530
answer that question.

89
00:05:31.530 --> 00:05:36.360
But it turns out because of the nature
of how JavaScript works we cannot fully

90
00:05:36.360 --> 00:05:42.700
answer the question, is it a function,
without looking at the function call.

91
00:05:42.700 --> 00:05:47.670
So the important thing to talking
about a function and whether it is

92
00:05:47.670 --> 00:05:51.490
behaving as a function or rather
behaving as a procedure, the important

93
00:05:51.490 --> 00:05:55.880
characteristic there is not the definition
of the function but the call.

94
00:05:55.880 --> 00:05:59.810
The call needs to avoid creating or
using side effects.

95
00:05:59.810 --> 00:06:03.600
And it sort of indirect that the
definition of the function is that way.

96
00:06:03.600 --> 00:06:07.854
Our temptation is to think about
the function being, but it's the call.

97
00:06:07.854 --> 00:06:11.560
We wanna avoid those side
effects with the function calls

98
00:06:11.560 --> 00:06:16.990
rather than with procedure calls, so we
use function calls to avoid side effects.

99
00:06:16.990 --> 00:06:22.120
But that's only if possible, because not
all side effects will be avoidable and

100
00:06:22.120 --> 00:06:24.210
that's what we wanna jump into.

101
00:06:24.210 --> 00:06:25.570
So let's talk about side effects.

102
00:06:25.570 --> 00:06:29.880
What really are the side effects
that we need to be concerned about?

103
00:06:29.880 --> 00:06:33.660
We saw one kind of them which is
variables outside of the function, but

104
00:06:33.660 --> 00:06:35.380
there's more to it than that.

105
00:06:35.380 --> 00:06:37.680
It's more than just a variable.

106
00:06:37.680 --> 00:06:42.520
For example, any sort of IO,
printing to the console, reading or

107
00:06:42.520 --> 00:06:47.250
writing from the file system, any of
those IO kinds of things input, output.

108
00:06:47.250 --> 00:06:49.010
Those are all side effects on the system.

109
00:06:50.340 --> 00:06:54.044
So functional programming says avoid it,
those are out.

110
00:06:54.044 --> 00:06:57.100
Database Storage, that's a side effect.

111
00:06:57.100 --> 00:06:59.796
Functional programming says that's out.

112
00:06:59.796 --> 00:07:02.914
Network calls, reading and
writing from the DOM,

113
00:07:02.914 --> 00:07:05.940
timestamps generating the timestamp.

114
00:07:05.940 --> 00:07:07.420
That's a side effect.

115
00:07:07.420 --> 00:07:09.870
Generating a random number,
that's a side effect.

116
00:07:09.870 --> 00:07:12.938
So all of a sudden we start to think, wow,

117
00:07:12.938 --> 00:07:17.435
that's a lot of things in our
program that are side effects.

118
00:07:17.435 --> 00:07:21.930
And functional programming seems to say
we have to cut all of those things out.

119
00:07:23.070 --> 00:07:26.810
But the fact of the matter is you
can't cut all of these things out,

120
00:07:26.810 --> 00:07:30.590
because even if you think about
it in a theoretical sense.

121
00:07:30.590 --> 00:07:34.880
Any program that runs is gonna
produce heat by the CPU and that is

122
00:07:34.880 --> 00:07:39.180
the side effect that is an observable
change to the state of the system.

123
00:07:39.180 --> 00:07:44.250
As a matter of fact, not even just the
heat of CPU just the observable delay in

124
00:07:44.250 --> 00:07:48.745
time where one program can't run because
another program is currently running,

125
00:07:48.745 --> 00:07:50.630
that's a side effect.

126
00:07:50.630 --> 00:07:54.650
Not only is it practically impossible
to avoid all side effects,

127
00:07:54.650 --> 00:07:57.980
it's also theoretically
impossible to avoid them.

128
00:07:59.660 --> 00:08:01.620
So when we say avoid side effects,

129
00:08:01.620 --> 00:08:04.339
what we're really saying
is minimize side effects.

130
00:08:05.740 --> 00:08:08.590
Have as few side effects as possible,

131
00:08:08.590 --> 00:08:11.930
knowing full well that you have
to have some side effects.

132
00:08:11.930 --> 00:08:14.790
A program that had no side effects
which can't even exist, but

133
00:08:14.790 --> 00:08:19.460
if it could exist,
a program with no side effects would be

134
00:08:19.460 --> 00:08:22.720
indistinguishable from
the absence of that program.

135
00:08:22.720 --> 00:08:24.460
You couldn't even prove it existed.

136
00:08:24.460 --> 00:08:27.120
You couldn't send anything into it and
see anything come out of it,

137
00:08:27.120 --> 00:08:29.720
so you couldn't even prove that
it existed or that it ran.

138
00:08:32.310 --> 00:08:37.410
So we really wanna change our mindset
from side effects are bad to side effects

139
00:08:37.410 --> 00:08:42.448
take away the benefits of why I'm doing
functional programming in the first place.

140
00:08:42.448 --> 00:08:45.568
They reduce, they water down,

141
00:08:45.568 --> 00:08:51.125
they impurify the benefits
of functional programming.

142
00:08:51.125 --> 00:08:55.529
And that's why if we are going to do side
effects, which we have to sometimes,

143
00:08:55.529 --> 00:08:58.150
we wanna make sure that
they are very obvious.

144
00:08:58.150 --> 00:09:01.260
We wanna make sure that we
are very intentional about them,

145
00:09:01.260 --> 00:09:04.257
rather than simply not caring
about side effects at all.

146
00:09:07.927 --> 00:09:10.962
&gt;&gt; Kyle: So there really is no
such thing as no side effects,

147
00:09:10.962 --> 00:09:14.700
it's just that we want to
avoid them where possible.

148
00:09:14.700 --> 00:09:18.820
And when we have to do them,
make them super obvious.

149
00:09:18.820 --> 00:09:22.360
Why do you think it would be important for
us to make them obvious?

150
00:09:22.360 --> 00:09:25.660
Well, let's think it back to what I
said in the outset of our course.

151
00:09:26.690 --> 00:09:30.550
We said that, code that is written
with functional principles

152
00:09:30.550 --> 00:09:33.530
is based upon mathematics, right?

153
00:09:33.530 --> 00:09:37.460
And just like we don't have to
prove to ourselves 1 + 1 equals 2.

154
00:09:37.460 --> 00:09:42.210
if you have a set of your code that
is written with functional principle

155
00:09:43.410 --> 00:09:44.910
and then you have a bug in your program.

156
00:09:46.730 --> 00:09:49.190
And you could have the bug
in your functional part or

157
00:09:49.190 --> 00:09:54.610
it could be in the parts that don't
abide by functional principles.

158
00:09:54.610 --> 00:09:56.760
Where is it far more
likely that the bug is?

159
00:09:58.100 --> 00:09:59.640
It's in the place where
your side effects are.

160
00:10:01.630 --> 00:10:04.740
I love the way a functional programmer
describes this, they will describe this

161
00:10:04.740 --> 00:10:10.430
idea that we collect all of our
functional programming stuff, all of our

162
00:10:10.430 --> 00:10:13.290
pure functions as they're called and
we'll get into that in a moment.

163
00:10:13.290 --> 00:10:17.630
We collect all of that stuff together and
what we would visualize is a sphere,

164
00:10:17.630 --> 00:10:20.430
it's the core that is functional.

165
00:10:21.430 --> 00:10:23.640
And then we collect all
of the side effects.

166
00:10:23.640 --> 00:10:26.380
All of the non-pure stuff
on the outer shell.

167
00:10:28.640 --> 00:10:31.070
We make a clear delineation
in our program.

168
00:10:31.070 --> 00:10:34.315
I've gone so far, this sounds silly, but
I've gone so far to make a file called

169
00:10:34.315 --> 00:10:37.675
sideeffects.js and
put all my side effects in that one file.

170
00:10:37.675 --> 00:10:39.794
Because if there's a bug,

171
00:10:39.794 --> 00:10:45.240
it is vastly more likely that it's
where my side effects are than not.

172
00:10:46.890 --> 00:10:50.250
It's more likely that I got one
plus one equals two correct.

173
00:10:50.250 --> 00:10:52.340
And then I mess something
else up with not now.

174
00:10:54.330 --> 00:10:58.010
I got an algorithm wrong or
I used the side effect wrong,

175
00:10:58.010 --> 00:11:00.510
something mutated in
a way I wasn't expecting.

176
00:11:00.510 --> 00:11:02.380
That's where bugs more likely come.

