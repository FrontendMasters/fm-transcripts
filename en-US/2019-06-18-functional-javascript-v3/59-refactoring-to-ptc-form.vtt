WEBVTT

1
00:00:00.000 --> 00:00:03.730
&gt;&gt; Kyle Simpson: Let's go back
to our example of count valves,

2
00:00:03.730 --> 00:00:07.170
you remember this implementation
from earlier in our discussion, and

3
00:00:07.170 --> 00:00:12.160
let's analyze that this is not
improper tail call position.

4
00:00:12.160 --> 00:00:15.070
How do we know it's not improper to call
position, because there is an addition

5
00:00:15.070 --> 00:00:19.180
operation that has to happen
after the countVowels has run.

6
00:00:19.180 --> 00:00:23.600
So we know that those stack frames are
gonna be kept around, and the question is,

7
00:00:23.600 --> 00:00:29.100
that was the way we designed or
solved this problem recursively, and

8
00:00:29.100 --> 00:00:34.810
it led to a non-tail call representation
of the problem solution, so what do we do?

9
00:00:34.810 --> 00:00:37.160
Because in theory it sounds
great from recursion, but

10
00:00:37.160 --> 00:00:40.910
in practice now, we have this problem
where it can't ever be optimized,

11
00:00:40.910 --> 00:00:43.710
even if they ever implement
proper tail calls.

12
00:00:43.710 --> 00:00:47.390
And the good news is that many
forms of recursion, not all, but

13
00:00:47.390 --> 00:00:52.800
many forms of recursion can be reoriented
to take advantage of tail calls,

14
00:00:52.800 --> 00:00:56.858
but it requires thinking a little bit
more carefully about the problem.

15
00:00:56.858 --> 00:01:00.690
So this is a technique that you should be
aware of, because if you are ever going to

16
00:01:00.690 --> 00:01:05.980
use recursion practically anywhere,
even in Safari only, you're

17
00:01:05.980 --> 00:01:09.820
gonna have to get comfortable with the
idea, thinking about proper tail calls.

18
00:01:09.820 --> 00:01:14.742
Because it won't always be the case that
your recursion nicely, cleanly is already

19
00:01:14.742 --> 00:01:19.335
in tail call position, you're gonna
have to probably put in that extra work.

20
00:01:19.335 --> 00:01:23.449
And sometimes you're gonna be stuck where
no matter what you do you're not going to

21
00:01:23.449 --> 00:01:25.030
be able to do tail calls.

22
00:01:25.030 --> 00:01:29.148
There is a form of recursion called binary
recursion, which is that you, and this is

23
00:01:29.148 --> 00:01:33.092
what you see when you're traversing
binary trees, for example, where you call

24
00:01:33.092 --> 00:01:36.588
left and then you call right, and
each one of those goes left and right.

25
00:01:36.588 --> 00:01:40.553
When you have a forked or a binary,
or even more, any sort of recursion,

26
00:01:40.553 --> 00:01:42.633
you absolutely can't do tail calls,

27
00:01:42.633 --> 00:01:45.510
cuz one of those is not gonna
be on the tail position.

28
00:01:45.510 --> 00:01:48.410
One of them might, but
one of them isn't, and so

29
00:01:48.410 --> 00:01:53.670
you're just stuck there is no way to solve
that problem, you can't do two forms

30
00:01:53.670 --> 00:01:57.430
of recursion in the same function and have
both of them be in tail call position.

31
00:01:57.430 --> 00:02:00.550
But most recursion that we do,
that isn't of that form,

32
00:02:00.550 --> 00:02:04.200
at least is possible to consider
rewriting it into tail call form.

33
00:02:05.410 --> 00:02:08.590
So what we need to do is,
analyze how do we get rid of that,

34
00:02:08.590 --> 00:02:13.180
essentially how could we get rid of that
first variable, cuz that's the reason

35
00:02:13.180 --> 00:02:17.820
that it's not in tail call form, that's
the reason why we need to preserve it.

36
00:02:17.820 --> 00:02:22.670
It's because that pesky thing that's
stuck there, it's hanging out there while

37
00:02:22.670 --> 00:02:26.490
the other function calls are finishing,
and then we're coming back to it.

38
00:02:26.490 --> 00:02:30.450
So the key recognition point
that is often gonna lead you to

39
00:02:30.450 --> 00:02:34.682
being able to refactor something that's
non-tail call into a tail call form,

40
00:02:34.682 --> 00:02:39.500
that key recognition point is to say,
if I am keeping track of this

41
00:02:39.500 --> 00:02:45.860
information in the stack frame, that is,
my local variables in the stack.

42
00:02:45.860 --> 00:02:49.432
Where else could I keep track
of that information and

43
00:02:49.432 --> 00:02:52.117
not keep track of it in the stack frame?

44
00:02:52.117 --> 00:02:54.930
And there's only one other
place that even makes sense.

45
00:02:54.930 --> 00:02:59.870
The other place that I could keep track of
it in, is in the next stack frame, AKA,

46
00:02:59.870 --> 00:03:03.130
the arguments that I'm gonna
pass to the next function.

47
00:03:03.130 --> 00:03:08.140
So instead of preserving a variable here,
if I were to compute my response and

48
00:03:08.140 --> 00:03:12.800
pass it forward to the next function,
then I have a place for that to sit.

49
00:03:14.860 --> 00:03:18.450
Instead of keeping my stack frame,
finish all of my business, and

50
00:03:18.450 --> 00:03:22.400
pass it all on to the next stack frame,
and he finishes all of his business, and

51
00:03:22.400 --> 00:03:24.950
he passes it on to the next stack frame,
and so on.

52
00:03:24.950 --> 00:03:28.340
That's how you refactor from
non-tail call to tail call form.

53
00:03:29.760 --> 00:03:33.090
So what that looks like then is
that we are going to want to

54
00:03:33.090 --> 00:03:37.790
reserve one of the argument positions for
our running count.

55
00:03:37.790 --> 00:03:40.210
We could start that
argument position out at 0,

56
00:03:40.210 --> 00:03:44.960
and then we just, each time we make
the recursive call, make sure that

57
00:03:44.960 --> 00:03:48.390
that number has been incremented
properly to hold that new value.

58
00:03:50.080 --> 00:03:52.270
So this is what it might look like,

59
00:03:52.270 --> 00:03:57.044
we could call count values with the count
argument and started it out at 0.

60
00:03:57.044 --> 00:04:01.210
We could precompute count,
like we were computing first before, but

61
00:04:01.210 --> 00:04:03.609
notice I'm doing a plus equals here, so

62
00:04:03.609 --> 00:04:07.085
I am adding two count rather
than recomputing only first.

63
00:04:07.085 --> 00:04:10.705
I'm basically making count bigger and
bigger, and bigger every time it's called,

64
00:04:10.705 --> 00:04:12.420
and then we are forward passing.

65
00:04:12.420 --> 00:04:17.210
And you see on line 6 we pass in the new
count to the next level of recursive.

66
00:04:18.540 --> 00:04:23.150
Now, the problem with this is that it
makes the signature of our recursive

67
00:04:23.150 --> 00:04:24.564
function more awkward.

68
00:04:24.564 --> 00:04:28.220
When it's a single number,
like starting it out at 0,

69
00:04:28.220 --> 00:04:31.860
it's not a huge problem to tell
people you have to pass 0, but

70
00:04:31.860 --> 00:04:35.860
it is a sort of leaky abstraction,
wait, why do I have to pass 0?

71
00:04:35.860 --> 00:04:37.590
Shouldn't you be taking care of that?

72
00:04:37.590 --> 00:04:41.015
So it's kind of leaking the abstraction
that we're doing a recursion,

73
00:04:41.015 --> 00:04:42.960
that we're doing a tail
call recursion here.

74
00:04:42.960 --> 00:04:47.610
So what you often will see, is that
someone will create an interface function

75
00:04:47.610 --> 00:04:52.090
that has a nice, clean looking signature,
and then they'll have the recursive

76
00:04:52.090 --> 00:04:55.830
function hidden away,
that has the non clean signature.

77
00:04:55.830 --> 00:04:57.330
That's kinda the trade off here.

78
00:04:57.330 --> 00:04:59.085
So what you might see
is something like this.

79
00:04:59.085 --> 00:05:04.410
You might see a countVowels that we're
gonna store it in some place and

80
00:05:04.410 --> 00:05:06.490
here's what I'm gonna do,
I'm gonna store it in a Curry.

81
00:05:07.670 --> 00:05:11.160
I'm gonna create a countVowels
that takes both of those inputs

82
00:05:12.980 --> 00:05:18.150
separately, and then I'm gonna prespecify
one of those inputs down on line 7.

83
00:05:19.530 --> 00:05:22.825
That's a fancy way of showing you,
that's a functional way of

84
00:05:22.825 --> 00:05:26.008
showing you that I'm gonna store
it in a closure somewhere.

85
00:05:26.008 --> 00:05:29.226
I'm gonna store that information in
a closure so that the call sight that

86
00:05:29.226 --> 00:05:32.840
everybody else sees is the one that's
only providing the second value.

87
00:05:32.840 --> 00:05:36.346
This is yet another example of
using Curry to our advantage.

88
00:05:36.346 --> 00:05:39.166
When we have some information
that we need to store somewhere,

89
00:05:39.166 --> 00:05:43.740
Curry takes advantage of, or allows us to
store that information in that closure.

90
00:05:43.740 --> 00:05:47.260
So this is a common way that you
might take a function written,

91
00:05:47.260 --> 00:05:51.670
like the one on line 3, you see I've
written it in the sort of naive sense, but

92
00:05:51.670 --> 00:05:57.300
then I've presented to the outside program
one that has a cleaner information

93
00:05:57.300 --> 00:05:59.700
signature, where I only need
the to pass in the string.

94
00:06:02.660 --> 00:06:08.613
So, now this countVowels function would
in fact run, we can see the call-site on

95
00:06:08.613 --> 00:06:13.510
line 6, that is the recursive call-site,
and we can see that it does in fact work

96
00:06:13.510 --> 00:06:18.960
as a proper tail code, it is in proper
tail call form, we have strict mode.

97
00:06:18.960 --> 00:06:22.860
So if we were to take this code and try to
run it inside of something like Safari and

98
00:06:22.860 --> 00:06:26.030
give it a really, really giant string
that was millions of characters long,

99
00:06:26.030 --> 00:06:29.200
it would happily run through all of
those characters and give us a response.

100
00:06:30.480 --> 00:06:34.032
It would probably run a little bit
slower than the for loop version,

101
00:06:34.032 --> 00:06:36.977
cuz we'd have a million
function calls instead of one.

102
00:06:36.977 --> 00:06:39.707
And there is some amount
of runtime overhead, but

103
00:06:39.707 --> 00:06:42.700
we would at least not have
a runaway memory situation.

