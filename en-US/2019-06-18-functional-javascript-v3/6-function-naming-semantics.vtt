WEBVTT

1
00:00:00.200 --> 00:00:03.690
&gt;&gt; Kyle: But there's more to it than it
just takes inputs and does something and

2
00:00:03.690 --> 00:00:05.280
returns another value.

3
00:00:05.280 --> 00:00:10.770
Because if I took some inputs x and y and
then just on line 2 I said like return 40.

4
00:00:10.770 --> 00:00:12.959
I'm gonna go out on a limb and

5
00:00:12.959 --> 00:00:18.629
say that wouldn't really in the truest
spirit be considered a function.

6
00:00:21.232 --> 00:00:24.010
&gt;&gt; Kyle: It would take inputs and
it would return a value, but

7
00:00:24.010 --> 00:00:26.610
it really wouldn't be
the spirit of a function.

8
00:00:28.000 --> 00:00:30.540
And to understand
the spirit of a function,

9
00:00:30.540 --> 00:00:32.710
we really have to get back to the math.

10
00:00:32.710 --> 00:00:35.250
Now I promised I'm not gonna
teach you a math course,

11
00:00:35.250 --> 00:00:38.960
we're just gonna dip our little
toe into this math just briefly so

12
00:00:38.960 --> 00:00:42.980
that you can understand the spirit
of functional programming.

13
00:00:42.980 --> 00:00:46.290
Does anybody remember this kind
of stuff in like eighth grade.

14
00:00:46.290 --> 00:00:50.200
The way I remember this is the TI 85
graphing calculator where we plug

15
00:00:50.200 --> 00:00:52.800
the thing in and
drew pictures and stuff, okay?

16
00:00:52.800 --> 00:00:54.813
I remember this kind of stuff and

17
00:00:54.813 --> 00:00:58.560
I remember it used to look like
y equals 2x squared plus 3.

18
00:00:58.560 --> 00:01:01.880
I remember for
months learning about these things, and

19
00:01:01.880 --> 00:01:05.440
just randomly coming up with numbers
that meant absolutely nothing.

20
00:01:05.440 --> 00:01:08.890
They were just completely abstract,
not concrete at all.

21
00:01:08.890 --> 00:01:10.830
And then we pulled out
a graphing calculator and

22
00:01:10.830 --> 00:01:15.560
wow, all of a sudden this thing
actually meant something concrete,

23
00:01:17.150 --> 00:01:21.200
it meant a drawing, that looks like, a u.

24
00:01:23.930 --> 00:01:29.650
But I wish at that time and I wish now the
kids that are learning this stuff, they're

25
00:01:29.650 --> 00:01:32.600
not using graphing calculators anymore
probably, they're just using their phones.

26
00:01:32.600 --> 00:01:37.180
But I wish that somebody would say hey,
guess what there's

27
00:01:37.180 --> 00:01:42.110
a concrete thing that's happening, which
is that you're taking an input value.

28
00:01:42.110 --> 00:01:43.820
In this case an x coordinate,

29
00:01:43.820 --> 00:01:48.610
we're gonna interpret the input value as
an x coordinate, like the input value one.

30
00:01:49.690 --> 00:01:53.959
We're gonna put it into this thing
called f(x), which is the function of x,

31
00:01:55.770 --> 00:01:59.340
I wish somebody said to me, hey, how you
do like programming this kind of the same

32
00:01:59.340 --> 00:02:02.190
thing, like you put an input and
it's gonna give you an output.

33
00:02:02.190 --> 00:02:07.060
Nobody connected that dot for me at all
I wish they had, cuz I've been a lot

34
00:02:07.060 --> 00:02:10.820
further along as a programmer if somebody
connected it to this kind of stuff.

35
00:02:11.820 --> 00:02:15.060
But I remember plugging in the number one
or the number two or the number three and

36
00:02:15.060 --> 00:02:16.720
getting these other numbers out.

37
00:02:16.720 --> 00:02:22.684
One gives me the number five,
and two gives me the number 11.

38
00:02:22.684 --> 00:02:25.417
And I remember,
if you did a bunch of those dots and

39
00:02:25.417 --> 00:02:29.540
then you literally connected the dots,
it would draw this same parabola.

40
00:02:29.540 --> 00:02:31.610
In other words,

41
00:02:31.610 --> 00:02:35.970
the output value is interpreted as
the y component of the coordinate.

42
00:02:38.280 --> 00:02:43.692
The input value is interpreted as the x
coordinate, and when you take the input

43
00:02:43.692 --> 00:02:48.703
and the output together, we can
interpret their meaning as a parabola.

44
00:02:51.084 --> 00:02:52.590
&gt;&gt; Kyle: So what is a function?

45
00:02:53.980 --> 00:02:59.880
A function is a relationship
between the input and the output.

46
00:03:01.580 --> 00:03:06.149
There's a semantic relationship between
what I put in, and what I get out.

47
00:03:08.303 --> 00:03:10.662
&gt;&gt; Kyle: If we would
write this in JavaScript,

48
00:03:10.662 --> 00:03:16.380
we could just write function f and passing
in an x and get back some other thing.

49
00:03:16.380 --> 00:03:17.978
But what would be a better name for

50
00:03:17.978 --> 00:03:23.068
that function,
&gt;&gt; Kyle: How about parabola?

51
00:03:24.169 --> 00:03:29.828
&gt;&gt; Kyle: To describe to the reader of our
code the relationship, the relationship

52
00:03:29.828 --> 00:03:35.590
is that if you put in an x coordinate,
you're gonna get a y coordinate out.

53
00:03:38.030 --> 00:03:43.130
That's why I said a slight ago that just
returning 40 isn't really the spirit of

54
00:03:43.130 --> 00:03:47.100
a function because there's no relationship
between the inputs and that output.

55
00:03:48.670 --> 00:03:51.610
That doesn't mean that if
something returns a number,

56
00:03:51.610 --> 00:03:53.910
then it can't be a function.

57
00:03:53.910 --> 00:03:58.620
It just means that it matters if there's
an obvious relationship between the two.

58
00:04:00.220 --> 00:04:03.020
And if you're making things that
don't have an obvious relationship

59
00:04:03.020 --> 00:04:08.160
between the input and the output, and that
happens far more often than we realize.

60
00:04:08.160 --> 00:04:08.971
If you're doing that,

61
00:04:08.971 --> 00:04:11.537
you're not really accomplishing
the spirit of functional programming.

62
00:04:13.125 --> 00:04:17.479
&gt;&gt; Kyle: The goal here is to create
relationships that are obvious to

63
00:04:17.479 --> 00:04:19.230
the reader of our code.

64
00:04:20.600 --> 00:04:25.540
So, a function is
the semantic relationship

65
00:04:25.540 --> 00:04:29.030
between input and computed output.

66
00:04:29.030 --> 00:04:33.040
Here if I make a function
called shippingRate,

67
00:04:33.040 --> 00:04:37.140
the name of the function tells
you the semantic relationship.

68
00:04:37.140 --> 00:04:41.521
If I put in size, weight, and speed,
I'm going to get a shipping rate back out.

69
00:04:41.521 --> 00:04:44.063
That's what it's for.

70
00:04:47.038 --> 00:04:51.187
&gt;&gt; Kyle: That's what functional
programming bases itself on, okay?

71
00:04:51.187 --> 00:04:55.864
That everything that we use, some people
metaphorically refer to them as Legos,

72
00:04:55.864 --> 00:04:58.800
like if you're playing with Legos,
or whatever.

73
00:05:00.020 --> 00:05:05.010
Every Lego in our app,
[LAUGH] has to have a name that describes

74
00:05:05.010 --> 00:05:08.890
a semantic relationship between
the input and the output.

75
00:05:11.030 --> 00:05:13.410
You have lots of functions, aka,

76
00:05:13.410 --> 00:05:17.990
procedures in your app, probably
tens of thousands for some of you.

77
00:05:19.400 --> 00:05:22.830
How many of them, if you go and
look at the name of the function,

78
00:05:22.830 --> 00:05:26.290
would you be able to understand
the name of the procedure, rather.

79
00:05:26.290 --> 00:05:29.210
How many of those would you
be able to clearly understand

80
00:05:29.210 --> 00:05:31.470
the relationship between the inputs and
the outputs?

81
00:05:32.890 --> 00:05:34.530
How many of you even produce outputs?

82
00:05:35.700 --> 00:05:40.710
Probably not that many, most of them
probably do a lot of other things.

83
00:05:40.710 --> 00:05:44.090
Really useful things like writing
to a database and blah, blah, but

84
00:05:44.090 --> 00:05:46.315
not a lot of them probably
return you a value.

85
00:05:48.446 --> 00:05:52.294
&gt;&gt; Kyle: So you have to put some special
sunglasses on if you were to start

86
00:05:52.294 --> 00:05:57.030
looking at the code around you with this
question of, is it a function or not?

87
00:05:58.350 --> 00:06:02.740
Is it taking an input, and by the way,
no input is a valid input.

88
00:06:02.740 --> 00:06:07.450
It doesn't have to have a number,
the absence of an input is valid input.

89
00:06:07.450 --> 00:06:12.240
But is there a semantic relationship
between what I put in and what I get out?

90
00:06:12.240 --> 00:06:16.240
And by the way,
undefined is a valid output,

91
00:06:16.240 --> 00:06:19.710
as long as there's a semantic
relationship to the input.

92
00:06:19.710 --> 00:06:23.320
If I have a function who's
job is to take an object and

93
00:06:23.320 --> 00:06:25.720
try to get a certain property off of it.

94
00:06:25.720 --> 00:06:29.490
And that object doesn't have the property,
the proper,

95
00:06:29.490 --> 00:06:32.760
correct semantic return value
would be undefined, would it not?

96
00:06:33.980 --> 00:06:36.303
That's entirely consistent
with functional programming.

97
00:06:38.538 --> 00:06:40.874
&gt;&gt; Kyle: But there has to be
an obvious semantic relationship or

98
00:06:40.874 --> 00:06:42.770
we're not doing functional programming.

