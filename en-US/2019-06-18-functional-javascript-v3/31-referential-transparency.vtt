WEBVTT

1
00:00:00.150 --> 00:00:05.730
&gt;&gt; Kyle Simpson: We're finally
ready to get the final answer,

2
00:00:05.730 --> 00:00:10.590
at least for the purposes of this course,
to what is a pure function.

3
00:00:10.590 --> 00:00:13.010
Okay, let's review where we've been so
far,

4
00:00:13.010 --> 00:00:18.380
we started with a pure function
needs to take some inputs and

5
00:00:18.380 --> 00:00:21.570
return an output, so where we started,
the very, very beginning.

6
00:00:22.620 --> 00:00:25.050
That was good but not good enough.

7
00:00:25.050 --> 00:00:28.910
And then we said, well no, actually it
needs to have a relationship between

8
00:00:28.910 --> 00:00:32.880
the inputs and the outputs, which was
better but still not good enough.

9
00:00:32.880 --> 00:00:36.400
And then we said, well no,
actually they need to be direct inputs and

10
00:00:36.400 --> 00:00:39.460
direct outputs, which was good but
not good enough.

11
00:00:39.460 --> 00:00:42.680
And then we said, well no, actually
they don't have to be direct inputs,

12
00:00:42.680 --> 00:00:44.940
they can be indirect as long
as they're not changing.

13
00:00:46.110 --> 00:00:48.780
Remember, we can close over
stuff as long as not changing,

14
00:00:48.780 --> 00:00:51.380
which was even better definition,
but still not good enough.

15
00:00:51.380 --> 00:00:55.790
And then we said, well, actually the real
thing is, it's the function call that

16
00:00:55.790 --> 00:00:59.910
every time I call the function with the
same inputs, I should get the same output.

17
00:00:59.910 --> 00:01:02.930
If that's true,
then I have a pure function call, right?

18
00:01:02.930 --> 00:01:05.300
Even better definition,
but still not complete.

19
00:01:06.710 --> 00:01:10.960
Here's the full, canonical,
complete definition for

20
00:01:10.960 --> 00:01:15.330
a pure function, and specifically for
a pure function call, remember,

21
00:01:15.330 --> 00:01:16.950
we're focused on the function call.

22
00:01:16.950 --> 00:01:20.629
Line 9 is a pure function
called because or if.

23
00:01:21.940 --> 00:01:26.893
I could take the return
value of that function call,

24
00:01:26.893 --> 00:01:31.406
and replace the function
call with the return.

25
00:01:31.406 --> 00:01:35.084
In other words if A was somehow
being used somewhere in the program,

26
00:01:35.084 --> 00:01:39.278
like it was part of some other expression,
which always returns the string,

27
00:01:39.278 --> 00:01:41.148
if I could take the string AAAAA and

28
00:01:41.148 --> 00:01:44.460
literally just replace the function
call with that volume.

29
00:01:45.460 --> 00:01:46.690
If I could do that and

30
00:01:46.690 --> 00:01:51.840
not affect any of the rest of the program,
then I have a pure function call.

31
00:01:54.340 --> 00:01:57.127
There's a very special term, again,

32
00:01:57.127 --> 00:02:00.928
if you say this to your
co-workers after the course,

33
00:02:00.928 --> 00:02:05.841
you're gonna sound much smarter,
so use it, use it with your boss.

34
00:02:05.841 --> 00:02:08.670
The term is called
referential transparency.

35
00:02:10.450 --> 00:02:12.840
Sounds cool to say doesn't it?

36
00:02:12.840 --> 00:02:18.030
A function call is pure if it
has referential transparency.

37
00:02:18.030 --> 00:02:22.787
Referential transparency means, a function
call can be replaced with it's return

38
00:02:22.787 --> 00:02:25.669
value and
not affect any of the rest of the program.

39
00:02:29.460 --> 00:02:31.916
&gt;&gt; Kyle Simpson: Now it turns
out referential transparency,

40
00:02:31.916 --> 00:02:36.177
that's a really key idea, it turns out
that in a language like, for example,

41
00:02:36.177 --> 00:02:40.829
Haskell, the granddaddy of functional
programming, referential transparency is

42
00:02:40.829 --> 00:02:44.399
a key characteristic of the language
end of the compiler indeed.

43
00:02:44.399 --> 00:02:47.915
Because in Haskell, when you write
functions they're always pure,

44
00:02:47.915 --> 00:02:52.087
which means they always have referential
transparency, which means that because

45
00:02:52.087 --> 00:02:56.100
that's a guarantee of the language,
the compiler can take advantage of that.

46
00:02:57.254 --> 00:03:02.320
It literally normalizes everything,
because it can do that for free.

47
00:03:02.320 --> 00:03:06.090
It can literally replace other function
calls with the inline result of

48
00:03:06.090 --> 00:03:10.320
the previous function call, they do
that automatically for free because

49
00:03:10.320 --> 00:03:14.040
they have that guarantee of the language,
we do not have that in JavaScript.

50
00:03:15.460 --> 00:03:20.890
So, does referential transparency only
matter if the compiler can do it?

51
00:03:22.280 --> 00:03:23.900
Some would say yes, but I would say no.

52
00:03:24.940 --> 00:03:29.563
In a bigger sense, the real benefit of
referential transparency is actually to

53
00:03:29.563 --> 00:03:30.950
the reader of the code.

54
00:03:32.090 --> 00:03:37.170
Consider any function call in a program
that is indeed a pure function call.

55
00:03:37.170 --> 00:03:41.140
The reader of your code reads line 11, and
they go and they compute it, they say,

56
00:03:41.140 --> 00:03:45.230
okay, I know that line 11 is this value,
the value 42, or whatever.

57
00:03:46.640 --> 00:03:51.586
Everywhere else that they see that exact
same function call anywhere later in

58
00:03:51.586 --> 00:03:56.548
the program with the same inputs,
do they need to go re-compute the result?

59
00:03:56.548 --> 00:03:59.444
No, because what are they gonna do?

60
00:03:59.444 --> 00:04:03.040
They're gonna referentially
swap out the function call for

61
00:04:03.040 --> 00:04:07.200
the result they've already computed in
their head, and what's that gonna do?

62
00:04:07.200 --> 00:04:09.770
It's gonna free up their brain
power to focus on other,

63
00:04:09.770 --> 00:04:11.030
more important parts of your app.

64
00:04:12.730 --> 00:04:16.350
So referential transparency, while it
matters a lot to the compiler in something

65
00:04:16.350 --> 00:04:20.370
like Haskell, for us in JavaScript,
the reason it matters is because it puts

66
00:04:20.370 --> 00:04:23.370
the responsibility on you,
the author of the code.

67
00:04:24.580 --> 00:04:29.350
To make it as easy as possible for
the reader of your code, which

68
00:04:29.350 --> 00:04:34.342
includes your future self, to be able to
look at a line and know exactly what it's

69
00:04:34.342 --> 00:04:39.660
gonna do, and then not have to redo
that work over and over, and over again.

70
00:04:39.660 --> 00:04:41.770
I said at the outset of this course,

71
00:04:41.770 --> 00:04:44.480
the best code is the code that didn't
have to be read in the first place.

72
00:04:45.680 --> 00:04:48.995
Cuz I looked at it and said, I've already
done that, I don't need to do that.

73
00:04:48.995 --> 00:04:52.430
That's why function purity matters so
much.

74
00:04:52.430 --> 00:04:56.950
It's like we're building up this pyramid,
and this is the base stone of the pyramid,

75
00:04:56.950 --> 00:04:59.090
and if you take it out
everything else would crumble.

76
00:05:00.130 --> 00:05:03.100
You cannot have anything else
in functional programming

77
00:05:03.100 --> 00:05:07.161
unless you get the value and
the importance of function purity.

78
00:05:08.220 --> 00:05:09.710
Function call purity specifically

