WEBVTT

1
00:00:00.060 --> 00:00:02.610
&gt;&gt; Kyle Simpson: We need to understand
why functional programming.

2
00:00:02.610 --> 00:00:06.750
That's a really key critical thing and
and let me even be meta about it.

3
00:00:06.750 --> 00:00:09.238
Why do we need to understand
why functional programming?

4
00:00:09.238 --> 00:00:09.750
You're already here.

5
00:00:09.750 --> 00:00:11.530
You're already watching this course.

6
00:00:12.940 --> 00:00:16.040
That seems like it ought
to be too obvious.

7
00:00:16.040 --> 00:00:17.380
You have some curiosity.

8
00:00:17.380 --> 00:00:21.170
And I'm willing to bet that if we surveyed
everyone that's watching right now,

9
00:00:21.170 --> 00:00:24.120
we'd get lots of different
answers as to why you're here,

10
00:00:24.120 --> 00:00:28.300
why is this the time that
you've chosen to invest.

11
00:00:28.300 --> 00:00:31.210
Why have you chosen this
particular moment in your career?

12
00:00:31.210 --> 00:00:32.690
Maybe there's something happening at work.

13
00:00:32.690 --> 00:00:35.950
Maybe there's a shift happening and you
feel like you're getting left behind and

14
00:00:35.950 --> 00:00:36.930
you wanna keep up.

15
00:00:36.930 --> 00:00:40.120
Maybe you've been curious about it,
maybe you're already super experienced and

16
00:00:40.120 --> 00:00:42.630
you're just listening to hear
me trip up and make a mistake.

17
00:00:42.630 --> 00:00:44.669
And that's probably gonna happen, too.

18
00:00:44.669 --> 00:00:47.590
So there's a wide range of
motivations that might be.

19
00:00:49.490 --> 00:00:52.960
But I want to give you one that
may not be obvious to you.

20
00:00:52.960 --> 00:00:56.900
I want to tell you that one of
the biggest reasons why you should learn

21
00:00:56.900 --> 00:01:01.670
functional programming and why this should
matter and why we need to discuss that,

22
00:01:03.260 --> 00:01:07.620
is because it is impossible,
at least in my opinion, impossible for

23
00:01:07.620 --> 00:01:10.390
you to write functional
programming in isolation.

24
00:01:12.240 --> 00:01:15.120
It is impossible for
you to go back to work tomorrow or

25
00:01:15.120 --> 00:01:19.460
the next day, and send in a pull
request where you've rewritten a whole

26
00:01:19.460 --> 00:01:24.100
section of your code using some new
technique that we learn in this course.

27
00:01:24.100 --> 00:01:26.990
And then all of a sudden, just magically,
that's gonna land in the code and

28
00:01:26.990 --> 00:01:28.940
everybody's gonna be happy and
thumbs up about it.

29
00:01:30.590 --> 00:01:33.870
You can't take this journey up
the side of the cliff face alone.

30
00:01:35.820 --> 00:01:39.790
You're going to have to convince
the people that you collaborate with

31
00:01:39.790 --> 00:01:42.720
that there's value in the journey as well.

32
00:01:42.720 --> 00:01:45.210
So while you're sitting
here watching this course,

33
00:01:45.210 --> 00:01:49.440
you need to understand that whoever it is
that you work with now and in the future.

34
00:01:49.440 --> 00:01:53.420
You're gonna have to be able to convince
them to come on the journey as well.

35
00:01:53.420 --> 00:01:57.030
You're gonna have to convince them that
climbing straight up the side of a cliff

36
00:01:57.030 --> 00:02:01.920
wall, which sounds crazy,
is actually worthwhile, okay?

37
00:02:02.970 --> 00:02:06.720
That's why this conversation matters,
why functional programming?

38
00:02:06.720 --> 00:02:08.900
I have some thoughts on why
functional programming, but

39
00:02:08.900 --> 00:02:13.610
I'm sharing these because you're going
to have to, almost in a proxy sense,

40
00:02:13.610 --> 00:02:15.952
you're going to have to share
those with the people around you.

41
00:02:15.952 --> 00:02:18.734
You're gonna have to convince them.

42
00:02:18.734 --> 00:02:21.930
One of the biggest reasons why
functional programming and

43
00:02:21.930 --> 00:02:26.780
it's often touted, is that functional
programming signals a shift or

44
00:02:26.780 --> 00:02:31.620
it signals a paradigm difference
in the way that you approach code.

45
00:02:31.620 --> 00:02:35.020
And that can be incorporated in these
ideas of imperative programming

46
00:02:35.020 --> 00:02:37.050
versus declarative programming.

47
00:02:37.050 --> 00:02:40.330
Let's make sure we understand what those
words mean, because I don't want to just

48
00:02:40.330 --> 00:02:44.860
throw words like carabiner at you and
not have them have a definition.

49
00:02:44.860 --> 00:02:46.560
What does imperative mean?

50
00:02:46.560 --> 00:02:51.600
The good news is, unless you already
are one of those unicorns who learned

51
00:02:51.600 --> 00:02:56.030
programming from the beginning,
as a functional programmer, and

52
00:02:56.030 --> 00:02:58.630
if you are, I'm envious of you, okay?

53
00:02:58.630 --> 00:03:03.510
But unless you are like that, then you're
like all the rest of us, which is that you

54
00:03:03.510 --> 00:03:07.600
learned non-functionally,
which is to say you learned imperatively.

55
00:03:09.540 --> 00:03:13.536
Imperative code means code that is

56
00:03:13.536 --> 00:03:18.506
focused primarily on how to do something.

57
00:03:18.506 --> 00:03:19.961
If somebody tells you,

58
00:03:19.961 --> 00:03:24.925
I've got a list of numbers that all needed
to be added up and get a final total sum.

59
00:03:24.925 --> 00:03:27.417
Just me saying that
English sentence means,

60
00:03:27.417 --> 00:03:31.560
that almost all of you had the same
code snippet that popped into your head.

61
00:03:31.560 --> 00:03:33.890
If you have any experience
with programming at all.

62
00:03:33.890 --> 00:03:36.500
All of you probably
conceived something like,

63
00:03:36.500 --> 00:03:39.250
I'm gonna set up an accumulator
variable called Total.

64
00:03:39.250 --> 00:03:41.194
And I'm gonna for loop over the array, and

65
00:03:41.194 --> 00:03:44.330
I'm gonna add each element into
the total and then return the total.

66
00:03:46.479 --> 00:03:49.289
&gt;&gt; Kyle Simpson: And if that's the way
that you thought about the problem, you're

67
00:03:49.289 --> 00:03:53.190
in good company because that's the way all
the rest of us thought about the problem.

68
00:03:53.190 --> 00:03:57.459
And that's the imperative approach because
that code, while it will work, and

69
00:03:57.459 --> 00:04:00.348
while it's familiar and
while it's convenient, and

70
00:04:00.348 --> 00:04:04.680
while it's probably pretty performant,
all of those are good things.

71
00:04:04.680 --> 00:04:09.600
But that code is imperative
because the future reader of that

72
00:04:09.600 --> 00:04:13.670
code has to read all of the code and,
in a sense,

73
00:04:13.670 --> 00:04:17.750
almost mentally execute the code, before
they understand what it's purpose is.

74
00:04:18.980 --> 00:04:20.540
They have to do that.

75
00:04:20.540 --> 00:04:23.540
They can't simply glance at
this particular for loop and

76
00:04:23.540 --> 00:04:26.000
immediately know exactly what that for
loop is doing.

77
00:04:26.000 --> 00:04:29.800
They have to read it and execute a few
iterations and then convince themselves.

78
00:04:29.800 --> 00:04:35.390
They have to infer from
the code what it's doing.

79
00:04:35.390 --> 00:04:40.150
And you may think, well, that's not
a big deal, that's what programmers do.

80
00:04:40.150 --> 00:04:42.730
We read code and
then we write code, of course.

81
00:04:42.730 --> 00:04:43.860
Not a big deal.

82
00:04:43.860 --> 00:04:45.020
Well it is kind of a big deal.

83
00:04:46.130 --> 00:04:51.000
It is kind of a big deal because it
forces the reader to do something

84
00:04:51.000 --> 00:04:53.210
that they're not actually
naturally gifted at doing.

85
00:04:55.510 --> 00:04:59.250
Guess who's particularly
good at executing code.

86
00:04:59.250 --> 00:05:00.840
The computer.

87
00:05:00.840 --> 00:05:02.789
Who's not so great at executing code?

88
00:05:03.850 --> 00:05:06.440
Our brains, they weren't built for that.

89
00:05:07.720 --> 00:05:12.610
So any time that you write some code that
forces the person to execute it in their

90
00:05:12.610 --> 00:05:16.410
head just so they can understand it, it's
code that's gonna be harder to understand.

91
00:05:16.410 --> 00:05:20.830
And code that's harder to understand
is code that's harder to maintain,

92
00:05:20.830 --> 00:05:21.970
to improve, to fix.

93
00:05:24.170 --> 00:05:25.270
So what is declarative then?

94
00:05:25.270 --> 00:05:27.450
If imperative is all focused, or

95
00:05:27.450 --> 00:05:32.120
almost all focused on how,
declarative stands in opposition to that.

96
00:05:32.120 --> 00:05:36.390
Because declarative says, no, no,
the how is not the important part.

97
00:05:36.390 --> 00:05:40.320
The important part is the what,
the outcome.

98
00:05:40.320 --> 00:05:42.220
And even more importantly than that, why?

99
00:05:44.190 --> 00:05:46.900
I get this question a lot actually,
when people talk about code comments,

100
00:05:46.900 --> 00:05:50.100
or maybe not a question, but
people will just assert things.

101
00:05:50.100 --> 00:05:52.780
Some people will say,
code comments are evil.

102
00:05:52.780 --> 00:05:55.570
Anytime you have a code comment,
it means that the code is terrible.

103
00:05:55.570 --> 00:05:57.450
Code ought to self document itself.

104
00:05:59.370 --> 00:06:00.549
I think that's nonsense.

105
00:06:01.790 --> 00:06:03.490
Certainly there's a nugget
of truth in there but

106
00:06:03.490 --> 00:06:04.990
we've taken it far to the extreme.

107
00:06:06.980 --> 00:06:09.560
Code doesn't need to self document itself.

108
00:06:09.560 --> 00:06:14.110
Code needs to tell a story,
it needs to communicate, that's for sure.

109
00:06:14.110 --> 00:06:15.650
But it is a need to self document.

110
00:06:17.320 --> 00:06:19.236
There is a purpose for code comments.

111
00:06:19.236 --> 00:06:24.650
They're not an excuse for
not caring about your code.

112
00:06:24.650 --> 00:06:28.447
A lot of people will go to the other
extreme and say, what does it matter how

113
00:06:28.447 --> 00:06:32.460
bad the code as long as there's a code
comment, and I explained what I was doing.

114
00:06:32.460 --> 00:06:33.079
That's good enough.

115
00:06:34.380 --> 00:06:36.290
Actually, it's not good enough
because most of the time,

116
00:06:36.290 --> 00:06:38.400
code comments are out
of sync with the code.

117
00:06:38.400 --> 00:06:42.830
[LAUGH] So
it's even worse than it not being there.

118
00:06:42.830 --> 00:06:46.870
A bad code comment is worse
than no comment at all,

119
00:06:46.870 --> 00:06:49.819
because then the person spends twice
as much time spinning their wheels.

120
00:06:51.520 --> 00:06:53.587
But on the topic of code comments, and

121
00:06:53.587 --> 00:06:58.057
I'm using this as an illustration point
of the reason why declarative is useful.

122
00:06:58.057 --> 00:07:02.554
On the topic of code comments,
my response is always, no, no, no,

123
00:07:02.554 --> 00:07:05.421
you don't have to remove all comments, but

124
00:07:05.421 --> 00:07:10.705
your comment should not duplicate
the narrative of what the code is doing.

125
00:07:10.705 --> 00:07:13.575
Don't have a line of code
that says i plus plus, and

126
00:07:13.575 --> 00:07:16.065
then put a code comment
that says increment i.

127
00:07:18.395 --> 00:07:20.315
I can see that it's incrementing i.

128
00:07:20.315 --> 00:07:23.270
I don't need a code comment
to tell me that, okay.

129
00:07:23.270 --> 00:07:25.870
That's not the important reason for
that code comment.

130
00:07:25.870 --> 00:07:27.650
Here's what I wanna know
from your code comment.

131
00:07:29.140 --> 00:07:31.170
Why are you incrementing by one?

132
00:07:31.170 --> 00:07:33.896
What is magical about one as
opposed to incrementing by two?

133
00:07:35.660 --> 00:07:38.800
&gt;&gt; Kyle Simpson: That might be useful
information, that I want you to tell me.

134
00:07:38.800 --> 00:07:40.720
That's what a code
comment should focus on.

135
00:07:40.720 --> 00:07:43.620
It should focus on the why,
not the what, and

136
00:07:43.620 --> 00:07:47.920
sometimes maybe it needs to focus on
the how if it's particularly confusing,

137
00:07:47.920 --> 00:07:50.830
if there's something
particularly hard to understand.

138
00:07:50.830 --> 00:07:55.970
But even in those cases, that's a clue
that maybe I could work on improving

139
00:07:55.970 --> 00:08:00.620
that code, so that ideally all of
my code comments focus on why.

140
00:08:02.430 --> 00:08:03.940
But we can go even further than that and

141
00:08:03.940 --> 00:08:08.990
say, what if your code made it
obvious why it was doing something.

142
00:08:10.240 --> 00:08:13.110
Well then,
you don't need a code comment there.

143
00:08:13.110 --> 00:08:14.198
So I'm not saying no code comments.

144
00:08:14.198 --> 00:08:18.586
I'm simply saying shift our perspective
from imperative to declarative.

145
00:08:18.586 --> 00:08:21.977
Focus on, let's allow the system
to do what it does best,

146
00:08:21.977 --> 00:08:23.649
it figures things out best.

147
00:08:23.649 --> 00:08:29.160
And let's focus our code on why we need
that, why we need that what outcome.

148
00:08:30.380 --> 00:08:32.510
What is it going to accomplish?

149
00:08:32.510 --> 00:08:35.150
And why is that useful to us?

150
00:08:36.330 --> 00:08:40.100
That's what our code should look like
to whatever extent we possibly can.

151
00:08:40.100 --> 00:08:41.460
And to the extent that we can't,

152
00:08:41.460 --> 00:08:44.140
that's what our code comments
should be explaining.

153
00:08:44.140 --> 00:08:46.060
Are you following me?

154
00:08:46.060 --> 00:08:49.590
So we wanna shift in this direction and
that is one of the biggest reasons for

155
00:08:49.590 --> 00:08:53.150
why functional programming,
because functional programming is,

156
00:08:53.150 --> 00:08:55.850
by its very nature, more declarative.

157
00:08:57.060 --> 00:09:00.000
You notice that I'm couching this
in relative terminology because

158
00:09:00.000 --> 00:09:01.350
there really aren't a lot of absolutes.

159
00:09:01.350 --> 00:09:04.790
It's not like there's a little check box
that says, functional programming is

160
00:09:04.790 --> 00:09:07.436
definitely declarative and
everything else is definitely not.

161
00:09:07.436 --> 00:09:08.610
That's not how it is.

162
00:09:08.610 --> 00:09:09.680
It's a spectrum.

163
00:09:09.680 --> 00:09:10.360
It's relative.

164
00:09:11.420 --> 00:09:14.240
From whatever perspective
you come at that question,

165
00:09:14.240 --> 00:09:19.030
a piece of code could both look
imperative or declarative.

166
00:09:20.320 --> 00:09:23.500
If you've done lots of very
declarative coding and

167
00:09:23.500 --> 00:09:27.240
then you look at something that's a little
less declarative like a four loop,

168
00:09:27.240 --> 00:09:29.020
you're gonna say that's imperative.

169
00:09:30.470 --> 00:09:34.610
But if you've done nothing but ones and
zeros or assembly language programming,

170
00:09:34.610 --> 00:09:37.350
and then you see something like a for
loop, you're gonna say, wow,

171
00:09:37.350 --> 00:09:38.328
that's pretty declarative.

172
00:09:38.328 --> 00:09:40.690
You follow where I'm coming from?

173
00:09:41.980 --> 00:09:44.390
So it's perspective, it's relative.

174
00:09:44.390 --> 00:09:48.775
But to whatever extent that we can shift
the focus for the reader of our code

175
00:09:48.775 --> 00:09:53.375
towards the declarative away from
the imperative, it's gonna be easier for

176
00:09:53.375 --> 00:09:57.855
them to understand, not only for
them but also for us, our future selves.

