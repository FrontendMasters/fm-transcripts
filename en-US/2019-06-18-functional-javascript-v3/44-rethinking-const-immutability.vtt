WEBVTT

1
00:00:00.040 --> 00:00:04.699
&gt;&gt; Kyle Simpson: Here's another reason
why I'm kind of concerned about

2
00:00:04.699 --> 00:00:08.872
the proliferation of const
within our language.

3
00:00:08.872 --> 00:00:12.076
There is a lot of baggage that
comes with the const keyword.

4
00:00:12.076 --> 00:00:15.900
Certainly this is not a new invention for
the JavaScript language.

5
00:00:15.900 --> 00:00:19.900
Const was added to languages decades ago.

6
00:00:19.900 --> 00:00:23.585
And if you look even on a site like
Stack Overflow and do a search for

7
00:00:23.585 --> 00:00:27.002
questions about a const keyword,
you can find thousands and

8
00:00:27.002 --> 00:00:31.357
thousands of questions and problems
that people have had with this keyword,

9
00:00:31.357 --> 00:00:35.380
in basically every language
that it's ever been added to.

10
00:00:35.380 --> 00:00:37.291
And I think one of the root reasons,

11
00:00:37.291 --> 00:00:40.990
if I'm trying to approach that
question as an educator, as somebody

12
00:00:40.990 --> 00:00:45.158
that tries to understand what problems
people who are learning things have.

13
00:00:45.158 --> 00:00:48.210
And what they need to do
to get over those problems.

14
00:00:48.210 --> 00:00:52.150
When I look at it from that lens, I think
the real problem comes down to the English

15
00:00:52.150 --> 00:00:57.690
language being difficult to parse
alongside of programming language.

16
00:00:57.690 --> 00:01:03.420
When we say the word constant, a lot of
us mean, something that doesn't change.

17
00:01:03.420 --> 00:01:06.870
When we say that in sort of everyday
language, if we said the temperature has

18
00:01:06.870 --> 00:01:11.110
been constant today, it hasn't
changed today, that's what we mean.

19
00:01:11.110 --> 00:01:15.300
So we're implying something that doesn't
change, and that's to this gray area,

20
00:01:15.300 --> 00:01:19.100
what thing is it that's not
changing with a constant?

21
00:01:19.100 --> 00:01:24.165
So if I point const at a value,
if I point a const declaration at a value,

22
00:01:24.165 --> 00:01:29.167
that itself cannot change like 6.5,
that's sort of a moot point.

23
00:01:29.167 --> 00:01:32.090
[LAUGH] The value can't change anyway,
so it doesn't matter.

24
00:01:32.090 --> 00:01:36.550
But if I point it at a thing that can
change, for example, an array, now all of

25
00:01:36.550 --> 00:01:40.530
a sudden, we see that there is a nuance
difference that is really important.

26
00:01:40.530 --> 00:01:44.060
It's nuanced, but actually,
it should be the whole thing.

27
00:01:44.060 --> 00:01:48.470
Because the question is whether or not
we care about reassigning a variable, or

28
00:01:48.470 --> 00:01:53.330
whether we care about a value that
could be mutated, having been changed.

29
00:01:53.330 --> 00:01:55.982
For example, adding or
removing an element from an array, or

30
00:01:55.982 --> 00:01:58.077
reassigning one of
the properties of an object.

31
00:01:58.077 --> 00:02:02.005
Those are mutations to a value that
are possible with certain value types,

32
00:02:02.005 --> 00:02:06.570
like arrays and objects, which basically
aren't possible with a number or a string.

33
00:02:07.590 --> 00:02:10.243
So when we use a const
with something primitive,

34
00:02:10.243 --> 00:02:13.552
that isn't already changeable,
it's not such a big deal.

35
00:02:13.552 --> 00:02:16.580
The nuance doesn't present itself.

36
00:02:16.580 --> 00:02:19.940
But when you start, for example,
assigning functions to const,

37
00:02:19.940 --> 00:02:23.080
like we're doing here on line 3,
functions are actually objects.

38
00:02:23.080 --> 00:02:24.940
And they can have properties on them.

39
00:02:24.940 --> 00:02:29.980
That isn't typically done that much, but
you can use a function as an object.

40
00:02:29.980 --> 00:02:33.000
And of course,
that means the value can be mutated.

41
00:02:33.000 --> 00:02:36.793
And even worse, when you use const
with real objects or with real arrays,

42
00:02:36.793 --> 00:02:39.361
you create this confusion,
I think, in people,

43
00:02:39.361 --> 00:02:43.732
where they think in their mind initially,
that is a value that isn't gonna change.

44
00:02:43.732 --> 00:02:44.782
When actually,

45
00:02:44.782 --> 00:02:49.970
what the const keyword is saying is it's
an assignment that isn't gonna change.

46
00:02:49.970 --> 00:02:54.080
So if I create an array and then assign
it with a const declaration, and

47
00:02:54.080 --> 00:02:56.180
then later that value changes,

48
00:02:56.180 --> 00:02:59.989
the most likely outcome is that
the reader is gonna be confused.

49
00:03:01.440 --> 00:03:05.060
Certainly you can learn to get
along with the const keyword.

50
00:03:05.060 --> 00:03:09.350
Certainly you can learn that keyword, you
can learn its mechanics, you can use it so

51
00:03:09.350 --> 00:03:12.090
often that that becomes not a problem for
you.

52
00:03:12.090 --> 00:03:16.610
But the default reaction for programmers
seems to be to get it confused,

53
00:03:16.610 --> 00:03:19.740
which is why there's so
many questions on Stack Overflow about it.

54
00:03:19.740 --> 00:03:22.180
People saying, well I declared it
with a const and then it changed, or

55
00:03:22.180 --> 00:03:24.820
it wasn't declared with a const,
and it didn't change.

56
00:03:24.820 --> 00:03:27.820
I mean,
it just creates perpetual confusion.

57
00:03:27.820 --> 00:03:31.320
So much so that some programming
language communities had so

58
00:03:31.320 --> 00:03:33.840
much trouble with it
that the language itself,

59
00:03:33.840 --> 00:03:38.310
namely I'm talking about Java here, they
basically deprecated the const keyword and

60
00:03:38.310 --> 00:03:41.750
introduced a new keyword
in its place called final.

61
00:03:41.750 --> 00:03:45.380
Because const had this English
language baggage attached to it,

62
00:03:45.380 --> 00:03:49.218
that said it's a constant,
it's a thing that's not gonna change.

63
00:03:49.218 --> 00:03:53.997
And now we're saying final sort of
implies it's the final assignment of this

64
00:03:53.997 --> 00:03:54.746
variable.

65
00:03:54.746 --> 00:03:59.392
I guess that's helped the Java community,
I'm certainly not a Java programmer.

66
00:03:59.392 --> 00:04:02.560
But they had to make that change
because people were confused by it.

67
00:04:03.610 --> 00:04:06.540
And I've set up this entire
course in the context of

68
00:04:06.540 --> 00:04:08.670
we want to communicate
better with our code.

69
00:04:08.670 --> 00:04:14.310
Why would we use a feature which has long
historical precedent for confusing people?

70
00:04:16.050 --> 00:04:19.128
So that's where the real
trouble that I have comes from.

71
00:04:19.128 --> 00:04:22.520
It starts out already in the negative,
if you will.

72
00:04:22.520 --> 00:04:26.460
And with any programming language feature,
with any framework feature,

73
00:04:26.460 --> 00:04:32.750
the question that needs to be asked is,
does that thing carry its own weight?

74
00:04:32.750 --> 00:04:36.580
Does it have enough benefit to overcome
any potential downsides that it

75
00:04:36.580 --> 00:04:37.080
may present?

76
00:04:38.520 --> 00:04:41.180
Most of the time,
I think we'd say that would be true.

77
00:04:41.180 --> 00:04:45.345
But with the const keyword, my claim is,
it doesn't really carry its own weight.

78
00:04:45.345 --> 00:04:50.650
If it's gonna trip people up, especially
the new readers of a piece of code,

79
00:04:50.650 --> 00:04:52.620
or people that aren't yet
familiar with the thing,

80
00:04:52.620 --> 00:04:55.820
if it's going to have that strong
potential to trip people up,

81
00:04:55.820 --> 00:04:59.480
that strong decades-long precedent for
tripping people up.

82
00:04:59.480 --> 00:05:04.009
Then it ought to provide a really
substantial benefit to our program to

83
00:05:04.009 --> 00:05:05.630
justify its inclusion.

84
00:05:07.100 --> 00:05:11.780
And the claims of its benefit are I think,
at best, weak.

85
00:05:13.240 --> 00:05:18.270
So for example, in this slide,
we see a const declaration on line 2,

86
00:05:18.270 --> 00:05:20.642
another const declaration on line 3.

87
00:05:21.840 --> 00:05:24.880
And then of course line 8,
since it's named that way,

88
00:05:24.880 --> 00:05:26.860
it sort of implies it's
doing a side effect.

89
00:05:26.860 --> 00:05:30.360
It's writing to a database or
changing a record in the DOM, or

90
00:05:30.360 --> 00:05:31.580
who knows what it's doing.

91
00:05:31.580 --> 00:05:36.460
But the point that I'm making is that
this is a relatively short block of code.

92
00:05:36.460 --> 00:05:40.449
It's only seven lines of code
inside of the curly brace blocks.

93
00:05:41.840 --> 00:05:45.660
We're told many times that we
should keep our blocks short,

94
00:05:45.660 --> 00:05:48.970
that we shouldn't be writing hundreds or
thousands of line-long blocks,

95
00:05:48.970 --> 00:05:51.150
because it's hard for
the reader to understand things.

96
00:05:51.150 --> 00:05:55.210
My own personal kind of style guide,
if you will, or

97
00:05:55.210 --> 00:05:57.770
what I try to keep is I
try to keep no block,

98
00:05:57.770 --> 00:06:02.420
no function larger than what I can
see on the screen at any given time.

99
00:06:02.420 --> 00:06:08.010
And at my general zoom level,
that's about 20, maybe 25 lines at most.

100
00:06:08.010 --> 00:06:11.228
So if it's longer than that,
I'm immediately thinking to myself,

101
00:06:11.228 --> 00:06:12.950
I should be refactoring this thing.

102
00:06:12.950 --> 00:06:16.810
I should be trying to break it
down into 10, 15, 20 line at most.

103
00:06:16.810 --> 00:06:19.027
I shouldn't be having
100-line long blocks.

104
00:06:19.027 --> 00:06:22.109
And I'll be honest with you, you can see
a lot of my code, if you go on my Github,

105
00:06:22.109 --> 00:06:23.280
that breaks that rule.

106
00:06:23.280 --> 00:06:26.473
So I'm not always perfect, in fact,
I'm often not perfect at that.

107
00:06:26.473 --> 00:06:30.177
But it's a general guide for myself
that I don't want to have these long,

108
00:06:30.177 --> 00:06:31.940
long blocks that are hard to read.

109
00:06:31.940 --> 00:06:36.732
So if you're following that sort of thing,
if you're following what the general best

110
00:06:36.732 --> 00:06:41.190
practice is to have a short block,
we need to understand that the idea of

111
00:06:41.190 --> 00:06:45.090
assignment is inherently related
to the idea of lexical scope.

112
00:06:46.680 --> 00:06:51.390
The idea of assigning to a variable
is inextricably linked to the idea

113
00:06:51.390 --> 00:06:54.660
that that variable belongs
to a particular scope.

114
00:06:54.660 --> 00:06:57.490
When we do const shippingCost on line 2,

115
00:06:57.490 --> 00:07:02.760
we have created a variable that exists
only for the next six lines of code.

116
00:07:02.760 --> 00:07:05.500
It does not exist anywhere
else in the program.

117
00:07:05.500 --> 00:07:09.740
And that means that nowhere else in
the program could possibly reassign it.

118
00:07:11.200 --> 00:07:13.669
We have a short block of code, and

119
00:07:13.669 --> 00:07:19.067
we have only a few lines of code that
could possibly do the reassignment.

120
00:07:19.067 --> 00:07:23.196
So the typical argument is,
well const signals intent.

121
00:07:23.196 --> 00:07:27.665
It tells the developer that's reading
your code, you don't have to worry,

122
00:07:27.665 --> 00:07:30.220
it won't get reassigned later in the code.

123
00:07:31.430 --> 00:07:33.800
But if we're following best practice,

124
00:07:33.800 --> 00:07:37.410
that's not very many lines of code that
it's asserting anything about anyway.

125
00:07:39.030 --> 00:07:43.410
It's not as if we have tens of thousands
of lines of code that we couldn't possibly

126
00:07:43.410 --> 00:07:46.250
as a human juggle,
right here we have six other lines.

127
00:07:47.300 --> 00:07:51.110
And there's another way to say
to the reader of your code,

128
00:07:51.110 --> 00:07:54.700
I'm not gonna reassign a thing, and
it's to simply just not reassign it.

129
00:07:56.100 --> 00:07:56.870
As matter of fact,

130
00:07:56.870 --> 00:07:59.430
if you're doing functional programming,
don't assign at all.

131
00:08:00.450 --> 00:08:03.260
As little as possible, do assignments.

132
00:08:04.570 --> 00:08:09.078
So I'm not sure that the const keyword is
actually providing all that much benefit,

133
00:08:09.078 --> 00:08:10.856
even in this best case scenario,

134
00:08:10.856 --> 00:08:13.727
where you're saying to the developer,
hey listen.

135
00:08:13.727 --> 00:08:17.605
I'm not gonna reassign it, because most
of the lines that could be reassigned

136
00:08:17.605 --> 00:08:20.300
are already clearly visible to you.

137
00:08:20.300 --> 00:08:22.050
And you can see that it's
not being reassigned.

138
00:08:23.340 --> 00:08:24.730
In these particular cases,

139
00:08:24.730 --> 00:08:28.320
since we're inside of a block,
my preference is to use the let keyword.

140
00:08:28.320 --> 00:08:32.229
And I use the var keyword at the function
level scope rather than the let,

141
00:08:32.229 --> 00:08:35.048
because it says to readers,
and has for 23 years,

142
00:08:35.048 --> 00:08:37.635
this variable belongs
to the entire function.

143
00:08:41.384 --> 00:08:45.620
&gt;&gt; Kyle Simpson: So maybe assignment
immutability isn't such a big deal.

144
00:08:45.620 --> 00:08:49.780
Maybe it isn't the problem that we really
ought to be concerning ourselves with.

145
00:08:49.780 --> 00:08:52.840
But there is a much bigger deal that
I think we should be concerning

146
00:08:52.840 --> 00:08:54.170
ourselves with.

147
00:08:54.170 --> 00:08:58.210
That's the question of value immutability.

148
00:08:58.210 --> 00:09:02.970
Because unlike assignments, which
are lexically scoped by their literal

149
00:09:02.970 --> 00:09:08.480
definition, they are lexically scoped to
generally a small portion of our program.

150
00:09:08.480 --> 00:09:15.040
Values, especially values that are passed
by reference, are completely portable.

151
00:09:15.040 --> 00:09:18.578
They can go anywhere in the program,
and even beyond the program to other

152
00:09:18.578 --> 00:09:21.780
third-party code that is included and
running.

153
00:09:23.540 --> 00:09:26.150
So if you take an array that
has some numbers in it and

154
00:09:26.150 --> 00:09:30.360
you pass it somewhere else, you have
to be asking yourself the question,

155
00:09:30.360 --> 00:09:32.700
what is going to happen to that value?

