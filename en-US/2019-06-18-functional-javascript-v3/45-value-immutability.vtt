WEBVTT

1
00:00:00.060 --> 00:00:03.660
&gt;&gt; Kyle Simpson: Value immutability
is a much more important question.

2
00:00:04.700 --> 00:00:08.240
If we were trying to come up with
some sort of rating system here,

3
00:00:08.240 --> 00:00:11.270
I'd say 99% of the problems that we face

4
00:00:12.410 --> 00:00:17.370
come from a value being mutated
in a way that we didn't expect.

5
00:00:17.370 --> 00:00:21.590
There's some global state object,
that has 1500 properties on it.

6
00:00:21.590 --> 00:00:24.890
And somewhere some weird obscure
piece of code, change two or

7
00:00:24.890 --> 00:00:28.700
three of those properties in a way that we
didn't expect, that's a value mutation.

8
00:00:28.700 --> 00:00:31.929
It has absolutely nothing to do with
whether you use the const keyword or not.

9
00:00:33.780 --> 00:00:36.955
So value immutability is the big problem.

10
00:00:36.955 --> 00:00:42.110
99% of the problem comes from value
immutability or value mutability

11
00:00:42.110 --> 00:00:47.700
rather and only 1% of the time at best
does it ever come from reassignment.

12
00:00:47.700 --> 00:00:50.650
As a matter of fact, and
I'm being completely honest with you.

13
00:00:50.650 --> 00:00:54.810
As a matter of fact based
upon my own sort of

14
00:00:55.840 --> 00:00:58.410
introspection about my processes and code.

15
00:00:59.640 --> 00:01:03.090
Never once, not a single time

16
00:01:04.390 --> 00:01:09.510
has there ever been a case where one of
the bugs that I was trying to fix was,

17
00:01:09.510 --> 00:01:12.570
oops, I reassigned a thing that
I wasn't planning to assign.

18
00:01:14.170 --> 00:01:16.410
That's never once been
the problem that I've had, and

19
00:01:16.410 --> 00:01:19.040
I'm not saying that that's never
been a problem for anybody.

20
00:01:19.040 --> 00:01:24.120
I'm sure that const exists because
somebody somewhere reassigned a thing.

21
00:01:24.120 --> 00:01:28.670
But in 25 years of programming experience
across a variety of languages,

22
00:01:28.670 --> 00:01:31.850
I've written I can't
even count how many bugs,

23
00:01:31.850 --> 00:01:35.300
I'm way better than all of you
at writing bugs, I'm good at it.

24
00:01:35.300 --> 00:01:40.310
And of all the bugs that I've written,
never once has the problem been, oops,

25
00:01:40.310 --> 00:01:45.250
I meant to leave x alone and instead
I should have written y or something,

26
00:01:45.250 --> 00:01:48.790
that just isn't generally
the problem that I face.

27
00:01:48.790 --> 00:01:53.210
And so I'm skeptical as to whether or
not that assignment problem is really so

28
00:01:53.210 --> 00:01:53.890
widespread.

29
00:01:55.210 --> 00:01:59.780
And I think we're not getting the proper
attention on the value mutability problem,

30
00:01:59.780 --> 00:02:00.590
did you have a question?

31
00:02:00.590 --> 00:02:04.724
&gt;&gt; Speaker 2: I was saying, the only
example I've ever seen is doing a for

32
00:02:04.724 --> 00:02:08.115
loop, and
then accidentally reassigning i when

33
00:02:08.115 --> 00:02:10.830
you use two, four loops or whatever
&gt;&gt; Kyle Simpson: That's

34
00:02:10.830 --> 00:02:11.670
a great point, right?

35
00:02:11.670 --> 00:02:16.970
So like yes you could definitely
accidentally have a variable

36
00:02:16.970 --> 00:02:20.410
updated inside of a for loop and
then it throws the for loop off.

37
00:02:20.410 --> 00:02:24.200
Some people do that on purpose though
like write for loops where they skip or

38
00:02:24.200 --> 00:02:26.100
go back and
I have written code like that before, and

39
00:02:26.100 --> 00:02:30.010
it's always been a pain in the neck
to manage and debug later.

40
00:02:30.010 --> 00:02:33.970
It's always been a terrible idea, but
I'm glad you bring up this point because

41
00:02:33.970 --> 00:02:38.050
that's an example where it theoretically
could be a problem and guess what?

42
00:02:38.050 --> 00:02:40.770
Const doesn't solve that problem for us,

43
00:02:40.770 --> 00:02:46.290
because you by definition have to update
that incrementor in your four loop.

44
00:02:46.290 --> 00:02:48.189
So you can't declare it
with a const anyway.

45
00:02:49.230 --> 00:02:50.750
So yes it's a problem, but

46
00:02:50.750 --> 00:02:53.320
it's not a problem that the cost
key word is solving for us.

47
00:02:55.550 --> 00:02:59.920
Let's take a look at some
examples of value mutability and

48
00:02:59.920 --> 00:03:02.840
how we can address this
question of value mutability.

49
00:03:04.010 --> 00:03:07.050
So here I'm creating an order
of details object and

50
00:03:07.050 --> 00:03:09.670
I'm conditionally adding some stuff in.

51
00:03:09.670 --> 00:03:10.304
So I need for

52
00:03:10.304 --> 00:03:14.560
this thing to be able to mutated because
I need to run some other conditions, and

53
00:03:14.560 --> 00:03:18.769
maybe update some properties or things,
like I am doing on line 7 through 9.

54
00:03:18.769 --> 00:03:22.759
And then line 11, I pass that object and
because it's an object,

55
00:03:22.759 --> 00:03:24.720
it's passed by reference.

56
00:03:24.720 --> 00:03:27.700
I pass that object by reference
into this process order function.

57
00:03:28.830 --> 00:03:32.552
Now, do any of us have any idea
what process order is doing?

58
00:03:32.552 --> 00:03:35.560
Well we don't see it here, it's not local.

59
00:03:35.560 --> 00:03:37.090
So the answer is, no.

60
00:03:37.090 --> 00:03:39.770
We don't know what process order is doing.

61
00:03:39.770 --> 00:03:43.510
Can we go and look at all the code
in processOrder and figure out?

62
00:03:43.510 --> 00:03:48.880
Sure, but if there was something
in this block after processOrder,

63
00:03:48.880 --> 00:03:52.100
that was relying upon orderDetails.

64
00:03:52.100 --> 00:03:55.040
We now automatically would
have to have the suspicion,

65
00:03:55.040 --> 00:03:58.690
if we're paying attention,
we have to have the suspicion,

66
00:03:58.690 --> 00:04:01.810
did something change about
the orderDetails object?

67
00:04:01.810 --> 00:04:04.910
And if that isn't our intuition to ask,

68
00:04:04.910 --> 00:04:07.639
then it is almost certainly gonna be
the source of a bug at some point.

69
00:04:09.570 --> 00:04:12.420
One of the things that we do as
functional programmers is try to

70
00:04:12.420 --> 00:04:14.410
predict where the bugs are gonna be, and

71
00:04:14.410 --> 00:04:18.410
avoid them before they occur by using
patterns where they can't happen.

72
00:04:19.790 --> 00:04:23.910
And passing a value by reference,
where somebody could accidentally or

73
00:04:23.910 --> 00:04:28.500
intentionally change a thing in a way that
we're not expecting is like putting up

74
00:04:28.500 --> 00:04:33.176
a giant neon sign that says, please create
a bug here that I haven't planned for.

75
00:04:34.945 --> 00:04:37.278
&gt;&gt; Kyle Simpson: And this is why
functional programmers take this so

76
00:04:37.278 --> 00:04:37.892
seriously.

77
00:04:37.892 --> 00:04:41.150
This is why immutability is one
of the most critical topics and

78
00:04:41.150 --> 00:04:46.000
I think often under covered topics
in all the functional programming.

79
00:04:46.000 --> 00:04:50.220
Because values get passed everywhere,
we pass arrays and objects and

80
00:04:50.220 --> 00:04:52.210
functions all over the place.

81
00:04:52.210 --> 00:04:56.560
And we should be asking ourselves
every time we pass it, how do I know

82
00:04:56.560 --> 00:04:59.570
that that isn't gonna change in a way
that is gonna create a bug in my program.

83
00:05:00.570 --> 00:05:03.920
When I pass the number 42,
or the string hello world,

84
00:05:03.920 --> 00:05:06.890
I'm not worried cuz I know
the language already protects me, but

85
00:05:06.890 --> 00:05:10.669
when I pass an object in array,
I don't have that same level of guarantee.

86
00:05:12.300 --> 00:05:14.190
So even without going and

87
00:05:14.190 --> 00:05:18.350
looking at the processOrder function
I'm gonna make an assertion

88
00:05:18.350 --> 00:05:23.070
that the reader of this code could benefit
from some sort of process or convention.

89
00:05:23.070 --> 00:05:25.900
That would allow them
to know they can trust

90
00:05:25.900 --> 00:05:28.320
the orderDetails is not gonna get changed.

