WEBVTT

1
00:00:00.000 --> 00:00:04.636
All right, so now your job is to do
the same thing for our banner, right,

2
00:00:04.636 --> 00:00:08.892
which should be dynamically loaded,
right, still in this case.

3
00:00:08.892 --> 00:00:11.781
And whatever styles you want,
turn the text red, I don't care, right?

4
00:00:11.781 --> 00:00:15.325
The point is we wanna
make a banner.module.css.

5
00:00:15.325 --> 00:00:20.107
And then we wanna see what happens
to both the files you'd output as we

6
00:00:20.107 --> 00:00:24.653
build it as well as in development
when we look at the network tab.

7
00:00:24.653 --> 00:00:27.459
And what I would encourage you
to do is try it both ways,

8
00:00:27.459 --> 00:00:28.926
see what the difference is.

9
00:00:28.926 --> 00:00:30.635
Do a little bit of science, right?

10
00:00:30.635 --> 00:00:33.053
What happens if I
dynamically import banner?

11
00:00:33.053 --> 00:00:34.754
What happens if I don't?

12
00:00:34.754 --> 00:00:36.963
How does that change how
the bundle is built?

13
00:00:36.963 --> 00:00:39.843
Because developing a little
bit of an intuitive

14
00:00:39.843 --> 00:00:44.669
understanding of what different decisions
in the way you structure your code.

15
00:00:44.669 --> 00:00:49.763
What that does to your build process means
you can spend more time about writing code

16
00:00:49.763 --> 00:00:54.784
in a way that ends up being performant and
less time tweaking little things that you

17
00:00:54.784 --> 00:00:59.633
copy and paste it from stack overflow
into a certain build tool.config.js.

18
00:00:59.633 --> 00:01:02.719
And hoping for the best and
then wondering why it doesn't work, right?

19
00:01:02.719 --> 00:01:07.194
Basically we follow a certain set of
coding standards that are just effectively

20
00:01:07.194 --> 00:01:09.408
performant ways to write JavaScript.

21
00:01:09.408 --> 00:01:13.977
Vite will handle a lot of it for
us, and we'll get it for free.

22
00:01:13.977 --> 00:01:19.451
So try to do it with the dynamic
import of banner.js, try it without.

23
00:01:19.451 --> 00:01:21.422
See what happens if you
make it .module.css,

24
00:01:21.422 --> 00:01:23.107
see what happens if you don't, right?

25
00:01:23.107 --> 00:01:26.243
And we can kind of do a little bit
science, like less about what I told you

26
00:01:26.243 --> 00:01:29.695
how it works and more about you actually
with your hands on seeing how it works,

27
00:01:29.695 --> 00:01:32.082
cuz that's really the way
it's gonna stick for you.

28
00:01:35.788 --> 00:01:37.115
Let's try a few things.

29
00:01:37.115 --> 00:01:40.323
We probably wanna make this dynamic again,
and

30
00:01:40.323 --> 00:01:44.183
a few changes from when I was
just talking in live coding.

31
00:01:44.183 --> 00:01:47.186
Let me change this back to styles and
call this one styles.count.

32
00:01:47.186 --> 00:01:49.998
Mostly cuz I have a count variable here,
and

33
00:01:49.998 --> 00:01:55.097
I don't wanna have to think about how
the hoisting rule is going to affect that.

34
00:01:55.097 --> 00:01:56.645
So we'll kind of keep those separate for
now.

35
00:01:56.645 --> 00:01:59.326
And this is, I think,
a pretty decent convention.

36
00:01:59.326 --> 00:02:01.940
And the other thing is, to see the chunks,

37
00:02:01.940 --> 00:02:06.893
we're gonna just make that dynamic again,
just like we had the very beginning.

38
00:02:06.893 --> 00:02:10.887
So we'll say in this case,

39
00:02:10.887 --> 00:02:16.096
if count is less than 0, we'll say

40
00:02:16.096 --> 00:02:21.316
import('./banner.js').

41
00:02:21.316 --> 00:02:24.496
Then we've got, what was it,
addBanner, yeah.

42
00:02:27.978 --> 00:02:36.693
Cool, and
then we'll do addBanner('Below zero!').

43
00:02:36.693 --> 00:02:39.612
Cool [SOUND].

44
00:02:41.798 --> 00:02:45.436
And that's gotta be in parentheses.

45
00:02:47.402 --> 00:02:51.068
Sweet, all right, so we've got that
in place, so now it's dynamic again.

46
00:02:51.068 --> 00:02:56.456
And then what we're gonna do is

47
00:02:56.456 --> 00:03:03.924
we're gonna make banner.module.css.

48
00:03:03.924 --> 00:03:07.713
We'll say a bannerText.

49
00:03:07.713 --> 00:03:09.676
I normally like kebab case, but

50
00:03:09.676 --> 00:03:13.166
I understand that when I go
pull this into my JavaScript,

51
00:03:13.166 --> 00:03:18.061
it's gonna make me sad, and I'm gonna
have to use square brackets and string.

52
00:03:18.061 --> 00:03:24.536
So I will break my own rules in this case,
and I will make it camel case.

53
00:03:24.536 --> 00:03:28.872
We've got that, and
then we'll just say, I don't know,

54
00:03:28.872 --> 00:03:32.615
font color or just color: red,
that seems legit.

55
00:03:32.615 --> 00:03:34.119
And so we'll have that in place.

56
00:03:34.119 --> 00:03:38.693
And then what we'll do is, just for

57
00:03:38.693 --> 00:03:44.345
science, we will import {banner text},

58
00:03:47.617 --> 00:03:50.783
From banner.module.css.

59
00:03:50.783 --> 00:03:55.044
We'll add it to the class list

60
00:04:00.028 --> 00:04:03.503
Maybe not how I would normally do it,
but it'll work in this case.

61
00:04:07.156 --> 00:04:11.925
I will call container, and it will say

62
00:04:11.925 --> 00:04:18.790
container.classList.add(bannerText) class.

63
00:04:20.778 --> 00:04:24.381
And then we will go ahead and
we'll put it in there as well.

64
00:04:24.381 --> 00:04:27.050
And again, we mostly wanna see this as,

65
00:04:27.050 --> 00:04:30.910
cuz the banner itself will be
dynamic inside the counter.

66
00:04:30.910 --> 00:04:34.516
So we should see all that load as needed,
and

67
00:04:34.516 --> 00:04:38.520
we should see that reflect
in our bundle as well.

68
00:04:38.520 --> 00:04:40.758
And so we should have all that in place.

69
00:04:40.758 --> 00:04:45.178
And let's go take a look.

70
00:04:45.178 --> 00:04:47.449
So I'm gonna go to that
Network tab real quick.

71
00:04:47.449 --> 00:04:54.289
We'll just clear it in this case, and,
We'll go ahead and we'll decrement it.

72
00:04:54.289 --> 00:04:57.761
As you can see that,
then we load the to dynamically.

73
00:04:57.761 --> 00:05:01.546
And if I go to run the build,

74
00:05:05.193 --> 00:05:07.674
All that stuff is getting
broken out as needed,

75
00:05:07.674 --> 00:05:09.968
versus if it was all
needed at the same time,

76
00:05:09.968 --> 00:05:14.393
you would see it all be bundled together
and would all load simultaneously, right?

77
00:05:14.393 --> 00:05:17.225
So how you wanna split it is basically
on how you write your code and

78
00:05:17.225 --> 00:05:19.093
not on how you configure your build tools.

79
00:05:19.093 --> 00:05:19.801
Mark.

80
00:05:19.801 --> 00:05:23.127
&gt;&gt; Do you need to add the CSS extension?

81
00:05:23.127 --> 00:05:24.189
&gt;&gt; Where?

82
00:05:24.189 --> 00:05:25.273
&gt;&gt; The .css.

83
00:05:25.273 --> 00:05:27.368
&gt;&gt; I believe so.

84
00:05:27.368 --> 00:05:29.341
I mean, I don't like that,
I don't ever wanna do that.

85
00:05:29.341 --> 00:05:30.645
So we'll find out together.

86
00:05:33.128 --> 00:05:38.172
Yes, [LAUGH] and depending on what
version of TypeScript you're using and

87
00:05:38.172 --> 00:05:40.610
what version of the ES module spec,

88
00:05:40.610 --> 00:05:44.537
you don't even need to add
.js in some configurations.

89
00:05:44.537 --> 00:05:49.391
Not using Vite right now, but
you do need to have the .css

90
00:05:49.391 --> 00:05:54.466
because I could see it getting
confused otherwise as well.

91
00:05:54.466 --> 00:05:57.662
And most likely, knowing how
the plugins work, it is looking for

92
00:05:57.662 --> 00:05:59.825
this file extension exactly to process it.

93
00:05:59.825 --> 00:06:04.906
Cuz by definition, the browser and/or
node, but more importantly the browser

94
00:06:04.906 --> 00:06:09.628
in this case, doesn't know how to
import a CSS file to begin with, right?

95
00:06:09.628 --> 00:06:15.177
And so we've gotta do something to tell
Vite that we want the CSS file and

96
00:06:15.177 --> 00:06:17.688
not necessarily the .js file.

97
00:06:17.688 --> 00:06:20.180
Cool, so we can see that all
gets dynamically loaded.

