WEBVTT

1
00:00:00.020 --> 00:00:03.822
And so we've got a full course
website here, it's got these slides,

2
00:00:03.822 --> 00:00:08.280
it's got links to all the reboos we're
gonna be using, it's got all of my notes.

3
00:00:08.280 --> 00:00:12.525
It's got extra content that we
could tap into if we need to, or

4
00:00:12.525 --> 00:00:15.968
you can kind of use as
an extension in a little bit.

5
00:00:15.968 --> 00:00:23.332
But this is where everything that I say
hopefully if all goes according to plan.

6
00:00:23.332 --> 00:00:28.320
Everything I say is listed here as well
that you can refer to and build upon.

7
00:00:28.320 --> 00:00:30.444
So we'll head over there and

8
00:00:30.444 --> 00:00:34.968
we'll actually get started
with our very first, Vite app.

9
00:00:34.968 --> 00:00:39.587
What we're gonna do in the very beginning
is I have one repo in here that is

10
00:00:39.587 --> 00:00:41.042
called Vite starter.

11
00:00:41.042 --> 00:00:45.637
And, there's nothing particularly
special in this repo it's just

12
00:00:45.637 --> 00:00:49.515
mostly if we wanna show how to
load an image or pull in JSON or

13
00:00:49.515 --> 00:00:54.127
process markdown that happens to be
a repo that has some images in it.

14
00:00:54.127 --> 00:00:57.427
Has the mark down files,
has some JSON files has,

15
00:00:57.427 --> 00:01:02.946
some tests written some helper functions
that we can pull in, but it's just yeah.

16
00:01:02.946 --> 00:01:03.961
It's just a bunch,

17
00:01:03.961 --> 00:01:08.097
it's a basically a toy chest full of fun
things that we can kinda play around with.

18
00:01:08.097 --> 00:01:11.315
So you can kinda go here and
grab this vite-starter,

19
00:01:11.315 --> 00:01:14.402
there's a bunch of ways
that you can clone it down.

20
00:01:14.402 --> 00:01:18.686
There's a tool that's super useful
called div git which will kind of clone

21
00:01:18.686 --> 00:01:23.103
down the repo, And

22
00:01:23.103 --> 00:01:27.013
actually keep that one up and running.

23
00:01:31.114 --> 00:01:37.533
So I've got a copy of vite-starter in
here, and let's just take a quick tour.

24
00:01:37.533 --> 00:01:45.506
Really, all that you truly need to get
started with Vite is exactly two things,

25
00:01:45.506 --> 00:01:51.700
you need to NPM install Vite and
you need an index.html file.

26
00:01:51.700 --> 00:01:56.033
Once you have those two things, if those
are only the only things you have in this

27
00:01:56.033 --> 00:02:00.430
directory, you would be good to go, in
terms of starting with the Vite project,

28
00:02:00.430 --> 00:02:02.714
I guess maybe you need to package JSON to.

29
00:02:02.714 --> 00:02:07.225
But like, so NPM and knit dash dash
yes and then NPM install Vite,

30
00:02:07.225 --> 00:02:11.905
and touch index.html,
that's about all you need to get started,

31
00:02:11.905 --> 00:02:14.551
there's not a lot of configuration.

32
00:02:14.551 --> 00:02:17.297
In fact, for the like first few sections,

33
00:02:17.297 --> 00:02:20.591
I don't have a configuration file at all,
right?

34
00:02:20.591 --> 00:02:25.555
We're just going to do what Vite does for
us out of the box, and we're not going to

35
00:02:25.555 --> 00:02:30.373
like worry about configuring it in
the very beginning, we will configure it.

36
00:02:30.373 --> 00:02:32.681
That'll be what we spent a lot of
our time together doing today, but

37
00:02:32.681 --> 00:02:34.271
we're gonna see how easy
it is to get started.

38
00:02:34.271 --> 00:02:36.471
And then as we dive deep
into how powerful it is,

39
00:02:36.471 --> 00:02:39.832
that's when we'll see all the different
ways that we can configure it.

40
00:02:39.832 --> 00:02:43.754
So we'll go ahead here and if I look at my
package, JSON, you got a few ways you can

41
00:02:43.754 --> 00:02:47.775
start up this application, as you can see,
there's NPM, start and NPM run dev.

42
00:02:47.775 --> 00:02:51.374
This is a common pattern that you'll
see in a lot of Vite apps, but

43
00:02:51.374 --> 00:02:54.515
a lot of apps because if you're
using something PM, PM or

44
00:02:54.515 --> 00:02:57.078
something that supports mono repos, right?

45
00:02:57.078 --> 00:03:00.295
That will then start all the packages all
at once and apply across all of them.

46
00:03:00.295 --> 00:03:02.786
For us, we really don't care.

47
00:03:02.786 --> 00:03:07.833
So if you like NPM start great,
if you like NPM run dev, very cool.

48
00:03:07.833 --> 00:03:10.967
To build the application,
it's just going we yeah,

49
00:03:10.967 --> 00:03:14.868
we can choose to run the TypeScript
checker, if you're just using

50
00:03:14.868 --> 00:03:18.716
JavaScript really all you need is
vite build, so on and so forth.

51
00:03:18.716 --> 00:03:23.158
So I could for instance,
type make that a little

52
00:03:23.158 --> 00:03:28.055
bit bigger npx vite and
that will start up my server.

53
00:03:28.055 --> 00:03:34.992
I can do npm run dev, that'll start it up,
I can do npm start let's do that one.

54
00:03:34.992 --> 00:03:39.711
And you can see that it starts up a
development server and a few options here.

55
00:03:39.711 --> 00:03:43.819
One is that the default port is 5173,
why is that number?

56
00:03:43.819 --> 00:03:45.016
I have no idea.

57
00:03:45.016 --> 00:03:47.534
If you don't like that you can do --

58
00:03:47.534 --> 00:03:51.363
port 3,333 whatever port
makes you the happiest.

59
00:03:51.363 --> 00:03:55.349
You can also set that in the configuration
later if you really don't have this port

60
00:03:55.349 --> 00:03:58.031
number you don't feel like
you'll ever remember it.

61
00:03:58.031 --> 00:04:00.462
I'll give you a hint,
mine's set to 3,000 at work.

62
00:04:00.462 --> 00:04:03.575
So you can also do the -- host to
expose it locally on the network

63
00:04:03.575 --> 00:04:07.208
in case you wanna pull out your phone and
go visit your site on the network and

64
00:04:07.208 --> 00:04:10.051
then see what it actually looks
like on a physical device.

65
00:04:10.051 --> 00:04:15.219
But for the most part,
we can kind of just go to this site,

66
00:04:15.219 --> 00:04:18.041
and you see my beautiful page.

67
00:04:18.041 --> 00:04:22.602
Right now there's no JavaScript,
there's no CSS, there is,

68
00:04:22.602 --> 00:04:25.726
I guess, some amount of HTML for
a counter,

69
00:04:25.726 --> 00:04:29.965
that doesn't work because
there's no JavaScript or CSS.

70
00:04:29.965 --> 00:04:31.844
And we're gonna add a few things to it.

71
00:04:31.844 --> 00:04:34.483
And if I look,
like I said before, right now,

72
00:04:34.483 --> 00:04:37.137
you can start with just
the index.html file.

73
00:04:37.137 --> 00:04:40.352
A package JSON with vite in fact,
if you haven't installed globally,

74
00:04:40.352 --> 00:04:42.442
I guess you don't even
need the package JSON,

75
00:04:42.442 --> 00:04:45.142
you can just do it with index.html
file in the same folder.

76
00:04:45.142 --> 00:04:48.421
And that's effectively all
you need to get started.

77
00:04:48.421 --> 00:04:52.897
Now, that doesn't do a lot for us, but in
terms of like my promise that like there's

78
00:04:52.897 --> 00:04:56.554
not a lot of configuration and
boilerplate that you need to do in order

79
00:04:56.554 --> 00:04:59.604
to get started,
I have at least kept that promise to you.

80
00:04:59.604 --> 00:05:04.202
And so we'll talk about now how to kind
of build it and extend on it from there.

81
00:05:04.202 --> 00:05:09.646
So, you know, there's right now nothing's

82
00:05:09.646 --> 00:05:14.391
just a plain old regular HTML document,

83
00:05:14.391 --> 00:05:19.286
there was nothing special in here at all.

84
00:05:19.286 --> 00:05:25.179
I could we don't need service workers,
we can just say something like console.log

85
00:05:25.179 --> 00:05:29.993
and like nothing like everything
you expect is gonna start this way,

86
00:05:29.993 --> 00:05:33.571
but let's go ahead and
get a sense of it real quick.

87
00:05:33.571 --> 00:05:38.386
There's to no one's surprise we log
something to the console, right?

88
00:05:38.386 --> 00:05:42.811
What would be cool, though,
is if we could import a file, right?

89
00:05:42.811 --> 00:05:48.498
I could, for instance,
I can go into this index.js,

90
00:05:48.498 --> 00:05:55.805
and I could say something like
console.log, hello from index.js.

91
00:05:55.805 --> 00:06:01.047
And just for funsies,
I'm going to do a document.,

92
00:06:01.047 --> 00:06:05.473
let's do query selector,
go get me an h1 and

93
00:06:05.473 --> 00:06:11.430
let's set the text content to
hello from index.js as well.

94
00:06:11.430 --> 00:06:16.400
This is gonna blow up,
we're gonna fix it, it's gonna blow up.

95
00:06:16.400 --> 00:06:23.620
So we can go back over, we didn't import
here, so let's go back into index.html.

96
00:06:23.620 --> 00:06:29.885
And the first thing I can try
to do is that I can just do src.

97
00:06:29.885 --> 00:06:36.546
Now, you'll notice that I'm using a local,
am not using from the public directly,

98
00:06:36.546 --> 00:06:41.464
am actually just referencing
a file on my file system, right?

99
00:06:41.464 --> 00:06:45.175
Like relative to where this
index.html is in my repo, and

100
00:06:45.175 --> 00:06:48.902
that's not normally what you
would do on this first file.

101
00:06:48.902 --> 00:06:51.628
You'd be like, okay, when it's built,
it's gonna be in disk, or

102
00:06:51.628 --> 00:06:54.689
it's gonna be at the root, or what have
you, and it's all gonna be in there.

103
00:06:54.689 --> 00:06:59.731
Actually, for us right now,
we can actually reference a local file.

104
00:06:59.731 --> 00:07:05.347
And now it should blow up,
can't set text context of no,

105
00:07:05.347 --> 00:07:09.684
and that is because it
loads before the h1.

106
00:07:09.684 --> 00:07:12.944
But that's not really our
big problem right now,

107
00:07:12.944 --> 00:07:16.987
it's just a problem that exists
temporarily at this moment.

108
00:07:16.987 --> 00:07:21.183
Which is, it would be cool then if I
could I've got this counter file here and

109
00:07:21.183 --> 00:07:25.862
that's got some logic in it that wires up
everything I need for the counter, right?

110
00:07:25.862 --> 00:07:31.045
What would be nice is if I could just say,
okay, cool,

111
00:07:31.045 --> 00:07:38.286
I want to import, I think it's
initialized counter from counter, right?

112
00:07:38.286 --> 00:07:42.507
And you'll see that blows up in
a different way can now use the import

113
00:07:42.507 --> 00:07:44.518
statement outside of a module?

114
00:07:44.518 --> 00:07:46.514
All right, right on.

115
00:07:46.514 --> 00:07:51.233
So the only thing that we really need
to do here in order to get everything

116
00:07:51.233 --> 00:07:55.256
working the way that we want to watch,
you're ready for it?

117
00:07:55.256 --> 00:08:00.158
type = "module", and the nice part
about this is this is not a vite

118
00:08:00.158 --> 00:08:03.518
specific thing,
this is just the modern web.

119
00:08:03.518 --> 00:08:06.237
A lot of what we're doing is
we're just going to assume

120
00:08:06.237 --> 00:08:08.730
that the modern web exists in everything,
Mark.

121
00:08:08.730 --> 00:08:13.544
&gt;&gt; We also don't have an h1
&gt;&gt; We have an h2 See what

122
00:08:13.544 --> 00:08:17.837
happens when I change stuff,
here we'll change it to an h2.

123
00:08:23.793 --> 00:08:25.211
Cool, and you can see it found it.

124
00:08:25.211 --> 00:08:29.767
Now, if I take out that module, module
actually waits till the very end to load,

125
00:08:29.767 --> 00:08:34.272
so the DOM content will be loaded as
deferred, so you get the original content.

126
00:08:34.272 --> 00:08:37.796
Let's take out the module and we'll see.

127
00:08:37.796 --> 00:08:41.949
This is what happens when you
try to mark up from memory.

128
00:08:41.949 --> 00:08:45.166
Right on and you can see it blows up,
e add the module.

129
00:08:45.166 --> 00:08:50.071
Two things happen, one, it loads
after the DOM originally loads, and

130
00:08:50.071 --> 00:08:53.937
then two we can now use we
can import whatever we want.

131
00:08:53.937 --> 00:08:57.880
We can go initializeCounter, and
we can use these import statements and

132
00:08:57.880 --> 00:08:59.372
everything just happens.

133
00:08:59.372 --> 00:09:03.937
And that is honestly the only vite
specific thing that we did in this

134
00:09:03.937 --> 00:09:08.908
entire file to get up and running in
the very beginning was using a local,

135
00:09:08.908 --> 00:09:13.657
just a relative file path to
the actual files that we're working on.

136
00:09:13.657 --> 00:09:17.849
And not necessarily where the initial
the build will eventually be.

137
00:09:17.849 --> 00:09:20.754
Beyond that, there's no theoretically,

138
00:09:20.754 --> 00:09:23.974
no needed entry point that
we needed to specify,

139
00:09:23.974 --> 00:09:29.247
nothing the index.html file is the entry
point just like it would be on the web.

140
00:09:29.247 --> 00:09:33.156
And everything kind of works and
is wired up from there.

141
00:09:33.156 --> 00:09:38.078
And that is out of the box the only
thing that we needed to do to

142
00:09:38.078 --> 00:09:40.151
get vite working at all.

143
00:09:40.151 --> 00:09:43.747
And so we have the ability to like
pull stuff in we've got it in place,

144
00:09:43.747 --> 00:09:45.556
we know that it loads afterwards.

145
00:09:45.556 --> 00:09:50.032
Now let's take a look at what the
production build will end up looking like.

146
00:09:50.032 --> 00:09:52.951
So we'll do npm run build, and

147
00:09:52.951 --> 00:09:58.467
it's gonna build everything
into this dist folder here.

148
00:09:58.467 --> 00:10:04.184
We can see it took everything in my
public directory which is favicons and

149
00:10:04.184 --> 00:10:07.008
icons and stuff along those lines.

150
00:10:07.008 --> 00:10:08.430
And it went ahead and

151
00:10:08.430 --> 00:10:14.455
it built an index.html that is effectively
the exact same code except for the instead

152
00:10:14.455 --> 00:10:19.487
of that relative path it swapped it
in with a built version of my assets.

153
00:10:19.487 --> 00:10:24.425
Which also put a little identifier at the
end so that we deployed to production and

154
00:10:24.425 --> 00:10:28.141
somebody has cache headers set
that this is a different URL.

155
00:10:28.141 --> 00:10:32.827
So they will not get the one cache they'll
get the new JavaScript in this case as

156
00:10:32.827 --> 00:10:37.024
well even if they have the browser
was gonna otherwise try to cache it.

157
00:10:37.024 --> 00:10:40.116
But that is the only change that
VITE really did to our HTML file

158
00:10:40.116 --> 00:10:43.328
it will actually look that you can
do all sorts of stuff in here and

159
00:10:43.328 --> 00:10:46.560
we'll see some of that towards the end but
you know for now like.

160
00:10:46.560 --> 00:10:49.477
Effectively, as long as you've
got an index.html file, and

161
00:10:49.477 --> 00:10:53.448
you can reference the JavaScript file,
you're configured and you're ready to go.

162
00:10:53.448 --> 00:10:57.192
We can go and we can see,
for instance, in assets,

163
00:10:57.192 --> 00:11:02.612
I've got that index.js, and
there's lots of stuff in this directory.

164
00:11:02.612 --> 00:11:07.430
And you'll notice that none of that is
in this assets folder all we've got this

165
00:11:07.430 --> 00:11:11.956
index I'm pretty sure if I hit save
prettier will do its best to unmodified

166
00:11:11.956 --> 00:11:12.992
that slightly.

167
00:11:12.992 --> 00:11:17.521
Which there's some code in here for
actually that preloading that we're

168
00:11:17.521 --> 00:11:20.967
talking about and
the changes based on the script tags.

169
00:11:20.967 --> 00:11:25.158
But other than that,
it's simply our code compiled and

170
00:11:25.158 --> 00:11:30.608
you can see parts of it that we have
in there, all thrown together for us.

171
00:11:30.608 --> 00:11:35.069
So, outta the box we didn't have to set up
any configuration, we didn't have to do

172
00:11:35.069 --> 00:11:39.116
anything, we could get up and running
with a new idea incredibly quickly.

173
00:11:39.116 --> 00:11:44.171
I think that's very powerful and like I
said, it wired up all our static assets

174
00:11:44.171 --> 00:11:49.477
for us, it swapped out that file with what
we actually needed, so on and so forth.

175
00:11:49.477 --> 00:11:55.063
And generally speaking,
if you have just one script tag,

176
00:11:55.063 --> 00:11:59.174
it will go ahead and
just make you one file.

177
00:11:59.174 --> 00:12:04.097
And if I imported something,
you can see that I have one file,

178
00:12:04.097 --> 00:12:09.609
we went to index.js, index.js imported,
that counter, right?

179
00:12:09.609 --> 00:12:13.778
But it's all one file because these like,
well, if I get this one dynamically and

180
00:12:13.778 --> 00:12:17.284
then you instantly need the next one
directly and not asynchronous or

181
00:12:17.284 --> 00:12:18.382
anything like that.

182
00:12:18.382 --> 00:12:21.859
I should just bundle them together instead
of making two HTTP requests, right?

183
00:12:21.859 --> 00:12:26.451
Like even with HTTP 2, where we think we
can like parallelize a bunch of stuff,

184
00:12:26.451 --> 00:12:29.821
like not making requests is
better than making requests.

185
00:12:29.821 --> 00:12:31.615
And in this case, the file is so

186
00:12:31.615 --> 00:12:34.722
small bundling it all together
will make it easier for

187
00:12:34.722 --> 00:12:39.222
us to get everything than to try to make
two requests for two different files.

188
00:12:39.222 --> 00:12:42.455
We'll even see a little bit later
that like if you have images or

189
00:12:42.455 --> 00:12:46.908
something along those lines and it's small
enough added things that can inline them,

190
00:12:46.908 --> 00:12:50.629
it will just inline them, trying to
save as many requests as possible and

191
00:12:50.629 --> 00:12:54.355
like other than us looking at it together,
like you will get it for free.

192
00:12:54.355 --> 00:12:59.020
And I'll show you how to like, opt in or
out of it, as well, but like a lot of this

193
00:12:59.020 --> 00:13:03.564
stuff will just happen for you with
very little, configuration on your end.

194
00:13:03.564 --> 00:13:08.550
Now, we could do some additional things
here if we wanna just kind of see how

195
00:13:08.550 --> 00:13:09.431
vite works.

196
00:13:09.431 --> 00:13:11.509
If you're only rendering one page,

197
00:13:11.509 --> 00:13:16.076
you probably need most of the JavaScript
and/or CSS that we haven't added yet.

198
00:13:16.076 --> 00:13:19.400
But if you're building a single-page
application that has some amount of

199
00:13:19.400 --> 00:13:22.843
client-side router, you know that
unless you go that client-side route.

200
00:13:22.843 --> 00:13:26.830
You don't need the modules for that route
until they navigate there, or a lot of

201
00:13:26.830 --> 00:13:30.774
times you can preload and stuff like
that that a framework will handle, Mark.

202
00:13:30.774 --> 00:13:34.628
&gt;&gt; Does it depend on the size of
the script or it always happens?

203
00:13:34.628 --> 00:13:37.159
Like if it knows that it needs it,
it will most likely,

204
00:13:37.159 --> 00:13:38.821
there's probably an upper bound.

205
00:13:38.821 --> 00:13:41.074
But generally speaking,
it will go ahead and

206
00:13:41.074 --> 00:13:44.690
try to tree shake as much as possible and
make one file unless we figure out

207
00:13:44.690 --> 00:13:48.746
ways to then basically through like
asynchronous loading of additional files.

208
00:13:48.746 --> 00:13:51.438
Whether that's through a router or
about to do it by hand, right?

209
00:13:51.438 --> 00:13:56.600
There's probably an upper bound, but
generally speaking, I haven't seen it.

