WEBVTT

1
00:00:00.090 --> 00:00:03.792
So your mission is,
we got this folder here with characters.

2
00:00:03.792 --> 00:00:07.710
And we got generate-characters,
that's fine, that's how I made them.

3
00:00:07.710 --> 00:00:11.302
But then we've got this
render-character test.

4
00:00:11.302 --> 00:00:15.878
And what we'd love to do is,
actually, let's see.

5
00:00:15.878 --> 00:00:18.959
I would go with the string, if I were you.

6
00:00:18.959 --> 00:00:22.750
There is a, yeah,
this render character, right,

7
00:00:22.750 --> 00:00:27.498
takes a character and
just makes it a very pretty string, right?

8
00:00:27.498 --> 00:00:32.707
What we wanna do is we wanna get all
the JSON files in this directory, right?

9
00:00:32.707 --> 00:00:35.401
And honestly, as long as they like, you
can even do something that's very simple.

10
00:00:35.401 --> 00:00:40.481
Cuz we can literally say for
each one, we just really

11
00:00:40.481 --> 00:00:46.040
want expect that given one
after we glob import, right?

12
00:00:46.040 --> 00:00:52.004
Expect that character,
To match snapshot, right?

13
00:00:52.004 --> 00:00:55.857
That way I have a whole bunch of data.

14
00:00:55.857 --> 00:00:58.415
As long as my function doesn't
change the way that it's formatted,

15
00:00:58.415 --> 00:00:59.351
it should work, right?

16
00:00:59.351 --> 00:01:03.669
But what we really want to do is we want
to glob import all of the JSON files that

17
00:01:03.669 --> 00:01:04.684
we have in there.

18
00:01:04.684 --> 00:01:07.980
And basically for each over them or
for loop over them, and

19
00:01:07.980 --> 00:01:10.274
just have it generate the test based on.

20
00:01:10.274 --> 00:01:14.161
So what I'll do a lot of times
when I get a issue from support,

21
00:01:14.161 --> 00:01:18.003
here's a use case that broke the UI
in a new and interesting way.

22
00:01:18.003 --> 00:01:21.606
I will almost always grab the JSON of
the output of that API response, and

23
00:01:21.606 --> 00:01:25.384
just toss it into the folder, and now I
have yet another test case to make sure

24
00:01:25.384 --> 00:01:29.373
that my unit tests parse a given piece of
data the way that they're supposed to.

25
00:01:29.373 --> 00:01:32.840
So your mission is to use import.glob.

26
00:01:32.840 --> 00:01:34.459
I would use the eager
version if I were you.

27
00:01:34.459 --> 00:01:37.667
If you hate yourself and wanna resolve
some promises, that's cool too.

28
00:01:37.667 --> 00:01:42.758
But for the most part, what we wanna do is
we want to glob over all the characters

29
00:01:42.758 --> 00:01:47.790
in this, all the JSON files in here,
and basically iterate over that array.

30
00:01:47.790 --> 00:01:51.524
And just make sure all our snapshots
match, and then you could delete one,

31
00:01:51.524 --> 00:01:52.591
add one, whatever,

32
00:01:52.591 --> 00:01:56.342
and you'll see that your test suite
will kinda grow and shrink as you want.

33
00:01:56.342 --> 00:01:59.093
I use it for fixture data,
I use it for logos,

34
00:01:59.093 --> 00:02:03.522
anything I'm iterating over that's
based on the file system, right?

35
00:02:03.522 --> 00:02:05.493
I think the import
metaglob is super useful.

36
00:02:05.493 --> 00:02:06.532
You might have other use cases.

37
00:02:06.532 --> 00:02:08.166
Those are the use cases I need it for.

38
00:02:08.166 --> 00:02:10.567
You might even be thinking,
I could use this in my app.

39
00:02:10.567 --> 00:02:13.507
Or my goal is sometimes, even if
right now you're, I don't know, and

40
00:02:13.507 --> 00:02:16.606
then two days later from now,
you feel like, yeah, I can solve that.

41
00:02:16.606 --> 00:02:19.881
Or six months from now, a new problem
comes up, I can solve it with this,

42
00:02:19.881 --> 00:02:22.858
and you save a bunch of work,
then my job is well done in this case.

43
00:02:22.858 --> 00:02:27.668
But for now, your job is to match
some snapshots on some JSON files.

44
00:02:27.668 --> 00:02:29.291
You have to struggle
a little bit with this one.

45
00:02:29.291 --> 00:02:32.301
Challenge mode went up a little bit.

46
00:02:32.301 --> 00:02:36.044
And so, yeah, we'll reconvene,
and then we'll talk about it.

47
00:02:42.300 --> 00:02:46.379
One thing we realized as a group
was that the dynamic input,

48
00:02:46.379 --> 00:02:50.539
I couldn't find it fast enough
because in a dynamic import,

49
00:02:50.539 --> 00:02:54.880
it can't actually tree shake it,
which was a decision I made.

50
00:02:54.880 --> 00:02:56.959
It was a game time decision,
but didn't go well.

51
00:02:56.959 --> 00:03:04.159
But If we do the static import on a JSON
file and we flip over to the code,

52
00:03:04.159 --> 00:03:09.793
you can see that it is literally
inlined at this point.

53
00:03:09.793 --> 00:03:15.218
So the tree-shaking on JSON imports
does work, but not with a dynamic import

54
00:03:15.218 --> 00:03:20.656
cuz I've tried to do it on the fly to just
make a chunk so I could find it faster.

55
00:03:20.656 --> 00:03:21.893
That didn't go well for me.

56
00:03:21.893 --> 00:03:23.776
All right, so back to the main event.

57
00:03:23.776 --> 00:03:26.348
We wanna get those tests working.

58
00:03:26.348 --> 00:03:31.171
Yeah, that was just correcting my own
mistake from earlier before we jump back

59
00:03:31.171 --> 00:03:31.768
into it.

60
00:03:31.768 --> 00:03:37.468
All right, so with the test,
relatively straightforward.

61
00:03:37.468 --> 00:03:44.792
We can sort of variable,
we can say const characters =,

62
00:03:48.041 --> 00:03:51.917
meta.glob, and we'll grab this directory.

63
00:03:53.533 --> 00:03:55.754
You can do subdirectories, I don't have them.

64
00:03:55.754 --> 00:04:03.798
And what we wanna remember to say
is that eager, Is true, right?

65
00:04:03.798 --> 00:04:09.413
And now what we should be able to do is,
and it all depends on,

66
00:04:09.413 --> 00:04:13.599
I will get the full path
name in this case, but

67
00:04:13.599 --> 00:04:17.366
it depends on if you wanna keep it or not.

68
00:04:17.366 --> 00:04:18.848
But let's go ahead.

69
00:04:18.848 --> 00:04:20.412
Let's get rid of this for a second.

70
00:04:20.412 --> 00:04:24.995
And we'll say, again, it's an object where

71
00:04:24.995 --> 00:04:29.585
the key is the path and
the value is the result.

72
00:04:29.585 --> 00:04:32.676
So we'll say path and

73
00:04:32.676 --> 00:04:38.181
character in this case, seems good.

74
00:04:38.181 --> 00:04:41.654
I'll do Object.entries, that'll give
me literally what I'm looking for.

75
00:04:41.654 --> 00:04:45.136
Object entries of those characters.

76
00:04:45.136 --> 00:04:48.711
And then what I should be
able to do is I could say,

77
00:04:52.865 --> 00:04:56.827
I could slice off the .json if I
really wanted to, I don't right now.

78
00:04:59.333 --> 00:05:06.179
And what we'll say is actually renders,
this case will say the path.

79
00:05:10.044 --> 00:05:19.371
Cool, and now we'll just say,
const result, Render character.

80
00:05:19.371 --> 00:05:21.338
Nope, not render from sass.

81
00:05:21.338 --> 00:05:22.380
That is not what we want.

82
00:05:22.380 --> 00:05:23.947
We want that render character.

83
00:05:23.947 --> 00:05:27.292
There we go, with the character.

84
00:05:27.292 --> 00:05:34.459
And then we would just want it to,
We'll just say to match snapshot, right?

85
00:05:39.278 --> 00:05:43.167
Cool, and then we can do it down here.

86
00:05:43.167 --> 00:05:47.709
We'll just say NPM test, right?

87
00:05:47.709 --> 00:05:49.807
And we've got those snapshots.

88
00:05:49.807 --> 00:05:52.684
And now you can see that it's
basically iterated all the file,

89
00:05:52.684 --> 00:05:54.427
created snapshots for each of those.

90
00:05:54.427 --> 00:05:55.765
If they change, we will know.

91
00:05:55.765 --> 00:05:59.644
If we add a new file in there,
it will add it to the collection as well.

92
00:05:59.644 --> 00:06:01.243
So theoretically,

93
00:06:01.243 --> 00:06:06.794
a lot of times I will get not all the APIs
that I get to work with are nice.

94
00:06:06.794 --> 00:06:09.862
So I have a bunch of functions that will
take a very deeply nested object and

95
00:06:09.862 --> 00:06:11.262
make it something easier to use.

96
00:06:11.262 --> 00:06:14.467
And a lot of times I just wanna make
sure that if I'm refactoring or

97
00:06:14.467 --> 00:06:18.392
changing something, that I'm not
actually changing the end result, right?

98
00:06:18.392 --> 00:06:20.631
Or in a meaningful way, I wanna see it.

99
00:06:20.631 --> 00:06:24.667
So this allows me to go through every
single edge case I've collected over years

100
00:06:24.667 --> 00:06:27.860
and make sure that the function
is still doing the same thing and

101
00:06:27.860 --> 00:06:31.250
I can kinda just keep that collection
of the fixtures in that case.

102
00:06:31.250 --> 00:06:34.931
Or the other example, so I was just
showing a bunch of logos, what have you.

103
00:06:34.931 --> 00:06:38.667
But if you want to basically not have to
keep track of everything in the directory

104
00:06:38.667 --> 00:06:42.069
and you just wanna basically react to
everything in there as it changes,

105
00:06:42.069 --> 00:06:45.105
the import metaglob is super powerful and
allows you to do that.

106
00:06:45.105 --> 00:06:47.501
And again,
you probably have your own use cases.

107
00:06:47.501 --> 00:06:52.128
Or if you don't,
at one point a use case will emerge and

108
00:06:52.128 --> 00:06:58.580
present itself to you, which this
becomes a relatively elegant solution.

