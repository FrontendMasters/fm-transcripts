WEBVTT

1
00:00:00.077 --> 00:00:04.067
What I want you to try to do real quick
is go grab something else, right?

2
00:00:04.067 --> 00:00:08.375
If I gave you a suggestion,
it would be go grab this favicon,

3
00:00:08.375 --> 00:00:10.580
which we know is tiny, right?

4
00:00:10.580 --> 00:00:11.913
We're gonna use that instead and

5
00:00:11.913 --> 00:00:14.680
you're gonna see that Vite does
something kind of cool in this case.

6
00:00:14.680 --> 00:00:17.983
So kinda in our next science experiment,
what we're gonna

7
00:00:17.983 --> 00:00:22.224
do is we've got the large image,
which is like, yoh, this is big, right?

8
00:00:22.224 --> 00:00:26.988
I'm gonna split this out as an image,
but that favicon is real small, right?

9
00:00:26.988 --> 00:00:29.522
Do we wanna make an x-ray CGB request?

10
00:00:29.522 --> 00:00:30.764
No, probably not, right?

11
00:00:30.764 --> 00:00:33.729
It's probably easier just to inline it.

12
00:00:33.729 --> 00:00:38.615
And so you can see that Vite will actually
kind of look at the file itself, right?

13
00:00:38.615 --> 00:00:41.129
A very big image,
it is gonna split out, it's gonna hash,

14
00:00:41.129 --> 00:00:43.914
it's gonna do all the cache stuff
automatically on your behalf.

15
00:00:43.914 --> 00:00:47.730
If you grab a small image like any kind
of the icons that you're using in your

16
00:00:47.730 --> 00:00:52.234
application or anything along those lines,
it's gonna do something very different.

17
00:00:52.234 --> 00:00:56.471
So what you're gonna do is you can
move that same one that I moved, but

18
00:00:56.471 --> 00:01:00.124
then also go ahead and grab,
for instance, this favicon,

19
00:01:00.124 --> 00:01:02.483
one of these smaller images, right?

20
00:01:02.483 --> 00:01:03.851
And so we can grab this one.

21
00:01:03.851 --> 00:01:07.509
I'm gonna go down, I'm just gonna
put a copy of it in here, right?

22
00:01:07.509 --> 00:01:10.076
And what you're gonna
do is try both out and

23
00:01:10.076 --> 00:01:14.781
tell me what you notice between the two
of what files do you end up with, whether

24
00:01:14.781 --> 00:01:19.445
you use the big image or the small image,
and then see what the difference is.

25
00:01:19.445 --> 00:01:22.384
And we'll kinda take a look at it and
see if we can acquiesce what happened by

26
00:01:22.384 --> 00:01:25.198
looking at the network tab and
the sources tab and our developer tools.

27
00:01:25.198 --> 00:01:26.149
It's been a few minutes.

28
00:01:26.149 --> 00:01:26.987
Try both out.

29
00:01:26.987 --> 00:01:28.538
If you have other images you wanna try,

30
00:01:28.538 --> 00:01:31.319
put them into the soil, anything in
your soil structure is fair game.

31
00:01:31.319 --> 00:01:35.907
So you can use the picture of me after
workshop or you can grab another one,

32
00:01:35.907 --> 00:01:38.571
as long as you've got a relatively small,

33
00:01:38.571 --> 00:01:43.249
I'll say hypothetically under 4K image and
then a relatively large one.

34
00:01:43.249 --> 00:01:46.203
And what you're trying to is
important the both and use them and

35
00:01:46.203 --> 00:01:49.325
see that There's a fundamental
difference both in the hashing and

36
00:01:49.325 --> 00:01:52.635
the way Vite treats them that will
make your app perform differently.

37
00:01:52.635 --> 00:01:53.675
How about that?

38
00:01:53.675 --> 00:01:56.646
And you can probably take a lucky
guess on how it's gonna go but

39
00:01:56.646 --> 00:01:58.777
try it out and
see what the differences are.

40
00:02:02.808 --> 00:02:07.498
Before I had this big image, right, and
if we look, we generate a big image.

41
00:02:07.498 --> 00:02:10.189
And then I grabbed a small image, right?

42
00:02:10.189 --> 00:02:11.945
This favicon that I pulled over.

43
00:02:11.945 --> 00:02:13.120
It's decent small image.

44
00:02:13.120 --> 00:02:17.098
I'm gonna run this npm run build again and
there's no image.

45
00:02:19.283 --> 00:02:23.309
It didn't spit out an image, right?

46
00:02:23.309 --> 00:02:26.584
And if we look,
we can investigate what happened,

47
00:02:26.584 --> 00:02:30.023
which is we can go into the,
in this case, our index.

48
00:02:30.023 --> 00:02:33.458
And we'll do the quick
little save actually,

49
00:02:33.458 --> 00:02:36.900
let's actually look in
the developer tools.

50
00:02:36.900 --> 00:02:41.461
And here you can see my image loaded,
right?

51
00:02:41.461 --> 00:02:43.982
But I didn't actually spit
it out as another image.

52
00:02:43.982 --> 00:02:48.271
And so in this case, actually what
happens is that Vite will go ahead and

53
00:02:48.271 --> 00:02:50.425
go in there and actually inline it.

54
00:02:50.425 --> 00:02:54.405
You can see almost this
import statement here.

55
00:02:54.405 --> 00:02:57.972
It will actually take it and
make it a base64 encoded image and

56
00:02:57.972 --> 00:03:00.138
just include it in that file, right?

57
00:03:00.138 --> 00:03:03.774
And so instead of making that
additional HTTP request, it will look.

58
00:03:03.774 --> 00:03:07.854
It's like, hey, if this is small enough,
I'm just gonna inline it in there we're

59
00:03:07.854 --> 00:03:11.254
not gonna make an extra request,
we're not going to worry about NSF.

60
00:03:11.254 --> 00:03:13.485
We'll just put it directly in there.

61
00:03:13.485 --> 00:03:18.441
I think we can see if we go into
the content, we've got the actual file

62
00:03:18.441 --> 00:03:23.242
in this case, but you can see cuz
it's local host source, right?

63
00:03:23.242 --> 00:03:28.255
If we look at the build version,
let's do the NPM run preview in this case,

64
00:03:28.255 --> 00:03:31.212
I think that will show
us what we need to see.

65
00:03:31.212 --> 00:03:37.491
npm run build, npm run preview.

66
00:03:37.491 --> 00:03:42.426
It's a npx build preview,
npx build preview.

67
00:03:46.172 --> 00:03:48.372
And now we'll go and
look at the built version.

68
00:03:48.372 --> 00:03:50.616
This is where that preview becomes useful.

69
00:03:50.616 --> 00:03:54.658
You can see the difference between
what we see in production, and

70
00:03:54.658 --> 00:03:59.583
you can see that actually turned it into
a Base64 encoded image that it just put

71
00:03:59.583 --> 00:04:01.371
right into the file itself.

72
00:04:01.371 --> 00:04:04.785
And so it's trying to,
when in doubt, optimize stuff.

73
00:04:04.785 --> 00:04:09.437
Right out of the box, that is 4k.

74
00:04:09.437 --> 00:04:13.318
Anything out of 4K, it's just gonna
try to inline and include in there.

75
00:04:13.318 --> 00:04:17.487
If you hate this for some reason, there
is a feature in the build process when we

76
00:04:17.487 --> 00:04:20.851
look at the configuration,
you can set assets in line to zero.

77
00:04:20.851 --> 00:04:21.671
It'll never do it.

78
00:04:21.671 --> 00:04:23.393
You want bigger files,
you want smaller files,

79
00:04:23.393 --> 00:04:24.914
you turn that number to whatever you want.

80
00:04:24.914 --> 00:04:27.292
But again, a lot of these things,

81
00:04:27.292 --> 00:04:31.811
you're gonna get some of these
optimizations for free, right?

82
00:04:31.811 --> 00:04:34.161
We still have to do with
that giant image and

83
00:04:34.161 --> 00:04:37.765
I I can either open it up in my
favorite photo editor and resize it.

84
00:04:37.765 --> 00:04:42.133
But what if I wanna do source sets or
stuff along those lines and

85
00:04:42.133 --> 00:04:46.084
I wanna have multiple sizes for
different viewports and

86
00:04:46.084 --> 00:04:49.295
stuff along those lines,
all of that stuff?

87
00:04:49.295 --> 00:04:52.925
Especially given a deadline or
something along those lines,

88
00:04:52.925 --> 00:04:55.101
that's time-consuming, right?

89
00:04:55.101 --> 00:04:59.661
It would be great if we could configure
our build tools to actually be able

90
00:04:59.661 --> 00:05:04.147
to process the images the same way
it processes CSS through PostCSS, or

91
00:05:04.147 --> 00:05:08.150
our TypeScript, or our JSX, or
something along those lines.

