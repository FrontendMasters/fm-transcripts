WEBVTT

1
00:00:00.460 --> 00:00:07.502
So with that,
let's do one that transforms Markdown.

2
00:00:07.502 --> 00:00:09.498
Let's see.

3
00:00:09.498 --> 00:00:11.499
Where's my Vite starter?

4
00:00:11.499 --> 00:00:16.325
So, let's do real quick, let's just

5
00:00:16.325 --> 00:00:21.310
make sure, whatever I did last in here.

6
00:00:32.629 --> 00:00:37.808
Just a second, let's make a new branch and
we'll call it,

7
00:00:37.808 --> 00:00:43.107
what we'll do off of main,
we'll call it Markdown plugin.

8
00:00:43.107 --> 00:00:48.920
Cool, and we do need to install
something that processes Markdown.

9
00:00:48.920 --> 00:00:51.121
My favorite is re-mark and re-hype,

10
00:00:51.121 --> 00:00:53.991
and then there's this
something called Unified,

11
00:00:53.991 --> 00:00:58.545
which does both of them, but there's a lot
of setup and boilerplate in that one.

12
00:00:58.545 --> 00:01:01.018
It's a really powerful and
really cool and it has a lot of,

13
00:01:01.018 --> 00:01:03.357
that's what's effectively
powering this website.

14
00:01:03.357 --> 00:01:08.275
I'm gonna use the simpler one because
watching me configure a really

15
00:01:08.275 --> 00:01:12.190
powerful Markdown parser is
not what we signed up for.

16
00:01:12.190 --> 00:01:16.943
But we'll kinda just show what
the pattern can look like here.

17
00:01:16.943 --> 00:01:22.971
So, do npm install.

18
00:01:22.971 --> 00:01:25.529
There's one called markdown-it, it's simple.

19
00:01:25.529 --> 00:01:26.060
It's fine.

20
00:01:27.170 --> 00:01:29.580
And we'll go and we'll pull that in.

21
00:01:30.670 --> 00:01:32.950
And you can break this
out into its own file.

22
00:01:32.950 --> 00:01:37.000
If you're gonna publish it
on npm as a library per se,

23
00:01:37.000 --> 00:01:39.437
cause we know how to do that now.

24
00:01:39.437 --> 00:01:44.108
The convention is vite-plugin-,
something that's not taken.

25
00:01:44.108 --> 00:01:49.309
Or you can do like namespaced at
your username/vite plugin, whatever.

26
00:01:49.309 --> 00:01:54.359
But since it's just a function like
the ones that we have in our code base,

27
00:01:54.359 --> 00:01:55.180
in my day job.

28
00:01:55.180 --> 00:01:58.853
So I think it'll you like,
it's an open source server.

29
00:01:58.853 --> 00:02:01.464
I just want to spin it up when I
spin up my development server.

30
00:02:01.464 --> 00:02:05.004
So I have a plug in that basically,
I just type in npm Dev and

31
00:02:05.004 --> 00:02:08.618
it spins up both the server that
I'm like building the UI for

32
00:02:08.618 --> 00:02:13.497
that I need to talk to as well as the
development beat server at the same time.

33
00:02:13.497 --> 00:02:14.997
That's a plug-in that we wrote, right?

34
00:02:14.997 --> 00:02:20.646
Unique to my use case, now I don't have to
open up two tabs and type npm start twice.

35
00:02:20.646 --> 00:02:22.734
Little things like that
become super powerful.

36
00:02:22.734 --> 00:02:26.274
And so with this, I'm just gonna
write it in this file because again,

37
00:02:26.274 --> 00:02:28.380
it is just a function
at the end of the day.

38
00:02:29.850 --> 00:02:35.474
I'll say import Markdown from markdown-it.

39
00:02:35.474 --> 00:02:38.108
And that actually you have to
instantiate a new class for

40
00:02:38.108 --> 00:02:39.852
reasons I don't fully understand.

41
00:02:44.075 --> 00:02:46.017
.So that's gonna be our Markdown parser.

42
00:02:46.017 --> 00:02:50.400
Cool, we're also gonna need to read
that file from the file system, maybe.

43
00:02:50.400 --> 00:02:56.225
Actually, I don't

44
00:02:56.225 --> 00:02:59.998
think we do.

45
00:02:59.998 --> 00:03:03.449
Because I'm gonna replace the load
function, because out of the box,

46
00:03:03.449 --> 00:03:07.361
Vite can only actually, it will try to
treat everything as JavaScript unless you

47
00:03:07.361 --> 00:03:08.933
step in during a load function.

48
00:03:08.933 --> 00:03:12.610
So we'll just make ourselves a little
bit of a helper function here.

49
00:03:12.610 --> 00:03:17.626
We'll say const renderMarkdown.

50
00:03:17.626 --> 00:03:22.169
Cool and that's gonna make it
async function give me a file.

51
00:03:22.169 --> 00:03:25.297
We are gonna need to like read
that file from the file system.

52
00:03:25.297 --> 00:03:28.560
And so I'm gonna pull in
the promise version of that.

53
00:03:28.560 --> 00:03:35.579
So I'll import read file from

54
00:03:35.579 --> 00:03:40.690
fs promises, cool.

55
00:03:40.690 --> 00:03:45.786
And then what we'll do is we

56
00:03:45.786 --> 00:03:52.439
will say content equals read file.

57
00:03:52.439 --> 00:03:55.765
If it's import content from file name.

58
00:03:55.765 --> 00:03:58.037
That's what this argument is gonna be,
right?

59
00:03:58.037 --> 00:04:02.204
It's gonna be the path, we've seen that
source slash whatever in this case.

60
00:04:02.204 --> 00:04:08.230
So we will read file,
whatever the file is.

61
00:04:08.230 --> 00:04:11.851
So we'll say file, and
then I'm just gonna say utf-8, so

62
00:04:11.851 --> 00:04:14.632
I don't end up with a buffer in
Node, right?

63
00:04:14.632 --> 00:04:19.394
So read the file and
then, we can really just

64
00:04:19.394 --> 00:04:24.172
md.render, that content, right?

65
00:04:24.172 --> 00:04:27.118
That's just a little function
that give it a file,

66
00:04:27.118 --> 00:04:31.515
reads the file from the file system,
turns the Markdown into HTML, right?

67
00:04:31.515 --> 00:04:35.873
There with I think, remark,
you can actually get an AST

68
00:04:35.873 --> 00:04:40.715
that you can manipulate and
do all sorts of stuff with as well.

69
00:04:40.715 --> 00:04:45.554
I'm choosing not to do that I'm just gonna
get a string that we can then use that in

70
00:04:45.554 --> 00:04:48.560
HTML somewhere if we wanted
to very dangerously.

71
00:04:48.560 --> 00:04:53.780
Yes, if you're doing this for
really real use something like remark,

72
00:04:53.780 --> 00:04:57.608
I'm using this plugin in
the actual app that is MDX,

73
00:04:57.608 --> 00:05:00.665
but it's for Svelte, same thing, right?

74
00:05:00.665 --> 00:05:04.302
But this is mostly to demonstrate
what we would do to make it

75
00:05:04.302 --> 00:05:06.094
in the plugin piece, cool.

76
00:05:06.094 --> 00:05:06.928
So that's a render Markdown.

77
00:05:06.928 --> 00:05:08.520
That's just a helper file.

78
00:05:08.520 --> 00:05:10.470
And then our plugin is
pretty straightforward.

79
00:05:10.470 --> 00:05:17.381
Let's call it function markdownToHtml.

80
00:05:17.381 --> 00:05:21.401
Now you'll notice that I used a regular
old function declaration, and

81
00:05:21.401 --> 00:05:22.681
that is intentional.

82
00:05:22.681 --> 00:05:26.522
The reason for
that is that if you use an arrow function,

83
00:05:26.522 --> 00:05:31.017
it's bound to whatever this is in
the scope that you wrote it, but

84
00:05:31.017 --> 00:05:34.975
these actually have access to
this dot inside of rollup.

85
00:05:34.975 --> 00:05:39.124
So you wanna make sure that you're
not binding the wrong this, so

86
00:05:39.124 --> 00:05:41.320
just use a function declaration.

87
00:05:41.320 --> 00:05:44.551
You do need to give it a name,

88
00:05:44.551 --> 00:05:49.269
that's mostly for debugging purposes,

89
00:05:49.269 --> 00:05:54.256
we'll just call it markdown-to-html and

90
00:05:54.256 --> 00:06:00.857
then we'll say resolveId, and
this is basically to say,

91
00:06:00.857 --> 00:06:05.598
is this one that we personally deal with.

92
00:06:05.598 --> 00:06:08.216
I just think it's got to return something.

93
00:06:08.216 --> 00:06:13.851
So if the id ends with .md,

94
00:06:16.728 --> 00:06:19.027
Then return it.

95
00:06:25.134 --> 00:06:26.015
I gotta return an object.

96
00:06:26.015 --> 00:06:27.450
I'm so used to writing arrow functions.

97
00:06:30.020 --> 00:06:32.090
I was like why am I getting squigglies?

98
00:06:32.090 --> 00:06:34.509
Nobody wants squigglies.

99
00:06:34.509 --> 00:06:38.999
Resolve the id, otherwise return null,
or you can return undefined.

100
00:06:38.999 --> 00:06:43.620
It's basically saying we
don't resolve this one.

101
00:06:43.620 --> 00:06:44.600
Format it a little bit better.

102
00:06:45.790 --> 00:06:46.674
And then finally,

103
00:06:46.674 --> 00:06:50.168
now we know that that returns a promise
because it reads in the file system.

104
00:06:50.168 --> 00:06:57.678
So make this async function,
we say load, that id.

105
00:06:57.678 --> 00:07:02.745
And we'll say, again,

106
00:07:02.745 --> 00:07:09.992
I'm gonna guard it with ends with.

107
00:07:09.992 --> 00:07:13.145
If you're importing a file that ends with
a Markdown, then I want to deal with it.

108
00:07:13.145 --> 00:07:14.849
And so we'll say const rendered.

109
00:07:20.338 --> 00:07:26.219
Render Markdown for that id.

110
00:07:26.219 --> 00:07:30.311
The same way when we saw that JSON named
exports, it was taking the JSON file and

111
00:07:30.311 --> 00:07:32.053
converting it into an ES module.

112
00:07:32.053 --> 00:07:35.140
It's effectively all we're
really doing here, right?

113
00:07:35.140 --> 00:07:39.668
Is like, cool, return me something
that the rest of Vite understands, and

114
00:07:39.668 --> 00:07:42.340
Vite understands ES modules, right?

115
00:07:42.340 --> 00:07:46.590
Could you move what I'm about to write
into another file and interpolate it in?

116
00:07:46.590 --> 00:07:48.828
Absolutely, should you probably.

117
00:07:48.828 --> 00:07:52.059
This is short enough that
I can write it in line.

118
00:07:52.059 --> 00:07:56.795
And so, I'll just say export default, and

119
00:07:56.795 --> 00:08:01.789
then interpolate it in
to something that we can

120
00:08:01.789 --> 00:08:07.039
get stringified,
that'll wrap it in quotes and

121
00:08:07.039 --> 00:08:11.780
everything along those lines as well.

122
00:08:11.780 --> 00:08:14.763
And so now, what'll happen is
when we go to read a file,

123
00:08:14.763 --> 00:08:17.490
it's like, you want a Markdown file?

124
00:08:17.490 --> 00:08:20.804
Okay, I'm gonna try to read,
I'm gonna intercept the one,

125
00:08:20.804 --> 00:08:22.991
I'm gonna read it from the file system.

126
00:08:22.991 --> 00:08:24.815
I'm gonna turn it into Markdown, and

127
00:08:24.815 --> 00:08:27.782
I'm gonna give you back a string
of HTML in this case, right?

128
00:08:27.782 --> 00:08:31.209
Obviously, you could extend
this in all sorts of ways.

129
00:08:31.209 --> 00:08:34.983
If you want to process this file
in any way, shape, or form.

130
00:08:34.983 --> 00:08:39.200
There was a question in the chat earlier,
what if I want to put a global

131
00:08:39.200 --> 00:08:42.932
import on top of every single
file that has a file extension.

132
00:08:42.932 --> 00:08:48.267
So let's say, I want to import React and
maybe I wanna import my component library

133
00:08:48.267 --> 00:08:53.730
at the beginning of every file that ends
with a certain file extension, right?

134
00:08:53.730 --> 00:08:57.918
You could literally, at this point
we're replacing the file, but

135
00:08:57.918 --> 00:09:02.854
we could theoretically just append to
the current contents of the file as well.

136
00:09:02.854 --> 00:09:07.148
And or prepend and say like,
put this thing at the very beginning or

137
00:09:07.148 --> 00:09:09.371
in development put a console log or

138
00:09:09.371 --> 00:09:13.066
something like that about
what the file name is, right?

139
00:09:13.066 --> 00:09:18.141
Whatever you wanna do or
like do something with the source map or

140
00:09:18.141 --> 00:09:21.986
replace a special string
with something else.

141
00:09:21.986 --> 00:09:26.168
So you can do whatever you want to every
file, again, most of the common ones have

142
00:09:26.168 --> 00:09:29.813
plugins, there's a ton of them and
they're really super powerful.

143
00:09:29.813 --> 00:09:33.989
You should look at some of them because
I'll give you some inspiration, but

144
00:09:33.989 --> 00:09:38.032
a lot of times if you have to go on the
path of writing your own it is likely for

145
00:09:38.032 --> 00:09:38.637
a reason.

146
00:09:38.637 --> 00:09:43.854
Sweet, assuming that my
talking while I typed

147
00:09:43.854 --> 00:09:49.471
it didn't create any issues,
we should be able to

148
00:09:49.471 --> 00:09:55.654
pop this in as another plugin and
that should be great.

149
00:09:55.654 --> 00:09:58.646
Yeah, it's a very simple one,
only gonna make HTML.

150
00:09:58.646 --> 00:10:01.592
It's not gonna give me
a lot of manipulation but

151
00:10:01.592 --> 00:10:05.579
there are other tools that can
totally do that and super useful.

152
00:10:05.579 --> 00:10:08.232
Again, there's some file format
that you already have a parser for.

153
00:10:08.232 --> 00:10:09.920
There's just no Vite plugin.

154
00:10:09.920 --> 00:10:12.664
You can use this technique and
now have full ability to import it and

155
00:10:12.664 --> 00:10:13.720
use it in your app.

156
00:10:13.720 --> 00:10:18.519
You just got to turn out a some kind
of ES module in the end, Dustin.

157
00:10:18.519 --> 00:10:22.893
&gt;&gt; Could you exclude some files
from a specific dependency?

158
00:10:22.893 --> 00:10:26.650
&gt;&gt; I mean, we are checking for
which ones we want to include.

159
00:10:26.650 --> 00:10:27.750
So, it's just JavaScript.

160
00:10:27.750 --> 00:10:29.253
Your logic can go either way, right?

161
00:10:29.253 --> 00:10:33.508
You can say,
if not a JavaScript file, do this.

162
00:10:33.508 --> 00:10:38.610
Now, that's obviously a wider range
than what you are actually looking for.

163
00:10:38.610 --> 00:10:43.524
But one of the ways that I have not used
this yet, that we are at least talking

164
00:10:43.524 --> 00:10:47.730
about is like I said,
we have two different builds of our app.

165
00:10:47.730 --> 00:10:51.119
Right now, there are conditionals and
they're based on environment variables.

166
00:10:51.119 --> 00:10:55.775
What I kinda wanna do is look at,
hey, when you import a file,

167
00:10:55.775 --> 00:11:01.879
if it's just the file and there's no
maybe .oss or .cloud, pull in that file.

168
00:11:01.879 --> 00:11:06.806
But depending on the environment, go
actually swap it out for this other file.

169
00:11:06.806 --> 00:11:10.858
There's a bunch of use cases
that'll be very specific.

170
00:11:10.858 --> 00:11:14.885
I'm only opt to end .md, but
you could say it's just up to you,

171
00:11:14.885 --> 00:11:17.058
whatever logic you want, right?

172
00:11:17.058 --> 00:11:21.796
And you will have the name of the file and

173
00:11:21.796 --> 00:11:25.969
with I think, I forget which one.

174
00:11:25.969 --> 00:11:31.105
There's another one, I think is maybe
just regular resolve, where you get not

175
00:11:31.105 --> 00:11:36.024
only the file you are importing but
the file that tried to import it, right?

176
00:11:36.024 --> 00:11:39.220
And so you can do interesting
stuff along those lines as well

