WEBVTT

1
00:00:00.007 --> 00:00:04.094
All right, so theoretically,
again, talking and typing,

2
00:00:04.094 --> 00:00:09.055
we don't know what happened, but
I feel good, I'm feeling pretty good.

3
00:00:09.055 --> 00:00:14.187
At this point, I think,
since I started from Mannequin,

4
00:00:14.187 --> 00:00:16.823
I've got to at least script.

5
00:00:16.823 --> 00:00:21.635
We'll say type module,

6
00:00:21.635 --> 00:00:26.905
sweet, and then we'll say

7
00:00:26.905 --> 00:00:31.728
src is .srcindex.js.

8
00:00:31.728 --> 00:00:35.284
And then in there real quick,
let's just do a console log.

9
00:00:35.284 --> 00:00:44.951
So we'll import john.biographies/john.

10
00:00:44.951 --> 00:00:45.568
What am I doing?

11
00:00:45.568 --> 00:00:47.829
I'm doing Paul.

12
00:00:47.829 --> 00:00:49.223
He's my favorite Beatle.

13
00:00:49.223 --> 00:00:51.407
Don't ask me.

14
00:00:51.407 --> 00:00:54.927
Cool, and
then we'll do the console log here.

15
00:00:54.927 --> 00:00:55.914
Cool, so let's pull in.

16
00:00:55.914 --> 00:01:02.036
So now, could we just pull in
a markdown file in an ECMAScript app?

17
00:01:02.036 --> 00:01:07.157
Like I said, barring mistakes of me
typing and talking at the same time.

18
00:01:07.157 --> 00:01:10.100
Let's find out together.

19
00:01:10.100 --> 00:01:12.184
npm run dev.

20
00:01:12.184 --> 00:01:15.220
That's looking great.

21
00:01:15.220 --> 00:01:16.741
Yeah, that's not in there.

22
00:01:16.741 --> 00:01:19.456
What I started back from me and
I kept that file on there.

23
00:01:19.456 --> 00:01:21.116
So we have no images.

24
00:01:21.116 --> 00:01:22.300
We're not doing that.

25
00:01:22.300 --> 00:01:27.901
Sweet, new problem is that I
didn't delete it from up here.

26
00:01:32.231 --> 00:01:36.217
All right, but it should be a string.

27
00:01:36.217 --> 00:01:38.183
That's still good.

28
00:01:38.183 --> 00:01:39.056
Let's see what we got.

29
00:01:39.056 --> 00:01:42.523
It's blowing up at the parse piece.

30
00:01:42.523 --> 00:01:46.399
So whenever I said out loud,
we've got content

31
00:01:49.852 --> 00:01:51.980
Cuz that's a promise

32
00:01:59.031 --> 00:02:02.600
Now you can see that it
actually converted to HTML,

33
00:02:02.600 --> 00:02:06.420
right, on the fly as part
of my build process, right?

34
00:02:06.420 --> 00:02:11.495
And this library turns into HTML,
I guess that remark will turn

35
00:02:11.495 --> 00:02:16.571
into a JavaScript object,
you can theoretically as long as you

36
00:02:16.571 --> 00:02:21.672
turn like ESTree is the AST while
it's a lot of letters in a row.

37
00:02:21.672 --> 00:02:25.155
ESTree is a abstract syntax tree that has,

38
00:02:25.155 --> 00:02:30.103
as long as you return to that
Vite we'll figure out the rest.

39
00:02:30.103 --> 00:02:34.576
But this will return to a string if
I wanted to pull apart that HTML and

40
00:02:34.576 --> 00:02:39.441
just get the name and turn it into
a JavaScript object that I wanted to use,

41
00:02:39.441 --> 00:02:42.209
that's totally doable as well, right?

42
00:02:42.209 --> 00:02:48.974
It is basically just evaling effectively
whatever string I put out here.

43
00:02:48.974 --> 00:02:50.152
And again, there are other hooks.

44
00:02:50.152 --> 00:02:55.069
There are ways to,
the regular transform will allow you

45
00:02:55.069 --> 00:02:58.635
to also put a source map in there as well.

46
00:02:58.635 --> 00:03:00.723
But you can take any
file that you want and

47
00:03:00.723 --> 00:03:04.297
basically do anything with it
because every single import require.

48
00:03:04.297 --> 00:03:08.717
Whether or not Vite actually supports it,
right, you will get a chance to step in

49
00:03:08.717 --> 00:03:12.747
and turn it into something that Vite
does support cuz at the end of the day,

50
00:03:12.747 --> 00:03:15.477
I took a markdown file and
I turned it into, yeah,

51
00:03:15.477 --> 00:03:17.753
the world's worst piece of JavaScript.

52
00:03:17.753 --> 00:03:20.914
But if we go ahead and
we look in the sources,

53
00:03:20.914 --> 00:03:25.023
right, we can see source
will see biographies, right?

54
00:03:25.023 --> 00:03:28.422
It turned into effectively JavaScript,
right?

55
00:03:28.422 --> 00:03:33.184
Yeah, kind of ridiculous JavaScript but
JavaScript nonetheless, and

56
00:03:33.184 --> 00:03:37.007
like I said for the most part,
when you need it is either for

57
00:03:37.007 --> 00:03:39.289
we spin up our open source server.

58
00:03:39.289 --> 00:03:41.326
That's not the way that
a lot of other apps work,

59
00:03:41.326 --> 00:03:43.327
you usually have to talk
to some remote server.

60
00:03:43.327 --> 00:03:46.411
I happen to have an open-source
server that I talk to.

61
00:03:46.411 --> 00:03:49.338
So we spin it up at the same time.

62
00:03:49.338 --> 00:03:54.825
If you need to parse some unique
file type for your company or

63
00:03:54.825 --> 00:04:01.850
you just wanna manipulate, you wanna
take a given a given JavaScript type,

64
00:04:01.850 --> 00:04:06.937
or do something with the JSX,
you can do that, right?

65
00:04:06.937 --> 00:04:10.720
If you wanna strip out all
your data attributes, right?

66
00:04:10.720 --> 00:04:12.719
Your test data, only on build.

67
00:04:12.719 --> 00:04:18.422
So you can say, if we go,
I'm gonna turn this to TypeScript

68
00:04:18.422 --> 00:04:22.997
real quick for
a reason you'll see in a second.

69
00:04:22.997 --> 00:04:30.462
TypeScript and we'll say file as a string.

70
00:04:30.462 --> 00:04:33.799
What I wanna do is it's
gonna return a plugin.

71
00:04:33.799 --> 00:04:39.100
That'll just give me a little bit
more type help in a second here.

72
00:04:39.100 --> 00:04:43.647
You can say, There's

73
00:04:43.647 --> 00:04:47.860
a whole bunch, I'm trying to look.

74
00:04:52.559 --> 00:04:56.206
So we can say apply build,
for instance, right?

75
00:04:56.206 --> 00:04:59.155
This is kinda more of an example,
apply build.

76
00:04:59.155 --> 00:05:02.037
So this will be only on build, right,
which means you're building for

77
00:05:02.037 --> 00:05:02.625
production.

78
00:05:02.625 --> 00:05:05.583
You could theoretically
grab every single file and

79
00:05:05.583 --> 00:05:10.189
be like, all those data-test.ids that
we have in there for Playwright or

80
00:05:10.189 --> 00:05:14.409
Cypress or whatever, I don't wanna
ship those to production, right?

81
00:05:14.409 --> 00:05:15.501
Strip them all out.

82
00:05:15.501 --> 00:05:19.072
Just literally use a regex, right, and

83
00:05:19.072 --> 00:05:23.179
strip out all of the data attributes,
right?

84
00:05:23.179 --> 00:05:26.844
Or I guarantee you there is
a plug-in that exists for this,

85
00:05:26.844 --> 00:05:29.497
go find every console log and
get rid of it.

86
00:05:29.497 --> 00:05:33.197
So I don't ship those to production cuz,

87
00:05:33.197 --> 00:05:37.862
who has shipped a what
console log into production?

88
00:05:37.862 --> 00:05:42.121
I have,
[LAUGH] thank God it wasn't a curse word.

89
00:05:42.121 --> 00:05:47.366
But if you haven't done it,
you will, eventually, and

90
00:05:47.366 --> 00:05:53.173
if the plugin doesn't exist,
maybe you'll use console log.

91
00:05:53.173 --> 00:05:56.815
Maybe there's an abstraction over it that
you only want in certain conditions.

92
00:05:56.815 --> 00:05:59.394
You can theoretically strip that out, or

93
00:05:59.394 --> 00:06:02.866
you can choose to add stuff
as part of the build process.

94
00:06:02.866 --> 00:06:05.159
There will be unique things for you.

95
00:06:05.159 --> 00:06:08.682
Most of the common one is don't
write your own plugin, right?

96
00:06:08.682 --> 00:06:11.812
Go use a plugin that's at
least been vetted by yeah,

97
00:06:11.812 --> 00:06:13.600
not the best use of your time.

98
00:06:13.600 --> 00:06:18.863
But there are probably at some point or
another you could, if you think about it

99
00:06:18.863 --> 00:06:24.070
ES Build has its own JSX parser where
you can write your own function, right?

100
00:06:24.070 --> 00:06:27.701
You could theoretically if one got
bored during a holiday break or

101
00:06:27.701 --> 00:06:30.747
whatever write your own
front-end framework right?

102
00:06:30.747 --> 00:06:35.049
Using probably just Vite, some plugins,
and some transformations,

103
00:06:35.049 --> 00:06:39.286
right, effectively,
that's what Svelte's doing with Rollup, right?

104
00:06:39.286 --> 00:06:42.307
You could theoretically do
something along those lines.

105
00:06:42.307 --> 00:06:42.854
Should you?

106
00:06:42.854 --> 00:06:44.473
Maybe not, right?

107
00:06:44.473 --> 00:06:47.248
But if you had,
I have a workshop from a few years ago,

108
00:06:47.248 --> 00:06:49.866
to build your own programming language,
right?

109
00:06:49.866 --> 00:06:50.606
It would be fun.

110
00:06:50.606 --> 00:06:52.863
At one point,
I could take that programming language and

111
00:06:52.863 --> 00:06:55.214
convert it back into JavaScript and
then pull in Dropbear,

112
00:06:55.214 --> 00:06:57.955
which is the main programming language,
apparently in Australia.

113
00:06:57.955 --> 00:07:00.988
There's a myth that
bears hide in trees and

114
00:07:00.988 --> 00:07:05.550
try to belly-flop on you as
you're walking through the woods.

115
00:07:05.550 --> 00:07:09.526
I could make Vite support for
my own custom programming language.

116
00:07:09.526 --> 00:07:10.804
Should I?

117
00:07:10.804 --> 00:07:14.976
Absolutely, [LAUGH] but you could
do these various different things

118
00:07:14.976 --> 00:07:19.366
with a Vite plugin and I think that's
what again, it starts out with hey,

119
00:07:19.366 --> 00:07:22.972
all you need is an index.html file and
you're good to go.

120
00:07:22.972 --> 00:07:27.643
And maybe you throw a script tag in there,
you want some JavaScript to, all right,

121
00:07:27.643 --> 00:07:31.583
cool you wanna host modules somewhere
else and pull them in remotely or

122
00:07:31.583 --> 00:07:34.827
build a library or
parse your own programming language?

123
00:07:34.827 --> 00:07:37.419
Right on, it's just like
a function added in there, right?

124
00:07:37.419 --> 00:07:42.520
And that's kind of line from
incredibly simple all the way to

125
00:07:42.520 --> 00:07:47.832
incredibly powerful but
still not that complicated, right?

126
00:07:47.832 --> 00:07:52.123
This looks a little squirrely in the very
beginning but once you begin to wrap your

127
00:07:52.123 --> 00:07:56.180
head around it, especially if you cheat
wouldn't have the types in there.

128
00:07:56.180 --> 00:08:00.617
I learn as I write JavaScript for
you all day, how reliant I am on,

129
00:08:00.617 --> 00:08:03.605
being able to option
click into the types and

130
00:08:03.605 --> 00:08:08.473
read all the things that thing has
without even having to open the docs.

131
00:08:08.473 --> 00:08:13.093
Because if you look too,
it's like, I love it, right?

132
00:08:13.093 --> 00:08:17.955
For various different pieces,
you can kinda get a sense,

133
00:08:19.808 --> 00:08:22.540
Of what everything does and
what it takes what to expect.

134
00:08:22.540 --> 00:08:25.450
But yeah, so there's a wide
range of really powerful parts.

