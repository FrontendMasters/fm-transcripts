WEBVTT

1
00:00:00.080 --> 00:00:03.458
Well, if I did wanna split this
application into multiple chunks,

2
00:00:03.458 --> 00:00:05.290
how would I do that, right?

3
00:00:05.290 --> 00:00:07.770
And one way that we could do that is,

4
00:00:07.770 --> 00:00:12.300
there's two ways to import
files with ECMAScript modules.

5
00:00:12.300 --> 00:00:15.419
One is this kind of statement that
we have up here, which is import,

6
00:00:15.419 --> 00:00:18.290
this is at the top of the file,
it means immediately, right?

7
00:00:18.290 --> 00:00:21.340
We know that we need this file and
we will have it, right?

8
00:00:21.340 --> 00:00:24.974
If you've got a client-side router or
maybe it's like, hey,

9
00:00:24.974 --> 00:00:29.551
I don't need all the assets for this modal
or something like that until maybe they

10
00:00:29.551 --> 00:00:33.274
hover over the button, right,
or something along those lines.

11
00:00:33.274 --> 00:00:38.077
Then you could choose to do something
along those lines as well and

12
00:00:38.077 --> 00:00:43.157
asynchronously load something,
and let's look at how that works.

13
00:00:43.157 --> 00:00:47.385
And so, all right,
if I got rid of this statement for

14
00:00:47.385 --> 00:00:52.191
a second, and instead,
we'll get rid all this right now,

15
00:00:52.191 --> 00:00:55.968
we'll say import and we'll do ./counter.

16
00:00:59.076 --> 00:01:00.999
That's good enough for now.

17
00:01:00.999 --> 00:01:04.749
What this version of import of
ECMAScript modules does is it returns

18
00:01:04.749 --> 00:01:05.840
a promise, right?

19
00:01:05.840 --> 00:01:10.009
So, if you've got top level async await,
you can await it, otherwise it's just

20
00:01:10.009 --> 00:01:14.052
a promise, at which point it will now,
when it hits this code, and again, you

21
00:01:14.052 --> 00:01:18.626
could say like, hey, until they hover over
the button, that's gonna have the modal.

22
00:01:18.626 --> 00:01:23.664
Or if I have a client-side router, when
they go to the next client-side route,

23
00:01:23.664 --> 00:01:28.257
that's when, if you use something
like React router, or svelte kit, or

24
00:01:28.257 --> 00:01:32.405
most like single page app frameworks,
like Next, for instance,

25
00:01:32.405 --> 00:01:36.732
this is happening for you with
the framework by virtue of the routes.

26
00:01:36.732 --> 00:01:40.121
So you, generally speaking,
if you're using any of those frameworks,

27
00:01:40.121 --> 00:01:44.320
don't think too much about this, but
this is effectively what's happening.

28
00:01:44.320 --> 00:01:48.675
It's a promise, literally, and

29
00:01:48.675 --> 00:01:53.479
then we get the stuff in the file as kind

30
00:01:53.479 --> 00:01:58.150
of the return value of that promise.

31
00:01:58.150 --> 00:02:01.466
So we'll go and dynamically fetch that
module whenever this import statement is

32
00:02:01.466 --> 00:02:04.670
called, instead of immediately
as soon as the file is loaded.

33
00:02:04.670 --> 00:02:07.830
And we can kinda see,
if we go ahead and build it again.

34
00:02:07.830 --> 00:02:10.900
If you look right now I've
got just my HTML file.

35
00:02:10.900 --> 00:02:14.060
And let's see if I can, yeah.

36
00:02:14.060 --> 00:02:16.090
And I've got the JavaScript file.

37
00:02:17.130 --> 00:02:19.924
Now if you look,
because I'm dynamically importing it, and

38
00:02:19.924 --> 00:02:23.906
it's probably an action that would
happen, either client-side route changing,

39
00:02:23.906 --> 00:02:26.550
whatever action would
trigger the very next thing.

40
00:02:26.550 --> 00:02:29.694
You can see that we actually spit
out two different files now, right?

41
00:02:29.694 --> 00:02:32.936
So it knew,
I don't need everything all at once.

42
00:02:32.936 --> 00:02:37.095
Awesome, go wait until we get the thing
and then load the second piece, so

43
00:02:37.095 --> 00:02:38.918
you can begin to split stuff up.

44
00:02:38.918 --> 00:02:43.661
So this could be, again, if you have
client-side routes or if it's a situation.

45
00:02:43.661 --> 00:02:48.418
I work on an app where generally speaking,
we get really frustrated if a content side

46
00:02:48.418 --> 00:02:52.375
takes too long to load, but
we do watch a loading bar in Gmail, right?

47
00:02:52.375 --> 00:02:53.860
And so there's always those trade offs.

48
00:02:53.860 --> 00:02:57.382
I don't have a lot to show until
the JavaScript has loaded in my app.

49
00:02:57.382 --> 00:03:00.542
But if I was running like
the New York Times or something like that,

50
00:03:00.542 --> 00:03:03.485
it could be that, all right,
go run the initial JavaScript.

51
00:03:03.485 --> 00:03:07.070
And then these will be asynchronous after
the initial JavaScript file is parsed, and

52
00:03:07.070 --> 00:03:10.083
it'll immediately go get the next
thing and start loading it, right?

53
00:03:10.083 --> 00:03:13.979
A lot of times, content sites will try to
show you the content as fast as possible,

54
00:03:13.979 --> 00:03:17.382
and then they'll load up all the ads
that take forever to load, right?

55
00:03:17.382 --> 00:03:20.231
So they are already reading that point
by the time they slide all the ads in

56
00:03:20.231 --> 00:03:20.893
there, right?

57
00:03:20.893 --> 00:03:25.211
So this technique would work for that
where we would load the initial file and

58
00:03:25.211 --> 00:03:28.260
then we would go ahead and
import the counter as well.

59
00:03:28.260 --> 00:03:31.510
And you can see that now I've
broken this up into two chunks,

60
00:03:31.510 --> 00:03:35.144
that it has already figured this out for
me and done everything, and

61
00:03:35.144 --> 00:03:36.890
I don't think a lot about it.

62
00:03:36.890 --> 00:03:38.419
The other thing that we can do is,

63
00:03:38.419 --> 00:03:41.110
right now you saw that I
have a development server.

64
00:03:41.110 --> 00:03:44.027
The other thing you might wanna
do as you're building and

65
00:03:44.027 --> 00:03:47.734
testing stuff out to make sure
everything's behaving the way you want is

66
00:03:47.734 --> 00:03:50.972
Vite has this other one called NPX or
just really Vite preview.

67
00:03:50.972 --> 00:03:55.913
And what Vite preview does is
it takes the built assets, vite.

68
00:03:55.913 --> 00:03:58.466
The nice part is there's smiles and
giggling when I say vite, so

69
00:03:58.466 --> 00:03:59.706
it's gonna be great, [LAUGH].

70
00:03:59.706 --> 00:04:03.982
I thought I'd make it a lot longer
before the first time I slipped, but

71
00:04:03.982 --> 00:04:05.082
apparently not.

72
00:04:05.082 --> 00:04:09.851
Vite preview will look at your built
assets and spin up a web server around

73
00:04:09.851 --> 00:04:14.873
that, so you actually see, okay,
these are the built production assets.

74
00:04:14.873 --> 00:04:17.420
Does this behave the way
I think it's supposed to?

75
00:04:17.420 --> 00:04:22.645
And this application is simple enough
that other than it being 4173,

76
00:04:22.645 --> 00:04:26.352
we can go ahead and
see that's mostly the same idea,

77
00:04:26.352 --> 00:04:30.330
made sure my counter works,
so on and so forth, right?

78
00:04:30.330 --> 00:04:31.740
And so
that's actually the production build.

79
00:04:31.740 --> 00:04:37.733
If I look in the elements, you'll see
that this is now the production build.

80
00:04:37.733 --> 00:04:40.190
And I can actually play
around with that as well.

81
00:04:40.190 --> 00:04:43.625
Now, again, most of the time in my
experience, they are similar, but

82
00:04:43.625 --> 00:04:47.350
if there are transformations that
you're only doing at build time, right,

83
00:04:47.350 --> 00:04:49.432
which is what some will
see at the very end.

84
00:04:49.432 --> 00:04:52.104
Then this is useful to seeing like, okay,

85
00:04:52.104 --> 00:04:55.899
did my build part work the same
way as it does in development?

86
00:04:55.899 --> 00:04:58.544
Cuz we know that we don't
have to think about it,

87
00:04:58.544 --> 00:05:00.931
but Vite is using
a different technology for

88
00:05:00.931 --> 00:05:05.250
the development server to give us
that fastest feedback loop possible.

89
00:05:05.250 --> 00:05:08.216
Than it is as it's kinda doing the tree
shaking and code splitting, and

90
00:05:08.216 --> 00:05:10.600
everything along those lines for
the production builds.

91
00:05:10.600 --> 00:05:16.027
So it's mostly, if there's something
special about your build process,

92
00:05:16.027 --> 00:05:18.145
you won't be able to verify or

93
00:05:18.145 --> 00:05:22.664
if you're debugging,
then the Vite preview is super useful.

94
00:05:22.664 --> 00:05:27.645
But generally speaking, in my experience,

95
00:05:27.645 --> 00:05:31.313
which is, yes, a few years, but

96
00:05:31.313 --> 00:05:36.171
all on just the apps
that I work on every day.

97
00:05:36.171 --> 00:05:40.933
Generally speaking,
the development server works really great,

98
00:05:40.933 --> 00:05:44.785
and we can rely on that most
of the time for most things.

