WEBVTT

1
00:00:00.000 --> 00:00:01.660
The site, it's fine.

2
00:00:01.660 --> 00:00:04.122
It looks a little ugly.

3
00:00:04.122 --> 00:00:07.770
Let's talk about some of the options for
pulling in some CSS.

4
00:00:07.770 --> 00:00:12.040
We've got a few options and
the most kinda basic

5
00:00:12.040 --> 00:00:16.522
standard one works the way
that you think it does,

6
00:00:16.522 --> 00:00:20.593
which is we can pull in a link tag,
all right?

7
00:00:20.593 --> 00:00:23.160
We've got that, and again, it is relative.

8
00:00:23.160 --> 00:00:26.862
The nice part is, effectively,
all this bundling and

9
00:00:26.862 --> 00:00:31.136
everything is happening from
your index.html file, right?

10
00:00:31.136 --> 00:00:34.500
It like that is what the kind
of the Vite entry point is.

11
00:00:34.500 --> 00:00:39.303
And Vite's looking at this index.html
file and it's trying to resolve any of

12
00:00:39.303 --> 00:00:43.013
these relative paths to what
your development setup is, and

13
00:00:43.013 --> 00:00:46.670
then kinda bundling it and
building it all in place as well.

14
00:00:46.670 --> 00:00:48.576
And it will actually do this for
a bunch of things.

15
00:00:48.576 --> 00:00:52.099
Obviously, as you can see
anything I put in the HTML,

16
00:00:52.099 --> 00:00:56.970
anything that I had in the JavaScript
that obviously worked too, right?

17
00:00:56.970 --> 00:00:59.991
And then actually,
if I use the URL function in CSS or

18
00:00:59.991 --> 00:01:03.990
anything along those lines,
those will actually also be resolved.

19
00:01:03.990 --> 00:01:08.168
So you don't necessarily have to have
everything in your public folder, so

20
00:01:08.168 --> 00:01:09.094
on and so forth.

21
00:01:09.094 --> 00:01:11.252
You can kind of just
import it as needed and

22
00:01:11.252 --> 00:01:15.199
not think about the fact that Vite exists
at all and get all of this for free and

23
00:01:15.199 --> 00:01:18.420
everything kinda working the way
that we would hope it works.

24
00:01:18.420 --> 00:01:20.346
So this will work.

25
00:01:20.346 --> 00:01:24.748
As you can see,
it's a little prettier now.

26
00:01:24.748 --> 00:01:30.720
I don't threaten to be a designer,
but it's better, right, in this case.

27
00:01:30.720 --> 00:01:33.848
And there's a few other options.

28
00:01:33.848 --> 00:01:38.570
Let's go ahead and build it just to see,
we'll see no surprises in here.

29
00:01:38.570 --> 00:01:42.806
We'll see exactly what we think,
which is now we also have a CSS file.

30
00:01:42.806 --> 00:01:46.362
Great, and again, you could build
this over, and over, and over again.

31
00:01:46.362 --> 00:01:51.160
If the CSS file didn't change,
that SHA will be the same, right?

32
00:01:51.160 --> 00:01:55.493
That means that if somebody has that
cache, they won't have to refresh it,

33
00:01:55.493 --> 00:01:58.553
even if you change the JavaScript and
redeploy that.

34
00:01:58.553 --> 00:02:00.010
It's based on the contents of the file.

35
00:02:00.010 --> 00:02:04.522
So only the things that you
change will have new hashes and

36
00:02:04.522 --> 00:02:07.813
effectively bust the cache in this case.

37
00:02:07.813 --> 00:02:11.627
So four, you're getting that also for
free out of the box,

38
00:02:11.627 --> 00:02:16.680
which is pretty standard fare for a lot
of these tools, but it's nice to have.

39
00:02:16.680 --> 00:02:17.520
And so we've got that in place.

40
00:02:17.520 --> 00:02:21.597
There are a few other ways to do this.

41
00:02:21.597 --> 00:02:29.292
Another one is, and you've probably seen
this from various other frameworks and

42
00:02:29.292 --> 00:02:34.880
build tools, is we can import
it in our JavaScript as well.

43
00:02:34.880 --> 00:02:40.488
And the reason why this is powerful is
we just saw in the last section that

44
00:02:40.488 --> 00:02:46.390
what we can do is split out our JavaScript
based on how we import it, right?

45
00:02:46.390 --> 00:02:48.630
And so any tag I put in HTML, well, yeah,

46
00:02:48.630 --> 00:02:51.070
it'll get loaded with
HTML tag gets loaded.

47
00:02:51.070 --> 00:02:57.055
But if you have styles that are only
needed for one particular file,

48
00:02:57.055 --> 00:03:02.419
then in that case,
it will also be split out as well, right?

49
00:03:02.419 --> 00:03:07.487
And so, for instance, let's say,
in counter, that's where I'm gonna

50
00:03:07.487 --> 00:03:13.134
choose to pull in the styles, right, as
an initial, just to demonstrate a point.

51
00:03:13.134 --> 00:03:17.865
So do import, and here we'll say,

52
00:03:17.865 --> 00:03:22.455
.styles or style.css, right?

53
00:03:22.455 --> 00:03:26.615
In effect, it looks the same, right?

54
00:03:26.615 --> 00:03:31.310
But if, for instance, I did not end up
needing this file in some way, shape,

55
00:03:31.310 --> 00:03:32.392
or form, right,

56
00:03:32.392 --> 00:03:36.967
you'll see exactly that it won't load
it until it's needed in this case.

57
00:03:36.967 --> 00:03:41.079
So if we go to index at this point,
let's just not pull in that counter logic.

58
00:03:43.718 --> 00:03:47.414
Did I not take the dugout?

59
00:03:47.414 --> 00:03:50.731
If you don't save files,
they don't change, right?

60
00:03:50.731 --> 00:03:55.789
So now, it is only loaded when
I have the counter in place.

61
00:03:55.789 --> 00:04:02.260
So if we go ahead and pull that back in,
then it's loaded as needed, right?

62
00:04:02.260 --> 00:04:06.574
And so when that file is loaded,
then in that case, you get it.

63
00:04:06.574 --> 00:04:09.580
And so now, you can begin to
split out your style sheets.

64
00:04:09.580 --> 00:04:14.802
And if you really wanted to.just to
kind of add a little bit of depth to our

65
00:04:14.802 --> 00:04:20.468
understanding here, you could,
I don't know why you would, but you could.

66
00:04:20.468 --> 00:04:22.888
I have a terrible reason why you
would that you shouldn't do, and

67
00:04:22.888 --> 00:04:23.814
I'm not gonna tell you.

68
00:04:23.814 --> 00:04:27.031
You can do a script,
we'll say type=module,

69
00:04:30.884 --> 00:04:34.202
Where we can do import,

70
00:04:39.549 --> 00:04:42.894
style.css, and let me just go
take it out of that counter now.

71
00:04:45.880 --> 00:04:49.015
That effectively does the same thing.

72
00:04:49.015 --> 00:04:52.667
But at that point, you're like, well,
I had to do that if I want it to get like

73
00:04:52.667 --> 00:04:56.290
pre-processed by Vite and have it go
through post-CSS and all that stuff.

74
00:04:56.290 --> 00:04:57.830
No, you don't have to do that.

75
00:04:57.830 --> 00:05:00.756
If you just use the link tag,
it will go through Vite.

76
00:05:00.756 --> 00:05:05.000
Vite is going to look for basically every
relative path in that index.html file.

77
00:05:05.000 --> 00:05:08.311
And if it knows what to do with it,
you don't have to do the import syntax.

78
00:05:08.311 --> 00:05:12.896
That link would also process it through
Vite the same way as we saw earlier.

79
00:05:12.896 --> 00:05:16.680
If you do have a use case, why you
might choose to do that is if there's

80
00:05:16.680 --> 00:05:21.186
critical CSS that you wanted to have in
a link tag that's immediately loaded, and

81
00:05:21.186 --> 00:05:25.525
then additional CSS that you know you're
gonna want but you wanna preload it.

82
00:05:25.525 --> 00:05:29.373
If there's a unique need
that you need to solve for,

83
00:05:29.373 --> 00:05:32.007
this is totally a valid way to do it.

84
00:05:32.007 --> 00:05:33.466
And we'll look at some
other ones at the very end.

85
00:05:33.466 --> 00:05:34.809
But generally speaking,

86
00:05:34.809 --> 00:05:37.866
this doesn't really give you
that much different margin.

87
00:05:37.866 --> 00:05:44.786
All that will do, let's actually
take a look at the DOM real quick.

88
00:05:44.786 --> 00:05:50.411
All that statement does is it has Vite
loaded, where it will go ahead and,

89
00:05:50.411 --> 00:05:55.057
in this case, it's gonna put
it right here as well, right?

90
00:05:55.057 --> 00:05:57.843
So you've got both different options.

91
00:05:57.843 --> 00:06:03.490
Either works, and depending on what
problem you're trying to solve for.

92
00:06:03.490 --> 00:06:08.402
Cool, so the other thing that Vite
supports is CSS modules, right?

93
00:06:08.402 --> 00:06:14.270
Cuz any file that we import in any of
the various ways that I showed you,

94
00:06:14.270 --> 00:06:17.770
they will all be added globally, right?

95
00:06:17.770 --> 00:06:23.377
And this is where PostCSS gets involved
a little bit, which is, you saw there's

96
00:06:23.377 --> 00:06:29.000
no difference in what's in that style CSS
and what got loaded in the file itself.

97
00:06:29.000 --> 00:06:34.410
And so what we could do, for
instance, is the convention of Vite.

98
00:06:34.410 --> 00:06:39.342
This is, again, where we're now into
the second super Vite-specific thing,

99
00:06:39.342 --> 00:06:41.600
which is, one, the relative path.

100
00:06:41.600 --> 00:06:45.384
But then, two,
a different file extension for

101
00:06:45.384 --> 00:06:48.990
CSS you would like to
treat as the CSS module.

102
00:06:48.990 --> 00:06:50.680
What is a CSS module?

103
00:06:50.680 --> 00:06:52.797
A CSS module is basically, hey,

104
00:06:52.797 --> 00:06:56.815
I only want these scoped to just
this file that I'm pulling in.

105
00:06:56.815 --> 00:06:59.562
I'm gonna apply the styles
programmatically,

106
00:06:59.562 --> 00:07:02.379
make sure that they're
not globally available.

107
00:07:02.379 --> 00:07:03.800
Let's take a look at that in practice, and

108
00:07:03.800 --> 00:07:05.270
I think it'll make it
a little bit clearer.

109
00:07:05.270 --> 00:07:08.078
So I could, for instance,
I've got this counter CSS.

110
00:07:08.078 --> 00:07:13.098
We'll say, .count, and we'll say,

111
00:07:13.098 --> 00:07:17.834
I don't know, font-size is 6rem.

112
00:07:17.834 --> 00:07:23.478
Seems legit, and if I load it
like this with just counter CSS,

113
00:07:23.478 --> 00:07:27.183
well, it's gonna be loaded globally.

114
00:07:27.183 --> 00:07:32.288
But if I rename the file,
and I say .module.CSS,

115
00:07:32.288 --> 00:07:38.130
it's gonna behave a little
bit differently now, right?

116
00:07:38.130 --> 00:07:45.094
And what's gonna happen is I can go in to,
let's say, counter, for instance.

117
00:07:45.094 --> 00:07:50.600
And we'll say, We can start

118
00:07:50.600 --> 00:07:57.532
with even import styles
from counter.module.css.

119
00:07:57.532 --> 00:08:00.224
And I'm gonna start just by console
logging that object for you.

120
00:08:02.689 --> 00:08:08.150
Right, and we'll go ahead and
we'll take a look at that.

121
00:08:08.150 --> 00:08:10.510
And you can see that it gave us an object.

122
00:08:10.510 --> 00:08:14.934
So styles.count,
count being the name of the class,

123
00:08:14.934 --> 00:08:19.742
right, is now this funny,
unique thing that is probably,

124
00:08:19.742 --> 00:08:24.957
technically globally available,
but through obscurity not.

125
00:08:24.957 --> 00:08:28.047
And this is pretty common in this case.

126
00:08:28.047 --> 00:08:33.603
We actually believe we go into source and
we look at this counter, right?

127
00:08:33.603 --> 00:08:36.898
It is actually like going ahead,
it has made it a JavaScript file.

128
00:08:36.898 --> 00:08:41.672
And you can see that it will, for
instance, add this class into the DOM, but

129
00:08:41.672 --> 00:08:43.474
it will be uniquely scoped.

130
00:08:43.474 --> 00:08:48.238
So now, what we can do is we can go in
here for the given countElement, for

131
00:08:48.238 --> 00:08:49.035
instance.

132
00:08:49.035 --> 00:08:50.122
We could say,

133
00:08:53.120 --> 00:09:00.463
countElement.classList.add(styles.count).

134
00:09:00.463 --> 00:09:04.442
And if we look at that DOM node now,
we'll go ahead and we'll see,

135
00:09:04.442 --> 00:09:06.020
scroll down a little bit.

136
00:09:06.020 --> 00:09:10.094
I could have collapsed that,
go into the body, we'll find our count.

137
00:09:12.591 --> 00:09:15.825
You can see it's got that unique
class put on it in this case.

138
00:09:15.825 --> 00:09:16.482
So that's scoped directly.

139
00:09:16.482 --> 00:09:19.190
And all you had to do
was use the dot module.

140
00:09:19.190 --> 00:09:23.704
And now, it'll be that scoping instead
of a global style in this case and

141
00:09:23.704 --> 00:09:24.970
you get it for free.

142
00:09:24.970 --> 00:09:29.798
You can also go ahead and
just do this as well.

143
00:09:29.798 --> 00:09:34.790
That's probably a problem,
not too much, variable name but

144
00:09:34.790 --> 00:09:38.438
that will also be the same
style in this case.

145
00:09:38.438 --> 00:09:44.046
And so this will work in
Vanilla JavaScript obviously,

146
00:09:44.046 --> 00:09:46.800
it will also work in React.

147
00:09:46.800 --> 00:09:50.131
Like a lot of the other frameworks have
other ways to have scoped modules like

148
00:09:50.131 --> 00:09:52.228
Svelte, you just put
a style tag in the module.

149
00:09:52.228 --> 00:09:55.911
I think Vue is the same thing,
that Vite doesn't count,

150
00:09:55.911 --> 00:09:57.767
cuz I was talking about Vue.

151
00:09:57.767 --> 00:10:02.362
And so different frameworks kinda
have pieces of this built in, but

152
00:10:02.362 --> 00:10:05.920
guess how Vue and
Svelte are doing it under the hood.

153
00:10:05.920 --> 00:10:08.733
They're using Vite, so
technically accounts.

154
00:10:08.733 --> 00:10:13.325
But for React, which doesn't have
a really great way to load CSS,

155
00:10:13.325 --> 00:10:17.184
you can use this technique and
it will work flawlessly.

156
00:10:17.184 --> 00:10:20.750
And they are dynamically loaded
only when this module is loaded.

157
00:10:20.750 --> 00:10:24.551
So if you have it on a given
React component or what have you,

158
00:10:24.551 --> 00:10:29.661
it will then be code split and only loaded
as needed, and not in the full bundle.

159
00:10:29.661 --> 00:10:31.766
And everything will be split out,

160
00:10:31.766 --> 00:10:35.620
and you will have nice small little
chunks to load in this case.

