WEBVTT

1
00:00:00.440 --> 00:00:03.413
All right, so I got a challenge for you,

2
00:00:03.413 --> 00:00:07.538
which is we can choose to do
this asynchronously or not.

3
00:00:07.538 --> 00:00:08.930
In counter, right?

4
00:00:08.930 --> 00:00:14.552
It would be great to make an additional
file, let's call it banner.js, right?

5
00:00:14.552 --> 00:00:21.138
And banner.js, maybe when the counter
goes below zero over ten,

6
00:00:21.138 --> 00:00:25.960
something along those lines,
we might choose to

7
00:00:25.960 --> 00:00:30.797
then dynamically load another bundle,
right?

8
00:00:30.797 --> 00:00:35.713
And show it on, your counter's below zero,
above ten, so on and so forth.

9
00:00:35.713 --> 00:00:41.065
If you're like, I have not had to write
vanilla JavaScript in a while and

10
00:00:41.065 --> 00:00:43.888
I forgot how one manipulates the DOM.

11
00:00:43.888 --> 00:00:47.592
Don't worry,
I already prepared for that fact.

12
00:00:47.592 --> 00:00:50.654
Marc is gonna shake his head
because he probably believe that you

13
00:00:50.654 --> 00:00:54.110
should all know how to use vanilla
JavaScript, but I know that, I don't.

14
00:00:54.110 --> 00:00:59.280
[LAUGH] So if you needed inspiration for
the sample code,

15
00:00:59.280 --> 00:01:04.670
something like this,
there is a div with the id content and

16
00:01:04.670 --> 00:01:08.307
you could literally set it to the text.

17
00:01:08.307 --> 00:01:12.362
Clearly, the nice part is you don't
necessarily have to worry about styling it

18
00:01:12.362 --> 00:01:14.490
because we have not talked about CSS yet.

19
00:01:14.490 --> 00:01:19.230
We're simply gonna try to dynamically
load another JavaScript file on

20
00:01:19.230 --> 00:01:22.635
the condition that it goes,
whatever you choose.

21
00:01:22.635 --> 00:01:26.382
I think I chose in this example below 0 or
you can go above 10,

22
00:01:26.382 --> 00:01:28.237
whatever makes you happiest.

23
00:01:28.237 --> 00:01:33.213
Then we want to then, in the same way we
dynamically loaded that counter before,

24
00:01:33.213 --> 00:01:35.566
we wanna then go load one more bundle.

25
00:01:35.566 --> 00:01:38.366
And then we'll kinda see how
that gets split out as well.

26
00:01:38.366 --> 00:01:40.200
And we'll get a chance to play with that,
and

27
00:01:40.200 --> 00:01:42.233
then see the different
ways that that might work.

28
00:01:42.233 --> 00:01:44.140
Kinda get warmed up, get loose,

29
00:01:44.140 --> 00:01:48.301
make sure everything installs the way
we think it's supposed to install

30
00:01:48.301 --> 00:01:52.615
on our setups work before we get into
a deeper dive into the squirrely bits.

31
00:01:52.615 --> 00:01:53.315
Cool.

32
00:01:57.025 --> 00:02:00.285
There was a little solution
hiding down there for

33
00:02:00.285 --> 00:02:04.113
the eagle-eyed amongst us,
but let's do it together.

34
00:02:04.113 --> 00:02:05.348
So we can go ahead and

35
00:02:05.348 --> 00:02:09.649
like I showed you a little bit of
a cheat sheet here because this is not.

36
00:02:09.649 --> 00:02:14.921
This is about configuring our build tools,
not about.

37
00:02:14.921 --> 00:02:17.476
We're gonna talk about how to build stuff,
not actually build it.

38
00:02:17.476 --> 00:02:18.875
It's gonna be great.

39
00:02:18.875 --> 00:02:20.071
So we'll make a banner.js.

40
00:02:20.071 --> 00:02:22.235
That seems like a good name for the file.

41
00:02:22.235 --> 00:02:27.145
And I can do export const addBanner.

42
00:02:27.145 --> 00:02:31.693
No one asked me yet, but
if you're wondering,

43
00:02:31.693 --> 00:02:36.711
generally speaking,
as they just, that's a lot.

44
00:02:36.711 --> 00:02:43.525
Let's do document.querySelector,
and we'll do that #content.

45
00:02:43.525 --> 00:02:47.925
I almost always use export const
instead of export default.

46
00:02:47.925 --> 00:02:52.828
One is cuz for stuff like React for
instance, if you give the thing a name

47
00:02:52.828 --> 00:02:57.672
first, like IntelliSense is better
about doing the auto importing.

48
00:02:57.672 --> 00:03:01.061
And then two,
it's easier to just add more things.

49
00:03:01.061 --> 00:03:05.269
But the nice part is on those dynamic
imports, if you export default then it's

50
00:03:05.269 --> 00:03:09.493
initially called default, and then you've
got to rename it to whatever you want.

51
00:03:09.493 --> 00:03:11.389
And so if I export the constant,
I get the right name.

52
00:03:11.389 --> 00:03:16.425
But if you wanna export default,
go for it, I just choose not to.

53
00:03:16.425 --> 00:03:21.264
And then we'll do .textContent = text,
right?

54
00:03:21.264 --> 00:03:22.784
Something super simple.

55
00:03:22.784 --> 00:03:28.052
And what we're gonna do to
the counter is we're gonna say

56
00:03:28.052 --> 00:03:33.554
we do this in the render where
we've got the current count.

57
00:03:33.554 --> 00:03:37.665
And we'll set that, and we'll say, if
the count, do we want to do less than 0 or

58
00:03:37.665 --> 00:03:38.697
greater than 10?

59
00:03:38.697 --> 00:03:39.564
What makes us happy?

60
00:03:41.516 --> 00:03:45.418
Let's do less than 0, all right.

61
00:03:45.418 --> 00:03:52.825
We'll go with that import, and
in this example, I called it banner.js.

62
00:03:52.825 --> 00:03:54.825
And then we've got that
addBanner in there.

63
00:03:54.825 --> 00:03:55.773
Is that what it says?

64
00:03:55.773 --> 00:03:56.643
Let's see.

65
00:03:56.643 --> 00:04:00.329
Yep, we've got addBanner,
IntelliSense for the win.

66
00:04:00.329 --> 00:04:03.294
And then now we have that file.

67
00:04:03.294 --> 00:04:06.315
I can say addBanner and we'll say,

68
00:04:12.233 --> 00:04:14.971
You're below zero.

69
00:04:14.971 --> 00:04:15.898
And we know how that plays.

70
00:04:15.898 --> 00:04:23.236
And what I want you to see as we do this
is when the file gets imported, right?

71
00:04:23.236 --> 00:04:26.625
So that's what we're gonna watch for here.

72
00:04:26.625 --> 00:04:30.264
So go ahead,
we've got hello from index.js.

73
00:04:30.264 --> 00:04:33.863
And let's go ahead and
let's give it a shot,

74
00:04:33.863 --> 00:04:37.577
where I'm gonna pull up
the Network tab here.

75
00:04:37.577 --> 00:04:43.276
And we should see it in that case where
if we increment, file's not loaded.

76
00:04:43.276 --> 00:04:45.034
I want all things.

77
00:04:45.034 --> 00:04:47.239
And let's clear it real quick.

78
00:04:47.239 --> 00:04:51.752
Increment, and then as soon as we
decrement to below zero, then it's

79
00:04:51.752 --> 00:04:56.963
dynamically loaded when it's needed, and
we pull in all of the assets, right?

80
00:04:56.963 --> 00:04:59.648
And it's from that initial,
from that counter.js.

81
00:04:59.648 --> 00:05:00.984
And we get that all for free.

82
00:05:00.984 --> 00:05:06.095
And as we go to build it, you'll see that
that is all kind of taken care for us.

83
00:05:06.095 --> 00:05:08.871
We'll actually do it from in here.

84
00:05:08.871 --> 00:05:12.811
I've got that preview server going,
but we'll do npm run build.

85
00:05:12.811 --> 00:05:17.745
And now you'll see that it
breaks out into three files.

86
00:05:17.745 --> 00:05:20.654
So if you do need to, if you're like, hey,

87
00:05:20.654 --> 00:05:24.285
we talked about what is
the upper limit for the bundle.

88
00:05:24.285 --> 00:05:28.846
If you are like,
I do wanna start splitting this out, and

89
00:05:28.846 --> 00:05:34.655
I wanna have some opinions on when it
happens and why it happens, right?

90
00:05:34.655 --> 00:05:38.729
Those dynamic imports will basically
take care of everything else for you.

91
00:05:38.729 --> 00:05:44.416
Just to kind of illustrate
the difference here, let's go ahead and

92
00:05:44.416 --> 00:05:49.423
we'll do it at the top of the file
like we would normally do.

93
00:05:49.423 --> 00:05:53.096
And like I said before, if you're
using a router or something like that,

94
00:05:53.096 --> 00:05:56.056
a lot of this is being taken care of for
you by, whether it's

95
00:05:56.056 --> 00:05:59.874
your routing framework of choice is
effectively doing this under the hood.

96
00:05:59.874 --> 00:06:03.603
But this is how it works and how if you
need to have opinions about it in your

97
00:06:03.603 --> 00:06:05.759
build process to split stuff out it all works.

98
00:06:05.759 --> 00:06:08.755
So now if I pull it up here and
I do an npm run build,

99
00:06:08.755 --> 00:06:10.962
you can see I only got two files now.

100
00:06:10.962 --> 00:06:13.473
Cuz it knew that, hey, I'm not going.

101
00:06:13.473 --> 00:06:17.415
Now, ES modules out of the box
would try to do two requests and

102
00:06:17.415 --> 00:06:22.150
in development it will theoretically
try to have those things in place.

103
00:06:22.150 --> 00:06:25.554
But to cut down on the number of requests,

104
00:06:25.554 --> 00:06:29.457
it will bundle this all
together into one file.

105
00:06:29.457 --> 00:06:32.193
Cuz it's like,
if you instantly need this file, right?

106
00:06:32.193 --> 00:06:34.237
It will kinda be put
together in one chunk.

107
00:06:34.237 --> 00:06:39.183
So you get some control out of that, but
not necessarily from configuring Vite or

108
00:06:39.183 --> 00:06:41.003
anything along those lines,

109
00:06:41.003 --> 00:06:45.610
from just writing your code with
asynchronous fetching will do the trick.

110
00:06:45.610 --> 00:06:50.170
And everything else is effectively
taken care of for you at that point.

