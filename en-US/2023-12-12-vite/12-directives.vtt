WEBVTT

1
00:00:00.000 --> 00:00:04.366
When last we left off, we brought in
this imagetools plugin, which is,

2
00:00:04.366 --> 00:00:08.390
honestly in this repo that was just
kind of our little playground.

3
00:00:08.390 --> 00:00:14.104
The first time we've touched any amount
of Vite configuration whatsoever.

4
00:00:14.104 --> 00:00:19.866
And what imagetools does is it gives
a bunch of additional abilities when we

5
00:00:19.866 --> 00:00:26.187
import a URL or an image to process it and
actually get other information about it.

6
00:00:26.187 --> 00:00:29.352
If you use Next or something like that,
a lot of times, they want the width and

7
00:00:29.352 --> 00:00:32.247
the height of the image, maybe you
don't have it, so on and so forth.

8
00:00:32.247 --> 00:00:36.011
But theoretically,
that is knowable information but

9
00:00:36.011 --> 00:00:38.640
kind of depends on a bunch of factors.

10
00:00:38.640 --> 00:00:40.681
So the imagetools is like
the first plugin, and

11
00:00:40.681 --> 00:00:43.447
it looks very similar to how we
brought in React before, right?

12
00:00:43.447 --> 00:00:46.973
And it will just kind of add a little
bit of extra functionality to

13
00:00:46.973 --> 00:00:48.883
our ability to use these imports.

14
00:00:48.883 --> 00:00:53.903
So when you go back,
instead of the favicon,

15
00:00:53.903 --> 00:00:58.529
we're gonna go back to my self portrait,

16
00:00:58.529 --> 00:01:02.771
steve-after-a-workshop.png.

17
00:01:02.771 --> 00:01:06.627
And that might not be the after workshop.

18
00:01:06.627 --> 00:01:08.888
It's .jpg, that's the issue.

19
00:01:08.888 --> 00:01:12.108
So .jpg, and good, we're ready to go.

20
00:01:12.108 --> 00:01:16.109
And as a reminder,
the picture is gigantic.

21
00:01:16.109 --> 00:01:22.983
What imagetool gives us is very simply
the ability to do something like h=400.

22
00:01:24.508 --> 00:01:27.189
Right, and
now it will resize the image for us.

23
00:01:27.189 --> 00:01:32.481
This is not, just it crushed down, right?

24
00:01:32.481 --> 00:01:37.541
This is literally the image was resized
on the fly by our buildtools, right?

25
00:01:37.541 --> 00:01:42.129
And we can verify this by doing,
we'll do npm run build.

26
00:01:44.782 --> 00:01:49.340
And you can see before,
the image was 5 kilobytes, or

27
00:01:49.340 --> 00:01:55.006
5 megabytes, 5,000 kilobytes,
and now it is 31, right?

28
00:01:55.006 --> 00:02:00.474
So we're able to kind of resize, and that
is now the one that is produced is a JPEG.

29
00:02:00.474 --> 00:02:04.654
And it is much smaller in this case,
and we didn't have to go in there and

30
00:02:04.654 --> 00:02:05.990
resize it ourselves.

31
00:02:05.990 --> 00:02:07.339
We can add other options too, right?

32
00:02:07.339 --> 00:02:14.721
We could say, and
I think it's format=webp.

33
00:02:14.721 --> 00:02:18.135
And then let's do another build here.

34
00:02:18.135 --> 00:02:22.761
And now, you can see that it has actually
also changed it to a different file format

35
00:02:22.761 --> 00:02:26.127
as well, that's a little bit
more performant for the web.

36
00:02:26.127 --> 00:02:30.961
And probably this is the one
where we can do the, and for

37
00:02:30.961 --> 00:02:35.185
a second, I'm just gonna console.log this.

38
00:02:37.847 --> 00:02:41.835
Do console.log(image), and
at first, we should see the URL.

39
00:02:44.040 --> 00:02:48.710
And we'll go ahead, yeah, and you can
see that it's a proxy URL at this point,

40
00:02:48.710 --> 00:02:49.212
right?

41
00:02:49.212 --> 00:02:50.348
When we do the build process,

42
00:02:50.348 --> 00:02:53.400
that's when it's gonna actually spit
it out into all the different versions.

43
00:02:53.400 --> 00:02:57.977
This is, quote unquote,
the URL for our image.

44
00:02:57.977 --> 00:03:01.595
And part of it is that if we wanna
use something like source set and

45
00:03:01.595 --> 00:03:03.538
bring in multiple sizes, right,

46
00:03:03.538 --> 00:03:08.369
this URL will respond with everything that
we kinda need for the different versions.

47
00:03:08.369 --> 00:03:11.302
But this is effectively the URL we're
using, and then I'm pretty sure,

48
00:03:11.302 --> 00:03:13.878
if I'm not mistaken,
I've never actually tried this before.

49
00:03:13.878 --> 00:03:18.856
So we're gonna live take a look if this
works the way I think it's gonna work.

50
00:03:18.856 --> 00:03:24.489
Yeah, and so it is the image that URL
being served by the Vite server, right?

51
00:03:24.489 --> 00:03:29.415
But you can see it is the smaller one
based on our preferences at this point.

52
00:03:29.415 --> 00:03:33.572
And then we can do,

53
00:03:35.853 --> 00:03:38.891
Believe, I'm doing this from memory,
this is mostly me showing off.

54
00:03:38.891 --> 00:03:44.944
So if it doesn't work, it'll be the second
time it didn't work, it'd be great.

55
00:03:44.944 --> 00:03:51.441
So we'll go back, and yeah, so I did that,
one more query from as metadata, right?

56
00:03:51.441 --> 00:03:55.834
And as you see, now instead of getting
just the URL, I'm actually getting a whole

57
00:03:55.834 --> 00:03:59.350
bunch of data about the image that
I can use in my JavaScript code.

58
00:03:59.350 --> 00:04:00.490
And then at build time,

59
00:04:00.490 --> 00:04:03.515
it will have all of that information
as we go when we spit it out.

60
00:04:03.515 --> 00:04:08.570
So for instance, at this point, I did set
the height to 400, we do have that source.

61
00:04:08.570 --> 00:04:11.762
Now, if I wanted to use it in the tag,
instead of putting the image,

62
00:04:11.762 --> 00:04:15.571
I have to say image.source cuz now this is
an object instead of just a string, but

63
00:04:15.571 --> 00:04:16.539
I can get the width.

64
00:04:16.539 --> 00:04:19.487
So if I was using Next,
image where I want some width and

65
00:04:19.487 --> 00:04:23.603
a height to put the placeholder in there,
I now have access to this, right?

66
00:04:23.603 --> 00:04:28.076
And I don't have to go measure it and
guess and then resize the image,

67
00:04:28.076 --> 00:04:30.557
I have all of this basically for free.

68
00:04:30.557 --> 00:04:34.285
And now, all those things of like, okay,
I do wanna make sure I'm using, and

69
00:04:34.285 --> 00:04:37.183
I can have multiple formats and
do all those things, right?

70
00:04:37.183 --> 00:04:41.477
We can actually take a look at the, yeah,

71
00:04:41.477 --> 00:04:49.232
that's another example of all the metadata
in this case that we kinda saw.

72
00:04:49.232 --> 00:04:53.140
And there's a whole bunch of other
directives, which are super cool, and

73
00:04:53.140 --> 00:04:56.880
just kinda show you what you might
need to do depending on your use case.

74
00:04:56.880 --> 00:05:01.363
For the most part,
getting into a smaller size and

75
00:05:01.363 --> 00:05:06.288
then maybe turn it into
a different format that works.

76
00:05:06.288 --> 00:05:09.475
I mean, you could literally,

77
00:05:09.475 --> 00:05:14.623
I can import multiple times here,
so I could say,

78
00:05:14.623 --> 00:05:19.419
we can turn this one into,
call this one webp.

79
00:05:19.419 --> 00:05:24.809
We'll keep the metadata on for a second,
but then theoretically, if I also wanted

80
00:05:24.809 --> 00:05:29.970
the URL of just the JPEG one, I can import
it again without changing the format.

81
00:05:29.970 --> 00:05:33.476
And so if I wanted to have fallbacks that
we see a lot of times in the picture

82
00:05:33.476 --> 00:05:37.218
element, right, I can actually generate
multiple versions of this image,

83
00:05:37.218 --> 00:05:37.811
have URLs.

84
00:05:37.811 --> 00:05:42.758
And then as we'll see, instead of calling
import webp, we'll call this one jpg,

85
00:05:42.758 --> 00:05:43.262
right?

86
00:05:43.262 --> 00:05:46.972
And this is one of those things
where I would probably do it once in

87
00:05:46.972 --> 00:05:48.633
some kind of reusable code.

88
00:05:48.633 --> 00:05:51.378
Either if I'm using React, I would
do it in a React component, Svelte,

89
00:05:51.378 --> 00:05:53.943
I'll do it in a Svelte component,
where now I've got an image tag,

90
00:05:53.943 --> 00:05:55.878
it'll automatically,
I'll give it the source,

91
00:05:55.878 --> 00:05:58.770
it will then try to generate all the
different versions, so on and so forth.

92
00:05:58.770 --> 00:06:04.282
So we can see jpg as well, and
then we should see both of those loaded,

93
00:06:04.282 --> 00:06:08.953
but then the more interesting
part is when I go to build it.

94
00:06:08.953 --> 00:06:11.104
That's not the right server, there we go.

95
00:06:13.741 --> 00:06:17.710
We got it, I'm just gonna make
sure I'm in the right one,

96
00:06:17.710 --> 00:06:20.552
let's run the build process real quick.

97
00:06:23.588 --> 00:06:27.139
So we've got both of those in there,
let's do npm run build.

98
00:06:29.669 --> 00:06:32.481
And now, you can see it spit out
both the jpeg and the webp, and

99
00:06:32.481 --> 00:06:34.390
I'm getting basically any file format.

100
00:06:34.390 --> 00:06:37.497
If I need multiple sizes for
multiple purposes,

101
00:06:37.497 --> 00:06:40.544
I can even give it a stack,
I believe, I can do.

102
00:06:40.544 --> 00:06:45.495
I believe I can throw this, and
will say, give me a 400 one, and

103
00:06:45.495 --> 00:06:51.079
an 800 pixel one, and then you can see
that now it generated two of them.

104
00:06:51.079 --> 00:06:55.453
And I can reference both of them,
and we can actually see,

105
00:06:55.453 --> 00:06:58.950
server's definitely running, there it is.

106
00:06:58.950 --> 00:07:02.350
Now, I've got the two webp
ones in this case, right?

107
00:07:02.350 --> 00:07:04.882
So you could see that webp
before was a single one,

108
00:07:04.882 --> 00:07:07.002
now it's an array of two images, right?

109
00:07:07.002 --> 00:07:10.425
And so I've got the one that's got
the width of 300 and the height of 400,

110
00:07:10.425 --> 00:07:12.693
the width of 600,
the height of 800, right?

111
00:07:12.693 --> 00:07:16.073
They are the stack based on
the way that I ordered the params.

112
00:07:16.073 --> 00:07:20.955
And so now if I need multiple
versions of the image, and

113
00:07:20.955 --> 00:07:27.751
if you look closely at the directives,
there's the very practical stuff,

114
00:07:27.751 --> 00:07:32.022
like, get a source set,
get different sizes.

115
00:07:32.022 --> 00:07:38.139
But there's also a bunch of different
filters as well, so you can blur it.

116
00:07:38.139 --> 00:07:43.521
And the blurring,
you can do things of generating one that's

117
00:07:43.521 --> 00:07:48.710
a much lower quality as
the placeholder that loads faster.

118
00:07:48.710 --> 00:07:52.620
The other one in that case, you could
theoretically go in base 64 encoded,

119
00:07:52.620 --> 00:07:54.675
depending on what you're trying to do.

120
00:07:54.675 --> 00:07:59.076
You have all these tools, and
really just putting the one plugin there,

121
00:07:59.076 --> 00:08:03.930
Vite is able to then generate all of these
for you depending on what you wanna do.

122
00:08:03.930 --> 00:08:07.299
The metadata will give you all the data,
but then if I take off the app metadata,

123
00:08:07.299 --> 00:08:09.780
I will just get the URLs, and
I can just use them directly.

124
00:08:09.780 --> 00:08:14.088
I might not need all that metadata, it
mostly show you can do stuff with it, but

125
00:08:14.088 --> 00:08:16.719
there are also the various
different outputs.

126
00:08:16.719 --> 00:08:21.992
So in this case, you can literally just
generate the source set in this way

127
00:08:21.992 --> 00:08:27.797
as well, where you basically, you get all
of it for free and you can generate it.

128
00:08:27.797 --> 00:08:30.389
And we really didn't have to do much, and

129
00:08:30.389 --> 00:08:35.204
these are the things where it's a lot of
times, if it is a part of our core app,

130
00:08:35.204 --> 00:08:39.819
for me, yeah, I will spend the time,
by hand, it's not that big a deal.

131
00:08:39.819 --> 00:08:43.668
But there's some times when we're working
on the conference website, and there's

132
00:08:43.668 --> 00:08:47.101
a deadline to get it out so that marketing
could get all these things happen.

133
00:08:47.101 --> 00:08:52.662
Sometimes you can't do the perfect thing
unless you have tooling that does it for

134
00:08:52.662 --> 00:08:53.658
you, right?

135
00:08:53.658 --> 00:08:57.225
And a lot of this tooling takes the things
that we know we're supposed to do on

136
00:08:57.225 --> 00:08:58.912
the web and the things that we know.

137
00:08:58.912 --> 00:09:02.975
You can do stuff around font optimization
with different plugins, but a lot of this

138
00:09:02.975 --> 00:09:06.530
becomes just part of your build process
and you kinda set everything up.

139
00:09:06.530 --> 00:09:12.250
And with Vite, there's no lag in that
time it took to generate that page.

140
00:09:12.250 --> 00:09:14.520
It was incredibly fast, right?

141
00:09:14.520 --> 00:09:16.918
It was not a whole lot of extra work,
right?

142
00:09:16.918 --> 00:09:21.484
The details of what you might wanna do
might take you a story in a sprint,

143
00:09:21.484 --> 00:09:25.148
right, to get exactly what you need for
the given setup.

144
00:09:25.148 --> 00:09:29.451
But as you can see, you can pull it in
different sizes, different formats, right?

145
00:09:29.451 --> 00:09:33.553
Set up all the fallbacks, depending on
what you're trying to do in this case,

146
00:09:33.553 --> 00:09:36.244
right, as the picture and
have those all in place.

147
00:09:36.244 --> 00:09:39.092
And at build time,
it will optimize all the images for

148
00:09:39.092 --> 00:09:40.938
you exactly the way that you need.

149
00:09:40.938 --> 00:09:43.535
And again, I would most likely
put this in reusable code, right?

150
00:09:43.535 --> 00:09:47.704
Some kinda component that kind of
generates exactly what you need, but

151
00:09:47.704 --> 00:09:50.282
the heavy lifting is done incredibly easy.

152
00:09:50.282 --> 00:09:56.428
And this is kinda like I said before, as
we move from Vite is easy, almost did it.

153
00:09:56.428 --> 00:10:00.348
I call it myself,
that doesn't count, to its powerful,

154
00:10:00.348 --> 00:10:05.308
which is now I'm getting a lot of these
best practices kind of just built in

155
00:10:05.308 --> 00:10:09.239
without the overhead of having
to do it directly, right?

156
00:10:09.239 --> 00:10:10.506
So that's super powerful.

157
00:10:10.506 --> 00:10:16.332
And there's other really interesting
things that you can do as well,

158
00:10:16.332 --> 00:10:18.512
which is, for instance.

159
00:10:18.512 --> 00:10:24.941
imagetools is not the only query param
that we have available to us, right?

160
00:10:24.941 --> 00:10:28.740
And there are some that are just built
into Vite without any plugins whatsoever.

161
00:10:28.740 --> 00:10:33.272
A lot of them, honestly,
I use some of them, but

162
00:10:33.272 --> 00:10:36.930
I use them for very specific use cases.

163
00:10:36.930 --> 00:10:41.090
So for instance, I can,
for instance, import,

164
00:10:41.090 --> 00:10:44.762
let's get that addBanner function again.

165
00:10:46.483 --> 00:10:50.818
Let's say, I'm gonna do addBanner, and
you'll see what I'm about to do here.

166
00:10:55.074 --> 00:10:59.664
From banner.js, and I am just gonna
give it and export default so

167
00:10:59.664 --> 00:11:04.183
I don't get yelled at real quick,
as well of the same function.

168
00:11:04.183 --> 00:11:09.028
And so when that happens,
you can see that, for

169
00:11:09.028 --> 00:11:13.281
the most part, we got, yeah, that one.

170
00:11:13.281 --> 00:11:17.847
Just doing the import as we
saw in the very beginning will

171
00:11:17.847 --> 00:11:20.284
import the function itself.

172
00:11:20.284 --> 00:11:22.725
So let's go ahead and
we'll console.log it.

173
00:11:22.725 --> 00:11:24.745
And you're gonna see
a JavaScript function,

174
00:11:24.745 --> 00:11:27.346
you're gonna see exactly what
you expect to see, really.

175
00:11:27.346 --> 00:11:30.982
So we can go ahead, cool,
that is the function, but

176
00:11:30.982 --> 00:11:36.037
that's the way that the console
represents functions in and of itself.

177
00:11:36.037 --> 00:11:41.382
We could give it, The query from at raw,

178
00:11:41.382 --> 00:11:46.384
and now, it is literally
the text of the file, right?

179
00:11:46.384 --> 00:11:49.710
And so as this is a little
more of an esoteric one,

180
00:11:49.710 --> 00:11:54.903
the way that I use this one is we're
building a new version of the homepage for

181
00:11:54.903 --> 00:11:58.821
our site, where we have a bunch
of code samples, right?

182
00:11:58.821 --> 00:12:03.030
I would prefer to have syntax highlighting
and all that stuff as I have the code

183
00:12:03.030 --> 00:12:07.002
samples, but ultimately, I don't
wanna run that code in the browser.

184
00:12:07.002 --> 00:12:12.317
What I wanna do is I want to show
it in a little code block, right?

185
00:12:12.317 --> 00:12:17.016
And so I can import it with the raw
query param, get the raw text and

186
00:12:17.016 --> 00:12:18.740
put it in there as well.

187
00:12:18.740 --> 00:12:24.532
The other one that you can do is,
We have that import,

188
00:12:27.521 --> 00:12:31.411
styles from, I think,
let's grab the banner one.

189
00:12:31.411 --> 00:12:36.702
Banner, oop, nope, banner.module.css,

190
00:12:36.702 --> 00:12:41.801
cool, we'll see that it's an object.

191
00:12:41.801 --> 00:12:47.862
And there's something very similar, whoop,
./, that's why I had that up before.

192
00:12:47.862 --> 00:12:49.016
There we go.

193
00:12:49.016 --> 00:12:55.347
Cool, that's the object, but
I can also do, inLine and

194
00:12:55.347 --> 00:13:00.187
actually get, again, effectively
the same thing with the raw CSS,

195
00:13:00.187 --> 00:13:03.370
if I needed to use it for
some reason, right?

196
00:13:03.370 --> 00:13:06.721
So if I wanted to populate the script tag,
automatically, I can actually get,

197
00:13:06.721 --> 00:13:09.129
the query params basically
will import it differently.

198
00:13:09.129 --> 00:13:12.084
And again, this does fall
into the Vite-specific stuff,

199
00:13:12.084 --> 00:13:14.165
this is not part of the core web platform.

200
00:13:14.165 --> 00:13:19.841
The other one that I can do is, for
anything, I can do and just get the actual

201
00:13:19.841 --> 00:13:25.266
URL, in this case, of the CSS file
that I was trying to pull in, right?

202
00:13:25.266 --> 00:13:28.826
And so there's various different ways
to do it depending on what you need,

203
00:13:28.826 --> 00:13:29.455
to be clear.

204
00:13:29.455 --> 00:13:32.043
You will know it if you need one of these,
right?

205
00:13:32.043 --> 00:13:35.871
This one is a little bit more specific, I
use the raw one because of a very specific

206
00:13:35.871 --> 00:13:39.500
purpose, but the more important part
is imagetools added a bunch of those.

207
00:13:39.500 --> 00:13:43.284
So you can also, theoretically, if you
need two for various different purposes,

208
00:13:43.284 --> 00:13:46.647
if there's not a plugin that exists
when we look into how to make plugins.

209
00:13:46.647 --> 00:13:50.243
You'll see that, okay, well,
I need this file like this sometimes, or

210
00:13:50.243 --> 00:13:54.245
maybe I need it parsed a different way,
especially if you're dealing with things

211
00:13:54.245 --> 00:13:58.363
that maybe not necessarily just JavaScript
but some other file, where it's like,

212
00:13:58.363 --> 00:14:01.330
someone asked before in the chat
about SVG sprites, right?

213
00:14:01.330 --> 00:14:05.450
Or maybe you wanna have the SVG turned
into a PNG, I don't know if you can do

214
00:14:05.450 --> 00:14:09.256
that one in imagetools off the top
of my head, but you probably can.

215
00:14:09.256 --> 00:14:11.336
But for various different places,
if there's not a plugin,

216
00:14:11.336 --> 00:14:12.700
well, this is one how the plugins work.

217
00:14:12.700 --> 00:14:14.475
But if there's not a plugin,

218
00:14:14.475 --> 00:14:18.735
we'll look at how one could begin to
do some of this themselves as well,

219
00:14:18.735 --> 00:14:22.643
but there's a lot of power in the fact
that we can get the raw JSON.

220
00:14:22.643 --> 00:14:27.134
Or the raw JavaScript, or the inline CSS,
or something along that line, and

221
00:14:27.134 --> 00:14:28.735
we have that flexibility.

222
00:14:28.735 --> 00:14:33.741
Again, without a lot of deep configuration
and playing around with things,

223
00:14:33.741 --> 00:14:36.906
everything's kind of
a little bit on easy mode.

224
00:14:36.906 --> 00:14:40.996
&gt;&gt; Are these imagetools only for
static images, or

225
00:14:40.996 --> 00:14:44.197
can you pass dynamic sources to them?

226
00:14:44.197 --> 00:14:47.009
&gt;&gt; So interestingly, out of the box, Vite,

227
00:14:47.009 --> 00:14:52.637
actually it's a good segue to when we get
to, going back to those import statements,

228
00:14:52.637 --> 00:14:57.817
the import promises, Vite has a lot of
rules that they have to be just strings.

229
00:14:57.817 --> 00:15:01.880
And I'll kinda show you real quick,
actually, yeah,

230
00:15:01.880 --> 00:15:04.913
I'll show you, I think I have some code.

231
00:15:04.913 --> 00:15:09.777
So the entire course website
itself is also built on Vite and

232
00:15:09.777 --> 00:15:11.830
use some of this as well.

233
00:15:11.830 --> 00:15:16.452
So I'll show you where I have it,
I don't have that browser open,

234
00:15:16.452 --> 00:15:20.809
so we'll go, So for

235
00:15:20.809 --> 00:15:25.639
the website, it's built on top of Vite
because that makes sense, and I've got all

236
00:15:25.639 --> 00:15:30.003
of these markdown files that eventually
get rendered as the page, right?

237
00:15:30.003 --> 00:15:32.471
Basically, this is a Svelte app,

238
00:15:32.471 --> 00:15:37.675
that part's not particularly important for
our use case at this point.

239
00:15:37.675 --> 00:15:42.507
But if I go into routes and for the given

240
00:15:42.507 --> 00:15:49.104
page, Nope, not that one.

241
00:15:52.984 --> 00:15:57.087
Might actually be there.

242
00:15:57.087 --> 00:16:00.289
For the content,
I can import just this piece, but for

243
00:16:00.289 --> 00:16:04.829
the glob imports and stuff like that,
it doesn't let you get away with a lot.

244
00:16:04.829 --> 00:16:10.564
So in a lot of cases, I have to put it all
together, so you can be somewhat dynamic,

245
00:16:10.564 --> 00:16:14.495
but there's actually a plugin
that I reference later.

246
00:16:18.918 --> 00:16:25.453
There's a plugin, I think it's called
vite-dynamic-import, I have a link

247
00:16:25.453 --> 00:16:32.101
to it in the slide somewhere that I use in
one of the apps that we have, let's see.

248
00:16:33.912 --> 00:16:38.699
Yeah, I'll show it to you down here.

249
00:16:38.699 --> 00:16:41.228
In all things,
you can actually truly interpolate.

250
00:16:41.228 --> 00:16:45.924
There are rules around how much you're
allowed to get away with without a plugin.

251
00:16:45.924 --> 00:16:48.882
It'll let you do a little bit of
interpolation, especially with glob import

252
00:16:48.882 --> 00:16:51.353
and stuff like that,
I haven't talked about glob imports yet.

253
00:16:51.353 --> 00:16:56.191
It wants very strict lines, but
this dynamic import plugin will allow

254
00:16:56.191 --> 00:17:00.543
you to kind of then be able to
compose stuff a little bit easier.

255
00:17:00.543 --> 00:17:06.394
But yeah, without a given plugin to add an
extra level of support, you are somewhat

256
00:17:06.394 --> 00:17:11.576
stuck with just raw strings, but
you can play around with it a little bit,

257
00:17:11.576 --> 00:17:16.360
and this plugin will give you a little
bit more flexibility as well.

