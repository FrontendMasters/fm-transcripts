WEBVTT

1
00:00:00.178 --> 00:00:06.574
Is it possible to give the "exposes"
object a function instead of an object?

2
00:00:06.574 --> 00:00:09.140
&gt;&gt; No, these are file paths, right?

3
00:00:09.140 --> 00:00:13.971
In terms of like, yeah,
can we do it programmatically?

4
00:00:13.971 --> 00:00:16.119
Let's find out together.

5
00:00:16.119 --> 00:00:21.100
It looks like it's just a string,
and array.

6
00:00:21.100 --> 00:00:22.895
You can get an array of those objects or

7
00:00:22.895 --> 00:00:25.654
an object, it seems to be
the only two options in the type.

8
00:00:25.654 --> 00:00:27.979
But great question.

9
00:00:27.979 --> 00:00:33.180
Cool, so here we'll do,
we have the NPM run build,

10
00:00:33.180 --> 00:00:36.858
so we'll just do a npx vite preview.

11
00:00:36.858 --> 00:00:44.088
And then just verifying that
I made that the correct.

12
00:00:44.088 --> 00:00:47.094
Show many, we want that to be React one.

13
00:00:47.094 --> 00:00:49.420
Verify, yeah.

14
00:00:49.420 --> 00:00:53.036
Okay, let's find out together.

15
00:00:53.036 --> 00:00:58.050
We got some TypeScript angriness,
but we can deal with that.

16
00:00:58.050 --> 00:01:04.764
Again, we could generate a d.ts file and
still pull that in as a library too.

17
00:01:04.764 --> 00:01:09.338
It will be slightly off if it changes,
but that's what makes this all hard.

18
00:01:09.338 --> 00:01:14.188
So npm run dev.

19
00:01:14.188 --> 00:01:15.149
Let's find out.

20
00:01:17.733 --> 00:01:21.833
Open in my other Window, but there it is.

21
00:01:21.833 --> 00:01:24.256
There's our button hosted remotely, right?

22
00:01:24.256 --> 00:01:29.220
So theoretically let's try
this out let's go ahead and

23
00:01:29.220 --> 00:01:35.241
on our remote one we're gonna go
let's change some of the semantics

24
00:01:35.241 --> 00:01:41.482
of the button let's say that the button
color is, background color is

25
00:01:44.680 --> 00:01:49.477
Cool, and we'll do a npm run build.

26
00:01:58.239 --> 00:02:05.281
It is angry about that,
oop, no, it was there.

27
00:02:05.281 --> 00:02:09.710
&gt;&gt; Contained in there still,
get the hex for the color.

28
00:02:09.710 --> 00:02:14.512
&gt;&gt; See, this is why you don't trust
other people shipping you code,

29
00:02:14.512 --> 00:02:19.681
even if it's you, cuz they make
mistake and who's getting paged now?

30
00:02:19.681 --> 00:02:22.769
Other me from the mistake
that this me made.

31
00:02:22.769 --> 00:02:25.839
If I didn't, we got to build again, see?

32
00:02:25.839 --> 00:02:29.259
Now all of a sudden your
page is going off, right?

33
00:02:32.074 --> 00:02:36.174
I'm already in trouble for the last time
I like was talking to a microfrontends.

34
00:02:36.174 --> 00:02:39.607
This is not gonna go well for me.

35
00:02:39.607 --> 00:02:44.367
The Internet is not gonna be happy with
me when Marc makes this a TikTok video.

36
00:02:46.545 --> 00:02:48.583
There it is and now it's purple, right?

37
00:02:48.583 --> 00:02:50.524
And so
you can remotely change code in one place.

38
00:02:50.524 --> 00:02:57.141
Everyone consuming this gets it hoping
that nobody on the beginning end.

39
00:02:57.141 --> 00:03:00.321
And accidentally puts a hashtag
before Rebecca Purple, and

40
00:03:00.321 --> 00:03:01.640
you should be good to go.

41
00:03:01.640 --> 00:03:02.942
Like I said, there are useful places.

42
00:03:02.942 --> 00:03:06.730
If I was going to use this, and I do use
it, I would do it with an abundance of

43
00:03:06.730 --> 00:03:09.557
caution, with fallbacks
all over the place, right?

44
00:03:09.557 --> 00:03:13.016
And so
I would most likely replace the nav bar,

45
00:03:13.016 --> 00:03:16.042
that maybe, I would basically do both.

46
00:03:16.042 --> 00:03:18.465
I would have the library, right?

47
00:03:18.465 --> 00:03:21.145
And then have this function
replace the last version so

48
00:03:21.145 --> 00:03:25.163
that if we pushed out a new version, cool,
they get the new one, but if it breaks,

49
00:03:25.163 --> 00:03:29.086
it'd just fall back to a slightly older
nav bar or something along those lines.

50
00:03:29.086 --> 00:03:32.183
I think that there's a lot
of power in this, but

51
00:03:32.183 --> 00:03:36.687
with an abundance of caution as a thing
that would keep me up at night.

52
00:03:36.687 --> 00:03:41.375
&gt;&gt; What if the hosted app is React and
the expose library is built in Vue?

53
00:03:45.095 --> 00:03:49.631
&gt;&gt; Good luck, [LAUGH] I mean,
theoretically, if you think about it cuz I

54
00:03:49.631 --> 00:03:55.048
mean, yeah, you would need to be able to
like do something with what you receive.

55
00:03:55.048 --> 00:03:57.201
Now, there are ways to handle that, right?

56
00:03:57.201 --> 00:03:59.190
Theoretically, I'm just
exposing the component.

57
00:03:59.190 --> 00:04:04.393
What I could do is expose
a function that takes an ID or

58
00:04:04.393 --> 00:04:08.654
selector and then does react dom.mount in

59
00:04:08.654 --> 00:04:12.102
these days into that div, right?

60
00:04:12.102 --> 00:04:14.280
So for instance the navbar is Svelte but

61
00:04:14.280 --> 00:04:16.942
I'm gonna render it
into React application.

62
00:04:16.942 --> 00:04:20.676
So I can use Svelte2TSX that's a thing,
or I can just say,

63
00:04:20.676 --> 00:04:24.263
yo instead of exposing
the component I'm exposing a function

64
00:04:24.263 --> 00:04:28.171
that takes a selector and
will render it in there, all right?

65
00:04:28.171 --> 00:04:31.842
You can do that you can mix and match
frameworks as much as you want, right?

66
00:04:31.842 --> 00:04:34.252
You could have Vue render
into one div on the page.

67
00:04:34.252 --> 00:04:37.946
A lot of times we do when we use any
frameworks we just have like an empty div

68
00:04:37.946 --> 00:04:41.702
and our single page app that is like
root or app or something like that, but

69
00:04:41.702 --> 00:04:45.294
you could just render React just into
a sidebar or just into a menu bar.

70
00:04:45.294 --> 00:04:49.948
Those will all work, but you couldn't
just consumer React component in

71
00:04:49.948 --> 00:04:52.857
Vue without some like tom foolery, right?

72
00:04:52.857 --> 00:04:59.131
I'm not gonna say it's impossible, I'm just
saying it's not a built in thing, right?

73
00:04:59.131 --> 00:05:03.442
Same way if you took a React library
that wasn't module federation, and

74
00:05:03.442 --> 00:05:06.278
you tried to use a new Vue app,
could you do it?

75
00:05:06.278 --> 00:05:07.753
Sure.

76
00:05:07.753 --> 00:05:09.579
Are you in for a rough time?

77
00:05:09.579 --> 00:05:11.745
Absolutely, right?

78
00:05:11.745 --> 00:05:16.296
But yeah, at that point, I would just
target a DOM node and call it a day.

79
00:05:16.296 --> 00:05:20.845
&gt;&gt; Is there a simpler approach
to module federation or

80
00:05:20.845 --> 00:05:24.139
approach that you would use that is?

81
00:05:24.139 --> 00:05:27.034
&gt;&gt; Yeah, I would just make a library.

82
00:05:27.034 --> 00:05:33.284
Right, I think discussing that you can
do module federation in Vite is important.

83
00:05:33.284 --> 00:05:36.950
I, especially as
the manager of the team and

84
00:05:36.950 --> 00:05:41.804
the one who runs front end at the company,
I am by default,

85
00:05:41.804 --> 00:05:46.581
more conservative than
the average developer, right?

86
00:05:46.581 --> 00:05:51.334
In terms of like the risks that
I'm willing to take and so,

87
00:05:51.334 --> 00:05:55.117
I do with an abundance of caution,
what we do,

88
00:05:55.117 --> 00:06:00.549
we'll do it on like low risk
situations where again, updating four

89
00:06:00.549 --> 00:06:07.064
websites with a new navbar or a new
button or whatever, it's tedious, right?

90
00:06:07.064 --> 00:06:10.664
In our core app I told you we have that
open source one and then we actually

91
00:06:10.664 --> 00:06:14.513
package up the open source app because
the cloud app is a superset around it.

92
00:06:14.513 --> 00:06:15.594
We do that manually.

93
00:06:15.594 --> 00:06:16.854
We bump the version.

94
00:06:16.854 --> 00:06:20.285
We check it in staging,
and we deploy it, right?

95
00:06:20.285 --> 00:06:24.590
We opted out of the convenience for
the safety.

96
00:06:24.590 --> 00:06:30.183
However, I know people who work at a very,
very big corporation with a hundred

97
00:06:30.183 --> 00:06:35.355
front-end teams, and just based on
the nature of their architecture,

98
00:06:35.355 --> 00:06:39.540
that's not feasible and
this is the way forward for them.

99
00:06:39.540 --> 00:06:43.890
I have personally made the decisions
in my architecture not to need,

100
00:06:43.890 --> 00:06:48.690
to do this so much, again, I will do it
for if the navbar on the docs page falls

101
00:06:48.690 --> 00:06:52.817
back to the one built into Docusaurus,
everyone's gonna live.

102
00:06:52.817 --> 00:06:54.672
You know what I mean?

103
00:06:54.672 --> 00:06:59.858
If the navbar on the education
site doesn't render at all for

104
00:06:59.858 --> 00:07:04.536
an afternoon, that's not great,
but if it takes down

105
00:07:04.536 --> 00:07:10.150
the product that makes us money,
I'm in trouble, [LAUGH] right?

106
00:07:10.150 --> 00:07:12.597
So it is there as a tool.

107
00:07:12.597 --> 00:07:15.961
And I do know, one of the reasons we
included it was that when I talked to

108
00:07:15.961 --> 00:07:19.497
a bunch of senior engineers at a company
that I probably I can't name, but

109
00:07:19.497 --> 00:07:23.451
whatever, they're we need this cuz, that
is the way our architecture is set up.

110
00:07:23.451 --> 00:07:25.454
So, it is an option.

111
00:07:25.454 --> 00:07:29.429
And there was a belief system that
only Webpack had this, right?

112
00:07:29.429 --> 00:07:32.070
Vite clearly has it.

113
00:07:32.070 --> 00:07:34.974
On the very basics,
not particularly hard to set up.

114
00:07:34.974 --> 00:07:38.537
That doesn't mean that I endorse it,
[LAUGH] per se, or

115
00:07:38.537 --> 00:07:40.481
think that it's a good idea.

116
00:07:40.481 --> 00:07:41.520
Let me rephrase that.

117
00:07:41.520 --> 00:07:44.737
I actively think it's not a good idea.

118
00:07:44.737 --> 00:07:47.228
But there are practical use cases, but

119
00:07:47.228 --> 00:07:50.184
I would treat it with
an abundance of caution.

120
00:07:50.184 --> 00:07:54.344
I say that, be like, Steve showed us
this thing and it looks super cool,

121
00:07:54.344 --> 00:07:55.996
we should do it everywhere.

122
00:07:55.996 --> 00:07:58.275
Steve Kinney does not endorse this message.

123
00:07:58.275 --> 00:08:01.709
My job is to inform and it was
definitely the first thing every senior

124
00:08:01.709 --> 00:08:04.914
engineer said to me when I was
running this material past them.

125
00:08:04.914 --> 00:08:09.485
So I felt like for the people who
need it you know already, like you've

126
00:08:09.485 --> 00:08:13.915
probably built more infrastructure
around it than I have, right?

127
00:08:13.915 --> 00:08:18.979
Because I've actively chosen not to,
right?

128
00:08:18.979 --> 00:08:20.399
When I worked at Twilio,

129
00:08:20.399 --> 00:08:24.810
we did move everything back into a mono
repo on purpose for reasons like this.

130
00:08:24.810 --> 00:08:25.712
Now, granted,

131
00:08:25.712 --> 00:08:29.650
the tooling when we made that choice
was not as good as the tooling is now.

132
00:08:29.650 --> 00:08:34.472
We had 17 versions of react in a 10 year
old code base mixed with backbone and

133
00:08:34.472 --> 00:08:37.119
Marionette and 1,000 other things.

134
00:08:37.119 --> 00:08:41.605
So a modern code base might be
better set up and resilient, but

135
00:08:41.605 --> 00:08:45.661
we made the decision to kind
of co-locate everything so

136
00:08:45.661 --> 00:08:51.032
you could run one integrated test suite
at a one repo in one build process.

137
00:08:51.032 --> 00:08:55.957
I've usually gone the mono-repo route and
not regretted it, but I do know that

138
00:08:55.957 --> 00:09:01.050
the microfrontend route is also popular,
it's just not the one that I endorse.

