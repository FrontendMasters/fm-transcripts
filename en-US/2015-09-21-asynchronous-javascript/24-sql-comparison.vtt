WEBVTT

1
00:00:00.000 --> 00:00:04.028
[MUSIC]

2
00:00:04.028 --> 00:00:07.978
&gt;&gt; Jafara Husain: So I think we left off
yesterday with some pretty intense code

3
00:00:07.978 --> 00:00:13.401
written to some pretty intense expressions
here to calculate data to eventually,

4
00:00:13.401 --> 00:00:18.204
basically create the data that we want,
the collections we want from some

5
00:00:18.204 --> 00:00:22.570
data structure, more and
more collections that we have.

6
00:00:22.570 --> 00:00:25.530
And so I believe we left off
on question 24 which was,

7
00:00:25.530 --> 00:00:28.710
retrieve each of the video ID, title,
middle interesting moment in smallest

8
00:00:28.710 --> 00:00:32.920
boxart of every video nested
in all of these movie list.

9
00:00:32.920 --> 00:00:37.520
So the instant cue, new releases,
each one contains videos array and

10
00:00:37.520 --> 00:00:40.200
each one of the videos
contains two collections.

11
00:00:40.200 --> 00:00:44.900
And we found out that we could make
that happen by using zip, particularly,

12
00:00:44.900 --> 00:00:49.630
I wanna recall that zip is a great
operator to use if you've got two array,

13
00:00:49.630 --> 00:00:51.020
two collections basically
at the same time.

14
00:00:51.020 --> 00:00:52.840
So you've got access to two collections.

15
00:00:52.840 --> 00:00:54.800
You wanna have them both in scope.

16
00:00:54.800 --> 00:00:57.970
One item from each collection and
scope at the same time.

17
00:00:57.970 --> 00:00:59.432
That's when you use ZIP, right?

18
00:00:59.432 --> 00:01:03.588
Whereas map, you use if you want to,
where there's an order dependent.

19
00:01:03.588 --> 00:01:06.861
So I need to map over all of the video
lists before I can retrieve all of

20
00:01:06.861 --> 00:01:09.799
the videos inside because
they're hierarchical, right?

21
00:01:09.799 --> 00:01:11.537
And so
I would use map in terms of order, so

22
00:01:11.537 --> 00:01:14.792
maps a way of sort of enforcing order
of things in an interesting way, right?

23
00:01:14.792 --> 00:01:17.480
You're sort of saying hey,
I wanna map over all the video lists and

24
00:01:17.480 --> 00:01:19.690
then map over all of
the videos inside of it.

25
00:01:19.690 --> 00:01:24.910
Whereas, in this case we sense a video
has both interesting moments and box

26
00:01:24.910 --> 00:01:29.150
starts at a parallel, they're parallel,
they're sort of siblings in the tree.

27
00:01:29.150 --> 00:01:31.216
We have access to both of
them at the same time.

28
00:01:31.216 --> 00:01:35.254
Zip is a great way of getting both
of them in scope simultaneously,

29
00:01:35.254 --> 00:01:38.068
because zip's function
takes 2 arguments or

30
00:01:38.068 --> 00:01:42.919
actually technically the number of
arguments that you pass to arrays, right?

31
00:01:42.919 --> 00:01:46.250
So our implementation of zip, as I
mentioned yesterday just takes two arrays.

32
00:01:46.250 --> 00:01:49.526
But you could see an implementation
of zip it takes n arrays and

33
00:01:49.526 --> 00:01:52.260
then a function that takes n arguments.

34
00:01:52.260 --> 00:01:56.190
So it's when you wanted sort of process
two collections, not quite in parallel in

35
00:01:56.190 --> 00:01:58.560
this in the sense of parallelism
because it's JavaScript, right?

36
00:01:58.560 --> 00:01:59.120
But effectively and

37
00:01:59.120 --> 00:02:01.585
that's the way to think about it, as if
you're doing them both at the same time.

38
00:02:01.585 --> 00:02:04.382
&gt;&gt; [INAUDIBLE].

39
00:02:04.382 --> 00:02:05.195
&gt;&gt; Jafara Husain: Sorry.

40
00:02:05.195 --> 00:02:06.003
&gt;&gt; Speaker 2: Bump the font.

41
00:02:06.003 --> 00:02:07.580
&gt;&gt; Jafara Husain: Bump the fan, okay.

42
00:02:07.580 --> 00:02:11.940
So, how many people in the room,
I'm curious, have experience with SQL?

43
00:02:13.710 --> 00:02:14.410
Quite a few.

44
00:02:14.410 --> 00:02:17.138
I think we've got a bit of
an enterprisy crowd here which is good.

45
00:02:17.138 --> 00:02:21.496
Because, has anybody noticed
any similarity between SQL and

46
00:02:21.496 --> 00:02:23.604
what we've been doing here?

47
00:02:26.205 --> 00:02:27.500
&gt;&gt; Speaker 3: Joins.

48
00:02:27.500 --> 00:02:28.200
&gt;&gt; Jafara Husain: Joins.

49
00:02:28.200 --> 00:02:28.760
Interesting.

50
00:02:29.890 --> 00:02:35.110
Let's take a look at SQL and let's, even
though it has a very different syntax,

51
00:02:35.110 --> 00:02:38.110
let's compare it to what
we've been doing this far.

52
00:02:38.110 --> 00:02:42.490
So, let's say I had a bunch of titles or
excuse me a bunch of lists and

53
00:02:42.490 --> 00:02:43.600
a bunch of videos, and

54
00:02:43.600 --> 00:02:48.560
they were much like in a SQL database
bound together by identifier, by ID.

55
00:02:48.560 --> 00:02:49.894
So let's say we had a list table.

56
00:02:54.132 --> 00:02:56.129
&gt;&gt; Jafara Husain: So this is list.

57
00:02:56.129 --> 00:03:00.503
And let's see it has an ID field and
a name field, and

58
00:03:00.503 --> 00:03:05.574
then we have a videos table and
it has a ID, it also has a listid

59
00:03:05.574 --> 00:03:10.804
field
&gt;&gt; Jafara Husain: And it has a name.

60
00:03:10.804 --> 00:03:12.267
And so here's an example.

61
00:03:25.142 --> 00:03:27.302
&gt;&gt; Jafara Husain: So
we have a video inside of horror.

62
00:03:28.811 --> 00:03:31.006
&gt;&gt; Jafara Husain: It's actually a movie
I just saw yesterday on Netflix,

63
00:03:31.006 --> 00:03:31.853
very good by the way.

64
00:03:35.231 --> 00:03:36.938
&gt;&gt; Jafara Husain: And
this one is in thrillers.

65
00:03:40.084 --> 00:03:41.925
&gt;&gt; Jafara Husain: So
we can see that in relational databases,

66
00:03:41.925 --> 00:03:44.217
information is actually,
it's kinda interesting,

67
00:03:44.217 --> 00:03:46.680
the difference between trees and
relational databases.

68
00:03:46.680 --> 00:03:49.310
Can you please tell me what the difference
in hierarchical structures and

69
00:03:49.310 --> 00:03:50.900
relational databases are?

70
00:03:50.900 --> 00:03:52.510
How do they organize
information differently?

71
00:03:52.510 --> 00:03:54.430
There's one very key obvious difference.

72
00:03:55.610 --> 00:03:59.580
In the hierarchical system, parents
contain references to children, right?

73
00:03:59.580 --> 00:04:02.290
If you look at the previous examples,
right, we had thrillers and

74
00:04:02.290 --> 00:04:05.800
they had a videos collection,
and within that, we had videos.

75
00:04:05.800 --> 00:04:07.860
Here, it's the other way around.

76
00:04:07.860 --> 00:04:10.380
Videos actually have
a references to their parent.

77
00:04:10.380 --> 00:04:12.190
Notice the listid there?

78
00:04:12.190 --> 00:04:16.570
Sp hierarchical and relational systems
are swapped in that particular way.

79
00:04:16.570 --> 00:04:20.000
Now, we use SQL to compose
together relational systems.

80
00:04:20.000 --> 00:04:23.590
So, let's say I wanted to get all of
the names of all the videos in all

81
00:04:23.590 --> 00:04:24.600
the lists, right?

82
00:04:24.600 --> 00:04:28.430
Or actually for every video I wanted to
get both the list name and the video name,

83
00:04:28.430 --> 00:04:31.700
so I wanted to know if it's Die Hard,
I wanna know what list it's inside of.

84
00:04:31.700 --> 00:04:34.430
I'm gonna write a little SQL, here so
I apologize for those you don't know SQL,

85
00:04:34.430 --> 00:04:36.880
but it's really instructive for
those people out there who do know SQL.

86
00:04:36.880 --> 00:04:39.482
And it's gonna demonstrate
the similarity between SQL, for

87
00:04:39.482 --> 00:04:41.230
anybody out there who know sequel.

88
00:04:41.230 --> 00:04:44.150
And what we've been doing today because
the truth is all the concepts we've

89
00:04:44.150 --> 00:04:45.420
been learning map, filter,

90
00:04:45.420 --> 00:04:49.058
reduce merge, zip, all the same
as the concepts that are in SQL.

91
00:04:49.058 --> 00:04:52.160
So I wanna make that, I want to take
a little time to make that, that,

92
00:04:52.160 --> 00:04:54.210
connection in your mind
if you already know SQL.

93
00:04:54.210 --> 00:05:01.368
So, I'm gonna select the videos.name and

94
00:05:01.368 --> 00:05:10.496
lists.name FROM
&gt;&gt; Jafara Husain: Video,

95
00:05:10.496 --> 00:05:16.942
it's been a while since my
&gt;&gt; Jafara Husain: My SQLs.

96
00:05:16.942 --> 00:05:20.773
It's been a while [LAUGH] from videos.

97
00:05:27.286 --> 00:05:30.199
&gt;&gt; Jafara Husain: And there's a where
clause and I basically have to link up

98
00:05:30.199 --> 00:05:36.105
these things, so
&gt;&gt; Jafara Husain: video.id

99
00:05:36.105 --> 00:05:39.673
is equal to listid.

100
00:05:49.646 --> 00:05:50.946
&gt;&gt; Jafara Husain: Did I do that right?

101
00:05:53.268 --> 00:05:55.509
&gt;&gt; Jafara Husain: Bump this
font size down just a smidge.

102
00:06:00.594 --> 00:06:02.700
&gt;&gt; Jafara Husain: So,
what we're doing here is a join, right?

103
00:06:02.700 --> 00:06:04.470
We're sort of saying,
hey I've got these two list and

104
00:06:04.470 --> 00:06:06.360
they're connected by ID, right?

105
00:06:06.360 --> 00:06:07.741
And we're sort of linking up by ID.

106
00:06:07.741 --> 00:06:10.390
Now, I'm gonna write the same
thing in JavaScript.

107
00:06:10.390 --> 00:06:11.724
And we'll see what it looks like.

108
00:06:39.739 --> 00:06:43.288
&gt;&gt; Jafara Husain: So for every map,
we're gonna go through each list and for

109
00:06:43.288 --> 00:06:45.974
every video that happens
to be in that list.

110
00:06:51.222 --> 00:06:53.228
&gt;&gt; Jafara Husain: We are going to map and

111
00:06:53.228 --> 00:06:57.897
grab the name of the video
&gt;&gt; Jafara Husain: And

112
00:06:57.897 --> 00:06:58.873
the name of the list.

113
00:07:03.876 --> 00:07:06.955
&gt;&gt; Jafara Husain: Can't forget we need
parentheses when we use our functions and

114
00:07:06.955 --> 00:07:08.358
JSON on the right hand side.

115
00:07:10.564 --> 00:07:12.549
&gt;&gt; Jafara Husain: [INAUDIBLE]
down just a bit.

116
00:07:17.239 --> 00:07:19.155
&gt;&gt; Jafara Husain: And
how many dimensions is this collection?

117
00:07:22.406 --> 00:07:24.994
&gt;&gt; Jafara Husain: How deep
are we in the rabbit hole here?

118
00:07:24.994 --> 00:07:26.068
&gt;&gt; Speaker 4: Two.

119
00:07:26.068 --> 00:07:26.990
&gt;&gt; Jafara Husain: Two, right?.

120
00:07:26.990 --> 00:07:29.160
Because within each list, for

121
00:07:29.160 --> 00:07:33.300
each list, we're returning in the list
collection, we're returning another array.

122
00:07:33.300 --> 00:07:34.790
Because that's what filter returns.

123
00:07:36.240 --> 00:07:41.800
So, all we need to do
is apply one concatAll.

124
00:07:48.232 --> 00:07:51.326
&gt;&gt; Jafara Husain: And
now we're gonna have videoNames and

125
00:07:51.326 --> 00:07:59.012
ListNames
&gt;&gt; Jafara Husain: Is

126
00:07:59.012 --> 00:08:01.350
it clear why these two
things are the same thing?

127
00:08:01.350 --> 00:08:03.370
Cuz SQL is just sugar.

128
00:08:03.370 --> 00:08:06.655
It gives you a lot of syntactic sugar for
doing precisely this.

129
00:08:12.274 --> 00:08:15.530
&gt;&gt; Jafara Husain: I think [INAUDIBLE]
SQL might be off a little bit.

130
00:08:15.530 --> 00:08:17.049
It's been awhile since I've done SQL here.

131
00:08:19.460 --> 00:08:22.079
Maybe you SQL experts out there
can tell me if I'm wrong I

132
00:08:22.079 --> 00:08:24.997
want to alias the the item in
the table there to video and list.

133
00:08:28.341 --> 00:08:32.807
&gt;&gt; Jafara Husain: So I'm just wanna make
the connection between map and select,

134
00:08:32.807 --> 00:08:34.408
filter and where, and

135
00:08:34.408 --> 00:08:39.990
these two nested FROMs can be thought
of as a map nested within a map.

136
00:08:39.990 --> 00:08:40.900
Does that makes sense?

137
00:08:40.900 --> 00:08:42.040
We're going over,

138
00:08:42.040 --> 00:08:46.550
for every item in one list, we're going
over every item in the other list.

139
00:08:46.550 --> 00:08:49.370
So we go over the first list, we go
over all the videos and we check to see

140
00:08:49.370 --> 00:08:54.070
which one, if that particular video is in
that list by checking it's the ID, right?

141
00:08:54.070 --> 00:08:57.460
And, so as we're sort of just going
over all the possibilities and

142
00:08:57.460 --> 00:08:58.050
looking at the idea.

143
00:08:58.050 --> 00:09:01.730
Now this is not actually the most
efficient way to do a join, in SQL, right?

144
00:09:01.730 --> 00:09:04.900
You'd want to actually use a join operator
to do it more efficiently than this, but

145
00:09:04.900 --> 00:09:07.459
that's effectively what we're
doing when we do this example.

