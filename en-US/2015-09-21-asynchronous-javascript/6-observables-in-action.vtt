WEBVTT

1
00:00:00.000 --> 00:00:03.712
[MUSIC]

2
00:00:03.712 --> 00:00:06.397
&gt;&gt; Jafar Husain: What is definitely
not coming in JavaScript 6,

3
00:00:06.397 --> 00:00:09.220
is a special syntax for
creating an observable.

4
00:00:09.220 --> 00:00:13.050
I am going to invent a special syntax for
creating an observable, just like we have

5
00:00:13.050 --> 00:00:15.710
a special syntax for creating
an array with the square brackets.

6
00:00:15.710 --> 00:00:17.780
Let's imagine,
we have a special syntax for

7
00:00:17.780 --> 00:00:20.400
creating observables which
are collections that arrive over time.

8
00:00:20.400 --> 00:00:23.705
The only reason I'm gonna invent that, so
it's easier to understand how observables

9
00:00:23.705 --> 00:00:26.149
work and how the functions that
we're gonna be learning about,

10
00:00:26.149 --> 00:00:28.820
map, filter, and
all transform observables.

11
00:00:28.820 --> 00:00:31.571
So definitely not coming in JavaScript 6,
I've just invented it for

12
00:00:31.571 --> 00:00:32.887
this particular presentation.

13
00:00:32.887 --> 00:00:37.140
But this is the syntax that I'm gonna use
for a collection that arise over time.

14
00:00:37.140 --> 00:00:40.150
We're gonna imagine that we have a future
version of the JavaScript language, and

15
00:00:40.150 --> 00:00:44.570
we can invoke methods on this literal for
describing an observable, okay.

16
00:00:44.570 --> 00:00:45.930
So let's say I have this observable,

17
00:00:45.930 --> 00:00:50.660
imagine each one of these dots is like
10 milliseconds for example, right.

18
00:00:50.660 --> 00:00:54.339
And so if you were two forEach over this
observable, you would immediately get

19
00:00:54.339 --> 00:00:57.290
called with 1, and then a little
bit later I push 2 to you, and

20
00:00:57.290 --> 00:01:00.942
then a little bit later I push 3 through
to you and then I'd say onCompleted.

21
00:01:00.942 --> 00:01:01.970
Does that makes sense?.

22
00:01:01.970 --> 00:01:04.230
That's the callbacks that you would see.

23
00:01:04.230 --> 00:01:07.200
So let's see what happens
when I call forEach on this.

24
00:01:07.200 --> 00:01:08.810
In real life, the observer
you're gonna be learning about,

25
00:01:08.810 --> 00:01:12.300
has the forEach method which we saw to
find earlier on mouse moves, right.

26
00:01:12.300 --> 00:01:16.080
Does this exact same thing as you would
expect when you did it over array.

27
00:01:16.080 --> 00:01:19.700
The only difference is, it takes time.

28
00:01:19.700 --> 00:01:21.010
It arrives over time.

29
00:01:22.380 --> 00:01:26.240
Remember when we did this for example with
an array, it finished almost instantly.

30
00:01:26.240 --> 00:01:29.520
And now it's actually just whenever the
data comes in from the underlying source.

31
00:01:29.520 --> 00:01:31.880
Then it gets translated and
then immediately handed off.

32
00:01:31.880 --> 00:01:33.390
Question in the back.

33
00:01:33.390 --> 00:01:36.393
&gt;&gt; Speaker 2: They're asking about
it every forEach call is returning

34
00:01:36.393 --> 00:01:37.962
a different dispose object?

35
00:01:37.962 --> 00:01:39.223
&gt;&gt; Jafar Husain: Yes.

36
00:01:39.223 --> 00:01:41.769
&gt;&gt; Speaker 2: How do we hold
all of them and use them?

37
00:01:41.769 --> 00:01:45.448
&gt;&gt; Jafar Husain: Well, we call forEach
right, you're gonna get multiple values,

38
00:01:45.448 --> 00:01:49.965
and again, that shouldn't be too hard to
think about because it's just the same as

39
00:01:49.965 --> 00:01:52.720
addEventListener or removeEventListener.

40
00:01:52.720 --> 00:01:54.260
When you call addEventListener,

41
00:01:54.260 --> 00:01:57.790
you have to remember to hold on to the
handler because that handler is the same

42
00:01:57.790 --> 00:02:00.760
handler you have to pass back when
you call removeEventListener.

43
00:02:00.760 --> 00:02:01.420
Here it's no different.

44
00:02:01.420 --> 00:02:02.590
Instead of holding on to a handler,

45
00:02:02.590 --> 00:02:04.470
you have to hold on to
the subscription object.

46
00:02:04.470 --> 00:02:07.392
So when you call forEach,
you're gonna get many, many values.

47
00:02:07.392 --> 00:02:09.999
And at some point you may decide you
don't want those values anymore and

48
00:02:09.999 --> 00:02:11.600
you have to call subscription.suppose.

49
00:02:11.600 --> 00:02:13.616
That's no harder than calling
remove event listener and

50
00:02:13.616 --> 00:02:15.920
passing in the same handler
you're holding on to before.

51
00:02:15.920 --> 00:02:19.270
So one shouldn't be any more
complex than the other, all right?

52
00:02:19.270 --> 00:02:20.580
Same complexity for-
&gt;&gt; Speaker 2: I

53
00:02:20.580 --> 00:02:24.460
think they might have been thinking about,
so, every object that comes back,

54
00:02:24.460 --> 00:02:28.368
the dispose will just turn off
the whole subscription, right?

55
00:02:28.368 --> 00:02:29.400
&gt;&gt; Jafar Husain: Yeah.
&gt;&gt; Speaker 2: Yeah.

56
00:02:29.400 --> 00:02:30.810
&gt;&gt; Jafar Husain: Yeah, so
you're not gonna get any more data.

57
00:02:32.980 --> 00:02:36.052
So here's what happens when you
call forEach over an observable.

58
00:02:36.052 --> 00:02:37.490
Remember map?

59
00:02:37.490 --> 00:02:40.330
Map applies a function to
every item in a collection and

60
00:02:40.330 --> 00:02:44.550
creates a new collection containing
all of the transformed results.

61
00:02:44.550 --> 00:02:47.300
That was true of an array and
it's true over an observable.

62
00:02:47.300 --> 00:02:50.000
If we call map over an array.

63
00:02:50.000 --> 00:02:53.800
What we get is an observable
that pumps us out each value but

64
00:02:53.800 --> 00:02:56.390
first transforms it through the function.

65
00:02:56.390 --> 00:03:00.890
So we take one 1,2, 3 and we apply
a function that adds 1 to each item and

66
00:03:00.890 --> 00:03:03.310
we get 2, 3, 4, but
notice it arrives over time.

67
00:03:03.310 --> 00:03:06.600
As soon as one comes along,
an observable doesn't hold on to data.

68
00:03:06.600 --> 00:03:09.830
As soon as a value comes along,
it's gonna immediately transform it and

69
00:03:09.830 --> 00:03:11.070
then send it along.

70
00:03:11.070 --> 00:03:15.100
We don't collect up data in the memory,
as soon as data arrives, we translate it

71
00:03:15.100 --> 00:03:18.270
by throwing through that function and
then we hand it off like a hot potato.

72
00:03:18.270 --> 00:03:18.870
That makes sense?

73
00:03:20.780 --> 00:03:22.370
So we mapping.

74
00:03:22.370 --> 00:03:24.460
Now, let's try filtering.

75
00:03:24.460 --> 00:03:25.990
Imagine, same thing as before.

76
00:03:25.990 --> 00:03:29.000
We're gonna filter, we're gonna take
the observable and we call filter on it.

77
00:03:29.000 --> 00:03:31.700
We create a new observable
that contains only those

78
00:03:31.700 --> 00:03:33.680
items that pass the test function.

79
00:03:33.680 --> 00:03:35.400
And so we took an observed look and
then 1, 2, 3 and

80
00:03:35.400 --> 00:03:37.060
we got an observable that came 2, 3.

81
00:03:37.060 --> 00:03:38.003
Yep?
&gt;&gt; Speaker 3: Should that plus be

82
00:03:38.003 --> 00:03:39.310
a greater than?

83
00:03:39.310 --> 00:03:40.040
&gt;&gt; Jafar Husain: Yes it should.

84
00:03:40.040 --> 00:03:40.576
Thank you.

85
00:03:40.576 --> 00:03:42.070
[LAUGH] Live code reviews.

86
00:03:42.070 --> 00:03:42.946
Sorry.
Yeah.

87
00:03:42.946 --> 00:03:43.994
Question in the back.

88
00:03:43.994 --> 00:03:47.765
&gt;&gt; Speaker 2: Does forEach take this arg,
should I even worry about it?

89
00:03:47.765 --> 00:03:50.300
&gt;&gt; Jafar Husain: forEach
does take this arg.

90
00:03:50.300 --> 00:03:52.940
Probably not a super important
point at the moment, but

91
00:03:52.940 --> 00:03:55.440
yes it has the same interface
as the array forEach.

92
00:03:55.440 --> 00:03:56.270
Yeah.

93
00:03:56.270 --> 00:03:59.250
&gt;&gt; Speaker 4: So,
map was returning an array, right?

94
00:03:59.250 --> 00:04:02.840
And now it's returning singular elements,
or-

95
00:04:02.840 --> 00:04:03.470
&gt;&gt; Jafar Husain: So, sorry,

96
00:04:03.470 --> 00:04:04.880
this slide can be a little confusing.

97
00:04:04.880 --> 00:04:10.045
What's actually happening

98
00:04:10.045 --> 00:04:14.349
here is I'm shortening

99
00:04:14.349 --> 00:04:19.519
the slide from this to this.

100
00:04:19.519 --> 00:04:23.032
So, I'm creating a new array but
I'm also calling forEach on it so

101
00:04:23.032 --> 00:04:25.920
that you see the values
that come out inside of it.

102
00:04:25.920 --> 00:04:28.280
So in this case I'm actually creating
an observable and we call map.

103
00:04:28.280 --> 00:04:30.990
All you've done is
create a new observable.

104
00:04:30.990 --> 00:04:33.550
And then the forEach in here,
it's kind of implicit.

105
00:04:33.550 --> 00:04:36.670
I'm just putting in a forEach to show
you what would come out of the console

106
00:04:36.670 --> 00:04:38.170
if you were to subscribe
to that observable.

107
00:04:38.170 --> 00:04:39.280
But that's a good question.

108
00:04:39.280 --> 00:04:42.360
&gt;&gt; Speaker 4: And that's why at
the beginning that's where you're running

109
00:04:42.360 --> 00:04:45.010
the concat all because we
have all these mini arrays.

110
00:04:45.010 --> 00:04:46.812
&gt;&gt; Jafar Husain: Yeah, we have a bunch of
mini arrays which we don't wanna print

111
00:04:46.812 --> 00:04:47.776
that out to the console, right.

112
00:04:47.776 --> 00:04:48.465
&gt;&gt; Speaker 4: You're clever.

113
00:04:48.465 --> 00:04:49.360
Okay, l'm with you.

114
00:04:49.360 --> 00:04:53.050
&gt;&gt; Jafar Husain: So I don't wanna cheat,
so I'm gonna put that in here.

115
00:04:53.050 --> 00:04:57.375
So we can all see what's going on.

116
00:04:57.375 --> 00:04:58.809
I might go off the slide a little bit.

117
00:05:06.031 --> 00:05:07.890
&gt;&gt; Jafar Husain: So
let's take another look at that, right?

118
00:05:07.890 --> 00:05:10.620
So .map actually just
returns an observable.

119
00:05:10.620 --> 00:05:12.466
And so when we see stuff
printed out of the console,

120
00:05:12.466 --> 00:05:14.980
it's because we're .forEach-ing
over that observable.

121
00:05:14.980 --> 00:05:19.240
So we get 2, 3, and then eventually 4.

122
00:05:20.950 --> 00:05:23.421
Right, because that's how long it
takes for the items to arrive.

123
00:05:23.421 --> 00:05:26.270
And as soon as the items arrive, they're
translated and then they're forwarded on.

124
00:05:26.270 --> 00:05:26.770
Hot Potato.

125
00:05:28.270 --> 00:05:30.937
Same thing with filter,
we're gonna get 2 or 3.

126
00:05:30.937 --> 00:05:34.740
We skip over the first element,
we never return it because it's 1.

127
00:05:36.860 --> 00:05:39.070
And now I want to call your
attention to concatAll.

128
00:05:39.070 --> 00:05:43.460
So this is over arrays, you remember
how concatAll works over arrays, right.

129
00:05:43.460 --> 00:05:47.473
Now how many different ways really is
there to flatten a two-dimensional array.

130
00:05:47.473 --> 00:05:49.478
I suggest there's really
only one sane way to do it,

131
00:05:49.478 --> 00:05:52.213
which is to start with the first array,
go through all those elements,

132
00:05:52.213 --> 00:05:55.266
move to the next array, go through all
those elements, move to the last array,

133
00:05:55.266 --> 00:05:58.450
eventually go through all those elements
and then put all of that into a new array.

134
00:05:58.450 --> 00:06:00.540
And that's effectively
what concatAll does.

135
00:06:00.540 --> 00:06:03.298
It starts top to bottom and
goes left to right.

136
00:06:03.298 --> 00:06:05.740
So it goes top to bottom left to right.

137
00:06:05.740 --> 00:06:08.260
So here, this example, we get 2, 3.

138
00:06:08.260 --> 00:06:09.760
Excuse me.
We get 2, 3, 4.

139
00:06:09.760 --> 00:06:11.130
1, 2, 3, 4.

140
00:06:11.130 --> 00:06:13.420
That's the only way that you can
flatten the two dimensional array.

141
00:06:13.420 --> 00:06:15.090
It's only way that make sense.

142
00:06:15.090 --> 00:06:17.290
Here's where things get more complicated.

143
00:06:17.290 --> 00:06:20.175
An Observable is in
a collection over time.

144
00:06:20.175 --> 00:06:24.367
And it turns out that if you have a
collection, an Observable of Observables,

145
00:06:24.367 --> 00:06:27.190
there's more than one way to flatten it.

146
00:06:27.190 --> 00:06:29.930
Because the items arrive over time.

147
00:06:29.930 --> 00:06:31.440
And there's three strategies.

148
00:06:31.440 --> 00:06:35.500
In fact, you can solve almost every
asynchronous concurrency problem

149
00:06:35.500 --> 00:06:37.450
where you've got more than
one thing going at once?

150
00:06:37.450 --> 00:06:40.760
Almost every concurrency problem that
you're gonna run into the UI with

151
00:06:40.760 --> 00:06:44.890
three basic flattening strategies for
an observable of observables.

152
00:06:44.890 --> 00:06:47.460
So it's really key that you
just get these three down.

153
00:06:47.460 --> 00:06:50.820
And you'll start to see that many,
many problems that look brand new are very

154
00:06:50.820 --> 00:06:55.430
different, can actually be classified into
one of these three flattening strategies.

155
00:06:55.430 --> 00:06:56.650
So we have concatAll.

156
00:06:56.650 --> 00:06:58.160
So what does that mean
when applied to an array?

157
00:06:59.410 --> 00:07:02.670
Or excuse me, what does that mean when we
apply to an observable of observables.

158
00:07:02.670 --> 00:07:05.670
So what this is, is an observable where
if you're foreached over the outer

159
00:07:05.670 --> 00:07:09.580
observable, a certain amount of time would
go by, and then eventually you get another

160
00:07:09.580 --> 00:07:11.975
observable and
presumably you'd foreach over that, right.

161
00:07:11.975 --> 00:07:14.895
But in the meantime the outer observable
could give you another observable while

162
00:07:14.895 --> 00:07:18.145
you're still not completed with that
observable that you've just got, right.

163
00:07:18.145 --> 00:07:19.885
Because the observable happens over time.

164
00:07:19.885 --> 00:07:23.287
And so you have this potential for
concurrency now because in an observable

165
00:07:23.287 --> 00:07:25.934
of observables,
you've got this new dimension of time.

166
00:07:25.934 --> 00:07:27.645
Which we didn't have on array, right.

167
00:07:27.645 --> 00:07:30.005
All the data is there
instantly at the same time.

168
00:07:30.005 --> 00:07:33.190
So with an array we just exhaust
things top to bottom, left to right.

169
00:07:33.190 --> 00:07:34.880
So here's what concatAll does,

170
00:07:34.880 --> 00:07:38.070
the concatAll strategy would do
when applied to an observable.

171
00:07:38.070 --> 00:07:41.080
So let's say I foreach over
the outer observable here.

172
00:07:41.080 --> 00:07:42.620
The observable of observables.

173
00:07:44.440 --> 00:07:46.260
First, I would get an observable.

174
00:07:46.260 --> 00:07:48.690
In this case,
let's just say just contains one.

175
00:07:48.690 --> 00:07:51.026
And then I'm immediately
gonna foreach over that.

176
00:07:51.026 --> 00:07:55.420
And then what we do is we take the data,
and we put it into the flattened stream.

177
00:07:55.420 --> 00:07:57.520
So we see 1 appear immediately.

178
00:07:57.520 --> 00:08:00.040
So now it's completed and
just as it completes.

179
00:08:00.040 --> 00:08:02.430
The outer observable gives
me another observable.

180
00:08:02.430 --> 00:08:03.790
This one contains 2 and 3.

181
00:08:03.790 --> 00:08:06.770
And so I immediately forEach over that,
that inner observable.

182
00:08:08.070 --> 00:08:10.810
2 pops out, I immediately push
that out into the output stream,

183
00:08:10.810 --> 00:08:13.490
nice, flat output stream
that comes out of concatAll.

184
00:08:14.620 --> 00:08:19.050
Now while I'm waiting for
that second observable to complete,

185
00:08:19.050 --> 00:08:23.410
the outer observable throws
me another observable.

186
00:08:23.410 --> 00:08:25.390
This one's empty.

187
00:08:25.390 --> 00:08:28.173
So what concatALL does, is one thing is,

188
00:08:28.173 --> 00:08:33.050
I could begin forEach-ing over
this observable immediately.

189
00:08:33.050 --> 00:08:33.600
But I don't.

190
00:08:33.600 --> 00:08:37.290
The what distinguishes concatAll
from the other strategies.

191
00:08:37.290 --> 00:08:40.720
Is it always make sure that
elements come out in the order

192
00:08:40.720 --> 00:08:43.910
of it that the collection that
they were inside of arrived.

193
00:08:43.910 --> 00:08:47.590
So here I really wanna see 1, 2, 3, 4.

194
00:08:47.590 --> 00:08:49.577
So we're not actually gonna
forEach over this observable.

195
00:08:49.577 --> 00:08:53.385
Yet I'm just gonna put it away, I'm gonna
hold on to it but I'm not gonna call for

196
00:08:53.385 --> 00:08:53.984
each on it.

197
00:08:53.984 --> 00:08:55.250
Does that makes sense?

198
00:08:56.440 --> 00:08:59.925
So now I'm still just waiting for
3 to arrive and while I'm waiting for

199
00:08:59.925 --> 00:09:04.300
3 to arrive, that second observable to
complete, another observable comes to me.

200
00:09:04.300 --> 00:09:07.700
Once again I'm not gonna forEach over it,
I'm just gonna put it aside.

201
00:09:07.700 --> 00:09:10.740
The key thing to understand is,
in this particular example, all of these

202
00:09:10.740 --> 00:09:15.935
observables do not start emitting
values until you for Each over them.

203
00:09:15.935 --> 00:09:18.760
Does that make sense?

204
00:09:18.760 --> 00:09:21.407
All of these observables do not start
emitting their values until you

205
00:09:21.407 --> 00:09:22.190
forEach over them.

206
00:09:22.190 --> 00:09:25.520
So if I don't call forEach on these
observables, data is not gonna come out.

207
00:09:25.520 --> 00:09:27.880
Now not all observables behave that way.

208
00:09:27.880 --> 00:09:31.570
It's possible that you could have
an observable that is emitting values,

209
00:09:31.570 --> 00:09:34.780
regardless of whether you
are calling forEach over it or not.

210
00:09:34.780 --> 00:09:37.815
Can anybody think of a like a data
stream that will emit values.

211
00:09:37.815 --> 00:09:42.930
And if you don't start listening to it,
soon enough, you might miss some values.

212
00:09:42.930 --> 00:09:46.385
We showed you one earlier, mouse moves.

213
00:09:46.385 --> 00:09:49.380
Right, let's say I'm
moving my mouse around and

214
00:09:49.380 --> 00:09:50.629
you haven't hooked up an event listener.

215
00:09:50.629 --> 00:09:53.250
You're not gonna get those event objects,
right.

216
00:09:53.250 --> 00:09:54.420
You've missed them effectively.

217
00:09:54.420 --> 00:09:57.720
You only start getting those event
objects when you add your event listener.

218
00:09:57.720 --> 00:09:59.780
We call that a hot observable.

219
00:09:59.780 --> 00:10:01.050
It's a hot data source.

220
00:10:01.050 --> 00:10:02.760
It's going whether you're listening or
not.

221
00:10:04.330 --> 00:10:08.310
What I'm showing you in these slides
is an example of a cold observable.

222
00:10:08.310 --> 00:10:13.940
A cold observable will not do anything
until somebody calls forEach on it,

223
00:10:13.940 --> 00:10:15.220
it will not do a single thing.

224
00:10:15.220 --> 00:10:18.229
And so the data inside of these
observables is not gonna come out until I

225
00:10:18.229 --> 00:10:19.203
call forEach on this.

226
00:10:19.203 --> 00:10:22.670
So all these slides use cold observables.

227
00:10:22.670 --> 00:10:27.382
So that's why, even though the time has
passed where I could have emitted 2, or

228
00:10:27.382 --> 00:10:30.155
excuse me, I could have emitted 4 here.

229
00:10:30.155 --> 00:10:32.505
It hasn't been emitted yet
because I haven't called forEach on it.

230
00:10:32.505 --> 00:10:35.696
So now I'm still waiting on that
second observable to complete.

231
00:10:35.696 --> 00:10:37.987
And then I actually got two
observables in a buffer somewhere but

232
00:10:37.987 --> 00:10:40.455
I haven't called forEach on yet,
does that makes sense?

233
00:10:40.455 --> 00:10:42.465
It's that third and fourth observable.

234
00:10:42.465 --> 00:10:47.035
Now finally that second observable
completes give me 3 and completes, and

235
00:10:47.035 --> 00:10:47.845
says on completed.

236
00:10:47.845 --> 00:10:49.940
So on next 3, on completed.

237
00:10:49.940 --> 00:10:53.180
Now I immediately subscribe to that
third observable that I've been keeping

238
00:10:53.180 --> 00:10:55.080
over here in a buffer somewhere.

239
00:10:55.080 --> 00:10:59.740
What happens to this empty collection in
the middle of the flattening operation?

240
00:10:59.740 --> 00:11:03.379
What happens to empty collections
when they get flattened?

241
00:11:03.379 --> 00:11:05.135
They disappear because
there is nothing returned.

242
00:11:05.135 --> 00:11:05.691
Yeah?

243
00:11:05.691 --> 00:11:09.003
&gt;&gt; Speaker 5: We know it stays empty
because it's already fired into

244
00:11:09.003 --> 00:11:09.941
onCompleted.

245
00:11:09.941 --> 00:11:12.177
&gt;&gt; Jafar Husain: I guess,
if you forEach over an empty collection,

246
00:11:12.177 --> 00:11:14.950
the only thing will happen
is it fires onCompleted.

247
00:11:14.950 --> 00:11:16.780
That's how we know it's empty.

248
00:11:16.780 --> 00:11:17.907
Yeah, question in the back.
&gt;&gt; Speaker 2: Question, yep,

249
00:11:17.907 --> 00:11:22.660
in the empty array, 5 was in there,
that wouldn't happen until after the 3.

250
00:11:22.660 --> 00:11:23.920
&gt;&gt; Jafar Husain: That's correct, yes.

251
00:11:23.920 --> 00:11:25.210
So if instead of an empty array.

252
00:11:25.210 --> 00:11:29.960
There was like 5, you would end up,
the outputted collection would be 1,

253
00:11:29.960 --> 00:11:31.950
2, 3, 5, 4.

254
00:11:31.950 --> 00:11:35.200
Because it always returns
elements in the order

255
00:11:35.200 --> 00:11:38.330
based on the collection that
they're inside of arrives.

256
00:11:38.330 --> 00:11:41.520
So, basically what you need to know
about observable concatAll is it behaves

257
00:11:41.520 --> 00:11:43.540
exactly the same as array concatAll.

258
00:11:43.540 --> 00:11:46.200
It goes top to bottom, left to right.

259
00:11:46.200 --> 00:11:49.570
So here in this case, we're gonna
subscribe to this observable and

260
00:11:49.570 --> 00:11:51.220
basically it's like a no-op,
nothing happens,

261
00:11:51.220 --> 00:11:56.170
because all empty collections, just when
they get flattened they just disappear.

262
00:11:56.170 --> 00:11:59.840
Now after we get the onCompleted
message from the empty collection.

263
00:11:59.840 --> 00:12:03.480
We forEach over this other collection
that we've been keeping to the side and

264
00:12:03.480 --> 00:12:08.230
it calls onNext gives us 4, and
then immediately calls onCompleted.

265
00:12:08.230 --> 00:12:11.250
And so we return 4.

266
00:12:11.250 --> 00:12:14.310
Notice what happens with concatAll,

267
00:12:14.310 --> 00:12:17.730
the output stream ends up
kind of getting elongated.

268
00:12:17.730 --> 00:12:20.520
It's longer than any of the input streams,
right, because

269
00:12:20.520 --> 00:12:23.220
we basically have to make sure to enforce
that things come out in the right order.

270
00:12:23.220 --> 00:12:26.670
And that means we need to buffer things,
right, buffer observables, and

271
00:12:26.670 --> 00:12:29.780
make sure to only forEach over them when
the previous observables have completed.

