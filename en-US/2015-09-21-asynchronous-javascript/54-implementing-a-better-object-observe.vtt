WEBVTT

1
00:00:00.000 --> 00:00:03.685
[MUSIC]

2
00:00:03.685 --> 00:00:07.440
&gt;&gt; Jafar: Now let's see if we can take
object observe, we did it with from event.

3
00:00:07.440 --> 00:00:10.530
Can we take this new fangled
ES7 feature object observe and

4
00:00:10.530 --> 00:00:12.270
turn it into an observable?

5
00:00:12.270 --> 00:00:12.770
I bet we can.

6
00:00:14.700 --> 00:00:17.430
So instead of in addition to from event,

7
00:00:17.430 --> 00:00:22.830
what if we say observable.observations,
right?

8
00:00:22.830 --> 00:00:23.960
Because it's plural.

9
00:00:23.960 --> 00:00:29.070
Now, instead of thinking of events as this
add event listener, remove event listener.

10
00:00:29.070 --> 00:00:32.710
Now we're thinking about events
in terms of collections, right?

11
00:00:32.710 --> 00:00:34.470
It's just another collection.

12
00:00:34.470 --> 00:00:38.260
It's the stream of observations
we get from an object.

13
00:00:38.260 --> 00:00:39.840
So what's it going to accept?

14
00:00:39.840 --> 00:00:41.650
Well, it's going to accept
the JavaScript object.

15
00:00:44.070 --> 00:00:45.130
And what does it return?

16
00:00:46.270 --> 00:00:48.165
Yell it out.
What will this return,

17
00:00:48.165 --> 00:00:51.560
when you call
object.observations on an object?

18
00:00:53.060 --> 00:00:53.850
What kinda type?

19
00:00:53.850 --> 00:00:54.930
&gt;&gt; Speaker 2: Observable.
&gt;&gt; Jafar: An observable.

20
00:00:54.930 --> 00:00:56.180
It's the same answer every time so far.

21
00:00:58.800 --> 00:01:01.280
Return a new observable and

22
00:01:01.280 --> 00:01:04.760
when you forEach over this observable,
what do we want to have happen?

23
00:01:06.640 --> 00:01:08.810
What's the side effect that occurs?

24
00:01:08.810 --> 00:01:13.750
What's the thing that happens to cause
us to start getting events pushed at us?

25
00:01:13.750 --> 00:01:15.120
What API are we going to call?

26
00:01:15.120 --> 00:01:16.122
This new ES7 API.

27
00:01:16.122 --> 00:01:18.595
&gt;&gt; Speaker 2: Object.observe.

28
00:01:18.595 --> 00:01:21.056
&gt;&gt; Jafar: Object.observe!

29
00:01:23.660 --> 00:01:25.340
So we call object.observe.

30
00:01:25.340 --> 00:01:28.300
So we're going to create a handler,
just like we did with from event.

31
00:01:28.300 --> 00:01:29.990
Look up here, we created a handler.

32
00:01:29.990 --> 00:01:32.970
I'm just going to copy this code,
cuz it's gonna be faster.

33
00:01:37.040 --> 00:01:42.040
Instead of DOM addEventListener,
it's object.observe,

34
00:01:42.040 --> 00:01:46.822
pass in the object and then the not
necessarily grammatically correct

35
00:01:46.822 --> 00:01:51.760
object.unobserve handler.

36
00:01:51.760 --> 00:01:53.010
Notice a pattern?

37
00:01:53.010 --> 00:01:54.320
It's always the same thing.

38
00:01:54.320 --> 00:01:58.390
We hook up the thing that starts to
push stream that's coming to us.

39
00:01:58.390 --> 00:02:01.150
And then inside of the dispose
method of the subscription,

40
00:02:01.150 --> 00:02:03.248
we make sure that we never get
any more events ever again.

41
00:02:03.248 --> 00:02:06.870
By unhooking, right?

42
00:02:06.870 --> 00:02:08.470
So let's see if we can get this working.

43
00:02:08.470 --> 00:02:09.070
This is going to be cool.

44
00:02:09.070 --> 00:02:11.990
I'm kind of missing semi-colon somewhere.

45
00:02:11.990 --> 00:02:12.511
That's fine.

46
00:02:23.639 --> 00:02:24.870
&gt;&gt; Jafar: Term won't need this up here.

47
00:02:26.080 --> 00:02:29.520
What if for example all we want to listen
for a click, and then open a form,

48
00:02:29.520 --> 00:02:32.830
and then we want to listen to changes for
an object.

49
00:02:32.830 --> 00:02:35.940
Until somebody close that for and then
maybe update the view because that's what

50
00:02:35.940 --> 00:02:39.170
object observe is all about it's about
list allowing you to listen to models and

51
00:02:39.170 --> 00:02:41.820
when they change updating views, right?

52
00:02:41.820 --> 00:02:43.520
That's how you know the change
happens in the model so

53
00:02:43.520 --> 00:02:45.920
you can synchronize those
changes with your view.

54
00:02:45.920 --> 00:02:49.034
So when a form opens you can start
listening to changes to an object.

55
00:02:49.034 --> 00:02:50.930
And then synchronizing
them with your view,

56
00:02:50.930 --> 00:02:54.900
and when that form closes you can stop
listening to changes to that object, and

57
00:02:54.900 --> 00:02:57.910
that's exactly the same thing we did
before with the auto-complete box.

58
00:02:57.910 --> 00:03:01.470
When the search form opened we listened
for changes to the text box for all for

59
00:03:01.470 --> 00:03:04.860
search results and as soon as a close
we stop listening for changes.

60
00:03:04.860 --> 00:03:10.489
So I'm create an object called
person I'm give it the name of Jim.

61
00:03:13.764 --> 00:03:18.989
&gt;&gt; Jafar: And we're going to listen for
all the observations on person and

62
00:03:18.989 --> 00:03:25.680
since it's an observable nothing's going
to happen if I just create it, right?

63
00:03:25.680 --> 00:03:29.200
We have to do what in order to start
getting the data out observable.

64
00:03:31.070 --> 00:03:31.800
Yeah, forEach.

65
00:03:31.800 --> 00:03:32.300
Absolutely.

66
00:03:33.700 --> 00:03:37.040
And what actually comes
out is this changes array.

67
00:03:37.040 --> 00:03:40.280
It's the array of all the changes
we made to the person.

68
00:03:40.280 --> 00:03:44.080
So in case it wasn't clear before,
if I change one property on the object,

69
00:03:45.730 --> 00:03:48.730
it's gonna eventually asynchronously
give me a change record.

70
00:03:48.730 --> 00:03:52.160
But if I change 15 properties in the
object synchronously, one after the other.

71
00:03:52.160 --> 00:03:55.760
It will then asynchronously give me
a change record detailing all 17 changing.

72
00:03:55.760 --> 00:03:58.760
So that's more efficient that way,
to wait and

73
00:03:58.760 --> 00:04:03.440
to see all the changes in a particular
turn and then onNext them and then deliver

74
00:04:03.440 --> 00:04:06.670
them rather than just keep calling a call
back every single time a property changes.

75
00:04:06.670 --> 00:04:08.100
That's how object.observe works.

76
00:04:08.100 --> 00:04:11.620
So change is actually gonna be an array
of every change we make to this object.

77
00:04:11.620 --> 00:04:17.805
So now that we're listening for
the changes, if we turn around and

78
00:04:17.805 --> 00:04:23.451
go person.name = "Don";
person.age = 23; right?

79
00:04:23.451 --> 00:04:29.750
We should get only one onNext of changes.

80
00:04:29.750 --> 00:04:32.847
So let's check it out with our
little observable light library.

81
00:04:39.133 --> 00:04:41.100
&gt;&gt; Jafar: How do I clear this console,
anybody know?

82
00:04:41.100 --> 00:04:42.060
Usually, there's a little button.

83
00:04:42.060 --> 00:04:45.282
All right,
I don't see a run button, either.

84
00:04:51.129 --> 00:04:51.960
&gt;&gt; Jafar: Okay.

85
00:04:57.761 --> 00:05:01.968
&gt;&gt; Jafar: Undefined is not a function
it's complaining about something.

86
00:05:01.968 --> 00:05:05.048
&gt;&gt; Speaker 2: I think you can
used observable.observation-

87
00:05:05.048 --> 00:05:06.330
&gt;&gt; Jafar: It's Thank you.

88
00:05:06.330 --> 00:05:09.200
It's observable.observation,
not object.observations.

89
00:05:09.200 --> 00:05:13.270
&gt;&gt; Speaker 2: And maybe should we call it
from observation since we have from event?

90
00:05:13.270 --> 00:05:14.590
Kind of that parallel?

91
00:05:14.590 --> 00:05:15.690
&gt;&gt; Jafar: Yeah, sure.

92
00:05:15.690 --> 00:05:16.644
Sure, why not?

93
00:05:25.387 --> 00:05:26.060
&gt;&gt; Jafar: Sounds fair.

94
00:05:26.060 --> 00:05:29.520
Now I'm gonna follow my own rules here and
do formatting,

95
00:05:29.520 --> 00:05:34.320
as soon as we have more than one verb on
a noun, you put each on its own line.

96
00:05:35.520 --> 00:05:37.850
And I actually already
showing the right result.

97
00:05:37.850 --> 00:05:39.550
So if we clear it and I run it.

98
00:05:40.910 --> 00:05:45.270
Look we got an object
with two records here.

99
00:05:45.270 --> 00:05:49.010
We notice it says that age change,
is hard to see from the formatting but

100
00:05:49.010 --> 00:05:52.390
it gave us a record inside that
array that says the age changed, and

101
00:05:52.390 --> 00:05:55.900
it gave us a record inside that array
that said that the name changed.

102
00:05:57.290 --> 00:05:59.990
So it's actually gone up right so now.

103
00:05:59.990 --> 00:06:05.420
We can actually make a form like we can
actually make a text box where you can

104
00:06:05.420 --> 00:06:09.290
enter in the name and a text box we could
enter in the age, and we could set that

105
00:06:09.290 --> 00:06:13.510
object, and then we could sort of display
when a change was made to that object.

106
00:06:13.510 --> 00:06:14.290
Or, for example,

107
00:06:14.290 --> 00:06:18.140
we could make an asynchronous network
request to save the data, right?

108
00:06:18.140 --> 00:06:19.000
Does that make sense?

109
00:06:19.000 --> 00:06:21.910
So I've got a form with a text box for
the name, a text box for the age.

110
00:06:21.910 --> 00:06:25.180
Every time we change the name, or the age
for that matter, we might want to kick

111
00:06:25.180 --> 00:06:28.820
off an asynchronous request to sync
it up with the server and save it.

112
00:06:28.820 --> 00:06:30.130
Does that make sense?

113
00:06:30.130 --> 00:06:32.544
What would that look like I wonder.

114
00:06:32.544 --> 00:06:33.520
Let's try it.

115
00:06:33.520 --> 00:06:38.775
So I gonna open up HTML,
&gt;&gt; Jafar: Right,

116
00:06:38.775 --> 00:06:40.751
now we're gonna make it a Save button.

117
00:06:44.991 --> 00:06:47.912
&gt;&gt; Jafar: And we're gonna add a Name box.

118
00:06:57.580 --> 00:06:58.768
&gt;&gt; Jafar: And an age box.

119
00:07:03.613 --> 00:07:04.965
&gt;&gt; Jafar: And this is the type of thing.

120
00:07:04.965 --> 00:07:07.055
Now you're seeing where
the benefit of observable is.

121
00:07:07.055 --> 00:07:09.615
It's not so much benefit if you're just
listening to one data source, you're for

122
00:07:09.615 --> 00:07:11.465
eaching over it and
you're doing something.

123
00:07:11.465 --> 00:07:14.085
In practice, you're almost never
doing that in user interfaces.

124
00:07:14.085 --> 00:07:15.215
When an event happens,

125
00:07:15.215 --> 00:07:17.505
you're usually kicking off some
sort of network request, right?

126
00:07:17.505 --> 00:07:19.300
Or doing something asynchronous.

127
00:07:19.300 --> 00:07:21.110
And if you try to do that with call backs.

128
00:07:21.110 --> 00:07:22.340
You're in callback hell.

129
00:07:22.340 --> 00:07:24.310
Because now you've got to manage
errors yourself you have to

130
00:07:24.310 --> 00:07:25.770
manage on subscriptions yourself.

131
00:07:25.770 --> 00:07:29.320
But let's take this is a real example
right is actually a very feasible example.

132
00:07:29.320 --> 00:07:30.800
Somebody editing a form and

133
00:07:30.800 --> 00:07:34.390
then maybe we wait until after
a certain batch of changes is finished.

134
00:07:34.390 --> 00:07:36.620
Not every single time a property
change for that matter.

135
00:07:36.620 --> 00:07:40.480
And then we go off and
we make a network request to save it and

136
00:07:40.480 --> 00:07:43.340
we're gonna I'm gonna
try that out right here.

137
00:07:43.340 --> 00:07:46.629
So I'm gonna stop using our
observable light library because for

138
00:07:46.629 --> 00:07:50.216
this example I wanna actually be able
to use the more advanced operators

139
00:07:50.216 --> 00:07:53.303
that we haven't defined yet
like Cloncat all and merge all.

140
00:07:53.303 --> 00:07:56.950
I'm just gonna open a new one and
we're gonna JS bin this.

141
00:07:58.810 --> 00:08:03.968
So I'm actually gonna go Add Library,
add the RX library,

142
00:08:03.968 --> 00:08:08.508
and now in JavaScript,
I'm just gonna copy over our

143
00:08:08.508 --> 00:08:13.275
definition of
object.observable.observations.

144
00:08:16.276 --> 00:08:18.210
&gt;&gt; Jafar: But now,
I'm gonna make a couple changes.

145
00:08:18.210 --> 00:08:23.920
Up until now, in our simple library, we
used a constructor to create observables.

146
00:08:23.920 --> 00:08:27.450
But Rx comes with a helper function for
creating observables.

147
00:08:27.450 --> 00:08:29.570
But lets us write a little
bit less boiler plate.

148
00:08:29.570 --> 00:08:33.950
So, instead of going new observable like
we're doing here, I'll get rid of this

149
00:08:33.950 --> 00:08:40.010
HTML, Rx comes with an observable.create

150
00:08:40.010 --> 00:08:44.510
function and
it works pretty much identically.

151
00:08:44.510 --> 00:08:48.460
Almost identically as passing in
a forEach for the constructor.

152
00:08:48.460 --> 00:08:51.550
The only difference is instead of
returning this object with a dispose

153
00:08:51.550 --> 00:08:54.500
method, which is a good thing
about it's always boiler plate

154
00:08:54.500 --> 00:08:58.150
the only thing you're ever defining in
here is the definition of dispose itself.

155
00:08:58.150 --> 00:09:02.860
It just allows you to just pass back,
the definition of the dispose function.

156
00:09:04.740 --> 00:09:06.459
So if I was to write
this out the long way.

157
00:09:08.090 --> 00:09:09.860
You'd see that this was just that if.

158
00:09:09.860 --> 00:09:13.120
And under the hood, it wraps it
in a subscription object for you.

159
00:09:13.120 --> 00:09:15.270
Does that makes sense?

160
00:09:15.270 --> 00:09:19.710
So observable doc takes create the forEach
and wraps it in an observable.

161
00:09:19.710 --> 00:09:22.640
And it takes whatever you
the dispose function you return.

162
00:09:22.640 --> 00:09:24.340
And it wraps that in a subscription.

163
00:09:24.340 --> 00:09:25.940
So that's all, that's the only difference.

164
00:09:25.940 --> 00:09:28.490
It's just a little bit of a helper
function to let you write slightly

165
00:09:28.490 --> 00:09:29.090
less code.

166
00:09:30.160 --> 00:09:37.375
So this should work as is with now that
we have rx in here for observation

167
00:09:53.487 --> 00:09:55.143
&gt;&gt; Jafar: So x is the changes array here

168
00:09:55.143 --> 00:09:57.640
that occurred to the person.

169
00:09:57.640 --> 00:10:00.746
And I'm going to go.

170
00:10:00.746 --> 00:10:04.340
Person.age = 23 and
we should see something in the console

171
00:10:11.700 --> 00:10:13.700
and expect a token because
I'm not on 6 to 5.

172
00:10:13.700 --> 00:10:18.849
I'll switch over to use 6 to 5 and
it'll understand my error

173
00:10:18.849 --> 00:10:23.647
function,
&gt;&gt; Jafar: And then we'll run and

174
00:10:23.647 --> 00:10:29.047
it'll, observable not defined,
I just have to, now that I'm using RX,

175
00:10:29.047 --> 00:10:33.270
we need to make sure to pull it
out of the RX namespace here.

176
00:10:33.270 --> 00:10:34.599
So now that I do that?

177
00:10:36.920 --> 00:10:37.940
Yes.

178
00:10:37.940 --> 00:10:39.400
So we got our changes record right?

179
00:10:39.400 --> 00:10:41.470
So we swapped over to using the real Rx.

180
00:10:41.470 --> 00:10:45.210
But I can tell you definition
very very similar right?

181
00:10:45.210 --> 00:10:46.580
Than what we saw earlier.

182
00:10:46.580 --> 00:10:50.519
So now that we've got object.observations,
let's say we just wanna listen for

183
00:10:50.519 --> 00:10:51.955
the next change to an object.

184
00:10:51.955 --> 00:10:55.137
We don't wanna have to like
call unobserve, right?

185
00:10:55.137 --> 00:10:57.050
We're just doing it inside
of our observe handler.

186
00:10:57.050 --> 00:10:59.660
You know, that thing, If you want to
imagine the code you'd have to write.

187
00:10:59.660 --> 00:11:01.610
If you wanted to list
the only one dom of that.

188
00:11:01.610 --> 00:11:04.360
You'd have to, like inside of your
handler, call, remove event listener.

189
00:11:04.360 --> 00:11:05.590
We don't have to do that.

190
00:11:05.590 --> 00:11:09.171
So, let's just listen for
one observation, okay?

191
00:11:09.171 --> 00:11:14.802
Using take(1) I'm going
to add formatting here.

192
00:11:19.071 --> 00:11:21.357
&gt;&gt; Jafar: Okay,
I don't need the output window either.

193
00:11:31.787 --> 00:11:33.297
&gt;&gt; Jafar: So this isn't going
to be too impressive looking,

194
00:11:33.297 --> 00:11:34.780
because we're going to
see the exact same thing.

195
00:11:34.780 --> 00:11:39.930
The difference is under the hood, our
handler is no longer attached that object.

196
00:11:39.930 --> 00:11:44.680
So if we make more changes to it,
they're just not going to show up.

197
00:11:44.680 --> 00:11:46.750
Our callback is not going to get called.

198
00:11:46.750 --> 00:11:49.530
So we've listen for
the next change to an object and never for

199
00:11:49.530 --> 00:11:50.430
another change to an object.

