WEBVTT

1
00:00:00.000 --> 00:00:03.829
[MUSIC]

2
00:00:03.829 --> 00:00:06.546
&gt;&gt; Jafar Husain: So, we see that we can
use this exact same technique to join

3
00:00:06.546 --> 00:00:08.680
together relational data sources.

4
00:00:08.680 --> 00:00:12.119
So, I'm going to take this,
which is precisely the same example here.

5
00:00:12.119 --> 00:00:17.135
Notice that we have a, so
in this case we want to build

6
00:00:17.135 --> 00:00:22.272
a tree from these two
rotationally connected lists.

7
00:00:22.272 --> 00:00:26.203
So we have a list of videos, a list
of lists and they're connected by ID.

8
00:00:26.203 --> 00:00:28.499
We want to actually use
the operators we use such so

9
00:00:28.499 --> 00:00:31.788
far to actually build this structure,
this hierarchical structure.

10
00:00:31.788 --> 00:00:35.381
So I want to show you that we can go from
relational to hierarchical as well as

11
00:00:35.381 --> 00:00:36.870
hierarchical to relational.

12
00:00:36.870 --> 00:00:38.520
So, everybody see this structure?

13
00:00:38.520 --> 00:00:39.900
You should be pretty familiar with it,
right,

14
00:00:39.900 --> 00:00:42.670
by now because it's kind of
what we've been using thus far.

15
00:00:42.670 --> 00:00:45.010
So we've got videos
nested inside of lists.

16
00:00:45.010 --> 00:00:46.730
But look at what we're starting with.

17
00:00:46.730 --> 00:00:50.390
We're starting with lists in
a separate array, then videos, and

18
00:00:50.390 --> 00:00:54.180
the only thing to link them up is
inside of videos, we have a list.id.

19
00:00:54.180 --> 00:00:56.920
So now we're just sort of taking
our skills out for a walk and

20
00:00:56.920 --> 00:01:00.390
seeing if we can go between all these
kind of very different data structures.

21
00:01:00.390 --> 00:01:03.670
So I'm going to try this example
right now, we're gonna go from list,

22
00:01:03.670 --> 00:01:04.930
I'm gonna map over a list.

23
00:01:06.840 --> 00:01:10.090
And for every list we
are going to map over videos.

24
00:01:10.090 --> 00:01:14.020
Now notice that videos and lists are at
the same level here right there.

25
00:01:14.020 --> 00:01:17.120
I don't need to go through the list
in order to get access to the videos.

26
00:01:17.120 --> 00:01:21.100
But I'm nesting two maps to go through all
the potential possibilities of combination

27
00:01:21.100 --> 00:01:23.900
of list and video that's what
happens when you nest the maps.

28
00:01:23.900 --> 00:01:27.090
It's interesting that I can also,
ultimately, go the other way.

29
00:01:27.090 --> 00:01:29.380
I could go videos and
then map through and look at the list.

30
00:01:29.380 --> 00:01:32.720
Because I have access to both of
these arrays at the same time.

31
00:01:32.720 --> 00:01:35.720
Now I just told you that if you have
access to both arrays of the same time,

32
00:01:35.720 --> 00:01:38.960
zip is often a good option here, right?

33
00:01:38.960 --> 00:01:42.740
But in this case, I'm not going through
two arrays where information is connected

34
00:01:42.740 --> 00:01:44.080
just by its position in the array.

35
00:01:44.080 --> 00:01:48.120
I'm actually just trying to get all the
possibilities between two different lists.

36
00:01:48.120 --> 00:01:52.120
And this will actually turn out
to be interesting and useful for

37
00:01:52.120 --> 00:01:53.640
async programming as well.

38
00:01:53.640 --> 00:01:58.210
So if I go through each list and then for
each list I go through each video.

39
00:01:58.210 --> 00:02:03.380
I can go ahead and, well first off filter,
so I'm gonna the filter the video such

40
00:02:03.380 --> 00:02:08.730
that the list.id in the video
is equal to the list.id, right.

41
00:02:08.730 --> 00:02:11.410
So I'm taking a look at
this collection right here.

42
00:02:11.410 --> 00:02:12.760
Notice that the video has a list.id and

43
00:02:12.760 --> 00:02:15.550
it matches up with the ID
property on the list.

44
00:02:15.550 --> 00:02:18.810
And so by doing this, we're gonna go
through every possibility of list and

45
00:02:18.810 --> 00:02:21.470
video and link them together
only when the IDs match up.

46
00:02:23.420 --> 00:02:31.717
So now all I have to do is map that into
&gt;&gt; Jafar Husain: The structure

47
00:02:31.717 --> 00:02:33.889
that we want, which is the video ID.

48
00:02:37.661 --> 00:02:39.027
&gt;&gt; Jafar Husain: Or is it name?

49
00:02:43.349 --> 00:02:45.696
&gt;&gt; Jafar Husain: I think it actually
wants the whole thing here, okay.

50
00:02:48.197 --> 00:02:50.279
&gt;&gt; Jafar Husain: Sorry,
let me take a moment to just read this.

51
00:02:54.900 --> 00:02:56.880
So, we actually want to
build the whole trees, so

52
00:02:56.880 --> 00:02:58.280
we're not just grabbing a few things here.

53
00:02:58.280 --> 00:03:04.218
So, I'm going map this into
the list object that I want,

54
00:03:04.218 --> 00:03:08.194
the hierarchical list object I want.

55
00:03:11.768 --> 00:03:14.465
&gt;&gt; Jafar Husain: So
it's gonna contain the list information,

56
00:03:14.465 --> 00:03:16.409
in this case the name of the list.

57
00:03:24.202 --> 00:03:26.880
&gt;&gt; Jafar Husain: And
the videos inside of that list.

58
00:03:26.880 --> 00:03:28.500
So I'm going to swap this
around just a little bit.

59
00:03:28.500 --> 00:03:30.889
And we're just going to
take this down here.

60
00:03:35.965 --> 00:03:37.090
&gt;&gt; Jafar Husain: And plug it in here.

61
00:03:44.338 --> 00:03:49.978
&gt;&gt; Jafar Husain: So I think we'll
do the combinations later on,

62
00:03:49.978 --> 00:03:54.349
but so once I format this correctly,

63
00:03:54.349 --> 00:04:00.696
you'll see that we've built
a tree from some lists.

64
00:04:11.053 --> 00:04:11.970
&gt;&gt; Jafar Husain: That's gonna work.

65
00:04:13.750 --> 00:04:16.141
&gt;&gt; Speaker 2: Wouldn't you need,
if you're doing lists.map,

66
00:04:16.141 --> 00:04:17.640
isn't that going to be list?

67
00:04:17.640 --> 00:04:19.360
&gt;&gt; Jafar Husain: Yes you could be great,
you just caught it.

68
00:04:21.100 --> 00:04:23.990
I've got it and it's looking for

69
00:04:23.990 --> 00:04:28.440
a it seems to have a list.id
in the input their videos.

70
00:04:29.700 --> 00:04:32.714
Now it's complaining that videos
has this list.id property.

71
00:04:33.770 --> 00:04:37.030
Whereas, in here, we don't have,
we actually just have the ID and title.

72
00:04:37.030 --> 00:04:40.610
So I forgot to map out just
the properties that we want.

73
00:04:40.610 --> 00:04:43.020
At this point, there's no need to
have the list.id link anymore,

74
00:04:43.020 --> 00:04:45.650
because I've nested
each video in its list.

75
00:04:45.650 --> 00:04:49.478
So, I'm gonna go through these videos,
and instead of just filtering them,

76
00:04:49.478 --> 00:04:53.190
I'm actually gonna map them, and
just pull out the properties that I want.

77
00:05:03.812 --> 00:05:05.490
&gt;&gt; Jafar Husain: I think it's just ID and
name, yeah.

78
00:05:05.490 --> 00:05:08.810
So when you're filling out the exercises,
wherever possible, try and

79
00:05:08.810 --> 00:05:14.290
keep the same property order here because
it compares based on property order.

80
00:05:14.290 --> 00:05:16.370
Of course in practice,
in JavaScript, that doesn't matter.

81
00:05:16.370 --> 00:05:19.460
Let's see if that works.

82
00:05:21.100 --> 00:05:24.250
Got one of those annoying missing
after argument list errors.

83
00:05:25.820 --> 00:05:28.540
And that looks reasonable to me, so
I'm just gonna hit the answer here.

84
00:05:31.170 --> 00:05:34.120
But as you can see the same solution,
albeit a little more verbose.

85
00:05:39.780 --> 00:05:42.930
So we're going through each list,
we're creating the list object.

86
00:05:42.930 --> 00:05:45.383
We have the name and
then we're embedding just the videos.

87
00:05:45.383 --> 00:05:47.517
Now in order to get the videos for
just that list,

88
00:05:47.517 --> 00:05:51.216
we'll filter it looking up just where the
list.id matches up with the list.id that

89
00:05:51.216 --> 00:05:52.749
we're currently going through.

90
00:05:52.749 --> 00:05:56.227
So we compare there on line 41
the videos list.id with the lists

91
00:05:56.227 --> 00:05:57.500
that were inside of ID.

92
00:05:57.500 --> 00:06:00.930
And then finally we just map and select
just those video properties we want.

93
00:06:00.930 --> 00:06:04.905
Which in this case everything but the
list.id and now we've taken two lists and

94
00:06:04.905 --> 00:06:05.550
turned them into a tree

