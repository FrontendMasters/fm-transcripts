WEBVTT

1
00:00:03.641 --> 00:00:08.261
&gt;&gt; Jafar Husain: Now that we've seen what
this observable is capable of, right,

2
00:00:08.261 --> 00:00:12.534
let's see how it works.
&gt;&gt; Jafar Husain: So,

3
00:00:12.534 --> 00:00:15.280
first let's take a look at the way
that we conventionally do.

4
00:00:15.280 --> 00:00:17.150
It's just reactive programming, right?

5
00:00:17.150 --> 00:00:18.320
Asynchronous reactive programming.

6
00:00:18.320 --> 00:00:21.300
Let's take a look at the way that we
conventionally do reactive programming.

7
00:00:21.300 --> 00:00:26.345
So, I've got a button and
I've got a handler for that button.

8
00:00:26.345 --> 00:00:30.180
And as soon as the button is clicked once,
I just wanna unsubscribe.

9
00:00:30.180 --> 00:00:31.390
So, in other words I wanna do something,

10
00:00:31.390 --> 00:00:36.700
I wanna alert, print up an alert
box as soon as you click a button.

11
00:00:36.700 --> 00:00:38.450
And then,
as soon as you click that button,

12
00:00:38.450 --> 00:00:40.670
every other time,
I never wanna print the alert box again.

13
00:00:40.670 --> 00:00:41.390
So, let's see how that works.

14
00:00:41.390 --> 00:00:46.109
We'll add an event listener,
so I'm adding a function.

15
00:00:46.109 --> 00:00:51.094
And then I remove that event listener the
very first time that handler is called,

16
00:00:51.094 --> 00:00:54.480
but I also alert a message
that the button was clicked.

17
00:00:54.480 --> 00:00:57.585
So I'm gonna run that,

18
00:00:57.585 --> 00:01:02.252
gonna to click this button, okay.

19
00:01:02.252 --> 00:01:05.460
And now every other time I click
the button, nothing happens.

20
00:01:05.460 --> 00:01:06.980
So relatively simple stuff right,

21
00:01:06.980 --> 00:01:09.600
this is the type of code that you write
when you write event driven code.

22
00:01:09.600 --> 00:01:12.118
Where maybe you this is a good
example of something you might do

23
00:01:12.118 --> 00:01:13.920
with window.onload for example, right?

24
00:01:13.920 --> 00:01:16.840
You might subscribe a function to
on load and then do something once.

25
00:01:16.840 --> 00:01:19.562
And then hopefully you remember to unhook
your event handler cuz technically that

26
00:01:19.562 --> 00:01:22.000
would be a memory leak if
you didn't do that right?

27
00:01:22.000 --> 00:01:25.390
You might if you, that's a common
mistake in programming if you leave your

28
00:01:25.390 --> 00:01:27.045
event handler on on load, right.

29
00:01:27.045 --> 00:01:30.330
You might accidentally in your closure be
holding onto a very big object that you

30
00:01:30.330 --> 00:01:31.790
might've only needed temporarily.

31
00:01:31.790 --> 00:01:33.950
That's one of the dangers if
you're working with closures.

32
00:01:33.950 --> 00:01:37.490
If you happen to use an object inside of
a closure and then you don't free that

33
00:01:37.490 --> 00:01:41.410
handler, that closure will hold onto
an object that might be big and expensive.

34
00:01:41.410 --> 00:01:44.059
So it's always good practice to
unsubscribe from window.unload.

35
00:01:46.840 --> 00:01:50.900
So now if we convert
a click to an observable,

36
00:01:50.900 --> 00:01:54.680
we can see that we can do the exact
same thing in a slightly different way.

37
00:01:54.680 --> 00:01:57.157
So we don't think about things in
terms of add event listener or

38
00:01:57.157 --> 00:01:58.550
remove listener anymore.

39
00:01:58.550 --> 00:02:02.900
We now know that observables are
collections just like arrays and we can

40
00:02:02.900 --> 00:02:06.310
use all the same operators that you've
been using on arrays with observable.

41
00:02:06.310 --> 00:02:08.754
And so one of those operators is forEach.

42
00:02:08.754 --> 00:02:11.324
Adding an event listener is no
different than traversing a collection,

43
00:02:11.324 --> 00:02:13.340
that's really what you're
doing at the heart.

44
00:02:13.340 --> 00:02:17.151
So I will first adapt this button
click into an observable and

45
00:02:17.151 --> 00:02:19.250
then I will just forEach over it.

46
00:02:19.250 --> 00:02:22.630
This code is doing the exact
same thing as the previous code.

47
00:02:22.630 --> 00:02:27.200
Now notice that when I forEach over
code I get the subscription object back.

48
00:02:27.200 --> 00:02:29.950
And the subscription object
is just a way of me saying,

49
00:02:29.950 --> 00:02:33.920
as the consumer of the data,
I don't want any more data.

50
00:02:33.920 --> 00:02:35.900
So I can dispose of that
subscription object.

51
00:02:35.900 --> 00:02:39.239
So I'm gonna forEach over and
the very first time I get a click,

52
00:02:39.239 --> 00:02:41.440
this should say click.

53
00:02:41.440 --> 00:02:44.848
I'm just going to dispose
of the subscriptions and

54
00:02:44.848 --> 00:02:47.470
that means I will get no more messages.

55
00:02:47.470 --> 00:02:49.920
So this should run the exact
same way as the last one.

56
00:02:49.920 --> 00:02:51.380
So I click it.

57
00:02:51.380 --> 00:02:56.503
Stopping Traversal, so that means
I've called subscription.dispose.

58
00:02:56.503 --> 00:02:59.890
And now, nothing right?

59
00:02:59.890 --> 00:03:03.340
So now hopefully we've seen
that events and observable,

60
00:03:03.340 --> 00:03:05.350
you can accomplish the same thing, right?

61
00:03:05.350 --> 00:03:06.700
By calling subscription.dispose.

62
00:03:06.700 --> 00:03:07.730
Just a slightly different interface.

63
00:03:07.730 --> 00:03:11.112
Instead of calling remove event listener,
you call subscription.dispose.

64
00:03:11.112 --> 00:03:15.961
Now one of the very nice things about
observable that is not true of events

65
00:03:15.961 --> 00:03:17.963
is that observables can end.

66
00:03:17.963 --> 00:03:21.639
You remember yesterday we talked about
those two missing semantics that the gang

67
00:03:21.639 --> 00:03:25.540
of four who wrote the design patterns
book left out of the observer pattern.

68
00:03:25.540 --> 00:03:27.760
Now that we've added them to observable,

69
00:03:27.760 --> 00:03:30.320
we can take advantage of
this notion of completion.

70
00:03:30.320 --> 00:03:34.027
So instead of after getting one message
we as the consumer saying okay now

71
00:03:34.027 --> 00:03:36.642
I wanna unsubscribe from the event.

72
00:03:36.642 --> 00:03:40.860
What I want us to do is I want to
rather than unsubscribe from events or

73
00:03:40.860 --> 00:03:43.570
by calling subscription.dispose
explicitly,

74
00:03:43.570 --> 00:03:48.980
I want us to use operators to create
events that end when we want them to end.

75
00:03:48.980 --> 00:03:52.295
So wouldn't be great if we could just say,
hey look, just take this event and

76
00:03:52.295 --> 00:03:52.965
just fire one.

77
00:03:52.965 --> 00:03:56.226
Just essentially, transform
the observable so that only fires once and

78
00:03:56.226 --> 00:03:57.620
then immediately completes.

79
00:03:57.620 --> 00:04:00.280
Here's the brilliance of an observable.

80
00:04:00.280 --> 00:04:04.450
Which is that when it completes, when
you have an explicit completion message,

81
00:04:04.450 --> 00:04:07.080
when that observable tells you it's done.

82
00:04:07.080 --> 00:04:10.328
Is there any reason at all for
it to hold on to your event handler?

83
00:04:10.328 --> 00:04:16.670
No, let's say I'm the observable and
she is the consumer.

84
00:04:16.670 --> 00:04:21.605
She hands me an event handler and I push
her values one on next one, on next two,

85
00:04:21.605 --> 00:04:25.040
on next three and then I say on completed.

86
00:04:25.040 --> 00:04:28.230
I've just told you that I'm never ever
gonna send you another value, right?

87
00:04:28.230 --> 00:04:31.030
Is there any reason in all for
me to hold on to the observer,

88
00:04:31.030 --> 00:04:32.844
to those three event
handlers that you gave me?

89
00:04:32.844 --> 00:04:35.610
No, I can just free them.

90
00:04:35.610 --> 00:04:40.580
That's what's great about an observable,
it cleans up after itself.

91
00:04:40.580 --> 00:04:44.090
That's why when an observable
completes and it says I'm done.

92
00:04:44.090 --> 00:04:46.810
You don't need to go along and
say, yeah remove event listener.

93
00:04:46.810 --> 00:04:49.840
It's already freed your event listener for
you.

94
00:04:49.840 --> 00:04:54.800
That's the difference in the way that you
think about DOM events and observables.

95
00:04:54.800 --> 00:04:57.743
That's why we don't worry about
unsubscribing from event by calling

96
00:04:57.743 --> 00:05:00.920
subscription.dispose, that's
just machinery under the hood.

97
00:05:00.920 --> 00:05:02.428
We're not gonna use that API directly.

98
00:05:02.428 --> 00:05:05.850
We are gonna take the observables and
we're gonna take operators that I'm gonna

99
00:05:05.850 --> 00:05:08.770
teach you today that cause them
to end when we want them to end.

100
00:05:08.770 --> 00:05:13.000
And then we can just be 100% sure
that they're not holding on to our

101
00:05:13.000 --> 00:05:16.230
callbacks anymore, because they've told us
that they're never gonna call us again.

102
00:05:17.420 --> 00:05:20.100
So this is how we avoid memory leaks,

103
00:05:20.100 --> 00:05:23.120
memory leaks are a serious
problem in large user interfaces.

104
00:05:23.120 --> 00:05:25.170
Where you're subscribing up to
events all over the place, and

105
00:05:25.170 --> 00:05:27.390
you got to remember to
unhook from those events.

106
00:05:27.390 --> 00:05:29.830
It leads to what we call
state machine like code.

107
00:05:29.830 --> 00:05:31.150
You need to build a state machine.

108
00:05:31.150 --> 00:05:34.340
I need to remember if I'm hooked up
to the event or whether I haven't.

109
00:05:34.340 --> 00:05:36.080
Let's go back to that mouse drag example.

110
00:05:36.080 --> 00:05:39.360
I want you guys to imagine for a moment
how you would have written the mouse drag

111
00:05:39.360 --> 00:05:41.580
example if you didn't have observable.

112
00:05:41.580 --> 00:05:42.870
What would you do?

113
00:05:42.870 --> 00:05:45.530
You'd probably listen for
a mouse down, right?

114
00:05:45.530 --> 00:05:47.660
And then when you got the mouse down,
your event handler would fire.

115
00:05:47.660 --> 00:05:49.310
And then you'd hook up to the mouse move.

116
00:05:49.310 --> 00:05:52.720
But now you have to remember that you've
hooked up to the mouse move, right?

117
00:05:52.720 --> 00:05:55.650
So that when the mouse up comes along,
you can unhook.

118
00:05:55.650 --> 00:05:58.820
So you're writing code that's like
using variables to keep track

119
00:05:58.820 --> 00:06:00.330
of what's going on, right.

120
00:06:00.330 --> 00:06:03.896
So okay, well, I'll hook up to the mouse
move and I'll hook up to the mouse up.

121
00:06:03.896 --> 00:06:07.195
And if the mouse up fires I need
to remember to unhook from the,

122
00:06:07.195 --> 00:06:09.990
I need to remember to rehook
up to the mouse down.

123
00:06:09.990 --> 00:06:13.840
You write this code it's all kind of
like this do this and do that, right.

124
00:06:13.840 --> 00:06:16.500
It's very easy to forget,
in a particular circumstance,

125
00:06:16.500 --> 00:06:19.110
to forget to unhook your event handler.

126
00:06:19.110 --> 00:06:21.890
But when we write code like this
you'll find we do it declaratively so

127
00:06:21.890 --> 00:06:23.220
it's much easier.

128
00:06:23.220 --> 00:06:26.823
So there is an operator that you can write
over array we never bothered to write over

129
00:06:26.823 --> 00:06:29.620
array, but it's very trivial called take.

130
00:06:29.620 --> 00:06:32.530
Take is something that you can
apply to any observable and

131
00:06:32.530 --> 00:06:35.760
simply say I just want one of these.

132
00:06:37.850 --> 00:06:40.300
So what that will do is it
will take an observable,

133
00:06:40.300 --> 00:06:43.650
which remember this observable
is based on click, and

134
00:06:43.650 --> 00:06:48.600
observables based on DOM events
will never say onCompleted.

135
00:06:48.600 --> 00:06:51.840
Why is that, why is that observables based
on that we've adapted from a DOM event

136
00:06:51.840 --> 00:06:57.504
will never give us an onCompleted message?
&gt;&gt; Speaker 2: Because it will

137
00:06:57.504 --> 00:06:59.361
keep listening to the DOM event forever.
&gt;&gt; Jafar Husain: Right,

138
00:06:59.361 --> 00:07:01.198
cuz DOM events don't have this
notion of completion right.

139
00:07:01.198 --> 00:07:02.700
DOM events just go on.

140
00:07:02.700 --> 00:07:05.950
That was the thing that was left out
of the pattern twenty years ago.

141
00:07:05.950 --> 00:07:08.330
They just thought,
who needs to say we're done, right.

142
00:07:08.330 --> 00:07:11.601
So if you take a DOM event and
you directly adopted into an observable,

143
00:07:11.601 --> 00:07:13.492
the observable never say onCompleted.

144
00:07:13.492 --> 00:07:17.680
But we can make the observable
say onCompleted by

145
00:07:17.680 --> 00:07:20.550
applying take one to it, right?

146
00:07:20.550 --> 00:07:23.730
So now instead of, back to
the example of window.onload, right?

147
00:07:23.730 --> 00:07:28.130
A good programmer remembers to remove
their onload handler after it fires.

148
00:07:28.130 --> 00:07:29.910
We know it's only gonna fire once, right.

149
00:07:29.910 --> 00:07:32.050
But we've got to go and
remember to unhook that handler.

150
00:07:32.050 --> 00:07:36.230
Otherwise we could leak memory cuz of that
closure could be holding on to some data.

151
00:07:36.230 --> 00:07:37.657
Well that's kind of ugly code.

152
00:07:37.657 --> 00:07:41.329
You've got to nest your remove event
listener inside of your event handler, and

153
00:07:41.329 --> 00:07:42.146
it's just ugly.

154
00:07:42.146 --> 00:07:46.760
Why don't we just convert window.onload
into an observable and then do take one?

155
00:07:46.760 --> 00:07:50.129
What that's gonna do is instead of just
calling onNext the one time onload would

156
00:07:50.129 --> 00:07:52.220
have called your event handler.

157
00:07:52.220 --> 00:07:56.770
Now it's gonna call onNext,
onCompleted, right, cuz it's take one.

158
00:07:56.770 --> 00:07:59.000
What take does it take an observable and
says, look,

159
00:07:59.000 --> 00:08:02.530
you just want to take this many number of
elements, and then you want to complete.

160
00:08:02.530 --> 00:08:05.040
And as soon as that
observable calls onCompleted

161
00:08:05.040 --> 00:08:06.940
it's gonna free our event handler for us.

162
00:08:06.940 --> 00:08:09.730
So we don't need to go back and
add or remove event listener.

163
00:08:09.730 --> 00:08:12.120
So if I take this button clicks and
do take one.

164
00:08:12.120 --> 00:08:14.700
Notice I'm not even,
I'm just ignoring the subscription object,

165
00:08:14.700 --> 00:08:16.200
I'm not even using it directly.

166
00:08:16.200 --> 00:08:20.550
I almost never call subscription.dispose
when I write RX code

167
00:08:20.550 --> 00:08:24.270
because I've got take until and
I've got take and I've got switch latest.

168
00:08:24.270 --> 00:08:28.000
So I almost never actually explicitly
unsubscribe from an observable.

169
00:08:28.000 --> 00:08:29.040
If we run this,

170
00:08:29.040 --> 00:08:33.016
we'll find that it does the exact same
thing as the two previous examples.

171
00:08:33.016 --> 00:08:37.490
So we get a button click, and
I get no more button clicks.

172
00:08:37.490 --> 00:08:41.160
Because it's unhooked the event
handler under the hood for me.

173
00:08:41.160 --> 00:08:43.510
Because I've told it to limit
itself to only one element.

174
00:08:45.730 --> 00:08:49.765
So this is the power of giving
observable the same semantics

175
00:08:49.765 --> 00:08:51.005
that are on the iterator pattern.

176
00:08:51.005 --> 00:08:53.885
Now that an observable can tell us it's
done, well that would be the logical time

177
00:08:53.885 --> 00:08:56.125
for the observable just,
you know free our subscription.

178
00:08:56.125 --> 00:08:58.495
Why hold on to a call back if
you're never gonna call it again?

