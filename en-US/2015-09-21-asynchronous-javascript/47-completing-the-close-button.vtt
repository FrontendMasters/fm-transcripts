WEBVTT

1
00:00:00.000 --> 00:00:03.931
[MUSIC]

2
00:00:03.931 --> 00:00:07.026
&gt;&gt; J. Husain: Now here's where we get
to a place where I want to talk about

3
00:00:07.026 --> 00:00:10.630
exceptions to rules,
because every rule has an exception.

4
00:00:10.630 --> 00:00:14.700
And so one of the exceptions to rules here
is that sometimes you want to trigger side

5
00:00:14.700 --> 00:00:18.390
effects, right,
when somebody subscribes to an observable.

6
00:00:18.390 --> 00:00:21.980
Now in general that's going to happen, for
example, when we make a network request.

7
00:00:21.980 --> 00:00:25.110
So side effects happen sometimes when
you subscribe to an observerable.

8
00:00:25.110 --> 00:00:26.170
Again, you want to delay them.

9
00:00:26.170 --> 00:00:28.870
You don't want to do the side effects
when you create the observable,

10
00:00:28.870 --> 00:00:31.240
you only want to do the side effects when
somebody forEach's over the observable.

11
00:00:31.240 --> 00:00:33.450
So you want to make sure
that the observable is lazy.

12
00:00:33.450 --> 00:00:37.010
Now let's take a look at the getJSON
request we made, that actually,

13
00:00:37.010 --> 00:00:39.150
notice that that triggers side effects.

14
00:00:39.150 --> 00:00:42.470
As soon as you forEach over that
observable, right, what happens?

15
00:00:42.470 --> 00:00:44.451
Well I'll just use the network request,
and sure enough,

16
00:00:44.451 --> 00:00:46.200
that change is a global object.

17
00:00:46.200 --> 00:00:48.320
So it's not that you
can't have side effects,

18
00:00:48.320 --> 00:00:51.550
it's that ideally you want to encapsulate
them inside of the observable.

19
00:00:51.550 --> 00:00:54.610
So that when somebody forEach's
over that observable, then and

20
00:00:54.610 --> 00:00:56.520
only then do you trigger the side effects.

21
00:00:56.520 --> 00:01:00.620
So what would be nice is, and then
instead in addition to doing this inside

22
00:01:00.620 --> 00:01:05.840
of the forEach, we can also use
an operator called do action.

23
00:01:05.840 --> 00:01:10.050
Now what do action does is it makes sure
that when you forEach over an observable,

24
00:01:10.050 --> 00:01:13.550
it injects some code that you can
run to cause side effects to occur.

25
00:01:13.550 --> 00:01:15.150
Does that makes sense?

26
00:01:15.150 --> 00:01:18.780
So if I forEach over an array,
there's no side effects, right?

27
00:01:18.780 --> 00:01:21.440
They're not really changing
any global objects.

28
00:01:21.440 --> 00:01:25.720
But with do action,
I can cause a side effect to occur.

29
00:01:27.490 --> 00:01:30.790
So I was saying earlier,
sometimes we wanna inject side effects

30
00:01:30.790 --> 00:01:33.170
inside of an observable when
we forEach into it, right?

31
00:01:33.170 --> 00:01:36.870
So we wanna cause a side effect to occur
just by forEaching over an observable.

32
00:01:36.870 --> 00:01:39.070
So we already saw that happen with
making a network request, right?

33
00:01:39.070 --> 00:01:41.970
That's what happens when you
forEach over a network request or

34
00:01:41.970 --> 00:01:44.010
the observable that comes
back from search Wikipedia.

35
00:01:44.010 --> 00:01:49.180
We end up triggering a side effect,
somebody selecting all the text now, or

36
00:01:49.180 --> 00:01:49.960
at least on my screen.

37
00:01:49.960 --> 00:01:51.388
Interesting, but
it's not showing up there.

38
00:01:51.388 --> 00:01:52.252
&gt;&gt; Speaker 2: [INAUDIBLE]

39
00:01:52.252 --> 00:01:54.020
Type in there.
&gt;&gt; J. Husain: You know what?

40
00:01:54.020 --> 00:01:58.996
They are selecting,
it's just super faint on the projection.

41
00:01:58.996 --> 00:02:05.213
But someone selected.
&gt;&gt; J. Husain: Someone

42
00:02:05.213 --> 00:02:07.827
selected all the text.

43
00:02:07.827 --> 00:02:09.765
[LAUGH] Yeah.

44
00:02:09.765 --> 00:02:14.550
It's happening.
&gt;&gt; Speaker 3: The text is not clear.

45
00:02:14.550 --> 00:02:15.410
&gt;&gt; J. Husain: Whoever out there is

46
00:02:15.410 --> 00:02:18.285
selecting all the text,
do not select all the text.

47
00:02:18.285 --> 00:02:22.185
[LAUGH] Pink is nice, but.
&gt;&gt; Speaker 3: Yeah, I guess.

48
00:02:22.185 --> 00:02:24.050
I guess we're gonna
have to roll with pink.

49
00:02:24.050 --> 00:02:25.090
&gt;&gt; J. Husain: This is the My Little Pony

50
00:02:25.090 --> 00:02:26.690
theme of text editing.
&gt;&gt; Speaker 3: Yeah, but

51
00:02:26.690 --> 00:02:29.910
the problem is there's more
than one user in pink.

52
00:02:29.910 --> 00:02:33.050
So we can't pinpoint which one.
&gt;&gt; J. Husain: It seems to have unselected.

53
00:02:33.050 --> 00:02:38.210
Thank you, whoever you are out there.
&gt;&gt; J. Husain: So

54
00:02:38.210 --> 00:02:43.870
we've learned about map, filter,
merge all, zip, and reduce.

55
00:02:43.870 --> 00:02:45.690
We've learned about flattening patterns,
so

56
00:02:45.690 --> 00:02:48.300
we've learned how to build
a collection function,

57
00:02:48.300 --> 00:02:52.430
which is that you keep mapping until you
have all the data you need in scope.

58
00:02:52.430 --> 00:02:56.270
You create your result, and then you
figure out how many flattens you need, and

59
00:02:56.270 --> 00:02:59.240
where to apply those flattens,
to get down to a nice flat collection.

60
00:02:59.240 --> 00:03:00.770
And then use forEach to consume it.

61
00:03:00.770 --> 00:03:04.300
That's just the functional programming
style of building collections.

62
00:03:04.300 --> 00:03:07.340
Now you learn that when we start working
with observable we have an additional

63
00:03:07.340 --> 00:03:09.320
question to ask ourselves.

64
00:03:09.320 --> 00:03:12.250
Which is then that, in that last
step when we do the flattening,

65
00:03:12.250 --> 00:03:14.820
the question is which flatten to use.

66
00:03:14.820 --> 00:03:19.190
Do we use merge all, do we use concat all,
or do we use switch latest, right?

67
00:03:19.190 --> 00:03:22.570
Now another thing about observables,
that you don't have with arrays, is

68
00:03:22.570 --> 00:03:26.650
that when you forEach over an observable
it may cause something to happen, right?

69
00:03:26.650 --> 00:03:28.580
It may actually cause
a side effect to occur.

70
00:03:28.580 --> 00:03:32.290
So that's the case with the observable
that we get back from search Wikipedia,

71
00:03:32.290 --> 00:03:33.410
when we forEach other that.

72
00:03:33.410 --> 00:03:36.520
We actually trigger a network
request that goes across the wire.

73
00:03:36.520 --> 00:03:41.630
So that can be something that we can use
to our advantage in this particular case.

74
00:03:41.630 --> 00:03:42.970
So search button clicks.

75
00:03:42.970 --> 00:03:47.030
Remember the problem we had, we said that
which is that we were relying on the order

76
00:03:47.030 --> 00:03:49.410
in which those event handlers fired,
right?

77
00:03:49.410 --> 00:03:51.410
Maybe this event handler fires first and

78
00:03:51.410 --> 00:03:54.930
then we display, or perhaps even
create those DOM elements, and

79
00:03:54.930 --> 00:03:58.500
then later on this event handler process,
but we can't be 100% certain of that.

80
00:03:58.500 --> 00:04:00.639
So if we want to inject side effects,

81
00:04:00.639 --> 00:04:04.779
meaning when you forEach over
an observable, something happens we can

82
00:04:04.779 --> 00:04:07.966
use the doAction function.
&gt;&gt; J. Husain: So

83
00:04:07.966 --> 00:04:12.674
the doAction function actually
has the same API as forEach,

84
00:04:12.674 --> 00:04:17.090
the only difference is it
returns an observable.

85
00:04:17.090 --> 00:04:20.840
So if you put doAction in here,
this is technically the action to

86
00:04:20.840 --> 00:04:23.490
occur when you get an onNext,
so you can take the value.

87
00:04:23.490 --> 00:04:24.990
And in here we can do something.

88
00:04:24.990 --> 00:04:28.240
So in here we actually wanna
take the side effect and

89
00:04:28.240 --> 00:04:32.950
put it right in here, so that whenever
you onNext over SearchButtonClicks,

90
00:04:32.950 --> 00:04:34.230
it injects the side effect.

91
00:04:34.230 --> 00:04:38.140
Now what I have done here, cuz I've
actually just created another observable.

92
00:04:38.140 --> 00:04:40.900
I haven't,
not like forEach where we run something.

93
00:04:40.900 --> 00:04:44.790
What we're doing is we're just saying when
somebody calls forEach on this observable,

94
00:04:44.790 --> 00:04:46.580
do this action.

95
00:04:46.580 --> 00:04:47.828
So this is gonna return yet

96
00:04:47.828 --> 00:04:52.540
another observerable, which I'm just gonna
alias to the exact same one as before.

97
00:04:52.540 --> 00:04:55.390
Well, actually it's
better practice to sit.

98
00:04:55.390 --> 00:05:01.290
Let's let's say, it's always better to
be semantic when you're naming things.

99
00:05:01.290 --> 00:05:07.140
So we've gone from SearchButtonClicks to
SearchFormOpened, or SearchFormOpens.

100
00:05:07.140 --> 00:05:10.470
I usually name my observables plural
because there are streams of things for

101
00:05:10.470 --> 00:05:13.020
the same reason you wouldn't name
arrays plural because they're

102
00:05:13.020 --> 00:05:13.690
collections of things.

103
00:05:13.690 --> 00:05:15.560
So I'm gonna call this searchFormOpens.

104
00:05:15.560 --> 00:05:16.830
And now I now,

105
00:05:16.830 --> 00:05:21.160
when we onNext searchFormOpens,
that form has already been displayed.

106
00:05:21.160 --> 00:05:21.830
Does that make sense?

107
00:05:24.030 --> 00:05:28.170
Because, this is the code that gets
injected in when you call forEach.

108
00:05:30.600 --> 00:05:34.540
So now we can be sure that by the time
this code runs, this code has already run.

109
00:05:36.570 --> 00:05:39.483
Cuz when we forEach over this,
the first thing that happens is that this

110
00:05:39.483 --> 00:05:43.499
occurs.
&gt;&gt; J. Husain: So let's just confirm that

111
00:05:43.499 --> 00:05:50.226
this still works.
&gt;&gt; J. Husain: Hopefully, no because

112
00:05:50.226 --> 00:05:55.090
I'm not listing the searchFormOpens here,
I'm listing to searchButtonClicks.

113
00:05:55.090 --> 00:05:58.138
So now that I've switched it
to listen to searchFormOpens,

114
00:05:58.138 --> 00:06:05.860
We should see that it works.
&gt;&gt; J. Husain: Great.

115
00:06:05.860 --> 00:06:08.580
And if I type in ab,
we get my search results.

116
00:06:08.580 --> 00:06:09.360
Great.

117
00:06:09.360 --> 00:06:13.160
Now we wanna do the same
thing with close clicks.

118
00:06:13.160 --> 00:06:14.800
Right?
When you click close,

119
00:06:14.800 --> 00:06:16.970
we actually wanna hide this form.

120
00:06:16.970 --> 00:06:20.700
And so this is a lot of us to just inject
some side effects into the close clicks

121
00:06:20.700 --> 00:06:23.950
observable such that when somebody
clicks close we can be sure that we're

122
00:06:23.950 --> 00:06:28.840
gonna hide that form before we get any
feedback when you for Each over that.

123
00:06:28.840 --> 00:06:34.890
So here inside of close clicks we
created close clicks make this smaller,

124
00:06:34.890 --> 00:06:40.080
and we're going to create
a search form closes and

125
00:06:41.150 --> 00:06:45.830
that's going to take close clicks and
add a do action.

126
00:06:45.830 --> 00:06:51.450
That just means we're going
to do something when for

127
00:06:51.450 --> 00:06:57.069
each is called, and
in this particular case you're

128
00:06:57.069 --> 00:07:02.306
just going to take this and
hide it again [SOUND] And

129
00:07:02.306 --> 00:07:07.174
so now instead of taking
until close clicks.

130
00:07:07.174 --> 00:07:10.580
We're going to do a take
until search form closes.

131
00:07:10.580 --> 00:07:13.060
Yeah question?
&gt;&gt; Speaker 3: It's asking what [INAUDIBLE]

132
00:07:13.060 --> 00:07:16.906
[SOUND] is asynchronous?
&gt;&gt; J. Husain: If the side effect

133
00:07:16.906 --> 00:07:19.150
is asynchronous,
you can't do with do action.

134
00:07:19.150 --> 00:07:24.330
Do action is only synchronous, but what
he's really saying, I think in effect,

135
00:07:24.330 --> 00:07:28.470
is what if you want to perform that
side effect after an asynchronous

136
00:07:28.470 --> 00:07:32.080
operation occurs, and then what you would
really need to do is you need to use map

137
00:07:32.080 --> 00:07:36.580
because you want to map And then create
an observable that causes the asynchronous

138
00:07:36.580 --> 00:07:42.530
thing to occur and then do a do action
on the inner observable, right.

139
00:07:42.530 --> 00:07:45.270
What he's saying is I want
to do a asynchronous action

140
00:07:45.270 --> 00:07:46.970
when item arrives through the stream.

141
00:07:46.970 --> 00:07:49.600
So then you would just map over
just like we cause an asynchronous

142
00:07:49.600 --> 00:07:52.610
request to occur when we type a key,
we will take an observable and

143
00:07:52.610 --> 00:07:55.130
win it on nexus, well out a map and And

144
00:07:55.130 --> 00:07:58.300
then we'll create an observable to
represent that asynchronous action.

145
00:07:58.300 --> 00:08:00.290
And then on that inner observable,

146
00:08:00.290 --> 00:08:03.940
that represents the asynchronous action,
that's where we add do action and

147
00:08:03.940 --> 00:08:06.350
then at that point we know that the
asynchronous action is completed and so

148
00:08:06.350 --> 00:08:09.040
that we can now synchronously
cause of side effect to occur.

149
00:08:09.040 --> 00:08:11.650
Almost every side effect in
a browser is a synchronous API.

150
00:08:11.650 --> 00:08:13.230
Because when you work with a dom.

151
00:08:13.230 --> 00:08:15.540
It's all sync APIs for
changing the dom, right?

152
00:08:15.540 --> 00:08:17.350
Remove child, append child.

153
00:08:17.350 --> 00:08:18.340
So if that's what you want to do.

154
00:08:18.340 --> 00:08:21.200
If you want to wait until some
asynchronous event occurs.

155
00:08:21.200 --> 00:08:23.060
And then cause a side effect to do it.

156
00:08:23.060 --> 00:08:25.170
You would just map,
return that observable.

157
00:08:25.170 --> 00:08:27.470
And then a do action on
that inner observable.

158
00:08:27.470 --> 00:08:28.370
Does that make sense?

159
00:08:28.370 --> 00:08:31.135
So now we make sure that everything
executes in the correct order,

160
00:08:31.135 --> 00:08:34.830
anytime we want we can inject side
effects into an observable, right?

161
00:08:34.830 --> 00:08:37.800
Because remember that observable
is just a forEach method, and

162
00:08:37.800 --> 00:08:41.650
it's just like tacking on some code inside
of that forEach path which you want to run

163
00:08:41.650 --> 00:08:43.199
at the top of the forEach method.

164
00:08:43.199 --> 00:08:45.846
Think of that as the mental model for
what doAction does.

165
00:08:45.846 --> 00:08:47.890
And doAction also has overloads,
by the way.

166
00:08:47.890 --> 00:08:52.120
If you wanna do a side effect on onError,
or

167
00:08:52.120 --> 00:08:56.900
onComplete, you just pass it, it's got
the exact same interface as forEach.

168
00:08:56.900 --> 00:08:59.380
So you can just do something
when an error occurs, or

169
00:08:59.380 --> 00:09:00.660
do something when a completion occurs.

170
00:09:00.660 --> 00:09:02.330
In this case, we don't need to do that.

171
00:09:02.330 --> 00:09:04.390
Does that makes sense?

172
00:09:04.390 --> 00:09:05.970
So it has the same interfaces for each.

173
00:09:05.970 --> 00:09:09.180
So you can just cause some side effect to
occur if an error happens to come through

174
00:09:09.180 --> 00:09:11.790
the observable or when a completion
happens to go through the observable.

175
00:09:11.790 --> 00:09:14.740
So that wasn't clear,
I'll put that up one more time.

176
00:09:14.740 --> 00:09:16.222
Just the same interfaces forEach.

177
00:09:16.222 --> 00:09:19.212
So doAction,
it's exactly the same as forEach,

178
00:09:19.212 --> 00:09:23.584
except forEach actually triggers
the observable to do something.

179
00:09:23.584 --> 00:09:27.940
Whereas doAction just returns another
observable that when forEached,

180
00:09:27.940 --> 00:09:29.810
will cause those actions to occur.

181
00:09:29.810 --> 00:09:32.960
So one of these is a lazy,
doAction is lazy, right?

182
00:09:32.960 --> 00:09:34.270
We're not we're not doing anything yet.

183
00:09:34.270 --> 00:09:36.780
We're just creating an observable
that when you forEach over it,

184
00:09:36.780 --> 00:09:38.030
something will happen.

185
00:09:38.030 --> 00:09:39.510
And forEach is eager.

186
00:09:39.510 --> 00:09:42.136
By the time you call forEach,
you're actually now doing something.

187
00:09:42.136 --> 00:09:43.520
Does that make sense?

188
00:09:43.520 --> 00:09:46.570
So any time you want a UI action to occur,

189
00:09:46.570 --> 00:09:51.760
whenever somebody forEaches over
a stream or an event occurs, right,

190
00:09:51.760 --> 00:09:56.190
it's usually best to
stick that in a doAction.

191
00:09:56.190 --> 00:09:58.250
And just some side effect
that's occurring alongside.

192
00:09:58.250 --> 00:10:03.586
So you see here that if we run this it

193
00:10:03.586 --> 00:10:11.560
should work.
&gt;&gt; J. Husain: Great.

194
00:10:11.560 --> 00:10:14.280
Now how do I know that if I close this,
it's gone.

195
00:10:14.280 --> 00:10:17.230
But how do I know it's actually
unsubscribed from the event handler?

196
00:10:17.230 --> 00:10:18.480
Let's try something out.

197
00:10:18.480 --> 00:10:22.630
Let's try not hiding it onClose,
let's comment out this close here.

198
00:10:24.520 --> 00:10:25.504
And let's run it again.

199
00:10:25.504 --> 00:10:28.960
And then so
now we know it won't be hidden.

200
00:10:28.960 --> 00:10:32.800
But if everything worked correctly,
if I type into the text box

201
00:10:32.800 --> 00:10:36.520
after clicking Close, I shouldn't
see anymore search results go out.

202
00:10:36.520 --> 00:10:40.260
Because we've stopped listening to
the inner stream of search results sets

203
00:10:40.260 --> 00:10:44.420
the moment we were only within that
stream until the close button is clicked.

204
00:10:44.420 --> 00:10:51.094
So now that I've clicked Close,
right, hopefully.

205
00:10:51.094 --> 00:10:52.870
Nothing.

206
00:10:52.870 --> 00:10:56.200
So that's how you clean up after
yourself when you close and

207
00:10:56.200 --> 00:10:58.240
open sections of the user interface.

208
00:10:58.240 --> 00:11:01.500
You always think about in terms of
there's some of that which causes

209
00:11:01.500 --> 00:11:05.480
this form to open, and there's some of
that which causes this form to close.

210
00:11:05.480 --> 00:11:09.600
And so just like sequencing any action
with observable, you take the thing

211
00:11:09.600 --> 00:11:13.960
you want to happen first, you map, and you
return the thing you want to have second.

212
00:11:13.960 --> 00:11:16.800
And then that gives you
a two-dimensional observable because for

213
00:11:16.800 --> 00:11:19.210
every item in the stream that
you want to happen first,

214
00:11:19.210 --> 00:11:22.240
you're substituting in an observable for
each one of those items.

215
00:11:22.240 --> 00:11:25.020
Then you have to pick the right
flattening strategy, right?

216
00:11:25.020 --> 00:11:28.310
That's the question you have to ask
yourself when you work with observable,

217
00:11:28.310 --> 00:11:29.410
but not with array.

218
00:11:29.410 --> 00:11:30.800
With array it's just how deep am I?

219
00:11:30.800 --> 00:11:33.160
Well then I know to apply
that may concatAlls.

220
00:11:33.160 --> 00:11:35.760
But with observable,
it's how deep am I, right?

221
00:11:35.760 --> 00:11:38.880
And which flattening strategies
do I apply at each step

222
00:11:38.880 --> 00:11:41.610
to get the right concurrency
pattern that I want?

223
00:11:41.610 --> 00:11:44.518
So now we've explained merge all,
switch latest, and

224
00:11:44.518 --> 00:11:49.500
concatAll by visualizing them to hopefully
try and capture of that mental picture and

225
00:11:49.500 --> 00:11:51.300
project that mental pictures
as you're going through.

226
00:11:51.300 --> 00:11:53.420
And solving this problem to trying
to decide behavior you want.

227
00:11:53.420 --> 00:11:55.680
Because there are cases in the UI for
all of these things.

228
00:11:55.680 --> 00:11:59.380
You'll find cases for merge all,
you'll find cases for ConcatAll, but for

229
00:11:59.380 --> 00:12:01.585
the most part, you'll find cases for
switch latest.

230
00:12:01.585 --> 00:12:03.600
You'll only want to do the latest thing.

231
00:12:03.600 --> 00:12:08.080
So I'm gonna uncomment closeClicks,
and now we've built something that's

232
00:12:08.080 --> 00:12:11.830
very much akin to the type of thing that
you're gonna build in user interfaces.

233
00:12:11.830 --> 00:12:13.900
This is how you will build
your user interfaces.

234
00:12:13.900 --> 00:12:17.744
Someone will open a form, you'll have
some asynchronous action occurring while

235
00:12:17.744 --> 00:12:20.473
that form is open, and
then if somebody closes that form,

236
00:12:20.473 --> 00:12:22.994
you'll want to completely
clean up after yourself.

237
00:12:22.994 --> 00:12:25.908
And this is exactly
the pattern that you use.

238
00:12:25.908 --> 00:12:29.626
I'm gonna fork this so
people can come back and refer to it.

239
00:12:29.626 --> 00:12:32.498
So search.

240
00:12:32.498 --> 00:12:34.220
No search results, that no surprise.

