WEBVTT

1
00:00:00.000 --> 00:00:04.087
[MUSIC]

2
00:00:04.087 --> 00:00:04.961
&gt;&gt; Jafar Husain: Got
a question in the back?

3
00:00:04.961 --> 00:00:07.840
&gt;&gt; Speaker 2: Yeah, the question, so
this is a way to stop the race condition?

4
00:00:07.840 --> 00:00:11.280
&gt;&gt; Jafar Husain: Yeah, this is a way,
exactly, that's a great way of putting it.

5
00:00:11.280 --> 00:00:13.140
If I subscribe to two different events,

6
00:00:13.140 --> 00:00:16.051
they're gonna fire to me at
whatever order that they come out.

7
00:00:16.051 --> 00:00:20.455
They don't care that I subscribed to
this event first, and that event second.

8
00:00:20.455 --> 00:00:23.596
You're not gonna wait until all the data
from the first event is done before you

9
00:00:23.596 --> 00:00:25.510
start getting messages from the second.

10
00:00:25.510 --> 00:00:28.160
That's a very hard thing to do
usually in concurrent programming, and

11
00:00:28.160 --> 00:00:28.960
that's the way you would do it.

12
00:00:28.960 --> 00:00:31.222
This is what you use when
you wanna order events.

13
00:00:31.222 --> 00:00:32.020
You wanna say, look,

14
00:00:32.020 --> 00:00:34.670
I'm only interested in this event
after these events have occurred.

15
00:00:34.670 --> 00:00:35.921
Does that make sense?

16
00:00:35.921 --> 00:00:36.670
Another question?

17
00:00:36.670 --> 00:00:37.610
&gt;&gt; Speaker 2: And then the next one was,

18
00:00:37.610 --> 00:00:42.159
can you give another example of
observables like the cake cutting example?

19
00:00:46.143 --> 00:00:48.690
&gt;&gt; Jafar Husain: So sometimes these
things can be a bit abstract and

20
00:00:48.690 --> 00:00:50.943
they defy metaphor, but we're gonna try.

21
00:00:50.943 --> 00:00:53.320
So let's give an example.

22
00:00:53.320 --> 00:00:57.758
Now, instead of dispensing slices of
cakes, I'm gonna dispense cakes, right?

23
00:00:57.758 --> 00:01:00.475
So, in this case it's the observable, so

24
00:01:00.475 --> 00:01:04.100
I'm just gonna start throwing
cakes at this poor woman.

25
00:01:04.100 --> 00:01:06.595
Now I'm throwing whole boxes
of cakes at her, right?

26
00:01:06.595 --> 00:01:11.174
And now, you're gonna try, and before I
throw you another cake, you're gonna try

27
00:01:11.174 --> 00:01:15.260
and cut that cake up and then hand
the individual slices of the cake around.

28
00:01:15.260 --> 00:01:16.810
Does that make sense?

29
00:01:16.810 --> 00:01:19.751
A cake is a collection of slices and
I'm pushing one at her and

30
00:01:19.751 --> 00:01:22.982
she's gonna then turn around and
start cutting as fast as she can,

31
00:01:22.982 --> 00:01:27.046
cutting cake slices and then throwing them
at the other people in the room, right?

32
00:01:27.046 --> 00:01:30.428
But while this poor woman's cutting up
cake, I might take another cake and

33
00:01:30.428 --> 00:01:31.565
throw it at her, right?

34
00:01:31.565 --> 00:01:32.825
But what does she wanna do?

35
00:01:32.825 --> 00:01:36.040
She wants to make sure that everybody in
the right order in the room gets their

36
00:01:36.040 --> 00:01:37.105
cake in the right order.

37
00:01:37.105 --> 00:01:39.695
That nobody gets their
cake before anybody else.

38
00:01:39.695 --> 00:01:42.368
So even though I'm throwing cake at her,
what she's gonna do is,

39
00:01:42.368 --> 00:01:44.943
if she's in the middle of cutting
a cake and I hand her a big cake,

40
00:01:44.943 --> 00:01:46.545
she's just gonna sort of put it aside.

41
00:01:46.545 --> 00:01:49.556
She's just gonna put it aside and
she's gonna cut the slices and

42
00:01:49.556 --> 00:01:52.395
hand them out in sequential
order to the people next to her.

43
00:01:52.395 --> 00:01:53.520
Does that make sense?

44
00:01:53.520 --> 00:01:56.840
So I might be throwing cakes
like crazy real fast, right?

45
00:01:56.840 --> 00:01:59.055
But you're just piling up
the cakes next to you, right?

46
00:01:59.055 --> 00:02:03.282
And as you can methodically get to them
in order, you're handing out slices, and

47
00:02:03.282 --> 00:02:05.900
that's the buffer of observables, right?

48
00:02:05.900 --> 00:02:10.170
I've handed you a cake, right back here.

49
00:02:10.170 --> 00:02:13.780
I've handed you a cake, that second
observable, this observable right here.

50
00:02:13.780 --> 00:02:16.450
I've just handed her a cake but she's not
done cutting the slices from the second

51
00:02:16.450 --> 00:02:17.440
observable and handing them out yet.

52
00:02:17.440 --> 00:02:18.730
Does that makes sense?

53
00:02:18.730 --> 00:02:20.220
So that's like an observable
of observables, right?

54
00:02:20.220 --> 00:02:23.070
The individual cake is
a collection of slices.

55
00:02:23.070 --> 00:02:26.270
But we also have a collection of cakes,
and that's the outer observable.

56
00:02:26.270 --> 00:02:28.040
The inner observable is
a collection of slices.

57
00:02:28.040 --> 00:02:28.740
Outer observable is a collection of cakes.

58
00:02:28.740 --> 00:02:29.881
Does that make sense?

59
00:02:29.881 --> 00:02:30.850
Another question.

60
00:02:31.900 --> 00:02:34.626
&gt;&gt; Speaker 2: Would you ever have a case
where one of the subobservables never

61
00:02:34.626 --> 00:02:37.154
completes, therefore
restricting the forEach method?

62
00:02:37.154 --> 00:02:38.790
&gt;&gt; Jafar Husain: Great question.

63
00:02:38.790 --> 00:02:40.350
Great question.

64
00:02:40.350 --> 00:02:44.690
Absolutely, if I give you, and I know this
is where metaphors tend to break down.

65
00:02:44.690 --> 00:02:47.020
But I give you a magical cake,
an Alice in Wonderland cake,

66
00:02:47.020 --> 00:02:48.678
where the slices never end, right?

67
00:02:48.678 --> 00:02:49.433
&gt;&gt; Speaker 2: Throw printers.

68
00:02:49.433 --> 00:02:51.481
&gt;&gt; Jafar Husain: [LAUGH]
&gt;&gt; Speaker 2: Throw a printer with

69
00:02:51.481 --> 00:02:53.694
unlimited paper that
keeps printing forever.

70
00:02:53.694 --> 00:02:55.210
&gt;&gt; Jafar Husain: Sure,
that works too, I guess.

71
00:02:56.410 --> 00:02:58.629
So now I've given you this magical cake,
right, and

72
00:02:58.629 --> 00:03:01.308
then you're never gonna get to any
of the other cakes I give you.

73
00:03:01.308 --> 00:03:04.882
You're just gonna keep handing out slices
from this magical cake that never.

74
00:03:04.882 --> 00:03:08.085
In the meantime, your buffer of cakes, I'm
just gonna keep throwing cakes at you, but

75
00:03:08.085 --> 00:03:10.550
you're just gonna keep piling them up,
forever.

76
00:03:10.550 --> 00:03:14.490
And so yes, you would not want to
use concatAll on an infinite stream.

77
00:03:15.510 --> 00:03:17.330
Probably not a good idea.

78
00:03:17.330 --> 00:03:17.843
Does that make sense?

79
00:03:17.843 --> 00:03:19.410
So these are hazards to be aware of.

80
00:03:19.410 --> 00:03:22.098
You don't wanna try and concatenate
an infinite stream to another stream cuz

81
00:03:22.098 --> 00:03:23.680
you're never gonna get
to the other stream.

82
00:03:23.680 --> 00:03:24.710
So great question.

83
00:03:24.710 --> 00:03:27.767
&gt;&gt; Speaker 2: What makes a mouse
move event not an infinite stream?

84
00:03:27.767 --> 00:03:30.245
Because eventually the mouse stops moving,
but

85
00:03:30.245 --> 00:03:32.948
I mean what if the mouse
never stops moving?

86
00:03:32.948 --> 00:03:33.789
&gt;&gt; Jafar Husain: The mouse
is an infinite stream.

87
00:03:35.120 --> 00:03:39.200
Because we've gone from a DOM event which
has no notion of completion onError,

88
00:03:39.200 --> 00:03:41.560
that was the missing piece that
the design patterns guy didn't add.

89
00:03:41.560 --> 00:03:43.930
And we've adapted it into an observable.

90
00:03:43.930 --> 00:03:46.784
But because the underlying source never
says I'm done and never gives you

91
00:03:46.784 --> 00:03:49.776
an error, the observable that we've
adapted it to will never say I'm done or

92
00:03:49.776 --> 00:03:51.180
never give you an error.

93
00:03:51.180 --> 00:03:54.270
It's perfectly reasonable and okay to
have an observable that goes on forever.

94
00:03:54.270 --> 00:03:57.420
And that might seem odd at first and
it seemed odd to the design patterns guy,

95
00:03:57.420 --> 00:03:59.750
and it will, actually, sorry.

96
00:03:59.750 --> 00:04:02.556
That's what seemed natural to design
patterns guys to have a stream go on

97
00:04:02.556 --> 00:04:04.627
forever because they were
thinking about a UI event.

98
00:04:04.627 --> 00:04:06.541
But when you start thinking
about observables,

99
00:04:06.541 --> 00:04:08.930
I mean what can you do with
a collection that goes on forever?

100
00:04:08.930 --> 00:04:10.280
It seems impossible.

101
00:04:10.280 --> 00:04:12.440
It's hard for
us to imagine the infinite, right?

102
00:04:12.440 --> 00:04:15.530
But it turns out because of DOM events
we work with collections that go on

103
00:04:15.530 --> 00:04:17.230
forever all the time, right?

104
00:04:17.230 --> 00:04:18.720
Those are all collections go on forever.

105
00:04:18.720 --> 00:04:24.010
The difference is we have to manage,
we as the consumers have to say whoa,

106
00:04:24.010 --> 00:04:25.100
no more cake.

107
00:04:25.100 --> 00:04:28.762
Stop listing at the right time, and
that usually takes a lot of work and

108
00:04:28.762 --> 00:04:29.642
coordination.

109
00:04:29.642 --> 00:04:31.954
And it's that that I'm gonna show
you how you can avoid today.

110
00:04:31.954 --> 00:04:34.650
I'm gonna show you how you can deal
with observables that are infinite and

111
00:04:34.650 --> 00:04:37.930
combine them together with observables
that are finite, all using simple commands

112
00:04:37.930 --> 00:04:40.900
without introducing a bunch of variables
to keep track of what's going on.

113
00:04:40.900 --> 00:04:43.140
Another question in the back.

114
00:04:43.140 --> 00:04:47.826
So on this example, if the observable
ended up throwing an error between 2 and

115
00:04:47.826 --> 00:04:49.400
3 would 4 be prevented?

116
00:04:49.400 --> 00:04:53.166
So what would happen is if an observable
throws an error between 2 and 3,

117
00:04:53.166 --> 00:04:56.632
the outer observable,
rather the flattened observable, would,

118
00:04:56.632 --> 00:04:59.213
imagine a little x there between the 2 and
the 3.

119
00:04:59.213 --> 00:05:00.731
And then you'd never get 3 and 4.

120
00:05:00.731 --> 00:05:04.047
The whole observable would stop because
any error inside any of the inner

121
00:05:04.047 --> 00:05:06.601
observables is forwarded up
to the outer observable and

122
00:05:06.601 --> 00:05:09.490
as soon as you get an error
the whole thing is completed.

123
00:05:09.490 --> 00:05:11.775
You're never gonna get any more data.

124
00:05:11.775 --> 00:05:15.366
So remember, an observable works this way,
you can get onNext, onNext,

125
00:05:15.366 --> 00:05:19.299
onNext infinitely, but if it doesn't,
it's gonna end with either an onErroe or

126
00:05:19.299 --> 00:05:20.098
an onComplete.

127
00:05:20.098 --> 00:05:24.583
And so if we got an error between the 2
and 3 it would be forwarded up and

128
00:05:24.583 --> 00:05:28.320
the stream would stop right
after that error's arrived.

129
00:05:28.320 --> 00:05:31.501
Does that make sense?

130
00:05:31.501 --> 00:05:33.020
Yep, question?

131
00:05:33.020 --> 00:05:37.684
&gt;&gt; Speaker 2: Will an inner observable
still be iterated over even if you call

132
00:05:37.684 --> 00:05:40.241
dispose of its outer observable?

133
00:05:40.241 --> 00:05:43.026
&gt;&gt; Jafar Husain: No, what happens is every
single time I call forEach on any of these

134
00:05:43.026 --> 00:05:46.130
inner observables, we get a bunch
of little subscriptions, right?

135
00:05:46.130 --> 00:05:48.080
When I call forEach over
the outer observable,

136
00:05:48.080 --> 00:05:51.140
I get a subscription object which I can
use to stop listening to the stream.

137
00:05:51.140 --> 00:05:53.710
But every single time I call forEach
on any of these inner observables,

138
00:05:53.710 --> 00:05:57.270
I also get another subscription object for
just that tiny little stream there.

139
00:05:57.270 --> 00:05:59.980
If you call dispose on the stream for

140
00:05:59.980 --> 00:06:02.880
the flattened observable, what it's
gonna do is it's gonna take a look.

141
00:06:02.880 --> 00:06:05.197
First it's gonna call dispose
on the outer observables.

142
00:06:05.197 --> 00:06:07.620
It's gonna say I don't
care about any more cakes.

143
00:06:07.620 --> 00:06:08.575
I don't want any slices.

144
00:06:08.575 --> 00:06:10.660
All right, so
I'm gonna stop listening for cakes.

145
00:06:10.660 --> 00:06:12.735
And then if you're currently
cutting up a cake, right,

146
00:06:12.735 --> 00:06:15.043
let's say you're the one doing
the flattening here, right?

147
00:06:15.043 --> 00:06:16.575
You're just gonna stop
cutting up that cake.

148
00:06:16.575 --> 00:06:18.080
Does that makes sense?

149
00:06:18.080 --> 00:06:21.453
So calling dispose on the subscription
on the flatten observable will end up

150
00:06:21.453 --> 00:06:25.251
calling dispose on the outer observable
subscription and whatever inner observable

151
00:06:25.251 --> 00:06:28.430
you're currently listening to,
if you are listening to one, right?

152
00:06:28.430 --> 00:06:30.332
Because you might be done
with the inner observable and

153
00:06:30.332 --> 00:06:32.685
the next inner observable
hasn't arrived yet.

154
00:06:32.685 --> 00:06:33.985
Does that makes sense?

155
00:06:33.985 --> 00:06:35.375
In this case they all overlap but

156
00:06:35.375 --> 00:06:38.444
they could arrive over time, these
observables might not overlap at all.

157
00:06:38.444 --> 00:06:39.025
Yep?

158
00:06:39.025 --> 00:06:40.315
&gt;&gt; Speaker 2: Got at least two more here.

159
00:06:40.315 --> 00:06:43.657
How does concatAll know
what pattern to follow?

160
00:06:43.657 --> 00:06:45.680
&gt;&gt; Jafar Husain: Well,
this is the pattern of concatAll.

161
00:06:45.680 --> 00:06:49.950
So, concatAll's job is to make sure that
all the slices are handed out in order.

162
00:06:49.950 --> 00:06:53.750
And so it knows that if it
receives an observable before it's

163
00:06:53.750 --> 00:06:57.530
finished with another observable, it has
to buffer them up and make sure that

164
00:06:57.530 --> 00:07:00.390
it only subscribes to the observables
in the order in which they arrive.

165
00:07:00.390 --> 00:07:01.410
And if it does that,

166
00:07:01.410 --> 00:07:04.620
naturally what'll happen is the flatten
will happen top to bottom, left to right.

167
00:07:04.620 --> 00:07:08.228
And you'll get all the items out in
the order of the collections that they

168
00:07:08.228 --> 00:07:09.365
are inside of arrive.

169
00:07:09.365 --> 00:07:11.880
Does that make sense?

170
00:07:14.443 --> 00:07:15.334
&gt;&gt; Jafar Husain: Okay, so yep.

171
00:07:15.334 --> 00:07:18.750
&gt;&gt; Speaker 2: And
then does dispose trigger the onComplete?

172
00:07:19.990 --> 00:07:22.080
&gt;&gt; Jafar Husain: No, great question.

173
00:07:22.080 --> 00:07:23.880
I really wanna nail this.

174
00:07:23.880 --> 00:07:26.950
When you call dispose on a subscription,
what you're saying to the producer is,

175
00:07:26.950 --> 00:07:31.280
what she's saying to me is, I never want
you to talk to me ever again, right?

176
00:07:31.280 --> 00:07:33.530
Which you could understand,
I'm throwing cakes at her, right?

177
00:07:33.530 --> 00:07:36.100
If I were her I would say,
dude, just go away.

178
00:07:36.100 --> 00:07:37.970
Don't ever say another thing to me.

179
00:07:37.970 --> 00:07:39.993
So that means I'm never
gonna call onComplete.

180
00:07:39.993 --> 00:07:42.000
I mean if you think about it,
it's kind of silly, right?

181
00:07:42.000 --> 00:07:45.835
You just said I never wanna get a call
back and then I say onCompleted, right?

182
00:07:45.835 --> 00:07:46.825
And you're like well, yeah, I know.

183
00:07:46.825 --> 00:07:47.950
I don't want the data, right?

184
00:07:47.950 --> 00:07:51.360
So yes, when we call dispose what
we're saying is I never wanna

185
00:07:51.360 --> 00:07:52.360
hear from you ever again.

186
00:07:52.360 --> 00:07:53.945
I don't care what method it is, right?

187
00:07:53.945 --> 00:07:55.790
Does that makes sense?

188
00:07:55.790 --> 00:07:56.370
So it is different.

189
00:07:56.370 --> 00:07:57.000
Yes, another question.

190
00:07:58.160 --> 00:08:00.770
&gt;&gt; Speaker 2: There's some confusion now
about dispose, but you might have covered.

191
00:08:00.770 --> 00:08:05.090
If dispose is called with an onCompletion
callback, nothing happens?

192
00:08:05.090 --> 00:08:06.937
&gt;&gt; Jafar Husain: Yeah,
the first thing you notice is,

193
00:08:06.937 --> 00:08:10.440
you wouldn't even bother to call
dispose when you get an onCompleted.

194
00:08:10.440 --> 00:08:13.086
Because the whole point of calling
dispose is to make sure that the producer

195
00:08:13.086 --> 00:08:14.305
never sends you another message.

196
00:08:14.305 --> 00:08:15.801
And by the time I've said onCompleted,

197
00:08:15.801 --> 00:08:18.010
you know that I'm never gonna
send you another message.

198
00:08:18.010 --> 00:08:19.510
So there's no reason to call dispose.

