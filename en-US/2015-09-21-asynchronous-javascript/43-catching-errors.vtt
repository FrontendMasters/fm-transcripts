WEBVTT

1
00:00:00.000 --> 00:00:03.990
[MUSIC]

2
00:00:03.990 --> 00:00:05.260
&gt;&gt; Jafar Husain: So can we make it better?

3
00:00:05.260 --> 00:00:11.250
Is it is it ready yet to ship,
our autocomplete box example?

4
00:00:11.250 --> 00:00:11.760
What do you think?

5
00:00:13.150 --> 00:00:14.200
How can I improve on this?

6
00:00:15.580 --> 00:00:18.480
&gt;&gt; Off Camera 1: They need
a message if there's an error or

7
00:00:18.480 --> 00:00:19.610
if there's nothing returning.

8
00:00:19.610 --> 00:00:22.920
&gt;&gt; Jafar Husain: That's true and
what I would do, what I would do

9
00:00:22.920 --> 00:00:26.470
if we weren't happening to use a JSONP API
what I would also be doing and

10
00:00:26.470 --> 00:00:29.500
what I should do is
adding an error handler.

11
00:00:29.500 --> 00:00:33.430
So let's pretend that we're not using
a JSONP because we're never gonna get,

12
00:00:33.430 --> 00:00:35.170
at least well technically
you can get an error.

13
00:00:35.170 --> 00:00:38.750
But when you're using JSONP under the hood
cuz it's attaching a script tag there's no

14
00:00:38.750 --> 00:00:40.676
way to get a message
that that error happened.

15
00:00:40.676 --> 00:00:43.456
And so let's imagine though in
practice you're probably not going to

16
00:00:43.456 --> 00:00:46.152
using JSONP in production you're
going to be using actually XHRs.

17
00:00:46.152 --> 00:00:51.074
And so let's imagine that the error
that this getWikipediaSearchResults

18
00:00:51.074 --> 00:00:54.758
could in fact on error
the observable could on error us.

19
00:00:54.758 --> 00:00:59.864
Well, what's gonna happen is even though
it's the error is going to occur here,

20
00:00:59.864 --> 00:01:04.970
it's the observable's job to forward it
on up to the first, to the forEach call.

21
00:01:06.230 --> 00:01:07.770
And so we can handle it right here.

22
00:01:07.770 --> 00:01:09.410
So this is like our catch statement.

23
00:01:09.410 --> 00:01:13.360
We don't have to put any error
handling code in here whatsoever,

24
00:01:13.360 --> 00:01:16.860
because the observable will do what
the JavaScript Runtime does for

25
00:01:16.860 --> 00:01:18.664
us with synchronous exceptions.

26
00:01:18.664 --> 00:01:21.390
The JavaScript Runtime,
every single time we call a function,

27
00:01:21.390 --> 00:01:23.110
we don't have to put try catch around it,
right?

28
00:01:23.110 --> 00:01:27.440
We can put try catch around a big block of
synchronous code and if an error occurs

29
00:01:27.440 --> 00:01:31.200
anywhere in there, it's gonna bubble up
and then we can catch it using try catch.

30
00:01:31.200 --> 00:01:34.570
The same thing is done here, but
this time by the observable and

31
00:01:34.570 --> 00:01:35.900
not the JavaScript Runtime.

32
00:01:35.900 --> 00:01:38.300
So in other words,
if the map functions, so

33
00:01:38.300 --> 00:01:42.170
the map function creates a new observable
using another observable as its source,

34
00:01:42.170 --> 00:01:46.230
and when you foreach over the map
observable it foreaches over its source.

35
00:01:46.230 --> 00:01:48.510
And if the source observable on errors,

36
00:01:48.510 --> 00:01:52.190
sends an on error message back,
it just forwards that on error along.

37
00:01:52.190 --> 00:01:57.150
And so it's only when somebody provides an
on error handler, right here, like here at

38
00:01:57.150 --> 00:02:01.530
the end with the foreach, that that error,
can be handled once and for all.

39
00:02:01.530 --> 00:02:02.700
We can just sort of catch it.

40
00:02:02.700 --> 00:02:05.610
So an error that occurs anywhere in here,
we can catch here.

41
00:02:05.610 --> 00:02:07.510
Now this is 100 times better.

42
00:02:07.510 --> 00:02:10.450
The nested callbacks because
when you have nested callbacks,

43
00:02:10.450 --> 00:02:12.240
like you get in Node.js for example,

44
00:02:12.240 --> 00:02:17.810
if an error occurs you have to be sort
of at every point handling that error.

45
00:02:17.810 --> 00:02:21.085
So, if I have a callback like this right?

46
00:02:21.085 --> 00:02:25.989
Callback API, some argument and
then I have to pass

47
00:02:25.989 --> 00:02:31.845
a callback because this is what
it looks like in Node.js..

48
00:02:31.845 --> 00:02:33.450
And then and

49
00:02:33.450 --> 00:02:36.370
I'll call some other callback cuz I want
to do one thing after another thing.

50
00:02:37.700 --> 00:02:41.930
This is how it works in Node.js.

51
00:02:41.930 --> 00:02:45.770
At every stage here I have to be prepared
for the eventuality of getting an error.

52
00:02:45.770 --> 00:02:47.490
And then I have to either forward it up,
or

53
00:02:47.490 --> 00:02:50.620
clean up any subscriptions
that I've added here.

54
00:02:50.620 --> 00:02:52.310
What if I subscribe to an event here?

55
00:02:52.310 --> 00:02:54.110
Well if an error occurs down
here I have to remember to

56
00:02:54.110 --> 00:02:55.450
unsubscribe from that event.

57
00:02:55.450 --> 00:02:58.100
It gets very,
very complicated very, very fast.

58
00:02:58.100 --> 00:03:00.750
Whereas with an observable
as soon as it on errors,

59
00:03:00.750 --> 00:03:04.840
just like when on completes it
will clean up after itself.

60
00:03:04.840 --> 00:03:07.350
So, that's an important key thing
that I may have mentioned before,

61
00:03:07.350 --> 00:03:09.940
when observable stream completes,
when it tells you on completed,

62
00:03:09.940 --> 00:03:13.240
I'm never going to send you any more data
again, well it frees your subscription.

63
00:03:13.240 --> 00:03:16.330
The same thing applies if it
tells you an error occurred.

64
00:03:16.330 --> 00:03:18.500
It will free your subscription
automatically, so

65
00:03:18.500 --> 00:03:20.040
it will clean up after itself.

66
00:03:20.040 --> 00:03:22.610
Much like when an error occurs in
the middle of a JavaScript code, and

67
00:03:22.610 --> 00:03:25.240
there's a try catch,
it unwinds the stack and

68
00:03:25.240 --> 00:03:28.040
deallocates all of the variables
that you created in your function.

69
00:03:28.040 --> 00:03:29.900
All right so
all those things are deallocated and

70
00:03:29.900 --> 00:03:32.490
then they can be garbage collected if
there's no other references to it.

71
00:03:32.490 --> 00:03:35.420
So the point is it's just like when
you're dealing with synchronous code.

72
00:03:35.420 --> 00:03:38.350
You can count on the fact that when
an error is forwarded up the chain

73
00:03:38.350 --> 00:03:41.300
all of the individual event
subscriptions that were added

74
00:03:41.300 --> 00:03:44.065
when you forged over observables
have been unsubscribed.

75
00:03:44.065 --> 00:03:45.820
Does that makes sense?

76
00:03:45.820 --> 00:03:49.390
So this dramatically decreases
the complexity of working with async code.

77
00:03:49.390 --> 00:03:52.480
If you,
it's a choice really between learning

78
00:03:52.480 --> 00:03:55.310
this definitely complicated
loopless style of programming.

79
00:03:55.310 --> 00:03:58.800
It's definitely hard to learn
that it then when you learn it.

80
00:03:58.800 --> 00:04:02.130
Or dealing with a thousand
different callback APIs and

81
00:04:02.130 --> 00:04:05.520
subscribing to subscriptions,
unhooking subscriptions, error handling,

82
00:04:05.520 --> 00:04:08.390
that's a problem you have to solve
every single time you start a new app.

83
00:04:08.390 --> 00:04:09.810
Right?
Every single time you build

84
00:04:09.810 --> 00:04:13.390
an asynchronous app, you've gotta deal
with handling all these callbacks and

85
00:04:13.390 --> 00:04:15.050
making sure you don't have memory leaks.

86
00:04:15.050 --> 00:04:19.040
Better to learn five functions and
get really good at loopless programming so

87
00:04:19.040 --> 00:04:20.690
you don't have to worry
about that ever again.

88
00:04:20.690 --> 00:04:23.530
Cuz once you've got that skill,
it's with you forever.

89
00:04:23.530 --> 00:04:24.620
That makes sense?

90
00:04:24.620 --> 00:04:26.696
The complexity we're
trying to get rid of here.

91
00:04:26.696 --> 00:04:30.218
So, let's go back, so here,
what would I put in here?

92
00:04:30.218 --> 00:04:34.652
What would be the thing, I mean, the only
reason that an error would occur here,

93
00:04:34.652 --> 00:04:36.164
is that the network error.

94
00:04:36.164 --> 00:04:37.920
Sorry, gotta question in the back.

95
00:04:37.920 --> 00:04:40.180
&gt;&gt; Off Camera 2: Yeah, I'm just asking
about can you use retry on the JSON calls?

96
00:04:40.180 --> 00:04:41.620
&gt;&gt; Jafar Husain: That was
just what I was getting to.

97
00:04:41.620 --> 00:04:42.890
I love this audience it's great.

98
00:04:44.810 --> 00:04:48.210
Absolutely because when we hit Wikipedia,
it could go down.

99
00:04:48.210 --> 00:04:50.680
I mean Wikipedia is not up
100% percent of the time.

100
00:04:50.680 --> 00:04:52.350
Netflix has awesome up time.

101
00:04:52.350 --> 00:04:53.580
We've got great up time,

102
00:04:53.580 --> 00:04:56.320
I think it's, I don't wanna quote
a number cuz it'll be wrong.

103
00:04:56.320 --> 00:04:57.790
But it's up there.

104
00:04:57.790 --> 00:05:01.330
It's definitely about 97% percent,
but that still means when you look at

105
00:05:01.330 --> 00:05:05.270
millions and millions of requests every
day a large number of requests fail.

106
00:05:05.270 --> 00:05:08.040
So rather than just throw
up our hands if one

107
00:05:08.040 --> 00:05:12.400
little server happens to be misbehaving
we should probably retry this request.

108
00:05:12.400 --> 00:05:15.905
Right?
So, now again, in this particular instance

109
00:05:15.905 --> 00:05:18.605
just remember that the JSONP is
never gonna error but in reality,

110
00:05:18.605 --> 00:05:22.185
when you're working in network, you'll
be against XHRs and it may well error.

111
00:05:22.185 --> 00:05:25.355
So although it's not really
specifically practical for this call,

112
00:05:25.355 --> 00:05:29.240
if you were doing this in
production you'd wanna do this.

113
00:05:29.240 --> 00:05:32.230
You'd want to retry because if it
errors you'll just automatically

114
00:05:32.230 --> 00:05:33.440
schedule another retry.

115
00:05:33.440 --> 00:05:37.702
And if it errors, only if it errors three
times will that error actually make it

116
00:05:37.702 --> 00:05:40.420
through down here to our error handler.

117
00:05:40.420 --> 00:05:42.370
And by the time it's failed three times,

118
00:05:42.370 --> 00:05:44.560
yeah it's a pretty good bet that
the server's down right now.

119
00:05:44.560 --> 00:05:46.690
So instead of just continuing
to hammer your server,

120
00:05:46.690 --> 00:05:49.520
which is probably not a good idea, right,
because if the server having problems

121
00:05:49.520 --> 00:05:52.210
the last thing it needs is
a million more retries.

122
00:05:52.210 --> 00:05:58.638
You wanna just say,
&gt;&gt; Jafar Husain: Maybe

123
00:05:58.638 --> 00:06:01.669
a little bit nicer language.

124
00:06:01.669 --> 00:06:03.460
&gt;&gt; Off Camera 1: [LAUGH]
&gt;&gt; Jafar Husain: I don't know, but

125
00:06:03.460 --> 00:06:04.394
you get the picture right?

126
00:06:04.394 --> 00:06:07.629
That's for cases where you're really,
it's just like you catch an error,

127
00:06:07.629 --> 00:06:09.040
you've done your best, right?

128
00:06:09.040 --> 00:06:10.790
You can't do any better.

129
00:06:10.790 --> 00:06:12.489
So, I like that answer out there.

130
00:06:14.300 --> 00:06:18.698
Is there another situation where I
wouldn't want to send a network request?

131
00:06:22.302 --> 00:06:23.420
&gt;&gt; Jafar Husain: Let's try this.

132
00:06:23.420 --> 00:06:25.050
First of all I just wanna
make sure the still works.

133
00:06:26.540 --> 00:06:29.200
I'm all fork this right now.

134
00:06:29.200 --> 00:06:31.310
And then let's run.

135
00:06:31.310 --> 00:06:33.280
&gt;&gt; Off Camera 2: Someone's
asking what's the retry rate?

136
00:06:35.830 --> 00:06:38.620
&gt;&gt; Jafar Husain: Rate?
So there's no rate per se, what happens is

137
00:06:38.620 --> 00:06:43.812
retry, so from now on I'm going to try and
anthropomorphize these operations, right?

138
00:06:43.812 --> 00:06:47.282
So I'm an observable,
let's imagine I'm an observable.

139
00:06:47.282 --> 00:06:49.924
And she is a map version of me.

140
00:06:49.924 --> 00:06:53.599
So in other words because when you call
a map you create another observable that's

141
00:06:53.599 --> 00:06:55.685
a mapped version of
the previous observable.

142
00:06:55.685 --> 00:06:56.645
Right?
So now,

143
00:06:56.645 --> 00:06:59.970
let's say you wanna take
everything that I onNext.

144
00:06:59.970 --> 00:07:03.530
And then she's gonna add one to it and
onNext it to him.

145
00:07:03.530 --> 00:07:06.030
He's gonna consume the data from her,
right?

146
00:07:06.030 --> 00:07:10.910
So what he says to her is he says,
foreach.

147
00:07:10.910 --> 00:07:13.450
And then she says to me foreach.

148
00:07:13.450 --> 00:07:18.050
And then I say on next one and
then you say to him, on next two.

149
00:07:18.050 --> 00:07:20.110
Yeah, that's good, let's keep it going.

150
00:07:20.110 --> 00:07:21.660
On next two.

151
00:07:21.660 --> 00:07:22.435
&gt;&gt; Off Camera 4: On next two.

152
00:07:22.435 --> 00:07:23.790
&gt;&gt; Jafar Husain: On next three, right?

153
00:07:23.790 --> 00:07:25.290
You're adding one to each one, right?

154
00:07:25.290 --> 00:07:26.130
On next three.

155
00:07:26.130 --> 00:07:27.160
&gt;&gt; Off Camera 4: On next four.

156
00:07:27.160 --> 00:07:27.930
&gt;&gt; Jafar Husain: Yes.

157
00:07:27.930 --> 00:07:29.300
So now let's play it differently,

158
00:07:29.300 --> 00:07:32.000
instead of the map,
she's gonna be the retry function.

159
00:07:32.000 --> 00:07:33.370
Okay, she's gonna be the retry function,
and

160
00:07:33.370 --> 00:07:35.770
you're gonna say to her,
play along with me here.

161
00:07:35.770 --> 00:07:37.180
&gt;&gt; Off Camera 1: Okay.

162
00:07:37.180 --> 00:07:37.758
&gt;&gt; Jafar Husain: What are you gonna,

163
00:07:37.758 --> 00:07:39.500
how you gonna get the data out of her,
she's an observable?

164
00:07:41.400 --> 00:07:42.330
&gt;&gt; Off Camera 1: ForEach.
&gt;&gt; Jafar Husain: ForEach.

165
00:07:42.330 --> 00:07:45.680
You say to her forEach and
I in the network request right.

166
00:07:45.680 --> 00:07:49.940
She's the retry observable that's created
when you call retry on an observable.

167
00:07:49.940 --> 00:07:51.430
So you're gonna say to me what?

168
00:07:51.430 --> 00:07:52.920
&gt;&gt; Off Camera 4: ForEach.
&gt;&gt; Jafar Husain: ForEach.

169
00:07:52.920 --> 00:07:55.742
And I'm gonna take my sweet
time going off the to network.

170
00:07:55.742 --> 00:07:57.032
And then eventually I'm to say, no error.

171
00:07:57.032 --> 00:07:59.770
And then what are you gonna say to him?

172
00:07:59.770 --> 00:08:00.386
&gt;&gt; Off Camera 4: Error.
&gt;&gt; Jafar Husain: No,

173
00:08:00.386 --> 00:08:04.192
you're the retry operation so
you've got a little counter, right?

174
00:08:04.192 --> 00:08:05.398
And so what you're going to say is,

175
00:08:05.398 --> 00:08:07.181
I'm gonna increment that
counter from zero to one.

176
00:08:07.181 --> 00:08:08.720
And then what are you gonna say to me?

177
00:08:08.720 --> 00:08:09.820
&gt;&gt; Off Camera 4: Retry.

178
00:08:09.820 --> 00:08:11.110
&gt;&gt; Jafar Husain: ForEach, right?

179
00:08:11.110 --> 00:08:14.173
So I take my time make a network request.

180
00:08:14.173 --> 00:08:17.347
[SOUND] On error.

181
00:08:17.347 --> 00:08:17.907
&gt;&gt; Off Camera 4: ForEach.

182
00:08:21.073 --> 00:08:23.256
&gt;&gt; Jafar Husain: OnNext some data.

183
00:08:23.256 --> 00:08:23.756
What do you do?

184
00:08:24.887 --> 00:08:26.670
&gt;&gt; Off Camera 4: Some data plus one.

185
00:08:26.670 --> 00:08:27.530
&gt;&gt; Jafar Husain: Well you
know I'm not pejorable.

186
00:08:27.530 --> 00:08:28.620
You were trying, right?

187
00:08:28.620 --> 00:08:31.040
So you guarantee transforming the data,
you're just sending it.

188
00:08:31.040 --> 00:08:32.960
So do we see how this works, right?

189
00:08:32.960 --> 00:08:35.150
It's just each step is
just like another person,

190
00:08:35.150 --> 00:08:36.810
you just add another person in the chain.

191
00:08:36.810 --> 00:08:38.211
When somebody says forEach,

192
00:08:38.211 --> 00:08:41.075
the forEaches cascade through
all the way to the data source.

193
00:08:41.075 --> 00:08:41.735
Right?
And so

194
00:08:41.735 --> 00:08:45.840
that's retries job is to just insert
itself into the middle operation.

195
00:08:45.840 --> 00:08:49.030
And just if it gets a few errors
it keeps incrementing a counter

196
00:08:49.030 --> 00:08:51.910
until that counter goes up
above a certain level and

197
00:08:51.910 --> 00:08:55.439
then instead of telling me forEach again
she's just going to tell him error.

198
00:08:55.439 --> 00:08:56.590
Does that makes sense?

