WEBVTT

1
00:00:00.000 --> 00:00:03.652
[MUSIC]

2
00:00:03.652 --> 00:00:05.904
&gt;&gt; Jafar Husain: You had a question?
&gt;&gt; Speaker 2: I like to understand things

3
00:00:05.904 --> 00:00:07.204
in very simple analogies, so

4
00:00:07.204 --> 00:00:09.970
I wanted to check my analogies
with you to see if it's correct.

5
00:00:11.130 --> 00:00:15.369
So an iterator function sounds to me
a lot like a paper feed on a printer.

6
00:00:15.369 --> 00:00:16.599
Is there is a piece of paper?

7
00:00:16.599 --> 00:00:17.407
Yes, print.

8
00:00:17.407 --> 00:00:18.169
Is there a piece of paper?

9
00:00:18.169 --> 00:00:19.030
Yes, print.

10
00:00:20.470 --> 00:00:22.136
So it's empty, error.
&gt;&gt; Jafar Husain: Yep.

11
00:00:22.136 --> 00:00:23.678
&gt;&gt; Speaker 2: And an observer would be

12
00:00:23.678 --> 00:00:28.535
like somebody cutting pieces of birthday
cake, handing it to the person,

13
00:00:28.535 --> 00:00:33.393
person just keeps handing pieces of
cake down to other people until they get

14
00:00:33.393 --> 00:00:35.572
the piece they keep themselves.

15
00:00:35.572 --> 00:00:40.165
They don't need it anymore, or if you're
Milton, you don't get the piece of cake.

16
00:00:40.165 --> 00:00:43.740
[LAUGH] And just get the air.
&gt;&gt; Jafar Husain: Sometimes it's tough

17
00:00:43.740 --> 00:00:45.770
to express it as metaphors
because the truth is,

18
00:00:45.770 --> 00:00:48.290
you can think of that as both a push or
pull, right.

19
00:00:48.290 --> 00:00:52.220
Really it's all about who makes the
decision when another value is delivered.

20
00:00:52.220 --> 00:00:55.135
So why don't we anthropomorphize
the iterator and

21
00:00:55.135 --> 00:00:59.347
observer pattern and why don't I be
the producer and you be the consumer.

22
00:00:59.347 --> 00:01:03.340
And let's say we're distributing cake,
and you decide you want some cake.

23
00:01:03.340 --> 00:01:04.136
So what do you do?

24
00:01:04.136 --> 00:01:07.681
If it's iterator, right, what you say
to me is, look I wanna start asking for

25
00:01:07.681 --> 00:01:11.470
cake and maybe I'm gonna distribute it
to folks, right, but I'm gonna be first.

26
00:01:11.470 --> 00:01:12.480
I'm asking you for cake.

27
00:01:12.480 --> 00:01:16.300
And so the way it works is,
you say, can I have cake, please?

28
00:01:16.300 --> 00:01:19.390
So you start, notice she's starting,
she's gonna consume the cake and

29
00:01:19.390 --> 00:01:20.110
she started, right.

30
00:01:20.110 --> 00:01:22.414
And so you say.
&gt;&gt; Speaker 2: Can I have cake, please?

31
00:01:22.414 --> 00:01:22.975
&gt;&gt; Jafar Husain: Sure,

32
00:01:22.975 --> 00:01:26.248
I cut her a piece of cake,
I hand it to her,

33
00:01:26.248 --> 00:01:29.140
right, and then I wait for you to-
&gt;&gt; Speaker 2: Can I have

34
00:01:29.140 --> 00:01:29.737
cake, please?
&gt;&gt; Jafar Husain: Right,

35
00:01:29.737 --> 00:01:31.434
cut her another piece of cake,
hand it to her.

36
00:01:31.434 --> 00:01:35.409
We're running out of cake, right,

37
00:01:35.409 --> 00:01:37.661
I hand it to her.
&gt;&gt; Speaker 3: Say it again.

38
00:01:37.661 --> 00:01:38.294
&gt;&gt; All: [LAUGH]

39
00:01:38.294 --> 00:01:39.183
&gt;&gt; Speaker 3: Now he's gonna get to run

40
00:01:39.183 --> 00:01:41.708
out of cake now, and that's what's gonna-
&gt;&gt; Jafar Husain: That's the next step,

41
00:01:41.708 --> 00:01:44.093
yeah.
&gt;&gt; Speaker 3: You can just keep asking.

42
00:01:44.093 --> 00:01:44.650
&gt;&gt; Speaker 2: Can I have cake?

43
00:01:44.650 --> 00:01:46.849
&gt;&gt; Jafar Husain: Yes, you may.

44
00:01:46.849 --> 00:01:49.890
No, I've given you some cake,
but now, I'm out of cake.

45
00:01:49.890 --> 00:01:51.980
So I'm gonna also tell you,
by the way, I'm out of cake.

46
00:01:51.980 --> 00:01:53.900
I got no more cake for you, right.

47
00:01:53.900 --> 00:01:55.850
So that's the iterator pattern.

48
00:01:55.850 --> 00:01:57.370
What is the observer pattern?

49
00:01:57.370 --> 00:01:59.860
I cut some cake and I throw it at her.

50
00:01:59.860 --> 00:02:02.090
I don't even wait for
her to be ready, right.

51
00:02:02.090 --> 00:02:03.290
She's like, okay, give me some cake.

52
00:02:03.290 --> 00:02:06.520
And I'm like, I'm just throwing cake at
her as fast as I can possibly throw it,

53
00:02:06.520 --> 00:02:08.720
whether she's ready or not, right?

54
00:02:08.720 --> 00:02:12.080
So I'm in control,
I decide when she gets cake.

55
00:02:12.080 --> 00:02:14.970
And then when I run out of cake,
I say, no more cake for you.

56
00:02:14.970 --> 00:02:16.680
At this point you're probably happy,
right?

57
00:02:16.680 --> 00:02:17.900
Nobody throwing cake at you,

58
00:02:19.830 --> 00:02:22.660
now that we've anthropomorphized
the patterns just about who's in control.

59
00:02:22.660 --> 00:02:24.580
Are we pulling, is she pulling?

60
00:02:24.580 --> 00:02:26.250
Or am I pushing?

61
00:02:26.250 --> 00:02:27.998
Does that make sense?

62
00:02:27.998 --> 00:02:31.600
But either way,
we distributed cake, right?

63
00:02:31.600 --> 00:02:32.220
We got it done.

64
00:02:32.220 --> 00:02:33.620
We got cake from point a to point b.

65
00:02:34.620 --> 00:02:38.580
So all we're doing here,
is we're adding the ability then,

66
00:02:38.580 --> 00:02:41.770
those last two functions, for
me to tell her no more cake.

67
00:02:41.770 --> 00:02:44.693
Or I guess the error would be like
I cut my finger, or something,

68
00:02:44.693 --> 00:02:45.790
something went wrong.

69
00:02:45.790 --> 00:02:48.647
So that's how I would communicate
to you that I cut my finger,

70
00:02:48.647 --> 00:02:49.981
I can't cut you any more cake.

71
00:02:49.981 --> 00:02:51.000
That's the error.

72
00:02:51.000 --> 00:02:53.640
Or we're out of cake, nothing there.

73
00:02:53.640 --> 00:02:56.426
And the first callback is just for
sending the cake.

74
00:02:56.426 --> 00:02:58.230
Does that makes sense?

75
00:02:58.230 --> 00:03:00.440
So now we kind of get what
the observable type is, right?

76
00:03:00.440 --> 00:03:03.170
It's just another way of getting
information from point a to point b,

77
00:03:03.170 --> 00:03:05.040
except you're not in control,
the producer's in control.

78
00:03:06.180 --> 00:03:08.886
And so here's the overload that you can
use if you wanna pass in an object.

79
00:03:08.886 --> 00:03:11.470
We'll be using this overload
in our examples here, okay.

80
00:03:11.470 --> 00:03:15.250
But that's from now on when I
talk about the observer object,

81
00:03:15.250 --> 00:03:16.250
this is what I'm talking about.

82
00:03:16.250 --> 00:03:20.500
An observer observes an observable, it's
the object with those three methods on it.

83
00:03:20.500 --> 00:03:22.607
So I might be mentioning
that a little bit later on.

84
00:03:22.607 --> 00:03:24.308
Another question?
&gt;&gt; Speaker 5: Are you limited to

85
00:03:24.308 --> 00:03:29.099
the onNext, onError, onCompleted,
or can you run, I guess actually on

86
00:03:29.099 --> 00:03:32.130
your next slide, I think.
&gt;&gt; Jafar Husain: That's it.

87
00:03:32.130 --> 00:03:35.000
Well, it's the same semantics that
we have with the iterator, right.

88
00:03:35.000 --> 00:03:37.580
It's like that's what we're
trying to do with this protocol.

89
00:03:37.580 --> 00:03:41.129
You can find a million ways for getting
information from point a to point b.

90
00:03:41.129 --> 00:03:44.411
But what we're trying to do is come up
with a very strictly defined way of

91
00:03:44.411 --> 00:03:47.990
getting information from point a to
point b, and it's got three semantics.

92
00:03:47.990 --> 00:03:49.984
I give you data,
I tell you an error occurred, and

93
00:03:49.984 --> 00:03:51.325
I tell you something completed.

94
00:03:51.325 --> 00:03:54.650
You'll be amazed what you can actually
do with that very simple protocol.

95
00:03:54.650 --> 00:03:57.154
Turns out it's enough to get the job done.

96
00:03:57.154 --> 00:04:01.930
Okay, so
here is the function that we use to

97
00:04:01.930 --> 00:04:07.320
convert a DOM event into an observable.

98
00:04:07.320 --> 00:04:10.600
So it's actually a static function that
we just hang off of the observable type.

99
00:04:10.600 --> 00:04:12.630
So you just call Observable.fromEvent,

100
00:04:12.630 --> 00:04:16.200
and you pass in a DOM object and
an event name.

101
00:04:16.200 --> 00:04:20.730
An observable is nothing but
an object with a forEach method.

102
00:04:20.730 --> 00:04:25.125
Every other function that I'm gonna teach
you about today, map, filter, concatAll,

103
00:04:25.125 --> 00:04:27.540
all of them are implemented
in terms of for each.

104
00:04:27.540 --> 00:04:29.193
And so if you wanna create an observable,

105
00:04:29.193 --> 00:04:31.530
all you gotta do is create
an object with a forEach method.

106
00:04:31.530 --> 00:04:34.380
Because, of course, forEach is
how you get the data out, right?

107
00:04:34.380 --> 00:04:38.380
So if you give an observer to the forEach
method, it's just gonna push data at you.

108
00:04:38.380 --> 00:04:39.140
So if you wanna create,

109
00:04:39.140 --> 00:04:41.687
yeah, another question back there?
&gt;&gt; Speaker 5: Yeah, what does the dispose

110
00:04:41.687 --> 00:04:44.732
method do when the producer
indicates it is done sending events?

111
00:04:44.732 --> 00:04:45.504
&gt;&gt; Jafar Husain: Under the hood,

112
00:04:45.504 --> 00:04:49.212
what the dispose method means is that
you're not gonna get any more callbacks.

113
00:04:49.212 --> 00:04:50.400
I'm gonna stop throwing.

114
00:04:50.400 --> 00:04:52.460
So we left out that little
piece of semantic, right,

115
00:04:52.460 --> 00:04:56.430
which is I'm throwing cake at her and
one thing she could understandably say is,

116
00:04:56.430 --> 00:04:59.140
whoa, whoa, no more cake, please!

117
00:04:59.140 --> 00:05:02.760
Right, and that's different than me
saying I have no more cake left, right?

118
00:05:02.760 --> 00:05:04.478
She's just saying,
I don't want any more cake.

119
00:05:04.478 --> 00:05:07.460
And that's effectively what the same
thing is when you call dispose on

120
00:05:07.460 --> 00:05:08.550
the subscription method.

121
00:05:08.550 --> 00:05:10.260
It's like calling removeEventListener.

122
00:05:10.260 --> 00:05:13.220
In fact, under the hood, as we'll see
here, notice down here at the bottom,

123
00:05:13.220 --> 00:05:16.010
I'm creating the subscription
object when you call forEach.

124
00:05:16.010 --> 00:05:19.360
And if you look at the definition of
dispose, what does it do under the hood?

125
00:05:19.360 --> 00:05:21.540
It unhooks from the event handler, and

126
00:05:21.540 --> 00:05:24.720
that's how we assure that no
more data is going to be sent.

127
00:05:24.720 --> 00:05:26.550
And so when we return an observable and

128
00:05:26.550 --> 00:05:30.120
somebody calls forEach and they pass
in this observer object, remember

129
00:05:30.120 --> 00:05:34.930
the observer is just an object with the
onNext, onError, and onCompleted methods.

130
00:05:34.930 --> 00:05:38.350
What's gonna happen is the observable, in
order to deliver that information to you,

131
00:05:38.350 --> 00:05:42.720
it's gonna hook up an event
handler to the DOM object.

132
00:05:42.720 --> 00:05:45.820
And whenever that handler
function gets called,

133
00:05:45.820 --> 00:05:49.130
it's going to call the onNext
method of the observer.

134
00:05:49.130 --> 00:05:52.810
So that's how it pushes
the information along to the observer.

135
00:05:52.810 --> 00:05:57.680
Now every forEach method at the end
has to return a subscription object.

136
00:05:57.680 --> 00:05:59.690
And so we create a subscription object,
which is nothing but

137
00:05:59.690 --> 00:06:01.440
an object with a dispose method.

138
00:06:01.440 --> 00:06:03.910
And the contents of that
dispose method are very simple.

139
00:06:03.910 --> 00:06:07.840
Whenever the consumer, whenever she calls
dispose, whenever she says no more cake,

140
00:06:07.840 --> 00:06:09.420
please, I just have to make sure,

141
00:06:09.420 --> 00:06:12.190
as the producer, that I never
give her another piece of cake.

142
00:06:12.190 --> 00:06:13.100
And how are we gonna do it here?

143
00:06:13.100 --> 00:06:15.120
I'm just gonna call and
removeEventListener.

144
00:06:15.120 --> 00:06:20.090
And that's how you adapt the
dom.addEventListener removeEventListener

145
00:06:20.090 --> 00:06:21.570
to an observable API.

