WEBVTT

1
00:00:00.000 --> 00:00:03.833
[MUSIC]

2
00:00:03.833 --> 00:00:05.500
&gt;&gt; Jafar Husain: Why
are observables important?

3
00:00:05.500 --> 00:00:06.880
Why are they powerful?

4
00:00:06.880 --> 00:00:07.850
And you should learn them.

5
00:00:07.850 --> 00:00:09.370
Well it's quite simple.

6
00:00:09.370 --> 00:00:10.830
Almost every UI,

7
00:00:10.830 --> 00:00:14.830
when you do some interaction with it,
you see the same progression.

8
00:00:14.830 --> 00:00:17.420
You listen for an event,
the user does something,

9
00:00:17.420 --> 00:00:20.930
then you might make an asynchronous
request right to the server and

10
00:00:20.930 --> 00:00:23.980
then maybe follow up with an animation.

11
00:00:23.980 --> 00:00:28.000
Observable is capable of modeling
all three of these things.

12
00:00:28.000 --> 00:00:32.010
So if you model all three of these actions
as an Observable in your user interface,

13
00:00:32.010 --> 00:00:35.020
you can then use the functions that I'm
gonna be teaching you guys about today

14
00:00:35.020 --> 00:00:37.620
to compose them together seamlessly.

15
00:00:37.620 --> 00:00:39.370
There with very, very little code.

16
00:00:39.370 --> 00:00:41.830
And so that's why observable
is powerful and important.

17
00:00:41.830 --> 00:00:45.650
It's capable of modeling all of the three
most common actions that you see,

18
00:00:45.650 --> 00:00:47.750
asynchronous actions,
you see in user interfaces.

19
00:00:49.290 --> 00:00:51.310
So in order to get
the observable type today,

20
00:00:51.310 --> 00:00:53.230
I'll be using the reactive
extensions library.

21
00:00:53.230 --> 00:00:54.500
it's a library that you
can grab out there.

22
00:00:54.500 --> 00:00:57.049
It's an Open Source Apache2 library,
and what it is,

23
00:00:57.049 --> 00:01:00.738
is it introduces observable type but then
it also defines all of the array methods

24
00:01:00.738 --> 00:01:04.182
I'm gonna be teaching today and
many many more over the observable types.

25
00:01:04.182 --> 00:01:08.584
So you can use those methods to compose
together observables instead of arrays.

26
00:01:11.638 --> 00:01:13.525
&gt;&gt; Jafar Husain: So this is a site
where you can go to grab it but

27
00:01:13.525 --> 00:01:16.534
it will be included in the exercise
you do later see don't need to worry

28
00:01:16.534 --> 00:01:17.250
about too much.

29
00:01:18.390 --> 00:01:21.616
Now, the problem is we have
all these old async APIs,

30
00:01:21.616 --> 00:01:24.138
these weird shaped async APIs out there.

31
00:01:24.138 --> 00:01:28.541
The DOM API is one of them and our goal,
the first thing we need to do is we

32
00:01:28.541 --> 00:01:31.900
need to be able to take all
of these weird async APIs and

33
00:01:31.900 --> 00:01:33.857
adapt them into observables.

34
00:01:33.857 --> 00:01:37.270
And the observable library comes with some
helpful functions to help you do that.

35
00:01:37.270 --> 00:01:41.110
So for example, the fromEvent function,
will take a DOM event and

36
00:01:41.110 --> 00:01:43.920
the name,
excuse me will take a DOM object and

37
00:01:43.920 --> 00:01:47.780
the name of the DOM event and
adapt it into an observable.

38
00:01:47.780 --> 00:01:50.240
And so then now you can
forEach over that observable,

39
00:01:50.240 --> 00:01:53.060
which is exactly the same as doing it
add event lesser, move event lesser.

40
00:01:53.060 --> 00:01:54.190
So let's take a living example.

41
00:01:54.190 --> 00:01:57.410
So we want to take all of
these different APIs and

42
00:01:57.410 --> 00:02:02.175
adapt them into one common interface
capable of modeling all of them.

43
00:02:02.175 --> 00:02:04.658
So here is how you subscribe to an event,

44
00:02:04.658 --> 00:02:08.470
hopefully most of us are familiar
with this process, right?

45
00:02:08.470 --> 00:02:12.291
We take an event handler and
we add it to some DOM node, in this case

46
00:02:12.291 --> 00:02:17.220
that I'm using the document but it could
be a button, it could be a link tag.

47
00:02:17.220 --> 00:02:19.730
And so we give it the name of,
I think I made a typo there,

48
00:02:19.730 --> 00:02:21.590
it should be mousemove not mousemoves, but

49
00:02:21.590 --> 00:02:25.510
we give it the name of an event and
then we associate with it a call back.

50
00:02:25.510 --> 00:02:27.730
And then every single time a mouse move or

51
00:02:27.730 --> 00:02:32.600
in this case happens that callback gets
invoked and that event object describing

52
00:02:32.600 --> 00:02:38.120
information about the mousemove is
pushed at us, right, by our callback.

53
00:02:38.120 --> 00:02:41.480
Now here's how you would do the exact
same thing with an observable.

54
00:02:42.500 --> 00:02:44.790
So, you can take any observable,

55
00:02:44.790 --> 00:02:47.840
that observable that we adopted
from a DOM event for example.

56
00:02:47.840 --> 00:02:51.260
And you can just forEach over it and
accomplish exactly the same thing.

57
00:02:51.260 --> 00:02:57.040
We're passing in a function, which gets
invoked for every item in the observable.

58
00:02:57.040 --> 00:03:00.550
And what comes out though is this
subscription object, this is where

59
00:03:00.550 --> 00:03:04.820
the observables forEach method
differs from an arrays forEach method.

60
00:03:04.820 --> 00:03:08.040
Remember that in arrays forEach method,
when you do forEach over an array it's

61
00:03:08.040 --> 00:03:10.440
gonna complete synchronously,
immediately, right?

62
00:03:10.440 --> 00:03:13.656
forEach is gonna run through all
the items in the array and finish.

63
00:03:13.656 --> 00:03:15.026
Not so with an observable,

64
00:03:15.026 --> 00:03:18.838
because remember an observable is
a collection that arrives over time and so

65
00:03:18.838 --> 00:03:23.008
when you forEach over an observable, it's
not like when you just block and wait for

66
00:03:23.008 --> 00:03:25.715
all the data to arrive and
then just block the system.

67
00:03:25.715 --> 00:03:27.370
We don't wanna block in fact.

68
00:03:27.370 --> 00:03:30.730
So what a forEach does it actually it
doesn't block it completes immediately but

69
00:03:30.730 --> 00:03:33.510
then as the observable items in
the observable arrive over time,

70
00:03:33.510 --> 00:03:35.600
that function gets invoked.

71
00:03:35.600 --> 00:03:38.339
So it's just like a DOM event
where you hook up a handler, and

72
00:03:38.339 --> 00:03:41.943
then immediately you're not blocking,
and then if those mouse moves arrive,

73
00:03:41.943 --> 00:03:43.429
it gets pushed to your handler.

74
00:03:43.429 --> 00:03:46.800
Now if your forEach over data, right,
because this goes on for a very,

75
00:03:46.800 --> 00:03:50.579
very long time, you might decide that
you don't care about that data anymore.

76
00:03:50.579 --> 00:03:53.882
You might decide just like you stop
listening for mouse moves for example,

77
00:03:53.882 --> 00:03:57.291
you might decide you don't care about
the data coming out of observable and so

78
00:03:57.291 --> 00:03:59.940
we need some way to
unsubscribe from an observable.

79
00:03:59.940 --> 00:04:01.840
And that's why the forEach
method on an observable,

80
00:04:01.840 --> 00:04:05.550
not an array,
returns this subscription object.

81
00:04:05.550 --> 00:04:08.380
So if you decide you don't want
to receive messages anymore,

82
00:04:08.380 --> 00:04:11.560
that's one thing I forgot to call out
earlier which is with an observable,

83
00:04:11.560 --> 00:04:14.180
the consumer should be able to say look,
I don't care about those messages.

84
00:04:14.180 --> 00:04:16.430
That's different than
the producer saying done.

85
00:04:16.430 --> 00:04:17.190
There's no more stream.

86
00:04:17.190 --> 00:04:18.330
There's no more data coming.

87
00:04:18.330 --> 00:04:20.420
The consumer can say, you know I
don't care if there's more data.

88
00:04:20.420 --> 00:04:22.130
I just don't listen anymore, right?

89
00:04:22.130 --> 00:04:24.650
That's the equivalent calling
remove that listener or

90
00:04:24.650 --> 00:04:28.430
here calling the dispose
method on the subscription.

91
00:04:28.430 --> 00:04:34.070
So the the previous slide and this slide
were really doing exactly the same thing,

92
00:04:34.070 --> 00:04:35.880
observable hasn't added any value.

93
00:04:35.880 --> 00:04:38.580
It's doing the same thing that
you would do with a DOM event.

94
00:04:38.580 --> 00:04:43.555
It's this next slide where we're gonna
demonstrate the value that observable

95
00:04:43.555 --> 00:04:47.204
adds over and above as a DOM API
event listener interface.

96
00:04:47.204 --> 00:04:48.189
Yep?
&gt;&gt; Speaker 2: Question,

97
00:04:48.189 --> 00:04:51.995
is there any plans to add observable
in ES7, or any of the ES.next?

98
00:04:51.995 --> 00:04:53.445
&gt;&gt; Jafar Husain: Yes,
as a matter of a fact,

99
00:04:53.445 --> 00:04:58.427
there's a proposal in place right now for
ES7, or, technically called now, ES2016,

100
00:04:58.427 --> 00:05:01.730
which would add observable
to the language.

101
00:05:01.730 --> 00:05:06.210
So this is definitely something that you
might see you in JavaScript in the future.

102
00:05:06.210 --> 00:05:10.690
It's just in the early processes, so no
guarantees, but regardless of whether it

103
00:05:10.690 --> 00:05:14.475
makes in the language or not, there's
nothing stopping you from using a library.

104
00:05:14.475 --> 00:05:16.831
&gt;&gt; Speaker 3: Just the water
bottle making a lot of noise.

105
00:05:16.831 --> 00:05:18.081
&gt;&gt; Jafar Husain: Absolutely.
&gt;&gt; Speaker 3: Sorry about that

106
00:05:25.257 --> 00:05:25.943
&gt;&gt; Jafar Husain: Yes, and so

107
00:05:25.943 --> 00:05:27.720
the answer is yes.

108
00:05:27.720 --> 00:05:30.030
There is an attempt by myself and

109
00:05:30.030 --> 00:05:32.480
a few others to get observable
into JavaScript language.

110
00:05:34.420 --> 00:05:39.010
So now we see those two missing
semantics that I talked about earlier.

111
00:05:39.010 --> 00:05:42.410
The two things that were missing from the
observable pattern that the Gang of Four

112
00:05:42.410 --> 00:05:43.565
described 20 years ago.

113
00:05:43.565 --> 00:05:47.642
Which is a way for the producer to give
the information to the consumer that

114
00:05:47.642 --> 00:05:51.259
an error occurred or a way for
the producer to give the information

115
00:05:51.259 --> 00:05:54.317
to the consumer that no more
data is arriving, right?

116
00:05:54.317 --> 00:05:58.405
So, the first event handler here is for
receiving data, right?

117
00:05:58.405 --> 00:06:01.895
That's just like the adamant listener,
callback that you hand to the DOM event.

118
00:06:01.895 --> 00:06:04.534
But these next two callbacks are optional.

119
00:06:04.534 --> 00:06:07.281
This callback receives an arrow,
remember arrow means function guys.

120
00:06:07.281 --> 00:06:09.606
I know a little bit tough to
remember the new syntax but

121
00:06:09.606 --> 00:06:12.915
all of this is just a function which
accepts an heir and then does something,

122
00:06:12.915 --> 00:06:14.897
in this case we just put
it out to the console.

123
00:06:14.897 --> 00:06:17.779
And then beneath that, there's
a function with, this is the syntax for

124
00:06:17.779 --> 00:06:19.620
a function that accepts no arguments.

125
00:06:19.620 --> 00:06:21.700
So this is a function that
accepts no arguments.

126
00:06:21.700 --> 00:06:24.410
This whole function just
gets invoked as a way for

127
00:06:24.410 --> 00:06:27.120
the producer to tell the consumer,
no more data.

128
00:06:27.120 --> 00:06:28.360
That's why it accepts no arguments.

129
00:06:28.360 --> 00:06:31.269
We just call that function to tell
the consumer no more data is arriving.

130
00:06:32.370 --> 00:06:33.370
Does that make sense?

131
00:06:33.370 --> 00:06:36.790
So here are the two missing semantics
that are there with aerator right?

132
00:06:36.790 --> 00:06:40.930
When you call next and it says done
true or when you call next it throws

133
00:06:40.930 --> 00:06:45.080
that we've now added to push streams
by this observable interface.

134
00:06:45.080 --> 00:06:48.606
So here's how you can get pushed
the information that an error happen or

135
00:06:48.606 --> 00:06:52.250
get pushed the information that well
there's no more data in the stream,

136
00:06:52.250 --> 00:06:54.010
that make sense, yeah question?

137
00:06:54.010 --> 00:06:54.944
Is this forEach?

138
00:06:54.944 --> 00:06:57.980
&gt;&gt; Speaker 2: Could you have added
any number of functions there or

139
00:06:57.980 --> 00:07:01.390
is this really specific forEach
that excepts up to three?

140
00:07:01.390 --> 00:07:04.750
&gt;&gt; Jafar Husain: Specific forEach that
except up to three cuz we're trying to

141
00:07:04.750 --> 00:07:09.000
create the same semantics for push streams
while you're receiving information pushed

142
00:07:09.000 --> 00:07:12.790
back to you that we have for iterators,
where you're pulling information out, and

143
00:07:12.790 --> 00:07:15.990
so when you're pulling information out
of an array, you can either get a value.

144
00:07:15.990 --> 00:07:19.580
You can attempt to pull information out
by calling next, and it can throw, so

145
00:07:19.580 --> 00:07:23.470
you can get an error, or you can pull
a value out and that done can be true,

146
00:07:23.470 --> 00:07:25.180
telling you that there's no more data.

147
00:07:25.180 --> 00:07:28.160
Here, we're trying to create the same
semantics the other way around.

148
00:07:28.160 --> 00:07:31.330
So if I'm pushing you information,
I should be able to also tell you

149
00:07:31.330 --> 00:07:34.220
that an error happened, or tell you
that there's no more data coming, and

150
00:07:34.220 --> 00:07:36.730
that's what those last two functions do.

151
00:07:36.730 --> 00:07:39.280
So you provide, it's like,
so think of an observable

152
00:07:39.280 --> 00:07:41.730
provisionally while you're trying to
get your head around the concept.

153
00:07:41.730 --> 00:07:43.570
Think of observable as like a DOM event,

154
00:07:43.570 --> 00:07:45.800
where you can pass three
handlers instead of one.

155
00:07:45.800 --> 00:07:48.220
And those last two handlers tell
you whether an error occurred,

156
00:07:48.220 --> 00:07:52.310
or whether there's just no more data
coming along, is that makes sense?

157
00:07:52.310 --> 00:07:55.580
So observable right now, the mental model
I want to use is all is the observable

158
00:07:55.580 --> 00:07:57.990
is like a little like an event
that's a first class object

159
00:07:57.990 --> 00:08:00.630
that you can give three event handlers to,
instead of one.

160
00:08:03.100 --> 00:08:06.190
So technically if we, this is,
it is also just shorthand for this.

161
00:08:06.190 --> 00:08:07.360
You actually give it an object.

162
00:08:07.360 --> 00:08:09.490
This is what we call an observer object.

163
00:08:09.490 --> 00:08:12.745
So those three callbacks
are actually just shorthand for

164
00:08:12.745 --> 00:08:17.852
providing an object with three callbacks,
on next, on air, and on completed, right?

165
00:08:17.852 --> 00:08:23.165
And then the observable accepts
an observer and invokes onNext,

166
00:08:23.165 --> 00:08:28.092
onNext, onNext,
onNext until it invokes either onError or

167
00:08:28.092 --> 00:08:31.220
onCompleted, is that make sense?

168
00:08:31.220 --> 00:08:33.680
It doesn't call on air and
then all uncompleted, right?

169
00:08:33.680 --> 00:08:35.530
It will either just tell
you an error occurred and

170
00:08:35.530 --> 00:08:36.940
that means that the stream has ended.

171
00:08:36.940 --> 00:08:38.800
No more data's coming
because an error occurred.

172
00:08:38.800 --> 00:08:39.990
Just like when you throw in a function.

173
00:08:39.990 --> 00:08:41.980
That function's not going to
suddenly return a value, right?

174
00:08:41.980 --> 00:08:43.940
When you throw inside the function,
it's done.

175
00:08:43.940 --> 00:08:45.780
So that's how the observable works.

176
00:08:45.780 --> 00:08:47.180
You've got an observable.

177
00:08:47.180 --> 00:08:50.849
You, if you wanna consume the data inside
of an observable, create this little

178
00:08:50.849 --> 00:08:54.428
object with three handlers, you hand
the observer object to an observable.

179
00:08:54.428 --> 00:08:57.841
The observable pushes data
into the observer object and

180
00:08:57.841 --> 00:08:59.760
by extension your callbacks.

181
00:08:59.760 --> 00:09:01.454
And it'll call onnext,

182
00:09:01.454 --> 00:09:07.000
0 to n number of times followed by
either an on air, or an uncompleted.

183
00:09:07.000 --> 00:09:09.680
It might actually never call onError
onCompleted because some stream is

184
00:09:09.680 --> 00:09:10.490
gone forever.

185
00:09:10.490 --> 00:09:12.499
MouseMoves, you would
never get on error or

186
00:09:12.499 --> 00:09:16.480
on completed call, if your observable was
just wrapping a mouseMove event, right?

187
00:09:16.480 --> 00:09:18.390
Because that's a stream
that just goes on forever.

188
00:09:18.390 --> 00:09:20.600
It's perfectly okay to have
an observable that goes on forever.

189
00:09:20.600 --> 00:09:21.390
Question?

190
00:09:21.390 --> 00:09:24.840
&gt;&gt; Speaker 2: Just question about, can
you still align it declares mouseMoves?

191
00:09:24.840 --> 00:09:27.440
Is that a new observable?

192
00:09:27.440 --> 00:09:29.230
&gt;&gt; Jafar Husain: It's right back here.

193
00:09:29.230 --> 00:09:35.240
So we actually created it by using
a function provided with the Rx library,

194
00:09:35.240 --> 00:09:38.130
to help you adapt an event
into an observable.

195
00:09:38.130 --> 00:09:40.694
I wanna see this the actual definition
of this function in just a moment.

196
00:09:40.694 --> 00:09:45.130
This fromEvent function which can
take any DOM event and event name and

197
00:09:45.130 --> 00:09:48.400
combine them and
create an observable type.

198
00:09:48.400 --> 00:09:49.640
Is that makes sense?
So it's just the same, and

199
00:09:49.640 --> 00:09:51.400
we're just adapting the interface.

200
00:09:51.400 --> 00:09:54.260
So when you call forEach on mouse moves,
under the hood,

201
00:09:54.260 --> 00:09:57.440
it's adding in the event listener to
the mouse move event on the DOM object.

202
00:09:57.440 --> 00:09:58.990
So we're gonna see how this
works in just a moment.

203
00:09:58.990 --> 00:10:00.225
Yep, do you have a question?

204
00:10:00.225 --> 00:10:00.960
Sorry.

205
00:10:00.960 --> 00:10:03.424
&gt;&gt; Speaker 2: No nothing came up online or
anything.

206
00:10:03.424 --> 00:10:09.317
Do those events or the function have to be
in that order next onError, onCompleted?

207
00:10:09.317 --> 00:10:13.399
&gt;&gt; Jafar Husain: Not here, so in this
particular overload when you're passing

208
00:10:13.399 --> 00:10:18.175
in, it allows you to pass in either
a collection of like not a collection,

209
00:10:18.175 --> 00:10:22.335
but it allows you passing either
arguments that are functions or

210
00:10:22.335 --> 00:10:24.740
you can pass in this object, right?

211
00:10:24.740 --> 00:10:26.420
So if you wanna be able to
specify them in any order,

212
00:10:26.420 --> 00:10:29.310
you can pass on the object because
that's just name value pairs there,

213
00:10:29.310 --> 00:10:31.130
so you can rearrange
that however you want.

214
00:10:31.130 --> 00:10:32.350
But today for

215
00:10:32.350 --> 00:10:35.830
most of our exercises, we'll just be using
this form where we just passed functions.

216
00:10:35.830 --> 00:10:39.120
And in this case, yes it is order
because it's based on argument order.

217
00:10:39.120 --> 00:10:40.420
So you get on the next function,

218
00:10:40.420 --> 00:10:43.030
first the air function second and
the completion function last.

219
00:10:43.030 --> 00:10:43.930
Does that make sense?

