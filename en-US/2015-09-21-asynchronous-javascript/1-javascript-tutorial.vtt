WEBVTT

1
00:00:00.011 --> 00:00:03.858
[MUSIC]

2
00:00:03.858 --> 00:00:06.844
&gt;&gt; Jafar Husain: Who has a familiar
at least with JavaScript 6, or

3
00:00:06.844 --> 00:00:08.842
what's sometimes called ES6?

4
00:00:08.842 --> 00:00:11.270
A few people here, okay.

5
00:00:11.270 --> 00:00:12.760
The language spec for

6
00:00:12.760 --> 00:00:17.776
JavaScript 6 is technically called ES 2005
now days, has just sort of been finalized.

7
00:00:17.776 --> 00:00:20.040
And you're gonna start to see
these features in browsers,

8
00:00:20.040 --> 00:00:21.440
being introduced in browsers.

9
00:00:21.440 --> 00:00:23.560
But one that I wanna call
your attention to today,

10
00:00:23.560 --> 00:00:28.000
and the one maybe if you got a late,
a really new version of browser.

11
00:00:28.000 --> 00:00:33.110
You might actually be able to use is
JavaScript now has a new shorthand syntax

12
00:00:33.110 --> 00:00:36.300
for function, so
that you can take this and

13
00:00:36.300 --> 00:00:41.320
convert it into this, much, much nicer.

14
00:00:41.320 --> 00:00:44.150
So today, we are gonna be
writing a lot of functions.

15
00:00:44.150 --> 00:00:47.070
So I happen to know the latest
version of Firefox supports this.

16
00:00:47.070 --> 00:00:48.970
So if while I'm talking here,
you wanna go and

17
00:00:48.970 --> 00:00:52.494
download Firefox because later we're gonna
be filling out interactive exercises.

18
00:00:52.494 --> 00:00:56.380
I think it would actually help you cuz
you can use this arrow function there.

19
00:00:56.380 --> 00:00:59.676
You can always use Chrome if you want to,
whatever you're comfortable with.

20
00:00:59.676 --> 00:01:03.130
I believe the Canary of Chrome
may support this already.

21
00:01:03.130 --> 00:01:07.983
So shorthand for writing functions, I'm
just gonna go through that one more time

22
00:01:07.983 --> 00:01:11.655
and get rid of all the boilerplate and
just write it like this.

23
00:01:11.655 --> 00:01:12.784
So we'll come back to this.

24
00:01:12.784 --> 00:01:16.260
But yes, so that is the end
of the JavaScript 6 tutorial.

25
00:01:16.260 --> 00:01:19.769
That's all you need to know for
this particular presentation.

26
00:01:19.769 --> 00:01:25.712
So first function of 6 that I'm
be teaching you today forEach,

27
00:01:25.712 --> 00:01:28.251
who here has used forEach?

28
00:01:28.251 --> 00:01:32.346
So you'll notice the next few functions
I'm gonna be showing you are all on

29
00:01:32.346 --> 00:01:33.200
arrays.

30
00:01:33.200 --> 00:01:36.510
In fact, today we are probably
not gonna get to covering

31
00:01:36.510 --> 00:01:38.520
any asynchronous programming whatsoever.

32
00:01:38.520 --> 00:01:42.840
We are going to be doing what I like
to call wax on, wax off exercises.

33
00:01:42.840 --> 00:01:46.685
We are going to learn something,
which may not seem as if it's related to

34
00:01:46.685 --> 00:01:50.800
asynchronous programming at first,
which is how to program without loops.

35
00:01:52.490 --> 00:01:56.309
Let's say today that if I was to say you
can't use any loops when you go into to

36
00:01:56.309 --> 00:01:57.156
work on Monday.

37
00:01:57.156 --> 00:01:58.491
Could you still get your job done?

38
00:01:58.491 --> 00:02:00.560
No while loops, no for loops.

39
00:02:00.560 --> 00:02:02.500
No do while loops, no cheating.

40
00:02:03.600 --> 00:02:05.750
How many of you feel like yeah,
I could probably get my job done?

41
00:02:05.750 --> 00:02:08.620
A couple people out there, but generally,

42
00:02:08.620 --> 00:02:11.650
I think most people are pretty
comfortable using loops, right.

43
00:02:11.650 --> 00:02:15.210
We might be a lost a little bit if our
programming language didn't have loops.

44
00:02:15.210 --> 00:02:17.552
Well, when you start
doing async programming,

45
00:02:17.552 --> 00:02:19.443
that's exactly the world you're in.

46
00:02:19.443 --> 00:02:22.334
You can't repeat an asynchronous
function with a loop, and

47
00:02:22.334 --> 00:02:26.357
I'll explain a little bit more about that
later, but that's effectively the world

48
00:02:26.357 --> 00:02:29.927
that we're in as soon as we start
doing larger asynchronous programming,

49
00:02:29.927 --> 00:02:33.080
larger synchronous programs,
loops become useless to us.

50
00:02:33.080 --> 00:02:36.320
So we need to find ways of
repeating actions, right?

51
00:02:36.320 --> 00:02:41.100
And processing streams of data as they
come in without using loops and these,

52
00:02:41.100 --> 00:02:42.970
this is what I'm gonna be
teaching you guys today.

53
00:02:42.970 --> 00:02:46.009
Programming without loops using
just a few simple functions.

54
00:02:46.009 --> 00:02:49.355
So what forEach does is
it takes a function, and

55
00:02:49.355 --> 00:02:52.962
it applies that function
to every item in an array.

56
00:02:52.962 --> 00:02:58.757
In this case, I'm just printing each
one of these items to the console,

57
00:02:58.757 --> 00:03:00.580
using console.log.

58
00:03:00.580 --> 00:03:03.850
That's relatively straightforward even if
you want you have a JavaScript Interpreter

59
00:03:03.850 --> 00:03:05.090
up right now, maybe in the console,

60
00:03:05.090 --> 00:03:07.800
you can play around with
that very example yourself.

61
00:03:07.800 --> 00:03:10.225
Unfortunately, if your browser
doesn't support error function,

62
00:03:10.225 --> 00:03:11.990
you gotta write it the long
way function x return.

63
00:03:14.810 --> 00:03:17.350
Next, I'm gonna introduce
you to the map function.

64
00:03:17.350 --> 00:03:19.330
The map function,
similar to the forEach function,

65
00:03:19.330 --> 00:03:23.090
except the difference is what map
does is it takes a function and

66
00:03:23.090 --> 00:03:29.040
applies it to every item in a collection,
creating a new value.

67
00:03:29.040 --> 00:03:32.930
And then creates a new array with all
the results of applying that function to

68
00:03:32.930 --> 00:03:33.960
each value in the array.

69
00:03:33.960 --> 00:03:35.818
So map does not change the array.

70
00:03:35.818 --> 00:03:39.450
And I wanna call your attention to this
notion, this thing very specifically.

71
00:03:39.450 --> 00:03:42.757
None of the functions I'm gonna be
showing you today change arrays.

72
00:03:42.757 --> 00:03:46.130
What they do are create new arrays.

73
00:03:46.130 --> 00:03:49.795
So what I'm gonna do is I'm gonna
apply this function to every item in

74
00:03:49.795 --> 00:03:53.467
the collection and create a new
collection containing the results.

75
00:03:53.467 --> 00:03:56.570
So if we run this, we get 2, 3, 4.

76
00:03:57.740 --> 00:03:59.340
So we didn't change the original array.

77
00:03:59.340 --> 00:04:01.380
We actually created a whole new array.

78
00:04:03.250 --> 00:04:05.710
So if you ever wanna transform
every item in a collection and

79
00:04:05.710 --> 00:04:08.880
put it into a new collection,
map's the tool for the job.

80
00:04:08.880 --> 00:04:09.990
Next we wanna talk about filter.

81
00:04:11.140 --> 00:04:12.990
Filter is very similar to map.

82
00:04:12.990 --> 00:04:15.750
It's going to apply a function
to every item in the array,

83
00:04:15.750 --> 00:04:19.650
the difference is this
function is a test function.

84
00:04:19.650 --> 00:04:21.850
Instead of transforming the value,

85
00:04:21.850 --> 00:04:25.070
it's going to apply a test
to every single value.

86
00:04:25.070 --> 00:04:30.590
And only if that value passes the test,
will it make it in to the new collection.

87
00:04:30.590 --> 00:04:33.690
So here if I run this,
we actually get an entirely new array.

88
00:04:33.690 --> 00:04:34.910
We didn't change the original array.

89
00:04:34.910 --> 00:04:38.400
I'm gonna keep hammering this
point cuz it's really important.

90
00:04:38.400 --> 00:04:39.770
We haven't changed the original array.

91
00:04:39.770 --> 00:04:44.347
We just created a new one with only
those items that pass the test.

92
00:04:44.347 --> 00:04:46.778
Does that make sense everybody?

93
00:04:46.778 --> 00:04:51.783
Great, just a quick question here
at the end of current section,

94
00:04:51.783 --> 00:04:55.620
will ES4,
I guess I can talk about this later.

95
00:04:55.620 --> 00:05:00.142
But for of lists will talk
about that when we resume.

96
00:05:00.142 --> 00:05:01.028
ConcatAll.

97
00:05:01.028 --> 00:05:03.920
So concatAll is not in JavaScript.

98
00:05:03.920 --> 00:05:07.200
It's a function we're actually gonna write
later on and add to the array object.

99
00:05:07.200 --> 00:05:09.940
But what concatAll does is very simple.

100
00:05:09.940 --> 00:05:14.520
It takes a multidimensional array and
flattens it by one dimension.

101
00:05:14.520 --> 00:05:16.810
So in this case,
we've got a two-dimensional array.

102
00:05:16.810 --> 00:05:20.610
And if I run this, it's going to get
flattened into a two-dimensional array.

103
00:05:20.610 --> 00:05:22.120
Now I wanna call your
attention to something.

104
00:05:22.120 --> 00:05:24.430
It's gonna be important later on.

105
00:05:24.430 --> 00:05:27.840
Notice what happens to an empty
array in a two-dimensional

106
00:05:27.840 --> 00:05:28.898
array when it gets flattened.

107
00:05:28.898 --> 00:05:32.629
It just disappears.

108
00:05:32.629 --> 00:05:36.137
You take an empty collection inside
of a two-dimensional collection, and

109
00:05:36.137 --> 00:05:38.510
you flatten it,
that empty collection goes away.

110
00:05:40.120 --> 00:05:42.760
We'll see why that's important later on.

111
00:05:42.760 --> 00:05:46.170
So quick review, map/filter/concatAll.

112
00:05:46.170 --> 00:05:49.610
One thing I wanna mention is concatAll
will not recursively flatten

113
00:05:49.610 --> 00:05:50.230
deep collections.

114
00:05:50.230 --> 00:05:51.639
If you have a three-dimensional
collection,

115
00:05:51.639 --> 00:05:53.161
it'll turn into
a two-dimensional collection.

116
00:05:53.161 --> 00:05:54.818
If you have a five-dimensional collection,

117
00:05:54.818 --> 00:05:57.290
it'll turn to a four-dimensional
collection, and so on and so on.

118
00:05:57.290 --> 00:06:00.610
It doesn't recursively flatten and
dimension collections.

119
00:06:00.610 --> 00:06:05.380
So map for transforming every item into
an array, every item into an array,

120
00:06:05.380 --> 00:06:07.250
into a new collection.

121
00:06:07.250 --> 00:06:10.921
Filter applies a function to every item in
the array, and only if it passes the test,

122
00:06:10.921 --> 00:06:12.331
does it make it into a new array.

123
00:06:12.331 --> 00:06:16.920
And concatAll, flattens multidimensional
collections by one dimension.

