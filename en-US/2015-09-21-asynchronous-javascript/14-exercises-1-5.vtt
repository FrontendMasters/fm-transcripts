WEBVTT

1
00:00:00.000 --> 00:00:03.869
[MUSIC]

2
00:00:03.869 --> 00:00:05.250
&gt;&gt; Jafar Husain: Open your browser.

3
00:00:05.250 --> 00:00:08.460
If you have Firefox,
I recommend you use Firefox for this.

4
00:00:08.460 --> 00:00:12.470
But if you have Chrome or
IE, it'll work just fine.

5
00:00:12.470 --> 00:00:15.910
The only reason to use Firefox
is to use the arrow function,

6
00:00:15.910 --> 00:00:16.820
which I showed you earlier.

7
00:00:16.820 --> 00:00:19.240
Which, this would be a really good
time to learn the arrow function.

8
00:00:19.240 --> 00:00:20.869
It's going to save you a lot of typing.

9
00:00:22.810 --> 00:00:23.619
Yeah?
&gt;&gt; Speaker 2: There was a question

10
00:00:23.619 --> 00:00:24.130
on the last one.

11
00:00:24.130 --> 00:00:28.660
What happens when a user will click
multiple times on the play button?

12
00:00:31.050 --> 00:00:31.960
&gt;&gt; Jafar Husain: Good question.

13
00:00:31.960 --> 00:00:35.450
Well, so yeah, implicitly here.

14
00:00:35.450 --> 00:00:40.510
The code is assuming that if
you click play multiple times,

15
00:00:40.510 --> 00:00:42.880
it will trigger a cancel
event that makes sense.

16
00:00:42.880 --> 00:00:44.930
So you're never going to get play,
play, play, cancel, cancel,

17
00:00:44.930 --> 00:00:48.330
cancel, you always get play
cancel play play cancel play.

18
00:00:48.330 --> 00:00:51.032
That's not visible in the code here,
but that's effectively how it works.

19
00:00:51.032 --> 00:00:55.009
So it's, if you press play again on a
different title, it's implicit cancel, and

20
00:00:55.009 --> 00:00:57.809
so that cancel stream doesn't
just have back buttons, but

21
00:00:57.809 --> 00:00:59.898
it also has further
newer play play events.

22
00:01:04.275 --> 00:01:06.960
&gt;&gt; Jafar Husain: So,
let's load up the learning exercises here.

23
00:01:09.920 --> 00:01:11.515
Have we all got this up?

24
00:01:18.562 --> 00:01:22.401
&gt;&gt; Jafar Husain: So, the way this
works is we've got exercises, and

25
00:01:22.401 --> 00:01:26.690
you go down here, you run them,
and no news is good news.

26
00:01:26.690 --> 00:01:30.750
If it runs and nothing happens, you can
scroll down and go to the next exercise.

27
00:01:30.750 --> 00:01:32.884
So, the first few exercises
are filled out for you.

28
00:01:32.884 --> 00:01:35.740
So, in this particular exercise,
we're just solving stuff using loops, so

29
00:01:35.740 --> 00:01:38.990
what we're doing is as we fill
these exercises, at first,

30
00:01:38.990 --> 00:01:42.050
we're gonna have you solve a problem
using the familiar loop approach,

31
00:01:42.050 --> 00:01:46.110
and then we're gonna have you solve
that same problem using one of the five

32
00:01:46.110 --> 00:01:51.140
functions for each, the few functions for
each map, produce, filter, and zip.

33
00:01:51.140 --> 00:01:52.430
So, we're going to teach
you a new function.

34
00:01:52.430 --> 00:01:53.930
How do you solve a problem with a loop?

35
00:01:53.930 --> 00:01:56.550
And then how do you solve the same
problem with a new function?

36
00:01:56.550 --> 00:01:59.000
So here,
we're using what we shouldn't be using and

37
00:01:59.000 --> 00:02:01.720
what we can't use for
Async functions, which is four.

38
00:02:01.720 --> 00:02:03.120
All right, so we've got a for loop.

39
00:02:03.120 --> 00:02:04.590
We're just looping
through a bunch of names.

40
00:02:04.590 --> 00:02:06.675
We're putting them out.

41
00:02:06.675 --> 00:02:08.046
Okay, can everybody see that?

42
00:02:11.658 --> 00:02:14.040
&gt;&gt; Jafar Husain: So
if I run this, nothing happened.

43
00:02:14.040 --> 00:02:17.170
But if I scroll down, I'll see that
the next exercise has been revealed.

44
00:02:17.170 --> 00:02:19.840
So, that first exercise is
already filled out for us.

45
00:02:22.220 --> 00:02:24.210
So we scroll down to find that the for

46
00:02:24.210 --> 00:02:28.460
loop has now been replaced with
the arrays for each method.

47
00:02:28.460 --> 00:02:31.740
So, it's the same exercise as before,
except this time we are using for

48
00:02:31.740 --> 00:02:36.000
each instead of the for loop.

49
00:02:36.000 --> 00:02:37.550
So if I run this, it works.

50
00:02:39.440 --> 00:02:42.210
I know that because the next
exercise beneath has been revealed.

51
00:02:44.960 --> 00:02:47.723
So, I want to go through
the first exercise,

52
00:02:47.723 --> 00:02:50.810
well, technically the third
exercise with you guys, right?

53
00:02:50.810 --> 00:02:52.630
It's called projecting arrays.

54
00:02:52.630 --> 00:02:55.300
So, projection is just a fancy word for
what map does,

55
00:02:55.300 --> 00:02:57.940
it takes an array of items and
takes each item and

56
00:02:57.940 --> 00:03:00.980
creates a new item and then puts all
the new items into a new collection.

57
00:03:00.980 --> 00:03:04.140
That's sometimes projecting, and
the reason why, it's taking light and

58
00:03:04.140 --> 00:03:07.940
transforming it, that's where that
idea of projection comes from, right?

59
00:03:16.270 --> 00:03:20.550
That's kind of what map does, right?

60
00:03:20.550 --> 00:03:22.470
As items come through,
it transforms them, right?

61
00:03:22.470 --> 00:03:23.780
And so, you get a new collection with each

62
00:03:23.780 --> 00:03:25.590
item transformed because it
ran through the function.

63
00:03:25.590 --> 00:03:27.200
So, that's why we call it projecting.

64
00:03:27.200 --> 00:03:30.920
But now we have an array of
Netflix new releases, for

65
00:03:30.920 --> 00:03:33.210
example, we're gonna have a bunch
of these new releases, and

66
00:03:33.210 --> 00:03:35.780
what I'd like to get out,
I don't care about all these properties.

67
00:03:35.780 --> 00:03:39.666
All I want to get out is the IV and title.

68
00:03:39.666 --> 00:03:45.170
So, what I can do is I can loop
over them using for each, right?

69
00:03:45.170 --> 00:03:47.990
So technically, the for
each method, not a loop.

70
00:03:47.990 --> 00:03:50.540
So here, it sees insert code.

71
00:03:50.540 --> 00:03:53.640
Sorry, I think so, yeah.

72
00:03:53.640 --> 00:03:55.180
Is that good enough?

73
00:03:59.696 --> 00:04:03.365
May work.

74
00:04:03.365 --> 00:04:08.680
Okay, so
we've got this video in title pairs,

75
00:04:08.680 --> 00:04:12.230
and the goal here is to
accumulate up just the idea and

76
00:04:12.230 --> 00:04:16.330
title from all these videos and
put them inside of video and title pairs.

77
00:04:17.370 --> 00:04:21.028
So, I'm gonna go new releases.

78
00:04:37.833 --> 00:04:42.051
&gt;&gt; Jafar Husain: I'm going to
create a little JSON object,

79
00:04:42.051 --> 00:04:46.686
which has just the video ID and
just the title.

80
00:04:46.686 --> 00:04:50.650
So, all we're doing is we're going
over each of these objects and

81
00:04:50.650 --> 00:04:53.280
pulling out just the ID and title, and

82
00:04:53.280 --> 00:04:57.340
putting that into a new array, and
that is what we are returning.

83
00:04:58.910 --> 00:05:02.820
Video and title pairs, empty array, for

84
00:05:02.820 --> 00:05:06.260
each over the new releases function,
add just the ID and

85
00:05:06.260 --> 00:05:12.000
title of each video to the collection,
and then that's what we return.

86
00:05:12.000 --> 00:05:13.220
So, let's give this a try.

87
00:05:14.460 --> 00:05:19.170
Let's try and call return, run, rather.

88
00:05:22.400 --> 00:05:23.120
And it worked.

89
00:05:23.120 --> 00:05:27.560
We know it worked because
stuff was revealed beneath.

90
00:05:27.560 --> 00:05:29.830
So now that we've done this operation,

91
00:05:29.830 --> 00:05:33.250
you probably recognize that
this is exactly what map does.

92
00:05:33.250 --> 00:05:36.180
Map goes through a collection,
applies some transformation to each item

93
00:05:36.180 --> 00:05:38.770
in the collection, not actually
changing it, but creating a new item,

94
00:05:38.770 --> 00:05:41.580
and then accumulating up those
new items into an array.

95
00:05:41.580 --> 00:05:44.920
So, instead of just using map,
we are actually going to implement map.

96
00:05:44.920 --> 00:05:46.686
We're going to write map ourselves.

97
00:05:46.686 --> 00:05:48.500
So, every single function
you guys use today,

98
00:05:48.500 --> 00:05:52.070
you're going to write yourself to make
sure that you actually know how it works.

99
00:05:52.070 --> 00:05:54.480
So, map already exists on array,
but we're gonna replace it,

100
00:05:54.480 --> 00:05:56.350
we're going to overwrite it.

101
00:05:56.350 --> 00:06:00.480
And notice that what we do, we've taken
the common bit of this, the pattern.

102
00:06:00.480 --> 00:06:03.260
First, we create an array to
accumulate up the results, and

103
00:06:03.260 --> 00:06:05.060
then we for each over this.

104
00:06:05.060 --> 00:06:07.900
Now, in this context,
we're adding map to the arrays prototype,

105
00:06:07.900 --> 00:06:10.830
which means we're adding
map to the array type.

106
00:06:10.830 --> 00:06:14.790
And so this, in this context, actually
means the array that we're mapping over.

107
00:06:14.790 --> 00:06:17.626
And so, since for each exists an array,
we can for each over it.

108
00:06:17.626 --> 00:06:20.796
And now all we have to do is
take the projection function,

109
00:06:20.796 --> 00:06:24.757
this is the function that we want to
apply to every item in the array, and

110
00:06:24.757 --> 00:06:26.624
apply it to the item in the array.

111
00:06:30.461 --> 00:06:33.781
&gt;&gt; Jafar Husain: Now, we're not done,
because we have to take the result that we

112
00:06:33.781 --> 00:06:36.620
transmit, and
we need to add it to the new collection.

113
00:06:38.640 --> 00:06:40.180
And that's how map works.

114
00:06:40.180 --> 00:06:43.920
That's all there is to it.

115
00:06:43.920 --> 00:06:44.680
It's a method on array,

116
00:06:44.680 --> 00:06:48.320
which accepts a function to apply to
every single item in a collection.

117
00:06:48.320 --> 00:06:52.010
It takes the results of calling that
function all those times we've put some

118
00:06:52.010 --> 00:06:54.000
into new array, and then returns that.

119
00:06:54.000 --> 00:06:55.710
That's the definition of that.

120
00:06:55.710 --> 00:06:57.320
Five lines of code.

121
00:06:57.320 --> 00:07:01.920
So, let's see if this works and run it.

122
00:07:03.330 --> 00:07:04.630
And it does.

123
00:07:04.630 --> 00:07:06.560
So, what I'm gonna do from
this point on is we're gonna

124
00:07:06.560 --> 00:07:08.470
turn these exercises over to you.

125
00:07:08.470 --> 00:07:12.360
It's really important that you
guys actually do these yourself.

126
00:07:12.360 --> 00:07:13.940
And not just watch me do them, right?

127
00:07:13.940 --> 00:07:17.460
And I'm going to do them at the end
of every section, for example, right?

128
00:07:17.460 --> 00:07:20.950
For the videos purposes, but I really want
you guys to try and do them yourself.

129
00:07:20.950 --> 00:07:22.080
Because you're not going to learn this,

130
00:07:22.080 --> 00:07:26.800
unless you really start to build those
new neural pathways by putting yourself

131
00:07:26.800 --> 00:07:29.090
at a loss by trying something very,
very differently.

132
00:07:29.090 --> 00:07:30.940
So, we're gonna start from this point on,

133
00:07:30.940 --> 00:07:32.734
is anybody having any problems
getting to this point?

134
00:07:32.734 --> 00:07:36.164
Have you filled out the map definition?

135
00:07:42.065 --> 00:07:44.045
&gt;&gt; Jafar Husain: I'm going
to teach you a coping skill,

136
00:07:44.045 --> 00:07:48.000
coding inside of text boxes and
web pages is not always convenient, right?

137
00:07:48.000 --> 00:07:49.790
One is you can copy into your
favorite text editor and

138
00:07:49.790 --> 00:07:51.330
you can finish it out there and
paste it in.

139
00:07:51.330 --> 00:07:54.225
That's one approach you can do, but
if you're having some trouble and

140
00:07:54.225 --> 00:07:55.759
you're try to figure out
why something doesn't work,

141
00:07:56.780 --> 00:08:00.060
you can always take advantage of your
browsers built in debugger tool.

142
00:08:00.060 --> 00:08:01.910
So, let's go back to
this particular example.

143
00:08:01.910 --> 00:08:03.490
Let's say I don't know why
something isn't working.

144
00:08:03.490 --> 00:08:06.930
I can always use this approach,
who's familiar with this directive?

145
00:08:08.200 --> 00:08:08.980
Right, debugger?

146
00:08:08.980 --> 00:08:12.886
If you throw debugger semi-colon
into any arbitrary piece of code,

147
00:08:12.886 --> 00:08:16.403
and then in Chrome or
in Firefox open up your developer tools.

148
00:08:19.049 --> 00:08:20.924
&gt;&gt; Jafar Husain: And then run that code.

149
00:08:23.022 --> 00:08:24.728
&gt;&gt; Jafar Husain: You will
see the code right here, and

150
00:08:24.728 --> 00:08:28.350
it will break at that particular
statement where you've written debugger.

151
00:08:28.350 --> 00:08:31.340
This is an invaluable tool
to allow you to figure out

152
00:08:31.340 --> 00:08:32.730
what's going wrong with your program.

153
00:08:32.730 --> 00:08:35.210
Cuz I can tell you, the error
messages here are not that great.

154
00:08:35.210 --> 00:08:36.130
That's on me.

155
00:08:36.130 --> 00:08:38.260
But that's why, that's definitely
something you want to do.

156
00:08:38.260 --> 00:08:41.060
So, you can step now,
I can step through and

157
00:08:41.060 --> 00:08:46.710
figure out why doesn't this thing look
like what it's supposed to look like?

158
00:08:46.710 --> 00:08:50.400
So, just open your developer tools,
whether you're using Firefox or Chrome,

159
00:08:50.400 --> 00:08:55.460
I will also demonstrate why I
told you guys to use Firefox.

160
00:08:55.460 --> 00:09:00.020
If you had Firefox, because the latest
version of Firefox is great

161
00:09:04.680 --> 00:09:08.706
because you can use the aero
functions that I showed off before.

162
00:09:08.706 --> 00:09:11.880
I'm not 100% sure if you can use
the with aero functions with Chrome,

163
00:09:11.880 --> 00:09:12.740
I don't think so.

164
00:09:13.750 --> 00:09:16.150
Is that a note right here?

165
00:09:16.150 --> 00:09:17.250
&gt;&gt; Speaker 2: Canary.

166
00:09:17.250 --> 00:09:19.180
&gt;&gt; Jafar Husain: If you have the canary
version of Chrome, you probably can.

167
00:09:21.260 --> 00:09:23.160
I'm going to fill up, notice here.

168
00:09:24.260 --> 00:09:26.770
I'm giving away the exit,
this solution exercise five here.

169
00:09:26.770 --> 00:09:30.640
But notice I'm using that arrow
instead of writing out function.

170
00:09:30.640 --> 00:09:32.008
That can be tremendous.

171
00:09:32.008 --> 00:09:33.364
Let me make that bigger, too.

172
00:09:41.213 --> 00:09:44.730
&gt;&gt; Jafar Husain: It's very, very nice
to be able to use the aero functions.

173
00:09:44.730 --> 00:09:48.082
So, if you can use them, I would highly
recommend using the floppy exercises.

174
00:09:48.082 --> 00:09:51.261
So, you can get Chrome canary
if you like Chrome, or

175
00:09:51.261 --> 00:09:54.180
you can use Firefox to do it one way or
the other.

176
00:09:54.180 --> 00:09:57.100
I think we left off on exercise three,

177
00:09:57.100 --> 00:10:00.700
which is projecting an array of videos
into an array of id and title pairs.

178
00:10:00.700 --> 00:10:02.184
Now, remember, again,
when we talk about projection,

179
00:10:02.184 --> 00:10:03.350
we're talking about the map function.

180
00:10:03.350 --> 00:10:06.870
We're talking about applying a function to
every item in a collection, transforming

181
00:10:06.870 --> 00:10:10.910
it into a new item, and then putting all
those new items in a new collection.

182
00:10:10.910 --> 00:10:15.242
So, the goal here is to use for
each, so for each over new releases,

183
00:10:15.242 --> 00:10:20.280
and then accumulate up just the ID and
title of

184
00:10:20.280 --> 00:10:24.960
each video into this video entitled pairs
array, and that's what we've done here.

185
00:10:24.960 --> 00:10:26.850
So, I'll run it.
It works.

186
00:10:26.850 --> 00:10:27.478
We'll move on.

187
00:10:27.478 --> 00:10:33.125
Now, implementing map is straightforward.

188
00:10:33.125 --> 00:10:36.775
All map does is we're adding a map
method to an array, all it's going to do

189
00:10:36.775 --> 00:10:41.275
is it is going to for each over, this,
which in this context is the array itself,

190
00:10:41.275 --> 00:10:44.865
because we're adding the map
to the array object.

191
00:10:44.865 --> 00:10:47.645
And then for every single one of
these items, so let's look, actually,

192
00:10:47.645 --> 00:10:49.785
let's look down here at the example,
I find this instructive.

193
00:10:49.785 --> 00:10:52.740
So, let's take a look at this
example execution of map.

194
00:10:52.740 --> 00:10:54.300
So here.

195
00:10:54.300 --> 00:10:56.650
This is going to be this object, right?

196
00:10:56.650 --> 00:10:59.290
It's going to be the array of one,
two, three, and

197
00:10:59.290 --> 00:11:04.070
projection function is going to
be this function right here.

198
00:11:04.070 --> 00:11:05.940
So, all we're going to
do is we're going to for

199
00:11:05.940 --> 00:11:10.718
each over our self, so,
first item in array is going to be one.

200
00:11:10.718 --> 00:11:13.850
&gt;&gt; Speaker 2: [INAUDIBLE]?

201
00:11:13.850 --> 00:11:16.240
&gt;&gt; Jafar Husain: Yeah.
So, first item in array is gonna be one,

202
00:11:16.240 --> 00:11:20.130
then item array is gonna be two, and
then item in array gonna be three.

203
00:11:20.130 --> 00:11:25.271
So, all we have to do is apply
the projection function to the item

204
00:11:25.271 --> 00:11:30.630
in the array, and that will run
this function right here with X.

205
00:11:30.630 --> 00:11:32.690
Substitute it as one the first time.

206
00:11:32.690 --> 00:11:33.950
X is two the second time.

207
00:11:33.950 --> 00:11:37.630
And X is three the third time, and
take whatever comes out as the result and

208
00:11:37.630 --> 00:11:38.890
add it to the results array.

209
00:11:38.890 --> 00:11:43.290
And then finally,
return the results array, and

210
00:11:43.290 --> 00:11:46.970
that's how we get two, three, four.

211
00:11:46.970 --> 00:11:47.690
So, that's how map works.

212
00:11:49.250 --> 00:11:51.860
So, let's solve the same
problem we solved before.

213
00:11:51.860 --> 00:11:55.930
We wanna get the ID in title, from
every single video in the new releases,

214
00:11:55.930 --> 00:11:58.584
except this time we're going to
use map instead of for each.

215
00:12:00.370 --> 00:12:02.310
Well, okay, so it's there already.

216
00:12:02.310 --> 00:12:03.920
But that's effectively how we do it.

217
00:12:03.920 --> 00:12:08.840
We take the map function, we pass in a
function which accepts the video, and then

218
00:12:08.840 --> 00:12:14.334
simply returns a JSON object containing
only the ID and title, and we're done.

219
00:12:17.260 --> 00:12:20.620
So, as you can see already, there's a lot
less boilerplate with map and using for

220
00:12:20.620 --> 00:12:22.298
each and accumulating up objects, right?

221
00:12:22.298 --> 00:12:24.630
So, we're going to run that, great, works.

