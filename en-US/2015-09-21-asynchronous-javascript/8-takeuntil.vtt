WEBVTT

1
00:00:00.000 --> 00:00:03.922
[MUSIC]

2
00:00:03.922 --> 00:00:06.442
&gt;&gt; Jafar Husain: Another metaphor
of thinking about what happens

3
00:00:06.442 --> 00:00:10.683
with flattening strategies, and I love
using this metaphor, because we all hate

4
00:00:10.683 --> 00:00:14.936
traffic, is to imagine you're on the
highway, and we've got three lanes open.

5
00:00:14.936 --> 00:00:17.526
And then there's some accident or
some construction, and

6
00:00:17.526 --> 00:00:19.165
they have to close two of the lanes.

7
00:00:19.165 --> 00:00:22.930
The concatAll strategy, which isn't
very good to use for traffic for

8
00:00:22.930 --> 00:00:25.960
obvious reasons, because each one of
those lanes is an infinite observable,

9
00:00:27.625 --> 00:00:29.965
would say, okay, everybody on
the left lane go through first and

10
00:00:29.965 --> 00:00:33.725
then everybody in the right lane and
then everybody on those two lanes open.

11
00:00:33.725 --> 00:00:37.105
You never use that in traffic because,
well, there's never gonna

12
00:00:37.105 --> 00:00:39.725
stop being traffic on the left lane,
they're both two infinite observables.

13
00:00:40.905 --> 00:00:43.645
You wouldn't use concatAll as
a traffic managing strategy, however,

14
00:00:43.645 --> 00:00:48.670
this next function I'm gonna
show you guys is merge all.

15
00:00:50.070 --> 00:00:51.230
Wait, I lied.

16
00:00:51.230 --> 00:00:52.860
Sorry, we're gonna come back to that.

17
00:00:52.860 --> 00:00:55.389
I wanna show you all the functions you
need to know in order to understand

18
00:00:55.389 --> 00:00:57.085
the drag and
drop example I showed you earlier.

19
00:00:57.085 --> 00:01:00.225
And so I've showed you concatAll in
the drag and drop example, but I also

20
00:01:00.225 --> 00:01:03.980
showed you this takeUntil function, which
I didn't explain very clearly, right.

21
00:01:03.980 --> 00:01:09.340
What a takeUntil function does is it takes
an observable that's a source observable,

22
00:01:09.340 --> 00:01:13.590
and it takes an observable
that's a stop observable, and

23
00:01:13.590 --> 00:01:18.050
every single time the source observable
emits something, it forwards that on.

24
00:01:18.050 --> 00:01:22.140
But as soon as the stop observable emits
a single value, whether it's on next,

25
00:01:22.140 --> 00:01:27.290
on error, or on, well, on next or
on completed, it completes

26
00:01:27.290 --> 00:01:30.824
the overall observable that's taking these
two observables and putting them together.

27
00:01:30.824 --> 00:01:34.020
So takeUntil creates a new observable,
just like map and filter.

28
00:01:34.020 --> 00:01:35.870
And it doesn't change any observables.

29
00:01:35.870 --> 00:01:38.200
It takes a source observable and
a stop observable,

30
00:01:38.200 --> 00:01:42.640
creates a new observable with all of
the data from the source observable, and

31
00:01:42.640 --> 00:01:47.270
completes that observable as soon as
the stop observable fires a value.

32
00:01:47.270 --> 00:01:48.110
And under the hood,

33
00:01:48.110 --> 00:01:51.610
unsubscribes by calling dispose
on both the source and stop.

34
00:01:51.610 --> 00:01:52.187
Does that make sense?

35
00:01:52.187 --> 00:01:54.901
So that's how we can take
two infinite observables and

36
00:01:54.901 --> 00:01:58.770
combine them together to create
an observable that ends.

37
00:01:58.770 --> 00:02:00.896
And this is the use case that the Gang
of Four weren't really thinking about.

38
00:02:00.896 --> 00:02:03.988
They were like, well, you've got
these infinite observables, I mean,

39
00:02:03.988 --> 00:02:05.080
what can you do with that?

40
00:02:05.080 --> 00:02:07.780
You can really just listen to it
until you're not interested anymore,

41
00:02:07.780 --> 00:02:09.690
until you call dispose.

42
00:02:09.690 --> 00:02:15.530
This function right here is why I haven't
unsubscribed from an event in five years.

43
00:02:15.530 --> 00:02:16.780
I have not typed the words,

44
00:02:16.780 --> 00:02:21.470
remove event listener in five years,
cuz I don't need to.

45
00:02:21.470 --> 00:02:23.490
This is, it's really important
you understand this function,

46
00:02:23.490 --> 00:02:26.490
because this is the first big
mental step we're gonna make,

47
00:02:26.490 --> 00:02:28.500
to thinking about asynchronous
programming very differently.

48
00:02:29.550 --> 00:02:32.460
With a DOM event listener, all you
can do is, you can say, whoa, whoa,

49
00:02:32.460 --> 00:02:33.774
whoa, unsubscribe, right.

50
00:02:34.940 --> 00:02:35.780
That's what you have to do.

51
00:02:35.780 --> 00:02:39.790
You have to say look,
I don't want any more data, unsubscribe.

52
00:02:39.790 --> 00:02:42.580
Another way of thinking about that,
a different way of thinking about it is,

53
00:02:42.580 --> 00:02:47.010
well, I'm gonna take the stream of data
that I want, and under some condition,

54
00:02:47.010 --> 00:02:50.090
I'm gonna create another observable
that's gonna fire when some other

55
00:02:50.090 --> 00:02:51.200
asynchronous condition.

56
00:02:51.200 --> 00:02:52.310
Sorry, let me rewind.

57
00:02:52.310 --> 00:02:54.260
Here's how you usually do with events.

58
00:02:54.260 --> 00:02:58.090
So you add an event listener to an event,
and then you'll start consuming the data.

59
00:02:58.090 --> 00:02:59.840
But then at some point,

60
00:02:59.840 --> 00:03:03.300
when some event happens, cuz that's
how everything happens in JavaScript.

61
00:03:03.300 --> 00:03:04.470
Some event happens.

62
00:03:04.470 --> 00:03:06.900
You'll decide that you don't want
the data in that event anymore.

63
00:03:06.900 --> 00:03:08.900
And then you'll call removeEventListener.

64
00:03:08.900 --> 00:03:10.430
That's how we code today.

65
00:03:10.430 --> 00:03:13.762
But notice that we're gonna call
removeEventListener when some event

66
00:03:13.762 --> 00:03:16.436
happens, cuz that's how
things happen in JavaScript.

67
00:03:16.436 --> 00:03:20.498
Somebody mouse clicks, a timer fires, some
asynchronous entry happens, and then under

68
00:03:20.498 --> 00:03:24.080
certain condition, we're going to decide
we want to unhook from that event and

69
00:03:24.080 --> 00:03:26.080
stop listening to it anymore.

70
00:03:26.080 --> 00:03:31.080
Well, why don't we just take the source
event, the thing we're interested in,

71
00:03:31.080 --> 00:03:35.298
and use takeUntil and combine it
together with the stop collection.

72
00:03:35.298 --> 00:03:37.166
And then we don't have to
add a bunch of handlers and

73
00:03:37.166 --> 00:03:39.670
state to track whether we're
listening to something anymore.

74
00:03:39.670 --> 00:03:43.180
We can just declaratively take these
two streams, combine them together, and

75
00:03:43.180 --> 00:03:46.770
cause the source to end
when we want it to end.

76
00:03:46.770 --> 00:03:48.620
That's different than unsubscribing,
right.

77
00:03:48.620 --> 00:03:51.810
When I call subscription.dispose,
I'm saying, I don't want the data anymore.

78
00:03:51.810 --> 00:03:56.520
But if I take my source collection and
I use takeUntil to combine it together

79
00:03:56.520 --> 00:03:59.730
with whatever event happens when I'm
supposed to stop listening, well,

80
00:03:59.730 --> 00:04:03.450
then I've created an observable
that completes when I want it to.

81
00:04:04.490 --> 00:04:07.200
Don't unsubscribe from events.

82
00:04:07.200 --> 00:04:10.750
Create streams of data that
complete when you want them to.

83
00:04:11.990 --> 00:04:15.131
That's the big mental leap
we're going to make today.

84
00:04:15.131 --> 00:04:18.495
We're not going to bother to write
state machines, like, if this happened,

85
00:04:18.495 --> 00:04:22.117
then unhook my event listener, and then if
that happened, hook my event listener up.

86
00:04:22.117 --> 00:04:23.538
We're not going to do that anymore.

87
00:04:23.538 --> 00:04:27.011
We are going to create new
events from existing events, and

88
00:04:27.011 --> 00:04:31.393
we're going to create those events such
that they end when we want them to.

89
00:04:31.393 --> 00:04:32.245
Got a question in the back.

90
00:04:32.245 --> 00:04:35.590
&gt;&gt; Speaker 2: Yeah, we got a few,
here that are piling up.

91
00:04:35.590 --> 00:04:38.980
Will on completion even trigger
when observable is running in time

92
00:04:38.980 --> 00:04:39.740
asynchronously?

93
00:04:41.140 --> 00:04:43.548
&gt;&gt; Jafar Husain: Yes.
On completion can always fire, and

94
00:04:43.548 --> 00:04:46.953
that just indicates that
no more data will arrive.

95
00:04:46.953 --> 00:04:48.444
&gt;&gt; Speaker 2: You kinda clarified,

96
00:04:48.444 --> 00:04:53.680
we will not know when the stream will
complete as it's waiting in time?

97
00:04:53.680 --> 00:04:55.300
&gt;&gt; Jafar Husain: Yeah, you have no
idea when observable's going to end.

98
00:04:55.300 --> 00:04:58.840
If you're the consumer, and
you're getting information pushed to you,

99
00:04:58.840 --> 00:05:02.604
if I'm pushing information to her, she
has no inkling of when I'm going to stop

100
00:05:02.604 --> 00:05:04.533
throwing cakes at her, she has no idea.

101
00:05:04.533 --> 00:05:08.371
It's only when she receives an explicit
message, I'm done, no more cake,

102
00:05:08.371 --> 00:05:09.801
that she knows for certain.

103
00:05:09.801 --> 00:05:11.023
Any other questions?

104
00:05:11.023 --> 00:05:15.065
&gt;&gt; Speaker 2: The takeUntil emit on
complete as soon as the stop collection

105
00:05:15.065 --> 00:05:16.728
emits the first item, or

106
00:05:16.728 --> 00:05:20.627
will it wait until the stop
collection emits on complete?

107
00:05:20.627 --> 00:05:22.296
&gt;&gt; Jafar Husain: At the very first item,
good question.

108
00:05:22.296 --> 00:05:26.500
So the question is, will the on complete
happen on the observable that comes out

109
00:05:26.500 --> 00:05:29.698
takeUntil as soon as as the stop
collection calls on next, or

110
00:05:29.698 --> 00:05:32.734
will it wait till the stop
collection calls on complete?

111
00:05:32.734 --> 00:05:33.864
And the answer is, on next.

112
00:05:33.864 --> 00:05:38.088
As soon as anything comes out of that
stop collection, on next or on complete,

113
00:05:38.088 --> 00:05:40.073
it will complete the overall value.

114
00:05:40.073 --> 00:05:42.071
Now, if the stop
collection threw an error,

115
00:05:42.071 --> 00:05:44.740
the overall observable
would end with that error.

116
00:05:44.740 --> 00:05:47.360
We always forward errors along,
we never swallow errors.

117
00:05:47.360 --> 00:05:51.273
So if either the source collection or
stop collection, like, errored,

118
00:05:51.273 --> 00:05:55.200
called on error, then the observable
that we've created will on error.

119
00:05:56.260 --> 00:05:56.900
Yep?

120
00:05:56.900 --> 00:06:00.460
&gt;&gt; Speaker 3: Would the source collection
keep feeding data that's now just kind of

121
00:06:00.460 --> 00:06:04.270
being ignored, or will it know to
stop feeding data, or don't we care?

122
00:06:04.270 --> 00:06:07.177
&gt;&gt; Jafar Husain: Well, what happens is,
as soon as the takeUntil operator,

123
00:06:07.177 --> 00:06:11.234
which has got these two observables that's
combining together for somebody else.

124
00:06:11.234 --> 00:06:12.135
Think of it that way,

125
00:06:12.135 --> 00:06:14.600
each of these functions are like
one step along the chain.

126
00:06:14.600 --> 00:06:17.760
Think of it as a guy who's got an
observable and he's pulling items out and

127
00:06:17.760 --> 00:06:20.240
translating them and
handing them off like a hot potato, right.

128
00:06:20.240 --> 00:06:22.560
So takeUntil has got two observables.

129
00:06:22.560 --> 00:06:23.430
And it's listening,

130
00:06:23.430 --> 00:06:26.007
every time a source item comes through,
it just hands that along.

131
00:06:26.007 --> 00:06:28.961
But then as soon as a stop item
comes along, what does it do?

132
00:06:28.961 --> 00:06:33.290
Well, it calls on completed to the next
guy and says, no more data is arriving.

133
00:06:33.290 --> 00:06:37.050
But then it takes the subscription objects
it's got from the source collection and

134
00:06:37.050 --> 00:06:39.120
the stop collection, and it calls dispose.

135
00:06:39.120 --> 00:06:41.794
Well, in the case of where
the source collection sends a value,

136
00:06:41.794 --> 00:06:43.684
it'll call dispose on the stop collection.

137
00:06:43.684 --> 00:06:46.322
Because there's no need to call
dispose on the source collection,

138
00:06:46.322 --> 00:06:47.870
because it's just said on completed.

139
00:06:47.870 --> 00:06:48.727
No need to say, hey,

140
00:06:48.727 --> 00:06:52.082
I don't want anymore data, if I just told
you I'm not gonna give you anymore data.

141
00:06:52.082 --> 00:06:55.526
So stop collection, because it hasn't
said, I'm done, we would turn around and

142
00:06:55.526 --> 00:06:58.787
we would call dispose on that, cuz we're
not interested in the data anymore.

143
00:06:58.787 --> 00:07:00.171
Cuz we just told the guy down the line,

144
00:07:00.171 --> 00:07:01.828
we're never going to
give you anymore data.

145
00:07:01.828 --> 00:07:02.365
Does that make sense?

146
00:07:02.365 --> 00:07:04.807
&gt;&gt; Speaker 2: Yeah, that's great.

147
00:07:04.807 --> 00:07:05.320
&gt;&gt; Jafar Husain: Another question?

148
00:07:05.320 --> 00:07:06.785
&gt;&gt; Speaker 2: I think you
just covered this here.

149
00:07:06.785 --> 00:07:09.980
The stop collection value is irrelevant?

150
00:07:09.980 --> 00:07:11.888
It'll just trigger a done for
the source observable?

151
00:07:11.888 --> 00:07:12.627
&gt;&gt; Jafar Husain: Yes, totally irrelevant.

152
00:07:12.627 --> 00:07:13.736
Totally gets lost.

153
00:07:13.736 --> 00:07:16.995
Doesn't get forwarded along
the stop collection value.

154
00:07:16.995 --> 00:07:20.850
So again, I want to put
an exclamation point on this.

155
00:07:20.850 --> 00:07:24.860
We're going to learn today how to
declaratively create event streams

156
00:07:24.860 --> 00:07:27.290
that end when we want them to end.

157
00:07:27.290 --> 00:07:30.600
Not have to build state machines
where in certain conditions,

158
00:07:30.600 --> 00:07:33.170
we unhook explicitly
using our event listener.

159
00:07:33.170 --> 00:07:39.483
And we're going to get code that's a lot
simpler with very few moving pieces, okay.

160
00:07:39.483 --> 00:07:41.790
So just like the mouse drag
example we saw earlier.

161
00:07:41.790 --> 00:07:43.298
Yeah, another question?

162
00:07:43.298 --> 00:07:46.810
&gt;&gt; Speaker 2: Yeah, could you hook up
an auto complete box that might listen for

163
00:07:46.810 --> 00:07:49.865
return from the server until
a new keypress event occurs?

164
00:07:51.140 --> 00:07:51.950
&gt;&gt; Jafar Husain: Absolutely.

165
00:07:51.950 --> 00:07:54.790
Yes, you could, what he's talking
about is an auto complete,

166
00:07:54.790 --> 00:07:56.519
is he asking me to do it or
is he asking whether can be done?

167
00:07:57.770 --> 00:07:59.680
&gt;&gt; Speaker 2: Yeah,
asking if it could be done.

168
00:07:59.680 --> 00:08:00.480
&gt;&gt; Jafar Husain: Absolutely.
So let's say we're

169
00:08:00.480 --> 00:08:03.160
feeding an auto complete box with
results from the server, and

170
00:08:03.160 --> 00:08:05.230
maybe it's like arriving
over a web socket.

171
00:08:05.230 --> 00:08:07.522
And a web socket is a great example
of something that we can adapt to

172
00:08:07.522 --> 00:08:08.810
an observable interface, right?

173
00:08:08.810 --> 00:08:10.340
As information is coming
over the web socket,

174
00:08:10.340 --> 00:08:12.490
we're going to call on next,
on next, on next.

175
00:08:12.490 --> 00:08:15.663
And we might fill up the list, but
then as soon as somebody presses a key,

176
00:08:15.663 --> 00:08:17.599
we could just stop and
close the web socket.

177
00:08:17.599 --> 00:08:18.640
Does that make sense?

178
00:08:18.640 --> 00:08:20.100
Because I'm the producer.

179
00:08:20.100 --> 00:08:23.566
As soon as she says to me explicitly,
I don't want any more data,

180
00:08:23.566 --> 00:08:27.663
that's an opportunity for me as the
producer to potentially cancel anything

181
00:08:27.663 --> 00:08:29.820
that I'm doing to produce data for her.

182
00:08:29.820 --> 00:08:32.422
Let's say I've got an order out for
more cakes.

183
00:08:32.422 --> 00:08:36.733
I'm relentless, I'm ordering more cakes
for her and she's like whoa, whoa.

184
00:08:36.733 --> 00:08:39.424
Well, I'm just going to pick up
the phone and cancel that order.

185
00:08:39.424 --> 00:08:42.188
And that turns out to
be a very useful thing.

186
00:08:42.188 --> 00:08:46.382
Because a lot of the times, the operations
that we execute in order to produce

187
00:08:46.382 --> 00:08:48.705
asynchronous data can be very expensive,

188
00:08:48.705 --> 00:08:51.884
particularly when you're
talking about IO operations.

189
00:08:51.884 --> 00:08:53.980
Let's say I've got an open web socket.

190
00:08:53.980 --> 00:08:54.860
That's not cheap.

191
00:08:54.860 --> 00:08:56.610
Web sockets aren't free.

192
00:08:56.610 --> 00:08:57.955
They take resources.

193
00:08:57.955 --> 00:09:00.947
If she says she doesn't want any more
cake, I'm going to close that web socket,

194
00:09:00.947 --> 00:09:04.033
because I might be getting the cake from
some other entirely different web server.

195
00:09:04.033 --> 00:09:05.543
Mixing my metaphors,
but you get the point.

196
00:09:05.543 --> 00:09:07.361
Yeah?

197
00:09:07.361 --> 00:09:12.074
&gt;&gt; Speaker 2: Can you use
concatAll on the stop collection?

198
00:09:12.074 --> 00:09:15.269
&gt;&gt; Jafar Husain: concatAll on this
stop collection or concatAll-

199
00:09:15.269 --> 00:09:18.253
&gt;&gt; Speaker 2: For the stop collection.

200
00:09:18.253 --> 00:09:21.182
&gt;&gt; Jafar Husain: It's a little
bit of a confusing question,

201
00:09:21.182 --> 00:09:25.540
because concatAll only works on
an observable of observables.

202
00:09:25.540 --> 00:09:27.344
And in this case, we don't have
an observable of observables,

203
00:09:27.344 --> 00:09:28.069
we just have two observables.

204
00:09:29.110 --> 00:09:31.250
That's not the same as
an observable of observables.

205
00:09:31.250 --> 00:09:32.500
With an observable of observables,

206
00:09:32.500 --> 00:09:36.060
you have a stream of
observables arriving over time.

207
00:09:36.060 --> 00:09:38.190
Here, I just got two observables
in my hot little hands.

208
00:09:38.190 --> 00:09:40.170
And I'm listening to one,
well, I'm listening to both.

209
00:09:40.170 --> 00:09:42.820
And as soon as the source collection
sends data, I move it along.

210
00:09:42.820 --> 00:09:46.610
But if he's asking if you can use
concatAll on the result of a takeUntil,

211
00:09:46.610 --> 00:09:49.570
yes cuz you can use concatAll
on every observable.

212
00:09:49.570 --> 00:09:52.750
It's safe to use concatAll on
the result of a takeUntil,

213
00:09:52.750 --> 00:09:57.072
cuz the whole point of a takeUntil is
that that observable might at least end.

214
00:09:57.072 --> 00:09:59.812
So because that observable might
at least end, we never know for

215
00:09:59.812 --> 00:10:02.020
certain if an observable is going to end.

216
00:10:02.020 --> 00:10:03.730
But in this case, we're using TakeUntil.

217
00:10:03.730 --> 00:10:07.110
So presumably, we expect under
certain circumstances, it might end.

218
00:10:07.110 --> 00:10:09.362
Then it's totally safe to
use that in a concatAll.

219
00:10:09.362 --> 00:10:10.256
Does that makes sense?

220
00:10:10.256 --> 00:10:12.761
But you would never want to use
an infinite observable in a concatAll,

221
00:10:12.761 --> 00:10:14.940
because you'll never get to
the observables down the line.

