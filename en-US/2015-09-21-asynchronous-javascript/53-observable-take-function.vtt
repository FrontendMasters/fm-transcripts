WEBVTT

1
00:00:00.000 --> 00:00:04.372
[MUSIC]

2
00:00:04.372 --> 00:00:09.419
&gt;&gt; Speaker 2: Question on how would
you have different things like

3
00:00:09.419 --> 00:00:14.205
object.observe and
mutation observers Good question.

4
00:00:14.205 --> 00:00:17.035
&gt;&gt; Jafar Husain: Well I mean there's
a galaxy of different callback APIs and

5
00:00:17.035 --> 00:00:18.995
the browser's only adding more of them.

6
00:00:18.995 --> 00:00:21.215
In fact, we can actually play
around with object observe and

7
00:00:21.215 --> 00:00:23.175
wrap it as an observable.

8
00:00:23.175 --> 00:00:27.045
There is a very cool
example of doing just that.

9
00:00:28.650 --> 00:00:30.530
What's the fastest way to get this done?

10
00:00:30.530 --> 00:00:34.760
I've actually got an example up on
GitHub of using object observe and

11
00:00:34.760 --> 00:00:37.940
observable, sorry, first of all,
who's familiar with object observe?

12
00:00:39.972 --> 00:00:40.690
&gt;&gt; Jafar Husain: Not many people.

13
00:00:40.690 --> 00:00:44.930
So there's a feature coming in
JavaScript 7 Were you can walk up to

14
00:00:44.930 --> 00:00:49.160
any JavaScript object and observe to
see if its properties have changed.

15
00:00:49.160 --> 00:00:54.070
So you can get a call back if somebody
changes a property on a JavaScript object

16
00:00:54.070 --> 00:00:59.090
and I believe I actually have it just
happen to be running it right now

17
00:00:59.090 --> 00:01:01.280
in Chrome so because

18
00:01:03.010 --> 00:01:06.970
I've got my future features,
I forget what exactly it's called.

19
00:01:06.970 --> 00:01:08.310
Expanded web features,

20
00:01:08.310 --> 00:01:11.420
flag turned on in Chrome because I
like to play around with these things.

21
00:01:11.420 --> 00:01:14.769
So if I go to a console we can find
out if I've actually got this,

22
00:01:16.130 --> 00:01:20.570
cuz it's a cool API to
try out objects.observe.

23
00:01:20.570 --> 00:01:23.520
So you can see it's already
in Chrome If you go and

24
00:01:23.520 --> 00:01:25.990
load your chrome you'll
turn on a particular flag.

25
00:01:25.990 --> 00:01:31.610
I think it's right here, experiments.

26
00:01:34.650 --> 00:01:36.310
No not in there.

27
00:01:36.310 --> 00:01:37.080
We can Google it.

28
00:01:37.080 --> 00:01:37.580
No?

29
00:01:39.330 --> 00:01:41.990
I believe it's under about:flags.

30
00:01:41.990 --> 00:01:44.720
So if you go about:flags in Chrome.

31
00:01:44.720 --> 00:01:45.220
Here we go.

32
00:01:47.670 --> 00:01:50.480
Enable experimental web platform features.

33
00:01:50.480 --> 00:01:51.970
So for
those of you who can't see that out there,

34
00:01:53.730 --> 00:01:55.980
enable experimental web platform features.

35
00:01:55.980 --> 00:01:57.010
I believe that is the one.

36
00:01:57.010 --> 00:01:59.450
So if you enable that and
restart your Chrome.

37
00:01:59.450 --> 00:02:02.220
And you start typing in console,
you should be able to see object.observe.

38
00:02:02.220 --> 00:02:09.180
And we can check out how
object.observe works.

39
00:02:13.418 --> 00:02:14.540
&gt;&gt; Jafar Husain: I'm
gonna create an object.

40
00:02:31.323 --> 00:02:32.424
&gt;&gt; Jafar Husain: Does
everybody see the code I just,

41
00:02:32.424 --> 00:02:34.210
I'm going to bump this font size up.

42
00:02:34.210 --> 00:02:35.500
Everybody see the code I just wrote there?

43
00:02:36.640 --> 00:02:38.430
So I created a plain old object.

44
00:02:38.430 --> 00:02:41.640
I gave it a single property, and
then I called Object.observe and

45
00:02:41.640 --> 00:02:46.070
I passed in the object and
I passed in an event handler

46
00:02:46.070 --> 00:02:51.120
that is going to fire whenever we
change any properties on that object.

47
00:02:51.120 --> 00:02:52.500
That makes sense?

48
00:02:52.500 --> 00:02:53.410
So let's try it.

49
00:02:53.410 --> 00:02:59.100
I'm gonna go,
x.name= "Ben." And it worked..

50
00:02:59.100 --> 00:02:59.940
See the console?

51
00:02:59.940 --> 00:03:03.300
We wrote out and
we actually get a list of changes and

52
00:03:03.300 --> 00:03:05.520
notice it says that name changed.

53
00:03:05.520 --> 00:03:12.000
It has the old value which is "Jim." And
I believe the object, yeah is basically,

54
00:03:12.000 --> 00:03:15.510
the object is just the, the object
that we passed in the object observe.

55
00:03:15.510 --> 00:03:18.240
So it gives us the old value and
it tells us which property changed.

56
00:03:18.240 --> 00:03:20.360
So that's kind of cool, right?

57
00:03:23.040 --> 00:03:25.400
&gt;&gt; Speaker 2: Until you eat up all your
memory with a bunch of observers, yeah.

58
00:03:26.540 --> 00:03:29.757
&gt;&gt; Jafar Husain: Well it could definitely
be memory intensive to use object observe,

59
00:03:29.757 --> 00:03:32.646
and that is actually one of
the criticisms of object observe.

60
00:03:32.646 --> 00:03:35.670
So this is great for listening to one
property,but what if you have a property

61
00:03:35.670 --> 00:03:38.785
with an object inside of it and it's got
a property with an object inside it, and

62
00:03:38.785 --> 00:03:40.717
it's got a property with
an object inside of it?

63
00:03:40.717 --> 00:03:44.060
You can't just listen at the top
level with object observe you have

64
00:03:44.060 --> 00:03:46.925
to listen to every single
object underneath and that, so

65
00:03:46.925 --> 00:03:50.147
if you want to listen to a path
changing a series of properties and

66
00:03:50.147 --> 00:03:53.968
then a change to any of those series of
properties you need to recursively add

67
00:03:53.968 --> 00:03:57.830
object observe and
yes that does turn out to be expensive.

68
00:03:57.830 --> 00:04:02.940
Some MVC frameworks like this style
of synchronizing models and views and

69
00:04:02.940 --> 00:04:07.880
so they want to use object observe
right but there is probably

70
00:04:07.880 --> 00:04:12.580
a fair criticism to say this is perhaps
a heavy way of doing object observation.

71
00:04:12.580 --> 00:04:16.100
And some other MVC frameworks for example
use a different approach which is diffing.

72
00:04:16.100 --> 00:04:17.420
Angular uses a diffing approach.

73
00:04:17.420 --> 00:04:18.960
As soon as an event handler happens.

74
00:04:18.960 --> 00:04:21.390
It takes a look at an old copy of
the model and a new copy of the model.

75
00:04:21.390 --> 00:04:23.190
And then goes through and compares them.

76
00:04:23.190 --> 00:04:25.990
That's very different than listening for
fine grain changes.

77
00:04:25.990 --> 00:04:27.860
Well to be fair object
observe is somewhat course.

78
00:04:27.860 --> 00:04:30.900
Because if I change 15
properties all at once.

79
00:04:30.900 --> 00:04:33.180
It will only call that callback once.

80
00:04:33.180 --> 00:04:36.200
And it will list in the array all of
the properties that have changed.

81
00:04:36.200 --> 00:04:39.650
But that still doesn't solve the problem
of multiple event handlers at every level

82
00:04:39.650 --> 00:04:40.930
of your object observe.

83
00:04:40.930 --> 00:04:45.070
I have an example online of using
observable to do just that.

84
00:04:45.070 --> 00:04:48.360
So, it allows you to observe a path,
and it uses observable,

85
00:04:48.360 --> 00:04:51.020
and it's actually a pretty
cool code sample.

86
00:04:51.020 --> 00:04:54.170
But under the hood, basically what
it does, is it uses switch latest.

87
00:04:54.170 --> 00:04:59.480
So let's say I set an object
instead of my name Jim.

88
00:04:59.480 --> 00:05:03.370
Is this big enough for
folks at home to see, you think.

89
00:05:03.370 --> 00:05:04.050
&gt;&gt; Speaker 2: Yeah.

90
00:05:04.050 --> 00:05:04.550
&gt;&gt; Jafar Husain: Okay.

91
00:05:07.030 --> 00:05:08.960
So first of all how would I unobserved.

92
00:05:10.330 --> 00:05:12.990
Remember async APIs is usually have
some way of saying no I don't want

93
00:05:12.990 --> 00:05:13.670
more data anymore.

94
00:05:13.670 --> 00:05:14.980
Anymore.

95
00:05:14.980 --> 00:05:19.027
Well there's a handy [LAUGH]
Object.unobserve method.

96
00:05:20.556 --> 00:05:22.706
&gt;&gt; Jafar Husain: Now unfortunately,
I can no longer unobserve this,

97
00:05:22.706 --> 00:05:24.970
because I didn't capture this handler.

98
00:05:24.970 --> 00:05:28.090
So I can't even pass it back to unobserve,
which is a great example of why

99
00:05:28.090 --> 00:05:31.920
that's a very annoying API, right, that
this whole idea of like, I'm going to pass

100
00:05:31.920 --> 00:05:34.420
a handler, but I gotta remember
the handler, cuz I gotta pass it back.

101
00:05:34.420 --> 00:05:36.650
It's the same as add that listener,
or remove that listener.

102
00:05:36.650 --> 00:05:41.710
So, the question was how would I wrap
object observe as an observable, right?

103
00:05:41.710 --> 00:05:44.210
So, why don't we just do that?

104
00:05:44.210 --> 00:05:47.020
Because I hate using the object
observed unobserved API,

105
00:05:47.020 --> 00:05:50.974
I find those API's very annoying because
what I really like to use is observable,

106
00:05:50.974 --> 00:05:54.318
because I like to use things like take and
til or take one for example.

107
00:05:54.318 --> 00:05:56.495
Let's say I want to listen for
the next change to an object, right?

108
00:05:56.495 --> 00:06:01.859
One of the operators we
didn't write right here and

109
00:06:01.859 --> 00:06:05.486
I think we should write, is take.

110
00:06:05.486 --> 00:06:06.261
Take, right?

111
00:06:06.261 --> 00:06:10.611
We never wrote take and we tried out
take in our exercises very briefly and

112
00:06:10.611 --> 00:06:14.820
what it does take says right
if she's the take observable.

113
00:06:14.820 --> 00:06:16.470
And let's say she has a number,

114
00:06:16.470 --> 00:06:18.650
which is the maximum number
of items she's gonna take.

115
00:06:18.650 --> 00:06:23.260
If I on next her one, two, and three, by
the time I get, if her maximum number is

116
00:06:23.260 --> 00:06:26.690
three, she's gonna say to him,
on completed after three.

117
00:06:26.690 --> 00:06:31.380
And more importantly, you're also gonna
dispose of my subscription, right?

118
00:06:31.380 --> 00:06:33.510
So you're gonna say to me,
I don't want anymore data.

119
00:06:33.510 --> 00:06:34.590
I've got all the data I need.

120
00:06:34.590 --> 00:06:36.800
And you're gonna say to him, on completed.

121
00:06:36.800 --> 00:06:37.880
So let's write that function.

122
00:06:40.800 --> 00:06:43.508
&gt;&gt; Jafar Husain: So some of these
implementations are a little more

123
00:06:43.508 --> 00:06:45.701
complicated to do fully correctly, but

124
00:06:45.701 --> 00:06:49.280
I'm cheating a little bit here
to give you the overall idea.

125
00:06:49.280 --> 00:06:51.210
There's a couple of things
to call your attention to.

126
00:06:51.210 --> 00:06:56.160
For example, when you call an onNext on
an observer, if you're an observable and

127
00:06:56.160 --> 00:06:57.780
you call an observers onNext.

128
00:06:57.780 --> 00:06:59.180
It could throw.

129
00:06:59.180 --> 00:07:01.720
And so actually to be fully correct,
you should be trying and

130
00:07:01.720 --> 00:07:05.580
catching because if somebody is observe,
if I call onNext on you and

131
00:07:05.580 --> 00:07:10.705
you throw, right, I should then
turn around and call onAir, right?

132
00:07:10.705 --> 00:07:14.200
I should be trapping errors
because if nobody's around,

133
00:07:14.200 --> 00:07:18.010
with it with async code, your code
might not be on the stack at all.

134
00:07:18.010 --> 00:07:21.440
So you can't just let a throw on
error propagate up with throw.

135
00:07:21.440 --> 00:07:26.440
It's observable's job to catch errors,
and then push them with onError, right?

136
00:07:26.440 --> 00:07:28.750
So if I'm being fully correct,
I would do that.

137
00:07:28.750 --> 00:07:31.210
We just don't have time and
it would complicate the code.

138
00:07:31.210 --> 00:07:32.700
So we'll just focus on take.

139
00:07:32.700 --> 00:07:34.100
So what does take have to do?

140
00:07:34.100 --> 00:07:39.130
Take has to return an observable that
only on nexts a certain number of items.

141
00:07:39.130 --> 00:07:41.240
So the first thing we do, obviously
is we got to return an observable.

142
00:07:46.958 --> 00:07:47.909
&gt;&gt; Jafar Husain: And
to create an observable,

143
00:07:47.909 --> 00:07:49.400
all we have to do is
define a forEach function.

144
00:07:50.740 --> 00:07:53.320
So what's this observable gonna do?

145
00:07:53.320 --> 00:07:54.840
What's it gonna do when
you forEach over it?

146
00:07:54.840 --> 00:07:58.750
Well I'm gonna do this because we
need to make sure to always capture

147
00:07:58.750 --> 00:08:00.070
the source observable.

148
00:08:00.070 --> 00:08:01.930
That's what this line of code does right.

149
00:08:01.930 --> 00:08:06.690
When you call take on observable, that
take observable needs to still have access

150
00:08:06.690 --> 00:08:11.390
to the source so that it can call forEach
on me so that I can send it data.

151
00:08:11.390 --> 00:08:16.480
So we've trapped a reference to
the source observable and we're creating

152
00:08:16.480 --> 00:08:21.620
the take observable So
just like every other example.

153
00:08:23.798 --> 00:08:25.110
&gt;&gt; Jafar Husain: Well,
almost like every other example.

154
00:08:25.110 --> 00:08:26.940
In the previous example, we did this.

155
00:08:26.940 --> 00:08:30.800
I'm actually gonna start doing something
that I know is wrong just to demonstrate

156
00:08:30.800 --> 00:08:31.330
what's going on.

157
00:08:31.330 --> 00:08:32.610
So we're gonna pass in.

158
00:08:32.610 --> 00:08:35.360
We're gonna call forEach on the source,
right?

159
00:08:35.360 --> 00:08:37.130
That's the very first thing.

160
00:08:37.130 --> 00:08:39.720
If he forEachs her, she has to forEach me.

161
00:08:39.720 --> 00:08:42.120
So, we're going to call
forEach on the source.

162
00:08:42.120 --> 00:08:44.790
We're going to pass in the onNext handler.

163
00:08:48.000 --> 00:08:50.350
And when it receives a value,
what's going to happen?

164
00:08:50.350 --> 00:08:53.590
Well, notice take needs a counter.

165
00:08:53.590 --> 00:08:56.850
We need to keep a counter inside of
the take observable because if after we've

166
00:08:56.850 --> 00:09:02.480
delivered a certain number on next,
We want to stop delivering on next, right?

167
00:09:02.480 --> 00:09:03.850
We want to say on completed.

168
00:09:03.850 --> 00:09:07.770
So we're going to kick declare
a counter to keep track

169
00:09:07.770 --> 00:09:12.630
of how many on next we've delivered
inside of the take observable

170
00:09:12.630 --> 00:09:16.130
how many on next methods we call and
we'll initialize it to zero.

171
00:09:16.130 --> 00:09:23.110
So when an onNext comes through, well we
wanna first check to see if the counter.

172
00:09:24.500 --> 00:09:27.610
What I'm actually gonna do is I'm
actually gonna forward on the onNext.

173
00:09:31.787 --> 00:09:33.600
&gt;&gt; Jafar Husain: So
now she's onNexting him.

174
00:09:34.720 --> 00:09:35.340
Right.

175
00:09:35.340 --> 00:09:38.940
She's for reaching me I'm onNext to
her and she's on next to him and

176
00:09:38.940 --> 00:09:39.820
incrementing a counter.

177
00:09:43.129 --> 00:09:49.770
&gt;&gt; Jafar Husain: Okay, but what happens
if the counter gets up to the number?

178
00:09:50.840 --> 00:09:55.650
What she would like to do is
say to me no more data, right?

179
00:09:55.650 --> 00:09:58.390
She wants to say never send me another
value because I don't want to send him any

180
00:09:58.390 --> 00:10:00.310
more values he only asked for three.

181
00:10:00.310 --> 00:10:02.810
So I'm not listening to how she
going to say to me no more data.

182
00:10:05.220 --> 00:10:08.970
How do you stop listening for items that
you get out of miserable when you call for

183
00:10:08.970 --> 00:10:10.040
each on it.

184
00:10:10.040 --> 00:10:11.280
&gt;&gt; Speaker 3: Unsubscribe.

185
00:10:11.280 --> 00:10:12.980
&gt;&gt; Jafar Husain: Unsubscribe did I hear?

186
00:10:12.980 --> 00:10:14.580
Yeah.
How do you unsubscribe?

187
00:10:14.580 --> 00:10:15.200
&gt;&gt; Speaker 3: You dispose.

188
00:10:15.200 --> 00:10:16.890
&gt;&gt; Jafar Husain: You dispose
of the subscription.

189
00:10:16.890 --> 00:10:21.130
Now we see that she's actually just
returning my subscription to you.

190
00:10:21.130 --> 00:10:22.490
But that's not good enough now.

191
00:10:22.490 --> 00:10:26.310
She needs to hold onto that subscription,
so that she can call dispose on it.

192
00:10:27.370 --> 00:10:30.900
So we're gonna assign
the subscription to a variable.

193
00:10:35.517 --> 00:10:41.450
&gt;&gt; Jafar Husain: And she's still gonna
return that subscription object.

194
00:10:45.240 --> 00:10:51.552
But she will call subscription.dispose

195
00:10:51.552 --> 00:10:57.110
as soon as that number of on next she's
delivered, gets up to her maximum number.

196
00:10:59.830 --> 00:11:00.890
So she'll tell me,

197
00:11:00.890 --> 00:11:06.720
no more data please, as soon as I give her
in this case maybe three on next, right?

198
00:11:06.720 --> 00:11:08.460
And what else does she have to do?

199
00:11:11.870 --> 00:11:14.690
I'm gonna add the typical boilerplate
which is that you're always forwarding

200
00:11:14.690 --> 00:11:16.738
along the on air in the on
completion messages.

201
00:11:16.738 --> 00:11:21.331
All right.

202
00:11:30.724 --> 00:11:32.001
&gt;&gt; Jafar Husain: So
we forward along errors so

203
00:11:32.001 --> 00:11:35.369
if I tell her error she tells him error,
and we forward along completions.

204
00:11:43.840 --> 00:11:45.630
But what does she have to do?

205
00:11:45.630 --> 00:11:47.220
What's the last missing piece here?

206
00:11:48.220 --> 00:11:50.600
So let's say she's
a take three observable,

207
00:11:50.600 --> 00:11:52.590
she's only going to take three.

208
00:11:52.590 --> 00:11:56.510
You call for each on her,
right do me a favor for each.

209
00:11:56.510 --> 00:11:57.710
She calls forEach on me.

210
00:12:00.680 --> 00:12:01.310
&gt;&gt; Speaker 4: forEach.

211
00:12:01.310 --> 00:12:03.470
&gt;&gt; Jafar Husain: [LAUGH] I say onNext one.

212
00:12:03.470 --> 00:12:04.420
Right?
You're a take three.

213
00:12:04.420 --> 00:12:05.540
The maximum you take is three.

214
00:12:05.540 --> 00:12:06.510
I call onNext one.

215
00:12:06.510 --> 00:12:07.770
&gt;&gt; Speaker 4: onNext one.

216
00:12:07.770 --> 00:12:08.490
&gt;&gt; Jafar Husain: onNext two.

217
00:12:08.490 --> 00:12:09.270
&gt;&gt; Speaker 4: onNext two.

218
00:12:09.270 --> 00:12:09.810
&gt;&gt; Jafar Husain: onNext three.

219
00:12:09.810 --> 00:12:11.010
&gt;&gt; Speaker 4: onNext three.

220
00:12:11.010 --> 00:12:12.210
&gt;&gt; Jafar Husain: onNext four.

221
00:12:12.210 --> 00:12:14.305
Well, after the onNext three,
what are you supposed to say to him?

222
00:12:14.305 --> 00:12:15.450
&gt;&gt; Speaker 4: Oncomplete.

223
00:12:15.450 --> 00:12:20.470
&gt;&gt; Jafar Husain: Yes and you have to tell
me don't give me any more data right.

224
00:12:20.470 --> 00:12:23.090
So we've only done one of those things
here we've got the section of code

225
00:12:23.090 --> 00:12:24.030
which says.

226
00:12:24.030 --> 00:12:25.960
You tell me don't give me any more data.

227
00:12:25.960 --> 00:12:29.582
What's the last piece that we have
to do that we haven't done here.

228
00:12:29.582 --> 00:12:34.809
All right, she has to tell you
something very explicitly sorry?

229
00:12:34.809 --> 00:12:36.300
&gt;&gt; Speaker 4: Dispose.

230
00:12:36.300 --> 00:12:39.230
&gt;&gt; Jafar Husain: No that we did right
here,that's you saying no more data.

231
00:12:39.230 --> 00:12:40.638
&gt;&gt; Speaker 5: You have to call onComplete.

232
00:12:40.638 --> 00:12:42.710
&gt;&gt; Jafar Husain: Right,
how are you gonna tell him that it's done?

233
00:12:42.710 --> 00:12:44.200
You have to call onCompleted.

234
00:12:44.200 --> 00:12:48.200
So if the counter gets up to that number,
right,

235
00:12:48.200 --> 00:12:50.310
you need to tell him that no
more data's ever coming ever.

236
00:12:51.610 --> 00:12:54.300
And as soon as she calls
subscription.dispose

237
00:12:54.300 --> 00:12:57.060
I'm not gonna say onAir or onCompleted.

238
00:12:57.060 --> 00:12:58.780
As soon as you dispose of a subscription,

239
00:12:58.780 --> 00:13:01.050
you're never getting another
message from me again.

240
00:13:02.460 --> 00:13:04.450
And so now, we have take

