WEBVTT

1
00:00:00.000 --> 00:00:03.731
[MUSIC]

2
00:00:03.731 --> 00:00:07.215
&gt;&gt; Jafar Husain: So what I'd like to do
now is I'd like to cover a couple small

3
00:00:07.215 --> 00:00:08.190
concepts.

4
00:00:08.190 --> 00:00:09.230
One is a subject.

5
00:00:09.230 --> 00:00:10.540
Has any of you ever heard
of a subject before?

6
00:00:11.850 --> 00:00:15.770
Well let's say you wanna fire an event
when somebody calls a method.

7
00:00:15.770 --> 00:00:18.530
Let's say you wanna create an observable
that fires every single time somebody

8
00:00:18.530 --> 00:00:21.070
calls a method on a class for example.

9
00:00:21.070 --> 00:00:22.340
Because that can sometimes be useful.

10
00:00:22.340 --> 00:00:25.330
Let's say you create an object
in JavaScript with a function.

11
00:00:25.330 --> 00:00:28.310
And every single time somebody calls
that function you want an observable

12
00:00:28.310 --> 00:00:29.933
that fires because you might want
to do something asynchronous.

13
00:00:31.350 --> 00:00:32.700
Well, there's no real way to do that.

14
00:00:32.700 --> 00:00:37.160
We don't have to adapt a an event,
a DOM event, to an observable.

15
00:00:37.160 --> 00:00:41.240
We know how to adapt a call it
typical callback API to an observable.

16
00:00:41.240 --> 00:00:42.973
But what if you had an object and

17
00:00:42.973 --> 00:00:45.918
you wanted to create your
own custom event, right?

18
00:00:45.918 --> 00:00:50.010
Such that, when somebody calls a method or
does something, that event fires.

19
00:00:50.010 --> 00:00:53.228
Now you could use addEventListener() or
you could expose addEventListener() or

20
00:00:53.228 --> 00:00:54.360
removeEventListener().

21
00:00:54.360 --> 00:00:56.930
But you can also use a subject.

22
00:00:56.930 --> 00:01:00.220
Let me show you a subject
in just a moment here.

23
00:01:00.220 --> 00:01:03.334
And we are going to be implementing
observable from the ground up.

24
00:01:03.334 --> 00:01:07.382
So as I do this, we're going to sort
of learn what's going on into the hood.

25
00:01:07.382 --> 00:01:11.039
It's not that the interesting thing
is the magic to make all of this

26
00:01:11.039 --> 00:01:13.401
stuff happen is really not that much code.

27
00:01:13.401 --> 00:01:17.850
So all the stuff that you've been seeing
happen take until concatALL, map, filter.

28
00:01:17.850 --> 00:01:21.160
There's a surprisingly
little amount of code here.

29
00:01:21.160 --> 00:01:24.730
And that really comes down to what this
is it's not about writing a lot of code.

30
00:01:24.730 --> 00:01:27.650
It's about thinking differently
about events and that's what's gonna

31
00:01:27.650 --> 00:01:30.120
cause you to be successful when you
take on asynchronous programming

32
00:01:30.120 --> 00:01:31.500
just thinking differently.

33
00:01:31.500 --> 00:01:34.190
Having a little twist on the way
that you already think about events.

34
00:01:34.190 --> 00:01:37.531
So let's start by defining
the observable type, so to speak,

35
00:01:37.531 --> 00:01:39.180
the observable constructor.

36
00:01:39.180 --> 00:01:43.360
Now remember observable only
has one method called forEach.

37
00:01:43.360 --> 00:01:47.640
So that's actually something that I'm
just gonna except as a constructor.

38
00:01:47.640 --> 00:01:53.990
And I'm just gonna add it as
a private member on the observable.

39
00:01:55.140 --> 00:01:58.870
Now remember that observable allows you to
call forEach in a whole bunch of different

40
00:01:58.870 --> 00:02:00.020
ways, right?

41
00:02:00.020 --> 00:02:03.590
You can either pass in an observer
object with an onNext and onError, or

42
00:02:03.590 --> 00:02:04.280
onCompleted.

43
00:02:04.280 --> 00:02:07.590
Or you can just pass in three function
arguments one after the other.

44
00:02:07.590 --> 00:02:09.119
So we'd like to support the same thing.

45
00:02:19.615 --> 00:02:22.877
&gt;&gt; Jafar Husain: So
if the typeof the first argument,

46
00:02:22.877 --> 00:02:28.270
the first function argument,
&gt;&gt; Jafar Husain: Is a function,

47
00:02:28.270 --> 00:02:33.497
we'll know that they're passing in
functions instead of an observer object.

48
00:02:33.497 --> 00:02:37.511
So now I'm just gonna
call the stop forEach.

49
00:02:41.699 --> 00:02:45.037
&gt;&gt; Jafar Husain: Actually I can make
this a little more readable still.

50
00:02:45.037 --> 00:02:48.842
Remember the three handlers that
get passed into an observable.

51
00:02:54.848 --> 00:02:56.419
&gt;&gt; Jafar Husain: All right,
so if onNext is a function,

52
00:02:56.419 --> 00:02:58.410
there's only two possibilities here.

53
00:02:58.410 --> 00:03:02.415
That the very first argument is that
object with the three onNext, onError and

54
00:03:02.415 --> 00:03:05.520
onCompleted properties or
they're passing in functions.

55
00:03:05.520 --> 00:03:08.152
So they're passing in the onNext function,
the onError function, and

56
00:03:08.152 --> 00:03:09.197
the onCompleted function.

57
00:03:09.197 --> 00:03:12.422
So we're just gonna check to see if
the very first parameters of function.

58
00:03:12.422 --> 00:03:16.739
In which case we are gonna build
the observer object ourselves out of

59
00:03:16.739 --> 00:03:18.869
the functions that they pass in.

60
00:03:20.441 --> 00:03:23.235
&gt;&gt; Jafar Husain: Now remember
onError is optional.

61
00:03:23.235 --> 00:03:27.145
And so if it's not passed in, we're just
gonna define an empty function for it.

62
00:03:27.145 --> 00:03:29.168
So that when we work with an observer,

63
00:03:29.168 --> 00:03:34.218
it's always got,
&gt;&gt; Jafar Husain: A function for

64
00:03:34.218 --> 00:03:35.372
onError and onCompleted.

65
00:03:35.372 --> 00:03:37.465
Even if that that function does nothing.

66
00:03:37.465 --> 00:03:39.315
Does everybody understand
what this code does?

67
00:03:39.315 --> 00:03:42.870
I just wanna clarify to make sure
it understand what's going on here.

68
00:03:42.870 --> 00:03:47.430
What if this code effectively does it
says if onError is null substitute it for

69
00:03:47.430 --> 00:03:50.570
this empty function right here and
the same thing on the next line.

70
00:03:50.570 --> 00:03:53.880
If onCompleted is null, we'll
substitute it for this empty function.

71
00:03:53.880 --> 00:03:55.170
So that's one possibility.

72
00:03:55.170 --> 00:03:57.639
The one possibility is that they're
passing in three functions.

73
00:03:57.639 --> 00:04:00.696
The other possibilities are actually
passing in as an observer object in which

74
00:04:00.696 --> 00:04:01.910
we don't have anything to do.

75
00:04:01.910 --> 00:04:05.621
We're just going to forward on I
forget my return statement here.

76
00:04:07.682 --> 00:04:12.621
&gt;&gt; Jafar Husain: We're just gonna forward
on the call to our private forEach

77
00:04:12.621 --> 00:04:14.207
implementation.

78
00:04:14.207 --> 00:04:17.898
And we're gonna pass in onNext,
which in this case is an observer.

79
00:04:29.244 --> 00:04:31.855
&gt;&gt; Jafar Husain: All right, so those are
the two ways you can call an observable.

80
00:04:31.855 --> 00:04:34.212
You can call an observable this way,

81
00:04:43.427 --> 00:04:44.987
&gt;&gt; Jafar Husain: Same by passing in three

82
00:04:44.987 --> 00:04:48.271
functions or
you can call an observable this way.

83
00:04:58.300 --> 00:05:00.087
&gt;&gt; Jafar Husain: Right, and
so we wanna support both and

84
00:05:00.087 --> 00:05:02.650
that's all this public
forEach function does.

85
00:05:02.650 --> 00:05:04.468
It just make sure that we support both.

86
00:05:04.468 --> 00:05:07.100
So if somebody passes in
an observer object right here.

87
00:05:07.100 --> 00:05:11.350
We just use it and pass it to our
internal definition of forEach.

88
00:05:11.350 --> 00:05:15.540
And if somebody passes a just
three functions, one of the other.

89
00:05:15.540 --> 00:05:19.920
We construct an observer object with the
onNext, onError, and onCompleted method.

90
00:05:19.920 --> 00:05:23.210
And then we pass of that to
the internal definition forEach.

91
00:05:23.210 --> 00:05:26.540
So when you create an observable, right?

92
00:05:26.540 --> 00:05:27.480
We're going to do it like this.

93
00:05:27.480 --> 00:05:29.269
We're just going to go new Observable.

94
00:05:32.030 --> 00:05:35.920
And remember, what's the only function
that's defined on observable?

95
00:05:35.920 --> 00:05:37.850
The only function you have to
define to define an observable?

96
00:05:40.400 --> 00:05:41.020
&gt;&gt; Speaker 2: forEach.

97
00:05:41.020 --> 00:05:41.750
&gt;&gt; Jafar Husain: forEach.

98
00:05:41.750 --> 00:05:44.700
So that's the only thing we have to
pass into the observable constructor

99
00:05:44.700 --> 00:05:45.760
in order to create an observable.

100
00:05:45.760 --> 00:05:49.086
So we actually just have to pass in
an inline definition of forEach.

101
00:05:51.972 --> 00:05:56.240
&gt;&gt; Jafar Husain: So
let's create a function which will fire.

102
00:05:56.240 --> 00:05:58.500
Actually, let's create,
remember our fromEvent function?

103
00:05:58.500 --> 00:06:01.640
Let's create the fromEvent function, so
that we can work with Dom events and

104
00:06:01.640 --> 00:06:03.320
can turn them into observables.

105
00:06:03.320 --> 00:06:06.215
So I'm gonna create a fromEvent
function on observable.

106
00:06:11.846 --> 00:06:13.755
&gt;&gt; Jafar Husain: And remember,
it takes a DOM element and

107
00:06:13.755 --> 00:06:17.495
event name,
&gt;&gt; Jafar Husain: And

108
00:06:17.495 --> 00:06:20.893
it returns an observable.

109
00:06:25.659 --> 00:06:27.525
&gt;&gt; Jafar Husain: Make this
a little bit smaller.

110
00:06:31.442 --> 00:06:34.493
&gt;&gt; Jafar Husain: Now let's go through
how do we take an event-based API and

111
00:06:34.493 --> 00:06:36.185
convert it into an observable?

112
00:06:36.185 --> 00:06:39.152
Well, when somebody calls
the forEach function,

113
00:06:39.152 --> 00:06:41.644
we want to add an event
listener to the DOM.

114
00:06:41.644 --> 00:06:44.750
Actually, first,
we're gonna create a handler.

115
00:06:44.750 --> 00:06:50.046
And when that handler fires, we're going
to take the event object and we are going

116
00:06:50.046 --> 00:06:55.670
to just call observer onNext and thread
that event object on to the observer.

117
00:06:55.670 --> 00:06:59.920
Remember, the observable is just an object
with a function, a forEach function.

118
00:06:59.920 --> 00:07:04.160
And when you handed an observer, it's
gonna call that observer every single time

119
00:07:04.160 --> 00:07:07.570
it receives an event from the DOM object.

120
00:07:07.570 --> 00:07:11.505
So now we just have to take the Dom
element, add an event listener.

121
00:07:13.434 --> 00:07:16.983
&gt;&gt; Jafar Husain: At the eventName,
we're gonna add our handler.

122
00:07:16.983 --> 00:07:18.826
And what's the last thing
that we have to do?

123
00:07:18.826 --> 00:07:22.300
What's the last thing a forEach
function has to do when you call it?

124
00:07:22.300 --> 00:07:23.536
What does it have to return?

125
00:07:27.855 --> 00:07:29.300
&gt;&gt; Jafar Husain: When you
call forEach on an array?

126
00:07:29.300 --> 00:07:30.611
&gt;&gt; Speaker 3: Subscription.
&gt;&gt; Jafar Husain: Subscription, right,

127
00:07:30.611 --> 00:07:33.360
because you need a way
to say no more data.

128
00:07:33.360 --> 00:07:36.258
So we're gonna return an object with

129
00:07:36.258 --> 00:07:41.216
dispose,
&gt;&gt; Jafar Husain: And inside of here,

130
00:07:41.216 --> 00:07:45.742
we have to make sure by doing something
that none of the observers onNext or

131
00:07:45.742 --> 00:07:50.056
onerror, or onCompleted callbacks
are ever gonna get called again.

132
00:07:50.056 --> 00:07:55.111
So I'm going to unhook the event handler,

133
00:08:01.574 --> 00:08:03.030
&gt;&gt; Jafar Husain: Like so.

134
00:08:03.030 --> 00:08:06.377
And so this is our subscription object.

135
00:08:09.891 --> 00:08:11.765
&gt;&gt; Jafar Husain: So
this is actually all the code.

136
00:08:11.765 --> 00:08:13.480
Yeah, we've got a question in the back?

137
00:08:13.480 --> 00:08:18.270
&gt;&gt; Speaker 4: So why are we doing the one
up there to the observable prototype, but

138
00:08:18.270 --> 00:08:21.390
this one we're just doing to observable?

139
00:08:21.390 --> 00:08:22.340
&gt;&gt; Jafar Husain: So, just,

140
00:08:22.340 --> 00:08:25.770
let's take a close look at
the observable constructor again.

141
00:08:25.770 --> 00:08:30.550
Notice that observable accepts an argument
which is the definition of forEach, right?

142
00:08:30.550 --> 00:08:31.990
But notice that you can also call,

143
00:08:31.990 --> 00:08:34.720
we saw there's two different
ways you can call an observable.

144
00:08:34.720 --> 00:08:37.560
One is where you pass three
arguments which are functions.

145
00:08:37.560 --> 00:08:39.331
You pass in the onNext, the onError, and

146
00:08:39.331 --> 00:08:41.820
the onCompleted function
is three arguments.

147
00:08:41.820 --> 00:08:45.692
But another overload is that you can
call with an object that has an onNext,

148
00:08:45.692 --> 00:08:48.310
onError, and onCompleted property.

149
00:08:48.310 --> 00:08:50.550
Instead, whenever you would
create an observable,

150
00:08:50.550 --> 00:08:53.810
instead of you having to worry about
handling each of those cases, right?

151
00:08:53.810 --> 00:08:57.590
Because otherwise you'd have to really
kind of you need to make sure to check

152
00:08:57.590 --> 00:08:58.710
each time something called your for

153
00:08:58.710 --> 00:09:01.954
each function if they were passing
an observer object or three-call box?

154
00:09:01.954 --> 00:09:07.220
We're gonna add a public forEach method
to observable that does that work for us.

155
00:09:07.220 --> 00:09:12.120
So it's gonna first check to see,
are they passing in functions?

156
00:09:12.120 --> 00:09:15.090
In which case, onNet, and on air and

157
00:09:15.090 --> 00:09:17.490
onCompleted are all gonna
be individually functions.

158
00:09:17.490 --> 00:09:21.234
And then if so,
it's gonna create an observer object.

159
00:09:21.234 --> 00:09:24.700
It's gonna wrap those things
inside of an observer object and

160
00:09:24.700 --> 00:09:30.550
it's gonna call the actual definition of
forEach that we passed in the constructor.

161
00:09:30.550 --> 00:09:33.610
So that way, when we create an observable,
we don't have to worry about this little

162
00:09:33.610 --> 00:09:36.030
step of saying,
are they passing in an observer?

163
00:09:36.030 --> 00:09:37.820
Are they passing in three callbacks?

164
00:09:37.820 --> 00:09:41.840
Because when we have a public
forEach method that gets called and

165
00:09:41.840 --> 00:09:44.640
then it creates an observer
every single time.

166
00:09:44.640 --> 00:09:47.910
And then calls our internal
definition of forEach.

167
00:09:47.910 --> 00:09:50.860
So inside, when we define an observable,

168
00:09:50.860 --> 00:09:53.940
we only have to worry about
the case where we get an observer.

169
00:09:55.540 --> 00:09:56.280
Does that make sense?

170
00:09:56.280 --> 00:09:58.760
So that's all that's going on here.

171
00:09:58.760 --> 00:10:02.920
It's just saying, hey is,
are they passing an observer object?

172
00:10:06.100 --> 00:10:09.500
In which case, just go ahead take
whatever it is the first argument in this

173
00:10:09.500 --> 00:10:12.570
thread it down to the internal
definition of foreach.

174
00:10:12.570 --> 00:10:17.860
Or are they passing in functions in which
case create the observer object and

175
00:10:17.860 --> 00:10:18.880
then pass that in for it.

176
00:10:18.880 --> 00:10:21.000
So now would we define for each method.

177
00:10:21.000 --> 00:10:24.590
The only case we ever have to worry
about is getting an observer.

178
00:10:24.590 --> 00:10:27.990
Okay, so now when I go and
that define fromEvent and

179
00:10:27.990 --> 00:10:30.930
I create an observable
when you call fromEvent.

180
00:10:30.930 --> 00:10:33.056
I only have to worry about
ever getting an observer.

181
00:10:33.056 --> 00:10:36.970
Does that makes sense?

182
00:10:36.970 --> 00:10:39.400
Whenever we create an observer when
something calls forEach on us,

183
00:10:39.400 --> 00:10:40.750
we've got two jobs.

184
00:10:40.750 --> 00:10:44.747
Our job is to start whatever async or
whatever action may cause asynchronous

185
00:10:44.747 --> 00:10:48.314
data to start flowing through and
to return a subscription object.

186
00:10:48.314 --> 00:10:53.030
Which when disposed of, will stop any
asynchronous data from flowing through.

187
00:10:53.030 --> 00:10:58.639
So here's step one and
here's step two, right?

188
00:10:58.639 --> 00:11:02.016
This will cause us to potentially
start getting messages from the event.

189
00:11:02.016 --> 00:11:04.329
But when somebody disposes
of the subscription object,

190
00:11:04.329 --> 00:11:07.331
when the caller of forEach, this was
of the script subscription object.

191
00:11:07.331 --> 00:11:10.582
We'll make sure that we never give them
any more data ever again because we'll

192
00:11:10.582 --> 00:11:11.825
have removed the event list.

193
00:11:11.825 --> 00:11:12.712
Okay, we're good?

