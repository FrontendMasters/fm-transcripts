WEBVTT

1
00:00:00.000 --> 00:00:03.852
[MUSIC]

2
00:00:03.852 --> 00:00:05.629
&gt;&gt; Jafar Husain: Let's listen, first.

3
00:00:05.629 --> 00:00:08.980
Let's go through the process,
the problem-solving process.

4
00:00:08.980 --> 00:00:13.360
The first is we take,
comment that out so it doesn't keep.

5
00:00:13.360 --> 00:00:17.230
We take the streams that we have,
like key presses.

6
00:00:17.230 --> 00:00:20.610
And, in this case, the search results that
come out of getWikipediaSearchResults.

7
00:00:20.610 --> 00:00:24.468
And we compose them together to
create the stream that we want.

8
00:00:24.468 --> 00:00:25.600
What's the stream that we want?

9
00:00:25.600 --> 00:00:26.400
We have to start there.

10
00:00:26.400 --> 00:00:29.237
We have to decide, what is the stream
of data that we actually want?

11
00:00:29.237 --> 00:00:30.810
This is an autocomplete box.

12
00:00:30.810 --> 00:00:33.850
What I want is the stream of all
of the search results that come

13
00:00:33.850 --> 00:00:35.010
back from the server.

14
00:00:35.010 --> 00:00:37.410
Sometimes, when you're trying to
figure out the stream that you want,

15
00:00:37.410 --> 00:00:39.050
it helps to work backwards.

16
00:00:39.050 --> 00:00:42.811
Which is to say, what would I do with
the data that comes out of the stream?

17
00:00:42.811 --> 00:00:45.782
What are we gonna do with the data that
comes out the search results that come

18
00:00:45.782 --> 00:00:46.687
back from the server?

19
00:00:48.919 --> 00:00:51.460
&gt;&gt; Jafar Husain: Anybody tell me,
in an autocomplete box?

20
00:00:51.460 --> 00:00:54.381
What's the action where we do something,
where we change something?

21
00:00:54.381 --> 00:00:56.907
&gt;&gt; Speaker 2: [INAUDIBLE]
live search [INAUDIBLE]

22
00:00:56.907 --> 00:00:57.407
&gt;&gt; Jafar Husain: Yeah, when

23
00:00:57.407 --> 00:01:00.530
a search result comes back from
the server, we wanna put it on screen.

24
00:01:00.530 --> 00:01:02.724
That's the thing where
we're changing something,

25
00:01:02.724 --> 00:01:04.536
changing something inside of the browser.

26
00:01:04.536 --> 00:01:07.895
I'm gonna create a spot inside of here.

27
00:01:07.895 --> 00:01:10.237
We're not gonna be too fancy
with the formatting here.

28
00:01:10.237 --> 00:01:15.525
We're just gonna create a spot
to store our search results.

29
00:01:15.525 --> 00:01:18.409
For now,
I might even just make it a text area, and

30
00:01:18.409 --> 00:01:21.249
we'll make it a something
a little fancy later.

31
00:01:24.558 --> 00:01:25.712
&gt;&gt; Jafar Husain: I might
just fork right now.

32
00:01:31.755 --> 00:01:34.041
&gt;&gt; Jafar Husain: That looks scary.

33
00:01:34.041 --> 00:01:35.093
Save that.

34
00:01:39.253 --> 00:01:42.863
&gt;&gt; Jafar Husain: So now we've created a
little spot on screen to store our search

35
00:01:42.863 --> 00:01:43.482
results.

36
00:01:43.482 --> 00:01:49.152
If I had to script JS,
&gt;&gt; Jafar Husain: What I

37
00:01:49.152 --> 00:01:51.324
wanna do is I wanna
start with key presses.

38
00:01:51.324 --> 00:01:53.927
Obviously, everything starts
with a key press, right?

39
00:01:53.927 --> 00:01:58.234
I'm gonna create my
searchResultSets observable.

40
00:01:58.234 --> 00:02:02.220
The searchResultSets observable
is going to look like this.

41
00:02:02.220 --> 00:02:05.247
If you were to to visualize it,
it would be an observable.

42
00:02:05.247 --> 00:02:07.510
Remember, my special syntax for
observable.

43
00:02:07.510 --> 00:02:11.218
This is the syntax I'm inventing, which
is this collection of items over time.

44
00:02:11.218 --> 00:02:16.766
If we were to picture what
searchResultSets is gonna look like,

45
00:02:16.766 --> 00:02:19.250
it's gonna look like this.

46
00:02:19.250 --> 00:02:20.828
Let's say we type a, and then we type b.

47
00:02:20.828 --> 00:02:29.995
We're gonna get an observable
array of results.

48
00:02:29.995 --> 00:02:31.430
And the fact that it's
an array doesn't matter.

49
00:02:31.430 --> 00:02:34.750
It could be a number, but
it's still a flat observable of results.

50
00:02:34.750 --> 00:02:36.388
It just happens to contain arrays.

51
00:02:36.388 --> 00:02:41.532
If I type a first, and then I type ab,
I'll only be left with abacus.

52
00:02:41.532 --> 00:02:46.559
Notice, this searchResultSets
observable is gonna go on forever.

53
00:02:46.559 --> 00:02:50.331
It's never gonna stop because, at any
moment, somebody could hit a key press.

54
00:02:50.331 --> 00:02:53.687
That's the observable
that we want to create.

55
00:02:53.687 --> 00:02:55.671
What observables do we have?

56
00:02:55.671 --> 00:02:58.001
We have key presses, and
what does it look like?

57
00:02:58.001 --> 00:02:59.535
Well, what would a key press look like?

58
00:02:59.535 --> 00:03:05.247
Something like, it's actually an event
object, but something like this.

59
00:03:05.247 --> 00:03:07.355
If we were to just pull out
the key that was pressed,

60
00:03:07.355 --> 00:03:09.130
that's what key presses would look like.

61
00:03:09.130 --> 00:03:15.310
How do we go from this, and this?

62
00:03:15.310 --> 00:03:17.729
It's a long function name.

63
00:03:21.478 --> 00:03:26.638
&gt;&gt; Jafar Husain: What will
getWikipediaSearchResults look like,

64
00:03:26.638 --> 00:03:31.079
if we were to visualize
it as an observable?

65
00:03:31.079 --> 00:03:33.363
It would be an observable that goes on for
a long time.

66
00:03:33.363 --> 00:03:36.090
And then, eventually,
gives us these results.

67
00:03:38.470 --> 00:03:40.400
And then completes.

68
00:03:40.400 --> 00:03:41.764
Notice that it completes.

69
00:03:48.383 --> 00:03:51.027
&gt;&gt; Jafar Husain: As you're building
observables, it's really helpful.

70
00:03:51.027 --> 00:03:55.386
And I recommend this as your coding,
to comment on top of these observerables.

71
00:03:55.386 --> 00:03:59.282
Actually comment and use the stream to
convey what the streams gonna look like.

72
00:03:59.282 --> 00:04:02.360
You can actually visualize it
using this fake syntax here.

73
00:04:02.360 --> 00:04:03.376
So we've got key presses.

74
00:04:03.376 --> 00:04:07.630
We start off with this infinite observable
of a, b, c, whatever they happen to click.

75
00:04:08.680 --> 00:04:11.600
And now we've also got
getWikipediaSearchResults.

76
00:04:11.600 --> 00:04:15.330
Which, when given a term,
will give us an observable

77
00:04:15.330 --> 00:04:18.430
that will eventually give us
an array of search results that end.

78
00:04:18.430 --> 00:04:24.169
How do we put them together
to build searchResultSets,

79
00:04:24.169 --> 00:04:29.552
which is an infinite
observable of search results?

80
00:04:29.552 --> 00:04:30.911
Because this is the problem.

81
00:04:30.911 --> 00:04:33.153
It's how do you take
the event that you want?

82
00:04:33.153 --> 00:04:34.786
And then take the events that you have?

83
00:04:34.786 --> 00:04:37.049
And squeeze them together to
create the one that you want?

84
00:04:38.150 --> 00:04:39.960
I want some brain-storming ideas here.

85
00:04:41.150 --> 00:04:43.030
How can I ease this?

86
00:04:43.030 --> 00:04:44.311
It's always just a little bit of time.

87
00:04:44.311 --> 00:04:47.360
I'm gonna ease this closer to this,
right here.

88
00:04:49.720 --> 00:04:51.654
What would be the first
operation I might use?

89
00:04:51.654 --> 00:04:52.987
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Jafar Husain: I'm sorry?

90
00:04:52.987 --> 00:04:53.834
&gt;&gt; Speaker 2: The throttle.

91
00:04:53.834 --> 00:04:54.541
&gt;&gt; Jafar Husain: Well, the throttle, yeah.

92
00:04:54.541 --> 00:04:58.425
We talked about, yesterday,
that we wanna turn something like this.

93
00:04:58.425 --> 00:05:00.559
And that would be turning
something like this,

94
00:05:10.911 --> 00:05:12.352
&gt;&gt; Jafar Husain: Into this.

95
00:05:12.352 --> 00:05:16.236
keyPresses.throttle will look like this.

96
00:05:32.530 --> 00:05:34.480
&gt;&gt; Jafar Husain: Can anybody tell
me why it'll look like that?

97
00:05:41.197 --> 00:05:44.391
&gt;&gt; Speaker 3: [INAUDIBLE]
&gt;&gt; Jafar Husain: Yes.

98
00:05:44.391 --> 00:05:47.030
The way throttle works is we get a key.

99
00:05:47.030 --> 00:05:51.250
Then after certain duration, if we get
another key, we drop the previous key and

100
00:05:51.250 --> 00:05:52.188
we keep that key.

101
00:05:52.188 --> 00:05:54.574
Then we wait a certain duration,
and if nothing happens.

102
00:05:54.574 --> 00:05:57.326
If another key doesn't come in,
then we return the item.

103
00:05:57.326 --> 00:05:59.306
So now that we're visualizing it,

104
00:05:59.306 --> 00:06:02.744
we can start to see how these
operators transform the stream.

105
00:06:02.744 --> 00:06:04.664
Let's say, fine, we do a throttle.

106
00:06:04.664 --> 00:06:10.389
Now, how do we go from this to this?

107
00:06:10.389 --> 00:06:15.720
&gt;&gt; Speaker 3: Does throttle use
switchNext, or whatever that one is?

108
00:06:15.720 --> 00:06:17.090
&gt;&gt; Jafar Husain: Doesn't use switchLatest.

109
00:06:17.090 --> 00:06:20.068
switchLatest would only work on
a two-dimensional observable.

110
00:06:20.068 --> 00:06:24.669
In this case, under the hood,
it just you know creates a timer using

111
00:06:24.669 --> 00:06:27.922
something like setTimeout
to keep track of it.

112
00:06:27.922 --> 00:06:29.434
How do we get closer, here, guys?

113
00:06:29.434 --> 00:06:32.346
We've got a stream of keys and
we wanna, somehow,

114
00:06:32.346 --> 00:06:35.490
turn it into a stream of search results.

115
00:06:35.490 --> 00:06:40.580
It's almost like we wanna substitute
each key for search results.

116
00:06:40.580 --> 00:06:44.921
Map, I hear map.

117
00:06:44.921 --> 00:06:49.952
I'm gonna start out coding here,
keypresses, and I'm gonna code a map.

118
00:06:49.952 --> 00:06:52.419
So we've got a key in here.

119
00:06:52.419 --> 00:06:54.368
Let's throw in a throttle as well.

120
00:06:54.368 --> 00:06:57.993
Because we know we want to do that to
make the screen a little less chatty.

121
00:07:12.146 --> 00:07:15.865
&gt;&gt; Jafar Husain: Let's just
give it 20 milliseconds.

122
00:07:15.865 --> 00:07:21.236
As we go, I'm gonna paste above, and
I think this is a nice thing to do.

123
00:07:21.236 --> 00:07:25.553
Paste above what it looks
like at every stage.

124
00:07:25.553 --> 00:07:29.465
As you're going through your code,
this is a nice way to comment your code.

125
00:07:29.465 --> 00:07:32.317
If you want folks to
understand what's going on.

126
00:07:32.317 --> 00:07:35.001
This is actually a nice technique
to use as you write code.

127
00:07:35.001 --> 00:07:38.670
To keep showing what an example stream
would look like after the transformation.

128
00:07:39.970 --> 00:07:44.300
For every key,
what do we wanna substitute in this place?

129
00:07:44.300 --> 00:07:46.070
What do we wanna replace the b key with?

130
00:07:47.250 --> 00:07:49.010
I think, ideally,
the search results for B.

131
00:07:50.180 --> 00:07:51.480
&gt;&gt; Speaker 3: Yeah, an array.

132
00:07:51.480 --> 00:07:52.160
&gt;&gt; Jafar Husain: An array?

133
00:07:52.160 --> 00:07:52.820
Yeah, you're right.

134
00:07:52.820 --> 00:07:53.740
Absolutely an array.

135
00:07:53.740 --> 00:07:54.730
Right, good.

136
00:07:54.730 --> 00:07:56.111
The array of search results for that.

137
00:07:56.111 --> 00:07:57.520
How are we gonna get there, though?

138
00:08:00.250 --> 00:08:04.626
&gt;&gt; Jafar Husain: We know that
getWikipediaSearchResults will give us

139
00:08:04.626 --> 00:08:06.671
an observable of array.

140
00:08:06.671 --> 00:08:09.361
That's a little bit closer
than the key press.

141
00:08:13.888 --> 00:08:17.080
&gt;&gt; Speaker 4: We have to call the for each
of the Wikipedia search results, right?

142
00:08:17.080 --> 00:08:20.110
&gt;&gt; Jafar Husain: Good thinking,
good thinking, but here's the thing.

143
00:08:20.110 --> 00:08:23.520
We're only going to call for
each once in this program.

144
00:08:23.520 --> 00:08:26.370
Because, remember, we're gonna
separate our code into two parts.

145
00:08:26.370 --> 00:08:28.480
One, we're going to build
the stream that we want.

146
00:08:28.480 --> 00:08:31.140
And you don't use for
each at all to do that.

147
00:08:31.140 --> 00:08:34.040
Once we've built the stream that we want,
then we're gonna call for each.

148
00:08:34.040 --> 00:08:35.620
And we're gonna do something with it.

149
00:08:35.620 --> 00:08:38.654
So now the only choices
on the table are map,

150
00:08:38.654 --> 00:08:43.090
filter, concatAll, switchLatest,
mergeAll, and reduce.

151
00:08:45.310 --> 00:08:46.630
&gt;&gt; Speaker 3: I was gonna
say maybe concatMap,

152
00:08:46.630 --> 00:08:50.730
because we don't necessarily
need to be that layer deeper.

153
00:08:50.730 --> 00:08:51.263
&gt;&gt; Jafar Husain: Interesting.

154
00:08:51.263 --> 00:08:53.214
So you're saying, if we map.

155
00:08:53.214 --> 00:08:55.235
Why don't we start with map and
come back to the concatAll.

156
00:08:55.235 --> 00:08:56.603
Because, remember, the technique, guys.

157
00:08:56.603 --> 00:09:00.359
Keep mapping until you've got everything
in scope that you need to build your

158
00:09:00.359 --> 00:09:01.183
search result.

159
00:09:01.183 --> 00:09:06.167
And then at the end, figure out how
deep you are and flatten it out again.

160
00:09:06.167 --> 00:09:08.390
How do we how do we get closer?

161
00:09:08.390 --> 00:09:09.518
We know we've got this function.

162
00:09:09.518 --> 00:09:13.620
Wouldn't it be better if
we substituted this for

163
00:09:13.620 --> 00:09:17.230
an observable of the search results for b?

164
00:09:19.930 --> 00:09:23.181
That would be closer.

165
00:09:23.181 --> 00:09:26.447
Let's just, using map,
cuz map's all about substitution.

166
00:09:26.447 --> 00:09:30.228
We can replace b with
the getWikipediaSearch,

167
00:09:30.228 --> 00:09:32.313
do I have that name right?

168
00:09:32.313 --> 00:09:35.974
Yep, getWikpediaSearchResults.

169
00:09:35.974 --> 00:09:37.740
Now, am I going to use the key?

170
00:09:39.690 --> 00:09:40.990
Do I wanna search for b?

171
00:09:42.010 --> 00:09:44.560
&gt;&gt; Speaker 4: No,
you're gonna use the value of the textbox.

172
00:09:44.560 --> 00:09:47.580
&gt;&gt; Jafar Husain: Absolutely, I'm gonna
pull up the value of the textbox.

173
00:09:47.580 --> 00:09:49.682
So now what does our stream look like?

174
00:10:03.650 --> 00:10:06.860
&gt;&gt; Jafar Husain: Let's say I
typed a first, and then I type b.

175
00:10:15.745 --> 00:10:18.923
&gt;&gt; Jafar Husain: What if,
while the request is going out for a,

176
00:10:18.923 --> 00:10:22.195
somebody types b, and
now is searching for ab?

177
00:10:22.195 --> 00:10:26.430
We actually start another network request
while we're waiting for the previous one.

178
00:10:26.430 --> 00:10:29.120
Concurrency, and it's going, it's going.

179
00:10:30.150 --> 00:10:31.630
And now we're only left abacus.

180
00:10:32.890 --> 00:10:34.350
How many dimensions deep are we?

181
00:10:34.350 --> 00:10:36.601
How many dimensions of
observable do we have?

182
00:10:36.601 --> 00:10:37.675
&gt;&gt; Speaker 2: Two.

183
00:10:37.675 --> 00:10:40.223
&gt;&gt; Jafar Husain: A two-dimensional
observable.

