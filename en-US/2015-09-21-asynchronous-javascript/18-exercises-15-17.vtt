WEBVTT

1
00:00:00.000 --> 00:00:03.922
[MUSIC]

2
00:00:03.922 --> 00:00:06.050
&gt;&gt; Jafar Husain: Now I want to
introduce you to a new function.

3
00:00:06.050 --> 00:00:08.680
So this is the first new function in
a while you'll have been introduced to.

4
00:00:08.680 --> 00:00:10.288
We introduced you to map and filter, and

5
00:00:10.288 --> 00:00:12.242
we talked about concatAll
in the presentation.

6
00:00:12.242 --> 00:00:15.297
We learned about concat map
which is just a shorthand for

7
00:00:15.297 --> 00:00:17.313
writing map followed by concatAll.

8
00:00:17.313 --> 00:00:20.500
Now I'm gonna show you
a function called reduce.

9
00:00:20.500 --> 00:00:23.970
What reduce does is it takes an array,
with many,

10
00:00:23.970 --> 00:00:28.070
many items, and
reduces it to an array with one item.

11
00:00:28.070 --> 00:00:31.890
So we're effectively aggregating
up all the values in an array and

12
00:00:31.890 --> 00:00:34.320
producing an array with a single result.

13
00:00:34.320 --> 00:00:37.850
Now I'm gonna call your attention to
something which is that I've actually

14
00:00:37.850 --> 00:00:39.380
mucked with the definition of array.

15
00:00:39.380 --> 00:00:44.190
JavaScript's array definition
is that you process in array and

16
00:00:44.190 --> 00:00:46.010
it returns a single value.

17
00:00:46.010 --> 00:00:49.970
In my definition of array, the array that
you reduce, the reduce that you guys will

18
00:00:49.970 --> 00:00:53.970
be writing actually returns
a single value inside of an array.

19
00:00:53.970 --> 00:00:55.976
Does anybody know why I might do that?

20
00:00:55.976 --> 00:01:02.030
So here's an example of reduce, if I want
to show you why I would use a reduce,

21
00:01:02.030 --> 00:01:04.639
well, the canonical example for

22
00:01:04.639 --> 00:01:13.098
reduce is a sum.
&gt;&gt; Jafar Husain: So

23
00:01:13.098 --> 00:01:16.868
here's an example of using the reduce
function to create a sum of all the items

24
00:01:16.868 --> 00:01:18.140
in an array.

25
00:01:18.140 --> 00:01:22.730
So this is a function which takes an
accumulated value and the current value.

26
00:01:24.340 --> 00:01:27.370
This is typically the convention
when you're building a reduce.

27
00:01:27.370 --> 00:01:31.150
And so the very first time I can
also pass in a value to use for

28
00:01:31.150 --> 00:01:34.400
acc the very first time around,
so here I passed in zero.

29
00:01:34.400 --> 00:01:36.100
Now if I was to omit zero,
it would still work and

30
00:01:36.100 --> 00:01:37.670
it would still produce
the exact same thing.

31
00:01:37.670 --> 00:01:39.530
If you don't produce an initial value for

32
00:01:39.530 --> 00:01:44.610
acc, it uses the first item in the array,
does that makes sense?

33
00:01:44.610 --> 00:01:50.185
So what's gonna happen is the very
first time through this function,

34
00:01:50.185 --> 00:01:53.123
acc will be 1 and current will be 2.

35
00:01:53.123 --> 00:01:58.378
And the result of this function will
be the addition of these two things,

36
00:01:58.378 --> 00:02:03.217
which will create, of course,
[LAUGH] my Dad's trying to call me.

37
00:02:03.217 --> 00:02:08.260
Which will create 3, right?

38
00:02:08.260 --> 00:02:12.030
Now the way reduce works is it
feeds the result of the function

39
00:02:12.030 --> 00:02:14.030
back into the function.

40
00:02:14.030 --> 00:02:20.191
And so the next time around, acc,
the accumulated value is 3 and

41
00:02:20.191 --> 00:02:27.023
current is the only remaining item in
the array we haven't processed yet

42
00:02:27.023 --> 00:02:30.958
which is 3 and then the final value is 6.

43
00:02:30.958 --> 00:02:36.381
Now instead of reduce returning 6
it actually returns an array of 6.

44
00:02:36.381 --> 00:02:39.407
So reduce, even though it
always returns a single value,

45
00:02:39.407 --> 00:02:43.630
I wrap it inside of an array in my reduce
function, JavaScript doesn't do this.

46
00:02:43.630 --> 00:02:45.029
Can anybody think of a reason
why I would do this?

47
00:02:46.830 --> 00:02:50.588
I say Javascript's reduce is wrong,
it's a pretty arrogant thing to say.

48
00:02:50.588 --> 00:02:51.825
So why would I say that?

49
00:02:51.825 --> 00:02:54.577
In fact, lots of languages have
the same definition of reduce, and

50
00:02:54.577 --> 00:02:58.715
I think they're all wrong.
&gt;&gt; Speaker 2: Combine two of those, the

51
00:02:58.715 --> 00:03:02.910
answer would just be compatibility, right?
&gt;&gt; Jafar Husain: Compatibility how and

52
00:03:02.910 --> 00:03:04.257
compatibility what?
&gt;&gt; Speaker 2: Did you

53
00:03:04.257 --> 00:03:07.560
use the function calls or whatever?
&gt;&gt; Jafar Husain: Interesting,

54
00:03:07.560 --> 00:03:12.380
you mean I can chain a map function off
of this and chain a filter function,

55
00:03:12.380 --> 00:03:13.760
is that what you're getting at?
&gt;&gt; Speaker 2: Yeah.

56
00:03:13.760 --> 00:03:14.727
&gt;&gt; Jafar Husain: Cuz if it returns

57
00:03:14.727 --> 00:03:16.735
an array, I can keep on chaining.

58
00:03:16.735 --> 00:03:20.657
Yes, that is a very good reason why you
should return it inside of an array,

59
00:03:20.657 --> 00:03:23.850
there's an even better one which is,
what's this return?

60
00:03:30.550 --> 00:03:32.050
Anybody want tell me what
they think that returns?

61
00:03:37.629 --> 00:03:39.585
&gt;&gt; Speaker 3: D array?

62
00:03:39.585 --> 00:03:40.610
&gt;&gt; Jafar Husain: Well, in my definition,

63
00:03:40.610 --> 00:03:43.641
yes, but in JavaScript's definition,
where they don't return an array,

64
00:03:43.641 --> 00:03:47.139
they return a value, what would it return?
&gt;&gt; Speaker 3: Undefined.

65
00:03:47.139 --> 00:03:48.387
&gt;&gt; Jafar Husain: Maybe, I'm not sure.

66
00:03:48.387 --> 00:03:52.470
[LAUGH] Let's find out, I'm curious.
&gt;&gt; Speaker 3: Nan.

67
00:03:52.470 --> 00:03:53.112
&gt;&gt; Jafar Husain: Nan, possibly.

68
00:03:57.737 --> 00:03:58.790
&gt;&gt; Jafar Husain: Let's try it out.

69
00:03:58.790 --> 00:04:00.240
I don't remember, it's been a long time.

70
00:04:00.240 --> 00:04:02.691
But I can tell you whatever it
returns is probably not what you

71
00:04:02.691 --> 00:04:07.775
want.
&gt;&gt; Jafar Husain: Does

72
00:04:07.775 --> 00:04:09.860
returning undefined make
your life easier here?

73
00:04:09.860 --> 00:04:10.360
Probably not.

74
00:04:11.370 --> 00:04:17.381
So let's find out.
&gt;&gt; Jafar Husain: So

75
00:04:17.381 --> 00:04:18.980
this is what JavaScript will return.

76
00:04:18.980 --> 00:04:22.285
It will happily give you, wait,
I've already redefined reducing here.

77
00:04:22.285 --> 00:04:25.558
[LAUGH]
&gt;&gt; Speaker 3: [LAUGH] I'll do

78
00:04:25.558 --> 00:04:30.583
it.
&gt;&gt; Jafar Husain: Yeah, let me know.

79
00:04:42.937 --> 00:04:44.126
&gt;&gt; Jafar Husain: So that gives me six, but

80
00:04:44.126 --> 00:04:46.910
what does the same thing give
me when I have an empty array?

81
00:04:48.070 --> 00:04:51.900
Oo, error, that's even less fun, right?

82
00:04:51.900 --> 00:04:54.733
Well, actually it's kind
of understandable, right?

83
00:04:54.733 --> 00:04:58.238
There's really no way to answer the
question of what it reduces over an empty

84
00:04:58.238 --> 00:04:59.022
array, right?

85
00:04:59.022 --> 00:05:03.048
But if we return an array of the final
result, there's a very logical thing for

86
00:05:03.048 --> 00:05:04.110
it to return.

87
00:05:04.110 --> 00:05:06.580
Anybody want to take a guess what that is?
&gt;&gt; Speaker 4: Empty

88
00:05:06.580 --> 00:05:08.320
array.
&gt;&gt; Jafar Husain: Empty array.

89
00:05:08.320 --> 00:05:11.130
I suggest this is much
better than an error, right?

90
00:05:11.130 --> 00:05:13.450
And that's effectively
why we should do it.

91
00:05:13.450 --> 00:05:15.970
That's a good enough reason
alone to do it for array.

92
00:05:15.970 --> 00:05:19.937
But now apply reduced to an observable.

93
00:05:19.937 --> 00:05:22.502
If you apply reduce to an observable,

94
00:05:22.502 --> 00:05:26.684
that's an asynchronous collection
that arrives over time.

95
00:05:26.684 --> 00:05:31.340
You can't return a simple value from
a reduce over an observable because you

96
00:05:31.340 --> 00:05:33.167
would have to block, right?

97
00:05:33.167 --> 00:05:37.475
In order to give you this,
right, this is the observable,

98
00:05:37.475 --> 00:05:40.230
the fake observable syntax.

99
00:05:40.230 --> 00:05:45.120
There's absolutely no way
to return this as a single

100
00:05:45.120 --> 00:05:49.340
value because we'd have to block and
wait for the observable to complete and

101
00:05:49.340 --> 00:05:53.070
then and only then can we return it as
a simple value, does that make sense?

102
00:05:53.070 --> 00:05:54.790
Cuz it's a stream that arrives over time.

103
00:05:54.790 --> 00:05:57.750
JavaScript can't just block and
wait for this stream to arrive

104
00:05:57.750 --> 00:06:00.730
before it returns the next value, and
even if it could we shouldn't, right.

105
00:06:00.730 --> 00:06:03.740
We wouldn't wanna keep people from
entering stuff into the UI while we were

106
00:06:03.740 --> 00:06:05.460
waiting for observable to add up.

107
00:06:05.460 --> 00:06:11.304
That's why we return this.
&gt;&gt; Jafar Husain: That's

108
00:06:11.304 --> 00:06:14.536
what reduce returns when you
apply it to an observable.

109
00:06:14.536 --> 00:06:17.410
It returns you an observable that
eventually just completes with

110
00:06:17.410 --> 00:06:18.820
the one result.

111
00:06:18.820 --> 00:06:19.872
Does that makes sense?

112
00:06:19.872 --> 00:06:22.923
Reduce is written in such a way
that it cannot be implemented over

113
00:06:22.923 --> 00:06:24.799
an observable using that definition.

114
00:06:24.799 --> 00:06:26.229
And that's actually a smell,

115
00:06:26.229 --> 00:06:29.756
it's a smell it's because it seems like
reduce is actually doing too much.

116
00:06:29.756 --> 00:06:31.895
People were just abbreviating,
they were like, well,

117
00:06:31.895 --> 00:06:34.984
if this function always returns one value,
why keep it inside of the collection?

118
00:06:34.984 --> 00:06:38.005
Let's just take it out of the collection
cuz it's just one value, right?

119
00:06:38.005 --> 00:06:41.585
That's exactly the type of shortcutting
that works when you're looking at

120
00:06:41.585 --> 00:06:42.745
the array definition.

121
00:06:42.745 --> 00:06:45.545
But when you get down to the mathematics
of it, and you look at the fact that

122
00:06:45.545 --> 00:06:49.565
observable and array can both be expressed
as collections and streams, there's only

123
00:06:49.565 --> 00:06:52.715
one definition of reduce that's general
enough to work for both of them.

124
00:06:52.715 --> 00:06:54.605
And that is for
reduce to return an array of one or

125
00:06:54.605 --> 00:06:57.235
observable in this case to
return an observable of one.

126
00:06:57.235 --> 00:07:00.230
So that's why I'm gonna have you implement
reduce, what I think is the right way,

127
00:07:00.230 --> 00:07:03.030
and then we're gonna use that
reduced definition later on when we

128
00:07:03.030 --> 00:07:04.330
use observable.

129
00:07:04.330 --> 00:07:07.490
So now you guys should have a pretty
good idea of how reduce works, right.

130
00:07:07.490 --> 00:07:10.040
What's interesting about reduce,
when you're trying to figure out what

131
00:07:10.040 --> 00:07:12.150
function should I apply to
solve a problem, right?

132
00:07:12.150 --> 00:07:13.970
Well, if you're doing substitution,
if you've got an array,

133
00:07:13.970 --> 00:07:16.280
and you got stuff inside, and
you want to substitute each item for

134
00:07:16.280 --> 00:07:21.230
another item, what operator was that?

135
00:07:21.230 --> 00:07:24.868
Map, I have an array, I've got items and
I wanna transform each item inside and

136
00:07:24.868 --> 00:07:27.706
sort of substitute it in that
location in the new array, map.

137
00:07:27.706 --> 00:07:29.736
What if I have an array
with a bunch of items and

138
00:07:29.736 --> 00:07:31.981
I wanna apply some test
function to each of them and

139
00:07:31.981 --> 00:07:34.289
only keep the ones that pass the test?
&gt;&gt; Speaker 5: Filter.

140
00:07:34.289 --> 00:07:36.100
&gt;&gt; Jafar Husain: Filter, right?

141
00:07:36.100 --> 00:07:38.747
What if I have a two dimensional array and
I wanna flatten it out?

142
00:07:38.747 --> 00:07:39.703
&gt;&gt; Speaker 5: Okay.

143
00:07:39.703 --> 00:07:40.575
&gt;&gt; Jafar Husain: Reduce is for

144
00:07:40.575 --> 00:07:45.172
the case where you need to look at
least two values at the same time to do

145
00:07:45.172 --> 00:07:46.410
your job.

146
00:07:46.410 --> 00:07:48.810
Notice that map and
filter have got tunnel vision,

147
00:07:48.810 --> 00:07:54.190
they only look at one item at a time,
but in order to do a sum, for example,

148
00:07:54.190 --> 00:07:58.690
you would need to at least look at two
values at a time to do that job, right?

149
00:07:58.690 --> 00:08:01.973
You couldn't do a sum with a filter
operation or a map operation even, right?

150
00:08:01.973 --> 00:08:05.357
Cuz map can only,
you only have the one value at a time.

151
00:08:05.357 --> 00:08:06.630
So does that makes sense?

152
00:08:06.630 --> 00:08:09.500
So those are the types of tasks
you'll be using reduce for.

153
00:08:09.500 --> 00:08:14.360
So let me jump back to here,
I think, okay, so this is 15,

154
00:08:14.360 --> 00:08:17.400
so we're gonna assume you
guys finished this one.

155
00:08:17.400 --> 00:08:21.070
So our job here is to
find the largest box art.

156
00:08:21.070 --> 00:08:24.730
So aggregation operations,
sums, maximums, minimums,

157
00:08:24.730 --> 00:08:27.410
these are the types of things that you
would use the reduce function for.

158
00:08:28.550 --> 00:08:30.939
So in this case, I'm gonna use for
each for it, and

159
00:08:30.939 --> 00:08:33.785
this is the way you would kind of
approach it if you had a loop.

160
00:08:33.785 --> 00:08:37.885
You'd create a bunch of variables
to store, what's the current size,

161
00:08:37.885 --> 00:08:41.176
what's the largest box art I'm
currently keeping track of.

162
00:08:41.176 --> 00:08:44.665
All right, and then you would for each
over box arts and then we say, okay, well,

163
00:08:44.665 --> 00:08:45.840
what's the current size?

164
00:08:45.840 --> 00:08:46.898
We compute the size.

165
00:08:46.898 --> 00:08:51.818
If the size is larger than the current max
size, then we reset the largest box art

166
00:08:51.818 --> 00:08:56.312
variable to the new box art and
we reset the maximum size to current size.

167
00:08:56.312 --> 00:08:59.140
And by the time the loop is done,
we'll have a largest box art.

168
00:08:59.140 --> 00:09:02.200
This is very similar to the way you guys
have probably written this type of code in

169
00:09:02.200 --> 00:09:02.810
the past, right.

170
00:09:02.810 --> 00:09:07.080
Loop through an array, use a variable to
keep track of your accumulated value.

171
00:09:07.080 --> 00:09:11.160
Well, you can take this exact same
pattern and abstract it into reduce.

172
00:09:11.160 --> 00:09:13.360
Anything where you're doing
this form of aberration,

173
00:09:13.360 --> 00:09:15.190
you can replace it with reduce.

174
00:09:15.190 --> 00:09:16.400
Question?
&gt;&gt; Speaker 2: Would

175
00:09:16.400 --> 00:09:19.130
the custom implementation of
reduce always return an array

176
00:09:19.130 --> 00:09:20.625
of one element?
&gt;&gt; Jafar Husain: Yes,

177
00:09:20.625 --> 00:09:24.859
cuz reduce always takes the entire
collection and reduces it to one element.

178
00:09:24.859 --> 00:09:26.593
But by returning it in an array,

179
00:09:26.593 --> 00:09:30.463
we have a logical thing that we can do
if we get an empty array as an input.

180
00:09:30.463 --> 00:09:34.210
We have a logical output that's not so
bad as throwing an error and

181
00:09:34.210 --> 00:09:38.110
we can continue chaining on operators
after the reduce operation.

182
00:09:39.260 --> 00:09:44.350
This is a very common mistake that's made
when stream processing, which is taking

183
00:09:44.350 --> 00:09:47.109
APIs like reduce and having them
return scalars instead of vectors.

184
00:09:49.620 --> 00:09:51.530
So what we're gonna do is
were gonna implement reduce.

185
00:09:51.530 --> 00:09:53.760
Now this is actually
already implemented for us.

186
00:09:53.760 --> 00:09:56.060
We already explained how reduce worked,
right?

187
00:09:56.060 --> 00:10:00.370
There's basically an optional initial
value you can pass for reduce but

188
00:10:00.370 --> 00:10:04.780
let's go over it one last time,
inside a reduce here.

189
00:10:04.780 --> 00:10:09.732
If I write this reduce expression, what
reduce does is the very first time around,

190
00:10:09.732 --> 00:10:12.279
if I haven't specified an initial value,

191
00:10:12.279 --> 00:10:15.271
it just uses the first
value as the initial value.

192
00:10:15.271 --> 00:10:18.929
So that's 1 and then it uses the next
value as the current value and so

193
00:10:18.929 --> 00:10:19.632
that's 2.

194
00:10:19.632 --> 00:10:22.046
And what comes out of this
function is gonna be 3 and

195
00:10:22.046 --> 00:10:25.977
whatever comes out of the reduced function
is gonna be fed back in as the accumulator

196
00:10:25.977 --> 00:10:27.510
the next time around.

197
00:10:27.510 --> 00:10:30.490
So next time around this is gonna be 3 and
this is gonna be the only function,

198
00:10:30.490 --> 00:10:32.640
the only item in the array we
haven't processed yet, which is 3.

199
00:10:32.640 --> 00:10:36.210
And then the final one is gonna be 6, and

200
00:10:36.210 --> 00:10:40.260
then reduce is going to return
an array of 6, and so if we, however,

201
00:10:40.260 --> 00:10:44.180
were to use an initial value,
then it would work like this.

202
00:10:44.180 --> 00:10:46.780
It would start with out with 0 as the
initial value, which is what we pass in

203
00:10:46.780 --> 00:10:51.830
first as the accumulative value, and
then we'd get 1 and then we would get,

204
00:10:53.050 --> 00:10:56.180
predictably, we'd get 1 from the function.

205
00:10:56.180 --> 00:10:59.301
The next time around,
1 would be the accumulated value and 2

206
00:10:59.301 --> 00:11:03.820
would be the current value, cuz now we've
gone here, all right, and then we'd get 3.

207
00:11:03.820 --> 00:11:09.040
Next time around a 3 is the accumulated
value and 3 is the current value.

208
00:11:09.040 --> 00:11:12.563
And we get 6, so we get the same
result regardless of whether we passed

209
00:11:12.563 --> 00:11:14.310
in an initial value of zero or not.

210
00:11:15.730 --> 00:11:16.930
So that's how reduce works,

211
00:11:16.930 --> 00:11:20.370
I won't spend too long looking at
this function because you know it.

212
00:11:20.370 --> 00:11:22.506
That's a pretty straightforward thing,

213
00:11:22.506 --> 00:11:25.539
we're just using a while loop
to do that the expected thing.

214
00:11:25.539 --> 00:11:30.159
But notice that in the end, the key thing
I want to call out is that we make sure to

215
00:11:30.159 --> 00:11:31.782
keep it inside of an array.

216
00:11:31.782 --> 00:11:34.197
Now, I wonder if I've got a bug in here,

217
00:11:34.197 --> 00:11:38.420
I wonder what happens if we have no
items in this collection, right.

218
00:11:38.420 --> 00:11:42.705
So here notice if the length is zero,
we just return the exact same array.

219
00:11:42.705 --> 00:11:45.155
So a zero length the ray,
if you attempt to reduce it,

220
00:11:45.155 --> 00:11:51.269
produces a zero length array.
&gt;&gt; Jafar Husain: So

221
00:11:51.269 --> 00:11:52.990
let's run that, that works.

222
00:11:52.990 --> 00:11:59.030
So now we're gonna use reduce
to find the largest rating.

223
00:12:01.030 --> 00:12:06.240
So we have an array of movie ratings,
and so we're going to call reduce.

224
00:12:06.240 --> 00:12:11.350
And pass in a function which starts
an accumulated value and a current value.

225
00:12:11.350 --> 00:12:18.830
And we're just gonna return
whatever the largest value is.

226
00:12:18.830 --> 00:12:25.360
So we're gonna say if accumulative larger
than current will return the accumulated.

227
00:12:25.360 --> 00:12:29.848
Otherwise, will return the current, and
I believe that's gonna get us the value.

228
00:12:29.848 --> 00:12:33.382
So what reduce is saying is, look,
if the accumulated value is largest,

229
00:12:33.382 --> 00:12:36.118
larger than whatever value
we're looking at right now,

230
00:12:36.118 --> 00:12:38.807
just return whatever was
currently the largest value.

231
00:12:38.807 --> 00:12:42.138
But if the current value happens to
be larger than the accumulated value,

232
00:12:42.138 --> 00:12:44.812
reuse that as the accumulated
value the next time around.

233
00:12:44.812 --> 00:12:50.640
And so if we run this,
it should work, yes, so that works.

234
00:12:50.640 --> 00:12:54.096
Does anybody want to slow down take
a look at that a little bit more or

235
00:12:54.096 --> 00:12:56.190
did we did we get past 17?

236
00:12:56.190 --> 00:12:56.690
Okay.

