WEBVTT

1
00:00:00.051 --> 00:00:04.091
[MUSIC]

2
00:00:04.091 --> 00:00:08.315
&gt;&gt; Jafar Husain: And now, here we come to
the central question that we have to deal

3
00:00:08.315 --> 00:00:11.810
with when we move from
arrays to observable.

4
00:00:11.810 --> 00:00:13.430
Almost everything else is the same.

5
00:00:13.430 --> 00:00:17.340
You still keep mapping, you figure out
how deep you are, and you flatten.

6
00:00:17.340 --> 00:00:19.700
But here's where the extra
level of complexity comes in,

7
00:00:19.700 --> 00:00:21.330
when you have the dimension of time.

8
00:00:21.330 --> 00:00:26.252
Instead of figuring out how many flattens
I need, you need to ask yourself one extra

9
00:00:26.252 --> 00:00:30.987
question, which is how many flattens do
I need and which flattens should I use?

10
00:00:30.987 --> 00:00:34.390
Remember there's only one way to
flatten an array of arrays, what is it?

11
00:00:35.790 --> 00:00:37.050
ConcatAll.

12
00:00:37.050 --> 00:00:38.760
There's no time, so
all the data's there at the same time.

13
00:00:38.760 --> 00:00:41.191
The only logical strategy is to go
top to bottom, left to right, and

14
00:00:41.191 --> 00:00:43.748
just go the first array, slurp up all
the data, go to the second array,

15
00:00:43.748 --> 00:00:44.990
slurp up all the data.

16
00:00:44.990 --> 00:00:48.790
But now we actually have a collection
of collections over time.

17
00:00:48.790 --> 00:00:51.401
So there's more than one way
to skin a cat here, right?

18
00:00:51.401 --> 00:00:54.007
What are the three strategies?

19
00:00:54.007 --> 00:00:57.408
&gt;&gt; Speaker 2: MergeAll,
concatAll, switchLatest.

20
00:00:57.408 --> 00:00:58.491
&gt;&gt; Jafar Husain: SwitchLatest.

21
00:00:58.491 --> 00:01:06.275
All right, so
what'll happen if I use mergeAll here?

22
00:01:06.275 --> 00:01:07.527
What would I get?

23
00:01:07.527 --> 00:01:09.819
A merged all observable.

24
00:01:09.819 --> 00:01:12.537
&gt;&gt; Speaker 3: You get all
of the search results,

25
00:01:12.537 --> 00:01:17.170
even the ones that should be
defunct by later keypresses.

26
00:01:17.170 --> 00:01:20.460
&gt;&gt; Jafar Husain: Right, I'll write this
out, just so we're all clear on it.

27
00:01:21.930 --> 00:01:25.690
Right, I would get in exactly
the order in which they arrive.

28
00:01:29.670 --> 00:01:33.447
&gt;&gt; Jafar Husain: Like lanes
merging on a highway.

29
00:01:33.447 --> 00:01:34.518
Does that make sense?

30
00:01:34.518 --> 00:01:36.188
That's what I would get
if we just [SOUND].

31
00:01:36.188 --> 00:01:38.740
MergeAll is just like lanes
merging on a highway.

32
00:01:38.740 --> 00:01:40.730
So let's see what we
would get with concat.

33
00:01:43.380 --> 00:01:44.084
Anybody tell me?

34
00:01:49.448 --> 00:01:54.113
&gt;&gt; Speaker 4: It would be the same but
with the advantage that the former could

35
00:01:54.113 --> 00:02:00.466
not possibly overwrite the latter, even in
the case of the latter happening faster.

36
00:02:00.466 --> 00:02:02.927
&gt;&gt; Jafar Husain: Well,
it'll be definitely be the same order but

37
00:02:02.927 --> 00:02:05.458
something will change,
something will change.

38
00:02:05.458 --> 00:02:07.667
And remember what concatAll does.

39
00:02:07.667 --> 00:02:12.090
It has an observable of observables,
and concatAll forEachs over the outer

40
00:02:12.090 --> 00:02:16.950
observable and then it starts
receiving inner observables, right?

41
00:02:16.950 --> 00:02:19.410
That's what these are, inner observables.

42
00:02:19.410 --> 00:02:22.863
And once it receives an inner
observable it forEachs over that, but

43
00:02:22.863 --> 00:02:26.559
it will if it receives another inner
observable while it's listening to

44
00:02:26.559 --> 00:02:30.331
the first, to an existing inner
observable, all it does it puts it away.

45
00:02:30.331 --> 00:02:33.510
It caches it, like remember when
she was piling up the cakes, right?

46
00:02:33.510 --> 00:02:35.453
It caches it, it doesn't forEach over it.

47
00:02:35.453 --> 00:02:40.685
Which means this time, right here,
doesn't start going yet.

48
00:02:40.685 --> 00:02:44.792
So until this observable is complete
it's not even gonna call forEach on

49
00:02:44.792 --> 00:02:48.716
this observable, which means this
time isn't gonna start moving.

50
00:02:48.716 --> 00:02:51.990
What do I mean when I say this
time isn't gonna start moving?

51
00:02:51.990 --> 00:02:57.613
Why wouldn't the network request start
as soon as the inner observable arrived?

52
00:02:57.613 --> 00:03:00.724
Well, what happens if you create
an observable and don't call forEach?

53
00:03:00.724 --> 00:03:01.405
&gt;&gt; Speaker 2: Nothing.

54
00:03:01.405 --> 00:03:01.916
&gt;&gt; Jafar Husain: Nothing.

55
00:03:01.916 --> 00:03:05.360
So concatAll is gonna get to
the end of this observable and

56
00:03:05.360 --> 00:03:07.889
then it's already got this observable.

57
00:03:07.889 --> 00:03:10.809
It's just holding it in memory somewhere,
piling it up, and

58
00:03:10.809 --> 00:03:12.570
then it's gonna call forEach on it.

59
00:03:12.570 --> 00:03:17.390
Which means this time will only
start counting once this finishes.

60
00:03:17.390 --> 00:03:20.830
So instead of like mergeAll, where these
things are so close together, you will

61
00:03:20.830 --> 00:03:25.170
actually take all this time and you will
concatenate it onto the end of this.

62
00:03:25.170 --> 00:03:29.032
And we will get the same results
over a much longer piece of time.

63
00:03:29.032 --> 00:03:31.814
Is this starting to make sense now
that we're visualizing it, right, and

64
00:03:31.814 --> 00:03:33.840
we're making it more concrete?

65
00:03:33.840 --> 00:03:38.025
So that's probably not what we want,
right?

66
00:03:38.025 --> 00:03:41.305
Probably don't want, imagine queuing
up every single time they type a key,

67
00:03:41.305 --> 00:03:43.285
queuing up the network request and
they've gotta wait for

68
00:03:43.285 --> 00:03:46.565
all the search results to come back before
they even make next network request.

69
00:03:46.565 --> 00:03:48.765
Probably not the flatten we want, right?

70
00:03:48.765 --> 00:03:51.015
So let's take a look at
the last flattening strategy,

71
00:03:51.015 --> 00:03:52.585
help me out here, what is it?

72
00:03:52.585 --> 00:03:54.840
&gt;&gt; Speaker 2: SwitchLatest.
&gt;&gt; Jafar Husain: SwitchLatest.

73
00:03:54.840 --> 00:03:57.586
What's gonna happen with switchLatest?

74
00:03:57.586 --> 00:03:58.720
What are we gonna get?

75
00:04:01.379 --> 00:04:03.371
&gt;&gt; Jafar Husain: What do you guys think?

76
00:04:03.371 --> 00:04:06.030
&gt;&gt; Speaker 2: You're only
gonna get the last request.

77
00:04:06.030 --> 00:04:06.970
&gt;&gt; Jafar Husain: When is it gonna arrive?

78
00:04:06.970 --> 00:04:08.780
When is the data gonna arrive?

79
00:04:08.780 --> 00:04:10.660
Dot, dot, dot, dot, dot.

80
00:04:10.660 --> 00:04:11.460
When is it gonna arrive?

81
00:04:11.460 --> 00:04:12.090
&gt;&gt; Speaker 2: As soon as it gets there.

82
00:04:14.750 --> 00:04:15.310
&gt;&gt; Jafar Husain: Yep.

83
00:04:19.074 --> 00:04:19.650
&gt;&gt; Jafar Husain: Why is that?

84
00:04:22.160 --> 00:04:24.340
&gt;&gt; Speaker 3: When
the second request was sent,

85
00:04:24.340 --> 00:04:29.170
we switched to favoring that request and
we threw away the first one.

86
00:04:29.170 --> 00:04:31.761
&gt;&gt; Jafar Husain: Right,
so as soon as, right, so

87
00:04:31.761 --> 00:04:37.040
the switchLatest forEached
over this inner observable.

88
00:04:37.040 --> 00:04:39.962
But while it was waiting for
the onNext and the onCompleted,

89
00:04:39.962 --> 00:04:45.352
another one came along and it immediately,
&gt;&gt; Jafar Husain: Subscription disposed and

90
00:04:45.352 --> 00:04:48.280
it stopped listening, excuse me, dispose.

91
00:04:48.280 --> 00:04:50.750
And it stopped listening for
these results.

92
00:04:50.750 --> 00:04:54.689
And so it never got this result, and
instead it started listening to this one.

93
00:04:54.689 --> 00:04:58.320
SwitchLatest only listens to
one inner absorbable at a time.

94
00:05:03.540 --> 00:05:05.130
So with switchLatest we get what we want.

95
00:05:05.130 --> 00:05:07.210
Now why is it so
important to you switchLatest here?

96
00:05:07.210 --> 00:05:11.339
Because if you look at it, I mean merge
gives us actually more results doesn't it?

97
00:05:11.339 --> 00:05:12.689
I mean isn't merge better?

98
00:05:12.689 --> 00:05:15.000
I mean merge actually
gives us both results.

99
00:05:15.000 --> 00:05:17.270
Maybe it's better to show
something on screen earlier,

100
00:05:17.270 --> 00:05:19.130
even if they've already typed a key.

101
00:05:19.130 --> 00:05:22.320
Now in the case of an autocomplete box,
I generally don't think it is better.

102
00:05:22.320 --> 00:05:23.043
Why?
Because let's say you

103
00:05:23.043 --> 00:05:23.659
show somebody a result.

104
00:05:23.659 --> 00:05:26.400
Anybody ever have this happen to
them with an auto complete box,

105
00:05:26.400 --> 00:05:29.802
where you show results and then the user
moves their mouse to click something and

106
00:05:29.802 --> 00:05:32.460
the results disappear and
some more results come in.

107
00:05:32.460 --> 00:05:35.180
Probably not good usability,
very frustrating, right?

108
00:05:35.180 --> 00:05:36.840
So that's why we probably
want switchLatest.

109
00:05:36.840 --> 00:05:40.951
But there's an even better reason
why we want switchLatest, and

110
00:05:40.951 --> 00:05:48.600
that's because this can easily happen,
&gt;&gt; Jafar Husain: Right?

111
00:05:48.600 --> 00:05:51.690
Just cuz I issue a network
request first and

112
00:05:51.690 --> 00:05:55.300
then another network request, doesn't
mean the results from the first one

113
00:05:55.300 --> 00:05:58.990
are gonna come back before
the results of the second one.

114
00:05:58.990 --> 00:06:00.560
&gt;&gt; Speaker 3: Especially if
you're doing search like this,

115
00:06:00.560 --> 00:06:04.120
where there's gonna be a lot of
words that have a in them, and

116
00:06:04.120 --> 00:06:06.110
much fewer that have ab in them.

117
00:06:06.110 --> 00:06:06.910
&gt;&gt; Jafar Husain: Well, maybe this search,

118
00:06:06.910 --> 00:06:09.350
maybe it'll take a longer time to
execute the query on the server, for

119
00:06:09.350 --> 00:06:10.400
example, right.

120
00:06:10.400 --> 00:06:12.630
So ab will be a much shorter
result to execute the query,

121
00:06:12.630 --> 00:06:13.890
and the result comes back earlier.

122
00:06:13.890 --> 00:06:15.520
That's possible, right?

123
00:06:15.520 --> 00:06:17.620
But now let's see what
happens if we use merge.

124
00:06:17.620 --> 00:06:22.571
Nothing good happens if we use merge now.

125
00:06:28.592 --> 00:06:30.690
&gt;&gt; Jafar Husain: That we
definitely don't want, right?

126
00:06:30.690 --> 00:06:33.805
And we certainly don't want
the concatAll case, where the data is,

127
00:06:33.805 --> 00:06:36.127
it'll actually just
elongate time even further.

128
00:06:43.279 --> 00:06:45.485
&gt;&gt; Jafar Husain: We don't want that.

129
00:06:45.485 --> 00:06:47.989
Hopefully now it's clear why
we want switchLatest, and

130
00:06:47.989 --> 00:06:50.720
why we almost always want
switchLatest in user interfaces.

131
00:06:50.720 --> 00:06:51.994
We just wanna cancel the old thing and

132
00:06:51.994 --> 00:06:54.400
focus on the new thing
they asked us to do.

133
00:06:54.400 --> 00:06:55.680
Make sense?

134
00:06:55.680 --> 00:06:59.431
So now we know that if
I apply switchLatest,

135
00:07:02.705 --> 00:07:03.551
&gt;&gt; Jafar Husain: I'm gonna get,

136
00:07:06.553 --> 00:07:07.265
&gt;&gt; Jafar Husain: This.

137
00:07:10.857 --> 00:07:14.386
&gt;&gt; Jafar Husain: So it's always nice
to help out your fellow programmers,

138
00:07:14.386 --> 00:07:16.762
by adding comments like this, right,

139
00:07:16.762 --> 00:07:22.105
which help them understand what the stream
looks like after these intermediary steps.

140
00:07:22.105 --> 00:07:23.800
I'm not sure if that bracket's needed or
not.

141
00:07:32.820 --> 00:07:34.970
Okay, should we see if that works?

142
00:07:34.970 --> 00:07:35.683
I'm kind of excited.

143
00:07:35.683 --> 00:07:39.260
Let's try it out,
let's try search results.

144
00:07:39.260 --> 00:07:43.130
So now that we've created this
stream of data that we want, right,

145
00:07:43.130 --> 00:07:46.290
notice that this is actually
what we originally wanted.

146
00:07:46.290 --> 00:07:48.530
We wanted something like this.

147
00:07:51.030 --> 00:07:53.200
Now we've actually built that stream.

148
00:07:53.200 --> 00:07:54.990
Now it's time to call forEach.

149
00:07:54.990 --> 00:07:57.848
Now it's time to consume that data and
do something with it.

150
00:08:02.898 --> 00:08:05.889
&gt;&gt; Jafar Husain: And
each one of these will be an array.

151
00:08:05.889 --> 00:08:07.632
That's why I call it a result set, oops.

152
00:08:21.498 --> 00:08:25.697
&gt;&gt; Jafar Husain: And for now, I'm just
gonna, well alert will be annoying, so

153
00:08:25.697 --> 00:08:30.135
I'm gonna try and put it into
the inner text of the search results,

154
00:08:30.135 --> 00:08:32.057
which I believe we created.

155
00:08:32.057 --> 00:08:35.446
So it's textarea.value, right?

156
00:08:35.446 --> 00:08:37.983
So textarea.

157
00:09:17.413 --> 00:09:19.060
&gt;&gt; Jafar Husain: Okay, yeah, question?

158
00:09:19.060 --> 00:09:21.250
&gt;&gt; Speaker 5: Do you have to
change text box to result?

159
00:09:23.320 --> 00:09:25.190
Did we define text box?

160
00:09:25.190 --> 00:09:29.290
&gt;&gt; Jafar Husain: I think we
defined text box up here.

161
00:09:29.290 --> 00:09:33.740
And then we got the keypresses collection
by converting the keypress event on

162
00:09:33.740 --> 00:09:36.760
the text box to that
keypresses stream observable.

163
00:09:38.060 --> 00:09:42.347
So let's see if this works,
ladies and gents.

164
00:09:42.347 --> 00:09:46.740
I don't see my HTML bar, here we go.

165
00:09:49.290 --> 00:09:51.070
So rarely do these things
work on the first time,

166
00:09:51.070 --> 00:09:52.900
so this'll be an opportunity for
us to do some debugging.

167
00:09:55.760 --> 00:09:58.970
We've still got our alert there, hey.

168
00:10:00.510 --> 00:10:03.774
Well, we're not 100% sure
everything worked correctly yet, so

169
00:10:03.774 --> 00:10:05.445
we'll take a few more keypresses.

170
00:10:05.445 --> 00:10:06.479
But let's run it again.

171
00:10:06.479 --> 00:10:11.008
Now that we got our environment situation
all set up I have a feeling things

172
00:10:11.008 --> 00:10:12.770
are gonna be much smoother.

173
00:10:12.770 --> 00:10:17.360
So I'm gonna run this,

174
00:10:17.360 --> 00:10:21.267
and T-E rminator.

175
00:10:21.267 --> 00:10:24.700
Hey, all right.

176
00:10:24.700 --> 00:10:26.960
Not too shabby for
an autocomplete box, right?

177
00:10:26.960 --> 00:10:27.670
Not a lot of code.

