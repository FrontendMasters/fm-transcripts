WEBVTT

1
00:00:00.000 --> 00:00:04.353
[MUSIC]

2
00:00:04.353 --> 00:00:07.187
&gt;&gt; Speaker 1: Is the Close
button's observable gone to,

3
00:00:07.187 --> 00:00:10.940
I'm thinking it's still
around if you click Close.

4
00:00:10.940 --> 00:00:11.820
&gt;&gt; Jafar Husain: Good question.

5
00:00:11.820 --> 00:00:14.970
What happened to the close observable?

6
00:00:14.970 --> 00:00:16.110
Well, let's see where it lives.

7
00:00:17.360 --> 00:00:20.370
It lives inside of this closure.

8
00:00:21.790 --> 00:00:25.793
So as soon as this closure ends,
right, and, well,

9
00:00:25.793 --> 00:00:29.370
not technically as soon as closure ends,
because we're

10
00:00:29.370 --> 00:00:34.320
listening to searchFormCloses,
which is all listening to keypresses.

11
00:00:34.320 --> 00:00:37.630
It's very difficult sometimes to figure
out if something's still in memory but

12
00:00:37.630 --> 00:00:42.440
notice that as soon as this closer,
runs once, right?

13
00:00:42.440 --> 00:00:45.190
We're going to begin
listening to keypresses and

14
00:00:45.190 --> 00:00:48.340
keypresses is a global
event in the browser.

15
00:00:48.340 --> 00:00:50.600
If you look up an event to keypresses,

16
00:00:50.600 --> 00:00:52.930
it's there unless you come along and
remove it.

17
00:00:52.930 --> 00:00:56.760
So even though this whole
function completes and

18
00:00:56.760 --> 00:01:01.300
we've declared closeClicks
inside of this function,

19
00:01:01.300 --> 00:01:04.690
you might expect that this observable
has gone away, but it hasn't.

20
00:01:04.690 --> 00:01:08.530
It hasn't because it's chained off of
a closure of a closure of a closure of

21
00:01:08.530 --> 00:01:11.930
a closure, holding on to keypresses.

22
00:01:11.930 --> 00:01:20.460
Excuse me, to, yes, keypresses on the DOM
of that, that's still inside of the DOM.

23
00:01:20.460 --> 00:01:25.533
So as long as that object is still inside
of the DOM, right, you're gonna have that

24
00:01:25.533 --> 00:01:30.769
handler exist and it's going to be holding
onto indirectly this right here, right.

25
00:01:30.769 --> 00:01:34.639
You can just follow the chain down and
see that because we're still listening to

26
00:01:34.639 --> 00:01:37.654
keypresses, we're still
listening to searchFormCloses.

27
00:01:37.654 --> 00:01:40.347
Does that make sense?

28
00:01:40.347 --> 00:01:42.170
Yeah, another question?

29
00:01:42.170 --> 00:01:45.942
&gt;&gt; Speaker 1: When does
searchButtonClicks for each get run so

30
00:01:45.942 --> 00:01:48.335
that the do action gets fired?

31
00:01:48.335 --> 00:01:53.884
&gt;&gt; Jafar Husain: It will get run as soon
as this whole operation is foreached over.

32
00:01:53.884 --> 00:01:58.585
If I delete this, we haven't even
hooked up to the Close button or

33
00:01:58.585 --> 00:02:01.756
Search button or anything for that matter.

34
00:02:04.113 --> 00:02:08.007
&gt;&gt; Jafar Husain: Because all we've
done with this whole expression here,

35
00:02:08.007 --> 00:02:12.854
can get rid of the extra boilerplate code,
with this whole expression,

36
00:02:12.854 --> 00:02:17.460
all we've done is create
an observable waiting to be called.

37
00:02:17.460 --> 00:02:19.980
So I haven't done a thing, I haven't
looked up a single event handler.

38
00:02:19.980 --> 00:02:24.554
It's all because of forEach and remember
we can go through the go around the table

39
00:02:24.554 --> 00:02:27.325
and play the forEach onNext game again,
right.

40
00:02:27.325 --> 00:02:28.620
But that's basically what's happened.

41
00:02:28.620 --> 00:02:30.890
We've created an observable but
nobody's called forEach yet.

42
00:02:30.890 --> 00:02:33.490
So it's just an object with a single
function waiting to be called.

43
00:02:35.110 --> 00:02:36.200
Crossed my hands over that microphone.

44
00:02:36.200 --> 00:02:36.700
Yep?

45
00:02:38.360 --> 00:02:41.200
&gt;&gt; Speaker 1: What would be the best
way to test for open observables?

46
00:02:42.670 --> 00:02:46.120
&gt;&gt; Jafar Husain: For observables
that have not yet been unsubscribed?

47
00:02:46.120 --> 00:02:48.070
Is that the question?

48
00:02:48.070 --> 00:02:51.650
Right, so that can be challenging.

49
00:02:51.650 --> 00:02:54.550
If you're trying to figure out if
an observable hasn't been unsubscribed,

50
00:02:54.550 --> 00:02:55.640
it's difficult.

51
00:02:55.640 --> 00:02:59.630
You could always go inside of
an observable that you own and

52
00:02:59.630 --> 00:03:03.210
log the subscriptions and
then log the unsubscriptions, right.

53
00:03:03.210 --> 00:03:06.702
So you could use do action, for example,
right, to log so, you can create

54
00:03:06.702 --> 00:03:10.640
an observable that wraps around another
observable, and every single time forEach

55
00:03:10.640 --> 00:03:13.761
is called they could just forward
on the forEach and then log open.

56
00:03:13.761 --> 00:03:16.490
And then every single time an onCompleted
is called you could log close.

57
00:03:16.490 --> 00:03:19.200
You could use do action on
the onCompleted to log close.

58
00:03:19.200 --> 00:03:22.250
Do action doesn't have a function for,
onSubscribe.

59
00:03:22.250 --> 00:03:26.140
But you could just create an observable
that just forwards the forEach call onto

60
00:03:26.140 --> 00:03:28.450
another observable, to do that.

61
00:03:28.450 --> 00:03:29.050
Yep.

62
00:03:29.050 --> 00:03:31.045
&gt;&gt; Speaker 1: Could we use, take one,

63
00:03:31.045 --> 00:03:35.806
for the searchOnCloseStream
to clean up those listeners?

64
00:03:35.806 --> 00:03:37.970
&gt;&gt; Jafar Husain: We could.

65
00:03:37.970 --> 00:03:39.340
But that's just gonna
end up being a no op.

66
00:03:39.340 --> 00:03:42.710
I mean, it's going to end up being a no
op because that's what takeUntil does

67
00:03:42.710 --> 00:03:43.220
under the hood.

68
00:03:43.220 --> 00:03:48.727
Effectively it does, as soon as it gets
a single item out of searchFormCloses,

69
00:03:48.727 --> 00:03:52.605
it call subscription.dispose
on searchFormCloses.

70
00:03:52.605 --> 00:03:54.920
So then it stops listing
to searchFormCloses.

71
00:03:54.920 --> 00:03:59.064
Now, granted, as soon as company
calls search again, right.

72
00:03:59.064 --> 00:04:01.530
As soon as the search
button is clicked again,

73
00:04:01.530 --> 00:04:03.627
this function will run all over again.

74
00:04:03.627 --> 00:04:07.859
We will create closeClicks, an observable
which is based off of the close button

75
00:04:07.859 --> 00:04:12.357
click, clicks, and then we'll create this
whole sub-expression all over again.

76
00:04:12.357 --> 00:04:15.005
And then we'll be listening to that.

77
00:04:15.005 --> 00:04:21.042
But in the meantime, between a search and
a close click, did I break my example?

78
00:04:24.827 --> 00:04:25.964
&gt;&gt; Jafar Husain: I broke my example.

79
00:04:36.680 --> 00:04:40.384
&gt;&gt; Jafar Husain: In the meantime, we
shouldn't be listening to that event all.

80
00:04:44.587 --> 00:04:51.228
&gt;&gt; Jafar Husain: This was working.

81
00:04:51.228 --> 00:04:52.656
That should work now.

82
00:04:58.565 --> 00:05:01.104
&gt;&gt; Jafar Husain: Okay, so
between the search and the close click,

83
00:05:01.104 --> 00:05:03.583
as soon as we hit close
we're not listening, and

84
00:05:03.583 --> 00:05:07.580
we proved that earlier we're not
listening to text box anymore right.

85
00:05:07.580 --> 00:05:10.871
We're creating these observables but
then we're really throwing them away,

86
00:05:10.871 --> 00:05:12.943
as soon as another item
comes through the stream.

87
00:05:12.943 --> 00:05:15.138
And so in other words,
as soon as we click Search again,

88
00:05:15.138 --> 00:05:17.720
we're creating a potentially
all those DOM elements again.

89
00:05:17.720 --> 00:05:20.455
In this case we're just hiding them and
showing them, but as you can see,

90
00:05:20.455 --> 00:05:23.910
wherever we're hiding and showing we could
actually be dynamically creating and

91
00:05:23.910 --> 00:05:25.980
putting on screen those elements.

92
00:05:25.980 --> 00:05:31.050
So it's safe to do that because we're also
making sure to unhook from the text box,

93
00:05:31.050 --> 00:05:32.260
from the keypresses event.

94
00:05:32.260 --> 00:05:34.640
So we won't just leak
event handlers everywhere.

95
00:05:34.640 --> 00:05:38.270
So you will see the same pattern again and
again in user interfaces.

96
00:05:38.270 --> 00:05:41.460
Some action causes a form to open,
that may contain one or

97
00:05:41.460 --> 00:05:43.860
more asynchronous actions, right.

98
00:05:43.860 --> 00:05:47.680
And you all want it to stop as soon as you
hit a Close button or that form closes.

99
00:05:47.680 --> 00:05:51.200
And so that combination of switchLatest
and takeUntil will get you that

100
00:05:51.200 --> 00:05:54.200
without ever having to worry about
explicitly unsubscribing from events.

