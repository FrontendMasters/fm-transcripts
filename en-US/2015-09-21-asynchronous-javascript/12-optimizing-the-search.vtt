WEBVTT

1
00:00:00.000 --> 00:00:03.572
[MUSIC]

2
00:00:03.572 --> 00:00:06.252
&gt;&gt; Jafar Husain: Now, you mentioned
earlier that you kinda thought that we

3
00:00:06.252 --> 00:00:08.449
would be using switchlatest for
this, right?

4
00:00:08.449 --> 00:00:11.190
Notice, I'm using concatAll,
instead of switchlatest.

5
00:00:11.190 --> 00:00:13.210
Well, that's actually more appropriate.

6
00:00:13.210 --> 00:00:16.908
I'm just aping what switchlatest does
here, right, because with takeUntil and

7
00:00:16.908 --> 00:00:19.442
concatAll, I'm simulating
what switchlatest does.

8
00:00:19.442 --> 00:00:22.730
Because every single time a new
observable comes along, right,

9
00:00:22.730 --> 00:00:26.813
I've applied takeUntil to the event that
causes a new observable to come along.

10
00:00:26.813 --> 00:00:29.948
So whenever a new observable comes along,
the old observable is gonna complete and

11
00:00:29.948 --> 00:00:31.607
that's exactly what switchlatest does and

12
00:00:31.607 --> 00:00:33.510
that's exactly why we can
simplify this to this.

13
00:00:35.620 --> 00:00:38.040
So, that's effectively
what switchlatest does,

14
00:00:38.040 --> 00:00:41.499
every single new observable is just take
until the next observable comes along.

15
00:00:44.010 --> 00:00:46.850
So, let's simplify this, to this and

16
00:00:46.850 --> 00:00:50.500
that is not bad in terms of code for
an auto complete box.

17
00:00:50.500 --> 00:00:54.050
We've solved some pretty hard
problems with very little code

18
00:00:54.050 --> 00:00:59.420
because we're thinking correctly about
what asynchronous programs really are.

19
00:00:59.420 --> 00:01:02.460
We're thinking about them as streams
of data that arrive over time.

20
00:01:02.460 --> 00:01:04.290
No different than an array.

21
00:01:04.290 --> 00:01:07.820
So retry, let's talk about retry.

22
00:01:08.830 --> 00:01:12.950
How many people you
know what promises are?

23
00:01:12.950 --> 00:01:13.800
Some people a little bit.

24
00:01:13.800 --> 00:01:16.420
One thing I will not be talking very much

25
00:01:16.420 --> 00:01:18.139
in this particular class
about is promises.

26
00:01:20.300 --> 00:01:21.930
So does that surprise some people?

27
00:01:21.930 --> 00:01:24.260
Probably some people expected me to
cover promises in an asynchronous

28
00:01:24.260 --> 00:01:25.220
JavaScript class.

29
00:01:25.220 --> 00:01:28.280
The reason why I won't be covering
promises, is that they are not

30
00:01:28.280 --> 00:01:32.760
very useful for the vast majority of
things that you do in a user interface.

31
00:01:32.760 --> 00:01:33.910
That might seem odd.

32
00:01:33.910 --> 00:01:36.539
They are in JavaScript,
they're actually be added to JavaScript 6.

33
00:01:37.780 --> 00:01:41.780
That doesn't mean that they are the right
asynchronous object to use for

34
00:01:41.780 --> 00:01:44.090
most of the problems that you
face in User Interface Design,

35
00:01:44.090 --> 00:01:48.000
in fact I think they're not the right one,
and there's a very simple reason for that.

36
00:01:48.000 --> 00:01:50.000
Promises cannot be cancelled.

37
00:01:52.440 --> 00:01:54.402
So, promises are obviously not the right,
for

38
00:01:54.402 --> 00:01:57.346
those of you who don't know what
a promises is, a promise is an object,

39
00:01:57.346 --> 00:02:00.280
which eventually resolves
asynchronously to a value.

40
00:02:00.280 --> 00:02:04.710
Now a promise can resolve either with
a value or it can reject with an error.

41
00:02:04.710 --> 00:02:07.460
It's a little bit like an observable
that can only give you a single value.

42
00:02:07.460 --> 00:02:10.720
So you can call a ven method,
which is sort of like for each.

43
00:02:10.720 --> 00:02:13.270
And you can give it two callbacks,
instead of three callbacks.

44
00:02:13.270 --> 00:02:16.220
You only give it two callbacks, because a
promise can only give you a single value.

45
00:02:16.220 --> 00:02:17.770
So there's no need for
the uncompleted callback.

46
00:02:17.770 --> 00:02:20.240
As soon as it gives you one
value you know you're done.

47
00:02:20.240 --> 00:02:24.710
The reason why we don't use promises for
asynchronous network requests or for

48
00:02:24.710 --> 00:02:28.220
animations for that matter, is because
you might need to cancel them, and

49
00:02:28.220 --> 00:02:29.850
a promise cannot be cancelled.

50
00:02:29.850 --> 00:02:32.570
So once you create a promise object,
it's either gonna resolve or

51
00:02:32.570 --> 00:02:36.900
it's gonna reject, but there's no way of
telling it, hey stop what you're doing.

52
00:02:36.900 --> 00:02:40.140
And that just doesn't make it very
appropriate for most UI actions.

53
00:02:40.140 --> 00:02:41.030
Promises are useful for

54
00:02:41.030 --> 00:02:44.440
some things, like async actions that
can't be cancelled effectively.

55
00:02:44.440 --> 00:02:47.940
But almost none of those things
are what you do use when you use,

56
00:02:47.940 --> 00:02:52.960
almost none of the async APIs you use when
building UIs, does not apply to, right,

57
00:02:52.960 --> 00:02:56.460
if you open a form and then something goes
back you might want to cancel animations

58
00:02:56.460 --> 00:02:58.470
you want to unhook event handlers and
so on and so forth.

59
00:02:58.470 --> 00:03:00.250
Right, you wanna clean up after yourself.

60
00:03:00.250 --> 00:03:01.970
With a promise,
there's just no way of doing that.

61
00:03:01.970 --> 00:03:05.760
So, I don't think it's a very useful
asynchronous primitive on the client.

62
00:03:05.760 --> 00:03:07.900
It's more useful on the server,
than it is on the client, but

63
00:03:07.900 --> 00:03:11.400
it is from the masters and that's not why
I'm not going to showing you promises.

64
00:03:11.400 --> 00:03:13.965
Observables are capable of doing
everything a promise is capable of

65
00:03:13.965 --> 00:03:14.513
doing right?

66
00:03:14.513 --> 00:03:18.150
Observable will get you one value,
it can push you 1000 values, right?

67
00:03:18.150 --> 00:03:19.450
The only difference is you can do more.

68
00:03:19.450 --> 00:03:21.650
And that's why I'm
teaching you observables.

69
00:03:21.650 --> 00:03:24.780
It's more appropriate,
because it's able with this one type

70
00:03:24.780 --> 00:03:28.360
to model not just async requests and
animations, but events as well.

71
00:03:28.360 --> 00:03:32.970
And so you can take the average unit
of work that a user interface does.

72
00:03:32.970 --> 00:03:35.860
And do it with a single type and it
turns out to actually much more elegant.

73
00:03:37.160 --> 00:03:38.840
Okay.
So, one of the things,

74
00:03:38.840 --> 00:03:43.520
because you can't cancel a promise and
a promise is always a hot data source, so

75
00:03:43.520 --> 00:03:45.460
when you get a promise,
it's already going.

76
00:03:45.460 --> 00:03:46.990
The network request is already going.

77
00:03:46.990 --> 00:03:49.250
That's not true necessarily
as an observable.

78
00:03:49.250 --> 00:03:50.920
Remember the getJSON
function we call here?

79
00:03:50.920 --> 00:03:53.080
When we get that observable out,
you know what?

80
00:03:53.080 --> 00:03:54.409
We haven't issued
a single network request.

81
00:03:55.600 --> 00:03:58.760
Creating the observable,
doesn't issue the network request.

82
00:03:58.760 --> 00:03:59.700
What we're talking about here,

83
00:03:59.700 --> 00:04:02.220
is that example of the cold
observable I talked about before.

84
00:04:03.250 --> 00:04:05.200
Nothing happens until you forEach over it.

85
00:04:06.380 --> 00:04:08.890
So when you get that observable out,
it's not gonna

86
00:04:08.890 --> 00:04:13.170
do a thing until you forEach over, which
the switchlatest operator will do right,

87
00:04:13.170 --> 00:04:15.360
when it gets the inner
observable it forEaches over it.

88
00:04:15.360 --> 00:04:17.844
So it's at, that's a distinction
between that and promises,

89
00:04:17.844 --> 00:04:20.975
when you call a function that returns
a promise, the work is already happening.

90
00:04:20.975 --> 00:04:22.090
Does that makes sense?

91
00:04:22.090 --> 00:04:25.346
So, a promise,
there's no way to retry a promise,

92
00:04:25.346 --> 00:04:29.250
a promise is a computation
that's going right now.

93
00:04:29.250 --> 00:04:32.590
You can call the function again that gave
you the promise and you can get it again,

94
00:04:32.590 --> 00:04:34.630
and that will retry the work, but

95
00:04:34.630 --> 00:04:37.820
with a promise itself, by itself,
there's no way to retry an operation.

96
00:04:38.970 --> 00:04:41.710
That's because a promise,
the work is already being done.

97
00:04:41.710 --> 00:04:46.620
With an observable, because it's
forEach that triggers the action,

98
00:04:46.620 --> 00:04:50.904
you can call forEach on one observable
three times, in this case the observable

99
00:04:50.904 --> 00:04:53.340
comes out in getJSON and
triggers three network requests.

100
00:04:54.350 --> 00:04:56.600
So if you call forEach on
this observable three times,

101
00:04:56.600 --> 00:04:59.660
you'll get three network requests,
that might not be what you want, but

102
00:04:59.660 --> 00:05:02.600
that's what this particular
function will do.

103
00:05:02.600 --> 00:05:05.900
So, well you probably don't wanna
issue three network requests.

104
00:05:05.900 --> 00:05:08.090
If you call forEach concurrently
three times, right.

105
00:05:08.090 --> 00:05:09.200
You'd rather have an issue one.

106
00:05:09.200 --> 00:05:10.610
And there's a way to do that, but

107
00:05:10.610 --> 00:05:14.280
by default this observable will
actually issue three network requests.

108
00:05:14.280 --> 00:05:17.460
But now what happens if you get
a network request and it fails?

109
00:05:17.460 --> 00:05:19.410
Well you can just call
forEach all over again and

110
00:05:19.410 --> 00:05:22.654
trigger another retry to
get that information.

111
00:05:22.654 --> 00:05:27.950
So forEach's lazy nature,
which is another way of calling laziness.

112
00:05:27.950 --> 00:05:29.490
An observable is lazy.

113
00:05:29.490 --> 00:05:31.190
It doesn't necessarily do any work,

114
00:05:31.190 --> 00:05:34.110
because it doesn't need to
until you call forEach on it.

115
00:05:34.110 --> 00:05:37.300
Because it's like a tree falling in
the forest, with nobody around to hear it.

116
00:05:37.300 --> 00:05:40.730
Why should observable do work to produce
values if nobody's listening yet?

117
00:05:40.730 --> 00:05:42.420
Does that make sense?

118
00:05:42.420 --> 00:05:45.450
So when you call forEach, that's when
the observable starts doing work.

119
00:05:45.450 --> 00:05:47.398
And that's why we call it lazy.

120
00:05:47.398 --> 00:05:50.353
So in this case, if you call
forEach on the getJSON observable,

121
00:05:50.353 --> 00:05:52.006
it will trigger a network request.

122
00:05:52.006 --> 00:05:56.632
And what retry does, is you give retry
an observable and it calls forEach, and

123
00:05:56.632 --> 00:05:59.433
if it gets an On Air back,
if On Air gets called,

124
00:05:59.433 --> 00:06:03.680
then it will increment a counter and
call forEach again.

125
00:06:03.680 --> 00:06:04.540
Does that makes sense?

126
00:06:04.540 --> 00:06:07.260
And it'll just keep calling foreach until
the counter gets to a certain level and

127
00:06:07.260 --> 00:06:08.280
then if it still gets an error,

128
00:06:08.280 --> 00:06:11.610
it'll forward the error along
to whoever's listening.

129
00:06:11.610 --> 00:06:12.930
Does that makes sense?

130
00:06:12.930 --> 00:06:15.570
And so Network requests

131
00:06:15.570 --> 00:06:17.920
are a great example of something
we almost always want to retry.

132
00:06:17.920 --> 00:06:20.380
Because intermittent network
failures happen all the time.

133
00:06:20.380 --> 00:06:22.450
It's probably not a good idea
to issue a network request and

134
00:06:22.450 --> 00:06:24.150
if it immediately errors just give up.

135
00:06:24.150 --> 00:06:28.070
Because server's not perfect,
servers have problems.

136
00:06:28.070 --> 00:06:30.100
If you're scaled out,
you might as well retry and

137
00:06:30.100 --> 00:06:33.450
try and hit another server, so
for those and many other reasons.

138
00:06:33.450 --> 00:06:37.370
Observable is a better way of modeling
asynchronous requests than promises,

139
00:06:37.370 --> 00:06:38.810
because A, you can cancel them, B,

140
00:06:38.810 --> 00:06:43.616
you can retry them and C, frankly, some
network requests might stream data, right?

141
00:06:43.616 --> 00:06:46.500
They might stream multiple pieces of data
and then observables obviously a better

142
00:06:46.500 --> 00:06:49.008
fit than that for promises which
can only send you a single value.

143
00:06:49.008 --> 00:06:52.540
So we won't be talking very much
about promises in front of masters.

144
00:06:52.540 --> 00:06:53.440
If you have questions about it,

145
00:06:53.440 --> 00:06:56.720
we can talk about it, but my
recommendation is that you don't use them.

146
00:06:58.710 --> 00:07:00.780
And for UI development, for
pervasive UI development,

147
00:07:00.780 --> 00:07:05.610
I don't think they're the right level
of abstraction for most async problems.

148
00:07:05.610 --> 00:07:08.950
I think observable is the right level
abstraction for most of the async problems

149
00:07:08.950 --> 00:07:15.230
using the user interface, so
do we understand this slide?

150
00:07:16.240 --> 00:07:17.880
We're gonna see the same
process happen again.

151
00:07:17.880 --> 00:07:19.730
We're gonna start with an event.

152
00:07:19.730 --> 00:07:22.150
We are gonna map it into
an asynchronous request.

153
00:07:22.150 --> 00:07:23.880
Thus creating a two
dimensional observable.

154
00:07:23.880 --> 00:07:27.751
And then we're gonna pick one of the three
flattening strategies to flatten it out,

155
00:07:27.751 --> 00:07:28.796
based on what we want.

156
00:07:28.796 --> 00:07:31.703
So those three steps,
we'll take the observables we have,

157
00:07:31.703 --> 00:07:35.298
compose them into the observable we want,
those are three steps, right?

158
00:07:35.298 --> 00:07:38.349
And once we decide what these are we want
is, and then will forEach over it and

159
00:07:38.349 --> 00:07:40.880
we'll consume the data and
we'll do something with it.

160
00:07:40.880 --> 00:07:42.040
And that's that last step.

161
00:07:42.040 --> 00:07:44.510
I take the search result set and
I put it on screen.

162
00:07:44.510 --> 00:07:47.380
I've done something with it.

163
00:07:47.380 --> 00:07:51.516
Any questions?
&gt;&gt; Speaker 2: Directed to you Bill,

164
00:07:51.516 --> 00:07:54.518
is retry injected to the prototype
of functions to work

165
00:07:54.518 --> 00:07:57.056
on any functions we create?
&gt;&gt; Jafar Husain: Retry is not on

166
00:07:57.056 --> 00:08:00.270
a function, so
that's difficult to see here.

167
00:08:00.270 --> 00:08:04.540
The fellow thinks that retry is on
a function, it's not, it's on observable,

168
00:08:04.540 --> 00:08:06.310
getJSON returns an observable.

169
00:08:06.310 --> 00:08:09.390
So, retry is on the observables prototype.

170
00:08:09.390 --> 00:08:11.040
So, it's a method on observable.

171
00:08:11.040 --> 00:08:13.300
Cuz getJSON returns an observable.

172
00:08:13.300 --> 00:08:14.850
We're not calling retry on a function,

173
00:08:14.850 --> 00:08:16.989
we're calling it on the result of
the function, which is an observable.

174
00:08:18.960 --> 00:08:20.590
Right.
Because observables are lazy,

175
00:08:20.590 --> 00:08:22.180
you can write retry over an observable.

176
00:08:22.180 --> 00:08:25.530
Because it just keep calling forEeach and
restarting the action.

177
00:08:25.530 --> 00:08:28.470
But if observable wasn't lazy, like
a promise, you can't call retrial on it.

178
00:08:30.570 --> 00:08:32.008
Yeah.
Question in the back?

179
00:08:32.008 --> 00:08:33.100
&gt;&gt; Speaker 2: If we use switchlatest,

180
00:08:33.100 --> 00:08:34.296
why do we use the throttle,

181
00:08:34.296 --> 00:08:38.877
is it through authorization?
&gt;&gt; Jafar Husain: No the throttle is what

182
00:08:38.877 --> 00:08:42.196
turns abc, def, into cf.

183
00:08:42.196 --> 00:08:45.800
That's to keep us from sending
many many network requests.

184
00:08:45.800 --> 00:08:47.680
But I see the question he's asking.

185
00:08:47.680 --> 00:08:48.730
That's actually a great question.

186
00:08:49.790 --> 00:08:54.000
If we remove this throttle right here, we
would actually get the exact same result.

187
00:08:54.000 --> 00:08:57.180
So this it's a very perceptive question
from the because he's looking at this and

188
00:08:57.180 --> 00:08:59.330
saying like, well, why are you doing this?

189
00:08:59.330 --> 00:09:02.220
Because, every single time we
get a new key press, we're just

190
00:09:02.220 --> 00:09:05.730
gonna cancel the outgoing network request
anyway, which is, all we've done with

191
00:09:05.730 --> 00:09:09.080
throttle is we've just eliminated a few
keys before we issue a network request.

192
00:09:09.080 --> 00:09:12.950
So throttle is actually, purely,
a performance optimization in this case.

193
00:09:12.950 --> 00:09:16.430
Because, we've dropped a and b, right?

194
00:09:16.430 --> 00:09:20.390
Later on, let's say we didn't drop a and
b, and d and e.

195
00:09:20.390 --> 00:09:23.620
And we just actually let
abcdef all the way through.

196
00:09:23.620 --> 00:09:25.730
What we still would have just created
are a bunch of network requests and

197
00:09:25.730 --> 00:09:26.710
then cancelled them.

198
00:09:26.710 --> 00:09:30.712
And so by filtering out a and
b from a, b, c, d, e, f,

199
00:09:30.712 --> 00:09:33.770
and d and e from a, b, c, d, e, f.

200
00:09:33.770 --> 00:09:36.530
Which avoid creating network requests
that we're gonna turn around and

201
00:09:36.530 --> 00:09:37.850
cancel them immediately anyways.

202
00:09:37.850 --> 00:09:39.990
So it's actually cheaper because
we don't create the observable.

203
00:09:39.990 --> 00:09:41.450
So that's a great question.

204
00:09:41.450 --> 00:09:42.900
It's actually purely
a performance opposition.

205
00:09:42.900 --> 00:09:43.590
Yes.
&gt;&gt; Speaker 3: So does it

206
00:09:43.590 --> 00:09:44.710
cancel the request or

207
00:09:44.710 --> 00:09:49.440
does it just not listen to the result?
&gt;&gt; Jafar Husain: Great question.

208
00:09:49.440 --> 00:09:51.430
Well it's really all up to the observable,
right?

209
00:09:51.430 --> 00:09:54.340
If she says,
look I don't want any more cake right?

210
00:09:54.340 --> 00:09:57.710
I'm the producer,
I might be able to pick up the phone and

211
00:09:57.710 --> 00:10:01.320
call the cake makers and say like,
stop the order, stop making cake.

212
00:10:01.320 --> 00:10:02.710
I don't want any more.

213
00:10:02.710 --> 00:10:05.470
Or, I could just leave
the phone on the hook and

214
00:10:05.470 --> 00:10:06.820
when the cake comes just
throw in the garbage.

215
00:10:06.820 --> 00:10:08.390
It's totally up to me.

216
00:10:08.390 --> 00:10:09.590
Now most observables,

217
00:10:09.590 --> 00:10:13.780
understandably, well written ones would
wanna do the former and not the latter.

218
00:10:13.780 --> 00:10:16.140
And so in practice, yes,
that is what getJSON does.

219
00:10:16.140 --> 00:10:17.490
It actually goes to the XHR and

220
00:10:17.490 --> 00:10:19.840
calls abort.
&gt;&gt; Speaker 3: Okay.

221
00:10:19.840 --> 00:10:20.720
&gt;&gt; Jafar Husain: So that may or

222
00:10:20.720 --> 00:10:22.820
may not actually stop the network
request from going out.

223
00:10:22.820 --> 00:10:25.180
But at the very minimum,
it'll stop you from getting called with

224
00:10:25.180 --> 00:10:25.738
the results.

225
00:10:25.738 --> 00:10:26.427
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Jafar Husain: Right?

226
00:10:26.427 --> 00:10:29.335
But, very often in fact, you will be able
to stop the network request from going

227
00:10:29.335 --> 00:10:30.885
out, especially in cases like this,

228
00:10:30.885 --> 00:10:33.405
where you've got a lot of inputs coming
in because what is gonna happen is

229
00:10:33.405 --> 00:10:35.985
the browser will build
a queue of outgoing requests.

230
00:10:35.985 --> 00:10:39.262
So, it's not that you issued a request
already, it's that it's actually awaiting

231
00:10:39.262 --> 00:10:43.765
to issue a request.
&gt;&gt; Jafar Husain: Yep.

232
00:10:43.765 --> 00:10:44.665
&gt;&gt; Speaker 2: Can you use retry to

233
00:10:44.665 --> 00:10:46.465
pull a request?
&gt;&gt; Jafar Husain: To

234
00:10:46.465 --> 00:10:48.890
pull a request?
&gt;&gt; Speaker 2: To poll.

235
00:10:48.890 --> 00:10:50.170
&gt;&gt; Jafar Husain: You wouldn't use retry to

236
00:10:50.170 --> 00:10:51.200
poll.

237
00:10:51.200 --> 00:10:55.120
Although retry is a lot like poll, because
you keep making a request again and

238
00:10:55.120 --> 00:10:56.320
again and again, right?

239
00:10:56.320 --> 00:11:01.280
But retry is specifically just for that
one behavior of making sequential requests

240
00:11:01.280 --> 00:11:03.760
and only continuing as long
as you're getting errors.

241
00:11:03.760 --> 00:11:04.890
Up until a certain point.

242
00:11:04.890 --> 00:11:06.480
We will learn how to poll, though.

243
00:11:06.480 --> 00:11:10.170
It is perfectly possible to do a poll,
by creating an observable,

244
00:11:10.170 --> 00:11:13.470
that fires an item every hundred
milliseconds or something.

245
00:11:13.470 --> 00:11:15.750
Like an interval, you said a set interval.

246
00:11:15.750 --> 00:11:19.087
So you can do a set interval, which is
just you give the browser a callback and

247
00:11:19.087 --> 00:11:21.920
it just fires that callback again
every hundred milliseconds.

248
00:11:21.920 --> 00:11:22.930
Or whatever interval you define.

249
00:11:22.930 --> 00:11:24.740
You can also create an observable.

250
00:11:24.740 --> 00:11:28.153
Just on next to you every hundred
milliseconds, and then you can take that

251
00:11:28.153 --> 00:11:32.062
and map that into a network request, and
now you've got a poll, right, now you've

252
00:11:32.062 --> 00:11:35.780
got an input observable that's just
gonna fire every hundred milliseconds.

253
00:11:35.780 --> 00:11:39.246
If you map each one of those items that it
delivers in on next, it might be just null

254
00:11:39.246 --> 00:11:42.570
or true or something, into an observable
that makes a network request.

255
00:11:42.570 --> 00:11:43.990
Now you've actually got a poll,

256
00:11:43.990 --> 00:11:45.676
because every hundred milliseconds
you make another request.

257
00:11:47.040 --> 00:11:47.940
Yeah?
&gt;&gt; Speaker 2: Question,

258
00:11:47.940 --> 00:11:51.630
are you gonna engage
the internals of getJSON later?

259
00:11:51.630 --> 00:11:53.350
&gt;&gt; Jafar Husain: Yes, but not right now.

260
00:11:53.350 --> 00:11:56.800
For now it's just, you take it on
faith that under the hood it's using

261
00:11:56.800 --> 00:12:01.440
XML HTTP request and it's gonna onNext you
the result and onComplete immediately.

262
00:12:03.520 --> 00:12:04.320
Yeah?
&gt;&gt; Speaker 2: Then, one more question,

263
00:12:04.320 --> 00:12:08.530
SwitchLatest Is switching between
multiple observables in this example,

264
00:12:08.530 --> 00:12:12.510
is map returning multiple observables?
&gt;&gt; Jafar Husain: Well no,

265
00:12:13.550 --> 00:12:16.990
map always takes an observable and
takes every item,

266
00:12:16.990 --> 00:12:19.600
well depends what he means
by multiple observables.

267
00:12:19.600 --> 00:12:22.760
Map is just a very simple
mechanical function that takes

268
00:12:22.760 --> 00:12:25.590
every item in the collection,
runs it through a function and

269
00:12:25.590 --> 00:12:29.510
it's effectively substituting that item
for a new item into a new collection.

270
00:12:29.510 --> 00:12:33.260
So like number 1, 2, 3,
if I apply a plus 1 function to 1, 2, and

271
00:12:33.260 --> 00:12:35.810
3, I get 2, 3, 4 into a new collection.

272
00:12:35.810 --> 00:12:39.570
Here in the case of map, the function is
actually returning another collection.

273
00:12:39.570 --> 00:12:42.970
And so, we're going from a one dimensional
collection to a two dimensional collection

274
00:12:42.970 --> 00:12:45.380
cuz the map functions returning yet
another collection.

275
00:12:45.380 --> 00:12:49.001
So we go from 1, 2, 3 to one array
of 1 comma, array of 2 comma,

276
00:12:49.001 --> 00:12:53.131
array of 3 effectively, so that's what
we're gonna find again and again,

277
00:12:53.131 --> 00:12:56.545
we're gonna see the same pattern,
we're gonna take events.

278
00:12:56.545 --> 00:12:58.790
We're gonna to map them into
a synchronous requests,

279
00:12:58.790 --> 00:13:00.436
creating a two dimensional collection.

280
00:13:00.436 --> 00:13:03.560
And then we're gonna pick
the right flattening pattern to

281
00:13:03.560 --> 00:13:06.880
flatten them out again, and once we've
flattened our observable, then and

282
00:13:06.880 --> 00:13:09.730
only then will we call forEach,
because calling forEach over

283
00:13:09.730 --> 00:13:11.600
two dimensional observable
is not a lot of fun.

284
00:13:11.600 --> 00:13:12.560
It's really weird, right?

285
00:13:12.560 --> 00:13:15.210
It's hard.
Who wants to have to deal with this

286
00:13:15.210 --> 00:13:17.630
inner and outer observable stuff?

287
00:13:17.630 --> 00:13:19.970
You let the flattening operators
do that work for you, and

288
00:13:19.970 --> 00:13:22.540
then you only have to worry about
a nice flat observable of results.

289
00:13:22.540 --> 00:13:28.533
Does that make sense?
&gt;&gt; Speaker 2: Where

290
00:13:28.533 --> 00:13:31.690
are the multiple observables coming from?
&gt;&gt; Jafar Husain: For

291
00:13:31.690 --> 00:13:34.030
every key press right?

292
00:13:34.030 --> 00:13:37.789
Let's look what happens for every key
press we've run it through map, and

293
00:13:37.789 --> 00:13:39.820
getJSON returns an observable.

294
00:13:39.820 --> 00:13:44.140
And so that means for every key press
object we create a new observable.

295
00:13:44.140 --> 00:13:47.530
So that's where the multiple observables
are coming from, before we just had

296
00:13:47.530 --> 00:13:51.150
a stream of key event objects and now
after the map operation, we have a stream

297
00:13:51.150 --> 00:13:56.780
of observables, we have an observable of
observables, because the map function

298
00:13:56.780 --> 00:13:59.360
is taking each one of those keypresses and
converting into another observable.

299
00:13:59.360 --> 00:14:01.420
Yes?
&gt;&gt; Speaker 2: Is that inner

300
00:14:01.420 --> 00:14:03.430
collection returned by map,

301
00:14:03.430 --> 00:14:07.770
does that only have one element?
&gt;&gt; Jafar Husain: In this instance, yes,

302
00:14:07.770 --> 00:14:11.410
it's observable of one because
getJSON just makes a network request,

303
00:14:11.410 --> 00:14:13.930
takes whatever comes back from
the network and then on next it and

304
00:14:13.930 --> 00:14:14.940
then immediately on complete.

305
00:14:14.940 --> 00:14:17.100
So, yes it only contains one element.

306
00:14:17.100 --> 00:14:19.780
So we're creating an observable
of observables of one.

