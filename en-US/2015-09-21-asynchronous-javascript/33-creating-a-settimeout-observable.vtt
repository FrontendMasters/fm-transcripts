WEBVTT

1
00:00:00.000 --> 00:00:03.720
[MUSIC]

2
00:00:03.720 --> 00:00:06.040
&gt;&gt; Jafar Husain: Let's do you
setTime out as an observable.

3
00:00:06.040 --> 00:00:10.060
I'm just gonna create my handle and call.

4
00:00:10.060 --> 00:00:14.710
Actually, I'm just going to take
this code right here, paste it in.

5
00:00:14.710 --> 00:00:19.070
However, instead of just calling some
arbitrary handler, inside of here,

6
00:00:19.070 --> 00:00:21.560
we're just going to call observer on next.

7
00:00:21.560 --> 00:00:24.890
Now, I'm not really going to get, I'm just
basically going to give it undefined.

8
00:00:24.890 --> 00:00:26.205
We don't care about the value, right?

9
00:00:26.205 --> 00:00:27.511
SetTimeout doesn't really emit a value.

10
00:00:27.511 --> 00:00:31.577
So I'm just gonna call next to send
a message essentially that the timeout has

11
00:00:31.577 --> 00:00:33.091
elapsed to the observable.

12
00:00:33.091 --> 00:00:40.660
And now, because setTimeout's never
gonna fire again after this right.

13
00:00:40.660 --> 00:00:43.670
SetTimeout fires only once
after a certain elapse time, so

14
00:00:43.670 --> 00:00:45.990
I also wanna say you know what?

15
00:00:45.990 --> 00:00:50.561
There's not gonna be any more callbacks
and so I tell the observer, onCompleted.

16
00:01:01.361 --> 00:01:02.021
&gt;&gt; Jafar Husain: So that's what

17
00:01:02.021 --> 00:01:04.520
observable is I'm not quite done but
it's pretty close.

18
00:01:07.090 --> 00:01:14.795
So now if I take this time out,
&gt;&gt; Jafar Husain: I'm

19
00:01:14.795 --> 00:01:19.412
actually gonna create a
&gt;&gt; Jafar Husain: Timeout

20
00:01:19.412 --> 00:01:21.668
function which when given the time,

21
00:01:21.668 --> 00:01:26.959
will return an observable.
&gt;&gt; Jafar Husain: Which

22
00:01:26.959 --> 00:01:28.063
fires after that time.

23
00:01:37.624 --> 00:01:38.766
&gt;&gt; Jafar Husain: Now I can just call

24
00:01:38.766 --> 00:01:43.720
timeout, five seconds and now what I've
done is I created an observable that

25
00:01:43.720 --> 00:01:47.660
will fire after five seconds once you for
each over it.

26
00:01:47.660 --> 00:01:51.663
But notice just this code all I've done
is create an object with a function.

27
00:01:51.663 --> 00:01:53.183
Hasn't done a darn thing.

28
00:01:53.183 --> 00:01:56.726
Yes?
&gt;&gt; Speaker 2: Do we have an observer in

29
00:01:56.726 --> 00:01:57.577
scope?

30
00:01:57.577 --> 00:01:59.894
Like where are we getting the value for

31
00:01:59.894 --> 00:02:02.140
our observer variable?
&gt;&gt; Jafar Husain: We're not.

32
00:02:02.140 --> 00:02:04.270
I think sorry going to expand
this out a little bit.

33
00:02:04.270 --> 00:02:07.380
We're not because observer is that for

34
00:02:07.380 --> 00:02:09.190
each is just a function
waiting to be called.

35
00:02:09.190 --> 00:02:13.862
It's when we call forEach that we will
actually pass in that observer object.

36
00:02:13.862 --> 00:02:15.180
Does that makes sense?

37
00:02:15.180 --> 00:02:18.850
So time out is just going to create
us this observable right here.

38
00:02:21.890 --> 00:02:23.962
Notice we haven't written,
we haven't run the thing, right?

39
00:02:23.962 --> 00:02:27.014
Just created an object with a function
on it, haven't done anything.

40
00:02:27.014 --> 00:02:28.594
But as soon as I do this,

41
00:02:39.755 --> 00:02:42.735
&gt;&gt; Jafar Husain: Now,
I'm traversing the observable.

42
00:02:42.735 --> 00:02:43.755
I've called forEach.

43
00:02:43.755 --> 00:02:47.465
And now we can see that why nothing
happens until we call forEach.

44
00:02:47.465 --> 00:02:50.210
It's only when the forEach function gets
called that we're actually going to call

45
00:02:50.210 --> 00:02:51.124
a set time out on the browser.

46
00:02:51.124 --> 00:02:52.450
Does that makes sense?

47
00:02:53.880 --> 00:02:55.660
Now, we're missing a piece.

48
00:02:55.660 --> 00:02:58.375
forEach always returns
a subscription object.

49
00:02:58.375 --> 00:03:00.190
Remember that, that subscription object?

50
00:03:00.190 --> 00:03:04.870
Because we need a way for the consumer of
the data to say I don't want that anymore.

51
00:03:04.870 --> 00:03:06.430
I don't want the result of timeout.

52
00:03:07.920 --> 00:03:10.436
We need a way for
them to unsubscribe so to speak, right?

53
00:03:10.436 --> 00:03:15.554
And a subscription object,
much like an observable,

54
00:03:15.554 --> 00:03:21.350
is just an object with a single
function on it called dispose.

55
00:03:23.470 --> 00:03:25.250
Anybody wanna tell me how
to complete this function?

56
00:03:27.410 --> 00:03:32.410
So this is how you unsubscribe
from a setTimeout, right?

57
00:03:32.410 --> 00:03:35.166
So when somebody calls dispose
on the subscription object,

58
00:03:39.406 --> 00:03:40.689
&gt;&gt; Jafar Husain: I want to make sure to

59
00:03:40.689 --> 00:03:46.141
never call, ever call, the onNext,
onError, onCompleted functions ever again.

60
00:03:48.470 --> 00:03:55.312
How do I make sure that never happens?
&gt;&gt; Speaker 3: onNext

61
00:03:55.312 --> 00:03:56.382
empty.
&gt;&gt; Jafar Husain: So

62
00:03:56.382 --> 00:04:01.820
I could effectively set the onNext
method to an empty function.

63
00:04:01.820 --> 00:04:02.370
Right?

64
00:04:02.370 --> 00:04:05.270
But that would work, right?

65
00:04:05.270 --> 00:04:08.540
But now I'm actually changing
somebody else's object, remember?

66
00:04:08.540 --> 00:04:10.100
Somebody passed this object to me.

67
00:04:10.100 --> 00:04:11.710
I don't want to muck with
somebody else's object.

68
00:04:13.660 --> 00:04:15.640
Now, I told you earlier,

69
00:04:15.640 --> 00:04:21.310
there's an API that will cause
a timeout to stop basically.

70
00:04:21.310 --> 00:04:25.440
You can cancel a timeout using
this clear timeout API right here.

71
00:04:26.840 --> 00:04:33.490
So all I have to do is when somebody
calls subscription.dispose, call this.

72
00:04:33.490 --> 00:04:35.869
That's how an observable
cleans up after itself.

73
00:04:36.880 --> 00:04:39.780
It's the observable's responsibility,
such that when you say, look,

74
00:04:39.780 --> 00:04:42.830
I don't want the data anymore,
for it to clean up after itself.

75
00:04:42.830 --> 00:04:45.350
So now, by doing clear Timeout handle,

76
00:04:45.350 --> 00:04:48.850
what we've actually done is,
the browser has now freed this handler.

77
00:04:48.850 --> 00:04:52.040
Because that's what happens
when you call clear timeout.

78
00:04:52.040 --> 00:04:55.410
Because you're basically saying
to the browser, don't call me.

79
00:04:55.410 --> 00:04:58.490
So then the browser naturally frees your
call back cause why would it hold on your

80
00:04:58.490 --> 00:05:00.610
callback if it's never gonna call you?

81
00:05:00.610 --> 00:05:02.040
So we've cleaned up after ourselves.

82
00:05:03.490 --> 00:05:05.800
This is what's different about creating
a promise and creating observable.

83
00:05:05.800 --> 00:05:09.190
There's this extra piece here at
the end which is you have to describe

84
00:05:09.190 --> 00:05:12.200
how if somebody decides they
want to get that data any more,

85
00:05:12.200 --> 00:05:13.160
how to clean up after yourself.

86
00:05:14.170 --> 00:05:17.310
It's just a slight change to this
to make this work for dominance.

87
00:05:17.310 --> 00:05:22.946
So let's actually write from event.
&gt;&gt; Jafar Husain: So,

88
00:05:22.946 --> 00:05:26.527
once again we see the same pattern first,
as soon as forEach is called,

89
00:05:26.527 --> 00:05:28.330
we wanna subscribe up to the event.

90
00:05:28.330 --> 00:05:30.960
We wanna cause whatever side
effect is gonna happen,

91
00:05:30.960 --> 00:05:33.590
that is gonna lead to us eventually
getting push that value.

92
00:05:33.590 --> 00:05:39.740
So, in this case I'm gonna go
dom.addEventListener, eventName

93
00:05:41.420 --> 00:05:47.930
and I'm going to pass this
handler directly to it.

94
00:05:47.930 --> 00:05:50.450
Still you know just a slightly
different shape of an API but

95
00:05:50.450 --> 00:05:51.860
basically doing the same thing.

96
00:05:51.860 --> 00:05:55.090
This time, however, setTimeout doesn't
really give you an interesting value which

97
00:05:55.090 --> 00:05:58.150
is sort of calls you and there's nothing
interesting past to the function.

98
00:05:58.150 --> 00:06:01.200
However, here, events obviously
do give you an interesting value.

99
00:06:01.200 --> 00:06:04.460
So I want to thread along the event object

100
00:06:04.460 --> 00:06:07.240
that you get in addEventListener
into the stream.

101
00:06:07.240 --> 00:06:11.384
So the observable just becomes a stream of
all of the event objects that your handler

102
00:06:11.384 --> 00:06:14.418
would have been called with
had you used addEventListener.

103
00:06:14.418 --> 00:06:18.609
And now, because an event doesn't
end after the first item, right,

104
00:06:18.609 --> 00:06:21.850
there could be many,
many more of such items.

105
00:06:21.850 --> 00:06:24.660
I'm not going to call on completed because
the stream isn't completed, right.

106
00:06:24.660 --> 00:06:26.480
The event could call you
a hundred more times,

107
00:06:26.480 --> 00:06:29.270
there could be a hundred more mouse moves,
right.

108
00:06:29.270 --> 00:06:30.919
So I'm not going to say it's
complete because it isn't.

109
00:06:32.490 --> 00:06:35.180
So, now we're actually adopting
a Dom event into an observable.

110
00:06:35.180 --> 00:06:40.110
But what's the missing piece?
&gt;&gt; Speaker 4: removeEventListener.

111
00:06:40.110 --> 00:06:40.764
&gt;&gt; Jafar Husain: Right, we have to clean

112
00:06:40.764 --> 00:06:41.358
up after ourselves.

113
00:06:41.358 --> 00:06:45.618
So cleaning up after ourselves with
a setTimeout means calling clearTimeout.

114
00:06:45.618 --> 00:06:49.116
But the cleaning are up after
ourselves with an event means calling

115
00:06:49.116 --> 00:06:55.524
removeEventListener.
&gt;&gt; Jafar Husain: Oops,

116
00:06:55.524 --> 00:06:57.780
now I have to give my handler a name.

117
00:06:57.780 --> 00:07:00.560
This is why dealing with events is so
annoying as far as I'm concerned.

118
00:07:00.560 --> 00:07:02.270
It's a classic example of why it's so
annoying.

119
00:07:03.760 --> 00:07:05.275
You have to hold on to the handler,

120
00:07:05.275 --> 00:07:08.645
this is the sort of stuff that we don't
have to do, thanks to takeUntil, right?

121
00:07:08.645 --> 00:07:10.345
Instead of having to hold
on to some handler and

122
00:07:10.345 --> 00:07:13.755
then later on calling removeEventListener,
I'm actually just going to use takeUntil

123
00:07:13.755 --> 00:07:18.285
to declaratively describe when I
want an observable stream to end.

124
00:07:18.285 --> 00:07:20.125
Turns out to be much less code.

125
00:07:20.125 --> 00:07:25.374
So now that I've given this thing a name,
&gt;&gt; Jafar Husain: Now I'm

126
00:07:25.374 --> 00:07:27.190
gonna pass that same handler.

127
00:07:29.540 --> 00:07:33.110
And that's how we adapt a dom
event into an observable.

128
00:07:33.110 --> 00:07:35.250
So that's what's going on under the hood.

129
00:07:35.250 --> 00:07:38.450
Hopefully you guys have got a good enough
sense of now how an observable works.

130
00:07:38.450 --> 00:07:40.416
Just an object with a function
waiting to be called, right.

131
00:07:40.416 --> 00:07:44.244
And then at that point, it will hook up to
an event and return a subscription which,

132
00:07:44.244 --> 00:07:46.486
when disposed of,
will do whatever it needs to,

133
00:07:46.486 --> 00:07:50.530
to make sure that you're never called
it again and clean up after itself.

134
00:07:50.530 --> 00:07:53.461
So let's go back to our exercises.
&gt;&gt; Speaker 5: They're asking if you

135
00:07:53.461 --> 00:07:56.270
could throw a new gist for them.
&gt;&gt; Jafar Husain: That's a good question.

136
00:07:56.270 --> 00:07:57.292
&gt;&gt; Speaker 5: Just to save

137
00:07:57.292 --> 00:08:02.815
the example.
&gt;&gt; Speaker 5: And

138
00:08:02.815 --> 00:08:06.746
in your set time out example,
someone was saying wouldn't set interval

139
00:08:06.746 --> 00:08:10.230
be more appropriate?
&gt;&gt; Jafar Husain: Well appropriate,

140
00:08:10.230 --> 00:08:14.170
yes in the sense that a set interval
is just like a setTimeout except

141
00:08:14.170 --> 00:08:17.490
it actually calls your call back
every two hundred milliseconds.

142
00:08:17.490 --> 00:08:19.410
But both are equally appropriate.

143
00:08:19.410 --> 00:08:21.950
So the only difference between
the setTimeout example we saw in the set

144
00:08:21.950 --> 00:08:24.490
interval example is that we
wouldn't call on completed.

145
00:08:24.490 --> 00:08:28.050
Because the set interval calls you again
and again and again every two seconds.

146
00:08:28.050 --> 00:08:30.270
A setTimeout just calls
you after two seconds.

147
00:08:30.270 --> 00:08:31.260
But the answer is that they're

148
00:08:31.260 --> 00:08:33.720
both totally appropriate to
convert into an observable.

149
00:08:33.720 --> 00:08:37.430
But the message here is take every single
asynchronous API in your system and

150
00:08:37.430 --> 00:08:38.870
adapt it into an observable.

151
00:08:38.870 --> 00:08:41.830
Because then you can combine together
these asynchronous data sources

152
00:08:41.830 --> 00:08:42.960
seamlessly.

153
00:08:42.960 --> 00:08:45.477
So, yeah,
adapt the setTimeout into an observable.

154
00:08:45.477 --> 00:08:47.197
Have it call you once and
then call you on completed.

155
00:08:47.197 --> 00:08:49.724
And yes,
adapt set interval into an observable and

156
00:08:49.724 --> 00:08:52.960
have it just keep calling
you on next forever, right?

157
00:08:52.960 --> 00:08:55.660
So if I take that same example,
let me just see if I can throw in a gist

158
00:08:55.660 --> 00:09:00.987
here.
&gt;&gt; Jafar Husain: So

159
00:09:00.987 --> 00:09:04.059
now if you take that and
simply run it, it won't work, and

160
00:09:04.059 --> 00:09:08.222
the reason is that the observable is
actually a constructor with a prototype.

161
00:09:08.222 --> 00:09:11.000
So it has map and filter and
all those other chains on it.

162
00:09:11.000 --> 00:09:14.660
I'm just showing you the actual, what
the object really looks like structurally.

163
00:09:14.660 --> 00:09:19.440
Now if you want to make this really work
with Rx, it just has a helper function for

164
00:09:19.440 --> 00:09:22.280
creating observables
called Observable.create.

165
00:09:22.280 --> 00:09:25.950
And instead of creating
an object with a forEach method,

166
00:09:25.950 --> 00:09:30.240
you just directly pass in the only method
on an observable, which is forEach, so

167
00:09:30.240 --> 00:09:32.240
it's kind of a handy
little helper function.

168
00:09:35.020 --> 00:09:36.810
And this will actually work in Rx.

169
00:09:39.620 --> 00:09:41.924
And the other thing that
the Observable.create does, so

170
00:09:41.924 --> 00:09:44.462
instead of forcing you to create
an object with only one method,

171
00:09:44.462 --> 00:09:47.487
it's just a helper function you can
pass in just the definition of forEach.

172
00:09:47.487 --> 00:09:51.151
The same thing happens, instead of forcing
you to create a subscription object

173
00:09:51.151 --> 00:09:54.760
with only one method that's a function,
it allows you to just directly return

174
00:09:54.760 --> 00:09:58.339
the Dispose function, and then it wraps
it inside of a subscription object.

175
00:09:59.970 --> 00:10:05.209
So those you out there trying it,
this will actually work.

176
00:10:05.209 --> 00:10:08.359
Yeah, question?
&gt;&gt; Speaker 5: They're saying that they get

177
00:10:08.359 --> 00:10:11.680
that onCompleted would never
be called on a dom event.

178
00:10:11.680 --> 00:10:13.460
But when would onError get called?

179
00:10:13.460 --> 00:10:17.240
Is it always up to the specific API?
&gt;&gt; Jafar Husain: Well for a dom event, for

180
00:10:17.240 --> 00:10:18.190
your typical dom event,

181
00:10:18.190 --> 00:10:21.300
never because a mouse move if never
going to tell you error, right?

182
00:10:21.300 --> 00:10:26.340
But there are some events that look like
dom events, like on an XMLHttpRequest,

183
00:10:26.340 --> 00:10:27.580
for example, right?

184
00:10:27.580 --> 00:10:32.670
Where although the XMLHttpRequest
doesn't have a specific API for

185
00:10:32.670 --> 00:10:35.670
giving you an error, well,
my point here is that different

186
00:10:35.670 --> 00:10:39.500
push data sources may have different
arbitrary ways of communicating errors.

187
00:10:39.500 --> 00:10:41.780
And if you wanna adapt that data source,

188
00:10:41.780 --> 00:10:44.910
that push data source into an observable,
you need to just sort of check for

189
00:10:44.910 --> 00:10:48.290
whatever their particular way
of communicating an error is.

190
00:10:48.290 --> 00:10:50.320
And then if you get that, call onError.

191
00:10:50.320 --> 00:10:51.460
So that's your job,

192
00:10:51.460 --> 00:10:55.490
to take whatever the specific semantics
are of whatever that push data source are,

193
00:10:55.490 --> 00:10:59.170
and convert it into those three well
defined semantics on an observable.

194
00:10:59.170 --> 00:11:01.284
So if I was in an HTML request,
for example,

195
00:11:01.284 --> 00:11:04.084
I believe I would check to see
if I'm trying to recall, but

196
00:11:04.084 --> 00:11:07.997
I believe that I would check to see if
the state, if the return value was a 500.

197
00:11:07.997 --> 00:11:12.534
And so if I got to 500 on
the the response, I would call onError and

198
00:11:12.534 --> 00:11:14.536
then passing that response.

199
00:11:14.536 --> 00:11:18.587
That might be one potential way of mapping
an xmlhttp request into an observable

200
00:11:18.587 --> 00:11:19.345
data source.

201
00:11:19.345 --> 00:11:21.190
Does that makes sense?.

202
00:11:21.190 --> 00:11:24.090
So the problem we have today is we
have all these different APIs and

203
00:11:24.090 --> 00:11:27.980
they all have different, just like you saw
with setTimeout and addEventListener for

204
00:11:27.980 --> 00:11:30.800
no particularly good reason,
they all have different APIs for

205
00:11:30.800 --> 00:11:32.180
doing basically the same thing.

206
00:11:32.180 --> 00:11:35.760
And what observable can do is it can
give you a single common API for

207
00:11:35.760 --> 00:11:36.790
all these data sources.

208
00:11:36.790 --> 00:11:40.730
So it's well worth your time to take
whatever weird API you happen to be

209
00:11:40.730 --> 00:11:44.320
looking at, adapt it into an observable so
that you can begin to use the operators,

210
00:11:44.320 --> 00:11:48.500
those powerful operators, the map, filter,
take and till to glue them all together.

211
00:11:48.500 --> 00:11:52.509
So, that's the first step, take whatever
API you have, adapt it into an observable.

