WEBVTT

1
00:00:00.000 --> 00:00:04.124
[MUSIC]

2
00:00:04.124 --> 00:00:07.979
&gt;&gt; Jafar: So here we're gonna complete our
mouseDrag example, and what I'd like us to

3
00:00:07.979 --> 00:00:11.912
do is I'd like us to take a little break
and have you guys tackle this yourself.

4
00:00:11.912 --> 00:00:14.792
This is question 32, right?

5
00:00:14.792 --> 00:00:18.442
There's a mental leap that goes on here
where we draw a line from the example that

6
00:00:18.442 --> 00:00:21.764
we've been learning, from the way
we've been thinking about array and

7
00:00:21.764 --> 00:00:25.650
make that link now to make the leap to
thinking about events the same way.

8
00:00:25.650 --> 00:00:27.752
Right, and so I've showed you
the answer up on the board, but

9
00:00:27.752 --> 00:00:30.478
I really want you to work through it and
try and solve this particular question.

10
00:00:34.937 --> 00:00:36.213
&gt;&gt; Jafar: But when we're done,

11
00:00:36.213 --> 00:00:39.380
we should be able to drag this
Sprite across the screen.

12
00:00:41.130 --> 00:00:44.442
And if you run this example and it doesn't
work, make sure to refresh your browser

13
00:00:44.442 --> 00:00:46.986
because under the hood,
it's actually hooking up an event and

14
00:00:46.986 --> 00:00:49.510
if you keep running,
it'll just keep hooking up that event.

15
00:00:49.510 --> 00:00:53.220
So make sure to refresh your browser if
you run it, it doesn't work and try again.

16
00:00:53.220 --> 00:00:56.760
Remember it'll will save your state and
everywhere you are.

17
00:00:56.760 --> 00:00:59.140
So somebody out there was having
trouble getting exercise to work, so

18
00:00:59.140 --> 00:01:03.900
it might be a little bug in the exercise
here, that's okay we'll switch over and

19
00:01:03.900 --> 00:01:04.880
make it work somehow.

20
00:01:07.180 --> 00:01:08.680
Did anybody actually
get the Sprite to move?

21
00:01:10.910 --> 00:01:11.680
Not yet?

22
00:01:11.680 --> 00:01:12.740
Okay, that's not a good sign.

23
00:01:18.980 --> 00:01:20.314
&gt;&gt; Speaker 2: I got it moving.

24
00:01:20.314 --> 00:01:22.080
&gt;&gt; Jafar: You did?
Okay, which browser are you on?

25
00:01:22.080 --> 00:01:24.141
Im curious.
&gt;&gt; Speaker 2: Firefox.

26
00:01:24.141 --> 00:01:25.329
&gt;&gt; Jafar: Firefox, right?

27
00:01:54.049 --> 00:01:58.904
&gt;&gt; Speaker 2: Put in that catalog and
it might fix it for you.

28
00:01:58.904 --> 00:02:00.073
&gt;&gt; Jafar: This one?

29
00:02:00.073 --> 00:02:02.070
&gt;&gt; Speaker 2: Cuz you just added that,
right?

30
00:02:02.070 --> 00:02:03.482
&gt;&gt; Jafar: Yeah.

31
00:02:03.482 --> 00:02:09.165
See, all right.

32
00:02:12.770 --> 00:02:14.340
So let's take a look at this code.

33
00:02:14.340 --> 00:02:16.963
What did I do here?

34
00:02:16.963 --> 00:02:22.120
Well, for every mouse down, I mapped over
all of the sprite container, mouse moves.

35
00:02:22.120 --> 00:02:25.210
Now this container that you see
right here, this grey container,

36
00:02:25.210 --> 00:02:26.660
this is the sprite container.

37
00:02:26.660 --> 00:02:29.490
So why do I listen to the mouse moves
on the sprite container instead of on

38
00:02:29.490 --> 00:02:30.440
the sprite itself?

39
00:02:30.440 --> 00:02:30.960
Does anybody know?

40
00:02:33.100 --> 00:02:34.320
Well, because of this case.

41
00:02:34.320 --> 00:02:37.992
If I move real quick, my mouse can
actually get ahead of the sprite.

42
00:02:37.992 --> 00:02:39.999
And so the mouse move won't
register on the sprite,

43
00:02:39.999 --> 00:02:41.789
it'll only register on
the container above.

44
00:02:41.789 --> 00:02:44.627
So that's why we added an event
handler to the sprite container.

45
00:02:44.627 --> 00:02:47.880
And we listened for mouseup for
the same reason on the sprite container.

46
00:02:47.880 --> 00:02:51.740
So we map over every mouse down.

47
00:02:51.740 --> 00:02:54.240
And so now we've got a collection of mouse
that we start with a collection of mouse

48
00:02:54.240 --> 00:02:57.610
downs and then for every one of
those mouse down event objects,

49
00:02:57.610 --> 00:03:01.186
those are the same event objects you
would've gotten in an add event listener,

50
00:03:01.186 --> 00:03:04.400
we substituted using map for

51
00:03:04.400 --> 00:03:07.839
the stream of all the mouse
moves until the next mouse up.

52
00:03:09.660 --> 00:03:11.470
How many collections level deep is that?

53
00:03:11.470 --> 00:03:12.744
How many levels deep?

54
00:03:19.728 --> 00:03:21.350
&gt;&gt; Jafar: How many levels deep is this?

55
00:03:23.720 --> 00:03:25.710
So somebody said two, why is it two?

56
00:03:25.710 --> 00:03:28.100
This is the most important thing for
you guys to be able to,

57
00:03:28.100 --> 00:03:30.480
it's hard, it's the most important
thing for you guys be able to do,

58
00:03:30.480 --> 00:03:33.930
to be able to visualize how deep
the collection you're creating is.

59
00:03:33.930 --> 00:03:36.520
And here's something you'd always
go back to if you have problems,

60
00:03:36.520 --> 00:03:38.390
always go back to first principles.

61
00:03:38.390 --> 00:03:39.162
So I got this, right?

62
00:03:39.162 --> 00:03:41.162
That's an array, I understand and array.

63
00:03:41.162 --> 00:03:46.949
If I map over this and
return this, what pops out?

64
00:03:46.949 --> 00:03:50.302
&gt;&gt; [INAUDIBLE]
&gt;&gt; Jafar: Right,

65
00:03:50.302 --> 00:03:54.671
because if I map over this and

66
00:03:54.671 --> 00:03:58.683
I put in this, I get this.

67
00:03:58.683 --> 00:04:04.053
The whole point is the map function is
applied to every item in the collection.

68
00:04:04.053 --> 00:04:07.347
And then the result is
substituted into the new array.

69
00:04:14.647 --> 00:04:20.520
&gt;&gt; Jafar: So if I apply this
function here to 1, what comes out?

70
00:04:20.520 --> 00:04:21.710
An array of 1.

71
00:04:21.710 --> 00:04:27.240
If I apply this function here to 2,
what pops out?

72
00:04:27.240 --> 00:04:28.570
An array of 2.

73
00:04:28.570 --> 00:04:33.510
So, if your map function
returns another collection,

74
00:04:33.510 --> 00:04:36.070
you're gonna end up with
a two dimensional collection.

75
00:04:36.070 --> 00:04:39.490
Because the income, if the incoming
collection is flat, right, which it is,

76
00:04:39.490 --> 00:04:43.600
here we can see the incoming collection's
flat, if for every single one of these

77
00:04:43.600 --> 00:04:48.080
items, we substitute another collection,
we have a two dimensional collection.

78
00:04:48.080 --> 00:04:50.530
And so the same thing applies here.

79
00:04:50.530 --> 00:04:53.781
Sprite container mouse moves, if we take
up the take until, it's very obvious,

80
00:04:53.781 --> 00:04:55.680
Spite container mouse
moves is an observable.

81
00:04:55.680 --> 00:05:00.904
Right, and so if for
every event object in the stream of mouse

82
00:05:00.904 --> 00:05:08.186
downs we substitute in another observable,
we have an observable of observables.

83
00:05:08.186 --> 00:05:12.740
And so, first thing I want to do, just
like I use filter previously on videos to

84
00:05:12.740 --> 00:05:17.225
limit the videos to only the ones I want,
now I'm gonna use takeUntil to limit

85
00:05:17.225 --> 00:05:21.230
the mouse moves to only the ones that
happen before the next mouse up.

86
00:05:23.340 --> 00:05:25.970
But that's still a collection.

87
00:05:25.970 --> 00:05:30.240
For every mouse down click,
I still created an observable for

88
00:05:30.240 --> 00:05:33.440
every mouse down click there is, so
I have a two dimensional collection.

89
00:05:33.440 --> 00:05:38.836
So I need to follow it up with

90
00:05:38.836 --> 00:05:44.006
concatAll to flatten it.

91
00:05:44.006 --> 00:05:50.045
So just like I take this here and
apply concAtAll and

92
00:05:50.045 --> 00:05:53.843
I get one, two, three, okay.

93
00:05:53.843 --> 00:05:54.670
Does that make sense?

94
00:05:56.110 --> 00:05:58.206
So can I shorten this?

95
00:05:58.206 --> 00:06:01.610
Yes, cuz whenever I see
a map followed by concAtAll,

96
00:06:01.610 --> 00:06:04.798
we can always just shorten it,
helper function.

97
00:06:09.433 --> 00:06:11.612
&gt;&gt; Jafar: But
now we understand, hopefully,

98
00:06:11.612 --> 00:06:16.040
how powerful this type of compositional
programming can be, right.

99
00:06:16.040 --> 00:06:19.680
That's a very little amount of code for
something pretty impressive, right?

