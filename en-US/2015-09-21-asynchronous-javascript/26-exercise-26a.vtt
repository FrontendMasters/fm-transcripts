WEBVTT

1
00:00:00.000 --> 00:00:03.593
[MUSIC]

2
00:00:03.593 --> 00:00:06.483
&gt;&gt; Jafar: As you're writing your
expressions, it's a really good coping

3
00:00:06.483 --> 00:00:09.900
mechanism, right, as you're finding
you're building big expressions,

4
00:00:09.900 --> 00:00:12.440
to be able to print them out and
see where you are.

5
00:00:12.440 --> 00:00:15.650
Now remember the key to solving
problems using functional programming,

6
00:00:15.650 --> 00:00:20.370
using the style, is to continue mapping
until you have an identifier bound to

7
00:00:20.370 --> 00:00:23.340
everything you need to
create your final result.

8
00:00:23.340 --> 00:00:27.100
And then you can figure out how
deeply nested your collection is and

9
00:00:27.100 --> 00:00:30.990
then figure out the right number of
flattens to apply and where to apply them.

10
00:00:30.990 --> 00:00:34.080
So let's give a shot here on 26.

11
00:00:34.080 --> 00:00:35.062
Now it's been a while since
I've seen this question.

12
00:00:35.062 --> 00:00:38.420
So I'm gonna be struggling through just
like you guys, I know this is a hard one.

13
00:00:38.420 --> 00:00:40.147
So we're going with even
deeper levels of nesting,

14
00:00:40.147 --> 00:00:42.303
so what I'm gonna do, by the way,
from now on is I'm gonna try and

15
00:00:42.303 --> 00:00:44.636
just paste it into a text editor as
these problems get bigger, right?

16
00:00:44.636 --> 00:00:47.710
It'll be a little easier for
us to work in a text editor.

17
00:00:47.710 --> 00:00:49.910
So I'm gonna switch over
to my text editor here.

18
00:00:49.910 --> 00:00:57.470
So here is the structure we have.

19
00:00:57.470 --> 00:00:59.980
So we have lists, we have videos.

20
00:00:59.980 --> 00:01:01.900
Now again,
we're using a relational structure here.

21
00:01:01.900 --> 00:01:04.870
So every video has a listId,
and then we have boxarts.

22
00:01:04.870 --> 00:01:08.910
And every boxart is within a video,
so it has a videoId.

23
00:01:08.910 --> 00:01:12.530
And every bookmark is also in a video,
so it has a videoId.

24
00:01:12.530 --> 00:01:14.650
So let's take a look at
what we have to create.

25
00:01:14.650 --> 00:01:20.840
So we're going from a relational
list to a hierarchical structure.

26
00:01:20.840 --> 00:01:22.989
So the video's array, so
this is what we wanna produce.

27
00:01:33.052 --> 00:01:34.980
&gt;&gt; Jafar: So
let's take a close look at what's in here.

28
00:01:34.980 --> 00:01:39.470
So we've got our top level,
we have an array of movie lists.

29
00:01:39.470 --> 00:01:42.180
Each movie list contains
an array of videos, right?

30
00:01:42.180 --> 00:01:47.310
And each video contains id,
title, time, and boxart.

31
00:01:47.310 --> 00:01:54.468
Now I'm guessing that time is gonna be,
&gt;&gt; Jafar: Pulled off of the bookmark, and

32
00:01:54.468 --> 00:01:59.532
I think it's the,
is it the middle interesting bookmark or,

33
00:02:05.539 --> 00:02:06.731
&gt;&gt; Jafar: Bookmark time and

34
00:02:06.731 --> 00:02:08.640
the smallest bookmark url.

35
00:02:12.290 --> 00:02:15.323
&gt;&gt; Jafar: This says bookmark time, but I'm
not sure which one cuz we've got several.

36
00:02:17.079 --> 00:02:17.624
&gt;&gt; Jafar: Let's see.

37
00:02:24.487 --> 00:02:26.831
&gt;&gt; Jafar: Has anybody finished that
question can tell me it's the smallest

38
00:02:26.831 --> 00:02:28.460
bookmark time or
the largest bookmark time?

39
00:02:29.790 --> 00:02:31.270
I expect it to be written here.

40
00:02:31.270 --> 00:02:31.770
&gt;&gt; Speaker 2: I think.

41
00:02:33.080 --> 00:02:33.704
&gt;&gt; Jafar: Which one was it?

42
00:02:37.632 --> 00:02:39.319
&gt;&gt; Speaker 2: I think there's
just one per videoId, right?

43
00:02:40.660 --> 00:02:42.810
&gt;&gt; Jafar: I see, it's linked up for
video by identifier.

44
00:02:42.810 --> 00:02:46.490
All right, is it linked up by identifier,
or is it actually linked up by position?

45
00:02:46.490 --> 00:02:49.430
Let's see, bookmark, yeah,
it's linked up by identifier.

46
00:02:49.430 --> 00:02:52.936
So we're gonna link up the bookmark
to the video by videoId,

47
00:02:52.936 --> 00:02:55.017
the boxart to the video by videoId.

48
00:02:55.017 --> 00:02:58.675
And we're gonna link up each
video to the list by id.

49
00:02:58.675 --> 00:03:01.665
So let's start at the very top
because we wanna create lists.

50
00:03:01.665 --> 00:03:03.365
Lists are what's on the outside, right?

51
00:03:03.365 --> 00:03:05.125
So first, I'm gonna go through the list.

52
00:03:05.125 --> 00:03:07.058
I'm gonna create one object for each list.

53
00:03:18.476 --> 00:03:20.911
&gt;&gt; Jafar: And I know I'm gonna be
applying some concatAll here, so

54
00:03:20.911 --> 00:03:23.666
I'm gonna move my map to the next
line because that's the rule.

55
00:03:23.666 --> 00:03:27.207
As soon as you have multiple verbs, you
only want them on the next line lined up.

56
00:03:27.207 --> 00:03:30.004
So now I'm gonna go through
each of the videos.

57
00:03:35.537 --> 00:03:38.592
&gt;&gt; Jafar: So first things first though,
actually I'm gonna create my list object

58
00:03:38.592 --> 00:03:41.810
because we know at the end of this,
we want an array of list objects, right?

59
00:03:41.810 --> 00:03:46.098
So for every list, we wanna create
an object containing properties, so

60
00:03:46.098 --> 00:03:48.572
I'm gonna create that right off the bat.

61
00:03:48.572 --> 00:03:50.971
And then that will contain
a videos collection.

62
00:03:55.372 --> 00:03:59.043
&gt;&gt; Jafar: Put that right in there, and
there may be some other properties we want

63
00:03:59.043 --> 00:04:01.593
on there,
I believe just the name of the list, so

64
00:04:01.593 --> 00:04:04.476
I'm just gonna stick that right in there,
right now.

65
00:04:07.924 --> 00:04:11.303
&gt;&gt; Jafar: So now we drill down because
we know that next comes video, so

66
00:04:11.303 --> 00:04:13.230
now we start mapping over video.

67
00:04:13.230 --> 00:04:16.160
So there's an order here, it's the same
order that we see in the hierarchy.

68
00:04:16.160 --> 00:04:19.165
So we start with lists, we move on
to videos, and then within videos,

69
00:04:19.165 --> 00:04:24.100
we're gonna move on to bookmarks and
middle interesting moment, or the time.

70
00:04:24.100 --> 00:04:27.960
So we go through the, I'm gonna move
this down one line here, video.

71
00:04:30.610 --> 00:04:32.390
So first thing I'm gonna
do is actually not map, but

72
00:04:32.390 --> 00:04:36.867
filter because I'm only interested
in the videos where the video's

73
00:04:36.867 --> 00:04:42.350
listId is equal to the current list.id.

74
00:04:42.350 --> 00:04:45.050
And I move that on to the next line,
notice as soon as I have,

75
00:04:45.050 --> 00:04:48.738
want more than one chained operation by
move it on to the next line, and I indent.

76
00:04:48.738 --> 00:04:53.698
So for each one of these videos though,
I'm gonna create a video object,

77
00:04:53.698 --> 00:04:56.339
and I wanna pull out which properties.

78
00:04:56.339 --> 00:04:57.890
I'm gonna pull out the id and title, so

79
00:04:57.890 --> 00:05:00.476
those are just some properties
I'm pulling right off the video.

80
00:05:11.090 --> 00:05:12.598
&gt;&gt; Jafar: And now comes the hard part.

81
00:05:12.598 --> 00:05:16.630
Well, I don't think it's any harder
actually than the previous example,

82
00:05:16.630 --> 00:05:19.945
it's the same thing over and
over and over again, right?

83
00:05:19.945 --> 00:05:22.434
Our structure, top to bottom, is just
the same structure that we wanna see in

84
00:05:22.434 --> 00:05:23.829
the output cuz we know
lists are at the top.

85
00:05:23.829 --> 00:05:27.885
So we map through lists first,
videos are next.

86
00:05:27.885 --> 00:05:30.245
We map through videos first,
and so on and so forth.

87
00:05:30.245 --> 00:05:33.425
Now the interesting thing though is
recognize that when we go through boxarts

88
00:05:33.425 --> 00:05:36.500
and we go through bookmarks, right,
there isn't a hierarchy here.

89
00:05:36.500 --> 00:05:38.415
They're both on the same level,
they're both on the video level.

90
00:05:38.415 --> 00:05:42.079
So there's no reason to map over
boxarts and then map over bookmarks any

91
00:05:42.079 --> 00:05:44.888
more than there is a reason
to do them the opposite way,

92
00:05:44.888 --> 00:05:48.040
mapping over bookmarks and
then mapping over boxarts.

93
00:05:48.040 --> 00:05:50.469
So effectively, we have access to
both of these lists at the same time.

94
00:05:50.469 --> 00:05:54.181
So there's no particular reason to map
because we don't have to go through one

95
00:05:54.181 --> 00:05:56.000
before we go through the other.

96
00:05:56.000 --> 00:05:57.640
So that may mean that
we need to use a zip.

97
00:05:57.640 --> 00:06:00.420
I don't know actually,
let's play around with it and try it out.

98
00:06:00.420 --> 00:06:02.660
Or we can just process them
both at the same time.

99
00:06:02.660 --> 00:06:07.909
So let's see, I have title, and
now we want time, and time is actually

100
00:06:07.909 --> 00:06:12.914
going to be the one bookmark time
that matches up with this video id.

101
00:06:12.914 --> 00:06:16.232
So I'm gonna start doing something
that I think is a mistake, and

102
00:06:16.232 --> 00:06:19.530
it's the same mistake we made
all the way back in question 12.

103
00:06:19.530 --> 00:06:20.960
I think I've made a mistake here,
which is,

104
00:06:20.960 --> 00:06:22.800
I've tried to create the result too early.

105
00:06:22.800 --> 00:06:24.020
We'll see if that's true.

106
00:06:24.020 --> 00:06:25.086
So I'm gonna go through bookmarks.

107
00:06:30.934 --> 00:06:35.580
&gt;&gt; Jafar: And once again,
I just need to match that bookmark id,

108
00:06:35.580 --> 00:06:38.820
video id up with the current video id.

109
00:06:41.290 --> 00:06:45.010
All right, and before I keep going here,
do I have a problem?

110
00:06:45.010 --> 00:06:45.810
Can anybody tell me what my problem is?

111
00:06:54.301 --> 00:06:55.430
&gt;&gt; Speaker 3: You have an isolated
time on the bookmarks.

112
00:06:57.740 --> 00:07:00.520
&gt;&gt; Jafar: Time, that's true,
that's absolutely true.

113
00:07:00.520 --> 00:07:03.030
And I think I've used a map where I
should be using a filter here, right?

114
00:07:04.680 --> 00:07:08.720
I should be filtering for where
the bookmark ids are the same, not map,

115
00:07:08.720 --> 00:07:09.980
that's the wrong operation.

116
00:07:09.980 --> 00:07:14.331
So, you're absolutely right, let's map
that in, right, so I've got a bookmark.

117
00:07:14.331 --> 00:07:18.222
And I just wanna pull up the time off
that bookmark, that's one problem.

118
00:07:18.222 --> 00:07:23.430
And here, I wanna show off a way

119
00:07:23.430 --> 00:07:28.430
in which I think it's gonna be easier for
folks to cope with these big structures.

120
00:07:28.430 --> 00:07:31.870
If we can sort of work more iteratively
cuz notice this is big expression and

121
00:07:31.870 --> 00:07:35.420
we're kind of writing and writing, and
we don't really know where we are, so

122
00:07:35.420 --> 00:07:37.330
here's a way that we can
kind of cope with this.

123
00:07:39.490 --> 00:07:42.076
And it's also easier to do this in a text
editor cuz you can see where you're

124
00:07:42.076 --> 00:07:44.063
inlining, where your brackets
are matched up, right?

125
00:07:44.063 --> 00:07:47.310
So let me see, is that bracket matched up?

126
00:07:47.310 --> 00:07:50.148
No, I'm missing up here.

127
00:08:04.869 --> 00:08:08.170
&gt;&gt; Jafar: So let's take a look at,
sorry, question, yeah, or?

128
00:08:08.170 --> 00:08:11.070
&gt;&gt; Speaker 3: Well, you need to map
bookmarks with boxarts before you can.

129
00:08:12.300 --> 00:08:16.120
&gt;&gt; Jafar: You're absolutely right, I do,
but what I'm doing to demonstrate here is

130
00:08:16.120 --> 00:08:20.300
how we can just sort of work and
print out what we have as we go, right?

131
00:08:20.300 --> 00:08:25.205
The key here is as long as we just do the
map step first, as soon as we introduce

132
00:08:25.205 --> 00:08:29.790
concatAll, it's a little bit harder
because concatAll only works on a two

133
00:08:29.790 --> 00:08:32.580
dimensional array, we have to make sure
that each level we're using concatAll,

134
00:08:32.580 --> 00:08:34.190
we have to return a two dimensional array.

135
00:08:34.190 --> 00:08:38.642
So if we just don't do any concatting,
we worry about this in two separate steps,

136
00:08:38.642 --> 00:08:42.513
just keep mapping until we have all
of the identifiers we need in scope,

137
00:08:42.513 --> 00:08:45.108
notice that's what's going on here, right.

138
00:08:45.108 --> 00:08:50.220
That's how I'm bringing up and into scope
all the things I need to do my job.

139
00:08:50.220 --> 00:08:52.195
If we just keep mapping, well,
we're just gonna create trees, but

140
00:08:52.195 --> 00:08:53.657
the good thing about trees
is we can print them out,

141
00:08:53.657 --> 00:08:54.768
then we can figure out how deep we are.

142
00:08:54.768 --> 00:08:59.200
So we don't have to be lost in a sea
of just doing this all in our head.

143
00:08:59.200 --> 00:09:01.957
So I'm gonna try [COUGH]
do this right here.

144
00:09:35.514 --> 00:09:38.088
&gt;&gt; Jafar: So what I've done here
with these last two parameters to

145
00:09:38.088 --> 00:09:41.321
JSON.stringify, actually I'm not
entirely sure what the null is,

146
00:09:41.321 --> 00:09:44.320
I don't know offhand, but
the 2 describes the indent.

147
00:09:44.320 --> 00:09:47.759
So now if we do it like this,
JSON.stringify actually prints this out

148
00:09:47.759 --> 00:09:51.648
for us in a way that we can actually just
see what's going on and see the indent.

149
00:09:51.648 --> 00:09:54.360
Just gonna return the result
to make the function happy,

150
00:09:54.360 --> 00:09:55.500
we know we won't get the right answer.

151
00:09:55.500 --> 00:09:57.485
So we'll get an error here,
but that's okay.

152
00:09:57.485 --> 00:10:02.692
We had that problem with
the Firefox debugger earlier,

153
00:10:02.692 --> 00:10:09.469
but let's see if we can see if that
still happens, turn off the toolbar.

154
00:10:09.469 --> 00:10:14.441
Any Firefox experts here who can tell
me how to get that debugger to kick in?

155
00:10:20.050 --> 00:10:21.302
&gt;&gt; Jafar: Here we go, I think.

156
00:10:27.775 --> 00:10:30.947
&gt;&gt; Jafar: All right, so we're now at
a point where we can actually log,

157
00:10:30.947 --> 00:10:34.500
instead of using the debugger,
I'm just gonna log what we have.

158
00:10:34.500 --> 00:10:38.970
So, I've taken the expression so
far, I've logged it out.

159
00:10:38.970 --> 00:10:39.720
Let's take a look at it.

160
00:10:40.750 --> 00:10:41.250
What am I doing wrong?

161
00:10:46.764 --> 00:10:48.820
&gt;&gt; Jafar: We made this
mistake in question 12.

162
00:10:48.820 --> 00:10:52.180
I made the same mistake that I think
most people would make in question 12,

163
00:10:52.180 --> 00:10:54.530
which I started to create
my object too early.

164
00:10:54.530 --> 00:10:56.833
I created my result too early,
and then I found, no,

165
00:10:56.833 --> 00:10:58.798
I've still got this thing
boxed up in an array.

166
00:10:58.798 --> 00:11:00.790
I wanna get this value out of an array.

167
00:11:00.790 --> 00:11:03.390
Can anybody see the value that's boxed
up in the array that shouldn't be?

168
00:11:03.390 --> 00:11:04.054
&gt;&gt; Speaker 4: Time.

169
00:11:04.054 --> 00:11:06.450
&gt;&gt; Jafar: Time, right?

170
00:11:06.450 --> 00:11:08.200
I've hastily tried to create this object,
but

171
00:11:08.200 --> 00:11:11.540
I haven't managed to get that value
in the timer out of the array.

172
00:11:11.540 --> 00:11:12.820
So let's go back to our example.

173
00:11:14.000 --> 00:11:20.242
And well, I wanna map over time, right,
clearly cuz that's the answer usually.

174
00:11:20.242 --> 00:11:25.810
In order to bind a variable, right,
there's two ways to bind a variable

175
00:11:25.810 --> 00:11:31.580
to a collection, I can go item = arr[0],
or I can go arr.map, right?

176
00:11:31.580 --> 00:11:33.328
And this is the way we wanna do it.

177
00:11:33.328 --> 00:11:35.650
This is gonna work for synchronous and
asynchronous collections.

178
00:11:35.650 --> 00:11:37.590
And both accomplish the same thing.

179
00:11:37.590 --> 00:11:40.226
But before I do that,
I'm just gonna finish up.

180
00:11:40.226 --> 00:11:45.310
We're gonna get mostly there by
just finishing up the example for,

181
00:11:45.310 --> 00:11:46.840
I believe, it's box arts.

182
00:11:46.840 --> 00:11:50.860
So I wanna link up the boxart with the
video id, but I think this one is a little

183
00:11:50.860 --> 00:11:54.000
more challenging if I remember correctly,
because you have multiple boxarts, and

184
00:11:54.000 --> 00:11:56.970
we wanna pick out which one,
the smallest boxart, is it?

185
00:11:56.970 --> 00:11:58.920
&gt;&gt; Speaker 2: There's just one.

186
00:11:58.920 --> 00:11:59.700
&gt;&gt; Jafar: There's just one boxart?

187
00:11:59.700 --> 00:12:00.656
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Jafar: Cuz I see here, no,

188
00:12:00.656 --> 00:12:01.337
I see here multiple.

189
00:12:01.337 --> 00:12:03.817
&gt;&gt; Speaker 4: [CROSSTALK] In mine,
yeah, it's the smallest.

190
00:12:03.817 --> 00:12:07.840
&gt;&gt; Jafar: Yeah, so
here's two boxarts with the same video id.

191
00:12:07.840 --> 00:12:10.600
So it looks like we do
need to get the smallest.

192
00:12:10.600 --> 00:12:14.660
So I'm gonna stick, even though we
know that isn't the right answer yet,

193
00:12:14.660 --> 00:12:16.140
we're gonna get a little bit closer.

194
00:12:17.160 --> 00:12:20.235
And what I'll do is actually,
I'm gonna take the time section, and

195
00:12:20.235 --> 00:12:23.376
I'm gonna pull it out, and
we're just gonna assign it to a variable.

196
00:12:30.652 --> 00:12:34.175
&gt;&gt; Jafar: So we use filter and map because
we knew we could just pull out the time,

197
00:12:34.175 --> 00:12:37.820
and the only condition to pick
the right time was use the video id.

198
00:12:37.820 --> 00:12:40.820
So filter is the logical choice and then
we notice that we just wanted to pull up

199
00:12:40.820 --> 00:12:44.450
the time property, and whenever you wanna
just substitute an item in an array for

200
00:12:44.450 --> 00:12:47.980
some translation of that item,
map is the right choice.

201
00:12:47.980 --> 00:12:50.050
But now we've got a little
bit more of a challenge.

202
00:12:50.050 --> 00:12:58.450
We wanna get the boxart, and
there's a little more to it.

203
00:12:58.450 --> 00:13:01.329
It's not just about filtering for
video id,

204
00:13:01.329 --> 00:13:04.831
although that's definitely
something we have to do.

205
00:13:10.574 --> 00:13:11.924
&gt;&gt; Jafar: But
now we have another challenge,

206
00:13:11.924 --> 00:13:13.544
which is how do I pick
the smallest boxart,

207
00:13:13.544 --> 00:13:16.180
because this is actually gonna
give me more than one result.

208
00:13:16.180 --> 00:13:18.330
It's gonna give me multiple results.

209
00:13:18.330 --> 00:13:22.330
So can anybody tell me the right operator
use to use to pick the smallest boxart?

210
00:13:22.330 --> 00:13:23.120
&gt;&gt; Speaker 2: Reduce.

211
00:13:23.120 --> 00:13:24.795
&gt;&gt; Jafar: Reduce,
why do I have to use reduce?

212
00:13:24.795 --> 00:13:26.440
&gt;&gt; Speaker 2: Cuz you have to compare it.

213
00:13:26.440 --> 00:13:28.610
&gt;&gt; Jafar: Right, in order to
pick the smallest of something,

214
00:13:28.610 --> 00:13:31.640
I need to look at least two
things at the same time.

215
00:13:31.640 --> 00:13:35.282
So if I use accumulated and current,
right, remember how reduce works,

216
00:13:35.282 --> 00:13:39.157
we have a value that we've got in our hand
that we're sort of holding on to, and

217
00:13:39.157 --> 00:13:41.947
that's the value that we're
accumulating over time.

218
00:13:41.947 --> 00:13:43.314
And then we have the current,

219
00:13:43.314 --> 00:13:46.700
which is the value that's
the current item in the array.

220
00:13:46.700 --> 00:13:50.796
So in order to pick the smallest one,
I'm gonna return the accumulated boxart,

221
00:13:50.796 --> 00:13:53.278
width times height,
we're gonna go with area.

222
00:13:53.278 --> 00:13:55.670
Oops, I don't need
the return statement there.

223
00:13:57.600 --> 00:13:58.930
And I'm gonna move this to the next line,
so it stays visible.

224
00:14:03.127 --> 00:14:04.600
&gt;&gt; Jafar: And we want the smallest one.

225
00:14:04.600 --> 00:14:07.816
So if the accumulated width times height
is smaller than the current width times

226
00:14:07.816 --> 00:14:12.265
current height,
&gt;&gt; Jafar: We're gonna return

227
00:14:12.265 --> 00:14:15.708
the accumulated,
otherwise we're gonna return the current.

228
00:14:21.806 --> 00:14:28.934
&gt;&gt; Jafar: Okay,
&gt;&gt; Jafar: So

229
00:14:28.934 --> 00:14:33.320
now, we have two arrays,
each of which are one long,

230
00:14:33.320 --> 00:14:36.940
[LAUGH] which isn't super helpful, right?

