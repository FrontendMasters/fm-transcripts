WEBVTT

1
00:00:00.000 --> 00:00:03.915
[MUSIC]

2
00:00:03.915 --> 00:00:07.487
&gt;&gt; Speaker 1: With your experience
with asynchronous programming,

3
00:00:07.487 --> 00:00:11.367
how much gain do you see
potentially with proper tail calls?

4
00:00:11.367 --> 00:00:12.155
&gt;&gt; Jafar Husain: In asynchronous

5
00:00:12.155 --> 00:00:12.890
programming?

6
00:00:13.900 --> 00:00:18.830
None, because just to explain briefly,
what he's talking about,

7
00:00:18.830 --> 00:00:23.760
proper tail calls means if you have
a function, and you recursively call

8
00:00:23.760 --> 00:00:27.950
that function, and it happens to be the
last thing you do inside of that function,

9
00:00:27.950 --> 00:00:29.862
which is recursively call it again.

10
00:00:29.862 --> 00:00:33.179
What is gonna happen in JavaScript 6
is that instead of growing the stack,

11
00:00:33.179 --> 00:00:34.864
which is what happens if you usually,

12
00:00:34.864 --> 00:00:38.708
if you call a function inside of itself in
recursion, instead of that's not growing,

13
00:00:38.708 --> 00:00:42.523
in JavaScript 6, it'll basically turn that
into the equivalent of a loop, right?

14
00:00:42.523 --> 00:00:43.576
Cuz that's what you're doing.

15
00:00:43.576 --> 00:00:46.730
At the bottom of a function,
you just call that same function again.

16
00:00:46.730 --> 00:00:49.090
It's like it's coming,
it's almost like you had a loop.

17
00:00:49.090 --> 00:00:50.700
Does that make sense a little bit?

18
00:00:50.700 --> 00:00:52.230
And it was hard without an example, but

19
00:00:52.230 --> 00:00:55.240
the reason why it totally makes
no difference with asynchronous

20
00:00:55.240 --> 00:00:59.050
programming is that whenever you do
something asynchronous in JavaScript,

21
00:00:59.050 --> 00:01:02.390
what happens is that it gets
posted on to the event loop.

22
00:01:02.390 --> 00:01:03.870
Who here knows what the event loop is?

23
00:01:05.480 --> 00:01:06.480
Couple of people?

24
00:01:06.480 --> 00:01:11.090
The way JavaScript works is it
actually has a list of like a queue of

25
00:01:11.090 --> 00:01:13.180
functions to call.

26
00:01:13.180 --> 00:01:15.796
And whenever you set,
who's used set timeout?

27
00:01:15.796 --> 00:01:17.549
Whenever you do a set timeout,

28
00:01:17.549 --> 00:01:21.470
what's actually happening under
the hood is it takes the function.

29
00:01:21.470 --> 00:01:22.862
And what's a timeout is, by the way?

30
00:01:22.862 --> 00:01:26.851
It's an API where you handed a callback
and a time, and then the JavaScript

31
00:01:26.851 --> 00:01:31.435
environment invoke that callback after
a certain amount of time has elapsed.

32
00:01:31.435 --> 00:01:34.025
What happens under the hood is the
JavaScript's got this big list of things

33
00:01:34.025 --> 00:01:34.925
to do, and

34
00:01:34.925 --> 00:01:37.985
that just takes that function and
adds it to the big list of things to do.

35
00:01:37.985 --> 00:01:39.430
And eventually,

36
00:01:39.430 --> 00:01:43.350
when JavaScript, a certain amount of time
goes by, it'll execute that function.

37
00:01:43.350 --> 00:01:45.320
And then when that function completes,

38
00:01:45.320 --> 00:01:48.400
it just moves to the next step
in its list of things to do.

39
00:01:48.400 --> 00:01:50.753
Maybe that function that just
completes inside of it, and

40
00:01:50.753 --> 00:01:53.580
maybe that function just ran,
schedule another timeout.

41
00:01:53.580 --> 00:01:56.390
And that would post it down here
at the bottom of the queue and

42
00:01:56.390 --> 00:01:58.730
a list of things for JavaScript to do.

43
00:01:58.730 --> 00:02:02.555
My point is that if you're doing anything
asynchronous, it always just ends up

44
00:02:02.555 --> 00:02:06.700
getting posted on to the list of things to
do, and so it's not really tail recurrent.

45
00:02:06.700 --> 00:02:09.590
At that point, it's effectively as
if you're using tail recurrent,

46
00:02:09.590 --> 00:02:12.760
because JavaScript's got this big loop of
just going through those things to do,

47
00:02:12.760 --> 00:02:15.460
and so it's the equivalent
of using tail recursion.

48
00:02:15.460 --> 00:02:18.500
My point here is that tail recursion
really doesn't have very much to do with

49
00:02:18.500 --> 00:02:20.160
asynchronous programming.

50
00:02:20.160 --> 00:02:24.140
Because if you are scheduling the next
function asynchronously, it's

51
00:02:24.140 --> 00:02:26.690
like tail recursion, because it's gonna
get put in this big list of things to do,

52
00:02:26.690 --> 00:02:29.110
and JavaScript has this big loop
where it's going through it.

53
00:02:29.110 --> 00:02:32.030
So it's like tail recursion, cuz if you
take a recursive function and optimize it

54
00:02:32.030 --> 00:02:36.260
into a loop, I'm just repeating
the same operation again and again.

55
00:02:36.260 --> 00:02:37.484
So I think there may be
a slight confusion there.

56
00:02:37.484 --> 00:02:39.666
Tail recursion, not really a win for
async programming.

57
00:02:39.666 --> 00:02:42.324
Yeah?
&gt;&gt; Speaker 1: The next question was,

58
00:02:42.324 --> 00:02:45.754
can takeUntil take multiple
observables as stop collection or

59
00:02:45.754 --> 00:02:47.688
a collection of observables?
&gt;&gt; Jafar Husain: No,

60
00:02:47.688 --> 00:02:49.594
actually, I'm not 100% sure.

61
00:02:49.594 --> 00:02:53.390
It might actually be able to take
multiple collections as stop collections.

62
00:02:53.390 --> 00:02:57.084
However, it doesn't matter, because you
can always go some source collection

63
00:02:57.084 --> 00:03:00.618
.takeUntil some stop collection,
.takeUntil another stop collection,

64
00:03:00.618 --> 00:03:04.550
.takeUntil another stop collection,
.takeUntil another stop collection.

65
00:03:04.550 --> 00:03:07.240
So composition solves this problem for us.

66
00:03:11.280 --> 00:03:12.840
So anymore questions?

67
00:03:12.840 --> 00:03:14.480
Great, so

68
00:03:14.480 --> 00:03:17.660
now you guys know everything you need to
know to understand how this sample works.

69
00:03:17.660 --> 00:03:19.700
At least at a high level,
a conceptual level, right?

70
00:03:19.700 --> 00:03:22.190
We've got a function,
which accepts a DOM object.

71
00:03:22.190 --> 00:03:24.598
And then all the mouseDowns,
and mouseMoves, and

72
00:03:24.598 --> 00:03:27.430
mouseUp here were created
using observable.fromEvent.

73
00:03:27.430 --> 00:03:28.970
That's the piece of code
I've left out of here.

74
00:03:28.970 --> 00:03:32.210
Remember that piece of code that adapts
from a DOM event to an observable?

75
00:03:32.210 --> 00:03:34.180
So the mouseMove, mouseDowns and

76
00:03:34.180 --> 00:03:37.820
mouseUps on that DOM element were all
created using observable.fromEvent.

77
00:03:37.820 --> 00:03:41.490
So we adopted already those
mouseMoves into observable objects.

78
00:03:41.490 --> 00:03:49.710
So I can go back and quickly remind
you guys, right, it was this function.

79
00:03:49.710 --> 00:03:53.320
So let's imagine that we took the DOM
event, and we actually called fromEvent

80
00:03:53.320 --> 00:03:57.040
for a mouseDown and mouseMove and mouseUp,
and then we created the observable,

81
00:03:57.040 --> 00:04:00.457
we took the observer that came back and
actually added it to the DOM event.

82
00:04:00.457 --> 00:04:02.129
Now, instead of just talking about it,
I'll do it.

83
00:04:43.804 --> 00:04:44.668
&gt;&gt; Jafar Husain: So first things first.

84
00:04:44.668 --> 00:04:47.861
We create the mouseDown, mouseMove, and

85
00:04:47.861 --> 00:04:53.195
mouseUp observable by adapting them
from the DOM elements event name.

86
00:04:53.195 --> 00:04:57.455
We add those properties to the element
itself, and then that's where mouseDowns,

87
00:04:57.455 --> 00:05:00.335
mouseMoves, and
mouseUps come from on the DOM element.

88
00:05:00.335 --> 00:05:02.278
Does that make sense?

89
00:05:02.278 --> 00:05:03.003
Is that clear?

90
00:05:03.003 --> 00:05:04.783
Maybe not so much.

91
00:05:04.783 --> 00:05:06.340
I can make this even simpler.

92
00:05:19.940 --> 00:05:21.157
&gt;&gt; Jafar Husain: I was
trying to get clever there.

93
00:06:05.270 --> 00:06:06.982
&gt;&gt; Jafar Husain: So the first thing we do

94
00:06:06.982 --> 00:06:11.046
is we adapt from all of the DOM
events on this element.

95
00:06:11.046 --> 00:06:12.362
Close one.

96
00:06:12.362 --> 00:06:13.922
Still got me here?
&gt;&gt; Speaker 3: Yeah.

97
00:06:13.922 --> 00:06:15.360
&gt;&gt; Jafar Husain: So we adapt from

98
00:06:15.360 --> 00:06:20.000
all of the mouse events, the DOM events,
to an observable, and then we just

99
00:06:20.000 --> 00:06:23.420
take the observable that's on there, and
we stick it on to the element itself.

100
00:06:23.420 --> 00:06:27.832
And now that we've adopted the DOM event,
which is this weird adamant listener or

101
00:06:27.832 --> 00:06:30.700
movement listener thing,
into a single first class object.

102
00:06:30.700 --> 00:06:33.870
We can use these map filter
function to assemble

103
00:06:33.870 --> 00:06:36.470
a new event from three source events.

104
00:06:36.470 --> 00:06:39.190
So we're taking mouseDowns mouseMoves and
mouseUp, so

105
00:06:39.190 --> 00:06:41.633
we're composing them
together into mouse drags.

106
00:06:41.633 --> 00:06:44.062
And then at the bottom half of the slide,

107
00:06:44.062 --> 00:06:47.930
all we're doing is almost a slight
syntax that I wanna fix here.

108
00:06:47.930 --> 00:06:50.380
And now that I've created
a function with multiple lines,

109
00:06:50.380 --> 00:06:56.192
I need to add a return.
&gt;&gt; Jafar Husain: The arrow syntax,

110
00:06:56.192 --> 00:06:59.631
if using the arrow syntax, and you have
to execute multiple lines of code,

111
00:06:59.631 --> 00:07:02.860
you need to add a brace, and
you need an explicit return method.

112
00:07:02.860 --> 00:07:06.160
But if you only have one line of code,
you could omit the return method, and

113
00:07:06.160 --> 00:07:07.670
you could omit the braces.

114
00:07:07.670 --> 00:07:09.216
So now, this is correct.

115
00:07:09.216 --> 00:07:13.083
And so what I've done is at the very top
of the slide, I've created a function,

116
00:07:13.083 --> 00:07:16.952
which when given a DOM element will return
an observable of all the mouse drags on

117
00:07:16.952 --> 00:07:17.900
that DOM element.

118
00:07:17.900 --> 00:07:21.040
And on the bottom half of the slide,
I'm consuming the mouse drags now and for

119
00:07:21.040 --> 00:07:24.373
reaching over that observable that I've
created, and I'm consuming the data,

120
00:07:24.373 --> 00:07:25.790
and I'm doing something with it.

121
00:07:25.790 --> 00:07:27.560
In this case, moving the image around.

122
00:07:27.560 --> 00:07:28.790
Does that make sense?

