WEBVTT

1
00:00:00.000 --> 00:00:03.897
[MUSIC]

2
00:00:03.897 --> 00:00:07.534
&gt;&gt; Jafar: What we were gonna try and do
originally, we were going also to try and

3
00:00:07.534 --> 00:00:09.602
set it up so that if we change the model,

4
00:00:09.602 --> 00:00:12.094
we would write the data to the server,
right?

5
00:00:12.094 --> 00:00:15.090
We wanna just have it implicitly
sinking back to the server,

6
00:00:15.090 --> 00:00:17.300
every single time somebody
changes the model.

7
00:00:17.300 --> 00:00:20.040
So object observe can be
our way of doing that.

8
00:00:20.040 --> 00:00:25.300
So instead of directly
forEaching over this,

9
00:00:25.300 --> 00:00:29.120
I'm going to create an intermediate
observable personChanges, and

10
00:00:29.120 --> 00:00:32.580
then we are going to subscribe or
forEach over person changes.

11
00:00:32.580 --> 00:00:35.850
But now, I also have this observable
that I can forEach over that I can

12
00:00:35.850 --> 00:00:38.290
use as part of a larger
observable expression.

13
00:00:38.290 --> 00:00:42.420
So now we're gonna create
the stream of data that we

14
00:00:42.420 --> 00:00:44.690
want from the stream of data that we have.

15
00:00:44.690 --> 00:00:49.304
So, I'm gonna create a fake function here,
just a function that,,

16
00:00:49.304 --> 00:00:53.900
saveToDB.
&gt;&gt; Jafar: And

17
00:00:53.900 --> 00:00:56.790
it's going to accept,
actually it's not gonna do anything.

18
00:00:56.790 --> 00:00:58.624
It's just gonna use the person
object every single time.

19
00:00:58.624 --> 00:01:00.950
It's gonna save the person
object to the database.

20
00:01:00.950 --> 00:01:04.380
Now it's not really gonna do that
because I don't have any database open.

21
00:01:04.380 --> 00:01:07.580
But we know that that operation
would be asynchronous, right?

22
00:01:07.580 --> 00:01:09.840
It would return, so
we return an observable.

23
00:01:09.840 --> 00:01:14.390
So I can kind of fake it because
observable has a little timer method.

24
00:01:14.390 --> 00:01:16.300
All right,
I believe it's timeout actually.

25
00:01:16.300 --> 00:01:19.900
And you can just give it a time,
and now what does it do?

26
00:01:19.900 --> 00:01:21.410
It'll fire, so under the hood it is.

27
00:01:21.410 --> 00:01:25.110
Yes, a question?
&gt;&gt; Speaker 2: How can you wait until both

28
00:01:25.110 --> 00:01:28.570
name and age is changed before
you're reflecting that on the model?

29
00:01:28.570 --> 00:01:30.190
&gt;&gt; Jafar: Well the good news is,

30
00:01:30.190 --> 00:01:36.600
well actually that depends what he means,
because if you change first name and age,

31
00:01:36.600 --> 00:01:40.530
right, all synchronously then you're only
gonna get one object observe callback.

32
00:01:40.530 --> 00:01:44.480
But if we do it through the form,
in other words, we change name and

33
00:01:44.480 --> 00:01:49.090
then we change age, then yes we'll
actually get two object observe callbacks.

34
00:01:49.090 --> 00:01:51.680
So we'll write it to
the database every single time.

35
00:01:51.680 --> 00:01:53.830
So, that's a good question.

36
00:01:53.830 --> 00:01:58.080
If we only wanna do something
after every field is changed.

37
00:01:58.080 --> 00:01:59.990
It's kind of a tricky one.

38
00:01:59.990 --> 00:02:06.770
And the idea is, so we only wanna make
a change after every single thing.

39
00:02:06.770 --> 00:02:10.897
I don't know how realistic that case is
because in practice, you probably only

40
00:02:10.897 --> 00:02:15.085
wanna either wait for a save to occur or
that somebody explicitly clicking Save or

41
00:02:15.085 --> 00:02:18.376
you'd probably wanna sync after
every single field changes.

42
00:02:18.376 --> 00:02:20.930
But that's kind of a fun
thought experiment.

43
00:02:20.930 --> 00:02:22.240
You guys already know
how to do it actually.

44
00:02:23.980 --> 00:02:24.850
&gt;&gt; Speaker 3: It's very similar doing

45
00:02:24.850 --> 00:02:27.702
auto complete isn't it?
&gt;&gt; Jafar: Kind of similar yes but

46
00:02:27.702 --> 00:02:31.793
the operator,
exactly the operator to use for this case.

47
00:02:31.793 --> 00:02:36.657
Let's imagine that we could create
a stream of name changes and

48
00:02:36.657 --> 00:02:39.530
a separate stream of age changes.

49
00:02:39.530 --> 00:02:43.100
Right now we have object observations
which fires regardless of whether name or

50
00:02:43.100 --> 00:02:44.432
age fires.

51
00:02:44.432 --> 00:02:49.430
It's one stream but we can split
it into two streams, one which

52
00:02:49.430 --> 00:02:53.350
only fires if the name changes and another
one which only fires if the age changes.

53
00:02:53.350 --> 00:02:55.520
Yes?
&gt;&gt; Speaker 2: Could you use zip?

54
00:02:55.520 --> 00:02:56.850
&gt;&gt; Jafar: Yes you could.

55
00:02:56.850 --> 00:02:59.650
If you took that object observations and

56
00:02:59.650 --> 00:03:03.330
you split it into two,
one where it was only name changes and

57
00:03:03.330 --> 00:03:06.310
one where it was only age changes and
you only wanted to save the database.

58
00:03:06.310 --> 00:03:07.760
When they changed the name and

59
00:03:07.760 --> 00:03:11.790
age, you could use zip because then
you'd zip those two things together and

60
00:03:11.790 --> 00:03:16.580
then it would only fire after what you
got one from name and one from age.

61
00:03:16.580 --> 00:03:18.870
Now there's actually a better
operator to use though.

62
00:03:18.870 --> 00:03:22.320
So zip would work but it would be a little
bit weird because let's say I go to name

63
00:03:22.320 --> 00:03:26.542
and then I tab away and I change
name again and then I tab away and

64
00:03:26.542 --> 00:03:28.420
then I change name again and
then I tab away.

65
00:03:28.420 --> 00:03:32.540
What zip will do on next to a value,

66
00:03:32.540 --> 00:03:34.900
it needs to have one from both name and
one from age.

67
00:03:34.900 --> 00:03:37.920
So it actually buffers,
it buffers up all the names.

68
00:03:37.920 --> 00:03:40.390
So then what would happen if
you change name three times,

69
00:03:40.390 --> 00:03:43.280
and then you wouldn't change age once,
it would save the database.

70
00:03:43.280 --> 00:03:46.527
And then you change age again,
it would save the database.

71
00:03:46.527 --> 00:03:48.086
You change age again, it would save
the database. And then the left hand side,

72
00:03:48.086 --> 00:03:51.200
all the items would be removed,
it would be stopped.

73
00:03:51.200 --> 00:03:53.990
So zip is great when you're
working with observable for

74
00:03:53.990 --> 00:03:55.750
those case where you have
two network requests.

75
00:03:55.750 --> 00:03:59.030
And usually two observables of one or
n observables of one.

76
00:03:59.030 --> 00:04:00.740
And you wanna wait till they all finish.

77
00:04:00.740 --> 00:04:02.090
But for cases like this.

78
00:04:02.090 --> 00:04:03.950
Sorry?
&gt;&gt; Speaker 3: MergeAll?

79
00:04:03.950 --> 00:04:05.010
&gt;&gt; Jafar: MergeAll only works on

80
00:04:05.010 --> 00:04:06.890
observables of observables.

81
00:04:06.890 --> 00:04:07.560
And with this case,

82
00:04:07.560 --> 00:04:10.410
we would have two observables,
in our hands, at the same time.

83
00:04:10.410 --> 00:04:13.155
We have the stream of name changes and
the stream of age changes.

84
00:04:13.155 --> 00:04:17.555
But there's actually a perfect
operator in our x design for

85
00:04:17.555 --> 00:04:20.016
exactly this type of thing.

86
00:04:20.016 --> 00:04:21.245
We wanna save to the database,

87
00:04:21.245 --> 00:04:26.260
it would either of these fields change but
if you change name twice.

88
00:04:26.260 --> 00:04:29.580
Right, well let me put that we see if
that's actually the correct operator.

89
00:04:29.580 --> 00:04:30.820
For this is a bit of a weird case.

90
00:04:30.820 --> 00:04:33.980
Because you, only when you
change both of these operators.

91
00:04:33.980 --> 00:04:37.760
Technically, probably what you'd wanna do
is you'd wanna wait until name change.

92
00:04:37.760 --> 00:04:39.760
And then age changed before saving.

93
00:04:39.760 --> 00:04:42.720
And then if either name or
age change in the future.

94
00:04:42.720 --> 00:04:43.690
You'd probably wanna save, right?

95
00:04:43.690 --> 00:04:48.670
It would be very weird to wait for them
to change off, it's just a weird case.

96
00:04:48.670 --> 00:04:51.000
We could probably make it work,
it's just not realistic.

97
00:04:51.000 --> 00:04:53.717
So I'd rather focus on
the realistic cases.

98
00:04:53.717 --> 00:04:57.110
And my guess is the most realistic case
is that if any of these things change,

99
00:04:57.110 --> 00:04:59.494
you probably wanna save to the database.
&gt;&gt; Speaker 3: Updating

100
00:04:59.494 --> 00:05:00.270
password
&gt;&gt; Jafar: Yeah.

101
00:05:00.270 --> 00:05:01.060
&gt;&gt; Speaker 3: Would be a good example.

102
00:05:01.060 --> 00:05:05.300
We need both fields if changed.
&gt;&gt; Jafar: Because you have your password

103
00:05:05.300 --> 00:05:07.260
and then the confirm password?
&gt;&gt; Speaker 5: Yeah, the confirm.

104
00:05:07.260 --> 00:05:09.460
&gt;&gt; Jafar: But even in the confirm, right?

105
00:05:09.460 --> 00:05:13.020
Would you change it as soon as
they synced up their confirm?

106
00:05:13.020 --> 00:05:14.970
To me that would actually
be a very bad UX,

107
00:05:14.970 --> 00:05:19.056
because I would wanna take an explicit
action to change my password.

108
00:05:19.056 --> 00:05:21.600
I wouldn't wanna just happen to enter
something into a text box, right?

109
00:05:21.600 --> 00:05:22.810
&gt;&gt; Speaker 6: It's just an [INAUDIBLE]

110
00:05:22.810 --> 00:05:25.670
You'd want validation.
&gt;&gt; Jafar: You'd want validation,

111
00:05:25.670 --> 00:05:26.770
etcetera, right?

112
00:05:26.770 --> 00:05:29.490
So, but
one thing I wanna bring your attention to.

113
00:05:29.490 --> 00:05:32.870
Because it's a very common pattern
in UIs is, generally speaking,

114
00:05:32.870 --> 00:05:36.050
it's either if somebody takes
an explicit action to say save or

115
00:05:36.050 --> 00:05:38.540
if any field changes, you wanna save.

116
00:05:38.540 --> 00:05:39.500
Those are the two actions.

117
00:05:39.500 --> 00:05:41.945
Question in the back.
&gt;&gt; Speaker 7: What's the point of

118
00:05:41.945 --> 00:05:46.900
rx.subject?
&gt;&gt; Jafar: So a subject is a topic I was

119
00:05:46.900 --> 00:05:50.080
hoping to get to today, but
I'm not gonna be able to get to.

120
00:05:50.080 --> 00:05:54.040
That's okay, because for the most part
RX developers don't need to use them.

121
00:05:55.410 --> 00:05:57.710
So I don't know how deep
I wanna go into that.

122
00:05:57.710 --> 00:06:00.590
We can leave that for another time, or you
can check that out in the documentation,

123
00:06:00.590 --> 00:06:03.500
but in practice you shouldn't find
yourself using subjects very much.

124
00:06:03.500 --> 00:06:05.612
So I don't wanna focus on it too,
too much.

125
00:06:05.612 --> 00:06:08.870
So I'm a little reluctant
to answer that question.

126
00:06:08.870 --> 00:06:10.750
It's more advanced topic and

127
00:06:10.750 --> 00:06:13.210
as you can see we've done a heck of
a lot without ever using a subject.

128
00:06:13.210 --> 00:06:15.900
So that's kind of why
I'm not super eager to

129
00:06:15.900 --> 00:06:18.640
introduce the topic right now and
that's okay.

130
00:06:18.640 --> 00:06:21.950
But we can always handle that question by
e-mail after the fact or something like

131
00:06:21.950 --> 00:06:24.110
that maybe we can explain that.
&gt;&gt; Speaker 7: Or

132
00:06:24.110 --> 00:06:25.860
in your next round when you come back.
&gt;&gt; Jafar: Or

133
00:06:25.860 --> 00:06:28.475
in my next round when I come back,
we do an advanced RX.

134
00:06:28.475 --> 00:06:30.120
[LAUGH] Yeah.

135
00:06:31.980 --> 00:06:35.820
So I do you wanna introduce you to one
more operator because it is very useful

136
00:06:35.820 --> 00:06:40.110
for exactly this case and
it's like the cousin of zip.

137
00:06:40.110 --> 00:06:41.640
So how does zip work?

138
00:06:41.640 --> 00:06:42.680
Zip, remember the zipper?

139
00:06:42.680 --> 00:06:45.440
Where you need to zip up and
you need a tooth on either side,

140
00:06:45.440 --> 00:06:47.704
otherwise the zipper gets stuck,
all right.

141
00:06:47.704 --> 00:06:53.200
Combine latest is very similar to zip,
except the way

142
00:06:53.200 --> 00:06:57.420
it works is instead of waiting for an item
from each side in order to advance.

143
00:06:58.470 --> 00:07:01.859
If a new item comes in either of the left
hand side or the right hand side,

144
00:07:01.859 --> 00:07:03.228
it immediately [INAUDIBLE].

145
00:07:03.228 --> 00:07:06.636
As long as it has at least one
item from the left hand side,

146
00:07:06.636 --> 00:07:11.180
then if another item comes down from
the left hand side instead of waiting for

147
00:07:11.180 --> 00:07:14.020
a corresponding item
from the right hand side,

148
00:07:14.020 --> 00:07:18.560
it just on next with the last item
that it got from the right hand side.

149
00:07:18.560 --> 00:07:21.300
So the very first time it needs to wait
for at least one item on the left and

150
00:07:21.300 --> 00:07:22.590
at least one item on the right.

151
00:07:22.590 --> 00:07:25.600
So combine latest here would actually
be kind of close to what we need.

152
00:07:25.600 --> 00:07:27.510
Imagine we created a stream of names and

153
00:07:27.510 --> 00:07:30.525
a stream of age changes and
then we did a combined latest on it.

154
00:07:30.525 --> 00:07:35.025
Well, we wouldn't save to the database
until somebody changed both name and age.

155
00:07:35.025 --> 00:07:36.945
But then after that if they
changed either name, or

156
00:07:36.945 --> 00:07:39.385
age, we would send off
to save the database.

157
00:07:39.385 --> 00:07:42.515
Because what happens is the function
gets called with the last value of name.

158
00:07:42.515 --> 00:07:47.500
If you change age, or if you change name,
it gets called with the last value of age.

159
00:07:47.500 --> 00:07:49.640
Hence the term combine latest.

160
00:07:49.640 --> 00:07:51.810
So the latest value that
comes on the left hand side.

161
00:07:51.810 --> 00:07:54.790
It just takes the old value on the right
hand side and immediately calls.

162
00:07:54.790 --> 00:07:58.300
Whereas zip would wait for another
value to arrive on the right hand side

163
00:07:58.300 --> 00:08:01.230
before calling the function,
combinelatest.

164
00:08:01.230 --> 00:08:04.540
So that's very useful when you
tend to work with you UIs.

165
00:08:04.540 --> 00:08:07.450
And you're doing that type of
really reactive application where

166
00:08:07.450 --> 00:08:10.379
every single time a field changes, you
wanna go and sync up with the database.

167
00:08:12.340 --> 00:08:16.790
So, why don't we do something a little bit
more, I mean, to me, the most realistic

168
00:08:16.790 --> 00:08:21.280
case here is that, when any field changes,
we wanna save to the database, right?

169
00:08:21.280 --> 00:08:23.140
It's either that, or
there's a save button.

170
00:08:23.140 --> 00:08:25.720
And so, let's go with the other kind,
where any field is changing,

171
00:08:25.720 --> 00:08:27.080
and we wanna save to the database.

172
00:08:28.530 --> 00:08:32.100
So, we're gonna make a fake function,
and all it's gonna do is just create

173
00:08:32.100 --> 00:08:36.550
an observable that takes 500 milliseconds
to complete write and then returns.

174
00:08:36.550 --> 00:08:37.210
Nothing.

175
00:08:37.210 --> 00:08:40.900
I believe I'm not sure if it returns an on
next with like null it and then nothing or

176
00:08:40.900 --> 00:08:41.760
just is empty.

177
00:08:41.760 --> 00:08:43.630
We'll find out one way or the other.

178
00:08:43.630 --> 00:08:50.104
So if I call this SaveToDb function.

179
00:08:50.104 --> 00:08:53.642
And then I forEach over it, we'll see
if it actually has a value in here or

180
00:08:53.642 --> 00:08:55.850
it's just an empty observable.

181
00:08:55.850 --> 00:08:59.376
Now it's totally possible that timeout
could just literally be an empty

182
00:08:59.376 --> 00:09:05.760
observable, one that looked like
&gt;&gt; Jafar: This.

183
00:09:05.760 --> 00:09:07.030
Nothing wrong with
an observable like that.

184
00:09:08.090 --> 00:09:10.376
If I was to model an animation
as an observable,

185
00:09:10.376 --> 00:09:13.536
which is too bad we didn't get to
in this class but it would be fun.

186
00:09:13.536 --> 00:09:17.370
Next time you wanna try animations out and
you wanna coordinate them.

187
00:09:17.370 --> 00:09:19.240
Actually I definitely wanna
talk a little bit about that.

188
00:09:19.240 --> 00:09:21.330
Because it's some very cool stuff, right.

189
00:09:22.600 --> 00:09:24.070
I'll come back to that.

190
00:09:24.070 --> 00:09:25.810
So an observable, right.

191
00:09:25.810 --> 00:09:27.630
If I was to model
an animation as observable.

192
00:09:27.630 --> 00:09:29.620
Sometimes an observable just
doesn't really have any data.

193
00:09:29.620 --> 00:09:32.450
It just a duration of time and
then it completes and

194
00:09:32.450 --> 00:09:34.000
animation's a good example of that, right.

195
00:09:34.000 --> 00:09:37.959
It just sort of like, you would model most
animations as an observable that just

196
00:09:37.959 --> 00:09:39.328
go on until they're done.

197
00:09:39.328 --> 00:09:41.330
And you just need to know
that the animations done.

198
00:09:41.330 --> 00:09:42.640
Now another way of handling
that would be like,

199
00:09:42.640 --> 00:09:45.250
imagine you are animating
a box from left to right.

200
00:09:45.250 --> 00:09:47.120
X, left to right, right.

201
00:09:47.120 --> 00:09:50.290
You could keep on nexting like
the individual X and Y, the X and

202
00:09:50.290 --> 00:09:52.220
Y positions as the animation went on.

203
00:09:52.220 --> 00:09:54.570
But in practice that's probably
not very efficient number one.

204
00:09:54.570 --> 00:09:55.140
And number two,

205
00:09:55.140 --> 00:09:58.740
nowadays we typically do animations
using things like CSS transitions.

206
00:09:58.740 --> 00:10:01.480
And the way CSS transitions work is
they don't keep calling you with their

207
00:10:01.480 --> 00:10:04.130
intermediary values cuz
it's not very fast.

208
00:10:04.130 --> 00:10:05.220
Right, they just call you.

209
00:10:05.220 --> 00:10:07.370
They can usually call you to tell
you when they're done though.

210
00:10:07.370 --> 00:10:10.790
And so that's why it's very convenient,
to model a CSS translation, transition,

211
00:10:10.790 --> 00:10:12.010
excuse me, as an observable.

