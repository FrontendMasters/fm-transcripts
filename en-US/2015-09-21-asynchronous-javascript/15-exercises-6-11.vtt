WEBVTT

1
00:00:00.000 --> 00:00:03.781
[MUSIC]

2
00:00:03.781 --> 00:00:05.520
&gt;&gt; Jafar Husain: So let's try filtering.

3
00:00:05.520 --> 00:00:08.740
Now, I think most of us would be very
comfortable taking a collection,

4
00:00:09.840 --> 00:00:13.090
filtering the items in that collection,
and accumulating only those items in

5
00:00:13.090 --> 00:00:16.640
the collection that pass a certain test,
into a new collection using a loop.

6
00:00:16.640 --> 00:00:19.420
Most of us pretty familiar
with doing that using a loop.

7
00:00:19.420 --> 00:00:20.460
Let's try it with for each.

8
00:00:20.460 --> 00:00:22.390
So I'm gonna for
each over all the new releases.

9
00:00:23.430 --> 00:00:27.220
And if the video rating is 5,
I'm gonna add it to a new collection.

10
00:00:27.220 --> 00:00:28.380
And I'm gonna return that.

11
00:00:28.380 --> 00:00:29.300
So lets take a quick look at that.

12
00:00:30.600 --> 00:00:35.415
For each is gonna get called for every
single one of these videos, one at a time.

13
00:00:35.415 --> 00:00:39.920
[INAUDIBLE]
So for

14
00:00:39.920 --> 00:00:43.390
each is gonna invoke the function
with each one of these videos, and

15
00:00:43.390 --> 00:00:48.310
we are gonna suck out just the ID and
title and return that or excuse,

16
00:00:48.310 --> 00:00:51.950
me no in this particular example
we're just grabbing the video,

17
00:00:51.950 --> 00:00:55.898
we're going to grab the whole thing if and
only if the rating is 5.

18
00:00:55.898 --> 00:01:02.030
[INAUDIBLE]
If I run that, it works.

19
00:01:02.030 --> 00:01:04.404
Okay?
Relatively straightforward,

20
00:01:04.404 --> 00:01:07.780
then notice that in both map and filter,
their kinda doing the same thing,

21
00:01:07.780 --> 00:01:12.250
they're calling for each to go over the
array and then based on some condition.

22
00:01:12.250 --> 00:01:15.918
They're accumulating up a new array
of the objects in the previous array.

23
00:01:15.918 --> 00:01:18.580
So I'm gonna implement filter here.

24
00:01:18.580 --> 00:01:20.410
It's already implemented.

25
00:01:20.410 --> 00:01:24.590
Bear with me, okay.

26
00:01:24.590 --> 00:01:29.172
Sorry guys, bear with me.

27
00:01:29.172 --> 00:01:30.831
I feel like the answers
are already shown here.

28
00:01:30.831 --> 00:01:36.176
So I'm just going to hit, restart the lab,
so we can run them together.

29
00:01:41.170 --> 00:01:43.665
&gt;&gt; Jafar Husain: So we were on the

30
00:01:47.542 --> 00:01:50.440
&gt;&gt; Jafar Husain: Filter example.

31
00:01:50.440 --> 00:01:53.430
So we ran this and
now we're gonna implement filter.

32
00:01:53.430 --> 00:02:00.829
Hm, still seeing these answers.
&gt;&gt; Jafar Husain: Now

33
00:02:00.829 --> 00:02:03.160
notice it's very similar to map.

34
00:02:03.160 --> 00:02:07.150
We're gonna for each over ourself, and
this context, this is gonna be this.

35
00:02:07.150 --> 00:02:11.470
This function is gonna get called first
with 1, then with 2, and then with 3,

36
00:02:11.470 --> 00:02:15.710
so x is gonna be 1, 2, and then 3,
And our job is to apply this time,

37
00:02:15.710 --> 00:02:18.020
instead of the projection
function which takes a value and

38
00:02:18.020 --> 00:02:21.270
then translates into another value,
we're going to apply a predicate function.

39
00:02:21.270 --> 00:02:23.586
And the whole job of a predicate
function is just a test function.

40
00:02:23.586 --> 00:02:26.820
It's just gonna return true or false,
based on the value that comes in.

41
00:02:26.820 --> 00:02:28.022
So the first time we pass this value,

42
00:02:28.022 --> 00:02:31.790
it's gonna be one and that's gonna return
false because it's not larger than two.

43
00:02:31.790 --> 00:02:34.040
And so we don't want to put
it in the results array.

44
00:02:34.040 --> 00:02:36.890
So we go if predicate function.

45
00:02:36.890 --> 00:02:37.440
Item in arrays.

46
00:02:37.440 --> 00:02:39.410
So we passed the items in array
to the predicate function and

47
00:02:39.410 --> 00:02:41.760
if it passes we add it to the results.

48
00:02:42.830 --> 00:02:48.819
And so that's how we run filter.
&gt;&gt; Jafar Husain: Great.

49
00:02:50.340 --> 00:02:53.150
So now we're gonna solve the same
problem we solved before.

50
00:02:53.150 --> 00:02:56.020
We're gonna go through
the new releases function.

51
00:02:56.020 --> 00:02:59.760
We're only going to grab the ID,
well it's actually slightly different,

52
00:02:59.760 --> 00:03:03.010
we're gonna grab the IDs of all
the videos that have a rating of 5.

53
00:03:03.010 --> 00:03:06.550
So we're actually gonna chain, map and
filter together now to solve a problem.

54
00:03:06.550 --> 00:03:10.260
So I've got new releases,
all my video objects.

55
00:03:10.260 --> 00:03:10.970
Right?

56
00:03:10.970 --> 00:03:14.530
And I'm just gonna chain, map and
filter together, so I'm gonna run filter.

57
00:03:15.600 --> 00:03:21.690
And this is gonna take a video, and if
the videos rating is 5, I wanna keep it.

58
00:03:21.690 --> 00:03:23.720
Now I want you guys to pay
attention to how I'm gonna format

59
00:03:23.720 --> 00:03:24.990
my code as we do this.

60
00:03:24.990 --> 00:03:27.620
One of the things you guys are gonna
be noticing, is that you write these

61
00:03:27.620 --> 00:03:31.480
programs, you're gonna start to
write very, very long expressions.

62
00:03:31.480 --> 00:03:34.990
If you're not careful, that could
become not so readable, pretty quick.

63
00:03:34.990 --> 00:03:37.480
So, I want you to look at how
I format these expressions.

64
00:03:38.690 --> 00:03:42.780
So, as soon as I have more than one
method that I'm chaining off of a noun,

65
00:03:42.780 --> 00:03:44.710
like in this case, new releases.

66
00:03:44.710 --> 00:03:48.970
I put each one of them onto their
own function and I add a tab

67
00:03:48.970 --> 00:03:53.070
to indicate that the previous expression
has not yet completed, is that clear?

68
00:03:54.280 --> 00:03:59.350
So, now if I'm only interested in
getting the ID and title of the video,

69
00:03:59.350 --> 00:04:02.860
so after I filter it for only those with
a rating of 5, I'm just gonna map it.

70
00:04:02.860 --> 00:04:05.780
Because what map does,
is it transforms objects.

71
00:04:05.780 --> 00:04:09.740
Filter just keeps objects from making it
in the new collection, but map will take

72
00:04:09.740 --> 00:04:13.640
an object and substitute it for
a new transformed version of that object.

73
00:04:13.640 --> 00:04:17.940
I need to use parentheses here if
I'm using the arrow function because

74
00:04:17.940 --> 00:04:19.550
JavaScript can't differentiate.

75
00:04:19.550 --> 00:04:21.340
If you've got a JSON object
on the right hand side,

76
00:04:21.340 --> 00:04:23.810
it can't differentiate between whether
you're trying to create a block.

77
00:04:23.810 --> 00:04:25.830
Where it starts with a brace and
then ends with another brace and

78
00:04:25.830 --> 00:04:26.910
you've got multiple lines.

79
00:04:26.910 --> 00:04:28.260
Or you're trying to create a JSON object.

80
00:04:28.260 --> 00:04:30.890
That's why I'm putting
parentheses around this thing.

81
00:04:30.890 --> 00:04:34.500
So that's a mighty title.
&gt;&gt; Speaker 2: You just want

82
00:04:34.500 --> 00:04:36.528
the [INAUDIBLE]?
&gt;&gt; Jafar Husain: Yep.

83
00:04:36.528 --> 00:04:38.622
&gt;&gt; Speaker 2: And there's a bouncing icon

84
00:04:38.622 --> 00:04:40.225
in there.
&gt;&gt; Jafar Husain: You're right.

85
00:04:40.225 --> 00:04:42.100
&gt;&gt; Speaker 2: [INAUDIBLE]

86
00:04:42.100 --> 00:04:42.980
&gt;&gt; Jafar Husain: Yeah, it's making

87
00:04:42.980 --> 00:04:45.812
the scrolling a little bit difficult,
but I will try here, yeah.

88
00:04:45.812 --> 00:04:48.410
Cuz it's in a window within a window,
if I scroll the bottom of this it

89
00:04:48.410 --> 00:04:50.481
won't let me scroll any further.
&gt;&gt; Speaker 2: I see [CROSSTALK]

90
00:04:50.481 --> 00:04:51.180
&gt;&gt; Jafar Husain: Well, now that's

91
00:04:51.180 --> 00:04:54.940
an effort.
&gt;&gt; Speaker 2: Do the best we can.

92
00:04:54.940 --> 00:04:56.520
&gt;&gt; Jafar Husain: Okay, so first we filter,

93
00:04:56.520 --> 00:04:59.820
that returns a new array and so we can
chain the map operation right after that,

94
00:04:59.820 --> 00:05:03.280
and we can just grab the ID and
title property, so lot of coding here,

95
00:05:03.280 --> 00:05:04.320
see if this works.

96
00:05:04.320 --> 00:05:06.760
Apparently I'm not supposed
to grab the ID and title,

97
00:05:06.760 --> 00:05:09.500
I'm actually just suppose to grab the ID,
forgot about that.

98
00:05:10.970 --> 00:05:14.521
So, we'll shorten this to this.

99
00:05:14.521 --> 00:05:16.130
And we're good.

100
00:05:16.130 --> 00:05:17.480
Okay?

101
00:05:17.480 --> 00:05:21.630
Now, the interesting thing about this
is that we can query not just arrays,

102
00:05:21.630 --> 00:05:24.990
we can also transform trees,
in other words, arrays of arrays.

103
00:05:24.990 --> 00:05:32.000
So, in this case, I have a movie list
array, each of which contains an object.

104
00:05:32.000 --> 00:05:35.110
So this movie list,
excuse me, yes movie list.

105
00:05:35.110 --> 00:05:37.760
So, if you go to Netflix, you'll notice
that there's all these movies lists,

106
00:05:37.760 --> 00:05:40.890
you have thrillers, horror movies,
action movies, etc, and

107
00:05:40.890 --> 00:05:44.090
each one of them contains a list
of titles, a list of videos.

108
00:05:44.090 --> 00:05:48.270
So, here we have new releases, and

109
00:05:48.270 --> 00:05:52.090
that contains a video's array
containing many video objects.

110
00:05:52.090 --> 00:05:56.970
But we also have a drama list
each of which contains a video.

111
00:05:56.970 --> 00:05:57.900
So this is a treat.

112
00:05:57.900 --> 00:06:01.330
Because we have an array of
objects which contain arrays.

113
00:06:01.330 --> 00:06:03.055
Right.
So we have an array of movie list,

114
00:06:03.055 --> 00:06:06.600
action movies, thrillers, each one of
them has a videos array inside of it.

115
00:06:09.490 --> 00:06:13.370
So what we need to do, is we just
want to collect up all the video IDs,

116
00:06:13.370 --> 00:06:19.120
all the ID's of the videos in all of
the lists, into one nice flat collection.

117
00:06:19.120 --> 00:06:22.090
So I'm actually going to do something, and
I think most of the pretty familiar with,

118
00:06:22.090 --> 00:06:23.810
which is nest a loop, right?

119
00:06:23.810 --> 00:06:27.679
I mean to use my foreach loop,
and I'm gonna do a nested foreach

120
00:06:27.679 --> 00:06:32.101
So.
&gt;&gt; Jafar Husain: We'll start with movie

121
00:06:32.101 --> 00:06:40.798
lists.
&gt;&gt; Jafar Husain: So, for each movie list.

122
00:06:44.832 --> 00:06:48.054
&gt;&gt; Jafar Husain: We are going to go

123
00:06:48.054 --> 00:06:53.587
through each of the titles.

124
00:06:53.587 --> 00:07:01.553
Or was it video, yeah videos.
&gt;&gt; Jafar Husain: And

125
00:07:01.553 --> 00:07:06.189
then for each one of those videos,
we're gonna add it, the idea of that

126
00:07:06.189 --> 00:07:08.915
video to all video IDs in the movie lists.

127
00:07:17.832 --> 00:07:18.958
&gt;&gt; Jafar Husain: Formatter
didn't like me there.

128
00:07:18.958 --> 00:07:24.099
Okay.
&gt;&gt; Jafar Husain: Don't forget the end

129
00:07:24.099 --> 00:07:33.451
parentheses after your forEach.
&gt;&gt; Jafar Husain: So

130
00:07:33.451 --> 00:07:35.890
it's just like a nested loop right?

131
00:07:35.890 --> 00:07:39.100
How you would go over
a two dimensional array.

132
00:07:39.100 --> 00:07:39.980
So we run this.

133
00:07:41.772 --> 00:07:51.380
Problem mistyped that
&gt;&gt; Jafar Husain: Does that make sense?

134
00:07:51.380 --> 00:07:52.700
Just like a nested loop,

135
00:07:52.700 --> 00:07:55.519
that we would do if we were traversing
a two dimensional array, for example.

136
00:07:57.520 --> 00:08:01.580
Now the thing is, if we have
these two dimensional structures.

137
00:08:01.580 --> 00:08:03.650
What we would like, is a method, so

138
00:08:03.650 --> 00:08:06.650
that we can do the chaining that we did
before to just flatten them for us.

139
00:08:06.650 --> 00:08:09.030
So, we don't have to write like
this nested foreach loop., so

140
00:08:09.030 --> 00:08:11.690
you remember in the slides I
showed you the concat all method.

141
00:08:11.690 --> 00:08:13.580
And the concatAll is very simple.

142
00:08:13.580 --> 00:08:15.210
It takes a multi-dimensional array and

143
00:08:15.210 --> 00:08:18.560
decreases the dimensionality by
one it flattens it by one level.

144
00:08:18.560 --> 00:08:21.030
So here we're gonna add
concatAll to the array.

145
00:08:23.150 --> 00:08:25.330
So, here's an example of
a two dimensional array

146
00:08:27.550 --> 00:08:29.969
when concatAll gets called on
this two dimensional array.

147
00:08:31.060 --> 00:08:34.680
This is going to be the outer array,
so this whole thing.

148
00:08:35.850 --> 00:08:40.749
Then within there, we are gonna get, so in
other words sub array is going to be each

149
00:08:40.749 --> 00:08:45.080
one of these, so this function pass to
forEach is gonna get called one for

150
00:08:45.080 --> 00:08:50.183
each of the sub arrays.
&gt;&gt; Jafar Husain: So

151
00:08:50.183 --> 00:08:54.704
all I have to do, is for each one of
those sub-arrays, call forEach again,

152
00:08:54.704 --> 00:08:56.980
and then I get an item inside each one.

153
00:08:59.290 --> 00:09:05.830
So that will be this one, this one, and
this one for an individual sub-array.

154
00:09:05.830 --> 00:09:08.330
And so
now all I have to do is add the items.

155
00:09:08.330 --> 00:09:12.730
To the result, and
at the end return the results array.

156
00:09:12.730 --> 00:09:15.600
And I will have created a function
that we can use to flatten

157
00:09:15.600 --> 00:09:16.480
any two dimensional array.

158
00:09:19.270 --> 00:09:19.770
So that's it.

159
00:09:21.350 --> 00:09:23.627
Now we can factor out that
nested forEach from our code and

160
00:09:23.627 --> 00:09:27.626
just put it into one helper function.
&gt;&gt; Jafar Husain: So

161
00:09:27.626 --> 00:09:32.221
exercise 11, we are going to do our
first transformation operation,

162
00:09:32.221 --> 00:09:36.870
pure transformation operation
using Map and concatALL on a tree.

163
00:09:36.870 --> 00:09:39.400
And this is a brilliant
important skill to get down.

164
00:09:39.400 --> 00:09:42.250
So we have Map and concatALL, and

165
00:09:42.250 --> 00:09:46.420
we wanna flatten the movie lists
into an array of video id's.

166
00:09:46.420 --> 00:09:51.032
So the same problem we saw before but
this time with map and

167
00:09:51.032 --> 00:09:56.181
concat-all.

168
00:09:56.181 --> 00:09:59.950
So I'm gonna start with
movie list just like before.

169
00:09:59.950 --> 00:10:02.954
And the first thing I'm gonna
do is I'm gonna filter or

170
00:10:02.954 --> 00:10:05.490
rather I'm gonna map over movie list.

171
00:10:05.490 --> 00:10:07.204
And that's going to give me
an individual movie list.

172
00:10:14.924 --> 00:10:15.450
&gt;&gt; Jafar Husain: Right.

173
00:10:15.450 --> 00:10:16.680
So in other words.

174
00:10:16.680 --> 00:10:21.916
First, my function will be called with
this, one of the movie lists, and

175
00:10:21.916 --> 00:10:29.269
next the map function will be called
&gt;&gt; Jafar Husain: So

176
00:10:29.269 --> 00:10:31.470
for each one of these movie lists.

177
00:10:31.470 --> 00:10:36.330
I want to retrieve just
the IDs of the titles inside.

178
00:10:36.330 --> 00:10:40.720
So each of the IDs of the videos, so
I wanna go through the videos, but

179
00:10:40.720 --> 00:10:43.470
I only want to grab the IDs.

180
00:10:43.470 --> 00:10:45.150
So now I'm going to nest.

181
00:10:45.150 --> 00:10:47.366
Going to put another
map expression in here.

182
00:10:47.366 --> 00:10:51.933
[NOISE]

183
00:10:51.933 --> 00:10:57.415
Oops.

184
00:10:57.415 --> 00:11:00.220
So I'm gonna map over all
the videos in each movie list.

185
00:11:00.220 --> 00:11:02.660
And I'm only gonna return for
each one of these videos.

186
00:11:02.660 --> 00:11:05.190
I'm only gonna return the ID.

187
00:11:05.190 --> 00:11:10.770
[NOISE] Let me ask you a question,

188
00:11:10.770 --> 00:11:18.016
how many dimensions is this collection?

189
00:11:18.016 --> 00:11:19.178
How many dimensions?

190
00:11:19.178 --> 00:11:20.090
Is what I have right now.

191
00:11:23.060 --> 00:11:25.010
Two, why is it two.

192
00:11:25.010 --> 00:11:29.800
Well for ever one of the movie
lists I returned A filtered, or

193
00:11:29.800 --> 00:11:33.060
excuse me a transformed
array of the videos inside.

194
00:11:33.060 --> 00:11:35.960
I would took a look at each one of
the video arrays in the movie list and

195
00:11:35.960 --> 00:11:36.620
I mapped over it.

196
00:11:36.620 --> 00:11:38.560
And we know map returns another array.

197
00:11:38.560 --> 00:11:40.870
And so I've got an array of arrays and

198
00:11:40.870 --> 00:11:45.510
how do I flatten an array of arrays?
&gt;&gt; Speaker 2: ConcatAll.

199
00:11:45.510 --> 00:11:46.233
&gt;&gt; Jafar Husain: ConcatAll.

200
00:11:53.671 --> 00:11:54.422
&gt;&gt; Jafar Husain: I'm gonna finish

201
00:11:54.422 --> 00:11:59.921
that.
&gt;&gt; Jafar Husain: So,

202
00:11:59.921 --> 00:12:02.940
let's us typing right?
&gt;&gt; Speaker 2: I was trying to do it

203
00:12:02.940 --> 00:12:07.004
the other way doing concatAll first and
then-

204
00:12:07.004 --> 00:12:09.480
&gt;&gt; Jafar Husain: Interesting.

205
00:12:09.480 --> 00:12:11.910
So why not flatten first, right?

206
00:12:11.910 --> 00:12:15.350
Why can't we just flatten the, because
what we've got is this nested object.

207
00:12:15.350 --> 00:12:17.030
Why can't we flatten
the nested object first.

208
00:12:17.030 --> 00:12:18.460
Sometimes we can do that.

209
00:12:18.460 --> 00:12:23.130
The reason we can't do that now is that
ConcatAll all only works on an array

210
00:12:23.130 --> 00:12:24.280
of arrays.

211
00:12:24.280 --> 00:12:28.120
It will not work on an array of objects.

212
00:12:28.120 --> 00:12:32.080
Which contain arrays,
and that's what this is.

213
00:12:32.080 --> 00:12:35.720
It's an array of objects
which contain arrays, but

214
00:12:35.720 --> 00:12:41.160
by applying map I was able to
transform each one of these objects

215
00:12:41.160 --> 00:12:45.340
into just the array inside of
it with just the Id that is.

216
00:12:45.340 --> 00:12:50.300
So that's how we turned it into an array
of arrays that we could apply concatAll to

217
00:12:50.300 --> 00:12:53.254
and that's a skill you're gonna
use again and again and again.

218
00:12:53.254 --> 00:12:56.280
You're gonna take a nested
object in the nested tree,

219
00:12:56.280 --> 00:12:59.060
it might contain objects it might
contain arrays, by using map

220
00:12:59.060 --> 00:13:02.561
to convert it into an array of arrays
you'll be able to apply ConcatAll to it.

221
00:13:04.600 --> 00:13:08.220
But let's say movie lists look like this,
which is totally possible.

222
00:13:08.220 --> 00:13:10.068
Maybe movie lists is
just an array of arrays.

223
00:13:13.206 --> 00:13:14.310
&gt;&gt; Jafar Husain: Right?

224
00:13:14.310 --> 00:13:19.440
The reason it's not here is that we want
to have like the name of the genre list.

225
00:13:19.440 --> 00:13:20.590
Like drama and that type of thing.

226
00:13:20.590 --> 00:13:22.370
So we want an object with a name property.

227
00:13:22.370 --> 00:13:26.590
But if it was like that, then we actually
could use ConcatAll right at the top.

228
00:13:26.590 --> 00:13:27.870
And then filter it and grab.

229
00:13:27.870 --> 00:13:29.190
Excuse me.
And then map it.

230
00:13:29.190 --> 00:13:30.980
And grab only the video
IDs after the fact.

231
00:13:30.980 --> 00:13:34.230
So that's why we have to first map
to turn it into an array of arrays.

232
00:13:34.230 --> 00:13:37.676
And then apply ConcutAll.
&gt;&gt; [SOUND]

233
00:13:37.676 --> 00:13:41.276
[INAUDIBLE]

