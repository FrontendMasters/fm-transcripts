WEBVTT

1
00:00:04.870 --> 00:00:06.339
&gt;&gt; Jafar Husain: Question?
&gt;&gt; Off Camera 1: Will observable fire

2
00:00:06.339 --> 00:00:10.691
when forEach is called no matter if they
are a function that hasn't been called?

3
00:00:10.691 --> 00:00:11.345
&gt;&gt; Jafar Husain: What's that?

4
00:00:11.345 --> 00:00:12.776
&gt;&gt; Off Camera 1: Will observable fire when

5
00:00:12.776 --> 00:00:17.009
forEach is called even if they are in
a function that hasn't been called yet?

6
00:00:18.950 --> 00:00:19.530
&gt;&gt; Jafar Husain: You mean if forEach is

7
00:00:19.530 --> 00:00:22.050
itself nested inside a function and

8
00:00:22.050 --> 00:00:25.375
that hasn't been called yet?
&gt;&gt; Off Camera 1: I believe that is what

9
00:00:25.375 --> 00:00:27.510
they're getting at.
&gt;&gt; Jafar Husain: No.

10
00:00:27.510 --> 00:00:30.735
The point is the forEach
function needs to run, right.

11
00:00:30.735 --> 00:00:33.718
And so if you haven't called
this function yet, right,

12
00:00:33.718 --> 00:00:36.589
then you're not gonna get
that forEach function run.

13
00:00:38.210 --> 00:00:40.640
Now if I call it, then in this
case the forEach function runs.

14
00:00:40.640 --> 00:00:44.950
So that's really just about whether
the forEach function runs or not.

15
00:00:44.950 --> 00:00:47.830
And how we can create all these
objects and have nothing happen

16
00:00:47.830 --> 00:00:51.810
is going to be pretty clear when we take a
look at the implementation of observable.

17
00:00:51.810 --> 00:00:56.170
But I want you to get at least a 5,000
foot idea of what's really going on here.

18
00:00:56.170 --> 00:01:02.605
Let's say I create
a function called print and

19
00:01:02.605 --> 00:01:06.565
it's gonna console log hi,

20
00:01:06.565 --> 00:01:10.800
right?
&gt;&gt; Jafar Husain: I've created

21
00:01:10.800 --> 00:01:11.370
this function.

22
00:01:12.390 --> 00:01:14.150
If I run this now am I
gonna see hi on screen?

23
00:01:16.140 --> 00:01:21.077
Yeah, right, now let's say I create
a function to help me glue other functions

24
00:01:21.077 --> 00:01:30.024
together.
&gt;&gt; Jafar Husain: All it's

25
00:01:30.024 --> 00:01:34.810
gonna do is it's gonna take two functions
and then run them one after the other.

26
00:01:34.810 --> 00:01:38.762
And so I'm now gonna call then,
I'm gonna pass in print, and

27
00:01:38.762 --> 00:01:42.491
then I'm gonna pass in another
function which is gonna log

28
00:01:56.165 --> 00:01:57.260
&gt;&gt; Jafar Husain: I want you to take a look

29
00:01:57.260 --> 00:02:02.780
at this.
&gt;&gt; Jafar Husain: Is any code gonna run?

30
00:02:02.780 --> 00:02:04.060
Am I gonna see hi on the screen?

31
00:02:04.060 --> 00:02:06.890
Am I gonna see hi and
after on the screen now?

32
00:02:06.890 --> 00:02:09.558
What's really going on here?

33
00:02:09.558 --> 00:02:12.170
You know what, I am, actually.

34
00:02:12.170 --> 00:02:21.657
Sorry.
&gt;&gt; Jafar Husain: There's

35
00:02:21.657 --> 00:02:23.310
a lot of functions going on here, right.

36
00:02:24.650 --> 00:02:27.290
But what I'm actually doing is
I'm building a function and

37
00:02:27.290 --> 00:02:30.580
then I'm using another function
to glue it together with another,

38
00:02:30.580 --> 00:02:33.440
with a function that I
want to run afterwards.

39
00:02:33.440 --> 00:02:36.150
But I'm still creating another function.

40
00:02:36.150 --> 00:02:39.750
Look at, with all the stuff,
I haven't actually run any code.

41
00:02:39.750 --> 00:02:45.190
What I mean is, I haven't run the print
code, nor have I run this code.

42
00:02:45.190 --> 00:02:48.200
Because if you look inside of what then's
doing, it's just returning another

43
00:02:48.200 --> 00:02:51.180
function that calls the first function and
the next function.

44
00:02:51.180 --> 00:02:52.970
I know this is confusing code.

45
00:02:52.970 --> 00:02:55.830
But the point I'm trying to call
out is that we're not really

46
00:02:55.830 --> 00:02:58.180
running the code inside of the functions.

47
00:02:58.180 --> 00:03:02.660
We're just creating bigger and bigger
functions by gluing functions together.

48
00:03:02.660 --> 00:03:04.530
Does that make sense?

49
00:03:04.530 --> 00:03:05.690
Kinda?

50
00:03:05.690 --> 00:03:08.320
That's what's really
going on with observable.

51
00:03:08.320 --> 00:03:11.650
Observable's just an object with
a forEach function waiting to be called.

52
00:03:11.650 --> 00:03:15.920
And when we call map, we glue it together
with another function and create another

53
00:03:15.920 --> 00:03:19.050
function, with another object with
a forEach function waiting to be called.

54
00:03:19.050 --> 00:03:20.890
That's what we call laziness.

55
00:03:20.890 --> 00:03:23.230
Instead of doing something,
we create a function,

56
00:03:23.230 --> 00:03:26.200
which can be called later
on to do something.

57
00:03:26.200 --> 00:03:28.250
It's a very lazy way of coding, right, and

58
00:03:28.250 --> 00:03:31.620
it turns out that in programming,
laziness can be a good thing.

59
00:03:31.620 --> 00:03:34.980
Can be a very, very good thing,
cuz it buys us flexibility, right?

60
00:03:34.980 --> 00:03:37.950
A, one of the positives of this is I can
actually run this function now as many

61
00:03:37.950 --> 00:03:39.340
times as I want, right?

62
00:03:39.340 --> 00:03:41.930
Instead of just running the function,

63
00:03:41.930 --> 00:03:45.550
I can create a function that I
can call as many times as I want.

64
00:03:45.550 --> 00:03:46.975
That's what an observable is.

65
00:03:46.975 --> 00:03:50.562
Remember when I said an observable that
represents a network request will issue

66
00:03:50.562 --> 00:03:53.890
a network request again every
single time you call forEach.

67
00:03:53.890 --> 00:03:57.340
That's really at a high level
what we've been doing all along.

68
00:03:57.340 --> 00:03:59.540
Observable isn't so much of an object,

69
00:03:59.540 --> 00:04:03.810
it's really just window dressing around
a single function, which is forEach.

70
00:04:03.810 --> 00:04:06.930
And, we've been combining those forEach
functions together every single time we

71
00:04:06.930 --> 00:04:11.660
call a map and a filter, and creating
another function waiting to be called.

72
00:04:11.660 --> 00:04:15.240
So everything on the top half of this,

73
00:04:15.240 --> 00:04:18.120
it's just doing morally
the equivalent of this.

74
00:04:18.120 --> 00:04:20.740
It's just creating functions.

75
00:04:20.740 --> 00:04:23.880
More and gluing more functions
together to create new functions.

76
00:04:23.880 --> 00:04:26.460
That's why nothing happens
at the top of this code.

77
00:04:26.460 --> 00:04:29.990
Cuz we haven't really run any code
inside of any of the functions.

78
00:04:29.990 --> 00:04:34.180
We've just been gluing a bigger and bigger
function together waiting to be run.

79
00:04:35.250 --> 00:04:37.980
This turns out to be a really
powerful programming technique.

80
00:04:37.980 --> 00:04:42.210
At a high level what we're really doing
is we are passing functions to functions

81
00:04:42.210 --> 00:04:43.380
which create functions.

82
00:04:43.380 --> 00:04:47.150
And that can be confusing but
it's probably self-evident

83
00:04:47.150 --> 00:04:51.640
that that's actually a very high-level and
powerful technique to build a program.

84
00:04:51.640 --> 00:04:53.460
You're at a very high level of coding now.

85
00:04:53.460 --> 00:04:56.280
When you're taking functions,
gluing them together with other functions,

86
00:04:56.280 --> 00:04:57.140
to create more functions.

87
00:04:57.140 --> 00:04:59.930
And so that's one of the reasons
why we're able to write so

88
00:04:59.930 --> 00:05:02.820
little code to do so much.

89
00:05:02.820 --> 00:05:04.530
So that's the level of abstraction
we're working out here.

90
00:05:04.530 --> 00:05:06.040
It's very expert level.

91
00:05:06.040 --> 00:05:09.387
But it doesn't have to be, we don't have
to think of it as all the complexity.

92
00:05:09.387 --> 00:05:11.522
Because we can just look at
these simple five functions,

93
00:05:11.522 --> 00:05:14.200
understand what they do to collections,
and use them again and again.

94
00:05:14.200 --> 00:05:15.600
But there's a lot going on under the hood.

95
00:05:15.600 --> 00:05:16.460
Yes.

96
00:05:16.460 --> 00:05:20.060
Question about what does observable
use under the hood to run reactively?

97
00:05:22.780 --> 00:05:27.910
Well not much, in the sense that
it's just thin window dressing over

98
00:05:27.910 --> 00:05:31.050
the simple asynchronous APIs
that are already in the browser.

99
00:05:31.050 --> 00:05:32.810
So if I make an observable
based on setTimeout,

100
00:05:32.810 --> 00:05:36.430
well when I call forEach, under the hood
it's just gonna call setTimeout.

101
00:05:36.430 --> 00:05:39.748
And then when I call subscription.dispose
it's gonna call clearTimeout using

102
00:05:39.748 --> 00:05:40.980
that handle.

103
00:05:40.980 --> 00:05:42.104
Let's take a look, you know what,

104
00:05:42.104 --> 00:05:43.760
let's take a look at what
an observable looks like.

105
00:05:43.760 --> 00:05:46.920
I wanted to get to this a little later but
just so we don't feel like it's voodoo

106
00:05:46.920 --> 00:05:51.550
going under the hood here, let's take
a look at how I would take set timeout,

107
00:05:51.550 --> 00:05:54.730
which is a browser API which
fires after a few seconds.

108
00:05:54.730 --> 00:05:59.340
And adapt it into an observable, cuz you
can take any push API, any async API

109
00:05:59.340 --> 00:06:03.110
that calls you instead of you calling it,
and you can make it into an observable.

110
00:06:03.110 --> 00:06:07.344
So in the browser you can call,
setTimeout, and

111
00:06:07.344 --> 00:06:14.279
you can pass it a function, and then log
something, and then you give it a time.

112
00:06:14.279 --> 00:06:18.150
And after that time elapses,
it will run your function.

113
00:06:18.150 --> 00:06:20.937
How many people have used this API before?

114
00:06:20.937 --> 00:06:22.300
A few people, yeah?

115
00:06:22.300 --> 00:06:23.920
So it's a useful little API, right?

116
00:06:23.920 --> 00:06:27.458
It also gives you a little handle,
it gives you a handle,

117
00:06:27.458 --> 00:06:29.391
which is a way that you can use.

118
00:06:29.391 --> 00:06:32.990
Let's say after one second,
you decide whoa, the guy closed the form,

119
00:06:32.990 --> 00:06:35.320
he doesn't want that to fire anymore.

120
00:06:35.320 --> 00:06:37.050
Right, I don't want to
show this alert box or

121
00:06:37.050 --> 00:06:39.340
do whatever I was doing,
because now he's closed that form.

122
00:06:39.340 --> 00:06:41.110
He's hit the x button and he's gone away.

123
00:06:41.110 --> 00:06:45.450
Well, in the tradition of having many,
many different async APIs, right?

124
00:06:45.450 --> 00:06:48.540
If you were working with a DOM event,
you would call remove event listener.

125
00:06:48.540 --> 00:06:49.870
But setTimeout is different, right.

126
00:06:49.870 --> 00:06:55.780
It's got actually another weird
clearTimeout, I think it's clearTimeout,

127
00:06:55.780 --> 00:06:59.070
and then you have to pass in this handle,
does that makes sense?

128
00:07:00.090 --> 00:07:02.909
I mean with the DOM even it's got
a different interface, right,

129
00:07:02.909 --> 00:07:11.243
you call it create a handler,
&gt;&gt; Jafar Husain: and

130
00:07:11.243 --> 00:07:18.471
then a dom.addEventListener
&gt;&gt; Jafar Husain: And then

131
00:07:18.471 --> 00:07:23.615
if you wanna remove, it looks like this.
&gt;&gt; Jafar Husain: Notice

132
00:07:23.615 --> 00:07:25.820
both these things are kinda
doing the same thing.

133
00:07:25.820 --> 00:07:30.970
I mean you're registering a callback
to be called at a certain point, right.

134
00:07:30.970 --> 00:07:32.551
You don't necessarily know
when it's gonna get called.

135
00:07:32.551 --> 00:07:37.107
And hen if you want to stop receiving any
information, if you wanna cancel that,

136
00:07:37.107 --> 00:07:38.210
you call this API.

137
00:07:38.210 --> 00:07:41.170
Here with the DOM event it's kind of the
same thing, you're giving somebody else

138
00:07:41.170 --> 00:07:43.350
a callback, somebody's calling you
instead of you calling them, right.

139
00:07:43.350 --> 00:07:47.460
And then later on if you decide you wanna
cancel, it's a totally different API, but

140
00:07:47.460 --> 00:07:49.480
they're both doing the exact same thing.

141
00:07:49.480 --> 00:07:52.950
It's this kind of complexity that
really doesn't need to exist.

142
00:07:52.950 --> 00:07:57.020
We can have just one API for
dealing with all push data sources,

143
00:07:57.020 --> 00:08:01.220
where somebody is pushing information to
you, and that's what an observable is.

144
00:08:01.220 --> 00:08:04.990
So let's say I want to take this
setTimeout API which is just an arbitrary

145
00:08:04.990 --> 00:08:08.110
design of how a push API should work, and
I'm gonna convert it into an observable.

146
00:08:08.110 --> 00:08:11.170
So it looks the same as all
the other observable APIs.

147
00:08:11.170 --> 00:08:15.330
So I'm gonna use, now remember I told
you an observable is nothing but

148
00:08:15.330 --> 00:08:17.560
an object with a forEach method,
and I didn't lie.

149
00:08:17.560 --> 00:08:19.860
That's all it is,
it's an object with a forEach method.

150
00:08:19.860 --> 00:08:21.580
And it accepts an observer object.

151
00:08:21.580 --> 00:08:24.630
Now I want to take a little moment to
remind you what an observer object.

152
00:08:24.630 --> 00:08:29.072
An observer object is a method,
is an object with three functions.

153
00:08:55.995 --> 00:08:56.506
&gt;&gt; Jafar Husain: That's all

154
00:08:56.506 --> 00:08:57.224
an observer is.

155
00:08:57.224 --> 00:08:59.864
Remember when you
subscribe to an observable,

156
00:08:59.864 --> 00:09:04.490
it's a lot like subscribing to an event
but giving three callbacks instead of one.

157
00:09:04.490 --> 00:09:07.090
Does anybody remember why we
have those two extra callbacks?

158
00:09:09.750 --> 00:09:12.780
What do they represent, what are they for?
&gt;&gt; Off Camera 2: Terms of

159
00:09:12.780 --> 00:09:14.230
completion.
&gt;&gt; Jafar Husain: Yeah.

160
00:09:14.230 --> 00:09:18.500
They're for completing observable
contract with those two extra semantics

161
00:09:18.500 --> 00:09:20.560
that were left out of
iterator all those years ago.

162
00:09:20.560 --> 00:09:24.410
We want the producer to be able to
push a message to the consumer,

163
00:09:24.410 --> 00:09:27.030
not just be able to give them data,
which is what onNext is for.

164
00:09:27.030 --> 00:09:30.730
We also want a well defined way for
the producer to say to the consumer,

165
00:09:30.730 --> 00:09:34.110
no more data is arriving,
or an error occurred.

166
00:09:34.110 --> 00:09:36.070
So that's what those
two callbacks are for.

167
00:09:36.070 --> 00:09:39.078
So when you forEach over an observable,

168
00:09:39.078 --> 00:09:45.811
like I did down here.
&gt;&gt; Jafar Husain: This

169
00:09:45.811 --> 00:09:47.568
is actually just a short hand.

170
00:09:57.088 --> 00:09:58.398
&gt;&gt; Jafar Husain: This is actually just

171
00:09:58.398 --> 00:10:03.323
a shorthand for this.
&gt;&gt; Jafar Husain: So

172
00:10:03.323 --> 00:10:06.306
it's just a shorthand for
only providing an onNext handler.

173
00:10:07.890 --> 00:10:09.200
That's all you're doing, you're creating,

174
00:10:09.200 --> 00:10:12.210
it's a shorthand,
it creates the observer object for you.

175
00:10:12.210 --> 00:10:13.560
Does that makes sense?

176
00:10:13.560 --> 00:10:15.497
So whenever you implement an observable,

177
00:10:15.497 --> 00:10:18.090
you expect that forEach will
accept an observer object.

178
00:10:18.090 --> 00:10:22.870
Cuz RX, the underlying library,
takes any possible overload of forEach and

179
00:10:22.870 --> 00:10:26.560
it basically converts all of
those into observer objects.

180
00:10:26.560 --> 00:10:29.495
You only have to worry about, you don't
have to worry about all the different

181
00:10:29.495 --> 00:10:30.772
possible overloads cuz I can also

182
00:10:40.594 --> 00:10:41.145
&gt;&gt; Jafar Husain: We covered this in

183
00:10:41.145 --> 00:10:44.220
the presentation yesterday but
it's been awhile so let's cover it again.

184
00:10:44.220 --> 00:10:47.520
So, you can pass in onNext and
then onError.

185
00:10:47.520 --> 00:10:54.382
You can pass in three callbacks.
&gt;&gt; Jafar Husain: Function

186
00:10:54.382 --> 00:10:56.115
with no arguments which is onCompleted.

187
00:10:58.650 --> 00:11:03.127
And that will just get converted into

188
00:11:08.653 --> 00:11:09.971
&gt;&gt; Jafar Husain: An observer object.

189
00:11:15.297 --> 00:11:17.710
&gt;&gt; Jafar Husain: Does that makes sense?

190
00:11:17.710 --> 00:11:19.100
So the first argument is onNext.

191
00:11:19.100 --> 00:11:20.200
The second argument onError.

192
00:11:20.200 --> 00:11:22.090
And the last argument onCompleted.

193
00:11:22.090 --> 00:11:26.099
Or you can pass in an object with three
named functions, onNext, onError,

194
00:11:26.099 --> 00:11:27.560
and onCompleted.

195
00:11:27.560 --> 00:11:30.096
It's totally up to you,
either one of these will work.

196
00:11:30.096 --> 00:11:33.540
However when we're writing
observables ourselves,

197
00:11:33.540 --> 00:11:38.520
we can count on the RX library of
always converting into this form.

198
00:11:38.520 --> 00:11:42.270
So we'll always get an observer
object with those three properties.

199
00:11:42.270 --> 00:11:44.480
So under the hood RX takes this and

200
00:11:44.480 --> 00:11:48.560
converts it into this before passing
the observer to an observable.

201
00:11:48.560 --> 00:11:49.580
Does that make sense?

202
00:11:49.580 --> 00:11:52.580
So it's got a little sugar where it
just converts from one form to another.

203
00:11:52.580 --> 00:11:54.230
So when I write an observable,

204
00:11:54.230 --> 00:11:57.570
I can be sure that this observer
object is in this form.

