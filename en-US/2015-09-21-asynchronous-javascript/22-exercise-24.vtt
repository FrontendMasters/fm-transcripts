WEBVTT

1
00:00:00.000 --> 00:00:03.796
[MUSIC]

2
00:00:03.796 --> 00:00:06.565
&gt;&gt; Jafar Husain: So now actually I think
this function is gonna, this test, this

3
00:00:06.565 --> 00:00:10.800
problem is gonna pull all of the functions
we've learned today together I believe.

4
00:00:10.800 --> 00:00:15.320
We're gonna return the video ID, title,
the middle interesting moment that's kind

5
00:00:15.320 --> 00:00:17.980
of an interesting life so
every video has a list in Netflix.

6
00:00:17.980 --> 00:00:21.130
Every video has a list of interesting
moments where you might wanna, we might

7
00:00:21.130 --> 00:00:24.250
wanna display that screenshot when
you're just browsing through the videos.

8
00:00:24.250 --> 00:00:26.490
And we might say,
that's interesting moment you know and

9
00:00:26.490 --> 00:00:29.700
die hard where he's falling off the
building or something like that, right?

10
00:00:29.700 --> 00:00:30.710
We pick interesting moment and

11
00:00:30.710 --> 00:00:33.310
so everybody has an array of
these interesting moments.

12
00:00:33.310 --> 00:00:35.550
So if we look at the type here, so

13
00:00:35.550 --> 00:00:39.610
here's one single video, we see that
it's got ID, title and boxarts.

14
00:00:39.610 --> 00:00:44.230
It's also about URL rating but it also has
another array on it, interestingMoment.

15
00:00:44.230 --> 00:00:47.130
So we wanna pick out
the middle interesting moment.

16
00:00:47.130 --> 00:00:50.150
The one in in the middle of the movie
right would pick out one of the beginning,

17
00:00:50.150 --> 00:00:54.350
one of the middlemen of the end and
we also wanna pick the smallest box art.

18
00:00:54.350 --> 00:00:56.080
That's how we're gonna
put all this together?

19
00:00:56.080 --> 00:00:57.660
How many people finish
this question by the way?

20
00:00:57.660 --> 00:01:02.070
It's all right and we judging it,
it's a hard one, not quite okay.

21
00:01:02.070 --> 00:01:04.360
Let's take a look and
see if we can solve it together.

22
00:01:04.360 --> 00:01:08.570
So we're gonna start out with
concatMap and movieList.

23
00:01:08.570 --> 00:01:11.330
I'm gonna shorten this to
the use the new era function.

24
00:01:15.810 --> 00:01:19.922
So for every movieList,
we're going to, and

25
00:01:19.922 --> 00:01:24.993
I'm gonna start off by mapping
over the movieList here.

26
00:01:24.993 --> 00:01:27.919
We're gonna get out a video, excuse me,

27
00:01:27.919 --> 00:01:32.950
we're gonna get out a video and
now we've got a video, that's great.

28
00:01:32.950 --> 00:01:35.930
So we've got this thing that's got
an array of interesting moments and

29
00:01:35.930 --> 00:01:37.249
an array of bookmarks.

30
00:01:39.080 --> 00:01:42.430
So, I guess I could do this,
I could start grabbing the bookmarks.

31
00:01:43.490 --> 00:01:47.330
Let's buy ourselves a little room here
by making this a block function and

32
00:01:47.330 --> 00:01:49.390
then we can put multiple lines in.

33
00:01:49.390 --> 00:01:54.100
So, what if I collect up the bookmarks or
the middle interesting moment,

34
00:01:54.100 --> 00:01:54.759
let's start with that one.

35
00:01:58.650 --> 00:02:01.180
So, as you're trying to choose
you've only got five functions.

36
00:02:01.180 --> 00:02:03.880
So, there's not that many possibilities
whenever you're trying to solve a problem

37
00:02:03.880 --> 00:02:07.950
or sub problem like this, you have to ask
yourself what's the right function to use.

38
00:02:07.950 --> 00:02:11.380
Anybody want to take a guess, you're
going to take these big problems and

39
00:02:11.380 --> 00:02:15.010
break them up they might seem big but
you can break them up into small problems.

40
00:02:15.010 --> 00:02:18.490
Anybody want to take a guess
as to what function I can use

41
00:02:18.490 --> 00:02:22.790
to pull the middle interestingMoment
out of this little array on the video?

42
00:02:22.790 --> 00:02:25.770
What function should I use?
&gt;&gt; Male Speaker 1: Filter.

43
00:02:25.770 --> 00:02:26.370
&gt;&gt; Jafar Husain: Filter, right?

44
00:02:26.370 --> 00:02:28.439
Because I've got a bunch of stuff
I'm only interested in one so

45
00:02:28.439 --> 00:02:30.015
I'm gonna use the filter,
so let's try that.

46
00:02:52.294 --> 00:02:53.540
&gt;&gt; Jafar Husain: Done-zo!

47
00:02:53.540 --> 00:02:55.940
So that's one piece of
the sub problem solved,

48
00:02:55.940 --> 00:02:58.770
what about let's tackle the the box arts.

49
00:02:58.770 --> 00:03:00.840
So this is not this tiny
piece of the sub problem,

50
00:03:00.840 --> 00:03:02.270
we already know how to solve this right.

51
00:03:02.270 --> 00:03:08.142
What's the operator we're gonna use to get
the smallest operative word being smallest

52
00:03:08.142 --> 00:03:13.180
box art from a collection of box art.
&gt;&gt; Female Speaker 1: Produce.

53
00:03:13.180 --> 00:03:14.380
&gt;&gt; Jafar Husain: Produce, because in order

54
00:03:14.380 --> 00:03:16.370
to see if something is
smaller than something else,

55
00:03:16.370 --> 00:03:18.950
we need to look at two
values at the same time.

56
00:03:18.950 --> 00:03:21.660
And reduce and
zip are the only operators that

57
00:03:21.660 --> 00:03:26.451
accept a function which has two arguments,
so we're gonna have to use reduce.

58
00:03:49.056 --> 00:03:49.588
&gt;&gt; Jafar Husain: So,

59
00:03:49.588 --> 00:03:53.854
I have the smallestBoxArt so far, and

60
00:03:53.854 --> 00:03:58.521
the current box art and we're going to use

61
00:03:58.521 --> 00:04:03.603
that familiar pattern we've been using so.

62
00:04:14.737 --> 00:04:16.414
&gt;&gt; Jafar Husain: So if the current one is

63
00:04:16.414 --> 00:04:21.284
smaller, if the smallest one so
far is smaller than the current,

64
00:04:28.249 --> 00:04:29.529
&gt;&gt; Jafar Husain: We'll return

65
00:04:29.529 --> 00:04:34.436
the smallest,
otherwise we will return the current,

66
00:04:34.436 --> 00:04:38.190
and that's all there is for reduce.

67
00:04:38.190 --> 00:04:41.180
So now we've got a middle
interestingMoment, and

68
00:04:41.180 --> 00:04:43.440
we've got the smallestBoxArt, right?

69
00:04:43.440 --> 00:04:46.230
Now both of these, I want to pull I
want to point out that both of these,

70
00:04:46.230 --> 00:04:48.700
what's the type of
middleInterestingMoment at this moment.

71
00:04:48.700 --> 00:04:50.000
Can anybody tell me what that is?

72
00:04:50.000 --> 00:04:54.689
The type of middleInterestingMoment.
&gt;&gt; Female Speaker 1: It's an array.

73
00:04:54.689 --> 00:04:55.881
&gt;&gt; Jafar Husain: It's an array,

74
00:04:55.881 --> 00:05:00.237
an array containing how many items?
&gt;&gt; Male Speaker 3: One, probably.

75
00:05:00.237 --> 00:05:01.519
&gt;&gt; Jafar Husain: Over here I hear one,

76
00:05:01.519 --> 00:05:02.495
two.
&gt;&gt; Male Speaker 1: One.

77
00:05:02.495 --> 00:05:03.808
&gt;&gt; Jafar Husain: One, yeah and

78
00:05:03.808 --> 00:05:11.940
smallestBoxArt is an array right because
that's what reduce returns in array.

79
00:05:11.940 --> 00:05:14.170
How many items does it contain?
&gt;&gt; Male Speaker 4: One.

80
00:05:14.170 --> 00:05:14.980
&gt;&gt; Jafar Husain: One, so

81
00:05:14.980 --> 00:05:16.860
we actually have two arrays that or

82
00:05:16.860 --> 00:05:20.870
both length one and what we want to do and
this is the challenging part.

83
00:05:20.870 --> 00:05:24.760
We know that we need to have middle
interesting moment in smallest box are in

84
00:05:24.760 --> 00:05:29.310
scope to return our value and
we need to have them in scope, right?

85
00:05:29.310 --> 00:05:34.210
The problem is, we can't use the index
here zero to pull them both out right?

86
00:05:34.210 --> 00:05:37.576
It's almost like we need both of
them in scope at the same time.

87
00:05:37.576 --> 00:05:39.527
So there's two ways we can do this.

88
00:05:39.527 --> 00:05:41.651
One is we can go on all right.

89
00:05:58.521 --> 00:06:01.357
&gt;&gt; Jafar Husain: And now we've got
them both in scope at the same time,

90
00:06:01.357 --> 00:06:08.345
that's one way to do it so.
&gt;&gt; Jafar Husain: And

91
00:06:08.345 --> 00:06:12.365
now we actually have everything
in scope video, moment,

92
00:06:12.365 --> 00:06:15.910
the smallest box art to create our result.

93
00:06:15.910 --> 00:06:20.150
But that's a little bit weird because I
mean I could equally switch this around.

94
00:06:20.150 --> 00:06:24.343
I could do smallest box art and

95
00:06:24.343 --> 00:06:29.220
then middle interesting moment.

96
00:06:33.520 --> 00:06:37.200
Usually we use map when you
need to do some operation

97
00:06:37.200 --> 00:06:39.080
before some other operation.

98
00:06:39.080 --> 00:06:43.440
Now we need to map over
all of the movie lists

99
00:06:43.440 --> 00:06:46.400
before we can map over their
titles because we need to do that.

100
00:06:46.400 --> 00:06:48.260
The one comes before
the other in the tree.

101
00:06:48.260 --> 00:06:51.230
We need to first you know if you are using
a loop you would first need to loop over

102
00:06:51.230 --> 00:06:52.250
all the movie lists.

103
00:06:52.250 --> 00:06:54.310
And then within each movie
list loop over all the titles.

104
00:06:54.310 --> 00:06:57.930
So there's an order dependency there,
we have to do one before the other.

105
00:06:57.930 --> 00:07:01.260
But here, we actually just have both
of these in memory at the same time.

106
00:07:01.260 --> 00:07:05.130
We don't need to go inside of the middle
interesting moments to get up the smallest

107
00:07:05.130 --> 00:07:08.540
art, it's like we did with video lists and
videos.

108
00:07:08.540 --> 00:07:11.570
So what we need is a function
that will bring both these values

109
00:07:11.570 --> 00:07:13.520
in scope at the exact same time.

110
00:07:13.520 --> 00:07:17.440
But doesn't make one dependent on
the other or anything like that and

111
00:07:17.440 --> 00:07:19.820
map zip excuse me, is perfect for that.

112
00:07:22.340 --> 00:07:27.207
With our zipping up a zipper with only one
tooth on each end like a zipper of one

113
00:07:27.207 --> 00:07:27.749
tooth.

114
00:07:43.075 --> 00:07:43.977
&gt;&gt; Jafar Husain: And now in here,

115
00:07:43.977 --> 00:07:45.850
I have all the information I need.

116
00:07:45.850 --> 00:07:48.950
So even though the map example
would have worked it's sub optimal.

117
00:07:48.950 --> 00:07:51.280
It doesn't, it means arbitrary
if you pick one or the other.

118
00:07:51.280 --> 00:07:55.552
This is actually more efficient as
well because we only do one loop.

119
00:08:06.395 --> 00:08:07.241
&gt;&gt; Jafar Husain: So now I've got

120
00:08:07.241 --> 00:08:11.474
a variable bound to be interesting moment
the smallest interest or the middle

121
00:08:11.474 --> 00:08:16.690
interesting moment a variable bound to
the box are a variable bound to the video.

122
00:08:16.690 --> 00:08:22.815
And I'm ready to create my
result which I believe is,

123
00:08:22.815 --> 00:08:25.949
&gt;&gt; Jafar Husain: Was just interesting that

124
00:08:25.949 --> 00:08:30.656
was at the, what do I have to grab here?

125
00:08:30.656 --> 00:08:35.803
Middle interesting moment time I need to
get the time and the URL of the box art.

126
00:08:54.994 --> 00:08:58.870
And I believe we have everything we need,
I wonder if that will run.

127
00:09:00.580 --> 00:09:02.210
It's like I have a syntax error somewhere.

128
00:09:02.210 --> 00:09:07.030
But rather than spend a lot of
time figuring out where that is

129
00:09:07.030 --> 00:09:09.700
I'll actually I wanna be careful
here cuz we're not quite done.

130
00:09:09.700 --> 00:09:13.260
So notice I've got contactMap and

131
00:09:13.260 --> 00:09:18.470
I've got map and then within this,
I forgotten to return.

132
00:09:19.850 --> 00:09:22.770
So within this, I've got another

133
00:09:25.950 --> 00:09:28.890
array, so we've actually got at least
a three dimensional collection here.

134
00:09:28.890 --> 00:09:33.520
Because inside of this map instead
of reduce here, or excuse me,

135
00:09:33.520 --> 00:09:37.840
inside of this map I'm
returning another array, right?

136
00:09:37.840 --> 00:09:41.340
And so we've gotta concatMap,
a map and then inside of here,

137
00:09:41.340 --> 00:09:42.280
we're returning yet another array.

138
00:09:42.280 --> 00:09:45.280
So we've got a three dimensional
collection, so we need two flattens.

139
00:09:45.280 --> 00:09:48.810
So I'm gonna change this
map into a concatMap and

140
00:09:48.810 --> 00:09:52.080
now we should flatten the whole thing
out but I'm probably still missing that.

141
00:09:52.080 --> 00:09:53.054
I'll just show the answer.

142
00:10:07.195 --> 00:10:11.022
&gt;&gt; Jafar Husain: So in this example
actually in line rather than this

143
00:10:11.022 --> 00:10:16.420
first assigning the middle
interesting moment to a variable.

144
00:10:16.420 --> 00:10:18.540
This is getting the non
interesting moment or

145
00:10:18.540 --> 00:10:20.079
see me this is getting
the smallest box art.

146
00:10:21.420 --> 00:10:24.111
And then grabbing the middle
interesting assigning them both

147
00:10:24.111 --> 00:10:26.851
the variables I just in lined them
directly inside of the call to

148
00:10:26.851 --> 00:10:31.683
zip.
&gt;&gt; Male Speaker 1: There's

149
00:10:31.683 --> 00:10:35.220
a question about what is it we won
the morning to reduce its cool.

150
00:10:36.940 --> 00:10:37.760
&gt;&gt; Jafar Husain: You want to keep warm

151
00:10:37.760 --> 00:10:39.310
doing?
&gt;&gt; Male Speaker 1: What if you didn't want

152
00:10:39.310 --> 00:10:41.150
to?
&gt;&gt; Male Speaker 3: Like,

153
00:10:41.150 --> 00:10:44.070
the asynchronous is three or
four items that you need,

154
00:10:44.070 --> 00:10:45.840
instead of just two.
&gt;&gt; Jafar Husain: Well,

155
00:10:45.840 --> 00:10:48.430
so you can always use map to do that,
right?

156
00:10:48.430 --> 00:10:52.870
But the point is, let's say I have
got two different async APIs, and

157
00:10:52.870 --> 00:10:54.910
I can call them at the same time.

158
00:10:54.910 --> 00:10:56.530
Then, zip is more appropriate,

159
00:10:56.530 --> 00:11:00.090
because I don't have to call
one in order to call the other.

160
00:11:00.090 --> 00:11:02.770
Right, it's when you have to call
one in order to get the other

161
00:11:02.770 --> 00:11:04.040
that you would want to call map.

162
00:11:04.040 --> 00:11:07.650
Cuz you map over the first, and somehow
using the data that comes out of that,

163
00:11:07.650 --> 00:11:11.110
you acquire the ability to call
the second, that's where you need map or

164
00:11:11.110 --> 00:11:12.270
you have an order dependency.

165
00:11:12.270 --> 00:11:14.990
Just like I have to map over
the video lists before I can

166
00:11:14.990 --> 00:11:17.990
map over each video inside,
that's when map's appropriate.

167
00:11:17.990 --> 00:11:20.700
But I think they, they're actually
what the question was getting at is

168
00:11:20.700 --> 00:11:22.416
what if you need 15-
&gt;&gt; Male Speaker 5: Yeah.

169
00:11:22.416 --> 00:11:23.020
&gt;&gt; Jafar Husain: Or 12?

170
00:11:23.020 --> 00:11:26.890
So the zip we've defined here works out
only two just to keep the implementation

171
00:11:26.890 --> 00:11:29.640
simple, the zip that you're
going to use in our X and

172
00:11:29.640 --> 00:11:32.720
when you can run right over
as well just accept end.

173
00:11:32.720 --> 00:11:35.880
So you can specify as many arrays you
want and then the final function just

174
00:11:35.880 --> 00:11:39.260
accept that many number of arguments,
to combine, so good question.

