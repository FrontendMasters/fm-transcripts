WEBVTT

1
00:00:00.000 --> 00:00:03.896
[MUSIC]

2
00:00:03.896 --> 00:00:07.561
&gt;&gt; Jafar Husain: I'm gonna show
my HTML and I'm going to put in

3
00:00:07.561 --> 00:00:15.468
a button.
&gt;&gt; Jafar Husain: And

4
00:00:15.468 --> 00:00:19.906
give it an ID.
&gt;&gt; Jafar Husain: And

5
00:00:19.906 --> 00:00:21.197
we'll pull in this button up here.

6
00:00:33.965 --> 00:00:38.285
&gt;&gt; Jafar Husain: And
now I'm gonna create button clicks, right?

7
00:00:38.285 --> 00:00:41.345
Cuz the first thing we do,
when we have an asynchronous API,

8
00:00:41.345 --> 00:00:43.030
is we adapt it to an observable.

9
00:00:43.030 --> 00:00:46.818
So, I'm gonna create clicks and
I'm gonna use the fromEvent method

10
00:00:46.818 --> 00:00:51.608
that we just wrote.
&gt;&gt; Jafar Husain: And

11
00:00:51.608 --> 00:00:58.354
I'm going to put in the button, and
the name of the event which is click,

12
00:00:58.354 --> 00:01:03.120
and let's just see right
off the bat if this works.

13
00:01:03.120 --> 00:01:06.040
We're gonna pass in forEach function.

14
00:01:06.040 --> 00:01:08.740
I'm just gonna log it to the console.

15
00:01:08.740 --> 00:01:12.055
And if it doesn't, that'll be a good
opportunity for us to debug it, and

16
00:01:12.055 --> 00:01:13.080
see what's going on.

17
00:01:13.080 --> 00:01:16.460
So run, uh-oh, unexpected token.

18
00:01:16.460 --> 00:01:19.080
Am I in 6to5?

19
00:01:19.080 --> 00:01:22.514
I may have just forgotten to set my
browser to 6to5, there we go, 6to5.

20
00:01:23.650 --> 00:01:25.963
That will do the transpolation,
allow me to use ES6.

21
00:01:25.963 --> 00:01:29.862
It means, literally, ES6to5 so
it's gonna convert it for us so

22
00:01:29.862 --> 00:01:31.823
we get to use the arrow function.

23
00:01:31.823 --> 00:01:34.953
Clear.

24
00:01:34.953 --> 00:01:38.242
I forgot to show the HTML window or

25
00:01:38.242 --> 00:01:45.568
the output window.
&gt;&gt; Off Camera 1: Looks like you

26
00:01:45.568 --> 00:01:49.212
might be able to just add it to the URL.
&gt;&gt; Jafar Husain: Add it, sorry?

27
00:01:49.212 --> 00:01:50.164
&gt;&gt; Off Camera 1: Well, so

28
00:01:50.164 --> 00:01:53.847
you see HTML comma, yeah.
&gt;&gt; Jafar Husain: Where

29
00:01:53.847 --> 00:01:56.422
is it?
&gt;&gt; Off Camera 1: You just type comma

30
00:01:56.422 --> 00:01:59.871
output.
&gt;&gt; Jafar Husain: That was a good tip,

31
00:01:59.871 --> 00:02:01.482
thank you.

32
00:02:01.482 --> 00:02:03.602
So now let's see, is this font size?

33
00:02:03.602 --> 00:02:06.793
Are we doing okay, font size wise?
&gt;&gt; Off Camera 2: Yeah,

34
00:02:06.793 --> 00:02:11.337
it's 20 points.
&gt;&gt; Jafar Husain: Unfortunately it's kind

35
00:02:11.337 --> 00:02:15.363
of blocking my way here and so
I'll click me and look at that.

36
00:02:15.363 --> 00:02:18.163
We're now forEaching over a click
stream without much code.

37
00:02:18.163 --> 00:02:20.583
So we've got an observable, right?

38
00:02:20.583 --> 00:02:23.050
We've written it out to the console, but

39
00:02:23.050 --> 00:02:27.923
what we actually wrote out to the console
is the event object we got from the click.

40
00:02:27.923 --> 00:02:31.409
That's all that code there, that's all
that stuff from the console you're seeing.

41
00:02:31.409 --> 00:02:34.609
It's all the properties on the event
object we got from the click.

42
00:02:34.609 --> 00:02:39.410
So let's print out just one or
two of those properties.

43
00:02:41.170 --> 00:02:45.412
I think we had some problems with offsetX
didn't we, when we tried it on Firefox?

44
00:02:45.412 --> 00:02:47.843
But pageX, we might have a pageX for
this click button so

45
00:02:47.843 --> 00:02:49.881
we could see where we're
actually clicking.

46
00:03:04.762 --> 00:03:05.934
&gt;&gt; Jafar Husain: And this is the x and

47
00:03:05.934 --> 00:03:09.825
y position on the page where
I'm clicking the button, right?

48
00:03:11.065 --> 00:03:13.100
So why don't we map it?

49
00:03:13.100 --> 00:03:14.310
Why don't we translate this number?

50
00:03:14.310 --> 00:03:15.909
I mean this is kind of a silly program,
but

51
00:03:15.909 --> 00:03:18.030
it's just to demonstrate
the code in action, right?

52
00:03:18.030 --> 00:03:22.581
So I'm gonna map over this.
&gt;&gt; Off Camera 2: You can remove the HTML

53
00:03:22.581 --> 00:03:26.363
panel from the comma.
&gt;&gt; Jafar Husain: Yeah it'll require,

54
00:03:26.363 --> 00:03:29.160
good call, good call, that's much nicer.

55
00:03:29.160 --> 00:03:31.997
And then what we can do with a very small

56
00:03:31.997 --> 00:03:38.593
console.
&gt;&gt; Jafar Husain: So

57
00:03:38.593 --> 00:03:40.060
let's map over this now.

58
00:03:40.060 --> 00:03:43.300
And as soon as I have more than
one operator notice what I do.

59
00:03:43.300 --> 00:03:46.500
I move it to the next tab level so
that we can line up.

60
00:03:46.500 --> 00:03:51.032
And let's take this event object and

61
00:03:51.032 --> 00:03:54.550
why not just pull off the pageX.

62
00:03:54.550 --> 00:03:56.410
And let's just add 50 to it.

63
00:03:56.410 --> 00:03:59.870
I know it's a silly program, but
you kind of get the point, right?

64
00:03:59.870 --> 00:04:01.910
Now we can just display the data.

65
00:04:01.910 --> 00:04:02.620
We don't have to pull up pageX.

66
00:04:02.620 --> 00:04:03.900
Now we actually just got a number.

67
00:04:03.900 --> 00:04:05.880
So we're just taking pageX and
we added 50 to it.

68
00:04:05.880 --> 00:04:10.353
Or why don't we,
just to make sure it worked,

69
00:04:10.353 --> 00:04:15.301
we just turn it into a string and
put px afterwards.

70
00:04:15.301 --> 00:04:17.281
Gonna run it.

71
00:04:17.281 --> 00:04:21.650
So we can see that we're now
mapping this observable.

72
00:04:21.650 --> 00:04:23.180
That we're mapping the data comes out.

73
00:04:23.180 --> 00:04:25.340
We're translating it, right?

74
00:04:25.340 --> 00:04:31.541
And I actually only wanna see
numbers that are say larger than 40.

75
00:04:50.104 --> 00:04:50.862
&gt;&gt; Jafar Husain: There we got one.

76
00:04:50.862 --> 00:04:52.982
&gt;&gt; Multiple: [LAUGH]

77
00:04:52.982 --> 00:04:53.964
&gt;&gt; Off Camera 1: Succeeded at

78
00:04:53.964 --> 00:04:56.204
partially breaking it.
&gt;&gt; Jafar Husain: So,

79
00:04:56.204 --> 00:05:01.483
let's take a look at what actually
goes on under the hood, shall we?

80
00:05:01.483 --> 00:05:02.723
So how are we gonna figure out?

81
00:05:02.723 --> 00:05:06.584
Well, let's throw a breakpoint
somewhere in this code.

82
00:05:06.584 --> 00:05:12.670
In fact, let's throw a breakpoint in,
right here.

83
00:05:13.790 --> 00:05:16.550
Let's see what happens when we
call forEach on an observable.

84
00:05:16.550 --> 00:05:19.153
Let's walk through the chain and
let's see what happens.

85
00:05:19.153 --> 00:05:23.313
So you let me know, Mark,
if I need to bump up this font size.

86
00:05:28.413 --> 00:05:30.593
&gt;&gt; Jafar Husain: I'm gonna run it.

87
00:05:30.593 --> 00:05:33.433
Hit debugger.

88
00:05:33.433 --> 00:05:36.393
There's a bunch of stuff in here added by.

89
00:05:36.393 --> 00:05:40.495
Anybody know how to get rid of this-
&gt;&gt; Off Camera 1: There's a little arrow to

90
00:05:40.495 --> 00:05:42.333
the left of the thing.

91
00:05:42.333 --> 00:05:43.504
Yeah, there go you.
&gt;&gt; Jafar Husain: And

92
00:05:43.504 --> 00:05:45.773
on the right-hand side,
anything I can do about it?

93
00:05:45.773 --> 00:05:47.052
&gt;&gt; Off Camera 2: Does that one work,

94
00:05:47.052 --> 00:05:51.187
the grey one?
&gt;&gt; Jafar Husain: Grey one, where?

95
00:05:51.187 --> 00:05:52.447
I got you.

96
00:05:52.447 --> 00:05:55.147
No, it does not.

97
00:05:55.147 --> 00:05:57.339
That's not bad.

98
00:05:57.339 --> 00:05:58.107
I can break it out.

99
00:05:58.107 --> 00:05:58.880
I can break it out.

100
00:05:58.880 --> 00:05:59.380
There we go.

101
00:06:00.680 --> 00:06:05.854
So let's step through,
I'm gonna step over.

102
00:06:05.854 --> 00:06:08.774
And now I'm gonna step in and
see where we end up with.

103
00:06:08.774 --> 00:06:10.654
Now we're in that wrapper function.

104
00:06:10.654 --> 00:06:11.794
You remember that wrapper function?

105
00:06:11.794 --> 00:06:14.356
It's whole job is to sanitize any input.

106
00:06:14.356 --> 00:06:16.816
If we pass in functions,
we'll turn it into observers.

107
00:06:16.816 --> 00:06:19.580
If we pass in an observer,
we'll just thread it on through.

108
00:06:19.580 --> 00:06:20.150
So what did I do?

109
00:06:20.150 --> 00:06:22.520
Well, I passed in a function.

110
00:06:22.520 --> 00:06:25.670
So we're gonna wrap it
inside of an observer.

111
00:06:25.670 --> 00:06:29.210
And now we're gonna delegate to
the actual definition of forEach

112
00:06:29.210 --> 00:06:31.570
that we passed into the constructor.

113
00:06:31.570 --> 00:06:34.160
And here we are inside of the observable.

114
00:06:34.160 --> 00:06:36.570
So here we are inside of
our forEach function.

115
00:06:36.570 --> 00:06:41.560
And we're gonna call, map's job, right,
map is gonna call forEach on the source.

116
00:06:41.560 --> 00:06:43.783
This is when she calls for
each on me, right?

117
00:06:43.783 --> 00:06:46.583
So we're gonna step into that.

118
00:06:46.583 --> 00:06:49.660
And once again we find ourselves
in that outer wrapper function.

119
00:06:49.660 --> 00:06:53.220
It's job is just to make sure that
all the output's sanitized, etc, etc.

120
00:06:53.220 --> 00:06:54.950
So let's step into that.

121
00:06:56.050 --> 00:06:58.830
And now we're in the filtered observable,
right?

122
00:06:58.830 --> 00:07:01.400
Cuz we mapped the result
of a filtered observable.

123
00:07:02.400 --> 00:07:07.480
And so if we step into that back in the
public function, also I'll skip past that.

124
00:07:07.480 --> 00:07:11.700
And finally we find ourselves inside
of the from event observable,

125
00:07:11.700 --> 00:07:15.390
the observable that
represents the event itself.

126
00:07:15.390 --> 00:07:18.647
So now we create a handler,
we step over and we add.

127
00:07:18.647 --> 00:07:21.506
Now, notice I've been
saying this all along, but

128
00:07:21.506 --> 00:07:25.400
now we can see why we only add an event
listener when we call forEach.

129
00:07:25.400 --> 00:07:27.570
So if we hadn't called forEach,
this code never would have run.

130
00:07:27.570 --> 00:07:29.406
We never would have hooked
up this event handler.

131
00:07:29.406 --> 00:07:35.500
So I'm gonna step over it, and
now we're gonna return this object,

132
00:07:35.500 --> 00:07:38.000
right, the subscription object,
that we call dispose on.

133
00:07:38.000 --> 00:07:39.760
Now we're never gonna call
dispose in our code so

134
00:07:39.760 --> 00:07:41.821
this code is never actually gonna run,
right.

135
00:07:45.350 --> 00:07:50.110
So, I'm going to run this code and
now I'm gonna put a breakpoint

136
00:07:52.270 --> 00:07:55.990
inside of the event handler.

137
00:07:55.990 --> 00:07:59.020
So now we've seen what happens
when we're calling forEach,

138
00:07:59.020 --> 00:08:01.770
when the message is going this way.

139
00:08:01.770 --> 00:08:03.960
Now we're gonna see what happens
when the message turns around.

140
00:08:03.960 --> 00:08:06.620
So he calls forEach on her,
she calls forEach on me.

141
00:08:06.620 --> 00:08:09.510
And I call onNext on her,
and she calls onNext on him.

142
00:08:09.510 --> 00:08:11.540
Now the data's traveling
the other direction.

143
00:08:11.540 --> 00:08:20.449
So as soon as I click this button,
&gt;&gt; Jafar Husain: Now

144
00:08:20.449 --> 00:08:26.112
we're back in.
&gt;&gt; Jafar Husain: So

145
00:08:26.112 --> 00:08:28.560
I step into the onNext function.

146
00:08:28.560 --> 00:08:30.630
So here we are,
I've stepped into the onNext function.

147
00:08:30.630 --> 00:08:32.428
Sorry I did that before that was visible,
but

148
00:08:32.428 --> 00:08:38.468
we went all the way from,
&gt;&gt; Jafar Husain: Where is it, fromEvent?

149
00:08:38.468 --> 00:08:42.296
So we started here at 56 and
I stepped into this code and

150
00:08:42.296 --> 00:08:46.670
we ended up inside of
the filtered onNext function.

151
00:08:46.670 --> 00:08:51.940
Right, so I've onNexted her and
now she is gonna check to see if it

152
00:08:51.940 --> 00:08:55.300
passes the test, which it may or
may not, actually it might not.

153
00:08:55.300 --> 00:08:56.700
It does, great.

154
00:08:56.700 --> 00:09:00.619
And so now she's gonna call onNext on him.

155
00:09:00.619 --> 00:09:04.035
And since there's actually three steps
in there, we got one more person

156
00:09:04.035 --> 00:09:07.120
involved here, right,
now we're in the map function, right?

157
00:09:07.120 --> 00:09:10.810
We first filtered and then we mapped,
and now she calls onNext on him.

158
00:09:10.810 --> 00:09:14.129
He's the mapped observable and
this fellow, sorry, what's your name?

159
00:09:14.129 --> 00:09:15.089
&gt;&gt; Off Camera 4: Kedian.

160
00:09:15.089 --> 00:09:17.259
&gt;&gt; Jafar Husain: KTO?

161
00:09:17.259 --> 00:09:18.229
&gt;&gt; Off Camera 4: Kedian.

162
00:09:18.229 --> 00:09:19.088
&gt;&gt; Jafar Husain: Kedian?

163
00:09:19.088 --> 00:09:19.748
&gt;&gt; Off Camera 4: Yes.

164
00:09:19.748 --> 00:09:21.310
&gt;&gt; Jafar Husain: Okay, hopefully I'm close

165
00:09:21.310 --> 00:09:22.748
on that one, I'm sorry.

166
00:09:22.748 --> 00:09:27.324
He's now called forEach, so
he's the filtered observable, right?

167
00:09:27.324 --> 00:09:28.250
And when we call.

168
00:09:29.480 --> 00:09:30.341
Sorry you're the mapped

169
00:09:30.341 --> 00:09:32.638
observable cuz we're calling
the projection function, right?

170
00:09:32.638 --> 00:09:34.757
We're gonna step into the projection
function and look where we are.

171
00:09:34.757 --> 00:09:36.277
Now we're back in our code, right?

172
00:09:36.277 --> 00:09:39.301
Now we're the plan where we're taking that
item, that I've onNexted through, and

173
00:09:39.301 --> 00:09:41.030
it's made it through the filter.

174
00:09:41.030 --> 00:09:41.990
And now we're translating it.

175
00:09:41.990 --> 00:09:42.922
We're gonna make it into a string.

176
00:09:42.922 --> 00:09:44.576
We're gonna stick px on the end of it.

177
00:09:44.576 --> 00:09:46.617
Gonna step in through that.

178
00:09:46.617 --> 00:09:48.080
And we're gonna onNext it.

179
00:09:48.080 --> 00:09:50.010
And finally we forward it to the very end.

180
00:09:50.010 --> 00:09:52.340
And we end up in our forEach function,

181
00:09:52.340 --> 00:09:54.690
which has got a bunch of junk
in it because of JS Bin.

182
00:09:54.690 --> 00:09:58.070
But this is basically the forEach
function that we wrote.

183
00:09:58.070 --> 00:10:01.320
So JS Bin does this so
that it can intercept the console log and

184
00:10:01.320 --> 00:10:03.200
put into that pane we saw earlier.

185
00:10:03.200 --> 00:10:06.530
But if you look at our actual code here,
it's just console log.

186
00:10:06.530 --> 00:10:10.300
And so we made it all the way out
to where we called forEach and

187
00:10:10.300 --> 00:10:11.660
we printed out the results.

188
00:10:11.660 --> 00:10:12.990
And so if I do this,

189
00:10:12.990 --> 00:10:20.030
we're gonna see,
&gt;&gt; Jafar Husain: Some

190
00:10:20.030 --> 00:10:24.841
junk that's JS Bin related,
but that's actually our

191
00:10:24.841 --> 00:10:29.908
answer right there.
&gt;&gt; Jafar Husain: Okay,

192
00:10:29.908 --> 00:10:33.930
so the code drilled all the way up, and
then we drilled all the way back down.

193
00:10:35.070 --> 00:10:37.750
So, hopefully now we have actually
a pretty good idea what's going on under

194
00:10:37.750 --> 00:10:39.500
the hood when we use an observable.

195
00:10:39.500 --> 00:10:40.880
There's not much to it.

196
00:10:40.880 --> 00:10:45.113
You're just forwarding along data,
forEach goes up, data goes down.

