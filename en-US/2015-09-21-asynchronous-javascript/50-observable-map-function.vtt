WEBVTT

1
00:00:00.000 --> 00:00:03.896
[MUSIC]

2
00:00:03.896 --> 00:00:05.530
&gt;&gt; Jafar: So we got from event.

3
00:00:05.530 --> 00:00:07.170
Now let's see write map.

4
00:00:07.170 --> 00:00:09.990
Remember when you wrote map over array.

5
00:00:09.990 --> 00:00:12.650
I bet you it's not so much harder
to write map over an observable.

6
00:00:12.650 --> 00:00:15.310
So what's going to look like to
write map over an observable.

7
00:00:15.310 --> 00:00:19.210
Well we've added for each of the
prototype, let's add map to the prototype.

8
00:00:19.210 --> 00:00:20.237
Now what does map take?

9
00:00:20.237 --> 00:00:25.280
Explain to me how map works again,
remind me.

10
00:00:25.280 --> 00:00:26.280
What it's argument?

11
00:00:26.280 --> 00:00:29.440
What's the only argument
to the map function?

12
00:00:29.440 --> 00:00:34.810
Now map is on the on the array object, in
this case map is on the observable object.

13
00:00:34.810 --> 00:00:37.102
What does map accept as it's one and
only one argument?

14
00:00:37.102 --> 00:00:39.260
A function.

15
00:00:39.260 --> 00:00:43.850
A function to apply to every item
that comes through the stream.

16
00:00:43.850 --> 00:00:46.630
Remember we said that observables
are like a hot potato.

17
00:00:46.630 --> 00:00:49.762
Every single item that comes through,
we're gonna translate it and

18
00:00:49.762 --> 00:00:50.740
hand it off, right?

19
00:00:50.740 --> 00:00:53.170
We're just gonna keep calling
call backs all the way through.

20
00:00:53.170 --> 00:00:54.030
So let's write map.

21
00:00:54.030 --> 00:00:57.180
So map accepts what's called
a projection function.

22
00:00:57.180 --> 00:00:59.690
Which is, long story short, is just a
function that you apply to every item that

23
00:00:59.690 --> 00:01:01.810
comes through, and you take the result,
and then forward that along.

24
00:01:03.730 --> 00:01:04.680
So what does map return?

25
00:01:06.500 --> 00:01:07.710
An array when it's on an array,

26
00:01:07.710 --> 00:01:11.110
but when it's on an observable it returns?
&gt;&gt; Speaker 2: An observable.

27
00:01:11.110 --> 00:01:11.750
&gt;&gt; Jafar: An observable.

28
00:01:11.750 --> 00:01:14.426
So right there, we need,
we know that we need to return

29
00:01:14.426 --> 00:01:19.941
an observable.
&gt;&gt; Jafar: And

30
00:01:19.941 --> 00:01:24.210
when the for each function of that
observable is called, what do we do?

31
00:01:27.570 --> 00:01:28.400
Well one thing I'm gonna do, and

32
00:01:28.400 --> 00:01:30.420
you guys have probably done
this in JavaScript before,

33
00:01:30.420 --> 00:01:35.120
I'm gonna capture the current this object.

34
00:01:35.120 --> 00:01:38.200
Who's written code like
this in JavaScript before?

35
00:01:39.340 --> 00:01:40.400
A few people.

36
00:01:40.400 --> 00:01:44.150
So one of the very complicated things
about JavaScript that is not intuitive

37
00:01:44.150 --> 00:01:46.940
Is that functions do not execute

38
00:01:46.940 --> 00:01:51.920
necessarily against the object in which
they are created but they execute

39
00:01:51.920 --> 00:01:56.687
on the object on which they are on if
you call that object when they're on.

40
00:01:56.687 --> 00:01:58.860
so a dot function,
when you call that function.

41
00:01:58.860 --> 00:02:03.570
This will be the a object, not the object
where the function itself was created.

42
00:02:03.570 --> 00:02:09.400
So when we call this inside of here,
this will be this observable.

43
00:02:09.400 --> 00:02:13.290
It will not be the observable that we use,

44
00:02:13.290 --> 00:02:16.240
that we called map on to
create this observable.

45
00:02:16.240 --> 00:02:17.920
So we need a way, remember what happens.

46
00:02:17.920 --> 00:02:20.565
We're gonna step through through
this now again with human beings.

47
00:02:20.565 --> 00:02:25.015
I am the source observable and when
you call map on me, you create her and

48
00:02:25.015 --> 00:02:27.165
she is the mapped observable.

49
00:02:27.165 --> 00:02:30.945
And now when you call for
each on her right, call for each on her.

50
00:02:30.945 --> 00:02:32.595
&gt;&gt; Speaker 2: For each.

51
00:02:32.595 --> 00:02:33.635
&gt;&gt; Speaker 3: For each.

52
00:02:33.635 --> 00:02:34.445
&gt;&gt; Jafar: I say one,

53
00:02:34.445 --> 00:02:36.535
and let's say you add one
to each item I give you.

54
00:02:36.535 --> 00:02:37.655
On next one.
&gt;&gt; Speaker 3: On next

55
00:02:37.655 --> 00:02:39.690
two.
&gt;&gt; Jafar: Right.

56
00:02:39.690 --> 00:02:41.290
On next to five
&gt;&gt; Speaker 3: On next six.

57
00:02:42.880 --> 00:02:43.390
&gt;&gt; Jafar: On completed.

58
00:02:43.390 --> 00:02:46.860
&gt;&gt; Speaker 3: On completed.

59
00:02:46.860 --> 00:02:47.790
&gt;&gt; Jafar: Yeah right.

60
00:02:47.790 --> 00:02:49.700
So it just keeps,
we just keep handing it off.

61
00:02:49.700 --> 00:02:51.750
We just keep sending messages along.

62
00:02:51.750 --> 00:02:53.360
We're going to demonstrate this right now.

63
00:02:53.360 --> 00:02:58.352
So the point is when you call out for each
on her she has to call for each on me and

64
00:02:58.352 --> 00:03:02.564
that's why I have to capture
the this object here because this is

65
00:03:02.564 --> 00:03:07.210
the mapped observable.
&gt;&gt; Jafar: Right?

66
00:03:07.210 --> 00:03:12.620
And when you call for each on it, her,
she has to call for each on me, right?

67
00:03:12.620 --> 00:03:14.270
So how else is she gonna hold on?

68
00:03:14.270 --> 00:03:18.590
Remember the observable is the this
object inside of this function.

69
00:03:18.590 --> 00:03:20.840
Is the thing that you're
calling map on right?

70
00:03:20.840 --> 00:03:21.880
So we need to capture it.

71
00:03:21.880 --> 00:03:24.160
So I'm going to code var self equals this.

72
00:03:24.160 --> 00:03:29.917
And then as soon as you call for
each on her she's gonna call for

73
00:03:29.917 --> 00:03:37.650
each on me.
&gt;&gt; Jafar: Now,

74
00:03:37.650 --> 00:03:39.890
for each takes three callbacks or
an observer,

75
00:03:39.890 --> 00:03:42.850
in this case we're gonna use
the three callbacks, right.

76
00:03:42.850 --> 00:03:46.930
The first callback is the callback
we get when we get called with data.

77
00:03:46.930 --> 00:03:50.030
So what is my responsibility
at this point, right?

78
00:03:50.030 --> 00:03:51.560
She's calling for each on me, right.

79
00:03:51.560 --> 00:03:54.060
And so
this is the part where I say on next one.

80
00:03:54.060 --> 00:03:55.320
What's your responsibility.

81
00:03:55.320 --> 00:03:58.119
Now when I say on next one,
your responsibility is to do what?

82
00:03:58.119 --> 00:03:59.046
&gt;&gt; Speaker 3: On next to.

83
00:03:59.046 --> 00:04:01.960
&gt;&gt; Jafar: Right, on next to him the result

84
00:04:01.960 --> 00:04:06.400
of applying the function to
what I just gave you, right?

85
00:04:06.400 --> 00:04:07.610
So what does that look like?

86
00:04:07.610 --> 00:04:11.460
Well here, this is him,
he's listening right?

87
00:04:11.460 --> 00:04:16.679
He's listening and so
we have to call observer on next x,

88
00:04:16.679 --> 00:04:22.610
but first you're going to apply
your projection function.

89
00:04:22.610 --> 00:04:27.983
You're gonna call the projection function
on x before you give him the value.

90
00:04:33.519 --> 00:04:34.450
&gt;&gt; Jafar: That's almost done.

91
00:04:34.450 --> 00:04:35.480
We're almost done now.

92
00:04:35.480 --> 00:04:37.220
That's all there is to it, right.

93
00:04:37.220 --> 00:04:40.140
When you call for
each on her she calls for each on me,

94
00:04:40.140 --> 00:04:42.380
which in this case is self, right?

95
00:04:42.380 --> 00:04:44.300
I on next her information.

96
00:04:44.300 --> 00:04:47.154
I'm gonna actually write this out so
it's clearer.

97
00:04:53.679 --> 00:04:56.180
&gt;&gt; Jafar: I'm calling her on next.

98
00:04:56.180 --> 00:04:58.800
And she's calling your on next.

99
00:04:58.800 --> 00:05:03.940
But first she's translating it, she's
running it through the function before

100
00:05:03.940 --> 00:05:06.272
she pushes it to you.
&gt;&gt; Speaker 4: So

101
00:05:06.272 --> 00:05:08.579
does she call projection function?
&gt;&gt; Jafar: Yes.

102
00:05:09.820 --> 00:05:14.860
She is the mapped observable and
you are the person who's calling her for

103
00:05:14.860 --> 00:05:19.020
each method and
you're passing in your observer, right?

104
00:05:19.020 --> 00:05:24.840
And then she is in order to give me, in
order to give you my data translated, she

105
00:05:24.840 --> 00:05:27.580
has to for each over me because that's how
you get data out of an observable right.

106
00:05:27.580 --> 00:05:30.123
You have to for each over it so
she for each's over me.

107
00:05:30.123 --> 00:05:32.470
I'm the self here, I'm the this object.

108
00:05:32.470 --> 00:05:35.720
On the observable that you called map on,
right?

109
00:05:35.720 --> 00:05:37.000
That's to the left of this map.

110
00:05:37.000 --> 00:05:38.350
It would be observable.map,

111
00:05:38.350 --> 00:05:41.100
and then you'd create a mapped
version of that observable.

112
00:05:41.100 --> 00:05:43.890
That's what we're turning at the top
level, the mapped observable.

113
00:05:43.890 --> 00:05:47.070
And then when somebody for
eached over the map observable,

114
00:05:47.070 --> 00:05:49.510
the mapped observable has to for
each over the source.

115
00:05:49.510 --> 00:05:52.120
And I on next data, and
she on nexted to you.

116
00:05:52.120 --> 00:05:53.890
She's just forwarding it
along like a hot potato.

117
00:05:56.686 --> 00:06:00.760
So on next, that's all well and good,
but what happens if I say on air?

118
00:06:00.760 --> 00:06:05.000
What are you going to say to him?
&gt;&gt; Speaker 3: Well, if there's no retry,

119
00:06:05.000 --> 00:06:06.810
then I say-
&gt;&gt; Jafar: And

120
00:06:06.810 --> 00:06:08.930
apt observables don't do any retrying,
right?

121
00:06:08.930 --> 00:06:10.768
So, you forward on the air call.

122
00:06:18.828 --> 00:06:20.055
&gt;&gt; Jafar: And what's the last possible

123
00:06:20.055 --> 00:06:21.290
message that I can say to you?

124
00:06:22.300 --> 00:06:24.060
&gt;&gt; Speaker 3: Completed.
&gt;&gt; Jafar: Completed.

125
00:06:24.060 --> 00:06:25.880
At which point what's
the logical thing to say to him?

126
00:06:28.430 --> 00:06:30.700
Yeah, because I'm not going
to send you any more data.

127
00:06:30.700 --> 00:06:32.368
So obviously you're not going
to send him any more data,

128
00:06:32.368 --> 00:06:39.300
right?
&gt;&gt; Speaker 4: So

129
00:06:39.300 --> 00:06:42.299
can I put the observer on subscribe

130
00:06:42.299 --> 00:06:44.921
or terminate or?
&gt;&gt; Jafar: As soon as she sends

131
00:06:44.921 --> 00:06:49.529
an uncompleted message to you, yes,
it's the observable's responsibility to

132
00:06:49.529 --> 00:06:54.512
technically unsubscribe and make sure
that it It cleans up after itself, right?

133
00:06:54.512 --> 00:06:57.010
Because I, well,
the interesting thing is, here,

134
00:06:57.010 --> 00:06:59.000
map doesn't really need to
clean up after anything.

135
00:06:59.000 --> 00:07:01.440
It's actually the source that
needs to clean up, right?

136
00:07:01.440 --> 00:07:04.040
All she's doing is forwarding on messages,
right?

137
00:07:04.040 --> 00:07:08.000
If she makes sure that I'm never
gonna send a message anymore, then,

138
00:07:08.000 --> 00:07:10.430
by extension,
she's never send a message anymore.

139
00:07:10.430 --> 00:07:12.710
And notice what I'm doing with for
each, here.

140
00:07:13.740 --> 00:07:14.770
What's coming out of for each?

141
00:07:14.770 --> 00:07:16.310
What's the object that's
returned when you call for

142
00:07:16.310 --> 00:07:19.600
each on an observable?
&gt;&gt; Speaker 5: Observable?

143
00:07:19.600 --> 00:07:21.540
&gt;&gt; Jafar: Nope, not an observable.

144
00:07:21.540 --> 00:07:22.382
When you call for

145
00:07:22.382 --> 00:07:25.065
each on an observable what pops out?
&gt;&gt; Speaker 5: A range

146
00:07:25.065 --> 00:07:27.290
participant.
&gt;&gt; Jafar: Nope,

147
00:07:27.290 --> 00:07:29.540
let's go back to this example.
&gt;&gt; Speaker 5: A subscription,

148
00:07:29.540 --> 00:07:31.890
no?
&gt;&gt; Jafar: A subscription, right.

149
00:07:31.890 --> 00:07:35.600
When you call for each an observable, a
subscription object pops up because that's

150
00:07:35.600 --> 00:07:37.940
your way of saying no more data please.

151
00:07:37.940 --> 00:07:43.230
And so, what we're doing inside of
this map, this mapped observable,

152
00:07:43.230 --> 00:07:44.230
it's kind of elegant,

153
00:07:44.230 --> 00:07:48.500
because she doesn't need to create
a subscription object to hand to you.

154
00:07:48.500 --> 00:07:52.513
She's actually just gonna take
the subscription object I hand to her and

155
00:07:52.513 --> 00:07:53.380
hand it to you.

156
00:07:54.410 --> 00:07:56.070
Right?
Because if you call dispose and

157
00:07:56.070 --> 00:07:58.420
you cause me to never send
any more data to her,

158
00:07:58.420 --> 00:08:02.020
well by extension she's never gonna
get any messages to send to you.

159
00:08:03.550 --> 00:08:05.590
So she's just saying,
" thanks very much for that subscription.

160
00:08:05.590 --> 00:08:08.060
Here you go.
Like she's handing it right to you.

161
00:08:08.060 --> 00:08:12.790
And that's all there is to map.

162
00:08:12.790 --> 00:08:15.550
All we need to do is take every
on next I give to you, and

163
00:08:15.550 --> 00:08:18.670
forward along to him, after running
it through a projection function.

164
00:08:18.670 --> 00:08:20.150
And on error and
on completed you just forward it

165
00:08:20.150 --> 00:08:25.610
along.
&gt;&gt; Jafar: Should we try filter?

166
00:08:25.610 --> 00:08:26.910
&gt;&gt; Speaker 4: Where are we handing that

167
00:08:26.910 --> 00:08:31.730
subscription off?
&gt;&gt; Jafar: Right

168
00:08:31.730 --> 00:08:34.800
here because we know,
I'm the source, right?

169
00:08:34.800 --> 00:08:37.440
I'm gonna say on next one,
on next two, on next three.

170
00:08:37.440 --> 00:08:39.700
As soon as you see for each,
the floodgates are open and

171
00:08:39.700 --> 00:08:42.020
I'm just going to say on next,
on next, on next.

172
00:08:42.020 --> 00:08:45.240
But as soon as you call for
each on me I'm gonna hand you what?

173
00:08:45.240 --> 00:08:46.800
Every observable hands you
what when you call for

174
00:08:46.800 --> 00:08:49.210
each on it.
&gt;&gt; Speaker 4: The subscription.

175
00:08:49.210 --> 00:08:50.610
&gt;&gt; Jafar: The subscription object.

176
00:08:50.610 --> 00:08:53.560
Because you need some way of
saying I don't want any more data.

177
00:08:53.560 --> 00:08:55.680
And so as soon as she calls for
each on me,

178
00:08:55.680 --> 00:08:58.510
I'm going to hand her
my subscription object.

179
00:08:58.510 --> 00:09:01.702
That's what comes back from from for
each, right?

180
00:09:01.702 --> 00:09:05.700
That's why we're just returning for each,
so I had her my subscription object.

181
00:09:05.700 --> 00:09:09.100
And she just turns around and
hands it right to him

182
00:09:09.100 --> 00:09:13.300
Because if he disposes of my subscription
object, what does that mean?

183
00:09:13.300 --> 00:09:15.050
I'm never gonna send her another message.

184
00:09:15.050 --> 00:09:16.780
And what does that mean?

185
00:09:16.780 --> 00:09:19.867
She's never gonna send him another
message because all she does is wait for

186
00:09:19.867 --> 00:09:21.937
me to send messages and
then forwards them along.

