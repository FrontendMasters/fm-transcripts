WEBVTT

1
00:00:00.000 --> 00:00:03.722
[MUSIC]

2
00:00:03.722 --> 00:00:06.540
&gt;&gt; Jafar Husain: So the thing we
actually wanted to try out I believe.

3
00:00:06.540 --> 00:00:10.090
Fortunately JS Bin keeps losing
the toolbar so I can't add it.

4
00:00:10.090 --> 00:00:13.370
But I think if we paste it into
another screen it'll come right up.

5
00:00:13.370 --> 00:00:16.660
So let's keep our HTML toolbar open and
let's try and

6
00:00:16.660 --> 00:00:18.680
do that server example
we talked about earlier.

7
00:00:18.680 --> 00:00:20.241
So we're listening for changes to a form.

8
00:00:20.241 --> 00:00:24.381
We're gonna have a form and that's gonna
make changes to an object and then we're

9
00:00:24.381 --> 00:00:28.118
gonna listen to changes to the object and
then make a change to the server.

10
00:00:28.118 --> 00:00:29.383
Does that makes sense?

11
00:00:29.383 --> 00:00:34.312
So I'm gonna add a,
&gt;&gt; Jafar Husain: Name and

12
00:00:34.312 --> 00:00:41.333
age tag.
&gt;&gt; Jafar Husain: And

13
00:00:41.333 --> 00:00:43.123
I'm gonna give them IDs.

14
00:00:50.712 --> 00:00:54.740
&gt;&gt; Jafar Husain: Now clear the console.

15
00:00:56.720 --> 00:00:58.476
Let's grab a reference to our name and ID.

16
00:01:10.518 --> 00:01:13.761
&gt;&gt; Jafar Husain: Right, now we need to
listen for changes to name and age, and

17
00:01:13.761 --> 00:01:17.971
we wanna update it on a JavaScript object,
a model, if you will, of a person.

18
00:01:17.971 --> 00:01:22.955
And the advantage of doing this is that if
we make all these changes to this model

19
00:01:22.955 --> 00:01:24.767
person, we might have six or

20
00:01:24.767 --> 00:01:29.370
seven different windows,
in our view all bound to the same model.

21
00:01:29.370 --> 00:01:33.470
So in addition to a view,
showing information about that person,

22
00:01:33.470 --> 00:01:37.440
you might have another pane on your view,
showing the location of that person.

23
00:01:37.440 --> 00:01:40.990
So in other words, the same model in
an application can be viewed in many,

24
00:01:40.990 --> 00:01:42.260
many different ways.

25
00:01:42.260 --> 00:01:47.180
And so by using one object to sync up and
to store the state of that object,

26
00:01:47.180 --> 00:01:50.630
we can have many, many different views
listening for changes to that object.

27
00:01:50.630 --> 00:01:52.650
And you only have to change
the object in one place.

28
00:01:52.650 --> 00:01:56.200
And all of the views reflect the
difference in that object because they're

29
00:01:56.200 --> 00:01:58.140
all listening using object.observe.

30
00:01:58.140 --> 00:01:58.880
Does that make sense?

31
00:02:00.380 --> 00:02:03.928
So I'm going to listen for changes to age.

32
00:02:14.332 --> 00:02:14.979
&gt;&gt; Jafar Husain: Now remember,

33
00:02:14.979 --> 00:02:17.375
somebody was asking about change,
the onChange event.

34
00:02:17.375 --> 00:02:19.280
This is the ideal case for
the onChange event.

35
00:02:19.280 --> 00:02:21.770
We don't wanna make this
change after every key press.

36
00:02:21.770 --> 00:02:25.122
We only wanna make the change after
somebody tabs away from the text box.

37
00:02:25.122 --> 00:02:26.921
Then, and only then,
do we wanna update the person object.

38
00:02:26.921 --> 00:02:30.267
So I'm gonna create a person object
which I'm just gonna keep in memory

39
00:02:30.267 --> 00:02:39.251
here.
&gt;&gt; Jafar Husain: And

40
00:02:39.251 --> 00:02:44.220
I'm going to take,
&gt;&gt; Jafar Husain: Just gonna

41
00:02:44.220 --> 00:02:49.083
listen for,
&gt;&gt; Jafar Husain: What I'll

42
00:02:49.083 --> 00:02:53.856
do is I will listen for changes to
the person object and update the view.

43
00:02:53.856 --> 00:02:56.326
So if we ever change
the person object directly,

44
00:02:56.326 --> 00:02:59.350
we're gonna update the text box and
the age of that person.

45
00:03:00.380 --> 00:03:04.442
So I'm gonna use object
observations on the person.

46
00:03:18.320 --> 00:03:20.251
&gt;&gt; Jafar Husain: And we are gonna change

47
00:03:20.251 --> 00:03:25.128
the text box of name if changes
includes the property that

48
00:03:25.128 --> 00:03:27.800
the name has changed, right?

49
00:03:27.800 --> 00:03:28.575
That's one thing we could do.

50
00:03:28.575 --> 00:03:33.780
Well actually, before we do that,
let's just do the simplest way,

51
00:03:33.780 --> 00:03:38.870
which is always update,
always update with the current value.

52
00:03:38.870 --> 00:03:43.400
This is less efficient, because maybe I've
just changed the name on the model object.

53
00:03:43.400 --> 00:03:46.160
And every single time any change occurs in
the model object we're gonna update all

54
00:03:46.160 --> 00:03:46.910
the fields on the DOM.

55
00:03:46.910 --> 00:03:48.052
This is the less efficient approach but

56
00:03:48.052 --> 00:03:53.172
it works.
&gt;&gt; Jafar Husain: Now look,

57
00:03:53.172 --> 00:03:59.079
it's already filling in stuff here.
&gt;&gt; Jafar Husain: Mm-hm, name.value.

58
00:03:59.079 --> 00:04:01.340
I'm not sure why the name
isn't making it in there.

59
00:04:03.690 --> 00:04:07.020
Because it's waiting for
the first change to do it, right?

60
00:04:07.020 --> 00:04:08.972
So if I go person.,

61
00:04:08.972 --> 00:04:12.140
that should actually get the name
if I initialized it with the name.

62
00:04:15.330 --> 00:04:17.990
So I'm not sure why our name
property is not getting filled in.

63
00:04:20.740 --> 00:04:21.998
Anybody have any idea
out there on the web?

64
00:04:21.998 --> 00:04:26.490
We've defined name and we've pulled it
in with getElementById just like age.

65
00:04:30.600 --> 00:04:33.694
And every single change and
object observation is being picked up and

66
00:04:33.694 --> 00:04:37.445
written to the DOM, so I'm not sure why
we're not getting the name property here.

67
00:04:37.445 --> 00:04:38.842
&gt;&gt; Speaker 2: Is name a reserved word?

68
00:04:38.842 --> 00:04:40.205
&gt;&gt; Speaker 3: [CROSSTALK] string value.

69
00:04:40.205 --> 00:04:40.741
&gt;&gt; Jafar Husain: Sorry?

70
00:04:40.741 --> 00:04:42.343
&gt;&gt; Speaker 3: Someone said age is a string

71
00:04:42.343 --> 00:04:46.625
value, I don't know if that matters.
&gt;&gt; Speaker 2: Is name a reserved word?

72
00:04:46.625 --> 00:04:48.225
&gt;&gt; Jafar Husain: It shouldn't be.

73
00:04:48.225 --> 00:04:49.715
&gt;&gt; Speaker 2: Or HTML?

74
00:04:49.715 --> 00:04:50.851
&gt;&gt; Jafar Husain: In the HTML, yes,

75
00:04:50.851 --> 00:04:52.560
well not inside of a string.

76
00:04:52.560 --> 00:04:53.710
I wouldn't expect so, but you know what?

77
00:04:53.710 --> 00:04:56.571
I think you're right, cuz that's
the only possibility I can think

78
00:04:56.571 --> 00:04:59.020
of.
&gt;&gt; Speaker 4: When you're

79
00:04:59.020 --> 00:05:01.160
defining that person up there,
you have Jim, and then age Tim?

80
00:05:02.660 --> 00:05:04.745
Or was that just cuz-
&gt;&gt; Speaker 5: He's Tim years old.

81
00:05:04.745 --> 00:05:05.686
&gt;&gt; Jafar Husain: [LAUGH] Yeah,

82
00:05:05.686 --> 00:05:12.321
that's definitely a typo.
&gt;&gt; Jafar Husain: Okay,

83
00:05:12.321 --> 00:05:16.344
I'll change it everywhere to be firstName.

84
00:05:29.530 --> 00:05:30.364
&gt;&gt; Jafar Husain: Did that work?

85
00:05:30.364 --> 00:05:31.644
&gt;&gt; Speaker 4: Now it's working.

86
00:05:31.644 --> 00:05:39.020
Try re-running it.
&gt;&gt; Jafar Husain: Hey, okay, cool.

87
00:05:39.020 --> 00:05:42.840
So now we can listen for changes to
a model and update our view, right?

88
00:05:42.840 --> 00:05:46.160
Another thing we can do, but now notice we
also haven't gone the other way, right?

89
00:05:46.160 --> 00:05:50.380
We're not going both ways,
which would be kind of nice.

90
00:05:50.380 --> 00:05:54.297
If you change a text box, we'd ideally
like to update the model, right?

91
00:05:54.297 --> 00:05:56.240
But here, we might be able to have many,

92
00:05:56.240 --> 00:05:58.940
many different views of
the same information, right?

93
00:05:58.940 --> 00:06:02.987
And then only one place in the application
where we change that model and

94
00:06:02.987 --> 00:06:04.820
then we update all of the views.

95
00:06:04.820 --> 00:06:06.100
Does that make sense?

96
00:06:06.100 --> 00:06:09.580
So we can have this person object in
memory and many, many different views of

97
00:06:09.580 --> 00:06:13.020
it and we change the person object in only
one location then update it everywhere.

98
00:06:13.020 --> 00:06:15.280
But another thing we might wanna do,
so we haven't gone the other way yet,

99
00:06:15.280 --> 00:06:19.100
we haven't set it up so that if you change
a text box you then change the object.

100
00:06:19.100 --> 00:06:21.790
The nice thing is we're never getting
into an infinite loop, right,

101
00:06:21.790 --> 00:06:24.480
where I change the text box and
then I change a property

102
00:06:24.480 --> 00:06:27.790
to the same thing it already is and
then it calls an object observe.

103
00:06:27.790 --> 00:06:30.079
Because the reason why we're not
getting that infinite loop is that for

104
00:06:30.079 --> 00:06:32.652
one thing object observe won't fire,
if the property has the exact same name.

105
00:06:32.652 --> 00:06:35.500
So then we don't have to worry about that.

106
00:06:35.500 --> 00:06:37.833
So let's see if we can go
the other way around now and

107
00:06:37.833 --> 00:06:39.742
practice using MVC framework to do this.

108
00:06:39.742 --> 00:06:43.317
But this is exactly what an MVC framework
will do under the hood if it uses

109
00:06:43.317 --> 00:06:44.760
object.observe, right?

110
00:06:44.760 --> 00:06:47.540
So it'll listen for name.

111
00:06:47.540 --> 00:06:49.878
Now I'm going to convert,

112
00:06:56.413 --> 00:06:59.633
&gt;&gt; Jafar Husain: The firstName change and

113
00:06:59.633 --> 00:07:05.990
forEach and I don't even care what I get.

114
00:07:05.990 --> 00:07:10.351
I'm just gonna sync up

115
00:07:10.351 --> 00:07:15.861
the person.firstName with

116
00:07:15.861 --> 00:07:20.683
value.
&gt;&gt; Jafar Husain: And

117
00:07:20.683 --> 00:07:29.063
I'm gonna do the exact same thing with,
&gt;&gt; Jafar Husain: person.age and

118
00:07:29.063 --> 00:07:38.048
let's be good and do parseInt on that.
&gt;&gt; Jafar Husain: Okay so

119
00:07:38.048 --> 00:07:42.150
now, we should be syncing
up changes both ways.

120
00:07:42.150 --> 00:07:46.870
So I'm not sure quite how to figure
that out, but I think if we log

121
00:07:46.870 --> 00:07:50.898
when we get an object.observations then
we'll know if that's worked successfully.

122
00:07:50.898 --> 00:07:52.972
So we'll console.log changes, and

123
00:07:52.972 --> 00:07:57.332
now we're only gonna get a log when we've
actually changed the person object.

124
00:07:57.332 --> 00:08:01.434
So if I change this form we should
update the person object if everything's

125
00:08:01.434 --> 00:08:05.490
working correctly and we should get
an object.observations call back.

126
00:08:05.490 --> 00:08:09.040
We should get this changes
printed out to the console.

127
00:08:09.040 --> 00:08:09.556
So I'll run.

128
00:08:09.556 --> 00:08:13.920
We've already got one cuz I've
changed one in here right, explicitly.

129
00:08:15.030 --> 00:08:16.423
But now let's see if we change this to,

130
00:08:25.109 --> 00:08:27.490
&gt;&gt; Jafar Husain: I'm gonna hide our
HTML pane cuz we don't need it anymore.

131
00:08:28.990 --> 00:08:35.669
Strange to clear the console.
&gt;&gt; Jafar Husain: No,

132
00:08:35.669 --> 00:08:38.670
not yet.
&gt;&gt; Speaker 4: We need to tab away,

133
00:08:38.670 --> 00:08:40.820
right?
&gt;&gt; Jafar Husain: Good call.

134
00:08:40.820 --> 00:08:41.860
Yes, I do.

135
00:08:41.860 --> 00:08:46.920
But that was not
the source of the problem.

136
00:08:46.920 --> 00:08:52.120
So we should be listening to change on,
age.

137
00:08:52.120 --> 00:08:53.842
I forgot to put age instead
of firstName there, so

138
00:08:53.842 --> 00:09:00.281
let's see if that solves the problem.
&gt;&gt; Jafar Husain: Yep.

139
00:09:03.370 --> 00:09:04.355
&gt;&gt; Jafar Husain: Okay, so now every

140
00:09:04.355 --> 00:09:08.490
single time we change the form we're
changing our model object, right?

141
00:09:08.490 --> 00:09:12.260
And hopefully vice versa as well,
let's see.

142
00:09:12.260 --> 00:09:18.610
So I'm gonna use the set time out and
I'm gonna change our person name

143
00:09:18.610 --> 00:09:23.270
to John and
I'm gonna do it after five seconds.

144
00:09:23.270 --> 00:09:27.320
So we're gonna patiently await here, and

145
00:09:27.320 --> 00:09:31.912
hopefully if we do this we should
see the text box name change.

146
00:09:31.912 --> 00:09:34.670
We didn't see it change but
we did see a console log happen.

147
00:09:34.670 --> 00:09:35.276
So that's a little bit odd.

148
00:09:35.276 --> 00:09:39.420
Something definitely happened,
but we didn't update the form.

149
00:09:39.420 --> 00:09:45.360
So let's run it again.
So we got a console log.

150
00:09:45.360 --> 00:09:48.340
Then after five seconds,
we should see another console log.

151
00:09:48.340 --> 00:09:50.930
Great, but we're not updating the name.

152
00:09:50.930 --> 00:09:51.880
So why is that?

153
00:09:51.880 --> 00:09:55.202
Well, let's go back to our
observations where we're forEaching

154
00:09:55.202 --> 00:09:58.102
over observations.
&gt;&gt; Speaker 3: Does it have to be

155
00:09:58.102 --> 00:10:05.210
firstName, person.firstName?
&gt;&gt; Jafar Husain: Yes it does, thank you.

156
00:10:05.210 --> 00:10:06.480
Collaborative coding, I love it.

157
00:10:07.820 --> 00:10:14.035
So run it and we wait,
time elapses and bam.

158
00:10:14.035 --> 00:10:18.073
So now we've got code syncing both
ways from our view to our model, but

159
00:10:18.073 --> 00:10:20.410
also from our model back out to our view.

160
00:10:20.410 --> 00:10:23.312
And that's great because if any
of the views change the model,

161
00:10:23.312 --> 00:10:26.431
they only have to change it in one place,
this one model object, and

162
00:10:26.431 --> 00:10:29.290
then you might have n different
views of the same model.

163
00:10:29.290 --> 00:10:31.889
And all the changes are gonna get
propagated back to those views.

