WEBVTT

1
00:00:00.000 --> 00:00:03.985
[MUSIC]

2
00:00:03.985 --> 00:00:05.840
&gt;&gt; Jafar Husain: We've tackled events.

3
00:00:05.840 --> 00:00:08.300
Let's see if we can tackle HTTP requests.

4
00:00:08.300 --> 00:00:16.010
Let me see if it's shown up here,
&gt;&gt; Jafar Husain: So

5
00:00:16.010 --> 00:00:21.121
I believe in this particular example
we're showing off the jQuery API for

6
00:00:21.121 --> 00:00:22.863
getting a Jason object.

7
00:00:22.863 --> 00:00:26.369
What we're gonna do now is we're
actually gonna break out of this little,

8
00:00:26.369 --> 00:00:30.433
we're looking at this much code, and we're
actually gonna try and widen our scope and

9
00:00:30.433 --> 00:00:34.074
see what it's like to actually use Rx for
real in an app that you have, right?

10
00:00:34.074 --> 00:00:36.574
And so we're gonna try and
start from the the beginning and

11
00:00:36.574 --> 00:00:38.440
go to the end of a problem, okay?

12
00:00:38.440 --> 00:00:41.030
So I'm going to be using, for this
exercise I'm going to be using JS Bin.

13
00:00:41.030 --> 00:00:42.340
Who here is familiar with JS Bin?

14
00:00:43.350 --> 00:00:46.480
So it's a really cool online
coding tool that you can try out.

15
00:00:46.480 --> 00:00:51.250
So if you go to jsbin.com, what is really
nice about JS Bin is that you can easily

16
00:00:51.250 --> 00:00:53.570
import the Rx library and
play around with it.

17
00:00:54.800 --> 00:00:58.440
So first of all just go to
jsbin.com in your favorite browser.

18
00:01:02.400 --> 00:01:04.752
And I'm gonna go to Add Library.

19
00:01:04.752 --> 00:01:08.180
So what JS Bin does is it actually has
tabs, so it's really easy to print

20
00:01:08.180 --> 00:01:12.456
out of the web application because you
can have tabs displaying the console,

21
00:01:12.456 --> 00:01:16.060
the JavaScript window, CSS,
which I won't activate, and HTML.

22
00:01:16.060 --> 00:01:19.439
So for this example we're gonna try and
create a drop down list like,

23
00:01:19.439 --> 00:01:22.310
exactly sort of like Wikipedia, right?

24
00:01:22.310 --> 00:01:26.150
And we're going to start by including Rx.

25
00:01:26.150 --> 00:01:30.158
So if you see where I am right here, I go
to the Add Library tab on the top left of

26
00:01:30.158 --> 00:01:34.340
JS Bin, and if you scroll all the way
to the bottom you'll see rx.all.

27
00:01:34.340 --> 00:01:37.773
And that's a library that has
all of Rx's operators in it, so

28
00:01:37.773 --> 00:01:41.490
if you just select rx.all,
it will add it to the JavaScript page.

29
00:01:41.490 --> 00:01:43.730
The other thing we're gonna load in,
although we're not going to use it for

30
00:01:43.730 --> 00:01:45.290
very much I promise, is jQuery.

31
00:01:46.920 --> 00:01:49.520
We're only going to use jQuery for
it's JSONP ability and

32
00:01:49.520 --> 00:01:52.300
then we're gonna wrap that as an
observable to demonstrate how we can take

33
00:01:52.300 --> 00:01:55.710
existing APIs, async APIs,
and wrap them as observables.

34
00:01:55.710 --> 00:01:59.480
Which is a really key thing to starting to
use observable in your existing system.

35
00:01:59.480 --> 00:02:02.440
Being able to take those callback APIs and
wrap them as observables.

36
00:02:02.440 --> 00:02:03.520
So, I'm going to import jQuery,

37
00:02:03.520 --> 00:02:05.706
which we're going to use
to make network requests.

38
00:02:05.706 --> 00:02:07.480
But we're gonna wrap the jQuery API so

39
00:02:07.480 --> 00:02:10.550
that it bits an observable
instead of uses a callback.

40
00:02:10.550 --> 00:02:14.800
So one thing we're also gonna do is we
are gonna add a text box to the body.

41
00:02:16.130 --> 00:02:21.320
I'm gonna add it, I'm gonna give it
an ID so we can pull it out later.

42
00:02:21.320 --> 00:02:24.860
And now to demonstrate how JS Bin works,

43
00:02:24.860 --> 00:02:27.790
here in my JavaScript window,
one thing that we notice we can do is we

44
00:02:27.790 --> 00:02:31.840
can actually select from a drop down list
of many different possible languages.

45
00:02:31.840 --> 00:02:35.605
In this case if you choose 6 to 5,
that's actually the old name

46
00:02:35.605 --> 00:02:39.809
of the Babel transpiler, which I may
have mentioned to you yesterday.

47
00:02:39.809 --> 00:02:42.312
So if you just choose 6 to 5,
no matter what browser you're in,

48
00:02:42.312 --> 00:02:45.210
even if it's Chrome,
you can start using the arrow function.

49
00:02:45.210 --> 00:02:50.070
So I can do something like this.
&gt;&gt; Jafar Husain: So 6 to 5,

50
00:02:50.070 --> 00:02:51.160
that should be updated.

51
00:02:51.160 --> 00:02:53.445
It's technically the new name of Babel is,

52
00:02:53.445 --> 00:02:54.507
the new name is Babel

53
00:03:04.525 --> 00:03:05.410
&gt;&gt; Jafar Husain: Is that
clear to everybody?

54
00:03:05.410 --> 00:03:06.480
So now we're up and running.

55
00:03:06.480 --> 00:03:07.800
We got a running example.

56
00:03:07.800 --> 00:03:09.860
And we're using 6 to 5s.

57
00:03:09.860 --> 00:03:15.524
So we can use arrow functions.
&gt;&gt; Jafar Husain: So

58
00:03:15.524 --> 00:03:19.860
we're gonna try and put together at least
a simple dropdown list based on Wikipedia.

59
00:03:19.860 --> 00:03:22.380
And you know how in Wikipedia,
you start typing and

60
00:03:22.380 --> 00:03:24.660
you see a variety of different results.

61
00:03:24.660 --> 00:03:28.050
So the very first thing we're gonna do
is we are going to start listening for

62
00:03:28.050 --> 00:03:31.630
the keypress event on the tex tbox,
cuz that's where we have to start, right?

63
00:03:31.630 --> 00:03:34.750
We've got two different async
APIs we're gonna be working with.

64
00:03:34.750 --> 00:03:37.250
One is the event on the text box,

65
00:03:37.250 --> 00:03:40.890
and the other is the asynchronous
request that we get from jQuery.

66
00:03:40.890 --> 00:03:44.140
And we're gonna start by adapting
them both to observables.

67
00:03:44.140 --> 00:03:49.838
So let's just use the old way
of adding an EventListener to

68
00:03:49.838 --> 00:03:58.250
a text box.
&gt;&gt; Jafar Husain: I

69
00:03:58.250 --> 00:04:00.000
want to make sure my
HTML tab is open here.

70
00:04:00.000 --> 00:04:01.430
It is, although I'm not seeing it.

71
00:04:02.610 --> 00:04:03.560
Output tab, there we go.

72
00:04:03.560 --> 00:04:08.850
So if I select my HTML,
6 to 5 console and output tabs.

73
00:04:08.850 --> 00:04:11.480
Are we gonna have some problems
of the font size on this?

74
00:04:11.480 --> 00:04:12.461
&gt;&gt; Off Camera 1: Yeah, I mean in JS Bin

75
00:04:12.461 --> 00:04:13.915
you can select the font size.

76
00:04:13.915 --> 00:04:17.840
[INAUDIBLE] in the Settings button.
&gt;&gt; Jafar Husain: Hm.

77
00:04:17.840 --> 00:04:18.660
&gt;&gt; Off Camera 1: You can bump it,

78
00:04:18.660 --> 00:04:21.460
but then you'd have to-
&gt;&gt; Jafar Husain: Tell you what,

79
00:04:21.460 --> 00:04:25.030
what I'll do is I'll, now that we've
added the HTML, I'll hide the HTML pane,

80
00:04:25.030 --> 00:04:28.070
because we don't need to see that anymore.

81
00:04:28.070 --> 00:04:30.960
We've added our text box,
we've added jQuery.

82
00:04:30.960 --> 00:04:31.930
Is this any better,

83
00:04:31.930 --> 00:04:35.030
do we need to go higher?
&gt;&gt; Off Camera 1: I mean ideally, but

84
00:04:35.030 --> 00:04:36.012
that's-
&gt;&gt; Jafar Husain: I can make it work,

85
00:04:36.012 --> 00:04:38.276
I can make it work.
&gt;&gt; Off Camera 1: That's better.

86
00:04:38.276 --> 00:04:38.990
&gt;&gt; Jafar Husain: Okay,

87
00:04:38.990 --> 00:04:42.008
not gonna leave us a lot of room but
we'll make it work.

88
00:04:42.008 --> 00:04:47.855
So.
&gt;&gt; Jafar Husain: Now hopefully

89
00:04:47.855 --> 00:04:51.280
what should happen, is if I get a key
press, it's gonna start logging stuff.

90
00:04:52.520 --> 00:04:56.220
It doesn't like that size.

91
00:04:56.220 --> 00:04:56.740
What's going on?
So

92
00:04:56.740 --> 00:04:59.890
it's actually showing us our console
log which is when I type a key,

93
00:04:59.890 --> 00:05:01.350
it's logging in out here to the console.

94
00:05:02.890 --> 00:05:07.760
So we take a look at that, you'll see this
actually showing us that big event object.

95
00:05:07.760 --> 00:05:12.720
So if I clear this console and
I click, we see that big event object.

96
00:05:12.720 --> 00:05:17.110
So let's not print out that whole big
event object, it's a lot of information.

97
00:05:17.110 --> 00:05:25.680
I think the keypress object has a keyCode.
&gt;&gt; Jafar Husain: I think it's keyCode.

98
00:05:27.010 --> 00:05:29.640
So now we see the keyCodes of
the event object it prints.

99
00:05:29.640 --> 00:05:33.640
So instead of building on top of
addEventListner or removeEventlistner,

100
00:05:33.640 --> 00:05:37.650
which is all DOM event based,
we're gonna build on top of observables.

101
00:05:37.650 --> 00:05:41.520
So we need to adapt the event
to the observable interface.

102
00:05:41.520 --> 00:05:46.020
So remember how we do that, so
I'm just gonna pull in observable and

103
00:05:46.020 --> 00:05:50.380
I'm going to, the observable tape is
actually hanging off the Rx namespace

104
00:05:50.380 --> 00:05:55.580
which is brought in when you bring
in the Rx library right over here.

105
00:05:55.580 --> 00:06:00.940
So using rx.all, and so we're binding
a variable to observable, so we don't

106
00:06:00.940 --> 00:06:06.700
have to type rx.observable every single
time, and I'm gonna buy us some room here.

107
00:06:09.290 --> 00:06:12.720
So the first thing to do is,
what collections do we have?

108
00:06:12.720 --> 00:06:14.990
Well the very first thing we want
to start with is keypresses, and

109
00:06:14.990 --> 00:06:17.660
we want that to emit an observable
instead of being a dominant.

110
00:06:17.660 --> 00:06:21.285
So let's grab a handle to our text box,
first thing's first.

111
00:06:21.285 --> 00:06:29.524
We're gonna use document.getElementByID.
&gt;&gt; Jafar Husain: Okay.

112
00:06:29.524 --> 00:06:30.499
Do we already got that?

113
00:06:30.499 --> 00:06:33.830
Okay.

114
00:06:33.830 --> 00:06:36.980
And now we're going to create
the keypresses observables.

115
00:06:36.980 --> 00:06:41.960
So it's the collection of
all the keypresses that will

116
00:06:41.960 --> 00:06:46.723
ever be by using fromEvent
passing in the text box and

117
00:06:46.723 --> 00:06:52.707
the keypress is the name of the event.
&gt;&gt; Jafar Husain: So

118
00:06:52.707 --> 00:06:58.403
let's try this out to see if this worked.
&gt;&gt; Jafar Husain: I'm

119
00:06:58.403 --> 00:07:02.440
gonna turn off auto-run so it doesn't
keep filling up our console here.

120
00:07:03.530 --> 00:07:06.360
So how do I subscribe to
an observable to get the data out?

121
00:07:06.360 --> 00:07:13.825
Well, I just forEach over it
&gt;&gt; Jafar Husain: Okay,

122
00:07:13.825 --> 00:07:15.850
so if everything worked,
we should run this.

123
00:07:15.850 --> 00:07:18.950
And if I type into the text box that
you see on the right over here,

124
00:07:18.950 --> 00:07:21.180
we should start to see
results in the console.

125
00:07:21.180 --> 00:07:22.440
But first I have to just run.

126
00:07:22.440 --> 00:07:29.646
So run, and now if I type.
&gt;&gt; Jafar Husain: Didn't

127
00:07:29.646 --> 00:07:35.829
quite work.
&gt;&gt; Jafar Husain: I

128
00:07:35.829 --> 00:07:42.029
get that right.
&gt;&gt; Jafar Husain: Was prepared for

129
00:07:42.029 --> 00:07:42.947
this eventuality.

130
00:08:03.536 --> 00:08:04.712
&gt;&gt; Jafar Husain: Hmm.

131
00:08:16.960 --> 00:08:18.116
&gt;&gt; Jafar Husain: My forEach in here?

132
00:08:26.270 --> 00:08:27.172
&gt;&gt; Jafar Husain: Let's hope that's not

133
00:08:27.172 --> 00:08:27.763
a big problem.

134
00:08:47.025 --> 00:08:47.847
&gt;&gt; Jafar Husain: So so far so good.

135
00:08:47.847 --> 00:08:51.510
We're actually getting into the handler
there when I get a keypress.

136
00:08:51.510 --> 00:08:52.670
But we're not getting the X object.

137
00:08:52.670 --> 00:08:57.074
And that might be because I'm
preventing the default action

138
00:08:57.074 --> 00:09:02.365
here.
&gt;&gt; Off Camera 1: Someone

139
00:09:02.365 --> 00:09:07.598
says you need to add an ID to the HTML.
&gt;&gt; Jafar Husain: Thank

140
00:09:07.598 --> 00:09:09.500
you very much guys out there.

141
00:09:09.500 --> 00:09:13.571
No, I've got an ID on the HTML.
&gt;&gt; Off Camera 2: Go

142
00:09:13.571 --> 00:09:18.270
over your input [INAUDIBLE].

143
00:09:18.270 --> 00:09:20.507
Sorry, do you need me to close that?
&gt;&gt; Jafar Husain: No shouldn't need to

144
00:09:20.507 --> 00:09:21.093
close it on HTML.

145
00:09:21.093 --> 00:09:23.918
So we'll alert the test.

146
00:09:23.918 --> 00:09:28.380
And it's probably a small problem.

147
00:09:28.380 --> 00:09:29.180
I know what it is.

148
00:09:29.180 --> 00:09:30.100
I need to return.

149
00:09:31.510 --> 00:09:32.510
So I want to clarify.

150
00:09:32.510 --> 00:09:34.410
I'll actually,
I need to get to this just yet.

151
00:09:34.410 --> 00:09:35.190
I'll delete this.

152
00:09:36.660 --> 00:09:43.620
Hm, test, okay.

153
00:09:43.620 --> 00:09:45.740
And now let's write out X.

154
00:09:45.740 --> 00:09:50.190
This should be the event object, great.

155
00:09:50.190 --> 00:09:53.378
And now lets console log it instead of
alert it, which will be slightly less

156
00:09:53.378 --> 00:09:59.591
intrusive.
&gt;&gt; Jafar Husain: Great,

157
00:09:59.591 --> 00:10:02.940
so we're back where we were before
when we were using addEventListener.

158
00:10:02.940 --> 00:10:06.870
Now we can just 4H over it, and we're
printing an H event object to the console.

