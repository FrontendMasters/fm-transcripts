WEBVTT

1
00:00:00.000 --> 00:00:04.028
[MUSIC]

2
00:00:04.028 --> 00:00:06.508
&gt;&gt; Jafar Husain: But I wanna call your
attention to those three flattening

3
00:00:06.508 --> 00:00:08.120
functions we talked about earlier.

4
00:00:08.120 --> 00:00:10.625
Just everybody tell me what
the three flattening functions are?

5
00:00:10.625 --> 00:00:12.608
&gt;&gt; Speaker 2: MergeAll.

6
00:00:12.608 --> 00:00:14.349
&gt;&gt; Speaker 3: ConcatAll.

7
00:00:14.349 --> 00:00:18.650
&gt;&gt; Speaker 4: SwitchLatest
&gt;&gt; Jafar Husain: Right, so let's say, and

8
00:00:18.650 --> 00:00:21.650
this happens all the time
in user interfaces,

9
00:00:21.650 --> 00:00:26.550
I start an animation and
then another animation comes along.

10
00:00:26.550 --> 00:00:30.450
What are the three options I have
when it comes that previous, so

11
00:00:30.450 --> 00:00:32.020
let's actually imagine, spatially.

12
00:00:32.020 --> 00:00:33.510
Can we get a white board going?

13
00:00:33.510 --> 00:00:36.040
That would be super helpful right now.

14
00:00:36.040 --> 00:00:40.228
We're about to talk about how broadly
applicable these three flattening patterns

15
00:00:40.228 --> 00:00:42.815
are, mergeAll, concatAll,
and switchLatest.

16
00:00:42.815 --> 00:00:45.230
And how we actually can use
them to coordinate animations.

17
00:00:46.470 --> 00:00:49.850
Right, so let's just do a quick review
of how these flattening patterns work.

18
00:00:49.850 --> 00:00:51.944
So I've got an observable
of observables here.

19
00:00:51.944 --> 00:00:54.220
All right, here is the beginning
of the outer observable.

20
00:00:54.220 --> 00:00:58.010
And within we have an inner observable,
another inner observable and

21
00:00:58.010 --> 00:00:59.214
inner observable.

22
00:00:59.214 --> 00:01:02.000
And mergeAll it's like
lanes merging on a highway.

23
00:01:02.000 --> 00:01:05.584
So we get five, six, nine and 77.

24
00:01:05.584 --> 00:01:12.140
ConcatAll, each one of these
shifts to the end, because

25
00:01:12.140 --> 00:01:16.910
we always handle them sequentially,
top to bottom, left to right.

26
00:01:16.910 --> 00:01:20.813
So we get this very long time period,
because we don't start for each over, and

27
00:01:20.813 --> 00:01:24.021
therefore generating these results
until this is finished, and

28
00:01:24.021 --> 00:01:26.838
that's why we shifted over here,
and so on and so forth.

29
00:01:26.838 --> 00:01:28.069
We get this long observable.

30
00:01:28.069 --> 00:01:32.586
And finally switchLatest where we
begin listening to an observable,

31
00:01:32.586 --> 00:01:36.498
and then as soon as another
observable comes along, right?

32
00:01:36.498 --> 00:01:41.269
We switch to it, and actually I got this
wrong, because there's no five here.

33
00:01:46.494 --> 00:01:49.187
&gt;&gt; Jafar Husain: This is the right
observable for switchLatest.

34
00:01:51.962 --> 00:01:55.010
&gt;&gt; Jafar Husain: Because we started
listening to an observable, and

35
00:01:55.010 --> 00:01:58.267
before the second one came along,
this one came along,

36
00:01:58.267 --> 00:02:00.500
sorry my time is a little bit off here.

37
00:02:00.500 --> 00:02:02.560
But the point is this is the time axis.

38
00:02:02.560 --> 00:02:04.680
And so another observable came
along before we even got five,

39
00:02:04.680 --> 00:02:06.614
which means we only ended up with nine.

40
00:02:07.890 --> 00:02:12.580
So if I was to visualize what these
operators would do two animations.

41
00:02:12.580 --> 00:02:16.980
So let's say we started an animation
that animated a box from,

42
00:02:16.980 --> 00:02:20.530
this is 0,0 to 100.

43
00:02:20.530 --> 00:02:25.085
And all it looks like is it literally just
looks like this, it looks like [SOUND]

44
00:02:25.085 --> 00:02:29.081
An empty observable, because all
it does is it starts animation and

45
00:02:29.081 --> 00:02:32.746
then as soon as that animation is done,
it says uncompleted.

46
00:02:32.746 --> 00:02:34.530
So, there's no data inside.

47
00:02:34.530 --> 00:02:38.270
So, if we model our observables as
animations, we can do them this way.

48
00:02:38.270 --> 00:02:43.090
And then by the time this reaches here,
one second will have elapsed.

49
00:02:43.090 --> 00:02:45.840
So, let's say this is one
second of duration right here,

50
00:02:45.840 --> 00:02:48.620
1000 milliseconds, okay?

51
00:02:48.620 --> 00:02:50.310
To move 100 pixels.

52
00:02:50.310 --> 00:02:53.620
So let's say we start that animation and
half way through,

53
00:02:54.780 --> 00:02:58.050
we start an animation
that moves the y position

54
00:02:59.890 --> 00:03:04.390
of the box up to 100, so
halfway through we start that animation.

55
00:03:04.390 --> 00:03:06.485
So that's actually
an observable of observables,

56
00:03:06.485 --> 00:03:10.180
the first observable like the first
inner observable that comes along,

57
00:03:10.180 --> 00:03:13.710
starts the animation going this way but
then half a second later another inner

58
00:03:13.710 --> 00:03:18.258
observable comes along that
starts pushing the y up this way.

59
00:03:18.258 --> 00:03:20.711
Now I'm gonna draw a path for
this box, and

60
00:03:20.711 --> 00:03:25.154
you guys are gonna tell me which
flattening pattern accomplishes that path.

61
00:03:33.025 --> 00:03:34.094
&gt;&gt; Jafar Husain: It got half way and

62
00:03:34.094 --> 00:03:38.520
it started moving up at the same time
as it's completing moving this way.

63
00:03:38.520 --> 00:03:41.820
And then eventually it got to the top.

64
00:03:41.820 --> 00:03:42.670
&gt;&gt; Speaker 5: MergeAll.

65
00:03:42.670 --> 00:03:44.237
&gt;&gt; Jafar Husain: MergeAll, absolutely.

66
00:03:45.653 --> 00:03:48.433
&gt;&gt; Jafar Husain: Right, because we're
listening to the current observer and

67
00:03:48.433 --> 00:03:51.962
as soon as the next observable comes
along, we immediately start playing it,

68
00:03:51.962 --> 00:03:54.472
and now we're pushing the box x and
y up at the same time,

69
00:03:54.472 --> 00:03:56.367
till finally the x animation completes.

70
00:03:56.367 --> 00:03:59.184
But we still have that half a second
left on the y animation and so

71
00:03:59.184 --> 00:04:01.520
we can that's structure right there.

72
00:04:01.520 --> 00:04:05.176
When you're coordinating animations,
you can either play them at the same time.

73
00:04:05.176 --> 00:04:06.936
You can do the next thing,

74
00:04:06.936 --> 00:04:14.093
which is,
&gt;&gt; Jafar Husain: Which

75
00:04:14.093 --> 00:04:15.585
flattening pattern would this be?

76
00:04:15.585 --> 00:04:16.670
&gt;&gt; Speaker 6: ConcatAll.

77
00:04:16.670 --> 00:04:17.633
&gt;&gt; Jafar Husain: Concatall.

78
00:04:17.633 --> 00:04:22.641
We fully finished the x animation
before we even start the y animation,

79
00:04:22.641 --> 00:04:23.984
and so we get that.

80
00:04:23.984 --> 00:04:29.440
And obviously,
by process of elimination, we get this.

81
00:04:29.440 --> 00:04:34.200
All right, almost, technically it's
gonna look a little more like this.

82
00:04:37.672 --> 00:04:40.888
&gt;&gt; Jafar Husain: We got halfway through
the x animation and we stopped.

83
00:04:40.888 --> 00:04:43.210
And then we moved all
the way up the y animation.

84
00:04:43.210 --> 00:04:48.991
When you dispose off the observable, you
freeze the animation, just right in place.

85
00:04:48.991 --> 00:04:52.009
Now you can make your decision about
what that does when you dispose of

86
00:04:52.009 --> 00:04:55.880
an observable, when you're designing the
API that wraps an animation as observable.

87
00:04:55.880 --> 00:04:57.810
You could decide that when
somebody dispose off of it,

88
00:04:57.810 --> 00:04:59.470
you would snap it back to
its original position.

89
00:04:59.470 --> 00:05:02.975
You could also decide that you could
snap it to its end position, but

90
00:05:02.975 --> 00:05:07.096
that's how I would do it, by default
anyway, if you dispose off the observable

91
00:05:07.096 --> 00:05:10.504
that represent that animation,
it just freezes in it's place.

92
00:05:10.504 --> 00:05:16.147
So this is a nice visual explanation
of how flattening patterns work and

93
00:05:16.147 --> 00:05:20.579
how you can use them to
coordinate animations, right?

94
00:05:20.579 --> 00:05:23.101
If you treat all your
animations as observables,

95
00:05:23.101 --> 00:05:26.651
you can coordinate them just using
these three flattening patterns.

96
00:05:29.612 --> 00:05:30.500
&gt;&gt; Jafar Husain: Does that make sense?

97
00:05:33.010 --> 00:05:36.528
Okay, so I don't know how
much more we can cover today.

98
00:05:36.528 --> 00:05:41.700
well, I think we're gonna cover the one
last thing which is saving the database.

99
00:05:41.700 --> 00:05:43.908
which is at service time
that model changes,

100
00:05:43.908 --> 00:05:46.182
we're gonna save the database effectively.

101
00:05:46.182 --> 00:05:48.760
But I wanna ask you guys a question.

102
00:05:48.760 --> 00:05:53.560
So before we turn the projector back on,
I wanna get your intuition about it.

103
00:05:53.560 --> 00:05:57.100
So we've got this stream of
changes to the object, right?

104
00:05:57.100 --> 00:05:59.880
And we're going to map it,
because this is always what happens,

105
00:05:59.880 --> 00:06:03.960
we map it into attempts to
save the database, right?

106
00:06:03.960 --> 00:06:08.359
So for every single time, we get a change
the object, we are going to issue a save

107
00:06:08.359 --> 00:06:11.925
to the database command,
which is gonna return an observable.

108
00:06:11.925 --> 00:06:15.918
So, right off the top, how many deep is
that collection, if for every change to

109
00:06:15.918 --> 00:06:20.170
the object we create an observable, which
saves the current state to the database?

110
00:06:22.810 --> 00:06:23.640
Two, right?

111
00:06:23.640 --> 00:06:25.510
Because for
every little of those change record,

112
00:06:25.510 --> 00:06:28.870
those arrays of change record,
we're substituting in

113
00:06:28.870 --> 00:06:33.040
an observable that will cause us to
save the current state to the database.

114
00:06:35.940 --> 00:06:38.460
which flattening pattern would
we use to flatten it on out?

115
00:06:38.460 --> 00:06:39.230
What's the right behavior?

116
00:06:40.330 --> 00:06:41.140
&gt;&gt; Speaker 4: Switch Latest.

117
00:06:42.160 --> 00:06:42.900
&gt;&gt; Jafar Husain: Why Switch Latest?

118
00:06:42.900 --> 00:06:44.460
&gt;&gt; Speaker 4: Cuz you
don't need the older data.

119
00:06:44.460 --> 00:06:46.950
&gt;&gt; Jafar Husain: [LAUGH] Why would
you want to keep trying to save

120
00:06:46.950 --> 00:06:47.627
old data, right?

121
00:06:47.627 --> 00:06:50.940
You wouldn't,
you'd wanna save the latest data.

122
00:06:50.940 --> 00:06:53.965
Absolutely, so not really that surprising,

123
00:06:53.965 --> 00:06:56.660
in user interfaces mostly you
want to do the latest thing.

124
00:06:56.660 --> 00:07:00.720
So I'm not necessarily gonna type that all
out now because every single example I've

125
00:07:00.720 --> 00:07:03.650
shown you up till this point has
followed the exact same pattern.

126
00:07:03.650 --> 00:07:07.780
Let's map over some event, let's issue
an asynchronous request, we'll take a look

127
00:07:07.780 --> 00:07:10.210
and we'll see that, sure enough, we've
created a two-dimensional collection.

128
00:07:10.210 --> 00:07:12.570
And then we'll choose
the right flattening pattern,

129
00:07:12.570 --> 00:07:15.140
which on the UI 90% of
the time is switcLatest.

130
00:07:15.140 --> 00:07:18.810
But I've just shown you that's for
asynchronous requests.

131
00:07:18.810 --> 00:07:20.760
There's that last step,
which unfortunately,

132
00:07:20.760 --> 00:07:24.140
I couldn't get to today, which is fine,
now I've saved to the database.

133
00:07:24.140 --> 00:07:26.450
Maybe I wanna show some animation
that indicates that's complete.

134
00:07:26.450 --> 00:07:29.440
Maybe I wanna fade a dialog box in and
says, Save right?

135
00:07:29.440 --> 00:07:33.930
Then that's one more asynchronous
action to the chain and

136
00:07:33.930 --> 00:07:37.560
you can bet that will involve going to
a three dimensional observable, right?

137
00:07:37.560 --> 00:07:41.980
And then you wanna decide what flattening
pattern to use for that third level.

138
00:07:41.980 --> 00:07:43.570
Maybe it's switch latest, or

139
00:07:43.570 --> 00:07:49.200
maybe you want to smoothly show and
hide animations one after the other.

140
00:07:49.200 --> 00:07:50.520
When you're doing animations,

141
00:07:50.520 --> 00:07:52.736
switch latest is not always
the best pattern, right?

142
00:07:52.736 --> 00:07:56.500
Do you wanna start an animation, then
flicker and switch to another animation?

143
00:07:56.500 --> 00:08:00.700
I can tell you Netflix for XBox One
application, wrote a drop down list.

144
00:08:00.700 --> 00:08:02.790
And we used the exact same
technique that you saw there.

145
00:08:02.790 --> 00:08:06.450
But there was one extra step,
was that when we showed the results,

146
00:08:06.450 --> 00:08:07.987
we didn't just flicker them in.

147
00:08:07.987 --> 00:08:11.620
We animated them smoothly, fading in and
coming from the right hand side.

148
00:08:11.620 --> 00:08:15.454
And then as soon as you clicked the key,
we faded out to the left hand side.

149
00:08:15.454 --> 00:08:17.080
And then when the search results came in,

150
00:08:17.080 --> 00:08:20.270
we faded it back out from the right
hand side and so on and so forth.

151
00:08:20.270 --> 00:08:23.480
What we definitely didn't wanna do,
is start fading that animation in

152
00:08:23.480 --> 00:08:27.300
from the right hand side and then have you
click and then immediately have a jerk and

153
00:08:27.300 --> 00:08:30.540
fade out from the left hand side,
do you see what I'm saying?

154
00:08:30.540 --> 00:08:36.060
So, maybe you wanna use concatAll to
make sure your animations are smooth.

155
00:08:36.060 --> 00:08:40.590
So I'm sorry we didn't get to animations,
asynchronous requests and events, but

156
00:08:40.590 --> 00:08:42.620
it's the same thing again and again.

157
00:08:42.620 --> 00:08:44.010
You're going to map over a stream,

158
00:08:44.010 --> 00:08:47.580
you're going to pick the right flattening
strategy, that's the hard part.

159
00:08:47.580 --> 00:08:50.640
You learned how to flatten
streams with arrays.

160
00:08:50.640 --> 00:08:52.820
The only question that now that you
have to deal with when you deal with

161
00:08:52.820 --> 00:08:56.040
asynchronous programming, we've really
summed up the challenges involved in

162
00:08:56.040 --> 00:09:00.090
asynchronous programming to one question,
which flattening do I use?

163
00:09:00.090 --> 00:09:03.560
What's the right way to
coordinate this concurrency?

164
00:09:03.560 --> 00:09:04.650
That's what we're doing here.

165
00:09:04.650 --> 00:09:09.572
We're coordinating concurrency,
things happening at the same time.

166
00:09:09.572 --> 00:09:13.380
That's all it is and it turns out
there's only three common patterns.

167
00:09:15.030 --> 00:09:17.870
So when you look at asynchronous
programming from the right level,

168
00:09:17.870 --> 00:09:20.390
when you take an half of a step back and

169
00:09:20.390 --> 00:09:23.360
look at it,
sure enough it's actually really simple.

170
00:09:23.360 --> 00:09:26.540
But if you walk all the way up to it and
look at these little callbacks, and

171
00:09:26.540 --> 00:09:30.460
these handles, all of a sudden
it seems impossibly complex.

172
00:09:30.460 --> 00:09:33.300
And so most problems are really
about zooming out and

173
00:09:33.300 --> 00:09:35.990
finding the right level of
abstraction to tackle them.

174
00:09:35.990 --> 00:09:40.050
And I suggest to you guys that
events as collections is the right

175
00:09:40.050 --> 00:09:44.690
level of abstraction to tackle
asynchronous problems and user interfaces.

176
00:09:44.690 --> 00:09:47.930
And so now it's up to you to go out and
master these skills,

177
00:09:47.930 --> 00:09:49.720
drill them, try them in real applications.

178
00:09:49.720 --> 00:09:53.990
Because I can tell you that everybody
at Netflix who learns this technology,

179
00:09:53.990 --> 00:09:56.560
very often they come up to me
within two or three months,

180
00:09:56.560 --> 00:09:59.740
because that's often how long it takes of
thinking about it and paying with it, and

181
00:09:59.740 --> 00:10:03.220
say I've completely changed the way
that I write user interfaces.

182
00:10:03.220 --> 00:10:05.010
So I hope the same for you.

183
00:10:05.010 --> 00:10:05.650
Thanks very much.

