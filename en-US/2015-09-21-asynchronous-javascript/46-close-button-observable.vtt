WEBVTT

1
00:00:00.000 --> 00:00:04.118
[MUSIC]

2
00:00:04.118 --> 00:00:06.025
&gt;&gt; Jafar Husain: So
when searchButtonClicks happens,

3
00:00:06.025 --> 00:00:08.110
we know we want to cause a side effect.

4
00:00:08.110 --> 00:00:10.930
We want to show something on screen.

5
00:00:10.930 --> 00:00:15.530
But we also might want
to use that as a stream

6
00:00:15.530 --> 00:00:18.820
of information to create
our searchResultSets.

7
00:00:19.920 --> 00:00:20.590
Why would that be?

8
00:00:21.720 --> 00:00:22.600
Remember the goal here.

9
00:00:22.600 --> 00:00:26.440
It's when the search screen is open,
we wanna begin listening to the clicks in

10
00:00:26.440 --> 00:00:30.090
the text, to the keys of the text
box,,and start generating search results.

11
00:00:30.090 --> 00:00:33.110
But as soon as somebody
closes the search screen

12
00:00:33.110 --> 00:00:36.090
we don't wanna be subscribed
up to that text box anymore.

13
00:00:36.090 --> 00:00:39.310
That gives us, again, the flexibility
later on to remove the DOM elements and

14
00:00:39.310 --> 00:00:40.800
we won't have a memory leak.

15
00:00:40.800 --> 00:00:43.600
So let's go back to our
searchResultSets and

16
00:00:43.600 --> 00:00:45.826
let's make it a little bit more complex.

17
00:00:45.826 --> 00:00:49.201
Let's listen for

18
00:00:49.201 --> 00:00:54.602
the searchButtonClicks and

19
00:00:54.602 --> 00:00:59.327
only begin listening for

20
00:00:59.327 --> 00:01:07.210
key presses after a searchButtonClick.

21
00:01:11.060 --> 00:01:13.870
So see how I've used map
to order things here.

22
00:01:13.870 --> 00:01:17.340
I'm saying, now, don't subscribe
up to key presses all the time.

23
00:01:17.340 --> 00:01:21.166
Just subscribe up when somebody
has clicked the search button.

24
00:01:39.571 --> 00:01:41.630
&gt;&gt; Jafar Husain: So
remember, map orders things.

25
00:01:41.630 --> 00:01:45.002
It means that this function,
this map function,

26
00:01:45.002 --> 00:01:48.310
is only gonna get executed
when a click happens.

27
00:01:48.310 --> 00:01:50.550
It necessarily has to happen that way,
right?

28
00:01:50.550 --> 00:01:53.880
This whole function can only get
executed when we get a click event.

29
00:01:53.880 --> 00:01:57.150
Now I don't particularly care about the
click event, but it will be passed in so

30
00:01:57.150 --> 00:01:58.260
that's why I just left it out.

31
00:01:58.260 --> 00:02:00.140
In general, I recommend that.

32
00:02:00.140 --> 00:02:03.780
If you don't care about the input from
a stream just leave out the identifier.

33
00:02:03.780 --> 00:02:07.670
Cuz it causes less calling
it an overload rather than

34
00:02:07.670 --> 00:02:09.570
introducing identifiers, they're not used.

35
00:02:09.570 --> 00:02:12.370
Cuz some developer might look at that and
assume that variable's used somewhere.

36
00:02:12.370 --> 00:02:15.090
For the same reason you wouldn't declare
a variable and then never use it.

37
00:02:15.090 --> 00:02:16.570
It's like an unused variable.

38
00:02:16.570 --> 00:02:19.970
So now we see that we're only going to

39
00:02:19.970 --> 00:02:24.320
begin listening to key presses
when the search button is clicked.

40
00:02:24.320 --> 00:02:26.994
But how many dimensions
is this collection now?

41
00:02:38.306 --> 00:02:39.500
&gt;&gt; Jafar Husain: What data type is this?

42
00:02:40.600 --> 00:02:42.408
What's this whole sub expression?

43
00:02:44.984 --> 00:02:46.040
&gt;&gt; Jafar Husain: What did I hear?

44
00:02:46.040 --> 00:02:46.660
&gt;&gt; Off Camera 1: It's an observable.

45
00:02:46.660 --> 00:02:50.115
&gt;&gt; Jafar Husain: Yeah, it's an observable
So if we map over an observable, and for

46
00:02:50.115 --> 00:02:54.262
every entry inside we return another
observable, how many dimensions are we?

47
00:02:56.912 --> 00:02:58.450
&gt;&gt; Jafar Husain: Two, right?

48
00:02:58.450 --> 00:03:00.830
For the same reason that
if I take an array,

49
00:03:02.067 --> 00:03:03.629
&gt;&gt; Jafar Husain: Go back to the old

50
00:03:03.629 --> 00:03:05.976
example, and I do this.

51
00:03:07.278 --> 00:03:13.760
&gt;&gt; Jafar Husain: I get
&gt;&gt; Jafar Husain: This.

52
00:03:13.760 --> 00:03:17.750
So whenever we map and then for
every entry we return another observable,

53
00:03:17.750 --> 00:03:19.690
we end up with a two
dimensional observable.

54
00:03:19.690 --> 00:03:21.960
And so that means we need to do what?

55
00:03:21.960 --> 00:03:23.000
&gt;&gt; Off Camera 1: Concat.

56
00:03:23.000 --> 00:03:23.530
&gt;&gt; Jafar Husain: Is it concat?

57
00:03:23.530 --> 00:03:24.620
So what are our options?

58
00:03:24.620 --> 00:03:27.240
Let's talk about the options and
which one we should use.

59
00:03:27.240 --> 00:03:28.740
&gt;&gt; Off Camera 2: It's always
gonna be switchLatest.

60
00:03:28.740 --> 00:03:29.820
It's always switchLatest.

61
00:03:29.820 --> 00:03:31.410
&gt;&gt; Jafar Husain: [LAUGH] Well,
I don't know about always.

62
00:03:31.410 --> 00:03:34.450
I didn't say always but
most of the time, certainly.

63
00:03:34.450 --> 00:03:35.720
Now, which one would we wanna use?

64
00:03:35.720 --> 00:03:40.850
Well, it might be switchLatest because
obviously the next time somebody clicks

65
00:03:40.850 --> 00:03:47.820
a search button we don't want to listen
to keep presses multiple times, right?

66
00:03:47.820 --> 00:03:50.610
So somebody clicks a search button
twice we don't to be listening to key

67
00:03:50.610 --> 00:03:51.270
presses twice.

68
00:03:51.270 --> 00:03:56.278
Which was effectively what happened if we
didn't switch to the latest one, right?

69
00:03:57.450 --> 00:04:00.020
But now we have an interesting case here,
we have an interesting case.

70
00:04:00.020 --> 00:04:02.480
Because switchLatest is great for
those times.

71
00:04:02.480 --> 00:04:03.820
You remember we talked
about this yesterday.

72
00:04:03.820 --> 00:04:08.870
SwitchLatest is great for those times when
you want to stop listening to an inner

73
00:04:08.870 --> 00:04:13.970
observable based on the same event that
causes another observable to be created.

74
00:04:13.970 --> 00:04:18.370
So in this case, I don't actually just
want to stop listening to the previous,

75
00:04:18.370 --> 00:04:19.290
to the text box,

76
00:04:19.290 --> 00:04:22.600
as soon as somebody clicks search again,
I actually wanna stop earlier.

77
00:04:23.700 --> 00:04:26.610
What's the event that happens that makes
me wanna stop listening to the text box?

78
00:04:28.070 --> 00:04:28.930
&gt;&gt; Off Camera 1: Close.

79
00:04:28.930 --> 00:04:30.100
&gt;&gt; Jafar Husain: Close.

80
00:04:30.100 --> 00:04:31.130
Exactly.

81
00:04:31.130 --> 00:04:34.493
That's when I wanna stop listening
to this particular observable.

82
00:04:37.666 --> 00:04:42.200
&gt;&gt; Jafar Husain: Now that is not
the same as a searchButtonClick.

83
00:04:42.200 --> 00:04:45.360
It's the close button inside
of search when we display.

84
00:04:45.360 --> 00:04:46.410
This is what I want to listen to.

85
00:04:47.580 --> 00:04:51.990
So how do I cause this searchButtonClicks,

86
00:04:51.990 --> 00:04:54.790
or technically the sub
expression key presses?

87
00:04:54.790 --> 00:04:57.060
What I really want to do
is I wanna complete that.

88
00:04:57.060 --> 00:05:01.370
I wanna complete this when
the search button is clicked.

89
00:05:01.370 --> 00:05:05.690
So I only want to listen to the key
presses until a search button is clicked.

90
00:05:05.690 --> 00:05:07.370
&gt;&gt; Off Camera 1: You mean until
the close button's clicked?

91
00:05:07.370 --> 00:05:08.380
&gt;&gt; Jafar Husain: Excuse me, close button.

92
00:05:08.380 --> 00:05:08.980
Thank you.

93
00:05:08.980 --> 00:05:12.160
I only want to listen to key presses
until the close button is clicked.

94
00:05:13.980 --> 00:05:15.030
So how am I gonna do it?

95
00:05:15.030 --> 00:05:16.502
What's the right operator to use here?

96
00:05:19.129 --> 00:05:21.110
&gt;&gt; Off Camera 2: I mean it
would be like our drag, right?

97
00:05:21.110 --> 00:05:24.970
You start listening at the mouse down,
you stop listening at the mouse up.

98
00:05:24.970 --> 00:05:26.233
&gt;&gt; Jafar Husain: Right.
&gt;&gt; Off Camera 2: You start listening at

99
00:05:26.233 --> 00:05:29.200
the search button,
you stop listening at the close button.

100
00:05:29.200 --> 00:05:29.970
&gt;&gt; Jafar Husain: Yes.

101
00:05:29.970 --> 00:05:31.415
So what's the operator I use?

102
00:05:31.415 --> 00:05:32.827
What's the operator I'm
using to drag it up?

103
00:05:32.827 --> 00:05:33.471
&gt;&gt; Off Camera 1: Take until.

104
00:05:33.471 --> 00:05:34.677
&gt;&gt; Jafar Husain: Take until.

105
00:05:34.677 --> 00:05:35.669
So what do I have to do?

106
00:05:35.669 --> 00:05:36.842
I have to takeUntil.

107
00:05:40.031 --> 00:05:43.259
&gt;&gt; Jafar Husain: And I don't have
an observable for the closes yet, so

108
00:05:43.259 --> 00:05:45.643
why don't we just create one of those?

109
00:05:48.433 --> 00:05:51.230
&gt;&gt; Jafar Husain: Now I'm
actually going to create it here.

110
00:05:51.230 --> 00:05:53.280
I'm not going to create it out here.

111
00:05:53.280 --> 00:05:54.640
Why does it matter where I create it?

112
00:05:54.640 --> 00:05:58.230
So I could put closeClicks here.

113
00:05:58.230 --> 00:06:01.150
I could go observable from

114
00:06:01.150 --> 00:06:08.456
event
&gt;&gt; Jafar Husain: Is it closeButton?

115
00:06:08.456 --> 00:06:12.018
&gt;&gt; Off Camera 3: That would
affect what our function is.

116
00:06:12.018 --> 00:06:14.209
&gt;&gt; Jafar Husain: I heard that
would affect other functions

117
00:06:19.410 --> 00:06:20.365
&gt;&gt; Off Camera 3: It's not the right scope.

118
00:06:20.365 --> 00:06:21.380
&gt;&gt; Jafar Husain: It's not the right scope.

119
00:06:21.380 --> 00:06:24.890
&gt;&gt; Off Camera 1: It only
matters inside the form.

120
00:06:24.890 --> 00:06:26.233
&gt;&gt; Jafar Husain: Yeah.
Well, let's take the thought experiment

121
00:06:26.233 --> 00:06:27.030
that we only actually-.

122
00:06:27.030 --> 00:06:33.200
So instead of just showing this form,
let's say,

123
00:06:33.200 --> 00:06:36.570
in this code when you click search we
actually create the DOM elements, right?

124
00:06:36.570 --> 00:06:41.550
So, maybe at this level of scope,
closeButton isn't even there, right?

125
00:06:41.550 --> 00:06:45.910
So, but now here inside of here,
is closeButton available?

126
00:06:47.180 --> 00:06:50.710
Yeah, because we know we've
shown the search button, right?

127
00:06:52.080 --> 00:06:57.070
Now that's technically not entirely
true because it relies on order.

128
00:06:57.070 --> 00:07:01.830
It relies on the order
of this event handler

129
00:07:01.830 --> 00:07:06.950
just happening to execute
before this function.

130
00:07:06.950 --> 00:07:08.880
And that's a dangerous place to be.

131
00:07:08.880 --> 00:07:10.390
We don't want to be in that place.

132
00:07:10.390 --> 00:07:15.010
And so sometimes a pattern that people
will use is they will have an ing and

133
00:07:15.010 --> 00:07:18.685
an ed, observable in their application.

134
00:07:18.685 --> 00:07:23.456
Search opening, search opened.

135
00:07:23.456 --> 00:07:26.130
So when you have a search
opening observable,

136
00:07:26.130 --> 00:07:32.090
you can do some side effect and then
cause a search opened observable to fire.

137
00:07:32.090 --> 00:07:34.820
And then when you listen to
the search opened observable,

138
00:07:34.820 --> 00:07:37.930
you can be sure that all the side
effects that needed to occur

139
00:07:37.930 --> 00:07:40.900
in order to create those dom elements
have successfully completed.

140
00:07:40.900 --> 00:07:42.080
Does that make sense?

141
00:07:42.080 --> 00:07:42.990
We'll come back to that.

142
00:07:42.990 --> 00:07:45.710
We're going to have to
explain a new concept

143
00:07:45.710 --> 00:07:47.209
to explain how that
works in just a moment.

144
00:07:48.890 --> 00:07:53.230
So but for now, let's rely on the fact
that just will happen to work this way.

145
00:07:53.230 --> 00:07:56.460
Cuz I believe it will based
on the subscription order.

146
00:07:56.460 --> 00:08:02.040
So now that we've created closeClicks,
we can do a takeUntil on closeClicks.

147
00:08:02.040 --> 00:08:04.390
And now, what's the right
flattening strategy to use?

148
00:08:04.390 --> 00:08:05.970
We still haven't put in one.

149
00:08:05.970 --> 00:08:07.343
We could use switch latest.

150
00:08:10.616 --> 00:08:15.546
&gt;&gt; Jafar Husain: The truth is, all of
them are- well, actually that's not true.

151
00:08:15.546 --> 00:08:19.840
[LAUGH] Notice, we still see the search
button when we open the form, right?

152
00:08:19.840 --> 00:08:22.280
That's probably not the way it
would work in a real application.

153
00:08:22.280 --> 00:08:24.390
You'd probably click search and
then you'd move to this form, and

154
00:08:24.390 --> 00:08:26.140
you wouldn't see
the search button anymore.

155
00:08:26.140 --> 00:08:29.860
But who knows, maybe it's in the toolbar
and somebody can click search again.

156
00:08:29.860 --> 00:08:33.803
So it's possible somebody could click
search again before clicking close and

157
00:08:33.803 --> 00:08:35.065
then what would happen?

158
00:08:38.000 --> 00:08:39.950
&gt;&gt; Jafar Husain: Probably
not something good, right?

159
00:08:39.950 --> 00:08:44.730
We'd probably either create the DOM
elements twice, which we wouldn't want, or

160
00:08:44.730 --> 00:08:47.560
we would avoid creating
the DOM elements twice but

161
00:08:47.560 --> 00:08:50.400
subscribe up to the text
box a second time.

162
00:08:50.400 --> 00:08:52.040
So we wouldn't want that.

163
00:08:52.040 --> 00:08:57.310
So one thing we could do and one thing
I would probably do in this instance,

164
00:08:57.310 --> 00:09:01.989
is inside of searchButtonClicks
I would hide the search button.

165
00:09:15.186 --> 00:09:18.230
&gt;&gt; Jafar Husain: That's one thing we could
do, although let's not go that route.

166
00:09:18.230 --> 00:09:21.500
Another route we could go
is we can just make sure

167
00:09:21.500 --> 00:09:26.360
to clean up the DOM element if it's there,
or do nothing effectively.

168
00:09:26.360 --> 00:09:32.780
If the search form is already visible
that's probably a better way to go.

169
00:09:32.780 --> 00:09:35.480
Cuz you might have search in the toolbar,
for example.

170
00:09:35.480 --> 00:09:39.010
So we can check to see if
the display is already visible.

171
00:09:40.110 --> 00:09:41.960
I guess I can leave this logic out here,

172
00:09:41.960 --> 00:09:44.380
cuz we're not currently dynamically
creating the DOM nodes.

173
00:09:44.380 --> 00:09:47.200
But you'd imagine, if you were dynamically
creating the DOM nodes, first you'd check

174
00:09:47.200 --> 00:09:49.990
to see if the DOM node existed, and
then you wouldn't dynamically create it.

175
00:09:49.990 --> 00:09:51.560
Does that make sense?

176
00:09:51.560 --> 00:09:56.900
So now under that circumstance, the fact
that somebody could click search again.

177
00:09:56.900 --> 00:09:58.510
What's the right
flattening pattern to use?

178
00:09:59.860 --> 00:10:00.670
&gt;&gt; Off Camera 3: Switch latest.

179
00:10:00.670 --> 00:10:01.590
&gt;&gt; Jafar Husain: Switch latest, yeah.

180
00:10:01.590 --> 00:10:04.620
Because then they can click search
as many times as they want, right?

181
00:10:04.620 --> 00:10:06.720
And then we were just gonna unhook
from the event handler, and

182
00:10:06.720 --> 00:10:07.460
then hook it up again.

183
00:10:09.370 --> 00:10:15.315
So if I go,
&gt;&gt; Jafar Husain: Now

184
00:10:15.315 --> 00:10:18.812
here's a question,
where does the switchLatest go?

185
00:10:21.204 --> 00:10:22.740
&gt;&gt; Jafar Husain: Just want
to make sure I'm all-.

186
00:10:22.740 --> 00:10:26.033
So to make sure we really
understand what we're doing here,

187
00:10:26.033 --> 00:10:27.849
where do I put the switchLatest?

188
00:10:33.639 --> 00:10:34.886
&gt;&gt; Jafar Husain: I put it here?

189
00:10:39.610 --> 00:10:41.739
&gt;&gt; Jafar Husain: How many
dimensions is this observable?

190
00:10:46.695 --> 00:10:48.681
&gt;&gt; Off Camera 3: Three.
&gt;&gt; Jafar Husain: This sub expression right

191
00:10:48.681 --> 00:10:54.780
here is actually only one dimension
because we've already switchLatest it.

192
00:10:54.780 --> 00:10:59.020
We took every key press, we mapped it into
an observable that represents a request.

193
00:10:59.020 --> 00:11:02.540
And because we we represented every item
in the observable with another observable,

194
00:11:02.540 --> 00:11:04.140
we got a two dimensional observable.

195
00:11:04.140 --> 00:11:06.830
And then we had that concurrency
probably wanted to solve and so

196
00:11:06.830 --> 00:11:09.990
we use which latest to flatten it out so
we only got the latest result.

197
00:11:09.990 --> 00:11:12.199
So this itself is a one
dimensional observable.

198
00:11:12.199 --> 00:11:16.430
If I applied switchLatest to a one
dimensional observable, what happens?

199
00:11:16.430 --> 00:11:17.080
What do we think?

200
00:11:17.080 --> 00:11:21.244
What happens if we concatAll,
a flat array?

201
00:11:21.244 --> 00:11:23.084
&gt;&gt; Off Camera 1: It errors
&gt;&gt; Jafar Husain: It errors.

202
00:11:23.084 --> 00:11:25.480
Yeah.
ConcatAll, switchLatest,

203
00:11:25.480 --> 00:11:29.800
mergeAll they're all expected to
work on two dimensional collections.

204
00:11:29.800 --> 00:11:32.700
So I can't apply switchLatest here.

205
00:11:32.700 --> 00:11:33.818
Where would I apply it then?

206
00:11:33.818 --> 00:11:38.680
&gt;&gt; Off Camera 1: The map?

207
00:11:38.680 --> 00:11:40.120
&gt;&gt; Jafar Husain: Yeah, a map down here.

208
00:11:40.120 --> 00:11:43.310
Why?
Because now since this is an observable,

209
00:11:43.310 --> 00:11:45.640
we know this is a nice flat observable.

210
00:11:45.640 --> 00:11:49.890
But we're creating it for every
single searchButtonClick here, right?

211
00:11:49.890 --> 00:11:52.700
Because we're creating this observable
inside the map function for

212
00:11:52.700 --> 00:11:55.280
every single time somebody clicks search.

213
00:11:55.280 --> 00:11:56.770
So we create this observable.

214
00:11:56.770 --> 00:12:00.580
So we actually, at this level,
we have a two dimensional observable.

215
00:12:00.580 --> 00:12:03.860
Because for every searchButtonClick
we're creating the stream of search

216
00:12:03.860 --> 00:12:04.630
results from the server.

217
00:12:06.500 --> 00:12:08.100
And so we'll switchLatest.

218
00:12:09.270 --> 00:12:14.606
And that'll work regardless of whether
the search button is visible or not.

219
00:12:16.843 --> 00:12:17.928
&gt;&gt; Jafar Husain: Let's see if that worked.

220
00:12:24.491 --> 00:12:25.468
&gt;&gt; Jafar Husain: Okay?
Now notice,

221
00:12:25.468 --> 00:12:30.520
we still don't have our close
button doing anything, right?

222
00:12:30.520 --> 00:12:31.710
That would be kind of ideal.

223
00:12:31.710 --> 00:12:33.140
We'd our close button doing something.

