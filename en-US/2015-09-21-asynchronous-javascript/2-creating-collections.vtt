WEBVTT

1
00:00:00.000 --> 00:00:04.031
[MUSIC]

2
00:00:04.031 --> 00:00:05.040
&gt;&gt; Jafar Husain: Who
here is a Netflix user?

3
00:00:06.560 --> 00:00:07.090
Great.

4
00:00:07.090 --> 00:00:10.580
All right, that's what I love to see.

5
00:00:10.580 --> 00:00:12.100
The Netflix model is pretty simple.

6
00:00:12.100 --> 00:00:15.850
When you go in,
you get merchandise a list of genres, and

7
00:00:15.850 --> 00:00:19.710
within those lists of genres we
recommend you a list of titles.

8
00:00:19.710 --> 00:00:21.081
So let's try using map and

9
00:00:21.081 --> 00:00:24.456
filter concatAll to get a list
of your favorite Netflix titles.

10
00:00:27.659 --> 00:00:28.857
&gt;&gt; Jafar Husain: Here's
how you would do it.

11
00:00:28.857 --> 00:00:31.862
So I wanna create a function
called getTopRatedFilms and

12
00:00:31.862 --> 00:00:34.480
that's gonna accept a user object.

13
00:00:34.480 --> 00:00:38.651
And every user object has a videoLists
array, that's just the array of genre

14
00:00:38.651 --> 00:00:41.430
lists that you saw earlier,
the action movies, thrillers.

15
00:00:41.430 --> 00:00:45.080
We're going to map over all
of those video lists, and

16
00:00:45.080 --> 00:00:47.940
before we return the video of this
we're first going to filter it

17
00:00:47.940 --> 00:00:53.080
to make sure all of the videos, we're only
returning videos with a rating of five.

18
00:00:53.080 --> 00:00:59.050
Now because for every video list, notice
we're returning another collection, right?

19
00:00:59.050 --> 00:01:02.910
Notice the function being passed
to map returns videoList.videos,

20
00:01:02.910 --> 00:01:04.350
which is another array.

21
00:01:04.350 --> 00:01:09.230
That means we have a two dimensional
array and we apply concatAll to it

22
00:01:09.230 --> 00:01:13.010
to flatten it down into a nice
flat list of your favorite titles.

23
00:01:13.010 --> 00:01:15.790
Does that make sense?

24
00:01:15.790 --> 00:01:19.884
Should we go over that just a little bit,
or do we feel pretty good about it?

25
00:01:22.695 --> 00:01:23.470
&gt;&gt; Jafar Husain: Any questions?

26
00:01:26.210 --> 00:01:27.335
&gt;&gt; Off Camera 1: Why is it 2D?

27
00:01:27.335 --> 00:01:28.540
&gt;&gt; Jafar Husain: Why is it 2D?

28
00:01:28.540 --> 00:01:32.163
Well remember we're starting with pretty
much, it's kind of like a two dimensional

29
00:01:32.163 --> 00:01:35.650
collection because we've got genres and
within that we have videos.

30
00:01:35.650 --> 00:01:40.190
Right, so first we're mapping over
the outer array, the genre lists array.

31
00:01:40.190 --> 00:01:42.095
And then with that function
that we're passing the map,

32
00:01:42.095 --> 00:01:45.920
its job is to take each one of
those arrays and translate it.

33
00:01:45.920 --> 00:01:46.600
And what are we doing?

34
00:01:46.600 --> 00:01:50.780
Well, we're just returning the videos
array, but first we're just filtering it.

35
00:01:50.780 --> 00:01:52.260
And so that means for every array,

36
00:01:52.260 --> 00:01:54.580
we're just returning a filtered
version of that array.

37
00:01:54.580 --> 00:01:55.730
Does that makes sense?

38
00:01:55.730 --> 00:01:57.670
Technically it's an object
with an array inside of it.

39
00:01:57.670 --> 00:02:00.230
That's the videoList.videos,
but you get the idea, right?

40
00:02:00.230 --> 00:02:03.426
For each one of these video lists, which
contains an array we're returning that

41
00:02:03.426 --> 00:02:05.406
array, but
first we're applying a filter to it.

42
00:02:05.406 --> 00:02:07.976
And we're just making sure that all
the titles are only the titles you've

43
00:02:07.976 --> 00:02:08.880
rated highly.

44
00:02:08.880 --> 00:02:11.940
And so
at the end up until the concatAll line,

45
00:02:11.940 --> 00:02:13.655
we have a two dimensional collection.

46
00:02:13.655 --> 00:02:17.150
At the end we apply concatAll and that's
what takes that two dimensional collection

47
00:02:17.150 --> 00:02:19.720
and flattens into one dimensional
collection of your favorite titles,

48
00:02:19.720 --> 00:02:21.200
all the titles with a rating of five.

49
00:02:21.200 --> 00:02:21.820
Yeah?

50
00:02:21.820 --> 00:02:24.780
&gt;&gt; Off Camera 2: So you mentioned
that we had just a normal for

51
00:02:24.780 --> 00:02:26.890
loop, it's not going to
work asynchronously?

52
00:02:26.890 --> 00:02:28.970
&gt;&gt; Jafar Husain: Yes.
&gt;&gt; Off Camera 2: So, if we had this and

53
00:02:28.970 --> 00:02:32.550
let's say it starts with three items and
it starts running through, and

54
00:02:32.550 --> 00:02:36.990
then after it's done concatAll,
we get the fourth item.

55
00:02:36.990 --> 00:02:41.100
Does it run through again, or can you
explain how it works asynchronously?

56
00:02:41.100 --> 00:02:43.375
&gt;&gt; Jafar Husain: Well so I'm not going
to talk about asynchrony at all yet.

57
00:02:43.375 --> 00:02:44.050
&gt;&gt; Off Camera 2: Okay.

58
00:02:44.050 --> 00:02:45.210
&gt;&gt; Jafar Husain: This is just arrays.

59
00:02:45.210 --> 00:02:46.633
We are just working with arrays here.

60
00:02:46.633 --> 00:02:48.452
So a for
loop would work just fine to be honest.

61
00:02:48.452 --> 00:02:49.302
&gt;&gt; Off Camera 2: Okay.

62
00:02:49.302 --> 00:02:51.050
&gt;&gt; Jafar Husain: But
the goal what we're doing and

63
00:02:51.050 --> 00:02:53.790
why we're talking about arrays at all,
is we're trying to take a data structure

64
00:02:53.790 --> 00:02:56.420
you guys are already familiar with and
feel comfortable with.

65
00:02:56.420 --> 00:02:59.510
And learn how to use these
functions over this data structure.

66
00:02:59.510 --> 00:03:01.360
Before we tackle a very different, but

67
00:03:01.360 --> 00:03:04.310
not so different, data structure
where we introduce asynchrony.

68
00:03:04.310 --> 00:03:05.314
So it's just arrays.

69
00:03:05.314 --> 00:03:05.919
&gt;&gt; Off Camera 2: Okay.
&gt;&gt; Jafar Husain: We can try

70
00:03:05.919 --> 00:03:06.543
this right now.

71
00:03:06.543 --> 00:03:07.351
&gt;&gt; Off Camera 2: I'm with you.

72
00:03:07.351 --> 00:03:11.495
&gt;&gt; Jafar Husain: So now I'm going to ask
you a question, which is what if I told

73
00:03:11.495 --> 00:03:16.330
you you could write nearly the same
code to build a drag and drop event.

74
00:03:16.330 --> 00:03:19.950
So I'm gonna show you a little preview of
what we're gonna be covering, and what you

75
00:03:19.950 --> 00:03:24.120
can do if you start to get good writing
programs with these few simple functions.

76
00:03:24.120 --> 00:03:26.400
You can take them and
not just use them for arrays, but

77
00:03:26.400 --> 00:03:29.520
also on asynchronous
data sources like events.

78
00:03:29.520 --> 00:03:32.080
So I want you guys to
look really carefully cuz

79
00:03:32.080 --> 00:03:33.350
if you blink you're gonna miss it.

80
00:03:33.350 --> 00:03:35.650
Okay, so here we are,
we're processing your favorite titles,

81
00:03:35.650 --> 00:03:39.310
and here is how you build a mouse drag.

82
00:03:42.220 --> 00:03:47.100
I want you to notice the structure
of this code is almost the same.

83
00:03:48.510 --> 00:03:49.370
What is a mouse drag?

84
00:03:50.750 --> 00:03:55.270
Well, it's all of the mouse moves
that happen between a mouse down and

85
00:03:55.270 --> 00:03:56.630
a mouse up, right?

86
00:03:57.790 --> 00:04:00.890
Imagine for
a second that events weren't this weird

87
00:04:00.890 --> 00:04:03.150
thing that you call with
an addEventListener or

88
00:04:03.150 --> 00:04:07.490
a removeEventListener, this sort of
quasi object hanging off of a DOM.

89
00:04:07.490 --> 00:04:12.000
What if they were first class values that
you could hold onto, just like arrays, and

90
00:04:12.000 --> 00:04:18.150
they had methods on them, just like map
and concatAll and filter for that matter?

91
00:04:18.150 --> 00:04:21.530
We could actually compose
together events to build new,

92
00:04:21.530 --> 00:04:24.470
more complex events using these methods.

93
00:04:24.470 --> 00:04:28.994
So imagine we have a collection of all
of the mouse downs on a DOM element

94
00:04:28.994 --> 00:04:30.692
from now until eternity.

95
00:04:30.692 --> 00:04:32.326
And we just map over it.

96
00:04:32.326 --> 00:04:35.296
And we map over all of the mouse
downs that happen on a DOM element,

97
00:04:35.296 --> 00:04:37.080
like a button for example.

98
00:04:37.080 --> 00:04:41.730
And every single time we get a mouse down,
we then return it, we map over it and

99
00:04:41.730 --> 00:04:42.980
for each mouse down,

100
00:04:42.980 --> 00:04:47.280
we return all of the mouse moves that
are detected on the document level.

101
00:04:47.280 --> 00:04:50.400
Reason why we list the document level is
we're looking for for bubbling, right?

102
00:04:50.400 --> 00:04:53.870
So when I start moving around the button,
my mouse might go faster than the button.

103
00:04:53.870 --> 00:04:56.820
And so by the time I've begun a drag
operation, we wanna be listening at

104
00:04:56.820 --> 00:05:00.100
the document level for mouse move just in
case my mouse gets ahead of the button so

105
00:05:00.100 --> 00:05:01.260
that we can move that button around.

106
00:05:01.260 --> 00:05:02.530
Hopefully that's clear.

107
00:05:02.530 --> 00:05:06.910
So we're literally replacing, cuz what
map is all about it's about replacing.

108
00:05:06.910 --> 00:05:09.720
So for every item in a collection
we wanna replace it with the result

109
00:05:09.720 --> 00:05:10.560
of this function.

110
00:05:10.560 --> 00:05:13.240
So in this case, we're replacing
the actual mouse down event.

111
00:05:13.240 --> 00:05:17.390
That little event object, you would get
if you did an add event listener with

112
00:05:17.390 --> 00:05:20.770
all of the mouse moves
from now until eternity.

113
00:05:20.770 --> 00:05:24.340
But instead of just returning that whole
collection, which would go on forever.

114
00:05:24.340 --> 00:05:28.570
In the previous example, we saw that we
use filter to take certain a collection

115
00:05:28.570 --> 00:05:30.700
and reduce the number
of items inside of it.

116
00:05:30.700 --> 00:05:34.460
Here we're gonna replace the filter
method with a takeUntil method.

117
00:05:34.460 --> 00:05:38.600
All that does is, it takes some stream and
another stream and

118
00:05:38.600 --> 00:05:41.200
it listens to the source of some
stream of information an event,

119
00:05:41.200 --> 00:05:46.020
mouse moves in this case,
until another stream fires.

120
00:05:46.020 --> 00:05:49.020
So I might be listening to a mouse
moves event and the mouse up event, and

121
00:05:49.020 --> 00:05:51.670
I'm just going to keep forwarding
on all those mouse moves,

122
00:05:51.670 --> 00:05:53.850
until the mouse up event happens and

123
00:05:53.850 --> 00:05:57.650
then I'm gonna unsubscribe from both
the mouse moves and the mouse up.

124
00:05:57.650 --> 00:05:58.864
So what we've done is create a collection.

125
00:05:58.864 --> 00:06:01.403
We've taken two collections
which go on for eternity, and

126
00:06:01.403 --> 00:06:04.010
we actually combined them to
create a collection that ends.

127
00:06:04.010 --> 00:06:07.107
Because we listen to one collection
until the other one fires and

128
00:06:07.107 --> 00:06:08.620
that's what takeUntil does.

129
00:06:08.620 --> 00:06:10.925
So just like filter reduced the number
of items in the collection,

130
00:06:10.925 --> 00:06:13.612
takeUntil reduces the number
of items in collection.

131
00:06:13.612 --> 00:06:17.100
What it does is it creates a collection
of all the mouse moves until

132
00:06:17.100 --> 00:06:20.180
the next mouse up and
then the whole collection ends.

133
00:06:20.180 --> 00:06:23.570
So for every single mouse
down we're gonna return,

134
00:06:23.570 --> 00:06:26.090
we're gonna replace that
mouseDown object in the stream,

135
00:06:26.090 --> 00:06:30.330
with another stream of all the mouse
moves until the next mouseUp.

136
00:06:30.330 --> 00:06:34.370
Now notice that I've taken every item
in the collection and I've replaced it

137
00:06:34.370 --> 00:06:37.790
with a collection, which means I have
how many dimensions of collection?

138
00:06:38.860 --> 00:06:40.560
So if I take one, two, three and

139
00:06:40.560 --> 00:06:45.750
then replace each one of those items with
another array, so I have an array of 5 6,

140
00:06:45.750 --> 00:06:51.060
an array of 9 7, and an array of 4 8,
how many dimensions is my collection?

141
00:06:51.060 --> 00:06:54.950
Two, right,
cuz every mouseDown object that we got

142
00:06:54.950 --> 00:06:58.620
we replace with a stream of all
the mouse moves until the next mouseUp.

143
00:06:58.620 --> 00:07:00.990
And so how do we flatten
a two dimensional collection?

144
00:07:02.240 --> 00:07:03.350
ConcatAll.

145
00:07:03.350 --> 00:07:04.373
Yep?
&gt;&gt; Off Camera 3: There's a question,

146
00:07:04.373 --> 00:07:05.940
where you concatAll come from?

147
00:07:05.940 --> 00:07:10.130
&gt;&gt; Jafar Husain: So contactAll
doesn't exist on the JavaScript array.

148
00:07:10.130 --> 00:07:12.740
We're going to write it ourselves later.

149
00:07:12.740 --> 00:07:16.210
And it does exist on this data type, the
magical data type I'm going to teach you

150
00:07:16.210 --> 00:07:19.530
about that lets you code this way, because
obvious this will work over arrays, right.

151
00:07:19.530 --> 00:07:23.450
You can't model an event as an array just
not possible to do in JavaScript because

152
00:07:23.450 --> 00:07:24.860
for one thing events go on forever, so

153
00:07:24.860 --> 00:07:26.720
you'd run out of memory if
you try to do that, right.

154
00:07:26.720 --> 00:07:30.930
So I'm going to teach you a new data type
later on with the exact same APIs that I'm

155
00:07:30.930 --> 00:07:32.700
going to teach you to use over arrays.

156
00:07:32.700 --> 00:07:36.700
And so we're going to introduce concatAll
onto array today in our exercises, and

157
00:07:36.700 --> 00:07:39.840
then later on we'll show you how to write
concatAll over the data type that I'm

158
00:07:39.840 --> 00:07:43.350
going to reveal to you very, very shortly,
which is what makes this possible.

159
00:07:43.350 --> 00:07:45.560
But we can see that
structurally at the same level,

160
00:07:45.560 --> 00:07:49.190
if we just think about events as a
collection, we should be able to do this.

161
00:07:49.190 --> 00:07:53.150
So the top half of the slide is all about
taking the events that we have in our

162
00:07:53.150 --> 00:07:55.630
system, the primitive events
that we have in our system, and

163
00:07:55.630 --> 00:07:59.350
composing them together to
create more complex events.

164
00:07:59.350 --> 00:08:01.190
Now this is something we do with
functions all the time, right?

165
00:08:01.190 --> 00:08:05.110
You take function A, function B, compose
them together to create function C.

166
00:08:05.110 --> 00:08:07.360
You create function C,
which calls A and B.

167
00:08:07.360 --> 00:08:10.220
But for some reason, when JavaScript
programmers do event-based programming,

168
00:08:10.220 --> 00:08:13.580
they don't do the same sort of
compositional style, and that's wrong.

169
00:08:13.580 --> 00:08:17.110
We should approach events with the same
sort of approach to composition

170
00:08:17.110 --> 00:08:18.460
that we do with functions.

171
00:08:18.460 --> 00:08:19.980
And that's I'm gonna teach
you how to do today.

172
00:08:19.980 --> 00:08:22.350
It's a very powerful technique for

173
00:08:22.350 --> 00:08:25.052
controlling the complexity
involved in asynchronous programs.

174
00:08:25.052 --> 00:08:27.540
I think you're gonna be really
shocked by what we're able to do

175
00:08:27.540 --> 00:08:29.250
with just a few simple functions.

176
00:08:29.250 --> 00:08:33.318
So the top half of the slide is just
creating the stream of mouse drags.

177
00:08:33.318 --> 00:08:37.186
It's actually creating, taking a function
which when given a Dom event, will

178
00:08:37.186 --> 00:08:41.060
return a stream of all of the future mouse
drags that happen on the DOM element.

179
00:08:41.060 --> 00:08:43.800
In other words, all the mouse
moves that happen between a mouse

180
00:08:43.800 --> 00:08:45.140
down and a mouse up.

181
00:08:45.140 --> 00:08:46.620
Now that's the top half of the side.

182
00:08:46.620 --> 00:08:50.250
All we've done is we've created
a stream when a function gets called.

183
00:08:50.250 --> 00:08:53.620
The bottom half of the slide
actually uses forEach

184
00:08:53.620 --> 00:08:59.020
to consume the data inside of
the stream and do something with it.

185
00:08:59.020 --> 00:09:01.130
Increasingly you're going
to see as you write code,

186
00:09:01.130 --> 00:09:04.090
your code will begin to
bifurcate into two parts.

187
00:09:04.090 --> 00:09:06.540
Building the collection that you want, and

188
00:09:06.540 --> 00:09:10.230
then consuming the data in that
collection and doing something with it.

189
00:09:10.230 --> 00:09:14.460
The bottom half of the slide is morally
equivalent to addEventListener.

190
00:09:14.460 --> 00:09:17.180
It turns out that adding
an event listener isn't so

191
00:09:17.180 --> 00:09:19.250
different than forEaching over an array.

192
00:09:19.250 --> 00:09:19.970
What are you really doing?

193
00:09:19.970 --> 00:09:23.120
You're just consuming each item in
a collection as it comes in and

194
00:09:23.120 --> 00:09:24.610
doing something with it.

195
00:09:24.610 --> 00:09:27.605
So here in this particular case we're
actually gonna move the position of

196
00:09:27.605 --> 00:09:29.529
the image, so
that it actually drags around.

197
00:09:29.529 --> 00:09:32.080
You're actually see this code in action
later on, it's pretty impressive.

