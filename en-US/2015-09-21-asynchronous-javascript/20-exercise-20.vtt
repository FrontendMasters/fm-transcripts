WEBVTT

1
00:00:00.055 --> 00:00:03.999
[MUSIC]

2
00:00:03.999 --> 00:00:07.497
&gt;&gt; Jafar Husain: So, we want to retrieve
the ID title and smallest box art URL for

3
00:00:07.497 --> 00:00:08.290
every video.

4
00:00:09.510 --> 00:00:13.831
So now let's put it all together map,
reduce, concat all.

5
00:00:13.831 --> 00:00:17.423
Okay, so I'm going to use concat maps.

6
00:00:17.423 --> 00:00:21.958
So for every movielist,
let's see if we can do this here.

7
00:00:24.846 --> 00:00:26.368
&gt;&gt; Jafar Husain: Return.

8
00:00:29.718 --> 00:00:32.450
&gt;&gt; Jafar Husain: So we're going to go
through each movielist, and then for

9
00:00:32.450 --> 00:00:35.030
each movielist we're going
to go through the videos.

10
00:00:35.030 --> 00:00:39.725
I'm going to keep mapping until I
get all of the variables I need

11
00:00:39.725 --> 00:00:41.331
bound to something.

12
00:00:45.693 --> 00:00:49.538
&gt;&gt; Jafar Husain: And
now video has a box art collection and

13
00:00:49.538 --> 00:00:52.817
in order to find the smallest one,

14
00:00:52.817 --> 00:00:57.810
I'm going to have to use reduce,
how do I know that?

15
00:00:57.810 --> 00:00:59.190
Because whenever you say smallest or

16
00:00:59.190 --> 00:01:01.410
largest you're implying
some sort of comparison.

17
00:01:01.410 --> 00:01:03.480
And whenever you're doing
some sort of comparison,

18
00:01:03.480 --> 00:01:06.170
you need to look at two
items at the same time.

19
00:01:06.170 --> 00:01:09.060
And reduce is the only function
that takes two arguments, right?

20
00:01:09.060 --> 00:01:10.370
Map doesn't, filter doesn't.

21
00:01:10.370 --> 00:01:13.490
Reduce accepts a function
that takes two arguments.

22
00:01:13.490 --> 00:01:16.830
So I'm going to call reduce
here on the box art.

23
00:01:16.830 --> 00:01:23.780
So, video.boxarts.reduce and we're going
to use cumulative value of current value.

24
00:01:23.780 --> 00:01:27.653
And I'm going to look for, does anybody
remember what the condition is?

25
00:01:30.154 --> 00:01:34.410
&gt;&gt; Jafar Husain: URL with the,
okay, smallest box art.

26
00:01:34.410 --> 00:01:37.796
So we just want to find the box
art that's the smallest,

27
00:01:37.796 --> 00:01:41.196
and it'll be very similar to
the code we wrote earlier.

28
00:01:55.883 --> 00:01:58.460
&gt;&gt; Jafar Husain: So if the accumulated
value is smaller, we return it.

29
00:01:58.460 --> 00:02:01.164
If the current value is smaller,
we return that.

30
00:02:06.565 --> 00:02:07.700
&gt;&gt; Jafar Husain: Got an extra
return statement, here.

31
00:02:10.326 --> 00:02:13.920
Now this subexpression right here
is going to return an array of one.

32
00:02:13.920 --> 00:02:15.140
An array of one box art.

33
00:02:15.140 --> 00:02:16.406
That's what reduce does, right?

34
00:02:16.406 --> 00:02:18.290
Give us an array of one item.

35
00:02:18.290 --> 00:02:21.859
And now, if I recall correctly,
it's my job to return.

36
00:02:30.143 --> 00:02:31.660
&gt;&gt; Jafar Husain: False box art.

37
00:02:31.660 --> 00:02:35.340
I'm not sure if I'm supposed
to return the, the URL, great.

38
00:02:36.400 --> 00:02:41.300
So I'm supposed to return the video ID and
title and the URL.

39
00:02:41.300 --> 00:02:44.940
So I'm actually going to bring
reduce down to the next level.

40
00:02:44.940 --> 00:02:49.940
Because as soon as I have more than one
function that I execute, I bring each one

41
00:02:49.940 --> 00:02:53.780
to its own line so that I can see which
ones are lined up against which object.

42
00:02:53.780 --> 00:02:56.650
So, I'm going to take a box art and

43
00:02:56.650 --> 00:02:59.400
now notice I have a variable
bound to the video.

44
00:02:59.400 --> 00:03:04.807
I have a variable bound to the box art and
I'm ready to create my result.

45
00:03:14.976 --> 00:03:17.143
&gt;&gt; Jafar Husain: And we're going to
pull out the URL of the box art.

46
00:03:27.728 --> 00:03:31.604
&gt;&gt; Jafar Husain: So I think Firefox has
some sort of problem with this code, but

47
00:03:31.604 --> 00:03:33.629
we'll see if it works anyways.

48
00:03:35.940 --> 00:03:39.800
And I end my map, my concatMap,

49
00:03:39.800 --> 00:03:44.030
there's a problem here which is
that I wanna use concatMap here.

50
00:03:44.030 --> 00:03:48.315
So very often you'll see concatMap,
concatMap, concatMap, map.

51
00:03:48.315 --> 00:03:53.515
Which mirrors the fact that normally it's
map, concatAll, map concatAll, map, right?

52
00:03:53.515 --> 00:03:55.865
In the end,
you don't need three concatAlls for

53
00:03:55.865 --> 00:03:57.075
a three dimensional collection.

54
00:03:57.075 --> 00:03:59.625
You need two concatAlls for
a three dimensional collection, right?

55
00:03:59.625 --> 00:04:02.165
Because that's when you flatten it
out by one dimension each time.

56
00:04:02.165 --> 00:04:03.545
So this should work and

57
00:04:03.545 --> 00:04:05.575
if it doesn't, we'll just show the answer
because it's the right answer.

58
00:04:08.910 --> 00:04:09.410
Great.

59
00:04:11.080 --> 00:04:14.000
So you keep mapping until you've got
a variable bound to everything you need

60
00:04:14.000 --> 00:04:15.400
to create your result.

61
00:04:15.400 --> 00:04:19.250
And then you figure out how deep you are,
and apply the right number of concatAlls.

62
00:04:19.250 --> 00:04:22.171
Or translate the right number of
maps into concatMaps, same thing.

