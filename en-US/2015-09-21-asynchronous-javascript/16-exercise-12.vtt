WEBVTT

1
00:00:00.000 --> 00:00:03.908
[MUSIC]

2
00:00:03.908 --> 00:00:06.273
&gt;&gt; Jafar: I want to talk to you
a little bit about exercise 12.

3
00:00:06.273 --> 00:00:09.743
Because exercise 12 you're gonna make the
first mental leap, first really important

4
00:00:09.743 --> 00:00:12.945
mental leap, in order to get really,
really good at asynchronous programming.

5
00:00:12.945 --> 00:00:16.929
So, first thing I want you to call your
attention to is that this is not allowed.

6
00:00:16.929 --> 00:00:18.785
When you fill out exercise 12,

7
00:00:18.785 --> 00:00:23.041
you're not allowed to pull a value out
of an array synchronously like this.

8
00:00:23.041 --> 00:00:25.423
Why would I put that kind
of restriction on you?

9
00:00:25.423 --> 00:00:28.080
&gt;&gt; Speaker 2: [INAUDIBLE]

10
00:00:28.080 --> 00:00:28.690
&gt;&gt; Jafar: Sorry?

11
00:00:28.690 --> 00:00:29.497
&gt;&gt; Speaker 2: Cuz we're learning

12
00:00:29.497 --> 00:00:31.545
asynchronous.
&gt;&gt; Jafar: Cuz we're learning asynchronous

13
00:00:31.545 --> 00:00:34.352
programming we're gonna limit
ourselves to only those operations,

14
00:00:34.352 --> 00:00:37.125
which will work not just on an array but
also on an observable as well.

15
00:00:37.125 --> 00:00:42.676
So go ahead, read that catch question
very carefully and give it a shot.

16
00:00:42.676 --> 00:00:45.144
And let me know once you pass exercise 12.

17
00:00:45.144 --> 00:00:47.275
Yes, question?
&gt;&gt; Speaker 3: There was a quick question

18
00:00:47.275 --> 00:00:49.553
on, just the order in doing things.

19
00:00:49.553 --> 00:00:50.959
Needed a map then a concat and

20
00:00:50.959 --> 00:00:53.692
then a map again?
&gt;&gt; Jafar: Which would totally because

21
00:00:53.692 --> 00:00:58.004
first he's using map to turn it into
an array of arrays cuz all he's

22
00:00:58.004 --> 00:01:00.172
returning is the, is the video.

23
00:01:00.172 --> 00:01:03.049
So the first time what he's,
what he's saying is that he did this.

24
00:01:03.049 --> 00:01:06.361
Which, which I wanna point out will work,
right?

25
00:01:06.361 --> 00:01:12.630
At the same time as you're
returning the videos,

26
00:01:12.630 --> 00:01:17.266
which turns into an array of arrays.

27
00:01:17.266 --> 00:01:20.485
You can also map that and
just return the IDs,

28
00:01:20.485 --> 00:01:23.495
right?
&gt;&gt; Speaker 3: I'm just wondering if it's

29
00:01:23.495 --> 00:01:25.590
less effective though
&gt;&gt; Jafar: But

30
00:01:25.590 --> 00:01:29.942
it is less efficient probably, I'm not
100% sure but less efficient enough and

31
00:01:29.942 --> 00:01:32.651
the idea it,
was actually in this particular case.

32
00:01:32.651 --> 00:01:36.456
Yes, it's almost certainly less efficient
with the rays because every single map

33
00:01:36.456 --> 00:01:39.826
operation start the beginning and
then traverses all the way down and so,

34
00:01:39.826 --> 00:01:43.711
if you're you're already going over the
array, be good to sort of do the transfer.

35
00:01:43.711 --> 00:01:45.118
I'm not a 100% sure in this case.

36
00:01:45.118 --> 00:01:48.794
If you're doing any filtering, certainly,
you wanna move filter operations up as

37
00:01:48.794 --> 00:01:51.953
early as possible because then all
subsequent operations don't need to

38
00:01:51.953 --> 00:01:55.238
process those items that you were
eventually going to filter out anyways.

39
00:01:55.238 --> 00:01:58.796
So in this particular case, yes, it is
probably less efficient because each time

40
00:01:58.796 --> 00:02:01.337
you call map,
you're also allocating a whole new array.

41
00:02:01.337 --> 00:02:05.473
[SOUND] How many people got done?

42
00:02:05.473 --> 00:02:08.065
It's not surprising.

43
00:02:08.065 --> 00:02:10.222
It's hard.
I didn't expect any to get that but

44
00:02:10.222 --> 00:02:14.002
I do wanna talk you through this process
because this is actually gonna be a big

45
00:02:14.002 --> 00:02:14.712
mental leap.

46
00:02:14.712 --> 00:02:18.236
One of the things that developers
are typically not comfortable with,

47
00:02:18.236 --> 00:02:20.124
is dealing with nested collections.

48
00:02:20.124 --> 00:02:23.348
Like our friend over there, the first
thing you tried to do was concatAll, so

49
00:02:23.348 --> 00:02:26.581
that you could get that two dimensional
down to one dimensional collection.

50
00:02:26.581 --> 00:02:29.109
Because it is just so
much easier to kind of deal with, right?

51
00:02:29.109 --> 00:02:31.258
We're not comfortable with
multidimensional collections for

52
00:02:31.258 --> 00:02:31.778
the most part.

53
00:02:31.778 --> 00:02:34.236
And that's what we have to become
comfortable with in order to do

54
00:02:34.236 --> 00:02:35.382
asynchronous programming.

55
00:02:35.382 --> 00:02:38.047
That's actually key to really
effective asynchronous programming.

56
00:02:38.047 --> 00:02:43.055
Being comfortable, basically having nested
map statements and effectively building

57
00:02:43.055 --> 00:02:47.869
trees all secure in the knowledge that you
can use concatAll to flatten it out again.

58
00:02:47.869 --> 00:02:49.604
You have to be comfortable doing that.

59
00:02:49.604 --> 00:02:51.800
So here's what most people do, so

60
00:02:51.800 --> 00:02:56.269
let's go over the problem here that
we wanna achieve the ID title, and

61
00:02:56.269 --> 00:03:00.816
the particular boxer,
that's 150 by 200 for every the array for

62
00:03:00.816 --> 00:03:06.080
the box at the 250 by 200 for every single
video in this array of movie lists.

63
00:03:06.080 --> 00:03:10.111
Right, so once again, we have an array
of movie less each of which contains.

64
00:03:10.111 --> 00:03:12.459
So here's our movie list, right?

65
00:03:12.459 --> 00:03:17.765
So we have instant queue,
and then your new releases.

66
00:03:17.765 --> 00:03:20.807
So, that's the outer array of movie list.

67
00:03:20.807 --> 00:03:26.047
Each one of which contains
an inner array of videos, right?

68
00:03:26.047 --> 00:03:29.076
So what we need to get is the ID title and

69
00:03:29.076 --> 00:03:34.773
box art that's only 150x200 for
each one of the videos in there.

70
00:03:34.773 --> 00:03:38.641
So, a nice flat array of ID title and
150x200 box art.

71
00:03:38.641 --> 00:03:43.747
So, let's try and solve it.
&gt;&gt; Jafar: Well,

72
00:03:43.747 --> 00:03:46.677
I'm gonna take the movie list and just
like last time, I'm gonna map over them.

73
00:03:46.677 --> 00:03:52.406
And that's gonna give me
an individual movie list,

74
00:03:52.406 --> 00:03:57.741
and then I am going to go ahead and
return the movie

75
00:03:57.741 --> 00:04:02.577
lists titles this time
I'm going to map it.

76
00:04:02.577 --> 00:04:05.018
Now I've got videos,
is it video or titles?

77
00:04:05.018 --> 00:04:14.762
Videos
&gt;&gt; Jafar: And

78
00:04:14.762 --> 00:04:20.734
I'm gonna return the ID
&gt;&gt; Jafar: Of the video,

79
00:04:20.734 --> 00:04:22.966
and return the title of the video.

80
00:04:22.966 --> 00:04:26.954
And now I need the box art, right?

81
00:04:26.954 --> 00:04:28.962
Now, I just need to grab
that smallest box art.

82
00:04:28.962 --> 00:04:32.979
So, let's just go through
the videos box art collections,

83
00:04:32.979 --> 00:04:37.961
let's spell box art we want the Earl
actually the 150 by 200 box art.

84
00:04:37.961 --> 00:04:43.208
So I'm gonna go video., if you look
at an actual video object notice that

85
00:04:43.208 --> 00:04:48.476
every video object has an array inside
of it of potential box arts, okay?

86
00:04:48.476 --> 00:04:51.760
So what I have to do,
is I have to find the box art,

87
00:04:51.760 --> 00:04:56.348
that's 150 by 200, right here and
I have to pull out its url.

88
00:04:56.348 --> 00:04:58.893
So, that shouldn't be too hard.

89
00:04:58.893 --> 00:05:02.282
It seems sorta like the map and filter
chain example that we did before, right?

90
00:05:02.282 --> 00:05:05.349
We're first filtering for
a box art that meets this conditions and

91
00:05:05.349 --> 00:05:07.662
then we're mapping and
pulling out only the url.

92
00:05:07.662 --> 00:05:15.483
So, let's write that right in line here.
&gt;&gt; Jafar: I'm

93
00:05:15.483 --> 00:05:18.079
gonna format this a little bit better,
so it's clearer what I'm doing.

94
00:05:18.079 --> 00:05:21.806
So first off,

95
00:05:21.806 --> 00:05:28.182
filter
&gt;&gt; Jafar: So,

96
00:05:28.182 --> 00:05:31.656
I'm looking for
the box art with the width of 150, was it?

97
00:05:31.656 --> 00:05:38.856
Yeah, and a height of 200.
&gt;&gt; Jafar: And once again,

98
00:05:38.856 --> 00:05:44.085
I'm gonna be careful about my formatting
because I want to keep things readable.

99
00:05:44.085 --> 00:05:46.036
Even though we're building
one long expression here,

100
00:05:46.036 --> 00:05:47.621
it doesn't mean that it can't be readable.

101
00:05:47.621 --> 00:05:51.115
And so as soon as I have
two verbs on a single noun,

102
00:05:51.115 --> 00:05:56.577
I put each on its own line,
&gt;&gt; Jafar: And

103
00:05:56.577 --> 00:05:57.991
I'm gonna return just the url.

104
00:05:57.991 --> 00:06:03.220
So now that I've narrowed the list
of box arts to only the one

105
00:06:03.220 --> 00:06:09.403
that has 150 by 200, all I wanna
do is pull out this url, right?

106
00:06:09.403 --> 00:06:18.685
So, think we're pretty much there.
&gt;&gt; Jafar: Show

107
00:06:18.685 --> 00:06:20.178
you the right number of parenthesis.

108
00:06:20.178 --> 00:06:25.695
Okay.
&gt;&gt; Speaker 3: Others saying, the id.video,

109
00:06:25.695 --> 00:06:29.787
id.video.id.title.video.title
&gt;&gt; Jafar: Thank you.

110
00:06:29.787 --> 00:06:35.357
Perfect, and
now I think if it's anything like the last

111
00:06:35.357 --> 00:06:40.215
example all I really have
to do is use concatAll,

112
00:06:40.215 --> 00:06:46.280
to take this two dimensional
collection and flatten it out.

113
00:06:46.280 --> 00:06:52.311
[SOUND] Whoa [SOUND] Right,

114
00:06:52.311 --> 00:06:56.906
so I have movie list

115
00:06:56.906 --> 00:07:01.214
which is a noun and

116
00:07:01.214 --> 00:07:08.969
I'm applying multiple verbs,

117
00:07:08.969 --> 00:07:15.592
multiple functions to it.

118
00:07:15.592 --> 00:07:18.234
So as soon as I have multiple,
I put them each of them on their own line.

119
00:07:18.234 --> 00:07:23.168
And then within each video in the movie
list, I'm mapping that into JSON object,

120
00:07:23.168 --> 00:07:27.529
little JavaScript object here and
I'm pulling out the id, the title and

121
00:07:27.529 --> 00:07:28.337
the box art.

122
00:07:28.337 --> 00:07:32.616
In order to get the box art, I'm filtering
all the box arts in the video and

123
00:07:32.616 --> 00:07:36.294
I'm grabbing only the one with
the width of a 150 by 200.

124
00:07:36.294 --> 00:07:39.303
And then,
I'm using map to just pull out its url.

125
00:07:39.303 --> 00:07:42.215
So, it feels like we're
pretty much done here.

126
00:07:42.215 --> 00:07:44.319
All I need to do is run it.

127
00:07:44.319 --> 00:07:49.038
Well that's a problem, property list.

128
00:07:53.288 --> 00:07:54.158
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Jafar: What's that sir?

129
00:07:54.158 --> 00:07:54.919
&gt;&gt; Speaker 2: You have to concat

130
00:07:54.919 --> 00:07:57.224
one more time.
&gt;&gt; Jafar: What, do I?

131
00:07:57.224 --> 00:07:59.295
Yeah, I think you're right, I do.

132
00:07:59.295 --> 00:08:04.258
But I'll get into that in just a moment,
and that's actually kind of

133
00:08:04.258 --> 00:08:09.563
what I want to highlight, but I think
there's also a syntax error here and

134
00:08:09.563 --> 00:08:14.357
specifically here believes is that.
&gt;&gt; Speaker 4: I think you don't need

135
00:08:14.357 --> 00:08:19.027
that semicolon after map.
&gt;&gt; Jafar: Do I have, thank you.

136
00:08:19.027 --> 00:08:20.671
That was the source of the problem.

137
00:08:20.671 --> 00:08:22.939
Now, I've got a missing argument list.

138
00:08:37.022 --> 00:08:37.839
&gt;&gt; Jafar: Bear with me.

139
00:08:37.839 --> 00:08:42.253
Into the map function,
into the other map function,

140
00:08:46.696 --> 00:08:47.970
&gt;&gt; Jafar: Anybody spot my error here?

141
00:08:57.826 --> 00:08:58.442
&gt;&gt; Jafar: Try and make this

142
00:08:58.442 --> 00:08:59.153
a little bit more.

143
00:09:03.720 --> 00:09:12.190
&gt;&gt; Speaker 5: [INAUDIBLE]

144
00:09:12.190 --> 00:09:12.740
&gt;&gt; Jafar: That's correct.

145
00:09:12.740 --> 00:09:15.103
&gt;&gt; Speaker 5: And now that you've still

146
00:09:15.103 --> 00:09:16.797
have an array.
&gt;&gt; Jafar: Yep, so

147
00:09:16.797 --> 00:09:18.813
what you have hit on what I
actually wanted to hit on here,

148
00:09:18.813 --> 00:09:21.345
I'm not sure what the syntax errors,
won't spend too much time on it.

149
00:09:21.345 --> 00:09:26.577
but now that we're sure that isn't
the right answer and it's not the right

150
00:09:26.577 --> 00:09:31.409
answer my syntax error side because
box are disposed to be just a url.

151
00:09:31.409 --> 00:09:34.882
Notice here, box are supposed to
be just the URL these results but

152
00:09:34.882 --> 00:09:36.665
it's not how do I know it's not?

153
00:09:36.665 --> 00:09:40.299
Well, it's the result of
the filter that function,

154
00:09:40.299 --> 00:09:44.814
what is a filter return?
&gt;&gt; Jafar: An array.

155
00:09:44.814 --> 00:09:46.847
What is map return?
&gt;&gt; Speaker 5: An array.

156
00:09:46.847 --> 00:09:48.162
&gt;&gt; Jafar: Right, so box art is actually

157
00:09:48.162 --> 00:09:49.114
going to be an array.

158
00:09:49.114 --> 00:09:52.097
If this program runs correctly,
if I can get it to run correctly,

159
00:09:52.097 --> 00:09:54.386
it's actually gonna to be
an array of the box art.

160
00:09:54.386 --> 00:09:58.246
Does that makes sense?

161
00:09:58.246 --> 00:10:02.376
So what we need to do is somehow get
the array-ness off of that box art,

162
00:10:02.376 --> 00:10:06.442
and the logical thing to do and
I think a lot of us would love to just do-

163
00:10:06.442 --> 00:10:08.099
&gt;&gt; Speaker 5: Bracket zero.

164
00:10:08.099 --> 00:10:08.899
&gt;&gt; Jafar: Bracket zero.

165
00:10:08.899 --> 00:10:12.627
That very thing that I stubbornly
told you you could not do, right?

166
00:10:12.627 --> 00:10:14.195
So, what's the answer?

167
00:10:14.195 --> 00:10:17.643
What are we really doing when we do

168
00:10:17.643 --> 00:10:22.937
this?
&gt;&gt; Jafar: We're

169
00:10:22.937 --> 00:10:26.097
binding a variable to an item
inside of a collection.

170
00:10:26.097 --> 00:10:29.069
What I mean when I say bind,
is now whatever's in the first

171
00:10:29.069 --> 00:10:33.328
item position in that array, we can now
refer to using that variable name, right?

172
00:10:33.328 --> 00:10:35.377
Well, there's another way
that you can do that.

173
00:10:35.377 --> 00:10:41.222
If I want to bind a variable to every
item in a collection, I can use,

174
00:10:41.222 --> 00:10:46.781
[SOUND] I just type it right here
even though it's crazy, [SOUND].

175
00:10:46.781 --> 00:10:47.606
What have I done when I do this?

176
00:10:47.606 --> 00:10:53.230
I've bound x to every item
in a collection, right?

177
00:10:53.230 --> 00:10:56.062
This is the asynchronous equivalent of

178
00:10:56.062 --> 00:11:00.073
this,
&gt;&gt; Jafar: If there are just two ways of

179
00:11:00.073 --> 00:11:00.710
doing the same thing.

180
00:11:00.710 --> 00:11:03.564
Right now,
I can refer inside that function any way,

181
00:11:03.564 --> 00:11:06.999
x is every item in that collection and
I can do something with it.

182
00:11:06.999 --> 00:11:09.924
So what I'm missing,
what I'm actually missing,

183
00:11:09.924 --> 00:11:13.186
the problem is I'm trying to
create this object too soon.

184
00:11:13.186 --> 00:11:18.058
What you've gotta do, is you've
gotta keep using map until you've

185
00:11:18.058 --> 00:11:21.755
introduced all, so
notice here, I've used map and

186
00:11:21.755 --> 00:11:26.142
I've brought these identifier,
this variable into scope.

187
00:11:26.142 --> 00:11:31.343
Because I've bound video to each of
the videos in the movie list collection,

188
00:11:31.343 --> 00:11:35.583
but I'm not done yet
because I actually need one more binding,

189
00:11:35.583 --> 00:11:39.983
I need to bind box art to the one box
art inside of that video that has

190
00:11:39.983 --> 00:11:42.886
the width the 150 by 200 and the url.

191
00:11:42.886 --> 00:11:46.048
So what I am gonna do is instead
of creating the object so early,

192
00:11:46.048 --> 00:11:48.867
which is a rookie move,
I'm gonna go video.boxarts.

193
00:11:48.867 --> 00:11:51.639
I'm gonna move all of this stuff up here.

194
00:11:56.946 --> 00:11:58.731
&gt;&gt; Jafar: Now I want you to notice,

195
00:11:58.731 --> 00:12:02.131
right here inside of this function,
that now,

196
00:12:02.131 --> 00:12:05.364
I have everything I need
to create my result.

197
00:12:05.364 --> 00:12:10.172
Because I've brought in the box art,
which is now bound to this box art

198
00:12:10.172 --> 00:12:14.102
object right here, in the scope so
that I can refer to it.

199
00:12:14.102 --> 00:12:19.263
I'm gonna write out the answer and
hopefully will become clear what I did

200
00:12:19.263 --> 00:12:27.020
here.
&gt;&gt; Jafar: So,

201
00:12:27.020 --> 00:12:29.809
now I'm ready cuz I've
got everything I need.

202
00:12:29.809 --> 00:12:31.163
I've got video up here in the closure.

203
00:12:31.163 --> 00:12:33.647
I've got box art up here in the closure.

204
00:12:42.074 --> 00:12:42.608
&gt;&gt; Jafar: The title.

205
00:12:52.167 --> 00:12:54.328
&gt;&gt; Jafar: So through the magic of closure

206
00:12:54.328 --> 00:12:57.493
scope, I brought in all
the data that I need.

207
00:12:57.493 --> 00:13:01.533
Now, that can kind of get
a little complicated.

208
00:13:01.533 --> 00:13:03.805
I mean, how many levels deep am I now?

209
00:13:03.805 --> 00:13:11.196
How many levels deep is this collection?
&gt;&gt; Jafar: For every

210
00:13:11.196 --> 00:13:16.248
movieList we're returning a collection-
&gt;&gt; Speaker 5: Four levels.

211
00:13:16.248 --> 00:13:16.863
&gt;&gt; Jafar: Four levels?

212
00:13:16.863 --> 00:13:17.737
I hear four, anybody got anything else?

213
00:13:17.737 --> 00:13:19.757
I feel like an auctioneer up here.

214
00:13:19.757 --> 00:13:21.410
Anybody got two?
&gt;&gt; Speaker 5: [LAUGH]

215
00:13:21.410 --> 00:13:23.030
&gt;&gt; Jafar: Three?

216
00:13:23.030 --> 00:13:24.471
&gt;&gt; Speaker 5: Three, I guess.

217
00:13:24.471 --> 00:13:24.980
&gt;&gt; Jafar: It's three.

218
00:13:24.980 --> 00:13:30.396
It's three, because for every movieList,
I'm returning a collection.

219
00:13:30.396 --> 00:13:34.872
But for each one of those videos,
I'm returning another collection.

220
00:13:34.872 --> 00:13:38.481
So, I have three levels
deep of collection here.

221
00:13:38.481 --> 00:13:42.729
Which isn't crazy because I started with
a three dimensional collection, right?

222
00:13:42.729 --> 00:13:46.619
We nested our maps until we got
another three dimensional collection.

223
00:13:46.619 --> 00:13:50.487
So now all I need to do is,
I need to go from this three dimensional

224
00:13:50.487 --> 00:13:53.579
collection down to a one
dimensional collection.

225
00:13:53.579 --> 00:13:54.643
So the point is,

226
00:13:54.643 --> 00:13:59.750
we shouldn't be afraid of getting
ourselves into a deeply nested collection.

227
00:13:59.750 --> 00:14:04.083
It's oka, because we can always fall back
on our flattening operators to flatten it

228
00:14:04.083 --> 00:14:06.230
back out no one dimensional collection.

229
00:14:06.230 --> 00:14:09.695
So if I, see me a get my brackets right.

230
00:14:09.695 --> 00:14:14.241
If I do this, I've now taken the two
dimensional collection and I flatten it

231
00:14:14.241 --> 00:14:23.139
into a one dimensional question.
&gt;&gt; Jafar: I'm

232
00:14:23.139 --> 00:14:24.483
actually gonna change
my formatting as I go.

233
00:14:24.483 --> 00:14:28.479
Because as soon as I add two
operators to a single object,

234
00:14:28.479 --> 00:14:30.818
I each put them on their own line.

235
00:14:30.818 --> 00:14:33.577
And the same thing applies,
now I flatten it to a two dimensional

236
00:14:33.577 --> 00:14:40.725
collection.
&gt;&gt; Jafar: And

237
00:14:40.725 --> 00:14:45.127
we're down to a one dimensional
collection, some have run this,

238
00:14:45.127 --> 00:14:46.552
hopefully it works.

239
00:14:46.552 --> 00:14:50.020
Still missing that are for the argument
that some of the mistype something some or

240
00:14:50.020 --> 00:14:53.036
some of the cheat and show answer but
I sure to look very much like this.

241
00:14:53.036 --> 00:14:55.524
Except with long functions unfortunately.

242
00:15:06.754 --> 00:15:07.606
&gt;&gt; Jafar: So I mapped over all

243
00:15:07.606 --> 00:15:10.914
the movieLists that I'm up,
over all the videos within that movieList.

244
00:15:10.914 --> 00:15:14.107
For each one of those videos,
I map over the box arts.

245
00:15:14.107 --> 00:15:16.883
Well, first I filter them for
only the ones with with the 150.

246
00:15:16.883 --> 00:15:20.334
It should have a 200 check there also and
then I map it.

247
00:15:20.334 --> 00:15:24.250
Now, that I've got all the information
I need introduced by the closure scope,

248
00:15:24.250 --> 00:15:25.814
I'm ready to create my result.

249
00:15:25.814 --> 00:15:27.354
And that's what you have to do.

250
00:15:27.354 --> 00:15:31.656
You have to keep mapping until you have
a variable bound to every value you need

251
00:15:31.656 --> 00:15:32.990
to create your result.

252
00:15:32.990 --> 00:15:35.718
And once you got to that point,
amounts easy.

253
00:15:35.718 --> 00:15:40.211
You just have to figure out how deep you
are and apply n minus one concatAll.

254
00:15:40.211 --> 00:15:42.986
So, I've created a three
dimension deep collection.

255
00:15:42.986 --> 00:15:45.733
So, I just need two concatAll's
to flatten it out again.

256
00:15:45.733 --> 00:15:49.101
So keep mapping until everything
you need is introduced,

257
00:15:49.101 --> 00:15:51.103
is down to a variable by a closure.

258
00:15:51.103 --> 00:15:56.454
Create your result and figure out how deep
you are and then flatten by n minus one.

259
00:15:56.454 --> 00:15:59.146
So, you're gonna be doing
this all over the place.

260
00:15:59.146 --> 00:15:59.915
Yep.
&gt;&gt; Speaker 6: So,

261
00:15:59.915 --> 00:16:03.307
could you create out of the pyramid
structure with this if you kept going?

262
00:16:03.307 --> 00:16:04.195
&gt;&gt; Jafar: Definitely.

263
00:16:04.195 --> 00:16:05.639
You will create a pyramid structure.

264
00:16:05.639 --> 00:16:09.499
Does anybody think that's a bad thing?
&gt;&gt; Speaker 7: What's a pyramid structure?

265
00:16:09.499 --> 00:16:10.627
&gt;&gt; Jafar: A pyramid structure is what

266
00:16:10.627 --> 00:16:13.970
he's pointing out here which is that you
see that the code kind of goes like this.

267
00:16:13.970 --> 00:16:15.969
Right, it goes like that.

268
00:16:15.969 --> 00:16:17.906
Anybody ever heard
the expression pyramid of doom?

269
00:16:17.906 --> 00:16:20.147
We have one person there.

270
00:16:20.147 --> 00:16:22.020
If you've done any node programming,

271
00:16:22.020 --> 00:16:25.593
you very often end up with this type of
nested callback, is a node in order to

272
00:16:25.593 --> 00:16:29.225
do one thing after another thing, you
have to nested inside of call backs and

273
00:16:29.225 --> 00:16:32.492
you end up with what some node
programmers call the pyramid of doom.

274
00:16:32.492 --> 00:16:36.424
This nesting is not a problem but
it's really actually nothing wrong or

275
00:16:36.424 --> 00:16:37.810
bad about this nesting.

276
00:16:37.810 --> 00:16:40.671
One of the problems with Node JS when you
do this nesting, is that because they

277
00:16:40.671 --> 00:16:43.723
don't have observable and they don't use
promises and they just use callbacks.

278
00:16:43.723 --> 00:16:45.956
One of the real problems
with the pyramid of doom,

279
00:16:45.956 --> 00:16:47.934
is that you have to
manually handle errors.

280
00:16:47.934 --> 00:16:50.879
You have to manually
forward errors up yourself.

281
00:16:50.879 --> 00:16:54.002
And so that's why pyramid of doom
is very damaging in Node JS.

282
00:16:54.002 --> 00:16:57.482
Because if you can be like seven levels of
callback deep and something goes wrong and

283
00:16:57.482 --> 00:16:59.621
you can actually correctly
clean about yourself,

284
00:16:59.621 --> 00:17:01.427
you are a much smarter
developer than I am.

285
00:17:01.427 --> 00:17:05.679
Observable will automatically forward
errors for you, if an error occurs

286
00:17:05.679 --> 00:17:10.145
anywhere in here arrays, we can count
on throw automatically doing it for us.

287
00:17:10.145 --> 00:17:12.822
But in the world of observed
with asynchronous programming,

288
00:17:12.822 --> 00:17:16.425
observable will forward on any errors in
any of these observable inner observables

289
00:17:16.425 --> 00:17:19.478
up to the top so that you can catch
them in one place just like try catch.

290
00:17:19.478 --> 00:17:23.391
And so you shouldn't be afraid of nesting,
the key is not to avoid nesting.

291
00:17:23.391 --> 00:17:27.392
The key is to get really good with your
code formatting, so that you can make sure

292
00:17:27.392 --> 00:17:30.752
that your code stays readable even
at multiple levels of nesting.

293
00:17:30.752 --> 00:17:33.468
I mean you've probably nested three for
loops, right?

294
00:17:33.468 --> 00:17:35.579
That's not a terribly crazy idea.

295
00:17:35.579 --> 00:17:38.880
Very often you don't see yourself more
than three or four levels nested.

296
00:17:38.880 --> 00:17:43.033
So if you can nest three for loops, you've
got exactly the same number of scopes here

297
00:17:43.033 --> 00:17:49.926
as if we nested three MFs.
&gt;&gt; Jafar: So,

298
00:17:49.926 --> 00:17:53.166
that's the key to solving
the next x number of exercises.

299
00:17:53.166 --> 00:17:54.635
It's always the same thing.

300
00:17:54.635 --> 00:17:58.067
Keep nesting map expressions until you
have a variable bound to everything you

301
00:17:58.067 --> 00:17:59.316
need to create your result.

302
00:17:59.316 --> 00:18:02.331
When you've got a variable bound to
everything you need to create your result,

303
00:18:02.331 --> 00:18:04.005
you know you can stop, return that result.

304
00:18:04.005 --> 00:18:09.160
And then figure out how deep you are apply
n minus one concatAlls and you're good.

