WEBVTT

1
00:00:00.000 --> 00:00:03.662
[MUSIC]

2
00:00:03.662 --> 00:00:06.161
&gt;&gt; Jafar Husain: So one of the things you
guys are going to get more comfortable

3
00:00:06.161 --> 00:00:09.050
with as we do this is dealing with
multi-dimensional collections.

4
00:00:09.050 --> 00:00:12.293
In fact what you're going to
be doing is you're going to be

5
00:00:12.293 --> 00:00:14.611
building many dimension collections and

6
00:00:14.611 --> 00:00:18.796
then applying the right number of
flattens to flatten it back out into one.

7
00:00:18.796 --> 00:00:22.455
And then calling for each and that is what
the exercise you're going to be doing

8
00:00:22.455 --> 00:00:25.127
today are going to be drilling again and
again and again.

9
00:00:25.127 --> 00:00:29.199
I'm gonna keep mapping, keep building
nested collections until I've got all

10
00:00:29.199 --> 00:00:31.640
the data that I need in
scope through a closure.

11
00:00:31.640 --> 00:00:34.180
So notice I've got,
well this is a bad example of that, but

12
00:00:34.180 --> 00:00:35.510
that's what you'll be doing.

13
00:00:35.510 --> 00:00:38.995
And then you'll be applying the right
flattening strategy the right number of

14
00:00:38.995 --> 00:00:41.860
times to flatten it out into
a nice flattened collection again.

15
00:00:41.860 --> 00:00:43.600
And then forEach over the result.

16
00:00:43.600 --> 00:00:45.920
That is not a skill that comes
naturally to most people.

17
00:00:45.920 --> 00:00:48.280
It needs to be drilled,
it needs to be repeated.

18
00:00:48.280 --> 00:00:51.110
But once you've got it, you're only
gonna be learning five functions.

19
00:00:51.110 --> 00:00:53.807
And you're gonna get the hang
of this way of programming.

20
00:00:53.807 --> 00:00:56.750
And you're gonna be able to
apply it in a lot of places.

21
00:00:56.750 --> 00:00:59.910
Maybe unexpected places, places even
beyond asynchronous programming.

22
00:00:59.910 --> 00:01:01.600
So I'm really excited about that.

23
00:01:02.630 --> 00:01:04.210
So I'm gonna go with over one example.

24
00:01:04.210 --> 00:01:06.630
We're just gonna bump it
up to three dimensions now.

25
00:01:06.630 --> 00:01:08.020
So the Netflix player.

26
00:01:08.020 --> 00:01:10.450
Come on you can do this right
let's take a look at this

27
00:01:10.450 --> 00:01:12.990
hornet's nest of code that I used to have.

28
00:01:12.990 --> 00:01:17.034
Right we saw this earlier this is
the battle way of doing things right.

29
00:01:17.034 --> 00:01:20.223
We have a asynchronous program
of the bunch of callbacks and

30
00:01:20.223 --> 00:01:22.148
a bunch of state and all that stuff.

31
00:01:22.148 --> 00:01:25.430
And we're gonna replace it with this.

32
00:01:26.460 --> 00:01:28.880
So what are the collections I have?

33
00:01:29.900 --> 00:01:31.700
What collection do I want?

34
00:01:31.700 --> 00:01:33.660
And how am I gonna to get from A to B?

35
00:01:33.660 --> 00:01:36.773
So what the collections I have
are that somebody clicked play.

36
00:01:36.773 --> 00:01:39.304
Another collection is that
somebody hits cancel.

37
00:01:39.304 --> 00:01:43.000
Another collection is that we
successfully authorized a movie request.

38
00:01:43.000 --> 00:01:45.600
That's an observable of one that
comes back from the server.

39
00:01:45.600 --> 00:01:47.762
Another collection is,
I think that's it, actually.

40
00:01:47.762 --> 00:01:52.110
So, another collection is that
the player is initialized.

41
00:01:52.110 --> 00:01:55.638
So the player could initialize
asynchronously, we could asynchronously

42
00:01:55.638 --> 00:01:59.509
authorize a movie request, somebody could
hit a cancel button asynchronously.

43
00:01:59.509 --> 00:02:01.660
I think those are the three ones.

44
00:02:01.660 --> 00:02:02.250
Yes.

45
00:02:02.250 --> 00:02:03.500
Those are the three collections.

46
00:02:03.500 --> 00:02:07.610
So, if I express all those as observables
I can use these methods to compose them

47
00:02:07.610 --> 00:02:12.640
together into the collection I want,
which is, movies to play.

48
00:02:12.640 --> 00:02:15.730
I as the UI developer just wanna
create a nice little event that says,

49
00:02:15.730 --> 00:02:17.790
play this movie play this movie,
play this movie.

50
00:02:17.790 --> 00:02:21.160
And then I'll forEach over it and
I'll play the movie.

51
00:02:21.160 --> 00:02:24.462
So what I've created is a stream
of authorized movie ID's.

52
00:02:24.462 --> 00:02:27.586
Movie ID's that were successfully
authorized that some user tried to play

53
00:02:27.586 --> 00:02:31.410
and once they're authorized I actually
want to go ahead and play them.

54
00:02:31.410 --> 00:02:34.110
So we start with player dot init.

55
00:02:34.110 --> 00:02:37.544
Player dot init just returns
observable that fires a single

56
00:02:37.544 --> 00:02:40.988
value on next when it actually
successfully initializes.

57
00:02:40.988 --> 00:02:43.483
Does that makes sense?

58
00:02:43.483 --> 00:02:46.090
Such an observable one just
like thing that network across.

59
00:02:46.090 --> 00:02:49.061
I call player dot init and
that could be back in observable and

60
00:02:49.061 --> 00:02:52.905
that observable actually technically
when I call init it's gonna give me back

61
00:02:52.905 --> 00:02:55.280
an observable that does
absolutely nothing.

62
00:02:55.280 --> 00:02:56.020
Nothing's happened.

63
00:02:56.020 --> 00:02:58.710
All I've done is create an observable,
observables are lazy.

64
00:02:58.710 --> 00:03:02.096
So it's going to wait until I four each
over that observable to actually try and

65
00:03:02.096 --> 00:03:04.574
initialize the player and
then it's going to complete.

66
00:03:04.574 --> 00:03:08.463
After on nexting some sentinel value like
true like I finished as soon as that

67
00:03:08.463 --> 00:03:09.751
player is initialized.

68
00:03:09.751 --> 00:03:10.600
Does that makes sense?

69
00:03:12.720 --> 00:03:15.244
So I call player dot init,
it gives me an observable,

70
00:03:15.244 --> 00:03:17.836
not a damn thing has happened
then I call for each on it.

71
00:03:17.836 --> 00:03:20.101
It actually then tries to
initialize the player and

72
00:03:20.101 --> 00:03:23.526
once that player successfully initialized
it's going to call on next give me

73
00:03:23.526 --> 00:03:26.280
some value like true and
then immediately call on completed.

74
00:03:27.680 --> 00:03:29.710
Does that make sense?

75
00:03:29.710 --> 00:03:31.460
I'm gonna map over that observable.

76
00:03:31.460 --> 00:03:32.760
Notice it's an observable of one.

77
00:03:32.760 --> 00:03:34.153
I don't care.
I'm still gonna map over it.

78
00:03:34.153 --> 00:03:36.907
And when I get that value of true,
which I don't really care about, so

79
00:03:36.907 --> 00:03:38.880
my function accepts no arguments.

80
00:03:38.880 --> 00:03:43.000
I'm gonna then listen to all
of the attempts to play.

81
00:03:43.000 --> 00:03:45.090
All of the user's
attempts to play forever.

82
00:03:45.090 --> 00:03:47.697
So this actually gonna happened
at startup I'm gonna do this,

83
00:03:47.697 --> 00:03:50.352
I'm gonna first listen for
the player to start initializing and

84
00:03:50.352 --> 00:03:53.663
then all future attempts to play the
movie, I'm gonna listen for this stream.

85
00:03:53.663 --> 00:03:56.850
That just means a click on
the play button on the player.

86
00:03:56.850 --> 00:03:59.808
I'm just taken that click, that DOM event,
and I've adapted into an observable,

87
00:03:59.808 --> 00:04:02.198
using observable frontend, so
that's what player attempts are.

88
00:04:02.198 --> 00:04:03.515
I'm going to map over all those and

89
00:04:03.515 --> 00:04:06.610
that's just a stream of movie
IDs that they try and click.

90
00:04:06.610 --> 00:04:09.400
So, if they try to click Die Hard what
might come out is two, six, two, nine,

91
00:04:09.400 --> 00:04:12.040
five, they try to like House
of Cards five, two, nine, one.

92
00:04:13.650 --> 00:04:17.236
Then I'm going to call player.authorize
which is actually going to make a request

93
00:04:17.236 --> 00:04:19.538
to the server and
just make sure that we can actually,

94
00:04:19.538 --> 00:04:21.141
you're allowed to play this movie.

95
00:04:21.141 --> 00:04:23.063
Cuz you're logged in and
that type of thing, right.

96
00:04:23.063 --> 00:04:24.188
You're allowed to play the movie.

97
00:04:24.188 --> 00:04:28.143
And it's going to come back
with a decryption key.

98
00:04:28.143 --> 00:04:33.683
So we're going to take that stream of play
attempts of movie IDs and we're going to

99
00:04:33.683 --> 00:04:39.089
map it into a stream of actual decryption
keys that we retrieve from the server.

100
00:04:39.089 --> 00:04:40.840
Does that make sense?

101
00:04:40.840 --> 00:04:42.420
That's just simple substitution.

102
00:04:42.420 --> 00:04:44.690
For every movie ID we substituted for

103
00:04:44.690 --> 00:04:49.570
a network request to get
back a decryption key.

104
00:04:49.570 --> 00:04:51.780
So now how many levels deep are we?

105
00:04:51.780 --> 00:04:53.270
I think we're three levels deep.

106
00:04:53.270 --> 00:04:56.278
Because for every player initialization,
even though there's only gonna be one.

107
00:04:56.278 --> 00:04:59.564
We're going to listen to all the play
attempts, but for every play attempt we're

108
00:04:59.564 --> 00:05:03.380
going to issue a network request that'll
actually resolve with the decryption key.

109
00:05:03.380 --> 00:05:04.750
So we're three levels deep.

110
00:05:04.750 --> 00:05:05.400
And how do I know that?

111
00:05:05.400 --> 00:05:08.450
Well, every single map function is
returning another observable here.

112
00:05:08.450 --> 00:05:12.090
We have two map functions, each of
which is returning another observable.

113
00:05:12.090 --> 00:05:14.970
So if the function paths to map
returns another observable you

114
00:05:14.970 --> 00:05:17.270
know you're deepening
the collection by one level.

115
00:05:17.270 --> 00:05:20.960
So we have a three dimensional observable
and that means we need at least two

116
00:05:20.960 --> 00:05:24.540
flattening operations to flatten it back
out into a one dimensional observable.

117
00:05:24.540 --> 00:05:26.380
So I always glance down
there at the bottom and

118
00:05:26.380 --> 00:05:28.540
notice that there's two concatAlls.

119
00:05:28.540 --> 00:05:31.753
So we've built a three dimensional
observable we applied to flattens to it

120
00:05:31.753 --> 00:05:33.949
and we ended up with a one
dimensional observable.

121
00:05:33.949 --> 00:05:36.936
And then at the end we just listen
to all the authorizations and

122
00:05:36.936 --> 00:05:38.842
we just play it now I know I've got the.

123
00:05:38.842 --> 00:05:42.737
So the authorizations is actually a stream
of that license that you see there is

124
00:05:42.737 --> 00:05:44.575
actually the movie decryption key.

125
00:05:44.575 --> 00:05:47.395
So I'm just slurping up the movie
decryption keys as they come along and

126
00:05:47.395 --> 00:05:49.656
then I'm saying the player go
ahead now play this title.

127
00:05:49.656 --> 00:05:50.437
Yeah.

128
00:05:50.437 --> 00:05:55.740
&gt;&gt; Speaker 2: Two questions, one is
cancels a custom stream that you made?

129
00:05:55.740 --> 00:05:58.960
&gt;&gt; Jafar Husain: Yes, that's literally
the cancel button or the back button, for

130
00:05:58.960 --> 00:06:01.773
example, that I've adapted
using Observable.frontend.

131
00:06:01.773 --> 00:06:04.760
&gt;&gt; Speaker 2: And then Observable.empty,
what does that do?

132
00:06:04.760 --> 00:06:06.260
&gt;&gt; Jafar Husain: Good question.

133
00:06:06.260 --> 00:06:10.790
So just like you can now observables error
and so just like in in your language where

134
00:06:10.790 --> 00:06:13.820
you have things like try catch you want
to be able to handle those errors.

135
00:06:13.820 --> 00:06:15.360
Right.
If an observable errors you don't

136
00:06:15.360 --> 00:06:17.910
always wanna complete the stream
immediately, they're just like in

137
00:06:17.910 --> 00:06:21.150
synchronous programming, you can sometimes
catch errors and do something about them.

138
00:06:21.150 --> 00:06:24.750
In this particular case I'm always
I just wanna listen for a play or

139
00:06:24.750 --> 00:06:26.250
authorization all the time.

140
00:06:26.250 --> 00:06:29.650
And if for whatever reason,
some attempt to access the server errored,

141
00:06:29.650 --> 00:06:32.210
I don't want to make the whole
stream of authorizations end.

142
00:06:32.210 --> 00:06:34.920
I basically, just wanna ignore it, right.

143
00:06:34.920 --> 00:06:38.370
In this case, I'm going to return nothing,
meaning the play just won't work.

144
00:06:38.370 --> 00:06:40.508
So you hit play,
that's probably not the best method,

145
00:06:40.508 --> 00:06:43.012
we could probably do even better
than that, right, and be like,

146
00:06:43.012 --> 00:06:46.330
actually display them the message, but
this is what I can fit on the slide.

147
00:06:46.330 --> 00:06:51.180
So what catch does It takes an error,

148
00:06:51.180 --> 00:06:53.470
excuse me,
It passes an error to a function and

149
00:06:53.470 --> 00:06:57.700
that function can optionally return
an observable to resume from.

150
00:06:57.700 --> 00:07:01.010
So instead of that error just
completing the observable.

151
00:07:01.010 --> 00:07:03.900
Instead we can run that error through
a function create another observable and

152
00:07:03.900 --> 00:07:07.520
the think of it is literally callcating
it onto the current observable, and so

153
00:07:07.520 --> 00:07:09.460
we just start listening
to that observable now.

154
00:07:09.460 --> 00:07:12.642
Which keeps the error from getting bubbled
up, and stopping the overall stream.

155
00:07:14.566 --> 00:07:16.872
&gt;&gt; Jafar Husain: So in this case,
it's as if you did a catch, and

156
00:07:16.872 --> 00:07:19.204
then there was nothing in
the body of the catch.

157
00:07:19.204 --> 00:07:22.276
And so an observable empty is literally
an observable that just immediately

158
00:07:22.276 --> 00:07:23.860
uncompletes when you subscribe to it.

159
00:07:25.600 --> 00:07:28.109
So it's just a constant that will give
you an observable that always completes.

160
00:07:30.550 --> 00:07:33.670
Right and but I'm now of course,
actually bad example here.

161
00:07:33.670 --> 00:07:34.990
Down here I've got an error handler but

162
00:07:34.990 --> 00:07:40.576
that error handler, I don't believe will
ever get get thrown because play attempts,

163
00:07:40.576 --> 00:07:43.890
no it could get thrown if the player
initialization fails right.

164
00:07:43.890 --> 00:07:46.072
So, if an error happens
on player initialization,

165
00:07:46.072 --> 00:07:48.849
there's nothing I can do so
that error will bubble all the way up and

166
00:07:48.849 --> 00:07:51.789
they will handle it and say sorry
you know can't play stuff right now.

167
00:07:54.150 --> 00:07:56.805
&gt;&gt; Jafar Husain: Notice we're only
catching errors on attempts to authorize

168
00:07:56.805 --> 00:07:57.740
a movie ticket.

169
00:07:57.740 --> 00:08:00.010
We're not catching errors
on player initialization.

170
00:08:00.010 --> 00:08:01.920
Notice where the catch
is it's very important.

171
00:08:01.920 --> 00:08:05.460
It's only on that inner observable,
right, not on the outer observable.

172
00:08:05.460 --> 00:08:07.780
So if a player fails to initialize,
we'll get an error.

173
00:08:07.780 --> 00:08:08.380
We won't catch that.

174
00:08:11.500 --> 00:08:13.845
So in Netflix [INAUDIBLE] we
use observable everywhere.

175
00:08:13.845 --> 00:08:14.522
It's pretty much for

176
00:08:14.522 --> 00:08:16.620
every single asynchronous actions
represented as observable.

177
00:08:16.620 --> 00:08:17.350
Yeah, question?

178
00:08:17.350 --> 00:08:21.330
&gt;&gt; Speaker 3: An example on, can we
have latest on switch play attempts?

179
00:08:21.330 --> 00:08:23.060
&gt;&gt; Jafar Husain: Absolutely.
I'm glad somebody pointed that out any

180
00:08:23.060 --> 00:08:26.488
time you see a, well actually,
no no actually I'm glad we can't,

181
00:08:26.488 --> 00:08:28.250
I'm glad you pointed out because we can't.

182
00:08:28.250 --> 00:08:31.580
Just because we've got, notice like in the
previous example we had like a take until

183
00:08:31.580 --> 00:08:34.560
inside of that map function, and
a concat all on the outside.

184
00:08:34.560 --> 00:08:38.670
That worked because the incoming
event that was creating observables,

185
00:08:38.670 --> 00:08:41.770
was the same as the event that we
would want to use to switch to new

186
00:08:41.770 --> 00:08:42.620
observables, right.

187
00:08:42.620 --> 00:08:45.130
For every key press we
created a new observable and

188
00:08:45.130 --> 00:08:48.180
then as soon I pressed another key we
wanted to use that event to cancel

189
00:08:48.180 --> 00:08:50.670
the current observable in
this case that's not true.

190
00:08:50.670 --> 00:08:54.211
We're listening to an entirely
different event then so

191
00:08:54.211 --> 00:08:58.596
if you press play that event triggers
us making us network requests.

192
00:08:58.596 --> 00:09:02.868
But it's entirely different event that
causes us to stop making the network

193
00:09:02.868 --> 00:09:04.403
request which is cancel and

194
00:09:04.403 --> 00:09:09.157
that's why I had to use play attempts map
returning the authorization observable.

195
00:09:09.157 --> 00:09:13.697
And then I had to do take until on
cancels if I didn't take until on play

196
00:09:13.697 --> 00:09:17.319
attempts then this would be
the same as switch latest.

197
00:09:17.319 --> 00:09:21.876
So switching this only works when you want
to stop listening to an inner observable

198
00:09:21.876 --> 00:09:26.610
based on the same condition that causes
you to get a new inner observable.

199
00:09:26.610 --> 00:09:30.060
So if every single time I press a key I'm
gonna create a new network request, so

200
00:09:30.060 --> 00:09:32.040
I therefore want to cancel
the current network request.

201
00:09:32.040 --> 00:09:33.200
So initially this is great.

202
00:09:33.200 --> 00:09:36.030
Because I can just you
take until key press and

203
00:09:36.030 --> 00:09:38.130
the key presses are the same things
creating the new observable.

204
00:09:38.130 --> 00:09:39.760
In this case I got two different events.

205
00:09:39.760 --> 00:09:43.450
One is creating observables and
the other one is completing them.

206
00:09:43.450 --> 00:09:44.990
So that's why I can't use switch latest.

207
00:09:44.990 --> 00:09:48.550
I have to use map concatAll
with a take and til inside.

208
00:09:48.550 --> 00:09:49.720
So for every observable I create,

209
00:09:49.720 --> 00:09:52.430
I say, yeah only stop when
this other event happens.

210
00:09:52.430 --> 00:09:55.810
But whenever this incoming event happens,
create a new observable.

211
00:09:55.810 --> 00:09:56.860
So I'm glad that question was asked.

212
00:09:58.810 --> 00:10:01.280
So switch latest only works when
the incoming event that creates

213
00:10:01.280 --> 00:10:04.040
the observable, is the same event
we want to use to complete but

214
00:10:04.040 --> 00:10:06.160
the current observable when
a new one comes along.

215
00:10:09.400 --> 00:10:12.674
So a Netflix we use observable everywhere
for every single asynchronous API every

216
00:10:12.674 --> 00:10:16.187
single asynchronous doesn't matter since a
single value doesn't matter if it sends us

217
00:10:16.187 --> 00:10:18.619
a single value,
doesn't matter if it sends us 15 values.

218
00:10:18.619 --> 00:10:20.875
Or whether it's a call back or
it's a web socket or

219
00:10:20.875 --> 00:10:22.824
whatever we abstract it as an observable.

220
00:10:22.824 --> 00:10:26.092
The very first thing we do is abstract it
as an observable and then we just treat

221
00:10:26.092 --> 00:10:29.226
everything like it's a collection and
use these powerful data sources.

222
00:10:29.226 --> 00:10:30.790
I recommend you do the exact same thing.

223
00:10:33.180 --> 00:10:35.440
Any questions?

224
00:10:35.440 --> 00:10:38.690
&gt;&gt; Speaker 3: Clarification why does
a generate an empty observable?

225
00:10:38.690 --> 00:10:41.230
&gt;&gt; Jafar Husain: Technically it
generates an observable of one.

226
00:10:41.230 --> 00:10:44.298
So it fires one because if it had to
generate an empty observable the map

227
00:10:44.298 --> 00:10:45.807
function would never get called.

228
00:10:45.807 --> 00:10:48.870
Right cuz the map function gets called for
every item in the stream.

229
00:10:48.870 --> 00:10:52.153
So it actually just generates true and
then completed that might seem a little

230
00:10:52.153 --> 00:10:55.386
weird but usually often things will do
that just so that they can be used along

231
00:10:55.386 --> 00:10:58.535
with map because of an uncompleted
them the whole stream would complete.

232
00:11:01.667 --> 00:11:04.353
&gt;&gt; Jafar Husain: So that notice that map
just ignores whatever comes inside of it

233
00:11:04.353 --> 00:11:07.596
doesn't really care all it cares that
it got called that's how it knows that

234
00:11:07.596 --> 00:11:08.875
the player was initialized.

