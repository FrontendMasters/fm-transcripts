WEBVTT

1
00:00:00.000 --> 00:00:03.665
[MUSIC]

2
00:00:03.665 --> 00:00:06.292
&gt;&gt; Jafar: Now you guys are gonna be
learning about a new function called zip.

3
00:00:06.292 --> 00:00:08.800
So I'm gonna turn it back over to
you to go through the exercises.

4
00:00:08.800 --> 00:00:11.390
And we'll learn about,
this is the last function that

5
00:00:11.390 --> 00:00:14.340
you guys are gonna be learning, and
then the rest of this is all drills.

6
00:00:14.340 --> 00:00:16.292
It's not hard to learn these
functions individually.

7
00:00:16.292 --> 00:00:18.656
The hard part is,
how do you take a big problem and

8
00:00:18.656 --> 00:00:21.261
break it down into combinations
of these functions?

9
00:00:21.261 --> 00:00:23.557
And that's the real thing that
we're gonna be drilling today.

10
00:00:23.557 --> 00:00:29.943
So we're gonna break and we're gonna come
back to this in say 15 minutes, maybe.

11
00:00:29.943 --> 00:00:35.798
What time is it now?
&gt;&gt; Speaker 2: 3:45.

12
00:00:35.798 --> 00:00:37.282
&gt;&gt; Jafar: Yeah, okay.

13
00:00:37.282 --> 00:00:43.506
It's 15 minutes, so
let's try and go to exercise 24.

14
00:00:43.506 --> 00:00:47.534
Every now and then, information
isn't just organized into trees, but

15
00:00:47.534 --> 00:00:50.810
it's correlated based on
its position in an array.

16
00:00:50.810 --> 00:00:52.480
Rarely, but every now and then.

17
00:00:52.480 --> 00:00:56.300
So I might have an array of videos,
as I do in this example, and

18
00:00:56.300 --> 00:00:57.960
an array of bookmarks.

19
00:00:57.960 --> 00:01:00.870
And the only way to link them up and
put them together is positionally.

20
00:01:00.870 --> 00:01:04.280
So we see that the first bookmark
is correlated to the first video,

21
00:01:04.280 --> 00:01:09.470
and the second bookmark is correlated to
the second video and on and on and on.

22
00:01:09.470 --> 00:01:15.120
Excuse me, second bookmark,
second video, and so on and so forth.

23
00:01:15.120 --> 00:01:17.190
Sometimes we wanna put
those two things together.

24
00:01:17.190 --> 00:01:18.520
We wanna collect a little information.

25
00:01:18.520 --> 00:01:22.188
It's almost as if we have an array on the
left-hand side, an array on the right-hand

26
00:01:22.188 --> 00:01:27.620
side, and we wanna kind of merge each
item in the array like teeth in a zipper.

27
00:01:27.620 --> 00:01:30.952
So the first time I ever read the zip
method, I was very confused, and

28
00:01:30.952 --> 00:01:31.825
I was very angry.

29
00:01:31.825 --> 00:01:33.979
I was like,
what the hell does this method do?

30
00:01:33.979 --> 00:01:37.490
Why are these academics naming
these methods so strangely?

31
00:01:37.490 --> 00:01:40.825
And then when I learned what zip does,
it actually makes a lot of sense.

32
00:01:40.825 --> 00:01:43.561
So I got an array on the left-hand side,
an array on the right-hand side, and

33
00:01:43.561 --> 00:01:45.093
the only way you can zip up a zipper,
right,

34
00:01:45.093 --> 00:01:46.395
is if you've got a tooth on both end.

35
00:01:46.395 --> 00:01:48.937
Anybody ever break a zipper
on a jacket before?

36
00:01:48.937 --> 00:01:51.213
Really frustrating,
you're like [SOUND], it won't go up.

37
00:01:51.213 --> 00:01:53.970
Because a tooth is missing or
bent on one side.

38
00:01:53.970 --> 00:01:55.670
That's the way zip works.

39
00:01:55.670 --> 00:02:00.480
So it will go and slurp up items,
one from each side of the array

40
00:02:00.480 --> 00:02:03.680
until one of the array stops,
and then it won't go any further.

41
00:02:03.680 --> 00:02:11.010
So notice here, I very deliberately
have four videos and three bookmarks.

42
00:02:11.010 --> 00:02:12.964
So what we're going to do
in this particular example,

43
00:02:12.964 --> 00:02:14.075
is we're gonna loop through.

44
00:02:14.075 --> 00:02:16.205
We're gonna use a loop.

45
00:02:16.205 --> 00:02:19.298
And we are going to loop only to
the length of the shortest array.

46
00:02:19.298 --> 00:02:21.546
So notice I'm using math.min here,

47
00:02:21.546 --> 00:02:26.334
to say we're only gonna go as long as
whichever videos or bookmarks length.

48
00:02:26.334 --> 00:02:33.464
And so I'm gonna create an object.
&gt;&gt; Jafar: And

49
00:02:33.464 --> 00:02:38.025
I'm just going to grab both the id
of the video and the bookmark.

50
00:02:38.025 --> 00:02:41.909
So we can go through the videos
on the left-hand side here,

51
00:02:41.909 --> 00:02:47.502
counter.id.
&gt;&gt; Jafar: And

52
00:02:47.502 --> 00:02:52.667
I'm gonna go bookmarkId using
the bookmarks in the same.

53
00:02:52.667 --> 00:02:56.806
Yeah, thank you.
&gt;&gt; Speaker 2: [INAUDIBLE]

54
00:02:56.806 --> 00:02:58.176
&gt;&gt; Jafar: Thank you.

55
00:02:58.176 --> 00:03:00.976
Where, here?

56
00:03:00.976 --> 00:03:04.699
So bookmark,
let's split this up over a few lines here.

57
00:03:09.593 --> 00:03:13.028
&gt;&gt; Jafar: BookmarkId and we've collected

58
00:03:13.028 --> 00:03:17.720
up a pair of the videoId and
the bookmarkId.

59
00:03:17.720 --> 00:03:23.084
And if we run this, we get bookmarks not
defined, and that's because it isn't.

60
00:03:23.084 --> 00:03:29.676
I have to look it up in
bookmarks at counter, great.

61
00:03:29.676 --> 00:03:30.486
So that works.

62
00:03:30.486 --> 00:03:34.490
So we're just looping through the array,
and we just look at that index on both

63
00:03:34.490 --> 00:03:37.219
sides, so on the video side and
on the bookmark side,

64
00:03:37.219 --> 00:03:42.338
we pull out a property.
&gt;&gt; Jafar: Now this is actually

65
00:03:42.338 --> 00:03:46.607
common enough, this pattern that it makes
sense to abstract it into a function.

66
00:03:46.607 --> 00:03:50.354
So we can take this process of a single
counter and looking up what that item in

67
00:03:50.354 --> 00:03:54.338
the position on one array and that item in
the same position in another array, and

68
00:03:54.338 --> 00:03:57.228
it's basically gluing them
together to create one item.

69
00:03:57.228 --> 00:04:01.324
And we can abstract that into a zip
function, which we're just gonna add not

70
00:04:01.324 --> 00:04:04.274
to an instance of an array but
to the array type itself.

71
00:04:04.274 --> 00:04:07.554
So you call it like a static function of
anybody in the room is familiar with that.

72
00:04:07.554 --> 00:04:08.956
You just go array.zip.

73
00:04:08.956 --> 00:04:12.740
You don't go an instance of an array 1,
2, 3.zip.

74
00:04:12.740 --> 00:04:13.790
And the reason for

75
00:04:13.790 --> 00:04:18.633
that is that we wanna make it clear that
these two arrays are kind of peers, right.

76
00:04:18.633 --> 00:04:19.795
It's not like where you go,

77
00:04:19.795 --> 00:04:22.224
they're basically both being
processed at the same time.

78
00:04:22.224 --> 00:04:24.620
We wanna make it visually
clear that that's happening.

79
00:04:24.620 --> 00:04:26.399
So I'm gonna take the exact same code.

80
00:04:26.399 --> 00:04:29.201
Except instead of this time doing
something specific where I'm taking

81
00:04:29.201 --> 00:04:32.189
the idea out of the left-hand side and
the idea out of the right-hand side,

82
00:04:32.189 --> 00:04:33.558
I'm gonna do something generic.

83
00:04:33.558 --> 00:04:37.819
I'm gonna use the combiner function
passed in to the zip function.

84
00:04:39.960 --> 00:04:41.347
&gt;&gt; Jafar: And I'm going to pass it,

85
00:04:41.347 --> 00:04:44.890
the item on the right, or
the item on the left, excuse me.

86
00:04:44.890 --> 00:04:48.780
So we take left at counter,
and the item on the right.

87
00:04:48.780 --> 00:04:52.140
And now people can pass in
their own combiner function,

88
00:04:52.140 --> 00:04:54.250
which decides what to do with
the item on the left-hand side and

89
00:04:54.250 --> 00:04:57.110
on the right-hand side, and
we've generalized this operation now.

90
00:04:57.110 --> 00:05:00.421
So when people call zip, they just
specialize what zip does by passing in

91
00:05:00.421 --> 00:05:02.216
that function that's responsible for

92
00:05:02.216 --> 00:05:04.848
combining the item on the left
with the item on the right.

93
00:05:04.848 --> 00:05:09.236
And so if we run that,
we should have zip, great.

94
00:05:09.236 --> 00:05:14.059
So now it solved the same problem
we just saw with that loop and

95
00:05:14.059 --> 00:05:16.052
that counter using zip.

96
00:05:16.052 --> 00:05:21.605
So I'm gonna zip the videos, and I'm gonna
zip, so that's the array on the left-hand

97
00:05:21.605 --> 00:05:26.275
side, and I'm gonna zip bookmarks,
the array on the right-hand side.

98
00:05:26.275 --> 00:05:31.770
And I'm gonna pass in a collection
that takes both a video and

99
00:05:31.770 --> 00:05:37.946
a bookmark, and I'm gonna return
the videoId and the bookmarkId.

100
00:05:37.946 --> 00:05:42.796
I think that's a good deal less code, and
I actually find it once you start to learn

101
00:05:42.796 --> 00:05:46.897
to recognize these functions,
you'll find it much more readable.

102
00:05:46.897 --> 00:05:48.403
The thing about a loop, is that look,

103
00:05:48.403 --> 00:05:50.390
we're all very comfortable with loops,
right?

104
00:05:50.390 --> 00:05:52.680
We know how to use those,
we've been using loops for years.

105
00:05:52.680 --> 00:05:53.435
So at first,

106
00:05:53.435 --> 00:05:58.290
it can seem very difficult to learn
to use all these different functions.

107
00:05:58.290 --> 00:06:01.164
But once you learn these functions and
there aren't many, right,

108
00:06:01.164 --> 00:06:02.634
we've covered five or six today.

109
00:06:02.634 --> 00:06:06.092
What you're gonna find is your code
becomes much more self-descriptive.

110
00:06:06.092 --> 00:06:08.775
When I look at a loop,
I have no idea what that loop is doing,

111
00:06:08.775 --> 00:06:11.623
it could be aggregating data,
it could be transforming data,

112
00:06:11.623 --> 00:06:13.521
it could be filtering data I have no idea.

113
00:06:13.521 --> 00:06:17.270
When I look at a map function, I suddenly
have a very good idea from a high level

114
00:06:17.270 --> 00:06:21.220
about what type of operation is
being performed on that collection.

115
00:06:21.220 --> 00:06:23.570
And so if you learn to use
these functions, right,

116
00:06:23.570 --> 00:06:25.950
which are specialized
collection operations,

117
00:06:25.950 --> 00:06:29.470
your code suddenly becomes much more
self-descriptive, much less opaque.

118
00:06:29.470 --> 00:06:31.370
You don't have to pay
too close attention and

119
00:06:31.370 --> 00:06:34.020
read carefully to understand at
a high level what's going on.

120
00:06:34.020 --> 00:06:36.336
So it's really important to
master these functions, and

121
00:06:36.336 --> 00:06:38.580
then master being able to
combine them together.

122
00:06:38.580 --> 00:06:40.600
Cuz not only will it allow you
to do very powerful things,

123
00:06:40.600 --> 00:06:42.130
which will get you with
the async programming stuff,

124
00:06:42.130 --> 00:06:45.650
it will make your code much more
self-descriptive and readable.

125
00:06:45.650 --> 00:06:48.300
And in the end,
you end up writing less code, right?

126
00:06:48.300 --> 00:06:52.210
The wonderful thing about this is
it takes those common operations of

127
00:06:52.210 --> 00:06:55.180
looping over a collection and
adding stuff to an accumulator, and

128
00:06:55.180 --> 00:06:57.310
it makes it somebody else's problem,
right?

129
00:06:57.310 --> 00:06:59.200
That's what you do whenever
you create a function.

130
00:06:59.200 --> 00:07:01.750
You make that work
somebody else's problem.

131
00:07:01.750 --> 00:07:05.018
And so now you can just specialize
the little pieces of the operation you

132
00:07:05.018 --> 00:07:05.575
need to do.

133
00:07:05.575 --> 00:07:09.290
There are so many different ways,
it turns out, to process a collection.

134
00:07:09.290 --> 00:07:11.920
And a lot of the things that we do that we
think are whole new problems are actually

135
00:07:11.920 --> 00:07:14.920
just specializations
of an overall pattern.

136
00:07:14.920 --> 00:07:19.268
Map, filter, reduce, merge,
and concatAll and zip.

137
00:07:19.268 --> 00:07:21.782
So let's see if this runs.

138
00:07:21.782 --> 00:07:23.929
Nice, right,
now we're writing some short code.

139
00:07:23.929 --> 00:07:25.420
Code's getting real nice and brief.

