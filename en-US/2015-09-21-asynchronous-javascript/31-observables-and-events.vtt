WEBVTT

1
00:00:00.000 --> 00:00:03.774
[MUSIC]

2
00:00:03.774 --> 00:00:07.314
&gt;&gt; Jafar Husain: So all the map and filter
and zip and reduce stuff all works over

3
00:00:07.314 --> 00:00:12.940
observables.
&gt;&gt; Jafar Husain: This one's fun.

4
00:00:12.940 --> 00:00:15.690
So we're gonna create
that mouse drag event.

5
00:00:17.490 --> 00:00:21.940
But first, we're gonna start with
an example that you guys already know.

6
00:00:21.940 --> 00:00:25.670
Or a similarly example you guys have
been working with last few days.

7
00:00:25.670 --> 00:00:30.860
Let's take this example and let's slowly
morphed it into a mouse stagnant.

8
00:00:32.240 --> 00:00:32.900
So what do we do?

9
00:00:32.900 --> 00:00:35.320
We've been going through this
the stuff I'm not easy at all.

10
00:00:35.320 --> 00:00:38.860
Yesterday, we went through movie lists,
and then we went through videos.

11
00:00:38.860 --> 00:00:41.110
But we filtered the videos
collection before we returned it.

12
00:00:41.110 --> 00:00:43.120
And then we ended up with
a two-dimensional array.

13
00:00:43.120 --> 00:00:46.490
And then we used contact map
to flatten that by one level.

14
00:00:46.490 --> 00:00:49.670
We just that's what we were
doing again and again yesterday.

15
00:00:49.670 --> 00:00:53.150
So let's see why we've been doing
those wax-on, wax-off exercises.

16
00:00:53.150 --> 00:01:02.393
Now I'm gonna

17
00:01:02.393 --> 00:01:11.637
slowly change

18
00:01:11.637 --> 00:01:17.200
this.
&gt;&gt; Off Camera 1: A console

19
00:01:17.200 --> 00:01:21.850
log in that filter function that
it would do nothing until for

20
00:01:21.850 --> 00:01:23.210
each is called?
&gt;&gt; Jafar Husain: That is absolutely

21
00:01:23.210 --> 00:01:25.540
correct, not a bit of code in here.

22
00:01:25.540 --> 00:01:28.810
Well excuse me, not a bit of code
inside of the handlers, right?

23
00:01:28.810 --> 00:01:33.730
Because handlers are,
like the filter code, right?

24
00:01:33.730 --> 00:01:36.846
This code is only gonna execute
when data makes its way through.

25
00:01:36.846 --> 00:01:40.980
And we're only gonna start getting data.

26
00:01:40.980 --> 00:01:43.590
The way to think about this is, actually
here's a good way of thinking about it.

27
00:01:43.590 --> 00:01:45.160
The event handler has not,

28
00:01:45.160 --> 00:01:48.810
remember when you adapted
the buttons clicks to an observable?

29
00:01:48.810 --> 00:01:50.550
That did not hook up an event handler.

30
00:01:50.550 --> 00:01:54.380
The event handler is not gonna be hooked
up until you actually call forEach.

31
00:01:54.380 --> 00:01:56.390
Because what happens and
what we're gonna later on,

32
00:01:56.390 --> 00:01:58.940
it's gonna be fun we're gonna
actually implement observable.

33
00:01:58.940 --> 00:02:00.630
So you can see all the in ads inside and

34
00:02:00.630 --> 00:02:03.222
how simple amazingly simple
observable really is.

35
00:02:03.222 --> 00:02:05.350
And we're gonna step through the code and

36
00:02:05.350 --> 00:02:07.170
we're gonna watch what happens
when you call forEach.

37
00:02:07.170 --> 00:02:10.558
We're gonna follow it all the way
up to subscribing to the event.

38
00:02:10.558 --> 00:02:13.240
First, I wanna make sure
your proficient in using it.

39
00:02:13.240 --> 00:02:17.000
And then later on, if we have time, we'll
actually just implement a mini-observable

40
00:02:17.000 --> 00:02:20.970
and all those map and filter and
from event and that type of thing.

41
00:02:20.970 --> 00:02:23.260
So you'll actually be able to follow
up follow up the progression, but

42
00:02:23.260 --> 00:02:25.610
that's what happens when you call for
each one of observable.

43
00:02:25.610 --> 00:02:27.630
Lets say I take an observeable and
I mapped it.

44
00:02:27.630 --> 00:02:30.460
Well, when I call for
each on that observable, it calls for

45
00:02:30.460 --> 00:02:31.520
each on its data source.

46
00:02:31.520 --> 00:02:34.090
And that'll call for each on its
data source, and on and on and on.

47
00:02:34.090 --> 00:02:38.030
Up until finally we reach that observable
that adapted from the button clicks, and

48
00:02:38.030 --> 00:02:40.330
then it'll call addEventListener().

49
00:02:40.330 --> 00:02:41.357
Does that makes sense?

50
00:02:41.357 --> 00:02:45.240
So an observable's a little like an event,
but it's also a little like a function.

51
00:02:45.240 --> 00:02:47.340
It's like an event in that
will push your data, but

52
00:02:47.340 --> 00:02:50.150
it's more like a function in that it
won't do a thing until you call it.

53
00:02:50.150 --> 00:02:51.190
Does that make sense?

54
00:02:51.190 --> 00:02:53.820
Until you call that one forEach function.

55
00:02:53.820 --> 00:02:56.180
So we're gonna try and
leverage all the metaphors for

56
00:02:56.180 --> 00:02:57.690
how you're already used to thinking here.

57
00:02:57.690 --> 00:02:58.927
And I'm gonna combine them and

58
00:02:58.927 --> 00:03:01.880
meld them together to get a good
idea of how observable works.

59
00:03:01.880 --> 00:03:06.290
So now we've got,
I was just in the middle of changing this.

60
00:03:06.290 --> 00:03:11.790
So filter takes a collection,
and potentially makes it smaller.

61
00:03:11.790 --> 00:03:13.920
We'll take until does
the exact same thing.

62
00:03:13.920 --> 00:03:16.370
It takes a collection and
then makes it smaller.

63
00:03:17.930 --> 00:03:23.010
Just slightly we just use it by instead
of applying a function to each item,

64
00:03:23.010 --> 00:03:25.140
right to see whether passes a test or not.

65
00:03:25.140 --> 00:03:27.400
Instead it listens to
another observable and

66
00:03:27.400 --> 00:03:30.545
it completes the source observable
when that other observable fires.

67
00:03:30.545 --> 00:03:35.370
And so mouse drag.

68
00:03:35.370 --> 00:03:37.820
All that stuff about processing data.

69
00:03:37.820 --> 00:03:40.470
Remember we talked about why
we use map instead of zip?

70
00:03:40.470 --> 00:03:45.140
Well, I have to process the video
lists before I process the videos.

71
00:03:45.140 --> 00:03:46.740
Well it's order, right?

72
00:03:46.740 --> 00:03:49.430
You can use map to
enforce order of events.

73
00:03:49.430 --> 00:03:50.840
That's what we're doing here.

74
00:03:50.840 --> 00:03:53.840
We're saying, well,
I'm gonna listen to the mouseDowns first.

75
00:03:53.840 --> 00:03:57.780
And then when I get a mouseDown, I'm
gonna go through the mouse moves, right?

76
00:03:57.780 --> 00:04:00.030
Before we had to do that
with an array because well,

77
00:04:00.030 --> 00:04:02.750
you can only get to the videos by
going through the video lists.

78
00:04:02.750 --> 00:04:06.520
But here you can also take two, we noticed
when we did our example where it's

79
00:04:06.520 --> 00:04:10.640
relational where we had ID's where we had
two collections of the same time In order

80
00:04:10.640 --> 00:04:14.870
to create the structure we wanted we just
chose in which order to map through.

81
00:04:14.870 --> 00:04:17.008
What we said, well I wanna create
lists that contain videos.

82
00:04:17.008 --> 00:04:19.510
So I gonna map through
the lists arrays first.

83
00:04:19.510 --> 00:04:22.030
And then within there,
I'm gonna map through the videos array, so

84
00:04:22.030 --> 00:04:25.370
that was the relational example
where we link stats links up by IDs.

85
00:04:25.370 --> 00:04:28.860
So we were creating the structure
we wanted by imposing an order.

86
00:04:28.860 --> 00:04:32.280
Sometimes an order is imposed
on us Like with the the video.

87
00:04:32.280 --> 00:04:35.450
Listen, it contains the videos and
then we have to map a nest through.

88
00:04:35.450 --> 00:04:38.350
But sometimes, we just have access to
two collections at the same time and

89
00:04:38.350 --> 00:04:39.900
the order is really up to us.

90
00:04:39.900 --> 00:04:43.000
If we map through the former before
the lot or we get one structure for

91
00:04:43.000 --> 00:04:43.760
building a tree.

92
00:04:43.760 --> 00:04:46.030
If we swap that around,
we can get the other structure.

93
00:04:46.030 --> 00:04:49.250
That's really more akin to what we deal
with when we deal with observables.

94
00:04:49.250 --> 00:04:51.060
Usually I have access to the mouseMove.

95
00:04:51.060 --> 00:04:52.720
In this case I have access
to the mouseMove event,

96
00:04:52.720 --> 00:04:55.990
I have access to the mouse event,
mouseDown event all at the same time.

97
00:04:55.990 --> 00:04:57.100
In order to get the,

98
00:04:57.100 --> 00:05:02.110
in order to enforce an order, I just
choose in what order I map through them.

99
00:05:02.110 --> 00:05:05.150
But if I map through mouseMoves and
then mouseDowns.

100
00:05:05.150 --> 00:05:09.460
Well, then I wouldn't start listening for
a mouseDown until a mouseMove came along.

101
00:05:09.460 --> 00:05:10.380
Does that make sense or

102
00:05:10.380 --> 00:05:13.960
is that worthy of a little more,
little more hammering home, right?

103
00:05:13.960 --> 00:05:17.070
Because here,
I'm gonna write this the long way first.

104
00:05:17.070 --> 00:05:19.080
Right because remember
that's all that's going on.

105
00:05:20.600 --> 00:05:25.195
Can always switch a concat map to
a map followed by contactAll(), right.

106
00:05:25.195 --> 00:05:31.060
This function right here is only gonna get
called when we get a mouseDown, right?

107
00:05:31.060 --> 00:05:33.990
When a mouseDown arrives in
that collection over time.

108
00:05:33.990 --> 00:05:34.550
And so therefore,

109
00:05:34.550 --> 00:05:39.905
we're not even gonna begin listening to
mouseMoves until a mouseDown comes along.

110
00:05:39.905 --> 00:05:40.410
Because how would we?

111
00:05:40.410 --> 00:05:42.460
This function's not even gonna get called.

112
00:05:42.460 --> 00:05:44.760
It can't get called until
a mouseDown comes along.

113
00:05:44.760 --> 00:05:47.690
So when a mouseDown comes along,
we execute this function.

114
00:05:47.690 --> 00:05:52.080
And we return that new collection and
concatAll and concatAll.

115
00:05:52.080 --> 00:05:54.220
The thing responsible for flattening.

116
00:05:54.220 --> 00:05:56.980
So it sees a two-dimensional observable.

117
00:05:56.980 --> 00:06:00.280
And every single time an inner
observable comes along it's gonna for

118
00:06:00.280 --> 00:06:01.550
each over that right.

119
00:06:01.550 --> 00:06:04.660
And this right here is
the inner observable.

120
00:06:04.660 --> 00:06:07.940
So first, we see the concrete all
subscribe to the outer observable which is

121
00:06:07.940 --> 00:06:09.340
mouse downs, right?

122
00:06:09.340 --> 00:06:12.240
And then a map, and
then every inner observable comes along.

123
00:06:12.240 --> 00:06:14.590
It's just gonna be all the mouse
moves until the mouse up.

124
00:06:14.590 --> 00:06:16.480
So then it subscribes to
the inner observable, and

125
00:06:16.480 --> 00:06:18.244
that's how we enforce order.

126
00:06:18.244 --> 00:06:22.540
I wanna listen to this event happening
before I listen to that event happening.

127
00:06:22.540 --> 00:06:23.300
Does that make sense?

128
00:06:24.520 --> 00:06:28.070
So if you've just got a bunch of events
and you wanna order them, map, right?

129
00:06:29.910 --> 00:06:32.092
If you want to listen to
them up the same time.

130
00:06:32.092 --> 00:06:33.670
What do you think the operator would use?

131
00:06:33.670 --> 00:06:36.564
We're listening to two
events in exactly the same.

132
00:06:36.564 --> 00:06:41.335
Any time you get an item from each side,
you wanna do something.

133
00:06:41.335 --> 00:06:44.799
Let's say you got two network requests and
they're both observables of one and

134
00:06:44.799 --> 00:06:47.780
you wanna wait for them both to
finish before you do something else.

135
00:06:47.780 --> 00:06:50.828
What's the operator I would use?
&gt;&gt; Off Camera 2: Zip

136
00:06:50.828 --> 00:06:51.860
&gt;&gt; Jafar Husain: Zip, now we know why we

137
00:06:51.860 --> 00:06:53.180
learned zip, right?

138
00:06:53.180 --> 00:06:57.130
Zip, the truth is when you're doing
programming most of the times in arrays

139
00:06:57.130 --> 00:06:59.450
items don't happen to
be organized by index.

140
00:06:59.450 --> 00:07:00.863
It's actually very rare.

141
00:07:00.863 --> 00:07:04.031
Usually, they're organized relationally
by they're linked together by some ID or

142
00:07:04.031 --> 00:07:05.485
they're organized hierarchically.

143
00:07:05.485 --> 00:07:07.927
And so I'm the first to tell you
that when it comes to arrays.

144
00:07:07.927 --> 00:07:09.120
Zip isn't that useful [LAUGH].

145
00:07:09.120 --> 00:07:10.810
You're probably not
gonna use it very much.

146
00:07:10.810 --> 00:07:14.290
When it comes to asynchronous programming
that's probably the most common usage.

147
00:07:14.290 --> 00:07:17.250
When you're dealing with concurrent
network requests, right?

148
00:07:17.250 --> 00:07:19.450
It's very often that you
have maybe even two or

149
00:07:19.450 --> 00:07:22.510
three network requests and
they're all gonna give you one result.

150
00:07:22.510 --> 00:07:23.980
Zip is perfect for that, right?

151
00:07:23.980 --> 00:07:25.780
Because you can zip, you just wait for
them all to be done.

152
00:07:25.780 --> 00:07:28.700
And then your function gets
called with the results

153
00:07:28.700 --> 00:07:31.862
of all of the different observables
of one all at the same time.

154
00:07:31.862 --> 00:07:35.500
So you can make a request, concurrent
requests to three different services.

155
00:07:35.500 --> 00:07:38.390
And then take the results and combine
them together into some object that's

156
00:07:38.390 --> 00:07:41.060
a composite of the data from all three.

157
00:07:41.060 --> 00:07:43.150
So that's where as zips gona apply, right?

158
00:07:43.150 --> 00:07:46.040
So we've seen how we can order
events using map, right?

159
00:07:46.040 --> 00:07:48.940
Filters, self-explanatory, the same
thing with arrays and observables.

160
00:07:48.940 --> 00:07:51.220
Sometimes you're only interested
in a certain type of event or

161
00:07:51.220 --> 00:07:53.260
an event that matches a certain condition,
right?

162
00:07:53.260 --> 00:07:56.770
I'm only interested in listening to this
mouse move when it's within the bounding

163
00:07:56.770 --> 00:07:59.250
box of this button right
that's what filters for.

164
00:08:00.420 --> 00:08:02.400
And it corked out all
the same thing really.

165
00:08:02.400 --> 00:08:06.290
You have nested observables and
you wanna flatten them, right?

166
00:08:06.290 --> 00:08:07.310
To make sure.
Because in the end,

167
00:08:07.310 --> 00:08:09.220
what are we gonna do at the very end?

168
00:08:09.220 --> 00:08:12.430
Once we've built the observable,
we want what's missing from this code.

169
00:08:14.000 --> 00:08:16.210
In this code,
we're not gonna hook about event handler.

170
00:08:16.210 --> 00:08:18.330
Not even an event handler's gonna be
hooked up, nothing is gonna happen.

171
00:08:18.330 --> 00:08:20.150
What do I have to do to
actually make this code work?

172
00:08:22.280 --> 00:08:26.660
To actually listen for mouse tracks?
&gt;&gt; Off Camera 3: ForEach.

173
00:08:26.660 --> 00:08:28.420
&gt;&gt; Jafar Husain: ForEach, yes.

174
00:08:28.420 --> 00:08:30.369
All I did here was created observable and

175
00:08:30.369 --> 00:08:33.875
that's just like a function waiting
to be called haven't done a thing.

176
00:08:33.875 --> 00:08:37.436
I just created a function that I can call
later if I want to and how do I call it?

177
00:08:50.370 --> 00:08:51.338
&gt;&gt; Jafar Husain: I'm cheating a little bit

178
00:08:51.338 --> 00:08:57.101
here.
&gt;&gt; Jafar Husain: Let's not cheat.

179
00:09:09.404 --> 00:09:10.343
&gt;&gt; Jafar Husain: I think it's clientX and

180
00:09:10.343 --> 00:09:17.483
clientY.
&gt;&gt; Jafar Husain: Now I'm

181
00:09:17.483 --> 00:09:19.820
actually going to be listening.

182
00:09:19.820 --> 00:09:22.460
It's like I've created this event,
but I'm not listening to it.

183
00:09:22.460 --> 00:09:25.840
But now that I'm listening to it,
I can do something.

184
00:09:25.840 --> 00:09:28.830
Notice the one changing an object
that I didn't create here.

185
00:09:28.830 --> 00:09:31.130
That's what's happening in
do I'm changing the world.

186
00:09:31.130 --> 00:09:33.910
Now I've created a stream of
the events of interesting events.

187
00:09:33.910 --> 00:09:35.884
I'm gonna traverse that collection and

188
00:09:35.884 --> 00:09:38.910
do something with the information
I'm gonna change things.

