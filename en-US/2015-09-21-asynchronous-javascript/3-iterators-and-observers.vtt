WEBVTT

1
00:00:00.000 --> 00:00:04.086
[MUSIC]

2
00:00:04.086 --> 00:00:07.500
&gt;&gt; Jafar Husain: What's the difference
between an array and an event?

3
00:00:07.500 --> 00:00:10.336
This was a question asked to me actually
five years ago when I was at Microsoft

4
00:00:10.336 --> 00:00:12.287
when this technology was
just being developed, and

5
00:00:12.287 --> 00:00:13.850
the answer absolutely blew my mind.

6
00:00:13.850 --> 00:00:16.870
It totally changed the way in which I
approached asynchronous programming,

7
00:00:16.870 --> 00:00:21.120
and I hope that you guys feel the same way
after this presentation in this class.

8
00:00:21.120 --> 00:00:24.450
So events and arrays are both collections.

9
00:00:24.450 --> 00:00:26.920
I want you to start thinking about
them in exactly the same way.

10
00:00:26.920 --> 00:00:30.601
Even though they have very different
interfaces today in JavaScript, it doesn't

11
00:00:30.601 --> 00:00:33.875
have to be that way, and I don't think
it will be that way for much longer.

12
00:00:33.875 --> 00:00:36.923
So why don't we just program these things
the same way if they're both collection?

13
00:00:36.923 --> 00:00:42.935
Why do we program slurping data out of
arrays differently than we would events?

14
00:00:42.935 --> 00:00:44.140
We should approach them the same way.

15
00:00:45.310 --> 00:00:46.510
How do we get to this place?

16
00:00:46.510 --> 00:00:49.274
How do we get to thinking about these
things so, so differently when I just

17
00:00:49.274 --> 00:00:51.560
showed you that we can think
about them in a very similar way?

18
00:00:51.560 --> 00:00:55.138
Well, to answer that question,
you got to go all the way 20 years back,

19
00:00:55.138 --> 00:00:56.837
went 20 years back to 1994.

20
00:00:56.837 --> 00:01:00.370
It all comes from a little mistake
that was made almost 20 years ago.

21
00:01:01.410 --> 00:01:03.750
Who's got this book or read this book?

22
00:01:03.750 --> 00:01:04.750
One guy back there.

23
00:01:04.750 --> 00:01:06.783
This was a popular book.

24
00:01:06.783 --> 00:01:10.005
It was a book, the idea was of 20 years,
ago you had a lot of software engineers,

25
00:01:10.005 --> 00:01:11.827
and they got together,
and they said, well,

26
00:01:11.827 --> 00:01:15.055
people are solving the same problems again
and again, all through the industry,

27
00:01:15.055 --> 00:01:17.070
but they're solving it
slightly differently.

28
00:01:17.070 --> 00:01:21.980
What we need to take these common patterns
in software and put them in a book, and

29
00:01:21.980 --> 00:01:25.500
that's how we got the Design Patterns
book from the gang of four authors there,

30
00:01:25.500 --> 00:01:26.250
those four authors.

31
00:01:26.250 --> 00:01:28.070
And that was a tremendously
influential book.

32
00:01:28.070 --> 00:01:31.900
It was targeted at C++ developers and
Smalltalk developers, but nowadays,

33
00:01:31.900 --> 00:01:34.970
this notion of design patterns is
still popular in the Java community.

34
00:01:34.970 --> 00:01:37.590
It's probably less well-known
in the JavaScript community,

35
00:01:37.590 --> 00:01:39.310
but it was very influential, and

36
00:01:39.310 --> 00:01:42.480
it defined a lot of the patterns that
we use today in computer science.

37
00:01:42.480 --> 00:01:44.894
Now, there was a picture
at the back of this book.

38
00:01:44.894 --> 00:01:46.986
Don't worry,
we're not teaching all this stuff today.

39
00:01:46.986 --> 00:01:49.284
I'm actually just gonna focus
on two of these things.

40
00:01:49.284 --> 00:01:52.660
They are actually showing how all
these patterns were interrelated.

41
00:01:52.660 --> 00:01:55.980
But today, we're only gonna focus
on two of them, the iterator and

42
00:01:55.980 --> 00:01:57.558
observer pattern.

43
00:01:57.558 --> 00:02:00.945
So the iterator pattern is actually
something that's coming in JavaScript 6,

44
00:02:00.945 --> 00:02:03.640
which we'll talk a little bit
of how that's gonna work.

45
00:02:03.640 --> 00:02:05.930
Now, they did not think these
two patterns were related.

46
00:02:05.930 --> 00:02:08.720
They didn't even draw a line between them,
if I go back there.

47
00:02:08.720 --> 00:02:11.270
They don't even think that
this pattern are related.

48
00:02:11.270 --> 00:02:15.970
You see the observer way out there,
but I'm gonna suggest to you,

49
00:02:15.970 --> 00:02:16.830
they are related.

50
00:02:16.830 --> 00:02:19.820
They're actually deeply related, and
understanding their relationship

51
00:02:19.820 --> 00:02:22.950
is key to becoming an expert
in asynchronous programming.

52
00:02:22.950 --> 00:02:26.150
So here's how an iterator works,
it's very simple.

53
00:02:26.150 --> 00:02:28.140
You have a producer and a consumer.

54
00:02:28.140 --> 00:02:31.690
And the consumer requests information,

55
00:02:31.690 --> 00:02:36.230
one at a time, from the producer
until one of two things happens.

56
00:02:36.230 --> 00:02:39.260
The producer says,
I have no more information for you, or

57
00:02:39.260 --> 00:02:41.780
the producer says, an error occurred.

58
00:02:41.780 --> 00:02:43.130
Does that make sense?

59
00:02:43.130 --> 00:02:45.620
So how this looks in
JavaScript is in JavaScript 6,

60
00:02:45.620 --> 00:02:49.740
the next version of JavaScript, you're
gonna be able to walk up to any array and

61
00:02:49.740 --> 00:02:52.520
request what's called an iterator object.

62
00:02:52.520 --> 00:02:55.890
So think of this is a way of
a function returning multiple values.

63
00:02:55.890 --> 00:02:58.760
So, an iterator object has
a very simple interface.

64
00:02:58.760 --> 00:03:02.530
You can call next, and you'll get out this
little object, which gives you the value

65
00:03:02.530 --> 00:03:06.090
that you requested and also gives you
a little boolean indicating whether or

66
00:03:06.090 --> 00:03:08.960
not there are more values for you to get.

67
00:03:08.960 --> 00:03:11.260
So here, I got one, but
I see that we're not done, so

68
00:03:11.260 --> 00:03:15.530
I'm gonna call next again,
done now, I have 2.

69
00:03:15.530 --> 00:03:20.390
And I see we're still not done, so
I'm gonna call next again one final time,

70
00:03:20.390 --> 00:03:22.390
3, not done, call next.

71
00:03:22.390 --> 00:03:25.360
Finally, I get a little message that says,
you know what, we're done.

72
00:03:25.360 --> 00:03:27.957
So go back to that
consumer-producer relationship.

73
00:03:27.957 --> 00:03:32.530
I'm the consumer, in this case, and I'm
just pulling values out of this producer,

74
00:03:32.530 --> 00:03:33.813
which is the iterator.

75
00:03:33.813 --> 00:03:36.572
Pulling values out until
the producer says, I'm done,

76
00:03:36.572 --> 00:03:38.017
no more information for you.

77
00:03:38.017 --> 00:03:42.717
So the gang of four to find
this pattern in the 80s.

78
00:03:42.717 --> 00:03:44.906
I think 80s early 90s, and whereas now,

79
00:03:44.906 --> 00:03:47.750
it's actually just making
its way into JavaScript.

80
00:03:47.750 --> 00:03:52.483
So it's a nice convention for
having any data structure.

81
00:03:52.483 --> 00:03:55.332
I might have a set or a map or
a vastly different data structure.

82
00:03:55.332 --> 00:03:58.129
It doesn't matter what it is,
I can walk up to a data structure, and

83
00:03:58.129 --> 00:03:59.357
using this simple protocol,

84
00:03:59.357 --> 00:04:01.880
I can pull all the elements out
of it sequentially one by one.

85
00:04:01.880 --> 00:04:02.770
Does that make sense?

86
00:04:02.770 --> 00:04:04.996
That's why they defined this
particular design pattern,

87
00:04:04.996 --> 00:04:07.228
so that you could walk up to
any particular data structure.

88
00:04:07.228 --> 00:04:09.570
You don't know anything about
its internal representation, but

89
00:04:09.570 --> 00:04:11.129
you can still consume the elements inside.

90
00:04:11.129 --> 00:04:14.532
And this is actually the underlying
technology that enables the new

91
00:04:14.532 --> 00:04:15.312
for-of loop.

92
00:04:15.312 --> 00:04:18.229
There's a new loop coming in JavaScript 6,
specifically for consuming this, so

93
00:04:18.229 --> 00:04:20.285
you don't have to write all
of this boilerplate code.

94
00:04:20.285 --> 00:04:22.506
You can write what just looks
like a simple for loop.

95
00:04:22.506 --> 00:04:26.750
So Map and Filter and ConcatAll,
in addition to being implemented over

96
00:04:26.750 --> 00:04:29.945
an array,
can also be implemented over an Iterator.

97
00:04:29.945 --> 00:04:32.040
Let's just think about that for
a moment, right?

98
00:04:32.040 --> 00:04:35.733
I can write a map function, which given
an iterator returns another Iterator.

99
00:04:35.733 --> 00:04:37.976
And every single time
it pulls a value out,

100
00:04:37.976 --> 00:04:42.680
it applies that map function to the value
and then returns the translated value.

101
00:04:42.680 --> 00:04:45.310
So you can apply a Map and
a Filter and a ConcatAll.

102
00:04:45.310 --> 00:04:46.824
ConcatAll would be
a two-dimensional iterator,

103
00:04:46.824 --> 00:04:48.343
you'd flatten it into one
dimensional iterator.

104
00:04:48.343 --> 00:04:51.753
All the operations I've shown you
thus far are actually at their root.

105
00:04:51.753 --> 00:04:54.979
Probably, they can be
expressed over iterators.

106
00:04:56.170 --> 00:04:59.880
Now, I'm gonna show you another pattern
that the design pattern guys expressed,

107
00:04:59.880 --> 00:05:01.700
and this was all about you wise.

108
00:05:01.700 --> 00:05:04.326
They were concerned about how
is it in the user interface,

109
00:05:04.326 --> 00:05:05.725
if you have a change to a model.

110
00:05:05.725 --> 00:05:09.383
How do you communicate to the view that
something is changed or vice versa?

111
00:05:09.383 --> 00:05:12.625
How does a view communicate to the model
that a user wants to do something?

112
00:05:12.625 --> 00:05:15.130
And they define this pattern
called the observer pattern.

113
00:05:15.130 --> 00:05:17.520
Now, probably most people in this room
are familiar with the observer pattern,

114
00:05:17.520 --> 00:05:19.716
because it's something we
in JavaScript use everyday.

115
00:05:19.716 --> 00:05:21.848
Because, it just so

116
00:05:21.848 --> 00:05:26.850
they still find a way that you could
add a function to some data producer.

117
00:05:26.850 --> 00:05:31.619
And instead of the consumer pulling
the data out one of the time,

118
00:05:31.619 --> 00:05:35.433
instead the producer pushes data action,
right?

119
00:05:35.433 --> 00:05:37.140
That's how an event works.

120
00:05:37.140 --> 00:05:41.020
You hand me a callback, and
then when I wanna send you information,

121
00:05:41.020 --> 00:05:44.890
I'm the producer,
I push you information one item at a time.

122
00:05:44.890 --> 00:05:46.820
Does that make sense?

123
00:05:46.820 --> 00:05:48.440
So when one of these patterns
in the iterator pattern,

124
00:05:48.440 --> 00:05:51.360
the consumer is in control,
the consumer is pulling values out of,

125
00:05:51.360 --> 00:05:53.280
it decides when it gets the next value.

126
00:05:53.280 --> 00:05:56.190
But in the observer pattern,
the producer is in control.

127
00:05:56.190 --> 00:05:58.395
The producer decides when
you get the next value,

128
00:05:58.395 --> 00:06:01.060
cuz it calls your callback and
pushes it at you.

129
00:06:01.060 --> 00:06:03.090
Does that makes sense?

130
00:06:03.090 --> 00:06:06.820
So it's really, these two patterns are
about doing the same thing, fundamentally.

131
00:06:06.820 --> 00:06:09.950
They're about a producer getting
a consumer items one at a time.

132
00:06:09.950 --> 00:06:11.930
The only difference is who's in control.

133
00:06:13.240 --> 00:06:15.560
But the design patterns
guys made a little mistake.

134
00:06:15.560 --> 00:06:17.290
So this shouldn't blow anybody's mind.

135
00:06:17.290 --> 00:06:18.320
This is just what happens, right?

136
00:06:18.320 --> 00:06:20.450
I move my mouse around,
and we get the results.

137
00:06:20.450 --> 00:06:21.619
They did a little mistake.

138
00:06:24.519 --> 00:06:26.992
&gt;&gt; Jafar Husain: They failed to see this
connection, that at some deep level,

139
00:06:26.992 --> 00:06:29.760
these things were both
about the same thing.

140
00:06:29.760 --> 00:06:33.739
We're both progressive about progressively
sending information to a consumer, and

141
00:06:33.739 --> 00:06:37.237
they didn't see that the iterator and
observer pattern were symmetrical.

142
00:06:37.237 --> 00:06:39.352
And so this is how you
understand the observer pattern,

143
00:06:39.352 --> 00:06:41.562
if you already understand
the iterator pattern, right?

144
00:06:41.562 --> 00:06:43.755
The observer pattern iterates you,
that's what's happening.

145
00:06:43.755 --> 00:06:46.843
At the observer,
the producer is iterating you, right?

146
00:06:46.843 --> 00:06:52.268
So they missed this symmetry,
and as a result 20 years later,

147
00:06:52.268 --> 00:06:59.530
we think about asynchronous programming
very differently than we probably should.

148
00:06:59.530 --> 00:07:02.251
There is a subtle difference
between the iterator and

149
00:07:02.251 --> 00:07:05.408
the observer pattern as they
outlined it in design patterns.

150
00:07:05.408 --> 00:07:07.109
Remember what I said about
the iterator pattern.

151
00:07:07.109 --> 00:07:10.865
You can pull values out until
one of two things happens.

152
00:07:10.865 --> 00:07:11.797
What are those two things?

153
00:07:11.797 --> 00:07:14.150
Can anybody tell me?

154
00:07:14.150 --> 00:07:14.820
&gt;&gt; Speaker 2: Error and then array.

155
00:07:14.820 --> 00:07:16.720
&gt;&gt; Jafar Husain: Error,
and it's done, right?

156
00:07:16.720 --> 00:07:18.785
No more data, or the producer throws.

157
00:07:18.785 --> 00:07:21.016
That means if I call next,
they could throw, right?

158
00:07:21.016 --> 00:07:23.190
And that's how I would know
that an error occurred.

159
00:07:23.190 --> 00:07:26.940
But with the observer pattern,
they failed to add any of those

160
00:07:26.940 --> 00:07:30.890
in any well-defined way of the producer
expressing to the consumer that,

161
00:07:30.890 --> 00:07:34.720
A, there was no more data, And
B, that an error occurred.

162
00:07:35.860 --> 00:07:39.170
Let's go back to our dawn of
that listener example, right?

163
00:07:39.170 --> 00:07:41.270
You pass one callback to this thing.

164
00:07:41.270 --> 00:07:42.480
The only thing that you can receive,

165
00:07:42.480 --> 00:07:45.170
the only message you can receive from
the producer is here's some more data.

166
00:07:46.170 --> 00:07:47.070
And why did they do that?

167
00:07:47.070 --> 00:07:50.040
Well, they were very focused
on the event used case,

168
00:07:50.040 --> 00:07:52.880
they were very focused on solving for
UI events.

169
00:07:52.880 --> 00:07:55.880
And the thing about the UI events is
there might always be another one, right,

170
00:07:55.880 --> 00:07:57.580
because somebody could always
click another mouse click,

171
00:07:57.580 --> 00:07:59.140
they could always move the mouse again.

172
00:07:59.140 --> 00:08:02.472
And so they weren't really thinking that,
you need this notion of completion,

173
00:08:02.472 --> 00:08:05.228
because they work very narrowly
thinking about how the model events.

174
00:08:05.228 --> 00:08:07.896
But today, 20 years later in JavaScript,

175
00:08:07.896 --> 00:08:10.718
we deal with push streams
that end all the time.

176
00:08:10.718 --> 00:08:13.734
Anybody ever worked with a node stream,
for example,

177
00:08:13.734 --> 00:08:15.973
which is an IO stream that you use a node?

178
00:08:15.973 --> 00:08:17.980
Obviously, IO streams can end, right?

179
00:08:17.980 --> 00:08:22.100
So we need some well-defined way for
a producer telling a consumer,

180
00:08:22.100 --> 00:08:27.110
I've got no more data for you, right?

181
00:08:27.110 --> 00:08:31.700
So because we missed this standard
way of these these three semantics,

182
00:08:31.700 --> 00:08:34.300
there's no well-defined way of
saying completion or error.

183
00:08:34.300 --> 00:08:38.833
Today on the web, we have a proliferation
of different stream APIs, and

184
00:08:38.833 --> 00:08:41.153
all of them are slightly different.

185
00:08:41.153 --> 00:08:45.519
Some of them might have a way of
indicating completion but not an error.

186
00:08:45.519 --> 00:08:47.936
Some of them have no way of
indicating completion or an error,

187
00:08:47.936 --> 00:08:50.630
or they have a some ad-hoc mechanism
where I'll send you an object,

188
00:08:50.630 --> 00:08:53.410
but then if you check this property etc,
then you know it's done.

189
00:08:53.410 --> 00:08:55.790
We have all these different interfaces.

190
00:08:55.790 --> 00:08:58.680
Whereas if you look at iteration
where the consumer is in control,

191
00:08:58.680 --> 00:08:59.680
we have one interface.

192
00:08:59.680 --> 00:09:02.210
It's just standardized,
everybody uses it everywhere.

193
00:09:02.210 --> 00:09:03.380
This is a mistake.

194
00:09:03.380 --> 00:09:08.195
We should have one interface that we
use for push streams in JavaScript, and

195
00:09:08.195 --> 00:09:11.995
that is something very much
like at least the observable.

196
00:09:11.995 --> 00:09:15.891
So if you can have an iterable, so
an example of an array is iterable,

197
00:09:15.891 --> 00:09:19.605
which is something that you can ask for
an iterator from, right?

198
00:09:19.605 --> 00:09:22.215
So if we go back,
an array isn't an iterator.

199
00:09:22.215 --> 00:09:25.285
It's something that you can
ask to give you an iterator.

200
00:09:25.285 --> 00:09:27.144
Well, the opposite of an iterable,

201
00:09:27.144 --> 00:09:30.870
is something that you can ask to give
you an iterator, is an observable.

202
00:09:30.870 --> 00:09:34.200
And the way I want you guys to think about
an observable is that it's a collection

203
00:09:34.200 --> 00:09:35.830
that arrives over time.

204
00:09:35.830 --> 00:09:37.580
Does that make sense?

205
00:09:37.580 --> 00:09:39.676
A collection that arrives over time.

206
00:09:46.070 --> 00:09:47.251
&gt;&gt; Speaker 2: There's
a question we got here.

207
00:09:47.251 --> 00:09:48.514
&gt;&gt; Jafar Husain: Yeah.

208
00:09:48.514 --> 00:09:51.041
&gt;&gt; Speaker 3: Can you read it?

209
00:09:51.041 --> 00:09:58.490
&gt;&gt; Jafar Husain: How different
are iterators from generators?

210
00:09:58.490 --> 00:10:01.348
So the question is how different
are iterators from generators?

211
00:10:01.348 --> 00:10:05.156
Would it be naive to say that iterators,
you can get from arrays via iterator,

212
00:10:05.156 --> 00:10:07.882
by calling the iterator method,
which we saw earlier?

213
00:10:12.592 --> 00:10:16.181
&gt;&gt; Jafar Husain: And that iterator
inherits from generators defined for

214
00:10:16.181 --> 00:10:17.890
an instance of array.

215
00:10:17.890 --> 00:10:21.930
So explaining that question will
require me to explain generators and

216
00:10:21.930 --> 00:10:23.718
what they mean in JavaScript.

217
00:10:23.718 --> 00:10:25.619
And frankly, that's a very rich and

218
00:10:25.619 --> 00:10:29.187
complicated topic that isn't
tremendously relevant to this here.

219
00:10:29.187 --> 00:10:30.728
But I can answer that question,

220
00:10:30.728 --> 00:10:34.492
which is to say that it's fair to think
of a generator as something which you can

221
00:10:34.492 --> 00:10:37.536
both pull information out of as
well as push information into.

222
00:10:37.536 --> 00:10:41.050
And the iterator that you get out of
an array is just about the pull side.

223
00:10:41.050 --> 00:10:44.010
So for those of you in the room,
you don't necessarily understand that.

224
00:10:44.010 --> 00:10:45.370
That's okay,
you don't need to know that for

225
00:10:45.370 --> 00:10:48.510
this particular talk, but hopefully,
I have answered that question.

226
00:10:48.510 --> 00:10:52.180
So for an iterator when you get out
of an array, all you can do is pull.

227
00:10:52.180 --> 00:10:56.090
You could you could push information back
in by passing a parameter to next, but

228
00:10:56.090 --> 00:10:57.808
the array is gonna
ignore that information.

229
00:10:57.808 --> 00:10:58.939
So generator is this object,

230
00:10:58.939 --> 00:11:01.660
this weird little object we'll talk
about at some point in JavaScript,

231
00:11:01.660 --> 00:11:05.110
which is you can pull information out
of but also send information back into.

232
00:11:05.110 --> 00:11:07.710
No particular relevance, and I don't
want you to think about it too hard.

