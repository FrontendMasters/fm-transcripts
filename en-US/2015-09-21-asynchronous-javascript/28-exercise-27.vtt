WEBVTT

1
00:00:00.000 --> 00:00:03.888
[MUSIC]

2
00:00:03.888 --> 00:00:05.366
&gt;&gt; Jafar Husain: Let's
move on to stock ticker,

3
00:00:05.366 --> 00:00:08.890
how many folks actually got to
this question of got past 26.

4
00:00:08.890 --> 00:00:11.860
Okay we got one, two, three, excellent.

5
00:00:11.860 --> 00:00:14.690
So this question is
actually an easy question.

6
00:00:14.690 --> 00:00:17.476
We're going to take it a little
easy now we've taken it real hard.

7
00:00:17.476 --> 00:00:21.783
What we're gonna do is we're gonna go
through this historical list of stock

8
00:00:21.783 --> 00:00:22.640
prices.

9
00:00:22.640 --> 00:00:28.060
So these are the NASDAQ stock prices from
who knows how long and all we wanna do

10
00:00:28.060 --> 00:00:34.190
is we want to just filter it for
the ones that are only Microsoft.

11
00:00:34.190 --> 00:00:38.310
And then I believe we want
to just print it out so

12
00:00:38.310 --> 00:00:43.923
it looks like we just want to print
out all of the NASDAQ prices.

13
00:00:48.241 --> 00:00:49.900
&gt;&gt; Jafar Husain: So
I think it's price records.

14
00:00:49.900 --> 00:00:51.200
We just want to look for Microsoft.

15
00:00:53.340 --> 00:00:56.692
So the name is MSFT.

16
00:01:09.043 --> 00:01:09.856
&gt;&gt; Jafar Husain: I'm gonna run this.

17
00:01:13.615 --> 00:01:14.613
&gt;&gt; Jafar Husain: What's going on here?

18
00:01:16.295 --> 00:01:17.473
&gt;&gt; Jafar Husain: Does
this surprise anybody?

19
00:01:21.331 --> 00:01:22.822
&gt;&gt; Jafar Husain: Why would
these results trickle in?

20
00:01:22.822 --> 00:01:27.080
Every single result up till now has
just popped right up on to the screen.

21
00:01:27.080 --> 00:01:31.380
Well what's actually going on here is
instead of querying a huge historical

22
00:01:31.380 --> 00:01:36.370
database of NASDAQ prices, we are querying
live data now in reality I'm actually

23
00:01:36.370 --> 00:01:40.270
spoofing this data but the point is we're
working over an asynchronous data source.

24
00:01:40.270 --> 00:01:43.440
So we could just as easily could actually
be hitting the NASDAQ right now and

25
00:01:43.440 --> 00:01:45.990
querying for real time stock prices.

26
00:01:45.990 --> 00:01:50.880
So now we've actually made the switch
from querying arrays, historical data,

27
00:01:50.880 --> 00:01:53.780
that's just been sitting in
a database somewhere or in memory.

28
00:01:53.780 --> 00:01:55.668
To querying data as it comes in.

29
00:01:55.668 --> 00:01:56.335
&gt;&gt; Audience: Yay!
&gt;&gt; Jafar Husain: Yay.

30
00:01:56.335 --> 00:02:00.770
[APPLAUSE] Asynchronous programming,
I promised you'd get some, right?

31
00:02:00.770 --> 00:02:05.620
So now we're finally realizing hopefully
that all the lessons that we've been

32
00:02:05.620 --> 00:02:08.960
learning about how to process data up till
now, every single function you've learned.

33
00:02:08.960 --> 00:02:12.630
If you can master that you can query
any asynchronous data source out there,

34
00:02:12.630 --> 00:02:15.200
whether it's real time stock information,
right?

35
00:02:15.200 --> 00:02:17.360
Whether it's an event,
whether it's a mouse move event.

36
00:02:17.360 --> 00:02:21.220
You can assemble it all together to
build complex asynchronous programs

37
00:02:21.220 --> 00:02:23.360
completely declaratively.

38
00:02:23.360 --> 00:02:28.710
So, let's move on and start exploring this
new type, which I will call an observable.

39
00:02:28.710 --> 00:02:30.440
So you guys saw in
the presentation yesterday.

40
00:02:30.440 --> 00:02:31.290
Is that a question?

41
00:02:31.290 --> 00:02:34.182
&gt;&gt; Audience: Is the reason
this works because we're

42
00:02:34.182 --> 00:02:37.880
using ReactiveX's
implementation of forEach?

43
00:02:37.880 --> 00:02:39.090
&gt;&gt; Jafar Husain: That's exactly right.

44
00:02:39.090 --> 00:02:42.020
So an observable has a forEach
implementation, right?

45
00:02:42.020 --> 00:02:45.539
The only difference between
the arrays forEach implementation,

46
00:02:45.539 --> 00:02:49.682
which blocks until all the data in
the array's been slurped up and processed,

47
00:02:49.682 --> 00:02:53.799
is the observables forEach implementation
finishes immediately, right?

48
00:02:53.799 --> 00:02:55.070
Cuz it doesn't block.

49
00:02:55.070 --> 00:02:56.940
But as the data arrives over time,

50
00:02:56.940 --> 00:03:00.650
cuz let's recall an observable's
a collection that arrives over time.

51
00:03:00.650 --> 00:03:02.580
As that data arrives over time,

52
00:03:02.580 --> 00:03:06.130
this function that handles
that data gets processed.

53
00:03:06.130 --> 00:03:09.190
Now let's remember forEach is
different than every other function

54
00:03:09.190 --> 00:03:11.970
that I've taught you guys yesterday and
today.

55
00:03:11.970 --> 00:03:12.660
What's different about it?

56
00:03:12.660 --> 00:03:14.278
Can anybody tell me?

57
00:03:14.278 --> 00:03:17.540
&gt;&gt; Audience: It doesn't modify the data,
it doesn't return an array.

58
00:03:17.540 --> 00:03:19.260
&gt;&gt; Jafar Husain: It
doesn't return an array.

59
00:03:19.260 --> 00:03:22.280
Every single other function I've taught
you up till now has returned an array,

60
00:03:22.280 --> 00:03:23.910
with the exception of forEach.

61
00:03:23.910 --> 00:03:25.498
And that's an important distinction.

62
00:03:25.498 --> 00:03:29.235
What we're gonna be doing as we write
code, as you've seen up till now,

63
00:03:29.235 --> 00:03:32.606
is we're gonna be using map,
filter, reduce, concatAll, and

64
00:03:32.606 --> 00:03:34.845
zip to be building the collection we want.

65
00:03:34.845 --> 00:03:38.078
And then finally once we've got
a collection that's exactly what we want,

66
00:03:38.078 --> 00:03:41.564
whether it's an event or an array, and
we're ready to process the data inside and

67
00:03:41.564 --> 00:03:44.770
do something with it, then and only then,
do we terminate with a forEach.

68
00:03:46.110 --> 00:03:48.820
So those are really thinking
about things very separately.

69
00:03:48.820 --> 00:03:52.330
First we're building the collection we
want, but notice we don't change anything.

70
00:03:52.330 --> 00:03:55.260
When we build the collection we want,
we don't change anything at all.

71
00:03:55.260 --> 00:03:57.710
When you take an array and
you map it and you create a new array,

72
00:03:57.710 --> 00:03:59.140
you haven't changed the old array.

73
00:03:59.140 --> 00:04:01.080
When you filter it,
you haven't change the old array.

74
00:04:01.080 --> 00:04:04.618
Everything up to now it's been taking
data in and creating new data, but

75
00:04:04.618 --> 00:04:07.582
now as we begin to use forEach
we move into a different phase.

76
00:04:07.582 --> 00:04:10.606
We say you know what, now that I've
created exactly the data I want,

77
00:04:10.606 --> 00:04:13.579
exactly the collection that I want,
I'm gonna take the data out and

78
00:04:13.579 --> 00:04:15.111
now I'm gonna change something.

79
00:04:15.111 --> 00:04:18.715
So inside a forEach you can expect
to see us modifying things, so

80
00:04:18.715 --> 00:04:22.880
printing a record is a great example
of modifying something right?

81
00:04:22.880 --> 00:04:25.610
I've written something out to the council,
that is actually a change.

82
00:04:25.610 --> 00:04:28.660
Some where there's a buffer where
it's value has been changed.

83
00:04:28.660 --> 00:04:31.340
Right, so
we're actually changing a global object.

84
00:04:31.340 --> 00:04:34.646
In this case the console, whereas in map
and filter and reduce and concatAll,

85
00:04:34.646 --> 00:04:36.290
and so on and so forth.

86
00:04:36.290 --> 00:04:39.560
I only said that you could change objects
that you yourself created, right.

87
00:04:39.560 --> 00:04:41.750
If you hand an object into
the function for map,

88
00:04:41.750 --> 00:04:43.930
you shouldn't be modifying
with that object.

89
00:04:43.930 --> 00:04:47.295
So it's a very different way of thinking
about what you're trying to do is

90
00:04:47.295 --> 00:04:48.881
you're carving your program up.

91
00:04:48.881 --> 00:04:51.170
You're taking the data,
which is really just computation,

92
00:04:51.170 --> 00:04:53.468
where you're taking data in and
you're computing new data.

93
00:04:53.468 --> 00:04:56.700
And you're separating it
from data that changes data.

94
00:04:56.700 --> 00:04:59.301
Can anybody tell me why that would
be a positive or negative thing?

95
00:05:02.747 --> 00:05:03.720
&gt;&gt; Jafar Husain: What's the point?

96
00:05:03.720 --> 00:05:05.931
What's the point of separating data that
doesn't change anything from data that

97
00:05:05.931 --> 00:05:06.516
changes something?

98
00:05:09.998 --> 00:05:14.148
&gt;&gt; Jafar Husain: Well there's a whole
class of bugs that just can't exist in

99
00:05:14.148 --> 00:05:16.812
code that doesn't change anything.

100
00:05:16.812 --> 00:05:17.900
A whole class of bugs.

101
00:05:17.900 --> 00:05:21.200
Has anybody here ever run off
the end of an array, for example?

102
00:05:21.200 --> 00:05:24.344
Or had a bug because you change
the variable before you changed

103
00:05:24.344 --> 00:05:25.380
another variable?

104
00:05:26.900 --> 00:05:29.930
These are a class of bugs that
sometimes are called state bugs and

105
00:05:29.930 --> 00:05:33.630
remember when I told you the enemy of
a complex asynchronous program was?

106
00:05:33.630 --> 00:05:37.102
State, it's creating all those variables
to track all those asynchronous

107
00:05:37.102 --> 00:05:37.923
things going on.

108
00:05:37.923 --> 00:05:39.800
That's what we're trying to eliminate.

109
00:05:39.800 --> 00:05:42.820
The interesting thing about what we're
learning today is that asynchronous

110
00:05:42.820 --> 00:05:45.194
programming is,
another way of thinking about it is,

111
00:05:45.194 --> 00:05:47.190
it's sometimes called
reactive programming.

112
00:05:47.190 --> 00:05:48.720
Who's heard that term
reactive programming?

113
00:05:49.920 --> 00:05:51.380
All right, a few people, right?

114
00:05:51.380 --> 00:05:54.724
Now asynchronous programming in JavaScript
is necessarily reactive programming.

115
00:05:54.724 --> 00:05:57.820
What reactive programming means is,
it's like the Hollywood principle.

116
00:05:57.820 --> 00:05:59.880
Don't call me, I'll call you.

117
00:05:59.880 --> 00:06:01.967
So you guys hand me a call back.

118
00:06:01.967 --> 00:06:05.764
And then I'm gonna call that callback
at a totally unpredictable time, right?

119
00:06:05.764 --> 00:06:10.520
So you subscribe to an array,
you hand it a callback,

120
00:06:10.520 --> 00:06:13.610
and then you don't know when that
array's gonna call that callback, right.

121
00:06:13.610 --> 00:06:16.560
So it's a bit of an odd position because
when you're running just synchronous code

122
00:06:16.560 --> 00:06:19.130
top to bottom,
you control when your code is called.

123
00:06:19.130 --> 00:06:21.380
But as soon as you hand
it to another function,

124
00:06:21.380 --> 00:06:24.510
that function might call
it any arbitrary time.

125
00:06:24.510 --> 00:06:27.050
Now if you structure your code.

126
00:06:27.050 --> 00:06:30.680
So you use use a lot of state, you change
a lot of variables that might be changed.

127
00:06:30.680 --> 00:06:32.660
Excuse me by a lot of the other functions.

128
00:06:32.660 --> 00:06:35.180
Well all of a sudden
that's a real hard model

129
00:06:35.180 --> 00:06:37.770
when you don't know when your
code is going to be called.

130
00:06:37.770 --> 00:06:42.385
So that's why I'm teaching you functional
programming, this idea of functions,

131
00:06:42.385 --> 00:06:46.872
which take data in and generate new data
at the same time as reactive programming.

132
00:06:46.872 --> 00:06:49.822
Which is that idea of you giving
somebody else a callback and

133
00:06:49.822 --> 00:06:53.560
them pushing to you,
deciding when your code gets called.

134
00:06:53.560 --> 00:06:55.340
Even though these are two
separate concepts,

135
00:06:55.340 --> 00:06:58.000
the reason why we learn them
together is that it's very,

136
00:06:58.000 --> 00:07:02.280
very hard to build a program where
you're changing a bunch of state and

137
00:07:02.280 --> 00:07:05.450
variables, and you can't predict
when your code is gonna get called.

138
00:07:05.450 --> 00:07:06.360
Because who knows?

139
00:07:06.360 --> 00:07:08.050
Your code might be called
in any particular order.

140
00:07:08.050 --> 00:07:11.550
And if you're changing variables, it's
very hard to structure a program that way.

141
00:07:11.550 --> 00:07:15.550
So if we take these two notions and put
them together, which is to say that look

142
00:07:15.550 --> 00:07:19.610
I'm never gonna change any data other
than the data I generally create and own.

143
00:07:19.610 --> 00:07:21.600
And you combine that with
reactive programming,

144
00:07:21.600 --> 00:07:24.130
which is like I don't know when
my code's gonna get called.

145
00:07:24.130 --> 00:07:28.130
By not modifying any shared data,
all of a sudden it's a wonderful thing,

146
00:07:28.130 --> 00:07:31.160
because now it doesn't matter when
your code gets called, right?

147
00:07:31.160 --> 00:07:34.300
If you're not changing a global object or
share data,

148
00:07:34.300 --> 00:07:37.630
your code could get called in two seconds
or it could get called in five seconds or

149
00:07:37.630 --> 00:07:40.310
it could get called in ten seconds and
it will just work.

150
00:07:40.310 --> 00:07:44.086
That's why we take all of our code that
changes the world, global objects,

151
00:07:44.086 --> 00:07:45.748
objects that we didn't create.

152
00:07:45.748 --> 00:07:50.910
Like in this case the console, and
we move it all into the forEach, right?

153
00:07:50.910 --> 00:07:53.020
That's when we decide that we're
ready to consume the data,

154
00:07:53.020 --> 00:07:57.100
we're ready to take it out and we're gonna
limit all of our change code, all of our

155
00:07:57.100 --> 00:08:01.530
do code, do things, change the world code,
inside of the forEach function.

156
00:08:01.530 --> 00:08:05.750
Whereas everything above can
run in any particular order.

157
00:08:05.750 --> 00:08:09.450
Well maybe the callback gets called in two
seconds, maybe calls and in five seconds.

158
00:08:09.450 --> 00:08:10.760
It doesn't matter.

159
00:08:10.760 --> 00:08:13.610
And so that's why it's so
important to learn functional programming.

160
00:08:13.610 --> 00:08:16.990
This ability of I'm not gonna change
things, I'm gonna take data and

161
00:08:16.990 --> 00:08:18.390
I'm gonna create new data.

162
00:08:18.390 --> 00:08:22.460
Because it makes your code safe
to run in any particular order.

163
00:08:22.460 --> 00:08:24.770
Does that make sense at
a high level anyways?

164
00:08:24.770 --> 00:08:27.520
Right, if you can't predict when your
code's gonna get called, well you better

165
00:08:27.520 --> 00:08:31.380
only change your own objects,
not objects that somebody else can change.

166
00:08:31.380 --> 00:08:34.560
Cuz who knows what the state of
the world will be in two minutes, right?

167
00:08:34.560 --> 00:08:35.820
Or ten minutes.

168
00:08:35.820 --> 00:08:37.750
So that's why we're teaching
these two concepts together.

169
00:08:37.750 --> 00:08:40.130
But it's hard to absorb both
of these concepts together and

170
00:08:40.130 --> 00:08:43.400
that's why I spent the first day on
what is by far the hardest part.

171
00:08:43.400 --> 00:08:46.200
Which is learning to change the way
you think about code from I'm gonna

172
00:08:46.200 --> 00:08:47.950
change this variable, I'm gonna loop.

173
00:08:47.950 --> 00:08:50.600
Even a loop itself involves
changing a variable, right?

174
00:08:50.600 --> 00:08:52.600
A for loop involves changing a counter.

175
00:08:52.600 --> 00:08:55.660
That's the kind of change that we want to
avoid cuz you create a counter variable

176
00:08:55.660 --> 00:08:58.070
and every time around
the loop you change it again.

177
00:08:58.070 --> 00:09:01.360
Even something as simple as that,
all of a sudden the order and

178
00:09:01.360 --> 00:09:04.910
dependence of your program is sort of
dictated by when this counter changes.

179
00:09:04.910 --> 00:09:07.220
We're trying to get away from
any kind of code changes.

180
00:09:07.220 --> 00:09:09.449
So the first day was learning all
about functional programming.

181
00:09:09.449 --> 00:09:12.108
And today we're gonna be learning
about reactive programming,

182
00:09:12.108 --> 00:09:14.340
asynchronous reactive programming,
technically.

