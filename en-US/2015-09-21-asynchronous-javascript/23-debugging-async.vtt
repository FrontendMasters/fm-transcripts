WEBVTT

1
00:00:00.000 --> 00:00:04.754
[MUSIC]

2
00:00:04.754 --> 00:00:08.915
&gt;&gt; Off Camera 1: If you go back up, let's
say in our JSON we had one interesting

3
00:00:08.915 --> 00:00:14.439
moments that had two type middles,
let's say, that wasn't actually unique and

4
00:00:14.439 --> 00:00:18.510
we just thought it was,
what would happen in our code here?

5
00:00:18.510 --> 00:00:19.920
&gt;&gt; Jafar Husain: Good question.

6
00:00:19.920 --> 00:00:20.750
Good question.

7
00:00:20.750 --> 00:00:23.720
Well, this case, nothing,
because we're running it through zip.

8
00:00:23.720 --> 00:00:25.640
So if one element,
one array has two elements, and

9
00:00:25.640 --> 00:00:28.930
the other array has one element,
zip just stop zipping up.

10
00:00:28.930 --> 00:00:31.490
Just like when the zipper doesn't
have a tooth on one side, right?

11
00:00:31.490 --> 00:00:33.250
You're like, struggling with that zipper.

12
00:00:33.250 --> 00:00:36.098
It's because, it stops as soon as
there isn't an element on both sides.

13
00:00:41.059 --> 00:00:41.750
&gt;&gt; Jafar Husain: Yeah.

14
00:00:41.750 --> 00:00:44.740
That may or may not be a bug or what
you want but that's how it'll behave..

15
00:00:44.740 --> 00:00:46.591
Yeah?
&gt;&gt; Off Camera 2: There's a question about

16
00:00:46.591 --> 00:00:49.796
testing, when building up
these long chains of commands,

17
00:00:49.796 --> 00:00:51.990
what is the best strategy to debug them?

18
00:00:51.990 --> 00:00:55.780
&gt;&gt; Jafar Husain: So, that to me,
is a really important question, right.

19
00:00:55.780 --> 00:00:58.290
It is not that you cannot
debug these programs.

20
00:00:58.290 --> 00:01:00.740
It's that you can't debug them in
the way that you're used to, right.

21
00:01:00.740 --> 00:01:04.450
The way, when you're used to debugging
imperative programs, which do something,

22
00:01:04.450 --> 00:01:06.680
and then they do something else,
and then they do something else.

23
00:01:06.680 --> 00:01:09.750
Sure enough, the debugging tools we
have are built to accommodate that.

24
00:01:09.750 --> 00:01:12.830
Step in, step over, so on and so forth.

25
00:01:12.830 --> 00:01:16.590
But let's debug this, let's actually
see if we can debug this program.

26
00:01:16.590 --> 00:01:17.300
It is unquestionable.

27
00:01:17.300 --> 00:01:18.900
The first thing I wanna level with you.

28
00:01:18.900 --> 00:01:19.940
It's harder to debug this.

29
00:01:19.940 --> 00:01:23.120
There's no two ways about it it's easier
if you just have 15 lines of code and

30
00:01:23.120 --> 00:01:25.530
you just wanna step over
them one on another.

31
00:01:25.530 --> 00:01:27.780
What we're doing here though,
is one of the reasons it's so

32
00:01:27.780 --> 00:01:31.440
much harder to debug this code, is cuz
we're taking a large amount of code,

33
00:01:31.440 --> 00:01:33.650
that we would have written in line, and

34
00:01:33.650 --> 00:01:36.670
we're making it somebody else's
problem and putting it into a library.

35
00:01:36.670 --> 00:01:38.560
That's a good problem to have.

36
00:01:38.560 --> 00:01:41.350
Right, now all of a sudden the code you
would have had to write is now being

37
00:01:41.350 --> 00:01:42.540
written by somebody else.

38
00:01:42.540 --> 00:01:44.970
And so often, if you're trying to step
through your code kind of jumping

39
00:01:44.970 --> 00:01:45.980
around, right.

40
00:01:45.980 --> 00:01:49.100
But understand, remember why that's
happening, it's because you're taking on

41
00:01:49.100 --> 00:01:52.350
an enormous amount of code and
somebody else is now writing it for you.

42
00:01:52.350 --> 00:01:53.070
So, yes,

43
00:01:53.070 --> 00:01:56.910
it is harder because all the sudden
somebody else is calling your code, right.

44
00:01:56.910 --> 00:01:58.740
That's what asynchronous
program is all about.

45
00:01:58.740 --> 00:02:01.560
You're handing your code to somebody
else and trusting them to call it.

46
00:02:01.560 --> 00:02:04.350
Well, that makes it harder to
follow the control flow, right?

47
00:02:04.350 --> 00:02:08.310
But that, you get amazing things for being
able to do asynchronous programs, right?

48
00:02:08.310 --> 00:02:10.180
We get more concurrency,
more efficient things,

49
00:02:10.180 --> 00:02:12.890
more reactive programs that
respond to user interfaces.

50
00:02:12.890 --> 00:02:14.330
So let's not forget why we get that.

51
00:02:14.330 --> 00:02:17.020
But how do we debug a program like this?

52
00:02:17.020 --> 00:02:19.830
Well instead of step over, step over,

53
00:02:19.830 --> 00:02:25.480
step over, it's set break point,
play, set break point, play.

54
00:02:25.480 --> 00:02:28.920
So you figure out where the next point
is in the code, or your code is, right?

55
00:02:28.920 --> 00:02:36.270
Here, let's actually try this, you can
see what I mean, I'll do it in Chrome,

56
00:02:36.270 --> 00:02:40.260
cuz I'm a little more familiar
with the the chrome debugger.

57
00:02:43.780 --> 00:02:46.690
I'm sure you can do that with Firefox,
I'm just not Firefox proficient,

58
00:02:46.690 --> 00:02:51.580
so if you are Firefox proficient don't
let that stop you from using Firefox,

59
00:02:51.580 --> 00:02:52.300
a wonderful browse.

60
00:02:54.590 --> 00:02:58.230
I'm gonna zoom up here to maybe the last
place we had some working code.

61
00:02:58.230 --> 00:02:59.280
&gt;&gt; Off Camera 3: Yeah.
Firefox is

62
00:02:59.280 --> 00:03:02.450
more finicky about when
it catches the debugger.

63
00:03:02.450 --> 00:03:07.491
Like you have to,
Chrome always catches it no matter what.

64
00:03:07.491 --> 00:03:10.690
But Firefox,
you kinda have to have the debugger open.

65
00:03:10.690 --> 00:03:12.484
&gt;&gt; Jafar Husain: Opt into it, I see.

66
00:03:12.484 --> 00:03:14.728
&gt;&gt; Off Camera 3: Like that or
it will [INAUDIBLE].

67
00:03:14.728 --> 00:03:16.460
&gt;&gt; Jafar Husain: There we go.

68
00:03:16.460 --> 00:03:17.750
So we got a spot in the debugger, right.

69
00:03:19.620 --> 00:03:21.900
And so,
you can always put a break point or

70
00:03:21.900 --> 00:03:26.100
a debugger semi colon statement inside of
your own function that you pass to map.

71
00:03:26.100 --> 00:03:29.460
And so, this gives me the opportunity
to examine variables, right?

72
00:03:29.460 --> 00:03:31.620
And like is movieList what I expect it is?

73
00:03:31.620 --> 00:03:34.070
I know it's not working right now,
but it usually does.

74
00:03:35.510 --> 00:03:40.275
Sorry, in this resolution I'm not sure if
the pop ups happening somewhere else or.

75
00:03:46.394 --> 00:03:48.410
&gt;&gt; Jafar Husain: You can always
explicitly add a watch expression.

76
00:03:51.350 --> 00:03:54.920
So I can look at the video, right,
that's being passed in the map.

77
00:03:54.920 --> 00:03:58.830
I don't know if that's big enough.

78
00:04:02.702 --> 00:04:03.630
&gt;&gt; Jafar Husain: Does that makes sense?

79
00:04:03.630 --> 00:04:07.430
So if I wanted to step through multiple
functions, right, I would go through,

80
00:04:07.430 --> 00:04:09.930
add another break point again,
it's a bad example, and

81
00:04:09.930 --> 00:04:15.520
then just play to the next the next
function that I own, right.

82
00:04:15.520 --> 00:04:17.800
So if I've got another
function it's past a filter or

83
00:04:17.800 --> 00:04:20.610
reduce or a zip,
I can put a breakpoint in there and

84
00:04:20.610 --> 00:04:23.890
then play instead of trying to
step over and step into there.

85
00:04:23.890 --> 00:04:25.010
Does that make sense?

86
00:04:25.010 --> 00:04:28.280
So that just, you can still examine
every single line of code that you write

87
00:04:28.280 --> 00:04:30.790
with a debugger, and
check the variable values.

88
00:04:30.790 --> 00:04:35.090
It's just that you need to use the play,
the breakpoint and

89
00:04:35.090 --> 00:04:38.370
play strategy, rather than the step
over and step in strategy.

90
00:04:38.370 --> 00:04:41.146
And so
that's how you debug this type of code.

91
00:04:41.146 --> 00:04:42.246
Yeah?

92
00:04:42.246 --> 00:04:46.967
&gt;&gt; Off Camera 4: Sometimes I've notice
I can't set a breakpoint inside

93
00:04:46.967 --> 00:04:51.850
the asynchronous section
until I hit it above.

94
00:04:51.850 --> 00:04:54.939
Is that a case or do [CROSSTALK].

95
00:04:54.939 --> 00:04:58.018
&gt;&gt; Jafar Husain: I mean,
debuggers have bugs.

96
00:04:58.018 --> 00:04:59.340
I've run into that problem.

97
00:04:59.340 --> 00:05:01.530
I have run into that problem myself.

98
00:05:01.530 --> 00:05:04.767
Sometimes I can't set a breakpoint and
then something weird happens and I can.

99
00:05:04.767 --> 00:05:09.240
Sometimes it has to do with optimizations
that the actual JavaScript interpreter is

100
00:05:09.240 --> 00:05:13.146
doing and so, for example, I think
the reason why it's not displaying,

101
00:05:13.146 --> 00:05:17.130
I'm not sure why it's not displaying,
to me this is a bug.

102
00:05:17.130 --> 00:05:19.900
It should add it, but if we have to
watch we should be able to see it.

103
00:05:22.700 --> 00:05:24.829
Maybe this, no interesting, not available.

104
00:05:25.940 --> 00:05:27.690
Yeah well, and
you know what I think is going on here,

105
00:05:27.690 --> 00:05:30.910
even though you should be able
to see a movie list, you can't.

106
00:05:30.910 --> 00:05:34.750
And because Chrome is actually doing a lot
of optimization, it's saying, hey you're

107
00:05:34.750 --> 00:05:38.470
not using movie list in this function and
it's actually not making it available.

108
00:05:38.470 --> 00:05:40.960
So if you run into that problem,
there's a very easy solution,

109
00:05:40.960 --> 00:05:45.950
which is you can just throw in
a console log of movie list inside of

110
00:05:45.950 --> 00:05:49.220
the function to force Chrome to make
it available inside that function.

111
00:05:49.220 --> 00:05:51.693
So then you can then you
can add a watch to it.

112
00:05:51.693 --> 00:05:52.472
Yep.

113
00:05:52.472 --> 00:05:54.627
&gt;&gt; Speaker 6: What about unit testing?

114
00:05:54.627 --> 00:05:55.528
&gt;&gt; Jafar Husain: What about unit testing.

115
00:05:55.528 --> 00:05:58.074
Well the wonderful thing about this,
at least we haven't talked about any about

116
00:05:58.074 --> 00:05:59.770
asynchronous programming at all yet,
right.

117
00:05:59.770 --> 00:06:03.215
We've just talked about loop less
programming, this entire day has been a,

118
00:06:03.215 --> 00:06:04.597
how to program without loops.

119
00:06:04.597 --> 00:06:08.295
Right, and so unit testing honestly,
it's no difference, right?

120
00:06:08.295 --> 00:06:10.102
When you make a unit test
you write a function and

121
00:06:10.102 --> 00:06:12.980
then you wanna confirm that
function outputs the right result.

122
00:06:12.980 --> 00:06:17.150
If inside of your function you happen to
use this style of coding versus loops,

123
00:06:17.150 --> 00:06:19.590
that doesn't make it any more or
less testable.

124
00:06:19.590 --> 00:06:21.799
Right, you're still testing that that
function returns the right result.

125
00:06:24.720 --> 00:06:27.560
So testing is totally orthogonal to this.

126
00:06:27.560 --> 00:06:30.580
Now it's asynchronous testing
is a challenge, right, and

127
00:06:30.580 --> 00:06:33.850
well we can talk about that later on
I would make it to be async stuff.

128
00:06:33.850 --> 00:06:37.590
But most framework support async testing,
the point is you

129
00:06:37.590 --> 00:06:41.719
basically have to asynchronously signal
when the test is failing or succeeding.

130
00:06:43.310 --> 00:06:44.980
So if you use Mocha,

131
00:06:44.980 --> 00:06:48.060
almost every JavaScript framework supports
some form of asynchronous testing.

