WEBVTT

1
00:00:00.000 --> 00:00:03.774
[MUSIC]

2
00:00:03.774 --> 00:00:07.849
&gt;&gt; Jafar Husain: So in addition to being
able to complete an observable with take,

3
00:00:07.849 --> 00:00:11.000
our very,
very powerful function is takeUntil.

4
00:00:11.000 --> 00:00:15.102
You can complete an observable
when another observable fires.

5
00:00:15.102 --> 00:00:15.810
Does that make sense?

6
00:00:15.810 --> 00:00:22.180
So I can say, listen to all the mouse
moves until the next mouse up.

7
00:00:22.180 --> 00:00:24.641
So now, that's how I get away from
writing all this event handler,

8
00:00:24.641 --> 00:00:26.510
add event listener,
remove event listener code.

9
00:00:26.510 --> 00:00:29.268
I don't sort of say add event
listener to mouse move,

10
00:00:29.268 --> 00:00:31.364
but then add event listener to mouse up.

11
00:00:31.364 --> 00:00:34.153
And then when the mouse up happens, unhook
the event listener from mouse up, and

12
00:00:34.153 --> 00:00:35.683
unhook the event listener from mouse move.

13
00:00:35.683 --> 00:00:37.170
That's all very confusing.

14
00:00:37.170 --> 00:00:40.790
takeUntil does all of that
stuff declaratively for us.

15
00:00:40.790 --> 00:00:42.200
So let's take a look at this.

16
00:00:42.200 --> 00:00:45.520
So let's go back to our NASDAQ example,
one of the problems with the NASDAQ

17
00:00:45.520 --> 00:00:48.735
example that we ran earlier is
that it will go on forever.

18
00:00:48.735 --> 00:00:51.617
[LAUGH] And it will eventually
actually use up memory potentially,

19
00:00:51.617 --> 00:00:55.020
unless the browser's being really good
about clearing that console buffer.

20
00:00:55.020 --> 00:00:57.583
It's just gonna keep writing
to the console, right,

21
00:00:57.583 --> 00:00:59.375
and well, maybe we don't want that.

22
00:00:59.375 --> 00:01:02.680
Maybe we would like to just sort of see
the stream for a while, and then decide,

23
00:01:02.680 --> 00:01:04.700
okay, I don't wanna see
that stream anymore.

24
00:01:04.700 --> 00:01:08.343
Right, I just wanna stop it, right, you
could certainly see that happening if I

25
00:01:08.343 --> 00:01:11.720
open a form, for example, in the UI,
and I wanna see stock streams.

26
00:01:11.720 --> 00:01:13.380
But then what happens
when I close that form?

27
00:01:13.380 --> 00:01:15.940
Obviously, I wanna stop listening
to that stock stream, and

28
00:01:15.940 --> 00:01:18.854
maybe I've got a web socket under
the hood that I also wanna close, right?

29
00:01:18.854 --> 00:01:21.410
It's these types of things
that I want you have to

30
00:01:21.410 --> 00:01:22.940
think about when you're building UIs.

31
00:01:22.940 --> 00:01:26.710
You have to clean up after yourself
when a user leaves a form or

32
00:01:26.710 --> 00:01:29.000
moves to another page, and
that type of thing, right?

33
00:01:29.000 --> 00:01:32.120
Now I'm talking specifically about
single page web applications,

34
00:01:32.120 --> 00:01:34.230
which a lot of us are building nowadays,
right?

35
00:01:34.230 --> 00:01:35.610
In the old days of the web,
it was really easy,

36
00:01:35.610 --> 00:01:37.830
you didn't have to really worry
about cleaning up after yourself,

37
00:01:37.830 --> 00:01:39.630
because as soon as somebody
went to a different page, boom,

38
00:01:39.630 --> 00:01:41.980
all your JavaScript was gone,
and it's reloaded.

39
00:01:41.980 --> 00:01:44.310
Today we have a much more
complicated model, right,

40
00:01:44.310 --> 00:01:47.700
those of us who are building
angular apps or react apps.

41
00:01:47.700 --> 00:01:51.830
The notion of a page is really
actually just very often another div

42
00:01:51.830 --> 00:01:53.010
popped up on screen.

43
00:01:53.010 --> 00:01:56.300
So you have a single page, and
then you just keep loading forms.

44
00:01:56.300 --> 00:01:57.800
Well, that creates a lot of complexity,
cuz now,

45
00:01:57.800 --> 00:02:00.040
you really gotta make sure
to clean up after yourself.

46
00:02:00.040 --> 00:02:04.210
Let's say I open up a form, and then I
start streaming in stock prices, right?

47
00:02:04.210 --> 00:02:08.270
Well, as soon as somebody hits X,
I better close that web socket, right?

48
00:02:08.270 --> 00:02:10.765
So that I'm not continuing
to access the NASDAQ,

49
00:02:10.765 --> 00:02:13.800
long after that person is
actually looking at that form.

50
00:02:13.800 --> 00:02:16.808
So, this is the type of thing, this is
why it's become so complicated, and

51
00:02:16.808 --> 00:02:19.393
asynchronous programming has
become such an important thing for

52
00:02:19.393 --> 00:02:20.530
developers to worry about.

53
00:02:20.530 --> 00:02:23.163
As we build single page web
apps where the page lives for

54
00:02:23.163 --> 00:02:26.882
a very long time, we wanna make sure not
to leak memory because after a while,

55
00:02:26.882 --> 00:02:30.170
the applications slow down and
eventually even crash the browser.

56
00:02:30.170 --> 00:02:35.860
So takeUntil is a really, really key
tool to solve this problem, right?

57
00:02:35.860 --> 00:02:40.269
Imagine saying well, listen for form open,
right, that's a stream too, right?

58
00:02:40.269 --> 00:02:44.669
When somebody clicks a button to open
a form, I'm gonna listen for a form open,

59
00:02:44.669 --> 00:02:49.470
and then I'm going to begin listening to
stock prices until the form is closed.

60
00:02:49.470 --> 00:02:51.970
That's a very common form that
you're gonna see again and again.

61
00:02:51.970 --> 00:02:55.024
It's not so different than listen for
mouse down,

62
00:02:55.024 --> 00:02:58.873
then I'm gonna be listening for
mouse moves until the mouse up.

63
00:02:58.873 --> 00:03:00.100
You're gonna see a lot of that.

64
00:03:00.100 --> 00:03:01.520
Listen for the start condition,

65
00:03:01.520 --> 00:03:05.320
map it into some street listening
to something else, right?

66
00:03:05.320 --> 00:03:08.680
Map it into some other observable
until the stop condition.

67
00:03:08.680 --> 00:03:09.760
That make sense?

68
00:03:09.760 --> 00:03:11.012
So we're gonna start doing that map,

69
00:03:11.012 --> 00:03:13.450
that should be incredibly
common in user interfaces.

70
00:03:13.450 --> 00:03:17.009
So here,
I'm gonna use the exact same approach,

71
00:03:17.009 --> 00:03:21.334
except instead of listening to
these stock prices forever,

72
00:03:21.334 --> 00:03:25.934
I'm gonna listen until, so
we're gonna pass in a stop button.

73
00:03:25.934 --> 00:03:28.034
So I wanna actually be able to listen for
the click for

74
00:03:28.034 --> 00:03:29.770
the stop button, it's right down here.

75
00:03:29.770 --> 00:03:32.470
So there's a stop button
along with a run button, so

76
00:03:32.470 --> 00:03:36.870
when I click the stop button, I want
the to stop printing out stock prices.

77
00:03:36.870 --> 00:03:41.918
So first thing I have to
do is I need to convert

78
00:03:41.918 --> 00:03:46.156
the stop button into an observable.

79
00:03:49.635 --> 00:03:50.910
&gt;&gt; Jafar Husain: So
that's always the first step.

80
00:03:50.910 --> 00:03:54.100
Whenever you run across an asynchronous
API that doesn't emit an observable,

81
00:03:54.100 --> 00:03:56.970
the first thing you do,
convert it to emit an observable.

82
00:03:56.970 --> 00:03:58.690
Adapt it to the observable interface.

83
00:03:58.690 --> 00:04:01.060
Cuz now we can use all those cool
functions like map and filter and so

84
00:04:01.060 --> 00:04:02.360
on and so forth, right?

85
00:04:02.360 --> 00:04:05.907
So now I just have to
takeUntil(stopButtonClicks).

86
00:04:11.875 --> 00:04:17.382
&gt;&gt; Jafar Husain: So
now if I run this, we see our stocks.

87
00:04:17.382 --> 00:04:21.687
And you can think of this as the user
going along and maybe closing a form,

88
00:04:21.687 --> 00:04:22.196
right?

89
00:04:22.196 --> 00:04:26.390
And they hit stop, that could just as
easily be an X button on a form, and

90
00:04:26.390 --> 00:04:28.100
now we're not getting stock tips anymore.

91
00:04:28.100 --> 00:04:31.380
And under the hood, remember,
when you tell an observable that you're

92
00:04:31.380 --> 00:04:33.747
not interested in listening
to the result anymore,

93
00:04:33.747 --> 00:04:37.114
that gives the observable to do
the opportunity to clean up after itself.

94
00:04:37.114 --> 00:04:40.517
So in this case, if I were really
listening to the NASDAQ under the hood

95
00:04:40.517 --> 00:04:43.588
here, I could close that web socket and
clean up after myself.

96
00:04:43.588 --> 00:04:46.003
And as soon as that
observable says on completed,

97
00:04:46.003 --> 00:04:47.920
I'm not sending you any data anymore.

98
00:04:47.920 --> 00:04:51.320
Remember, the consumer here doesn't say,
I'm not interested in the result anymore.

99
00:04:51.320 --> 00:04:55.550
What we did is declaratively force
the observable into simply saying I'm done

100
00:04:55.550 --> 00:04:57.036
when this button clicks.

101
00:04:57.036 --> 00:04:59.540
And that way, we can be 100% sure
that it's not holding onto our

102
00:04:59.540 --> 00:05:00.810
subscription anymore, right?

103
00:05:00.810 --> 00:05:03.820
Why would it hold on to a call back
when it's never gonna call again?

104
00:05:03.820 --> 00:05:06.940
So this is how we make sure that when
we build user interfaces with all these

105
00:05:06.940 --> 00:05:09.145
events that we're working up to,
we never run out of memory,

106
00:05:09.145 --> 00:05:12.050
cuz we're always making sure
to clean up after ourselves.

107
00:05:12.050 --> 00:05:17.110
Code like this is much easier to write
than adding an event listener and

108
00:05:17.110 --> 00:05:20.010
removing an event listener because one
thing I wanna call your attention to,

109
00:05:20.010 --> 00:05:22.722
remember I talked about changing things,
right?

110
00:05:22.722 --> 00:05:26.728
Adding an event listener and removing
an event listener is a classic example of

111
00:05:26.728 --> 00:05:28.986
changing an object you don't own, right?

112
00:05:28.986 --> 00:05:32.136
If there's a list somewhere that you
didn't create of listeners, and now you're

113
00:05:32.136 --> 00:05:35.470
gonna push something into it, and then
later you're gonna pull it out, right?

114
00:05:35.470 --> 00:05:37.680
That is happening under the hood, right?

115
00:05:37.680 --> 00:05:39.417
That's what's going on under the hood, but

116
00:05:39.417 --> 00:05:41.344
it's not something your
code is doing directly.

117
00:05:41.344 --> 00:05:45.315
From the perspective of this, all your
code is doing is it's taking a bunch of

118
00:05:45.315 --> 00:05:49.020
observables, combining them,
and creating a new observable.

119
00:05:49.020 --> 00:05:52.616
That's all that's happening on
this top level of code here.

120
00:05:52.616 --> 00:05:56.177
And I wanna call your attention to
something that we talked about yesterday,

121
00:05:56.177 --> 00:05:59.720
but it's been a while since
we talked about, all right.

122
00:05:59.720 --> 00:06:02.481
If I comment this out and then I run,

123
00:06:02.481 --> 00:06:06.356
we won't see any stock
prices printed on screen.

124
00:06:06.356 --> 00:06:10.640
An observable doesn't do anything
until you begin listening to it.

125
00:06:11.940 --> 00:06:13.260
All we've done is create
a bunch of objects,

126
00:06:13.260 --> 00:06:14.330
which hold onto a bunch of objects,

127
00:06:14.330 --> 00:06:17.180
which hold on to a bunch of objects,
hasn't done a thing.

128
00:06:17.180 --> 00:06:18.450
Think of an observable.

129
00:06:18.450 --> 00:06:22.200
It's a little bit like an event because
it pushes you information over time, but

130
00:06:22.200 --> 00:06:24.140
it's also a little bit like a function,

131
00:06:24.140 --> 00:06:26.930
in the sense that nothing
happens until you call it.

132
00:06:26.930 --> 00:06:29.654
Really, observable only has one function,
which is forEach.

133
00:06:29.654 --> 00:06:32.904
All the other functions are actually
implemented in terms of forEach, map,

134
00:06:32.904 --> 00:06:34.660
filter, reduce, and so on and so forth.

135
00:06:34.660 --> 00:06:36.460
They all use forEach under the hood.

136
00:06:36.460 --> 00:06:37.940
So that's really all an observable is,

137
00:06:37.940 --> 00:06:41.289
it's one object with a function
just waiting to be called.

138
00:06:42.510 --> 00:06:43.770
So that's the way to think about it.

139
00:06:43.770 --> 00:06:45.950
It's a little bit hard to get
your head around an observable,

140
00:06:45.950 --> 00:06:48.330
because it's a little bit like an event,
and it's a little bit like a function.

141
00:06:48.330 --> 00:06:48.990
Got a question?

142
00:06:48.990 --> 00:06:53.450
&gt;&gt; Off Camera 1: Question from chatroom,
the priceNASDAQ, is that an observable?

143
00:06:53.450 --> 00:06:58.175
&gt;&gt; Jafar Husain: Yes, so sorry if I
didn't really hammer that point home,

144
00:06:58.175 --> 00:07:02.460
priceNASDAQ, I was sort of tricking you
guys into thinking it was an array,

145
00:07:02.460 --> 00:07:04.560
just like every other example thus far.

146
00:07:04.560 --> 00:07:07.360
But I pass it an observable,
and the point of doing that

147
00:07:07.360 --> 00:07:11.700
was to hammer home the equivalence of the
API between the array and the observable.

148
00:07:11.700 --> 00:07:14.720
Everything you learned yesterday,
painstakingly learned,

149
00:07:14.720 --> 00:07:18.020
can now be applied to asynchronous data
sources, not just arrays in memory.

