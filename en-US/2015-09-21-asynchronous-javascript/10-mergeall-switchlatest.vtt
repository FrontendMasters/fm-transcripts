WEBVTT

1
00:00:00.000 --> 00:00:03.640
[MUSIC]

2
00:00:03.640 --> 00:00:06.188
&gt;&gt; Jafar: We've already talked about
concatAll, and the way it works top to

3
00:00:06.188 --> 00:00:08.880
bottom left to right, just the same
way that worked with the right.

4
00:00:08.880 --> 00:00:11.467
So, if you're ever confused about
how observable works with concatAll,

5
00:00:11.467 --> 00:00:14.340
just think about how an array get
flattened with concatAll all.

6
00:00:14.340 --> 00:00:17.440
There's two more flattening strategies
that I wanna call your attention to.

7
00:00:17.440 --> 00:00:19.430
And together,
these three flattening strategies,

8
00:00:19.430 --> 00:00:21.976
you're are gonna be able to solve
most of these same problems with.

9
00:00:21.976 --> 00:00:25.810
The next flattening strategy I want to
call attention to is what happens when

10
00:00:25.810 --> 00:00:29.350
you've got three lanes of traffic, and one
gets closed down because of an accident,

11
00:00:29.350 --> 00:00:31.616
at least in a civil society, what happens?

12
00:00:31.616 --> 00:00:33.197
&gt;&gt; Speaker 2: They merge.

13
00:00:33.197 --> 00:00:36.370
&gt;&gt; Jafar: They merge,
first come first serve, right?

14
00:00:36.370 --> 00:00:40.990
If whoever gets there first merges in,
that would be the civil way to do things.

15
00:00:40.990 --> 00:00:44.670
It might not actually work out that way in
practice, but in a perfect world, right?

16
00:00:44.670 --> 00:00:45.980
So, let's run this and

17
00:00:45.980 --> 00:00:51.840
see what happens when we merge four lanes
of observable, so to speak, into one.

18
00:00:51.840 --> 00:00:55.070
So, once again, we subscribe we for
each of the outer observable, and so,

19
00:00:55.070 --> 00:00:57.700
we start getting inner
observables arriving over time.

20
00:00:57.700 --> 00:01:00.268
Once we get an inner observable,
we forge each other that, and

21
00:01:00.268 --> 00:01:03.420
one comes out immediately, and
this time, you're immediately returned,

22
00:01:03.420 --> 00:01:04.460
just like in concatAll.

23
00:01:04.460 --> 00:01:07.881
Now, a second observable, that one
finishes, a second observer comes along,

24
00:01:07.881 --> 00:01:11.120
we forge over that,
we return two as soon as it comes out.

25
00:01:11.120 --> 00:01:13.270
And now we're waiting for three.

26
00:01:13.270 --> 00:01:14.270
Now, in the previous example,

27
00:01:14.270 --> 00:01:18.930
concatAll would not emit any more
values from subsequent observables

28
00:01:18.930 --> 00:01:21.950
until the observable is currently
listening to completed.

29
00:01:21.950 --> 00:01:23.886
Not so with merge.

30
00:01:23.886 --> 00:01:24.740
So, while we're listening for

31
00:01:24.740 --> 00:01:27.120
three to come along,
another observable comes along.

32
00:01:27.120 --> 00:01:30.163
This time it's empty,
we forEach over that,

33
00:01:30.163 --> 00:01:33.844
what happens to an empty
observable when we flatten it?

34
00:01:33.844 --> 00:01:35.010
It disappears.

35
00:01:35.010 --> 00:01:37.620
None of it, there's no data in there,
nothing comes out.

36
00:01:37.620 --> 00:01:40.528
We're still listening for
the second observable to complete, right?

37
00:01:40.528 --> 00:01:43.560
Another one comes along, merge immediately
before it reaches over this one.

38
00:01:43.560 --> 00:01:44.876
It doesn't buffer it.

39
00:01:44.876 --> 00:01:47.760
It immediately forEach over observables,
as soon as they arrive, and

40
00:01:47.760 --> 00:01:48.480
we get out four.

41
00:01:49.500 --> 00:01:52.080
And then that completes, and
then once that completes,

42
00:01:52.080 --> 00:01:55.490
we're still listening all this time, we've
been listening that second observable.

43
00:01:55.490 --> 00:02:00.600
Finally, it gives us a value and
then completes and we get.

44
00:02:00.600 --> 00:02:01.586
This order right here.

45
00:02:01.586 --> 00:02:04.210
So in concatAll,

46
00:02:04.210 --> 00:02:08.760
data is emitted based on the order of the
collection that it was inside of arrived.

47
00:02:09.780 --> 00:02:12.480
In mergeAll, doesn't matter,
it's first come first serve.

48
00:02:12.480 --> 00:02:14.550
Whatever data comes out,
we immediately emit.

49
00:02:14.550 --> 00:02:17.720
We don't buffer up observables we just
forEach over them as soon as they arrive.

50
00:02:17.720 --> 00:02:20.120
And as soon as their data comes through,
it just gets emitted.

51
00:02:20.120 --> 00:02:21.140
Is that relatively straightforward?

52
00:02:21.140 --> 00:02:22.860
So, that's why we got
items out of order here.

53
00:02:22.860 --> 00:02:26.800
Because we, you use mergeAll,
when you don't care about order, and

54
00:02:26.800 --> 00:02:27.770
you just want data throughput.

55
00:02:27.770 --> 00:02:30.330
You want data throughput as fast you can,
you don't care about order.

56
00:02:30.330 --> 00:02:31.610
Use concatAll when you care about order.

57
00:02:31.610 --> 00:02:32.760
Does that makes sense?

58
00:02:32.760 --> 00:02:35.270
We'll come up with more
concrete examples later.

59
00:02:35.270 --> 00:02:38.840
The final pattern in this is perhaps the
most common flattening pattern you will

60
00:02:38.840 --> 00:02:43.504
use in user interfaces,
you use it all the time is switch latest.

61
00:02:43.504 --> 00:02:47.030
So, switchLatest starts out
just like concatAll, so

62
00:02:47.030 --> 00:02:51.460
we subscribe the outer observable, we get
an inner observable, we subscribe to that,

63
00:02:51.460 --> 00:02:55.850
we forEach over that, and then we
immediately emit a value, then we begin.

64
00:02:55.850 --> 00:02:59.270
Then we get a second observable,
we forEach other that.

65
00:02:59.270 --> 00:03:03.376
Two pops out, we immediately emit that,
but while we're waiting for that,

66
00:03:03.376 --> 00:03:05.160
second observable to complete.

67
00:03:05.160 --> 00:03:07.348
Another observable arrives, and

68
00:03:07.348 --> 00:03:11.507
what switchLatest does is it
switches to the latest observable.

69
00:03:11.507 --> 00:03:15.392
It says to the second observable,
I don't want any more data.

70
00:03:15.392 --> 00:03:17.946
By calling subscription.dispose, so

71
00:03:17.946 --> 00:03:21.106
it unsubscribes from
that previous observable.

72
00:03:21.106 --> 00:03:24.460
So, we're never going
to get the value three.

73
00:03:24.460 --> 00:03:26.106
Cuz we've said to the producer,
I don't want any more data.

74
00:03:29.484 --> 00:03:31.930
&gt;&gt; Jafar: And so, once again,
empty collection gets flat.

75
00:03:31.930 --> 00:03:32.650
And there's nothing inside.

76
00:03:32.650 --> 00:03:34.520
And then another observable comes along.

77
00:03:34.520 --> 00:03:35.530
We return this.

78
00:03:35.530 --> 00:03:38.580
And finally, when the outer observable
completes, when the outer observable says,

79
00:03:38.580 --> 00:03:41.500
I've got no more inner observables for
you, the whole thing completes.

80
00:03:44.790 --> 00:03:47.239
&gt;&gt; Speaker 2: With the empty one,
do you want to kill the second one, or

81
00:03:47.239 --> 00:03:49.652
only with something with data
will kill the second one.

82
00:03:49.652 --> 00:03:51.230
&gt;&gt; Jafar: Really?
That's a really good question.

83
00:03:52.940 --> 00:03:55.470
Another way of doing switchLatest,
and this is actually a legitimate

84
00:03:55.470 --> 00:03:59.420
plotting pattern you could use, which
is called switchLatest on notification.

85
00:03:59.420 --> 00:04:00.980
Another way of handling it would be,

86
00:04:00.980 --> 00:04:03.980
instead of switching from the second
one when the third one arrive,

87
00:04:03.980 --> 00:04:06.060
would be to wait for
the third one to give us a piece of data.

88
00:04:06.060 --> 00:04:07.750
And that's what you're kind of saying,
right?

89
00:04:07.750 --> 00:04:10.550
What if we waited until the third one
gave us a piece of data before switching?

90
00:04:10.550 --> 00:04:11.600
That's not how it works.

91
00:04:11.600 --> 00:04:14.350
We switch as soon as we
get another observable.

92
00:04:14.350 --> 00:04:16.020
We don't wait for
the observable to give us data.

93
00:04:16.020 --> 00:04:17.280
&gt;&gt; Speaker 2: So,
the observable will kill it?

94
00:04:17.280 --> 00:04:17.780
&gt;&gt; Jafar: Will kill it.

95
00:04:20.070 --> 00:04:22.380
Now, that's actually totally
legitimate way of doing things as well.

96
00:04:22.380 --> 00:04:24.360
There should be a pattern for
that as well.

97
00:04:24.360 --> 00:04:26.424
I think there may be in RX,
there may not be.

98
00:04:26.424 --> 00:04:28.960
Frankly, this turns out to be
the most most common thing.

99
00:04:28.960 --> 00:04:30.890
Now, why is this the most common thing?

100
00:04:30.890 --> 00:04:33.830
Because in user interfaces,
users do this all the time.

101
00:04:33.830 --> 00:04:36.350
Let's say I've got a simple button on
a form, and every time you go out and

102
00:04:36.350 --> 00:04:39.320
click it we go out and
check Netflix's stock price, for example.

103
00:04:39.320 --> 00:04:40.910
Put it on screen, right?

104
00:04:40.910 --> 00:04:43.180
Now, let's say I give that to my user,
right?

105
00:04:43.180 --> 00:04:45.290
What's the first thing that that user,

106
00:04:45.290 --> 00:04:47.870
or better yet,
let's say I give that to my QA person.

107
00:04:47.870 --> 00:04:50.500
I've got a quality assurance
person at Netflix.

108
00:04:50.500 --> 00:04:54.120
Yep, the first thing that that quality
assurance person is gonna just bang on

109
00:04:54.120 --> 00:04:55.320
that button as fast as they can.

110
00:04:55.320 --> 00:04:56.940
They're such jerks.

111
00:04:56.940 --> 00:04:58.920
We're always trying to break stuff.

112
00:04:58.920 --> 00:05:00.860
What's gonna happen if
they jam on that button?

113
00:05:00.860 --> 00:05:03.500
Does anybody have an idea?

114
00:05:03.500 --> 00:05:05.480
&gt;&gt; Speaker 3: It will
just take the last one?

115
00:05:05.480 --> 00:05:07.330
&gt;&gt; Jafar: Well, with switchLatest,
absolutely right.

116
00:05:07.330 --> 00:05:09.440
It'll cancel any outgoing requests.

117
00:05:09.440 --> 00:05:10.460
Maybe before they were made.

118
00:05:10.460 --> 00:05:13.640
Because remember, browser has queues
of requests that are outgoing, right?

119
00:05:13.640 --> 00:05:15.610
And it will cancel a pending request.

120
00:05:15.610 --> 00:05:19.690
You might actually be able to cancel
a request before it even heads out, right?

121
00:05:19.690 --> 00:05:23.300
So, it turns out to be very efficient to
use switchLatest because you only got so

122
00:05:23.300 --> 00:05:25.490
many sockets that you
can open to a server.

123
00:05:25.490 --> 00:05:27.270
There is only so
many concurrent connections you can have,

124
00:05:27.270 --> 00:05:28.950
and that's why observable is so

125
00:05:28.950 --> 00:05:33.180
useful because the consumer can say to
the producer, I don't want any more data.

126
00:05:33.180 --> 00:05:36.180
That gives the producer
the opportunity to cancel or

127
00:05:36.180 --> 00:05:39.920
prevent any work that had scheduled
to happen from happening.

128
00:05:39.920 --> 00:05:42.690
So, in this case, the browser has
a queue of outgoing requests, and

129
00:05:42.690 --> 00:05:45.462
if it turns around and calls abort
right at the producer, the observer

130
00:05:45.462 --> 00:05:50.280
becomes around and returns and says abort
on the outgoing request, it might actually

131
00:05:50.280 --> 00:05:53.570
prevent a request from going out
before it even is issued to get it.

132
00:05:53.570 --> 00:05:54.530
Sorry, you got a question back there?

133
00:05:55.600 --> 00:05:58.502
&gt;&gt; Speaker 4: Yeah, how does switchLatest
know when to dispose of some sort of

134
00:05:58.502 --> 00:06:00.300
debunks going on?

135
00:06:00.300 --> 00:06:02.160
&gt;&gt; Jafar: Well,
it knows when to dispose because remember,

136
00:06:02.160 --> 00:06:04.900
switchLatest is subscribed
to an outer observable.

137
00:06:04.900 --> 00:06:09.870
And every single time it gets
an inner observable, if it already is

138
00:06:09.870 --> 00:06:12.590
listening to another inner observable,
that's what it knows to dispose.

139
00:06:12.590 --> 00:06:16.080
Because its job is to only listen
to one inner observable at a time.

140
00:06:16.080 --> 00:06:19.460
And so, as soon as it gets a new one,
if it's listening to another one,

141
00:06:19.460 --> 00:06:20.718
it disposes of that one.

142
00:06:20.718 --> 00:06:23.800
So, it disposes of the inner
subscription to the inner

143
00:06:23.800 --> 00:06:28.691
observables it's currently listening to as
soon as a new inn observable comes along,

144
00:06:28.691 --> 00:06:30.050
does that makes sense?

145
00:06:30.050 --> 00:06:34.090
&gt;&gt; Speaker 5: So, in your button example,
it's only going to listen to the first

146
00:06:34.090 --> 00:06:37.900
click, and then all of the clicks will be
ignored, or it will be the last click, or

147
00:06:37.900 --> 00:06:38.725
how does that work?

148
00:06:38.725 --> 00:06:39.940
&gt;&gt; Jafar: Good question.

149
00:06:39.940 --> 00:06:40.710
SwitchLatest.

150
00:06:40.710 --> 00:06:43.186
So, we what we're really doing
is we're taking clicks, and

151
00:06:43.186 --> 00:06:45.340
when we see this example later on,
makes more sense.

152
00:06:45.340 --> 00:06:47.420
But what I'm actually doing
is I'm taking clicks, and

153
00:06:47.420 --> 00:06:51.980
I'm mapping over every click, and
I'm replacing it with an observable.

154
00:06:51.980 --> 00:06:54.630
That is actually the result
of a network request.

155
00:06:54.630 --> 00:06:58.500
And so I'm taking a flat observable of
just quick object quick object quick

156
00:06:58.500 --> 00:07:02.500
object click event object right And
I mapping it into a two dimensional

157
00:07:02.500 --> 00:07:06.170
observable because for every click
object I am gonna substitute in

158
00:07:06.170 --> 00:07:09.230
an observable that represents
the result of the network request.

159
00:07:09.230 --> 00:07:11.740
And so, now I have a two dimensional
observable, and what switchLatest

160
00:07:11.740 --> 00:07:15.050
is gonna do is it's gonna say, well,
whenever a new observable comes along,

161
00:07:15.050 --> 00:07:17.408
because I've created this two
dimensional observable with map,

162
00:07:17.408 --> 00:07:20.570
when I apply switchLatest to it,
now I have two dimensional observable.

163
00:07:20.570 --> 00:07:24.020
And undo inner observables only gonna
come along when another click happens.

164
00:07:24.020 --> 00:07:28.490
And so, switchLatest, it doesn't know
about the clicks or the map operation,

165
00:07:28.490 --> 00:07:30.410
all it knows about is two
dimensional observable.

166
00:07:30.410 --> 00:07:32.452
And it knows that whenever
a new observable comes along,

167
00:07:32.452 --> 00:07:35.790
it disposes of the old one and
starts listening to the new one.

168
00:07:35.790 --> 00:07:38.900
And just by calling dispose,
what it's calling dispose on is on that

169
00:07:38.900 --> 00:07:41.240
observable that represents
that asynchronous operation.

170
00:07:41.240 --> 00:07:43.960
And so, when it calls dispose
on the subscription object,

171
00:07:43.960 --> 00:07:47.040
returned by that observable that
kicks off the asynchronous operation,

172
00:07:47.040 --> 00:07:51.389
that producer can just say abort the XHR,
abort the network request that goes out.

173
00:07:52.590 --> 00:07:54.000
But I know that's a lot,
that's a mouthful.

174
00:07:54.000 --> 00:07:57.520
We'll have examples and
we'll go into it more clearly, right?

175
00:07:57.520 --> 00:07:59.760
But that's effectively what's going on.

176
00:07:59.760 --> 00:08:02.360
Every single click gets mapped
into a network request.

177
00:08:02.360 --> 00:08:04.110
Which is also represented
as an observable.

178
00:08:04.110 --> 00:08:06.890
And so, we get a two dimensional
observable, and we're only interested in

179
00:08:06.890 --> 00:08:09.650
one network request, one request for
the stock price, at a time.

180
00:08:11.080 --> 00:08:12.580
&gt;&gt; Speaker 5: Which one's
the first click here?

181
00:08:12.580 --> 00:08:13.941
Is it one?
&gt;&gt; Jafar: Every single one of these

182
00:08:13.941 --> 00:08:16.186
observables represent a click because
&gt;&gt; Speaker 5: But the first one,

183
00:08:16.186 --> 00:08:17.364
that would be the one, right?

184
00:08:17.364 --> 00:08:17.880
&gt;&gt; Jafar: One, yes.

185
00:08:17.880 --> 00:08:20.430
Every single one of these observables
represent a click because every single

186
00:08:20.430 --> 00:08:23.580
time I click a button,
I've mapped that into a network request.

187
00:08:23.580 --> 00:08:27.630
So, just think about each of these
observables like a stock price.

188
00:08:27.630 --> 00:08:30.542
I know it's, there's multiple values in
here, so you expect to see an observable

189
00:08:30.542 --> 00:08:33.030
of one, and you'd expect to see
a bunch of dots in front of it.

190
00:08:33.030 --> 00:08:33.810
That's how you would.

191
00:08:33.810 --> 00:08:36.440
That's if you were to visualize what
a network request would look like?

192
00:08:36.440 --> 00:08:39.010
With every thought network
recently returned one value rule,

193
00:08:39.010 --> 00:08:40.666
it would look like dot, dot, dot 52.

194
00:08:40.666 --> 00:08:41.426
And then it ends, and

195
00:08:41.426 --> 00:08:43.902
that's what a network request would
look like it's an observable.

196
00:08:43.902 --> 00:08:45.680
Yep?
&gt;&gt; Speaker 2: I'm generally sad about

197
00:08:45.680 --> 00:08:48.660
losing data,
are we sad that we lose our click stream?

198
00:08:48.660 --> 00:08:51.780
We don't necessarily-
&gt;&gt; Jafar: We only lose the clicks,

199
00:08:51.780 --> 00:08:57.310
notice that this stream,
if the source of this stream is clicks,

200
00:08:57.310 --> 00:09:00.010
this observable will go on forever.

201
00:09:00.010 --> 00:09:03.220
The flattened observable will go on
forever because it could always be another

202
00:09:03.220 --> 00:09:05.830
click which always creates
another network requests.

203
00:09:05.830 --> 00:09:11.010
So, the only thing we're losing is the
the stock price that we tried to get for

204
00:09:11.010 --> 00:09:12.330
an individual click.

205
00:09:12.330 --> 00:09:13.910
And that's a nuance.

206
00:09:13.910 --> 00:09:14.800
Sometimes it's hard for people.

207
00:09:14.800 --> 00:09:17.430
They think, we're, we stop this and
give the outer observable.

208
00:09:17.430 --> 00:09:19.790
No, we stop this and
give the inner observables.

209
00:09:19.790 --> 00:09:22.660
And this, and we've stopped listening to
it presumably because there's something

210
00:09:22.660 --> 00:09:23.910
newer that we're more interested in.

211
00:09:23.910 --> 00:09:26.760
And this happens with you
guys all all the time, right?

212
00:09:26.760 --> 00:09:28.698
I jump into a form, and
an animation starts, but then I hit back.

213
00:09:28.698 --> 00:09:31.458
I want to cancel that animation,
or stop that animation, right?

214
00:09:31.458 --> 00:09:35.912
It happens all the time in the users
interface, which is why it's gonna

215
00:09:35.912 --> 00:09:40.305
be most useful pattern that we're
gonna be using in user interfaces.

216
00:09:40.305 --> 00:09:44.760
Now, if you didn't have switchLatest,
you'd build state machines.

217
00:09:44.760 --> 00:09:46.380
You would have variables saying,
I've got an animation going.

218
00:09:46.380 --> 00:09:49.110
I gotta remember that I have an animation
going, just in case somebody gets back,

219
00:09:49.110 --> 00:09:50.980
is that I need to check whether
I've got animation going.

220
00:09:50.980 --> 00:09:54.140
And then I need to cancel that
animation and then it gets hard.

221
00:09:54.140 --> 00:09:54.710
It gets really hard.

222
00:09:54.710 --> 00:09:57.770
I'm gonna show you how to do
all this stuff declaratively.

223
00:09:57.770 --> 00:10:01.922
Instead of building a machine with a bunch
moving parts to compute an answer,

224
00:10:01.922 --> 00:10:05.830
we are gonna write the answer, and
that's all the difference in the world.

225
00:10:05.830 --> 00:10:07.200
We're gonna do this declaratively.

226
00:10:07.200 --> 00:10:09.851
I got another question at the back.

227
00:10:09.851 --> 00:10:12.542
&gt;&gt; Speaker 4: Yeah.
They were talking about an example here

228
00:10:12.542 --> 00:10:17.098
for having a music player with a previous
next song buttons, switchLatest,

229
00:10:17.098 --> 00:10:21.390
would that accidentally go to
immediately next to previous song?

230
00:10:21.390 --> 00:10:24.430
Regardless of the amount of
times you clicked the control?

231
00:10:24.430 --> 00:10:27.170
&gt;&gt; Jafar: Well,
it's hard to say without knowing

232
00:10:27.170 --> 00:10:29.624
how this two dimensional
observer was created.

233
00:10:29.624 --> 00:10:33.240
I mean,
every click could create an action object.

234
00:10:33.240 --> 00:10:33.890
Right?

235
00:10:33.890 --> 00:10:37.310
Whether you click back forward or next or
whatever, you could map all the clicks on

236
00:10:37.310 --> 00:10:40.940
those buttons into actions, which is
observables that are asynchronous.

237
00:10:40.940 --> 00:10:43.960
Because start doing player option
actions may be asynchronous, right?

238
00:10:43.960 --> 00:10:46.280
When you play, it might need to
go to the server to load it, but

239
00:10:46.280 --> 00:10:47.860
some of those actions
might be synchronous.

240
00:10:47.860 --> 00:10:49.900
Stop might be able to be
executed synchronously.

241
00:10:49.900 --> 00:10:51.340
I don't know, but let's imagine for

242
00:10:51.340 --> 00:10:53.710
a second that each one of those
player options was asynchronous.

243
00:10:53.710 --> 00:10:55.780
Maybe we're talking with
a native player object.

244
00:10:55.780 --> 00:10:58.070
So, we have to send a message and
we get a call back, right?

245
00:10:58.070 --> 00:11:01.990
Maybe it's not even a, maybe it's
a browser object that we need to talk to

246
00:11:01.990 --> 00:11:03.760
through a native asynchronous interface.

247
00:11:03.760 --> 00:11:06.420
So, let's say every single one of
those clicks was asynchronous.

248
00:11:06.420 --> 00:11:10.940
We asynchronously got back a message
telling us weather was successful or not.

249
00:11:10.940 --> 00:11:12.830
Well then,
let's take each one of those clicks,

250
00:11:12.830 --> 00:11:15.920
map them into an observable that
represents that specific player action.

251
00:11:15.920 --> 00:11:18.850
So, when I call play on the player, I get
back into the observable that completes

252
00:11:18.850 --> 00:11:21.160
when that play is actually
successfully occurred.

253
00:11:21.160 --> 00:11:23.740
Well, then we have another observable
of observables, and then switchLatest

254
00:11:23.740 --> 00:11:28.830
would be perfectly fine, because if I hit
skip forward to the next chapter, right?

255
00:11:28.830 --> 00:11:31.390
And then I decided, no, I want to pause.

256
00:11:31.390 --> 00:11:34.630
If the skipping forward took a certain
amount of time, then we could cancel

257
00:11:34.630 --> 00:11:38.310
skipping forward, and then we could
just switch over to the pause operation.

258
00:11:38.310 --> 00:11:39.890
Does that makes sense?

259
00:11:39.890 --> 00:11:43.670
So, this will be more concrete when we
start to see the larger programs that use

260
00:11:43.670 --> 00:11:46.570
switchLatest, you'll be able to understand
how this all fits together in context.

261
00:11:46.570 --> 00:11:50.910
For now though, it's just important we
learn, focus in on this one thing, and

262
00:11:50.910 --> 00:11:53.820
understand switchLatest does to
a two dimensional observable.

263
00:11:53.820 --> 00:11:55.254
Yeah.
&gt;&gt; Speaker 2: I have a question, and

264
00:11:55.254 --> 00:11:59.347
so, this two, does that kill the three,
or does four kill the three?

265
00:11:59.347 --> 00:12:03.323
&gt;&gt; Jafar: Actually,
the empty observable kills the three.

266
00:12:03.323 --> 00:12:04.900
&gt;&gt; Jafar: So it's the third
observable that comes along.

267
00:12:04.900 --> 00:12:06.450
And that's the distinction.

268
00:12:06.450 --> 00:12:09.200
I am glad you asked that question,
cuz that's an important distinction.

269
00:12:09.200 --> 00:12:11.970
It's not when an observable
gives you data that you stop

270
00:12:11.970 --> 00:12:14.760
listening to the current observable, it's
not when a new observable comes along and

271
00:12:14.760 --> 00:12:17.310
then gives you data that you stop
listening to the previous observable.

272
00:12:17.310 --> 00:12:19.140
It's when a new observable comes along.

273
00:12:19.140 --> 00:12:21.576
Data or no data, then you stop
listening to the current observable.

274
00:12:21.576 --> 00:12:22.230
&gt;&gt; Speaker 2: Okay, I understand.

