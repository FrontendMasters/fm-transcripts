WEBVTT

1
00:00:00.000 --> 00:00:03.737
[MUSIC]

2
00:00:03.737 --> 00:00:06.171
&gt;&gt; Jafar: So we're gonna do a little more
of these exercises as time goes on to

3
00:00:06.171 --> 00:00:07.046
understand Observer.

4
00:00:07.046 --> 00:00:09.870
We might even use up the whole table,
I'm not sure, so be ready.

5
00:00:11.630 --> 00:00:16.510
So there's one more problem with this and
then I think we can ship it.

6
00:00:17.660 --> 00:00:24.770
What happens if I type,
for example, ab, okay.

7
00:00:24.770 --> 00:00:26.770
Good, we still got it working great.

8
00:00:26.770 --> 00:00:30.010
And then I hit back space.

9
00:00:30.010 --> 00:00:32.050
Okay, well we do want to
issue a network request here,

10
00:00:32.050 --> 00:00:34.380
hopefully it's going out there,
am not sure what's happened there.

11
00:00:35.790 --> 00:00:37.420
Might have been a failed network request

12
00:00:44.643 --> 00:00:46.438
&gt;&gt; Jafar: Question?

13
00:00:46.438 --> 00:00:51.130
&gt;&gt; Speaker 2: What is the advantage of
using the distinct until change over

14
00:00:51.130 --> 00:00:53.430
using onChange observable?

15
00:00:55.670 --> 00:00:57.820
&gt;&gt; Jafar: On change observable,
I don't think I'm familiar.

16
00:00:59.980 --> 00:01:01.980
&gt;&gt; Speaker 2: Distinct
until chained with an un-

17
00:01:01.980 --> 00:01:04.260
&gt;&gt; Jafar: I think what's being said is,

18
00:01:04.260 --> 00:01:07.730
why not just subscribe to
onChange on the text box?

19
00:01:07.730 --> 00:01:09.090
Is that correct?

20
00:01:09.090 --> 00:01:14.240
I believe onChange on the text box only
fires when you tab away from the text box,

21
00:01:14.240 --> 00:01:15.200
I could be wrong about that.

22
00:01:15.200 --> 00:01:18.830
So if you're listening for
the onChange event of the text box,

23
00:01:18.830 --> 00:01:22.390
you're only going to get that event fire
when you tab away from the text box.

24
00:01:22.390 --> 00:01:24.930
It's not going to fire every
single time you press a key and so

25
00:01:24.930 --> 00:01:28.320
it's not very good for
auto complete example but good question.

26
00:01:28.320 --> 00:01:32.950
Right so but if I backspace and
delete everything here.

27
00:01:32.950 --> 00:01:35.990
I'm not sure if Wikipedia, what might
be happening under on the hood is,

28
00:01:35.990 --> 00:01:39.040
Wikipedia might not be able
to handle an empty search.

29
00:01:39.040 --> 00:01:41.350
So, that might be why we're not
getting some search results here.

30
00:01:41.350 --> 00:01:43.660
But we probably don't
wanna send a request for

31
00:01:43.660 --> 00:01:44.850
an empty search in the first place, do we?

32
00:01:45.870 --> 00:01:49.860
Right, probably not that useful to
send an autocomplete box request for

33
00:01:49.860 --> 00:01:50.630
an empty search.

34
00:01:50.630 --> 00:01:51.170
Question?

35
00:01:51.170 --> 00:01:52.530
&gt;&gt; Speaker 2: So, a question about this,

36
00:01:52.530 --> 00:01:56.840
the retry, they're saying instantly after
the error, there's another retry sent out.

37
00:01:56.840 --> 00:01:58.120
&gt;&gt; Jafar: Instantly after, yes.

38
00:01:58.120 --> 00:02:00.640
&gt;&gt; Speaker 2: So, is there anything
that you put on there to throttle that?

39
00:02:00.640 --> 00:02:02.390
To just weigh that a little bit?

40
00:02:02.390 --> 00:02:03.690
&gt;&gt; Jafar: I'm not sure.

41
00:02:03.690 --> 00:02:06.590
If not, I think the key thing
to understand here is that

42
00:02:06.590 --> 00:02:08.620
observable comes out
with a ton of operators.

43
00:02:08.620 --> 00:02:10.120
A huge number of operators.

44
00:02:10.120 --> 00:02:14.170
What I would highly recommend you at
home use, is RX.lite which is a version

45
00:02:14.170 --> 00:02:17.170
that's really stripped down to the most
common operators that you would use.

46
00:02:17.170 --> 00:02:20.830
And it's got a relatively small download
size once it's G is zipped and modified.

47
00:02:20.830 --> 00:02:24.350
But if you don't have an operator
that you need, right,

48
00:02:24.350 --> 00:02:26.470
you guys now know how
to write observables.

49
00:02:26.470 --> 00:02:29.690
So it's nothing to it but a for
each function that returns a subscription.

50
00:02:29.690 --> 00:02:33.150
And so in those cases where there's
an operator that you don't want.

51
00:02:33.150 --> 00:02:36.740
Like for example they might be talking
about an exponential back off, so

52
00:02:36.740 --> 00:02:39.390
one common practice is with
when you have an error,

53
00:02:39.390 --> 00:02:41.930
instead of just returning immediately,
or trying immediately, excuse me.

54
00:02:41.930 --> 00:02:44.730
You might want to wait a certain amount of
time, and then if you get another failure,

55
00:02:44.730 --> 00:02:47.870
you might want to wait a certain
amount of time times two, right.

56
00:02:47.870 --> 00:02:52.230
So just to avoid hammering the server, and
I don't believe RX has an operator out of,

57
00:02:52.230 --> 00:02:53.260
I apologize.

58
00:02:53.260 --> 00:02:57.170
To the writer of RX, sorry Matthew if I'm,
if I'm saying the wrong thing here but

59
00:02:57.170 --> 00:02:59.110
I don't believe it has
a operator right out of the box.

60
00:02:59.110 --> 00:03:01.160
It does an exponential back off.

61
00:03:01.160 --> 00:03:03.210
But part of the goal here
is to be able to teach you,

62
00:03:03.210 --> 00:03:05.250
as I've shown you how to
write observables right.

63
00:03:05.250 --> 00:03:07.570
If there's not operator you
don't have you can go ahead and

64
00:03:07.570 --> 00:03:10.840
write it, just using the, unfortunately
when you're writing observables you have

65
00:03:10.840 --> 00:03:11.880
to deal with callback.

66
00:03:11.880 --> 00:03:14.000
Remember when we wrote
the time out observable?

67
00:03:14.000 --> 00:03:16.160
Or the from event observable?

68
00:03:16.160 --> 00:03:17.050
Right, those methods?

69
00:03:17.050 --> 00:03:19.090
In that world you've got
to deal with call backs.

70
00:03:19.090 --> 00:03:21.020
But the good thing is only
inside of there, right?

71
00:03:21.020 --> 00:03:23.251
You just have to make sure that all
that call back stuff is taken care of

72
00:03:23.251 --> 00:03:23.835
inside of there.

73
00:03:23.835 --> 00:03:27.345
And outside, you get a nice clean
observable that takes care of itself and

74
00:03:27.345 --> 00:03:28.430
cleans after itself.

75
00:03:28.430 --> 00:03:31.080
So if you're missing an operator,
you should feel confident, hopefully,

76
00:03:31.080 --> 00:03:32.700
to go and write that operator, right?

77
00:03:32.700 --> 00:03:34.310
It's nothing wrong with that.

78
00:03:34.310 --> 00:03:38.193
It should be easy for us to write
an exponential backoff retry operator.

79
00:03:38.193 --> 00:03:42.103
Won't be much more code than we saw in
the from event, as a matter of fact.

80
00:03:42.103 --> 00:03:44.220
So maybe we can get to that, I'm not sure.

81
00:03:44.220 --> 00:03:47.160
So we probably don't wanna send
out an empty search, right?

82
00:03:47.160 --> 00:03:48.880
We probably don't wanna
send out an empty search.

83
00:03:48.880 --> 00:03:49.920
So how can we avoid doing that?

84
00:03:56.138 --> 00:03:59.323
&gt;&gt; Jafar: How do I not send
out an empty search, guys?

85
00:03:59.323 --> 00:04:00.624
What's the operator I wanna use?

86
00:04:04.795 --> 00:04:05.817
&gt;&gt; Speaker 3: Filter.

87
00:04:05.817 --> 00:04:08.665
&gt;&gt; Jafar: Filter right,
it's all there is to it.

88
00:04:08.665 --> 00:04:13.502
Let me see if I can filter this operator,

89
00:04:21.125 --> 00:04:22.868
&gt;&gt; Jafar: And I'll use trim is it, is it

90
00:04:32.507 --> 00:04:34.364
&gt;&gt; Jafar: You want larger than zero,

91
00:04:34.364 --> 00:04:37.600
because the filter condition is the.

92
00:04:37.600 --> 00:04:38.100
Sorry?

93
00:04:39.200 --> 00:04:43.562
&gt;&gt; Speaker 3: I'm just had an hour trying
to find if there have an RX.lite package

94
00:04:43.562 --> 00:04:47.629
and ironically the auto complete
search function is failing.

95
00:04:47.629 --> 00:04:49.495
&gt;&gt; Jafar: How [LAUGH] on bower?

96
00:04:49.495 --> 00:04:54.480
&gt;&gt; Speaker 3: Yeah, on bower.io.

97
00:04:54.480 --> 00:04:58.606
&gt;&gt; Jafar: So
let's run that one more time and

98
00:04:58.606 --> 00:05:03.586
just confirm that we we don't get a search

99
00:05:03.586 --> 00:05:07.731
sent off for an empty search term.

100
00:05:07.731 --> 00:05:13.339
To see if we get a search sent out for
a, we should and

101
00:05:13.339 --> 00:05:18.829
then if I hit back space, no search
&gt;&gt; Speaker 3: Cleared, eh?

102
00:05:18.829 --> 00:05:19.370
&gt;&gt; Jafar: Sorry?

103
00:05:19.370 --> 00:05:20.336
&gt;&gt; Speaker 3: You should
clear your results then?

104
00:05:22.540 --> 00:05:23.360
&gt;&gt; Jafar: That's a good point.

105
00:05:23.360 --> 00:05:25.500
Yeah that is actually a good point.

106
00:05:25.500 --> 00:05:28.000
Yeah maybe maybe filter is
not the right operator here.

107
00:05:28.000 --> 00:05:30.840
Right because we should clear
the search results that I did.

108
00:05:30.840 --> 00:05:35.290
If we filter it then the old result
set is left over very good very good.

109
00:05:35.290 --> 00:05:40.310
So maybe right, good point.

110
00:05:40.310 --> 00:05:43.590
I'm glad we're displaying
the results here so

111
00:05:43.590 --> 00:05:46.956
that we can see when a bad
decision is being made.

112
00:05:46.956 --> 00:05:50.006
So if we want to avoid sending
out the search results, right.

113
00:05:50.006 --> 00:05:53.630
If we wanna avoid sending out an empty
string or maybe ignore an empty string,

114
00:05:53.630 --> 00:05:56.684
right, there might be a different
way we could go about it here.

115
00:05:56.684 --> 00:06:00.120
Well I tell you what,
why don't we come back to that,

116
00:06:00.120 --> 00:06:02.300
because I wanna move forward and
cover some other topics.

117
00:06:02.300 --> 00:06:05.440
But that's auto complete box anyways.

118
00:06:05.440 --> 00:06:08.130
And I think what you'll find
is that the same pattern

119
00:06:08.130 --> 00:06:09.950
keeps coming up again and again.

120
00:06:09.950 --> 00:06:13.230
We have an event,
we have an asynchronous request and

121
00:06:13.230 --> 00:06:17.100
then we'll have some condition
under which we wanna stop, right?

122
00:06:17.100 --> 00:06:20.980
So, you'll pick the right flatten, excuse
me, we have an event in an asynchronous

123
00:06:20.980 --> 00:06:23.170
request, and we wanna pick
the right flatten for the job.

124
00:06:23.170 --> 00:06:24.520
Does that make sense?

125
00:06:26.890 --> 00:06:30.720
So, as soon as we have the event, we'll
map it into an asynchronous request, and

126
00:06:30.720 --> 00:06:33.080
we'll end up with a two
dimensional observable.

127
00:06:33.080 --> 00:06:35.920
Because that's how we make sure that
one thing happens after another.

128
00:06:35.920 --> 00:06:39.630
We have an event and then we use map
to say, only after this event occurs,

129
00:06:39.630 --> 00:06:43.660
do I want to run this function which
creates an async unobservable which will

130
00:06:43.660 --> 00:06:46.730
cause an asynchronous event,
asynchronous request to occur.

131
00:06:46.730 --> 00:06:51.810
And because, for each item in the event
stream we're creating another observable,

132
00:06:51.810 --> 00:06:53.830
we end up with a two
dimensional observable.

133
00:06:53.830 --> 00:06:57.200
And then we have to choose
the right flattening pattern for

134
00:06:57.200 --> 00:06:58.560
it, that makes sense?

