WEBVTT

1
00:00:03.761 --> 00:00:05.031
[MUSIC]
&gt;&gt; Jafar: So how can we take this and

2
00:00:05.031 --> 00:00:08.754
turn it into an observable, so that
instead of when we call search Wikipedia

3
00:00:08.754 --> 00:00:12.941
and immediately make new network requests,
we want it to return an observable to us,

4
00:00:12.941 --> 00:00:16.980
which will on next us this array and
then complete and then tell us it's done.

5
00:00:16.980 --> 00:00:19.260
So an observable of one, in other words.

6
00:00:19.260 --> 00:00:23.792
So, we're going to show you
how to create an observable,

7
00:00:23.792 --> 00:00:26.100
just gonna keep running
files come into those.

8
00:00:29.010 --> 00:00:35.541
So whenever you wanna take an existing
API and adapt it into an observable,

9
00:00:35.541 --> 00:00:41.260
we're gonna call this
getWikipediaSearchResults.

10
00:00:41.260 --> 00:00:45.420
Remember that an observable is an object
with only one method, the forEach method.

11
00:00:45.420 --> 00:00:51.038
Right, and there's a helper function,
which will return an observable.

12
00:00:51.038 --> 00:00:53.736
Actually, I'm gonna write it the long way,

13
00:00:53.736 --> 00:00:57.580
and then we're gonna convert it
into the way that we saw before.

14
00:00:57.580 --> 00:00:59.410
So I'm gonna have
a forEach method in here.

15
00:01:01.110 --> 00:01:03.380
And remember that that forEach
method accepts an observer,

16
00:01:03.380 --> 00:01:07.510
which is three methods, on next,
on error, and on completed.

17
00:01:07.510 --> 00:01:10.570
That's the observer, that's the thing
that we're sending information to.

18
00:01:10.570 --> 00:01:17.022
So in here, I'm actually gonna make
this call to get JSON, the jQuery API.

19
00:01:20.587 --> 00:01:23.952
&gt;&gt; Jafar: And inside of this code,
instead of a learning, all I'm gonna do is

20
00:01:23.952 --> 00:01:28.202
send this information, in this case, I'm
actually gonna just pull out data at one,

21
00:01:28.202 --> 00:01:31.330
which is the array of search results,
to the observer.

22
00:01:31.330 --> 00:01:34.190
Now at this point, we know we're never
gonna call the observer ever again.

23
00:01:34.190 --> 00:01:37.029
Right, cuz the way jQuery API works,
the JSON API just goes to the server,

24
00:01:37.029 --> 00:01:38.530
gets one thing, and then it finishes.

25
00:01:38.530 --> 00:01:43.000
So we wanna tell the consumer, hey,
look, we're never gonna call you again.

26
00:01:43.000 --> 00:01:44.710
And so we just tell them onCompleted, and

27
00:01:44.710 --> 00:01:46.920
that's how we create an observable
with only one element in it.

28
00:01:49.270 --> 00:01:53.500
Now remember that we also have
to return something else.

29
00:01:53.500 --> 00:01:54.490
Can anybody tell me what it is,

30
00:01:54.490 --> 00:01:57.009
when I forEach over an observable
what has to be returned?

31
00:01:58.230 --> 00:01:59.310
&gt;&gt; Speaker 2: A dispose.

32
00:01:59.310 --> 00:02:01.690
&gt;&gt; Jafar: A subscription object
with a dispose method on it, right?

33
00:02:01.690 --> 00:02:04.557
Because if I forEach over this observable,
and half like a second later,

34
00:02:04.557 --> 00:02:07.194
maybe the network request taking
a really long time, and I decide,

35
00:02:07.194 --> 00:02:09.190
I don't want that network request results.

36
00:02:09.190 --> 00:02:10.488
I need some way of cancelling that.

37
00:02:10.488 --> 00:02:14.650
So we're gonna return an object
with a dispose method.

38
00:02:17.430 --> 00:02:23.000
And in here, we have to sort of somehow
cancel the request if possible.

39
00:02:23.000 --> 00:02:25.453
Now the interesting thing about this is
that it's not really possible to cancel

40
00:02:25.453 --> 00:02:27.439
this request, and you're gonna
come across this all the time.

41
00:02:27.439 --> 00:02:32.890
Most synchronous APIs don't have one of
these four semantics that observable has.

42
00:02:32.890 --> 00:02:36.140
The ability to deliver a value,
the ability to deliver an error,

43
00:02:36.140 --> 00:02:39.610
the ability to say onCompleted, and
the ability for the consumer to say,

44
00:02:39.610 --> 00:02:43.580
I don't want anymore data, those
are the four semantics of an observable.

45
00:02:43.580 --> 00:02:46.297
But most asynchronous APIs only
have maybe two or three or one.

46
00:02:46.297 --> 00:02:49.556
And so jQuery API, the JSONP API
is an example of where, well,

47
00:02:49.556 --> 00:02:51.965
they don't really have
the notion of cancel.

48
00:02:51.965 --> 00:02:55.809
If you think about what's happening under
the hood, it's actually adding a script

49
00:02:55.809 --> 00:02:59.322
tag with a source that points to that URL,
and then that code is gonna get run,

50
00:02:59.322 --> 00:03:02.790
it's gonna get call our callback,
whether we want the data or not.

51
00:03:02.790 --> 00:03:06.640
And so sometimes when the underlying
asynchronous API doesn't support

52
00:03:06.640 --> 00:03:09.290
the semantics of the observable,
you have to fake it.

53
00:03:09.290 --> 00:03:12.470
So, in this case, we just wanna make sure
that if somebody calls dispose on our

54
00:03:12.470 --> 00:03:14.650
subscription, we never call them.

55
00:03:14.650 --> 00:03:17.080
And so that means we need to remember
that somebody's called dispose.

56
00:03:17.080 --> 00:03:22.680
So, I'm gonna create a cancelled boolean,
I'm gonna set it to false.

57
00:03:22.680 --> 00:03:27.570
And then inside of dispose,
I'm gonna set canceled to true.

58
00:03:28.670 --> 00:03:32.641
Now inside of my callback,
I'm gonna set an if condition that says,

59
00:03:32.641 --> 00:03:33.740
if not cancelled.

60
00:03:37.470 --> 00:03:40.330
So while I can't cancel the underlying
requests, and you'll run across this all

61
00:03:40.330 --> 00:03:43.240
the time where async APIs don't
provide you this flexibility.

62
00:03:43.240 --> 00:03:46.780
At the very least, you can avoid,
you can satisfy the observable contract

63
00:03:46.780 --> 00:03:50.160
by making sure that if somebody dispose
of a subscription, we don't call them.

64
00:03:50.160 --> 00:03:54.054
Now, if we were using an XHR instead of
a JSONP, we could actually call XHR abort,

65
00:03:54.054 --> 00:03:57.910
and we should probably do that instead,
so that we cancel that network request.

66
00:03:57.910 --> 00:03:59.190
Does that make sense?

67
00:04:00.960 --> 00:04:03.760
So now we've got an API that'll
give us an observable if we ask for

68
00:04:03.760 --> 00:04:06.280
it, an observable that triggers
a network request, and

69
00:04:06.280 --> 00:04:09.200
we've got an observable stream
of all the key presses.

70
00:04:09.200 --> 00:04:11.395
So let's see if we can build something
like it out of complete box.

71
00:04:11.395 --> 00:04:14.590
So but now that I've written
it this out the long way,

72
00:04:14.590 --> 00:04:19.134
I wanna show you that the real correct
way of doing this is that observable has

73
00:04:19.134 --> 00:04:21.203
a helper function called create.

74
00:04:21.203 --> 00:04:23.996
And because we know that
an observable is only one for

75
00:04:23.996 --> 00:04:26.035
each method, we can just shorten it.

76
00:04:26.035 --> 00:04:28.843
So Observable.create just takes
the definition of forEach.

77
00:04:32.418 --> 00:04:33.791
&gt;&gt; Jafar: So
we don't need to create that object.

78
00:04:41.291 --> 00:04:43.163
&gt;&gt; Jafar: And the same thing here,

79
00:04:43.163 --> 00:04:49.226
instead of the same ceremony of always
creating an object with a dispose method,

80
00:04:49.226 --> 00:04:53.530
we'll just return the function
that we used to dispose.

81
00:04:53.530 --> 00:04:56.620
And that just allows you to
write less code, cuz that

82
00:04:56.620 --> 00:04:59.820
part's always gonna be the same, every
single time you create an observable.

83
00:04:59.820 --> 00:05:04.314
So now we've got, hopefully, something
we can call get WikipediaSearchResults.

84
00:05:12.409 --> 00:05:13.217
&gt;&gt; Jafar: And let's pass in Terminator.

85
00:05:18.210 --> 00:05:20.563
&gt;&gt; Jafar: So if I run this,
what would we expect to happen right now?

86
00:05:30.712 --> 00:05:33.705
&gt;&gt; Speaker 3: Nothing,
it's just returning an observable, and

87
00:05:33.705 --> 00:05:36.450
you're not even storing it in a variable.

88
00:05:36.450 --> 00:05:39.220
&gt;&gt; Jafar: Right,
just creating an observable does

89
00:05:39.220 --> 00:05:41.600
nothing because observables are lazy.

90
00:05:41.600 --> 00:05:45.931
We've got a forEach over this
observable in order to call that for

91
00:05:45.931 --> 00:05:49.568
each method write up here and
cause it to do something.

92
00:05:49.568 --> 00:05:54.429
So let's call forEach, and
that's passing a function,

93
00:05:58.736 --> 00:05:59.657
&gt;&gt; Jafar: And let's alert them.

94
00:06:03.542 --> 00:06:07.527
&gt;&gt; Jafar: So if we run this,
&gt;&gt; Jafar: Great, so

95
00:06:07.527 --> 00:06:11.320
now we've done the same thing,
except now we have an observable API.

96
00:06:11.320 --> 00:06:12.460
So now we get to do the fun stuff,

97
00:06:12.460 --> 00:06:16.980
which is compose these things together
using map, filter, concatAll, etc.

