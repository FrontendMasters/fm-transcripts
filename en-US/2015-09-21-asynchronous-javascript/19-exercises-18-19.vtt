WEBVTT

1
00:00:03.930 --> 00:00:06.501
&gt;&gt; Jafar Husain: So let's retrieve
the URL of the largest box art.

2
00:00:06.501 --> 00:00:12.396
Okay, so now, this is an interesting one
because notice that reduce is gonna have,

3
00:00:12.396 --> 00:00:17.214
it's kind of a challenging one
because sometimes when you're using

4
00:00:17.214 --> 00:00:19.640
your accumulated value, right.

5
00:00:19.640 --> 00:00:23.760
Needs to be, sometimes the result you want
is not the same as the accumulated value

6
00:00:23.760 --> 00:00:24.550
you'd use for reduce.

7
00:00:25.720 --> 00:00:26.840
Let me show you an example.

8
00:00:26.840 --> 00:00:30.240
So I've got to compare box
arts to each other, right.

9
00:00:30.240 --> 00:00:33.070
And I want to come up with
the URL of the largest one.

10
00:00:33.070 --> 00:00:36.791
So what I'm gonna do is I'm just
going to call reduce without an,

11
00:00:36.791 --> 00:00:38.830
I'm gonna my arrow function here.

12
00:00:40.500 --> 00:00:45.215
So we're in a function that takes
accumulated and current, and

13
00:00:45.215 --> 00:00:48.447
if the accumulated width times accumulated

14
00:00:48.447 --> 00:00:51.528
height,
&gt;&gt; Jafar Husain: Is

15
00:00:51.528 --> 00:00:54.465
larger than current width
times current height.

16
00:00:57.035 --> 00:00:59.735
Actually I think we can shorten
this into the same ternary

17
00:00:59.735 --> 00:01:01.575
expression that we used last time.

18
00:01:03.775 --> 00:01:05.355
We return accumulated versus current.

19
00:01:05.355 --> 00:01:08.090
So it's almost exactly
the same as last time, right.

20
00:01:08.090 --> 00:01:10.840
We just compare the current
box art with the last box art,

21
00:01:10.840 --> 00:01:13.910
and if the current one is is larger,
we return the current one,

22
00:01:13.910 --> 00:01:16.744
if the if the one we've accumulated
thus far as large we return that one.

23
00:01:16.744 --> 00:01:20.270
I'm gonna close this reduce off,
but I'm not done yet.

24
00:01:21.324 --> 00:01:22.890
I've picked the largest box art but

25
00:01:22.890 --> 00:01:27.470
remember that the goal was to actually
return the URL of the largest box art.

26
00:01:27.470 --> 00:01:31.300
So in this case, I'm expecting,
because I think 425 by 150 is the largest,

27
00:01:31.300 --> 00:01:32.700
I'm not sure actually.

28
00:01:32.700 --> 00:01:34.880
I think I'm expecting to just get this.

29
00:01:34.880 --> 00:01:39.265
Anybody want to tell me what operator I
would also have to chain off of reduce to

30
00:01:39.265 --> 00:01:40.958
just grab that one property?

31
00:01:40.958 --> 00:01:42.174
&gt;&gt; Speaker 2: [INAUDIBLE] to map it?

32
00:01:42.174 --> 00:01:43.595
&gt;&gt; Jafar Husain: Yeah, I'd have to map it.

33
00:01:43.595 --> 00:01:46.245
Now I've got an array containing
just one box art, and

34
00:01:46.245 --> 00:01:49.185
what I want is an array containing
just the URL of that box art.

35
00:01:49.185 --> 00:01:53.205
So we're substituting the box art
object for just the URL inside.

36
00:01:59.253 --> 00:02:00.708
&gt;&gt; Jafar Husain: I think that's right.

37
00:02:05.477 --> 00:02:07.221
&gt;&gt; Jafar Husain: Where's
my semicolon here?

38
00:02:12.901 --> 00:02:14.620
&gt;&gt; Jafar Husain: Yeah, that worked.

39
00:02:14.620 --> 00:02:16.580
So that's reduce.

40
00:02:16.580 --> 00:02:18.780
Now let's try reducing
with an initial value.

41
00:02:18.780 --> 00:02:23.210
One of the challenging things about reduce
is that sometimes, the types of the object

42
00:02:23.210 --> 00:02:28.060
in the collection is not the same type as
the object we want to come out of reduce.

43
00:02:28.060 --> 00:02:31.790
So the result of reduce will
usually be the same type

44
00:02:31.790 --> 00:02:34.440
as whatever the accumulated value is.

45
00:02:34.440 --> 00:02:37.850
So if you allow the accumulated value
to just be the first item in the array,

46
00:02:37.850 --> 00:02:40.610
well then you know the type that
comes out of reduce gonna be the same

47
00:02:40.610 --> 00:02:42.180
type as what's inside of the array.

48
00:02:42.180 --> 00:02:43.820
However, sometimes you don't want that.

49
00:02:43.820 --> 00:02:46.910
Sometimes if you provide your own
accumulated values as a starting point,

50
00:02:46.910 --> 00:02:49.830
that last optional argument,
then you would expect the result to

51
00:02:49.830 --> 00:02:52.460
come out of reduce to always be
the type of that accumulated argument.

52
00:02:52.460 --> 00:02:55.370
That's not always true in JavaScript
cuz there's no types and, but

53
00:02:55.370 --> 00:02:56.830
generally speaking that's true.

54
00:02:56.830 --> 00:02:58.430
So here I have an array of videos.

55
00:02:58.430 --> 00:03:04.570
But what I'm trying to get is a,
we want, interesting.

56
00:03:04.570 --> 00:03:08.980
We're trying to create a map so
we have an array of IDs and titles.

57
00:03:08.980 --> 00:03:14.006
And we want to create is a map
where the ID is the key and the,

58
00:03:14.006 --> 00:03:19.370
let me see, the value is the title.

59
00:03:19.370 --> 00:03:23.690
So let's show you what I mean here,
there's an example down here I believe.

60
00:03:26.530 --> 00:03:28.360
There isn't, that's a shame.

61
00:03:28.360 --> 00:03:29.360
Here we go.

62
00:03:29.360 --> 00:03:32.010
So I would expect an array
containing only one result,

63
00:03:32.010 --> 00:03:35.690
where we have a map of all the video ids,
and their titles.

64
00:03:35.690 --> 00:03:40.650
Whereas now we have an array of ids and
titles, we want to get this.

65
00:03:41.930 --> 00:03:43.420
So we're taking all these objects and

66
00:03:43.420 --> 00:03:46.600
aggregating them up into one big map,
right?

67
00:03:46.600 --> 00:03:49.610
But notice that what comes out at
the end isn't an object that looks like

68
00:03:49.610 --> 00:03:50.220
ID and title.

69
00:03:51.260 --> 00:03:54.040
It's a different type,
it's this map with all that stuff.

70
00:03:54.040 --> 00:03:56.750
And so what I'm gonna do is I'm
wanna give it an accumulator value

71
00:03:56.750 --> 00:03:58.080
that's an empty map.

72
00:03:58.080 --> 00:04:00.000
Because what I wanna do is I
wanna take all these titles,

73
00:04:00.000 --> 00:04:03.800
I wanna suck their data out and I wanna
jam it in to this accumulated map, so

74
00:04:03.800 --> 00:04:07.900
that in the end all and left with is that
accumulated map with all the data inside.

75
00:04:07.900 --> 00:04:09.256
So let's try this.

76
00:04:09.256 --> 00:04:11.210
So I'm gonna use my accumulated map and

77
00:04:11.210 --> 00:04:14.600
notice here down here in passing
an empty map as my accumulated values.

78
00:04:14.600 --> 00:04:17.930
That's what I want to use as my
accumulated value, every single time a new

79
00:04:17.930 --> 00:04:21.332
video comes in, I'm just gonna pull
the ID and title and stick it in there.

80
00:04:21.332 --> 00:04:25.710
Now, here is one definition
that would work actually.

81
00:04:26.800 --> 00:04:33.820
But I'm not gonna do it, which is
accumulatedMap[video.id] = video.title.

82
00:04:33.820 --> 00:04:37.378
If we did this, it would work.

83
00:04:42.665 --> 00:04:44.960
&gt;&gt; Jafar Husain: We of course have
to return the accumulatedMap.

84
00:04:47.500 --> 00:04:48.940
Does everybody see why that's gonna work?

85
00:04:50.080 --> 00:04:53.165
So we pass in an empty map and for

86
00:04:53.165 --> 00:04:58.239
every single item,
&gt;&gt; Jafar Husain: So

87
00:04:58.239 --> 00:05:02.890
current is going to be this item,
right down here.

88
00:05:05.345 --> 00:05:07.911
So the video is gonna be
this item right up here.

89
00:05:12.360 --> 00:05:16.160
&gt;&gt; Jafar Husain: First, and then it's
gonna be passed into the accumulatedMap.

90
00:05:16.160 --> 00:05:19.060
And now we're just gonna use this,
we're just gonna add the data

91
00:05:19.060 --> 00:05:23.200
inside of this video, id and title,
to the accumulatedMap and return it.

92
00:05:23.200 --> 00:05:27.210
So the next time around, the same
map will be the accumulatedMap and

93
00:05:27.210 --> 00:05:28.220
we'll just have a different video.

94
00:05:29.330 --> 00:05:30.630
So now it will be this one.

95
00:05:30.630 --> 00:05:33.455
So we suck the ID and title out,
add it to the accumulatedMap,

96
00:05:33.455 --> 00:05:37.360
return that accumulatedMap, and once
again, we just keep going like that until

97
00:05:37.360 --> 00:05:41.210
finally we've exhausted everything and
we return the accumulatedMap.

98
00:05:41.210 --> 00:05:44.110
Now that will work in JavaScript and
I don't want us to do it.

99
00:05:44.110 --> 00:05:46.184
I don't want us to do it for
one simple reason.

100
00:05:46.184 --> 00:05:51.504
Inside of all of our functions that we
pass to these operators, map, filter,

101
00:05:51.504 --> 00:05:57.170
reduce, here's what I want you guys to do,
never ever change a value.

102
00:05:57.170 --> 00:06:00.376
Inside of map, your map function,
inside of your filter function,

103
00:06:00.376 --> 00:06:03.033
your projection function,
your predicate functions,

104
00:06:03.033 --> 00:06:05.382
I never ever want you to
change a variable, ever.

105
00:06:05.382 --> 00:06:08.190
And what we're doing here is we've
got this accumulated map and

106
00:06:08.190 --> 00:06:09.190
we're changing it.

107
00:06:09.190 --> 00:06:12.530
We're actually changing what it is
by sticking some properties onto it,

108
00:06:12.530 --> 00:06:14.350
does that make sense?

109
00:06:14.350 --> 00:06:15.310
What I mean when I say change it,

110
00:06:16.730 --> 00:06:20.330
I can do this without ever
changing the accumulatedMap.

111
00:06:20.330 --> 00:06:21.539
I can do it without changing it all.

112
00:06:22.810 --> 00:06:24.060
Here is how I'm gonna do it.

113
00:06:24.060 --> 00:06:25.310
Well, here's one way of doing it.

114
00:06:25.310 --> 00:06:26.630
Which is, I could actually clone the map.

115
00:06:31.490 --> 00:06:33.930
Not so efficiently, but this would work.

116
00:06:36.720 --> 00:06:39.580
Does everybody know why this
would create a clone of the map?

117
00:06:39.580 --> 00:06:43.985
I'm turning this map, I'm serializing into
a string, that's adjacent string, and then

118
00:06:43.985 --> 00:06:47.895
I'm parsing that string, so I've actually
created a complete copy of that map.

119
00:06:47.895 --> 00:06:54.410
So if I did this,
&gt;&gt; Jafar Husain: I would

120
00:06:54.410 --> 00:06:59.600
accomplish what I'm trying to accomplish
was I'm trying to avoid changing values.

121
00:06:59.600 --> 00:07:03.380
So in this case I'm creating a brand new
value, and I'll set a property on that.

122
00:07:03.380 --> 00:07:04.780
That's okay, as long as I'm not,

123
00:07:04.780 --> 00:07:07.880
the point is I don't wanna change
a value that's passed in to me.

124
00:07:07.880 --> 00:07:10.780
Cuz let's say I have a value, and
I call a function I pass that value in,

125
00:07:10.780 --> 00:07:13.400
and somebody else mucks with it,
they change it.

126
00:07:13.400 --> 00:07:15.050
That's actually kind of complicated,

127
00:07:15.050 --> 00:07:18.570
because I never know whether somebody's
gonna muck with my value or not.

128
00:07:18.570 --> 00:07:22.193
Ideally they would create a copy, and so I
would be able to hold on to my object and

129
00:07:22.193 --> 00:07:25.133
they would be able to do whatever
computation they needed to do.

130
00:07:25.133 --> 00:07:28.961
So this concept of mutation,
of changing an object once you have it,

131
00:07:28.961 --> 00:07:32.520
actually creates a lot of
complexity in an application.

132
00:07:32.520 --> 00:07:35.490
And notice that all the functions I've
been showing you up to this point,

133
00:07:35.490 --> 00:07:37.160
they don't change arrays, right?

134
00:07:37.160 --> 00:07:38.680
Maps doesn't change an array.

135
00:07:38.680 --> 00:07:40.170
Filter doesn't change an array.

136
00:07:40.170 --> 00:07:42.860
Map creates a new array, right?

137
00:07:42.860 --> 00:07:44.280
Filter creates a new array.

138
00:07:44.280 --> 00:07:48.530
All of the expressions that we've been
writing thus far never change anything.

139
00:07:48.530 --> 00:07:51.350
They just create new data from old data,
and

140
00:07:51.350 --> 00:07:54.742
that turns out to be a really
wonderful property in a program.

141
00:07:54.742 --> 00:07:57.065
So without explaining necessarily why,

142
00:07:57.065 --> 00:08:01.375
what I'd like you to do is avoid changing
any variables that you don't own and

143
00:08:01.375 --> 00:08:04.913
you haven't introduced yourself
inside of these functions.

144
00:08:04.913 --> 00:08:08.163
And the way that you can do that,
JavaScript has actually got a neat trick,

145
00:08:08.163 --> 00:08:11.320
which allows you to do this without this,
which is much more expensive.

146
00:08:11.320 --> 00:08:13.740
It's actually a cheap way
of cloning an object.

147
00:08:13.740 --> 00:08:18.771
Who here is familiar with prototypal
inheritance in JavaScript?

148
00:08:18.771 --> 00:08:21.180
So we have a few people.

149
00:08:21.180 --> 00:08:25.595
In JavaScript, we have this notion
of prototypal inheritance, and

150
00:08:25.595 --> 00:08:30.174
what that means is, if I have a,
actually, I'll show it in a console.

151
00:08:33.550 --> 00:08:34.920
&gt;&gt; Jafar Husain: So
let's say I create a person.

152
00:08:37.370 --> 00:08:40.770
&gt;&gt; Speaker 3: Just for reference,
our advanced JavaScript course

153
00:08:40.770 --> 00:08:44.970
really covers this in
very specific detail.

154
00:08:44.970 --> 00:08:48.030
&gt;&gt; Jafar Husain: Okay, so I'll be very
brief, I'll just show the concept.

155
00:08:48.030 --> 00:08:52.056
So I've created a person and now let's
say I want to create a person object that

156
00:08:52.056 --> 00:08:55.915
has all the same another object that
has all the same stuff inside a person.

157
00:08:55.915 --> 00:08:57.733
But I also want to add some stuff to it,
so

158
00:08:57.733 --> 00:08:59.670
I don't want to change the person object.

159
00:08:59.670 --> 00:09:03.160
I wanna create a whole new object that has
all the same stuff inside a person but

160
00:09:03.160 --> 00:09:04.770
extra properties as well.

161
00:09:04.770 --> 00:09:07.716
So I'm going to create-
&gt;&gt; Speaker 3: [INAUDIBLE] console process.

162
00:09:07.716 --> 00:09:08.216
&gt;&gt; Jafar Husain: Absolutely.

163
00:09:15.643 --> 00:09:20.590
&gt;&gt; Jafar Husain: This is a little bit odd,
but what this does is it

164
00:09:20.590 --> 00:09:25.427
doesn't create a clone of,
this is not good.

165
00:09:25.427 --> 00:09:26.259
&gt;&gt; Speaker 4: Can you escape?

166
00:09:27.988 --> 00:09:29.660
&gt;&gt; Jafar Husain: Good, good call.

167
00:09:29.660 --> 00:09:34.143
It doesn't create a clone of person,
but if, notice that if what

168
00:09:34.143 --> 00:09:39.143
happens if I look up,
&gt;&gt; Jafar Husain: The name,

169
00:09:39.143 --> 00:09:40.680
it looks like it creates a clone.

170
00:09:40.680 --> 00:09:41.890
It looks like it's
actually created a copy,

171
00:09:41.890 --> 00:09:43.770
because it's got the same name property.

172
00:09:43.770 --> 00:09:47.580
But what's actually happening is
that every object in JavaScript

173
00:09:47.580 --> 00:09:49.990
has what's called a prototype.

174
00:09:49.990 --> 00:09:55.650
So it actually has a pointer to another
object which it's using as its prototype.

175
00:09:55.650 --> 00:09:56.710
So another way of saying that is

176
00:09:56.710 --> 00:09:59.810
every object in JavaScript
is like a linked list.

177
00:09:59.810 --> 00:10:04.636
So another person is actually just an
empty object and I can prove that to you.

178
00:10:10.133 --> 00:10:11.000
&gt;&gt; Jafar Husain: It's empty.

179
00:10:11.000 --> 00:10:12.440
It's actually got no properties in it.

180
00:10:12.440 --> 00:10:14.520
So it's got no properties in it.

181
00:10:14.520 --> 00:10:15.317
How does this work?

182
00:10:21.385 --> 00:10:22.582
&gt;&gt; Jafar Husain: Well the way it works,

183
00:10:22.582 --> 00:10:25.618
is that another person actually
has a pointer to person.

184
00:10:25.618 --> 00:10:30.482
And if you attempt to look up a key on
another person and that key is not found,

185
00:10:30.482 --> 00:10:33.460
it follows the link to the next object.

186
00:10:33.460 --> 00:10:36.149
And then it finds it on person and
it stops there.

187
00:10:36.149 --> 00:10:37.210
Does that make sense?

188
00:10:37.210 --> 00:10:39.430
So we've created a linked list of objects.

189
00:10:40.530 --> 00:10:44.110
Every JavaScript is in fact a linked list
of objects, and if you attempt to look up

190
00:10:44.110 --> 00:10:47.900
a property on them, and it's not there,
it'll keep following the chain up.

191
00:10:47.900 --> 00:10:50.890
And so, in essence,
it's actually a cheap way, in some ways,

192
00:10:50.890 --> 00:10:52.970
to think about it as copying an object.

193
00:10:52.970 --> 00:10:54.970
Because, instead of just going
through all the properties and

194
00:10:54.970 --> 00:10:57.930
then copying them into another object,
what you've actually just done is you

195
00:10:57.930 --> 00:11:02.030
just created a new object with
a little pointer to the old one.

196
00:11:02.030 --> 00:11:05.414
And so
I can use that technique here to avoid

197
00:11:05.414 --> 00:11:08.422
ever changing the accumulated map and

198
00:11:08.422 --> 00:11:15.778
instead,
&gt;&gt; Jafar Husain: Make

199
00:11:15.778 --> 00:11:18.788
a very cheap quote unquote copy of it.

200
00:11:26.339 --> 00:11:29.268
&gt;&gt; Jafar Husain: So what I've done here
is I've made a whole new object, in fact,

201
00:11:29.268 --> 00:11:31.421
I'll even name it differently so
it's clear.

202
00:11:34.610 --> 00:11:37.440
&gt;&gt; Jafar Husain: And since I created this
object I can muck with it all I want.

203
00:11:37.440 --> 00:11:40.700
The whole point is to avoid
changing somebody else's objects.

204
00:11:40.700 --> 00:11:43.510
So if an object gets passed into
a function, you shouldn't muck with it.

205
00:11:43.510 --> 00:11:45.540
Not in a map or a filter or
reduce function.

206
00:11:45.540 --> 00:11:47.380
You shouldn't muck with
other people's objects, but

207
00:11:47.380 --> 00:11:49.460
here I've created the object myself,
right.

208
00:11:49.460 --> 00:11:52.990
And so I can set this one property
here and return it, and it works.

209
00:11:54.900 --> 00:11:58.600
So what we keep doing is we're actually
creating new little maps that hold onto

210
00:11:58.600 --> 00:12:00.274
all the old maps which
are also still there.

211
00:12:00.274 --> 00:12:03.220
Now, ad we have never changed any of them,
right?

212
00:12:03.220 --> 00:12:07.249
And the end result is the same,
that we have a a single

213
00:12:07.249 --> 00:12:12.463
map,
&gt;&gt; Jafar Husain: I'm not sure where

214
00:12:12.463 --> 00:12:18.566
the problem is but,
&gt;&gt; Speaker 4: It is pretty

215
00:12:18.566 --> 00:12:22.308
interesting looking a little [INAUDIBLE]
&gt;&gt; Jafar Husain: Hm?

216
00:12:22.308 --> 00:12:23.528
&gt;&gt; Speaker 4: I got nothing.

217
00:12:23.528 --> 00:12:25.065
&gt;&gt; Jafar Husain: Yeah,
so we're just, you know,

218
00:12:25.065 --> 00:12:26.820
it's a cheap way of copying an object.

219
00:12:26.820 --> 00:12:30.892
Instead of actually copying the object,
we create another another empty object and

220
00:12:30.892 --> 00:12:32.972
create a little pointer to the old object.

221
00:12:32.972 --> 00:12:36.747
And then every time you try to look up
something on the new object, if it can't

222
00:12:36.747 --> 00:12:40.717
find it, it walks the line until it can
find an object with that property, yeah.

223
00:12:40.717 --> 00:12:43.292
&gt;&gt; Speaker 5: So if you create,
an object.create and

224
00:12:43.292 --> 00:12:46.516
let's say you changed the original copy.

225
00:12:46.516 --> 00:12:47.720
&gt;&gt; Jafar Husain: Then
it'll muck with a new,

226
00:12:47.720 --> 00:12:50.160
then it'll make the new copy
look like it's changed.

227
00:12:50.160 --> 00:12:53.690
Right, so we can actually try that right
here because, remember it's not really,

228
00:12:53.690 --> 00:12:57.360
it hasn't copied the data, it's actually
just holding on to the old data.

229
00:12:57.360 --> 00:12:59.340
I think that's actually a good example so
we should check that out.

230
00:12:59.340 --> 00:13:01.830
&gt;&gt; Speaker 5: So you could still have
issues doing it this way too then?

231
00:13:01.830 --> 00:13:02.990
&gt;&gt; Jafar Husain: Yes, you could.

232
00:13:02.990 --> 00:13:08.984
Somebody could muck with the original
object and then you'd be in a bad place.

233
00:13:08.984 --> 00:13:10.112
I still have that open?

234
00:13:14.576 --> 00:13:15.681
&gt;&gt; Jafar Husain: The goal here is,

235
00:13:15.681 --> 00:13:19.600
JavaScript can't make sure that
nobody mucks with an object.

236
00:13:19.600 --> 00:13:21.120
Well, that's not entirely true.

237
00:13:21.120 --> 00:13:25.580
You can call object.seal, which is a way
of actually locking down an object

238
00:13:25.580 --> 00:13:27.850
to avoid anybody making any copies to it.

239
00:13:27.850 --> 00:13:29.670
And so every now and
then that's actually a nice thing to do.

240
00:13:29.670 --> 00:13:31.810
If you want to make sure that
nobody mucks with your object,

241
00:13:31.810 --> 00:13:35.260
you can call object.seal on it, and
then nobody else can muck with it.

242
00:13:35.260 --> 00:13:39.600
But some languages can actually statically
verify that nobody can change your objects

243
00:13:39.600 --> 00:13:40.610
and that's kind of nice.

244
00:13:40.610 --> 00:13:43.930
So in JavaScript we're just sort of
relying on the honor system here,

245
00:13:43.930 --> 00:13:45.180
in this type of programming.

246
00:13:45.180 --> 00:13:47.170
So who's familiar with the term
functional programming?

247
00:13:48.580 --> 00:13:50.030
Quite a few people, right.

248
00:13:50.030 --> 00:13:52.670
The idea behind functional
programming is very much this,

249
00:13:52.670 --> 00:13:55.520
you'll always take data in and
create new data.

250
00:13:55.520 --> 00:13:58.420
You don't change anybody else's data,
and that turns

251
00:13:58.420 --> 00:14:01.630
out to actually be a very simple and
powerful way of building a program.

252
00:14:01.630 --> 00:14:03.740
And up till now it's pretty much
all we've been doing, right?

253
00:14:03.740 --> 00:14:05.600
We've taken arrays, creating new arrays.

254
00:14:05.600 --> 00:14:09.060
We've never changed anything except
in our implementation of map and

255
00:14:09.060 --> 00:14:12.500
our implementation of filter, where we've
created a new array that we own, and

256
00:14:12.500 --> 00:14:13.530
modify that right.

257
00:14:13.530 --> 00:14:14.280
That's okay.

258
00:14:14.280 --> 00:14:16.102
Creating your own objects and
modifying them is fine.

259
00:14:16.102 --> 00:14:19.906
But if you think about it up till now
we've never ever taken somebody else's

260
00:14:19.906 --> 00:14:21.102
object and changed it.

261
00:14:21.102 --> 00:14:24.840
And I want you to continue
doing that as we go over time.

262
00:14:24.840 --> 00:14:28.840
Think that way inside of your map and
your filter function, it's a smell.

263
00:14:28.840 --> 00:14:31.762
If you're having to change
an object that was passed into you.

264
00:14:31.762 --> 00:14:32.580
That make sense?

