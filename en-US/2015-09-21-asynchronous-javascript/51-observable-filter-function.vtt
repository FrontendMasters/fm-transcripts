WEBVTT

1
00:00:00.000 --> 00:00:03.591
[MUSIC]

2
00:00:03.591 --> 00:00:08.411
&gt;&gt; Jafar Husain: So
there's a mapped observable in ten lines.

3
00:00:08.411 --> 00:00:09.711
It's not a lot of code.

4
00:00:12.431 --> 00:00:14.400
&gt;&gt; Jafar Husain: Should we try a filter?

5
00:00:14.400 --> 00:00:16.710
Let's see if you guys can
help me write a filter.

6
00:00:16.710 --> 00:00:17.930
You know how filter works on array?

7
00:00:24.510 --> 00:00:27.530
So filter takes not, it's not called
a projection function it's called

8
00:00:27.530 --> 00:00:29.831
the predicate action,
who cares about the fancy name.

9
00:00:29.831 --> 00:00:32.710
Let's just call it what we all
know it to be, a test function.

10
00:00:32.710 --> 00:00:36.220
It returns true or
false based on the object going in.

11
00:00:36.220 --> 00:00:40.310
And so now her job is to be
a filtered observable and

12
00:00:40.310 --> 00:00:42.220
I'm the source observable, right.

13
00:00:42.220 --> 00:00:46.500
And he's going to call forEach on her and
her job is to make sure

14
00:00:46.500 --> 00:00:51.260
not to give you any numbers
larger than five, okay.

15
00:00:51.260 --> 00:00:54.600
So you're only gonna get numbers
smaller than five, right so

16
00:00:54.600 --> 00:00:56.020
let's try it again, forEach her.

17
00:00:56.020 --> 00:00:59.260
&gt;&gt; Speaker 2: Okay, so but
I'm forEaching a function, right, and

18
00:00:59.260 --> 00:01:03.350
that function is gonna have
that logic built in, right?

19
00:01:03.350 --> 00:01:06.800
&gt;&gt; Jafar Husain: Well, so she's the
observable that is the result of calling

20
00:01:06.800 --> 00:01:08.200
filter on another observable.

21
00:01:08.200 --> 00:01:11.240
So when you call filter on an array,
you get an array back, right?

22
00:01:11.240 --> 00:01:13.680
When you call filter on an observable
you get an observable back.

23
00:01:13.680 --> 00:01:15.560
So let's say you,
I'm the source observable.

24
00:01:15.560 --> 00:01:18.160
I'm just gonna, on next number,
number, number, number.

25
00:01:18.160 --> 00:01:22.930
You filter me and you create her,
she's now a filtered observable

26
00:01:22.930 --> 00:01:25.170
that's holding on to me,
she knows how to talk to me.

27
00:01:25.170 --> 00:01:29.050
And when you foreach over her, she's going
to foreach over me because in order to

28
00:01:29.050 --> 00:01:32.670
give you my filter data, she has to ask
for and that's how she asked for it.

29
00:01:32.670 --> 00:01:34.450
She foreach's over me.

30
00:01:34.450 --> 00:01:36.221
Okay, so let's play it one more time.

31
00:01:36.221 --> 00:01:40.164
Filter right, we're gonna do it live and
I'm like well with acting it out and

32
00:01:40.164 --> 00:01:43.660
then we gonna code it up and
we'll see the correspondence.

33
00:01:43.660 --> 00:01:44.742
So foreach over her.

34
00:01:44.742 --> 00:01:48.221
&gt;&gt; Speaker 2: So
foreach over the observable.

35
00:01:48.221 --> 00:01:49.421
&gt;&gt; Speaker 3: Sorry.

36
00:01:49.421 --> 00:01:50.061
&gt;&gt; Jafar Husain: It's okay.

37
00:01:50.061 --> 00:01:51.581
&gt;&gt; Speaker 3: Foreach.

38
00:01:51.581 --> 00:01:53.601
&gt;&gt; Jafar Husain: Right,
she forEach's over me.

39
00:01:53.601 --> 00:01:57.840
I say, on next one, you're only gonna give
him numbers, larger or smaller than five,

40
00:01:57.840 --> 00:01:58.680
excuse me.

41
00:01:58.680 --> 00:01:59.630
So one.

42
00:01:59.630 --> 00:02:00.820
&gt;&gt; Speaker 3: On next, one.

43
00:02:00.820 --> 00:02:01.320
&gt;&gt; Jafar Husain: On next, seven?

44
00:02:03.032 --> 00:02:04.732
&gt;&gt; Jafar Husain: On next nine?

45
00:02:04.732 --> 00:02:06.172
On next three?

46
00:02:06.172 --> 00:02:06.952
&gt;&gt; Speaker 3: On next three.

47
00:02:06.952 --> 00:02:07.992
&gt;&gt; Jafar Husain: On completed.

48
00:02:07.992 --> 00:02:09.312
&gt;&gt; Speaker 3: On completed.

49
00:02:09.312 --> 00:02:10.812
&gt;&gt; Jafar Husain: So she's only, sorry?

50
00:02:10.812 --> 00:02:12.232
&gt;&gt; Speaker 2: Dispose.

51
00:02:12.232 --> 00:02:13.912
&gt;&gt; Jafar Husain: Well,
you don't call dispose.

52
00:02:13.912 --> 00:02:16.172
When she says to you onCompleted,
you don't have to call dispose.

53
00:02:16.172 --> 00:02:17.412
Why would you call dispose?

54
00:02:17.412 --> 00:02:19.830
She's never gonna call you again, right?

55
00:02:19.830 --> 00:02:23.330
It's her job, that when she says
onCompleted, she cleans up after herself.

56
00:02:23.330 --> 00:02:25.110
So there's no reason for
you to call dispose.

57
00:02:25.110 --> 00:02:26.690
&gt;&gt; Speaker 4: She's gonna call dispose?

58
00:02:26.690 --> 00:02:28.643
&gt;&gt; Jafar Husain: Under the hood, yes.
Technically she calls dispose or

59
00:02:28.643 --> 00:02:32.080
at least does everything that would
happen when you call dispose.

60
00:02:32.080 --> 00:02:34.414
Her job is just to clean
up after herself so

61
00:02:34.414 --> 00:02:37.493
that she's never holding on
to any of his references.

62
00:02:37.493 --> 00:02:38.893
Does that make sense?

63
00:02:38.893 --> 00:02:40.433
So let's try it.

64
00:02:40.433 --> 00:02:42.053
So let's try it now in code, right.

65
00:02:42.053 --> 00:02:46.670
Before this was a mapped observable and
now it's a filtered observable.

66
00:02:46.670 --> 00:02:49.850
So this is the filtered observable.

67
00:02:49.850 --> 00:02:53.030
This is the original source of
observable which we're capturing

68
00:02:53.030 --> 00:02:55.070
by of ourself equals this.

69
00:02:55.070 --> 00:02:59.040
And now when you foreach over
it inside of the on next.

70
00:02:59.040 --> 00:02:59.843
What are we gonna do?

71
00:02:59.843 --> 00:03:04.149
Where there was a map,
we just applied a function to it and

72
00:03:04.149 --> 00:03:07.850
then took the result and
threaded it on through.

73
00:03:07.850 --> 00:03:09.113
But what's different about filter for map?

74
00:03:12.213 --> 00:03:14.581
&gt;&gt; Speaker 3: You're comparing,
there's a test.

75
00:03:14.581 --> 00:03:15.804
&gt;&gt; Jafar Husain: There's a test function.

76
00:03:15.804 --> 00:03:20.502
So we need to take the data,
that I'll on next her, like nine and

77
00:03:20.502 --> 00:03:24.345
we need to run it through
the test function, right?

78
00:03:24.345 --> 00:03:29.346
And then how does she decide
whether to on next him?

79
00:03:29.346 --> 00:03:35.439
&gt;&gt; Speaker 2: If text function
returns true she will on next him,

80
00:03:35.439 --> 00:03:39.640
the thing whatever it is-
&gt;&gt; Students: [LAUGH]

81
00:03:39.640 --> 00:03:41.780
&gt;&gt; Speaker 6: The value.

82
00:03:41.780 --> 00:03:44.640
&gt;&gt; Speaker 2: The value.

83
00:03:44.640 --> 00:03:46.240
&gt;&gt; Jafar Husain: We don't
translate the value, right?

84
00:03:46.240 --> 00:03:47.680
Filter doesn't change values.

85
00:03:47.680 --> 00:03:52.500
It just decides whether or
not to forward them along, right?

86
00:03:56.410 --> 00:03:59.855
So I got a few errors
are probably missing semicolons.

87
00:03:59.855 --> 00:04:04.680
&gt;&gt; Speaker 2: So is that basically what
we wrote when we implemented filter?

88
00:04:04.680 --> 00:04:06.390
&gt;&gt; Jafar Husain: For array, yes.

89
00:04:06.390 --> 00:04:07.590
You did the equivalent for an array.

90
00:04:07.590 --> 00:04:10.256
If you think back to what you did over
an array, you for eached over, right.

91
00:04:10.256 --> 00:04:12.773
And then if it was true,
you ran it, if you go back and

92
00:04:12.773 --> 00:04:16.800
even look at your definition of array
you'll see the correspondence, right?

93
00:04:16.800 --> 00:04:19.710
You for eached over the source, and if it
happened to run through a test function

94
00:04:19.710 --> 00:04:21.990
and returned true,
you would send it along.

95
00:04:21.990 --> 00:04:25.200
In your case, you would put it into
the new array with results.push.

96
00:04:25.200 --> 00:04:26.930
In our case,
we don't we're not accumulating up

97
00:04:26.930 --> 00:04:28.680
data in a big array somewhere.

98
00:04:28.680 --> 00:04:31.000
It's actually a good deal more efficient.

99
00:04:31.000 --> 00:04:34.070
Imagine, if you take one, two, three,
four, and then you map over it, and

100
00:04:34.070 --> 00:04:35.240
then you just add one to everything,

101
00:04:35.240 --> 00:04:38.290
you're creating a whole big
copy of that array in memory.

102
00:04:38.290 --> 00:04:39.950
Not so with observable.

103
00:04:39.950 --> 00:04:42.940
We don't create big copies
of streams in memory,

104
00:04:42.940 --> 00:04:46.270
every single time I give her a value
she doesn't stored anywhere.

105
00:04:46.270 --> 00:04:48.260
She just forwards it on
to you like a hot potato.

106
00:04:49.260 --> 00:04:52.690
So when you create map filter,
when you create this big

107
00:04:52.690 --> 00:04:55.540
expression of observable you know
what you actually really created?

108
00:04:55.540 --> 00:04:59.850
Just a tiny little object graph in memory
of functions holding onto functions,

109
00:04:59.850 --> 00:05:02.230
holding on to functions,
holding on to functions.

110
00:05:02.230 --> 00:05:05.250
It's very little memory compared
to if you map over an observable

111
00:05:05.250 --> 00:05:09.870
with 12,000 items in it, if you map
over an array with 12,000 items in it

112
00:05:09.870 --> 00:05:12.380
you get a whole another
array exactly as long.

113
00:05:12.380 --> 00:05:15.430
This is the notion of
streaming data through, right?

114
00:05:15.430 --> 00:05:17.640
We're streaming,
we're not collecting it up in memory.

115
00:05:17.640 --> 00:05:18.830
We're streaming it through.

116
00:05:20.380 --> 00:05:21.946
So, you want to take this out for a spin?

117
00:05:21.946 --> 00:05:23.029
Let's see if this actually works.

118
00:05:23.029 --> 00:05:27.120
Let's see if we can get, maybe we can
like map mouse positions or something.

119
00:05:28.660 --> 00:05:29.370
Why are we.

120
00:05:29.370 --> 00:05:35.123
&gt;&gt; Speaker 7: I'm sorry, I'm confused
about forEach, because we're declaring

121
00:05:35.123 --> 00:05:40.786
a new function named forEach within
the function definitions here.

122
00:05:40.786 --> 00:05:44.070
And then we're calling salt.forEach
underneath that but the salt.forEach is

123
00:05:44.070 --> 00:05:46.289
a different forEach than the forEach-
&gt;&gt; Jafar Husain: Yes.

124
00:05:46.289 --> 00:05:47.339
&gt;&gt; Speaker 7: In which we're defining.

125
00:05:47.339 --> 00:05:48.639
And then we have _forEach.

126
00:05:48.639 --> 00:05:50.159
So there's three different forEachs?

127
00:05:50.159 --> 00:05:54.367
&gt;&gt; Jafar Husain: Right, well, the _forEach
isn't too important, the whole point of

128
00:05:54.367 --> 00:05:59.500
this whole wrapper object, this wrapper
forEach's job, it's the public forEach.

129
00:05:59.500 --> 00:06:03.300
We all ways call the public forEach,
and it's always the same definition?

130
00:06:03.300 --> 00:06:06.690
All it does is it checks to see whether
you're passing in an observer object or

131
00:06:06.690 --> 00:06:08.120
you're passing in the three call backs.

132
00:06:08.120 --> 00:06:11.630
And it's whole job is just to always
turn it into an observer object.

133
00:06:11.630 --> 00:06:14.470
And then it calls this underscore foreach.

134
00:06:14.470 --> 00:06:17.870
The underscore for each is the one that
we're passing to the constructor and

135
00:06:17.870 --> 00:06:19.920
that way when we define
what observable is,

136
00:06:19.920 --> 00:06:22.330
we're not to worry about the two
different possible overloads.

137
00:06:22.330 --> 00:06:24.940
Maybe they're passing in functions,
maybe they're passing in observers.

138
00:06:24.940 --> 00:06:28.080
We always get to write our
observable definitions,

139
00:06:28.080 --> 00:06:32.020
assuming that what gets passed into
our forEach function is an observer.

140
00:06:32.020 --> 00:06:34.650
So that's the whole purpose
of this function here.

141
00:06:34.650 --> 00:06:38.760
It's just to sanitize the input to
always turn it into an observer.

142
00:06:38.760 --> 00:06:40.890
So when we write new observables.

143
00:06:40.890 --> 00:06:43.680
We only ever need to worry about
observers we don't to worry about.

144
00:06:43.680 --> 00:06:45.960
Maybe the past three callbacks or
maybe the past the observable and so.

145
00:06:45.960 --> 00:06:48.052
&gt;&gt; Speaker 7: That's when we call and
we say self.forEach.

146
00:06:48.052 --> 00:06:50.232
&gt;&gt; Jafar Husain: Yes,
when we say self.for.

147
00:06:50.232 --> 00:06:54.472
Well I want to be clear
when we call self.forEach.

148
00:06:54.472 --> 00:06:55.780
&gt;&gt; Speaker 7: In that context.

149
00:06:55.780 --> 00:06:57.267
&gt;&gt; Jafar Husain: In this context
we're calling the outer foreach

150
00:06:57.267 --> 00:06:58.182
this is the foreach, right.

151
00:06:58.182 --> 00:07:00.780
But then it immediately inside.

152
00:07:00.780 --> 00:07:04.790
We invoke the underscore for each which
is what we pass to the constructor.

153
00:07:06.160 --> 00:07:09.230
This is just an identifier name to
help us understand that I'm just

154
00:07:09.230 --> 00:07:11.580
that I could take I could
delete this foreach right here.

155
00:07:11.580 --> 00:07:14.124
It's just there to help you understand
that that's the definition of the function

156
00:07:14.124 --> 00:07:14.789
right here foreach.

157
00:07:14.789 --> 00:07:16.276
Yeah, question at the back.

158
00:07:16.276 --> 00:07:17.001
&gt;&gt; Speaker 8: What name is there?

159
00:07:17.001 --> 00:07:17.650
&gt;&gt; Jafar Husain: Totally optional.

160
00:07:17.650 --> 00:07:18.410
I can name this blah, blah.

161
00:07:19.960 --> 00:07:21.700
Question in the back.
&gt;&gt; Speaker 9: You might have answered it,

162
00:07:21.700 --> 00:07:25.513
but why are we naming the function we
are passing to the observer [INAUDIBLE].

163
00:07:25.513 --> 00:07:26.953
&gt;&gt; Jafar Husain: Purely for clarity.

164
00:07:26.953 --> 00:07:30.006
Just so you guys know, otherwise
there'd just be a, sort of a function,

165
00:07:30.006 --> 00:07:31.950
without a name floating around here.

166
00:07:31.950 --> 00:07:32.450
It's just so

167
00:07:32.450 --> 00:07:35.070
that you know that the function that
we pass inside of an observable

168
00:07:35.070 --> 00:07:37.050
is the definition of forEach.

169
00:07:37.050 --> 00:07:38.760
That's why I'm naming that function.

170
00:07:38.760 --> 00:07:40.620
Otherwise, if I don't name that function,
I've found in the past,

171
00:07:40.620 --> 00:07:41.410
people kinda get lost.

172
00:07:41.410 --> 00:07:42.710
They're like, what function is this?

173
00:07:42.710 --> 00:07:44.530
Cuz let's face it,
we're dealing with a lot of functions.

174
00:07:44.530 --> 00:07:45.913
We're not dealing with a lot of code.

175
00:07:45.913 --> 00:07:47.753
Notice, there's very little code here,
right.

176
00:07:47.753 --> 00:07:49.250
But we have some nested functions.

177
00:07:49.250 --> 00:07:52.890
So you've got to get, part of this
exercise will be getting really good with

178
00:07:52.890 --> 00:07:55.860
understanding function scope, right,
and what it means in JavaScript.

179
00:07:55.860 --> 00:07:58.390
But as you can see,
it's a pretty powerful technique.

180
00:07:58.390 --> 00:07:59.500
Cuz we haven't written very much code, but

181
00:07:59.500 --> 00:08:01.580
we've written some very
powerful functions.

182
00:08:03.080 --> 00:08:06.600
So let's try this out on a real dom
object and let's see if this works.

183
00:08:06.600 --> 00:08:08.478
Maybe even the first time,
but more importantly,

184
00:08:08.478 --> 00:08:09.883
it's not so much about writing code.

185
00:08:09.883 --> 00:08:12.103
We've already shown you what you
can do with observable, right?

186
00:08:12.103 --> 00:08:15.463
You can build really powerful asynchronous
programs that clean up after themselves.

187
00:08:15.463 --> 00:08:18.106
The point of this exercise is to
actually walk through the code and

188
00:08:18.106 --> 00:08:19.943
see what's happening underneath the hood.

189
00:08:19.943 --> 00:08:22.737
Which will really deepen your
understanding of what's going on when you

190
00:08:22.737 --> 00:08:23.620
use these functions.

