WEBVTT

1
00:00:00.000 --> 00:00:04.031
[MUSIC]

2
00:00:04.031 --> 00:00:05.724
&gt;&gt; Jafar Husain: Did I see
a question back there?

3
00:00:05.724 --> 00:00:06.929
&gt;&gt; Speaker 2: Yeah.

4
00:00:06.929 --> 00:00:12.910
So to reiterate the differences
promise and observable.

5
00:00:12.910 --> 00:00:19.320
A promise is something that only happens
once right, and then that promise also

6
00:00:20.320 --> 00:00:25.160
cannot be canceled, and
an observable is basically

7
00:00:25.160 --> 00:00:29.540
a stream that can go on continuously.
&gt;&gt; Jafar Husain: Yes.

8
00:00:29.540 --> 00:00:31.220
&gt;&gt; Speaker 2: So those are the main.

9
00:00:31.220 --> 00:00:32.100
&gt;&gt; Jafar Husain: Yeah, and then one more

10
00:00:32.100 --> 00:00:36.560
which is, the observable is lazy, and
let's go back to this example, right,

11
00:00:36.560 --> 00:00:38.060
if I create an observable,

12
00:00:39.410 --> 00:00:42.900
All I've done is I've created
an object with a forEach method.

13
00:00:42.900 --> 00:00:45.310
That's all, I did,
I haven't done a thing, right.

14
00:00:45.310 --> 00:00:48.190
So, if you call a function,
which returns you an observable,

15
00:00:48.190 --> 00:00:51.570
you have every reason to believe that
nothing is actually happened yet.

16
00:00:51.570 --> 00:00:52.490
Not a thing.

17
00:00:52.490 --> 00:00:53.430
Whereas, if you call a function, and

18
00:00:53.430 --> 00:00:56.120
returns you a promise,
something is already happening.

19
00:00:56.120 --> 00:00:59.440
A promise is eager, and
an observable is lazy.

20
00:00:59.440 --> 00:01:03.520
And so by the time you have a promise,
it's issued the xml http request already,

21
00:01:03.520 --> 00:01:05.300
or it's hooked up to the event already.

22
00:01:05.300 --> 00:01:07.150
It's already done that.

23
00:01:07.150 --> 00:01:11.230
And, why is that not necessarily a good
thing, in certain circumstances?

24
00:01:11.230 --> 00:01:13.520
Well, let's go back to the retry example.

25
00:01:13.520 --> 00:01:14.790
You can't retry a promise.

26
00:01:14.790 --> 00:01:16.460
There's no way to retry it.

27
00:01:16.460 --> 00:01:19.230
It's already happening, and
it will never happen again.

28
00:01:19.230 --> 00:01:21.680
And so the only way to retry that promise,
is to go find the original API,

29
00:01:21.680 --> 00:01:25.730
that created the promise and
then call it again, but the problem is,

30
00:01:25.730 --> 00:01:28.570
when you make programs, and
you distribute types, like a promise,

31
00:01:28.570 --> 00:01:31.000
you might pass that promise
to fifteen other functions.

32
00:01:31.000 --> 00:01:33.510
And then down here at function fifteen.

33
00:01:33.510 --> 00:01:36.590
It doesn't know about the API that was
used to create the promise, right.

34
00:01:36.590 --> 00:01:38.420
All it knows is, I have a promise.

35
00:01:38.420 --> 00:01:40.210
But I wanna retry this
thing because it erred.

36
00:01:40.210 --> 00:01:41.350
It's too late.

37
00:01:41.350 --> 00:01:44.470
That's the advantage of passing around
an observable, it's a richer type,

38
00:01:44.470 --> 00:01:45.650
it can do more.

39
00:01:45.650 --> 00:01:48.490
I can adapt an observable into a promise,
lickety split, no problem.

40
00:01:48.490 --> 00:01:50.100
Just do a take one right.

41
00:01:50.100 --> 00:01:52.591
And then there's others APIs
to adapt them into promises,

42
00:01:52.591 --> 00:01:55.550
it's very easy because an observable
can do more than a promise.

43
00:01:55.550 --> 00:01:57.770
So it's very easy to turn
an observable into a promise,

44
00:01:57.770 --> 00:01:59.310
you can't go the other way.

45
00:01:59.310 --> 00:02:03.230
And so it behooves you to structure your
program around richer types that have

46
00:02:03.230 --> 00:02:08.270
the semantics, that even trivial you guys
need, like cancellation and retrying, and

47
00:02:08.270 --> 00:02:11.800
then if you happen to come across some API
somewhere that wants to take a promise,

48
00:02:11.800 --> 00:02:12.610
instead of an observable,

49
00:02:12.610 --> 00:02:14.770
well it's easy to convert from
an observable to a promise.

50
00:02:14.770 --> 00:02:15.630
You see what I'm saying?

51
00:02:15.630 --> 00:02:18.950
It's safer to start with a richer type,
and then if need be.

52
00:02:18.950 --> 00:02:21.178
You're working with a library
that happens use promises.

53
00:02:21.178 --> 00:02:24.140
Convert it into a promise,
because you can't go the other way.

54
00:02:24.140 --> 00:02:25.310
You've lost something.

55
00:02:25.310 --> 00:02:28.460
When you can't go from
a promise to an observable,

56
00:02:28.460 --> 00:02:31.110
you can't go from something that's
already happening to something that lazy.

57
00:02:31.110 --> 00:02:31.830
It's already happening.

58
00:02:31.830 --> 00:02:33.430
It's too late.
Does that make sense?

59
00:02:34.750 --> 00:02:36.820
So that's, those are the key
differences between promises.

60
00:02:36.820 --> 00:02:37.750
You can't cancel them.

61
00:02:37.750 --> 00:02:40.230
They're one and done, they only
give you one value and they finish.

62
00:02:40.230 --> 00:02:41.120
Right.
So today.

63
00:02:41.120 --> 00:02:45.191
If you're using a promise to do a network
request and then tomorrow it becomes a web

64
00:02:45.191 --> 00:02:48.800
socket, well guess what, in other
words it sends you multiple values.

65
00:02:48.800 --> 00:02:52.245
You gotta go through all your program
wherever you're out promises and change

66
00:02:52.245 --> 00:02:55.809
them to accept observables, why don't
you use observables in the first place?

67
00:02:55.809 --> 00:02:57.540
An observable that finished once is fine.

68
00:02:57.540 --> 00:02:59.720
There's nothing wrong
with an observable one..

69
00:02:59.720 --> 00:03:01.936
We're gonna be using
mull all over the place.

70
00:03:01.936 --> 00:03:03.173
It's fine Usually for network requests.

71
00:03:03.173 --> 00:03:05.920
Is that a good clarification of promises?

72
00:03:07.120 --> 00:03:08.470
So now we know what observable is,

73
00:03:08.470 --> 00:03:10.500
just an object with a forEach
function waiting to be called.

74
00:03:10.500 --> 00:03:13.440
And when that forEach function is called,
it's actually gonna do whatever work it

75
00:03:13.440 --> 00:03:18.640
has to do to schedule you getting pushed
data and return a subscription such that

76
00:03:18.640 --> 00:03:22.640
when that's called, it's gonna do the work
to make sure to cancel whatever operation

77
00:03:22.640 --> 00:03:25.710
under the hood is what would have
triggered you getting data in the future.

78
00:03:25.710 --> 00:03:27.670
Yeah question?
&gt;&gt; Speaker 3: This questions is always

79
00:03:27.670 --> 00:03:30.940
our observables the heart of reactive?
&gt;&gt; Jafar Husain: Yes,

80
00:03:30.940 --> 00:03:36.690
observable is the type is one type to rule
them all for asynchronous programming.

81
00:03:36.690 --> 00:03:39.320
You can use observable for
nearly every asynchronous API,

82
00:03:39.320 --> 00:03:43.170
there are some exceptions, but for the
most part the types of API that you use

83
00:03:43.170 --> 00:03:46.400
in user interfaces,
observables are appropriate for

84
00:03:46.400 --> 00:03:49.430
every single one of those asynchronous
APIs you're likely to come across.

85
00:03:49.430 --> 00:03:50.550
So the first step is,

86
00:03:50.550 --> 00:03:54.710
take whatever weird callback API you have,
take the time to adapt it into observable.

87
00:03:54.710 --> 00:03:57.810
And then,
when your API just looks like observables,

88
00:03:57.810 --> 00:04:00.600
all of a sudden you have this
power to be able to just

89
00:04:00.600 --> 00:04:03.780
squeeze them together with the functions
that you've learned yesterday, right?

90
00:04:03.780 --> 00:04:06.650
But as soon as they get an observable and
15 callback APIs,

91
00:04:06.650 --> 00:04:10.300
you gotta resort to using weird
callback and state machines,

92
00:04:10.300 --> 00:04:12.200
and then everything gets
much more complicated.

93
00:04:12.200 --> 00:04:15.220
The first thing we did at Netflix,
even before people fully understood

94
00:04:15.220 --> 00:04:17.810
observables, is we went through and
we started to

95
00:04:17.810 --> 00:04:21.340
take the APIs that were callback based,
and we adapted them into observables.

96
00:04:21.340 --> 00:04:22.880
And you know what?
The thing about an observable is,

97
00:04:22.880 --> 00:04:25.590
as we've seen earlier,
you can use it just like an event, right.

98
00:04:25.590 --> 00:04:27.540
I mean it's not that different
if you go forEach and

99
00:04:27.540 --> 00:04:31.400
then subscription dot dispose, instead of
addEventListener or removeEventListener.

100
00:04:31.400 --> 00:04:34.620
So, and that's actually my recommendation
to people which is that they start

101
00:04:34.620 --> 00:04:35.810
emitting observables and

102
00:04:35.810 --> 00:04:38.910
just teach people how to consume them
the old way which is just like an event.

103
00:04:38.910 --> 00:04:41.830
Okay, well you can call forEach and then
you can call subscription dot dispose.

104
00:04:41.830 --> 00:04:44.740
That's not a lot more complicated, it's
they're not getting the full benefit of

105
00:04:44.740 --> 00:04:46.866
observables because the full
benefit of observables is using.

106
00:04:46.866 --> 00:04:50.070
Map filter takeUntil to glue it
all together declaratively, but

107
00:04:50.070 --> 00:04:53.040
they can just start coding the same way
they would've coded against events.

108
00:04:53.040 --> 00:04:56.600
But over time, as you give your
developers time to learn how

109
00:04:56.600 --> 00:05:00.370
to code more powerfully and code more
compositionally, then when they're ready.

110
00:05:00.370 --> 00:05:04.340
There's all these APIs just waiting to be
glued together with a few lines of code,

111
00:05:04.340 --> 00:05:08.330
and so that's a very good way to ease your
system into something that can be used in

112
00:05:08.330 --> 00:05:09.690
this compositional reactive style.

113
00:05:09.690 --> 00:05:12.560
Yes question.
&gt;&gt; Speaker 3: Do you have an example

114
00:05:12.560 --> 00:05:16.670
of any of those exceptions?
&gt;&gt; Jafar Husain: The best exception I can

115
00:05:16.670 --> 00:05:20.250
come up with at the moment,
is not on the UI and it's in node stream.

116
00:05:20.250 --> 00:05:22.200
So who's familiar with node streams?

117
00:05:22.200 --> 00:05:25.020
Now the interesting thing about what's
different about an observable and

118
00:05:25.020 --> 00:05:29.560
a node stream, is that we've talked
about push and pull data sources right?

119
00:05:29.560 --> 00:05:34.060
Where I just push information, or
in the observation, is the producer

120
00:05:34.060 --> 00:05:38.640
is in control, and decides when
information is pushed to the consumer.

121
00:05:38.640 --> 00:05:42.015
Iteration, the consumer's in control and
the consumer requests,

122
00:05:42.015 --> 00:05:46.550
it decides when it gets the next out,
because it requests it from the producer.

123
00:05:46.550 --> 00:05:49.320
A stream is a little like both.

124
00:05:49.320 --> 00:05:52.070
So, although the producer
is in control and

125
00:05:52.070 --> 00:05:56.390
is pushing values to the consumer, the
consumer can say something which is not,

126
00:05:56.390 --> 00:05:58.050
don't give me any more values ever again.

127
00:05:58.050 --> 00:06:00.020
The consumer has this notion of saying.

128
00:06:00.020 --> 00:06:01.530
Pause, right.

129
00:06:01.530 --> 00:06:02.500
That's different.

130
00:06:02.500 --> 00:06:06.310
It's like a VCR hitting stop,
versus pause.

131
00:06:06.310 --> 00:06:08.400
Subscription dot disposes stop.

132
00:06:09.400 --> 00:06:11.200
VCR shuts down, who knows where you're,

133
00:06:11.200 --> 00:06:14.710
you're not even sure where
your play position is, right.

134
00:06:14.710 --> 00:06:16.870
But pause, just says okay hold it,

135
00:06:16.870 --> 00:06:19.950
I'm cutting up cake, I'm distributing
the cake but just cool it man.

136
00:06:19.950 --> 00:06:23.100
Stop throwing cakes at me, right, but
then later on you can press play and

137
00:06:23.100 --> 00:06:24.920
then the producer just starts again,
right.

138
00:06:24.920 --> 00:06:27.770
That's not how an observable is,
an observable doesn't let you hit pause,

139
00:06:27.770 --> 00:06:30.110
it will just keep throwing stuff at you,
it doesn't care if you're ready.

140
00:06:30.110 --> 00:06:34.190
The only thing you can say to it is,
never call me ever again, right.

141
00:06:34.190 --> 00:06:39.180
Node stream is this motion of push and
pull where you can send values, but

142
00:06:39.180 --> 00:06:42.250
then the consumer can say whoa cool,
but just for a little while and

143
00:06:42.250 --> 00:06:43.950
then later on can say
start where you left off.

144
00:06:44.980 --> 00:06:46.550
In general that's very useful for

145
00:06:46.550 --> 00:06:51.210
asynchronous IO, but frankly it doesn't
really come up on the front end.

146
00:06:51.210 --> 00:06:54.690
On the front end, almost all of the data
sources that you're gonna be working with

147
00:06:54.690 --> 00:06:59.750
set Timeout, set interval, events, XHR's,
web sockets, they're all just push only.

148
00:06:59.750 --> 00:07:00.830
You can't pause them.

149
00:07:00.830 --> 00:07:04.720
So observable, that's why I don't bother
to teach streams in a front end class,

150
00:07:04.720 --> 00:07:07.260
because there are no node
streams on front end.

151
00:07:07.260 --> 00:07:09.350
Not yet,
maybe there will be at some point.

152
00:07:09.350 --> 00:07:12.610
But for things like file system,
APIs in the browser, but

153
00:07:12.610 --> 00:07:13.670
that's not currently the case.

154
00:07:13.670 --> 00:07:16.090
So, my advice is don't worry about them so
much.

155
00:07:16.090 --> 00:07:18.720
Observable is definitely the best
bet if you're doing front end APIs.

156
00:07:18.720 --> 00:07:21.135
Question in the back?
&gt;&gt; Speaker 3: Is there an equivalent to

157
00:07:21.135 --> 00:07:24.059
ES7's away async that
promises adverse observables?

158
00:07:25.670 --> 00:07:27.810
&gt;&gt; Jafar Husain: Not yet, so currently,

159
00:07:27.810 --> 00:07:33.350
what he's referring to is that there's
an API in ES7, where you can declaratively

160
00:07:33.350 --> 00:07:38.270
write code that looks like it blocks but
actually waits.

161
00:07:38.270 --> 00:07:45.710
And so, what that's gonna look like in the
next version of JavaScript, very possibly,

162
00:07:45.710 --> 00:07:50.810
so if you're working with promises, this
is gonna be result, await, somePromise.

163
00:08:07.440 --> 00:08:08.857
Trying to make this a little more

164
00:08:08.857 --> 00:08:16.419
concrete.
&gt;&gt; Jafar Husain: So

165
00:08:16.419 --> 00:08:19.640
let's say you want to write a function
that returns the price of a stock.

166
00:08:19.640 --> 00:08:22.520
And accepts the name,
the English language name of that stock.

167
00:08:22.520 --> 00:08:26.500
So, and then the first thing it does is,
it gets the symbol for that stock.

168
00:08:26.500 --> 00:08:31.241
So Microsoft turns an MSFT, and
then you can go to another API,

169
00:08:31.241 --> 00:08:36.524
which takes the symbol
&gt;&gt; Jafar Husain: and gets the price.

170
00:08:46.495 --> 00:08:47.114
&gt;&gt; Jafar Husain: Using this

171
00:08:47.114 --> 00:08:50.072
magic await keyword on
promises in JavaScript 7,

172
00:08:50.072 --> 00:08:54.750
allows you to write this code even though
it's non-blocking in asynchronous,

173
00:08:54.750 --> 00:08:58.970
it actually looks like it's synchronous,
that's pretty cool right.

174
00:09:00.040 --> 00:09:02.350
What a great way to
write async programming.

175
00:09:02.350 --> 00:09:03.820
Well the first thing I wanna
call your attention to,

176
00:09:03.820 --> 00:09:07.138
is this is only good for
a very narrow form of async programming,

177
00:09:07.138 --> 00:09:09.730
where there is really no
concurrency going on.

178
00:09:09.730 --> 00:09:12.960
In other words, I want to do something
asynchronous, and when that one thing

179
00:09:12.960 --> 00:09:16.260
that's asynchronous completes, I want to
do something else that asynchronous and

180
00:09:16.260 --> 00:09:18.970
when that completes, I want to do
something else that's asynchronous and

181
00:09:18.970 --> 00:09:22.890
that is great, when it happens and
it will happen.

182
00:09:22.890 --> 00:09:25.730
I think more often on the server
than it will on the client.

183
00:09:25.730 --> 00:09:27.780
Because on the client very often.

184
00:09:27.780 --> 00:09:30.950
You're not dealing with this do this and
then do that and then do that.

185
00:09:30.950 --> 00:09:32.660
You're dealing with concurrency.

186
00:09:32.660 --> 00:09:35.550
Meaning, you've got multiple
things going at the same time,

187
00:09:35.550 --> 00:09:37.320
all the time when you're on the client.

188
00:09:37.320 --> 00:09:39.550
Let's go back to that stock price example,
right.

189
00:09:39.550 --> 00:09:42.200
I click a button and then I issue
a network request, but then if somebody

190
00:09:42.200 --> 00:09:44.650
clicks another button, well I'm gonna
issue another network request, and

191
00:09:44.650 --> 00:09:47.690
they're all gonna happen concurrently,
unless I do something about it.

192
00:09:47.690 --> 00:09:51.300
That's really more the state of being
of what you do with UI's because

193
00:09:51.300 --> 00:09:53.190
almost everything is
triggered with an event.

194
00:09:53.190 --> 00:09:55.460
And then may lead to another
asynchronous action.

195
00:09:55.460 --> 00:09:59.070
And so you're dealing with concurrency and
I can't do that with this.

196
00:09:59.070 --> 00:10:01.990
Right, I cannot model that example of,
I click a button,

197
00:10:01.990 --> 00:10:05.410
I issue a request to a stock but
then if somebody clicks another button,

198
00:10:05.410 --> 00:10:07.570
I cancel that request and
then start another one.

199
00:10:07.570 --> 00:10:11.310
That requires us thinking about two items
happening at the same time, and this,

200
00:10:11.310 --> 00:10:15.080
as nice and as pretty as it seems, and
it's a very nice syntax, does not help you

201
00:10:15.080 --> 00:10:18.800
solve the hardest problems that you have
on user interfaces, which is concurrency.

202
00:10:18.800 --> 00:10:22.170
It is a very nice syntax for that narrow
case of you've got to do one thing,

203
00:10:22.170 --> 00:10:23.910
and then another thing,
and then another thing.

204
00:10:23.910 --> 00:10:27.320
Frankly I'd think it'll be much
more useful on the server,

205
00:10:27.320 --> 00:10:30.350
than it will on the client,
because in the client, your doing so

206
00:10:30.350 --> 00:10:33.710
much with events which means concurrency,
right you're listening for an event and

207
00:10:33.710 --> 00:10:34.980
then every time that event happens.

208
00:10:34.980 --> 00:10:37.630
You might do something else but
then while that thing is going on,

209
00:10:37.630 --> 00:10:40.480
another event might happen and
then you do that as well, so that whenever

210
00:10:40.480 --> 00:10:44.420
you're doing two things at the same time,
this syntax isn't generally very useful.

211
00:10:44.420 --> 00:10:47.610
Now the question was,
will this syntax work for

212
00:10:47.610 --> 00:10:50.240
observable and
that is a very good question and

213
00:10:50.240 --> 00:10:53.790
that's currently actually a proposal
that we have for JavaScript 7.

214
00:10:53.790 --> 00:10:57.410
We're actually working to make sure that
it is possible, in those narrow cases,

215
00:10:57.410 --> 00:11:01.570
to be able to use the await and
async syntax for observables as well.

216
00:11:01.570 --> 00:11:06.240
So let's say you had several observables
of one, you could use, hopefully,

217
00:11:06.240 --> 00:11:09.380
if the proposal passes, you could
use the same async awaits syntax.

218
00:11:09.380 --> 00:11:11.130
For observables of one.
&gt;&gt; Speaker 4: So

219
00:11:11.130 --> 00:11:15.370
probably you will just do forEach and
then you'll do it like on

220
00:11:15.370 --> 00:11:17.922
the next lessons [COUGH]
&gt;&gt; Jafar Husain: Yes although technically

221
00:11:17.922 --> 00:11:22.694
you could also use the JavaScript 6, so
this is actually just syntactic sugar for

222
00:11:22.694 --> 00:11:27.467
something like this in JavaScript 6 where
you could write almost exactly the same

223
00:11:27.467 --> 00:11:31.956
code
&gt;&gt; Jafar Husain: It

224
00:11:31.956 --> 00:11:34.647
looks slightly different,
but it's basically the same

225
00:11:34.647 --> 00:11:40.853
idea.
&gt;&gt; Jafar Husain: This

226
00:11:40.853 --> 00:11:42.800
is what you're gonna
actually do in JavaScript 6.

227
00:11:42.800 --> 00:11:45.440
Using a helper function,
using this little async.

228
00:11:45.440 --> 00:11:47.310
So now it's not a keyword,
it's a function.

229
00:11:47.310 --> 00:11:51.090
Using a little helper function you could
actually take what I don't have time to

230
00:11:51.090 --> 00:11:53.870
explain all of these all of this but
all of what's going on here.

231
00:11:53.870 --> 00:11:57.070
I can just point out to you that it's
pretty much the same amount of code.

232
00:11:57.070 --> 00:12:00.850
So this right here is an example below,
which will work in JavaScript 6, and

233
00:12:00.850 --> 00:12:02.490
you can make work on both observables and

234
00:12:02.490 --> 00:12:06.750
promises, up top there is a syntax that
will work in JavaScript 7 and it's open.

235
00:12:06.750 --> 00:12:09.970
It's an open question about whether
it'll work with promises or observables.

236
00:12:09.970 --> 00:12:13.170
I highly recommend you don't
use observables just to keep

237
00:12:13.170 --> 00:12:17.060
the syntax above there, because that is
a very narrow case of concurrency when

238
00:12:17.060 --> 00:12:18.590
you're dealing on the client.

239
00:12:18.590 --> 00:12:20.600
So it's not gonna solve
most of your problems, and

240
00:12:20.600 --> 00:12:25.360
furthermore if you take on promises,
you have just lost a lot of expressiveness

241
00:12:25.360 --> 00:12:29.179
which will be very very useful to you
in modern single page web applications.

242
00:12:30.330 --> 00:12:33.960
So I think async away is not as big a deal
as people may think it is, because A,

243
00:12:33.960 --> 00:12:37.740
there's already a feature in ES6 which
allows you to write code almost exactly

244
00:12:37.740 --> 00:12:40.300
the same way that the example at
the top I think is a little clearer.

245
00:12:40.300 --> 00:12:42.850
Cuz you got the away keyword which I
think is a little clearer to people.

246
00:12:42.850 --> 00:12:46.760
But it's actually not that much more there
in terms of syntactic expressiveness.

247
00:12:51.020 --> 00:12:51.589
Any other questions?

248
00:12:52.860 --> 00:12:54.030
So let's get back to observable.

249
00:12:54.030 --> 00:12:56.285
Now that we kinda got an idea
of how an observable works,

250
00:12:56.285 --> 00:12:58.220
it's an object with a single for
each method.

251
00:12:58.220 --> 00:12:58.939
Right?

252
00:12:58.939 --> 00:13:01.940
We're using functions to just
build a bigger and bigger object

253
00:13:01.940 --> 00:13:05.540
with a single forEach method, and
then finally run it by calling forEach.

254
00:13:05.540 --> 00:13:08.310
Let's take a look at some examples
of stuff in action here so.

