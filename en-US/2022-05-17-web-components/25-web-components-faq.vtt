WEBVTT

1
00:00:00.000 --> 00:00:03.550
This will be the final segment,
hopefully wrap up pretty quick here.

2
00:00:03.550 --> 00:00:07.211
But this will be kind of questions and
answers and so if you have some final

3
00:00:07.211 --> 00:00:10.405
questions or whatever,
just get them down and get them ready.

4
00:00:10.405 --> 00:00:15.481
But I'm gonna do a quick rapid fire of
some like common internet [LAUGH] people

5
00:00:15.481 --> 00:00:20.730
questions that I get that might be helpful
or head off some questions you have.

6
00:00:22.530 --> 00:00:26.060
React, we kind of talked about
short answer is yes, right?

7
00:00:26.060 --> 00:00:31.494
So there's two things this Lit
labs has the React wrapper,

8
00:00:31.494 --> 00:00:37.373
so you just consume it into your
web component your lip project.

9
00:00:37.373 --> 00:00:41.387
And you can do that but
also react 19 very promising or

10
00:00:41.387 --> 00:00:47.504
the experimental branch of React that we
think will be react 19 looks promising.

11
00:00:47.504 --> 00:00:52.684
And so it may be a great time to
start looking at web components

12
00:00:52.684 --> 00:00:57.968
if you wanna know how big distribution and
react accessible,

13
00:00:57.968 --> 00:01:03.771
this is a question that comes up a lot,
obviously it's important.

14
00:01:03.771 --> 00:01:07.660
The short answer is yes, web components
are accessible as you write them, right?

15
00:01:07.660 --> 00:01:11.401
Like, it's easy to write
inaccessible code but

16
00:01:11.401 --> 00:01:16.795
there are a few tough spots in regards
to labeling and focus behavior.

17
00:01:16.795 --> 00:01:21.369
If you can think of it,
like you have my input element,

18
00:01:21.369 --> 00:01:26.646
custom my input element, and
you have a label outside of that.

19
00:01:26.646 --> 00:01:30.843
But how do you associate
the label with the shadow thing?

20
00:01:30.843 --> 00:01:35.774
So there's there's a few talks and
sort of like that

21
00:01:35.774 --> 00:01:40.934
delegates focus attribute
where if you click the label

22
00:01:40.934 --> 00:01:46.556
a delegate the focus into the element,
the input element.

23
00:01:46.556 --> 00:01:50.345
But the issue is kind of with labeling
is how do you delegate a label or

24
00:01:50.345 --> 00:01:51.619
something like that.

25
00:01:51.619 --> 00:01:56.199
So there's some specifications
happening within

26
00:01:56.199 --> 00:01:59.824
the AOM accessibility object manager.

27
00:01:59.824 --> 00:02:04.288
But then through the open or
sorry the web component community group

28
00:02:04.288 --> 00:02:08.057
there's some work happening
there it seems promising.

29
00:02:08.057 --> 00:02:12.701
But just know that if you have a label
outside of the input like a custom

30
00:02:12.701 --> 00:02:16.866
input element you maybe have
a problem there you have to yeah,

31
00:02:16.866 --> 00:02:18.970
you're going to have test it.

32
00:02:18.970 --> 00:02:24.369
Make sure you figure that out that stuff's
hard labeling and associated with hard,

33
00:02:24.369 --> 00:02:29.247
but then seem sort of thing with focus
if you pop, open a dialogue and you go.

34
00:02:29.247 --> 00:02:32.757
Go into emoji picker,
there's one an emoji picker, right?

35
00:02:32.757 --> 00:02:36.881
So if you open an emoji picker and you
start driving around the emoji picker and

36
00:02:36.881 --> 00:02:39.672
you hit escape,
how does the Shadow DOM know to go put

37
00:02:39.672 --> 00:02:42.880
the focus back on the thing
that was last focus?

38
00:02:42.880 --> 00:02:45.883
Cuz it has no knowledge of
the stuff outside of it,

39
00:02:45.883 --> 00:02:50.029
so that can be tricky and you sort of
need to like either mute an event or

40
00:02:50.029 --> 00:02:55.390
something to like restore the focus or
to the previously active element.

41
00:02:55.390 --> 00:02:58.608
There's also a new inert
attribute in HTML.

42
00:02:58.608 --> 00:03:03.521
I don't know if you've seen it,
but it's basically says take

43
00:03:03.521 --> 00:03:08.200
all this stuff and
pull it from the accessibility tree.

44
00:03:08.200 --> 00:03:11.780
And so you could see like a place
like a dialog or something like that.

45
00:03:11.780 --> 00:03:16.480
You have your app up here
in your dialogue down here.

46
00:03:16.480 --> 00:03:20.448
And you just say make the whole app in
NERT while the dialogue is happening.

47
00:03:20.448 --> 00:03:24.495
And now make the destroy the dialogue,
and then make this uninjured,

48
00:03:24.495 --> 00:03:29.130
and then in theory, the focus should
go back to where it was previously.

49
00:03:29.130 --> 00:03:34.138
Again, that stuff is hard in normal HTML,
in JavaScript,

50
00:03:34.138 --> 00:03:39.058
and it doesn't get super easier in,
web component land.

51
00:03:39.058 --> 00:03:43.076
So, that's all traversing shadow down,
etc.

52
00:03:43.076 --> 00:03:49.340
IE11 short answer, yes,
there's a poly fill maintained by Google.

53
00:03:49.340 --> 00:03:53.013
So, it should be good,
but I would maybe say,

54
00:03:53.013 --> 00:03:59.627
think about the progressive enhancement
quality superpowers of web components.

55
00:03:59.627 --> 00:04:03.230
Maybe you don't need a polyfill.

56
00:04:03.230 --> 00:04:07.978
Maybe the LightDOMs enough to
provide a suitable fallback for IE,

57
00:04:07.978 --> 00:04:11.474
which just won't even
render a custom element.

58
00:04:11.474 --> 00:04:17.479
Another thing you might consider
is support for internet explorer.

59
00:04:17.479 --> 00:04:20.974
It ends on June 15 2022.

60
00:04:20.974 --> 00:04:24.924
And that's usually the time when
enterprise companies that are employing ie

61
00:04:24.924 --> 00:04:26.500
11 and stuff like that.

62
00:04:26.500 --> 00:04:31.288
They usually mass switch their entire
company over because they're out of

63
00:04:31.288 --> 00:04:32.664
some support cycle.

64
00:04:32.664 --> 00:04:34.100
Who knows what's going to happen?

65
00:04:34.100 --> 00:04:38.783
But I would posit .I would say
,if you're starting a project

66
00:04:38.783 --> 00:04:43.555
today ,are you going to finish
by June 15 ?And if you're not

67
00:04:43.555 --> 00:04:47.359
going to finish by June 15 of this year,
[LAUGH].

68
00:04:47.359 --> 00:04:50.896
Then maybe you don't
need to worry about it.

69
00:04:50.896 --> 00:04:55.550
So I think most people are not
worrying about it at this point so.

70
00:04:55.550 --> 00:04:59.740
Reactive contexts we talked about that
yes, but it's sort of BYO for now.

71
00:04:59.740 --> 00:05:02.710
Frameworks are gonna try to help you here.

72
00:05:02.710 --> 00:05:06.748
And then, there is this context
API kinda being discussed in

73
00:05:06.748 --> 00:05:10.549
the Web Components community
group SEO is a good question

74
00:05:10.549 --> 00:05:15.003
there's actually a really nice
post link to the guide book notes.

75
00:05:15.003 --> 00:05:19.328
But there's two posts Googlebot
itself Search Engine Land or

76
00:05:19.328 --> 00:05:21.407
whatever search engine hub or

77
00:05:21.407 --> 00:05:27.300
whatever on Google says Googlebot can
flatten Shadow DOM and light DOM together.

78
00:05:27.300 --> 00:05:32.298
So a plus it's not clear if that happens
on the first pass or the second pass that

79
00:05:32.298 --> 00:05:36.784
that the like, typically the like
HTML pass and the JavaScript pass.

80
00:05:36.784 --> 00:05:40.810
It's not clear which it happens on but
it can do that.

81
00:05:40.810 --> 00:05:44.686
And then there's another post that sort
of like went through like being and

82
00:05:44.686 --> 00:05:48.639
DuckDuckGo to see sort of how they index
web components is kind of a big test.

83
00:05:48.639 --> 00:05:53.313
And it seems pretty positive I think
being missed it in a few places so

84
00:05:53.313 --> 00:05:58.643
it might you may need to if beings a big
audience then maybe it's important but

85
00:05:58.643 --> 00:06:03.981
I think this all get better as the crawler
lawyers and everything get better.

86
00:06:03.981 --> 00:06:08.450
SSR this is a good question.

87
00:06:08.450 --> 00:06:10.799
Server side rendering,
like how do you do that right?

88
00:06:10.799 --> 00:06:13.360
We've been doing kind of everything
in JavaScript in the client.

89
00:06:13.360 --> 00:06:14.614
That's a big deal.

90
00:06:14.614 --> 00:06:18.943
Well, there's a new feature called
declarative Shadow DOM, and

91
00:06:18.943 --> 00:06:21.037
I'll show it to you right here.

92
00:06:21.037 --> 00:06:22.700
This is a web component.

93
00:06:22.700 --> 00:06:25.950
This is my Bill Murray alert.

94
00:06:25.950 --> 00:06:30.414
But I have no JavaScript.

95
00:06:30.414 --> 00:06:32.290
But I have written a web component.

96
00:06:32.290 --> 00:06:37.080
And the magic that's happening here
is this template shadowroot open.

97
00:06:38.770 --> 00:06:44.161
So if you put a template inside
your alert, the browser.

98
00:06:44.161 --> 00:06:49.013
So chrome specifically the browser will
say okay I know what to do with that

99
00:06:49.013 --> 00:06:52.079
I'm just going to try to
render that on a pass.

100
00:06:52.079 --> 00:06:55.828
And then when your component
actually comes through later and

101
00:06:55.828 --> 00:07:00.370
upgrades it to be like fully interactive
It'll actually tear down that old

102
00:07:00.370 --> 00:07:05.780
template and put in a new template or
just upgrade your current template.

103
00:07:05.780 --> 00:07:07.494
However you have it.

104
00:07:07.494 --> 00:07:09.740
So that's cool.

105
00:07:09.740 --> 00:07:14.635
I think like, what I learned was,
this might be another great way

106
00:07:14.635 --> 00:07:19.267
to provide kind of skeleton
content to provide some content.

107
00:07:19.267 --> 00:07:22.471
What I don't like about it
if I'm completely honest is,

108
00:07:22.471 --> 00:07:25.630
if I'm just writing the whole
template inside of here.

109
00:07:25.630 --> 00:07:30.036
Maybe I should just use PHP just
to get the server rendered.

110
00:07:30.036 --> 00:07:33.264
That's a totally valid opinion in my
opinion, because it's my opinion.

111
00:07:33.264 --> 00:07:38.493
And but the I think we're all using
some kind of preprocessor of some sort,

112
00:07:38.493 --> 00:07:42.490
whether it's a static site generator or
something.

113
00:07:42.490 --> 00:07:46.486
So maybe there's a way that you
can do that efficiently and not,

114
00:07:46.486 --> 00:07:48.632
you don't have HTML in one place.

115
00:07:48.632 --> 00:07:54.460
And script in other place or maybe there's
eventually a tool that will be able to,

116
00:07:54.460 --> 00:07:56.488
recognize your template and

117
00:07:56.488 --> 00:08:00.590
then kind of automatically
Pre parse that sort of stuff.

118
00:08:00.590 --> 00:08:03.349
So I'm sure all that stuff
is kind of in the works.

119
00:08:03.349 --> 00:08:08.338
But declarative Shadow DOM can do like
very server side rendering that will

120
00:08:08.338 --> 00:08:11.360
reduce your paint times and
stuff like that.

121
00:08:12.670 --> 00:08:18.654
Okay, any questions before I
wrap it all up or chat as well?

122
00:08:18.654 --> 00:08:20.201
If you have questions, yes.

123
00:08:20.201 --> 00:08:24.715
&gt;&gt; Do you have any guidance or
Beck's best practices for focus locking?

124
00:08:24.715 --> 00:08:30.800
Finding all focus will elements are
including elements within the Shadow DOM.

125
00:08:30.800 --> 00:08:35.798
&gt;&gt; Okay, how do you find focus
level elements in the Shadow DOM?

126
00:08:35.798 --> 00:08:42.242
So that delegates focus will find
the first focus scible element.

127
00:08:42.242 --> 00:08:48.076
I'm not 100% clear on what rules
it does to determine that,

128
00:08:48.076 --> 00:08:54.680
but it's probably like inputs and
then tab indexes and stuff like that.

129
00:08:57.030 --> 00:09:01.791
There's probably an order
of operations that tries

130
00:09:01.791 --> 00:09:06.232
to fetch those and
then tips for managing focus.

131
00:09:06.232 --> 00:09:12.260
Was that the question mark it was tips for

132
00:09:12.260 --> 00:09:17.225
focus locking focus locki yeah,

133
00:09:17.225 --> 00:09:22.543
so if you had this custom element and

134
00:09:22.543 --> 00:09:26.110
pop up thing pop up.

135
00:09:26.110 --> 00:09:30.443
How do you trap the focus inside of it.

136
00:09:30.443 --> 00:09:35.130
I would honestly right now look at that
inert attribute in the inert polyfill.

137
00:09:35.130 --> 00:09:40.045
And basically you insert everything else
and then that little chunk of content

138
00:09:40.045 --> 00:09:43.854
becomes the only thing the cursor
can kind of move around on.

139
00:09:43.854 --> 00:09:47.301
And then you destroy this and
unaired that and

140
00:09:47.301 --> 00:09:50.800
then you're back to where you want to be.

141
00:09:50.800 --> 00:09:54.629
So that would be my like,
look into the inert attribute.

142
00:09:54.629 --> 00:09:57.622
It's being implemented, I think in Chrome,
Safari and all kinds of things.

143
00:09:57.622 --> 00:10:00.175
So and then there's a pretty
good polyfill for it.

144
00:10:00.175 --> 00:10:02.620
And so, one more question.

145
00:10:02.620 --> 00:10:03.938
Here we go.

146
00:10:03.938 --> 00:10:09.188
&gt;&gt; How do you think about CSS property
naming and usage in the context of web

147
00:10:09.188 --> 00:10:14.791
components, such as, prefixing variable
names on a per component basis or

148
00:10:14.791 --> 00:10:18.840
defining them in a host versus
defining them on route.

149
00:10:20.620 --> 00:10:25.152
&gt;&gt; Right, okay cool yeah so
how do you to like CSS custom

150
00:10:25.152 --> 00:10:30.611
properties if we're going to use that,
I like the namespace,

151
00:10:30.611 --> 00:10:36.798
like your variables have the same
name as your element like namespace.

152
00:10:36.798 --> 00:10:44.850
So you like that shadow scroller
was like shadow scroller.

153
00:10:44.850 --> 00:10:47.080
What was it, strength or something?

154
00:10:47.080 --> 00:10:49.826
So, how the radius.

155
00:10:49.826 --> 00:10:53.739
I like that because it's very specific and

156
00:10:53.739 --> 00:10:58.200
I know it's there's not
gonna be a side effect.

157
00:10:58.200 --> 00:11:02.981
There's a chance if you name something
at the top of your document, and

158
00:11:02.981 --> 00:11:07.170
then this custom element is looking for
the BG.

159
00:11:07.170 --> 00:11:11.217
Attribute, there might be a conflict,
cuz you set it up here, but

160
00:11:11.217 --> 00:11:14.049
you did not want it to go
in the custom element.

161
00:11:14.049 --> 00:11:17.703
Easy enough to redefine it because
that's how CSS variables work.

162
00:11:17.703 --> 00:11:19.736
You can define something up here and

163
00:11:19.736 --> 00:11:23.950
then you can redefine it down here with
no problems to the rest of the page.

164
00:11:23.950 --> 00:11:26.650
That's kind of the nature of the cascade.

165
00:11:26.650 --> 00:11:31.735
So there's less Less massive fallout
than like changing a SASS variable or

166
00:11:31.735 --> 00:11:32.630
something.

167
00:11:33.920 --> 00:11:38.228
But, in where should you apply it,

168
00:11:38.228 --> 00:11:43.978
at the root or host,
I think it does not matter.

169
00:11:43.978 --> 00:11:48.972
I think people started using
route colon route too further see

170
00:11:48.972 --> 00:11:51.189
their CSS variables just.

171
00:11:51.189 --> 00:11:56.796
Because I think some example used it
doesn't have to be there it can be a body

172
00:11:56.796 --> 00:12:02.766
it can be on HTML we just for some reason
route please everyone just gravitated.

173
00:12:02.766 --> 00:12:08.059
We should just do that and that's,
I don't know, weird, but host,

174
00:12:08.059 --> 00:12:13.176
I like host, just because you're
saying everything in this custom

175
00:12:13.176 --> 00:12:18.135
element is going to be used one of these,
but it doesn't matter.

176
00:12:18.135 --> 00:12:19.298
That's the nature of CSS.

177
00:12:19.298 --> 00:12:21.480
It just picks up where it where it does.

178
00:12:21.480 --> 00:12:23.635
So it tries to figure it out.

