WEBVTT

1
00:00:00.240 --> 00:00:05.140
All right, hopefully we get some
data from somewhere, right?

2
00:00:05.140 --> 00:00:08.670
So we're not just making this up.

3
00:00:08.670 --> 00:00:15.704
So there's a Open Brewery DB.

4
00:00:15.704 --> 00:00:19.270
If you don't drink that's fine, awesome.

5
00:00:19.270 --> 00:00:23.470
You should totally make a library app or
something like that,

6
00:00:23.470 --> 00:00:28.900
there's open library, this is really
just for demonstration purposes.

7
00:00:28.900 --> 00:00:31.139
But yeah,
let's go by city San Diego, right?

8
00:00:31.139 --> 00:00:34.076
And we're in Minneapolis right now,
so we'll do that.

9
00:00:34.076 --> 00:00:41.036
So in our connected callback,
we're gonna do if not this breweries and

10
00:00:41.036 --> 00:00:47.300
this may be a place where we can
initialize too and just say like,

11
00:00:47.300 --> 00:00:52.299
if this breweries doesn't
exist then set to zero.

12
00:00:52.299 --> 00:00:55.182
But this fetchBreweries,

13
00:00:55.182 --> 00:01:00.205
we're gonna go fetch some breweries,
right?

14
00:01:00.205 --> 00:01:04.797
So we need to make a fetchBreweries, okay.

15
00:01:04.797 --> 00:01:07.933
So async cuz fetch, right?

16
00:01:07.933 --> 00:01:12.091
We're gonna async from our fetchBreweries
and knew we wanted to do that.

17
00:01:12.091 --> 00:01:16.208
So we're gonna do here and then, so

18
00:01:16.208 --> 00:01:21.288
we need to do const
response equals fetch and

19
00:01:21.288 --> 00:01:25.682
then we're gonna go get breweries but

20
00:01:25.682 --> 00:01:29.958
we wanna go to Minneapolis and mini.

21
00:01:29.958 --> 00:01:32.692
No m, am I close?

22
00:01:32.692 --> 00:01:35.023
&gt;&gt; You got it.
&gt;&gt; I got it.

23
00:01:35.023 --> 00:01:41.135
My [LAUGH] Midwesterner figured it out.

24
00:01:41.135 --> 00:01:42.705
Okay, here we go.

25
00:01:42.705 --> 00:01:45.115
And then what do we do?

26
00:01:45.115 --> 00:01:48.850
We actually just want the JSON response,

27
00:01:48.850 --> 00:01:53.542
so equals, but
we're gonna do away that one and

28
00:01:53.542 --> 00:01:59.685
then we're going to await
response.json cuz it's a promise.

29
00:01:59.685 --> 00:02:04.263
And then we say this breweries
equals JSON response

30
00:02:04.263 --> 00:02:09.240
then we get a JSON response,
then we will do that.

31
00:02:09.240 --> 00:02:14.095
This should maybe do it,
let's see what's going on.

32
00:02:14.095 --> 00:02:16.931
No, it did not, let's see.

33
00:02:18.905 --> 00:02:20.516
Cuz I set breweries.

34
00:02:22.375 --> 00:02:23.493
Let's see here.

35
00:02:23.493 --> 00:02:29.560
&gt;&gt; [INAUDIBLE]
&gt;&gt; Okay, yeah, we could do that.

36
00:02:29.560 --> 00:02:32.102
If not breweries that length, right?

37
00:02:32.102 --> 00:02:37.482
Cuz we know we'll have breweries and
there you go.

38
00:02:37.482 --> 00:02:41.252
I got 20 breweries here in town hopefully.

39
00:02:41.252 --> 00:02:45.166
And okay, this is kinda cool.

40
00:02:45.166 --> 00:02:48.190
If you go to a new town you
can get some breweries.

41
00:02:48.190 --> 00:02:53.047
Check them off your list but wouldn't it
be great to check them off your list or

42
00:02:53.047 --> 00:02:55.580
do something like that.

43
00:02:55.580 --> 00:03:00.094
One other thing we could do
is also add a loading, right?

44
00:03:00.094 --> 00:03:06.250
Type Boolean and
then this would be something

45
00:03:06.250 --> 00:03:12.244
we'll do this stuff
loading true before and

46
00:03:12.244 --> 00:03:17.761
then they start loading false, right?

47
00:03:17.761 --> 00:03:23.887
Then down here,
we could do some cool stuff, right?

48
00:03:23.887 --> 00:03:29.328
So we could do whatever we
want to do here we could,

49
00:03:29.328 --> 00:03:34.050
we could really nest
it as much as we want.

50
00:03:34.050 --> 00:03:37.198
But we could do maybe,

51
00:03:37.198 --> 00:03:42.672
I kinda wanna put it down here, right?

52
00:03:42.672 --> 00:03:45.463
So this.loading,

53
00:03:45.463 --> 00:03:51.204
if this dot loading then html p, whoa,

54
00:03:51.204 --> 00:03:56.456
we're gonna just return html loading

55
00:03:56.456 --> 00:04:04.070
[INAUDIBLE] that otherwise do nothing,
all right?

56
00:04:04.070 --> 00:04:07.480
Lets see if that kind of,
it's not working.

57
00:04:07.480 --> 00:04:14.560
But maybe if we can trick it by messing up
the URL here [LAUGH] still loading, right?

58
00:04:14.560 --> 00:04:16.840
It's just gonna be loading forever.

59
00:04:16.840 --> 00:04:21.410
It's just the internet's too good
here in the Frontend Masters studio.

60
00:04:21.410 --> 00:04:23.340
We're here, we're fetching from an API.

61
00:04:23.340 --> 00:04:29.973
We're getting some stuff,
we're doing if it's loading thing,

62
00:04:29.973 --> 00:04:37.860
there's another way you could do this
in line, you could also do up here.

63
00:04:37.860 --> 00:04:43.710
If this.loading and
then you could instead return here, right?

64
00:04:43.710 --> 00:04:48.592
So and then I basically just return
the same thing I just returned,

65
00:04:48.592 --> 00:04:54.431
might be a more efficient way so you never
actually get to the loading, you never

66
00:04:54.431 --> 00:04:59.980
get less if statements in your template
is kind of better just in general.

67
00:04:59.980 --> 00:05:03.043
And that might be more, yeah [INAUDIBLE].

68
00:05:03.043 --> 00:05:03.614
Okay, cool.

69
00:05:03.614 --> 00:05:08.250
Well, we got that step in and so
there's a million things we can do.

70
00:05:08.250 --> 00:05:11.270
But let's just add a visited state, right?

71
00:05:11.270 --> 00:05:13.320
Cuz that's what I want to do, right?

72
00:05:13.320 --> 00:05:18.376
I wanna keep track of things I've
been to and check them off and

73
00:05:18.376 --> 00:05:23.710
make sure I'm going to the right
places when I visit a new town.

74
00:05:23.710 --> 00:05:28.539
So what we wanna do is we're probably
gonna have to go down here and for

75
00:05:28.539 --> 00:05:30.306
every brewery, right?

76
00:05:30.306 --> 00:05:32.790
We're in, we have a brewery name, right?

77
00:05:32.790 --> 00:05:37.146
But we probably need a button in here and

78
00:05:37.146 --> 00:05:40.710
it's very clear view button and

79
00:05:40.710 --> 00:05:44.810
then visited or something, right?

80
00:05:44.810 --> 00:05:48.552
Like a visited button and
we'll probably see that over here.

81
00:05:48.552 --> 00:05:52.520
Looks awful, we can solve that,
we know how to style things.

82
00:05:54.080 --> 00:05:58.147
So, but one thing we might wanna
keep track of, how many we visited,

83
00:05:58.147 --> 00:05:59.360
stuff like that.

84
00:05:59.360 --> 00:06:03.730
So let's get this button
working first though.

85
00:06:03.730 --> 00:06:04.764
So button, right?

86
00:06:04.764 --> 00:06:06.310
What do buttons do?

87
00:06:06.310 --> 00:06:09.260
You click them and
then they do something, right?

88
00:06:09.260 --> 00:06:14.910
And so, you're gonna just go to
this.togglevisitedstatus and

89
00:06:14.910 --> 00:06:19.739
then we'll pass the brewery
into that just cuz you wanna

90
00:06:19.739 --> 00:06:23.040
know which brewery you're going to.

91
00:06:23.040 --> 00:06:25.972
You could do a brewery ID if you want but

92
00:06:25.972 --> 00:06:30.550
we're basically just toggling
the brewery status in.

93
00:06:30.550 --> 00:06:33.734
I have not closed something and
it's very, okay, I need to close that.

94
00:06:33.734 --> 00:06:36.265
Okay, cool.

95
00:06:36.265 --> 00:06:38.948
And here, down here,

96
00:06:38.948 --> 00:06:44.317
we'll just do it after
the render function,

97
00:06:44.317 --> 00:06:50.537
toggle visited status and
then expects a brewery and

98
00:06:50.537 --> 00:06:55.342
then we're going to this.breweries,

99
00:06:55.342 --> 00:07:00.940
this.breweries map or
map through them all.

100
00:07:00.940 --> 00:07:04.509
We'll find every brewery,

101
00:07:04.509 --> 00:07:09.268
if the brew goodness code completed,

102
00:07:09.268 --> 00:07:14.471
you're in the way if the brewery equals,

103
00:07:14.471 --> 00:07:20.420
so we're gonna have to
name this something else

104
00:07:20.420 --> 00:07:26.090
cuz we're using brewery to update, right?

105
00:07:26.090 --> 00:07:29.320
That's you click down on button,
you wanna update a brewery.

106
00:07:29.320 --> 00:07:34.274
And so, we're gonna look through all the
breweries or map through all the breweries

107
00:07:34.274 --> 00:07:39.117
and if that brewery equals the brewery
update, awesome, then we have work to do.

108
00:07:39.117 --> 00:07:47.627
So if that's true then we're going to
basically splat out the whole brewery and

109
00:07:47.627 --> 00:07:54.372
then what we wanna set visited
which is kind of a new attribute.

110
00:07:54.372 --> 00:07:59.139
We're inventing this,
we're hooking into the thing and

111
00:07:59.139 --> 00:08:04.011
we're saying visited does
equals not brewery.visited.

112
00:08:04.011 --> 00:08:08.484
So that will be true on our one but
false on everything else.

113
00:08:08.484 --> 00:08:16.460
And then we need to do the false case and
then we're just gonna return the brewery.

114
00:08:16.460 --> 00:08:19.910
And let's see if my code
formatter kicks in.

115
00:08:19.910 --> 00:08:26.700
Once it's so mad at me, let's see,
I messed up that's why he's mad at me.

116
00:08:26.700 --> 00:08:31.536
Okay, and then brewery is not defined,
I thought it was.

117
00:08:31.536 --> 00:08:35.802
&gt;&gt; Your [INAUDIBLE]
seen instead of equally

118
00:08:35.802 --> 00:08:40.877
&gt;&gt; Thank you, appreciate you.

119
00:08:40.877 --> 00:08:43.599
Okay, but it's still mad
that brewery is not defined.

120
00:08:48.729 --> 00:08:55.504
Let's see where does it think.

121
00:08:55.504 --> 00:08:58.330
Let's see, maybe I can do that.

122
00:08:58.330 --> 00:09:02.728
Maybe I can do trick it to do this.

123
00:09:02.728 --> 00:09:05.309
All right.

124
00:09:05.309 --> 00:09:12.046
&gt;&gt; Here there's parenthesis there
at the end of brewery [INAUDIBLE].

125
00:09:12.046 --> 00:09:12.840
&gt;&gt; You're saying.

126
00:09:12.840 --> 00:09:15.818
&gt;&gt; You're just mapping Boolean right now.

127
00:09:15.818 --> 00:09:16.950
&gt;&gt; Okay, yeah, yeah, yeah.

128
00:09:16.950 --> 00:09:19.270
All right, so there, thank you.

129
00:09:19.270 --> 00:09:23.069
And now I need to close all
that because it's done.

130
00:09:25.020 --> 00:09:30.865
Great, okay, so now we can say visited,

131
00:09:30.865 --> 00:09:37.044
unvisited but maybe we'll, it's good but

132
00:09:37.044 --> 00:09:43.725
we need to maybe fix our
button text a bit [LAUGH].

133
00:09:43.725 --> 00:09:47.757
So we can say like,

134
00:09:47.757 --> 00:09:54.817
this.brewery.visited?mark

135
00:09:54.817 --> 00:09:59.490
unvisited, right?

136
00:09:59.490 --> 00:10:02.510
So and then otherwise mark visited.

137
00:10:04.820 --> 00:10:12.170
This is why JavaScript is
winning [LAUGH] the world, okay.

138
00:10:12.170 --> 00:10:17.120
Here we go, we got this,
we're gonna just kinda keep formatting

139
00:10:17.120 --> 00:10:21.260
to make my OCD happy and
then we're gonna close that and

140
00:10:21.260 --> 00:10:25.680
then we're gonna close that and
then we're gonna close.

141
00:10:25.680 --> 00:10:27.900
I don't know where that guy's coming from.

142
00:10:27.900 --> 00:10:28.970
Okay, that's the map.

143
00:10:28.970 --> 00:10:30.370
Okay, cool.

144
00:10:30.370 --> 00:10:35.126
And let's see what's happening,
we still messed up our URL.

145
00:10:35.126 --> 00:10:40.030
No, that's fine but
what is this guy about?

146
00:10:45.164 --> 00:10:49.001
Okay, okay.

147
00:10:51.956 --> 00:11:00.319
This is a weird bit about when
you do a function inside of here.

148
00:11:00.319 --> 00:11:03.224
Okay, when you want to pass the brewery,

149
00:11:03.224 --> 00:11:08.206
you kinda have to do the anonymous
function and then pass that through.

150
00:11:08.206 --> 00:11:12.486
Okay, let's see what's the browser mad at,

151
00:11:12.486 --> 00:11:16.893
undefined proc cannot
read property visited.

152
00:11:16.893 --> 00:11:21.305
Okay, so
it must really hate that we did that.

153
00:11:23.065 --> 00:11:27.031
That brewery visited,
we'll just do like [INAUDIBLE].

154
00:11:27.031 --> 00:11:30.180
&gt;&gt; Maybe not on this, just brewery.

155
00:11:30.180 --> 00:11:33.407
&gt;&gt; Just brewery, you're right, okay.

156
00:11:33.407 --> 00:11:36.908
So now we can mark these as visited,

157
00:11:36.908 --> 00:11:42.161
we have visiting and
then we can actually go up here and

158
00:11:42.161 --> 00:11:46.861
instead of just doing the total count,
right?

159
00:11:46.861 --> 00:11:53.902
Of breweries, we could just say,
man, let's set up some variables.

160
00:11:53.902 --> 00:11:58.701
[LAUGH] total visited equals

161
00:11:58.701 --> 00:12:04.754
this.breweries.filter.b dot

162
00:12:04.754 --> 00:12:09.553
visit whoa, b.visited,

163
00:12:09.553 --> 00:12:13.518
we'll just do that and

164
00:12:13.518 --> 00:12:18.117
then dot length, right?

165
00:12:18.117 --> 00:12:23.759
And then we'll do the opposite for
total unvisited.

166
00:12:23.759 --> 00:12:25.759
B not.

167
00:12:28.417 --> 00:12:32.752
B.notvisited [SOUND] okay,
and then that's fine.

168
00:12:32.752 --> 00:12:38.233
Then here I'm going to say total

169
00:12:38.233 --> 00:12:43.515
unvisited and total visited.

170
00:12:54.517 --> 00:13:01.255
Okay, three remaining.

171
00:13:01.255 --> 00:13:05.316
Great, so we have visited zero but
now we visited one,

172
00:13:05.316 --> 00:13:08.170
we visited two, visited three.

173
00:13:08.170 --> 00:13:11.930
So we can't get a reactive
context building, right?

174
00:13:11.930 --> 00:13:14.699
Looks terrible,
does not [LAUGH] quite fit our,

175
00:13:14.699 --> 00:13:19.212
we're not gonna make the millions of
dollars we hope from this application.

176
00:13:19.212 --> 00:13:23.072
But so far we're kind of
being able to kinda build out

177
00:13:23.072 --> 00:13:27.550
an application that goes and
fetches JSON from somewhere and

178
00:13:27.550 --> 00:13:32.322
then is able to pipe that into
kind of a reactive little context.

179
00:13:32.322 --> 00:13:34.443
Any questions or should we keep going?

180
00:13:34.443 --> 00:13:36.665
Yes.

181
00:13:36.665 --> 00:13:38.690
&gt;&gt; This might be premature,
you're welcome to [INAUDIBLE].

182
00:13:38.690 --> 00:13:39.613
&gt;&gt; Sure.

183
00:13:39.613 --> 00:13:44.056
&gt;&gt; it's someone who's deeply familiar with
react and is always looking to cut out

184
00:13:44.056 --> 00:13:47.171
libraries, the syntax that
we just saw [INAUDIBLE] app,

185
00:13:47.171 --> 00:13:50.750
as you say very similar to much of
how you would implement this and

186
00:13:50.750 --> 00:13:53.160
especially class component style react.

187
00:13:53.160 --> 00:13:54.040
&gt;&gt; Yeah.

188
00:13:54.040 --> 00:13:58.417
&gt;&gt; The kind of one piece that's in my
head, missing in the puzzle is that kind

189
00:13:58.417 --> 00:14:03.376
of state management and the kind of the
unidirectional data tree and react offers.

190
00:14:03.376 --> 00:14:07.640
Are there nascent solutions for
that in the kind of web components world,

191
00:14:07.640 --> 00:14:08.620
are there?

192
00:14:08.620 --> 00:14:10.410
&gt;&gt; Yeah.
&gt;&gt; Methods of, yeah.

193
00:14:10.410 --> 00:14:12.430
&gt;&gt; Like a global state manager?

194
00:14:12.430 --> 00:14:15.229
&gt;&gt; Exactly, yeah,
[CROSSTALK] ways of yeah,

195
00:14:15.229 --> 00:14:20.052
relaying data up to some centralized
store that then propagates that into

196
00:14:20.052 --> 00:14:23.336
a bunch of web components
at all places on the DOM.

197
00:14:23.336 --> 00:14:30.410
&gt;&gt; Yeah, total, so
we're going back to our buddy lead.dev.

198
00:14:30.410 --> 00:14:36.298
Right now and this kind of gets
into the FAQ sort of portion of it,

199
00:14:36.298 --> 00:14:43.516
but right now reactive context is like
BYO, bring your own reactor contests.

200
00:14:43.516 --> 00:14:51.870
And that is good just cuz you can go
wild [LAUGH], as wild as you want.

201
00:14:51.870 --> 00:14:56.630
But there's a few things happening.

202
00:14:56.630 --> 00:14:59.710
So in the documentation here for lead.dev.

203
00:15:01.220 --> 00:15:07.278
So it has this thing called a reactive no,
my gosh, let me see here,

204
00:15:07.278 --> 00:15:14.800
I might need to go to the labs because
I think it's a new experimental thing.

205
00:15:14.800 --> 00:15:20.870
Let me see it's called a reactive
controller, there we go.

206
00:15:22.150 --> 00:15:29.008
A reactive controller and
it's sort of sounds like it sounds but

207
00:15:29.008 --> 00:15:34.469
you build a controller that has state and
then you,

208
00:15:34.469 --> 00:15:42.900
like this resize controller that tells
the size I guess I should zoom in here.

209
00:15:42.900 --> 00:15:46.660
So you have the resize controller and

210
00:15:46.660 --> 00:15:51.510
then it returns the text size or whatever.

211
00:15:51.510 --> 00:15:55.691
And that is sort of how
they're solving it,

212
00:15:55.691 --> 00:15:59.646
you set up these reactive controllers and

213
00:15:59.646 --> 00:16:04.505
then you just basically not
quite the use syntax but

214
00:16:04.505 --> 00:16:09.816
the new class,
you say new resize controller to observe

215
00:16:09.816 --> 00:16:14.680
this reactive piece of
state somewhere upstream.

216
00:16:17.470 --> 00:16:21.111
Web Components not this one but

217
00:16:21.111 --> 00:16:25.899
the CG [INAUDIBLE] link to fiber lab.

218
00:16:25.899 --> 00:16:30.793
Boy, Web Components cg,

219
00:16:30.793 --> 00:16:34.360
that's my group.

220
00:16:34.360 --> 00:16:37.611
The Web Components community group, again,

221
00:16:37.611 --> 00:16:42.070
we're not official W3C or
TC39 in JavaScript case.

222
00:16:42.070 --> 00:16:46.114
We can't propose elements,
we can't propose things but

223
00:16:46.114 --> 00:16:50.981
the people who do and can propose things
are working in this group [LAUGH]

224
00:16:50.981 --> 00:16:55.780
to kind of see it by people before
things get put out in the world.

225
00:16:55.780 --> 00:17:00.250
And one thing they are looking at
is a official context protocol.

226
00:17:01.390 --> 00:17:07.088
Benjamin works at Adobe right now
if I remember that correctly and

227
00:17:07.088 --> 00:17:12.166
there's some goals and
non goals but basically you create

228
00:17:12.166 --> 00:17:17.970
context somewhere and
then you can dispatch that through events,

229
00:17:17.970 --> 00:17:22.310
sort of event driven context manipulation.

230
00:17:22.310 --> 00:17:29.247
And then you need to consume
that reactive controller or

231
00:17:29.247 --> 00:17:33.240
that reactive context as well.

232
00:17:33.240 --> 00:17:38.238
So I think if you dispatch the event and
get the logger context

233
00:17:38.238 --> 00:17:43.138
then you have the logger disposer and
you have this logger,

234
00:17:43.138 --> 00:17:48.710
yeah, this logger gets sent to
the value of the context event.

235
00:17:48.710 --> 00:17:49.618
So.

236
00:17:50.676 --> 00:17:54.968
Not super clean but again this is sort of,
Web Components likes to build

237
00:17:54.968 --> 00:17:58.984
out the primitives that you build
the nice looking thing on top of.

238
00:17:58.984 --> 00:18:05.134
So this would become more
the browser level way to do it and

239
00:18:05.134 --> 00:18:10.273
then you layer on a nice
new emit API above that.

240
00:18:10.273 --> 00:18:11.150
Yes.

241
00:18:11.150 --> 00:18:14.160
&gt;&gt; Someone in chat mentioned
reactive controller and

242
00:18:14.160 --> 00:18:18.555
lit element
&gt;&gt; Yeah, that's what I was talking about

243
00:18:18.555 --> 00:18:25.162
here so this reactive controller, this
mouse controller example is pretty good.

244
00:18:25.162 --> 00:18:28.198
So you grab this mouse controller,

245
00:18:28.198 --> 00:18:33.965
the mouse controller looks a bit
like this, it connects to a host and

246
00:18:33.965 --> 00:18:39.530
then watches the mouse move but
it stores some data about itself or

247
00:18:39.530 --> 00:18:43.650
in broadcast this data or
that data is in there.

248
00:18:43.650 --> 00:18:48.480
And then mouse is that controller and
then you have the mouse position.

249
00:18:48.480 --> 00:18:54.150
So the data store is happening upstream
and then you are the data creation or

250
00:18:54.150 --> 00:19:00.279
whatever is happening upstream and
you're just kind of using object, that so.

251
00:19:02.761 --> 00:19:07.808
Yeah, and again, this goes into
that conversation of why would

252
00:19:07.808 --> 00:19:12.861
you use a library because they
have some of the problems solved.

253
00:19:12.861 --> 00:19:17.728
And I've seen a couple other things
like fast was using it interesting way

254
00:19:17.728 --> 00:19:19.937
of using dependency injection.

255
00:19:19.937 --> 00:19:23.282
It was just a tweet and
then it vanished but

256
00:19:23.282 --> 00:19:28.252
it was sort of this idea,
you can create a reactive context and

257
00:19:28.252 --> 00:19:33.223
then inject it or store and
then inject it in your component and

258
00:19:33.223 --> 00:19:37.640
start using it or
committing to it and stuff like that.

259
00:19:37.640 --> 00:19:44.581
Yeah, so this stuff exists and this is why
maybe you wanna use the framework just so

260
00:19:44.581 --> 00:19:49.620
you can kind of get some of
the benefits of using this stuff.

