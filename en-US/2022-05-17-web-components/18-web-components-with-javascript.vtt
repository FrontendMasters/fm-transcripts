WEBVTT

1
00:00:00.290 --> 00:00:04.136
This next part we're actually going to go
kind of deep on on writing JavaScript.

2
00:00:04.136 --> 00:00:08.971
And that is kind of the whole
next section of the talk

3
00:00:08.971 --> 00:00:13.478
here writing web components
with JavaScript.

4
00:00:13.478 --> 00:00:16.678
And I put this guy in here
cuz he's just frustrated,

5
00:00:16.678 --> 00:00:19.533
I'm frustrated you have
your last half hour.

6
00:00:19.533 --> 00:00:25.619
I'm frustrated but
the styling can be frustrating but

7
00:00:25.619 --> 00:00:30.786
authoring I think you're
starting to see it.

8
00:00:30.786 --> 00:00:35.439
One thing you need to know about
web components is they have a life

9
00:00:35.439 --> 00:00:39.576
cycle just like a view component or
a react component, or

10
00:00:39.576 --> 00:00:44.676
I think every other framework has
a life cycle in updating life cycle.

11
00:00:44.676 --> 00:00:49.790
And in this custom alert example,
we get the observed attributes and

12
00:00:49.790 --> 00:00:55.363
then we have a constructor and the super
says, make our custom array here.

13
00:00:55.363 --> 00:01:01.699
Or I can do some drawing here make
our this super means make our custom

14
00:01:01.699 --> 00:01:07.493
alert behave like an html element
right that's pretty easy.

15
00:01:07.493 --> 00:01:11.992
And then next in the stack it's gonna
go to connected callback, right,

16
00:01:11.992 --> 00:01:15.974
once it's ready to go,
it says I'm gonna say I'm connected and

17
00:01:15.974 --> 00:01:17.838
you can do whatever you want.

18
00:01:17.838 --> 00:01:20.711
Once I'm connected, disconnected callback,

19
00:01:20.711 --> 00:01:25.692
whenever if you have to do teardown work,
you do that in the disconnected callback.

20
00:01:25.692 --> 00:01:29.624
This might be like event listeners or
something like that.

21
00:01:29.624 --> 00:01:33.049
And then attribute change
callback is kind of a yeah.

22
00:01:33.049 --> 00:01:38.210
So connected would be like React's
componentDidMount, componentWillUnmount.

23
00:01:38.210 --> 00:01:42.819
AttributeChangeCallback is a little bit
like almost like views watch syntax if

24
00:01:42.819 --> 00:01:45.638
you've ever used that but
you can be basically,

25
00:01:45.638 --> 00:01:48.959
when an update happens to something,
it's observing.

26
00:01:48.959 --> 00:01:52.625
It will tell you the old value and
the new value in case you

27
00:01:52.625 --> 00:01:56.450
want to do something with it
in between like intercepted or

28
00:01:56.450 --> 00:02:00.841
add 1000 to it to make more money
[LAUGH] than your dark website.

29
00:02:00.841 --> 00:02:06.025
So then you wretched define the element
in the bottom of the life cycle.

30
00:02:06.025 --> 00:02:10.692
Okay, then it gets more complicated
right injecting templates.

31
00:02:10.692 --> 00:02:16.620
So you have like to create a shadow DOM,
you need to clone a template.

32
00:02:16.620 --> 00:02:21.241
And so here I'm like creating
a template with a Create Element, and

33
00:02:21.241 --> 00:02:25.618
then putting the inner html,
this feels a little disgusting and

34
00:02:25.618 --> 00:02:29.851
your browser in banking software
might not appreciate that.

35
00:02:29.851 --> 00:02:31.859
I'll explain that a little bit further.

36
00:02:31.859 --> 00:02:34.596
But then div hello world, right?

37
00:02:34.596 --> 00:02:37.491
And then we're expecting that
to show up in the shadow.

38
00:02:37.491 --> 00:02:41.292
So I have to, in my constructor,
attach a shadow route and

39
00:02:41.292 --> 00:02:43.163
create a private variable.

40
00:02:43.163 --> 00:02:49.461
Attach the shadow mode open, and
then I'm going to append the child,

41
00:02:49.461 --> 00:02:54.707
but I'm going to copy the my
template content clone node.

42
00:02:54.707 --> 00:02:57.982
So you just clone that node and

43
00:02:57.982 --> 00:03:02.962
inject that child into
the shadow DOM okay and

44
00:03:02.962 --> 00:03:09.398
the shadow root that no you
put it all together it's fine.

45
00:03:09.398 --> 00:03:14.858
We are snobby developers now, we've had
decades of ergonomics behind our back and

46
00:03:14.858 --> 00:03:19.545
this does not feel like a good
experience in authoring a web component.

47
00:03:19.545 --> 00:03:23.637
Again, there's got to be a better way.

48
00:03:23.637 --> 00:03:28.016
I hear you say,
there's got to be a better way, everybody.

49
00:03:28.016 --> 00:03:30.290
&gt;&gt; It's got a better way.

50
00:03:30.290 --> 00:03:33.237
&gt;&gt; [LAUGH] this is good [LAUGH].

51
00:03:33.237 --> 00:03:41.405
Well, hey, didn't you say web components
were designed for framework authors?

52
00:03:41.405 --> 00:03:46.190
Yes, I did say that web
component libraries.

53
00:03:46.190 --> 00:03:53.475
And this gets at an earlier question, but
there are lots of web component libraries.

54
00:03:53.475 --> 00:03:56.258
There's lots of ways to
cut a web component.

55
00:03:56.258 --> 00:04:02.053
Then, at last count, I have this website
here from I think it's ‹div›RIOTS.

56
00:04:02.053 --> 00:04:04.167
Puts it up, you have ‹div›RIOTS.

57
00:04:05.878 --> 00:04:10.251
They audit all the different
ways to make a web component.

58
00:04:10.251 --> 00:04:15.928
And there's 61 different ways to spit out
a web component and they compare them all.

59
00:04:15.928 --> 00:04:19.288
Like how long it takes to
make a web component or

60
00:04:19.288 --> 00:04:23.350
how much code it takes yeah,
maybe don't use that one.

61
00:04:23.350 --> 00:04:26.481
[LAUGH] but there's a lot of
different ways to make a component.

62
00:04:26.481 --> 00:04:30.384
And then they kind of do it in a set
of like 30 components as well.

63
00:04:30.384 --> 00:04:33.889
And they see like how much
reuse is kind of happening very

64
00:04:33.889 --> 00:04:36.887
valuable thing that div
rights is doing there.

65
00:04:36.887 --> 00:04:40.227
But what's neat about
web component libraries,

66
00:04:40.227 --> 00:04:43.737
they're typically five
to 10 kilobytes in size.

67
00:04:43.737 --> 00:04:48.348
And then provide a lot of convenience and
last in a small package

68
00:04:48.348 --> 00:04:52.959
that's either syntactic sugar or,
just helping you kind of,

69
00:04:52.959 --> 00:04:57.660
I guess shortcut problems or
redundancies and stuff like that.

70
00:04:57.660 --> 00:05:03.031
So, we looked at maybe a little bit
about how like lists helps in CSS and

71
00:05:03.031 --> 00:05:04.407
stuff like that.

72
00:05:04.407 --> 00:05:07.226
But so there's a lot of different flavors.

73
00:05:07.226 --> 00:05:10.346
And my favorite example of this is,

74
00:05:10.346 --> 00:05:16.066
you just saw the way to inject a template,
you create a template or

75
00:05:16.066 --> 00:05:21.898
you could query selector an ID of
an existing template on the page.

76
00:05:21.898 --> 00:05:24.850
And then you clone that note with Lit,

77
00:05:24.850 --> 00:05:29.195
it looks a little bit more
like JSX in a React component.

78
00:05:29.195 --> 00:05:33.887
If you have a render function, that's the
thing they invented and put in there, and

79
00:05:33.887 --> 00:05:37.074
the render function returns
html tag template literal.

80
00:05:37.074 --> 00:05:39.830
And this html tag template literal is,

81
00:05:39.830 --> 00:05:43.096
I think the most wonderful
thing in the world.

82
00:05:43.096 --> 00:05:48.413
There's a lot of, you should watch
this video I've included here.

83
00:05:48.413 --> 00:05:52.095
That's kind of the announcement of
lit html which is the project for

84
00:05:52.095 --> 00:05:53.911
that html tag template literal.

85
00:05:53.911 --> 00:05:58.257
But it's just a it takes a string and
converts it into html.

86
00:05:58.257 --> 00:06:03.565
But what it does is it creates a template
element that creates a template element.

87
00:06:03.565 --> 00:06:07.927
And then it remembers which parts
you have JavaScript the like,

88
00:06:07.927 --> 00:06:11.660
dollar sign curly braces,
it remembers those parts.

89
00:06:11.660 --> 00:06:15.766
And so when you update,
it actually only updates those parts.

90
00:06:15.766 --> 00:06:20.790
So it's really intelligent update
whereas like in in react you'd

91
00:06:20.790 --> 00:06:26.455
have to memorise stuff or whatever to
make it not rerender on every change.

92
00:06:26.455 --> 00:06:30.749
The Cascade is really huge this sort
of balances because it just says, well,

93
00:06:30.749 --> 00:06:33.006
I've remembered what I need to update.

94
00:06:33.006 --> 00:06:35.613
And so
I only update the little micro parts.

95
00:06:35.613 --> 00:06:37.118
I don't update the big template.

96
00:06:37.118 --> 00:06:42.827
So pretty cool,
pretty efficient updating system.

97
00:06:42.827 --> 00:06:45.286
But that's all happening
behind the scenes.

98
00:06:45.286 --> 00:06:49.218
And that's like another reason you'd
maybe want to use a framework, right?

99
00:06:49.218 --> 00:06:54.324
I'm not div report is not going
to code my own a template

100
00:06:54.324 --> 00:07:00.098
creator system LAUGH] JSX alternative,
but somebody has.

101
00:07:00.098 --> 00:07:05.148
And so I'm going to leverage
the framework to help with that.

102
00:07:05.148 --> 00:07:11.866
Again, the lit has a full component
life cycle and it adds, actually, hooks.

103
00:07:11.866 --> 00:07:16.936
We had connected callback and disconnected
callback, but it adds new I guess

104
00:07:16.936 --> 00:07:21.928
more human language update, like,
hey, I'm going to perform an update.

105
00:07:21.928 --> 00:07:25.001
Did you wanna do anything to
this data before I update it?

106
00:07:25.001 --> 00:07:28.170
No, great then I'm gonna render okay?

107
00:07:28.170 --> 00:07:33.050
And then once I render, then I'm just
gonna tell everyone I updated or

108
00:07:33.050 --> 00:07:36.455
an attribute updated or
whatever that changed.

109
00:07:36.455 --> 00:07:39.953
And then if it was the first update I'm
actually just gonna say the first update

110
00:07:39.953 --> 00:07:40.490
happened.

111
00:07:40.490 --> 00:07:44.521
So like component lifecycle maybe looks a
bit more like this like it's gonna update

112
00:07:44.521 --> 00:07:47.360
and then I'll render and
then tell everyone and updated.

113
00:07:47.360 --> 00:07:50.899
And then they'll like go back and
then kinda do a loop.

114
00:07:50.899 --> 00:07:53.299
So I don't know if that's exact but

115
00:07:53.299 --> 00:07:57.619
that's sort of how I see it just
like it's going to actually like

116
00:07:57.619 --> 00:08:02.508
figure out that it when it needs to
render a little bit more efficiently.

117
00:08:02.508 --> 00:08:07.158
Give us a little some few more hooks in,
doesn't feel as ugly to be

118
00:08:07.158 --> 00:08:12.245
honest which of course is the most
important thing in web development.

