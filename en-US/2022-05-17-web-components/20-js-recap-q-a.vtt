WEBVTT

1
00:00:00.330 --> 00:00:01.953
Okay, let's recap.

2
00:00:01.953 --> 00:00:05.840
Web components have a life cycle, right?

3
00:00:05.840 --> 00:00:08.044
So that's kinda they go
through some code for

4
00:00:08.044 --> 00:00:10.490
you just like every other
JavaScript framework.

5
00:00:11.840 --> 00:00:16.959
There are libraries that help make
writing Web Components easier,

6
00:00:16.959 --> 00:00:20.388
just makes it more
palatable to developers.

7
00:00:20.388 --> 00:00:23.360
And there are lots of different
flavors of Web Components.

8
00:00:23.360 --> 00:00:28.978
And I almost promise you if you have
one particular must have somebody's

9
00:00:28.978 --> 00:00:33.780
probably addressed it, and
is working on it in some context.

10
00:00:34.950 --> 00:00:38.780
And even some Js frameworks can import and
export Web Components.

11
00:00:38.780 --> 00:00:41.887
And I don't really show it here but

12
00:00:41.887 --> 00:00:46.603
I've actually found in preparing for
this course or

13
00:00:46.603 --> 00:00:52.177
even just taking questions
about Web Components, something

14
00:00:52.177 --> 00:00:58.840
like Lit is really awesome because
there's a whole community around it.

15
00:00:58.840 --> 00:01:02.077
Your framework or your library is
only as strong as your community.

16
00:01:02.077 --> 00:01:06.358
But there's a community around it,
they're building projects and

17
00:01:06.358 --> 00:01:10.640
prototypes and different ideas and
things like reactive context and

18
00:01:10.640 --> 00:01:14.356
stuff like that, context API's and
stuff like that that.

19
00:01:14.356 --> 00:01:17.514
That work's all happening
at the community level and

20
00:01:17.514 --> 00:01:20.330
then hopefully it goes
into the big project.

21
00:01:20.330 --> 00:01:23.580
So, or
it just lives in the community level.

22
00:01:24.620 --> 00:01:28.106
All that stuff is very exciting and
interesting.

23
00:01:28.106 --> 00:01:33.277
But, so one reason you may want to use
a framework or a library I should say,

24
00:01:33.277 --> 00:01:37.382
is maybe some of those problems,
those must haves for you,

25
00:01:37.382 --> 00:01:41.817
exist in the community level
whereas writing it all from scratch

26
00:01:41.817 --> 00:01:46.580
in vanilla Web Components would just
be maybe a little too daunting or

27
00:01:46.580 --> 00:01:50.640
just time consuming,
we all gotta get work done so, yes.

28
00:01:50.640 --> 00:01:55.290
&gt;&gt; You may touch on this later but
are there ways that like lazy load these

29
00:01:55.290 --> 00:01:59.390
components so that they don't
load if you don't need them?

30
00:01:59.390 --> 00:02:01.484
&gt;&gt; Right like as you need them?

31
00:02:01.484 --> 00:02:08.168
[COUGH] Yeah, so
the way you structure imports and

32
00:02:08.168 --> 00:02:12.732
exports, it builds out a tree and

33
00:02:12.732 --> 00:02:19.265
if you just want to use vanilla inputs,
right?

34
00:02:19.265 --> 00:02:22.620
It'll only import a file if
it's requested on the page.

35
00:02:22.620 --> 00:02:27.945
So, my shadow, what was it called?

36
00:02:27.945 --> 00:02:31.667
[LAUGH] Shadow element or
whatever that I demoed,

37
00:02:31.667 --> 00:02:34.940
shadow scroller that's what it was.

38
00:02:34.940 --> 00:02:39.000
My shadow scroller will only
request shadow scroller in Lit, or

39
00:02:39.000 --> 00:02:40.439
something like that.

40
00:02:40.439 --> 00:02:45.207
And then the next Component that
loads will just either their grab

41
00:02:45.207 --> 00:02:48.682
the copy of Lit that exists and
then it's code.

42
00:02:48.682 --> 00:02:51.470
But maybe it has a child component,
it will load that one.

43
00:02:51.470 --> 00:02:55.653
But this sort of involves in like
a multi-page architecture, so

44
00:02:55.653 --> 00:02:58.247
your page determines what gets loaded.

45
00:02:58.247 --> 00:03:02.743
In a single page context,
that gets into this sort of bundling and

46
00:03:02.743 --> 00:03:07.651
deployment stuff, and that's where
you're gonna kinda wanna like do

47
00:03:07.651 --> 00:03:11.578
the intelligent bundling and
code splitting to make sure

48
00:03:11.578 --> 00:03:16.730
that you're serving the least
amount as possible to the client.

49
00:03:16.730 --> 00:03:17.630
Does that help?

50
00:03:17.630 --> 00:03:18.130
&gt;&gt; Yep.
&gt;&gt; Okay.

51
00:03:18.130 --> 00:03:19.650
&gt;&gt; Kind of a follow up to that then.

52
00:03:20.930 --> 00:03:24.655
So let's say you do have
a Web kinda Component.

53
00:03:24.655 --> 00:03:29.025
If you're referencing another
Web Component in that Web Component then,

54
00:03:29.025 --> 00:03:32.838
does the, I'm guessing the ordering
matters of your imports and

55
00:03:32.838 --> 00:03:35.980
stuff like that, or
is that possible to even do that?

56
00:03:38.410 --> 00:03:41.303
&gt;&gt; Like if I'm referencing
a Component in a Component?

57
00:03:41.303 --> 00:03:41.840
&gt;&gt; Yes.

58
00:03:41.840 --> 00:03:42.956
&gt;&gt; Yeah, you totally can do that.

59
00:03:42.956 --> 00:03:47.036
Yeah, I mean,
I guess it's maybe possible you reference,

60
00:03:47.036 --> 00:03:51.756
Component A references Component B
which also includes Component A,

61
00:03:51.756 --> 00:03:54.879
that's maybe a disaster, you could create.

62
00:03:54.879 --> 00:04:00.586
[LAUGH] But again, Web Component
stopped preventing you from bad code,

63
00:04:00.586 --> 00:04:03.740
but I don't know what it does in that.

64
00:04:03.740 --> 00:04:08.298
The browser must bail after three tries or
three loops or something,

65
00:04:08.298 --> 00:04:11.375
probably bails after a recursion,
but yeah.

66
00:04:11.375 --> 00:04:16.900
So you have Web Component A and Web
Component B that requires C that requires

67
00:04:16.900 --> 00:04:23.490
D, it'll negotiate that, the native
import structure will negotiate all that.

68
00:04:23.490 --> 00:04:28.889
It is like in production, it's slow,
it's a network request every single time.

69
00:04:28.889 --> 00:04:32.029
So you maybe want to bundle in production,
but

70
00:04:32.029 --> 00:04:37.022
that's kinda the Web Component
philosophy is these, the bundling, and

71
00:04:37.022 --> 00:04:43.270
the code splitting and all that, that's at
the end, that's an application problem.

72
00:04:43.270 --> 00:04:49.762
That is not how to author a Web Component
problem, so we have a question.

73
00:04:49.762 --> 00:04:52.570
&gt;&gt; Is it more common to use
Web Components by themselves or

74
00:04:52.570 --> 00:04:54.040
together with a framework?

75
00:04:55.170 --> 00:04:57.313
&gt;&gt; That's a good question.

76
00:04:59.980 --> 00:05:01.250
I don't know.

77
00:05:02.360 --> 00:05:06.523
I could maybe get that data.

78
00:05:06.523 --> 00:05:10.759
I think a lot of Web Components
happen in some kinda framework.

79
00:05:12.490 --> 00:05:16.525
Like a material UI Web Component thing or
a,

80
00:05:16.525 --> 00:05:20.778
I guess they call it
material Web Components or

81
00:05:20.778 --> 00:05:24.500
Salesforce lightning Web Components.

82
00:05:24.500 --> 00:05:27.956
I don't know how many Salesforce
websites there are in existence, but

83
00:05:27.956 --> 00:05:29.635
I think it's billions, isn't?

84
00:05:29.635 --> 00:05:34.750
So, 90% of businesses
repurpose Salesforce.

85
00:05:34.750 --> 00:05:42.559
But no, I think a lot of people
are using them in a suite.

86
00:05:42.559 --> 00:05:45.524
I don't know if a lot of people
are kind of plucking one offs and

87
00:05:45.524 --> 00:05:47.330
stitching together a thing.

88
00:05:47.330 --> 00:05:51.158
I think a lot of people
are kinda building a system or,

89
00:05:51.158 --> 00:05:54.486
using an existing system
to piggyback off of.

90
00:05:55.955 --> 00:05:57.160
Yes.

91
00:05:57.160 --> 00:05:58.907
&gt;&gt; Why use a template and

92
00:05:58.907 --> 00:06:03.959
clone rather than just setting
the inner HTML of the shatter?

93
00:06:03.959 --> 00:06:07.090
&gt;&gt; It's a good question.

94
00:06:09.030 --> 00:06:11.167
I think that's possible.

95
00:06:11.167 --> 00:06:16.103
I think what we're trying
to get away from just

96
00:06:16.103 --> 00:06:21.050
as an industry in general
is using inner HTML.

97
00:06:22.300 --> 00:06:26.604
And in just that,
it's unsafe, somebody could,

98
00:06:26.604 --> 00:06:31.409
if you're getting WYSIWYG
content from your database,

99
00:06:31.409 --> 00:06:37.215
your WordPress API, and
you're spitting it out in your Component,

100
00:06:37.215 --> 00:06:40.719
the Component could in theory kind of hack

101
00:06:40.719 --> 00:06:45.555
your whole website because
you've just ran inner HTML.

102
00:06:45.555 --> 00:06:49.890
I looked into the Lit HTML tag template,
and it's really interesting.

103
00:06:49.890 --> 00:06:52.864
It does some sanitization,
and stuff like that.

104
00:06:52.864 --> 00:06:56.880
So you're not gonna,
open up a big security hole doing that.

105
00:06:56.880 --> 00:07:01.480
So, I think just in general,
the practice of using inner HTML,

106
00:07:01.480 --> 00:07:04.566
it's sort of a quick and
dirty way to do it.

107
00:07:04.566 --> 00:07:09.840
I'm not super [LAUGH] good at
experimenting but we could try.

108
00:07:09.840 --> 00:07:14.544
I mean so one thing you can do like

109
00:07:14.544 --> 00:07:21.880
this.renderRoot.textContent = 'Hello'.

110
00:07:21.880 --> 00:07:28.094
I think I can, see now I'm in Lit and
I'm mad, cuz I don't know what Lit wants.

111
00:07:28.094 --> 00:07:30.798
But we could try entering HTML whenever.

112
00:07:30.798 --> 00:07:34.820
[LAUGH] we could try this and
see what happens.

113
00:07:34.820 --> 00:07:38.430
It not liking that.

114
00:07:38.430 --> 00:07:42.410
So I don't know if Lit specifically
is preventing us there.

115
00:07:42.410 --> 00:07:45.663
But I can experiment and
try to figure that out.

116
00:07:45.663 --> 00:07:50.950
So, I don't see it that often which
makes me think you don't want to do.

