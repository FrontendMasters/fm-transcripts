WEBVTT

1
00:00:00.070 --> 00:00:02.219
What are Web Components?

2
00:00:02.219 --> 00:00:05.346
Let's dive in,
this is the boring definition,

3
00:00:05.346 --> 00:00:10.535
Web Components are a set of web platform
APIs that allow you to create new custom,

4
00:00:10.535 --> 00:00:14.907
reusable, encapsulated HTML tags
to use in web pages and web apps.

5
00:00:14.907 --> 00:00:19.285
That's from the old
webcomponents.org site.

6
00:00:19.285 --> 00:00:24.918
The keyword here is gonna be encapsulated,
but these custom,

7
00:00:24.918 --> 00:00:29.820
reusable, this all sounds pretty familiar,
right?

8
00:00:29.820 --> 00:00:34.430
If you've been following web
design in the last 10 years or so.

9
00:00:35.670 --> 00:00:40.190
LEGOs, right, components,
designed systems.

10
00:00:40.190 --> 00:00:46.040
And this is how we build websites more or
less objects oriented.

11
00:00:46.040 --> 00:00:48.941
[LAUGH] So you have components and

12
00:00:48.941 --> 00:00:54.645
we staple these components
together to build up our websites.

13
00:00:54.645 --> 00:01:00.590
Right now, we're probably all using
some existing JavaScript framework,

14
00:01:00.590 --> 00:01:06.088
React or View or Spelt or Angular to
kind of build our LEGO sets, right?

15
00:01:06.088 --> 00:01:11.145
We're already doing this component work,

16
00:01:11.145 --> 00:01:16.618
so you might be wondering,
these aren't new?

17
00:01:16.618 --> 00:01:21.260
Dojo had components in 2005,
then jQuery YUI, and

18
00:01:21.260 --> 00:01:24.816
jQuery in 2006YUI, 2006 Ext JS,

19
00:01:24.816 --> 00:01:30.970
which became Sencha 2007,
Angular 2010, Bootstrap, Ember.

20
00:01:30.970 --> 00:01:35.050
And notably, Web Components
were first proposed in 2011.

21
00:01:35.050 --> 00:01:41.980
So they're kinda old, but then React
in 2013, View in 2014, Spelt in 2016.

22
00:01:41.980 --> 00:01:44.610
Web Components aren't new.

23
00:01:44.610 --> 00:01:49.528
So what makes Web Components
different than all the other

24
00:01:49.528 --> 00:01:53.227
sort of ways to build components systems?

25
00:01:53.227 --> 00:01:58.597
Well, the big thing is Web Components
are a set of web standards,

26
00:01:58.597 --> 00:02:03.773
which there's some nuance there,
but it's not just reams and

27
00:02:03.773 --> 00:02:08.470
reams of JavaScript that
gets sent to the client.

28
00:02:08.470 --> 00:02:10.820
These are built into
the browser these features.

29
00:02:12.100 --> 00:02:14.380
There's four sort of
critical features here.

30
00:02:16.180 --> 00:02:19.886
Template, which also comes
with a buddy called slot,

31
00:02:19.886 --> 00:02:24.812
we'll talk about that, but
template is basically what it sounds like.

32
00:02:24.812 --> 00:02:29.257
Basically, you can put HTML in there and
the browser parses it and says, okay,

33
00:02:29.257 --> 00:02:32.949
I know what elements these are, but
it doesn't render it to the page,

34
00:02:32.949 --> 00:02:37.260
sort of a ghost element,
a strip tag, or something like that.

35
00:02:37.260 --> 00:02:42.489
Custom elements, these are sort of
the Hallmark feature of Web Components

36
00:02:42.489 --> 00:02:47.340
the ability to basically create
your own HTML-like interface.

37
00:02:47.340 --> 00:02:51.590
So the only difference is
it has a dash in the name.

38
00:02:51.590 --> 00:02:55.290
You have to have a dash otherwise
it's not a Web Component.

39
00:02:55.290 --> 00:02:58.280
We reserve undashness for
native components.

40
00:02:59.370 --> 00:03:03.126
So custom elements are kind
of a Hallmark feature.

41
00:03:03.126 --> 00:03:06.640
ShadowDOM is just a terrible [LAUGH] word.

42
00:03:06.640 --> 00:03:11.160
But encapsulation is probably
the best way to think of that.

43
00:03:11.160 --> 00:03:16.407
And the way I think of it is almost like
an egg, the egg wants to keep the egg

44
00:03:16.407 --> 00:03:22.190
stuff inside and doesn't want it to go
out and doesn't want anything to get in.

45
00:03:23.550 --> 00:03:27.442
And the same with Shadow DOM
there's a boundary around there and

46
00:03:27.442 --> 00:03:29.468
inside the egg is the Shadow DOM.

47
00:03:29.468 --> 00:03:34.658
I know analogies aren't super great but
that's the one I'm going with.

48
00:03:34.658 --> 00:03:39.816
ES Modules, nay HTML imports.

49
00:03:39.816 --> 00:03:43.520
HTML imports were killed by
Mozilla on December 15, 2014.

50
00:03:43.520 --> 00:03:45.800
I'm not mad about it, yes, I am.

51
00:03:47.300 --> 00:03:52.111
God forbid we could import HTML using
HTML but whatever we're left with

52
00:03:52.111 --> 00:03:57.159
ACMA script modules, which is the sort
of native way to import and export,

53
00:03:57.159 --> 00:04:01.888
JavaScript functions, classes,
all kinds of things, variables,

54
00:04:01.888 --> 00:04:06.240
I guess you could, import and
export anything with ES Modules.

55
00:04:06.240 --> 00:04:11.104
And so a lot of Web Component libraries
have now moved over to this standard,

56
00:04:11.104 --> 00:04:14.908
just because it exists and
it works and it's really great.

57
00:04:17.815 --> 00:04:20.540
Digging in,
template element looks like this.

58
00:04:21.910 --> 00:04:25.560
Pretty basic, you just put HTML in
there and it doesn't render the page.

59
00:04:26.740 --> 00:04:29.150
The template's buddy slot
is kinda interesting.

60
00:04:30.660 --> 00:04:38.080
Slot is used to reveal
content inside a template.

61
00:04:38.080 --> 00:04:41.350
And this only comes into play
when you have a Shadow DOM.

62
00:04:41.350 --> 00:04:46.337
But basically, if you think of that custom
element, you have the custom element, and

63
00:04:46.337 --> 00:04:50.981
then you write stuff on the inside, that
stuff on the inside gets thrown into this

64
00:04:50.981 --> 00:04:53.816
slot element,
that content is revealed there.

65
00:04:53.816 --> 00:04:59.733
And you're not limited to a single slot,
you can have multiple slots and

66
00:04:59.733 --> 00:05:05.179
give them names and then you can
pass things by name into each slot.

67
00:05:05.179 --> 00:05:07.875
So pretty efficient.

68
00:05:07.875 --> 00:05:11.282
I usually typically use
the single slot method and

69
00:05:11.282 --> 00:05:15.945
yeah if you've used view slots,
anyone use views lots?

70
00:05:15.945 --> 00:05:19.026
Same principle here if
you've used view slots.

71
00:05:19.026 --> 00:05:25.115
One also interesting thing, a superpower
is that slot has a slot changed event.

72
00:05:25.115 --> 00:05:27.167
So if the content changes,

73
00:05:27.167 --> 00:05:31.986
somebody uses JavaScript in a weird way,
and changes the slot,

74
00:05:31.986 --> 00:05:37.623
you get a slight change event that you
can react to inside your weapon book.

75
00:05:37.623 --> 00:05:42.221
Custom elements, we talked about this.

76
00:05:42.221 --> 00:05:46.781
Only two rules, needs to have a hyphen,
right, and then you have to register

77
00:05:46.781 --> 00:05:51.075
it using custom elements,
custom elements plural, sorry about that.

78
00:05:51.075 --> 00:05:52.641
define.

79
00:05:52.641 --> 00:05:57.590
And then custom alert, so
this would be a custom alert.

80
00:05:57.590 --> 00:06:02.178
Here I can try to attempt to highlight but
a custom word and then we pass some

81
00:06:02.178 --> 00:06:07.270
attributes to it, and that's gonna change
the way it looks, the way it feels.

82
00:06:07.270 --> 00:06:11.570
And then when we kind of register it,
we kind of put those attributes there.

83
00:06:11.570 --> 00:06:14.406
We're gonna observe those attributes,
see if they change.

84
00:06:14.406 --> 00:06:17.720
And then we're gonna have
a constructor function in our class.

85
00:06:17.720 --> 00:06:19.310
And then we're gonna do more stuff.

86
00:06:19.310 --> 00:06:22.378
And then we define it
here with our class so

87
00:06:22.378 --> 00:06:27.560
that custom element with the hyphen
refers to this JavaScript class.

88
00:06:27.560 --> 00:06:31.630
So when it gets called, it sort of
executes that JavaScript function.

89
00:06:33.230 --> 00:06:34.418
Hopefully, that makes sense.

90
00:06:34.418 --> 00:06:40.190
Shadow DOM, okay,
it's an opaque term to me.

91
00:06:40.190 --> 00:06:44.300
But yeah, encapsulation,
nothing leaks in and leaks out.

92
00:06:44.300 --> 00:06:47.404
And I will say,
this is maybe the biggest superpower and

93
00:06:47.404 --> 00:06:51.633
also the biggest frustration because
you've never used this in a component

94
00:06:51.633 --> 00:06:55.630
context before unless you've
worked with Web Components.

95
00:06:55.630 --> 00:06:58.490
It's sort of a part of
the Web Component spec.

96
00:06:58.490 --> 00:07:02.687
So we're gonna learn about but
it can be frustrating when

97
00:07:02.687 --> 00:07:07.321
stuff isn't happening the way
you expect it or you think,

98
00:07:07.321 --> 00:07:12.234
I have access to Window or
the Document, and suddenly you don't.

99
00:07:12.234 --> 00:07:15.608
And so
what happens here in the Shadow DOM,

100
00:07:15.608 --> 00:07:19.750
we have that custom alert
with the content, right?

101
00:07:21.180 --> 00:07:26.250
And we have Shadow DOM and Shadow DOM
implies the existence of Light DOM, right?

102
00:07:26.250 --> 00:07:28.732
So the Light DOM is
the stuff you write and

103
00:07:28.732 --> 00:07:31.874
the Shadow DOM is the stuff
that component writes.

104
00:07:31.874 --> 00:07:36.248
And so it's gonna put up
an image with a warning icon and

105
00:07:36.248 --> 00:07:40.538
they'll have a slot to
reveal that content, right?

106
00:07:40.538 --> 00:07:45.551
And then the button to close and
I'll kinda get into that later but

107
00:07:45.551 --> 00:07:50.659
you could kinda imagine a situation
where you're handing a design

108
00:07:50.659 --> 00:07:57.415
system off to coworkers and you don't want
them to be in charge of coding the button.

109
00:07:57.415 --> 00:08:01.127
You don't want them to be in charge of
coding the icon system, you wanna give

110
00:08:01.127 --> 00:08:05.600
them a very strict set of icons they can
use so they can't just ruin the website.

111
00:08:05.600 --> 00:08:10.226
So Shadow Dom is a really great way to
apply some fences, you can do this stuff

112
00:08:10.226 --> 00:08:15.610
and then we'll take care of the rest, you
didn't have to do some add event listener.

113
00:08:15.610 --> 00:08:16.820
Yes is there a question?

114
00:08:16.820 --> 00:08:20.444
&gt;&gt; Yes and if this is skipping
ahead just let me know but

115
00:08:20.444 --> 00:08:24.829
so by default the custom element
just lives in the Light DOM and

116
00:08:24.829 --> 00:08:28.538
you do need to run this
.attachshadow to instance or

117
00:08:28.538 --> 00:08:31.959
create a Shadow DOM inside of the,
&gt;&gt; Yes.

118
00:08:31.959 --> 00:08:32.897
&gt;&gt; [INAUDIBLE]
&gt;&gt; Correct.

119
00:08:32.897 --> 00:08:35.717
&gt;&gt; [INAUDIBLE]
&gt;&gt; Good question, yeah, so

120
00:08:35.717 --> 00:08:39.350
Shadow DOM isn't for free exactly.

121
00:08:39.350 --> 00:08:42.140
You have to attach a Shadow
to the custom element.

122
00:08:43.440 --> 00:08:50.231
And Shadows, it's weird,
they can be open or closed, obviously.

123
00:08:50.231 --> 00:08:54.318
[LAUGH] So
closed means it's locked down but

124
00:08:54.318 --> 00:08:59.970
open means you can access
the Shadow DOM from the outside.

125
00:08:59.970 --> 00:09:04.188
So from a parent component or something,

126
00:09:04.188 --> 00:09:08.050
I could talk to the child Shadow root.

127
00:09:09.470 --> 00:09:13.261
But I could talk to the Shadow DOM
from a parent component.

128
00:09:13.261 --> 00:09:17.660
But when it's closed,
you don't have access to that.

129
00:09:17.660 --> 00:09:21.740
And I can show that off if
you remember to remind me.

130
00:09:21.740 --> 00:09:28.838
But yeah, so you can close off
a Shadow root if you need to.

131
00:09:28.838 --> 00:09:34.573
You might think of insecurity, specific
situations or I don't know, Google Maps or

132
00:09:34.573 --> 00:09:40.150
something [LAUGH] they don't want you
futzing around with their Google code.

133
00:09:40.150 --> 00:09:43.577
So they'll just lock it down.

134
00:09:43.577 --> 00:09:46.536
Or reaching too far into stuff they do.

135
00:09:46.536 --> 00:09:53.550
And then delegates focus defaults false,
but this is an accessibility feature.

136
00:09:53.550 --> 00:09:58.728
It's a little bit complex but
it will try to negotiate if your element

137
00:09:58.728 --> 00:10:04.262
is supposed to be focused will an input or
something your custom element,

138
00:10:04.262 --> 00:10:10.273
it'll try to negotiate focus to the first
focal element inside the Shadow DOM.

139
00:10:10.273 --> 00:10:14.865
So if you think of it,
you have an input in the Shadow DOM,

140
00:10:14.865 --> 00:10:18.789
if this is an input and
you click on custom alert,

141
00:10:18.789 --> 00:10:23.959
without that the browser is like,
okay, you click the alert but

142
00:10:23.959 --> 00:10:28.121
you wanna pass that focus
down into the Shadow DOM.

143
00:10:28.121 --> 00:10:30.058
Everyone's set?

144
00:10:30.058 --> 00:10:33.274
All right, ES Modules.

145
00:10:33.274 --> 00:10:37.078
If you've done a course before
you probably run into this.

146
00:10:37.078 --> 00:10:40.660
[LAUGH] Import and export in JavaScript.

147
00:10:42.100 --> 00:10:46.260
And this is surprisingly relatively new.

148
00:10:46.260 --> 00:10:49.890
CSS had imports first,
just wanna call that out.

149
00:10:49.890 --> 00:10:54.991
But JavaScript finally got it,
it's sort of replacing

150
00:10:54.991 --> 00:10:59.548
the node-based requires syntax and
basically,

151
00:10:59.548 --> 00:11:06.273
you can just pull out variables,
you can pull out just the default class,

152
00:11:06.273 --> 00:11:11.200
but you have to set it up in
the code to have an export.

153
00:11:11.200 --> 00:11:14.230
So you can only import
things that have exports and

154
00:11:14.230 --> 00:11:16.330
export things that have imports.

155
00:11:18.020 --> 00:11:24.768
There's also some interesting
superpowers with ES Modules.

156
00:11:24.768 --> 00:11:30.771
To use a module in a browser
just from HTML, you type script,

157
00:11:30.771 --> 00:11:35.971
type equals module source
whatever path to script.

158
00:11:35.971 --> 00:11:38.980
And what's interesting about that,

159
00:11:38.980 --> 00:11:44.056
I learned somewhat recently is
that actually puts your script on

160
00:11:44.056 --> 00:11:48.945
a fast path on a modern JavaScript
engine inside the browser so

161
00:11:48.945 --> 00:11:53.476
you can get faster JavaScript
just by moving to modules.

162
00:11:53.476 --> 00:11:55.100
I didn't know that.

163
00:11:55.100 --> 00:11:59.310
There's no manual that tells you that but
[LAUGH] I'm telling you now.

164
00:11:59.310 --> 00:12:03.242
There's actually a legacy parser
to support Legacy Scripts and

165
00:12:03.242 --> 00:12:05.580
how they sort of handled everything.

166
00:12:05.580 --> 00:12:11.539
So if you use the type equals module you
get sent to this fast path evaluator.

167
00:12:11.539 --> 00:12:16.810
So might be a cool speed boost to
your website just to switch to those.

168
00:12:17.940 --> 00:12:19.496
It might not be super easy.

169
00:12:19.496 --> 00:12:24.800
[LAUGH] Things fall over but the neat
thing about this is imports and exports.

170
00:12:24.800 --> 00:12:27.946
And so
what's neat is I can import a button,

171
00:12:27.946 --> 00:12:32.490
specifically with Web Components I
can import a button.

172
00:12:32.490 --> 00:12:35.840
And then I can call that
button whatever I want.

173
00:12:37.010 --> 00:12:39.575
I can just rename it if I want and

174
00:12:39.575 --> 00:12:45.116
then I can change attributes if I want,
change the default stuff.

175
00:12:45.116 --> 00:12:49.760
So it's super is just a word that
says behave like the parent thing.

176
00:12:49.760 --> 00:12:55.059
So behave like whatever's in this extends,
so now our hero button

177
00:12:55.059 --> 00:13:00.559
will behave like the norm button but
I'm gonna set the size to large.

178
00:13:00.559 --> 00:13:05.066
And so this is a neat thing if you ever
steal elements from somewhere, no,

179
00:13:05.066 --> 00:13:09.589
we don't steal, no one would steal
an element but if you steal elements.

180
00:13:09.589 --> 00:13:13.620
[LAUGH] If you borrow elements
from someplace on the Internet but

181
00:13:13.620 --> 00:13:18.485
you wanna make it look like you coded it
or if your organization wants the same

182
00:13:18.485 --> 00:13:22.990
prefix in your custom element you
can totally do that and it's great.

