WEBVTT

1
00:00:00.570 --> 00:00:02.726
So, a couple examples here.

2
00:00:02.726 --> 00:00:08.500
On the left, not a function, same input,
getting different output there.

3
00:00:08.500 --> 00:00:14.580
Anybody know what, is it total,
deterministic, side effects?

4
00:00:14.580 --> 00:00:19.490
Looks like it's not deterministic, because
the same value gets different outputs.

5
00:00:20.990 --> 00:00:25.310
And on the right, it is a function,
same values, same outputs.

6
00:00:25.310 --> 00:00:28.390
Or same input, same output.

7
00:00:28.390 --> 00:00:31.773
This one's fun.
[LAUGH] So we're gonna turn title into

8
00:00:31.773 --> 00:00:38.178
a URL friendly slug on the left, but
it just throws an error in your face.

9
00:00:38.178 --> 00:00:43.060
So, you could debate whether that's a side
effect, or that means it's not a total, or

10
00:00:43.060 --> 00:00:44.370
whatever else.

11
00:00:44.370 --> 00:00:48.365
We're just saying, hey, if you end up
with the URL that's less than 1, and

12
00:00:48.365 --> 00:00:49.730
where just gonna blow up.

13
00:00:51.010 --> 00:00:54.960
And on the right, even though it's got
a Promise, and it's doing all this stuff,

14
00:00:54.960 --> 00:00:57.985
and it still has an error in there,
we're not throwing the error,

15
00:00:57.985 --> 00:00:59.620
we're returning it as a value.

16
00:01:00.630 --> 00:01:02.002
And that's perfectly acceptable.

17
00:01:02.002 --> 00:01:06.633
We're saying, this function returns
a Promise, that returns either an error or

18
00:01:06.633 --> 00:01:07.610
the URL.

19
00:01:07.610 --> 00:01:13.018
Whereas the other one promised a nice URL,
and then it blew up with an error.

20
00:01:13.018 --> 00:01:20.110
So that violates the mathematicalness
of the function.

21
00:01:20.110 --> 00:01:22.630
And this last one,
it's kind of a fun example.

22
00:01:23.680 --> 00:01:31.230
So, sign up on the left, just, devil may
care, saves the user into a database.

23
00:01:31.230 --> 00:01:33.530
And then we welcome the user in one way or
another.

24
00:01:33.530 --> 00:01:34.418
We don't even know what it's doing.

25
00:01:34.418 --> 00:01:36.531
Can anybody even guess
what's happening there?

26
00:01:36.531 --> 00:01:39.867
It's very side effecty.

27
00:01:39.867 --> 00:01:45.729
And then on the right, we actually
return a function that will go do that.

28
00:01:45.729 --> 00:01:50.627
[LAUGH] So it's totally pure, if I give
it the same attributes every time,

29
00:01:50.627 --> 00:01:54.588
I get the same function out as my output,
that will go do it.

30
00:01:54.588 --> 00:01:59.381
And this whole kicking the side effect
down the road by returning a function,

31
00:01:59.381 --> 00:02:03.655
is a lot of the work arounds we do to
keep everything nice and pure, and

32
00:02:03.655 --> 00:02:05.445
composable within our app.

33
00:02:05.445 --> 00:02:07.975
And then we kinda push
that under the collar,

34
00:02:07.975 --> 00:02:10.650
[LAUGH] you have to deal
with the problems [LAUGH].

35
00:02:10.650 --> 00:02:13.325
So, all right.

36
00:02:13.325 --> 00:02:15.575
We're gonna play function or no function.

37
00:02:16.995 --> 00:02:20.279
So, shout it out, is this a function?

38
00:02:22.792 --> 00:02:23.700
Anyone, Hank?

39
00:02:23.700 --> 00:02:26.612
[LAUGH]
&gt;&gt; No.

40
00:02:26.612 --> 00:02:28.481
&gt;&gt; All right, it is not a function.

41
00:02:28.481 --> 00:02:32.900
If I gave it the same user more than once,
I'm gonna get different outputs, right?

42
00:02:32.900 --> 00:02:34.770
We're actually mutating the user's age.

43
00:02:35.980 --> 00:02:39.920
So, bizarre way to catch their age for
the birthday function, but that's fine.

44
00:02:41.890 --> 00:02:43.840
All right, how about this one,
is this a function?

45
00:02:46.270 --> 00:02:46.990
&gt;&gt; Yes.

46
00:02:46.990 --> 00:02:47.790
&gt;&gt; All right.

47
00:02:47.790 --> 00:02:51.000
That's right, same output, same input.

48
00:02:51.000 --> 00:02:58.532
And, no observable effects, and works for
every possible string, I imagine.

49
00:02:58.532 --> 00:03:00.800
How about this one?

50
00:03:00.800 --> 00:03:02.370
Anybody have an idea?

51
00:03:03.890 --> 00:03:05.493
So innocent.

52
00:03:05.493 --> 00:03:11.220
It's using snake case [LAUGH],
that disqualifies it immediately.

53
00:03:11.220 --> 00:03:12.373
It's Python.

54
00:03:12.373 --> 00:03:15.951
I don't know, anybody?

55
00:03:15.951 --> 00:03:18.849
&gt;&gt; I'm gonna go with no.

56
00:03:18.849 --> 00:03:19.958
&gt;&gt; It's not a function-.

57
00:03:19.958 --> 00:03:21.838
&gt;&gt; It's doing an external call,
that's what I'm going for.

58
00:03:21.838 --> 00:03:23.028
&gt;&gt; That's exactly right.

59
00:03:23.028 --> 00:03:29.158
QuerySelector there is going to go out
into the world and try to find this thing.

60
00:03:29.158 --> 00:03:34.183
Which, if I call it on a Tuesday at 5
o'clock it might work, and then Wednesday

61
00:03:34.183 --> 00:03:39.520
at 1 o'clock it doesn't work, different
outputs, the same header_selector.

62
00:03:41.070 --> 00:03:42.020
So that will not work.

63
00:03:42.020 --> 00:03:46.362
Also, this one,
I think there's two more of these.

64
00:03:46.362 --> 00:03:51.806
[SOUND] [LAUGH] All right,
anyone got an idea on this?

65
00:03:51.806 --> 00:03:55.243
Pure or impure?

66
00:03:55.243 --> 00:03:57.437
Is it a function or not a function?

67
00:03:57.437 --> 00:03:58.229
&gt;&gt; Impure.

68
00:03:58.229 --> 00:04:01.590
&gt;&gt; Impure, cuz of the location search.

69
00:04:01.590 --> 00:04:02.800
&gt;&gt; That's right.

70
00:04:02.800 --> 00:04:05.120
So, again, different output.

71
00:04:05.120 --> 00:04:08.460
If the location search changes,
this function, and

72
00:04:08.460 --> 00:04:10.005
you can notice there's no argument.

73
00:04:10.005 --> 00:04:11.678
[LAUGH] So it's pretty.

74
00:04:11.678 --> 00:04:14.884
In fact, if I just made location
search the argument, this would be

75
00:04:14.884 --> 00:04:18.670
perfectly functional, this would be
a function if I just passed in the search.

76
00:04:19.710 --> 00:04:22.290
&gt;&gt; So that's something to think about
when you're creating functions is,

77
00:04:22.290 --> 00:04:24.040
is this function reliable?

78
00:04:24.040 --> 00:04:25.677
Or am I just doing things?

79
00:04:25.677 --> 00:04:28.280
Am I making a mathematical function or
not?

80
00:04:30.610 --> 00:04:33.330
Here we have a parseQueryString.

81
00:04:33.330 --> 00:04:35.670
This one's a trick line, anybody guess?

82
00:04:35.670 --> 00:04:39.980
We got vars, we got for loops [LAUGH],
it is indeed a function.

83
00:04:39.980 --> 00:04:43.593
You don't have to read it,
I'll just tell you [LAUGH].

84
00:04:43.593 --> 00:04:50.120
Yeah, there's no, even if, look,
we're mutating this thing within here.

85
00:04:50.120 --> 00:04:54.830
But that's totally fine,
the function itself within the boundaries

86
00:04:54.830 --> 00:04:59.820
of parseQueryString will always give you
the same output with the same input.

87
00:04:59.820 --> 00:05:00.320
You got a question?

88
00:05:01.460 --> 00:05:06.140
&gt;&gt; Are we leading into the closure
being part of the definition?

89
00:05:06.140 --> 00:05:08.690
Whether your function is or
isn't function?

90
00:05:08.690 --> 00:05:10.549
&gt;&gt; That's a really good,
that's a good question.

91
00:05:10.549 --> 00:05:13.855
Let me hop over to this for a second.

92
00:05:13.855 --> 00:05:16.180
I just kind of mentioned this.

93
00:05:16.180 --> 00:05:21.600
So, if I do, my App,

94
00:05:21.600 --> 00:05:25.830
and it takes whatever,
jQuery, or whatever else.

95
00:05:25.830 --> 00:05:29.590
And then, we're defining
functions in here like, doThings.

96
00:05:30.680 --> 00:05:37.090
And, what's happening here is,
and we'll return, doThings.

97
00:05:37.090 --> 00:05:41.878
All right, JQuery,
the time of this function's

98
00:05:41.878 --> 00:05:46.588
definition can never change, right?

99
00:05:46.588 --> 00:05:52.130
So, even though we're in a closure,

100
00:05:52.130 --> 00:05:56.960
it's very much like an object, and
I could up here technically say,

101
00:05:56.960 --> 00:06:02.662
jQuery is null [LAUGH], and
that would break everybody inside me.

102
00:06:02.662 --> 00:06:08.740
We're gonna, fast and loosely reasoning
is morally correct, is the slogan here.

103
00:06:08.740 --> 00:06:11.877
Just define it, in terms of,

104
00:06:11.877 --> 00:06:16.400
in this environment can my things change?

105
00:06:16.400 --> 00:06:20.220
Do I have changing variables, will this
give me a different output for input?

106
00:06:20.220 --> 00:06:24.160
If it isn't likely, if that's not
gonna be a case, then it's a function,

107
00:06:24.160 --> 00:06:25.363
don't worry about it [LAUGH].

108
00:06:25.363 --> 00:06:28.414
That was a great question, a lot of
people have that, and they're like, what?

109
00:06:28.414 --> 00:06:34.367
I think before we had an example
where we say something like,

110
00:06:34.367 --> 00:06:40.570
the age limit is 18, and
then we have a function that uses it.

111
00:06:40.570 --> 00:06:44.492
And then we change it to 21 later
in the future, or something.

112
00:06:44.492 --> 00:06:47.228
I mean, again, just use your judgment,

113
00:06:47.228 --> 00:06:51.380
if that never changes at the function,
if it does, it's not.

114
00:06:51.380 --> 00:06:53.300
And you could pass it in, but

115
00:06:53.300 --> 00:06:56.260
I don't want you to have to jump
through hoops that are unnecessary.

