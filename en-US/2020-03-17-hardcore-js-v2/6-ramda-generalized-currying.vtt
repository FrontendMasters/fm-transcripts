WEBVTT

1
00:00:00.140 --> 00:00:01.516
So let's go ahead and

2
00:00:01.516 --> 00:00:05.652
define one last function here
before we go into some exercises.

3
00:00:05.652 --> 00:00:08.418
We'll call it replace, right?

4
00:00:08.418 --> 00:00:14.110
So we'll take our argument order should
be the thing we're gonna some like regex,

5
00:00:14.110 --> 00:00:15.560
right?

6
00:00:15.560 --> 00:00:20.692
The replacement and
then finally, the string.

7
00:00:20.692 --> 00:00:24.361
The data happens last right?

8
00:00:24.361 --> 00:00:28.041
And we'll just go ahead and
say string.replace, and

9
00:00:28.041 --> 00:00:31.803
I'm just wrapping the internal
methods at this point.

10
00:00:31.803 --> 00:00:38.310
But you can see the where we're
going with this is we go.

11
00:00:38.310 --> 00:00:41.640
We have this function, and

12
00:00:41.640 --> 00:00:45.970
what's happening here
is I can actually say,

13
00:00:45.970 --> 00:00:51.742
well why don't I say we have
a function now that replaces all,

14
00:00:51.742 --> 00:00:55.978
how about the HTML slug
from before right?.

15
00:00:55.978 --> 00:00:58.592
I can never remember if it's
like to look back at this thing.

16
00:00:58.592 --> 00:01:04.805
[LAUGH] Yeah, capital W+,
you'll have a problem,

17
00:01:04.805 --> 00:01:09.898
I'm always like lowercase or uppercase.

18
00:01:09.898 --> 00:01:12.790
Actually let's do something even easier.

19
00:01:12.790 --> 00:01:17.633
Let's replace vowels right.

20
00:01:17.633 --> 00:01:24.245
So we'll just carry replace with
a regex that takes AEIOU and

21
00:01:24.245 --> 00:01:28.145
it doesn't matter about the case.

22
00:01:28.145 --> 00:01:34.001
And we'll replace that with,
I don't know, exclamation point.

23
00:01:34.001 --> 00:01:35.058
Great.

24
00:01:35.058 --> 00:01:37.222
We've curried this function.

25
00:01:37.222 --> 00:01:41.397
It's remembering its arguments and we
get a new function called replaceVowels.

26
00:01:41.397 --> 00:01:45.880
We'll call replaceVowels,

27
00:01:45.880 --> 00:01:49.293
on hey, I have words.

28
00:01:49.293 --> 00:01:54.446
See if that works does not work [LAUGH]
always need to install ram duh.

29
00:01:54.446 --> 00:01:56.747
My goodness.
Okay, yarn,

30
00:01:56.747 --> 00:02:02.034
add ram uou all catch that yarn add randa.

31
00:02:02.034 --> 00:02:04.337
&gt;&gt; Inexplicably,
your regex works the first time.

32
00:02:04.337 --> 00:02:05.841
&gt;&gt; There we go.
Yeah.

33
00:02:05.841 --> 00:02:07.739
Now I got two problems.

34
00:02:07.739 --> 00:02:10.262
[LAUGH] So, there we go.

35
00:02:10.262 --> 00:02:13.781
That unfortunately doesn't look very nice,
but

36
00:02:13.781 --> 00:02:17.311
you'all can see that
we're replacing the vows.

37
00:02:17.311 --> 00:02:17.914
Terrific.

38
00:02:17.914 --> 00:02:22.121
And so instead of writing all these
functions explicitly working on

39
00:02:22.121 --> 00:02:26.030
their data, one thing that you
might have noticed is we're not

40
00:02:26.030 --> 00:02:28.264
even mentioning data here or here.

41
00:02:28.264 --> 00:02:32.541
So we got rid of
the argument all together.

42
00:02:32.541 --> 00:02:35.542
That's, actually the data
we're operating on.

43
00:02:35.542 --> 00:02:39.052
And that has big implications for
your program.

44
00:02:39.052 --> 00:02:43.231
If you're naming all the data
with which you're operating on.

45
00:02:43.231 --> 00:02:48.702
You're tying all these functions
specifically to that domain, incidentally.

46
00:02:48.702 --> 00:02:51.943
And you could work on making these
abstract names all over your application

47
00:02:51.943 --> 00:02:54.471
or you could just get rid of
the argument and all together.

48
00:02:54.471 --> 00:02:55.987
We'll talk about that more.

49
00:02:55.987 --> 00:02:58.767
But that style is hinting
at what we call point free,

50
00:02:58.767 --> 00:03:02.697
where we actually don't talk about
the points or the data in our program.

51
00:03:02.697 --> 00:03:06.911
We just combined functions, and
then when we actually call it, so

52
00:03:06.911 --> 00:03:09.635
there's no variable called string here.

53
00:03:09.635 --> 00:03:13.179
I just passed it in and
it ran the function.

54
00:03:13.179 --> 00:03:15.717
So I didn't have to
come up with a name and

55
00:03:15.717 --> 00:03:19.300
oftentimes I end up naming
things specific to my domain,

56
00:03:19.300 --> 00:03:23.794
which is why you end up in this
situation with very specific functions.

57
00:03:23.794 --> 00:03:27.042
Unless we use-
&gt;&gt; What's your point of view on like

58
00:03:27.042 --> 00:03:28.287
the bind method?

59
00:03:28.287 --> 00:03:30.602
&gt;&gt; Yes,
&gt;&gt; Binding arguments in.

60
00:03:30.602 --> 00:03:32.134
&gt;&gt; So that's a good that's a good call.

61
00:03:32.134 --> 00:03:36.469
It's a way to do currying, as you can use,

62
00:03:36.469 --> 00:03:40.093
bind to create a curried function.

63
00:03:40.093 --> 00:03:44.862
Let me try to think of a situation
where we'd wanna do that.

64
00:03:44.862 --> 00:03:47.580
But if you're a reacts programmer,

65
00:03:47.580 --> 00:03:53.117
you're probably familiar with binding
arguments and it is a way to curry.

66
00:03:53.117 --> 00:03:55.565
We don't actually have this almost,

67
00:03:55.565 --> 00:04:00.318
in all this stuff we'll see today
we're not gonna use this keyword once.

68
00:04:00.318 --> 00:04:03.205
So it doesn't actually come up often.

