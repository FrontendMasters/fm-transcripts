WEBVTT

1
00:00:00.240 --> 00:00:03.850
Okay, faster car, fastest car, excellent.

2
00:00:05.900 --> 00:00:07.240
I'll rename this.

3
00:00:08.480 --> 00:00:09.500
All right, what's happening here?

4
00:00:09.500 --> 00:00:14.500
So we start by sorting the car and
the horsepower, all right?

5
00:00:14.500 --> 00:00:17.710
Let's go ahead and
start a composition here.

6
00:00:17.710 --> 00:00:21.658
And we'll do this first and
I'm not gonna do prop, yeah, I am.

7
00:00:21.658 --> 00:00:22.838
Whatever.

8
00:00:22.838 --> 00:00:26.270
[LAUGH] We're having a good time.

9
00:00:27.300 --> 00:00:30.520
And then we're gonna get the last,
right, we got sorted,

10
00:00:30.520 --> 00:00:32.510
gets passed in into last, great.

11
00:00:32.510 --> 00:00:34.050
Good times.

12
00:00:34.050 --> 00:00:38.110
And then, uh-oh, what's happening here?

13
00:00:38.110 --> 00:00:41.860
We're gonna add is fastest to the name.

14
00:00:41.860 --> 00:00:45.340
Okay, so we have to get the prop name.

15
00:00:47.530 --> 00:00:53.340
And then we're going to concat and
this is, lame.

16
00:00:53.340 --> 00:00:55.070
I went through this a little bit earlier.

17
00:00:55.070 --> 00:00:59.690
But you know these helper functions
that just magically pop out

18
00:00:59.690 --> 00:01:03.170
of nowhere to help you solve
the problem are all in the Ramda docs.

19
00:01:03.170 --> 00:01:07.400
I was just counting on myself to
introduce them before you got here.

20
00:01:07.400 --> 00:01:08.340
If I didn't, I apologize.

21
00:01:08.340 --> 00:01:12.850
Looks like we're not quite there, spaces.

22
00:01:12.850 --> 00:01:14.220
Look at that.

23
00:01:14.220 --> 00:01:16.340
It put it on the beginning, not the end.

24
00:01:17.650 --> 00:01:18.875
So check this out.

25
00:01:18.875 --> 00:01:20.665
[LAUGH] That's the theme of the day.

26
00:01:20.665 --> 00:01:23.160
[LAUGH] Wait, let's do this.

27
00:01:23.160 --> 00:01:27.170
We're gonna flip concat and
apply that with that.

28
00:01:28.250 --> 00:01:29.100
That's fine.

29
00:01:29.100 --> 00:01:30.580
That's great.

30
00:01:30.580 --> 00:01:32.668
Who wants to piss off their co-workers?

31
00:01:32.668 --> 00:01:37.871
&gt;&gt; [LAUGH]
&gt;&gt; So why don't we make a append, right?

32
00:01:38.990 --> 00:01:42.850
And we'll call it that.

33
00:01:44.670 --> 00:01:46.140
There we go.

34
00:01:46.140 --> 00:01:47.840
And this is a little bit more digestible.

35
00:01:47.840 --> 00:01:49.258
This is your application logic.

36
00:01:49.258 --> 00:01:54.350
You want to bubble up all the the primary

37
00:01:54.350 --> 00:01:58.240
business like process workflow
through this composition and

38
00:01:58.240 --> 00:02:02.260
it kind of keeps you at a high
level declarative kind of

39
00:02:02.260 --> 00:02:07.150
syntax where you're forced to think about
data flowing through your pipe, right?

40
00:02:07.150 --> 00:02:09.210
And also staying at the same
level of abstraction.

41
00:02:09.210 --> 00:02:11.760
Like if I jumped in here and
twiddled a bit, right, and

42
00:02:11.760 --> 00:02:16.194
I said like xx, modulo two and
did some weird stuff.

43
00:02:16.194 --> 00:02:22.030
[LAUGH] You would see that over
in a large procedural function.

44
00:02:22.030 --> 00:02:25.150
Here we're kind of
restraining ourselves or

45
00:02:25.150 --> 00:02:28.430
constraining ourselves to
this declarative syntax.

46
00:02:29.550 --> 00:02:34.280
A few other words on that is that
this compose does not specify order.

47
00:02:35.590 --> 00:02:37.290
We know that it's going
to go right to left but

48
00:02:37.290 --> 00:02:40.310
the compiler, the language rules does not

49
00:02:40.310 --> 00:02:42.980
really know how it's it's actually
calling these functions under the hood.

50
00:02:42.980 --> 00:02:45.890
We have a lot of freedom and
parallelization.

51
00:02:45.890 --> 00:02:49.910
And that's why we're able
to just rely on Ramda or

52
00:02:49.910 --> 00:02:52.330
Lodash to just fuse those two for us.

53
00:02:52.330 --> 00:02:53.300
I wrote two loops in a row.

54
00:02:53.300 --> 00:02:54.250
So I'm gonna figure it out.

55
00:02:54.250 --> 00:02:55.600
You can make it optimized and they do.

56
00:02:55.600 --> 00:02:57.018
And that's awesome.

57
00:02:57.018 --> 00:03:02.940
If you're writing two for loops, you have
to go back and manually figure out what's

58
00:03:02.940 --> 00:03:06.920
happening in the middle of these loops and
things to be able to combine them.

59
00:03:08.710 --> 00:03:13.530
So it's really nice this high
level declarative is where writing

60
00:03:13.530 --> 00:03:17.810
applications, we'll go
back to our example here.

61
00:03:17.810 --> 00:03:22.240
Hopefully, this one that was this what
we're gonna be doing today makes sense now

62
00:03:22.240 --> 00:03:25.991
a little bit.

63
00:03:25.991 --> 00:03:31.180
So maybe not the bottom line yet,
but we'll talk about that.

64
00:03:32.240 --> 00:03:36.610
But this is where this high level
application specification starts to pay

65
00:03:36.610 --> 00:03:41.430
off with just reading a pipeline,
it wrangles control flow,

66
00:03:41.430 --> 00:03:45.450
it gets rid of state, you're making
generalized things that aren't

67
00:03:45.450 --> 00:03:50.230
specific to their names, and you have tons
of freedom in implementation underneath.

