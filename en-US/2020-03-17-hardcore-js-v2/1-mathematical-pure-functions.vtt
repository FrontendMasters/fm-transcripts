WEBVTT

1
00:00:00.110 --> 00:00:02.060
Functional programming,
it's programming with functions.

2
00:00:02.060 --> 00:00:05.280
That's the definition that
we're gonna use today.

3
00:00:05.280 --> 00:00:10.090
So, programming with functions, we
should probably know what a function is.

4
00:00:10.090 --> 00:00:13.880
So we're gonna define a function

5
00:00:13.880 --> 00:00:16.638
from set theory as a single
valued collection of pairs.

6
00:00:16.638 --> 00:00:20.875
So if you think of it it's just
a set of inputs and outputs.

7
00:00:20.875 --> 00:00:26.174
Just a bunch of, so if I give it a -2,
I get a -1, and so on.

8
00:00:26.174 --> 00:00:31.760
As a counter example, this one on
the right, we take a 1 and we get a D out.

9
00:00:31.760 --> 00:00:32.649
We give it a 2 we get a B out.

10
00:00:32.649 --> 00:00:34.153
And then we get a 2 we get a C out.

11
00:00:34.153 --> 00:00:39.560
We don't know, it's like two
different outputs for the same input.

12
00:00:39.560 --> 00:00:42.350
That disqualifies it
from being a function.

13
00:00:42.350 --> 00:00:44.700
So then it becomes a relation.

14
00:00:44.700 --> 00:00:48.730
So we're gonna focus on one input
to one output deterministically.

15
00:00:49.930 --> 00:00:53.259
So we call the input the domain and
the output the range.

16
00:00:53.259 --> 00:00:56.313
And this is pretty neat.

17
00:00:56.313 --> 00:01:00.645
You can define a function with a table.

18
00:01:00.645 --> 00:01:02.757
You can plot functions.

19
00:01:02.757 --> 00:01:06.307
You can train AI to learn functions.

20
00:01:06.307 --> 00:01:09.803
You can actually turn relations into
functions by providing an ordering and

21
00:01:09.803 --> 00:01:10.790
grabbing the first.

22
00:01:10.790 --> 00:01:17.612
And we could even do stuff like define
functions with just bracket syntax.

23
00:01:17.612 --> 00:01:22.810
[LAUGH] No, I couldn't fit all
of the letters on the slide.

24
00:01:22.810 --> 00:01:24.258
So this top function is not total.

25
00:01:24.258 --> 00:01:25.590
Which we'll talk about here in a minute.

26
00:01:25.590 --> 00:01:28.840
And the bottom one, I could never
actually read it this way, right?

27
00:01:28.840 --> 00:01:32.920
There's like infinitely many numbers and
I can't write all this out.

28
00:01:32.920 --> 00:01:34.100
So it's a little impractical.

29
00:01:34.100 --> 00:01:37.810
But that's why we're in
programming land and

30
00:01:37.810 --> 00:01:40.510
we're gonna do functions with programs.

31
00:01:40.510 --> 00:01:44.048
And in our worlds programming is not math,
right?

32
00:01:44.048 --> 00:01:48.970
And we could look at three little tests
to know if we're writing a function or

33
00:01:48.970 --> 00:01:50.850
if we're not writing a function.

34
00:01:50.850 --> 00:01:52.910
The first one is the function total.

35
00:01:54.180 --> 00:01:56.540
And we'll talk about this in a second.

36
00:01:56.540 --> 00:01:58.380
Second one is it deterministic.

37
00:01:58.380 --> 00:02:02.966
And the third is,
is there any observable side-effects?

38
00:02:02.966 --> 00:02:04.371
We don't want those.

39
00:02:06.149 --> 00:02:10.560
So a total function as opposed to
a partial function means that for

40
00:02:10.560 --> 00:02:14.360
every input there is
a corresponding output.

41
00:02:14.360 --> 00:02:16.870
So that practically,

42
00:02:16.870 --> 00:02:21.100
means if I say increment here on
the left side, and I say, yeah,

43
00:02:21.100 --> 00:02:23.380
I'll take any number, any number,
give me a number, give me a number.

44
00:02:23.380 --> 00:02:24.640
And then, I'll give you the next number.

45
00:02:24.640 --> 00:02:29.740
And the I just blow up with a null,
that's not a total number, [LAUGH] right?

46
00:02:29.740 --> 00:02:33.880
That's an old bit my friend used to be,
ask me anything.

47
00:02:33.880 --> 00:02:35.290
I know everything ask me anything.

48
00:02:35.290 --> 00:02:37.290
And then, he'd be like, well, what's that?

49
00:02:37.290 --> 00:02:38.285
And he'd be like, yep, I know that.

50
00:02:38.285 --> 00:02:41.020
[LAUGH] It's hilarious, anyway.

51
00:02:41.020 --> 00:02:45.211
So [LAUGH] on the right, we got
increment and this one is total, right?

52
00:02:45.211 --> 00:02:48.887
It'll always give you another, within the
bounds of whatever CPU limits and whatnot,

53
00:02:48.887 --> 00:02:49.693
or memory limits.

54
00:02:49.693 --> 00:02:53.231
But remembering limits, but the point is,

55
00:02:53.231 --> 00:02:57.634
we wanna have a corresponding output for
every input.

56
00:02:57.634 --> 00:03:02.220
And on the left, you could give it a four,
three and it would just die on it.

57
00:03:02.220 --> 00:03:02.980
So that's not total.

58
00:03:04.420 --> 00:03:08.050
Incidentally, on the on the right side,
if I just returned 100.

59
00:03:08.050 --> 00:03:10.820
It's a bizarre increment function,
but it's total right?

60
00:03:10.820 --> 00:03:12.601
It always has an output for every input.

61
00:03:12.601 --> 00:03:13.503
[LAUGH] So

62
00:03:13.503 --> 00:03:18.605
it's basically the contract that you
will always have a value in the range.

63
00:03:18.605 --> 00:03:24.290
Versus, oops, not a value [LAUGH]
like an error and all or something.

64
00:03:24.290 --> 00:03:29.360
&gt;&gt; So for the first function there, could
you say that it's total for zero to two?

65
00:03:29.360 --> 00:03:31.150
&gt;&gt; And yep, that's exactly right.

66
00:03:31.150 --> 00:03:35.880
If we were doing a typed language and I
wrote on the left that it took any number

67
00:03:35.880 --> 00:03:38.620
and returns a number,
that would not be total.

68
00:03:38.620 --> 00:03:41.530
But if I gave it an enum of zero,
one, and two and

69
00:03:41.530 --> 00:03:45.200
said it only takes these
then that would be total.

70
00:03:45.200 --> 00:03:47.450
So it depends on how you frame it.

71
00:03:47.450 --> 00:03:51.340
Likewise, if we go back,
if we said on the left side,

72
00:03:51.340 --> 00:03:57.340
what it returns either a number or
a null, then that would make it total.

73
00:03:57.340 --> 00:04:01.571
But it's all about our
claim that this function is

74
00:04:01.571 --> 00:04:05.720
just integers ensure, okay, deterministic.

75
00:04:05.720 --> 00:04:07.690
What does that mean?

76
00:04:07.690 --> 00:04:11.226
Well, if you give it an input
you always get the same output.

77
00:04:11.226 --> 00:04:12.903
I like to call it reliability.

78
00:04:12.903 --> 00:04:17.813
[LAUGH] So,
look at an example on the left.

79
00:04:17.813 --> 00:04:23.837
So time since if I give it
the same comment again and

80
00:04:23.837 --> 00:04:28.580
again, I'm gonna get a new value out.

81
00:04:28.580 --> 00:04:31.860
So it's not the same output for
the same input.

82
00:04:31.860 --> 00:04:33.470
Because the date keeps changing on me.

83
00:04:33.470 --> 00:04:35.640
If I keep creating these new dates, and

84
00:04:35.640 --> 00:04:38.470
I try to get the time since
it's gonna change the output.

85
00:04:39.660 --> 00:04:44.470
On the right side,
it looks much less functional or whatever,

86
00:04:44.470 --> 00:04:47.030
but it's totally deterministic.

87
00:04:47.030 --> 00:04:51.660
If I give it two dates,
it'll always give me the same difference.

88
00:04:51.660 --> 00:04:53.700
So that's deterministic functions.

89
00:04:53.700 --> 00:04:56.220
You always get the same output,
given an input.

90
00:04:57.620 --> 00:04:59.222
And no side effects.

91
00:04:59.222 --> 00:05:02.060
This is last test,
we're gonna re-do, is that,

92
00:05:02.060 --> 00:05:07.070
if you can observe any side effect at
all besides it just competing a value,

93
00:05:07.070 --> 00:05:10.460
then, that disqualifies
it from being a function.

94
00:05:10.460 --> 00:05:14.400
So even something as simple as a log,
which i'm not that strict on this but,

95
00:05:14.400 --> 00:05:19.800
think this is a good demonstration of
like on the left side this is loging.

96
00:05:19.800 --> 00:05:22.420
So it's changing the outside
world in an observable way.

97
00:05:22.420 --> 00:05:24.670
And on the right side,

98
00:05:24.670 --> 00:05:29.150
we're just appending the log as a value,
totally functional.

99
00:05:29.150 --> 00:05:30.430
Everybody's happy.

100
00:05:30.430 --> 00:05:33.290
&gt;&gt; Who decides what is observable and
what isn't?

101
00:05:33.290 --> 00:05:36.160
&gt;&gt; Well, yeah, so that's a good question.

102
00:05:36.160 --> 00:05:38.642
You could always say my
computer got hotter.

103
00:05:38.642 --> 00:05:43.244
[LAUGH] But I would I think it's use
your discretion if you're changing

104
00:05:43.244 --> 00:05:47.462
the screen or the database or
the state of the observable world.

105
00:05:47.462 --> 00:05:49.115
That's why the word
observable is in there.

106
00:05:49.115 --> 00:05:55.470
It's as a user of this program,
am I observing a side effect?

107
00:05:55.470 --> 00:05:59.656
And that yeah, totally can be
philosophical if we want it to be or

108
00:05:59.656 --> 00:06:00.827
just intuitive.

109
00:06:00.827 --> 00:06:06.000
[LAUGH] As far as the things that
you'd see a side effects like writing

110
00:06:06.000 --> 00:06:12.641
to screens, changing database values,
reading files, writing files, whatever.

