WEBVTT

1
00:00:00.018 --> 00:00:03.532
So, we've introduced the type task.

2
00:00:06.675 --> 00:00:09.724
And, love when you mix these.

3
00:00:09.724 --> 00:00:12.864
All right, so [LAUGH].

4
00:00:12.864 --> 00:00:19.059
I'm just gonna leave it there for the
people who, it's gonna bother everyone.

5
00:00:19.059 --> 00:00:25.013
So we've got this big mess of a,
I'm gonna bump this down one more,

6
00:00:25.013 --> 00:00:28.464
and move this over a little bit, okay.

7
00:00:28.464 --> 00:00:31.180
So here's what we're dealing with.

8
00:00:31.180 --> 00:00:34.720
We have this giant thing, and we're
gonna read a file, and then we're gonna

9
00:00:34.720 --> 00:00:38.410
write out the contents, and we're gonn
replace the 3's with the 6's, and

10
00:00:38.410 --> 00:00:41.970
then we're gonna write the new file out,
and it's great.

11
00:00:41.970 --> 00:00:43.030
We got a success.

12
00:00:44.130 --> 00:00:50.348
And unfortunately, I think I might have
actually ran this without knowing it.

13
00:00:50.348 --> 00:00:54.021
Yeah, I gotta config one,
by, all right [LAUGH].

14
00:00:54.021 --> 00:00:54.820
Let's get this out.

15
00:00:56.610 --> 00:01:00.121
So, how would we rewrite
this in terms of Task?

16
00:01:00.121 --> 00:01:08.380
And Task is gonna capture all of our IO,
in node in particular, or the web.

17
00:01:08.380 --> 00:01:12.130
There's an IO Mona that does
almost the exact same thing.

18
00:01:12.130 --> 00:01:15.020
Problem is,
it doesn't really deal with async, and

19
00:01:15.020 --> 00:01:18.720
everything we tend to work with is async.

20
00:01:18.720 --> 00:01:21.860
And instead of bringing in IO and
Task, we're just gonna use Task,

21
00:01:21.860 --> 00:01:27.050
cuz it basically does all
the things IO do, just with async.

22
00:01:27.050 --> 00:01:34.304
So, let's bring this in and
say, let's rewrite this.

23
00:01:34.304 --> 00:01:35.800
All right.

24
00:01:35.800 --> 00:01:40.651
So, the first thing we gotta do, let's
go ahead and make a helper function for

25
00:01:40.651 --> 00:01:42.131
this right off the bat.

26
00:01:42.131 --> 00:01:45.538
So we gonna say readFile, and

27
00:01:45.538 --> 00:01:50.854
that's gonna take some path and
some coding,

28
00:01:50.854 --> 00:01:57.958
and it's gonna return a new task,
Task, reject, resolve.

29
00:01:57.958 --> 00:02:01.750
Now, tasks have different
implementations in different libraries.

30
00:02:02.790 --> 00:02:07.420
I'm bringing in a library
that I've made just for

31
00:02:07.420 --> 00:02:11.400
this class, and I'll make that available.

32
00:02:11.400 --> 00:02:16.500
But, I've been using Folktale,
there's been talk of using Sanctuary.

33
00:02:18.440 --> 00:02:22.495
There's Flutter, basically a lazy promise.

34
00:02:22.495 --> 00:02:29.523
So, let's pass in the path and
the encoding.

35
00:02:29.523 --> 00:02:34.111
And also, there's a way to automate this,
we don't have to, there's from Promise,

36
00:02:34.111 --> 00:02:35.740
Task from Promise.

37
00:02:35.740 --> 00:02:39.220
So we can just turn it, and we can
turn a call back into a Promise, and

38
00:02:39.220 --> 00:02:42.400
a Promise into a Task, or
we can call back right into a Task.

39
00:02:42.400 --> 00:02:45.239
I'm just doing this manually so
you can see how it works.

40
00:02:45.239 --> 00:02:48.200
So if you have an error,
we'll reject with the err.

41
00:02:48.200 --> 00:02:52.400
And if we have this, otherwise,
we'll have success with the contents.

42
00:02:52.400 --> 00:02:54.450
And there you have it.

43
00:02:56.600 --> 00:02:57.580
So there's readFile.

44
00:02:59.280 --> 00:03:01.110
And, before we go any further,

45
00:03:01.110 --> 00:03:04.480
I'm just gonna do the same with writeFile,
because it's just a pain to define these.

46
00:03:05.580 --> 00:03:09.620
And, I think I do have the Task
from promised on this library, but

47
00:03:09.620 --> 00:03:11.480
I'm still gonna rewrite it.

48
00:03:11.480 --> 00:03:13.832
Mainly cuz it's the exact
same code [LAUGH].

49
00:03:13.832 --> 00:03:16.369
WriteFile, path, contents.

50
00:03:16.369 --> 00:03:20.080
WriteFile, path, contents.

51
00:03:20.080 --> 00:03:23.275
Great, great, okay.

52
00:03:23.275 --> 00:03:25.230
So, how do we use these?

53
00:03:26.870 --> 00:03:30.190
Let's leave this on the screen and
give ourselves some space,

54
00:03:30.190 --> 00:03:31.930
and rewrite this stuff.

55
00:03:31.930 --> 00:03:40.064
So const app will be a function
that starts by reading the file,

56
00:03:40.064 --> 00:03:44.831
readFile, and we gave it the stuff.

57
00:03:44.831 --> 00:03:48.218
And now we have a Task with the contents.

58
00:03:48.218 --> 00:03:52.119
So let's go ahead and
map over that and get the contents.

59
00:03:52.119 --> 00:03:55.713
And, don't wanna throw errors or
logs that,

60
00:03:55.713 --> 00:03:59.500
I think that log in there
was left in by accident.

61
00:04:01.410 --> 00:04:04.934
Now we wanna replace any 3's with the 6.

62
00:04:04.934 --> 00:04:09.703
Just so we all know,
the config.json looks like this,

63
00:04:09.703 --> 00:04:16.614
it's like port: 3000, that's all,
so we wanted to say port: 6000.

64
00:04:16.614 --> 00:04:20.030
Okay, so read the file in,
and we'll run this part.

65
00:04:23.210 --> 00:04:26.140
Then, we wanna write a new file.

66
00:04:26.140 --> 00:04:27.390
Cool.

67
00:04:27.390 --> 00:04:29.985
So, what we do, a chain.

68
00:04:29.985 --> 00:04:33.381
So you have the new contents, and

69
00:04:33.381 --> 00:04:38.488
then we'll write the file
with the new contents.

70
00:04:38.488 --> 00:04:39.620
Gotta give it a path.

71
00:04:39.620 --> 00:04:41.850
So config1.json.

72
00:04:43.440 --> 00:04:49.740
And finally,
we wanna log('success!'), I suppose.

73
00:04:49.740 --> 00:04:52.102
So we'll just, success!

74
00:04:52.102 --> 00:04:56.713
And actually, logging can be done
in a Task to keep it pure, but

75
00:04:56.713 --> 00:04:59.240
I don't wanna just do it outside.

76
00:04:59.240 --> 00:05:04.460
So our app is totally nice and clean, and
pure, and nothing is just gonna happen.

77
00:05:04.460 --> 00:05:08.318
If I were to map log right here,
console.log, success,

78
00:05:08.318 --> 00:05:13.695
that's gonna run during the time of
construction, not run during the runtime.

79
00:05:13.695 --> 00:05:17.250
I would have to wrap this in another
Task right there to make it pure.

80
00:05:18.260 --> 00:05:24.520
So what I'm gonna do, so
I'm gonna call app[].fork(console.error.

81
00:05:24.520 --> 00:05:31.090
And then we'll log, 'success!' down here,
it should be console.log.

82
00:05:33.830 --> 00:05:35.060
Awesome.

83
00:05:35.060 --> 00:05:37.280
All right, do we have a config1?

84
00:05:37.280 --> 00:05:38.680
We do.

85
00:05:38.680 --> 00:05:44.168
Just got written at 2:56 [LAUGH],
and now it's 6,000.

86
00:05:44.168 --> 00:05:45.732
Cool, awesome.

87
00:05:45.732 --> 00:05:48.270
But let's take a look
at what happened here.

88
00:05:50.010 --> 00:05:55.756
So we took this beast [LAUGH], and kinda
broke it down into, instead of callbacks,

89
00:05:55.756 --> 00:06:01.358
and mixing our logic amongst all this
stuff, and throwing errors, whatever.

90
00:06:01.358 --> 00:06:03.313
We have this nice, clean control flow.

91
00:06:03.313 --> 00:06:07.900
And you might be like, well, we have
promises, I'll just do that with promises.

92
00:06:07.900 --> 00:06:10.970
Well, promises were inspired by functional
programming in the first place,

93
00:06:10.970 --> 00:06:12.890
that's where they came from.

94
00:06:12.890 --> 00:06:15.790
But also, this does it in a lazy way.

95
00:06:15.790 --> 00:06:20.710
So, let's say I wanna continue my
computation down there, I can do that and

96
00:06:20.710 --> 00:06:21.930
nothing will happen.

97
00:06:21.930 --> 00:06:26.469
In fact, what if I wanna
combine it with another app?

98
00:06:26.469 --> 00:06:29.542
And I wanna run those in parallel, or
I wanna put them in a tree data structure,

99
00:06:29.542 --> 00:06:32.100
and follow them down the tree,
and run the right one.

100
00:06:32.100 --> 00:06:35.650
I can do a lot of amazing
things if I just make it lazy.

101
00:06:35.650 --> 00:06:37.911
Still trying to make that case,
not sure if I'm succeeding.

102
00:06:37.911 --> 00:06:41.410
[LAUGH] But anyhow, that's where we're at.

