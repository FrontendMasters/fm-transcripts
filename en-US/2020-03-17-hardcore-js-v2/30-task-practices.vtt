WEBVTT

1
00:00:00.260 --> 00:00:04.250
It turns out what I've been talking about
this whole time about how some of these

2
00:00:04.250 --> 00:00:06.060
are confusing,
this one's pretty confusing.

3
00:00:06.060 --> 00:00:10.140
So don't feel bad if you weren't able
to just run through these quick,

4
00:00:10.140 --> 00:00:12.150
it is probably my fault.

5
00:00:12.150 --> 00:00:18.015
But let's go through it, and hopefully
we'll learn something, and improve these.

6
00:00:18.015 --> 00:00:25.680
So right off the bat, the first one
we wanna call to uppercase and title.

7
00:00:25.680 --> 00:00:30.960
The result of this,
getPost returns us a task of a post.

8
00:00:30.960 --> 00:00:33.830
So if I wanna get the title of the post,
I can map over it.

9
00:00:33.830 --> 00:00:37.290
Get to the post, and newpost.title.

10
00:00:37.290 --> 00:00:42.775
And I can choose to then map again
on the title to uppercase it,

11
00:00:42.775 --> 00:00:49.290
uppercase, Or
I could decide to do it in one go.

12
00:00:50.730 --> 00:00:54.280
And that follows from that property
we were talking about before.

13
00:00:54.280 --> 00:01:01.172
Two maps, a map followed by a map can
be the composition of both functions.

14
00:01:01.172 --> 00:01:04.913
Composition inside one map, which is cool.

15
00:01:04.913 --> 00:01:10.347
So we can use that to decide whether to
break this apart for a more of a separate.

16
00:01:10.347 --> 00:01:11.401
I don't care about the post.

17
00:01:11.401 --> 00:01:17.238
If I decided I never wanted to post after
that, and I wanted to contain it, so

18
00:01:17.238 --> 00:01:22.730
that it's gone from my memory, and
I can focus on just the title.

19
00:01:22.730 --> 00:01:23.690
This might be the way to go.

20
00:01:24.860 --> 00:01:28.902
Or if I just wanna deal with it,
one guy could do that, no big deal.

21
00:01:28.902 --> 00:01:33.825
It may be a performance boost, maybe
if you're doing this 100 million times.

22
00:01:33.825 --> 00:01:35.303
&gt;&gt; It's failing me.

23
00:01:35.303 --> 00:01:37.895
I don't know if it's-
&gt;&gt; I had the same problem.

24
00:01:37.895 --> 00:01:41.835
I had to refresh my code pen
before it actually ran it.

25
00:01:41.835 --> 00:01:44.955
And I was like, why is going on?

26
00:01:44.955 --> 00:01:45.955
I'm starting to sweat.

27
00:01:45.955 --> 00:01:49.028
I was like, everybody's failing,
and it's my fault.

28
00:01:49.028 --> 00:01:56.170
[LAUGH] all right, so
then we go to comments for posts.

29
00:01:56.170 --> 00:01:59.120
And this is the one that
I think is a little bit

30
00:02:00.300 --> 00:02:02.840
not as defined as it should have been.

31
00:02:02.840 --> 00:02:06.740
The idea is that you wanna pass the post,
right?

32
00:02:06.740 --> 00:02:12.000
So we map over it, we get a post, and
we wanna pass that into getComments.

33
00:02:12.000 --> 00:02:14.418
So we'll get the comments with that post.

34
00:02:14.418 --> 00:02:18.360
Then we wanna assign the comments
returned to the post, so

35
00:02:18.360 --> 00:02:24.280
that we have a t.comments,
t being the post with a terrible name.

36
00:02:24.280 --> 00:02:28.230
All right, so [LAUGH] with a functional
programmer name, very, very important.

37
00:02:29.510 --> 00:02:33.980
So we go to this, use two spaces for
tabs, and it's killing me.

38
00:02:35.490 --> 00:02:41.240
But if we weren't both in scope, remember,
we can just nest it in enclosure.

39
00:02:41.240 --> 00:02:44.100
We'll just map over that to get comments.

40
00:02:44.100 --> 00:02:48.740
Now that we have both posts and comments,
you can kind of see this nesting.

41
00:02:48.740 --> 00:02:51.190
They've got two variables
in play right now.

42
00:02:52.250 --> 00:02:53.770
And then we'll go ahead and say, well,

43
00:02:53.770 --> 00:02:59.040
it's just object,
assign comments to the post.

44
00:02:59.040 --> 00:03:03.960
However, we've done a task,
so we have a task of post.

45
00:03:05.050 --> 00:03:06.140
Then we get comments.

46
00:03:06.140 --> 00:03:08.760
Again, that's a task of comments.

47
00:03:08.760 --> 00:03:10.580
So then at the end of all this map,

48
00:03:10.580 --> 00:03:15.070
we end up with a task of a task
of this post with comments.

49
00:03:15.070 --> 00:03:19.450
So what we'll do is just change
this map to a chain work.

50
00:03:21.080 --> 00:03:26.360
And that flattens this down and
gives us our answer.

51
00:03:27.630 --> 00:03:29.630
And is not happy.

52
00:03:31.065 --> 00:03:36.510
So this could be made
a little bit nicer to read.

53
00:03:36.510 --> 00:03:40.461
You could try to, I don't know,

54
00:03:40.461 --> 00:03:44.703
this is fine, fine, fine, fine.

55
00:03:44.703 --> 00:03:47.413
But the point is that if we
need multiple things, and

56
00:03:47.413 --> 00:03:51.107
this is where async await, if you
wanted to make it work with any monad,

57
00:03:51.107 --> 00:03:54.610
it might come in handy if
you have multiple variables.

58
00:03:54.610 --> 00:03:58.885
So elsewhere, nesting kind of tells
you how deep your context is.

59
00:03:58.885 --> 00:04:01.370
So pick pick your poison.

60
00:04:02.400 --> 00:04:05.050
All right, so there's that one.

61
00:04:07.550 --> 00:04:11.360
Let's go to last one, nice and easy.

62
00:04:11.360 --> 00:04:17.310
Wrap location href in a task
to make it pure, mathematical.

63
00:04:17.310 --> 00:04:20.131
So let's go ahead and do that.

64
00:04:20.131 --> 00:04:27.300
We'll say task, and I, again, I think
I messed up a little bit here in that.

65
00:04:29.130 --> 00:04:32.852
Some of the other things I've done
actually defined task up here.

66
00:04:32.852 --> 00:04:36.050
But this one brings it in from folktale,
and folktale,

67
00:04:36.050 --> 00:04:39.193
which I haven't done all
the way up until now, is new.

68
00:04:39.193 --> 00:04:45.890
So there's me setting you up for failure,
and I apologize for that [LAUGH].

69
00:04:45.890 --> 00:04:48.410
But it looks like this can never fail,
right?

70
00:04:48.410 --> 00:04:51.470
If I try to get location href,
it's gonna be there.

71
00:04:51.470 --> 00:04:54.610
So I'm just gonna ignore
the edge right here.

72
00:04:54.610 --> 00:04:58.330
But, if it were,
maybe we could do it in a try catch,

73
00:04:58.330 --> 00:05:00.580
and we'll talk about that
situation in a minute.

74
00:05:00.580 --> 00:05:02.920
We'll circle back on that one.

75
00:05:02.920 --> 00:05:03.670
But here we are.

76
00:05:05.170 --> 00:05:10.660
We just wrapped it in test,
cool, nothing too fancy there.

77
00:05:10.660 --> 00:05:16.334
We could also maybe wrap location in
a task, and then call .href on it.

78
00:05:16.334 --> 00:05:22.110
But I have a suspicion that if you call
.href, maybe something fancy is happening.

79
00:05:22.110 --> 00:05:25.460
If you set text content on a node,
that is a side effect, but

80
00:05:25.460 --> 00:05:26.936
it doesn't look like it.

81
00:05:26.936 --> 00:05:28.019
It looks like you're
just setting a property.

82
00:05:28.019 --> 00:05:31.830
Sometimes you have to kind of know
if it's a side effect or not.

83
00:05:31.830 --> 00:05:36.750
Yeah, so let's just go ahead and
start right here.

84
00:05:38.070 --> 00:05:41.307
What we're gonna do, so this is fun.

85
00:05:43.902 --> 00:05:44.999
It has me wrap this thing in a task.

86
00:05:44.999 --> 00:05:49.214
And if I do task,
the new task on this one,

87
00:05:49.214 --> 00:05:54.276
apologies, regress, and
we just resolve this,

88
00:05:54.276 --> 00:05:58.030
and it passes, and things are good.

89
00:05:58.030 --> 00:06:00.660
I wonder if I take away the new,
if it still works?

90
00:06:00.660 --> 00:06:02.060
It's not happy.

91
00:06:02.060 --> 00:06:02.740
What are you doing wrong?

92
00:06:03.810 --> 00:06:04.999
Get href?

93
00:06:04.999 --> 00:06:09.316
Look, check this out,
as well I was gonna show you.

94
00:06:09.316 --> 00:06:13.510
To get href,
it could be a function, right?

95
00:06:13.510 --> 00:06:16.980
And then all of a sudden, it works,
or it could just be a value.

96
00:06:16.980 --> 00:06:19.310
I mean, this thing hasn't run.

97
00:06:21.540 --> 00:06:23.130
Same exact results, right?

98
00:06:23.130 --> 00:06:24.940
It has the function in the task.

99
00:06:24.940 --> 00:06:28.876
So you're saving yourself
an object instance, in this case.

100
00:06:28.876 --> 00:06:31.100
But perhaps maybe if this was
an already resolved task,

101
00:06:31.100 --> 00:06:33.920
then it would just continue
to give you the same value.

102
00:06:33.920 --> 00:06:35.949
Maybe you want a new one,
so you can do that.

103
00:06:37.010 --> 00:06:40.770
I typically do this not to be on
the safe side, to be honest, but

104
00:06:40.770 --> 00:06:41.760
that's kind of interesting.

105
00:06:43.100 --> 00:06:48.160
The other interesting thing here is we're
about to talk about, if I wanted to do

106
00:06:48.160 --> 00:06:53.940
like a try catch in here, and
if this blew up, call the reject.

107
00:06:55.620 --> 00:06:59.791
And I could do that manually, or
I could use either as try catch.

108
00:06:59.791 --> 00:07:05.658
But what I'd end up with is a task
with an either with whatever,

109
00:07:05.658 --> 00:07:08.770
like null, or the actual value.

110
00:07:09.900 --> 00:07:14.510
And the task has the rejections side, and

111
00:07:14.510 --> 00:07:17.943
we actually don't call that.

112
00:07:17.943 --> 00:07:20.864
This would just be basically null,
cuz this never gets called,

113
00:07:20.864 --> 00:07:24.080
because the try catch would be
inside the thing over here.

114
00:07:24.080 --> 00:07:27.530
These kind of nested effects is what
we're gonna talk about a little bit,

115
00:07:27.530 --> 00:07:32.370
and then we'll build an app to
just kind of use this stuff.

116
00:07:32.370 --> 00:07:32.940
As promised,

117
00:07:32.940 --> 00:07:37.020
I wanted to quickly touch on that of
method before we go into nested effects.

118
00:07:38.040 --> 00:07:45.606
So if I have a task of 2,
that just puts 2 in there, right?

119
00:07:45.606 --> 00:07:50.060
And I can fork from there,
I can map from here, right?

120
00:07:50.060 --> 00:07:55.667
I've got 2, and
I can start doing 2 times 2, so on.

121
00:07:55.667 --> 00:07:59.190
And we'll fork that console.log,
blah, blah, blah.

122
00:07:59.190 --> 00:08:01.630
Great, so that's cool.

123
00:08:01.630 --> 00:08:03.650
I can just pop a value in there.

124
00:08:03.650 --> 00:08:08.930
I don't have to use its specific
constructor to get it to do that.

125
00:08:11.050 --> 00:08:15.414
It ignores the error side,
and just starts with success,

126
00:08:15.414 --> 00:08:22.060
cuz I'm just putting a value in there, and
we're just gonna start mapping over it.

127
00:08:22.060 --> 00:08:25.200
If I started with reject, none of this
would happen, and it would be weird.

128
00:08:26.290 --> 00:08:31.580
So for our intuition,
of should pick the successful side.

129
00:08:31.580 --> 00:08:36.790
And we kinda define this loosely,
as the default minimal context.

130
00:08:38.370 --> 00:08:42.150
ID is just box, ID should have an of,
and it doesn't have.

131
00:08:42.150 --> 00:08:43.062
It's not forked, okay, yeah.

132
00:08:43.062 --> 00:08:48.869
And extracts here.

133
00:08:48.869 --> 00:08:53.340
Yeah, it's not fold here,
sorry about that.

134
00:08:53.340 --> 00:08:54.380
Either has that, right?

135
00:08:54.380 --> 00:08:58.905
We can fold it down into console.log.

136
00:08:58.905 --> 00:09:05.340
Console.log, should have done
this one first, and so on.

137
00:09:05.340 --> 00:09:10.310
So of in JavaScript is a interface

138
00:09:10.310 --> 00:09:14.370
to program to,
in order to get your value inside a type.

139
00:09:14.370 --> 00:09:20.060
In fact, if we call list.of, fold on this,

140
00:09:20.060 --> 00:09:23.320
I love this [LAUGH] with a toJS.

141
00:09:23.320 --> 00:09:27.390
So I'm bringing in a mutable JS as of now.

142
00:09:27.390 --> 00:09:32.450
And I'm bringing my extended form
to kinda show some extra things.

143
00:09:32.450 --> 00:09:36.570
We're not gonna do exercises,
I just want you to be aware of some of

144
00:09:36.570 --> 00:09:39.380
these extra APIs that
you might need to know.

145
00:09:39.380 --> 00:09:45.080
You can do 99% of everything with
what you know, as of right now.

146
00:09:45.080 --> 00:09:46.550
But you're gonna run into some cases.

147
00:09:46.550 --> 00:09:52.078
And these cases typically are centered
around nested, different types.

148
00:09:52.078 --> 00:09:55.260
So I wanna talk about them for a second,
and then we'll build some stuff.

149
00:09:55.260 --> 00:09:56.667
But is everybody good with of?

150
00:09:56.667 --> 00:10:00.122
Just pop it into type,
don't worry about its constructor,

151
00:10:00.122 --> 00:10:04.860
and it's an interface to program to,
we call that appointed functor, a functor,

152
00:10:04.860 --> 00:10:06.639
the way to put a point in there.

153
00:10:06.639 --> 00:10:11.951
And then a monad,
just to just to finish up here

154
00:10:11.951 --> 00:10:19.216
is is if I chain things,
I have to put this back in a list, right?

155
00:10:19.216 --> 00:10:21.408
Because I'm chaining.

156
00:10:24.453 --> 00:10:31.201
So we define a monad as a pointed
functor with the chain.

157
00:10:31.201 --> 00:10:36.188
So a monad is not just chain, it also has
this method, because we're dropping out

158
00:10:36.188 --> 00:10:40.270
of the type, and we need a way
to put something back in a type.

159
00:10:40.270 --> 00:10:44.090
If we don't have that in a nice
clean interface like of,

160
00:10:44.090 --> 00:10:46.310
it breaks the whole interface.

161
00:10:46.310 --> 00:10:50.100
So those are the last
kind of things there.

162
00:10:50.100 --> 00:10:53.780
I honestly probably won't be using of
all that much, but it's good to know.

