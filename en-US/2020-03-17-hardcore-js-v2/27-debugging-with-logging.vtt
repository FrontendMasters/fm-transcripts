WEBVTT

1
00:00:00.460 --> 00:00:03.396
See you have some login to
string stuff in this file,

2
00:00:03.396 --> 00:00:05.812
can you show how to use that for
debugging?

3
00:00:05.812 --> 00:00:09.063
&gt;&gt; Yes, check it out.

4
00:00:09.063 --> 00:00:16.539
So, to string actually just [LAUGH]
calling string around things,

5
00:00:16.539 --> 00:00:21.746
so if we do see a console.log(Right(2))

6
00:00:21.746 --> 00:00:26.828
hopefully what happens here, where are we?

7
00:00:26.828 --> 00:00:28.510
Wow, that's fine.

8
00:00:28.510 --> 00:00:32.297
&gt;&gt; I think you can just
click the console and-

9
00:00:32.297 --> 00:00:35.884
&gt;&gt; That's a much better way to do it thank

10
00:00:35.884 --> 00:00:38.357
you, okay where's the?

11
00:00:38.357 --> 00:00:39.339
&gt;&gt; In the bottom.

12
00:00:39.339 --> 00:00:40.974
&gt;&gt; Lower left.
&gt;&gt; Lower left down.

13
00:00:40.974 --> 00:00:41.728
&gt;&gt; All the way.

14
00:00:41.728 --> 00:00:43.885
&gt;&gt; All the way, bottom left corner.

15
00:00:43.885 --> 00:00:46.643
&gt;&gt; There it is, it's hidden from me, cool.

16
00:00:46.643 --> 00:00:51.400
Let's tie these tests and
bring this up, I have to coerce it

17
00:00:51.400 --> 00:00:56.081
into a string by calling a string
around it, so there's that.

18
00:00:56.081 --> 00:01:00.150
And now you get a Right(2),
I can call to string but

19
00:01:00.150 --> 00:01:04.776
if I put the string type around
it then it does the same thing.

20
00:01:04.776 --> 00:01:07.203
It's kind of a fun trick
if you have a null,

21
00:01:07.203 --> 00:01:10.724
you can't call a null to string
week put string around a null.

22
00:01:10.724 --> 00:01:14.483
&gt;&gt; I'm more wondering
inside you're chaining.

23
00:01:14.483 --> 00:01:19.947
&gt;&gt; What's that, yes, exactly so
that was the first one was easier.

24
00:01:19.947 --> 00:01:23.575
So here we are, and we're working with
this and we're like, you know what?

25
00:01:23.575 --> 00:01:28.215
I don't know what's going on here,
I'm just gonna map log,

26
00:01:28.215 --> 00:01:33.033
and what's happening here is log,
it was LogIt, sorry, but

27
00:01:33.033 --> 00:01:37.607
LogIt, if I can find it takes the x logs,
it returns it back.

28
00:01:37.607 --> 00:01:42.388
So if I'm mapping over it,
I can actually just LogIt and

29
00:01:42.388 --> 00:01:47.474
there we go, and
I can sprinkle these through if I'd like,

30
00:01:47.474 --> 00:01:51.540
I can kinda say,
well what do I have here and

31
00:01:51.540 --> 00:01:56.067
what do I have there, and
it doesn't wanna stay up.

32
00:01:56.067 --> 00:01:59.317
[LAUGH] That's fine, [SOUND] okay, but

33
00:01:59.317 --> 00:02:05.421
that's how you'll do that I mean
that's the same thing as doing this.

34
00:02:05.421 --> 00:02:11.416
Okay, but you could also do this
cuz it returns it back, right?

35
00:02:11.416 --> 00:02:14.831
So you can see what I'm dealing with, and

36
00:02:14.831 --> 00:02:18.449
it looks like I have a left of that,
so cool.

37
00:02:18.449 --> 00:02:23.386
So those are useful tools in
the middle of your composition to just

38
00:02:23.386 --> 00:02:26.902
kind of inspect the inside or
outside, cool.

39
00:02:26.902 --> 00:02:28.695
Anybody else.

40
00:02:28.695 --> 00:02:33.201
&gt;&gt; Can we take off on the log method?.

41
00:02:33.201 --> 00:02:37.888
I've used the similar thing to ship
out to like a write only database

42
00:02:37.888 --> 00:02:42.369
to keep a perimeter a durable
log of functional operations.

43
00:02:42.369 --> 00:02:43.543
&gt;&gt; Interesting view.

44
00:02:43.543 --> 00:02:45.721
&gt;&gt; The question is more
of a technical one,

45
00:02:45.721 --> 00:02:49.188
is there a point at which you're
starting to fork your threads.

46
00:02:49.188 --> 00:02:51.646
Is there a point in which this
becomes too cumbersome or

47
00:02:51.646 --> 00:02:54.811
you need to re-architect if you're
trying to insert a bunch of logs?

48
00:02:54.811 --> 00:02:55.413
&gt;&gt; Yeah.

49
00:02:55.413 --> 00:02:59.115
&gt;&gt; When you need a similar kind of like
shutoff and side effect functionality.

50
00:02:59.115 --> 00:03:05.052
&gt;&gt; Right, so there's the writer monad
which we're not gonna talk about today but

51
00:03:05.052 --> 00:03:11.441
provides that kind of functionality, but
it's still almost exactly the same cost.

52
00:03:11.441 --> 00:03:14.109
So it doesn't really solve the problem,

53
00:03:14.109 --> 00:03:17.244
you could define your own composition,
right?

54
00:03:17.244 --> 00:03:21.464
So that would be a possibility
make some kind of

55
00:03:21.464 --> 00:03:26.226
composition that keeps a log on the side,
perhaps,

56
00:03:26.226 --> 00:03:31.112
maybe some state like monad
that threads it through.

57
00:03:31.112 --> 00:03:34.325
But I think there's there's
probably some ways to do it that

58
00:03:34.325 --> 00:03:37.226
is less just getting in there and
inserting the stuff.

59
00:03:37.226 --> 00:03:39.124
[LAUGH] But
those are two that come to mind,

60
00:03:39.124 --> 00:03:42.553
I think I'd have to work through a couple
cuz neither of them seemed great.

61
00:03:42.553 --> 00:03:48.420
[LAUGH] But we could probably get to
the solution by trying starting there.

