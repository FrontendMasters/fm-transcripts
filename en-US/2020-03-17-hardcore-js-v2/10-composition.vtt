WEBVTT

1
00:00:00.330 --> 00:00:01.910
Let's see.
We're going to talk about composition.

2
00:00:01.910 --> 00:00:05.190
I'm going to bring in compose
actually no we'll define it first.

3
00:00:05.190 --> 00:00:07.000
Let's make some functions.

4
00:00:07.000 --> 00:00:10.170
Let's make you know to upper

5
00:00:12.430 --> 00:00:16.960
x in x or string, the string to uppercase.

6
00:00:19.330 --> 00:00:21.572
Make another function exclaim.

7
00:00:21.572 --> 00:00:28.230
We'll just, string close that these
are all my favorite functions.

8
00:00:28.230 --> 00:00:30.300
I use them all the time.

9
00:00:30.300 --> 00:00:34.650
And let's see, maybe we can do one more.

10
00:00:34.650 --> 00:00:36.440
Let's do first.

11
00:00:36.440 --> 00:00:39.440
Take a bunch of stuff and
just grab the first thing.

12
00:00:39.440 --> 00:00:41.160
Great.
All right, so

13
00:00:41.160 --> 00:00:45.000
we have some functions here
we got add to upper exclaim.

14
00:00:45.000 --> 00:00:50.060
And we're gonna do is
talk about composition.

15
00:00:51.470 --> 00:00:53.490
So define composition first.

16
00:00:53.490 --> 00:00:54.950
So compose.

17
00:00:54.950 --> 00:01:01.970
Compose takes two functions an f and
a g g and is defined as f of g of x.

18
00:01:01.970 --> 00:01:05.220
So it takes it returns
a new function takes an x.

19
00:01:05.220 --> 00:01:09.910
So in math, you would see it written
like that compose functions f and g.

20
00:01:11.740 --> 00:01:14.280
Here, it's fairly similar.

21
00:01:14.280 --> 00:01:18.710
So you'd say f composed
with g is just f of g

22
00:01:18.710 --> 00:01:23.460
with the x there, something like that.

23
00:01:23.460 --> 00:01:27.770
So, this is kind of interesting.

24
00:01:27.770 --> 00:01:31.330
All we're saying is,
I take an f and I take a g and

25
00:01:31.330 --> 00:01:33.210
I'm going to nest this function call.

26
00:01:35.210 --> 00:01:39.340
Didn't highlight right, so I'm a little
worried but looks looks like it'd be fine.

27
00:01:39.340 --> 00:01:44.518
So let's call to upper and exclaim.

28
00:01:44.518 --> 00:01:49.142
Now, what's gonna happen is we'll

29
00:01:49.142 --> 00:01:53.625
call this shout to tears for fears.

30
00:01:53.625 --> 00:01:58.410
All right, how's even do that tears.

31
00:01:58.410 --> 00:02:01.000
Okay, tears.

32
00:02:01.000 --> 00:02:05.170
[LAUGH] That's that's what I
bring forth to you in this class.

33
00:02:05.170 --> 00:02:11.820
So what's happening is each of these, this
function to upper becomes this g, right.

34
00:02:11.820 --> 00:02:13.870
Exclaim becomes f.

35
00:02:13.870 --> 00:02:18.020
So if we were actually like kind of fill
this out specialize to exclaim in to upper

36
00:02:18.020 --> 00:02:24.070
it would look like to upper and
exclaim clean and

37
00:02:24.070 --> 00:02:26.490
then since those are fixed or that.

38
00:02:26.490 --> 00:02:30.540
So it's just nesting
right word is nest word.

39
00:02:31.840 --> 00:02:37.200
So, we're able to kind of un nest
function calls by using compose.

40
00:02:37.200 --> 00:02:40.230
It kind of unrolls it
into a nice pipeline.

41
00:02:40.230 --> 00:02:44.130
And you'll see it's going right to left,
which is kind of interesting.

42
00:02:44.130 --> 00:02:48.390
So, tears first get called to toUpper and
then we get the exclaim at the end.

43
00:02:50.320 --> 00:02:54.130
Now, if we want to compose further
at the moment without any help from

44
00:02:54.130 --> 00:02:57.570
ramadas compose,
we'll have to compose again.

45
00:02:58.890 --> 00:03:02.880
Let's take the first from there,
so we get t.

46
00:03:02.880 --> 00:03:07.740
So what's happening here is,
will compose these functions.

47
00:03:07.740 --> 00:03:09.160
Which returns a new function.

48
00:03:09.160 --> 00:03:12.650
Function composition returns a new
function, I give it f and g and

49
00:03:12.650 --> 00:03:15.330
I got a new function back.

50
00:03:15.330 --> 00:03:21.910
So it's very nice because that
means I can actually do these

51
00:03:21.910 --> 00:03:25.840
sub compositions I get a new function
back and I can continue to compose.

52
00:03:25.840 --> 00:03:27.920
Now, composes more than
just a helper function.

53
00:03:27.920 --> 00:03:31.400
It's like the cornerstone [LAUGH]
of what we're doing here.

54
00:03:32.890 --> 00:03:36.280
What's nice about it is
it's also associative.

55
00:03:36.280 --> 00:03:41.210
So I can say, well, let me go ahead and
compose these new function.

56
00:03:41.210 --> 00:03:43.270
And we'll compose the outer piece.

57
00:03:43.270 --> 00:03:45.250
And it's the same example.

58
00:03:45.250 --> 00:03:48.590
So it doesn't matter how
I nest the compositions.

59
00:03:48.590 --> 00:03:54.190
So because it's associative,
it doesn't matter how I which,

60
00:03:54.190 --> 00:03:58.080
which are run,
even though they're all defined in order,

61
00:03:58.080 --> 00:04:01.580
I can kind of associate
the parentheses to the left or right.

62
00:04:01.580 --> 00:04:02.960
So it means associative.

63
00:04:02.960 --> 00:04:06.690
So we'll bring in this
compose here from lambda.

64
00:04:07.820 --> 00:04:13.530
And now we get the same, but I can
actually take away the inner composed and

65
00:04:13.530 --> 00:04:15.080
just give it as many as I want.

66
00:04:15.080 --> 00:04:18.840
Because if I can nest it and it's
associative, I can just remove that and

67
00:04:18.840 --> 00:04:22.310
make it a very attic one it doesn't,
they're equivalent.

68
00:04:22.310 --> 00:04:27.770
So, here, it gets tears goes into
toUpper adds the exclamation and

69
00:04:27.770 --> 00:04:29.720
then we throw it all in and
take the first thing.

70
00:04:29.720 --> 00:04:31.559
[LAUGH] What if we move that over here?

71
00:04:33.080 --> 00:04:34.430
There we go.

72
00:04:34.430 --> 00:04:39.910
So I can actually do Martin Fowler's
extract method wherever I want and

73
00:04:39.910 --> 00:04:44.240
I call this one, loudFirst.

74
00:04:47.140 --> 00:04:51.940
Sorry I'm still in vim
mode in my head [LAUGH]

75
00:04:51.940 --> 00:04:53.269
happens to the best of us.

76
00:04:54.790 --> 00:05:02.460
And I can basically extract any sub
composition into its own composition.

77
00:05:02.460 --> 00:05:03.270
Which is really nice.

78
00:05:03.270 --> 00:05:07.310
It's like I've got all these Lego's and
I'm gonna create a pipeline for

79
00:05:07.310 --> 00:05:08.570
my data to flow through.

80
00:05:09.740 --> 00:05:11.790
And then the data will
go through each one and

81
00:05:11.790 --> 00:05:16.300
that can break them out into their
own sub pipelines if I want.

82
00:05:16.300 --> 00:05:18.320
Which is super cool.

83
00:05:18.320 --> 00:05:22.375
Does anybody see how compose is
actually running right to left?

84
00:05:22.375 --> 00:05:24.567
Kind of makes sense that
the argument would start here and

85
00:05:24.567 --> 00:05:26.360
kind of flow through there, right?

86
00:05:26.360 --> 00:05:28.850
If I gave it the argument over here,
it wouldn't.

87
00:05:28.850 --> 00:05:31.070
It would be weird and left to right.

88
00:05:31.070 --> 00:05:37.000
But there is often something called
pipe and it just does g of f of x.

89
00:05:38.290 --> 00:05:39.790
We'll go left or right?

90
00:05:39.790 --> 00:05:43.230
We're gonna do flip on compose
to define pipe fun times.

