WEBVTT

1
00:00:00.050 --> 00:00:03.767
Continuing on our tour of definitions
before we build some stuff.

2
00:00:03.767 --> 00:00:06.856
And I'm just going to
be talking at you for

3
00:00:06.856 --> 00:00:10.222
the next 45 minutes or so, ask questions.

4
00:00:10.222 --> 00:00:15.410
Cuz I don't want this to be my
dissertation about all the problems.

5
00:00:15.410 --> 00:00:16.470
We get into stuff.

6
00:00:16.470 --> 00:00:18.160
We'll just have fun from here on out.

7
00:00:19.700 --> 00:00:23.750
Okay, so
next kind of interesting situation.

8
00:00:25.510 --> 00:00:29.240
So actually,
I'm just gonna go copy this boilerplate.

9
00:00:31.842 --> 00:00:35.060
All right, so
we have this function httpGet,

10
00:00:35.060 --> 00:00:38.130
and you can pretend it's
actually going to do stuff.

11
00:00:38.130 --> 00:00:39.820
We're just gonna stub it out with task.of.

12
00:00:41.720 --> 00:00:44.670
Fun story, if you use id.of,
you can actually see things, and

13
00:00:44.670 --> 00:00:46.140
you can stub out the exact same interface,

14
00:00:46.140 --> 00:00:49.640
and you don't have to worry about it
being kind of opaque like a task.

15
00:00:49.640 --> 00:00:51.060
It's kinda cool.

16
00:00:51.060 --> 00:00:57.860
But what's gonna happen here is we wanna
call getUser, getTimeline and getAds.

17
00:00:57.860 --> 00:00:59.099
We wanna hit all of those.

18
00:01:01.020 --> 00:01:04.950
And in promises,
you have Promise.all to do that.

19
00:01:04.950 --> 00:01:10.687
You could say get the user,
get the timeline, get out whatever.

20
00:01:10.687 --> 00:01:15.608
And what you'd end up with is an array of

21
00:01:15.608 --> 00:01:20.837
a promise of an array of results, right?

22
00:01:20.837 --> 00:01:27.280
Result, result, but without promise.of,
we were in a map over this.

23
00:01:27.280 --> 00:01:29.530
And we get each function, and we run it.

24
00:01:29.530 --> 00:01:33.716
We end up with an array of promise1,
promise2, promise3, and

25
00:01:33.716 --> 00:01:35.758
they wouldn't be the results.

26
00:01:35.758 --> 00:01:41.203
So effectively, you have a promise on
the inside, an array on the outside.

27
00:01:41.203 --> 00:01:44.310
And we want a promise on the outside,
and an array on the inside.

28
00:01:45.540 --> 00:01:47.701
See that kind of distinction?

29
00:01:47.701 --> 00:01:49.990
We've got an array of promises,
instead of a promise of an array.

30
00:01:52.040 --> 00:01:55.120
And in the way you'd write
this in a type is I have

31
00:01:55.120 --> 00:01:58.448
the type of this thing is
an array of promise, right?

32
00:01:58.448 --> 00:02:03.109
So we wanna flip that into
a promise of an array.

33
00:02:04.946 --> 00:02:09.594
Promise holding whatever string
we have here in this [INAUDIBLE].

34
00:02:09.594 --> 00:02:13.590
All right, so promise.all does that for
us, but in a very specific way.

35
00:02:14.640 --> 00:02:19.710
We're gonna take a step to make it
more general to work on any two types

36
00:02:19.710 --> 00:02:24.690
that are capable of
commuting flipping around.

37
00:02:24.690 --> 00:02:31.160
So if I have the situation right
here with tasks in a list,

38
00:02:31.160 --> 00:02:36.979
the same thing I wanna task of results,
not a list of tasks right?

39
00:02:38.780 --> 00:02:43.070
And that that interface
is called traversable.

40
00:02:43.070 --> 00:02:48.310
We're able to traverse the types,
kind of leapfrog them, flip them around.

41
00:02:48.310 --> 00:02:52.114
So we're gonna call it traverse,
instead of map.

42
00:02:52.114 --> 00:02:54.730
And traverse takes two arguments.

43
00:02:54.730 --> 00:02:56.789
The first one is point.

44
00:02:56.789 --> 00:02:58.030
What are we talking about?

45
00:02:58.030 --> 00:03:00.832
What are we gonna have on the outside?

46
00:03:00.832 --> 00:03:02.380
It's largely ignored.

47
00:03:02.380 --> 00:03:05.990
But in the case of errors where it
never actually runs the function left,

48
00:03:05.990 --> 00:03:07.710
you still need to know what
type you're gonna put it in.

49
00:03:07.710 --> 00:03:09.140
So you have to provide it.

50
00:03:09.140 --> 00:03:10.520
Type systems can do this for you.

51
00:03:10.520 --> 00:03:12.930
So if you go to something like Haskell or
pure scripts,

52
00:03:12.930 --> 00:03:15.850
you don't actually have to provide that,
cuz it knows the types.

53
00:03:15.850 --> 00:03:16.350
But here, you do.

54
00:03:18.220 --> 00:03:21.620
So what's gonna happen here is this
doesn't have a traverse method.

55
00:03:21.620 --> 00:03:22.240
It's a list.

56
00:03:22.240 --> 00:03:24.240
It's a array built in.

57
00:03:24.240 --> 00:03:27.298
So I brought in my library,
which defines traverse.

58
00:03:27.298 --> 00:03:32.832
And this is, how do I say this?

59
00:03:32.832 --> 00:03:35.164
This is a pervasive.

60
00:03:35.164 --> 00:03:39.200
This function exists amongst
all these functional languages.

61
00:03:39.200 --> 00:03:41.409
It's not just like my library.

62
00:03:41.409 --> 00:03:43.340
This is just one one way to implement it.

63
00:03:43.340 --> 00:03:45.755
And I did that so we could have
something with the class, but

64
00:03:45.755 --> 00:03:46.829
you'll see this around.

65
00:03:46.829 --> 00:03:49.540
In Swift, you'll see this function
right off the bat, right?

66
00:03:49.540 --> 00:03:54.135
And what we get here now
is we run all these.

67
00:03:54.135 --> 00:03:58.670
We'll just fork console.log, console.log.

68
00:03:58.670 --> 00:04:06.056
We should have a freaking
mutable JS [LAUGH] x.toJS, cool.

69
00:04:06.056 --> 00:04:08.409
And so we have an array of results.

70
00:04:08.409 --> 00:04:14.179
So it's effectively a task over a list
of results, instead of a list of tasks.

71
00:04:15.240 --> 00:04:17.601
Let's do the same thing, something else.

72
00:04:17.601 --> 00:04:22.542
&gt;&gt; On the list, and kind of promise.all,
the JavaScript promise.all,

73
00:04:22.542 --> 00:04:27.160
if there's a single failure in the array,
the entire thing fails.

74
00:04:27.160 --> 00:04:28.010
Is that correct?

75
00:04:28.010 --> 00:04:31.295
So are we avoiding that
behavior in immutable JS?

76
00:04:33.910 --> 00:04:36.790
&gt;&gt; I think it would cancel it out.

77
00:04:37.980 --> 00:04:41.640
Interestingly though,
concat can get you around that.

78
00:04:41.640 --> 00:04:44.280
&gt;&gt; Yes.
&gt;&gt; With monoids and alternatives.

79
00:04:44.280 --> 00:04:47.853
But yeah, this is just basically
promise.all for now, yeah,

80
00:04:47.853 --> 00:04:49.050
we'll hit this one.

81
00:04:50.470 --> 00:04:52.990
Yeah, thanks for mentioning that.

82
00:04:52.990 --> 00:04:55.397
So here, we have this example.

83
00:04:55.397 --> 00:04:56.870
Let's look at a different type.

84
00:04:56.870 --> 00:05:02.190
I'm just gonna copy all these out
from my previous doodle links.

85
00:05:02.190 --> 00:05:03.930
Okay, let's get rid of this stuff.

86
00:05:03.930 --> 00:05:07.050
And here,
we have a very similar situation.

87
00:05:08.310 --> 00:05:11.090
Again, we have a list of eaters.

88
00:05:12.250 --> 00:05:16.876
We're gonna do is say I wanna
take a value, this email,

89
00:05:16.876 --> 00:05:21.910
blot@yahoo.com is my email address,
don't exploit it.

90
00:05:23.220 --> 00:05:26.880
And then I want you to run
each of these on there.

91
00:05:26.880 --> 00:05:31.282
And what we'll end up with is
just this array of ethers.

92
00:05:31.282 --> 00:05:37.910
Either either, and
we want an either array results.

93
00:05:37.910 --> 00:05:40.470
Now, I've used array in
both of these examples, but

94
00:05:40.470 --> 00:05:41.630
it's not exclusives to array.

95
00:05:41.630 --> 00:05:43.710
We could do this with box and Either.

96
00:05:44.940 --> 00:05:49.630
Unfortunately, you can't
take a nested task.

97
00:05:49.630 --> 00:05:53.960
You can't start with tasks on the outside,
and put something outside of it.

98
00:05:53.960 --> 00:05:56.920
It's not traversable, it doesn't implement
that interface, it's impossible.

99
00:05:56.920 --> 00:05:58.993
So I can't show you that with task.

100
00:05:58.993 --> 00:06:03.154
But by and large, this is a generic
interface for flipping two types around.

101
00:06:03.154 --> 00:06:05.670
I have a disk type inside of that type,
I want that one on the outside.

102
00:06:07.250 --> 00:06:09.800
I just happen to be using list
on both of these examples.

103
00:06:11.540 --> 00:06:15.557
So what we'll do here is we'll use list,
and

104
00:06:15.557 --> 00:06:19.893
we'll switch map to traverse,
do either .of,

105
00:06:19.893 --> 00:06:24.352
double r, sorry, I'm fine,
it's okay [LAUGH].

106
00:06:24.352 --> 00:06:30.436
And then we'll res.fold, or yeah,
fold console.log, console.log.

107
00:06:30.436 --> 00:06:37.450
All right, and again, and [LAUGH]
shouldn't be deleting these things.

108
00:06:39.330 --> 00:06:40.900
There you go.

109
00:06:40.900 --> 00:06:43.010
And you see the result twice,
cuz that's what I'm doing,

110
00:06:43.010 --> 00:06:45.190
I'm saying just return it back.

111
00:06:45.190 --> 00:06:48.720
This is a common pattern in something like
validation libraries, where you say well,

112
00:06:48.720 --> 00:06:52.160
return the result or the error,
cuz the error is gonna short circuit, or

113
00:06:52.160 --> 00:06:53.991
concat with each other,
combine, or whatever.

114
00:06:55.040 --> 00:06:58.800
And so
if it comes back with a bunch of results,

115
00:06:58.800 --> 00:07:01.300
just take one, cuz it's the actual thing.

116
00:07:01.300 --> 00:07:06.550
Otherwise, it'll just blow up in a nice,
clean, mathematical way.

117
00:07:06.550 --> 00:07:13.470
One thing I was gonna say is, yeah,
if I break this, you go, not an email.

118
00:07:13.470 --> 00:07:15.700
It has to be greater than 5.

119
00:07:15.700 --> 00:07:17.890
Let's pick that one.

120
00:07:17.890 --> 00:07:20.091
Well, that's great.

121
00:07:20.091 --> 00:07:21.150
There you go.

122
00:07:21.150 --> 00:07:25.850
So both, no,
not both [LAUGH] now using monoids.

123
00:07:25.850 --> 00:07:27.070
Yeah, we didn't talk about monoids.

124
00:07:27.070 --> 00:07:31.150
We're gonna be talking about monoids
in the functional architecture course.

125
00:07:31.150 --> 00:07:36.296
The point being that
this flips types around.

126
00:07:36.296 --> 00:07:38.778
And that's something that's useful.

127
00:07:38.778 --> 00:07:44.989
You'll end up with situations like, let's
just do this with just some fun types.

128
00:07:44.989 --> 00:07:48.751
I have an either of three, right?

129
00:07:48.751 --> 00:07:52.714
Or I have an either of a list of four.

130
00:07:52.714 --> 00:07:55.496
[LAUGH] and from there,

131
00:07:55.496 --> 00:08:00.479
I wanna do something where I chain this.

132
00:08:00.479 --> 00:08:02.906
And I take this list in, and

133
00:08:02.906 --> 00:08:08.410
then I get another either here
of three again, or something.

134
00:08:08.410 --> 00:08:14.145
And what we'll get is this either list,
either thing.

135
00:08:14.145 --> 00:08:18.456
And what I can do here
is if I put this type

136
00:08:18.456 --> 00:08:24.160
outside of the list,
I can squash them down.

137
00:08:24.160 --> 00:08:30.746
Right, I would end up with
an either of an either of a list.

138
00:08:30.746 --> 00:08:35.314
And now I can flatten to
just an either of a list.

139
00:08:35.314 --> 00:08:38.830
They cannot flatten that, but
they can flatten two in the row.

140
00:08:40.870 --> 00:08:42.540
This is getting really intense.

141
00:08:42.540 --> 00:08:46.374
This is much more like advanced material,
where you're starting to nest these

142
00:08:46.374 --> 00:08:49.482
things, and deal with collapsing them,
and flattening them.

143
00:08:49.482 --> 00:08:53.242
So you have a nice, but
you're being honest in your program.

144
00:08:53.242 --> 00:08:56.760
You're saying this could blow up,
so you have to deal with that.

145
00:08:56.760 --> 00:09:01.212
And you're like I don't wanna
deal with it, it's annoying.

146
00:09:01.212 --> 00:09:03.330
But [LAUGH] it's just the truth.

147
00:09:03.330 --> 00:09:06.880
So having to deal with these things,
just, this is just different API for

148
00:09:06.880 --> 00:09:08.562
dealing with it than
a bunch of try catches.

149
00:09:08.562 --> 00:09:11.480
It's just flipping around, and
shuffling these, and crunching them down,

150
00:09:11.480 --> 00:09:13.006
and combining them in different ways.

151
00:09:13.006 --> 00:09:14.508
Does anybody have any question?

152
00:09:14.508 --> 00:09:16.629
I didn't really go too far into this.

153
00:09:16.629 --> 00:09:20.978
But we have an either of a list, and
we're gonna get another either out.

154
00:09:20.978 --> 00:09:25.948
Or sorry, not chain, we like map,
and it'd be either list, map,

155
00:09:25.948 --> 00:09:27.889
list, either mixtures.

156
00:09:27.889 --> 00:09:32.170
So that situation ends up happening,
and it be good to know.

157
00:09:33.290 --> 00:09:38.165
Another situation that
ends up happening is we

158
00:09:38.165 --> 00:09:42.170
find this natural transformer show.

159
00:09:47.948 --> 00:09:49.158
Haha, this is gonna be fun.

160
00:09:49.158 --> 00:09:53.765
Okay [LAUGH] yeah, this is the good stuff.

161
00:09:53.765 --> 00:09:54.979
All right, buckle up.

162
00:09:54.979 --> 00:10:03.329
So what we got here in
a nutshell is a database.

163
00:10:04.919 --> 00:10:10.325
That when you give it an id,
I guess if the id is greater than 2,

164
00:10:10.325 --> 00:10:15.231
we're gonna actually go find it and
make this fake user.

165
00:10:15.231 --> 00:10:18.000
That's friend id is the id + 1.

166
00:10:18.000 --> 00:10:19.100
Otherwise, we're gonna say not found.

167
00:10:19.100 --> 00:10:23.050
So this is our fake database with
a fake find and a fake user.

168
00:10:23.050 --> 00:10:26.580
Awesome, and then we have this send.

169
00:10:26.580 --> 00:10:29.546
So I guess this is an http response.

170
00:10:29.546 --> 00:10:31.630
We're gonna send the code and
the JSON of the user.

171
00:10:31.630 --> 00:10:32.130
Okay, great.

172
00:10:33.300 --> 00:10:36.743
Look at this, kicking butt.

173
00:10:36.743 --> 00:10:39.480
[LAUGH] so what's gonna happen?

174
00:10:39.480 --> 00:10:40.610
Let's walk through this.

175
00:10:40.610 --> 00:10:42.960
We're gonna find a user.

176
00:10:42.960 --> 00:10:43.960
What does that return to us?

177
00:10:43.960 --> 00:10:47.720
That returns us a task
of the user right away.

178
00:10:47.720 --> 00:10:51.780
It has to be greater than 2,
3, there it is.

179
00:10:51.780 --> 00:10:56.340
Okay, so we have a task of a user,
and we get that there.

180
00:10:56.340 --> 00:11:00.050
And so what's gonna happen is we
get this either of a user, right?

181
00:11:00.050 --> 00:11:03.020
This is inside the tasks,
that's actually not here.

182
00:11:03.020 --> 00:11:03.930
It's not a task of user.

183
00:11:03.930 --> 00:11:06.421
That's a task of an either of a user,
right?

184
00:11:09.006 --> 00:11:11.680
So it's an either user.

185
00:11:11.680 --> 00:11:20.270
It's not a nod to GPO [LAUGH] what is
that whole data privacy thing, GDPR.

186
00:11:21.350 --> 00:11:25.440
So we're gonna fold out the either, and

187
00:11:25.440 --> 00:11:29.780
we're gonna say, well,
since we're chaining, because we wanna

188
00:11:29.780 --> 00:11:34.310
do another database find, the left
side has to like turn into a task,

189
00:11:34.310 --> 00:11:39.300
because we have to return a task, even if
we have to return a task, no matter what.

190
00:11:39.300 --> 00:11:41.386
So if it was not there,
we'd still have to return a task.

191
00:11:41.386 --> 00:11:44.923
And we'd probably wanna do reject it,
or something here.

192
00:11:44.923 --> 00:11:49.830
But then we get this user, and
we do the second find, okay?

193
00:11:49.830 --> 00:11:54.400
And then we're gonna fork it here,
we'll get the error.

194
00:11:54.400 --> 00:11:59.730
Now, this error is a database error,
not the couldn't find a user.

195
00:12:01.610 --> 00:12:08.150
And also, that's if the task itself
gets rejected, not if we return to left.

196
00:12:08.150 --> 00:12:10.840
Then here, we get another either user,
and we fold it out.

197
00:12:10.840 --> 00:12:11.400
Send these, and

198
00:12:11.400 --> 00:12:15.950
this is just not fun to work with when
you have two nested types like that.

199
00:12:16.950 --> 00:12:19.620
There's a lot of different
ways to handle that.

200
00:12:19.620 --> 00:12:22.590
And I'll be talking about in
the functional architecture class about

201
00:12:23.630 --> 00:12:28.020
how to normalize these types in different
ways, and techniques for doing that.

202
00:12:28.020 --> 00:12:33.980
But for right now, I mean, you

203
00:12:33.980 --> 00:12:39.110
don't really need anything more than this
stuff, but we're gonna arm you with this.

204
00:12:39.110 --> 00:12:44.520
So this will be one solution
that nails most of the cases.

205
00:12:44.520 --> 00:12:47.150
So this is called
a natural transformation.

206
00:12:47.150 --> 00:12:51.730
In natural transformation,
we're taking either into a task.

207
00:12:51.730 --> 00:12:53.900
Why is it a natural transformation?

208
00:12:53.900 --> 00:12:54.916
Why is this fancy?

209
00:12:54.916 --> 00:12:59.080
Basically, what we're gonna say is
we have some type F holding an A,

210
00:12:59.080 --> 00:13:03.080
and we're gonna turn it
into a type T holding an A.

211
00:13:03.080 --> 00:13:05.490
And we cannot know anything about A.

212
00:13:07.930 --> 00:13:13.400
People talk about encapsulation in
programming by making things general,

213
00:13:13.400 --> 00:13:18.760
and not knowing anything about it,
that's the same as encapsulation.

214
00:13:18.760 --> 00:13:23.736
Polymorphic functions
are encapsulated functions.

215
00:13:23.736 --> 00:13:25.170
They can't call anything specific.

216
00:13:25.170 --> 00:13:27.060
They don't know anything about the value.

217
00:13:27.060 --> 00:13:31.260
So therefore, it's abstract,
and you're hiding information.

218
00:13:32.685 --> 00:13:35.540
So it's a type transformation.

219
00:13:35.540 --> 00:13:40.250
Natural transformations are a principled
type transformation from type F to type T,

220
00:13:40.250 --> 00:13:41.800
both holding the value here.

221
00:13:41.800 --> 00:13:46.940
And what we're doing is folding the either
out into a task that's rejected,

222
00:13:46.940 --> 00:13:48.962
or a task that's resolved.

223
00:13:48.962 --> 00:13:52.430
So we've taken an either, and
we've turned it into a task.

224
00:13:52.430 --> 00:13:55.180
So we're gonna see how
that's working right now.

225
00:13:55.180 --> 00:13:56.960
It's folding the either out.

226
00:13:56.960 --> 00:13:58.970
And on the left,
it turns into a rejected task.

227
00:13:58.970 --> 00:14:04.430
And on the right,
it turns into everything's good task.

228
00:14:05.490 --> 00:14:06.350
There's laws.

229
00:14:06.350 --> 00:14:09.160
There's laws around
natural transformations.

230
00:14:09.160 --> 00:14:13.300
So if I map, and then I do a natural
transformation, that's the same

231
00:14:13.300 --> 00:14:16.370
as doing the natural transformation
formation, then mapping, right?

232
00:14:18.010 --> 00:14:22.080
And that's if this holds,
it is indeed a natural transformation.

233
00:14:22.080 --> 00:14:25.230
If this does not hold,
you do not have a natural transformation.

234
00:14:25.230 --> 00:14:30.289
Good kind of guidance is if you touch
anything on this value, then you don't

235
00:14:30.289 --> 00:14:35.681
really have a natural transformation,
as far as the value the eithers holding.

236
00:14:35.681 --> 00:14:39.416
You can mess around with either, or
whatever type you're dealing with, but

237
00:14:39.416 --> 00:14:40.630
not what it's holding.

238
00:14:40.630 --> 00:14:42.160
That's what the natural part comes from.

239
00:14:43.620 --> 00:14:47.820
So let's go into this, and refactor
it using a natural transformation.

240
00:14:47.820 --> 00:14:51.721
So we don't want a task
of an either of a user.

241
00:14:51.721 --> 00:14:54.399
What we can do is chain.

242
00:14:54.399 --> 00:14:57.180
We're gonna call either to task.

243
00:14:57.180 --> 00:14:58.230
What is that doing?

244
00:14:58.230 --> 00:15:02.496
Well, it takes our either of a user,
passes it into there.

245
00:15:02.496 --> 00:15:07.558
And then what we get is a rejected task,
or a result task like happy task.

246
00:15:07.558 --> 00:15:11.340
And if we mapped, we'd get a task
of a task, but we're chaining.

247
00:15:11.340 --> 00:15:12.480
Now we just have the task of a user.

248
00:15:13.630 --> 00:15:17.650
So you take this out, make it nice and
first class right there.

249
00:15:18.750 --> 00:15:20.535
But now we have a user here.

250
00:15:20.535 --> 00:15:23.580
We don't have to deal with any
more of these folds, right?

251
00:15:25.050 --> 00:15:26.290
That's nice.

252
00:15:26.290 --> 00:15:26.910
How nice is that?

253
00:15:28.960 --> 00:15:34.350
And same problem down here, right?

254
00:15:34.350 --> 00:15:36.780
What if instead of down here,
we do all this nonsense,

255
00:15:36.780 --> 00:15:41.040
we'll just go ahead and
chain another user to task, right?

256
00:15:41.040 --> 00:15:43.890
Then we'd just get a user out,
and we don't have to fold,

257
00:15:43.890 --> 00:15:48.350
and we can just send this
whole user right down.

258
00:15:50.770 --> 00:15:53.450
And where are we at?

259
00:15:53.450 --> 00:15:55.250
There we go, cool, everybody's happy.

260
00:15:56.610 --> 00:15:58.190
Let's do this though.

261
00:15:58.190 --> 00:15:59.060
What happened?

262
00:15:59.060 --> 00:15:59.890
Error, not found.

263
00:16:01.380 --> 00:16:04.320
One thing that we lost in this,

264
00:16:04.320 --> 00:16:10.250
is that folding behavior just rejected
the whole task itself, right?

265
00:16:10.250 --> 00:16:14.650
It didn't reject specifically that
you didn't find the user, but

266
00:16:14.650 --> 00:16:16.550
the DB connection worked, but whatever.

267
00:16:16.550 --> 00:16:20.250
So by normalizing this on the task,
you're gonna fall into the task error, so

268
00:16:20.250 --> 00:16:22.570
that is one thing you're losing here.

269
00:16:22.570 --> 00:16:24.490
I mean, but look at that,
that's so much nicer, right?

270
00:16:25.680 --> 00:16:30.130
But also, this is kind of annoying, and
there are other ways to handle that.

271
00:16:33.610 --> 00:16:39.744
Traversing, and if we have an either
of a task of an either of a task,

272
00:16:39.744 --> 00:16:45.140
well, I can traverse either,
but I can't traverse task.

273
00:16:46.470 --> 00:16:53.061
And so there might be a way to get
this either in there, or out there.

274
00:16:53.061 --> 00:16:55.990
And then we can squash them down,
and play around with these types.

275
00:16:57.050 --> 00:16:59.460
Natural transformations
just make it easier.

276
00:16:59.460 --> 00:17:04.286
Another solution besides
traversable would be doing

277
00:17:04.286 --> 00:17:09.224
stuff like normalizing all
these into the same monad.

278
00:17:09.224 --> 00:17:13.790
So we can make a new monad called
TaskEater, and that is what you would do,

279
00:17:13.790 --> 00:17:15.926
use a new monad transformers for,

280
00:17:15.926 --> 00:17:19.408
which we'd be talked about
in the architecture class.

281
00:17:19.408 --> 00:17:24.240
So this is much more of a tool to
say I keep running into TaskEater.

282
00:17:24.240 --> 00:17:30.000
Why don't I use a monad transformer to
make a new thing that's both of them?

283
00:17:30.000 --> 00:17:36.030
And then finally, there's stuff like
free monads, which again, and monoids,

284
00:17:36.030 --> 00:17:41.640
both are good solutions to this problem in
different ways, in different situations.

285
00:17:41.640 --> 00:17:44.560
So I'm not gonna go into into that today.

286
00:17:44.560 --> 00:17:48.339
This was kind of the scope for this class.

287
00:17:48.339 --> 00:17:49.331
And I'll be honest,

288
00:17:49.331 --> 00:17:52.590
I programmed for years without
knowing anything more than this, so.

289
00:17:52.590 --> 00:17:56.337
And it was building totally
rich working fine applications.

290
00:17:56.337 --> 00:17:59.810
So don't feel like you're like, I'm
missing out, I need to know transformers.

291
00:17:59.810 --> 00:18:04.470
They hit a specific case and specific
time, and all the other ones do as well.

292
00:18:04.470 --> 00:18:07.170
But there is more to know
about shuffling types about.

