WEBVTT

1
00:00:00.100 --> 00:00:03.540
So Task is Promise,
it's exactly Promise, it's just lazy.

2
00:00:03.540 --> 00:00:11.730
So that whole kicking the computation down
to the callers [LAUGH], side of the court.

3
00:00:11.730 --> 00:00:13.741
So, one thing I think
is really interesting.

4
00:00:13.741 --> 00:00:16.946
Before we go into this,
we have Box, right?

5
00:00:16.946 --> 00:00:22.073
And we could say, well, you take your X.

6
00:00:22.073 --> 00:00:25.489
And then, what we're gonna do is,
we're gonna map over the,

7
00:00:25.489 --> 00:00:28.850
you give me a function,
I'm gonna directly run this on that.

8
00:00:30.520 --> 00:00:34.640
A different way to make Box
would be to take a function.

9
00:00:37.050 --> 00:00:40.703
And then if I map a different
function over it,

10
00:00:40.703 --> 00:00:43.803
I could just do function composition.

11
00:00:43.803 --> 00:00:46.146
So now Box is holding a function.

12
00:00:46.146 --> 00:00:50.065
And, mapping is literally
function composition.

13
00:00:50.065 --> 00:00:55.366
We could do this, we could say,
Box take something that returns,

14
00:00:55.366 --> 00:00:58.312
let's just start with the value 2.

15
00:00:58.312 --> 00:01:05.290
And then we'll map over that,
and we'll do, two + 1.

16
00:01:06.560 --> 00:01:09.772
And let's go ahed and

17
00:01:09.772 --> 00:01:14.248
bring in compose from Ramda.

18
00:01:14.248 --> 00:01:17.293
And, we don't have a way to run it yet,
but folding,

19
00:01:17.293 --> 00:01:19.684
what would folding be in this situation?

20
00:01:19.684 --> 00:01:23.645
How would you get this out of the Box?

21
00:01:23.645 --> 00:01:25.210
&gt;&gt; Do you just run the function?

22
00:01:25.210 --> 00:01:30.099
&gt;&gt; Yeah, f [LAUGH].

23
00:01:30.099 --> 00:01:31.900
And there you go.

24
00:01:31.900 --> 00:01:39.222
Interestingly, this is starting
from the basis of the reader Monad,

25
00:01:39.222 --> 00:01:44.062
you're making a function into a functor,
and

26
00:01:44.062 --> 00:01:47.055
mapping this composition.

27
00:01:47.055 --> 00:01:49.631
And it gets into these
category theory constructs,

28
00:01:49.631 --> 00:01:52.510
where you can make either in the lazy,
and back and forth.

29
00:01:54.180 --> 00:01:58.760
But, my point in showing this is that.

30
00:01:58.760 --> 00:02:02.561
Knowing that I can always make
a functor lazy with the function, and

31
00:02:02.561 --> 00:02:06.270
mapping its composition is
a very useful thing to know.

32
00:02:06.270 --> 00:02:10.200
Because then I can say, lists are eager,

33
00:02:10.200 --> 00:02:12.930
if I have an array, I map,
it's gonna run through it.

34
00:02:12.930 --> 00:02:15.438
But I can make an event stream that's
like a list but it's lazy, and

35
00:02:15.438 --> 00:02:16.502
it doesn't run through it.

36
00:02:16.502 --> 00:02:18.560
Or I can make a lazy list.

37
00:02:18.560 --> 00:02:19.902
And mapping is just composition.

38
00:02:19.902 --> 00:02:24.280
And knowing that upfront really
helps you build these types.

39
00:02:24.280 --> 00:02:25.612
And same thing with.

40
00:02:25.612 --> 00:02:32.100
So this is how we're gonna be able to do
async without dealing with it directly.

41
00:02:32.100 --> 00:02:33.060
So let's do that.

42
00:02:35.080 --> 00:02:37.385
So we have Task.

43
00:02:37.385 --> 00:02:40.475
And Task has an of method that
I kind of alluded to earlier,

44
00:02:40.475 --> 00:02:42.250
I can just throw something in it.

45
00:02:43.920 --> 00:02:49.659
Task.of2, map over that, do two + 1.

46
00:02:49.659 --> 00:02:52.570
And, all right.

47
00:02:52.570 --> 00:02:56.492
So, what we have here is this thing,
a Task holding a 2.

48
00:02:56.492 --> 00:03:00.530
Let me do a more conventional constructor.

49
00:03:01.820 --> 00:03:07.900
Task takes a reject and resolve function,
just like a Promise, but they're flipped.

50
00:03:07.900 --> 00:03:09.387
Notice they're flipped.

51
00:03:09.387 --> 00:03:10.480
Why would they be flipped?

52
00:03:11.640 --> 00:03:13.100
Anybody have any ideas?

53
00:03:13.100 --> 00:03:14.300
&gt;&gt; To go with left and right?

54
00:03:15.730 --> 00:03:17.704
&gt;&gt; Sort of that,
actually makes a lot of sense.

55
00:03:17.704 --> 00:03:18.644
I would agree with that.

56
00:03:18.644 --> 00:03:20.336
&gt;&gt; [CROSSTALK] first.

57
00:03:20.336 --> 00:03:23.120
&gt;&gt; Yeah, promises are typically,
you'll see like that, and

58
00:03:23.120 --> 00:03:24.931
then they never catch the error [LAUGH].

59
00:03:24.931 --> 00:03:26.235
Like, well, whatever, I don't care.

60
00:03:26.235 --> 00:03:28.826
You kind of push this first,
they're like, no,

61
00:03:28.826 --> 00:03:31.127
you have to actively ignore that callback.

62
00:03:31.127 --> 00:03:33.000
That's, I like that.

63
00:03:33.000 --> 00:03:36.500
So, we can do res(2), and
that's exactly how this is defined.

64
00:03:36.500 --> 00:03:37.500
It's just like, put this in there.

65
00:03:39.010 --> 00:03:42.678
Map over that, (two + 1).

66
00:03:42.678 --> 00:03:43.488
All right.

67
00:03:43.488 --> 00:03:49.985
So we'll call this T2, or T1.

68
00:03:49.985 --> 00:03:52.060
And, whoops.

69
00:03:53.590 --> 00:03:56.030
T1.fork.

70
00:03:56.030 --> 00:03:56.740
All right.

71
00:03:56.740 --> 00:03:58.050
So this is the big difference.

72
00:03:59.270 --> 00:04:04.025
What we're gonna do is say,

73
00:04:04.025 --> 00:04:07.796
this, hang on [LAUGH].

74
00:04:07.796 --> 00:04:09.557
What did I do here?

75
00:04:09.557 --> 00:04:15.794
[SOUND] Res(2), there we go.

76
00:04:15.794 --> 00:04:17.279
Pardon me on that one.

77
00:04:17.279 --> 00:04:21.751
Okay, so we can map,
adding something to it, and

78
00:04:21.751 --> 00:04:26.445
we could put whatever,
map, what is this, three?

79
00:04:26.445 --> 00:04:29.920
Three * 2.

80
00:04:29.920 --> 00:04:32.890
All right, so, this won't run,
this won't do anything.

81
00:04:32.890 --> 00:04:35.240
That's the difference between this and
a Promise, is,

82
00:04:35.240 --> 00:04:37.560
this just sits there, it's a computation.

83
00:04:39.350 --> 00:04:46.172
And, when it called fork,
console.error, console.log.

84
00:04:48.873 --> 00:04:51.731
I get six.

85
00:04:51.731 --> 00:04:55.173
So, this is gonna call the,
it's like fold, but we call it fork,

86
00:04:55.173 --> 00:04:59.473
because it's actually gonna go run stuff,
and it's gonna fork the computation,

87
00:04:59.473 --> 00:05:01.760
it's gonna be this big thing.

88
00:05:01.760 --> 00:05:05.348
In addition, we do have a way
to fold tasks separately, but.

89
00:05:05.348 --> 00:05:08.596
I think of it as taking it out it sounds
like folded, it works like folds,

90
00:05:08.596 --> 00:05:10.050
it actually runs the function.

91
00:05:11.250 --> 00:05:14.849
And so, some of the benefits here.

92
00:05:14.849 --> 00:05:19.142
First of all,
why would you wanna make promises lazy?

93
00:05:19.142 --> 00:05:22.744
What we do here is, we have a whole
app working with lazy constructions,

94
00:05:22.744 --> 00:05:24.880
nothing actually happening.

95
00:05:24.880 --> 00:05:29.300
That allows us to put these in data
structures, basically combine them,

96
00:05:29.300 --> 00:05:32.750
fold them together, change types around,
without ever running anything.

97
00:05:32.750 --> 00:05:36.020
And they know what they're holding,
this thing knows it's holding six.

98
00:05:37.500 --> 00:05:40.870
Just like a Promise knows what
it's holding, and, or an error.

99
00:05:41.990 --> 00:05:44.983
And, it allows us to continue
to compose and combine, and

100
00:05:44.983 --> 00:05:47.866
do all these great things
without actually running it.

101
00:05:47.866 --> 00:05:52.921
And then, outside of our application,
we've got the caller, where I'm like.

102
00:05:52.921 --> 00:05:56.632
Up here is my beautiful clean,
perfect mathematical app, and

103
00:05:56.632 --> 00:05:59.720
down there is where all
the stuff actually happens.

104
00:06:00.730 --> 00:06:02.210
We're able to run that.

105
00:06:02.210 --> 00:06:05.460
So we could do some really,
really interesting things with laziness,

106
00:06:05.460 --> 00:06:08.180
but I wanted to kind of make the case for

107
00:06:08.180 --> 00:06:12.259
using Task rather than Promise,
because it really does pay off.

108
00:06:13.780 --> 00:06:16.660
So, I don't know if I did
a great [LAUGH] job yet,

109
00:06:16.660 --> 00:06:18.810
but, we'll lazy it a little bit more.

110
00:06:20.810 --> 00:06:23.210
So, we have Task exercises.

111
00:06:23.210 --> 00:06:25.868
I think they're the last
exercises of the day.

112
00:06:25.868 --> 00:06:28.673
And then we'll try to build an app for
the rest of the day after that.

113
00:06:28.673 --> 00:06:30.730
But I wanted to do one
more example here of Task.

114
00:06:32.120 --> 00:06:33.670
And iIt's almost exactly a Promise.

115
00:06:33.670 --> 00:06:36.640
So, it shouldn't be too hard
if you already know Promise.

116
00:06:36.640 --> 00:06:41.405
But the one thing is,
this isn't just then and then, and then,

117
00:06:41.405 --> 00:06:47.417
you have to know if you're gonna return
another Task.of two, one, whatever.

118
00:06:47.417 --> 00:06:48.600
You see how that works.

119
00:06:48.600 --> 00:06:52.480
It's not just then and then it's, know if
you're gonna return it as a Task or not.

