WEBVTT

1
00:00:00.400 --> 00:00:01.270
In the background,

2
00:00:01.270 --> 00:00:05.130
I brought in Ramda, which is defined as R,
if you just bring it into a window.

3
00:00:06.680 --> 00:00:11.440
And I'm defining underscore here instead
of having an array R everywhere.

4
00:00:11.440 --> 00:00:13.927
You can look at the lambda docs,
they're available, but

5
00:00:13.927 --> 00:00:16.340
really only going to be using
Ramda's curry function.

6
00:00:16.340 --> 00:00:18.260
I guess it could have just
brought up curry from it.

7
00:00:19.850 --> 00:00:24.220
And so just like before, we have
a function called split, we've create it,

8
00:00:24.220 --> 00:00:28.130
takes a delimiter, takes this data last,
and we'll just split on the delimiter.

9
00:00:29.494 --> 00:00:34.690
And Exercise 1 wants you
to get rid of all the kind

10
00:00:34.690 --> 00:00:40.070
of function noise and just define
words in terms of a creed split.

11
00:00:40.070 --> 00:00:44.844
So we just wanna split on spaces and
we have a little test down here,

12
00:00:44.844 --> 00:00:46.910
should be passing already.

13
00:00:46.910 --> 00:00:49.310
So, yeah, Exercise 1, split is passing.

14
00:00:49.310 --> 00:00:51.390
We wanna keep it passing.

15
00:00:51.390 --> 00:00:54.330
But we wanted to find this
in terms of currying.

16
00:00:54.330 --> 00:00:57.780
So get rid of the function, get rid of
the turn, get rid of the string, and

17
00:00:57.780 --> 00:00:59.910
just try to find words in terms of split.

