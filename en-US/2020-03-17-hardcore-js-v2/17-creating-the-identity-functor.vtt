WEBVTT

1
00:00:00.120 --> 00:00:05.100
When we talk about dot chaining, we have
composition, and we have this dot syntax.

2
00:00:05.100 --> 00:00:09.480
It'd be really great to dot chain this
whole thing, you're gonna go in and

3
00:00:09.480 --> 00:00:12.130
you're like Brian's only a dot chain,
I'm gonna dot chain everything.

4
00:00:12.130 --> 00:00:14.966
I'm gonna compose everything, either one,

5
00:00:14.966 --> 00:00:18.238
it's gonna make a simplier to maintain and
read app,

6
00:00:18.238 --> 00:00:23.269
even though it's a little harder to do up
front, it pays dividends down the road.

7
00:00:23.269 --> 00:00:25.988
And now you come in here and you're like,

8
00:00:25.988 --> 00:00:30.346
I'm gonna do it, and you're like
how do I chain parse in on trims?

9
00:00:30.346 --> 00:00:32.556
How do I chain plus?

10
00:00:32.556 --> 00:00:36.440
I have this other,
I can't chain any like, what's going on?

11
00:00:36.440 --> 00:00:41.490
What if I have like, what do we do this,
right, like new number, that's no fun.

12
00:00:41.490 --> 00:00:44.425
This isn't gonna work,
cause I do this all the time.

13
00:00:44.425 --> 00:00:46.973
[LAUGH].

14
00:00:46.973 --> 00:00:48.190
Let's take away the new, why not.

15
00:00:49.800 --> 00:00:53.700
All right, so [LAUGH], the point here is,

16
00:00:55.230 --> 00:01:00.760
things aren't so dot chainable
out of the box, pun intended.

17
00:01:00.760 --> 00:01:02.978
We're gonna define what we call box.

18
00:01:02.978 --> 00:01:07.740
This is gonna be the identity functor,
formally,

19
00:01:07.740 --> 00:01:11.020
we're going to call it box
right now to get an intuition.

20
00:01:11.020 --> 00:01:13.040
That analogy eventually
starts to break down.

21
00:01:13.040 --> 00:01:15.320
But we're gonna start
with it cuz it really,

22
00:01:15.320 --> 00:01:18.170
really helps explain what's going on here.

23
00:01:18.170 --> 00:01:20.280
So our mission for

24
00:01:20.280 --> 00:01:24.870
the next 10 minutes, if we choose
to accept it, is to dot chain this.

25
00:01:26.450 --> 00:01:26.950
All right.

26
00:01:28.210 --> 00:01:29.790
In a nice linear control flow.

27
00:01:31.690 --> 00:01:36.370
I should say, you might be able to get
away with composition with a bunch of

28
00:01:36.370 --> 00:01:40.430
helper functions here, if you wrapped
everything in a helper function, but

29
00:01:40.430 --> 00:01:42.528
that's, we're gonna,
let's call that cheating, for now.

30
00:01:42.528 --> 00:01:46.260
[LAUGH] All right, so
we're gonna find box.

31
00:01:46.260 --> 00:01:50.105
And you can do this with a class,
but I'm gonna do it right here,

32
00:01:50.105 --> 00:01:52.490
it's just a little like factory function,
returns an object.

33
00:01:53.780 --> 00:01:56.070
Box is gonna have a couple of methods.

34
00:01:56.070 --> 00:01:57.810
It's going to have map.

35
00:01:57.810 --> 00:01:58.710
We're just gonna start with map.

36
00:01:59.730 --> 00:02:05.593
Now map has the same, don't worry so
much about the implementation.

37
00:02:05.593 --> 00:02:08.480
But think about how you're gonna use this.

38
00:02:08.480 --> 00:02:16.440
So let me just go ahead and
explain what's happening with map here.

39
00:02:17.820 --> 00:02:22.630
So if I, it looks recursive, but it's not,
I'm just putting it back in a box.

40
00:02:22.630 --> 00:02:26.200
Run the function on the x,
but keep it in the box.

41
00:02:26.200 --> 00:02:27.930
So I can continue to chain, if you will.

42
00:02:29.570 --> 00:02:35.178
So if I say result is a dot

43
00:02:35.178 --> 00:02:39.670
map to upper case.

44
00:02:39.670 --> 00:02:43.614
Wow, look at all the Czars, upper case.

45
00:02:45.805 --> 00:02:49.400
You know, it was in the box of an array.

46
00:02:49.400 --> 00:02:51.765
Got the A here, right?

47
00:02:51.765 --> 00:02:54.300
Uppercased it, stays within the box.

48
00:02:55.440 --> 00:03:00.070
What's in the box, so
[LAUGH] means anyone.

49
00:03:00.070 --> 00:03:06.280
So then we get our X here again and
let's go ahead and.

50
00:03:06.280 --> 00:03:10.949
You know what, I'm just gonna give
myself some room here because this is

51
00:03:10.949 --> 00:03:13.412
starting to get cramped, here we go.

52
00:03:13.412 --> 00:03:15.260
And we'll call it result on there.

53
00:03:15.260 --> 00:03:20.290
Alright, so, once we're in this map here,
what else can we do to it?

54
00:03:20.290 --> 00:03:22.030
Let's do this from char code, why not?

55
00:03:25.450 --> 00:03:25.950
Cool.

56
00:03:27.320 --> 00:03:31.690
So, what you're seeing here is
already the start of what's happening.

57
00:03:31.690 --> 00:03:37.330
We're able to combine
functions in a composition

58
00:03:37.330 --> 00:03:43.230
pipeline by putting it in this array,
and mapping over that array, right?

59
00:03:43.230 --> 00:03:46.770
Problem is, this gonna happen for
all the values in the array.

60
00:03:48.100 --> 00:03:55.520
And so, what we're gonna do is define
our own kind of array-like thing.

61
00:03:55.520 --> 00:03:56.490
We'll call it box.

62
00:03:58.440 --> 00:04:01.780
Now box, we'll go ahead and,

63
00:04:01.780 --> 00:04:06.570
I don't know if I can skip both on
the screen at the same time [LAUGH].

64
00:04:06.570 --> 00:04:07.270
Let's move it down.

65
00:04:10.170 --> 00:04:12.520
Cool, we get a box out.

66
00:04:12.520 --> 00:04:15.401
This isn't very helpful.

67
00:04:15.401 --> 00:04:17.820
I wonder if this still works.

68
00:04:17.820 --> 00:04:23.457
We do box, and
we put an X in there, the delegate.

69
00:04:26.342 --> 00:04:32.241
Yeah, cool, I mean, I guess [LAUGH],
but the point is here,

70
00:04:32.241 --> 00:04:37.793
that we haven't left the box,
so we can continue to map,

71
00:04:37.793 --> 00:04:42.764
we get another x and
we can do like x, I don't know,

72
00:04:42.764 --> 00:04:47.675
dot first,
I don't know if that actually works.

73
00:04:47.675 --> 00:04:52.890
[LAUGH] But let's go ahead and use this
to define this function in terms of box.

74
00:04:52.890 --> 00:04:57.794
Okay, so let's put box back up here,
and we'll go back to our result.

75
00:05:01.107 --> 00:05:05.431
All right, results is not a function,
of course you're not a function.

76
00:05:05.431 --> 00:05:08.112
And we're gonna do the same
thing we did in the exercises,

77
00:05:08.112 --> 00:05:10.970
we're gonna rewrite this function
right below it using box.

78
00:05:12.720 --> 00:05:15.220
Now, the first thing we'll
do is we'll put this,

79
00:05:15.220 --> 00:05:16.700
let's just put the string in the box.

80
00:05:19.440 --> 00:05:22.038
Okay, so
that's the first thing we're gonna do.

81
00:05:23.180 --> 00:05:25.889
Then we'll map, and we'll,
we'll trim the string.

82
00:05:27.030 --> 00:05:33.210
Please do extra trim, and
then we'll map again, and we'll do Parson.

83
00:05:33.210 --> 00:05:34.870
Look, see, this is composition, right?

84
00:05:34.870 --> 00:05:37.570
Trim is going there, we got a number,
we're passing number into the next thing.

85
00:05:38.770 --> 00:05:41.620
So go ahead and parse the ends on that.

86
00:05:42.880 --> 00:05:44.350
I could call it trimmed if we want.

87
00:05:45.780 --> 00:05:47.030
So we have a little bit more of a.

88
00:05:48.530 --> 00:05:50.000
Is anybody listen for that?

89
00:05:50.000 --> 00:05:51.140
We could do that.

90
00:05:51.140 --> 00:05:52.192
That's fine.

91
00:05:52.192 --> 00:05:56.920
[LAUGH] We could do, we got number,
comes out of parse int.

92
00:05:58.750 --> 00:06:03.380
And we can thread that over to this thing,
right?

93
00:06:03.380 --> 00:06:09.403
And then finally, we got this thing,
where we map string from char code,

94
00:06:09.403 --> 00:06:13.830
and hey, look,
we can just call it like that, fun.

95
00:06:13.830 --> 00:06:14.480
Cool.

96
00:06:14.480 --> 00:06:16.450
We have a box of A.

97
00:06:16.450 --> 00:06:20.630
And if I call the same thing there,
it's A, well,

98
00:06:20.630 --> 00:06:23.670
we don't want a box of
a we want an A [LAUGH].

99
00:06:23.670 --> 00:06:26.620
So let's find one more function
that will talk this out.

100
00:06:26.620 --> 00:06:29.620
We'll call it fold,
take some function, and then,

101
00:06:29.620 --> 00:06:31.980
what we're gonna do is just
pass the value to the function.

102
00:06:31.980 --> 00:06:33.990
We're not gonna box it back up.

103
00:06:33.990 --> 00:06:37.080
So we're just gonna say, all right, give
me a function, I'll give you the thing I'm

104
00:06:37.080 --> 00:06:40.600
holding in my box, but
we're gonna drop out of the box now.

105
00:06:40.600 --> 00:06:42.350
So the last thing we're
gonna do is we'll fold.

106
00:06:43.470 --> 00:06:45.921
So we'll map, map, map,
map, map, map, fold.

107
00:06:45.921 --> 00:06:46.990
Now we can't change anymore.

108
00:06:48.950 --> 00:06:50.790
Alright, there's some things to say here,
but

109
00:06:50.790 --> 00:06:55.550
let's just like level set,
take a deep breath, think about this,

110
00:06:55.550 --> 00:07:01.705
ask me questions [INAUDIBLE]
&gt;&gt; With map,

111
00:07:01.705 --> 00:07:07.306
you said the purpose of it was to
keep the value in the box, right?

112
00:07:07.306 --> 00:07:08.240
&gt;&gt; Yes.

113
00:07:08.240 --> 00:07:11.420
&gt;&gt; So another way you could do
that would be to like create

114
00:07:11.420 --> 00:07:13.670
some state with a closure and object.

115
00:07:13.670 --> 00:07:16.390
So I was just wondering
what's the benefit of

116
00:07:16.390 --> 00:07:20.030
creating a new box versus changing
the state of an existing box.

117
00:07:20.030 --> 00:07:24.111
&gt;&gt; So, I actually,
you can implement this any way you want,

118
00:07:24.111 --> 00:07:27.207
as long as it maintains
the contract of map?

119
00:07:27.207 --> 00:07:30.948
So I could write a class called Box,
and it could have some state, and

120
00:07:30.948 --> 00:07:33.540
as I map it'll just change
its internal state.

121
00:07:34.690 --> 00:07:38.090
But I want, map is only map,

122
00:07:38.090 --> 00:07:43.190
if it is a function,
meaning if I call it twice,

123
00:07:43.190 --> 00:07:46.720
it gives me with the same input,
it gives the same output.

124
00:07:46.720 --> 00:07:49.830
I have a hint that if I'm maintaining
state and altering it with maps,

125
00:07:49.830 --> 00:07:54.290
I'm gonna get different output for input,
maybe, I don't know, we'll have to see.

126
00:07:54.290 --> 00:07:57.450
But we also have the ideas of, we could,

127
00:07:57.450 --> 00:07:59.730
we can implement it like 20
different ways in JavaScript.

128
00:07:59.730 --> 00:08:03.130
So there's just the easiest way I
could think to do it, shortest way.

129
00:08:06.670 --> 00:08:10.495
Me too,
to string on this instead of inspect,

130
00:08:10.495 --> 00:08:15.215
so that we can call to string,
if we ever end up with that.

131
00:08:15.215 --> 00:08:20.390
But anyway, so
I wanna call it a couple more things here.

132
00:08:20.390 --> 00:08:24.810
But first, let's just kind of
still discuss what's happening.

133
00:08:24.810 --> 00:08:28.409
So what's going on is, pp here,

134
00:08:28.409 --> 00:08:34.330
it's like what's that
the snowball of junk.

135
00:08:34.330 --> 00:08:39.393
[LAUGH] It just keeps accumulating state,
right, nothing's connected, data

136
00:08:39.393 --> 00:08:44.982
isn't flowing linearly, it's that back to
that procedural step by step, low level,

137
00:08:44.982 --> 00:08:50.230
accumulating state for each of these
lines to communicate with the next line.

138
00:08:50.230 --> 00:08:53.660
We have to create state and
just throw it out to the world.

139
00:08:53.660 --> 00:08:58.130
Down here, what we are doing is we
are trapping it, like a fly in a jar.

140
00:08:58.130 --> 00:09:01.310
This X is gone forever after that map.

141
00:09:01.310 --> 00:09:02.970
I don't have to think about it anymore.

142
00:09:04.520 --> 00:09:08.470
So I don't have to worry about trimmed
being used down here somewhere.

143
00:09:08.470 --> 00:09:12.940
It's gone after this
little nap in the middle.

144
00:09:12.940 --> 00:09:17.112
So I'm able to contain state
to where I don't end up

145
00:09:17.112 --> 00:09:22.370
accidently introducing complexity
into my app by introducing more and

146
00:09:22.370 --> 00:09:23.619
more state, and never getting rid of it.

147
00:09:25.010 --> 00:09:28.760
The other thing is interesting,
it's unifying all syntax, right?

148
00:09:28.760 --> 00:09:31.700
So we're calling a method here,
we're calling a function there,

149
00:09:31.700 --> 00:09:37.270
we're calling a constructor,
a binary operator, a class function.

150
00:09:37.270 --> 00:09:39.540
So, this is great.

151
00:09:39.540 --> 00:09:44.220
I'm able to take all the syntax that's
like not composable and compose it

152
00:09:44.220 --> 00:09:49.085
into this kind of admittedly like
a jungle gym of structure, right?

153
00:09:49.085 --> 00:09:51.520
[LAUGH] It's like we're
gonna fly through this, but

154
00:09:51.520 --> 00:09:55.420
it's like dropping the coin in the slot
and then just watching it flow through.

155
00:09:55.420 --> 00:10:00.620
And that makes your programs much,
much, more digestible,

156
00:10:00.620 --> 00:10:03.550
because I don't have to go look
anywhere else, or see what's happening.

157
00:10:03.550 --> 00:10:04.880
I know, at a high level,

158
00:10:04.880 --> 00:10:09.440
it's just gonna, there's nothing I
can do besides flow through this.

159
00:10:09.440 --> 00:10:11.650
So that's really exciting.

160
00:10:11.650 --> 00:10:15.930
So box is a functor because
it has a map method.

161
00:10:15.930 --> 00:10:17.300
That's what we're defining as a functor.

162
00:10:17.300 --> 00:10:23.966
A thing with a map method can be defined
in terms of objects or other things.

163
00:10:23.966 --> 00:10:29.195
Mathematically, it's the operation as well

164
00:10:29.195 --> 00:10:35.620
as the ability to put it in the box,
or how do I say that.

165
00:10:35.620 --> 00:10:39.300
The combination of calling map and

166
00:10:39.300 --> 00:10:42.770
the box tab type would lead
to what we call functor.

167
00:10:43.920 --> 00:10:46.340
But here, for all intensive purposes,

168
00:10:46.340 --> 00:10:51.650
we have a linear control flow, we have
a thing that we're calling a functor.

169
00:10:51.650 --> 00:10:52.442
It's box.

170
00:10:52.442 --> 00:10:54.430
It's really the identity functor.

171
00:10:54.430 --> 00:10:58.300
So let's go ahead and, well, no,
I'm gonna leave it as box because that's

172
00:10:58.300 --> 00:11:01.750
how these [LAUGH] exercises got it,
but the identity functor.

173
00:11:01.750 --> 00:11:04.780
Now these things become more and
more useful, because what we're doing,

174
00:11:04.780 --> 00:11:09.460
in addition to this is
abstracting function application.

175
00:11:09.460 --> 00:11:11.240
We're not calling these functions.

176
00:11:11.240 --> 00:11:13.800
We're given box, the function
to call we're saying hey, box,

177
00:11:13.800 --> 00:11:15.120
call that function for me.

178
00:11:15.120 --> 00:11:18.820
The function call happens
here within the box, right?

179
00:11:20.030 --> 00:11:21.400
We can do some cool stuff there.

180
00:11:21.400 --> 00:11:25.290
We can deal with async stuff,
we can deal with errors.

181
00:11:25.290 --> 00:11:26.890
We can choose not to apply it.

182
00:11:26.890 --> 00:11:28.409
We can apply it 1000 times, whatever.

183
00:11:29.590 --> 00:11:35.310
And so, by abstracting function
application, we're gonna gain a lot of

184
00:11:35.310 --> 00:11:40.160
valuable tools, and it also unifies pretty

185
00:11:40.160 --> 00:11:44.780
much all these ways to apply functions,
and we'll see that going forward.

