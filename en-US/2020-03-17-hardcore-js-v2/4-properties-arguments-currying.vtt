WEBVTT

1
00:00:00.250 --> 00:00:03.927
Properties, let's talk about so
add and multiply, you know,

2
00:00:03.927 --> 00:00:07.549
they hold properties you can
call it add associative, right?

3
00:00:07.549 --> 00:00:12.290
It doesn't matter how I
parenthesize the inner adds, right?

4
00:00:12.290 --> 00:00:13.570
It's always gonna be same result.

5
00:00:13.570 --> 00:00:16.445
So if I'm adding, one plus two plus three,

6
00:00:16.445 --> 00:00:20.345
or one plus two plus three,
it's always gonna be the same.

7
00:00:20.345 --> 00:00:24.820
Commutative, we can switch the arguments
around same answer, right?

8
00:00:24.820 --> 00:00:27.340
We have identity, 0 here is our identity.

9
00:00:27.340 --> 00:00:29.740
It doesn't, because it's commutative
I put it in left to right.

10
00:00:30.980 --> 00:00:34.140
And, just gives me my value back.

11
00:00:34.140 --> 00:00:40.060
And, multiply distributes over
addition which is, need to know.

12
00:00:40.060 --> 00:00:44.440
But this is just an example of some
like actual calculation function but

13
00:00:44.440 --> 00:00:49.704
we're gonna be running our entire program
in terms of these calculation functions.

14
00:00:49.704 --> 00:00:54.054
And they will indeed hold a lot of
these properties which end up being

15
00:00:54.054 --> 00:00:57.430
extremely valuable as you
build up a giant program.

16
00:00:57.430 --> 00:01:01.824
And you wanna know how to
maintain flexibility while still

17
00:01:01.824 --> 00:01:04.693
providing all the pieces to compose,

18
00:01:04.693 --> 00:01:10.714
essentially gives you a rule set around
composition, which is very valuable.

19
00:01:10.714 --> 00:01:13.570
So this is the kinda stuff
we're gonna be reading today.

20
00:01:13.570 --> 00:01:15.825
You're welcome to stand up and
leave right now if you'd like.

21
00:01:15.825 --> 00:01:20.850
[LAUGH]
So we'll learn how to do this in a minute,

22
00:01:20.850 --> 00:01:23.880
but this is not too far off from that,
right?

23
00:01:23.880 --> 00:01:28.610
And indeed all these hot properties and
contracts, they come along with them.

24
00:01:29.800 --> 00:01:35.550
So let's get into our
first coding adventure.

25
00:01:35.550 --> 00:01:38.090
We're gonna have some fun here for
a second.

26
00:01:39.260 --> 00:01:42.908
The reason we're doing this right off
the bat is I was like yeah, functions.

27
00:01:42.908 --> 00:01:44.290
Yeah, we're gonna program with functions,

28
00:01:44.290 --> 00:01:49.255
functions take one input and give you one
output and immediately have two inputs.

29
00:01:49.255 --> 00:01:51.640
[LAUGH] So what does that mean?

30
00:01:53.020 --> 00:01:58.089
So let's go out ahead and
play with inputs for a second.

31
00:01:58.089 --> 00:02:05.900
So, I can actually say, why don't we write
a function that takes all of it at once.

32
00:02:05.900 --> 00:02:11.010
We'll call it, toPair right?

33
00:02:11.010 --> 00:02:17.270
So instead of we can say this function,
right, where we destructure an array.

34
00:02:19.000 --> 00:02:25.094
And I call it like this, 1,
2 is the same as this function,

35
00:02:25.094 --> 00:02:30.351
exactly like we can show that
giving a pair as a single

36
00:02:30.351 --> 00:02:36.260
argument is the same as
giving multiple arguments.

37
00:02:36.260 --> 00:02:41.280
So we can show that by making
a proof where we actually provide

38
00:02:41.280 --> 00:02:45.010
the transformation to and
from the same function.

39
00:02:45.010 --> 00:02:47.170
So, say we take this function f.

40
00:02:48.300 --> 00:02:52.088
And we're gonna take in two arguments,
right x and y.

41
00:02:52.088 --> 00:02:56.180
And what we're gonna do is call add(x, y).

42
00:02:56.180 --> 00:02:59.520
And instead,
we're actually gonna take in a pair.

43
00:02:59.520 --> 00:03:04.730
Cool, so we can say, F.

44
00:03:04.730 --> 00:03:07.270
So I can take any function
of two arguments and

45
00:03:07.270 --> 00:03:11.280
turn it into a function that takes a pair
and then still calls that function.

46
00:03:11.280 --> 00:03:12.690
So let's try it down here.

47
00:03:13.910 --> 00:03:16.400
Don't worry if you're not fully
understanding everything here,

48
00:03:16.400 --> 00:03:22.260
I just wanna kinda show you that we
can get to play with these arguments

49
00:03:22.260 --> 00:03:28.020
many ways and it's gonna be
valuable in your FP adventures.

50
00:03:28.020 --> 00:03:34.070
So now I can call two pair on ad, and
we'll call that with like, 1 or 2 here.

51
00:03:34.070 --> 00:03:37.853
So the result is that
we'll log the result.

52
00:03:37.853 --> 00:03:42.670
[BLANK AUDIO] Cool it's 3 it works.

53
00:03:42.670 --> 00:03:43.830
How about from pair,

54
00:03:43.830 --> 00:03:47.230
can we go the other way can we
recover our function originally?

55
00:03:47.230 --> 00:03:52.796
We sure can, we'll take one at a time and
we'll just turn it into a pair this way.

56
00:03:52.796 --> 00:03:56.677
I'll say fromPair,

57
00:03:56.677 --> 00:04:01.350
cool, so let's try that
fromPair around the two pair.

58
00:04:01.350 --> 00:04:06.860
Here we go, we turned it into
a function that takes a pair and

59
00:04:06.860 --> 00:04:09.650
we turn it back into a function
that takes each argument at once.

60
00:04:09.650 --> 00:04:15.096
So let's give it each argument,
there we go, we still get to 3.

61
00:04:15.096 --> 00:04:20.821
All right, so
in a way since we just proved that taking

62
00:04:20.821 --> 00:04:26.674
two separate arguments x and
y is the exact same thing is

63
00:04:26.674 --> 00:04:32.272
isomorphic to the function
that takes a pair array,

64
00:04:32.272 --> 00:04:37.440
we could just do stuff like, call args.

65
00:04:37.440 --> 00:04:40.690
And we can start to play around with the
definitions of our functions because we

66
00:04:40.690 --> 00:04:41.530
know they're equivalent.

67
00:04:43.260 --> 00:04:46.390
So in that same vein, just for
fancies, let's do flip.

68
00:04:46.390 --> 00:04:53.580
[LAUGH] So, does anybody have any
questions on two pair before I move on?

69
00:04:53.580 --> 00:04:54.615
It's not that serious.

70
00:04:54.615 --> 00:04:57.000
[LAUGH] Let's try flip.

71
00:04:57.000 --> 00:05:00.352
So we're gonna take f takes, x and y.

72
00:05:00.352 --> 00:05:05.249
And we're actually gonna say no,
it's gonna take y and x.

73
00:05:05.249 --> 00:05:08.330
[LAUGH]
It's like messing around with

74
00:05:08.330 --> 00:05:09.510
people's like Etsy host.

75
00:05:11.100 --> 00:05:17.610
And flip, we can flip back and forth,
I'm not gonna go through the other side.

76
00:05:17.610 --> 00:05:20.490
But why don't we add a terrible
example it's commutative.

77
00:05:20.490 --> 00:05:23.890
It doesn't even change
the change the [LAUGH] result.

78
00:05:23.890 --> 00:05:26.298
But anyway, [LAUGH] split bad.

79
00:05:26.298 --> 00:05:34.306
We'll call 1, 3 and we'll still get 4 even
though we flipped the arguments around.

80
00:05:34.306 --> 00:05:37.821
But that's kinda fun,
it took a function and

81
00:05:37.821 --> 00:05:42.550
returned the function back that
flip the arguments around.

82
00:05:42.550 --> 00:05:46.270
And we can right unflip and
it'll flip them back around and

83
00:05:46.270 --> 00:05:50.370
they'll prove the isomorphism that those
two functions are actually equivalent.

84
00:05:50.370 --> 00:05:54.070
I know that this is
the same function as that.

85
00:05:54.070 --> 00:05:58.310
Doesn't matter about the argument order,
it's just how you call it.

86
00:05:58.310 --> 00:06:03.106
Okay, so
finally we're gonna get into currying.

87
00:06:03.106 --> 00:06:08.546
So we can write a function called curry
that takes in a function and instead of

88
00:06:08.546 --> 00:06:14.330
taking one or more arguments upfront,
we're gonna take one argument at a time.

89
00:06:14.330 --> 00:06:19.610
We'll take our x, we'll take our y,
and then we'll call out f( x, y).

90
00:06:19.610 --> 00:06:22.110
This is this kinda a bizarre thing to do.

91
00:06:22.110 --> 00:06:25.482
So what's gonna happen here is,
we're gonna take a function called add.

92
00:06:25.482 --> 00:06:28.480
We're gonna curry it, and
let's break this out so

93
00:06:28.480 --> 00:06:32.400
we can see this a little bit better,
curried add.

94
00:06:35.060 --> 00:06:40.240
What's gonna happen is I can say add1,
we'll call this increment.

95
00:06:42.690 --> 00:06:47.040
So this is a function that takes an x and
then returns a new function waiting for

96
00:06:47.040 --> 00:06:48.920
a y and
then it will actually call the function.

97
00:06:50.950 --> 00:06:54.760
And let's just show
the increment actually works.

98
00:06:57.790 --> 00:06:58.940
The extra hour y'all.

99
00:07:00.950 --> 00:07:06.745
I'm gonna increment that doesn't
look right increment, there we go.

100
00:07:06.745 --> 00:07:08.970
[LAUGH] All right, we should get 3.

101
00:07:08.970 --> 00:07:11.495
Oops, no, we don't,
anybody see a problem here?

102
00:07:11.495 --> 00:07:19.470
And a, thank you her we go.

103
00:07:19.470 --> 00:07:22.858
So we get for
defining variables never defined variable.

104
00:07:22.858 --> 00:07:24.958
All right, cool, so we get 3, and

105
00:07:24.958 --> 00:07:28.389
so this function will just
increment any number, right?

106
00:07:28.389 --> 00:07:32.870
If I pass it to four I should get a five,
terrific.

107
00:07:32.870 --> 00:07:40.380
So what curry did was
allow me to give Add.

108
00:07:40.380 --> 00:07:44.582
But I can give it a function or
an argument and it remembers it.

109
00:07:44.582 --> 00:07:49.680
So then, it's just waiting for
it's y, it remembers its x.

110
00:07:49.680 --> 00:07:54.660
So we can write an uncurry,
just like we did with the other functions,

111
00:07:54.660 --> 00:07:57.520
so it takes both an x and a y upfront.

112
00:07:58.830 --> 00:08:02.850
And then what we'll do is curry
our function that was curried

113
00:08:02.850 --> 00:08:04.470
with the x and then the y.

114
00:08:05.780 --> 00:08:07.760
So I just showed you a proof.

115
00:08:07.760 --> 00:08:11.450
I can take add and
I can prove that I can turn it to and

116
00:08:11.450 --> 00:08:16.200
from a curry without actually changing
the behavior of the function.

117
00:08:16.200 --> 00:08:19.400
It's the equivalent function, it has all
the same data, it has the same inputs and

118
00:08:19.400 --> 00:08:20.590
outputs.

119
00:08:20.590 --> 00:08:23.310
So, what does that mean for us?

120
00:08:23.310 --> 00:08:27.731
That means we can curry any function,
we can take any function of multiple

121
00:08:27.731 --> 00:08:30.888
arguments, and
make it take one argument at a time.

122
00:08:30.888 --> 00:08:32.270
Let's talk about why that's useful.

123
00:08:33.900 --> 00:08:37.000
So let's go ahead and
just stick with add and

124
00:08:37.000 --> 00:08:40.690
curry here for a second,
leave result here.

125
00:08:40.690 --> 00:08:45.820
So one of my favorite things to
do the way I explain this is to

126
00:08:45.820 --> 00:08:51.074
define things in terms of like,
let's say we have modulo.

127
00:08:51.074 --> 00:08:57.439
And that takes an x and
a y and we'll do x modulo y,

128
00:08:57.439 --> 00:09:02.960
and I never remember the order of this.

129
00:09:02.960 --> 00:09:04.280
Let's just curry it right off the bat.

130
00:09:04.280 --> 00:09:08.424
We'll just create this entire function and

131
00:09:08.424 --> 00:09:13.689
if I say modulo 2 is my function,
so say isodd is mod 2.

132
00:09:13.689 --> 00:09:19.250
What that's gonna do is preload
modulo with one of its arguments.

133
00:09:19.250 --> 00:09:22.696
And then I have a function back
waiting for its second argument.

134
00:09:22.696 --> 00:09:27.665
So I've kinda given x as 2,
and I get a new function back,

135
00:09:27.665 --> 00:09:30.018
that looks a lot like this.

136
00:09:30.018 --> 00:09:34.350
Oops, wow, what am I doing?

137
00:09:36.180 --> 00:09:41.069
There we go, so if I have like 2,

138
00:09:41.069 --> 00:09:44.222
y, I get 2 modulo y.

139
00:09:44.222 --> 00:09:47.560
All right, now I can see my problem
I got the 2 in the wrong spot.

140
00:09:47.560 --> 00:09:50.455
So, I don't have flip anymore.

141
00:09:50.455 --> 00:09:53.900
[LAUGH] But let's just do it this way.

142
00:09:53.900 --> 00:09:57.640
There we go add X.

143
00:09:57.640 --> 00:10:01.660
Okay, cool so if I say is odd,
see if this works, and

144
00:10:01.660 --> 00:10:06.830
I say 2, I get zero, so
that means it's false.

145
00:10:06.830 --> 00:10:11.310
If I give it 3, I get 1,
that means it's true.

146
00:10:11.310 --> 00:10:11.810
Hooray.

