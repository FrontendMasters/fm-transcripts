WEBVTT

1
00:00:00.430 --> 00:00:05.054
So here is the codepen and

2
00:00:05.054 --> 00:00:09.330
put it in a string so
we don't get a syntax error.

3
00:00:09.330 --> 00:00:13.280
So we're going to do is turn this into a
pipeline rather than introducing state and

4
00:00:13.280 --> 00:00:14.750
having an order of events.

5
00:00:14.750 --> 00:00:17.360
We're going to write less than stock.

6
00:00:17.360 --> 00:00:20.070
We'll leave this on the screen so
we could look at it but to rename it so

7
00:00:20.070 --> 00:00:20.640
it doesn't break.

8
00:00:22.760 --> 00:00:23.890
Oops.

9
00:00:23.890 --> 00:00:26.780
And we'll say it's a function
we're gonna compose it.

10
00:00:28.560 --> 00:00:29.770
Compose.

11
00:00:29.770 --> 00:00:32.430
And the first thing that happens in
this whole thing we take in cars and

12
00:00:32.430 --> 00:00:34.270
we call last on cars.

13
00:00:34.270 --> 00:00:35.330
All right, call last.

14
00:00:36.410 --> 00:00:41.210
Then we call prop within stock and
then so last turns into reverse cars and

15
00:00:41.210 --> 00:00:46.900
reverse cars goes in there so it might
as well just put this right there.

16
00:00:46.900 --> 00:00:48.060
There we go.

17
00:00:48.060 --> 00:00:49.100
So we're using currying.

18
00:00:50.150 --> 00:00:53.272
So it goes the last curious
problem there you are.

19
00:00:53.272 --> 00:00:55.400
And you'll see this pattern a lot.

20
00:00:55.400 --> 00:00:59.494
If you see something like,

21
00:00:59.494 --> 00:01:04.300
f of x and then you know, g on x and

22
00:01:04.300 --> 00:01:08.216
then we have z z=h(y).

23
00:01:08.216 --> 00:01:11.349
So each of these arguments
are just being kinda zigzagged and

24
00:01:11.349 --> 00:01:14.190
you can just turn that into a composition.

25
00:01:14.190 --> 00:01:19.326
You can also take
something like f of g of h.

26
00:01:19.326 --> 00:01:23.720
And well, backwards but, f of g of h, and

27
00:01:23.720 --> 00:01:29.140
that's equivalent to
the composition of f g and h.

28
00:01:29.140 --> 00:01:36.138
So kind of unrolls this, this nesting,
which is nice name of first car.

29
00:01:36.138 --> 00:01:41.190
So we're gonna use compose prop and head
to retrieve the name in the first car to

30
00:01:41.190 --> 00:01:47.170
start with our compose as we do,
so we went the first car.

31
00:01:47.170 --> 00:01:50.340
So I guess we'll use head to get
the first of the list of cars

32
00:01:50.340 --> 00:01:52.490
because we're gonna pass in cars here.

33
00:01:52.490 --> 00:01:54.990
Loosehead from there again,

34
00:01:54.990 --> 00:01:59.405
just like the last please prop,
and I want to get the name.

35
00:01:59.405 --> 00:02:02.170
Does the data coming in,
they all have a name.

36
00:02:02.170 --> 00:02:06.220
So we'll go ahead and
just call name and does that work.

37
00:02:07.540 --> 00:02:08.560
It works, ta da!

38
00:02:10.780 --> 00:02:15.260
If I do last or whatever, I'll get
the wrong name, but it'll still work.

39
00:02:16.350 --> 00:02:18.020
It's a different name, same idea.

40
00:02:19.840 --> 00:02:22.620
See what's going on to,
let's go on to exercise three.

41
00:02:24.470 --> 00:02:28.900
Here's the helper function average
to refactor the average dollar value

42
00:02:28.900 --> 00:02:30.140
as a composition.

43
00:02:30.140 --> 00:02:30.640
Okay?

44
00:02:32.000 --> 00:02:36.891
This one's bizarre says leave it be but
I still want to play with it.

45
00:02:36.891 --> 00:02:41.678
[LAUGH] Alright, so we're gonna
go with the average dollar value

46
00:02:41.678 --> 00:02:44.905
says we're gonna grab Sita dollar value.

47
00:02:44.905 --> 00:02:48.400
Well, I know this is just the prop
function we didn't really talk too

48
00:02:48.400 --> 00:02:51.200
much about the prop function I
probably should have introduced that.

49
00:02:51.200 --> 00:02:55.330
Let me just do that for completeness sake.

50
00:02:55.330 --> 00:02:59.680
If I say prop dollar value

51
00:02:59.680 --> 00:03:04.680
that is the same as a function that takes
some x and calls dollar value on it.

52
00:03:04.680 --> 00:03:09.570
In fact, same things probably implemented
this way where we call x dollar value.

53
00:03:11.020 --> 00:03:12.110
So these are all the same, right?

54
00:03:14.310 --> 00:03:17.470
Let's go ahead and change that then.

55
00:03:18.790 --> 00:03:23.240
So do dot prop dollar value.

56
00:03:25.290 --> 00:03:30.150
And now we can start to see that
cars goes into this thing and

57
00:03:30.150 --> 00:03:34.030
we have that kind of zigzag pattern
where this has got an output and

58
00:03:34.030 --> 00:03:35.680
that output goes into this input.

59
00:03:35.680 --> 00:03:38.855
So why don't we rewrite this
as a composition right below

60
00:03:41.314 --> 00:03:45.760
I'll rename that because const is
the strongest thing in the world, right?

61
00:03:45.760 --> 00:03:48.455
It throws an error if
I override the thing.

62
00:03:48.455 --> 00:03:52.253
[LAUGH] So we do that or compose.

63
00:03:54.501 --> 00:03:57.193
And we just have to call average.

64
00:03:59.317 --> 00:04:02.583
It worked, it worked.

65
00:04:02.583 --> 00:04:04.440
Hooray.

66
00:04:04.440 --> 00:04:09.049
Is this the same answer you all got or
did you get a different answer?

67
00:04:09.049 --> 00:04:10.660
I'm seeing heads nodding.

68
00:04:11.910 --> 00:04:13.720
Their head nodding left or right actually.

69
00:04:13.720 --> 00:04:14.990
It's a wrong nod, no I'm just kidding.

70
00:04:14.990 --> 00:04:16.604
They're nodding up and
down for those online.

71
00:04:19.362 --> 00:04:21.925
So then we finally go to exercise four.

72
00:04:23.504 --> 00:04:28.610
Let's see here, so
this is our sanitization function.

73
00:04:28.610 --> 00:04:33.560
I'll replace anything that's not a word
with underscore, SanitizeNames, okay?

74
00:04:33.560 --> 00:04:37.530
And it says it wants us to write a
function using compose that returns a list

75
00:04:37.530 --> 00:04:39.540
of lowercase and underscored names.

76
00:04:39.540 --> 00:04:42.590
Which is this, but
it needs to be lower cased, interesting.

77
00:04:42.590 --> 00:04:46.270
Okay, so we're gonna replace the things
but we also have to lowercase it.

78
00:04:46.270 --> 00:04:52.710
So start by composing, start, and we're
going to take in all the, the cars, right?

79
00:04:54.210 --> 00:04:58.470
So why don't we, and this is kind of a fun
thing to do, but we'll do it like this.

80
00:04:58.470 --> 00:04:59.881
First we'll map underscore.

81
00:05:02.805 --> 00:05:08.630
And then, we're gonna go ahead and
map(_.toLower).

82
00:05:08.630 --> 00:05:10.535
I don't know if I gave you this function.

83
00:05:10.535 --> 00:05:13.410
[LAUGH] So that's fine.

84
00:05:13.410 --> 00:05:17.950
But it's in RandA and you could had
made it on so, come on, it's a built in.

85
00:05:17.950 --> 00:05:20.940
[LAUGH]
Alright, so

86
00:05:20.940 --> 00:05:25.010
we're not passing yet,
see what's happening here.

87
00:05:25.010 --> 00:05:27.185
String replaces not a function.

88
00:05:27.185 --> 00:05:28.798
&gt;&gt; You need the name.

89
00:05:28.798 --> 00:05:30.720
&gt;&gt; You need the name [INAUDIBLE].

90
00:05:30.720 --> 00:05:32.680
&gt;&gt; So wait, I need what?

91
00:05:32.680 --> 00:05:33.180
&gt;&gt; Property.

92
00:05:34.320 --> 00:05:35.340
&gt;&gt; Thank you.

93
00:05:35.340 --> 00:05:38.540
So if we do .map, thank you prop.

94
00:05:38.540 --> 00:05:40.980
Look at these maps, this is ridiculous.

95
00:05:40.980 --> 00:05:43.480
We can do something
that we'll learn later.

96
00:05:43.480 --> 00:05:44.360
Yeah, it works.

97
00:05:44.360 --> 00:05:46.500
Thank you for your help.

98
00:05:46.500 --> 00:05:49.578
So first of all, map all the names,
then we'll underscore all of them and

99
00:05:49.578 --> 00:05:51.081
then we'll lowercase all of them.

100
00:05:51.081 --> 00:05:56.950
Well it turns out this map kind of
distributes over the compose here,

101
00:05:56.950 --> 00:06:01.701
we can factor it out to the outside and
get rid of all these

102
00:06:01.701 --> 00:06:07.360
nested loops and
make it one composition on the inside.

103
00:06:07.360 --> 00:06:08.223
So not points.

104
00:06:10.210 --> 00:06:11.840
Oops, there you go.

105
00:06:11.840 --> 00:06:14.860
So that's kinda neat, and

106
00:06:14.860 --> 00:06:20.390
that follows from a law on factors
which we'll talk about after lunch, but

107
00:06:20.390 --> 00:06:24.370
that's a, properties in action,
math in action, right there.

108
00:06:24.370 --> 00:06:31.140
Bam-bam should I call this and so
that that does the trick there.

109
00:06:31.140 --> 00:06:33.460
Any questions on this?

110
00:06:33.460 --> 00:06:38.790
&gt;&gt; If we go back up to our, abstract map
out where we took the one map two, three.

111
00:06:38.790 --> 00:06:39.570
&gt;&gt; Yes.

112
00:06:39.570 --> 00:06:44.080
&gt;&gt; What is actually, like how is that
this is obviously RandA is doing

113
00:06:44.080 --> 00:06:48.550
the combinatorics to make that logic work.

114
00:06:48.550 --> 00:06:49.890
&gt;&gt; Well, yes.

115
00:06:49.890 --> 00:06:54.295
&gt;&gt; So in sketch,
how is three maps being turned into one?

116
00:06:54.295 --> 00:06:59.040
&gt;&gt; Yeah, I mean I can actually kind
of walk through what happens here and

117
00:06:59.040 --> 00:07:05.420
see if that opens up the inner kind of
clears up what exactly is happening.

118
00:07:07.050 --> 00:07:11.765
So they say this stuff isn't performing
and try to fuse three four loops.

119
00:07:11.765 --> 00:07:15.375
&gt;&gt; [LAUGH]
&gt;&gt; Yeah, I need to do it this as two.

120
00:07:16.510 --> 00:07:19.070
Okay, and I still, all right cool.

121
00:07:19.070 --> 00:07:22.960
So, now if I make this one 2 and
that one 1 it still passes, right?

122
00:07:22.960 --> 00:07:27.710
We still get that happy green
nice happy green [LAUGH].

123
00:07:27.710 --> 00:07:31.800
So, what's happening with map,
I think map is defined like this.

124
00:07:31.800 --> 00:07:38.740
Take some f and some x and
just calls x map (f).

125
00:07:38.740 --> 00:07:40.750
Just delegates to the object.

126
00:07:40.750 --> 00:07:43.240
So, this is a list that
we'll call map in the list.

127
00:07:44.580 --> 00:07:48.300
And we know because we're gonna
map over this entire suite,

128
00:07:48.300 --> 00:07:51.470
take these maps off, well,
I guess have to carry it.

129
00:07:51.470 --> 00:07:53.750
We'll use our own here, get rid of theirs.

130
00:07:55.360 --> 00:07:59.560
And what's gonna happen is we know
that as we loop through this,

131
00:07:59.560 --> 00:08:01.550
we get an array of names.

132
00:08:01.550 --> 00:08:05.460
And then we loop through it again, we get
a list of underscores [INAUDIBLE] again.

133
00:08:05.460 --> 00:08:11.748
There's a property that states
if I have a composition,

134
00:08:11.748 --> 00:08:19.613
map f map g, that's always equal to
mapping the composition of f and g.

135
00:08:21.992 --> 00:08:27.989
And so f becomes just this entire
composition and x gets hit with all these

136
00:08:27.989 --> 00:08:34.410
functions each time in one loop rather
than looping and looping and looping.

137
00:08:34.410 --> 00:08:36.470
And there's these,

138
00:08:36.470 --> 00:08:41.700
map is coming from the category theory of
mapping this category into that category.

139
00:08:41.700 --> 00:08:44.190
And we can talk a little bit about that.

140
00:08:44.190 --> 00:08:47.980
But because of the contract
the properties of map.

141
00:08:47.980 --> 00:08:50.780
This will always hold if
you're writing functions.

142
00:08:50.780 --> 00:08:56.730
If you're not writing functions,
anarchy [LAUGH], so there's that.

143
00:08:56.730 --> 00:09:01.000
Thank you.
That was a fun thing to kind of discuss,

144
00:09:01.000 --> 00:09:03.120
which we'll see a little bit later but

145
00:09:03.120 --> 00:09:06.180
I'm not going to get too much this
because it's much more introductory.

146
00:09:06.180 --> 00:09:09.770
I wanna get mired in the math just that
you know that it is there if you want it.

