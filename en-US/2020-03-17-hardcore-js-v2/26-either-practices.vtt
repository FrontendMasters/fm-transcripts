WEBVTT

1
00:00:00.180 --> 00:00:05.843
Here's we're gonna try to do, we're gonna
try to write street, again, with either.

2
00:00:05.843 --> 00:00:10.163
And what we'll notice is that there's an
if else, and when you see an if else here,

3
00:00:10.163 --> 00:00:14.105
you can think, I might be able to do
this with either, will it help me?

4
00:00:14.105 --> 00:00:19.606
Well, it actually make my program safer or
is an if else the right thing to do?

5
00:00:19.606 --> 00:00:22.360
One thing I should mention
is ternary operators.

6
00:00:23.540 --> 00:00:27.104
If we did this return address,

7
00:00:27.104 --> 00:00:32.049
address.street otherwise, no street.

8
00:00:33.669 --> 00:00:37.860
That is way more functional
than an if else.

9
00:00:37.860 --> 00:00:39.920
It's a single expression,
there's no way for

10
00:00:39.920 --> 00:00:44.470
me to run a bunch of rando
computations in the middle of that.

11
00:00:44.470 --> 00:00:49.617
This is in line with
our returning of value

12
00:00:49.617 --> 00:00:56.982
rather this over here with if else,
I can do like saveToDb.

13
00:00:56.982 --> 00:01:02.190
There's just like a bunch of steps I
run in here and it doesn't really flow.

14
00:01:02.190 --> 00:01:06.678
So, just you should add that, you don't
have to use either whenever you see an if

15
00:01:06.678 --> 00:01:08.664
else, [LAUGH] ternary is just fine.

16
00:01:08.664 --> 00:01:13.015
Okay, so let's go ahead and
start the way we start by,

17
00:01:13.015 --> 00:01:17.379
why don't we just say we'll
put it in a fromNullable.

18
00:01:18.379 --> 00:01:22.830
So this is a way to put it into neither
will either get a right or left here.

19
00:01:22.830 --> 00:01:24.315
Or left with the address.

20
00:01:25.973 --> 00:01:31.542
And then, what we'll do is map
over it to get the street.

21
00:01:31.542 --> 00:01:36.518
And actually it turns out,
Just get rid of this, not keeping with my

22
00:01:36.518 --> 00:01:40.333
best practice of leaving the old one
on the screen, sorry about that.

23
00:01:40.333 --> 00:01:41.966
But we could map over it and

24
00:01:41.966 --> 00:01:47.060
get the street right here where we have
the address, and then we fold it out.

25
00:01:47.060 --> 00:01:50.722
And we say, if you don't have
anything we'll just say, no street.

26
00:01:53.056 --> 00:01:55.540
And otherwise,
we'll just give you the street.

27
00:01:56.940 --> 00:02:01.370
And, I could do this in one fell
swoop by just folding it here or

28
00:02:01.370 --> 00:02:04.796
actually get rid of this,
we get the address here.

29
00:02:04.796 --> 00:02:07.280
We go address.street.

30
00:02:08.853 --> 00:02:10.443
Either way's fine.

31
00:02:10.443 --> 00:02:12.525
I tend to prefer the map, map, map, and

32
00:02:12.525 --> 00:02:15.240
then fold just returns
just takes the value out.

33
00:02:15.240 --> 00:02:17.390
So you're not doing these
kind of computations.

34
00:02:17.390 --> 00:02:18.410
You end up having to refactor.

35
00:02:18.410 --> 00:02:22.210
Like, no, I have to do something else,
I have to push this out into a map.

36
00:02:22.210 --> 00:02:27.765
So, but either one's totally acceptable,
except you're wrong if you did this one.

37
00:02:27.765 --> 00:02:31.774
[LAUGH] No, I'm just kidding,
there's that.

38
00:02:31.774 --> 00:02:35.520
Okay, what's happening there?

39
00:02:35.520 --> 00:02:36.137
I don't know.

40
00:02:38.308 --> 00:02:40.267
Cool, happiness.

41
00:02:40.267 --> 00:02:44.961
Happiness is a green passing bar if you
do TDD which I do less of these days,

42
00:02:44.961 --> 00:02:47.108
the Internet's hard, y'all.

43
00:02:47.108 --> 00:02:52.470
Did the null check, nice and functional,
linear control flow null checks.

44
00:02:53.490 --> 00:02:56.700
Also, I should mention like all
this can be written in point free,

45
00:02:56.700 --> 00:02:58.230
like we learned in
the first half of the day.

46
00:02:59.860 --> 00:03:03.080
We can do some of that when we build
the app we can choose our own adventure.

47
00:03:04.290 --> 00:03:10.754
But yeah, this is all perfectly
functional in either way.

48
00:03:10.754 --> 00:03:14.450
Since refactor stream, again just
to reiterate, we're doing .syntax

49
00:03:14.450 --> 00:03:19.430
because I've seen the second half of the
class which I feel is much more important.

50
00:03:19.430 --> 00:03:22.970
Start to unravel and fall apart if we
try to stay point free all day cuz a lot

51
00:03:22.970 --> 00:03:25.820
of people just learn that and
they're just trying to it's just too much.

52
00:03:25.820 --> 00:03:27.530
So we're reverting back.

53
00:03:28.610 --> 00:03:33.624
I also tend to like .syntax
in JavaScript in particular.

54
00:03:33.624 --> 00:03:39.105
Okay, this one has two null checks,
it's the same thing as above, right?

55
00:03:39.105 --> 00:03:41.962
We do a nullable here.

56
00:03:41.962 --> 00:03:45.730
We're gonna map the street over that,
but that could be null and

57
00:03:45.730 --> 00:03:47.090
then we're gonna get the streets name.

58
00:03:48.120 --> 00:03:49.970
So, let's do that.

59
00:03:51.020 --> 00:03:52.510
I can just copy this part, right?

60
00:03:53.860 --> 00:03:56.202
Nice and easy.

61
00:03:56.202 --> 00:04:00.130
I will keep the old one around
streetName is that what it's called.

62
00:04:01.460 --> 00:04:05.390
Cool, and it takes a user.

63
00:04:06.860 --> 00:04:10.560
And so almost there, we get the street.

64
00:04:10.560 --> 00:04:15.945
And we could map with the street,
get the street.name.

65
00:04:17.155 --> 00:04:21.401
And, the problem here is that, well,

66
00:04:21.401 --> 00:04:25.330
first of all, what do I do wrong?

67
00:04:25.330 --> 00:04:27.400
I got name of null, there we go.

68
00:04:27.400 --> 00:04:33.438
So I need to do another fromNullable
around the street, Which,

69
00:04:33.438 --> 00:04:40.447
again, gives me a either a right of
the street, the thing with the name.

70
00:04:42.142 --> 00:04:47.953
Or right of a left of nothing or
a left of nothing, so on.

71
00:04:47.953 --> 00:04:53.253
But at the end of the day,
just chain, green.

72
00:04:53.253 --> 00:04:55.410
Questions on that one?

73
00:04:56.970 --> 00:04:59.417
Hear you're doing it, your mon outing.

74
00:04:59.417 --> 00:05:02.144
&gt;&gt; if it wasn't like an objective null,

75
00:05:02.144 --> 00:05:07.175
is there like you would you wrap map it or
do some other word of four point

76
00:05:07.175 --> 00:05:12.058
attic transformation of insurance
like an object or something or?

77
00:05:12.058 --> 00:05:13.768
&gt;&gt; For which object [CROSSTALK]?

78
00:05:13.768 --> 00:05:16.584
&gt;&gt; User, was undefined?

79
00:05:16.584 --> 00:05:19.340
&gt;&gt; Of user, boom, yeah,
let's just do that.

80
00:05:19.340 --> 00:05:21.870
So we don't know if users here.

81
00:05:21.870 --> 00:05:24.040
Let's do that and then we'll just chain.

82
00:05:25.280 --> 00:05:29.410
We definitely have a user here
cuz that's how either works.

83
00:05:29.410 --> 00:05:31.260
Boom, that's exactly right.

84
00:05:32.510 --> 00:05:33.574
And this should all pass.

85
00:05:34.971 --> 00:05:37.860
And we just started by saying this may or
may not be there.

86
00:05:37.860 --> 00:05:41.633
So let's just wrap it in a null check and
we'll just change through these.

87
00:05:41.633 --> 00:05:46.494
And if I'm like definitively sure we'll
never ever hit an all in the street

88
00:05:46.494 --> 00:05:49.049
if we get here I can map, that's fine.

89
00:05:49.049 --> 00:05:51.420
Of course, we will help it hit
an a null cuz I built it that way.

90
00:05:53.170 --> 00:05:55.332
[LAUGH] But yeah, Cobain's good question.

91
00:05:55.332 --> 00:05:56.550
&gt;&gt; What's up?

92
00:05:56.550 --> 00:06:00.840
&gt;&gt; Some of that implementation would also
be supposed to functionality decision

93
00:06:00.840 --> 00:06:04.292
where do we need to tell the user
that the user object is failed?

94
00:06:04.292 --> 00:06:07.472
Or would have been more useful to
report the deeper structure or

95
00:06:07.472 --> 00:06:09.910
the higher structure, is that correct?

96
00:06:09.910 --> 00:06:11.258
&gt;&gt; That's a good call.

97
00:06:11.258 --> 00:06:14.863
This kind of propagates the error
like there's an error somewhere.

98
00:06:14.863 --> 00:06:15.957
Here you go.

99
00:06:15.957 --> 00:06:17.517
[LAUGH] And as we change,

100
00:06:17.517 --> 00:06:23.218
what you can see is we're swallowing,
we're recovering the error here.

101
00:06:23.218 --> 00:06:27.490
Particularly like fromNullable is like I'm
just gonna return a left of just nothing.

102
00:06:28.560 --> 00:06:34.502
And, if you want to capture that
this one particular thing was null,

103
00:06:34.502 --> 00:06:36.560
I think there's ways.

104
00:06:36.560 --> 00:06:40.183
But actually, when we can do it is this.

105
00:06:40.183 --> 00:06:43.841
[LAUGH] And then all of a sudden,

106
00:06:43.841 --> 00:06:48.590
I have a right of a right of the name.

107
00:06:48.590 --> 00:06:53.537
And it's kind of neat to see
that like the stack is like,

108
00:06:53.537 --> 00:06:56.709
at what point that things go wrong?

109
00:06:56.709 --> 00:06:57.773
I could also do something like this.

110
00:06:57.773 --> 00:07:01.580
I could say user if we have it,

111
00:07:05.214 --> 00:07:09.855
We can do something like this,

112
00:07:09.855 --> 00:07:14.330
user left, no user, right?

113
00:07:14.330 --> 00:07:17.082
Cool, or I say user, sorry.

114
00:07:17.082 --> 00:07:19.740
And then we can map over that, right?

115
00:07:19.740 --> 00:07:22.980
And then whatever happens,
we'll get pushed down to that fold.

116
00:07:22.980 --> 00:07:27.400
So, there's different kinds of approaches.

117
00:07:27.400 --> 00:07:32.501
But I tend to find that most of
the time if something goes wrong,

118
00:07:32.501 --> 00:07:34.921
you just wanna push this out.

119
00:07:34.921 --> 00:07:37.766
And in fact, you usually wanna do that.

120
00:07:37.766 --> 00:07:41.526
So the color of street name gets to
decide how to handle that when they had

121
00:07:41.526 --> 00:07:42.610
a problem.

122
00:07:42.610 --> 00:07:48.912
These test cases are a little bit
misrepresentative of that situation where

123
00:07:48.912 --> 00:07:54.525
like, null street name is a beautiful
function that takes a user and

124
00:07:54.525 --> 00:07:58.973
returns us an either of null or
a name, a street name.

125
00:07:58.973 --> 00:08:04.542
And, I can see right here that
this thing is gonna give me on or

126
00:08:04.542 --> 00:08:10.354
the other and when I call it I know
how to handle one or the other.

127
00:08:10.354 --> 00:08:15.570
The unfortunate thing about
fromNullable is the way we defined

128
00:08:15.570 --> 00:08:20.000
it is we didn't give it away to say,
what's wrong, like an error message here.

129
00:08:20.000 --> 00:08:24.673
Let me just put that right here if we
wanted, if I could type, [LAUGH] but

130
00:08:24.673 --> 00:08:27.141
we can't, I can't, so we won't.

131
00:08:27.141 --> 00:08:28.588
But it's, yeah,

132
00:08:28.588 --> 00:08:33.664
it's kind of a way to be able to
embed an error message in your left.

133
00:08:33.664 --> 00:08:37.472
And for those of you who know
the maybe monad, I've just given up,

134
00:08:37.472 --> 00:08:38.750
I just don't use it.

135
00:08:38.750 --> 00:08:43.089
I only use either,
because you can provide an error message.

136
00:08:43.089 --> 00:08:46.413
With maybe, it's the exact same type
of can't provide an error message or

137
00:08:46.413 --> 00:08:47.800
just not there, it's there.

138
00:08:49.170 --> 00:08:52.900
And so I tend to use either
with the exact same results and

139
00:08:54.130 --> 00:08:55.660
as we'll see a little bit later today,

140
00:08:57.140 --> 00:09:01.250
the nesting of different types within
each other, you can't flatten.

141
00:09:01.250 --> 00:09:03.880
If I haven't either have
a maybe I can't flatten that.

142
00:09:03.880 --> 00:09:05.180
I have to have an either have an either or

143
00:09:05.180 --> 00:09:08.280
maybe have a maybe, I can't flatten
an array of another type, right?

144
00:09:08.280 --> 00:09:13.670
So, that situation that
happens is a big deal.

145
00:09:13.670 --> 00:09:16.760
It's a lot of what we're dealing with when
we're trying to write functions like this

146
00:09:16.760 --> 00:09:22.390
and we're only gonna touch on this at the
end, but it helps to normalize your types.

147
00:09:22.390 --> 00:09:25.130
I'm just gonna use either everywhere or
task or this.

148
00:09:25.130 --> 00:09:28.714
So you're not having to deal with
situations where you have a maybe

149
00:09:28.714 --> 00:09:29.998
of an either of a tasks.

150
00:09:29.998 --> 00:09:33.030
All right, parseDbUrl.

151
00:09:33.030 --> 00:09:34.143
This one's fun.

152
00:09:34.143 --> 00:09:40.856
What we're gonna do is parse
the configuration then match on that.

153
00:09:40.856 --> 00:09:46.870
And, it looks like,
This will blow up if it can't parse.

154
00:09:46.870 --> 00:09:49.444
I'm not sure if this is gonna blow up.

155
00:09:50.960 --> 00:09:53.260
So I don't know if I need
to run it in a second.

156
00:09:53.260 --> 00:09:55.970
Try catch, but
let's just see what happens.

157
00:09:55.970 --> 00:09:58.080
All right, let's copy and paste.

158
00:09:58.080 --> 00:10:05.276
Okay, so we got parseDbUrl, and
I was gonna rename, it'd like two lines,

159
00:10:05.276 --> 00:10:11.600
right, super easy,
const parseDbUrl, it's config.

160
00:10:11.600 --> 00:10:16.484
We're just gonna tryCatch, and we're
gonna parse it, cuz this could blow up.

161
00:10:18.364 --> 00:10:20.402
And then we're gonna map.

162
00:10:20.402 --> 00:10:23.362
We can do something fun here in a second,
let's change it up a little bit.

163
00:10:24.751 --> 00:10:29.812
And then finally,
we're gonna fold out the last value,

164
00:10:29.812 --> 00:10:37.250
which again, in this case, just whatever,
identity, I think that's right.

165
00:10:37.250 --> 00:10:42.660
Yeah, missing argument to this,
there it is, cool.

166
00:10:42.660 --> 00:10:50.920
So, we got, Null, expects to null
is the thing that is the return on?

167
00:10:50.920 --> 00:10:51.540
&gt;&gt; Yeah.

168
00:10:51.540 --> 00:10:53.538
&gt;&gt; Cool, all right, great.

169
00:10:55.005 --> 00:10:59.168
So and that's capturing this, so you got
an error, but I threw it away in return

170
00:10:59.168 --> 00:11:03.040
null instead of the actual error,
which probably should have done that.

171
00:11:03.040 --> 00:11:03.720
Anyway, that's fine.

172
00:11:04.980 --> 00:11:05.830
One thing we could do, but yeah,

173
00:11:05.830 --> 00:11:09.780
we could actually log the error here
like cuz tryCatch tells you the error.

174
00:11:09.780 --> 00:11:12.900
I mean, this is like the actual
error that passed through.

175
00:11:12.900 --> 00:11:18.990
And then also, another thing that's
interesting to me is that here,

176
00:11:18.990 --> 00:11:21.690
we could start by saying,
well, you know what I can do,

177
00:11:21.690 --> 00:11:25.340
I'm gonna put config in right just
like we did before with the box.

178
00:11:25.340 --> 00:11:27.887
We're just gonna start with something.

179
00:11:27.887 --> 00:11:30.799
And then once we started with it,
we can start to chain, right?

180
00:11:32.306 --> 00:11:33.419
Could do that.

181
00:11:35.236 --> 00:11:36.990
And we should get the same results.

182
00:11:36.990 --> 00:11:41.190
So, just like we put config
in a box with chain over it,

183
00:11:41.190 --> 00:11:44.720
just like we put other things in a box
to start it, kind of kick it off.

184
00:11:44.720 --> 00:11:49.745
Now, why did I choose right,
instead of left.

185
00:11:49.745 --> 00:11:50.594
&gt;&gt; Reduction.

186
00:11:50.594 --> 00:11:54.410
&gt;&gt; [LAUGH] Fair enough.

187
00:11:54.410 --> 00:11:56.792
None of this would have happened, right?

188
00:11:56.792 --> 00:11:59.965
It would have just ignored it
all went right to the null.

189
00:11:59.965 --> 00:12:04.799
And, the other thing that's
interesting is there's

190
00:12:04.799 --> 00:12:09.011
this concept that we have
of a pointed functor.

191
00:12:09.011 --> 00:12:14.308
A functor that you could put something in
through an interface that I don't have

192
00:12:14.308 --> 00:12:19.301
to know about right is the right answer
here, box is the start point there.

193
00:12:19.301 --> 00:12:21.724
And we'll look at that in a minute.

194
00:12:21.724 --> 00:12:25.631
But the correct way to handle this
would be something like that.

195
00:12:25.631 --> 00:12:28.900
It has a .of method to say like
put it in the type and then,

196
00:12:28.900 --> 00:12:30.750
just start running through it.

197
00:12:30.750 --> 00:12:35.943
So that allows you a generic interface
to insert stuff into a type.

198
00:12:35.943 --> 00:12:40.252
We use right here because I wanna show you
that once we have a few more monads that

199
00:12:40.252 --> 00:12:43.300
really kind of explain
what's going on there, yeah?

200
00:12:43.300 --> 00:12:46.990
&gt;&gt; This dot of method is a JavaScript
isn't it, is that correct?

201
00:12:46.990 --> 00:12:49.620
&gt;&gt; It is, you've heard that maybe college.

202
00:12:49.620 --> 00:12:53.570
&gt;&gt; I know other languages can instantiate
that way and that's why I'm asking.

203
00:12:53.570 --> 00:12:54.420
&gt;&gt; That's exactly right.

204
00:12:54.420 --> 00:12:59.490
There's sustaining things unit or pure.

205
00:13:00.800 --> 00:13:02.240
&gt;&gt; Okay.

206
00:13:02.240 --> 00:13:08.434
So, last one, see if we can get through
this without any errors, fingers crossed.

207
00:13:08.434 --> 00:13:15.300
All right, so we're gonna use either in
the functions above, refactor startup.

208
00:13:15.300 --> 00:13:18.676
Okay, so we're gonna parse the DbUrl,

209
00:13:18.676 --> 00:13:23.850
I guess this one means that we
have this one finished, right?

210
00:13:25.832 --> 00:13:29.277
And, let's see here,

211
00:13:29.277 --> 00:13:33.762
start by calling parseDbUrl.

212
00:13:33.762 --> 00:13:38.744
It says if parsed, okay, so it actually
showed up because this one returns a null,

213
00:13:38.744 --> 00:13:40.700
if it doesn't, right?

214
00:13:40.700 --> 00:13:43.383
So we'll do it fromNullable.

215
00:13:46.305 --> 00:13:50.609
Then, grab this stuff.

216
00:13:50.609 --> 00:13:55.114
Let's be fancy destructuring anyone?

217
00:13:55.114 --> 00:13:58.364
[LAUGH] For the win.

218
00:13:58.364 --> 00:14:06.082
So, If we've got parsed we'll just
destructure it right there and

219
00:14:06.082 --> 00:14:10.019
then we'll return this,
we'll transform it into that.

220
00:14:10.019 --> 00:14:15.348
Otherwise we'll do that, okay,
and we'll fold on this error.

221
00:14:15.348 --> 00:14:17.180
Otherwise we'll just get
that string out of there.

222
00:14:18.310 --> 00:14:20.630
And everybody's passing, cool.

223
00:14:21.830 --> 00:14:24.340
But it did have one thing to mention here.

224
00:14:25.540 --> 00:14:28.702
So parseDbUrl returned.

225
00:14:28.702 --> 00:14:33.393
If, again, if folded it out right there,
because they made you from this test, but

226
00:14:33.393 --> 00:14:37.670
in a much more realistic scenario,
you wouldn't want to do that.

227
00:14:37.670 --> 00:14:43.511
Let's like just say, hey, parseDbUrl tells
us it's either gonna succeed or failure.

228
00:14:43.511 --> 00:14:47.210
And then I have a color over here,
right here of that.

229
00:14:47.210 --> 00:14:50.870
I don't have to call fromNullable,
like if succeeded, just keep going.

230
00:14:50.870 --> 00:14:52.524
Keep rolling, baby.

231
00:14:52.524 --> 00:14:57.574
[LAUGH] So like you typically don't
wanna remove it from its context

232
00:14:57.574 --> 00:15:02.880
if you wanna continue composing,
it's part of the whole point.

233
00:15:02.880 --> 00:15:08.010
If I have something that tends
to be a problem for when you

234
00:15:08.010 --> 00:15:11.410
get started is that like you put something
in either you're working with it,

235
00:15:11.410 --> 00:15:13.210
you're like, no, I wanna get it out.

236
00:15:13.210 --> 00:15:14.440
But what if it's not there?

237
00:15:14.440 --> 00:15:17.112
I mean,
there's like it might not be there.

238
00:15:17.112 --> 00:15:20.864
[LAUGH] And so if you just continue the
rest of your program as though it's there,

239
00:15:20.864 --> 00:15:24.573
leaving it in the either and mapping
over it, everything will work out great.

240
00:15:24.573 --> 00:15:27.797
But if you try to take it out there you
have to like unfold it and handle it and

241
00:15:27.797 --> 00:15:29.492
deal with that error there.

242
00:15:29.492 --> 00:15:34.050
And then, event never really find
yourself like trying to unwrap and

243
00:15:34.050 --> 00:15:38.350
put stuff back in and
take it out and put it back in.

244
00:15:38.350 --> 00:15:40.724
It's nice to leave it as the return
type is what I'm saying.

245
00:15:40.724 --> 00:15:43.820
Unless you're returning like an MPM
package and people have to map over it and

246
00:15:43.820 --> 00:15:46.450
they're like [NOISE] I don't like either,
I don't understand.

247
00:15:46.450 --> 00:15:48.830
[LAUGH] All right

