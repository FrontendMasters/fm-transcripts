WEBVTT

1
00:00:00.110 --> 00:00:02.940
As you can see a composer
is prettypracticed full.

2
00:00:02.940 --> 00:00:04.110
We had add right?

3
00:00:04.110 --> 00:00:09.700
Add takes an x and a y and
each of this functions are in composition,

4
00:00:09.700 --> 00:00:12.690
it needs to be a function
that takes one argument.

5
00:00:13.980 --> 00:00:18.130
And so if you actually need to call
add in the middle of this thing,

6
00:00:19.450 --> 00:00:22.050
you're going to have to
preload it with something.

7
00:00:23.130 --> 00:00:26.250
So we'll add like the exclamation
point here instead of exclaim,

8
00:00:27.460 --> 00:00:30.440
we can get rid of exclaim or
we could define it in terms of add.

9
00:00:30.440 --> 00:00:34.080
Of course we'll have to curry
add to be able to do that.

10
00:00:34.080 --> 00:00:37.709
And there we go,
now currying is paying for itself, right?

11
00:00:38.990 --> 00:00:41.950
It's gonna start with the left side first,
right?

12
00:00:41.950 --> 00:00:44.570
So, let's flip the order here.

13
00:00:44.570 --> 00:00:47.606
Actually let's just go ahead and
define a concat, a proper concat for

14
00:00:47.606 --> 00:00:48.336
all of us to use.

15
00:00:48.336 --> 00:00:53.380
[LAUGH] So,
which we can do a flip add again.

16
00:00:53.380 --> 00:00:55.898
Love that flip, usually it
doesn't come in handy that much.

17
00:00:55.898 --> 00:01:01.550
[LAUGH] So, we'll concat it on to the end.

18
00:01:01.550 --> 00:01:02.530
There we go.

19
00:01:02.530 --> 00:01:07.080
So you can see, using currying and
composition they play together

20
00:01:07.080 --> 00:01:12.080
because you're able to make every
function into a unary function,

21
00:01:12.080 --> 00:01:15.820
a function that takes one argument
instead of a binary or more.

22
00:01:16.910 --> 00:01:19.640
And so
as our data flows through our pipeline,

23
00:01:19.640 --> 00:01:22.880
we make everything to one arg at a time.

24
00:01:22.880 --> 00:01:27.860
So when we look at this, we can quickly
see kind of what's happening here is we're

25
00:01:27.860 --> 00:01:32.910
going to hit the YouTube API and
grab that property off the Jason, and

26
00:01:32.910 --> 00:01:37.678
grab the first, grab the URL,
pass that into the feed.

27
00:01:37.678 --> 00:01:42.130
You can kinda see how these functions,
it looks like nothing's happening, but

28
00:01:42.130 --> 00:01:48.010
this just giant pipelines of data to flow
through each taking one argument and

29
00:01:48.010 --> 00:01:48.860
that's your data.

30
00:01:48.860 --> 00:01:51.850
So you have this data structure that
you're maintaining that's flowing through

31
00:01:51.850 --> 00:01:52.670
your pipe.

32
00:01:52.670 --> 00:01:58.010
That's kind of the fundamental
shift from the other paradigms.

33
00:01:58.010 --> 00:02:03.780
And if we kinda look at this, so here's
a composition, I call it do your stuff.

34
00:02:03.780 --> 00:02:05.330
It's, out on the App Store.

35
00:02:05.330 --> 00:02:07.043
You can download it.

36
00:02:07.043 --> 00:02:12.070
[LAUGH] But basically,
we're gonna start down at the bottom,

37
00:02:12.070 --> 00:02:15.140
working our way up, right,
it's right to left.

38
00:02:15.140 --> 00:02:18.680
So we're gonna turn something to lowercase
and then split it and then trim it and

39
00:02:18.680 --> 00:02:23.080
reverse it and grab anything greater than
three and then join it all together.

40
00:02:23.080 --> 00:02:23.630
Fun.

41
00:02:23.630 --> 00:02:26.130
So down to the bottom,
these little blocks,

42
00:02:26.130 --> 00:02:32.160
you think our data flowing in and
then it you know gets lowercased,

43
00:02:32.160 --> 00:02:34.780
each of these blocks would
be like a function call.

44
00:02:34.780 --> 00:02:36.390
I didn't have enough
to really match it up.

45
00:02:37.880 --> 00:02:42.860
And you can see as it flows through our
program, the data is being manipulated and

46
00:02:42.860 --> 00:02:43.980
we get to our result, right?

47
00:02:45.740 --> 00:02:51.646
So, one thing to keep in mind is, if I
break the chain, that′s it, we′re done.

48
00:02:51.646 --> 00:02:55.360
Everything must be composed,
everything must be connected.

49
00:02:55.360 --> 00:02:58.470
If I don′t actually flow
through this pipeline,

50
00:03:00.150 --> 00:03:04.320
by definition of a function that
takes input to output, if I don′t

51
00:03:04.320 --> 00:03:09.220
then pass that output into another input,
that's the end of the programme.

52
00:03:09.220 --> 00:03:11.080
That'll be the return value.

53
00:03:11.080 --> 00:03:16.180
So, in this way, what you're
doing is taking a very complex,

54
00:03:16.180 --> 00:03:18.660
you know graph of procedures and

55
00:03:18.660 --> 00:03:23.670
operations and kind of wrangling it
into a pipeline of data processing.

56
00:03:23.670 --> 00:03:25.370
And we can get more advanced and

57
00:03:25.370 --> 00:03:30.720
do really interesting things with this
once we'll start after lunch on that.

58
00:03:30.720 --> 00:03:34.700
But this is kind of fundamentally what
we're gonna do is pipe data through.

59
00:03:36.320 --> 00:03:42.190
This is the same function [LAUGH]
written as,

60
00:03:42.190 --> 00:03:48.585
I would say like as bad, well it's not
bad, as performance as I could write it.

61
00:03:48.585 --> 00:03:53.440
[LAUGH] But
I see this stuff like every single day.

62
00:03:53.440 --> 00:03:56.270
I work with programmers that
come from the C++ background and

63
00:03:56.270 --> 00:04:00.425
whatever else and this is very
comfortable but what's happening is,

64
00:04:00.425 --> 00:04:05.040
and if you want to get into performance,
we can make this extremely performant,

65
00:04:05.040 --> 00:04:06.920
probably way more performant than this.

66
00:04:06.920 --> 00:04:09.980
And we could have a coffee and
talk that out.

67
00:04:09.980 --> 00:04:14.240
But what you're seeing here is state
manipulations, through and through,

68
00:04:14.240 --> 00:04:16.632
nothing is connected,
nothing can be connected.

69
00:04:16.632 --> 00:04:21.820
It's like all we're doing is introducing
variables and mutating variables.

70
00:04:21.820 --> 00:04:24.410
This whole state of California and
flipped it for mutation,

71
00:04:24.410 --> 00:04:28.540
and the idea is that like you know,
we got more state and more state, first we

72
00:04:28.540 --> 00:04:32.700
define lower then we define words and
then we reverse the words we mutate them.

73
00:04:32.700 --> 00:04:39.370
Then we go through and change them and
as we reach the end of our program,

74
00:04:39.370 --> 00:04:43.130
we're just like throwing trash out
into the global environment like

75
00:04:43.130 --> 00:04:46.711
all these are still available for
me and they're even changing.

76
00:04:48.020 --> 00:04:54.160
So this is kind of
harder to deal with than

77
00:04:54.160 --> 00:04:59.870
the data flowing through,
because state is defined as

78
00:04:59.870 --> 00:05:05.020
one of the hardest things in programming
to manage, and keep in your head.

79
00:05:05.020 --> 00:05:09.020
This is really poorly,
don't worry about this one.

80
00:05:09.020 --> 00:05:13.020
It's just a class as an app mailer, but if
you want to look at how this class would

81
00:05:13.020 --> 00:05:16.696
be defined in an object oriented sense,
it's a graph of state changes.

82
00:05:16.696 --> 00:05:20.252
Your object oriented programming
takes all that state, blows it up for

83
00:05:20.252 --> 00:05:23.867
encapsulation and then it mutates
the state in all different places, so

84
00:05:23.867 --> 00:05:25.585
you think it looks really clean and

85
00:05:25.585 --> 00:05:28.809
nice but it still a [LAUGH] tiny
graph of state mutations, right?

86
00:05:28.809 --> 00:05:36.870
Its not a clean data pipeline through
functions, its a graph of data changes.

87
00:05:36.870 --> 00:05:39.400
Now you could always write
an object oriented programme not

88
00:05:39.400 --> 00:05:41.850
in terms of functions,
and that's totally fine.

89
00:05:41.850 --> 00:05:43.650
It's a false dichotomy there.

90
00:05:43.650 --> 00:05:47.670
You could totally use object
oriented stuff for this.

91
00:05:47.670 --> 00:05:49.870
But that's what you'll typically see,
right?

92
00:05:49.870 --> 00:05:51.830
I should know.

93
00:05:51.830 --> 00:05:52.620
Yes.

94
00:05:52.620 --> 00:05:54.060
&gt;&gt; Going back to your diagram,

95
00:05:54.060 --> 00:05:57.190
would it be fair to say since we're
dealing with an undirected graph

96
00:05:57.190 --> 00:06:01.260
that we're essentially looking at
the possibility of state mutation.

97
00:06:01.260 --> 00:06:04.990
So the problem with the output is
it's gonna fall somewhere in this

98
00:06:04.990 --> 00:06:06.850
massive interconnections.

99
00:06:06.850 --> 00:06:12.190
&gt;&gt; That's a great to put it cuz
the composition could totally be a graph.

100
00:06:12.190 --> 00:06:13.760
It's just a directed graph.

101
00:06:13.760 --> 00:06:14.430
&gt;&gt; Yes.

102
00:06:14.430 --> 00:06:17.975
&gt;&gt; And yes, [CROSSTALK] Exactly.

103
00:06:17.975 --> 00:06:22.622
And we'll talk about kind of wrangling
things into a linear control flow with

104
00:06:22.622 --> 00:06:26.852
phuncters, the identity phuncters soon,
but yes, totally agree.

