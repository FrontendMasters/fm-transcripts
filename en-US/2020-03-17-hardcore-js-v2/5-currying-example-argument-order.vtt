WEBVTT

1
00:00:00.123 --> 00:00:02.631
When do you know when to curry and
when not to curry?

2
00:00:02.631 --> 00:00:06.460
&gt;&gt; So just as we kind of showed
that we can flip arguments and

3
00:00:06.460 --> 00:00:11.780
we can take it all at once or we can take
one parameter at a time with currying.

4
00:00:11.780 --> 00:00:17.130
You say I have a function and
I have these options.

5
00:00:17.130 --> 00:00:23.830
And I know they're always gonna end
up in the same equivalent definition.

6
00:00:23.830 --> 00:00:29.090
So I'll choose currying when I want to
remember an argument and pass that around.

7
00:00:29.090 --> 00:00:34.061
So I usually say I'm going to curry
a function when there's an obvious kind of

8
00:00:34.061 --> 00:00:38.727
configuration to pass in, and
it'll just remember that from then on but

9
00:00:38.727 --> 00:00:44.330
let's look at some more examples and
you see why you might want to do that.

10
00:00:44.330 --> 00:00:45.750
So let's leave these on the screen.

11
00:00:45.750 --> 00:00:49.010
Let's do filter.

12
00:00:49.010 --> 00:00:53.972
So we'll take an array of xs and
some function f and

13
00:00:53.972 --> 00:01:00.485
we'll say well, there's a good
example of bad argument order.

14
00:01:00.485 --> 00:01:03.573
[LAUGH] We'll take our function first, and

15
00:01:03.573 --> 00:01:08.047
then our array, and
we'll say array.filter the function.

16
00:01:08.047 --> 00:01:08.814
Okay?

17
00:01:08.814 --> 00:01:11.120
And we're going to go ahead and
curry filter.

18
00:01:13.330 --> 00:01:16.860
What's gonna happen here is filter
will run through the array and

19
00:01:16.860 --> 00:01:20.210
call our function on every value right?

20
00:01:20.210 --> 00:01:22.680
Hopefully everybody here knows
filter as part of the pre reqs.

21
00:01:22.680 --> 00:01:25.790
I should have gone through the pre
reqs you should know map and

22
00:01:25.790 --> 00:01:29.500
filter coming and reduce,
that's the big one.

23
00:01:31.320 --> 00:01:36.510
So if I said, well, I'm going to
actually curry filter, which is odd.

24
00:01:38.100 --> 00:01:45.142
Now I have a function that
goes through a list and

25
00:01:45.142 --> 00:01:49.379
say FiltersOdd or getOdds.

26
00:01:49.379 --> 00:01:53.010
So this will go through a list,
let's say 1, 2, 3, 4, 5.

27
00:01:53.010 --> 00:01:56.330
And I could pass that into getOdds.

28
00:01:57.910 --> 00:02:02.532
And what I should get out is just all the
odd numbers if everything worked out all

29
00:02:02.532 --> 00:02:03.874
right, hey, works.

30
00:02:03.874 --> 00:02:07.770
And so, instead of having to
write the entire filter upfront,

31
00:02:07.770 --> 00:02:12.254
I could define a whole new function in
terms of just the curried functions

32
00:02:12.254 --> 00:02:16.758
this odd is just modulo curried to two,
it's just remembering the two.

33
00:02:16.758 --> 00:02:20.800
Filter is remembering that
function argument is odd.

34
00:02:20.800 --> 00:02:24.340
And so now, I have a brand new function
just by remembering arguments,

35
00:02:24.340 --> 00:02:25.380
which is pretty nice.

36
00:02:26.500 --> 00:02:29.988
And we go through the class,

37
00:02:29.988 --> 00:02:34.870
we'll start to see more uses of curry.

38
00:02:34.870 --> 00:02:39.900
One thing I wanted to call out
here was the argument order.

39
00:02:39.900 --> 00:02:46.250
So if I wrote xs first and
then F here, xs being the plural of x.

40
00:02:46.250 --> 00:02:49.750
So that's what I call the array of xs.

41
00:02:49.750 --> 00:02:51.470
And then we have this function,

42
00:02:51.470 --> 00:02:55.650
you'll have a lot of these x y
variables in functional programming.

43
00:02:55.650 --> 00:03:00.920
It's typically because we strive to write
the most general functions as possible.

44
00:03:00.920 --> 00:03:05.510
And so you don't have a name like
filter will filter anything.

45
00:03:05.510 --> 00:03:07.400
What am I supposed to call it?

46
00:03:07.400 --> 00:03:09.200
So I'll just call it x.

47
00:03:09.200 --> 00:03:11.480
And if I have many of them,
I'll call them xs.

48
00:03:11.480 --> 00:03:15.470
So that's just something that,
people are, this is frustrating.

49
00:03:15.470 --> 00:03:17.420
I need to see names that I believe in.

50
00:03:17.420 --> 00:03:22.210
If you generalize all the way to
its logical end, you end up with x.

51
00:03:22.210 --> 00:03:23.510
And then when you're writing your program,

52
00:03:23.510 --> 00:03:28.730
you can redefine it as something that
is domain specific, but in any case,

53
00:03:30.000 --> 00:03:35.140
here we are, if I give it Xs first,
I wouldn't be able to curry this.

54
00:03:35.140 --> 00:03:38.330
I don't have the array at
the time of defining get odds.

55
00:03:39.380 --> 00:03:40.410
There's no array here.

56
00:03:40.410 --> 00:03:41.970
How would I?

57
00:03:41.970 --> 00:03:45.060
So I would have to say
well I'll take an array.

58
00:03:45.060 --> 00:03:47.070
And then I'll call it with that.

59
00:03:47.070 --> 00:03:48.570
And that's not very useful.

60
00:03:48.570 --> 00:03:52.890
That's so
what's happening here is I'm defining it

61
00:03:52.890 --> 00:03:57.920
with the arguments that I
should remember upfront.

62
00:03:57.920 --> 00:04:02.100
And then the data for
which it operates on as the last argument.

63
00:04:02.100 --> 00:04:06.380
And that's kind of the general rule
that you would want to follow when

64
00:04:06.380 --> 00:04:11.280
defining curried functions is
the data it operates on ends up last.

65
00:04:11.280 --> 00:04:12.090
Let's write one more.

66
00:04:13.910 --> 00:04:21.426
And for this one I'm gonna actually bring
in ramda's curry because import curry.

67
00:04:21.426 --> 00:04:24.778
I can't use imports sorry
we're not there yet.

68
00:04:24.778 --> 00:04:29.497
I'm sure hopefully like 2025

69
00:04:29.497 --> 00:04:33.564
we'll have imports [LAUGH] but

70
00:04:33.564 --> 00:04:38.288
ramda cool equals require ramda.

71
00:04:38.288 --> 00:04:39.475
We have everything but

72
00:04:39.475 --> 00:04:43.289
imports at this moment in time I buried
a time capsule with my statement.

73
00:04:44.720 --> 00:04:47.355
So we're gonna get rid of this curry and
just use ramda's curry.

74
00:04:47.355 --> 00:04:52.455
And the difference there is that I
wrote a curry with just two arguments.

75
00:04:52.455 --> 00:04:55.040
Ramda's curry allow you
to curry a function

76
00:04:55.040 --> 00:04:57.560
with as many arguments as you want.

77
00:04:57.560 --> 00:05:00.500
It does fancy tricks on F.length and

78
00:05:00.500 --> 00:05:05.090
it does all this very tricky
performance optimization stuff.

79
00:05:05.090 --> 00:05:08.580
So we can do this without worry.

80
00:05:08.580 --> 00:05:09.840
So all this should still work.

81
00:05:09.840 --> 00:05:12.490
I'm just bringing in ramda and
you can look at the ramda docs but

82
00:05:12.490 --> 00:05:14.740
it's basically the same function as this.

83
00:05:14.740 --> 00:05:16.130
Just with as many as you want.

