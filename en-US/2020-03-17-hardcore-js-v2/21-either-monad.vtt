WEBVTT

1
00:00:00.060 --> 00:00:01.650
We're gonna talk about
a type called either.

2
00:00:01.650 --> 00:00:05.108
And this is going to be functor in
a monad, meaning it has a map and

3
00:00:05.108 --> 00:00:06.012
a chain method.

4
00:00:06.012 --> 00:00:11.609
And it's gonna have a fold method which
we define, we call that foldable.

5
00:00:11.609 --> 00:00:14.690
So it's a foldable functor monad,
all the good stuff.

6
00:00:16.230 --> 00:00:20.563
I'm finding that teaching the data
types like box, we'll learn either,

7
00:00:20.563 --> 00:00:22.430
we'll learn kind of IO or task.

8
00:00:22.430 --> 00:00:26.810
You start to see the same APIs
applied to different types.

9
00:00:26.810 --> 00:00:30.450
Rather than introducing, there's this
thing called map and it works on anything.

10
00:00:30.450 --> 00:00:32.720
It's like,
here's a few concrete examples of map, and

11
00:00:32.720 --> 00:00:34.030
now try to see the commonalities.

12
00:00:34.030 --> 00:00:35.690
Same thing with chain,
same thing with fold.

13
00:00:35.690 --> 00:00:38.215
So look for the commonalities here, and

14
00:00:38.215 --> 00:00:43.868
see how it's the same API across different
types, providing different functionality.

15
00:00:43.868 --> 00:00:47.113
So in this case, we're gonna find a color,

16
00:00:47.113 --> 00:00:51.616
pass in a name, and
we're just gonna grab the hex value out.

17
00:00:51.616 --> 00:00:57.260
And our value's red,

18
00:00:57.260 --> 00:01:01.000
and if I misspell it,
I get undefined, whatever.

19
00:01:01.000 --> 00:01:09.720
What if I wanna toUpperCase,
Boom, all right, that's cool.

20
00:01:09.720 --> 00:01:15.980
But then if I misspell it, uh-oh,
null.toUpperCase or undefined.toUpperCase.

21
00:01:17.170 --> 00:01:21.742
So how do we deal with this null issue?

22
00:01:21.742 --> 00:01:26.110
So let's go in and use a box.

23
00:01:26.110 --> 00:01:30.734
And for this box, I'm gonna go ahead and

24
00:01:30.734 --> 00:01:34.550
copy the boilerplate from here.

25
00:01:36.043 --> 00:01:40.804
So, actually, get rid of that, that, cool,

26
00:01:40.804 --> 00:01:45.700
we got chain, map, fold, everybody's good.

27
00:01:46.890 --> 00:01:50.570
But here we have two types,
a right and a left.

28
00:01:50.570 --> 00:01:53.410
Don't worry too much about
the implementations themselves.

29
00:01:55.030 --> 00:01:59.996
But I want you to see that the map
here on the right runs the function,

30
00:01:59.996 --> 00:02:01.228
keeps in right.

31
00:02:01.228 --> 00:02:05.549
It's exactly what we did with box,
right almost exactly is box.

32
00:02:05.549 --> 00:02:09.562
I think it is box, no, fold is different.

33
00:02:09.562 --> 00:02:12.622
Left does not actually
run any of the functions.

34
00:02:12.622 --> 00:02:16.359
You're like, here, left,
please run this function for me, and

35
00:02:16.359 --> 00:02:17.844
it's like, nope [LAUGH].

36
00:02:17.844 --> 00:02:20.530
So how is that useful?

37
00:02:20.530 --> 00:02:25.784
So you can think of these as two
subclasses of a superclass we call either.

38
00:02:25.784 --> 00:02:29.970
And so we could define this
multiple different ways.

39
00:02:29.970 --> 00:02:35.548
I'm just making two different types and
then using the gap to say, well they

40
00:02:35.548 --> 00:02:41.310
both have the same superclass, they're
part of an enum supertype called either.

41
00:02:41.310 --> 00:02:43.871
But let's go ahead and use them.

42
00:02:43.871 --> 00:02:46.864
So we're here in findColor,
and what I'm gonna do is,

43
00:02:46.864 --> 00:02:48.976
I'm gonna refactor this a little bit.

44
00:02:48.976 --> 00:02:53.113
Let's go ahead and say,

45
00:02:53.113 --> 00:02:57.450
that const found is that.

46
00:02:57.450 --> 00:03:02.380
And if we have a found,
we'll return a right of it.

47
00:03:02.380 --> 00:03:09.471
Otherwise, we'll return a left,
not found, great, how about dunno?

48
00:03:09.471 --> 00:03:15.532
[LAUGH] All right, so what's gonna
happen here, let's get rid of the,

49
00:03:15.532 --> 00:03:20.498
toUpperCase, is we get back
a right of the value, right?

50
00:03:20.498 --> 00:03:22.074
It went through and it found it.

51
00:03:22.074 --> 00:03:26.415
If I don't find it, I get a left of dunno.

52
00:03:26.415 --> 00:03:29.769
So I'm choosing within
the function to push to

53
00:03:29.769 --> 00:03:32.871
the color that we're gonna find it or not.

54
00:03:32.871 --> 00:03:37.627
So I want this hex value, to get at it,

55
00:03:37.627 --> 00:03:41.492
I either have to fold it out or,

56
00:03:41.492 --> 00:03:47.460
let's go ahead and
first map x.toUpperCase.

57
00:03:47.460 --> 00:03:51.516
And there it is, we've uppercased it,
and if I misspell it,

58
00:03:51.516 --> 00:03:54.171
guess what,left still doesn't care.

59
00:03:54.171 --> 00:04:00.150
It's like, yeah, whatever, [LAUGH]
I'll write missing instead of dunno.

60
00:04:00.150 --> 00:04:04.119
So you're trying to find the color,
and you didn't find the color,

61
00:04:04.119 --> 00:04:08.170
but this didn't blow up, right,
we got the error message at the end.

62
00:04:08.170 --> 00:04:13.084
So the other key difference is,
again, give myself some space here,

63
00:04:13.084 --> 00:04:15.431
kinda write it in function form.

64
00:04:17.626 --> 00:04:22.814
The other key difference here is that,
to get it out, now that I have two

65
00:04:22.814 --> 00:04:28.760
different types, a left and a right,
we have a fold that takes f and a g.

66
00:04:28.760 --> 00:04:33.201
f handles the left case, it's on
the left side, g handles the right case.

67
00:04:33.201 --> 00:04:36.402
So we are gonna run the function and
get it out of the type,

68
00:04:36.402 --> 00:04:41.227
if you're a left, it runs the first one,
if you're a right, it runs the second one.

69
00:04:41.227 --> 00:04:46.419
So let's see this in action,
down here in the fold,

70
00:04:46.419 --> 00:04:53.750
I'll say, on the left case,
I get missing, so I'll be like, no color.

71
00:04:55.660 --> 00:04:59.063
And on the right case, I actually
get my value, which is the color, so

72
00:04:59.063 --> 00:04:59.880
just return it.

73
00:04:59.880 --> 00:05:05.067
And it's got no color, so
I can actually handle my error.

74
00:05:05.067 --> 00:05:09.984
If I pass in the right color,
if I could type, boom.

75
00:05:09.984 --> 00:05:16.230
So what we've done is, findColor refuses
to let us deal with the undefined case.

76
00:05:16.230 --> 00:05:18.770
It says, hey, I know

77
00:05:18.770 --> 00:05:24.110
that you're gonna give me a color that is
not gonna be found one day in the future.

78
00:05:24.110 --> 00:05:28.985
And I'm gonna force you to map
over the box I've provided,

79
00:05:28.985 --> 00:05:31.440
and it's the happy case.

80
00:05:31.440 --> 00:05:36.726
Let's say if I say map, and we'll do x and
x, it's got the first part of it,

81
00:05:36.726 --> 00:05:40.463
or actually slice out that hex value,
for instance.

82
00:05:40.463 --> 00:05:43.757
So there we go, right, and
it's gonna do all these things,

83
00:05:43.757 --> 00:05:45.250
it's just the happy path.

84
00:05:45.250 --> 00:05:50.035
And if if it doesn't find it in the first
place, it just skips all of it and

85
00:05:50.035 --> 00:05:52.554
goes right down to the error handler.

86
00:05:52.554 --> 00:05:56.610
So two things to notice here is,
it's exactly like box.

87
00:05:58.195 --> 00:06:04.065
But in the right case,
we're actually continuing the composition.

88
00:06:04.065 --> 00:06:07.050
And in the left case, we just cut it
off right there and return that value.

89
00:06:07.050 --> 00:06:12.420
None of this ever runs, and
we're bubbling up the error to the color.

90
00:06:12.420 --> 00:06:16.570
The calling function receives
the error handling ability.

91
00:06:16.570 --> 00:06:20.860
And if I didn't wanna do that here,
I just did that,

92
00:06:20.860 --> 00:06:25.669
then whoever calls res has to deal with
the error if I wanna fold it out here.

93
00:06:27.200 --> 00:06:31.705
So we've done this inversion of control,
where the caller has always had

94
00:06:31.705 --> 00:06:35.058
to do these null checks and
deal with these functions.

95
00:06:35.058 --> 00:06:38.760
I hope I called it right, boom,
right, one day you get bad data.

96
00:06:38.760 --> 00:06:43.126
Here, now the caller has to actually
manage and maintain and deal with it.

97
00:06:43.126 --> 00:06:46.639
So we've inverted that,
it's a safer operation.

98
00:06:48.630 --> 00:06:50.502
So let's put that fold back on.

99
00:06:50.502 --> 00:06:54.620
So this is either, and now you can
start to see why map is cool, right?

100
00:06:54.620 --> 00:06:59.030
You're saying, please apply this function
for me, and this one just doesn't.

101
00:07:00.030 --> 00:07:02.470
And so
we've got this inversion of control.

102
00:07:02.470 --> 00:07:04.165
We've got this right,
left, we've got purity.

103
00:07:04.165 --> 00:07:06.815
We didn't have to throw an error, right,

104
00:07:06.815 --> 00:07:09.770
we returned a value that
represented an error.

105
00:07:09.770 --> 00:07:14.489
And this doesn't just have to be error
handling, we've just got two values.

106
00:07:14.489 --> 00:07:18.790
Just by convention,
since left doesn't actually do anything,

107
00:07:18.790 --> 00:07:23.963
it just cuts off the computation, it tends
to be used as an error kind of value.

108
00:07:23.963 --> 00:07:28.950
But this is the canonical some type,
I have two things, it's one or the other.

109
00:07:28.950 --> 00:07:32.392
I can return you a right or a left here,
and I can just pattern match down here and

110
00:07:32.392 --> 00:07:34.494
do two different things,
I can branch my code.

111
00:07:34.494 --> 00:07:40.968
It's effectively an if-else, but
inverted, which is pretty kick-ass.

