WEBVTT

1
00:00:00.200 --> 00:00:01.640
How's that?

2
00:00:01.640 --> 00:00:02.470
Everybody feel?

3
00:00:02.470 --> 00:00:03.010
Okay?

4
00:00:04.440 --> 00:00:09.130
So really angry with me because
the hardest thing is to write these

5
00:00:09.130 --> 00:00:11.310
examples and
have them like actually make sense.

6
00:00:11.310 --> 00:00:13.920
And try to put you in a situation
where it's like realistic.

7
00:00:15.220 --> 00:00:19.130
So, all right, we can go through and
answer these one by one.

8
00:00:20.480 --> 00:00:21.650
I should also mention for

9
00:00:21.650 --> 00:00:26.140
those of you in the classroom online,
there's these other code pens available.

10
00:00:26.140 --> 00:00:28.821
If you want to jump ahead we won't
be talking about common ads or

11
00:00:28.821 --> 00:00:30.448
mono ads today or anything like that.

12
00:00:30.448 --> 00:00:34.430
So if you want to jump in my coat pens and
look you can.

13
00:00:36.730 --> 00:00:40.170
So right words, so
we're going to do is say,

14
00:00:40.170 --> 00:00:44.600
all right, well split takes one
argument at a time, string last.

15
00:00:44.600 --> 00:00:47.620
So here's a function that takes a string.

16
00:00:47.620 --> 00:00:53.950
But if I just call split like that,

17
00:00:53.950 --> 00:00:57.500
with its argument, it's now a function
that takes a string, right?

18
00:00:59.010 --> 00:01:03.440
Okay, one way to look at it is if I
take a string and then put it here.

19
00:01:03.440 --> 00:01:06.750
You can kind of cancel out the arguments,
like cross them out [LAUGH].

20
00:01:06.750 --> 00:01:12.145
It's kind of like a little algebra trick,
there you go.

21
00:01:12.145 --> 00:01:16.520
Cool, and we're still passing down here,

22
00:01:16.520 --> 00:01:21.300
here we have map,
an just like we crossed out the last one,

23
00:01:21.300 --> 00:01:24.380
we can get rid of these x's here and
these x's.

24
00:01:24.380 --> 00:01:29.530
And map function to where two arguments
takes its data last, we can just say map

25
00:01:29.530 --> 00:01:36.290
words and
still passes down there exercise one A.

26
00:01:36.290 --> 00:01:41.060
So it's nice, we got rid of all that kind
of unnecessary names and ceremony and

27
00:01:41.060 --> 00:01:43.970
just got right to the definition.

28
00:01:43.970 --> 00:01:49.270
Sentences is just mapping words
[LAUGH] after the array and

29
00:01:49.270 --> 00:01:50.210
grabbing all the words from it.

30
00:01:52.300 --> 00:01:55.820
Exercise two this one is

31
00:01:55.820 --> 00:01:58.830
along the same lines it's got
a lot of function noise in here.

32
00:01:58.830 --> 00:02:01.730
I didn't use arrow functions to
define these because it just looks so

33
00:02:01.730 --> 00:02:03.620
much fun to watch all the noise fall away.

34
00:02:04.660 --> 00:02:09.920
So, one of the we are updating mostly
out of quick guide to like, eat snacks,

35
00:02:09.920 --> 00:02:14.020
and I was like, it's not as cool anymore,
because arrow functions are so nice.

36
00:02:15.660 --> 00:02:18.240
So, we have a function that takes x's.

37
00:02:18.240 --> 00:02:20.790
Let's start off by saying okay,
we're going to take these x's and

38
00:02:20.790 --> 00:02:22.870
return a new function.

39
00:02:22.870 --> 00:02:25.240
We can just cross these out here, right?

40
00:02:25.240 --> 00:02:28.970
So let's go ahead and say, filter.

41
00:02:30.550 --> 00:02:32.570
Keep it passing at least.

42
00:02:32.570 --> 00:02:38.063
Filter is a function, it took x's,
we'll just get rid of x's there and

43
00:02:38.063 --> 00:02:41.040
here and
now it's a function that takes x is still.

44
00:02:42.610 --> 00:02:44.230
Then it's blowing up.

45
00:02:44.230 --> 00:02:45.460
There we go.

46
00:02:45.460 --> 00:02:47.760
But we can take it one step further.

47
00:02:47.760 --> 00:02:51.600
Test is a function that
takes in argument and

48
00:02:51.600 --> 00:02:55.610
we can keep that grade and
just remove all these.

49
00:02:56.810 --> 00:02:57.630
All we need is that.

50
00:02:58.940 --> 00:03:00.074
So there we go.

51
00:03:00.074 --> 00:03:03.134
I mean we're just saying
we're gonna test for

52
00:03:03.134 --> 00:03:07.452
any cues, we're gonna filter
an array that does that.

53
00:03:07.452 --> 00:03:08.710
All right, let's jump on to the next one.

54
00:03:10.662 --> 00:03:14.520
Keep highest is just this little
helper function just takes the max.

55
00:03:15.650 --> 00:03:20.250
And what we're going to do is rewrite
this in its simplest form and

56
00:03:20.250 --> 00:03:22.690
something I didn't touch on yet.

57
00:03:22.690 --> 00:03:24.016
I'm glad we're hitting this is that.

58
00:03:25.697 --> 00:03:28.861
We didn't talk about
callable functions and

59
00:03:28.861 --> 00:03:32.275
let me just hop over here and
reason this fun new,

60
00:03:32.275 --> 00:03:37.200
fun new program to do our examples
because it's so clean look at this.

61
00:03:38.302 --> 00:03:43.730
All right, so
if I have a function called add again,

62
00:03:43.730 --> 00:03:46.320
right and takes its x and
y and it just adds them.

63
00:03:49.320 --> 00:03:54.390
Add if I just console that log
add it is a function right.

64
00:03:55.420 --> 00:03:56.665
This is never helpful.

65
00:03:56.665 --> 00:04:00.640
&gt;&gt; [LAUGH]
&gt;&gt; Just so you all know [LAUGH].

66
00:04:00.640 --> 00:04:02.760
If you're ever gonna build
that it is never helpful.

67
00:04:03.840 --> 00:04:06.430
So all right, so add is a function and

68
00:04:06.430 --> 00:04:11.180
if I call it with arguments,
it's now a value.

69
00:04:11.180 --> 00:04:16.110
But if I don't call it, it's just a happy
little function waiting to be called.

70
00:04:17.540 --> 00:04:21.710
I should have been a little
bit clearer with that upfront.

71
00:04:21.710 --> 00:04:24.430
But hopefully you all had
the prerequisite of just

72
00:04:24.430 --> 00:04:27.480
understanding JavaScript is
the core idea of JavaScript.

73
00:04:28.630 --> 00:04:32.800
But since we know that we can just
pass functions around like that.

74
00:04:32.800 --> 00:04:37.460
We can actually say, well,
a function that takes an accumulator and

75
00:04:37.460 --> 00:04:42.940
an x will key pious is a function that
takes that same accumulator and an x.

76
00:04:42.940 --> 00:04:46.600
Why am I putting in a function and just
throw it in the same argument through,

77
00:04:46.600 --> 00:04:48.649
I could just remove this entire function.

78
00:04:50.130 --> 00:04:51.555
Do that right off the bet.

79
00:04:53.860 --> 00:04:55.204
Okay, so there's one step.

80
00:04:55.204 --> 00:04:58.210
Do you all see how that works?

81
00:04:58.210 --> 00:05:02.520
Since I can put them side by side, but
reduce will pass its accumulator and

82
00:05:02.520 --> 00:05:04.700
value and to keep highest.

83
00:05:04.700 --> 00:05:06.720
Keep highest takes those two arguments.

84
00:05:06.720 --> 00:05:12.180
So I don't need to actually pass
in an accumulator and an x.

85
00:05:13.810 --> 00:05:19.380
And simply call a function that
takes an accumulator and x.

86
00:05:19.380 --> 00:05:23.710
I can just get rid of all that noise
by passing in the first class function.

87
00:05:23.710 --> 00:05:26.680
Now, here are a lot of you
squirming in your chairs and

88
00:05:26.680 --> 00:05:31.090
JavaScript has all these bizarre functions
that take variadic like arguments and

89
00:05:31.090 --> 00:05:33.830
sometimes this gets you into trouble.

90
00:05:33.830 --> 00:05:36.940
So sometimes this is the right answer.

91
00:05:36.940 --> 00:05:40.430
But I just wanted you all to
have a clear understanding

92
00:05:40.430 --> 00:05:45.320
of this being because reduce, for
instance, takes passes an extra argument.

93
00:05:45.320 --> 00:05:46.810
This one just throws it away.

94
00:05:46.810 --> 00:05:47.843
But that's just something to know.

95
00:05:47.843 --> 00:05:52.610
All right, last thing is,
again, we can cross out the x's.

96
00:05:52.610 --> 00:05:55.360
So let's go ahead and do that.

97
00:05:55.360 --> 00:06:01.020
And we took that giant ceremonious
hard to understand reduce everybody,

98
00:06:01.020 --> 00:06:03.660
like all reduces that
somebody called it fancy.

99
00:06:03.660 --> 00:06:06.730
They're like, hey, can you remove all that
fancy JavaScript you've been writing,

100
00:06:06.730 --> 00:06:08.610
I was like what reduce?

101
00:06:09.800 --> 00:06:14.950
But it's, yeah, when you when you're able
to define it in these very clean terms,

102
00:06:14.950 --> 00:06:16.610
it almost reads like English.

103
00:06:16.610 --> 00:06:18.600
And I think that's very nice.

104
00:06:20.810 --> 00:06:26.560
Last couple here before
we jump into composition.

105
00:06:26.560 --> 00:06:29.760
So define slice and
we want to make it carried.

106
00:06:30.900 --> 00:06:33.710
So slice is gonna to take
one argument at a time.

107
00:06:33.710 --> 00:06:35.120
So it'll take on our xs.

108
00:06:37.120 --> 00:06:43.410
Well, taken our start in our end and
our xs last, that argument order.

109
00:06:44.530 --> 00:06:49.650
So our data last and
we'll just turn around and call a slice.

110
00:06:51.240 --> 00:06:52.270
With the start and end.

111
00:06:53.910 --> 00:06:58.660
You don't typically have to do this,
because it's probably built into

112
00:06:58.660 --> 00:07:00.950
a library,
if you're doing this kind of programming.

113
00:07:00.950 --> 00:07:04.570
All the kind of standard library
functions will show up curried for

114
00:07:04.570 --> 00:07:05.790
you arguments last.

115
00:07:07.150 --> 00:07:07.780
There we go.

116
00:07:07.780 --> 00:07:11.030
Should be passing bonus one, terrific.

117
00:07:11.030 --> 00:07:13.610
And then bonus two says take.

118
00:07:13.610 --> 00:07:16.690
It's gonna take n elements from an array.

119
00:07:16.690 --> 00:07:18.920
So if I say take two,
it'll give me the first two.

120
00:07:20.210 --> 00:07:24.210
So I can just slice,
slice, the, wait a second.

121
00:07:26.170 --> 00:07:26.743
Getting confused here.

122
00:07:26.743 --> 00:07:31.860
We're going to take n, right.

123
00:07:31.860 --> 00:07:33.600
We're going to slice n does that work?

124
00:07:35.840 --> 00:07:36.360
Doesn't work.

125
00:07:36.360 --> 00:07:37.180
Someone helped me out.

126
00:07:37.180 --> 00:07:38.615
I haven't done this in like three years.

127
00:07:38.615 --> 00:07:39.468
[LAUGH].

128
00:07:39.468 --> 00:07:42.790
&gt;&gt; Provide this start as zero.

129
00:07:42.790 --> 00:07:44.020
&gt;&gt; That's a great idea.

130
00:07:44.020 --> 00:07:45.740
We'll start with zero.

131
00:07:45.740 --> 00:07:46.270
Thank you.

132
00:07:47.820 --> 00:07:50.720
Yeah, starting at zero and two,
that makes so much more sense.

133
00:07:50.720 --> 00:07:55.760
So these are kind of like a few examples
where currying really pays off, right?

134
00:07:55.760 --> 00:07:56.740
We've seen all this code,

135
00:07:56.740 --> 00:08:00.130
just kind of dissolve into the background
that was just noise it was

136
00:08:00.130 --> 00:08:04.320
we lost all the signal in favor of
this ceremonious noise everywhere.

137
00:08:04.320 --> 00:08:08.500
And, I don't want you to think that
you should always curry things and

138
00:08:08.500 --> 00:08:10.980
the smaller code is better code or
whatever.

139
00:08:10.980 --> 00:08:12.479
I'm just saying,

140
00:08:12.479 --> 00:08:18.510
if you define sometimes this makes
the most sense in this situation.

141
00:08:18.510 --> 00:08:23.790
To define a very clean function for
reuse rather than having to define

142
00:08:23.790 --> 00:08:26.380
a full function and all its arguments and
name those arguments and so on.

