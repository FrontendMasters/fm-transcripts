WEBVTT

1
00:00:00.330 --> 00:00:04.260
Available prices,
refactor that with compose.

2
00:00:04.260 --> 00:00:05.630
These are more tricky.

3
00:00:05.630 --> 00:00:07.620
That's why they're the bonus functions.

4
00:00:07.620 --> 00:00:11.272
Okay, so we take in cars,
and we'll filter that.

5
00:00:11.272 --> 00:00:13.920
All right, so that would probably be
our first step in the composition.

6
00:00:14.980 --> 00:00:17.700
Let's just go ahead and rename this and
redefine it underneath.

7
00:00:19.850 --> 00:00:22.060
So start with compose, and

8
00:00:22.060 --> 00:00:26.510
we'll grab filter prop, take some cars,
all right off to a great start.

9
00:00:26.510 --> 00:00:28.980
I'm hundred percent certain That's right.

10
00:00:28.980 --> 00:00:30.890
And I'm not normally
100% certain on anything.

11
00:00:30.890 --> 00:00:35.080
All right, and then we're going to map and
we're gonna format the money,

12
00:00:35.080 --> 00:00:37.680
okay and then we're gonna join that.

13
00:00:37.680 --> 00:00:39.549
All right, so we'll go ahead and map.

14
00:00:41.725 --> 00:00:43.160
The, look at this.

15
00:00:44.540 --> 00:00:47.045
So this is a little bit
of a fly in the ointment.

16
00:00:47.045 --> 00:00:52.380
[LAUGH] We have to,
we can actually just put this right here.

17
00:00:52.380 --> 00:00:54.580
It doesn't mean that we can't do that.

18
00:00:55.660 --> 00:00:59.110
But in keeping with
the program well let's,

19
00:00:59.110 --> 00:01:02.360
why don't we pull this function
out into a little helper?

20
00:01:02.360 --> 00:01:08.679
We'll call it format, dollar value.

21
00:01:08.679 --> 00:01:12.520
And we can just make this
a sub composition, right?

22
00:01:12.520 --> 00:01:15.655
We get to factor out compositions
into sub compositions and

23
00:01:15.655 --> 00:01:18.170
we'll call prop on dollar value.

24
00:01:19.440 --> 00:01:21.800
Need all these fun underscores everywhere.

25
00:01:23.240 --> 00:01:26.580
Typically I just import, compose and
curry so I don't have all the noise.

26
00:01:28.220 --> 00:01:35.220
And now after we filter all the ones in
stock, we can map over it and format that.

27
00:01:35.220 --> 00:01:39.650
And then finally we have to join
with under the string, right?

28
00:01:39.650 --> 00:01:42.910
So we'll just call it join with that.

29
00:01:44.180 --> 00:01:45.410
Now we can define our own join.

30
00:01:45.410 --> 00:01:47.920
I'm just going to cross my fingers and
hope RAM did that for me.

31
00:01:49.100 --> 00:01:49.935
Thank you, ramda.

32
00:01:49.935 --> 00:01:53.660
[LAUGH] So, there we go.

33
00:01:53.660 --> 00:01:57.090
And we could have put this right here,
right?

34
00:01:59.150 --> 00:02:01.120
That'd be a little bit unwieldy.

35
00:02:01.120 --> 00:02:05.670
Maybe we could have formatted it
like such, right where we say,

36
00:02:05.670 --> 00:02:08.280
all right,
I don't want to define a new function.

37
00:02:08.280 --> 00:02:11.380
I'm just gonna do this in line.

38
00:02:11.380 --> 00:02:16.910
And a lot of the functional languages
that are built around composition,

39
00:02:16.910 --> 00:02:18.310
make this a little bit less.

40
00:02:19.780 --> 00:02:23.930
This composes kind of large, like if it
was just like C might make a little bit it

41
00:02:23.930 --> 00:02:27.600
might be a little easier, but
there it's usually defined as an operator,

42
00:02:27.600 --> 00:02:32.410
binary operator like a dot or
arrow forward.

43
00:02:32.410 --> 00:02:36.200
So, in this it's kind
of painful to do that.

44
00:02:36.200 --> 00:02:38.000
And honestly, we're in JavaScript, right?

45
00:02:38.000 --> 00:02:41.310
We can do this, boom, right?

46
00:02:41.310 --> 00:02:43.820
It's not the end of the world.

47
00:02:43.820 --> 00:02:46.620
We don't have to not do that.

48
00:02:46.620 --> 00:02:49.350
So, it's up to you.

49
00:02:49.350 --> 00:02:50.460
However you wanna write this.

50
00:02:51.790 --> 00:02:53.390
If you need a helper function,

51
00:02:53.390 --> 00:02:58.740
if you find that useful, make it you
could always extract sub compositions.

52
00:02:58.740 --> 00:03:02.810
We could say hey, we've got this
filter in stock and then I want

53
00:03:02.810 --> 00:03:07.380
to get the dollar value, but this ruins
my array, it turns into a string, right?

54
00:03:07.380 --> 00:03:13.990
Why don't I make a more useful function
and we'll do available prices and

55
00:03:13.990 --> 00:03:20.490
then well available prices array
[LAUGH] For lack of a better name.

56
00:03:20.490 --> 00:03:25.490
And we'll just compose, we'll pull
out that sub-composition, available

57
00:03:25.490 --> 00:03:31.830
prices array, and we'll just join it and
call that available prices.

58
00:03:33.390 --> 00:03:35.140
And I'm jumping all over the place.

59
00:03:35.140 --> 00:03:37.760
It's because I'm still in vim mindset.

60
00:03:37.760 --> 00:03:40.830
So I'm not able to use
this editor correctly.

61
00:03:40.830 --> 00:03:43.970
But yeah, so you can always pull
out sub-compositions very nice.

62
00:03:43.970 --> 00:03:46.950
We have two loops, a filter than a map.

63
00:03:48.630 --> 00:03:51.410
That, actually, in Lodash,
you get this for free.

64
00:03:51.410 --> 00:03:52.930
Those will be fused into one loop.

65
00:03:53.970 --> 00:03:55.880
I think ramda might do that, I'm not sure.

66
00:03:57.600 --> 00:04:04.840
There's logic around these functions
that is general and mathematical and

67
00:04:04.840 --> 00:04:08.860
reliable, so you can always you don't
even have to try to fuse these.

68
00:04:08.860 --> 00:04:11.580
They just do it for you.

69
00:04:11.580 --> 00:04:13.340
That's really nice.

70
00:04:13.340 --> 00:04:15.850
And the other thing

71
00:04:15.850 --> 00:04:18.740
you can do is if you want to try
to do this yourself manually and

72
00:04:18.740 --> 00:04:22.650
you can get really complex with it, you
can look into transducers for loop fusion.

73
00:04:22.650 --> 00:04:25.700
We're not going to cover transducers today
I'm sure some other class somewhere does

74
00:04:25.700 --> 00:04:27.890
it cause Kyle's class does it.

75
00:04:27.890 --> 00:04:30.450
Yeah.
But a lot of this is out of the box.

76
00:04:30.450 --> 00:04:35.140
Like when you start to talk about,
good consumers and producers and

77
00:04:35.140 --> 00:04:39.700
the types that work together,
then you start to have to build your own

78
00:04:39.700 --> 00:04:43.250
transducers if you want to
get the maximum performance.

79
00:04:43.250 --> 00:04:46.990
I don't think this, like we can spend like
days and make it really complicated and

80
00:04:46.990 --> 00:04:48.690
it wouldn't change anything, right?

81
00:04:48.690 --> 00:04:52.130
But if you're really like in that world
and you need to do that, you can do that.

82
00:04:52.130 --> 00:04:56.080
But again, you could also write a for
loop underneath and

83
00:04:56.080 --> 00:04:58.710
just kind of capture it in a function and
then that function is pure and

84
00:04:58.710 --> 00:05:01.850
it's a pure function and mathematically,
who cares you wrote for loop underneath.

