WEBVTT

1
00:00:00.260 --> 00:00:02.250
I guess we should make some
results on the screen.

2
00:00:02.250 --> 00:00:03.320
What do you all think?

3
00:00:05.230 --> 00:00:06.500
So how about this?

4
00:00:06.500 --> 00:00:14.600
How about instead of open weather
fetch here, we call make weather.

5
00:00:14.600 --> 00:00:15.180
Right?

6
00:00:15.180 --> 00:00:20.410
Or how about get weather items.

7
00:00:20.410 --> 00:00:24.192
As soon as console done logging it,
we'll get the items out, actually,

8
00:00:24.192 --> 00:00:25.420
just get some HTML out.

9
00:00:25.420 --> 00:00:30.990
And we'll just say results.inner
HTML equals that HTML.

10
00:00:30.990 --> 00:00:31.890
Great.

11
00:00:31.890 --> 00:00:36.060
So we're able to pass in the zip,

12
00:00:36.060 --> 00:00:42.100
here and actually create some HTML and
put it on the screen.

13
00:00:42.100 --> 00:00:44.860
So we're,
we're trying to keep this as minimal

14
00:00:44.860 --> 00:00:47.800
as possible with all our side effects.

15
00:00:47.800 --> 00:00:50.850
And we'll push up above the line,
get weather items.

16
00:00:52.480 --> 00:00:56.674
And we take in a zip, and we do our,

17
00:00:56.674 --> 00:01:01.200
yeah, open weather fetch
with those two things.

18
00:01:01.200 --> 00:01:02.070
Super cool.

19
00:01:03.330 --> 00:01:06.980
And now that dot is a task,
you can map over it.

20
00:01:08.260 --> 00:01:11.250
And how about this where
we have to dig in, right?

21
00:01:11.250 --> 00:01:12.910
We had the that response.

22
00:01:14.350 --> 00:01:19.060
If I can remember what it was,
we get like this response and

23
00:01:19.060 --> 00:01:24.010
I think it's response.mean,
let's just take a look at what that is.

24
00:01:24.010 --> 00:01:25.800
And then we got to turn it in HTML, right?

25
00:01:25.800 --> 00:01:29.302
I wonder if it'll just
slap it on the screen.

26
00:01:29.302 --> 00:01:30.694
No, it won't.

27
00:01:30.694 --> 00:01:32.358
[LAUGH] What's happening there?

28
00:01:32.358 --> 00:01:34.561
What you're mad about?

29
00:01:34.561 --> 00:01:40.431
Get weather items, get weather items
is not [CROSSTALK] there it is.

30
00:01:40.431 --> 00:01:42.290
Thank you.

31
00:01:42.290 --> 00:01:44.130
Undefined.

32
00:01:44.130 --> 00:01:45.440
Nice.
It is not mean.

33
00:01:45.440 --> 00:01:47.590
Let's just look at the response.

34
00:01:47.590 --> 00:01:56.230
JSON string if I Nothing, okay.

35
00:01:56.230 --> 00:01:58.460
Can't read JSON of undefined.

36
00:01:58.460 --> 00:01:59.240
What do we got here?

37
00:02:00.280 --> 00:02:03.029
Is this right?

38
00:02:03.029 --> 00:02:05.330
It's right, so what's happening?

39
00:02:05.330 --> 00:02:07.160
So we have to turn in
the JSON before resolve it.

40
00:02:09.110 --> 00:02:10.250
Okay dot list.

41
00:02:10.250 --> 00:02:12.070
All right.

42
00:02:12.070 --> 00:02:18.245
So we can call on response dot list.

43
00:02:20.681 --> 00:02:22.730
Okay, we got a bunch of stuff out of here.

44
00:02:22.730 --> 00:02:27.369
We got a bunch of weathers,
weathers [LAUGH].

45
00:02:27.369 --> 00:02:27.952
What do we want to do?

46
00:02:27.952 --> 00:02:31.424
We want to get each weathers,
we map over them and

47
00:02:31.424 --> 00:02:35.827
we'll do w dot main that's what
I was thinking over here, for

48
00:02:35.827 --> 00:02:39.990
each of these they have a main and
a dot 10 and we have a dt.

49
00:02:41.078 --> 00:02:48.370
Okay, that main.tempt, let's just look at
this alone and then make more progress.

50
00:02:48.370 --> 00:02:50.650
Cool.
All right.

51
00:02:50.650 --> 00:02:53.535
So here's where I want to kind
of make a data type, right?

52
00:02:53.535 --> 00:02:58.570
So, in object oriented style, I would make
this object and it would take the weather

53
00:02:58.570 --> 00:03:01.500
response and would parse all those
methods and have methods that work on it.

54
00:03:01.500 --> 00:03:04.370
Right?
Here, we're gonna keep it separate.

55
00:03:04.370 --> 00:03:07.040
So we're gonna make a weather data type.

56
00:03:09.640 --> 00:03:16.040
It takes in, why don't we take in
our date time and our temperature.

57
00:03:16.040 --> 00:03:20.347
And we're gonna turn this, daytime and

58
00:03:20.347 --> 00:03:24.280
temp into just a formal object here.

59
00:03:25.460 --> 00:03:29.610
So we have that and we're gonna make
a bunch of these weathers, right?

60
00:03:29.610 --> 00:03:34.664
Weather we have the .mean.dt that's it.

61
00:03:34.664 --> 00:03:37.080
Inside the mean or
outside ,I can't remember.

62
00:03:37.080 --> 00:03:38.537
Now we'll find out.

63
00:03:42.196 --> 00:03:44.894
And so
this is kind of like a design decision,

64
00:03:44.894 --> 00:03:47.600
I tend to do is like
make these things formal.

65
00:03:47.600 --> 00:03:53.970
And why don't we go ahead and we want it
to be deterministic, right, and nice.

66
00:03:53.970 --> 00:03:59.160
We're gonna make a little helper
to weather that takes a dt and

67
00:03:59.160 --> 00:04:05.840
temp in here, we're actually going to
parse.a So we'll call weather here.

68
00:04:05.840 --> 00:04:08.788
We're gonna say like to date on the dt.

69
00:04:08.788 --> 00:04:13.100
And we're gonna say to Fahrenheit,

70
00:04:13.100 --> 00:04:17.640
Fahrenheit is gonna kill
me isn't on the temp.

71
00:04:17.640 --> 00:04:20.420
Okay, so this is a constructor.

72
00:04:20.420 --> 00:04:21.940
But I have different
constructors I can make for

73
00:04:21.940 --> 00:04:25.358
the same data type, which has
the date time and the temp on it.

74
00:04:25.358 --> 00:04:33.290
And to Fahrenheit, we'll have to look up
and but I know at least I can do this.

75
00:04:33.290 --> 00:04:37.840
Let's stub it out, to something
to Fahrenheit will just be the K.

76
00:04:40.333 --> 00:04:43.693
About the k plus a fast, perfect, and

77
00:04:43.693 --> 00:04:48.210
we'll bring in moment for
a little bit of parsing.

78
00:04:50.420 --> 00:04:53.000
And so we'll just say about moment.

79
00:04:54.420 --> 00:04:58.590
Now that's pure because it always take
a date time and return you something.

80
00:04:58.590 --> 00:05:00.070
In fact, it doesn't throw an error.

81
00:05:00.070 --> 00:05:04.150
It just gets the wrong data if it's not
formatted right, that's really nice.

82
00:05:04.150 --> 00:05:09.860
It's also a Unix timestamp, so we have to
subtract 1000 from it, so that's great.

83
00:05:09.860 --> 00:05:14.150
But if it all worked out,
let's take a look at that.

84
00:05:14.150 --> 00:05:15.586
These are two weather now.

85
00:05:17.573 --> 00:05:21.340
We should get a bunch of
objects didn't work out.

86
00:05:21.340 --> 00:05:22.130
Do we not have moment?

87
00:05:24.320 --> 00:05:25.080
&gt;&gt; Thank you.

88
00:05:25.080 --> 00:05:25.950
Good times.

89
00:05:27.960 --> 00:05:31.240
Debugger, great, bunch of objects.

90
00:05:31.240 --> 00:05:33.390
Let's actually do some debugging here.

91
00:05:33.390 --> 00:05:37.567
And we'll just map,

92
00:05:37.567 --> 00:05:42.452
x console.log x turn x.

93
00:05:42.452 --> 00:05:48.486
Great, a little log trick.

94
00:05:48.486 --> 00:05:51.690
Here it go, we have 40 of these things.

95
00:05:51.690 --> 00:05:52.650
Okay, we've got a moment.

96
00:05:54.910 --> 00:05:57.009
And we've got the temp which added 1000.

97
00:05:57.009 --> 00:05:58.975
That's cool.

98
00:05:58.975 --> 00:06:02.050
I don't really want a moment thing.

99
00:06:02.050 --> 00:06:08.234
I want it to just like be good, a date.

100
00:06:08.234 --> 00:06:10.300
I don't remember
&gt;&gt; stop format

101
00:06:10.300 --> 00:06:12.709
&gt;&gt; Thank you adapt format.

102
00:06:14.690 --> 00:06:15.850
Appreciate that.

103
00:06:17.770 --> 00:06:19.400
&gt;&gt; I think you have to put it down there.

104
00:06:19.400 --> 00:06:20.030
It's a moment.

105
00:06:20.030 --> 00:06:22.000
And then it's on the right hand turn.

106
00:06:22.000 --> 00:06:22.760
&gt;&gt; Of course.

107
00:06:22.760 --> 00:06:23.280
Yes.
&gt;&gt; Yeah.

108
00:06:24.490 --> 00:06:27.070
&gt;&gt; There we go.

109
00:06:27.070 --> 00:06:30.492
All right and see excellent.

110
00:06:30.492 --> 00:06:34.630
[LAUGH] Perhaps it's not on the main
I don't know if it's on main.

111
00:06:37.163 --> 00:06:38.690
There we go.

112
00:06:38.690 --> 00:06:40.700
Cool, but they're the wrong dates.

113
00:06:40.700 --> 00:06:42.540
Very much the wrong dates.

114
00:06:42.540 --> 00:06:45.000
Maybe the subtracting 1000 didn't work.

115
00:06:46.010 --> 00:06:46.720
Let's take a look at.

116
00:06:46.720 --> 00:06:49.760
&gt;&gt; I think it's divide by 1000
because we come back in milliseconds.

117
00:06:49.760 --> 00:06:51.380
&gt;&gt; Is that was happening?

118
00:06:51.380 --> 00:06:54.710
All right, let's divided by 1000,

119
00:06:54.710 --> 00:06:57.690
if anybody knows what's going on,
it doesn't really matter.

120
00:06:57.690 --> 00:06:58.680
No, that's not right either.

121
00:06:58.680 --> 00:07:02.710
It's all right,
it's a Unix time stamp SDT.

122
00:07:02.710 --> 00:07:07.190
And we'll just go ahead and roll with
it even though it's the wrong date.

123
00:07:08.370 --> 00:07:13.360
So we've got these dates and
these temps, right, we can go create

124
00:07:13.360 --> 00:07:18.300
the appropriate functions to
turn Kelvin and Fahrenheit.

125
00:07:18.300 --> 00:07:23.680
It's just cut and paste formula,
could go read through the moment docs and

126
00:07:23.680 --> 00:07:28.480
figure out how to turn
the timestamp into an actual date.

127
00:07:28.480 --> 00:07:31.510
Okay, let's replace
moment with the new date.

128
00:07:31.510 --> 00:07:35.745
And in fact, I think I can just do date.

129
00:07:35.745 --> 00:07:40.511
&gt;&gt; Then dot two local date string

130
00:07:40.511 --> 00:07:43.651
&gt;&gt; Yeah local date string.

131
00:07:43.651 --> 00:07:45.660
&gt;&gt; Wait.

132
00:07:45.660 --> 00:07:47.316
&gt;&gt; You're getting there
&gt;&gt; Is that right?

133
00:07:47.316 --> 00:07:50.820
&gt;&gt; Mm-hm
&gt;&gt; See what happens there.

134
00:07:50.820 --> 00:07:52.229
I might need a new, might not.

135
00:07:54.000 --> 00:07:58.833
This is awesome, dates,
&gt;&gt; [INAUDIBLE]

136
00:07:58.833 --> 00:08:01.862
[CROSSTALK]

137
00:08:01.862 --> 00:08:03.942
&gt;&gt; Cool.

138
00:08:03.942 --> 00:08:07.800
&gt;&gt; Running it.

139
00:08:07.800 --> 00:08:09.197
And two is it local?

140
00:08:15.434 --> 00:08:18.426
Well, it looks like it's working.

141
00:08:18.426 --> 00:08:19.870
&gt;&gt; Well it's local that's true.

142
00:08:19.870 --> 00:08:21.020
&gt;&gt; Okay, cool.

143
00:08:21.020 --> 00:08:22.680
See what happens there.

144
00:08:22.680 --> 00:08:23.550
All right.

145
00:08:23.550 --> 00:08:26.130
But that's kind of besides the point,
right?.

146
00:08:26.130 --> 00:08:27.190
I mean, I totally agree.

147
00:08:27.190 --> 00:08:31.230
Let's get rid of the moment and
just focus on this stuff.

148
00:08:31.230 --> 00:08:35.770
But, what I'd like to do here
is is kind of talk about how

149
00:08:35.770 --> 00:08:38.840
to structure this app and
pull apart these functions.

150
00:08:40.590 --> 00:08:45.290
So what we have here is some weather
functions in a weather type.

151
00:08:45.290 --> 00:08:50.280
So we can make a weather module and
pull these in, right, from a weather or

152
00:08:50.280 --> 00:08:52.820
their thing and
hide hide the complexity through.

153
00:08:52.820 --> 00:08:55.730
We could expose the weather constructor or
not.

154
00:08:57.940 --> 00:09:02.710
And we can do some more operations
within getWeatherItems or

155
00:09:02.710 --> 00:09:05.130
we can kind of break it
down into sub compositions.

156
00:09:06.410 --> 00:09:09.640
So, a lot of these have benefits and

157
00:09:09.640 --> 00:09:14.920
drawbacks, but as you see like we're
writing a pure functional app right now.

158
00:09:14.920 --> 00:09:18.509
And we're pushing all our effects
down to this and all our nice,

159
00:09:18.509 --> 00:09:20.650
clean, testable functions up here.

160
00:09:21.670 --> 00:09:27.880
Maybe we should finish
it up by saying toLi and

161
00:09:27.880 --> 00:09:31.490
we'll take weather item and

162
00:09:31.490 --> 00:09:37.381
we'll just do a little li weather.temp.

163
00:09:37.381 --> 00:09:45.318
And the weather.dt

164
00:09:45.318 --> 00:09:48.050
cool closeout that li.

165
00:09:49.120 --> 00:09:54.350
And let's see get weather items
does all this stuff right and

166
00:09:54.350 --> 00:10:00.340
then maps into all we have
are these weathers and

167
00:10:00.340 --> 00:10:05.580
we'll map over them toLi.

168
00:10:05.580 --> 00:10:11.230
And I don't feel comfortable putting
this to Li within this thing.

169
00:10:11.230 --> 00:10:18.195
So what I want to do is kind of
break this out into a prepare,

170
00:10:18.195 --> 00:10:22.710
items and it takes it takes some JSON.

171
00:10:22.710 --> 00:10:23.948
And then it does all this stuff.

172
00:10:23.948 --> 00:10:25.398
Great.

173
00:10:28.343 --> 00:10:32.190
So this is the JSON,
I guess we should have this right here.

174
00:10:32.190 --> 00:10:33.720
So let's say JSON dot list and

175
00:10:33.720 --> 00:10:36.170
we'll map all these weathers
into weathers and whatnot.

176
00:10:36.170 --> 00:10:38.000
And then it looks like.

177
00:10:41.049 --> 00:10:43.550
Yeah, do I get that wrong?

178
00:10:43.550 --> 00:10:47.960
This is actually already the list.

179
00:10:47.960 --> 00:10:52.324
Before we were mapping inside of
the task that was the first map.

180
00:10:52.324 --> 00:10:57.004
But now we map prepared items.

181
00:10:57.004 --> 00:11:01.660
We're already working directly with JSON.

182
00:11:01.660 --> 00:11:04.880
And that kind of cleans this up right
all these nested maps and stuff and

183
00:11:04.880 --> 00:11:11.530
also separates this whole nice reusable
kind of thing from the actual task itself.

184
00:11:11.530 --> 00:11:14.740
And in fact,
maybe a little bit better of a design

185
00:11:14.740 --> 00:11:18.200
would not be to take the full JSON,
but rather take the list itself.

186
00:11:19.810 --> 00:11:20.970
Law of Demeter and all that.

187
00:11:20.970 --> 00:11:26.050
And then, if ever I'm mapping over a list,

188
00:11:27.280 --> 00:11:30.250
I tend to find that I
should map on the outside.

189
00:11:31.700 --> 00:11:33.290
It's just a thing.

190
00:11:33.290 --> 00:11:34.930
Here is not the case.

191
00:11:34.930 --> 00:11:36.750
So I'm just gonna leave that alone.

192
00:11:36.750 --> 00:11:38.940
But do that Jason that list right here.

193
00:11:40.170 --> 00:11:44.150
But one thing I've noticed in the past is,
if I take an array and

194
00:11:44.150 --> 00:11:46.410
I call that map that
tends to be a red flag.

195
00:11:46.410 --> 00:11:50.500
It means I'm baking map into my function,
when usually I should pull that out and

196
00:11:50.500 --> 00:11:52.530
just call my function again and
again outside the function.

197
00:11:53.710 --> 00:11:58.160
In this case, we're turning
a list into another weather and

198
00:11:58.160 --> 00:12:00.240
then I mean, I guess we could do that.

199
00:12:00.240 --> 00:12:01.310
We could just do that but

200
00:12:01.310 --> 00:12:04.540
it would turn this into
a the whole meat of the function.

201
00:12:04.540 --> 00:12:05.773
Let's see what it looks like.

202
00:12:08.816 --> 00:12:13.982
So we can do json.list.mapprepare items.

203
00:12:13.982 --> 00:12:15.260
Alright.

204
00:12:15.260 --> 00:12:18.130
And this just now takes the W.

205
00:12:18.130 --> 00:12:19.310
Great.

206
00:12:19.310 --> 00:12:22.110
We're back to the map but it's much nicer.

207
00:12:22.110 --> 00:12:25.990
And then we have this toLi, whoops.

208
00:12:25.990 --> 00:12:28.360
All right, and that's our view stuff.

209
00:12:28.360 --> 00:12:29.700
And let's see how we're doing.

210
00:12:31.430 --> 00:12:36.543
Weather is not to find,
where's weather somebody find.

211
00:12:36.543 --> 00:12:38.342
&gt;&gt; Weather's weather.

212
00:12:38.342 --> 00:12:43.280
It's my brother in law's last name,
sisters, all right, cool.

213
00:12:43.280 --> 00:12:44.690
So we've got it.

214
00:12:46.160 --> 00:12:49.760
We can take it one step further by
grouping it by the date string.

215
00:12:49.760 --> 00:12:51.920
Unfortunately, I think they're
all gonna be in the same group.

216
00:12:53.570 --> 00:12:54.930
But hopefully,

217
00:12:54.930 --> 00:12:59.140
I've made enough progress here to where
you can kind of see how this unfolds.

