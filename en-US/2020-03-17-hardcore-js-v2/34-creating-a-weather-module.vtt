WEBVTT

1
00:00:00.340 --> 00:00:02.050
All right,
what else are we going to do here.

2
00:00:02.050 --> 00:00:03.530
We got like 15 more minutes.

3
00:00:03.530 --> 00:00:06.588
Let's just throw some stuff at it.

4
00:00:06.588 --> 00:00:10.830
So we're gonna do here is, so
the question I get a lot is,

5
00:00:10.830 --> 00:00:15.950
well, like I see this all
dumped into the same file.

6
00:00:15.950 --> 00:00:19.870
Why don't I make a little
open weather module, right.

7
00:00:19.870 --> 00:00:21.300
Now this is a private function.

8
00:00:22.320 --> 00:00:23.910
This is a private function.

9
00:00:23.910 --> 00:00:28.100
So I can go ahead and I can do this.

10
00:00:28.100 --> 00:00:33.681
I'm gonna make a new file
called open_weather.js.

11
00:00:33.681 --> 00:00:35.568
And I'm just gonna paste this stuff in.

12
00:00:37.787 --> 00:00:42.911
And now, look, I got private functions,
I'm only gonna

13
00:00:42.911 --> 00:00:48.300
export Open weather.

14
00:00:48.300 --> 00:00:52.700
And I'm gonna bring in my API key,

15
00:00:52.700 --> 00:00:57.040
my task and perhaps now, API key is
starting to become a thing, right?

16
00:00:57.040 --> 00:00:58.720
We're just like import it directly.

17
00:00:58.720 --> 00:00:59.540
We want to pass it in.

18
00:01:00.880 --> 00:01:08.930
So, let's get that out of there
[LAUGH] And, get this out of here.

19
00:01:08.930 --> 00:01:16.790
We're just gonna do import the Open
weather from .open_weather, great.

20
00:01:20.079 --> 00:01:23.519
Cool, so now we're in and like,
we've still got our like,

21
00:01:23.519 --> 00:01:28.050
happy Puroland up here, but we're
actually doing anything anymore, right?

22
00:01:28.050 --> 00:01:30.740
We're just gonna call open weather fetch.

23
00:01:32.060 --> 00:01:36.560
And it looks like we do have to
pass in the API key as well, right?

24
00:01:37.970 --> 00:01:41.420
So there's many ways to handle this.

25
00:01:42.910 --> 00:01:47.990
My preferred way,
as we'll see tomorrow, is that in

26
00:01:47.990 --> 00:01:52.770
the functional architecture class
would be to use the reader monad

27
00:01:53.770 --> 00:01:57.070
to hide this and only pull it out
of thin air when you need it.

28
00:01:58.290 --> 00:01:59.820
We're just gonna pass it in right now.

29
00:01:59.820 --> 00:02:01.320
And it's really not that different.

30
00:02:01.320 --> 00:02:01.820
No big deal.

31
00:02:02.860 --> 00:02:09.070
So we get an API key here and
we'll just pass that in.

32
00:02:09.070 --> 00:02:17.390
And hey, look, we can do that thing where
we turn it into both arguments at once.

33
00:02:17.390 --> 00:02:19.620
So instead of taking a zip and

34
00:02:19.620 --> 00:02:25.550
an API key separately, I know that's
always equivalent to taking both.

35
00:02:25.550 --> 00:02:30.640
So I'm just passing both in his array,
or we could pass an object with both.

36
00:02:30.640 --> 00:02:31.500
That's pretty fancy.

37
00:02:31.500 --> 00:02:32.000
Let's do that.

38
00:02:33.110 --> 00:02:34.720
Cool, let's go back.

39
00:02:36.730 --> 00:02:37.610
We packaged it up.

40
00:02:37.610 --> 00:02:40.380
We knew that was the same packaged up.

41
00:02:40.380 --> 00:02:41.370
Everybody's happy.

42
00:02:41.370 --> 00:02:42.070
Let's give it a shot.

43
00:02:44.170 --> 00:02:44.710
It's there.

44
00:02:44.710 --> 00:02:46.030
Why are you so mad at me?

45
00:02:46.030 --> 00:02:47.510
Our zip is undefined.

46
00:02:47.510 --> 00:02:49.680
And we have course [LAUGH] awesome.

47
00:02:50.860 --> 00:02:54.240
Because here comes the code yeah,
let's change it back to zip.

48
00:02:54.240 --> 00:02:57.150
I don't know why I got
fancy with zip code.

49
00:02:57.150 --> 00:02:58.130
Boom, all right.

50
00:02:58.130 --> 00:03:00.448
So everybody's still happy but
we have to call .Jason on it.

51
00:03:00.448 --> 00:03:02.220
Okay?

52
00:03:02.220 --> 00:03:03.900
So why don't we do that right off the bat.

53
00:03:03.900 --> 00:03:05.100
Let's do that down here.

54
00:03:05.100 --> 00:03:13.010
So we'll just do a then actually,
this is fetch it and do.

55
00:03:13.010 --> 00:03:16.302
How about a 2Jason here, right?

56
00:03:17.580 --> 00:03:20.750
And we have to map that, right.

57
00:03:20.750 --> 00:03:25.094
Because we have a task, we're gonna
crack open the task and call 2 Jason.

58
00:03:25.094 --> 00:03:28.954
So we get x, x out, Jason, great.

59
00:03:28.954 --> 00:03:36.320
So nice, [LAUGH] not happy,
we don't have a map defined.

60
00:03:36.320 --> 00:03:41.170
Bring that one in, I know I'm kind
of flying through this you all.

61
00:03:41.170 --> 00:03:46.150
I know we have limited time,
promise pending that's not what we wanted.

62
00:03:46.150 --> 00:03:49.520
We can coerce this into a task but
let's forget it,

63
00:03:49.520 --> 00:03:54.640
I'm just gonna do it right here
[LAUGH] for the sake of time.

64
00:03:54.640 --> 00:03:56.290
Let's just do that there,
get this out of here.

65
00:03:58.340 --> 00:04:04.340
But we could have said, okay, we have a
fetch call that returns a promise though,

66
00:04:04.340 --> 00:04:06.690
like we have a task that's
capturing a promise.

67
00:04:06.690 --> 00:04:07.820
Then we have another Jason call,

68
00:04:07.820 --> 00:04:10.070
it's a promise that we want
to make a task that resolves.

69
00:04:10.070 --> 00:04:13.450
When the promise resolves, return both
promise functions into task functions and

70
00:04:13.450 --> 00:04:14.990
will totally capture it.

71
00:04:14.990 --> 00:04:17.000
I don't feel like going through that.

72
00:04:17.000 --> 00:04:18.030
I feel like that's boring.

73
00:04:18.030 --> 00:04:19.870
So let's just keep hearing on.

