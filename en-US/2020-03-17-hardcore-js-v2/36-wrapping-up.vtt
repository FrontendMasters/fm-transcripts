WEBVTT

1
00:00:00.190 --> 00:00:04.000
Okay, so throughout the day,
we saw these functions defined left and

2
00:00:04.000 --> 00:00:08.990
right, which they kind of seem like
success and error, or error and success.

3
00:00:08.990 --> 00:00:11.739
And I'm just wondering where
the naming left and right came from,

4
00:00:11.739 --> 00:00:14.848
and if that's common in the functional
programming where that came from?

5
00:00:14.848 --> 00:00:18.686
&gt;&gt; So yes, so either it came out of,

6
00:00:18.686 --> 00:00:23.910
in type theory, it's kind of interesting.

7
00:00:23.910 --> 00:00:27.275
You have a sum type that says it's this or
that, and

8
00:00:27.275 --> 00:00:31.033
they just of started with kind
of the mathematical side,

9
00:00:31.033 --> 00:00:35.960
that says it's either left or
right, this branch of this tree.

10
00:00:35.960 --> 00:00:40.648
And it's kinda neat how the sum
type turns out to be the sum of all

11
00:00:40.648 --> 00:00:42.872
the habitants of both types.

12
00:00:42.872 --> 00:00:45.365
And then you have product,
which is the product of both types.

13
00:00:45.365 --> 00:00:52.250
But the point is that either is
not supposed to be for errors.

14
00:00:52.250 --> 00:00:54.740
It's just supposed to be this or that.

15
00:00:54.740 --> 00:00:57.080
And we've kind of pushed it into,

16
00:00:57.080 --> 00:01:02.050
it's this error handling monad
over the years via convention.

17
00:01:02.050 --> 00:01:07.022
And so Scala has actually renamed
it to success and or results and

18
00:01:07.022 --> 00:01:09.423
error or something like that.

19
00:01:09.423 --> 00:01:12.112
But you'll see it used in different ways.

20
00:01:12.112 --> 00:01:15.808
In fact, I have this really weird gist,

21
00:01:18.761 --> 00:01:22.465
Where we, there we go,
it happens to be in my history.

22
00:01:22.465 --> 00:01:26.341
Where we actually define a list in
terms of just the sum and product,

23
00:01:26.341 --> 00:01:28.318
canonical sum and product types.

24
00:01:28.318 --> 00:01:32.331
So we actually say, it's like
either null or a tuple of this and

25
00:01:32.331 --> 00:01:37.209
then it creates this whole list off off
of just these basic building blocks.

26
00:01:37.209 --> 00:01:43.643
And what's interesting about it is
either is not used as an error thing,

27
00:01:43.643 --> 00:01:49.140
it just means, am I at the end of
the list or do I have more to go?

28
00:01:49.140 --> 00:01:49.850
It's this or that.

29
00:01:51.280 --> 00:01:55.910
So being left and right keeps it
abstract enough to be the sum type.

30
00:01:55.910 --> 00:02:00.191
But in practice,
the names don't make as much sense, yeah.

31
00:02:00.191 --> 00:02:04.540
&gt;&gt; Kinda to follow up on his question and
Mark's point earlier about this,

32
00:02:04.540 --> 00:02:07.530
what we're really talking about
is a logical disjunction.

33
00:02:07.530 --> 00:02:08.280
&gt;&gt; Yes.

34
00:02:08.280 --> 00:02:09.090
&gt;&gt; With left and right.

35
00:02:09.090 --> 00:02:12.320
There are other monads that
cover the conjunctions,

36
00:02:13.400 --> 00:02:15.770
which are all category
theoretic structures.

37
00:02:15.770 --> 00:02:19.470
But we're using mostly math terms to
describe things that are familiar.

38
00:02:19.470 --> 00:02:21.990
&gt;&gt; Yes.
&gt;&gt; So it's just a weird mishmash of

39
00:02:21.990 --> 00:02:23.140
nomenclature.

40
00:02:23.140 --> 00:02:23.990
&gt;&gt; And that's true.

41
00:02:23.990 --> 00:02:27.480
On one hand,
if you wanna go look in the literature,

42
00:02:27.480 --> 00:02:29.520
a disjunction would
probably be the best name.

43
00:02:29.520 --> 00:02:34.300
And if you wanted to look into just
programs, for programs sake, error and

44
00:02:34.300 --> 00:02:37.510
success would be a better name with
either, which is neither, [LAUGH],

45
00:02:37.510 --> 00:02:38.486
which is great.

46
00:02:38.486 --> 00:02:44.475
[LAUGH] But if you hear people say,
why are you calling it a functor?

47
00:02:44.475 --> 00:02:47.310
They're just trying to be smart and fancy.

48
00:02:47.310 --> 00:02:48.930
Why don't you just call it a mappable?

49
00:02:50.200 --> 00:02:55.010
And the problem with calling it mappable
is you ignore all the history of

50
00:02:55.010 --> 00:02:58.990
functors and what they mean and
what you can go look up and use from that.

51
00:02:58.990 --> 00:03:04.040
And mappable does not come with that same
context of, if I ever hear a math name,

52
00:03:04.040 --> 00:03:06.120
I know immediately that
there's gonna be properties.

53
00:03:06.120 --> 00:03:08.427
I can build on it,
I can refactor my code to it.

54
00:03:08.427 --> 00:03:12.469
If I hear something that's da,
da, da, I know I can't.

55
00:03:12.469 --> 00:03:13.800
Or I don't know if I can, I have no idea.

56
00:03:13.800 --> 00:03:15.370
I have to go and read the docs.

57
00:03:15.370 --> 00:03:16.180
And most of the time,

58
00:03:16.180 --> 00:03:20.730
the docs is just someone's minimal
amount of work to explain how to use it.

59
00:03:20.730 --> 00:03:23.846
So yeah, math names, it's actually,

60
00:03:23.846 --> 00:03:28.899
poke a nerve when you talk about it,
but that's my opinion on it.

61
00:03:30.484 --> 00:03:31.409
&gt;&gt; And one other.

62
00:03:31.409 --> 00:03:32.325
&gt;&gt; Yeah.

63
00:03:32.325 --> 00:03:36.892
&gt;&gt; On the human side of functional
programing, where there's this

64
00:03:36.892 --> 00:03:41.710
learning curve and bringing people
along that aren't used to it.

65
00:03:41.710 --> 00:03:44.820
I'm just kinda curious what your
experience has been working with others

66
00:03:44.820 --> 00:03:48.740
that aren't really used to it, and any
advice you have on bringing people along.

67
00:03:48.740 --> 00:03:50.780
&gt;&gt; That's a great question.

68
00:03:50.780 --> 00:03:55.154
So my advice has always been,
if you don't know how to program,

69
00:03:55.154 --> 00:03:59.453
learn how to do object oriented
programming first, for sure.

70
00:03:59.453 --> 00:04:02.294
You're not gonna go to work and
be like, let's fire up the everyone.

71
00:04:02.294 --> 00:04:04.220
They're like, what, get out of here.

72
00:04:04.220 --> 00:04:07.570
So there's that, but
you're working on a team.

73
00:04:07.570 --> 00:04:11.797
As I go into a team, I start with
introducing either and task alone pushes

74
00:04:11.797 --> 00:04:16.325
you into the entire, it's just like
introducing promise in your code base.

75
00:04:16.325 --> 00:04:19.569
&gt;&gt; The rest of your code base just gets
infected with promise, right, so red,

76
00:04:19.569 --> 00:04:20.810
blue, or whatever.

77
00:04:20.810 --> 00:04:23.893
But the point is, once you get
buy in to either saying, look,

78
00:04:23.893 --> 00:04:26.806
we can make a safer function,
we can invert the control, but

79
00:04:26.806 --> 00:04:30.090
you're gonna have to map over it,
and then you have to learn chain.

80
00:04:30.090 --> 00:04:33.870
These are just two functions, that's it,
maybe fold, so three functions.

81
00:04:33.870 --> 00:04:37.334
So three functions for either,
hey look, they're the same for task.

82
00:04:37.334 --> 00:04:39.680
And if we use task instead of
promise we can do more stuff.

83
00:04:39.680 --> 00:04:46.290
And we start to kind of get buy
in of the team with those things.

84
00:04:46.290 --> 00:04:50.885
I would not do, let's get rammed up,
do point free code all day long.

85
00:04:50.885 --> 00:04:54.685
And they would be, this is really fun and
interesting and cool, and

86
00:04:54.685 --> 00:04:56.960
it helps me understand better.

87
00:04:56.960 --> 00:05:01.298
But it doesn't necessarily
have the same impact as kind

88
00:05:01.298 --> 00:05:03.805
of these formal structures do.

89
00:05:03.805 --> 00:05:05.315
When you combine them,

90
00:05:05.315 --> 00:05:09.470
you end up with this kind of
beautiful mathematical program.

91
00:05:09.470 --> 00:05:14.020
But definitely in a practical
business setting,

92
00:05:14.020 --> 00:05:17.570
we've introduced this in our team,
made some stuff.

93
00:05:17.570 --> 00:05:22.080
They started to see the benefits,
full buyin, made the whole app

94
00:05:22.080 --> 00:05:26.580
that runs our entire infrastructure
on this stuff and then we left.

95
00:05:26.580 --> 00:05:30.315
And the team that's supporting it
now [LAUGH] is like, what is this?

96
00:05:30.315 --> 00:05:36.100
So it's not as pervasive as possible or

97
00:05:36.100 --> 00:05:41.100
as you would think it'd be, so I think,
introducing it on your team, getting buy

98
00:05:41.100 --> 00:05:45.460
in, but also thinking about the future
of the maintenance is another thing.

99
00:05:45.460 --> 00:05:49.140
Until more people care,
it's still on the fringe.

100
00:05:50.710 --> 00:05:51.330
&gt;&gt; Thanks.

101
00:05:51.330 --> 00:05:51.830
&gt;&gt; Sure.

102
00:05:52.990 --> 00:05:58.042
&gt;&gt; Reminds me of reactive extensions, some
corporate cultures really embraced that.

103
00:05:58.042 --> 00:06:01.130
And it's a lot of the same principles.

104
00:06:01.130 --> 00:06:01.960
&gt;&gt; That's exactly right.

105
00:06:01.960 --> 00:06:02.932
And if you see RXJS,

106
00:06:02.932 --> 00:06:08.787
that is 100% pure functional
programming in your code base done.

107
00:06:08.787 --> 00:06:12.317
And I would nudge people these
promises and use that and

108
00:06:12.317 --> 00:06:15.242
you get way more experience
with this stuff.

109
00:06:15.242 --> 00:06:19.002
And then you're just like, well,
why don't we go a little further and

110
00:06:19.002 --> 00:06:20.079
get more benefits?

111
00:06:20.079 --> 00:06:26.055
Cool.
Have this as the list.

112
00:06:26.055 --> 00:06:30.450
And look forward to seeing y'all in
the functional architecture class,

113
00:06:30.450 --> 00:06:31.730
where we can take all this stuff and

114
00:06:31.730 --> 00:06:34.050
actually we're just gonna be
building apps all day in that one.

115
00:06:34.050 --> 00:06:36.920
So this is kind of a long march to

116
00:06:36.920 --> 00:06:39.630
learn all the all the skills
to be able to build apps.

117
00:06:39.630 --> 00:06:43.290
But hopefully, when we built that last
app, you understood what was happening.

118
00:06:43.290 --> 00:06:47.470
We were working with functors and
monads and composition and currying.

119
00:06:47.470 --> 00:06:50.630
And it was just there, so cool.

120
00:06:50.630 --> 00:06:52.215
Thanks for being here.

121
00:06:52.215 --> 00:06:58.236
&gt;&gt; [APPLAUSE]

