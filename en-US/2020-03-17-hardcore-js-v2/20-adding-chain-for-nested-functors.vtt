WEBVTT

1
00:00:00.070 --> 00:00:05.280
We can we can write a flatten method for
box, but it's kind of fold right fold will

2
00:00:05.280 --> 00:00:08.120
remove it from the box,
effectively kind of flattening it.

3
00:00:09.570 --> 00:00:14.860
Maybe instead,
we'll be able to write a function.

4
00:00:14.860 --> 00:00:19.048
Let's call it chain that
allow me to chain boxes.

5
00:00:19.048 --> 00:00:24.270
Now chain is also called flat
map will allow me to flatten and

6
00:00:24.270 --> 00:00:26.430
map in the same step.

7
00:00:26.430 --> 00:00:31.234
With JavaScript convention is to call
this chain because you're chaining

8
00:00:31.234 --> 00:00:35.817
these box operations but you can also
see it in flat map is the same idea.

9
00:00:35.817 --> 00:00:41.242
So let's go ahead and
read chain on box and in that sense,

10
00:00:41.242 --> 00:00:45.970
chain is expecting us
to return another box.

11
00:00:45.970 --> 00:00:51.689
It's gonna expect a box
of a box of a value.

12
00:00:51.689 --> 00:00:55.912
And so we don't wanna fold it up here,
we're just gonna map there.

13
00:00:55.912 --> 00:00:57.960
So let's go right chain.

14
00:00:59.550 --> 00:01:03.897
And I don't know if you've all,
if you're using promise.den,

15
00:01:03.897 --> 00:01:09.175
this is very much like promise.den
except promise.den will auto-flatten for

16
00:01:09.175 --> 00:01:14.320
you whereas chain does not or you have to
decide whether you wanna map or chain.

17
00:01:15.760 --> 00:01:19.650
With promises, you just called in all the
time and if its nested, it flattens it for

18
00:01:19.650 --> 00:01:20.580
you, if its not, it doesn't.

19
00:01:22.050 --> 00:01:25.955
We like to stay mathematical and
deterministic and

20
00:01:25.955 --> 00:01:29.964
we don't wanna do different
things under the hood.

21
00:01:29.964 --> 00:01:35.040
We wanna provide a strictly more
powerful API and give you both options.

22
00:01:35.040 --> 00:01:37.570
So let's create chain, chain is fun.

23
00:01:39.630 --> 00:01:44.343
It's in this case is exactly fold.

24
00:01:44.343 --> 00:01:48.475
[LAUGH] The reason for that is,
I'm just not gonna put it back in the box.

25
00:01:48.475 --> 00:01:51.320
I'm expecting this to return me a box.

26
00:01:51.320 --> 00:01:56.430
And I know that fold removes it from
a box and chain has a different,

27
00:01:57.850 --> 00:02:02.770
it's the same implementation with
a different kind of argument contract.

28
00:02:02.770 --> 00:02:06.929
We'll see this as we swap out
the different instances of functors and

29
00:02:06.929 --> 00:02:07.509
monads.

30
00:02:07.509 --> 00:02:11.198
That these two start to diverge and
become different functions, in this case,

31
00:02:11.198 --> 00:02:11.980
it's the same.

32
00:02:13.850 --> 00:02:17.820
So that's what we did, if you look at it.

33
00:02:17.820 --> 00:02:19.130
We saw a box of four, right?

34
00:02:19.130 --> 00:02:23.400
So why don't we just at the end folded
out, just take [LAUGH] The value.

35
00:02:23.400 --> 00:02:23.900
There we go.

36
00:02:25.580 --> 00:02:30.752
So there's all this different ways
to manipulate this and write this.

37
00:02:32.871 --> 00:02:38.162
I think what we are trying to learn
today in the second half of the class

38
00:02:38.162 --> 00:02:43.560
is just dealing with working with
computations in these containers.

39
00:02:43.560 --> 00:02:48.165
There's different API's for them to kind
of combine them and pull them out and

40
00:02:48.165 --> 00:02:50.973
nest them and,
swap their orders and whatnot.

41
00:02:50.973 --> 00:02:54.205
And this is what we're gonna be
dealing with, a lot of this crap.

42
00:02:54.205 --> 00:02:59.280
[LAUGH] But
we'll see the benefits here in a minute.

43
00:02:59.280 --> 00:03:01.610
So did anybody have any questions over?

44
00:03:01.610 --> 00:03:05.350
So we just defined monads right
then in there, boom, flatten.

45
00:03:06.420 --> 00:03:09.350
So, ask me questions.

46
00:03:09.350 --> 00:03:10.780
What are you thinking right now?

47
00:03:10.780 --> 00:03:12.419
Are you tripped up on any of this?

48
00:03:13.740 --> 00:03:16.480
So.
&gt;&gt; The thing that sold me on our last

49
00:03:16.480 --> 00:03:20.950
example was the,
you've probably got five eight options for

50
00:03:20.950 --> 00:03:26.705
handling price and discount and
injecting them into the container,

51
00:03:26.705 --> 00:03:29.425
which you'll eventually like
build that chain composition.

52
00:03:29.425 --> 00:03:32.165
There's a fair number of minimum forms for
that.

53
00:03:32.165 --> 00:03:32.725
&gt;&gt; Totally right.

54
00:03:32.725 --> 00:03:35.695
&gt;&gt; And that was a sticking point for
me as I was trying to think through it.

55
00:03:35.695 --> 00:03:40.553
&gt;&gt; Yeah, which ones would be the best and
that's we get back to the beginning like,

56
00:03:40.553 --> 00:03:42.992
okay, we have function equivalences.

57
00:03:42.992 --> 00:03:45.300
We can turn this into a function
that takes a pair and

58
00:03:45.300 --> 00:03:46.755
we could process them as a pair.

59
00:03:46.755 --> 00:03:50.214
We could do this boxed stuff.

60
00:03:50.214 --> 00:03:56.336
All this though is their equivalence and
knowing that their equivalent provides

61
00:03:56.336 --> 00:04:02.000
you like here's all my options and
I know that I can end up at the same spot.

62
00:04:02.000 --> 00:04:05.840
So I see that's a tripping
point as well a kind of

63
00:04:05.840 --> 00:04:07.748
a value add to know the equivalences.

64
00:04:07.748 --> 00:04:13.623
But yeah, these functions,
running inside the box and

65
00:04:13.623 --> 00:04:17.730
then nesting you can see here.

66
00:04:17.730 --> 00:04:20.690
We're just using the closure to continue.

67
00:04:20.690 --> 00:04:24.700
So if you're thinking your box
is saying I'm gonna establish

68
00:04:24.700 --> 00:04:28.570
a context and
that context has this variable.

69
00:04:29.860 --> 00:04:33.760
And then I'm gonna establish a new context
and that context has this variable.

70
00:04:33.760 --> 00:04:37.709
And now we're in a box and
working with both variables.

71
00:04:37.709 --> 00:04:42.680
You can kind of, we're not trapping
them in those little closures as we go.

72
00:04:42.680 --> 00:04:45.200
We're keeping them in a little
bit of bigger closure.

73
00:04:46.440 --> 00:04:49.543
Incidentally, if you're
working with promises,

74
00:04:49.543 --> 00:04:52.651
I always reach .then until
the situation happens.

75
00:04:52.651 --> 00:04:54.420
And then you look for a sync to it, right?

76
00:04:54.420 --> 00:04:58.072
Because then you have multiple
variables all playing together and

77
00:04:58.072 --> 00:04:59.710
you wanna keep in indenting.

78
00:05:01.070 --> 00:05:03.360
It turns out that situation doesn't
happen all that often though, so.

