WEBVTT

1
00:00:00.000 --> 00:00:07.880
Okay, so again, our job here is to
rewrite half the first large number.

2
00:00:07.880 --> 00:00:10.472
[LAUGH] These are what
the exercise is gonna look like.

3
00:00:10.472 --> 00:00:12.420
So kind of get a feel for
what we're doing here.

4
00:00:12.420 --> 00:00:13.837
It's what you'll be doing.

5
00:00:13.837 --> 00:00:17.840
And the idea here is that we're gonna
take the x's, we're gonna filter them,

6
00:00:17.840 --> 00:00:21.160
I'm gonna call the first divided
by two and then we return that.

7
00:00:21.160 --> 00:00:25.247
So how do we frame this in terms of box.

8
00:00:25.247 --> 00:00:27.370
Let's do the same as we did before.

9
00:00:29.090 --> 00:00:30.775
We're gonna rename that.

10
00:00:30.775 --> 00:00:33.500
Leave it around for for funsies.

11
00:00:33.500 --> 00:00:37.595
I don't know why, it's easier to watch
if I do it if I just get rid of it, but

12
00:00:37.595 --> 00:00:38.971
please have it up there.

13
00:00:38.971 --> 00:00:41.700
So we'll put the x's in the box.

14
00:00:41.700 --> 00:00:47.271
And you can skip this, you can go
directly to that if you wanted to.

15
00:00:47.271 --> 00:00:51.230
But I'm just gonna start there,
keep a nice clean workflow.

16
00:00:52.320 --> 00:00:54.410
So we're gonna map inside the box.

17
00:00:54.410 --> 00:00:58.590
It's kind of weird to have a map and
then a filter within.

18
00:00:58.590 --> 00:01:04.002
The map because you're probably not
used to seeing that but totally works.

19
00:01:04.002 --> 00:01:09.246
All right, so now we have found
a map again called first and

20
00:01:09.246 --> 00:01:12.304
we'll divide that by two.

21
00:01:12.304 --> 00:01:15.870
Cool.
And then we'll map over this.

22
00:01:15.870 --> 00:01:18.127
And return the answer.

23
00:01:18.127 --> 00:01:19.170
Look at that answer.

24
00:01:20.680 --> 00:01:24.351
So if you haven't noticed we're
capturing variable assignment.

25
00:01:24.351 --> 00:01:27.140
We have to fold it.

26
00:01:27.140 --> 00:01:30.067
Right get it out of the box at the end.

27
00:01:30.067 --> 00:01:33.423
So by capturing variable assignment by
wrangling these variables and kind of

28
00:01:33.423 --> 00:01:37.075
capturing them in these little closures
and getting rid of them right afterwards.

29
00:01:37.075 --> 00:01:40.300
Got nice control flow,
variable syntax, and

30
00:01:40.300 --> 00:01:45.022
we're able to create a composition
exactly the same as composing.

31
00:01:45.022 --> 00:01:49.800
And I could actually, if you want,
I could write the tune from,

32
00:01:49.800 --> 00:01:55.110
we could actually define compose
in terms of box and map, right?

33
00:01:55.110 --> 00:02:02.390
So if I said can const compose is
equal to, takes our f and our g right.

34
00:02:02.390 --> 00:02:06.717
And then we just say box, and
we'll return a function so

35
00:02:06.717 --> 00:02:11.760
right, it takes, it puts the x
in the box and maps f then g.

36
00:02:11.760 --> 00:02:12.342
Or it's actually g then f.

37
00:02:15.050 --> 00:02:15.793
That's pretty sick, right?

38
00:02:15.793 --> 00:02:19.881
We can actually do a compose in
terms of folded out I guess, but

39
00:02:19.881 --> 00:02:23.090
that'll be composed in terms of box.

40
00:02:23.090 --> 00:02:28.071
So, box is strictly more powerful
than compositions function,

41
00:02:28.071 --> 00:02:30.431
but it captures composition.

42
00:02:30.431 --> 00:02:32.100
So you can define it in terms of that.

43
00:02:33.709 --> 00:02:35.110
Sweet.

44
00:02:35.110 --> 00:02:36.520
Does anybody need a hug?
&gt;&gt; [LAUGH]

45
00:02:36.520 --> 00:02:37.312
&gt;&gt; [LAUGH] All right.

46
00:02:37.312 --> 00:02:42.768
This is where the hardcore
part comes into play,

47
00:02:42.768 --> 00:02:45.704
not the hug the functors.

48
00:02:45.704 --> 00:02:48.477
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH] Cut myself.

