WEBVTT

1
00:00:00.120 --> 00:00:01.150
Why are we doing this?

2
00:00:02.580 --> 00:00:06.646
[LAUGH] So you basically, if you're
writing all your programs in terms of

3
00:00:06.646 --> 00:00:10.080
functions, you have all
the math available to you.

4
00:00:10.080 --> 00:00:15.475
If you decide to not do that at any given
point, you lose all the math, all at once.

5
00:00:15.475 --> 00:00:19.230
[LAUGH] So I am not a big.

6
00:00:19.230 --> 00:00:22.520
Until I got into functional programming,
I didn't care about math.

7
00:00:22.520 --> 00:00:24.784
But now that it directly
affects my programs and

8
00:00:24.784 --> 00:00:27.750
it makes them better,
now I do and it's a lot of fun.

9
00:00:27.750 --> 00:00:28.940
So don't let that scare you away,

10
00:00:28.940 --> 00:00:31.900
it's just helpful to
have.that at your fingertips.

11
00:00:31.900 --> 00:00:35.130
But that's the biggest reason
I would say right off the bat,

12
00:00:35.130 --> 00:00:37.910
that you might wanna do this.

13
00:00:37.910 --> 00:00:41.640
In terms of just practical everyday stuff,
your functions are reliable right,

14
00:00:41.640 --> 00:00:43.660
they always return the same output for
inputs.

15
00:00:43.660 --> 00:00:48.100
They don't have these interesting edge
cases that we didn't think about up front.

16
00:00:49.110 --> 00:00:53.660
They're portable, they're not,stuck
in their environment, except for

17
00:00:53.660 --> 00:00:54.745
maybe that closure case.

18
00:00:54.745 --> 00:00:58.195
And we'll actually actively
combat closures tomorrow.

19
00:00:58.195 --> 00:01:03.650
[LAUGH] But today, we're gonna be defining
functions as portable as possible.

20
00:01:03.650 --> 00:01:08.200
And if you have to put them into closure,
they're as portable within that closure.

21
00:01:08.200 --> 00:01:09.440
Reusable, yes.

22
00:01:09.440 --> 00:01:12.080
You get a lot of reusability
out of this stuff, right,

23
00:01:12.080 --> 00:01:16.110
because they're not basically again,
buried in their environment.

24
00:01:16.110 --> 00:01:17.550
They're portable.

25
00:01:17.550 --> 00:01:21.050
They're testable,
same input to output,they're composable.

26
00:01:21.050 --> 00:01:24.130
And then finally,
we have these properties,

27
00:01:24.130 --> 00:01:26.660
which is the math stuff I
was about to talk about.

28
00:01:26.660 --> 00:01:29.080
But does anybody have
any questions on this?

29
00:01:29.080 --> 00:01:30.770
Like, why are we doing this?

30
00:01:30.770 --> 00:01:34.170
[LAUGH]
I mean,

31
00:01:34.170 --> 00:01:36.605
I'm doing it because Dan Abramov
told me to do it, but.

32
00:01:36.605 --> 00:01:40.447
[LAUGH]

