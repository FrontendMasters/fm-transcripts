WEBVTT

1
00:00:00.300 --> 00:00:05.204
Great, so we've got Deno installed, and
you have the extension for VS Code,

2
00:00:05.204 --> 00:00:09.909
and now we're ready to write our first
program in Deno, so let's do that.

3
00:00:14.287 --> 00:00:17.340
You can switch over to
the year first program branch.

4
00:00:17.340 --> 00:00:19.483
I'm just gonna stay on the one
that I'm on because again,

5
00:00:19.483 --> 00:00:21.670
it just mostly just resets the project.

6
00:00:21.670 --> 00:00:26.845
But let's write I mean,
I know it's old and tired but

7
00:00:26.845 --> 00:00:34.902
let's do it anyway, console log you knew
it was coming, console log hello world.

8
00:00:38.116 --> 00:00:42.210
There we go, all right, so
this is our first Dino program.

9
00:00:42.210 --> 00:00:45.826
Now one of the things
that you'll note here,

10
00:00:45.826 --> 00:00:50.311
is that the console line is
underlined with a squiggly.

11
00:00:50.311 --> 00:00:54.667
And you'll there's an error that says,
this cannot be compiled under isolated

12
00:00:54.667 --> 00:00:57.560
modules, because bla,
okay, this is a Dino thing.

13
00:00:57.560 --> 00:01:02.086
So Dino has got this TypeScript
configuration under the covers that it's

14
00:01:02.086 --> 00:01:06.539
using, and it's enforcing this In
this isolated modules, all right,

15
00:01:06.539 --> 00:01:08.250
what's it saying there?

16
00:01:08.250 --> 00:01:13.055
What it's saying is that your code has to
be a module, in order for you to execute

17
00:01:13.055 --> 00:01:18.030
it, you can still run this, with this
little squiggly arrow, it will still run.

18
00:01:19.340 --> 00:01:24.340
So, to do that,
we're just gonna Dino run app.ts right,

19
00:01:24.340 --> 00:01:28.990
and then you can see it
says checking file, right?

20
00:01:28.990 --> 00:01:32.963
And then hello world, by the way,
if you do wanna get rid of this squiggly,

21
00:01:32.963 --> 00:01:34.200
you can just do this.

22
00:01:34.200 --> 00:01:39.234
If you can just you can just do export,
and then brackets like this, and then that

23
00:01:39.234 --> 00:01:44.830
that makes Visual Studio Code think that
it's module and, and you're good to go.

24
00:01:44.830 --> 00:01:46.938
If that squiggly line bothers you,

25
00:01:46.938 --> 00:01:50.550
let's talk about what happened
here when we did this.

26
00:01:50.550 --> 00:01:55.438
So we ran it, it checked the file,
and then it printed it out,

27
00:01:55.438 --> 00:02:00.050
notice that if we run this again,
it does the check again.

28
00:02:00.050 --> 00:02:04.758
Because made a change, but if we do
it a third time, there's no check,

29
00:02:04.758 --> 00:02:06.730
okay, so what is happening?

30
00:02:06.730 --> 00:02:10.505
I wanna dive into, and
take a look at what it's doing,

31
00:02:10.505 --> 00:02:12.897
when it's checking these files.

32
00:02:12.897 --> 00:02:17.824
The checking process in Dino,
what it's doing is

33
00:02:17.824 --> 00:02:23.115
because TypeScript is a first
class citizen in Dino.

34
00:02:23.115 --> 00:02:25.659
It doesn't mean that it's
a first class citizen in V8,

35
00:02:25.659 --> 00:02:27.360
where the JavaScript is executed.

36
00:02:27.360 --> 00:02:32.207
It still has to be JavaScript before V8
can run it, which means that Dino has to

37
00:02:32.207 --> 00:02:35.960
convert the file to JavaScript,
before it can be executed.

38
00:02:37.450 --> 00:02:39.197
And so when it does this,

39
00:02:39.197 --> 00:02:44.130
it creates a build of your project
on your system, so actually.

40
00:02:44.130 --> 00:02:47.842
You know earlier on we did the build
ourselves, where we transpile the files,

41
00:02:47.842 --> 00:02:52.040
we put them in a dist directory, Dino is
actually doing that, still doing that.

42
00:02:52.040 --> 00:02:54.875
It's just it's doing it for
you, and hides it from you, but

43
00:02:54.875 --> 00:02:56.945
we wanna take a look at
what that looks like.

44
00:02:56.945 --> 00:03:01.544
And, so in order to do that we need
to go to the Dino cash to take

45
00:03:01.544 --> 00:03:04.730
a look at what's in the Dino cash.

46
00:03:04.730 --> 00:03:08.944
You can get info,
about your system by running Dino info,

47
00:03:08.944 --> 00:03:14.400
and that will tell you where the caches
for Dino on your system here.

48
00:03:14.400 --> 00:03:19.790
So for me, that's this home birth calling
cache Dino Gen, is where the TypeScript

49
00:03:19.790 --> 00:03:24.339
compiler caches I've created
a shortcut cut for this just Dino cash.

50
00:03:25.840 --> 00:03:29.186
On my own machine,
which just takes me directly there, so

51
00:03:29.186 --> 00:03:34.480
if we look inside this directory, there's
a depth and agenne directory, okay?

52
00:03:34.480 --> 00:03:38.385
Now we don't have any dependencies, those
will go into depth folders we'll look at

53
00:03:38.385 --> 00:03:40.920
later, but
let's move into this Gen directory here.

54
00:03:40.920 --> 00:03:44.039
So I'm gonna go into the gen,
and then there's a file, so

55
00:03:44.039 --> 00:03:48.380
let's move into the file, and then
inside of that, sorry, files a command.

56
00:03:48.380 --> 00:03:52.920
So I have to CD into hold on,
let's see here, sorry,

57
00:03:52.920 --> 00:03:57.370
let's go into the gen, let's CD into file.

58
00:03:57.370 --> 00:04:00.864
And then there's a now what it's
doing is it's mimicking my home,

59
00:04:00.864 --> 00:04:03.260
start a folder structure on my machine.

60
00:04:03.260 --> 00:04:06.185
Okay, so where I am is I'm in home, right,

61
00:04:06.185 --> 00:04:10.630
if you can look in that then my account,
if we look in that then Dev.

62
00:04:10.630 --> 00:04:14.817
If we look inside of that, then we'll see
another folder that has my name on it,

63
00:04:14.817 --> 00:04:18.270
this is the same folder structure,
that I have on my own machine.

64
00:04:18.270 --> 00:04:19.413
So Dino is just,

65
00:04:19.413 --> 00:04:24.870
replicating mind machines folder
structure inside of this file folder.

66
00:04:24.870 --> 00:04:28.083
And if we look inside of this boom,
there's my Dino exercises project, so

67
00:04:28.083 --> 00:04:29.110
let's move into that.

68
00:04:30.910 --> 00:04:34.417
Oops, one too many, S's and
then inside of that, and

69
00:04:34.417 --> 00:04:38.580
now we're starting to see
some interesting stuff.

70
00:04:38.580 --> 00:04:42.795
So, if we look at our project here,
where's my mouse,

71
00:04:42.795 --> 00:04:48.580
just to refresh ourselves on what it
actually looks like we have an app.ts.

72
00:04:48.580 --> 00:04:51.409
So let's move into the exercise folder,
and you can see,

73
00:04:51.409 --> 00:04:54.087
in fact let's just open this up,
and take a look at it.

74
00:04:56.734 --> 00:05:02.550
What we have here, inside of this gen
folder is a couple of different things,

75
00:05:02.550 --> 00:05:09.190
so we have this app.ts.js, and
this file contains look, our code, right?

76
00:05:09.190 --> 00:05:11.200
There's a couple of other files in here.

77
00:05:11.200 --> 00:05:14.995
One of them is this build info file,
which contains a lot of

78
00:05:14.995 --> 00:05:19.880
different information about metadata,
about my project here.

79
00:05:19.880 --> 00:05:24.208
And if we scroll down to the bottom,
you'll see there's an actual Ts config

80
00:05:24.208 --> 00:05:28.350
that's actually like embedded
in the bottom of this file.

81
00:05:28.350 --> 00:05:33.368
And then over here, this file here,
there's a hash, and what this is doing is

82
00:05:33.368 --> 00:05:39.350
Dino's using all of this to identify files
on your system, and link them together.

83
00:05:39.350 --> 00:05:42.621
But just know, what I'm trying to show
you here, is that when you actually run

84
00:05:42.621 --> 00:05:46.220
something in Dino, a TypeScript,
this is what happens under the covers.

85
00:05:46.220 --> 00:05:48.310
And we'll come back and
take a look at this later.

86
00:05:48.310 --> 00:05:51.573
But this is where Dino is
putting all of these files, and

87
00:05:51.573 --> 00:05:54.779
working all of its magic is
inside of this gene folder.

88
00:05:57.941 --> 00:06:04.850
All right, so that's your first project,
you should feel pretty good about that,

89
00:06:04.850 --> 00:06:10.810
well, let's run some TypeScript here,
which is a little bit more fun.

90
00:06:12.680 --> 00:06:16.897
So let's do constant message,
which is that we did this before,

91
00:06:16.897 --> 00:06:20.670
it's a string and
we'll say it's a type, a hello world.

92
00:06:21.720 --> 00:06:25.425
Okay, set the value there, and
then instead of logging out the string,

93
00:06:25.425 --> 00:06:28.100
let's just log out the message.

94
00:06:28.100 --> 00:06:32.724
All right, I'm still in the wrong,

95
00:06:32.724 --> 00:06:38.540
terminal directory,
let's move back there we go,

96
00:06:38.540 --> 00:06:43.300
so Dino run apt at Ts, there we go.

97
00:06:43.300 --> 00:06:46.019
All right so it checks it,
just like we did before, and

98
00:06:46.019 --> 00:06:47.510
then it gives us hello world.

99
00:06:48.980 --> 00:06:53.811
You can skip the checking,
so you can do Dino run,

100
00:06:53.811 --> 00:06:58.758
no check app.ts and
it will just execute the file,

101
00:06:58.758 --> 00:07:02.190
it won't actually check it.

102
00:07:02.190 --> 00:07:06.140
Right, so like if we were to do this,
this is not valid TypeScript.

103
00:07:06.140 --> 00:07:09.185
So if we run this like,
we did Dino run app.ts,

104
00:07:09.185 --> 00:07:13.130
it's gonna the TypeScript
compiler is gonna fail.

105
00:07:13.130 --> 00:07:15.650
Right here, but
if we do the no check like this,

106
00:07:15.650 --> 00:07:19.650
it's just gonna try to execute it and
then it's gonna fail.

107
00:07:19.650 --> 00:07:24.296
So, just know that you can bypass
the TypeScript compiler which you

108
00:07:24.296 --> 00:07:28.548
need you may need to do from time
to time with the no check flag.

109
00:07:28.548 --> 00:07:33.320
Executing JavaScripts, you can do that.

110
00:07:33.320 --> 00:07:36.565
Let's just come over here, and

111
00:07:36.565 --> 00:07:42.573
add a plain app.js file where
we can just do the same thing,

112
00:07:42.573 --> 00:07:45.960
just console.log Hello World.

113
00:07:45.960 --> 00:07:51.245
And Deno is fine with this,
it doesn't care if you use JavaScript or

114
00:07:51.245 --> 00:07:55.120
TypeScript, it's fine with either one.

115
00:07:55.120 --> 00:07:57.685
Of course, there's not a check step,
because there's no translation,

116
00:07:57.685 --> 00:07:58.990
that needs to happen.

117
00:07:58.990 --> 00:08:04.000
So, if you prefer writing JavaScript,
you're more than welcome to do that.

118
00:08:04.000 --> 00:08:09.076
However, you will find that all
of Dino's examples are written

119
00:08:09.076 --> 00:08:13.310
in TypeScript, and
virtually all of the libraries.

120
00:08:13.310 --> 00:08:15.264
The other libraries
are written in TypeScript,

121
00:08:15.264 --> 00:08:17.800
it's just a TypeScript world out there,
when you get into Dino

