WEBVTT

1
00:00:00.660 --> 00:00:05.177
So one of the things that you would do in
a web server is read parameters off of

2
00:00:05.177 --> 00:00:05.764
the URL.

3
00:00:05.764 --> 00:00:08.309
These can be query string parameters, or

4
00:00:08.309 --> 00:00:11.807
they can be parameters passed
on the body of the request.

5
00:00:11.807 --> 00:00:14.367
So what we wanna do is look at how we
can do both of those things with this

6
00:00:14.367 --> 00:00:15.130
simple web server.

7
00:00:15.130 --> 00:00:16.923
So, let's modify this app so

8
00:00:16.923 --> 00:00:20.529
that we actually pass in the name
that we wanna say hello to.

9
00:00:20.529 --> 00:00:25.490
So up here in our URL, what we wanna
do is just say pass in the name.

10
00:00:25.490 --> 00:00:28.496
And then, just say if it was Burke,
then we would want it to say,

11
00:00:28.496 --> 00:00:31.084
Hello Burke instead of Hello World,
or what have you.

12
00:00:31.084 --> 00:00:34.171
So in order to pull this off,

13
00:00:34.171 --> 00:00:39.870
we need to read the query
string parameter.

14
00:00:39.870 --> 00:00:41.550
So, how do we do that?

15
00:00:41.550 --> 00:00:44.895
Well, this is one of these places
where we're gonna use the debugger to

16
00:00:44.895 --> 00:00:46.380
figure out how we can do that.

17
00:00:46.380 --> 00:00:48.740
So, let's get out of this.

18
00:00:48.740 --> 00:00:51.457
And what we wanna do is I'm just
gonna put a break point here, so

19
00:00:51.457 --> 00:00:53.320
we can take a look at
the incoming request.

20
00:00:54.470 --> 00:00:59.910
So let's go back and create a launch
file with Deno, if you remember, Deno.

21
00:01:01.250 --> 00:01:04.050
All right, I'm gonna get that
right before the end of the day.

22
00:01:04.050 --> 00:01:09.130
And we're gonna point it at exercise,
and then app.ts.

23
00:01:09.130 --> 00:01:11.150
All right, so let's go ahead and
run this now.

24
00:01:11.150 --> 00:01:14.315
Make sure our break point is there,
yep, so let's launch.

25
00:01:18.553 --> 00:01:20.577
And it's gonna go ahead and
break on the first line.

26
00:01:20.577 --> 00:01:23.977
If you don't want it to
break on the first line,

27
00:01:23.977 --> 00:01:27.043
you can change this inspect, right here.

28
00:01:27.043 --> 00:01:29.618
In the launch.json, you can change
inspect BRK to just inspect, and

29
00:01:29.618 --> 00:01:32.290
then it won't do that, it won't break
on the first line in the program.

30
00:01:32.290 --> 00:01:38.717
And then you can see
your parsing allow-all.

31
00:01:38.717 --> 00:01:42.402
Okay, so it's running now,
let's go ahead and come back over here.

32
00:01:42.402 --> 00:01:44.980
Let's collapse this,
get all this noise out of the way.

33
00:01:44.980 --> 00:01:46.660
And let's refresh the browser.

34
00:01:49.090 --> 00:01:52.600
Our program, and it should break, does.

35
00:01:53.700 --> 00:01:56.320
Let's just take a look at the req object
and see what we're working with here.

36
00:01:57.340 --> 00:01:58.440
So here's our req object.

37
00:01:59.450 --> 00:02:03.210
The IntelliSense is quite large cuz
we've got the font size cranked up.

38
00:02:03.210 --> 00:02:04.633
But what can we work with here?

39
00:02:04.633 --> 00:02:07.598
Nothing on the body, nothing new.

40
00:02:07.598 --> 00:02:10.102
It's a get method, okay, right here.

41
00:02:10.102 --> 00:02:14.140
Okay, so
it looks like we're getting the URL.

42
00:02:14.140 --> 00:02:16.230
It's giving us the whole
path after the address.

43
00:02:16.230 --> 00:02:19.740
So we could probably use this
to parse out the query string.

44
00:02:19.740 --> 00:02:21.130
So, how do we do this?

45
00:02:22.760 --> 00:02:26.942
Well, remember I told you
that Deno wants to stay

46
00:02:26.942 --> 00:02:31.240
as close to browser concepts as possible.

47
00:02:31.240 --> 00:02:36.039
And because of that, we can use
something called URL search params,

48
00:02:36.039 --> 00:02:39.360
which is a browser API
inside of Deno to do this.

49
00:02:40.600 --> 00:02:48.290
So what we can do here is we can say
const params = new URL search params.

50
00:02:48.290 --> 00:02:51.946
And you see that it's
there in the autocomplete,

51
00:02:51.946 --> 00:02:56.670
because VS Code knows about this API,
it's a browser API.

52
00:02:56.670 --> 00:02:58.770
So it's available for us to use here.

53
00:02:58.770 --> 00:03:03.385
And then what URL search params
is gonna want is the string that

54
00:03:03.385 --> 00:03:06.420
it's gonna use to parse out the params.

55
00:03:06.420 --> 00:03:09.960
So what URL search params does is it just
gives us an API for interacting with,

56
00:03:09.960 --> 00:03:12.800
parsing out these URL parameters and
interacting with them.

57
00:03:13.850 --> 00:03:18.890
Now, I should note that when I was
testing this, for some reason,

58
00:03:18.890 --> 00:03:23.780
URL search params cannot
handle this slash right here.

59
00:03:23.780 --> 00:03:27.792
It doesn't know what to do with this
slash, and that slash is gonna be there,

60
00:03:27.792 --> 00:03:31.270
no matter what, and so
we actually have to pull it off.

61
00:03:31.270 --> 00:03:34.684
So the easiest way to do that
is to just do a substring.

62
00:03:34.684 --> 00:03:40.014
And then we're just gonna pull off the
first character and if we omit the second

63
00:03:40.014 --> 00:03:45.220
argument to substring, that's just
gonna give us the rest of the string.

64
00:03:45.220 --> 00:03:48.677
So what we're saying here basically is,
start at the second character

65
00:03:48.677 --> 00:03:51.860
of the string, and give us from
that character on to the variant.

66
00:03:53.400 --> 00:03:57.106
And then what we can
do here is we can say,

67
00:03:57.106 --> 00:04:01.250
the name const name = params.get, right?

68
00:04:01.250 --> 00:04:04.090
And that when looking for
the name parameter.

69
00:04:04.090 --> 00:04:08.552
And then, down here in our,
stead of returning this,

70
00:04:08.552 --> 00:04:14.281
what we can do instead is return and
then watch the magic, there it is.

71
00:04:14.281 --> 00:04:18.427
We're into name instead.

72
00:04:18.427 --> 00:04:20.469
But we might wanna do name or,

73
00:04:20.469 --> 00:04:25.560
in case it's not passed in because
otherwise we'll just get undefined.

74
00:04:26.990 --> 00:04:31.750
Okay, so just to recap what we just did,

75
00:04:31.750 --> 00:04:38.120
we figured out that the URL
on req has the path.

76
00:04:38.120 --> 00:04:41.480
We're gonna use the URL
search params method,

77
00:04:41.480 --> 00:04:44.091
which is a browser API, to parse it.

78
00:04:44.091 --> 00:04:46.650
And then once we parse it,
we can just look for the name parameter.

79
00:04:47.650 --> 00:04:49.350
And then we'll return that in HTML.

80
00:04:49.350 --> 00:04:56.230
So let's go ahead and start our
server again, I think this was it.

81
00:04:56.230 --> 00:04:57.030
No, this was it.

82
00:05:01.620 --> 00:05:04.340
Running, all right, I misspelled running.

83
00:05:04.340 --> 00:05:09.040
All right, so let's stop this cuz we,
all right so it says, Hello Burke.

84
00:05:09.040 --> 00:05:09.940
All right, perfect.

85
00:05:09.940 --> 00:05:15.210
So let's change this, Hello Luis.

86
00:05:15.210 --> 00:05:18.730
All right, it's working,
look at that, very nice.

87
00:05:18.730 --> 00:05:23.277
Okay, so we've successfully
been able to parse a query

88
00:05:23.277 --> 00:05:28.160
string in a simple Deno
server using URLSearchParams.

89
00:05:28.160 --> 00:05:32.005
Now what I want you to get from that is
that you can use that browser API inside

90
00:05:32.005 --> 00:05:34.430
of your Deno applications
to solve problems.

91
00:05:34.430 --> 00:05:37.669
So you might ordinarily go to NPM
to try to solve that problem,

92
00:05:37.669 --> 00:05:41.110
to try to parse that query string,
but you don't need to do that.

93
00:05:41.110 --> 00:05:41.980
You can just use that API.

