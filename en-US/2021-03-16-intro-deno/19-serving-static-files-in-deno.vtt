WEBVTT

1
00:00:00.030 --> 00:00:01.760
So let's talk about
serving up static files.

2
00:00:01.760 --> 00:00:02.725
So so far, what did we do?

3
00:00:02.725 --> 00:00:07.870
We returned some blank text on the body,
we returned some HTML, but

4
00:00:07.870 --> 00:00:13.540
just an h1 and then we parsed her
out with some crazy NPM package.

5
00:00:13.540 --> 00:00:15.710
But normally,
a web server doesn't do that.

6
00:00:15.710 --> 00:00:20.920
Normally, it returns like an index.html
file, which is just what you would do.

7
00:00:20.920 --> 00:00:22.860
So how can we do that?

8
00:00:24.300 --> 00:00:26.470
Well, let's see.

9
00:00:26.470 --> 00:00:30.639
First of all, I'm gonna get rid of all
this route parser stuff because it is,

10
00:00:30.639 --> 00:00:32.580
frankly, it's just super hacky.

11
00:00:32.580 --> 00:00:35.490
I don't know that I would ever
do that in a production project.

12
00:00:35.490 --> 00:00:36.860
And let's get rid of this.

13
00:00:38.520 --> 00:00:41.430
And let's get rid of this too,
just get rid of all this.

14
00:00:42.800 --> 00:00:49.130
Now, what I wanna do instead here is I'm
gonna add a new file called index.html.

15
00:00:49.130 --> 00:00:52.500
And then, in this file,
let's make some HTML, y'all.

16
00:00:53.860 --> 00:00:58.894
If you didn't know, VS Code has
something called Emmet built in.

17
00:00:58.894 --> 00:01:02.837
And so you don't actually need, if you
want a whole HTML page, you can just do

18
00:01:02.837 --> 00:01:06.310
this bang character and then tab,
and that will just fill it all in.

19
00:01:06.310 --> 00:01:12.420
So this is our simple web server,
My Simple Web Server.

20
00:01:12.420 --> 00:01:15.913
And then down here, we wanna do,
I don't know, what do we wanna do?

21
00:01:15.913 --> 00:01:21.343
We wanna a div that's got
a class of container and

22
00:01:21.343 --> 00:01:24.797
container, kind of section.

23
00:01:24.797 --> 00:01:25.298
There we go.

24
00:01:25.298 --> 00:01:32.429
And then inside, just put an h1,
give it a class is-size-one, Hello World.

25
00:01:32.429 --> 00:01:33.846
Lots of Hello World.

26
00:01:33.846 --> 00:01:36.360
And then I'm just gonna pull
in a style sheet up here.

27
00:01:36.360 --> 00:01:41.092
So one of my favorite, favorite,
favorite CSS frameworks is called Bulma.

28
00:01:41.092 --> 00:01:42.978
Anybody heard of Bulma?

29
00:01:42.978 --> 00:01:47.122
Bulma is awesome,
I love everything about it.

30
00:01:47.122 --> 00:01:49.189
It's very easy to use CSS framework.

31
00:01:49.189 --> 00:01:52.634
It looks great, wonderful stuff.

32
00:01:52.634 --> 00:01:55.122
And then let's just add some
additional classes here.

33
00:01:55.122 --> 00:01:57.557
We're just making this look nice.

34
00:01:57.557 --> 00:02:04.816
Now we wanna return this
file from our server here.

35
00:02:04.816 --> 00:02:05.980
How do we do that?

36
00:02:07.421 --> 00:02:09.905
Well, there are a couple of
different ways that we could do it.

37
00:02:09.905 --> 00:02:14.470
Sort of the most naive way for
us to do this is to do it like this.

38
00:02:15.960 --> 00:02:22.980
If we said we have some HTML, and
we want to get the HTML out of that file.

39
00:02:22.980 --> 00:02:26.540
Well, how can we get
the HTML out of the file?

40
00:02:26.540 --> 00:02:29.910
Well, the easiest way would
be to just read the file.

41
00:02:29.910 --> 00:02:33.281
So if you remember,
we've got that Deno object,

42
00:02:33.281 --> 00:02:37.230
and it's got these read file,
refile sync methods.

43
00:02:37.230 --> 00:02:40.014
So we do read file and it's,
what file do you wanna read?

44
00:02:40.014 --> 00:02:43.768
I wanna read index.html.

45
00:02:43.768 --> 00:02:44.688
There we go.
Sorry,

46
00:02:44.688 --> 00:02:48.303
the IntelliSense ran
a little bit slow there.

47
00:02:48.303 --> 00:02:52.360
But this returns a promise,
which you can see here.

48
00:02:52.360 --> 00:02:56.610
Promise, so we wanna await it,
we're gonna await.

49
00:02:56.610 --> 00:02:59.091
And then, for the body right here,

50
00:02:59.091 --> 00:03:03.980
instead of returning all this stuff,
we're just gonna return html.

51
00:03:05.170 --> 00:03:10.631
Now, it's important to note
that this read file returns

52
00:03:10.631 --> 00:03:15.747
a byte array, but
the body here can take a byte array,

53
00:03:15.747 --> 00:03:19.976
or it can take a string, either or, right?

54
00:03:19.976 --> 00:03:20.999
So we can return either.

55
00:03:20.999 --> 00:03:25.160
It just happens to be able to handle
that byte array that we just read.

56
00:03:25.160 --> 00:03:26.720
We don't actually need it as a string.

57
00:03:26.720 --> 00:03:27.766
It's not gonna be a string.

58
00:03:27.766 --> 00:03:31.359
And in fact, if we were to,
just for fun, we can log this out.

59
00:03:32.700 --> 00:03:38.486
Just so you can see what
this looks like Localhost,

60
00:03:38.486 --> 00:03:41.891
and we're gonna refresh the page.

61
00:03:44.379 --> 00:03:46.280
O-oh, didn't work, what happened?

62
00:03:47.420 --> 00:03:49.720
Can anybody guess before we
actually get up to the air?

63
00:03:52.890 --> 00:03:56.046
No such file or directory-
&gt;&gt; It's [INAUDIBLE] html.

64
00:03:56.046 --> 00:04:01.523
You added extra parenthesis
after index.html.

65
00:04:01.523 --> 00:04:03.722
&gt;&gt; I did, look at that.

66
00:04:05.868 --> 00:04:07.690
That was a nice catch.

67
00:04:07.690 --> 00:04:10.060
Attention to detail, wow, very impressive.

68
00:04:10.060 --> 00:04:11.071
All right, let's try it again.

69
00:04:11.071 --> 00:04:13.024
I think it'll work this time, let's see.

70
00:04:13.024 --> 00:04:16.300
Hey, all right, there we go, very nice.

71
00:04:16.300 --> 00:04:20.208
So now we're actually
returning an index page,

72
00:04:20.208 --> 00:04:24.417
an HTML page, and
we could return all sorts of HTML.

73
00:04:24.417 --> 00:04:25.393
And here's the byte array.

74
00:04:25.393 --> 00:04:29.520
So you can see it like, this is what it
actually looked like when we read it.

75
00:04:29.520 --> 00:04:37.824
It's just that Deno's little respond
method knows what to do with that, okay?

76
00:04:37.824 --> 00:04:42.690
But we don't actually
even have to do this.

77
00:04:42.690 --> 00:04:47.110
So there is a,
as part of Deno's standard library, so

78
00:04:47.110 --> 00:04:51.256
let's go out look at their
standard library here.

79
00:04:51.256 --> 00:04:55.042
And if we go into the HTTP folder,

80
00:04:55.042 --> 00:05:00.327
we'll find a find called file_server.ts.

81
00:05:00.327 --> 00:05:02.216
And so
we can actually use this thing instead.

82
00:05:02.216 --> 00:05:06.643
So if we grab this, let's come back and

83
00:05:06.643 --> 00:05:10.544
let's put this here, all right?

84
00:05:10.544 --> 00:05:18.051
And then let's import from,
and then standard library.

85
00:05:18.051 --> 00:05:21.700
I'm just gonna pull off the version,
cuz I just want the latest version.

86
00:05:21.700 --> 00:05:24.508
And then we need to put it in quotes.

87
00:05:26.547 --> 00:05:28.386
And then let's fetch it.

88
00:05:34.680 --> 00:05:37.321
Okay, and let's see what's in here.

89
00:05:37.321 --> 00:05:39.440
What can we import from this thing?

90
00:05:39.440 --> 00:05:42.831
serve file, what else do we have?

91
00:05:42.831 --> 00:05:45.366
That looks like it.
Okay, pretty easy, serve file,

92
00:05:45.366 --> 00:05:47.520
I guess that's what we'll use.

93
00:05:48.590 --> 00:05:53.163
All right, so we can use this serve
file thing to serve up static

94
00:05:53.163 --> 00:05:56.545
files instead of trying
to read it ourselves.

95
00:05:56.545 --> 00:06:02.269
And all we have to do that,
to do to do that, rather, is to say so

96
00:06:02.269 --> 00:06:07.034
we're going to do is say
const.html = serveFile.

97
00:06:07.034 --> 00:06:12.244
And then we're gonna pass in the req, and
we're gonna pass in the file path, right?

98
00:06:12.244 --> 00:06:16.777
Which is index.html, and then, yeah,

99
00:06:16.777 --> 00:06:22.241
we need to actually respond
with the html here.

100
00:06:22.241 --> 00:06:26.109
And I bet you, I bet you,
this is a promise.

101
00:06:26.109 --> 00:06:27.700
Yeah, it is, see?

102
00:06:27.700 --> 00:06:32.044
And so we're gonna await that and
then that will work.

103
00:06:32.044 --> 00:06:34.840
All right, so are we still running here?

104
00:06:34.840 --> 00:06:35.651
Is our watch still working?

105
00:06:35.651 --> 00:06:40.003
It is, all right, so let's go back and,
if we've done everything correctly,

106
00:06:40.003 --> 00:06:41.220
nothing will change.

107
00:06:42.510 --> 00:06:43.233
And it doesn't, right?

108
00:06:43.233 --> 00:06:45.719
We refresh, and it just works.

109
00:06:45.719 --> 00:06:48.240
But this actually gets even simpler.

110
00:06:49.470 --> 00:06:51.193
We don't actually,

111
00:06:51.193 --> 00:06:56.755
[LAUGH] actually we don't need any
of this code to do this whatsoever.

112
00:06:56.755 --> 00:07:01.246
We could actually just call this
thing directly, and this will work.

113
00:07:01.246 --> 00:07:07.458
I believe what we could do here,
if we were so inclined,

114
00:07:07.458 --> 00:07:13.291
is we could do deno run,
and we're gonna allow all.

115
00:07:13.291 --> 00:07:15.490
And then we can just
run this file directly.

116
00:07:17.940 --> 00:07:22.130
And it's now listening,
all right, so let's go there.

117
00:07:22.130 --> 00:07:25.162
Open, and it works.

118
00:07:25.162 --> 00:07:30.322
So I mean, Deno is a kind of
a magical thing in this regard in so

119
00:07:30.322 --> 00:07:35.385
much as that they've thought
through a lot of this stuff and

120
00:07:35.385 --> 00:07:41.384
a lot of this stuff kind of just works,
which is is pretty freakin rad.

121
00:07:41.384 --> 00:07:43.714
I don't hate it, I don't hate it at all.

122
00:07:43.714 --> 00:07:50.053
Very cool, all right, so
just to wrap up what we did there.

123
00:07:50.053 --> 00:07:52.655
We imported the server, we used that.

124
00:07:52.655 --> 00:07:55.449
We brought in the file server.

125
00:07:55.449 --> 00:07:59.440
Initially, we read the file system
with Deno but then we, or Deno.

126
00:07:59.440 --> 00:08:03.765
But then we used the file server,
the built in file server to serve it.

127
00:08:03.765 --> 00:08:08.146
And then eventually, we just used the file
server and nothing else, nothing else.

128
00:08:08.146 --> 00:08:10.561
And we got the same exact result.

129
00:08:10.561 --> 00:08:15.778
&gt;&gt; I'm a bit confused,
when you directly used

130
00:08:15.778 --> 00:08:21.559
the serve file,
[INAUDIBLE] into the [INAUDIBLE],

131
00:08:21.559 --> 00:08:27.340
you did not remove this
awaits on file function.

132
00:08:27.340 --> 00:08:30.863
Is it not the same thing?

133
00:08:30.863 --> 00:08:34.230
&gt;&gt; Well, I didn't call the app.ts file.

134
00:08:34.230 --> 00:08:37.257
All I did was run this file directly.

135
00:08:37.257 --> 00:08:41.152
&gt;&gt; Okay, so but how does it know
which file to look for then?

136
00:08:41.152 --> 00:08:46.106
&gt;&gt; Because I'm in this directory, it
just looks in whatever directory I'm in.

137
00:08:46.106 --> 00:08:48.446
So if I ran this from
a different directory,

138
00:08:48.446 --> 00:08:53.230
it would serve up whatever index.html's
in that directory, if there is one.

139
00:08:53.230 --> 00:08:55.023
Otherwise, it would just 404.

140
00:08:55.023 --> 00:08:58.215
It's also trying to get the favor con,
which we don't have.

