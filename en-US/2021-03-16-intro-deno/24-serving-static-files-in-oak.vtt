WEBVTT

1
00:00:00.490 --> 00:00:07.172
So now let's talk about serving
up static files in Oak.

2
00:00:07.172 --> 00:00:10.306
Usually we have some local JavaScript or

3
00:00:10.306 --> 00:00:15.569
CSS that we want to serve up and
maybe we have a folder called public.

4
00:00:15.569 --> 00:00:22.939
And inside of that folder, we have
another folder called style sheets.

5
00:00:22.939 --> 00:00:30.085
And then inside of that folder, we have
another file called site.css, okay.

6
00:00:30.085 --> 00:00:36.994
And then let's add some CSS to this file,
right.

7
00:00:36.994 --> 00:00:41.322
So now what we wanna do is we wanna
reference this file from our template.

8
00:00:41.322 --> 00:00:45.414
So I'm gonna go to the template, to our
layout template because we want this to

9
00:00:45.414 --> 00:00:47.587
apply to everything in the application.

10
00:00:47.587 --> 00:00:50.078
And I just wanna link to it.

11
00:00:50.078 --> 00:00:52.178
So let's just do link.

12
00:00:52.178 --> 00:00:59.362
And then let's go to
public/stylesheets/site.css.

13
00:00:59.362 --> 00:01:06.019
Okay, now, we need some way to tell Oak,
when it sees this public URL here,

14
00:01:06.019 --> 00:01:11.135
that it needs to serve up
the file that's inside, right?

15
00:01:11.135 --> 00:01:14.490
We have to figure out how to tell
Oak to serve up static resources or

16
00:01:14.490 --> 00:01:17.120
static assets,
which is what we're gonna do now.

17
00:01:18.540 --> 00:01:25.162
So, to do that, we need to define
very creatively a route to handle it.

18
00:01:25.162 --> 00:01:28.736
So we might do something like this.

19
00:01:28.736 --> 00:01:33.385
Let's go back to our app file.

20
00:01:33.385 --> 00:01:40.416
And we might define a route that says
like this is static files route.

21
00:01:40.416 --> 00:01:44.897
And what we're doing here is just for
saying anything that comes on

22
00:01:44.897 --> 00:01:49.634
public with PATH just serve up
the value that's in the PATH variable.

23
00:01:49.634 --> 00:01:56.000
Because we know that PATH is gonna
contain stylesheets/site.css.

24
00:01:57.370 --> 00:02:02.693
So we can do that, and the way that
we would return our result here,

25
00:02:02.693 --> 00:02:06.685
we would just tell it to
send back the static file,

26
00:02:06.685 --> 00:02:12.031
even though we haven't talked
about how we're gonna do that yet.

27
00:02:12.031 --> 00:02:17.783
The problem is that this won't work,
because PATH right here,

28
00:02:17.783 --> 00:02:25.460
is gonna be equal to in our case,
it's gonna be equal to stylesheets, right?

29
00:02:25.460 --> 00:02:27.637
So sorry, it won't match the PATH.

30
00:02:27.637 --> 00:02:28.610
That's the problem.

31
00:02:28.610 --> 00:02:31.159
So path is gonna be stylesheets.

32
00:02:31.159 --> 00:02:37.230
It's gonna look like this /site.css.

33
00:02:37.230 --> 00:02:39.334
I don't know vs code keeps
changing this for me.

34
00:02:39.334 --> 00:02:42.898
And the problem with that,
is that it's only gonna pull,

35
00:02:42.898 --> 00:02:46.800
it won't match this URL because
this doesn't match this.

36
00:02:46.800 --> 00:02:49.935
And so what we need to do is say like,
match this PATH,

37
00:02:49.935 --> 00:02:52.389
and like everything that comes after it.

38
00:02:52.389 --> 00:02:56.685
So everything that comes after public
should be considered the variable.

39
00:02:56.685 --> 00:03:00.520
And we do that by just adding
a plus sign on the end.

40
00:03:00.520 --> 00:03:02.374
It's kind of like a wild card.

41
00:03:02.374 --> 00:03:06.237
And so it really won't match everything
that comes after public slash anything

42
00:03:06.237 --> 00:03:08.770
will get matched here,
which is what we want.

43
00:03:08.770 --> 00:03:12.756
Now we just need a way to
send back the static file.

44
00:03:12.756 --> 00:03:17.320
So we go to our depths file here.

45
00:03:19.210 --> 00:03:23.803
There is a method not that file,
this file.

46
00:03:23.803 --> 00:03:31.026
There's a method here called, if we look
here, there's a function called send.

47
00:03:31.026 --> 00:03:33.820
Let's just use this thing,
so we're gonna export it.

48
00:03:35.430 --> 00:03:40.431
Okay, and then in our app file,
we wanna bring it in.

49
00:03:40.431 --> 00:03:45.410
And we want to send the file back and
use it.

50
00:03:45.410 --> 00:03:49.266
So, down here what we wanna do
is just send back the file.

51
00:03:49.266 --> 00:03:52.590
So we could say send, right?

52
00:03:52.590 --> 00:03:58.525
And then all we have to do is, pass in
the context and then the PATH to the file.

53
00:03:58.525 --> 00:04:02.047
So we should be able to say ctx and

54
00:04:02.047 --> 00:04:06.234
I think its path is the variable here.

55
00:04:06.234 --> 00:04:08.633
Let me make just make sure
I'm doing that right.

56
00:04:08.633 --> 00:04:10.904
Yeah, params that path,
and it's a promise.

57
00:04:10.904 --> 00:04:11.824
So we need to await this.

58
00:04:11.824 --> 00:04:16.972
So we're gonna send in the context and
then ctx.params.path.

59
00:04:23.970 --> 00:04:28.486
But typescript does not like this,
because if we hover over it it says,

60
00:04:28.486 --> 00:04:33.705
argument of type string undefined is not
assignable to parameter of type string.

61
00:04:33.705 --> 00:04:36.765
In other words, this could be
undefined and that's not okay.

62
00:04:36.765 --> 00:04:41.715
So we have to give it like an alternative
value here of empty string.

63
00:04:41.715 --> 00:04:44.950
Typed languages, y'all,
that's just how it goes.

64
00:04:44.950 --> 00:04:49.572
All right, so with that, we should be
able to send back that file now and

65
00:04:49.572 --> 00:04:51.438
display the CSS in our page.

66
00:04:51.438 --> 00:04:57.913
So let's go back here, refresh, and
let's see what's happening in our outside.

67
00:04:57.913 --> 00:05:02.732
So we're getting a 404 file not found.

68
00:05:02.732 --> 00:05:04.492
Why is that happening?

69
00:05:04.492 --> 00:05:06.468
Well, let's see here.

70
00:05:06.468 --> 00:05:10.500
Right now, we're not seeing
any errors in our application.

71
00:05:10.500 --> 00:05:14.846
If you look at the console,
there's nothing in there, right?

72
00:05:14.846 --> 00:05:18.300
But there's an error happening,
but we don't see it.

73
00:05:18.300 --> 00:05:22.629
And that's because Oak swallows errors for

74
00:05:22.629 --> 00:05:26.491
you unless you otherwise handle them.

75
00:05:26.491 --> 00:05:29.755
You just don't see him,
but we can see them if we

76
00:05:29.755 --> 00:05:34.254
just tell Oak a little bit about
how we wanna handle those errors.

77
00:05:36.184 --> 00:05:37.340
So let's do that.

78
00:05:37.340 --> 00:05:42.151
I'm just gonna say app.addeventlistener.

79
00:05:42.151 --> 00:05:44.826
And we're gonna look for the error event.

80
00:05:44.826 --> 00:05:48.068
And then on that we just wanna handle
we're just gonna pass in the error and

81
00:05:48.068 --> 00:05:48.605
handle it.

82
00:05:48.605 --> 00:05:50.350
So we'll just log into the console.

83
00:05:52.688 --> 00:05:53.584
Like this.

84
00:05:53.584 --> 00:06:00.578
Okay, and now Restarting,

85
00:06:00.578 --> 00:06:04.310
now let us see if we can figure
out what is happening here.

86
00:06:06.110 --> 00:06:07.661
Okay, so now we have got an error.

87
00:06:07.661 --> 00:06:10.349
What does it say?

88
00:06:10.349 --> 00:06:16.857
No such file or directory.

89
00:06:16.857 --> 00:06:20.990
So it doesn't know it
can't find this file.

90
00:06:20.990 --> 00:06:25.601
So what we could do here,
is we could just log and say like well,

91
00:06:25.601 --> 00:06:27.521
what is the value of path?

92
00:06:27.521 --> 00:06:33.160
Sorry, what is the value
of ctx.params.path.

93
00:06:33.160 --> 00:06:34.283
This is one way to do it.

94
00:06:34.283 --> 00:06:37.349
Probably the simplest way to do it.

95
00:06:37.349 --> 00:06:41.918
And then refresh.

96
00:06:41.918 --> 00:06:47.130
And then we can scroll back up and
it is stylesheets/site.css.

97
00:06:47.130 --> 00:06:53.240
Well, the problem is,
it's in public/stylesheets/site.css.

98
00:06:54.820 --> 00:06:58.049
So what can we do about that?

99
00:06:58.049 --> 00:07:01.248
Well, one of the things
that we could do is,

100
00:07:01.248 --> 00:07:05.580
use that current working
directory to specify a root here.

101
00:07:05.580 --> 00:07:08.894
So on the send,
we have an options object that we can use.

102
00:07:08.894 --> 00:07:13.275
So if I do this options, and
then we can specify the root directory.

103
00:07:13.275 --> 00:07:20.274
And so our root directory would be Dino
dot the current working directory, right?

104
00:07:20.274 --> 00:07:24.953
That's the path to the to the directory
we're in now plus public.

105
00:07:24.953 --> 00:07:30.877
So let's just do it like this,
let's use a string template

106
00:07:30.877 --> 00:07:36.573
literal to the current working
directory slash public.

107
00:07:36.573 --> 00:07:41.235
All right, so
that hopefully that will work.

108
00:07:41.235 --> 00:07:46.199
So let's go back to our app,
refresh, we have a stylesheet,

109
00:07:46.199 --> 00:07:50.121
okay, because now we've
got the correct path.

110
00:07:50.121 --> 00:07:53.024
There's actually a better way to do this.

111
00:07:53.024 --> 00:07:58.556
If we were to go in and
do a little bit of debugging and

112
00:07:58.556 --> 00:08:03.962
digging around here instead
of relying on the path

113
00:08:03.962 --> 00:08:09.388
parameter here rather,
we can use ctx.params.

114
00:08:09.388 --> 00:08:15.407
So no sorry ctx.url, what is it?

115
00:08:15.407 --> 00:08:20.934
Sorry ctx.request.url.path name.

116
00:08:20.934 --> 00:08:23.620
And that is always a string.

117
00:08:23.620 --> 00:08:25.449
It's never undefined.

118
00:08:25.449 --> 00:08:28.920
And by doing that,
we've made this code a little bit tighter.

119
00:08:28.920 --> 00:08:32.679
And because it's gonna have the path name,
it's gonna include public.

120
00:08:32.679 --> 00:08:34.260
So we don't need this anymore either.

121
00:08:34.260 --> 00:08:40.174
So we could just say the root is,

122
00:08:40.174 --> 00:08:43.468
Deno.cwd().

123
00:08:43.468 --> 00:08:44.490
And this should still work.

124
00:08:46.190 --> 00:08:53.515
Let's make sure we've restarted,
there we go, refresh.

125
00:08:53.515 --> 00:08:55.297
And it does, all right?

126
00:08:55.297 --> 00:08:59.508
So just a simpler way to return that same,
static file.

127
00:08:59.508 --> 00:09:05.128
So now any file that we put in here, that
we can serve up with that static public

128
00:09:05.128 --> 00:09:10.847
layouts, so we could come in and add
a new folder that's called JavaScripts.

129
00:09:10.847 --> 00:09:13.592
And then we can put our Java
scripts in this folder, and

130
00:09:13.592 --> 00:09:15.861
then reference them via
that relative URL and

131
00:09:15.861 --> 00:09:19.930
any static file images, anything we want,
can now be served out of this folder.

