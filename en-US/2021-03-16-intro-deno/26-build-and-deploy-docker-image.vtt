WEBVTT

1
00:00:00.433 --> 00:00:04.888
There are many different ways that
we could deploy this application.

2
00:00:04.888 --> 00:00:07.895
We can do it bundled or
unbundled or compiled.

3
00:00:07.895 --> 00:00:11.804
We've talked about why we can't
do it bundled or compiled.

4
00:00:11.804 --> 00:00:15.662
But we can deploy it unbundled the way
that we would just deploy any old,

5
00:00:15.662 --> 00:00:17.348
express or node application.

6
00:00:17.348 --> 00:00:20.960
We could deploy it to a virtual machine or

7
00:00:20.960 --> 00:00:26.272
we could deploy it to a PaaS
which is a platform as a service,

8
00:00:26.272 --> 00:00:29.373
or we can deploy it as a container.

9
00:00:29.373 --> 00:00:34.297
Now, of course, you can always deploy
anything that you like on your own

10
00:00:34.297 --> 00:00:39.317
server VM that you have or that's
hosted in the cloud, that's up to you.

11
00:00:39.317 --> 00:00:43.665
A PaaS which is a platform as a service
is where the hosting provider

12
00:00:43.665 --> 00:00:46.860
provides the runtime and
you provide your code.

13
00:00:46.860 --> 00:00:51.962
The most popular one of these is probably
Heroku although Azure has one as well.

14
00:00:51.962 --> 00:00:56.064
Google Cloud has them, Amazon has them,
you find them everywhere.

15
00:00:56.064 --> 00:01:01.033
We're not going to use them one here
today because they're all very specific

16
00:01:01.033 --> 00:01:02.032
to that cloud.

17
00:01:02.032 --> 00:01:06.008
And if I show you just one way,
then it won't be applicable everywhere and

18
00:01:06.008 --> 00:01:08.714
I want to do something
that will work everywhere.

19
00:01:08.714 --> 00:01:12.602
And so one of the things that we can do
that will just work everywhere is to put

20
00:01:12.602 --> 00:01:15.402
this thing inside of a Docker
container to deploy it.

21
00:01:15.402 --> 00:01:19.712
So that's what we're going
to do in this section here.

22
00:01:19.712 --> 00:01:22.503
So containers,
if you don't know what containers are, and

23
00:01:22.503 --> 00:01:25.031
because it wasn't a prerequisite for
this course..

24
00:01:25.031 --> 00:01:29.110
But basically what it is, is it's a way to
bundle up your entire application and your

25
00:01:29.110 --> 00:01:33.074
run time, make sure that it works on your
machine, and then you can just take it and

26
00:01:33.074 --> 00:01:36.188
move it over to the server and
start it and it will work there too.

27
00:01:36.188 --> 00:01:39.585
Without explaining the ins and
outs of containers,

28
00:01:39.585 --> 00:01:41.987
that's just the magic that they do.

29
00:01:41.987 --> 00:01:45.039
So how do we create a container?

30
00:01:45.039 --> 00:01:47.850
Well, we're gonna have to
have Docker installed and

31
00:01:47.850 --> 00:01:51.355
we need a file that's going to
define how this container is built.

32
00:01:51.355 --> 00:01:54.130
So I'm going to create a new file and
call it Docker file.

33
00:01:55.856 --> 00:02:02.678
And in this Docker file, we need to
pull in an image that has deno in it.

34
00:02:02.678 --> 00:02:07.583
Now deno doesn't have
an official Docker image, but

35
00:02:07.583 --> 00:02:12.706
this hayd person has been
creating these deno images and

36
00:02:12.706 --> 00:02:16.530
the community seems to be okay with this.

37
00:02:16.530 --> 00:02:19.737
And they seem to be keeping on
top of the releases as well.

38
00:02:19.737 --> 00:02:22.634
So I'm going to guess that
1.6.1 is available already.

39
00:02:22.634 --> 00:02:24.649
We'll see here in a minute.

40
00:02:24.649 --> 00:02:29.674
All right, the next thing that we wanna
do here is define a working directory for

41
00:02:29.674 --> 00:02:32.383
our application inside of the container.

42
00:02:32.383 --> 00:02:36.847
So we're basically just saying, hey, make
a folder in this container called app and

43
00:02:36.847 --> 00:02:39.211
we're going to put all
of our files in there.

44
00:02:39.211 --> 00:02:43.227
And then we want to copy
all of the files from

45
00:02:43.227 --> 00:02:48.033
the current directory into the container,
okay?

46
00:02:48.033 --> 00:02:52.796
And then the next thing that
we want to do is define a port

47
00:02:52.796 --> 00:02:57.784
variable which we're going
to PaaS to the application.

48
00:02:57.784 --> 00:03:02.295
Now, this is pretty important because
when you actually deploy these

49
00:03:02.295 --> 00:03:07.271
containers to production, you're gonna
get a random port assigned to you.

50
00:03:07.271 --> 00:03:09.167
And because you don't know what that is,

51
00:03:09.167 --> 00:03:12.757
you need to read it in as an environment
variable which we haven't been doing.

52
00:03:12.757 --> 00:03:16.478
So we're gonna need some modifier
application a little bit which we'll do in

53
00:03:16.478 --> 00:03:17.229
just a second.

54
00:03:17.229 --> 00:03:21.955
And then lastly, we just need to start the
container actually two more things to do.

55
00:03:21.955 --> 00:03:29.417
One is to start the container, so
we're gonna say deno, run, A, right?

56
00:03:29.417 --> 00:03:33.292
I don't think we need to do unstable and
we want to run the app.ts file.

57
00:03:33.292 --> 00:03:36.120
I'm pretty sure that's all we need.

58
00:03:36.120 --> 00:03:41.557
I PaaS the unstable I don't
think we need that though.

59
00:03:41.557 --> 00:03:47.131
And then lastly we just wanna expose
this port variable from the containers

60
00:03:47.131 --> 00:03:51.834
that we can actually access it
once our code is running inside.

61
00:03:51.834 --> 00:03:54.090
All right, so crash,
course and Docker there.

62
00:03:54.090 --> 00:03:58.659
So when our app here, what we're gonna
do instead of assigning the port is

63
00:03:58.659 --> 00:04:03.524
we're gonna use that deno.env.get to
get the port, but if it's not there,

64
00:04:03.524 --> 00:04:05.828
then we'll just use Port 3000.

65
00:04:05.828 --> 00:04:10.129
But what this allows us to do is to read
this port that's parsed in right here.

66
00:04:10.129 --> 00:04:15.411
So when we set this environment value, it
gets passed to deno, and we can read it.

67
00:04:17.552 --> 00:04:19.101
So let's do this.

68
00:04:19.101 --> 00:04:22.642
And here's from our bundling,

69
00:04:22.642 --> 00:04:28.643
delete the app that ESC,
let's delete sleet app.

70
00:04:28.643 --> 00:04:29.587
All right, so

71
00:04:29.587 --> 00:04:34.089
how do we build this thing now that
we have a docker container for it?

72
00:04:34.089 --> 00:04:38.141
Well from VS code,
we're gonna say build container.

73
00:04:40.800 --> 00:04:42.071
Build image Docker images build image.

74
00:04:42.071 --> 00:04:44.348
So let's do that.

75
00:04:44.348 --> 00:04:46.368
And it wants to know which
Docker file do you want to use.

76
00:04:46.368 --> 00:04:48.585
We're going to pick the one
in the solution folder.

77
00:04:48.585 --> 00:04:50.098
And then what do you want to call it?

78
00:04:50.098 --> 00:04:52.194
We'll just call it do deno exercises.

79
00:04:52.194 --> 00:04:54.280
And then we're just going to go ahead and
let this container build.

80
00:04:54.280 --> 00:04:57.684
And this is going to take a little
bit of time the first time it happens

81
00:04:57.684 --> 00:05:01.328
because it's going to pull down
the image it's got to copy our stuff in,

82
00:05:01.328 --> 00:05:04.053
it's got to pull down all
the dependencies for deno.

83
00:05:04.053 --> 00:05:07.616
It's got to do everything and
create the image.

84
00:05:07.616 --> 00:05:13.672
Now once this is finished running, we can
look in the Docker extension here and

85
00:05:13.672 --> 00:05:17.251
we should see an image
called deno exercises,

86
00:05:17.251 --> 00:05:20.208
which we do updated a few seconds ago.

87
00:05:20.208 --> 00:05:22.371
So how do we run this thing?

88
00:05:22.371 --> 00:05:24.469
Well, we just right click it and

89
00:05:24.469 --> 00:05:29.665
we're just going to run interactively,
And it's running.

90
00:05:29.665 --> 00:05:34.632
You can see it pulling in all of our
dependencies, checking our file.

91
00:05:39.074 --> 00:05:41.826
Now listening,
we get a random port here so let's see.

92
00:05:41.826 --> 00:05:43.779
Let's click on this Open.

93
00:05:45.594 --> 00:05:47.686
Yeah, see how we got
this random port here.

94
00:05:47.686 --> 00:05:52.235
I don't know if you can see that
it was randomly assigned to us but

95
00:05:52.235 --> 00:05:55.279
it still works because port is a variable.

96
00:05:55.279 --> 00:05:59.013
All right, so now we've got this
container we need to actually

97
00:05:59.013 --> 00:06:01.696
get this container into
a hosting provider.

98
00:06:01.696 --> 00:06:06.625
So to do that, we just need to push it so
I'm gonna right click this image and

99
00:06:06.625 --> 00:06:07.343
say push.

100
00:06:07.343 --> 00:06:12.383
And then it wants to know it asked me for
a namespace here and by tagging it

101
00:06:12.383 --> 00:06:17.509
with my name, this is gonna push it
to Docker Hub underneath my account.

102
00:06:17.509 --> 00:06:19.771
And then we're just
tagging it with latest.

103
00:06:19.771 --> 00:06:21.721
So we'll just hit Enter.

104
00:06:21.721 --> 00:06:24.672
It's gonna log into Docker,
it's going to push my container.

105
00:06:26.509 --> 00:06:29.833
And then we should see
under registries and

106
00:06:29.833 --> 00:06:34.601
Docker Hub, We should see deno
exercises and we do it's right there.

107
00:06:34.601 --> 00:06:38.415
And just to check on it,
we can open a browser.

108
00:06:38.415 --> 00:06:42.442
So let's do open,

109
00:06:46.155 --> 00:06:49.488
Here it is updated a few seconds ago.

110
00:06:49.488 --> 00:06:53.413
All right, so we've got our container
with our deno project in the cloud,

111
00:06:53.413 --> 00:06:54.296
how do we run it?

112
00:06:54.296 --> 00:06:57.536
Well, we need some place
where we can run a container.

113
00:06:57.536 --> 00:06:59.906
The next part I'm gonna do in Azure, but

114
00:06:59.906 --> 00:07:04.109
any cloud provider that supports
containers will work just fine here.

115
00:07:04.109 --> 00:07:06.780
These steps are specific to Azure but

116
00:07:06.780 --> 00:07:10.751
you can substitute in any
other service that you like.

117
00:07:10.751 --> 00:07:14.803
So let's do deploying it to a registry,
which we just did.

118
00:07:14.803 --> 00:07:16.418
We just pushed it.

119
00:07:16.418 --> 00:07:19.456
And then we need to create our site.

120
00:07:19.456 --> 00:07:22.160
I need to do it here in
Visual Studio code, I'm sorry.

121
00:07:22.160 --> 00:07:23.670
So let me do this.

122
00:07:33.083 --> 00:07:36.098
All right so this is what we
call the Cloud Shell in Azure.

123
00:07:36.098 --> 00:07:38.448
So it's a bash terminal where
we don't have to log in,

124
00:07:38.448 --> 00:07:40.044
we don't have to install anything.

125
00:07:40.044 --> 00:07:42.817
It's just part of the VS
code extension for

126
00:07:42.817 --> 00:07:46.215
Azure that gives us immediate
access to a terminal.

127
00:07:46.215 --> 00:07:51.912
So we can skip this actual login step here
and we can go directly to this step or

128
00:07:51.912 --> 00:07:57.714
window, create a resource group called
deno exercise group, which we did.

129
00:07:57.714 --> 00:08:00.819
And this is just a group where
we're going to put in our assets,

130
00:08:00.819 --> 00:08:02.706
one of those assets is the container.

131
00:08:02.706 --> 00:08:06.358
And then we need to add
an app service plan.

132
00:08:06.358 --> 00:08:11.284
So I'm going to create that and what that
does is basically us telling Azure what

133
00:08:11.284 --> 00:08:15.558
size of the server we want, and
what we want that server to look like.

134
00:08:15.558 --> 00:08:20.554
So I specified and I don't know how well,
because this is grayed out here but

135
00:08:20.554 --> 00:08:21.970
if we scroll back up.

136
00:08:21.970 --> 00:08:27.969
I selected that it should be Linux, and
I selected that it should be the skew.

137
00:08:27.969 --> 00:08:30.043
Should be f1, which is the free tier.

138
00:08:30.043 --> 00:08:33.020
So if you didn't know,
there's a free tier in Azure,

139
00:08:33.020 --> 00:08:36.150
we're just using the free tier so
we don't get charged.

140
00:08:36.150 --> 00:08:40.393
And then lastly, what we want to
do is actually create the web app.

141
00:08:40.393 --> 00:08:46.812
And I want to PaaS in the name of
that container called deno exercises.

142
00:08:46.812 --> 00:08:47.954
Paste this command in.

143
00:08:47.954 --> 00:08:52.226
I'm just gonna modify one line here,
this one.

144
00:08:52.226 --> 00:08:54.461
Let's grab it from the beginning.

145
00:08:54.461 --> 00:08:55.863
Open our terminal back up.

146
00:08:55.863 --> 00:09:00.312
We'll just get some new lines,
paste it in,

147
00:09:00.312 --> 00:09:04.037
run it, Here we go.

148
00:09:04.037 --> 00:09:07.578
So now it's creating our application
which we called deno-excercise1.

149
00:09:07.578 --> 00:09:11.441
And we have parsed it and
said, hey from Docker Hub.

150
00:09:11.441 --> 00:09:16.709
Pull in this container that we
pushed up to Docker Hub and run it.

151
00:09:16.709 --> 00:09:20.486
So pull it down and run it, which is
exactly what Azure is gonna do here.

152
00:09:20.486 --> 00:09:23.952
And it will take just a minute to do this
because it has to pull the container,

153
00:09:23.952 --> 00:09:26.677
it has to build the container
it has to start the container.

154
00:09:26.677 --> 00:09:30.023
And I have an extension called
the Azure extension for

155
00:09:30.023 --> 00:09:33.154
App Service which shows me
all of my app services.

156
00:09:33.154 --> 00:09:38.423
And if we go here,
there's my container that I've deployed.

157
00:09:38.423 --> 00:09:44.160
So what I want to do is like,
find the URL for these things.

158
00:09:44.160 --> 00:09:46.996
If, [LAUGH] we scroll back
up through all this output,

159
00:09:46.996 --> 00:09:48.896
we can actually find it right here.

160
00:09:48.896 --> 00:09:53.849
Host names, so let's just copy this,

161
00:09:55.636 --> 00:09:57.472
And click here.

162
00:09:57.472 --> 00:10:00.985
Now, the first time that we run this,
it's going to be awful slow,

163
00:10:00.985 --> 00:10:05.566
because Azure actually doesn't do anything
with that container until you request it.

164
00:10:05.566 --> 00:10:09.940
And then once you do make a request,
it pulls the container down does a lot of

165
00:10:09.940 --> 00:10:14.455
downloading, spins up the container,
starts it, makes sure everything is

166
00:10:14.455 --> 00:10:19.122
going but it doesn't actually do that
until you hit that URL for the first time.

167
00:10:19.122 --> 00:10:23.314
So this is going to take just
a minute to fire up here, but

168
00:10:23.314 --> 00:10:28.056
we should see our deno application
running here very shortly.

169
00:10:30.307 --> 00:10:35.273
Any questions on what we did which was
a lot there while we're waiting for

170
00:10:35.273 --> 00:10:36.422
this to spin up?

171
00:10:38.559 --> 00:10:43.980
&gt;&gt; I wanted to ask if it would
be useful to make a volume for

172
00:10:43.980 --> 00:10:48.438
the Docker before the deno
cache if that is,

173
00:10:48.438 --> 00:10:51.946
[INAUDIBLE] process or something?

174
00:10:51.946 --> 00:10:56.728
&gt;&gt; It might, that's a good question,
You can give it a shot.

175
00:10:56.728 --> 00:10:59.222
That would be, that's a good tweak though,
for containers.

176
00:10:59.222 --> 00:11:04.073
Sorry, the question was,
would it be faster to create a volume for

177
00:11:04.073 --> 00:11:05.297
the Deno cache?

178
00:11:05.297 --> 00:11:08.281
And in our case, it's not that big.

179
00:11:08.281 --> 00:11:11.244
So I don't know that necessarily would but

180
00:11:11.244 --> 00:11:16.028
if you had a project of some
significant size, then could be, yeah.

181
00:11:16.028 --> 00:11:21.116
So we're running here and
if we parse in our users route,

182
00:11:21.116 --> 00:11:24.296
yeah, welcome user, there we go.

183
00:11:24.296 --> 00:11:27.434
So we've deployed,
we've successfully deployed and

184
00:11:27.434 --> 00:11:30.314
we are running deno in
production on the Internet.

185
00:11:30.314 --> 00:11:33.335
And you can hit this yourself
if you go to that URL.

186
00:11:33.335 --> 00:11:37.530
We have built and deployed a web
application here with deno today.

