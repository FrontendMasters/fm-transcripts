WEBVTT

1
00:00:00.020 --> 00:00:02.614
So we've taken a look at, and, in fact,

2
00:00:02.614 --> 00:00:07.970
spent quite a bit of time talking about
the philosophical ideas behind Deno.

3
00:00:07.970 --> 00:00:09.810
I didn't cover all of them.

4
00:00:09.810 --> 00:00:13.636
I just covered the ones that I felt were
most applicable to why Deno is the way

5
00:00:13.636 --> 00:00:14.260
that it is.

6
00:00:15.310 --> 00:00:18.750
And try to lay some ground work for
how Ryan sees things.

7
00:00:18.750 --> 00:00:23.580
I highly encourage you to watch that video
because I don't wanna speak for Ryan.

8
00:00:23.580 --> 00:00:26.712
I tried to summarize his ideas and
show you how it plays out, but

9
00:00:26.712 --> 00:00:29.410
really you should listen
to it in his own words.

10
00:00:29.410 --> 00:00:29.910
Okay.

11
00:00:31.630 --> 00:00:38.520
So, installing Deno it's one commands,
cURL or PowerShell, your choice.

12
00:00:38.520 --> 00:00:41.690
We're not gonna regurgitate
the docs here today.

13
00:00:41.690 --> 00:00:43.540
I'll let you do that on your own.

14
00:00:43.540 --> 00:00:47.110
It's not a very hefty install,
it should be relatively quick.

15
00:00:47.110 --> 00:00:50.358
But once you have Deno installed,

16
00:00:50.358 --> 00:00:55.670
then we can start by taking
a look at the rappel.

17
00:00:55.670 --> 00:00:56.620
So let's do that.

18
00:00:58.110 --> 00:01:04.260
Rappel stands for run, what does
it run execute, run in print loop.

19
00:01:04.260 --> 00:01:06.496
Yeah.
Yeah, I always have to look that up.

20
00:01:06.496 --> 00:01:07.760
So let's do that.

21
00:01:07.760 --> 00:01:12.213
So let's just hit Deno and then that's
gonna put us into the rappel and

22
00:01:12.213 --> 00:01:14.490
you can see where Deno 1.6.1.

23
00:01:14.490 --> 00:01:16.190
And actually it just came out.

24
00:01:16.190 --> 00:01:19.121
In fact,
I showed up yesterday to tech check.

25
00:01:19.121 --> 00:01:21.964
And [LAUGH] I saw that
the version of Deno had changed.

26
00:01:21.964 --> 00:01:25.720
So it's changing rapidly, but
it is considered stable in so

27
00:01:25.720 --> 00:01:29.760
much is like the main API
isn't going to change on you.

28
00:01:29.760 --> 00:01:30.260
Which is good.

29
00:01:31.690 --> 00:01:36.290
Okay, so inside of the rappel we can
do something simple like console log.

30
00:01:36.290 --> 00:01:37.047
Hello World.

31
00:01:39.006 --> 00:01:39.650
There you go.

32
00:01:39.650 --> 00:01:43.860
And you'll notice that like, we get
syntax highlighting, which is kinda cool.

33
00:01:43.860 --> 00:01:47.120
I think Deno's doing that,
because no doesn't do that.

34
00:01:47.120 --> 00:01:48.200
Anyway, that works.

35
00:01:48.200 --> 00:01:50.284
And then it returns undefined,

36
00:01:50.284 --> 00:01:54.800
because everything in
JavaScript has returned value.

37
00:01:54.800 --> 00:01:57.300
Even if you don't specify one,
it just returns undefined.

38
00:01:57.300 --> 00:02:02.021
So that's just how JavaScript works.

39
00:02:02.021 --> 00:02:06.533
You can do multi line things
inside the Deno rappel right?

40
00:02:06.533 --> 00:02:10.020
So we could do function hello,
take a name.

41
00:02:10.020 --> 00:02:14.343
And then when you open this brace like it
just knows not to execute it knows that

42
00:02:14.343 --> 00:02:16.800
you're gonna do a multi line here.

43
00:02:16.800 --> 00:02:19.753
And then we can continue and
just log out name.

44
00:02:19.753 --> 00:02:23.551
And then when we close the brace,
it will exit.

45
00:02:23.551 --> 00:02:26.477
And then we can call this function, right?

46
00:02:26.477 --> 00:02:32.150
And pass in, let's pass in World, right?

47
00:02:32.150 --> 00:02:34.420
And then, it just says world.

48
00:02:34.420 --> 00:02:36.990
It's just echoing back
whatever we pass in.

49
00:02:36.990 --> 00:02:40.260
So that's the Deno repple.

50
00:02:40.260 --> 00:02:45.810
The node repple by the way,
Ctrl D to exit does the same thing.

51
00:02:46.890 --> 00:02:51.381
One of the big differences in the node
repple is that the node repple has this

52
00:02:51.381 --> 00:02:55.029
thing called editor where you
can just type dash dot editor.

53
00:02:55.029 --> 00:02:59.542
And then you're in this multi
line editor mode where it's

54
00:02:59.542 --> 00:03:03.882
the same kinda thing or
it's like function Hello name.

55
00:03:03.882 --> 00:03:08.446
But you see you're not getting the syntax
highlighting which is strange.

56
00:03:08.446 --> 00:03:09.955
I guess Deno's doing that.

57
00:03:09.955 --> 00:03:16.704
But it's not gonna until we actually,
it says Ctrl Ctrl + D to exit,

58
00:03:16.704 --> 00:03:22.356
yeah, and then undefined and
then we can actually call this function.

59
00:03:22.356 --> 00:03:26.860
But Deno doesn't have this
idea of this editor mode.

60
00:03:26.860 --> 00:03:30.990
But it doesn't matter because honestly, we
don't spend a lot of time in the repple.

61
00:03:30.990 --> 00:03:35.440
I don't know that any of you have I
don't I have been coding for 15 years.

62
00:03:36.500 --> 00:03:39.720
I don't hang out in reppels just know
that that's the repple is there,

63
00:03:39.720 --> 00:03:41.660
that's how it works.

64
00:03:41.660 --> 00:03:46.780
So by the way, any guesses on
which language Deno is written in?

65
00:03:46.780 --> 00:03:51.410
Both Deno and node use v8 for
executing the JavaScript.

66
00:03:51.410 --> 00:03:53.220
That's where the JavaScript
is actually executed.

67
00:03:53.220 --> 00:03:55.950
That's the Google's JavaScript engine.

68
00:03:55.950 --> 00:03:59.771
But when they need to reach out to
the operating system to do things

69
00:03:59.771 --> 00:04:03.290
like read files,
then that needs to be native code.

70
00:04:03.290 --> 00:04:07.407
And Deno, it actually says on
the website what is written in but

71
00:04:07.407 --> 00:04:11.190
it's more fun to go
spelunking into their repo.

72
00:04:11.190 --> 00:04:16.306
So let's do that and go into the core
on Denos repo and look at these files

73
00:04:16.306 --> 00:04:22.020
here and you can see they have .rs
extension and these are rust files.

74
00:04:22.020 --> 00:04:27.723
Rust is a language that
was created by Mozilla.

75
00:04:27.723 --> 00:04:34.247
And it was created to be for
highly safe concurrent systems.

76
00:04:34.247 --> 00:04:39.653
And what they mean by that it's like C++,
except for the fact that it doesn't

77
00:04:39.653 --> 00:04:44.993
allow for things like no pointers and
no pointer exceptions which are common.

78
00:04:44.993 --> 00:04:50.080
And, so another interesting aspect
of rust is, it was also written in

79
00:04:50.080 --> 00:04:55.880
part with contributions from Brendan Eich,
who also wrote JavaScript.

80
00:04:55.880 --> 00:05:00.426
So the very tight circle here that
we're revolving in where Brendan Eich

81
00:05:00.426 --> 00:05:03.109
created JavaScript also worked on rust and

82
00:05:03.109 --> 00:05:06.550
Deno sort of bringing these
two things back together.

83
00:05:06.550 --> 00:05:12.043
Node, by contrast, has native bindings
that are in a combination of C and c++.

84
00:05:14.180 --> 00:05:20.094
So you might remember that earlier
we talked about Ryan being very,

85
00:05:20.094 --> 00:05:25.086
very interested in IO performance
when he created node.

86
00:05:25.086 --> 00:05:27.210
As he says he was obsessed with it.

87
00:05:27.210 --> 00:05:31.640
And so this idea of highly
performant HTTP systems.

88
00:05:31.640 --> 00:05:37.390
And so the question then becomes, what
is the difference between Deno and node?

89
00:05:37.390 --> 00:05:40.043
And so this is from their own
benchmarks here, and in fact,

90
00:05:40.043 --> 00:05:43.550
we might wanna take a look at it
just in case it's been updated.

91
00:05:43.550 --> 00:05:46.711
And you can see all the relative
disclaimers about bench,

92
00:05:46.711 --> 00:05:48.140
it has been updated okay.

93
00:05:49.392 --> 00:05:50.930
This is execution time.

94
00:05:50.930 --> 00:05:58.620
Let's get down to what I really wanna
look at is HTTP Server Throughput.

95
00:06:00.000 --> 00:06:04.285
And so you can see here it's kind of
hard to tell because a lot of the colors

96
00:06:04.285 --> 00:06:08.009
are the same but that blue line
at the bottom, the very bottom,

97
00:06:08.009 --> 00:06:10.880
that's Deno's HTTP performance.

98
00:06:10.880 --> 00:06:14.020
And that green line that's just
sort of like hovering above it.

99
00:06:14.020 --> 00:06:16.400
That's nodes HTTP performance.

100
00:06:16.400 --> 00:06:21.321
And so you can see that node
is more performance than Deno

101
00:06:21.321 --> 00:06:25.400
is currently in terms of HTTP requests.

102
00:06:25.400 --> 00:06:28.563
And that's something that
people will tend to point out

103
00:06:28.563 --> 00:06:31.580
about Deno's that it's not as performant.

104
00:06:31.580 --> 00:06:35.710
But it looks to me,
just as a casual observer and

105
00:06:35.710 --> 00:06:40.873
not an expert in performance metrics or
HTTP systems that,

106
00:06:40.873 --> 00:06:44.610
that difference is kind of small, right?

107
00:06:44.610 --> 00:06:47.960
It doesn't appear to be extremely
large here between the blue dot and

108
00:06:47.960 --> 00:06:49.670
the green dot.

109
00:06:49.670 --> 00:06:55.310
Also, those of us that are writing
programmes, we are probably not building

110
00:06:55.310 --> 00:07:00.691
systems that are that concerned about
performance to where we would say,

111
00:07:00.691 --> 00:07:06.150
well, I can't use Deno because it's
simply isn't performant enough.

112
00:07:06.150 --> 00:07:10.740
But it is important to note that as
of the time of this writing node

113
00:07:10.740 --> 00:07:14.500
still faster in terms of
being an HTTP server.

114
00:07:14.500 --> 00:07:17.970
Also, I wanna know what Hyper is.

115
00:07:17.970 --> 00:07:18.980
I didn't even know what this is.

116
00:07:18.980 --> 00:07:21.810
I tried to look this up, but
whatever this is, let's do that.

117
00:07:21.810 --> 00:07:22.870
Look at this line.

118
00:07:22.870 --> 00:07:23.990
Looks amazing.

119
00:07:23.990 --> 00:07:24.590
She sees that.

