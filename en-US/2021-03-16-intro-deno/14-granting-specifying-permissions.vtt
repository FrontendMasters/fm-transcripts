WEBVTT

1
00:00:00.100 --> 00:00:05.050
So one of the core tenants of
Deno is secure by default.

2
00:00:05.050 --> 00:00:08.535
And we've already discussed in
the section of the same name

3
00:00:08.535 --> 00:00:12.400
that this means that by default,
Deno can't do very much.

4
00:00:12.400 --> 00:00:14.080
It can't read your file system.

5
00:00:14.080 --> 00:00:17.850
It can't make HTTP calls,
it's completely sandboxed by default.

6
00:00:19.360 --> 00:00:22.110
Okay, so and we've already done this,
but let's do this again.

7
00:00:22.110 --> 00:00:27.440
Let's try and
just read from the terminal here.

8
00:00:27.440 --> 00:00:28.210
So let's do this.

9
00:00:28.210 --> 00:00:30.100
I'm just going to paste this in.

10
00:00:30.100 --> 00:00:34.827
And let's just we're just going to try
to read everything and as we know,

11
00:00:34.827 --> 00:00:38.230
let's collapse this clear this out.

12
00:00:38.230 --> 00:00:41.772
So Deno run, and
as we know this is gonna fail and

13
00:00:41.772 --> 00:00:45.060
we have to pass an allow
read flag like this.

14
00:00:46.910 --> 00:00:50.878
And then we can actually read it and these
are all the files in my current directory.

15
00:00:50.878 --> 00:00:55.991
And so the flags that we passed,
by default

16
00:00:55.991 --> 00:01:01.620
give Deno more access
than it actually needs.

17
00:01:01.620 --> 00:01:03.465
And I think somebody ask
this question earlier,

18
00:01:03.465 --> 00:01:05.540
get multiple folders on your machine.

19
00:01:05.540 --> 00:01:10.510
But one of the things that
you can do here is like

20
00:01:10.510 --> 00:01:14.849
you can pass a descriptor to, the flag.

21
00:01:14.849 --> 00:01:18.138
So I could say, okay, you can read
everything in the current directory so

22
00:01:18.138 --> 00:01:21.707
I'm gonna run this again, and it's gonna
tell me that permission was denied.

23
00:01:21.707 --> 00:01:25.635
Because I'm actually trying to read
the parent directory not the current

24
00:01:25.635 --> 00:01:26.341
directory.

25
00:01:26.341 --> 00:01:29.803
So if I specify the current directory,
like this,

26
00:01:29.803 --> 00:01:34.791
then the program will actually run but
I was to try to read like I don't know

27
00:01:34.791 --> 00:01:39.630
the root directory, like this,
that does run, nice.

28
00:01:39.630 --> 00:01:40.900
So, why?

29
00:01:40.900 --> 00:01:45.828
Because the directory that the code
is trying to read what we need to

30
00:01:45.828 --> 00:01:49.709
do is change this, so
if the code tries to read this.

31
00:01:49.709 --> 00:01:53.804
That should work, and we pass in allow
read, is just the current directory,

32
00:01:53.804 --> 00:01:55.820
this should fail and it does, right?

33
00:01:55.820 --> 00:01:58.659
So you can pass in specificity
to your permissions, so

34
00:01:58.659 --> 00:02:02.673
that you're not giving it too much access,
because once you say allow read,

35
00:02:02.673 --> 00:02:06.140
you're just giving it access
to your entire system.

36
00:02:06.140 --> 00:02:10.964
So, it's good to specify
the level of access there on

37
00:02:10.964 --> 00:02:14.729
what folders Deno can and can't access.

38
00:02:14.729 --> 00:02:17.954
And this is more akin to the way
that your phone asks you anyway for

39
00:02:17.954 --> 00:02:19.047
access to do things.

40
00:02:19.047 --> 00:02:21.947
If you're writing code for Deno,

41
00:02:21.947 --> 00:02:27.447
especially if you become a package
author then we might want to get

42
00:02:27.447 --> 00:02:32.760
into territory where Deno really
does behave like your phone.

43
00:02:32.760 --> 00:02:36.335
And it really does ask you about your
contacts and your photos, and whether or

44
00:02:36.335 --> 00:02:39.090
not it can have permission,
and there's an API to do that.

45
00:02:40.410 --> 00:02:43.180
So let's take a look here.

46
00:02:43.180 --> 00:02:44.350
Here.

47
00:02:44.350 --> 00:02:47.760
Let's get rid of our terminal
to make this a little bit nicer.

48
00:02:47.760 --> 00:02:51.092
Let's get rid of that type script
error which I'd I don't like,

49
00:02:51.092 --> 00:02:53.830
there's a better way to
deal with isolated modules.

50
00:02:53.830 --> 00:02:54.910
I don't know what it is.

51
00:02:54.910 --> 00:02:56.710
Someone will email me and
tell me, I'm sure.

52
00:02:58.380 --> 00:03:00.419
So what we wanna do here is,

53
00:03:00.419 --> 00:03:05.050
we wanna request permission to
do this when the program runs.

54
00:03:05.050 --> 00:03:10.059
And so instead of having the user
pass us their permission,

55
00:03:10.059 --> 00:03:14.630
we want to ask for it and
see if they'll give it to us.

56
00:03:14.630 --> 00:03:15.610
So how do we do that?

57
00:03:15.610 --> 00:03:17.970
Well, we need to create
a permission descriptor to do that.

58
00:03:17.970 --> 00:03:21.393
And then it's just an object and
then we just need to pass the name, and

59
00:03:21.393 --> 00:03:22.360
we wanna read.

60
00:03:22.360 --> 00:03:24.332
Yeah, we wanna read the file system.

61
00:03:24.332 --> 00:03:24.844
Done.
And

62
00:03:24.844 --> 00:03:29.677
then, because of the weirdness of
TypeScript that gets injected,

63
00:03:29.677 --> 00:03:36.310
we actually have to cast it as a constant,
although I'm not terribly sure why.

64
00:03:36.310 --> 00:03:42.595
And then what we wanna do is
let's just do status and then.

65
00:03:42.595 --> 00:03:46.641
Deno.permissions, and
you'll notice that's not there,

66
00:03:46.641 --> 00:03:50.451
because it is a experimental,
it's an unstable API, and

67
00:03:50.451 --> 00:03:55.910
then request the permission, and
we're gonna pass in the descriptor.

68
00:03:55.910 --> 00:04:00.524
Okay, now, what this is gonna
return us is an object, so

69
00:04:00.524 --> 00:04:04.090
status is gonna have an object on it.

70
00:04:04.090 --> 00:04:08.421
And it's going to look like this state and

71
00:04:08.421 --> 00:04:15.710
the state is either gonna be granted or
it's going to be denied.

72
00:04:15.710 --> 00:04:17.906
Okay, by the time we actually get this, or

73
00:04:17.906 --> 00:04:21.770
if we haven't even asked it'll
be completely undefined.

74
00:04:21.770 --> 00:04:25.538
So what we can do here is just
wrap this in an if statement,

75
00:04:25.538 --> 00:04:30.490
see if status dot state equals triple
equals, because it's JavaScript.

76
00:04:32.310 --> 00:04:38.459
If it is equal to granted,
then we'll do all of this stuff here.

77
00:04:40.174 --> 00:04:44.052
But if it isn't,
then we can provide the user

78
00:04:44.052 --> 00:04:48.550
with a more friendly error, console.log.

79
00:04:48.550 --> 00:04:53.843
This program needs permission
to read the current

80
00:04:53.843 --> 00:04:58.590
directory, current directory only.

81
00:04:58.590 --> 00:05:00.555
Something like that, I don't know.

82
00:05:00.555 --> 00:05:01.600
Let's turn on wrap.

83
00:05:02.940 --> 00:05:06.031
Wrap toggle word wrap, okay.

84
00:05:06.031 --> 00:05:08.570
And then let's do this.

85
00:05:10.410 --> 00:05:12.110
Alright now, let's run this.

86
00:05:12.110 --> 00:05:14.570
Let's run this and find out what happens.

87
00:05:14.570 --> 00:05:17.367
So when you deno run app.ts,
it' gonna check and

88
00:05:17.367 --> 00:05:22.097
it's gonna say permission's doesn't exist,
because we need the unstable flag,

89
00:05:22.097 --> 00:05:24.600
which we should be used to by now.

90
00:05:24.600 --> 00:05:26.020
Wanna stay unstable.

91
00:05:26.020 --> 00:05:30.250
And now Deno is going to ask us, sorry.

92
00:05:31.750 --> 00:05:34.150
When we do this request,
this actually returns a promise.

93
00:05:34.150 --> 00:05:36.160
So we need to await it.

94
00:05:36.160 --> 00:05:38.608
We don't know that,
because we can't see it on the object,

95
00:05:38.608 --> 00:05:40.870
because it is an unstable
API that we're working with.

96
00:05:40.870 --> 00:05:42.480
So let's try that again.

97
00:05:42.480 --> 00:05:45.270
And now you can see it wants to know.

98
00:05:45.270 --> 00:05:47.438
Okay, Deno requests read access.

99
00:05:47.438 --> 00:05:49.940
Do we want to grant it or not?

100
00:05:49.940 --> 00:05:53.190
Now notice, though, that it doesn't
tell us read access to what?

101
00:05:53.190 --> 00:05:54.600
What do you want to read?

102
00:05:54.600 --> 00:05:59.022
So let's just say yeah, well granted
access, and then it'll give us that if we

103
00:05:59.022 --> 00:06:02.390
ask it again and we say deny,
then we get the other right.

104
00:06:02.390 --> 00:06:07.891
So it's just a nicer Interface for
actually getting permissions if you

105
00:06:07.891 --> 00:06:13.221
are an author of a Deno module and
you want people to have that option.

106
00:06:13.221 --> 00:06:17.332
There is another thing that we can do
we're here where we can actually test to

107
00:06:17.332 --> 00:06:21.765
see whether, or not permission has already
been granted, but before we do that,

108
00:06:21.765 --> 00:06:23.980
let's talk about specificity.

109
00:06:23.980 --> 00:06:27.754
So when we passed in read we didn't
pass in anything else and so

110
00:06:27.754 --> 00:06:30.876
when we give it read access
we're basically giving

111
00:06:30.876 --> 00:06:34.940
it read access to our whole
system which we don't want to do.

112
00:06:34.940 --> 00:06:38.705
And so what we can do instead is say
we only want to access to the parent

113
00:06:38.705 --> 00:06:39.440
directory.

114
00:06:39.440 --> 00:06:39.994
You're here.

115
00:06:39.994 --> 00:06:43.876
And so as part of the descriptor,
if we pass that back in and

116
00:06:43.876 --> 00:06:49.390
then run it again, this time,
it didn't request, read access to.

117
00:06:49.390 --> 00:06:50.080
Right?

118
00:06:50.080 --> 00:06:52.630
And so
now we know it's only accessing this.

119
00:06:52.630 --> 00:06:53.670
Yeah.
I'm okay with that.

120
00:06:53.670 --> 00:06:56.670
I'll go ahead and grant that, that's good.

121
00:06:56.670 --> 00:06:57.280
That's secure.

122
00:06:58.340 --> 00:07:03.132
And so the same is true if we're doing
HTTP requests, where we can say not only

123
00:07:03.132 --> 00:07:08.170
do we want to do a request, but
this is the URL we plan on accessing.

124
00:07:08.170 --> 00:07:11.867
And so it's just a really good way to
inform the user about exactly what

125
00:07:11.867 --> 00:07:14.000
your program is going to do.

126
00:07:14.000 --> 00:07:16.616
And so they're not too concerned
that you're you're getting too

127
00:07:16.616 --> 00:07:17.420
many permissions.

