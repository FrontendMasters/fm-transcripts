WEBVTT

1
00:00:00.000 --> 00:00:01.780
Talk about executing remote scripts.

2
00:00:01.780 --> 00:00:05.800
So this is something that you'll see
in deno a lot, and it's really weird.

3
00:00:05.800 --> 00:00:09.676
And it's one of the things that really
put me off about it because it's

4
00:00:09.676 --> 00:00:12.950
sort of the way that they
want you to run scripts.

5
00:00:12.950 --> 00:00:17.750
So this literally means that you can just
call a script and execute it with a URL.

6
00:00:17.750 --> 00:00:20.349
And this is why if you
go to the deno docs,

7
00:00:20.349 --> 00:00:24.554
they don't actually have you write
hello world like we just did,

8
00:00:24.554 --> 00:00:27.773
they actually have you call
it from a remote file.

9
00:00:27.773 --> 00:00:31.768
Which just is, that's such
a bizarre thing to me to do and

10
00:00:31.768 --> 00:00:34.190
I had a really hard time with it.

11
00:00:34.190 --> 00:00:36.800
But let's do it so that we can see.

12
00:00:36.800 --> 00:00:41.140
So there is a script that we can run here.

13
00:00:41.140 --> 00:00:44.480
I'm just gonna paste this into
the browser so we can look at it first.

14
00:00:44.480 --> 00:00:49.810
So if we go here, in our browser,
we actually see the code.

15
00:00:51.810 --> 00:00:57.350
But if we were to curl this,
I think we can just curl it like this.

16
00:00:57.350 --> 00:01:00.040
What we actually get back is
the code not the web page.

17
00:01:00.040 --> 00:01:03.945
And what they're doing there is they're
looking at the browser accepts header to

18
00:01:03.945 --> 00:01:08.030
know whether or not to give you a web
page, or whether or not to give you code.

19
00:01:08.030 --> 00:01:13.875
But what this means is that you can
execute this file directly from deno and

20
00:01:13.875 --> 00:01:15.580
so you can just do it.

21
00:01:16.890 --> 00:01:18.840
And let's clear this out a little bit.

22
00:01:18.840 --> 00:01:23.145
You can do deno run,
and then like this and

23
00:01:23.145 --> 00:01:28.557
again it checks it and
then it says welcome to deno and

24
00:01:28.557 --> 00:01:32.618
you get the cute dinosaur or denosore.

25
00:01:32.618 --> 00:01:37.495
But let's talk about where deno puts these
remote dependencies cuz they're kind of

26
00:01:37.495 --> 00:01:39.160
in a different spot.

27
00:01:39.160 --> 00:01:42.070
So again, let's go to the denocache.

28
00:01:42.070 --> 00:01:46.380
And let me just double check to make sure
that I'm, we're headed to the right place.

29
00:01:46.380 --> 00:01:51.970
And what we want to do now, is look at our
deps folder because this is a dependency.

30
00:01:51.970 --> 00:01:55.650
So if we go to deps now, and we look
inside of that, we see an https and

31
00:01:55.650 --> 00:01:59.525
inside of that, there's a couple of
different ones because I've been

32
00:01:59.525 --> 00:02:02.708
working on some other stuff but
this deno.land, right?

33
00:02:02.708 --> 00:02:09.260
It's pulling off the domain and
using that as the name of the folder.

34
00:02:09.260 --> 00:02:11.940
So let's move into deno.land.

35
00:02:11.940 --> 00:02:14.610
And inside of that,
where there's a lot of folder files.

36
00:02:14.610 --> 00:02:15.365
Let's take a look at them.

37
00:02:19.579 --> 00:02:23.730
So these are all of the different
files that have been pulled down.

38
00:02:23.730 --> 00:02:27.834
And if we look at them, then eventually
if we look at enough of them,

39
00:02:27.834 --> 00:02:31.362
we'll find the one,
cuz I've been doing a lot with deno,

40
00:02:31.362 --> 00:02:34.280
we'll find that actual hello world file.

41
00:02:34.280 --> 00:02:38.037
But it downloads it here and
then it creates that familiar hash,

42
00:02:38.037 --> 00:02:42.084
in all of this different metadata so
that it can track dependencies.

43
00:02:42.084 --> 00:02:45.238
When we get to dependencies
later on in this course,

44
00:02:45.238 --> 00:02:50.220
this is where deno is going to put them
is inside of this folder called deps.

45
00:02:50.220 --> 00:02:54.804
So you don't have a node modules folder in
deno, you have a deps folder that's inside

46
00:02:54.804 --> 00:02:58.640
a cache, which is something that
you're not really aware of, right?

47
00:02:58.640 --> 00:03:00.360
So the dependencies are still there.

48
00:03:02.330 --> 00:03:03.830
I don't think it's fair to say,

49
00:03:03.830 --> 00:03:06.947
is it fair to say that you have no
node modules folder in your project?

50
00:03:06.947 --> 00:03:10.220
It's just they're moved somewhere else
on your system to a central place.

51
00:03:13.060 --> 00:03:17.858
Yeah, I think that's what we wanted to
say about bad executing remote files.

52
00:03:19.886 --> 00:03:20.541
Okay.

53
00:03:22.256 --> 00:03:25.660
Let's talk about the Deno object
because that's another something

54
00:03:25.660 --> 00:03:30.290
that's a little bit strange for deno,
and I didn't understand this at first.

55
00:03:30.290 --> 00:03:34.870
In a browser,
you have a top level object in a browser.

56
00:03:34.870 --> 00:03:37.550
It's called the window object.

57
00:03:37.550 --> 00:03:40.110
And the window object is just there.

58
00:03:40.110 --> 00:03:41.850
You don't have to do anything to get it.

59
00:03:41.850 --> 00:03:44.430
It's just exists.

60
00:03:44.430 --> 00:03:46.930
Deno has the same thing.

61
00:03:46.930 --> 00:03:48.730
But it's called the deno object.

62
00:03:48.730 --> 00:03:53.331
And much of the functionality that you
might expect to find in particular node

63
00:03:53.331 --> 00:03:55.189
modules is in the deno object.

64
00:03:56.250 --> 00:03:59.820
So in VS code, let's come back here.

65
00:03:59.820 --> 00:04:01.690
Let's go to our app.ts file.

66
00:04:03.380 --> 00:04:05.860
And let's just look at that object.

67
00:04:05.860 --> 00:04:12.555
So if we look at it, and look at all
the different methods that are available,

68
00:04:12.555 --> 00:04:17.613
there are things like MakeTempDir and
MakeTempDirsync.

69
00:04:17.613 --> 00:04:21.042
If you've done node,
this stuff looks familiar, or

70
00:04:21.042 --> 00:04:25.320
this this reading directories
is here on this object.

71
00:04:25.320 --> 00:04:29.780
Reading files, writing files is down here.

72
00:04:29.780 --> 00:04:32.560
The standard out writing,
to standard out is here.

73
00:04:32.560 --> 00:04:38.690
So a lot of IO operations are found
directly on this deno object.

74
00:04:40.550 --> 00:04:45.050
In addition, you can get things
like the args that were passed in.

75
00:04:45.050 --> 00:04:49.823
And so what's confusing for me about
this is that deno also has a standard

76
00:04:49.823 --> 00:04:53.109
library and I wasn't,
I'm never sure whether or

77
00:04:53.109 --> 00:04:57.900
not the thing that I need is on the deno
object or in the standard library.

78
00:04:59.080 --> 00:05:03.913
And so my general guidance on this is
that before you go look at deno standard

79
00:05:03.913 --> 00:05:09.730
library, which we haven't looked at yet,
it's sort of something we have to install.

80
00:05:09.730 --> 00:05:11.472
It's a dependency, we have to use.

81
00:05:11.472 --> 00:05:15.403
Look on the deno object, because it's
probably there, especially if it's

82
00:05:15.403 --> 00:05:19.104
something simple like reading and
writing files, you can find it here.

83
00:05:19.104 --> 00:05:20.576
Working with environment variables,

84
00:05:20.576 --> 00:05:22.590
finding the current directory
most of that's here.

85
00:05:24.970 --> 00:05:28.909
Let's talk about, for a minute about how
deno replaces some concepts in node that

86
00:05:28.909 --> 00:05:31.100
you might already know.

87
00:05:31.100 --> 00:05:34.870
Deno has replaces some concepts.

88
00:05:34.870 --> 00:05:38.520
So for
instance node has this process object.

89
00:05:38.520 --> 00:05:41.300
There is no process object in deno.

90
00:05:41.300 --> 00:05:45.445
Instead you would use the deno object and
the replacements there in.

91
00:05:45.445 --> 00:05:50.261
And so, for instance in node,
we can pass args on

92
00:05:50.261 --> 00:05:55.443
the command line and
read them with the argv object.

93
00:05:55.443 --> 00:06:01.850
And so it's do, let's take a look at
what that looks like in a node app.

94
00:06:01.850 --> 00:06:03.488
So in this app.js file,

95
00:06:03.488 --> 00:06:09.120
what I'm gonna do here is I'm just
gonna log out console dot log process.

96
00:06:09.120 --> 00:06:17.020
Process.argsv, I think it's argv.

97
00:06:17.020 --> 00:06:20.951
So you can see what node
actually does here, and

98
00:06:20.951 --> 00:06:26.664
then let's run this with the collapse
this, collapse the sidebar.

99
00:06:29.932 --> 00:06:33.250
So let's do node app.js.

100
00:06:33.250 --> 00:06:37.351
And you can see that it's actually
logging out all of the arguments here,

101
00:06:37.351 --> 00:06:40.210
including the path to node,
the path to this file.

102
00:06:40.210 --> 00:06:44.220
And if we were to pass in other arguments
like 1, 2, 3, then we'd get those as well.

103
00:06:45.300 --> 00:06:51.200
Deno does something similar,
it has an args object here.

104
00:06:51.200 --> 00:06:57.244
So let's do this in the app.ts file,
so we can see how this works.

105
00:06:57.244 --> 00:07:04.189
So let's just console.log,

106
00:07:04.189 --> 00:07:08.210
our deno.args.

107
00:07:08.210 --> 00:07:09.629
And then let's pass them args.

108
00:07:11.050 --> 00:07:16.463
So deno run app.ts 1 2 3, okay?

109
00:07:16.463 --> 00:07:21.435
And we get the same kind of thing only
we're not getting the full path to

110
00:07:21.435 --> 00:07:23.780
node and the file as well.

111
00:07:23.780 --> 00:07:28.548
But this is the replacement for the args,
if you're used to using that in node.

112
00:07:28.548 --> 00:07:32.555
Another thing you may be used to
using is the env object in node,

113
00:07:32.555 --> 00:07:37.310
where we can pass in environment
variables to node and then read them in.

114
00:07:37.310 --> 00:07:40.602
We use this a lot for determining
whether or not we're in development, or

115
00:07:40.602 --> 00:07:43.430
production, or passing and
things like connection strings.

116
00:07:44.690 --> 00:07:47.120
Deno doesn't have again
the process objects.

117
00:07:47.120 --> 00:07:51.810
So how do we actually pass
in environment variables?

118
00:07:51.810 --> 00:07:56.001
Well in deno, what we have instead is,

119
00:07:56.001 --> 00:08:01.344
let's call it take this out,
we have Deno.env.

120
00:08:01.344 --> 00:08:06.430
And then you actually have to ask for
the variable that you want.

121
00:08:06.430 --> 00:08:09.150
The way that this looks in
node is quite different.

122
00:08:09.150 --> 00:08:13.106
So let's just say we're looking for
a variable called DEVELOPMENT,

123
00:08:13.106 --> 00:08:15.090
which we're not passing in.

124
00:08:15.090 --> 00:08:21.520
Normally, in node what you'd do is
you'd look for process.env.DEVELOPMENT.

125
00:08:21.520 --> 00:08:25.450
It comes as an actual part of the object.

126
00:08:25.450 --> 00:08:26.290
In Deno it does not.

127
00:08:26.290 --> 00:08:29.040
You actually have to get
it like it's a string.

128
00:08:29.040 --> 00:08:30.630
So let's run this.

129
00:08:32.360 --> 00:08:33.390
Let me clear out the terminal.

130
00:08:33.390 --> 00:08:38.520
So let's do deno run app.ts and
then we're not passing anything in.

131
00:08:38.520 --> 00:08:40.844
So a couple of different
things have happened here.

132
00:08:40.844 --> 00:08:42.837
[LAUGH] So
first of all we through an air and

133
00:08:42.837 --> 00:08:45.950
it tells us that the permission
has been denied.

134
00:08:45.950 --> 00:08:48.000
So this is we're going to
talk more about permissions.

135
00:08:48.000 --> 00:08:52.173
But this is really your first introduction
to secure by default, which is that deno's

136
00:08:52.173 --> 00:08:55.960
not gonna let you do much of anything
without you giving it permission to do so.

137
00:08:55.960 --> 00:08:57.870
So let's try this again.

138
00:08:57.870 --> 00:09:00.410
So let's do deno run app.ts.

139
00:09:00.410 --> 00:09:03.937
But before we specify,
we have to say allow env,

140
00:09:03.937 --> 00:09:07.475
which allows it to read
environment variables.

141
00:09:07.475 --> 00:09:12.478
And then we get undefined, if we were to
pass in like this development equals true,

142
00:09:12.478 --> 00:09:15.290
then it should return true and it does.

143
00:09:15.290 --> 00:09:20.433
So that's just your replacement for
the process.env in node and

144
00:09:20.433 --> 00:09:23.810
what that looks like
when you do it in deno.

145
00:09:25.000 --> 00:09:29.696
Another one that you may be familiar
with a node that you might use a lot is

146
00:09:29.696 --> 00:09:31.270
the dirname constant.

147
00:09:31.270 --> 00:09:35.661
by In node, the dirname constant tells you
the full path of the current directory.

148
00:09:35.661 --> 00:09:40.150
In deno this constant
doesn't exist it's not there.

149
00:09:40.150 --> 00:09:44.540
And so if you're gonna have to use
this current working directory method,

150
00:09:44.540 --> 00:09:47.280
which gives you the same value.

151
00:09:47.280 --> 00:09:49.260
So let's take a look at that.

152
00:09:49.260 --> 00:09:52.480
Let's just come here and
on the deno object,

153
00:09:52.480 --> 00:09:57.161
we'll do deno.currentworkingdirectory
which is a function.

154
00:09:57.161 --> 00:10:02.602
And then let's try and
run this again, deno run app.ts,

155
00:10:02.602 --> 00:10:06.277
and look at that, permission denied.

156
00:10:06.277 --> 00:10:09.553
Like I said, you're not allowed
to do much of anything in deno,

157
00:10:09.553 --> 00:10:11.300
without giving it permission.

158
00:10:11.300 --> 00:10:16.416
So lets try that again, and it tells you
it says run again with allow-read flag,

159
00:10:16.416 --> 00:10:20.504
so we'll just say allow-read,
deno run, we'll see, oops.

160
00:10:20.504 --> 00:10:27.450
Allow-read app.ts and
then it gives us the full path, right?

161
00:10:27.450 --> 00:10:31.410
And if you remember when we were
looking at my gen files from deno,

162
00:10:31.410 --> 00:10:34.340
it put it in this folder structure here.

163
00:10:34.340 --> 00:10:35.950
Which is what we have on my machine.

164
00:10:35.950 --> 00:10:38.397
So that's your replacement for
dirname in deno,

165
00:10:38.397 --> 00:10:42.030
which you'll probably use a lot
is the current working directory.

166
00:10:42.030 --> 00:10:44.890
There's a lot more on the deno object
than what we've just gone over there.

167
00:10:44.890 --> 00:10:48.719
But what I'm just trying to show you is
that things that I think that you'll use

168
00:10:48.719 --> 00:10:52.317
the most often are the concepts in node
that you already know that you might

169
00:10:52.317 --> 00:10:54.660
be looking to replace,
like, how do I do this?

170
00:10:54.660 --> 00:10:55.990
I knew how to do it before,
how do I do it now?

