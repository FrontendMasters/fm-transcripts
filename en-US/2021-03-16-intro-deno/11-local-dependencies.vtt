WEBVTT

1
00:00:00.094 --> 00:00:03.825
Okay, this next session,
we're going to talk about dependencies,

2
00:00:03.825 --> 00:00:05.797
which you've already seen some of.

3
00:00:05.797 --> 00:00:09.986
But we haven't worked with actual
dependencies, right, we've looked at how

4
00:00:09.986 --> 00:00:14.506
dyno transpiled code that's yours, and we
executed a file that was on the internet.

5
00:00:14.506 --> 00:00:16.248
We just executed it directly, but

6
00:00:16.248 --> 00:00:19.799
we haven't actually used dependencies
which we're going to do now.

7
00:00:19.799 --> 00:00:24.268
So you'll remember from our earlier
discussions that Deno thinks very

8
00:00:24.268 --> 00:00:28.001
differently about dependencies and
it's a core premise.

9
00:00:28.001 --> 00:00:33.799
But we need to talk about how it's
different, so Deno really tries to stay

10
00:00:33.799 --> 00:00:38.866
as close to browser conventions
as it possibly can everywhere.

11
00:00:38.866 --> 00:00:43.653
And how you do JavaScript in
a browser file is different

12
00:00:43.653 --> 00:00:47.918
than how you do it in in node,
so, for instance,

13
00:00:47.918 --> 00:00:51.888
like how do you do
JavaScript in an HTML file?

14
00:00:51.888 --> 00:00:57.663
So if we come back to our exercises here,
like let's just create an HTML file,

15
00:00:57.663 --> 00:01:03.016
and if we wanted to include a JavaScript
file here, how would we do that?

16
00:01:03.016 --> 00:01:08.133
Well, we would come down here at
the bottom and we would say script, right?

17
00:01:08.133 --> 00:01:10.989
And then we'd say SRC, and
then we would link to some file and

18
00:01:10.989 --> 00:01:13.399
that would be how we would
include our JavaScript.

19
00:01:13.399 --> 00:01:19.963
That's how browsers use JavaScript, okay,
so Deno does exactly the same thing,

20
00:01:19.963 --> 00:01:24.294
it thinks about dependencies
in exactly the same way.

21
00:01:24.294 --> 00:01:29.279
And it suggests that you should
include dependencies by their URL,

22
00:01:29.279 --> 00:01:34.884
which seems completely bizarre for
those of us that have been working with.

23
00:01:34.884 --> 00:01:39.858
NPM because we're used to installing
dependencies and then adding them.

24
00:01:39.858 --> 00:01:46.398
But Deno wants to be like a browser so
it asks you to think like a browser here.

25
00:01:46.398 --> 00:01:50.110
So we'll be requiring
dependencies by their URL,

26
00:01:50.110 --> 00:01:53.056
Deno follows the ACMA script standard.

27
00:01:53.056 --> 00:01:56.235
For Import Export syntax for modules,

28
00:01:56.235 --> 00:02:01.354
which Node up until very recently
did not have a module system.

29
00:02:01.354 --> 00:02:03.579
And so while you could say for

30
00:02:03.579 --> 00:02:07.862
react projects you could do
import from this package.

31
00:02:07.862 --> 00:02:12.608
And Node you were stuck doing
const require now there is

32
00:02:12.608 --> 00:02:14.990
a module standard in Node.

33
00:02:14.990 --> 00:02:22.191
But it is not the Ekman script scan
standard, which is what Deno adheres to.

34
00:02:22.191 --> 00:02:25.538
So we talked about caching,
we looked at the Deno cache,

35
00:02:25.538 --> 00:02:29.111
it's important in the way that
Deno handles dependencies.

36
00:02:29.111 --> 00:02:33.551
Because it uses the URL reference
as the method to include these

37
00:02:33.551 --> 00:02:35.825
dependencies in your project.

38
00:02:35.825 --> 00:02:38.237
And you wouldn't want to download
these every time you ran your program.

39
00:02:38.237 --> 00:02:39.578
So what Deno does is,

40
00:02:39.578 --> 00:02:43.464
it downloads a dependency the first
time you run the program.

41
00:02:43.464 --> 00:02:47.564
And until the dependency changes or
you force it to update,

42
00:02:47.564 --> 00:02:49.867
it just sits there in your cache.

43
00:02:49.867 --> 00:02:54.687
And Deno handles these dependencies
differently whether or not you're using

44
00:02:54.687 --> 00:02:59.590
local, importing from a current file or
importing a remote dependency by URL.

45
00:02:59.590 --> 00:03:02.640
So we're going to take a look at
what that actually looks like,

46
00:03:02.640 --> 00:03:04.556
we talked about the Deno info command.

47
00:03:04.556 --> 00:03:07.367
Which is just going to give you
these different directories,

48
00:03:07.367 --> 00:03:08.945
these pads on your local machine.

49
00:03:08.945 --> 00:03:12.233
So you can look at that going forward, so

50
00:03:12.233 --> 00:03:16.314
local dependencies, so
let's talk about this.

51
00:03:16.314 --> 00:03:22.866
So let's add a new file here,
and let's call it utils.ts,

52
00:03:22.866 --> 00:03:29.050
and what we're gonna do here
is create a utils constant.

53
00:03:29.050 --> 00:03:32.883
Okay, and then we're just gonna
export this thing out the end, so

54
00:03:32.883 --> 00:03:35.080
I'm just gonna export define utils.

55
00:03:38.655 --> 00:03:43.370
Now, you should note that
you can't do this, so

56
00:03:43.370 --> 00:03:47.514
you can't do export default const utils.

57
00:03:47.514 --> 00:03:51.010
The spec won't allow you to do this,
you can do this but

58
00:03:51.010 --> 00:03:55.738
if you want to actually, sorry,
we can't do this export default const.

59
00:03:55.738 --> 00:03:59.875
That's not okay, this is okay,
that's just part of the specs,

60
00:03:59.875 --> 00:04:02.809
if you want to export it
as the default export,

61
00:04:02.809 --> 00:04:07.273
you actually have to declare it and
then export it on a different line.

62
00:04:07.273 --> 00:04:10.003
Okay, so
let's do something in utils, so, and

63
00:04:10.003 --> 00:04:13.012
this actually could be
a coding interview question.

64
00:04:13.012 --> 00:04:16.577
So, perhaps this will come in handy for
you in ways that you didn't know.

65
00:04:16.577 --> 00:04:20.301
So one of the things that you can't
do in JavaScript, by default,

66
00:04:20.301 --> 00:04:23.841
is reverse a string,
it doesn't have a method for doing that.

67
00:04:23.841 --> 00:04:27.678
And so, again, sometimes this comes up
as a coding question, people ask you to

68
00:04:27.678 --> 00:04:31.131
reverse a string in JavaScript, and
I'll show you an easy way to do it.

69
00:04:31.131 --> 00:04:36.000
So let's create a reverse function and
that takes in some text,

70
00:04:36.000 --> 00:04:40.788
a string will take in text, and
then we just want to reverse it.

71
00:04:40.788 --> 00:04:46.214
So I'm gonna do text and then we
need to give it type string here so

72
00:04:46.214 --> 00:04:51.141
that TypeScript knows that
we're dealing with a string.

73
00:04:51.141 --> 00:04:56.015
And then, so the trick here is that
JavaScript strings don't have a reverse

74
00:04:56.015 --> 00:04:57.623
method, but arrays do.

75
00:04:57.623 --> 00:05:00.361
So if we can get the string into an array,
we can reverse it and

76
00:05:00.361 --> 00:05:01.666
then make it a string again.

77
00:05:01.666 --> 00:05:04.876
So that's basically the answer,
so if we split and

78
00:05:04.876 --> 00:05:09.144
just pass in an empty string here
like this, this makes it an array.

79
00:05:09.144 --> 00:05:14.278
And then we can reverse it [LAUGH]
like this and then we can just join it

80
00:05:14.278 --> 00:05:19.423
right back again with an empty string,
and this will do the magic.

81
00:05:19.423 --> 00:05:24.393
Okay, so
now we wanna use this in our app file, so

82
00:05:24.393 --> 00:05:29.864
we do that by just importing it in,
so let's do that.

83
00:05:29.864 --> 00:05:34.378
We'll remove all this so
we're just gonna import and

84
00:05:34.378 --> 00:05:40.714
then I'm going to leave this open for
a minute and then say from utils.ts.

85
00:05:40.714 --> 00:05:45.801
In Node, you don't have to
specify a file extension,

86
00:05:45.801 --> 00:05:52.120
in Deno, you do, it's not going to
be okay with you not doing that.

87
00:05:52.120 --> 00:05:55.639
There's a lot of debate about whether or
not you should or shouldn't have the file

88
00:05:55.639 --> 00:05:58.960
extension, Ryan really felt strongly
that you should so you have to have it.

89
00:05:58.960 --> 00:06:03.790
And then here we don't actually we
can just do import utils because it's

90
00:06:03.790 --> 00:06:05.226
the default export.

91
00:06:05.226 --> 00:06:09.600
And then down here, we could do,
we can just console.log, and

92
00:06:09.600 --> 00:06:12.030
then we can reverse a message here.

93
00:06:12.030 --> 00:06:17.030
So let's just do console.log and
then utils.reverse,

94
00:06:17.030 --> 00:06:20.200
and then we'll pass in hello world.

95
00:06:20.200 --> 00:06:24.381
A couple things to note here,
first of all,

96
00:06:24.381 --> 00:06:29.020
you may be familiar with
the fact that you can do.

97
00:06:29.020 --> 00:06:35.343
This in Node currently or in Baybel,
rather in the transportation and

98
00:06:35.343 --> 00:06:40.378
you still get the default export but
in Deno you don't,

99
00:06:40.378 --> 00:06:45.115
it'll actually give you default and
then reverse.

100
00:06:45.115 --> 00:06:49.485
Okay, so if you export is
the default you can't use that star,

101
00:06:49.485 --> 00:06:53.530
you need to do it like this,
just with the default export.

102
00:06:53.530 --> 00:06:56.609
That's just part of the spec,
that's how it's supposed to work,

103
00:06:56.609 --> 00:07:00.227
just be aware of that because if you're
used to doing that import star as that can

104
00:07:00.227 --> 00:07:01.163
kind of mess you up.

105
00:07:01.163 --> 00:07:05.510
It messed me up, okay, so let's run this,

106
00:07:05.510 --> 00:07:09.271
let's run this to make sure it works.

107
00:07:09.271 --> 00:07:13.460
Deno run app.ts, check the file and

108
00:07:13.460 --> 00:07:17.919
we didn't return, we need to return,

109
00:07:17.919 --> 00:07:21.985
it would be helpful if we returned.

110
00:07:21.985 --> 00:07:26.338
Let's try it again, there we go,
now to reversing our string, all right,

111
00:07:26.338 --> 00:07:29.616
I really hope that that helps
somebody get a job someday.

112
00:07:29.616 --> 00:07:34.881
And I'm hopeful somebody will look back
and be like yeah, I watched this class and

113
00:07:34.881 --> 00:07:39.096
they reversed the string and
now I work at Google, I don't know.

114
00:07:39.096 --> 00:07:43.660
All right, so let's take a look at what
Deno actually does with this in the cache.

115
00:07:43.660 --> 00:07:47.020
To do that,
let's see what do we wanna do here, so

116
00:07:47.020 --> 00:07:50.220
we talked about utils,
we reverse the string.

117
00:07:50.220 --> 00:07:54.000
So let's look at the cache,
so again, let's go to,

118
00:07:54.000 --> 00:07:56.184
I'm going to go to Deno cache.

119
00:07:56.184 --> 00:08:00.638
And then we're gonna look inside, go to
the gym directory, and then we're going to

120
00:08:00.638 --> 00:08:04.104
go to File and then I'm just gonna
tab through some of this stuff.

121
00:08:04.104 --> 00:08:07.803
File slash, gosh, so

122
00:08:07.803 --> 00:08:12.560
cd file and then what do we have,

123
00:08:12.560 --> 00:08:18.741
we have home slash home, whack, whack.

124
00:08:18.741 --> 00:08:23.750
Dev me, deno exercises exercise,
there we are, let's look inside, okay, now

125
00:08:23.750 --> 00:08:28.919
we've got these files which all this looks
should look somewhat familiar, right?

126
00:08:28.919 --> 00:08:32.792
So we had these metadata files
that we looked at before, but

127
00:08:32.792 --> 00:08:35.353
now we just have ones for utils as well.

128
00:08:35.353 --> 00:08:39.502
But notice that we only have one bundle
info, which has our ts config in it.

129
00:08:39.502 --> 00:08:43.241
So we don't have a bundle info for
utils because it's not the entry point.

130
00:08:43.241 --> 00:08:46.872
And Deno knows that, but
if we look at the utils file,

131
00:08:46.872 --> 00:08:49.713
here's our converted JavaScript here.

132
00:08:49.713 --> 00:08:53.133
And if we look at this file,
it's actually,

133
00:08:53.133 --> 00:08:56.914
let's move back over here,
get back to the home.

134
00:08:56.914 --> 00:09:01.436
It's just importing utils from utils,
okay, so it's not doing anything special

135
00:09:01.436 --> 00:09:05.200
there to get the files, it looks
exactly like what you would expect.

