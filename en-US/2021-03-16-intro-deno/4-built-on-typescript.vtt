WEBVTT

1
00:00:00.350 --> 00:00:03.654
The other thing that it's important
to understand about Deno is that it's

2
00:00:03.654 --> 00:00:04.890
TypeScript first.

3
00:00:04.890 --> 00:00:08.100
And in fact,
let's look at the Deno project here.

4
00:00:08.100 --> 00:00:11.732
So let's just go out and
take a look at their GitHub here.

5
00:00:11.732 --> 00:00:15.874
And let's go to their standard library.

6
00:00:15.874 --> 00:00:20.870
And if we look at their standard library
here, let's take a look at HTTP.

7
00:00:20.870 --> 00:00:25.683
You can see that everything in
Deno is written in typescript, so

8
00:00:25.683 --> 00:00:31.137
they really expect that you're going
to write typescript, with Deno.

9
00:00:31.137 --> 00:00:35.689
Now, Ryan and
his talk sort of mentions and he says,

10
00:00:35.689 --> 00:00:40.758
dynamic languages like JavaScript and
Python are good for

11
00:00:40.758 --> 00:00:45.724
things like prototyping and
doing scientific computing

12
00:00:45.724 --> 00:00:51.219
running small batches of code
to do some isolated processing.

13
00:00:51.219 --> 00:00:53.757
And and
then he doesn't explicitly say it, but

14
00:00:53.757 --> 00:00:57.183
he's sort of implies that complex
systems on the other hand need

15
00:00:57.183 --> 00:00:59.990
a structured language with
the type system, okay.

16
00:01:01.390 --> 00:01:03.450
You may or
may not agree with that statement.

17
00:01:03.450 --> 00:01:07.053
I don't know that I necessarily do.

18
00:01:07.053 --> 00:01:12.093
But there are some key reasons why
you might want to consider TypeScript

19
00:01:12.093 --> 00:01:18.142
as your preferred language, especially for
larger and more complex applications.

20
00:01:18.142 --> 00:01:21.606
One of the beautiful things
about JavaScript is that there's

21
00:01:21.606 --> 00:01:23.760
no one right way to do it.

22
00:01:23.760 --> 00:01:26.110
And every one organizes
their projects differently.

23
00:01:26.110 --> 00:01:28.360
Some people use classes some people don't.

24
00:01:28.360 --> 00:01:30.360
Some people use objects
to store collections.

25
00:01:30.360 --> 00:01:32.580
Some people use arrays.

26
00:01:32.580 --> 00:01:35.898
If you remember the book, if you ever read
the book, The Lorax, if you're familiar

27
00:01:35.898 --> 00:01:39.290
with that book in that book,
they're making this thing called a need.

28
00:01:39.290 --> 00:01:41.080
And nobody's quite sure what it does.

29
00:01:41.080 --> 00:01:42.150
It just does everything.

30
00:01:42.150 --> 00:01:43.400
It's just whatever you want it to be.

31
00:01:43.400 --> 00:01:49.070
And so JavaScript is kind of
like a need in that regard.

32
00:01:49.070 --> 00:01:52.010
But this is also one of
the drawbacks because when

33
00:01:52.010 --> 00:01:55.742
large organizations adopt JavaScript,
it's difficult for

34
00:01:55.742 --> 00:02:00.202
them to standardize on it because they
have to invent their own patterns.

35
00:02:00.202 --> 00:02:03.301
Strongly typed languages are different.

36
00:02:03.301 --> 00:02:05.749
There's generally accepted patterns and

37
00:02:05.749 --> 00:02:10.582
practices that go into object oriented
languages they've been around for a while.

38
00:02:10.582 --> 00:02:16.224
Things like the the Gang
of Four's design patterns.

39
00:02:16.224 --> 00:02:18.835
And by the way, one of those Erich Gamma,

40
00:02:18.835 --> 00:02:23.775
who's one of the authors of the Gang of
Four is one of the architects of vs code.

41
00:02:23.775 --> 00:02:28.609
So, there are some philosophical
reasons there to adopt it.

42
00:02:28.609 --> 00:02:32.161
The other reasons are things
like better tooling.

43
00:02:32.161 --> 00:02:34.888
So let us take a look at
something real quick here.

44
00:02:34.888 --> 00:02:36.818
I am gonna go.

45
00:02:36.818 --> 00:02:43.105
Actually, we do not need to, let us just
create a new file here and call it app.ts.

46
00:02:43.105 --> 00:02:51.120
And what I wanna do here is I'm going
to pull in a module called Cosmos.

47
00:02:51.120 --> 00:02:54.260
And this is
Azure's Cosmos DB TypeScript package.

48
00:02:54.260 --> 00:02:55.515
We're not gonna use it.

49
00:02:55.515 --> 00:02:59.740
I just want to use it to show you the
benefits of writing things in TypeScript.

50
00:02:59.740 --> 00:03:03.166
And so
this module is written in TypeScript here.

51
00:03:03.166 --> 00:03:08.097
And we'll wait for this to install here.

52
00:03:08.097 --> 00:03:09.031
Just a second.

53
00:03:12.376 --> 00:03:17.980
But once we get this, let's look at the
tooling benefits that we get from this.

54
00:03:17.980 --> 00:03:23.429
So, what I wanna do
here is import from and

55
00:03:23.429 --> 00:03:27.020
of course VS code is aware.

56
00:03:27.020 --> 00:03:30.262
It sees the different packages that
we have here that can pull in.

57
00:03:30.262 --> 00:03:34.797
And I'm actually gonna delete this
node modules folder cuz it's enormous.

58
00:03:36.070 --> 00:03:42.686
So we want to be pulling from this what
we can do is, and this is not just for

59
00:03:42.686 --> 00:03:48.116
Azure for TypeScript,
this works for JavaScript as well.

60
00:03:48.116 --> 00:03:50.958
But we can pull in I think,

61
00:03:50.958 --> 00:03:55.877
see here, Cosmos client from Azure cosmos.

62
00:03:55.877 --> 00:03:57.242
Let's see what does it want?

63
00:03:57.242 --> 00:04:00.281
I installed and they removed
the node modules folder where it was

64
00:04:00.281 --> 00:04:02.090
[LAUGH] It's not gonna work very well.

65
00:04:02.090 --> 00:04:03.774
Finally it's installed.

66
00:04:03.774 --> 00:04:07.577
And then if we mouse over it here,
we get this tooling,

67
00:04:07.577 --> 00:04:09.987
which is provided by TypeScript.

68
00:04:09.987 --> 00:04:12.115
And again,
you get some of this with JavaScript,

69
00:04:12.115 --> 00:04:13.540
DS codes pretty good about that.

70
00:04:13.540 --> 00:04:15.050
But with TypeScript, you get even more.

71
00:04:15.050 --> 00:04:19.354
So for instance, like we know here that
there's an overloaded constructor,

72
00:04:19.354 --> 00:04:22.430
which is not something that
you can do with JavaScript.

73
00:04:22.430 --> 00:04:26.127
You can't overload constructors, but
you can do that with TypeScript.

74
00:04:26.127 --> 00:04:29.390
And you can take a connection string and
it's a type string.

75
00:04:29.390 --> 00:04:32.298
Even better though,
is that we have this options, right but

76
00:04:32.298 --> 00:04:34.360
we don't know what these options are.

77
00:04:34.360 --> 00:04:36.578
But with TypeScript we do.

78
00:04:36.578 --> 00:04:39.585
And so it knows that these are the
different options that you can gonna have

79
00:04:39.585 --> 00:04:41.053
and then we know what type they are.

80
00:04:41.053 --> 00:04:43.607
If we come over them again,
it tells us what they are.

81
00:04:43.607 --> 00:04:46.779
And it tells us whether or
not they are required.

82
00:04:46.779 --> 00:04:49.618
And we can tell that by
the question mark on the end,

83
00:04:49.618 --> 00:04:52.440
which means they're optional parameters.

84
00:04:52.440 --> 00:04:56.140
These are things that TypeScript provides
that you just don't get with JavaScript.

85
00:04:56.140 --> 00:05:00.280
So just better tooling,
which is quite nice.

86
00:05:00.280 --> 00:05:01.362
Quite a benefit.

87
00:05:02.556 --> 00:05:07.463
The problem is currently with TypeScript,
which is not a first class citizen,

88
00:05:07.463 --> 00:05:12.460
is that we have to transpile it or compile
it to something else before it'll run.

89
00:05:12.460 --> 00:05:13.532
So for instance,

90
00:05:13.532 --> 00:05:18.860
if we did something like this message
which is of type string says, Hello World.

91
00:05:18.860 --> 00:05:20.500
And then let's just log it out.

92
00:05:20.500 --> 00:05:23.204
We'll just log out the message.

93
00:05:23.204 --> 00:05:24.834
All right.

94
00:05:24.834 --> 00:05:27.840
Now the problem is that
node can't run this, right?

95
00:05:27.840 --> 00:05:32.941
So if we were to pass this to node,
it's gonna error because it doesn't

96
00:05:32.941 --> 00:05:38.690
recognize this type thing right here
that is specific to TypeScript.

97
00:05:38.690 --> 00:05:43.752
So to run this, we actually have
to turn this into JavaScript.

98
00:05:43.752 --> 00:05:48.178
And so to do that, we would then have to
initialize our project as a TypeScript

99
00:05:48.178 --> 00:05:52.057
project with a ts config file,
which I just did with tsc dash dash and

100
00:05:52.057 --> 00:05:53.850
let me clear out the terminal.

101
00:05:54.890 --> 00:05:57.926
And then that file is gonna
have a ton of different I mean,

102
00:05:57.926 --> 00:06:00.230
this is every possible option here.

103
00:06:00.230 --> 00:06:01.973
But we actually don't
need to change anything.

104
00:06:01.973 --> 00:06:06.743
We can just come to VS code and
do like a Ctrl Shift B.

105
00:06:06.743 --> 00:06:12.158
And then we can select build,
and it will just build for

106
00:06:12.158 --> 00:06:15.583
us based on that, ts config file.

107
00:06:15.583 --> 00:06:20.004
And it should give us an app.js file
right, which looks like that and

108
00:06:20.004 --> 00:06:22.225
now we can run this this will work.

109
00:06:22.225 --> 00:06:23.794
And that's fine.

110
00:06:23.794 --> 00:06:26.943
But the problem is that as you
have more and more files so

111
00:06:26.943 --> 00:06:29.419
like let's say you have a utils file here.

112
00:06:29.419 --> 00:06:31.158
A TypeScript file.

113
00:06:31.158 --> 00:06:33.640
Make sure that's in the right directory.

114
00:06:33.640 --> 00:06:40.141
And then, let's just add something
here called const utils, all right.

115
00:06:40.141 --> 00:06:44.643
Then in order,
we have to compile this too.

116
00:06:44.643 --> 00:06:46.425
So let's do that.

117
00:06:46.425 --> 00:06:47.330
Let's see here.

118
00:06:48.500 --> 00:06:50.100
No, no, no, let's do this.

119
00:06:50.100 --> 00:06:51.070
There we go.

120
00:06:51.070 --> 00:06:56.018
So it's build and now we have two files
and and then if we had source maps,

121
00:06:56.018 --> 00:06:58.790
then we would have three files, right?

122
00:06:58.790 --> 00:07:00.413
So every for every single file,

123
00:07:00.413 --> 00:07:04.400
you have then a TypeScript file
a JavaScript file and a source map.

124
00:07:04.400 --> 00:07:10.713
And the way that we usually deal with
this is you go to workspace settings.

125
00:07:10.713 --> 00:07:15.681
Let's see workspace
settings in VS code and

126
00:07:15.681 --> 00:07:22.670
what you can do is you can say,
I think it's files.exclude.

127
00:07:22.670 --> 00:07:23.227
There we go.
And

128
00:07:23.227 --> 00:07:27.120
then we can come in here and
just tell it like, these are called globs.

129
00:07:27.120 --> 00:07:32.560
And we could say hey, just like we're
not gonna look at the .DS_Store,

130
00:07:32.560 --> 00:07:36.440
let's just not show any JavaScript files,
right.

131
00:07:36.440 --> 00:07:41.615
And as we save this,
then all of our JavaScript files,

132
00:07:41.615 --> 00:07:45.740
oops, All of our JavaScript
files will go away.

133
00:07:45.740 --> 00:07:48.720
And then we just see our code
files while they're still there.

134
00:07:48.720 --> 00:07:51.309
We just don't see them.

135
00:07:51.309 --> 00:07:55.288
The next problem that we have with
TypeScript is not a first class citizen is

136
00:07:55.288 --> 00:07:58.824
that usually when we deploy the app,
we just want the JavaScript,

137
00:07:58.824 --> 00:08:02.824
you don't want the TypeScript too,
we don't need that anymore, right?

138
00:08:02.824 --> 00:08:05.651
The TypeScript is a source but
to run it in production,

139
00:08:05.651 --> 00:08:07.197
we just want the JavaScript.

140
00:08:07.197 --> 00:08:09.735
So how do we get just the JavaScript?

141
00:08:09.735 --> 00:08:12.060
Well then to do that,
we have to come back to ts config.

142
00:08:12.060 --> 00:08:16.737
And then we usually go to something
like the out directory and

143
00:08:16.737 --> 00:08:19.946
we'll change this out directory to say,

144
00:08:19.946 --> 00:08:24.640
I don't know it's slash,
let's just say it's like dist.

145
00:08:25.970 --> 00:08:30.590
Like this, and now when we build,
if we do build,

146
00:08:30.590 --> 00:08:37.304
we'll get a dist folder that will
contain just the JavaScript, right?

147
00:08:37.304 --> 00:08:40.863
But we can't see it because we hid it, so

148
00:08:40.863 --> 00:08:44.859
now we have to bring it back,
but there it is.

149
00:08:44.859 --> 00:08:47.330
But you can see how this is starting
to become a problem, right?

150
00:08:47.330 --> 00:08:48.610
Like there's configuration here.

151
00:08:48.610 --> 00:08:51.860
We have to figure out how are we
gonna keep the JavaScript and

152
00:08:51.860 --> 00:08:53.550
the map files from showing up?

153
00:08:53.550 --> 00:08:56.053
Where are we gonna put them when
we actually do the build step.

154
00:08:56.053 --> 00:09:00.509
None of this is a problem in Deno,
none of this.

155
00:09:00.509 --> 00:09:08.030
TypeScript just works and we don't have
to do anything extra to make it do that.

156
00:09:08.030 --> 00:09:13.709
Now I should note here that something
that's kind of interesting about node is

157
00:09:13.709 --> 00:09:20.360
that so this app.js file, we can now run
this with node, app.js and that will work.

158
00:09:20.360 --> 00:09:23.810
But node will execute any file.

159
00:09:23.810 --> 00:09:25.157
[LAUGH] It doesn't care.

160
00:09:25.157 --> 00:09:29.280
And so actually you don't even have to
have an extension you just call it app and

161
00:09:29.280 --> 00:09:30.290
just say node app.

162
00:09:31.530 --> 00:09:33.300
Oops node app.

163
00:09:33.300 --> 00:09:34.200
There we go.

164
00:09:34.200 --> 00:09:36.430
So you can try this out
just like take a file and

165
00:09:36.430 --> 00:09:38.500
change the extension to something else.

166
00:09:38.500 --> 00:09:41.074
I don't know like Git Smurf or something.

167
00:09:41.074 --> 00:09:42.238
And this will work.

168
00:09:42.238 --> 00:09:47.000
In Dino is actually the same way Deno
doesn't care that the file extension.

169
00:09:47.000 --> 00:09:51.510
If it's not a ts extension,
then Deno will assume that is JavaScript.

170
00:09:51.510 --> 00:09:55.430
Otherwise, if it's ts,
it will try to parse it as TypeScript.

171
00:09:55.430 --> 00:09:59.791
So just a little bit of information
about how those things work.

172
00:09:59.791 --> 00:10:00.848
All right, so

173
00:10:00.848 --> 00:10:06.939
we've been over this we talked about
excluding files about output directories.

174
00:10:06.939 --> 00:10:10.520
I'm not saying that any of this is a bad
thing, maybe this is how it should be.

175
00:10:10.520 --> 00:10:12.867
But usually when you wanna
have a TypeScript project,

176
00:10:12.867 --> 00:10:15.050
you now need to bring in gulp.

177
00:10:15.050 --> 00:10:19.060
And you need some sort
of an a build process.

178
00:10:19.060 --> 00:10:22.980
And all I'm saying is these
things can be tricky to set up,

179
00:10:22.980 --> 00:10:25.232
easy to mess up and kind of a drag.

180
00:10:25.232 --> 00:10:28.159
In Dino TypeScript is
a first class citizen.

181
00:10:28.159 --> 00:10:32.748
And so, as you see, what that means is
that all of that hackiness of compilation

182
00:10:32.748 --> 00:10:36.325
and where we put files and
all that stuff, all that goes away.

183
00:10:36.325 --> 00:10:38.813
The TypeScript just is your code.

184
00:10:38.813 --> 00:10:40.344
And that's all there is.

