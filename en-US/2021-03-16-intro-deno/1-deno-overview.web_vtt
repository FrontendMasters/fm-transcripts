WEBVTT

1
00:00:00.380 --> 00:00:03.780
There are some exercises
that go with this project.

2
00:00:03.780 --> 00:00:08.780
It's the Deno exercises repository.

3
00:00:08.780 --> 00:00:12.143
As you're going through it, if you
just clone it, let's go over here and

4
00:00:12.143 --> 00:00:13.540
take a look at it.

5
00:00:13.540 --> 00:00:17.549
What you'll see in here is a bunch of
branches, and if you're using PS code,

6
00:00:17.549 --> 00:00:21.147
you can just, once you sign in you
can see all the branches down here.

7
00:00:21.147 --> 00:00:25.400
And these branches respond to
the different sections that we'll be in.

8
00:00:25.400 --> 00:00:29.822
And so as we go through the different
exercises, what you'll see is at the top,

9
00:00:29.822 --> 00:00:34.340
it'll say, switch to this branch to
follow along with this exercise.

10
00:00:34.340 --> 00:00:38.290
In the beginning, mostly all that's
gonna do is reset the project.

11
00:00:38.290 --> 00:00:39.174
That's it, because for

12
00:00:39.174 --> 00:00:41.990
a long time we're just gonna be
working basically with one file.

13
00:00:41.990 --> 00:00:45.844
But when we get to the sections later on
in the course where we're gonna look at

14
00:00:45.844 --> 00:00:47.404
building a simple web server.

15
00:00:47.404 --> 00:00:52.580
And then we're gonna look at building
with a framework called Oak.

16
00:00:52.580 --> 00:00:55.066
Those sections build on each other, and

17
00:00:55.066 --> 00:00:58.220
you're gonna wanna be able
to move through those.

18
00:00:58.220 --> 00:00:59.919
And so as you move through those,

19
00:00:59.919 --> 00:01:02.780
we can take a look at one of
these later on branches here.

20
00:01:02.780 --> 00:01:06.760
So let's take a look at
like Oak templates here.

21
00:01:06.760 --> 00:01:09.678
You can see there's an exercise folder,
which you'll be working in, and

22
00:01:09.678 --> 00:01:13.000
then there's a solution folder as
well which has the completed code.

23
00:01:13.000 --> 00:01:16.580
And so if anytime you get stuck, you can
just jump into the solution folder, and

24
00:01:16.580 --> 00:01:19.580
that contains the solution for
that particular section.

25
00:01:19.580 --> 00:01:24.060
But I'll assume that everybody's gonna be
working inside of this exercise folder.

26
00:01:25.920 --> 00:01:31.100
Let's talk for a minute about development
containers because there is one in here.

27
00:01:31.100 --> 00:01:33.650
So this is a bonus, this is for free.

28
00:01:33.650 --> 00:01:37.729
If you go to the main branch,
there is a devcontainer folder.

29
00:01:37.729 --> 00:01:40.279
And this devcontainer folder specifies

30
00:01:40.279 --> 00:01:43.930
something called
the development container.

31
00:01:43.930 --> 00:01:49.864
If you have Docker installed, and if you
have the remote development extension,

32
00:01:49.864 --> 00:01:53.994
or remote containers extension for
Visual Studio code.

33
00:01:53.994 --> 00:01:59.477
It's just called remote
containers right here,

34
00:01:59.477 --> 00:02:03.790
then you can open this Deno exercises.

35
00:02:03.790 --> 00:02:07.394
I'm gonna mispronounce that all day,
by doing let's see,

36
00:02:07.394 --> 00:02:09.312
rebuild an opening container.

37
00:02:09.312 --> 00:02:13.483
And what happens is Visual Studio code
uses Docker, and I've already created

38
00:02:13.483 --> 00:02:17.290
a Deno container for you that has
everything that you need inside of it.

39
00:02:17.290 --> 00:02:20.878
So you'd actually don't even need to
install Deno, this should just work.

40
00:02:20.878 --> 00:02:23.676
But it'll start a devcontainer here.

41
00:02:23.676 --> 00:02:25.640
And then you can work
inside of that container.

42
00:02:25.640 --> 00:02:29.188
So this is something you can try if you
have Docker installed, and you wanna

43
00:02:29.188 --> 00:02:32.984
do do remote containers, you don't wanna
install Deno on your local machine.

44
00:02:32.984 --> 00:02:36.730
And then once you're in,
you can see that Deno's installed here.

45
00:02:36.730 --> 00:02:38.180
And that should just work for you.

46
00:02:39.670 --> 00:02:42.340
So that's the devcontainer.

47
00:02:42.340 --> 00:02:45.252
And that might make things
a little bit easier for you, or

48
00:02:45.252 --> 00:02:47.570
you can just install Deno and
use it locally.

49
00:02:49.400 --> 00:02:51.560
Okay, that's the exercises.

50
00:02:51.560 --> 00:02:55.967
Let's go ahead and get started,
and talk about Deno.

51
00:03:00.397 --> 00:03:03.460
So let's talk about the what and
the why of Deno here first.

52
00:03:05.160 --> 00:03:08.836
Deno is a command line runtime for
JavaScript.

53
00:03:08.836 --> 00:03:10.512
That's what it is.

54
00:03:10.512 --> 00:03:14.990
And this means that it allows JavaScript
to run outside of the browser.

55
00:03:16.020 --> 00:03:20.720
And sometimes we refer to this
as JavaScript on the server.

56
00:03:20.720 --> 00:03:22.984
You'll hear people say that.

57
00:03:22.984 --> 00:03:28.983
What it is, is it allows JavaScript to
do very IO type things like reading and

58
00:03:28.983 --> 00:03:35.380
writing to files, or working with streams,
or making HTTP requests.

59
00:03:35.380 --> 00:03:39.176
Basically the runtime freeze
JavaScript from the browser and

60
00:03:39.176 --> 00:03:42.315
allows you to use it like you would,
Java or C#, or

61
00:03:42.315 --> 00:03:46.330
any other programming language
that simply runs on this system.

62
00:03:47.950 --> 00:03:51.962
If you've been writing JavaScript for
a while, you're probably familiar with

63
00:03:51.962 --> 00:03:55.098
an existing runtime that does this,
and that's called node.

64
00:03:57.396 --> 00:03:58.698
Deno.

65
00:03:58.698 --> 00:04:01.430
Deno, [LAUGH] did it again.

66
00:04:01.430 --> 00:04:02.910
Deno is an anagram for node,

67
00:04:02.910 --> 00:04:07.050
and I'm sure that the node folks don't
appreciate me rearranging their logo.

68
00:04:07.050 --> 00:04:08.320
This is not official.

69
00:04:08.320 --> 00:04:10.250
This is just to hammer home.

70
00:04:10.250 --> 00:04:11.760
That this is where Deno comes from.

71
00:04:11.760 --> 00:04:17.139
It literally is the letters node
rearranged to make a different word.

72
00:04:18.560 --> 00:04:21.310
And this is not an inconsequential detail.

73
00:04:22.440 --> 00:04:26.858
If you were gonna build
a completely new runtime for

74
00:04:26.858 --> 00:04:32.201
JavaScript, why would you use
the name node intentionally,

75
00:04:32.201 --> 00:04:34.682
and just mix up the letters?

76
00:04:34.682 --> 00:04:40.160
If it's not node, then why wouldn't you
call it something entirely different?

77
00:04:43.650 --> 00:04:45.030
This is an important question.

78
00:04:45.030 --> 00:04:49.216
And in order to understand it,
we have to first ask a different question,

79
00:04:49.216 --> 00:04:52.738
which is why do we actually need
another JavaScript runtime?

80
00:04:52.738 --> 00:04:56.876
If you've been in technology for
any amount of time or even if you're just

81
00:04:56.876 --> 00:05:02.120
getting in, you've probably noticed
that things move very, very quickly.

82
00:05:02.120 --> 00:05:07.630
And nowhere do they move more quickly
than in the world of JavaScript.

83
00:05:09.140 --> 00:05:13.760
It seems like there's a new library or
a new framework every month.

84
00:05:13.760 --> 00:05:18.261
And yesterday's best practices
are today's anti patterns.

85
00:05:18.261 --> 00:05:21.567
It's incredibly frustrating to try
to keep up with all that because

86
00:05:21.567 --> 00:05:24.410
you feel like you're always behind.

87
00:05:24.410 --> 00:05:28.360
My gut reaction to hearing about Deno was,
please no.

88
00:05:29.540 --> 00:05:33.700
And the reason for that is that I already
no node, I've worked with it a lot.

89
00:05:34.740 --> 00:05:36.980
I'm very comfortable with NPM.

90
00:05:36.980 --> 00:05:39.550
Very comfortable with
the concepts of node.

91
00:05:39.550 --> 00:05:43.180
I've spent much of my career
getting to know node.

92
00:05:43.180 --> 00:05:47.870
I spend my day-to-day at Microsoft trying
to make node work better on Azure.

93
00:05:47.870 --> 00:05:55.135
And now you're telling me that
there's a new JavaScript runtime.

94
00:05:55.135 --> 00:06:01.200
I mean, node and NPM are so
critical to JavaScript developers.

95
00:06:01.200 --> 00:06:04.731
And if you don't believe that,
just look Microsoft or

96
00:06:04.731 --> 00:06:09.050
GitHub's recent acquisition of
NPM which is owned by Microsoft.

97
00:06:10.120 --> 00:06:11.890
So I mean, I'm open to new ideas.

98
00:06:11.890 --> 00:06:15.080
But I think that if we're gonna do it,
they have to solve a major problem.

99
00:06:15.080 --> 00:06:18.930
It can't just be, also me kind of thing,
I wanna do it, too.

100
00:06:19.930 --> 00:06:23.100
What enormous benefits does it provide
us over what we're doing right now?

101
00:06:23.100 --> 00:06:27.824
Because the constant switching of
technologies is a really fantastic way to

102
00:06:27.824 --> 00:06:31.270
accrue massive amounts of technical debt.

103
00:06:31.270 --> 00:06:32.890
We really don't want to do that.

104
00:06:32.890 --> 00:06:35.637
It's fine to learn new things,
but in the day-to-day,

105
00:06:35.637 --> 00:06:38.740
what we wanna do is standardize and
stay consistent.

106
00:06:38.740 --> 00:06:41.808
Otherwise, we just end up with
a smattering of projects written in all

107
00:06:41.808 --> 00:06:42.770
types of languages.

108
00:06:42.770 --> 00:06:44.930
And we're always refactoring,
trying to keep up.

109
00:06:46.900 --> 00:06:50.160
Deno was created by Ryan Dahl.

110
00:06:50.160 --> 00:06:52.540
Ryan is the same person who created node.

111
00:06:53.770 --> 00:06:57.853
And Ryan points out that when
he initially created node,

112
00:06:57.853 --> 00:07:00.839
he was just obsessed with IO operations.

113
00:07:01.860 --> 00:07:06.715
And in specifically,
he was frustrated with the predominant web

114
00:07:06.715 --> 00:07:09.980
server at that time, which was Apache, and

115
00:07:09.980 --> 00:07:15.690
its inability to handle large
numbers of concurrent HTTP requests.

116
00:07:15.690 --> 00:07:19.657
And so he talks about how he became
obsessed with optimizing IO,

117
00:07:19.657 --> 00:07:23.110
in the fact that at the time,
the prominent paradigm for

118
00:07:23.110 --> 00:07:26.801
coding languages was that they
were sequential in nature.

119
00:07:26.801 --> 00:07:30.350
Which is that on a web server
code executes top to bottom.

120
00:07:30.350 --> 00:07:34.579
And if some operational on the way,
it takes a long time, the entire thing is

121
00:07:34.579 --> 00:07:39.094
hung up waiting on that specific operation
to execute before the next one would.

122
00:07:39.094 --> 00:07:43.027
And that could make things perform poorly.

123
00:07:43.027 --> 00:07:47.070
And so all of this to say that
when Ryan initially created node,

124
00:07:47.070 --> 00:07:50.750
he was trying to create a highly
performant HTTP server.

125
00:07:52.280 --> 00:07:53.816
And he accomplished that goal.

126
00:07:53.816 --> 00:07:58.960
In 2012, Ryan left the project
because he considered node to be done.

127
00:07:58.960 --> 00:08:05.169
So let that sink in for
a moment because today, it's 2020 now and

128
00:08:05.169 --> 00:08:11.393
we know that node has changed
significantly since 2012, a lot.

129
00:08:11.393 --> 00:08:15.379
It's been eight years and that's been
enough time for Ryan to reflect there, and

130
00:08:15.379 --> 00:08:18.580
there are now many things that he
says that he regrets about node.

131
00:08:20.110 --> 00:08:22.670
There's this video here,
a talk that he gives called 10

132
00:08:22.670 --> 00:08:25.767
Things That I Regret About Nodes,
that I highly recommend watching.

133
00:08:25.767 --> 00:08:32.121
I'm gonna cover some of the ideas that he
lays out in that video because it's very

134
00:08:32.121 --> 00:08:37.170
important to understand why he
made the decisions that he made,

135
00:08:37.170 --> 00:08:40.924
and it will inform why Deno
is the way that it is.

136
00:08:40.924 --> 00:08:47.280
I think, hindsight it's always 2020,
no software is perfect.

137
00:08:48.660 --> 00:08:50.110
JavaScript is not perfect.

138
00:08:50.110 --> 00:08:51.080
PHP is not perfect.

139
00:08:51.080 --> 00:08:53.770
Java is not perfect, C# is not perfect.

140
00:08:53.770 --> 00:08:56.110
The projects that we
create are not perfect.

141
00:08:56.110 --> 00:08:59.859
When we're building software of any
kind or a language, we're sort of

142
00:08:59.859 --> 00:09:04.375
prognosticating about the future, and
there's so many things that we don't know.

143
00:09:04.375 --> 00:09:07.322
And what we do is we make
educated guesses, and

144
00:09:07.322 --> 00:09:10.890
we architect things based on the unknown.

145
00:09:10.890 --> 00:09:13.878
And when we look back,
we always look at a project and be like,

146
00:09:13.878 --> 00:09:16.240
I wish I had done that differently.

147
00:09:16.240 --> 00:09:17.160
Everyone does this.

148
00:09:17.160 --> 00:09:19.931
I don't know that there's anyone who's
ever written something and been like,

149
00:09:19.931 --> 00:09:20.590
that's perfect.

150
00:09:20.590 --> 00:09:22.580
There are no mistakes in that.

151
00:09:22.580 --> 00:09:23.280
I nailed it.

152
00:09:23.280 --> 00:09:25.250
I just don't think that that happens.

153
00:09:25.250 --> 00:09:29.632
And so, the regrets,
while regret is not normally a good thing.

154
00:09:29.632 --> 00:09:33.330
In this context it helps us
understand why Deno exists.

155
00:09:33.330 --> 00:09:38.256
So Deno is Ryan's second attempt at
creating a command line runtime for

156
00:09:38.256 --> 00:09:40.160
JavaScript.

157
00:09:40.160 --> 00:09:43.473
And it is based on the mistakes
that he feels like were made when

158
00:09:43.473 --> 00:09:47.632
he built node now that he knows and can
look back with the hindsight to do that.

159
00:09:47.632 --> 00:09:49.670
And that's why it's an anagram.

160
00:09:50.830 --> 00:09:53.580
That's why it's an anagram because
it is directly related to node.

161
00:09:53.580 --> 00:09:57.950
So to say that Deno has nothing to
do with node is simply not true.

162
00:09:57.950 --> 00:10:00.228
It absolutely does.

163
00:10:00.228 --> 00:10:05.250
It is intentionally meant by Ryan to
perfect the ideas that he really had

164
00:10:05.250 --> 00:10:10.956
with node while fixing some of the things
that he considers to be flaws with node.

165
00:10:10.956 --> 00:10:13.914
And when we understand those regrets,

166
00:10:13.914 --> 00:10:19.390
then the audit teams of Deno make a whole
lot more sense because it is odd.

