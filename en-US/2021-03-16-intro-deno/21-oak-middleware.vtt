WEBVTT

1
00:00:01.140 --> 00:00:03.200
We want the simple Oak Server.

2
00:00:03.200 --> 00:00:06.657
So Oak is a third party library for Deno,

3
00:00:06.657 --> 00:00:11.430
we can find it in the third
party library section.

4
00:00:11.430 --> 00:00:16.198
This is their GitHub page, and it says
right here middleware framework for

5
00:00:16.198 --> 00:00:20.980
Deno' s HTTP server, including a router
and middleware inspired by Koa.

6
00:00:22.710 --> 00:00:26.710
All right, so to get started,
we need to import this thing, and

7
00:00:26.710 --> 00:00:30.800
it's got some code here, so heck,
let's just copy their code.

8
00:00:32.640 --> 00:00:33.570
Where is our project?

9
00:00:33.570 --> 00:00:36.100
I'm gonna close down this express,
we now have too many windows open.

10
00:00:37.710 --> 00:00:40.270
All right, and what do we got?

11
00:00:40.270 --> 00:00:46.513
Let's go to our simple,
see if I can find our simple web,

12
00:00:46.513 --> 00:00:50.950
Oak simple server, there we go, okay?

13
00:00:52.960 --> 00:00:57.310
And let's go ahead and
import this application object.

14
00:00:57.310 --> 00:01:01.044
And again, you see this mod.ts,
again, just a naming convention,

15
00:01:01.044 --> 00:01:02.400
just means module.

16
00:01:02.400 --> 00:01:05.290
If we were to actually look at this file,

17
00:01:05.290 --> 00:01:10.050
what it will give us is all of
the different dependencies, right?

18
00:01:10.050 --> 00:01:15.679
So, it's pulling in all of this stuff,
and then exporting all of this stuff,

19
00:01:15.679 --> 00:01:19.540
sort of sort of like our
depths.ts file both for oak.

20
00:01:19.540 --> 00:01:23.190
And so, when we fetch this thing,
it's gonna fetch.

21
00:01:24.320 --> 00:01:25.210
So, it's fetch.

22
00:01:26.650 --> 00:01:31.547
It's gonna fetch Oak, and all of
the different dependencies that come

23
00:01:31.547 --> 00:01:34.490
with that, of which there are quite a few.

24
00:01:34.490 --> 00:01:39.538
And if we wanted to see that, we can
just do deno info app.ts, and that will

25
00:01:39.538 --> 00:01:44.684
show us see, here's all of the Oak stuff
that we've got, quite a bit of it.

26
00:01:48.715 --> 00:01:50.140
Quite a bit of dependencies.

27
00:01:50.140 --> 00:01:54.190
All right, so
let's talk about how we use this thing.

28
00:01:54.190 --> 00:01:59.435
We're gonna first need to create an app,
that's a new application like this.

29
00:02:01.172 --> 00:02:07.008
And then what we need to do is we need to
tell the app how to handle an incoming

30
00:02:07.008 --> 00:02:13.330
request and we do that by basically
defining this piece of middleware, okay?

31
00:02:13.330 --> 00:02:16.610
And again, middleware is just as doing
something to the request as it comes in.

32
00:02:17.870 --> 00:02:20.773
So, what we wanna do is get requests and
respond to it,

33
00:02:20.773 --> 00:02:22.361
that's all we wanna do here.

34
00:02:22.361 --> 00:02:28.640
So, what we're gonna do is,
pass a function, that is like this.

35
00:02:31.280 --> 00:02:33.103
Two parameters that it takes,

36
00:02:33.103 --> 00:02:37.869
and then what we wanna do is just this
context object, and see it's TypeScript,

37
00:02:37.869 --> 00:02:41.300
so it knows that its stuff
type context has a response.

38
00:02:41.300 --> 00:02:49.530
So response.body,
should have a body equals "Hello world".

39
00:02:49.530 --> 00:02:51.648
And let's just do from Oak, so

40
00:02:51.648 --> 00:02:55.811
we know we're actually in
a different project here, okay.

41
00:02:55.811 --> 00:03:00.674
The last thing we need to do is
just tell the server that we

42
00:03:00.674 --> 00:03:04.510
want it to listen, so we want app.listen.

43
00:03:04.510 --> 00:03:09.122
And then it's gonna want an address or
an object which is like a port and

44
00:03:09.122 --> 00:03:09.990
a hostname.

45
00:03:11.630 --> 00:03:13.053
So, let's define the port and

46
00:03:13.053 --> 00:03:16.920
the hostname up top is probably just
a good thing to do as constants.

47
00:03:16.920 --> 00:03:22.790
Port, let's make it 8000 this time,
and then hostname equals,

48
00:03:22.790 --> 00:03:28.370
just to save confusions keep it a 3000,
remember box of dots.

49
00:03:30.170 --> 00:03:36.070
Okay, and then let's see our port,
here's port, and our host name.

50
00:03:40.040 --> 00:03:42.380
Hostname is HOSTNAME, okay.

51
00:03:46.050 --> 00:03:52.764
So, this should be all we need to
start crank up and run an Oak server.

52
00:03:52.764 --> 00:03:54.415
And we probably want to add this line, so

53
00:03:54.415 --> 00:03:57.270
we know that it's listening
otherwise we won't get any output.

54
00:03:57.270 --> 00:03:59.238
Now that things have
actually been successful.

55
00:04:05.392 --> 00:04:10.753
Let me make sure I don't have anything
else running on port 3000 in Linux or

56
00:04:10.753 --> 00:04:14.653
Mac, to do that you can run
this lsof -i tcp:3000 or

57
00:04:14.653 --> 00:04:17.190
whatever part you're looking for.

58
00:04:17.190 --> 00:04:19.490
It'll tell you there is
something still running there.

59
00:04:19.490 --> 00:04:23.470
So, we wannna kill that,
31679 probably that express app.

60
00:04:23.470 --> 00:04:24.290
Okay, cool.

61
00:04:27.340 --> 00:04:27.964
All right?

62
00:04:27.964 --> 00:04:32.696
So, let's open this,
let's clear this out, and

63
00:04:32.696 --> 00:04:38.400
we're gonna do, deno run,
just allow everything.

64
00:04:38.400 --> 00:04:42.136
Let's, watch unstable app.ts.

65
00:04:45.473 --> 00:04:49.660
Checking in transpiring now
listening on http 3000.

66
00:04:49.660 --> 00:04:52.750
Sweet, so let's open this.

67
00:04:52.750 --> 00:04:54.770
All right, great.

68
00:04:54.770 --> 00:04:56.530
So, now we're using Oak.

69
00:04:56.530 --> 00:05:03.240
Although, it looks a lot like the HTTP
server that we used from Deno, right?

70
00:05:03.240 --> 00:05:07.498
Not a lot of differences there in
terms of the syntactically similar,

71
00:05:07.498 --> 00:05:09.760
maybe a little bit more concise.

72
00:05:09.760 --> 00:05:14.685
It doesn't have that weird for
await loop, which is kinda quirky to me,

73
00:05:14.685 --> 00:05:16.560
but the same thing, okay.

74
00:05:16.560 --> 00:05:21.476
So, one of the things that I want to
talk about is middleware and Oak, and

75
00:05:21.476 --> 00:05:23.260
exactly what that means.

76
00:05:23.260 --> 00:05:28.020
So, you see, we've got this next variable
that we're not even using here, right?

77
00:05:28.020 --> 00:05:31.200
We could like even pull this out.

78
00:05:31.200 --> 00:05:34.745
Middleware gets executed
sort of like an order here,

79
00:05:34.745 --> 00:05:38.700
so let's say we wanted to add
another piece of middleware.

80
00:05:40.510 --> 00:05:45.235
And then in that piece of middleware, what
we want to do is just console dot log, and

81
00:05:45.235 --> 00:05:48.270
just say "This is middleware", right?

82
00:05:48.270 --> 00:05:51.630
We might be taking some action here,
but we're just we're just logging out.

83
00:05:51.630 --> 00:05:56.700
And so, what's gonna happen is, Deno
is gonna hit this piece of middleware.

84
00:05:56.700 --> 00:05:59.890
And then we should see this logged out.

85
00:05:59.890 --> 00:06:02.130
So let's try that and
see what happens here.

86
00:06:03.290 --> 00:06:07.410
So I'm gonna refresh and you'll notice
that we say the page cannot be found, but

87
00:06:07.410 --> 00:06:11.420
if we come back here, it says, this is
middleware, and it's still running.

88
00:06:12.760 --> 00:06:14.580
But why did this break?.

89
00:06:14.580 --> 00:06:18.982
Well, it's because we never called next,
we actually have to say next,

90
00:06:18.982 --> 00:06:22.730
which tells the program
continue on to the next step.

91
00:06:22.730 --> 00:06:27.130
So it never gets to this part
here because we didn't call next.

92
00:06:27.130 --> 00:06:28.230
And so, we have to do that.

93
00:06:28.230 --> 00:06:32.228
So, that's what middleware does,
if it's not returning the body response,

94
00:06:32.228 --> 00:06:36.500
then it should call next and
something eventually needs to do that.

95
00:06:36.500 --> 00:06:40.299
But now that we've done that,
we should be able to refresh,

96
00:06:40.299 --> 00:06:45.310
get our old page back and
see that this is middleware, all right?

97
00:06:45.310 --> 00:06:45.810
Okay.

98
00:06:46.870 --> 00:06:49.770
So that's how middleware works in oak.

99
00:06:49.770 --> 00:06:53.742
Just again, important to understand
that because we're gonna use the word

100
00:06:53.742 --> 00:06:57.230
middleware a lot, and
how that works with routing, and what not.

101
00:06:58.860 --> 00:07:01.810
Let's see,
what else we want to say about Oak?

102
00:07:01.810 --> 00:07:03.156
And getting started with Oak.

103
00:07:03.156 --> 00:07:07.886
We talked about middleware,
we talked about calling next, and

104
00:07:07.886 --> 00:07:11.010
we talked about, yep, there we go.

105
00:07:11.010 --> 00:07:15.081
So, you can write your own pieces of
middleware that use this app.use function,

106
00:07:15.081 --> 00:07:17.400
you pass the middleware to app.use.

107
00:07:17.400 --> 00:07:21.350
And you can do all sorts of things
with it like handle routing.

108
00:07:21.350 --> 00:07:25.970
So, in the next section I wanna talk
about how we can do routing with Oak.

109
00:07:25.970 --> 00:07:27.510
So, that's what we'll do next.

