WEBVTT

1
00:00:00.270 --> 00:00:02.870
Okay, what about route parameters though?

2
00:00:02.870 --> 00:00:09.191
Query strings are simple enough, but
if we wanted to parse route parameters,

3
00:00:09.191 --> 00:00:14.920
such as like instead of what if
we wanted to do name/Burke right?

4
00:00:14.920 --> 00:00:17.660
And we wanted to pull Burke
off of the name, route.

5
00:00:17.660 --> 00:00:21.391
This is how restful routes are usually
defined where you have products, and

6
00:00:21.391 --> 00:00:22.334
then one, right?

7
00:00:22.334 --> 00:00:25.306
And it returns the product
with an ID of one.

8
00:00:25.306 --> 00:00:28.010
We're just gonna return the name, Burke.

9
00:00:28.010 --> 00:00:30.120
So, how do we pull that off of there?

10
00:00:30.120 --> 00:00:35.732
Now, that is something that we cannot do,
there's no API that exists to do that.

11
00:00:35.732 --> 00:00:38.794
So, this is a point where
as a node developer,

12
00:00:38.794 --> 00:00:43.504
you start to think about your situation
and look around and say, well,

13
00:00:43.504 --> 00:00:46.582
I could use some complicated
regex to do this.

14
00:00:46.582 --> 00:00:49.440
You could Google this and
look it up on Stack Overflow.

15
00:00:49.440 --> 00:00:50.280
How do I do this?

16
00:00:50.280 --> 00:00:54.740
But a lot of times, instead of doing
any of that, we just turned to NPM.

17
00:00:54.740 --> 00:00:59.590
And we just look for an NPM module
that will help us with route params.

18
00:01:01.420 --> 00:01:05.250
So let's go to NPM and see, right?

19
00:01:05.250 --> 00:01:07.892
We might come over here and just be like,

20
00:01:07.892 --> 00:01:12.070
I need something that parses routes,
like a route parser.

21
00:01:12.070 --> 00:01:13.490
Is there a route parser?

22
00:01:13.490 --> 00:01:16.394
Look, there is a route parser.

23
00:01:16.394 --> 00:01:17.270
This one right here.

24
00:01:17.270 --> 00:01:18.430
In fact there's a lot of them.

25
00:01:18.430 --> 00:01:21.444
But this one says an isomorphic,
bullet proof,

26
00:01:21.444 --> 00:01:24.981
ninja ready route parsing
matching reversing library.

27
00:01:24.981 --> 00:01:29.336
And if we look at it, this is what I
usually do to see whether or not a package

28
00:01:29.336 --> 00:01:34.890
is legit, I'm like, 45,000 downloads
in a week, looks good, NPM install.

29
00:01:34.890 --> 00:01:39.342
So obviously a lot of people
are using this, it's being used.

30
00:01:39.342 --> 00:01:41.570
And it says that it's isomorphic.

31
00:01:41.570 --> 00:01:46.020
So if you're not familiar with
the term isomorphic it's a really,

32
00:01:46.020 --> 00:01:50.328
really bad way to say that it works
in both the browser and in Node.

33
00:01:50.328 --> 00:01:54.660
I don't know why we come up with
these confusing terms, but we do.

34
00:01:54.660 --> 00:01:56.704
And so if it works in the browser,

35
00:01:56.704 --> 00:02:00.650
then it will probably work in Deno,
most likely, most likely.

36
00:02:00.650 --> 00:02:03.120
So we can use this.

37
00:02:03.120 --> 00:02:07.650
But how do we use an NPM
package that we can't install?

38
00:02:10.450 --> 00:02:16.634
Well, there's a couple of different
ways that we can do this.

39
00:02:16.634 --> 00:02:20.394
There are some services
out there that allow you

40
00:02:20.394 --> 00:02:25.190
to directly access modules on
NPM without installing them.

41
00:02:25.190 --> 00:02:29.455
One of them is called unpackage.

42
00:02:29.455 --> 00:02:32.709
I don't know if that's how you say that,
if it's UNPKG or unpackage,

43
00:02:32.709 --> 00:02:34.340
I say unpackage.

44
00:02:34.340 --> 00:02:38.810
But basically you can point
it at a file that's on NPM.

45
00:02:38.810 --> 00:02:43.693
So for instance let me find one,
like this one here, this is react.

46
00:02:43.693 --> 00:02:47.119
And then it return to you
the actual file back.

47
00:02:48.830 --> 00:02:51.694
The problem here though,

48
00:02:51.694 --> 00:02:56.772
is that Deno needs specific
ECMA script module

49
00:02:56.772 --> 00:03:02.400
syntax in order to use these modules,
okay.

50
00:03:02.400 --> 00:03:07.208
And we already talked about the fact that
node didn't have that module system, for

51
00:03:07.208 --> 00:03:10.777
a lot of time, it's been using
the the common js Module spec,

52
00:03:10.777 --> 00:03:14.433
which is that module.exports
if you're familiar with that.

53
00:03:14.433 --> 00:03:19.044
And so, the problem is that
we can't use our this library

54
00:03:19.044 --> 00:03:23.750
unless it follows the right
Import Export syntax.

55
00:03:23.750 --> 00:03:27.040
And we could look to see whether or

56
00:03:27.040 --> 00:03:32.219
not that's true by going
over to their GitHub repo.

57
00:03:32.219 --> 00:03:39.370
And then let's look at, I mean,
let's just go to their lib folder here.

58
00:03:39.370 --> 00:03:43.504
And this route file is
what we're gonna need.

59
00:03:43.504 --> 00:03:45.380
And if we scroll down to the bottom.

60
00:03:47.400 --> 00:03:50.770
Okay, so, this right here is a problem.

61
00:03:50.770 --> 00:03:53.772
This is that common js module syntax,
I believe it's called,

62
00:03:53.772 --> 00:03:55.880
which means it's not gonna work with Deno.

63
00:03:58.550 --> 00:04:00.130
But most node modules use this.

64
00:04:00.130 --> 00:04:03.406
So does this mean that we
can't use this with Deno?

65
00:04:03.406 --> 00:04:08.026
No, actually, believe it or not,
someone built a service to fix this for

66
00:04:08.026 --> 00:04:09.530
us on the fly.

67
00:04:09.530 --> 00:04:16.186
So there's another
service called jspm.dev,

68
00:04:16.186 --> 00:04:22.200
I believe, jspm.org, here it is, jspm.

69
00:04:23.200 --> 00:04:27.711
So what jspm does is it is a module CDN
allowing any package from NPM to be

70
00:04:27.711 --> 00:04:30.081
directly loaded in the browser, and

71
00:04:30.081 --> 00:04:34.681
other js environments as a fully
optimized native JavaScript module.

72
00:04:34.681 --> 00:04:39.224
In other words, it converts it so
that we can use that it has that proper

73
00:04:39.224 --> 00:04:44.140
Import Export syntax that complies
with the ECMA Script specification.

74
00:04:44.140 --> 00:04:46.570
So, how do we bring it in?

75
00:04:47.960 --> 00:04:51.200
We just have to use jspm to grab it.

76
00:04:51.200 --> 00:04:55.630
So what we can do here, is add it here,
so I'm gonna bring it in.

77
00:04:55.630 --> 00:05:00.670
So you can see here I'm pulling
from jspm dev.jsmp.io route parser,

78
00:05:00.670 --> 00:05:02.605
and then the version here.

79
00:05:02.605 --> 00:05:07.441
And you'll notice here that,
I'm gonna do this, that Deno does not care

80
00:05:07.441 --> 00:05:11.887
that this is not a Deno module,
that it's not a TypeScript module,

81
00:05:11.887 --> 00:05:15.960
that it didn't come from Deno land,
it does not care.

82
00:05:15.960 --> 00:05:19.740
It is more than happy to fetch
this file and try to run it.

83
00:05:19.740 --> 00:05:20.560
So let's do that.

84
00:05:20.560 --> 00:05:21.840
Let's just fetch it.

85
00:05:21.840 --> 00:05:23.430
So it's gonna pull it down.

86
00:05:23.430 --> 00:05:30.360
Okay, so, now we've got it, so we've
got it, but how exactly do we use it?

87
00:05:31.370 --> 00:05:35.740
The way that the docs for route parser
are, so let's go back to their docs here.

88
00:05:37.250 --> 00:05:42.933
[SOUND] route parser, is it any good?

89
00:05:42.933 --> 00:05:45.010
Yes, perfect, I love it.

90
00:05:45.010 --> 00:05:49.460
So it wants us to do this,
route equals require route parser.

91
00:05:49.460 --> 00:05:52.589
Well, we've already got it in, and
then var route equals new route, okay?

92
00:05:52.589 --> 00:05:54.000
So let's try that.

93
00:05:54.000 --> 00:05:56.374
So we say const route = new route.

94
00:05:56.374 --> 00:06:01.560
New route, we call it routeParser, like
this, and we don't get any IntelliSense.

95
00:06:02.610 --> 00:06:06.371
And this is because Deno needs
TypeScript definitions for

96
00:06:06.371 --> 00:06:11.600
this file in order to know what to do
here, it doesn't know anything about this.

97
00:06:11.600 --> 00:06:13.500
There's no TypeScript definitions.

98
00:06:13.500 --> 00:06:18.100
So we just need to bring in the TypeScript
definitions for routeParser.

99
00:06:18.100 --> 00:06:19.640
So where do we get those?

100
00:06:19.640 --> 00:06:25.190
Well, let's go back to npmjs.com.

101
00:06:25.190 --> 00:06:30.659
And let's look for route parser
is what was called, route parser.

102
00:06:30.659 --> 00:06:34.698
And then let's look for types.

103
00:06:34.698 --> 00:06:37.632
Route parser types.

104
00:06:37.632 --> 00:06:39.070
And certainly enough, look, right here.

105
00:06:39.070 --> 00:06:41.981
So there is a project
called definitely typed,

106
00:06:41.981 --> 00:06:45.259
where people contribute
TypeScript definitions for

107
00:06:45.259 --> 00:06:50.850
popular JavaScript libraries and
route parser happens to be one of those.

108
00:06:50.850 --> 00:06:54.110
So here we just need to
install the type definitions.

109
00:06:54.110 --> 00:06:56.100
Well, how do we do that?

110
00:06:56.100 --> 00:07:00.817
Well, fortunately,
we can use this unpackage service to

111
00:07:00.817 --> 00:07:05.440
bring in this types package
into our file here.

112
00:07:05.440 --> 00:07:10.304
So I'm just gonna copy this down
here cuz it's exactly the right

113
00:07:10.304 --> 00:07:14.446
syntax that we need, but
basically what we need here,

114
00:07:14.446 --> 00:07:19.602
if we go back, if we go to the repo,
what we need is we need to pull in.

115
00:07:19.602 --> 00:07:21.200
Let's see, where's route parser?

116
00:07:21.200 --> 00:07:22.373
I think it's under types.

117
00:07:24.767 --> 00:07:25.870
Let's go to route parser.

118
00:07:25.870 --> 00:07:30.602
There's a lot of folders in here.

119
00:07:30.602 --> 00:07:32.350
I don't know if GitHub
can even load them all.

120
00:07:32.350 --> 00:07:33.320
No, it can't.

121
00:07:33.320 --> 00:07:34.450
We won't even try.

122
00:07:34.450 --> 00:07:35.850
Anyway, there's a folder
called route parser.

123
00:07:35.850 --> 00:07:39.653
And in there is an index.d.ts
file that we need.

124
00:07:42.432 --> 00:07:44.880
And we're gonna use that unpackage
service to bring that in.

125
00:07:44.880 --> 00:07:50.190
So it's importing it
drectly from NPM here.

126
00:07:50.190 --> 00:07:52.214
And again, we just fetch this.

127
00:07:54.687 --> 00:07:55.870
We're gonna fetch it.

128
00:07:55.870 --> 00:07:59.435
And if you remember it's
sticking it in that cache, right?

129
00:07:59.435 --> 00:08:03.180
So if we were to go in the cache,
we'll find these dependencies there.

130
00:08:03.180 --> 00:08:06.835
And now,
we just need to tell this routeParser,

131
00:08:06.835 --> 00:08:09.250
that it is of type routeParser.

132
00:08:10.670 --> 00:08:11.340
How do we do that?

133
00:08:12.410 --> 00:08:15.150
Well, there's a way that
we can do that explicitly.

134
00:08:16.370 --> 00:08:22.100
Where we can just tell it Route is
a routeParser as typeof RouteParser.

135
00:08:22.100 --> 00:08:25.070
So const Route = routeParser,

136
00:08:25.070 --> 00:08:31.010
which is this first one we've
imported as typeof RouteParser,

137
00:08:31.010 --> 00:08:34.760
which are the TypeScript definitions.

138
00:08:36.170 --> 00:08:38.920
Okay, and now that we've got that,

139
00:08:38.920 --> 00:08:42.577
we should be able to say
const route = new Route.

140
00:08:42.577 --> 00:08:46.675
And look at that,
now we get typescript definitions,

141
00:08:46.675 --> 00:08:52.780
we've got the IntelliSense, Deno is
gonna be okay with us using this module.

142
00:08:52.780 --> 00:08:56.406
So let's, just to make sure I
have the syntax right here,

143
00:08:56.406 --> 00:09:00.790
let's check with the guide,
create a new route, that's right.

144
00:09:00.790 --> 00:09:05.054
So let's define, let's go ahead and
get rid of this noise here.

145
00:09:05.054 --> 00:09:06.070
Let's grab this.

146
00:09:07.600 --> 00:09:08.932
Let's pull it down.

147
00:09:08.932 --> 00:09:11.070
Let's pull it down, down, down, down here.

148
00:09:11.070 --> 00:09:18.119
And what we wanna do is define a new route
and we wanna say /name, /:name like this.

149
00:09:18.119 --> 00:09:23.821
And really we could use /name/:name
I think is what we did before,

150
00:09:23.821 --> 00:09:27.770
but we're just gonna
look right on the route.

151
00:09:27.770 --> 00:09:32.890
So if we pass in a name like this.

152
00:09:32.890 --> 00:09:35.309
Okay, and what this is doing is saying,

153
00:09:35.309 --> 00:09:40.300
there's a name parameter Route that's
gonna come in, we wanna pull the name off.

154
00:09:41.420 --> 00:09:48.750
And so what we wanna do here is
just say const match = route.match.

155
00:09:48.750 --> 00:09:52.280
And then our req.URL should do it.

156
00:09:52.280 --> 00:09:55.767
And then here we don't need these query
string params anymore because we're not

157
00:09:55.767 --> 00:09:57.830
looking at the query string.

158
00:09:57.830 --> 00:10:00.468
And we should be able to do,
let's get rid of this too.

159
00:10:02.293 --> 00:10:06.696
What we should be able to do
here is just say match.name.

160
00:10:12.625 --> 00:10:14.340
Is this working match.name.

161
00:10:14.340 --> 00:10:16.011
You know what we need to do,

162
00:10:16.011 --> 00:10:19.610
All the TypeScript people
just cringed when I did that.

163
00:10:19.610 --> 00:10:23.900
But we don't have a type for match.

164
00:10:23.900 --> 00:10:27.050
So we need to say that it's type any,
sort of allow us to do this right here,

165
00:10:27.050 --> 00:10:28.430
reference this name.

166
00:10:28.430 --> 00:10:32.060
Okay, so, all of that.

167
00:10:32.060 --> 00:10:33.020
We're still running.

168
00:10:33.020 --> 00:10:36.270
Our watch is chugging along nicely.

169
00:10:36.270 --> 00:10:40.031
Let's head up here and see.

170
00:10:40.031 --> 00:10:41.080
If we put this in.

171
00:10:42.440 --> 00:10:42.980
Hello burke.

172
00:10:42.980 --> 00:10:44.240
It's working.
There we go, right?.

173
00:10:45.340 --> 00:10:47.898
So now we're successfully parsing routes.

174
00:10:47.898 --> 00:10:52.623
Now, I know that seems like
a lot of hoops to jump through,

175
00:10:52.623 --> 00:10:56.094
but the whole point in
that exercise was for

176
00:10:56.094 --> 00:10:59.759
you to see that it is
technically possible for

177
00:10:59.759 --> 00:11:05.080
you to use node packages,
NPM packages with Deno, you can do it.

178
00:11:05.080 --> 00:11:08.526
It's just that you have to
jump through a few hoops.

179
00:11:08.526 --> 00:11:13.870
Number one, because likely it doesn't
have the right Import Export syntax.

180
00:11:13.870 --> 00:11:17.902
And also likely because you're gonna
need the TypeScript definitions and

181
00:11:17.902 --> 00:11:22.600
then you're gonna have to tell Deno
that something is of a particular type.

182
00:11:22.600 --> 00:11:27.060
So, a bit hacky, I think we could say,
we can generally agree.

183
00:11:27.060 --> 00:11:29.530
But technically, this does work.

