WEBVTT

1
00:00:00.620 --> 00:00:03.860
So, so
far we've built this Oak application.

2
00:00:05.270 --> 00:00:11.790
And now what we want to do is we want to
deploy this application to production.

3
00:00:11.790 --> 00:00:13.570
So that's what we're going to do next.

4
00:00:13.570 --> 00:00:16.778
We're actually going to deploy this and
watch it run somewhere and

5
00:00:16.778 --> 00:00:20.170
talk about the different ways that
you can deploy a deno application.

6
00:00:22.440 --> 00:00:27.540
So let's switch over to the,
let's see here.

7
00:00:27.540 --> 00:00:31.190
You know what, let's just stay
right here and go wild west out.

8
00:00:31.190 --> 00:00:32.160
We'll just figure it out as we go.

9
00:00:34.210 --> 00:00:39.879
Okay, when we talk about
deploying a Deno application,

10
00:00:39.879 --> 00:00:45.666
I think we talked before about
the fact that the Deno really

11
00:00:45.666 --> 00:00:54.040
wants to have a single executable that you
can just deploy and run in the future.

12
00:00:54.040 --> 00:00:57.430
And actually that arrived a few
days ago actually last week,

13
00:00:57.430 --> 00:00:59.111
I think with version 1.6.

14
00:00:59.111 --> 00:01:04.050
Now unfortunately,
it doesn't work for our project.

15
00:01:04.050 --> 00:01:05.390
And I'll show you why.

16
00:01:05.390 --> 00:01:08.893
Actually let me back up and
talk about the other option.

17
00:01:08.893 --> 00:01:11.440
Deno has this built in bundle.

18
00:01:11.440 --> 00:01:13.790
So what we can do is we can run.

19
00:01:13.790 --> 00:01:15.430
Deno bundle.

20
00:01:16.620 --> 00:01:20.590
We have to pass unstable,
because it's unstable, and

21
00:01:20.590 --> 00:01:24.460
we can create a bundle for
our app.ts file.

22
00:01:24.460 --> 00:01:28.322
And what it's going to do is it's going to
run through and take all of our code and

23
00:01:28.322 --> 00:01:32.030
bundle it into a single JavaScript
file called bundle.js, which is here.

24
00:01:33.180 --> 00:01:36.078
Now the problem is like we
could scroll through this and

25
00:01:36.078 --> 00:01:38.040
you'll see here's all of our code.

26
00:01:38.040 --> 00:01:41.580
This includes Oak and
includes all of our dependencies.

27
00:01:41.580 --> 00:01:43.710
But the problem is that and
it's a long file.

28
00:01:44.950 --> 00:01:48.432
At the time that I made this project and
recorded this,

29
00:01:48.432 --> 00:01:51.010
there seems to be a bit of a problem with.

30
00:01:53.700 --> 00:01:58.325
There seems to be a bit of a problem with
the way that Denos bundler works, so

31
00:01:58.325 --> 00:02:00.098
we actually try to run this.

32
00:02:00.098 --> 00:02:07.170
We just say deno run bundle.js,
I think that's all we have to do.

33
00:02:08.690 --> 00:02:12.850
We get this error, which says there's
no middleware to process requests.

34
00:02:12.850 --> 00:02:17.410
And that's, because the code
is out of order in the bundle.

35
00:02:17.410 --> 00:02:21.880
And so I opened an issue on
the Deno repo about this.

36
00:02:21.880 --> 00:02:25.200
And it's just an issue
they're gonna have to fix it.

37
00:02:25.200 --> 00:02:27.690
But right now code is being
bundled out of order.

38
00:02:27.690 --> 00:02:31.229
And because of that, the compiler
is also going to throw an error,

39
00:02:31.229 --> 00:02:34.300
because it's going to
bundle out of order too.

40
00:02:34.300 --> 00:02:38.300
So to actually see this work,
what I want to do is just revert

41
00:02:38.300 --> 00:02:42.309
back to something that's kind
of a little bit more simple.

42
00:02:42.309 --> 00:02:46.717
So let's go back to our let's do
what was like a simple oak server,

43
00:02:46.717 --> 00:02:50.160
because that should work
to get to the very bottom.

44
00:02:50.160 --> 00:02:54.790
Yep, here we go.

45
00:02:54.790 --> 00:02:56.890
And let's just kick out all the changes.

46
00:02:56.890 --> 00:02:59.392
Yeah, it's fun.

47
00:02:59.392 --> 00:03:02.874
Should be left with just
the essential stuff.

48
00:03:02.874 --> 00:03:07.560
Are app.ts,
let's go to solution should be done.

49
00:03:07.560 --> 00:03:08.850
There we go.

50
00:03:08.850 --> 00:03:13.234
Alright, so,
because this is one single file, right?

51
00:03:13.234 --> 00:03:17.947
This was our very simple Oak application
we should be able to bundle this.

52
00:03:17.947 --> 00:03:20.550
All right, so let's just bundle this and
see what happens.

53
00:03:22.270 --> 00:03:26.560
So I'm going to go to solution here.

54
00:03:26.560 --> 00:03:30.100
And then let's just do Deno bundle again.

55
00:03:30.100 --> 00:03:31.680
And we're just going to create a bundle.

56
00:03:32.960 --> 00:03:35.050
And that should show up
in our solution folder.

57
00:03:36.630 --> 00:03:41.368
There it is, and
now we should be able to run

58
00:03:41.368 --> 00:03:46.770
this deno run -A bundle.js, and it works.

59
00:03:46.770 --> 00:03:50.393
Okay, so we have a single JavaScript
file that we could deploy, and

60
00:03:50.393 --> 00:03:51.420
this should work.

61
00:03:52.830 --> 00:03:53.870
Theoretically it would work.

62
00:03:53.870 --> 00:03:59.679
It does work okay, now, I mean, this is
just remarkable stuff, but check this out.

63
00:04:01.500 --> 00:04:02.550
Watch this.

64
00:04:02.550 --> 00:04:03.390
We can do this.

65
00:04:05.100 --> 00:04:08.356
We can do Deno,

66
00:04:08.356 --> 00:04:14.380
compile unstable app.ts.

67
00:04:14.380 --> 00:04:20.050
And now we have this file here called
app and we can run it like this.

68
00:04:22.040 --> 00:04:23.510
Okay?

69
00:04:23.510 --> 00:04:26.584
Now what's really interesting about
that is that I never use Deno.

70
00:04:26.584 --> 00:04:28.060
Where's Dino?

71
00:04:28.060 --> 00:04:28.800
It's in.

72
00:04:28.800 --> 00:04:32.357
That's a compiled executable and
Deno is in that executable,

73
00:04:32.357 --> 00:04:36.852
which means that all we would have to do
to make this thing work is actually deploy

74
00:04:36.852 --> 00:04:39.420
this executable, it includes the runtime.

75
00:04:39.420 --> 00:04:44.245
It includes everything, which is kind of
what the dream of Deno has been about,

76
00:04:44.245 --> 00:04:48.510
since the beginning,
which I find completely fascinating.

77
00:04:48.510 --> 00:04:51.204
Now what's even more
interesting here is that,

78
00:04:51.204 --> 00:04:53.509
let me I'm going to open this in Windows.

79
00:04:55.020 --> 00:04:57.970
So lets here,
can I reopen folder in Windows.

80
00:05:00.020 --> 00:05:04.680
These composite compiled
files are not cross platform.

81
00:05:04.680 --> 00:05:06.800
So we try to run this from PowerShell.

82
00:05:07.820 --> 00:05:09.670
So let's go to the solution folder.

83
00:05:10.820 --> 00:05:15.570
If we try to run this,
it doesn't know what to do.

84
00:05:15.570 --> 00:05:17.030
It's like I don't know what that is.

85
00:05:17.030 --> 00:05:21.501
But if we were to run
the compilation step here.

86
00:05:23.133 --> 00:05:26.251
I have to provide the unstable flag.

87
00:05:26.251 --> 00:05:30.110
All right?

88
00:05:30.110 --> 00:05:36.110
Now we've compiled on Windows and
now, it works.

89
00:05:37.590 --> 00:05:38.190
Right?

90
00:05:38.190 --> 00:05:41.914
So we can compile for Linux or
we can compile for Windows and

91
00:05:41.914 --> 00:05:46.717
get a single executable out the end
that will allow us to deploy our server.

92
00:05:46.717 --> 00:05:48.494
Because we can't bundle and

93
00:05:48.494 --> 00:05:53.500
we can't compile our project and
I want to show you what it looks like to.

94
00:05:53.500 --> 00:05:56.780
Deploy a full on project
like we've been building.

95
00:05:56.780 --> 00:06:00.550
We're not going to use the bundle or
compilation steps to do that.

96
00:06:00.550 --> 00:06:02.320
But I did wanna show you
that it was possible.

97
00:06:02.320 --> 00:06:08.470
So let's go back to, Open,
we reopen this into WSL.

98
00:06:09.670 --> 00:06:14.519
And I wanna go back to our Oak
application that we were working on,

99
00:06:14.519 --> 00:06:16.910
which is our Oak simple server.

100
00:06:18.790 --> 00:06:20.980
Is it still there?,
I feel like I kicked out a bunch of files.

101
00:06:20.980 --> 00:06:22.430
Yeah, I did.
I kicked out too much stuff.

102
00:06:22.430 --> 00:06:25.740
So let's go over to
deploying the application.

