WEBVTT

1
00:00:00.140 --> 00:00:01.874
All right?
So that's how local dependencies

2
00:00:01.874 --> 00:00:03.080
are handled.

3
00:00:03.080 --> 00:00:06.480
But remote dependencies are handled
a little bit differently.

4
00:00:07.680 --> 00:00:12.123
So, remote dependencies are what we would
today called a call npm packages and

5
00:00:12.123 --> 00:00:15.670
these are the things that
you would install from npm.

6
00:00:15.670 --> 00:00:18.970
It's code that you consume
that someone else's written.

7
00:00:18.970 --> 00:00:22.840
Deno has a list of approved
third party modules.

8
00:00:22.840 --> 00:00:27.766
So, It's sort of starting to
create its own centralized

9
00:00:27.766 --> 00:00:32.720
set of libraries here,
kind of like npm all over again.

10
00:00:32.720 --> 00:00:36.320
But you can see something
like lodash is in here.

11
00:00:36.320 --> 00:00:38.870
Let's see which one do we wanna use up?

12
00:00:38.870 --> 00:00:40.470
So there's a path module.

13
00:00:40.470 --> 00:00:41.299
So let's look at that.

14
00:00:43.600 --> 00:00:48.598
In Node if we wanted to get the path for
something, so

15
00:00:48.598 --> 00:00:52.580
let's say we have, let's just do this.

16
00:00:53.690 --> 00:00:55.410
Actually, we can just do
it in our app file here.

17
00:00:56.750 --> 00:00:58.810
So let's close this out.

18
00:00:58.810 --> 00:01:01.620
We don't want to reverse
the string anymore.

19
00:01:03.260 --> 00:01:08.930
In Node we can do const
path = require path.

20
00:01:08.930 --> 00:01:17.020
And then you can do something like
this console.log(path.basename.

21
00:01:17.020 --> 00:01:22.984
And then if you did in a folder/
folder/ folder/ file.txt.

22
00:01:22.984 --> 00:01:27.076
What this returns is, if you ran this,

23
00:01:27.076 --> 00:01:31.040
what it would return is file.txt.

24
00:01:31.040 --> 00:01:33.660
That's the base name.

25
00:01:33.660 --> 00:01:38.190
So Deno doesn't have a path and so
we have to import a dependency to do that.

26
00:01:38.190 --> 00:01:41.380
And so we're gonna import Deno standard
library to actually see how Deno

27
00:01:41.380 --> 00:01:42.790
does this.

28
00:01:42.790 --> 00:01:45.830
So Deno's standard library is here.

29
00:01:46.920 --> 00:01:48.380
Let's go back to Third Party Modules.

30
00:01:50.280 --> 00:01:52.840
So if we go to Standard Library.

31
00:01:54.080 --> 00:01:55.790
So this is the standard library here.

32
00:01:55.790 --> 00:01:58.100
You can see all of the things
that are in its standard library.

33
00:01:58.100 --> 00:02:01.340
Like datetime, and the fs module.

34
00:02:01.340 --> 00:02:03.880
All the stuff that you would
normally see with Node.

35
00:02:03.880 --> 00:02:07.040
It mimics the node API really,
really well.

36
00:02:07.040 --> 00:02:10.370
So let's look at how we would do that.

37
00:02:10.370 --> 00:02:13.480
What we need to do is import it by URL.

38
00:02:13.480 --> 00:02:15.140
So we're gonna do that here.

39
00:02:15.140 --> 00:02:18.037
So let's just grab this,
and then go back and

40
00:02:18.037 --> 00:02:20.630
see what happens when we try to do this.

41
00:02:20.630 --> 00:02:25.040
So we're just gonna
import this thing by URL.

42
00:02:25.040 --> 00:02:28.274
And you can see that Visual Studio code
is actually fine with this because

43
00:02:28.274 --> 00:02:29.970
I've imported this before.

44
00:02:29.970 --> 00:02:34.019
If you don't wanna specify the version
of the file, you can take this out and

45
00:02:34.019 --> 00:02:37.890
it will just give you the latest version,
which I've already got here.

46
00:02:39.770 --> 00:02:43.418
And if we were to click on this,
it would take us to the actual file

47
00:02:43.418 --> 00:02:46.269
on my local machine where
this is already cached.

48
00:02:47.750 --> 00:02:50.120
But now that we've got this
we can do path.basename.

49
00:02:50.120 --> 00:02:51.450
So let's run this again.

50
00:02:51.450 --> 00:02:55.966
So let's do deno run

51
00:02:55.966 --> 00:03:01.279
app.ts, can't you,

52
00:03:01.279 --> 00:03:06.082
exercise app.ts?

53
00:03:06.082 --> 00:03:09.500
You know what I did,
we're in the cache directory again.

54
00:03:09.500 --> 00:03:11.610
So let's swap out of that.

55
00:03:11.610 --> 00:03:14.540
And in fact, just for fun, let's do this.

56
00:03:14.540 --> 00:03:16.250
Let's clear the cache.

57
00:03:16.250 --> 00:03:18.730
So let's clear let's go to deps.

58
00:03:18.730 --> 00:03:22.973
rm -rf https.

59
00:03:22.973 --> 00:03:25.050
Cool.

60
00:03:25.050 --> 00:03:25.810
That's gone.

61
00:03:25.810 --> 00:03:28.180
So now let's reload the Window.

62
00:03:28.180 --> 00:03:33.048
Cuz I wanna show you what Deno does
here when it doesn't recognize

63
00:03:33.048 --> 00:03:34.651
your dependencies.

64
00:03:37.967 --> 00:03:40.212
So it should,yeah so
see it's got a squiggly and

65
00:03:40.212 --> 00:03:42.380
it's like I don't know what this is.

66
00:03:42.380 --> 00:03:47.128
Could not find module this mod.ts locally,
by the way, this mod,

67
00:03:47.128 --> 00:03:53.080
you're gonna see this a lot in Deno this
is just a standard short for module.

68
00:03:53.080 --> 00:03:54.220
That's all it is.

69
00:03:54.220 --> 00:03:56.190
But it threw me off when I first saw it.

70
00:03:56.190 --> 00:03:58.896
Okay, so
if we do control period here in VS code,

71
00:03:58.896 --> 00:04:02.526
it says do you want me to fetch
the module we're gonna say yeah, so

72
00:04:02.526 --> 00:04:07.120
it's going to fetch it and bring it
down and stick it in that cache folder.

73
00:04:07.120 --> 00:04:08.800
Then now we can use it, right?

74
00:04:08.800 --> 00:04:10.053
And so we have if we do path,

75
00:04:10.053 --> 00:04:13.380
then we have all of the different
things that are on this.

76
00:04:13.380 --> 00:04:14.540
And so we can run this.

77
00:04:16.450 --> 00:04:17.050
Let's run it.

78
00:04:19.810 --> 00:04:20.660
Nope.

79
00:04:20.660 --> 00:04:24.287
Again, in the cache directory.

80
00:04:24.287 --> 00:04:26.581
Try that again.

81
00:04:26.581 --> 00:04:27.340
Exercise.

82
00:04:27.340 --> 00:04:30.889
Let's run this and it'll give us.

83
00:04:32.130 --> 00:04:33.560
Hopefully, yeah, file.txt.

84
00:04:34.740 --> 00:04:39.171
And so this is how dependencies
are included in Deno

85
00:04:39.171 --> 00:04:44.116
projects is by this URL and
then it gets copied down to your

86
00:04:44.116 --> 00:04:49.440
cache directory and
then it just kind of hangs out there.

87
00:04:49.440 --> 00:04:54.039
And then unless you actually change
the version or import it again,

88
00:04:54.039 --> 00:04:59.250
it forced the cache to update and
it doesn't actually change.

89
00:04:59.250 --> 00:05:03.414
But we know that Deno doesn't actually
download dependencies every single time we

90
00:05:03.414 --> 00:05:04.310
run the program.

91
00:05:04.310 --> 00:05:06.180
It just does it the first time.

92
00:05:06.180 --> 00:05:09.820
And then it downloads it to that
depth cache and then it stays there.

93
00:05:11.060 --> 00:05:17.780
If we were to take a look like let's say,
let's do I don't know.

94
00:05:19.000 --> 00:05:22.430
Let's see, I'm trying to figure out,
what did I have you do in the exercise?

95
00:05:24.740 --> 00:05:30.469
We're looking at, Yeah, if we were to

96
00:05:30.469 --> 00:05:35.230
use something like the https server, that
would Wind up in a different folder here.

97
00:05:36.610 --> 00:05:41.312
And there are a lot of different files
that we could get inside of that folder

98
00:05:41.312 --> 00:05:44.740
as it grows, we have more and
more dependencies.

99
00:05:44.740 --> 00:05:49.631
We can get actually more info
about like the dependencies that

100
00:05:49.631 --> 00:05:52.180
this specific path module has.

101
00:05:52.180 --> 00:05:54.730
If we just run deno info.

102
00:05:54.730 --> 00:05:59.360
Now we could run deno info
on this file here directly.

103
00:05:59.360 --> 00:06:01.330
We could actually do this.

104
00:06:01.330 --> 00:06:03.690
We wanted to know some more about it.

105
00:06:03.690 --> 00:06:08.180
I think we can just do,
no, let me do deno info.

106
00:06:08.180 --> 00:06:09.400
Just paste this in.

107
00:06:09.400 --> 00:06:11.400
Yeah.
And then we get a dependency graph that

108
00:06:11.400 --> 00:06:13.250
shows us all of the different things.

109
00:06:13.250 --> 00:06:15.665
So when we use path and we're in path, and

110
00:06:15.665 --> 00:06:20.520
it's gonna bring in all this stuff
as well, path depends on util.

111
00:06:20.520 --> 00:06:24.554
It depends on common which depends on
separator, which depends on OS, and so

112
00:06:24.554 --> 00:06:26.040
on and so forth.

113
00:06:26.040 --> 00:06:29.450
And so this is how you can examine
the dependencies that you've got.

114
00:06:29.450 --> 00:06:31.333
And if we were to go to
that deno cache folder,

115
00:06:31.333 --> 00:06:33.529
you would see all of these
different files in there.

116
00:06:36.080 --> 00:06:40.657
Now, I wanna take a moment and address
sort of the elephant in the room or

117
00:06:40.657 --> 00:06:42.946
what I frequently hear people say,

118
00:06:42.946 --> 00:06:47.706
which is that importing from URLs
feels like completely nuts and insane.

119
00:06:47.706 --> 00:06:51.482
And I wanna validate that but say that
we've already established the Deno wants

120
00:06:51.482 --> 00:06:54.510
to stay as close to browser
conventions as possible.

121
00:06:54.510 --> 00:06:55.428
And in that case,

122
00:06:55.428 --> 00:06:59.660
importing from a URL should feel less
achy because that's just how we do it.

123
00:06:59.660 --> 00:07:01.630
But it isn't very pleasant to look at,
right?

124
00:07:01.630 --> 00:07:02.520
Let's just be honest.

125
00:07:02.520 --> 00:07:07.530
Okay, seeing this in code
just doesn't feel great.

126
00:07:07.530 --> 00:07:09.240
Having a URL here.

127
00:07:09.240 --> 00:07:12.004
I mean, really, we're gonna write code and

128
00:07:12.004 --> 00:07:15.450
have URLs just hanging out
all over in our imports.

129
00:07:15.450 --> 00:07:17.730
That doesn't sound great.

130
00:07:17.730 --> 00:07:22.914
So what Deno recommends that
you do is they recommend that

131
00:07:22.914 --> 00:07:28.990
you create a file inside of your
project that you call depths.ts.

132
00:07:28.990 --> 00:07:31.030
So let's do that depths.ts.

133
00:07:31.030 --> 00:07:33.060
So again,
this is just a convention, right.

134
00:07:33.060 --> 00:07:34.600
This is nothing special.

135
00:07:34.600 --> 00:07:37.570
And then you would take all
of your URL imports here.

136
00:07:37.570 --> 00:07:42.313
And you would stick them inside of this
and then you would export from this

137
00:07:42.313 --> 00:07:46.990
file what you needed so export,
here we're just going to export path.

138
00:07:48.960 --> 00:07:54.909
And then in our app.ts file
instead of importing path,

139
00:07:54.909 --> 00:07:59.360
we would do import path from depths.ts.

140
00:07:59.360 --> 00:08:03.793
And so all of the URL weirdness is sort
of hidden away in this depths file and it

141
00:08:03.793 --> 00:08:08.870
doesn't leak all over into your projects
because I don't think you would want that.

142
00:08:08.870 --> 00:08:12.010
And we'll see later on,
we're gonna use a lot more dependencies.

143
00:08:12.010 --> 00:08:13.880
You'll see how this it
makes it look cleaner.

