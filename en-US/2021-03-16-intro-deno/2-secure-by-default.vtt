WEBVTT

1
00:00:00.015 --> 00:00:04.670
So what I wanna do now is I want to
cover some of the things that Ryan

2
00:00:04.670 --> 00:00:09.587
talked about in this video that
inform the way that DENO is different

3
00:00:09.587 --> 00:00:11.847
from what you might be used to.

4
00:00:11.847 --> 00:00:17.309
So the first concept that
is really key to DENO

5
00:00:17.309 --> 00:00:22.212
is this idea of being secure by default.

6
00:00:22.212 --> 00:00:26.731
When I hear things like this,
to be honest with you,

7
00:00:26.731 --> 00:00:30.633
it comes off to me as paranoid,
and frankly,

8
00:00:30.633 --> 00:00:35.174
not a great reason to write
an entirely new runtime.

9
00:00:35.174 --> 00:00:36.812
But I would agree in so

10
00:00:36.812 --> 00:00:41.548
much as saying that Node is not
a secure runtime environment.

11
00:00:41.548 --> 00:00:45.415
But I would say that neither
are a lot of runtime environments.

12
00:00:45.415 --> 00:00:47.773
I don't believe that C sharp or
Java are secure either.

13
00:00:47.773 --> 00:00:51.632
And what I mean by that is that when
you're running these things on your local

14
00:00:51.632 --> 00:00:54.061
machine, they have all
the rights that you do.

15
00:00:54.061 --> 00:00:56.248
They have all the access that you do.

16
00:00:56.248 --> 00:00:59.387
If you have write access to a file,
so does Node.

17
00:00:59.387 --> 00:01:04.193
And most of us as developers, we either
have root access or we have admin access,

18
00:01:04.193 --> 00:01:07.886
it's just kind of something that
we need on our own machines.

19
00:01:07.886 --> 00:01:11.948
And even if we didn't,
it would be fairly easy for

20
00:01:11.948 --> 00:01:17.365
bad NPM packages to do nasty damage
to our machines, or worse yet,

21
00:01:17.365 --> 00:01:23.403
to our production environments,
if we actually deployed those things.

22
00:01:23.403 --> 00:01:25.949
The browser by contrast is not like this.

23
00:01:25.949 --> 00:01:31.867
The browser is a secure sandbox, your
machine is protected from the browser.

24
00:01:31.867 --> 00:01:34.333
It cannot do anything to your machine
without your permission to do that,

25
00:01:34.333 --> 00:01:35.980
it needs permission to
access your microphone.

26
00:01:35.980 --> 00:01:39.690
It needs permission to access your camera.

27
00:01:39.690 --> 00:01:42.774
It needs permission to do
access to file system,

28
00:01:42.774 --> 00:01:46.324
which is supported somewhat
in Chrome not everywhere.

29
00:01:46.324 --> 00:01:49.314
Your phone is like this as well,
if you think about it,

30
00:01:49.314 --> 00:01:52.441
when you install a new app on your phone,
what does it do?

31
00:01:52.441 --> 00:01:55.758
It asks you what for
access to your photos,

32
00:01:55.758 --> 00:02:00.744
access to your contacts,
access to to send you notifications.

33
00:02:00.744 --> 00:02:04.214
These environments are secure by default,
and

34
00:02:04.214 --> 00:02:08.559
you have to opt out of the security
in order for them to work.

35
00:02:08.559 --> 00:02:11.807
But let's look at how this
actually plays out in Node.

36
00:02:11.807 --> 00:02:15.996
So in Node here, I've got this block of
code that I wrote that's not terribly

37
00:02:15.996 --> 00:02:19.355
concise, but we'll talk about
what it does here in a second.

38
00:02:19.355 --> 00:02:21.927
But Node has an FS module in it.

39
00:02:21.927 --> 00:02:27.105
So I'm gonna switch over here
to our secure-by-default branch.

40
00:02:27.105 --> 00:02:32.323
And this module allows you to
interact with the file system.

41
00:02:32.323 --> 00:02:38.472
And so what this code is doing here,
we'll just sort of walk through it.

42
00:02:38.472 --> 00:02:42.521
Is first thing it does is
it runs this findEnvFiles,

43
00:02:42.521 --> 00:02:47.124
which basically goes through
recursively and searches for

44
00:02:47.124 --> 00:02:51.555
any file on your machine that
has a .env extension in it.

45
00:02:51.555 --> 00:02:55.493
And if you've worked with projects before,
you know that a lot of times we put secret

46
00:02:55.493 --> 00:02:58.838
keys in .env files and then we don't
check those into source control.

47
00:02:58.838 --> 00:03:01.273
They're only meant to be used locally.

48
00:03:01.273 --> 00:03:04.773
And then what it does is it just
goes over each of those and

49
00:03:04.773 --> 00:03:06.490
logs it out to the console.

50
00:03:06.490 --> 00:03:10.736
So if we were to run this,
I'm just gonna run this and say, node.

51
00:03:10.736 --> 00:03:13.714
Let me make sure I'm in
the right directory, I'm not.

52
00:03:13.714 --> 00:03:15.241
So let's do.

53
00:03:16.623 --> 00:03:22.322
Actually, I'm still in
my remote container.

54
00:03:22.322 --> 00:03:27.633
Let me be bounce back over
to want to run it locally.

55
00:03:32.232 --> 00:03:34.516
[SOUND] There we go.

56
00:03:34.516 --> 00:03:36.327
So now I'm just back on my local machine.

57
00:03:36.327 --> 00:03:40.780
And you'll notice that I'm using
something called the WSL here on Windows,

58
00:03:40.780 --> 00:03:44.015
which is why I have what looks
like a Linux command line.

59
00:03:44.015 --> 00:03:49.047
So let's move into the exercise
directory and let's just run this.

60
00:03:49.047 --> 00:03:54.138
And what will happen is it's going to
search the current directory here.

61
00:03:54.138 --> 00:03:58.425
It's going to look for
any files that have .env extension and

62
00:03:58.425 --> 00:04:02.724
then it's going to shell out
the answer here to the terminal.

63
00:04:02.724 --> 00:04:05.551
So there you can see
some of my private keys.

64
00:04:05.551 --> 00:04:07.431
Okay, so this is a real problem.

65
00:04:07.431 --> 00:04:11.599
Because this code has now access
files that I didn't mean for

66
00:04:11.599 --> 00:04:15.615
it to access, and
it can just read anything on my machine.

67
00:04:15.615 --> 00:04:18.454
There's lots of sensitive
data on my machine.

68
00:04:18.454 --> 00:04:20.425
So this just goes to show
how easy it is to do that.

69
00:04:20.425 --> 00:04:21.416
But this is not a shock.

70
00:04:21.416 --> 00:04:24.049
We know that Node does this.

71
00:04:24.049 --> 00:04:27.341
Why is this a problem?

72
00:04:27.341 --> 00:04:33.665
Even if this code exists,
how do I get you to run it?

73
00:04:33.665 --> 00:04:36.999
You're not going to run this code,
you know better than that.

74
00:04:36.999 --> 00:04:40.404
You're a developer,
you know better than to trust a package or

75
00:04:40.404 --> 00:04:41.954
code that looks nefarious.

76
00:04:41.954 --> 00:04:44.869
So how do I get you to run this?

77
00:04:44.869 --> 00:04:49.716
The open source world is a wonderful
place in which nobody would

78
00:04:49.716 --> 00:04:51.919
ever take advantage of you.

79
00:04:51.919 --> 00:04:57.313
Well, actually, that's mostly true,
that's mostly true.

80
00:04:57.313 --> 00:05:02.843
But there are a small number of people
that would like to exploit that.

81
00:05:02.843 --> 00:05:04.761
And anyone can publish a package to NPM.

82
00:05:04.761 --> 00:05:07.648
There's not a review that happens on NPM.

83
00:05:07.648 --> 00:05:10.930
If you publish a package, it's immediately
available for anybody else to consume.

84
00:05:10.930 --> 00:05:14.589
So we can take that code that I just
wrote and publish as an NPM package.

85
00:05:14.589 --> 00:05:22.341
Anybody who runs it, we could get their
environment variables and copy them.

86
00:05:22.341 --> 00:05:25.377
But again, how do I get you to install and
run this module.

87
00:05:25.377 --> 00:05:30.100
You are not gonna go install and
run this module, so how do I do that?

88
00:05:30.100 --> 00:05:34.812
There is a really good talk
called how to hack a Node app

89
00:05:34.812 --> 00:05:38.390
by a co-worker of mine, Asim Hussain.

90
00:05:38.390 --> 00:05:45.248
Who details the extent to which the Node
ecosystem is routinely used to hack,

91
00:05:45.248 --> 00:05:51.386
hijack, and otherwise exploit people and
execute malicious code.

92
00:05:51.386 --> 00:05:53.433
It happens all the time.

93
00:05:53.433 --> 00:05:58.933
In his talk, he goes over a bunch of
different ways that this happens.

94
00:05:58.933 --> 00:06:01.657
But the most common way
that this happens is so

95
00:06:01.657 --> 00:06:05.465
simple that it's almost just
disappointing how simple it is.

96
00:06:05.465 --> 00:06:10.372
So there's something called typo squatting
and you may have heard of this before.

97
00:06:10.372 --> 00:06:15.222
Typo squatting is when a package
names itself something similar

98
00:06:15.222 --> 00:06:17.115
to a legitimate module.

99
00:06:17.115 --> 00:06:22.632
So in his talk Asim gives this
example of a package called Cross Env.

100
00:06:22.632 --> 00:06:26.316
And Cross Env is used in a lot of places.

101
00:06:26.316 --> 00:06:28.749
It was written by Kent Dodds, I believe.

102
00:06:28.749 --> 00:06:30.951
And it's a phenomenally useful package.

103
00:06:30.951 --> 00:06:35.470
And what it does is it normalizes
the way that we pass in variables,

104
00:06:35.470 --> 00:06:37.731
command line variables to Node so

105
00:06:37.731 --> 00:06:42.922
that NPM start scripts work across
environments, Windows, Mac, Linux.

106
00:06:42.922 --> 00:06:44.942
It's extremely useful.

107
00:06:44.942 --> 00:06:49.577
But someone figured out that
people commonly tried to

108
00:06:49.577 --> 00:06:53.293
install cross-env instead of Cross Env.

109
00:06:53.293 --> 00:06:58.789
And so they created a package called
cross-env and they published it and

110
00:06:58.789 --> 00:07:04.466
sure enough people started using it and
that package reads your Env files,

111
00:07:04.466 --> 00:07:10.342
you know where all your secrets are and
then sends them off to a remote server.

112
00:07:10.342 --> 00:07:14.647
Which is the exact same thing that
the code that I just wrote does.

113
00:07:14.647 --> 00:07:21.033
That's how easy it is to get
people to execute malicious code.

114
00:07:21.033 --> 00:07:22.517
While I was preparing for

115
00:07:22.517 --> 00:07:27.323
this course I just happened to come across
this article from ZDNet, where this is

116
00:07:27.323 --> 00:07:31.863
like three weeks ago where it says three
NPM packages found opening shells.

117
00:07:31.863 --> 00:07:36.263
And then NPM responding and saying,
any computer that has this package

118
00:07:36.263 --> 00:07:40.224
installed or running should be
considered fully compromised,

119
00:07:40.224 --> 00:07:42.880
your entire system is fully compromised.

120
00:07:42.880 --> 00:07:49.530
I mean, that's just heavy and this can
happen to anyone, it can happen to anyone.

121
00:07:49.530 --> 00:07:54.474
And if you read the article, it says
that even if you remove those packages,

122
00:07:54.474 --> 00:07:59.342
that your system is still not safe
because who knows what those packages did

123
00:07:59.342 --> 00:08:03.226
in the background,
who knows what they ran and installed.

124
00:08:03.226 --> 00:08:08.534
So Node when he says that it's not
a safe runtime, it just simply isn't.

125
00:08:08.534 --> 00:08:13.509
It's wide open and
it's based on a wide open package system.

126
00:08:13.509 --> 00:08:17.408
There's sort of a trade off
between convenience and security.

127
00:08:17.408 --> 00:08:22.938
The fact that the package system is wide
open makes it extremely convenient to use,

128
00:08:22.938 --> 00:08:24.996
but it also makes it insecure.

129
00:08:24.996 --> 00:08:27.584
And Node is optimized for convenience.

130
00:08:27.584 --> 00:08:31.450
DENO is optimized for security.

131
00:08:31.450 --> 00:08:36.422
Which means that by default programs
have no access to your file system.

132
00:08:36.422 --> 00:08:38.117
They cannot read any files.

133
00:08:38.117 --> 00:08:40.790
They cannot make any HTTP requests.

134
00:08:40.790 --> 00:08:44.685
They can't even read environment
variables that you pass in.

135
00:08:44.685 --> 00:08:49.539
You have to explicitly grant
DENO access to do those things.

136
00:08:49.539 --> 00:08:53.897
Now, this doesn't make
DENO perfectly safe and

137
00:08:53.897 --> 00:08:57.309
it doesn't make you perfectly safe.

138
00:08:57.309 --> 00:09:00.873
What it does is it puts you
in a position of safety, and

139
00:09:00.873 --> 00:09:05.798
then it asks you to explicitly opt out
of that in order to make things work.

140
00:09:05.798 --> 00:09:08.774
And that's secured by default.

141
00:09:08.774 --> 00:09:12.522
It's just a different way of thinking
about how secure systems should

142
00:09:12.522 --> 00:09:15.010
be built and
what a secure runtime looks like.

