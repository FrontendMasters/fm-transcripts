WEBVTT

1
00:00:01.030 --> 00:00:05.020
All right, let's talk about
dependencies for a second.

2
00:00:05.020 --> 00:00:07.840
Deno handles dependencies in
an entirely different way.

3
00:00:07.840 --> 00:00:12.719
It doesn't have a concept of NPM and NPM
modules and the way that we've installed

4
00:00:12.719 --> 00:00:16.610
things in the past, and
you'll see that as we go forward today.

5
00:00:16.610 --> 00:00:21.303
Dependencies have been a long
point of controversy, for

6
00:00:21.303 --> 00:00:23.464
as long as I can remember.

7
00:00:23.464 --> 00:00:25.561
I'm sure since computers have existed.

8
00:00:25.561 --> 00:00:29.258
And this is true across all languages,
all platforms, all runtimes,

9
00:00:29.258 --> 00:00:32.831
it doesn't matter if it's NPM,
it doesn't matter if it's Maven,

10
00:00:32.831 --> 00:00:37.670
it doesn't matter if it's Newgen,
everywhere dependencies are just hard.

11
00:00:37.670 --> 00:00:40.850
This is one of the hardest problems
that people have to solve.

12
00:00:40.850 --> 00:00:44.456
And the reason for this is that
dependencies almost always take other

13
00:00:44.456 --> 00:00:48.160
dependencies, then those
dependencies have dependencies.

14
00:00:48.160 --> 00:00:52.649
And so what you end up with is this giant,
exploded dependency tree where

15
00:00:52.649 --> 00:00:57.378
you have to take a million dependencies
to do something very, very simple.

16
00:00:57.378 --> 00:01:01.800
And all of those dependencies could
have bugs or security flaws, right?

17
00:01:01.800 --> 00:01:06.026
How do you know that the cross-env package
isn't used by a dependency somewhere down

18
00:01:06.026 --> 00:01:08.150
the line that you don't even know about?

19
00:01:08.150 --> 00:01:10.300
You don't, there's no way for
you to know that.

20
00:01:11.670 --> 00:01:15.500
So the dependencies manager's job,
by dependency manager,

21
00:01:15.500 --> 00:01:18.960
like NPM is to keep track of dependencies.

22
00:01:18.960 --> 00:01:24.140
And to make sure that if the chain gets
updated, your whole project doesn't break.

23
00:01:24.140 --> 00:01:27.730
You may have seen a file in Node
called the Package lock file.

24
00:01:27.730 --> 00:01:31.791
And that's what the Package lock file is
attempting to do, is to allow you to lock

25
00:01:31.791 --> 00:01:36.094
your dependencies down so that if someone
updates a dependency somewhere it doesn't

26
00:01:36.094 --> 00:01:39.762
break the project when someone else
tries to run it or when you deploy it.

27
00:01:39.762 --> 00:01:44.287
So what's wrong with the way
Node handles dependencies today?

28
00:01:44.287 --> 00:01:45.656
What's wrong with NPM?

29
00:01:45.656 --> 00:01:47.940
And how can that be different?

30
00:01:47.940 --> 00:01:49.570
Well, there's a couple
of different things.

31
00:01:49.570 --> 00:01:56.245
One of them is that NPM is the central
package repository for Node.

32
00:01:56.245 --> 00:01:59.805
Yes, technically anyone can
set up a package repository.

33
00:01:59.805 --> 00:02:04.738
Many people have private ones for
enterprises, secure ones,

34
00:02:04.738 --> 00:02:09.682
but by and large it is the place for
you where you find a package.

35
00:02:09.682 --> 00:02:11.927
Is that a bad thing?

36
00:02:11.927 --> 00:02:14.873
Maybe, maybe not.

37
00:02:14.873 --> 00:02:19.614
You may recall last year there were
some escalating issues with NPM as it

38
00:02:19.614 --> 00:02:22.946
tried to generate enough
revenue to stay afloat.

39
00:02:22.946 --> 00:02:26.915
Serving up packages to every JavaScript
developer but which by the way,

40
00:02:26.915 --> 00:02:31.840
is the most popular programming
language according to multiple surveys.

41
00:02:31.840 --> 00:02:35.810
Serving a package to everybody in
the world is an expensive operation.

42
00:02:37.450 --> 00:02:39.963
People talk about a lot
about cloud computing, but

43
00:02:39.963 --> 00:02:43.544
what most people don't know about
cloud computing is the highest cost.

44
00:02:43.544 --> 00:02:45.951
In cloud computing is bandwidth.

45
00:02:45.951 --> 00:02:49.795
And bandwidth is how much
you move out of the cloud.

46
00:02:49.795 --> 00:02:53.055
So if you put data in the cloud and
you pull it out, you have to pay for that.

47
00:02:53.055 --> 00:02:56.745
And NPM is basically covering
these massive bandwidth bills.

48
00:02:56.745 --> 00:02:58.319
And that money has got
to come from somewhere.

49
00:02:59.960 --> 00:03:01.950
And they almost didn't make it.

50
00:03:01.950 --> 00:03:04.866
But GitHub stepped in and
purchased NPM earlier this year,

51
00:03:04.866 --> 00:03:08.891
possibly preventing what could have been
the collapse of essentially where all of

52
00:03:08.891 --> 00:03:10.240
our Node packages live.

53
00:03:10.240 --> 00:03:14.680
Which is kind of a terrifying idea,
it's a single point of failure.

54
00:03:14.680 --> 00:03:16.546
Again, is that a bad thing?

55
00:03:16.546 --> 00:03:19.319
I don't know, maybe, maybe not.

56
00:03:19.319 --> 00:03:21.030
It's a philosophical question.

57
00:03:21.030 --> 00:03:25.270
It's incredibly convenient to
have a central place to look for

58
00:03:25.270 --> 00:03:31.410
any code that you might need rather than
having it strewn all over the Internet.

59
00:03:31.410 --> 00:03:35.834
But it's also probably
that single point is why

60
00:03:35.834 --> 00:03:39.810
the adaption of Node has been so quick.

61
00:03:39.810 --> 00:03:41.700
Because it's so
easy to find what you need.

62
00:03:41.700 --> 00:03:46.065
But for that convenience, the trade
off is a single point of failure and

63
00:03:46.065 --> 00:03:51.120
one repository that's now owned by
a single corporation, Microsoft.

64
00:03:51.120 --> 00:03:55.140
Some people may not feel good about that.

65
00:03:55.140 --> 00:03:56.120
And some people are fine with it.

66
00:03:57.550 --> 00:04:06.140
The other thing that he talks about in his
video is he laments the package.json file.

67
00:04:08.110 --> 00:04:13.110
So, this is one of the things that
I found to be a bit of a nitpick.

68
00:04:13.110 --> 00:04:17.026
But, Ryan's problem with
the package.json file is that he

69
00:04:17.026 --> 00:04:21.732
feels like that there's a lot of
boilerplate in it and that it's bloat.

70
00:04:21.732 --> 00:04:23.936
Like it has no point, and for what?

71
00:04:23.936 --> 00:04:25.376
And I kind of agree with this.

72
00:04:25.376 --> 00:04:27.523
So, let's do this.

73
00:04:27.523 --> 00:04:31.825
Let's look at

74
00:04:31.825 --> 00:04:36.485
the dependency

75
00:04:36.485 --> 00:04:41.145
hell branch and

76
00:04:41.145 --> 00:04:46.167
let's do this.

77
00:04:46.167 --> 00:04:53.079
Let's just initialize this project for
Node or for NPM, rather.

78
00:04:53.079 --> 00:04:55.513
So I'm just gonna do NPM init.

79
00:04:55.513 --> 00:04:59.088
And when I do that,
it just starts asking me questions.

80
00:04:59.088 --> 00:05:00.741
So it's like, what's the name?

81
00:05:00.741 --> 00:05:02.618
It's deno-exercise.

82
00:05:02.618 --> 00:05:03.795
What's the version?

83
00:05:03.795 --> 00:05:04.760
I don't even know yet.

84
00:05:04.760 --> 00:05:07.903
I'm just trying to get started,
I don't know, 0.0.1.

85
00:05:07.903 --> 00:05:11.937
The description,
exercises for deno, right?

86
00:05:11.937 --> 00:05:14.708
And then it just keeps going on,
and on, and on.

87
00:05:14.708 --> 00:05:16.505
You're like,
I don't know what any of this stuff is.

88
00:05:16.505 --> 00:05:18.310
Why do I need keywords?

89
00:05:18.310 --> 00:05:19.260
Does this really matter?

90
00:05:19.260 --> 00:05:20.190
What's the licence?

91
00:05:20.190 --> 00:05:22.890
I don't even understand this and
then you're like yes.

92
00:05:22.890 --> 00:05:25.509
And if you have a package that json fil.

93
00:05:25.509 --> 00:05:28.110
And we've all just kind of
gotten used to doing this.

94
00:05:28.110 --> 00:05:29.500
Like we don't even really think about it.

95
00:05:29.500 --> 00:05:32.310
We just accept that this is the case.

96
00:05:32.310 --> 00:05:34.420
But do we really need all this?

97
00:05:35.420 --> 00:05:37.019
Now sometimes we do.

98
00:05:37.019 --> 00:05:42.388
Things like VS Code is taken to
using some of these properties.

99
00:05:42.388 --> 00:05:46.451
So that if you publish a VS Code
extension, it looks at the version and

100
00:05:46.451 --> 00:05:51.215
the description some of these things to
determine metadata about your published

101
00:05:51.215 --> 00:05:51.999
extension.

102
00:05:51.999 --> 00:05:56.203
But for the most part, this is
boilerplate stuff that we don't want.

103
00:05:56.203 --> 00:06:00.440
Now, I should point out that you can,
if you didn't know this,

104
00:06:00.440 --> 00:06:04.870
what you can do instead,
this is for free, you can just do.

105
00:06:04.870 --> 00:06:07.156
So you can do npm init-y.

106
00:06:07.156 --> 00:06:09.870
And that will just give
you all the defaults and

107
00:06:09.870 --> 00:06:14.618
create the package.json file for you and
fill it all in based on what it can tell.

108
00:06:14.618 --> 00:06:19.407
But this is his primary hang up with this
package.json files that he feels like it's

109
00:06:19.407 --> 00:06:22.713
just gotten out of hand and
that it's mostly extraneous,

110
00:06:22.713 --> 00:06:24.340
unnecessary information.

111
00:06:27.990 --> 00:06:32.690
The other problem is that
the package.json file configures to

112
00:06:32.690 --> 00:06:37.970
what we would call the bloat of
configuration files in repos.

113
00:06:37.970 --> 00:06:43.933
And this is become a real topic of
controversy in the JavaScript community,

114
00:06:43.933 --> 00:06:48.960
the project that contain this
course is a Gatsby project.

115
00:06:48.960 --> 00:06:53.812
And look at all of the config files that
are in the root directory of this thing.

116
00:06:53.812 --> 00:06:57.802
There's a package, and a package lock,
and a Gatsby config, and a prettier, and

117
00:06:57.802 --> 00:06:58.486
a gitignore.

118
00:06:58.486 --> 00:07:03.248
And it's just the explosion of config
files, it's just becoming a real problem.

119
00:07:03.248 --> 00:07:07.460
It's common to have dozens of
them in your root directory.

120
00:07:07.460 --> 00:07:13.660
And so the package.json is
just another one of those.

121
00:07:13.660 --> 00:07:17.197
The other thing that he talks
about is the Node modules folder.

122
00:07:17.197 --> 00:07:21.743
And the Node modules folder
has become notorious for

123
00:07:21.743 --> 00:07:24.746
just being exceptionally large.

124
00:07:24.746 --> 00:07:28.634
You have no idea how many dependencies
you're getting self into and

125
00:07:28.634 --> 00:07:32.190
often the folder just balloons
into a laughable size.

126
00:07:32.190 --> 00:07:35.090
So let me show you how this happens.

127
00:07:35.090 --> 00:07:39.568
So some packages,
let's install something very common.

128
00:07:39.568 --> 00:07:42.573
So, let's install Axios.

129
00:07:42.573 --> 00:07:46.995
By the way, I didn't know until like three
years ago that you don't have to type

130
00:07:46.995 --> 00:07:48.983
install, you can just type dash I.

131
00:07:48.983 --> 00:07:52.380
See what I mean about not knowing things,
that's me, the other guy.

132
00:07:52.380 --> 00:07:55.797
I don't know that you can
do just dash just I there.

133
00:07:55.797 --> 00:07:57.491
And this one install Axios.

134
00:07:57.491 --> 00:07:59.400
So let's take a look.

135
00:07:59.400 --> 00:08:00.670
So what did we get when we did that?

136
00:08:00.670 --> 00:08:02.074
We got Axios, okay?

137
00:08:02.074 --> 00:08:05.380
Which we asked for but
then we also got follow redirects.

138
00:08:05.380 --> 00:08:07.561
Now I have no idea why Axios needs that.

139
00:08:07.561 --> 00:08:09.430
I don't have a problem with that, right?

140
00:08:09.430 --> 00:08:10.690
That's fine.

141
00:08:10.690 --> 00:08:15.530
Clearly, Axio salts some reason to use
that and not rewrite that code themselves.

142
00:08:15.530 --> 00:08:16.790
Okay, that's not a big deal.

143
00:08:16.790 --> 00:08:18.580
Now let's do something else.

144
00:08:18.580 --> 00:08:23.560
Let's install React Scripts.

145
00:08:23.560 --> 00:08:29.055
Now React Scripts is the library that
React uses when you do a Create React App.

146
00:08:29.055 --> 00:08:32.103
This is the core, this is the main module,

147
00:08:32.103 --> 00:08:37.112
all that's built on if you were to
create an app with Create React App.

148
00:08:37.112 --> 00:08:41.422
And what's gonna happen here is it's
gonna pull down that React Scripts and

149
00:08:41.422 --> 00:08:44.920
all of the dependencies
that React Scripts needs.

150
00:08:44.920 --> 00:08:49.060
And you can see this is
taking a little bit of time.

151
00:08:49.060 --> 00:08:50.920
And it's a lot faster than it used to be.

152
00:08:50.920 --> 00:08:55.078
But we used to have this joke that you
could run NPM install, and then go make

153
00:08:55.078 --> 00:08:59.910
lunch, call your mother, watch some TV,
come back and NPM install would be done.

154
00:08:59.910 --> 00:09:01.840
Now it's a lot faster now.

155
00:09:01.840 --> 00:09:04.473
But the reason why it's so
slow and it takes so

156
00:09:04.473 --> 00:09:08.860
long is that it is pulling down
a massive amount of packages.

157
00:09:08.860 --> 00:09:13.843
And in fact, when this thing is done, this
Node module's folder is gonna be somewhere

158
00:09:13.843 --> 00:09:17.479
in the neighborhood of 350
megabytes worth of JavaScript.

159
00:09:17.479 --> 00:09:20.546
And that's just a ton of code and
there will be so

160
00:09:20.546 --> 00:09:23.770
many modules inside this
Node modules folder that

161
00:09:23.770 --> 00:09:29.200
we will no longer have any idea what any
of them are for or why they're there.

162
00:09:29.200 --> 00:09:32.673
This has just become something
that we've accepted as just sort

163
00:09:32.673 --> 00:09:36.540
of a general truth that the Node
modules folder is enormous.

164
00:09:36.540 --> 00:09:38.810
And that's just how it is.

165
00:09:38.810 --> 00:09:42.763
And Ryan just sort of feels
like that's a problem.

166
00:09:42.763 --> 00:09:46.398
And you can see here,
because I don't have a gitignore,

167
00:09:46.398 --> 00:09:50.520
even VS Code is like there's so
many files in this project.

168
00:09:50.520 --> 00:09:52.100
I can't even track them all.

169
00:09:52.100 --> 00:09:55.049
And that's because this is
the Node modules folder now.

170
00:09:55.049 --> 00:09:58.135
Look at it, look at this, right?

171
00:09:58.135 --> 00:10:02.920
And this is why we make jokes about how
we're pulling down all of the Internet to

172
00:10:02.920 --> 00:10:04.019
build a website.

173
00:10:04.019 --> 00:10:06.950
It It just feels incredibly heavy.

174
00:10:06.950 --> 00:10:10.490
Now this is not a shot
at React by any stretch.

175
00:10:10.490 --> 00:10:12.530
React is a phenomenal thing.

176
00:10:12.530 --> 00:10:15.093
It's just to point out it
is a ubiquitous problem.

177
00:10:15.093 --> 00:10:16.900
It is the situation in Node.

178
00:10:18.670 --> 00:10:25.590
And so the way that Deno thinks about
dependencies is completely differently.

179
00:10:25.590 --> 00:10:27.980
It doesn't have a Node modules folder.

180
00:10:27.980 --> 00:10:30.390
It handles them in
an entirely different way.

181
00:10:32.230 --> 00:10:36.163
In cases where you need to deploy
a Node app to your server,

182
00:10:36.163 --> 00:10:39.151
the NPM install has to
happen there as well.

183
00:10:39.151 --> 00:10:43.163
So many of you have probably accidentally
checked in your Node modules folder, and

184
00:10:43.163 --> 00:10:44.321
it just takes forever.

185
00:10:44.321 --> 00:10:47.280
Or you tried to publish it on accident,
it takes forever.

186
00:10:47.280 --> 00:10:52.498
And so you have to publish your project
and then run an NPM install on the server.

187
00:10:52.498 --> 00:10:55.616
And that's an extra step and
can take a while.

188
00:10:55.616 --> 00:10:59.518
What Deno really wants,
what it really wants is for

189
00:10:59.518 --> 00:11:04.782
you to be able to compile your Deno
project into a single executable,

190
00:11:04.782 --> 00:11:09.252
that you can then deploy like an EXE,
something about it.

191
00:11:09.252 --> 00:11:12.942
You have a JavaScript project,
you compile it, it's an EXE,

192
00:11:12.942 --> 00:11:17.203
you send it off to a server and it runs,
whether Deno is installed or not.

193
00:11:17.203 --> 00:11:20.060
So that's what Deno
really wants to do here.

194
00:11:20.060 --> 00:11:22.030
That's the long-term vision.

