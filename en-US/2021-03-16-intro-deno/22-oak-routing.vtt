WEBVTT

1
00:00:00.110 --> 00:00:00.860
Let's talk about routing.

2
00:00:02.140 --> 00:00:05.780
Routing is fundamental
to any web application.

3
00:00:05.780 --> 00:00:09.714
And Oak has pre built router middleware
that allows you to handle different

4
00:00:09.714 --> 00:00:14.350
routes, parameters, queries, all of the
things that we're doing manually before.

5
00:00:14.350 --> 00:00:17.987
And it's basically doing a lot of the
string parsing and regular expression and

6
00:00:17.987 --> 00:00:21.130
pattern matching in stuff that you
otherwise have to do yourself.

7
00:00:21.130 --> 00:00:24.760
And so let's look at how to use it.

8
00:00:26.830 --> 00:00:31.732
So up here at the top,
what wanna do is pull in

9
00:00:31.732 --> 00:00:36.380
the router from okay, so let's do that.

10
00:00:36.380 --> 00:00:38.250
Let's see this a router.

11
00:00:40.280 --> 00:00:46.140
You want to enable import IntelliSense for
Deno land, Deno land, yes.

12
00:00:48.190 --> 00:00:50.113
Just so you can see what that does.

13
00:00:58.841 --> 00:01:03.761
What it should do, is It doesn't but
it will actually go out to the web and

14
00:01:03.761 --> 00:01:08.320
give you IntelliSense on modules
that you can import remotely.

15
00:01:08.320 --> 00:01:10.400
Although support for
that seems to be a little sketchy.

16
00:01:10.400 --> 00:01:15.080
All right anyway, we pulled in router,
so we wanna use that.

17
00:01:15.080 --> 00:01:16.996
So let's create a new router instance.

18
00:01:21.921 --> 00:01:27.639
Which we did and now what we wanna do is
handle all these requests with our router.

19
00:01:27.639 --> 00:01:30.352
So let's do router.get and

20
00:01:30.352 --> 00:01:36.200
then it wants to know what path so
this is the route path.

21
00:01:36.200 --> 00:01:38.240
So this is our route router, okay.

22
00:01:38.240 --> 00:01:41.132
This is our index page
we're going to return and

23
00:01:41.132 --> 00:01:44.180
then what we get here is
the context object again.

24
00:01:45.640 --> 00:01:49.250
But we don't get the next, right, next
is gonna be called for us automatically.

25
00:01:50.330 --> 00:01:56.320
So what we're going to do here is just
a ctx, but the API is the same, right?

26
00:01:56.320 --> 00:01:59.626
So this is we'll just
call this index page and

27
00:01:59.626 --> 00:02:04.680
then let's do the same thing for,
let's make a user's page speed.

28
00:02:04.680 --> 00:02:09.096
Just like Express we have like /users.

29
00:02:09.096 --> 00:02:14.503
Again, let's just return oops, nope,

30
00:02:14.503 --> 00:02:19.760
that's not what we want but that is ctx.

31
00:02:19.760 --> 00:02:22.170
I need to come here.

32
00:02:25.055 --> 00:02:26.750
Let's do.

33
00:02:26.750 --> 00:02:28.100
Sorry, I can't use the Escape key.

34
00:02:29.300 --> 00:02:37.030
Response body equals users page and
then let's do a route with a parameter.

35
00:02:37.030 --> 00:02:43.692
So we'll do router.get/users/name and

36
00:02:43.692 --> 00:02:49.452
then again with our context object and

37
00:02:49.452 --> 00:02:54.680
then we can just return, equals.

38
00:02:56.160 --> 00:02:58.650
Let's just echo back, the name.

39
00:02:58.650 --> 00:03:06.190
How do we get the name,
ctx context.params.

40
00:03:06.190 --> 00:03:10.973
Again, if you didn't know what can I do
with the context, you can just sort of

41
00:03:10.973 --> 00:03:15.260
got it and get the IntelliSense and
find params that's probably it.

42
00:03:16.530 --> 00:03:20.250
And then what can we do with params to

43
00:03:20.250 --> 00:03:26.350
context.params.what.name, maybe
I don't know.

44
00:03:26.350 --> 00:03:30.349
Let's try this and see if it works on
the task, the task manager popped up,

45
00:03:30.349 --> 00:03:32.440
even though I didn't ask for it.

46
00:03:32.440 --> 00:03:34.640
Windows is trying to tell me something.

47
00:03:34.640 --> 00:03:40.110
All right, so we no longer need to
have the app handle the requests.

48
00:03:40.110 --> 00:03:47.800
So instead, what we wanna do is have the
app use the router sorry, app use router.

49
00:03:49.920 --> 00:03:52.768
And then specifically,

50
00:03:52.768 --> 00:03:58.599
we need to tell it these
are the different routes and

51
00:03:58.599 --> 00:04:04.987
then we also want to tell it
to use this allowed methods.

52
00:04:04.987 --> 00:04:09.523
Which allows us to handle all the methods,
http methods that we might get,

53
00:04:09.523 --> 00:04:11.110
besides just to get okay.

54
00:04:13.560 --> 00:04:16.418
So now we're handling all
these different routes and

55
00:04:16.418 --> 00:04:19.860
we're gonna respond differently
based on which one we're at.

56
00:04:19.860 --> 00:04:24.018
And we're even gonna handle a route
perimeter that we jumped through quite

57
00:04:24.018 --> 00:04:27.920
a bit of hoops before, but
hopes a router makes this quite simple.

58
00:04:27.920 --> 00:04:30.843
So let's make sure we're
still running here,

59
00:04:30.843 --> 00:04:36.160
open an unsupported media type was
attempted to be imported as a module.

60
00:04:36.160 --> 00:04:38.562
I don't think that's right,
let's try this again.

61
00:04:43.244 --> 00:04:45.210
Look at this, somehow this got pulled in.

62
00:04:45.210 --> 00:04:49.020
Let's take this out,
we don't want this, there we go.

63
00:04:51.110 --> 00:04:58.070
All right, so here's our application
running on port 3000 refresh index page.

64
00:04:58.070 --> 00:05:04.199
So if we go to users should say
Users page and if we pass a name,

65
00:05:04.199 --> 00:05:09.400
it should just echo back the name and
it does.

66
00:05:09.400 --> 00:05:15.399
All right, so, that the router
from oak makes it quite simple to

67
00:05:15.399 --> 00:05:21.410
do complex routing,
than your application would likely have.

68
00:05:22.450 --> 00:05:25.140
Routing is a fundamental
part of any web application.

69
00:05:26.430 --> 00:05:30.175
All right, so we implemented that,
added the users route.

70
00:05:30.175 --> 00:05:35.055
Now, one of the things here, though,
that's going to be a problem

71
00:05:35.055 --> 00:05:40.105
is that you can imagine if this
application was at any size that we would

72
00:05:40.105 --> 00:05:45.520
have dozens of routes maybe hundreds
of routes, who knows, right?

73
00:05:45.520 --> 00:05:49.294
And so this app file could be
extremely monolithic and so

74
00:05:49.294 --> 00:05:54.610
what we don't want to do is just put all
of our application code in the app file.

75
00:05:55.910 --> 00:06:01.337
Because what if here, we were making some
sort of a database call to get users and

76
00:06:01.337 --> 00:06:04.103
then here we were doing something else.

77
00:06:04.103 --> 00:06:06.844
And then we write all of this code to be
in the app page, and we don't want that.

78
00:06:06.844 --> 00:06:11.316
So really what we wanna do is
mimic what Express does and

79
00:06:11.316 --> 00:06:16.080
what Express does is it says,
okay, well we're gonna put

80
00:06:16.080 --> 00:06:21.180
all of our routes in a folder
called routes, all right.

81
00:06:21.180 --> 00:06:27.890
So we need to create files in here and
each file will handle a specific route.

82
00:06:27.890 --> 00:06:31.338
So for instance, in Express,
one file handles all the index routes,

83
00:06:31.338 --> 00:06:34.092
doesn't matter if it's a get post,
put what have you.

84
00:06:34.092 --> 00:06:37.875
Doesn't matter if there's parameters,
one file handles all that for users,

85
00:06:37.875 --> 00:06:38.950
same thing.

86
00:06:38.950 --> 00:06:41.380
So we wanNA create that kind of structure.

87
00:06:42.550 --> 00:06:47.124
So I'm going to create this file and
I'm just going to call it index router.ts.

88
00:06:48.980 --> 00:06:55.289
And now what I need to do is I need to be
able to reference that router object so

89
00:06:55.289 --> 00:07:01.800
that I can add the route here in this
file and handle all the code here.

90
00:07:01.800 --> 00:07:04.013
Now, there's no prescribed
way to do this So

91
00:07:04.013 --> 00:07:07.639
what I'm gonnado here is just sort of
my opinion on how to structure this.

92
00:07:08.950 --> 00:07:13.941
But what we can do here is we can
export because we have this syntax this

93
00:07:13.941 --> 00:07:18.260
like you'll see,
keep seeing this use syntax right here.

94
00:07:18.260 --> 00:07:21.735
So I wanna have a syntax
that's similar to this but

95
00:07:21.735 --> 00:07:25.310
what we can do here is we can say, export.

96
00:07:25.310 --> 00:07:28.899
We could say export default.

97
00:07:30.170 --> 00:07:34.770
Export actually just export function use,
and

98
00:07:34.770 --> 00:07:40.060
then we wanna pass in a path string and
we wanna pass in,

99
00:07:40.060 --> 00:07:44.210
maybe we want to pass in the router, okay?

100
00:07:46.300 --> 00:07:48.632
Now in order to actually
use the router object,

101
00:07:48.632 --> 00:07:52.187
we have to import it and this is where
we run into this problem where we're

102
00:07:52.187 --> 00:07:55.420
gonna have URL imports all over
the place and we don't want that.

103
00:07:55.420 --> 00:07:56.826
So now's a really good time for

104
00:07:56.826 --> 00:07:59.930
us to create that depths
file that we talked about.

105
00:07:59.930 --> 00:08:04.844
So let's do a new file, call it
depth.ts and let's paste this in and

106
00:08:04.844 --> 00:08:08.760
then remember,
we have to export this stuff back out.

107
00:08:08.760 --> 00:08:12.483
So let's export application and router.

108
00:08:15.057 --> 00:08:19.318
Okay, and actually here,

109
00:08:19.318 --> 00:08:26.372
let's do let's export a default function,

110
00:08:28.869 --> 00:08:33.213
And then at the top of this,
what I wanna do is import

111
00:08:33.213 --> 00:08:38.179
router from the depths file
which we can access like this.

112
00:08:38.179 --> 00:08:43.830
Right now all of our nasty URLs
are hidden away out of sight.

113
00:08:43.830 --> 00:08:48.211
But we need to import application and
application and

114
00:08:48.211 --> 00:08:50.750
router from that file as well.

115
00:08:51.930 --> 00:08:57.170
Forgot na From our depths.ts, okay.

116
00:08:57.170 --> 00:09:03.703
And it's in the same folder here, so
we don't need this, just do this.

117
00:09:06.889 --> 00:09:10.711
Okay, so here we've got this function and

118
00:09:10.711 --> 00:09:15.594
inside of that,
what we wanna do is just say this router

119
00:09:15.594 --> 00:09:20.710
object which we've passed in
needs to be of type router.

120
00:09:23.310 --> 00:09:28.451
We'll just say router dot oops,

121
00:09:28.451 --> 00:09:34.693
I got an uppercase, let me change this,

122
00:09:34.693 --> 00:09:38.377
router.get, right.

123
00:09:38.377 --> 00:09:40.560
And then we just wanna get the path and

124
00:09:40.560 --> 00:09:44.660
then we wanna do something
just like we're doing before.

125
00:09:44.660 --> 00:09:49.226
We just moving this code in
what we're doing before saying

126
00:09:49.226 --> 00:09:53.053
ctx.response.body equals index pag, okay.

127
00:09:54.960 --> 00:09:58.270
Now we need to take out our router here.

128
00:09:58.270 --> 00:09:59.720
So let's get rid of this.

129
00:09:59.720 --> 00:10:02.096
So we don't need this anymore,

130
00:10:02.096 --> 00:10:06.409
instead we're gonna pull in
our router file, so import.

131
00:10:15.780 --> 00:10:21.250
So we wanted to do routes,
there we go, Index router.ts, okay.

132
00:10:21.250 --> 00:10:26.180
And then here what we can do is
just tell our index router we

133
00:10:26.180 --> 00:10:31.940
got a default remember we talked
about that I messed it up.

134
00:10:31.940 --> 00:10:36.250
So he pulled us out,
we should be able to get it.

135
00:10:36.250 --> 00:10:42.170
Like this, use, there it is and
then we're gonna pass in the path, okay?

136
00:10:42.170 --> 00:10:46.870
And we're gonna pass in the context,
the router object sees me.

137
00:10:48.630 --> 00:10:53.421
Okay, so just like that we've moved the
logic for our index router into another

138
00:10:53.421 --> 00:10:57.040
file and let's just do the same thing for
our users routes.

139
00:10:57.040 --> 00:10:58.268
Let's just do user's router.

140
00:11:01.138 --> 00:11:06.167
And then we can just copy over
basically everything from

141
00:11:06.167 --> 00:11:11.089
the index route into our users router but
in this case,

142
00:11:11.089 --> 00:11:15.470
what we wanna do is,
we wanna have two routes.

143
00:11:15.470 --> 00:11:20.799
One is responding to the params but for
now we'll just handle the main route and

144
00:11:20.799 --> 00:11:23.960
let's just change this to users page,
okay.

145
00:11:26.090 --> 00:11:32.082
And then now we can copy
the same line up here,

146
00:11:32.082 --> 00:11:39.190
just move this down,
just rename it to Users router.

147
00:11:40.500 --> 00:11:41.690
Okay, excellent.

148
00:11:41.690 --> 00:11:47.007
Let's get rid of this because
we're not using router and

149
00:11:47.007 --> 00:11:51.438
now it's just, users router.use, users and

150
00:11:51.438 --> 00:11:56.280
then we're passing in that router object.

151
00:11:56.280 --> 00:12:01.003
Okay, so as just like this, you can see
where we're sort of just moving through

152
00:12:01.003 --> 00:12:04.457
here and handling paths and
moving things into routers and

153
00:12:04.457 --> 00:12:09.060
structuring our application, the way
an application might be structured.

154
00:12:09.060 --> 00:12:13.278
Now, I think actually the right way
to do this in a perfect world is to

155
00:12:13.278 --> 00:12:17.350
actually create a new router
in each one of these files.

156
00:12:17.350 --> 00:12:21.848
So, in a perfect world, we'd say, const
router equals new router like this and

157
00:12:21.848 --> 00:12:23.701
then we would say router.get and

158
00:12:23.701 --> 00:12:26.570
we would handle all of this
stuff here in this file.

159
00:12:26.570 --> 00:12:31.332
But the problem is as of the time of this
writing oak does not handle sub routers

160
00:12:31.332 --> 00:12:34.840
like that,
it will only take that one router.

161
00:12:34.840 --> 00:12:39.004
And so we're sort of stuck to this syntax
of kind of mimicking that by wrapping

162
00:12:39.004 --> 00:12:40.680
everything in a use function.

163
00:12:44.130 --> 00:12:47.350
Okay, are we still running over here?

164
00:12:47.350 --> 00:12:49.010
File change detected we are.

165
00:12:49.010 --> 00:12:52.140
So now do we have something similar?

166
00:12:52.140 --> 00:12:54.340
Let's see here.

167
00:12:54.340 --> 00:12:57.149
Let's go back Index page.

168
00:12:59.855 --> 00:13:05.270
Users page All right, so
our router is working very nicely.

169
00:13:05.270 --> 00:13:11.470
All right, so we are slowly approximating
something that looks like we need it to.

