WEBVTT

1
00:00:00.410 --> 00:00:05.512
Now, I hear a lot of pushback from
this on people who don't like this,

2
00:00:05.512 --> 00:00:11.005
because they say, but I can't install
the module if I'm on an aeroplane.

3
00:00:11.005 --> 00:00:13.430
[LAUGH] But that's true.

4
00:00:13.430 --> 00:00:14.180
That's true.

5
00:00:14.180 --> 00:00:17.904
You can't install a Deno dependency
when you're on an aeroplane, but

6
00:00:17.904 --> 00:00:21.327
you also can't install an npm
module if you're on an aeroplane.

7
00:00:21.327 --> 00:00:23.770
So nothing really changes there.

8
00:00:23.770 --> 00:00:28.780
npm packages have to be downloaded, Deno
dependencies have to be downloaded period.

9
00:00:28.780 --> 00:00:32.146
The only difference is that Deno
uses the URL and an npm and

10
00:00:32.146 --> 00:00:36.370
actually copies the file to your
project in the node_modules folder.

11
00:00:38.370 --> 00:00:40.770
If you're still not convinced,

12
00:00:40.770 --> 00:00:46.240
just go back to the React story that
we talked about in the beginning.

13
00:00:46.240 --> 00:00:51.504
Where, at one point in time, putting
JavaScript in html was considered bad,

14
00:00:51.504 --> 00:00:55.590
and today we put JavaScript in html,
we don't think twice.

15
00:00:56.900 --> 00:01:01.823
And so, I'm not saying that Deno is
the reactive of JavaScript on all times,

16
00:01:01.823 --> 00:01:04.930
I'm not saying it's
the right way to do it.

17
00:01:04.930 --> 00:01:09.500
I'm simply saying that, importing few URLs
could be a better developer experience.

18
00:01:09.500 --> 00:01:12.650
It could be, so give it a chance.

19
00:01:12.650 --> 00:01:17.611
I do think that you'll find
that it's a relatively simple

20
00:01:17.611 --> 00:01:22.378
solution to the dependency problem,
which is a thing.

21
00:01:22.378 --> 00:01:25.115
All right,
let's talk about Compatibility With Node,

22
00:01:25.115 --> 00:01:28.320
because the next question that
comes up real quickly is like okay.

23
00:01:29.920 --> 00:01:32.020
So but what about all the npm packages?

24
00:01:32.020 --> 00:01:33.409
Right?
Like I don't just use node i

25
00:01:33.409 --> 00:01:35.730
have a lot of different
things that I need to use.

26
00:01:35.730 --> 00:01:37.930
Can I use npm packages with node?

27
00:01:39.130 --> 00:01:42.010
Probably not is the answer.

28
00:01:42.010 --> 00:01:46.180
Deno does have a node compatibility
module in its standard library.

29
00:01:46.180 --> 00:01:48.030
In fact, if we jump out and
take a look at it.

30
00:01:49.730 --> 00:01:53.570
You can see here that it's meant
to have a compatibility layer.

31
00:01:53.570 --> 00:01:54.610
So they're working on it.

32
00:01:54.610 --> 00:01:59.951
And then they go back and they look at,
sort of checking off what did they

33
00:01:59.951 --> 00:02:05.206
support today, and you can see here
out of 38 built in node modules,

34
00:02:05.206 --> 00:02:09.305
only eight are currently
supported in Deno Deno Deno,

35
00:02:09.305 --> 00:02:14.220
although that's probably
changed since I wrote that.

36
00:02:14.220 --> 00:02:16.010
But you can see that
they're working on it.

37
00:02:16.010 --> 00:02:19.800
But some things are just never gonna work.

38
00:02:19.800 --> 00:02:25.208
If you use a Module that
has native bindings and

39
00:02:25.208 --> 00:02:33.040
has to be built,
then it gets built with node.gyp in Node.

40
00:02:33.040 --> 00:02:35.740
And in Deno, it gets built with Cargo.

41
00:02:35.740 --> 00:02:37.120
These are just different build systems.

42
00:02:37.120 --> 00:02:41.949
And so these modules are not going
to be they're not going to work

43
00:02:41.949 --> 00:02:44.990
across these two different runtimes but

44
00:02:44.990 --> 00:02:50.640
I think that the third party list
in Deno is growing pretty quickly.

45
00:02:50.640 --> 00:02:59.106
And in fact, my very least favorite new
module that requires node.gyp is sass,

46
00:02:59.106 --> 00:03:03.350
and there's the sass already for Deno.

47
00:03:05.550 --> 00:03:08.647
You can use some node modules with Deno,
and

48
00:03:08.647 --> 00:03:12.360
we're actually going to
do that at some point.

49
00:03:12.360 --> 00:03:15.170
But it's a little bit hacky.

50
00:03:15.170 --> 00:03:18.010
And I don't know if it's a good idea or
not, but

51
00:03:18.010 --> 00:03:21.420
I am going to show you how to
do it here in just a minute.

52
00:03:21.420 --> 00:03:22.640
So it is possible.

53
00:03:22.640 --> 00:03:24.827
So the question was if we're
going to think like a browser,

54
00:03:24.827 --> 00:03:27.680
does that mean that the browser
should download TypeScript files?

55
00:03:27.680 --> 00:03:29.220
No, I don't think so.

56
00:03:29.220 --> 00:03:33.786
The assertion that Ryan is making is the
Denos should work mostly like a browser

57
00:03:33.786 --> 00:03:36.622
not not that a browser
should work like Deno and so

58
00:03:36.622 --> 00:03:39.200
the browser doesn't support TypeScript.

59
00:03:42.090 --> 00:03:44.410
So no, I don't think that's the intention.

60
00:03:44.410 --> 00:03:49.740
I think it's more like he's trying to stay
as close as possible to those conventions.

61
00:03:49.740 --> 00:03:56.470
And even Deno supports some things that
the browser supports natively, like fetch.

62
00:03:56.470 --> 00:03:59.963
So you can just do fetch inside of
Deno You don't have to include some HTTP

63
00:03:59.963 --> 00:04:04.150
module to make a request, you just
fetch just like you do in a browser.

64
00:04:04.150 --> 00:04:06.560
So that's what I mean by
thinking like a browser.

65
00:04:07.590 --> 00:04:09.460
I don't mean that the browser
should work like Deno

