WEBVTT

1
00:00:00.340 --> 00:00:02.747
So if we're taking a look at
the code that we have right now,

2
00:00:02.747 --> 00:00:06.459
you'll notice that if you checked out the
09-beginbranch you'll notice there's a new

3
00:00:06.459 --> 00:00:08.650
project in here called cest-la-vue.

4
00:00:08.650 --> 00:00:10.156
And so for
those not familiar with the French,

5
00:00:10.156 --> 00:00:11.630
cest la vie just mean that it's life.

6
00:00:11.630 --> 00:00:13.830
This is life and so this is view.

7
00:00:13.830 --> 00:00:17.600
And so inside of here, we actually
do have a little bit happening here.

8
00:00:17.600 --> 00:00:20.763
So I do want to walk through this with
you because I will try to sort of

9
00:00:20.763 --> 00:00:24.549
to centralize the exercises around
cest-la-vue in order to just provide some

10
00:00:24.549 --> 00:00:25.071
context.

11
00:00:25.071 --> 00:00:28.800
And basically give you the experience of
walking into a project that either has

12
00:00:28.800 --> 00:00:30.664
already had some call it legacy code and

13
00:00:30.664 --> 00:00:33.109
that way you feel like
you're working with stuff.

14
00:00:33.109 --> 00:00:36.860
But that said I wanna emphasize if you
feel more comfortable just working with

15
00:00:36.860 --> 00:00:40.750
your TV show form app to apply these
concepts, please feel free to do so.

16
00:00:40.750 --> 00:00:43.873
I just wanted to provide different
contexts to allow you that practice of

17
00:00:43.873 --> 00:00:46.620
seeing what it's like when
working with code bases.

18
00:00:46.620 --> 00:00:49.920
So let's go and switch over in
here real quick into cest-la-vue.

19
00:00:51.630 --> 00:00:57.300
And let's go ahead and
run that, npm run dev, great.

20
00:00:58.780 --> 00:01:04.176
Now if we open up here, It's on 74 now.

21
00:01:04.176 --> 00:01:06.330
That's right cuz the other ones running,
make sense.

22
00:01:06.330 --> 00:01:07.980
Okay, here we go.

23
00:01:07.980 --> 00:01:08.880
We have cest la vue.

24
00:01:08.880 --> 00:01:12.183
It's a fairly simple app, but it has
a little bit of styling this time, so

25
00:01:12.183 --> 00:01:14.930
not just raw html and
whatever the browser provides.

26
00:01:14.930 --> 00:01:17.961
And we have a home and login page,
or at least what appears to be.

27
00:01:17.961 --> 00:01:22.486
If we take a look at our app.view, you'll
notice that there are two components that

28
00:01:22.486 --> 00:01:26.640
are already pre-built for you,
there's a homepage and a login page.

29
00:01:26.640 --> 00:01:28.346
If you look inside the package.json,

30
00:01:28.346 --> 00:01:30.810
you'll see there's still
no router library.

31
00:01:30.810 --> 00:01:33.190
So there's no paths being changed or
anything right now.

32
00:01:33.190 --> 00:01:37.252
What we're doing here is that traditional
single page application model, which is

33
00:01:37.252 --> 00:01:41.380
like every JavaScript trying to manage
everything, and so it's just routed there.

34
00:01:42.410 --> 00:01:46.067
And so what's actually happening here
is you have this reactive data that's

35
00:01:46.067 --> 00:01:49.580
tracking the state of
the current page quote, unquote.

36
00:01:49.580 --> 00:01:53.850
And so here we have two methods that
assign the current page to home or login.

37
00:01:53.850 --> 00:01:57.449
And then down here,
we have the ability to say, okay, well,

38
00:01:57.449 --> 00:02:00.426
if the current page is home,
show this component or

39
00:02:00.426 --> 00:02:04.860
if the current page is login or
actually in this case, it's an else.

40
00:02:04.860 --> 00:02:08.340
But as you can see, that's your basic
check to see what we're swapping between.

41
00:02:08.340 --> 00:02:09.679
Now here's the cool thing.

42
00:02:09.679 --> 00:02:10.967
This right here is great but

43
00:02:10.967 --> 00:02:14.944
you can imagine if that list gets long,
and again, for routing, eventually we're

44
00:02:14.944 --> 00:02:18.610
gonna get into the library that will
also teach you how to switch routes.

45
00:02:18.610 --> 00:02:21.959
But if you have a list of components that
you might need to swap in and out and

46
00:02:21.959 --> 00:02:22.769
make it dynamic,

47
00:02:22.769 --> 00:02:26.455
it's kind of hard to have that all managed
out inside of your templates, right.

48
00:02:26.455 --> 00:02:30.000
Either the conditionals we had complicate
it, how would that actually work?

49
00:02:30.000 --> 00:02:34.131
So when it comes to dynamically swapping
out components, Vue has a native component

50
00:02:34.131 --> 00:02:38.381
aptly called component, because what
you're doing is, you're basically defining

51
00:02:38.381 --> 00:02:42.250
a generic component that JavaScript
will basically help to define.

52
00:02:42.250 --> 00:02:46.744
So in the case of our app, for example,
what we do is we pass it a prop called is,

53
00:02:46.744 --> 00:02:51.020
and this is a specially designed prop for
the native component.

54
00:02:51.020 --> 00:02:54.111
And so if we just do it manually
ourselves, we can say, basically,

55
00:02:54.111 --> 00:02:57.130
we can say, we're going to the homepage.

56
00:02:57.130 --> 00:03:01.324
And so in this particular case, you'll
notice that home is basically being bound

57
00:03:01.324 --> 00:03:04.510
to just a plain string and
there's nothing special going on.

58
00:03:04.510 --> 00:03:07.695
And so if we think about it,
this is really no different than

59
00:03:07.695 --> 00:03:12.790
just declaring your homepage directly as
a component, rendering out on the screen.

60
00:03:12.790 --> 00:03:16.984
But what we'd like to do is actually
make it something that is managed if via

61
00:03:16.984 --> 00:03:18.190
JavaScript.

62
00:03:18.190 --> 00:03:21.875
And so what we could do in this particular
case is we can say, you know what,

63
00:03:21.875 --> 00:03:24.523
let's do this,
let's create a computed property.

64
00:03:26.484 --> 00:03:31.472
And we'll call it, and this time,
this one is called currentPage,

65
00:03:31.472 --> 00:03:34.053
and then we'll say, renderPage.

66
00:03:34.053 --> 00:03:40.725
And the way renderPage work, we'll say is,
actually, yes, this is how it will work.

67
00:03:40.725 --> 00:03:45.648
Return this.currentPage plus whatever, so
basically we're looking at the naming of

68
00:03:45.648 --> 00:03:49.070
the component here,
in this case, it's homepage.

69
00:03:49.070 --> 00:03:51.860
And so we can see now that because,
whoops, let me go back, okay.

70
00:03:53.240 --> 00:03:57.470
We can see now because we're only
basically having the current page defined

71
00:03:57.470 --> 00:03:59.978
via the first part of it,
via home and login,

72
00:03:59.978 --> 00:04:03.150
this means that we can
basically tag it on to page.

73
00:04:03.150 --> 00:04:06.847
And if we save that now, [SOUND] yep,

74
00:04:06.847 --> 00:04:12.902
that's totally fine, and
then bind this to renderPage.

75
00:04:12.902 --> 00:04:14.620
That's good, there you go.

76
00:04:15.750 --> 00:04:16.770
That's swapping in and out now.

77
00:04:16.770 --> 00:04:20.706
And so what's really cool about this now
is that you basically get the ability to

78
00:04:20.706 --> 00:04:23.080
do some pretty complex logic things.

79
00:04:23.080 --> 00:04:26.364
And then more importantly, you can
actually start then when it comes to

80
00:04:26.364 --> 00:04:28.392
really making your application dynamic and

81
00:04:28.392 --> 00:04:31.625
having the backend define maybe
which components your users prefer,

82
00:04:31.625 --> 00:04:35.520
because you're managing a CMS site
that might render out certain widgets.

83
00:04:35.520 --> 00:04:37.915
You might actually then do
a loop through your Vue4.

84
00:04:37.915 --> 00:04:41.309
There's a bunch of things that you end
up being able to do with this, but

85
00:04:41.309 --> 00:04:44.989
it's something I just wanted to expose
to you all because as we go through this

86
00:04:44.989 --> 00:04:48.697
concept is actually gonna show up again
as we go through things like routing.

