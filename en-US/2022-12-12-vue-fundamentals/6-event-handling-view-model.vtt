WEBVTT

1
00:00:00.204 --> 00:00:03.378
Okay, so we've learned how to create
an app, we've attached some reactive data.

2
00:00:03.378 --> 00:00:05.524
That was fun, hopefully,
pretty easy to do.

3
00:00:05.524 --> 00:00:08.722
And now, of course, we wanna talk about
how we deal with user input, right,

4
00:00:08.722 --> 00:00:10.710
cuz that's what a lot of
JavaScripts value is.

5
00:00:10.710 --> 00:00:13.678
It's handling the interactivity
of your website.

6
00:00:13.678 --> 00:00:17.838
So the first thing we wanna talk about is
let's open Playground actually in Chrome,

7
00:00:17.838 --> 00:00:18.665
so we have that.

8
00:00:18.665 --> 00:00:23.654
So let me just open a new tab with this,
and

9
00:00:23.654 --> 00:00:26.800
this will be Playground.

10
00:00:26.800 --> 00:00:30.089
Okay, so for
the sake of Playground demo purposes,

11
00:00:30.089 --> 00:00:34.219
let's just use the standard
example of the Counter app, right?

12
00:00:34.219 --> 00:00:38.653
Which is the fact that if we go inside
of here, and this time, I'll see,

13
00:00:38.653 --> 00:00:40.559
let's do that sequentially.

14
00:00:40.559 --> 00:00:43.999
So I'll put a horizontal line here,
line break, there we go.

15
00:00:43.999 --> 00:00:47.131
And then here we'll just do an h1,
we'll call it Counter.

16
00:00:47.131 --> 00:00:51.355
We have a count, and then we have a
button, where we want to increment count.

17
00:00:51.355 --> 00:00:56.111
This should look pretty familiar, 10.

18
00:00:56.111 --> 00:00:57.898
Okay, so if you scroll down,

19
00:00:57.898 --> 00:01:00.990
I don't like the fact that this
is all the way at the bottom.

20
00:01:00.990 --> 00:01:03.211
I'm gonna actually move
this up to the top.

21
00:01:05.344 --> 00:01:10.249
Copy that, and hr, great, so
we'll do this from most recent to oldest.

22
00:01:10.249 --> 00:01:14.569
Okay, so here we have our counter and
your question is probably thinking,

23
00:01:14.569 --> 00:01:16.845
okay, how do we actually change data?

24
00:01:16.845 --> 00:01:21.126
Because after all, it's fun to render some
reactive stuff, we wanna do more with it.

25
00:01:21.126 --> 00:01:23.868
So inside of Vue,
we have our data here, but

26
00:01:23.868 --> 00:01:26.697
the question is we wanna
actually change it.

27
00:01:26.697 --> 00:01:31.979
And so the option that we wanna learn
about next is the concept of methods.

28
00:01:31.979 --> 00:01:35.726
And so if we think about functions
in JavaScript, right, typically,

29
00:01:35.726 --> 00:01:38.106
we would have something
like let count = 0.

30
00:01:38.106 --> 00:01:41.584
And then you'd have a function
called increment, and

31
00:01:41.584 --> 00:01:45.149
it would say count ++,
something along these lines.

32
00:01:45.149 --> 00:01:46.279
When you think of methods,

33
00:01:46.279 --> 00:01:48.885
think of it as functions from
JavaScript that are available for

34
00:01:48.885 --> 00:01:51.700
your app to call it anytime,
that's the best way to think about it.

35
00:01:51.700 --> 00:01:56.740
So from this perspective, we would
actually want to then define a method,

36
00:01:56.740 --> 00:01:59.066
we'll just say incrementCount.

37
00:01:59.066 --> 00:02:00.583
And inside of here,

38
00:02:00.583 --> 00:02:05.151
this is where a question that
we had earlier comes into play.

39
00:02:05.151 --> 00:02:09.850
So when you wanna refer to something
else in the app, so in this case,

40
00:02:09.850 --> 00:02:14.164
we wanna actually refer to this
count property inside of data.

41
00:02:14.164 --> 00:02:18.661
Vue is smart about a lot of things,
but if we just currently say,

42
00:02:18.661 --> 00:02:21.257
count++, this is not gonna work.

43
00:02:21.257 --> 00:02:24.417
And the reason for that is because if we
know as when it comes to JavaScript in

44
00:02:24.417 --> 00:02:25.937
programming, scoping is a thing.

45
00:02:25.937 --> 00:02:30.068
So it doesn't know basically where
to fetch count from, and so this

46
00:02:30.068 --> 00:02:35.007
is where the dreaded keyword of this comes
into play when it comes to JavaScript.

47
00:02:35.007 --> 00:02:39.063
That this keyword is where Vue basically
takes the context of the app, and

48
00:02:39.063 --> 00:02:41.824
it will basically figure
out where count exists.

49
00:02:41.824 --> 00:02:45.516
So from Vue 2, you might have noticed
it from like this.data.count,

50
00:02:45.516 --> 00:02:47.825
this would be an explicit
thing you might do.

51
00:02:47.825 --> 00:02:51.017
But because Vue knows that oftentimes
we're referring to data or

52
00:02:51.017 --> 00:02:54.382
computed unless you have some
really clear name clashes,

53
00:02:54.382 --> 00:02:57.532
you can just use this.whatever
property you're looking for.

54
00:02:57.532 --> 00:03:02.593
And that goes for basically anything
you're defining within this Options API.

55
00:03:02.593 --> 00:03:06.220
And the benefit of this is that while
some people find that this keyword is

56
00:03:06.220 --> 00:03:10.202
confusing, the point of it, I think at
the time when the API has been designed is

57
00:03:10.202 --> 00:03:14.438
around the fact that you shouldn't really
have to think about what this even means.

58
00:03:14.438 --> 00:03:17.255
The point is I think of this as the app,
and that will you come in and

59
00:03:17.255 --> 00:03:19.316
you've referred to this app,
and that's it.

60
00:03:19.316 --> 00:03:22.132
So when I was teaching other
people Vue for the first time,

61
00:03:22.132 --> 00:03:25.181
even though they didn't have
a lot of JavaScript experience,

62
00:03:25.181 --> 00:03:28.650
they got the convention that as long
as I call this, it refers to my app.

63
00:03:28.650 --> 00:03:32.036
And I'm not gonna learn about scoping or
anything, it just works, and

64
00:03:32.036 --> 00:03:34.923
that in itself is an advantage
from a learning perspective.

65
00:03:34.923 --> 00:03:38.371
But just know that you don't have
to use this so that in the future,

66
00:03:38.371 --> 00:03:41.205
if people are actively avoiding it,
we can go ahead and

67
00:03:41.205 --> 00:03:43.564
do that once we learn
about composition API.

68
00:03:43.564 --> 00:03:46.163
But while we're in
the Options API right now,

69
00:03:46.163 --> 00:03:50.377
this is how we actually refer to things
within this configuration object.

70
00:03:50.377 --> 00:03:54.671
Okay, so now that we have the this
count++, what we're gonna do here now is

71
00:03:54.671 --> 00:03:57.664
we're gonna go set how do
we actually call the thing?

72
00:03:57.664 --> 00:04:00.474
And so what we're gonna do is
we're gonna just like before,

73
00:04:00.474 --> 00:04:03.296
we're gonna use a Vue directive
to actually call the thing.

74
00:04:03.296 --> 00:04:04.742
And so we're gonna use v-on,

75
00:04:04.742 --> 00:04:07.471
that is the directive that
you'll want to learn for this.

76
00:04:07.471 --> 00:04:12.562
Because similar to what you know
from JavaScript events, onclick,

77
00:04:12.562 --> 00:04:17.579
onkeyup, this is the same idea,
we're extending on that theory.

78
00:04:17.579 --> 00:04:21.935
And so instead of just like onclick
though, which you might think that's what

79
00:04:21.935 --> 00:04:25.763
I'm probably gonna guess,
because Vue on itself is the directive,

80
00:04:25.763 --> 00:04:29.604
you have the ability to pass it
an argument through the colon symbol.

81
00:04:29.604 --> 00:04:33.229
So it's v-on: the event that you
wanna call, and the event you wanna,

82
00:04:33.229 --> 00:04:35.324
again, is standard JavaScript events.

83
00:04:35.324 --> 00:04:39.833
We haven't made anything up, so
key up anything that you can think of

84
00:04:39.833 --> 00:04:43.357
that's standard in
the JavaScript API that exists.

85
00:04:43.357 --> 00:04:45.332
And so when you click,
what do we wanna refer to?

86
00:04:45.332 --> 00:04:46.576
Well, guess what,

87
00:04:46.576 --> 00:04:50.755
we wanna refer to our incrementCount
function that we had earlier.

88
00:04:50.755 --> 00:04:54.024
The key thing here to remember though
is that you don't want to actually call

89
00:04:54.024 --> 00:04:54.688
the function,

90
00:04:54.688 --> 00:04:57.927
because this is something that will be
called when the event is triggered.

91
00:04:57.927 --> 00:05:01.489
So basically, you're passing a reference
to the function inside of your app.

92
00:05:01.489 --> 00:05:03.624
And then when it's clicked,
it will be called,

93
00:05:03.624 --> 00:05:06.084
that's the reason why you
don't call it immediately.

94
00:05:06.084 --> 00:05:10.645
So if we save that, and
let's go ahead and now refresh our page.

95
00:05:10.645 --> 00:05:14.875
You can see, boom, things are actually
changing and they're being tracked.

96
00:05:16.627 --> 00:05:18.729
So that's fairly straightforward.

97
00:05:18.729 --> 00:05:22.212
What about something a little bit more
complicated like what if I wanted to set

98
00:05:22.212 --> 00:05:24.638
the amount that the counter
is being incremented by?

99
00:05:24.638 --> 00:05:30.377
Okay, well, in this case, you're gonna
say, well, let's say we have a label here,

100
00:05:30.377 --> 00:05:34.432
let's say incrementAmount and
then it'll be increment by.

101
00:05:34.432 --> 00:05:39.544
And then you probably have some
elements here, that's a number.

102
00:05:39.544 --> 00:05:42.879
And then so if we refresh this,
theoretically, what you would want is

103
00:05:42.879 --> 00:05:46.115
the ability to change the amount
that increment count is changing.

104
00:05:46.115 --> 00:05:48.054
So how would we actually do that?

105
00:05:48.054 --> 00:05:51.778
Well, first of all, what we wanna do
is we need a reactive data property,

106
00:05:51.778 --> 00:05:54.017
cuz we wanna track what
the heck is going on.

107
00:05:54.017 --> 00:05:58.052
So at this moment, if we go down
into our data, we have this count.

108
00:05:58.052 --> 00:06:00.638
And we can say,
we can just have incrementAmount,

109
00:06:00.638 --> 00:06:03.299
a reactive data property and
currently, it's 1.

110
00:06:05.010 --> 00:06:09.918
And then what we wanna do then is tie it
into our incrementCount down here, so

111
00:06:09.918 --> 00:06:11.998
let me actually collapse this.

112
00:06:11.998 --> 00:06:16.988
And so rather than just incrementing
it by 1, which is the ++,

113
00:06:16.988 --> 00:06:20.184
we'll do += this.incrementAmount.

114
00:06:20.184 --> 00:06:24.721
Oops, incrementAmount, save.

115
00:06:24.721 --> 00:06:27.821
And to show that this is working,
I'm gonna switch this over to 10, and

116
00:06:27.821 --> 00:06:29.534
we're gonna go ahead and refresh this.

117
00:06:29.534 --> 00:06:32.563
And you can see,
it's jumping as you would expect by 10.

118
00:06:32.563 --> 00:06:35.106
But we want to be able to change this,
right?

119
00:06:35.106 --> 00:06:38.223
How do we actually basically
connect these two?

120
00:06:38.223 --> 00:06:40.799
So let me go ahead and actually wrap
this part in the div real quick.

121
00:06:42.673 --> 00:06:45.534
Oops, that's not what I wanted at all.

122
00:06:45.534 --> 00:06:51.072
[SOUND] div, there we go, okay,
that should give it a new line, perfect.

123
00:06:51.072 --> 00:06:51.752
Okay, so

124
00:06:51.752 --> 00:06:57.194
the first thing first is we need our input
to display what it is that value is.

125
00:06:57.194 --> 00:06:58.115
So how we do that?

126
00:06:58.115 --> 00:07:02.771
Normally, we would say value equals 10,
this is standard HTML.

127
00:07:02.771 --> 00:07:06.079
But this is static, right,
this is something we define ourselves,

128
00:07:06.079 --> 00:07:07.572
has nothing to do with our app.

129
00:07:07.572 --> 00:07:08.838
How do we connect the two?

130
00:07:08.838 --> 00:07:12.233
The way we do that is with another Vue
directive, because what are we doing,

131
00:07:12.233 --> 00:07:15.270
we're now extending upon our HTML
to give it super power to do what?

132
00:07:15.270 --> 00:07:19.023
To have some interactivity,
to be supercharged with reactive data.

133
00:07:19.023 --> 00:07:22.056
And so you do that via v-bind, right?

134
00:07:22.056 --> 00:07:24.207
You're binding the value
to a dynamic property,

135
00:07:24.207 --> 00:07:25.700
that's the way to think about it.

136
00:07:25.700 --> 00:07:26.707
But here though,
what are we binding it to?

137
00:07:26.707 --> 00:07:29.311
We're not binding it to 10,
that's not what we're binding by.

138
00:07:29.311 --> 00:07:31.644
We're binding it to incrementAmount.

139
00:07:31.644 --> 00:07:35.010
So we can refer directly to the variable
that we talked about earlier.

140
00:07:35.010 --> 00:07:38.044
And so to show that this change,
this time,

141
00:07:38.044 --> 00:07:43.622
I'm gonna change incrementAmount to 8,
and if I refresh, boom, there we go.

142
00:07:43.622 --> 00:07:46.691
We can see that they're
now talking to each other.

143
00:07:46.691 --> 00:07:49.076
And so now, we can see when we
increment count, this is great.

144
00:07:49.076 --> 00:07:52.578
It's actually changing, but
what do we know about this?

145
00:07:52.578 --> 00:07:56.241
We know that if we change now to 12,
is it gonna make a difference?

146
00:07:56.241 --> 00:07:59.019
No, it's not, in fact,
it's gonna reset itself back to 8.

147
00:07:59.019 --> 00:08:00.114
What's going on?

148
00:08:00.114 --> 00:08:04.036
Well, the reason for this is because
you've told Vue, track this thing and

149
00:08:04.036 --> 00:08:07.469
make sure that its value is always
bound to this incrementAmount,

150
00:08:07.469 --> 00:08:09.080
that's what you've told it.

151
00:08:09.080 --> 00:08:11.935
And so this is why even though
we've changed it once, and

152
00:08:11.935 --> 00:08:14.673
we try to increment the count,
it's setting it back,

153
00:08:14.673 --> 00:08:17.312
because Vue is doing it's
job that you told it to do.

154
00:08:17.312 --> 00:08:18.019
So what do we wanna do?

155
00:08:18.019 --> 00:08:22.381
We want to actually update incrementAmount
whenever someone actually types inside of

156
00:08:22.381 --> 00:08:23.405
the input element.

157
00:08:23.405 --> 00:08:24.296
Then.
So how might you do that?

158
00:08:24.296 --> 00:08:27.431
Well, we're gonna actually
listen to an event.

159
00:08:27.431 --> 00:08:28.482
And so what is that?

160
00:08:28.482 --> 00:08:32.782
We learned it is v-on, and
we're gonna listen to the input event.

161
00:08:32.782 --> 00:08:36.554
And what we're not gonna do though is
we're not gonna inline the function that

162
00:08:36.554 --> 00:08:39.312
will change this,
because I find that to be very clunky.

163
00:08:39.312 --> 00:08:41.590
So we're gonna call it
changeIncrementAmount.

164
00:08:41.590 --> 00:08:45.983
And so what we're doing here is we're
saying, hey, on the input event for

165
00:08:45.983 --> 00:08:50.722
this input element, when we get an input
event, I want you to run this function,

166
00:08:50.722 --> 00:08:53.116
which we had not created yet to be clear.

167
00:08:53.116 --> 00:08:57.424
So come in here, and
we'll go to the method and

168
00:08:57.424 --> 00:09:02.290
we'll say changeIncrementAmount
just like that.

169
00:09:02.290 --> 00:09:04.553
And here's the difference though.

170
00:09:04.553 --> 00:09:06.737
Now that you're actually
listening to an event,

171
00:09:06.737 --> 00:09:09.597
you actually get a default event
object that's passed to you once

172
00:09:09.597 --> 00:09:12.250
again just like you would expect
from standard JavaScript.

173
00:09:12.250 --> 00:09:15.613
So I'm gonna call that event, and we're
gonna do as though we're just gonna log

174
00:09:15.613 --> 00:09:17.307
the event to prove that this is working.

175
00:09:17.307 --> 00:09:19.417
So I'm gonna go ahead and
open this up, refresh.

176
00:09:19.417 --> 00:09:23.257
And if I go ahead and type in here or
anything happening, look,

177
00:09:23.257 --> 00:09:25.221
the input event is being fired.

178
00:09:25.221 --> 00:09:26.072
So what do we know?

179
00:09:26.072 --> 00:09:30.504
Well, we know, again,
we won't dive into the details of it, but

180
00:09:30.504 --> 00:09:34.082
event.target.value is
what you're looking for.

181
00:09:34.082 --> 00:09:38.201
That's usually the convention for
when you're playing with form elements.

182
00:09:38.201 --> 00:09:40.586
So to show you this works,
if I delete this,

183
00:09:40.586 --> 00:09:44.915
you can see it's actually showing up
inside of my terminal as you would expect.

184
00:09:44.915 --> 00:09:51.465
And so now that we're actually getting
the dynamic value of the event,

185
00:09:51.465 --> 00:09:57.924
we can then say,
this.incrementAmount = event.target.value.

186
00:09:57.924 --> 00:09:59.849
Now, to show that this works,

187
00:09:59.849 --> 00:10:04.157
I'm a big fan of making sure things
are actually working correctly.

188
00:10:04.157 --> 00:10:08.810
So I'm gonna go ahead and inside of here,
we're just gonna add a quick h1 for

189
00:10:08.810 --> 00:10:10.251
the incrementAmount.

190
00:10:12.005 --> 00:10:15.203
So you can see here, we're rendering
the incrementAmount here and here.

191
00:10:15.203 --> 00:10:19.141
And if I change this now to 18, you'll
see that it is being tracked correctly.

192
00:10:19.141 --> 00:10:22.775
It's in here, and
now we can increment the count, and

193
00:10:22.775 --> 00:10:25.303
then that's not working correctly.

194
00:10:25.303 --> 00:10:26.801
Anybody have a guess why?

195
00:10:26.801 --> 00:10:29.231
&gt;&gt; String.
&gt;&gt; it's a string, that's right.

196
00:10:29.231 --> 00:10:33.355
So you might think, okay, well, you know
what I'm gonna do, I'm gonna come in here.

197
00:10:33.355 --> 00:10:36.343
I'm gonna wrap this in a number,
be done with it.

198
00:10:36.343 --> 00:10:38.924
All right, let's refresh this
to make sure that works.

199
00:10:38.924 --> 00:10:44.068
Let's do 80 this time, all right,
that works, but I'll do you one better.

200
00:10:44.068 --> 00:10:47.815
Instead of having to come in here and
do it here, which is kind of silly because

201
00:10:47.815 --> 00:10:50.480
the incrementAmount,
it already has a target value.

202
00:10:50.480 --> 00:10:54.638
And what's a bit odd too is that
if we look at our input element,

203
00:10:54.638 --> 00:10:56.532
we are already type number.

204
00:10:56.532 --> 00:10:57.759
Why is that the case?

205
00:10:57.759 --> 00:11:02.893
Well, this is one way to fix it,
here's the thing though.

206
00:11:02.893 --> 00:11:07.635
If we take a look at our inputs,
Sam had made the joke that I showed in

207
00:11:07.635 --> 00:11:11.804
the tweet earlier that most of
the web is rendering a list.

208
00:11:11.804 --> 00:11:14.872
Well, I'd say a lot of the web is
also filling out forms, right?

209
00:11:14.872 --> 00:11:18.010
I mean, that's what a lot of our bread and
butter is too.

210
00:11:18.010 --> 00:11:19.199
So Vue was like, okay,

211
00:11:19.199 --> 00:11:23.183
this is a lot of work to do every single
time you have a form element, right?

212
00:11:23.183 --> 00:11:26.025
Gosh, what if we could just
learn from what Angular did and

213
00:11:26.025 --> 00:11:28.526
do two-way binding in
this particular contexts?

214
00:11:28.526 --> 00:11:32.465
[LAUGH] So instead of having to
always define, and change, and

215
00:11:32.465 --> 00:11:36.783
track all this stuff, what if we
had a directive called v-model and

216
00:11:36.783 --> 00:11:40.909
we tracked it directly to the data
property that we cared about?

217
00:11:43.318 --> 00:11:47.385
Once you have this v-model,
all of this I say disappears, but

218
00:11:47.385 --> 00:11:53.012
v-model is syntactic sugar for basically
configuring all that underneath the hood.

219
00:11:53.012 --> 00:11:56.304
Which means that inside
of our method down here,

220
00:11:56.304 --> 00:11:59.853
we don't even need this as well,
so I can save that.

221
00:11:59.853 --> 00:12:04.165
Now, if we refresh, once again,
let's do 800 this time and increment.

222
00:12:04.165 --> 00:12:08.082
You'll see that things are changing
just as you'd expect with this v-model.

223
00:12:08.082 --> 00:12:14.070
And what's even more interesting if
you'll notice, it's not a string anymore.

224
00:12:14.070 --> 00:12:18.801
Because once again, what Vue tries to do
is it looks at the developer experience

225
00:12:18.801 --> 00:12:22.629
and it goes, hey, I know that
I'm looking at an input element.

226
00:12:22.629 --> 00:12:26.611
Because here's the thing, V-model works
with other form elements like checkboxes,

227
00:12:26.611 --> 00:12:28.347
radio, select, you can do all that.

228
00:12:28.347 --> 00:12:30.895
But it also knows what kind
of input event to listen for,

229
00:12:30.895 --> 00:12:34.270
cuz you'll know that especially with
select, that one's a tricky one.

230
00:12:34.270 --> 00:12:37.674
I always have to look at the docs
every time I work with select,

231
00:12:37.674 --> 00:12:39.380
I have to code it from scratch.

232
00:12:39.380 --> 00:12:43.352
But here, it actually knows that
we are type number in here.

233
00:12:43.352 --> 00:12:44.461
And because of that,

234
00:12:44.461 --> 00:12:49.032
the value it's actually tracking inside of
its app has automatically been converted.

235
00:12:49.032 --> 00:12:53.986
Now, if we did string for
example here or non string text revert,

236
00:12:53.986 --> 00:12:58.957
you can see, it's actually smart
enough to know what to do.

237
00:12:58.957 --> 00:13:03.653
But [COUGH] the one thing I wanted
to show because this used to be

238
00:13:03.653 --> 00:13:08.259
a Vue 2 thing is that you could
actually attach arguments or

239
00:13:08.259 --> 00:13:11.594
basically modifiers to your directives.

240
00:13:11.594 --> 00:13:15.392
So in this case,
it's a V-model of number for example, but

241
00:13:15.392 --> 00:13:19.500
there'll be other opportunities
I get to present that later on.

