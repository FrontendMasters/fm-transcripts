WEBVTT

1
00:00:00.000 --> 00:00:04.631
So we're on to our next section regarding
Composition API with script setup.

2
00:00:07.506 --> 00:00:10.470
All right, so
let's context that a bit here.

3
00:00:10.470 --> 00:00:14.921
When we take a look at this user page,
you'll notice that, well,

4
00:00:14.921 --> 00:00:18.576
most of our component is
actually in Composition API,

5
00:00:18.576 --> 00:00:24.304
minus the component registration right
here, everything else is Composition API.

6
00:00:24.304 --> 00:00:27.939
And so Vue is certainly, when we were
thinking about the developer experience of

7
00:00:27.939 --> 00:00:31.850
working with Composition API, it was a bit
like, well, okay, this is cool, right?

8
00:00:31.850 --> 00:00:35.537
We can break stuff up, we can go ahead and
write our JavaScript in a way that's

9
00:00:35.537 --> 00:00:38.397
kind of more natural for us,
we can group it the way we want.

10
00:00:38.397 --> 00:00:42.588
But then the fact that we have to
constantly write our returns gets a little

11
00:00:42.588 --> 00:00:43.408
bit tedious.

12
00:00:43.408 --> 00:00:44.702
Especially when you have
a lot of things to return,

13
00:00:44.702 --> 00:00:46.610
that's not something you have to
manage in two different places, right?

14
00:00:46.610 --> 00:00:49.640
You have to define what you're gonna do,
then you're gonna return it.

15
00:00:49.640 --> 00:00:52.690
Couldn't Vue be a little bit
smarter about this somehow?

16
00:00:52.690 --> 00:00:55.599
And so this is where things like
build tools are really great.

17
00:00:55.599 --> 00:01:01.466
Because with Vue 3.2, we introduced a
compiler optimization, where it allows us

18
00:01:01.466 --> 00:01:06.939
to actually fully buy into the Composition
API while saving us some code space.

19
00:01:06.939 --> 00:01:09.925
And more importantly, allowing us
to be more succinct and concise.

20
00:01:09.925 --> 00:01:11.830
And so
let me show you what I mean by that.

21
00:01:11.830 --> 00:01:19.242
So let me go ahead and go over to the
playground, and let's go into the pokedex.

22
00:01:19.242 --> 00:01:23.614
All right, so the pokedex,
similar to what we had earlier,

23
00:01:23.614 --> 00:01:27.571
is basically mostly bought
into the Composition API.

24
00:01:27.571 --> 00:01:30.231
In fact, there's only a couple of things
we need to do to fully change it.

25
00:01:30.231 --> 00:01:33.960
And so for now, let's see, computed,
in fact, this was a made up thing.

26
00:01:33.960 --> 00:01:35.209
So we're gonna go ahead and

27
00:01:35.209 --> 00:01:38.590
delete computed from here cuz we
don't need this regionNameLowerCase.

28
00:01:38.590 --> 00:01:40.972
And then methods changeRegionName, again,

29
00:01:40.972 --> 00:01:44.096
was something we decided to do
just to sort of change things.

30
00:01:44.096 --> 00:01:45.806
So we'll go ahead and migrate that,
cuz what are methods?

31
00:01:45.806 --> 00:01:48.682
Methods are JavaScript functions.

32
00:01:48.682 --> 00:01:53.351
So const changeRegionName = function,
where we say regionName.

33
00:01:53.351 --> 00:01:57.517
And regionName in this
particular case is a ref,

34
00:01:57.517 --> 00:02:02.810
which means we need to unpack it,
and it's going to be Hoenn.

35
00:02:02.810 --> 00:02:07.523
Once we have that,
we can return that to our template.

36
00:02:07.523 --> 00:02:09.089
And then there we go.

37
00:02:09.089 --> 00:02:10.833
And then we don't need to log any of this.

38
00:02:10.833 --> 00:02:15.619
So now, we should be back in a similar
state to what we had earlier

39
00:02:15.619 --> 00:02:17.580
when we had the user page.

40
00:02:17.580 --> 00:02:22.743
Okay, so let me go ahead and
actually checkout branch 11-begin.

41
00:02:22.743 --> 00:02:23.420
There we go.
And

42
00:02:23.420 --> 00:02:28.630
then we'll check out branch 11-exercise,
and let's commit this change real quick.

43
00:02:28.630 --> 00:02:32.820
Feature update pokedex to be

44
00:02:32.820 --> 00:02:37.540
almost fully composition api.

45
00:02:37.540 --> 00:02:42.210
Okay, so what is script setup?

46
00:02:42.210 --> 00:02:45.301
Well, script setup is
exactly as it sounds, in that

47
00:02:45.301 --> 00:02:49.400
what you do is you add an attribute
to your script block called setup.

48
00:02:49.400 --> 00:02:53.799
And what that does is it tells you
this entire block is going to be

49
00:02:53.799 --> 00:02:55.136
Composition API.

50
00:02:55.136 --> 00:02:57.030
No options will exist in here.

51
00:02:57.030 --> 00:02:57.890
So what does that mean?

52
00:02:57.890 --> 00:03:00.256
Well, first thing first,
there's no more object,

53
00:03:00.256 --> 00:03:03.478
cuz that's what options API is all about,
about defining this object.

54
00:03:03.478 --> 00:03:08.689
So export default disappears,
Then we can save that.

55
00:03:08.689 --> 00:03:10.930
But that's still gonna break,
which is totally fine, cuz you know why?

56
00:03:10.930 --> 00:03:14.869
We already know that it's in setup,
so the line 5,

57
00:03:14.869 --> 00:03:19.532
this async setup here,
also not necessary, Delete &gt; Save.

58
00:03:19.532 --> 00:03:21.539
Better, but here's the other thing.

59
00:03:21.539 --> 00:03:24.305
Because we're now in
a compiler optimization,

60
00:03:24.305 --> 00:03:28.486
meaning Vue can now do a lot more static
analysis and those sort of things,

61
00:03:28.486 --> 00:03:31.196
we don't even need to
return anything either.

62
00:03:35.081 --> 00:03:39.241
And believe it or not,
this block of code here, in fact,

63
00:03:39.241 --> 00:03:44.634
let me just delete the console.logs here,
this whole thing just works.

64
00:03:44.634 --> 00:03:45.565
&gt;&gt; You just sold me.

65
00:03:45.565 --> 00:03:49.040
&gt;&gt; [LAUGH]
&gt;&gt; I was super skeptical until this

66
00:03:49.040 --> 00:03:49.660
moment.

67
00:03:49.660 --> 00:03:51.813
&gt;&gt; Yeah, this is the mic drop moment for

68
00:03:51.813 --> 00:03:54.603
those who are thinking
about Composition API.

69
00:03:54.603 --> 00:03:57.417
This makes a lot of people excited,
especially for

70
00:03:57.417 --> 00:04:00.173
those users who are heavy
on the JavaScript side.

71
00:04:00.173 --> 00:04:04.380
Or more importantly,
if you're even thinking about TypeScript,

72
00:04:04.380 --> 00:04:07.642
Composition API works with
TypeScript naturally.

73
00:04:07.642 --> 00:04:09.436
In terms of annotating types and
all that stuff,

74
00:04:09.436 --> 00:04:11.116
we don't have time to
talk about that today.

75
00:04:11.116 --> 00:04:12.202
But there's a Vue 3 and

76
00:04:12.202 --> 00:04:15.036
TypeScript workshop that just
actually released recently.

77
00:04:15.036 --> 00:04:18.488
So if you wanna check that out to learn
more about how that might work together,

78
00:04:18.488 --> 00:04:19.914
you can totally check that out.

79
00:04:19.914 --> 00:04:23.717
But there you go, this is how you
get a component to fully opt into

80
00:04:23.717 --> 00:04:27.255
Composition API while not having
to worry about any of the.

81
00:04:27.255 --> 00:04:31.191
One of the things actually that you might
be thinking about is that we had an async

82
00:04:31.191 --> 00:04:32.857
earlier, right, on our setup.

83
00:04:32.857 --> 00:04:36.236
But when you're in the script setup,
basically, Vue hoists and

84
00:04:36.236 --> 00:04:40.489
does all the async stuff for you so that
you don't have to manually assign it here.

85
00:04:40.489 --> 00:04:44.314
It'll automatically detect the async
stuff, and do what it needs to do.

86
00:04:44.314 --> 00:04:48.502
And so just like that, we've now have
a component that's fully opted into

87
00:04:48.502 --> 00:04:50.840
Composition API, no options anywhere.

88
00:04:50.840 --> 00:04:55.198
The only thing I will add is because this
probably wouldn't be the most intuitive,

89
00:04:55.198 --> 00:04:59.008
is that let's say we wanted to add
our BaseButton inside of this layout.

90
00:04:59.008 --> 00:05:04.253
All we do is you do BaseButton,
we import it, let me do this, BaseButton.

91
00:05:04.253 --> 00:05:10.870
And believe it or not, just by importing
it, you've already registered it.

92
00:05:10.870 --> 00:05:15.798
So I can come down in here now and
just go BaseButton, like that.

93
00:05:15.798 --> 00:05:17.182
You can see, there's our BaseButton.

94
00:05:20.139 --> 00:05:21.694
So, a little bit of show and

95
00:05:21.694 --> 00:05:25.769
tell, does anyone have any questions
about what they've seen so far?

96
00:05:25.769 --> 00:05:28.620
&gt;&gt; I have to imagine that in practice,

97
00:05:28.620 --> 00:05:33.276
this really forces you to make
concise components because

98
00:05:33.276 --> 00:05:37.028
it's gonna be a mess if your component-
&gt;&gt; [LAUGH] And

99
00:05:37.028 --> 00:05:38.811
you bring up an excellent point.

100
00:05:38.811 --> 00:05:43.568
So as we can see here, right now, the code
is fairly short, easy to follow, but

101
00:05:43.568 --> 00:05:47.980
you can imagine, it's very easy for
a team to get carried away with this.

102
00:05:47.980 --> 00:05:51.979
And spaghetti code can become
very problematic very quickly.

103
00:05:51.979 --> 00:05:55.671
Again, one of the things I wanna emphasize
is that there are trade offs when you go

104
00:05:55.671 --> 00:05:58.129
the options route versus
the Composition API route.

105
00:05:58.129 --> 00:06:00.436
And understanding those trade offs are,
if we think about it,

106
00:06:00.436 --> 00:06:02.053
are what make us experienced as engineers.

107
00:06:02.053 --> 00:06:03.019
And so knowing that,

108
00:06:03.019 --> 00:06:07.006
you just have to realize that Composition
API means there's flexibility and freedom.

109
00:06:07.006 --> 00:06:10.527
And so your team has to then design the
conventions its going to use in order to

110
00:06:10.527 --> 00:06:13.400
make sure that your code is
still maintainable and readable.

111
00:06:13.400 --> 00:06:16.802
As much as options API was a little bit
rigid as far as telling you where to put

112
00:06:16.802 --> 00:06:20.155
stuff, it didn't mean everyone knew
where everything was at any point.

113
00:06:20.155 --> 00:06:23.137
And anyone could basically jump in,
but here, this is just the beginning.

114
00:06:23.137 --> 00:06:26.762
Because what we're gonna do next, after
you all practice doing this yourselves,

115
00:06:26.762 --> 00:06:30.127
is we're gonna talk about how you can
extract these into modules that can then

116
00:06:30.127 --> 00:06:32.490
be explicitly tossed around
different components.

117
00:06:32.490 --> 00:06:36.370
There is one more thing I need to
cover before we cover the exercise.

118
00:06:36.370 --> 00:06:40.882
We've done all this stuff regarding
doing functionality, data computed, and

119
00:06:40.882 --> 00:06:42.818
we've talked about components.

120
00:06:42.818 --> 00:06:45.260
We did not talk about props,
we did not talk about emits.

121
00:06:45.260 --> 00:06:49.195
So remember if we look at our UserCard
that I had earlier, we see that, and

122
00:06:49.195 --> 00:06:53.066
the options is very easy, you just
have the props, you have your emits,

123
00:06:53.066 --> 00:06:54.860
you just define it as you see fit.

124
00:06:54.860 --> 00:06:58.430
It's actually not that much harder when
it comes to Composition API, it's just,

125
00:06:58.430 --> 00:06:59.607
what do you think you need?

126
00:06:59.607 --> 00:07:00.690
You need a helper function.

127
00:07:00.690 --> 00:07:07.290
And so they are aptly named,
defineProps and they are defineEmits.

128
00:07:07.290 --> 00:07:10.314
These are the two helper methods
that you need to know about.

129
00:07:10.314 --> 00:07:13.825
And so the way it works is basically,
if this pokedex wanted to say,

130
00:07:13.825 --> 00:07:17.211
take a region of props, sorry,
a region of Kanto, for example,

131
00:07:17.211 --> 00:07:19.076
of which region it was looking for.

132
00:07:19.076 --> 00:07:23.329
You would say, defineProps is
a function that takes an object,

133
00:07:23.329 --> 00:07:27.579
where we then can say the region
is going to be of type String, and

134
00:07:27.579 --> 00:07:31.635
I can say that the default is
going to be Kanto, for example.

135
00:07:31.635 --> 00:07:34.480
As you can see, the syntax is actually
very similar to what we learned already.

136
00:07:34.480 --> 00:07:38.188
The main difference being that one
is being called by a function.

137
00:07:38.188 --> 00:07:40.661
But the second part,
which is actually really important,

138
00:07:40.661 --> 00:07:43.337
is that if you want to actually
use the prop in your computation.

139
00:07:43.337 --> 00:07:47.381
Say for instance, inside of this computed,
right, we want it to actually say,

140
00:07:47.381 --> 00:07:50.481
we want it to be uppercase, and
we wanna add the prop to it too.

141
00:07:50.481 --> 00:07:51.393
How do we do that?

142
00:07:51.393 --> 00:07:54.770
Well, defineProps as it stands right here
is just a function that's being initiated.

143
00:07:54.770 --> 00:07:58.501
Well, we need to do then, cuz it's
vanilla JavaScript, is say, const props.

144
00:07:58.501 --> 00:08:02.613
Or to be honest, you can name it
whatever you want, it's JavaScript, but

145
00:08:02.613 --> 00:08:07.272
I would recommend just naming it props,
because then you can say, props.region.

146
00:08:07.272 --> 00:08:10.401
And then when you do that, we can see at
least, it looks like the default is giving

147
00:08:10.401 --> 00:08:12.373
me some problems, so
I'm gonna ignore that for now.

148
00:08:12.373 --> 00:08:17.384
But we can see here,
if I go to App.vue, where is,

149
00:08:17.384 --> 00:08:21.669
wrong App.vue, App.vue in the playground.

150
00:08:21.669 --> 00:08:26.551
Give it a region, let it switch it
off to Hoenn this time, there we go.

151
00:08:26.551 --> 00:08:29.895
I need to figure out what the default
things later, but at the bare minimum,

152
00:08:29.895 --> 00:08:31.736
you can see that's how you define props.

153
00:08:31.736 --> 00:08:35.783
And then similarly, if you're doing emit,

154
00:08:35.783 --> 00:08:39.942
you basically const emits,
define the emit.

155
00:08:39.942 --> 00:08:44.199
And then here, same thing, we can say,
change-region, for example.

156
00:08:44.199 --> 00:08:49.058
And then everything still works exactly
as we learned in this workshop.

157
00:08:49.058 --> 00:08:51.766
&gt;&gt; How in flux is this API?

158
00:08:51.766 --> 00:08:56.400
&gt;&gt; defineProps and defineEmits is-
&gt;&gt; I mean, the whole section you showed.

159
00:08:56.400 --> 00:08:57.189
&gt;&gt; Got it.
Okay, so

160
00:08:57.189 --> 00:09:00.314
the question here is around how
stable the scripts setup is?

161
00:09:00.314 --> 00:09:04.647
It's fully stable at this point,
production ready ever since 3.2, so

162
00:09:04.647 --> 00:09:06.380
that's the big caveat here.

163
00:09:06.380 --> 00:09:09.657
If you're using anything less than Vue
3.2, you won't have scripts setup,

164
00:09:09.657 --> 00:09:11.503
the compiler optimizations aren't there.

165
00:09:11.503 --> 00:09:14.448
But going forward, honestly,
I have seen a lot of code bases,

166
00:09:14.448 --> 00:09:17.020
a lot of people just opt into
this fully from the get go.

167
00:09:17.020 --> 00:09:19.977
So yeah, consider it staple on that end.

168
00:09:19.977 --> 00:09:23.773
For things like defineProps, defineEmits,
they're still playing around a little

169
00:09:23.773 --> 00:09:26.565
bit sometimes with how they can
optimize the DX of, as you saw,

170
00:09:26.565 --> 00:09:28.323
default was acting a little bit funky.

171
00:09:28.323 --> 00:09:30.225
I have to look into that why, but

172
00:09:30.225 --> 00:09:33.480
those are things that are still
kind of being refined.

173
00:09:33.480 --> 00:09:37.463
But if you can be guaranteed of anything,
it's that Vue tried to do its best to be

174
00:09:37.463 --> 00:09:39.850
progressive about how
it makes these changes.

175
00:09:39.850 --> 00:09:42.824
So that as long as it's not
marked as experimental,

176
00:09:42.824 --> 00:09:45.741
you can count on your stuff
working in production.

177
00:09:45.741 --> 00:09:49.365
And then sure, we might introduce another
syntax that would make it even easier for

178
00:09:49.365 --> 00:09:51.093
you just like we saw with script setup.

179
00:09:51.093 --> 00:09:53.177
Because we got feedback on
Composition API, right?

180
00:09:53.177 --> 00:09:57.418
People liked it, kind of verbose,
people had their feelings about it.

181
00:09:57.418 --> 00:10:00.061
And when we saw, I think,
inspired by things,

182
00:10:00.061 --> 00:10:03.844
Svelte was doing with compiler
optimizations, we said, why not?

183
00:10:03.844 --> 00:10:06.917
These are things that we can also do for
our users.

184
00:10:06.917 --> 00:10:09.835
And so script setup, I believe,
don't quote me on this, but

185
00:10:09.835 --> 00:10:12.542
I believe was also inspired
from what we saw with Svelte.

186
00:10:12.542 --> 00:10:18.430
Cool, so actually, we're not calling
emits right now, so I'm just gonna,

187
00:10:18.430 --> 00:10:23.623
actually, I can just make another
example for people right in here.

188
00:10:23.623 --> 00:10:25.830
We could say, emits, what does it emit?

189
00:10:25.830 --> 00:10:28.734
It emits the change-region.

190
00:10:31.317 --> 00:10:32.386
That's your example right there.

191
00:10:32.386 --> 00:10:34.078
Okay, cool.

