WEBVTT

1
00:00:00.000 --> 00:00:04.219
Alright, we're here, took us a little
while, but we're here at composition API.

2
00:00:04.219 --> 00:00:07.731
And it's time to talk about the brand
new thing that is with view three.

3
00:00:07.731 --> 00:00:11.169
The first thing I want to caveat when it
comes to the composition API is that even

4
00:00:11.169 --> 00:00:12.941
though it was introduced in view three,

5
00:00:12.941 --> 00:00:14.936
there actually are ways
to use it on view two.

6
00:00:14.936 --> 00:00:18.474
So that is one of the things that the team
has tried to work really hard on is

7
00:00:18.474 --> 00:00:21.838
that,even though there are certain
performance optimizations and

8
00:00:21.838 --> 00:00:25.272
sort of like type Script enhancements
that have come with view three.

9
00:00:25.272 --> 00:00:28.649
As a whole, when it comes to feature
parity, the team has actually worked

10
00:00:28.649 --> 00:00:31.933
really hard to try to keep it as
basically cross compatible as humanly.

11
00:00:31.933 --> 00:00:35.343
Be possible because they know, a lot
of times people when they're working on

12
00:00:35.343 --> 00:00:38.859
enterprise apps, as much as developers
would love to be on the cutting edge tool

13
00:00:38.859 --> 00:00:41.805
,the reality is that most of time
there's just no time to do that.

14
00:00:41.805 --> 00:00:45.720
And so rather than have developers be
kind of feeling left out of the fact

15
00:00:45.720 --> 00:00:49.776
that they might want to rewrite their
components using composition API.

16
00:00:49.776 --> 00:00:52.752
We basically have plugins that allow
you to plug in the composition API

17
00:00:52.752 --> 00:00:53.464
interview too.

18
00:00:53.464 --> 00:00:56.809
So again, while this is a view three
feature, just know that you can use this

19
00:00:56.809 --> 00:00:59.072
in view two,
you just need to look into the plugin.

20
00:00:59.072 --> 00:01:04.405
All right, so, composition API,
let's talk about it.

21
00:01:04.405 --> 00:01:09.082
So remember this lifecycle,
diagram that we talked about earlier?

22
00:01:09.082 --> 00:01:12.671
Up here, you'll notice in blue,
there's a very special lifecycle hook.

23
00:01:12.671 --> 00:01:14.031
That's called setup.

24
00:01:14.031 --> 00:01:18.008
And so setup has a very special
meaning for us in view because why?

25
00:01:18.008 --> 00:01:21.160
Anytime you basically see the setup
keyword, the lifecycle hook,

26
00:01:21.160 --> 00:01:24.213
you're basically ensured that
you're using composition API.

27
00:01:24.213 --> 00:01:27.902
I think that's one reason why the diagram
here actually has it in parentheses.

28
00:01:27.902 --> 00:01:32.386
This is because as we can see here,
prior to the setup function,

29
00:01:32.386 --> 00:01:34.056
there is nothing else.

30
00:01:34.056 --> 00:01:38.868
So this is what's interesting with the
composition API is that it happens before

31
00:01:38.868 --> 00:01:39.938
the options API.

32
00:01:39.938 --> 00:01:41.297
So what does that really mean?

33
00:01:41.297 --> 00:01:42.762
So we take a look at our code.

34
00:01:42.762 --> 00:01:47.535
I'm not hoping into the playground,
so that we can just kind of code some

35
00:01:47.535 --> 00:01:51.772
stuff without messing up Scylla view,
go into the playground.

36
00:01:51.772 --> 00:01:54.145
And then NPM run Dev.

37
00:01:54.145 --> 00:01:57.646
Boom, okay, we have a Pokedex ACC app and
it's running.

38
00:01:57.646 --> 00:02:04.175
Alright, so let's go ahead and
see what is going on here.

39
00:02:04.175 --> 00:02:06.534
For whatever reason, it did not open it.

40
00:02:06.534 --> 00:02:09.053
The actual folder,there we go.

41
00:02:09.053 --> 00:02:14.846
Okay, so close this,close this,
we're in playground right now.

42
00:02:14.846 --> 00:02:19.472
If we take a look at our app dot view,
you'll notice here that we're running

43
00:02:19.472 --> 00:02:23.031
a fetch and we're doing all
this stuff inside of created.

44
00:02:23.031 --> 00:02:26.444
Now, I mentioned that the set of function
actually happens before and knit.

45
00:02:26.444 --> 00:02:29.276
So actually if you think
about asynchronous,

46
00:02:29.276 --> 00:02:34.068
they really should be run in the setup
function, because that's its earliest

47
00:02:34.068 --> 00:02:37.562
point of starting sort of
like the component lifecycle.

48
00:02:37.562 --> 00:02:39.535
So how that might look is that we,

49
00:02:39.535 --> 00:02:43.350
actually would have a setup
function that's up here at the top.

50
00:02:43.350 --> 00:02:46.994
And the reason I think it's important
to organize your code this way and

51
00:02:46.994 --> 00:02:50.773
putting set up at the top is because
everything else below does not exist.

52
00:02:50.773 --> 00:02:55.275
And it's useful to kind of think of it
this way Is that this is what I'm doing

53
00:02:55.275 --> 00:02:56.279
inside of here.

54
00:02:56.279 --> 00:03:00.593
Now the thing that makes the composition
API particularly unique when it comes to

55
00:03:00.593 --> 00:03:04.280
view is that everything inside of
here is truly vanilla JavaScript.

56
00:03:04.280 --> 00:03:09.596
So in other words there's,
we can't just go like data, function,

57
00:03:09.596 --> 00:03:15.098
return, Pokedex like all this stuff
is gone because why,composition

58
00:03:15.098 --> 00:03:19.607
API is about I guess some call
it freedom and flexibility.

59
00:03:19.607 --> 00:03:21.594
One of the advantages
of options API is that,

60
00:03:21.594 --> 00:03:24.011
it provides a very consistent way for
you to add stuff.

61
00:03:24.011 --> 00:03:25.145
Here's where my data goes,

62
00:03:25.145 --> 00:03:28.040
here's where my methods go,
here's where my computer properties go.

63
00:03:28.040 --> 00:03:30.938
But over time, as people have scaled
their applications and components,

64
00:03:30.938 --> 00:03:33.882
there are times where people found that
they wanted to actually group things

65
00:03:33.882 --> 00:03:35.087
according to their concerns.

66
00:03:35.087 --> 00:03:38.126
And maybe find ways to organize
their codes in different ways.

67
00:03:38.126 --> 00:03:39.836
The composition API lets you do that.

68
00:03:39.836 --> 00:03:42.179
But what that means though,
is that it's a free for

69
00:03:42.179 --> 00:03:44.700
all in that you have to
organize everything yourself.

70
00:03:44.700 --> 00:03:49.906
So in the instance of setup,
let's have a reactive named variable,

71
00:03:49.906 --> 00:03:54.499
in this case for the region of
Pokemon that this is tracking.

72
00:03:54.499 --> 00:03:57.867
So the first thing is to remember
this is vanilla JavaScript so

73
00:03:57.867 --> 00:04:00.990
we actually have to declare
the variables manually now.

74
00:04:00.990 --> 00:04:07.462
So, const,
region name equals kanto, great.

75
00:04:07.462 --> 00:04:11.855
Now here's the thing though,
when we actually look at this.

76
00:04:11.855 --> 00:04:15.913
So, let's look inside the Dev tools,
and look at our app.

77
00:04:15.913 --> 00:04:21.228
We'll see here that nothing exist right
now, only the Pokedex is showing up.

78
00:04:21.228 --> 00:04:24.504
And the reason for that is because
once you're inside of setup view,

79
00:04:24.504 --> 00:04:25.970
is not doing any magic for you,

80
00:04:25.970 --> 00:04:29.490
you have to actually start being very
explicit about what's happening.

81
00:04:29.490 --> 00:04:32.953
So the thing about the composition
API is that inside of here,

82
00:04:32.953 --> 00:04:34.960
view is not doing any magic for you.

83
00:04:34.960 --> 00:04:36.783
So unlike when we're inside the data and

84
00:04:36.783 --> 00:04:39.953
methods where you can just call this
context and it knows to like this.

85
00:04:39.953 --> 00:04:43.927
That Pokedex knows to go inside of
data to go get the Pokedex, like,

86
00:04:43.927 --> 00:04:48.906
inside of here, everything is like, okay,
you want the freedom here's freedom.

87
00:04:48.906 --> 00:04:49.953
And so what does that mean?

88
00:04:49.953 --> 00:04:51.933
That means that at the end of setup,

89
00:04:51.933 --> 00:04:55.511
we actually have to manually
return anything we want to expose.

90
00:04:55.511 --> 00:04:57.966
And at first, that might sound
a little bit redundant, right?

91
00:04:57.966 --> 00:04:59.542
You're like, wait,
why would I want to do that?

92
00:04:59.542 --> 00:05:03.812
Well, because what you'll see now inside
the Dev tools is that, check it out,

93
00:05:03.812 --> 00:05:05.486
the region name is appearing.

94
00:05:05.486 --> 00:05:08.657
And the reason for that is because when
you're writing the JavaScript up here,

95
00:05:08.657 --> 00:05:11.517
you probably don't want everything
being exposed to your component.

96
00:05:11.517 --> 00:05:14.737
There are times certain things might be
called private, and there are things where

97
00:05:14.737 --> 00:05:17.543
you're running calculations that
aren't relevant to the template and

98
00:05:17.543 --> 00:05:18.698
to the rest of the component.

99
00:05:18.698 --> 00:05:21.245
And so that you can keep all up here.

100
00:05:21.245 --> 00:05:23.575
And what you're doing here
is that you're returning it.

101
00:05:23.575 --> 00:05:26.384
And so when you return it now it's
actually something that you can

102
00:05:26.384 --> 00:05:27.211
actually access.

103
00:05:27.211 --> 00:05:32.128
So let's say inside of this created
method, now it can be like log,

104
00:05:32.128 --> 00:05:33.782
this dot region name.

105
00:05:35.573 --> 00:05:38.007
And so we'll see now inside of here,
there you go.

106
00:05:38.007 --> 00:05:42.558
The created lifecycle hook now has
access to the data that we set up

107
00:05:42.558 --> 00:05:43.815
inside of setup.

108
00:05:43.815 --> 00:05:48.411
Didn't mean to do that, but
that's how it worked out, okay.

109
00:05:48.411 --> 00:05:50.332
So the question here is,

110
00:05:50.332 --> 00:05:55.369
I want the ability to run an async
function at this point, right?

111
00:05:55.369 --> 00:05:58.474
And so your first instinct might be like,
well, okay, this makes sense.

112
00:05:58.474 --> 00:06:02.958
What we're gonna do here
is we're gonna create a,

113
00:06:02.958 --> 00:06:08.904
Const of Pokedex, and we'll just
copy over this await function and

114
00:06:08.904 --> 00:06:15.499
then we'll just make sure that setup
is async because this isn't a await.

115
00:06:15.499 --> 00:06:19.014
And then we'll return the Pokedex here and
let's keep that actually alphabetical.

116
00:06:21.473 --> 00:06:25.730
And then since we're returning it anyways,
you don't need to define the data twice,

117
00:06:25.730 --> 00:06:26.500
so there we go.

118
00:06:26.500 --> 00:06:28.556
And then we actually don't even
need this method anymore, right?

119
00:06:28.556 --> 00:06:30.597
Cause we've just refactored it.

120
00:06:30.597 --> 00:06:34.365
And then,
we're running this inside of here.

121
00:06:34.365 --> 00:06:39.503
So actually now that I think about it,
we could just say, we just

122
00:06:39.503 --> 00:06:45.606
need to delete this and then ideally we
could then just say this dot Pokedex.

123
00:06:45.606 --> 00:06:48.992
So we just see the region name and
the Pokedex show up but

124
00:06:48.992 --> 00:06:52.538
you're gonna see view yelling
at you in a pretty big way.

125
00:06:52.538 --> 00:06:55.954
And I wanted to show this error because
most of the time this is not gonna be

126
00:06:55.954 --> 00:06:59.314
something you run into but
especially when you're getting started and

127
00:06:59.314 --> 00:07:02.129
you see this error it's probably
gonna be a bit confusing.

128
00:07:02.129 --> 00:07:04.429
Because you're gonna look at this and
if we read it,

129
00:07:04.429 --> 00:07:06.678
it says that set a function
returned a promise, but

130
00:07:06.678 --> 00:07:09.949
no suspense boundary has been defined and
that's a lot of words, right?

131
00:07:09.949 --> 00:07:11.813
You're like what the heck is going on?

132
00:07:11.813 --> 00:07:15.272
Well, so just to let what is suspense?

133
00:07:15.272 --> 00:07:17.140
So we look inside of the docks.

134
00:07:17.140 --> 00:07:21.825
Suspense is another built in component
that is experimental currently with view.

135
00:07:21.825 --> 00:07:25.915
And the idea behind this is that,
it's trying to help us better offload

136
00:07:25.915 --> 00:07:28.927
performance when it comes
to asynchronous option.

137
00:07:28.927 --> 00:07:32.132
So in the sense of like when you're
loading something asynchronously,

138
00:07:32.132 --> 00:07:33.243
you can have a fallback.

139
00:07:33.243 --> 00:07:39.674
So the way that code works as you can
see here, is that you can see here,

140
00:07:39.674 --> 00:07:43.936
so you would drop in
your suspense component.

141
00:07:43.936 --> 00:07:48.276
And okay, this is my dashboard that I'm
loading a bunch of async stuff happening,

142
00:07:48.276 --> 00:07:51.624
but in case that fails, or frankly,
it's not ready for me yet,

143
00:07:51.624 --> 00:07:54.305
I'm gonna go ahead and
fall back to this template.

144
00:07:54.305 --> 00:07:58.527
This syntax should look familiar to you,
because earlier, we talked about slots.

145
00:07:58.527 --> 00:08:00.511
And so here's that V slot fallback.

146
00:08:00.511 --> 00:08:04.612
And this is already defined
on the suspense component.

147
00:08:04.612 --> 00:08:08.692
And so what you'll end up seeing on
the pages you'll see loading first, and

148
00:08:08.692 --> 00:08:09.968
whenever it's ready,

149
00:08:09.968 --> 00:08:13.112
view will automatically switch
it over to the dashboard.

150
00:08:13.112 --> 00:08:15.053
And so this is actually really useful.

151
00:08:15.053 --> 00:08:18.695
But the key thing here though, to
understand though especially at this point

152
00:08:18.695 --> 00:08:20.945
in the recording,
is that it is experimental.

153
00:08:20.945 --> 00:08:23.495
So this is why at this moment we're
not gonna go into depth regarding

154
00:08:23.495 --> 00:08:24.849
how to use it and that kind of thing.

155
00:08:24.849 --> 00:08:28.764
Keep an eye on the dock if you wanna play
around with it, but know that this will

156
00:08:28.764 --> 00:08:32.700
probably be a pretty key part of a lot
of framework approaches going forward.

157
00:08:32.700 --> 00:08:36.524
As a lot of frameworks are trying to
figure out better ways of server-side

158
00:08:36.524 --> 00:08:40.535
rendering different things, and how to
improve performance when it comes to

159
00:08:40.535 --> 00:08:42.774
loading JavaScript on a page and so forth.

160
00:08:42.774 --> 00:08:48.102
Now, when it comes to our error though,
the reason this is a problem at this

161
00:08:48.102 --> 00:08:53.600
particular point in time is because if
we think about it from the tree itself,

162
00:08:53.600 --> 00:08:57.429
the app dot view is the root
component of everything.

163
00:08:57.429 --> 00:09:02.280
So you can really suspend your root
component in a state of nothingness,

164
00:09:02.280 --> 00:09:03.641
that does not work.

165
00:09:03.641 --> 00:09:06.935
And so what you actually have to do is
that, in the case that you really do need

166
00:09:06.935 --> 00:09:09.203
to do asynchronous operations
in composition API.

167
00:09:09.203 --> 00:09:11.396
This is where you need to
put it into a component,

168
00:09:11.396 --> 00:09:14.301
because the app dot view basically
needs to be in a stable state.

169
00:09:14.301 --> 00:09:16.006
That's like, Okay,
I know where everything is and

170
00:09:16.006 --> 00:09:17.845
then this component over here
is going to do some stuff.

171
00:09:17.845 --> 00:09:19.839
I'm gonna hang on to it and
give it a backup.

172
00:09:19.839 --> 00:09:21.531
And then I can do other stuff over here.

173
00:09:21.531 --> 00:09:25.925
But we spend app dot view the whole thing,
basically, because of how asynchronous

174
00:09:25.925 --> 00:09:29.341
operations work, it just runs
the risk of corrupting it right?

175
00:09:29.341 --> 00:09:33.791
So this is why we don't run async
setup at the root level at app View.

176
00:09:33.791 --> 00:09:37.280
So to show how this works then is,
we're gonna go ahead and

177
00:09:37.280 --> 00:09:39.499
create a component called Pokedex.

178
00:09:39.499 --> 00:09:42.877
And this is where we're gonna go ahead and

179
00:09:42.877 --> 00:09:47.894
then we'll have our script tag and
we'll have our template,

180
00:09:47.894 --> 00:09:53.512
if it would auto complete sometime
Emette is uncooperative with me.

181
00:09:53.512 --> 00:09:54.528
Okay, great.

182
00:09:54.528 --> 00:09:58.498
So let's go ahead and blow this up into
two columns, so that's easier to follow.

183
00:09:58.498 --> 00:10:03.040
We'll go ahead and bring over this
asynchronous request right here.

184
00:10:03.040 --> 00:10:04.590
Actually, we can bring over
the whole script blog.

185
00:10:04.590 --> 00:10:06.144
What am I talking about?

186
00:10:06.144 --> 00:10:10.425
Bring over the whole thing,
which is great.

187
00:10:10.425 --> 00:10:15.107
And then this means that this script block
is actually no longer needed on this app.

188
00:10:15.107 --> 00:10:18.333
Otherwise we do need
a script block because why,

189
00:10:18.333 --> 00:10:20.388
we need to import our Pokedex.

190
00:10:20.388 --> 00:10:26.248
So Pokedex from components
Pokedex Dot View,

191
00:10:26.248 --> 00:10:32.117
and then we can register
it on the components.

192
00:10:32.117 --> 00:10:34.860
And then we have Pokedex like that.

193
00:10:34.860 --> 00:10:38.108
&gt;&gt; We've got a case mix-up in the--
&gt;&gt; We have a case mix-up?

194
00:10:38.108 --> 00:10:39.777
With you, I did that again.

195
00:10:39.777 --> 00:10:41.551
Thank you for catching that.

196
00:10:41.551 --> 00:10:45.231
This is sometimes the trouble
with the context switch.

197
00:10:45.231 --> 00:10:49.217
Okay, so inside of here, we'll have
our template here for the pre-fetch.

198
00:10:49.217 --> 00:10:51.801
We don't even need this anymore,
this button.

199
00:10:51.801 --> 00:10:55.938
So all this is gonna do is
render that as a pre block and

200
00:10:55.938 --> 00:11:01.314
mean we can take this here and
then we get the Pokedex like this okay.

201
00:11:01.314 --> 00:11:07.079
So let's take a look and see if this
worked out the way we wanted it to, okay.

202
00:11:07.079 --> 00:11:12.243
So, first thing first, we'll see that when
we're taking a look at this right now,

203
00:11:12.243 --> 00:11:14.133
it's still yelling at us, but

204
00:11:14.133 --> 00:11:17.786
we actually are seeing something
rendered unlike before.

205
00:11:17.786 --> 00:11:20.008
And it's because in this particular case,

206
00:11:20.008 --> 00:11:23.625
it's true we still need to actually
suspense Component at this point.

207
00:11:23.625 --> 00:11:25.954
And so like I said, we're just going
to cover a high level uses of it.

208
00:11:25.954 --> 00:11:28.612
We're not going to dive deep
into suspense as a component.

209
00:11:28.612 --> 00:11:32.659
Because again, if we think about it from a
view perspective is that view, is saying,

210
00:11:32.659 --> 00:11:34.477
I don't know what to do with this yet.

211
00:11:34.477 --> 00:11:37.549
So please give me some sort of fallback so
that in case this thing completely

212
00:11:37.549 --> 00:11:40.981
crashes, we don't have this hanging
component that's not going to do anything.

213
00:11:40.981 --> 00:11:43.897
So we bring in our suspense component.

214
00:11:43.897 --> 00:11:46.591
And we say, Okay,
this is what I want you to render.

215
00:11:46.591 --> 00:11:52.067
But in case things don't work,
here's the fallback

216
00:11:52.067 --> 00:11:57.432
where we say loading Pokedex data,
just like that.

217
00:11:57.432 --> 00:12:02.328
Suspense, suspense,

218
00:12:02.328 --> 00:12:06.995
suspense ,bom bom.

219
00:12:06.995 --> 00:12:08.847
Yes, I already know that, okay.

220
00:12:08.847 --> 00:12:09.433
So why?

221
00:12:09.433 --> 00:12:11.363
Let's restart the server real quick,

222
00:12:11.363 --> 00:12:14.472
just to make sure that's not
anything weird getting botched.

223
00:12:14.472 --> 00:12:16.670
&gt;&gt; You don't have to import suspense?

224
00:12:16.670 --> 00:12:19.859
&gt;&gt; No import,
It's kind of like the global component.

225
00:12:19.859 --> 00:12:22.815
It's just a global component
that's registered.

226
00:12:22.815 --> 00:12:26.092
Now What's weird?

227
00:12:26.092 --> 00:12:27.976
I forgot, yeah.

228
00:12:27.976 --> 00:12:32.404
Okay, so inside of here you're thinking
I did the suspense right, right?

229
00:12:32.404 --> 00:12:34.988
I did it inside of my component
because I gave it a fallback.

230
00:12:34.988 --> 00:12:38.790
But this approach doesn't work because
if we think about it another way,

231
00:12:38.790 --> 00:12:40.707
it's happening at the child level.

232
00:12:40.707 --> 00:12:44.456
And if we look at the error messages
again, it actually says that the suspense

233
00:12:44.456 --> 00:12:46.716
boundary needs to be
found at the parent tree.

234
00:12:46.716 --> 00:12:49.873
Because if you think about it another way,
remember how we used to do the VF?

235
00:12:49.873 --> 00:12:53.765
This is the same kinda concept where you
want the VF actually happening at the top

236
00:12:53.765 --> 00:12:56.919
for something like suspense,
because it knows what to handle.

237
00:12:56.919 --> 00:13:01.880
So, if I go ahead and delete this
stuff again,this time we can actually

238
00:13:01.880 --> 00:13:04.951
say we'll have a suspense component here.

239
00:13:04.951 --> 00:13:08.668
That will then render out the Pokedex
component when it's ready otherwise

240
00:13:08.668 --> 00:13:11.925
fallback to this text that's
actually what's happening here.

241
00:13:11.925 --> 00:13:16.052
And once we do that,
now everything is working as expected.

242
00:13:16.052 --> 00:13:18.825
So again the API for
suspense is experimental but

243
00:13:18.825 --> 00:13:22.949
this mental model now of having
the ability to suspend your component and

244
00:13:22.949 --> 00:13:27.476
then have it switch out with some sort of
fallback is something that is going to be

245
00:13:27.476 --> 00:13:30.196
more popular with frameworks,
not just view.

246
00:13:30.196 --> 00:13:33.646
And so something that I wanted you all
to keep in mind when it came to that.

