WEBVTT

1
00:00:00.990 --> 00:00:03.479
So let's go ahead and
jump back into the code.

2
00:00:03.479 --> 00:00:06.338
As we can see here,
we have a lot going on right now.

3
00:00:06.338 --> 00:00:09.309
And since we're talking about kind of
a new concept in regards to fetching async

4
00:00:09.309 --> 00:00:11.142
data, let's go and
clean this up a bit, right?

5
00:00:11.142 --> 00:00:15.193
So I'm gonna migrate this over
into a separate scratchpad.

6
00:00:15.193 --> 00:00:20.454
And so instead of components, I'm going
to just create a scratchpad.vue file and

7
00:00:20.454 --> 00:00:24.224
we're just gonna migrate
everything from App.vue over.

8
00:00:24.224 --> 00:00:26.324
And that way you have
that as reference for

9
00:00:26.324 --> 00:00:29.600
later on if you wanna see
exactly what happened.

10
00:00:29.600 --> 00:00:37.190
So clean this up and keep this
a standard New, basically a New App.

11
00:00:37.190 --> 00:00:42.157
Great, and I'll go ahead and
commit that to the branch.

12
00:00:42.157 --> 00:00:47.238
Let's see, refactor move code

13
00:00:47.238 --> 00:00:51.758
to scratchpad, all right?

14
00:00:51.758 --> 00:00:56.357
Great, all right, so the question here is,
the data we've been working with so far,

15
00:00:56.357 --> 00:00:58.058
if we take a look at scratchpad,

16
00:00:58.058 --> 00:01:01.155
everything is something that
we've defined ourselves.

17
00:01:01.155 --> 00:01:04.520
And we're assuming basically that we
always have full control of the data.

18
00:01:04.520 --> 00:01:06.278
And if that were really the case for
front end development,

19
00:01:06.278 --> 00:01:07.449
I think it allows would be a lot easier.

20
00:01:07.449 --> 00:01:11.176
But the reality is we have to fetch
data from the backend a lot of times and

21
00:01:11.176 --> 00:01:13.365
we got to figure out
how to deal with that.

22
00:01:13.365 --> 00:01:15.589
So we've we take the tools
that we have right now and

23
00:01:15.589 --> 00:01:17.054
think about how we might do that.

24
00:01:17.054 --> 00:01:19.172
Let's go ahead and use the Pokeapi,

25
00:01:19.172 --> 00:01:23.201
which is one of my favorites when it
comes to working with sample data,

26
00:01:23.201 --> 00:01:26.910
because I think Pokemon was a fun
thing for me growing up as a kid.

27
00:01:26.910 --> 00:01:31.073
And so basically, this is a pretty
impressive database in terms of being able

28
00:01:31.073 --> 00:01:35.893
to fetch things about individual Pokemon,
fetch it by region, it's darn impressive.

29
00:01:35.893 --> 00:01:39.133
So, the URL we're gonna be using,
I'm gonna go ahead and

30
00:01:39.133 --> 00:01:41.727
add a comment up here is,
this pokeapi.com.

31
00:01:41.727 --> 00:01:44.801
And you notice the main thing is that
it just fetches the Pokemon, and

32
00:01:44.801 --> 00:01:46.237
it limited to the first 151.

33
00:01:46.237 --> 00:01:50.008
So in other words,
the original 151 Pokemon.

34
00:01:50.008 --> 00:01:53.790
So our first goal here is to say, okay,
how do we fetch that data down from

35
00:01:53.790 --> 00:01:56.396
the back end and
actually render it onto our page?

36
00:01:56.396 --> 00:01:58.617
Well, first thing first, let's go and
set up our app real quick.

37
00:01:58.617 --> 00:02:00.415
We'll export default and object.

38
00:02:00.415 --> 00:02:05.408
And for our reactive data property, let's
go ahead and just have a Pokedex array.

39
00:02:05.408 --> 00:02:07.409
And then again,
let me actually add some items in here so

40
00:02:07.409 --> 00:02:09.163
we can actually see it when
we show it on the page.

41
00:02:09.163 --> 00:02:15.394
Let's go ahead and show that real quick to
make sure everything's wired up correctly.

42
00:02:15.394 --> 00:02:16.857
And there we go our array's showing up.

43
00:02:16.857 --> 00:02:18.519
The next thing we wanna do is
add some sort of method, right?

44
00:02:18.519 --> 00:02:23.711
Because we need to actually call this
thing, so you might think okay so

45
00:02:23.711 --> 00:02:28.728
we have a method called fetchPokemon and
it will use the fetch API and

46
00:02:28.728 --> 00:02:32.177
then we'll go ahead and
grab this URL up here.

47
00:02:32.177 --> 00:02:32.700
Oops, there we go.

48
00:02:32.700 --> 00:02:35.301
And then what we need to do though is
that ,oftentimes when you fetch data from

49
00:02:35.301 --> 00:02:36.910
the backend,
you need to actually JSON a file.

50
00:02:36.910 --> 00:02:39.271
In other words,
you need to convert it to JSON, so

51
00:02:39.271 --> 00:02:41.817
you can actually parse it
correctly on the frontend.

52
00:02:41.817 --> 00:02:46.009
And so the way you do that is you take
the response that you're given, and

53
00:02:46.009 --> 00:02:47.490
you do response.json.

54
00:02:47.490 --> 00:02:50.258
And so what we wanna do though is,
we don't only want to fetch this,

55
00:02:50.258 --> 00:02:52.780
we want actually assign
this to our Pokedex right?

56
00:02:52.780 --> 00:02:56.720
So we're gonna do this.pokedex=fetch.

57
00:02:56.720 --> 00:02:58.532
But we're not quite done, because what?

58
00:02:58.532 --> 00:03:00.136
Fetch is an async operation, and

59
00:03:00.136 --> 00:03:03.471
right now everything we're writing
is in a synchronous operation.

60
00:03:03.471 --> 00:03:07.100
So in other words here, what we got to do
is we got to say, hey, we have to wait for

61
00:03:07.100 --> 00:03:08.962
fetch to finish before we do this thing.

62
00:03:08.962 --> 00:03:12.411
And since we need to await the thing,
we need to actually make sure we tell Vue,

63
00:03:12.411 --> 00:03:14.416
hey, by the way,
this is an async function.

64
00:03:14.416 --> 00:03:17.590
This is gonna happen asynchronously.

65
00:03:17.590 --> 00:03:20.508
Great, we have our method and so, all
right, we wanna fetch the thing, right?

66
00:03:20.508 --> 00:03:21.869
So we have a button and

67
00:03:21.869 --> 00:03:26.269
when we click the button this is
when we wanna run that fetchPokemon.

68
00:03:26.269 --> 00:03:29.184
So fetchPokemon like that.

69
00:03:29.184 --> 00:03:30.460
Great, let's see what happens now.

70
00:03:30.460 --> 00:03:35.600
If we click, hey, everything's there,
just as we expect, this is exciting.

71
00:03:35.600 --> 00:03:38.845
But if we think about the real world
scenario, while there are cases where

72
00:03:38.845 --> 00:03:41.879
you'll be running async functions
on specific user interactions,

73
00:03:41.879 --> 00:03:44.545
the reality is a lot of times
when someone's loading a page,

74
00:03:44.545 --> 00:03:47.973
that's probably when you're actually
gonna be wanting to fetch that data.

75
00:03:47.973 --> 00:03:51.081
And more importantly, you want to
fetch it at a specific timeframe.

76
00:03:51.081 --> 00:03:53.988
And so this is where the concept of
lifecycle hooks comes into play,

77
00:03:53.988 --> 00:03:56.135
when we're talking about
frontend frameworks.

78
00:03:56.135 --> 00:03:58.330
And I think most of them do have them.

79
00:03:58.330 --> 00:04:00.630
So, let's take a look at the diagram for
lifecycle hooks for vue.

80
00:04:00.630 --> 00:04:03.103
And we're gonna take a look at
the one directly on the docs,

81
00:04:03.103 --> 00:04:05.987
because I want you all to be able to
kind of get familiar with the docs.

82
00:04:05.987 --> 00:04:09.861
Because Vue has an entire team dedicated
to trying to make sure that the docs

83
00:04:09.861 --> 00:04:11.351
are as top notch as they can.

84
00:04:11.351 --> 00:04:13.354
And that basically this
information is free and

85
00:04:13.354 --> 00:04:16.470
available to you whenever it's time for
you to dive into these problems.

86
00:04:17.760 --> 00:04:19.331
And so if you take a look at here,

87
00:04:19.331 --> 00:04:22.390
here we can see an actual diagram
of how the lifecycle works.

88
00:04:22.390 --> 00:04:25.702
And so you can see the Vue what it starts
to do is the render kicks it off, and

89
00:04:25.702 --> 00:04:29.300
then it runs a setup lifecycle hook,
which again we'll talk more about later.

90
00:04:29.300 --> 00:04:32.297
But you can see that what it's doing is,
it's going through and

91
00:04:32.297 --> 00:04:35.610
at each of these steps where you
see the rounded outlined rectangle.

92
00:04:35.610 --> 00:04:39.570
So we have setup before created,
before mount.

93
00:04:39.570 --> 00:04:43.740
All of these are different points
inside of the lifecycle of a component.

94
00:04:43.740 --> 00:04:47.634
And what that mean is, you can actually
basically interject different code,

95
00:04:47.634 --> 00:04:49.820
depending on where you need it to run.

96
00:04:49.820 --> 00:04:51.090
So for example,
you see here that what is it doing?

97
00:04:51.090 --> 00:04:55.342
First it starts to encounters a component,
it starts to initialize the options API,

98
00:04:55.342 --> 00:04:58.128
and then starts to do some checks,
basically, right?

99
00:04:58.128 --> 00:05:00.300
And then it starts to
render the component.

100
00:05:00.300 --> 00:05:03.210
It'll actually mount the thing
to the actual window.

101
00:05:03.210 --> 00:05:05.780
Basically, you start to
actually see the thing.

102
00:05:05.780 --> 00:05:07.964
And then finally,
if you're deleting something,

103
00:05:07.964 --> 00:05:09.610
it will unmount the thing from the DOM.

104
00:05:09.610 --> 00:05:13.794
And so to be clear,
I do not expect any of you to understand,

105
00:05:13.794 --> 00:05:16.578
the effect of what's happening here.

106
00:05:16.578 --> 00:05:20.116
But suffice to know that you can refer
to this at any point in the future when

107
00:05:20.116 --> 00:05:23.542
you're trying to get a little bit more
nuanced about where you want your

108
00:05:23.542 --> 00:05:24.191
code to run.

109
00:05:24.191 --> 00:05:28.175
For the purposes of our exercise though,
we have to think about it like this if we

110
00:05:28.175 --> 00:05:32.336
wait for the component to mount before we
actually start running the code to fetch,

111
00:05:32.336 --> 00:05:34.845
we know that asynchronous
calls can take a while.

112
00:05:34.845 --> 00:05:38.761
And what we wanna do is try to improve our
user experience by ensuring that users get

113
00:05:38.761 --> 00:05:40.429
that data as quickly as possible.

114
00:05:40.429 --> 00:05:41.530
Which means what?

115
00:05:41.530 --> 00:05:44.612
We wanna actually try to initiate that
fetch before the component even renders to

116
00:05:44.612 --> 00:05:45.550
the screen.

117
00:05:45.550 --> 00:05:47.056
That way you call it, we try to time it so

118
00:05:47.056 --> 00:05:48.886
that by the time the component
hits the screen,

119
00:05:48.886 --> 00:05:51.930
you're hoping that the async data
basically has hopefully finished by then.

120
00:05:51.930 --> 00:05:55.779
And so if we take a look at where that is,
basically the way to think of it in your

121
00:05:55.779 --> 00:05:59.337
head at this point is the mounted
lifecycle hook is when it's basically

122
00:05:59.337 --> 00:06:02.390
showing up on the screen,
that's the way to think about it.

123
00:06:03.670 --> 00:06:06.837
And so in other words,
you have the ability to say beforeMount,

124
00:06:06.837 --> 00:06:08.135
there's one right here.

125
00:06:08.135 --> 00:06:11.270
But then there's also a couple of
steps happening before beforeMount.

126
00:06:11.270 --> 00:06:16.227
So actually we even have the created
lifecycle hook and the beforeCreate.

127
00:06:16.227 --> 00:06:19.042
But there's a key thing that
you'll notice here though,

128
00:06:19.042 --> 00:06:22.387
is that with beforeCreate This is
happening before the Options API.

129
00:06:22.387 --> 00:06:23.210
And so what does that mean?

130
00:06:23.210 --> 00:06:25.760
I think it'll be easier if I show
you this inside of the code.

131
00:06:26.890 --> 00:06:30.550
So let me go ahead and bump this over.

132
00:06:30.550 --> 00:06:33.028
Okay, so
if you take a look at this right now,

133
00:06:33.028 --> 00:06:36.948
we mentioned yesterday that passing
an object in order to define how our

134
00:06:36.948 --> 00:06:39.650
component is working is
called the Options API.

135
00:06:39.650 --> 00:06:42.840
Cuz we see here there are data,
there are methods.

136
00:06:42.840 --> 00:06:46.570
And so similarly, we have the ability
to call lifecycle hooks on there.

137
00:06:46.570 --> 00:06:50.340
So we have, what do we see earlier
beforeCreate was one of them.

138
00:06:50.340 --> 00:06:52.900
And so beforeCreate can be
a function that we run.

139
00:06:52.900 --> 00:06:57.577
So all I'm gonna do here is
I'm gonna log beforeCreate and

140
00:06:57.577 --> 00:07:01.209
then we're gonna try to log this.pokedex.

141
00:07:01.209 --> 00:07:04.279
And then we're gonna log
the created lifecycle hook.

142
00:07:04.279 --> 00:07:09.195
So this is basically how you're going to
call the individual lifecycle hooks is by

143
00:07:09.195 --> 00:07:13.897
basically the name right here, that we
see here this is a little small right now

144
00:07:13.897 --> 00:07:16.050
because of the mobile responsive.

145
00:07:16.050 --> 00:07:18.438
And then just basically
calling it as a function, and

146
00:07:18.438 --> 00:07:20.250
that's how you actually reference it.

147
00:07:20.250 --> 00:07:22.957
So when created now we'll do a log create.

148
00:07:24.840 --> 00:07:27.868
And then design this is
when it's been created.

149
00:07:27.868 --> 00:07:30.890
And this time we'll log this.pokedex.

150
00:07:30.890 --> 00:07:33.130
Okay, what's gonna happen here?

151
00:07:33.130 --> 00:07:38.130
Well, if we take a look inside of our
dev tools, you'll notice something here.

152
00:07:38.130 --> 00:07:42.680
Is that before create gets logged,
but then this.pokedex does not exist.

153
00:07:44.150 --> 00:07:48.491
However, then once created does, you'll
see .pokedex does exist and inside of this

154
00:07:48.491 --> 00:07:52.470
proxy here, you'll see the inside of
the target, which you wanna open up.

155
00:07:52.470 --> 00:07:55.930
That's where you'll see the actual
value of what's happening.

156
00:07:55.930 --> 00:07:59.830
And so we think about it in another way if
we rearrange this for our mental model.

157
00:07:59.830 --> 00:08:04.520
Before create is actually happening,
all this stuff below here even exists.

158
00:08:04.520 --> 00:08:07.678
And so if that's the case, that means
that when you're using the options API,

159
00:08:07.678 --> 00:08:10.981
beforeCreate is probably not actually the
best place to be running an asynchronous

160
00:08:10.981 --> 00:08:13.700
function, because at this point,
nothing exists.

161
00:08:13.700 --> 00:08:17.578
So what we wanna make sure we do then, is
to basically say when it's been created,

162
00:08:17.578 --> 00:08:19.620
remember crate is not the same as mounted.

163
00:08:19.620 --> 00:08:22.650
There's a bunch of stuff happening before
it's actually mounted to the page.

164
00:08:22.650 --> 00:08:24.979
Once it's been creative,
this is where we're gonna say,

165
00:08:24.979 --> 00:08:26.470
let's kick off our function.

166
00:08:26.470 --> 00:08:30.463
So we can do is we can
then go this.fetchPokemon.

167
00:08:32.271 --> 00:08:35.280
Now we save this though, you'll see, boom.

168
00:08:35.280 --> 00:08:38.625
All of a sudden without clicking anything,
it did exactly what we wanted to.

169
00:08:38.625 --> 00:08:42.594
Which is, the user hit the page, the vue
did its thing to go fetch the data,

170
00:08:42.594 --> 00:08:44.741
it immediately showed up on the screen.

171
00:08:46.280 --> 00:08:52.184
Okay, How do people feel about
those concepts, that makes sense?

172
00:08:52.184 --> 00:08:52.713
Question.

173
00:08:52.713 --> 00:08:57.856
&gt;&gt; Are those hooks promise aware if
you were to return the promise to

174
00:08:57.856 --> 00:09:03.490
this fetchPokemon, would it pause
continuation until it returned?

175
00:09:03.490 --> 00:09:06.380
&gt;&gt; So your question here is around
whether the lifecycle hooks are aware?

176
00:09:06.380 --> 00:09:08.280
Could you actually could you
returned a promise instead?

177
00:09:08.280 --> 00:09:12.759
&gt;&gt; Yes, would the created not
continue until the promise resolves.

178
00:09:12.759 --> 00:09:18.606
If you want to do for some reason not but
until the promise is fully resolved?

179
00:09:18.606 --> 00:09:20.530
&gt;&gt; Before you actually move on
to the next hook, basically.

180
00:09:20.530 --> 00:09:21.355
&gt;&gt; Yeah.

181
00:09:21.355 --> 00:09:24.842
&gt;&gt; So in this regard you don't want so
run it.

182
00:09:24.842 --> 00:09:27.630
I don't see why that won't be possible.

183
00:09:27.630 --> 00:09:30.899
Vue usually has ways for
you to break those things apart so

184
00:09:30.899 --> 00:09:32.747
that you can basically stop it.

185
00:09:32.747 --> 00:09:36.040
And so to be clear this is a little
bit beyond the scope of the intro.

186
00:09:36.040 --> 00:09:39.496
So if this goes a little beyond what
your current knowledge, don't worry.

187
00:09:39.496 --> 00:09:43.896
But basically, if you've heard of things
like nextTick inside of code bases,

188
00:09:43.896 --> 00:09:48.232
that's where people are manually
initiating different stages to ensure that

189
00:09:48.232 --> 00:09:51.336
either different frames
are being skipped or moved on.

190
00:09:51.336 --> 00:09:54.790
And so just know that if you're trying to
intentionally stop it at the lifecycle,

191
00:09:54.790 --> 00:09:55.430
&gt;&gt; [INAUDIBLE]

192
00:09:55.430 --> 00:09:56.578
&gt;&gt; You probably have to dig into it just

193
00:09:56.578 --> 00:09:57.660
to figure out how that will work.

194
00:09:57.660 --> 00:10:00.374
Cuz normally, Vue as you can see,
it tries to optimize it.

195
00:10:00.374 --> 00:10:03.678
Cuz normally you might
even expect at this point,

196
00:10:03.678 --> 00:10:06.360
let me go back to the code, and close up.

197
00:10:06.360 --> 00:10:09.085
this.fetchPokemon is
an asynchronous function.

198
00:10:09.085 --> 00:10:15.549
And so here's the thing, if we were
to call the fetch directly here,

199
00:10:15.549 --> 00:10:21.415
and we did an await, okay, So
let me do this real quick.

200
00:10:21.415 --> 00:10:26.451
And then let's just const response= this,

201
00:10:26.451 --> 00:10:30.436
and that says log response, okay?

202
00:10:30.436 --> 00:10:35.446
So, all right, you'll see already
that vue is yelling at me because if

203
00:10:35.446 --> 00:10:40.789
you actually manually define it in a way
keyword inside of a lifecycle hook,

204
00:10:40.789 --> 00:10:45.396
it will ask that you actually
defined the async on that directly.

205
00:10:45.396 --> 00:10:48.892
However since we're not doing that
since we actually have the async

206
00:10:48.892 --> 00:10:52.457
already defined on the function,
this is why this code still works.

207
00:10:52.457 --> 00:10:56.682
But otherwise to your question, and yeah,
I would just dive further in into how to

208
00:10:56.682 --> 00:11:00.670
get it to pause, but otherwise you
should be able to do what you want.

209
00:11:00.670 --> 00:11:02.446
So when it comes to lifecycle hooks,

210
00:11:02.446 --> 00:11:05.557
basically I would say the ones to
really know about are created.

211
00:11:05.557 --> 00:11:07.716
Because that's usually where you're
gonna be running your async functions.

212
00:11:07.716 --> 00:11:11.257
And then if you really have something
that you really want to happen right when

213
00:11:11.257 --> 00:11:14.253
the component is mounted,
then I've seen a lot of beforeMount or

214
00:11:14.253 --> 00:11:15.900
mounted used for those scenarios.

215
00:11:15.900 --> 00:11:19.840
We might want to time either some sort
of animation or that kind of thing.

216
00:11:19.840 --> 00:11:22.582
But otherwise, just know that create
is kind of gonna be your bread and

217
00:11:22.582 --> 00:11:25.150
butter when using the Options API for
doing asynchronous calls.

218
00:11:26.870 --> 00:11:30.028
Okay, and so the other thing that
I wanna cover too, let's go and

219
00:11:30.028 --> 00:11:37.204
actually commit this real quick,
To status feature,

220
00:11:37.204 --> 00:11:41.980
pokedex fetch api call, right?.

221
00:11:41.980 --> 00:11:45.577
Okay, so if we're taking a look at
the code that we have right now,

222
00:11:45.577 --> 00:11:50.273
you'll notice that if you check that 09-
begin branch you'll notice there's a new

223
00:11:50.273 --> 00:11:52.620
project in here called c'est-la-vue.

224
00:11:52.620 --> 00:11:55.260
And so for those not familiar with
the friend c'est-la-vue just mean

225
00:11:55.260 --> 00:11:55.924
that it's life.

226
00:11:55.924 --> 00:11:58.952
This is life and so this is vue
&gt;&gt; So

227
00:11:58.952 --> 00:12:01.570
inside of here, we actually do
have a little bit happening here.

228
00:12:01.570 --> 00:12:04.900
So I do wanna walk through this
with you because going forward for

229
00:12:04.900 --> 00:12:08.662
the rest of the day, I will try to sort
of centralize the exercises around

230
00:12:08.662 --> 00:12:12.550
cest-la-vue in order to just provide
some context and basically give you

231
00:12:12.550 --> 00:12:16.891
the experience of walking into a project
that already had some call it legacy code.

232
00:12:16.891 --> 00:12:18.970
And that way you feel
you're working with stuff.

233
00:12:18.970 --> 00:12:22.906
But that said, I wanna emphasize, if you
feel more comfortable just working with

234
00:12:22.906 --> 00:12:26.750
your TV show form app to apply these
concepts, please feel free to do so.

235
00:12:26.750 --> 00:12:29.366
I just wanted to provide different
contexts to allow you that

236
00:12:29.366 --> 00:12:32.630
practice of seeing what it's like
when working with code bases.

237
00:12:32.630 --> 00:12:38.048
So let's go and switch over in here
real quick into c'est-la-vue and

238
00:12:38.048 --> 00:12:40.315
let's go ahead and run that.

239
00:12:40.315 --> 00:12:43.199
npm run dev, great.

240
00:12:43.199 --> 00:12:49.134
And now if we open up here,
It's on seven for

241
00:12:49.134 --> 00:12:52.140
now, that's right, because the other
one's running, makes sense.

242
00:12:52.140 --> 00:12:53.852
Okay, here we go.

243
00:12:53.852 --> 00:12:54.805
We have c'est-la-vue.

244
00:12:54.805 --> 00:12:57.996
It's a very fairly simple app, but
it has a little bit of styling this time.

245
00:12:57.996 --> 00:13:00.606
So not just raw HTML and
whatever the browser provides.

246
00:13:00.606 --> 00:13:04.833
And we have a home and loginPage,
or at least what appears to be.

247
00:13:04.833 --> 00:13:07.462
If we take a look at our app.vue,
you'll notice that there

248
00:13:07.462 --> 00:13:10.000
are two components that
are already pre-built for you.

249
00:13:10.000 --> 00:13:12.340
There's a homepage and a login page.

250
00:13:13.760 --> 00:13:16.891
You'll notice though that at this
point there still is no, actually,

251
00:13:16.891 --> 00:13:18.260
you wouldn't notice, okay.

252
00:13:18.260 --> 00:13:20.690
Actually, I can show you how
you wouldn't notice this.

253
00:13:20.690 --> 00:13:22.409
If you look inside the package.json,

254
00:13:22.409 --> 00:13:24.860
you'll see there's still
no router library.

255
00:13:24.860 --> 00:13:27.230
So there's no like paths being changed or
anything right now.

256
00:13:27.230 --> 00:13:31.110
What we're doing here is that traditional
single page application model,

257
00:13:31.110 --> 00:13:35.430
which is every JavaScript trying to manage
everything, and so it's routed there.

258
00:13:36.460 --> 00:13:40.064
And so what's actually happening here,
if you have this reactive data that's

259
00:13:40.064 --> 00:13:43.630
tracking which the state of
the current page quote unquote.

260
00:13:43.630 --> 00:13:47.450
And so here we have two methods that
assign the current page to home or login.

261
00:13:47.450 --> 00:13:50.311
And then down here,
we have the ability to say, okay, well,

262
00:13:50.311 --> 00:13:53.280
if the current page is home,
show this component.

263
00:13:53.280 --> 00:13:58.611
If current page is login, or
actually in this case it's an else.

264
00:13:58.611 --> 00:14:02.307
But as you can see that's like your basic
check to see what we're swapping between.

