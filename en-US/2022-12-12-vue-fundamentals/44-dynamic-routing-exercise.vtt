WEBVTT

1
00:00:00.000 --> 00:00:04.017
What I want you to do is on sailor view,
go ahead and the user page,

2
00:00:04.017 --> 00:00:05.490
we had a bunch of users.

3
00:00:05.490 --> 00:00:09.293
Go ahead and just make those
links that you can click so

4
00:00:09.293 --> 00:00:14.545
you can go to their specific ID, and
then show that users basically data.

5
00:00:14.545 --> 00:00:16.862
And don't worry about the nested
routes bonus, but I mean,

6
00:00:16.862 --> 00:00:19.150
if you happen to have the time,
feel free to check that out.

7
00:00:19.150 --> 00:00:21.535
The other part of the exercise I
totally forgot is that you know,

8
00:00:21.535 --> 00:00:22.430
there's a login page.

9
00:00:22.430 --> 00:00:25.659
Basically, what I want you to do is just
check to make sure that the user types

10
00:00:25.659 --> 00:00:28.996
an email in there, just something basic,
you don't need a full regex thing.

11
00:00:28.996 --> 00:00:31.926
Maybe check that the characters
are greater than three and

12
00:00:31.926 --> 00:00:33.132
includes an at symbol.

13
00:00:33.132 --> 00:00:36.081
And if that happens,
then when they click login,

14
00:00:36.081 --> 00:00:38.975
allow the user to navigate
over to another page.

15
00:00:38.975 --> 00:00:40.940
So whether you want to
navigate to the Users page.

16
00:00:40.940 --> 00:00:43.408
Practice that programmatic navigation.

17
00:00:46.736 --> 00:00:51.313
So the way this is gonna work is we're
gonna go inside of our cest-la-vue.

18
00:00:51.313 --> 00:00:56.297
I keep messing that up actually,
cd cest-la-vue, and then run dev.

19
00:00:56.297 --> 00:00:57.451
Looks like we're good.

20
00:00:57.451 --> 00:01:01.686
And then inside of Chrome,
boom, there we are.

21
00:01:01.686 --> 00:01:06.384
74 I just realized cuz I have to running,
great.

22
00:01:06.384 --> 00:01:09.790
Okay, so the exercise here
was go into the login, and

23
00:01:09.790 --> 00:01:13.514
I started by programmatically
navigating it somewhere.

24
00:01:13.514 --> 00:01:17.545
So inside of our source, inside of our
views, we're gonna look at our login page.

25
00:01:17.545 --> 00:01:21.081
And all right, we're just basically gonna
do a quick check to make sure we actually

26
00:01:21.081 --> 00:01:21.745
have an email.

27
00:01:21.745 --> 00:01:24.127
So again,
we're not doing anything too fancy here.

28
00:01:24.127 --> 00:01:28.958
We're just going to v-model to something
called as user, or as the emailInput.

29
00:01:28.958 --> 00:01:30.202
That's what I'll call it.

30
00:01:30.202 --> 00:01:33.787
And so import a ref from view because
this is something we want to track.

31
00:01:33.787 --> 00:01:38.528
And so we'll say const emailInput = ref
that is an empty string by default.

32
00:01:38.528 --> 00:01:40.747
So to show that this works,
though, I'll do 123,

33
00:01:40.747 --> 00:01:42.454
you'll notice that it does populate up.

34
00:01:42.454 --> 00:01:44.743
So that's fine we know that it's working.

35
00:01:44.743 --> 00:01:50.035
The thing we need to check though
is that when the user clicks here,

36
00:01:50.035 --> 00:01:53.639
and we'll call this login, so const login.

37
00:01:53.639 --> 00:01:57.795
We need to actually make sure that email
input actually has the thing, right?

38
00:01:57.795 --> 00:02:00.473
So log(test), whoops, not test.

39
00:02:00.473 --> 00:02:04.243
So we'll log(emailInput.value).

40
00:02:04.243 --> 00:02:08.331
And so to show what I mean by this is we
can see here if I go then at ben@ben,

41
00:02:08.331 --> 00:02:11.281
then we can Continue with
email you'll see that that

42
00:02:11.281 --> 00:02:13.848
is actually being
rendered out as expected.

43
00:02:13.848 --> 00:02:18.919
Okay, great, so now all we need to
do is just do a simple check to say

44
00:02:18.919 --> 00:02:24.188
if email.Input.value, let's say,
so this is a string, right?

45
00:02:24.188 --> 00:02:29.420
So I think we actually can do
that includes an @ symbol and

46
00:02:29.420 --> 00:02:33.127
the emailInput.value.length &gt; 3.

47
00:02:33.127 --> 00:02:35.757
We'll just keep the logic symbol here.

48
00:02:35.757 --> 00:02:40.818
Then we'll say Valid User

49
00:02:40.818 --> 00:02:45.424
else log Invalid User.

50
00:02:45.424 --> 00:02:48.294
Okay, let's see if that works.

51
00:02:48.294 --> 00:02:54.959
We have test, nothing's working @,
nothing is working, why?

52
00:02:54.959 --> 00:02:56.334
Because while we didn't click on anything.

53
00:02:56.334 --> 00:02:57.949
There you go, that's a Valid ser.

54
00:02:57.949 --> 00:03:00.732
If we just do test Invalid User
cuz there's no @ symbol.

55
00:03:00.732 --> 00:03:03.170
But then we just do @ by
itself also Invalid User.

56
00:03:03.170 --> 00:03:05.516
Okay, easy enough as an email test.

57
00:03:05.516 --> 00:03:08.855
Again, just so you know this is
not production great quality,

58
00:03:08.855 --> 00:03:12.265
email validation just know that
this is just for demo purposes.

59
00:03:12.265 --> 00:03:14.065
We have a valid user so
what do we wanna do?

60
00:03:14.065 --> 00:03:17.023
We wanna navigate our users to a page.

61
00:03:17.023 --> 00:03:17.729
How do we do that?

62
00:03:17.729 --> 00:03:24.840
Well, let's go ahead and import or
useRouter from vue-router.

63
00:03:24.840 --> 00:03:30.440
Then we will go ahead and construct it by
calling it our router using useRouter.

64
00:03:30.440 --> 00:03:32.312
And then,
all we need to do is inside here,

65
00:03:32.312 --> 00:03:35.342
we'll just leave the console.log
cuz that's nice to have for now.

66
00:03:35.342 --> 00:03:39.279
If you router.push,
let's go to user, just like that.

67
00:03:39.279 --> 00:03:42.309
It's a, whoops, something is not happy,
what's going on?

68
00:03:42.309 --> 00:03:44.956
Well, I have typos up here at the top,
that's what's wrong.

69
00:03:44.956 --> 00:03:47.119
Let's save here, much better.

70
00:03:47.119 --> 00:03:50.379
Okay, so we do the t, and
then we Continue with email.

71
00:03:50.379 --> 00:03:52.163
Nothing is happening, great.

72
00:03:52.163 --> 00:03:56.447
Test@email.com, Continue with email.

73
00:03:56.447 --> 00:03:58.785
Look at that, programmatic navigation.

74
00:03:58.785 --> 00:04:02.969
Easy peasy with the composition
API in that we imported it,

75
00:04:02.969 --> 00:04:05.227
used the router to set it up, and

76
00:04:05.227 --> 00:04:10.259
then we just pushed the user once we
had fulfilled our logic for the app.

77
00:04:10.259 --> 00:04:13.339
Okay, the final thing that we need
to do is that we need the user to be

78
00:04:13.339 --> 00:04:15.374
able to actually look at different things.

79
00:04:15.374 --> 00:04:19.212
So when we click on it, they'll actually
be able to at least see user 1, user 2.

80
00:04:19.212 --> 00:04:21.397
Or in this case, we actually might
even just wanna show their name.

81
00:04:21.397 --> 00:04:22.556
Let's do that.

82
00:04:22.556 --> 00:04:26.862
So the way we might do that is
we'll go inside of our routes.

83
00:04:26.862 --> 00:04:29.378
So I think it's, currently we're
managing it inside of here.

84
00:04:29.378 --> 00:04:30.315
That's totally fine.

85
00:04:30.315 --> 00:04:34.455
So we'll basically create a user page.

86
00:04:34.455 --> 00:04:37.514
Looks like it didn't use
names that quite well.

87
00:04:37.514 --> 00:04:38.714
So what I'm gonna do for

88
00:04:38.714 --> 00:04:42.566
now just to make it a little bit easier
is I'm gonna call it UserDetailPage.

89
00:04:42.566 --> 00:04:47.192
But you should note that user page
is slightly semantically inaccurate.

90
00:04:47.192 --> 00:04:51.880
So the h1 here will be our user.

91
00:04:51.880 --> 00:04:55.167
So I'll just say user name so
it's easy to see that we switch pages.

92
00:04:55.167 --> 00:05:00.610
And then we have our path to /user/,
and then this time we'll

93
00:05:00.610 --> 00:05:06.061
call the variable name instead of
ID to show you how that works.

94
00:05:06.061 --> 00:05:08.697
component we'll import what?

95
00:05:08.697 --> 00:05:16.207
We'll import /vue/ UserDetailPage.vue,
Save.

96
00:05:16.207 --> 00:05:20.776
Okay to show that this works,
we'll go inside of our user page.

97
00:05:20.776 --> 00:05:26.093
And inside of each of these loops rather
than just having the card here what

98
00:05:26.093 --> 00:05:31.153
we're gonna do is we're gonna actually
wrap it here inside of a router

99
00:05:31.153 --> 00:05:36.435
link to it And so the router card we'll
just go inside of our router link.

100
00:05:36.435 --> 00:05:41.168
And where we're gonna route it to is gonna
be a JavaScript, we gonna dynamically

101
00:05:41.168 --> 00:05:45.846
bind this one cuz we need to dynamically
create it, which is gonna be /user/.

102
00:05:45.846 --> 00:05:49.555
And then we'll do the basically user.name.

103
00:05:49.555 --> 00:05:52.360
This might be a little bit tricky though
cuz I know there's spaces in here.

104
00:05:52.360 --> 00:05:56.952
Okay, so if we refresh this,
did not like that,

105
00:05:56.952 --> 00:06:00.653
user, right cuz the loop is in here.

106
00:06:00.653 --> 00:06:03.059
So my mistake we actually
cannot do it at this level,

107
00:06:03.059 --> 00:06:06.343
at least the way it's currently
architected I would need to actually go

108
00:06:06.343 --> 00:06:08.604
inside of user card in
order to actually do this.

109
00:06:08.604 --> 00:06:12.898
So inside of here is where then
we would actually then say okay,

110
00:06:12.898 --> 00:06:14.772
wrap this in a router link.

111
00:06:16.274 --> 00:06:21.586
And inside of here is where we can say,

112
00:06:21.586 --> 00:06:28.237
:to"/user/user.name, just like that.

113
00:06:28.237 --> 00:06:28.786
There you go.

114
00:06:28.786 --> 00:06:32.001
We see our link showing up now, wonderful.

115
00:06:32.001 --> 00:06:36.112
So if we inspect all of these,
we'll see that.

116
00:06:36.112 --> 00:06:38.865
We can see /Leanne Graham, great.

117
00:06:38.865 --> 00:06:40.014
So if we click on it,

118
00:06:40.014 --> 00:06:44.906
we should see, we are correctly being
navigated to username, so that's good.

119
00:06:44.906 --> 00:06:49.340
But we need to actually make sure this
shows up in a way that actually takes into

120
00:06:49.340 --> 00:06:51.330
account the actual user's name.

121
00:06:51.330 --> 00:06:52.252
So how do we do that?

122
00:06:52.252 --> 00:06:54.199
Well, we need to get info on the route.

123
00:06:54.199 --> 00:06:55.718
So where are we gonna reach?

124
00:06:55.718 --> 00:07:00.404
Reaching for useRoute from vue router.

125
00:07:00.404 --> 00:07:04.268
And then we'll initialize
the route by calling useRoute.

126
00:07:04.268 --> 00:07:08.420
And then we can basically log
the route.params to show you what's

127
00:07:08.420 --> 00:07:09.540
happening here.

128
00:07:09.540 --> 00:07:12.514
And you'll notice that inside of here,

129
00:07:12.514 --> 00:07:17.506
we have a name because that's what
we named it inside of our routes.

130
00:07:17.506 --> 00:07:20.550
So now that we have that, great.

131
00:07:20.550 --> 00:07:25.479
All we need to do now is just swap it out

132
00:07:25.479 --> 00:07:30.419
to go route.params.name, Save.

133
00:07:30.419 --> 00:07:32.220
And there we have it.

134
00:07:32.220 --> 00:07:38.390
I gotta use it again, Ervin,
Clementine, it works.

135
00:07:38.390 --> 00:07:38.977
Question.

136
00:07:38.977 --> 00:07:44.553
&gt;&gt; What if you wanted to pass that
user object to the profile page and

137
00:07:44.553 --> 00:07:50.454
have additional information that
is not on that user's list page?

138
00:07:50.454 --> 00:07:51.856
&gt;&gt; That is a great question.

139
00:07:51.856 --> 00:07:55.122
So what I want you to check out for this,
so the question here is around the fact

140
00:07:55.122 --> 00:07:58.556
that what if you actually wanna pass that
user information to the route, right?

141
00:07:58.556 --> 00:08:01.647
Some sort of, props passing,
that kinda stuff.

142
00:08:01.647 --> 00:08:05.730
I believe it's actually in the program.

143
00:08:05.730 --> 00:08:08.636
Passing prop to route components,
literally this page.

144
00:08:08.636 --> 00:08:12.841
So this will allow you to do kind of some
interesting stuff regarding how you pass

145
00:08:12.841 --> 00:08:13.611
parameters.

146
00:08:13.611 --> 00:08:17.873
But what's interesting too is that,
if you turn certain route is props true,

147
00:08:17.873 --> 00:08:22.019
it will actually drop the parameters
in certain things as props to the page.

148
00:08:22.019 --> 00:08:23.703
So you don't even need to use useRoute.

149
00:08:23.703 --> 00:08:27.679
It will actually be passed as a prop to
the component which again takes a little

150
00:08:27.679 --> 00:08:29.161
wrapping your mind around.

151
00:08:29.161 --> 00:08:32.197
So it's one of those kind of call it
intermediate to advance techniques that if

152
00:08:32.197 --> 00:08:34.865
it's something you're looking for,
take a read at this document,

153
00:08:34.865 --> 00:08:36.017
see if it fits your scenario.

154
00:08:36.017 --> 00:08:39.302
But generally speaking, what we've been
doing thus far regarding just grabbing

155
00:08:39.302 --> 00:08:42.825
the route.params.id, that fulfills,
I would say, a good 70% to 80% of the use

156
00:08:42.825 --> 00:08:45.607
cases out there, which is what I
wanted to make sure that we covered.

157
00:08:45.607 --> 00:08:49.248
&gt;&gt; Are you gonna get burnt by
deep linking to that page?

158
00:08:49.248 --> 00:08:51.022
&gt;&gt; Deep linking to the page.

159
00:08:51.022 --> 00:08:56.332
&gt;&gt; Passing in props in
the object through the link yep.

160
00:08:56.332 --> 00:08:57.852
&gt;&gt; Yep.
&gt;&gt; And you deep link to it.

161
00:08:57.852 --> 00:08:59.420
&gt;&gt; Yep.
&gt;&gt; Without having visited the page

162
00:08:59.420 --> 00:08:59.931
before that?

163
00:08:59.931 --> 00:09:00.501
&gt;&gt; Yeah.

164
00:09:00.501 --> 00:09:01.499
&gt;&gt; Does that burn you.

165
00:09:01.499 --> 00:09:04.486
&gt;&gt; That act, yep, so that's where
the state management can be very tricky.

166
00:09:04.486 --> 00:09:08.703
So that's why you have to be careful when
you're passing that kinda stuff around,

167
00:09:08.703 --> 00:09:10.523
what stuff is already accessible?

168
00:09:10.523 --> 00:09:14.646
Because earlier, during the exercise,
if you all notice, when I loaded the home

169
00:09:14.646 --> 00:09:18.020
page for cest-la-vue,
the five users actually don't show up.

170
00:09:18.020 --> 00:09:20.151
So if I refresh this page,
you'll notice it's gone.

171
00:09:20.151 --> 00:09:22.878
And the reason for that,
it's not a bug actually,

172
00:09:22.878 --> 00:09:27.274
it's how it's intended because user page
is what's actually loading the data.

173
00:09:27.274 --> 00:09:29.298
And so unless you visit the user page,

174
00:09:29.298 --> 00:09:31.902
home page has no idea what
these five things are.

175
00:09:31.902 --> 00:09:35.458
And so as far as the state's concerned,
the composable is concerned,

176
00:09:35.458 --> 00:09:36.475
it doesn't exist.

177
00:09:36.475 --> 00:09:40.921
So knowing where to import,
how to make sure they stay in sync

178
00:09:40.921 --> 00:09:44.681
that's part of the puzzle
of the game that we play.

