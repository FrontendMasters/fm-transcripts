WEBVTT

1
00:00:00.527 --> 00:00:03.728
And so what we'll be doing today
as far basically going forward for

2
00:00:03.728 --> 00:00:07.728
the rest of the workshop, you can find all
the different snapshots of where we start

3
00:00:07.728 --> 00:00:09.926
and stop inside of
the individual branches.

4
00:00:09.926 --> 00:00:13.704
And so basically 01-begin,
let me go ahead and add everything.

5
00:00:13.704 --> 00:00:16.744
So check, take status, what do we change?

6
00:00:16.744 --> 00:00:21.447
We change the playground, and so
the playground was for me, so

7
00:00:21.447 --> 00:00:26.260
let me go ahead git,
feature: add live coding for essentials.

8
00:00:26.260 --> 00:00:31.424
Let's see, reactive data in playground.

9
00:00:31.424 --> 00:00:36.140
Okay, so I'm gonna push that up, oop,
git push, I haven't got this yet,

10
00:00:36.140 --> 00:00:37.853
let's do this real quick.

11
00:00:40.859 --> 00:00:49.063
All right, great, and so check out
01-exercise git push origin 01-exercise.

12
00:00:49.063 --> 00:00:52.612
Okay, so if you go ahead and
pull down the latest changes now,

13
00:00:52.612 --> 00:00:56.863
you should be able to see all the stuff
that I did inside of the playground.

14
00:00:56.863 --> 00:00:59.749
Now, of course,
I saw that some people were coding along,

15
00:00:59.749 --> 00:01:01.317
which I was really happy to see.

16
00:01:01.317 --> 00:01:04.785
But of course, we're gonna actually give
you a chance to actually practice that

17
00:01:04.785 --> 00:01:06.270
on your own without any guidance.

18
00:01:06.270 --> 00:01:08.431
So the way that's gonna work,

19
00:01:08.431 --> 00:01:13.668
is what you to do is choose your favorite
TV show, or if you don't watch TV,

20
00:01:13.668 --> 00:01:17.677
try movie or basically anything
that is personal to you.

21
00:01:17.677 --> 00:01:21.758
And basically use the index.html page that
we have in there that's already ready for

22
00:01:21.758 --> 00:01:22.956
you to play around with.

23
00:01:22.956 --> 00:01:26.780
And I want you to go ahead and replicate
what we just did as far as go ahead and

24
00:01:26.780 --> 00:01:29.391
create that app,
create a view app using the CDN.

25
00:01:29.391 --> 00:01:33.232
Add some reactive data tracking to track
maybe some characters on the show and

26
00:01:33.232 --> 00:01:33.773
whatnot.

27
00:01:33.773 --> 00:01:36.316
I want you to practice using the v-if,
v-for.

28
00:01:36.316 --> 00:01:38.992
So v-if to basically track
if there are no characters.

29
00:01:38.992 --> 00:01:42.027
This should show some sort of text
element that says, hey, no characters.

30
00:01:42.027 --> 00:01:44.613
And then when it populates it,
it swaps it out.

31
00:01:44.613 --> 00:01:47.737
And then go ahead and
drop in as much reactive data as you want.

32
00:01:47.737 --> 00:01:51.503
Again, play, have fun with this, and yeah.

33
00:01:54.796 --> 00:01:59.688
So from my end, I'm gonna go ahead and
open up index.html as you all did.

34
00:01:59.688 --> 00:02:04.308
And for me, I'm gonna go ahead and
do Avatar The Last Airbender,

35
00:02:04.308 --> 00:02:06.498
that's the one I'm gonna do.

36
00:02:06.498 --> 00:02:10.382
And so inside of here,
we're gonna go ahead and

37
00:02:10.382 --> 00:02:16.371
copy over the CDN include,
That I used earlier.

38
00:02:16.371 --> 00:02:19.954
And then from here, we'll go ahead and
we'll start setting up the app.

39
00:02:19.954 --> 00:02:23.789
So again, the convention here is div,
id-"#app".

40
00:02:23.789 --> 00:02:27.312
And the reason for this is because
typically the frameworks will go ahead and

41
00:02:27.312 --> 00:02:28.864
render a bunch of stuff in there.

42
00:02:28.864 --> 00:02:32.981
So the div, it doesn't have any semantic
value as far as from the screen readers

43
00:02:32.981 --> 00:02:34.158
and that kinda thing.

44
00:02:34.158 --> 00:02:36.352
So that's why the convention
is usually to use a div.

45
00:02:36.352 --> 00:02:40.572
But if for whatever reason you
wanna attach it to something else,

46
00:02:40.572 --> 00:02:43.114
by all means, feel empowered to do so.

47
00:02:43.114 --> 00:02:44.151
Okay, so what do we say?

48
00:02:44.151 --> 00:02:51.179
We're gonna create some data, so
let's say const (createApp) = Vue.

49
00:02:51.179 --> 00:02:53.203
And actually, I'm gonna do just for

50
00:02:53.203 --> 00:02:56.746
the sake of showing you the div,
that they're the equivalent.

51
00:02:56.746 --> 00:03:00.666
We can basically do Vue.createApp,
like this, and

52
00:03:00.666 --> 00:03:03.114
then this can be a data function.

53
00:03:03.114 --> 00:03:06.758
Now ,I'm gonna show you a new syntax
that I personally I prefer to use,

54
00:03:06.758 --> 00:03:10.831
which is that I'll use the arrow function
for basically assigning a function to

55
00:03:10.831 --> 00:03:13.839
data, and then I'll wrap
the object in the parentheses.

56
00:03:13.839 --> 00:03:15.891
So it basically saves
a couple lines of code.

57
00:03:15.891 --> 00:03:19.959
So just to split,
show the difference on that real quick,

58
00:03:21.726 --> 00:03:25.969
You'll see here this is the difference,
right, data with a parenthesis,

59
00:03:25.969 --> 00:03:27.905
then the actual explicit return.

60
00:03:27.905 --> 00:03:31.997
This has the implicit return with the
arrow, and then we can find our data here.

61
00:03:31.997 --> 00:03:35.601
So here, I can do my characters like this,
and then I'll go ahead and

62
00:03:35.601 --> 00:03:38.351
collapse this now so
that we have the single column.

63
00:03:38.351 --> 00:03:41.411
Okay, so then we'll have four objects.

64
00:03:41.411 --> 00:03:47.233
So actually, I'm gonna go ahead and
do real quick, this is 1, 2, 3, 4.

65
00:03:47.233 --> 00:03:50.612
I'm gonna use a multi-cursor
select by holding down Cmd,

66
00:03:50.612 --> 00:03:52.173
might be Ctrl for Windows.

67
00:03:52.173 --> 00:03:54.230
And then I'll just open
up basically an object so

68
00:03:54.230 --> 00:03:56.144
that I don't have to do
that multiple times.

69
00:03:56.144 --> 00:03:59.509
Great, and then let's just save that
real quick, sort of auto-format.

70
00:03:59.509 --> 00:04:01.904
Once again, let's click through and
let's add some properties.

71
00:04:01.904 --> 00:04:07.802
So we'll have basically the name of
the character, and that's basically it.

72
00:04:07.802 --> 00:04:12.012
So in this case,
we have Aang, we have Zuko.

73
00:04:12.012 --> 00:04:18.938
We have Toph, and we have Katara.

74
00:04:18.938 --> 00:04:23.195
All right, So first thing first,

75
00:04:23.195 --> 00:04:26.242
we're gonna do now is let's go ahead and
actually render out our empty state.

76
00:04:26.242 --> 00:04:30.099
So the way we can do that is we're
gonna do a p element and say,

77
00:04:30.099 --> 00:04:31.777
there are no characters.

78
00:04:31.777 --> 00:04:34.787
And so we'll save this right now and
let's go ahead and

79
00:04:34.787 --> 00:04:37.283
actually open this up
inside of the browser.

80
00:04:37.283 --> 00:04:39.401
So instead of playground,
we'll go to index.

81
00:04:39.401 --> 00:04:41.411
There we go, there are no characters.

82
00:04:41.411 --> 00:04:43.852
And then we'll have the ul here.

83
00:04:43.852 --> 00:04:48.470
And just like before, we will practice
now the v4 element that we had.

84
00:04:48.470 --> 00:04:53.531
So for every character in characters,
although actually this is surfacing

85
00:04:53.531 --> 00:04:58.206
a philosophical point that I like to
do when it comes to naming things.

86
00:04:58.206 --> 00:05:00.461
One off errors are very
common in programming and

87
00:05:00.461 --> 00:05:02.503
I find that happens
a lot with spelling too.

88
00:05:02.503 --> 00:05:05.470
And so the one s plural has
caught me in multiple times.

89
00:05:05.470 --> 00:05:08.502
So personally, I usually like
to just say that it's a list.

90
00:05:08.502 --> 00:05:11.326
It's a little bit longer, but then you
just have that visual distinction.

91
00:05:11.326 --> 00:05:16.293
It's a character in characterList, and
then I can just render out character.name,

92
00:05:16.293 --> 00:05:17.253
which is great.

93
00:05:17.253 --> 00:05:20.584
Although, hmm, what's happening here,
why is not it working?

94
00:05:20.584 --> 00:05:24.336
This is a common mistake that we often
make when we're sort of creating the app

95
00:05:24.336 --> 00:05:27.969
this way, is because what we have to
remember to do is we need to tell Vue that

96
00:05:27.969 --> 00:05:28.970
we need to mount it.

97
00:05:28.970 --> 00:05:32.688
So we're gonna go ahead and
run the mount command on this, and

98
00:05:32.688 --> 00:05:34.843
we're gonna mount it to the id app.

99
00:05:34.843 --> 00:05:39.964
And once we do that, save, refresh.

100
00:05:39.964 --> 00:05:41.614
I broke something.

101
00:05:41.614 --> 00:05:43.808
Warn selector, why is that the case?

102
00:05:43.808 --> 00:05:47.276
Well, typos, didn't I say something
about one off errors right here?

103
00:05:47.276 --> 00:05:51.765
This is one that'll catch you off guard,
because in your mind you're thinking

104
00:05:51.765 --> 00:05:55.252
CSS selector, but
you don't need the extra hashtag symbol.

105
00:05:55.252 --> 00:05:57.095
Hey, there we go, everything's working.

106
00:05:57.095 --> 00:06:02.648
So now, all we gotta do,
though, is complete the exercise

107
00:06:02.648 --> 00:06:07.204
by saying if characterList.length === 0,

108
00:06:07.204 --> 00:06:11.549
then show that, otherwise show this, okay?

109
00:06:11.549 --> 00:06:14.090
As you can see, boom,
there we go, it's working.

110
00:06:14.090 --> 00:06:17.667
If we go ahead and just go ahead and
update that real quick,

111
00:06:17.667 --> 00:06:20.670
you'll see there are no
characters showing up.

112
00:06:20.670 --> 00:06:25.588
Now, something worth noting about the v-if
directive though is that when you use

113
00:06:25.588 --> 00:06:28.794
the v-if directive,
what Vue is actually doing is,

114
00:06:28.794 --> 00:06:33.699
if you take a look here, Is that the ul

115
00:06:33.699 --> 00:06:38.680
that you have here for the else condition
does not even exist on the DOM.

116
00:06:38.680 --> 00:06:41.704
So basically,
the elements are being destroyed and

117
00:06:41.704 --> 00:06:43.910
recreated each time you toggle that.

118
00:06:43.910 --> 00:06:46.970
So as you can see here,
now if we take a look at the app,

119
00:06:46.970 --> 00:06:50.851
you'll notice here that the ul's
precedent that the p tag is gone.

120
00:06:50.851 --> 00:06:55.625
And so, this is contrary to another
directive that you will see in Vue called

121
00:06:55.625 --> 00:06:59.368
v-show, which is, I'll say,
its less popular cousin.

122
00:06:59.368 --> 00:07:04.288
And that's because what v-show does is
it toggles the visibility of the element

123
00:07:04.288 --> 00:07:04.877
via CSS.

124
00:07:04.877 --> 00:07:09.420
And so the reason you want those two
different approaches is because there

125
00:07:09.420 --> 00:07:13.742
are times where there might be
a performance bottleneck of destroying

126
00:07:13.742 --> 00:07:15.591
a list of thousands of items.

127
00:07:15.591 --> 00:07:19.117
And then having the DOM recreated every
time someone toggles it on and off, and

128
00:07:19.117 --> 00:07:20.784
you might just wanna show or hide it.

129
00:07:20.784 --> 00:07:24.156
So that's where v-show, v-hide could
be very useful in those regards.

130
00:07:24.156 --> 00:07:27.978
So once again, the idea here,
building on what we know and

131
00:07:27.978 --> 00:07:32.659
trying to make it easy for us to do
the right performance optimization.

132
00:07:32.659 --> 00:07:35.226
So that's a trade-off to
consider when using v-if.

133
00:07:35.226 --> 00:07:38.326
But again, I'd say 95% of the time,
that is what you wanna use.

134
00:07:38.326 --> 00:07:42.775
But the moment you start thinking,
users are gonna be toggling this a lot and

135
00:07:42.775 --> 00:07:46.128
it might be expensive to destroy it,
reach out for v-show.

