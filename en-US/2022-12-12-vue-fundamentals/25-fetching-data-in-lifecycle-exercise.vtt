WEBVTT

1
00:00:00.298 --> 00:00:05.059
Okay, so for the exercise we're
actually gonna be using one of my new

2
00:00:05.059 --> 00:00:07.947
favorite APIs called JSON Placeholder.

3
00:00:07.947 --> 00:00:10.177
If you haven't heard about it,
it's pretty great.

4
00:00:10.177 --> 00:00:13.625
Because what it does is it basically
provides a bunch of static data that

5
00:00:13.625 --> 00:00:15.871
requires no authentication key or
anything.

6
00:00:15.871 --> 00:00:20.159
And what allows you to do is it has a
bunch of different datasets that allow you

7
00:00:20.159 --> 00:00:21.572
to relate between them.

8
00:00:21.572 --> 00:00:25.351
So basically we'll see here,
we take a look at users, for example.

9
00:00:25.351 --> 00:00:28.467
Users has an ID,
it has all this data ready for you.

10
00:00:28.467 --> 00:00:31.320
But then if you take a look
at something like the dodos,

11
00:00:31.320 --> 00:00:35.184
you'll notice that it even has user ID and
it relates back to those users.

12
00:00:35.184 --> 00:00:39.738
And so what you basically have is, rather
than having like a dynamic database that

13
00:00:39.738 --> 00:00:42.248
oftentimes goes like
either unmaintained or

14
00:00:42.248 --> 00:00:46.539
eventually goes out of service this is
really just a bunch of static JSON, but

15
00:00:46.539 --> 00:00:49.331
we get to request it as if
it were from the back end.

16
00:00:49.331 --> 00:00:53.878
And so this is the API that
I recommend you all use

17
00:00:53.878 --> 00:00:58.328
going forward when it
comes to our exercises.

18
00:00:58.328 --> 00:01:03.136
And so for our exercise, you're gonna be
using the C'est La Vue app, and this time

19
00:01:03.136 --> 00:01:08.033
your product manager has come to you and
says we need a UsersPage component, right?

20
00:01:08.033 --> 00:01:11.281
So we're gonna give you some practice
as far as basically go ahead and

21
00:01:11.281 --> 00:01:13.700
create the user page inside
the component folder.

22
00:01:13.700 --> 00:01:15.781
And then inside of that component,
go ahead and

23
00:01:15.781 --> 00:01:19.058
use that created lifecycle to go ahead and
fetch all the users from that JSON

24
00:01:19.058 --> 00:01:21.153
placeholder API using
what we just showed you.

25
00:01:21.153 --> 00:01:24.533
And then go ahead and
render that however you see fit.

26
00:01:24.533 --> 00:01:27.268
And then go ahead and
make sure you update App.vue so

27
00:01:27.268 --> 00:01:29.505
that If you wanna use a dynamic component,

28
00:01:29.505 --> 00:01:33.376
that actually swaps it out correctly
when you're using the navigation.

29
00:01:35.768 --> 00:01:39.370
Welcome back everybody,
how was the exercise?

30
00:01:39.370 --> 00:01:41.400
All right, yeah,
it looks like people were successful.

31
00:01:41.400 --> 00:01:44.845
So no worries, in case you find
that a little bit complicated,

32
00:01:44.845 --> 00:01:47.646
we're gonna walk through
the solution right now.

33
00:01:47.646 --> 00:01:51.344
So let's go ahead and do this.

34
00:01:51.344 --> 00:01:53.685
So let me close that.

35
00:01:53.685 --> 00:01:55.699
Bring that over here.

36
00:01:55.699 --> 00:01:57.695
As you noted,
I do want this as a reference?

37
00:01:57.695 --> 00:02:01.743
I'm gonna bring this as a new tab, okay.

38
00:02:01.743 --> 00:02:02.502
All right.

39
00:02:02.502 --> 00:02:05.424
So I'm gonna go ahead and
I'm gonna work in the C'est La vue.

40
00:02:05.424 --> 00:02:09.986
Remember that If you are working
in your app you can go ahead and

41
00:02:09.986 --> 00:02:13.928
use whatever I'm doing in C'est La
vue as like an example for

42
00:02:13.928 --> 00:02:16.656
how the solution should look in your app.

43
00:02:16.656 --> 00:02:20.459
Okay, so I'm gonna go and
check out the -09 branch solution so

44
00:02:20.459 --> 00:02:26.517
that's where this will live Okay, so
first thing first, what do we wanna do?

45
00:02:26.517 --> 00:02:29.290
We wanna create a user page, all right?

46
00:02:29.290 --> 00:02:32.420
So we're gonna do inside of our
components folder UserPage.vue.

47
00:02:32.420 --> 00:02:37.262
And then I'm gonna go ahead, and
let's set up the script block, and

48
00:02:37.262 --> 00:02:39.446
let's set up the style block.

49
00:02:39.446 --> 00:02:43.559
And so taking a look at what we have here,
we have some basic styles.

50
00:02:43.559 --> 00:02:46.920
And so for now, I'm just gonna kind of
keep it straightforward in the sense that

51
00:02:46.920 --> 00:02:49.396
like, let's just go ahead and
pull what we already have.

52
00:02:49.396 --> 00:02:54.112
So I'm gonna actually grab,
I think the login page is fine for me.

53
00:02:54.112 --> 00:02:57.127
So I'm gonna go ahead and
actually not see doo doo doo doo.

54
00:02:57.127 --> 00:02:58.954
Yeah, I'll describe the login page.

55
00:02:58.954 --> 00:03:03.426
Okay, so I'll grab the login page
copied over into our user page for now.

56
00:03:03.426 --> 00:03:05.219
And I'm gonna actually delete these or

57
00:03:05.219 --> 00:03:09.039
I'll leave them because they'll actually
be a great discussion point for later.

58
00:03:09.039 --> 00:03:12.847
And for now, we'll just call this
users will delete this stuff.

59
00:03:12.847 --> 00:03:14.394
And we'll just save.

60
00:03:14.394 --> 00:03:18.519
So now if we go back
we're on the homepage.

61
00:03:18.519 --> 00:03:20.165
We won't be able to see this yet, why?

62
00:03:20.165 --> 00:03:24.094
Because we actually need
to update our App.vue so

63
00:03:24.094 --> 00:03:26.720
that we actually show that page.

64
00:03:26.720 --> 00:03:28.572
And so for now,
we're just gonna make it easy.

65
00:03:28.572 --> 00:03:31.435
And we're just gonna say,
okay, well, by default,

66
00:03:31.435 --> 00:03:33.441
we're just gonna show the UserPage.

67
00:03:33.441 --> 00:03:35.230
But we wanna show the User Page.

68
00:03:35.230 --> 00:03:36.254
What do we got to do?

69
00:03:36.254 --> 00:03:40.032
We got to import it because we're
actually gonna call that component.

70
00:03:40.032 --> 00:03:41.232
So that way we call it,

71
00:03:41.232 --> 00:03:44.467
we register it, that way it can
actually be called later on.

72
00:03:44.467 --> 00:03:46.961
So if we save that and
refresh, nothing is working.

73
00:03:46.961 --> 00:03:47.530
Why is that?

74
00:03:47.530 --> 00:03:50.045
Well, we need local dev running.

75
00:03:50.045 --> 00:03:51.489
Let me close that one.

76
00:03:51.489 --> 00:03:53.042
Great, there we go.

77
00:03:53.042 --> 00:03:57.289
Okay, so we have a User Page up and
running, looking good.

78
00:03:57.289 --> 00:03:58.320
And so what do we wanna do?

79
00:03:58.320 --> 00:04:02.563
We wanna go ahead and
fetch our users from this API right here.

80
00:04:02.563 --> 00:04:07.008
So following our best practices, we'll do
the export default object and inside of

81
00:04:07.008 --> 00:04:11.720
our created, we're actually gonna go ahead
and run a function, what are we wanna run?

82
00:04:11.720 --> 00:04:17.463
Ideally, we want something
like this.fetchUsers.

83
00:04:17.463 --> 00:04:18.633
But we haven't written that.

84
00:04:18.633 --> 00:04:20.086
So let's go ahead and write that.

85
00:04:20.086 --> 00:04:21.937
So I'll create a methods here.

86
00:04:21.937 --> 00:04:25.253
And the methods option will
contain the fetch users.

87
00:04:25.253 --> 00:04:27.958
Inside of here, this is where we're
gonna go ahead and run our request.

88
00:04:27.958 --> 00:04:31.033
So we might have
this.userList equals what?

89
00:04:31.033 --> 00:04:36.000
We're gonna fetch this API and
then we're gonna take that response.

90
00:04:36.000 --> 00:04:39.438
And then we're gonna JSON-ify
it by running response.json.

91
00:04:39.438 --> 00:04:41.846
Now again,
this is an asynchronous request.

92
00:04:41.846 --> 00:04:46.016
So we need the await keyword, and
we need to tell it that it's async.

93
00:04:46.016 --> 00:04:48.280
Not quite done yet though, because why?

94
00:04:48.280 --> 00:04:51.060
We have this this userList
hasn't been created yet.

95
00:04:51.060 --> 00:04:52.476
This is our reactive data.

96
00:04:52.476 --> 00:04:56.418
So we can go ahead and create that.

97
00:04:56.418 --> 00:05:01.104
And so we have our userList and
that will be an array.

98
00:05:01.104 --> 00:05:03.918
And then we can save.

99
00:05:03.918 --> 00:05:05.692
All right, everything formats,
it looks good.

100
00:05:05.692 --> 00:05:09.461
That code editor is not
yelling at us anymore.

101
00:05:09.461 --> 00:05:11.261
And so we aren't seeing anything yet, and

102
00:05:11.261 --> 00:05:14.715
that's totally fine because why we haven't
actually rendered it to the screen.

103
00:05:14.715 --> 00:05:15.564
So userList.

104
00:05:15.564 --> 00:05:16.169
There we go.

105
00:05:16.169 --> 00:05:17.941
We save and we refresh.

106
00:05:17.941 --> 00:05:22.069
Okay, now that we do it great, we can
actually see all our users here, but we're

107
00:05:22.069 --> 00:05:26.225
gonna go ahead and pretty that up a little
bit because that is pretty hard to read.

108
00:05:26.225 --> 00:05:28.669
So I'm just gonna do an unordered list.

109
00:05:28.669 --> 00:05:33.341
And for every one of these users, so
user in userList, we're gonna make sure,

110
00:05:33.341 --> 00:05:37.547
because we're using a V for loop,
we're gonna assign it a unique key.

111
00:05:37.547 --> 00:05:41.383
And that key can be just be the ID
actually that we have up here.

112
00:05:41.383 --> 00:05:45.563
So I'm gonna actually gonna say,
doo, doo, doo,

113
00:05:45.563 --> 00:05:50.884
I'm gonna use the ES6 templating though,
to say user user.id.

114
00:05:50.884 --> 00:05:54.467
And the reason for this is, because this
dataset is on the simpler side as far as

115
00:05:54.467 --> 00:05:56.006
keeping the IDs as just numbers.

116
00:05:56.006 --> 00:05:59.511
And so I do know in advance that
there will be other elements

117
00:05:59.511 --> 00:06:01.737
that also have very simplistic IDs.

118
00:06:01.737 --> 00:06:05.678
And so prevent that from colliding,
cuz when it does vue will tell you inside

119
00:06:05.678 --> 00:06:09.683
of the console log, hey by the way I'm
seeing duplicate keys for elements and

120
00:06:09.683 --> 00:06:11.974
that will create all sorts of havoc for
you.

121
00:06:11.974 --> 00:06:14.019
So try to keep them
unique whenever you can.

122
00:06:14.019 --> 00:06:18.159
Again, normally these will be U IDs and
you don't have to worry about it.

123
00:06:18.159 --> 00:06:21.669
And then we can basically
render out the user.name and

124
00:06:21.669 --> 00:06:26.027
then let's go ahead and let's just do the,
what would be fun to do?

125
00:06:26.027 --> 00:06:27.873
Let's do the website then.

126
00:06:27.873 --> 00:06:29.873
And then we have user.website.

127
00:06:29.873 --> 00:06:31.006
Save.

128
00:06:31.006 --> 00:06:31.909
There we go.

129
00:06:31.909 --> 00:06:33.825
And we can see now if we refresh.

130
00:06:33.825 --> 00:06:35.616
Okay, we got a lot going on.

131
00:06:35.616 --> 00:06:38.910
Now for a second here, I panic because
I was like, why are we seeing double?

132
00:06:38.910 --> 00:06:42.159
The reason we're seeing double is because
we have the pre-elements there, so

133
00:06:42.159 --> 00:06:43.379
we save that now and refresh.

134
00:06:43.379 --> 00:06:44.906
There we go, much better.

135
00:06:44.906 --> 00:06:48.432
And now we have all our users
being rendered on the page.

136
00:06:48.432 --> 00:06:54.211
&gt;&gt; Is there a way with the dev tools
to see the unique IDs of those items?

137
00:06:54.211 --> 00:06:55.833
&gt;&gt; Yeah, that's a great question.

138
00:06:55.833 --> 00:07:00.067
So if we take a look at what the context
here is, is that this dynamic key that

139
00:07:00.067 --> 00:07:03.384
we're assigning in this case,
user-1, and so forth.

140
00:07:03.384 --> 00:07:07.201
The question here is around the idea
if there is any way to expose that.

141
00:07:07.201 --> 00:07:10.807
And so honestly, off the top of my head
we can see here that if we're looking

142
00:07:10.807 --> 00:07:14.889
at the browser dev tools, there's nothing
actually indicating what the keys are.

143
00:07:14.889 --> 00:07:16.656
And if we take a look at vue dev tools,

144
00:07:16.656 --> 00:07:19.848
we can see here that one nice thing
about dev tools is that it makes it

145
00:07:19.848 --> 00:07:22.824
very clear how you can expose
the different properties of it.

146
00:07:22.824 --> 00:07:25.040
But it does look like at first glance,

147
00:07:25.040 --> 00:07:28.993
there's nothing obvious kind of
indicating its individual keys,

148
00:07:28.993 --> 00:07:32.754
like we can inspect the elements
in here and all the data in here.

149
00:07:32.754 --> 00:07:34.600
So in case you ever debugging anything.

150
00:07:34.600 --> 00:07:39.144
And a nice little bonus about this too
actually is that the dev tool allows you

151
00:07:39.144 --> 00:07:40.428
to modify directly.

152
00:07:40.428 --> 00:07:43.564
So we come in here and just call like,
like Selena as a middle name,

153
00:07:43.564 --> 00:07:46.038
you'll see that will
actually update it directly.

154
00:07:46.038 --> 00:07:49.557
So it allows for a kind of a quicker
feedback loop in case you're wondering

155
00:07:49.557 --> 00:07:52.702
like if your dataset is doing
something specific with your code.

156
00:07:52.702 --> 00:07:55.299
You just play around with it
right there rather than like,

157
00:07:55.299 --> 00:07:58.002
call it going back to your component and
faking the dataset,

158
00:07:58.002 --> 00:08:01.139
like the dev tools allows you to kind
of do that in In a centralized way.

159
00:08:01.139 --> 00:08:04.553
I wonder, can I do

160
00:08:04.553 --> 00:08:11.925
key="renderPage" like that?

161
00:08:11.925 --> 00:08:14.400
Okay, great.

162
00:08:14.400 --> 00:08:17.360
So I did discover this at the bare
minimum through this exercise.

163
00:08:17.360 --> 00:08:21.990
If you provide keys to your components,
these are showing up in your dev tools.

164
00:08:23.940 --> 00:08:28.007
So there's something to be said, where if
you're at the point where you're probably

165
00:08:28.007 --> 00:08:31.572
debugging keys, at least for your
components, it probably is helpful to,

166
00:08:31.572 --> 00:08:35.137
I mean, to be honest, if we're thinking
about like a real world scenario,

167
00:08:35.137 --> 00:08:38.425
the user page would be displaying
probably a user card component, and

168
00:08:38.425 --> 00:08:40.077
then those who should show those.

169
00:08:40.077 --> 00:08:44.516
And so for the sake of actually demoing
that because this is actually something

170
00:08:44.516 --> 00:08:45.938
that does occur in apps.

171
00:08:45.938 --> 00:08:48.118
So let's do a UserCard real quick.

172
00:08:48.118 --> 00:08:52.330
And then I'm just gonna go ahead and
drop that.

173
00:08:52.330 --> 00:08:53.641
We're gonna drop this li,
we're gonna keep it simple.

174
00:08:53.641 --> 00:08:58.083
We're just gonna assume all user
cards are always list elements.

175
00:08:58.083 --> 00:09:00.518
And then I'm not gonna
worry about that piece.

176
00:09:00.518 --> 00:09:05.175
[COUGH] And then we're gonna go ahead and
quickly just define a prop.

177
00:09:07.471 --> 00:09:14.994
Default props and they'll get a user
type of object and required is true.

178
00:09:14.994 --> 00:09:16.368
Save.

179
00:09:16.368 --> 00:09:21.773
And then inside of UserPage now,
we can actually import set UserCard.

180
00:09:21.773 --> 00:09:23.216
And then there we go.

181
00:09:23.216 --> 00:09:25.039
Just use the autocomplete for that.

182
00:09:25.039 --> 00:09:28.524
And then the components.

183
00:09:28.524 --> 00:09:29.393
There we go.

184
00:09:29.393 --> 00:09:32.916
And then dropping UserCard in here.

185
00:09:32.916 --> 00:09:37.593
And then we can then say UserCard
is what we're gonna use here.

186
00:09:37.593 --> 00:09:39.052
We're not worry about that.

187
00:09:39.052 --> 00:09:46.638
And then we're just gonna make
sure we pass user inside of here.

188
00:09:46.638 --> 00:09:47.657
Like that.

189
00:09:50.337 --> 00:09:54.492
That should self close, save, okay.

190
00:09:54.492 --> 00:09:59.396
That should do the trick.

191
00:09:59.396 --> 00:10:00.562
It looks like everything's working.

192
00:10:00.562 --> 00:10:02.118
And to validate this real quick,

193
00:10:02.118 --> 00:10:05.740
what we're gonna do is we're gonna add
a quick CSS class called user.card.

194
00:10:05.740 --> 00:10:12.935
And I'm just gonna say
user.card has border 2px solid.

195
00:10:12.935 --> 00:10:15.827
Let's keep it simple,
let's just do like a black and

196
00:10:15.827 --> 00:10:18.027
then just like a padding of 10 pixels.

197
00:10:18.027 --> 00:10:19.155
There we go, okay.

198
00:10:19.155 --> 00:10:20.655
So our cards are rendering,

199
00:10:20.655 --> 00:10:24.541
we have our user page here rendering
our list of cards, which looks good.

200
00:10:24.541 --> 00:10:26.592
And now we go ahead and
open the dev tools.

201
00:10:26.592 --> 00:10:30.474
We should see, what I think I saw
a glimpse of that a second ago.

202
00:10:30.474 --> 00:10:31.514
There we go.

203
00:10:31.514 --> 00:10:33.881
The keys are showing up in this case.

204
00:10:33.881 --> 00:10:37.225
So it does look like if you wanna inspect
the DOM element one that remains to be

205
00:10:37.225 --> 00:10:38.232
a little bit elusive.

206
00:10:38.232 --> 00:10:42.201
But that said, it's still a worthy
question worth investigating into.

207
00:10:42.201 --> 00:10:45.419
&gt;&gt; On the topic of keys, are those keys,

208
00:10:45.419 --> 00:10:50.850
do they need to be unique on
globally all items rendered on page,

209
00:10:50.850 --> 00:10:54.183
or is it kinda scoped to the component?

210
00:10:54.183 --> 00:10:58.191
So if your component renders one list,
is it safe to just use key 1, 2, 3, 4?

211
00:10:58.191 --> 00:10:59.721
&gt;&gt; Yep.

212
00:10:59.721 --> 00:11:02.293
Sorry, the yep was
acknowledging the question.

213
00:11:02.293 --> 00:11:03.481
Okay.

214
00:11:03.481 --> 00:11:07.027
So, to the question here is around
the scoping of keys, right?

215
00:11:07.027 --> 00:11:08.569
Because we talked about scoping of data,
right?

216
00:11:08.569 --> 00:11:11.886
Data scoped to the components, and we have
to be very explicit about how it's shared.

217
00:11:11.886 --> 00:11:15.863
Keys however, are different because it
has to do with whatever's on the page.

218
00:11:15.863 --> 00:11:17.821
So there's no scoping in regards to keys.

219
00:11:17.821 --> 00:11:20.491
And this is very important in particular
when it comes to animation and

220
00:11:20.491 --> 00:11:21.090
transitions.

221
00:11:21.090 --> 00:11:24.872
This is because if you want vue to start
managing some of those pieces those keys

222
00:11:24.872 --> 00:11:28.770
do really need to be unique otherwise
you'll start seeing weird glitches of like

223
00:11:28.770 --> 00:11:31.807
vue trying to calculate how to
move things around and like two or

224
00:11:31.807 --> 00:11:32.931
three things at once.

225
00:11:32.931 --> 00:11:35.267
And so yeah,
I would treat keys as a universal thing.

226
00:11:35.267 --> 00:11:40.769
This is why knowing the dataset
that I have, let me close this.

227
00:11:40.769 --> 00:11:44.335
Knowing the dataset that I have that
is why I prefix that with user so

228
00:11:44.335 --> 00:11:46.882
that later we can have like photos or
comments or

229
00:11:46.882 --> 00:11:49.312
whatever whatever we
decide to extend upon.

230
00:11:49.312 --> 00:11:52.983
So, good question though.

231
00:11:52.983 --> 00:11:53.759
Cool.

232
00:11:53.759 --> 00:11:56.230
So, we have the ability to go
back here to home and log in, but

233
00:11:56.230 --> 00:11:57.350
we don't have a user link.

234
00:11:57.350 --> 00:12:00.056
So let's actually just make
sure we wrap that up properly.

235
00:12:00.056 --> 00:12:02.707
So for now,
we're just gonna keep it simple here.

236
00:12:02.707 --> 00:12:03.927
You might notice though,

237
00:12:03.927 --> 00:12:07.597
when you're inspecting the nav that I'm
doing something a little bit hacky.

238
00:12:07.597 --> 00:12:09.561
One is that this is
technically an anchor link, but

239
00:12:09.561 --> 00:12:11.074
the anchor link doesn't go anywhere.

240
00:12:11.074 --> 00:12:12.730
It only goes to the top of the page.

241
00:12:12.730 --> 00:12:16.943
But on the click event, you'll notice
that I'm adding this modifier.prevent.

242
00:12:16.943 --> 00:12:20.462
If you're not familiar with this,
think of it like a form.

243
00:12:20.462 --> 00:12:23.352
Form is the one where I
typically show off the prevent.

244
00:12:23.352 --> 00:12:26.321
And so what happens a lot of times
when you have forms on an HTML page.

245
00:12:26.321 --> 00:12:28.914
You wanna actually stop
the event from submitting and

246
00:12:28.914 --> 00:12:30.880
then do some stuff before you submit it.

247
00:12:30.880 --> 00:12:33.159
And so typically what do you have to do,

248
00:12:33.159 --> 00:12:36.627
if you had a submit form that
was like submitRegistration.

249
00:12:36.627 --> 00:12:39.261
Inside of your submitRegistration
function you'd have to do run what,

250
00:12:39.261 --> 00:12:40.218
you have to get the event.

251
00:12:40.218 --> 00:12:42.160
You have to run event.prevent default.

252
00:12:42.160 --> 00:12:44.695
Well, vue was like wait,
we do this so often,

253
00:12:44.695 --> 00:12:48.600
why is that code polluting really
logic that's separate from it.

254
00:12:48.600 --> 00:12:51.720
That's really just basically
a logistical implementation.

255
00:12:51.720 --> 00:12:55.891
So by adding .prevent to your submit, it
automatically basically executes on that

256
00:12:55.891 --> 00:12:58.709
prevent default event so
that your code can be cleaner and

257
00:12:58.709 --> 00:13:02.666
you don't have to worry about, basically
it's easier to modularize things.

258
00:13:02.666 --> 00:13:06.674
Because otherwise your functions have
always this context of being attached to

259
00:13:06.674 --> 00:13:08.717
an event which might not always be true.

260
00:13:08.717 --> 00:13:14.334
So this is kind of some syntactic
sugar that's useful that's being used.

261
00:13:14.334 --> 00:13:17.187
And so in this case I'm using
click.prevent to prevent it from actually

262
00:13:17.187 --> 00:13:18.133
doing the navigation.

263
00:13:18.133 --> 00:13:21.738
Again, to be very clear, this is hacky
because, right, we are gonna get into

264
00:13:21.738 --> 00:13:24.868
official routing and so we can change
URLs and those sort of things.

265
00:13:24.868 --> 00:13:27.814
But for the sake of practice right now,
this is why we have it.

266
00:13:27.814 --> 00:13:28.474
All right.

267
00:13:28.474 --> 00:13:30.964
That said, we have an href.

268
00:13:30.964 --> 00:13:34.084
Again following just the same
model click.prevent.

269
00:13:34.084 --> 00:13:40.199
And this time we're gonna showUserPage.

270
00:13:40.199 --> 00:13:44.210
User, that looks good.

271
00:13:44.210 --> 00:13:48.195
And then here showUserPage.

272
00:13:48.195 --> 00:13:54.251
this.currentPage equals User, okay.

273
00:13:54.251 --> 00:13:55.526
Okay, that looks good.

