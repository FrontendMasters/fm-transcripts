WEBVTT

1
00:00:00.100 --> 00:00:06.400
Can you have an else-if kind of,
like a v-if and then v-else, v-else-if?

2
00:00:06.400 --> 00:00:08.250
&gt;&gt; Yeah, you absolutely can.

3
00:00:08.250 --> 00:00:12.960
And so the question here is regarding
can we extend the if-else statement?

4
00:00:12.960 --> 00:00:16.955
And absolutely, because when Evan and
the team were designing the API for this,

5
00:00:16.955 --> 00:00:20.240
their goal really is to extend
upon what you already know.

6
00:00:20.240 --> 00:00:22.830
So if you have if-then-else,
why not else-if?

7
00:00:22.830 --> 00:00:26.254
So in this particular case,
let's just go ahead and for sake of,

8
00:00:26.254 --> 00:00:30.575
we're gonna do the same thing before,
and this time, characterList.length.

9
00:00:30.575 --> 00:00:34.930
And then this time, we'll just make it
even just to kind of showcase this.

10
00:00:34.930 --> 00:00:40.982
And then otherwise,
we'll have a p element, a v-else says,

11
00:00:40.982 --> 00:00:46.702
there are odd characters,
which is a funny joke, hahaha.

12
00:00:46.702 --> 00:00:49.597
Anyways, [SOUND] so it's even right now.

13
00:00:49.597 --> 00:00:52.675
So we add this now and we add another one.

14
00:00:52.675 --> 00:00:58.630
Let's do Appa, refresh, boom.

15
00:00:58.630 --> 00:01:01.910
So it'll run through all the scenarios,
and then at the last one.

16
00:01:01.910 --> 00:01:04.847
So generally speaking,
from a performance perspective,

17
00:01:04.847 --> 00:01:08.663
you do probably wanna optimize for your
most common scenario at the very top so

18
00:01:08.663 --> 00:01:11.146
you don't have Vue running
through everything.

19
00:01:11.146 --> 00:01:17.180
But otherwise, yeah, you can else-if,
as long as you see fit, question here.

20
00:01:17.180 --> 00:01:19.802
&gt;&gt; I would reach for
namespacing characterList under this.

21
00:01:19.802 --> 00:01:21.080
Is there any gotchas with that?

22
00:01:22.200 --> 00:01:23.814
&gt;&gt; Namespacing the characterList.

23
00:01:23.814 --> 00:01:26.189
&gt;&gt; The character in this characterList.

24
00:01:26.189 --> 00:01:28.693
&gt;&gt; This in this character, down here?

25
00:01:28.693 --> 00:01:31.416
&gt;&gt; Up in the markup.

26
00:01:31.416 --> 00:01:33.730
&gt;&gt; Okay, so you're saying you
wanted to namespace this?

27
00:01:33.730 --> 00:01:37.072
&gt;&gt; Yeah, I put it under this,
cuz once you get inside the character,

28
00:01:37.072 --> 00:01:40.700
is character a local variable or
is it on the parent object?

29
00:01:40.700 --> 00:01:44.271
So I tend to put character in
this characterList, meaning,

30
00:01:44.271 --> 00:01:48.470
it's from the parent component or
parent, in this case, the app.

31
00:01:48.470 --> 00:01:50.250
Is there any gotchas inside of that?

32
00:01:50.250 --> 00:01:52.810
&gt;&gt; I see, okay, so
I'm trying to understand.

33
00:01:52.810 --> 00:01:55.789
So you're saying that because of
the way it's kind of spelled out,

34
00:01:55.789 --> 00:01:56.950
it's kind of confusing?

35
00:01:56.950 --> 00:02:00.183
So you wanna be explicit about where
characterList is being called on for

36
00:02:00.183 --> 00:02:00.766
the parent?

37
00:02:00.766 --> 00:02:01.540
&gt;&gt; Yeah, adding this dot.

38
00:02:02.714 --> 00:02:06.300
&gt;&gt; This dot, okay, [LAUGH] we have
avoided that up until this point.

39
00:02:06.300 --> 00:02:10.242
Something that you'll notice is that we're
not actually doing anything special as far

40
00:02:10.242 --> 00:02:12.740
as calling the data that's
inside of the app, right?

41
00:02:12.740 --> 00:02:17.241
We have this characterList array, and all
we're doing is saying, as we can see here,

42
00:02:17.241 --> 00:02:18.858
characterList, character.

43
00:02:18.858 --> 00:02:20.830
We're basically naming things as we go.

44
00:02:20.830 --> 00:02:24.077
And it's because Vue is basically trying
to do that step of abstracting away

45
00:02:24.077 --> 00:02:26.620
the things that you would
normally have to define.

46
00:02:26.620 --> 00:02:29.304
So if this were JavaScript,
you might have to be like,

47
00:02:29.304 --> 00:02:33.500
I have to call the app.data.characterList
to be like I'm calling characterList.

48
00:02:33.500 --> 00:02:36.118
But Vue knows that basically
there are conventions in

49
00:02:36.118 --> 00:02:37.920
the way you kinda call things.

50
00:02:37.920 --> 00:02:40.933
So rather than having you
explicitly define everything,

51
00:02:40.933 --> 00:02:43.587
it is trying to basically
help abstract that away.

52
00:02:43.587 --> 00:02:46.375
But in the future, for
those who wanna be more explicit,

53
00:02:46.375 --> 00:02:49.353
there are ways to kinda namespace
that out a little bit more.

54
00:02:49.353 --> 00:02:51.885
So we'll get into that later on.

55
00:02:51.885 --> 00:02:54.380
Cool, go for it.

56
00:02:54.380 --> 00:02:57.598
&gt;&gt; So I mean, you could almost say
that characterList is a global,

57
00:02:57.598 --> 00:02:59.279
in a sense, or global to the app?

58
00:03:00.370 --> 00:03:03.173
&gt;&gt; Yes, at this point, yeah, especially
once we start getting into components,

59
00:03:03.173 --> 00:03:05.454
cuz components obviously is a big
part of frameworks these days.

60
00:03:05.454 --> 00:03:11.090
characterList will become, well,
hold up, let me backtrack.

61
00:03:12.750 --> 00:03:14.630
So your question here
is regarding whether or

62
00:03:14.630 --> 00:03:17.650
not characterList becomes
global to the entire app.

63
00:03:17.650 --> 00:03:25.000
And so it is global to the context
in that specific rendering context.

64
00:03:25.000 --> 00:03:29.897
So in the case of this page, right,
it has the characterList, it can show it.

65
00:03:29.897 --> 00:03:33.146
When we start getting into components,
it will have its own scope and

66
00:03:33.146 --> 00:03:34.890
it will be separate from the parent.

67
00:03:34.890 --> 00:03:35.722
So in that regard,

68
00:03:35.722 --> 00:03:39.430
you cannot expect characterList
to just show up in any context.

69
00:03:39.430 --> 00:03:45.427
So in Vue, it tries to basically
try to optimize for performance.

70
00:03:45.427 --> 00:03:47.992
There's a performance impact when
it comes to making things global.

71
00:03:47.992 --> 00:03:52.037
But more importantly, you have
namespace polluting that often happens.

72
00:03:52.037 --> 00:03:55.461
And so Vue tries to protect you from
that by forcing you to be explicit

73
00:03:55.461 --> 00:03:58.782
with what you want to be shared and
what you want to be made global.

74
00:03:58.782 --> 00:04:02.026
So there are ways to make
global variables in Vue.

75
00:04:02.026 --> 00:04:05.310
But I would say most of the time,
you're probably not doing that.

76
00:04:05.310 --> 00:04:07.300
And there are other ways
you're trying to share data.

77
00:04:07.300 --> 00:04:11.082
So even in the instance of, say, the use
case regarding a user being logged in,

78
00:04:11.082 --> 00:04:14.500
that's something that impacts
a lot of different components.

79
00:04:14.500 --> 00:04:17.650
And so in the past, the first thing you
might be tempted to do is say, well,

80
00:04:17.650 --> 00:04:20.960
I'll just make a global variable that
says, hey, is the user logged in?

81
00:04:20.960 --> 00:04:24.530
Cuz, I don't know,
call it 30% of our code base uses it.

82
00:04:24.530 --> 00:04:27.487
But that also means 70% of
your code base doesn't use it.

83
00:04:27.487 --> 00:04:30.581
And now it has this user logged in state
that it has to either worry about or

84
00:04:30.581 --> 00:04:32.930
it might conflict for some other reason.

85
00:04:32.930 --> 00:04:37.368
And so Vue 3 in particular, especially
with the composition API and composables,

86
00:04:37.368 --> 00:04:39.880
which I promise we'll
cover in this workshop.

87
00:04:39.880 --> 00:04:43.630
Allows you to then segment that to be
very explicit that on the 30% that care

88
00:04:43.630 --> 00:04:46.000
about user logged in, great, drop it in.

89
00:04:46.000 --> 00:04:49.070
Otherwise, you don't even
have to worry about it.

90
00:04:49.070 --> 00:04:51.416
And so, we'll definitely
be talking about that, but

91
00:04:51.416 --> 00:04:53.620
does it help to answer your question?

92
00:04:53.620 --> 00:04:56.470
Okay, solid, did you have a question?

93
00:04:56.470 --> 00:04:58.019
&gt;&gt; A small thing on your v-for.

94
00:04:58.019 --> 00:05:01.211
&gt;&gt; Yeah.
&gt;&gt; The first and last equivalent, so

95
00:05:01.211 --> 00:05:05.148
you wanna do commas, but
not on the last person.

96
00:05:05.148 --> 00:05:06.474
AngularJS would be first and

97
00:05:06.474 --> 00:05:08.960
last on your loop-
&gt;&gt; They had the first.

98
00:05:08.960 --> 00:05:12.837
Okay, so you seem like we want to
render the list out as a string?

99
00:05:12.837 --> 00:05:15.830
&gt;&gt; As a string with commas,
but not on your last guy.

100
00:05:15.830 --> 00:05:20.906
&gt;&gt; Got it, okay, so the question here
is around if you want it to actually

101
00:05:20.906 --> 00:05:26.069
list the string of characters instead
[LAUGH] that actually I would say,

102
00:05:26.069 --> 00:05:30.460
okay, there's a couple
ways we could do this.

103
00:05:30.460 --> 00:05:33.796
With the information we have now,
the v-for actually would probably

104
00:05:33.796 --> 00:05:37.450
feel a little bit clunky because,
well, and let's show this.

105
00:05:37.450 --> 00:05:38.620
So let's go ahead and do this.

106
00:05:38.620 --> 00:05:42.672
So with information we have here,

107
00:05:42.672 --> 00:05:48.540
if we wanted to have a p
element here instead that,

108
00:05:48.540 --> 00:05:55.127
say, took a span of every
character in characterList.

109
00:05:58.500 --> 00:06:05.786
List, yep, okay, then I'm gonna
do the character.name, okay?

110
00:06:05.786 --> 00:06:08.150
So this should just give
us a mash of things.

111
00:06:08.150 --> 00:06:11.160
Oop, I did not close it, save.

112
00:06:11.160 --> 00:06:12.450
Okay, boom, right?

113
00:06:12.450 --> 00:06:14.490
But what we need is we
need that comma space.

114
00:06:16.250 --> 00:06:20.240
But you're probably also thinking,
okay, let me refresh this now.

115
00:06:20.240 --> 00:06:21.190
Okay, that looks better.

116
00:06:21.190 --> 00:06:24.760
But to your point, we need
the ability to cut off the last part.

117
00:06:24.760 --> 00:06:30.410
And so, gosh, I think the way I
would do this at first glance

118
00:06:30.410 --> 00:06:36.174
would basically be I would
probably just actually do a pull.

119
00:06:36.174 --> 00:06:38.501
No, I think I would
just do another inline.

120
00:06:38.501 --> 00:06:41.865
Using only the techniques
we have right now,

121
00:06:41.865 --> 00:06:46.430
I would say we have if characterList,
or, okay.

122
00:06:46.430 --> 00:06:47.499
So we wanna pull out, okay,

123
00:06:47.499 --> 00:06:50.750
here's a great example of where we
need the index of something, right?

124
00:06:50.750 --> 00:06:55.172
And so I'm gonna repeat this a lot because
I think this is a core thing I'd like to

125
00:06:55.172 --> 00:06:59.550
see other APIs continue as well is that
we build on what you already know.

126
00:06:59.550 --> 00:07:01.768
And since we're in the for
loop in JavaScript,

127
00:07:01.768 --> 00:07:05.261
we can actually pull the index out by
just pulling it out as a second argument

128
00:07:05.261 --> 00:07:07.213
cuz this is the standard JavaScript API.

129
00:07:07.213 --> 00:07:11.435
So again, Vue really tries not to
come in and reinvent things for you.

130
00:07:11.435 --> 00:07:14.890
Once you learn it,
it's a convention we know, why not use it?

131
00:07:14.890 --> 00:07:22.510
So then we can go index ===
characterList.length- 1.

132
00:07:23.850 --> 00:07:27.910
If that is true, empty string,
otherwise, comma like this.

133
00:07:29.280 --> 00:07:31.524
And did I slightly do that off?

134
00:07:31.524 --> 00:07:33.520
I can't spell off by one, once again.

135
00:07:34.640 --> 00:07:37.344
And, autocomplete messed me up.

136
00:07:37.344 --> 00:07:43.520
Length, length, length, this, this,
this, this, great, there we go.

137
00:07:45.020 --> 00:07:46.341
So there are ways, though,

138
00:07:46.341 --> 00:07:49.092
if let's say that in your app
that you wanna go ahead and do,

139
00:07:49.092 --> 00:07:53.220
you're constantly stringing stuff together
and you want it to always leave off.

140
00:07:53.220 --> 00:07:55.410
There are ways you can
create custom directives.

141
00:07:55.410 --> 00:07:57.753
So you could pass it in and
it would do something specific.

142
00:07:57.753 --> 00:08:00.614
Most of the time, I think what I've seen
people do instead is that when we talk

143
00:08:00.614 --> 00:08:02.256
about computed properties in a little bit.

144
00:08:02.256 --> 00:08:05.403
That's usually something
that people use a lot for

145
00:08:05.403 --> 00:08:08.853
these sort of computations,
which we'll cover then.

146
00:08:08.853 --> 00:08:10.520
Does that help to answer your question,
though?

147
00:08:10.520 --> 00:08:14.360
Yeah, but you're right, I think Angular
did have some nice syntactic sugar for

148
00:08:14.360 --> 00:08:15.216
stuff like that.

149
00:08:15.216 --> 00:08:18.590
So I would say that absolutely,
that is a great callback.

