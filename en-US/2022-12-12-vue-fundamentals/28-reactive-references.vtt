WEBVTT

1
00:00:00.185 --> 00:00:03.094
So, here's the thing.

2
00:00:03.094 --> 00:00:04.724
We have a regionName.

3
00:00:04.724 --> 00:00:05.643
We have the Pokedex.

4
00:00:05.643 --> 00:00:07.442
This all looks pretty good.

5
00:00:07.442 --> 00:00:09.996
Except if we take a look at this actually,
and

6
00:00:09.996 --> 00:00:12.697
let's say we wanted to
change the regionName.

7
00:00:12.697 --> 00:00:14.116
This is actually pretty common.

8
00:00:14.116 --> 00:00:17.315
So let's say we wanna say let's do an H2.

9
00:00:17.315 --> 00:00:19.212
And this is a regionName.

10
00:00:19.212 --> 00:00:23.306
There we go.
We see console here there we go.

11
00:00:23.306 --> 00:00:25.944
Now it's not being clicked, okay?

12
00:00:25.944 --> 00:00:28.448
So if you wanna change this you
might be thinking well, okay,

13
00:00:28.448 --> 00:00:29.615
I know what I'm going to do.

14
00:00:29.615 --> 00:00:34.051
I'm going to say inside of
will create a method here,

15
00:00:34.051 --> 00:00:36.724
just to make things very clear.

16
00:00:36.724 --> 00:00:39.190
In this has changed regionName.

17
00:00:42.007 --> 00:00:48.474
And then this .regionName is gonna
be equal to Hoenn after this.

18
00:00:48.474 --> 00:00:50.888
Alright, and then we're gonna
do is wanna create a button.

19
00:00:50.888 --> 00:00:55.521
Actually now that's gonna be
at the bottom of a very long

20
00:00:55.521 --> 00:00:58.289
list equals change regionName.

21
00:00:58.289 --> 00:01:00.813
And then change regionName save.

22
00:01:00.813 --> 00:01:05.845
Okay, so far, again, just to recap,
we wanna be able to change the regionName.

23
00:01:05.845 --> 00:01:09.494
So we created a button that
runs its function that should,

24
00:01:09.494 --> 00:01:13.522
as we've been practicing already,
just change canto to Owen.

25
00:01:13.522 --> 00:01:16.302
So we say that and click.

26
00:01:16.302 --> 00:01:19.247
You'll notice that nothing is happening.

27
00:01:19.247 --> 00:01:23.095
And this might feel weird because after
all isn't this what we've been doing

28
00:01:23.095 --> 00:01:24.051
this entire time?

29
00:01:25.445 --> 00:01:30.422
The secrets of this lies in the fact that
what we talked about when we covered setup

30
00:01:30.422 --> 00:01:33.949
which is that everything in
here is Vanilla JavaScript.

31
00:01:33.949 --> 00:01:37.592
So what you're returning here,
while view will go ahead and register it

32
00:01:37.592 --> 00:01:41.608
to the rest of the component, there's
no reactivity attached to it right now.

33
00:01:41.608 --> 00:01:42.161
Because why?

34
00:01:42.161 --> 00:01:43.841
It's a plain JavaScript const.

35
00:01:43.841 --> 00:01:44.905
It's a constant.

36
00:01:44.905 --> 00:01:46.689
And the same thing is
happening with Pokedex.

37
00:01:46.689 --> 00:01:50.259
In other words, all the stuff that we were
talking about regarding reactive data,

38
00:01:50.259 --> 00:01:52.560
computer properties,
that will not work with this.

39
00:01:52.560 --> 00:01:54.402
Because at this point, it's not reactive.

40
00:01:54.402 --> 00:01:57.663
So how do we bring some reactivity?

41
00:01:57.663 --> 00:02:01.552
Well the way we do that is actually
by using view helper methods.

42
00:02:01.552 --> 00:02:05.706
And so we mentioned that earlier were a
really popular thing that with view three

43
00:02:05.706 --> 00:02:09.736
is the ability to parse out different
functions to kind of help people use it in

44
00:02:09.736 --> 00:02:10.856
different context.

45
00:02:10.856 --> 00:02:15.329
Well, there is a helper method for turning
something into a reactive reference.

46
00:02:15.329 --> 00:02:19.526
And the way we do that
is we import from view.

47
00:02:19.526 --> 00:02:24.123
And we D structure out
this method called ref.

48
00:02:24.123 --> 00:02:26.282
Again, if you think of ref
think of reactive reference.

49
00:02:26.282 --> 00:02:27.176
And so how does that work?

50
00:02:27.176 --> 00:02:32.021
Well, what we do is we actually just
wrapped the value that we want to

51
00:02:32.021 --> 00:02:36.368
be reactive inside of this
helper method that's what we do.

52
00:02:36.368 --> 00:02:39.217
And so now if I refresh this and
we change it,

53
00:02:39.217 --> 00:02:42.992
you'll notice it's now actually
being tracked by view.

54
00:02:42.992 --> 00:02:46.909
And so this ref and a lot of the content
we'll be talking about is actually really

55
00:02:46.909 --> 00:02:51.181
critical because going forward, whenever
you're working side of composition API,

56
00:02:51.181 --> 00:02:54.828
you have to be very explicit about when
you want view to introduce metric.

57
00:02:54.828 --> 00:02:58.039
And so this is actually one of the things
I do think that's beneficial to

58
00:02:58.039 --> 00:03:01.464
the composition API is because now you
know exactly where view is coming in to

59
00:03:01.464 --> 00:03:02.019
do things.

60
00:03:02.019 --> 00:03:05.904
Whereas in the options API you could argue
that this context could be confusing for

61
00:03:05.904 --> 00:03:07.153
JavaScript developers.

62
00:03:07.153 --> 00:03:09.595
And what if they wanted to come in and
change some stuff right?

63
00:03:09.595 --> 00:03:12.962
Composition API is your ability
to get at the primitives and

64
00:03:12.962 --> 00:03:17.488
say okay this is stuff I wanna do and then
view do your magic for this kinda stuff.

65
00:03:17.488 --> 00:03:21.302
And so for example right, if we wanted
to say let's actually have ability

66
00:03:21.302 --> 00:03:23.220
to have like an all caps regionName.

67
00:03:23.220 --> 00:03:26.454
Well, the way we can easily do that
is you can have a computed property.

68
00:03:26.454 --> 00:03:27.592
That's how I would approach this.

69
00:03:27.592 --> 00:03:30.636
So we'll say region all caps.

70
00:03:30.636 --> 00:03:33.243
And actually, I'll just be more
specific region name all caps.

71
00:03:33.243 --> 00:03:35.321
And what do we need how we
need a computed property.

72
00:03:35.321 --> 00:03:39.114
And guess what the helper
method is computed.

73
00:03:39.114 --> 00:03:41.026
So we have a computer property, but

74
00:03:41.026 --> 00:03:45.189
what we need to do inside of our computer
property is we need to run a function.

75
00:03:45.189 --> 00:03:48.226
Because we look back at our
other apps that use computed.

76
00:03:48.226 --> 00:03:50.743
Let's go back into another
component that uses it.

77
00:03:52.314 --> 00:03:56.046
You'll see that all of our computer
properties actually are functions,

78
00:03:56.046 --> 00:03:59.778
which makes sense because they need to
run a computation on the things that

79
00:03:59.778 --> 00:04:00.820
are dependencies.

80
00:04:00.820 --> 00:04:04.218
So, we have an error function in here,
and what are we gonna do?

81
00:04:04.218 --> 00:04:07.835
We gonna go ahead and we're gonna return,
just like we did before,

82
00:04:07.835 --> 00:04:10.572
we're gonna return the region
name to uppercase.

83
00:04:10.572 --> 00:04:14.276
This is probably our first instinct as
far as how we would make this work.

84
00:04:14.276 --> 00:04:16.590
And so to make sure this works,

85
00:04:16.590 --> 00:04:21.229
we've got to make sure we return
this to regionName all caps.

86
00:04:21.229 --> 00:04:26.211
Just like that, and then let's go
ahead and expose that here as an H3.

87
00:04:26.211 --> 00:04:29.755
RegionName of caps, just like that.

88
00:04:29.755 --> 00:04:31.243
And we'll save.

89
00:04:31.243 --> 00:04:35.321
And you might notice that well,
something's broken.

90
00:04:35.321 --> 00:04:36.366
What's going on?

91
00:04:38.002 --> 00:04:40.563
Well, it's in regionName but
to uppercase is not a function.

92
00:04:40.563 --> 00:04:45.881
You might be thinking This is weird,
but RegionName is a string, right?

93
00:04:45.881 --> 00:04:47.441
It's not.

94
00:04:47.441 --> 00:04:49.038
Yeah, it's not a string anymore.

95
00:04:49.038 --> 00:04:53.274
It is now a reactive reference, which
actually some of you have noticed when

96
00:04:53.274 --> 00:04:55.733
you're doing the inspecting the element.

97
00:04:55.733 --> 00:05:01.846
Let's go ahead and actually log regionName
at this point and see what we get.

98
00:05:01.846 --> 00:05:04.408
If I refresh that, that's fine,
we get a massive error.

99
00:05:04.408 --> 00:05:08.199
And you'll see things like
the ref implementation.

100
00:05:08.199 --> 00:05:12.623
You also might have seen as well when
you're doing the options API you saw proxy

101
00:05:12.623 --> 00:05:14.783
show up when you would log out a value.

102
00:05:14.783 --> 00:05:16.124
And I know that was confusing for

103
00:05:16.124 --> 00:05:19.462
some people because they're expecting
to just see what the value actually is.

104
00:05:19.462 --> 00:05:23.518
But one of the big rewrites of view three
when it came to the reactivity engine is

105
00:05:23.518 --> 00:05:27.697
that the jobs skip proxies underneath in
order to manage how all the dependencies

106
00:05:27.697 --> 00:05:28.752
are being tracked.

107
00:05:28.752 --> 00:05:32.455
And so again, you don't need to
understand how proxies work, for

108
00:05:32.455 --> 00:05:35.645
you to be familiar with, or
basically to work with view.

109
00:05:35.645 --> 00:05:37.890
But in case that's something
you're interested in,

110
00:05:37.890 --> 00:05:40.714
I just wanted to give you sort of like
a little bit of a preview of that so

111
00:05:40.714 --> 00:05:43.379
that you can always dive into that
if you wanna learn more about.

112
00:05:43.379 --> 00:05:47.683
But you'll notice here that once again,
regionName is not a string.

113
00:05:47.683 --> 00:05:49.513
What is it?
It's a rough implementation because

114
00:05:49.513 --> 00:05:50.580
it's a reactive reference.

115
00:05:50.580 --> 00:05:55.136
Meaning, the way we actually get to the
value of it is actually to basically think

116
00:05:55.136 --> 00:05:56.410
of it as an object now.

117
00:05:56.410 --> 00:05:59.120
It's an object that has the ability
to update it, its dependencies.

118
00:05:59.120 --> 00:06:02.320
And so when we actually want to
access the raw value of a reference,

119
00:06:02.320 --> 00:06:04.163
we have to actually unpack the thing.

120
00:06:04.163 --> 00:06:08.683
And the way we do that
is by saying .value.

121
00:06:08.683 --> 00:06:13.094
And you'll notice once you
do that everything works.

122
00:06:13.094 --> 00:06:17.148
Now, this might feel a little bit
odd after using the options API for

123
00:06:17.148 --> 00:06:21.933
a little while, because, after all in
the past are actually not even the past.

124
00:06:21.933 --> 00:06:22.866
If we wanted to,

125
00:06:22.866 --> 00:06:26.953
we could have theoretically created
a computer property at this level.

126
00:06:26.953 --> 00:06:30.321
And just for
the sake of having comparison,

127
00:06:30.321 --> 00:06:33.151
this will be regionName lowercase.

128
00:06:33.151 --> 00:06:39.891
And so what we do here is return this
regionName .tolowercase just like that.

129
00:06:39.891 --> 00:06:42.936
And then we'll just add
another H3 regionName.

130
00:06:42.936 --> 00:06:46.740
All okay no it looks
like it's just lowercase.

131
00:06:46.740 --> 00:06:50.393
Yeah okay save okay.

132
00:06:50.393 --> 00:06:52.532
So, that happens to work.

133
00:06:52.532 --> 00:06:53.153
Let me see.

134
00:06:53.153 --> 00:06:55.230
Let me have a differentiator here.

135
00:06:55.230 --> 00:06:56.026
There we go.

136
00:06:56.026 --> 00:06:59.494
Okay, sentence case all case okay.

137
00:06:59.494 --> 00:07:03.807
So you might be thinking, well,
this is way nicer, right?

138
00:07:03.807 --> 00:07:05.459
Like, why do I want that value?

139
00:07:05.459 --> 00:07:08.379
And I'll say when I first was
exposed to this, I would agree.

140
00:07:08.379 --> 00:07:10.533
[LAUGH] It definitely feels odd.

141
00:07:10.533 --> 00:07:14.770
But there is something to understand about
the reason why this is actually helpful.

142
00:07:14.770 --> 00:07:18.481
Is because we do have to remember that
when you're working in vanilla JavaScript

143
00:07:18.481 --> 00:07:22.211
it is important to be able to tell when
something is viewed when something is not.

144
00:07:22.211 --> 00:07:24.298
And so we think about cons regionName.

145
00:07:24.298 --> 00:07:27.710
The fact that you actually have to unpack
the value does signify to people that

146
00:07:27.710 --> 00:07:31.283
when they're working with this particular
value that it's already attached to

147
00:07:31.283 --> 00:07:32.294
the view reactivity.

148
00:07:32.294 --> 00:07:34.863
That said, I wanted to give
you the pros of how people see

149
00:07:34.863 --> 00:07:36.621
that because a lot people do like ref.

150
00:07:36.621 --> 00:07:40.572
But in the event you're like,
I really don't like ref.

151
00:07:40.572 --> 00:07:46.706
What you can do instead is you can do
this helper method called reactive.

152
00:07:46.706 --> 00:07:51.334
And so what reactive is is basically
think of the data option from

153
00:07:51.334 --> 00:07:55.544
the options API package in
a nice little helper function.

154
00:07:55.544 --> 00:07:59.156
Because earlier there was a question
regarding around the fact that what if I

155
00:07:59.156 --> 00:08:00.461
don't like the name data?

156
00:08:00.461 --> 00:08:01.535
What if I wanna call it state?

157
00:08:01.535 --> 00:08:06.578
Well, we can state,
it's a reactive object.

158
00:08:06.578 --> 00:08:13.227
And inside of here,
let's just say I'll just do region two and

159
00:08:13.227 --> 00:08:17.374
I actually don't know a third region.

160
00:08:17.374 --> 00:08:24.740
It's fine okay I'll just do element
type I would say lightning okay?

161
00:08:24.740 --> 00:08:30.044
So, when you're doing the state first
of all I'll go ahead and log out state.

162
00:08:32.938 --> 00:08:36.201
What you end up getting is something
that looks like a lot more of

163
00:08:36.201 --> 00:08:40.268
what people are probably expecting when
they're actually expecting element

164
00:08:40.268 --> 00:08:41.325
which is the proxy.

165
00:08:41.325 --> 00:08:45.907
This is what we've seen earlier when we
actually inspected the options API element

166
00:08:45.907 --> 00:08:49.581
in that you have to look at the target
in order to get underneath it.

167
00:08:49.581 --> 00:08:56.634
But what's nice about this now, is that,
again, this is gonna be misplaced,

168
00:08:56.634 --> 00:09:01.375
but if we do
state.element.type.touppercase and

169
00:09:01.375 --> 00:09:05.397
run it, you'll see it actually just works.

170
00:09:05.397 --> 00:09:10.065
And so the way the thing of reactive is,
it's like a nicely packaged way of

171
00:09:10.065 --> 00:09:15.278
collecting a rest together and that you
don't have to unpackage it with.value.

172
00:09:15.278 --> 00:09:18.572
And so there are plenty of code
bases I've seen that people never

173
00:09:18.572 --> 00:09:21.573
touch ref they'd like state or
sorry they like reactive.

174
00:09:21.573 --> 00:09:26.436
Because reactive feels like composition or
sorry feels like options API, but

175
00:09:26.436 --> 00:09:29.244
you're in the composition API's setting.

176
00:09:29.244 --> 00:09:31.042
And so is there a right or
wrong way to do this?

177
00:09:31.042 --> 00:09:32.126
Absolutely not.

178
00:09:32.126 --> 00:09:37.517
So for the sake of having this example
also be here, I'm just gonna say element

179
00:09:37.517 --> 00:09:43.411
type all caps, and then we'll make sure to
return this here, make it alphabetical.

180
00:09:43.411 --> 00:09:46.213
And then I'll just make sure it's here.

181
00:09:46.213 --> 00:09:48.070
And then we should be good okay.

182
00:09:51.110 --> 00:09:53.208
So, there we have it.

183
00:09:53.208 --> 00:09:57.566
This is the fundamentals
around composition API.

184
00:09:57.566 --> 00:10:00.352
As far as the highlights to consider this,
once again,

185
00:10:00.352 --> 00:10:02.859
is that you're now in
freeform JavaScript land.

186
00:10:02.859 --> 00:10:05.226
So this is where I would
say comparing options,

187
00:10:05.226 --> 00:10:07.415
API to composition API
is that options API,

188
00:10:07.415 --> 00:10:10.924
you don't need as much JavaScript to
get up and running I would argue.

189
00:10:10.924 --> 00:10:14.740
And I've seen that before with people who
have just enough to understand the syntax,

190
00:10:14.740 --> 00:10:18.026
where because of this syntax, they were
able to just kind of get in there,

191
00:10:18.026 --> 00:10:19.737
make some changes, make some swaps.

192
00:10:19.737 --> 00:10:23.404
And the templating was easy enough that
people without a lot of JavaScript

193
00:10:23.404 --> 00:10:26.256
experience could actually be
productive on a cool base.

194
00:10:26.256 --> 00:10:29.540
With something like this, however,
when it comes to the composition API,

195
00:10:29.540 --> 00:10:31.507
as you can see,
there's a lot more going on.

196
00:10:31.507 --> 00:10:32.463
You need to understand helper functions.

197
00:10:32.463 --> 00:10:33.775
You need to know about modules.

198
00:10:33.775 --> 00:10:38.072
You need to go ahead and make sure if
you're using ref that it's a dot value,

199
00:10:38.072 --> 00:10:42.303
that the skill cap jumps considerably
when it comes to the amount of jobs you

200
00:10:42.303 --> 00:10:45.750
need to know in order to be
productive with competition API.

