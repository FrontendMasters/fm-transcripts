WEBVTT

1
00:00:00.126 --> 00:00:03.701
So I wanna give people, first, a chance
to practice the props approach, and

2
00:00:03.701 --> 00:00:07.496
then I'll reset the context in terms of
the lead-in into the next technique that I

3
00:00:07.496 --> 00:00:10.906
think is really important when it comes
to the model of web development and

4
00:00:10.906 --> 00:00:11.955
how we look at things.

5
00:00:15.582 --> 00:00:18.280
We did get a great
question here in the chat.

6
00:00:18.280 --> 00:00:21.911
And so, is this around the idea of
when in a lot of real world apps,

7
00:00:21.911 --> 00:00:26.230
a lot of times you're getting large
sets of data from your API, right?

8
00:00:26.230 --> 00:00:29.610
And so in the case of the question is,
user details.

9
00:00:29.610 --> 00:00:33.350
And so if you're creating a component like
user card, how might you approach this?

10
00:00:33.350 --> 00:00:38.159
So, again, just for the sake of not
just me talking, lets at least scaffold

11
00:00:38.159 --> 00:00:42.757
this out a little bit, just so
there's something visual for us to have.

12
00:00:44.411 --> 00:00:47.102
[SOUND] Let's go to the playground.

13
00:00:47.102 --> 00:00:49.156
And then we'll go into our app.

14
00:00:49.156 --> 00:00:53.720
Okay, there we go.

15
00:00:53.720 --> 00:00:59.620
And so what I'm gonna do here, I'm gonna
create a file called user-card.vue.

16
00:00:59.620 --> 00:01:04.448
And then let me just do this real
quick to set up the scaffold,

17
00:01:04.448 --> 00:01:07.200
let's keep it easy user.

18
00:01:07.200 --> 00:01:09.980
All right, so
we have a user card component.

19
00:01:09.980 --> 00:01:13.628
And then I'll explain what
is the question here.

20
00:01:13.628 --> 00:01:22.656
UserCard from components.user-card.vue,
UserCard, okay.

21
00:01:22.656 --> 00:01:30.182
And then here we have
a UserCard like that.

22
00:01:30.182 --> 00:01:37.648
So let me run, wait,
wrong thing to run dev in, okay.

23
00:01:40.471 --> 00:01:45.192
All right, cool, this is too small.

24
00:01:45.192 --> 00:01:48.510
So we're gonna bump that,
bump that, bump that, close that.

25
00:01:48.510 --> 00:01:51.754
Okay, so the question here is around this

26
00:01:51.754 --> 00:01:56.213
concept of what happens when
you get a large data object?

27
00:01:56.213 --> 00:02:02.366
So inside of here, for instance, let's
just define it here real quick is that,

28
00:02:02.366 --> 00:02:07.161
let's say we have a userData object
that we end up fetching from

29
00:02:07.161 --> 00:02:12.317
the API that has something like name,
Ben, preferredFramework,

30
00:02:12.317 --> 00:02:15.765
vue, for example, favoriteFood, sushi.

31
00:02:17.800 --> 00:02:21.075
And then, let's just keep this, okay, so
let's say there's this level of object, or

32
00:02:21.075 --> 00:02:23.250
actually let's go ahead and,
what's one more thing?

33
00:02:23.250 --> 00:02:25.247
Let's just say, I don't know,
favoriteNumbers.

34
00:02:25.247 --> 00:02:28.218
And this can be an array,
and that can be 8, what?

35
00:02:28.218 --> 00:02:32.727
10, these are not actually my favorite
numbers, but for the sake of the exercise.

36
00:02:32.727 --> 00:02:34.330
Okay, we have this complex thing.

37
00:02:34.330 --> 00:02:37.274
And so the question here is,
if the UserCard, for example,

38
00:02:37.274 --> 00:02:40.592
let's say on the user card we only
wanna display a couple of things.

39
00:02:40.592 --> 00:02:46.923
We wanna display the name, we want to
display the, what else have we got?

40
00:02:46.923 --> 00:02:51.083
[SOUND] We got the Name, and
let's just say Favorite Food.

41
00:02:51.083 --> 00:02:52.644
Let's actually just say two things.

42
00:02:54.978 --> 00:02:56.940
And so we refresh this, very good.

43
00:02:56.940 --> 00:03:00.225
Okay, the question here is
around data architecture, and

44
00:03:00.225 --> 00:03:02.003
how do we actually manage this?

45
00:03:02.003 --> 00:03:04.436
Because there's one way we can do this,
right?

46
00:03:04.436 --> 00:03:06.964
Let's talk about the first approach.

47
00:03:06.964 --> 00:03:11.054
Probably the most straightforward
approach is to just say that, hey,

48
00:03:11.054 --> 00:03:14.745
inside of this component I'm
gonna take this prop called user.

49
00:03:14.745 --> 00:03:21.141
And it's gonna be a type of object,
and I'm going to require it, okay.

50
00:03:21.141 --> 00:03:27.592
And then here is where I'll say user.name,
and user.favoriteFood,

51
00:03:27.592 --> 00:03:33.409
cuz that corresponds with this
data that we're gonna go ahead and

52
00:03:33.409 --> 00:03:38.075
pass here directly, user="userData", okay?

53
00:03:38.075 --> 00:03:42.100
So if we take a look at how that looks
here, you'll see, did I not save?

54
00:03:43.860 --> 00:03:44.810
There we go.

55
00:03:44.810 --> 00:03:48.210
You see, user Ben appears and
sushi appears.

56
00:03:48.210 --> 00:03:49.432
Okay, so it's working.

57
00:03:49.432 --> 00:03:51.968
But the question here is,
as you'll notice,

58
00:03:51.968 --> 00:03:55.920
is that we have passed in more
data than we actually need.

59
00:03:55.920 --> 00:03:59.870
And so I think the question is kinda like,
what's the right way?

60
00:03:59.870 --> 00:04:04.960
And like a lot of programming things,
there is no singular right way.

61
00:04:04.960 --> 00:04:07.627
A lot of times what it ends up boiling
down to when it comes to managing this

62
00:04:07.627 --> 00:04:09.992
stuff is the complexity around
maintenance of the components,

63
00:04:09.992 --> 00:04:12.090
that's what I would basically say.

64
00:04:12.090 --> 00:04:17.480
There's certainly sometimes concerns that,
the data you're passing in is so massive.

65
00:04:17.480 --> 00:04:20.230
They're like, it doesn't make sense
to pass it as a single component.

66
00:04:20.230 --> 00:04:22.059
But then I would argue at that point,

67
00:04:22.059 --> 00:04:24.834
the bottleneck is not
the component architecture, but

68
00:04:24.834 --> 00:04:28.801
maybe how data is being fetched and being
passed on at the higher level, right?

69
00:04:28.801 --> 00:04:31.460
This is why I think stuff like
GraphQL has gotten really popular.

70
00:04:31.460 --> 00:04:35.650
Because if the servers are just returning
giant blobs of data, that's expensive for

71
00:04:35.650 --> 00:04:36.590
the user, right?

72
00:04:36.590 --> 00:04:38.957
There's no amount of smart
things you can do as far as,

73
00:04:38.957 --> 00:04:42.559
if you're just getting more data than you
need from your server, that's a problem

74
00:04:42.559 --> 00:04:46.280
that has to be dealt at that end,
and not necessarily at this level.

75
00:04:46.280 --> 00:04:50.580
And so in this case, however though,
let's say this was a lot bigger.

76
00:04:50.580 --> 00:04:51.967
Let's just say this was a lot bigger,
right?

77
00:04:51.967 --> 00:04:53.810
And you're like,
I really don't wanna pass that.

78
00:04:53.810 --> 00:04:57.411
There honestly is nothing wrong just
being like, well, they will have a name,

79
00:04:57.411 --> 00:04:58.285
it'll be String.

80
00:04:58.285 --> 00:05:04.479
And this time we'll just say
it's a default of John Doe.

81
00:05:04.479 --> 00:05:08.871
And then we'll also have a food
prop that is a type String, and

82
00:05:08.871 --> 00:05:12.175
we'll default it to Cheeseburgers, right?

83
00:05:12.175 --> 00:05:15.179
And so what's cool about this now with
the default, cuz this is, I think,

84
00:05:15.179 --> 00:05:17.155
the first time I'm demoing this.

85
00:05:17.155 --> 00:05:22.685
Is that if in the event we don't include
anything on the app side, you'll see.

86
00:05:24.715 --> 00:05:26.215
What did I break?

87
00:05:26.215 --> 00:05:28.417
&gt;&gt; You used user in your app.

88
00:05:28.417 --> 00:05:31.160
&gt;&gt; I did, you're totally right,
good catch.

89
00:05:31.160 --> 00:05:33.690
It's no longer an object,
it's just individual properties.

90
00:05:34.770 --> 00:05:36.333
There we go.

91
00:05:36.333 --> 00:05:39.496
User, favorite food, yes,
and this is just food.

92
00:05:39.496 --> 00:05:42.127
Okay, you can see we have John Doe and
cheeseburgers.

93
00:05:42.127 --> 00:05:45.633
And then, as a result,
what you get is now, okay, let's just say,

94
00:05:45.633 --> 00:05:47.705
Ben's favorite food is cheeseburger.

95
00:05:47.705 --> 00:05:52.120
Well, then in that case, userData.name
can be the only thing that we pass.

96
00:05:52.120 --> 00:05:57.523
And you'll notice that Ben state, Ben is
good, default prop stays cheeseburger.

97
00:05:57.523 --> 00:06:03.285
And then here you can also then say,
you know what?

98
00:06:03.285 --> 00:06:06.135
Then also for favorite, so,

99
00:06:06.135 --> 00:06:12.295
food can be userData.favoriteFood,
and then it still works.

100
00:06:12.295 --> 00:06:14.564
And so, again,
it's one of those things, I think,

101
00:06:14.564 --> 00:06:17.853
with experience you'll come to figure out,
one, when is it too many props?

102
00:06:17.853 --> 00:06:20.490
Cuz I will say,
that is actually a legitimate problem.

103
00:06:20.490 --> 00:06:24.315
If you have the point where you're
breaking down your object, then you have

104
00:06:24.315 --> 00:06:29.090
ten lines of props, no one's gonna wanna
read that, no one wants to deal with that.

105
00:06:29.090 --> 00:06:31.436
But, again, fill it out with your team.

106
00:06:31.436 --> 00:06:33.620
Figure out, what is your limit?

107
00:06:33.620 --> 00:06:36.290
For me once I start getting
passed three to five props,

108
00:06:36.290 --> 00:06:39.715
I start wondering if I can maybe
manipulate the data just pass a concise

109
00:06:39.715 --> 00:06:43.170
object that can then be spread
out inside of the component.

110
00:06:43.170 --> 00:06:46.319
But, again, it's one of those things where
you'll have a style as far as how you

111
00:06:46.319 --> 00:06:47.260
approach that, yeah?

112
00:06:47.260 --> 00:06:51.030
&gt;&gt; Would that be where you might use
a computed property to pass as a prop?

113
00:06:52.740 --> 00:06:54.280
&gt;&gt; I love it, okay.

114
00:06:54.280 --> 00:06:57.029
So the question here is that then
with this same concept, right?

115
00:06:57.029 --> 00:07:00.248
Could we then use a computed
property to pass it down, instead?

116
00:07:00.248 --> 00:07:01.313
And I think that's a great example.

117
00:07:01.313 --> 00:07:04.328
So once again, let's take this example.

118
00:07:04.328 --> 00:07:08.921
If we wanted to say,
only pass down the food and the name,

119
00:07:08.921 --> 00:07:12.295
we could say, call it refinedUserData.

120
00:07:12.295 --> 00:07:16.432
And this refinedUserData
can basically just be,

121
00:07:16.432 --> 00:07:20.773
returns an object where we do a [SOUND],
what is that?

122
00:07:20.773 --> 00:07:24.629
Name and then just this.userData.name.

123
00:07:24.629 --> 00:07:32.258
And then food, this.userData.favoriteFood.

124
00:07:32.258 --> 00:07:35.727
And that way you actually get to
massage the data a little bit, anyways.

125
00:07:35.727 --> 00:07:41.548
And then we can revert back to this
user now, which can just be passed.

126
00:07:41.548 --> 00:07:44.380
And it will be passed refinedUserData.

127
00:07:44.380 --> 00:07:52.350
And so it means we'll update this now to
be user, type: Object, required: true.

128
00:07:52.350 --> 00:07:54.612
And this time, we can then say user.name,

129
00:07:54.612 --> 00:07:57.078
actually I could have
just done that like that.

130
00:07:57.078 --> 00:08:01.040
There we go.

131
00:08:01.040 --> 00:08:02.747
What did I break?

132
00:08:02.747 --> 00:08:08.570
Cannot read properties defined name,
computed return name.

133
00:08:10.056 --> 00:08:12.150
Okay, it did work,
I just didn't save after view.

134
00:08:12.150 --> 00:08:14.730
Okay, so there you go.

135
00:08:14.730 --> 00:08:19.070
That's an example of passing down just
the data you need into your components so

136
00:08:19.070 --> 00:08:24.140
that it doesn't have to deal with the
cruft of all the other data properties.

137
00:08:24.140 --> 00:08:28.493
And so once again, it'll be a stylistic
part as far as like filling out what makes

138
00:08:28.493 --> 00:08:32.400
the most sense, in terms of,
is that level of complexity even needed?

139
00:08:32.400 --> 00:08:36.052
Because if it's just one or two extra
properties, I'd say, most of the time,

140
00:08:36.052 --> 00:08:38.832
it's not worth creating
an entirely separate property just

141
00:08:38.832 --> 00:08:40.319
to refine the data a little bit.

142
00:08:40.319 --> 00:08:43.181
Granted, if you have a massive card,
right?

143
00:08:43.181 --> 00:08:46.182
That has a ton of stuff in it,
then that's the point where, once again,

144
00:08:46.182 --> 00:08:49.532
whether using things like serverless
functions, for example, those are great

145
00:08:49.532 --> 00:08:52.487
ways to massage the data so that when
they come back from the back-end,

146
00:08:52.487 --> 00:08:54.380
it's smaller in the way that you want.

147
00:08:54.380 --> 00:08:56.740
That's one approach to that, as well.

148
00:08:56.740 --> 00:09:00.101
Because, for example here,
one of the APIs we have to play

149
00:09:00.101 --> 00:09:04.781
with later in the workshop is, if you take
a look at something like this, right?

150
00:09:04.781 --> 00:09:08.974
This is actually a great example
of a really complicated,

151
00:09:08.974 --> 00:09:10.780
let me see, copy paste.

152
00:09:11.940 --> 00:09:14.870
This is the entire thing for
the Pokemon Ditto, and

153
00:09:14.870 --> 00:09:18.750
there's a lot of stuff in here
that you probably don't need.

154
00:09:18.750 --> 00:09:20.650
You probably need one image.

155
00:09:20.650 --> 00:09:23.840
You need, maybe the number it is,
and maybe need to render.

156
00:09:23.840 --> 00:09:27.920
But this is an example of a lot of raw
data that you don't necessarily need.

157
00:09:27.920 --> 00:09:31.100
And so, once again, there are different
approaches to handle this, but

158
00:09:31.100 --> 00:09:32.760
I hope that answers that question.

159
00:09:32.760 --> 00:09:34.000
So thank you for asking that.

160
00:09:35.990 --> 00:09:38.910
Cool, all right, yes?

161
00:09:38.910 --> 00:09:43.766
&gt;&gt; When you do pass properties,
is it sort of passing by a reference, or

162
00:09:43.766 --> 00:09:46.214
is it passing a copy of the object?

163
00:09:46.214 --> 00:09:48.186
Just cuz we're talking about
performance and memory.

164
00:09:48.186 --> 00:09:53.405
&gt;&gt; [LAUGH] Okay, so the question here is
that when you pass in this refined user

165
00:09:53.405 --> 00:09:59.350
data, is it passing in a copy of it or
is it passing a reference to that data?

166
00:09:59.350 --> 00:10:02.641
And the answer is that it's
passing a reference to that data.

167
00:10:02.641 --> 00:10:05.985
And so when it comes to props that
actually does bring up the concept

168
00:10:05.985 --> 00:10:09.225
of mutating props, generally speaking,
not a good practice.

169
00:10:09.225 --> 00:10:14.212
So, what you don't wanna do is come
in here, and then be like, yes,

170
00:10:14.212 --> 00:10:17.641
I'm gonna create a method
that's changeName.

171
00:10:17.641 --> 00:10:21.134
And it'd be, this.user.name = 'Charlie'.

172
00:10:21.134 --> 00:10:24.187
You don't wanna do this.

173
00:10:24.187 --> 00:10:25.675
&gt;&gt; But you could.

174
00:10:25.675 --> 00:10:29.055
&gt;&gt; But you could, but as you can see
though, unexpected mutation of user prop,

175
00:10:29.055 --> 00:10:30.450
it's yelling at you.

176
00:10:30.450 --> 00:10:31.610
Because, once again,

177
00:10:31.610 --> 00:10:35.090
when you start muddling up the chain
of command as far as how data flows,

178
00:10:35.090 --> 00:10:38.810
it starts to get really tricky to
figure out what's happening now, right?

179
00:10:40.050 --> 00:10:43.781
Now, again, this leads into the question
that we had earlier regarding, well,

180
00:10:43.781 --> 00:10:44.754
if that's the case,

181
00:10:44.754 --> 00:10:48.530
are you saying that my child component
can't change the data it's happening?

182
00:10:48.530 --> 00:10:50.230
No, that's not the case, at all.

183
00:10:50.230 --> 00:10:53.438
But before we move on to that topic,
does anyone have any other questions

184
00:10:53.438 --> 00:10:56.920
about the exercise they've worked with
in terms of props, that kinda stuff?

185
00:10:59.470 --> 00:11:01.877
&gt;&gt; If the data changes
outside the components,

186
00:11:01.877 --> 00:11:06.270
since it's passed by reference,
will it rerender the component then?

187
00:11:06.270 --> 00:11:12.865
&gt;&gt; Yeah, it'll know basically what parts
of the to update and all the dependencies.

188
00:11:12.865 --> 00:11:15.863
So that's one of the advantages is that,
basically,

189
00:11:15.863 --> 00:11:18.548
all the reactivity Vue tracks and
takes care of.

