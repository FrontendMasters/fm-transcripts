WEBVTT

1
00:00:00.000 --> 00:00:03.866
Before we move on, though, what I do wanna
cover, there was a question in the chat,

2
00:00:03.866 --> 00:00:07.515
which is actually a great one regarding
how do you actually generate unique keys

3
00:00:07.515 --> 00:00:08.351
on the frontend?

4
00:00:08.351 --> 00:00:13.581
And so, to be clear, so the thing that
I've shown you over this workshop,

5
00:00:13.581 --> 00:00:16.253
let's see, if we take a look at here.

6
00:00:16.253 --> 00:00:18.434
Okay, Line 32.

7
00:00:18.434 --> 00:00:21.313
As you can see, this is something that
I've cobbled together myself, right?

8
00:00:21.313 --> 00:00:25.750
I'm using ES6 template literals to say
I'm gonna guess at a unique data type,

9
00:00:25.750 --> 00:00:29.060
which is user, and
then I'm just gonna attach the ID to it,

10
00:00:29.060 --> 00:00:31.794
even though I know the ID
is kind of not as unique.

11
00:00:31.794 --> 00:00:35.016
And so, this works, I think, when you're
just prototyping and working on things,

12
00:00:35.016 --> 00:00:38.019
but obviously on an enterprise grade
application that becomes a very different

13
00:00:38.019 --> 00:00:38.713
matter, right?

14
00:00:38.713 --> 00:00:42.466
Because user, like you're all of a sudden
contingent on the fact that someone made

15
00:00:42.466 --> 00:00:44.623
the right choices to
scope the name correctly.

16
00:00:44.623 --> 00:00:48.677
And that's not something we ever wanna
rely on in terms of reducing human error.

17
00:00:48.677 --> 00:00:52.323
So when it comes to actually
generating unique IDs granted, ideally,

18
00:00:52.323 --> 00:00:54.156
your backend is doing that for you.

19
00:00:54.156 --> 00:00:58.836
But in the event you're not
actually getting that information,

20
00:00:58.836 --> 00:01:03.441
the npm module I'd really highly
recommend is the uuid module.

21
00:01:03.441 --> 00:01:07.954
And so, basically how it works is you'll
install UUID on your project, and

22
00:01:07.954 --> 00:01:12.343
you basically, as you can see here,
you import it at the top of your file.

23
00:01:12.343 --> 00:01:14.607
And then as part of like
creating the new form, so

24
00:01:14.607 --> 00:01:18.253
actually this does happen a lot if you're
creating like on the frontend side,

25
00:01:18.253 --> 00:01:21.696
especially, creating new data that
you might be sending to the backend.

26
00:01:21.696 --> 00:01:25.370
So you might actually have a case
where I'm gonna just pseudocode this,

27
00:01:25.370 --> 00:01:28.820
we're not gonna install it because
that will just add to the bloat.

28
00:01:28.820 --> 00:01:32.885
But for the sake of demoing this,
let me just go ahead, and at the top here.

29
00:01:32.885 --> 00:01:36.346
So you can imagine that,
what we would do is we would say,

30
00:01:36.346 --> 00:01:40.690
we've copied this line to say, okay,
we want to use the uuid library.

31
00:01:40.690 --> 00:01:44.814
And then again,
assuming we had a new method called,

32
00:01:44.814 --> 00:01:47.482
add, why is that doing that?

33
00:01:47.482 --> 00:01:52.478
Okay, addNewUser(), you could then
say this.UserList.push(), and

34
00:01:52.478 --> 00:01:57.318
when you create a new object, this is
where you're gonna go the ID is going to

35
00:01:57.318 --> 00:01:59.680
be, [SOUND], uuidv4 run like this.

36
00:01:59.680 --> 00:02:04.465
And then, typically, you probably would
have some new user object that you

37
00:02:04.465 --> 00:02:09.500
have in your reactive data, that contains
like name, again, let's say Ben.

38
00:02:09.500 --> 00:02:14.313
And so, what I typically do, is I just
spread out everything from this.newUser().

39
00:02:14.313 --> 00:02:18.841
And then I basically override, in case
there's any IDs that are attached to it,

40
00:02:18.841 --> 00:02:21.785
this ensures that it's
being generated on the fly.

41
00:02:21.785 --> 00:02:25.065
And then that's basically how I would
approach generating a unique ID on

42
00:02:25.065 --> 00:02:25.773
the frontend.

