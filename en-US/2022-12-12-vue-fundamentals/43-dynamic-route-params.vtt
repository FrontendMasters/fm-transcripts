WEBVTT

1
00:00:00.000 --> 00:00:03.558
What happens when you want
to look at a dynamic value?

2
00:00:03.558 --> 00:00:08.315
In other words, when you can't predict the
route that you're going to, so take for

3
00:00:08.315 --> 00:00:12.950
instance, when we go into Pokedex, and
Pokedex has different Pokemon, right?

4
00:00:12.950 --> 00:00:14.943
That is the way the Pokedex works.

5
00:00:14.943 --> 00:00:17.730
What if we wanted to actually render
out the different Pokemon but

6
00:00:17.730 --> 00:00:20.223
we wanted to do you think based
on the parameter in the URL?

7
00:00:20.223 --> 00:00:25.897
So an example of this might be,
if we're looking at the Pokedex page,

8
00:00:25.897 --> 00:00:30.897
and you say, okay,
theoretically what I'd like to be able to

9
00:00:30.897 --> 00:00:36.112
do is also then go to a page that
goes to like go to/Pokedex/1.

10
00:00:36.112 --> 00:00:37.732
And that should call the first Pokemon.

11
00:00:37.732 --> 00:00:41.876
In other words, this part is dynamic
because what we don't wanna do is define

12
00:00:41.876 --> 00:00:43.678
1.view, 2.view, and etc.

13
00:00:43.678 --> 00:00:45.799
And so, how might that actually work?

14
00:00:45.799 --> 00:00:47.574
Well, when it comes to that,

15
00:00:47.574 --> 00:00:51.921
what we're actually looking at is
around the idea of dynamic param IDs.

16
00:00:51.921 --> 00:00:59.130
So the way this works, is we go inside
of our router, inside our playground.

17
00:00:59.130 --> 00:01:04.229
And what we have here,
is we have a path here,

18
00:01:04.229 --> 00:01:08.131
that /Pokedex/ with a colon ID.

19
00:01:08.131 --> 00:01:11.146
And this is what tells it that
it's going to be dynamic.

20
00:01:11.146 --> 00:01:15.757
And then from here, we can then say, let's
create a Pokemon page cuz this would fetch

21
00:01:15.757 --> 00:01:18.205
a specific Pokemon in
this particular case.

22
00:01:18.205 --> 00:01:22.351
Let me SSC this, and
then let's just say Pokemon.

23
00:01:22.351 --> 00:01:26.767
And for now we'll just say number 100 to
show that it's wrong as far as the URL is

24
00:01:26.767 --> 00:01:27.481
concerned.

25
00:01:27.481 --> 00:01:32.386
And then we'll just do component,
and this time we'll just

26
00:01:32.386 --> 00:01:37.498
import the path at views/Pokemon
page.view, Save, okay.

27
00:01:37.498 --> 00:01:42.657
So to prove that this works, we're gonna
go ahead and on the Pokédex page right

28
00:01:42.657 --> 00:01:48.541
here, we will have a router link that goes
to /Pokédex, and this time we'll do /20.

29
00:01:48.541 --> 00:01:49.942
Just that so it's something different.

30
00:01:49.942 --> 00:01:52.351
Go to Pokemon number 20.

31
00:01:52.351 --> 00:01:53.898
Okay, we see that here.

32
00:01:53.898 --> 00:01:55.281
And if we click on this,

33
00:01:55.281 --> 00:01:58.754
you'll see that it does correctly
jump us over to the page.

34
00:01:58.754 --> 00:02:02.120
But what we need is we need to be able
to pull in the dynamic data, right?

35
00:02:02.120 --> 00:02:03.352
How does that work?

36
00:02:04.861 --> 00:02:09.312
Well, when you used to do it in View 2,
the way you would do it in Options API and

37
00:02:09.312 --> 00:02:12.561
you could still could,
is you do this.route.params.

38
00:02:12.561 --> 00:02:14.797
That's usually what you
would reach out for.

39
00:02:14.797 --> 00:02:18.114
But in an effort to get you all
practicing with Composition API and

40
00:02:18.114 --> 00:02:21.991
seeing what an alternative form might
look like, what might you reach for?

41
00:02:21.991 --> 00:02:23.293
Probably a helper method, right?

42
00:02:23.293 --> 00:02:28.270
So we have something called use route,
cuz it's from view router.

43
00:02:28.270 --> 00:02:31.639
Then we can say const route = useRoute.

44
00:02:31.639 --> 00:02:34.633
And then before we do anything,
let's just log that out real quick and

45
00:02:34.633 --> 00:02:35.842
show you what we get.

46
00:02:35.842 --> 00:02:38.483
This is the Pokedex page,
I need to go back.

47
00:02:38.483 --> 00:02:42.312
So, in the Pokedex page, you'll see now,
that we expand this out to the target.

48
00:02:42.312 --> 00:02:46.409
It has a bunch of stuff actually, params,
name, meta, and then if you broke it down

49
00:02:46.409 --> 00:02:50.476
to like query stuff, there's a whole ton
of stuff under there that you can unpack.

50
00:02:50.476 --> 00:02:53.661
But the one we care about
is gonna be the parameters.

51
00:02:53.661 --> 00:02:56.361
So, let me go ahead and
actually move this useRoute,

52
00:02:56.361 --> 00:02:58.768
cuz the where we need it
is not the Pokedex page.

53
00:02:58.768 --> 00:03:00.796
We need to on the Pokemon page.

54
00:03:00.796 --> 00:03:02.878
Let me drop this over here instead.

55
00:03:02.878 --> 00:03:05.580
And so, now let's go ahead and
go to Pokemon 20.

56
00:03:05.580 --> 00:03:09.170
And now we'll notice,
actually we refresh, there we go.

57
00:03:09.170 --> 00:03:11.994
We have our route being rendered.

58
00:03:11.994 --> 00:03:17.665
And when we look at our params, you'll
see that we have an ID of 20 in here.

59
00:03:17.665 --> 00:03:18.982
And where does this ID come from?

60
00:03:18.982 --> 00:03:24.486
This ID comes from what we named
right here inside of our path.

61
00:03:24.486 --> 00:03:26.396
That's where it's actually been defined.

62
00:03:26.396 --> 00:03:28.559
So, well, we've got, if we want.

63
00:03:28.559 --> 00:03:32.255
We say route.params.id.

64
00:03:32.255 --> 00:03:37.380
And if we do that and refresh the page,
you'll see, there it is, 20.

65
00:03:37.380 --> 00:03:38.286
That's all it takes.

66
00:03:38.286 --> 00:03:43.805
And so now your imagination can go from
here, you could go to the Pokemon API.

67
00:03:43.805 --> 00:03:47.094
And then when you load the page, you can
go ahead and fetch the right Pokemon,

68
00:03:47.094 --> 00:03:48.980
get its attributes, render it to the page.

69
00:03:48.980 --> 00:03:53.191
But for the sake of conciseness,
we're just gonna go ahead and

70
00:03:53.191 --> 00:03:56.776
show that here just like this,
route.params.ID.

71
00:03:56.776 --> 00:04:02.517
And then, just like that, you now have
a dynamic page that can take any argument.

72
00:04:02.517 --> 00:04:06.901
And then, however you see fit, you can
programmatically set up else conditions,

73
00:04:06.901 --> 00:04:10.355
if else, whatever not,
to render the right stuff to your users.

74
00:04:10.355 --> 00:04:13.062
&gt;&gt; What about params for parent routes?

75
00:04:13.062 --> 00:04:16.427
&gt;&gt; Okay, so the question here is
around params for parent routes.

76
00:04:16.427 --> 00:04:19.261
So what you're saying is that,
if it's like, so

77
00:04:19.261 --> 00:04:21.359
basically lets get that real quick.

78
00:04:21.359 --> 00:04:25.499
Are you saying something like,
if Pokerdex had then like on top of ID for

79
00:04:25.499 --> 00:04:28.954
the Pokerman,
there was an additional thing for element?

80
00:04:28.954 --> 00:04:32.544
So then you might be on element page and
you wanna look at your ID params?

81
00:04:32.544 --> 00:04:33.242
&gt;&gt; Potentially.

82
00:04:33.242 --> 00:04:37.016
&gt;&gt; Yeah, so I believe the moment
you do the route basically,

83
00:04:37.016 --> 00:04:41.650
you should basically get everything
that comes as a part of that route.

84
00:04:41.650 --> 00:04:45.637
And so, this goes beyond the scope of the
fundamentals review router, but there's

85
00:04:45.637 --> 00:04:49.536
even things like nested views, and all
those things that we can play around with.

86
00:04:49.536 --> 00:04:52.793
So, you should be able to get the parent
from .path without any problem.

87
00:04:52.793 --> 00:04:57.911
And that's why it would be a good
practice, for example, not in your

88
00:04:57.911 --> 00:05:03.752
router.js, to define another route that
uses the same parameter like name.

89
00:05:03.752 --> 00:05:05.554
Like you wouldn't want to be like ID ID.

90
00:05:05.554 --> 00:05:07.441
So, I think that would actually probably,

91
00:05:07.441 --> 00:05:10.961
I'm almost certain that would break the
about view router cuz it'd be confused.

92
00:05:10.961 --> 00:05:14.140
And so, in that particular case, that's
where it's important to be just specific

93
00:05:14.140 --> 00:05:15.497
about what that parameter name is.

94
00:05:15.497 --> 00:05:19.721
And then the route should
contain all of those parameters

95
00:05:19.721 --> 00:05:22.632
correctly appended into that object.

96
00:05:22.632 --> 00:05:24.414
&gt;&gt; So you said nested routes,

97
00:05:24.414 --> 00:05:28.135
could you have like region was
the thing you were saying?

98
00:05:28.135 --> 00:05:30.390
&gt;&gt; Yeah.
&gt;&gt; Region/region ID or

99
00:05:30.390 --> 00:05:31.929
region name-
&gt;&gt; Yep.

100
00:05:31.929 --> 00:05:36.140
&gt;&gt; And then underneath that have
the Pokedex for that region, and

101
00:05:36.140 --> 00:05:38.577
then have a Pokemon page-
&gt;&gt; Yeah.

102
00:05:38.577 --> 00:05:39.547
&gt;&gt; Parameter on that?

103
00:05:39.547 --> 00:05:40.252
&gt;&gt; We can.

104
00:05:40.252 --> 00:05:42.228
And so,
it's not part of this exercise, but

105
00:05:42.228 --> 00:05:44.833
since this is a question I do
wanna show this for the nested.

106
00:05:44.833 --> 00:05:49.395
If we look at the docs right here,
and we look at nested routes.

107
00:05:49.395 --> 00:05:52.869
The thing about nested route is it's easy
to think of it like what we just did,

108
00:05:52.869 --> 00:05:55.075
cuz you see here,
user Johnny profile, right?

109
00:05:55.075 --> 00:05:58.099
You're like,
didn't we just do this pokerdex/ pokermon?

110
00:05:58.099 --> 00:05:59.251
This is different,

111
00:05:59.251 --> 00:06:03.739
because a nested view means that you have
a router view inside of a router view.

112
00:06:03.739 --> 00:06:06.779
Meaning the rest of the page
stays the same, and

113
00:06:06.779 --> 00:06:10.508
just that one section of the page
changes based on the URL.

114
00:06:10.508 --> 00:06:13.958
So as you can see here, inside of this
example, let me blow it up a lot.

115
00:06:13.958 --> 00:06:17.012
Is that the user page out
here which is the shell,

116
00:06:17.012 --> 00:06:21.422
which is /user, is currently
bringing in the Johnny child, right?

117
00:06:21.422 --> 00:06:22.697
So there will be user Johnny.

118
00:06:22.697 --> 00:06:27.029
But the nested view here is for
the profile and the posts.

119
00:06:27.029 --> 00:06:29.246
And so
you can almost think of it like tabs,

120
00:06:29.246 --> 00:06:33.444
where you don't want the whole page to
rerender if you click on posts for Johnny.

121
00:06:33.444 --> 00:06:35.065
You want everything else to stay the same,

122
00:06:35.065 --> 00:06:37.010
you just wanna switch
the tab that's inside of it.

123
00:06:37.010 --> 00:06:41.166
And so, nested views are basically this
concept that without having to rerender

124
00:06:41.166 --> 00:06:43.975
the entire page,
you can just render a portion of it and

125
00:06:43.975 --> 00:06:45.765
have that update based on the URL.

126
00:06:45.765 --> 00:06:48.854
And so, that can be as highly performant
as well when it comes to doing things

127
00:06:48.854 --> 00:06:49.448
for your app.

128
00:06:49.448 --> 00:06:53.419
So I know it's funny that nested views
like sort of had a resurgence lately in

129
00:06:53.419 --> 00:06:54.360
the discussion.

130
00:06:54.360 --> 00:06:56.107
But this has been in view for
quite a while.

131
00:06:56.107 --> 00:06:57.750
But I do wanna make you all aware of it.

132
00:06:57.750 --> 00:07:01.741
So that if you ever find that you're like,
everything else needs to change, or sorry,

133
00:07:01.741 --> 00:07:05.168
everything needs to stay the same, except
for this one part when the URL swaps,

134
00:07:05.168 --> 00:07:06.675
nested views, or nested routes.

135
00:07:06.675 --> 00:07:08.590
Check this out,
this will solve your problems.

