WEBVTT

1
00:00:00.050 --> 00:00:03.776
So the section we're gonna be kicking
off right now is on watchers and

2
00:00:03.776 --> 00:00:05.069
computed properties.

3
00:00:05.069 --> 00:00:10.170
We've talked a lot about reactive data and
we saw that it's cool that it tracks,

4
00:00:10.170 --> 00:00:14.971
but the next step to reactive data a lot
of times comes to the point where it's

5
00:00:14.971 --> 00:00:19.269
a question of what happens when
things depend on that data, right?

6
00:00:19.269 --> 00:00:22.415
So you want something to happen
when the reactive data changes,

7
00:00:22.415 --> 00:00:24.054
this is actually fairly common.

8
00:00:24.054 --> 00:00:28.114
So granted we're doing a lot of things
automatically at this point, right, so for

9
00:00:28.114 --> 00:00:31.768
example, when the data updates view
will automatically update the HTML,

10
00:00:31.768 --> 00:00:34.156
but what do we wanna do
more fine grained things.

11
00:00:34.156 --> 00:00:38.909
So for example, we wanna say,
we wanna watch the count up here,

12
00:00:38.909 --> 00:00:42.693
and if it's even,
we want to go ahead and then say,

13
00:00:42.693 --> 00:00:46.587
update the title up here
to something else, right?

14
00:00:46.587 --> 00:00:51.569
So you can imagine that if we had
this to be counterTitle, for example.

15
00:00:51.569 --> 00:00:54.947
And counterTitle would just put it here.

16
00:00:54.947 --> 00:01:01.795
So counterTitle is going to be, this is
standard, for example, so we and refresh.

17
00:01:01.795 --> 00:01:03.400
Great, Counter Standard here.

18
00:01:03.400 --> 00:01:08.744
And we wanna say, we wanna watch for,
if the count goes past 20,

19
00:01:08.744 --> 00:01:11.900
then we wanna add like long to the text.

20
00:01:11.900 --> 00:01:15.261
And so your first instinct for
those who come from a framework background

21
00:01:15.261 --> 00:01:18.305
is to think, well, we need to be
able to watch the thing, right?

22
00:01:18.305 --> 00:01:21.553
And so to watch something in
view is actually fairly simple.

23
00:01:21.553 --> 00:01:24.868
There actually is a watch
option as you would expect.

24
00:01:24.868 --> 00:01:28.731
So you have data, we have methods,
here's our opportunity to watch something.

25
00:01:28.731 --> 00:01:31.624
And when you wanna watch something,
you basically say,

26
00:01:31.624 --> 00:01:33.741
what is it exactly that we're watching?

27
00:01:33.741 --> 00:01:36.600
Well, in this case,
we're watching the count.

28
00:01:36.600 --> 00:01:40.606
And so when you actually define the count
though, what you wanna do is you wanna

29
00:01:40.606 --> 00:01:44.430
say you need the value that is basically
going to return to you by default cuz

30
00:01:44.430 --> 00:01:48.036
otherwise you don't have something
to refer to inside of that value.

31
00:01:48.036 --> 00:01:51.207
Cuz it's gonna basically say, what
your new value, what's your old value?

32
00:01:51.207 --> 00:01:53.994
And so by default,
you get the new value as the first one so

33
00:01:53.994 --> 00:01:56.156
I'm actually just do
a new value like this.

34
00:01:56.156 --> 00:02:01.178
So you'll see now, here we have a simple
watch function that's watching count.

35
00:02:01.178 --> 00:02:05.452
And then when it changes,
we should automatically see it log.

36
00:02:05.452 --> 00:02:12.319
And so watch count, they're now refresh.

37
00:02:12.319 --> 00:02:13.373
Refreshing would be helpful.

38
00:02:13.373 --> 00:02:14.351
There we go, okay.

39
00:02:14.351 --> 00:02:18.547
So we can see here 1826, we're getting
some loss as well here from increment

40
00:02:18.547 --> 00:02:21.458
count, but
we see that at least it's being triggered.

41
00:02:21.458 --> 00:02:26.201
So your next thing would be like okay,
well logically speaking,

42
00:02:26.201 --> 00:02:29.648
what I would wanna do then is I would say,
well,

43
00:02:29.648 --> 00:02:34.331
if new value is greater than 20,
then this dot counter title.

44
00:02:34.331 --> 00:02:40.339
Counter title plus equals very long, okay.

45
00:02:40.339 --> 00:02:45.546
Now, refresh 1, 2,
you can see boom, it's updated.

46
00:02:45.546 --> 00:02:49.406
And so from a mental model perspective,
you're like, yeah, that makes sense, cool.

47
00:02:49.406 --> 00:02:52.666
And so this is actually a common paradigm
in a lot of frameworks when it comes

48
00:02:52.666 --> 00:02:54.339
to watching reactive dependencies.

49
00:02:54.339 --> 00:02:55.919
That's what it's called.

50
00:02:55.919 --> 00:02:58.474
But view has a better way for
us to do this,

51
00:02:58.474 --> 00:03:01.844
especially when it comes
to modifying existing data.

52
00:03:01.844 --> 00:03:05.439
Because if you think about what we're
doing here, what we're doing is we're

53
00:03:05.439 --> 00:03:08.775
saying based on a reactive data property,
run a specific computation.

54
00:03:08.775 --> 00:03:12.381
And then, but we think about that
from a performance perspective,

55
00:03:12.381 --> 00:03:15.544
we really only wanted to do
that when all the dependencies,

56
00:03:15.544 --> 00:03:17.964
like the right dependencies are triggered.

57
00:03:17.964 --> 00:03:21.591
And so one of the problems that
comes with doing something as like

58
00:03:21.591 --> 00:03:26.243
explicitly watching values is sometimes
especially when apps get really large.

59
00:03:26.243 --> 00:03:29.547
The watch can end up getting triggered
a lot, like unnecessarily so.

60
00:03:29.547 --> 00:03:33.773
And so when you hear things about people
accidentally triggering re renders,

61
00:03:33.773 --> 00:03:35.895
that's what they're talking about.

62
00:03:35.895 --> 00:03:39.005
It's because at that point, you're
manually watching the dependencies and

63
00:03:39.005 --> 00:03:41.940
if you don't know what you're doing,
we're not cashing it correctly.

64
00:03:41.940 --> 00:03:46.692
All of a sudden you might be triggering
re-rendering of thousands of nodes and

65
00:03:46.692 --> 00:03:47.412
wattnode.

66
00:03:47.412 --> 00:03:52.092
So view in its view version came up
with an API that would help to abstract

67
00:03:52.092 --> 00:03:52.878
that away.

68
00:03:52.878 --> 00:03:56.448
And the way it does that is through
the idea of computer properties.

69
00:03:56.448 --> 00:04:02.981
Nice so the way computer properties work
is basically another option on your app.

70
00:04:02.981 --> 00:04:07.902
So I'm gonna add it below data because and
you'll see shortly why.

71
00:04:07.902 --> 00:04:12.459
So computer properties is, think of
it as basically performance optimized

72
00:04:12.459 --> 00:04:15.248
calculations on reactive
data that you have.

73
00:04:15.248 --> 00:04:19.221
So in the instance of, for
example, the counter title, right?

74
00:04:19.221 --> 00:04:23.561
Rather than it be like okay, well,
I'm gonna have a watch on this count,

75
00:04:23.561 --> 00:04:25.671
if it's 20, then add the thing.

76
00:04:25.671 --> 00:04:30.106
Instead, you could be, I'll say,
display title for example.

77
00:04:30.106 --> 00:04:34.171
And so this will be a function
that view will basically,

78
00:04:34.171 --> 00:04:37.122
it will correctly decide when to run it.

79
00:04:37.122 --> 00:04:38.934
So we'll see shortly.

80
00:04:38.934 --> 00:04:40.228
And in this function,
what are we gonna do?

81
00:04:40.228 --> 00:04:47.359
We're gonna say, if this.count is greater
than 20, return counter standard.

82
00:04:49.529 --> 00:04:52.215
Otherwise return, wait.

83
00:04:52.215 --> 00:04:55.235
In this case it was counter very long.

84
00:04:55.235 --> 00:05:00.685
Otherwise, return counter standard,
just like that.

85
00:05:00.685 --> 00:05:07.975
And so if we switch this over now to do,
do, do, do display title.

86
00:05:07.975 --> 00:05:09.371
And refresh.

87
00:05:09.371 --> 00:05:12.840
You see nothing changes, and
then it's swapped and then it's good.

88
00:05:12.840 --> 00:05:16.185
And basically, even though you
might think programmatically,

89
00:05:16.185 --> 00:05:18.451
this looks very similar
to what we just did.

90
00:05:18.451 --> 00:05:23.218
This is extremely powerful because what
you've just done is now given view the job

91
00:05:23.218 --> 00:05:26.345
of figuring out when its
dependencies have changed.

92
00:05:26.345 --> 00:05:28.932
And so to show you what I
mean by that we could even

93
00:05:28.932 --> 00:05:31.209
combine computed properties together.

94
00:05:31.209 --> 00:05:35.105
So for example, let's say that we actually
wanted to impact the increment amount

95
00:05:35.105 --> 00:05:36.691
based on the length of the title.

96
00:05:36.691 --> 00:05:37.968
Let's just do that.

97
00:05:37.968 --> 00:05:44.321
So we could then say, see,
as I call it, optimizedIncrementAmount.

98
00:05:44.321 --> 00:05:45.458
And for whatever reason,

99
00:05:45.458 --> 00:05:48.259
we have some algorithm that's
dependent on the counter title.

100
00:05:48.259 --> 00:05:53.362
What we could do instead,
we can return this.countertitle or

101
00:05:53.362 --> 00:06:00.792
sorry, this.displayTitle.length times,
and then let's say this incrementAmount.

102
00:06:03.127 --> 00:06:04.964
So now, we have two dependencies.

103
00:06:04.964 --> 00:06:07.929
We're depending on this displayTitle here,

104
00:06:07.929 --> 00:06:10.975
we're de depending on
incrementAmount here.

105
00:06:10.975 --> 00:06:15.347
But then, once we update here
to optimize increment amount,

106
00:06:15.347 --> 00:06:21.584
we can see now that things are starting to
change actually pretty drastically, right?

107
00:06:21.584 --> 00:06:23.029
You're seeing that the actually,

108
00:06:23.029 --> 00:06:25.782
I've realized you're not actually
seeing the optimized amount.

109
00:06:25.782 --> 00:06:28.397
So let's show that real quick.

110
00:06:28.397 --> 00:06:29.470
Where's my incrementCount, okay.

111
00:06:29.470 --> 00:06:30.518
Here we go.

112
00:06:30.518 --> 00:06:32.852
Then we can say optimizedIncrementAmount.

113
00:06:32.852 --> 00:06:36.273
Very good.

114
00:06:36.273 --> 00:06:39.607
So you see here's 224 right here.

115
00:06:39.607 --> 00:06:41.366
And so it's changing because, why?

116
00:06:41.366 --> 00:06:43.735
Because we've modified the title.

117
00:06:43.735 --> 00:06:45.303
If we modify this times 10,

118
00:06:45.303 --> 00:06:49.323
you'll see that now it's updating
correctly by the incrementAmount, but

119
00:06:49.323 --> 00:06:52.672
the optimize amount is not
dependent on two different things.

120
00:06:52.672 --> 00:06:56.617
And so what you get with computer
properties is basically really efficient

121
00:06:56.617 --> 00:06:58.878
tool chaining on reactive dependencies.

122
00:06:58.878 --> 00:07:01.509
And this is a concept we're
starting to see popularized,

123
00:07:01.509 --> 00:07:03.938
I think spelt has something
very similar as well now.

124
00:07:03.938 --> 00:07:08.260
In that, if you think about an enterprise
level app, there's going to be so

125
00:07:08.260 --> 00:07:09.685
much that's changing.

126
00:07:09.685 --> 00:07:12.952
And when you have manual definitions
of what you're watching,

127
00:07:12.952 --> 00:07:16.159
oftentimes you'll find that
it's actually fairly brittle,

128
00:07:16.159 --> 00:07:19.620
because one small change will break
that entire dependency chain.

129
00:07:19.620 --> 00:07:23.599
Whereas here, you can have your source
of truth being this data store, and

130
00:07:23.599 --> 00:07:26.897
then you can have all your
computations run off of that thing.

131
00:07:26.897 --> 00:07:30.988
Right, and it knows when to trigger, it
knows what to do, it knows how to cache it

132
00:07:30.988 --> 00:07:35.264
so that in the HTML, it doesn't randomly
trigger like, all that stuff that our goal

133
00:07:35.264 --> 00:07:39.509
is to build cool things and to abstract
business logic deliver value to customers.

134
00:07:39.509 --> 00:07:42.023
As much as it's fun to learn
about performance optimizations,

135
00:07:42.023 --> 00:07:44.357
that's not something we want
to be debugging constantly.

136
00:07:44.357 --> 00:07:46.903
And so computed properties
are incredibly powerful for this.

137
00:07:46.903 --> 00:07:51.030
In fact, if I were to say my single
most favorite feature of view,

138
00:07:51.030 --> 00:07:55.232
it's the computed property cuz it
just takes away all the worry for

139
00:07:55.232 --> 00:07:57.124
me about what's happening.

140
00:07:57.124 --> 00:08:00.021
And it does so much work for
me again, really easy.

141
00:08:00.021 --> 00:08:03.369
And it's particularly powerful if you
do any data visualizations you can

142
00:08:03.369 --> 00:08:04.237
imagine, right?

143
00:08:04.237 --> 00:08:07.892
You're doing all these SVG calculations
based on a set group of data.

144
00:08:07.892 --> 00:08:11.462
You don't wanna have to write the
dependency chain that would update the SVG

145
00:08:11.462 --> 00:08:14.973
at this particular point, and then it
swaps this way, or how it animates,

146
00:08:14.973 --> 00:08:18.019
all of that can be managed
basically with computed properties.

147
00:08:18.019 --> 00:08:22.028
And so some of the most elegant stores
I've seen have one source of truth inside

148
00:08:22.028 --> 00:08:24.773
of data, and
then they compute everything else out.

149
00:08:24.773 --> 00:08:30.075
And it works really, really well because
view can optimize all those things.

