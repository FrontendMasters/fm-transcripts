WEBVTT

1
00:00:00.370 --> 00:00:03.540
&gt;&gt; Kyle Simpson: Our next
unit of discussion, lists.

2
00:00:03.540 --> 00:00:07.360
And I've mentioned right away,
actually this discussion,

3
00:00:07.360 --> 00:00:10.430
we're gonna focus on the array, the lists.

4
00:00:10.430 --> 00:00:13.430
But really this is about data structures.

5
00:00:13.430 --> 00:00:17.630
Because really, these concepts
apply to any data structure or

6
00:00:17.630 --> 00:00:19.720
can be adapted to any data structure.

7
00:00:19.720 --> 00:00:24.000
It just happens to be that lists,
arrays are the most convenient ways

8
00:00:24.000 --> 00:00:29.350
of talking about list oriented or
data structure oriented operations.

9
00:00:29.350 --> 00:00:33.481
So my tongue in cheek way of describing
this is, everything that we've done up to

10
00:00:33.481 --> 00:00:37.458
this point in the course has been about
figuring out a single discrete value.

11
00:00:37.458 --> 00:00:42.160
And then with recursion we started doing
stuff iteratively like over a list of

12
00:00:42.160 --> 00:00:43.210
values.

13
00:00:43.210 --> 00:00:44.820
And now what we're saying is,

14
00:00:44.820 --> 00:00:49.990
if you can keep do something awesome to
a single value, keep doing it repeatedly.

15
00:00:51.310 --> 00:00:56.760
Model it as a list of values and do that
awesome thing for each item in your list.

16
00:00:56.760 --> 00:00:58.403
That's just a high-level way of thinking.

17
00:00:58.403 --> 00:01:01.207
And this is how we categorize
what these things are.

18
00:01:01.207 --> 00:01:05.745
These are operations that
are fundamentally designed to

19
00:01:05.745 --> 00:01:07.925
operate on a single value.

20
00:01:07.925 --> 00:01:11.226
Like think about taking a number and
doubling it,

21
00:01:11.226 --> 00:01:14.820
that's an operation that
behaves on a single value.

22
00:01:14.820 --> 00:01:22.090
And now say, I want to lift or
adapt that operation so

23
00:01:22.090 --> 00:01:27.260
that it can work across a data structure,
across all the values in a data structure.

24
00:01:27.260 --> 00:01:29.330
For example, all the values in a list.

25
00:01:31.110 --> 00:01:33.760
So in a sense, we wanna adapt these

26
00:01:33.760 --> 00:01:39.030
single data operations to data structures
to all the values in a data structure.

27
00:01:39.030 --> 00:01:41.960
We're gonna talk about three
fundamental list operations or

28
00:01:41.960 --> 00:01:43.830
data structure operations.

29
00:01:43.830 --> 00:01:46.839
The three most common ones that you'll
run into when you're doing functional

30
00:01:46.839 --> 00:01:47.441
programming.

31
00:01:47.441 --> 00:01:51.135
These are by far not the only ones,
there are many others out there.

32
00:01:51.135 --> 00:01:53.803
But these are kinda the base ones that
you really need to have your head

33
00:01:53.803 --> 00:01:55.280
wrapped around.

34
00:01:55.280 --> 00:01:59.716
So we'll start with map,
that's the first of our operations.

35
00:01:59.716 --> 00:02:04.070
And I'm gonna assert that map is
fundamentally a transformation

36
00:02:04.070 --> 00:02:05.710
kind of operation.

37
00:02:05.710 --> 00:02:10.465
It takes a value in some state,
transforms it to a new state.

38
00:02:10.465 --> 00:02:14.750
And we adapt, when we map over a data
structure, what we're saying is,

39
00:02:14.750 --> 00:02:19.602
create a new data structure where all the
values in the new data structure are those

40
00:02:19.602 --> 00:02:23.990
transform values having been
projected from the old to the new.

41
00:02:23.990 --> 00:02:29.190
So it looks a little bit like this, we
start with the original, we transform, and

42
00:02:29.190 --> 00:02:31.500
then we project that over
to the new data structure.

43
00:02:31.500 --> 00:02:34.630
We did not change in place,
it's very important to understand.

44
00:02:34.630 --> 00:02:36.070
We are not changing in place.

45
00:02:36.070 --> 00:02:40.098
We are projecting those newly transformed
values over to the new data structure.

46
00:02:42.350 --> 00:02:45.198
&gt;&gt; Kyle Simpson: [COUGH] So
transformation or

47
00:02:45.198 --> 00:02:50.520
mapping is usually
illustrated with numbers.

48
00:02:50.520 --> 00:02:54.000
If I start out with a list of numbers one,
two, three, four, five and

49
00:02:54.000 --> 00:02:58.790
I wanna double those numbers, then I
could transform them with a function

50
00:02:58.790 --> 00:03:04.190
like doubleIt on line 1 which knows
how to double a single number.

51
00:03:04.190 --> 00:03:07.072
And I could define a transform utility,

52
00:03:07.072 --> 00:03:11.749
which adapts that utility to apply
across the values on the list.

53
00:03:11.749 --> 00:03:16.656
Or the official functional
programming term is that it 'lifts'

54
00:03:16.656 --> 00:03:20.360
the doubleIt function to the entire list.

55
00:03:20.360 --> 00:03:24.550
So, pretty straightforward, we started
with a new list there on line 4.

56
00:03:24.550 --> 00:03:26.600
We loop over the existing list and

57
00:03:26.600 --> 00:03:30.210
we call that mapper function,
in this case, the doubleIt.

58
00:03:30.210 --> 00:03:33.230
We call that mapper function for
each value in the old list.

59
00:03:33.230 --> 00:03:36.110
And whatever that transform
value that's returned back

60
00:03:36.110 --> 00:03:38.569
is what we stick into the new
list of that same position.

61
00:03:43.460 --> 00:03:46.850
Now I just want yo think, cuz we're gonna
be coming up on this a little bit later in

62
00:03:46.850 --> 00:03:48.820
this unit of discussion.

63
00:03:48.820 --> 00:03:51.240
What would it look if I
wasn't operating on a list?

64
00:03:51.240 --> 00:03:53.560
What if I was operating on an object?

65
00:03:53.560 --> 00:03:57.330
How would I map one
object to another object?

66
00:03:57.330 --> 00:04:01.180
Well, I'd probably start out with a list
of all the properties in the object,

67
00:04:01.180 --> 00:04:05.300
and loop over those properties and
call the napper function.

68
00:04:05.300 --> 00:04:07.270
That's not any more complex
than what we're doing here,

69
00:04:07.270 --> 00:04:09.160
it's just a little bit more syntax.

70
00:04:09.160 --> 00:04:12.000
What if it was a more
sophisticated data structure like

71
00:04:12.000 --> 00:04:14.410
some custom data structure
in your application?

72
00:04:14.410 --> 00:04:17.990
You could still map across a set
of values in that data structure.

73
00:04:17.990 --> 00:04:22.270
You'd just need to provide your own
transform, your own lift, that lifted

74
00:04:22.270 --> 00:04:28.340
a single mapper like doubleIt to work
against the values that you need it to.

75
00:04:28.340 --> 00:04:31.810
So being able to implement your own
transform function like that for

76
00:04:31.810 --> 00:04:35.440
your own data structure
is a good skill to have.

77
00:04:35.440 --> 00:04:38.526
This transform function,
pretty straightforward,

78
00:04:38.526 --> 00:04:43.164
it's already build into JavaScript for
the array type, and it's called .map.

79
00:04:45.060 --> 00:04:48.501
&gt;&gt; Kyle Simpson: So we can call
an array and call a .map method on it,

80
00:04:48.501 --> 00:04:51.155
give it the doubleIt mapper function.

81
00:04:51.155 --> 00:04:55.494
And it'll automatically lift that, execute
it across all the values in the array,

82
00:04:55.494 --> 00:04:58.993
give us a new array back with
the values 2, 4, 6, 8, and 10.

83
00:05:03.323 --> 00:05:07.292
&gt;&gt; Kyle Simpson: Now mapping a list
of numbers, it's a cool, nice,

84
00:05:07.292 --> 00:05:09.600
easy way to illustrate this.

85
00:05:09.600 --> 00:05:12.100
But you're not always gonna be working

86
00:05:12.100 --> 00:05:13.990
with a list of numbers that
you need to double it.

87
00:05:13.990 --> 00:05:18.700
So let's talk about some other examples of
lists of values that you might work with.

88
00:05:18.700 --> 00:05:23.700
Let's imagine that you had a list of
strings, maybe that's a list of strings

89
00:05:23.700 --> 00:05:27.020
that you got from the server or
people typed in or whatever.

90
00:05:27.020 --> 00:05:33.615
Give me some examples of things that
you might map with a list of strings.

91
00:05:33.615 --> 00:05:36.659
What are some operations you might
do against a list of strings?

92
00:05:40.720 --> 00:05:42.130
Okay.
&gt;&gt; Speaker 2: Sort.

93
00:05:42.130 --> 00:05:44.190
&gt;&gt; Kyle Simpson: So the answer was sort.

94
00:05:44.190 --> 00:05:48.040
Map as a fundamental operation,

95
00:05:48.040 --> 00:05:51.360
if you go back to animation,
we had a couple of slides ago.

96
00:05:51.360 --> 00:05:53.980
Map takes a new structure
of the same size,

97
00:05:53.980 --> 00:05:58.140
and there is a one-to-one
correspondence in the same position.

98
00:05:58.140 --> 00:06:01.090
So sort would not be a good
description of the map operation.

99
00:06:01.090 --> 00:06:06.314
It is a fundamentally useful thing to do,
but it's not an example of mapping.

100
00:06:06.314 --> 00:06:08.380
&gt;&gt; Speaker 3: Can it be upper case or
lower case?

101
00:06:08.380 --> 00:06:12.210
&gt;&gt; Kyle Simpson: Sure, if we had a list of
strings, we could produce a list of all

102
00:06:12.210 --> 00:06:15.660
those strings having been upper cased or
lower cased.

103
00:06:15.660 --> 00:06:18.655
What's another example that we
could do with a list of strings.

104
00:06:18.655 --> 00:06:20.360
&gt;&gt; Speaker 2: Concatenation?

105
00:06:20.360 --> 00:06:22.210
&gt;&gt; Kyle Simpson: That's
a different kind of operation,

106
00:06:22.210 --> 00:06:26.470
because that would result in not a list
of each of the individual strings.

107
00:06:26.470 --> 00:06:30.370
Unless you had a fixed thing that you
wanted to like, prefix all the strings

108
00:06:30.370 --> 00:06:34.630
with or suffix all the strings, that
would be something that you could map.

109
00:06:34.630 --> 00:06:36.297
&gt;&gt; Speaker 2: What about length?

110
00:06:36.297 --> 00:06:39.090
&gt;&gt; Kyle Simpson: So you could map
the list of strings to list of their

111
00:06:39.090 --> 00:06:41.030
numeric lengths, that's true.

112
00:06:41.030 --> 00:06:43.670
You have a list of numbers
that represents their lengths.

113
00:06:43.670 --> 00:06:48.607
What about mapping a list of strings to
their translations in a foreign language?

114
00:06:48.607 --> 00:06:52.425
That could translate function that you
gave a list of words to and it gave you,

115
00:06:52.425 --> 00:06:55.870
looked them up on a table and
spit out the translated.

116
00:06:55.870 --> 00:07:01.030
What about taking a list of strings and
cutting them off at a certain length,

117
00:07:01.030 --> 00:07:06.370
like truncating into a certain length,
or other sorts of things like that?

118
00:07:06.370 --> 00:07:07.580
Prefixing and suffixing.

119
00:07:07.580 --> 00:07:09.890
So those are things we might
do with a list of strings.

120
00:07:09.890 --> 00:07:11.900
What about a list of functions?

121
00:07:13.180 --> 00:07:15.570
What if we had an array that
had a bunch of functions in it?

122
00:07:15.570 --> 00:07:18.340
What are some mappings that we
could do of that list of functions?

123
00:07:25.915 --> 00:07:30.161
&gt;&gt; Speaker 4: Would it be mapping
them if you're running all of them?

124
00:07:30.161 --> 00:07:32.861
&gt;&gt; Kyle Simpson: Sure,
we could take the list of functions and

125
00:07:32.861 --> 00:07:36.913
map that to a list of their return
values or we called each function,

126
00:07:36.913 --> 00:07:40.720
whatever it returned is that
new item in the new list.

127
00:07:40.720 --> 00:07:44.210
So we could take a map
of list of functions and

128
00:07:44.210 --> 00:07:46.220
map it to a list of return values.

129
00:07:46.220 --> 00:07:46.838
What about the other way around?

130
00:07:46.838 --> 00:07:50.968
What about a list of functions that
we compose with another function,

131
00:07:50.968 --> 00:07:55.240
like a give and a set function that we
compose every item in the list with.

132
00:07:55.240 --> 00:07:57.990
So now, we go from a list of functions
to a list of composed functions.

133
00:08:01.340 --> 00:08:04.000
Say, for example,
if I had a list of functions and

134
00:08:04.000 --> 00:08:07.550
I wanted to run binary
against all of them so

135
00:08:07.550 --> 00:08:11.010
that each one of them had been limited
to only accepting two arguments.

136
00:08:11.010 --> 00:08:17.140
So now, I have list of original functions,
we've got our length in order.

137
00:08:17.140 --> 00:08:20.255
And now I have a list of binary
functions wrapped around them.

138
00:08:23.466 --> 00:08:26.193
&gt;&gt; Kyle Simpson: The data type that you're
gonna be working against is going to

139
00:08:26.193 --> 00:08:29.300
dictate the kinds of operations that
would make sense to do with them.

140
00:08:30.810 --> 00:08:34.005
So, I wanna broaden your
thought process beyond, well,

141
00:08:34.005 --> 00:08:36.420
this only works if I am
dealing with numbers.

142
00:08:36.420 --> 00:08:42.030
There is lots of places you'll end
up finding map to be very useful

143
00:08:42.030 --> 00:08:43.510
in the nitty gritty parts of your code.

144
00:08:46.300 --> 00:08:48.950
We're not talking about async right now,
we're gonna be talking about that later.

145
00:08:48.950 --> 00:08:55.097
But one place where I've used map is in
the asynchronous programming context.

146
00:08:55.097 --> 00:08:57.080
You might have heard of promises.

147
00:08:57.080 --> 00:09:00.450
Promises are a modeling of a future value.

148
00:09:00.450 --> 00:09:03.118
Well, let's say you have
an AJAX function that returns

149
00:09:03.118 --> 00:09:04.775
you a promise when it makes a call.

150
00:09:04.775 --> 00:09:07.156
I can take a list of URLs and

151
00:09:07.156 --> 00:09:13.080
map that to a list of promises for
those ajax responses.

152
00:09:13.080 --> 00:09:16.190
So I started out with the list of strings
and I got now a list of promises.

153
00:09:16.190 --> 00:09:17.990
And now that I have that list of promises,

154
00:09:17.990 --> 00:09:21.560
I can do something like pass him to
promise that all or something like that.

155
00:09:21.560 --> 00:09:24.622
So the data structures,
the data types that you're working with,

156
00:09:24.622 --> 00:09:27.537
will dictate lots of different usages for
something like math.

157
00:09:30.129 --> 00:09:34.450
&gt;&gt; Kyle Simpson: Okay, questions
about the map transform operation?

158
00:09:37.760 --> 00:09:40.470
You'll see much more with
map as we go forward.

159
00:09:40.470 --> 00:09:46.400
We've got a couple of exercises coming
up to test here working with that.

160
00:09:46.400 --> 00:09:47.805
The second-
&gt;&gt; Speaker 5: There

161
00:09:47.805 --> 00:09:52.428
was one question online about mapping
through a multidimensional array.

162
00:09:53.864 --> 00:09:56.970
&gt;&gt; Speaker 6: I'm not
sure what [INAUDIBLE].

163
00:09:56.970 --> 00:10:00.545
&gt;&gt; Kyle Simpson: So
map is a shallow operation where it

164
00:10:00.545 --> 00:10:05.780
operates against just
the top values in the list.

165
00:10:05.780 --> 00:10:08.930
If the item in that list is a sublist,

166
00:10:08.930 --> 00:10:12.010
which is basically what
a multidimensional array is.

167
00:10:12.010 --> 00:10:17.630
You could have each mapping
operation be a submapping operation.

168
00:10:17.630 --> 00:10:20.562
But it's entirely gonna be up
to you to do that sublevel, or

169
00:10:20.562 --> 00:10:24.153
into the third dimension, or
fourth dimension, or however many it is.

170
00:10:24.153 --> 00:10:27.625
It's gonna be entirely up to you,
because each mapping operation is only

171
00:10:27.625 --> 00:10:30.820
gonna operate on that top dimension
of value that you've given it.

172
00:10:32.010 --> 00:10:34.721
So you could do a multidimensional map,
but

173
00:10:34.721 --> 00:10:37.735
it would be a map of mappings
to make that happen.

174
00:10:40.768 --> 00:10:42.309
&gt;&gt; Kyle Simpson: Good question.

175
00:10:44.888 --> 00:10:46.460
&gt;&gt; Kyle Simpson: Since that
question was brought up,

176
00:10:46.460 --> 00:10:48.600
let me point out one other
thing before we move on.

177
00:10:49.750 --> 00:10:54.590
It's exceedingly important that you
think about these mapper functions,

178
00:10:54.590 --> 00:10:56.200
like for example, the doublet.

179
00:10:56.200 --> 00:11:00.540
It's exceedingly important and
it might be too obvious, but

180
00:11:00.540 --> 00:11:02.940
I wanna call it out,
it needs to be a pure function.

181
00:11:04.300 --> 00:11:07.350
It needs to be a function that takes
in an input and returns an output,

182
00:11:07.350 --> 00:11:10.220
that's its shape should not
have any side effects at all.

183
00:11:10.220 --> 00:11:14.980
If you are relying upon mapping to do
side effects, you are doing it wrong.

184
00:11:14.980 --> 00:11:15.910
Stop doing that.

185
00:11:15.910 --> 00:11:20.770
I've heard people say, well, I can take
a list of values and then call .map, and

186
00:11:20.770 --> 00:11:24.540
I can put a console.log in it or
I can print stuff out or whatever.

187
00:11:24.540 --> 00:11:26.410
That's not what map is for.

188
00:11:26.410 --> 00:11:30.750
Map is for transforming a list to
another list of transformed values.

189
00:11:30.750 --> 00:11:33.850
There are what I would
say less functionally

190
00:11:33.850 --> 00:11:38.476
programming friendly utilities like,
for example, foreach.

191
00:11:38.476 --> 00:11:40.965
Foreach is a utility that given a list,

192
00:11:40.965 --> 00:11:45.000
you can do a set of side effects
with that items of the list.

193
00:11:45.000 --> 00:11:49.320
So if you really wanna do console lot
logging of the list of items, use foreach.

194
00:11:49.320 --> 00:11:52.170
Don't use map for that because
that will create confusing code.

195
00:11:52.170 --> 00:11:56.780
Map should be used only for
these pure operations.

196
00:11:56.780 --> 00:11:59.970
And one of the reasons why
functional programmers like map, and

197
00:11:59.970 --> 00:12:04.100
why they like this no side effect
programming can be seen when

198
00:12:04.100 --> 00:12:07.780
you think about the fact that the map
operations that we're talking about.

199
00:12:07.780 --> 00:12:11.480
We implemented it as a for loop,
we just went one item at a time.

200
00:12:11.480 --> 00:12:14.720
But there's no reason that it
has to be done in that order,

201
00:12:14.720 --> 00:12:18.980
and there's no reason that they
have to be done only one at a time.

202
00:12:18.980 --> 00:12:22.000
If we were in
a multi-threaded environment,

203
00:12:22.000 --> 00:12:25.200
we could theoretically spin off
an entirely separate thread for

204
00:12:25.200 --> 00:12:29.080
each transformation, and
they could happen in any order.

205
00:12:29.080 --> 00:12:32.810
And when all of them finish, they just
slot themselves back into the new list at

206
00:12:32.810 --> 00:12:34.950
the correct location, and then we're done.

207
00:12:34.950 --> 00:12:38.750
So if you started out with an array
of 10 million items in it and

208
00:12:38.750 --> 00:12:41.420
you were gonna loop through one at a time,
that might take a while.

209
00:12:41.420 --> 00:12:44.800
But if you were in a threaded environment,
functional programmers love the fact that

210
00:12:44.800 --> 00:12:48.320
that compiler could spin
off 1,000 threads and

211
00:12:48.320 --> 00:12:52.090
do 1,000 of those at a time, and
pick different parts, and segment it out,

212
00:12:52.090 --> 00:12:57.060
and break up the work, do all kinds of
stuff to get that work done a lot quicker.

213
00:12:57.060 --> 00:13:00.370
That's one of the advantages of the
mapping operation is that each operation

214
00:13:00.370 --> 00:13:03.190
is entirely independent
of any other operation.

215
00:13:05.200 --> 00:13:09.450
By the way,
that's why sort is not an example of map,

216
00:13:09.450 --> 00:13:14.190
because sorting obviously could not
be done completely parallelized,

217
00:13:14.190 --> 00:13:17.690
where things slot themselves
is dependent on other slots.

