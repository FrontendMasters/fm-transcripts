WEBVTT

1
00:00:00.420 --> 00:00:01.840
&gt;&gt; Kyle Simpson: Exercise 1.

2
00:00:01.840 --> 00:00:03.420
Hopefully you read the read me.

3
00:00:03.420 --> 00:00:07.270
The read me says make a pure
function bar that wraps around foo.

4
00:00:07.270 --> 00:00:10.850
Then part 2,
make a pure function bar that adapts foo.

5
00:00:10.850 --> 00:00:13.780
Like I showed that capital
f in the previous slides.

6
00:00:13.780 --> 00:00:15.680
That adapts foo to void its side effects.

7
00:00:15.680 --> 00:00:20.830
So, foo here is an impure function because

8
00:00:20.830 --> 00:00:26.030
it does take a single input x but
it also uses y as an input.

9
00:00:26.030 --> 00:00:28.550
Can you see why it's using y as input?

10
00:00:28.550 --> 00:00:35.280
Because y++ on line 2 takes
the current state of y into account.

11
00:00:36.480 --> 00:00:42.090
So that's a side cause and
it also mutates y so that's a side effect.

12
00:00:42.090 --> 00:00:46.060
So line 2 is both a side cause and
a side effect, an indirect input and

13
00:00:46.060 --> 00:00:47.380
an indirect output.

14
00:00:47.380 --> 00:00:52.070
And also line 3 is a side effect,
a side output,

15
00:00:52.070 --> 00:00:55.140
an indirect output because
we're changing the state of z.

16
00:00:55.140 --> 00:00:58.031
So there's one side cause and
two side effects,

17
00:00:58.031 --> 00:01:01.504
in this example.
&gt;&gt; Kyle Simpson: So

18
00:01:01.504 --> 00:01:07.530
our first approach could be to look at
what is the universe that foo touches.

19
00:01:07.530 --> 00:01:13.290
Well it touches a y variable and a z
variable and it uses as an x as an input.

20
00:01:14.670 --> 00:01:18.410
So in other words, x and
y are its input, z as its output.

21
00:01:18.410 --> 00:01:19.389
That is its universe.

22
00:01:21.280 --> 00:01:25.690
So if we create a bar,
we need to make x and y the inputs, and

23
00:01:25.690 --> 00:01:30.270
we need to capture that z so
that we don't allow that z changed

24
00:01:30.270 --> 00:01:35.540
to seep outside of the boundary
of our bar function.

25
00:01:35.540 --> 00:01:39.930
So I have x and y as inputs, I have a var
z that's gonna capture things lexically.

26
00:01:39.930 --> 00:01:44.170
I call that foo function
from line 7 that is impure.

27
00:01:44.170 --> 00:01:50.720
And then, I capture the output state which
is the y and the z variables are outputs.

28
00:01:50.720 --> 00:01:53.490
I capture that state and
return it as an array.

29
00:01:53.490 --> 00:01:55.760
Now some may wonder,
why do I need to return y?

30
00:01:55.760 --> 00:02:01.260
When it's because we are using y as
an input to this call which means

31
00:02:01.260 --> 00:02:07.720
the program might need that outputted
state of y as the input to the next call.

32
00:02:07.720 --> 00:02:11.500
So anything that could be used as
an input needs to be made into an output.

33
00:02:12.670 --> 00:02:15.490
So I return both of those values.

34
00:02:15.490 --> 00:02:21.830
Now we see on line 13 that [COUGH]
if I call bar with the values 20 and

35
00:02:21.830 --> 00:02:26.150
5, I'm gonna get an array of 6 and
120 back.

36
00:02:26.150 --> 00:02:30.370
Now if I took those outputs and
mapped them into some variables, and

37
00:02:30.370 --> 00:02:33.750
then I used one of those variables,
like for example, the y value.

38
00:02:34.800 --> 00:02:39.290
If I use that y value of 6 as
my input to the next call,

39
00:02:39.290 --> 00:02:45.060
which is line 15 I have actually
tracked a state change in my program.

40
00:02:45.060 --> 00:02:50.260
So I don't mean to suggest that functional
programs don't have state change,

41
00:02:50.260 --> 00:02:51.990
they absolutely have state change.

42
00:02:53.600 --> 00:02:57.060
All programs have to
have state that changes

43
00:02:57.060 --> 00:02:58.840
throughout the course of the program.

44
00:02:58.840 --> 00:03:00.590
Otherwise why write the program?

45
00:03:00.590 --> 00:03:03.360
But what I am saying is that
a functional programmer says

46
00:03:03.360 --> 00:03:05.480
I don't want my state
to change implicitly.

47
00:03:05.480 --> 00:03:08.720
I don't want to call some method and
somewhere under the covers,

48
00:03:08.720 --> 00:03:09.840
something changes.

49
00:03:09.840 --> 00:03:14.430
What I want to do is call something,
compute my new state and give that back

50
00:03:14.430 --> 00:03:17.730
to me so that I can take that back and
specifically decide what to do next.

51
00:03:18.820 --> 00:03:23.840
I want to explicitly track my state
changes rather than implicitly do so.

52
00:03:23.840 --> 00:03:28.210
There was some back channel discussion in
the chat room over the working on this

53
00:03:28.210 --> 00:03:33.610
exercise, it was asking about React and
set state, and thing like that.

54
00:03:33.610 --> 00:03:35.350
To be honest with you I'm
not a React programmer, so

55
00:03:35.350 --> 00:03:39.150
I'm not gonna commend specifically on
how React works and whether that is or

56
00:03:39.150 --> 00:03:41.230
is not impure, something like that.

57
00:03:41.230 --> 00:03:45.380
I can tell you some
almost unchanging facts.

58
00:03:45.380 --> 00:03:49.040
Like if it doesn't return something,
it's impure.

59
00:03:49.040 --> 00:03:51.710
It's not a function,
it's a procedure, right.

60
00:03:51.710 --> 00:03:54.287
But it's possible, at least in theory,

61
00:03:54.287 --> 00:03:58.480
that a system as complex as
something like React or Redux.

62
00:03:58.480 --> 00:04:03.010
Can allow you to call something and
get your new state back, as opposed to

63
00:04:03.010 --> 00:04:07.340
changing your state, and then let you
decide what to do with that state.

64
00:04:07.340 --> 00:04:10.780
And then you can call another thing
with state and get a new state back.

65
00:04:10.780 --> 00:04:15.514
That would be a functional programmer's
approach to tracking state

66
00:04:15.514 --> 00:04:21.724
change.
&gt;&gt; Kyle Simpson: Some other things

67
00:04:21.724 --> 00:04:27.514
that I want to observe here, again, trying
to provide a bit more to our definition,

68
00:04:27.514 --> 00:04:31.855
our running definition that
we've got of functional purity.

69
00:04:31.855 --> 00:04:37.387
Another way of thinking about or
articulating what functional purity

70
00:04:37.387 --> 00:04:42.540
here is, is that every time I call
bar with the inputs 20 and 5,

71
00:04:42.540 --> 00:04:47.998
I'm going to get that exact same
output which is the array 6120.

72
00:04:47.998 --> 00:04:51.680
So another way of articulating
what is a pure function?

73
00:04:51.680 --> 00:04:54.472
Every time I call it with
the same inputs I get the same

74
00:04:54.472 --> 00:04:58.948
outputs.
&gt;&gt; Kyle Simpson: No matter where I call

75
00:04:58.948 --> 00:05:01.960
it, if I give it the same
inputs I get the same outputs.

76
00:05:01.960 --> 00:05:03.960
No matter how many times I call it.

77
00:05:03.960 --> 00:05:08.560
Same inputs, same outputs.
&gt;&gt; Kyle Simpson: That's just another way,

78
00:05:08.560 --> 00:05:11.680
that's another angle on the Rubik's Cube,
it's another side to the Rubik's Cube.

79
00:05:11.680 --> 00:05:13.920
It's another way of saying
what we said before, which is,

80
00:05:13.920 --> 00:05:17.540
it doesn't have any observational reliance
upon variables outside of itself.

81
00:05:19.240 --> 00:05:22.140
A conclusion that we could make
from that then, is a function,

82
00:05:22.140 --> 00:05:23.836
when we call it with the same inputs,

83
00:05:23.836 --> 00:05:28.516
we're always gonna get the same outputs.
&gt;&gt; Kyle Simpson: Alright,

84
00:05:28.516 --> 00:05:32.861
part two of the exercise was instead
of wrapping this in a pure function,

85
00:05:32.861 --> 00:05:34.940
to create an interface function.

86
00:05:34.940 --> 00:05:42.300
So make bar take advantage of capturing or
take care to capture it's current state.

87
00:05:42.300 --> 00:05:43.605
So that's what bar is gonna do.

88
00:05:43.605 --> 00:05:45.490
We're gonna take X and Y's inputs again.

89
00:05:45.490 --> 00:05:47.350
These are the current X and Y.

90
00:05:47.350 --> 00:05:52.180
I need to capture the original
state of Y and Z, and the reason I

91
00:05:52.180 --> 00:05:55.600
don't need to capture an original X
is cuz there never was a public X.

92
00:05:55.600 --> 00:05:57.440
X was already an input.

93
00:05:57.440 --> 00:06:00.290
But I do need to capture
the original state of y and z.

94
00:06:00.290 --> 00:06:03.730
Even if they're undefined I
need to capture that state.

95
00:06:03.730 --> 00:06:06.410
I'm using a ray destructuring
here on line seven

96
00:06:06.410 --> 00:06:08.710
just to save myself some lines of code.

97
00:06:08.710 --> 00:06:12.310
So I'm saying the y and z I want to
assign to a ridge y and a ridge z.

98
00:06:13.810 --> 00:06:17.860
Now I need to make sure that that
state is in the state it should be,

99
00:06:17.860 --> 00:06:19.780
so I set y to the current y.

100
00:06:20.830 --> 00:06:22.110
And I call that foo.

101
00:06:22.110 --> 00:06:25.820
That side effecting function foo
giving it the inputs of corrects.

102
00:06:25.820 --> 00:06:30.790
Then on line 10, I capture the new

103
00:06:30.790 --> 00:06:34.840
state of the world witch is the Y and
Z variables that have been changed.

104
00:06:34.840 --> 00:06:37.080
I capture that new state.

105
00:06:37.080 --> 00:06:41.614
Line 11, I restore the original
state from before I called.

106
00:06:41.614 --> 00:06:46.844
Line 12, I return that new state as
an array so that the calling code

107
00:06:46.844 --> 00:06:55.371
can use that new state.
&gt;&gt; Kyle Simpson: At the bottom,

108
00:06:55.371 --> 00:07:00.491
we still have exactly the same behavior
here, which is that when we call line

109
00:07:00.491 --> 00:07:05.960
17 with the values 20 and 5, we're
gonna get back an array of 6 and 120.

110
00:07:05.960 --> 00:07:09.644
And no matter how many times we call that
function if we give it that same input

111
00:07:09.644 --> 00:07:16.242
we're always gonna get that same output.
&gt;&gt; Kyle Simpson: So

112
00:07:16.242 --> 00:07:20.166
in both cases, based upon our
existing current definition,

113
00:07:20.166 --> 00:07:24.850
our evolving definition for
function purity, the bar function is pure.

114
00:07:26.400 --> 00:07:29.692
It behaves as pure.
&gt;&gt; Speaker 2: There's a clarification in

115
00:07:29.692 --> 00:07:34.330
chat or [INAUDIBLE] I guess.
&gt;&gt; Kyle Simpson: If foo was incrementing X

116
00:07:34.330 --> 00:07:39.300
with X++, we would have to return it and
bar along with Y and Z.

117
00:07:39.300 --> 00:07:42.990
Yeah, not only would we have to, okay.

118
00:07:42.990 --> 00:07:44.320
So let me clarify.

119
00:07:44.320 --> 00:07:51.560
That question is saying, if foo changed x,
would we need to do something with that?

120
00:07:51.560 --> 00:07:55.630
No we would not,
not in the way the current program works,

121
00:07:55.630 --> 00:08:01.630
because x is not in the outer scope and
it isn't observable.

122
00:08:01.630 --> 00:08:03.430
It's not a returned output.

123
00:08:03.430 --> 00:08:07.780
So even if x changed values along
the way through out that program,

124
00:08:07.780 --> 00:08:10.510
that's not affecting the outside code.

125
00:08:10.510 --> 00:08:14.020
It would not be observable and
therefore doesn't need to become and

126
00:08:14.020 --> 00:08:18.130
output that we capture and
return to the calling program.

127
00:08:18.130 --> 00:08:21.300
That state is hidden entirely
within side of the scope of foo.

128
00:08:22.810 --> 00:08:25.390
So as written, we would not need to.

129
00:08:25.390 --> 00:08:30.980
If x were not an input, if we were
using x as an indirect input and

130
00:08:30.980 --> 00:08:34.280
we were changing it, then we
absolutely would need to capture it.

131
00:08:34.280 --> 00:08:36.180
But because it was a direct input and

132
00:08:36.180 --> 00:08:39.430
because it wasn't already affecting
anything in the outside world.

133
00:08:39.430 --> 00:08:42.440
Any changes to it would have
been unobservable before.

134
00:08:42.440 --> 00:08:44.200
We don't need to worry
about those changes now.

