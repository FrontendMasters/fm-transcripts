WEBVTT

1
00:00:00.390 --> 00:00:04.610
&gt;&gt; Kyle: Okay, our next operation we
wanna look at is the filter operation.

2
00:00:04.610 --> 00:00:09.470
Filter is, I'm gonna argue,
fundamentally an exclusion operation.

3
00:00:10.490 --> 00:00:16.470
And I need to provide some nuance
to that concept of exclusion,

4
00:00:16.470 --> 00:00:21.810
because in the real world, we think of and
define, if you read the dictionary,

5
00:00:21.810 --> 00:00:26.520
we think of filtering primarily
as an exclusionary activity.

6
00:00:26.520 --> 00:00:29.110
That's the way our brains typically think.

7
00:00:29.110 --> 00:00:31.640
But when we go to implement
it in programming, for

8
00:00:31.640 --> 00:00:33.960
some reason which I've never
been able to figure out,

9
00:00:35.120 --> 00:00:39.380
we historically have always implemented
filtering as an inclusionary activity.

10
00:00:41.140 --> 00:00:44.610
So I wanna talk just a moment about the
philosophical difference between filter

11
00:00:44.610 --> 00:00:47.440
being an exclusionary
versus an inclusionary.

12
00:00:48.590 --> 00:00:51.440
Let's imagine that I'm cooking and

13
00:00:51.440 --> 00:00:54.740
the only thing that I cook in
my household Is spaghetti.

14
00:00:54.740 --> 00:00:58.160
My wife does all the other cooking,
but I like to do spaghetti.

15
00:00:58.160 --> 00:01:00.430
And even then,
I only do it some of the time.

16
00:01:00.430 --> 00:01:02.051
She's the cook of the family.

17
00:01:02.051 --> 00:01:04.646
But I can make some pretty good spaghetti.

18
00:01:04.646 --> 00:01:08.455
When you're cooking up a pot of spaghetti,
you put it in a pot full of water and

19
00:01:08.455 --> 00:01:10.283
you're cooking up your spaghetti.

20
00:01:10.283 --> 00:01:11.221
And then you're ready.

21
00:01:11.221 --> 00:01:11.915
They're cooked.

22
00:01:11.915 --> 00:01:13.870
The noodles are cooked and
you're ready to get them out.

23
00:01:15.150 --> 00:01:20.360
What you generally do or at least this is
what how I was taught, is you pour that

24
00:01:20.360 --> 00:01:25.580
entire contents of that pot into or
through a strainer,

25
00:01:25.580 --> 00:01:30.719
a filter and the water runs in to
the sink and what's left is your noodles.

26
00:01:32.290 --> 00:01:37.160
So my question to you is in that process
of pouring something through a filter,

27
00:01:37.160 --> 00:01:42.320
would you be more inclined to describe
that as I filtered in the noodles or

28
00:01:42.320 --> 00:01:43.690
I filtered out the water?

29
00:01:45.080 --> 00:01:46.000
These are hypotheticals.

30
00:01:46.000 --> 00:01:46.950
I'm not expecting answers.

31
00:01:46.950 --> 00:01:48.040
I just want you to think about it.

32
00:01:48.040 --> 00:01:49.170
These are rhetorical questions.

33
00:01:50.250 --> 00:01:53.030
When you pour the noodles out,
are you filtering in the noodles or

34
00:01:53.030 --> 00:01:54.530
filtering out the water?

35
00:01:54.530 --> 00:01:58.420
I think most people probably tend
to say I'm filtering out the water.

36
00:01:58.420 --> 00:01:59.640
Same thing with coffee.

37
00:01:59.640 --> 00:02:02.504
When you put a coffee filter
in the coffee machine.

38
00:02:02.504 --> 00:02:03.850
I know that's like sacrilege.

39
00:02:03.850 --> 00:02:05.602
We're not supposed to use coffee filters,
right?

40
00:02:05.602 --> 00:02:08.735
But if you put a coffee filter
in the coffee machine and

41
00:02:08.735 --> 00:02:10.474
that water comes through it,

42
00:02:10.474 --> 00:02:15.220
are you filtering out the coffee beans or
are you filtering in the coffeed water?

43
00:02:17.580 --> 00:02:18.620
Kind of depends on how you look at it.

44
00:02:20.240 --> 00:02:23.760
If I go to the grocery store and
there's a big stack of apples and

45
00:02:23.760 --> 00:02:28.080
oranges all mixed together and
I love apples, I want all their apples but

46
00:02:28.080 --> 00:02:30.250
I don't want any of their oranges.

47
00:02:30.250 --> 00:02:36.507
So I have my shopping basket there and
I sift through all of those fruits.

48
00:02:36.507 --> 00:02:41.566
And I pick out and put the apples in my
basket and I leave the oranges behind or

49
00:02:41.566 --> 00:02:46.223
I throw them in the trash can,
cuz I don't like oranges, whatever,

50
00:02:46.223 --> 00:02:50.592
have I filtered in the apples or
have I filtered out the oranges?

51
00:02:50.592 --> 00:02:55.391
And my final example, if you start with
a list of numbers one, two, three, four,

52
00:02:55.391 --> 00:02:58.422
five and you end up with a list of one,
three, five.

53
00:02:58.422 --> 00:03:00.090
The odds.

54
00:03:00.090 --> 00:03:04.560
Have you filtered in the odds or
have you filtered out the evens?

55
00:03:06.510 --> 00:03:10.330
In most of those cases if you dig into it,
I think you'll agree

56
00:03:10.330 --> 00:03:13.600
it's a little bit more natural to think
of it as an exclusionary activity.

57
00:03:14.650 --> 00:03:17.930
However, when we implement
filter in programming,

58
00:03:17.930 --> 00:03:21.052
you return true to say I wanna keep it.

59
00:03:22.340 --> 00:03:26.060
That's kind of a semantic signal
that this is an exclusionary thing.

60
00:03:26.060 --> 00:03:27.630
I'm returning true to keep it and

61
00:03:27.630 --> 00:03:31.130
returning false to discard it or
get rid of it.

62
00:03:32.720 --> 00:03:33.684
So, filter looks like this.

63
00:03:33.684 --> 00:03:40.345
We start out with a list and we make some
determination with each value in the list.

64
00:03:40.345 --> 00:03:44.561
And if we wanna keep it, we put it in the
new array, and if we don't wanna keep it,

65
00:03:44.561 --> 00:03:47.230
we filter it out, and
leave it out of the new array.

66
00:03:48.300 --> 00:03:53.575
So, filter, where map always was gonna
start with a list of some length and

67
00:03:53.575 --> 00:03:58.366
always result in a list or
data structure of the same size and shape.

68
00:03:58.366 --> 00:04:03.205
Filter is designed to create a new
list that's no bigger than and

69
00:04:03.205 --> 00:04:07.251
oftentimes gonna be shorter
than the original list.

70
00:04:07.251 --> 00:04:08.500
Not always.

71
00:04:08.500 --> 00:04:11.639
You could do a filter that resulted
in all the items passing, but

72
00:04:11.639 --> 00:04:14.489
generally speaking,
the new list is gonna be shorter than

73
00:04:14.489 --> 00:04:18.496
the old one.
&gt;&gt; Kyle: So

74
00:04:18.496 --> 00:04:23.460
we can implement an exclude utility,
aka a filter utility.

75
00:04:23.460 --> 00:04:25.916
This is very similar to
what we did with map.

76
00:04:25.916 --> 00:04:29.810
We're gonna loop through the original
list adding items to a new list, but

77
00:04:29.810 --> 00:04:34.072
before we do we're gonna call
a function to test the value.

78
00:04:34.072 --> 00:04:38.852
And there's a special name for
a function that returns a true or false.

79
00:04:38.852 --> 00:04:40.514
We talked about this early in the course.

80
00:04:40.514 --> 00:04:41.970
They're called predicate functions.

81
00:04:42.980 --> 00:04:46.427
So we're calling a predicate function
with each value in the list, and

82
00:04:46.427 --> 00:04:49.816
if it gives us true, we add it to
the new list, and if it gives us false,

83
00:04:49.816 --> 00:04:55.184
we filter it out and throw it away.
&gt;&gt; Kyle: So down at the bottom,

84
00:04:55.184 --> 00:05:01.174
when I call exclude on the list of
[1,2,3,4,5] with the isOdd predicate,

85
00:05:01.174 --> 00:05:03.599
I end up with a list of odd numbers.

86
00:05:05.270 --> 00:05:10.640
So, here's the real pain point
from a semantic perspective.

87
00:05:11.950 --> 00:05:16.322
I call that function isOdd because
if you passed in a single number

88
00:05:16.322 --> 00:05:20.694
to the isOdd function like the number
three, you would expect for

89
00:05:20.694 --> 00:05:25.406
that function to give you true if it
was in fact odd which it is, right?

90
00:05:25.406 --> 00:05:27.684
So that's the right name for
that predicate.

91
00:05:27.684 --> 00:05:29.870
We should call it isOdd.

92
00:05:29.870 --> 00:05:33.490
If we called it isEven, that would be
deliberately screwing with people.

93
00:05:34.730 --> 00:05:35.310
You following?

94
00:05:36.730 --> 00:05:40.770
But now we look at using it in this list
operation which we've called exclude,

95
00:05:40.770 --> 00:05:44.270
because that's what people think
when they think of the word filter.

96
00:05:44.270 --> 00:05:49.560
And we are excluding the odd
numbers into the list.

97
00:05:49.560 --> 00:05:53.230
Do you see why that utility
actually ought to be called include

98
00:05:54.270 --> 00:05:56.960
if that's the semantic
that we're creating?

99
00:05:56.960 --> 00:06:01.300
What I've done is decided
in my own programming that

100
00:06:01.300 --> 00:06:06.730
if I'm given a filter utility that
acts like an inclusionary activity,

101
00:06:06.730 --> 00:06:09.740
I alias that utility to
be called filter in.

102
00:06:10.900 --> 00:06:14.960
And then I make another
utility called filter out

103
00:06:14.960 --> 00:06:17.550
that does the exclusionary activity.

104
00:06:17.550 --> 00:06:20.830
So now I have a filter in and
a filter out, and

105
00:06:20.830 --> 00:06:23.850
it's super clear in my code
what thing I'm doing there.

106
00:06:23.850 --> 00:06:26.230
I don't have this mismatch of semantic.

107
00:06:26.230 --> 00:06:31.642
Where I'm excluding
an inclusionary sort of test.

108
00:06:31.642 --> 00:06:35.644
So I don't like this method,
the one that's provided on arrays,

109
00:06:35.644 --> 00:06:39.932
cuz it's called filter, but
it's actually should be called filter in

110
00:06:39.932 --> 00:06:44.237
because it's an inclusionary activity.
&gt;&gt; Speaker 2: There's a question online.

111
00:06:44.237 --> 00:06:45.445
Just to clarify,

112
00:06:45.445 --> 00:06:49.820
we have not mutated the original array?
&gt;&gt; Kyle: Yeah.

113
00:06:49.820 --> 00:06:50.440
Correct.

114
00:06:50.440 --> 00:06:53.530
We have not mutated the original
array in any of these examples.

115
00:06:53.530 --> 00:06:57.690
In all of these examples, so
far we've looked at map and filter.

116
00:06:57.690 --> 00:07:01.250
In both of those case,
a new list is the result.

117
00:07:01.250 --> 00:07:03.010
We aren't mutating the existing list.

118
00:07:03.010 --> 00:07:04.460
We're creating a new list.

119
00:07:04.460 --> 00:07:07.580
That's consistent with everything that
we've talked about up to this point about

120
00:07:07.580 --> 00:07:11.620
immutable data and treating values as
immutable regardless of whether they are.

121
00:07:11.620 --> 00:07:15.780
Even the built-in array methods,
thankfully, do that exact same thing.

122
00:07:15.780 --> 00:07:18.540
The filter method here
returns us a brand new array,

123
00:07:18.540 --> 00:07:21.070
not mutating the existing array in place.

124
00:07:21.070 --> 00:07:25.090
Be careful because
the existing array methods,

125
00:07:25.090 --> 00:07:28.830
the ones that are built into JavaScript,
only some of them that is true of.

126
00:07:30.100 --> 00:07:34.393
Map, filter, we're gonna look at reduce
next, they all behave correctly.

127
00:07:34.393 --> 00:07:40.630
But other ones like, for example, sort and
reverse, those ones are mutators.

128
00:07:40.630 --> 00:07:41.720
They mutate in place.

129
00:07:43.050 --> 00:07:45.210
So that can be quite frustrating.

130
00:07:45.210 --> 00:07:49.756
One other example of one that does behave
correctly is the concat method that

131
00:07:49.756 --> 00:07:54.090
instead of mutating the array to add
something on the end like push does,

132
00:07:54.090 --> 00:07:58.330
concat creates a whole new list
with new the items added on.

133
00:07:58.330 --> 00:08:01.660
So concat can be useful, and by the way
that's a hint for the upcoming exercise.

