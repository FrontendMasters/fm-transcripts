WEBVTT

1
00:00:00.392 --> 00:00:02.990
&gt;&gt; Kyle Simpson: All right,
let's chat about exercise 2.

2
00:00:02.990 --> 00:00:06.890
As we see in the Read Me, it indicates
that you should refactor the output,

3
00:00:06.890 --> 00:00:11.990
print, if and is long enough
functions to be point freestyle.

4
00:00:11.990 --> 00:00:14.540
I've given you some hints
here on how to approach that.

5
00:00:16.410 --> 00:00:21.550
First we saw that console.log was
inside of the output function.

6
00:00:21.550 --> 00:00:24.720
So if we look at that here and you see
console.log is inside of the output.

7
00:00:24.720 --> 00:00:26.210
There is a point.

8
00:00:26.210 --> 00:00:29.500
You might think I could just
call console.log output.

9
00:00:29.500 --> 00:00:32.120
I could just say output
equals console.log.

10
00:00:32.120 --> 00:00:35.470
In general, that may work in
various browsers if you test it.

11
00:00:35.470 --> 00:00:39.240
But there are some browsers where that can
create a problem because they expect for

12
00:00:39.240 --> 00:00:43.110
the log function to be run in
the context of the console object.

13
00:00:44.380 --> 00:00:45.730
And because of this binding rule,

14
00:00:45.730 --> 00:00:49.730
if you don't do that,
it will end up not working correctly.

15
00:00:49.730 --> 00:00:54.670
So the safest way to do so
is to do console.log.bind.

16
00:00:54.670 --> 00:00:59.450
So, I can very easily say, var

17
00:00:59.450 --> 00:01:04.060
output is equal to console.log.

18
00:01:04.060 --> 00:01:05.790
But instead of just saying console.log,

19
00:01:05.790 --> 00:01:09.380
I can do a hardbound version
of it to the console object.

20
00:01:09.380 --> 00:01:12.320
And that's safely lets me,
I have an output, so

21
00:01:12.320 --> 00:01:15.280
there is now a point free
version of the output function.

22
00:01:18.750 --> 00:01:25.140
Then we have printIf and
we have isShortEnough and isLongEnough.

23
00:01:25.140 --> 00:01:27.590
I'm sorry, we have isLongEenough,
that's the one we wanna re-factor.

24
00:01:27.590 --> 00:01:30.120
So I'll move down to that one first.

25
00:01:30.120 --> 00:01:34.150
We notice that this was a negate and
we saw in our previous code,

26
00:01:34.150 --> 00:01:38.780
I mean in our previous lecture, that
we have a utility for that called nod.

27
00:01:40.830 --> 00:01:45.870
So if we make a nod utility, I'm just
gonna, since I don't need to retype it,

28
00:01:45.870 --> 00:01:47.630
I'm just gonna copy
here from the solution.

29
00:01:47.630 --> 00:01:52.650
But if we made a nod utility or
we call it negate, isLongEnough can simply

30
00:01:52.650 --> 00:02:00.020
be defined as the not or
the negation of isShortEnough.

31
00:02:02.700 --> 00:02:05.831
So there's a point free definition for
the isShortEnough function.

32
00:02:10.218 --> 00:02:12.076
&gt;&gt; Kyle Simpson: And
now the printIf function,

33
00:02:12.076 --> 00:02:16.937
to refactor that one to be point free, we
need a slightly more complex utility and

34
00:02:16.937 --> 00:02:18.879
I provided you one called When.

35
00:02:18.879 --> 00:02:20.421
&gt;&gt; Speaker 2: [INAUDIBLE]
The wrong function.

36
00:02:20.421 --> 00:02:21.551
&gt;&gt; Kyle Simpson: Did I?

37
00:02:21.551 --> 00:02:22.947
Sorry.

38
00:02:25.650 --> 00:02:27.340
&gt;&gt; Kyle Simpson: There we go.

39
00:02:27.340 --> 00:02:32.990
I provided you that utility as a hint,
here, the When utility.

40
00:02:32.990 --> 00:02:34.760
So I'm just gonna copy and paste that in.

41
00:02:39.880 --> 00:02:42.720
&gt;&gt; Kyle Simpson: Let's look at
what the When utility does.

42
00:02:42.720 --> 00:02:44.210
When called the first time,

43
00:02:44.210 --> 00:02:48.860
it takes in a function and it's gonna
use that function at the very end.

44
00:02:48.860 --> 00:02:51.380
So, that's basically gonna
be our output function.

45
00:02:51.380 --> 00:02:56.230
So we're saying, when a predicate passes,
that's the output that we wanna call.

46
00:02:56.230 --> 00:02:59.350
And then the next function
that gets returned back, so

47
00:02:59.350 --> 00:03:03.810
it's expecting another input
is the predicate function.

48
00:03:03.810 --> 00:03:06.980
That would be our test,
like isShortEnough or isLongEnough.

49
00:03:06.980 --> 00:03:10.760
And then a third function that gets
returned back expects the rest of

50
00:03:10.760 --> 00:03:14.860
the arguments, which in this case is
gonna be the messages that we wanna pass.

51
00:03:14.860 --> 00:03:16.800
Once all three of those
have been received,

52
00:03:16.800 --> 00:03:18.780
it passes the arguments into predicate.

53
00:03:18.780 --> 00:03:20.520
And if that returns true,

54
00:03:20.520 --> 00:03:24.610
it passes those same arguments into that
original function, which would be output.

55
00:03:25.880 --> 00:03:30.410
So, we can define our printIf,
&gt;&gt; Kyle Simpson: As

56
00:03:30.410 --> 00:03:35.240
the when of the output function.

57
00:03:36.340 --> 00:03:40.070
Now, that is gonna return a function
that's expecting a predicate.

58
00:03:41.090 --> 00:03:45.080
And we provide that predicate already by
making the first call to the function

59
00:03:45.080 --> 00:03:48.590
here, we call it isShortEnough.

60
00:03:50.100 --> 00:03:53.320
And then that function that comes back
is the one that's expecting the set of

61
00:03:53.320 --> 00:03:58.550
arguments, that second
call there is the msg1.

62
00:03:58.550 --> 00:04:02.400
This pattern of providing arguments
in one function call at a time.

63
00:04:02.400 --> 00:04:05.210
It has a name, and we're gonna go over
that shortly later in the workshop.

64
00:04:06.430 --> 00:04:07.910
It can be refered to as carrying.

65
00:04:09.070 --> 00:04:10.670
And so we're gonna go over carrying,

66
00:04:10.670 --> 00:04:13.449
don't worry about that,
if that part is still a little confusing.

67
00:04:15.740 --> 00:04:20.969
And now that we have a point
free version of printIf.

68
00:04:23.987 --> 00:04:25.062
&gt;&gt; Kyle Simpson: You could even go so

69
00:04:25.062 --> 00:04:30.060
far as to say is there some way to do
a point free version of isShortEnough?

70
00:04:30.060 --> 00:04:34.560
And there are ways to do that but they
would have used other more sophisticated

71
00:04:34.560 --> 00:04:38.160
patterns and functional programming
that I haven't taught you about yet.

72
00:04:38.160 --> 00:04:44.700
So, the take away here is point free
style is suppose to reduce the verbosity

73
00:04:44.700 --> 00:04:48.550
of your code, we have certainly
eliminated some of the complexity.

74
00:04:48.550 --> 00:04:54.080
Made use of standard built-in libraries
that as they may exist in a library for

75
00:04:54.080 --> 00:04:55.280
example.

76
00:04:55.280 --> 00:05:00.250
And those utilities give
us the same result, but

77
00:05:00.250 --> 00:05:02.510
we didn't have to manually specify it.

78
00:05:02.510 --> 00:05:05.140
So remember how we set up at
the beginning of the course,

79
00:05:05.140 --> 00:05:07.680
the goal here is to be more declarative?

80
00:05:07.680 --> 00:05:12.270
In a sense, this is the declarative form
of what we had before, because we're

81
00:05:12.270 --> 00:05:16.060
saying, I don't really care how to do it,
just negate the isShortEnough.

82
00:05:16.060 --> 00:05:17.640
Just make that part happen.

83
00:05:17.640 --> 00:05:21.880
Or make the predicate check happen for
me using the when utility.

84
00:05:21.880 --> 00:05:23.580
I don't really care how that happens.

85
00:05:24.820 --> 00:05:31.860
You definitely are gonna wanna be careful
about not going too far with this.

86
00:05:33.070 --> 00:05:36.210
Because this is where you can quickly
start sliding down that curve that we

87
00:05:36.210 --> 00:05:39.730
talked about at the beginning of
the course, where all of a sudden,

88
00:05:39.730 --> 00:05:41.030
you're looking at some line of code.

89
00:05:41.030 --> 00:05:44.430
And it's got 14 different adapter
variations wrapped around it, and

90
00:05:44.430 --> 00:05:47.780
you're like I have no clue
what this is even doing.

91
00:05:47.780 --> 00:05:49.690
So you can go too far with it.

92
00:05:49.690 --> 00:05:53.820
But it is a nice style to be
aware of that can help make your,

93
00:05:53.820 --> 00:05:58.370
if you use it sparingly, it can help make
your functional code a lot easier to read.

