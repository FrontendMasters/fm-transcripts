WEBVTT

1
00:00:00.500 --> 00:00:05.180
&gt;&gt; Kyle Simpson: Okay, let's talk about
our practice with recursive ideas,

2
00:00:05.180 --> 00:00:06.390
in Exercise 6.

3
00:00:06.390 --> 00:00:09.469
[COUGH] As you see, the read me says,
we've got this mult function,

4
00:00:09.469 --> 00:00:12.120
we wanna turn it into
a recursive function.

5
00:00:12.120 --> 00:00:15.360
If you look at the existing
implementation, it was very

6
00:00:15.360 --> 00:00:20.520
straightforward for three numbers, but it
would not have worked for 4, 5,6 numbers.

7
00:00:20.520 --> 00:00:25.720
We wanna create a recursive one that would
work appropriately for any number of them.

8
00:00:25.720 --> 00:00:27.645
So I'm gonna start by.

9
00:00:30.175 --> 00:00:31.985
&gt;&gt; Kyle Simpson: Listing our product,

10
00:00:31.985 --> 00:00:37.640
because in multiplication we call
it a product instead of a sum.

11
00:00:37.640 --> 00:00:40.650
Our product and then our nums.

12
00:00:40.650 --> 00:00:44.340
collecting the rest of them
up in the nums, [COUGH] and

13
00:00:44.340 --> 00:00:48.060
that's the same signature I'd use even if
I was going to do the iterative forms,

14
00:00:48.060 --> 00:00:53.370
so it doesn't even really need to change
its name to say that it's recursive.

15
00:00:53.370 --> 00:00:55.630
This is how we would want to express it.

16
00:00:55.630 --> 00:01:01.200
Ideally, recursion is a hidden detail
from the user of your function.

17
00:01:01.200 --> 00:01:02.800
Ideally, they shouldn't
have to care about that.

18
00:01:04.000 --> 00:01:08.114
All right, if I were to write a loop,
I would just start out my four-loop and

19
00:01:08.114 --> 00:01:11.974
just start multiplying each item in
the numbers list into the product,

20
00:01:11.974 --> 00:01:15.668
I'd just say, times equals into
the product and then return that.

21
00:01:15.668 --> 00:01:23.840
So let's start then by expressing
this as a recursive implementation.

22
00:01:23.840 --> 00:01:26.670
In the same way for
the numbers where we were adding,

23
00:01:26.670 --> 00:01:30.000
we can express the iteration
through recursion by saying,

24
00:01:30.000 --> 00:01:33.450
we're just gonna pair that
numbers list down one at a time.

25
00:01:33.450 --> 00:01:36.490
So our base case is when
the numbers list is at zero.

26
00:01:36.490 --> 00:01:40.410
When its length is at 0.

27
00:01:40.410 --> 00:01:41.603
And if that is the case,

28
00:01:41.603 --> 00:01:44.775
then whatever was passed in as
product is what we wanna return.

29
00:01:48.045 --> 00:01:53.086
&gt;&gt; Kyle Simpson: If not, if we're not in
the base condition, we're gonna need to

30
00:01:53.086 --> 00:01:58.890
make a recursive call, and the recursive
call is gonna be product* what?

31
00:01:58.890 --> 00:01:59.530
&gt;&gt; Speaker 2: Call to the function.

32
00:01:59.530 --> 00:02:02.350
&gt;&gt; Kyle Simpson: The call to the function,
the recursive call to the function.

33
00:02:02.350 --> 00:02:03.280
&gt;&gt; Speaker 2: With the nums array.

34
00:02:03.280 --> 00:02:05.360
&gt;&gt; Kyle Simpson: With the numbers array.

35
00:02:05.360 --> 00:02:07.010
The numbers array's
already been pared down.

36
00:02:07.010 --> 00:02:10.060
It's already the tail, so
we don't need to do anything else to it.

37
00:02:10.060 --> 00:02:13.530
We just need to pass it along and say,
go figure out what the product of that is.

38
00:02:13.530 --> 00:02:14.870
Come back and give me that answer.

39
00:02:14.870 --> 00:02:19.070
We'll multiply that by the current
product, and then we're done.

40
00:02:20.890 --> 00:02:24.760
If you like the word result better
than product, you can also use that.

41
00:02:24.760 --> 00:02:27.023
It's more generic than sum and product.

42
00:02:29.423 --> 00:02:30.867
&gt;&gt; Kyle Simpson: Let's
test that real quick,

43
00:02:30.867 --> 00:02:33.480
just to make sure that's
gonna work appropriately.

44
00:02:35.954 --> 00:02:38.850
&gt;&gt; Kyle Simpson: And
there we go, we get 360.

45
00:02:38.850 --> 00:02:43.126
Which matches with mathematic intuition,
because 3, 4,

46
00:02:43.126 --> 00:02:47.249
5 is 60 so 3, 4, 5,
6 would be 6 times that 360.

47
00:02:53.224 --> 00:02:56.525
&gt;&gt; Kyle Simpson: Questions
about exercise six?

48
00:02:56.525 --> 00:02:59.839
&gt;&gt; Speaker 2: So, I did a similar
thing to the last one you did where I

49
00:02:59.839 --> 00:03:01.700
took the first 2 values.

50
00:03:01.700 --> 00:03:04.366
&gt;&gt; Kyle Simpson: We're gonna get to that
in just a sec, I was just gonna show that.

51
00:03:04.366 --> 00:03:07.239
I just wanna make sure there weren't any
questions about the algorithm first.

52
00:03:12.989 --> 00:03:15.730
&gt;&gt; Kyle Simpson: As you were just saying,
which is great.

53
00:03:15.730 --> 00:03:19.990
Let's, in a forward thinking way, and
again that won't be totally obvious yet.

54
00:03:19.990 --> 00:03:20.950
But in a forward thinking way,

55
00:03:20.950 --> 00:03:25.040
let's peak ahead into our tail,
let's look at the next item in the list.

56
00:03:25.040 --> 00:03:26.418
So I'll just name that num.

57
00:03:26.418 --> 00:03:28.879
And then.

58
00:03:31.639 --> 00:03:34.078
&gt;&gt; Kyle Simpson: My base
condition is still the same, but

59
00:03:34.078 --> 00:03:36.170
I need to multiply product by num.

60
00:03:38.020 --> 00:03:42.760
And then add num back into

61
00:03:42.760 --> 00:03:46.710
the list of things that's gonna be passed
along, if we aren't in the base condition.

62
00:03:47.940 --> 00:03:49.910
Does that match with how you did it?

63
00:03:49.910 --> 00:03:51.420
&gt;&gt; Speaker 3: Yeah,
a little bit differently.

64
00:03:51.420 --> 00:03:51.940
&gt;&gt; Kyle Simpson: Okay.

65
00:03:51.940 --> 00:03:57.380
&gt;&gt; Speaker 3: I checked to
see if num was undefined.

66
00:03:57.380 --> 00:04:02.617
If it was a returned x,
otherwise I return the call to mult with

67
00:04:02.617 --> 00:04:07.782
the first argument as product times num,
and then the tail.

68
00:04:12.484 --> 00:04:13.949
&gt;&gt; Kyle Simpson: Let me
see if I understand.

69
00:04:13.949 --> 00:04:17.199
&gt;&gt; Speaker 3: But it's the same sort of.

70
00:04:19.210 --> 00:04:23.200
&gt;&gt; Kyle Simpson: You're saying your
base condition was if num is undefined?

71
00:04:24.940 --> 00:04:27.690
&gt;&gt; Speaker 3: Yeah,
I just popped it in chat if you wanna.

72
00:04:53.065 --> 00:04:54.345
&gt;&gt; Kyle Simpson: Does that
represent what you were doing?

73
00:04:54.345 --> 00:04:55.336
&gt;&gt; Speaker 3: Yeah.

74
00:05:16.758 --> 00:05:18.397
&gt;&gt; Kyle Simpson: All right, so.
[COUGH]

75
00:05:19.649 --> 00:05:20.763
&gt;&gt; Kyle Simpson: We are gonna come back to

76
00:05:20.763 --> 00:05:23.340
the approach that you're
actually hinting towards.

77
00:05:23.340 --> 00:05:25.070
So rather than me comment too much on it,

78
00:05:25.070 --> 00:05:28.140
let me just pause that
part of our discussion.

79
00:05:28.140 --> 00:05:31.300
I see what you're doing with that,
and that's a good

80
00:05:31.300 --> 00:05:34.160
thing that you're doing it that way,
but you're just slightly ahead of

81
00:05:34.160 --> 00:05:37.270
where we're headed with our discussions,
so let's just pause that for a moment.

