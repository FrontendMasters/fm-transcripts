WEBVTT

1
00:00:00.220 --> 00:00:03.540
&gt;&gt; Kyle Simpson: Let's talk about
the solution to exercise three.

2
00:00:03.540 --> 00:00:05.540
In the read me it says
we need to define and

3
00:00:05.540 --> 00:00:08.630
compose that takes any number
of functions and then a pipe.

4
00:00:08.630 --> 00:00:10.920
So basically you only need
to solve this once and

5
00:00:10.920 --> 00:00:13.180
then do the reverse for the other one.

6
00:00:13.180 --> 00:00:19.198
Solve pipe first and do compose or
the other way around.

7
00:00:19.198 --> 00:00:20.142
Let's try that out.

8
00:00:20.142 --> 00:00:21.520
Let's try to make our own.

9
00:00:21.520 --> 00:00:24.080
I'm gonna implement pipe first.

10
00:00:25.940 --> 00:00:30.770
And the way I'm gonna do it as that you
expect to pass in individual functions,

11
00:00:30.770 --> 00:00:34.070
the way I've got listed
on line line 11 and 12.

12
00:00:34.070 --> 00:00:39.400
So I'm gonna just collect all of those
functions into a single array using

13
00:00:39.400 --> 00:00:42.780
the ...gather operator there
in the function signature.

14
00:00:42.780 --> 00:00:50.380
And then what I'm gonna do is set
up a variable to hold the input

15
00:00:52.900 --> 00:00:56.860
from the first function and then just
keep reusing that variable over and over.

16
00:00:56.860 --> 00:00:59.050
So this needs to be
a machine making machine.

17
00:00:59.050 --> 00:01:01.560
So I need to make a new function.

18
00:01:01.560 --> 00:01:05.563
That will receive the first input,
which I'm just gonna call result.

19
00:01:07.876 --> 00:01:11.690
&gt;&gt; Kyle Simpson: And then I'm gonna do
this first with just a regular for loop.

20
00:01:11.690 --> 00:01:16.704
So I'll say for, and let's say

21
00:01:16.704 --> 00:01:22.283
i = 0; i &lt; fns.length; i++.

22
00:01:24.715 --> 00:01:28.402
&gt;&gt; Kyle Simpson: And now, what I wanna
do is I want to call each function in

23
00:01:28.402 --> 00:01:30.838
succession so I wanna say fns[i].

24
00:01:30.838 --> 00:01:34.117
I wanna call it passing in result and

25
00:01:34.117 --> 00:01:39.256
whatever that function returns
store that in results so

26
00:01:39.256 --> 00:01:42.880
I can use it on the next loop iteration.

27
00:01:45.592 --> 00:01:50.530
&gt;&gt; Kyle Simpson: At the end of this loop
I just simple need to return the result.

28
00:01:59.630 --> 00:02:03.540
So this result here is the first input.

29
00:02:03.540 --> 00:02:05.370
We could have called it input.

30
00:02:05.370 --> 00:02:09.249
But I also think it looks
weird to name this one input.

31
00:02:12.324 --> 00:02:16.460
&gt;&gt; Kyle Simpson: And so, I would have
preferred that one to be called result.

32
00:02:16.460 --> 00:02:20.420
And so, rather than have to do

33
00:02:21.810 --> 00:02:27.480
result equals input That's
an entirely valid way of doing it,

34
00:02:27.480 --> 00:02:31.840
but there's really no reason to create
two separate variables when one can work.

35
00:02:31.840 --> 00:02:36.211
So, my shortcut is to just
call that first one result.

36
00:02:41.500 --> 00:02:45.172
&gt;&gt; Kyle Simpson: Now, compose does exactly
the same thing except it's gonna go in

37
00:02:45.172 --> 00:02:46.320
a different order.

38
00:02:46.320 --> 00:02:51.180
It's gonna take a list of functions And
make a new function.

39
00:02:51.180 --> 00:02:54.910
Let me name this one, I'll name it
piped and I'll name this one composed.

40
00:02:54.910 --> 00:03:00.480
It's gonna take a single result and

41
00:03:00.480 --> 00:03:03.860
I could start writing myself
a foreloop for var i.

42
00:03:03.860 --> 00:03:07.780
And I would start at fns.length- 1 and

43
00:03:07.780 --> 00:03:10.590
I could go in the opposite
direction with my for loop.

44
00:03:10.590 --> 00:03:14.340
But why don't I take a step back and
say that's awfully imperative.

45
00:03:14.340 --> 00:03:19.284
Is there a more point free style
way of thinking about this?

46
00:03:19.284 --> 00:03:24.022
And it turns out compose is really
just the same as calling pipe,

47
00:03:24.022 --> 00:03:27.456
but with the reversed
order of items in a list.

48
00:03:27.456 --> 00:03:27.956
All right.

49
00:03:28.970 --> 00:03:31.960
So what if I just say return pipe and

50
00:03:31.960 --> 00:03:35.130
the list of arguments that I give it,
I need to spread those out.

51
00:03:35.130 --> 00:03:38.828
But I'm just gonna reverse
the functions list.

52
00:03:43.704 --> 00:03:47.099
&gt;&gt; Kyle Simpson: So that's a more point
free style way of doing define and

53
00:03:47.099 --> 00:03:47.903
composing.

54
00:03:47.903 --> 00:03:52.048
You could have started with compose, and
defined pipe as the reverse of compose,

55
00:03:52.048 --> 00:03:54.283
if that's the way you
wanted to go about it.

56
00:04:01.829 --> 00:04:05.945
&gt;&gt; Kyle Simpson: Now, as we scroll down
here, we just are going to verify what's

57
00:04:05.945 --> 00:04:10.823
happening with compose, is that when
we pass in the value 3 to f we're going

58
00:04:10.823 --> 00:04:15.323
to get three divided by two because
we're calling the half function so

59
00:04:15.323 --> 00:04:19.135
that would be one and
a half increment that to two and a half,

60
00:04:19.135 --> 00:04:24.830
double that to five decrement it down to
four that's why we get the output of four.

61
00:04:24.830 --> 00:04:29.970
Or, I call P and
I give it the value three.

62
00:04:29.970 --> 00:04:31.690
We're gonna decrement first.

63
00:04:31.690 --> 00:04:34.589
I'm sorry we're gonna halve first to 1.5.

64
00:04:34.589 --> 00:04:40.950
Increment to 2.5,
double to 5, decrement to 4.

65
00:04:40.950 --> 00:04:43.610
So that's why F of 3 and P of 3 are gonna

66
00:04:43.610 --> 00:04:48.480
give the same it's cause' I listed these
arguments already in the reverse order.

67
00:04:56.270 --> 00:04:59.820
Since we're going to cover
recursion later in our workshop,

68
00:04:59.820 --> 00:05:04.530
I'm not going to devolve into much
of the detail about recursion, but

69
00:05:04.530 --> 00:05:10.410
when you are running, for example,
this pipe any time you have a loop,

70
00:05:10.410 --> 00:05:15.790
an imperative loop like that, that loop
is taking the place of a constant.

71
00:05:15.790 --> 00:05:20.380
So the way you would model this is a
recursion is to say, I just need to start

72
00:05:20.380 --> 00:05:26.750
out with a list of functions called
the first function on the list and

73
00:05:26.750 --> 00:05:32.120
then pass that result to back in the pipe
with a shorter list of functions and

74
00:05:32.120 --> 00:05:35.600
just keep going until your list
of functions is down to one.

75
00:05:37.250 --> 00:05:40.310
It's the same thing as progressing
through the list of functions,

76
00:05:40.310 --> 00:05:42.090
you can just reduce the list of functions.

77
00:05:43.380 --> 00:05:46.840
So that's the general strategy
you'd use to do it with recursion.

78
00:05:46.840 --> 00:05:50.830
We're gonna talk about list operations
later in the course as well.

79
00:05:50.830 --> 00:05:55.380
With a list operation, a function
composition is basically a reduce.

80
00:05:55.380 --> 00:05:57.780
So we could have done it with a reduce.

