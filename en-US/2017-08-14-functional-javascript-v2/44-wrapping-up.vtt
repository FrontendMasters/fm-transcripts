WEBVTT

1
00:00:00.510 --> 00:00:03.000
&gt;&gt; Kyle Simpson: All right,
everybody take a deep breath with me.

2
00:00:03.000 --> 00:00:06.500
That was quite a set of stuff
to go through in the course?

3
00:00:06.500 --> 00:00:10.036
I am really please that you
stuck it out with us and

4
00:00:10.036 --> 00:00:15.307
I just want to briefly recap and then
we are gonna close for the day [COUGH].

5
00:00:16.470 --> 00:00:20.996
We started out this course after
motivating why functional programming.

6
00:00:20.996 --> 00:00:23.440
And I wanna reiterate what I
said at the very beginning,

7
00:00:23.440 --> 00:00:25.350
why functional programming?

8
00:00:25.350 --> 00:00:29.180
Because if you can't trust the code that
you're writing you don't understand it and

9
00:00:29.180 --> 00:00:29.770
vice versa.

10
00:00:31.110 --> 00:00:35.610
So we want to strive to write code
that is provable, that is trustable.

11
00:00:35.610 --> 00:00:38.410
And code that makes sense,
that's declarative,

12
00:00:38.410 --> 00:00:42.030
it focuses more on the what
not as much on the how.

13
00:00:42.030 --> 00:00:44.730
That's our goal in over
all programming and

14
00:00:44.730 --> 00:00:47.890
I think functional programming is
a really powerful tool for that.

15
00:00:47.890 --> 00:00:51.210
So we looked at a variety of different
tools that help us with that.

16
00:00:51.210 --> 00:00:57.500
We saw that avoiding side effects creating
pure functions that have no side effects.

17
00:00:57.500 --> 00:01:02.500
And indeed, using point freestyle
to not have as many functions

18
00:01:02.500 --> 00:01:07.300
cluttering up the code, that goes a long
way to setting up the right foundation for

19
00:01:07.300 --> 00:01:09.630
us to approach functional programming.

20
00:01:09.630 --> 00:01:13.050
Composition is how we take all these
different Lego pieces that we build in our

21
00:01:13.050 --> 00:01:15.540
app and
we put them together in very clean ways.

22
00:01:15.540 --> 00:01:16.470
In a particular,

23
00:01:16.470 --> 00:01:22.370
composition is about modeling the flow
of data across a series of operations.

24
00:01:22.370 --> 00:01:24.920
And then we talked about immutability.

25
00:01:24.920 --> 00:01:29.570
It's important to maintain a sense
that values that could mutate, don't

26
00:01:29.570 --> 00:01:34.080
mutate because that helps create more
predictability for every line of code.

27
00:01:34.080 --> 00:01:38.480
Remember, we talked about purity is
really a level of confidence and

28
00:01:38.480 --> 00:01:41.390
that's meta point about all
of functional programming.

29
00:01:41.390 --> 00:01:46.795
The choices that we make about how
we style our code either add to or

30
00:01:46.795 --> 00:01:50.530
detract from that confidence
level that people could have

31
00:01:50.530 --> 00:01:52.540
that they know what that
piece of code is gonna do.

32
00:01:52.540 --> 00:01:54.860
And we should be doing everything we can.

33
00:01:54.860 --> 00:01:59.350
Using every tool we have available to us,
to give them more confidence and

34
00:01:59.350 --> 00:02:00.980
they understand what they're reading.

35
00:02:02.040 --> 00:02:06.530
Closure, one of the most fundamental
concepts in all of programming but

36
00:02:06.530 --> 00:02:10.400
certainly right at the very heart of
what we do in functional programming.

37
00:02:10.400 --> 00:02:13.580
It enables virtually every
other pattern that we did.

38
00:02:13.580 --> 00:02:16.390
You saw closure being used over and
over and over again.

39
00:02:16.390 --> 00:02:18.910
You have to just get natural at it.

40
00:02:18.910 --> 00:02:21.110
And I want you to be able
to answer that question.

41
00:02:21.110 --> 00:02:23.110
When somebody says, hey what's closure?

42
00:02:23.110 --> 00:02:27.252
You should be able to fire right back,
closure is when a function remembers and

43
00:02:27.252 --> 00:02:30.380
as lexical variables when
executed in a different scope.

44
00:02:30.380 --> 00:02:34.240
That's the way to make sure you
have that within your grasp,

45
00:02:34.240 --> 00:02:35.790
you wanna have mastery over that topic.

46
00:02:37.450 --> 00:02:40.308
Lists and
indeed data structure operations,

47
00:02:40.308 --> 00:02:44.263
not only are they just about lists
of numbers as most examples but

48
00:02:44.263 --> 00:02:47.942
we can adapt these operations
like map filters and reduce.

49
00:02:47.942 --> 00:02:50.220
We can adapt them to objects.

50
00:02:50.220 --> 00:02:51.785
We can adapt them to trees.

51
00:02:51.785 --> 00:02:55.290
And indeed, we can adapt them
to our own code base itself.

52
00:02:55.290 --> 00:02:59.780
That the statements within our code can be
a data structure on which we can operate.

53
00:03:01.760 --> 00:03:06.968
And finally, observables allow us to
map all of map there is pun for you.

54
00:03:06.968 --> 00:03:11.328
Now all of what we've learned about
functional programming from the eager

55
00:03:11.328 --> 00:03:14.106
synchronous stuff to
overtime asynchronous.

56
00:03:16.453 --> 00:03:21.060
&gt;&gt; Kyle Simpson: You now have
a pretty good set of climbing tools.

57
00:03:21.060 --> 00:03:23.990
And you've started to make your way
up that cliff face of the mountain.

58
00:03:25.300 --> 00:03:31.880
And the climb may at times be difficult,
it certainly has been for me but

59
00:03:31.880 --> 00:03:36.470
I just wanna encourage you and cheer
you on that this journey is worth it.

60
00:03:36.470 --> 00:03:41.620
And I spent many, many years just running
up against the face of this cliff having

61
00:03:41.620 --> 00:03:46.230
no idea how to climb it, take a few steps
and then fall down and get frustrated.

62
00:03:46.230 --> 00:03:51.910
I hope, and I have endeavored to give
you a better path of that mountain.

63
00:03:51.910 --> 00:03:55.600
Hopefully, that inspires you that this
journey it's finally worth taking.

64
00:03:56.710 --> 00:04:00.580
And [COUGH]
I really do believe

65
00:04:00.580 --> 00:04:03.620
that we should take to
heart that challenge.

66
00:04:03.620 --> 00:04:06.850
The code should be about
communicating with other people.

67
00:04:06.850 --> 00:04:10.700
This is just one set of techniques
that allows us to do that better.

68
00:04:10.700 --> 00:04:14.900
On your journey up the mountain learning
functional programming or indeed any part

69
00:04:14.900 --> 00:04:18.850
of JavaScript If there's anything
that I can do to help you further.

70
00:04:18.850 --> 00:04:21.260
The books,
obviously make sure to check those out.

71
00:04:21.260 --> 00:04:23.520
[INAUDIBLE] You Don't Know JS
book's on GitHub but

72
00:04:23.520 --> 00:04:27.640
also my book of Functional Light
JavaScript check those out.

73
00:04:27.640 --> 00:04:30.600
There's lots of great videos here on
the front end masters platform that

74
00:04:30.600 --> 00:04:31.990
you should check out.

75
00:04:31.990 --> 00:04:35.330
But I can be of any assistance
beyond that, feel free to reach out.

76
00:04:35.330 --> 00:04:40.980
I love to help, so email me and let me
help you with that JavaScript journey.

77
00:04:40.980 --> 00:04:42.200
It's been an honor to be here.

78
00:04:42.200 --> 00:04:45.630
Thanks for sticking it through
all of this tough material and

79
00:04:45.630 --> 00:04:47.050
we'll see you around JavaScript.

