WEBVTT

1
00:00:00.480 --> 00:00:03.330
&gt;&gt; Kyle Simpson: There's another
characteristic of the arguments,

2
00:00:03.330 --> 00:00:06.070
and how they flow through our functions.

3
00:00:06.070 --> 00:00:10.270
And it defines a style of
programming called point-free style.

4
00:00:11.390 --> 00:00:15.420
For the longest time, I was confused
by what point-free style was about,

5
00:00:15.420 --> 00:00:19.520
cuz every time I tried to read about it or
see it in a conference talk or whatever.

6
00:00:19.520 --> 00:00:21.380
It was just hopelessly opaque.

7
00:00:21.380 --> 00:00:23.430
I could never figure out
what are they talking about.

8
00:00:23.430 --> 00:00:27.160
And then one day, I was doing this thing
in functional programming, I was just

9
00:00:27.160 --> 00:00:30.750
doing something that seemed natural to me,
and this functional programmer tapped me

10
00:00:30.750 --> 00:00:33.510
on the shoulder and he was like, hey,
that's cool, that's point-free style.

11
00:00:33.510 --> 00:00:35.596
And I was like, What?

12
00:00:35.596 --> 00:00:40.023
This thing that I've never been able
to figure out I just accidentally,

13
00:00:40.023 --> 00:00:41.484
what is that all about?

14
00:00:41.484 --> 00:00:46.790
So I'm gonna give you
the accidentally path.

15
00:00:46.790 --> 00:00:52.820
Let's imagine you have this
foo that takes a function,

16
00:00:52.820 --> 00:00:55.030
it's taking the call back basically.

17
00:00:55.030 --> 00:00:59.255
That callback is gonna receive a value of
v, and you wanna pass that along to bar.

18
00:01:02.271 --> 00:01:03.110
&gt;&gt; Kyle Simpson: See what I'm saying?

19
00:01:03.110 --> 00:01:04.440
And then return its output.

20
00:01:05.740 --> 00:01:09.990
So imagine that that is the code
that you're looking at.

21
00:01:09.990 --> 00:01:14.990
And you say to yourself, gee,
the shape of that function on

22
00:01:14.990 --> 00:01:19.350
line 1 is the same of
the shape of the bar function.

23
00:01:20.810 --> 00:01:23.050
Why do I need that function
wrapped around it?

24
00:01:23.050 --> 00:01:26.690
Why can't I just pass
bar as the call back?

25
00:01:28.280 --> 00:01:31.035
Why can't I just make it look like that?

26
00:01:33.536 --> 00:01:37.426
&gt;&gt; Kyle Simpson: Now I just did that as
instinctual, I was like, I would recognize

27
00:01:37.426 --> 00:01:41.885
places where I had a function wrapped
around some other function call, and

28
00:01:41.885 --> 00:01:46.953
it was just straight up passing through in
the inputs and then returning the output.

29
00:01:46.953 --> 00:01:49.826
And I just called it like a pass
through function, and I was like,

30
00:01:49.826 --> 00:01:53.540
just get rid of the pass through
function and just pass that directly.

31
00:01:53.540 --> 00:01:57.020
I was just doing that instinctually and
somebody came along and said,

32
00:01:57.020 --> 00:02:00.370
hey, that's point-freestyle.

33
00:02:00.370 --> 00:02:05.350
What we mean by points, the way I've been
able to gather from my imperfect research

34
00:02:05.350 --> 00:02:10.310
here, a point is another way of saying
the input to the function, the parameter.

35
00:02:11.680 --> 00:02:15.860
And what you'll notice here is that
we're listing the parameter, and

36
00:02:15.860 --> 00:02:20.950
then mapping it directly is the input,
the argument to another function.

37
00:02:20.950 --> 00:02:25.576
That flow that's happening there
is unnecessarily explicit.

38
00:02:25.576 --> 00:02:26.880
It's verbose.

39
00:02:26.880 --> 00:02:30.840
And point-free style says,
get rid of that point.

40
00:02:30.840 --> 00:02:35.510
Don't make the mapping between
the parameter and the argument explicit.

41
00:02:35.510 --> 00:02:39.140
Make it implicit by just passing the bar,
directly.

42
00:02:41.290 --> 00:02:45.180
So that's what we mean by a point, it's
that mapping between the parameter and

43
00:02:45.180 --> 00:02:46.800
the argument passed through.

44
00:02:46.800 --> 00:02:51.529
And to a great extent, a lot of times we
can just do something as simple as that,

45
00:02:51.529 --> 00:02:54.124
and now we have more point freestyle code.

46
00:02:56.671 --> 00:02:57.810
&gt;&gt; Kyle Simpson: Here's another example.

47
00:02:59.280 --> 00:03:03.430
There's a special term for
a function that returns a boolean value.

48
00:03:05.000 --> 00:03:09.263
Any function that takes some inputs and
computes a true/false as a result,

49
00:03:09.263 --> 00:03:11.875
that's referred to as
a predicate function.

50
00:03:13.635 --> 00:03:15.950
&gt;&gt; Kyle Simpson: So,
isOdd is a predicate function.

51
00:03:15.950 --> 00:03:21.330
It takes the value v,
computes the mod of it even if the mod of

52
00:03:21.330 --> 00:03:24.710
v mod 2 is 1,
then we know it's an odd number.

53
00:03:24.710 --> 00:03:26.889
Otherwise it's an even number.

54
00:03:26.889 --> 00:03:32.062
So I'll gonna find isOdd with that
mode operator like I do on line 2,

55
00:03:32.062 --> 00:03:36.893
and then if I want an isEven or
isEven is just a negation of isOdd.

56
00:03:36.893 --> 00:03:41.207
I don't need to recompute mode and
compare it to zero or say nod=1.

57
00:03:41.207 --> 00:03:47.416
I can just say nodd=1, I've written
code like that many, many times before.

58
00:03:47.416 --> 00:03:50.330
You have two binaries where one
is the negation of the other.

59
00:03:52.360 --> 00:03:54.560
What do you spot about lines 5 and 6?

60
00:03:57.720 --> 00:03:59.760
There's a point there, isn't it?

61
00:03:59.760 --> 00:04:05.920
There's a pass through v from the isEven
parameter to the v argument of isOdd.

62
00:04:07.040 --> 00:04:08.490
That's a point.

63
00:04:08.490 --> 00:04:10.670
There's also a negation there,
but there's a point.

64
00:04:11.670 --> 00:04:14.120
So the functional programmer says,
how can I get rid of that point?

65
00:04:14.120 --> 00:04:18.840
Well, what if I made myself
a utility that generally

66
00:04:18.840 --> 00:04:22.580
just called a predicate and
negated its output?

67
00:04:24.240 --> 00:04:29.190
Then I could use that utility to make
a point free definition for isEven.

68
00:04:29.190 --> 00:04:33.020
That utility I'm gonna call it not, or

69
00:04:33.020 --> 00:04:36.210
a lot of times a functional
program will call it negate.

70
00:04:36.210 --> 00:04:37.850
Use which ever term you like.

71
00:04:37.850 --> 00:04:38.510
Look at what it does?

72
00:04:38.510 --> 00:04:44.300
It takes in a function, returns another
one that's expecting any set of arguments,

73
00:04:44.300 --> 00:04:48.660
it'll pass those along, but
right there on line 3 it negates it.

74
00:04:48.660 --> 00:04:52.900
It throws the exclamation mark in
front of whatever that result is.

75
00:04:54.560 --> 00:04:59.930
And now, down on line 11, we have
a point free definition for isEven.

76
00:05:05.477 --> 00:05:07.820
&gt;&gt; Kyle Simpson: Is this
program point free?

77
00:05:07.820 --> 00:05:11.010
No, now we have a point
up here in this utility.

78
00:05:11.010 --> 00:05:12.590
Where args is passing through.

79
00:05:14.270 --> 00:05:19.150
The intent of point free style code is
not that there are no points at all.

80
00:05:19.150 --> 00:05:24.090
It is that most of your code doesn't have
points, because many times the points

81
00:05:24.090 --> 00:05:27.650
are unnecessary verbosity that
just confuses you visually.

82
00:05:29.020 --> 00:05:30.330
So it's not that there are no points,

83
00:05:30.330 --> 00:05:34.540
it's that we collect those points into
well known, established, provable,

84
00:05:34.540 --> 00:05:39.890
verifiable utilities, leaving the rest
of our code free of those points.

85
00:05:39.890 --> 00:05:41.640
That's what point-freestyle
is looking for.

86
00:05:43.180 --> 00:05:46.816
It's not really changing any of
the functionality of the program,

87
00:05:46.816 --> 00:05:50.512
it's just a stylistic choice that we make,
to try to make the style,

88
00:05:50.512 --> 00:05:53.152
the readability of the code
a little bit easier.

89
00:05:53.152 --> 00:05:56.653
A functional programmer will
recognize not, or rather negate.

90
00:05:56.653 --> 00:05:59.113
They know right off the bat
exactly what that's doing.

91
00:05:59.113 --> 00:06:01.217
It's gonna flip the parity of a predicate.

92
00:06:01.217 --> 00:06:02.320
I don't need to worry about that.

93
00:06:02.320 --> 00:06:03.500
I know what that does.

94
00:06:03.500 --> 00:06:05.020
I don't need to think about it,

95
00:06:05.020 --> 00:06:08.080
and I certainly don't need to
be confused by those points.

