WEBVTT

1
00:00:00.350 --> 00:00:03.460
&gt;&gt; Kyle Simpson: Our next
discussion is on immutability.

2
00:00:03.460 --> 00:00:08.310
Now this word immutability
is often taken to be

3
00:00:08.310 --> 00:00:11.120
meaning something that we don't mean here.

4
00:00:11.120 --> 00:00:14.766
And so I wanna clear up some confusion
around what is immutability.

5
00:00:14.766 --> 00:00:17.730
What does it mean to
the functional programming?

6
00:00:19.310 --> 00:00:20.760
When I say the word immutability,

7
00:00:20.760 --> 00:00:23.630
I bet at least some of you
thought of the const keyword.

8
00:00:23.630 --> 00:00:28.350
And that's where the misconceptions
can get a little bit out of hand.

9
00:00:28.350 --> 00:00:30.880
So I wanna talk about this for a minute.

10
00:00:30.880 --> 00:00:34.764
If I declare var x = 2,
like I'm doing on line 1, and

11
00:00:34.764 --> 00:00:39.299
then I say x++,
&gt;&gt; Kyle Simpson: What I'm really doing is

12
00:00:39.299 --> 00:00:43.583
not changing the value of 2, the way
most people would probably describe.

13
00:00:43.583 --> 00:00:47.570
What I'm actually doing is
reassigning x to a different value.

14
00:00:49.210 --> 00:00:51.140
Vars can be reassigned.

15
00:00:53.210 --> 00:00:57.240
If I try line 4, I declare a const y, and

16
00:00:57.240 --> 00:01:01.900
then I try line 5 to reassign the y.

17
00:01:01.900 --> 00:01:06.890
I get an error because reassignment
of a constant is not allowed.

18
00:01:06.890 --> 00:01:12.090
Now if I were to ask, if I were to pull
all of you, tell me what is a constant.

19
00:01:12.090 --> 00:01:14.070
Many times when I ask that question,

20
00:01:14.070 --> 00:01:17.090
the answer I get back is it's
a value that doesn't change.

21
00:01:19.290 --> 00:01:23.070
From a dictionary definition perspective,
that seems reasonable.

22
00:01:23.070 --> 00:01:26.507
But from a programming perspective that's
not what we mean when we say constant.

23
00:01:26.507 --> 00:01:30.876
When we use the word const what we
actually mean is nothing to do with

24
00:01:30.876 --> 00:01:31.664
the value.

25
00:01:31.664 --> 00:01:35.706
What we mean is the variable
itself can be reassigned.

26
00:01:37.515 --> 00:01:42.830
&gt;&gt; Kyle Simpson: In other words, the const
keyword is about assignment mutability or,

27
00:01:42.830 --> 00:01:46.030
in this case, assignment immutability.

28
00:01:48.413 --> 00:01:51.770
&gt;&gt; Kyle Simpson: So when a functional
programmer talks about immutability,

29
00:01:51.770 --> 00:01:55.009
are they really talking about
assignment immutability?

30
00:01:56.300 --> 00:01:59.020
I'm gonna make the case that
assignment immutability,

31
00:01:59.020 --> 00:02:05.380
that is what we get with the const
keyword, is almost, almost, irrelevant.

32
00:02:05.380 --> 00:02:06.840
It almost doesn't matter.

33
00:02:08.280 --> 00:02:13.090
There is a slight,
slight benefit to being able to say,

34
00:02:13.090 --> 00:02:15.950
in a variable,
this variable cannot be reassigned.

35
00:02:15.950 --> 00:02:19.142
I'm not gonna fully dig into this
cuz we cover this in another course

36
00:02:19.142 --> 00:02:20.663
the [INAUDIBLE] JS foundations.

37
00:02:20.663 --> 00:02:25.846
I've also covered in detail and
in many of my writings, blogs, and books.

38
00:02:25.846 --> 00:02:31.088
But assignment mutability is like
1% of the problem, because there's

39
00:02:31.088 --> 00:02:37.050
only a small portion of your code that
can actually change the variable.

40
00:02:37.050 --> 00:02:38.630
That can actually reassign it.

41
00:02:38.630 --> 00:02:42.480
If you use the const keyword inside
of a block that's ten lines long and

42
00:02:42.480 --> 00:02:46.540
you're program is a million lines long,
there's only nine other lines that

43
00:02:46.540 --> 00:02:50.790
could possibly reassign that variable
because const is blocked scope.

44
00:02:52.010 --> 00:02:57.500
So that other 9,999,000, whatever it
is number of code can't effect it.

45
00:02:59.144 --> 00:03:02.750
So assignment mutability there is actually
not a big deal cuz you can just see

46
00:03:02.750 --> 00:03:05.710
the ten lines and
know that it doesn't get reassigned.

47
00:03:05.710 --> 00:03:08.920
There's only a tiny benefit
to saying on line 1,

48
00:03:08.920 --> 00:03:11.030
I'm not gonna reassign it
on the very next line.

49
00:03:12.430 --> 00:03:17.170
But if we talk about immutability
from the perspective of the value,

50
00:03:17.170 --> 00:03:20.800
that's where things are a lot more
interesting and a lot more important.

51
00:03:20.800 --> 00:03:24.180
So I would argue in a functional
programmer insists that we have

52
00:03:24.180 --> 00:03:29.510
immutability, they rarely
are meaning assignment immutability.

53
00:03:29.510 --> 00:03:32.040
What they really mean
is value immutability.

54
00:03:33.090 --> 00:03:36.990
The const keyword doesn't
give us value immutability.

55
00:03:36.990 --> 00:03:40.927
As you can see when I declare z as
a cost and I put an array in it.

56
00:03:40.927 --> 00:03:45.800
An array is a mutable value,
it can be mutated.

57
00:03:47.240 --> 00:03:50.736
When I declare it with const, the only
thing that's disallowed is line 8.

58
00:03:50.736 --> 00:03:55.330
I can't reassign z, but
I can absolutely still mutate the value.

59
00:03:57.660 --> 00:04:01.305
So if you declare an array,
assign it with a const, and

60
00:04:01.305 --> 00:04:04.409
then pass that array somewhere,
guess what?

61
00:04:04.409 --> 00:04:06.670
Somebody can change that array.

62
00:04:07.750 --> 00:04:11.630
The fact that you declared it with a const
didn't give you any benefit whatsoever,

63
00:04:13.430 --> 00:04:15.440
cuz they can mutate
the contents of that array.

64
00:04:17.030 --> 00:04:20.330
Value mutability is a huge problem.

65
00:04:20.330 --> 00:04:24.710
When we pass around values by reference,
like we do in JavaScript arrays and

66
00:04:24.710 --> 00:04:27.130
objects, when we pass those around and

67
00:04:27.130 --> 00:04:31.670
anybody's free to mutate whatever
they want, that creates havoc.

68
00:04:31.670 --> 00:04:34.960
Or more specifically to what
we've taught in this course,

69
00:04:34.960 --> 00:04:38.810
it lowers your level of confidence as
to what any line of code is gonna do.

70
00:04:39.854 --> 00:04:41.960
When you pass in an array,

71
00:04:41.960 --> 00:04:44.660
you don't have very much confidence
that somebody's not gonna change it.

72
00:04:46.430 --> 00:04:47.090
Does that makes sense?

73
00:04:48.620 --> 00:04:51.602
The mutation of a value is a big deal.

74
00:04:51.602 --> 00:04:56.210
So it turns out if we'd like to increase
our confidence on the value mutation,

75
00:04:56.210 --> 00:04:58.850
the const keyword isn't
gonna do us any help at all.

76
00:04:58.850 --> 00:05:02.950
It is the potential to set those landmines
where people are gonna be confused,

77
00:05:02.950 --> 00:05:05.900
thinking it's making an immutable
value when it isn't.

78
00:05:05.900 --> 00:05:08.100
So its benefit is dubious at best.

79
00:05:08.100 --> 00:05:12.630
I would put it in the negative
category but at best, it's neutral.

80
00:05:12.630 --> 00:05:17.750
It's not really providing the help that it
wants, but there are things that do help.

81
00:05:17.750 --> 00:05:20.410
That const keyword is not helping here.

82
00:05:21.496 --> 00:05:24.970
That const keyword does not really help
me that much to tell me that these

83
00:05:24.970 --> 00:05:27.340
other six lines in this
block aren't gonna reassign.

84
00:05:28.770 --> 00:05:32.400
Is the const y really that
much more readable than

85
00:05:32.400 --> 00:05:35.050
the var x in the very next line?

86
00:05:35.050 --> 00:05:36.540
Neither one of them get reassigned.

87
00:05:37.690 --> 00:05:39.160
Does the const really help that much?

88
00:05:40.750 --> 00:05:41.384
It doesn't help that much.

89
00:05:41.384 --> 00:05:46.163
And it certainly doesn't help us with
z if we were to make z a const, and

90
00:05:46.163 --> 00:05:48.600
then pass that array in somewhere.

91
00:05:48.600 --> 00:05:52.370
It's not gonna help prevent
that array from being mutated.

92
00:05:52.370 --> 00:05:56.490
On the other hand, if we do wanna
make a value that is immutable,

93
00:05:56.490 --> 00:06:00.565
we have a built-in utility as
of ES5 called Object.freeze().

94
00:06:00.565 --> 00:06:03.640
That'll take an array or an object and
freeze all of its properties so

95
00:06:03.640 --> 00:06:06.035
that they're read-only,
they can't be changed.

96
00:06:06.035 --> 00:06:10.370
It'll freeze the object so you can't
add or remove properties from it.

97
00:06:10.370 --> 00:06:14.296
It effectively makes
a read-only data structure.

98
00:06:14.296 --> 00:06:17.598
It's shallow, it only works on
the top level of that object.

99
00:06:17.598 --> 00:06:22.570
So here, I have a nested array object
with 7,8,9, that one is still mutable.

100
00:06:23.900 --> 00:06:28.718
But as a nice, quick, and dirty way of
making myself a value that is itself

101
00:06:28.718 --> 00:06:34.006
immutable so that I can pass it somewhere
and have a higher degree of confidence,

102
00:06:34.006 --> 00:06:39.725
Object.freeze is a nice, straightforward
and fairly performant way of doing that.

103
00:06:41.595 --> 00:06:42.990
&gt;&gt; Kyle Simpson: There was a question?

104
00:06:42.990 --> 00:06:46.890
&gt;&gt; Speaker 2: I just have a quick personal
question for const, at least, and

105
00:06:46.890 --> 00:06:48.690
maybe it'll cover this, but

106
00:06:48.690 --> 00:06:55.010
do you think there's some value in using
const as a signal for readability?

107
00:06:55.010 --> 00:06:58.521
As saying hey, don't mutate this or

108
00:06:58.521 --> 00:07:00.838
is that just, I mean-
&gt;&gt; Kyle Simpson: So

109
00:07:00.838 --> 00:07:05.650
the question being asked is,
does const offer any benefit?

110
00:07:05.650 --> 00:07:11.100
I was kind of skating over it but
we can drill into this point.

111
00:07:11.100 --> 00:07:12.680
In this code snippet,

112
00:07:12.680 --> 00:07:16.160
is the const keyword actually helping
with the readability of this code?

113
00:07:17.260 --> 00:07:20.820
Is it actually helping you to know
that y is not gonna get reassigned on

114
00:07:20.820 --> 00:07:23.600
any of those other six lines of code?

115
00:07:23.600 --> 00:07:26.959
My point is I don't think it's
actually helping that much.

116
00:07:28.040 --> 00:07:31.890
Maybe you could squint at it and
say, well, it's sort of a little,

117
00:07:31.890 --> 00:07:32.800
tiny bit helpful.

118
00:07:33.810 --> 00:07:36.760
But it certainly has the precedent,
not just in JavaScript, but

119
00:07:36.760 --> 00:07:39.397
in every other language that's
ever had a const keyword.

120
00:07:39.397 --> 00:07:44.231
People have been confused that it creates
immutable values when actually it just

121
00:07:44.231 --> 00:07:46.860
creates immutable bindings.

122
00:07:46.860 --> 00:07:48.880
And that confusion is powerful.

123
00:07:48.880 --> 00:07:51.900
There are tens of thousands of
questions on Stack Overflow

124
00:07:51.900 --> 00:07:54.020
where people are frustrated
by this const keyword.

125
00:07:55.060 --> 00:07:59.930
So there's two things that you could
assert about const usage here.

126
00:07:59.930 --> 00:08:04.920
One thing that you could assert is that
the const is telling a future developer

127
00:08:04.920 --> 00:08:08.880
that may maintain or
modify this code, don't reassign y.

128
00:08:09.890 --> 00:08:11.420
That's one argument that I've heard made.

129
00:08:12.730 --> 00:08:15.640
I want us to play out that
scenario in our head.

130
00:08:15.640 --> 00:08:18.630
Let's say you've hired a new junior
developer onto the team, and

131
00:08:18.630 --> 00:08:21.470
you've told them to put a blue
button on the e-commerce page,

132
00:08:21.470 --> 00:08:24.150
and they show up with this piece of code.

133
00:08:24.150 --> 00:08:28.680
And somewhere on line 5 or 6, they changed
the value of y, and they run the program

134
00:08:28.680 --> 00:08:32.273
and they get an error, and
it says sorry, you can't reassign y.

135
00:08:32.273 --> 00:08:37.710
What are the odds that that person
is gonna say I have to completely

136
00:08:37.710 --> 00:08:43.237
rethink how I was gonna do this,
because I am not allowed to reassign y,

137
00:08:43.237 --> 00:08:48.325
versus going up to line 2 and
changing it from const to let or var.

138
00:08:50.210 --> 00:08:52.630
Which one of those two do you
think is a more likely scenario?

139
00:08:54.050 --> 00:08:57.370
There's nothing about const
that makes it set in stone.

140
00:08:57.370 --> 00:09:00.880
You could give the signal
please don't do that.

141
00:09:00.880 --> 00:09:04.910
But there's lots of other cultural and
societal ways that we can communicate

142
00:09:04.910 --> 00:09:09.970
intent besides having a keyword
that has potential confusion to it.

143
00:09:09.970 --> 00:09:14.620
You could have put a constant, I mean
a comment there that says don't change it.

144
00:09:14.620 --> 00:09:16.570
Really, really promise, don't change it.

145
00:09:17.820 --> 00:09:21.701
Now, the second thing that is
often asserted a lot const is,

146
00:09:21.701 --> 00:09:26.736
not that it prevents you from changing it,
but that it says I won't change it.

147
00:09:26.736 --> 00:09:31.170
It tells you what the author's intent was.

148
00:09:31.170 --> 00:09:33.170
Don't worry,
it's not gonna get reassigned.

149
00:09:34.310 --> 00:09:36.369
So, therefore,
when you start reading through it,

150
00:09:36.369 --> 00:09:39.415
you don't have to worry about why ever
being reassigned in that block of code?

151
00:09:39.415 --> 00:09:42.020
And that's what I was getting at earlier.

152
00:09:42.020 --> 00:09:43.690
Does that really help that much,

153
00:09:43.690 --> 00:09:47.159
because there's only a few lines of
code where it ever could be reassigned.

154
00:09:48.400 --> 00:09:53.840
And generally, you can quickly glance at
those lines and get the same information.

155
00:09:53.840 --> 00:09:57.350
If y does not show up on
the left-hand side of an equals,

156
00:09:57.350 --> 00:09:58.520
it's not getting reassigned.

157
00:09:59.890 --> 00:10:03.120
So I don't know that the const is
really actually adding anything.

158
00:10:04.320 --> 00:10:06.523
And if it is,
it's a very small amount at best.

159
00:10:09.468 --> 00:10:10.750
&gt;&gt; Kyle Simpson: That's my take.

160
00:10:10.750 --> 00:10:13.680
Others do that calculation differently,
but for me,

161
00:10:13.680 --> 00:10:16.660
the const keyword is not that helpful.

162
00:10:16.660 --> 00:10:17.953
Doesn't mean I don't use it, but

163
00:10:17.953 --> 00:10:20.057
I only use it when there's
already an immutable value.

164
00:10:20.057 --> 00:10:25.027
And I only use it when I'm specifically
saying something like const

165
00:10:25.027 --> 00:10:26.604
pi equals 3.14.

166
00:10:26.604 --> 00:10:29.540
Something that's clearly a constant.

167
00:10:29.540 --> 00:10:31.030
That's the only time I use that keyword.

168
00:10:32.480 --> 00:10:36.281
I do not declare mutable
values like arrays with const.

169
00:10:36.281 --> 00:10:38.090
I do not make functions with const.

170
00:10:38.090 --> 00:10:40.169
I don't do any of that stuff.

171
00:10:43.070 --> 00:10:45.863
&gt;&gt; Kyle Simpson: But the value mutability
part is the part I want us to focus on,

172
00:10:45.863 --> 00:10:49.361
because that's the part I think that's
much more important with functional

173
00:10:49.361 --> 00:10:50.081
programming.

174
00:10:51.120 --> 00:10:55.637
Now, what we're doing with Object.freeze
is ensuring that nobody will change it.

175
00:10:55.637 --> 00:10:58.708
But is that the important part?

176
00:10:58.708 --> 00:11:01.002
Is it really important that we make it so

177
00:11:01.002 --> 00:11:04.280
that it would be an error if
somebody tried to change it?

178
00:11:06.020 --> 00:11:07.669
Similarly to the const keyword.

179
00:11:09.000 --> 00:11:10.200
Is that the important part?

180
00:11:10.200 --> 00:11:13.540
Is it the prevention
part that's important?

181
00:11:13.540 --> 00:11:15.130
I don't think so.

182
00:11:15.130 --> 00:11:19.994
What I think is really important about,
for example, using Object.freeze on

183
00:11:19.994 --> 00:11:24.783
that array, is that I am signalling to
the reader of this code, don't worry,

184
00:11:24.783 --> 00:11:26.758
it can't possibly be changed.

185
00:11:29.650 --> 00:11:33.296
&gt;&gt; Kyle Simpson: It's adding to the level
of confidence that a reader of this code

186
00:11:33.296 --> 00:11:34.960
will have.

187
00:11:34.960 --> 00:11:37.000
That, I think,
is the most important benefit.

188
00:11:38.400 --> 00:11:42.799
So when I have an array that I wanna pass
into some other function, if I just pass

189
00:11:42.799 --> 00:11:47.215
it in as is, the reader of my code has to
be worried that somebody may change it.

190
00:11:47.215 --> 00:11:49.651
If I Object.freeze it
before passing it in,

191
00:11:49.651 --> 00:11:52.541
the reader of my code does
not have to have that worry.

192
00:11:52.541 --> 00:11:55.370
It's less for them to be concerned about.

193
00:11:56.460 --> 00:11:59.160
Makes the code easier to trust and prove.

194
00:12:06.026 --> 00:12:10.360
If you wanna do real, immutable data
structures, that is, you need data

195
00:12:10.360 --> 00:12:15.960
structures that will be able to not
only not be changed, but can be mutated

196
00:12:15.960 --> 00:12:21.240
overtime by creating duplicate copies of
themselves or at least acting that way.

197
00:12:21.240 --> 00:12:23.420
You're gonna want a real,
immutable data structure and

198
00:12:23.420 --> 00:12:25.470
there are libraries that provide these.

199
00:12:25.470 --> 00:12:27.970
Facebook has immutable JS.

200
00:12:27.970 --> 00:12:32.735
There's another one that's
provided called Mori, M-O-R-I.

201
00:12:32.735 --> 00:12:38.490
It's written by a guy named David Nolen
who's the maintainer of ClojureScript.

202
00:12:38.490 --> 00:12:42.840
So he's really into the functional stuff,
and he wrote this Mori library.

203
00:12:42.840 --> 00:12:45.171
There's several others out there as well,
so whichever one you like.

204
00:12:45.171 --> 00:12:49.927
This was just an illustration here
of using immutable JS to create

205
00:12:49.927 --> 00:12:53.220
an immutable array, AKA an immutable list.

206
00:12:53.220 --> 00:12:57.995
You'll notice that I have sate and
newState, because when I create that

207
00:12:57.995 --> 00:13:01.830
immutable list and
then try to use a new tater method on it,

208
00:13:01.830 --> 00:13:05.899
like .set on line 2,
it will store that value with the list,

209
00:13:05.899 --> 00:13:10.950
but it will not actually mutate
the thing that state is pointing at.

210
00:13:10.950 --> 00:13:15.830
Which is why, on line 4, these two
are entirely separate objects, state and

211
00:13:15.830 --> 00:13:16.920
newState will be different.

212
00:13:18.590 --> 00:13:21.500
Now just on its surface,
that might sound like a great thing.

213
00:13:21.500 --> 00:13:24.871
But it also might sound like it would
be super non-performant to have to

214
00:13:24.871 --> 00:13:27.413
clone the array any time we
wanna add something to it.

215
00:13:27.413 --> 00:13:32.530
And this is where the benefit of
immutable data structures comes in.

216
00:13:32.530 --> 00:13:37.550
Because under the covers, immutable JS
is not going to clone the entire array,

217
00:13:37.550 --> 00:13:39.950
they're gonna preserve the original list.

218
00:13:39.950 --> 00:13:42.990
And any time you make a change,
like we did on line 2,

219
00:13:42.990 --> 00:13:47.350
all they're gonna do is create a new
object that stores only the diff

220
00:13:47.350 --> 00:13:50.110
between what it originally was and
what it now is.

221
00:13:51.110 --> 00:13:55.900
Which is why on line, for
example, 6 when I ask.

222
00:13:55.900 --> 00:14:00.364
I'm sorry on line 9 and
line 10 when I ask for state.get 42.

223
00:14:00.364 --> 00:14:03.380
In the original one, it isn't present.

224
00:14:03.380 --> 00:14:04.750
But in the new one, it is.

225
00:14:05.795 --> 00:14:08.273
Because that diff has been
transparently under the covers.

226
00:14:10.055 --> 00:14:11.459
&gt;&gt; Kyle Simpson: Represented, but

227
00:14:11.459 --> 00:14:15.790
they didn't have to clone
the entire array to do that.

228
00:14:15.790 --> 00:14:17.761
It's actually a little bit like Git,

229
00:14:17.761 --> 00:14:21.037
if you know how the Git mechanism
works in any way shape or form.

230
00:14:21.037 --> 00:14:23.804
When you commit a new
thing to a code base,

231
00:14:23.804 --> 00:14:28.391
it doesn't recopy up all the files and
only copies up what change, so

232
00:14:28.391 --> 00:14:32.510
that you can always see
the current state of those files.

233
00:14:32.510 --> 00:14:34.630
That's kind of what's happening here.

234
00:14:34.630 --> 00:14:39.710
Under the covers, it only stores
the diff between the original list and

235
00:14:39.710 --> 00:14:40.550
this new list.

236
00:14:42.370 --> 00:14:46.710
And we can always, as we do on line 12,
we can always get back out a real array.

237
00:14:46.710 --> 00:14:49.900
If we, for some reason,
need a real array at some point.

238
00:14:49.900 --> 00:14:54.360
But storing things in an immutable data
structure is one very powerful way

239
00:14:54.360 --> 00:14:58.640
of ensuring that your state
changes are explicitly tracked,

240
00:14:58.640 --> 00:14:59.740
not implicitly tracked.

241
00:15:00.900 --> 00:15:04.110
Cuz you can imagine, if you pass an
immutable data structure into a function

242
00:15:04.110 --> 00:15:08.920
and they try to change it,
they'll be getting back a new copy

243
00:15:08.920 --> 00:15:11.289
of the data structure, but
it won't have affected you at all.

244
00:15:12.660 --> 00:15:18.250
So you won't be able to mutate it,
somebody else won't be able to mutate it.

245
00:15:18.250 --> 00:15:19.728
And if you want to mutate it,

246
00:15:19.728 --> 00:15:23.125
you'll have to explicitly create
newState like we do on line 2.

247
00:15:32.247 --> 00:15:35.710
&gt;&gt; Kyle Simpson: Immutable data
structures are very powerful, but

248
00:15:35.710 --> 00:15:39.550
they're also kind of
a heavyweight solution.

249
00:15:39.550 --> 00:15:43.410
So I would recommend, if your only goal
is to just freeze something, and it's

250
00:15:43.410 --> 00:15:47.385
not ever gonna change again, it's just
a list of values, you want to pass it in,

251
00:15:47.385 --> 00:15:50.917
and you want the reader of your code
to know that it's not gonna change.

252
00:15:50.917 --> 00:15:57.380
Just call Bbject.freeze cuz that's
a very simple fast performing systems.

253
00:15:57.380 --> 00:16:00.370
It's been around for
a really long time since ES5.

254
00:16:00.370 --> 00:16:05.375
If you need this full power of tracking
changes to a data structure overtime,

255
00:16:05.375 --> 00:16:08.457
use an immutable data
structure like this one.

256
00:16:16.066 --> 00:16:19.098
&gt;&gt; Kyle Simpson: There's
something even more important than

257
00:16:19.098 --> 00:16:21.807
what you pass in when you pass in a value,

258
00:16:21.807 --> 00:16:27.010
it's when you author a function that
can receive a value from somebody else.

259
00:16:29.081 --> 00:16:33.151
&gt;&gt; Kyle Simpson: [COUGH] Here I've made a
function that ostensibly its purpose is to

260
00:16:33.151 --> 00:16:36.560
take in an array and
double all the values in the array.

261
00:16:38.090 --> 00:16:43.290
If I alter this function this way,
I am creating a side effect

262
00:16:43.290 --> 00:16:47.250
cuz I am mutating the array that they
passed in using the array reference.

263
00:16:49.420 --> 00:16:51.010
This is a no, no.

264
00:16:51.010 --> 00:16:54.699
We do not want to mutate other
people's values as a side effect.

265
00:16:56.340 --> 00:17:01.077
So if I receive an array, I don't
know whether it's been frozen or not.

266
00:17:01.077 --> 00:17:05.320
I don't know if it's an immutable
data structure or not, but

267
00:17:05.320 --> 00:17:10.132
from the perspective of what I offer
on this code, I should assume that

268
00:17:10.132 --> 00:17:14.820
I'm not allowed to change it
regardless of whether I can change it.

269
00:17:14.820 --> 00:17:18.590
My treatment of somebody else's
value is just as important,

270
00:17:18.590 --> 00:17:21.230
if not more important,
is how they treat my values.

271
00:17:22.860 --> 00:17:26.900
My treatment of this list
value is incredibly important

272
00:17:26.900 --> 00:17:29.870
to creating easier to read and
verify code.

273
00:17:31.000 --> 00:17:33.144
So I shouldn't author my code that way,

274
00:17:33.144 --> 00:17:37.129
I should instead author it as assuming
I'm gonna have to create a new list.

275
00:17:39.796 --> 00:17:41.945
&gt;&gt; Kyle Simpson: And
I'm gonna double each value, but

276
00:17:41.945 --> 00:17:46.188
I'm gonna store the value in the new
list and not mutate the existing list.

277
00:17:48.136 --> 00:17:51.835
&gt;&gt; Kyle Simpson: You have to take care
to make sure that anytime you go to make

278
00:17:51.835 --> 00:17:56.817
a change to something, you don't make
a change to something in a way that it's

279
00:17:56.817 --> 00:18:00.390
going to create a side effect
that surprises somebody.

280
00:18:02.040 --> 00:18:04.040
That's how you increase
the readability and

281
00:18:04.040 --> 00:18:06.430
verifiability of the code
you are working with.

282
00:18:09.900 --> 00:18:13.520
To review here immutability.

283
00:18:13.520 --> 00:18:18.020
When somebody says that they could be
talking about assignment immutability or

284
00:18:18.020 --> 00:18:20.780
they could be talking
about value immutability.

285
00:18:21.950 --> 00:18:26.110
My argument is that value
immutability is far more important

286
00:18:26.110 --> 00:18:27.560
than assignment immutability.

287
00:18:28.570 --> 00:18:30.430
That's where you should
put your attention.

288
00:18:30.430 --> 00:18:36.915
If we're weighting them, it's like
1% the assignment and 99% the value.

289
00:18:36.915 --> 00:18:41.990
And the real reason for
that is that values are portable.

290
00:18:41.990 --> 00:18:46.900
A value passed somewhere can be passed
anywhere, because we pass by reference.

291
00:18:47.980 --> 00:18:50.282
An assignment, is local,
it is not portable.

292
00:18:50.282 --> 00:18:54.520
Nobody else can affect that assignment
other than that immediate code.

293
00:18:56.250 --> 00:18:58.536
So just by the virtue
of that characteristic,

294
00:18:58.536 --> 00:19:01.007
the value mutability is
the much bigger concern.

