WEBVTT

1
00:00:00.370 --> 00:00:03.200
&gt;&gt; Kyle Simpson: So
what we just described was, and

2
00:00:03.200 --> 00:00:07.030
what we just walked through with
exercise seven was a series of steps.

3
00:00:07.030 --> 00:00:12.614
Where we had these methods that were
producing an iteration across the list and

4
00:00:12.614 --> 00:00:14.314
doing something to it.

5
00:00:14.314 --> 00:00:18.074
And then that produced a new list,
and we iterated over that list, and

6
00:00:18.074 --> 00:00:21.532
then that produced a list, and
then we iterated over that list.

7
00:00:21.532 --> 00:00:25.099
As you start modeling more of
your code around list operations,

8
00:00:25.099 --> 00:00:28.006
you end up oftentimes coming up with,
for example,

9
00:00:28.006 --> 00:00:33.440
three different map functions adjacent
to each other in a chain of operations.

10
00:00:33.440 --> 00:00:39.586
And if we look at that list of map calls,
the map(add1), map(mul2),

11
00:00:39.586 --> 00:00:44.690
and map(div3),
the good part about it is it's very clear.

12
00:00:44.690 --> 00:00:47.520
Step one is to add 1 to each of the items.

13
00:00:47.520 --> 00:00:49.300
Step two is to multiple them by 2.

14
00:00:49.300 --> 00:00:53.960
Step three is to divide them by 3,
that part is very clear.

15
00:00:53.960 --> 00:00:59.530
But the part that can be
potentially negative here,

16
00:00:59.530 --> 00:01:03.910
is a performance aspect, because we're
looping over the entire list every time.

17
00:01:05.130 --> 00:01:07.730
If that was a big list
that could be a problem.

18
00:01:07.730 --> 00:01:11.980
But there's a deeper problem
here which is even less obvious,

19
00:01:11.980 --> 00:01:16.090
which is that we're creating a whole
new intermediary array every time.

20
00:01:16.090 --> 00:01:18.140
So now we're gonna be,
if that list was large,

21
00:01:18.140 --> 00:01:21.640
we'd be tripling the size of
our memory usage just because

22
00:01:21.640 --> 00:01:25.060
every time we produce a mapping,
we've produced a new array.

23
00:01:25.060 --> 00:01:27.876
These aren't mutating
our same array in place.

24
00:01:29.220 --> 00:01:33.030
&gt;&gt; Kyle Simpson: For that reason, for
performance and memory usage reasons,

25
00:01:33.030 --> 00:01:37.960
and also just from the perspective of,
there's some repetition here.

26
00:01:37.960 --> 00:01:40.590
I'm having to repeat a .map call over and
over.

27
00:01:40.590 --> 00:01:42.307
We could ask ourselves,

28
00:01:42.307 --> 00:01:46.980
is there some way that I could may
be express that as single map call?

29
00:01:46.980 --> 00:01:50.340
Which is exactly what that question
a little while ago was asking,

30
00:01:50.340 --> 00:01:52.940
is there some way to
compose these together?

31
00:01:52.940 --> 00:01:57.017
We'll let's think about the shape of add1,
mul2 and div3.

32
00:01:57.017 --> 00:02:01.387
They each take a value in,
do some transformation on it, and

33
00:02:01.387 --> 00:02:03.710
return a value of like kind out.

34
00:02:06.040 --> 00:02:12.161
Does that shape sound compatible for
those functions to compose together?

35
00:02:12.161 --> 00:02:13.144
&gt;&gt; Speaker 2: Yep.

36
00:02:13.144 --> 00:02:19.451
&gt;&gt; Kyle Simpson: Yep, so fusion is when we
take a series of adjacent list operations,

37
00:02:19.451 --> 00:02:25.920
whether they're methods or
just actual standalone function calls.

38
00:02:25.920 --> 00:02:29.980
Take a series of list operations,
and compose those utilities

39
00:02:29.980 --> 00:02:34.520
into a single operator, and
then run that once across the list.

40
00:02:34.520 --> 00:02:36.490
In general, that's what fusion is called.

41
00:02:36.490 --> 00:02:40.320
And when those operator
functions have the same shape,

42
00:02:40.320 --> 00:02:42.630
compose is all we need
to do to do the fusion.

43
00:02:44.590 --> 00:02:48.879
So if I had a compose utility that
could take any number of operations,

44
00:02:48.879 --> 00:02:54.010
any number of functions, rather,
then we could just simply call compose.

45
00:02:54.010 --> 00:02:56.640
Remember, compose works right to left, so

46
00:02:56.640 --> 00:03:01.145
we'd have to list add1 on the right, so
we'd have to list them in reverse order.

47
00:03:01.145 --> 00:03:04.680
We'd have to say compose div3,
mul2, add 1, or

48
00:03:04.680 --> 00:03:08.240
we'd have to use pipe if we
wanted to go in this order.

49
00:03:08.240 --> 00:03:12.573
But I wanna push this even one step
further and say, you might remember,

50
00:03:12.573 --> 00:03:15.201
early in the class, we had a compose2, and

51
00:03:15.201 --> 00:03:19.310
compose2 could only compose
two functions together.

52
00:03:19.310 --> 00:03:22.810
So what if that's all we had, what if
we didn't have the general compose?

53
00:03:22.810 --> 00:03:25.700
And we only had something that could
compose two functions together.

54
00:03:27.280 --> 00:03:31.020
Well, if we want to compose
a list of functions, and

55
00:03:31.020 --> 00:03:35.670
all we have is a function that
can take two values together,

56
00:03:35.670 --> 00:03:38.590
do we know about a list operation
that helps with things like that?

57
00:03:39.620 --> 00:03:40.260
&gt;&gt; Speaker 2: Reduce.

58
00:03:40.260 --> 00:03:40.869
&gt;&gt; Kyle Simpson: Reduce.

59
00:03:41.980 --> 00:03:45.850
Reduce takes a function that's
shaped where it takes two things and

60
00:03:45.850 --> 00:03:49.870
makes them into one,
reduce can do that across a list.

61
00:03:49.870 --> 00:03:54.180
So if only had a composeRight utility
that could only do two of them,

62
00:03:54.180 --> 00:03:57.570
we could represent that
composition as a reduction.

63
00:03:59.110 --> 00:04:03.731
So I can take that list of functions,
[div3, mul2, add1],

64
00:04:03.731 --> 00:04:08.599
call a reduce on them with the
composeRight utility to create my single

65
00:04:08.599 --> 00:04:13.324
composed mapper function that I
then run across the list just once.

66
00:04:19.867 --> 00:04:23.451
&gt;&gt; Kyle Simpson: Part of becoming
a functional programmer is developing

67
00:04:23.451 --> 00:04:26.660
the instincts to ask
questions like I just asked.

68
00:04:26.660 --> 00:04:30.310
Wait a minute, what if all I have
is the compose of two utilities,

69
00:04:30.310 --> 00:04:32.190
what does that look like?

70
00:04:32.190 --> 00:04:35.350
I recognize that's a reduction,
that's a reduce.

71
00:04:35.350 --> 00:04:39.751
And that again is why I said earlier
that reduce is our Swiss Army knife.

72
00:04:39.751 --> 00:04:41.837
And when we ask this question,
we end up saying wow,

73
00:04:41.837 --> 00:04:44.060
I can solve that with reduce and
I can solve that with reduce.

74
00:04:45.820 --> 00:04:49.240
Or I can solve that with composition,
or I can solve that with currying.

75
00:04:49.240 --> 00:04:53.280
You just wanna start to develop that
instinct to say, what do I need here?

76
00:04:53.280 --> 00:04:54.950
I know what that looks like,
this is what I need.

77
00:04:57.140 --> 00:04:59.980
So that's fusion, and it works well

78
00:04:59.980 --> 00:05:04.840
when the shape of those adjacent
operators is compatible.

79
00:05:06.270 --> 00:05:11.430
But if we had a map, a filter, and
a reduce sitting next to each other,

80
00:05:11.430 --> 00:05:15.400
the shapes aren't compatible,
like was just asked about in our exercise.

81
00:05:15.400 --> 00:05:18.740
Those shapes aren't compatible, so
if we wanted to do fusion there,

82
00:05:18.740 --> 00:05:20.670
we gonna need a more
sophisticated technique.

83
00:05:21.740 --> 00:05:24.350
And that sophisticated technique
is called transducing.

