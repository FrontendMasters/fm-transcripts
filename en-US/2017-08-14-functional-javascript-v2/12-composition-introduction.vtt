WEBVTT

1
00:00:00.610 --> 00:00:02.914
&gt;&gt; Kyle: All right,
our next discussion point,

2
00:00:02.914 --> 00:00:05.640
our next unit to discuss
is composition [COUGH].

3
00:00:06.720 --> 00:00:10.135
I think composition really
deserves its place as one

4
00:00:10.135 --> 00:00:14.877
of the core foundational principles
of all of functional programming.

5
00:00:14.877 --> 00:00:18.786
And the reason for that, I'll take a step
back and say, I eluded to earlier when we

6
00:00:18.786 --> 00:00:22.740
were talking about why functional
programming, what is the purpose.

7
00:00:22.740 --> 00:00:25.271
The purpose in my mind for
functional programming,

8
00:00:25.271 --> 00:00:28.731
beyond just the fact that we wanna
improve the readability of our code.

9
00:00:28.731 --> 00:00:34.380
The real purpose is to
declaratively state in our code,

10
00:00:34.380 --> 00:00:38.597
what the path of data transformation is.

11
00:00:38.597 --> 00:00:43.741
Any piece of data, as it goes through the
different steps, we want to make that path

12
00:00:43.741 --> 00:00:49.170
and the steps that are gonna be preformed
along that path as obvious as possible.

13
00:00:49.170 --> 00:00:51.500
And composition is really
at the heart of that.

14
00:00:51.500 --> 00:00:55.780
Because composition fundamentally is gonna
say, how do I take a function, give it

15
00:00:55.780 --> 00:01:00.750
some input, whatever it's output is, make
that be the input to another function.

16
00:01:00.750 --> 00:01:04.700
And whatever that output is, the input to
another so you can see there's a flow of

17
00:01:04.700 --> 00:01:09.579
data in a function, out of a function,
and a function out of a function.

18
00:01:09.579 --> 00:01:12.422
I wanna give you a running metaphor
that we'll used to describe

19
00:01:12.422 --> 00:01:13.054
composition [COUGH].

20
00:01:15.540 --> 00:01:19.300
And I'll set it up first with code and
then, we'll get in to that metaphor.

21
00:01:20.300 --> 00:01:23.640
So here I have a function called
sum which takes an x and a y and

22
00:01:23.640 --> 00:01:25.030
a mult that takes x and y.

23
00:01:25.030 --> 00:01:28.090
And they do,
their obvious respective mathematic work.

24
00:01:28.090 --> 00:01:31.361
But I want you to focus on
the bottom lines 9, 10 and 11.

25
00:01:32.767 --> 00:01:37.447
&gt;&gt; Kyle: [COUGH] Specifically, on line
10 we are calling mult with that 3 and

26
00:01:37.447 --> 00:01:40.519
4 value, getting an intermediary result.

27
00:01:40.519 --> 00:01:43.376
And then taking that intermediary
result with some other input and

28
00:01:43.376 --> 00:01:45.720
passing that into the sum function.

29
00:01:45.720 --> 00:01:49.290
Obviously, this is a foo bar
baz kind of an example because

30
00:01:49.290 --> 00:01:51.930
who would ever use a sum
in a mult function?

31
00:01:51.930 --> 00:01:55.430
But what I want you to think in your
brain is, not the foo bar baz thing but

32
00:01:55.430 --> 00:02:00.810
think to your application,
that this would be doing some reasonable

33
00:02:00.810 --> 00:02:03.790
mildly complex set of computations.

34
00:02:03.790 --> 00:02:06.700
Say for example, calculating
the international shipping rate for

35
00:02:06.700 --> 00:02:07.330
some product.

36
00:02:09.050 --> 00:02:15.382
And there might be multiple steps involved
in the calculation for that shipping rate.

37
00:02:15.382 --> 00:02:19.025
And so we see those multiple steps here,
we see that mult is the first step

38
00:02:19.025 --> 00:02:21.619
of calculating the international
shipping rate.

39
00:02:21.619 --> 00:02:25.482
And then we take that and we give it
some more input, and then we end up,

40
00:02:25.482 --> 00:02:29.940
eventually, calculating 17 represents
the international shipping rate for

41
00:02:29.940 --> 00:02:31.070
whatever product.

42
00:02:34.070 --> 00:02:39.080
Takeaway here is that that code,
lines 10 and 11, are highly imperative.

43
00:02:39.080 --> 00:02:43.680
That code is telling us how to calculate
the international shipping rate.

44
00:02:43.680 --> 00:02:48.410
It doesn't tell us that the international
shipping rate is calculated.

45
00:02:48.410 --> 00:02:52.220
So when we look at it we have
to figure that port it out.

46
00:02:52.220 --> 00:02:53.990
And you could put a code comment there.

47
00:02:53.990 --> 00:02:58.340
But that's just a poor way of saying,
this is not that declarative.

48
00:02:58.340 --> 00:03:00.929
It's much more imperative in its nature.

49
00:03:06.124 --> 00:03:07.305
&gt;&gt; Kyle: So metaphorically,

50
00:03:07.305 --> 00:03:10.920
I want you to imagine that we
are the engineers in a candy factory.

51
00:03:12.010 --> 00:03:18.927
And we have created this assembly line of,
&gt;&gt; Kyle: Steps

52
00:03:18.927 --> 00:03:23.972
that we go through from pouring in
the melted chocolate here on the front

53
00:03:23.972 --> 00:03:28.444
end of this which then cools it
into these chunks of chocolate.

54
00:03:28.444 --> 00:03:32.734
And then those chunks of chocolate go
into the next machine in the middle which

55
00:03:32.734 --> 00:03:35.382
slices them up into small
pieces of chocolate.

56
00:03:35.382 --> 00:03:40.027
And the small pieces of chocolate go
into another machine that wraps them up

57
00:03:40.027 --> 00:03:42.544
in candy wrappers to drop into the back.

58
00:03:42.544 --> 00:03:46.880
So there's three steps that are being
performed and what you should see here

59
00:03:46.880 --> 00:03:51.502
visually is that the output of one machine
becomes the input to another machine.

60
00:03:51.502 --> 00:03:54.629
And they just rumble along
the conveyor belts to do that.

61
00:03:57.764 --> 00:04:01.151
&gt;&gt; Kyle: So the manager of this
candy factory comes to us and says,

62
00:04:01.151 --> 00:04:03.065
well that's all well and good.

63
00:04:03.065 --> 00:04:06.355
I appreciate the fact that you've
got the machines working but

64
00:04:06.355 --> 00:04:10.890
it takes up an awful lot of
space on the factory floor.

65
00:04:10.890 --> 00:04:15.600
And we would like to make more candy we'd
like to have more machines running so

66
00:04:15.600 --> 00:04:17.780
we can spit more candy out quicker.

67
00:04:17.780 --> 00:04:22.000
So could you engineer go and figure out
another way to orient these thing so

68
00:04:22.000 --> 00:04:23.990
that we're not taking up so much space?

69
00:04:23.990 --> 00:04:27.970
It seems like those conveyor belts
are awfully wasteful in terms of space.

70
00:04:29.760 --> 00:04:31.530
So you're the engineer
of the candy factory.

71
00:04:31.530 --> 00:04:37.538
You begin to think, what could I do
that could make that take up less space?

72
00:04:39.400 --> 00:04:42.720
&gt;&gt; Kyle: Back to the code,
we could observe the same thing.

73
00:04:42.720 --> 00:04:47.404
If that intermediary step that we
calculated, the multiplication of 3 and

74
00:04:47.404 --> 00:04:52.541
4 Instead of assigning that to a variable
and taking up space in our code visually.

75
00:04:52.541 --> 00:04:55.725
We could just simply take
the output of that function all and

76
00:04:55.725 --> 00:04:58.980
make it directly one of the inputs
to another function call.

77
00:05:00.800 --> 00:05:02.730
No need for that intermediary variable.

78
00:05:05.520 --> 00:05:10.000
In the same way, the engineer at
the candy factory might say, well,

79
00:05:10.000 --> 00:05:10.700
I know what we could do.

80
00:05:10.700 --> 00:05:13.960
We could just stack those
machines on top of each other.

81
00:05:13.960 --> 00:05:15.650
No need for the conveyor belt.

82
00:05:15.650 --> 00:05:18.540
Literally just stack them on top of
each other and let the candy pouring

83
00:05:18.540 --> 00:05:22.770
at the top, cool as it drops, it drops
right in the machine that slices it,

84
00:05:22.770 --> 00:05:27.100
which then drops right in the machine
that wraps up the candies.

85
00:05:27.100 --> 00:05:28.100
No need for the conveyor belt.

86
00:05:28.100 --> 00:05:32.080
So now we have a bunch more of
these on the factory floor,

87
00:05:32.080 --> 00:05:33.290
we can get more work done.

88
00:05:35.170 --> 00:05:37.090
So you tell your boss,
that's our solution.

89
00:05:37.090 --> 00:05:39.890
And the boss is like, great,
good solution, thanks very much.

90
00:05:44.500 --> 00:05:49.774
Now, few months later the boss at the
candy factory is like this is all well and

91
00:05:49.774 --> 00:05:54.729
good but we are getting some complaints
from the factory workers because

92
00:05:54.729 --> 00:05:57.102
these machines are all separate.

93
00:05:57.102 --> 00:05:59.558
And they all have individual on and
off buttons and

94
00:05:59.558 --> 00:06:02.280
the wires are all hanging
out all over the place.

95
00:06:02.280 --> 00:06:07.570
It's not a very nice clean way for
us to work in our candy factory.

96
00:06:07.570 --> 00:06:12.680
Could you just make one machine
that does all three of these steps?

97
00:06:12.680 --> 00:06:17.310
I don't care what happens on the inside
but they just want one machine,

98
00:06:17.310 --> 00:06:20.030
one nice clean box where
they press the on button,

99
00:06:20.030 --> 00:06:22.800
pour in the chocolate out
spits the wrapped candies.

100
00:06:25.320 --> 00:06:27.140
So you could say to yourself,
what I'm gonna do,

101
00:06:27.140 --> 00:06:30.010
I'm gonna make a calculate
international shipping rate function.

102
00:06:31.270 --> 00:06:35.290
And I will pass in those inputs,
and under the covers, on line 10,

103
00:06:35.290 --> 00:06:36.820
we're gonna do all of that work.

104
00:06:36.820 --> 00:06:38.720
We're gonna do the multiplication and
the summing,

105
00:06:38.720 --> 00:06:41.550
and we'll just spit out the output.

106
00:06:41.550 --> 00:06:46.711
So now down on line 14, that code is a bit
more declarative cuz that code is saying,

107
00:06:46.711 --> 00:06:49.343
calculate international shipping rate.

108
00:06:49.343 --> 00:06:52.855
And on line 14, we don't really
care how it does what it does,

109
00:06:52.855 --> 00:06:55.150
we just care that it calculates the rate.

110
00:06:56.540 --> 00:06:57.398
On line 10,

111
00:06:57.398 --> 00:07:02.191
we can see how it does that work if that's
something that's interesting to us.

112
00:07:04.258 --> 00:07:08.433
&gt;&gt; Kyle: This is abstraction but
I wanna point out back to our earlier

113
00:07:08.433 --> 00:07:12.870
discussion at the beginning of
the course about abstraction.

114
00:07:12.870 --> 00:07:17.497
I wanna point out that the purpose of
me putting that in a function is not

115
00:07:17.497 --> 00:07:21.981
what most people would think which is,
I wanna write dry code.

116
00:07:21.981 --> 00:07:23.840
We've heard of dry D-R-Y
don't repeat yourself.

117
00:07:23.840 --> 00:07:28.000
Many people think, well that's
why you stick in that function.

118
00:07:28.000 --> 00:07:30.860
That way I can call that
as many times as I need to.

119
00:07:30.860 --> 00:07:34.360
Even if there was only
one call to this code,

120
00:07:34.360 --> 00:07:36.890
we would still wanna put in this function.

121
00:07:36.890 --> 00:07:40.170
So our motivation should not be,
I wanna write dry code.

122
00:07:40.170 --> 00:07:44.020
As a matter of fact,
I have often times run across

123
00:07:44.020 --> 00:07:46.950
cases where in functional programming
you want to repeat yourself.

124
00:07:48.670 --> 00:07:53.560
So it's not necessarily the case that
reducing repetition is our motivation.

125
00:07:55.170 --> 00:07:59.070
The real purpose of the abstraction
here is, as I said earlier,

126
00:07:59.070 --> 00:08:01.940
to create that semantic boundary.

127
00:08:01.940 --> 00:08:05.473
Between the what and the how.

128
00:08:05.473 --> 00:08:09.591
There's now a boundary between
the what and the how and on line 14,

129
00:08:09.591 --> 00:08:12.100
all I need to focus on is the what.

130
00:08:12.100 --> 00:08:15.126
I don't care how you
calculate the shipping array,

131
00:08:15.126 --> 00:08:17.612
I just care that I have
the shipping array.

132
00:08:17.612 --> 00:08:22.698
And then I'm gonna go do something useful
business logic wise with that computation.

133
00:08:22.698 --> 00:08:26.894
On line 10 to be honest with you I don't
care what you gonna do with the value.

134
00:08:26.894 --> 00:08:29.890
The only thing I'm focused about
on line 10 is how to do it.

135
00:08:31.130 --> 00:08:34.573
Those are both equally
important things but

136
00:08:34.573 --> 00:08:38.303
I should be able reason
about them separately.

137
00:08:38.303 --> 00:08:40.950
Creating a function boundary here and

138
00:08:40.950 --> 00:08:45.259
obstruction in such that semantic
boundary between the two.

139
00:08:47.120 --> 00:08:50.513
That is the purpose of abstraction.

140
00:08:50.513 --> 00:08:53.171
Now we built that multAndSum
function that calculate

141
00:08:53.171 --> 00:08:56.440
international shipping
rate function if you will.

142
00:08:56.440 --> 00:09:01.281
And then somewhere else in the code we had
to go build another one of those machines,

143
00:09:01.281 --> 00:09:03.923
and then another one,
and then another one.

144
00:09:03.923 --> 00:09:09.050
So basically we're building all of
these bespoke one-off machines.

145
00:09:09.050 --> 00:09:13.151
Back to the candy factory, the engineer
at the candy factory says well,

146
00:09:13.151 --> 00:09:16.244
I know what I can do,
I can just wrap up the big old box and

147
00:09:16.244 --> 00:09:19.961
if you screen closely you'll see
the machines are on the inside.

148
00:09:19.961 --> 00:09:22.230
They are all actually inside there.

149
00:09:22.230 --> 00:09:27.121
But on the outside we just have this nice
little clean box, with a single on-off

150
00:09:27.121 --> 00:09:32.158
switch control panel, a opening in the top
for us to poor in the melted chocolate,

151
00:09:32.158 --> 00:09:35.828
an opening in the bottom where
out spits the wrapped candy.

152
00:09:35.828 --> 00:09:39.000
We hide all the wires, and
all that other unnecessary.

153
00:09:39.000 --> 00:09:42.672
So you make one of those, and
you put it on the factory floor and

154
00:09:42.672 --> 00:09:45.436
all the factory workers
are much happier now.

155
00:09:45.436 --> 00:09:47.299
Great, that's awesome,

156
00:09:47.299 --> 00:09:53.020
we've got a nice easy interface to
work with this box, this function.

157
00:09:53.020 --> 00:09:56.935
And then, the next candy that you make
a different one of those and you make

158
00:09:56.935 --> 00:10:00.932
a different one of those boxes and
then a different one and a different one.

159
00:10:00.932 --> 00:10:04.485
And every time you have to do that,
that work is very manual, so

160
00:10:04.485 --> 00:10:08.570
it takes you sitting down and
wiring all of those things together.

161
00:10:08.570 --> 00:10:13.011
And at some point, you've made enough
different ones of those that the boss of

162
00:10:13.011 --> 00:10:17.135
the candy factory is like, isn't
there like some way to automate this?

163
00:10:17.135 --> 00:10:21.635
Isn't there some way where we could
just like put a bunch of machines in and

164
00:10:21.635 --> 00:10:24.845
out spits the machine like
this is a common pattern.

165
00:10:24.845 --> 00:10:29.139
We always wire machines together, why do
you have to do this work so manually?

166
00:10:32.310 --> 00:10:34.357
&gt;&gt; Kyle: And so it is with our code.

167
00:10:34.357 --> 00:10:38.855
We look at that pattern that we saw in
our previous code where we are taking one

168
00:10:38.855 --> 00:10:43.030
function's output and
making it an input to another function.

169
00:10:43.030 --> 00:10:48.266
We can codify that into a pattern and
that pattern happens to have a name

170
00:10:48.266 --> 00:10:54.317
in functional programming called Pipe,
this is called Function Composition.

171
00:10:54.317 --> 00:10:58.606
When we take function one and
we execute it and then that output becomes

172
00:10:58.606 --> 00:11:02.399
the input to function two,
that's exactly what we see here.

173
00:11:02.399 --> 00:11:06.776
We see function one being
called with arg1 and arg2,

174
00:11:06.776 --> 00:11:11.739
its output plus arg3 is the input
to function 2 on line 11.

175
00:11:11.739 --> 00:11:17.020
So it's the same thing that we were doing
manually on the previous code snippet but

176
00:11:17.020 --> 00:11:19.481
now we've got a repeatable utility.

177
00:11:19.481 --> 00:11:23.620
We have in essence,
a machine making machine.

178
00:11:25.350 --> 00:11:30.327
The input to pipe2 is not candy.

179
00:11:30.327 --> 00:11:34.390
The input to pipe2 is candy machines.

180
00:11:34.390 --> 00:11:38.031
The function themselves
are the things being operator on.

181
00:11:38.031 --> 00:11:41.809
There's a fancy term for
this in functional programming,

182
00:11:41.809 --> 00:11:44.310
it's called a Higher Order Function.

183
00:11:45.780 --> 00:11:52.238
A Higher Order Function is a function
that either or both takes one or

184
00:11:52.238 --> 00:11:58.368
more functions as inputs and/or
makes a function as an output.

185
00:11:58.368 --> 00:12:02.310
If it does either or both of those things,
it's a higher order function.

186
00:12:02.310 --> 00:12:09.826
It is to carry our metaphor forward,
a machine making machine.

187
00:12:09.826 --> 00:12:14.614
So now the boss says, hey, can you just
make me a machine where I just throw some

188
00:12:14.614 --> 00:12:18.970
machines in the top and it does the magic,
it wires them all together and

189
00:12:18.970 --> 00:12:23.230
out pops my little single box machine
ready to do what I need it do.

190
00:12:23.230 --> 00:12:27.554
That way, any time we come up with some
new combination of candy we wanna make,

191
00:12:27.554 --> 00:12:30.451
we just throw the machines in and
out pops a machine.

192
00:12:30.451 --> 00:12:31.850
Can you build that for me?

193
00:12:33.790 --> 00:12:37.323
&gt;&gt; Kyle: Being the creative enterprising
engineer you are, you say sure,

194
00:12:37.323 --> 00:12:39.039
anything can be accomplished.

195
00:12:39.039 --> 00:12:40.810
I can make a machine making machine.

196
00:12:42.930 --> 00:12:45.169
Are you following where we're at now?

197
00:12:45.169 --> 00:12:49.780
Because now the input to this
big machine is other machines.

198
00:12:51.020 --> 00:12:54.547
And of course, we could keep
going as high as we wanted to.

199
00:12:54.547 --> 00:12:56.879
We could say, take that machine and

200
00:12:56.879 --> 00:13:01.633
have it built by some other machine-making
machine and on and on and on.

201
00:13:01.633 --> 00:13:05.930
Of course, that stretches
the ridiculousness of the metaphor.

202
00:13:07.220 --> 00:13:10.863
But hopefully, you're starting to see
that higher order functions are really at

203
00:13:10.863 --> 00:13:13.524
the heart of how we do anything
in functional programming.

204
00:13:13.524 --> 00:13:17.436
We start to think about stuff, not just
as operating on a single piece of data

205
00:13:17.436 --> 00:13:21.510
like a number, but operations on
functions producing other functions.

206
00:13:21.510 --> 00:13:24.877
We've already seen several examples
of higher order functions.

207
00:13:24.877 --> 00:13:28.655
The unary function that we looked at,
it took a function in and

208
00:13:28.655 --> 00:13:33.234
gave us another function out that
restricted its input to a single argument

209
00:13:33.234 --> 00:13:36.270
that's a machine making machine.

210
00:13:36.270 --> 00:13:40.499
Binary took a machine and made another
machine, that's a machine making machine.

211
00:13:40.499 --> 00:13:44.594
As a matter of fact, virtually everything
you do in functional programming is

212
00:13:44.594 --> 00:13:48.940
the usage of utility where that
utility is a machine making machine.

213
00:13:48.940 --> 00:13:53.191
Higher order functions are at
a heart of everything we do.

214
00:13:53.191 --> 00:13:57.661
In this particular arrangement
of those higher order functions,

215
00:13:57.661 --> 00:14:00.260
is what we call Composition.

216
00:14:00.260 --> 00:14:03.519
Taking the output of one and
making it the input of another.

217
00:14:06.510 --> 00:14:11.019
&gt;&gt; Kyle: So I made that pipe utility
that took the first function, called it,

218
00:14:11.019 --> 00:14:13.521
passed in the input to the second one.

219
00:14:16.270 --> 00:14:23.614
&gt;&gt; Kyle: If we look at that code, it
looked like this, it looked like line one.

220
00:14:23.614 --> 00:14:28.710
Conceptually speaking, if we were to talk
about the composition of baz, bar and foo.

221
00:14:28.710 --> 00:14:33.370
It would be that we call baz first,
we passing that input and

222
00:14:33.370 --> 00:14:39.538
then its output becomes the input to bar
whose output becomes the input to foo.

223
00:14:39.538 --> 00:14:44.499
To express that with a typical functional
programming utility like compose,

224
00:14:44.499 --> 00:14:48.110
we would listed as foo,
bar, baz in that order.

225
00:14:48.110 --> 00:14:52.582
Now, I want you to look at line three and
compare that to line one.

226
00:14:52.582 --> 00:14:57.049
You'll notice that the foo, bar,
baz are listed in the same order visually,

227
00:14:57.049 --> 00:14:58.600
left to right.

228
00:14:58.600 --> 00:15:03.134
But what is the execution order of foo,
bar, baz?

229
00:15:03.134 --> 00:15:07.023
Which one runs first?

230
00:15:07.023 --> 00:15:07.841
&gt;&gt; Speaker 2: Baz.

231
00:15:07.841 --> 00:15:08.656
&gt;&gt; Kyle: Baz.

232
00:15:08.656 --> 00:15:12.212
So it actually executes right to
left instead of left to right.

233
00:15:14.230 --> 00:15:19.465
&gt;&gt; Kyle: The reason, one of the reasons
the compose utility takes it's items,

234
00:15:19.465 --> 00:15:23.912
takes it machines in right to
left order is because it matches

235
00:15:23.912 --> 00:15:28.292
the order that you would write
them in code, left to right.

236
00:15:28.292 --> 00:15:31.116
So if you're replacing
line one with line three,

237
00:15:31.116 --> 00:15:34.690
you list them in the exact same order,
and that is convenient.

238
00:15:36.310 --> 00:15:37.545
But on the other hand,

239
00:15:37.545 --> 00:15:41.327
now you have to think to yourself
the execution is in the other order.

240
00:15:41.327 --> 00:15:45.650
And sometimes it's easier to think about
not that order I would list things in, but

241
00:15:45.650 --> 00:15:47.891
the order that they're gonna execute in.

242
00:15:49.200 --> 00:15:53.451
So if you wanted to list them left
to right in order of execution,

243
00:15:53.451 --> 00:15:57.880
that would be the pipe utility,
where we list baz, bar, and foo.

244
00:15:57.880 --> 00:16:01.712
Baz runs first, then bar runs,
and then foo runs.

245
00:16:01.712 --> 00:16:04.960
Compose and
pipe do actually the same thing.

246
00:16:04.960 --> 00:16:09.020
Just they operate on the list of machines
in the reverse order from the other.

247
00:16:09.020 --> 00:16:12.780
Does that make sense?

248
00:16:14.350 --> 00:16:17.280
Both of those utilities are standard
utilities you'll find in any

249
00:16:17.280 --> 00:16:19.190
functional programming library.

250
00:16:19.190 --> 00:16:23.900
And I have found in my own coding that
sometimes compose makes more sense for

251
00:16:23.900 --> 00:16:26.270
me, and sometimes pipe makes more sense.

252
00:16:26.270 --> 00:16:28.669
So it's not that one is right and
the other is wrong.

253
00:16:28.669 --> 00:16:30.510
It's that we want to use both of them.

254
00:16:31.540 --> 00:16:36.110
By the way, those utilities often times
will go by different names in other

255
00:16:36.110 --> 00:16:37.120
libraries.

256
00:16:37.120 --> 00:16:41.830
So sometimes compose will be called flow,
I'm sorry, flow right and

257
00:16:41.830 --> 00:16:43.060
pipe will be called flow.

258
00:16:43.060 --> 00:16:48.680
I think that's what they're called in,
for example low-fp.

259
00:16:48.680 --> 00:16:53.990
So they may go by different names, but
they still do exactly the same concept.

260
00:16:53.990 --> 00:16:55.405
Was there a question?

261
00:16:55.405 --> 00:16:58.330
&gt;&gt; Speaker 3: Yeah, there's
a question online about composition

262
00:16:58.330 --> 00:16:59.680
using a map function.

263
00:17:01.490 --> 00:17:03.430
Using mapping to read the functions.

264
00:17:03.430 --> 00:17:06.840
&gt;&gt; Kyle: We have not talked about map yet,
so if we're asking about map,

265
00:17:06.840 --> 00:17:10.850
why don't we defer that until we get to
list operations later in the workshop?

266
00:17:15.086 --> 00:17:16.763
&gt;&gt; Kyle: Okay.

267
00:17:21.247 --> 00:17:27.320
&gt;&gt; Kyle: So I wanna make a simple
utility that just does two functions.

268
00:17:27.320 --> 00:17:29.109
And I'm gonna call that one composeRight.

269
00:17:30.420 --> 00:17:31.210
Takes fn1.

270
00:17:31.210 --> 00:17:34.710
You'll notice how I listed
the parameter order.

271
00:17:34.710 --> 00:17:38.440
That utility will do composition
of two specific functions.

272
00:17:38.440 --> 00:17:43.010
In just a moment, you're gonna work
on an exercise where you get to make

273
00:17:43.010 --> 00:17:45.760
a general compose that can work
on any number of functions.

274
00:17:45.760 --> 00:17:48.590
But I just wanna show you
if I was hard coding it,

275
00:17:48.590 --> 00:17:55.660
this is a very simple implementation,
just compose two functions together.

276
00:17:55.660 --> 00:18:00.470
That comp function returned on line 2,
that's our machine that our machine made.

277
00:18:00.470 --> 00:18:05.260
That constructed machine takes
any number of inputs and

278
00:18:05.260 --> 00:18:07.340
passes them to the first function.

279
00:18:07.340 --> 00:18:11.490
But the first function will
always output only one output.

280
00:18:11.490 --> 00:18:13.630
So the second and third and so

281
00:18:13.630 --> 00:18:16.900
forth from then on,
they'll always only have one input.

282
00:18:16.900 --> 00:18:23.300
Do you remember the special term we used
for functions that only take one input?

283
00:18:23.300 --> 00:18:23.960
&gt;&gt; Speaker 4: Unarian.

284
00:18:23.960 --> 00:18:24.910
&gt;&gt; Kyle: Unarian.

285
00:18:24.910 --> 00:18:25.910
Okay.

286
00:18:25.910 --> 00:18:30.130
When I said earlier than you're gonna
prefer unary functions this is why,

287
00:18:30.130 --> 00:18:33.990
because unary functions are a whole
lot easier to compose together.

288
00:18:33.990 --> 00:18:36.750
That pipe two thing idea which
is a lot more complex cuz

289
00:18:36.750 --> 00:18:41.450
they have multiple arguments in each, that
was piping binary functions together and

290
00:18:41.450 --> 00:18:42.360
that's a lot harder to do.

291
00:18:42.360 --> 00:18:47.560
It's much easier if we wanna pipe
around or compose unary functions.

292
00:18:47.560 --> 00:18:49.870
Because functions have a single output.

293
00:18:49.870 --> 00:18:54.190
So if their shape of single output
matches the shape of single input,

294
00:18:54.190 --> 00:18:56.480
they just fit together
like really nice Legos.

295
00:18:56.480 --> 00:18:59.020
Does it make sense?

296
00:18:59.020 --> 00:19:03.650
S, wherever possible, you would want
to design the functions to be unary.

297
00:19:04.710 --> 00:19:08.490
And if your function wasn't unary,
you might wanna jump through some

298
00:19:08.490 --> 00:19:12.880
hoops to make it or adapt it to be unary
using some of the tricks we talked about.

299
00:19:12.880 --> 00:19:16.130
Like, for example,
that unary utility we talked about.

300
00:19:16.130 --> 00:19:20.500
There will be other things that we
look at like currying in a little bit.

301
00:19:20.500 --> 00:19:24.630
Those are all things that we can use to
take a function that's not a unary, and

302
00:19:24.630 --> 00:19:27.920
make it into a unary one so
that it'll be easier to compose.

303
00:19:35.870 --> 00:19:39.570
&gt;&gt; Kyle: So
here's an example of using composeRight.

304
00:19:39.570 --> 00:19:41.420
And I actually make two
different functions.

305
00:19:41.420 --> 00:19:44.270
I compose these in different orders.

306
00:19:44.270 --> 00:19:47.750
F composes double first and
then increment.

307
00:19:47.750 --> 00:19:50.560
P composes increment first and
then double.

308
00:19:51.910 --> 00:19:53.280
We get a different end result.

309
00:19:53.280 --> 00:19:57.880
On line 12 when we called f,
the 3 is gonna get doubled first, and

310
00:19:57.880 --> 00:19:58.610
then increment it.

311
00:19:58.610 --> 00:20:02.020
That's how we go from 3
to 6 plus 1 equals 7.

312
00:20:02.020 --> 00:20:06.320
But p is gonna increment first
before doubling so we're gonna

313
00:20:06.320 --> 00:20:10.309
increment 3 to the value 4 and then double
it, and that's why we end up with 8.

314
00:20:11.620 --> 00:20:15.570
Two different functions that do those
operations in different orders.

315
00:20:24.682 --> 00:20:28.383
&gt;&gt; Kyle: If I were to make,
I didn't put this in the slide, but

316
00:20:28.383 --> 00:20:34.490
if I were to make a function that did
this doubling and incrementing thing.

317
00:20:34.490 --> 00:20:37.970
Similar to what we did with the calculate
international shipping rate,

318
00:20:37.970 --> 00:20:42.050
it would take two or three inputs.

319
00:20:42.050 --> 00:20:43.770
And then produce a single output.

320
00:20:44.920 --> 00:20:49.710
And that would look like
a bunch of points, wouldn't it?

321
00:20:49.710 --> 00:20:53.520
But if I express that function as
simply a composition of two or

322
00:20:53.520 --> 00:20:56.780
three functions,
now I have point three style again.

323
00:20:58.230 --> 00:21:01.570
So, we are reinforcing this idea
that using these utilities and

324
00:21:01.570 --> 00:21:05.020
these patterns that are well known and
well established.

325
00:21:05.020 --> 00:21:07.030
They let us write more declarative code.

326
00:21:09.360 --> 00:21:13.090
That's why we were able to write that
calculate international shipping rate

327
00:21:13.090 --> 00:21:14.110
as a compose.

