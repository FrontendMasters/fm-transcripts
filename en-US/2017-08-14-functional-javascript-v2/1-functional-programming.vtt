WEBVTT

1
00:00:00.210 --> 00:00:04.564
&gt;&gt; Kyle Simpson: Let's jump into our
course on Functional Light JavaScript.

2
00:00:04.564 --> 00:00:07.980
I wanna explain just a moment,
the title and then I'm gonna

3
00:00:07.980 --> 00:00:11.760
spend a little bit of time motivating
this topic of functional programming.

4
00:00:11.760 --> 00:00:15.520
Because there's probably different
reasons why you showed up or

5
00:00:15.520 --> 00:00:17.736
why you're taking this particular course.

6
00:00:17.736 --> 00:00:21.440
And I wanna talk about what my motivation
is for teaching it, my approach.

7
00:00:21.440 --> 00:00:24.780
But just the title itself, I wanna make
sure that we address this for a moment.

8
00:00:24.780 --> 00:00:29.600
So, first off this is a refresh of

9
00:00:29.600 --> 00:00:33.270
a course on Frontend Masters
by the same name.

10
00:00:33.270 --> 00:00:36.973
The very first time I ever taught
the topic was for Frontend Masters and

11
00:00:36.973 --> 00:00:38.434
I gave this course before.

12
00:00:38.434 --> 00:00:41.210
So it was the very first
path I ever made at it.

13
00:00:41.210 --> 00:00:44.380
And now we're a year and
a half or so later,

14
00:00:44.380 --> 00:00:48.180
I've written a full book on the topic,
I've been learning a lot more about it.

15
00:00:48.180 --> 00:00:52.950
And so I've come back to refresh this
topic, give a fresh set of eyes to it.

16
00:00:52.950 --> 00:00:57.079
In some ways, it's some of the same stuff
that we talked about but in other ways,

17
00:00:57.079 --> 00:01:00.482
there are very different ways that
I think about it and therefore,

18
00:01:00.482 --> 00:01:02.033
teach and share with others.

19
00:01:02.033 --> 00:01:06.302
I thought about calling the course
functional lighter JS since we're updating

20
00:01:06.302 --> 00:01:09.501
it but that [LAUGH] sort of
implies that we're getting less.

21
00:01:09.501 --> 00:01:12.390
So I will calling it the same
thing Functional Light.

22
00:01:12.390 --> 00:01:16.190
But speaking of that name, what do I
mean by functional light, what is that?

23
00:01:18.170 --> 00:01:24.040
You might be of the impression that
the word light is intended to imply

24
00:01:24.040 --> 00:01:28.360
intro, or beginner, or easy path in.

25
00:01:28.360 --> 00:01:33.240
And I wanna change that particular notion.

26
00:01:33.240 --> 00:01:35.420
This is rigorous material and especially,

27
00:01:35.420 --> 00:01:39.640
if you read the book functional
programming is not for the light of heart.

28
00:01:39.640 --> 00:01:43.650
But [COUGH] it does not have to be a cliff

29
00:01:43.650 --> 00:01:47.040
that somebody just throws you up against
and you keep banging your face up against.

30
00:01:47.040 --> 00:01:51.500
That's what I had done for nearly
a decade of trying to learn this topic.

31
00:01:52.930 --> 00:01:55.740
Some of you may have been like me,
at one point or

32
00:01:55.740 --> 00:01:58.110
another you heard this term
functional programming.

33
00:01:58.110 --> 00:02:02.000
The very first time I heard that
term I thought, well that's cool.

34
00:02:02.000 --> 00:02:05.730
I use functions in my program,
I'm already doing functional programming.

35
00:02:05.730 --> 00:02:08.820
And then it was years of realizing,

36
00:02:08.820 --> 00:02:11.060
no, I wasn't doing functional
programming at all.

37
00:02:11.060 --> 00:02:14.910
I didn't even understand in a real
true sense what a function was.

38
00:02:14.910 --> 00:02:17.790
And we're gonna spend a bunch
of time even really trying to

39
00:02:17.790 --> 00:02:19.180
figure out what a function is and

40
00:02:19.180 --> 00:02:22.430
what the characteristics are that you
might not have actually thought of.

41
00:02:22.430 --> 00:02:23.770
Cuz it really does start with that.

42
00:02:23.770 --> 00:02:26.690
As a matter of fact when I started
writing my book, the very first chapter,

43
00:02:26.690 --> 00:02:31.180
the literally the first sentence
[LAUGH] of the first chapter.

44
00:02:31.180 --> 00:02:36.080
I made this statement and then I pushed
it up to GitHub because I write and

45
00:02:36.080 --> 00:02:38.220
push things up as quickly as
I've written them or whatever.

46
00:02:38.220 --> 00:02:42.708
So I pushed up the first paragraph or
two of this book.

47
00:02:42.708 --> 00:02:46.643
And the very first sentence said
functional programming is not all about

48
00:02:46.643 --> 00:02:47.490
the function.

49
00:02:48.820 --> 00:02:53.360
And I knew I was doing something right
because the functional programming police

50
00:02:53.360 --> 00:02:57.100
came out of nowhere, I have no idea that
they even knew that I was writing a book.

51
00:02:57.100 --> 00:03:02.065
They came, descended upon me and told me,
this is horrible why would you say such

52
00:03:02.065 --> 00:03:05.874
a thing, functional programming
is all about the function.

53
00:03:05.874 --> 00:03:09.214
And they hadn't even given me an
opportunity to explain the context of what

54
00:03:09.214 --> 00:03:10.240
I meant there.

55
00:03:10.240 --> 00:03:13.050
What I was really saying is functional
programming is not all about

56
00:03:13.050 --> 00:03:15.050
the function keyword.

57
00:03:15.050 --> 00:03:18.130
So I clarified that to make [LAUGH]
sure they wouldn't be so upset.

58
00:03:18.130 --> 00:03:20.410
It's not all about the function keyword.

59
00:03:20.410 --> 00:03:22.690
It is however, all about the function and

60
00:03:22.690 --> 00:03:26.770
about modeling,
our applications in such a way

61
00:03:26.770 --> 00:03:31.270
that functions play a pivotal role in how
data transfers through the application.

62
00:03:32.270 --> 00:03:36.820
And that will change the way you
approach organizing your code.

63
00:03:36.820 --> 00:03:39.790
It should change it because
if it's not changing it,

64
00:03:39.790 --> 00:03:41.590
then what are you wasting your time on?

65
00:03:41.590 --> 00:03:44.099
It should change it and
it should try to improve.

66
00:03:44.099 --> 00:03:46.716
I'm gonna use terms like better and
improve and

67
00:03:46.716 --> 00:03:49.340
we're gonna have to know
even what that means.

68
00:03:49.340 --> 00:03:52.660
So I wanna get even into
that before we go forward.

69
00:03:52.660 --> 00:03:55.433
I wanna make sure we're
all on the same page here.

70
00:03:55.433 --> 00:04:00.572
[COUGH] So Functional Light is
not some intro easy beginner but

71
00:04:00.572 --> 00:04:04.816
what it is is like showing
up at the face of a cliff.

72
00:04:04.816 --> 00:04:09.079
And instead of having to figure out how
to use the rock climbing equipment,

73
00:04:09.079 --> 00:04:12.930
there's somebody there to show
you how the equipment works.

74
00:04:12.930 --> 00:04:16.860
You still have to climb the cliff wall but
instead of figuring out the equipment

75
00:04:16.860 --> 00:04:20.769
yourself, you now have some instruction
on how to get up the cliff.

76
00:04:21.790 --> 00:04:23.410
That's the proper way to approach this.

77
00:04:23.410 --> 00:04:24.910
It will be difficult.

78
00:04:24.910 --> 00:04:29.510
As a matter of fact, and
we mentioned before that I have this book

79
00:04:29.510 --> 00:04:30.964
that's where you can find
it on GitHub [COUGH].

80
00:04:32.380 --> 00:04:36.810
I'm trying to be very unassuming about
this because my description there,

81
00:04:36.810 --> 00:04:39.200
I'm just talking about
functional programming.

82
00:04:39.200 --> 00:04:42.872
I'm not really a functional programmer, so
I'm not even qualified to write about it

83
00:04:42.872 --> 00:04:45.125
which is why I gave it this name,
Functional Light.

84
00:04:45.125 --> 00:04:49.692
Because I wanted to distinguish
that my approach is bottom up

85
00:04:49.692 --> 00:04:51.950
rather than top down.

86
00:04:51.950 --> 00:04:55.365
Most approaches to functional
programming start with, okay,

87
00:04:55.365 --> 00:04:59.361
let's all learn about category theory and
types and all of this notation.

88
00:04:59.361 --> 00:05:03.480
And then from there we can learn this and
learn that, it's a top down approach.

89
00:05:03.480 --> 00:05:06.300
Now I took computer science and

90
00:05:06.300 --> 00:05:10.530
I still get lost in all of
that notation and terminology.

91
00:05:10.530 --> 00:05:13.030
Time, and time, and
time again I go to a conference and

92
00:05:13.030 --> 00:05:15.810
I'd say, this is the time I'm gonna
sit in the functional talk and

93
00:05:15.810 --> 00:05:18.150
this is the time I'm
gonna learn something.

94
00:05:18.150 --> 00:05:20.760
And to be honest with you
there was this one guy

95
00:05:20.760 --> 00:05:25.410
at every conference that I did actually
learn a little bit from, Bryan Lonsdorf.

96
00:05:25.410 --> 00:05:28.410
He's kind of my personal hero,
especially on this topic.

97
00:05:28.410 --> 00:05:30.480
He has taught a much deeper and

98
00:05:30.480 --> 00:05:34.450
more authoritative course on functional
programming here on this platform.

99
00:05:34.450 --> 00:05:38.670
He also has written about it:
Professor Frisbee's Mostly Adequate Guide.

100
00:05:38.670 --> 00:05:42.270
He has been the beacon that has helped
me figure out anything that I've known.

101
00:05:43.450 --> 00:05:46.050
But I would understand the first
five minutes of Brian's talk, and

102
00:05:46.050 --> 00:05:47.840
then I was completely lost.

103
00:05:47.840 --> 00:05:51.560
So I'd be furiously trying to take
notes and about five or six minutes in,

104
00:05:51.560 --> 00:05:52.101
I give up.

105
00:05:52.101 --> 00:05:55.908
Cuz he's using terminology like when
you say something like a monad is

106
00:05:55.908 --> 00:05:59.360
just a monoid in the category
of endofunctors.

107
00:05:59.360 --> 00:06:02.800
If you already know what those words mean,
that is a very precise and

108
00:06:02.800 --> 00:06:06.090
crisp way to communicate a set of ideas.

109
00:06:06.090 --> 00:06:10.370
So I don't mean ti make fun of those words
or the idea that those words matter,

110
00:06:10.370 --> 00:06:11.680
they absolutely do.

111
00:06:13.030 --> 00:06:15.260
But that's throwing a bunch of
equipment at me and saying,

112
00:06:15.260 --> 00:06:18.010
figure out how to use that equipment.

113
00:06:18.010 --> 00:06:19.870
And even if I could figure
out how to climb it,

114
00:06:19.870 --> 00:06:21.310
I probably wouldn't be doing it safely.

115
00:06:22.800 --> 00:06:25.960
So I think we needed a different
way to start at this topic and

116
00:06:25.960 --> 00:06:30.420
that's what Functional Light is about,
it's this bottom up pragmatic approach.

117
00:06:30.420 --> 00:06:32.730
We're uncovering the core principles or

118
00:06:32.730 --> 00:06:36.160
at least the things I think are core
principles to functional programmers.

119
00:06:36.160 --> 00:06:38.976
But we're uncovering them
from a more intuitive and

120
00:06:38.976 --> 00:06:41.540
less top down notation
terminology heavy way.

121
00:06:44.040 --> 00:06:47.150
So, why functional programming?

122
00:06:47.150 --> 00:06:51.740
What is the motivation here, what is
it that we're trying to improve and

123
00:06:51.740 --> 00:06:53.500
what does it even mean to improve?

124
00:06:55.862 --> 00:07:00.405
I wanna frame that discussion about
functional programming around the debate

125
00:07:00.405 --> 00:07:03.583
or the contrast between imperative and
declarative.

126
00:07:03.583 --> 00:07:07.347
I don't know how many people listening in
will know exactly what I mean by that, so

127
00:07:07.347 --> 00:07:11.120
I wanna be very clear, what we mean
by imperative versus declarative.

128
00:07:11.120 --> 00:07:17.570
Imperative code is code that focuses
on how to accomplish a task.

129
00:07:19.180 --> 00:07:19.960
As a matter of fact,

130
00:07:19.960 --> 00:07:23.910
if we go all the way back to
the beginning of programming computers.

131
00:07:23.910 --> 00:07:29.530
When it was done by one's and zero's on
punch cards, that is the most imperative.

132
00:07:29.530 --> 00:07:34.060
We're literally telling it switch this bit
from one to zero and that sorta thing.

133
00:07:34.060 --> 00:07:36.830
We're literally telling it
exactly how to do its job.

134
00:07:36.830 --> 00:07:40.470
It's not interpreting anything,
it's just doing what we told it to do.

135
00:07:40.470 --> 00:07:44.080
That's the perfect most pure
example of imperative code.

136
00:07:45.900 --> 00:07:50.664
As soon as we started adding programming
languages on top of the ones and zeros.

137
00:07:50.664 --> 00:07:53.660
Assembly language being one of
the first representations of that.

138
00:07:53.660 --> 00:07:57.426
As soon as we did that, we started to
create some abstraction where we were

139
00:07:57.426 --> 00:08:00.304
writing in a language that
was more friendly to humans.

140
00:08:00.304 --> 00:08:03.765
And it was being interpreted into
a language that the computer understood,

141
00:08:03.765 --> 00:08:05.080
the one's and the zero's.

142
00:08:05.080 --> 00:08:08.160
So it's slightly less imperative but
still highly imperative.

143
00:08:08.160 --> 00:08:10.230
Assembly language, if you've ever seen it.

144
00:08:10.230 --> 00:08:14.800
It's like move this piece of data into
this register and then move this here.

145
00:08:14.800 --> 00:08:16.990
I mean it's very, very imperative.

146
00:08:18.940 --> 00:08:21.570
And then we invented more programming
languages on top of that.

147
00:08:24.170 --> 00:08:28.470
And within each of those tiers of
programming language generations we added

148
00:08:28.470 --> 00:08:32.420
frameworks, and libraries, and patterns,
and DSLs, and other things like that.

149
00:08:33.530 --> 00:08:35.620
To abstract the way more,

150
00:08:35.620 --> 00:08:39.500
the instructions that we wanna give to
the computer from what actually happens.

151
00:08:40.560 --> 00:08:44.560
So, even the code that you write, even
when you write a for loop in JavaScript,

152
00:08:44.560 --> 00:08:48.381
it's not nearly as imperative as it
would had you been writing the one's and

153
00:08:48.381 --> 00:08:50.249
zero's of the assembly [INAUDIBLE].

154
00:08:50.249 --> 00:08:51.552
It is more declarative, so

155
00:08:51.552 --> 00:08:55.190
this is not a binary, something is
either imperative or it is declarative.

156
00:08:56.340 --> 00:09:01.370
Or rather a continuum,
we've moving more towards the declarative,

157
00:09:01.370 --> 00:09:03.160
as we have been adding more to program.

158
00:09:04.490 --> 00:09:07.475
As we've been advancing the art
of performing language design and

159
00:09:07.475 --> 00:09:11.045
framework design, DSLs and things of
that nature, we've been moving more and

160
00:09:11.045 --> 00:09:11.964
more towards that.

161
00:09:11.964 --> 00:09:14.570
And you see some chiming
examples of that [COUGH].

162
00:09:14.570 --> 00:09:17.590
One of the most common,
that people will know these days,

163
00:09:17.590 --> 00:09:22.360
angulars, touted as
a declarative framework of sorts

164
00:09:22.360 --> 00:09:26.470
because you declare in your mark
up what you want to have happened.

165
00:09:26.470 --> 00:09:29.520
And angular figures out
how to make it happen.

166
00:09:29.520 --> 00:09:33.465
So if imperative is focusing on
how to make something happen.

167
00:09:33.465 --> 00:09:38.226
Declarative is focusing on what
should happen and not how.

168
00:09:38.226 --> 00:09:39.070
That's the contrast.

169
00:09:40.210 --> 00:09:41.410
Now why does this matter?

170
00:09:41.410 --> 00:09:45.550
It matters because most of the
advancements that we've made along this

171
00:09:45.550 --> 00:09:49.905
continuum to be more declarative,
most of those advancements are there.

172
00:09:49.905 --> 00:09:53.569
Because it's easier to read and understand
declarative code then it is to read and

173
00:09:53.569 --> 00:09:54.960
understand imperative code.

174
00:09:56.390 --> 00:10:00.680
As a matter of fact, we could sort of say
the computer is better at the imperative

175
00:10:00.680 --> 00:10:04.130
part and we're better at
the cognitive declarative part.

176
00:10:04.130 --> 00:10:05.049
That's what we're good at.

177
00:10:06.810 --> 00:10:10.417
So we've been, in a sense,
improving the interface between us and

178
00:10:10.417 --> 00:10:13.661
the computer, so that we can say
what we want to have happen.

179
00:10:13.661 --> 00:10:17.310
And the computer can figure out the best
way to make that happen, the best how.

180
00:10:19.420 --> 00:10:22.350
There is no truly completely declarative,

181
00:10:22.350 --> 00:10:26.690
either just like the one's and zero's at
one end, we're not doing that anymore.

182
00:10:26.690 --> 00:10:29.720
We're not doing fully declarative coding

183
00:10:29.720 --> 00:10:33.800
like on Star Trek where you just talk to
the computer and you're like, analyze.

184
00:10:33.800 --> 00:10:37.538
And the computer just figures out what
you meant by that, we're not doing that.

185
00:10:37.538 --> 00:10:39.270
And I don't know that we ever will.

186
00:10:39.270 --> 00:10:42.510
So, we'll always be
somewhere on the spectrum.

187
00:10:42.510 --> 00:10:47.370
And each given piece of code needs to
be at different places on the spectrum.

188
00:10:47.370 --> 00:10:51.500
Each different place in the code we
have to decide, is it better for

189
00:10:51.500 --> 00:10:55.020
me to focus on more precisely instructing
the computer, or is it better for

190
00:10:55.020 --> 00:10:57.629
me to focus on expressing my ideas?

191
00:10:58.750 --> 00:11:02.780
But as a general rule, the more
declarative we are the more we focus on

192
00:11:02.780 --> 00:11:06.070
expressing the what instead of the how.

193
00:11:06.070 --> 00:11:08.220
The easier it is for
somebody to come along to read later.

194
00:11:11.010 --> 00:11:14.070
And I wanna talk about this easier and
better thing but

195
00:11:14.070 --> 00:11:18.460
I wanna caution you about an effect.

196
00:11:18.460 --> 00:11:21.530
This is not unique to me but
I'm applying it to this particular domain.

197
00:11:21.530 --> 00:11:26.158
I wanna caution you about an effect
that will happen as you start to move

198
00:11:26.158 --> 00:11:30.793
from imperative to declarative using
techniques that we learn here.

199
00:11:30.793 --> 00:11:34.589
And using the stuff that you learn
beyond this class in the book and

200
00:11:34.589 --> 00:11:36.213
in other people's books.

201
00:11:36.213 --> 00:11:42.800
I wanna caution you on this
perception of readability problem.

202
00:11:44.430 --> 00:11:49.030
So as we move along the x axis
from imperative to declarative,

203
00:11:49.030 --> 00:11:53.510
we start out at the beginning with
a certain moderate level of readability.

204
00:11:54.860 --> 00:11:59.677
We feel like, I can mostly understand
what I'm doing with the code.

205
00:11:59.677 --> 00:12:02.565
And you'll notice that is,
as we move along the curve,

206
00:12:02.565 --> 00:12:06.570
we begin to see some improvement in
the readability of the code rather early.

207
00:12:08.050 --> 00:12:10.170
And we're feeling really
good about ourselves.

208
00:12:10.170 --> 00:12:11.781
We're like, wow.
I'm really using some of this

209
00:12:11.781 --> 00:12:12.570
functional stuff.

210
00:12:12.570 --> 00:12:16.000
And I'm being more declarative and
it's starting to make more sense.

211
00:12:16.000 --> 00:12:19.100
And then somewhere along the way,
we begin to press that curve.

212
00:12:20.380 --> 00:12:23.320
And we begin to bring more of these
ideas in and all of a sudden,

213
00:12:23.320 --> 00:12:29.550
we're bringing ideas in that are
transforming our code in such pronounced

214
00:12:29.550 --> 00:12:34.150
ways that when we take a fresh look at it
or when somebody else looks at our code.

215
00:12:34.150 --> 00:12:37.550
They're like, what are you doing there?

216
00:12:37.550 --> 00:12:41.890
And it can actually really start to
go down hill and you start to get to

217
00:12:41.890 --> 00:12:44.390
the point where you can't even understand
what your code is doing anymore, and

218
00:12:44.390 --> 00:12:46.470
you're like, why I'm I even doing this?

219
00:12:46.470 --> 00:12:50.520
And it's at that moment, I have found and
not only from myself but

220
00:12:50.520 --> 00:12:55.040
others that many people bail and
say, this is not working for me.

221
00:12:56.640 --> 00:12:59.160
Sometimes we blame ourselves,
sometimes we blame the tool.

222
00:12:59.160 --> 00:13:03.370
We say functional programming is just
poorly designed, it's too opaque,

223
00:13:03.370 --> 00:13:07.080
it's too thick with all of this stuff for
me to possibly get there.

224
00:13:09.040 --> 00:13:14.140
And I would say that I have
gone all the way down into that

225
00:13:14.140 --> 00:13:17.760
trough and
begun to come out the other side.

226
00:13:18.850 --> 00:13:22.220
And I can tell you that the mountain climb

227
00:13:22.220 --> 00:13:24.360
is worth it when you make
it through that valley.

228
00:13:25.450 --> 00:13:29.150
But I cannot promise you that
that is an easy path to take.

229
00:13:29.150 --> 00:13:33.670
I don't have some easy path that gets you
there without going through that trough.

230
00:13:33.670 --> 00:13:39.220
I wish I did, I'd probably
revolutionize this space if there

231
00:13:39.220 --> 00:13:43.100
was some magic way to just make it so
that you never have to struggle with that.

232
00:13:44.960 --> 00:13:48.150
But what I'm trying to do is encourage
you that that climb is worth it,

233
00:13:48.150 --> 00:13:51.080
that that journey,
that that path is worth it.

234
00:13:52.470 --> 00:13:53.380
And not to give up.

235
00:13:54.440 --> 00:14:01.761
And not to get lost in
the disillusionment that can often occur.

236
00:14:01.761 --> 00:14:06.474
Now, that's not to discourage you because
what we're gonna focus on today is that

237
00:14:06.474 --> 00:14:08.210
first part of the curve.

238
00:14:08.210 --> 00:14:11.260
In this course, we're gonna focus
on the first part of the curve and

239
00:14:11.260 --> 00:14:14.710
trying to get those early winds
from the most intuitive and

240
00:14:14.710 --> 00:14:16.790
pragmatic things that we
can improve about our code.

241
00:14:18.330 --> 00:14:22.350
But I don't want you to think that that
is where your journey ought to stop

242
00:14:22.350 --> 00:14:25.120
because I don't think it's
where it ought to stop.

243
00:14:25.120 --> 00:14:28.780
And I don't think that you should never
aspire to be a functional programmer.

244
00:14:28.780 --> 00:14:32.620
What I hope is that Functional Light
is your tutorial on how to

245
00:14:32.620 --> 00:14:34.110
use the climbing tools.

246
00:14:34.110 --> 00:14:37.040
And once you graduate from
Functional Light and you've read the book.

247
00:14:37.040 --> 00:14:41.270
And you feel very confident about that,
your next mountain to climb

248
00:14:41.270 --> 00:14:45.360
is the real climb of real
functional programming.

249
00:14:46.850 --> 00:14:48.950
So this is your path onto
the mountain if you will.

