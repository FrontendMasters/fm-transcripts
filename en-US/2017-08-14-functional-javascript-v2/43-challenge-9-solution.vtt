WEBVTT

1
00:00:00.310 --> 00:00:03.310
&gt;&gt; Kyle Simpson: As it mentions in
the read me, you wanna come run the fixed

2
00:00:03.310 --> 00:00:07.160
version of it in your browser and
watch what it does in the Console.

3
00:00:07.160 --> 00:00:11.590
It prints out once per second a count
down timer till it gets to zero and

4
00:00:11.590 --> 00:00:14.088
then it prints out the complete message.

5
00:00:14.088 --> 00:00:21.878
So,
&gt;&gt; Kyle Simpson: What

6
00:00:21.878 --> 00:00:29.170
we want to do is look at what
the code is currently doing for us.

7
00:00:29.170 --> 00:00:31.630
So I'm gonna run with
the code currently does and

8
00:00:31.630 --> 00:00:34.650
that's can give us a clue
as to what we need to fix.

9
00:00:34.650 --> 00:00:38.850
If I ran the current code
without the fix in it,

10
00:00:38.850 --> 00:00:40.810
you notice it's printing
out these numbers.

11
00:00:41.810 --> 00:00:44.780
Basically, what I set it up to do was to,
once a second,

12
00:00:44.780 --> 00:00:49.440
give us a different incrementing
number starting with -1.

13
00:00:49.440 --> 00:00:51.670
I'll explain why that in just a moment.

14
00:00:51.670 --> 00:00:53.360
But, starting with a different number.

15
00:00:55.650 --> 00:01:00.060
We'll take that number, and subtract
it from our countdown timer number.

16
00:01:00.060 --> 00:01:01.586
And, that'll let us know what to print.

17
00:01:01.586 --> 00:01:08.238
So if our,
&gt;&gt; Kyle Simpson: Format

18
00:01:08.238 --> 00:01:13.720
countdown is what's being called here, or
we want our format countdown to be called,

19
00:01:13.720 --> 00:01:18.301
we could say what value am I going to
receive, I'll just print the v, and

20
00:01:18.301 --> 00:01:20.120
I wanna console.log that.

21
00:01:25.883 --> 00:01:29.949
&gt;&gt; Kyle Simpson: How can I get
format countdown to be called for

22
00:01:29.949 --> 00:01:33.270
each value in the countdown stream?

23
00:01:33.270 --> 00:01:33.881
&gt;&gt; Speaker 2: Map it.

24
00:01:33.881 --> 00:01:34.670
&gt;&gt; Kyle Simpson: Dot map.

25
00:01:34.670 --> 00:01:36.050
There we go.

26
00:01:36.050 --> 00:01:38.310
I like that you said it with
some fire in your bones.

27
00:01:38.310 --> 00:01:39.200
That's good.

28
00:01:39.200 --> 00:01:40.060
That's good.

29
00:01:40.060 --> 00:01:40.690
Yeah we wanna map it.

30
00:01:40.690 --> 00:01:44.240
We wanna call dot map because,
this is just a lazy array, right?

31
00:01:44.240 --> 00:01:47.766
So to transform that operation over
time we're just gonna call map, so

32
00:01:47.766 --> 00:01:49.485
I'm gonna say formatCountdown.

33
00:01:54.877 --> 00:01:56.146
&gt;&gt; Kyle Simpson: And,

34
00:02:06.533 --> 00:02:11.620
&gt;&gt; Kyle Simpson: When I run the fixed
version, you noticed that it is printing

35
00:02:11.620 --> 00:02:16.610
undefined in between each of
those because the format count

36
00:02:16.610 --> 00:02:21.223
down as it currently stand
is not returning any value.

37
00:02:21.223 --> 00:02:26.518
So if I did return v and ran it and
then we would expect that to

38
00:02:26.518 --> 00:02:32.580
print each number twice,
which is now what it's doing.

39
00:02:32.580 --> 00:02:35.930
We're printing each number
in the format countdown.

40
00:02:35.930 --> 00:02:40.000
And now we're also printing it in
a subscribe method that's being called,

41
00:02:40.000 --> 00:02:42.190
the subscribe method up here.

42
00:02:42.190 --> 00:02:44.990
So, essentially,
what we want to do is take that number and

43
00:02:44.990 --> 00:02:48.560
turn it into the nicely
printed out string.

44
00:02:48.560 --> 00:02:52.430
And we have that format time
that can do that for us.

45
00:02:52.430 --> 00:03:00.460
So if I just call format time if I return,
formatTime and pass in the (v).

46
00:03:00.460 --> 00:03:03.520
Actually I'm gonna change this (v)
to be a little bit better name.

47
00:03:03.520 --> 00:03:05.170
I'm gonna call it the counter number.

48
00:03:06.210 --> 00:03:08.271
So let's see what that does for us.

49
00:03:10.816 --> 00:03:13.839
&gt;&gt; Kyle Simpson: That's not quite
right cuz it's counting upwards.

50
00:03:14.900 --> 00:03:16.190
That's not exactly what we want.

51
00:03:16.190 --> 00:03:20.950
So why don't we start by saying,
we have the countdown lengths, so

52
00:03:20.950 --> 00:03:25.136
why don't we subtract counter
from the countdownLength?

53
00:03:30.396 --> 00:03:32.310
&gt;&gt; Kyle Simpson: Let's see what it does.

54
00:03:32.310 --> 00:03:35.790
It started at 6,
which is a little bizarre.

55
00:03:35.790 --> 00:03:38.650
Then it ended with zero one.

56
00:03:38.650 --> 00:03:40.580
We want to shift this all by one.

57
00:03:40.580 --> 00:03:44.360
We have a classic off by one error.

58
00:03:45.420 --> 00:03:49.798
So, we just add in one more minus one and

59
00:03:49.798 --> 00:03:55.128
now it prints five, four, three, two, one.

60
00:04:01.943 --> 00:04:04.923
&gt;&gt; Kyle Simpson: Key takeaway here is not
exactly that you need to understand what

61
00:04:04.923 --> 00:04:08.430
RX is doing, although there's
some really cool stuff happening.

62
00:04:08.430 --> 00:04:12.980
This merge is a stream operation,
it takes two different streams.

63
00:04:12.980 --> 00:04:16.750
One of them is the initial value
I wanted to provide right away.

64
00:04:16.750 --> 00:04:21.000
And the other one is this timer,
which is gonna be receiving values

65
00:04:21.000 --> 00:04:25.000
once every second from the Rx library.

66
00:04:25.000 --> 00:04:28.940
It's gonna be receiving that counter
value, but it sends it to us as an object.

67
00:04:28.940 --> 00:04:34.140
So then we call another functional utility
called pluck which takes an object

68
00:04:34.140 --> 00:04:38.540
that you receive and returns the value
of just that property off the object.

69
00:04:38.540 --> 00:04:42.640
So we pluck the value property off
of the object being passed through,

70
00:04:42.640 --> 00:04:45.440
and that's how we're getting
that number coming through.

71
00:04:45.440 --> 00:04:48.050
So there is some cool
stuff happening with Rx.

72
00:04:48.050 --> 00:04:50.740
The main point of this is if Rx is set up,

73
00:04:50.740 --> 00:04:53.961
how do I extend what I know about
functional programming into those streams.

74
00:04:55.190 --> 00:04:57.430
Hopefully that was a brief glimpse for
you.

75
00:04:57.430 --> 00:04:59.829
What questions can I answer
about exercise nine?

76
00:05:07.349 --> 00:05:10.617
&gt;&gt; Speaker 3: What would happen
if you changed the -1 and

77
00:05:10.617 --> 00:05:12.840
the Rx.Observable of -1?

78
00:05:12.840 --> 00:05:17.235
&gt;&gt; Kyle Simpson: So
if we start this at (0) for

79
00:05:17.235 --> 00:05:20.500
example, and then take the minus one out.

80
00:05:25.914 --> 00:05:26.660
&gt;&gt; Kyle Simpson: It repeated it.

81
00:05:26.660 --> 00:05:27.750
&gt;&gt; Speaker 3: Yep, yep, yep.

82
00:05:27.750 --> 00:05:30.650
&gt;&gt; Kyle Simpson: Now there are,
I'm certain, ways to tweak

83
00:05:30.650 --> 00:05:35.350
the behaviors of Rx I didn't spend a lot
of time digging through the documentation.

84
00:05:35.350 --> 00:05:38.650
I'm sure an Rx expert is
looking at this like, my god,

85
00:05:38.650 --> 00:05:40.450
why aren't you passing that one thing?

86
00:05:40.450 --> 00:05:44.760
There's somewhere in the documentation
I'm sure it says it.

87
00:05:44.760 --> 00:05:50.950
Given what I know about Rx, it's a
daunting set of material, I just make sure

88
00:05:50.950 --> 00:05:55.320
that I printed and immediate started the
counter rather than waiting a full second.

89
00:05:55.320 --> 00:05:57.070
I wanted to print right away.

90
00:05:57.070 --> 00:06:00.330
But I couldn't figure out how to
tell it where to start its counting.

91
00:06:00.330 --> 00:06:02.813
It always started at zero
instead of at negative one.

