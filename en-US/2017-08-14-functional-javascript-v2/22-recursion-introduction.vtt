WEBVTT

1
00:00:00.660 --> 00:00:02.810
&gt;&gt; Kyle Simpson: Let's turn our
attention to recursion now.

2
00:00:04.370 --> 00:00:09.110
And I'm gonna fully state upfront that
I understand recursion can feel quite

3
00:00:09.110 --> 00:00:14.310
intimidating, certainly, for the first
several years that I was a programmer.

4
00:00:14.310 --> 00:00:16.940
I had heard about recursion and
seen it done.

5
00:00:16.940 --> 00:00:21.610
And had no idea nor
any desire to try to tackle it myself.

6
00:00:21.610 --> 00:00:25.550
It seemed a very strange
way of twisting my brain

7
00:00:25.550 --> 00:00:29.070
to think about a problem differently
that I saw no value, no benefit for.

8
00:00:29.070 --> 00:00:33.920
And as a matter of fact, even once I
learned how to do recursion, I didn't

9
00:00:33.920 --> 00:00:40.540
really have a very clear crisp statement
of value for why recursion was necessary.

10
00:00:40.540 --> 00:00:45.304
And it was not until I started digging
into functional programming concepts

11
00:00:45.304 --> 00:00:50.440
that I really began to develop a sense
of why recursion would be useful.

12
00:00:50.440 --> 00:00:55.230
Obviously, there are some functional
reasons, some behavioral or

13
00:00:55.230 --> 00:00:59.740
mechanical reasons why recursion be
helpful with certain kinds of problems.

14
00:00:59.740 --> 00:01:04.480
But I'm talking about
beyond that moment where,

15
00:01:04.480 --> 00:01:06.920
I need to do a recursive
dissent of a binary tree.

16
00:01:06.920 --> 00:01:10.740
Well, that clearly seems more like
recursion than to try to do it

17
00:01:10.740 --> 00:01:11.380
iteratively.

18
00:01:13.040 --> 00:01:18.100
So there are things that recursion is
better at in terms of algorithmic.

19
00:01:19.350 --> 00:01:22.870
But even if we didn't talk about
algorithms, because, quite honestly,

20
00:01:22.870 --> 00:01:25.530
I just don't write a whole lot of

21
00:01:25.530 --> 00:01:30.270
depth first traversal of binary
trees in my everyday coding.

22
00:01:30.270 --> 00:01:33.140
Maybe you do, but
that's not something I do a lot.

23
00:01:33.140 --> 00:01:35.290
So for a long period of time,

24
00:01:35.290 --> 00:01:39.420
recursion felt like this one
little highly specialized tool.

25
00:01:39.420 --> 00:01:42.030
And I wouldn't really pay
that much attention to it.

26
00:01:44.100 --> 00:01:47.830
Several years back,
I heard Doug Crockford give a talk.

27
00:01:47.830 --> 00:01:50.360
He was talking about the new
things coming in ES6.

28
00:01:50.360 --> 00:01:57.680
And he suggested that now that ES6 was
gonna have full proper support for

29
00:01:57.680 --> 00:02:01.300
a thing that we call proper tail calls.

30
00:02:01.300 --> 00:02:05.557
Sometimes, it's often referred to as TCO,
tail call optimization.

31
00:02:05.557 --> 00:02:08.890
He said,
as soon as JavaScript really gets that,

32
00:02:09.930 --> 00:02:13.300
I'm not gonna write loops anymore,
it's what he said.

33
00:02:13.300 --> 00:02:16.420
And it twisted my brain again and
I said, really?

34
00:02:16.420 --> 00:02:19.950
You would never write a loop again,
you would do this only with recursion.

35
00:02:19.950 --> 00:02:21.770
And I knew I academically what he meant.

36
00:02:21.770 --> 00:02:27.580
Because, essentially, the calls in a call
stack, especially if they're recursive,

37
00:02:27.580 --> 00:02:31.880
have the same shape as
the iterations in a loop.

38
00:02:31.880 --> 00:02:37.770
So you can clearly model them, and
they can be thought as isomorphic.

39
00:02:37.770 --> 00:02:43.500
That's a fancy way of saying two different
behaviors represented differently.

40
00:02:43.500 --> 00:02:45.490
The same behavior represented
two different ways.

41
00:02:47.600 --> 00:02:49.260
So you can think recursion and

42
00:02:49.260 --> 00:02:52.949
iteration as sort of isomorphic
to each other in a sense.

43
00:02:54.250 --> 00:02:56.750
But I didn't really ever take
that seriously, like, wow,

44
00:02:56.750 --> 00:02:57.790
I would really do that.

45
00:02:57.790 --> 00:03:01.300
And as I dug more into functional
programming, I saw that, more and

46
00:03:01.300 --> 00:03:05.930
more of the time, problems that I probably
would have defaulted to using a for

47
00:03:05.930 --> 00:03:09.890
loop with, I saw the functional
programming using recursion.

48
00:03:09.890 --> 00:03:12.510
And I began to develop this
deeper appreciation for

49
00:03:12.510 --> 00:03:15.620
why this tool is a necessary part.

50
00:03:15.620 --> 00:03:20.190
It's not just this highly specialized
thing that we should never really take

51
00:03:20.190 --> 00:03:25.020
out of the toolbox, but something that
we should regularly have at reach.

52
00:03:25.020 --> 00:03:28.160
And that means, of course,
that we need to not just have

53
00:03:28.160 --> 00:03:32.840
a very surface level understanding,
but a deep understanding of recursion.

54
00:03:32.840 --> 00:03:36.080
And a deep understanding of
the meaning and the purpose behind it.

55
00:03:38.070 --> 00:03:42.640
If you have any familiarity with math,
if you recall back to math class,

56
00:03:42.640 --> 00:03:47.370
you probably encountered at some point or
another the little sigma symbol

57
00:03:47.370 --> 00:03:52.650
used to describe the summation
of some series of numbers.

58
00:03:52.650 --> 00:03:54.800
Summation of x would literally just say,

59
00:03:54.800 --> 00:03:58.140
from one to whatever you were summing,
add all those numbers up.

60
00:03:58.140 --> 00:04:01.120
And you could say,
summation of x squared or whatever.

61
00:04:01.120 --> 00:04:07.280
And the notation is kind of like
what recursion is doing for us.

62
00:04:07.280 --> 00:04:10.480
And so that's why I wanna
talk about that for a moment.

63
00:04:10.480 --> 00:04:15.860
I really think that the benefit
of recursion is that it moves us

64
00:04:15.860 --> 00:04:22.370
in the direction of declaring what we want
to have happen, that declarative style.

65
00:04:22.370 --> 00:04:26.790
And away from the imperative
of this is how to do it.

66
00:04:26.790 --> 00:04:32.310
So given some list of values that I need
to perform some set of operations on.

67
00:04:32.310 --> 00:04:36.030
Instead of looping over those values to
perform the operation, I could express

68
00:04:36.030 --> 00:04:42.950
that as recursively reducing the list
one at a time, or two at a time.

69
00:04:42.950 --> 00:04:45.070
Or whatever the appropriate thing is,

70
00:04:45.070 --> 00:04:49.690
until I don't have any more items in
the list to process, and then I'm done.

71
00:04:49.690 --> 00:04:55.160
That is the same thing as giving a new
item, when we do that in the call stack,

72
00:04:55.160 --> 00:04:59.450
and each new frame in the call stack
has a shorter list to deal with.

73
00:04:59.450 --> 00:05:02.910
It's the same thing as iterating through
a list where you have an index variable

74
00:05:02.910 --> 00:05:04.220
that's updating.

75
00:05:04.220 --> 00:05:10.990
And there's a lot of things that we can
erase or make less obvious in our code.

76
00:05:10.990 --> 00:05:15.230
There's a lot of details
that can often distract us.

77
00:05:15.230 --> 00:05:19.110
When we move away from that imperative
form and start to declare things.

78
00:05:19.110 --> 00:05:20.850
So it's similar to that sigma symbol,

79
00:05:20.850 --> 00:05:27.700
because a mathematician sees that symbol
and immediately knows what it represents.

80
00:05:27.700 --> 00:05:32.410
At glance I know, okay, I know that's
the sum of that geometric series or

81
00:05:32.410 --> 00:05:33.350
whatever the thing is.

82
00:05:34.750 --> 00:05:37.430
And what I'm hoping is that I
can show you a perspective on

83
00:05:37.430 --> 00:05:40.830
recursion where that starts to become
a little bit more true of your code.

84
00:05:40.830 --> 00:05:43.110
That you declare your
recursion in such a way that,

85
00:05:43.110 --> 00:05:48.140
at glance, somebody can see that and
recognize, I know what that's going to do.

86
00:05:49.360 --> 00:05:52.350
Just like if you had worked with
binary search trees a bunch.

87
00:05:52.350 --> 00:05:54.940
And then you saw somebody implement

88
00:05:54.940 --> 00:05:59.590
a depth first recursive
algorithm to traverse that list.

89
00:05:59.590 --> 00:06:02.690
You probably wouldn't need to
read through each line of that

90
00:06:02.690 --> 00:06:04.770
algorithm to figure out what it was doing.

91
00:06:04.770 --> 00:06:07.320
That would probably just be familiar
enough that you could recognize it.

92
00:06:08.880 --> 00:06:13.340
And I think we can actually go one
step further in terms of not just

93
00:06:13.340 --> 00:06:17.710
that we implement it, but
the style of how we implement it.

94
00:06:17.710 --> 00:06:22.270
To help us get a sense of when I glance
at that, I know what that's doing.

95
00:06:22.270 --> 00:06:25.620
And not just us, but, also,
the other readers of our code.

96
00:06:25.620 --> 00:06:29.620
So consistent with all the other same
principles that we've tried to apply.

97
00:06:29.620 --> 00:06:32.300
We're trying to move from
the imperative to the declarative.

98
00:06:32.300 --> 00:06:36.610
I think recursion is a very
important tool in that mix.

99
00:06:36.610 --> 00:06:39.120
It is our sigma symbol notation,

100
00:06:39.120 --> 00:06:42.940
if you will, to help that part of
the code be more recognizable.

101
00:06:44.200 --> 00:06:48.310
And recursion can certainly be done
poorly, there's no question about that.

102
00:06:49.340 --> 00:06:51.890
But I think, also,
recursion can be done well.

103
00:06:51.890 --> 00:06:54.990
And I think there's as much of an art
to that as there is a science.

104
00:06:56.330 --> 00:06:58.740
So if I start out with
a list of numbers and

105
00:06:58.740 --> 00:07:03.840
I talk about the iterative approach to
that, this is one way you might do that.

106
00:07:03.840 --> 00:07:08.930
If you were given that interview question,
sum up a list of numbers that we pass in.

107
00:07:08.930 --> 00:07:12.930
You might start out with a running
total that var sum = 0 on line 2.

108
00:07:12.930 --> 00:07:17.370
And then simply loop over it and
add the items into the sum, and

109
00:07:17.370 --> 00:07:18.254
then return the sum.

110
00:07:18.254 --> 00:07:24.330
Pretty straightforward,
the terminating condition for you in that,

111
00:07:24.330 --> 00:07:28.450
that stops the loops, is when we've
gone through the whole list of numbers.

112
00:07:30.530 --> 00:07:34.110
Now, that's fairly straightforward.

113
00:07:34.110 --> 00:07:36.169
Certainly probably not
groundbreaking to any of you.

114
00:07:37.780 --> 00:07:39.270
But you might not have ever thought,

115
00:07:39.270 --> 00:07:43.310
what would it mean to sum up
a list of numbers recursively?

116
00:07:43.310 --> 00:07:46.620
And so we need to talk about
two different things here.

117
00:07:46.620 --> 00:07:50.770
One is gonna be the notation choice
that we use, the syntax choice.

118
00:07:50.770 --> 00:07:54.590
And how we name things and position
things, that's one thing to consider.

119
00:07:54.590 --> 00:07:59.910
The other thing to consider is,
algorithmically, what would that mean?

120
00:07:59.910 --> 00:08:02.560
And I was hinting at that
just a moment ago when I said

121
00:08:02.560 --> 00:08:07.175
A loop where the index is moving
through the list can be modeled

122
00:08:07.175 --> 00:08:12.075
generally recursively as the list
getting shorter and shorter.

123
00:08:12.075 --> 00:08:15.562
Because if you think about
a list of five items, and

124
00:08:15.562 --> 00:08:19.061
you move the index from
position 0 to position 1.

125
00:08:19.061 --> 00:08:23.416
If we went about this recursively,
we could say that same list of five items,

126
00:08:23.416 --> 00:08:27.070
let me take the item off the list and
do something with it.

127
00:08:27.070 --> 00:08:30.340
And now I have a shorter list
which is just like if my

128
00:08:30.340 --> 00:08:32.530
index have moved to that position.

129
00:08:32.530 --> 00:08:34.670
So each time I paired down the list,

130
00:08:34.670 --> 00:08:38.420
it's like moving that iterator
through the indexes of the list.

131
00:08:40.340 --> 00:08:44.290
Now when you think about recursion and

132
00:08:44.290 --> 00:08:47.910
if it is one of those topics
that can be intimidating to you.

133
00:08:47.910 --> 00:08:52.470
I think it's often because we try
to get our brains wired up or

134
00:08:52.470 --> 00:08:55.420
wrapped up in the how does it work.

135
00:08:56.640 --> 00:09:01.250
And this is one of those places,
I don't necessarily always say this.

136
00:09:01.250 --> 00:09:06.120
But this is one of those places where
the intent is to actually not worry so

137
00:09:06.120 --> 00:09:08.090
much about how it happens.

138
00:09:08.090 --> 00:09:12.620
The intent is actually to take that
detail of iterating through a list and

139
00:09:12.620 --> 00:09:14.550
processing it item by item.

140
00:09:14.550 --> 00:09:18.327
Take that detail and try to make
it as declarative as possible so

141
00:09:18.327 --> 00:09:20.479
that the engine takes care of that.

142
00:09:20.479 --> 00:09:24.180
And what you're left with is a more
simple statement of the problem.

143
00:09:24.180 --> 00:09:28.190
So if you can twist your brain
to think about recursion as

144
00:09:28.190 --> 00:09:33.840
an isomorphism of the iteration,
as a way of expressing the iteration.

145
00:09:33.840 --> 00:09:37.280
Most of the time you can figure
out a recursive way to express

146
00:09:37.280 --> 00:09:39.440
a solution to any given
problem that you're doing.

147
00:09:39.440 --> 00:09:41.510
Of course if you're not doing iteration,

148
00:09:41.510 --> 00:09:42.980
you might have to get
a little bit more clever.

149
00:09:42.980 --> 00:09:45.290
But most problems involve iteration, and

150
00:09:45.290 --> 00:09:49.030
most iterations can then
be expressed as recursion.

151
00:09:49.030 --> 00:09:51.538
So this summation of numbers.

152
00:09:51.538 --> 00:09:53.215
If I were to take that idea to say,

153
00:09:53.215 --> 00:09:58.440
[COUGH] the way I paired down my list
is to take the first item off the list.

154
00:09:58.440 --> 00:10:02.670
And process it and
then recall myself with a shorter list and

155
00:10:02.670 --> 00:10:04.540
a shorter list and a shorter list.

156
00:10:04.540 --> 00:10:06.710
What would be our terminating condition?

157
00:10:08.230 --> 00:10:13.330
Here our terminating condition is i has
gotten to the last item in the list.

158
00:10:13.330 --> 00:10:16.762
What is our terminating condition
when the list is getting smaller?

159
00:10:23.220 --> 00:10:26.674
&gt;&gt; Kyle Simpson: How about list of
length 0, or length of list 1, I guess,

160
00:10:26.674 --> 00:10:29.310
would be the appropriate
way to think about.

161
00:10:29.310 --> 00:10:30.610
When my list gets down to 1,

162
00:10:30.610 --> 00:10:35.419
I don't need to recurse anymore cuz I've
dealt with all the values, make sense?

163
00:10:37.120 --> 00:10:39.520
Another way to state this if you
were trying to think about it more

164
00:10:39.520 --> 00:10:44.640
mathematically is that the sum of
a list of numbers is the same thing

165
00:10:44.640 --> 00:10:48.870
as the first number plus the sum
of the rest of the numbers.

166
00:10:50.750 --> 00:10:54.287
And you would literally write it out that
way if you were writing the recursive

167
00:10:54.287 --> 00:10:56.314
definition say in mathematical notation.

168
00:10:56.314 --> 00:11:01.960
You'd say the sigma of n is equal
to n plus the sigma of n minus 1.

169
00:11:01.960 --> 00:11:03.760
You'd literally say it like that,

170
00:11:03.760 --> 00:11:07.110
because it implies that there's
a recursive property to this solution.

171
00:11:08.220 --> 00:11:12.060
So let's try to express in
code as much as possible,

172
00:11:12.060 --> 00:11:16.150
let's encode into our code, those ideas.

173
00:11:16.150 --> 00:11:20.100
To try to help our code be as recognizable
of that algorithm as possible.

174
00:11:20.100 --> 00:11:23.710
There's nothing wrong with this algorithm,
it will perform well.

175
00:11:23.710 --> 00:11:26.320
But if someone doesn't know
what the algorithm is doing,

176
00:11:26.320 --> 00:11:29.160
they're going to have to read
through each line to understand it.

177
00:11:29.160 --> 00:11:31.570
That's the hallmark of imperative code.

178
00:11:31.570 --> 00:11:34.980
Can we get to the point where
somebody won't have to obsess so

179
00:11:34.980 --> 00:11:37.500
much about the how, and
recognize the what.

180
00:11:39.890 --> 00:11:44.590
So the first thing I'm gonna
do is try to signal that idea

181
00:11:44.590 --> 00:11:47.940
that there's the first item and
there's everything else.

182
00:11:47.940 --> 00:11:50.060
You might not have seen
the change that I made, but

183
00:11:50.060 --> 00:11:55.340
all I did now was name the first parameter
in the parameter list, and I named it sum.

184
00:11:55.340 --> 00:12:01.200
So now I don't need a variable to
keep track of the rest of the items.

185
00:12:01.200 --> 00:12:03.040
And I'm signalling
something here important,

186
00:12:03.040 --> 00:12:07.700
which is to say, if you were to call
some iteration the function sumIter

187
00:12:07.700 --> 00:12:12.494
with only one value,
it is its own sum right?.

188
00:12:13.550 --> 00:12:18.260
So that's why I named that first parameter
sum as opposed to num1 or something.

189
00:12:18.260 --> 00:12:22.870
I named it sum because in our
base case where there are no

190
00:12:22.870 --> 00:12:25.689
more numbers it is it's own sum.

191
00:12:25.689 --> 00:12:29.110
And my algorithm actually takes care of
that although it's not terribly obvious.

192
00:12:29.110 --> 00:12:32.850
My algorithm takes care of that
because the nums array here

193
00:12:32.850 --> 00:12:35.760
would already be empty if
only I passed in one number.

194
00:12:35.760 --> 00:12:38.816
Which means the for
loop would never even execute.

195
00:12:38.816 --> 00:12:43.378
It would do that initial check for
i less than nums.length, it's not.

196
00:12:43.378 --> 00:12:46.730
When i = 0 nums.length is 0,
it's not less.

197
00:12:46.730 --> 00:12:50.810
So it would never do the for loop, and
what would it do, just return the sum.

198
00:12:52.210 --> 00:12:56.926
So I just tweaked the way I expressed
the same algorithm to begin to try to

199
00:12:56.926 --> 00:13:01.369
signal to somebody,
&gt;&gt; Kyle Simpson: That there's

200
00:13:01.369 --> 00:13:05.101
a recursive nature to the solution
that I'm heading toward okay?

201
00:13:05.101 --> 00:13:08.143
It would not have been obvious
to you to do that except for

202
00:13:08.143 --> 00:13:12.080
the fact that where we're headed
is to try to announce they will.

203
00:13:12.080 --> 00:13:17.595
If that's my iterative solution
what is the recursive equivalent?

204
00:13:20.495 --> 00:13:26.575
So let's think about how every time
some Iter gets called it's automatically

205
00:13:26.575 --> 00:13:31.405
sorta taking the first item off the list
and shortening the list by one item.

206
00:13:31.405 --> 00:13:32.955
That part's already happening for us,

207
00:13:32.955 --> 00:13:34.415
we're not gonna need to
do any of that work.

208
00:13:36.230 --> 00:13:41.630
So really all we need to do is just
process something with the item and sum,

209
00:13:41.630 --> 00:13:46.420
and then call the sumIter with
the remaining nums, if there are any.

210
00:13:48.670 --> 00:13:53.610
So I'm gonna start out my sumRecur
with that exact same signature.

211
00:13:54.990 --> 00:14:00.060
And then I'm going to show that when
I call it I'm doing the same thing.

212
00:14:00.060 --> 00:14:03.840
And you'll notice that there's a match
now between the sum variable and

213
00:14:03.840 --> 00:14:05.440
that first number, 3.

214
00:14:05.440 --> 00:14:08.280
If I didn't pass any of the 4,
5, 6, 7, 8, 9,

215
00:14:08.280 --> 00:14:13.300
immediately we would expect it
to just return me back the sum.

216
00:14:13.300 --> 00:14:17.072
So what is our terminating condition,
or in recursive terms,

217
00:14:17.072 --> 00:14:18.790
what is our base condition?

218
00:14:24.360 --> 00:14:27.852
&gt;&gt; Kyle Simpson: How would we know that
the number 3 was the only thing that was

219
00:14:27.852 --> 00:14:28.548
passed in?

220
00:14:34.182 --> 00:14:35.393
&gt;&gt; Speaker 2: Your nums would be empty.

221
00:14:35.393 --> 00:14:38.770
&gt;&gt; Kyle Simpson: If nums.length
is equal to 0, right?

222
00:14:38.770 --> 00:14:40.950
That's our base check, our base case.

223
00:14:42.240 --> 00:14:44.946
And then if nums is greater than 0,

224
00:14:44.946 --> 00:14:48.839
that means there is at least
one number in the list.

225
00:14:48.839 --> 00:14:55.960
Then we need to call the sumRecur
function with that shorter list.

226
00:14:55.960 --> 00:14:59.200
And whatever it returns,
we need to add it to sum.

227
00:15:00.730 --> 00:15:02.526
So let's just encode
that directly in code.

228
00:15:02.526 --> 00:15:06.974
If nums.length = 0 return the sum

229
00:15:06.974 --> 00:15:11.571
otherwise return the sum variable +

230
00:15:11.571 --> 00:15:16.323
the summation of the rest of the list.

231
00:15:24.456 --> 00:15:27.832
&gt;&gt; Kyle Simpson: Now you notice in that
analysis that I'm not really getting all

232
00:15:27.832 --> 00:15:28.914
wrapped up around,

233
00:15:28.914 --> 00:15:33.120
well on the third stacked frame what is
the value of this and the value of that.

234
00:15:33.120 --> 00:15:36.690
And all of those questions that
oftentimes trip people up and

235
00:15:36.690 --> 00:15:38.820
intimidated people with recursion.

236
00:15:38.820 --> 00:15:42.710
I'm really trying to think about it more,
almost from this high level,

237
00:15:42.710 --> 00:15:46.810
almost abstract sense,
it's almost notation.

238
00:15:48.680 --> 00:15:52.098
We're still writing code, but
it's almost notational in nature.

239
00:15:52.098 --> 00:15:56.790
And I'm allowing all of the details of
that stepping through to be encoded in

240
00:15:56.790 --> 00:15:58.990
a couple of different places.

241
00:15:58.990 --> 00:16:02.410
One, I've encoded some of that
information into the parameter list.

242
00:16:02.410 --> 00:16:06.982
I've allowed the parameter list To
suggest that we're gonna pare down one,

243
00:16:06.982 --> 00:16:09.330
the first item off the list each time.

244
00:16:09.330 --> 00:16:11.687
And by the way, there's a name for
that in functional programming.

245
00:16:11.687 --> 00:16:15.801
That's called the head of the list, and
everything else is called the tail.

246
00:16:15.801 --> 00:16:19.306
So I literally could have
called this head,...tail,

247
00:16:19.306 --> 00:16:23.096
if we were trying to use the actual
sort of official terminology.

248
00:16:29.215 --> 00:16:32.268
&gt;&gt; Kyle Simpson: So did you see how
I went about that thought process?

249
00:16:34.415 --> 00:16:37.543
&gt;&gt; Kyle Simpson: It's starting first
with what would if I was gonna do it

250
00:16:37.543 --> 00:16:38.429
iteratively?

251
00:16:38.429 --> 00:16:43.924
And then saying well what's the recursive
algorithm to express the solution problem?

252
00:16:43.924 --> 00:16:47.113
And for things where you're
just looping over a list,

253
00:16:47.113 --> 00:16:49.621
it's usually just reduce the list by one.

254
00:16:49.621 --> 00:16:54.258
Sometimes you reduce the list by two,
or three, or four, or something else.

255
00:16:54.258 --> 00:16:58.972
But generally, the list is gonna get
reduced each time until the list is at

256
00:16:58.972 --> 00:17:04.237
some base condition, like empty, or
one item in it, or two items, or whatever.

257
00:17:04.237 --> 00:17:06.032
Generally that's gonna be the case.

258
00:17:06.032 --> 00:17:10.325
Now there's something
about this expression

259
00:17:10.325 --> 00:17:15.067
of the algorithm that has always,
a bit bugged me.

260
00:17:15.067 --> 00:17:19.378
It's more like an implementation detail,
and generally we shouldn't

261
00:17:19.378 --> 00:17:23.701
get too worried about micro nuances
of performance or implementation.

262
00:17:23.701 --> 00:17:28.782
But there's something that's
always bugged me about this

263
00:17:28.782 --> 00:17:36.308
particular kind of algorithm, because what
you'll note is that if nums is length one.

264
00:17:36.308 --> 00:17:41.967
That is like if I called sumRecur and
I passed in 3 and 4, that's it.

265
00:17:41.967 --> 00:17:46.421
Well, we would not be at a base condition,
because the nums.length is 1.

266
00:17:46.421 --> 00:17:50.092
So what we would do is say return 3.

267
00:17:50.092 --> 00:17:53.235
On line three, we'd say return 3 + and

268
00:17:53.235 --> 00:17:57.218
then we call sumRecur with
just a single item in it.

269
00:17:57.218 --> 00:18:01.923
And that would immediately come
in to the next recursive call,

270
00:18:01.923 --> 00:18:05.671
hit the base condition,
and come right back out.

271
00:18:05.671 --> 00:18:09.956
There's in a sense sort of
a wasted function call.

272
00:18:09.956 --> 00:18:14.829
If I could know now that I don't
really need to pass it in just

273
00:18:14.829 --> 00:18:19.709
to get it right back,
I could save that last function call.

274
00:18:19.709 --> 00:18:25.382
And again the performance difference would
be almost irrelevant especially at scale.

275
00:18:25.382 --> 00:18:29.533
This is really just something
that more bugs me that if

276
00:18:29.533 --> 00:18:33.500
I already know that I've
got this list of numbers,

277
00:18:33.500 --> 00:18:38.320
I kinda already know that addition
always takes two numbers.

278
00:18:38.320 --> 00:18:40.437
I could change this algorithm to say,

279
00:18:40.437 --> 00:18:43.356
why don't I list off the first
two items of the list?

280
00:18:43.356 --> 00:18:46.345
Cuz I'm always gonna be able
to put those two together or

281
00:18:46.345 --> 00:18:49.016
at least take off the first
two items in the list and

282
00:18:49.016 --> 00:18:52.716
if the list is empty then I know all
I need to to do is add them together.

283
00:18:52.716 --> 00:18:57.045
If the list is not empty,
put one of the items back on the list and

284
00:18:57.045 --> 00:18:58.202
send it back in.

285
00:18:58.202 --> 00:19:04.305
Cuz either I'll do those two, or
it'll do however many are left.

286
00:19:04.305 --> 00:19:10.353
So let me just tweak the expression of
this algorithm just slightly again.

287
00:19:10.353 --> 00:19:14.161
And now I've got as you see on line
1 I've got the sum parameter and

288
00:19:14.161 --> 00:19:15.387
the num parameters.

289
00:19:15.387 --> 00:19:20.372
So I've listed the first two items.

290
00:19:20.372 --> 00:19:23.930
So it's kind of like I'm
peeking ahead at the tail.

291
00:19:23.930 --> 00:19:28.875
I'm naming the first item of what we would
normally consider to be the tail and

292
00:19:28.875 --> 00:19:32.772
I'm peaking at it, just to see
if I am really done yet or not.

293
00:19:32.772 --> 00:19:37.020
Just eliminating one recursive step here.

294
00:19:37.020 --> 00:19:41.370
If I'm at the base case where
the numbs is equal to zero,

295
00:19:41.370 --> 00:19:46.184
that let's me know for
sure that I've passed in two numbers,

296
00:19:46.184 --> 00:19:50.273
the sum and the num, so
I just returned sum plus num.

297
00:19:50.273 --> 00:19:52.189
But if nums has more in it,

298
00:19:52.189 --> 00:19:56.559
let me just put that item kind
of back on the tail if you will.

299
00:19:56.559 --> 00:20:03.933
So on line 3, I call sum plus and
when I pass the list I add num back in.

300
00:20:03.933 --> 00:20:08.336
So I just put it back on the stack to
be considered on the next iteration.

301
00:20:08.336 --> 00:20:12.680
I'm really only reducing my
list by one each time but

302
00:20:12.680 --> 00:20:17.727
I'm doing a look ahead to avoid
that last unnecessary call.

303
00:20:17.727 --> 00:20:21.632
And I fully understand that looking at
this you would say that never occurred to

304
00:20:21.632 --> 00:20:23.119
me, why would I ever do that?

305
00:20:23.119 --> 00:20:24.362
It's just a little bit more noise.

306
00:20:24.362 --> 00:20:25.462
Why would I ever do that?

307
00:20:25.462 --> 00:20:28.233
There is a reason for that.

308
00:20:28.233 --> 00:20:30.178
You won't fully understand
that until a little bit later.

309
00:20:30.178 --> 00:20:38.126
But there is a reason why I might choose
to go that route with the expression.

310
00:20:38.126 --> 00:20:40.698
&gt;&gt; Speaker 3: What if you
already passed in one number?

311
00:20:40.698 --> 00:20:42.091
&gt;&gt; Kyle Simpson: I'm glad
you asked that question.

312
00:20:42.091 --> 00:20:44.144
I was just about to say.

313
00:20:44.144 --> 00:20:49.212
There is a subtle point here, which is
that we've eliminated one of the potential

314
00:20:49.212 --> 00:20:53.986
base cases, or at least we're not
covering one of the potential base cases,

315
00:20:53.986 --> 00:20:56.567
which is calling it with only one number.

316
00:20:56.567 --> 00:21:00.953
You can obviously solve that problem
by adding in another if statement.

317
00:21:00.953 --> 00:21:07.828
If sum is a number and num is undefined
then you know you're in that base case.

318
00:21:07.828 --> 00:21:12.186
I'm leaving out those kinds
of more trivial details but

319
00:21:12.186 --> 00:21:16.462
certainly there's lots of
other things you could do.

320
00:21:16.462 --> 00:21:20.009
You could do validation to make sure
that every item is actually a number.

321
00:21:20.009 --> 00:21:22.897
There's a bunch of details that
we're sort of glossing over.

322
00:21:22.897 --> 00:21:26.731
And that is one of them,
is that in choosing to go this direction,

323
00:21:26.731 --> 00:21:30.638
I've implied now that one of
the preconditions to use this utility

324
00:21:30.638 --> 00:21:33.800
correctly is you need to give
it at least two numbers.

