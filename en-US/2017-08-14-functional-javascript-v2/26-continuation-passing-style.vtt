WEBVTT

1
00:00:00.290 --> 00:00:05.540
&gt;&gt; Kyle Simpson: We talked about PTC as
a form to modify an existing recursive

2
00:00:05.540 --> 00:00:12.400
algorithm and
take advantage of the PTC optimization, or

3
00:00:12.400 --> 00:00:15.400
whatever you wanna call it, that behavior
that would be built into the browser.

4
00:00:15.400 --> 00:00:17.140
And we said, well,

5
00:00:17.140 --> 00:00:21.390
it's kind of an unfortunate reality
that not all the browsers have it yet.

6
00:00:23.160 --> 00:00:30.270
So, there's a different way of
approaching our algorithm when it's

7
00:00:30.270 --> 00:00:36.950
difficult to arrange it in the PTC form
directly, the way we were talking about.

8
00:00:36.950 --> 00:00:40.790
And this form is called CPS, which
stands for continuation-passing style.

9
00:00:40.790 --> 00:00:45.600
So, sometimes your algorithm will
be such that, like for example,

10
00:00:45.600 --> 00:00:50.390
if you need to make two recursive calls,
like a binary descent, well,

11
00:00:50.390 --> 00:00:53.980
two recursive calls that need
to happen in the same function,

12
00:00:53.980 --> 00:00:57.040
there's no way to have both
of them be at the end.

13
00:00:57.040 --> 00:01:00.330
So, it kind of leaves you in
this difficult position where

14
00:01:00.330 --> 00:01:05.280
you can't refactor to the PTC form.

15
00:01:05.280 --> 00:01:06.140
And in those cases,

16
00:01:06.140 --> 00:01:11.190
sometimes CPS, continuation-passing style,
can be an approach to that.

17
00:01:11.190 --> 00:01:12.800
We're not gonna dig a lot into this, but

18
00:01:12.800 --> 00:01:18.440
I just wanna briefly show you how
CPS could work for our example.

19
00:01:19.720 --> 00:01:22.250
What I'm doing here with
the sumRecur function,

20
00:01:22.250 --> 00:01:24.990
I'm still returning that
function on line 4.

21
00:01:24.990 --> 00:01:25.530
And this is,

22
00:01:25.530 --> 00:01:30.320
because this is definitely going to have
a signature that's inconvenient now.

23
00:01:30.320 --> 00:01:31.890
So, we need to go back to hiding it.

24
00:01:33.380 --> 00:01:37.840
But my inner recursive function,
you'll notice that my first

25
00:01:37.840 --> 00:01:42.750
position is an array, and
that array is gonna get shortened down.

26
00:01:42.750 --> 00:01:46.600
So, what I immediately do is say,
I'm gonna put all of my numbers onto my

27
00:01:46.600 --> 00:01:51.620
memory stack, but you'll notice that
the second argument is labeled cont,

28
00:01:51.620 --> 00:01:53.540
which stands for continuation.

29
00:01:53.540 --> 00:01:59.090
That's always gonna be a function,
and I started out there on line 5 as,

30
00:01:59.090 --> 00:02:05.060
there's a special term for a function that
returns whatever value is passed to it.

31
00:02:05.060 --> 00:02:09.100
That's just I was saving space on
the slides to do it in the arrow form, but

32
00:02:09.100 --> 00:02:11.240
that's the identity function,

33
00:02:11.240 --> 00:02:15.360
that's a special term for a function that
just returns whatever you give to it.

34
00:02:15.360 --> 00:02:19.970
So, that's the initial value for
this continuation that I pass in.

35
00:02:19.970 --> 00:02:24.240
Now, when I call my base
condition on line 10,

36
00:02:24.240 --> 00:02:29.070
if I am in the base condition you'll
notice I don't just return the sum

37
00:02:29.070 --> 00:02:34.080
I return the result of calling
the continuation function with that sum.

38
00:02:34.080 --> 00:02:38.870
So, if I was in the very first call,
that is I passed in only one number,

39
00:02:38.870 --> 00:02:42.920
then that would be calling the identity
function with whatever I passed in, and

40
00:02:42.920 --> 00:02:45.300
just passing back the value directly.

41
00:02:45.300 --> 00:02:49.570
But if I was deeper into
my stack of recursion,

42
00:02:49.570 --> 00:02:54.860
then I would just be passing sum into
some function that had been passed to me,

43
00:02:54.860 --> 00:02:56.510
that had been passed to me,
that had been passed.

44
00:02:57.570 --> 00:03:00.620
So, what does that
non-base case look like?

45
00:03:00.620 --> 00:03:05.530
You notice again,
instead of calling sum plus recur,

46
00:03:05.530 --> 00:03:11.330
I call recur with my list of nums,
that's my running array list if you will,

47
00:03:11.330 --> 00:03:15.480
but my last position there is a function.

48
00:03:15.480 --> 00:03:20.110
It's another continuation,
a continuation that takes a v and

49
00:03:20.110 --> 00:03:26.180
calls whatever the current continuation
is with that plus the sum.

50
00:03:26.180 --> 00:03:29.610
So, I know it can be really hard to
like unwind with all that's happening.

51
00:03:29.610 --> 00:03:33.320
But just to give you sort of a visual
instinct of what's occurring,

52
00:03:33.320 --> 00:03:37.820
we're essentially wrapping up
the stuff that would happen

53
00:03:37.820 --> 00:03:42.850
after the recursive call in a function and
passing that along.

54
00:03:42.850 --> 00:03:47.220
So, in the previous one when we did PTC,
we calculated the partial sum and

55
00:03:47.220 --> 00:03:48.360
passed it along.

56
00:03:48.360 --> 00:03:52.360
Here we're actually like calculating
the next set of steps to do and

57
00:03:52.360 --> 00:03:53.520
passing that along.

58
00:03:53.520 --> 00:03:56.630
We're wrapping it up in a function and
passing it along.

59
00:03:56.630 --> 00:04:00.490
So, we pass that function along, and
then we pass another function along and

60
00:04:00.490 --> 00:04:01.720
another function along.

61
00:04:01.720 --> 00:04:04.900
And at the very end, whenever we're
done with the base condition and

62
00:04:04.900 --> 00:04:09.150
we call line 10,
we're gonna fire off that function, and

63
00:04:09.150 --> 00:04:13.890
it's gonna call all the functions
in that super nested call step.

64
00:04:15.070 --> 00:04:19.470
And all of them are in PTC form,
cuz as you see they're on line 11,

65
00:04:19.470 --> 00:04:23.720
they've all been positioned as PTC.

66
00:04:23.720 --> 00:04:26.970
So, as long as PTC is in effect,
even if that ends up

67
00:04:26.970 --> 00:04:31.010
resulting in a million function
calls all happening all at once.

68
00:04:31.010 --> 00:04:33.020
There won't be any stack growth there.

69
00:04:33.020 --> 00:04:36.820
We'll just make all of those calls
in fixed memory, and then be done.

70
00:04:36.820 --> 00:04:43.370
So, the purpose again of the CPS is if I
have some stuff that I need to do after

71
00:04:43.370 --> 00:04:48.090
my recursive call, like, for example,
make another recursive call, or whatever.

72
00:04:48.090 --> 00:04:53.020
I can take that code and instead of
doing it later wrap it up in a closure,

73
00:04:53.020 --> 00:04:58.130
wrap it up in a continuation, and
pass it along and do that work later.

74
00:04:58.130 --> 00:05:01.120
Defer that work until later and
later, and later.

75
00:05:01.120 --> 00:05:04.490
And then, at the very end,
do all of those partial sets of work.

76
00:05:06.010 --> 00:05:08.730
So, that's a strategy for
doing more complex things, and

77
00:05:08.730 --> 00:05:11.850
by the way,
in the case where we talked about.

78
00:05:11.850 --> 00:05:15.340
You obviously don't need to do it when
you're summing up a list of numbers,

79
00:05:15.340 --> 00:05:16.890
this would be a much harder way.

80
00:05:16.890 --> 00:05:20.930
But, if we were talking, for example,
about that traversing a binary list thing,

81
00:05:20.930 --> 00:05:23.930
you could actually have
a continuation of a continuation.

82
00:05:23.930 --> 00:05:29.510
You end up doing inside on line 12 you
would be creating another continuation for

83
00:05:29.510 --> 00:05:31.690
the second part in passing it along.

84
00:05:31.690 --> 00:05:35.170
It gets kind of hairy, but you can diagram
all this out and say, well, that's

85
00:05:35.170 --> 00:05:38.630
a function that calls that, that calls
that, and then just at the very end you

86
00:05:38.630 --> 00:05:42.660
know the base case just sort of fires off
all those calls and does all that work.

87
00:05:44.310 --> 00:05:47.520
So, CPS is a form,
it's definitely more advanced technique.

88
00:05:47.520 --> 00:05:50.795
It takes a lot of practice, but
it's a form that you can express

89
00:05:50.795 --> 00:05:55.240
even more advanced versions of
recursion still in PTC form.

90
00:05:58.150 --> 00:06:02.670
By the way, some, not in JavaScript,
but in some systems,

91
00:06:02.670 --> 00:06:08.230
there are either pre-processors, or the
compiler itself is able to take a piece

92
00:06:08.230 --> 00:06:13.060
of code that is written in this, that is
written in a way that is minimal to this.

93
00:06:13.060 --> 00:06:16.090
And automatically rewrite that code for
you.

94
00:06:16.090 --> 00:06:20.280
I'm optimistic that maybe eventually we
get a tool where somebody can take your

95
00:06:20.280 --> 00:06:25.260
recursive function and rewrite it into
this PTC form much like what Bable does

96
00:06:25.260 --> 00:06:28.460
to transform your code,
I'm optimistic that at some point

97
00:06:28.460 --> 00:06:31.850
it might require you to be using something
like typescript, or I don't know.

98
00:06:31.850 --> 00:06:34.780
But it'd be really nice if somebody
could make one of those tools for

99
00:06:34.780 --> 00:06:37.370
JavaScript the way they exist
in some other languages,

100
00:06:37.370 --> 00:06:39.130
that way we don't have to
write all this ugliness.

101
00:06:39.130 --> 00:06:41.310
We could just give it
our recursive function,

102
00:06:41.310 --> 00:06:45.100
and it would figure out how to wrap
it all up in those continuations.

103
00:06:48.140 --> 00:06:49.521
Any questions about CPS?

104
00:06:52.335 --> 00:06:56.115
&gt;&gt; Kyle Simpson: Now, what about this case
where we're stuck in the future where

105
00:06:56.115 --> 00:06:59.055
[LAUGH] we don't get PTC,
or we don't have PTC, or

106
00:06:59.055 --> 00:07:03.230
we need to run it in browser
that doesn't yet support PTC.

107
00:07:03.230 --> 00:07:05.010
Are we just lost?

108
00:07:05.010 --> 00:07:08.820
Is there no way to deal with some
kind of recurs of algorithms.

