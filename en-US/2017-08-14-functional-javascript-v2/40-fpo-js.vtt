WEBVTT

1
00:00:00.000 --> 00:00:03.925
&gt;&gt; Kyle Simpson: I briefly wanna point
out a utility that may be useful in

2
00:00:03.925 --> 00:00:05.129
your learning.

3
00:00:05.129 --> 00:00:08.902
There are lots of long well-established
functional programming libraries

4
00:00:08.902 --> 00:00:09.487
out there.

5
00:00:09.487 --> 00:00:14.770
Ramda, lodash/fp, and probably a dozen
others that you might pick from.

6
00:00:14.770 --> 00:00:17.857
So it might seem a little bit of
hubris for me to have come along so

7
00:00:17.857 --> 00:00:21.668
late to the game and say I can make
a new functional programming library.

8
00:00:21.668 --> 00:00:24.817
What could I possibly have
to offer to the game?

9
00:00:24.817 --> 00:00:27.654
This library,
it looks like it's pronounce F-P-O.

10
00:00:27.654 --> 00:00:30.924
It's actually pronounced f-po.

11
00:00:30.924 --> 00:00:34.226
It says there on the README,
that's how you pronounce this.

12
00:00:34.226 --> 00:00:35.731
It's called f-po.

13
00:00:35.731 --> 00:00:39.667
I mostly did that because F-P-O has
a very specific meaning for designers.

14
00:00:39.667 --> 00:00:43.163
It means for placement only and
I didn't want that to be confused.

15
00:00:43.163 --> 00:00:46.222
So this library's pronounced f-po.

16
00:00:46.222 --> 00:00:49.840
But there's a very specific problem
that I ran into in trying to learn and

17
00:00:49.840 --> 00:00:53.419
apply functional programming to my
techniques, to my code patterns.

18
00:00:53.419 --> 00:00:56.791
And this library was born out of trying
to solve that particular problem.

19
00:00:56.791 --> 00:00:59.672
So just real quickly I
wanna show you some stuff.

20
00:00:59.672 --> 00:01:03.261
And if you're interested,
you might check out the library and

21
00:01:03.261 --> 00:01:04.963
see if that's useful to you.

22
00:01:04.963 --> 00:01:08.290
So this is a comparison between
doing reduce the standard way,

23
00:01:08.290 --> 00:01:12.121
the way that a normal functional
programming library would provide it,

24
00:01:12.121 --> 00:01:14.155
where you have to give it the reducer.

25
00:01:14.155 --> 00:01:17.837
You have to give it the initial value and

26
00:01:17.837 --> 00:01:22.645
you have to give it the list
of values to operate on.

27
00:01:22.645 --> 00:01:28.664
And that ordering of
arguments is set in stone.

28
00:01:28.664 --> 00:01:31.244
That's the way the utility's
provided to you.

29
00:01:31.244 --> 00:01:34.608
If you already know the reducer
before the initial value and

30
00:01:34.608 --> 00:01:37.239
that before the list, everything's great.

31
00:01:37.239 --> 00:01:40.773
But I ran into these situations where
I would know the lists now, but

32
00:01:40.773 --> 00:01:43.012
I wouldn't know the reducer until later.

33
00:01:43.012 --> 00:01:46.951
I would want to specialize my
reduce function in a different

34
00:01:46.951 --> 00:01:50.514
order than the order that
the arguments were listed.

35
00:01:50.514 --> 00:01:55.260
You might recall earlier in this course,
we talked about various argument

36
00:01:55.260 --> 00:01:59.043
juggling like flip and
reverse args, and stuff like that.

37
00:01:59.043 --> 00:02:03.468
And those can get awfully confusing
when you string all of those adaptations

38
00:02:03.468 --> 00:02:06.788
together just to get the arguments
in a different order so

39
00:02:06.788 --> 00:02:09.450
that you can specialize them.

40
00:02:09.450 --> 00:02:13.211
So what FPO does is it provides
you a different style of

41
00:02:13.211 --> 00:02:17.992
calling which uses an idiom referred
to as named-argument style.

42
00:02:17.992 --> 00:02:23.717
You'll notice that you pass in an object
to the reduce function there on line 10.

43
00:02:23.717 --> 00:02:28.170
And you list out the arguments by
name according to, in whatever order,

44
00:02:28.170 --> 00:02:32.561
because obviously object properties
don't matter in terms of order.

45
00:02:32.561 --> 00:02:34.649
And you notice you can
even skip over ones,

46
00:02:34.649 --> 00:02:38.189
I don't provide the initial value cuz
I don't need it in this scenario.

47
00:02:38.189 --> 00:02:44.190
Named-arguments, this idiom, there are
some languages that support it natively.

48
00:02:44.190 --> 00:02:48.311
JavaScript we can do it syntactically
like that and with destructuring.

49
00:02:48.311 --> 00:02:53.180
But named-argument style gets around
the problem of these arguments are in

50
00:02:53.180 --> 00:02:55.166
an inconvenient order for me.

51
00:02:55.166 --> 00:03:00.558
Or it also gets around the problem of,
I wanna skip over this argument entirely.

52
00:03:00.558 --> 00:03:03.888
It's a style of programming that allows
us to not have that particular problem.

53
00:03:03.888 --> 00:03:09.044
The tradeoff is now you need to know what
the argument is supposed to be called.

54
00:03:09.044 --> 00:03:13.798
Cuz if you call it arr2 instead of arr,
the utility isn't gonna find it.

55
00:03:13.798 --> 00:03:14.906
It's not gonna know what it is.

56
00:03:14.906 --> 00:03:16.581
So you do have to know it.

57
00:03:16.581 --> 00:03:20.291
But I chose to use a pretty standard
set of naming conventions, so

58
00:03:20.291 --> 00:03:23.542
that those parameter names
are pretty easy to remember.

59
00:03:23.542 --> 00:03:26.832
If it's a function,
it's almost always called fn.

60
00:03:26.832 --> 00:03:30.154
If it's a list,
it's almost always called arr for array.

61
00:03:30.154 --> 00:03:33.513
So it should be fairly straightforward
to learn the parameter names.

62
00:03:33.513 --> 00:03:36.624
And then you don't have
the argument order juggling.

63
00:03:36.624 --> 00:03:39.230
This is a comparison here.

64
00:03:39.230 --> 00:03:43.552
If I were to do that same
thing with a normal functional

65
00:03:43.552 --> 00:03:48.163
programming library,
we'd have to curry the utility,

66
00:03:48.163 --> 00:03:53.080
curry the flip of the partial
from the right of this utility.

67
00:03:53.080 --> 00:03:55.331
We didn't even talk about
about partial right, but

68
00:03:55.331 --> 00:03:58.464
it's partial from the right-hand
side instead of going left to right.

69
00:03:58.464 --> 00:04:00.965
So that kind of code works, but man,

70
00:04:00.965 --> 00:04:04.775
it's awfully more confusing
to me whenever I see that.

71
00:04:04.775 --> 00:04:08.196
Whenever you see all that
juggling of argument orders.

72
00:04:08.196 --> 00:04:11.720
That is what it looks like if you
want to do currying with FPO.

73
00:04:11.720 --> 00:04:14.244
Every function is automatically curried.

74
00:04:14.244 --> 00:04:18.944
So here I call FPO.reduce and
I provide only the array.

75
00:04:18.944 --> 00:04:23.198
And then later I can provide
the reducer function and

76
00:04:23.198 --> 00:04:26.202
not even provide the initial value.

77
00:04:26.202 --> 00:04:29.592
It automatically is curried
across object properties.

78
00:04:29.592 --> 00:04:34.485
So hopefully that kind of style maybe
would be more helpful to you if you find

79
00:04:34.485 --> 00:04:39.548
yourself running up against the argument
order juggling problem that I did.

80
00:04:39.548 --> 00:04:41.510
FPO might be a useful library for you.

