WEBVTT

1
00:00:00.460 --> 00:00:03.380
&gt;&gt; Kyle Simpson: So excercise four.

2
00:00:03.380 --> 00:00:06.690
You're given an empty
implementation of pick numbers and

3
00:00:06.690 --> 00:00:10.060
asked to implement the logic as described.

4
00:00:10.060 --> 00:00:15.010
So you need to keep it pure other than of
course the fact that there is randomness.

5
00:00:15.010 --> 00:00:16.110
Need to keep it pure and

6
00:00:16.110 --> 00:00:21.250
have it generate a new lottery number each
times it's called adding it to the list.

7
00:00:21.250 --> 00:00:24.760
But it needs to keep that
list in sorted order and

8
00:00:24.760 --> 00:00:26.660
also make sure there's no duplicates.

9
00:00:27.880 --> 00:00:34.584
So this was the setup given,
lotteryNum will do that generation for

10
00:00:34.584 --> 00:00:39.537
you, generate numbers in
the range of 1 to 58.

11
00:00:39.537 --> 00:00:43.739
And then pick number is the function
you wanted to implement and

12
00:00:43.739 --> 00:00:46.520
lucky lottery numbers is the variables.

13
00:00:46.520 --> 00:00:51.524
It's the list that you
want to add stuff into.

14
00:00:51.524 --> 00:00:56.118
[COUGH] So a couple of things we're gonna
wanna pass in luckyLottertNumbers instead

15
00:00:56.118 --> 00:01:00.990
of have pickNumbers automatically assuming
that because that would be a side effects.

16
00:01:00.990 --> 00:01:05.790
So for sure we're gonna wanna
pass in luckyLotteryNumbers, but

17
00:01:05.790 --> 00:01:09.260
then what we talked about
before was if we didn't

18
00:01:09.260 --> 00:01:13.750
see the implementation of pickNumber here,
we might wonder whether or not somebody

19
00:01:13.750 --> 00:01:18.010
was going to mutate that list out from
underneath us, which would be a bad thing.

20
00:01:18.010 --> 00:01:23.220
So we could increase the reasonability
of this code, the trustability,

21
00:01:23.220 --> 00:01:29.260
by using object.freeze on
our luckyLotteryNumbers.

22
00:01:29.260 --> 00:01:35.106
Now there is,
&gt;&gt; Kyle Simpson: That is then,

23
00:01:35.106 --> 00:01:39.137
since it's not gonna be creating
the side effects in there,

24
00:01:39.137 --> 00:01:43.270
we're gonna need to save that
result into another variable.

25
00:01:43.270 --> 00:01:49.360
Now at this point, I like to just
overwrite luckyLotteryNumbers,

26
00:01:49.360 --> 00:01:52.200
with the return result.

27
00:01:52.200 --> 00:01:56.210
Because I'm explicitly saying it's okay
for you to give me that list back, and

28
00:01:56.210 --> 00:02:00.000
I'm saying very specifically
I know the list is updating.

29
00:02:00.000 --> 00:02:04.410
It's in a contained way it's updating,
only in this for loop, that sort of thing.

30
00:02:04.410 --> 00:02:06.290
Functional programmers like to use consts,

31
00:02:06.290 --> 00:02:09.010
because they don't like
to reassign to stuff.

32
00:02:09.010 --> 00:02:12.609
So a functional programmer actually
would have probably modeled this

33
00:02:12.609 --> 00:02:15.476
as a list operation, like a map or
something like that,

34
00:02:15.476 --> 00:02:18.710
where they wouldn't have
needed to worry about it.

35
00:02:18.710 --> 00:02:22.348
But this is one of the reasons why I
dislike the const keyword because I think

36
00:02:22.348 --> 00:02:24.267
it unnecessarily handcuffed me here.

37
00:02:24.267 --> 00:02:29.138
I would've had to have some other location
to store all the intermediary versions of

38
00:02:29.138 --> 00:02:30.890
that luckyLotteryNumbers.

39
00:02:30.890 --> 00:02:32.720
Maybe in some temp variable or something.

40
00:02:32.720 --> 00:02:36.390
So, I'm just gonna go ahead and
reassign my list each time and

41
00:02:36.390 --> 00:02:40.810
then I know at the end that my
list is ready to print out.

42
00:02:42.700 --> 00:02:49.765
So, let's start defining pickNumber,
we want to receive a list.

43
00:02:49.765 --> 00:02:52.271
Now first things first
regardless of whether or

44
00:02:52.271 --> 00:02:56.520
not that was passed in as immutable or
not, we wanna treat it as immutable.

45
00:02:56.520 --> 00:02:58.270
So we wanna make a new list of numbers.

46
00:02:58.270 --> 00:03:03.454
I'm just gonna call it nums and we're for
sure gonna wanna return that list of

47
00:03:03.454 --> 00:03:09.858
numbers.
&gt;&gt; Kyle Simpson: Now we are only

48
00:03:09.858 --> 00:03:15.310
responsible for calling lotteryNum once
because that's all that pickNumber does.

49
00:03:15.310 --> 00:03:19.220
It's just supposed to add
one number to our list.

50
00:03:19.220 --> 00:03:23.070
But we do need to make sure that the
number that we choose is not already in

51
00:03:23.070 --> 00:03:27.020
the list list,
rather than add it to the list and

52
00:03:27.020 --> 00:03:29.930
have to unique the list and
do it again or something.

53
00:03:29.930 --> 00:03:33.677
We wanna check to make sure that
it's not already in the list.

54
00:03:33.677 --> 00:03:36.900
So that could be done with
some simple looping logic.

55
00:03:38.460 --> 00:03:42.740
Basically generate a new lottery number,
and if it's in the list, do it again, and

56
00:03:42.740 --> 00:03:45.759
do it again until we get a lottery
number that's not already in the list.

57
00:03:47.110 --> 00:03:49.250
Your flavor of that
might look a different.

58
00:03:49.250 --> 00:03:50.830
I'm gong to use a do while loop.

59
00:03:52.420 --> 00:03:57.060
So my while condition is gonna be; while
the number that I'm about to generate

60
00:03:57.060 --> 00:03:59.630
is not in nums already.

61
00:04:01.290 --> 00:04:06.477
I'm sorry, while it is in nums,
so nums.indexOf the number

62
00:04:06.477 --> 00:04:10.865
that I just generated is greater than or
equal to 0 or

63
00:04:10.865 --> 00:04:16.013
not equal to -1.
&gt;&gt; Kyle Simpson: How

64
00:04:16.013 --> 00:04:17.060
are we you wanna check for?

65
00:04:17.060 --> 00:04:22.130
But we wanna make sure that we're gonna
keep looping if we found that number.

66
00:04:22.130 --> 00:04:24.100
So, I'm gonna have that variable here and

67
00:04:24.100 --> 00:04:29.900
I'm going to just generate
the new lottery number.

68
00:04:31.150 --> 00:04:35.766
So that loop's gonna loop over, and
no matter how many times it has to run,

69
00:04:35.766 --> 00:04:40.606
it's gonna run until we generate a number
that's not already in the list, and

70
00:04:40.606 --> 00:04:45.689
then exit.
&gt;&gt; Kyle Simpson: Now that

71
00:04:45.689 --> 00:04:50.474
I know that I have that number,
I need to add to my list,

72
00:04:50.474 --> 00:04:54.430
since I am fully in
control of the nums array,

73
00:04:54.430 --> 00:04:59.280
mutating that list is
perfectly reasonable.

74
00:04:59.280 --> 00:05:03.090
If that array were not something
I was fully in control of,

75
00:05:03.090 --> 00:05:07.200
I would instead want to
concatenate onto that list and

76
00:05:07.200 --> 00:05:09.740
maybe save it into some other variable or
something.

77
00:05:09.740 --> 00:05:12.460
That way I wasn't mutating
somebody else's value.

78
00:05:12.460 --> 00:05:14.550
So either of those two ways works.

79
00:05:14.550 --> 00:05:17.240
This way is less performant.

80
00:05:17.240 --> 00:05:20.360
And the reason why I don't wanna
do less performant is because

81
00:05:20.360 --> 00:05:25.540
I'm fully in control of that value so
it doesn't matter to the outside world.

82
00:05:25.540 --> 00:05:28.850
It might matter to the readability
of my picNumber function, but

83
00:05:28.850 --> 00:05:30.920
it won't matter to the outside world.

84
00:05:30.920 --> 00:05:34.450
So, there's a trade-off to be made,
do I care about the performance?

85
00:05:34.450 --> 00:05:35.960
Let's assume that I do,

86
00:05:35.960 --> 00:05:39.250
that I wanna make sure that this
runs as efficiently as possible.

87
00:05:39.250 --> 00:05:45.410
So, we can just mutate the num's RI.
&gt;&gt; Kyle Simpson: And

88
00:05:45.410 --> 00:05:51.075
then return the nums.
&gt;&gt; Kyle Simpson: So

89
00:05:51.075 --> 00:05:56.240
if I test that code over in
a browser in the console.

90
00:05:59.000 --> 00:06:00.570
Did I type it wrong?

91
00:06:00.570 --> 00:06:03.528
Lottery known there we go.
&gt;&gt; Speaker 2: I don't think you're

92
00:06:03.528 --> 00:06:08.517
assigning the list to nums yet either.
&gt;&gt; Kyle Simpson: Maybe not.

93
00:06:08.517 --> 00:06:10.970
All right,
cause I started that's a good point.

94
00:06:10.970 --> 00:06:11.900
I meant to come back to that.

95
00:06:11.900 --> 00:06:13.290
So I started out with an empty list,

96
00:06:13.290 --> 00:06:18.110
then I said, well,
am I gonna copy over the list into nums?

97
00:06:18.110 --> 00:06:21.630
Or should I just start nums
out as a copy of the list?

98
00:06:22.730 --> 00:06:25.930
That's a simpler way of doing it, so
rather than start out with an empty list,

99
00:06:25.930 --> 00:06:30.250
I'm gonna copy over list and
make that be the initial value for nums.

100
00:06:30.250 --> 00:06:34.618
So I'm gonna say list.slice,
that's how I copy an array.

101
00:06:34.618 --> 00:06:38.730
There's multiple ways to copy, but
slice will make me a new copy of an array.

102
00:06:39.830 --> 00:06:42.125
It's a shallow copy but
a copy nonetheless.

103
00:06:52.379 --> 00:06:53.737
&gt;&gt; Kyle Simpson: Now, the final thing that

104
00:06:53.737 --> 00:06:57.880
the read me said was make sure that those
numbers are sorted in ascending order.

105
00:06:59.170 --> 00:07:02.140
So I need to make sure
to sort the nums list.

106
00:07:02.140 --> 00:07:05.898
So I'm gonna say nums.sort

107
00:07:11.740 --> 00:07:13.296
&gt;&gt; Kyle Simpson: And a quick and

108
00:07:13.296 --> 00:07:18.752
dirty way of sorting,
is to do that subtraction.

109
00:07:18.752 --> 00:07:22.140
You could have done your if statements
if you wanted to write your own sort.

110
00:07:22.140 --> 00:07:27.240
If you use the built in sort,
understand that the built in sort is

111
00:07:27.240 --> 00:07:30.880
going to default to
lexical graphic sorting,

112
00:07:30.880 --> 00:07:36.855
which means that the number one
would sort after the number ten.

113
00:07:36.855 --> 00:07:41.027
It's not what you want, so
to do a numeric sort you do need to

114
00:07:41.027 --> 00:07:45.869
actually do a numerical creation like
that or do your if statements so

115
00:07:45.869 --> 00:07:52.258
you can just use the build in comparative.
&gt;&gt; Kyle Simpson: So

116
00:07:52.258 --> 00:08:01.430
let's try that again,
&gt;&gt; Kyle Simpson: Run it again.

117
00:08:03.270 --> 00:08:04.970
I'll just run it a few times and

118
00:08:04.970 --> 00:08:09.167
visually verify that I'm always getting
a sorted list with no duplicates.

