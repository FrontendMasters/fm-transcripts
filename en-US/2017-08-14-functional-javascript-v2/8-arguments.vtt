WEBVTT

1
00:00:00.250 --> 00:00:03.840
&gt;&gt; Kyle Simpson: So we're starting to
evolve that mindset of purity towards, and

2
00:00:03.840 --> 00:00:05.020
we're not fully there yet but

3
00:00:05.020 --> 00:00:08.110
now we understand a few more
sides of the Rubik's Cube.

4
00:00:08.110 --> 00:00:09.870
It's about the observational output and

5
00:00:09.870 --> 00:00:13.760
it's really about my level of confidence
that it's going to do what I expect.

6
00:00:13.760 --> 00:00:18.990
And it's important for us,
as the authors of code to give as much

7
00:00:18.990 --> 00:00:22.770
of a clue to the reader as we can
that they can trust something.

8
00:00:23.970 --> 00:00:28.870
The more we do to erode that trust,
the harder we make the code to read.

9
00:00:30.550 --> 00:00:35.390
It's on us, the author of the code,
to signal to them this code

10
00:00:35.390 --> 00:00:37.570
is going to behave the way you
think it's going to behave.

11
00:00:39.620 --> 00:00:44.480
We shouldn't do stuff like make a getter
that returns random numbers okay?

12
00:00:45.480 --> 00:00:49.345
Let's talk about arguments, an unsung,

13
00:00:49.345 --> 00:00:54.040
not particularly well thought of or
often thought of part of

14
00:00:54.040 --> 00:00:56.760
what makes a function a function
is how its arguments work.

15
00:00:56.760 --> 00:01:01.269
And I want to spend some time thinking
about, talking about arguments.

16
00:01:04.290 --> 00:01:08.920
There's a characteristic, or
a term used to describe something about

17
00:01:08.920 --> 00:01:12.860
functions that is going to turn
out to be pretty important to us.

18
00:01:13.930 --> 00:01:17.190
Hopefully these terms
aren't that scary to you.

19
00:01:17.190 --> 00:01:22.100
If I have a function that takes only one
parameter, expects only one parameter,

20
00:01:22.100 --> 00:01:25.199
there's a special term for that kind of
a function, it's called a unary function.

21
00:01:27.180 --> 00:01:30.860
On the other hand if I have a function
that expects two parameters,

22
00:01:30.860 --> 00:01:35.690
like the one on line 7, that function
has a special term called binary.

23
00:01:36.980 --> 00:01:44.244
Unary for one, binary for two, three or
more has another term called n-ary.

24
00:01:50.554 --> 00:01:52.107
&gt;&gt; Kyle Simpson: So unary and binary,

25
00:01:52.107 --> 00:01:58.160
you typically don't like to see a lot of
n-ary functions in a functional program.

26
00:01:59.580 --> 00:02:03.440
Three, four, ten inputs,
those are really hard to work with.

27
00:02:03.440 --> 00:02:07.650
It's also just really hard to
remember what all of those are.

28
00:02:07.650 --> 00:02:11.410
So generally speaking,
you probably want to shy away from

29
00:02:11.410 --> 00:02:15.480
designing your functions with
15 different input parameters.

30
00:02:15.480 --> 00:02:19.135
Try to stick to your unary and
binary functions wherever possible.

31
00:02:21.015 --> 00:02:25.305
Now turns out that sometimes you'll have
a function that expects more arguments and

32
00:02:25.305 --> 00:02:30.125
you need to produce a unary or
a binary function from it.

33
00:02:31.305 --> 00:02:35.415
So we're doing a higher-level operation
here, a higher-order operation,

34
00:02:35.415 --> 00:02:39.240
because I'm taking,
you'll see unary there on line 1.

35
00:02:39.240 --> 00:02:42.690
That is a function that takes
a function as an input,

36
00:02:42.690 --> 00:02:47.110
makes a new function that
only takes one argument.

37
00:02:48.180 --> 00:02:52.290
And when that new function is called,
it only passes along the first argument.

38
00:02:54.140 --> 00:02:58.770
So I make g as the unary(f),

39
00:02:58.770 --> 00:03:03.810
f is a function on line 13 that
can take any number of arguments.

40
00:03:03.810 --> 00:03:05.080
There's a special term for that,

41
00:03:05.080 --> 00:03:09.300
it's called a variatic function cuz
it can take any number of arguments.

42
00:03:11.720 --> 00:03:17.670
g takes that variatic f and
turns it into a unary function.

43
00:03:17.670 --> 00:03:23.440
So even on line 20 when I pass
in multiple inputs (1,2,3,4)

44
00:03:23.440 --> 00:03:27.670
I still only found one input
to the underlying f function.

45
00:03:28.960 --> 00:03:33.430
That's why it printed out
the array of just the value 1.

46
00:03:33.430 --> 00:03:39.190
So I've constrained the inputs to that
function, that's what unary does.

47
00:03:39.190 --> 00:03:42.030
Binary does the same thing, but
it does it with two arguments.

48
00:03:43.080 --> 00:03:47.960
h is the binary wrapper
around that variadic f.

49
00:03:47.960 --> 00:03:52.012
On line 21,
when we call h with multiple inputs,

50
00:03:52.012 --> 00:03:56.365
we only get two values printed,
the array of 1 and 2.

51
00:03:59.043 --> 00:04:01.819
&gt;&gt; Kyle Simpson: These utilities,
unary and binary as described here,

52
00:04:01.819 --> 00:04:05.022
exist in all of your common
functional programming libraries.

53
00:04:05.022 --> 00:04:08.578
And they turn out to be really
useful to us in terms of

54
00:04:08.578 --> 00:04:11.156
describing I've got this problem.

55
00:04:11.156 --> 00:04:15.564
I need to take this function that
expects multiple things and make it so

56
00:04:15.564 --> 00:04:18.715
it only expects one or
two or something like that.

57
00:04:18.715 --> 00:04:21.758
It's a way to adapt that function
that turns out to be very useful.

58
00:04:25.604 --> 00:04:29.412
&gt;&gt; Kyle Simpson: Sometimes you'll have a
function that takes arguments in a certain

59
00:04:29.412 --> 00:04:32.100
order, and
that order is inconvenient to you.

60
00:04:33.460 --> 00:04:36.850
Sometimes that order will not be
the order that you wanna go in, and so

61
00:04:36.850 --> 00:04:39.495
you could define a utility
like this one called flip.

62
00:04:39.495 --> 00:04:42.747
Which takes a function,
produces a new one,

63
00:04:42.747 --> 00:04:45.750
which will flip the first two arguments.

64
00:04:47.040 --> 00:04:51.100
You'll notice that I have
arg1 is flipped there.

65
00:04:52.130 --> 00:04:56.880
arg1 from line 2 shows up in
the second position on line 3, and

66
00:04:56.880 --> 00:05:01.340
vice versa with arg2 from lines 2 and
line 3.

67
00:05:01.340 --> 00:05:06.587
So the flip utility makes a new
function g that will transpose,

68
00:05:06.587 --> 00:05:10.746
that will flip the first
two arguments passed in.

69
00:05:10.746 --> 00:05:15.504
When I call g(1,2,3,4) I
get a console log output

70
00:05:15.504 --> 00:05:20.270
that is 2,1,3,4,
flips the first two arguments.

71
00:05:22.450 --> 00:05:25.230
These are all things that a functional
programmer has to get very

72
00:05:25.230 --> 00:05:26.260
comfortable with doing.

73
00:05:26.260 --> 00:05:28.520
You have to juggle the order of arguments,

74
00:05:28.520 --> 00:05:30.730
sometimes you have to
constrain the arguments.

75
00:05:30.730 --> 00:05:34.030
The arguments to a function
really matter and

76
00:05:34.030 --> 00:05:36.730
the way you design your
function really matters.

77
00:05:36.730 --> 00:05:41.518
If you design a function
that expects x and then y.

78
00:05:41.518 --> 00:05:46.195
And then everywhere that it is used
in the program you need to provide

79
00:05:46.195 --> 00:05:50.147
them in the opposite order so
you have to flip that thing.

80
00:05:50.147 --> 00:05:51.785
Then you probably should go back and

81
00:05:51.785 --> 00:05:54.990
redefine the function to
flip the order around.

82
00:05:54.990 --> 00:05:57.270
So you don't make somebody
have to call flip every time.

83
00:05:58.520 --> 00:05:59.980
You follow where I'm coming from here?

84
00:06:01.430 --> 00:06:05.010
The order of arguments matters,
and a functional programmer

85
00:06:05.010 --> 00:06:09.730
develops a sensitivity to make sure
that they design their functions so

86
00:06:09.730 --> 00:06:12.340
that they're as easy to use as possible.

87
00:06:12.340 --> 00:06:14.480
They say what is it most commonly?

88
00:06:14.480 --> 00:06:17.330
Will they provide this one first or
this one first?

89
00:06:17.330 --> 00:06:19.520
Or this one, or this one, or this one?

90
00:06:19.520 --> 00:06:23.032
The order that you decide to author
your functions will definitely matter.

91
00:06:25.282 --> 00:06:28.643
&gt;&gt; Kyle Simpson: Sometimes you get it
all wrong and you need to not just flip

92
00:06:28.643 --> 00:06:33.830
the first two but like completely
reverse the entire list of arguments.

93
00:06:33.830 --> 00:06:35.940
Here reverseArgs does that.

94
00:06:35.940 --> 00:06:39.220
reverseArgs takes in whatever
arguments you passed in and

95
00:06:39.220 --> 00:06:43.040
just flips that whole list
completely inverses the order.

96
00:06:43.040 --> 00:06:47.091
So now g when I pass in (1, 2,
3, 4) I get back the array or

97
00:06:47.091 --> 00:06:50.078
I print out the array of [4, 3, 2, 1].

98
00:06:50.078 --> 00:06:53.895
So it's a more substantial
change than what flip

99
00:06:53.895 --> 00:06:58.419
is,
&gt;&gt; Kyle Simpson: Sometimes you wanna pass

100
00:06:58.419 --> 00:06:59.433
in an array and

101
00:06:59.433 --> 00:07:04.940
have the contents of the array treated
as if they were the individual inputs.

102
00:07:06.320 --> 00:07:10.698
On line 13, I'm passing an array
of (1,2,3,4) to a g function.

103
00:07:10.698 --> 00:07:14.338
g is the spread or
it's also referred to in

104
00:07:14.338 --> 00:07:20.010
functional programming
libraries as the apply of f.

105
00:07:20.010 --> 00:07:23.350
f is expecting individual (x, y, z, w).

106
00:07:25.240 --> 00:07:30.670
We wanna take the contents of the array
(1, 2, 3, 4) and spread those out.

107
00:07:30.670 --> 00:07:35.550
Or the functional term is apply
those to those individual

108
00:07:35.550 --> 00:07:39.850
parameters inputs,
spreadArgs utility does that for us.

109
00:07:42.630 --> 00:07:46.040
Now I don't have a slide for this but
I just want you to pause for a moment.

110
00:07:46.040 --> 00:07:47.420
How would you do the reverse?

111
00:07:47.420 --> 00:07:53.200
There's a spreading argument where
I wanna pass in an array and

112
00:07:53.200 --> 00:07:55.350
have it spread out to
individual arguments.

113
00:07:55.350 --> 00:07:59.240
What if I wanted to pass in
individual arguments, but

114
00:07:59.240 --> 00:08:00.940
have them come in as an array?

115
00:08:04.480 --> 00:08:09.280
&gt;&gt; Speaker 2: You could use the rest args.

116
00:08:09.280 --> 00:08:12.370
&gt;&gt; Kyle Simpson: Remember the functional
programmer's defining utility is to adapt

117
00:08:12.370 --> 00:08:13.240
their functions here.

118
00:08:13.240 --> 00:08:16.120
We're talking about adapting
a function written in certain

119
00:08:16.120 --> 00:08:17.660
way to work another way.

120
00:08:17.660 --> 00:08:22.590
So if I had (1,2,3,4) that I wanted to
pass in as individual arguments and

121
00:08:22.590 --> 00:08:24.590
the f function expected a single array.

122
00:08:24.590 --> 00:08:28.230
And I can't change anything
about the definition of f,

123
00:08:28.230 --> 00:08:32.730
how could I make a utility that would
adapt f to be what I need it do?

124
00:08:34.210 --> 00:08:37.570
And there's a term for that in functional
programming, it's called unapply.

125
00:08:37.570 --> 00:08:40.810
It's the reverse of apply,
I like to call it gather

126
00:08:42.220 --> 00:08:44.890
cuz it would gather individual
arguments into a single array.

127
00:08:47.280 --> 00:08:49.900
We'll leave that as some homework for
you to think about.

128
00:08:49.900 --> 00:08:55.610
How would I make a version of spreadArgs
that was called gatherArgs that

129
00:08:55.610 --> 00:08:58.490
took individual arguments and
gathered them into an array.

130
00:08:58.490 --> 00:08:59.830
It's actually not very hard at all,

131
00:08:59.830 --> 00:09:03.300
but just think about that
as some homework here.

