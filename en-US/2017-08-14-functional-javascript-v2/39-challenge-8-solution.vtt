WEBVTT

1
00:00:00.560 --> 00:00:04.992
&gt;&gt; Kyle: Let's talk through
the solution for exercise 8.

2
00:00:04.992 --> 00:00:09.720
I'm gonna start first by implementing
the filterobj and reduceobj functions.

3
00:00:09.720 --> 00:00:13.659
So as my starting point
I'm just gonna copy and

4
00:00:13.659 --> 00:00:18.211
paste that implementation and
then edit from there.

5
00:00:18.211 --> 00:00:21.420
So, I am not gonna be
calling a mapperFn here.

6
00:00:21.420 --> 00:00:27.170
I'm just gonna be calling that but
I am going to have a conditional.

7
00:00:27.170 --> 00:00:33.325
So I am going to say
if the predicateFn and

8
00:00:33.325 --> 00:00:39.900
what I need to pass into it is o of key.

9
00:00:39.900 --> 00:00:45.080
So I don't set it on the new object if
it doesn't pass the predicate check.

10
00:00:45.080 --> 00:00:46.620
It's just not added to the new object.

11
00:00:49.410 --> 00:00:57.049
And then for,
&gt;&gt; Kyle: The reduced object function,

12
00:00:57.049 --> 00:01:02.520
we need to have a kind of that
running total, if you will.

13
00:01:02.520 --> 00:01:05.400
And I'm gonna do that
by just making a result

14
00:01:05.400 --> 00:01:09.600
variable that starts
out = to initialValue.

15
00:01:09.600 --> 00:01:13.958
And again,
I'm not calling a mapper function, but

16
00:01:13.958 --> 00:01:20.869
I am gonna be calling a,
&gt;&gt; Kyle: So I'm gonna say result =,

17
00:01:20.869 --> 00:01:25.502
and I'm gonna be calling
the reducer function, and

18
00:01:25.502 --> 00:01:32.470
I need to pass along the current running
result, as well as the new value here.

19
00:01:36.450 --> 00:01:40.110
And now we realize wait a minute,
I'm not actually making a new object.

20
00:01:40.110 --> 00:01:41.530
Reduce doesn't make a new object.

21
00:01:41.530 --> 00:01:45.170
So let's get rid of the new object and
the new object.

22
00:01:45.170 --> 00:01:47.270
And instead, what do we want to return?

23
00:01:51.180 --> 00:01:52.508
&gt;&gt; Speaker 2: Result.
&gt;&gt; Kyle: Result.

24
00:01:59.666 --> 00:02:04.233
&gt;&gt; Kyle: Okay, any questions about that
part, implementing either of those two?

25
00:02:06.357 --> 00:02:09.289
&gt;&gt; Kyle: It's pretty straight forward to
implement those ideas against the data

26
00:02:09.289 --> 00:02:10.880
structure like the object.

27
00:02:10.880 --> 00:02:14.090
The more sophisticated you get,
the more complex it might get.

28
00:02:14.090 --> 00:02:19.000
So for example, when I implemented
filter against a binary tree.

29
00:02:19.000 --> 00:02:25.530
When you start removing nodes from a tree,
you actually need to rebalance the tree.

30
00:02:25.530 --> 00:02:29.910
And so there was 30 or 40 lines worth of
code that was just rebalancing the tree,

31
00:02:29.910 --> 00:02:32.304
had nothing to do with
the filter algorithm.

32
00:02:32.304 --> 00:02:37.590
But that data structure in particular,
had a lot of extra work to implement, so.

33
00:02:38.810 --> 00:02:41.810
But the filter reduce in that
parts are pretty straight forward.

34
00:02:42.980 --> 00:02:45.234
Okay, let's come up here, and

35
00:02:45.234 --> 00:02:50.001
talk about somethings that we could
do differently with this code.

36
00:02:50.001 --> 00:02:54.430
First off, I have three different
statements that represent a flow of data.

37
00:02:54.430 --> 00:02:59.010
My flow of data is
starting out with my nums.

38
00:02:59.010 --> 00:03:04.520
That becomes filtered nums which then goes
in here and becomes filtered num products.

39
00:03:04.520 --> 00:03:06.870
Which then goes in here and
becomes this number.

40
00:03:06.870 --> 00:03:10.660
So there's a flow of data
through these operations

41
00:03:10.660 --> 00:03:15.730
from an object to final and result number.

42
00:03:16.830 --> 00:03:19.160
What does a flow of data
generally look like to you?

43
00:03:20.730 --> 00:03:22.100
&gt;&gt; Kyle: Through a set of functions.

44
00:03:23.730 --> 00:03:26.480
Should look like a compose or

45
00:03:26.480 --> 00:03:29.470
actually I'm gonna represent this
with pipe instead of with compose.

46
00:03:29.470 --> 00:03:34.970
So just to sketch out my ideas here
in terms of how I am gonna implement.

47
00:03:34.970 --> 00:03:37.200
I am go do a pipe here, and

48
00:03:37.200 --> 00:03:39.810
that's gonna create me a function
that I need to pass something in.

49
00:03:39.810 --> 00:03:42.284
What am I passing in to my piped function?

50
00:03:47.046 --> 00:03:48.820
&gt;&gt; Kyle: I'm passing in the nums, right?

51
00:03:50.740 --> 00:03:54.570
That's the input value,
it's gonna come into the first function.

52
00:03:54.570 --> 00:03:58.880
So I'm basically gonna have a function 1,
a function 2, and a function 3 here.

53
00:03:58.880 --> 00:04:02.780
Nums is going to come into function 1 and
get changed into something.

54
00:04:02.780 --> 00:04:06.270
That's going to become the input to
function 2, which is then going to output

55
00:04:06.270 --> 00:04:10.940
to function3, which is then going
to output my final number value.

56
00:04:10.940 --> 00:04:14.760
So let's start at the bottom,
let's start with the reduce object,

57
00:04:14.760 --> 00:04:17.600
because I've been past an object and
I want to reduce it to a number.

58
00:04:19.490 --> 00:04:25.000
This reduce object takes three inputs.

59
00:04:25.000 --> 00:04:28.760
It takes a reducer, an initial value, and

60
00:04:28.760 --> 00:04:34.004
it takes a input value.

61
00:04:34.004 --> 00:04:37.290
I wanna provide two of
those three right now.

62
00:04:37.290 --> 00:04:40.930
The third one is going to come
from the output of functiont 2.

63
00:04:40.930 --> 00:04:43.850
So what do you think I could do to
provide three of those right now?

64
00:04:46.100 --> 00:04:47.350
I mean, two of the three right now.

65
00:04:48.640 --> 00:04:49.990
Could do a partial application.

66
00:04:49.990 --> 00:04:53.930
I'm gonna do it with currying,
since we provided you the curry utility.

67
00:04:53.930 --> 00:04:58.670
So to replace function three in my
little piping call, I'm gonna curry

68
00:05:00.120 --> 00:05:04.500
and this is the function that I'm
currying, which is reduce object.

69
00:05:06.210 --> 00:05:08.020
That's my utility.

70
00:05:08.020 --> 00:05:13.076
The first input that I need
to provide is this reducer.

71
00:05:16.259 --> 00:05:21.760
&gt;&gt; Kyle: The next input that I need
to provide is this initial value.

72
00:05:24.460 --> 00:05:28.120
So it's waiting on the last input,
which is gonna take that place.

73
00:05:28.120 --> 00:05:30.390
I don't need to worry
about passing that one in.

74
00:05:30.390 --> 00:05:32.570
That's what the pipe is gonna do for me.

75
00:05:32.570 --> 00:05:33.542
Have we follow that recently?

76
00:05:36.682 --> 00:05:40.376
&gt;&gt; Kyle: Now, let's look at this
function that I just copied in.

77
00:05:40.376 --> 00:05:43.806
What we notice about the shape and
the behavior of that function?

78
00:05:48.075 --> 00:05:51.330
&gt;&gt; Kyle: Does it look like anything else
that we already have provided to us?

79
00:05:54.060 --> 00:05:55.740
It looks like the sum utility doesn't it?

80
00:05:56.840 --> 00:05:59.581
So why don't we just replace
that thing with the sum utility?

81
00:06:05.628 --> 00:06:08.857
&gt;&gt; Kyle: And that has gotten rid
of one of those three operations.

82
00:06:08.857 --> 00:06:10.890
So let's keep working our way backward.

83
00:06:12.680 --> 00:06:16.878
We need to call the map

84
00:06:16.878 --> 00:06:21.781
object with two inputs.

85
00:06:22.860 --> 00:06:25.660
Well, that sounds like
another curry to me.

86
00:06:25.660 --> 00:06:30.630
So I'm gonna curry
the map object function.

87
00:06:33.350 --> 00:06:35.711
And I need to provide it this utility.

88
00:06:45.393 --> 00:06:48.080
&gt;&gt; Kyle: Now let's look at that
utility for just a moment.

89
00:06:48.080 --> 00:06:50.570
What does that look like to you?

90
00:06:50.570 --> 00:06:51.730
&gt;&gt; Speaker 3: List product.

91
00:06:51.730 --> 00:06:53.090
&gt;&gt; Kyle: It looks like list product,
right?

92
00:06:54.270 --> 00:06:58.961
That's a point that we don't need
,so why don't we just use list

93
00:06:58.961 --> 00:07:01.364
product as the napper function.

94
00:07:06.815 --> 00:07:08.540
&gt;&gt; Kyle: Everybody following
how I'm doing this?

95
00:07:11.230 --> 00:07:12.898
One last one to do.

96
00:07:12.898 --> 00:07:16.690
You'll notice that I have two
function calls happening here.

97
00:07:16.690 --> 00:07:18.290
What are those function calls look like?

98
00:07:19.980 --> 00:07:20.840
&gt;&gt; Speaker 2: Could you scroll down?

99
00:07:22.920 --> 00:07:26.050
&gt;&gt; Kyle: I'm just asking what
is line 15 look like to you?

100
00:07:26.050 --> 00:07:30.782
I have a listsum that's called and
it's output becomes the input to isOdd.

101
00:07:30.782 --> 00:07:32.128
What does that look like to you?

102
00:07:32.128 --> 00:07:33.136
&gt;&gt; Speaker 2: It looks like a compose.

103
00:07:33.136 --> 00:07:35.310
&gt;&gt; Kyle: It looks like a compose, right?

104
00:07:35.310 --> 00:07:38.090
That's the instinct you wanna
start looking for what is this?

105
00:07:38.090 --> 00:07:42.546
Well, I am gonna wanna compose isOdd

106
00:07:48.551 --> 00:07:50.185
&gt;&gt; Kyle: And listSum,

107
00:07:57.065 --> 00:07:57.710
&gt;&gt; Kyle: You see that?

108
00:07:59.430 --> 00:08:04.530
I'm trying to compose listSum with
isOdd which now produces a function

109
00:08:04.530 --> 00:08:06.960
which is expecting a list.

110
00:08:06.960 --> 00:08:08.690
It will pass it into listSum,

111
00:08:08.690 --> 00:08:13.800
and then that result will go into isOdd,
then that will come out.

112
00:08:13.800 --> 00:08:17.290
Now that is my filterer, right?

113
00:08:18.330 --> 00:08:25.800
So I need to,
&gt;&gt; Kyle: Curry my filter object.

114
00:08:27.260 --> 00:08:31.343
And then provide that composed filter,
I mean that composed predicate.

115
00:08:40.966 --> 00:08:44.728
&gt;&gt; Kyle: [COUGH] We double check to make
sure this does what it's supposed to do

116
00:08:44.728 --> 00:08:48.890
and I didn't mess something up,
which we've all ready seen I'm good at.

117
00:08:49.900 --> 00:08:54.736
And there we get the output,
&gt;&gt; Kyle: So we were able to take that mess

118
00:08:54.736 --> 00:08:59.907
that I started you out with and using
what we already know about currying and

119
00:08:59.907 --> 00:09:04.610
composition and piping,
to produce a point free representation.

120
00:09:04.610 --> 00:09:06.815
Can everybody follow that?

121
00:09:09.436 --> 00:09:13.678
&gt;&gt; Kyle: There's one kind of final thing
I was hoping maybe some of you would

122
00:09:13.678 --> 00:09:14.520
recognize.

123
00:09:14.520 --> 00:09:19.441
Which is not just that we moved
it down to a point for thing but

124
00:09:19.441 --> 00:09:26.543
to recognize that we still fundamentally
have three different repeated operation.

125
00:09:26.543 --> 00:09:30.861
And anytime you see that set of operations
happening, one of those bells that

126
00:09:30.861 --> 00:09:35.190
should go off in your head is that
fundamentally a list operation?

127
00:09:35.190 --> 00:09:38.762
Is basically pipe, a list operation.

128
00:09:40.589 --> 00:09:45.350
&gt;&gt; Kyle: What if pipe was a reducer?

129
00:09:46.820 --> 00:09:49.980
What if we gave it a list
of these functions and

130
00:09:49.980 --> 00:09:52.460
we reduced that list with pipe.

131
00:09:53.730 --> 00:10:00.150
So I'm gonna, I'll just leave this there
in the comments so that we can see it.

132
00:10:00.150 --> 00:10:07.720
But I'm gonna copy it,
&gt;&gt; Kyle: I'm gonna copy it and edit it.

133
00:10:07.720 --> 00:10:11.200
So I'm gonna take this and
put that into an array.

134
00:10:11.200 --> 00:10:13.100
I'm just going to have those three values.

135
00:10:13.100 --> 00:10:18.540
Those three partial functions there
are curried functions in an array.

136
00:10:18.540 --> 00:10:23.030
And then I'm gonna say let's
think about what a pipe does.

137
00:10:23.030 --> 00:10:26.340
Pipe could take two functions and
make them into one right?

138
00:10:26.340 --> 00:10:28.339
Because that's what,
fundamentally, composition is.

139
00:10:29.350 --> 00:10:34.600
So if I did a reduce with pipe,
it would take the first

140
00:10:34.600 --> 00:10:39.770
two in the list to these two,
and compose them into a function.

141
00:10:39.770 --> 00:10:41.180
And then it would take that one, and

142
00:10:41.180 --> 00:10:44.100
compose it with the third
one into a single function.

143
00:10:45.450 --> 00:10:48.100
So the end result of that function call

144
00:10:48.100 --> 00:10:51.300
would be something that
I could pass nuns to.

145
00:10:51.300 --> 00:10:56.010
And it should pass nums into that piped
function which then passes it along to

146
00:10:56.010 --> 00:10:59.980
each of these curry functions,
all one call.

147
00:11:01.530 --> 00:11:04.250
There's one last little detail, and

148
00:11:04.250 --> 00:11:09.500
this is more a vagary of how
JavaScript's mechanisms work.

149
00:11:09.500 --> 00:11:12.260
But something that you wanna pay attention
to if you're gonna use these list

150
00:11:12.260 --> 00:11:15.360
operations built into JavaScript arrays.

151
00:11:15.360 --> 00:11:21.560
Reduce, you recall earlier when I talked
about how it passes in multiple arguments.

152
00:11:21.560 --> 00:11:25.650
It'll pass in also an index and
also the array.

153
00:11:25.650 --> 00:11:27.350
It does that for map, filter, and reduce.

154
00:11:27.350 --> 00:11:30.820
It passes those extra arguments
that typical functional programming

155
00:11:30.820 --> 00:11:31.420
libraries don't.

156
00:11:32.530 --> 00:11:35.220
That's gonna create a problem for pipe.

157
00:11:35.220 --> 00:11:37.670
Because pipe is expecting
everything to be functions.

158
00:11:38.740 --> 00:11:42.090
And we're gonna be passing stuff
to it that isn't functions.

159
00:11:42.090 --> 00:11:47.250
We really only wanna pass
two things into it, right?

160
00:11:47.250 --> 00:11:49.760
Cuz we wanna it to reduce
two functions at a time.

161
00:11:51.170 --> 00:11:55.473
So how about if we call binary
on the pipe function to

162
00:11:55.473 --> 00:11:59.891
restrict its input to only
the first two arguments?

163
00:12:05.531 --> 00:12:08.633
&gt;&gt; Kyle: Let's test to make
sure I didn't mess that up.

164
00:12:13.898 --> 00:12:15.054
&gt;&gt; Kyle: There we go.

165
00:12:18.342 --> 00:12:23.407
&gt;&gt; Kyle: So not only was I
able to adapt list operations

166
00:12:23.407 --> 00:12:28.200
to objects to other data structures.

167
00:12:28.200 --> 00:12:32.869
Then we used what we've learned in this
course about currying and piping, and

168
00:12:32.869 --> 00:12:37.339
composing, to build a point-free
representation for that flow of data.

169
00:12:37.339 --> 00:12:40.559
And then we recognized that each
of the steps in that flow of

170
00:12:40.559 --> 00:12:44.810
data can actually be modeled itself
as a composition, as a piping.

171
00:12:44.810 --> 00:12:47.494
It's a list operation,
where we reduce with the pipe utility.

172
00:12:51.626 --> 00:12:54.727
&gt;&gt; Kyle: If I hadn't taught you
anything in this course, and

173
00:12:54.727 --> 00:12:57.480
you just saw that piece of code.

174
00:12:57.480 --> 00:13:00.420
The honest truth is probably most
of us would not know exactly what

175
00:13:00.420 --> 00:13:01.140
that was doing.

176
00:13:01.140 --> 00:13:03.350
We would probably struggle
to understand it.

177
00:13:03.350 --> 00:13:06.900
At this point, I hope you don't feel
completely lost looking at that code.

178
00:13:06.900 --> 00:13:10.370
I hope it at least has
some recognition to you.

179
00:13:10.370 --> 00:13:14.480
But where we're at right now, I wanna
recall back to the very beginning of

180
00:13:14.480 --> 00:13:17.943
this course, when I talked about
that curve of readability.

181
00:13:17.943 --> 00:13:22.321
And we've quested the top now, and for
many of you you might be starting to

182
00:13:22.321 --> 00:13:27.870
wonder I'm I headed towards this trough
of, my God what I'm I looking at.

183
00:13:27.870 --> 00:13:32.080
Cuz that's certainly where I've been when
I've been trying to re-organise with point

184
00:13:32.080 --> 00:13:37.510
free style and use function
utilities I cross some threshold,

185
00:13:37.510 --> 00:13:42.080
after which things really start to
kinda go down hill towards that trough.

186
00:13:43.400 --> 00:13:46.810
And all I can say to you, is that
the first time I did stuff like this,

187
00:13:46.810 --> 00:13:48.910
I very much felt that way.

188
00:13:48.910 --> 00:13:51.340
And I understand why you
would feel that way.

189
00:13:51.340 --> 00:13:53.300
But I pushed through, I kept trying it.

190
00:13:53.300 --> 00:13:55.270
I kept trying to practice with it.

191
00:13:55.270 --> 00:13:57.960
I kept mixing and matching that,
every time I had a piece of code,

192
00:13:57.960 --> 00:14:00.720
I tried these techniques
out on that piece of code.

193
00:14:00.720 --> 00:14:04.610
And now, this piece of code as written.

194
00:14:04.610 --> 00:14:08.688
It jumps out off the page at me as,
I know exactly what it's doing.

195
00:14:08.688 --> 00:14:10.281
And it's not just because
I wrote the exercise.

196
00:14:10.281 --> 00:14:14.167
It's because I've started to develop
some of those instincts where this has

197
00:14:14.167 --> 00:14:15.660
become more readable.

198
00:14:15.660 --> 00:14:19.930
So I'm starting to head back up
the hill of readability now.

199
00:14:19.930 --> 00:14:23.090
So pushing through is important
because at some point

200
00:14:23.090 --> 00:14:26.302
you're going to get disillusioned and
say like I've got no clue.

201
00:14:26.302 --> 00:14:29.240
This is crazy,
you've got to just keep pushing through or

202
00:14:29.240 --> 00:14:33.010
you'll never get to that point where
this really starts to benefit your code.

203
00:14:35.900 --> 00:14:38.291
&gt;&gt; Speaker 4: In the real world,
where you're on an enterprise.

204
00:14:38.291 --> 00:14:39.936
&gt;&gt; Kyle: Wait, am I not in the real world?

205
00:14:39.936 --> 00:14:41.203
&gt;&gt; [LAUGH]
&gt;&gt; Kyle: Wait a minute,

206
00:14:41.203 --> 00:14:43.180
I thought I was in the real world.

207
00:14:43.180 --> 00:14:44.800
Okay, go ahead.

208
00:14:44.800 --> 00:14:49.648
&gt;&gt; Speaker 4: Where you're on a enterprise
team with a bunch of programmers,

209
00:14:49.648 --> 00:14:52.160
some of whom are gonna be junior,

210
00:14:52.160 --> 00:14:57.121
some of whom are gonna be principle,
and everything in between.

211
00:14:57.121 --> 00:15:00.573
Do you feel that right
in this kind of code

212
00:15:00.573 --> 00:15:05.360
becomes a barrier to entry
to those junior developers?

213
00:15:05.360 --> 00:15:09.420
And how do you go about introducing
functional into a team?

214
00:15:09.420 --> 00:15:12.250
Where you have that range of ability.

215
00:15:12.250 --> 00:15:16.945
&gt;&gt; Kyle: Yeah, so let me answer that
question in two different ways.

216
00:15:16.945 --> 00:15:21.008
First, I'll be glib, I'll say tell them
to go read my book and watch this course.

217
00:15:21.008 --> 00:15:22.681
&gt;&gt; Speaker 2: Go on, okay.

218
00:15:22.681 --> 00:15:26.886
&gt;&gt; Kyle: Okay, but secondly,
I'll give you a more serious answer,

219
00:15:26.886 --> 00:15:29.820
a more intentional answer.

220
00:15:29.820 --> 00:15:33.867
There are lots of things that,
I mean we're in a learning context,

221
00:15:33.867 --> 00:15:37.638
we've been doing a course where
we've been learning things.

222
00:15:37.638 --> 00:15:41.437
And there are lots of things that you can
learn in any course that other members of

223
00:15:41.437 --> 00:15:43.420
your team won't know.

224
00:15:43.420 --> 00:15:49.220
If your premise is I can only use things
on my team if everybody already knows it.

225
00:15:49.220 --> 00:15:52.470
Then you're gonna be stuck at the lowest
common denominator of that team

226
00:15:52.470 --> 00:15:54.300
basically forever.

227
00:15:54.300 --> 00:15:57.430
And I don't think that's a particularly
healthy way of thinking about the culture

228
00:15:57.430 --> 00:15:58.490
of a team.

229
00:15:58.490 --> 00:16:02.630
So I never want anyone
to feel like I'm saying,

230
00:16:02.630 --> 00:16:04.600
boil it down to the lowest
common denominator.

231
00:16:04.600 --> 00:16:07.510
I do think everybody on
a team should be learning and

232
00:16:07.510 --> 00:16:09.300
should be striving to understand more.

233
00:16:09.300 --> 00:16:12.010
I always tell people,
I don't care where you're at.

234
00:16:12.010 --> 00:16:14.090
I only care what your direction is.

235
00:16:14.090 --> 00:16:17.810
If you are headed upwards in terms of
your knowledge, you're all in a class and

236
00:16:17.810 --> 00:16:19.300
you are committed to learning.

237
00:16:19.300 --> 00:16:22.150
And you should be wanting to
promote that same culture

238
00:16:22.150 --> 00:16:23.660
among the other members of your team.

239
00:16:23.660 --> 00:16:27.020
And there are some tools that
you can use to promote that and

240
00:16:27.020 --> 00:16:30.220
one of those tools is code review.

241
00:16:30.220 --> 00:16:34.640
Code review is often or many times
seen as almost a negative thing,

242
00:16:34.640 --> 00:16:37.100
like it's a gate or I can be criticised.

243
00:16:37.100 --> 00:16:41.320
And I'm afraid to put my code in and
what if they tear it apart or whatever?

244
00:16:41.320 --> 00:16:44.680
That's a culture problem that
you should really fight against.

245
00:16:44.680 --> 00:16:48.550
You should say, no, we encourage it and
we're excited about code review,

246
00:16:48.550 --> 00:16:51.590
because we get to learn something
every time we do a code review.

247
00:16:51.590 --> 00:16:55.026
If you're a more senior person
to somebody else on the team and

248
00:16:55.026 --> 00:16:57.615
they submit some code and
you do a code review.

249
00:16:57.615 --> 00:17:00.340
And you see something where
they put a point in and

250
00:17:00.340 --> 00:17:04.340
they could have reduced that point and
done point free style.

251
00:17:04.340 --> 00:17:07.380
You should say, hey,
why don't we meet for five minutes and

252
00:17:07.380 --> 00:17:09.670
I wanna talk to you about this
thing called point free style.

253
00:17:09.670 --> 00:17:13.650
And I wanna just show you one example of
how it made this little piece of code

254
00:17:13.650 --> 00:17:15.200
a little bit easier to read.

255
00:17:15.200 --> 00:17:18.260
I'm not failing your counter view because
you didn't do it, but I'm using it as

256
00:17:18.260 --> 00:17:23.100
an opportunity to pass along a small piece
of knowledge that you've helped learn.

257
00:17:23.100 --> 00:17:26.470
If everybody takes that perspective,
then everybody gets to learn.

258
00:17:26.470 --> 00:17:28.700
Everybody goes up the curve of learning.

259
00:17:28.700 --> 00:17:31.840
And you don't have to be
scared of using new stuff and

260
00:17:31.840 --> 00:17:33.660
nobody being able to understand it.

261
00:17:33.660 --> 00:17:36.100
You probably do wanna be deliberate and

262
00:17:36.100 --> 00:17:38.640
maybe not go rewrite your
whole code base overnight.

263
00:17:39.890 --> 00:17:42.560
Do it a little bit at a time, and
you wanna be very intentional.

264
00:17:42.560 --> 00:17:46.460
You wanna communicate to my team,
I'm gonna start to introduce this concept.

265
00:17:46.460 --> 00:17:50.080
I learned about function composition and
now, I'm gonna introduce that.

266
00:17:50.080 --> 00:17:51.330
And this is what it's gonna look like.

267
00:17:51.330 --> 00:17:54.130
I wrote up this wiki page,
if you're interested in it.

268
00:17:54.130 --> 00:17:55.870
Here's links to resources.

269
00:17:55.870 --> 00:17:58.460
But if you see that in my code,
you know I'm doing that on purpose.

270
00:17:58.460 --> 00:18:00.110
And communicate that with the team.

271
00:18:00.110 --> 00:18:01.330
Have a brown bag lunch and

272
00:18:01.330 --> 00:18:05.920
say, look, here's the stuff that we're
gonna try to do to improve the code style.

273
00:18:07.060 --> 00:18:09.200
So I have to believe,

274
00:18:09.200 --> 00:18:11.950
even though I'm not as much in
the real world as maybe you are.

275
00:18:11.950 --> 00:18:17.600
I have to believe that developers
want to get better at their craft.

276
00:18:17.600 --> 00:18:20.690
And I have to believe that there
are things that we can do to promote that

277
00:18:20.690 --> 00:18:22.370
culture within our teams.

278
00:18:22.370 --> 00:18:25.580
And you can go to your boss and say,
I want everybody to learn here.

279
00:18:25.580 --> 00:18:29.030
I've been learning stuff and
I'm excited to improve our code with that.

280
00:18:29.030 --> 00:18:33.157
Will you support me in that effort,
when I try to help raise the bubble?

281
00:18:33.157 --> 00:18:36.300
If all boats rise with the tide,
will you support me in that?

282
00:18:36.300 --> 00:18:38.380
And I have to believe that
a good boss will say,

283
00:18:38.380 --> 00:18:41.750
absolutely, what can I do
to empower you with that?

284
00:18:41.750 --> 00:18:46.360
So I definitely think that this kind
of stuff, done intentionally and

285
00:18:46.360 --> 00:18:48.810
done slowly, not radically,

286
00:18:48.810 --> 00:18:52.920
can improve a code base even in the most
real world of enterprise teams.

287
00:18:52.920 --> 00:18:55.010
Everybody has to commit to
wanting to learn though.

