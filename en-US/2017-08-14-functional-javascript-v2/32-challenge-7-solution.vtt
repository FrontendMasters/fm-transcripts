WEBVTT

1
00:00:00.340 --> 00:00:03.510
&gt;&gt; Kyle: Exercise 7,
let's dig into the solution.

2
00:00:03.510 --> 00:00:08.610
I'll walk you through that, so, item one
should have been pretty straight forward.

3
00:00:08.610 --> 00:00:11.410
We need to write two functions,
call them whatever you want.

4
00:00:11.410 --> 00:00:17.300
I'm gonna call them but each one of
them should return a specific number.

5
00:00:17.300 --> 00:00:22.850
So I'm gonna make my foo function return

6
00:00:22.850 --> 00:00:27.740
the value ten and I'll make my
bar function return the value 42,

7
00:00:27.740 --> 00:00:32.350
just because those are my
two favorite numbers.

8
00:00:34.400 --> 00:00:35.470
That's item one.

9
00:00:35.470 --> 00:00:38.890
Now item two said write an add
function that takes two numbers.

10
00:00:38.890 --> 00:00:44.140
That's pretty straightforward, so
function add takes an x and a y.

11
00:00:44.140 --> 00:00:45.810
Returns the addition of those.

12
00:00:49.140 --> 00:00:55.330
Item three says write an add2() function,
I guess also to show how we can use that.

13
00:00:56.590 --> 00:01:01.340
Item 2 we wanna add by calling foo, and

14
00:01:01.340 --> 00:01:06.480
calling bar, and, of course,
we know that would return the number 52.

15
00:01:06.480 --> 00:01:09.270
All right, now we wanna

16
00:01:09.270 --> 00:01:13.750
create the add2 function which
takes two functions to call.

17
00:01:15.790 --> 00:01:20.800
It uses the add utility, so
we basically want it to do the same thing.

18
00:01:20.800 --> 00:01:26.020
We want it to use the add utility,
call fn1() and call fn2().

19
00:01:26.020 --> 00:01:28.364
Pass those into the add utility.

20
00:01:33.060 --> 00:01:39.297
&gt;&gt; Kyle: And to show how we would use that
we would say add2 and we'd pass foo and

21
00:01:39.297 --> 00:01:44.530
bar as is rather than passing
the execution of them.

22
00:01:44.530 --> 00:01:51.770
Again, both of those added together will
return 52, that's items one through three.

23
00:01:51.770 --> 00:01:55.505
Let me pause there and see if anybody had
any questions on items one through three.

24
00:02:00.355 --> 00:02:04.937
&gt;&gt; Kyle: All right, now item four said we
wanna go back and essentially replace that

25
00:02:04.937 --> 00:02:09.600
foo and bar With a utility that
will make functions like that.

26
00:02:09.600 --> 00:02:14.370
So I'm gonna create
a new function that will

27
00:02:15.920 --> 00:02:19.210
produce functions that return numbers.

28
00:02:19.210 --> 00:02:21.480
And you could have called this
utility whatever you want, but

29
00:02:21.480 --> 00:02:24.670
there's a real name for
this in functional programming.

30
00:02:24.670 --> 00:02:27.810
and I always get a smirk
out of the name for it,

31
00:02:27.810 --> 00:02:31.010
because the name for
this utility is constant.

32
00:02:31.010 --> 00:02:33.875
Even though it flies in the face of what
we talked about with the Conskeyword

33
00:02:33.875 --> 00:02:36.140
[conskeyword/g] earlier in the course.

34
00:02:36.140 --> 00:02:40.622
The Constant, as the name of this utility,
it takes a value, and

35
00:02:40.622 --> 00:02:43.149
it doesn't just return that value,

36
00:02:43.149 --> 00:02:48.870
it returns a function that will return the
value So it's a machine making machine.

37
00:02:51.990 --> 00:02:57.039
&gt;&gt; Kyle: Using that utility,
we can now make the foo and

38
00:02:57.039 --> 00:03:03.642
the var, if we wanted to save
var foo = constant(10) and

39
00:03:03.642 --> 00:03:07.284
var bar = to constant (42).

40
00:03:08.590 --> 00:03:15.337
&gt;&gt; Kyle: So I'll take those and replace
these two functions with that utility.

41
00:03:17.104 --> 00:03:19.400
&gt;&gt; Kyle: So that's item four.

42
00:03:19.400 --> 00:03:26.630
Let me just, to save ourselves some space,
do some combining onto single lines here.

43
00:03:28.480 --> 00:03:34.380
All right now using that we have the same
call we can use that to call foo and

44
00:03:34.380 --> 00:03:39.870
bar, or we don't even really need the foo
and bar created as separate variables.

45
00:03:39.870 --> 00:03:45.210
We can just simply call add2

46
00:03:45.210 --> 00:03:49.659
with constant of ten and

47
00:03:49.659 --> 00:03:53.227
constant of 42.

48
00:03:58.069 --> 00:04:01.850
&gt;&gt; Kyle: Item 5 is where things
started to get a lot more interesting.

49
00:04:01.850 --> 00:04:08.070
Addn which should be able to take
an array of two or more of such functions

50
00:04:08.070 --> 00:04:12.020
And only using the add 2 utility,
figure out how to add them together.

51
00:04:12.020 --> 00:04:15.330
Now, we know that add 2 only
takes two functions, so

52
00:04:15.330 --> 00:04:19.740
we're gonna need to do something
to lift that add 2 function to

53
00:04:19.740 --> 00:04:24.279
a list of potentially three or
more functions.

54
00:04:25.850 --> 00:04:29.980
So if we define a function add2,

55
00:04:29.980 --> 00:04:34.990
I'm sorry, addn (fns) that takes a list
of functions, an array of functions,

56
00:04:34.990 --> 00:04:40.500
what strategy do we wanna use, or what's
the algorithm that we wanna use here?

57
00:04:40.500 --> 00:04:43.910
Some of you may have said well, what I'm
gonna do is I'm gonna loop through this

58
00:04:43.910 --> 00:04:47.500
list I'm gonna take two items as a time,

59
00:04:47.500 --> 00:04:51.750
pass them into the add2 utility
which gives me the result.

60
00:04:52.790 --> 00:04:56.552
And then take that result,
which is a number, and

61
00:04:56.552 --> 00:05:00.054
re-wrap it in a function
using the constant.

62
00:05:00.054 --> 00:05:02.764
And then now that function
plus another one, so

63
00:05:02.764 --> 00:05:06.851
basically you would Take two functions,
reduce them down to a number.

64
00:05:06.851 --> 00:05:09.690
And then have to make it into another
function and then reduce it and

65
00:05:09.690 --> 00:05:11.270
then make it into another function.

66
00:05:11.270 --> 00:05:14.901
And that churn of unlifting a value and
then relifting it back,

67
00:05:14.901 --> 00:05:19.510
and unlifting it and relifting it back,
that should feel a little bit unusual.

68
00:05:19.510 --> 00:05:26.440
That should feel a little bit awkward,
when I run into those sorts of solutions.

69
00:05:26.440 --> 00:05:27.530
I take a step back and

70
00:05:27.530 --> 00:05:31.550
say, well if I'm already representing
things at function, as functions.

71
00:05:31.550 --> 00:05:34.940
I don't want to go back to
the non-function form and

72
00:05:34.940 --> 00:05:39.130
then after relift it, so what's
a different algorithm that I could use?

73
00:05:39.130 --> 00:05:42.210
Because we know the add2
function will reduce it,

74
00:05:42.210 --> 00:05:46.920
will unlift it down to that numeric
value We don't wanna call add2 yet.

75
00:05:46.920 --> 00:05:53.080
We don't want to call it into the last
possible moment, does that make sense?

76
00:05:53.080 --> 00:05:57.428
Algorithmically that's the way my brain
goes, I don't want to call it yet, so,

77
00:05:57.428 --> 00:05:59.703
we could introduce this idea of laziness.

78
00:05:59.703 --> 00:06:04.623
We could introduce the idea of instead
of reducing two number producing

79
00:06:04.623 --> 00:06:06.595
functions down to a number.

80
00:06:06.595 --> 00:06:11.821
Instead what we could do is say
the combination of those two functions

81
00:06:11.821 --> 00:06:17.230
could be a composition of those
two with being called with add to.

82
00:06:17.230 --> 00:06:21.460
So we would be producing a bigger and
bigger function, that is lazy.

83
00:06:21.460 --> 00:06:27.320
It defers all of those add2 cols
until the last possible moment and

84
00:06:27.320 --> 00:06:32.750
given that my algorithm then could
start with a four loop over the list.

85
00:06:32.750 --> 00:06:35.820
And take two items from the list.

86
00:06:35.820 --> 00:06:39.930
Make them into a single function
that would pass that to add2 and

87
00:06:39.930 --> 00:06:43.300
then replace the two items in the list
with that newly composed function.

88
00:06:43.300 --> 00:06:48.710
And then just keep doing that until I've
left with basically just two functions and

89
00:06:48.710 --> 00:06:50.020
then call them.

90
00:06:50.020 --> 00:06:54.960
So let me code that with a for
loop or actually not with a for

91
00:06:54.960 --> 00:06:56.690
loop but with a loop.

92
00:06:56.690 --> 00:06:59.450
So, the first thing I want to do
is since I've being given an array

93
00:06:59.450 --> 00:07:01.940
I want to treat that as if
an array that I can't mutate.

94
00:07:01.940 --> 00:07:05.760
So, I'm going to make a copy of it,
because I actually want to mutate

95
00:07:05.760 --> 00:07:09.970
internally a functions list, so
I'm going to make a copy of functions.

96
00:07:09.970 --> 00:07:14.000
And then essentially what I'm going to do
is in my base condition, which we'll get

97
00:07:14.000 --> 00:07:19.570
to in a moment I'm going to assume
that functions is down to two items.

98
00:07:19.570 --> 00:07:24.650
Its length is two now,
if that is the case than all I need to do

99
00:07:24.650 --> 00:07:30.610
is call the add two utility and
give it fn sub zero and fn sub one.

100
00:07:32.840 --> 00:07:34.810
That is my base condition.

101
00:07:34.810 --> 00:07:40.790
Now, before I get to that base condition,
I wanna keep reducing my list if you will.

102
00:07:40.790 --> 00:07:45.627
I wanna keep composing the first two items
of my list down until it gets to that,

103
00:07:45.627 --> 00:07:48.194
so, I'm gonna say while the fns.length

104
00:07:48.194 --> 00:07:53.026
is greater than 2
&gt;&gt; Kyle: While that array is

105
00:07:53.026 --> 00:07:54.130
greater than 2.

106
00:07:54.130 --> 00:07:55.360
Keep doing this thing.

107
00:07:55.360 --> 00:07:59.280
Now, what I'm going to use is a little
bit, just to save on some typing,

108
00:07:59.280 --> 00:08:04.940
I'm going to use a little bit of
ES 6 sugar to help some of these

109
00:08:04.940 --> 00:08:05.970
work a little bit cleaner.

110
00:08:05.970 --> 00:08:08.600
You might not have gone
exactly this approach, but

111
00:08:08.600 --> 00:08:11.290
hopefully the algorithm is making sense.

112
00:08:11.290 --> 00:08:15.480
What I'm gonna do is use some block
scoping and some destructuring,

113
00:08:15.480 --> 00:08:18.590
cuz I'm gonna have some closure here and
block scope will help with that.

114
00:08:18.590 --> 00:08:21.900
By destructuring, what I'm gonna
do is take that fns array, and

115
00:08:21.900 --> 00:08:24.670
destructure it down into
three separate parts.

116
00:08:24.670 --> 00:08:31.109
I'm gonna create an fn0, an fn1,
and then the rest of the fns

117
00:08:37.970 --> 00:08:39.820
and I'm gonna destructure that FN's array.

118
00:08:40.860 --> 00:08:44.020
So I now said that the item in
the first position, I'm gonna FN0.

119
00:08:44.020 --> 00:08:48.190
The one in the second position, FN1 and
everything else i'm gonna call rest.

120
00:08:49.260 --> 00:08:53.550
Call it whatever you wanna,
but I call it rest, so

121
00:08:53.550 --> 00:08:59.500
that's essentially breaking down my list
from one list into kind of like a head,

122
00:08:59.500 --> 00:09:03.160
which are these first 2 items and
then my tail which is called rest.

123
00:09:05.780 --> 00:09:08.940
Now that I have those individual parts,

124
00:09:08.940 --> 00:09:14.210
I want to reconstruct my list So
I'm gonna reassign the fns.

125
00:09:14.210 --> 00:09:18.490
I wanna reconstruct that list and
at the end of the list,

126
00:09:18.490 --> 00:09:20.950
I wanna go ahead and
include everything that was in rest.

127
00:09:21.970 --> 00:09:26.832
But in the first position of fns,
I wanna create that function that wraps

128
00:09:26.832 --> 00:09:30.830
around my call to add2, so
I'm gonna put a function here.

129
00:09:32.712 --> 00:09:37.070
&gt;&gt; Kyle: And that function, when called,

130
00:09:37.070 --> 00:09:42.790
should call add2 with fn sub 0 and
fn sub 1.

131
00:09:42.790 --> 00:09:47.949
So that call add2 hasn't happened, but
I've made a function that will do it.

132
00:09:49.050 --> 00:09:51.890
And I made a function that will just
keep doing that and keep doing that and

133
00:09:51.890 --> 00:09:53.670
keep doing that and keep doing that.

134
00:09:53.670 --> 00:09:58.847
So if you visualize in your head,
we've got this big, big, giant, nested set

135
00:09:58.847 --> 00:10:04.515
of functions, it's a big internal pyramid
of functions nested inside of functions.

136
00:10:04.515 --> 00:10:07.898
And at the very end of this foreloop,

137
00:10:07.898 --> 00:10:13.248
I'm left with fns[o] as my
big harry nested function and

138
00:10:13.248 --> 00:10:18.940
fns[1] is just the final
function from the list left over.

139
00:10:18.940 --> 00:10:23.341
But those two function when
you code them they will be

140
00:10:23.341 --> 00:10:28.052
both compute their own number and
be passed into add 2.

141
00:10:31.259 --> 00:10:35.154
&gt;&gt; Kyle: So, let's try this utility.

142
00:10:38.229 --> 00:10:41.491
&gt;&gt; Kyle: And I'm gonna make up
a list of some numbers here,

143
00:10:41.491 --> 00:10:45.150
numbers that I should be able
to add together in my head.

144
00:10:50.420 --> 00:10:56.450
That should end up with the number
35 if I did my math correctly.

145
00:10:56.450 --> 00:10:58.440
Let's take that over to the browser and

146
00:10:58.440 --> 00:11:02.290
verify that I didn't make
a mistake in my algorithm.

147
00:11:05.130 --> 00:11:08.040
I did make a mistake,
where did I make a mistake.

148
00:11:25.972 --> 00:11:26.857
&gt;&gt; Kyle: One moment,

149
00:11:26.857 --> 00:11:31.430
what you're passing is just
constant values into the functions.

150
00:11:31.430 --> 00:11:35.310
You are correct [LAUGH] Sorry about that.

151
00:11:35.310 --> 00:11:40.517
Okay, these all need to be

152
00:11:40.517 --> 00:11:47.149
their function representatives

153
00:11:47.149 --> 00:11:52.602
[SOUND] let's try it again.

154
00:11:52.602 --> 00:11:57.535
[SOUND] Still didn't get on,

155
00:11:57.535 --> 00:12:03.085
is it cuz they're calling add2

156
00:12:03.085 --> 00:12:08.231
instead of addn on line 24?

157
00:12:11.226 --> 00:12:14.440
&gt;&gt; Kyle: No, add2 takes two
functions which is what we want.

158
00:12:14.440 --> 00:12:18.844
I wanna pass those in,
we're passing in two functions to it.

159
00:12:18.844 --> 00:12:19.956
&gt;&gt; Speaker 2: On 24.

160
00:12:21.798 --> 00:12:22.875
&gt;&gt; Speaker 3: Yeah, that should be added.

161
00:12:22.875 --> 00:12:25.974
&gt;&gt; Kyle: Of course it is, I'm sorry.

162
00:12:35.013 --> 00:12:38.304
&gt;&gt; Kyle: I've only done this exercise
100 times, how did I make that mistake.

163
00:12:38.304 --> 00:12:41.343
Sorry about that, thanks for the catch.

164
00:12:42.809 --> 00:12:43.410
&gt;&gt; Kyle: There we go.

