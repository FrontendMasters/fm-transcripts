WEBVTT

1
00:00:00.400 --> 00:00:02.980
&gt;&gt; Kyle Simpson: All functional
programming, discussions,

2
00:00:02.980 --> 00:00:05.330
after we've motivated
the discussion in itself.

3
00:00:05.330 --> 00:00:09.450
All functional programming discussions
need to start with the function.

4
00:00:11.130 --> 00:00:14.400
We have to understand what function
is before we have any hope

5
00:00:14.400 --> 00:00:17.280
of understanding what functional
programming is really trying to get for

6
00:00:17.280 --> 00:00:21.690
us.
&gt;&gt; Kyle Simpson: So here's a code sample.

7
00:00:21.690 --> 00:00:25.710
I've got a foo function
that prints some stuff.

8
00:00:25.710 --> 00:00:28.743
It's got a console.log statement and
it prints some numbers to it.

9
00:00:28.743 --> 00:00:32.830
And then I have a bar function,
which calls that foo function.

10
00:00:34.900 --> 00:00:39.540
And I'm deliberately using some
features here that are ES6, and

11
00:00:39.540 --> 00:00:41.480
they're maybe not
terribly familiar to you.

12
00:00:41.480 --> 00:00:43.350
If you see on line 5, x = 2,

13
00:00:43.350 --> 00:00:48.090
that's the default parameter
syntax that was out in ES6.

14
00:00:48.090 --> 00:00:51.300
The ...args there on
line 5 is gathering up

15
00:00:51.300 --> 00:00:53.630
the rest of the parameters
into an arguments array.

16
00:00:53.630 --> 00:00:56.680
That's called the rest or
the gather operator.

17
00:00:56.680 --> 00:00:59.706
The ...args on the next line
is the reverse of that.

18
00:00:59.706 --> 00:01:02.160
It's spreading an array out.

19
00:01:02.160 --> 00:01:05.990
Spreading the args array out as
individual positional parameters.

20
00:01:05.990 --> 00:01:08.240
So, and same thing down on line 14,

21
00:01:08.240 --> 00:01:11.660
we're spreading out that array
as individual arguments.

22
00:01:11.660 --> 00:01:14.396
If those features aren't
terribly familiar to you,

23
00:01:14.396 --> 00:01:18.406
I'm gonna strongly recommend you take
a little bit of time to read about some of

24
00:01:18.406 --> 00:01:20.380
the stuff that's been added to ES6.

25
00:01:20.380 --> 00:01:25.276
Because functional programmers want to
use as much as possible what the language

26
00:01:25.276 --> 00:01:25.930
gives us.

27
00:01:25.930 --> 00:01:29.187
So that we're not dealing with
the imperative stuff, and

28
00:01:29.187 --> 00:01:32.188
we're focusing at the higher
level of declarative.

29
00:01:32.188 --> 00:01:34.950
And that really is what ES6 was all about.

30
00:01:34.950 --> 00:01:41.460
The most important parts of ES6 were about
creating declarative boundaries instead

31
00:01:41.460 --> 00:01:46.426
of hyper focusing on imperativeness.
&gt;&gt; Kyle Simpson: So just I

32
00:01:46.426 --> 00:01:50.270
wanted to call that out in case those
things look a little unfamiliar to you,

33
00:01:50.270 --> 00:01:54.160
I'm gonna be reusing them across
all the rest of the slides.

34
00:01:54.160 --> 00:01:55.950
Fortunately, I've written
a book about ES6,

35
00:01:55.950 --> 00:02:00.000
it's in the You Don't Know JS book series,
that's also available on GitHub.

36
00:02:00.000 --> 00:02:02.330
So if you're struggling to
understand some of that ES6 stuff,

37
00:02:02.330 --> 00:02:07.759
feel free to take a look at that,
specifically chapter two.

38
00:02:07.759 --> 00:02:08.266
And yes,

39
00:02:08.266 --> 00:02:12.391
we do also have a course here on Frontend
Masters called ES6 The Right Parts,

40
00:02:12.391 --> 00:02:19.230
where we cover a lot of that same stuff.
&gt;&gt; Kyle Simpson: But what's going on here?

41
00:02:19.230 --> 00:02:25.760
Are foo and bar both equally
deserving of the label function?

42
00:02:25.760 --> 00:02:28.130
They both have the keyword
function in them.

43
00:02:28.130 --> 00:02:31.380
But does that make them functions
because they use the function keyword?

44
00:02:33.270 --> 00:02:35.180
I'll just flatly say no.

45
00:02:35.180 --> 00:02:37.520
I'll just answer that very bluntly.

46
00:02:37.520 --> 00:02:41.848
No, as a matter of fact foo most
definitely is not a function from

47
00:02:41.848 --> 00:02:47.570
the perspective of a functional program.
&gt;&gt; Kyle Simpson: What about bar?

48
00:02:47.570 --> 00:02:48.970
Is bar a function?

49
00:02:48.970 --> 00:02:55.150
Well, it does in essence seem to be
doing what we want a function to do.

50
00:02:55.150 --> 00:02:56.630
There is a return keyword there.

51
00:02:56.630 --> 00:02:59.500
We are using the inputs
that have been passed in.

52
00:03:01.000 --> 00:03:05.603
But because bar calls a foo,
and foo is not a function,

53
00:03:05.603 --> 00:03:10.206
I would say, if you have a function,
a real function,

54
00:03:10.206 --> 00:03:14.130
that calls something
that's not a function.

55
00:03:14.130 --> 00:03:19.160
That sort of pollutes the fact that
the original thing was a function.

56
00:03:19.160 --> 00:03:21.900
In a sense, it does kinda need
to be turtles all the way down.

57
00:03:23.110 --> 00:03:28.090
So even though bar in isolation might look
more like a function, the fact that it

58
00:03:28.090 --> 00:03:32.060
calls something which is most definitely
not going to meet that definition,

59
00:03:33.300 --> 00:03:38.660
means that we really can't
call bar a function.

60
00:03:39.860 --> 00:03:45.590
Now it does actually do some stuff,
but there's another term for that.

61
00:03:46.770 --> 00:03:52.140
The term for an arbitrary collection
of operations is a procedure.

62
00:03:53.230 --> 00:03:55.430
We use the same keyword here.

63
00:03:55.430 --> 00:03:58.809
We use the keyword function for
both things that are procedures,

64
00:03:59.900 --> 00:04:03.090
collections of operations, and functions.

65
00:04:03.090 --> 00:04:06.370
And as a matter of fact,
if I drew the Venn diagram here,

66
00:04:07.670 --> 00:04:11.650
all functions are procedures but
not all procedures are functions.

67
00:04:12.680 --> 00:04:13.810
Got it?

68
00:04:13.810 --> 00:04:17.634
The Venn diagram.
&gt;&gt; Kyle Simpson: [COUGH]

69
00:04:21.165 --> 00:04:23.053
&gt;&gt; Kyle Simpson: So what is it mean to

70
00:04:23.053 --> 00:04:27.714
be a function?
&gt;&gt; Kyle Simpson: This one most definitely

71
00:04:27.714 --> 00:04:30.068
is a function by that definition and

72
00:04:30.068 --> 00:04:33.530
I wanna talk about what's
different with this foo.

73
00:04:35.180 --> 00:04:40.510
This foo takes some inputs, it does
some operations on those inputs and

74
00:04:40.510 --> 00:04:43.360
importantly it returns an output.

75
00:04:45.960 --> 00:04:53.010
At the most based sense, I could say
that a function to be real function and

76
00:04:53.010 --> 00:04:56.890
not just a procedure,
must have a return keyword in it.

77
00:04:58.420 --> 00:05:02.770
A function without a return statement
Is not a function, it's a procedure.

78
00:05:05.080 --> 00:05:11.344
And it really needs to ideally return
something affirmative and useful.

79
00:05:11.344 --> 00:05:14.385
Not just an early return
like return semicolon,

80
00:05:14.385 --> 00:05:18.110
which you are just escaping
your flow control early.

81
00:05:18.110 --> 00:05:20.799
Ideally, it needs to
actually return a value.

82
00:05:22.330 --> 00:05:25.640
That in the most pure sense
that's what we mean by

83
00:05:25.640 --> 00:05:28.084
function.
&gt;&gt; Kyle Simpson: Okay,

84
00:05:28.084 --> 00:05:31.830
now I promised we weren't gonna
get too much into the notation.

85
00:05:31.830 --> 00:05:35.950
But I just need to dip our toe back
into some math just for a brief moment.

86
00:05:37.430 --> 00:05:40.500
Hopefully it won't be too
traumatic to many of you.

87
00:05:40.500 --> 00:05:46.480
Do you remember back, with fondness I'm
sure, to your days in elementary school,

88
00:05:46.480 --> 00:05:51.170
middle school, high school, when you
were learning about things like algebra.

89
00:05:51.170 --> 00:05:54.340
And you learned about equations like this.

90
00:05:54.340 --> 00:05:58.078
And this was, if you remember,
this was f (x),

91
00:05:58.078 --> 00:06:01.994
the function f (x) is
defined as 2x squared + 3.

92
00:06:03.550 --> 00:06:07.540
And then you're like, well,
solve for x, I mean solve for f(x).

93
00:06:07.540 --> 00:06:09.920
Put in an x value.

94
00:06:09.920 --> 00:06:11.860
Compute the result.

95
00:06:11.860 --> 00:06:15.193
If I put in the value 3,
I'm gonna get 21 out.

96
00:06:15.193 --> 00:06:17.880
The value 3 gets squared to 9.

97
00:06:17.880 --> 00:06:19.920
We multiply it by 2 then we get 18.

98
00:06:19.920 --> 00:06:21.590
We add 3 to it and we get 21 out.

99
00:06:23.240 --> 00:06:27.820
So there was this sense of
f (x) = 2x squared + 3.

100
00:06:27.820 --> 00:06:33.139
And sometimes you'd even write it as y
= 2x + 3 and they'd say solve for y.

101
00:06:33.139 --> 00:06:36.095
Or then they'd give you the y and
say solve for x and

102
00:06:36.095 --> 00:06:39.220
you had to adjust this stuff around.

103
00:06:39.220 --> 00:06:44.870
I remember in my math class
how deeply abstract that felt.

104
00:06:44.870 --> 00:06:47.150
I'm just moving these
weird symbols around and

105
00:06:48.500 --> 00:06:52.990
I'm not one of those people that
particularly loves to deal with abstracts.

106
00:06:52.990 --> 00:06:56.150
I like to work with concrete
stuff a lot better.

107
00:06:56.150 --> 00:06:59.530
And so when I was working with these
abstract things, I could do it.

108
00:06:59.530 --> 00:07:01.930
I mean, I was adept at math.

109
00:07:01.930 --> 00:07:05.280
It was not one of the topics that
scared me, and to some people it does.

110
00:07:05.280 --> 00:07:09.490
And I totally get that, I understand
if math was intimidating to you.

111
00:07:09.490 --> 00:07:12.800
Math came naturally to me but
even though it came naturally to me,

112
00:07:12.800 --> 00:07:16.210
this was still uncomfortable for
me to deal with abstract stuff.

113
00:07:16.210 --> 00:07:19.360
And it only got worse when I got to
calculus, and we were dealing with all

114
00:07:19.360 --> 00:07:24.010
these weird symbols that I didn't know and
then I, I mean, I went full into it.

115
00:07:24.010 --> 00:07:28.480
I took differential equations and linear
algebra and all kinds of crazy stuff.

116
00:07:28.480 --> 00:07:32.140
And I never really liked
the abstract part of math.

117
00:07:33.340 --> 00:07:36.930
Which is how I figured out in
college I better not go be a math

118
00:07:36.930 --> 00:07:39.060
major because that's all it is.

119
00:07:39.060 --> 00:07:42.150
It just gets more and
more abstract as you go along.

120
00:07:42.150 --> 00:07:47.109
But one of the things that I loved about,
&gt;&gt; Kyle Simpson: The algebra side of

121
00:07:47.109 --> 00:07:51.847
this is that at some point in the class,
the teacher said, well,

122
00:07:51.847 --> 00:07:56.067
one way to think of what this
thing is doing is to plot out all

123
00:07:56.067 --> 00:07:59.100
those input outputs as points on a graph.

124
00:08:00.689 --> 00:08:04.541
I don't know if anybody remembers
working on the old TI-85s and

125
00:08:04.541 --> 00:08:06.896
plotting the graphs to your equations.

126
00:08:06.896 --> 00:08:11.266
And well, we never used the TI-85 for
graphing, did we?

127
00:08:11.266 --> 00:08:12.570
We used it to play games.

128
00:08:12.570 --> 00:08:13.530
Let's just all be honest.

129
00:08:13.530 --> 00:08:16.740
But if you remember,
we plotted out the points.

130
00:08:16.740 --> 00:08:20.890
And so if we stick in that x value of 3,
which is over there on

131
00:08:20.890 --> 00:08:25.637
the right-hand side of our x-axis,
you see that we spit out 21.

132
00:08:25.637 --> 00:08:30.537
And that's roughly corresponds to where
we see that part of the curve up around

133
00:08:30.537 --> 00:08:31.660
the y value 21.

134
00:08:31.660 --> 00:08:37.520
So these inputs represented x values and
the outputs represented y values.

135
00:08:37.520 --> 00:08:40.210
So what we did was we said
here's this abstract equation.

136
00:08:41.690 --> 00:08:43.520
And we put an input in,
we got an output out.

137
00:08:43.520 --> 00:08:46.480
We took those pairs of input outputs.

138
00:08:46.480 --> 00:08:51.325
And we assigned them a semantic meaning,
which is that they're points on a curve,

139
00:08:51.325 --> 00:08:52.790
or a line, or whatever.

140
00:08:53.800 --> 00:08:56.158
And if we put enough of those together,

141
00:08:56.158 --> 00:08:59.234
we can start to visualize
what this thing is doing.

142
00:08:59.234 --> 00:09:03.265
And that's what made me start loving
that part of math again, when I could

143
00:09:03.265 --> 00:09:08.160
take something that was abstract and start
to make something more concrete of it.

144
00:09:08.160 --> 00:09:10.667
And then I go all abstract
again when I got into calculus.

145
00:09:10.667 --> 00:09:12.371
And they were talking about derivatives,

146
00:09:12.371 --> 00:09:14.320
I'm like I don't know
what a derivative means.

147
00:09:14.320 --> 00:09:20.360
I know that x squared is the derivative
is 2x, but I don't know what that means.

148
00:09:20.360 --> 00:09:24.763
And then the teacher was like it's just
the line that's tangent to the curve.

149
00:09:24.763 --> 00:09:27.820
And I was like now I have
a thing to visualize.

150
00:09:27.820 --> 00:09:28.874
It was concrete again.

151
00:09:28.874 --> 00:09:31.120
And then we got to integrals and
I was like my god.

152
00:09:31.120 --> 00:09:32.906
What on Earth is this little symbol?

153
00:09:32.906 --> 00:09:33.996
And I don't understand this.

154
00:09:33.996 --> 00:09:37.611
And the teacher is like it's just
the area underneath the line.

155
00:09:37.611 --> 00:09:38.990
And I was like it's concrete again.

156
00:09:38.990 --> 00:09:41.113
So it was this back and forth.

157
00:09:41.113 --> 00:09:44.274
And I basically gave up on math when
I stopped being able to go back to

158
00:09:44.274 --> 00:09:45.950
the concrete part.

159
00:09:45.950 --> 00:09:50.790
Cuz the abstract part was not my strength.

160
00:09:50.790 --> 00:09:53.670
But I liked the fact that I could deal
with something in the abstract and

161
00:09:53.670 --> 00:09:57.350
always connect it back
to a concrete intuition.

162
00:09:58.890 --> 00:10:04.240
I bring all this up to say that
the definition of function,

163
00:10:04.240 --> 00:10:08.770
that a functional programmer uses,
comes specifically from this notion

164
00:10:08.770 --> 00:10:11.800
of putting in some inputs,
computing an output.

165
00:10:13.140 --> 00:10:14.355
That's what we mean by function.

166
00:10:14.355 --> 00:10:17.501
So how to express that in JavaScript,
the true,

167
00:10:17.501 --> 00:10:22.570
functional representation of it
would have to look like that?

168
00:10:22.570 --> 00:10:27.880
I would have to say f(x), do some
calculations on it, and return that value.

169
00:10:28.950 --> 00:10:31.691
That's how I would implement
an actual real function.

170
00:10:34.811 --> 00:10:36.690
&gt;&gt; Kyle Simpson: So what about this code?

171
00:10:36.690 --> 00:10:37.460
Looks similar.

172
00:10:38.510 --> 00:10:40.040
I've got an f function.

173
00:10:40.040 --> 00:10:42.677
It doesn't have an input,
but I am using an x.

174
00:10:42.677 --> 00:10:46.382
And it doesn't have a return statement,
but I am assigning it to a y.

175
00:10:46.382 --> 00:10:48.180
So is this a function?

176
00:10:49.980 --> 00:10:55.197
It does seem to be the, I could use it
in a sense to get my x and my y pairs.

177
00:10:55.197 --> 00:10:56.750
Is this gonna be a function?

178
00:10:56.750 --> 00:10:58.130
Well, actually, not really.

179
00:11:00.060 --> 00:11:03.320
Not really, because this is

180
00:11:04.610 --> 00:11:08.520
using what we referred to
disaffectionately as side effects.

181
00:11:08.520 --> 00:11:13.960
Specifically, there's two different ways
to think about a side effect, x, here.

182
00:11:13.960 --> 00:11:17.350
We use x on line 2.

183
00:11:17.350 --> 00:11:20.290
x is not an input to the function or

184
00:11:20.290 --> 00:11:22.810
at least that's not a direct
input to the function.

185
00:11:22.810 --> 00:11:23.834
It's not a parameter.

186
00:11:23.834 --> 00:11:26.130
It's not an argument that we pass in.

187
00:11:26.130 --> 00:11:29.690
It is a variable that we access to use as

188
00:11:29.690 --> 00:11:34.268
an indirect input.
&gt;&gt; Kyle Simpson: That's what I like

189
00:11:34.268 --> 00:11:35.460
to call a side cause.

190
00:11:36.490 --> 00:11:38.620
It's not a direct cause.

191
00:11:38.620 --> 00:11:41.550
A direct cause versus a direct
effect would be a direct

192
00:11:41.550 --> 00:11:43.790
input versus a direct output.

193
00:11:43.790 --> 00:11:49.710
We see no direct input here, rather
we see a side input or a side cause.

194
00:11:49.710 --> 00:11:51.737
Moreover, we do not see any direct output.

195
00:11:51.737 --> 00:11:53.540
We don't see a return statement.

196
00:11:53.540 --> 00:11:56.040
Rather what we see is a side effect,

197
00:11:57.200 --> 00:12:02.270
which is the output into a variable
instead of through the return statement.

198
00:12:03.830 --> 00:12:08.830
So while I still have the general
sense that I'm computing data here,

199
00:12:08.830 --> 00:12:13.090
I've violated one of the fundamental
tenants of functions and

200
00:12:13.090 --> 00:12:15.347
indeed a functional programming.

201
00:12:15.347 --> 00:12:17.370
And that,
I've allowed these side causes and

202
00:12:17.370 --> 00:12:20.250
side effects to be part
of the implementation.

203
00:12:20.250 --> 00:12:25.630
Now, [COUGH] I used to think that
when functional programmers got all

204
00:12:25.630 --> 00:12:33.030
up in arms about side effects,
that it was mostly just throwing stuff out

205
00:12:33.030 --> 00:12:37.790
there academically to make yourself sound
smarter, that it didn't really matter.

206
00:12:37.790 --> 00:12:39.010
And I think one of the reasons for

207
00:12:39.010 --> 00:12:42.210
that is, I don't have any proof for
this, but I'm

208
00:12:42.210 --> 00:12:46.980
pretty sure just the natural state of all
programmers is to write with side effects.

209
00:12:46.980 --> 00:12:48.849
I think that's just our natural instinct.

210
00:12:50.470 --> 00:12:52.566
I don't know, cuz I don't write Haskell.

211
00:12:52.566 --> 00:12:57.130
But I kinda think people in Haskell
probably also would like to write side

212
00:12:57.130 --> 00:13:01.650
effects and they are just not allowed to,
cuz the language doesn't let it happen.

213
00:13:01.650 --> 00:13:06.010
But I think especially for the rest of us
not writing in a language that restricts

214
00:13:06.010 --> 00:13:10.720
that is just our natural state of
being to think about using stuff,

215
00:13:10.720 --> 00:13:13.710
and setting things over here,
and all that stuff.

216
00:13:13.710 --> 00:13:17.730
So I think this is our
natural state of affairs.

217
00:13:17.730 --> 00:13:20.490
But that is not what
the functional programmer says.

218
00:13:20.490 --> 00:13:23.910
The functional programmer
says this is bad for us.

219
00:13:23.910 --> 00:13:25.914
Now, why is it?

220
00:13:25.914 --> 00:13:29.450
Why is this side effect,
why are these side causes bad?

221
00:13:29.450 --> 00:13:30.730
Is it just an academic thing?

222
00:13:32.280 --> 00:13:34.828
Let me try to give you a clue.

223
00:13:34.828 --> 00:13:40.740
Again, I am not a card-carrying member of
the cool functional programmer kids club.

224
00:13:40.740 --> 00:13:42.780
I'm not a real functional programmer.

225
00:13:42.780 --> 00:13:44.120
I'm just not.

226
00:13:44.120 --> 00:13:46.754
So I have to always come
from the outside in.

227
00:13:46.754 --> 00:13:50.368
I have to give you my interpretation
of what I think it is.

228
00:13:50.368 --> 00:13:54.581
And I'm just on this crazy little journey
trying to learn stuff and helping you come

229
00:13:54.581 --> 00:13:58.336
along that journey with me.
&gt;&gt; Kyle Simpson: But

230
00:13:58.336 --> 00:14:03.424
I would hazard that a guess or
an assertion that the reason why we

231
00:14:03.424 --> 00:14:09.287
don't like side effects is because
it makes an individual line of code.

232
00:14:09.287 --> 00:14:14.246
For example, line 8, it makes that
line impossible to predict out

233
00:14:14.246 --> 00:14:17.730
of the context of all
the other lines before it.

234
00:14:19.160 --> 00:14:25.300
Now, that's only on line 8 but
imagine that was on line 9,712.

235
00:14:25.300 --> 00:14:27.510
There was a function call there.

236
00:14:27.510 --> 00:14:33.047
To really, truly understand
what line 9,712 was doing,

237
00:14:33.047 --> 00:14:36.079
you would have to start at line 1.

238
00:14:36.079 --> 00:14:41.105
And compute all of the previous
9,711 lines in your own

239
00:14:41.105 --> 00:14:48.762
head before you could then compute line 12
to line 9,712 to understand what it did.

240
00:14:48.762 --> 00:14:50.249
You have to do that work yourself.

241
00:14:52.160 --> 00:14:53.520
Can you?

242
00:14:53.520 --> 00:14:57.720
I suppose, if you are a glutton for
punishment, you can

243
00:14:57.720 --> 00:15:00.890
execute an entire JavaScript program
statement by statement in your head.

244
00:15:02.190 --> 00:15:03.480
But that's not what you're good at.

245
00:15:05.280 --> 00:15:08.600
We're not particularly good at
executing programs in our head.

246
00:15:08.600 --> 00:15:10.690
Guess who is good at
executing the program?

247
00:15:12.070 --> 00:15:12.710
The computer.

248
00:15:14.290 --> 00:15:18.640
But what we have done in this choice,
to assign to a variable outside and

249
00:15:18.640 --> 00:15:20.684
to use a variable as a side cause.

250
00:15:20.684 --> 00:15:25.125
What we've done is essentially forced the
reader of our code to do something that

251
00:15:25.125 --> 00:15:26.970
they're not naturally good at.

252
00:15:28.560 --> 00:15:35.098
To execute the entire program flawlessly,
so that they can understand line 9,712.

253
00:15:35.098 --> 00:15:39.980
And if they don't execute it flawlessly,
at every single line,

254
00:15:39.980 --> 00:15:42.465
if they make a mistake anywhere,

255
00:15:42.465 --> 00:15:47.371
they can't fully trust that they
know what that line is gonna do.

256
00:15:48.940 --> 00:15:51.520
If you can't fully trust it,
why are you even trying to read it?

257
00:15:53.040 --> 00:15:55.900
I mean, isn't that the ultimate
waste of time to read something and

258
00:15:55.900 --> 00:15:59.030
then not have full confidence
in what it's gonna do?

259
00:16:01.960 --> 00:16:05.975
[COUGH] So in essence,
our choices here are making the code.

260
00:16:05.975 --> 00:16:08.457
While it makes it easier to write,

261
00:16:08.457 --> 00:16:14.030
there's no question in my mind that
writing side effect code is a lot easier.

262
00:16:15.450 --> 00:16:16.470
I'm good at that.

263
00:16:17.860 --> 00:16:20.826
Not so great at this functional thing yet,
but I'm working on it.

264
00:16:20.826 --> 00:16:23.395
But I'm great at writing
nonfunctional code.

265
00:16:23.395 --> 00:16:28.475
It's a lot easier to write it,
but why is it that we focus so

266
00:16:28.475 --> 00:16:32.107
much on optimizing for our own writing and

267
00:16:32.107 --> 00:16:36.594
not optimize much for
how people are gonna read it?

268
00:16:36.594 --> 00:16:40.691
So, one of the clearest pictures that I
can give of the problem with optimizing

269
00:16:40.691 --> 00:16:44.852
for writeability instead of readability
is that we are forcing that person to do

270
00:16:44.852 --> 00:16:48.667
a bunch of extra work just to understand
line eight and that's not fair.

271
00:16:48.667 --> 00:16:52.940
That's not a good idea to
require them to do that.

272
00:16:53.960 --> 00:16:57.890
How do we use the function definition
that we showed on the previous slide?

273
00:16:59.070 --> 00:17:01.245
Have we use that version of it?

274
00:17:01.245 --> 00:17:04.725
That function can be taken
completely an isolation.

275
00:17:04.725 --> 00:17:06.690
You can put in an input.

276
00:17:06.690 --> 00:17:10.490
Get an output out and know exactly
what it's gonna do every single time,

277
00:17:10.490 --> 00:17:12.460
it doesn't matter what
the rest of the program does.

278
00:17:14.500 --> 00:17:16.890
Choosing not to program
with these side causes and

279
00:17:16.890 --> 00:17:21.990
the side effects will allow us
to read code much more easily.

280
00:17:24.310 --> 00:17:28.952
So, the functional programmer
tells us avoid side effects.

281
00:17:28.952 --> 00:17:32.627
Avoid side effects wherever possible and
I would say, they say that.

282
00:17:32.627 --> 00:17:37.176
Because side effects made code a lot
harder to read and reason about, and

283
00:17:37.176 --> 00:17:40.649
prove.
&gt;&gt; Kyle Simpson: So,

284
00:17:40.649 --> 00:17:43.750
let's do a little thought
experiment here for just a moment.

285
00:17:45.320 --> 00:17:49.940
Cuz I know that we developers
love to take something when

286
00:17:49.940 --> 00:17:53.710
somebody says something and
we're like that sounded cool.

287
00:17:53.710 --> 00:17:57.868
We love to take that and
extrapolate it to its extreme.

288
00:17:57.868 --> 00:17:58.882
So, what's the extreme here?

289
00:17:58.882 --> 00:18:00.778
Well, if side effects are bad,

290
00:18:00.778 --> 00:18:05.003
that means he's telling me I should
not program with any side effects.

291
00:18:05.003 --> 00:18:05.868
Let's write a program that's completely
side effect free, that must be the goal.

292
00:18:05.868 --> 00:18:10.626
Let's do a thought experiment and
think about that

293
00:18:10.626 --> 00:18:15.727
particular program,
a program with no side effects.

294
00:18:15.727 --> 00:18:20.629
Think about how would you
observed that program and

295
00:18:20.629 --> 00:18:24.167
what it did if it had no side effects?

296
00:18:24.167 --> 00:18:25.955
Well, refer to the console.

297
00:18:25.955 --> 00:18:26.968
That's a side effect.

298
00:18:26.968 --> 00:18:29.690
Input, output is a side effect.

299
00:18:29.690 --> 00:18:33.356
A macrolevel obviously at the system
level, it's a side effect.

300
00:18:33.356 --> 00:18:35.670
Well, it could like
write to a file system.

301
00:18:35.670 --> 00:18:38.008
That's a side effect.

302
00:18:38.008 --> 00:18:40.674
Well, it could add dome
element to the page.

303
00:18:40.674 --> 00:18:45.005
That's a side effect.

304
00:18:45.005 --> 00:18:46.826
It can make a network request.

305
00:18:46.826 --> 00:18:49.266
That's a side effect.

306
00:18:49.266 --> 00:18:52.455
Shoot, I can't really
observe this program.

307
00:18:52.455 --> 00:18:56.026
If everything that it does on the outside
you're telling me that's gonna be a side

308
00:18:56.026 --> 00:18:57.901
effect, how could I possibly observe it?

309
00:18:57.901 --> 00:18:59.597
Here's what I'm getting out.

310
00:18:59.597 --> 00:19:04.604
If you truly did write a program
that had no side effects,

311
00:19:04.604 --> 00:19:11.294
that program would be indistinguishable
from the absence of that program.

312
00:19:11.294 --> 00:19:15.672
It would be impossible to prove
that that program existed,

313
00:19:15.672 --> 00:19:20.057
if you wrote that program
absolutely with no side effects.

314
00:19:20.057 --> 00:19:22.326
It would be impossible to
prove it even existed.

315
00:19:22.326 --> 00:19:28.487
I'll go so far with this little
thought experiment as to say.

316
00:19:28.487 --> 00:19:34.121
What about the heat produced by
the CPU when it runs said program?

317
00:19:34.121 --> 00:19:36.562
Is that a side effect?

318
00:19:36.562 --> 00:19:39.690
It's definitely something
that can be observed,

319
00:19:39.690 --> 00:19:43.047
I think it falls under
the definition of a side effect.

320
00:19:43.047 --> 00:19:44.089
It's not a direct output.

321
00:19:44.089 --> 00:19:45.660
It's an indirect output.

322
00:19:45.660 --> 00:19:46.480
How about this?

323
00:19:48.920 --> 00:19:54.510
What about the delay in time when
the CPU is running your program and

324
00:19:54.510 --> 00:19:57.900
doesn't run some other program
at that exact instant?

325
00:19:57.900 --> 00:20:00.040
Is that delay in time a side effect?

326
00:20:02.020 --> 00:20:05.930
It's an observable behavior
of the overall system.

327
00:20:07.160 --> 00:20:12.170
It is not possible, only in theory
not actually practically possible

328
00:20:12.170 --> 00:20:13.640
to write a program with no side effects.

329
00:20:14.910 --> 00:20:16.570
Functional programmers know this.

330
00:20:16.570 --> 00:20:20.680
Pascal programmers know you
have to have side effects.

331
00:20:20.680 --> 00:20:22.630
They made a language that
has no side effects and

332
00:20:22.630 --> 00:20:24.750
they're like we gotta have side effects.

333
00:20:24.750 --> 00:20:27.233
So, they came up with a trick.

334
00:20:27.233 --> 00:20:28.385
It's called the IO monad.

335
00:20:28.385 --> 00:20:32.480
Let's them get around some of the rules
of the language to do side effects.

336
00:20:34.250 --> 00:20:38.146
Now a Haskell programmer says,
the best thing for

337
00:20:38.146 --> 00:20:43.430
me to do is write as much of my program
as I can without side effects and

338
00:20:43.430 --> 00:20:47.727
only have a few side effects
as minimally as possible.

339
00:20:47.727 --> 00:20:50.566
That's really what we mean when we say,
avoid side effects.

340
00:20:50.566 --> 00:20:52.164
What we really mean is avoid them,
if at all possible.

341
00:20:52.164 --> 00:20:59.240
Anything you do, print to the console.

342
00:20:59.240 --> 00:21:01.297
Add something to the DOM.

343
00:21:01.297 --> 00:21:02.359
Make a network request.

344
00:21:02.359 --> 00:21:03.402
Write to a file.

345
00:21:03.402 --> 00:21:08.391
Any of that is gonna be output and you're
gonna need to do at least some of that for

346
00:21:08.391 --> 00:21:13.158
your program to be useful, but I think
the natural state of affairs is that we

347
00:21:13.158 --> 00:21:17.500
just sort of strewn our side effects
all across our entire code base.

348
00:21:18.560 --> 00:21:22.020
The functional programmer says,
the more you do that, the harder it is to

349
00:21:22.020 --> 00:21:26.730
understand the code base and even harder
it is to fix bugs when they happen.

350
00:21:28.750 --> 00:21:30.370
So the functional programmer says,

351
00:21:30.370 --> 00:21:35.250
how about if I make as much of my program
without side effects as possible?

352
00:21:35.250 --> 00:21:37.750
And then the parts that
do have side effects,

353
00:21:37.750 --> 00:21:40.440
I'm gonna collect them in
a very specific location.

354
00:21:40.440 --> 00:21:44.670
I'm gonna label them obviously
as having these side effects.

355
00:21:44.670 --> 00:21:49.630
And then if I have a bug,
guess where I'm gonna look first?

356
00:21:49.630 --> 00:21:51.840
In the code with side effects,

357
00:21:51.840 --> 00:21:55.760
because it's vastly more likely that
my bug is coming from a side effect

358
00:21:55.760 --> 00:21:59.980
than from coming from my pure usage
of mathematically proven concepts.

359
00:22:01.120 --> 00:22:05.840
Not guaranteed, but it's like 99
with a bunch of 9s after it more

360
00:22:05.840 --> 00:22:09.630
likely that it's in the side effect code.

361
00:22:09.630 --> 00:22:13.215
Just choosing to organize our
code into those two buckets.

362
00:22:13.215 --> 00:22:18.434
The bucket of no side effects and
the bucket of side effects, drastically

363
00:22:18.434 --> 00:22:23.568
improves our ability to read about and
reason about and debug our code and

364
00:22:23.568 --> 00:22:28.985
I think that's a really important effort
on our part that we should expend.

365
00:22:28.985 --> 00:22:32.417
I think we should try
really hard to make it, so

366
00:22:32.417 --> 00:22:35.949
that it's obvious where
the side effects are.

367
00:22:35.949 --> 00:22:38.014
We should avoid them wherever possible.

368
00:22:38.014 --> 00:22:40.483
I love how the functional programmer
typically will describe this.

369
00:22:40.483 --> 00:22:42.834
They'll describe like a sphere.

370
00:22:42.834 --> 00:22:45.942
Remember, I love these
concrete visualization things.

371
00:22:45.942 --> 00:22:50.034
They'll describe a sphere and they'll say,
the inside of the sphere, the core,

372
00:22:50.034 --> 00:22:54.084
the air inside of a basketball if you're
looking for something really concrete.

373
00:22:54.084 --> 00:22:56.308
The inside of it is pure.

374
00:22:56.308 --> 00:23:01.308
It has no side effects and we put
the side effects on the outer shell,

375
00:23:01.308 --> 00:23:05.890
so they're really easy to find and
they're really obvious.

376
00:23:07.420 --> 00:23:12.580
I love that visualization and
this is not just theory.

377
00:23:12.580 --> 00:23:17.840
As a matter of fact, I bet there's a bunch
of you that are already using a system

378
00:23:17.840 --> 00:23:21.060
that's already implementing
this exact idea.

379
00:23:22.060 --> 00:23:27.850
Those of you in the react ecosystems,
specifically those of you that use Redux.

380
00:23:27.850 --> 00:23:31.064
You might not have ever stopped to think,
because they don't use

381
00:23:31.064 --> 00:23:34.407
a lot of the functional programming
terminology within that tool.

382
00:23:34.407 --> 00:23:35.108
You might not ever stop to
think what it's doing, but

383
00:23:35.108 --> 00:23:35.802
it's basically saying,
here's all these steps.

384
00:23:35.802 --> 00:23:40.638
These reducers and
this flow of data that you go

385
00:23:40.638 --> 00:23:45.350
through to compute all
the different stuff,

386
00:23:45.350 --> 00:23:48.583
but where does the DOM happen?

387
00:23:48.583 --> 00:23:54.177
At the very end, you call out to
a render function or whatever it is.

388
00:23:54.177 --> 00:23:56.659
Instead of rendering all along the way,

389
00:23:56.659 --> 00:24:01.331
having side effects in your DOM all along
the way, it's a lot easier for us to

390
00:24:01.331 --> 00:24:06.003
reason about our program if this part of
the program is just data transfer and

391
00:24:06.003 --> 00:24:09.820
then have a function at the very
end where we render stuff out.

392
00:24:11.160 --> 00:24:13.930
That is an embodiment for this principle.

393
00:24:13.930 --> 00:24:16.780
Avoiding side effects where ever possible.

394
00:24:16.780 --> 00:24:20.361
Collecting the one's over
here when we need them.

395
00:24:20.361 --> 00:24:21.712
Making it obvious.

396
00:24:21.712 --> 00:24:25.321
I've gone so far is to literally put
a comments above every functions that has

397
00:24:25.321 --> 00:24:27.501
side effects that I had
to put side effects in.

398
00:24:27.501 --> 00:24:31.690
I put a comment that says, Darby Dragons,
there's side effects here.

399
00:24:31.690 --> 00:24:34.400
Cuz I wanna make it as
obvious as I possibly can.

400
00:24:34.400 --> 00:24:38.030
I even try to collect them into
a file called side effects.

401
00:24:38.030 --> 00:24:43.370
Do whatever you can to make it
obvious where the side effects are and

402
00:24:43.370 --> 00:24:45.360
try to avoid the side
effects per possible.

