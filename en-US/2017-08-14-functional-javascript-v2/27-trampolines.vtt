WEBVTT

1
00:00:00.300 --> 00:00:02.970
&gt;&gt; Kyle Simpson: There's one final
technique we can look at and

2
00:00:02.970 --> 00:00:04.440
that's called trampolines.

3
00:00:04.440 --> 00:00:09.700
And trampolines are a mechanism that
allows us to do the same kind of work but

4
00:00:09.700 --> 00:00:12.050
do not require that growing call stack.

5
00:00:12.050 --> 00:00:14.060
And, therefore,
end around the whole problem.

6
00:00:14.060 --> 00:00:17.778
We don't even need PTC,
because they don't ever do it that way.

7
00:00:17.778 --> 00:00:21.448
There's an adapter that you
can put on top of a function.

8
00:00:21.448 --> 00:00:26.160
And what is said is that you're
trampolining that function.

9
00:00:26.160 --> 00:00:28.020
So I don't know where
this name comes from.

10
00:00:28.020 --> 00:00:31.330
And I wish I had a good,
concrete metaphor for this.

11
00:00:31.330 --> 00:00:34.270
I could invent some stuff, but I don't
really have a good metaphor for it.

12
00:00:34.270 --> 00:00:37.250
So I'm not really sure why
this is the right name or

13
00:00:37.250 --> 00:00:38.750
how to give you an instinct of the name.

14
00:00:38.750 --> 00:00:42.180
But let me just describe
the general algorithm.

15
00:00:42.180 --> 00:00:48.300
When I call a function,
if I am done calling the function,

16
00:00:48.300 --> 00:00:52.410
if I've completed all the work,
I'm gonna return the immediate result.

17
00:00:52.410 --> 00:00:53.420
If I'm not done,

18
00:00:53.420 --> 00:00:57.640
I'm gonna return a continuation
function just like we talked about.

19
00:00:58.640 --> 00:01:01.330
So I'm gonna return
the continuation function.

20
00:01:01.330 --> 00:01:05.430
And the trampoline utility,
it's gonna look at the return value.

21
00:01:05.430 --> 00:01:07.120
And if it gets back a function,

22
00:01:07.120 --> 00:01:11.660
it's going to assume that was
a continuation function, and then call it.

23
00:01:11.660 --> 00:01:13.550
And it's just gonna keep looping.

24
00:01:13.550 --> 00:01:17.034
It's gonna call it and if it gets
a function back, call it again, and

25
00:01:17.034 --> 00:01:19.270
if it gets one back, call it again.

26
00:01:19.270 --> 00:01:23.370
That's not call, call, call,
that's call, call, call.

27
00:01:23.370 --> 00:01:28.390
So we never have more than one call on
the call stack at any given length.

28
00:01:28.390 --> 00:01:32.260
We return it back, and
there's just a while loop that spins

29
00:01:32.260 --> 00:01:36.820
forever as long as it gets back a function
on the next iteration it calls it.

30
00:01:36.820 --> 00:01:40.210
And then on the next iteration, it calls
it until it no longer gets a function.

31
00:01:40.210 --> 00:01:42.920
And then it says I guess it's
time to get off the trampoline.

32
00:01:44.310 --> 00:01:51.840
So that's a technique for getting around
our limitations if we don't have PTC.

33
00:01:53.460 --> 00:01:54.550
So it would look like this.

34
00:01:54.550 --> 00:01:57.439
So if we had a trampoline utility,

35
00:01:57.439 --> 00:02:02.540
we would call trampoline and
pass in our PTC form function.

36
00:02:02.540 --> 00:02:07.740
You'll notice that on line 2 I
don't need that weird signature.

37
00:02:07.740 --> 00:02:11.120
But I do still return my
continuation like on line 5.

38
00:02:12.350 --> 00:02:13.550
I don't return the sum,

39
00:02:13.550 --> 00:02:16.050
I return a continuation that
will compute the next sum.

40
00:02:17.280 --> 00:02:20.980
So I just return that, and the trampoline
utility, which I'll show in the next

41
00:02:20.980 --> 00:02:24.670
slide, when it receives that function,
it will just call it again.

42
00:02:24.670 --> 00:02:26.747
Which of course calls and calls and

43
00:02:26.747 --> 00:02:30.270
calls until we get back
something that's not a function.

44
00:02:32.110 --> 00:02:37.110
What I like about this technique
is that it's still pretty close

45
00:02:37.110 --> 00:02:41.810
to the recursive representation
that we started with 15 slides ago.

46
00:02:43.270 --> 00:02:46.710
It's not perfect,
there is some boilerplate, but

47
00:02:46.710 --> 00:02:51.940
it's nice that we can wrap up
the utility of trampolining into a call.

48
00:02:51.940 --> 00:02:57.130
And the only real downside here is
that we had to put a function wrapper

49
00:02:57.130 --> 00:02:58.080
lines 5 through 7.

50
00:02:58.080 --> 00:03:00.670
We had to put a function wrapper
around the recursive bit.

51
00:03:01.820 --> 00:03:05.900
But other than that, it's exactly the same
expression as what we were doing before.

52
00:03:05.900 --> 00:03:09.360
And it completely gets
around the whole PTC thing.

53
00:03:09.360 --> 00:03:12.965
On multiple occasions,
I have found that to be an easier and

54
00:03:12.965 --> 00:03:17.219
more straightforward way of dealing
with this algorithm that I need to

55
00:03:17.219 --> 00:03:21.255
run recursively.
&gt;&gt; Kyle Simpson: Because I can

56
00:03:21.255 --> 00:03:25.800
just express the second and
third steps in continuations as I need.

57
00:03:27.810 --> 00:03:31.060
So here's how the trampoline
utility is written.

58
00:03:31.060 --> 00:03:36.130
This is just a sketch of a utility, there
are more sophisticated ones in libraries.

59
00:03:36.130 --> 00:03:39.630
But this is a sketch of how you
could make a trampoline utility.

60
00:03:39.630 --> 00:03:43.120
You notice, just like we've done
1,000 times already in this course,

61
00:03:43.120 --> 00:03:44.550
it's a machine making machine.

62
00:03:44.550 --> 00:03:47.190
It returns us back a function on line 2.

63
00:03:47.190 --> 00:03:49.980
That one takes in the list of arguments.

64
00:03:49.980 --> 00:03:56.350
It calls the function the first time with
those arguments, saving that result.

65
00:03:56.350 --> 00:04:00.220
And, as long as that result keeps
coming back as typeof function,

66
00:04:00.220 --> 00:04:02.190
we're just gonna keep repeating
that in the while loop.

67
00:04:02.190 --> 00:04:06.270
And whenever that fails, then well,
if it's anything other than a function,

68
00:04:06.270 --> 00:04:10.440
just jump off the trampoline and
return the result.

69
00:04:10.440 --> 00:04:14.400
It's as pretty straightforward in
terms of the concept that's going on.

70
00:04:16.220 --> 00:04:19.600
Emphasis again,
we did not have to be that intrusive

71
00:04:19.600 --> 00:04:23.064
to our recursive algorithm
to make trampolining work.

72
00:04:23.064 --> 00:04:25.700
There was a little bit about adaptation,
but it wasn't that difficult.

73
00:04:26.890 --> 00:04:32.040
Now with all of PTC,
CPS, and trampolining.

74
00:04:32.040 --> 00:04:34.370
All three of those techniques
that we just talked about.

75
00:04:35.980 --> 00:04:39.460
You can't possibly be expected at this
point to be an expert on those, and

76
00:04:39.460 --> 00:04:42.040
be ready to just go do
that all on your own code.

77
00:04:42.040 --> 00:04:45.400
This is taken me personally,
weeks and months of practice.

78
00:04:46.880 --> 00:04:51.300
So my recommendation is to take something
at work that you're doing iteratively, or

79
00:04:51.300 --> 00:04:55.490
take some problem that might
lend itself well to recursion.

80
00:04:55.490 --> 00:04:58.760
And try it first,
see if you can get it into the PTC form.

81
00:04:58.760 --> 00:05:01.070
If that proves too difficult, try the CPS.

82
00:05:01.070 --> 00:05:03.690
And if that proves too difficult,
try the trampoline.

83
00:05:03.690 --> 00:05:05.550
And just practice those
things a few times.

84
00:05:05.550 --> 00:05:09.740
And after you've done that five or ten
times, you'll start to develop a sense of

85
00:05:09.740 --> 00:05:13.310
which one of those tools in my tool
box is appropriate for any given spot.

86
00:05:16.400 --> 00:05:19.622
As with everything that we have
taught in this course, but

87
00:05:19.622 --> 00:05:21.245
it is especially true here.

88
00:05:21.245 --> 00:05:25.800
Always have a step in that process for
yourself where you take that step back and

89
00:05:25.800 --> 00:05:29.580
you look at the final product,
the thing that gives you the right answer.

90
00:05:29.580 --> 00:05:34.440
And ask yourself if I'm better off here
than what I started with with my for

91
00:05:34.440 --> 00:05:36.860
loop or whatever the previous version was.

92
00:05:36.860 --> 00:05:39.130
Because sometimes you'll
end up in a worse position.

93
00:05:39.130 --> 00:05:41.480
It's harder to read,
it's harder to understand.

94
00:05:41.480 --> 00:05:44.380
In those places,
don't use these techniques.

95
00:05:44.380 --> 00:05:45.890
This is the pragmatism speaking.

96
00:05:47.310 --> 00:05:50.280
But sometimes you'll end up
with a pretty good result.

97
00:05:50.280 --> 00:05:53.340
And that, I think, is a benefit,
that's the functional light kicking in.

98
00:05:54.620 --> 00:05:57.355
Recursion, questions,
what can I answer for

99
00:05:57.355 --> 00:06:05.113
you?
&gt;&gt; Kyle Simpson: I

100
00:06:05.113 --> 00:06:09.597
was tempted to restart my lecture on
recursion to just keep going, but

101
00:06:09.597 --> 00:06:13.241
that seemed too cheesy of a joke.
&gt;&gt; Speaker 2: Do you have just a simple

102
00:06:13.241 --> 00:06:17.556
definition for recursion, or
like a simple explanation like one or

103
00:06:17.556 --> 00:06:20.521
two sentences?
&gt;&gt; Kyle Simpson: Yeah, so recursion is

104
00:06:20.521 --> 00:06:27.008
when a function calls itself repeatedly
until it reaches a base condition and

105
00:06:27.008 --> 00:06:31.960
it stops calling itself.
&gt;&gt; Kyle Simpson: That's

106
00:06:31.960 --> 00:06:36.740
also referred to as single recursion,
because there's just a single call.

107
00:06:38.390 --> 00:06:40.890
There's a term called mutual recursion,
when two or

108
00:06:40.890 --> 00:06:43.840
more functions are calling
each other in a cycle.

109
00:06:43.840 --> 00:06:45.630
That's called mutual recursion.

110
00:06:45.630 --> 00:06:48.850
There's always a base condition that
stops the recursion from happening.

111
00:06:48.850 --> 00:06:54.250
So your definition always needs to include
at the end, until a base condition is met.

112
00:06:55.380 --> 00:06:59.780
But either a function calling itself,
two or more functions calling each other.

113
00:06:59.780 --> 00:07:03.470
A function calling multiple
functions recursively

114
00:07:03.470 --> 00:07:08.400
until it reaches a base condition.
&gt;&gt; Speaker 2: Maybe an off topic question,

115
00:07:08.400 --> 00:07:12.480
but in your work when
do you use recursions?

116
00:07:14.120 --> 00:07:15.300
&gt;&gt; Kyle Simpson: I try to use recursion,

117
00:07:15.300 --> 00:07:17.280
again, this is the pragmatist
in me speaking.

118
00:07:17.280 --> 00:07:20.080
I try to use recursion if I've
developed an instinct that there's

119
00:07:20.080 --> 00:07:24.390
a problem that I'm solving that either
would be more gracefully expressed,

120
00:07:24.390 --> 00:07:27.740
more declaratively
expressed with recursion.

121
00:07:27.740 --> 00:07:30.420
So sometimes something like
the summing of a list can

122
00:07:30.420 --> 00:07:33.260
be more gracefully done that way,
sometimes not.

123
00:07:33.260 --> 00:07:35.620
Or I've developed an instinct for

124
00:07:35.620 --> 00:07:41.440
this kind of problem that I wanna do
would be a lot harder to do with a loop.

125
00:07:42.940 --> 00:07:45.920
Depth first descent of a binary tree, for

126
00:07:45.920 --> 00:07:50.250
example, is like the classic you
should do that with recursion.

127
00:07:50.250 --> 00:07:52.780
Don't do a loop and
manage all your own pointers and stuff.

128
00:07:52.780 --> 00:07:55.010
Cuz that's what the stack is good for.

129
00:07:55.010 --> 00:07:58.320
So you develop an instinct either for
something where it's gonna help

130
00:07:58.320 --> 00:08:01.900
the visibility or
recursion is just a much better tool.

131
00:08:01.900 --> 00:08:05.010
When I'm trying to put a screw in,
I don't wanna use a hammer for that.

132
00:08:05.010 --> 00:08:11.618
I wanna use a screwdriver.
&gt;&gt; Kyle Simpson: Unfortunately

133
00:08:11.618 --> 00:08:17.120
the not terribly satisfying answer here is
you only get that instinct from practice.

134
00:08:17.120 --> 00:08:21.156
There's no way to just give you
a decision graph and then you're done.

135
00:08:21.156 --> 00:08:23.500
Y ou have to do it a while
before you figure it out.

