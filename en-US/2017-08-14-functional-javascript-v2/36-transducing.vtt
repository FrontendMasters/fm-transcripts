WEBVTT

1
00:00:00.310 --> 00:00:03.320
&gt;&gt; Kyle: Now I'm gonna take you through,
this is our scenario.

2
00:00:03.320 --> 00:00:08.260
Here we have a similar kind
of fluent method chain, but

3
00:00:08.260 --> 00:00:12.880
now we have three separate operators
that are adjacent to each other

4
00:00:12.880 --> 00:00:14.410
that don't have a compatible shape.

5
00:00:14.410 --> 00:00:19.220
And if I wanted to reduce those all or
combine those,

6
00:00:19.220 --> 00:00:24.090
compose those three functions all into one
operator that could work across the list,

7
00:00:24.090 --> 00:00:26.230
it's not gonna work as it stands.

8
00:00:28.010 --> 00:00:31.190
And the solution to that is to transduce.

9
00:00:31.190 --> 00:00:36.190
Now, I'm just gonna pause for a moment and
explain almost at a meta level,

10
00:00:36.190 --> 00:00:39.860
what we're about to do,
just so you don't get too lost.

11
00:00:39.860 --> 00:00:41.770
Because to be quite honest,

12
00:00:41.770 --> 00:00:46.890
transducing is a highly advanced
topic within functional programming.

13
00:00:46.890 --> 00:00:50.890
Or at least, it's a highly advanced
topic within functional like.

14
00:00:50.890 --> 00:00:55.690
I teach this, and have written about it,
and I have been doing it for a while, and

15
00:00:55.690 --> 00:01:00.070
I still find it to be a bit confusing,
a bit hard to get my brain wrapped around.

16
00:01:00.070 --> 00:01:03.250
So don't feel bad that what
I'm about to take you through,

17
00:01:03.250 --> 00:01:04.850
is gonna be quite brain twisting.

18
00:01:05.990 --> 00:01:07.530
But what I'm gonna take you through,

19
00:01:07.530 --> 00:01:09.940
instead of just showing
you how to transduce.

20
00:01:09.940 --> 00:01:14.062
Because the punchline here is that there's
a transduce utility built into your

21
00:01:14.062 --> 00:01:18.184
favourite functional programming library,
and you just need to pass the right

22
00:01:18.184 --> 00:01:21.589
stuff in and it will do the work for you.
&gt;&gt; Kyle: But

23
00:01:21.589 --> 00:01:24.095
I don't think that's good enough for
me to just tell you,

24
00:01:24.095 --> 00:01:26.800
transducing's all you want
to just call this utility.

25
00:01:26.800 --> 00:01:28.980
In this spirit of what we've
been doing in this class,

26
00:01:28.980 --> 00:01:31.640
I want you to see how it
works under the covers.

27
00:01:31.640 --> 00:01:33.830
So I'm gonna take you
through a derivation.

28
00:01:33.830 --> 00:01:39.280
Transforming this code, step by step,
into something that can be transduced.

29
00:01:39.280 --> 00:01:43.026
And those steps are going to be
quite complex to understand.

30
00:01:43.026 --> 00:01:46.400
And they're gonna hurt your brain
a little bit, cuz they hurt my brain and

31
00:01:46.400 --> 00:01:47.370
I've been doing this a lot.

32
00:01:48.720 --> 00:01:52.640
But you don't ever have to go
through that set of steps again.

33
00:01:52.640 --> 00:01:55.100
It's just I need to take
you through it once, so

34
00:01:55.100 --> 00:01:58.210
you can appreciate what
transducing does for you.

35
00:01:58.210 --> 00:02:00.350
So even though this seems complex,

36
00:02:00.350 --> 00:02:06.620
transducing as an end user utility is
actually very, very simple to use.

37
00:02:06.620 --> 00:02:09.910
You just have to understand,
recognize where you need it,

38
00:02:09.910 --> 00:02:12.000
drop in that tool and use it.

39
00:02:12.000 --> 00:02:14.370
It's a very powerful
power drill if you will.

40
00:02:17.120 --> 00:02:21.150
To do this set of derivations.

41
00:02:21.150 --> 00:02:25.260
To reshape these things into
something that we'll compose,

42
00:02:25.260 --> 00:02:30.580
I'm going to several
different junctures here.

43
00:02:30.580 --> 00:02:37.615
Pull a rabbit out of thin air if you will,
I don't know if any of you remember,

44
00:02:37.615 --> 00:02:41.524
if you recall a similar situation of mine.

45
00:02:41.524 --> 00:02:47.513
I remember back in grade school,
high school taking like an algebra class,

46
00:02:47.513 --> 00:02:52.659
and I remember that the teacher
will be showing some crazy complex

47
00:02:52.659 --> 00:02:58.767
equation like x squared plus 3 is equal
to 2x to the 4th plus 9 or whatever.

48
00:02:58.767 --> 00:03:03.340
And we get this thing down to
some specific thing where the two

49
00:03:03.340 --> 00:03:07.733
sides of the equation,
we couldn't figure out how to keep

50
00:03:07.733 --> 00:03:11.872
going any further in terms of reducing and
solving it.

51
00:03:11.872 --> 00:03:13.645
And it would look like
we were at an impasse.

52
00:03:13.645 --> 00:03:16.695
We'd say I don't know what to do,
I don't know how to get x squared and

53
00:03:16.695 --> 00:03:18.470
x cubed to somehow work with each other.

54
00:03:19.580 --> 00:03:23.560
And the teacher would wait for
a moment, and

55
00:03:23.560 --> 00:03:27.140
then a glimmer in her eye,
and she'd say something like,

56
00:03:27.140 --> 00:03:32.680
''what if I multiply both sides by 2x
to the eighth'', or whatever she said.

57
00:03:32.680 --> 00:03:36.630
What if I multiply both sides
by this some random thing?

58
00:03:36.630 --> 00:03:41.130
And she did it and all of a sudden,
it just magically worked itself out.

59
00:03:42.210 --> 00:03:44.270
And I'd be like what?

60
00:03:44.270 --> 00:03:48.730
Where did this two x to the eighth
plus nine then come from?

61
00:03:48.730 --> 00:03:50.460
That's completely out of thin air.

62
00:03:50.460 --> 00:03:54.810
How did you know that that was the thing
that you should multiply it by?

63
00:03:54.810 --> 00:03:57.050
That used to drive me insane.

64
00:03:57.050 --> 00:03:59.570
And I go up to the teacher after
class every single time and

65
00:03:59.570 --> 00:04:01.380
be like, how'd you know to do that?

66
00:04:02.980 --> 00:04:05.750
And the honest and truthful but

67
00:04:05.750 --> 00:04:10.350
unsatisfying answer was,
well I've just done it before.

68
00:04:10.350 --> 00:04:14.720
I've done it enough that I just knew
that was the right thing to do.

69
00:04:16.710 --> 00:04:19.520
What I'm about to take you
through is a set of derivations,

70
00:04:19.520 --> 00:04:24.750
where I'm gonna pull some junk out thin
air, like two x squared plus nine or

71
00:04:24.750 --> 00:04:28.450
whatever it is, and you're gonna be like,
how did you do that?

72
00:04:28.450 --> 00:04:30.820
And my answer to you is I didn't.

73
00:04:30.820 --> 00:04:34.370
I read somebody else that did it,
and I'm trying to practice enough

74
00:04:34.370 --> 00:04:37.720
that I can get my brain to that point,
where I could have figured out.

75
00:04:37.720 --> 00:04:40.080
There is no way on earth that
what I'm about to show you,

76
00:04:40.080 --> 00:04:42.140
is something that I would've
independently come up with.

77
00:04:43.210 --> 00:04:46.760
The set of steps, the jumps that you make,
I would never have figured it out.

78
00:04:46.760 --> 00:04:50.630
But I read some really great stuff from
others, and learned what they did, and

79
00:04:50.630 --> 00:04:52.390
broke it down, and figured it out.

80
00:04:52.390 --> 00:04:54.720
And I'm using that as my journey,
if you will,

81
00:04:54.720 --> 00:04:57.490
to try to learn to develop
that same instinct.

82
00:04:57.490 --> 00:04:59.790
And so all I can say is that's
what you're gonna have to do,

83
00:04:59.790 --> 00:05:04.270
if you wanna think like this higher
level functional programmer does.

84
00:05:04.270 --> 00:05:06.049
You have to just practice
that kinda stuff.

85
00:05:07.970 --> 00:05:12.804
So with that metapoint made, let's try
to transform this step by step into

86
00:05:12.804 --> 00:05:18.270
something that we can traduce, that we
can compose those incompatible utilities.

87
00:05:20.380 --> 00:05:24.780
The first thing that we could
observe here, is that map filter and

88
00:05:24.780 --> 00:05:27.730
reduce themselves are incompatible.

89
00:05:27.730 --> 00:05:29.870
Much less the operators
we're passing to them.

90
00:05:29.870 --> 00:05:31.850
They are incompatible.

91
00:05:31.850 --> 00:05:33.090
It would be really good,

92
00:05:33.090 --> 00:05:38.580
if we could somehow get this from a map
filter reduce to just three reduces.

93
00:05:39.600 --> 00:05:44.430
And to do that, we can observe that
because reduces are Swiss Army knife,

94
00:05:44.430 --> 00:05:48.390
we can implement a map
operation with reduce.

95
00:05:48.390 --> 00:05:51.450
And we can implement a filter
operation with reduce.

96
00:05:51.450 --> 00:05:51.960
As a matter of fact,

97
00:05:51.960 --> 00:05:56.330
we already did a filter operation
with reduce in the previous exercise.

98
00:05:57.580 --> 00:06:03.590
So, the first step here is to reorganize
map and filter as reductions.

99
00:06:04.740 --> 00:06:06.340
So now we'll end up,

100
00:06:06.340 --> 00:06:10.149
the goal will be to end up with three
reduces instead of a map filter reduce.

101
00:06:11.170 --> 00:06:15.890
To do that, I'm gonna create a utility
called mapWithReduce and filterWithReduce.

102
00:06:17.980 --> 00:06:22.830
So mapWithReduce on line 1,
takes a list in a mapping function, and

103
00:06:22.830 --> 00:06:26.050
it calls the reduce on that list.

104
00:06:27.120 --> 00:06:30.080
And it started out,
if you see there on line 5,

105
00:06:30.080 --> 00:06:31.800
it starts it out with an empty array.

106
00:06:33.710 --> 00:06:40.080
And it pushes the mapped value into that
new array and then returns the list.

107
00:06:40.080 --> 00:06:44.660
So it just goes through the list, calling
mapping function with each value and

108
00:06:44.660 --> 00:06:46.630
pushes it into the list.

109
00:06:46.630 --> 00:06:49.180
Why am I using push
here instead of concat?

110
00:06:51.230 --> 00:06:53.890
Cuz again,
anytime you start mutating something that

111
00:06:53.890 --> 00:06:57.290
you don't technically control, you should
at least take a step back and ask.

112
00:06:57.290 --> 00:06:59.580
Well the reason is,
because right there on line 5,

113
00:06:59.580 --> 00:07:02.670
I actually do control the empty array.

114
00:07:02.670 --> 00:07:07.910
Since it's contained within my function,
I know it's predictable.

115
00:07:07.910 --> 00:07:09.050
I know it's trustable.

116
00:07:10.130 --> 00:07:12.980
And it's much more performance for
me to mutate the list,

117
00:07:12.980 --> 00:07:15.100
than to create a new one every time.

118
00:07:15.100 --> 00:07:18.460
So that's an acceptable
performance cheat if you will.

119
00:07:18.460 --> 00:07:22.720
But it's only because that's within
the context of something I control.

120
00:07:22.720 --> 00:07:23.490
Everybody follow that?

121
00:07:26.170 --> 00:07:29.660
So map with reduce is
pretty straight forward.

122
00:07:29.660 --> 00:07:33.490
FilterWithReduce is the same
concept except on line 10,

123
00:07:33.490 --> 00:07:37.230
we only push in to the list if it
passes the predicate function check.

124
00:07:38.240 --> 00:07:43.783
Same logic that you would think of, it
passes the predicate push it in the list,

125
00:07:43.783 --> 00:07:49.672
if not just ignore it.
&gt;&gt; Kyle: Now, looking down at the bottom,

126
00:07:49.672 --> 00:07:54.580
we have three separate calls,
all three of them are reductions.

127
00:07:54.580 --> 00:07:59.000
We have mapWithReduces a reduction,
we have filterWithReduces a reduction.

128
00:07:59.000 --> 00:08:03.853
And then we call list.reduce
on that end resulting list.

129
00:08:03.853 --> 00:08:05.738
We end up with the same value, 48.

130
00:08:05.738 --> 00:08:09.772
So we're still doing three
different loops through the list.

131
00:08:09.772 --> 00:08:13.541
But at least they're three reductions now
instead of three entirely different kinds

132
00:08:13.541 --> 00:08:18.833
of operations.
&gt;&gt; Kyle: The next step

133
00:08:18.833 --> 00:08:24.664
is that I'd like to describe this,
instead of these standalone utilities.

134
00:08:24.664 --> 00:08:29.777
It'd be easier for me to illustrate and
move forward if I could describe each one

135
00:08:29.777 --> 00:08:34.990
of those reductions as a reducer that I
could pass to the built-in array method.

136
00:08:34.990 --> 00:08:39.932
So in other words, the reducer on
line 2 and the reducer on line 9,

137
00:08:39.932 --> 00:08:45.070
I need to extract those reducers out and
just produce those to be used.

138
00:08:46.650 --> 00:08:51.332
So I'm gonna make a map reducer and
a filter reducer.

139
00:08:51.332 --> 00:08:55.267
On line 1, you see I'm just creating
that same reducer and then on line 9,

140
00:08:55.267 --> 00:08:57.530
I'm creating that same reducer.

141
00:08:57.530 --> 00:09:02.628
So I am not doing the reduce,
I am creating the reducer

142
00:09:02.628 --> 00:09:07.744
to be used on lines 18 and
lines 19 respectively.

143
00:09:07.744 --> 00:09:12.795
But don't miss that there is one level
of function wrapping in direction,

144
00:09:12.795 --> 00:09:15.454
this is a machine making machine here.

145
00:09:15.454 --> 00:09:21.490
Map reducer takes the mapping
function to close over on line 1.

146
00:09:21.490 --> 00:09:24.180
And it returns the reducer,
close the remapping function.

147
00:09:24.180 --> 00:09:28.455
Which is why on line 18,
we have to pass in add one and on line 19,

148
00:09:28.455 --> 00:09:30.110
we have to pass in is on.

149
00:09:30.110 --> 00:09:36.390
And that produces those reducers.

150
00:09:36.390 --> 00:09:40.340
You want to pay very close attention
to the shape of the things

151
00:09:40.340 --> 00:09:42.450
that we are creating.

152
00:09:42.450 --> 00:09:44.892
Look at the shape of the reducer.

153
00:09:44.892 --> 00:09:48.202
By shape I mean,
what kind of inputs does it take?

154
00:09:48.202 --> 00:09:50.362
What kind of output does it produce?

155
00:09:50.362 --> 00:09:56.700
The shape of that reducer is that it takes
two inputs and produces a single output.

156
00:09:56.700 --> 00:10:01.100
It's not actually that relevant how it
puts them together or if it ignores them.

157
00:10:01.100 --> 00:10:05.582
It's the shape of two to one
that we wanna think about.

158
00:10:05.582 --> 00:10:06.957
And generally speaking,

159
00:10:06.957 --> 00:10:10.400
the reducer is fundamentally
doing this combination activity.

160
00:10:10.400 --> 00:10:16.100
It's taking two values,
combining them into one.

161
00:10:16.100 --> 00:10:21.864
[COUGH] Now, the next step that
we're gonna take is, again,

162
00:10:21.864 --> 00:10:27.750
a little out of thin air,
like, why would you do that?

163
00:10:27.750 --> 00:10:33.238
But if you squint, and
look at the function mapReducer and

164
00:10:33.238 --> 00:10:40.520
the function filterReducer, there is
some commonality between those two.

165
00:10:40.520 --> 00:10:46.080
Specifically, they both push a value
into the list and return the list.

166
00:10:47.840 --> 00:10:50.190
One of them uses a mapping
function to do it.

167
00:10:50.190 --> 00:10:55.033
One of them has a predicate check but
they both push a value into a list and

168
00:10:55.033 --> 00:10:56.870
return a list.

169
00:10:56.870 --> 00:11:01.384
What I'm gonna do is essentially
factor out that commonality

170
00:11:01.384 --> 00:11:06.262
into a separate utility,
then I'm gonna call listCombination.

171
00:11:06.262 --> 00:11:10.639
So listCombination takes a list and a
value, pushes the value into the list and

172
00:11:10.639 --> 00:11:11.710
returns the list.

173
00:11:11.710 --> 00:11:13.890
That's what we see on lines 1 through 4.

174
00:11:13.890 --> 00:11:15.430
That's the commonality.

175
00:11:15.430 --> 00:11:20.461
And now you'll notice that I'm using
listCombination on lines 8 and

176
00:11:20.461 --> 00:11:24.226
lines 14 respectively to
do that part of the work.

177
00:11:24.226 --> 00:11:28.740
So on line 8 and line 14, we don't
see it actually doing any dot push or

178
00:11:28.740 --> 00:11:30.080
anything like that.

179
00:11:30.080 --> 00:11:37.330
We just delegate to that list combination
utility to let it do that commonality.

180
00:11:37.330 --> 00:11:39.776
We still call the mapping
function on line 8 and

181
00:11:39.776 --> 00:11:42.230
we still have the predicate
check on line 14.

182
00:11:42.230 --> 00:11:47.025
Look at the shape of listCombination and

183
00:11:47.025 --> 00:11:51.396
compare it to the shape of one of those

184
00:11:51.396 --> 00:11:57.351
reducers.
&gt;&gt; Kyle: They're

185
00:11:57.351 --> 00:11:58.730
fundamentally the same shape, aren't they?

186
00:12:00.080 --> 00:12:01.090
That's not an accident.

187
00:12:01.090 --> 00:12:02.480
That's on purpose.

188
00:12:02.480 --> 00:12:05.331
And that turns out that's gonna be
the linchpin that helps a lot of this

189
00:12:05.331 --> 00:12:11.784
work.
&gt;&gt; Kyle: Now this next step is to

190
00:12:11.784 --> 00:12:17.206
take that listCombination and say instead
of hard coding the listCombination,

191
00:12:17.206 --> 00:12:22.005
why don't we parametrize
the listCombination that function itself.

192
00:12:22.005 --> 00:12:26.605
Because there are other kinds of
combination that we potentially might

193
00:12:26.605 --> 00:12:28.379
wanted to do in the future.

194
00:12:28.379 --> 00:12:33.242
listCombination is a very specific
thing which takes a value and

195
00:12:33.242 --> 00:12:36.044
pushes it in the list and returns it.

196
00:12:36.044 --> 00:12:40.651
But there are other things we could
do like throw away the value or

197
00:12:40.651 --> 00:12:44.270
double the value or who knows what, right?

198
00:12:44.270 --> 00:12:48.070
So let's parametrize the combination
function that we use.

199
00:12:48.070 --> 00:12:54.349
By parametrize I mean, in addition
to passing in mappingFn on line 6,

200
00:12:54.349 --> 00:12:59.384
we also want to pass in what
combination function to use.

201
00:12:59.384 --> 00:13:02.534
And, I'm going to go one step further and

202
00:13:02.534 --> 00:13:07.550
say, I really want to do those
two arguments separately.

203
00:13:07.550 --> 00:13:10.450
I don't want to pass
them in at the same time.

204
00:13:10.450 --> 00:13:15.363
Do we know about a utility that we learned
earlier in this course that would allow us

205
00:13:15.363 --> 00:13:24.040
to pass in arguments one at a time?
&gt;&gt; Speaker 2: Partial.

206
00:13:24.040 --> 00:13:26.002
&gt;&gt; Kyle: Partial has some of the arguments

207
00:13:26.002 --> 00:13:30.705
later, What was the other one that could
pass in one argument and then another?

208
00:13:30.705 --> 00:13:31.505
&gt;&gt; Speaker 2: Curry.

209
00:13:31.505 --> 00:13:32.180
&gt;&gt; Kyle: Curry, so

210
00:13:32.180 --> 00:13:36.680
what I'm gonna do is I'm gonna make
a map producer, that is the curry of

211
00:13:36.680 --> 00:13:41.570
a function that takes both a mapping
function and the combination function.

212
00:13:44.656 --> 00:13:48.947
So line 6, I have a map producer that
expects both of those utilities as

213
00:13:48.947 --> 00:13:51.390
parameters but they're not curry yet.

214
00:13:51.390 --> 00:13:57.216
And that currying is going to allow
me to provide those independently.

215
00:13:57.216 --> 00:14:02.689
And now on line 8,
you'll see that I'm using combined

216
00:14:02.689 --> 00:14:08.080
function on line 8 that was
passed in through line 6.

217
00:14:08.080 --> 00:14:14.548
I'm using combined function on line 14
that was passed in through line 12.

218
00:14:14.548 --> 00:14:18.926
Now down at the bottom when I
call mapReducer, and I call add1,

219
00:14:18.926 --> 00:14:22.332
I am passing in add1 as
the mapping function, but

220
00:14:22.332 --> 00:14:25.840
only one argument at a time,
since it's curried.

221
00:14:25.840 --> 00:14:32.280
And then when I call it the second time, I
pass in listCombination, that's combineFn.

222
00:14:32.280 --> 00:14:35.142
Everybody follow that?

223
00:14:35.142 --> 00:14:36.810
Same is true for my filters.

224
00:14:36.810 --> 00:14:40.760
When I call filterReducer and pass in
isOdd, that's my predicate function.

225
00:14:40.760 --> 00:14:45.200
And when I call it again, or
the resultant function one more time,

226
00:14:45.200 --> 00:14:47.990
I pass in listCombination is combineFn.

227
00:14:47.990 --> 00:14:51.532
So you can still see listCombination
being used on lines 8 and

228
00:14:51.532 --> 00:14:56.439
lines 14 respectively, but it's been
parameterized which combination function

229
00:14:56.439 --> 00:15:01.640
to use.
&gt;&gt; Kyle: I know this is in the weeds.

230
00:15:01.640 --> 00:15:03.240
I know this is a jumbled mess of it.

231
00:15:03.240 --> 00:15:08.063
And even me standing up here and
talking about it for the hundredth time.

232
00:15:08.063 --> 00:15:10.430
It's still deep in the weeds, I got it.

233
00:15:10.430 --> 00:15:12.878
Just stick with me.
We're about to really start to make some

234
00:15:12.878 --> 00:15:18.413
progress here.
&gt;&gt; Kyle: What

235
00:15:18.413 --> 00:15:21.976
would happen If I called
mapReducer add1 and

236
00:15:21.976 --> 00:15:26.382
I didn't call it the second
time to provide a combiner,

237
00:15:26.382 --> 00:15:32.827
what is the shape of that function?
&gt;&gt; Kyle: The shape

238
00:15:32.827 --> 00:15:38.040
of that function is that it expects
a combiner function, right?

239
00:15:39.450 --> 00:15:40.944
And the same is true of filterReducer.

240
00:15:40.944 --> 00:15:47.560
filterReducer(isOdd), that gives us a
function that expects a combiner function.

241
00:15:48.860 --> 00:15:52.852
So we now have, if we think about it
we now have two functions that are both

242
00:15:52.852 --> 00:15:54.690
expecting a combiner function.

243
00:15:54.690 --> 00:15:56.220
Now.

244
00:15:56.220 --> 00:15:59.352
I asked you just a moment
ago to compare the shape of

245
00:15:59.352 --> 00:16:01.972
the combiner function with the reducer.

246
00:16:01.972 --> 00:16:05.355
And it turns out that the combiner
function and the reducer function have

247
00:16:05.355 --> 00:16:09.120
exactly the same shape because they
are basically one and the same.

248
00:16:09.120 --> 00:16:12.740
I'm using combiner function to keep it
separate but it is essentially a reducer.

249
00:16:15.460 --> 00:16:19.370
So here's the trick that's gonna start
to make all this unravel for us.

250
00:16:20.440 --> 00:16:24.790
Because they both take
a combiner aka a reducer,

251
00:16:26.300 --> 00:16:30.990
the output of one of them can
be the input to the other.

252
00:16:32.410 --> 00:16:37.750
The output reducer that comes from
the call mapReducer add1 listCombination,

253
00:16:37.750 --> 00:16:39.190
that's a reducer.

254
00:16:39.190 --> 00:16:43.010
That reducer could be the combiner for

255
00:16:43.010 --> 00:16:46.260
the next one,
because they have the same shape.

256
00:16:48.330 --> 00:16:51.148
And if the output of one can
become the input of the other,

257
00:16:51.148 --> 00:16:55.672
what does that sound like?
&gt;&gt; Speaker 2: Composition.

258
00:16:55.672 --> 00:16:56.900
&gt;&gt; Kyle: Does it sound like a composition?

259
00:16:58.220 --> 00:16:59.650
So that is what we are going to do.

260
00:16:59.650 --> 00:17:04.461
We are going to take that
function mapReducer add1 and

261
00:17:04.461 --> 00:17:09.910
compose that with the filterReducer isOdd,
that function.

262
00:17:09.910 --> 00:17:14.433
That is going to make a composed
function which is expecting

263
00:17:14.433 --> 00:17:16.426
a combiner aka a reducer.

264
00:17:16.426 --> 00:17:21.320
When we pass in the combiner, it's gonna
make a reducer out of the first one and

265
00:17:21.320 --> 00:17:23.842
that reducer is gonna be the combiner for

266
00:17:23.842 --> 00:17:27.715
the next one.
&gt;&gt; Kyle: So

267
00:17:27.715 --> 00:17:32.129
that's what this looks like,
on line 19 I've made this thing

268
00:17:32.129 --> 00:17:37.410
called a transducer which is
the composition of those two functions.

269
00:17:37.410 --> 00:17:42.320
Each of which is expecting and
a combiner aka a reducer.

270
00:17:44.436 --> 00:17:48.830
And then on line 24 that is when I

271
00:17:48.830 --> 00:17:52.030
call the transducers and
pass in the list combination.

272
00:17:52.030 --> 00:17:54.670
So follow with me the flow of logic here.

273
00:17:54.670 --> 00:17:57.880
When I pass in the list
combination to the transducers

274
00:17:57.880 --> 00:18:01.160
it's coming into the function on line 19,
the one that we created.

275
00:18:02.390 --> 00:18:05.856
That filter reducer isOdd;
that's the one on the right.

276
00:18:05.856 --> 00:18:10.270
It's the one that's sitting there waiting
for a combiner to be passed into it.

277
00:18:10.270 --> 00:18:15.300
So we're passing it in when
we call it on line 24 so

278
00:18:15.300 --> 00:18:18.290
that combiner comes into
the filter reducer.

279
00:18:19.530 --> 00:18:23.870
And it produces the reducer
that we list out on line 13.

280
00:18:23.870 --> 00:18:29.770
That reducer from line 13,
when it says combineFn on line 14,

281
00:18:29.770 --> 00:18:34.630
it means list combination okay?

282
00:18:34.630 --> 00:18:37.470
Now that reducer is the output of that

283
00:18:37.470 --> 00:18:40.140
call in the function
composition on line 19.

284
00:18:40.140 --> 00:18:44.891
That reducer gets passed into the waiting
function that was produced by

285
00:18:44.891 --> 00:18:49.971
mapReducer add1 who is sitting there
waiting for a combination function.

286
00:18:49.971 --> 00:18:52.909
But we're just going to secretly
give it a reducer instead.

287
00:18:54.040 --> 00:18:56.170
Not really secretly, but that's our trick.

288
00:18:56.170 --> 00:18:58.500
We're going to give it a reducer
instead of a combiner.

289
00:18:58.500 --> 00:19:02.380
So now we're up on line 6 combineFn there,

290
00:19:02.380 --> 00:19:08.935
that combineFn is actually the reducer
from line 13, you follow me?

291
00:19:10.005 --> 00:19:12.593
So let's look at what it does
with that combiner function.

292
00:19:12.593 --> 00:19:18.349
On line 8 it says I wanna call
that combineFn with a list and

293
00:19:18.349 --> 00:19:21.521
with the mapping of that value,

294
00:19:21.521 --> 00:19:26.486
you see that?
&gt;&gt; Kyle: That is gonna

295
00:19:26.486 --> 00:19:31.649
delegate to the reducer on line 14
which says I received a list and

296
00:19:31.649 --> 00:19:33.870
a now already mapped value.

297
00:19:33.870 --> 00:19:37.526
That's line 13,
I'm going to call the predicateFn.

298
00:19:37.526 --> 00:19:41.170
And the predicateFn is going
to check the mapped value and

299
00:19:41.170 --> 00:19:45.500
if it passes I'm going to stuff it in and
if not I'm just going to skip over it.

300
00:19:48.160 --> 00:19:51.780
So line 8, while it looks like
it's stuffing it into the list,

301
00:19:51.780 --> 00:19:56.330
it's only conditionally stuffing it into
the list if it passes the predicate check.

302
00:19:57.350 --> 00:20:00.565
So the mapping and
filtering have now been combined into one

303
00:20:00.565 --> 00:20:05.559
step,
&gt;&gt; Kyle: Which is why we now

304
00:20:05.559 --> 00:20:08.270
are down to two reduces at the bottom.

305
00:20:08.270 --> 00:20:13.450
We have a reduce across
the transducer with a combiner

306
00:20:13.450 --> 00:20:18.420
function produces us a single composed
reducer that does both the mapping and

307
00:20:18.420 --> 00:20:19.640
the filtering at the same time.

308
00:20:23.160 --> 00:20:28.550
I see lots of glazed over looks in eyes,
I totally understand.

309
00:20:28.550 --> 00:20:32.010
I can't even tell you how many times
I've said this, and explained this, and

310
00:20:32.010 --> 00:20:32.970
written about this.

311
00:20:32.970 --> 00:20:37.483
And taught it,
it's still a bit [SOUND] to me too.

312
00:20:37.483 --> 00:20:40.870
Like I said earlier, I would've never
have thought to do this myself.

313
00:20:42.350 --> 00:20:47.580
I'm amazed that real functional
programmers came up with this but

314
00:20:47.580 --> 00:20:49.280
somebody smart did, okay?

315
00:20:50.730 --> 00:20:55.590
So now we have a reducer that we can
produce with a list combination.

316
00:20:55.590 --> 00:20:58.305
But we have one last trick
up our sleeve because

317
00:20:58.305 --> 00:21:01.535
our ultimate goal was to
only process the list once.

318
00:21:01.535 --> 00:21:03.372
We're not doing it three times anymore,
but

319
00:21:03.372 --> 00:21:08.115
now we're doing it twice.
&gt;&gt; Kyle: I want you to

320
00:21:08.115 --> 00:21:11.405
think about the shape of the sum function.

321
00:21:11.405 --> 00:21:14.075
I don't have it listed here,
but just think visually.

322
00:21:14.075 --> 00:21:16.260
What does the sum function do?

323
00:21:24.015 --> 00:21:26.808
&gt;&gt; Kyle: Some takes two inputs, an x and

324
00:21:26.808 --> 00:21:31.510
a y, and what does it do with them?
&gt;&gt; Speaker 3: Uses it.

325
00:21:31.510 --> 00:21:33.569
&gt;&gt; Kyle: It combines them together, right?

326
00:21:35.010 --> 00:21:39.346
The sum function being used as a reducer
here has exactly the same shape as

327
00:21:39.346 --> 00:21:43.556
a combiner.
&gt;&gt; Kyle: So what if,

328
00:21:43.556 --> 00:21:50.750
instead of passing in listComination on
line 24, what if we just passed in sum?

329
00:21:53.810 --> 00:21:57.470
Think about how we've generalized
what combining means.

330
00:21:57.470 --> 00:22:01.990
Now you understand why we needed to
generalize the idea of combination.

331
00:22:01.990 --> 00:22:07.160
Because now we can say I don't need
to go to an intermediary list.

332
00:22:07.160 --> 00:22:12.159
If my end result is I want it to be
a number that gets added with another

333
00:22:12.159 --> 00:22:16.040
number, use this combiner,
use the sum combiner.

334
00:22:16.040 --> 00:22:19.803
And you could potentially come up with any
number of other kinds of combinations that

335
00:22:19.803 --> 00:22:21.890
you would want as your end result.

336
00:22:21.890 --> 00:22:24.340
But here we want the numeric edition.

337
00:22:24.340 --> 00:22:28.720
So on lines 24 and 25,
the way we're gonna compose those, or

338
00:22:28.720 --> 00:22:33.050
put those two together, is we're just
gonna get rid of listCombination entirely.

339
00:22:34.640 --> 00:22:37.383
And we're gonna pass in sum as the list

340
00:22:37.383 --> 00:22:42.085
combiner.
&gt;&gt; Kyle: And

341
00:22:42.085 --> 00:22:46.961
now we have one single reducer that
does a map, and then a filter,

342
00:22:46.961 --> 00:22:51.470
and then the summation
together all in one step.

343
00:22:51.470 --> 00:22:52.930
We only need to pass
through the list once.

344
00:22:54.690 --> 00:22:59.240
That's how you derive what
transducing does, and how it works.

345
00:22:59.240 --> 00:23:02.530
That's how you know it's
not some magical black box,

346
00:23:02.530 --> 00:23:07.370
because even though that might have felt
intimidating and a bit overwhelming.

347
00:23:07.370 --> 00:23:11.350
There isn't a single thing that I just
said through that progression of slides

348
00:23:11.350 --> 00:23:15.510
that isn't exactly what I've already
taught you for this entire course.

349
00:23:15.510 --> 00:23:20.490
It is just putting the Lego pieces
together, which is really the heart of

350
00:23:20.490 --> 00:23:24.670
what I'm trying to teach you is
to develop the instinct of how do

351
00:23:24.670 --> 00:23:27.440
I put these two Lego pieces
together to make something useful?

352
00:23:28.590 --> 00:23:32.730
There isn't some magic trick there,
it really was just do that and

353
00:23:32.730 --> 00:23:34.200
then do that and then do that and do that.

354
00:23:34.200 --> 00:23:37.990
And they're the right shape now,
that's cool.

355
00:23:37.990 --> 00:23:39.020
That's really all it is.

356
00:23:41.020 --> 00:23:44.740
So that's why I wanted you to
see how transducing works,

357
00:23:44.740 --> 00:23:49.610
to begin to help build that confidence
that you already have developed

358
00:23:49.610 --> 00:23:52.790
the foundational things to do
advanced stuff like transducing.

359
00:23:54.330 --> 00:23:57.400
You're already half way up the mountain,
if you will.

360
00:23:57.400 --> 00:24:02.710
Just by learning things like currying, and
function composition, and unary functions,

361
00:24:02.710 --> 00:24:08.500
and list operations like reduce,
you already have the raw pieces to start

362
00:24:08.500 --> 00:24:14.654
putting together a really great system.
&gt;&gt; Kyle: But

363
00:24:14.654 --> 00:24:17.316
I don't want you to have to
go through all of that crazy

364
00:24:17.316 --> 00:24:20.110
mental juggling every time
you wanna use transducing.

365
00:24:20.110 --> 00:24:23.740
What I want you to do really
is be able to recognize,

366
00:24:23.740 --> 00:24:27.420
I've got some adjacent operations
that I wanna fuse together.

367
00:24:27.420 --> 00:24:30.830
They don't have the same shape, so
that means I need to do transducing.

368
00:24:30.830 --> 00:24:32.950
Let me go use the transduced utility.

369
00:24:32.950 --> 00:24:36.526
So I wanna show you just how easy
using the transduced utility is.

370
00:24:38.612 --> 00:24:39.811
&gt;&gt; Kyle: I made one here, but

371
00:24:39.811 --> 00:24:44.480
there's one that you comes with every
functional programming library.

372
00:24:44.480 --> 00:24:47.690
So literally, line 6 and
line 8 are all you ever have to do,

373
00:24:47.690 --> 00:24:50.230
but here's how the transduced
utility works.

374
00:24:50.230 --> 00:24:55.740
It takes four inputs It takes
a transducer, which is the composed set of

375
00:24:55.740 --> 00:24:59.490
combiner functions or
composed set of reducers.

376
00:24:59.490 --> 00:25:01.100
It takes a transducer.

377
00:25:01.100 --> 00:25:04.380
It takes a combined function to use,
aka another reducer.

378
00:25:04.380 --> 00:25:06.770
It takes an initial value and
a list to operate on.

379
00:25:08.000 --> 00:25:09.950
It's all pretty sensible stuff.

380
00:25:09.950 --> 00:25:11.210
How does it work?

381
00:25:11.210 --> 00:25:14.260
It calls transducer with
the combine function.

382
00:25:14.260 --> 00:25:15.380
We know what that looks like.

383
00:25:15.380 --> 00:25:19.100
We just saw it on the previous slide,
and that makes our reducer.

384
00:25:19.100 --> 00:25:23.070
Then it does a reduce across
the list with that reducer

385
00:25:23.070 --> 00:25:26.770
starting with the initial value.
&gt;&gt; Kyle: So

386
00:25:26.770 --> 00:25:31.130
if I were to erase lines 1 through 4.

387
00:25:31.130 --> 00:25:38.440
Line 6 is really all you need
to do to set up your transducer.

388
00:25:38.440 --> 00:25:43.990
You have to do the compose and
map reducer and filter reducer our

389
00:25:43.990 --> 00:25:47.159
utilities that are gonna be provided to
you by the functional programming librar.

390
00:25:48.970 --> 00:25:52.640
So you're gonna have a compose provided
to you by the library, you're gonna have

391
00:25:52.640 --> 00:25:56.610
a mapReducer provided to you by the
library, a filterReducer provided to you

392
00:25:56.610 --> 00:26:01.950
by the library, and a transduce utility
provided to you by the library.

393
00:26:01.950 --> 00:26:07.460
All you need to supply is isOdd,
add1, and your sum function.

394
00:26:07.460 --> 00:26:09.300
That's your business logic stuff.

395
00:26:10.470 --> 00:26:14.970
You just have to see this configuration,
be able to recognize this configuration of

396
00:26:14.970 --> 00:26:19.730
how those Lego pieces go together, and
the rest of that magic will happen for

397
00:26:19.730 --> 00:26:24.732
you.
&gt;&gt; Kyle: If line 8

398
00:26:24.732 --> 00:26:29.774
said transduce, and
I passed in that same transducer and

399
00:26:29.774 --> 00:26:35.920
then instead of the sum function,
I passed in list combination.

400
00:26:35.920 --> 00:26:40.300
And instead of the 0 initial value,
I passed in an empty array.

401
00:26:40.300 --> 00:26:41.650
What do you think I get back out?

402
00:26:42.710 --> 00:26:47.460
I get back out the individual constituent
values that had been mapped and

403
00:26:47.460 --> 00:26:48.080
then filtered.

404
00:26:49.940 --> 00:26:53.910
So it's as easy as deciding what
kind of combiner do I wanna use, and

405
00:26:53.910 --> 00:26:55.580
what is the appropriate initial value?

406
00:26:55.580 --> 00:27:00.630
And now armed with that trandsducer, I can
do any kind of transduction across a list.

