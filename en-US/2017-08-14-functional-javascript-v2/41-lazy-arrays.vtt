WEBVTT

1
00:00:00.390 --> 00:00:01.990
&gt;&gt; Kyle Simpson: Our last
unit of discussion for

2
00:00:01.990 --> 00:00:05.170
the course is asynchronous programming.

3
00:00:05.170 --> 00:00:08.190
Now I wanna clearly state, we are not

4
00:00:08.190 --> 00:00:12.010
doing even a remotely an exhaustive
discussion of asynchronous programming.

5
00:00:12.010 --> 00:00:13.910
I have a whole day and

6
00:00:13.910 --> 00:00:19.160
half long course here on Frontend Masters
about asynchronous programming.

7
00:00:19.160 --> 00:00:24.090
What I wanna do specifically is narrow in
on how everything that we've learned up to

8
00:00:24.090 --> 00:00:29.900
this point in this course,
converts to talking about values

9
00:00:29.900 --> 00:00:34.340
not that are just immediately present but
rather values that are present over time.

10
00:00:34.340 --> 00:00:38.670
So here's the synchronous version of
what we've been doing, an example.

11
00:00:38.670 --> 00:00:41.320
We start out with a list and
the values are already here.

12
00:00:42.370 --> 00:00:45.150
And I can map over those values
because they are already present and

13
00:00:45.150 --> 00:00:51.170
I get an immediate b list back that has
the immediately transformed values in it.

14
00:00:51.170 --> 00:00:54.240
That works really well when
the data is already present.

15
00:00:54.240 --> 00:00:57.450
But what about if the data is
gonna come to you over time?

16
00:00:57.450 --> 00:01:00.340
If the data is coming to
you from network responses.

17
00:01:00.340 --> 00:01:03.030
Or the data is a set of mouse clicks.

18
00:01:03.030 --> 00:01:04.860
Or it's a set of WebSocket events.

19
00:01:04.860 --> 00:01:07.270
Or it's stuff from a web worker or
who knows?

20
00:01:07.270 --> 00:01:11.230
Any possible source of a-synchrony

21
00:01:11.230 --> 00:01:14.920
that's in your application can
have data coming to you over time.

22
00:01:16.770 --> 00:01:21.620
So harkening back to something that we
talked about earlier in the course.

23
00:01:21.620 --> 00:01:24.520
The difference between eager and lazy.

24
00:01:24.520 --> 00:01:28.540
This is the eager approach
to data operations.

25
00:01:28.540 --> 00:01:31.770
Eager meaning we have it right now,
we're gonna do it right now.

26
00:01:31.770 --> 00:01:36.910
The lazy approach is essentially to
say I'll do it whenever it shows up.

27
00:01:36.910 --> 00:01:38.860
That's cool, take your time.

28
00:01:38.860 --> 00:01:41.580
Whenever that data shows up
I'll perform the operation.

29
00:01:42.690 --> 00:01:46.560
That's essentially how we take everything
that we've learned in this course about

30
00:01:46.560 --> 00:01:51.160
functional programming and
extend it over time.

31
00:01:51.160 --> 00:01:58.390
Functional programming over time, that's
basically what functional async sometimes

32
00:01:58.390 --> 00:02:02.690
as referred to as reactive programming
it has a lot of different names.

33
00:02:02.690 --> 00:02:06.000
Basically what it is is taking
functional programming techniques and

34
00:02:06.000 --> 00:02:07.020
extending them over time.

35
00:02:08.440 --> 00:02:10.320
FRP functional reactive programming.

36
00:02:10.320 --> 00:02:10.930
That is another term.

37
00:02:10.930 --> 00:02:14.010
A lot of different terms that
refer to the same concept.

38
00:02:15.750 --> 00:02:17.630
So it really is about eager versus lazy.

39
00:02:17.630 --> 00:02:23.640
So I want you to imagine just for a moment
that I had a utility called map lazy.

40
00:02:23.640 --> 00:02:27.150
This is a special kind of utility and
let's look at what it does.

41
00:02:27.150 --> 00:02:30.350
I make an a Array that's empty.

42
00:02:30.350 --> 00:02:35.200
And then I make a b that
is the lazy mapping of a.

43
00:02:36.670 --> 00:02:40.400
That means that right now both a and
b are completely empty.

44
00:02:41.580 --> 00:02:46.160
But what I've said is If this
mapLazy utility were to exist.

45
00:02:46.160 --> 00:02:50.740
I've said that at any point in the future,
if I push a value into a,

46
00:02:50.740 --> 00:02:55.330
I want that mapper to run across
that same value and stick it into b.

47
00:02:57.430 --> 00:03:02.480
So as soon as I call a.push(1),
that 1 is in a of 0.

48
00:03:02.480 --> 00:03:08.960
But it's also been transformed
into the value 2 at b[0].

49
00:03:08.960 --> 00:03:13.250
So it almost sort of magically
propagated itself to this other array.

50
00:03:15.120 --> 00:03:19.440
Do we see how that's taking functional
concepts and extending them over time?

51
00:03:19.440 --> 00:03:23.350
This lazy mapping is just
one example that I'm using.

52
00:03:23.350 --> 00:03:27.840
Later, we can call, a.push(2), same thing
happens: two shows up in the second

53
00:03:27.840 --> 00:03:31.560
position of a, the doubling of that
shows up in the second position of b.

54
00:03:33.060 --> 00:03:37.530
So it's almost like these arrays
are like streams of values.

55
00:03:37.530 --> 00:03:40.710
These lazy arrays are basically
just streams of values.

56
00:03:40.710 --> 00:03:44.250
Whenever one piece of date
comes into this stream,

57
00:03:44.250 --> 00:03:47.220
it gets transformed and
sent along this stream.

58
00:03:49.310 --> 00:03:52.540
If the regular array is the eager version.

59
00:03:53.600 --> 00:03:58.990
The lazy array would be the lazy
version of the same concept.

60
00:03:58.990 --> 00:04:03.810
And all the operations that you can think
of like map and filter and reduce and

61
00:04:03.810 --> 00:04:11.520
100 others they can all be
modeled either eagerly or lazily.

62
00:04:11.520 --> 00:04:13.990
So just like I showed you
how we could take map and

63
00:04:13.990 --> 00:04:20.230
we could adapt it from a list to an object
to any other kind of a data structure.

64
00:04:20.230 --> 00:04:24.830
You can also left map to work all the time
and that's what mapLazy would be doing.

65
00:04:26.210 --> 00:04:28.680
Now that's just an ad hoc
invention of mine and

66
00:04:28.680 --> 00:04:33.310
I want to move the discussion from
the operator itself to the data structure

67
00:04:33.310 --> 00:04:37.160
because we really want to use
the appropriate data structure for this

68
00:04:39.150 --> 00:04:42.740
so let's now think about what
if I could create a lazy array.

69
00:04:44.930 --> 00:04:47.960
A LazyArray would automatically have map,
filter and

70
00:04:47.960 --> 00:04:50.990
reduce functions on it that
just knew what to do over time.

71
00:04:52.560 --> 00:04:54.260
We don't need separate utilities for it,

72
00:04:54.260 --> 00:04:57.040
we can just deal with it
on the data structure.

73
00:04:57.040 --> 00:04:58.910
So, here is a LazyArray.

74
00:04:58.910 --> 00:05:02.320
Essentially the top of
this is the producer.

75
00:05:02.320 --> 00:05:05.700
This is the source of data.

76
00:05:05.700 --> 00:05:08.710
We've got a set interval that's
gonna run once a second and

77
00:05:08.710 --> 00:05:14.760
push a random number into
the a LazyAarray, aka the a stream.

78
00:05:14.760 --> 00:05:18.810
And on the bottom, starting with line 9,
I've got an observer.

79
00:05:18.810 --> 00:05:24.280
This observer is observing
that a stream and

80
00:05:24.280 --> 00:05:28.420
every time a piece of data comes
into the a stream it gets mapped,

81
00:05:28.420 --> 00:05:31.710
it gets transformed and
put into the b stream.

82
00:05:32.940 --> 00:05:37.140
And so
on line 13 I just call.4 each essentially.

83
00:05:37.140 --> 00:05:38.760
And I want this function to be called,

84
00:05:38.760 --> 00:05:42.300
this on value function to be called
every time there's a new piece of data.

85
00:05:42.300 --> 00:05:47.110
So once a second we generate a random
number, and then that would double

86
00:05:47.110 --> 00:05:52.260
in the b array and be exposed by calling
the on value with that new mapped value.

87
00:05:53.840 --> 00:05:57.547
Everything we just talked about
with eager functional programming,

88
00:05:57.547 --> 00:05:59.949
but now we've extended
it lazily over time.

89
00:06:03.376 --> 00:06:05.305
&gt;&gt; Kyle Simpson: That's
actually one of my favorite and

90
00:06:05.305 --> 00:06:09.047
most exciting parts of functional
programming, that all of these concepts

91
00:06:09.047 --> 00:06:13.380
that we've learned that work synchronously
eagerly, they all work exactly the same.

92
00:06:13.380 --> 00:06:14.300
Or not exactly, but

93
00:06:14.300 --> 00:06:18.580
they all work conceptually similarly
when we extend them over time.

94
00:06:20.580 --> 00:06:22.060
That's really powerful.

95
00:06:22.060 --> 00:06:27.033
Analyses the model of the entirety of
our application using the same co-set of

96
00:06:27.033 --> 00:06:28.020
principles.

97
00:06:28.020 --> 00:06:32.790
Now, LazyArray is an invention of mind for
the purposes of illustration.

98
00:06:35.540 --> 00:06:39.370
What we really mean,
what we really need is an observable.

99
00:06:39.370 --> 00:06:45.340
LazyArray here is otherwise known as,
aka, observables.

100
00:06:46.410 --> 00:06:48.180
Any of your heard of observables?

101
00:06:48.180 --> 00:06:50.160
Maybe you've read some
blog post about them.

102
00:06:50.160 --> 00:06:51.410
They're certainly hot these days.

103
00:06:51.410 --> 00:06:56.170
There's some fantastic courses
here on Frontend Masters about

104
00:06:56.170 --> 00:06:58.340
asynchronous programming
talking about Observables.

105
00:06:58.340 --> 00:07:00.340
I cover observables in my course as well.

106
00:07:01.970 --> 00:07:05.050
So I just wanna briefly show you

107
00:07:05.050 --> 00:07:09.680
an example of using observables with
a library that implements them.

108
00:07:09.680 --> 00:07:12.670
There's tons of power there that
we're not even remotely gonna scratch

109
00:07:12.670 --> 00:07:13.940
the surface with.

110
00:07:13.940 --> 00:07:20.460
The RXJX library, it's a port of the RX
library to the JavaScript language.

111
00:07:20.460 --> 00:07:23.210
And, we can create a stream if you will.

112
00:07:23.210 --> 00:07:25.020
In this case they call it a subject.

113
00:07:25.020 --> 00:07:28.970
But I can create a stream
by saying new Rx.Subject.

114
00:07:28.970 --> 00:07:31.710
And then, every once a second,

115
00:07:31.710 --> 00:07:37.780
I can just call a.next which
pushes a value into that subject.

116
00:07:37.780 --> 00:07:41.040
And then down on line nine,
I can subscribed to that subject,

117
00:07:41.040 --> 00:07:44.200
that observable, that stream,
whatever term you wanna use.

118
00:07:44.200 --> 00:07:47.070
And then line 13,
I called .subscribe on it.

119
00:07:47.070 --> 00:07:50.580
So that's basically the exact
same as the previous snippet,

120
00:07:50.580 --> 00:07:55.250
the LazyArray that I made up except
this isn't real existent thing.

121
00:07:55.250 --> 00:08:01.310
And we use .subscribe instead
of .foreach But this exists.

122
00:08:01.310 --> 00:08:03.630
This library's been around for
a number of years.

123
00:08:03.630 --> 00:08:05.880
There's a giant community around it.

124
00:08:05.880 --> 00:08:07.500
It's a great place to get started.

125
00:08:07.500 --> 00:08:10.630
There are other observables
libraries if you're interested.

126
00:08:10.630 --> 00:08:12.075
I've got one, but

127
00:08:12.075 --> 00:08:18.200
RXJX is by far the one with the most
documentation and community support.

128
00:08:18.200 --> 00:08:22.290
It just can be a very daunting set
of documentation to go up against.

129
00:08:22.290 --> 00:08:26.800
So, make sure you allot plenty of time
if you want to start learning Rx.

