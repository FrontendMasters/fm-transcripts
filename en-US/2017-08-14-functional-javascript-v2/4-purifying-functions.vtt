WEBVTT

1
00:00:00.690 --> 00:00:01.270
&gt;&gt; Kyle Simpson: All right.
So

2
00:00:01.270 --> 00:00:05.150
our goal is to avoid side
effects wherever possible.

3
00:00:05.150 --> 00:00:09.750
For example, this function organizes
itself with a direct input,

4
00:00:09.750 --> 00:00:11.230
the x parameter.

5
00:00:11.230 --> 00:00:14.070
And it has a direct output,
the return statement.

6
00:00:14.070 --> 00:00:18.670
And that means that when we call
something online seven, and

7
00:00:18.670 --> 00:00:21.090
we pass in the value zero,

8
00:00:21.090 --> 00:00:25.260
the output that we get which we can choose
to assign to y if we want or not but that

9
00:00:25.260 --> 00:00:30.430
output is entirely independent of anything
that happens before or after that line.

10
00:00:32.310 --> 00:00:37.930
So, it takes that line to be a single,
individual line of reasoning

11
00:00:37.930 --> 00:00:43.110
rather than having to reason about lines
1-6 to get to that point in the program.

12
00:00:45.060 --> 00:00:51.110
Now, the takeaway should be avoid
side effects wherever possible.

13
00:00:51.110 --> 00:00:56.260
But if you have some scenario
where you can't actually

14
00:00:56.260 --> 00:01:00.790
write the function with no side effects,
maybe it's a function you don't control.

15
00:01:00.790 --> 00:01:02.500
You still have to use
it in your system but

16
00:01:02.500 --> 00:01:06.279
maybe it's something you don't control, so
you're not really allowed to change it.

17
00:01:07.640 --> 00:01:12.120
There's a couple of things, a couple of
techniques that we can use to minimize

18
00:01:12.120 --> 00:01:16.950
the impact of the side effects to
essentially hide those side effects,

19
00:01:16.950 --> 00:01:19.730
if you will, so that they're not
polluting the rest of our code.

20
00:01:20.850 --> 00:01:26.100
So we wanna talk about how we
can get to these pure functions.

21
00:01:26.100 --> 00:01:30.100
That's the term for a function,
that doesn't have any side effects.

22
00:01:30.100 --> 00:01:33.075
These are pure functions, return x and y.

23
00:01:33.075 --> 00:01:38.260
Return x + y + z is not pure cuz we're
referencing a variable outside of itself.

24
00:01:38.260 --> 00:01:44.680
So how do we purify a piece of
code that's not already pure?

25
00:01:44.680 --> 00:01:45.180
What can we do?

26
00:01:47.401 --> 00:01:52.768
&gt;&gt; Kyle Simpson: Well, the problem that
we have with this code is that there

27
00:01:52.768 --> 00:01:58.080
is a set of inputs that are coming
from the lexical scope.

28
00:01:58.080 --> 00:02:03.880
The x variable is a variable in that
lexical scope that f is able to access.

29
00:02:03.880 --> 00:02:09.730
So if I wanted to in essence hide or
encapsulate that what I could do is create

30
00:02:09.730 --> 00:02:15.670
a lexical scope around F that included
an X, so when F tried to access an X,

31
00:02:15.670 --> 00:02:20.880
it was accessing one that was in this
enclosed, this encapsulated scope.

32
00:02:22.080 --> 00:02:23.140
So, here's an example of that.

33
00:02:23.140 --> 00:02:29.990
I made a capital F function, and
I have an x and, in this case, also a y.

34
00:02:29.990 --> 00:02:34.850
I have the entire universe that the
lowercase f on line six would care about.

35
00:02:34.850 --> 00:02:38.000
Both input indirect and output indirect.

36
00:02:38.000 --> 00:02:41.220
I have that universe contained
within the lexical scope

37
00:02:41.220 --> 00:02:43.080
of the F function from line one.

38
00:02:44.850 --> 00:02:51.280
What that means is that when I run that
f function on line three it will produce

39
00:02:51.280 --> 00:02:57.120
a side effect, but that side effect is
contained within the outer F function.

40
00:02:58.470 --> 00:03:04.070
So the outer F function then
becomes as we see on line 13,

41
00:03:04.070 --> 00:03:09.500
an actual pure function
from it's observable

42
00:03:09.500 --> 00:03:13.040
behavior it has no side effects
on the rest of the program.

43
00:03:13.040 --> 00:03:15.880
Line 13 will always
behave exactly that way.

44
00:03:15.880 --> 00:03:19.750
If I pass in 0,
I will always get the value 3 back out.

45
00:03:19.750 --> 00:03:22.950
I can call it over and over again and
I'll get the exact same three

46
00:03:22.950 --> 00:03:27.930
with the exact same input, so
observably the capital F function is pure.

47
00:03:29.710 --> 00:03:33.460
Even though on the inside it has
all this impurity happening,

48
00:03:33.460 --> 00:03:35.669
it has all these side causes and
side effects happening.

49
00:03:36.900 --> 00:03:41.750
Now, I show you this not because it is
common that you're going to be able to

50
00:03:41.750 --> 00:03:44.590
wrap a function around
some other function.

51
00:03:44.590 --> 00:03:48.430
The truth is if you have some function
in your app, and for whatever reason,

52
00:03:48.430 --> 00:03:51.840
you're not allowed to change
the definition of the function,

53
00:03:51.840 --> 00:03:55.610
you're also not likely to be able to
wrap a function around it lexically.

54
00:03:56.720 --> 00:03:58.850
You're not likely to be able to
change anything about the file.

55
00:03:58.850 --> 00:04:02.590
Maybe it's a function provided to
you by a third party library and

56
00:04:02.590 --> 00:04:06.945
you load it dynamically and you don't
control it, so you can't change it.

57
00:04:06.945 --> 00:04:08.669
So I don't really show you this to say,

58
00:04:08.669 --> 00:04:11.036
this is how you're gonna
always fix these problems.

59
00:04:11.036 --> 00:04:15.773
But I do wanna make a different point
here, which is the functional programmer

60
00:04:15.773 --> 00:04:20.296
knows that the importance of functional
purity, that is avoiding the side

61
00:04:20.296 --> 00:04:25.140
effects and side causes the importance
of that is observational not academic.

62
00:04:26.280 --> 00:04:30.820
The importance of that is that
line 13 acts as a standalone.

63
00:04:30.820 --> 00:04:34.860
It doesn't actually matter what
happens on the inside of f.

64
00:04:34.860 --> 00:04:39.820
As long as the outer perception, the outer
observation of that function is that it

65
00:04:39.820 --> 00:04:41.930
behaves as pure, then we're golden.

66
00:04:44.100 --> 00:04:46.500
So, a principal that you will see.

67
00:04:46.500 --> 00:04:49.350
And you'll see this play out many times
throughout the rest of this workshop

68
00:04:50.920 --> 00:04:53.740
is that it doesn't need to
be turtles all the way down.

69
00:04:53.740 --> 00:04:59.060
When we completely contain
all of those side effects,

70
00:04:59.060 --> 00:05:00.890
it doesn't matter what
happens on the inside.

71
00:05:00.890 --> 00:05:03.110
And as a matter of fact, it does matter.

72
00:05:03.110 --> 00:05:06.180
You should seek to do it in
the most efficient way possible.

73
00:05:07.840 --> 00:05:12.080
From the perspective of creating a utility
that then is going to be reused.

74
00:05:12.080 --> 00:05:15.510
But there is clearly a trade off here,
because the uglier you make the code

75
00:05:15.510 --> 00:05:21.140
inside of f the harder you make f itself
to understand and read and verify.

76
00:05:22.710 --> 00:05:26.810
So if you go crazy and make it really
all kinds of arcane and all kinds of

77
00:05:26.810 --> 00:05:31.330
wierd stuff going on, you might very well
make the rest of the program easy to

78
00:05:31.330 --> 00:05:34.250
understand, because the rest of
the program looks like line 13,

79
00:05:34.250 --> 00:05:38.660
very verifiable, very provable but
the stuff inside of f, not so great.

80
00:05:41.392 --> 00:05:45.658
&gt;&gt; Kyle Simpson: So you wanna make those
changes only when performance triumphs

81
00:05:45.658 --> 00:05:49.613
the readability, and
following where I'm coming from.

82
00:05:49.613 --> 00:05:53.760
You don't wanna just write ugly side
effect code just because it's fun.

83
00:05:53.760 --> 00:05:58.094
You want to cheat and use side effects and
use any other kinda trick in the book when

84
00:05:58.094 --> 00:06:01.440
it's gonna help
the performance of the system.

85
00:06:01.440 --> 00:06:04.850
And I guess I could say
the converse of that is,

86
00:06:04.850 --> 00:06:09.260
if there's someplace in your system
that needs to cheat for performance,

87
00:06:09.260 --> 00:06:15.170
then what you should do is encapsulate
those cheats, that side effect.

88
00:06:15.170 --> 00:06:16.270
In a pure wrapper.

89
00:06:18.110 --> 00:06:21.950
If there's something you need to do, like,
I need to push into the array instead of

90
00:06:21.950 --> 00:06:25.110
creating a new array for each item that
I need to add into it, I need to mutate

91
00:06:25.110 --> 00:06:28.845
my array, we'll talk about value and
mutability a bit later in the course.

92
00:06:28.845 --> 00:06:32.415
If you need to push something in an array
because it's more efficient that way and

93
00:06:32.415 --> 00:06:36.365
you are going to do this millions and
millions of times that's fine but

94
00:06:36.365 --> 00:06:38.535
just encapsulate that in a function so

95
00:06:38.535 --> 00:06:41.235
that that is not polluting
the rest of the program.

96
00:06:42.755 --> 00:06:45.435
That's the goal of avoiding side effects.

97
00:06:45.435 --> 00:06:49.060
And this is what we're going to
see over and over in this course.

98
00:06:49.060 --> 00:06:54.220
My functional light pragmatic balance
between the academic concept and

99
00:06:54.220 --> 00:06:57.600
what we need to do to ship code and
ship code that works.

100
00:06:59.220 --> 00:07:02.080
I don't hear a lot of functional
programmers talking about that balance and

101
00:07:02.080 --> 00:07:05.750
that trade off but it's core central

102
00:07:05.750 --> 00:07:09.869
to premise that functional light is what
helps you start climbing the mountain.

103
00:07:13.878 --> 00:07:17.536
&gt;&gt; Kyle Simpson: So one way of fixing this
problem was to completely encapsulate all

104
00:07:17.536 --> 00:07:19.364
of the possible side effects, so

105
00:07:19.364 --> 00:07:22.910
that they can't be observed by
the outside part of the program.

106
00:07:24.430 --> 00:07:26.940
Where possible,
you should probably do it that way.

107
00:07:28.170 --> 00:07:29.840
Maybe not gonna be possible all the time.

108
00:07:30.890 --> 00:07:32.250
So, another technique, and

109
00:07:32.250 --> 00:07:36.680
this one definitely feels a bit gross,
I totally understand that.

110
00:07:36.680 --> 00:07:41.400
But another technique is to create
a function that acts as an interface

111
00:07:41.400 --> 00:07:43.610
to the function in question.

112
00:07:43.610 --> 00:07:47.030
So here,
lowercase stuff is not inside of f, but

113
00:07:47.030 --> 00:07:49.640
f acts as an interface to that function.

114
00:07:49.640 --> 00:07:55.800
You'll notice that f's job,
Capital F on line 5, its job is to capture

115
00:07:55.800 --> 00:08:01.620
the current state, set to something
predictable, run the side effect,

116
00:08:01.620 --> 00:08:07.179
capture the output state and then reset
everything as if nothing had changed.

117
00:08:09.566 --> 00:08:13.444
&gt;&gt; Kyle Simpson: So when we run line 16,
during the running of line 16,

118
00:08:13.444 --> 00:08:17.494
there are definitely side
effects happening in the system.

119
00:08:17.494 --> 00:08:19.066
No question.

120
00:08:19.066 --> 00:08:22.380
We are changing variables like the x and
y from 14.

121
00:08:22.380 --> 00:08:26.720
We're definitely changing those as F runs.

122
00:08:26.720 --> 00:08:32.370
But at the end of F, everything has been
set back to exactly the way it was before.

123
00:08:34.377 --> 00:08:37.930
&gt;&gt; Kyle Simpson: So,
we go back to asking ourselves observably,

124
00:08:37.930 --> 00:08:40.800
is capital F acting as a pure function?

125
00:08:42.850 --> 00:08:45.840
Observationally, it is
acting as a pure function

126
00:08:45.840 --> 00:08:49.480
because it has prevented us
from being able to observe or

127
00:08:49.480 --> 00:08:53.780
worry about those side effects
throughout the rest of our programming.

128
00:08:53.780 --> 00:08:57.850
Line 16 now can be understood in isolation

129
00:08:57.850 --> 00:09:01.580
without having to run lines 1 through
15 of the code to figure it out.

130
00:09:03.880 --> 00:09:05.830
There's no question this is gross and

131
00:09:05.830 --> 00:09:09.270
there's no question that it would
be better to do it a different way.

132
00:09:09.270 --> 00:09:12.510
But this is kind of your fall back to I
haven't been able to come up with any

133
00:09:12.510 --> 00:09:14.210
other way to deal with the problem.

134
00:09:14.210 --> 00:09:18.050
But I really want to prevent these side
effects from polluting all of my code and

135
00:09:18.050 --> 00:09:22.300
making all of my code difficult to
understand and I'm going to use capital

136
00:09:22.300 --> 00:09:25.600
F in lots of places, so
that could impact a lot of code.

137
00:09:25.600 --> 00:09:29.150
I'm going to go to the trouble to do this.

138
00:09:29.150 --> 00:09:33.310
By the way,
this is just a couple of variables.

139
00:09:33.310 --> 00:09:38.480
If this was dozens of variables,
If it involved modifications to the dome,

140
00:09:38.480 --> 00:09:43.990
if it involved network requests, fixing
that is going to be really challenging.

141
00:09:43.990 --> 00:09:48.320
It's not going to be that straight forward
for you to do, I get that entirely.

142
00:09:48.320 --> 00:09:53.060
But, you have to judge for
yourself in that pragmatic balance.

143
00:09:53.060 --> 00:09:54.330
Is the benefit worth it?

144
00:09:54.330 --> 00:09:57.710
Is it worth it to me to
got his extra step so

145
00:09:57.710 --> 00:10:01.930
that I protect all the usages of that
through out the program from colluding.

146
00:10:01.930 --> 00:10:05.100
Is there a question in chat here?

147
00:10:06.760 --> 00:10:10.810
&gt;&gt; Speaker 2: Yeah, just that if
the first function doesn't have a turn

148
00:10:12.130 --> 00:10:13.720
does that mean it's not a function?

149
00:10:13.720 --> 00:10:16.910
&gt;&gt; Kyle Simpson: Yeah, we're
deliberately saying is the F right here.

150
00:10:16.910 --> 00:10:18.900
The one on line one, the lowercase f.

151
00:10:18.900 --> 00:10:22.340
That's our running example of bad,
impure function.

152
00:10:24.110 --> 00:10:26.290
That is our bad, impure function.

153
00:10:26.290 --> 00:10:30.380
One of the reasons why it's impure is
it doesn't have a return statement.

154
00:10:30.380 --> 00:10:33.740
Another reason why it's impure is
that it references an x variable

155
00:10:33.740 --> 00:10:34.490
outside of itself.

156
00:10:40.590 --> 00:10:44.760
So we're starting to build up for
ourselves a definition for

157
00:10:44.760 --> 00:10:46.730
function purity.

158
00:10:46.730 --> 00:10:50.780
And, we're actually going to evolve
this definition as we go along through

159
00:10:50.780 --> 00:10:51.400
the course.

160
00:10:52.410 --> 00:10:55.650
And it's not that when we get a new
definition it's going to replace it.

161
00:10:55.650 --> 00:10:58.230
This is a little bit
more like a Rubix Cube.

162
00:10:58.230 --> 00:11:00.890
And right now, we're going to look
at one face of the Rubix Cube.

163
00:11:00.890 --> 00:11:02.190
We're going to look at the red side.

164
00:11:03.450 --> 00:11:05.650
That's gonna give us a definition, but

165
00:11:05.650 --> 00:11:08.710
that doesn't tell the full story
of what the Rubik's cube is.

166
00:11:10.120 --> 00:11:15.120
So right now, our definition of functional
purity, looking only at the red side of

167
00:11:15.120 --> 00:11:21.340
the Rubik's cube, is to suggest
that a pure function is a function

168
00:11:21.340 --> 00:11:26.650
that does not have any access to variables
outside of itself that's observable.

169
00:11:31.201 --> 00:11:34.263
&gt;&gt; Kyle Simpson: If a function accesses
something outside of itself, and

170
00:11:34.263 --> 00:11:37.515
we can observe that access and
change something about it, or

171
00:11:37.515 --> 00:11:41.233
it changes something about the state
of the system, it's not pure.

