WEBVTT

1
00:00:00.360 --> 00:00:03.560
&gt;&gt; Kyle Simpson: Our next topic
of discussion is closure.

2
00:00:03.560 --> 00:00:07.030
How many of you ever either had or
given or

3
00:00:07.030 --> 00:00:11.280
both the job interview
question what is closure?

4
00:00:11.280 --> 00:00:12.760
Anybody?

5
00:00:12.760 --> 00:00:17.230
Okay, I see a few hands maybe some
people online will resonate with that.

6
00:00:17.230 --> 00:00:22.450
I For a long time before becoming
a teacher, I've been a developer now for

7
00:00:22.450 --> 00:00:26.940
about 20 years, so I've only been
teaching the last five or so.

8
00:00:26.940 --> 00:00:31.630
So for 15 years, I was just a software
developer sitting exactly in your shoes,

9
00:00:31.630 --> 00:00:33.710
I worked at consultancies and all that.

10
00:00:33.710 --> 00:00:37.912
But I for quite a while was
the JavaScript expert if there

11
00:00:37.912 --> 00:00:40.961
is such a thing on whatever team I was on.

12
00:00:40.961 --> 00:00:43.269
So the jobs that I bounced around to,

13
00:00:43.269 --> 00:00:47.299
I just naturally gravitated to
I'll be the JavaScript expert.

14
00:00:47.299 --> 00:00:52.108
And what that equated to was well hey, we
need you to come in and vet this candidate

15
00:00:52.108 --> 00:00:56.670
figure out if they really know what
they are talking about with JavaScript.

16
00:00:56.670 --> 00:01:00.370
They sure say something on their
resume but do they really know it and

17
00:01:00.370 --> 00:01:03.140
I was pretty good at that vetting people.

18
00:01:03.140 --> 00:01:05.110
With the job interview questions and

19
00:01:05.110 --> 00:01:09.260
I countless times asked this question,
what is closure?

20
00:01:09.260 --> 00:01:10.620
Tell me about closure,

21
00:01:10.620 --> 00:01:14.110
tell me an example of using closure
in your code some variation thereof.

22
00:01:14.110 --> 00:01:20.150
[COUGH] Most of the answers that I
would get would range somewhere around,

23
00:01:20.150 --> 00:01:25.420
it has to do with asynchronous callbacks,
click handlers, timers, things like that.

24
00:01:27.120 --> 00:01:32.130
And I would say okay, let me prompt
you to give me something more, right?

25
00:01:32.130 --> 00:01:33.290
What exactly does that mean?

26
00:01:33.290 --> 00:01:35.830
Yes, we know that asynchronous
callbacks happen in code, but

27
00:01:35.830 --> 00:01:37.900
what does it mean to have closure?

28
00:01:37.900 --> 00:01:42.270
And when pressed most people didn't have
much more to articulate on the topic.

29
00:01:42.270 --> 00:01:47.430
They've heard of closure but never really
processed in their mind what it was.

30
00:01:49.430 --> 00:01:53.630
Closure I think can be said
to be if not one of them,

31
00:01:53.630 --> 00:01:59.050
if not the most certainly in the top 2 or
3 most important Concepts,

32
00:01:59.050 --> 00:02:03.190
most prevalent concepts ever
invented in all of computer science.

33
00:02:04.750 --> 00:02:07.830
One of the original ones, actually,
it's been around since very,

34
00:02:07.830 --> 00:02:09.536
very early days of programming.

35
00:02:09.536 --> 00:02:16.556
There is a talk that
Doug Crockford gave at one point,

36
00:02:16.556 --> 00:02:20.924
he was talking about this topic.

37
00:02:20.924 --> 00:02:25.607
He was gonna introduce closure and
he was talking in the general

38
00:02:25.607 --> 00:02:30.214
sense about anytime a really
truly great idea gets invented.

39
00:02:30.214 --> 00:02:34.383
He would assert that historically,
it always takes a full

40
00:02:34.383 --> 00:02:40.300
generation of programmers before
that truly great idea catches on.

41
00:02:40.300 --> 00:02:44.780
And he gave several examples of that,
but his somewhat tongue and

42
00:02:44.780 --> 00:02:47.480
cheek explanation for
why it takes so long for

43
00:02:47.480 --> 00:02:53.360
a great idea to catch on is that all of
the existing crew are resistant to change.

44
00:02:53.360 --> 00:02:54.980
They like things the way they are.

45
00:02:54.980 --> 00:02:58.310
They don't see any reason
why we need to change.

46
00:02:58.310 --> 00:03:01.430
And so we basically just have to wait
around long and if for them to retire or

47
00:03:01.430 --> 00:03:04.810
die off Before the new
crowd can come in and

48
00:03:04.810 --> 00:03:06.790
say hey this great thing
is what we ought to do.

49
00:03:08.040 --> 00:03:12.540
There's a little bit of truth to that, but
obviously it's a little bit overboard.

50
00:03:12.540 --> 00:03:17.687
But then he goes on to say, and this is to
the point of closure, he goes on to say

51
00:03:17.687 --> 00:03:23.016
we know that closure is truly great cuz
it took two full generations to catch on.

52
00:03:23.016 --> 00:03:27.705
If you think back historically to
where this came from in JavaScript,

53
00:03:27.705 --> 00:03:32.559
closure was kind of one of the original
ideas that landed in JavaScript.

54
00:03:32.559 --> 00:03:33.371
And it was,

55
00:03:33.371 --> 00:03:38.530
the idea behind it was actually
there from pretty much from day one.

56
00:03:38.530 --> 00:03:41.740
We couldn't observe that until
a few editions later, so

57
00:03:41.740 --> 00:03:45.150
it was a couple of years before you
could really observe and truly.

58
00:03:45.150 --> 00:03:50.120
Use closure to any power, but at the time,
there really weren't that many,

59
00:03:50.120 --> 00:03:55.730
if any mainstream consumer oriented
languages that had closure in them.

60
00:03:55.730 --> 00:04:00.320
We had Pearl, you could argue
around the same time, 95, 96, 7.

61
00:04:00.320 --> 00:04:04.380
Pearl was coming into its own, and
Pearl definitely introduced closure,

62
00:04:04.380 --> 00:04:06.710
you could argue that it was
a rival in that respect.

63
00:04:06.710 --> 00:04:12.770
But I would say JavaScript certainly
now looking back has captured

64
00:04:12.770 --> 00:04:18.140
more of that mainstream consumer developer
space than even something like plural.

65
00:04:18.140 --> 00:04:22.190
And certainly if you compare it to
the main consumer languages of the day,

66
00:04:22.190 --> 00:04:24.379
like the C++s and the Javas of the world.

67
00:04:26.280 --> 00:04:28.480
Those language didn't have closure.

68
00:04:28.480 --> 00:04:32.180
They didn't need it,
they were very class oriented, procedural,

69
00:04:32.180 --> 00:04:34.120
structural, we didn't need closure.

70
00:04:34.120 --> 00:04:37.580
You didn't really do functional
programming in a sense there, so

71
00:04:37.580 --> 00:04:39.640
why would we need something like closure?

72
00:04:39.640 --> 00:04:43.230
And JavaScript had this amazing insight.

73
00:04:43.230 --> 00:04:47.590
I wasn't there when Bryan and Ike decided
this, but I know that he said that his

74
00:04:47.590 --> 00:04:52.950
influence for JavaScript was most
directly the Scheme programming language.

75
00:04:52.950 --> 00:04:56.780
And he wanted to put Scheme in
the browser, and Netscape was like,

76
00:04:56.780 --> 00:04:58.320
yeah that sounds great, come work for us.

77
00:04:58.320 --> 00:05:00.220
And as soon as he showed up,
they were like no,

78
00:05:00.220 --> 00:05:02.560
we're not putting Scheme in the browser.

79
00:05:02.560 --> 00:05:07.710
And so he's like, well, How do I do my
favorite language that I like in Scheme?

80
00:05:07.710 --> 00:05:10.740
How do I get those
concepts into the browser?

81
00:05:10.740 --> 00:05:12.940
So we developed this language
that looks like Java,

82
00:05:12.940 --> 00:05:15.150
because that's what they told him,
they said make it look like Java.

83
00:05:16.170 --> 00:05:20.072
But under the covers it really
is more related to Scheme,

84
00:05:20.072 --> 00:05:25.372
a functional programming language, so
he laid the foundation for closure.

85
00:05:25.372 --> 00:05:29.064
In those earliest days of java script and

86
00:05:29.064 --> 00:05:33.848
I think that was a unique
almost accidental genius.

87
00:05:33.848 --> 00:05:37.236
A stroke of genius to
marry this procedural or

88
00:05:37.236 --> 00:05:43.140
even class object oriented syntax
with these functional concepts.

89
00:05:43.140 --> 00:05:48.053
Really I think one of the first mainstream
if not the first mainstream language to

90
00:05:48.053 --> 00:05:51.749
do so and truly embody the idea
of a multiparadigm language.

91
00:05:51.749 --> 00:05:54.721
And when I came along a few
years later in about 1998 or so,

92
00:05:54.721 --> 00:05:56.446
when I came along a few years later.

93
00:05:56.446 --> 00:06:00.850
What was most interesting to me about
JavaScript was not the fact that it was in

94
00:06:00.850 --> 00:06:04.600
the browser, but the fact that
it was a multiparadigm language.

95
00:06:04.600 --> 00:06:06.930
That was fascinating to me and

96
00:06:06.930 --> 00:06:09.900
not specifically that you could
do any pattern that you wanted.

97
00:06:09.900 --> 00:06:13.640
You could do procedural,
object oriented, or functional.

98
00:06:13.640 --> 00:06:16.322
It's not that you could do that,
but you could actually mix and

99
00:06:16.322 --> 00:06:18.866
match those different paradigms
within the same program.

100
00:06:18.866 --> 00:06:23.338
And I found that to be fascinating,
because ultimately, I like to consider,

101
00:06:23.338 --> 00:06:26.202
I get accused a lot of being
sort of an ivory tower.

102
00:06:26.202 --> 00:06:30.297
I'm disconnected from reality cuz all I
do is teach but I write a lot of code and

103
00:06:30.297 --> 00:06:32.187
I spend a lot of time in your shoes and

104
00:06:32.187 --> 00:06:35.350
I like to consider myself
ultimately a pragmatist.

105
00:06:35.350 --> 00:06:38.320
And what I liked about multi-paradigm
is that I didn't have to choose,

106
00:06:39.820 --> 00:06:43.050
I could pick which one was correct for
any given situation.

107
00:06:43.050 --> 00:06:46.780
And I think that was and

108
00:06:47.850 --> 00:06:51.974
definitely still is one of
JavaScript's strong points,

109
00:06:51.974 --> 00:06:56.410
is that it doubled down or
it made a big bet on this idea of closure.

110
00:06:56.410 --> 00:07:01.550
When we fast forward 22 years and
if you survey the landscape of major

111
00:07:01.550 --> 00:07:06.420
programming languages pretty much every
major programing language in existence.

112
00:07:06.420 --> 00:07:09.650
Certainly, all the consumer orientated
ones, they all have closure.

113
00:07:09.650 --> 00:07:12.870
Java added closure, PHP added closure.

114
00:07:12.870 --> 00:07:15.670
We have Ruby and Python that came along,
they all have closure.

115
00:07:15.670 --> 00:07:18.950
Every main stream language
out there has closure.

116
00:07:18.950 --> 00:07:22.080
Even ones that we wouldn't have
thought of, like C++ for example.

117
00:07:22.080 --> 00:07:27.110
It has closure in it because it turns
out it's actually a pretty great idea.

118
00:07:27.110 --> 00:07:29.820
Turns out it's so
powerful that we can implement so

119
00:07:29.820 --> 00:07:31.590
many other things on top of it.

120
00:07:31.590 --> 00:07:35.900
It is highly prevalent and
certainly for the functional program,

121
00:07:35.900 --> 00:07:38.960
closure is at the heart
of everything that we do.

122
00:07:40.270 --> 00:07:41.690
Pretty much everything that we do.

123
00:07:41.690 --> 00:07:46.080
We've already been using a bunch of
closure up to this point in the code

124
00:07:46.080 --> 00:07:51.420
snippets that we've been doing and you
might not just have realized what it was.

125
00:07:51.420 --> 00:07:54.650
So the next time you either give or

126
00:07:54.650 --> 00:07:57.720
get asked that interview question,
what is closure?

127
00:07:59.250 --> 00:08:02.460
Call me crazy, but I'd love for
you to have a very specific,

128
00:08:02.460 --> 00:08:05.270
articulate answer to that question.

129
00:08:05.270 --> 00:08:08.640
Cuz it's a real thing that can
actually be recognized and

130
00:08:08.640 --> 00:08:13.220
studied and used and understanding
what you're talking about instead of,

131
00:08:13.220 --> 00:08:15.140
you know it's about call backs.

132
00:08:16.770 --> 00:08:19.660
Not only I think it will help you get
the job but I think it will help you

133
00:08:19.660 --> 00:08:22.960
write better code if you understand
what you're talking about.

134
00:08:22.960 --> 00:08:25.300
So, I wanna give you a definition for

135
00:08:25.300 --> 00:08:29.110
closure that you can feel free to use
the next time you got asked that question.

136
00:08:29.110 --> 00:08:34.060
Or feel free to ask this of others and
use this as the standard to measure by,

137
00:08:34.060 --> 00:08:37.770
it is not the academic definition for
closure.

138
00:08:37.770 --> 00:08:40.820
If you go on Wikipedia and
you try to study what is closure,

139
00:08:40.820 --> 00:08:44.210
you're gonna get a whole variety
of different descriptions for

140
00:08:44.210 --> 00:08:47.130
things and they may or
may not line up in various parts.

141
00:08:47.130 --> 00:08:52.561
Your mileage may vary, as they say, but
this is the most distilled down pragmatic

142
00:08:52.561 --> 00:08:58.162
definition that I've been able to come up
with for what closure is in my experience.

143
00:08:58.162 --> 00:09:04.242
And it's based purely on what
we can observe about closure.

144
00:09:04.242 --> 00:09:10.090
Philosophically, it's just like the if
the tree falls in the forest and

145
00:09:10.090 --> 00:09:11.670
no one's around to hear it, thing.

146
00:09:12.810 --> 00:09:14.260
We all know what this is, right?

147
00:09:14.260 --> 00:09:15.150
Does it make a sound?

148
00:09:15.150 --> 00:09:20.316
Well, if a closure exists academically,
but there's no way to

149
00:09:20.316 --> 00:09:25.785
observe that closure,
does it actually matter whether it exists?

150
00:09:25.785 --> 00:09:30.999
I would say not really, so
I choose to define closure based upon how

151
00:09:30.999 --> 00:09:37.066
we can observe it being different and
observation is a really key point here.

152
00:09:37.066 --> 00:09:40.723
Because you're going to see that closure
has been in all the code that you have

153
00:09:40.723 --> 00:09:41.710
been writing.

154
00:09:41.710 --> 00:09:45.250
If you have been writing JavaScript for
any length of time at all

155
00:09:45.250 --> 00:09:48.803
you have certainly used closure
even if you didn't realise it.

156
00:09:50.330 --> 00:09:54.540
So it's not like we're creating a new
pattern that you have to come up with and

157
00:09:54.540 --> 00:09:56.790
invent and figure out how to use.

158
00:09:56.790 --> 00:10:01.360
But rather, help you identify,
help you be sensitive to

159
00:10:01.360 --> 00:10:05.660
observe that as you use it in your
programs and to use it on purpose.

160
00:10:05.660 --> 00:10:07.170
To use it intentionally and

161
00:10:07.170 --> 00:10:10.930
to avoid accidentally having it
do stuff that you don't want.

162
00:10:10.930 --> 00:10:14.261
There's also a pretty good chance that
some of you have had bugs in your program

163
00:10:14.261 --> 00:10:17.237
directly related to closure and
you may not have realized that that was

164
00:10:17.237 --> 00:10:21.305
the problem.
&gt;&gt; Kyle Simpson: So let's have a good,

165
00:10:21.305 --> 00:10:24.470
clear definition for closure, here it is.

166
00:10:24.470 --> 00:10:28.678
Closure is when a function remembers
the variables around it even when that

167
00:10:28.678 --> 00:10:34.703
function is executed elsewhere.
&gt;&gt; Kyle Simpson: What

168
00:10:34.703 --> 00:10:35.971
do I mean by remember?

169
00:10:35.971 --> 00:10:40.947
I mean that a function that acts
as a variable outside of itself.

170
00:10:40.947 --> 00:10:46.347
If you then take that function and you
run it over here in some other entirely

171
00:10:46.347 --> 00:10:52.196
different lexical scope, it still has
access to that variable from this scope.

172
00:10:52.196 --> 00:10:56.131
It can still update it, read from it,
it still is a live linkage back to that

173
00:10:56.131 --> 00:10:59.450
variable, even though it's
executing in a different scope.

174
00:11:02.190 --> 00:11:07.430
If you think about it, that maps to
what those interview question responses

175
00:11:07.430 --> 00:11:12.960
I get are when somebody says, well it has
something to do with an event handler.

176
00:11:12.960 --> 00:11:15.660
Well yeah,
if you've written a click handler before,

177
00:11:15.660 --> 00:11:17.565
anybody ever written a click handler?

178
00:11:17.565 --> 00:11:20.101
And you put a function
in your click handler,

179
00:11:20.101 --> 00:11:23.239
you probably referenced some variable,
or object, or

180
00:11:23.239 --> 00:11:27.934
function from inside of that click handler
that was in the scope where you set it up.

181
00:11:27.934 --> 00:11:31.061
But did you ever stop to wonder,
when that click handler runs,

182
00:11:31.061 --> 00:11:34.320
it's running in an entirely
different location.

183
00:11:34.320 --> 00:11:38.159
How does it still have access to the stuff
that, actually that stuff we think,

184
00:11:38.159 --> 00:11:42.251
you know, conceptually, it should have
been garbage collected long before now.

185
00:11:42.251 --> 00:11:46.745
But it didn't get garbage collected,
it still has access to it and

186
00:11:46.745 --> 00:11:50.369
the answer to the question of,
how is that possible?

187
00:11:50.369 --> 00:11:52.594
Closure is what keeps that access alive,

188
00:11:52.594 --> 00:11:55.337
it prevents things from
being garbage collected.

189
00:11:55.337 --> 00:12:00.247
That otherwise would be garbage collected
so that function maintains that linkage,

190
00:12:00.247 --> 00:12:02.640
that access to it no matter where it goes.

191
00:12:03.940 --> 00:12:05.610
When you write a function and

192
00:12:05.610 --> 00:12:09.730
you reference a variable
outside in some outer scope.

193
00:12:09.730 --> 00:12:13.590
The entirety of the lifetime of that
function it will maintain that closure.

194
00:12:13.590 --> 00:12:16.840
You didn't have to do anything
extra to make it happen just

195
00:12:16.840 --> 00:12:19.440
reference the variable and
the closure will be created for you.

196
00:12:20.970 --> 00:12:24.480
In a sense closure is
a natural extension or

197
00:12:24.480 --> 00:12:30.620
almost a requirement for a language that
has lexical scope which JavaScript does.

198
00:12:30.620 --> 00:12:34.870
And a language that has functions
as values which JavaScript does.

199
00:12:36.120 --> 00:12:39.350
If a function is a value that
can be passed around and

200
00:12:39.350 --> 00:12:43.520
a function references its variables
lexically, that is up the scope chain.

201
00:12:45.200 --> 00:12:48.520
That language virtually has to have
closure for it to make any sense.

202
00:12:50.330 --> 00:12:53.810
It's not an accident that in
languages like for example PHP,

203
00:12:53.810 --> 00:12:57.720
I can talk about that since I
have some experience in PHP.

204
00:12:57.720 --> 00:13:00.680
I remember writing PHP
before they had closure and

205
00:13:00.680 --> 00:13:02.830
then I remember writing it
after they had closure.

206
00:13:02.830 --> 00:13:06.890
And the major difference between
the two was that all of a sudden in

207
00:13:06.890 --> 00:13:10.960
PHP that had closure functions were
values that could be passed around.

208
00:13:12.010 --> 00:13:14.150
That was not the case before.

209
00:13:14.150 --> 00:13:17.510
Now they are values that can be passed
around, if a function is a value and

210
00:13:17.510 --> 00:13:20.340
its lexically scoped you've
got to have closure.

211
00:13:20.340 --> 00:13:22.660
It would make no sense,

212
00:13:22.660 --> 00:13:27.940
it would be nonsensical to have
a function referencing a variable.

213
00:13:27.940 --> 00:13:32.350
In this location and it runs here fine but
if you take and run it over here all of

214
00:13:32.350 --> 00:13:36.300
the sudden it's forgotten about that
variable, that'd be nonsensical.

215
00:13:38.120 --> 00:13:41.564
So that's why I say closure
is built into the very

216
00:13:41.564 --> 00:13:46.269
core of how our scope mechanisms and
our functions as values work.

217
00:13:46.269 --> 00:13:49.526
Anytime you've done a click in or
anytime you've done a set time out,

218
00:13:49.526 --> 00:13:52.520
anytime you've done an Ajax call and
received a response back.

219
00:13:52.520 --> 00:13:58.088
All of those are scenarios where you
virtually certainly were using closure

220
00:13:58.088 --> 00:14:04.153
to access stuff after the fact
&gt;&gt; Kyle Simpson: Instead of me telling you

221
00:14:04.153 --> 00:14:09.540
some brand new thing, it's a little bit
more like Neo in the first Matrix movie.

222
00:14:10.760 --> 00:14:14.800
In the first Matrix movie,
when Neo is gonna see the matrix or

223
00:14:14.800 --> 00:14:16.460
when he's revealed the matrix.

224
00:14:16.460 --> 00:14:18.220
When they show him the matrix for
the first time,

225
00:14:18.220 --> 00:14:21.810
they're not showing him
something that's brand new.

226
00:14:21.810 --> 00:14:24.370
They're showing him something
that's been there the whole time,

227
00:14:24.370 --> 00:14:29.080
and he just couldn't observe it,
that's what's happening here.

228
00:14:29.080 --> 00:14:32.740
You're seeing something that has been
true of your program all along, and

229
00:14:32.740 --> 00:14:35.900
now you have a way to observe it
when you think about a function

230
00:14:35.900 --> 00:14:37.929
that accesses a variable
outside of itself.

231
00:14:39.760 --> 00:14:43.960
Here's one of those examples
from earlier in our discussion.

232
00:14:43.960 --> 00:14:47.140
The unary utility,
the thing that takes a function and

233
00:14:47.140 --> 00:14:50.860
makes a new function that's restricted,
where's the closure here?

234
00:14:50.860 --> 00:14:52.640
Well, the closure's
right there with the fn.

235
00:14:53.800 --> 00:14:59.170
We pass in an fn, we return back an inner
function, this one's called one.

236
00:15:00.390 --> 00:15:05.290
And I want you to think about when that
function from line 2 gets returned and

237
00:15:05.290 --> 00:15:09.130
we store that off in some variable
like the variable g, for example.

238
00:15:10.220 --> 00:15:16.140
That g, if we run it at some point, when
we run it, is it in fact not in a totally

239
00:15:16.140 --> 00:15:21.200
different scope than scope of
the unary utility in line 1?

240
00:15:21.200 --> 00:15:21.850
When it runs,

241
00:15:21.850 --> 00:15:27.140
it's in a totally different scope nd yet,
it still has access to that variable.

242
00:15:29.040 --> 00:15:29.850
How does it have access?

243
00:15:29.850 --> 00:15:35.080
Closure, you didn't have
to do anything special.

244
00:15:35.080 --> 00:15:38.440
You just made an inner function,
used a variable outside of itself.

245
00:15:38.440 --> 00:15:45.040
The closure came along for free.
&gt;&gt; Kyle Simpson: I

246
00:15:45.040 --> 00:15:49.541
want to put a little bug in the back of
your mind here because we're gonna get

247
00:15:49.541 --> 00:15:51.410
more into this in a little bit.

248
00:15:53.770 --> 00:15:58.917
Do you think the unary utility is pure?

249
00:16:04.830 --> 00:16:06.094
&gt;&gt; Kyle Simpson: Given the same function

250
00:16:06.094 --> 00:16:09.896
as an input, will it always produce
the same wrapped function output?

251
00:16:19.290 --> 00:16:20.558
&gt;&gt; Kyle Simpson: I have a high degree of

252
00:16:20.558 --> 00:16:25.418
confidence that the unary utility given
the same input would produce the same kind

253
00:16:25.418 --> 00:16:26.130
of output.

254
00:16:27.280 --> 00:16:29.550
What about the output function itself?

255
00:16:29.550 --> 00:16:31.996
The function one, is that a pure function?

256
00:16:39.955 --> 00:16:41.640
&gt;&gt; Kyle Simpson: It seems
pretty straightforward, right?

257
00:16:41.640 --> 00:16:45.180
We're passing in an arg and
passing that arg along to fn.

258
00:16:45.180 --> 00:16:49.490
The only way that fn could get redefined

259
00:16:49.490 --> 00:16:53.430
if it was redefined somewhere between line
one and a half and line two and a half.

260
00:16:53.430 --> 00:16:55.760
Does everybody see that?

261
00:16:57.120 --> 00:17:03.200
Those are the only lines in the entire
program that could possibly reassign fn.

262
00:17:03.200 --> 00:17:07.670
Fn is not actually a constant,
we don't have the const keyword there but

263
00:17:07.670 --> 00:17:10.340
just by virtue of the way
this code is written.

264
00:17:10.340 --> 00:17:11.968
It doesn't get reassigned does it?

265
00:17:11.968 --> 00:17:15.360
It's not even possible to reassign, so

266
00:17:15.360 --> 00:17:20.848
I ask again what's your level of
confidence that the one function

267
00:17:20.848 --> 00:17:23.861
is gonna behave as a pure function?

268
00:17:31.206 --> 00:17:32.260
&gt;&gt; Speaker 2: High.
&gt;&gt; Kyle Simpson: High degree of

269
00:17:32.260 --> 00:17:33.302
confidence.
&gt;&gt; Speaker 2: [LAUGH]

270
00:17:33.302 --> 00:17:34.182
&gt;&gt; Kyle Simpson: Goodness,

271
00:17:34.182 --> 00:17:35.680
quiet folks today.

272
00:17:35.680 --> 00:17:39.510
I set you up for success,
I told you the answer.

273
00:17:39.510 --> 00:17:44.190
High degree of confidence,
that this function

274
00:17:44.190 --> 00:17:48.770
one will produce the same outputs,
because nobody can redefine fn.

275
00:17:48.770 --> 00:17:54.090
Nobody does and nobody can that's
a pretty high degree of confidence.

276
00:17:54.090 --> 00:17:58.650
So that was why it was important earlier
for us to expand our definition of

277
00:17:58.650 --> 00:18:03.770
function purity to include the ability to
reference something outside of ourselves.

278
00:18:03.770 --> 00:18:08.090
Because if functions to be pure couldn't
reference anything outside of themselves,

279
00:18:09.130 --> 00:18:10.820
we couldn't use closure, could we?

280
00:18:10.820 --> 00:18:15.440
Do you see where I'm coming from here?

281
00:18:15.440 --> 00:18:19.040
Closure requires us using
variable outside of ourselves.

282
00:18:19.040 --> 00:18:23.753
And closure is super important to
functional programming Ergo we have to

283
00:18:23.753 --> 00:18:28.469
have a definition for function purity
that accounts for using variables

284
00:18:28.469 --> 00:18:33.421
that are lexically outside.
&gt;&gt; Kyle Simpson: Otherwise

285
00:18:33.421 --> 00:18:37.507
closure would be inconsistent with
functional programming principles,

286
00:18:37.507 --> 00:18:42.190
and there's a whole bunch of functional
programming that would come crashing down.

287
00:18:44.020 --> 00:18:44.520
Most of it.

288
00:18:46.940 --> 00:18:50.940
Now, if on line one and
a half there was something that did,

289
00:18:50.940 --> 00:18:53.960
you know, reassign fn or
something like that,

290
00:18:53.960 --> 00:18:59.020
well then all of a sudden things get
a little bit more interesting, right.

291
00:18:59.020 --> 00:19:02.150
All of a sudden we start to say I
don't have as much confidence in

292
00:19:02.150 --> 00:19:03.000
the behavior anymore.

293
00:19:04.580 --> 00:19:07.860
So it's all about the context here,
but this is a usage of closure

294
00:19:07.860 --> 00:19:12.330
which is entirely consistent with
the principles of function purity.

295
00:19:14.360 --> 00:19:15.260
Here's another example.

296
00:19:15.260 --> 00:19:16.370
You remember compose write?

297
00:19:17.840 --> 00:19:18.660
Doing the same thing,

298
00:19:18.660 --> 00:19:24.890
now we're closing over two different
variables, same principle applies.

299
00:19:24.890 --> 00:19:27.280
We're able to reference that fn1 and
fn2 and

300
00:19:27.280 --> 00:19:31.480
this is safe,
comp is reliably a pure function or

301
00:19:31.480 --> 00:19:36.230
will reliably behave as a pure function
because nobody reassigns fn1 or fn2.

302
00:19:38.580 --> 00:19:40.030
If they did that could be a problem.

