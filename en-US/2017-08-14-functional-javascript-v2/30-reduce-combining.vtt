WEBVTT

1
00:00:00.060 --> 00:00:05.270
&gt;&gt; Kyle Simpson: So our third operation
that we wanna look at, reduce.

2
00:00:05.270 --> 00:00:08.294
Reduce is fundamentally
a combining operation.

3
00:00:08.294 --> 00:00:11.050
Reduce doesn't operate on a single value.

4
00:00:11.050 --> 00:00:15.002
Reduce operates on two values at a time.

5
00:00:15.002 --> 00:00:17.490
That's a big difference between map and
filter.

6
00:00:17.490 --> 00:00:20.242
With map and filter,
they only operate on a single value.

7
00:00:20.242 --> 00:00:23.908
Reduce always operates
on two values at a time.

8
00:00:23.908 --> 00:00:28.613
And when I call it a combining operation,
what I mean is we take those two values.

9
00:00:28.613 --> 00:00:34.078
And in some way, shape or form,
we combine them into one.

10
00:00:34.078 --> 00:00:35.054
So, we take values.

11
00:00:35.054 --> 00:00:38.338
We combine them into one and
then we start over.

12
00:00:38.338 --> 00:00:40.790
And we say,
do I have that value plus another?

13
00:00:40.790 --> 00:00:44.431
I need to combine those two and
then that value plus another?

14
00:00:44.431 --> 00:00:46.324
I need to combine those two and

15
00:00:46.324 --> 00:00:51.645
we just keep going through our list until
we don't have any more things to combine.

16
00:00:51.645 --> 00:00:54.104
So at the end result of a reduce,

17
00:00:54.104 --> 00:00:59.486
you typically just have one single
discrete value rather than a list.

18
00:00:59.486 --> 00:01:03.500
Cuz your starting with the first two items
and combining them, and then combining

19
00:01:03.500 --> 00:01:07.061
that one with the next one, and
that one with the next one, and so forth.

20
00:01:07.061 --> 00:01:09.193
And at the end,
you just have the combined value.

21
00:01:09.193 --> 00:01:11.952
You don't have a list anymore.

22
00:01:11.952 --> 00:01:12.968
So, reduce is different.

23
00:01:12.968 --> 00:01:17.182
It doesn't produce a new list,
generally speaking.

24
00:01:19.982 --> 00:01:23.984
&gt;&gt; Kyle Simpson: Reduce is actually,
probably the most powerful of all

25
00:01:23.984 --> 00:01:28.856
the operators and it certainly is
powerful enough that it deserves

26
00:01:28.856 --> 00:01:33.382
the title of the Swiss Army Knife
of functional programming.

27
00:01:33.382 --> 00:01:36.677
Because once you learn how to use reduce,

28
00:01:36.677 --> 00:01:41.777
you start realizing that a bunch
of stuff you do is just a reduce.

29
00:01:41.777 --> 00:01:42.878
It could be done as a reduce.

30
00:01:42.878 --> 00:01:43.799
I could do that as a reduce.

31
00:01:43.799 --> 00:01:44.582
I could do that as a reduce.

32
00:01:44.582 --> 00:01:47.576
We've already had questions in this course
and some people online that have said,

33
00:01:47.576 --> 00:01:48.483
well, what about this?

34
00:01:48.483 --> 00:01:49.056
Is that a reduce?

35
00:01:49.056 --> 00:01:53.781
The answer is yes, because reduce really
is the Swiss Army knife that can do

36
00:01:53.781 --> 00:01:55.668
a bunch of different things.

37
00:01:55.668 --> 00:02:00.160
It is not always that it has to
return a single discreet value.

38
00:02:00.160 --> 00:02:04.802
You can reduce a list to another list.

39
00:02:04.802 --> 00:02:06.749
And counterintuitively,

40
00:02:06.749 --> 00:02:11.663
you can reduce a list to a list that
was even longer than the original.

41
00:02:11.663 --> 00:02:15.764
Because reduce is not really about
reduction, it's really about combining.

42
00:02:22.862 --> 00:02:25.180
&gt;&gt; Kyle Simpson: So, let's look at
building ourselves a reduce utility.

43
00:02:25.180 --> 00:02:29.534
You'll notice that here, my reducer
function which is mult up there.

44
00:02:29.534 --> 00:02:30.820
It takes two parameters,

45
00:02:30.820 --> 00:02:33.864
cuz it doesn't make any sense
to combine a value with itself.

46
00:02:33.864 --> 00:02:35.782
We're always combining two values.

47
00:02:35.782 --> 00:02:39.337
That's a different shape and that's gonna
be really important to keep in your head

48
00:02:39.337 --> 00:02:41.214
as we finish through
the end of this course,

49
00:02:41.214 --> 00:02:42.915
you're gonna wanna keep that in mind.

50
00:02:42.915 --> 00:02:45.696
That's a different kind of shape and
a different kind of operation.

51
00:02:45.696 --> 00:02:46.871
We're taking two values.

52
00:02:46.871 --> 00:02:48.250
In this case, we're multiplying together.

53
00:02:48.250 --> 00:02:49.790
That's how we're combining them.

54
00:02:49.790 --> 00:02:55.456
How much you combine two strings?

55
00:03:02.372 --> 00:03:05.160
&gt;&gt; Kyle Simpson: If I had a call
to a function called foo and

56
00:03:05.160 --> 00:03:10.245
it took two individual strings as
arguments and I wanted to return a single

57
00:03:10.245 --> 00:03:15.180
value back, what's an example of
ways that I could combine those two?

58
00:03:19.168 --> 00:03:21.351
&gt;&gt; Kyle Simpson: I could concatenate
the two strings together.

59
00:03:21.351 --> 00:03:25.071
That would be a way of combining them,
but I can even get more sophisticated.

60
00:03:25.071 --> 00:03:26.304
Here's my Swiss Army knife.

61
00:03:26.304 --> 00:03:30.283
I could say, the combination
of these two is I'm just gonna

62
00:03:30.283 --> 00:03:33.952
pick the longer of the two and
throw the other one away.

63
00:03:33.952 --> 00:03:38.076
That's still a valid way of
describing the combination.

64
00:03:38.076 --> 00:03:42.989
Combining these two individual values
could be combining them into an array

65
00:03:42.989 --> 00:03:44.226
of the two values.

66
00:03:44.226 --> 00:03:46.408
That's a reasonable way to combine them.

67
00:03:46.408 --> 00:03:47.461
There's lots and

68
00:03:47.461 --> 00:03:52.242
lots, and probably infinite number of
ways that any two values can be combined.

69
00:03:52.242 --> 00:03:55.517
And that's what we mean when we say
that it's such a Swiss Army knife,

70
00:03:55.517 --> 00:03:58.309
because you can do whatever you
want with those two values.

71
00:03:58.309 --> 00:04:00.730
What would you do if
you had two functions?

72
00:04:00.730 --> 00:04:08.784
How might you combine two functions?

73
00:04:11.008 --> 00:04:13.258
&gt;&gt; Kyle Simpson: A composition.

74
00:04:13.258 --> 00:04:15.973
We had somebody asked that earlier,
as well.

75
00:04:15.973 --> 00:04:18.528
Compose and pipe.

76
00:04:18.528 --> 00:04:21.193
Those are fundamentally reductions.

77
00:04:21.193 --> 00:04:25.966
A list of functions that we compose is the
same thing as a list of functions that we

78
00:04:25.966 --> 00:04:29.890
reduce where the reduction is
composed the two items together and

79
00:04:29.890 --> 00:04:33.250
then compose two more,
and compose two more.

80
00:04:33.250 --> 00:04:37.090
Call one,
give its output is the input to the next.

81
00:04:37.090 --> 00:04:37.850
That's what it is.

82
00:04:40.080 --> 00:04:42.890
So our combined utility here
needs to start within a list,

83
00:04:42.890 --> 00:04:45.370
arr and the reducer function.

84
00:04:45.370 --> 00:04:49.577
But we also typically will
provide an initial value.

85
00:04:49.577 --> 00:04:50.714
That's important.

86
00:04:50.714 --> 00:04:52.074
We provide an initial value.

87
00:04:52.074 --> 00:04:56.371
Because sometimes your reduction
since it's operating on two things,

88
00:04:56.371 --> 00:04:59.970
sometimes you need to have
an initial value for one of those.

89
00:04:59.970 --> 00:05:01.281
And you therefore,

90
00:05:01.281 --> 00:05:06.156
start the reduction with the first item
in the list plus the initial value.

91
00:05:06.156 --> 00:05:08.622
So, my reduction takes
the first value in the list.

92
00:05:08.622 --> 00:05:12.914
The initial value and it combines them,
and then goes to the second, and combines,

93
00:05:12.914 --> 00:05:13.648
and so forth.

94
00:05:13.648 --> 00:05:18.720
On the other hand, sometimes you don't
need to provide an initial value at all.

95
00:05:18.720 --> 00:05:23.130
Because the first item in the list
can be taken as the initial value and

96
00:05:23.130 --> 00:05:27.159
we can start the reduction with
the second item on the list, and

97
00:05:27.159 --> 00:05:29.230
just start combining that way.

98
00:05:29.230 --> 00:05:32.932
You'll have both of those cases
arise in your programming.

99
00:05:32.932 --> 00:05:35.537
Sometimes, you'll need an initial
value and sometimes you won't.

100
00:05:37.851 --> 00:05:42.015
&gt;&gt; Kyle Simpson: Some utilities
will allow that to be optional.

101
00:05:42.015 --> 00:05:46.280
Some utilities require you
to provide an initial value.

102
00:05:46.280 --> 00:05:50.870
And in those cases,
if you have to provide an initial value,

103
00:05:50.870 --> 00:05:55.910
what you can do is actually pass in
the first value of the list as your

104
00:05:55.910 --> 00:06:00.608
initial value and
then start your reduction at position two.

105
00:06:00.608 --> 00:06:04.299
So, some utilities are smart enough to
let that be optional and some aren't.

106
00:06:05.974 --> 00:06:12.354
&gt;&gt; Kyle Simpson: Here, my combine against
a list of numbers where I'm multiplying.

107
00:06:12.354 --> 00:06:15.783
I multiply 1 times 2 times 4 times 5.

108
00:06:15.783 --> 00:06:21.255
Do I need an initial value there for
a multiplication of numbers?

109
00:06:23.534 --> 00:06:25.745
&gt;&gt; Kyle Simpson: I use the initial
value 1, but did I need to?

110
00:06:28.380 --> 00:06:30.216
&gt;&gt; Kyle Simpson: There,
it would have been sufficient for

111
00:06:30.216 --> 00:06:33.213
me to just multiply the numbers
together without an initial value.

112
00:06:33.213 --> 00:06:37.706
My utility doesn't support that,
cuz it's a simplified utility.

113
00:06:37.706 --> 00:06:42.554
But if my utility did make that one
optional, I could have left it off.

114
00:06:42.554 --> 00:06:49.178
But here's an example of a reduction
that requires an initial value.

115
00:06:49.178 --> 00:06:53.968
Cuz here,
I wanna reduce with my acronym reducer.

116
00:06:53.968 --> 00:06:59.582
Each time it gets call, that's gonna be
provided a string like a concatenated or

117
00:06:59.582 --> 00:07:02.816
a growing string and
then a word to add on to it.

118
00:07:02.816 --> 00:07:06.439
But you'll notice I wanna take just
the first character of each string and

119
00:07:06.439 --> 00:07:08.609
combine it in, cuz I'm making an acronym.

120
00:07:08.609 --> 00:07:14.264
What would happen if I left off the
initial value of empty string down there?

121
00:07:14.264 --> 00:07:15.742
What would be the end result?

122
00:07:25.708 --> 00:07:28.427
&gt;&gt; Speaker 2: You'd end up with undefined
at the beginning of you string?

123
00:07:28.427 --> 00:07:29.084
&gt;&gt; Kyle Simpson: No.

124
00:07:29.084 --> 00:07:33.116
If we left off the initial value,
the default behavior is to start

125
00:07:33.116 --> 00:07:37.458
with the first item as the initial
value which is the word Functional.

126
00:07:37.458 --> 00:07:40.852
And we'd start the reduction at
the second one, which is the word Lights.

127
00:07:40.852 --> 00:07:43.886
So, what would our
ending result string be?

128
00:07:50.414 --> 00:07:56.261
&gt;&gt; Kyle Simpson: To be Functional LJS
instead of FLJS, cuz we'd start with that.

129
00:07:56.261 --> 00:07:59.748
That would come in as string in
our first called acronym and

130
00:07:59.748 --> 00:08:04.446
we keep that whole thing and then we take
word.charAt which is the word Light,

131
00:08:04.446 --> 00:08:07.314
we'd be just taking L and
starting to put it on.

132
00:08:07.314 --> 00:08:09.933
So, we just have functional LJS.

133
00:08:09.933 --> 00:08:14.643
So, here's an example where we really
do legitimately need an initial value.

134
00:08:14.643 --> 00:08:18.116
The previous slide,
we didn't need an initial value.

135
00:08:18.116 --> 00:08:20.807
You'll have both of those cases
that you run across in your coding.

136
00:08:23.185 --> 00:08:25.677
&gt;&gt; Speaker 2: If you
were to set charAt one,

137
00:08:25.677 --> 00:08:31.671
would it give you the same thing as
if you hadn't set the initial value?

138
00:08:31.671 --> 00:08:33.723
Would it still give you Functional LJS?

139
00:08:33.723 --> 00:08:35.883
&gt;&gt; Kyle Simpson: CharAt is still
gonna try to get the first,

140
00:08:35.883 --> 00:08:39.666
I mean, is gonna try to get a character or
whatever position you asked for.

141
00:08:39.666 --> 00:08:43.202
So if you said charAt of one and

142
00:08:43.202 --> 00:08:49.435
you left the empty string,
you'd end up with UIAT.

143
00:08:49.435 --> 00:08:51.121
The second character of each of those.

144
00:08:51.121 --> 00:08:51.663
&gt;&gt; Speaker 2: I see. Yeah.
&gt;&gt; Kyle Simpson: And

145
00:08:51.663 --> 00:08:55.353
if you left off the initial
value empty string,

146
00:08:55.353 --> 00:08:58.312
you would end up with Functional IAT.

147
00:08:58.312 --> 00:09:05.260
What's an example of reducing
across a list of functions?

148
00:09:05.260 --> 00:09:07.740
How about composing functions together?

149
00:09:07.740 --> 00:09:11.644
What's an example of reducing
across a list of promises?

150
00:09:15.954 --> 00:09:18.998
&gt;&gt; Kyle Simpson: You could compose the
promises together by chaining one promise

151
00:09:18.998 --> 00:09:20.868
onto the next one and onto the next one.

152
00:09:20.868 --> 00:09:27.211
And now you'd have a chain,
a series of promises together.

153
00:09:27.211 --> 00:09:31.826
[COUGH] We're coming up on a break here,
but I just wanna leave you with

154
00:09:31.826 --> 00:09:35.664
a thought before that break
that these list operations.

155
00:09:35.664 --> 00:09:39.872
We've been illustrating
them based on arrays.

156
00:09:39.872 --> 00:09:44.692
But really and truly,
these are data structure operations.

157
00:09:44.692 --> 00:09:48.608
And so that all these concepts
that we have been doing

158
00:09:48.608 --> 00:09:52.347
could be generalized to
an object of properties or

159
00:09:52.347 --> 00:09:58.412
to a tree where your different values are
nodes in the tree, or things like that.

160
00:09:58.412 --> 00:10:02.334
As a matter of fact, I have a whole
section in my Functional Light JS book in

161
00:10:02.334 --> 00:10:04.059
the chapter on this operation.

162
00:10:04.059 --> 00:10:08.832
There's a whole section at the end
which goes and implements map, produce,

163
00:10:08.832 --> 00:10:11.403
filter against a binary search tree where

164
00:10:11.403 --> 00:10:14.576
each item that you're
visiting is a node in a tree.

165
00:10:14.576 --> 00:10:16.585
And it's gonna go depth first and

166
00:10:16.585 --> 00:10:21.112
through the tree doing in order universal
through the tree, and so forth.

167
00:10:21.112 --> 00:10:26.622
So you can generalize these ideas
to pretty much any data structure,

168
00:10:26.622 --> 00:10:31.183
but this is what I want you to
contemplate over the break.

169
00:10:31.183 --> 00:10:35.370
Data structures don't always have
to look like data structures.

170
00:10:35.370 --> 00:10:41.410
Sometimes the data structure that you're
gonna operate on is your own code and

171
00:10:41.410 --> 00:10:44.888
I know that might sound awfully strange,
but

172
00:10:44.888 --> 00:10:50.582
we are gonna be working on an exercise
later towards the end of the course.

173
00:10:50.582 --> 00:10:52.719
That's gonna give you a chance
to practice with that, so

174
00:10:52.719 --> 00:10:53.886
I just want you to chew on that.

175
00:10:53.886 --> 00:10:58.873
What would it mean to treat part of
my code, the statements of my code as

176
00:10:58.873 --> 00:11:03.872
a data structure that I wanted to
perform a set of operations against?

177
00:11:03.872 --> 00:11:04.754
What would that even mean?

178
00:11:04.754 --> 00:11:10.136
It sounds very meta, so I just want you to
chew on that and we'll take this break.

179
00:11:10.136 --> 00:11:11.515
When we come back,

180
00:11:11.515 --> 00:11:16.870
we'll work on an excercise to practice
a bunch of these list operations.

