WEBVTT

1
00:00:00.420 --> 00:00:04.650
&gt;&gt; Kyle: Okay, so that's been
the iterative and then recursive approach.

2
00:00:04.650 --> 00:00:09.630
And I'm going to use that same inspiration
of that algorithm for my third and

3
00:00:09.630 --> 00:00:16.020
final approach to this which is, I'm going
to implement that with a list operation.

4
00:00:17.410 --> 00:00:23.548
So if I have function addn and
I bring in a list of functions.

5
00:00:23.548 --> 00:00:25.530
[INAUDIBLE] further up.

6
00:00:25.530 --> 00:00:27.110
Bring in a list of functions.

7
00:00:27.110 --> 00:00:32.230
[COUGH]
Essentially what I'm doing is

8
00:00:32.230 --> 00:00:34.820
I am taking two functions and
putting them together.

9
00:00:34.820 --> 00:00:38.150
And then taking two functions and putting
them together, and taking two functions.

10
00:00:38.150 --> 00:00:41.660
Is that sound like a list operation
that we've talked about so far?

11
00:00:42.870 --> 00:00:48.840
All right, so let's try to write this
function using the reduceList operation,

12
00:00:48.840 --> 00:00:51.390
cuz we're taking two items,
putting them together.

13
00:00:51.390 --> 00:00:53.170
Two more items, putting them together.

14
00:00:53.170 --> 00:00:55.330
That's fundamentally a reduce.

15
00:00:55.330 --> 00:00:58.812
So, [COUGH] I will call

16
00:00:58.812 --> 00:01:06.090
the fns.reduce,
&gt;&gt; Kyle: And

17
00:01:06.090 --> 00:01:09.245
let's stop for
a moment before I even write it and think,

18
00:01:09.245 --> 00:01:11.700
what is the end result
of my reduce gonna be?

19
00:01:11.700 --> 00:01:15.130
If I take two functions and
make them into another and take two and

20
00:01:15.130 --> 00:01:16.570
make them into another.

21
00:01:16.570 --> 00:01:18.532
At the end of that reduce, what do I have?

22
00:01:22.504 --> 00:01:24.880
&gt;&gt; Kyle: I have one giant function, right?

23
00:01:24.880 --> 00:01:29.769
I haven't actually computed it yet,
so to do the actual computation,

24
00:01:29.769 --> 00:01:34.919
I need to not forget to put that last
execution in there, of that function.

25
00:01:34.919 --> 00:01:40.206
Now my reducer is gonna take, and
we typically call the reducer,

26
00:01:40.206 --> 00:01:46.184
we typically call those parameters acc and
v, at least to start out with.

27
00:01:46.184 --> 00:01:50.299
[COUGH] I'm going to rename those in
a moment but if we think about it,

28
00:01:50.299 --> 00:01:55.285
my reducer is taking a running function
that's getting bigger, and bigger, and

29
00:01:55.285 --> 00:01:58.560
bigger, and
combining it with this other function.

30
00:01:58.560 --> 00:02:02.977
So acc can really be though
as is composedFn, And

31
00:02:02.977 --> 00:02:05.470
then v would just be the fn.

32
00:02:06.670 --> 00:02:13.060
And the new combined value is
a single function that calls addn.

33
00:02:13.060 --> 00:02:18.741
So I need to make a function that

34
00:02:18.741 --> 00:02:25.528
calls add2 with composedFn and fn.

35
00:02:32.135 --> 00:02:37.520
&gt;&gt; Kyle: So
that is-clean up some of my spacing here.

36
00:02:40.130 --> 00:02:43.370
That should be the final
implementation for addn.

37
00:02:43.370 --> 00:02:46.490
There's no base condition
to concern ourselves with.

38
00:02:46.490 --> 00:02:48.030
There's no for loop or anything,

39
00:02:48.030 --> 00:02:53.620
we're just gonna let the reduce
operation model that iteration.

40
00:02:53.620 --> 00:02:54.226
So this is,

41
00:02:54.226 --> 00:02:58.485
has more a kind of the iterative approach
than in does with the recursive approach.

42
00:02:58.485 --> 00:03:01.701
This is not resurging but
it is a nice simple and

43
00:03:01.701 --> 00:03:05.668
declarative way of saying,
what we want to have happen.

44
00:03:05.668 --> 00:03:09.330
Which is we want this list of
functions to all compose themselves.

45
00:03:09.330 --> 00:03:13.030
So I will take that and
double check that I didn't mess it up.

46
00:03:16.698 --> 00:03:18.777
&gt;&gt; Kyle: And there we got the 35.

47
00:03:21.643 --> 00:03:22.415
&gt;&gt; Kyle: [COUGH].

48
00:03:25.104 --> 00:03:29.781
&gt;&gt; Kyle: Somebody's asking in
chat about the recursive one, so

49
00:03:29.781 --> 00:03:34.810
I just wanna go back to
the recursive one for a moment.

50
00:03:34.810 --> 00:03:39.366
The base condition is that
fns.length is equal to 0.

51
00:03:39.366 --> 00:03:43.593
So I'm only running this recursive command

52
00:03:43.593 --> 00:03:48.870
if the item is less than 0,
I mean greater than 0.

53
00:03:48.870 --> 00:03:54.829
So I could've re-written that as;
if fns.length is equal to 0 and

54
00:03:54.829 --> 00:03:59.160
done this command,
that's our base condition.

55
00:04:00.660 --> 00:04:04.890
And then left the return
statement by itself,

56
00:04:04.890 --> 00:04:06.240
if we're not in the base condition.

57
00:04:06.240 --> 00:04:09.140
So maybe that's a cleaner
way of expressing that,

58
00:04:09.140 --> 00:04:12.050
but looks a little bit more like
the recursion you're used to writing.

59
00:04:20.622 --> 00:04:26.985
&gt;&gt; Kyle: Okay, so to item 6 in our readme,
start with an array of odd and

60
00:04:26.985 --> 00:04:30.720
even numbers with some duplicates.

61
00:04:30.720 --> 00:04:34.571
So I'm gonna take out this one for now.

62
00:04:37.036 --> 00:04:41.550
&gt;&gt; Kyle: And I'm just gonna make a list
of some random numbers that I'll make up.

63
00:04:41.550 --> 00:04:46.602
So let's say 1, 3, 4, 2,

64
00:04:46.602 --> 00:04:51.838
0, 9, 8, 3, 2, 1, 6,

65
00:04:51.838 --> 00:04:57.482
4, 9, 3, 2, 3, 8, 10.

66
00:04:57.482 --> 00:04:58.636
Just made up some numbers.

67
00:04:58.636 --> 00:05:01.440
Have no idea what the end result
of those numbers is gonna be.

68
00:05:02.560 --> 00:05:08.690
But then it says to trim those down
to have only their unique values.

69
00:05:08.690 --> 00:05:11.050
So essentially we need to
make a unique function.

70
00:05:13.210 --> 00:05:16.110
So there's two different ways that
we could go about doing the unique.

71
00:05:16.110 --> 00:05:19.550
You might have started thinking,
well that seems like a filter operation.

72
00:05:19.550 --> 00:05:22.190
If I have a list of repeated numbers and

73
00:05:22.190 --> 00:05:27.010
I need to trim it down to not
have any of those repeats.

74
00:05:27.010 --> 00:05:29.300
I might just wanna filter that last.

75
00:05:29.300 --> 00:05:33.550
The problem with the filter is that
you only receive the single value,

76
00:05:33.550 --> 00:05:36.370
and if you're only
receiving a single value,

77
00:05:36.370 --> 00:05:40.850
you can't answer the question of,
have I seen this value before?

78
00:05:41.880 --> 00:05:46.060
It's designed to make the decision
entirely based only on that value.

79
00:05:46.060 --> 00:05:49.640
So filter by itself is not
a particularly good approach.

80
00:05:49.640 --> 00:05:50.840
Although I'm gonna leave it here and

81
00:05:50.840 --> 00:05:54.600
come back because there is a trick
that we can use for filter.

82
00:05:54.600 --> 00:05:59.730
Instead, what we really need to do is
think about this in more general terms.

83
00:05:59.730 --> 00:06:05.560
We're gonna need to compare the value to
something else which is the running list.

84
00:06:05.560 --> 00:06:06.890
And that should throw up

85
00:06:08.070 --> 00:06:12.250
an alarm bell in your head that we wanna
use the reduce utility to do that.

86
00:06:12.250 --> 00:06:14.880
Because the reduce utility can be

87
00:06:14.880 --> 00:06:18.440
started with an initial
value that's an empty list.

88
00:06:18.440 --> 00:06:21.960
And then we can build that
list up a little at a time.

89
00:06:21.960 --> 00:06:27.010
So if I make a reduce call here,
my reducer

90
00:06:27.010 --> 00:06:31.570
is gonna have a running newList and
a value.

91
00:06:32.620 --> 00:06:35.110
And I need to provide
an initial value here.

92
00:06:35.110 --> 00:06:37.620
This one I definitely need initial value.

93
00:06:37.620 --> 00:06:39.160
I'll start it out as and empty array.

94
00:06:40.530 --> 00:06:46.450
Now in the case that v is not already
in the new list then I wanna add it.

95
00:06:46.450 --> 00:06:52.470
So I'm gonna say if
newList.indexOf(v) = -1,

96
00:06:52.470 --> 00:06:58.460
meaning I did not find it,
then we wanna add it to the newList.

97
00:07:04.583 --> 00:07:08.117
&gt;&gt; Kyle: And then of course we need to
always keep returning that reference to

98
00:07:08.117 --> 00:07:08.680
newList.

99
00:07:09.800 --> 00:07:14.500
So we are only going to put it in if
it passes that check, if you will.

100
00:07:18.520 --> 00:07:22.620
Now there is something to
point out here which is

101
00:07:22.620 --> 00:07:27.770
we are mutating the new list
array that was passed into us.

102
00:07:27.770 --> 00:07:30.560
That should set off a little
alarm bell in your head.

103
00:07:30.560 --> 00:07:34.180
Wait a minute, we aren't supposed
to do that kind of thing.

104
00:07:34.180 --> 00:07:37.100
We don't really actually
control that list.

105
00:07:37.100 --> 00:07:39.280
That is being passed into us.

106
00:07:39.280 --> 00:07:43.650
And because we don't we probably
should be more careful and

107
00:07:43.650 --> 00:07:46.480
not assume that it's okay to mutate.

108
00:07:46.480 --> 00:07:49.880
So a nice simple way of
doing that is to just simply

109
00:07:49.880 --> 00:07:55.690
concatenate the value
instead of pushing it.

110
00:07:55.690 --> 00:07:59.140
Concat will create a whole new list
with that value added on to the end.

111
00:08:06.980 --> 00:08:11.900
If we run this, just to test and make sure
that it I didn't make a mistake there.

112
00:08:13.210 --> 00:08:15.300
We get down to that list of values.

113
00:08:16.880 --> 00:08:20.930
Now the next item in our readme,

114
00:08:20.930 --> 00:08:26.090
item 7 says, filter that array
to only have even numbers in it.

115
00:08:26.090 --> 00:08:27.110
Speaking of filter,

116
00:08:27.110 --> 00:08:30.930
I mentioned there was trick where we
could've done this uniqueness with filter.

117
00:08:30.930 --> 00:08:33.450
Let me show you how we could
have done it with filter.

118
00:08:34.600 --> 00:08:37.970
In JavaScript specifically
the built in filter,

119
00:08:37.970 --> 00:08:42.620
you get more arguments past
a filter than just the value.

120
00:08:42.620 --> 00:08:47.520
Each one of these utilities will
also pass standard the index at

121
00:08:47.520 --> 00:08:52.560
which that item has been found and
the array that you're operating on.

122
00:08:53.870 --> 00:08:58.130
Those are arguments that JavaScript's
filter automatically passes in.

123
00:08:58.130 --> 00:09:02.090
Armed with those additional pieces
of information, I could say,

124
00:09:03.270 --> 00:09:08.240
if the index that I found
this value at is equal to

125
00:09:08.240 --> 00:09:14.340
the return value of calling indexOf,
cuz index always works from left to right.

126
00:09:14.340 --> 00:09:18.580
Then I know that this is the first time
I've seen that value in the list and

127
00:09:18.580 --> 00:09:20.440
it's okay for me to put it in.

128
00:09:20.440 --> 00:09:25.230
But if it's not equal, then it must
be one of the duplicate references in

129
00:09:25.230 --> 00:09:26.710
the list and so I shouldn't put it in.

130
00:09:27.950 --> 00:09:31.045
So the trick is to say if idx =

131
00:09:31.045 --> 00:09:38.890
arr.indexOf(v) then I wanna
put it into the list.

132
00:09:38.890 --> 00:09:43.170
So that's return true,
otherwise return false.

133
00:09:45.000 --> 00:09:50.600
Either of those two approaches would
have been fine to do you making,

134
00:09:50.600 --> 00:09:55.010
I think the reduced one
is a little bit clear.

135
00:09:55.010 --> 00:09:56.140
This is using a trick.

136
00:09:57.690 --> 00:09:59.090
So I'm gonna leave that one off.

137
00:10:00.600 --> 00:10:04.360
But we do wanna filter
our newly uniqued list.

138
00:10:04.360 --> 00:10:06.590
We do wanna filter it down to,

139
00:10:06.590 --> 00:10:11.963
it says to include only the even
numbers in it, so let's call a filter.

140
00:10:11.963 --> 00:10:14.591
And we'll give it a predicate function,
and

141
00:10:14.591 --> 00:10:18.690
that predicate function needs
to return true if it's even.

142
00:10:18.690 --> 00:10:24.745
And that's the same as if
calling mod 2 on it returns 0.

143
00:10:24.745 --> 00:10:28.999
So let's double check that our list of
numbers is now down to the even numbers.

144
00:10:40.574 --> 00:10:45.116
&gt;&gt; Kyle: All right,
now the read me says in item 8, and

145
00:10:45.116 --> 00:10:52.240
we wanna take the list of values and
produce a list of functions.

146
00:10:52.240 --> 00:10:57.270
So the hint there is that we're
gonna wanna call the map utility.

147
00:10:57.270 --> 00:11:01.390
And normally, I would say we're
just gonna receive the value and

148
00:11:01.390 --> 00:11:05.440
then we wanna make a function
that will return that value.

149
00:11:07.120 --> 00:11:10.760
But we already have
a utility that does that.

150
00:11:10.760 --> 00:11:13.410
That's the constant utility.

151
00:11:16.027 --> 00:11:18.108
&gt;&gt; Kyle: And
then when I look at that, I say well,

152
00:11:18.108 --> 00:11:20.760
that looks like a point to
me that could be point 3.

153
00:11:20.760 --> 00:11:25.000
So why don't I just use
constant as my mapper function.

154
00:11:27.723 --> 00:11:30.614
&gt;&gt; Kyle: So now we're gonna have produced

155
00:11:30.614 --> 00:11:36.170
a list of numbers that then
became a list of functions.

156
00:11:36.170 --> 00:11:38.670
Given that final result list of functions,

157
00:11:38.670 --> 00:11:41.900
we should now be able to
pass that array into add in.

158
00:11:44.300 --> 00:11:48.000
And if my quick mental math is correct,

159
00:11:48.000 --> 00:11:50.464
I believe we should end
up with the value 52.

160
00:11:51.730 --> 00:11:58.980
So crossing my fingers with
live coding again, there we go.

161
00:12:05.328 --> 00:12:07.060
&gt;&gt; Kyle: Bring back up the final solution.

162
00:12:09.655 --> 00:12:13.179
&gt;&gt; Kyle: What questions can I
answer about exercise seven?

163
00:12:13.179 --> 00:12:16.610
&gt;&gt; Speaker 2: [COUGH]
Do you see any value

164
00:12:17.640 --> 00:12:22.380
in composing those function together,

165
00:12:22.380 --> 00:12:25.580
rather than chaining them to
reduce the filter and map?

166
00:12:25.580 --> 00:12:26.845
&gt;&gt; Kyle: Which function are you
talking about composing?

167
00:12:26.845 --> 00:12:29.630
&gt;&gt; Speaker 2: The reduce, filter, and map.

168
00:12:29.630 --> 00:12:31.915
So isn't taking an input of numbers and

169
00:12:31.915 --> 00:12:35.550
then we're passing them through
a series of functions, right?

170
00:12:35.550 --> 00:12:36.550
&gt;&gt; Kyle: Yep.

171
00:12:36.550 --> 00:12:38.930
&gt;&gt; Speaker 2: Do you see
a value in composing those,

172
00:12:38.930 --> 00:12:40.910
rather than chaining them like that?

173
00:12:40.910 --> 00:12:43.381
&gt;&gt; Kyle: There is definitely
a benefit to doing so.

174
00:12:43.381 --> 00:12:47.401
It's interesting that you bring this up,
because that's a good segway to what

175
00:12:47.401 --> 00:12:50.870
our next unit,
our next units of discussion are gonna be.

176
00:12:50.870 --> 00:12:51.850
But since you bring it up,

177
00:12:51.850 --> 00:12:56.140
I'll just ask look at the shape
of each of those functions.

178
00:12:57.290 --> 00:13:01.926
Look at the shape of constant,
it takes in a value and returns a value.

179
00:13:01.926 --> 00:13:05.536
And compare that to the shape
of the predicate function which

180
00:13:05.536 --> 00:13:08.190
takes in a value and returns a true/false.

181
00:13:08.190 --> 00:13:12.470
And then compare that to the shape of
the reducer, which takes in two values and

182
00:13:12.470 --> 00:13:14.350
returns a single value.

183
00:13:14.350 --> 00:13:19.350
There's three functions have different
shapes, if you were to try to

184
00:13:19.350 --> 00:13:24.010
compose three functions together that
have different shapes, is not gonna work.

185
00:13:25.340 --> 00:13:29.530
So it would be nice if there is
a way to compose these together but

186
00:13:29.530 --> 00:13:32.500
giving that we currently know
right now in the course.

187
00:13:32.500 --> 00:13:33.930
About composition,

188
00:13:33.930 --> 00:13:37.750
we only know how to compose
functions that have the same shape.

189
00:13:39.320 --> 00:13:44.050
So now putting a little mental bookmark
there we're later gonna talk about how to

190
00:13:44.050 --> 00:13:46.280
compose functions that
have different shapes.

191
00:13:46.280 --> 00:13:47.020
So that's where we're heading.

