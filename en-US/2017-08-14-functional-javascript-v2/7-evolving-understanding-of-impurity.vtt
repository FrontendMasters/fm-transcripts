WEBVTT

1
00:00:00.490 --> 00:00:02.200
&gt;&gt; Kyle Simpson: I wanna dig
in a little bit more and

2
00:00:02.200 --> 00:00:06.700
try to evolve our understanding
of function purity even further.

3
00:00:06.700 --> 00:00:12.040
Here's a function foo that takes a direct
input x and it references a variable

4
00:00:12.040 --> 00:00:16.600
y from outside of itself, it's using
a const y, we're gonna get to const later.

5
00:00:18.020 --> 00:00:25.030
But let's just say for now const creates
a y that is not going to ever be changed.

6
00:00:25.030 --> 00:00:29.670
So my question to you is based on our
current understanding of function

7
00:00:29.670 --> 00:00:34.350
purity is foo a pure function?

8
00:00:36.450 --> 00:00:38.518
&gt;&gt; Speaker 2: I'm going to say no.

9
00:00:38.518 --> 00:00:41.080
&gt;&gt; Kyle Simpson: Okay, so I'm hearing no.

10
00:00:41.080 --> 00:00:44.355
We'll ask you to explain that no in
a moment, does anybody disagree and

11
00:00:44.355 --> 00:00:45.891
think that it is a pure function?

12
00:00:50.283 --> 00:00:54.850
&gt;&gt; Kyle Simpson: It's not, because it's
relying on something not being passed in.

13
00:00:54.850 --> 00:00:59.480
So based on our original definition the
red side of the rubiks cube we say that it

14
00:00:59.480 --> 00:01:01.600
can access something
outside of it self right?

15
00:01:03.480 --> 00:01:07.400
But that second definition
I just gave you was .well

16
00:01:07.400 --> 00:01:12.750
actually the important part of function
period could be more accurately stated as

17
00:01:12.750 --> 00:01:16.210
given the same input we
always get the same output.

18
00:01:16.210 --> 00:01:19.170
Given the same input here,
are we always gonna get the same output?

19
00:01:25.730 --> 00:01:29.090
Is there anything that could happen to
this program that would prevent us from

20
00:01:29.090 --> 00:01:32.220
getting two whenever we call one.

21
00:01:32.220 --> 00:01:33.979
Whenever we call it with the value 1.

22
00:01:40.777 --> 00:01:43.010
&gt;&gt; Speaker 2: Aside from someone
changing the value of y.

23
00:01:43.010 --> 00:01:46.040
&gt;&gt; Kyle Simpson: No, I'm saying
given the state of this code, and

24
00:01:46.040 --> 00:01:47.899
const y can't be reassigned.

25
00:01:49.020 --> 00:01:53.770
So given the state of the code as written,
if we just called line 7 over,

26
00:01:53.770 --> 00:01:57.170
over, and over again, is there anything
that could happen that would change

27
00:01:57.170 --> 00:01:59.550
to make it not return the value to?

28
00:01:59.550 --> 00:02:03.300
&gt;&gt; Speaker 2: Couldn't you execute that
function somewhere else in another script

29
00:02:03.300 --> 00:02:07.560
or import a different script or
something like that where y has changed?

30
00:02:07.560 --> 00:02:10.080
&gt;&gt; Kyle Simpson: Well fortunately,
we talked about lexical scope

31
00:02:11.940 --> 00:02:15.420
in the deep JavaScript foundations course.

32
00:02:15.420 --> 00:02:20.537
Lexical scope says, this foo as
written here will close over that y,

33
00:02:20.537 --> 00:02:23.194
and that y is never going to change.

34
00:02:25.545 --> 00:02:29.227
&gt;&gt; Kyle Simpson: So it doesn't matter if
we passed foo around as an event handler

35
00:02:29.227 --> 00:02:31.945
or whatever,
it's closed over that exact y.

36
00:02:39.453 --> 00:02:43.143
&gt;&gt; Kyle Simpson: There's nothing about
this program as written that could happen

37
00:02:43.143 --> 00:02:46.170
at runtime that would change
the behavior of line 7.

38
00:02:46.170 --> 00:02:54.000
Going to run that way every single
time from that perspective,

39
00:02:54.000 --> 00:02:59.726
from the blue side of the rubics cube
then, foo acts as a pure function.

40
00:02:59.726 --> 00:03:06.763
What about this code, we have a foo
function that calls bar with x, and

41
00:03:06.763 --> 00:03:12.750
bar takes in an input and
computes an output and returns it.

42
00:03:15.612 --> 00:03:19.259
&gt;&gt; Kyle Simpson: Let's first ask,
is bar a peer function?

43
00:03:19.259 --> 00:03:19.759
Yes.

44
00:03:21.407 --> 00:03:24.430
&gt;&gt; Kyle Simpson: Somebody tell
me why bar is a pure function.

45
00:03:24.430 --> 00:03:26.720
&gt;&gt; Speaker 2: Cuz it's not usually
in the [INAUDIBLE] side scope.

46
00:03:26.720 --> 00:03:28.410
&gt;&gt; Kyle Simpson: That's
one way of stating it but

47
00:03:28.410 --> 00:03:31.320
what's our new evolved definition for
a pure function?

48
00:03:31.320 --> 00:03:33.640
&gt;&gt; Speaker 3: It will return
the same thing every time it's run.

49
00:03:33.640 --> 00:03:35.980
&gt;&gt; Kyle Simpson: Given a bar
function written like that,

50
00:03:35.980 --> 00:03:39.459
if I pump in the value 11,
I'm always gonna get 12 out right?

51
00:03:40.810 --> 00:03:44.880
So given the same inputs I'm always
gonna get the same output, so

52
00:03:44.880 --> 00:03:46.695
if bar is pure that's a good start.

53
00:03:46.695 --> 00:03:50.430
Cuz if bar was not pure we could
immediately say that foo is not pure.

54
00:03:52.560 --> 00:03:55.631
Bar's pure, now let's talk about foo,

55
00:03:55.631 --> 00:03:59.682
is foo satisfying our
definition of function purity?

56
00:04:08.837 --> 00:04:10.864
&gt;&gt; Kyle Simpson: Given
what we see written here,

57
00:04:10.864 --> 00:04:15.910
every time I call foo with value one,
I'm always gonna get value two out right?

58
00:04:15.910 --> 00:04:22.980
As a matter of fact there's really only
one thing that could possibly change here

59
00:04:22.980 --> 00:04:28.120
that would effect the would
be if somebody redefined bar.

60
00:04:30.270 --> 00:04:33.210
If somebody took the identifier bar and
redefined it to point to

61
00:04:33.210 --> 00:04:36.290
a different function,
all of a sudden we get a different output.

62
00:04:36.290 --> 00:04:40.590
We do not see that happening so
given what we can see in this program.

63
00:04:40.590 --> 00:04:44.958
The function foo is satisfying out
definition of function purity.

64
00:04:47.003 --> 00:04:50.307
&gt;&gt; Kyle Simpson: But this is starting
to introduce, and this should feel

65
00:04:50.307 --> 00:04:55.740
uncomfortable, I'm actually intentionally
creating something for you to rustle with.

66
00:04:55.740 --> 00:04:58.900
So don't feel like you're the weird
one out that doesn't understand

67
00:04:58.900 --> 00:04:59.510
what's going on.

68
00:04:59.510 --> 00:05:02.470
This is intentional,
I'm trying to create some tension here, so

69
00:05:02.470 --> 00:05:04.140
that you have to wrestle
with this concept.

70
00:05:06.790 --> 00:05:10.080
Our initial definition would've
told us it's impure cause'

71
00:05:10.080 --> 00:05:12.900
it references a variable
outside of itself.

72
00:05:12.900 --> 00:05:17.360
Our evolved addition says,
well it's observably pure.

73
00:05:19.580 --> 00:05:23.680
If we were to take the original definition
in it's strictest sense, that would

74
00:05:23.680 --> 00:05:27.790
mean that every single function would not
only have to have all its inputs, but

75
00:05:27.790 --> 00:05:30.310
any function it used would
also have to be an input.

76
00:05:32.400 --> 00:05:34.660
That could get rather onerous
pretty quickly, right?

77
00:05:36.430 --> 00:05:40.340
If one function couldn't
call another function, so

78
00:05:40.340 --> 00:05:42.590
I believe in the spirit
of what we're doing here.

79
00:05:42.590 --> 00:05:46.460
We're evolving our understanding
of functional purity closer and

80
00:05:46.460 --> 00:05:50.200
closer to what a functional
programmer says is functional purity.

81
00:05:50.200 --> 00:05:54.836
And here we observe that we are still
consistent with that in that foo will

82
00:05:54.836 --> 00:05:57.955
always produce value two
if given the value one.

83
00:06:01.279 --> 00:06:03.646
&gt;&gt; Kyle Simpson: Now it is
technically possible for

84
00:06:03.646 --> 00:06:06.346
somebody to rewrite the bar function.

85
00:06:06.346 --> 00:06:10.358
Some people do that if you've ever looked
at the internals of lowdash for example,

86
00:06:10.358 --> 00:06:12.494
they rewrite functions, they hotswap in.

87
00:06:12.494 --> 00:06:16.874
Compile versions of functions and
do all kinds of tricks for performance and

88
00:06:16.874 --> 00:06:19.759
stuff, I never rewrite
functions in my program.

89
00:06:20.850 --> 00:06:27.130
I just, as a rule of thumb,
never ever ever do that.

90
00:06:27.130 --> 00:06:30.460
I don't care that I could squeak out
another microsecond of performance or

91
00:06:30.460 --> 00:06:32.680
something, I just don't rewrite functions.

92
00:06:32.680 --> 00:06:36.120
I treat functions as
if they are constants,

93
00:06:36.120 --> 00:06:38.109
as if they are things that
will not be redefined.

94
00:06:40.020 --> 00:06:44.820
So in my code you'll never gonna find
that function getting re written there at

95
00:06:44.820 --> 00:06:46.980
runtime to a different definition.

96
00:06:46.980 --> 00:06:49.960
You're not gonna find that
in my application code and

97
00:06:49.960 --> 00:06:54.060
therefore in my application code
where you to see this pattern,

98
00:06:54.060 --> 00:06:57.620
you can reasonably trust the bar
if going to add for the constant.

99
00:06:59.000 --> 00:07:02.820
and given what we see in the program, we
clearly do not see bar being rewritten, so

100
00:07:02.820 --> 00:07:05.180
therefore, we can trust it.

101
00:07:05.180 --> 00:07:07.950
Is it a 100 percent, iron clad guarantee,

102
00:07:07.950 --> 00:07:13.070
I don't know about that and
here's the point that I'm trying to make.

103
00:07:14.220 --> 00:07:17.275
Function purity in a mutable system like

104
00:07:17.275 --> 00:07:21.660
JavaScript Is not actually
a binary characteristic.

105
00:07:21.660 --> 00:07:25.750
You cannot say something is 100% pure or
100% impure.

106
00:07:25.750 --> 00:07:29.800
Well, you might be able to
say it's 100% impure, but

107
00:07:29.800 --> 00:07:33.420
you definitely cannot say, for
virtually any function, for

108
00:07:33.420 --> 00:07:37.050
the vast majority of functions you
can't actually say it is pure.

109
00:07:38.460 --> 00:07:45.030
What you actually have to say is Purity
is a confidence level, it's a range.

110
00:07:46.490 --> 00:07:50.950
Do I have a strong degree of confidence
that foo is going to act pure?

111
00:07:50.950 --> 00:07:53.880
I would say I have a very strong

112
00:07:53.880 --> 00:07:56.000
degree of confidence given
what I see here in this code.

113
00:07:56.000 --> 00:07:58.320
Would you agree with that?

114
00:07:58.320 --> 00:07:59.700
Would you understand
where I'm coming from?

115
00:07:59.700 --> 00:08:01.410
That it's a strong degree of confidence.

116
00:08:01.410 --> 00:08:05.460
I'm gonna leave myself a little window
there, that it is technically possible for

117
00:08:05.460 --> 00:08:09.140
somebody to do some kind of
crazy thing and write a macro or

118
00:08:09.140 --> 00:08:12.470
something that changes what functions
do or some crazy thing like maybe.

119
00:08:13.530 --> 00:08:15.860
But given what I see in this program,

120
00:08:15.860 --> 00:08:18.800
I'm pretty confident that
fools gonna behave as pure.

121
00:08:23.280 --> 00:08:24.386
What about this code?

122
00:08:26.880 --> 00:08:30.757
&gt;&gt; Kyle Simpson: Here foo in pass
in a function called bar and

123
00:08:30.757 --> 00:08:36.680
I return an new function back and
that new function takes in an x and

124
00:08:36.680 --> 00:08:41.761
when it receives the x it calls
the original bar with it.

125
00:08:43.900 --> 00:08:48.553
&gt;&gt; Kyle Simpson: So my foo down on line
seven takes in a function callback.

126
00:08:48.553 --> 00:08:53.723
Returns us back a function and then
that second set of parenthesis on line

127
00:08:53.723 --> 00:08:59.505
nine executes the return function passing
in the value three as the parameter x.

128
00:08:59.505 --> 00:09:04.255
And we get three coming in as
the parameter v on line 7 doubled,

129
00:09:04.255 --> 00:09:08.482
gets returned back and
we get the value 6 as the output.

130
00:09:10.868 --> 00:09:12.581
&gt;&gt; Kyle Simpson: So my question here is,

131
00:09:12.581 --> 00:09:17.644
given what we now know about function
purity, is foo a pure function?

132
00:09:21.541 --> 00:09:24.220
&gt;&gt; Kyle Simpson: There's actually
two questions to ask here,

133
00:09:24.220 --> 00:09:26.630
was wondering if anybody would catch it.

134
00:09:27.780 --> 00:09:34.220
Foo itself is a thing that given some
function it just returns another function.

135
00:09:34.220 --> 00:09:39.100
So the first question is given any
given function that we pass into foo,

136
00:09:39.100 --> 00:09:41.990
are we always gonna get
back another function

137
00:09:41.990 --> 00:09:44.169
that's wrapped around it
in exactly the same way.

138
00:09:45.410 --> 00:09:50.261
Line two creates a function that wraps
around whatever bar we pass in, and

139
00:09:50.261 --> 00:09:52.774
that function is what we return back.

140
00:09:52.774 --> 00:09:56.520
So if I didn't have those parentheses set
on line nine, and I just called foo, and

141
00:09:56.520 --> 00:09:59.365
I called it over and
over again with that exact same function.

142
00:09:59.365 --> 00:10:03.608
Is the resulting coming back always
going to be exactly the same structure?

143
00:10:08.329 --> 00:10:11.088
&gt;&gt; Kyle Simpson: I have a high
degree of confidence, so

144
00:10:11.088 --> 00:10:14.030
you better not tell me yes or no anymore.

145
00:10:15.550 --> 00:10:19.393
Because there is no yes or no here, there
is a, I have a high degree of confidence,

146
00:10:19.393 --> 00:10:23.410
I have a low degree of confidence,
I have a mid degree of confidence.

147
00:10:23.410 --> 00:10:28.189
Pick whatever scale you wanna use, but
in a mutable environment like JavaScript,

148
00:10:28.189 --> 00:10:31.206
there's virtually no
such thing as 100% pure.

149
00:10:33.988 --> 00:10:36.840
&gt;&gt; Kyle Simpson: So we could say foo
is pretty much always gonna return it.

150
00:10:36.840 --> 00:10:39.650
Now given that output function.

151
00:10:39.650 --> 00:10:43.950
The one from line two that we
are calling on line nine- Is that

152
00:10:43.950 --> 00:10:45.130
output function pure?

153
00:10:45.130 --> 00:10:49.500
There are two functions to ask that about.

154
00:10:49.500 --> 00:10:53.900
We're now asking about the second one-
the one we can pass in the value three

155
00:10:53.900 --> 00:10:55.960
as the parameter x.

156
00:10:55.960 --> 00:10:57.390
Is that one pure?

157
00:11:00.500 --> 00:11:03.763
&gt;&gt; Kyle Simpson: If that one
was closed over a bar, and

158
00:11:03.763 --> 00:11:09.355
we gave some x value of 3 to it,
are we always gonna get back 6?

159
00:11:15.077 --> 00:11:18.043
&gt;&gt; Speaker 2: I have a high degree
of confidence that we will.

160
00:11:18.043 --> 00:11:21.390
&gt;&gt; Kyle Simpson: , You have a high degree
of confidence that's the correct answer.

161
00:11:21.390 --> 00:11:25.839
Okay, this is a strong degree
of confidence that these,

162
00:11:25.839 --> 00:11:29.837
both of these functions
are behaving as pure okay,

163
00:11:32.410 --> 00:11:34.642
&gt;&gt; Kyle Simpson: What about this function?

164
00:11:38.378 --> 00:11:41.835
&gt;&gt; Kyle Simpson: I mean I'd say with
a high deal of confidence that it would

165
00:11:41.835 --> 00:11:46.540
return the same based on the input,
that you will get the same output.

166
00:11:46.540 --> 00:11:52.150
If we gave it the same object structure
every time, do you we feel like

167
00:11:52.150 --> 00:11:56.500
it's always gonna extract the id property
and give us that same id value back?

168
00:11:56.500 --> 00:11:57.000
&gt;&gt; Speaker 2: Yes.

169
00:11:59.200 --> 00:12:03.295
So, you would say I have a relatively
high degree of confidence?

170
00:12:03.295 --> 00:12:07.145
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle Simpson: What is I give it

171
00:12:07.145 --> 00:12:10.218
an object where id is a getter
that returns a random number?

172
00:12:14.567 --> 00:12:15.973
&gt;&gt; Kyle Simpson: Now where's
your confidence level?

173
00:12:15.973 --> 00:12:18.998
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kyle Simpson: Shattered.

174
00:12:18.998 --> 00:12:21.242
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kyle Simpson: [LAUGH] Shattered.

175
00:12:21.242 --> 00:12:23.770
I should have put that word on the slide,
shattered.

176
00:12:23.770 --> 00:12:28.830
[COUGH]
I'm trying to make a point

177
00:12:28.830 --> 00:12:32.910
here that you have to look at
what you are given on a code.

178
00:12:32.910 --> 00:12:35.610
And judge for yourselves what
degree of confidence you have.

179
00:12:36.770 --> 00:12:41.280
I'm deliberately doing
something weird here

180
00:12:41.280 --> 00:12:44.590
to push it to the edge to where it doesn't
behave the way we might have assumed.

181
00:12:45.610 --> 00:12:49.630
But you cannot look at something in
isolation in a language like JavaScript.

182
00:12:49.630 --> 00:12:52.390
You have to look at the full
context to make those decisions.

183
00:12:53.430 --> 00:12:59.160
If you look only at line two You'll
come up with the wrong conclusion, and

184
00:12:59.160 --> 00:13:02.320
you'll have a high degree of confidence
and then you'll get bitten by it.

185
00:13:02.320 --> 00:13:06.440
And you'll be like, my world just fell
apart, my world just shattered, okay.

186
00:13:08.390 --> 00:13:11.580
Looking at the whole context of
what we're given in the program,

187
00:13:11.580 --> 00:13:15.770
that's how we need to judge
can I trust this code or not.

188
00:13:15.770 --> 00:13:20.710
The whole purpose of our asking about
function purity is, can we trust it?

189
00:13:20.710 --> 00:13:22.890
Cuz if we can't trust it,
we can't understand it,

190
00:13:22.890 --> 00:13:27.810
you know how we talked
about side effects before?

191
00:13:27.810 --> 00:13:29.730
Guess what another side effect is?

192
00:13:29.730 --> 00:13:34.170
Randomness, randomness is a side effect,
it's a side cause, but

193
00:13:34.170 --> 00:13:39.010
it's a side effect, timestamps
&gt;&gt; Speaker 2: Those are side effects

194
00:13:41.270 --> 00:13:43.450
because, you call it over and over again,

195
00:13:43.450 --> 00:13:44.970
eventually your time
stamp is going to change.

