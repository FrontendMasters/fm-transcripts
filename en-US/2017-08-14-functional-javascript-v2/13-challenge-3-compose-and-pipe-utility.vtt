WEBVTT

1
00:00:00.370 --> 00:00:05.650
&gt;&gt; Kyle Simpson: So your exercise three
is for you to make your own compose

2
00:00:05.650 --> 00:00:10.260
utility and pipe utility that can take
any number of functions, not just two.

3
00:00:11.470 --> 00:00:14.900
Think about, before you even write that
code, think about algorithmically,

4
00:00:14.900 --> 00:00:16.960
what would that look like?

5
00:00:16.960 --> 00:00:19.983
You could, for example,
solve that with a loop.

6
00:00:19.983 --> 00:00:24.303
Where you have, you take your set of
functions, you make it into an array,

7
00:00:24.303 --> 00:00:25.820
you loop over that array.

8
00:00:25.820 --> 00:00:28.010
And each time you call a function,
you capture that output.

9
00:00:28.010 --> 00:00:30.930
And then that becomes
the input to the next one.

10
00:00:30.930 --> 00:00:32.390
That's one way to do it.

11
00:00:32.390 --> 00:00:37.110
You could also do composition with
recursion if you're more familiar

12
00:00:37.110 --> 00:00:38.400
with that.

13
00:00:38.400 --> 00:00:40.934
If you're not familiar with recursion,
don't worry,

14
00:00:40.934 --> 00:00:44.380
later in the course we are going to dig
into recursion in quiet a bit of detail.

15
00:00:44.380 --> 00:00:48.343
But if you want to try your hand at
doing it with recursion, that's great.

16
00:00:48.343 --> 00:00:50.244
If you like list operations which again,

17
00:00:50.244 --> 00:00:52.470
we're going to get into
later in the course, but

18
00:00:52.470 --> 00:00:55.830
if you already like list operations,
you might want to do it as a reduce.

19
00:00:55.830 --> 00:01:00.779
So it's up to you, but I want you to take
some time to play around with implementing

20
00:01:00.779 --> 00:01:02.090
a compose and a pipe.

21
00:01:02.090 --> 00:01:05.388
And think about what algorithm you're
gonna use to do that before you write

22
00:01:05.388 --> 00:01:05.920
that code.

