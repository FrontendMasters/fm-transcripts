WEBVTT

1
00:00:00.420 --> 00:00:03.928
&gt;&gt; Kyle: Okay, our next discussion point
in the overall discussion about list

2
00:00:03.928 --> 00:00:07.852
operations, is I wanted to take you back
to something I said at the beginning of

3
00:00:07.852 --> 00:00:09.347
this part of our discussion.

4
00:00:09.347 --> 00:00:14.568
Which was that really these are actually
operations that are generalized

5
00:00:14.568 --> 00:00:20.080
any data structure, not just the
operations that would only work on arrays.

6
00:00:20.080 --> 00:00:21.880
So I wanna give you an example of that.

7
00:00:23.000 --> 00:00:28.490
This is a map object utility,
which does the same thing as map for

8
00:00:28.490 --> 00:00:34.110
a list would do, but it does it across
the list of enumerable keys in an object.

9
00:00:34.110 --> 00:00:39.610
Some important things to point out, I
create a brand new object on line 2 called

10
00:00:39.610 --> 00:00:44.440
newObj, and then on line 3 I get
the list of enumerable properties and

11
00:00:44.440 --> 00:00:50.740
a list of enumerable keys for that object,
with the object.keys utility.

12
00:00:50.740 --> 00:00:55.350
Line 4, I loop over those keys and
I'm using the four of loop.

13
00:00:55.350 --> 00:00:56.970
Don't miss that detail.

14
00:00:56.970 --> 00:01:00.930
So that I actually am looking at the keys
rather than the indexes of the keys array.

15
00:01:02.170 --> 00:01:06.380
And then, I set the value and

16
00:01:06.380 --> 00:01:10.360
the new object at that
same property location,

17
00:01:10.360 --> 00:01:15.740
equal to the mapped transformed value of
the original object at that location.

18
00:01:17.430 --> 00:01:19.870
That's should look exactly familiar.

19
00:01:19.870 --> 00:01:22.580
The same concept is what
we did with the array.

20
00:01:22.580 --> 00:01:24.393
It's just slightly different,

21
00:01:24.393 --> 00:01:28.806
so that it's been adapted to work against
an object instead of against an array.

22
00:01:31.544 --> 00:01:34.727
&gt;&gt; Kyle: Moreover, any data
structure that you could think of,

23
00:01:34.727 --> 00:01:39.402
you could implement these same fundamental
ideas of map, filter and reduce, for

24
00:01:39.402 --> 00:01:41.675
any data structure you provide.

25
00:01:41.675 --> 00:01:46.375
And moreover not only can you, I'm gonna
strongly implore you that you should.

26
00:01:46.375 --> 00:01:49.885
Any data structure that is custom that
you've built that isn't an array,

27
00:01:50.950 --> 00:01:54.980
that you're tracking data,
your data model come up with some

28
00:01:54.980 --> 00:01:59.320
kind of adapter that adapts the concepts
of map, filter and reduce to it.

29
00:01:59.320 --> 00:02:01.910
Because that will make
working with that object and

30
00:02:01.910 --> 00:02:06.560
doing operations against it,
not just easier, but more functional.

31
00:02:08.740 --> 00:02:11.470
I think one of the key
underlying concepts here,

32
00:02:11.470 --> 00:02:15.460
is that functional programmers
do work with data structures.

33
00:02:15.460 --> 00:02:17.340
They do work with types, and

34
00:02:17.340 --> 00:02:22.330
the way they do it is to adapt functional
concepts to those data structures.

35
00:02:22.330 --> 00:02:27.233
And map object here is an example
of adapting functional programming,

36
00:02:27.233 --> 00:02:28.630
to a key value hash.

37
00:02:30.310 --> 00:02:33.780
You can see how it's used down there
at the bottom, I call map obj.

38
00:02:33.780 --> 00:02:36.453
I pass in my mapper function, and my O and

39
00:02:36.453 --> 00:02:40.795
I get back a new object where each
of those values was uppercased.

40
00:02:48.287 --> 00:02:52.785
&gt;&gt; Kyle: To get you some
practice with thinking this way,

41
00:02:52.785 --> 00:02:59.480
abstracting your list operations
thought process to data structures,

42
00:02:59.480 --> 00:03:06.690
and here's a hint, to thinking about
your own code as a data structure.

43
00:03:06.690 --> 00:03:10.720
That is,
if I have a list of operations in my code,

44
00:03:10.720 --> 00:03:14.750
I could turn that list of
operations into a list operation.

45
00:03:14.750 --> 00:03:18.770
I could turn that list of
statements into a list operation.

46
00:03:19.830 --> 00:03:24.910
That kind of thing actually happens a lot
more often than I initially realized, and

47
00:03:24.910 --> 00:03:27.290
it's really where I think
functional programming and

48
00:03:27.290 --> 00:03:30.830
list operations start to shine,
is when our program itself

49
00:03:30.830 --> 00:03:34.670
becomes a data structure that
we can model these ideas across.

50
00:03:34.670 --> 00:03:38.390
And actually, we've already seen
a couple of examples of doing that.

51
00:03:38.390 --> 00:03:43.180
Do you remember when a little while
ago in the fusion discussion,

52
00:03:43.180 --> 00:03:47.990
I said well what if I have a composed
write and I can only do two of them?

53
00:03:47.990 --> 00:03:50.520
Well, you could have
done that imperatively.

54
00:03:50.520 --> 00:03:55.510
You could have called compose right
with the first two of them, and

55
00:03:55.510 --> 00:03:58.390
then called compose right again
with that one plus another one.

56
00:03:58.390 --> 00:04:00.080
You could have done that manually.

57
00:04:00.080 --> 00:04:01.450
But what did I do?

58
00:04:01.450 --> 00:04:04.080
Instead of doing two separate
statements like that and

59
00:04:04.080 --> 00:04:06.370
storing the intermediary result,
what did I do?

60
00:04:07.760 --> 00:04:12.080
I modeled those statements as
a list operation themselves.

61
00:04:12.080 --> 00:04:16.230
By putting the functions into an array and
reducing across the array.

62
00:04:16.230 --> 00:04:19.530
And that allowed me to make those
statements as a list operation,

63
00:04:19.530 --> 00:04:21.760
instead of individual statements.

64
00:04:23.360 --> 00:04:28.110
In a sense, I treated that part of
my program as a data structure,

65
00:04:28.110 --> 00:04:29.540
to operate against.

66
00:04:30.670 --> 00:04:33.830
That is where functional programming for
me is really starting to get more

67
00:04:33.830 --> 00:04:35.490
fascinating, it's really
starting to shine.

