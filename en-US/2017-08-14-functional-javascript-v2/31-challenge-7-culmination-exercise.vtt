WEBVTT

1
00:00:00.631 --> 00:00:02.475
&gt;&gt; Kyle Simpson: Exercise seven.

2
00:00:02.475 --> 00:00:03.949
If you open up the read me,

3
00:00:03.949 --> 00:00:08.550
I just wanna orient you a little bit
to what to expect out of this exercise.

4
00:00:08.550 --> 00:00:13.730
This is designed to bring together several
of the major ideas that we've worked on so

5
00:00:13.730 --> 00:00:18.140
far in the course, try to get you up to
speed on how they all fit together, or

6
00:00:18.140 --> 00:00:19.690
how they can start to fit together.

7
00:00:20.940 --> 00:00:22.782
Doesn't bring them all of them into play,
but

8
00:00:22.782 --> 00:00:25.280
it does bring many of them
from the course into play.

9
00:00:25.280 --> 00:00:30.890
And we will have another exercise in a
little bit that will do even more of that.

10
00:00:30.890 --> 00:00:36.610
The first items in this readme
are gonna feel very rudimentary.

11
00:00:36.610 --> 00:00:39.729
And that will give you a temptation
that you could skip over them.

12
00:00:39.729 --> 00:00:44.627
And I'm gonna strongly insist,
request you not skip over them, because

13
00:00:44.627 --> 00:00:49.604
they're designed very intentionally
to take you through a progression of

14
00:00:49.604 --> 00:00:54.630
these concepts little by little to help
that all fit together in your head.

15
00:00:54.630 --> 00:00:58.473
So items one, two, three, and
four are pretty straight forward, and

16
00:00:58.473 --> 00:01:01.368
should only take you a minute or
two to complete each.

17
00:01:01.368 --> 00:01:04.075
Item five is where you're gonna
spend most of the time here.

18
00:01:04.075 --> 00:01:07.567
And you wanna give yourself a good
budget of time, at least 15,

19
00:01:07.567 --> 00:01:10.170
maybe even 20 minutes on this item.

20
00:01:10.170 --> 00:01:13.900
You're writing a function that's add-in,
but it asks you to implement it

21
00:01:13.900 --> 00:01:17.680
three different times with
three different approaches.

22
00:01:17.680 --> 00:01:20.130
One with an iterative approach.

23
00:01:20.130 --> 00:01:21.750
One with recursion.

24
00:01:21.750 --> 00:01:24.070
And one with a list operation.

25
00:01:24.070 --> 00:01:27.060
So that gives you practice with each
of those three different takes that

26
00:01:27.060 --> 00:01:27.760
we've looked at.

27
00:01:29.350 --> 00:01:33.460
And don't forget that there's six,
seven, and eight afterwards.

28
00:01:33.460 --> 00:01:35.590
&gt;&gt; Speaker 2: Don't worry too much
if you don't get to the bonus.

29
00:01:35.590 --> 00:01:36.810
&gt;&gt; Kyle Simpson: That's okay.

30
00:01:36.810 --> 00:01:38.170
That's some homework for you.

31
00:01:38.170 --> 00:01:41.200
But six, seven, eight,
don't run out of time on that.

32
00:01:41.200 --> 00:01:42.940
So this is what I would say.

33
00:01:42.940 --> 00:01:46.730
&gt;&gt; Speaker 2: Give yourself a budget of
time that you should be onto item five

34
00:01:46.730 --> 00:01:49.560
within about five minutes
of starting the exercise.

35
00:01:49.560 --> 00:01:52.880
&gt;&gt; Kyle Simpson: You should try to give
yourself about 15 minutes at minimum to

36
00:01:52.880 --> 00:01:56.190
work on number five.

37
00:01:56.190 --> 00:02:01.266
And then if after that 15 minutes or
so you don't have at least one working

38
00:02:01.266 --> 00:02:06.343
implementation, grab a working
implementation from the solution file so

39
00:02:06.343 --> 00:02:10.560
that you unblock yourself to work on six,
seven, and eight.

40
00:02:10.560 --> 00:02:11.230
&gt;&gt; Speaker 2: So

41
00:02:11.230 --> 00:02:15.710
that's a little bit of setup instructions
to help you get going on exercise seven.

42
00:02:15.710 --> 00:02:19.730
&gt;&gt; Kyle Simpson: We'll come back after
a while and talk through that solution.

43
00:02:19.730 --> 00:02:23.360
This is gonna be highly interactive, I'm
gonna live code all the way through that,

44
00:02:23.360 --> 00:02:26.230
so that solution will be quite
a bit more in depth than normal.

