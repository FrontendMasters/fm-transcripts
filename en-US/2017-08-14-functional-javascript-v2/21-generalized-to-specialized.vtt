WEBVTT

1
00:00:00.530 --> 00:00:03.613
&gt;&gt; Kyle Simpson: So we've already
seen multiple usages of Closure but

2
00:00:03.613 --> 00:00:07.311
I wanna take you towards one of
the most important of the usages of

3
00:00:07.311 --> 00:00:11.203
Closure.
&gt;&gt; Kyle Simpson: There is a notion in

4
00:00:11.203 --> 00:00:15.708
functional programming of defining
things in a general way and

5
00:00:15.708 --> 00:00:18.180
then specializing those things.

6
00:00:19.530 --> 00:00:23.300
So moving from generalization
to specialization.

7
00:00:24.640 --> 00:00:30.420
So I want you to think, if I had
a function that took three inputs,

8
00:00:30.420 --> 00:00:32.460
took an x, y, and a z, and

9
00:00:32.460 --> 00:00:36.520
maybe added those three things
together and gave me the result.

10
00:00:37.660 --> 00:00:40.590
So if I call that function and
I passed in one, two,

11
00:00:40.590 --> 00:00:44.160
three as it's input, so
I'd get the value six back out.

12
00:00:44.160 --> 00:00:44.820
Everybody with me?

13
00:00:46.220 --> 00:00:49.920
That would be the general
representation of that function.

14
00:00:49.920 --> 00:00:52.860
The most general form of it is
that it takes three inputs.

15
00:00:54.140 --> 00:00:57.770
Now, what if some point
in my application I said,

16
00:00:57.770 --> 00:01:03.200
I'd like a slightly more specialized
version of that function.

17
00:01:03.200 --> 00:01:07.290
One that already knows what
the first of the three inputs is.

18
00:01:09.050 --> 00:01:12.281
So maybe one that already knows that
the first input should be the value

19
00:01:12.281 --> 00:01:15.860
five.
&gt;&gt; Kyle Simpson: That specialized

20
00:01:15.860 --> 00:01:18.480
function, then,
would expect only two inputs.

21
00:01:19.620 --> 00:01:23.260
The second and the third of the original,
is everybody following me or

22
00:01:23.260 --> 00:01:24.300
did I lose you?

23
00:01:24.300 --> 00:01:24.910
Too abstract?

24
00:01:26.200 --> 00:01:29.991
If we took the function foo
that took three inputs and

25
00:01:29.991 --> 00:01:34.128
produced another one that
only expected two inputs, and

26
00:01:34.128 --> 00:01:38.866
it was hard coded to know the first
one is already going to be five,

27
00:01:38.866 --> 00:01:42.487
that would be a specialization
of the generalized

28
00:01:42.487 --> 00:01:48.396
foo.
&gt;&gt; Kyle Simpson: Here

29
00:01:48.396 --> 00:01:54.218
is an add function it takes an x and
a y, and I'm going to use, on line 11.

30
00:01:54.218 --> 00:01:58.909
I am going to create a new function that
is a specialization of the add function

31
00:01:58.909 --> 00:02:01.160
And I'm going to call it addTo10.

32
00:02:01.160 --> 00:02:06.995
I'm going to use a utility called partial,
and I'll explain that utility in a moment.

33
00:02:06.995 --> 00:02:12.494
But looking at addTo10,
can we see how addTo10 is a specialization

34
00:02:12.494 --> 00:02:18.403
of add?
&gt;&gt; Kyle Simpson: It's a specialization of

35
00:02:18.403 --> 00:02:25.160
add wherein the first argument is already
known, and it's fixed to be the value 10.

36
00:02:25.160 --> 00:02:31.700
So when we call addTo10(32),
we only had to provide one input.

37
00:02:31.700 --> 00:02:36.720
And it already knew, somehow magically,
to use the value 10.

38
00:02:36.720 --> 00:02:41.679
And it's not magic at all really, is it?

39
00:02:43.110 --> 00:02:47.790
If we look at how partial works,
partial takes in a function fn on line 5.

40
00:02:47.790 --> 00:02:52.260
And then it takes in a list of other
arguments which I've gathered up into

41
00:02:52.260 --> 00:02:57.910
the array firstArgs, and
it makes a new function called applied.

42
00:02:57.910 --> 00:03:00.240
So this is yet
again a higher order function.

43
00:03:00.240 --> 00:03:01.700
You see these all over the place now.

44
00:03:01.700 --> 00:03:03.950
This is a machine making machine.

45
00:03:03.950 --> 00:03:06.450
We return back a new function

46
00:03:06.450 --> 00:03:10.410
that's expecting some more
arguments that I call last args.

47
00:03:10.410 --> 00:03:14.359
And when you've provided
the first args and

48
00:03:14.359 --> 00:03:18.957
the last args,
it calls the original function FN.

49
00:03:18.957 --> 00:03:24.109
It calls that FN because we've closed
over FN, and it uses first args because

50
00:03:24.109 --> 00:03:29.313
we closed over first args.
&gt;&gt; Kyle Simpson: It's Closure.

51
00:03:29.313 --> 00:03:34.347
It remembers those things.
&gt;&gt; Kyle Simpson: That's how

52
00:03:34.347 --> 00:03:39.393
add 10 remembers not only the add
function but also the value 10,

53
00:03:39.393 --> 00:03:44.876
It remembers those things via closure.
&gt;&gt; Kyle Simpson: This

54
00:03:44.876 --> 00:03:48.756
technique of taking
a generalized function and

55
00:03:48.756 --> 00:03:54.197
pre settings some of these inputs
is called partial application.

56
00:03:54.197 --> 00:03:57.056
Even if you never heard that
term before partial application?

57
00:03:58.735 --> 00:04:00.333
&gt;&gt; Kyle Simpson: We said earlier that

58
00:04:00.333 --> 00:04:05.850
Apply is kind of the academic term for
passing in arguments, right?

59
00:04:05.850 --> 00:04:10.650
So partial application implies that
we're only partially passing in some of

60
00:04:10.650 --> 00:04:12.890
the arguments,
which is what we're doing here.

61
00:04:12.890 --> 00:04:15.540
We only passed in one of
the two expected arguments.

62
00:04:16.830 --> 00:04:21.200
And we created a specialized function
that would remember what we passed in and

63
00:04:21.200 --> 00:04:22.190
use that later.

64
00:04:24.310 --> 00:04:29.180
Here the later is just two lines away,
but as a matter of fact,

65
00:04:29.180 --> 00:04:31.930
that closure could hold onto that for
as long as we need it to.

66
00:04:31.930 --> 00:04:34.690
It could be an entirely
different part of the program.

67
00:04:34.690 --> 00:04:38.730
It could be actually on a different
timeline where it's in response to

68
00:04:38.730 --> 00:04:40.720
some event in the future.

69
00:04:40.720 --> 00:04:41.620
Doesn't really matter,

70
00:04:41.620 --> 00:04:44.970
the closure's gonna hold onto that
information as long as necessary.

71
00:04:46.180 --> 00:04:49.190
We can also call addTo10
as many times as we want.

72
00:04:49.190 --> 00:04:56.260
If I said addTo10 32 and I said
addTo10 11, gonna give it 10 plus 11.

73
00:04:56.260 --> 00:04:58.440
Call it as many times as I want.

74
00:05:00.830 --> 00:05:06.360
So what I've done is I've taken
a utility that was generalized and

75
00:05:06.360 --> 00:05:11.160
I have made potentially many more
specializations of that utility because I

76
00:05:11.160 --> 00:05:16.840
could also make an add to 11 and
an add to 48, and an add to 619.

77
00:05:16.840 --> 00:05:20.700
I can make as many of those
specialized utilities as I wanted.

78
00:05:21.720 --> 00:05:24.839
Just call the partial and
pass in the values.

79
00:05:28.414 --> 00:05:31.220
&gt;&gt; Kyle Simpson: This is important because

80
00:05:31.220 --> 00:05:37.660
it is easier for
me to pass around addTo10 as a value.

81
00:05:37.660 --> 00:05:39.430
It's a function value.

82
00:05:39.430 --> 00:05:44.220
It is easier for me to pass that
around where it is collected

83
00:05:44.220 --> 00:05:49.410
the add function reference and
the value 10 together and memorized them.

84
00:05:49.410 --> 00:05:54.470
It's easier to pass that around than it
is to pass those two independent values

85
00:05:54.470 --> 00:05:55.390
around separately.

86
00:05:56.760 --> 00:06:00.370
Add to 10 is now a thing that
I can hand off to somebody and

87
00:06:00.370 --> 00:06:03.540
say here if you wanna add things
to 10 just use this utility.

88
00:06:03.540 --> 00:06:05.460
And they're like, cool thanks very much.

89
00:06:07.060 --> 00:06:10.980
I don't have to say, well if you wanna add
things to ten here's add and here's ten.

90
00:06:10.980 --> 00:06:12.385
I just give them the one package all

91
00:06:12.385 --> 00:06:16.393
together.
&gt;&gt; Kyle Simpson: And

92
00:06:16.393 --> 00:06:18.285
it's not really about
giving things to people.

93
00:06:18.285 --> 00:06:22.796
This is about making Lego pieces
in our code that we can compose

94
00:06:22.796 --> 00:06:26.890
the other parts of our program
In a more reasonable way.

95
00:06:29.000 --> 00:06:30.990
So what's a practical example of this?

96
00:06:30.990 --> 00:06:34.990
Well, let's imagine you
have an Ajax utility,

97
00:06:34.990 --> 00:06:37.800
something that is gonna
make Ajax requests.

98
00:06:37.800 --> 00:06:41.480
And the very first parameter of
that Ajax utility is the url.

99
00:06:42.660 --> 00:06:44.500
And the second parameter is the data.

100
00:06:46.050 --> 00:06:49.830
What if you knew a fixed set of URLs,
like,

101
00:06:49.830 --> 00:06:53.560
you knew what the API endpoints were for
your application.

102
00:06:53.560 --> 00:06:58.480
And so, instead of having the AJAX
utility used everywhere, and

103
00:06:58.480 --> 00:07:01.600
you had all those URLs hard coded in.

104
00:07:01.600 --> 00:07:05.970
What if, instead, you partially applied
your AJAX utility ahead of time,

105
00:07:05.970 --> 00:07:07.320
at the very beginning.

106
00:07:07.320 --> 00:07:10.450
And you went ahead and
stored the URL in each different variant.

107
00:07:10.450 --> 00:07:15.430
So now, you have a variable
called lookup users and

108
00:07:15.430 --> 00:07:22.090
that thing already knows to make the ajax
call with the lookup users API URL in it.

109
00:07:22.090 --> 00:07:23.770
And all it's waiting for is the data.

110
00:07:23.770 --> 00:07:29.710
And then you have another function
that you make called look up orders,

111
00:07:29.710 --> 00:07:35.440
and that one is closed over a different
URL, and look up customers and so forth.

112
00:07:35.440 --> 00:07:39.870
So, we can make these functions
that remember that information.

113
00:07:39.870 --> 00:07:44.210
And then those pieces are easier to reason
about in the other parts of our code.

114
00:07:44.210 --> 00:07:46.608
We're not cluttered up by all the URLs.

115
00:07:46.608 --> 00:07:50.795
We just know, that's how I get my,
that 's how I get my customer list.

116
00:07:50.795 --> 00:07:53.174
That's how I look up the orders.

117
00:07:53.174 --> 00:07:55.426
Call the function and
just pass in the data.

118
00:07:55.426 --> 00:07:59.447
So partial application is
process of generalizing,

119
00:07:59.447 --> 00:08:05.537
of specializing a generalized incredibly
powerful happens all over the place.

120
00:08:05.537 --> 00:08:06.417
In function parameters

121
00:08:06.417 --> 00:08:11.163
it's very privelent technique.
&gt;&gt; Kyle Simpson: How

122
00:08:11.163 --> 00:08:13.748
many of you have heard currying before?

123
00:08:13.748 --> 00:08:16.630
You've heard the term currying.

124
00:08:16.630 --> 00:08:20.640
For the longest time,
I thought that partial application and

125
00:08:20.640 --> 00:08:23.400
currying were basically the same thing.

126
00:08:24.860 --> 00:08:29.520
As a matter of fact I've been asked on
interviews and I have asked on interviews,

127
00:08:29.520 --> 00:08:33.470
tell me what the difference is between
currying and partial application.

128
00:08:33.470 --> 00:08:35.710
And I incorrectly responded, well,

129
00:08:35.710 --> 00:08:37.890
they're kinda just two different
ways to do the same thing.

130
00:08:37.890 --> 00:08:43.440
And that interviewer correctly called
BS on me, because that's not accurate.

131
00:08:44.560 --> 00:08:48.890
There is a set of similarities
between these two patterns and

132
00:08:48.890 --> 00:08:50.920
they are set a very important differences.

133
00:08:52.080 --> 00:08:55.802
And if I were to ask you,
what's the difference or

134
00:08:55.802 --> 00:08:59.258
first if I said how
are partial application and

135
00:08:59.258 --> 00:09:02.069
currying alike?
&gt;&gt; Kyle Simpson: Do

136
00:09:02.069 --> 00:09:04.320
you think you could answer
that with the crisp answer?

137
00:09:04.320 --> 00:09:07.300
Could you tell me what is
similar about the two?

138
00:09:08.550 --> 00:09:09.050
Maybe.

139
00:09:10.120 --> 00:09:13.770
What if I said,
okay now tell me how they're different?

140
00:09:13.770 --> 00:09:15.070
Could you tell me how they were different?

141
00:09:17.040 --> 00:09:20.140
I wanna try to summarize for
you the difference and

142
00:09:20.140 --> 00:09:23.140
the similarity between partial
application and currying.

143
00:09:23.140 --> 00:09:28.490
This is partial application and there is
a lot of times I have seen this all over

144
00:09:28.490 --> 00:09:33.810
the place where somebody will do partial
application, and they'll call it currying,

145
00:09:33.810 --> 00:09:37.280
or even more often they'll do currying and
call it partial application.

146
00:09:39.260 --> 00:09:40.710
We don't wanna use the wrong terms for

147
00:09:40.710 --> 00:09:44.840
stuff, terminology matters cuz
we wanna communicate correctly.

148
00:09:46.390 --> 00:09:49.390
So here's how they're the same,
here's what they are alike,

149
00:09:49.390 --> 00:09:53.870
here is what's similar between
partial application and currying.

150
00:09:53.870 --> 00:09:59.120
Partial application and
currying are two different techniques for

151
00:09:59.120 --> 00:10:04.640
specializing a generalized function.
&gt;&gt; Kyle Simpson: If

152
00:10:04.640 --> 00:10:08.913
you gave that answer in a job interview,
you'd probably get the job because

153
00:10:08.913 --> 00:10:13.950
99.99% of your peers have never thought
to articulate it specifically like that.

154
00:10:16.050 --> 00:10:19.430
Partial application and
currying are two different techniques for

155
00:10:19.430 --> 00:10:22.310
specializing a generalized function.

156
00:10:24.080 --> 00:10:25.000
How are they different?

157
00:10:26.400 --> 00:10:32.304
Partial application takes some of
the arguments now, which is line 11.

158
00:10:33.380 --> 00:10:36.650
And it takes all of the arguments later.

159
00:10:36.650 --> 00:10:39.370
All the rest of the arguments later,
which is line 13.

160
00:10:39.370 --> 00:10:42.789
So you can either do it now or later, but

161
00:10:42.789 --> 00:10:47.518
you only get those two shots.
&gt;&gt; Kyle Simpson: Partial

162
00:10:47.518 --> 00:10:50.340
application takes some of them now,
the rest of them later.

163
00:10:51.880 --> 00:10:55.890
Currying on the hand says,

164
00:10:55.890 --> 00:10:59.960
I think what we're going to do is
provide them a little bit at a time.

165
00:11:01.120 --> 00:11:05.440
We might provide one now,
maybe another one a little bit later, and

166
00:11:05.440 --> 00:11:07.370
maybe another one a little
bit later than that.

167
00:11:07.370 --> 00:11:08.465
And maybe another one.

168
00:11:08.465 --> 00:11:13.342
Or a few later, I'm gonna sort of
drip them in as I go across my code

169
00:11:13.342 --> 00:11:18.509
base because I actually need to do
lots of levels of specialization.

170
00:11:18.509 --> 00:11:23.961
Add only takes two, but
what if add took 12?

171
00:11:23.961 --> 00:11:26.982
And I wanted to make one that
knew about the first three, and

172
00:11:26.982 --> 00:11:31.273
then another one two more, and another one
that knew about three more from that, and

173
00:11:31.273 --> 00:11:34.100
I could make lots of
levels of specialization.

174
00:11:34.100 --> 00:11:38.400
And if I wanted to do that with partial
application, it might be a bit awkward

175
00:11:38.400 --> 00:11:43.830
because add to 10 expects
everything on the next call.

176
00:11:45.360 --> 00:11:48.670
If I wanted to provide only
some more of the inputs, but

177
00:11:48.670 --> 00:11:53.510
not all of them, I'd have to do
another partial application on addTo10

178
00:11:54.850 --> 00:11:59.370
to make another specialized function,
which I, of course, can do.

179
00:11:59.370 --> 00:12:02.510
You can keep partially applying
a partially applied function, and

180
00:12:02.510 --> 00:12:04.120
partially apply, and partially apply.

181
00:12:04.120 --> 00:12:05.590
You can keep doing that as
many times as you want, but

182
00:12:05.590 --> 00:12:09.450
you're gonna have to keep using
the partial utility to do that.

183
00:12:09.450 --> 00:12:11.295
So it can get a little bit cumbersome.

184
00:12:11.295 --> 00:12:14.667
Here's what currying says.

185
00:12:14.667 --> 00:12:21.180
Currying says I'm gonna go ahead and
automatically assume that every input

186
00:12:21.180 --> 00:12:27.060
that you give me is just one of my inputs,
and I'm gonna return you a new function.

187
00:12:27.060 --> 00:12:31.908
That's expecting the next input and
I'm just gonna keep doing that over and

188
00:12:31.908 --> 00:12:35.922
over and over again,
until I've received all of the inputs and

189
00:12:35.922 --> 00:12:38.511
then I'll call the original function.

190
00:12:38.511 --> 00:12:45.387
It's kind of like, automatic partial
application, one argument at a time.

191
00:12:45.387 --> 00:12:50.259
Instead of calling partial over and
over, curry is going to

192
00:12:50.259 --> 00:12:54.006
automatically do that for you.
&gt;&gt; Kyle Simpson: So

193
00:12:54.006 --> 00:12:56.130
say we have this add3 function.

194
00:12:56.130 --> 00:12:57.680
It takes an x, a y, and a z.

195
00:12:57.680 --> 00:13:00.670
And we pass it into curry.

196
00:13:02.160 --> 00:13:07.480
What we got out of that is an add3 which
doesn't know about any of its inputs yet.

197
00:13:07.480 --> 00:13:09.340
That's different than partial.

198
00:13:09.340 --> 00:13:10.750
We haven't provided any inputs yet.

199
00:13:10.750 --> 00:13:16.199
We've just adapted add3.
&gt;&gt; Kyle Simpson: So

200
00:13:16.199 --> 00:13:19.570
add3 is a function that's waiting for
an input.

201
00:13:19.570 --> 00:13:23.580
And we call that with
the number 3 on line 5.

202
00:13:23.580 --> 00:13:26.240
And that's gonna return
us another function

203
00:13:26.240 --> 00:13:28.030
which is expecting another argument.

204
00:13:29.150 --> 00:13:33.679
So I could immediately call it, or I could
just save it off into a function called f.

205
00:13:34.900 --> 00:13:38.133
Do you see how f is a specialization of

206
00:13:38.133 --> 00:13:42.370
add3?
&gt;&gt; Kyle Simpson: f is a function that will

207
00:13:42.370 --> 00:13:46.589
eventually call add3, but
it already knows about the first of its

208
00:13:46.589 --> 00:13:50.727
arguments.
&gt;&gt; Kyle Simpson: So

209
00:13:50.727 --> 00:13:55.358
then later, I could call f again and
give it another input.

210
00:13:55.358 --> 00:13:58.662
And I could store off that result and

211
00:13:58.662 --> 00:14:04.736
now P is a specialization of F
which is a specialization of add 3.

212
00:14:04.736 --> 00:14:05.850
You follow that reasoning?

213
00:14:07.020 --> 00:14:11.470
I just create more and more specialization
every time I provide a new argument,

214
00:14:11.470 --> 00:14:15.600
what I get back is a function that's
more specialized than the one before it.

215
00:14:16.900 --> 00:14:20.643
And eventually, Line 9,
I provide the third and

216
00:14:20.643 --> 00:14:25.459
final expected input, and
it calls the original function under

217
00:14:25.459 --> 00:14:30.272
the covers with all three inputs,
and I get back my result 12,

218
00:14:30.272 --> 00:14:35.246
3, plus 4, plus 5.
&gt;&gt; Kyle Simpson: So

219
00:14:35.246 --> 00:14:39.730
you notice I didn't need to use
currying on any of line 5, line 7,

220
00:14:39.730 --> 00:14:44.228
line 9, or line 11.
&gt;&gt; Kyle Simpson: I only needed the curry

221
00:14:44.228 --> 00:14:48.662
once because currying says, I'm gonna go
ahead and assume that we're just gonna

222
00:14:48.662 --> 00:14:51.635
keep partially applying over and
over and over again.

223
00:14:51.635 --> 00:15:00.595
It automatically does that for us.
&gt;&gt; Kyle Simpson: So

224
00:15:00.595 --> 00:15:04.557
I can string them out as separate ones
like I did on lines five, seven and

225
00:15:04.557 --> 00:15:07.480
nine or I can do it altogether
like I did on line 11.

226
00:15:07.480 --> 00:15:12.804
Does line 11 look familiar to you at all?
&gt;&gt; Kyle Simpson: Does

227
00:15:12.804 --> 00:15:16.870
that look like something we did in the,
&gt;&gt; Kyle Simpson: Point-free

228
00:15:16.870 --> 00:15:19.840
exercise earlier on in the course?

229
00:15:19.840 --> 00:15:22.550
I gave you that printIf function.

230
00:15:22.550 --> 00:15:26.560
You remember you call the printIf
the first time you gave it an input and

231
00:15:26.560 --> 00:15:29.340
it gave you a function back that
was expecting the next input.

232
00:15:29.340 --> 00:15:33.190
And then that gave you another function
that was expecting the next input.

233
00:15:33.190 --> 00:15:36.510
All I did there was manually
curry those functions.

234
00:15:37.770 --> 00:15:40.850
I didn't automatically curry them because
I hadn't taught you currying yet.

235
00:15:42.220 --> 00:15:45.380
But now, we see we did that manually and

236
00:15:45.380 --> 00:15:48.830
now if we were to go back to that
exercise, we could go back and

237
00:15:48.830 --> 00:15:52.510
use the curry utility to do
that automatically for us.

238
00:15:52.510 --> 00:15:57.262
We could make a function that takes all
three inputs and then, just curry it and

239
00:15:57.262 --> 00:16:01.982
have the same capability.
&gt;&gt; Speaker 2: Is there a way to

240
00:16:01.982 --> 00:16:04.720
manually sub the curry function out?

241
00:16:06.080 --> 00:16:10.903
It's not always built in.
&gt;&gt; Kyle Simpson: Curry,

242
00:16:10.903 --> 00:16:15.860
the function utility itself,
does not exist built into JavaScript.

243
00:16:15.860 --> 00:16:20.957
It is, however, provided in every
single functional programming library.

244
00:16:20.957 --> 00:16:23.090
But you can define it yourself or

245
00:16:23.090 --> 00:16:27.792
use a library.
&gt;&gt; Kyle Simpson: There is a utility built

246
00:16:27.792 --> 00:16:32.048
in the Java Script,
that does partial application,

247
00:16:32.048 --> 00:16:37.250
it is the bind utility the unfortunate
part about the bind utility

248
00:16:37.250 --> 00:16:43.510
like if I said foo.bind is that the first
argument to bind is for this context.

249
00:16:44.740 --> 00:16:48.350
And the subsequent arguments are for
partial application.

250
00:16:48.350 --> 00:16:52.490
So what they did is they took
these two really useful concepts.

251
00:16:52.490 --> 00:16:57.130
This context, partial application, they
stuck them together in the same utility.

252
00:16:58.210 --> 00:17:02.240
Now, there have been many times when
I've needed this context binding.

253
00:17:02.240 --> 00:17:05.590
There have been many, many more times
that I've need partial application.

254
00:17:05.590 --> 00:17:09.730
There's not a single time
in the entire 19 years of

255
00:17:09.730 --> 00:17:13.410
writing JavaScript that I ever
needed both at the same time.

256
00:17:13.410 --> 00:17:14.500
It's never once happened.

257
00:17:15.710 --> 00:17:19.840
I don't know why they stuck those two
together in the same utility because

258
00:17:19.840 --> 00:17:24.520
those are two really useful separate
activities that never get done together.

259
00:17:24.520 --> 00:17:28.130
It's just not a very common use case.

260
00:17:28.130 --> 00:17:32.270
So, if you want to use bind, the thing
that's built into JavaScript to do your

261
00:17:32.270 --> 00:17:36.460
partial application, you essentially just
have to skip over this parameter, just

262
00:17:36.460 --> 00:17:40.490
past null as the first argument, and then
everything else will be partially applied.

263
00:17:40.490 --> 00:17:45.963
So I could have said,
Add dot bind null comma ten and

264
00:17:45.963 --> 00:17:53.043
now I would get the add ten utility.
&gt;&gt; Kyle Simpson: But

265
00:17:53.043 --> 00:17:54.580
we don't have a built in curry yet.

266
00:17:54.580 --> 00:17:55.350
I wish we would.

267
00:17:55.350 --> 00:17:59.210
It would be nice and useful but for now,
you're just going to have to stick to

268
00:17:59.210 --> 00:18:01.800
using the ones that are built in to
functional programming libraries.

