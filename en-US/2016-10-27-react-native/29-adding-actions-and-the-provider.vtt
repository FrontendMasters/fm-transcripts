WEBVTT

1
00:00:00.000 --> 00:00:03.997
[MUSIC]

2
00:00:03.997 --> 00:00:06.324
&gt;&gt; Scott Moss: Now we're actually going
to go ahead and make those actions.

3
00:00:06.324 --> 00:00:09.060
So what we'll do is,
we'll make a new file here.

4
00:00:10.140 --> 00:00:11.800
Actually, the actions are pretty simple.

5
00:00:11.800 --> 00:00:15.446
So we'll just make those actions in line,
those are actually pretty simple.

6
00:00:15.446 --> 00:00:17.370
Let's head over to todo.js.

7
00:00:17.370 --> 00:00:22.080
And here we have our todo lists,
just like we had yesterday.

8
00:00:22.080 --> 00:00:24.580
So we're going to have to change
a lot of this stuff around, so

9
00:00:24.580 --> 00:00:30.990
I think the first thing we want to do is,
let's grab this part right here.

10
00:00:30.990 --> 00:00:33.600
So the input and the button.

11
00:00:33.600 --> 00:00:34.470
Let's take that out.

12
00:00:34.470 --> 00:00:36.900
And we'll make this another component,
right?

13
00:00:36.900 --> 00:00:39.810
So I'm just going to cut that out.

14
00:00:39.810 --> 00:00:44.210
That's literally just the view that's
encapsulating the text input in a button.

15
00:00:44.210 --> 00:00:46.170
I'm gonna take it out.

16
00:00:46.170 --> 00:00:47.530
I'm gonna make a new component.

17
00:00:47.530 --> 00:00:56.179
And we'll call it TodoForm.js.

18
00:00:56.179 --> 00:01:01.494
And I'm just gonna export const TodoForm.

19
00:01:01.494 --> 00:01:06.201
And I'm just going to make it a stateless
React component, which is just a function.

20
00:01:06.201 --> 00:01:09.464
And here's the ES6 trick,
if you just use parentheses like this,

21
00:01:09.464 --> 00:01:11.140
it's an implicit return.

22
00:01:11.140 --> 00:01:12.680
So I don't have to type
the return keyword.

23
00:01:12.680 --> 00:01:14.730
It's implied that I want to
return if I use parentheses.

24
00:01:14.730 --> 00:01:19.590
It's the same thing as doing
the brackets and then typing return.

25
00:01:19.590 --> 00:01:23.760
So I'm just gonna do that because I'm
returning one element or one root.

26
00:01:23.760 --> 00:01:25.065
So the thing I want to return is just this

27
00:01:25.065 --> 00:01:28.024
view right here.
&gt;&gt; Scott Moss: So

28
00:01:28.024 --> 00:01:30.098
I just gotta make sure I import those.

29
00:01:30.098 --> 00:01:37.353
View and TouchableOpacity.

30
00:01:37.353 --> 00:01:38.530
What else do we have?

31
00:01:38.530 --> 00:01:43.057
Text and TextInput.

32
00:01:43.057 --> 00:01:44.897
Let's break those onto multiple lines.

33
00:01:57.169 --> 00:01:58.780
&gt;&gt; Scott Moss: And we also need to import

34
00:01:58.780 --> 00:02:01.940
react at the top,
although we're not using it.

35
00:02:01.940 --> 00:02:03.011
There we go.
Yes?

36
00:02:03.011 --> 00:02:03.610
&gt;&gt; Speaker 2: Question.

37
00:02:03.610 --> 00:02:06.910
Could you explain
the action.payload again?

38
00:02:06.910 --> 00:02:08.290
&gt;&gt; Scott Moss: Action.payload

39
00:02:08.290 --> 00:02:10.066
is going to make more sense
when we use it right now.

40
00:02:10.066 --> 00:02:15.010
But basically, action.payload is
when we dispatch an action to Redux,

41
00:02:15.010 --> 00:02:18.890
the payload is the data that
we wanted to give the action.

42
00:02:18.890 --> 00:02:22.910
So in our example, the payload is
gonna be the new todo that we create.

43
00:02:22.910 --> 00:02:26.470
The payload is whatever data you
want to transform with the state.

44
00:02:26.470 --> 00:02:29.550
Whatever you need to make a new state,
that's what you send on the payload.

45
00:02:29.550 --> 00:02:33.408
So in our case, the only transformations
of the state that we did in our reducer

46
00:02:33.408 --> 00:02:35.054
was literally adding a new todo.

47
00:02:35.054 --> 00:02:37.570
So the payload is, in this case,
is only going to be the new todo.

48
00:02:38.700 --> 00:02:41.930
We just made it a standard
to always call it payload.

49
00:02:41.930 --> 00:02:43.660
So inside of all
the reducers that we make,

50
00:02:43.660 --> 00:02:46.980
we can just guarantee that the thing, the
state that's being passed in is going to

51
00:02:46.980 --> 00:02:49.240
be on the payload property so
we're not fishing for it,

52
00:02:49.240 --> 00:02:51.722
like where is this at?
&gt;&gt; Speaker 2: Follow up on that.

53
00:02:51.722 --> 00:02:54.552
Is this a function that will be

54
00:02:54.552 --> 00:02:57.776
called on a state?
&gt;&gt; Scott Moss: Is this a function that

55
00:02:57.776 --> 00:02:59.420
will be called on a state?

56
00:02:59.420 --> 00:03:02.112
Not sure what that means,
but this function,

57
00:03:02.112 --> 00:03:06.824
these reducers here are going to be called
by Redux, whenever we fire an action.

58
00:03:06.824 --> 00:03:10.916
So whenever we dispatch an action, Redux
is gonna go through all these reducers to

59
00:03:10.916 --> 00:03:13.140
determine what the new state is.

60
00:03:13.140 --> 00:03:16.300
These reducers are literally
being reduced.

61
00:03:16.300 --> 00:03:19.120
If you use the reduce method on arrays,
it's the same thing.

62
00:03:19.120 --> 00:03:21.670
It's just gonna reduce our
state down into a new state.

63
00:03:21.670 --> 00:03:24.120
This is how Redux determines
what the next state is.

64
00:03:24.120 --> 00:03:28.032
Given the old state, and given
the new actions, here's the new state.

65
00:03:28.032 --> 00:03:30.629
And that is re-renders all
the other components in our

66
00:03:30.629 --> 00:03:33.750
application.
&gt;&gt; Speaker 2: Another

67
00:03:33.750 --> 00:03:35.280
question.
&gt;&gt; Scott Moss: Yes?

68
00:03:35.280 --> 00:03:37.840
&gt;&gt; Speaker 2: Why is the import React from

69
00:03:37.840 --> 00:03:42.510
React necessary if it's
not used in todoForm.js?

70
00:03:42.510 --> 00:03:43.550
&gt;&gt; Scott Moss: So we're not using it, but

71
00:03:43.550 --> 00:03:45.080
these components are.

72
00:03:45.080 --> 00:03:48.280
And the React is not a global,
so we have to import it.

73
00:03:48.280 --> 00:03:51.447
Yes?
&gt;&gt; Speaker 3: Isn't it because JSX

74
00:03:51.447 --> 00:03:53.620
to use React?
&gt;&gt; Scott Moss: Exactly, yeah.

75
00:03:53.620 --> 00:03:55.240
So JSX is gonna be using it.

76
00:03:55.240 --> 00:03:58.632
These are actually just function calls
right here, which needs React, and

77
00:03:58.632 --> 00:03:59.593
React is not global.

78
00:03:59.593 --> 00:04:04.450
So we have to import at the top or
it will freak out.

79
00:04:04.450 --> 00:04:05.521
&gt;&gt; Speaker 4: In the todo

80
00:04:05.521 --> 00:04:06.710
form.
&gt;&gt; Scott Moss: Yes?

81
00:04:07.970 --> 00:04:09.640
&gt;&gt; Speaker 2: Why isn't there a render in

82
00:04:09.640 --> 00:04:11.194
there?
&gt;&gt; Scott Moss: Exactly, so

83
00:04:11.194 --> 00:04:14.717
there isn't a render here because,
let's go back to todo.js.

84
00:04:14.717 --> 00:04:18.810
Todo.js is a class that extends component,
right?

85
00:04:18.810 --> 00:04:21.850
So, it's a JavaScript class, and
there's methods on here, and

86
00:04:21.850 --> 00:04:23.820
one of the methods is render, right?

87
00:04:23.820 --> 00:04:26.380
And the reason you would make it like
this, the reason you make a component this

88
00:04:26.380 --> 00:04:29.280
way, is if you need it state,
and if you need it methods.

89
00:04:29.280 --> 00:04:30.454
So you would make a class.

90
00:04:30.454 --> 00:04:35.260
But todoForm,
we're actually not going to use any state.

91
00:04:35.260 --> 00:04:36.945
We're probably not gonna use any methods.

92
00:04:36.945 --> 00:04:38.900
And all we really need is just a view.

93
00:04:38.900 --> 00:04:42.650
So React came up with a super short way
to just create a stateless component

94
00:04:42.650 --> 00:04:43.410
by just returning it.

95
00:04:43.410 --> 00:04:44.890
So that's why we don't need to render.

96
00:04:44.890 --> 00:04:47.640
So if you have a function
that just returns a view,

97
00:04:47.640 --> 00:04:50.290
it will just create that view for you.

98
00:04:50.290 --> 00:04:53.280
So we may or
may not need to keep track of state.

99
00:04:53.280 --> 00:04:55.310
If we do,
we'll just convert this to a class.

100
00:04:55.310 --> 00:04:57.150
But for now we're gonna keep it like this.

101
00:04:57.150 --> 00:04:58.432
Cool, so we got that.

102
00:04:58.432 --> 00:05:01.170
The next thing I'm gonna do, I'm just
gonna make sure our styles are good.

103
00:05:01.170 --> 00:05:03.595
So I'm just gonna, what styles are here?

104
00:05:03.595 --> 00:05:06.596
Input new todo and button.

105
00:05:06.596 --> 00:05:12.060
So, no, input form and button,
and button text, okay.

106
00:05:13.390 --> 00:05:15.000
So we'll take that.

107
00:05:15.000 --> 00:05:20.088
We'll say form input button,
and button text.

108
00:05:20.088 --> 00:05:23.836
So we'll grab that, and
we'll head back over here.

109
00:05:23.836 --> 00:05:27.502
Get the style sheet, and
we'll make a new style sheet.

110
00:05:34.645 --> 00:05:35.260
&gt;&gt; Scott Moss: There we go.

111
00:05:35.260 --> 00:05:36.803
So our styles should be good to go.

112
00:05:36.803 --> 00:05:38.360
All that's good to go.

113
00:05:38.360 --> 00:05:40.408
And now all we have to do
is when we come back here,

114
00:05:40.408 --> 00:05:45.310
we could just import that back in,
up at the top.

115
00:05:45.310 --> 00:05:46.323
So we'll just import,

116
00:05:49.915 --> 00:05:56.866
&gt;&gt; Scott Moss: Our TodoForm from TodoForm.

117
00:05:56.866 --> 00:05:58.346
So now we have that component.

118
00:05:58.346 --> 00:06:03.509
And we're gonna put it exactly
where it was before, right here.

119
00:06:03.509 --> 00:06:05.293
TodoForm.

120
00:06:05.293 --> 00:06:09.150
And we're just gonna self close it.

121
00:06:09.150 --> 00:06:14.110
There we go.

122
00:06:14.110 --> 00:06:17.003
Okay, so it's going to throw some errors
because it's still using like some state

123
00:06:17.003 --> 00:06:19.450
and stuff, but we'll come back and
fix that when we get there.

124
00:06:19.450 --> 00:06:20.690
So that's the first step.

125
00:06:20.690 --> 00:06:22.200
We created a new component.

126
00:06:22.200 --> 00:06:23.733
Now what we need to do is,

127
00:06:23.733 --> 00:06:27.400
now that we have our TodoForm
inside of our Todo component.

128
00:06:28.430 --> 00:06:31.880
We need to wrap our Todo component
in what's called a provider.

129
00:06:31.880 --> 00:06:35.190
That way we pretty much just need to
connect the root of our application,

130
00:06:35.190 --> 00:06:38.140
which in this case is the Todo component,
to Redux.

131
00:06:38.140 --> 00:06:42.210
And the way we do that is we use the
connect method in Redux or React Redux.

132
00:06:42.210 --> 00:06:46.080
So we'll say import

133
00:06:46.080 --> 00:06:51.660
connect from react redux.

134
00:06:51.660 --> 00:06:57.270
Again, so we need to connect
the root of our component to redux.

135
00:06:57.270 --> 00:07:01.420
So if we if we do connect here,
this is going to allow us to get.

136
00:07:01.420 --> 00:07:04.010
Actually no,
we're not going to do this here.

137
00:07:04.010 --> 00:07:07.054
We need to do it on TodoForm.

138
00:07:07.054 --> 00:07:09.710
Actually what we're gonna do
here is we're gonna use provide.

139
00:07:09.710 --> 00:07:14.112
So instead of connect in here, what we're
actually gonna do is, if we head over to,

140
00:07:14.112 --> 00:07:17.773
in this case I'm using Android,
so I'll go over to index.Android.

141
00:07:17.773 --> 00:07:21.617
What we need to do is we have this one
component here that's literally just

142
00:07:21.617 --> 00:07:24.800
returned a Todo,
which is the root of our application.

143
00:07:24.800 --> 00:07:26.910
We need to wrap this in a provide.

144
00:07:26.910 --> 00:07:34.660
So we'll say import provide,
which is a component, from react redux.

145
00:07:34.660 --> 00:07:36.170
And we actually don't need this.

146
00:07:36.170 --> 00:07:38.710
This is just a utility component,
so we don't have to pass.

147
00:07:38.710 --> 00:07:42.752
If you don't use this provide component
in order to access the state or

148
00:07:42.752 --> 00:07:44.465
the store in our components,

149
00:07:44.465 --> 00:07:49.073
we have to use a hidden feature in react
that's not documented called context.

150
00:07:49.073 --> 00:07:50.970
And it's really hard to work with.

151
00:07:50.970 --> 00:07:53.330
So this keeps you from having to do that.

152
00:07:53.330 --> 00:07:55.660
So you don't have to
figure out what that is.

153
00:07:55.660 --> 00:07:59.617
So all we have to do now
is just wrap this Todo in

154
00:07:59.617 --> 00:08:05.908
provide.
&gt;&gt; Scott Moss: And

155
00:08:05.908 --> 00:08:08.409
then the reason they call
it provide is because,

156
00:08:08.409 --> 00:08:12.860
what's happening here is we're gonna
provide the Todo component with a store.

157
00:08:12.860 --> 00:08:14.490
So we already created a store.

158
00:08:14.490 --> 00:08:16.800
So we'll say store equals,
and then we'll go ahead and

159
00:08:16.800 --> 00:08:22.550
import the store that we made,
which was store from store.

160
00:08:24.210 --> 00:08:25.510
So we pass in our store here.

161
00:08:25.510 --> 00:08:29.860
So this is saying, I wanna provide
this store to this application, or

162
00:08:29.860 --> 00:08:31.370
this component here.

163
00:08:31.370 --> 00:08:36.659
So now every child component of Todo
is gonna have access to this store.

164
00:08:36.659 --> 00:08:37.553
That's what's happening here.

165
00:08:37.553 --> 00:08:39.884
Yes?
&gt;&gt; Speaker 2: Someone's questioning here,

166
00:08:39.884 --> 00:08:42.676
I think your syntax,
is it provider or provide?

167
00:08:42.676 --> 00:08:43.288
&gt;&gt; Scott Moss: Yeah, thank you,

168
00:08:43.288 --> 00:08:43.940
it's provider.

169
00:08:43.940 --> 00:08:45.370
I'm thinking of angular.

170
00:08:45.370 --> 00:08:47.550
Sorry, there we go, provider.

171
00:08:50.790 --> 00:08:51.290
There we go.

172
00:08:52.310 --> 00:08:53.260
So now we have this provider.

173
00:08:55.400 --> 00:08:56.802
What did I call it?

174
00:08:56.802 --> 00:09:00.440
Store export const store.

175
00:09:00.440 --> 00:09:01.854
All right, it's just freaking out.

176
00:09:01.854 --> 00:09:07.281
It's cuz it's inside a source app,
that's why.

177
00:09:07.281 --> 00:09:11.100
Source app, there we go.

178
00:09:11.100 --> 00:09:16.880
Okay, thank you.
&gt;&gt; Scott Moss: Great.

179
00:09:18.190 --> 00:09:19.470
Yeah, so that's still gonna break.

180
00:09:19.470 --> 00:09:21.090
Cool, so now we have our provider.

181
00:09:21.090 --> 00:09:22.149
We have our store.

182
00:09:22.149 --> 00:09:25.720
The next thing we need to do,
if we head over to back to the TodoForm,

183
00:09:25.720 --> 00:09:29.930
here's where we can actually like pass
some stuff in, and we can do some stuff.

184
00:09:31.270 --> 00:09:34.660
So now it's freaking out because
we're still using this.state and

185
00:09:34.660 --> 00:09:35.290
all this stuff here.

186
00:09:35.290 --> 00:09:37.742
So instead of using this.state
we're just going to use props.

187
00:09:37.742 --> 00:09:43.783
So we're gonna say props, and
we're gonna say props.newTodo.

188
00:09:43.783 --> 00:09:45.056
So when you make a stateless function,

189
00:09:45.056 --> 00:09:47.680
you get access to the properties
that come into your component.

190
00:09:47.680 --> 00:09:49.788
So let's just say we'll have
a property called new Todo.

191
00:09:49.788 --> 00:09:51.429
And we'll just bind to that.

192
00:09:51.429 --> 00:09:54.650
And also, we have these methods
here that says like handle change.

193
00:09:54.650 --> 00:09:56.440
We don't have a handle change here.

194
00:09:56.440 --> 00:09:58.940
We also don't have a handle press.

195
00:09:58.940 --> 00:10:02.030
So we'll just go ahead and
say those are gonna be other props, too.

196
00:10:02.030 --> 00:10:04.000
So props.handle change.

197
00:10:04.000 --> 00:10:14.480
And we don't need to bind any more.
&gt;&gt; Scott Moss: There we go.

198
00:10:14.480 --> 00:10:16.250
So it's still going to
be doing the same thing.

199
00:10:16.250 --> 00:10:18.180
We just need to actually
pass in these three props.

200
00:10:18.180 --> 00:10:20.185
We need to pass in a new Todo.

201
00:10:20.185 --> 00:10:25.249
We need to pass in a handle change, and
we also need to pass in handle press.

202
00:10:26.440 --> 00:10:28.930
So what we can do is we can come
over back up to this Todo here.

203
00:10:30.260 --> 00:10:32.610
We already have those methods,
handle press handle change.

204
00:10:32.610 --> 00:10:34.000
So what we can do is we
can come in here and

205
00:10:34.000 --> 00:10:36.830
we can just say, TodoForm, there you go.

206
00:10:38.330 --> 00:10:45.281
So your handle press is going to
be this.handlePress.bind this.

207
00:10:46.620 --> 00:10:50.956
And handleChange is
gonna be the same thing.

208
00:10:50.956 --> 00:10:58.291
This.handleChange.bind this.

209
00:10:58.291 --> 00:11:05.780
And then what we can do for the value
is we'll just have to make a new value.

210
00:11:05.780 --> 00:11:08.811
So it's already a new Todo,

211
00:11:08.811 --> 00:11:13.699
so we'll say, value is this.,
what did we call it?

212
00:11:13.699 --> 00:11:14.872
New Todo?

213
00:11:14.872 --> 00:11:19.655
Yeah, let's just call it
value to keep it the same.

214
00:11:19.655 --> 00:11:25.370
Props.value.

215
00:11:25.370 --> 00:11:31.510
So then we'll come here and
say this.state.newTodo.

216
00:11:31.510 --> 00:11:32.010
There we go.

217
00:11:33.240 --> 00:11:35.110
So now it's literally the same thing.

218
00:11:35.110 --> 00:11:36.710
We just passed in the props and stuff.

219
00:11:38.140 --> 00:11:43.940
Let's refresh this.
&gt;&gt; Scott Moss: There we go.

220
00:11:43.940 --> 00:11:44.910
So it's still there.

221
00:11:44.910 --> 00:11:46.075
Exactly the same thing.

222
00:11:46.075 --> 00:11:48.560
And if we type, it still works.

223
00:11:49.870 --> 00:11:50.840
See how we converted that over?

224
00:11:50.840 --> 00:11:52.731
That had absolutely nothing
to do with Redux, but

225
00:11:52.731 --> 00:11:54.090
I just wanted to convert that over.

226
00:11:54.090 --> 00:11:57.300
Because now we're about to convert over
the Todo list, which does use Redux.

227
00:11:57.300 --> 00:12:00.220
So when we start using props you'll
kind of understand why we did this.

228
00:12:00.220 --> 00:12:01.590
Does this makes sense?

229
00:12:01.590 --> 00:12:02.680
Why we did this like this?

230
00:12:02.680 --> 00:12:03.890
So now we have this component.

231
00:12:03.890 --> 00:12:06.799
Now we can use this form in
other places as well, and

232
00:12:06.799 --> 00:12:08.769
it's not tied down to just Todos.

233
00:12:08.769 --> 00:12:11.178
It's literally just the input and
a button, and

234
00:12:11.178 --> 00:12:14.830
it doesn't know anything else other
than the props that you pass to it.

235
00:12:14.830 --> 00:12:16.973
What to happen when we change the input?

236
00:12:16.973 --> 00:12:18.100
What value the input is?

237
00:12:18.100 --> 00:12:19.580
And what to happen when
we press the button?

238
00:12:19.580 --> 00:12:20.080
That’s it.

