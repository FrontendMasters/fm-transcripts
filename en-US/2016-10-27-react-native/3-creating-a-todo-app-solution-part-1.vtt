WEBVTT

1
00:00:00.000 --> 00:00:03.974
[MUSIC]

2
00:00:03.974 --> 00:00:07.487
&gt;&gt; Scott Moss: Let's just go over quickly
a simple Todo implementation here in React

3
00:00:07.487 --> 00:00:08.490
for the web.

4
00:00:08.490 --> 00:00:12.410
There's a few ways you can do this,
and I'll probably walk through one or

5
00:00:12.410 --> 00:00:14.710
two different ways we can do it.

6
00:00:14.710 --> 00:00:17.480
So a basic Todo app,
the first thing we want to do is,

7
00:00:17.480 --> 00:00:20.750
we know that we need to keep track of the
Todos that we've written here on the page.

8
00:00:20.750 --> 00:00:22.760
So inside of our constructor function,

9
00:00:22.760 --> 00:00:26.100
after we call super,
because we're extending component here,

10
00:00:26.100 --> 00:00:28.990
I'm just gonna set up a place where
we can actually store those todos.

11
00:00:28.990 --> 00:00:30.500
I'm just gonna call them todos.

12
00:00:30.500 --> 00:00:32.408
And it's gonna be an array.

13
00:00:32.408 --> 00:00:35.368
And then I'm gonna come down
here to our return, and

14
00:00:35.368 --> 00:00:38.880
I'm gonna set up some basic templating for
our todo app here.

15
00:00:38.880 --> 00:00:44.520
So let's just have a div and
then we use a form here.

16
00:00:44.520 --> 00:00:47.570
So we can use the enter button for
free and

17
00:00:47.570 --> 00:00:52.340
then what we'll do is we
need to have a input.

18
00:00:52.340 --> 00:00:56.090
So let's make a input and
let's put a placeholder.

19
00:00:56.090 --> 00:00:58.719
So there's new todo and

20
00:00:58.719 --> 00:01:03.985
it will also need a button
that will say create.

21
00:01:03.985 --> 00:01:07.184
And then underneath that form, that's
where we're just list all of our todos.

22
00:01:07.184 --> 00:01:12.211
So I'll just make a ul here and
then inside that ul I'm

23
00:01:12.211 --> 00:01:17.610
going to iterate over
the todos inside of our state.

24
00:01:17.610 --> 00:01:23.148
So using the brackets for
that interpolation JavaScript,

25
00:01:23.148 --> 00:01:31.468
I'll say this.state.todos.map which is
gonna give us access that individual todo.

26
00:01:31.468 --> 00:01:35.235
And then I'm just going to go ahead and

27
00:01:35.235 --> 00:01:40.307
return an li here for
each todo with a todo in there.

28
00:01:40.307 --> 00:01:45.160
So that's literally just iterating
over the todos array and then for

29
00:01:45.160 --> 00:01:47.343
each one return this element.

30
00:01:47.343 --> 00:01:49.950
That's what's happening here,
I'm just doing it all on one line.

31
00:01:49.950 --> 00:01:51.369
It's fancy.

32
00:01:51.369 --> 00:01:54.170
So we got that part.

33
00:01:54.170 --> 00:01:57.664
So the next thing we need to do is somehow
is capture the value of the input which is

34
00:01:57.664 --> 00:01:59.350
gonna be where we type in our new todo.

35
00:01:59.350 --> 00:02:04.390
And then on click,
add that new todo to our todos collection.

36
00:02:04.390 --> 00:02:05.780
So there's two ways we can do it.

37
00:02:05.780 --> 00:02:08.370
The first we can do it is you can keep
track of that state of the input.

38
00:02:08.370 --> 00:02:09.690
And that's what I will do first.

39
00:02:09.690 --> 00:02:13.800
So I'll just come in here,
and say, new todo on state.

40
00:02:13.800 --> 00:02:15.620
And I'm gonna set it to
empty string by default.

41
00:02:17.840 --> 00:02:23.919
Then I'm gonna come down to our input, and
I'm going to bind to this value prop here.

42
00:02:23.919 --> 00:02:29.806
And the value is going to
be this.state.newTodo.

43
00:02:29.806 --> 00:02:35.382
So that's gonna be a value for our input,
which is just going to be an empty string.

44
00:02:35.382 --> 00:02:40.112
But now when that value changes,
also once, I'm sorry when the input

45
00:02:40.112 --> 00:02:44.700
value changes, also wanna update
this.state.newTodos value.

46
00:02:44.700 --> 00:02:50.077
So what I can do is also I can use
the onChange property here and

47
00:02:50.077 --> 00:02:52.093
I can pass in a method.

48
00:02:52.093 --> 00:02:57.260
So let's just make of that it
we'll call this handleChange and

49
00:02:57.260 --> 00:03:01.747
it's gonna receive the event so
I'll just put e here.

50
00:03:01.747 --> 00:03:05.787
And because this event right
here is actually gonna be

51
00:03:05.787 --> 00:03:09.510
the change event that
happened on this input.

52
00:03:09.510 --> 00:03:14.514
So we can actually get
the value by saying,

53
00:03:14.514 --> 00:03:21.924
const we'll say value =,
&gt;&gt; Scott Moss: From the e.target.

54
00:03:21.924 --> 00:03:27.520
So I'm just gonna get the value here.

55
00:03:27.520 --> 00:03:28.360
This is just a shortcut.

56
00:03:28.360 --> 00:03:30.150
This is de-structuring.

57
00:03:30.150 --> 00:03:38.390
This is equivalent of just doing that,
it's the same thing.

58
00:03:38.390 --> 00:03:39.820
I just didn't wanna write value twice.

59
00:03:39.820 --> 00:03:43.288
So I did destructuring on the property or
an object.

60
00:03:43.288 --> 00:03:49.987
So we get the value there and then we need
to update the new todo with that value.

61
00:03:49.987 --> 00:03:53.026
So then we'll say this.setState,
which is a function and

62
00:03:53.026 --> 00:03:54.710
the state that we want to set.

63
00:03:54.710 --> 00:03:57.316
So the state you wanna set the new todo.

64
00:03:57.316 --> 00:03:59.950
And we wanna set that equal to
the value that we just got.

65
00:04:01.790 --> 00:04:06.360
So now when we type, and then we need
to come down to the onChange, and

66
00:04:06.360 --> 00:04:07.230
actually type in that method.

67
00:04:07.230 --> 00:04:12.920
So this.handleChange.bindthis.

68
00:04:12.920 --> 00:04:16.229
So now as we type the value updates,
let's just check that out right quick.

69
00:04:18.790 --> 00:04:19.835
I guess I need to serve it.

70
00:04:19.835 --> 00:04:24.960
&gt;&gt; [INAUDIBLE]
&gt;&gt; Scott Moss: Yeah,

71
00:04:24.960 --> 00:04:26.815
sorry about that,
that is kind of small, yeah.

72
00:04:26.815 --> 00:04:29.710
[LAUGH] Is that better?

73
00:04:29.710 --> 00:04:32.990
Is that better, yeah?

74
00:04:32.990 --> 00:04:34.910
Cool, I'll bump this, too, there we go.

75
00:04:35.950 --> 00:04:39.640
So now when we type,
the input updates as normally.

76
00:04:39.640 --> 00:04:41.790
But just to show you why
we actually needed that.

77
00:04:41.790 --> 00:04:48.250
If I got rid of the onChange, and left
the value, the input's not gonna update.

78
00:04:48.250 --> 00:04:51.400
Let's check it out.

79
00:04:51.400 --> 00:04:54.075
See, I'm actually typing right now, but

80
00:04:54.075 --> 00:04:58.906
the input's not updating because the
values is bound to whatever the state is

81
00:04:58.906 --> 00:05:02.340
which is never changing it's
always an empty stream.

82
00:05:02.340 --> 00:05:04.597
So, it doesn't matter what you type in,

83
00:05:04.597 --> 00:05:07.831
the value is always going to be
set to whatever the state is.

84
00:05:07.831 --> 00:05:11.910
So that's why we had to
put that onChange there.

85
00:05:11.910 --> 00:05:15.950
So now onChange, we're just updating the
state so that unidirectional data flow.

86
00:05:15.950 --> 00:05:20.130
So the input changes the state and
the state comes back around, and

87
00:05:20.130 --> 00:05:20.930
then changes the value.

88
00:05:22.420 --> 00:05:23.160
So we have that.

89
00:05:23.160 --> 00:05:27.150
And then on the button click, what we
wanna do, is we wanna take that value,

90
00:05:27.150 --> 00:05:30.780
and we wanna add it to our todos array.

91
00:05:30.780 --> 00:05:32.843
So we can do on here,
is we can say onClick.

92
00:05:35.016 --> 00:05:40.366
&gt;&gt; Scott Moss: And
then onClick, let's just

93
00:05:40.366 --> 00:05:44.902
say this.handleClick.

94
00:05:44.902 --> 00:05:47.190
And let's come in here,
make another method called handleClick.

95
00:05:50.190 --> 00:05:54.542
Now this also is gonna receive the click
event and because we're using a form, we

96
00:05:54.542 --> 00:05:58.972
wanna prevent the default, otherwise it's
going to try to send it to the server.

97
00:06:02.272 --> 00:06:02.860
&gt;&gt; Scott Moss: There we go.

98
00:06:02.860 --> 00:06:05.980
And then all we wanna do in here is just

99
00:06:05.980 --> 00:06:10.460
update the Todo state
with the newTodo state.

100
00:06:10.460 --> 00:06:15.170
So we can just say const todos =.

101
00:06:15.170 --> 00:06:16.880
We can make a new array here inline.

102
00:06:16.880 --> 00:06:21.660
And we can spread over
the already todo state.

103
00:06:21.660 --> 00:06:26.596
And then we just go ahead and
add in the new todo state,

104
00:06:26.596 --> 00:06:29.788
which is this.state.newTodo.

105
00:06:29.788 --> 00:06:34.263
And then now all we gotta
do is call set state.

106
00:06:34.263 --> 00:06:41.555
This.setState and
the state that we wanna set this todos.

107
00:06:41.555 --> 00:06:46.828
And I only have to write it once,
again, because it's the same name.

108
00:06:46.828 --> 00:06:49.454
The to do value is the same
name as the to do property,

109
00:06:49.454 --> 00:06:51.140
it's equivalent of doing this.

110
00:06:53.000 --> 00:06:55.543
So I can just do it once, sweet.

111
00:06:55.543 --> 00:06:59.000
Don't you also wanna set new todo?

112
00:06:59.000 --> 00:07:02.421
Yeah, and then I also want to overwrite,
I need to do to be a new string so

113
00:07:02.421 --> 00:07:05.790
it empties out the value, the input so
it's not stayed in there.

114
00:07:05.790 --> 00:07:08.910
Nice, so let's check this out.

115
00:07:11.280 --> 00:07:13.240
So if we say, clean up.

116
00:07:14.590 --> 00:07:16.350
We get the clean up the value emptied out.

117
00:07:19.440 --> 00:07:20.900
Lift, code, there we go.

118
00:07:20.900 --> 00:07:23.110
So that's one way to do it.

119
00:07:23.110 --> 00:07:26.420
Another way we could have done,
actually, any questions on that so far?

120
00:07:29.940 --> 00:07:31.743
No?
&gt;&gt; Speaker 2: I wasn't sure if I caught

121
00:07:31.743 --> 00:07:34.040
how I cleaned out the the value.

122
00:07:34.040 --> 00:07:35.294
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 2: Aside from setting the state

123
00:07:35.294 --> 00:07:36.290
was there something else?

124
00:07:36.290 --> 00:07:37.340
&gt;&gt; Scott Moss: Nope, that's it.

125
00:07:37.340 --> 00:07:38.240
We just set the state, and

126
00:07:38.240 --> 00:07:41.790
that's because the input is always
gonna be bound to that state.

127
00:07:41.790 --> 00:07:44.250
So whatever that state is,
that's the value of the input.

128
00:07:44.250 --> 00:07:47.570
It's not whatever the person types in,
it's whatever this state is.

129
00:07:47.570 --> 00:07:48.790
&gt;&gt; Speaker 2: That's the part
I didn't figure out on mine.

130
00:07:48.790 --> 00:07:49.290
&gt;&gt; Scott Moss: Yeah.

