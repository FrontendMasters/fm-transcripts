WEBVTT

1
00:00:00.035 --> 00:00:04.189
[MUSIC]

2
00:00:04.189 --> 00:00:07.301
&gt;&gt; Scott Moss: What I wanna do now,
actually is we're actually gonna hook our

3
00:00:07.301 --> 00:00:09.860
Todo app up to the server,
but there is no server.

4
00:00:09.860 --> 00:00:11.301
So we need to make a quick server,
right quick.

5
00:00:11.301 --> 00:00:15.096
And it's gonna take like one second, you
don't even have to write any code really.

6
00:00:15.096 --> 00:00:20.386
So if you could just head
over to your terminal, and

7
00:00:20.386 --> 00:00:25.675
if you just type in npm install,
I'm gonna put i for

8
00:00:25.675 --> 00:00:29.626
short, and --save json-server.

9
00:00:29.626 --> 00:00:31.731
You can do this locally or
globally, it's up to you.

10
00:00:31.731 --> 00:00:32.895
I already have it globally.

11
00:00:32.895 --> 00:00:38.800
So actually, I'm just gonna install it
globally to make sure, so json-server.

12
00:00:38.800 --> 00:00:40.588
So this, literally,
you give it a JSON file and

13
00:00:40.588 --> 00:00:42.190
it creates a RESTful server for you.

14
00:00:42.190 --> 00:00:42.730
It's super easy.

15
00:00:44.420 --> 00:00:45.929
So, we'll just have this JSON Server here.

16
00:00:45.929 --> 00:00:49.077
So once you have that, just head over
to the app that we're working on.

17
00:00:49.077 --> 00:00:54.201
And on the root of the app,
just create a new file,

18
00:00:54.201 --> 00:00:58.229
and you can call it data, or db.json.

19
00:00:58.229 --> 00:01:02.858
And it's just gonna be a JSON file
that has a todos property whose

20
00:01:02.858 --> 00:01:04.590
value is a empty array.

21
00:01:04.590 --> 00:01:06.599
And that's it, that's all you gotta do.

22
00:01:13.952 --> 00:01:17.332
&gt;&gt; Scott Moss: So just make any
filename you want, I put db.json.

23
00:01:17.332 --> 00:01:20.930
And just make sure this is an object
with the todos array in it.

24
00:01:22.080 --> 00:01:22.580
That's it.

25
00:01:24.630 --> 00:01:29.234
So once you have that, and
once you have json-server started,

26
00:01:29.234 --> 00:01:33.754
in a new tab, you can just run
json-server followed by the name

27
00:01:33.754 --> 00:01:37.609
of the file you wanna serve,
it's database.json.

28
00:01:37.609 --> 00:01:44.665
And hit Enter, it created a new
API Server right here on 3000.

29
00:01:44.665 --> 00:01:46.400
And we can actually go take a look at it.

30
00:01:46.400 --> 00:01:48.470
It's pretty cool if you
haven't used this before.

31
00:01:49.840 --> 00:01:50.600
There it is.

32
00:01:50.600 --> 00:01:51.530
Here's our JSON Server.

33
00:01:51.530 --> 00:01:55.280
Here's our resource, has a todos
resource that we can do CRUD on.

34
00:01:55.280 --> 00:01:58.160
So we can post to this todos like this.

35
00:01:58.160 --> 00:02:03.368
So I can come in here and
I can post whatever I want,

36
00:02:03.368 --> 00:02:08.206
I can say http localhost:3000/todos.

37
00:02:08.206 --> 00:02:14.186
And I wanna create a new todo
that has a name called cleanup.

38
00:02:14.186 --> 00:02:16.083
And I posted it and it gave it a id of 1.

39
00:02:16.083 --> 00:02:19.320
And then the value that I posted,
which was cleanup.

40
00:02:19.320 --> 00:02:21.980
So now if I go look at it,
it should be there.

41
00:02:21.980 --> 00:02:22.480
There it is.

42
00:02:25.238 --> 00:02:28.352
And it also, it does that because
it has rights to the file.

43
00:02:30.962 --> 00:02:32.668
&gt;&gt; Scott Moss: Pretty cool, so
that's gonna be our API server for

44
00:02:32.668 --> 00:02:33.390
our app right quick.

45
00:02:35.020 --> 00:02:36.646
So we have that, if you just-
&gt;&gt; Speaker 2: What was the command to

46
00:02:36.646 --> 00:02:37.220
start it?

47
00:02:37.220 --> 00:02:41.242
&gt;&gt; Scott Moss: Yeah, the command was
the exact same with the package,

48
00:02:41.242 --> 00:02:44.675
it's just json-server
followed by the file.

49
00:02:44.675 --> 00:02:47.010
Which in this case,
was whatever file you wanted to use.

50
00:02:47.010 --> 00:02:47.955
I used db.json.

51
00:02:50.329 --> 00:02:52.330
&gt;&gt; Scott Moss: Yeah, so if you just
run that, you've got a RESTful server.

52
00:02:52.330 --> 00:02:56.524
You can do all CRUD on it,
not just POST or GET, like, anything.

53
00:02:56.524 --> 00:02:58.013
It's pretty cool.

54
00:02:58.013 --> 00:02:59.850
Pretty good way to prototype some stuff.

55
00:03:02.100 --> 00:03:07.298
All right, so now, once you have that,
then the challenge is or

56
00:03:07.298 --> 00:03:11.653
the exercise is going to be actually,
get, go away.

57
00:03:11.653 --> 00:03:19.151
It's gonna be actually using the server
instead of, let's go up to the todo.

58
00:03:19.151 --> 00:03:22.976
Instead of storing our state
locally here in the component,

59
00:03:22.976 --> 00:03:26.876
we're gonna use the server to
fetch the data, the state, and

60
00:03:26.876 --> 00:03:29.660
post it back to the server
when we change it.

61
00:03:30.830 --> 00:03:34.200
So I'll start off with just one
example what that will look like.

62
00:03:34.200 --> 00:03:35.252
So first, let's say,

63
00:03:35.252 --> 00:03:39.372
let me switch this back,
&gt;&gt; Scott Moss: To Todo.

64
00:03:45.159 --> 00:03:47.868
&gt;&gt; Scott Moss: Is it still running?

65
00:03:47.868 --> 00:03:49.371
Did I stop it?

66
00:03:49.371 --> 00:03:52.330
Naw, I didn't stop it,
let's just run it again just in case.

67
00:03:54.700 --> 00:03:55.830
So an example of that would be,

68
00:03:55.830 --> 00:03:59.280
let's actually just create a todo and
see how that will look like.

69
00:03:59.280 --> 00:04:04.470
So on create todo, which is on this Press
right here, instead of setting the state,

70
00:04:04.470 --> 00:04:07.920
what I would do is,
I'm gonna comment that out for now.

71
00:04:07.920 --> 00:04:11.860
I don't even really need
the todos either right now either.

72
00:04:11.860 --> 00:04:15.995
So on Press, what I would do is I would
just get the todo value, which would be,

73
00:04:18.468 --> 00:04:21.411
&gt;&gt; Scott Moss: this.state.newTodo,

74
00:04:21.411 --> 00:04:26.892
I would just say fetch and
method, post, body,

75
00:04:26.892 --> 00:04:33.187
which would be the body that
I wanna post of the new Todo.

76
00:04:33.187 --> 00:04:36.627
So I'll say all todos
have a name property, and

77
00:04:36.627 --> 00:04:40.673
that name property is gonna
be this.state.newTodo.

78
00:04:40.673 --> 00:04:47.830
And headers, I'll say Content-Type,

79
00:04:47.830 --> 00:04:53.148
which is application/json,

80
00:04:53.148 --> 00:04:56.222
so I'll do that.

81
00:04:59.478 --> 00:05:04.197
&gt;&gt; Scott Moss: And
then I'll do the same thing we did before,

82
00:05:04.197 --> 00:05:09.401
which was get the json, and
then get the data back.

83
00:05:09.401 --> 00:05:10.982
I don't know what JSON Server sends back.

84
00:05:10.982 --> 00:05:12.590
Hopefully it'll send back the whole thing.

85
00:05:14.190 --> 00:05:19.052
And then we'll do
this.setState with that data.

86
00:05:21.540 --> 00:05:23.165
&gt;&gt; Scott Moss: With
the new todos actually.

87
00:05:23.165 --> 00:05:26.692
So then, yeah, this is where we'll
update the new todos with that state.

88
00:05:32.416 --> 00:05:39.908
&gt;&gt; Scott Moss: So this has state.todos
plus that data that came back.

89
00:05:39.908 --> 00:05:41.045
So something like that.

90
00:05:48.293 --> 00:05:51.010
&gt;&gt; Scott Moss: So
let's see if this actually works.

91
00:05:52.500 --> 00:05:54.416
So first thing, I forgot to put the url.

92
00:05:54.416 --> 00:05:56.391
There we go,
that's the most important thing.

93
00:05:56.391 --> 00:06:03.787
So localhost:3000/todos.

94
00:06:03.787 --> 00:06:06.800
There we go, so now when we press it,

95
00:06:06.800 --> 00:06:11.581
it should go out there and
then we also wanna do this, too.

96
00:06:17.398 --> 00:06:17.898
&gt;&gt; Scott Moss: There we go.

97
00:06:19.810 --> 00:06:24.013
But this is going to break

98
00:06:24.013 --> 00:06:29.222
because it is now todo.name.

99
00:06:29.222 --> 00:06:31.719
So now if we type in some stuff,

100
00:06:31.719 --> 00:06:36.822
let me refresh just to make sure
the hot reload is not sticking.

101
00:06:36.822 --> 00:06:41.054
There we go, and I say clean up, hit make,

102
00:06:41.054 --> 00:06:44.591
it looks like something happened.

103
00:06:44.591 --> 00:06:48.127
Let's look at the,
I don't have the server on, oops.

104
00:06:52.999 --> 00:06:54.190
&gt;&gt; Scott Moss: Let's turn it on.

105
00:06:54.190 --> 00:06:56.173
There we go.

106
00:06:56.173 --> 00:06:57.324
&gt;&gt; Scott Moss: I'll turn the server on.

107
00:07:08.040 --> 00:07:12.522
&gt;&gt; Scott Moss: I got it, there we go.

108
00:07:12.522 --> 00:07:17.152
Cool, turn the server on, clean up,

109
00:07:17.152 --> 00:07:20.783
make and we get error string.

110
00:07:20.783 --> 00:07:25.444
Dynamic type string but had type object,
constructing arguments.

111
00:07:25.444 --> 00:07:31.145
Yeah, you have to actually JSON
stringify this yourself, I forgot.

112
00:07:31.145 --> 00:07:36.783
And again, this is not React Native,
this is literally window.fetch.

113
00:07:36.783 --> 00:07:38.137
You gotta do this in a web too.

114
00:07:38.137 --> 00:07:39.868
It's kind of aggravating.

115
00:07:39.868 --> 00:07:41.883
Why have to stringify this myself?

116
00:07:41.883 --> 00:07:44.175
Why do I have to say
application type JSON?

117
00:07:44.175 --> 00:07:45.664
It should just know.

118
00:07:45.664 --> 00:07:46.920
But, you have to do it yourself.

119
00:07:49.290 --> 00:07:50.679
That's what it was freaking out about.

120
00:07:54.209 --> 00:07:55.097
&gt;&gt; Scott Moss: There we go.

121
00:08:01.143 --> 00:08:03.352
&gt;&gt; Scott Moss: Okay,
why are you still freaking out?

122
00:08:03.352 --> 00:08:05.415
Let's see, maybe it didn't refresh.

123
00:08:13.985 --> 00:08:17.049
&gt;&gt; Scott Moss: What do you want?

124
00:08:17.049 --> 00:08:19.567
All right, let's see,
maybe they changed this.

125
00:08:33.868 --> 00:08:35.339
&gt;&gt; Scott Moss: They don't
even have it in their docs.

126
00:08:35.339 --> 00:08:41.431
[LAUGH]
&gt;&gt; Scott Moss: Well, that's awesome.

127
00:08:47.812 --> 00:08:50.340
&gt;&gt; Scott Moss: Luckily it's a web standard
and we can just look it up elsewhere.

128
00:08:52.379 --> 00:08:57.227
&gt;&gt; Scott Moss: Or
the best place is GitHub,

129
00:08:57.227 --> 00:09:00.257
fetch polyfill.

130
00:09:00.257 --> 00:09:01.341
There we go.

131
00:09:08.758 --> 00:09:11.137
&gt;&gt; Scott Moss: Okay,
looks like I was wrong.

132
00:09:11.137 --> 00:09:13.292
It was actually like this.

133
00:09:15.761 --> 00:09:20.923
&gt;&gt; Scott Moss: url still goes first,
object is still gonna be second there.

134
00:09:20.923 --> 00:09:24.526
That's what it was freaking out about.

135
00:09:24.526 --> 00:09:25.765
Live debugging.

136
00:09:28.823 --> 00:09:31.521
&gt;&gt; Scott Moss: All right,
now, if we do this.

137
00:09:35.025 --> 00:09:40.450
&gt;&gt; Scott Moss: Unexpected URL,
okay, http, there we go.

138
00:09:48.819 --> 00:09:50.770
&gt;&gt; Scott Moss: There we go, okay, sweet.

139
00:09:50.770 --> 00:09:51.882
So that one worked this time.

140
00:09:51.882 --> 00:09:54.680
I got an unhandled promise rejection,
which is what I was expecting.

141
00:09:56.410 --> 00:09:58.810
But it definitely went through.

142
00:09:58.810 --> 00:10:03.574
I just need to actually catch this
error to see what was going on.

143
00:10:03.574 --> 00:10:04.759
I'm not gonna do that right now.

144
00:10:04.759 --> 00:10:06.686
We'll do that in the solution.

145
00:10:06.686 --> 00:10:11.991
Sweet, so that's what you need to do
now using your API, just go ahead and

146
00:10:11.991 --> 00:10:16.870
post to the API, and then figure out
how to get it back from the API and

147
00:10:16.870 --> 00:10:19.022
list it in your application.

148
00:10:19.022 --> 00:10:20.718
And however you want to do that,
that's totally up to you.

149
00:10:20.718 --> 00:10:22.413
There's a few ways you can do it.

150
00:10:22.413 --> 00:10:25.722
But we'll do that, and
then it is 2:37 now,

151
00:10:25.722 --> 00:10:29.940
we'll come back at 3:00 and
we'll go over the solution.

