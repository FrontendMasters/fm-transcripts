WEBVTT

1
00:00:00.000 --> 00:00:04.142
[MUSIC]

2
00:00:04.142 --> 00:00:06.257
&gt;&gt; Scott Moss: Our first exercise,
what we're gonna do is actually we're

3
00:00:06.257 --> 00:00:08.490
gonna create a Todo app
with React on the web.

4
00:00:08.490 --> 00:00:09.300
Just as a refresher so

5
00:00:09.300 --> 00:00:12.130
everybody can get familiar with
React if you never used it before.

6
00:00:12.130 --> 00:00:13.770
If you have used it,
this will be pretty simple.

7
00:00:15.340 --> 00:00:19.240
Here's a link to a starter I just
pushed up on the FrontEndMasters GitHub

8
00:00:19.240 --> 00:00:22.200
that's got everything you need to just
get started with the React web app.

9
00:00:22.200 --> 00:00:23.604
Now all you gotta do is
just start writing code.

10
00:00:23.604 --> 00:00:26.519
It's already got Webpack,
everything installed for you.

11
00:00:26.519 --> 00:00:29.997
Just look at the readme and
run npm install, npm start and

12
00:00:29.997 --> 00:00:31.605
start writing your code.

13
00:00:31.605 --> 00:00:34.524
It'll live reload and everything for you.

14
00:00:34.524 --> 00:00:35.560
So that's the first exercise.

15
00:00:35.560 --> 00:00:40.065
Before we hop into it, let's just walk
through some of the basic stuff through

16
00:00:40.065 --> 00:00:42.420
React, then I'll set you all free.

17
00:00:42.420 --> 00:00:44.750
If you already know React,
feel free to go ahead.

18
00:00:44.750 --> 00:00:47.920
For the people who aren't
really familiar with React,

19
00:00:47.920 --> 00:00:49.400
this is your chance to learn a little bit.

20
00:00:50.670 --> 00:00:53.600
So if you do have that starter repo,

21
00:00:53.600 --> 00:00:58.006
there's going to be a file
source/app/todo.js.

22
00:00:58.006 --> 00:01:00.640
So basically what you're gonna be
doing here is creating a Todo app.

23
00:01:00.640 --> 00:01:04.648
We're gonna create a basic Todo app here,
in React.

24
00:01:04.648 --> 00:01:09.970
So actually, I'm just going
to get rid of all this stuff.

25
00:01:11.630 --> 00:01:13.880
Wait, no, we'll keep that
because that's not important.

26
00:01:13.880 --> 00:01:15.640
Actually, let's just focus on this.

27
00:01:15.640 --> 00:01:21.360
So most of this stuff is very independent
from React Native and only works for

28
00:01:21.360 --> 00:01:27.030
the web like for instance, remember I
said ReactDOM was separated from React.

29
00:01:27.030 --> 00:01:29.030
It's a completely different package, and

30
00:01:29.030 --> 00:01:31.640
that's because we want to render
the components in the DOM.

31
00:01:31.640 --> 00:01:34.150
So that's completely separate, but
we're gonna focus on the React part.

32
00:01:34.150 --> 00:01:36.811
So if we head over to todo.js.

33
00:01:36.811 --> 00:01:39.779
This is where this is
exactly like React Native.

34
00:01:39.779 --> 00:01:41.930
It's literally the same thing.

35
00:01:41.930 --> 00:01:44.280
So in here, let's just go over some
of the stuff that's happening.

36
00:01:44.280 --> 00:01:46.480
Let's actually just get
rid of this right quick.

37
00:01:46.480 --> 00:01:49.309
So the first thing we did
was we imported React and

38
00:01:49.309 --> 00:01:51.939
then we imported this
component from React.

39
00:01:51.939 --> 00:01:55.779
And then,
because we have access to ES2015 syntax,

40
00:01:55.779 --> 00:02:00.440
we can just go ahead and
expose this module with the export.

41
00:02:00.440 --> 00:02:04.557
And then we can say class followed
by the name that we want.

42
00:02:04.557 --> 00:02:11.560
And we want to extend the component
class that React provides for us.

43
00:02:11.560 --> 00:02:16.029
This is literally just like inheritance
in regular JavaScript if you've

44
00:02:16.029 --> 00:02:17.117
never used ES6.

45
00:02:17.117 --> 00:02:18.749
This is just some sugar
on top of inheritance.

46
00:02:20.570 --> 00:02:25.406
And all we really need to do at
a minimum is expose a render method

47
00:02:25.406 --> 00:02:30.260
that just returns the UI for
the component that we're making.

48
00:02:30.260 --> 00:02:35.230
So the component we're making is Todo and
we just need to return the UI for it.

49
00:02:35.230 --> 00:02:37.577
And this is all JSX, yes?
&gt;&gt; Speaker 2: Sorry,

50
00:02:37.577 --> 00:02:38.943
there's a pretty big delay.

51
00:02:38.943 --> 00:02:40.770
This question kind of
goes back a little bit.

52
00:02:40.770 --> 00:02:45.462
So the question is,
any React Native support for SVGs apps?

53
00:02:45.462 --> 00:02:47.086
&gt;&gt; Scott Moss: For SVGs apps, well,

54
00:02:47.086 --> 00:02:50.516
there is support for
SVG in React Native, yes.

55
00:02:50.516 --> 00:02:54.696
There's tons of libraries out there for
animating, drawing SVGs,

56
00:02:54.696 --> 00:02:57.083
manipulating them, importing them.

57
00:02:57.083 --> 00:02:58.966
Yes, tons for sure.

58
00:02:58.966 --> 00:03:03.135
And most of them use
the Native support to SVGs and

59
00:03:03.135 --> 00:03:08.843
not a JavaScript implemented version
of SVGs if that makes sense.

60
00:03:08.843 --> 00:03:11.970
Cool, nice.

61
00:03:11.970 --> 00:03:13.140
So yeah, the syntax.

62
00:03:13.140 --> 00:03:14.753
Let's just go over JSX right quick.

63
00:03:14.753 --> 00:03:19.040
So remember I said it's like XML, or
it's like JavaScript in your templates.

64
00:03:19.040 --> 00:03:22.459
So normally in other frameworks,
if you want to write a template,

65
00:03:22.459 --> 00:03:26.560
you come in here and you do some strings,
right, and you write some templates.

66
00:03:26.560 --> 00:03:29.470
But because we have JSX,
we don't have to do that.

67
00:03:29.470 --> 00:03:35.160
So now I can just write something
like a div like that in line and

68
00:03:35.160 --> 00:03:38.290
it's just regular HTML almost.

69
00:03:38.290 --> 00:03:40.300
There's some slight differences.

70
00:03:40.300 --> 00:03:42.540
So we can say like hello.

71
00:03:42.540 --> 00:03:44.280
I would say that.

72
00:03:44.280 --> 00:03:47.879
And all you gotta do is just
run npm start on that and

73
00:03:47.879 --> 00:03:52.079
it should just serve it on port 5040 so
let's go look at

74
00:03:52.079 --> 00:03:57.536
that.
&gt;&gt; Scott Moss: Cool,

75
00:03:57.536 --> 00:04:02.680
so there we go, we have hello.
&gt;&gt; Scott Moss: And then,

76
00:04:02.680 --> 00:04:05.934
if you wanna do things like inputs and
buttons, let's go over that right quick.

77
00:04:05.934 --> 00:04:09.350
So a input would literally just be
an HTML input that you would have,

78
00:04:11.030 --> 00:04:12.000
nothing different here.

79
00:04:12.000 --> 00:04:15.410
And then a button, you guessed it,
is literally just a button.

80
00:04:16.990 --> 00:04:19.990
So it looks like HTML, it's really JSX.

81
00:04:19.990 --> 00:04:21.570
So this is just the basics of it.

82
00:04:21.570 --> 00:04:24.230
But the powerful stuff that we can
actually do with it is if we wanna

83
00:04:24.230 --> 00:04:25.200
manipulate data.

84
00:04:25.200 --> 00:04:26.587
So for instance,

85
00:04:26.587 --> 00:04:30.709
let's say we have some data here, yes?
&gt;&gt; Mark: I thought you could only

86
00:04:30.709 --> 00:04:33.385
return one element.
&gt;&gt; Scott Moss: Yes, you know what?

87
00:04:33.385 --> 00:04:34.692
That is right, thank you.

88
00:04:34.692 --> 00:04:36.504
We were gonna run into that
error when I saved it,

89
00:04:36.504 --> 00:04:38.850
so I'm glad you caught it before we did.

90
00:04:38.850 --> 00:04:40.710
So what Mark was saying,
you can only return one element.

91
00:04:41.750 --> 00:04:42.250
He's right.

92
00:04:43.620 --> 00:04:48.448
You use so many template languages,
you forget the nuances sometimes.

93
00:04:48.448 --> 00:04:49.710
There we go.

94
00:04:49.710 --> 00:04:51.320
So now, that won't break.

95
00:04:51.320 --> 00:04:52.232
So like I said,

96
00:04:52.232 --> 00:04:56.955
the powerful stuff comes when you actually
want to manipulate data in your JSX.

97
00:04:56.955 --> 00:04:58.630
This is actually really, really cool.

98
00:04:58.630 --> 00:05:00.700
So let's say we had some data and
actually,

99
00:05:00.700 --> 00:05:05.290
we'll just make it out here cuz I don't
know what stage of ES6 I have on here.

100
00:05:05.290 --> 00:05:06.349
So we'll just say const.

101
00:05:08.630 --> 00:05:10.290
So let's make some data.

102
00:05:10.290 --> 00:05:14.327
Const items and it'll just be an array of,

103
00:05:14.327 --> 00:05:21.680
let's just call it nums for now.
&gt;&gt; Scott Moss: There we go.

104
00:05:21.680 --> 00:05:23.870
So now if we actually
wanna list those numbers,

105
00:05:23.870 --> 00:05:27.870
what we can do is we can come down here
and we can just do regular JavaScript.

106
00:05:27.870 --> 00:05:32.070
So we can do these curlies right here,
which means we wanna do some JavaScript,

107
00:05:32.070 --> 00:05:33.100
and not some JSX.

108
00:05:33.100 --> 00:05:37.493
So inside of here,
what we can do is we can get the nums, and

109
00:05:37.493 --> 00:05:40.467
we can call it .map cuz it's an array.

110
00:05:40.467 --> 00:05:44.443
And we could access that individual
number, and we're just going to implicitly

111
00:05:44.443 --> 00:05:47.087
return because we're doing
it on the same line here.

112
00:05:47.087 --> 00:05:49.637
With ES6,
we don't have to put the Return key.

113
00:05:49.637 --> 00:05:54.257
I'm just gonna return a h3 with the num in

114
00:05:54.257 --> 00:05:59.002
there.
&gt;&gt; Scott Moss: So

115
00:05:59.002 --> 00:06:04.710
now if we go look at that,
&gt;&gt; Scott Moss: We'll have the nums.

116
00:06:04.710 --> 00:06:09.030
But because I put the word num in there,
you see that it only just says num.

117
00:06:09.030 --> 00:06:11.927
So this is where the other part comes in,
we could just use interpolation.

118
00:06:11.927 --> 00:06:15.559
So if we just wrapped
this in brackets again,

119
00:06:15.559 --> 00:06:21.720
now it's actually gonna refer to
the variable num and not the word num.

120
00:06:21.720 --> 00:06:29.664
So now we have the numbers.
&gt;&gt; Scott Moss: So

121
00:06:29.664 --> 00:06:35.113
that's the data binding in
the JavaScript manipulation part of JSX.

122
00:06:35.113 --> 00:06:40.470
Some other cool stuff or some of the other
differences, I guess, is eventing.

123
00:06:40.470 --> 00:06:46.490
So if you want to use events in JSX,
you can actually just subscribe to them or

124
00:06:46.490 --> 00:06:50.553
you can refer to them right
on the actual template.

125
00:06:50.553 --> 00:06:56.014
So for a button, we can say onClick,
&gt;&gt; Scott Moss: Followed

126
00:06:56.014 --> 00:06:59.495
by the method we want to run
when we click so onClick,

127
00:06:59.495 --> 00:07:03.784
let's actually make a method and
we'll just say handleClick.

128
00:07:07.975 --> 00:07:10.709
&gt;&gt; Scott Moss: And actually this is, yeah.

129
00:07:10.709 --> 00:07:13.397
So we'll say handleClick and

130
00:07:13.397 --> 00:07:18.449
what we'll do is we're gonna
get access to the event and

131
00:07:18.449 --> 00:07:25.186
we'll just say nums.push,
&gt;&gt; Scott Moss: Another number, 5.

132
00:07:25.186 --> 00:07:26.403
There we go.

133
00:07:26.403 --> 00:07:28.128
So well push a number in there.

134
00:07:28.128 --> 00:07:34.319
And then onClick, what we wanna do is we
wanna say this.handleClick.bind(this).

135
00:07:34.319 --> 00:07:38.279
And the reason that I do .bind is
because there's just a bug going

136
00:07:38.279 --> 00:07:40.727
on with auto binding in the ES6 syntax so

137
00:07:40.727 --> 00:07:46.646
we'll have to bind it.
&gt;&gt; Scott Moss: Now,

138
00:07:46.646 --> 00:07:49.558
if we come back here, Refresh,
and we click this button.

139
00:07:49.558 --> 00:07:54.131
It's not working because
let's put a key property on

140
00:07:54.131 --> 00:07:58.790
these bad boys.
&gt;&gt; Scott Moss: There we go.

141
00:08:00.150 --> 00:08:04.690
So we got that and
now if we come down here, and Refresh,

142
00:08:06.810 --> 00:08:13.090
still not working because,
why are you not working?

143
00:08:14.220 --> 00:08:17.667
onClick this.handleClick,
let's see what's going on here.

144
00:08:17.667 --> 00:08:19.322
I think it's something to do
with the auto binding stuff.

145
00:08:27.261 --> 00:08:28.156
&gt;&gt; Scott Moss: That's there.

146
00:08:28.156 --> 00:08:29.678
&gt;&gt; Speaker 4: Is it not rerendering?

147
00:08:29.678 --> 00:08:31.239
&gt;&gt; Scott Moss: It's not rerendering

148
00:08:31.239 --> 00:08:36.670
because this is outside, that's why, so
I need to put this inside the state.

149
00:08:36.670 --> 00:08:38.190
Let's do that right quick.

150
00:08:38.190 --> 00:08:44.390
So we can do on constructor function here.

151
00:08:44.390 --> 00:08:49.186
And we can just say, make sure we call
super, otherwise babble will freak out.

152
00:08:49.186 --> 00:08:55.941
This.state = nums.

153
00:08:55.941 --> 00:08:59.850
And we'll just put this array here,
there we go.

154
00:08:59.850 --> 00:09:05.600
So we got the nums there and then we just
need to change this to this.setState

155
00:09:05.600 --> 00:09:10.230
which is gonna allow us to actually
set the state of our component.

156
00:09:10.230 --> 00:09:15.430
So whenever you call a setState or
whatever new props come into a component,

157
00:09:15.430 --> 00:09:17.480
this render method is called again.

158
00:09:17.480 --> 00:09:20.660
So whenever the state changes,
it re-renders itself with a new state.

159
00:09:20.660 --> 00:09:24.957
So instead of going to update just
this one part that changed, it's gonna

160
00:09:24.957 --> 00:09:28.200
completely re-render the entire template
whenever the state or the props change.

161
00:09:28.200 --> 00:09:30.163
So setState allows us to do that.

162
00:09:30.163 --> 00:09:35.179
So the state we wanna change,
this is gonna be nums,

163
00:09:35.179 --> 00:09:41.465
and we'll just say nums is going to be,
first let's get the state

164
00:09:50.048 --> 00:09:52.454
&gt;&gt; Scott Moss: Then we can say do some

165
00:09:52.454 --> 00:10:02.064
fancy ES6 stuff here.
&gt;&gt; Scott Moss: 6, so I'm

166
00:10:02.064 --> 00:10:06.900
just spreading all the numbers over a new
array and passing it a new number like 6.

167
00:10:06.900 --> 00:10:08.740
So this is literally just concat.

168
00:10:08.740 --> 00:10:12.647
It's like a shorthand for concat.

169
00:10:12.647 --> 00:10:17.641
So I'll make it a new array called nums
and I'm just gonna set this.state to that

170
00:10:17.641 --> 00:10:21.762
new array with the ES6 shortcut,
which is the same thing as this.

171
00:10:21.762 --> 00:10:25.612
Because they're the same name,
I can just erase it.

172
00:10:25.612 --> 00:10:30.318
So again, I'm making a new array,
spreading the numbers from this.state

173
00:10:30.318 --> 00:10:33.772
along with a new number at
the end which is concatting and

174
00:10:33.772 --> 00:10:35.630
just setting the state here.

175
00:10:39.930 --> 00:10:41.154
So now if we go back,

176
00:10:41.154 --> 00:10:45.879
I'll pause on debugger.
&gt;&gt; Scott Moss: Cool,

177
00:10:45.879 --> 00:10:51.957
we got a error cuz I forgot to
change this to this.state.nums.

178
00:10:51.957 --> 00:10:56.262
There we go.
&gt;&gt; Scott Moss: Now, if we click,

179
00:10:56.262 --> 00:11:03.298
we'll get 6.
&gt;&gt; Scott Moss: So

180
00:11:03.298 --> 00:11:10.096
that's just a basic intro into
the React syntax language with JSX.

181
00:11:10.096 --> 00:11:13.325
You don't have to be a pro at this to
actually understand what's going on and

182
00:11:13.325 --> 00:11:16.704
if you're not a pro at it, it's not gonna
stop you from finishing this workshop

183
00:11:16.704 --> 00:11:18.940
because the stuff we're
gonna do is pretty simple.

184
00:11:18.940 --> 00:11:21.662
If you already know this stuff,
it's just a refresher.

185
00:11:21.662 --> 00:11:22.626
So again,

186
00:11:22.626 --> 00:11:28.486
the first exercise if we go back is to.
&gt;&gt; Scott Moss: Just

187
00:11:28.486 --> 00:11:30.277
create a Todo app with React on the web.

188
00:11:30.277 --> 00:11:34.215
So if you can do everything in that
todo.js file, just a basic Todo app,

189
00:11:34.215 --> 00:11:36.939
however, you want that to look,
it's up to you.

190
00:11:36.939 --> 00:11:38.740
There's no right or wrong here.

191
00:11:38.740 --> 00:11:42.860
I would say just have
an input with a list and

192
00:11:42.860 --> 00:11:46.420
then a button that when you click
the input, it updates the list.

193
00:11:46.420 --> 00:11:47.680
Pretty much exactly what we just did.

194
00:11:49.370 --> 00:11:50.460
So once we have that,

195
00:11:50.460 --> 00:11:53.440
we're gonna actually convert that over
to a React Native app in one step.

