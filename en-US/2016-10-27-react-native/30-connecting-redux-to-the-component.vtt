WEBVTT

1
00:00:00.198 --> 00:00:03.714
[MUSIC]

2
00:00:03.714 --> 00:00:08.924
&gt;&gt; Scott Moss: So what we gonna use Redux
for now is we're gonna fire off an action

3
00:00:08.924 --> 00:00:14.920
when this button is pressed and
then we're also going to list them here.

4
00:00:14.920 --> 00:00:17.628
So the first thing we want to do
is we've got to figure out, so

5
00:00:17.628 --> 00:00:19.666
where do we actually
want to put this action?

6
00:00:19.666 --> 00:00:22.489
Do we wanna put it in this Todo.js?

7
00:00:22.489 --> 00:00:24.400
Do we wanna put in this TodoForm?

8
00:00:24.400 --> 00:00:28.352
So typically what you would do is you
would put it in the highest component and

9
00:00:28.352 --> 00:00:29.909
you would pass it in as a prop.

10
00:00:29.909 --> 00:00:32.413
That's typically what you would do but
we're only two levels deep so

11
00:00:32.413 --> 00:00:35.238
what I'm gonna do instead is actually
I'm gonna do it here in this TodoForm.

12
00:00:35.238 --> 00:00:38.732
I'm just gonna show you how to connect and
we're gonna use the action here and

13
00:00:38.732 --> 00:00:40.627
we're just gonna to dispatch from here.

14
00:00:40.627 --> 00:00:44.822
So the next thing we need to do is
in this TodoForm is we'll import,

15
00:00:48.368 --> 00:00:54.770
&gt;&gt; Scott Moss: Connect from 'react-redux'.

16
00:00:54.770 --> 00:00:57.681
And what connect means is
all this is going to do is

17
00:00:57.681 --> 00:01:00.900
just look at the context
of this component.

18
00:01:00.900 --> 00:01:03.769
And it's gonna give this component
the state that we want and

19
00:01:03.769 --> 00:01:05.070
attach it to a properties.

20
00:01:05.070 --> 00:01:06.190
That's it.

21
00:01:06.190 --> 00:01:09.547
So remember the only two piece of state
we have in our store right now which were

22
00:01:09.547 --> 00:01:10.280
todos and user.

23
00:01:11.360 --> 00:01:13.260
This is going to allow
us to grab those and

24
00:01:13.260 --> 00:01:15.930
attach it to our properties,
our props coming in.

25
00:01:15.930 --> 00:01:19.980
The reason we want to do that is when that
state updates, so will the template for

26
00:01:19.980 --> 00:01:22.090
this for this component.

27
00:01:22.090 --> 00:01:24.420
So that's why we're gonna
attach it to the props.

28
00:01:24.420 --> 00:01:28.030
So what you want to do now is
we're gonna use connect and

29
00:01:28.030 --> 00:01:31.564
all connect does is it takes
two optional arguments,

30
00:01:31.564 --> 00:01:35.588
the map of the state you want and
then some possible actions.

31
00:01:35.588 --> 00:01:38.592
So the state that we
want is actually none.

32
00:01:38.592 --> 00:01:41.737
We don't want any state in this form,
we actually only want to do an action.

33
00:01:41.737 --> 00:01:47.862
So, we'll say const mapActionsToProps,

34
00:01:47.862 --> 00:01:55.813
and that's just going to take
the dispatcher and redux.

35
00:01:55.813 --> 00:01:58.320
And all we need to do is just
return an object here so

36
00:01:58.320 --> 00:02:01.728
I'm gonna just do an implicit return
by using these parentheses and

37
00:02:01.728 --> 00:02:03.431
then placing an object in there.

38
00:02:03.431 --> 00:02:05.006
That's just saying return an object.

39
00:02:05.006 --> 00:02:07.543
That's what that is saying right there.

40
00:02:07.543 --> 00:02:08.664
So I'm going to do that.

41
00:02:08.664 --> 00:02:14.670
And then I just want to make a method
called, as I said, createTodo.

42
00:02:14.670 --> 00:02:17.925
So createTodo, that's what I want to do.

43
00:02:17.925 --> 00:02:19.006
And what createTodo is,

44
00:02:19.006 --> 00:02:23.902
it's just gonna take a Todo,
&gt;&gt; Scott Moss: And all it's gonna do

45
00:02:23.902 --> 00:02:28.657
is dispatch an action and an action is
just an object that has a type property,

46
00:02:28.657 --> 00:02:33.580
remember we talked about this, a type
property and it's gonna have a payload.

47
00:02:33.580 --> 00:02:36.522
So the payload is going to be the Todo.

48
00:02:36.522 --> 00:02:42.595
And then the type we had defined and
the reducers is this CREATE_TODO.

49
00:02:42.595 --> 00:02:46.477
So I'm just gonna export that so
we can use it.

50
00:02:46.477 --> 00:02:48.568
There we go.

51
00:02:48.568 --> 00:02:51.890
I'll just type it in for now.

52
00:02:51.890 --> 00:02:57.691
So the type is CREATE_TODO
&gt;&gt; Scott Moss: So

53
00:02:57.691 --> 00:02:58.667
everybody see the flow now?

54
00:02:58.667 --> 00:03:02.719
So when this action is dispatched with
this type CREATE_TODO, Redux is going,

55
00:03:02.719 --> 00:03:04.744
okay, let me head over to the reducers,

56
00:03:04.744 --> 00:03:07.270
let me run that through
the reducers right quick.

57
00:03:07.270 --> 00:03:08.984
It's gonna run it through our reducers.

58
00:03:08.984 --> 00:03:11.800
Look, we have a switch statement for
that specific type.

59
00:03:11.800 --> 00:03:14.250
So when it sees that,
now it's gonna execute this.

60
00:03:14.250 --> 00:03:15.240
And that's gonna be the new state.

61
00:03:16.672 --> 00:03:20.535
And then when that new state comes,
whatever is subscribed to the new state,

62
00:03:20.535 --> 00:03:24.300
which in this case nothing yet,
is gonna be updated with the new state.

63
00:03:24.300 --> 00:03:28.660
Does that make sense, yes?

64
00:03:28.660 --> 00:03:30.459
&gt;&gt; Speaker 2: Will it
run through user too?

65
00:03:30.459 --> 00:03:32.973
&gt;&gt; Scott Moss: Yeah, it'll run it through
user which isn't doing anything but

66
00:03:32.973 --> 00:03:34.675
it will, it will run it through user, yes?

67
00:03:34.675 --> 00:03:35.913
&gt;&gt; Speaker 2: Question from Charles.

68
00:03:35.913 --> 00:03:40.785
Do you generally use action creators
rather than actions in your own work?

69
00:03:40.785 --> 00:03:44.970
&gt;&gt; Scott Moss: Yes, I always use
action creators and you will too.

70
00:03:44.970 --> 00:03:48.327
And in the sweat book app,
there's action creators.

71
00:03:51.653 --> 00:03:54.945
&gt;&gt; Scott Moss: Action creators is a
function that makes an action compared to

72
00:03:54.945 --> 00:03:58.061
what we just did which is just
we inlined this action here.

73
00:03:58.061 --> 00:04:01.452
So typically you'll have a function
that makes this action for you.

74
00:04:01.452 --> 00:04:03.019
But we just inlined it.

75
00:04:03.019 --> 00:04:06.044
Cool, so
now we have this map to actions and

76
00:04:06.044 --> 00:04:11.515
then what we can do is we can connect
this TodoForm, [COUGH], excuse me.

77
00:04:11.515 --> 00:04:12.614
&gt;&gt; Speaker 3: I have a question.

78
00:04:12.614 --> 00:04:14.163
&gt;&gt; Scott Moss: Yes.

79
00:04:14.163 --> 00:04:16.419
&gt;&gt; Speaker 3: Line 12-
&gt;&gt; Scott Moss: Yep.

80
00:04:16.419 --> 00:04:18.070
&gt;&gt; Speaker 3: I don't know
if this is an ES6 thing.

81
00:04:18.070 --> 00:04:21.037
I'm confused by the the syntax where
you're returning an object but

82
00:04:21.037 --> 00:04:22.972
it's a function inside that object?

83
00:04:22.972 --> 00:04:25.731
&gt;&gt; Scott Moss: Yes, so
what's happening here is let's just get

84
00:04:25.731 --> 00:04:28.790
rid of this right quick and
then we'll come back to it.

85
00:04:28.790 --> 00:04:32.960
So the first thing is
mapActionsToProps is a function

86
00:04:32.960 --> 00:04:35.380
that takes dispatch as an argument, right?

87
00:04:35.380 --> 00:04:39.300
And then I'm implicitly
returning an object, so-

88
00:04:39.300 --> 00:04:40.350
&gt;&gt; Speaker 3: I get that part.

89
00:04:40.350 --> 00:04:41.354
&gt;&gt; Scott Moss: Okay.
&gt;&gt; Speaker 3: It's just

90
00:04:41.354 --> 00:04:44.110
the function inlined
inside an object literal.

91
00:04:44.110 --> 00:04:46.930
&gt;&gt; Scott Moss: So this part right here,
this is the method shortcut.

92
00:04:46.930 --> 00:04:49.663
You can create methods on an object.

93
00:04:49.663 --> 00:04:53.537
The same way you would do it on a class,
the same way we did it here.

94
00:04:53.537 --> 00:04:54.580
It's the same thing, yeah.

95
00:04:54.580 --> 00:04:56.686
So you can do that on objects too now.

96
00:04:56.686 --> 00:05:00.108
But unlike a class, you still gotta put
commas after them for the next one.

97
00:05:00.108 --> 00:05:02.196
Whereas a class, you don't need commas.

98
00:05:02.196 --> 00:05:03.380
&gt;&gt; Speaker 3: Thanks.

99
00:05:03.380 --> 00:05:08.440
&gt;&gt; Scott Moss: Yeah, the other way you
can do it is you can just say this and

100
00:05:08.440 --> 00:05:13.890
it will still be the same or
use the function keyword.

101
00:05:13.890 --> 00:05:14.560
Either way will work.

102
00:05:15.860 --> 00:05:16.646
&gt;&gt; Speaker 3: Okay, thanks.

103
00:05:16.646 --> 00:05:21.131
&gt;&gt; Scott Moss: Yep, any other questions?

104
00:05:21.131 --> 00:05:23.884
No, okay,
&gt;&gt; Speaker 2: Yep, yep, sorry.

105
00:05:23.884 --> 00:05:28.752
So Mark H from the channel is asking can
you review, why not set up connect and

106
00:05:28.752 --> 00:05:34.070
action dispatch in Todo, the higher
level component rather than TodoForm?

107
00:05:34.070 --> 00:05:35.470
&gt;&gt; Scott Moss: You can, you can.

108
00:05:35.470 --> 00:05:37.290
I was just trying to get a deeper example.

109
00:05:37.290 --> 00:05:38.190
But yeah, you can set it up but

110
00:05:38.190 --> 00:05:41.820
typically what people do is,
see the Todo is the root.

111
00:05:41.820 --> 00:05:49.420
It's almost an anti-pattern
to connect in a root.

112
00:05:51.190 --> 00:05:55.130
And the only reason that's a good
example here is because we're doing so

113
00:05:55.130 --> 00:05:55.870
much in the root, but

114
00:05:55.870 --> 00:05:59.370
in most applications you wouldn't do all
of this inside of a root of the app.

115
00:05:59.370 --> 00:06:03.480
This root of the app would just be
an empty shell that's somewhere else.

116
00:06:03.480 --> 00:06:05.875
I mean, in fact,
that's probably what we can do,

117
00:06:05.875 --> 00:06:07.730
would make more sense if I just do that?

118
00:06:07.730 --> 00:06:11.810
We could just do that right quick,
actually.

119
00:06:11.810 --> 00:06:13.178
Let's just make an empty shell.

120
00:06:13.178 --> 00:06:15.461
And we'll just call it main.js.

121
00:06:23.211 --> 00:06:26.050
&gt;&gt; Scott Moss: So this is a real pattern
which this is what we're gonna be doing.

122
00:06:26.050 --> 00:06:28.738
So you just have an empty shell and

123
00:06:28.738 --> 00:06:34.804
we're just gonna export a const called
Main and it's literally nothing.

124
00:06:34.804 --> 00:06:40.207
It's just going to house
our other components.

125
00:06:40.207 --> 00:06:41.430
This is gonna be a entry point.

126
00:06:41.430 --> 00:06:42.440
That's all it's gonna be.

127
00:06:43.540 --> 00:06:44.155
&gt;&gt; Scott Moss: Oops.

128
00:06:53.764 --> 00:06:56.664
&gt;&gt; Scott Moss: There we go.
And then it will import Todo in here.

129
00:07:06.599 --> 00:07:08.393
&gt;&gt; Scott Moss: And then we can
literally just put Todo like that,

130
00:07:08.393 --> 00:07:09.340
just like we have before.

131
00:07:11.770 --> 00:07:13.896
There we go.
So we'll just have main there,

132
00:07:13.896 --> 00:07:17.273
bring a Todo in and just head
over to our index.iOS or Android,

133
00:07:17.273 --> 00:07:20.223
whichever one you're using,
and just bring in Main.

134
00:07:24.872 --> 00:07:25.992
&gt;&gt; Scott Moss: There you go.
&gt;&gt; Speaker 2: That's not gonna

135
00:07:25.992 --> 00:07:26.600
work, though.

136
00:07:28.375 --> 00:07:30.912
Cuz of the const main, aren't you.

137
00:07:30.912 --> 00:07:32.323
&gt;&gt; Scott Moss: Yeah, I have a const Main.

138
00:07:32.323 --> 00:07:35.319
So we can say Main as Root.

139
00:07:37.896 --> 00:07:38.979
&gt;&gt; Scott Moss: And we just call this Root.

140
00:07:42.159 --> 00:07:42.781
&gt;&gt; Scott Moss: There we go.

141
00:07:48.097 --> 00:07:49.948
&gt;&gt; Scott Moss: So
it's still gonna be the same.

142
00:07:49.948 --> 00:07:53.525
So now it actually makes sense to
do the connect inside of Todo and

143
00:07:53.525 --> 00:07:58.047
not TodoForm because you don't really
want to connect to this thing right here.

144
00:07:58.047 --> 00:07:59.238
This is a thing that's being provided.

145
00:07:59.238 --> 00:08:02.287
It's usually the children of this,
but in our example,

146
00:08:02.287 --> 00:08:04.266
our root was actually doing so much.

147
00:08:04.266 --> 00:08:05.650
It was like whoa, which one?

148
00:08:05.650 --> 00:08:08.559
So that's why I figured it
make more sense if we do that.

149
00:08:08.559 --> 00:08:11.964
So now what we can do is yeah, we can go
ahead and bring that connect over from

150
00:08:11.964 --> 00:08:16.943
TodoForm,
&gt;&gt; Scott Moss: And

151
00:08:16.943 --> 00:08:20.242
bring it into Todo.js.

152
00:08:20.242 --> 00:08:21.750
Same code here.

153
00:08:21.750 --> 00:08:22.740
There we go.

154
00:08:25.362 --> 00:08:28.026
&gt;&gt; Scott Moss: All right,
so we have the action.

155
00:08:28.026 --> 00:08:28.939
We have this connect.

156
00:08:28.939 --> 00:08:31.207
Now we're actually gonna connect it.

157
00:08:31.207 --> 00:08:32.829
Before I connect it, any questions so far?

158
00:08:32.829 --> 00:08:33.934
I just made some quick changes.

159
00:08:36.837 --> 00:08:38.229
&gt;&gt; Scott Moss: Any questions
on why I changed it?

160
00:08:40.370 --> 00:08:43.765
So I changed it because the root
component again is usually just a shell.

161
00:08:43.765 --> 00:08:45.829
Usually just a big container
that does nothing.

162
00:08:45.829 --> 00:08:49.316
But in this example, it was doing a lot so
it was like well, where do I connect?

163
00:08:49.316 --> 00:08:53.476
So I made sure that we had a shell called
Main.js that does absolutely nothing and

164
00:08:53.476 --> 00:08:57.208
then now we can connect inside this
Todo component which is actually more

165
00:08:57.208 --> 00:08:59.059
interesting and is gonna do stuff.

166
00:08:59.059 --> 00:09:03.657
So that's actually the approach you're
gonna see in every Redux application.

167
00:09:03.657 --> 00:09:05.396
All right, so
now that we have these actions here.

168
00:09:05.396 --> 00:09:07.978
What we can do is we just
wanna go ahead and attach.

169
00:09:07.978 --> 00:09:13.260
We want to fire off this action
whenever we want a Todo to be created.

170
00:09:13.260 --> 00:09:14.180
Let's just do that now.

171
00:09:14.180 --> 00:09:16.330
So where are we creating a todo?

172
00:09:16.330 --> 00:09:17.866
Where in here is the Todo being created?

173
00:09:17.866 --> 00:09:18.567
What method?

174
00:09:21.209 --> 00:09:21.761
&gt;&gt; Speaker 4: handlePress.

175
00:09:21.761 --> 00:09:22.771
&gt;&gt; Scott Moss: Yeah, handlePress.

176
00:09:22.771 --> 00:09:26.655
So in handlePress, instead of setting the
state here cuz we're not gonna be keeping

177
00:09:26.655 --> 00:09:29.445
track of state anymore,
we actually just want to go ahead and

178
00:09:29.445 --> 00:09:30.940
fire off the action of new Todo.

179
00:09:30.940 --> 00:09:34.646
So we can just get rid of all of this
cuz there's no more local state,

180
00:09:34.646 --> 00:09:36.935
actually there might still be a newTodo.

181
00:09:36.935 --> 00:09:40.518
But we'll just get rid of that for now.

182
00:09:40.518 --> 00:09:45.122
And then in step, what we'll say
is we wanna be able to access this

183
00:09:45.122 --> 00:09:48.750
method on the properties
of this component.

184
00:09:48.750 --> 00:09:50.270
So that's where connect comes in.

185
00:09:50.270 --> 00:09:55.468
So before we connect,
what we're gonna be able to do

186
00:09:55.468 --> 00:10:03.988
is we're gonna say this.props.the name of
the method we want which is createTodo.

187
00:10:03.988 --> 00:10:05.081
If you look at createTodo,

188
00:10:05.081 --> 00:10:07.320
it just takes in the Todo which
is just gonna be the text.

189
00:10:07.320 --> 00:10:13.335
And we know that the text is
gonna be this.state.newTodo.

190
00:10:13.335 --> 00:10:15.110
So that's not gonna work because
we haven't connected it.

191
00:10:15.110 --> 00:10:19.599
So now if we actually want to connect it,
there's a couple ways we can do it, but

192
00:10:19.599 --> 00:10:21.549
I'm gonna do it the simplest way.

193
00:10:21.549 --> 00:10:27.726
I'm just gonna rename this to _Todo
cuz I need that to do namespace.

194
00:10:27.726 --> 00:10:33.434
And underneath it what I'm gonna do is,
yeah,

195
00:10:33.434 --> 00:10:38.858
underneath it,
I'm gonna come down here and

196
00:10:38.858 --> 00:10:45.291
I'm gonna say export const
the real Todo = connect.

197
00:10:47.123 --> 00:10:49.075
&gt;&gt; Scott Moss: So
we're gonna connect here.

198
00:10:49.075 --> 00:10:51.659
And let's just bring this down here so
we can have it right next to us so

199
00:10:51.659 --> 00:10:52.470
it makes more sense.

200
00:10:55.972 --> 00:10:58.570
&gt;&gt; Scott Moss: And we're gonna
pass in null here for the state.

201
00:10:58.570 --> 00:11:01.343
So the first argument is if you
wanna map state to the properties.

202
00:11:01.343 --> 00:11:03.927
We're not doing that just yet,
we're just mapping actions.

203
00:11:03.927 --> 00:11:08.741
And we're just gonna pass in
that function that we just made

204
00:11:08.741 --> 00:11:11.300
called mapActionsToProps.

205
00:11:11.300 --> 00:11:12.490
That's gonna be the second argument.

206
00:11:12.490 --> 00:11:14.415
So we'll pass that in here.

207
00:11:14.415 --> 00:11:18.711
mapActionsToProps, and then connect
returns a function which takes

208
00:11:18.711 --> 00:11:22.652
the component that you want to connect to,
in this case _Todo.

209
00:11:25.489 --> 00:11:31.170
&gt;&gt; Scott Moss: So this is saying
connect the component _Todo to Redux.

210
00:11:31.170 --> 00:11:33.613
And I want these actions
attached to the props and

211
00:11:33.613 --> 00:11:37.380
the only actions that we have is this
one that we made called CREATE_TODO.

212
00:11:38.810 --> 00:11:41.478
So all that it's literally doing,
it looks like a lot but

213
00:11:41.478 --> 00:11:44.580
all it's doing is just merging
this object into our properties.

214
00:11:44.580 --> 00:11:45.940
That's all it's doing.

215
00:11:45.940 --> 00:11:49.033
It's just calling merge and
like here, here's the property.

216
00:11:49.033 --> 00:11:50.484
That's all it's doing.

217
00:11:50.484 --> 00:11:54.129
And the reason it does that because it
wants to attach it to the properties

218
00:11:54.129 --> 00:11:56.460
because when the props
of a component update,

219
00:11:56.460 --> 00:11:58.638
the render function will be called again.

220
00:11:58.638 --> 00:12:01.110
And that way our app is always
in sync with the state.

221
00:12:01.110 --> 00:12:03.940
But that's all it's doing.

222
00:12:03.940 --> 00:12:04.620
It's nothing fancy.

223
00:12:04.620 --> 00:12:06.030
It's just a merge on the props.

224
00:12:06.030 --> 00:12:11.915
So now we can say up top,
this.props.createTodo,

225
00:12:11.915 --> 00:12:16.507
which is going to be calling this method.

226
00:12:16.507 --> 00:12:17.669
Does that makes sense?

227
00:12:17.669 --> 00:12:22.150
So when we say this.props.createTodo,
we pass in this.state.newTodo.

228
00:12:22.150 --> 00:12:26.893
It's going to dispatch this action,
which is then gonna go into the reducer.

229
00:12:26.893 --> 00:12:30.721
Hit this, create a new state for us and
then now all we need to do is just

230
00:12:30.721 --> 00:12:34.620
subscribe to that state somewhere and
our app will just be like magic.

