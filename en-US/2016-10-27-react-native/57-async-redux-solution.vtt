WEBVTT

1
00:00:00.036 --> 00:00:03.933
[MUSIC]

2
00:00:03.933 --> 00:00:07.045
&gt;&gt; Scott Moss: Let's just evaluate what's
actually going on here with this async

3
00:00:07.045 --> 00:00:08.890
stuff cuz I did a bit of an abstraction.

4
00:00:08.890 --> 00:00:10.640
Does anybody actually
understand what I'm doing here?

5
00:00:12.700 --> 00:00:14.383
You get it, you looked at it?

6
00:00:14.383 --> 00:00:17.648
So I'll just walk there real quick,
let's go to that actual function, first,

7
00:00:17.648 --> 00:00:19.425
async action creators.

8
00:00:19.425 --> 00:00:23.230
Cuz I have this function
called createAsyncCreator.

9
00:00:23.230 --> 00:00:27.526
The reason I call that because you're
actually making a async creator.

10
00:00:27.526 --> 00:00:31.180
You're making a function that's gonna
create an action, but it's async.

11
00:00:31.180 --> 00:00:33.380
So that's why it's called
createAsyncCreator.

12
00:00:33.380 --> 00:00:35.184
And it takes in a startAction, so

13
00:00:35.184 --> 00:00:39.590
the action you want to dispatch
before you write a async function.

14
00:00:39.590 --> 00:00:43.590
This will give you a chance to do UI
things like show a loading spinner or

15
00:00:43.590 --> 00:00:44.220
something like that.

16
00:00:44.220 --> 00:00:46.620
Like I would dispatch loading true.

17
00:00:46.620 --> 00:00:48.494
And then somewhere in my UI,
it's gonna be listening for

18
00:00:48.494 --> 00:00:51.420
loading to be true and
it's gonna load a loading spinner, right?

19
00:00:51.420 --> 00:00:52.560
And the endAction.

20
00:00:52.560 --> 00:00:58.240
So, hey, when this async operation is
done, what action do you wanna dispatch?

21
00:00:58.240 --> 00:01:00.930
And then the actual
asyncFn you want to run.

22
00:01:02.310 --> 00:01:04.970
So what it's doing is it's going to,

23
00:01:04.970 --> 00:01:09.275
it's expecting you to dispatch
this because it's going to return

24
00:01:09.275 --> 00:01:13.830
the third care given the dispatch
just like we did in another example.

25
00:01:13.830 --> 00:01:18.239
So it's gonna go ahead and
dispatch that startAction with no payload,

26
00:01:18.239 --> 00:01:22.440
just a startAction by itself,
no payload, so you can use it or not.

27
00:01:23.520 --> 00:01:26.852
And then I'm just gonna go ahead and
create the dispatchEndAction,

28
00:01:26.852 --> 00:01:30.765
I'm not dispatching it yet, I'm just
creating it, I parse in the action type.

29
00:01:30.765 --> 00:01:34.943
This is gonna return a function that takes
a payload, we're gonna use it later on.

30
00:01:34.943 --> 00:01:39.109
And then I'm gonna invoke that asycnFn
that you parsed in, also parse in

31
00:01:39.109 --> 00:01:44.030
the dispatch here just in case inside that
asycnFn you wanna use dispatch in there.

32
00:01:44.030 --> 00:01:47.130
Maybe you do, maybe you don't but
I'm just gonna parse it in.

33
00:01:47.130 --> 00:01:50.184
And then,
whatever the result that asyncFn is,

34
00:01:50.184 --> 00:01:55.410
I'm automatically gonna dispatch it with
the given endAction that you provided.

35
00:01:56.610 --> 00:01:59.137
So I'm gonna dispatch it there, and

36
00:01:59.137 --> 00:02:03.466
then I'm just gonna go ahead and
dispatch any errors, if any.

37
00:02:04.485 --> 00:02:05.130
&gt;&gt; Scott Moss: All right?

38
00:02:05.130 --> 00:02:09.376
So that's what the createAsyncCreator
is doing, so we go ahead and

39
00:02:09.376 --> 00:02:11.843
actually look at the async functions.

40
00:02:11.843 --> 00:02:16.015
In this case, I say fetchCurrentWorkout,
so we're implicitly,

41
00:02:16.015 --> 00:02:21.290
we're doing an implicit return here,
implicitly return AsyncCreator.

42
00:02:21.290 --> 00:02:24.000
Which takes the first
action we want to call,

43
00:02:24.000 --> 00:02:26.849
in this case we're not even doing
anything with it but it's there.

44
00:02:26.849 --> 00:02:31.030
The endAction which is actually important,
that's what's changing the state, and

45
00:02:31.030 --> 00:02:32.936
then just an anonymous
function right here.

46
00:02:32.936 --> 00:02:36.641
That's returning api.get
(current_workout).

47
00:02:37.720 --> 00:02:39.390
So this is an anonymous function.

48
00:02:39.390 --> 00:02:43.043
This is the function,
if you go back and look,

49
00:02:43.043 --> 00:02:48.112
let's close all these tabs,
if we, I have so many tabs open.

50
00:02:50.557 --> 00:02:51.057
&gt;&gt; Scott Moss: There we go.

51
00:02:52.970 --> 00:02:58.020
So this function is the actual function
that's being called, here, asyncFn.

52
00:02:58.020 --> 00:03:00.700
That's the function that's being called,
and we're parsing in dispatch.

53
00:03:00.700 --> 00:03:04.766
So that means, I could use dispatch in
here to if I wanted to because we're

54
00:03:04.766 --> 00:03:07.500
getting dispatch, but I didn't need it.

55
00:03:07.500 --> 00:03:10.342
So I wanna do dispatch, it's not that
I can dispatch something here too, but

56
00:03:10.342 --> 00:03:11.010
I don't need to.

57
00:03:12.460 --> 00:03:14.510
So this brings us to this API helper.

58
00:03:14.510 --> 00:03:15.246
So it was really nice.

59
00:03:15.246 --> 00:03:18.731
Instead of using the fetch everywhere and
use and creating headers all over again,

60
00:03:18.731 --> 00:03:22.040
and write the URL all over again, I just
made a API helper that did it all for us.

61
00:03:22.040 --> 00:03:24.330
So if you go look at the API helper.

62
00:03:24.330 --> 00:03:26.039
This is two methods in here.

63
00:03:26.039 --> 00:03:30.795
We put the headers at the top,
made a function to check the status

64
00:03:30.795 --> 00:03:35.289
because if the fetch API doesn't
error out on status codes,

65
00:03:35.289 --> 00:03:38.980
it doesn't error out
on status code at all.

66
00:03:38.980 --> 00:03:40.270
So you gotta check yourself.

67
00:03:40.270 --> 00:03:43.259
I think it should have done that but,
so, that's what I'm doing here,

68
00:03:43.259 --> 00:03:46.792
I'm saying if the status is greater than
200, it's an error or less than 300.

69
00:03:49.236 --> 00:03:51.160
&gt;&gt; Scott Moss: I'm sorry,
if it's not then throw an error.

70
00:03:51.160 --> 00:03:51.781
So that's what I'm doing here.

71
00:03:51.781 --> 00:03:54.909
And then I also just made a quick function
just to parse the JSON cuz we're gonna do

72
00:03:54.909 --> 00:03:56.630
that on every single response.

73
00:03:56.630 --> 00:04:02.620
So now, all I have to do is a say
fetch with the given path and

74
00:04:02.620 --> 00:04:07.860
then I put the default headers,
check the status,

75
00:04:07.860 --> 00:04:10.490
then parse to JSON and send that back.

76
00:04:10.490 --> 00:04:12.640
So this is what's gonna get
attached to the payload over here.

77
00:04:12.640 --> 00:04:16.787
Whatever this returns, that's what's
gonna get attach to the payload.

78
00:04:16.787 --> 00:04:18.530
Same thing for POST.

79
00:04:18.530 --> 00:04:23.033
Take a path, take some data to post,
headers, body, stringify,

80
00:04:23.033 --> 00:04:25.330
check the status, parse to JSON.

81
00:04:25.330 --> 00:04:27.503
So this is a helper method
around the fetch, so

82
00:04:27.503 --> 00:04:29.741
we don't have to do this
everywhere in our app.

83
00:04:29.741 --> 00:04:35.747
We can just say API.post,
API.get, API.put, whatever.

84
00:04:35.747 --> 00:04:36.438
Everybody follow me there.

85
00:04:36.438 --> 00:04:37.800
So this is just an abstraction.

86
00:04:39.450 --> 00:04:40.960
It's a lot cleaner.

87
00:04:40.960 --> 00:04:44.880
So now, if we head into the meat and
potatoes,

88
00:04:44.880 --> 00:04:48.480
the currentWorkout, the first thing we
need to do is we have the currentWorkout,

89
00:04:48.480 --> 00:04:52.020
we have the exerciseModal,
we have the exercises.

90
00:04:52.020 --> 00:04:55.028
We got addExercise here but
it's dispatching the static one, so

91
00:04:55.028 --> 00:04:56.650
let's get rid of that.

92
00:04:56.650 --> 00:04:57.919
We don't want addExercise.

93
00:04:59.670 --> 00:05:02.160
And in fact, what we want to do is we
want to use these two methods right here.

94
00:05:02.160 --> 00:05:06.250
fetchCurrentWorkout and
addExerciseToCurrentWorkout.

95
00:05:06.250 --> 00:05:08.923
Those are the action
creators that we have.

96
00:05:08.923 --> 00:05:10.279
So those are the two that we want.

97
00:05:10.279 --> 00:05:14.648
So we'll come down here and we'll say
addExercise is actually going to dispatch

98
00:05:14.648 --> 00:05:17.860
addExerciseToCurrentWorkout which
is really verbose.

99
00:05:17.860 --> 00:05:22.455
And we'll say exercise and
then we'll make a new

100
00:05:22.455 --> 00:05:27.164
method called
fetchCurrentWorkout which is just

101
00:05:27.164 --> 00:05:32.109
going to return
dispatch(fetchCurrentWorkout)

102
00:05:38.162 --> 00:05:39.200
&gt;&gt; Scott Moss: Which is right here.

103
00:05:41.801 --> 00:05:44.138
&gt;&gt; Scott Moss: So now we have those,
we traded this to be the async one and

104
00:05:44.138 --> 00:05:47.090
not the sync one and then we made
a new one called fetchCurrentWorkout.

105
00:05:47.090 --> 00:05:51.636
So, the async one for
addExercise should all ready be good,

106
00:05:51.636 --> 00:05:53.280
we're already using it here,
so that should be fine.

107
00:05:53.280 --> 00:05:57.011
We actually shouldn't
have to do anything here.

108
00:05:57.011 --> 00:05:59.339
But we want to first to work out,
so when this loads up, so

109
00:05:59.339 --> 00:06:02.430
componentDidMount is a life
cycle hook we can use in React.

110
00:06:02.430 --> 00:06:07.339
This function is gonna be called
when the component mounts

111
00:06:07.339 --> 00:06:09.660
on the app the first time.

112
00:06:09.660 --> 00:06:11.100
So we can just uncomment that.

113
00:06:11.100 --> 00:06:14.501
And we can say
this.props.fetchCurrentWorkout which is

114
00:06:14.501 --> 00:06:16.813
gonna be this, it's gonna dispatch and

115
00:06:16.813 --> 00:06:20.961
get the current workout which if there
is anything in the current workout

116
00:06:20.961 --> 00:06:25.110
it is going to update the current
workout state or not there.

117
00:06:25.110 --> 00:06:26.880
The currentWorkout state.

118
00:06:26.880 --> 00:06:30.710
Here, which is then gonna change the props
which is then gonna call it rerender.

119
00:06:32.310 --> 00:06:33.820
So let's save that.

120
00:06:33.820 --> 00:06:35.058
Let's start our server.

121
00:06:41.927 --> 00:06:50.090
&gt;&gt; Scott Moss: And
we can say json-server db.jason, cool.

122
00:06:50.090 --> 00:06:51.520
So, here's our path,

123
00:06:51.520 --> 00:06:53.220
we got a current_workout,
that's the only one that we got.

124
00:06:54.840 --> 00:06:59.250
So now if we hit Start Workout,

125
00:06:59.250 --> 00:07:02.820
we get an error because.

126
00:07:05.809 --> 00:07:07.498
&gt;&gt; Scott Moss: Why do we get an error?

127
00:07:07.498 --> 00:07:10.842
componentDidMount, this.fetch,
I'll just refresh this I think.

128
00:07:10.842 --> 00:07:15.778
I think it just needs a good refreshing.

129
00:07:15.778 --> 00:07:18.576
There we go, yeah,
it just need to be refreshed.

130
00:07:18.576 --> 00:07:24.325
So if we go look at the server, I'll put,
&gt;&gt; Scott Moss: Actually didn't,

131
00:07:24.325 --> 00:07:26.100
I think I got the wrong URL in here.

132
00:07:26.100 --> 00:07:28.980
Let's go back and look, API.

133
00:07:32.280 --> 00:07:39.190
Yeah, I think I got to use the IP
address for some reason on my machine.

134
00:07:41.620 --> 00:07:42.484
Let's do that.

135
00:07:48.320 --> 00:07:49.285
&gt;&gt; Scott Moss: Here we go.

136
00:07:53.109 --> 00:07:53.985
&gt;&gt; Scott Moss: And let's reload.

137
00:07:58.433 --> 00:08:00.490
&gt;&gt; Scott Moss: Okay, now let's look.

138
00:08:00.490 --> 00:08:01.270
So there we go,

139
00:08:01.270 --> 00:08:05.050
it did a fetch on the current_workout,
it did a 200, and that happened

140
00:08:05.050 --> 00:08:09.250
because in the Current Workout we said
componentDidMount fetchCurrentWorkout.

141
00:08:10.860 --> 00:08:13.150
And that didn't return anything so
there is nothing here.

142
00:08:13.150 --> 00:08:16.862
So let's actually add some workouts.

143
00:08:16.862 --> 00:08:21.602
&gt;&gt; Scott Moss: And we'll say lunges,
we're gonna add lunges here, so

144
00:08:21.602 --> 00:08:23.486
we'll click lunges.

145
00:08:23.486 --> 00:08:28.256
Cannot read property render or
name on the find renderRow.

146
00:08:28.256 --> 00:08:29.369
Workout list.

147
00:08:34.023 --> 00:08:35.425
&gt;&gt; Scott Moss: exercise.name.

148
00:08:38.181 --> 00:08:39.215
&gt;&gt; Scott Moss: What are you talking about?

149
00:08:44.098 --> 00:08:45.374
&gt;&gt; Scott Moss: I don't know
what the error was but

150
00:08:45.374 --> 00:08:47.870
it definitely said it's a survey and
loaded back up here.

151
00:08:47.870 --> 00:08:50.160
I think I just clicked too many times and

152
00:08:50.160 --> 00:08:52.890
it was freaking out
because it wasn't closing.

153
00:08:52.890 --> 00:08:53.530
Let's try that again.

154
00:08:53.530 --> 00:08:54.376
So we clicked this.

155
00:08:54.376 --> 00:09:00.311
Let's put flat dumbbell.

156
00:09:02.197 --> 00:09:04.744
&gt;&gt; Scott Moss: What is that?

157
00:09:04.744 --> 00:09:05.660
47.

158
00:09:12.839 --> 00:09:14.053
&gt;&gt; Scott Moss: That's weird,
it's like errored out but

159
00:09:14.053 --> 00:09:15.700
it's still working at the same time.

160
00:09:15.700 --> 00:09:16.470
Let's check out the error.

161
00:09:18.870 --> 00:09:20.700
Everybody following me so far?

162
00:09:20.700 --> 00:09:21.964
That's basically all
the changes we have to do.

163
00:09:21.964 --> 00:09:25.410
There's just some small errors in my JSX,
I need to fix.

164
00:09:25.410 --> 00:09:29.630
That's obviously breaking somewhere but
the Redux stuff is working perfectly fine.

