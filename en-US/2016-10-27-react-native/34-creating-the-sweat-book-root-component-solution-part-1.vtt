WEBVTT

1
00:00:00.000 --> 00:00:03.906
[MUSIC]

2
00:00:03.906 --> 00:00:07.890
&gt;&gt; Scott Moss: So basically what I did
here was if you look at the solution,

3
00:00:07.890 --> 00:00:10.150
there's a lot of stuff here.

4
00:00:10.150 --> 00:00:12.000
Like I added a whole bunch of folders and
stuff.

5
00:00:12.000 --> 00:00:17.092
So the first thing I did
was is in the index.js

6
00:00:17.092 --> 00:00:23.410
there was a hello world component there,
right?

7
00:00:23.410 --> 00:00:26.900
So what I did was I used the provider
to provide the store and

8
00:00:26.900 --> 00:00:31.000
I wrapped the welcome component, which
is gonna be this welcome screen here.

9
00:00:31.000 --> 00:00:35.130
I just call this the welcome screen.

10
00:00:35.130 --> 00:00:39.260
So that's gonna be my root for now until
we get into navigation, which is next.

11
00:00:39.260 --> 00:00:42.394
So I just put that in the root and
then I have these reducers,

12
00:00:42.394 --> 00:00:46.678
this thing called containers that we
didn't talk about and then I have actions.

13
00:00:46.678 --> 00:00:49.663
So let's just look at
the store right quick.

14
00:00:49.663 --> 00:00:53.286
So the store is literally just creating
a store with a root reducer, nothing new,

15
00:00:53.286 --> 00:00:54.241
nothing fancy here.

16
00:00:54.241 --> 00:00:57.171
We have we talked about this a couple
times that we didn't look at

17
00:00:57.171 --> 00:00:58.050
the root reducer.

18
00:00:59.250 --> 00:01:04.450
So I adopted a new pattern here where
I have each reducer has its own file.

19
00:01:04.450 --> 00:01:07.130
Let's open all the reducers in one
file and that's pretty much it.

20
00:01:07.130 --> 00:01:11.400
So that reduces I thought appropriate
based on the designs were to have

21
00:01:11.400 --> 00:01:18.820
a reducer for UI and what I did in here
was I noticed that there was a modal.

22
00:01:18.820 --> 00:01:22.410
If we look at the design, if we click
Start Workout and you click this,

23
00:01:22.410 --> 00:01:24.900
this thing pops up right here,
this is a modal.

24
00:01:24.900 --> 00:01:28.190
So I wanted the state of that
modal to be inside a redux so

25
00:01:28.190 --> 00:01:31.610
that anywhere in my application
I can open or close that modal.

26
00:01:31.610 --> 00:01:34.170
So whether that's
the visibility of that modal,

27
00:01:34.170 --> 00:01:37.950
I put inside the UI state inside of Redux.

28
00:01:37.950 --> 00:01:40.970
So I made a UI reducer and

29
00:01:40.970 --> 00:01:44.540
then it has a property on it called
exercise, I spelled it right,

30
00:01:44.540 --> 00:01:49.330
look at that, exerciseModal was default
to false which means it's not open.

31
00:01:49.330 --> 00:01:52.200
And then if it gets an action
called set exercise visibility,

32
00:01:52.200 --> 00:01:56.345
it just sets the visibility to whatever
the payload is, true or false.

33
00:01:56.345 --> 00:02:01.390
And then later on in the application I'm
gonna listen for this state and the modal,

34
00:02:01.390 --> 00:02:03.980
when that's true, it's gonna pop up and
when it's false, it's gonna close.

35
00:02:03.980 --> 00:02:06.860
So anywhere in the app I can
change a state and it's amazing.

36
00:02:06.860 --> 00:02:09.800
This is where Redux shines,
whereas typically you would hard

37
00:02:09.800 --> 00:02:13.940
code this data like a component somewhere
like this.modal.open and this.modal.close.

38
00:02:13.940 --> 00:02:16.750
And then if you want to use it
somewhere else, you're like wait.

39
00:02:16.750 --> 00:02:18.333
How do I use this somewhere else now?

40
00:02:18.333 --> 00:02:21.350
So this is where Redux is
keeping this state here.

41
00:02:21.350 --> 00:02:23.810
I can now do things and it's pretty cool.

42
00:02:23.810 --> 00:02:26.793
I could even fire off another action
which will fire this action and

43
00:02:26.793 --> 00:02:29.730
have my own side effect
chain if I wanted to.

44
00:02:29.730 --> 00:02:32.114
So I decided to do that there.

45
00:02:32.114 --> 00:02:35.435
I also have this exercises,
something I told you I,

46
00:02:35.435 --> 00:02:40.282
I brought in the initial state that I
supplied for you [INAUDIBLE] killing me.

47
00:02:40.282 --> 00:02:43.046
So the initial state that I
supplied in initialState,js,

48
00:02:43.046 --> 00:02:46.860
I just brought it in here and
set it to the initial state for exercises.

49
00:02:46.860 --> 00:02:50.224
So I brought it exercises as initState and
just set it equal here,

50
00:02:50.224 --> 00:02:51.702
not doing anything with it.

51
00:02:51.702 --> 00:02:54.760
We're probably not going to modify
the state for the exercises.

52
00:02:54.760 --> 00:02:58.270
Not today, you can do that if you
want to continue working on this app.

53
00:02:58.270 --> 00:03:00.240
And then for current workout

54
00:03:01.770 --> 00:03:04.330
I created a reducer because we need
to keep track of the current workout.

55
00:03:04.330 --> 00:03:06.350
And that's just going to be an array.

56
00:03:06.350 --> 00:03:11.256
So the actions that I created here were
to fetch the current workout and add

57
00:03:11.256 --> 00:03:15.910
an exercise to the workout and you notice
that I put this complete thing on it.

58
00:03:15.910 --> 00:03:18.870
We're gonna talk about that later and the
reason I decided to put complete on these

59
00:03:18.870 --> 00:03:22.630
action types is because these
are gonna be asynchronous actions.

60
00:03:22.630 --> 00:03:25.980
And usually asynchronous actions
have two or three types.

61
00:03:25.980 --> 00:03:29.580
You'll have a type that's fired,
an action that's dispatch when you

62
00:03:29.580 --> 00:03:33.780
start the asynchronous thing and then
an action that's fetched when it's done.

63
00:03:33.780 --> 00:03:36.488
And possibly another action to
fetch when it errors out, so

64
00:03:36.488 --> 00:03:38.990
that's an asynchronous action,
we're going to get later.

65
00:03:38.990 --> 00:03:45.610
So I only want to change the state
when the ansynchronous action is done.

66
00:03:45.610 --> 00:03:49.520
So I have a different type called
workout complete and complete for

67
00:03:49.520 --> 00:03:51.289
action or for at exercise.

68
00:03:52.920 --> 00:03:55.313
And I'm not doing anything for
the ones that start, but you could.

69
00:03:55.313 --> 00:03:59.254
For instance let's say you want to show
a loading spinner when you call fetch

70
00:03:59.254 --> 00:04:01.470
current workout which
will go to a server so

71
00:04:01.470 --> 00:04:05.187
you would somewhere like maybe UI
which controls the loading spinner.

72
00:04:05.187 --> 00:04:10.060
You would have like loadingSpinner and
that'll be set to false,

73
00:04:10.060 --> 00:04:14.312
but on case where,
we would say fetch work out exercise,

74
00:04:14.312 --> 00:04:17.247
we would set loadingSspinner to true.

75
00:04:17.247 --> 00:04:21.126
But then, when loading exercise is
complete, we set loadingSpinner to false

76
00:04:21.126 --> 00:04:24.140
so it'll stop right when the async
action is done by itself.

77
00:04:24.140 --> 00:04:28.018
So, that's where you use something
like that which is pretty cool.

78
00:04:28.018 --> 00:04:29.433
Any question on that so far and

79
00:04:29.433 --> 00:04:32.100
this is just my opinion on
what I thought would be right.

80
00:04:32.100 --> 00:04:35.050
Like you could put all this in one
reducer if you wanted to, this is how

81
00:04:35.050 --> 00:04:39.220
I decided to break it out and then
an index is where I just combine them all.

82
00:04:39.220 --> 00:04:43.139
So I just made an index.js inside
the reducers and I combine them all here.

83
00:04:45.823 --> 00:04:46.461
&gt;&gt; Scott Moss: So if you've used

84
00:04:46.461 --> 00:04:48.920
Node before then you'll understand
the pattern of the index.js.

85
00:04:48.920 --> 00:04:52.897
If you've never used Node before,
putting an index.js inside of a folder,

86
00:04:52.897 --> 00:04:53.814
when you import or

87
00:04:53.814 --> 00:04:57.870
required from that folder by default
it's gonna require the index.js file.

88
00:04:57.870 --> 00:05:00.299
So, I don't have to specify index.js.

89
00:05:00.299 --> 00:05:03.946
So, it's a great pattern to
place all the modules for

90
00:05:03.946 --> 00:05:07.269
a certain folder inside
of inside of index.js so

91
00:05:07.269 --> 00:05:13.430
when we import it like inside of store,
I'm only importing the reducer's folder.

92
00:05:13.430 --> 00:05:17.210
I didn't have to say reducer/index.js,
I just import reducers,

93
00:05:17.210 --> 00:05:20.630
which is going to import this folder which
by default is gonna import the index js

94
00:05:20.630 --> 00:05:23.390
which is exporting this.

95
00:05:23.390 --> 00:05:26.950
So we're gonna use that pattern a lot
using index.js inside of the folders.

96
00:05:26.950 --> 00:05:29.168
It's a Node thing, so
I highly recommend it.

97
00:05:29.168 --> 00:05:33.006
Or I guess it's a common JS thing,
not a Node thing.

98
00:05:33.006 --> 00:05:35.556
Any questions on that so far?

99
00:05:35.556 --> 00:05:37.343
No, all right.

100
00:05:37.343 --> 00:05:38.906
And then let's actually run this.

101
00:05:42.276 --> 00:05:44.610
&gt;&gt; Scott Moss: [INAUDIBLE] have an alias.

102
00:05:48.036 --> 00:05:50.227
&gt;&gt; Scott Moss: And all right,
so while that's building,

103
00:05:50.227 --> 00:05:52.310
let's look at the other stuff I did here.

104
00:05:53.380 --> 00:05:56.290
So containers,
I said it briefly earlier, but

105
00:05:56.290 --> 00:05:58.080
they're going to be types
of component that we have.

106
00:05:58.080 --> 00:06:01.059
We're gonna have containers and
we're gonna have UI components or

107
00:06:01.059 --> 00:06:03.262
representation or
presentational components.

108
00:06:03.262 --> 00:06:06.517
Container components, you could think of
as just components that are just like

109
00:06:06.517 --> 00:06:08.178
shells almost like our root component.

110
00:06:08.178 --> 00:06:12.534
It just has like the basic markup,
minimum styling, and

111
00:06:12.534 --> 00:06:18.160
it's just a container for
other UI components or other containers.

112
00:06:18.160 --> 00:06:23.120
Whereas a UI component or a presentational
component is gonna be things like

113
00:06:23.120 --> 00:06:24.880
the input form that we
made with a button and

114
00:06:24.880 --> 00:06:27.410
like all the other things that we make,
pretty much everything,

115
00:06:27.410 --> 00:06:30.580
there's not a container things
that are like you are related.

116
00:06:30.580 --> 00:06:33.640
So, I just have folders to separate
those two different types of components.

117
00:06:33.640 --> 00:06:37.190
So again containers are probably
things we're gonna be routing to,

118
00:06:37.190 --> 00:06:40.704
navigating to and are just containers,
empty shells, and

119
00:06:40.704 --> 00:06:43.300
UI components are pretty
much everything else.

120
00:06:43.300 --> 00:06:46.940
So it's a really good pattern in Redux is
to have your containers have all the state

121
00:06:46.940 --> 00:06:50.870
and actions is passed them down to the UI
components where the UI components just

122
00:06:50.870 --> 00:06:54.040
stateless and don't know anything just
like the to-do form that we made.

123
00:06:54.040 --> 00:06:55.130
It just didn't know anything.

124
00:06:55.130 --> 00:06:58.510
We passed everything to it via props,
that was a UI component.

125
00:06:58.510 --> 00:07:01.549
Whereas the to-do component itself was
the container component where it knew

126
00:07:01.549 --> 00:07:02.109
everything.

127
00:07:02.109 --> 00:07:05.296
It had the state, it had the props,
it had the actions and

128
00:07:05.296 --> 00:07:07.695
it just passed it to
all own UI components.

129
00:07:07.695 --> 00:07:08.253
Yes?

130
00:07:08.253 --> 00:07:13.107
&gt;&gt; Speaker 2: Are these containers
also known as higher order components?

131
00:07:13.107 --> 00:07:19.558
&gt;&gt; Scott Moss: No, a higher order
component is actually when we use.

132
00:07:19.558 --> 00:07:21.672
&gt;&gt; Speaker 2: Like provider.

133
00:07:21.672 --> 00:07:25.380
&gt;&gt; Scott Moss: Almost,
a higher order to part is like connect.

134
00:07:25.380 --> 00:07:27.793
So when we use connect and
connect returns a new component,

135
00:07:27.793 --> 00:07:29.247
that's a higher order component.

136
00:07:29.247 --> 00:07:34.551
A higher order opponent is just
a component that wraps another component,

137
00:07:34.551 --> 00:07:38.009
that's it,
it's just a quick way to do a mix it.

138
00:07:38.009 --> 00:07:41.901
So like for instance if we wanted to
add some functionality to this welcome

139
00:07:41.901 --> 00:07:45.543
component, we would make another
component that would wrap this and

140
00:07:45.543 --> 00:07:49.780
do things inside of this component's
life cycle hooks or something like that.

141
00:07:50.900 --> 00:07:51.742
That's a higher order component.

142
00:07:53.824 --> 00:07:57.195
&gt;&gt; Scott Moss: Cool, so yeah, and
then yeah, let's go run this very quick.

143
00:08:02.112 --> 00:08:04.630
&gt;&gt; Scott Moss: Wrong app,
I got like ten apps on here.

144
00:08:07.120 --> 00:08:09.620
There it is, so
here's what mine looks like.

145
00:08:09.620 --> 00:08:11.860
It's just a white screen
with a welcome screen.

146
00:08:11.860 --> 00:08:13.176
It looks exactly like the design.

147
00:08:13.176 --> 00:08:19.033
[LAUGH] Except everybody's like,
it's just exactly like the design.

148
00:08:19.033 --> 00:08:22.740
So I got the button,
Log your fitness, all that stuff.

149
00:08:22.740 --> 00:08:26.440
Yeah, and all I did here was,
I mean I'll go through here,

150
00:08:26.440 --> 00:08:28.920
but it's just a whole bunch of views and
text.

151
00:08:28.920 --> 00:08:31.990
It's really nothing,
not the fancy in here.

152
00:08:31.990 --> 00:08:35.000
I just flexed it and
changed everything blue.

153
00:08:35.000 --> 00:08:36.150
That's it, I didn't do anything else.

154
00:08:36.150 --> 00:08:37.360
There's no navigation.

155
00:08:37.360 --> 00:08:38.870
I don't even have Redux hooked up to this.

156
00:08:38.870 --> 00:08:40.650
I'm not using connect anywhere.

157
00:08:40.650 --> 00:08:42.840
So that was that was basically all I did.

158
00:08:42.840 --> 00:08:45.810
I just got the Redux thing started.

159
00:08:45.810 --> 00:08:50.300
I got our provider ready
with the store ready.

160
00:08:50.300 --> 00:08:52.410
But I'm not even using it yet.

161
00:08:52.410 --> 00:08:53.540
And I just went ahead and

162
00:08:53.540 --> 00:08:58.630
just made this look kinda closer to
the design but not quite there yet.

163
00:08:58.630 --> 00:08:59.577
And that's all I did.

