WEBVTT

1
00:00:00.000 --> 00:00:03.843
[MUSIC]

2
00:00:03.843 --> 00:00:05.110
&gt;&gt; Scott Moss: So let's hop into HTTP and

3
00:00:05.110 --> 00:00:07.190
actually hook this Todo
app up to a server.

4
00:00:08.910 --> 00:00:13.130
And then we'll go from there,
we'll make it real, yeah?

5
00:00:13.130 --> 00:00:17.120
So I'm not gonna do it in here cuz
then that would be the solution.

6
00:00:17.120 --> 00:00:22.300
Let's hop back over to
our fancy thing here and

7
00:00:22.300 --> 00:00:26.118
we'll just make something else like
talks to the server or some like that.

8
00:00:26.118 --> 00:00:29.482
So I'm gonna head back into, actually I'm
just gonna make a new component here,

9
00:00:29.482 --> 00:00:30.380
let's just do that.

10
00:00:30.380 --> 00:00:37.458
And I'm gonna call this one,
I don't even know what to call this one.

11
00:00:37.458 --> 00:00:40.793
Let's call it Lists.

12
00:00:40.793 --> 00:00:42.992
No, that's lame.

13
00:00:42.992 --> 00:00:45.604
We'll call it Reddit,
we'll call it Reddit.

14
00:00:45.604 --> 00:00:49.450
So this will be Reddit.js,
yeah it's a good example.

15
00:00:49.450 --> 00:00:51.380
So what we're gonna do is we're
going to connect to a server.

16
00:00:52.900 --> 00:00:54.265
Yes?
&gt;&gt; Speaker 2: I have a question

17
00:00:54.265 --> 00:00:55.349
about scrolling.

18
00:00:55.349 --> 00:00:57.671
So in our Todo app-
&gt;&gt; Scott Moss: Mm-hm.

19
00:00:57.671 --> 00:01:02.630
&gt;&gt; Speaker 2: As stuff goes underneath
the screen, there's no way to scroll.

20
00:01:02.630 --> 00:01:05.610
&gt;&gt; Scott Moss: I was wondering
if somebody was gonna do that.

21
00:01:05.610 --> 00:01:06.266
You did Mark.

22
00:01:06.266 --> 00:01:08.340
So, [LAUGH] there's no way
to scroll by default and

23
00:01:08.340 --> 00:01:11.244
that's because all we did was
place it inside of a view.

24
00:01:11.244 --> 00:01:14.130
A view, is just a base type but
there are other different types of

25
00:01:14.130 --> 00:01:18.650
use like list view and scroll view
that we're gonna get into tomorrow.

26
00:01:18.650 --> 00:01:22.360
But yeah, you would either
need to use a scroll view and

27
00:01:22.360 --> 00:01:23.660
make your own view inside of that.

28
00:01:23.660 --> 00:01:25.660
Or just use the list view which
solves this problem for you.

29
00:01:25.660 --> 00:01:27.600
But we're gonna talk about
the list view tomorrow.

30
00:01:28.900 --> 00:01:31.474
So, yeah.

31
00:01:31.474 --> 00:01:35.746
Cool all right, so what we are gonna do
is we're gonna talk about some HTTP and

32
00:01:35.746 --> 00:01:38.065
how that actually works in React Native.

33
00:01:38.065 --> 00:01:41.327
So we're gonna import React.

34
00:01:41.327 --> 00:01:42.509
We're gonna do our Component again.

35
00:01:47.493 --> 00:01:49.802
&gt;&gt; Scott Moss: And
we'll just say from react here and

36
00:01:49.802 --> 00:01:52.120
then all the other stuff that we need.

37
00:01:52.120 --> 00:01:56.750
In this case will just do a View and
a Text.

38
00:01:56.750 --> 00:01:58.519
I don't think we're gonna need
more than that at this point.

39
00:02:01.820 --> 00:02:07.059
&gt;&gt; Scott Moss: All right and
then we'll just say export

40
00:02:07.059 --> 00:02:11.566
class Reddit extends Component.

41
00:02:11.566 --> 00:02:14.410
Great so we have that.

42
00:02:14.410 --> 00:02:16.600
And I'm just gonna go ahead and
create this render here.

43
00:02:16.600 --> 00:02:21.671
And just return a Text or

44
00:02:21.671 --> 00:02:29.284
a View with a Text that says Reddit.

45
00:02:29.284 --> 00:02:32.177
Now I'm just gonna switch these
out in my index files right quick.

46
00:02:36.752 --> 00:02:43.029
&gt;&gt; Scott Moss: Fancy to the Reddit

47
00:02:43.029 --> 00:02:47.348
and Reddit.

48
00:02:47.348 --> 00:02:52.393
There we go, copy that,
put that in my iOS and refresh.

49
00:02:56.740 --> 00:02:57.647
&gt;&gt; Scott Moss: Okay, so there we go.

50
00:02:57.647 --> 00:03:00.060
So now we're on the Reddit.js.

51
00:03:00.060 --> 00:03:05.850
So now, this is where, it's like wow,
this is literally like the web.

52
00:03:05.850 --> 00:03:08.180
Because it's literally the same thing.

53
00:03:08.180 --> 00:03:12.258
Who here has used
window.fetch inside the web?

54
00:03:12.258 --> 00:03:13.360
window.fetch, right.

55
00:03:13.360 --> 00:03:16.703
If you don't know window.fetch is,
you go to browser and you open it up.

56
00:03:16.703 --> 00:03:20.260
Whoa, let's unpause that.

57
00:03:20.260 --> 00:03:21.980
You go to the browser,

58
00:03:21.980 --> 00:03:27.000
you open it up, you can type in fetch(),
you see this thing right here?

59
00:03:27.000 --> 00:03:31.140
So fetch is the new API to access,
it's like the new Ajax.

60
00:03:31.140 --> 00:03:35.150
They're getting rid of XML HTTP requests
and they're using fetch instead,

61
00:03:35.150 --> 00:03:39.920
which is like a promise based Ajax method
that's built into the browser now.

62
00:03:39.920 --> 00:03:41.330
It's a standard.

63
00:03:41.330 --> 00:03:43.500
So it's not something Google made up or
something.

64
00:03:43.500 --> 00:03:45.730
It's in most browsers now actually.

65
00:03:45.730 --> 00:03:48.750
So what React Native does,
is it's like, let's just use that.

66
00:03:48.750 --> 00:03:49.660
So that's what they use.

67
00:03:49.660 --> 00:03:51.230
They just use window.fetch.

68
00:03:51.230 --> 00:03:53.809
Right inside the environment.

69
00:03:53.809 --> 00:03:54.950
And you don't have to import it anywhere.

70
00:03:54.950 --> 00:03:56.760
It's a global.

71
00:03:56.760 --> 00:03:59.250
It's globally available
inside your applications.

72
00:03:59.250 --> 00:04:01.890
So there's no, I didn't have to
import it from React Native or React.

73
00:04:01.890 --> 00:04:03.680
It's just going to be there.

74
00:04:03.680 --> 00:04:10.930
So to test this out what we're gonna
do is we're going to use .com/.JSON.

75
00:04:10.930 --> 00:04:13.900
So this is the front page
of Reddit right here.

76
00:04:13.900 --> 00:04:17.045
We're just going to use this as API,
we're gonna render this stuff on the page.

77
00:04:17.045 --> 00:04:21.453
It's gonna be bags, we didn't talk about
scroll views but we'll just do that.

78
00:04:21.453 --> 00:04:25.423
Maybe we'll get into scroll views
today if we just can't stand it.

79
00:04:25.423 --> 00:04:28.313
So what we'll do first is,
we're gonna do this all in the component.

80
00:04:28.313 --> 00:04:32.093
We're not going to make a service or talk
about reduction or anything right now.

81
00:04:32.093 --> 00:04:33.273
We're just gonna do this in the component.

82
00:04:33.273 --> 00:04:39.999
We'll use life cycle hook,
we'll say when componentDidMount or

83
00:04:39.999 --> 00:04:43.490
I should say will mount actually.

84
00:04:45.238 --> 00:04:49.002
So, the componentWillMount, we'll go ahead
and make this call to get our stuff.

85
00:04:49.002 --> 00:04:56.329
So, what we'll do is we'll say fetch,
which is going to be a global and

86
00:04:56.329 --> 00:05:01.228
then the URL that we want
to fetch which is that.

87
00:05:01.228 --> 00:05:07.673
And then we can pass in
options here like for

88
00:05:07.673 --> 00:05:12.687
the headers so far instance we can

89
00:05:12.687 --> 00:05:18.969
Accept: 'application/json' here.

90
00:05:18.969 --> 00:05:20.200
There we go.

91
00:05:20.200 --> 00:05:24.440
Actually know what we wanna do that's
not the header object, I'm sorry.

92
00:05:24.440 --> 00:05:26.650
What we'll do we'll say fetch and then,

93
00:05:26.650 --> 00:05:31.270
or no that'll be the header because
we're using shorthand method, yeah.

94
00:05:31.270 --> 00:05:32.390
So we'll just fetch and

95
00:05:32.390 --> 00:05:36.736
this returns a promise by default
which is I think is pretty amazing.

96
00:05:36.736 --> 00:05:40.580
So we'll get promise back here which
will give us the response and then,

97
00:05:40.580 --> 00:05:44.140
we want to get the res.json
which also returns a promise.

98
00:05:44.140 --> 00:05:49.330
This is not unique to React Native,
this is literally the fetch API.

99
00:05:49.330 --> 00:05:51.920
This is how this works exactly
the same in the browser.

100
00:05:51.920 --> 00:05:54.580
If I were to copy this and

101
00:05:54.580 --> 00:05:59.340
go to the browser, actually it'll break
cuz it's ZS6, but it's the same syntax.

102
00:05:59.340 --> 00:06:01.470
Returning a promise,
I wanna get this stuff in here.

103
00:06:01.470 --> 00:06:04.790
I wanna call that then again.

104
00:06:04.790 --> 00:06:06.873
And the data is gonna be right here.

105
00:06:06.873 --> 00:06:13.797
And then I'm just going
to console.log the data.

106
00:06:13.797 --> 00:06:16.093
And we'll see what that looks like.

107
00:06:16.093 --> 00:06:17.877
So we'll come in here.

108
00:06:17.877 --> 00:06:19.722
We'll debug the JS remotely.

109
00:06:19.722 --> 00:06:25.396
So we can look at the console.

110
00:06:25.396 --> 00:06:26.460
We'll refresh this.

111
00:06:32.460 --> 00:06:35.903
Cool, and then here we go,
here's our front page of Reddit.

112
00:06:35.903 --> 00:06:37.479
It just spit it out for us.

113
00:06:39.290 --> 00:06:42.238
Although the server is not letting
us scroll down and look at it, but

114
00:06:42.238 --> 00:06:43.335
that's it right there.

115
00:06:43.335 --> 00:06:47.274
If we look at the network tab,
let me see if we refresh,

116
00:06:47.274 --> 00:06:49.425
will it show the network tab.

117
00:06:49.425 --> 00:06:50.329
I don't know if it will or not.

118
00:06:53.576 --> 00:06:55.078
&gt;&gt; Scott Moss: No,
it's not going to load the network tab.

119
00:06:55.078 --> 00:06:58.469
But anyway we get the data back and
that's the data from Reddit, right there.

120
00:07:02.670 --> 00:07:06.663
So this is how you would use fetch for
a shorthand by passing in a URL like this.

121
00:07:06.663 --> 00:07:08.483
It's assuming you wanna do a get request.

122
00:07:08.483 --> 00:07:10.131
But let's say you wanna do a post.

123
00:07:10.131 --> 00:07:13.686
Instead of passing this
URL as the first argument,

124
00:07:13.686 --> 00:07:18.410
you would just do an object that had
the method that you wanted to do.

125
00:07:20.000 --> 00:07:24.359
So we can say method: 'get' and
instead of putting this here,

126
00:07:24.359 --> 00:07:29.680
this would be headers and then it
would be the headers that we wanted.

127
00:07:29.680 --> 00:07:30.670
So you can do any method like that.

128
00:07:30.670 --> 00:07:32.872
But just by passing in like that.

129
00:07:32.872 --> 00:07:36.420
This is just shorthand,
I'm going to get requests for this URL and

130
00:07:36.420 --> 00:07:37.900
then give me the response.

131
00:07:37.900 --> 00:07:42.356
The JSON and that's just gonna to resolve
to date, I'm just logging the data,

132
00:07:42.356 --> 00:07:43.030
all right.

133
00:07:43.030 --> 00:07:45.810
But what we want to do instead here,

134
00:07:45.810 --> 00:07:50.079
I'll just say constructor,
I'll set up some state.

135
00:07:54.401 --> 00:08:01.180
&gt;&gt; Scott Moss: And
I'll say this.state = {posts[]},

136
00:08:01.180 --> 00:08:06.563
which an array and all I do is out of set

137
00:08:06.563 --> 00:08:11.450
the posted out data right there.

138
00:08:11.450 --> 00:08:16.846
Which is actually if we look at the data,

139
00:08:16.846 --> 00:08:21.780
it is post.data, wow what is this?

140
00:08:21.780 --> 00:08:23.092
This is a lot of stuff.

141
00:08:25.598 --> 00:08:28.176
&gt;&gt; Scott Moss: I don't know,
we'll have to see, I think it's post.data.

142
00:08:30.698 --> 00:08:38.813
&gt;&gt; Scott Moss: So say this.setState({posts

143
00:08:38.813 --> 00:08:42.293
: data}).

144
00:08:42.293 --> 00:08:46.817
I think it's actually data.data.children
but I will say data.data.

145
00:08:46.817 --> 00:08:47.413
There we go.

146
00:08:52.416 --> 00:08:55.714
&gt;&gt; Scott Moss: Unexpected token.

147
00:08:55.714 --> 00:08:58.562
Where's that at?

148
00:08:58.562 --> 00:09:01.817
&gt;&gt; Speaker 3: I think you need
your Accept on line 14 to

149
00:09:01.817 --> 00:09:06.102
have
&gt;&gt; Speaker 3: Is it uppercase or

150
00:09:06.102 --> 00:09:07.073
lowercase?

151
00:09:07.073 --> 00:09:08.023
&gt;&gt; Scott Moss: It's uppercase, but.

152
00:09:08.023 --> 00:09:10.063
&gt;&gt; Speaker 3: It is, okay.
&gt;&gt; Scott Moss: Yeah, it's fine, yeah.

153
00:09:10.063 --> 00:09:17.454
I just freaked out on line 17 right here,
this.setState({posts: data.data}).

154
00:09:17.454 --> 00:09:18.720
I must have missed something over here,
let's see.

155
00:09:24.496 --> 00:09:26.502
&gt;&gt; Scott Moss: Maybe one too
many parenthesis, whatever.

156
00:09:26.502 --> 00:09:27.138
Let's just refresh.

157
00:09:31.002 --> 00:09:31.900
&gt;&gt; Scott Moss: There we go.

158
00:09:31.900 --> 00:09:33.660
Sweet, so we got that.

159
00:09:33.660 --> 00:09:35.834
The post will be here and

160
00:09:35.834 --> 00:09:41.925
what we'll do is we'll just iterate
over those posts with a View.

161
00:09:47.568 --> 00:09:53.003
&gt;&gt; Scott Moss: Yeah we'll say View and
then we'll say

162
00:09:53.003 --> 00:09:58.776
this.state.posts.map get the post.

163
00:09:58.776 --> 00:10:04.866
And what we want to render is going to be
a Text with some property on the post and

164
00:10:04.866 --> 00:10:09.759
let's look at what that data looks like,
if we can come here.

165
00:10:09.759 --> 00:10:14.943
I thought I had pretty JSON in

166
00:10:14.943 --> 00:10:19.695
here but I guess I don't,

167
00:10:19.695 --> 00:10:24.452
data.children.data.

168
00:10:24.452 --> 00:10:28.061
I know there's an author,
okay, data.children.

169
00:10:28.061 --> 00:10:31.665
Okay, I think I know what to do,

170
00:10:31.665 --> 00:10:36.743
data.data.children, which is an array,

171
00:10:36.743 --> 00:10:42.636
and I want to get
the post.dataproperly.author.

172
00:10:42.636 --> 00:10:45.962
I think that's gonna work.

173
00:10:45.962 --> 00:10:47.629
This.state.post.

174
00:10:47.629 --> 00:10:48.371
Let's reload this.

175
00:10:55.457 --> 00:10:56.619
&gt;&gt; Scott Moss: Cool, okay, so

176
00:10:56.619 --> 00:11:02.100
looks like that don't work cuz it's
probably the data's in the wrong shape.

177
00:11:03.110 --> 00:11:05.170
The way we can do this
is use our debugger.

178
00:11:05.170 --> 00:11:08.926
So we'll coming here, get this,
but we're already debugging.

179
00:11:08.926 --> 00:11:14.490
What I'll do now is I come
over here to our debugger,

180
00:11:14.490 --> 00:11:17.273
I open this up to sources,

181
00:11:17.273 --> 00:11:22.345
head over to our debugger
to our file in Reddit.

182
00:11:25.891 --> 00:11:30.785
&gt;&gt; Scott Moss: And
I will just put a break point right here.

183
00:11:30.785 --> 00:11:32.508
There we go.

184
00:11:32.508 --> 00:11:33.553
And we'll just refreshes this.

185
00:11:39.298 --> 00:11:40.598
&gt;&gt; Scott Moss: Boom, and it stopped.

186
00:11:40.598 --> 00:11:46.284
So data is an object, right here,

187
00:11:46.284 --> 00:11:53.344
data.data just like I said .children and

188
00:11:53.344 --> 00:11:58.064
children.data.author.

189
00:11:58.064 --> 00:12:00.105
Yeah, that's what I got.

190
00:12:00.105 --> 00:12:02.102
So this should be good.

191
00:12:02.102 --> 00:12:03.666
So, let's check it out.

192
00:12:03.666 --> 00:12:07.934
Let me unpause it there you go,
you have a question?

193
00:12:07.934 --> 00:12:08.913
Somebody raised their hand?

194
00:12:08.913 --> 00:12:11.681
I thought I saw you raise your hand, okay.

195
00:12:11.681 --> 00:12:17.482
All right, so
componentWillMount this.state.

196
00:12:17.482 --> 00:12:23.797
Let's move this to DidMount,
let's do that.

197
00:12:23.797 --> 00:12:27.045
Posts.data.author, all right.

198
00:12:27.045 --> 00:12:28.101
Now, let's try it out.

199
00:12:33.867 --> 00:12:39.631
&gt;&gt; Scott Moss: And it stuck cuz I
got this, still pause, there we go.

200
00:12:39.631 --> 00:12:46.574
Why are you not rendering
this.state.posts.

201
00:12:46.574 --> 00:12:50.997
&gt;&gt; Speaker 3: [COUGH] in the map
you have posts instead of post.

202
00:12:50.997 --> 00:12:52.111
&gt;&gt; Scott Moss: I have.

203
00:12:52.111 --> 00:12:54.401
&gt;&gt; Speaker 3: And right down there
&gt;&gt; Scott Moss: [CROSSTALK] There you go,

204
00:12:54.401 --> 00:12:56.276
yeah so
let's just say that should be read in.

205
00:12:56.276 --> 00:13:02.126
Thank you.

206
00:13:02.126 --> 00:13:05.014
I got to get rid of that break point stop.

207
00:13:10.837 --> 00:13:11.779
&gt;&gt; Scott Moss: Now let's try it again.

208
00:13:18.164 --> 00:13:19.217
&gt;&gt; Scott Moss: Still doesn't wanna do it.

209
00:13:22.137 --> 00:13:24.760
&gt;&gt; Scott Moss: There it is.
Okay it just took a while.

210
00:13:24.760 --> 00:13:28.580
Right, so then there's a front page
of Reddit with all the authors on it.

211
00:13:30.270 --> 00:13:33.440
That's the entire front page right now,
with just the authors.

212
00:13:35.580 --> 00:13:39.600
And that's pretty much HTTP,
it's literally just window.fetch.

213
00:13:39.600 --> 00:13:40.330
And it's just a global.

214
00:13:42.530 --> 00:13:46.770
They didn't do anything new with it,
they didn't add some crazy to stuff.

215
00:13:46.770 --> 00:13:49.690
Just like we're going to take the thing
that's in the window.fetch and

216
00:13:49.690 --> 00:13:52.250
we're going to use it and
that's basically it.

