WEBVTT

1
00:00:00.000 --> 00:00:03.818
[MUSIC]

2
00:00:03.818 --> 00:00:04.874
&gt;&gt; Scott Moss: So let me refresh this and

3
00:00:04.874 --> 00:00:08.170
we'll run through this and then I'll
go through the debugger and show you.

4
00:00:08.170 --> 00:00:11.880
I'll put the breakpoint into the debugger
where Redux is firing this stuff so

5
00:00:11.880 --> 00:00:13.280
we can see what's happening.

6
00:00:13.280 --> 00:00:15.940
So this is, yes?
&gt;&gt; Speaker 2: There's a question that got

7
00:00:15.940 --> 00:00:18.235
asked in the channel and
answered in the channel,

8
00:00:18.235 --> 00:00:20.178
do you wanna look at it anyway or?
&gt;&gt; Scott Moss: What was the question?

9
00:00:20.178 --> 00:00:21.493
&gt;&gt; Speaker 2: It's the one, Jessie,

10
00:00:21.493 --> 00:00:25.819
is that the new props todos get updated
with the component is rendered, correct?

11
00:00:25.819 --> 00:00:27.620
&gt;&gt; Scott Moss: Yes, yes they do.

12
00:00:29.950 --> 00:00:31.370
Or actually, it's the other way around.

13
00:00:31.370 --> 00:00:34.141
The component gets rendered when
the props newTodo is updated.

14
00:00:36.565 --> 00:00:37.145
&gt;&gt; Scott Moss: Redux is gonna

15
00:00:37.145 --> 00:00:38.692
update the props with the provider and

16
00:00:38.692 --> 00:00:42.650
then that's when the renderer is called
again because the props are updated, yeah.

17
00:00:42.650 --> 00:00:43.560
So, this is freaking out because,

18
00:00:43.560 --> 00:00:48.080
like, there's no there's no such thing
as a map on this undefined object thing.

19
00:00:48.080 --> 00:00:50.850
So, we need to set a default prop.

20
00:00:50.850 --> 00:00:53.320
So, what we can do is
we can come up here and

21
00:00:53.320 --> 00:00:57.030
I don't know what level
of Babel I have on here.

22
00:01:00.740 --> 00:01:02.593
Let's just see if it has
static properties or not.

23
00:01:02.593 --> 00:01:03.960
So we need to set up default state.

24
00:01:03.960 --> 00:01:11.332
Let me see if it has this static state
defaultState, or defaultProps, I'm sorry.

25
00:01:11.332 --> 00:01:13.799
And we just say the defaultProps
of todos is an empty array.

26
00:01:13.799 --> 00:01:14.885
That's why it's breaking right now.

27
00:01:14.885 --> 00:01:18.600
Cuz the props haven't come in yet
so it's just like, what?

28
00:01:20.810 --> 00:01:23.780
Okay, looks like that satisfied it,
let's see.

29
00:01:25.250 --> 00:01:26.408
Okay, yeah, so sweet.

30
00:01:26.408 --> 00:01:28.960
I didn't know React Native was using
stage-0 Babel, that's awesome.

31
00:01:30.210 --> 00:01:32.818
So this static property is just saying

32
00:01:32.818 --> 00:01:36.324
_Todo.defaultProps.todos is
an empty array.

33
00:01:36.324 --> 00:01:40.760
So initialize the property of todos as
an empty array, that's all that's doing.

34
00:01:40.760 --> 00:01:43.900
And static properties is a ES7 thing,
which is pretty legit.

35
00:01:43.900 --> 00:01:50.309
It's the same thing as saying
_Todo.defaultProps, it's the same thing.

36
00:01:50.309 --> 00:01:52.805
It's just a static property.

37
00:01:52.805 --> 00:01:54.593
All right, cool, so
now let's actually do some todos.

38
00:01:54.593 --> 00:01:59.089
So if we come in here and
we type clean up, we hit make.

39
00:02:00.810 --> 00:02:02.530
That didn't show up so

40
00:02:02.530 --> 00:02:06.980
let's actually run through this and
let's see what happened here.

41
00:02:06.980 --> 00:02:11.930
So what we'll do is enable
the debugger and I think this

42
00:02:11.930 --> 00:02:15.590
is where it all starts coming together,
where you can see what Redux is doing.

43
00:02:17.590 --> 00:02:22.266
So we'll come in here and we'll just set
up some breakpoints on a different parts

44
00:02:22.266 --> 00:02:24.970
of Redux so
we can see what's happening here.

45
00:02:24.970 --> 00:02:31.647
So we'll come in here and
inside of source app, we'll go into todo.

46
00:02:31.647 --> 00:02:32.867
And what we wanna do is,

47
00:02:32.867 --> 00:02:37.435
I'll set a breakpoint on,
&gt;&gt; Scott Moss: handlePress.

48
00:02:39.342 --> 00:02:40.005
&gt;&gt; Scott Moss: So we'll set

49
00:02:40.005 --> 00:02:41.034
a breakpoint here.

50
00:02:41.034 --> 00:02:44.675
And then, we'll head down to our method
where we're actually calling the dispatch.

51
00:02:44.675 --> 00:02:45.971
We'll set a breakpoint there.

52
00:02:45.971 --> 00:02:51.921
Then, we'll go into our reducer and
we'll set a breakpoint here.

53
00:02:51.921 --> 00:02:53.670
And, yeah, that should be good.

54
00:02:53.670 --> 00:02:56.340
So then we'll refresh and
we'll walk through all this stuff.

55
00:02:56.340 --> 00:02:57.702
So let's see what happens.

56
00:02:57.702 --> 00:03:02.196
In the web, they'll be a logger that you
can use a Redux that makes this so simple,

57
00:03:02.196 --> 00:03:03.560
so easy.

58
00:03:03.560 --> 00:03:08.016
So let's type, clean up, hit make.

59
00:03:08.016 --> 00:03:11.040
It looks like it caught the debugger,
and boom.

60
00:03:11.040 --> 00:03:15.424
So the debugger caught right here on
handlePress, and now it's about to call

61
00:03:15.424 --> 00:03:18.870
this.props.createTodo, which
is indeed a method.

62
00:03:18.870 --> 00:03:20.903
So that binding from
connect totally worked.

63
00:03:20.903 --> 00:03:22.778
Yes?
&gt;&gt; Speaker 2: Question from Charles.

64
00:03:22.778 --> 00:03:25.892
Is that the same as get defaultProps?

65
00:03:25.892 --> 00:03:31.547
I think, referring back.
&gt;&gt; Scott Moss: What's he talking about?

66
00:03:31.547 --> 00:03:33.230
Yeah, is this the same
as get defaultProps?

67
00:03:33.230 --> 00:03:37.570
Yes, this is the ES6 ES7 way
of doing get defaultProps.

68
00:03:37.570 --> 00:03:40.386
Yeah, so if you were doing
a react.createClass, yeah,

69
00:03:40.386 --> 00:03:44.090
and you did get defaultProps, yes, this
is the equivalent of that for using ES6.

70
00:03:45.570 --> 00:03:47.714
Sweet, so
we stopped right here on handlePress,

71
00:03:47.714 --> 00:03:50.430
we're passing it this.state.newTodo,
which is clean up.

72
00:03:52.120 --> 00:03:56.544
All right, so
now we expect it to stop here.

73
00:03:56.544 --> 00:03:59.451
So, let's check that out, we hit Play.

74
00:03:59.451 --> 00:04:04.272
It does indeed stop here and it dispatches
this action caught with a type of

75
00:04:04.272 --> 00:04:06.860
CREATE_TODO and the payload of todo.

76
00:04:07.980 --> 00:04:11.510
So now if we hit Play, we expect it
to actually go into our reducer.

77
00:04:13.670 --> 00:04:14.320
And it does.

78
00:04:15.640 --> 00:04:19.514
So now Redux ran that action, if you
look at the action object right here,

79
00:04:19.514 --> 00:04:23.964
let's go look.
&gt;&gt; Scott Moss: There's our payload that we

80
00:04:23.964 --> 00:04:24.662
just passed in.

81
00:04:24.662 --> 00:04:26.260
There's our type.

82
00:04:26.260 --> 00:04:31.637
And because we hit a switch statement on
that same type, Redux is going to run

83
00:04:31.637 --> 00:04:38.290
this action.payload and it's going to pass
in the payload here and then the state.

84
00:04:38.290 --> 00:04:41.710
So we hit Play, there we go,
everything runs.

85
00:04:41.710 --> 00:04:45.674
Now why that's not rendering, I'm guessing
I made a typo down here somewhere.

86
00:04:45.674 --> 00:04:53.802
Let's see this.props.todo.map.

87
00:04:53.802 --> 00:04:58.632
It's because, wait, no, that's not right.

88
00:04:58.632 --> 00:05:04.405
Let's see why that didn't render.
&gt;&gt; Scott Moss: state.todos.

89
00:05:04.405 --> 00:05:05.449
&gt;&gt; Speaker 3: You didn't pass

90
00:05:05.449 --> 00:05:07.586
in map state-
&gt;&gt; Scott Moss: There we go, yeah,

91
00:05:07.586 --> 00:05:09.020
definitely a typo.

92
00:05:09.020 --> 00:05:14.020
So we need to pass this in first
mapStateToProps as the first argument,

93
00:05:14.020 --> 00:05:14.575
instead of the null.

94
00:05:15.640 --> 00:05:16.450
That makes sense.

95
00:05:16.450 --> 00:05:23.638
[LAUGH] So now if we refresh this.
&gt;&gt; Scott Moss: And

96
00:05:23.638 --> 00:05:28.333
we'll run through the debugger
again just to make sure.

97
00:05:28.333 --> 00:05:34.030
So let's say clean up, then make, and
we'll just run through one more time.

98
00:05:34.030 --> 00:05:38.364
Again, handlePress is going to create
the Todo with the newTodo clean up.

99
00:05:38.364 --> 00:05:44.155
It's then gonna call that method that we
just said, that we mapped the actions to,

100
00:05:44.155 --> 00:05:48.721
with the same payload of clean up and
the action of CREATE_TODO.

101
00:05:48.721 --> 00:05:51.768
Which then, hits this reducer and

102
00:05:51.768 --> 00:05:57.667
creates an entirely new state for
the todos property on our store.

103
00:05:57.667 --> 00:06:02.186
And that should rerender it right here.

104
00:06:02.186 --> 00:06:05.744
The reason that rerendered [LAUGH].
&gt;&gt; Speaker 2: [LAUGH]

105
00:06:05.744 --> 00:06:07.453
&gt;&gt; Scott Moss: The reason that rerendered

106
00:06:07.453 --> 00:06:10.728
is because we're binding
to this.props.todos.

107
00:06:10.728 --> 00:06:16.133
Which is our state.todos,
which just got updated here

108
00:06:16.133 --> 00:06:22.690
in our reducer because we fired
this action with the given payload.

109
00:06:25.940 --> 00:06:26.890
Everybody following me there?

110
00:06:28.370 --> 00:06:29.940
Does it still seem kind of crazy?

111
00:06:31.680 --> 00:06:34.547
Okay, it is still kind of crazy,
I know [LAUGH] but, yes?

112
00:06:34.547 --> 00:06:38.270
&gt;&gt; Speaker 5: So whatever todos returns

113
00:06:38.270 --> 00:06:41.741
right here will-
&gt;&gt; Scott Moss: Be the new state.

114
00:06:41.741 --> 00:06:43.552
&gt;&gt; Speaker 5: Will be state.todos.

115
00:06:43.552 --> 00:06:44.224
&gt;&gt; Scott Moss: Yep.

116
00:06:44.224 --> 00:06:45.992
&gt;&gt; Speaker 5: And whatever user returns

117
00:06:45.992 --> 00:06:47.995
will be state.user.
&gt;&gt; Scott Moss: Yep, and

118
00:06:47.995 --> 00:06:49.180
that's because this.

119
00:06:50.690 --> 00:06:52.610
But I could call this anything I want.

120
00:06:52.610 --> 00:06:57.384
Like if I would have said this is called
data and I'm gonna set that to the todos

121
00:06:57.384 --> 00:07:02.537
property, now it's state.data, but
it's still gonna go to the todos reducer.

122
00:07:02.537 --> 00:07:05.110
Yeah, it's whatever property
you put right here.

123
00:07:05.110 --> 00:07:07.350
And not so much the name of the reducer,
it just so

124
00:07:07.350 --> 00:07:10.150
happens that I'm following a pattern where
the name of the reducer is the name of

125
00:07:10.150 --> 00:07:12.830
the state as well, to keep it simple.

126
00:07:12.830 --> 00:07:14.374
So, yeah, so whatever I return right here.

127
00:07:14.374 --> 00:07:19.635
Like if I always just return,
like this for instance, if I always just

128
00:07:19.635 --> 00:07:25.580
return an array with the word hello in it,
that's always gonna be the state.

129
00:07:25.580 --> 00:07:27.570
It's still gonna run the reducer, but
this is always gonna be the state,

130
00:07:27.570 --> 00:07:31.216
it doesn't matter what.
&gt;&gt; Speaker 5: So you can, or

131
00:07:31.216 --> 00:07:36.450
a single action can modify a different
state, it could like modify user and

132
00:07:36.450 --> 00:07:38.444
it can modify-
&gt;&gt; Scott Moss: Yeah, exactly, so

133
00:07:38.444 --> 00:07:40.676
I could come up to user and
then I can write a case for

134
00:07:40.676 --> 00:07:44.200
CREATE_TODO inside of user and
it'll like do something in here.

135
00:07:44.200 --> 00:07:46.350
So a good pattern for that is,
I would have like, for

136
00:07:46.350 --> 00:07:50.250
instance, let's say we got the todos from
the server, so there might be errors.

137
00:07:50.250 --> 00:07:53.491
So inside of here, I would do all the
things for when we actually get todos and

138
00:07:53.491 --> 00:07:54.038
add todos.

139
00:07:54.038 --> 00:07:58.480
But then, I'd make another reducer for
errors that would check for action.errors

140
00:07:58.480 --> 00:08:02.070
and handle the errors and maybe display
like a notification on the page.

141
00:08:02.070 --> 00:08:08.072
Something like that.
&gt;&gt; Scott Moss: So

142
00:08:08.072 --> 00:08:09.369
any other questions on this?

143
00:08:09.369 --> 00:08:12.481
I wanna walk through this again, does
anybody need me to walk through this again

144
00:08:12.481 --> 00:08:16.573
from a different perspective?
&gt;&gt; Speaker 6: Can you show where the todos

145
00:08:16.573 --> 00:08:23.940
or, excuse me, todo component is,
&gt;&gt; Speaker 6: Called,

146
00:08:23.940 --> 00:08:25.780
I guess?
&gt;&gt; Scott Moss: Yeah, the todo component,

147
00:08:25.780 --> 00:08:27.540
if we head into the main
that I just created,

148
00:08:27.540 --> 00:08:30.130
it's just right here.
&gt;&gt; Speaker 6: So

149
00:08:30.130 --> 00:08:34.325
where does it get the props?
&gt;&gt; Scott Moss: Right,

150
00:08:34.325 --> 00:08:36.147
because we're not passing props in here,
right?

151
00:08:36.147 --> 00:08:38.240
So you're like,
where is it getting the props?

152
00:08:38.240 --> 00:08:40.290
Exactly, so
we're not passing in any props here.

153
00:08:40.290 --> 00:08:42.709
So if we go to the actual todo component.

154
00:08:43.780 --> 00:08:48.031
The only props that we're
using on the todo component

155
00:08:48.031 --> 00:08:52.190
itself is the todos prop and
the createTodo prop.

156
00:08:52.190 --> 00:08:53.750
Those are the only two props we're using,
and

157
00:08:53.750 --> 00:08:56.960
we actually made those ourselves
with these two methods here.

158
00:08:56.960 --> 00:08:59.420
These methods created those props for us.

159
00:08:59.420 --> 00:09:03.908
So when I said mapActionsToProps,
I'm literally saying grab this action and

160
00:09:03.908 --> 00:09:05.410
merge it to the props.

161
00:09:05.410 --> 00:09:09.520
And the same thing with state,
grab this state and merge it to this prop.

162
00:09:09.520 --> 00:09:12.166
And then by saying connect, I'm saying so

163
00:09:12.166 --> 00:09:14.958
I wanna get all these
props that I just made and

164
00:09:14.958 --> 00:09:18.037
I wanna merge them with this component.
&gt;&gt; Speaker 6: Okay.

165
00:09:18.037 --> 00:09:19.371
&gt;&gt; Scott Moss: That's what that's doing,

166
00:09:19.371 --> 00:09:20.640
it's just a fancy merge.

167
00:09:20.640 --> 00:09:23.157
It's just grabbing all of
the stuff that we made here,

168
00:09:23.157 --> 00:09:24.810
and merging it to these props here.

169
00:09:26.010 --> 00:09:28.290
It's actually, this is what's
called a higher order component.

170
00:09:28.290 --> 00:09:31.490
So what connect is doing is
creating a new component for us.

171
00:09:31.490 --> 00:09:34.823
That's why I had to call this one
_Todo and rename this to Todo,

172
00:09:34.823 --> 00:09:38.990
because it's gonna return a new component
that's gonna wrap this component.

173
00:09:38.990 --> 00:09:42.136
Because in ES6,
you can't do mix-ins anymore.

174
00:09:42.136 --> 00:09:45.354
Whereas, React without ES6,
you can do these things called mix-ins.

175
00:09:45.354 --> 00:09:48.409
Which you can just do it super easily,
but you can't do it with ES6 so

176
00:09:48.409 --> 00:09:50.210
you just use connect instead.

177
00:09:50.210 --> 00:09:54.570
Other approaches include making
a decorator, so you can do something like,

178
00:09:54.570 --> 00:09:58.335
you can use connect as a decorator and
you can do that.

179
00:09:58.335 --> 00:10:02.012
So that's other stuff, but
it does the same thing.

180
00:10:02.012 --> 00:10:02.790
&gt;&gt; Speaker 6: Okay, thanks.

181
00:10:02.790 --> 00:10:03.400
&gt;&gt; Scott Moss: Yep,

182
00:10:03.400 --> 00:10:09.442
any other questions on this?
&gt;&gt; Scott Moss: I'm

183
00:10:09.442 --> 00:10:11.440
gonna push this up as an example so
you can look at it.

184
00:10:11.440 --> 00:10:12.360
Cuz you're about to do this.

185
00:10:13.550 --> 00:10:16.154
Not for todo though, for book.

186
00:10:16.154 --> 00:10:21.561
Cool, all right, so if there's no more
questions, I'm gonna push this up and

187
00:10:21.561 --> 00:10:26.988
it's gonna be on the same Todo library or
same Todo thing that we had yesterday.

188
00:10:26.988 --> 00:10:34.189
So,
&gt;&gt; Scott Moss: It's

189
00:10:34.189 --> 00:10:36.924
gonna be on the Redux branch.

190
00:10:36.924 --> 00:10:39.130
There's already a Redux branch.

191
00:10:39.130 --> 00:10:41.160
How did, I didn't make that.

192
00:10:41.160 --> 00:10:43.107
Who made that?

193
00:10:43.107 --> 00:10:48.120
Let's say redux-solution.

194
00:10:48.120 --> 00:10:49.190
There we go.

195
00:10:49.190 --> 00:10:51.429
So there's gonna be like
redux-solution branch.

196
00:11:03.168 --> 00:11:04.028
&gt;&gt; Scott Moss: Sweet, all right, so

197
00:11:04.028 --> 00:11:05.940
you can check that out and
use that as a reference.

