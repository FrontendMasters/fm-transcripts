WEBVTT

1
00:00:00.000 --> 00:00:03.769
[MUSIC]

2
00:00:03.769 --> 00:00:06.218
&gt;&gt; Scott: So first we wanna do is, well,

3
00:00:06.218 --> 00:00:12.230
the first exercise that I wanna have
you all do is we looked at the designs.

4
00:00:12.230 --> 00:00:15.320
We kind of just walk through about
what components, actions and

5
00:00:15.320 --> 00:00:18.620
state we'll need an app as
we walk to the designs.

6
00:00:18.620 --> 00:00:21.270
So what you're gonna have todo is you're
gonna have to create a route component and

7
00:00:21.270 --> 00:00:24.470
you have to prep redux with the store,
reducers and actions.

8
00:00:24.470 --> 00:00:27.266
Don't worry, we're gonna walk to that
right now before I actually have you

9
00:00:27.266 --> 00:00:27.790
do it.

10
00:00:27.790 --> 00:00:31.948
So what I'm gonna do now is I'm just
gonna take that todo app that we had from

11
00:00:31.948 --> 00:00:34.960
yesterday and
I'm just gonna set this up to redux.

12
00:00:34.960 --> 00:00:39.380
And this time it's gonna be a lot
more simpler to grasp is not a lot

13
00:00:39.380 --> 00:00:41.640
going on here like it was
in the CSS explanation and

14
00:00:41.640 --> 00:00:42.920
now I have time to actually explain it.

15
00:00:43.920 --> 00:00:47.598
So this is just a basic todo app that we
have that we start off with yesterday.

16
00:00:47.598 --> 00:00:51.260
If you remember, we're just a basic
styles whereas you can type todo.

17
00:00:54.310 --> 00:00:56.080
Okay, remote debugger.

18
00:00:56.080 --> 00:00:58.960
So you can type what todo and
I'll just show up on a page.

19
00:00:58.960 --> 00:01:03.850
Let me get rid of that remote debugger,
this one slows down, there you go.

20
00:01:03.850 --> 00:01:06.990
So instead of just keeping the state
locally, we're just gonna go ahead and

21
00:01:06.990 --> 00:01:08.530
put this in redux.

22
00:01:08.530 --> 00:01:09.830
Sorry, I have redux installed, so

23
00:01:09.830 --> 00:01:11.740
the first thing I wanna do is
right head over to source.

24
00:01:12.860 --> 00:01:17.090
I'm just gonna make a new file here and
I was gonna call this our store.

25
00:01:17.090 --> 00:01:21.565
So our store is literally where we're
gonna be storing our application state.

26
00:01:21.565 --> 00:01:25.609
Except we won't be interacting with
the store directly, redux will.

27
00:01:25.609 --> 00:01:29.480
We just have to give redux a store
to where it can save our statement.

28
00:01:29.480 --> 00:01:37.011
So the way we do that is we import
the method called createStore from redux.

29
00:01:38.160 --> 00:01:38.880
That's the first thing.

30
00:01:40.590 --> 00:01:46.284
And then what we also have to import
is our reducers that we need.

31
00:01:46.284 --> 00:01:48.920
So [INAUDIBLE] reducers and embed it.

32
00:01:48.920 --> 00:01:53.520
But that's what the store is gonna need,
so let's just go ahead and export and

33
00:01:53.520 --> 00:01:56.170
I would just say const store.

34
00:01:56.170 --> 00:01:57.120
Yes?

35
00:01:57.120 --> 00:01:58.408
&gt;&gt; Speaker 2: Do you
have a starter kit for

36
00:01:58.408 --> 00:02:01.710
this app we're gonna be doing or
do we need to start from scratch?

37
00:02:01.710 --> 00:02:03.300
&gt;&gt; Scott: There is gonna be a starter kit.

38
00:02:03.300 --> 00:02:03.800
Yeah.

39
00:02:05.870 --> 00:02:13.210
So we'll say export const store and that's
gonna equal createStore and like I said,

40
00:02:13.210 --> 00:02:16.070
we're going to pass in the reduces here,
so we're gonna go make those reducers.

41
00:02:16.070 --> 00:02:17.938
So now we're just gonna
make a new file right here.

42
00:02:17.938 --> 00:02:24.270
And we're gonna say reducers.js.

43
00:02:24.270 --> 00:02:28.047
And the job of the reducers is
to take the incoming state at

44
00:02:28.047 --> 00:02:32.460
a given action type create a new state.

45
00:02:32.460 --> 00:02:33.520
That's it.

46
00:02:33.520 --> 00:02:36.820
It is pure functions that take
the old state and make a new state.

47
00:02:36.820 --> 00:02:39.048
Nothing more, that's all they do.

48
00:02:39.048 --> 00:02:40.766
So what we do is for our todo app,

49
00:02:40.766 --> 00:02:44.854
we've gotta kind of think about like
what are the actions that we need to do.

50
00:02:44.854 --> 00:02:49.566
Well, if you go to the todo app, we
have an action where we actually we type

51
00:02:49.566 --> 00:02:52.916
this stuff in,
that could be an action, maybe not.

52
00:02:52.916 --> 00:02:54.425
We could probably keep that local, but

53
00:02:54.425 --> 00:02:56.840
definitely some of the actions
are gonna be creating it todo.

54
00:02:56.840 --> 00:03:00.340
So hidden that and create that todo and
update in our todo state.

55
00:03:00.340 --> 00:03:01.480
So I''ve pretty much created todo.

56
00:03:01.480 --> 00:03:03.040
That's like the only
action we have right now.

57
00:03:03.040 --> 00:03:07.113
If we had another ability like toclick,
totap this and have it removed and

58
00:03:07.113 --> 00:03:10.200
we make another action for remove todo.

59
00:03:10.200 --> 00:03:13.110
Or if we wanted to like sort of things out
with right now, it's just created todo.

60
00:03:13.110 --> 00:03:14.661
So that's the only action
that we're gonna have.

61
00:03:14.661 --> 00:03:18.666
So that's what we're gonna make,
so we're gonna say const and

62
00:03:18.666 --> 00:03:23.930
we'll just save, this reducers gonna
be todos and or reduces our functions.

63
00:03:23.930 --> 00:03:25.500
They're all functions.

64
00:03:25.500 --> 00:03:29.660
So the first argument that ever reducers
gonna get is the current state.

65
00:03:29.660 --> 00:03:33.310
So I'm gonna say the state by
default is gonna be an array.

66
00:03:33.310 --> 00:03:35.978
You do the default parameters
in ES6 like that, so

67
00:03:35.978 --> 00:03:38.285
state if undefined set
it equal to an array.

68
00:03:38.285 --> 00:03:40.780
The second argument you're
gonna get is the action.

69
00:03:43.980 --> 00:03:48.240
So this is just a function, so this is
why we do like switch statements because

70
00:03:48.240 --> 00:03:51.680
we want to create a new state
based on the action type.

71
00:03:51.680 --> 00:03:54.215
So that's why a switch
statement is what we do.

72
00:03:54.215 --> 00:03:55.763
So, I'll just go ahead and
do a switch statement,

73
00:03:55.763 --> 00:03:59.150
although we're only gonna be using one
action, let's just keep the same pattern.

74
00:03:59.150 --> 00:04:03.547
So switch on action.type and
for the first case,

75
00:04:03.547 --> 00:04:08.154
let's actually create that constant for
action and

76
00:04:08.154 --> 00:04:12.250
we'll just call this
TODO with the same name.

77
00:04:13.520 --> 00:04:16.240
So we have an action called CREATE_TODO.

78
00:04:16.240 --> 00:04:19.430
Yes, yes, go away, thank you.

79
00:04:19.430 --> 00:04:22.420
And then what we wanna do is we wanna
go ahead and make that case there, so

80
00:04:22.420 --> 00:04:24.690
the case is gonna be CREATE_TODO.

81
00:04:24.690 --> 00:04:28.861
So when CREATE_TODO happens, all you
wanna do is just update the state with

82
00:04:28.861 --> 00:04:31.960
the new TODO that was
passed in on the action.

83
00:04:31.960 --> 00:04:33.350
So remember,
the state is gonna be an array.

84
00:04:34.450 --> 00:04:40.810
So when someone creates a TODO, all we
wanna do is just return a new state.

85
00:04:40.810 --> 00:04:44.000
So we create a new array and
what we'll do is we'll go ahead and

86
00:04:44.000 --> 00:04:46.998
put the new TODO at the top,
so let's say action.

87
00:04:46.998 --> 00:04:49.588
And let's just say all the data we
pass on to the action is gonna be on

88
00:04:49.588 --> 00:04:50.527
the payload property.

89
00:04:50.527 --> 00:04:51.709
Let's just make that a standard now.

90
00:04:51.709 --> 00:04:55.370
Action.payload will always be the data
that we send with our actions.

91
00:04:55.370 --> 00:04:58.099
There's action.type which
is gonna be actions type,

92
00:04:58.099 --> 00:05:01.175
actions.payload which is the data
that we send on an action and

93
00:05:01.175 --> 00:05:04.990
then our optional action.error
if there's an error or not.

94
00:05:04.990 --> 00:05:07.320
So let's say action.payload
is always gonna be the data.

95
00:05:07.320 --> 00:05:08.080
So in this case,

96
00:05:08.080 --> 00:05:11.720
the payload would be the actual TODO
object that we created over here.

97
00:05:11.720 --> 00:05:14.627
So we're gonna put that at the top
of the array or at the beginning and

98
00:05:14.627 --> 00:05:16.930
there was gonna put any
stuff that's already there.

99
00:05:16.930 --> 00:05:18.520
So we'll spread over it like that.

100
00:05:18.520 --> 00:05:19.053
So again,

101
00:05:19.053 --> 00:05:22.976
we're creating a new array placing the new
TODO in the beginning of the array.

102
00:05:22.976 --> 00:05:26.712
And then iterating over any other TODO
that might have already been in there, so

103
00:05:26.712 --> 00:05:28.810
we don't forget about them.

104
00:05:28.810 --> 00:05:29.730
And that's the new state.

105
00:05:29.730 --> 00:05:31.330
So whatever you return is the new state.

106
00:05:32.800 --> 00:05:35.536
Do you see that?
Any question on that on this pattern

107
00:05:35.536 --> 00:05:36.411
right here?

108
00:05:36.411 --> 00:05:40.397
&gt;&gt; Speaker 3: There was a question about
does the name TODO is in the reducer

109
00:05:40.397 --> 00:05:43.090
create the key TODOs in the store state?

110
00:05:43.090 --> 00:05:43.880
&gt;&gt; Scott: No, it doesn't.

111
00:05:43.880 --> 00:05:47.620
So the name of the reducer
here is irrelevant, but

112
00:05:47.620 --> 00:05:51.560
because when we actually
combine the reducers.

113
00:05:51.560 --> 00:05:53.640
The object that you pass
to combine reducers,

114
00:05:53.640 --> 00:05:56.460
that's gonna be the key
inside of the actual state.

115
00:05:56.460 --> 00:06:00.600
So it's a pattern to name
the reducers with that same key.

116
00:06:00.600 --> 00:06:02.880
So no, the name doesn't affect it.

117
00:06:02.880 --> 00:06:06.070
But if you keep the pattern of keep
the names consistent alternately, yes,

118
00:06:06.070 --> 00:06:07.200
it will affect it.

119
00:06:07.200 --> 00:06:09.649
Which is what we're gonna do, but
this could be called anything,

120
00:06:09.649 --> 00:06:12.200
it's just whatever property you're
using the combined reducers.

121
00:06:13.430 --> 00:06:15.774
And then default statement,
we need to go ahead and

122
00:06:15.774 --> 00:06:17.744
just return state which is an empty array.

123
00:06:17.744 --> 00:06:22.210
So if your reducer returns undefined,
it will draw an error.

124
00:06:22.210 --> 00:06:25.060
Also if you try to mutate the state
in a reducer, it will throw an error,

125
00:06:25.060 --> 00:06:25.592
you can't.

126
00:06:25.592 --> 00:06:30.648
When you take the state, I can't

127
00:06:30.648 --> 00:06:37.000
just say state.push action.payload.

128
00:06:37.000 --> 00:06:38.090
And then just return statement.

129
00:06:40.170 --> 00:06:40.730
I can't do that.

130
00:06:41.740 --> 00:06:46.270
Redux is like nope, that's not happening
cuz you're mutating the state.

131
00:06:46.270 --> 00:06:52.573
So that's why we made a new
array with an array literal.

132
00:06:52.573 --> 00:06:54.264
Passed in the payload at the top and

133
00:06:54.264 --> 00:06:57.369
iterate over any possible TODOs
that may or may not be in there.

134
00:06:59.710 --> 00:07:01.810
So any questions on that?

135
00:07:01.810 --> 00:07:07.660
&gt;&gt; Speaker 4: So what actually
prevents you from mutating state?

136
00:07:07.660 --> 00:07:11.967
&gt;&gt; Scott: Reduces does a check cuz if it
is doing any quality check on the data

137
00:07:11.967 --> 00:07:14.410
structure, are these two the same?

138
00:07:14.410 --> 00:07:16.040
Nope, get out of here.

139
00:07:16.040 --> 00:07:16.800
Yeah, that's pretty much it.

140
00:07:20.160 --> 00:07:22.010
&gt;&gt; Scott: Any other questions?

141
00:07:23.850 --> 00:07:25.870
Cool, so we have that reducer and

142
00:07:25.870 --> 00:07:30.380
then, let's just say we'll make another
one even though we probably won't use it.

143
00:07:30.380 --> 00:07:32.930
We'll just call this one
user just to reiterate it.

144
00:07:32.930 --> 00:07:37.410
So user is also a reducer and let's say
its default state is gonna be an object.

145
00:07:39.530 --> 00:07:40.710
And then it also takes an action.

146
00:07:42.890 --> 00:07:45.620
But because we're probably not gonna use
this one right now, all we can do is we

147
00:07:45.620 --> 00:07:50.090
can just come there and say hey, just
return state which is gonna be an object.

148
00:07:50.090 --> 00:07:51.320
So now we have two reducers.

149
00:07:53.330 --> 00:07:57.660
And remember, I said we need to pass
the store in store.js a reducer but

150
00:07:57.660 --> 00:07:59.054
we have two of them.

151
00:07:59.054 --> 00:08:02.280
So what we can do is we can use a method
provided by redux to actually combine

152
00:08:02.280 --> 00:08:04.522
these reducers and pass to the store.

153
00:08:04.522 --> 00:08:09.065
So what we can do there is

154
00:08:09.065 --> 00:08:13.383
we can just say imports

155
00:08:13.383 --> 00:08:19.310
combinereducers from redux.

156
00:08:19.310 --> 00:08:23.952
And what we'll do is
we'll just go ahead and

157
00:08:23.952 --> 00:08:28.847
exports reduce or
export const reducer equals

158
00:08:28.847 --> 00:08:33.920
combineReducers which takes an object.

159
00:08:33.920 --> 00:08:35.910
And this is where the names
actually matter, so

160
00:08:35.910 --> 00:08:37.688
whatever properties you
pass into this object.

161
00:08:37.688 --> 00:08:41.370
Those are gonna be the state properties
that you get inside your components.

162
00:08:41.370 --> 00:08:44.750
So I'm just gonna keep him saying
we have a TODOs and we have a user.

163
00:08:44.750 --> 00:08:48.240
And because they're the same name and
of the properties that I want,

164
00:08:48.240 --> 00:08:53.250
I can just say todos user, just like that.

165
00:08:54.990 --> 00:09:02.080
Which is the equivalent of
doing todos: todos, user: user.

166
00:09:02.080 --> 00:09:05.720
This is a shortcut if I just do that
cuz they're both the same name.

167
00:09:05.720 --> 00:09:07.190
The property value
are the same variable name.

168
00:09:08.770 --> 00:09:09.396
Everybody get that?

169
00:09:09.396 --> 00:09:11.550
So that's just gonna get in this and
now that we have,

170
00:09:11.550 --> 00:09:13.110
that I can head back over to the store.

171
00:09:13.110 --> 00:09:14.790
&gt;&gt; Speaker 5: Can you
show me the import again?

172
00:09:14.790 --> 00:09:16.540
&gt;&gt; Scott: Yes.

173
00:09:16.540 --> 00:09:18.827
Import combine with redux.

174
00:09:18.827 --> 00:09:19.673
&gt;&gt; Speaker 5: Okay, thanks.

175
00:09:23.397 --> 00:09:30.027
&gt;&gt; Scott: So now that we have that,
I can head over to the store and

176
00:09:30.027 --> 00:09:36.670
I can import that reducer from reducers,
there we go.

177
00:09:36.670 --> 00:09:38.630
And I can just go ahead and pass it here.

178
00:09:40.430 --> 00:09:41.620
Yes?
&gt;&gt; Speaker 6: Is there some reason you

179
00:09:41.620 --> 00:09:45.400
wouldn't use default in your export for
this?

180
00:09:45.400 --> 00:09:46.900
&gt;&gt; Scott: No, you can use default,
it's totally up to you.

181
00:09:46.900 --> 00:09:47.710
If you use-
&gt;&gt; Speaker 6: Okay.

182
00:09:47.710 --> 00:09:51.557
&gt;&gt; Scott: Yeah, so if you were in here and
you were like, export default,

183
00:09:51.557 --> 00:09:55.496
you wouldn't need the name,
you wouldn't need the equal sign.

184
00:09:55.496 --> 00:09:59.339
You would say, export default
combineReducer and then on the store,

185
00:09:59.339 --> 00:10:01.369
you just won't need this brackets.

186
00:10:01.369 --> 00:10:04.002
And then you can call this whatever
you want, you can call it a,

187
00:10:04.002 --> 00:10:04.903
it doesn't matter.

188
00:10:04.903 --> 00:10:08.160
&gt;&gt; Speaker 6: Right
&gt;&gt; Scott: Yeah, I usually do that.

189
00:10:08.160 --> 00:10:11.470
I just don't for some reason because
it causes bugs for me sometimes.

190
00:10:11.470 --> 00:10:17.225
Because I use ES6 in node and they don't
have the default things or breaks.

191
00:10:17.225 --> 00:10:19.327
I'm just in the habit of doing this.

192
00:10:21.012 --> 00:10:25.390
&gt;&gt; Scott: Cool, so we have a store,
we have a reducer.

193
00:10:25.390 --> 00:10:29.780
Only thing we've gotta do now is
actually hook it up to our component,

194
00:10:29.780 --> 00:10:32.520
make some actions and dispatch them.

195
00:10:32.520 --> 00:10:33.370
Any questions so far?

196
00:10:35.800 --> 00:10:37.260
Everybody understand what's
happening right now?

197
00:10:38.700 --> 00:10:39.960
All right.
So we've got a store and

198
00:10:39.960 --> 00:10:41.290
we have some functions.

199
00:10:41.290 --> 00:10:44.220
That's just going to create
a new state given an action.

200
00:10:44.220 --> 00:10:44.720
That's it.

