WEBVTT

1
00:00:00.000 --> 00:00:04.114
[MUSIC]

2
00:00:04.114 --> 00:00:07.695
&gt;&gt; Scott: Actually the first we wanna do
is pull down the new Todo when this thing

3
00:00:07.695 --> 00:00:08.780
loads up.

4
00:00:08.780 --> 00:00:13.817
So let's do that, so what we can do is

5
00:00:13.817 --> 00:00:21.390
on componentsWillMount,
&gt;&gt; Scott: No,

6
00:00:21.390 --> 00:00:23.770
My God, I can't type, there we go.

7
00:00:23.770 --> 00:00:26.880
So there's a lifecycle hook that's gonna
be called when its component is about to

8
00:00:26.880 --> 00:00:30.620
mount on the app.

9
00:00:30.620 --> 00:00:33.410
So when it's about to mount what we
can do is I need another l here.

10
00:00:34.740 --> 00:00:38.484
We can go ahead and just make a call
to the API and get to todos and

11
00:00:38.484 --> 00:00:40.120
load up our local state.

12
00:00:40.120 --> 00:00:47.779
So we'll say fetch from fetch from

13
00:00:47.779 --> 00:00:57.481
http://localhosts:3000/todos.

14
00:00:58.086 --> 00:01:05.103
And I will say,
we'll pass them some options here,

15
00:01:05.103 --> 00:01:10.855
we'll say headers are going to be Accept,

16
00:01:16.722 --> 00:01:17.964
&gt;&gt; Scott: Application/json.

17
00:01:22.536 --> 00:01:23.144
&gt;&gt; Scott: There we go.

18
00:01:25.320 --> 00:01:32.632
And we'll say .then, get the response,
res.json, .then data.

19
00:01:32.632 --> 00:01:39.732
And then we'll say
this.setState of the todos,

20
00:01:39.732 --> 00:01:46.154
it's gonna be,
we can just call this todos,

21
00:01:46.154 --> 00:01:50.935
there we go, yes?
&gt;&gt; Speaker 2: The question on the channel

22
00:01:50.935 --> 00:01:56.870
about can you define default styles for

23
00:01:56.870 --> 00:01:59.766
every view text or text input?
&gt;&gt; Scott: Yeah,

24
00:01:59.766 --> 00:02:04.550
so somebody asked this question earlier,
I said it in the Hangout or I'm sorry,

25
00:02:04.550 --> 00:02:08.140
in the chat, basically you have your mind.
&gt;&gt; Speaker 2: I'm scrolled

26
00:02:08.140 --> 00:02:09.168
up.
&gt;&gt; Scott: Okay.

27
00:02:09.168 --> 00:02:12.742
&gt;&gt; Speaker 2: Sorry, forget that [COUGH].

28
00:02:12.742 --> 00:02:13.740
&gt;&gt; Scott: All right, so

29
00:02:13.740 --> 00:02:17.485
we have the fetch here on mount,
let's just reload,

30
00:02:17.485 --> 00:02:21.915
I took off all the reload and
stuff, it was giving me problems.

31
00:02:21.915 --> 00:02:26.460
So let's do that,
possible unhandled promise rejection.

32
00:02:26.460 --> 00:02:30.310
Anybody else get this error?
&gt;&gt; Speaker 3: Yeah.

33
00:02:30.310 --> 00:02:32.490
&gt;&gt; Scott: You get this error too?

34
00:02:32.490 --> 00:02:35.370
Somehow it's just coming style just going.

35
00:02:35.370 --> 00:02:38.723
I don't know, let's try that again.

36
00:02:38.723 --> 00:02:42.440
No, reload.

37
00:02:43.490 --> 00:02:45.590
Okay, network failed.

38
00:02:45.590 --> 00:02:53.160
So let's see, let's look at the server,
my server running, start that again.

39
00:02:54.690 --> 00:03:01.814
Let's put in a different port,
on my own port 5,000.

40
00:03:03.610 --> 00:03:13.232
And I'll come here and change this.
&gt;&gt; Scott: Okay, what?

41
00:03:13.930 --> 00:03:15.996
Still getting that error?

42
00:03:15.996 --> 00:03:21.196
That's strange.

43
00:03:21.196 --> 00:03:26.615
Let's test something right quick,

44
00:03:26.615 --> 00:03:32.031
http localhost, yes, there we go,

45
00:03:32.031 --> 00:03:37.117
localhosts:5000/todos.

46
00:03:37.117 --> 00:03:38.770
Okay, so that totally works.

47
00:03:38.770 --> 00:03:42.722
One without fetch is tripped,

48
00:03:42.722 --> 00:03:47.738
then let's try this out in a browser and

49
00:03:47.738 --> 00:03:51.235
a non-HTTPs location like

50
00:03:51.235 --> 00:03:59.564
here.
&gt;&gt; Scott: Yeah,

51
00:03:59.564 --> 00:04:04.334
this totally works too.
&gt;&gt; Scott: Actually not too sure why react

52
00:04:04.334 --> 00:04:05.640
native is.

53
00:04:05.640 --> 00:04:08.990
Tripping is not even giving me an error,
it's just saying no.

54
00:04:11.750 --> 00:04:13.800
Anybody else have this error and
was able to resolve it?

55
00:04:16.470 --> 00:04:18.190
Is anybody have this error
block them right now?

56
00:04:19.845 --> 00:04:21.984
You're having the same issue?

57
00:04:21.984 --> 00:04:23.682
Interesting, [INAUDIBLE].
&gt;&gt; Speaker 3: Yeah,

58
00:04:23.682 --> 00:04:26.300
I was trying to post though.
&gt;&gt; Scott: You were trying to post.

59
00:04:26.300 --> 00:04:28.526
Okay, well,
we'll come back to post, we'll see.

60
00:04:28.526 --> 00:04:30.420
I don't know what's going on there.

61
00:04:30.420 --> 00:04:34.270
Looks like I just can't do fetch
from react native right now.

62
00:04:34.270 --> 00:04:37.090
Not too sure why.
&gt;&gt; Speaker 2: Christina

63
00:04:37.090 --> 00:04:40.740
in the chat is saying she had
to change localhost to her

64
00:04:40.740 --> 00:04:44.930
actual machine's IP address.
&gt;&gt; Scott: Really?

65
00:04:46.040 --> 00:04:47.810
Okay.
&gt;&gt; Speaker 4: Is she on an actual device?

66
00:04:50.130 --> 00:04:53.160
&gt;&gt; Scott: How do you get that?

67
00:04:53.160 --> 00:04:57.835
What's a quick command of your IP?
&gt;&gt; Speaker 5: Ipconfig.

68
00:04:57.835 --> 00:05:00.680
&gt;&gt; Scott: Okay.

69
00:05:00.680 --> 00:05:01.941
&gt;&gt; Speaker 5: You got it in.

70
00:05:01.941 --> 00:05:03.289
&gt;&gt; Scott: Okay.

71
00:05:03.289 --> 00:05:05.882
&gt;&gt; Speaker 5: You have to open your

72
00:05:05.882 --> 00:05:12.860
network.
&gt;&gt; Scott: Let's do ipconfig.

73
00:05:16.166 --> 00:05:18.800
&gt;&gt; Speaker 5: If.

74
00:05:18.800 --> 00:05:19.717
&gt;&gt; Scott: Let's try that

75
00:05:25.214 --> 00:05:26.520
&gt;&gt; Scott: Okay, yeah, that worked.

76
00:05:26.520 --> 00:05:29.460
I don't know [LAUGH] what
was going on with that.

77
00:05:29.460 --> 00:05:32.240
That's weird, but okay, that worked.

78
00:05:32.240 --> 00:05:34.069
Let's confirm it by going to the server.

79
00:05:34.069 --> 00:05:35.014
Yeah, that's right.
&gt;&gt; Speaker 2: I wonder if

80
00:05:35.014 --> 00:05:38.109
it's confused about what
localhost means in the simulator.

81
00:05:39.850 --> 00:05:40.800
&gt;&gt; Scott: Yeah, could be the similar.

82
00:05:40.800 --> 00:05:42.980
I'm never had trouble with it before,
I've always used it.

83
00:05:42.980 --> 00:05:45.240
I don't know, I'm not too sure
cuz some people have an issue.

84
00:05:45.240 --> 00:05:47.950
Some people aren't,
I'm not too sure what was that about.

85
00:05:47.950 --> 00:05:51.810
But anyway, so we fetched the state and
we're setting our state to that.

86
00:05:51.810 --> 00:05:54.992
Which is just empty nothing and

87
00:05:54.992 --> 00:05:58.440
to confirm if I go back with db.jason app,
I put something in here.

88
00:05:58.440 --> 00:06:01.210
I'm expecting there to be objects
here with name properties.

89
00:06:01.210 --> 00:06:04.746
So I could say name,

90
00:06:04.746 --> 00:06:09.738
let's say take out trash and

91
00:06:09.738 --> 00:06:14.523
then I restart the server.

92
00:06:14.523 --> 00:06:18.807
Actually you're gonna do --watch on a JSON
server and it will restart by itself.

93
00:06:18.807 --> 00:06:21.972
There we go, and then if we restart this,
we should see something.

94
00:06:28.537 --> 00:06:29.422
&gt;&gt; Scott: There we go, so

95
00:06:29.422 --> 00:06:30.586
take out the trash.

96
00:06:30.586 --> 00:06:32.710
So that's the first one
cuz that was already here.

97
00:06:32.710 --> 00:06:35.260
So now we know that we're
pulling data from there,

98
00:06:35.260 --> 00:06:38.390
let's actually go ahead and add some data.

99
00:06:38.390 --> 00:06:39.449
So we'll say fetch.

100
00:06:41.530 --> 00:06:50.468
And we want the same URL here.
&gt;&gt; Scott: And

101
00:06:50.468 --> 00:06:53.800
what we do is we'll just
copy these headers again.

102
00:06:56.384 --> 00:06:59.022
&gt;&gt; Scott: And we'll say the body is going

103
00:06:59.022 --> 00:07:03.910
to be JSON.stringify,
always .stringify with body.

104
00:07:03.910 --> 00:07:11.435
And only we're gonna pass it as a name
which is gonna be this .state.newTodo.

105
00:07:11.435 --> 00:07:15.376
So only we're gonna pass it here and
we also need to pass in the method.

106
00:07:18.113 --> 00:07:21.658
&gt;&gt; Scott: Which is going to be POST,

107
00:07:21.658 --> 00:07:22.790
sweet.

108
00:07:22.790 --> 00:07:27.895
So we got that and then we can say .then,
the response, response.json.

109
00:07:27.895 --> 00:07:32.651
And I'm pretty sure the JSON
server's gonna send back the entire

110
00:07:32.651 --> 00:07:34.510
object we created.

111
00:07:34.510 --> 00:07:37.186
So that will be the todo.

112
00:07:37.186 --> 00:07:40.820
And what we want to do is now
as we'll get all the todos.

113
00:07:40.820 --> 00:07:46.116
So const todos =

114
00:07:46.116 --> 00:07:53.687
this.state.todos.

115
00:07:53.687 --> 00:07:58.080
And what I want to do is I'll
say I'll spread over this.

116
00:07:58.080 --> 00:08:01.110
And I wanna do is I'm gonna
actually put the new one up front.

117
00:08:01.110 --> 00:08:02.657
So put that last and

118
00:08:02.657 --> 00:08:08.089
I'll put the new one up here which
would just be todo, there we go.

119
00:08:08.089 --> 00:08:14.911
And I would say this.setState,
todos is gonna be todos and

120
00:08:14.911 --> 00:08:20.517
then a new todo is gonna
be an empty string again.

121
00:08:20.517 --> 00:08:23.029
So basically what we did last
time is I just a side.then.

122
00:08:24.810 --> 00:08:27.756
And I just moved this new todo to the top
a list instead of the bottom of the list

123
00:08:27.756 --> 00:08:36.600
this time.
&gt;&gt; Scott: [INAUDIBLE] Refresh this app.

124
00:08:36.600 --> 00:08:41.060
Cool, take out the trash and
then clean doggy.

125
00:08:45.470 --> 00:08:50.620
Broke, I mean that same error again,
what happened here?

126
00:08:50.620 --> 00:08:54.868
Cannot read properly id of undefined on

127
00:08:54.868 --> 00:08:59.785
post todo.
&gt;&gt; Scott: Where am

128
00:08:59.785 --> 00:09:04.307
I?
&gt;&gt; Scott: Well, let's try that again.

129
00:09:11.894 --> 00:09:13.233
&gt;&gt; Scott: There we go.

130
00:09:13.233 --> 00:09:18.220
I'm still getting it, let's see.

131
00:09:18.220 --> 00:09:19.830
What are you complaining about?

132
00:09:22.680 --> 00:09:26.750
Looks like now we have error with
JSON server, acting ridiculous.

133
00:09:31.480 --> 00:09:35.873
So this is why, this is totally fine, so

134
00:09:35.873 --> 00:09:40.830
it's not liking me today.
&gt;&gt; Speaker 5: Does it have to have an ID?

135
00:09:40.830 --> 00:09:42.260
&gt;&gt; Scott: No, it creates the ID for you.

136
00:09:43.550 --> 00:09:46.520
So I'm not sure why it's acting up.

137
00:09:46.520 --> 00:09:51.300
Sometimes it says the server
just needs a restart.

138
00:09:51.300 --> 00:10:01.256
There we go.
&gt;&gt; Scott: No,

139
00:10:01.256 --> 00:10:03.850
yeah, I'm not so
sure why JSON server is messing up, but

140
00:10:03.850 --> 00:10:05.320
it's definitely JSON server.

141
00:10:05.320 --> 00:10:09.890
And I don't want to debug that right now
cuz that's not what we're teaching, but

142
00:10:09.890 --> 00:10:10.990
this code is correct.

143
00:10:12.830 --> 00:10:17.690
Any questions on this?
&gt;&gt; Speaker 2: Do you need to

144
00:10:17.690 --> 00:10:22.770
set the content type?
&gt;&gt; Scott: I

145
00:10:22.770 --> 00:10:25.508
thought I did that.
&gt;&gt; Speaker 2: It's not the get,

146
00:10:25.508 --> 00:10:27.181
the post one that make you [INAUDIBLE].
&gt;&gt; Scott: No,

147
00:10:27.181 --> 00:10:32.040
it's yeah.
&gt;&gt; Speaker 2: I'm just guessing.

148
00:10:32.040 --> 00:10:37.192
&gt;&gt; Scott: That could be it actually.

149
00:10:37.192 --> 00:10:40.350
So I thought I already did that.
&gt;&gt; Speaker 2: You did that on the sample

150
00:10:40.350 --> 00:10:42.336
one.
&gt;&gt; Scott: Yeah, I did.

151
00:10:42.336 --> 00:10:42.872
&gt;&gt; Speaker 2: The prebreak one.

152
00:10:42.872 --> 00:10:45.026
&gt;&gt; Scott: That's why I thought I did it.

153
00:10:45.026 --> 00:10:46.800
&gt;&gt; Speaker 2: That's what I thought.

154
00:10:46.800 --> 00:10:48.340
&gt;&gt; Scott: That must have been it.

155
00:10:48.340 --> 00:10:50.484
That's why I couldn't find
it undefined makes sense.

156
00:10:57.707 --> 00:10:59.317
&gt;&gt; Scott: Nope, this just JSON server.

157
00:11:09.808 --> 00:11:10.909
&gt;&gt; Scott: Yeah, it's just my stuff.

158
00:11:12.410 --> 00:11:14.510
It did this to me a long time ago and
I stopped using it and

159
00:11:14.510 --> 00:11:15.320
then I got back to it.

160
00:11:15.320 --> 00:11:17.020
So, not too sure why.

