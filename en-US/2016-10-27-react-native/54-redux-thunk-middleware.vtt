WEBVTT

1
00:00:00.021 --> 00:00:03.963
[MUSIC]

2
00:00:03.963 --> 00:00:06.935
&gt;&gt; Scott Moss: So async stuff
in Redux is a little different,

3
00:00:06.935 --> 00:00:08.620
it's not quite the same.

4
00:00:08.620 --> 00:00:11.190
So let's just look at
this on our Todo app.

5
00:00:11.190 --> 00:00:17.861
So I'll say cd Todo and
we'll open this up.

6
00:00:28.138 --> 00:00:29.563
&gt;&gt; Scott Moss: No, wrong thing.

7
00:00:42.210 --> 00:00:44.119
&gt;&gt; Scott Moss: See, Atom takes forever to

8
00:00:44.119 --> 00:00:45.535
open up sometimes.

9
00:00:45.535 --> 00:00:47.211
Does WebStorm take this long to open up?

10
00:00:48.995 --> 00:00:51.011
&gt;&gt; Scott Moss: [LAUGH]
&gt;&gt; Speaker 2: Even longer.

11
00:00:51.011 --> 00:00:53.243
&gt;&gt; Scott Moss: Even longer, yeah.

12
00:00:53.243 --> 00:00:55.746
You gotta come back to it.

13
00:00:55.746 --> 00:01:02.610
All right, so let's convert some of
this todo stuff over to be async.

14
00:01:02.610 --> 00:01:05.496
So the first thing we wanna do is,
we need some server, so

15
00:01:05.496 --> 00:01:07.491
let's just make a server right quick.

16
00:01:07.491 --> 00:01:14.450
So touch db.json, there we go.

17
00:01:14.450 --> 00:01:16.934
And then in db.json I'll just have,

18
00:01:19.225 --> 00:01:25.200
&gt;&gt; Scott Moss: todos.
&gt;&gt; Scott Moss: There we go.

19
00:01:25.200 --> 00:01:29.480
Sweet, so we got todos and
then what I need to do now

20
00:01:31.870 --> 00:01:34.350
is, let's see, where is our state?

21
00:01:34.350 --> 00:01:36.039
So we have our state here,
we need to actually make

22
00:01:37.300 --> 00:01:40.350
Redux able to handle asynchronous things,
right now it can't.

23
00:01:40.350 --> 00:01:42.130
So we actually need to add
some middleware for this, and

24
00:01:42.130 --> 00:01:45.290
the easiest one to use I would
say is probably Redux Thunk.

25
00:01:45.290 --> 00:01:48.177
So if we npm install --save

26
00:01:48.177 --> 00:01:54.805
redux-thunk,
&gt;&gt; Scott Moss: This is gonna

27
00:01:54.805 --> 00:01:59.060
allow us to add some middleware to our app
so we can actually do some async stuff.

28
00:01:59.060 --> 00:02:04.067
So let's head over to our store and

29
00:02:04.067 --> 00:02:12.528
what we're gonna do is import
thunk from redux-thunk and

30
00:02:12.528 --> 00:02:18.513
we also need,
&gt;&gt; Scott Moss: applyMiddleware from redux,

31
00:02:18.513 --> 00:02:25.291
cuz we're gonna apply some middleware now.
&gt;&gt; Scott Moss: So

32
00:02:25.291 --> 00:02:30.240
a thunk is just a function that's
gonna allow us to do some async stuff.

33
00:02:31.580 --> 00:02:32.860
But it's not gonna be an action.

34
00:02:32.860 --> 00:02:35.730
It's just gonna be an action
creator that dispatches actions but

35
00:02:35.730 --> 00:02:38.010
it itself is gonna be a async.

36
00:02:38.010 --> 00:02:43.602
Async function that on a result of
some async action call an action.

37
00:02:43.602 --> 00:02:44.210
Does that makes sense?

38
00:02:44.210 --> 00:02:49.088
So it's a function that we can call that's
gonna be async and then when it resolves,

39
00:02:49.088 --> 00:02:50.471
it will call an action.

40
00:02:50.471 --> 00:02:55.357
So we'll get rid of this
initial state here and

41
00:02:55.357 --> 00:02:59.619
instead we'll say applyMiddleware and

42
00:02:59.619 --> 00:03:03.012
we'll say thunk, there we go.

43
00:03:03.012 --> 00:03:05.541
So now we've got some thunk in there.

44
00:03:05.541 --> 00:03:08.239
And what we can do now,
if we head over to,

45
00:03:08.239 --> 00:03:12.648
let me see reducers here,
we'll make it a new file called actions.

46
00:03:17.655 --> 00:03:20.050
&gt;&gt; Scott Moss: Or actionCreator, I guess.

47
00:03:22.490 --> 00:03:25.740
And we'll make a new one
that just posts to todos and

48
00:03:25.740 --> 00:03:27.866
it'll make one that gets todos.

49
00:03:27.866 --> 00:03:35.395
So const getTodos.
&gt;&gt; Scott Moss: And

50
00:03:35.395 --> 00:03:39.716
export const createTodo that takes

51
00:03:39.716 --> 00:03:45.878
a todo.
&gt;&gt; Scott Moss: Cool,

52
00:03:45.878 --> 00:03:50.421
so getTodos, all it's gonna do and
what these functions need to do is,

53
00:03:50.421 --> 00:03:54.378
they're thunks so
they're gonna return another function.

54
00:03:54.378 --> 00:03:57.910
So because this is implicit I can
just return a function like this.

55
00:03:57.910 --> 00:04:01.718
And the argument that this return
function's gonna receive is a dispatch.

56
00:04:01.718 --> 00:04:02.840
So I can just go ahead and do that.

57
00:04:04.890 --> 00:04:06.580
Is anybody confused about
that syntax right there?

58
00:04:06.580 --> 00:04:09.050
So this is a function called getTodos

59
00:04:09.050 --> 00:04:11.010
which is immediately
returning another function.

60
00:04:11.010 --> 00:04:13.310
We're just taking dispatch as an argument.

61
00:04:13.310 --> 00:04:15.410
Which is immediately about
to return something else.

62
00:04:16.710 --> 00:04:19.063
Everybody feel me on that?

63
00:04:19.063 --> 00:04:24.292
All right, so this function, the first
thing we wanna do is we wanna say.

64
00:04:24.292 --> 00:04:28.395
This is your opportunity to dispatch a
starting action, remember I had the action

65
00:04:28.395 --> 00:04:32.460
separated where it was like add exercise,
add exercise, completed.

66
00:04:32.460 --> 00:04:33.380
This is where you would do that.

67
00:04:33.380 --> 00:04:36.686
So you would fire off an action like,
I'm about to add an exercise and

68
00:04:36.686 --> 00:04:39.829
then once that resolves like,
all right, exercise completed.

69
00:04:39.829 --> 00:04:40.785
So this is your chance to do that.

70
00:04:40.785 --> 00:04:43.305
But we're not gonna the pretty one,

71
00:04:43.305 --> 00:04:48.352
we're just gonna jump right into it and
we're gonna say fetch from http.

72
00:04:48.352 --> 00:04:54.730
And for some reason, I need to use
the IP address cuz it breaks if I don't.

73
00:04:56.500 --> 00:05:00.496
Don't be looking at the IP address,
http., and

74
00:05:00.496 --> 00:05:06.795
it's probably gonna be on port 3000,
we'll change it if not, /todos.

75
00:05:06.795 --> 00:05:11.460
So we wanna fetch that with these headers

76
00:05:21.627 --> 00:05:23.277
&gt;&gt; Scott Moss: applications/json,

77
00:05:23.277 --> 00:05:31.835
a lot of boilerplate.
&gt;&gt; Scott Moss: All right,

78
00:05:31.835 --> 00:05:34.560
I think we only need that for
a get, there we go.

79
00:05:34.560 --> 00:05:40.002
So we're just gonna get the todos and
then we'll say .then.

80
00:05:40.002 --> 00:05:46.547
And we'll just assume that it's all good,
res.json .then, these will be the todos.

81
00:05:46.547 --> 00:05:51.680
And what we wanna do with the todos here
is we're going to dispatch an action.

82
00:05:51.680 --> 00:05:54.022
And, I think we already have actions here,
right?

83
00:05:54.022 --> 00:05:59.480
If we look inside, yeah,
we have an action called CREATE_TODO.

84
00:05:59.480 --> 00:06:02.699
We wanna go ahead and just, I'm just gonna
ahead and just copy the string here, so

85
00:06:02.699 --> 00:06:04.440
I don't flag modulizer and all this stuff.

86
00:06:06.020 --> 00:06:07.372
So we'll just go ahead and

87
00:06:07.372 --> 00:06:13.472
dispatch an action with,
&gt;&gt; Scott Moss: A type of CREATE_TODO,

88
00:06:13.472 --> 00:06:15.639
oops, CREATE_TODO and

89
00:06:15.639 --> 00:06:21.120
the payload is going to be the todos
that we got from the server.

90
00:06:24.200 --> 00:06:28.570
All right, so
this is just a asynchronous function and

91
00:06:28.570 --> 00:06:33.036
then when it resolves,
I'm gonna dispatch an action.

92
00:06:33.036 --> 00:06:35.899
That's what's happening here.

93
00:06:35.899 --> 00:06:38.320
And that's why we get this dispatch,
this is what thunk is doing.

94
00:06:38.320 --> 00:06:42.080
It's like, hey, here's the dispatch, so
you can do all your async stuff, and

95
00:06:42.080 --> 00:06:43.481
then dispatch your actions.

96
00:06:43.481 --> 00:06:45.448
So we're gonna do the same
thing with createTodo,

97
00:06:45.448 --> 00:06:52.347
I'm just gonna copy this.
&gt;&gt; Scott Moss: Except this is going to be,

98
00:06:56.481 --> 00:06:58.620
&gt;&gt; Scott Moss: POST and we do, oops.

99
00:07:00.900 --> 00:07:03.258
That's a POST and
we do need Content-Type here.

100
00:07:10.786 --> 00:07:12.408
&gt;&gt; Scott Moss: Cool, all right.

101
00:07:12.408 --> 00:07:13.040
&gt;&gt; Speaker 3: Misspelling.

102
00:07:13.040 --> 00:07:15.933
&gt;&gt; Scott Moss: Thank you.

103
00:07:15.933 --> 00:07:21.171
Cool, all right, and
then this one, I'm sorry,

104
00:07:21.171 --> 00:07:28.100
this isn't CREATE_TODO,
this is GET_TODOS, this is CREATE_TODO.

105
00:07:28.100 --> 00:07:35.214
This takes a todo and
then we need to put on the body,

106
00:07:35.214 --> 00:07:39.980
JSON.stringify(todo).

107
00:07:39.980 --> 00:07:41.480
There we go.

108
00:07:41.480 --> 00:07:42.695
And when this is done creating,

109
00:07:42.695 --> 00:07:45.360
I think this is gonna spit
back the todo that we created.

110
00:07:45.360 --> 00:07:46.550
So we'll grab that.

111
00:07:46.550 --> 00:07:48.450
And this will be
CREATE_TODO with one todo.

112
00:07:50.540 --> 00:07:52.150
That's a mouthful.

113
00:07:52.150 --> 00:07:54.990
So really it's just your async function.

114
00:07:54.990 --> 00:07:58.380
And then in the resolution, you just
call a dispatch and pass in the payload.

115
00:07:59.960 --> 00:08:03.720
Mix that with redux-thunk and
we're able to do this.

116
00:08:03.720 --> 00:08:09.300
So now, just let me update the reducers to
make sure we have the one for getTodos.

117
00:08:09.300 --> 00:08:12.374
So we'll just say case for

118
00:08:12.374 --> 00:08:17.939
GET_TODOS,
&gt;&gt; Scott Moss: Let's

119
00:08:17.939 --> 00:08:25.535
make that right quick.
&gt;&gt; Scott Moss: So

120
00:08:25.535 --> 00:08:29.134
the case for that is, literally, we're
just gonna overwrite the entire state,

121
00:08:29.134 --> 00:08:35.392
whatever we got back from the server.
&gt;&gt; Scott Moss: So

122
00:08:35.392 --> 00:08:39.610
just return the payload.
&gt;&gt; Scott Moss: There we go.

123
00:08:39.610 --> 00:08:42.570
So just wipe out whatever we have locally
and have the server completely be

124
00:08:42.570 --> 00:08:44.882
the new set of todos.
&gt;&gt; Speaker 4: I think it should be

125
00:08:44.882 --> 00:08:47.663
action.payload.
&gt;&gt; Scott Moss: Yeah,

126
00:08:47.663 --> 00:08:50.710
action.payload, thank you.

127
00:08:50.710 --> 00:08:52.130
There we go.

128
00:08:52.130 --> 00:08:56.050
So we got that,
we got our action creators hooked up.

129
00:08:56.050 --> 00:08:58.200
Now if we head back over to our Todos,
this is where we would call them.

