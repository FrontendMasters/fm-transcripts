WEBVTT

1
00:00:00.000 --> 00:00:03.958
[MUSIC]

2
00:00:03.958 --> 00:00:08.535
&gt;&gt; Scott Moss: So yeah, that's pretty
much HTTP React Native, it's just fetch.

3
00:00:08.535 --> 00:00:13.460
Obviously you need a reliable API,
like we kind of have, but not really.

4
00:00:13.460 --> 00:00:16.080
So the next thing we're gonna talk about,
Redux.

5
00:00:16.080 --> 00:00:19.766
I don't wanna get too much into Redux,
cuz there's so much you can talk about,

6
00:00:19.766 --> 00:00:21.208
it could be a course on its own.

7
00:00:21.208 --> 00:00:23.235
But we're just gonna talk
a little bit about it and

8
00:00:23.235 --> 00:00:25.077
how we're gonna organize our application.

9
00:00:25.077 --> 00:00:27.490
Because tomorrow, we gonna be
building out a full application.

10
00:00:28.550 --> 00:00:31.940
So let's just get into that.

11
00:00:31.940 --> 00:00:38.484
So what we'll do is, first thing we
want to do is npm install redux.

12
00:00:41.876 --> 00:00:48.016
&gt;&gt; Scott Moss: Npm install --save
redux and also react-redux,

13
00:00:48.016 --> 00:00:52.070
we'll install both of those too.

14
00:00:52.070 --> 00:00:55.780
And what redux is is just a state
solution for our components.

15
00:00:55.780 --> 00:00:59.354
It's just like a single state store
that we can use in our application.

16
00:00:59.354 --> 00:01:03.170
And then we create actions
to change that state.

17
00:01:03.170 --> 00:01:07.570
It keeps our state predictable and
it keeps it flowing in one direction so

18
00:01:07.570 --> 00:01:08.620
we can use it pretty simply.

19
00:01:10.670 --> 00:01:13.241
So now that we have that,
what we're gonna do is,

20
00:01:13.241 --> 00:01:16.449
let's just set up a basic Redux
app here to see how that works.

21
00:01:16.449 --> 00:01:19.522
So we'll create some state,
we'll create a reducer, and

22
00:01:19.522 --> 00:01:22.220
then we'll create an action
to change that state.

23
00:01:22.220 --> 00:01:29.040
And we'll see what that actually looks
like, then we'll hook it all up.

24
00:01:29.040 --> 00:01:34.395
All right, so let's actually do this and

25
00:01:34.395 --> 00:01:37.250
I'll just go ahead.

26
00:01:37.250 --> 00:01:39.703
Actually, I'll push this up what I
have right now right quick first.

27
00:02:04.760 --> 00:02:06.599
&gt;&gt; Scott Moss: Cool, that's pushed up.

28
00:02:09.577 --> 00:02:13.504
&gt;&gt; Scott Moss: All right, and I'm just
going to use the same Reddit thing that I

29
00:02:13.504 --> 00:02:15.550
have here for the Redux example.

30
00:02:15.550 --> 00:02:17.922
So the first thing I want
to do is start our app.

31
00:02:17.922 --> 00:02:20.430
I'm just gonna make a new folder and
we'll call it,

32
00:02:20.430 --> 00:02:23.053
actually I'm just not gonna
do the folders right now.

33
00:02:23.053 --> 00:02:24.488
Let's just put this all into some files.

34
00:02:27.040 --> 00:02:31.390
&gt;&gt; Scott Moss: Make a new
folder called store.

35
00:02:32.760 --> 00:02:36.698
So the way Redux works is you create
a store which is where all of our

36
00:02:36.698 --> 00:02:38.790
application state is gonna live.

37
00:02:38.790 --> 00:02:43.660
And then we create a reducer for
each part of our store.

38
00:02:43.660 --> 00:02:48.504
And what the reducer's job is,
it's pretty much just to tell Redux how

39
00:02:48.504 --> 00:02:51.749
the new state is gonna
look after its modified.

40
00:02:51.749 --> 00:02:54.703
Cuz all the state is gonna be immutable,
so we just need to define hey,

41
00:02:54.703 --> 00:02:56.006
whenever I change this state,

42
00:02:56.006 --> 00:02:58.980
I'm gonna create this reducer which
is gonna define how it looks now.

43
00:02:58.980 --> 00:03:00.953
This is how it used to look,
this is how it's gonna look now,

44
00:03:00.953 --> 00:03:02.510
it's just reducing it.

45
00:03:02.510 --> 00:03:05.120
And then we created actions to
actually change that state.

46
00:03:05.120 --> 00:03:08.520
So the actions change the state,
which trigger the reducers.

47
00:03:08.520 --> 00:03:13.430
And then our components subscribe to
that and then we get a update and

48
00:03:13.430 --> 00:03:14.950
it re-renders.

49
00:03:14.950 --> 00:03:16.300
So we're gonna walk through
all that right quick.

50
00:03:16.300 --> 00:03:18.250
So the first thing we do
is actually create a store.

51
00:03:18.250 --> 00:03:19.755
So what we'll do is we'll import.

52
00:03:23.414 --> 00:03:29.077
&gt;&gt; Scott Moss: creatStore from redux.

53
00:03:31.739 --> 00:03:32.694
&gt;&gt; Scott Moss: That's
the first thing we'll do.

54
00:03:32.694 --> 00:03:35.839
And what we'll do is
we'll just go ahead and

55
00:03:35.839 --> 00:03:42.020
we also need to import something from
our reducers that we haven't made yet.

56
00:03:42.020 --> 00:03:48.030
So we'll just say from reducers
&gt;&gt; Scott Moss: Reducers, there we go.

57
00:03:48.030 --> 00:03:52.450
Now we'll just call this reducer,
we haven't made that yet.

58
00:03:52.450 --> 00:03:56.170
And all we'll do is we'll
just say export const

59
00:03:56.170 --> 00:04:01.255
store,
&gt;&gt; Scott Moss: Equals create,

60
00:04:03.577 --> 00:04:04.634
&gt;&gt; Scott Moss: Store,

61
00:04:09.060 --> 00:04:09.910
&gt;&gt; Scott Moss: With the reducer.

62
00:04:13.277 --> 00:04:17.360
&gt;&gt; Scott Moss: That's it, so
we'll do that, and that'll be our store.

63
00:04:17.360 --> 00:04:19.606
So the next thing wel do is go ahead and
create our reducers.

64
00:04:19.606 --> 00:04:25.960
So we'll say reducers,
&gt;&gt; Scott Moss: And a reducer

65
00:04:25.960 --> 00:04:30.090
is just a function that takes a state and
returns a new state, that's all it does.

66
00:04:30.090 --> 00:04:32.377
It's a pure function, no side effects.

67
00:04:32.377 --> 00:04:36.996
Given a state and an action that
was called, return the new state,

68
00:04:36.996 --> 00:04:38.492
that's all it does.

69
00:04:38.492 --> 00:04:43.024
So we'll make one reducer for
our Reddit data right here.

70
00:04:43.024 --> 00:04:47.730
We'll make a reducer that
just gets the data and stuff.

71
00:04:47.730 --> 00:04:51.069
So the first thing we'll do is
we'll come inside of reducers.

72
00:04:51.069 --> 00:04:56.811
We'll say const export,
actually INAUDIBLE] we don't export this.

73
00:04:56.811 --> 00:05:01.481
We'll say const reddit, and
we'll set that equal to a function.

74
00:05:01.481 --> 00:05:05.401
Remember, our reducer's a function
that takes a state and a action and

75
00:05:05.401 --> 00:05:06.940
it returns a new state.

76
00:05:06.940 --> 00:05:11.111
So the state gonna the first argument, and
we'll just set that default to be an array

77
00:05:11.111 --> 00:05:14.182
just in case there's nothing there,
so default to an array.

78
00:05:14.182 --> 00:05:19.221
And then the next thing is gonna be an
object with the action that was invoked.

79
00:05:19.221 --> 00:05:24.200
Now all we need to do is
just return a new state.

80
00:05:24.200 --> 00:05:27.549
So my default, I'm just gonna
say just return the given state,

81
00:05:27.549 --> 00:05:29.600
which is gonna be an array at first.

82
00:05:29.600 --> 00:05:32.453
So we'll have that,
&gt;&gt; Scott Moss: And

83
00:05:32.453 --> 00:05:36.785
then we'll just say export, actually,
we're only going to have one reducer.

84
00:05:36.785 --> 00:05:38.249
So I guess we could just export this.

85
00:05:40.220 --> 00:05:42.980
There we go, so we'll just return that.

86
00:05:45.041 --> 00:05:48.455
&gt;&gt; Scott Moss: So now what we wanna do is
we wanna define some actions that when

87
00:05:48.455 --> 00:05:50.827
called, are gonna trigger this reducer.

88
00:05:50.827 --> 00:05:52.251
So actually we need to do that up top.

89
00:05:52.251 --> 00:05:56.793
We're just gonna do all this in one file,
so we'll say an action type.

90
00:05:56.793 --> 00:06:00.010
Most people do those make constants
with the action types in this case.

91
00:06:00.010 --> 00:06:04.090
We'll do the same thing, and
we'll call this one FETCH_POSTS.

92
00:06:05.530 --> 00:06:07.783
And what it does it's the same,

93
00:06:07.783 --> 00:06:13.380
we're gonna give it the same name of
FETCH_POSTS, there we go, and a string.

94
00:06:15.210 --> 00:06:20.844
And then we'll have another one that says,
FETCH_POSTS_COMPLETE.

95
00:06:25.044 --> 00:06:26.102
&gt;&gt; Scott Moss: So we have two actions now,

96
00:06:26.102 --> 00:06:28.034
we have an action that's
called FETCH_POSTS and

97
00:06:28.034 --> 00:06:30.590
an action called FETCH_POSTS_COMPLETE.

98
00:06:30.590 --> 00:06:34.420
So all we have to do inside this reducer
is depending on which action was fired,

99
00:06:34.420 --> 00:06:36.690
which type, we can change state around.

100
00:06:36.690 --> 00:06:40.280
So what we'll do is we'll just do
a quick switch statement here.

101
00:06:40.280 --> 00:06:43.870
And the statement that we want to switch
on is going to be on the action.type.

102
00:06:44.910 --> 00:06:49.116
So we'll say action,
&gt;&gt; Scott Moss: .type and

103
00:06:49.116 --> 00:06:52.626
the expression is,
let's just say for FETCH_POSTS,

104
00:06:52.626 --> 00:06:55.996
we're just not gonna do anything for
FETCH_POSTS.

105
00:06:55.996 --> 00:06:59.896
We'll just say return the state,
whatever you are.

106
00:06:59.896 --> 00:07:04.631
And then the case for
FETCH_POSTS_COMPLETE,

107
00:07:04.631 --> 00:07:10.584
what we want to do,
&gt;&gt; Scott Moss: Is we actually want to,

108
00:07:10.584 --> 00:07:15.837
the state FETCH_POSTS_COMPLETE, the action
is gonna have a payload property.

109
00:07:15.837 --> 00:07:17.916
Which is gonna be the payload
from the server, and

110
00:07:17.916 --> 00:07:20.010
we wanna set that equal
to be the new state.

111
00:07:20.010 --> 00:07:22.398
So what we'll do now is we'll just say,

112
00:07:22.398 --> 00:07:28.123
just return,
&gt;&gt; Scott Moss: Payload,

113
00:07:28.123 --> 00:07:31.313
or I'm sorry, action.payload.

114
00:07:33.713 --> 00:07:36.560
&gt;&gt; Scott Moss: And then we just need to
set up a default for the switch statement.

115
00:07:42.990 --> 00:07:43.490
&gt;&gt; Scott Moss: There we go.

116
00:07:46.370 --> 00:07:48.802
&gt;&gt; Scott Moss: So we're gonna go over
this when we put everything together.

117
00:07:48.802 --> 00:07:50.310
It's gonna make more sense
when we see the picture.

118
00:07:50.310 --> 00:07:52.790
So if you're following along and
like what the hell's going on?

119
00:07:52.790 --> 00:07:54.760
We're gonna go over it once
it's all put together.

120
00:07:54.760 --> 00:07:58.954
But basically all we're doing here is
we're just creating a reducer that's

121
00:07:58.954 --> 00:08:02.519
given an action, define what
the next state's gonna look like.

122
00:08:04.300 --> 00:08:07.610
So the actions are these two actions
right here, these two types.

123
00:08:07.610 --> 00:08:12.540
So when FETCH_POSTS happens, nothing,
just return the state that was before.

124
00:08:12.540 --> 00:08:15.426
When FETCH_POSTS_COMPLETE happens,
return the action.payload,

125
00:08:15.426 --> 00:08:17.820
which is going to be what
was sent from the server.

126
00:08:17.820 --> 00:08:18.840
So this is going to be the new state.

