WEBVTT

1
00:00:00.000 --> 00:00:03.983
[MUSIC]

2
00:00:03.983 --> 00:00:05.318
&gt;&gt; Scott Moss: Here we have a static prop,

3
00:00:05.318 --> 00:00:09.340
which is todo's where we connecting at
all right so we're connecting down here.

4
00:00:10.360 --> 00:00:14.070
So create todo instead of firing
off a static action like this.

5
00:00:14.070 --> 00:00:19.171
We won't do that and what instead

6
00:00:19.171 --> 00:00:25.001
what we'll do is will dispatch we need

7
00:00:25.001 --> 00:00:30.831
to get those methods that we created So

8
00:00:30.831 --> 00:00:35.568
we'll import {createTodo,

9
00:00:35.568 --> 00:00:43.280
getTodos } from './actionCreators'.

10
00:00:43.280 --> 00:00:48.040
There you go.
And what we can do now is

11
00:00:50.220 --> 00:00:50.940
handle text change,

12
00:00:50.940 --> 00:00:55.320
so on press this.props.createTodo,
this is gonna be an async function now.

13
00:00:55.320 --> 00:00:57.520
So if we head down here,

14
00:00:57.520 --> 00:01:03.587
we can say createTodo we want to
dispatch the actual create to do.

15
00:01:03.587 --> 00:01:08.266
Property here with the actual
to do value in there.

16
00:01:08.266 --> 00:01:09.830
But this is going to be a string.

17
00:01:09.830 --> 00:01:12.420
Every time a JSON.stringify, so

18
00:01:12.420 --> 00:01:18.060
we should probably just add an object
on here that has a name property on it.

19
00:01:19.310 --> 00:01:19.810
There we go.

20
00:01:21.250 --> 00:01:22.030
Yes.

21
00:01:22.030 --> 00:01:24.780
&gt;&gt; Speaker 2: Why do you need to
do the dispatch(createTodo())?

22
00:01:26.790 --> 00:01:27.670
&gt;&gt; Scott Moss: Yes.

23
00:01:27.670 --> 00:01:34.240
So createTodo is this,
this method right here right?

24
00:01:34.240 --> 00:01:37.780
So we need to wrap this in dispatch
as this is how we tell Redux about it

25
00:01:37.780 --> 00:01:41.000
if we don't dispatch it we're
just calling the function and

26
00:01:41.000 --> 00:01:45.190
it won't be past this function the actual
dispatch once when we dispatch it.

27
00:01:46.390 --> 00:01:50.110
When we, so when we invoke
this function we're gonna get

28
00:01:50.110 --> 00:01:53.730
back on another function that's
going to be expecting dispatch and

29
00:01:53.730 --> 00:02:00.010
that's what this backs does,
it passes itself to the return function.

30
00:02:00.010 --> 00:02:03.060
So we can dispatch any
later actions later on.

31
00:02:03.060 --> 00:02:07.590
&gt;&gt; Speaker 3: How do you differentiate
between those two createTodos?

32
00:02:08.790 --> 00:02:12.310
&gt;&gt; Scott Moss: This is scoped
inside of an object so

33
00:02:12.310 --> 00:02:15.560
there's no way you could refer to this
createTodo outside of its object.

34
00:02:15.560 --> 00:02:17.620
&gt;&gt; Speaker 3: Right, but in the next line.

35
00:02:17.620 --> 00:02:22.130
&gt;&gt; Scott Moss: And then in the next line,
this is a global to

36
00:02:23.370 --> 00:02:25.470
do because it's up here.

37
00:02:25.470 --> 00:02:29.016
Yeah like if I did this,
is referring to this one.

38
00:02:29.016 --> 00:02:29.650
&gt;&gt; Speaker 3: Okay.

39
00:02:29.650 --> 00:02:30.606
But I mean.

40
00:02:30.606 --> 00:02:32.780
&gt;&gt; Scott Moss: Yeah,
I mean you can change it.

41
00:02:32.780 --> 00:02:34.790
And yeah, you could definitely change it.

42
00:02:34.790 --> 00:02:38.163
This is why they made bind and action
creators cuz now if you change now you

43
00:02:38.163 --> 00:02:41.537
got think of a different name for
both of what that are doing the same thing

44
00:02:41.537 --> 00:02:44.333
as bind actually cares will just
make them the same for you.

45
00:02:44.333 --> 00:02:46.615
But I kept the same to like
not have different names but

46
00:02:46.615 --> 00:02:49.974
if it's confusing to have the same names
Is it confusing to have the same name-

47
00:02:49.974 --> 00:02:51.313
&gt;&gt; Speaker 3: It's confusing to me and

48
00:02:51.313 --> 00:02:53.745
it may not be confusing anyone else but
it is.

49
00:02:53.745 --> 00:02:58.036
&gt;&gt; Speaker 2: It's the same
thing whatever the state or

50
00:02:58.036 --> 00:03:02.089
something your like {todo:todo}.

51
00:03:02.089 --> 00:03:04.472
Doesn't want kind of thing.

52
00:03:04.472 --> 00:03:05.358
&gt;&gt; Speaker 3: I don't think so.

53
00:03:05.358 --> 00:03:11.970
&gt;&gt; Scott Moss: Yeah, this is a global,
this is just scoped here And

54
00:03:11.970 --> 00:03:17.720
then we did the other one which is
addTodo or really we have down.

55
00:03:17.720 --> 00:03:22.774
Sorry, getTodos which
takes no argument and

56
00:03:22.774 --> 00:03:29.567
it just dispatches getTodos
which also takes no arguments.

57
00:03:29.567 --> 00:03:31.230
There we go.

58
00:03:31.230 --> 00:03:35.756
So what we want to do first is,

59
00:03:35.756 --> 00:03:41.190
let's say, componentDidMount so

60
00:03:41.190 --> 00:03:46.262
when a component did mount we're

61
00:03:46.262 --> 00:03:51.890
gonna say this.props.getTodos.

62
00:03:53.960 --> 00:03:55.320
So we're going to get TodoList and

63
00:03:55.320 --> 00:03:57.635
we're gonna call that function
which is going to get the TodoList.

64
00:03:59.090 --> 00:04:04.050
And because we're already
subscribed to the todo state

65
00:04:04.050 --> 00:04:07.230
we don't have to update our state locally
because the todo's are already here.

66
00:04:07.230 --> 00:04:09.490
So at that we get todo's
we don't have to say.

67
00:04:09.490 --> 00:04:11.240
Then, this.state.

68
00:04:11.240 --> 00:04:12.540
We don't have to do that.

69
00:04:12.540 --> 00:04:13.050
It's all the fine.

70
00:04:13.050 --> 00:04:16.038
And then now here I want to create todo.

71
00:04:16.038 --> 00:04:21.036
We'll say this.createTodo I'll pass
in the new todo state here and

72
00:04:21.036 --> 00:04:26.739
one more thing I need to do is because I
pass an object now this is gong to .name.

73
00:04:26.739 --> 00:04:28.491
There we go.

74
00:04:28.491 --> 00:04:29.599
Now let's actually try this.

75
00:04:32.250 --> 00:04:33.900
Different app.

76
00:04:33.900 --> 00:04:37.300
Go, go.

77
00:04:37.300 --> 00:04:37.810
I can't remember if I ran this.

78
00:04:37.810 --> 00:04:38.610
Am I running this?

79
00:04:38.610 --> 00:04:39.110
I don't think so.

80
00:04:41.660 --> 00:04:44.900
I think I'm still running the other app.

81
00:04:44.900 --> 00:04:45.400
Yeah.

82
00:04:48.540 --> 00:04:49.910
Cool.
We'll run that.

83
00:04:49.910 --> 00:04:50.606
And then we'll run the server.

84
00:04:50.606 --> 00:04:58.523
Adjacent server.

85
00:05:07.575 --> 00:05:08.146
&gt;&gt; Scott Moss: Cool.

86
00:05:08.146 --> 00:05:12.238
All right, we'll let that build.

87
00:05:15.662 --> 00:05:18.850
&gt;&gt; Scott Moss: But the meat and potatoes
here is really just adding Redux .to

88
00:05:18.850 --> 00:05:22.730
the middleware and then just dispatching
your actions when you're done.

89
00:05:23.900 --> 00:05:25.640
That's it.
We can do more stuff here,

90
00:05:25.640 --> 00:05:28.000
we can do another promise and
we can keep this batch and

91
00:05:28.000 --> 00:05:29.690
keep this batch If you wanted to.

92
00:05:29.690 --> 00:05:33.020
That's the whole point of this is
do all the asynchronous stuff and

93
00:05:33.020 --> 00:05:34.710
then fire up the events that you want.

94
00:05:34.710 --> 00:05:36.980
So this is called an action creator or

95
00:05:36.980 --> 00:05:42.250
in this case an async action creator
because it itself is not an action but

96
00:05:42.250 --> 00:05:46.518
when it's resolved that it is an action or
will dispatch an action.

97
00:05:46.518 --> 00:05:48.961
There we go.

98
00:05:52.645 --> 00:05:53.855
&gt;&gt; Scott Moss: I don't care
whether it will debug.

99
00:05:58.978 --> 00:06:00.339
&gt;&gt; Scott Moss: Okay.

100
00:06:07.762 --> 00:06:08.844
&gt;&gt; Scott Moss: Okay.

101
00:06:08.844 --> 00:06:11.460
You just don't wanna run, do you?

102
00:06:11.460 --> 00:06:12.300
Let's build it again.

103
00:06:15.540 --> 00:06:18.703
Any questions on this stuff?

104
00:06:25.120 --> 00:06:26.030
&gt;&gt; Scott Moss: All right.

105
00:06:26.030 --> 00:06:26.630
Are you built?

106
00:06:28.040 --> 00:06:29.140
I got two servers running.

107
00:06:29.140 --> 00:06:31.350
That's why that make sense.

108
00:06:32.860 --> 00:06:34.690
Okay, anyway there's a to do, sweet.

109
00:06:35.850 --> 00:06:38.130
So let's make sure we've
got a PR server running so

110
00:06:38.130 --> 00:06:39.760
it looks like it already
tried to get it to do.

111
00:06:39.760 --> 00:06:42.560
So as I did that on component.

112
00:06:42.560 --> 00:06:50.250
It tried to first of the dues right,
&gt;&gt; Scott Moss: Right here.

113
00:06:50.250 --> 00:06:51.230
So the podium out.

114
00:06:51.230 --> 00:06:53.270
It ran this meant that
they started to do this.

115
00:06:53.270 --> 00:06:56.550
There were to do so
to do anything but if we add one and

116
00:06:56.550 --> 00:07:02.008
we say clean up there you go.

117
00:07:02.008 --> 00:07:07.000
It adds it right here, and we

118
00:07:07.000 --> 00:07:10.720
can go look at the server log we can see
that it actually did post to the server.

119
00:07:10.720 --> 00:07:15.270
Now if we go look at db.json,
it actually added it, clean up.

120
00:07:15.270 --> 00:07:18.350
And the reason it came
back here is because if we

121
00:07:18.350 --> 00:07:19.850
follow it through Redux one more time.

122
00:07:19.850 --> 00:07:22.420
When we create a todo we say

123
00:07:24.150 --> 00:07:29.140
post that to do to the server,
the server gives it back to us here,

124
00:07:29.140 --> 00:07:32.840
we dispatch a new action with
a type called create_TODO.

125
00:07:32.840 --> 00:07:35.710
Pass and then I need to do
that in services gave to us.

126
00:07:35.710 --> 00:07:41.220
That's gonna run to
the reducer on create to-do

127
00:07:41.220 --> 00:07:43.650
just return the list of the dos
with the new one at the top.

128
00:07:45.160 --> 00:07:47.104
And because it's a do.JS,

129
00:07:47.104 --> 00:07:52.210
we're subscribed to that to-do state
here and we're iterating over it.

130
00:07:54.010 --> 00:07:55.260
Here it's going to update.

131
00:07:55.260 --> 00:08:03.920
I don't know why it's
hot module reloading.

132
00:08:05.420 --> 00:08:06.000
Why it's doing that.

133
00:08:07.390 --> 00:08:08.130
Any other questions?

134
00:08:12.540 --> 00:08:16.310
So two things to remember,
use Redux stock as a middleware and

135
00:08:16.310 --> 00:08:19.530
then just dispatch a regular action
inside of your resolution of your

136
00:08:19.530 --> 00:08:21.430
asynchronous operation and that's it.

137
00:08:21.430 --> 00:08:25.330
And it's the same thing, you use it
the same way as you would a static action.

