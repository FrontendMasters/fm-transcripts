WEBVTT

1
00:00:00.000 --> 00:00:03.887
[MUSIC]

2
00:00:03.887 --> 00:00:05.960
&gt;&gt; Scott Moss: Anybody
got stuck on anything?

3
00:00:05.960 --> 00:00:07.362
&gt;&gt; Speaker 2: But you're gonna go over

4
00:00:07.362 --> 00:00:10.269
your actions folder?
&gt;&gt; Scott Moss: Yeah, I forgot about that.

5
00:00:10.269 --> 00:00:12.210
Yeah, so actions,
let's see what's in here.

6
00:00:13.340 --> 00:00:13.920
What is in here?

7
00:00:15.365 --> 00:00:18.278
Man, okay don't look at that.

8
00:00:18.278 --> 00:00:22.873
[LAUGH] That shouldn't be in there.
&gt;&gt; Scott Moss: Okay,

9
00:00:22.873 --> 00:00:24.140
we'll talk about that.

10
00:00:24.140 --> 00:00:28.968
Okay, yeah, so what I did here was, it's a
nice pattern to have a file where you just

11
00:00:28.968 --> 00:00:32.110
keep the constants for
your actions, so let me recap.

12
00:00:32.110 --> 00:00:38.696
We had an action called ADD_TODO and
I kept passing around between the files.

13
00:00:38.696 --> 00:00:40.010
So I can just declare it here.

14
00:00:41.650 --> 00:00:47.060
So I can just declare those action
types here in a file, a constant.

15
00:00:47.060 --> 00:00:49.950
So here are all the constants for
all the actions that I'm gonna have.

16
00:00:49.950 --> 00:00:51.670
That way I can just use them everywhere.

17
00:00:51.670 --> 00:00:54.171
All right, so
I'm writing this string everywhere.

18
00:00:54.171 --> 00:00:57.090
I'll just import these variables here,
that's all.

19
00:00:57.090 --> 00:00:59.565
So here are all my action types
that I think that we'll have.

20
00:00:59.565 --> 00:01:02.270
So maybe we want to change a tab.

21
00:01:02.270 --> 00:01:05.337
We wanna actually do that cuz
we're gonna have a tab interface.

22
00:01:05.337 --> 00:01:07.510
This is what I'll start
with all the async actions.

23
00:01:07.510 --> 00:01:11.706
So FETCH_CURRENT_WORKOUT will be fired
right before we call the server.

24
00:01:11.706 --> 00:01:16.050
And then FETCH_CURRENT_WORKOUT_COMPLETE
will be called after the server response.

25
00:01:16.050 --> 00:01:19.380
So every time you see
these two sibling actions,

26
00:01:19.380 --> 00:01:21.580
you probably can guess that it's going
to be like some asynchronous thing.

27
00:01:21.580 --> 00:01:24.830
The same thing with ADD_EXERCISE and
ADD_EXERCISE_COMPLETE.

28
00:01:24.830 --> 00:01:26.286
This is gonna be asynchronous.

29
00:01:26.286 --> 00:01:29.461
And then this is the one for
the modal, SET_EXERCISE_VISIBILITY.

30
00:01:29.461 --> 00:01:31.480
So these are just constants.

31
00:01:31.480 --> 00:01:32.308
You can call it whatever.

32
00:01:32.308 --> 00:01:34.800
Most call them types cuz
they're action types.

33
00:01:34.800 --> 00:01:41.700
And then in actions, before, we hardcoded
the action right inside the dispatch.

34
00:01:41.700 --> 00:01:44.614
Where the pattern which we actually
wanna use is action creator.

35
00:01:44.614 --> 00:01:48.460
Which is just a fancy word for a function
that makes an action, that's all it is.

36
00:01:49.530 --> 00:01:52.110
So there's this plugin or

37
00:01:52.110 --> 00:01:55.435
this library that somebody may call it
redux-actions which does that for you.

38
00:01:55.435 --> 00:01:58.481
It's really not that great.

39
00:01:58.481 --> 00:02:01.213
What it does,
it just saves you from writing code.

40
00:02:01.213 --> 00:02:05.963
All createAction does is it takes
the type of the action you want.

41
00:02:05.963 --> 00:02:08.980
And then it returns a function for
you to pass in the payload.

42
00:02:08.980 --> 00:02:10.730
That's it, and it creates an object.

43
00:02:10.730 --> 00:02:15.682
So what createAction is for redux-actions,
all it's gonna do is just do this for us.

44
00:02:15.682 --> 00:02:22.034
It's just gonna return an object with
a given type, whatever the type is.

45
00:02:22.034 --> 00:02:23.640
And it's just gonna put
a payload on it for us.

46
00:02:25.140 --> 00:02:27.240
And the payload is whatever
we pass in here, so visible.

47
00:02:28.680 --> 00:02:29.990
That's all it's doing.

48
00:02:29.990 --> 00:02:33.869
This is a helper method to do it.
&gt;&gt; Scott Moss: So

49
00:02:33.869 --> 00:02:34.990
that's what I'm doing here.

50
00:02:34.990 --> 00:02:37.740
So I'll just have a function that
I can pass true or false to.

51
00:02:37.740 --> 00:02:40.206
And this is gonna return createAction.

52
00:02:40.206 --> 00:02:43.839
And again, I don't have to put a return
keyword here because it's implicit way of

53
00:02:43.839 --> 00:02:46.223
using these parentheses here,
so implicit return.

54
00:02:46.223 --> 00:02:48.408
So I'm just returning createAction,

55
00:02:48.408 --> 00:02:51.651
which is just an object with
a type property of this type and

56
00:02:51.651 --> 00:02:55.440
a payload of this value, yes.
&gt;&gt; Speaker 2: Question from the audience.

57
00:02:55.440 --> 00:03:00.034
Jessie T asks, with the container folder,
do you use a UI folder for

58
00:03:00.034 --> 00:03:01.658
those files?
&gt;&gt; Scott Moss: Exactly, so

59
00:03:01.658 --> 00:03:04.383
when you start making the UI
components which we will.

60
00:03:04.383 --> 00:03:08.810
In the lesson up next, we're gonna have
a UI folder for those UI components.

61
00:03:09.990 --> 00:03:13.947
Yes, and
don't look at action creators in here.

62
00:03:13.947 --> 00:03:18.830
Because this is all the asynchronous
stuff that we haven't gotten to yet.

63
00:03:18.830 --> 00:03:20.220
I left it in there.

64
00:03:20.220 --> 00:03:20.720
Don't look at it.

65
00:03:22.340 --> 00:03:28.837
Cool, any questions on this?
&gt;&gt; Speaker 2: Do you always

66
00:03:28.837 --> 00:03:32.185
use the key payload in your actions?
&gt;&gt; Scott Moss: Yes, so

67
00:03:32.185 --> 00:03:37.783
there's this thing called FSA,
Flux Standard Action.

68
00:03:37.783 --> 00:03:40.996
It's what the react community came up
with as far as what the actions should

69
00:03:40.996 --> 00:03:41.513
look like.

70
00:03:41.513 --> 00:03:45.860
And it describes the action
of having a type property,

71
00:03:45.860 --> 00:03:50.031
a payload property and
an optional error property.

72
00:03:50.031 --> 00:03:52.867
And then I think there's also
an optional meta property.

73
00:03:52.867 --> 00:03:55.996
If we wanna pass in specific
metadata that isn't the payload.

74
00:03:55.996 --> 00:04:00.320
But might have instructions
on how to create a new state.

75
00:04:00.320 --> 00:04:02.730
So yes, because of that, I use payload.

76
00:04:02.730 --> 00:04:06.189
And if you use redux-actions,
which I'm using right here,

77
00:04:06.189 --> 00:04:10.258
it will attach whatever you pass in
as a payload to the payload property.

78
00:04:10.258 --> 00:04:12.760
It's just a standard way of doing it.

79
00:04:12.760 --> 00:04:14.162
I think it's a great way to have that.

80
00:04:14.162 --> 00:04:19.381
That way, you can keep, you can swap out,
I guess, different flux implementations.

81
00:04:19.381 --> 00:04:22.480
Without having to change your action
code cuz it's all the same type.

82
00:04:23.550 --> 00:04:24.716
So yeah, I use payload.

83
00:04:24.716 --> 00:04:27.872
You could use whatever you want,
it's totally up to you.

84
00:04:27.872 --> 00:04:30.546
But it's really nice just to have
a standard inside your reducers.

85
00:04:30.546 --> 00:04:33.892
And not have to think about like where
is the data on this action object?

86
00:04:33.892 --> 00:04:34.515
Where is it?

87
00:04:34.515 --> 00:04:36.709
Was it action.data,
was it action.response?

88
00:04:36.709 --> 00:04:37.435
I don't know what it is.

89
00:04:37.435 --> 00:04:39.585
If it's always action.payload,
then I know what it is.

90
00:04:39.585 --> 00:04:44.696
It's totally fine, it's just a standard.
&gt;&gt; Scott Moss: Any

91
00:04:44.696 --> 00:04:49.160
more questions on this?
&gt;&gt; Speaker 2: Just a comment.

92
00:04:49.160 --> 00:04:54.769
It took me a second but I hadn't seen the
pattern before where you're on line two.

93
00:04:54.769 --> 00:04:57.821
You're importing that file constants and

94
00:04:57.821 --> 00:04:59.345
then as types.
&gt;&gt; Scott Moss: Yes.

95
00:04:59.345 --> 00:05:00.908
&gt;&gt; Speaker 2: And I just think it's really

96
00:05:00.908 --> 00:05:04.890
cool how you can then use it almost
like an unknown from other languages.

97
00:05:04.890 --> 00:05:06.320
&gt;&gt; Scott Moss: Yeah, it's exactly right.

98
00:05:06.320 --> 00:05:10.956
So I'm saying import everything
from that file as a variable type.

99
00:05:10.956 --> 00:05:12.870
So it's just creating object types and

100
00:05:12.870 --> 00:05:17.190
putting everything in a file on that
property, on that object for me.

101
00:05:17.190 --> 00:05:21.106
Yeah, or I can import them independently
as well because I'm exporting them all

102
00:05:21.106 --> 00:05:22.880
independently.

103
00:05:22.880 --> 00:05:26.303
So the equivalent is also just to
export an object here with all these

104
00:05:26.303 --> 00:05:28.116
properties on it, you can do that.

105
00:05:28.116 --> 00:05:30.102
But then you won't be able to import them.

106
00:05:30.102 --> 00:05:32.025
Well, you still can import
them individually, too.

107
00:05:32.025 --> 00:05:33.014
You'd have to use destructuring.

108
00:05:33.014 --> 00:05:33.728
So, yeah, either way,

109
00:05:33.728 --> 00:05:37.309
it will totally work.
&gt;&gt; Scott Moss: Any other

110
00:05:37.309 --> 00:05:41.522
questions?
&gt;&gt; Scott Moss: Is this what

111
00:05:41.522 --> 00:05:46.320
everybody got?
&gt;&gt; Speaker 2: Could you explain.

112
00:05:46.320 --> 00:05:51.219
I was in the bathroom, but could you
explain why the action creators versus

113
00:05:51.219 --> 00:05:54.280
these actions?
&gt;&gt; Scott Moss: Yeah, so

114
00:05:54.280 --> 00:05:58.770
the reason we wanna use action creators
is so that we can abstract the actual

115
00:05:58.770 --> 00:06:02.790
creation of the action object away from
where we actually dispatch the action.

116
00:06:02.790 --> 00:06:07.630
Because before, we hardcoded in
the object of type and then payload.

117
00:06:07.630 --> 00:06:10.970
But if we were to use that action in many
places, we have to write that over and

118
00:06:10.970 --> 00:06:14.180
over and over again and
probably mess up somewhere.

119
00:06:14.180 --> 00:06:17.090
So having an action creator is
great because this also gives us

120
00:06:17.090 --> 00:06:18.180
a chance to do other things.

121
00:06:18.180 --> 00:06:22.530
Like for instance, let's say this
is just a Boolean right here.

122
00:06:22.530 --> 00:06:25.910
But let's say the actual payload was just
like an object with something else on it.

123
00:06:25.910 --> 00:06:29.920
This is where we can modify that
before we pass it in to the reducer.

124
00:06:29.920 --> 00:06:31.610
So it's a great place to do that.

125
00:06:31.610 --> 00:06:35.832
So it's really great just to have these
action creators versus just hardcoding in

126
00:06:35.832 --> 00:06:37.340
an action.

127
00:06:37.340 --> 00:06:39.160
You can also just like to store.

128
00:06:39.160 --> 00:06:41.196
They're just static actions
that take no payload.

129
00:06:41.196 --> 00:06:42.842
They're just like one-off actions.

130
00:06:42.842 --> 00:06:44.502
You can just store them in variables, too.

131
00:06:44.502 --> 00:06:49.090
If you just have an action that
was just like export const.

132
00:06:49.090 --> 00:06:52.780
And the action might be, I don't know,
we'll just call it error.

133
00:06:52.780 --> 00:06:56.620
This is a random error action
that will fire notification.

134
00:06:56.620 --> 00:07:03.340
You can just go ahead and say, yeah,
it's type ERROR, and that's it.

135
00:07:03.340 --> 00:07:05.250
And I can just use this everywhere, right?

136
00:07:06.280 --> 00:07:09.310
Because it's not gonna take any payload so
you don't need a function.

137
00:07:09.310 --> 00:07:11.359
And it's just a regular action
that does this error thing.

138
00:07:14.153 --> 00:07:15.090
&gt;&gt; Scott Moss: Whoa, I've never seen that.

139
00:07:17.070 --> 00:07:23.190
Any other questions?
&gt;&gt; Scott Moss: Nope, all right, cool.

140
00:07:23.190 --> 00:07:28.711
So the next thing we're gonna do is talk
about the different navigation strategies.

141
00:07:28.711 --> 00:07:31.660
Question, yeah.
&gt;&gt; Speaker 2: Unrelated to redux,

142
00:07:31.660 --> 00:07:35.000
is there a global object in
React Native that we can attach

143
00:07:35.000 --> 00:07:39.430
things to similar to window?
&gt;&gt; Scott Moss: Okay,

144
00:07:39.430 --> 00:07:41.410
I don't know if I should answer that.

145
00:07:41.410 --> 00:07:44.816
[LAUGH] Okay,
before I answer it, don't do it.

146
00:07:44.816 --> 00:07:46.180
&gt;&gt; Speaker 2: [LAUGH]

147
00:07:46.180 --> 00:07:47.010
&gt;&gt; Scott Moss: Just don't

148
00:07:47.010 --> 00:07:48.790
attach to the global.

149
00:07:48.790 --> 00:07:50.706
And yes, there is a global object.

150
00:07:50.706 --> 00:07:52.097
And the way you can figure it out,

151
00:07:52.097 --> 00:07:55.104
I'm just gonna show you how to figure
out versus telling you what it is.

152
00:07:55.104 --> 00:07:59.019
Is if you just go to the debugger,
&gt;&gt; Scott Moss: And

153
00:07:59.019 --> 00:08:05.290
you hit debug.js remotely.
&gt;&gt; Scott Moss: And

154
00:08:05.290 --> 00:08:12.228
I guess it's debugging.
&gt;&gt; Scott Moss: Here we go.

155
00:08:12.228 --> 00:08:14.041
There's our breakpoint there.

156
00:08:14.041 --> 00:08:17.870
And if you just go, I don't know,
you can go literally anywhere.

157
00:08:17.870 --> 00:08:20.791
Let's just go wherever.

158
00:08:20.791 --> 00:08:27.650
And if you look, there's a object
right here literally called global.

159
00:08:29.120 --> 00:08:31.289
That's the global, it's called global.

160
00:08:31.289 --> 00:08:33.180
It's not this, it's global.

161
00:08:33.180 --> 00:08:35.374
So if you wanna attach
something as a global,

162
00:08:35.374 --> 00:08:38.856
you literally say global dot whatever and
it is attached to the global.

163
00:08:38.856 --> 00:08:42.326
That's just a CommonJS thing
which is what React is using.

164
00:08:42.326 --> 00:08:44.610
Cuz it's using Node, which uses CommonJS.

165
00:08:44.610 --> 00:08:47.780
So a Node in CommonJS, and
therefore React Native.

166
00:08:47.780 --> 00:08:52.834
Yes, global is the global, but
don't attach anything to global.

167
00:08:52.834 --> 00:08:56.170
[LAUGH] It's the whole point of
modules is to not have globals.

168
00:08:56.170 --> 00:08:58.590
Although React Native does
provide globals for us.

169
00:08:58.590 --> 00:09:03.028
Does anybody here know how Node works?
&gt;&gt; Speaker 2: Nobody knows how Node works.

170
00:09:03.028 --> 00:09:04.336
[LAUGH]
&gt;&gt; Scott Moss: I'm looking

171
00:09:04.336 --> 00:09:06.590
at the source for Node for a year.

172
00:09:06.590 --> 00:09:11.613
And the way they actually inject
the globals into Node is actually

173
00:09:11.613 --> 00:09:17.930
each module by first this file as a module
is actually wrapped in the IIFE, right?

174
00:09:17.930 --> 00:09:20.612
So each module is just a function like

175
00:09:20.612 --> 00:09:25.311
this.
&gt;&gt; Scott Moss: And then what they do is

176
00:09:25.311 --> 00:09:28.352
they pass in all these globals to
the functions so you have access to them.

177
00:09:28.352 --> 00:09:33.414
So like module, require, dirname,

178
00:09:33.414 --> 00:09:38.270
global, all this is passed in.

179
00:09:38.270 --> 00:09:42.030
So that's why you have
access to them magically.

180
00:09:42.030 --> 00:09:43.183
But that's really what it's doing.

181
00:09:43.183 --> 00:09:44.760
It's just creating an IIFE for you.

182
00:09:44.760 --> 00:09:46.525
So yes, global is a global and

183
00:09:46.525 --> 00:09:50.628
that's just an object that they
pass around to every single module.

184
00:09:50.628 --> 00:09:52.250
But don't use it.

185
00:09:52.250 --> 00:09:52.810
Please don't use it.

186
00:09:54.580 --> 00:09:56.720
I know it sucks like importing
all the time, like ugh,

187
00:09:56.720 --> 00:09:58.400
I gotta import all this stuff.

188
00:09:58.400 --> 00:10:00.440
But it's declarative.

189
00:10:00.440 --> 00:10:03.354
If you use globals, it's imperative,
and now you don't know what's going on.

190
00:10:03.354 --> 00:10:04.379
And then you're like,

191
00:10:04.379 --> 00:10:07.410
I gotta make sure I load this file
first cuz it's got the global stuff.

192
00:10:07.410 --> 00:10:08.821
And then it's just really bad.

193
00:10:08.821 --> 00:10:09.620
Just don't do it.

