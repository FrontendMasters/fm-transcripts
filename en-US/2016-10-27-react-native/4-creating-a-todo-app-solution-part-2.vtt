WEBVTT

1
00:00:00.000 --> 00:00:03.627
[MUSIC]

2
00:00:03.627 --> 00:00:06.587
&gt;&gt; Scott: So the other way we
could have done this is not

3
00:00:06.587 --> 00:00:08.834
keep track of the newTodo state.

4
00:00:08.834 --> 00:00:12.710
And we could have just got
the reference from the input.

5
00:00:12.710 --> 00:00:17.935
So if you were,
&gt;&gt; Scott: Here and

6
00:00:17.935 --> 00:00:23.038
so what you can do is you can
actually just use the ref property or

7
00:00:23.038 --> 00:00:27.961
the ref attribute or
no ref property, yeah, ref property.

8
00:00:27.961 --> 00:00:33.032
And we can say ref and
this is gonna be a function that takes

9
00:00:33.032 --> 00:00:39.720
in like the given node and what we want
to do is just say this.input = node.

10
00:00:39.720 --> 00:00:41.554
So now we have this.input = node.

11
00:00:41.554 --> 00:00:46.999
And then on click,
instead of getting this state right here,

12
00:00:46.999 --> 00:00:50.454
instead of keeping track of the state,

13
00:00:50.454 --> 00:00:56.421
what we can do is we can just say
this.input cuz we set it right here,

14
00:00:56.421 --> 00:01:01.800
this.input
&gt;&gt; Scott: .value.

15
00:01:01.800 --> 00:01:05.970
So we'll go ahead and get the value from,
this is a native DOM right here.

16
00:01:05.970 --> 00:01:11.090
So when this renders, it's gonna
set up a reference to the native

17
00:01:12.420 --> 00:01:16.460
counterpart of this input and
give us access to it in our JavaScript.

18
00:01:16.460 --> 00:01:19.008
So that's how we can get a .value
property of it cuz it's gonna be native.

19
00:01:19.008 --> 00:01:24.124
And then we just need to make sure
we take off, there's a value thing,

20
00:01:24.124 --> 00:01:28.923
otherwise it will freakout and
we also don't need the onChange.

21
00:01:31.840 --> 00:01:36.863
&gt;&gt; Scott: So now we just have a reference,
that we're always just going to

22
00:01:36.863 --> 00:01:42.085
update it and then what we would do
now is we still update the todos.

23
00:01:42.085 --> 00:01:50.000
And we'll just say this.input.value
equals an empty string.

24
00:01:52.210 --> 00:01:53.041
&gt;&gt; Scott: So let's check this out.

25
00:01:55.462 --> 00:01:56.911
&gt;&gt; Scott: And it works the same way.

26
00:01:59.291 --> 00:02:03.623
&gt;&gt; Scott: There's another way you can set
it up using the two way data binding on

27
00:02:03.623 --> 00:02:05.830
a form but I almost never use it.

28
00:02:05.830 --> 00:02:07.530
I only probably ever use
these two approaches.

29
00:02:08.600 --> 00:02:11.080
Any question on this stuff?

30
00:02:11.080 --> 00:02:12.060
Yes?

31
00:02:12.060 --> 00:02:14.300
&gt;&gt; Speaker 2: You don't have to
walk me through it, but how will

32
00:02:15.660 --> 00:02:20.450
you set it up to be able to click on that
todo item, and delete it from the array?

33
00:02:20.450 --> 00:02:22.386
&gt;&gt; Scott: Yeah, so
if you want to click on this todo item and

34
00:02:22.386 --> 00:02:24.718
delete it from the array,
I mean we can do a right-click.

35
00:02:24.718 --> 00:02:29.368
You just say handleClick,

36
00:02:29.368 --> 00:02:34.826
oops, I'm sorry, onClick and

37
00:02:34.826 --> 00:02:43.935
we'll just say this.removeToDo.bind(this).

38
00:02:46.712 --> 00:02:49.564
&gt;&gt; Scott: And actually what we need to
do is we need to get a reference to

39
00:02:49.564 --> 00:02:50.280
this, todo.

40
00:02:50.280 --> 00:02:52.650
All right, we gonna put this on
another line cuz it's gonna get crazy.

41
00:02:52.650 --> 00:02:55.098
Let's just, it's already getting crazy.

42
00:02:58.507 --> 00:03:04.385
&gt;&gt; Scott: So we'll grab this here,
and we'll put this here.

43
00:03:04.385 --> 00:03:12.338
And we need to,
&gt;&gt; Scott: Return some stuff, here we go.

44
00:03:16.254 --> 00:03:18.460
&gt;&gt; Scott: Yeah, so
the way you would do that.

45
00:03:18.460 --> 00:03:19.815
Get rid of that.

46
00:03:19.815 --> 00:03:23.881
Would be wait, why is this freaking out?

47
00:03:23.881 --> 00:03:25.875
Bracket, bracket, bracket.

48
00:03:28.535 --> 00:03:30.835
&gt;&gt; Scott: I know, hold on,
we'll just do an implicit return here.

49
00:03:32.716 --> 00:03:33.290
&gt;&gt; Scott: There we go.

50
00:03:35.841 --> 00:03:36.799
&gt;&gt; Scott: There we go.

51
00:03:39.673 --> 00:03:41.088
&gt;&gt; Scott: Why is it still freaking out?

52
00:03:41.088 --> 00:03:44.425
The syntax.

53
00:03:44.425 --> 00:03:45.256
We'll get to that.

54
00:03:45.256 --> 00:03:47.381
So we'll just say
this.removeTodo.bind(this), but

55
00:03:47.381 --> 00:03:48.789
we need a reference to the actual todo.

56
00:03:48.789 --> 00:03:50.998
&gt;&gt; Speaker 2: You need another
parenthesis at the bottom.

57
00:03:50.998 --> 00:03:51.751
The map.

58
00:03:51.751 --> 00:03:52.588
&gt;&gt; Scott: Where?

59
00:03:52.588 --> 00:03:53.423
The map.

60
00:03:53.423 --> 00:03:54.564
&gt;&gt; Speaker 2: Line 36.

61
00:03:54.564 --> 00:03:57.567
&gt;&gt; Scott: 36, okay, here we go.

62
00:03:57.567 --> 00:04:01.450
Thanks, great, okay, cool.

63
00:04:01.450 --> 00:04:04.740
So now what we would do is we need
a reference to the actual todo.

64
00:04:04.740 --> 00:04:10.530
So we'll just do an anonymous
functionary here onClick and

65
00:04:10.530 --> 00:04:17.320
we'll say this.call pass in this and
then the actual todo.

66
00:04:17.320 --> 00:04:22.020
There or actually what we need is
the index of that todo to remove it.

67
00:04:22.020 --> 00:04:28.133
So we'll say index
&gt;&gt; Scott: And then i.

68
00:04:28.133 --> 00:04:29.214
&gt;&gt; Speaker 3: Call, two l's.

69
00:04:29.214 --> 00:04:30.793
&gt;&gt; Scott: Thank you.

70
00:04:30.793 --> 00:04:32.511
So they will pass in the index here.

71
00:04:32.511 --> 00:04:35.852
And then now what we'll do is we'll
make a new method called removeTodo.

72
00:04:38.594 --> 00:04:42.530
&gt;&gt; Scott: removeTodo,
that grabs the index, and

73
00:04:42.530 --> 00:04:48.220
then we'll just say const
todos = this.state.todos.

74
00:04:48.220 --> 00:04:53.220
And then we just want to

75
00:04:53.220 --> 00:04:57.167
splice that out or

76
00:04:57.167 --> 00:05:03.518
.slice(0) up to index.

77
00:05:03.518 --> 00:05:06.680
Index, so whatever that is.

78
00:05:08.760 --> 00:05:14.386
And then we'd also wanna get

79
00:05:14.386 --> 00:05:23.300
this.state.todos.slice, (i + 1).

80
00:05:23.300 --> 00:05:25.470
So everything before the index,
and after the index.

81
00:05:25.470 --> 00:05:28.220
&gt;&gt; Speaker 4: 1 there, that should be i.

82
00:05:28.220 --> 00:05:29.503
1 should be i.

83
00:05:29.503 --> 00:05:30.131
&gt;&gt; Scott: Thank you.

84
00:05:34.682 --> 00:05:42.745
&gt;&gt; Scott: And then we'll say this.setState
&gt;&gt; Scott: ((todos)),

85
00:05:42.745 --> 00:05:46.845
so let's check that out and
see what happens.

86
00:05:46.845 --> 00:05:49.503
&gt;&gt; Speaker 5: Why are you calling call
instead of just calling function?

87
00:05:49.503 --> 00:05:51.216
&gt;&gt; Scott: Cuz it has to bind it.

88
00:05:51.216 --> 00:05:52.389
&gt;&gt; Speaker 5: To bind it [CROSSTALK].

89
00:05:52.389 --> 00:05:57.425
&gt;&gt; Scott: Yeah, there's a auto abiding
thing going on with React and I don't have

90
00:05:57.425 --> 00:06:03.320
stage zero for Babel enabled to do the
property initializers and stuff like that.

91
00:06:03.320 --> 00:06:10.810
So if you make a new todo and
we click on it, it gets rid of it.

92
00:06:10.810 --> 00:06:13.953
Yeah, but this thing's still
hanging around in the DOM,

93
00:06:13.953 --> 00:06:16.464
cuz we don't have the key property and
stuff.

94
00:06:16.464 --> 00:06:18.259
Cool, any other questions?

95
00:06:18.259 --> 00:06:21.103
Yes?
&gt;&gt; Speaker 6: Couple questions from

96
00:06:21.103 --> 00:06:22.762
the audience.

97
00:06:22.762 --> 00:06:23.722
Xavier L.

98
00:06:23.722 --> 00:06:29.840
Why always explicate
repeating the bind this part.

99
00:06:29.840 --> 00:06:31.160
&gt;&gt; Scott: That's because

100
00:06:32.250 --> 00:06:37.160
when you use the ES6 class syntax
with the react components,

101
00:06:38.400 --> 00:06:44.060
react takes care of auto-binding
the methods to the correct context.

102
00:06:44.060 --> 00:06:46.160
By using the class
syntax it breaks that so

103
00:06:46.160 --> 00:06:49.420
you actually have to call
bind when we wanna use it.

104
00:06:49.420 --> 00:06:52.710
But if you don't want to call bind every
single time you use it, the way to get

105
00:06:52.710 --> 00:06:56.770
around it without installing a new plugin
for Babel is inside your constructor.

106
00:06:56.770 --> 00:06:59.932
What you would do is you would say,
for instance,

107
00:06:59.932 --> 00:07:03.697
if we wanted to go ahead and
set a binding for handleChange,

108
00:07:03.697 --> 00:07:08.396
we can say this.handleChange =
this.handleChange.bind(this).

109
00:07:13.758 --> 00:07:15.805
&gt;&gt; Scott: And then now when we
use handleChange in the template,

110
00:07:15.805 --> 00:07:19.820
we don't have to call bind every single
time, because we did in our constructor.

111
00:07:19.820 --> 00:07:21.720
But if you set up stage zero, Babel,

112
00:07:21.720 --> 00:07:24.160
what you can do is instead
is a little hack I guess.

113
00:07:24.160 --> 00:07:25.230
You can just use arrow functions.

114
00:07:25.230 --> 00:07:28.102
So you can handleChange equals
an arrow function here,

115
00:07:28.102 --> 00:07:31.473
which will keep the syntax of the class,
so this will work, too.

116
00:07:31.473 --> 00:07:34.490
And then you don't even
have to do this anymore.

117
00:07:34.490 --> 00:07:37.166
And you don't have to call
.bind down here either.

118
00:07:37.166 --> 00:07:41.880
You could just use the arrow
function right on the class itself.

119
00:07:41.880 --> 00:07:44.050
&gt;&gt; Speaker 6: Next
question from Charles M.

120
00:07:44.050 --> 00:07:45.554
It's a long one,
maybe you wanna read that.

121
00:07:45.554 --> 00:07:49.114
&gt;&gt; Scott: Do you tend to use
refs more often for form data or

122
00:07:49.114 --> 00:07:52.592
would you pin each input
into a piece of state?

123
00:07:52.592 --> 00:07:55.713
I've also seen some people reference
a target children zero but

124
00:07:55.713 --> 00:07:59.427
maybe because you don't have to remember
the index for this and that input.

125
00:07:59.427 --> 00:08:02.240
Me typically, I almost never use refs.

126
00:08:02.240 --> 00:08:06.060
I just for forms, I just put in the state.

127
00:08:06.060 --> 00:08:08.480
That's like literally only time
I ever have a local state.

128
00:08:08.480 --> 00:08:12.866
Most of the time I store everything in my
state management whether it's Redux or

129
00:08:12.866 --> 00:08:13.924
whatever, RXJS.

130
00:08:13.924 --> 00:08:15.889
And forms like the S case,
where I'm like, okay,

131
00:08:15.889 --> 00:08:19.280
Micropoint is going to have local
state and I'll keep track of it there.

132
00:08:19.280 --> 00:08:21.354
That way I can do things
with the state and

133
00:08:21.354 --> 00:08:24.831
not have to refer to the ref every
single time I want to do something,

134
00:08:24.831 --> 00:08:28.139
I just want to keep track of the state and
not the actual element.

135
00:08:30.592 --> 00:08:32.179
&gt;&gt; Scott: Okay, another question,

136
00:08:32.179 --> 00:08:36.940
on some web projects I get to bind almost
every method in the class, is that right?

137
00:08:38.640 --> 00:08:42.849
Yes, if you want to use the method in your
template and the render function, yes,

138
00:08:42.849 --> 00:08:44.016
you'll have to bind.

139
00:08:44.016 --> 00:08:46.956
But again, the ways you could do it is,
you can do this, so

140
00:08:46.956 --> 00:08:48.765
you don't have to bind every time.

141
00:08:48.765 --> 00:08:52.377
Or you can literally just download
Babel preset stage zero and

142
00:08:52.377 --> 00:08:56.058
add it to your Babel RC,
add stage zero in here to your preset and

143
00:08:56.058 --> 00:08:59.965
then you don't have to do that,
you can just use arrow functions.

144
00:09:03.344 --> 00:09:06.400
&gt;&gt; Scott: Cool,
any other questions on that?

145
00:09:06.400 --> 00:09:09.150
I pushed up the solution for
this too, if you want it?

146
00:09:09.150 --> 00:09:13.628
It's on the, what branch is it on?

147
00:09:13.628 --> 00:09:16.880
All right, it's on todo-solution
branch of that same starter repose.

148
00:09:16.880 --> 00:09:19.930
So you can pull that down, if you want
because now we're going to take that and

149
00:09:19.930 --> 00:09:21.218
actually convert that to React Native.

150
00:09:21.218 --> 00:09:24.825
So if you haven't finished it or
if you just wait and it's there,

151
00:09:24.825 --> 00:09:26.015
you can pull it down.

152
00:09:28.922 --> 00:09:30.388
&gt;&gt; Scott: Great.

153
00:09:30.388 --> 00:09:33.130
So now let's get back to our slides here.

154
00:09:33.130 --> 00:09:34.391
Any other question before
we get back to the slides?

155
00:09:37.805 --> 00:09:39.940
&gt;&gt; Scott: No, all right.

156
00:09:39.940 --> 00:09:45.560
So everybody knows Reacts like pro,
pro-React, right?

157
00:09:45.560 --> 00:09:47.668
That was all to it pretty much.

158
00:09:47.668 --> 00:09:49.420
I mean it is actually pretty simple.

159
00:09:49.420 --> 00:09:52.040
Believe it or not like that's most of it.

160
00:09:52.040 --> 00:09:56.810
There is some other stuff like lifecycle
hooks and other things you can do in JSX,

161
00:09:56.810 --> 00:09:59.690
but it's really just
JavaScript with some methods.

162
00:09:59.690 --> 00:10:01.060
That's really cool.

163
00:10:01.060 --> 00:10:02.030
It's pretty simple.

