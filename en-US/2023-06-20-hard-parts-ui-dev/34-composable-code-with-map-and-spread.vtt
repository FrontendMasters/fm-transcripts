WEBVTT

1
00:00:00.200 --> 00:00:00.884
&gt;&gt; Speaker 1: All right, so

2
00:00:00.884 --> 00:00:05.053
here we go, with our new element flexible
code, we're gonna be able to compose code.

3
00:00:05.053 --> 00:00:07.390
&gt;&gt; Speaker 2: I've added
one new element here.

4
00:00:07.390 --> 00:00:09.030
&gt;&gt; Speaker 1: Do I need to mark that off?

5
00:00:09.030 --> 00:00:09.974
&gt;&gt; Speaker 2: No, I do not.

6
00:00:09.974 --> 00:00:14.170
&gt;&gt; Speaker 1: So we're gonna use map,
we're then gonna replace the elements.

7
00:00:14.170 --> 00:00:17.197
&gt;&gt; Speaker 2: Here we go, people,

8
00:00:17.197 --> 00:00:21.919
this is almost our last diagram.

9
00:00:21.919 --> 00:00:25.018
&gt;&gt; Speaker 1: I shouldn't start saying
that, two and a half hours before the end,

10
00:00:25.018 --> 00:00:28.453
when there's two and a half hours more
diagrams, but it's getting there.

11
00:00:28.453 --> 00:00:31.180
&gt;&gt; Speaker 2: We are now
gonna be element flexible.

12
00:00:31.180 --> 00:00:34.380
&gt;&gt; Speaker 1: It's gonna allow us to have
multiple elements in different order.

13
00:00:34.380 --> 00:00:37.586
&gt;&gt; Speaker 2: I can switch around elements
here, I could have ten great jobs.

14
00:00:37.586 --> 00:00:42.169
&gt;&gt; Speaker 1: I could have great job,
Phil, followed by Div, great job Y,

15
00:00:42.169 --> 00:00:47.192
followed by Div, great job, Alexa,
followed by Div, great job,

16
00:00:47.192 --> 00:00:52.745
Matric followed by Div, great job,
Justice followed by Div, great job,

17
00:00:52.745 --> 00:00:58.695
John, followed by Div, great job, Ian,
followed by Div, great job, Paul.

18
00:00:58.695 --> 00:00:59.603
&gt;&gt; Speaker 2: There we go, well done.

19
00:00:59.603 --> 00:01:00.717
&gt;&gt; Speaker 1: I can just list them out.

20
00:01:00.717 --> 00:01:04.498
&gt;&gt; Speaker 2: And then they will all be
converted into DOM elements via my map

21
00:01:04.498 --> 00:01:07.567
that's going to run convert
on every one of them.

22
00:01:07.567 --> 00:01:09.402
&gt;&gt; Speaker 1: Here we go,
so let's get diagramming.

23
00:01:09.402 --> 00:01:14.826
&gt;&gt; Speaker 2: This is gonna be
a flexible virtual visual JavaScript DOM

24
00:01:14.826 --> 00:01:21.383
that manifests in our C++ elements and
I'm gonna start with Phil.

25
00:01:21.383 --> 00:01:24.230
&gt;&gt; Speaker 1: Well, gotta first
do some diagramming, haven't I?

26
00:01:24.230 --> 00:01:27.971
&gt;&gt; Speaker 2: So
let me get everything set up here,

27
00:01:27.971 --> 00:01:31.670
we have our web page, there we go.

28
00:01:31.670 --> 00:01:36.568
&gt;&gt; Speaker 1: There's our
JavaScript runtime and our C++.

29
00:01:36.568 --> 00:01:42.311
&gt;&gt; Speaker 2: Thank you, beautiful, and
we know that immediately in our C++,

30
00:01:42.311 --> 00:01:47.260
we have a body element,
that's the whole page there.

31
00:01:47.260 --> 00:01:48.328
&gt;&gt; Speaker 1: Our layout and

32
00:01:48.328 --> 00:01:53.054
render engine ensures that
everything transfers to the page.

33
00:01:53.054 --> 00:01:55.590
&gt;&gt; Speaker 2: And
now we have our JavaScript runtime,

34
00:01:55.590 --> 00:01:57.908
everyone wanna see my schema again?

35
00:01:57.908 --> 00:01:59.220
&gt;&gt; Speaker 1: No, no [LAUGH].

36
00:01:59.220 --> 00:02:01.080
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Speaker 1: All right,

37
00:02:01.080 --> 00:02:03.690
we're going to anyway, dot HTML.

38
00:02:04.710 --> 00:02:10.010
&gt;&gt; Speaker 2: There it is, and
it loads into our web browser.

39
00:02:10.010 --> 00:02:15.922
&gt;&gt; Speaker 1: The HTML parser is
going to interpret each line and

40
00:02:15.922 --> 00:02:24.640
add it to the C++ list of elements
whose output will be actual pixels.

41
00:02:24.640 --> 00:02:28.454
&gt;&gt; Speaker 2: And then we have our
JavaScript runtime which is where

42
00:02:28.454 --> 00:02:32.617
we really do most of our work
with our memory, there we go.

43
00:02:32.617 --> 00:02:37.069
&gt;&gt; Speaker 1: So we also know we
have timer out of here, there it is.

44
00:02:37.069 --> 00:02:41.192
&gt;&gt; Speaker 2: Okay, so,
I've now closed my HTML file.

45
00:02:41.192 --> 00:02:45.540
&gt;&gt; Speaker 1: It technically still has a
script tag that's loading up at JavaScript

46
00:02:45.540 --> 00:02:49.742
runtime but I've got my little
triangle there pointing right now,

47
00:02:49.742 --> 00:02:51.820
because that file is now closed.

48
00:02:52.870 --> 00:02:55.310
&gt;&gt; Speaker 2: Okay, so Phil, jump me in.

49
00:02:55.310 --> 00:03:00.218
&gt;&gt; Speaker 1: What's the first thing
that gets auto added to my JavaScript

50
00:03:00.218 --> 00:03:03.490
memory when it's executed, sorry,

51
00:03:03.490 --> 00:03:09.010
when the runtime is hosted by
the web browser and not by node?

52
00:03:09.010 --> 00:03:10.220
&gt;&gt; Speaker 2: We get the document DOM.

53
00:03:10.220 --> 00:03:12.343
&gt;&gt; Speaker 1: Beautiful, perfect, and

54
00:03:12.343 --> 00:03:17.290
that is going to be linked through
a hidden property to what?

55
00:03:17.290 --> 00:03:18.207
&gt;&gt; Speaker 2: Our DOM.

56
00:03:18.207 --> 00:03:24.090
&gt;&gt; Speaker 1: To our DOM, beautiful,
a hidden link to it, there it is.

57
00:03:24.090 --> 00:03:29.026
&gt;&gt; Speaker 2: And I tell you, I'm keeping
that enthusiasm up for the same thing,

58
00:03:29.026 --> 00:03:30.230
so there it is.

59
00:03:30.230 --> 00:03:33.412
&gt;&gt; Speaker 1: And we have,
what methods we're gonna find useful and

60
00:03:33.412 --> 00:03:36.470
what property we're
gonna find useful here?

61
00:03:36.470 --> 00:03:39.901
&gt;&gt; Speaker 2: The createElements method,
and the body getter.

62
00:03:39.901 --> 00:03:42.181
&gt;&gt; Speaker 1: Getter setter property,
beautiful.

63
00:03:42.181 --> 00:03:43.665
&gt;&gt; Speaker 2: Shoot, I didn't mean to,
yeah, that's perfect.

64
00:03:43.665 --> 00:03:48.204
&gt;&gt; Speaker 1: Good, okay,
now let's get storing our data.

65
00:03:48.204 --> 00:03:52.553
&gt;&gt; Speaker 2: We are then gonna have our
JavaScript manifestation of that data

66
00:03:52.553 --> 00:03:55.372
instantiated, put into our description

67
00:03:55.372 --> 00:04:00.222
that's still data generic between
line four and six or whatever it is.

68
00:04:00.222 --> 00:04:02.196
&gt;&gt; Speaker 1: And then we have our elems.

69
00:04:02.196 --> 00:04:04.933
&gt;&gt; Speaker 2: This is because
now when we are mapping,

70
00:04:04.933 --> 00:04:09.926
we are not gonna be generating jsInput
from our first, element jsDiv from

71
00:04:09.926 --> 00:04:14.617
our sort of index one element,
jsInput from our index zero element.

72
00:04:14.617 --> 00:04:19.702
&gt;&gt; Speaker 1: We are gonna be generic and
have all of our accessor

73
00:04:19.702 --> 00:04:24.910
objects added to an array
as a result of mapping over

74
00:04:24.910 --> 00:04:29.650
the vDOM that is going
to be assigned to elems.

75
00:04:29.650 --> 00:04:34.104
&gt;&gt; Speaker 2: So elems is now instead
of jsInfo, jsDiv, it's a generic list.

76
00:04:34.104 --> 00:04:36.410
&gt;&gt; Speaker 1: It will be as big
as the number of elements, or

77
00:04:36.410 --> 00:04:40.568
number of elements we've described in
our vDOM, and here it's gonna be three.

78
00:04:40.568 --> 00:04:44.320
&gt;&gt; Speaker 2: So yeah, let's start putting
some stuff in memory, Phil, please.

79
00:04:44.320 --> 00:04:46.438
&gt;&gt; Speaker 1: We're gonna
declare a name variable and

80
00:04:46.438 --> 00:04:48.250
initialize it to an empty string.

81
00:04:48.250 --> 00:04:49.120
&gt;&gt; Speaker 2: Great.

82
00:04:49.120 --> 00:04:52.230
&gt;&gt; Speaker 1: We're gonna declare a vDOM
variable and leave it uninitialized.

83
00:04:52.230 --> 00:04:52.790
&gt;&gt; Speaker 2: Great.

84
00:04:52.790 --> 00:04:54.800
&gt;&gt; Speaker 1: And same thing,
declare an elems variable.

85
00:04:54.800 --> 00:04:58.240
&gt;&gt; Speaker 2: Perfect, perfect, beautiful,
and then some function definitions.

86
00:04:58.240 --> 00:05:00.130
&gt;&gt; Speaker 1: One's just a simple handler.

87
00:05:00.130 --> 00:05:03.760
&gt;&gt; Speaker 2: Yeah,
we declare a create DOM function.

88
00:05:03.760 --> 00:05:06.682
&gt;&gt; Speaker 1: I'll just do
the handler there, handle.

89
00:05:06.682 --> 00:05:10.087
&gt;&gt; Speaker 2: What's the next one,
update DOM?

90
00:05:10.087 --> 00:05:16.502
&gt;&gt; Speaker 1: Sorry, I forgot createDOM,
sorry, sorry, createVDOM.

91
00:05:16.502 --> 00:05:19.624
&gt;&gt; Speaker 2: Sorry, I got ahead
of myself, thank you, sorry Phil,

92
00:05:19.624 --> 00:05:21.290
what's the first one there?

93
00:05:21.290 --> 00:05:23.385
&gt;&gt; Speaker 1: Create,
I can't see where we're at on the board.

94
00:05:23.385 --> 00:05:24.823
&gt;&gt; Speaker 2: Is it VDOM or-
&gt;&gt; Speaker 1: VDOM, yeah,

95
00:05:24.823 --> 00:05:25.885
that was completely my fault.

96
00:05:25.885 --> 00:05:29.285
&gt;&gt; Speaker 2: createVDOM, and then it's
the next one, it's the handler, handle.

97
00:05:29.285 --> 00:05:31.735
&gt;&gt; Speaker 1: And
then what's the next one?

98
00:05:31.735 --> 00:05:33.555
&gt;&gt; Speaker 2: Declare the update DOM.

99
00:05:33.555 --> 00:05:36.555
&gt;&gt; Speaker 1: Update DOM,
brilliant, update DOM.

100
00:05:36.555 --> 00:05:39.215
&gt;&gt; Speaker 2: Declare
the convert function.

101
00:05:39.215 --> 00:05:41.109
&gt;&gt; Speaker 1: Yeah, so
let's just go through these each.

102
00:05:41.109 --> 00:05:42.753
&gt;&gt; Speaker 2: createVDOM,
we've seen before.

103
00:05:42.753 --> 00:05:48.035
&gt;&gt; Speaker 1: It's going to, I guess,
to use a word I don't really understand,

104
00:05:48.035 --> 00:05:51.929
instantiate our arrays,
I shouldn't say that,

105
00:05:51.929 --> 00:05:55.005
to use a word I definitely understand.

106
00:05:55.005 --> 00:05:56.321
&gt;&gt; Speaker 2: We're gonna call createVDOM.

107
00:05:56.321 --> 00:06:01.358
&gt;&gt; Speaker 1: When we do our, I guess,
non-specific, data still generic,

108
00:06:01.358 --> 00:06:06.026
dynamic description of what's
gonna end up, hopefully,

109
00:06:06.026 --> 00:06:09.312
on the DOM, still has its placeholders.

110
00:06:09.312 --> 00:06:10.712
&gt;&gt; Speaker 2: That when we run createVDOM,

111
00:06:10.712 --> 00:06:14.000
we'll get filled in with whatever
the latest data is, great.

112
00:06:14.000 --> 00:06:18.085
&gt;&gt; Speaker 1: There's our handle function,
which is gonna introduce something here.

113
00:06:18.085 --> 00:06:20.755
&gt;&gt; Speaker 2: Thank goodness, because
otherwise I'm sure you're all thinking,

114
00:06:20.755 --> 00:06:21.985
why are we doing this one again?

115
00:06:21.985 --> 00:06:23.581
&gt;&gt; Speaker 1: I got it,
I know how Matt works.

116
00:06:23.581 --> 00:06:28.649
&gt;&gt; Speaker 2: Well, we're also
gonna introduce the event object,

117
00:06:28.649 --> 00:06:33.057
because once we are no
longer giving individual

118
00:06:33.057 --> 00:06:38.031
labels in JavaScript to our
input element on the DOM.

119
00:06:38.031 --> 00:06:41.636
&gt;&gt; Speaker 1: While we could technically
figure out by DOM traversal which element

120
00:06:41.636 --> 00:06:45.314
it is that the user's inputted on,
and therefore get the value of it.

121
00:06:45.314 --> 00:06:49.505
&gt;&gt; Speaker 2: It might be easier to
use the event object that gives us

122
00:06:49.505 --> 00:06:53.242
all the information
about the user's action.

123
00:06:53.242 --> 00:06:54.480
&gt;&gt; Speaker 1: That's the handle function.

124
00:06:54.480 --> 00:06:59.342
&gt;&gt; Speaker 2: Then we've got our updateDOM
function that runs the virtual JavaScript

125
00:06:59.342 --> 00:07:01.180
visual DOM creation.

126
00:07:01.180 --> 00:07:03.514
&gt;&gt; Speaker 1: Then it's gonna hit
each element with the converter.

127
00:07:03.514 --> 00:07:06.650
&gt;&gt; Speaker 2: And then it's gonna add
the converted elements to the page.

128
00:07:06.650 --> 00:07:10.290
&gt;&gt; Speaker 1: Then we have our convert
function that needs to do all our job of

129
00:07:10.290 --> 00:07:11.130
converting.

130
00:07:11.130 --> 00:07:13.784
&gt;&gt; Speaker 2: I probably should really
put that one above update DOM, right,

131
00:07:13.784 --> 00:07:17.440
just sort of a logical flow, doesn't
really matter, but just for logical flow.

132
00:07:17.440 --> 00:07:20.543
&gt;&gt; Speaker 1: Remember, by the way,
people, you will notice that we sometimes,

133
00:07:20.543 --> 00:07:22.362
I don't think we're doing it here, but

134
00:07:22.362 --> 00:07:25.320
we will end up calling functions
before they're defined.

135
00:07:25.320 --> 00:07:29.347
&gt;&gt; Speaker 2: Because we use the function
keyword, we get this hoisting notion that

136
00:07:29.347 --> 00:07:33.034
ensures that all function definitions
in our code are available

137
00:07:33.034 --> 00:07:37.828
immediately wherever we end up calling
them, even above where they're defined.

138
00:07:37.828 --> 00:07:40.295
&gt;&gt; Speaker 1: It's a design
tradition from JavaScript,

139
00:07:40.295 --> 00:07:42.636
it's up to somebody whether they use it.

140
00:07:42.636 --> 00:07:45.372
&gt;&gt; Speaker 2: But in this case,
we're not using it, but

141
00:07:45.372 --> 00:07:47.504
we might end up using it later on.

142
00:07:47.504 --> 00:07:50.976
&gt;&gt; Speaker 1: And then our set interval is
gonna be called, which is gonna run our

143
00:07:50.976 --> 00:07:55.008
main data to view converter, update
DOM on repeat every 50 milliseconds.

144
00:07:55.008 --> 00:07:58.712
&gt;&gt; Speaker 2: Sorry, I want to
flesh that out, back to you, Phil.

145
00:07:58.712 --> 00:08:01.590
&gt;&gt; Speaker 1: I sound like I've finished
up a great report on local news.

146
00:08:01.590 --> 00:08:04.420
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Speaker 1: [LAUGH]

147
00:08:04.420 --> 00:08:05.470
&gt;&gt; Speaker 2: Do you want me to pick up on

148
00:08:05.470 --> 00:08:06.272
the setInterval?

149
00:08:06.272 --> 00:08:08.250
&gt;&gt; Speaker 1: Just declare convert.

150
00:08:08.250 --> 00:08:10.490
&gt;&gt; Speaker 2: I've done that and
then, yeah, setInterval, brilliant.

151
00:08:10.490 --> 00:08:14.936
&gt;&gt; Speaker 1: So we are going to
execute the setInterval function.

152
00:08:14.936 --> 00:08:15.577
&gt;&gt; Speaker 2: Beautiful.
&gt;&gt; Speaker 1: And

153
00:08:15.577 --> 00:08:19.583
passing to it as its first argument,
the updateDOM function definition.

154
00:08:19.583 --> 00:08:20.387
&gt;&gt; Speaker 2: Perfect.

155
00:08:20.387 --> 00:08:23.980
&gt;&gt; Speaker 1: And the number 15 to
denote 15 milliseconds in between.

156
00:08:23.980 --> 00:08:28.273
&gt;&gt; Speaker 2: Beautiful, we find out
the rules of that, by the way, on MDN,

157
00:08:28.273 --> 00:08:30.544
or ChatGPT, or GitHub Copilot.

158
00:08:30.544 --> 00:08:35.914
&gt;&gt; Speaker 1: And then that is going to
pass updateDOM to our timer to set what,

159
00:08:35.914 --> 00:08:36.517
Phil?

160
00:08:36.517 --> 00:08:37.759
&gt;&gt; Speaker 2: 15 milliseconds.

161
00:08:37.759 --> 00:08:40.831
&gt;&gt; Speaker 1: Yeah, and the associated
function that will be called

162
00:08:40.831 --> 00:08:44.989
back at that moment, the callback
function is, remind me again, what?

163
00:08:44.989 --> 00:08:45.772
&gt;&gt; Speaker 2: UpdateDOM.

164
00:08:45.772 --> 00:08:51.446
&gt;&gt; Speaker 1: UpdateDOM, brilliant,
I'm not missing anything, right?

165
00:08:51.446 --> 00:08:55.858
&gt;&gt; Speaker 2: That line is now, I have,
I've got my call stack here ready to go.

166
00:08:55.858 --> 00:09:00.225
&gt;&gt; Speaker 1: Call stack, there it is.

167
00:09:00.225 --> 00:09:06.876
&gt;&gt; Speaker 2: And callback queue, perfect.

168
00:09:06.876 --> 00:09:10.941
&gt;&gt; Speaker 1: Great,
this line is now done, finished.

169
00:09:10.941 --> 00:09:16.915
&gt;&gt; Speaker 2: And now, Phil,
what happens 15 milliseconds later?

170
00:09:16.915 --> 00:09:18.774
&gt;&gt; Speaker 1: 15 milliseconds later,

171
00:09:18.774 --> 00:09:21.601
the updateDOM callback function-
&gt;&gt; Speaker 2: Yeah.

172
00:09:21.601 --> 00:09:24.490
&gt;&gt; Speaker 1: Is going to be
introduced to our callback queue.

173
00:09:24.490 --> 00:09:25.220
&gt;&gt; Speaker 2: Yes.

174
00:09:25.220 --> 00:09:29.471
&gt;&gt; Speaker 1: Which at that point,
the event loop will allow

175
00:09:29.471 --> 00:09:33.407
it to be pushed to the top
of the call stack.

176
00:09:33.407 --> 00:09:35.908
&gt;&gt; Speaker 2: Beautiful, I'm just gonna
put it straight there because, yes,

177
00:09:35.908 --> 00:09:36.675
exactly as you say.

178
00:09:36.675 --> 00:09:39.662
&gt;&gt; Speaker 1: So updateDOM,
do we add parens on it here?

179
00:09:39.662 --> 00:09:40.505
&gt;&gt; Speaker 2: No.

180
00:09:40.505 --> 00:09:44.762
&gt;&gt; Speaker 1: No, JavaScript is going to
put the parens on for us, there they are.

181
00:09:44.762 --> 00:09:45.734
&gt;&gt; Speaker 2: No, that's not it.

182
00:09:45.734 --> 00:09:48.877
&gt;&gt; Speaker 1: [LAUGH]
&gt;&gt; Speaker 2: I think we're all getting

183
00:09:48.877 --> 00:09:51.543
tired, but we're all doing very,
very well.

184
00:09:51.543 --> 00:09:55.174
&gt;&gt; Speaker 1: No, no, no, well, yep,

185
00:09:55.174 --> 00:10:00.017
there we go,
&gt;&gt; Speaker 2: There it is, added,

186
00:10:00.017 --> 00:10:00.909
beautiful.

187
00:10:00.909 --> 00:10:06.534
&gt;&gt; Speaker 1: And we are going to start,
our thread of execution is going to float

188
00:10:06.534 --> 00:10:13.166
in at about 15 milliseconds and start
executing updateDOM with a brand new,

189
00:10:13.166 --> 00:10:17.608
everybody, is it time to wake up,
a brand new what?

190
00:10:17.608 --> 00:10:19.714
&gt;&gt; Speaker 2: Execution context.

191
00:10:19.714 --> 00:10:21.970
&gt;&gt; Speaker 1: Beautiful,
thank you, everybody.

192
00:10:21.970 --> 00:10:23.365
&gt;&gt; Speaker 2: And there it is, and

193
00:10:23.365 --> 00:10:27.727
its execution context is created
at the behest of JavaScript.

194
00:10:27.727 --> 00:10:30.886
&gt;&gt; Speaker 1: And let me just see,
it's gonna do a bunch of stuff, so

195
00:10:30.886 --> 00:10:33.303
I'm gonna try make it as big as possible.

196
00:10:33.303 --> 00:10:35.524
&gt;&gt; Speaker 2: Really no need
to shrink it at all, here.

197
00:10:35.524 --> 00:10:39.769
&gt;&gt; Speaker 1: Let's have it as big as
possible because it is our main function.

198
00:10:39.769 --> 00:10:44.117
&gt;&gt; Speaker 2: But before all of that,
we need to work with our more flexible,

199
00:10:44.117 --> 00:10:48.726
visualDOM and virtualDOM here,
and we're gonna run updateDOM.

200
00:10:48.726 --> 00:10:52.176
&gt;&gt; Speaker 1: Alexa, into it we go,
and we are going to, well, tell me,

201
00:10:52.176 --> 00:10:53.560
what's gonna happen?

202
00:10:53.560 --> 00:10:55.736
&gt;&gt; Speaker 2: So first,
we're gonna reassign vDOM-

203
00:10:55.736 --> 00:10:56.749
&gt;&gt; Speaker 1: Yeah.

204
00:10:56.749 --> 00:11:00.109
&gt;&gt; Speaker 2: To the result
of invoking create vDOM.

205
00:11:00.109 --> 00:11:02.872
&gt;&gt; Speaker 1: Brilliant, create vDOM,

206
00:11:02.872 --> 00:11:08.044
which we know is going to
have as its output, yeah?

207
00:11:08.044 --> 00:11:09.102
&gt;&gt; Speaker 2: An array.

208
00:11:09.102 --> 00:11:11.119
&gt;&gt; Speaker 1: Array of 3, I think, is it?

209
00:11:11.119 --> 00:11:12.298
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Speaker 1: Sub-arrays,

210
00:11:12.298 --> 00:11:16.107
I'm just gonna draw them there like that,
people, just so we can sort of see,

211
00:11:16.107 --> 00:11:19.720
but that's going to be stored into,
as you said, what global constant?

212
00:11:19.720 --> 00:11:20.282
&gt;&gt; Speaker 2: VDOM.

213
00:11:20.282 --> 00:11:24.672
&gt;&gt; Speaker 1: VDOM, okay,
here it is, and like before,

214
00:11:24.672 --> 00:11:29.785
it's gonna have, yeah,
now three sub-arrays.

215
00:11:29.785 --> 00:11:32.989
&gt;&gt; Speaker 2: And each of them describes,
hopefully, a different element to be added

216
00:11:32.989 --> 00:11:35.573
to the C++ list of elements
that will show up on the page.

217
00:11:35.573 --> 00:11:37.105
&gt;&gt; Speaker 1: Brilliant, and now,

218
00:11:37.105 --> 00:11:42.191
what are those three with our data
passed into them, or evaluated in them?

219
00:11:42.191 --> 00:11:44.801
&gt;&gt; Speaker 2: Yes,
the first one is first the string input.

220
00:11:44.801 --> 00:11:45.775
&gt;&gt; Speaker 1: Yep.

221
00:11:45.775 --> 00:11:47.032
&gt;&gt; Speaker 2: And then an empty string.

222
00:11:47.032 --> 00:11:47.940
&gt;&gt; Speaker 1: Yep.

223
00:11:47.940 --> 00:11:50.828
&gt;&gt; Speaker 2: And
then the handle function definition.

224
00:11:50.828 --> 00:11:53.296
&gt;&gt; Speaker 1: Handle function definition,
the next one?

225
00:11:53.296 --> 00:11:59.399
&gt;&gt; Speaker 2: The next one is
the string div, the string hello, !.

226
00:11:59.399 --> 00:12:02.127
&gt;&gt; Speaker 1: Beautiful, I didn't do it so
well there, but yeah, and the next one?

227
00:12:02.127 --> 00:12:05.060
&gt;&gt; Speaker 2: The string div and
the string, great job.

228
00:12:05.060 --> 00:12:09.090
&gt;&gt; Speaker 1: Beautiful, note, by the way,
not sure that one depends on our data, but

229
00:12:09.090 --> 00:12:13.315
that's okay, we're describing in full
what the user will see in one place,

230
00:12:13.315 --> 00:12:14.757
that's kind of amazing.

231
00:12:14.757 --> 00:12:19.817
&gt;&gt; Speaker 2: Great, now, we hit line 13,
and we've got our visual, our virtual,

232
00:12:19.817 --> 00:12:24.305
our JavaScript DOM, but
I want to have them on the actual DOM, but

233
00:12:24.305 --> 00:12:27.016
I don't wanna think about it too much.

234
00:12:27.016 --> 00:12:29.372
&gt;&gt; Speaker 1: And I wanna have it flexible
to however many of these elements I have.

235
00:12:29.372 --> 00:12:31.770
&gt;&gt; Speaker 2: And I wanna have it
flexible to changing up their order.

236
00:12:31.770 --> 00:12:34.037
&gt;&gt; Speaker 1: Well,
that's what we have in line 13.

237
00:12:34.037 --> 00:12:38.019
&gt;&gt; Speaker 2: So
LMs is going to be the return value,

238
00:12:38.019 --> 00:12:43.497
the output of calling on
this list of elements vDOM,

239
00:12:43.497 --> 00:12:48.103
the built-in map function and passing it,

240
00:12:48.103 --> 00:12:51.851
the convert function definition.

241
00:12:51.851 --> 00:12:53.911
&gt;&gt; Speaker 1: What's it do?

242
00:12:53.911 --> 00:12:57.588
&gt;&gt; Speaker 2: It's going to hit the vDOM,

243
00:12:57.588 --> 00:13:02.498
each element one by one with convert.

244
00:13:02.498 --> 00:13:09.470
&gt;&gt; Speaker 1: So the first time, it's
going to hit vDOM position what, Alexa?

245
00:13:09.470 --> 00:13:12.850
&gt;&gt; Speaker 2: 0.
&gt;&gt; Speaker 1: VDOM position 0, brilliant.

246
00:13:12.850 --> 00:13:17.652
&gt;&gt; Speaker 2: VDOM position 0,
brand new execution context for it,

247
00:13:17.652 --> 00:13:19.194
and into it we go.

248
00:13:19.194 --> 00:13:21.983
&gt;&gt; Speaker 1: Let's at least do
the first one, if we don't do any more.

249
00:13:21.983 --> 00:13:26.273
&gt;&gt; Speaker 2: Note that the output of
this will be added to, as map does,

250
00:13:26.273 --> 00:13:31.279
map inside of it creates,
what's map inside of it create, Alexa?

251
00:13:31.279 --> 00:13:33.735
&gt;&gt; Speaker 1: An array.
&gt;&gt; Speaker 2: An array, exactly, ready for

252
00:13:33.735 --> 00:13:36.015
each element to be added, really,

253
00:13:36.015 --> 00:13:40.727
the return value of each call to the
function convert that was passed in and

254
00:13:40.727 --> 00:13:45.002
is gonna be called as many times as
there are elements in the array.

255
00:13:45.002 --> 00:13:48.733
&gt;&gt; Speaker 1: If you've been to
higher-order functions hard parts,

256
00:13:48.733 --> 00:13:51.462
what was it called, convert copy array?

257
00:13:51.462 --> 00:13:53.115
&gt;&gt; Speaker 2: And so yeah, anyway,

258
00:13:53.115 --> 00:13:56.516
whatever we called map
before the big reveal.

259
00:13:56.516 --> 00:14:01.550
&gt;&gt; Speaker 1: So into convert we go and
our node parameter, Alexa, is?

260
00:14:01.550 --> 00:14:06.403
&gt;&gt; Speaker 2: Yes, in our local memory
that's going to have the value of

261
00:14:06.403 --> 00:14:08.890
the 0th element of our vDOM.

262
00:14:08.890 --> 00:14:09.770
&gt;&gt; Speaker 1: There it is, there.

263
00:14:09.770 --> 00:14:12.471
&gt;&gt; Speaker 2: Which is an array
with input empty string and

264
00:14:12.471 --> 00:14:14.592
the handle function definition.

265
00:14:14.592 --> 00:14:18.938
&gt;&gt; Speaker 1: So it's an array of input,
empty string, and

266
00:14:18.938 --> 00:14:24.632
the handle function definition,
beautiful, there it is.

267
00:14:24.632 --> 00:14:30.424
&gt;&gt; Speaker 2: And now, what do we
do inside of this and assign to LM?

268
00:14:30.424 --> 00:14:36.043
&gt;&gt; Speaker 1: We are going to call
the createElement method on the document

269
00:14:36.043 --> 00:14:40.888
object, to use that hidden
link to access the DOM and

270
00:14:40.888 --> 00:14:46.946
create a new element of the type
that is at the 0th index of our node

271
00:14:46.946 --> 00:14:52.649
local variable, which is the string input,
&gt;&gt; Speaker 2: Beautiful,

272
00:14:52.649 --> 00:14:57.095
and that's gonna create, as you say,

273
00:14:57.095 --> 00:15:04.404
an input element on our C++,
&gt;&gt; Speaker 1: List of elements,

274
00:15:04.404 --> 00:15:06.129
the DOM, there it is.

275
00:15:06.129 --> 00:15:11.873
&gt;&gt; Speaker 2: Brilliant, excellent, and we
can't pull that back into JavaScript, so

276
00:15:11.873 --> 00:15:18.084
instead JavaScript gives us an output to
assign to LM as a local temporary label.

277
00:15:18.084 --> 00:15:19.919
&gt;&gt; Speaker 1: It gives us what?

278
00:15:19.919 --> 00:15:22.365
&gt;&gt; Speaker 2: A JavaScript object-
&gt;&gt; Speaker 1: Yeah.

279
00:15:22.365 --> 00:15:25.348
&gt;&gt; Speaker 2: With that
new input node on the DOM.

280
00:15:25.348 --> 00:15:26.385
&gt;&gt; Speaker 1: Yep.

281
00:15:26.385 --> 00:15:27.940
&gt;&gt; Speaker 2: And all of our

282
00:15:27.940 --> 00:15:31.684
getter-setter methods-
&gt;&gt; Speaker 1: You're doing

283
00:15:31.684 --> 00:15:32.450
brilliantly, yeah.

284
00:15:32.450 --> 00:15:33.997
&gt;&gt; Speaker 2: Go with an input.

285
00:15:33.997 --> 00:15:36.914
&gt;&gt; Speaker 1: Yeah,
perfect, yeah, perfect.

286
00:15:36.914 --> 00:15:42.778
&gt;&gt; Speaker 2: Link to exactly the input
and all of our getter-setter properties,

287
00:15:42.778 --> 00:15:49.160
including, I guess, well, the ones
we know we're gonna have access to.

288
00:15:49.160 --> 00:15:52.812
&gt;&gt; Speaker 1: And they're added by
JavaScript, based on, as you say,

289
00:15:52.812 --> 00:15:57.505
what the element is we're linking to
in the DOM, in this case, an input And

290
00:15:57.505 --> 00:16:02.647
we're then going to use some of those text
content we're not gonna actively use,

291
00:16:02.647 --> 00:16:07.268
I mean we are, we've hopefully
written some conditional logic saying,

292
00:16:07.268 --> 00:16:11.515
if node position zero is of type input,
please only use the value and

293
00:16:11.515 --> 00:16:12.978
the on input setters.

294
00:16:12.978 --> 00:16:15.962
&gt;&gt; Speaker 2: However, that's too
much code for me to write on this and

295
00:16:15.962 --> 00:16:19.880
I was trying to save space so that we
can fit it on and diagram more easily.

296
00:16:19.880 --> 00:16:24.506
&gt;&gt; Speaker 1: So we know that it will not
cause any harm assigning to text content,

297
00:16:24.506 --> 00:16:27.120
the user's view will not change.

298
00:16:27.120 --> 00:16:29.586
&gt;&gt; Speaker 2: So
we'll just skip over line 19 and

299
00:16:29.586 --> 00:16:33.976
hit line 20 where we're going
to use what setter here, Alexa.

300
00:16:33.976 --> 00:16:35.337
&gt;&gt; Speaker 1: The value.

301
00:16:35.337 --> 00:16:38.954
&gt;&gt; Speaker 2: Exactly to set-
&gt;&gt; Speaker 1: To set the value on

302
00:16:38.954 --> 00:16:43.759
the input node on the DOM
to be what is at our node

303
00:16:43.759 --> 00:16:48.579
array at index one,
which is an empty string.

304
00:16:48.579 --> 00:16:49.161
&gt;&gt; Speaker 2: Perfect,

305
00:16:49.161 --> 00:16:52.920
we're drawing it from our pretty
picture here describing the page.

306
00:16:52.920 --> 00:16:57.484
&gt;&gt; Speaker 1: It's an empty string and
that empty string gets added to the DOM

307
00:16:57.484 --> 00:17:00.941
element, and
then what's the line we do next?

308
00:17:00.941 --> 00:17:02.745
&gt;&gt; Speaker 2: Then we are going to use our

309
00:17:02.745 --> 00:17:04.027
oninputSetter-
&gt;&gt; Speaker 1: Yep.

310
00:17:04.027 --> 00:17:08.104
&gt;&gt; Speaker 2: To set an input handler
on the DOM on that input node to be

311
00:17:08.104 --> 00:17:12.120
the function definition that we have next-
&gt;&gt; Speaker 1: That was node 1.

312
00:17:12.120 --> 00:17:15.010
&gt;&gt; Speaker 2: This is node position 2,
exactly, which is?

313
00:17:15.010 --> 00:17:18.590
&gt;&gt; Speaker 1: And that's handle.
&gt;&gt; Speaker 2: Handle, exactly.

314
00:17:18.590 --> 00:17:20.763
&gt;&gt; Speaker 1: And
we're going through convert here, but

315
00:17:20.763 --> 00:17:24.050
we know that in practice if we built
this in our code for ourselves,

316
00:17:24.050 --> 00:17:25.946
we're going through this function.

317
00:17:25.946 --> 00:17:28.420
&gt;&gt; Speaker 2: We're just
describing what we want here.

318
00:17:28.420 --> 00:17:31.379
&gt;&gt; Speaker 1: It's all gonna show up,
isn't that beautiful?

319
00:17:31.379 --> 00:17:35.526
&gt;&gt; Speaker 2: Of course
we're all suffering here.

320
00:17:35.526 --> 00:17:37.434
&gt;&gt; Speaker 1: [LAUGH]
&gt;&gt; Speaker 2: Because I don't know,

321
00:17:37.434 --> 00:17:40.131
it's nice knowing what's going on I guess.

322
00:17:40.131 --> 00:17:42.550
&gt;&gt; Speaker 1: And then finally,
we've done all of our work,

323
00:17:42.550 --> 00:17:44.376
we still have our accessor object.

324
00:17:44.376 --> 00:17:49.919
&gt;&gt; Speaker 2: It's gonna be
pushed into this array here along

325
00:17:49.919 --> 00:17:56.030
with two more from our
further runnings of convert.

326
00:17:56.030 --> 00:18:00.133
&gt;&gt; Speaker 1: So the next running
of convert with V DOM position 1,

327
00:18:00.133 --> 00:18:04.429
don't worry, we're not gonna do it,
I don't think.

328
00:18:04.429 --> 00:18:09.247
&gt;&gt; Speaker 2: V DOM position 1 is gonna
be pushed in as a second accessor object,

329
00:18:09.247 --> 00:18:13.220
what's gonnna be on our DOM, it's div.

330
00:18:13.220 --> 00:18:16.457
&gt;&gt; Speaker 1: And
we can look here, and hello text.

331
00:18:16.457 --> 00:18:20.640
&gt;&gt; Speaker 2: Content is gonna be hello.

332
00:18:20.640 --> 00:18:21.740
&gt;&gt; Speaker 1: There it is.

333
00:18:21.740 --> 00:18:23.560
&gt;&gt; Speaker 2: Exclamation mark.

334
00:18:23.560 --> 00:18:25.649
&gt;&gt; Speaker 1: And then because it's, and

335
00:18:25.649 --> 00:18:31.491
that object is then pushed in here with
its link, and now our third is pushed in.

336
00:18:31.491 --> 00:18:32.051
&gt;&gt; Speaker 2: By the way,

337
00:18:32.051 --> 00:18:35.080
I drew the objects here before
they're actually returned out.

338
00:18:35.080 --> 00:18:40.715
&gt;&gt; Speaker 1: The third is from another
run of convert, this time V DOM 2,

339
00:18:40.715 --> 00:18:45.367
and that goes in as the third
element of the array.

340
00:18:45.367 --> 00:18:50.335
&gt;&gt; Speaker 2: And that is going to
have created also an associated

341
00:18:50.335 --> 00:18:56.700
corresponding div element with
its own text which is the string.

342
00:18:57.790 --> 00:18:58.925
&gt;&gt; Speaker 1: Great job.

343
00:18:58.925 --> 00:19:04.854
&gt;&gt; Speaker 2: Exactly, and now this
list of three accessor objects will

344
00:19:04.854 --> 00:19:11.763
be returned out of the map call
into which global constant, Alexa?

345
00:19:11.763 --> 00:19:13.270
&gt;&gt; Speaker 1: Elems.

346
00:19:13.270 --> 00:19:14.110
&gt;&gt; Speaker 2: Elems, brilliant.

347
00:19:14.110 --> 00:19:15.590
&gt;&gt; Speaker 1: There it is.

348
00:19:15.590 --> 00:19:16.543
&gt;&gt; Speaker 2: And there it is.

349
00:19:16.543 --> 00:19:24.349
&gt;&gt; Speaker 1: I'm gonna draw it as a big
array with inside of it three objects,

350
00:19:24.349 --> 00:19:28.975
each with an associated DOM element,

351
00:19:28.975 --> 00:19:33.165
and each with a link, each with a,

352
00:19:33.165 --> 00:19:38.390
I'm just gonna draw them at the side here.

353
00:19:38.390 --> 00:19:43.706
&gt;&gt; Speaker 2: It's a bit funny,
I know, but each with a link,

354
00:19:43.706 --> 00:19:51.765
link, link to their respective,
&gt;&gt; Speaker 1: Corresponding DOM elements.

355
00:19:51.765 --> 00:19:58.955
&gt;&gt; Speaker 2: And
each with their pertinent setter and

356
00:19:58.955 --> 00:20:04.835
getter properties available.

357
00:20:04.835 --> 00:20:06.153
&gt;&gt; Speaker 1: My goodness [LAUGH].

358
00:20:06.153 --> 00:20:09.509
&gt;&gt; Speaker 2: And so,
at this point I'm sure you're all.

359
00:20:09.509 --> 00:20:13.126
&gt;&gt; Speaker 1: Well, when I say that,
by the way, I'm just commiserating,

360
00:20:13.126 --> 00:20:15.117
[LAUGH] but also I know you're not.

361
00:20:15.117 --> 00:20:19.490
&gt;&gt; Speaker 2: I know you're absolutely
rearing to go which is fantastic,

362
00:20:19.490 --> 00:20:22.760
because we have now only
one last thing to do.

363
00:20:22.760 --> 00:20:24.096
&gt;&gt; Speaker 1: Alexa,
if you can finish it off for me here.

364
00:20:24.096 --> 00:20:26.506
&gt;&gt; Speaker 2: We have only
one last thing to do.

365
00:20:26.506 --> 00:20:27.712
&gt;&gt; Speaker 1: We finished our map,

366
00:20:27.712 --> 00:20:30.928
we have a visual DOM with all
of our data carried through.

367
00:20:30.928 --> 00:20:33.890
&gt;&gt; Speaker 2: It's flowed into our elems,
which it has access for

368
00:20:33.890 --> 00:20:36.540
the corresponding online DOM elements.

369
00:20:36.540 --> 00:20:38.556
&gt;&gt; Speaker 1: And now,
these DOM elements ain't showing up yet.

370
00:20:38.556 --> 00:20:41.440
&gt;&gt; Speaker 2: So what do we do
in our last line of update DOM?

371
00:20:41.440 --> 00:20:45.281
&gt;&gt; Speaker 1: We are going to use
replaceChildren which is on the body,

372
00:20:45.281 --> 00:20:48.160
which is on our document object-
&gt;&gt; Speaker 2: Yeah.

373
00:20:48.160 --> 00:20:49.860
&gt;&gt; Speaker 1: That links to the DOM.

374
00:20:49.860 --> 00:20:51.700
&gt;&gt; Speaker 2: But
look what we've got to do here.

375
00:20:51.700 --> 00:20:52.836
&gt;&gt; Speaker 1: A little bit different.

376
00:20:52.836 --> 00:20:57.242
&gt;&gt; Speaker 2: Yes, so we are going
to spread all of our elements in

377
00:20:57.242 --> 00:20:57.811
LMs-
&gt;&gt; Speaker 1: Yeah.

378
00:20:57.811 --> 00:21:01.030
&gt;&gt; Speaker 2: Into our list of arguments.

379
00:21:01.030 --> 00:21:05.182
&gt;&gt; Speaker 1: So
that's going to take LM's position 0,

380
00:21:05.182 --> 00:21:09.672
LM's position 1, and LM's position 2, and

381
00:21:09.672 --> 00:21:14.499
insert them one by one by
one to be the replacement of

382
00:21:14.499 --> 00:21:18.900
body's current, which is none, children.

383
00:21:18.900 --> 00:21:23.286
&gt;&gt; Speaker 2: Which means we can
just move our array, our list,

384
00:21:23.286 --> 00:21:26.740
to include our children elements now.

385
00:21:26.740 --> 00:21:29.892
&gt;&gt; Speaker 1: And
what will show up on our page but,

386
00:21:29.892 --> 00:21:34.679
input with nothing, and
what a lot of work for nothing.

387
00:21:34.679 --> 00:21:42.290
&gt;&gt; Speaker 2: And with hello and
a div with great job.

388
00:21:43.690 --> 00:21:45.178
&gt;&gt; Speaker 1: Hey, displayed from content.

389
00:21:45.178 --> 00:21:47.805
&gt;&gt; Speaker 2: Yes, well done to Alexa,
awesome work from Alexa.

390
00:21:47.805 --> 00:21:50.570
&gt;&gt; Speaker 1: [APPLAUSE]
&gt;&gt; Speaker 2: Exactly right.

391
00:21:50.570 --> 00:21:52.143
&gt;&gt; Speaker 1: Fantastic work from Alexa.

392
00:21:52.143 --> 00:21:55.863
&gt;&gt; Speaker 2: Our update DOM
execution context closes off, good.

393
00:21:55.863 --> 00:22:00.121
&gt;&gt; Speaker 1: Our update DOM function
has converted our underlying data into

394
00:22:00.121 --> 00:22:05.102
a full representation in JavaScript
instantiated with its actual data,

395
00:22:05.102 --> 00:22:08.634
in this case,
quite boring an empty string for now,

396
00:22:08.634 --> 00:22:13.777
that then produces through mapping over
that and running convert to convert

397
00:22:13.777 --> 00:22:19.751
each of these descriptions into actual DOM
elements and associated accessor objects.

398
00:22:19.751 --> 00:22:23.273
&gt;&gt; Speaker 2: We end up with,
once they're appended to the body or

399
00:22:23.273 --> 00:22:27.839
replaced existing children through
the spread of those elements,

400
00:22:27.839 --> 00:22:32.002
we end up with our full user
interface directly mirroring, or

401
00:22:32.002 --> 00:22:36.405
mirroring is a weird word for
it to suggest reflection, I guess,

402
00:22:36.405 --> 00:22:41.980
directly mapped from the JavaScript
description in lines 4 through 6.

403
00:22:41.980 --> 00:22:47.089
&gt;&gt; Speaker 1: And the data
instantiated representation of that,

404
00:22:47.089 --> 00:22:52.906
data implemented representation
of that in the DOM, yay.

