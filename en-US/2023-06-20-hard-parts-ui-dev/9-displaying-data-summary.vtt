WEBVTT

1
00:00:00.730 --> 00:00:02.200
Okay, good.

2
00:00:02.200 --> 00:00:03.980
So I think we're coming
to another wipe down.

3
00:00:03.980 --> 00:00:08.520
In a moment we will, yeah,
well, let's just summarize.

4
00:00:08.520 --> 00:00:15.930
Webcore gives JavaScript access
to the DOM and therefore pixels.

5
00:00:15.930 --> 00:00:16.600
That's not nothing.

6
00:00:16.600 --> 00:00:21.713
I should have said,
have you ever seen in any of the workshops

7
00:00:21.713 --> 00:00:26.620
us adding anything to the page,
the actual page ever?

8
00:00:26.620 --> 00:00:27.773
Never have we done it,

9
00:00:27.773 --> 00:00:31.520
because you just saw it ain't easy
to add a single piece of text.

10
00:00:31.520 --> 00:00:32.450
We've never touched it.

11
00:00:33.460 --> 00:00:38.171
However, fortunately, Webcore and with
the help Web IDL defining the DOM API or

12
00:00:38.171 --> 00:00:41.580
allowing DOM API to be described,
we do get access.

13
00:00:41.580 --> 00:00:43.552
Goal 1 with the display
content data to the user.

14
00:00:43.552 --> 00:00:47.612
With HTML, we did it in, I think we
dwelled on it too long, honestly, but

15
00:00:47.612 --> 00:00:49.070
we did it quickly.

16
00:00:49.070 --> 00:00:53.590
With JavaScript, it ain't so easy,
but we did get to create and

17
00:00:53.590 --> 00:00:57.940
store changeable mutable
data posts this high.

18
00:00:57.940 --> 00:01:01.522
Then we got a link to the actual
DOM element, the div,

19
00:01:01.522 --> 00:01:07.014
via using the object document that itself
has a link to the whole list of elements,

20
00:01:07.014 --> 00:01:12.611
where we ran the querySelector method that
allowed us to search this is an element.

21
00:01:12.611 --> 00:01:16.706
Retrieve not the actual element
back into JavaScript in a jsDiv,

22
00:01:16.706 --> 00:01:21.345
because we can't copy a C++ object
into JavaScript, not possible.

23
00:01:21.345 --> 00:01:24.372
Instead, we created a brand new object,
or JavaScript did for

24
00:01:24.372 --> 00:01:26.665
us with Crusader's help, in JavaScript.

25
00:01:26.665 --> 00:01:28.508
It was assigned to jsDiv, and

26
00:01:28.508 --> 00:01:33.415
that object was populated with a hidden
link to that list of elements in C++.

27
00:01:33.415 --> 00:01:37.760
No, incorrect, to the individual
element div in C++ in the DOM.

28
00:01:37.760 --> 00:01:41.437
And a bunch of methods in JavaScript or
properties, but

29
00:01:41.437 --> 00:01:46.367
they do a lot more than a regular
property, cuz as Ian rightly pointed out,

30
00:01:46.367 --> 00:01:51.220
a regular property would have assigned
the value of Hi post to textContent

31
00:01:51.220 --> 00:01:53.593
here in JavaScript on that object.

32
00:01:53.593 --> 00:01:58.343
But it ain't a regular object,
it's a special object that has

33
00:01:58.343 --> 00:02:03.093
these methods paying out to set
the value of the text on the C++

34
00:02:03.093 --> 00:02:07.860
element in the DOM to the value
of our content from JavaScript.

35
00:02:09.780 --> 00:02:12.570
People talk about declarative
versus imperative, or

36
00:02:12.570 --> 00:02:16.425
I would say descriptive versus imperative,
or easy versus a lot of steps.

37
00:02:16.425 --> 00:02:18.111
&gt;&gt; [LAUGH]
&gt;&gt; And my goodness,

38
00:02:18.111 --> 00:02:20.200
what do we think of JavaScript?

39
00:02:20.200 --> 00:02:24.510
What a wonderfully undeclarative,
undescriptive, unintuitive, and

40
00:02:24.510 --> 00:02:26.880
we're gonna spend the rest of our time.

41
00:02:26.880 --> 00:02:31.968
That's why the HTML is so important to
value, because it was all about doing it

42
00:02:31.968 --> 00:02:37.150
the way that we spend the rest of our time
in UI engineering trying to get back to.

43
00:02:38.180 --> 00:02:40.420
Describing on the page
what I wanna show up.

44
00:02:40.420 --> 00:02:44.200
Unfortunately, it was a one-time
description with no changeable data.

45
00:02:44.200 --> 00:02:47.910
Can I get back to that
with changeable data?

46
00:02:47.910 --> 00:02:51.253
By the way, I should say, side note,
things like web components try to do that

47
00:02:51.253 --> 00:02:54.700
without us having to build it
all out from scratch ourselves.

48
00:02:54.700 --> 00:02:58.440
Whether they take off fully or not, but
they're all trying to solve that problem.

49
00:02:58.440 --> 00:03:02.998
Describe the page like we did in HTML,
in ordered list down the page, but

50
00:03:02.998 --> 00:03:05.130
now we get changeable data.

51
00:03:05.130 --> 00:03:06.830
Do we get changeable data in HTML?

52
00:03:06.830 --> 00:03:07.890
Everybody, thumbs changeable?

53
00:03:07.890 --> 00:03:08.460
No, not thumbs.

54
00:03:08.460 --> 00:03:10.979
That's gonna ruin that meaning.

55
00:03:10.979 --> 00:03:14.054
Do we get changeable data in HTML?

56
00:03:14.054 --> 00:03:14.740
&gt;&gt; No.

57
00:03:14.740 --> 00:03:15.720
&gt;&gt; Yes, exactly.

58
00:03:15.720 --> 00:03:19.044
When I do that voice, it's often yes.

59
00:03:19.044 --> 00:03:24.750
Okay, use built-in property
methods to add the content.

60
00:03:24.750 --> 00:03:28.922
I say methods cuz they do more than just
set a local value in a key value pair,

61
00:03:28.922 --> 00:03:30.190
right, in an object.

62
00:03:30.190 --> 00:03:36.101
Instead they send a message out to set
through the link to the development.

63
00:03:36.101 --> 00:03:36.639
They cross the streams.

64
00:03:36.639 --> 00:03:40.866
I like to do a double line down
here really because it's between

65
00:03:40.866 --> 00:03:44.316
JavaScript runtime and
C++ runtime, exactly.

66
00:03:44.316 --> 00:03:48.396
And then DOM automatically displays
the content on the page itself,

67
00:03:48.396 --> 00:03:50.800
known as the views, what the user sees.

68
00:03:50.800 --> 00:03:54.295
Success, but so
much harder than &lt;div&gt;7&lt;div&gt;.

