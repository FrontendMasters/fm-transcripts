WEBVTT

1
00:00:00.140 --> 00:00:04.452
&gt;&gt; Speaker 1: So, the data to view
function is gonna have not only as we can

2
00:00:04.452 --> 00:00:09.023
see in line 8 and 9 there,
where we convert our data to our text

3
00:00:09.023 --> 00:00:13.104
content based on the underlying data,
whatever it is.

4
00:00:13.104 --> 00:00:20.005
We also based on our underlying data,
going to convert that data to the buckets,

5
00:00:20.005 --> 00:00:25.092
the containers that are gonna
have that data in on the view.

6
00:00:25.092 --> 00:00:28.921
Now, we can see the input is
unconditionally showing up every

7
00:00:28.921 --> 00:00:30.550
single time.

8
00:00:30.550 --> 00:00:32.690
That's not determined by posts.

9
00:00:32.690 --> 00:00:39.070
I mean, it is implicitly, if post is there
under all conditions, display JS input.

10
00:00:39.070 --> 00:00:41.710
Any state of post, display JS input.

11
00:00:41.710 --> 00:00:46.410
Any value in post, display JS input.

12
00:00:46.410 --> 00:00:51.334
JS div only display, if post is not will,

13
00:00:51.334 --> 00:00:58.230
if post is will JS div's
empty string won't display.

14
00:00:58.230 --> 00:01:02.326
We are explicitly making all of our view,
everything the user sees,

15
00:01:02.326 --> 00:01:04.930
dependent on underlying data.

16
00:01:04.930 --> 00:01:11.593
No hiding from that data, no hiding from
our data, yes, no hiding from our data,

17
00:01:11.593 --> 00:01:17.800
it's the cause of everything the user
can possibly see and change.

18
00:01:17.800 --> 00:01:21.545
Now it'd be fair, we could say, well,
hold on, if we know we're not gonna change

19
00:01:21.545 --> 00:01:24.665
input under any condition,
just put that back on the HTML directly.

20
00:01:24.665 --> 00:01:28.558
It starts to become like, firstly, who
knows, someone else on the team decided to

21
00:01:28.558 --> 00:01:32.229
actually do want to have the input field
under certain conditions be removed or

22
00:01:32.229 --> 00:01:35.975
added or whatever it might be or focus
state change on it or something like that.

23
00:01:35.975 --> 00:01:39.116
So, in the end,
one was everything we could change, but

24
00:01:39.116 --> 00:01:43.697
also it's like once you start going into
this mode, why not have a full description

25
00:01:43.697 --> 00:01:46.788
of what you wanna have
displayed within this function.

26
00:01:46.788 --> 00:01:51.639
Put it all there, single source of truth
for anything that can be changed and or

27
00:01:51.639 --> 00:01:56.860
is just being displayed viewed by
the user that depends on underlying data.

28
00:01:56.860 --> 00:01:59.936
Even if the underlying data is in
all conditions or the value of post,

29
00:01:59.936 --> 00:02:03.350
undefined, empty string, text in it,
always keep the input field there.

30
00:02:05.540 --> 00:02:07.915
Now, the other change we gonna make,

31
00:02:07.915 --> 00:02:11.340
the handle input function is being added,
no change.

32
00:02:12.550 --> 00:02:19.334
With this, we are going to have
to rather than have our input and

33
00:02:19.334 --> 00:02:23.952
div, they're automatically from HTML.

34
00:02:23.952 --> 00:02:29.249
Essentially implicitly starting with
div input as true as present and

35
00:02:29.249 --> 00:02:34.827
then switching them off, which now we
have to reason about their change.

36
00:02:34.827 --> 00:02:39.454
Instead, we're going to only create
them if we want to have them

37
00:02:39.454 --> 00:02:41.436
displayed at that moment.

38
00:02:41.436 --> 00:02:45.329
So now, we're not gonna have
HTML producing idea of an input,

39
00:02:45.329 --> 00:02:49.747
instead it's gonna be produced inside
the standard of view function.

40
00:02:49.747 --> 00:02:53.237
Meaning there's that
interesting line in line 12.

41
00:02:53.237 --> 00:02:55.716
I say interesting cuz it's
such a strange wording.

42
00:02:55.716 --> 00:03:00.948
I mean, I'm not gonna,
if you think anyway.

43
00:03:00.948 --> 00:03:06.785
We're going to take whatever
is currently on the page and

44
00:03:06.785 --> 00:03:12.744
then re-add it or add it or
not only based on the underlying

45
00:03:12.744 --> 00:03:19.210
data in that moment that the data
to view function is being run.

46
00:03:19.210 --> 00:03:24.155
So we're therefore using this
replace children method on the body

47
00:03:24.155 --> 00:03:29.378
getter setter property on the document
object that gives us a link to.

48
00:03:29.378 --> 00:03:35.348
We've kind of mastered from for now, but
all elements on our page are actually

49
00:03:35.348 --> 00:03:41.410
going to be children a sub elements of a
body object that describes the overall or

50
00:03:41.410 --> 00:03:45.319
represents the overall page
that the user can see.

51
00:03:45.319 --> 00:03:50.365
And what we're gonna do is have each of
input div and script technically be added

52
00:03:50.365 --> 00:03:56.070
or input in div technically be added as
sub elements as nested elements in body.

53
00:03:56.070 --> 00:04:01.271
And note, whereas with HTML,
we got to add them automatically to body,

54
00:04:01.271 --> 00:04:05.897
we didn't even say,
I probably should have said at some point.

55
00:04:05.897 --> 00:04:10.147
They got added automatically as children
of body and sub elements as nested

56
00:04:10.147 --> 00:04:13.656
elements of body and
therefore showed up inside of that page,

57
00:04:13.656 --> 00:04:17.846
right there sub elements of their nested
elements a body and this is body.

58
00:04:17.846 --> 00:04:20.629
Then these div in input show
up inside of it on the page.

59
00:04:21.720 --> 00:04:24.440
We did that automatically via HTML.

60
00:04:24.440 --> 00:04:28.919
With JavaScript we're gonna need
to manually add them as sub or

61
00:04:28.919 --> 00:04:32.840
nested elements,
which is replace children.

62
00:04:32.840 --> 00:04:36.615
If they're not yet on there, or there's
anything on there, replace children is

63
00:04:36.615 --> 00:04:41.390
adding, if there's already something on
there, it's switching out for the new.

64
00:04:41.390 --> 00:04:44.523
Okay, so we're gonna start walking through
this but Mark, do you wanna ask or

65
00:04:44.523 --> 00:04:46.006
do wanna have that question shared?

66
00:04:47.769 --> 00:04:51.657
&gt;&gt; Mark: I asked if they still
wanted their questions, I asked and

67
00:04:51.657 --> 00:04:53.280
nobody said anything.

68
00:04:53.280 --> 00:04:55.280
&gt;&gt; Speaker 1: Okay, yeah,
so we're doing thumbs.

69
00:04:55.280 --> 00:04:56.150
I'm so sorry.

70
00:04:56.150 --> 00:04:57.080
We got to do a whiteboard.

71
00:04:57.080 --> 00:04:58.180
Whiteboard wipe down.

72
00:04:58.180 --> 00:05:01.055
Let's have thumbs,
everyone's thumbs out for the big picture.

73
00:05:03.519 --> 00:05:06.568
&gt;&gt; Speaker 1: Why has got very cool,
very cool.

74
00:05:06.568 --> 00:05:08.720
Phil has a clarification, brilliant.

75
00:05:08.720 --> 00:05:12.570
Ian is a wonderful, I don't even
know how to do the fractions there.

76
00:05:12.570 --> 00:05:16.609
You've got 25% of 75%, excellent.

77
00:05:16.609 --> 00:05:17.649
I'm really pleased to see it.

78
00:05:17.649 --> 00:05:19.679
Paul's got some clarifications
just as he's got them.

79
00:05:19.679 --> 00:05:22.150
Beautiful, let's start with Phil's.

80
00:05:22.150 --> 00:05:26.353
&gt;&gt; Phil: Just a quick question on the
previous example that we just diagrammed

81
00:05:26.353 --> 00:05:29.614
with the remove function
[INAUDIBLE] remove method and

82
00:05:29.614 --> 00:05:32.594
then how that's updating
our actual C++ DOM.

83
00:05:32.594 --> 00:05:37.758
Now this may be kind of inconsequential
but the div that we removed,

84
00:05:37.758 --> 00:05:41.208
the structure of the DOM
after we removed it.

85
00:05:41.208 --> 00:05:47.990
Is it because we've transitioned that
div node to a different part of the DOM?

86
00:05:47.990 --> 00:05:50.871
Or is it because we've updated
a property associated with

87
00:05:50.871 --> 00:05:55.902
that div that indicates that this is no
longer actually being rendered to the DOM?

88
00:05:55.902 --> 00:05:57.479
&gt;&gt; Speaker 1: Wow, what a great question.

89
00:05:57.479 --> 00:06:04.496
We'd need to look at the actual
implementation of that to see.

90
00:06:04.496 --> 00:06:09.724
I would be curious, we have to
look at the exact implementation,

91
00:06:09.724 --> 00:06:14.382
but what we'll find is that
these sort of selector queries

92
00:06:14.382 --> 00:06:17.822
will not be searching for these elements.

93
00:06:17.822 --> 00:06:22.594
Would that imply the best way is to
remove, move a reference to it to

94
00:06:22.594 --> 00:06:26.869
somewhere else, or as you say,
set a flag of do not render.

95
00:06:26.869 --> 00:06:31.817
My question would be,
surely if it's still there,

96
00:06:31.817 --> 00:06:36.315
that every traversal
would require skipping,

97
00:06:36.315 --> 00:06:41.382
essentially, it would seem
unlikely that the best.

98
00:06:41.382 --> 00:06:43.393
But, it's interesting to think,

99
00:06:43.393 --> 00:06:46.481
because you'd have to imagine
the designers have assessed.

100
00:06:46.481 --> 00:06:50.280
If I'm asking for
the children of a, let's say,

101
00:06:50.280 --> 00:06:55.254
a set of a given DOM node, and
I'm going to have elements in that,

102
00:06:55.254 --> 00:07:00.699
that I'm gonna need to check should
I count them as relevant children.

103
00:07:00.699 --> 00:07:05.314
Or are they not actually children on
the tree directly on the actual displayed

104
00:07:05.314 --> 00:07:07.302
because they wouldn't show up,

105
00:07:07.302 --> 00:07:11.288
if you were to remove the children
will no longer include that div.

106
00:07:11.288 --> 00:07:16.155
Is it more performant and is it more
typical that we'd be needing to skip and

107
00:07:16.155 --> 00:07:21.352
it's more performant as well as skip when
we count how many children there are?

108
00:07:21.352 --> 00:07:25.614
Or is it more performant
have it fully removed so

109
00:07:25.614 --> 00:07:30.741
that we're not having to
re-evaluate that every time?

110
00:07:30.741 --> 00:07:33.950
But that's gonna be an implementation
decision of a designer.

111
00:07:33.950 --> 00:07:36.279
I think likely,
one would want to update the,

112
00:07:36.279 --> 00:07:41.150
they call this the tree that render tree
the elements that are gonna be displayed.

113
00:07:41.150 --> 00:07:46.509
I would imagine you're gonna wanna have
that mirror what's being displayed and

114
00:07:46.509 --> 00:07:48.097
unattached DOM nodes.

115
00:07:48.097 --> 00:07:52.928
Partly because if we don't have a label,
if we were to reassign JS div to

116
00:07:52.928 --> 00:07:57.841
an empty string, then this is now
gonna be automatically what's called

117
00:07:57.841 --> 00:08:01.405
garbage collected cuz at
that point it is no longer.

118
00:08:01.405 --> 00:08:06.318
Accessible from either JavaScript
because none of the querying will

119
00:08:06.318 --> 00:08:07.750
get reached to it.

120
00:08:07.750 --> 00:08:11.812
It's no longer on the list of
elements being displayed, so

121
00:08:11.812 --> 00:08:16.370
all of the document as a whole searches,
or can't reach it.

122
00:08:16.370 --> 00:08:20.527
Nor is it accessible via like trying
to find the you can use what's called

123
00:08:20.527 --> 00:08:25.028
traversal API methods that allow you to
look at sibling elements for example,

124
00:08:25.028 --> 00:08:27.130
look at the next element along.

125
00:08:27.130 --> 00:08:32.014
You can't reach the div from those once
it's not appended once it's been removed

126
00:08:32.014 --> 00:08:35.030
to us in all purposes, it's been removed.

127
00:08:35.030 --> 00:08:39.805
Except that because it still has
a job to reference, a label for

128
00:08:39.805 --> 00:08:46.021
it with a hidden link in order this is an
error it doesn't actually get deleted only

129
00:08:46.021 --> 00:08:52.286
when JSDF gets reassigned to let's say
an empty string or undefined or whatever.

130
00:08:52.286 --> 00:09:01.170
Will the C++ garbage collection remove
this underlying object in full.

131
00:09:01.170 --> 00:09:02.340
Great, let's have another.

132
00:09:02.340 --> 00:09:03.080
Yeah Mark, please.

133
00:09:06.310 --> 00:09:11.290
&gt;&gt; Mark: If input.value is automatically
returned by an HTML input.

134
00:09:11.290 --> 00:09:13.360
Why manually set it with JavaScript?

135
00:09:13.360 --> 00:09:18.400
Is there something?

136
00:09:18.400 --> 00:09:22.460
Or, yeah,
why manually set it with JavaScript?

137
00:09:22.460 --> 00:09:25.235
Are we leading up to something,
or did I miss the point?

138
00:09:25.235 --> 00:09:28.750
&gt;&gt; Speaker 1: [LAUGH] Are we?

139
00:09:28.750 --> 00:09:30.790
It was the word HTML there
that threw me slightly.

140
00:09:30.790 --> 00:09:31.770
So you can just.

141
00:09:31.770 --> 00:09:36.530
&gt;&gt; Mark: Input.value is automatically
returned by an HTML input.

142
00:09:36.530 --> 00:09:38.380
Why manually set it with JavaScript?

143
00:09:38.380 --> 00:09:41.360
Are we leading up to something
&gt;&gt; Speaker 1: That word is I'm losing

144
00:09:41.360 --> 00:09:42.750
the word HTML input?

145
00:09:42.750 --> 00:09:46.759
&gt;&gt; Phil: They're talking about
the forms API I think that uses C++

146
00:09:46.759 --> 00:09:50.089
inside the DOM to update the DOM
&gt;&gt; Speaker 1: To ensure that they are,

147
00:09:50.089 --> 00:09:54.045
[CROSSTALK] which is what we were talking
about yesterday, which is I assume what

148
00:09:54.045 --> 00:09:58.176
they're saying, right, is when we wrote
Will in here, when we wrote Ian in here,

149
00:09:58.176 --> 00:10:01.449
when we wrote John in here,
it shows up for the user immediately.

150
00:10:01.449 --> 00:10:05.620
In fact, it has right here on the DOM,
Will or Ian or

151
00:10:05.620 --> 00:10:11.360
John as a string on the DOM in C++
immediately, and the user sees it.

152
00:10:11.360 --> 00:10:14.340
We don't need to funnel it through
JavaScript to then re-display it.

153
00:10:14.340 --> 00:10:16.590
Why would we possibly do that?

154
00:10:16.590 --> 00:10:20.276
&gt;&gt; John: Isn't he talking about the change
that you made on input having in HTML

155
00:10:20.276 --> 00:10:22.930
versus putting it through JavaScript?

156
00:10:22.930 --> 00:10:23.750
&gt;&gt; Alexa: Like Create Element?

157
00:10:23.750 --> 00:10:24.842
&gt;&gt; John: Creating Elements?

158
00:10:24.842 --> 00:10:26.018
&gt;&gt; Speaker 1: Is that always saying?

159
00:10:26.018 --> 00:10:28.918
[INAUDIBLE] No, but they talked
about value, they're talking about

160
00:10:28.918 --> 00:10:31.570
the value- [INAUDIBLE] They talk
about the value gets a setter.

161
00:10:31.570 --> 00:10:33.200
I think that's also interesting.

162
00:10:33.200 --> 00:10:37.752
I think they're asking if Will is typed
in here or Ian is typed in here or

163
00:10:37.752 --> 00:10:39.870
Alexa is typing in here.

164
00:10:39.870 --> 00:10:42.858
Then it shows up for
the user right there and

165
00:10:42.858 --> 00:10:46.820
then why possibly did I go
about grabbing that data?

166
00:10:46.820 --> 00:10:51.743
And then redisplaying it on the DOM,
it was already there Well as we said

167
00:10:51.743 --> 00:10:54.862
yesterday before we closed up and
we did get,

168
00:10:54.862 --> 00:11:01.000
we dwelled on that again then if you
remember someone asked the same question.

169
00:11:01.000 --> 00:11:04.540
It's not a truth,
it's not a truth, it's a move.

170
00:11:04.540 --> 00:11:07.873
It's because now I am 100% sure.

171
00:11:07.873 --> 00:11:10.810
I can totally not make that update.

172
00:11:10.810 --> 00:11:16.309
I could totally have
&gt;&gt; Speaker 1: I could

173
00:11:16.309 --> 00:11:22.351
totally have in my handler input,
only updated the divs text content,

174
00:11:22.351 --> 00:11:27.300
because that's the only thing
that needed to be updated.

175
00:11:27.300 --> 00:11:32.245
That was already said Will,
already said Ian, already said John,

176
00:11:32.245 --> 00:11:35.215
already said Alexa, I already said it.

177
00:11:35.215 --> 00:11:41.245
However, when you've got thousands
of elements on the page, and

178
00:11:41.245 --> 00:11:48.134
I have to work out in every single user
action which bit to update on the page,

179
00:11:48.134 --> 00:11:53.370
in which handler,
it's not that I can't, I can.

180
00:11:53.370 --> 00:11:56.720
Exactly as the person in the audience is
raising, our friend in the audience is

181
00:11:56.720 --> 00:12:00.370
raising, that I absolutely can't,
I could just leave it as it was.

182
00:12:00.370 --> 00:12:03.730
But now I have to up my reasoning.

183
00:12:03.730 --> 00:12:07.174
I have to work out which
bit under which condition

184
00:12:07.174 --> 00:12:12.220
under which behavior by the user do
I need to update here in the DOM?

185
00:12:12.220 --> 00:12:16.900
Do I need to update the div or only the
input or only the input or only the div?

186
00:12:16.900 --> 00:12:18.620
I don't wanna think about it.

187
00:12:18.620 --> 00:12:22.704
Instead, I only want to have
some underlying data and

188
00:12:22.704 --> 00:12:28.789
then one single function that always
updates all possible dependent content,

189
00:12:28.789 --> 00:12:33.060
even if actually nothing
was needed to be updated.

190
00:12:33.060 --> 00:12:34.530
Even if actually nothing changed.

191
00:12:34.530 --> 00:12:37.416
I would also say to our
friend in the audience,

192
00:12:37.416 --> 00:12:40.900
why did I initially set text
context to an empty string?

193
00:12:40.900 --> 00:12:45.500
Why did I initially set a value
of the input to an empty string?

194
00:12:45.500 --> 00:12:50.210
That was empty anyway, and
these were default empty.

195
00:12:50.210 --> 00:12:54.888
I did it because I don't want to have
anything displayed that is not a direct

196
00:12:54.888 --> 00:12:59.990
consequence of a piece of data in
JavaScript, in this case, post.

197
00:12:59.990 --> 00:13:00.590
And why?

198
00:13:02.490 --> 00:13:08.400
For the simple, slash not,
reasoning freedom it gives me.

199
00:13:08.400 --> 00:13:11.401
That now I know that everything
the user sees can be

200
00:13:11.401 --> 00:13:14.250
directly tracked back to a piece of data.

201
00:13:14.250 --> 00:13:15.920
And where's it determined from?

202
00:13:17.090 --> 00:13:22.760
One function, one function that can
handle any possible piece of data.

203
00:13:22.760 --> 00:13:26.414
Any possible state of the world in
this case a state of application,

204
00:13:26.414 --> 00:13:30.120
not from some handler,
which actually we've got back here.

205
00:13:30.120 --> 00:13:33.267
Here, we're back to our
handler handle input,

206
00:13:33.267 --> 00:13:38.570
being a source of truth being a place
that determines what the user sees.

207
00:13:38.570 --> 00:13:43.900
Now we're determining whether a JSDF
is there or not from a handler.

208
00:13:44.920 --> 00:13:47.370
Not from our JavaScript data.

209
00:13:49.160 --> 00:13:51.870
In that case, we are in a tough place.

210
00:13:51.870 --> 00:13:56.604
We want one place, one function that
can funnel all of our action through,

211
00:13:56.604 --> 00:14:00.010
all of our change to
the user's view through.

212
00:14:00.010 --> 00:14:05.000
If the question was instead,
why are we in our code?

213
00:14:05.000 --> 00:14:06.330
We're about to do now?

214
00:14:06.330 --> 00:14:08.600
Why are we also creating our input there?

215
00:14:08.600 --> 00:14:10.028
When that doesn't change,

216
00:14:10.028 --> 00:14:13.960
under no circumstances is there
not an input field in this code?

217
00:14:13.960 --> 00:14:17.745
Well, as I say, firstly, someone
else on our team could go, actually,

218
00:14:17.745 --> 00:14:19.010
you know what?

219
00:14:19.010 --> 00:14:25.737
I think if the user types will twice,
we're gonna make input disappear.

220
00:14:25.737 --> 00:14:28.740
They need to really learn
to stop trying to type.

221
00:14:28.740 --> 00:14:29.390
I don't know.

222
00:14:29.390 --> 00:14:31.657
But then that means input could be,

223
00:14:31.657 --> 00:14:35.210
it's part of the view that
can be changed by the user.

224
00:14:35.210 --> 00:14:37.300
In theory,
we might want to enable it to be.

225
00:14:37.300 --> 00:14:41.165
So put it all anything that could
possibly be changed by the user,

226
00:14:41.165 --> 00:14:44.270
put it all in one function
that would depend on data.

227
00:14:44.270 --> 00:14:48.752
In this case, the dependence is
post has any state, any value,

228
00:14:48.752 --> 00:14:51.220
and still input will be created.

229
00:14:51.220 --> 00:14:54.550
But it's still post has a value and
input is created.

230
00:14:54.550 --> 00:14:59.088
It's a mental framework for thinking
about how to structure this relationship

231
00:14:59.088 --> 00:15:02.280
between data and
view you know what it's gonna be?

232
00:15:02.280 --> 00:15:06.836
It's gonna be everything the user sees
must be associated with some underlying

233
00:15:06.836 --> 00:15:07.992
modeled out data and

234
00:15:07.992 --> 00:15:12.590
then the user when they take action
gets to submit changes to that.

235
00:15:12.590 --> 00:15:14.056
We write the code to do so,

236
00:15:14.056 --> 00:15:18.710
the view gets updated every single time
based on just that data, nothing else.

237
00:15:18.710 --> 00:15:23.003
No handler, randomly changing the view,
meaning we know exactly when the change is

238
00:15:23.003 --> 00:15:25.370
happening inside that
data to view function.

239
00:15:25.370 --> 00:15:26.898
And that's where we're
going to come to now.

240
00:15:26.898 --> 00:15:28.250
That's what I'm doing now.

241
00:15:28.250 --> 00:15:30.670
Yeah we've had some more thumbs
here please Ian, go ahead.

242
00:15:30.670 --> 00:15:33.316
&gt;&gt; Ian: Couple questions,
first one is for document body

243
00:15:33.316 --> 00:15:36.006
replace children on the slide that-
&gt;&gt; Speaker 1: Yeah we're about

244
00:15:36.006 --> 00:15:36.660
to go to that one.

245
00:15:36.660 --> 00:15:39.460
So I'll probably through
questions too after we've actually

246
00:15:39.460 --> 00:15:40.578
diagrammed this slide.

247
00:15:40.578 --> 00:15:46.079
&gt;&gt; Phil: Okay one quick clarification from
chat on this They said there's a notion

248
00:15:46.079 --> 00:15:51.492
between controlled or uncontrolled inputs,
especially in react where

249
00:15:51.492 --> 00:15:57.349
controlled is where you're kind of
having JavaScript take over everything,

250
00:15:57.349 --> 00:16:03.226
whereas in uncontrolled is essentially
the event handler Does its work here?

251
00:16:03.226 --> 00:16:04.930
&gt;&gt; Speaker 1: Yeah.
&gt;&gt; Phil: Changes it fires

252
00:16:04.930 --> 00:16:05.551
&gt;&gt; Speaker 1: Exactly, and

253
00:16:05.551 --> 00:16:07.730
it does the work directly here and
the user sees.

254
00:16:07.730 --> 00:16:10.015
Or are we going to kind
of take control and

255
00:16:10.015 --> 00:16:12.720
update what the user sees from our data?

256
00:16:12.720 --> 00:16:16.143
And that's where,
as we go through UI hard parts,

257
00:16:16.143 --> 00:16:21.155
remember that a framework in full,
is gonna go, is gonna be full of smart,

258
00:16:21.155 --> 00:16:25.614
intelligent engineers in different teams,
saying, excuse me,

259
00:16:25.614 --> 00:16:30.706
in this edge case, could you just your
library to be able to give us the chance

260
00:16:30.706 --> 00:16:35.563
to sometimes directly overwrite what
the user did and see their typing as

261
00:16:35.563 --> 00:16:40.465
a submission that we then replace
with the actual data from JavaScript?

262
00:16:40.465 --> 00:16:43.242
And sometimes let them do it directly and

263
00:16:43.242 --> 00:16:47.010
let us have control over
whether we do that.

264
00:16:47.010 --> 00:16:49.900
And those are the evolutions of libraries.

265
00:16:49.900 --> 00:16:54.908
One of the reasons why, as a library
becomes like React, something used by like

266
00:16:54.908 --> 00:16:59.571
tens of thousands of large engineering
teams, they can start to become.

267
00:16:59.571 --> 00:17:04.284
I mean, they're just fascinating quite
heavy lifts, as engineering teams,

268
00:17:04.284 --> 00:17:08.434
to maintain them, because they
are handling different edge cases for

269
00:17:08.434 --> 00:17:13.781
every possible scenario, for scale teams,
meaning implementation details like this,

270
00:17:13.781 --> 00:17:16.625
or not even implementation
details like this.

271
00:17:16.625 --> 00:17:21.703
Sorry, not even edge cases, control being
given to the developer to determine,

272
00:17:21.703 --> 00:17:26.710
do they want to have the library behave
one way or a different way becomes.

273
00:17:26.710 --> 00:17:30.899
And that's where libraries can
become bloated, but by nature.

274
00:17:30.899 --> 00:17:34.458
They kinda have to be because
they're dealing with so

275
00:17:34.458 --> 00:17:39.600
many different versions of engineering
teams with different goals.

276
00:17:39.600 --> 00:17:41.330
Alexa, go ahead.

277
00:17:41.330 --> 00:17:43.077
Ian, did you get your,
do you want to just,

278
00:17:43.077 --> 00:17:44.930
I know you were just about
to start a question.

279
00:17:44.930 --> 00:17:47.583
It's about replace children,
we'll hold it till after.

280
00:17:47.583 --> 00:17:51.000
&gt;&gt; Ian: Yeah, the other question was
about, like, DOM Node Purgatory.

281
00:17:51.000 --> 00:17:52.103
&gt;&gt; Speaker 1: Yes [LAUGH].

282
00:17:52.103 --> 00:17:53.170
&gt;&gt; Ian: Can they.

283
00:17:53.170 --> 00:17:56.318
&gt;&gt; Speaker 1: Ian's going to be in
charge of writing the catchy names for

284
00:17:56.318 --> 00:17:57.185
these things.

285
00:17:57.185 --> 00:18:00.881
&gt;&gt; Ian: [LAUGH] Do you know off the top
of your head if they're query-able,

286
00:18:00.881 --> 00:18:05.634
searchable, reference-able, or is the only
way you can access them by the access or

287
00:18:05.634 --> 00:18:07.440
object you have in JS?

288
00:18:07.440 --> 00:18:08.855
&gt;&gt; Speaker 1: Correct, correct.

289
00:18:08.855 --> 00:18:10.250
Yes, Alexa.

290
00:18:10.250 --> 00:18:14.595
&gt;&gt; Alexa: It was on the note of
the inputs, even in our case here,

291
00:18:14.595 --> 00:18:15.778
is that
&gt;&gt; Speaker 1: Right.

292
00:18:15.778 --> 00:18:19.795
&gt;&gt; Alexa: If you wanted to make the the
choice of not storing the input value in

293
00:18:19.795 --> 00:18:24.675
our JavaScript until the user presses
the Enter key, or clicks a submit button,

294
00:18:24.675 --> 00:18:25.635
or something?

295
00:18:25.635 --> 00:18:27.531
&gt;&gt; Speaker 1: Perfect.
That would be a perfect case where,

296
00:18:27.531 --> 00:18:29.805
why do we need to have
underlying data associated?

297
00:18:29.805 --> 00:18:32.357
And that's right, people, where, remember,

298
00:18:32.357 --> 00:18:36.331
we're dealing here with minimizing our
complexity with our diagrams here.

299
00:18:36.331 --> 00:18:38.228
And in reality, there are.

300
00:18:38.228 --> 00:18:43.760
And in this case here, we can just
change our handler and what it does.

301
00:18:43.760 --> 00:18:48.351
But once you have a framework, any of the
things we're doing here will be written up

302
00:18:48.351 --> 00:18:51.600
as functions that are built
by the framework to run.

303
00:18:51.600 --> 00:18:53.360
And suddenly you don't have that freedom.

304
00:18:53.360 --> 00:18:57.083
And that's where the pull request goes
into the GitHub repo of the open source

305
00:18:57.083 --> 00:19:01.207
library and says, hey, excuse me, can you
make this function take another argument

306
00:19:01.207 --> 00:19:05.331
that determines whether or not we're going
to actually update the underlying data or

307
00:19:05.331 --> 00:19:08.940
let this happen directly and not
associate any data in JavaScript with it,

308
00:19:08.940 --> 00:19:12.010
until maybe the user presses Enter,
for example, yeah.

309
00:19:12.010 --> 00:19:14.230
And that's a library design decision.

310
00:19:14.230 --> 00:19:18.634
And the point of all these libraries, and
that's why when I say one-way data binding

311
00:19:18.634 --> 00:19:22.917
is standard, sure, slash three or four
other different ways it can be implemented

312
00:19:22.917 --> 00:19:26.464
in every one of those libraries,
because libraries end up having one

313
00:19:26.464 --> 00:19:30.317
defining way of doing something that
the creators see as being the sort of,

314
00:19:30.317 --> 00:19:35.390
not best practice, even, per se, but the
paradigmatic standard within a library.

315
00:19:35.390 --> 00:19:38.290
That's the paradigm of one-way data.

316
00:19:38.290 --> 00:19:42.470
It's a paradigm of, I don't know,
unidirectional data flow or

317
00:19:42.470 --> 00:19:47.258
a given library, but you can also have
all the other ways somewhat possible

318
00:19:47.258 --> 00:19:52.350
within these libraries because they kind
of want to be the best of everything for

319
00:19:52.350 --> 00:19:54.717
everybody once they get big enough.

320
00:19:54.717 --> 00:19:56.874
Because it's like any app, right?

321
00:19:56.874 --> 00:20:01.033
The notion of a Photoshop has to
handle all the legacy user needs,

322
00:20:01.033 --> 00:20:03.529
has probably a vision originally, but

323
00:20:03.529 --> 00:20:08.310
in the end bolts on 400 other features,
and the coherence starts to go.

324
00:20:08.310 --> 00:20:10.120
But I wouldn't blame them for that.

325
00:20:10.120 --> 00:20:12.910
That's the nature of serving
millions of different users,

326
00:20:12.910 --> 00:20:15.200
each with their own historic priorities.

327
00:20:15.200 --> 00:20:15.810
Paul.

328
00:20:17.240 --> 00:20:18.590
&gt;&gt; Paul: In the new slide.

329
00:20:18.590 --> 00:20:19.130
&gt;&gt; Speaker 1: Yeah, yeah, okay.

330
00:20:19.130 --> 00:20:21.950
We're going to walk through this code.

331
00:20:21.950 --> 00:20:24.167
&gt;&gt; Paul: And it may be answered
by your walkthrough, but

332
00:20:24.167 --> 00:20:25.451
&gt;&gt; Speaker 1: Yeah, good to [CROSSTALK]

333
00:20:25.451 --> 00:20:26.940
&gt;&gt; Paul: And I'm getting in the weeds.

334
00:20:26.940 --> 00:20:30.748
The jsDiv,
if it will be set to a string or

335
00:20:30.748 --> 00:20:36.013
an empty string, and
then you do jsDiv.textcontent,

336
00:20:36.013 --> 00:20:42.120
there is no .text content on
an empty string, is there?

337
00:20:42.120 --> 00:20:43.284
&gt;&gt; Phil: Isn't a string an object?

338
00:20:43.284 --> 00:20:45.225
You can just assign any property to it?

339
00:20:45.225 --> 00:20:50.010
&gt;&gt; Speaker 1: Mm-hmm.

340
00:20:50.010 --> 00:20:50.845
&gt;&gt; Phil: Is it too primitive?

341
00:20:50.845 --> 00:20:55.720
&gt;&gt; Speaker 1: [CROSSTALK] I think,
let's walk through it.

342
00:20:55.720 --> 00:20:57.020
Let's see how it plays out.

343
00:20:57.020 --> 00:21:00.310
Let's see how it plays out.

344
00:21:00.310 --> 00:21:06.710
Let's see how it plays out, and
that could be a problem with this,

345
00:21:06.710 --> 00:21:11.739
but let's see how it plays out,
because I think it is

346
00:21:11.739 --> 00:21:16.680
handle-able with the code
as it's implemented.

347
00:21:16.680 --> 00:21:18.290
But again, let's see how it plays out.

348
00:21:19.490 --> 00:21:21.280
All right,
let's do a wipe down on that note.

349
00:21:21.280 --> 00:21:25.233
We're about to walk through a full
UI component that converts.

350
00:21:25.233 --> 00:21:29.010
Component's gonna turn out
to be a funny old word.

351
00:21:29.010 --> 00:21:33.550
It refers to a function that associates,

352
00:21:33.550 --> 00:21:38.740
describes, captures in
full the relationship

353
00:21:38.740 --> 00:21:43.282
between underlying data in JavaScript,

354
00:21:43.282 --> 00:21:48.150
in this case post and what the user sees.

355
00:21:48.150 --> 00:21:53.314
That is a component, a full route through,
a full pipeline through,

356
00:21:53.314 --> 00:21:57.720
from some underlying data
through to what the user sees.

357
00:21:57.720 --> 00:22:03.193
It is a, I guess, description in whole
of the content, what the user sees,

358
00:22:03.193 --> 00:22:08.835
how it depends on underlying data, and
how the user is able to act on that data,

359
00:22:08.835 --> 00:22:13.623
sorry, act on what they see,
click on it, and change data that's

360
00:22:13.623 --> 00:22:19.130
then gonna update what the user sees,
the content, via a handler.

361
00:22:19.130 --> 00:22:21.740
This is gonna be a full UI component.

362
00:22:21.740 --> 00:22:26.870
It's only taken us [LAUGH] But hey, at
least we definitely know what it's doing.

363
00:22:26.870 --> 00:22:27.518
All right.

