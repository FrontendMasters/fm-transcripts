WEBVTT

1
00:00:00.190 --> 00:00:04.866
Now, I update DOMs off the call stack,
user takes action.

2
00:00:04.866 --> 00:00:10.811
Let's get the user taking some
action because it's time people for

3
00:00:10.811 --> 00:00:15.929
some user input, and
the thing they're gonna do is type.

4
00:00:15.929 --> 00:00:19.916
So why we're having the user type and

5
00:00:19.916 --> 00:00:24.936
they are gonna type,
let's have them type Y.

6
00:00:24.936 --> 00:00:29.717
So then I only type y, y shows up,
everything in green is user action,

7
00:00:29.717 --> 00:00:31.267
value is updated to y.

8
00:00:31.267 --> 00:00:35.180
As our friend online said, hold on, excuse
me, why do I need to then update a value?

9
00:00:35.180 --> 00:00:40.829
Well, right now for our benefit in terms
of structure of our code, see there's

10
00:00:40.829 --> 00:00:46.414
only as a brief submission by the user
to please go update the JavaScript data.

11
00:00:46.414 --> 00:00:49.272
And then assume once it's updated,

12
00:00:49.272 --> 00:00:53.236
here our giant converter
will throw that all back,

13
00:00:53.236 --> 00:00:58.400
our VDOM will evaluate to a full
description with this inserted and

14
00:00:58.400 --> 00:01:02.662
evaluated, and display update,
what the user sees.

15
00:01:02.662 --> 00:01:03.712
How do we have that happen?

16
00:01:03.712 --> 00:01:07.163
How do we even trigger JavaScript
code to run from user action?

17
00:01:07.163 --> 00:01:10.455
Via a handler, our function handle here,

18
00:01:10.455 --> 00:01:15.666
using the incredible event feature
of the DOM, the vital feature,

19
00:01:15.666 --> 00:01:19.796
if you're not allowed to
run code directly in C++.

20
00:01:19.796 --> 00:01:23.832
And regardless, when you don't know
when a user's gonna take an action,

21
00:01:23.832 --> 00:01:28.266
you need to have a structure whereby you
can trigger code to execute, which we do.

22
00:01:28.266 --> 00:01:30.832
And so this was already
off the call stack, sorry.

23
00:01:30.832 --> 00:01:36.903
And now talk me through,
who's, I don't know.

24
00:01:36.903 --> 00:01:38.353
Well, all I wanna know is why,
talk me through?

25
00:01:38.353 --> 00:01:39.200
Sorry, why?

26
00:01:39.200 --> 00:01:42.137
Talk me through, what's gonna happen?

27
00:01:42.137 --> 00:01:44.872
&gt;&gt; The function definition handle
gets put onto the callback queue.

28
00:01:44.872 --> 00:01:45.735
&gt;&gt; Beautiful.

29
00:01:45.735 --> 00:01:48.091
&gt;&gt; Gets pulled off of it and
put onto the call stack.

30
00:01:48.091 --> 00:01:49.031
&gt;&gt; Yeah, absolutely.

31
00:01:49.031 --> 00:01:50.966
&gt;&gt; Gets those pink parens.

32
00:01:50.966 --> 00:01:51.669
&gt;&gt; I love it.

33
00:01:51.669 --> 00:01:56.277
The pink parens representing our friend
JavaScript, taking a lead here and

34
00:01:56.277 --> 00:01:58.227
adding those, there they are.

35
00:01:58.227 --> 00:01:59.087
And -.

36
00:01:59.087 --> 00:02:02.014
&gt;&gt; The thread will then
invoke the handle function.

37
00:02:02.014 --> 00:02:03.799
&gt;&gt; I love that, yep.

38
00:02:03.799 --> 00:02:07.877
And create a new what, why?

39
00:02:07.877 --> 00:02:09.126
&gt;&gt; Execution content.

40
00:02:09.126 --> 00:02:09.918
&gt;&gt; Yeah.

41
00:02:09.918 --> 00:02:13.352
&gt;&gt; [LAUGH]
&gt;&gt; Exactly.

42
00:02:13.352 --> 00:02:17.814
And it's really basic what it does
because all it's gonna do is update data,

43
00:02:17.814 --> 00:02:21.674
it's not allowed to do anything else,
so taught me through that.

44
00:02:21.674 --> 00:02:22.889
&gt;&gt; Yeah, absolutely.

45
00:02:22.889 --> 00:02:27.325
It goes to the JS input accessor object,

46
00:02:27.325 --> 00:02:33.595
looks up the value key or
calls the getter setter method.

47
00:02:33.595 --> 00:02:36.933
&gt;&gt; Yeah, even now it's worth
being as crisp as possible,

48
00:02:36.933 --> 00:02:39.642
exactly which is gonna
retrieve what value?

49
00:02:39.642 --> 00:02:41.519
&gt;&gt; That string, the letter Y.

50
00:02:41.519 --> 00:02:46.103
&gt;&gt; Y, exactly, which is gonna
be saved as a JavaScript string

51
00:02:46.103 --> 00:02:50.884
into our global label,
our global data name, is that right?

52
00:02:50.884 --> 00:02:51.780
Yeah, perfect.

53
00:02:51.780 --> 00:02:54.629
&gt;&gt; That is the only thing that
happens in response to the user input.

54
00:02:54.629 --> 00:02:55.214
&gt;&gt; Perfect.

55
00:02:55.214 --> 00:02:57.582
&gt;&gt; But 15 milliseconds later.

56
00:02:57.582 --> 00:03:00.075
&gt;&gt; Exactly.
So it handles off the call stack,

57
00:03:00.075 --> 00:03:04.882
it's finished doing its only job from
the user, and these again are not trues,

58
00:03:04.882 --> 00:03:06.628
they're just approaches.

59
00:03:06.628 --> 00:03:07.494
There you go.

60
00:03:07.494 --> 00:03:11.524
&gt;&gt; [LAUGH]
&gt;&gt; They're just approaches to thinking

61
00:03:11.524 --> 00:03:15.488
about how to structure code when it is so
with two elements,

62
00:03:15.488 --> 00:03:17.329
tricky to follow the flow.

63
00:03:17.329 --> 00:03:20.250
But I can think we can see with two
elements at least here where we have

64
00:03:20.250 --> 00:03:23.020
a full description and
the data is anything the user can change,

65
00:03:23.020 --> 00:03:24.833
full description being this array here.

66
00:03:24.833 --> 00:03:29.138
Well, the description,
I guess is generically in the code, but

67
00:03:29.138 --> 00:03:33.993
it evaluates to a full data-driven
description here in the actual memory

68
00:03:33.993 --> 00:03:37.930
becomes a lot prettier to track
your head around, I think.

69
00:03:37.930 --> 00:03:42.553
So as you say, why have I update DOM?

70
00:03:42.553 --> 00:03:43.451
Tell me what's gonna happen there.

71
00:03:43.451 --> 00:03:46.679
Please do keep interrupting me
because you're doing a great job.

72
00:03:46.679 --> 00:03:47.414
&gt;&gt; Yeah, absolutely.

73
00:03:47.414 --> 00:03:50.102
So yeah, 15 milliseconds later,

74
00:03:50.102 --> 00:03:54.524
we get the update DOM function
put onto the callback queue and

75
00:03:54.524 --> 00:04:00.868
then immediately brought onto the call
stack, assuming there's a user interrupts.

76
00:04:00.868 --> 00:04:03.203
From there, it gets the pink params,
it gets invoked.

77
00:04:03.203 --> 00:04:06.579
&gt;&gt; Yeah, you are doing a great job.

78
00:04:06.579 --> 00:04:09.880
Brilliant update DOM
&gt;&gt; Should I go into the update DOM?

79
00:04:09.880 --> 00:04:11.890
&gt;&gt; Yeah, let's do it.

80
00:04:11.890 --> 00:04:17.391
And if you want to leave the chorus,
I said just go ahead.

81
00:04:17.391 --> 00:04:19.101
A brand new, everybody.

82
00:04:19.101 --> 00:04:21.022
&gt;&gt; Execution context.

83
00:04:21.022 --> 00:04:24.441
&gt;&gt; Exactly.

84
00:04:24.441 --> 00:04:28.773
For people who are bored of that online,
I really don't blame you,

85
00:04:28.773 --> 00:04:31.209
simple pleasures for me, I suppose.

86
00:04:31.209 --> 00:04:33.496
There it is.

87
00:04:33.496 --> 00:04:35.286
There we go.

88
00:04:35.286 --> 00:04:40.165
So update DOM brand new execution context,
first thing it does is, well,

89
00:04:40.165 --> 00:04:44.122
keep me going actually while
you're helping my brain here.

90
00:04:44.122 --> 00:04:44.786
Thank you.

91
00:04:44.786 --> 00:04:47.959
&gt;&gt; It invokes the createvDOM function and

92
00:04:47.959 --> 00:04:53.066
then assigns the return value
to the closure in VDOM variable.

93
00:04:53.066 --> 00:04:53.744
&gt;&gt; Yeah.

94
00:04:53.744 --> 00:04:55.659
Well, we're not closing in here,
right, we're doing the global,

95
00:04:55.659 --> 00:04:56.609
we're avoiding doing anything.

96
00:04:56.609 --> 00:04:57.342
Did you say closure?

97
00:04:57.342 --> 00:04:58.409
Yeah, exactly.

98
00:04:58.409 --> 00:05:01.012
We are not having to deal with that,
we're doing an in global for everything.

99
00:05:01.012 --> 00:05:05.003
So it's gonna reassign, it's gonna
wipe this, we could archive this.

100
00:05:05.003 --> 00:05:09.696
Imagine we archive this,
then we'd know exactly what changed

101
00:05:09.696 --> 00:05:14.659
between our two different states,
the two different user actions

102
00:05:14.659 --> 00:05:19.192
cuz the only way that a user
actually can affect is via state.

103
00:05:19.192 --> 00:05:22.290
So we'd have a full history
in every version of this.

104
00:05:22.290 --> 00:05:23.860
That's kind of cool, right?

105
00:05:23.860 --> 00:05:26.994
And what if we can use that at
some later point, but for now,

106
00:05:26.994 --> 00:05:28.390
let's just get rid of it.

107
00:05:28.390 --> 00:05:33.025
A bit wasteful of us, but I feel like we
could definitely use the information there

108
00:05:33.025 --> 00:05:37.546
about what actually changed in terms of
the real page, but we're not going to.

109
00:05:37.546 --> 00:05:40.528
So we're gonna reassign to
vDOM exactly as before,

110
00:05:40.528 --> 00:05:42.916
it's gonna create that array of arrays.

111
00:05:42.916 --> 00:05:47.516
This time,
it's telling me the evaluated result

112
00:05:47.516 --> 00:05:51.468
of it based on this data
where name is now y.

113
00:05:51.468 --> 00:05:53.858
&gt;&gt; It gives us a two-dimensional array?

114
00:05:53.858 --> 00:05:54.882
&gt;&gt; Yep.

115
00:05:54.882 --> 00:06:01.779
&gt;&gt; The first item or the zero index
item is an array with the items and

116
00:06:01.779 --> 00:06:09.580
the string input name which currently
is just the letter y, the string.

117
00:06:09.580 --> 00:06:10.939
&gt;&gt; Exactly.

118
00:06:10.939 --> 00:06:12.236
And -.

119
00:06:12.236 --> 00:06:16.172
&gt;&gt; And always difficult isn't with
user actions, it's not in the code,

120
00:06:16.172 --> 00:06:20.645
it's an outsider system input, and it
came in here with the string y, perfect.

121
00:06:20.645 --> 00:06:21.776
And then -.

122
00:06:21.776 --> 00:06:25.549
&gt;&gt; And then the final item in that
first array is the handle function.

123
00:06:25.549 --> 00:06:28.618
&gt;&gt; Brilliant, which the way we wrote our
convert, will then become our handler.

124
00:06:28.618 --> 00:06:30.818
And that's just the way we
wrote our convert function, and

125
00:06:30.818 --> 00:06:32.986
true about this again,
it's just the way we did it and then

126
00:06:32.986 --> 00:06:34.386
&gt;&gt; And then -.

127
00:06:34.386 --> 00:06:39.573
&gt;&gt; And then the second and final Item in
the array is another array with two items,

128
00:06:39.573 --> 00:06:41.466
the first, the string div.

129
00:06:41.466 --> 00:06:43.407
&gt;&gt; Yep.
&gt;&gt; The second is the interpolated

130
00:06:43.407 --> 00:06:44.307
string, hello y.

131
00:06:44.307 --> 00:06:45.506
&gt;&gt; Yes, exactly.

132
00:06:45.506 --> 00:06:51.777
We don't leave it as just a template
literal, we evaluate it, and therefore,

133
00:06:51.777 --> 00:06:57.974
we get a real data updated rendition of
what's gonna show up on the DOM itself.

134
00:06:57.974 --> 00:06:58.502
Beautiful.

135
00:06:58.502 --> 00:07:02.378
We're able to do that because there's
nothing that's gonna be here that isn't

136
00:07:02.378 --> 00:07:04.661
described in JavaScript
based off our states.

137
00:07:04.661 --> 00:07:09.924
So, we have done why our createVDom
call that has reproduced

138
00:07:09.924 --> 00:07:14.578
our description with
the latest data in JavaScript.

139
00:07:14.578 --> 00:07:20.306
And so why, what do we do with that
updated description of our elements?

140
00:07:20.306 --> 00:07:24.757
To the way
&gt;&gt; We pass the first of the two items in

141
00:07:24.757 --> 00:07:29.059
the VDOM array to the function convert,
and

142
00:07:29.059 --> 00:07:34.771
we'll assign the output of
that to the JS input variable.

143
00:07:34.771 --> 00:07:35.556
The convert function -.

144
00:07:35.556 --> 00:07:40.790
&gt;&gt; Well, yeah,
I'm sure we can do this by analogical way.

145
00:07:40.790 --> 00:07:41.892
Maybe not.
Maybe not.

146
00:07:41.892 --> 00:07:43.071
Maybe not. Maybe not.
What am I talking about?

147
00:07:43.071 --> 00:07:45.668
No, we're gonna do it in full.

148
00:07:45.668 --> 00:07:46.513
Now the whole thing.

149
00:07:46.513 --> 00:07:52.454
VDOM position 0 is at input y and

150
00:07:52.454 --> 00:07:55.759
handle, right?

151
00:07:55.759 --> 00:08:01.367
&gt;&gt; Input y and handle function.

152
00:08:01.367 --> 00:08:02.638
Yep, perfect.

153
00:08:02.638 --> 00:08:05.482
And that's going to what?

154
00:08:05.482 --> 00:08:07.171
Or talk me through why you do a great job.

155
00:08:07.171 --> 00:08:13.021
&gt;&gt; So yeah, it's going to
create inside of the function

156
00:08:13.021 --> 00:08:18.361
a new JavaScript successor object and
DOM node.

157
00:08:18.361 --> 00:08:19.670
&gt;&gt; Yes, what did I say?

158
00:08:19.670 --> 00:08:24.015
Access to the object and
DOM C++ associated node, exactly right.

159
00:08:24.015 --> 00:08:27.474
That C++ is only the node,
is it gonna be appended yet?

160
00:08:27.474 --> 00:08:28.109
It is not.

161
00:08:28.109 --> 00:08:32.771
&gt;&gt; It is not, it is gonna be
in this unattached area here.

162
00:08:32.771 --> 00:08:39.033
&gt;&gt; The specific node type is going
to be taken from the 0th item

163
00:08:39.033 --> 00:08:44.055
of the node param,
which in this case is input.

164
00:08:44.055 --> 00:08:45.471
&gt;&gt; Is input, perfect.

165
00:08:45.471 --> 00:08:50.449
So we took node 0 and
used that to create a new element.

166
00:08:50.449 --> 00:08:56.725
I guess, we then also as you say, return
out is all happening inside of convert.

167
00:08:56.725 --> 00:08:59.952
We then returned out into LM,
the local label for

168
00:08:59.952 --> 00:09:04.675
it inside of this running of convert,
inside of this execution context

169
00:09:04.675 --> 00:09:08.789
which we're not actually showing,
because we're trying.

170
00:09:08.789 --> 00:09:11.376
To some extent,
we don't need to worry at this point,

171
00:09:11.376 --> 00:09:15.426
we can just rely on update DOM, basically,
to update what shows up from here to here,

172
00:09:15.426 --> 00:09:17.941
but we're just gonna map through for
our purposes.

173
00:09:17.941 --> 00:09:22.725
We're also then gonna have on our
value here via the setting of LM

174
00:09:22.725 --> 00:09:24.595
using the value setter.

175
00:09:24.595 --> 00:09:27.759
What are we gonna set
our value here to be?

176
00:09:27.759 --> 00:09:29.695
&gt;&gt; And for that we're going
to set it to the string y.

177
00:09:29.695 --> 00:09:32.554
&gt;&gt; y, from our memory, so
it's gonna be in white.

178
00:09:32.554 --> 00:09:36.474
And then we're gonna set
our input handler, again,

179
00:09:36.474 --> 00:09:41.875
all happening inside of LM, where
we're doing now the onInput setter and

180
00:09:41.875 --> 00:09:46.160
assigning node position 2,
which is our what function?

181
00:09:46.160 --> 00:09:48.069
&gt;&gt; It's our callback function.

182
00:09:48.069 --> 00:09:50.090
&gt;&gt; Which is called what?

183
00:09:50.090 --> 00:09:51.536
&gt;&gt; Sorry, handle.
&gt;&gt; Handle, beautiful.

184
00:09:51.536 --> 00:09:55.117
Exactly, our callback function is
a generic term, for you're exactly right.

185
00:09:55.117 --> 00:09:55.956
Perfect.

186
00:09:55.956 --> 00:09:59.076
And in JavaScript,
we got a link, my goodness.

187
00:09:59.076 --> 00:10:03.739
We got a link to it in JavaScript,
we got a link, so

188
00:10:03.739 --> 00:10:07.743
this deleted this object, brand new one.

189
00:10:07.743 --> 00:10:10.229
All right,
I'm not gonna draw out again, I reckon.

190
00:10:10.229 --> 00:10:13.202
Let's have it just go to this new input,
beautiful.

191
00:10:13.202 --> 00:10:17.337
But this is a brand new object,
the last access object gone.

192
00:10:17.337 --> 00:10:22.859
Okay, by analogy,
we also created what here,

193
00:10:22.859 --> 00:10:30.468
why in our DOM in line 13 where
VDOM position one has div hello y.

194
00:10:30.468 --> 00:10:34.205
What's also gonna show up here in our DOM?

195
00:10:34.205 --> 00:10:39.212
&gt;&gt; By analogy, we're creating an element
using the node 0 which is div.

196
00:10:39.212 --> 00:10:39.859
&gt;&gt; Yeah.

197
00:10:39.859 --> 00:10:43.115
&gt;&gt; We are going to assign it text content.

198
00:10:43.115 --> 00:10:43.900
&gt;&gt; Of?

199
00:10:43.900 --> 00:10:44.792
&gt;&gt; Hello, y.

200
00:10:44.792 --> 00:10:47.236
&gt;&gt; Beautiful, yeah.

201
00:10:47.236 --> 00:10:49.905
Hello, y!

202
00:10:49.905 --> 00:10:54.832
And we're gonna get what here
to replace this JSDiv object?

203
00:10:54.832 --> 00:10:57.996
I'm just gonna do it this time rather
than ask the question for so long.

204
00:10:57.996 --> 00:11:02.476
And create what in this object as
the output of running convert VDOM

205
00:11:02.476 --> 00:11:03.522
position one?

206
00:11:03.522 --> 00:11:06.874
&gt;&gt; Another JavaScript accessor object
to be able to interact with the -.

207
00:11:06.874 --> 00:11:11.503
&gt;&gt; Beautiful,
with useful properties like text content.

208
00:11:11.503 --> 00:11:17.792
And a hidden link to this div.

209
00:11:17.792 --> 00:11:22.669
Perfect, and then this is a getter setter
property that could be used as we did

210
00:11:22.669 --> 00:11:27.621
use it inside of convert when LM was the
label for this object before we returned

211
00:11:27.621 --> 00:11:32.574
it out from convert into jsDiv on our
latest running update DOM where we didn't

212
00:11:32.574 --> 00:11:37.107
even actually write the convert here,
but we know it was just run by us.

213
00:11:37.107 --> 00:11:40.591
We just talked it through,
and there it is on VDOM.

214
00:11:40.591 --> 00:11:44.312
And then in line 14, why, what happens?

215
00:11:44.312 --> 00:11:50.201
&gt;&gt; Finally, we call the replace
children method over the body

216
00:11:50.201 --> 00:11:55.266
object of the document
object exposed by window and

217
00:11:55.266 --> 00:11:59.047
we're passing it jsInput and jsDiv.

218
00:11:59.047 --> 00:12:01.264
&gt;&gt; Beautiful.

219
00:12:01.264 --> 00:12:03.580
And what's that gonna
do on our actual DOM?

220
00:12:03.580 --> 00:12:07.530
Because that's where this is happening,

221
00:12:07.530 --> 00:12:11.919
that's going to replace
our linked elements,

222
00:12:11.919 --> 00:12:17.969
it's gonna replace our former
now unlinked elements with what?

223
00:12:17.969 --> 00:12:18.804
Why?

224
00:12:18.804 --> 00:12:23.301
&gt;&gt; With the two newest
versions of jsInput and jsDiv.

225
00:12:23.301 --> 00:12:29.326
&gt;&gt; Linked here via our access objects,
these are replaced and

226
00:12:29.326 --> 00:12:36.075
actually deleted because,
did I lose the, these are replaced and

227
00:12:36.075 --> 00:12:41.398
actually deleted,
therefore gone, gone, gone!

228
00:12:41.398 --> 00:12:46.646
And we get a link instead,
we get attached instead input and div,

229
00:12:46.646 --> 00:12:52.372
so not a link but attached instead
input and div, that then immediately

230
00:12:52.372 --> 00:12:57.636
show up on our page with the y,
the user never knew what happened.

231
00:12:57.636 --> 00:12:59.011
Albeit, we had to refocus the element.

232
00:12:59.011 --> 00:13:03.417
In practice, we'd have had an end of
our update DOM after the replacement.

233
00:13:03.417 --> 00:13:06.925
jsInput.focus invoked to make sure
the cursor was back in here so

234
00:13:06.925 --> 00:13:10.836
the user wasn't frustrated,
they typed, and then it's bounced out.

235
00:13:10.836 --> 00:13:18.734
And then our div which says Hello, y!

236
00:13:18.734 --> 00:13:21.393
People, let's give a big hand.

237
00:13:21.393 --> 00:13:23.028
[APPLAUSE] Yeah, absolutely y.

238
00:13:23.028 --> 00:13:26.232
Beautiful, absolutely outstanding
technical communication.

239
00:13:26.232 --> 00:13:29.741
So I mean, for everybody,
but that was excellent.

240
00:13:29.741 --> 00:13:34.177
We ended up with in JavaScript
a visual representation of what was

241
00:13:34.177 --> 00:13:35.799
the show up on our page.

242
00:13:35.799 --> 00:13:40.831
We then had our state, add data run
through it every time the data changed

243
00:13:40.831 --> 00:13:46.609
such that we had a visual representation
with actual accurate data in JavaScript,

244
00:13:46.609 --> 00:13:49.497
which we by the way
could have archived and

245
00:13:49.497 --> 00:13:52.632
maybe use the changes
between it in some way,

246
00:13:52.632 --> 00:13:58.610
before that then gets rendered displayed
on the page through our convert functions.

247
00:13:58.610 --> 00:14:03.483
For the first time,
you have a return of descriptive

248
00:14:03.483 --> 00:14:07.929
code that describes its
output in JavaScript.

249
00:14:07.929 --> 00:14:11.013
And we're very lucky to have it.

250
00:14:11.013 --> 00:14:12.676
[LAUGH] Yes.

251
00:14:12.676 --> 00:14:19.474
It depends on the the restriction of
the user only gets to see things that

252
00:14:19.474 --> 00:14:25.044
are a direct consequence of
underlying JavaScript data.

253
00:14:25.044 --> 00:14:29.901
There is nothing on here that is not
captured as a consequence in our

254
00:14:29.901 --> 00:14:31.649
update DOM converter.

255
00:14:31.649 --> 00:14:32.850
Well, actually, sorry.

256
00:14:32.850 --> 00:14:37.366
Where are we describing the relationship
between the data and the view now?

257
00:14:37.366 --> 00:14:38.346
Well, whatever.

258
00:14:38.346 --> 00:14:43.939
Alexa, where are we describing
the relationship between the data and

259
00:14:43.939 --> 00:14:44.805
the view?

260
00:14:44.805 --> 00:14:46.298
&gt;&gt; In our VDOM.

261
00:14:46.298 --> 00:14:47.053
&gt;&gt; In our VDOM.

262
00:14:47.053 --> 00:14:48.552
&gt;&gt; Exactly, in our array.

263
00:14:48.552 --> 00:14:51.828
Exactly, that's now a very visual
description of what we were previously

264
00:14:51.828 --> 00:14:53.076
doing, it's really cool,

265
00:14:53.076 --> 00:14:56.412
then we use the actual process of
turning that into elements imperatively.

266
00:14:56.412 --> 00:14:59.426
The descriptive process in the,
well Alexa, in the which function?

267
00:14:59.426 --> 00:15:01.405
&gt;&gt; Convert.
&gt;&gt; In the convert for each element.

268
00:15:01.405 --> 00:15:06.582
And so we now finally, but it does rest
on every single thing the user sees.

269
00:15:06.582 --> 00:15:11.527
We could totally write code by the way in
this VDOM creation that says only produce

270
00:15:11.527 --> 00:15:14.291
div based on some sort
of conditional logic,

271
00:15:14.291 --> 00:15:16.709
a ternary could evaluate right there.

272
00:15:16.709 --> 00:15:17.619
That's kind of cool.

273
00:15:17.619 --> 00:15:22.475
We can have our full description
of the element, its handler,

274
00:15:22.475 --> 00:15:27.788
its content in that list, but
that requires that everything the user

275
00:15:27.788 --> 00:15:33.027
sees always is a direct consequence
of state of data in JavaScript.

276
00:15:33.027 --> 00:15:37.834
Meaning the user can only
have consequence of what they

277
00:15:37.834 --> 00:15:42.744
see via a handler function
that only changes state, and

278
00:15:42.744 --> 00:15:46.311
then we pipe it back through to display.

279
00:15:46.311 --> 00:15:49.337
All right, people, there we had it,
we got a couple of thumbs.

280
00:15:49.337 --> 00:15:56.217
A virtual DOM, I hope it even
seems a little bit, that's it.

281
00:15:56.217 --> 00:15:57.984
Blocks of code representing
each piece of view.

282
00:15:57.984 --> 00:15:59.777
We could create them with functions,

283
00:15:59.777 --> 00:16:03.259
we could have a function called to
create that block of view, and we will.

284
00:16:03.259 --> 00:16:06.503
JavaScript array, in this case,
of all the details and

285
00:16:06.503 --> 00:16:10.172
a function that takes in that array and
produces an actual DOM.

286
00:16:10.172 --> 00:16:14.479
And that's our convert function call
that we went from doing in full,

287
00:16:14.479 --> 00:16:17.183
to doing somewhat, to not even writing it.

288
00:16:17.183 --> 00:16:21.139
Because to be honest, we only think about
it because it's all described for us here.

289
00:16:21.139 --> 00:16:22.699
Isn't that kind of nice?

290
00:16:22.699 --> 00:16:28.109
And then where we place the elements in
the code mirrors the order they show up.

291
00:16:28.109 --> 00:16:32.524
However, as we saw in arrays earlier,
not very flexible right now, is it?

