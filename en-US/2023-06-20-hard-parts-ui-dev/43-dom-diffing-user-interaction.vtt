WEBVTT

1
00:00:00.130 --> 00:00:04.370
Beautiful, and now user takes action.

2
00:00:04.370 --> 00:00:07.930
We're almost there, user actions.

3
00:00:07.930 --> 00:00:10.630
You've done incredibly,
people, user actions.

4
00:00:10.630 --> 00:00:12.280
User comes in and types.

5
00:00:12.280 --> 00:00:14.740
We have a handler ready to handle it.

6
00:00:14.740 --> 00:00:17.240
They're gonna type.

7
00:00:17.240 --> 00:00:19.330
We're not gonna dwell on
this one like last time.

8
00:00:19.330 --> 00:00:25.990
They're gonna type, I would say hooray,
but hello hooray is, what do we say?

9
00:00:25.990 --> 00:00:27.573
Frontend Masters maybe?

10
00:00:27.573 --> 00:00:28.243
Sorry.

11
00:00:28.243 --> 00:00:31.710
&gt;&gt; [LAUGH]
&gt;&gt; Yeah, all right.

12
00:00:31.710 --> 00:00:37.316
They're gonna type FM,
Frontend Masters, yay.

13
00:00:37.316 --> 00:00:38.840
We should probably do UIHP.

14
00:00:38.840 --> 00:00:39.754
No, no, no, that's even.

15
00:00:39.754 --> 00:00:41.580
Okay, we'd do Frontend Masters,
that's lovely.

16
00:00:41.580 --> 00:00:46.337
Frontend Masters, they're gonna
write FM into the input field.

17
00:00:46.337 --> 00:00:50.171
That is going to trigger
our handle function to run,

18
00:00:50.171 --> 00:00:55.391
set our FM as a value on that input node,
that input object in C++.

19
00:00:55.391 --> 00:01:01.153
The event is also going to be fully
described in an object auto inserted

20
00:01:01.153 --> 00:01:07.170
into that handle function that
is auto executed by JavaScript.

21
00:01:07.170 --> 00:01:11.690
I note here I have not taken my
updateDOM function off the call stack.

22
00:01:11.690 --> 00:01:14.390
So let's get that cleared
off from earlier.

23
00:01:15.420 --> 00:01:20.924
And, I almost feel,
I can't believe we are almost there.

24
00:01:20.924 --> 00:01:22.749
Honestly, I'm feeling I'm
missing something here.

25
00:01:22.749 --> 00:01:27.115
&gt;&gt; [LAUGH]
&gt;&gt; I guess we've still gotta do diffing

26
00:01:27.115 --> 00:01:28.258
and whatever.

27
00:01:28.258 --> 00:01:33.831
So, Ian, do you mind helping me out with
what's happening to our callback queue,

28
00:01:33.831 --> 00:01:38.225
our call stack, as this handle
function gets added to the queue?

29
00:01:38.225 --> 00:01:43.073
&gt;&gt; Okay, so the user put in the input FM,
&gt;&gt; Which added it to the callback queue.

30
00:01:43.073 --> 00:01:46.113
&gt;&gt; Beautiful.
&gt;&gt; And then we check to see if the call

31
00:01:46.113 --> 00:01:50.395
stack is empty, so
we can add that callback over there.

32
00:01:50.395 --> 00:01:51.317
&gt;&gt; Beautiful.

33
00:01:51.317 --> 00:01:54.733
&gt;&gt; And it is, so it's going to
be added to the call stack and

34
00:01:54.733 --> 00:01:57.190
then begin execution of the handler.

35
00:01:57.190 --> 00:01:59.910
&gt;&gt; Beautiful, brand new execution context.

36
00:01:59.910 --> 00:02:01.260
Don't worry, we'll get to it.

37
00:02:01.260 --> 00:02:02.626
There it is, handle.

38
00:02:02.626 --> 00:02:07.490
And, yeah,
this is a very small one, right?

39
00:02:07.490 --> 00:02:10.430
So tell me what's gonna happen in it.

40
00:02:10.430 --> 00:02:16.072
&gt;&gt; Yeah,
since it was executed by an event handler.

41
00:02:16.072 --> 00:02:17.770
&gt;&gt; It's not a very, very small one, is it?

42
00:02:17.770 --> 00:02:22.897
Because we also, right, right,
right, we don't know which

43
00:02:22.897 --> 00:02:28.820
element is going to land on per se in
terms of our accessor labels in JavaScript.

44
00:02:28.820 --> 00:02:30.480
So we don't wanna be restricted.

45
00:02:30.480 --> 00:02:35.650
So we allow it to be generic and
we use the event object that's also

46
00:02:35.650 --> 00:02:40.927
auto inserted into it to identify
where this input was happening.

47
00:02:40.927 --> 00:02:45.486
Get a link to that DOM element, such
that we can then go and grab its value.

48
00:02:45.486 --> 00:02:51.753
I mean, we could work out an index process
to get exactly which of the elems it's in.

49
00:02:51.753 --> 00:02:56.471
And then inside of here do,
name is gonna be elem's position,

50
00:02:56.471 --> 00:03:00.221
some sort of index to figure
out which elem it was.

51
00:03:00.221 --> 00:03:03.410
And then get the value to
use our getter or the value.

52
00:03:03.410 --> 00:03:08.380
But this in the end is probably a better
way or a nice way to do it here.

53
00:03:08.380 --> 00:03:15.110
And with that in mind, yes, what's our,
again, event object also auto inserted.

54
00:03:15.110 --> 00:03:16.410
There it is.

55
00:03:16.410 --> 00:03:20.841
And keep me going in terms of my.

56
00:03:20.841 --> 00:03:25.458
Yeah, sorry just-
&gt;&gt; So we're reassigning the global

57
00:03:25.458 --> 00:03:28.725
variable name to the-
&gt;&gt; Beautiful.

58
00:03:28.725 --> 00:03:30.915
&gt;&gt; We're accessing the event object.

59
00:03:30.915 --> 00:03:36.116
&gt;&gt; Well, so let's just put that
though into our local memory.

60
00:03:36.116 --> 00:03:42.901
We have a parameter that is
going to be auto assigned.

61
00:03:42.901 --> 00:03:49.190
Our auto inserted object,
the event object as you rightly say.

62
00:03:49.190 --> 00:03:56.763
We're going to be most interested in its
target property, which is, go ahead.

63
00:03:56.763 --> 00:03:59.817
&gt;&gt; The target property
is an accessor object-

64
00:03:59.817 --> 00:04:00.507
&gt;&gt; Beautiful.

65
00:04:00.507 --> 00:04:04.340
&gt;&gt; For
the element that the user interacted with.

66
00:04:04.340 --> 00:04:08.847
&gt;&gt; Yeah, beautiful
&gt;&gt; And we are going to be accessing

67
00:04:08.847 --> 00:04:11.681
the value of that-
&gt;&gt; Yeah, brilliant.

68
00:04:11.681 --> 00:04:15.780
&gt;&gt; Through the getter method value.

69
00:04:15.780 --> 00:04:20.940
&gt;&gt; Fantastic, and that is a link,
as you say, to the input element.

70
00:04:20.940 --> 00:04:24.125
And we are going to, exactly as you say,

71
00:04:24.125 --> 00:04:29.938
access via our placeholder parameter
e the target of the user's action,

72
00:04:29.938 --> 00:04:35.376
which the user action event object
captures in its target property,

73
00:04:35.376 --> 00:04:40.090
which is a linked accessor
object to the input DOM element.

74
00:04:40.090 --> 00:04:45.650
And we're going to use the getter, exactly
as you said, of value to get its entered

75
00:04:45.650 --> 00:04:50.814
value via user's submission so to speak,
which is FM for Frontend Masters,

76
00:04:50.814 --> 00:04:55.121
although I'm also realized it
reminds me of Football Manager.

77
00:04:55.121 --> 00:04:57.890
One of my favorite games
as I was growing up.

78
00:04:57.890 --> 00:05:03.023
And that is gonna be assigned
into as a JavaScript

79
00:05:03.023 --> 00:05:09.888
string into the global variable,
as you said, Ian, of what?

80
00:05:09.888 --> 00:05:11.294
&gt;&gt; Name.

81
00:05:11.294 --> 00:05:13.110
&gt;&gt; Name, beautiful.

82
00:05:13.110 --> 00:05:15.790
There it is, that's our new data.

83
00:05:15.790 --> 00:05:20.352
That's our new data from which
we're going to run our one simple

84
00:05:20.352 --> 00:05:24.510
function that produces our
JavaScript representation.

85
00:05:24.510 --> 00:05:29.161
It's almost an interstitial as
an intermediate step before that all

86
00:05:29.161 --> 00:05:33.290
gets converted into
actual C++ DOM elements.

87
00:05:33.290 --> 00:05:36.150
And so we get handle off the call stack.

88
00:05:36.150 --> 00:05:38.187
Doesn't that pink and green look great?

89
00:05:38.187 --> 00:05:43.000
[LAUGH] I don't even know what it's
saying, but I know it looks nice.

90
00:05:43.000 --> 00:05:47.570
Okay, and so handle was, of course,
out of the callback queue.

91
00:05:47.570 --> 00:05:49.622
As always, I forget to remove
from the callback queue,

92
00:05:49.622 --> 00:05:51.700
when we added it to the call stack.

93
00:05:51.700 --> 00:05:53.580
Okay, data's changed.

94
00:05:53.580 --> 00:05:56.630
We're running updateDOM
every 15 milliseconds.

95
00:05:56.630 --> 00:05:58.808
In a more mature design,

96
00:05:58.808 --> 00:06:04.010
we would have upon in handle
the name wanting to be changed.

97
00:06:04.010 --> 00:06:09.342
We'd have used an update name hook or
a data state hook that would have ensured

98
00:06:09.342 --> 00:06:14.596
when we update our data,
we also then triggered updateDOM to run.

99
00:06:14.596 --> 00:06:17.960
But for our simplicity here,
it's just gonna run again.

100
00:06:17.960 --> 00:06:22.950
And so, updateDOM, Alexa talk me
through what's gonna happen here.

101
00:06:22.950 --> 00:06:27.495
&gt;&gt; updateDOM comes back
into the callback queue.

102
00:06:27.495 --> 00:06:28.350
&gt;&gt; Into the callback queue.

103
00:06:28.350 --> 00:06:31.844
&gt;&gt; The event loop checks if our global
code is done running, which it is.

104
00:06:31.844 --> 00:06:34.540
And if the call stack is empty,
which it is.

105
00:06:34.540 --> 00:06:37.289
&gt;&gt; Absolutely, and add update.

106
00:06:37.289 --> 00:06:40.290
&gt;&gt; Yes,
updateDOM gets added to the call stack.

107
00:06:40.290 --> 00:06:42.420
JavaScript will invoke it for us.

108
00:06:42.420 --> 00:06:44.679
&gt;&gt; And we are going to create a brand new,

109
00:06:44.679 --> 00:06:47.627
together-
&gt;&gt; Execution context.

110
00:06:47.627 --> 00:06:49.670
&gt;&gt; You're so lovely, people.

111
00:06:49.670 --> 00:06:54.630
It just really keeps me going.

112
00:06:54.630 --> 00:06:58.240
And the thread of
execution weaves into it.

113
00:06:58.240 --> 00:07:00.670
And we're at, I don't know,
15 milliseconds or whatever.

114
00:07:00.670 --> 00:07:02.697
And now, have I missed anything here?

115
00:07:02.697 --> 00:07:05.050
No, right?

116
00:07:05.050 --> 00:07:08.191
And now we hit our conditional.

117
00:07:08.191 --> 00:07:12.990
Elems, is it undefined anymore, Alexa?

118
00:07:12.990 --> 00:07:13.570
&gt;&gt; No.

119
00:07:13.570 --> 00:07:16.840
&gt;&gt; It is absolutely not undefined.

120
00:07:16.840 --> 00:07:20.220
So we hit our else.

121
00:07:20.220 --> 00:07:24.982
And our else is going to, the reason
it's not undefined anymore is we've got

122
00:07:24.982 --> 00:07:29.243
a bunch of access to objects to our
now readily created DOM elements.

123
00:07:29.243 --> 00:07:32.400
Meaning we ain't gonna be throwing
them out from scratch anymore.

124
00:07:32.400 --> 00:07:35.589
Even though for our vDOM, for
our purposes of reasoning,

125
00:07:35.589 --> 00:07:40.083
it's really lovely that we're gonna be
able to produce a brand new description in

126
00:07:40.083 --> 00:07:44.575
full from a one-to-one relationship in
our createVDOM function of what the page

127
00:07:44.575 --> 00:07:47.537
should show without us having
to work out and reason.

128
00:07:47.537 --> 00:07:50.383
Now, if you're doing this in
a React type environment,

129
00:07:50.383 --> 00:07:54.075
we would use a function call to create
all of those DOM elements one by one.

130
00:07:54.075 --> 00:07:58.076
But we'd still be from scratch
reasoning from data to what is

131
00:07:58.076 --> 00:08:01.379
to be displayed in
a one-to-one relationship.

132
00:08:01.379 --> 00:08:06.335
Same thing here, but under the hood
we're gonna need to do a better job

133
00:08:06.335 --> 00:08:10.202
of not throwing out our DOM
elements from scratch, but

134
00:08:10.202 --> 00:08:12.741
instead making incisive changes.

135
00:08:12.741 --> 00:08:17.734
And so into our else we go where
we're gonna do some trickery with

136
00:08:17.734 --> 00:08:19.124
our arrays here.

137
00:08:19.124 --> 00:08:23.602
Okay, Alexa,
can you try verbalizing this for me?

138
00:08:23.602 --> 00:08:28.967
&gt;&gt; Yes, so we're gonna reassign
our prev DOM or previous DOM.

139
00:08:28.967 --> 00:08:31.147
&gt;&gt; Previous vDOM?

140
00:08:31.147 --> 00:08:32.650
&gt;&gt; Yeah-
&gt;&gt; I think it's a bit tricky.

141
00:08:32.650 --> 00:08:35.360
Previous virtual DOM, virtual DOM.

142
00:08:35.360 --> 00:08:39.703
&gt;&gt; To be a new array into which we
spread out all of the sub arrays that

143
00:08:39.703 --> 00:08:42.130
are currently in our current vDOM.

144
00:08:42.130 --> 00:08:44.185
&gt;&gt; Let's give a hand to Alexa for
that one, that's really nice.

145
00:08:44.185 --> 00:08:45.989
&gt;&gt; [APPLAUSE]
&gt;&gt; It's just these are not when a lot of

146
00:08:45.989 --> 00:08:47.711
time when I verbalize
few many times myself.

147
00:08:47.711 --> 00:08:50.645
So, [SOUND] what Alexa say, okay.

148
00:08:50.645 --> 00:08:55.318
&gt;&gt; [LAUGH]
&gt;&gt; So we're gonna create previous vDOM

149
00:08:55.318 --> 00:09:01.670
a new array and we are going to
spread out the sub elements.

150
00:09:01.670 --> 00:09:06.270
I'm just literally copying what Alexa
said, of vDOM into that new array.

151
00:09:06.270 --> 00:09:09.332
Now, so that I don't need to
recopy all that out and I guess so

152
00:09:09.332 --> 00:09:13.330
that I could show vDOM the new one down
here and the previous one up here.

153
00:09:13.330 --> 00:09:15.825
I'm going to just, but I'm also,

154
00:09:15.825 --> 00:09:19.990
I think I'm gonna show us
the the outer array being redone.

155
00:09:19.990 --> 00:09:21.333
&gt;&gt; That's quite nice, isn't it, right?

156
00:09:21.333 --> 00:09:28.887
So I'm going to have previous vDOM be
a new array into which I've spread zero,

157
00:09:28.887 --> 00:09:34.615
one, two, or not, yeah,
the previous elements in vDOM.

158
00:09:34.615 --> 00:09:39.743
And now vDOM, I'm going to,
now technically,

159
00:09:39.743 --> 00:09:43.746
vDOM is still pointing to the previous

160
00:09:43.746 --> 00:09:48.638
array with holding those three sub-arrays.

161
00:09:48.638 --> 00:09:53.539
But we know that we're about
to reassign it to the output

162
00:09:53.539 --> 00:09:57.206
of running createVDOM with our new data.

163
00:09:57.206 --> 00:10:04.520
So let's hold on redrawing that and
instead just do our next line.

164
00:10:04.520 --> 00:10:08.912
Alexa, vDOM is gonna be reassigned,
well, take it away.

165
00:10:08.912 --> 00:10:09.546
&gt;&gt; Yes, so

166
00:10:09.546 --> 00:10:15.680
we're gonna reassign vDOM to the evaluated
result of invoking createVDOM.

167
00:10:15.680 --> 00:10:19.620
&gt;&gt; Create vDOM,
that will go in the call stack.

168
00:10:19.620 --> 00:10:25.420
And we can just see its output here
with all of the data run through it,

169
00:10:25.420 --> 00:10:30.510
a big old new array and
now we're gonna fill out its data.

170
00:10:30.510 --> 00:10:32.610
We know we're inside createVDOM here.

171
00:10:32.610 --> 00:10:36.203
But just cuz it's gonna be
returned straight out into vDOM,

172
00:10:36.203 --> 00:10:39.315
we might as well just put
it straight here in global.

173
00:10:39.315 --> 00:10:42.500
And so what is our new vDOM?

174
00:10:42.500 --> 00:10:45.409
I'm actually honestly feeling anticipation
as we get to this final, I'm like.

175
00:10:45.409 --> 00:10:48.299
Okay, what are we gonna
fill this array in with?

176
00:10:48.299 --> 00:10:51.317
&gt;&gt; So the first subarray
will have the string input.

177
00:10:51.317 --> 00:10:51.912
&gt;&gt; Perfect.

178
00:10:51.912 --> 00:10:55.619
&gt;&gt; The string FM for Frontend Masters-
&gt;&gt; Exactly.

179
00:10:55.619 --> 00:11:00.250
&gt;&gt; And then the function definition
we've stored under the label handle.

180
00:11:00.250 --> 00:11:04.460
&gt;&gt; Perfect, under handle,
so new reference to it.

181
00:11:04.460 --> 00:11:06.480
And then our next one?

182
00:11:06.480 --> 00:11:12.240
&gt;&gt; Will be the string div, and
then the string Hello, FM!

183
00:11:12.240 --> 00:11:14.260
&gt;&gt; Beautiful, and the last one?

184
00:11:14.260 --> 00:11:17.910
&gt;&gt; Will again be the string div and
then the string Great job.

185
00:11:17.910 --> 00:11:20.295
&gt;&gt; Beautiful, and there they are.

186
00:11:20.295 --> 00:11:26.013
Okay, done, and I can already see I'm
gonna need to do some comparisons here.

187
00:11:26.013 --> 00:11:30.571
But I'm not gonna need to throw out
my entire real C++ DOM elements.

