WEBVTT

1
00:00:00.000 --> 00:00:02.208
Let's go.

2
00:00:02.208 --> 00:00:05.058
We are at our final code.

3
00:00:05.058 --> 00:00:06.925
I'm so proud of everybody.

4
00:00:06.925 --> 00:00:14.970
We're gonna draw our view here,
our web page.

5
00:00:14.970 --> 00:00:16.241
The output pixels,

6
00:00:16.241 --> 00:00:20.358
technically their pixels being
displayed to the graphics card.

7
00:00:20.358 --> 00:00:25.356
They're automatically produced by

8
00:00:25.356 --> 00:00:30.835
our layout and render engine from our C++

9
00:00:30.835 --> 00:00:36.960
implementation of those
elements as a list,

10
00:00:36.960 --> 00:00:43.583
technically as an object in C++,
there it is.

11
00:00:43.583 --> 00:00:45.719
And there it is.

12
00:00:45.719 --> 00:00:50.254
And that's a full description in
list form or technically object form of

13
00:00:50.254 --> 00:00:55.045
the elements that show up on the page
that will automatically display.

14
00:00:55.045 --> 00:00:58.095
If we could write C++ code today's and
yesterday's session,

15
00:00:58.095 --> 00:01:00.096
wouldn't have mattered, but we can't.

16
00:01:00.096 --> 00:01:05.924
And so we are going to have to
lean on JavaScript to do so.

17
00:01:05.924 --> 00:01:06.744
Here it is.

18
00:01:06.744 --> 00:01:11.801
There's a JavaScript on this side,
C++ on this side.

19
00:01:11.801 --> 00:01:14.808
We initially loading our app.html.

20
00:01:14.808 --> 00:01:16.216
Do we need to draw that again?

21
00:01:16.216 --> 00:01:17.521
You know what?
I've enjoyed this so much.

22
00:01:17.521 --> 00:01:21.506
Now we're so close to the end, I just
wanna drag out the last few minutes for

23
00:01:21.506 --> 00:01:23.288
us because, yeah, there it is.

24
00:01:23.288 --> 00:01:28.328
Our app.html is loaded into

25
00:01:28.328 --> 00:01:34.211
our web browser's HTML parser.

26
00:01:34.211 --> 00:01:37.784
I actually often get that feeling as we
get towards the end of hard parts in front

27
00:01:37.784 --> 00:01:41.428
of I'm like, we've done so much,
I don't even want it to end.

28
00:01:41.428 --> 00:01:46.187
And so then we have HTML parser takes
those elements, then we list out and

29
00:01:46.187 --> 00:01:51.507
put some in this C++ something that we
list out in HTML and put them in the C++.

30
00:01:51.507 --> 00:01:54.061
Honestly, we don't list out
any elements anymore, right?

31
00:01:54.061 --> 00:01:59.147
Because we do not want to really have
anything displayed to the user that

32
00:01:59.147 --> 00:02:04.403
is not tracked, mirroring underlying
state in a single source of truth,

33
00:02:04.403 --> 00:02:09.096
not HTML that then you can't switch on and
off from there anyway.

34
00:02:09.096 --> 00:02:13.525
And so you've now got an auto on source
of truth for all those elements that you

35
00:02:13.525 --> 00:02:17.682
might later then switch off and
the user change what they see as a result,

36
00:02:17.682 --> 00:02:21.598
but you've got one source of the data
that represents them in HTML.

37
00:02:21.598 --> 00:02:24.416
And now you're gonna have it in,
no, just put it all in JavaScript.

38
00:02:24.416 --> 00:02:26.112
That's gonna be your source of truth.

39
00:02:26.112 --> 00:02:29.887
That's gonna be your data on which
everything the user sees depends.

40
00:02:29.887 --> 00:02:33.899
And when they take action to change
what they see, you're changing that

41
00:02:33.899 --> 00:02:37.663
data in JavaScript, including
whether to show a div or not, okay?

42
00:02:37.663 --> 00:02:41.738
And then we have our JavaScript
engine with that in mind, switch on.

43
00:02:41.738 --> 00:02:46.412
It has a memory and
it has the ability to affect

44
00:02:46.412 --> 00:02:51.455
this C++ list that produces
our final rendered

45
00:02:51.455 --> 00:02:56.624
image of the page by the layout and
render engine.

46
00:02:56.624 --> 00:03:00.528
And then we also have a bunch of other
features in the web browser like timer,

47
00:03:00.528 --> 00:03:02.732
that we can access again from JavaScript.

48
00:03:02.732 --> 00:03:09.253
And when doing their work, we'll not block
the JavaScript thread from executing code.

49
00:03:09.253 --> 00:03:11.357
Beautiful, there it is.

50
00:03:11.357 --> 00:03:14.380
Okay, it's gonna have on it, by default,

51
00:03:14.380 --> 00:03:19.470
a body element that represents the entire
page to which we can add things.

52
00:03:19.470 --> 00:03:25.576
And then in JavaScript,
we have our memory.

53
00:03:25.576 --> 00:03:27.360
Phil, if you don't mind again,

54
00:03:27.360 --> 00:03:30.366
just telling us the first
thing that's in that memory?

55
00:03:30.366 --> 00:03:31.396
&gt;&gt; Yeah, the document object.

56
00:03:31.396 --> 00:03:32.867
&gt;&gt; Yeah, and that's loaded there.

57
00:03:32.867 --> 00:03:38.138
Whenever the host, the place that is
running JavaScript, is the web browser.

58
00:03:38.138 --> 00:03:39.754
There it is.

59
00:03:39.754 --> 00:03:44.822
Okay, and it has a link to where?

60
00:03:44.822 --> 00:03:45.413
&gt;&gt; A DOM.

61
00:03:45.413 --> 00:03:47.642
&gt;&gt; To our DOM, yeah, essentially to our DOM.

62
00:03:47.642 --> 00:03:48.835
Exactly right, there it is.

63
00:03:48.835 --> 00:03:52.233
And it also has a bunch of useful
functions, getter/setter properties.

64
00:03:52.233 --> 00:03:55.232
What is the functions
that we're using here?

65
00:03:55.232 --> 00:04:00.227
&gt;&gt; That would be-
&gt;&gt; We want to create some elements, and

66
00:04:00.227 --> 00:04:01.595
we want to-
&gt;&gt; Create element?

67
00:04:01.595 --> 00:04:02.427
&gt;&gt; Yep, beautiful.

68
00:04:02.427 --> 00:04:04.498
I'm assuming you've seen that somewhere?

69
00:04:04.498 --> 00:04:06.519
No, sorry, you know where it is?

70
00:04:06.519 --> 00:04:10.836
&gt;&gt; [CROSSTALK]
&gt;&gt; It is in the collapse.

71
00:04:10.836 --> 00:04:15.713
Don't try and click on that, there it is.

72
00:04:15.713 --> 00:04:18.527
But I was glad that you all were like,
I know where it is, cuz that suggests it's

73
00:04:18.527 --> 00:04:21.222
not too bad that we have collapsed that
bit, we do know what it does, right?

74
00:04:21.222 --> 00:04:25.284
It does all the work of taking that
description from the array in JavaScript

75
00:04:25.284 --> 00:04:28.586
and producing the actual DOM element and
the accessor object.

76
00:04:28.586 --> 00:04:30.902
So hopefully we are clear
on that at this point.

77
00:04:30.902 --> 00:04:36.300
Okay, now we're gonna have a call
stack down here, all this set up, right?

78
00:04:36.300 --> 00:04:39.370
Call stack down here and

79
00:04:39.370 --> 00:04:44.637
our callback queue, Here,

80
00:04:44.637 --> 00:04:49.122
and then the event loop that determines
whether the call stack is empty and all

81
00:04:49.122 --> 00:04:53.962
global code is finished running, such that
we can add functions to the call stack.

82
00:04:53.962 --> 00:04:58.824
Okay, let's, Phil, if you don't mind,
get started there with our, well, piece of

83
00:04:58.824 --> 00:05:03.379
state, our piece of data in JavaScript
from which all of this is gonna propagate.

84
00:05:03.379 --> 00:05:06.677
&gt;&gt; Yeah, so first thing we're gonna do is
we're gonna declare our name variable, and

85
00:05:06.677 --> 00:05:08.080
initialize it to the empty string.

86
00:05:08.080 --> 00:05:12.072
&gt;&gt; Beautiful, and then the next,
again, line, really here, but

87
00:05:12.072 --> 00:05:14.125
I put a semicolon to just-
&gt;&gt; Yeah.

88
00:05:14.125 --> 00:05:14.912
&gt;&gt; Condense it.

89
00:05:14.912 --> 00:05:18.062
&gt;&gt; Yeah,
we'll be declaring our VDOM variable.

90
00:05:18.062 --> 00:05:22.824
&gt;&gt; And usually here we're gonna
immediately go about actually assigning it

91
00:05:22.824 --> 00:05:24.676
based on our initial state.

92
00:05:24.676 --> 00:05:28.107
And that's just for the ordering
of this code to work and do so

93
00:05:28.107 --> 00:05:29.534
as tightly as possible.

94
00:05:29.534 --> 00:05:32.350
So let's do that.

95
00:05:32.350 --> 00:05:36.521
What's gonna be the output
with this state,

96
00:05:36.521 --> 00:05:40.591
with this data in our
VDOM global variable?

97
00:05:40.591 --> 00:05:42.341
&gt;&gt; You're gonna go through
the return values.

98
00:05:42.341 --> 00:05:43.260
&gt;&gt; Yeah, return value.

99
00:05:43.260 --> 00:05:47.872
So we know we're gonna call Create VDOM,
inside we're gonna fill in

100
00:05:47.872 --> 00:05:52.337
the dynamic data name with actual values,
yeah, so take it away.

101
00:05:52.337 --> 00:05:56.208
&gt;&gt; It'll be an array with three subarrays,

102
00:05:56.208 --> 00:06:00.417
that first element will
be a string of input.

103
00:06:00.417 --> 00:06:03.561
The next element will be an empty string.

104
00:06:03.561 --> 00:06:05.061
&gt;&gt; Yeah, perfect.

105
00:06:05.061 --> 00:06:09.776
&gt;&gt; And then the third element
will be the function handle.

106
00:06:09.776 --> 00:06:12.492
&gt;&gt; Fantastic, empty string and
function handle.

107
00:06:12.492 --> 00:06:17.370
Again, I really like that I am able to
sort of do these in a random order cuz I

108
00:06:17.370 --> 00:06:20.301
can visually see them there in JavaScript.

109
00:06:20.301 --> 00:06:25.784
And that kind of gives me a preview of
just how it will look in my page as well.

110
00:06:25.784 --> 00:06:27.287
So the next one is?

111
00:06:27.287 --> 00:06:31.160
&gt;&gt; Next one will have the first
element string of div,

112
00:06:31.160 --> 00:06:33.962
second element, the string hello.

113
00:06:33.962 --> 00:06:34.701
&gt;&gt; I did it.

114
00:06:34.701 --> 00:06:35.932
Okay, yeah, exactly.

115
00:06:35.932 --> 00:06:37.419
Brilliant, exactly.

116
00:06:37.419 --> 00:06:45.580
Perfect, and then we have our
previous VDOM label created.

117
00:06:45.580 --> 00:06:48.290
So help me with this, Phil.

118
00:06:48.290 --> 00:06:51.176
&gt;&gt; Global memory,
we declare a previous VDOM.

119
00:06:51.176 --> 00:06:55.417
&gt;&gt; VDOM, nothing assigned, but
I have a feeling we're gonna end

120
00:06:55.417 --> 00:06:59.830
up having it point to this or
at least the elements of this object.

121
00:06:59.830 --> 00:07:03.900
And probably the way we are gonna
end up doing it in my diagram,

122
00:07:03.900 --> 00:07:07.031
is probably just moving
this label up here, and

123
00:07:07.031 --> 00:07:11.671
having it, what we know in practices
this is actually re-labeling.

124
00:07:11.671 --> 00:07:16.874
I think it's gonna create,
when we end up doing it, a brand new array

125
00:07:16.874 --> 00:07:22.734
that's going to have all these elements
in it, and then this previous VDOM.

126
00:07:22.734 --> 00:07:24.442
Do you see in Line 18 when
you end up doing this?

127
00:07:24.442 --> 00:07:28.086
We're gonna have previous
VDOM be a new array with

128
00:07:28.086 --> 00:07:32.178
the sub-elements of VDOMS
spread into that new array.

129
00:07:32.178 --> 00:07:36.331
In practice,
I'm gonna put the word previous VDOM here,

130
00:07:36.331 --> 00:07:38.634
[LAUGH] cuz that's good enough.

131
00:07:38.634 --> 00:07:44.113
Okay, and then last declaration there,
Phil, is?

132
00:07:44.113 --> 00:07:48.081
&gt;&gt; Elems variable,
&gt;&gt; Beautiful, and we'll see that that

133
00:07:48.081 --> 00:07:53.443
hopefully is gonna have a list of objects
that could have corresponding DOM elements

134
00:07:53.443 --> 00:07:58.368
in C++, and then hopefully, instead,
corresponding pixel on the page.

135
00:07:58.368 --> 00:08:01.979
Perfect, let's declare a bunch of
functions, right, that's next.

136
00:08:01.979 --> 00:08:04.960
&gt;&gt; First we're gonna declare
a create VDOM function, which,

137
00:08:04.960 --> 00:08:07.016
I don't know if we have that in there yet.

138
00:08:07.016 --> 00:08:08.366
&gt;&gt; Well, which we use, forgive me,

139
00:08:08.366 --> 00:08:10.425
by the way,
we use that cuz of the hoisting, right?

140
00:08:10.425 --> 00:08:14.145
So we're able to use any of these
functions as soon as, wherever we want,

141
00:08:14.145 --> 00:08:18.405
even above where they're defined, because
function keyword ensures they're all

142
00:08:18.405 --> 00:08:20.750
available throughout
the whole file of code.

143
00:08:20.750 --> 00:08:24.101
Probably a legacy JavaScript feature,
but one that's quite nice for

144
00:08:24.101 --> 00:08:25.815
here just in terms of readability.

145
00:08:25.815 --> 00:08:28.059
I can't figure out how
I'm gonna fit that on.

146
00:08:28.059 --> 00:08:32.516
So I think I'm going to get rid of
this here so that we have room and

147
00:08:32.516 --> 00:08:36.580
maybe draw it either a bit further down or
something else.

148
00:08:36.580 --> 00:08:37.613
I'm not sure, we'll figure it out.

149
00:08:37.613 --> 00:08:39.349
But yeah, let's put him on here.

150
00:08:39.349 --> 00:08:41.891
What are our functions, if you don't mind?

151
00:08:41.891 --> 00:08:43.690
&gt;&gt; Create VDOM.

152
00:08:43.690 --> 00:08:46.408
&gt;&gt; Create VDOM.

153
00:08:46.408 --> 00:08:48.303
&gt;&gt; Handle.

154
00:08:48.303 --> 00:08:51.622
&gt;&gt; Yeah, so create VDOM is gonna be
the one that, well, we just did it right,

155
00:08:51.622 --> 00:08:55.313
takes our data and creates our JavaScript
representation with the real data in it,

156
00:08:55.313 --> 00:08:55.912
beautiful.

157
00:08:55.912 --> 00:09:00.857
Next one was the handler function
handle that's actually already stored

158
00:09:00.857 --> 00:09:05.420
up here on the specific JavaScript
representation of that element.

159
00:09:05.420 --> 00:09:10.325
That's going to appear on the real C++ DOM
when we convert these elements one by one.

160
00:09:10.325 --> 00:09:11.827
So there's our handler.

161
00:09:11.827 --> 00:09:15.357
And on that note, here's our big
old function to do all the work.

162
00:09:15.357 --> 00:09:17.019
This is called what, Phil?

163
00:09:17.019 --> 00:09:17.809
&gt;&gt; Update DOM.

164
00:09:17.809 --> 00:09:20.103
&gt;&gt; Update DOM, the next one?

165
00:09:20.103 --> 00:09:21.343
&gt;&gt; Convert.

166
00:09:21.343 --> 00:09:24.346
&gt;&gt; This is our function that we
haven't even shown here, but

167
00:09:24.346 --> 00:09:26.135
it's exactly what we had before.

168
00:09:26.135 --> 00:09:27.502
I hope that's okay, people.

169
00:09:27.502 --> 00:09:29.680
That's just to save space,
you can see there was no room.

170
00:09:29.680 --> 00:09:34.270
But this is taking an array
of three elements here,

171
00:09:34.270 --> 00:09:37.899
input, empty string, and handle, and

172
00:09:37.899 --> 00:09:43.132
producing a DOM element type
input with an accessor object

173
00:09:43.132 --> 00:09:48.939
to get links to that corresponding
DOM element in C++, okay?

174
00:09:48.939 --> 00:09:50.930
And then the final function here is?

175
00:09:50.930 --> 00:09:52.499
&gt;&gt; Find div.

176
00:09:52.499 --> 00:09:54.279
&gt;&gt; Thank you so much.

177
00:09:54.279 --> 00:09:55.696
And there it is.

178
00:09:55.696 --> 00:09:58.125
And that's gonna do
the work of figuring out,

179
00:09:58.125 --> 00:10:00.378
do we actually have to
update the real DOM?

180
00:10:00.378 --> 00:10:07.249
And then let's put our call stack here.

181
00:10:07.249 --> 00:10:12.725
And then maybe we can have our queue,
not to imply it's outside of JavaScript,

182
00:10:12.725 --> 00:10:15.926
but there's our callback
queue to the right.

183
00:10:15.926 --> 00:10:16.499
There we go.

184
00:10:16.499 --> 00:10:19.974
All right, and the event loop will check.

185
00:10:19.974 --> 00:10:21.762
Okay, good.

186
00:10:21.762 --> 00:10:27.067
All right, finally we hit what, Phil?

187
00:10:27.067 --> 00:10:32.124
&gt;&gt; We execute the set interval
function passing to it the arguments

188
00:10:32.124 --> 00:10:36.348
of the update DOM,
function definition, and 15.

189
00:10:36.348 --> 00:10:40.216
&gt;&gt; Update DOM, function definition, and

190
00:10:40.216 --> 00:10:44.092
the 15 milliseconds as the interval.

191
00:10:44.092 --> 00:10:48.994
And that's gonna set up
an interval over here with 15

192
00:10:48.994 --> 00:10:53.579
milliseconds, and the update DOM function,

193
00:10:53.579 --> 00:10:58.390
I need to get my energy backup,
update DOM function.

194
00:10:58.390 --> 00:11:01.933
Whoa, okay, nice, update DOM function.

195
00:11:01.933 --> 00:11:06.885
And 15 milliseconds later, well, yeah,
it's gonna run many, many times.

196
00:11:06.885 --> 00:11:11.764
Now we want to actually go and grab it
all and stick them on the page, well,

197
00:11:11.764 --> 00:11:16.039
on the condition that there's not yet
any elements on the page.

198
00:11:16.039 --> 00:11:16.886
Someone's gonna do it.

199
00:11:16.886 --> 00:11:19.781
Consider this the mounting
of the elements.

200
00:11:19.781 --> 00:11:20.844
So heard that term before?

201
00:11:20.844 --> 00:11:21.713
Okay,

