WEBVTT

1
00:00:00.050 --> 00:00:02.390
So now, what have we changed?

2
00:00:02.390 --> 00:00:07.370
Well, we're still not running updateDOM
on a loop anymore with setInterval.

3
00:00:07.370 --> 00:00:12.780
Now we're only running
updateDOM when data changes.

4
00:00:12.780 --> 00:00:14.270
How do we do that?

5
00:00:14.270 --> 00:00:19.503
When our data changes and
we want to update the value of name to Li,

6
00:00:19.503 --> 00:00:21.514
look inside our handle.

7
00:00:21.514 --> 00:00:25.422
We are going to run a function
we created called updateData.

8
00:00:25.422 --> 00:00:30.896
This is a more generic function
now than it was before,

9
00:00:30.896 --> 00:00:36.132
to which we can pass name as
the key that is gonna go and

10
00:00:36.132 --> 00:00:40.062
update the key name in our data object.

11
00:00:40.062 --> 00:00:46.170
And then, it's gonna assign to that
the value of Li in our data object.

12
00:00:46.170 --> 00:00:50.690
You can see it's doing that inside of
updateData where it's saying gotoData.

13
00:00:50.690 --> 00:00:55.824
Use the square bracket notation to
access the label which has been

14
00:00:55.824 --> 00:01:01.142
passed in as a string name and
set names value to e.target.value,

15
00:01:01.142 --> 00:01:05.806
which was based on the getter,
Li, in our DOM element, and

16
00:01:05.806 --> 00:01:08.916
then put Li into our JavaScript store.

17
00:01:08.916 --> 00:01:13.879
And then, run updateDom.

18
00:01:13.879 --> 00:01:21.440
Note that now we have data.name
in our creating vDOM.

19
00:01:21.440 --> 00:01:28.710
data.name is how we get the empty string,
and then later Li to be populated in vDOM.

20
00:01:28.710 --> 00:01:33.760
This code updateData is
code that we hook into.

21
00:01:33.760 --> 00:01:39.335
It is code that we hook into to handle
state, to handle data persisting

22
00:01:39.335 --> 00:01:44.154
in our application that ensures
that when data does change,

23
00:01:44.154 --> 00:01:49.349
we are going to rerun our updateDOM
function behind the scenes and

24
00:01:49.349 --> 00:01:53.590
ensure that it flows
through to update our page.

25
00:01:53.590 --> 00:01:58.872
We can hook into this functionality
that enables us to save and

26
00:01:58.872 --> 00:02:02.833
persist state, and
when that state changes,

27
00:02:02.833 --> 00:02:07.711
is updated, will automatically
[SOUND] run the updateDOM

28
00:02:07.711 --> 00:02:12.302
function that passes all of
that through to the view.

29
00:02:12.302 --> 00:02:14.960
We can hook into that.

30
00:02:14.960 --> 00:02:16.540
That's all hook means.

31
00:02:16.540 --> 00:02:20.968
Hook into that functionality to give us
access to persistent state that, when

32
00:02:20.968 --> 00:02:25.884
changed, well, that's just data in memory,
that when changed, updates our view.

33
00:02:25.884 --> 00:02:30.297
That is known as a state hook.

34
00:02:30.297 --> 00:02:32.290
It's very profound, people.

35
00:02:32.290 --> 00:02:35.817
Okay, so let's just adjust this a bit for
what we did here.

36
00:02:35.817 --> 00:02:40.503
So now let's say we had not
named directly declared, but

37
00:02:40.503 --> 00:02:45.967
we had instead an object of data
that is going to be our state store,

38
00:02:45.967 --> 00:02:50.455
our store of data in our app,
or at least related to this

39
00:02:50.455 --> 00:02:55.359
particular bit of our app,
a bit of our content on our page.

40
00:02:55.359 --> 00:02:59.240
And it has name is an empty string.

41
00:02:59.240 --> 00:03:06.197
As before, we know the first time we
ran updateDOM, we would've gone in and

42
00:03:06.197 --> 00:03:10.994
evaluated here data.name
to be that empty string.

43
00:03:10.994 --> 00:03:16.026
And then here, in vDOM position 1
we would've evaluated hello and

44
00:03:16.026 --> 00:03:20.368
then data.name,
which will therefore have evaluated.

45
00:03:20.368 --> 00:03:22.335
Do you remember we had empty string and

46
00:03:22.335 --> 00:03:26.282
then hello empty string here on our
first path, so to speak, of updateDOM?

47
00:03:26.282 --> 00:03:32.350
Yep, and then, when the user took action
and typed Li, and Li showed up on this,

48
00:03:32.350 --> 00:03:38.356
the handle function would, instead of
assigning name directly, would have.

49
00:03:38.356 --> 00:03:42.748
And actually probably it's quite good that
we've got a bit of a space inside of here,

50
00:03:42.748 --> 00:03:45.860
because we may be even able to show it,
we would have run.

51
00:03:45.860 --> 00:03:50.320
So e would still be our
object describing the event.

52
00:03:50.320 --> 00:03:51.430
Alexa, can you help me out here?

53
00:03:51.430 --> 00:03:52.260
Do you mind?

54
00:03:52.260 --> 00:03:56.417
What would we be running now
instead of directly updating name?

55
00:03:56.417 --> 00:03:59.540
What would be rerunning
in inside of handle?

56
00:03:59.540 --> 00:04:02.741
&gt;&gt; Yes, we're gonna invoke updateData.

57
00:04:02.741 --> 00:04:06.117
&gt;&gt; Yeah, and by the way, just to be clear,
we're just going back through our code and

58
00:04:06.117 --> 00:04:07.720
making the tweaks with this approach.

59
00:04:07.720 --> 00:04:09.697
Yeah, updateData.

60
00:04:09.697 --> 00:04:13.840
&gt;&gt; And we're gonna pass in the string
name as our first argument.

61
00:04:13.840 --> 00:04:15.060
&gt;&gt; Perfect.

62
00:04:15.060 --> 00:04:19.410
&gt;&gt; And then, as our second argument,
the value on the event target,

63
00:04:19.410 --> 00:04:23.310
which is gonna get the value
that's stored on that linked-

64
00:04:24.520 --> 00:04:25.126
&gt;&gt; First object,

65
00:04:25.126 --> 00:04:26.950
we have first DOM element
we created earlier.

66
00:04:26.950 --> 00:04:28.710
&gt;&gt; Yeah, which was-
&gt;&gt; Which in this example was Li.

67
00:04:28.710 --> 00:04:34.744
&gt;&gt; Li, exactly and so I guess I could show
that with my green, right, initially.

68
00:04:34.744 --> 00:04:38.620
That was what came out of
here from values call.

69
00:04:38.620 --> 00:04:43.644
So e.target.value would have evaluated to
Li, and then that is what's passed in.

70
00:04:43.644 --> 00:04:49.247
Technically, that would actually have
evaluated to a JavaScript string there,

71
00:04:49.247 --> 00:04:53.950
so we'll do it in white to show
it's come into JavaScript now.

72
00:04:53.950 --> 00:04:57.257
And there it is, Li, and
that's gonna create a new what, Alexa?

73
00:04:57.257 --> 00:04:58.606
&gt;&gt; Execution context.

74
00:04:58.606 --> 00:05:01.050
&gt;&gt; Execution context, exactly.

75
00:05:01.050 --> 00:05:08.320
Into it we go, so
we're updating our data here.

76
00:05:08.320 --> 00:05:15.010
We created a function that looks like all
it's doing is updating our data in memory.

77
00:05:15.010 --> 00:05:19.190
But actually, it's low-key going
to rerun updateDOM, fantastic.

78
00:05:19.190 --> 00:05:21.104
As long as we restrict our developers,

79
00:05:21.104 --> 00:05:25.048
our engineering team to never update data
directly, we probably close over it,

80
00:05:25.048 --> 00:05:28.410
provide closure to lock it down,
so it can't be accessed.

81
00:05:28.410 --> 00:05:32.055
But that gets tricky in terms
of the actual implementation,

82
00:05:32.055 --> 00:05:33.416
although not beyond.

83
00:05:33.416 --> 00:05:37.100
We are going to give the impression
of just updating data.

84
00:05:37.100 --> 00:05:41.887
But really, we are also going to run our,
not every 50 milliseconds now, but

85
00:05:41.887 --> 00:05:46.120
whenever needed on demand, but
secretly, our updateDom function.

86
00:05:46.120 --> 00:05:50.628
But let's go into updateData, and what
are our parameter argument combos here?

87
00:05:50.628 --> 00:05:55.987
&gt;&gt; Label, which is going to be name.

88
00:05:55.987 --> 00:05:56.709
&gt;&gt; Perfect.
&gt;&gt; String name.

89
00:05:56.709 --> 00:06:00.260
&gt;&gt; String name, yeah, this isn't
always easy here, name, exactly.

90
00:06:00.260 --> 00:06:04.071
&gt;&gt; And then value,
which is gonna be the string Li.

91
00:06:04.071 --> 00:06:06.572
&gt;&gt; Perfect, string Li.

92
00:06:06.572 --> 00:06:09.049
And then, we're doing data.

93
00:06:09.049 --> 00:06:10.183
Well, tell me what's happening here.

94
00:06:10.183 --> 00:06:15.096
&gt;&gt; Yeah, so we look at our data global
variable, and it's an object, and using

95
00:06:15.096 --> 00:06:20.482
bracket notation, we are gonna pass in the
string name and the name property there.

96
00:06:20.482 --> 00:06:23.700
&gt;&gt; Perfect, beautiful, and assign it to?

97
00:06:23.700 --> 00:06:24.740
&gt;&gt; The string Li.

98
00:06:24.740 --> 00:06:27.547
&gt;&gt; Beautiful, so we're back where we were.

99
00:06:27.547 --> 00:06:32.240
We then are going to run
what crucial function?

100
00:06:32.240 --> 00:06:33.609
&gt;&gt; updateDOM.
&gt;&gt; updateDOM.

101
00:06:33.609 --> 00:06:36.397
Now, at this point,
it's not running every 50 milliseconds.

102
00:06:36.397 --> 00:06:41.939
It's actually going to run inside of,
yeah, exactly, exactly.

103
00:06:41.939 --> 00:06:44.585
Right, exactly, inside of updateData.

104
00:06:44.585 --> 00:06:48.869
It's running inside of updateData
after that little semicolon,

105
00:06:48.869 --> 00:06:51.172
updateDOM is running right there.

106
00:06:51.172 --> 00:06:54.662
And then creating the new virtual DOM,

107
00:06:54.662 --> 00:06:59.318
it's using data.name to
populate our vDOM through

108
00:06:59.318 --> 00:07:04.944
the createVDOM call with data.name,
which is what, Alexa?

109
00:07:04.944 --> 00:07:07.010
&gt;&gt; Li.
&gt;&gt; Li, and then, hello?

110
00:07:07.010 --> 00:07:08.390
&gt;&gt; Li.
&gt;&gt; Exactly, hello Li.

111
00:07:09.420 --> 00:07:13.956
And so we end up where we were before,
but now without running our

112
00:07:13.956 --> 00:07:19.340
updateDom function 60 times a second,
but with no cost, no loss.

113
00:07:19.340 --> 00:07:22.571
We're still updating
whenever the data changes.

114
00:07:22.571 --> 00:07:26.775
We're still automatically propagating
that through to the view,

115
00:07:26.775 --> 00:07:30.324
based on the data change, and
based on our description.

116
00:07:30.324 --> 00:07:34.576
Well, not even based on the data change,
based on the data and based on our

117
00:07:34.576 --> 00:07:39.172
description of what the view should look
like in our createVDOM function call,

118
00:07:39.172 --> 00:07:42.465
which creates our data-specific
virtual DOM array, or

119
00:07:42.465 --> 00:07:45.120
visual DOM array in JavaScript.

120
00:07:45.120 --> 00:07:48.969
And if the data does change,
we're doing that all over again, but

121
00:07:48.969 --> 00:07:50.490
only if the data changes.

122
00:07:50.490 --> 00:07:54.560
But we don't need to then think, make
sure I go and actually update the data.

123
00:07:54.560 --> 00:08:01.280
I just get to do it automatically by
hooking into this updateData function.

124
00:08:01.280 --> 00:08:06.100
So we can make our updateName
function adn updateData function and

125
00:08:06.100 --> 00:08:09.490
have it work for
any piece of data in our app.

126
00:08:09.490 --> 00:08:10.558
We just hook into it.

127
00:08:10.558 --> 00:08:12.156
So they call it a hook.

128
00:08:12.156 --> 00:08:17.155
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH] That sounds very, okay.

129
00:08:17.155 --> 00:08:19.703
We can alternatively switch to
running requestAnimationFrame,

130
00:08:19.703 --> 00:08:22.479
rather than updateDOM directly on
data change, so it never prioritizes

131
00:08:22.479 --> 00:08:25.550
our animations, truly optimized with
respect to other priorities now.

132
00:08:25.550 --> 00:08:30.549
Yeah, so that would be that we
could have updateDOM at the end

133
00:08:30.549 --> 00:08:33.760
of doing its work run itself again.

134
00:08:33.760 --> 00:08:37.318
But wrap the call to updateDOM
inside a requestAnimationFrame,

135
00:08:37.318 --> 00:08:39.840
which will then trigger updateDOM to run,
but

136
00:08:39.840 --> 00:08:43.785
delay it to run at the back of the
callback queue, such that anything else

137
00:08:43.785 --> 00:08:47.622
it needs to run in between,
it could be rendering, it could be calls.

138
00:08:47.622 --> 00:08:48.755
But that's still,

139
00:08:48.755 --> 00:08:53.370
therefore, gonna be creating our virtual
DOM x number of times per second.

140
00:08:53.370 --> 00:08:58.780
Still inefficient, but at least it's
not blocking other things executing.

141
00:08:58.780 --> 00:09:03.493
It will only do so as long as there
is nothing else on the call stack or

142
00:09:03.493 --> 00:09:08.461
callback queue, no scroll events,
nothing else that's gonna cause

143
00:09:08.461 --> 00:09:13.790
a user to see a block based on
running updateDOM too many times.

144
00:09:13.790 --> 00:09:16.687
Okay, let's have thumbs on this code.

145
00:09:16.687 --> 00:09:18.260
Okay, people are clear.

146
00:09:18.260 --> 00:09:24.310
When Ian's got a frown,
I'm nervous to see, but yeah, please.

147
00:09:24.310 --> 00:09:25.981
Go ahead, Justice, please.

148
00:09:25.981 --> 00:09:30.460
&gt;&gt; So we got the function handle, and
then it's calling the updateData function.

149
00:09:30.460 --> 00:09:35.035
Are we separating that, creating a new
function updateData just because it's

150
00:09:35.035 --> 00:09:39.309
doing its own little job there-
&gt;&gt; Yeah, and actually, really,

151
00:09:39.309 --> 00:09:41.734
I wanna make that really generic.

152
00:09:41.734 --> 00:09:44.148
It's not really generic enough here,
is it, right?

153
00:09:44.148 --> 00:09:50.281
I don't think because, actually
maybe it's relatively more generic.

154
00:09:50.281 --> 00:09:53.150
Actually, how this is
implemented in practice is,

155
00:09:53.150 --> 00:09:57.067
when you even create the data
associated with this displayed content,

156
00:09:57.067 --> 00:10:00.868
you're actually, well, not in practice,
one way you could do it.

157
00:10:00.868 --> 00:10:03.170
So yes, we are splitting that out there.

158
00:10:03.170 --> 00:10:04.850
Sorry to interrupt, Justice.

159
00:10:04.850 --> 00:10:07.498
Do you wanna continue with it?

160
00:10:07.498 --> 00:10:09.081
&gt;&gt; I was just asking, more or less,

161
00:10:09.081 --> 00:10:12.515
are you splitting it out just because
it's doing its own specific job?

162
00:10:12.515 --> 00:10:13.510
&gt;&gt; Yeah.
&gt;&gt; Okay,

163
00:10:13.510 --> 00:10:16.247
&gt;&gt; But notice that we could then use that

164
00:10:16.247 --> 00:10:20.410
updateData function for
a whole slew of data in our app.

165
00:10:20.410 --> 00:10:22.265
So we could then use it more generally.

166
00:10:22.265 --> 00:10:24.070
And that's where the notion
of it being a hook.

167
00:10:24.070 --> 00:10:28.972
It's some code written that we can
hook into that performs a task that

168
00:10:28.972 --> 00:10:33.873
changes the behavior, in this case,
of our handle, and, I guess,

169
00:10:33.873 --> 00:10:37.337
of our UI component,
the creation of our view and

170
00:10:37.337 --> 00:10:42.180
the relationship back to it,
which the handle function is part of.

171
00:10:43.530 --> 00:10:46.410
In practice,
one other way we could implement this is,

172
00:10:46.410 --> 00:10:49.180
right now we are creating
our data in global.

173
00:10:49.180 --> 00:10:54.030
We may want to create that data,
and when it's created,

174
00:10:54.030 --> 00:10:59.488
we can actually have the creation
process be storing that data,

175
00:10:59.488 --> 00:11:02.739
not directly, as we're doing here.

176
00:11:02.739 --> 00:11:07.823
Data is an object with name empty string,
but actually do the assignment,

177
00:11:07.823 --> 00:11:11.937
do the saving of that data
through a function call, as well,

178
00:11:11.937 --> 00:11:15.024
whose output could be
the updater function.

179
00:11:15.024 --> 00:11:20.479
Such that, later on, when we want
to go ahead and update that data,

180
00:11:20.479 --> 00:11:24.407
we would use the associated
updater function and

181
00:11:24.407 --> 00:11:29.040
know that it will be
targeting exactly that data.

182
00:11:29.040 --> 00:11:34.350
And that is exactly how it's done in a
certain popular framework known as React.

183
00:11:34.350 --> 00:11:35.290
John, please.

184
00:11:35.290 --> 00:11:35.912
&gt;&gt; I had a question.

185
00:11:35.912 --> 00:11:40.247
Is there a specific reason that you
are using data rather than closure,

186
00:11:40.247 --> 00:11:41.844
or you can do the closure?

187
00:11:41.844 --> 00:11:43.025
I'm not sure.

188
00:11:43.025 --> 00:11:47.790
&gt;&gt; As opposed to you doing any closure
here, just because visually, it's just.

189
00:11:47.790 --> 00:11:49.868
So in terms of diagramming, I'm trying to,

190
00:11:49.868 --> 00:11:52.614
closure is my favorite concept
in JavaScript, probably.

191
00:11:52.614 --> 00:11:55.380
I mean, I do think it is very, very cool.

192
00:11:55.380 --> 00:11:59.139
It's so cool, the idea that, if you've
got functions running at a later time,

193
00:11:59.139 --> 00:12:02.400
when a user does an action or
whatever, it's being called back that,

194
00:12:02.400 --> 00:12:05.388
appropriately, all the data you
could imagine would be there is

195
00:12:05.388 --> 00:12:09.350
right there in its backpack, right, and
it's closed over variable environment.

196
00:12:09.350 --> 00:12:12.010
I think that's really amazing.

197
00:12:12.010 --> 00:12:17.487
However, we're not here for that today,
and therefore, minimizing complexity,

198
00:12:17.487 --> 00:12:22.660
I've done everything in global to remove
having to do anything that would work,

199
00:12:22.660 --> 00:12:25.777
but via one of the most,
I think, profound, but

200
00:12:25.777 --> 00:12:29.000
also can be tricky to add
concepts out of closure.

201
00:12:29.000 --> 00:12:31.908
So we are holding off it
doing everything in global.

202
00:12:31.908 --> 00:12:33.340
We wouldn't in practice.

203
00:12:33.340 --> 00:12:38.131
Hooray, we managed to stop running

204
00:12:38.131 --> 00:12:43.320
our updateDOM 60 times a second.

205
00:12:43.320 --> 00:12:45.571
Although, to be fair,
in our final example,

206
00:12:45.571 --> 00:12:50.000
we're gonna go back to it just because,
I don't know, it's easier to work with.

207
00:12:50.000 --> 00:12:55.943
But hooray, we are now going to wrestle
with the fact that, yes, I get to create

208
00:12:55.943 --> 00:13:03.190
a full jobs representation in a one-to-one
description in my createVDOM function.

209
00:13:03.190 --> 00:13:04.033
Good for me.

210
00:13:04.033 --> 00:13:09.954
No working out upon different changes from
the user exactly what to update here.

211
00:13:09.954 --> 00:13:15.615
Just recreate the whole thing from my
one-to-one description in createVDOM,

212
00:13:15.615 --> 00:13:19.205
data to view, one to one,
beautiful in one place.

213
00:13:19.205 --> 00:13:22.485
Fine, however, that semi-visual coding,

214
00:13:22.485 --> 00:13:27.790
the ability to then compose that and
move it around comes at a cost, right?

215
00:13:27.790 --> 00:13:32.671
Now I'm simplistically then taking each
element and recreating them in full, just

216
00:13:32.671 --> 00:13:37.730
as I do here with the virtual DOM, and
recreating them in full on the actual DOM.

217
00:13:37.730 --> 00:13:38.930
But no need!

218
00:13:38.930 --> 00:13:40.840
I have an archived history of the project.

219
00:13:40.840 --> 00:13:46.427
Well, I could do, perhaps I could archive,
as it looks like I'm gonna sorta do here,

220
00:13:46.427 --> 00:13:51.182
of the previous data to JS representation
of what's gonna be displayed.

221
00:13:51.182 --> 00:13:55.710
I can compare the two of them and
figure out what actually changed.

222
00:13:55.710 --> 00:14:00.546
And that is what we are going
to do in our final code, people.

