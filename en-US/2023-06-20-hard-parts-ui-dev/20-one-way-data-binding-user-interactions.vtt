WEBVTT

1
00:00:00.000 --> 00:00:02.172
However, this is not a closed system,
right?

2
00:00:02.172 --> 00:00:05.655
This is a system that's all about
the user actions that come along.

3
00:00:05.655 --> 00:00:09.651
And so along come our user actions.

4
00:00:13.404 --> 00:00:14.497
I've not missed anything, have I?

5
00:00:14.497 --> 00:00:21.380
No, yeah, okay, perfect,
user actions come along, user actions.

6
00:00:21.380 --> 00:00:25.223
And our first user action is,
let's say again, forgive me for being so

7
00:00:25.223 --> 00:00:27.029
over the top here but one minute.

8
00:00:27.029 --> 00:00:31.420
And it's going to be clicking on input,

9
00:00:31.420 --> 00:00:36.465
clicking on input, which will, which will.

10
00:00:36.465 --> 00:00:43.045
Flash a little smile at the camera there,

11
00:00:43.045 --> 00:00:50.002
[LAUGH] which will send
an event to the click.

12
00:00:50.002 --> 00:00:52.934
Sorry, to the click handler here saying,

13
00:00:52.934 --> 00:00:57.986
please place this handleclick function,
or at least the reference to its

14
00:00:57.986 --> 00:01:02.970
position in JavaScript memory in
the queue of functions to be executed.

15
00:01:02.970 --> 00:01:07.562
And that's where it'll first go,
handleclick at

16
00:01:07.562 --> 00:01:12.486
around one minute will appear
in this callback queue.

17
00:01:12.486 --> 00:01:14.999
At around one minute,
let's put in the one minute as well so

18
00:01:14.999 --> 00:01:16.470
we know it's there at one minute.

19
00:01:16.470 --> 00:01:20.115
Okay, and now the event loop.

20
00:01:20.115 --> 00:01:24.044
Well, you tell me, Alexa, what's
happening here as a specialist in acing,

21
00:01:24.044 --> 00:01:25.360
what's happening here?

22
00:01:25.360 --> 00:01:26.764
&gt;&gt; Well, first, the event loop checks

23
00:01:26.764 --> 00:01:28.023
if all our global code is-
&gt;&gt; Uh-huh.

24
00:01:28.023 --> 00:01:29.089
&gt;&gt; Done running.
&gt;&gt; Sorry, so

25
00:01:29.089 --> 00:01:32.452
let's make sure our global
execution context is there, yep.

26
00:01:32.452 --> 00:01:34.231
&gt;&gt; And if the call stack is empty,
which it is.

27
00:01:34.231 --> 00:01:37.146
&gt;&gt; Which it is cuz we're at
about one minute here, exactly.

28
00:01:37.146 --> 00:01:42.072
&gt;&gt; So then it will allow the handleclick
function to come back into the call stack.

29
00:01:42.072 --> 00:01:46.841
&gt;&gt; Perfect, or yeah, be called back
into JavaScript to be executed on

30
00:01:46.841 --> 00:01:51.457
the call stack because the event
loop was checking very quickly.

31
00:01:51.457 --> 00:01:53.880
Sorry, yeah, keep going, sorry.

32
00:01:53.880 --> 00:01:55.700
[LAUGH]
&gt;&gt; And

33
00:01:55.700 --> 00:01:56.943
then it's gone from the callback queue.

34
00:01:56.943 --> 00:02:00.029
&gt;&gt; Right, right, right, so
gone from the callback queue.

35
00:02:00.029 --> 00:02:04.359
When something gets added to
the call stack by JavaScript,

36
00:02:04.359 --> 00:02:09.396
it automatically gets parens,
which mean only one thing, people.

37
00:02:09.396 --> 00:02:11.509
What's gonna be added to our parens?

38
00:02:11.509 --> 00:02:14.885
Exactly, this is building up suspense,
which means, everybody, a brand new what?

39
00:02:14.885 --> 00:02:16.952
&gt;&gt; Execution context.

40
00:02:16.952 --> 00:02:20.967
&gt;&gt; Machik thinks they're above.

41
00:02:20.967 --> 00:02:23.721
&gt;&gt; There's a very good choir,
I'm like not trying to it.

42
00:02:23.721 --> 00:02:29.057
&gt;&gt; [LAUGH] Which means, okay,
Machik, it creates a brand new?

43
00:02:29.057 --> 00:02:30.060
&gt;&gt; Execution context.

44
00:02:30.060 --> 00:02:30.860
&gt;&gt; Thanks, Machik.

45
00:02:30.860 --> 00:02:34.158
&gt;&gt; [LAUGH]
&gt;&gt; To be fair,

46
00:02:34.158 --> 00:02:36.733
though, that was vaguely problematic, but

47
00:02:36.733 --> 00:02:40.476
I feel that was problematic by me
to there demand you to repeat it.

48
00:02:40.476 --> 00:02:44.308
&gt;&gt; [LAUGH]
&gt;&gt; I don't know, that's actually vaguely.

49
00:02:44.308 --> 00:02:47.993
All right, that's like making sure,
yeah, that's not fair.

50
00:02:47.993 --> 00:02:53.070
Thank you, Machik, you're right,
you have, I don't know.

51
00:02:53.070 --> 00:02:56.564
It starts off as kind of funny and
cute doing it and

52
00:02:56.564 --> 00:02:59.898
then it starts to become problematic and
odd.

53
00:02:59.898 --> 00:03:01.692
All right, not you, me.

54
00:03:01.692 --> 00:03:02.677
All right, so there we go.

55
00:03:02.677 --> 00:03:05.579
&gt;&gt; [LAUGH]
&gt;&gt; Good, all right,

56
00:03:05.579 --> 00:03:09.794
so handleclick, what's the only
thing that it's allowed to do?

57
00:03:09.794 --> 00:03:12.524
Machik, what's the only thing
that it's allowed to do at least?

58
00:03:12.524 --> 00:03:16.659
Well, there are only two things, but
the first of those things allowed to do?

59
00:03:16.659 --> 00:03:20.520
&gt;&gt; Handle the click,
it just sets the post to blanks.

60
00:03:20.520 --> 00:03:22.473
&gt;&gt; Exactly, so in other words,

61
00:03:22.473 --> 00:03:27.409
the only thing it's allowed to do is
change data, right, to change data.

62
00:03:27.409 --> 00:03:29.725
So that's replaced undefined
with an empty string,

63
00:03:29.725 --> 00:03:31.530
maybe I'll clear that fully in a second.

64
00:03:31.530 --> 00:03:32.863
&gt;&gt; And then it calls the data.

65
00:03:32.863 --> 00:03:35.646
&gt;&gt; And then it calls,
exactly, calls that, perfect.

66
00:03:35.646 --> 00:03:39.118
So post is set to an empty string, and

67
00:03:39.118 --> 00:03:44.046
then we call our converter function,
dataToView.

68
00:03:44.046 --> 00:03:45.848
And we create a brand new,
everyone, together.

69
00:03:45.848 --> 00:03:47.102
&gt;&gt; Execution context.

70
00:03:47.102 --> 00:03:53.271
&gt;&gt; Execution context, beautiful,
and that goes on the call stack.

71
00:03:53.271 --> 00:03:55.165
That goes on the call stack.

72
00:03:55.165 --> 00:03:56.619
See, I apologize for that, okay.

73
00:03:56.619 --> 00:03:59.727
Now, jsInput.value, I mean,

74
00:03:59.727 --> 00:04:04.500
I think if UI engineering
can become a bit tedious,

75
00:04:04.500 --> 00:04:09.940
that's no bad thing because
tedious means predictable.

76
00:04:09.940 --> 00:04:12.599
Tedious means I'm running through
the same function on my data change every

77
00:04:12.599 --> 00:04:13.104
single time.

78
00:04:13.104 --> 00:04:17.693
Tedious means not figuring out a complex
flow of changes to data that I haven't

79
00:04:17.693 --> 00:04:19.232
fully tracked in memory.

80
00:04:19.232 --> 00:04:22.536
And a complex flow of changes of view
that do not have corresponding data

81
00:04:22.536 --> 00:04:25.244
tracked in memory based on
a series of handlers being run.

82
00:04:25.244 --> 00:04:29.565
No, change data, only thing that can
change, and then run my dataToView.

83
00:04:29.565 --> 00:04:32.293
I'm calling it dTV, dataToView here.

84
00:04:32.293 --> 00:04:37.871
That is going to set my value, so
post is now an empty string, right?

85
00:04:37.871 --> 00:04:41.057
So Machik, what's its-
&gt;&gt; So it's gonna be an empty string now.

86
00:04:41.057 --> 00:04:42.304
&gt;&gt; Yeah, perfect, exactly, thank you.

87
00:04:42.304 --> 00:04:48.339
Empty string, which is now gonna
be set as the value on our input.

88
00:04:48.339 --> 00:04:52.713
I'm sorry I keep switching my
single quotes and double quotes,

89
00:04:52.713 --> 00:04:55.715
it's just trying to
make sure they show up.

90
00:04:55.715 --> 00:04:56.813
There you go, that's an excuse.

91
00:04:56.813 --> 00:05:04.538
And that now is showing up on the page
itself cuz that bit's automatic,

92
00:05:04.538 --> 00:05:08.547
the render step there is automatic.

93
00:05:08.547 --> 00:05:14.532
Perfect and we are, but we are going
to be a bit over the top here, right?

94
00:05:14.532 --> 00:05:15.317
Go ahead, Machik.

95
00:05:15.317 --> 00:05:18.766
&gt;&gt; We forgot the other part last time,
[LAUGH] I think.

96
00:05:18.766 --> 00:05:21.775
&gt;&gt; I'm just saying the text content
was not set, I mean, we didn't do.

97
00:05:21.775 --> 00:05:23.340
&gt;&gt; We did, undefined.

98
00:05:23.340 --> 00:05:24.363
&gt;&gt; On the view.

99
00:05:24.363 --> 00:05:27.215
&gt;&gt; Okay,
I guess it's an empty string, right?

100
00:05:27.215 --> 00:05:30.992
Yeah, okay, but
we don't see an empty string.

101
00:05:30.992 --> 00:05:36.691
&gt;&gt; We didn't have the, actually the-
&gt;&gt; We wrote dataToView has a track of all,

102
00:05:36.691 --> 00:05:39.156
exactly, of all of the information.

103
00:05:39.156 --> 00:05:42.636
It's not directly displaying
whatever the data is,

104
00:05:42.636 --> 00:05:46.357
it's conditional on that data determining,
exactly.

105
00:05:46.357 --> 00:05:52.001
In this case, we basically said text
context will be post, which is undefined,

106
00:05:52.001 --> 00:05:56.911
which is, helpfully, text content
turns that into an empty string.

107
00:05:56.911 --> 00:06:00.272
And therefore, we really don't have
any text here, so the div stays empty.

108
00:06:00.272 --> 00:06:01.390
And that's good, that's what we want.

109
00:06:01.390 --> 00:06:05.639
So now, this time, though, well,
more or less the same, I guess.

110
00:06:05.639 --> 00:06:06.505
&gt;&gt; Yeah, it's empty still.

111
00:06:06.505 --> 00:06:13.090
Exactly, jsDiv., what matters is we
can track it all through one function.

112
00:06:13.090 --> 00:06:17.051
So data is now that, I should probably
be consistent with my quotes there.

113
00:06:17.051 --> 00:06:20.490
And that is what's set as the div's text.

114
00:06:20.490 --> 00:06:21.993
textContent set on jsDiv,

115
00:06:21.993 --> 00:06:25.923
the access object sets its text to
an empty string and nothing shows up.

116
00:06:25.923 --> 00:06:32.090
Beautiful, okay, now, our handleclick
function is finished executing.

117
00:06:32.090 --> 00:06:37.852
It's popped off the call stack,
let's do a little

118
00:06:37.852 --> 00:06:43.355
clear up at our execution context,
or close up.

119
00:06:43.355 --> 00:06:46.245
We know that our callback
queue is already empty, and

120
00:06:46.245 --> 00:06:48.952
we're getting the hang of this now,
aren't we?

121
00:06:48.952 --> 00:06:52.646
There it is, and
now more user action comes.

122
00:06:52.646 --> 00:06:54.568
They clicked so they could start writing.

123
00:06:54.568 --> 00:06:57.012
And they start writing what?

124
00:06:57.012 --> 00:06:58.961
They start writing, typing, sorry.

125
00:07:02.965 --> 00:07:07.149
It's gotta be our friend y, there we are.

126
00:07:07.149 --> 00:07:10.688
And that is going to show
up in the input field, and

127
00:07:10.688 --> 00:07:15.596
it's gonna immediately show up on our DOM,
in that value position.

128
00:07:15.596 --> 00:07:21.167
If we're saying that everything the user
sees needs to depend on underlying data,

129
00:07:21.167 --> 00:07:25.874
[SOUND] it ain't pretty that there's
data here, there's data here.

130
00:07:25.874 --> 00:07:30.732
By the way, the CSS model of the page also
can have data that determines what shows

131
00:07:30.732 --> 00:07:31.669
up on the page.

132
00:07:31.669 --> 00:07:36.312
In a sense, our HTML code was
an initial population of data,

133
00:07:36.312 --> 00:07:39.600
only one time display of data, but it was.

134
00:07:39.600 --> 00:07:43.975
Again, it's like, how do we have four
different places to store data that can

135
00:07:43.975 --> 00:07:45.980
then determine what the user sees?

136
00:07:45.980 --> 00:07:48.819
And at least three out of
four of them are changeable.

137
00:07:48.819 --> 00:07:51.588
Well, that's why we're
gonna be really restrictive

138
00:07:51.588 --> 00:07:55.214
if we're actually gonna have JavaScript
as our single source of data.

139
00:07:55.214 --> 00:08:00.120
To the point that I won't even see this as
necessarily data so much as a submission.

140
00:08:00.120 --> 00:08:04.557
Because when that input is filled in,
it's gonna trigger

141
00:08:04.557 --> 00:08:09.272
the handleInput function to be
passed to the callback queue.

142
00:08:09.272 --> 00:08:13.124
Where, Ian, can you help me out?

143
00:08:13.124 --> 00:08:15.323
We're like one minute and one millisecond.

144
00:08:15.323 --> 00:08:20.248
And handleInput cuz the user
has typed their name, Y.

145
00:08:20.248 --> 00:08:23.253
handleInput has now been
added to the callback queue,

146
00:08:23.253 --> 00:08:25.353
what's gonna happen in JavaScript?

147
00:08:25.353 --> 00:08:28.691
&gt;&gt; Well, since it's in the callback queue,
we're gonna see, I mean,

148
00:08:28.691 --> 00:08:32.443
with the event loop, we're gonna make
sure that nothing is in the call stack.

149
00:08:32.443 --> 00:08:33.329
&gt;&gt; Yeah.

150
00:08:33.329 --> 00:08:36.506
&gt;&gt; Well, except for the global function.

151
00:08:36.506 --> 00:08:40.551
And then we're gonna execute,
do we handle the input?

152
00:08:40.551 --> 00:08:41.909
Yes, cuz we typed Y.

153
00:08:41.909 --> 00:08:42.988
&gt;&gt; Right, exactly.

154
00:08:42.988 --> 00:08:46.980
&gt;&gt; We are going to assign
our piece of data post.

155
00:08:46.980 --> 00:08:51.786
&gt;&gt; Hold on, so hold on, we're gonna
execute handleInput, so it's a new.

156
00:08:51.786 --> 00:08:54.496
Okay, you can do this,
Ian, it's a new what?

157
00:08:54.496 --> 00:08:55.919
&gt;&gt; Okay, it's a new execution context.

158
00:08:55.919 --> 00:08:56.619
&gt;&gt; Yes, beautiful.

159
00:08:56.619 --> 00:08:59.227
&gt;&gt; [LAUGH]
&gt;&gt; Exactly, brand new execution context.

160
00:08:59.227 --> 00:09:01.323
Exactly, well done, exactly.

161
00:09:01.323 --> 00:09:06.056
Into it we go and you're right,
the only thing we can do is update data.

162
00:09:06.056 --> 00:09:07.218
&gt;&gt; Yes.
&gt;&gt; Tell me about it.

163
00:09:07.218 --> 00:09:10.580
&gt;&gt; So we are going to take
the piece of data called post.

164
00:09:10.580 --> 00:09:14.408
&gt;&gt; Yep, well, the identifier for
a piece of data called post, yep.

165
00:09:14.408 --> 00:09:15.574
&gt;&gt; Yes.
&gt;&gt; Yeah.

166
00:09:15.574 --> 00:09:20.894
&gt;&gt; And then we are going
to assign it to the result

167
00:09:20.894 --> 00:09:26.214
of accessing the value
property of jsInput,

168
00:09:26.214 --> 00:09:30.553
but jsInput is gonna be a-
&gt;&gt; Accessor object.

169
00:09:30.553 --> 00:09:34.867
&gt;&gt; An accessor object that we got cuz
we can't just get stuff from the DOM.

170
00:09:34.867 --> 00:09:36.536
&gt;&gt; Yeah, because there's C++ objects.

171
00:09:36.536 --> 00:09:38.035
It's beautiful, Ian, it's wonderful.

172
00:09:38.035 --> 00:09:42.953
&gt;&gt; So we're reading it from the DOM
through that accessor object to get

173
00:09:42.953 --> 00:09:44.862
the value of the jsInput.

174
00:09:44.862 --> 00:09:45.531
&gt;&gt; Yes.

175
00:09:45.531 --> 00:09:47.710
&gt;&gt; Assign post to that value.

176
00:09:47.710 --> 00:09:49.960
&gt;&gt; Yes, so we grab it, and actually,

177
00:09:49.960 --> 00:09:54.620
it's gonna turn into a JavaScript
string that we end up assigning there.

178
00:09:54.620 --> 00:10:00.206
Note, I'm now changing from green,
[COUGH] which was a user submission,

179
00:10:00.206 --> 00:10:03.643
I'm gonna call it,
into saving it in white.

180
00:10:03.643 --> 00:10:08.368
It's a JavaScript string, there it is.

181
00:10:08.368 --> 00:10:10.406
That's great and then we've changed data.

182
00:10:10.406 --> 00:10:13.915
It's all we did, and so Ian,
what are we now going to call?

183
00:10:13.915 --> 00:10:16.902
&gt;&gt; We're gonna call our
function dataToView.

184
00:10:16.902 --> 00:10:20.736
&gt;&gt; dataToView converter,
brand new execution context.

185
00:10:20.736 --> 00:10:23.874
I call it a converter function, right,

186
00:10:23.874 --> 00:10:27.301
because it converts our
data into our view.

187
00:10:27.301 --> 00:10:31.579
Now, it might do it with a bunch of
conditionals to determine exactly

188
00:10:31.579 --> 00:10:36.175
what to display, but its input is
JavaScript data and its output is view.

189
00:10:36.175 --> 00:10:40.632
It's content the user sees
into dataToView convert we go.

190
00:10:40.632 --> 00:10:46.477
And John, if you don't mind,
over to you, we are going to evaluate?

191
00:10:46.477 --> 00:10:53.027
&gt;&gt; jsInput.value set, etc., and
we will check if post equals undefined.

192
00:10:53.027 --> 00:10:56.845
And because it's not equal to undefined,

193
00:10:56.845 --> 00:11:02.794
we will get post's value and
set input's value to post's value.

194
00:11:02.794 --> 00:11:06.544
&gt;&gt; In the DOM, exactly, and
that is the string what?

195
00:11:06.544 --> 00:11:07.048
&gt;&gt; Y.

196
00:11:07.048 --> 00:11:10.748
&gt;&gt; Y, and look, people,
I've changed it to white.

197
00:11:10.748 --> 00:11:14.505
It is derived directly
from our JavaScript data.

198
00:11:14.505 --> 00:11:17.866
That only would have shown
us the green for a second.

199
00:11:17.866 --> 00:11:20.979
Then that's gonna, of course,
mean that what the user sees,

200
00:11:20.979 --> 00:11:23.817
they think it's just what they typed.

201
00:11:23.817 --> 00:11:26.929
No, well,
they're not to be trusted with that.

202
00:11:26.929 --> 00:11:30.741
&gt;&gt; [LAUGH]
&gt;&gt; They have to trust us to refill it with

203
00:11:30.741 --> 00:11:33.542
actual data from JavaScript.

204
00:11:33.542 --> 00:11:35.882
And then take it away, John.

205
00:11:35.882 --> 00:11:41.723
&gt;&gt; And then we will call jsDiv's
setter method textContent.

206
00:11:41.723 --> 00:11:46.362
&gt;&gt; Yeah, they call it property, but
I'm with you, method or prop, both work.

207
00:11:46.362 --> 00:11:48.093
But yeah, exactly.

208
00:11:48.093 --> 00:11:51.259
&gt;&gt; textContent and we will set it to post.

209
00:11:51.259 --> 00:11:52.390
&gt;&gt; Yeah, which is?

210
00:11:52.390 --> 00:11:53.553
&gt;&gt; That equals to Y.

211
00:11:53.553 --> 00:11:56.064
&gt;&gt; And that-
&gt;&gt; Will go to DOM and set.

212
00:11:56.064 --> 00:12:01.329
&gt;&gt; Beautiful, the execution context
closed, they're popped off the call stack.

213
00:12:01.329 --> 00:12:03.504
And look at that, people,

214
00:12:03.504 --> 00:12:08.139
we have a full user interface
with a highly restrictive but

215
00:12:08.139 --> 00:12:14.023
honestly liberating mental, well,
model, I don't say mental model.

216
00:12:14.023 --> 00:12:19.045
Design pattern of everything the user can

217
00:12:19.045 --> 00:12:24.649
possibly see is an output
of JavaScript data.

218
00:12:24.649 --> 00:12:28.664
We have one function that in
any change to date, any change,

219
00:12:28.664 --> 00:12:34.284
any action from the user or inaction, the
initial before the user takes any action.

220
00:12:34.284 --> 00:12:39.017
Any action, the user will only
be allowed to affect change

221
00:12:39.017 --> 00:12:42.021
on JavaScript data, nowhere else.

222
00:12:42.021 --> 00:12:45.961
And then we have one function,
you could even call a description.

223
00:12:45.961 --> 00:12:50.583
They use these funny terms that sound
very profound and obscure, but I get it,

224
00:12:50.583 --> 00:12:54.101
it's a description,
it describes what's gonna show up.

225
00:12:54.101 --> 00:12:58.253
In fact, based on that data,
we have a full description of the content,

226
00:12:58.253 --> 00:13:01.453
not of the actual boxes,
that might come tomorrow, but

227
00:13:01.453 --> 00:13:05.218
a full description of the content
that's gonna show on the page.

228
00:13:05.218 --> 00:13:10.199
All within one function, it's beautiful.

229
00:13:10.199 --> 00:13:15.319
And well, I don't know,
good job, everybody.

230
00:13:15.319 --> 00:13:16.743
So let's see what it says.

231
00:13:16.743 --> 00:13:21.415
Restrict every change to view to be via,
1, an update of our data, and 2,

232
00:13:21.415 --> 00:13:24.488
a run of a single dataToView
convertor function.

233
00:13:24.488 --> 00:13:28.019
Not make different changes in
every different condition,

234
00:13:28.019 --> 00:13:30.420
every different action by the user, but

235
00:13:30.420 --> 00:13:34.948
one function that pipes the change of
data through to the entire dependent.

236
00:13:34.948 --> 00:13:39.546
Or not dependent,
we haven't made that restriction yet, but

237
00:13:39.546 --> 00:13:42.855
the output being the view
that the user sees.

238
00:13:42.855 --> 00:13:47.506
Just one approach, but immensely popular,
and it tees us up, we're gonna see for

239
00:13:47.506 --> 00:13:50.241
semivisual coding with
what I call a visual DOM.

240
00:13:50.241 --> 00:13:56.489
Something along the lines of, I have
everything in JavaScript now that I need

241
00:13:56.489 --> 00:14:02.751
if I wanted to actually map out exactly
what's gonna show up on the C++ DOM.

242
00:14:02.751 --> 00:14:06.297
Because the only things that are gonna
show up here, well, not quite yet, right?

243
00:14:06.297 --> 00:14:08.947
Because right now, I've got inputs,
and divs, and stuff like that.

244
00:14:08.947 --> 00:14:13.336
With a bit more movement in terms
of defining what's gonna show up,

245
00:14:13.336 --> 00:14:18.033
here in JavaScript first, I could
have in JavaScript a full description

246
00:14:18.033 --> 00:14:22.653
of what's gonna show up on the page
based on every single piece of data.

247
00:14:22.653 --> 00:14:26.363
Based on every change,
I can see it first in JavaScript.

248
00:14:26.363 --> 00:14:30.112
That's because nothing shows
up here that wasn't determined

249
00:14:30.112 --> 00:14:34.510
by the underlying data and conversion
from that data through to the view.

250
00:14:34.510 --> 00:14:39.091
Not like one-off handlers
that change the data,

251
00:14:39.091 --> 00:14:45.759
no data left on here from the user's
action that then doesn't get, no.

252
00:14:45.759 --> 00:14:49.978
Anything from the user is
a submission to underlying data here.

253
00:14:49.978 --> 00:14:53.222
A pinpoint submission,
as Machik rightly said,

254
00:14:53.222 --> 00:14:57.328
and then it's going to run the one
way dataToView conversion.

255
00:14:57.328 --> 00:15:01.298
Well, if we know that, maybe we could even
intercede that with a full layout of what

256
00:15:01.298 --> 00:15:02.729
that page is gonna look like.

257
00:15:02.729 --> 00:15:05.610
So that within Java we have
a full map of what the page

258
00:15:05.610 --> 00:15:07.292
is gonna end up looking like.

259
00:15:07.292 --> 00:15:11.681
Which given that we don't have that access
to that full map with all its state,

260
00:15:11.681 --> 00:15:13.490
we can't just call to log that.

261
00:15:13.490 --> 00:15:19.330
We need to make getter calls to get all
that information every single time.

262
00:15:19.330 --> 00:15:22.543
It would be pretty nice to have a full
map of it within JavaScript first.

263
00:15:22.543 --> 00:15:27.887
It could also potentially allow us
hand in hand with that to optimize.

264
00:15:27.887 --> 00:15:30.024
You notice here we wiped all the data?

265
00:15:30.024 --> 00:15:34.403
For our purposes of reasoning, amazing,
wiped and reloaded all the data.

266
00:15:34.403 --> 00:15:36.957
Do we really need to do that every
single time, a thousand elements,

267
00:15:36.957 --> 00:15:38.860
we gotta really wipe all
the data every time and re?

268
00:15:38.860 --> 00:15:43.770
Could it be that if we could map out in
JavaScript all the data as it's gonna be

269
00:15:43.770 --> 00:15:47.225
displayed and
then have an algorithm, clever code,

270
00:15:47.225 --> 00:15:49.328
as it's gonna be pretty basic?

271
00:15:49.328 --> 00:15:53.673
Look back at the previous map of
the entire contents that are gonna

272
00:15:53.673 --> 00:15:58.499
be displayed and see what actually
changed and only make those changes.

273
00:15:58.499 --> 00:16:01.090
That could be quite a powerful move for
us.

