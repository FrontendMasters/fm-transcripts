WEBVTT

1
00:00:00.150 --> 00:00:04.371
Sweet, great,
let's get to every 15 milliseconds, and

2
00:00:04.371 --> 00:00:09.335
in this case the first 15 milliseconds,
yeah, the first time,

3
00:00:09.335 --> 00:00:12.842
let's get to what happens
on our callback queue.

4
00:00:12.842 --> 00:00:19.520
Can I have, Justice,
what happens on our callback queue?

5
00:00:19.520 --> 00:00:22.170
Yeah, don't worry, people, you're
doing incredibly, we're almost there.

6
00:00:22.170 --> 00:00:24.175
On our callback queue,

7
00:00:24.175 --> 00:00:30.290
what happens at 15 milliseconds
based on our interval that we set?

8
00:00:30.290 --> 00:00:33.980
We've finished running that line,
it's done, but at 15 milliseconds, what

9
00:00:33.980 --> 00:00:37.638
function is going to be added to the call
stack via the callback queue, Justice?

10
00:00:37.638 --> 00:00:39.227
&gt;&gt; Got updateDOM.

11
00:00:39.227 --> 00:00:42.550
&gt;&gt; updateDOM, it's gonna be called
callback queue for a second.

12
00:00:42.550 --> 00:00:47.050
Let's put it on the call stack,
and updateDOM.

13
00:00:47.050 --> 00:00:49.680
And we are now going to execute it.

14
00:00:49.680 --> 00:00:52.530
So that means, everybody,
a brand new what?

15
00:00:52.530 --> 00:00:53.379
&gt;&gt; Execution context.

16
00:00:53.379 --> 00:00:57.900
&gt;&gt; Amazing, amazing, that is invigorating
at this point, an execution context.

17
00:00:57.900 --> 00:01:01.070
And that execution context
is executed by JavaScript.

18
00:01:01.070 --> 00:01:06.267
There's the pink parens as
why it was saying so nicely.

19
00:01:06.267 --> 00:01:10.695
And we now start executing updateDOM, and

20
00:01:10.695 --> 00:01:16.353
with its pink parens,
we are going to create a new brand

21
00:01:16.353 --> 00:01:21.652
new execution context as
everybody rightly said.

22
00:01:21.652 --> 00:01:25.789
And there it is,
how big is it gonna need to be?

23
00:01:28.333 --> 00:01:29.325
Not nothing.

24
00:01:29.325 --> 00:01:33.160
&gt;&gt; [LAUGH]
&gt;&gt; All right, not too bad, though.

25
00:01:33.160 --> 00:01:38.828
Into it we go and we check if elems or

26
00:01:38.828 --> 00:01:46.300
undefined, are they undefined or are they?

27
00:01:46.300 --> 00:01:48.040
Yeah, they are not assigned at this point.

28
00:01:48.040 --> 00:01:53.234
So we are going to run
our process of taking our

29
00:01:53.234 --> 00:01:58.704
JavaScript representation
of our elements and

30
00:01:58.704 --> 00:02:04.993
hitting each of them with
the convert function that's

31
00:02:04.993 --> 00:02:10.737
gonna create associated
DOM elements in C++ and

32
00:02:10.737 --> 00:02:17.597
associated corresponding
access objects in JavaScript.

33
00:02:17.597 --> 00:02:23.171
To allow us to ongoing, interact with the
underlying DOM elements and potentially

34
00:02:23.171 --> 00:02:28.440
change their content in an incisive
manner, not wipe them and restart.

35
00:02:28.440 --> 00:02:30.880
I don't see any replaced
children here anymore.

36
00:02:30.880 --> 00:02:36.460
Instead, we've got a find div that's
gonna work out what actual elems'

37
00:02:36.460 --> 00:02:41.590
specific content to change based on
when we do have our latest vDOM,

38
00:02:41.590 --> 00:02:45.370
the current data propagated into it.

39
00:02:45.370 --> 00:02:47.123
In practice, by the way,
if you're looking close, and

40
00:02:47.123 --> 00:02:48.970
if you can hold on,
we can make more changes in this.

41
00:02:48.970 --> 00:02:53.454
Absolutely, we're doing a minimal div in
algorithm that can only, in this case,

42
00:02:53.454 --> 00:02:57.505
by the looks of it change our content but
we're gonna expand it, no doubt.

43
00:02:57.505 --> 00:03:02.219
elems is going to be
the result of hitting each

44
00:03:02.219 --> 00:03:06.810
element of vDOM with the convert function,

45
00:03:06.810 --> 00:03:11.276
it's gonna have execute convert with, so

46
00:03:11.276 --> 00:03:18.230
let's just do my dotted line for
the map execution context.

47
00:03:18.230 --> 00:03:24.194
And we go, and
the first thing inside is going to be

48
00:03:24.194 --> 00:03:29.740
running convert on which
element in our vDOM?

49
00:03:31.170 --> 00:03:36.419
Machick, in our first running
of convert inside of vDOM,

50
00:03:36.419 --> 00:03:41.362
the chord map with convert paths,
which index are we?

51
00:03:41.362 --> 00:03:43.126
&gt;&gt; In input.

52
00:03:43.126 --> 00:03:44.174
&gt;&gt; Yeah, perfect, exactly right.

53
00:03:44.174 --> 00:03:45.398
There it is.

54
00:03:45.398 --> 00:03:47.198
Input the array.

55
00:03:47.198 --> 00:03:47.698
&gt;&gt; Empty space.

56
00:03:48.712 --> 00:03:50.200
&gt;&gt; No, what did I do wrong here?

57
00:03:50.200 --> 00:03:57.190
There it is, calling convert on
exactly vDOM position index 0.

58
00:03:57.190 --> 00:04:00.320
New execution context, no.

59
00:04:00.320 --> 00:04:03.850
[LAUGH] We are not going in
it because we don't have it.

60
00:04:03.850 --> 00:04:08.527
But we know it's there, just to be
really clear to everybody, it's there.

61
00:04:08.527 --> 00:04:09.111
Yeah, it's there.

62
00:04:09.111 --> 00:04:12.700
It's minimized.

63
00:04:12.700 --> 00:04:17.631
And so we're passing in vDOM numbers
from 0, exactly as you said,

64
00:04:17.631 --> 00:04:23.010
Machick, with this string input,
empty string, the handle function.

65
00:04:23.010 --> 00:04:26.810
And I think what is pretty cool at this
point is we know exactly what it's doing.

66
00:04:26.810 --> 00:04:32.428
Its output is going to be,
on the one hand,

67
00:04:32.428 --> 00:04:39.452
the creation in the C++ DOM
of an input DOM element,

68
00:04:39.452 --> 00:04:43.840
there it is, input DOM element.

69
00:04:45.050 --> 00:04:50.603
And with convert,
we're also setting the value

70
00:04:50.603 --> 00:04:55.750
of that element to an empty
string exactly and

71
00:04:55.750 --> 00:05:00.084
setting the handler for inputs on it,

72
00:05:00.084 --> 00:05:03.528
input handler-
&gt;&gt; To point to callback.

73
00:05:03.528 --> 00:05:08.260
&gt;&gt; To refer to point to
the handle function, exactly.

74
00:05:08.260 --> 00:05:09.880
There it is.

75
00:05:09.880 --> 00:05:15.955
And that we have as in
JavaScript the output

76
00:05:15.955 --> 00:05:21.859
of it is an object that
has a bunch of useful

77
00:05:21.859 --> 00:05:27.091
functions that allow us to make edits

78
00:05:27.091 --> 00:05:32.180
to the linked C++ element input.

79
00:05:32.180 --> 00:05:34.970
And then we have a bunch
of useful functions here.

80
00:05:34.970 --> 00:05:42.980
And that output will be added to
the array that is created in map.

81
00:05:42.980 --> 00:05:44.250
It'll be pushed to that array.

82
00:05:45.550 --> 00:05:48.050
We're going to do it two more times.

83
00:05:48.050 --> 00:05:52.076
I'm not gonna write them out again,
actually I will.

84
00:05:52.076 --> 00:05:54.050
Okay, there it is.

85
00:05:54.050 --> 00:05:58.052
String div, string hello,

86
00:05:58.052 --> 00:06:03.640
and a comma and exclamation mark.

87
00:06:03.640 --> 00:06:07.460
And that is going to produce
an element over here

88
00:06:07.460 --> 00:06:08.238
of-
&gt;&gt; Div.

89
00:06:08.238 --> 00:06:13.585
&gt;&gt; Div,
exactly div with text content of hello

90
00:06:13.585 --> 00:06:19.060
comma exclamation mark, nothing else.

91
00:06:19.060 --> 00:06:23.995
And that then also produced
a corresponding object

92
00:06:23.995 --> 00:06:28.310
with a link and with useful functions.

93
00:06:28.310 --> 00:06:32.821
And the final one from the map was for

94
00:06:32.821 --> 00:06:36.893
our last, yeah, the last div.

95
00:06:36.893 --> 00:06:42.530
And, great job, and
there it is, squeeze it in.

96
00:06:42.530 --> 00:06:49.316
And that will also
return out in JavaScript

97
00:06:49.316 --> 00:06:54.971
an object with useful functions and

98
00:06:54.971 --> 00:07:00.249
a link to a corresponding div node

99
00:07:00.249 --> 00:07:07.809
in our DOM with the string
Great job as its text.

100
00:07:07.809 --> 00:07:09.916
None of these show up quite yet.

101
00:07:09.916 --> 00:07:16.852
But our map call inside of it,

102
00:07:16.852 --> 00:07:20.736
put each of these

103
00:07:20.736 --> 00:07:26.770
objects into an array.

104
00:07:26.770 --> 00:07:32.150
And that array was returned out into,
Machick, what global constant?

105
00:07:33.520 --> 00:07:35.601
The output of the call to map in line 14,

106
00:07:35.601 --> 00:07:38.110
15 is gonna return out
to what global constant?

107
00:07:40.540 --> 00:07:42.296
&gt;&gt; Which one, just an element?

108
00:07:42.296 --> 00:07:42.882
&gt;&gt; Elems, exactly.

109
00:07:42.882 --> 00:07:43.743
Exactly, spot on.

110
00:07:43.743 --> 00:07:46.570
Into elems, there it goes.

111
00:07:46.570 --> 00:07:52.555
And there we have an array with one,
two, three accessor objects,

112
00:07:52.555 --> 00:07:57.813
each corresponding to
an underlying created DOM element.

113
00:07:57.813 --> 00:08:01.970
And that's what we did in
line 14 with our elems,

114
00:08:01.970 --> 00:08:07.840
it's a result of running convert on
each of our current vDOM elements.

115
00:08:07.840 --> 00:08:13.890
Input empty string handle div Hello!,
div, Great job.

116
00:08:13.890 --> 00:08:18.387
And then each of those created in convert,
we don't have the convert function here,

117
00:08:18.387 --> 00:08:21.072
could run out of space but
we remembered what it id,

118
00:08:21.072 --> 00:08:23.390
it created associated elements in the DOM.

119
00:08:23.390 --> 00:08:28.253
In practice, it'd be a super, super
executing function, can handle anything,

120
00:08:28.253 --> 00:08:32.992
inputs, divs, those are the two we have,
[LAUGH] list elements, other things.

121
00:08:32.992 --> 00:08:34.906
&gt;&gt; [LAUGH]
&gt;&gt; Yeah, and

122
00:08:34.906 --> 00:08:39.700
we then got our accessor objects and
we put them automatically through map.

123
00:08:39.700 --> 00:08:44.642
Map always inside of it creates an array
into which each produced output of running

124
00:08:44.642 --> 00:08:49.410
convert on each of the input elements
is pushed into that new output array.

125
00:08:49.410 --> 00:08:54.087
And that is what we returned out exactly
as Machick said into the global label

126
00:08:54.087 --> 00:08:55.080
elems.

127
00:08:55.080 --> 00:09:00.445
And so in elems we have
three accessor objects that

128
00:09:00.445 --> 00:09:06.448
we're gonna use actually from
now on to make incisive,

129
00:09:06.448 --> 00:09:12.242
precise changes to
the underlying DOM elements.

130
00:09:12.242 --> 00:09:14.720
I tried to squeeze them in a bit with
the thought that maybe I was going to be

131
00:09:14.720 --> 00:09:16.490
adding new ones to replace the old ones.

132
00:09:16.490 --> 00:09:19.060
Ah-ah, I'm not going to anymore, right?

133
00:09:19.060 --> 00:09:23.635
But we're gonna have our link on

134
00:09:23.635 --> 00:09:28.720
each of them to their corresponding

135
00:09:28.720 --> 00:09:33.132
C++ DOM element, DOM node.

136
00:09:33.132 --> 00:09:38.338
And they're gonna have their appropriate
methods and getter setter properties,

137
00:09:38.338 --> 00:09:43.486
in this case we're actually just using
getter setter properties on them as well.

138
00:09:43.486 --> 00:09:49.930
The first one that linked to an input
node has value on input and many others.

139
00:09:49.930 --> 00:09:53.260
The second two are divs and
they have text content.

140
00:09:53.260 --> 00:09:56.564
We've seen that again and again,
of course, there's many others,

141
00:09:56.564 --> 00:10:01.240
not of course, these are many others, but
these are the ones we've used on repeat.

142
00:10:01.240 --> 00:10:07.040
So let's do honor to them by
having them here as well.

143
00:10:07.040 --> 00:10:08.760
There it is.

144
00:10:08.760 --> 00:10:16.700
And so those are each linked to,
this is a big one, big line here.

145
00:10:16.700 --> 00:10:21.770
These are each linked to corresponding,
no.

146
00:10:21.770 --> 00:10:24.535
That'll do, okay,
corresponding, there we are.

147
00:10:24.535 --> 00:10:26.530
I didn't get a very good line, did I?

148
00:10:26.530 --> 00:10:28.950
Corresponding, yes.

149
00:10:28.950 --> 00:10:29.620
What a shame.

150
00:10:29.620 --> 00:10:31.330
I didn't do that very well.

151
00:10:31.330 --> 00:10:33.740
Div, I did not do that very well.

152
00:10:33.740 --> 00:10:35.696
Sorry, everyone.

153
00:10:35.696 --> 00:10:38.312
&gt;&gt; [LAUGH]
&gt;&gt; There we go.

154
00:10:38.312 --> 00:10:40.660
I didn't do that very well, did I?

155
00:10:42.020 --> 00:10:42.750
That's a shame, right?

156
00:10:42.750 --> 00:10:46.510
After such good diagramming for
a bit, that is,

157
00:10:46.510 --> 00:10:51.004
everyone wants to have
the straight lines here, not the,

158
00:10:51.004 --> 00:10:54.690
anyway, all right, so, but it's okay.

159
00:10:54.690 --> 00:11:01.070
We now have access to objects for
our underlying DOM elements, great.

160
00:11:01.070 --> 00:11:02.681
Let's get them,
not even replace children here.

161
00:11:02.681 --> 00:11:07.018
What are we gonna do instead here, Alexa?

162
00:11:07.018 --> 00:11:08.870
&gt;&gt; Append them.
&gt;&gt; Append them, exactly.

163
00:11:08.870 --> 00:11:12.240
Because we ain't gonna be
replacing them anytime soon.

164
00:11:12.240 --> 00:11:19.230
We might, but we're gonna do incisive
changes rather than replace as a whole.

165
00:11:19.230 --> 00:11:24.297
And so we do document.body
which gets us our getter for

166
00:11:24.297 --> 00:11:29.047
the body element to which
we run our append method.

167
00:11:29.047 --> 00:11:33.909
And we are going to spread
each of these elems, so

168
00:11:33.909 --> 00:11:40.551
it's elems position 0 the first argument,
elems position one,

169
00:11:40.551 --> 00:11:46.710
second argument,
elems position two, third argument.

170
00:11:46.710 --> 00:11:53.835
And that's going to take
our link to body and

171
00:11:53.835 --> 00:11:57.880
append to that our linked

172
00:11:57.880 --> 00:12:02.703
three elems as its children.

173
00:12:02.703 --> 00:12:10.810
The funny term meaning
sub elements of body.

174
00:12:10.810 --> 00:12:12.740
And so, Alexa, help me out.

175
00:12:12.740 --> 00:12:17.454
What is gonna be added to our page here
at this point automatically through our

176
00:12:17.454 --> 00:12:19.430
layout and render engine?

177
00:12:19.430 --> 00:12:20.560
&gt;&gt; An input.

178
00:12:20.560 --> 00:12:22.460
&gt;&gt; Absolutely.

179
00:12:22.460 --> 00:12:25.295
&gt;&gt; And a div and another div.

180
00:12:25.295 --> 00:12:26.198
&gt;&gt; Perfect.

181
00:12:26.198 --> 00:12:26.910
&gt;&gt; And the input has an empty
string in it, so nothing.

182
00:12:26.910 --> 00:12:30.246
&gt;&gt; Yep.

183
00:12:30.246 --> 00:12:34.439
&gt;&gt; And then the first div has
hello space exclamation point, and

184
00:12:34.439 --> 00:12:36.785
then the second div has Great job.

185
00:12:36.785 --> 00:12:37.620
&gt;&gt; Beautiful.

186
00:12:39.463 --> 00:12:43.898
My goodness, I think we have
successfully taken our initial state,

187
00:12:43.898 --> 00:12:48.040
our initial data,
produced a JavaScript manifestation of it.

188
00:12:50.310 --> 00:12:51.710
There it is.

189
00:12:51.710 --> 00:12:53.906
And then we have created
through convert and

190
00:12:53.906 --> 00:12:56.290
mapping over the JavaScript
implementation.

191
00:12:56.290 --> 00:13:01.910
By the way, we could have sub-elements of
this, we could have a full tree structure.

192
00:13:01.910 --> 00:13:06.140
In the challenges,
if you get a chance to work on their fab,

193
00:13:06.140 --> 00:13:11.895
you can build this out without too many
changes to have it handle sub-elements,

194
00:13:11.895 --> 00:13:17.734
multiple layers of sub-elements as it
does in full framework implementations,

195
00:13:17.734 --> 00:13:20.124
UI framework implementations.

196
00:13:20.124 --> 00:13:26.048
And that then leads to three, our
elements added to the DOM, the C++ list,

197
00:13:26.048 --> 00:13:32.170
and the accessor for them, and then our
rendered displayed pixels on the page.

