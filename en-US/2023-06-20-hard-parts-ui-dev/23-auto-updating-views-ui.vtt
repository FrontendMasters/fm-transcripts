WEBVTT

1
00:00:00.000 --> 00:00:06.060
We are returning to our full UI without
auto updating views from our data.

2
00:00:06.060 --> 00:00:10.878
Here is our code, we've removed one
of our handlers, so it's a slightly

3
00:00:10.878 --> 00:00:15.794
simpler implementation here,
a slightly simpler implementation here.

4
00:00:15.794 --> 00:00:20.625
We are now just enabling the user
to type into the input field and

5
00:00:20.625 --> 00:00:25.291
then for the preview of that to
show up in the associated div.

6
00:00:25.291 --> 00:00:27.364
Okay, let's do it,

7
00:00:27.364 --> 00:00:33.253
I think it is got ourselves back
into being familiar with it.

8
00:00:33.253 --> 00:00:36.280
Note here the only changes we've made.

9
00:00:36.280 --> 00:00:40.948
So we are going to set up post data or
put up post data in JavaScript memory.

10
00:00:40.948 --> 00:00:45.615
We're then going to head to our
JavaScript, no, see, I really need to.

11
00:00:45.615 --> 00:00:51.034
[LAUGH] We're gonna head to our dormancy
plus plus to grab our input and div,

12
00:00:51.034 --> 00:00:56.209
we can't grab them and pull them
into JavaScript, just links to them.

13
00:00:56.209 --> 00:01:00.960
We're then going to save our all
important function that converts our

14
00:01:00.960 --> 00:01:04.032
data into our view under
all circumstances.

15
00:01:04.032 --> 00:01:07.523
No manually changing our view
anywhere else anymore now,

16
00:01:07.523 --> 00:01:09.311
just through this function.

17
00:01:09.311 --> 00:01:15.222
Then we're gonna save our handler that's
gonna handle the user taking an action.

18
00:01:15.222 --> 00:01:18.219
That's the outside influence of this
system that makes this system so

19
00:01:18.219 --> 00:01:20.417
interesting and
hard to reason about, of course.

20
00:01:20.417 --> 00:01:25.357
You can't see user action in code, there's
no line of code that says user takes

21
00:01:25.357 --> 00:01:29.353
action, that happens outside of
the system and influences it.

22
00:01:29.353 --> 00:01:35.095
Then in that handler, we're also going to,
if the user has, my goodness,

23
00:01:35.095 --> 00:01:40.142
God forbid, that's a very
old-fashioned phrase, written will,

24
00:01:40.142 --> 00:01:45.375
then we are going to remove the div
entirely because they need to learn.

25
00:01:45.375 --> 00:01:48.385
That is not, anyway.

26
00:01:48.385 --> 00:01:52.645
All right, we're gonna attach that to the,
I probably should have changed it to

27
00:01:52.645 --> 00:01:55.539
something else, shouldn't I,
just rather my name.

28
00:01:55.539 --> 00:02:00.523
But all right, then we're going
to have that data view function

29
00:02:00.523 --> 00:02:04.599
be running on repeat when
the user changes the data.

30
00:02:04.599 --> 00:02:09.616
Via the handleInput function running,
the view will change based on that data.

31
00:02:09.616 --> 00:02:14.260
But just notice, I have a feeling,
well, I mean, we can see,

32
00:02:14.260 --> 00:02:20.418
we're affecting what the user sees in a
place other than the dataToView function.

33
00:02:20.418 --> 00:02:21.686
But we already were,

34
00:02:21.686 --> 00:02:25.499
it was in the HTML code that we
already were affecting that view.

35
00:02:25.499 --> 00:02:30.410
So I mean, look, as long as there's gonna
be some view that if it can't be changed,

36
00:02:30.410 --> 00:02:32.430
I guess it doesn't matter per se.

37
00:02:32.430 --> 00:02:37.399
But as long as it's possible to change it,
there needs to be data behind it

38
00:02:37.399 --> 00:02:41.167
in our new one simple rule,
there must be corresponding

39
00:02:41.167 --> 00:02:45.763
data associated with anything that
can change in the user's eyes.

40
00:02:45.763 --> 00:02:48.500
I guess if the input and div couldn't
change, maybe it doesn't matter,

41
00:02:48.500 --> 00:02:50.328
the only thing to change,
the content, maybe.

42
00:02:50.328 --> 00:02:54.486
As long as it's possible for
us to remove and we are in this case,

43
00:02:54.486 --> 00:02:59.262
now I'm worried that there is not
associated data determining whether or

44
00:02:59.262 --> 00:03:02.899
not, in any given situation,
that div is there or not.

45
00:03:02.899 --> 00:03:07.292
Instead, it's only in the situation
where the user is inputted do

46
00:03:07.292 --> 00:03:11.771
we determine whether the div is there or
not, it's not otherwise.

47
00:03:11.771 --> 00:03:14.098
Okay, so let's get started, people.

48
00:03:14.098 --> 00:03:16.498
We're back, we're back, we're back,
we're back, we're back.

49
00:03:16.498 --> 00:03:20.615
And so we are going to start,
what do we have?

50
00:03:20.615 --> 00:03:23.656
We had our view, I guess,

51
00:03:23.656 --> 00:03:29.060
our web page that was displayed and
rendered.

52
00:03:29.060 --> 00:03:30.707
&gt;&gt; I think it's too big.

53
00:03:30.707 --> 00:03:33.896
&gt;&gt; [LAUGH]
&gt;&gt; It is too wide, isn't it?

54
00:03:33.896 --> 00:03:34.445
&gt;&gt; Yeah.

55
00:03:34.445 --> 00:03:37.345
&gt;&gt; Well, it's too late now.

56
00:03:37.345 --> 00:03:40.183
&gt;&gt; [LAUGH]
&gt;&gt; All right, and

57
00:03:40.183 --> 00:03:46.039
then we're going to have our C++ model of,

58
00:03:46.039 --> 00:03:50.045
let's get this one warmed up,

59
00:03:50.045 --> 00:03:57.919
model of that page elements that
is just essentially a list.

60
00:03:57.919 --> 00:03:59.635
Now, that is too small.

61
00:03:59.635 --> 00:04:05.882
That is essentially just a list of
elements that we get to add to.

62
00:04:05.882 --> 00:04:09.348
Technically is an object,
the O stands for object, but

63
00:04:09.348 --> 00:04:11.576
it's an ordered list of elements.

64
00:04:11.576 --> 00:04:17.950
So we can think of it as being on
ordered list of nested elements.

65
00:04:17.950 --> 00:04:21.987
So we can think about it as being
a list for our purposes, it's just for

66
00:04:21.987 --> 00:04:23.296
simplicity's sake.

67
00:04:23.296 --> 00:04:27.463
Then we have a wall that divides our

68
00:04:27.463 --> 00:04:32.931
JavaScript runtime from our C++ runtime.

69
00:04:32.931 --> 00:04:37.366
Note, anything on this
list is added directly

70
00:04:37.366 --> 00:04:42.268
through the layout and
render engines to the page.

71
00:04:42.268 --> 00:04:46.899
We get to add to an ordered
list in C++ of objects,

72
00:04:46.899 --> 00:04:50.133
technically an object of objects,

73
00:04:50.133 --> 00:04:55.764
via some text in an HTML file that
we can load in with file open.

74
00:04:55.764 --> 00:04:59.377
How often do you get to
add things to a C++ list?

75
00:04:59.377 --> 00:05:03.878
Order list of objects by file open and
listing the things you want to add?

76
00:05:03.878 --> 00:05:06.887
That's pretty powerful,
that's our HTML for you.

77
00:05:06.887 --> 00:05:12.556
Super, super crucial language,
definitely something that we all value.

78
00:05:12.556 --> 00:05:16.741
Because it is the most intuitive
thought free design language out there,

79
00:05:16.741 --> 00:05:19.315
something we all value
in a very serious way.

80
00:05:19.315 --> 00:05:21.581
So, we do.

81
00:05:21.581 --> 00:05:26.806
So let's go and add some elements
to our C++ list in the DOM,

82
00:05:26.806 --> 00:05:31.345
which is just the posh word for
this list of elements.

83
00:05:31.345 --> 00:05:34.545
Let's do the HTML, starting with justice.

84
00:05:34.545 --> 00:05:40.509
Let's add our three elements to
our C++ list via our HTML code,

85
00:05:40.509 --> 00:05:42.793
which loads in, sorry.

86
00:05:42.793 --> 00:05:43.815
&gt;&gt; I've got an input.

87
00:05:43.815 --> 00:05:44.602
&gt;&gt; Yeah, okay, great.

88
00:05:44.602 --> 00:05:46.679
Yeah, you're fantastic,

89
00:05:46.679 --> 00:05:51.534
I'm just gonna remember I need to
show it loading into our schema.

90
00:05:51.534 --> 00:05:53.312
There it is, the HTML parser.

91
00:05:53.312 --> 00:06:00.304
Into that goes the HTML file that gets
to add things through the Web IDL.

92
00:06:00.304 --> 00:06:05.586
So Web IDL also is
the description of the DOM API.

93
00:06:05.586 --> 00:06:10.765
Remember, remind that just so for clarity
again, the DOM API is the borderline

94
00:06:10.765 --> 00:06:15.184
English language description of
how we can access this C++ list.

95
00:06:15.184 --> 00:06:20.058
It is written out in its formalized
structure through the interface

96
00:06:20.058 --> 00:06:25.199
description language for all web
browser features, known as Web IDL.

97
00:06:25.199 --> 00:06:30.547
And that is actually what allows the past

98
00:06:30.547 --> 00:06:36.208
HTML code to be added to the C++ Dom list,

99
00:06:36.208 --> 00:06:42.828
which is then produces
actual pixels on the page.

100
00:06:42.828 --> 00:06:44.551
Justice, please go ahead.

101
00:06:44.551 --> 00:06:45.571
&gt;&gt; Yeah, we've got an input.

102
00:06:45.571 --> 00:06:48.121
&gt;&gt; Perfect, input, there it is.

103
00:06:48.121 --> 00:06:49.803
Next.
&gt;&gt; Div.

104
00:06:49.803 --> 00:06:52.407
&gt;&gt; Okay, see,
I've got to get myself back into it,

105
00:06:52.407 --> 00:06:55.697
I'm gonna put it right to the left here so
we have lots of space.

106
00:06:55.697 --> 00:07:00.521
Input, there it is, div, and last?

107
00:07:00.521 --> 00:07:01.493
&gt;&gt; A script.

108
00:07:01.493 --> 00:07:03.836
&gt;&gt; There it is, input,
div, script, beautiful.

109
00:07:03.836 --> 00:07:07.075
They go to walk Justice on our page.

110
00:07:07.075 --> 00:07:08.703
&gt;&gt; We see an input, a box.

111
00:07:08.703 --> 00:07:09.649
&gt;&gt; Beautiful.

112
00:07:09.649 --> 00:07:13.127
&gt;&gt; And then there's a div,
that's really not shown but is there.

113
00:07:13.127 --> 00:07:14.862
&gt;&gt; Spot on, thanks, Justice.

114
00:07:14.862 --> 00:07:17.908
Okay, now we go into, yeah, go, Mark.

115
00:07:17.908 --> 00:07:22.626
&gt;&gt; Is it deliberate that in the code
dataToView doesn't check if

116
00:07:22.626 --> 00:07:26.669
the jsDiv has been
detached by handleInput?

117
00:07:26.669 --> 00:07:31.925
&gt;&gt; Yeah, yeah, yeah,
this is by design some

118
00:07:31.925 --> 00:07:39.079
code that we'll at least have
to do some reasoning about,

119
00:07:39.079 --> 00:07:43.315
let's say, yeah, absolutely.

120
00:07:43.315 --> 00:07:50.887
[LAUGH] No, this is the sort of thing that
we'll want to be having to figure out.

121
00:07:50.887 --> 00:07:52.477
&gt;&gt; We're on a journey.

122
00:07:52.477 --> 00:07:54.700
&gt;&gt; We're on a journey, yes,
exactly, we're on a journey here.

123
00:07:54.700 --> 00:07:56.984
All right, we're now loading JavaScript.

124
00:07:56.984 --> 00:08:02.219
All right, no time for
jokes, now we're loading

125
00:08:02.219 --> 00:08:07.330
JavaScript as soon as we
hit that script tag which

126
00:08:07.330 --> 00:08:12.833
created a script node on
our C++ list of elements.

127
00:08:12.833 --> 00:08:14.608
And that's gonna switch on JavaScript.

128
00:08:14.608 --> 00:08:17.364
Here it is, JavaScript has a memory,

129
00:08:17.364 --> 00:08:21.844
it has a thread, which is the posh
word for process ability for

130
00:08:21.844 --> 00:08:26.689
the computer to run code line by
line of execution of running code.

131
00:08:26.689 --> 00:08:32.484
It also has in its memory a bunch of
useful objects that are full of functions,

132
00:08:32.484 --> 00:08:38.013
or get a set of properties that
are actually accessing features outside,

133
00:08:38.013 --> 00:08:39.101
like the DOM.

134
00:08:39.101 --> 00:08:43.321
So let's load up JavaScript,
here is its memory,

135
00:08:43.321 --> 00:08:47.792
which is its store of data,
or that sounds good.

136
00:08:47.792 --> 00:08:52.479
That's literally getting
the sizes wrong of every

137
00:08:52.479 --> 00:08:57.278
single one of these cuz we
got no space to be wasting.

138
00:08:57.278 --> 00:09:01.685
So that's a store of data,
which is fantastic,

139
00:09:01.685 --> 00:09:07.068
because we said that for
any user interface, we are, one?

140
00:09:07.068 --> 00:09:09.271
&gt;&gt; Displaying content.

141
00:09:09.271 --> 00:09:11.199
&gt;&gt; And two, letting the user?

142
00:09:11.199 --> 00:09:12.687
&gt;&gt; Change it.

143
00:09:12.687 --> 00:09:16.336
&gt;&gt; Yeah, well done, everyone, especially-
&gt;&gt; [LAUGH]

144
00:09:16.336 --> 00:09:17.238
&gt;&gt; I think it was everyone say

145
00:09:17.238 --> 00:09:18.101
roughly the same thing.

146
00:09:18.101 --> 00:09:20.384
&gt;&gt; [LAUGH]
&gt;&gt; Okay, and so

147
00:09:20.384 --> 00:09:25.731
we need data corresponding to something
that they can see that can be changed.

148
00:09:25.731 --> 00:09:30.589
Otherwise I can't change pixels
without corresponding underlying data.

149
00:09:30.589 --> 00:09:34.654
Even if that data is just true or false,
even if that data is just show or not,

150
00:09:34.654 --> 00:09:35.685
it's still data.

151
00:09:35.685 --> 00:09:37.760
It's still not just pixels,

152
00:09:37.760 --> 00:09:41.833
which are the manifestation of
some sort of state or data.

153
00:09:41.833 --> 00:09:47.620
Okay, there we go, I'm gonna start, yeah,
showing that JavaScript runtime here.

154
00:09:47.620 --> 00:09:51.384
So we have immediately in it
an object by the name of document.

155
00:09:51.384 --> 00:09:55.210
Alexa, help me out with what's
in that document object.

156
00:09:55.210 --> 00:10:01.368
We have a hidden property,
that is a link to let us access the DOM.

157
00:10:01.368 --> 00:10:04.645
Beautiful, there it is,
a link to let us access the DOM.

158
00:10:04.645 --> 00:10:07.425
The DOM, let's call it what it is,
the DOM, exactly.

159
00:10:07.425 --> 00:10:11.998
Perfect, and
then we have a bunch of what on it?

160
00:10:11.998 --> 00:10:16.309
&gt;&gt; Properties, which are probably methods.

161
00:10:16.309 --> 00:10:18.167
&gt;&gt; And also some actual methods,

162
00:10:18.167 --> 00:10:21.533
but it will not like querySelector
that lets us do what?

163
00:10:21.533 --> 00:10:22.460
&gt;&gt; Interact with the DOM.

164
00:10:22.460 --> 00:10:24.556
&gt;&gt; Yeah, beautiful, there it is.

165
00:10:24.556 --> 00:10:27.220
Perfect, and
now we get into saving our data, and

166
00:10:27.220 --> 00:10:29.131
we're gonna pick up the pace here.

167
00:10:29.131 --> 00:10:32.068
Well, actually, Alexa, what are we doing
in line one of our JavaScript here?

168
00:10:32.068 --> 00:10:35.664
&gt;&gt; We're declaring our post variable and
initializing it to an empty string.

169
00:10:35.664 --> 00:10:39.231
&gt;&gt; Beautiful, keep me going, feel free to
sort of, I mean, to be fair, actually,

170
00:10:39.231 --> 00:10:40.649
we're getting back up to pace.

171
00:10:40.649 --> 00:10:45.093
So we'll do it steadily,
[LAUGH] don't need to.

172
00:10:45.093 --> 00:10:47.320
So we declare what, Alexa?

173
00:10:47.320 --> 00:10:51.348
&gt;&gt; Then we're declaring
our jsInput variable.

174
00:10:51.348 --> 00:10:56.457
We're assigning it to the result
of invoking querySelector

175
00:10:56.457 --> 00:11:00.371
on our document object
with the string input.

176
00:11:00.371 --> 00:11:04.884
&gt;&gt; Brilliant, querySelector with
the input, with the argument,

177
00:11:04.884 --> 00:11:06.450
this string of input.

178
00:11:06.450 --> 00:11:09.515
And that is going to, let's just do
it again just to remind ourselves or

179
00:11:09.515 --> 00:11:10.239
give me people.

180
00:11:10.239 --> 00:11:14.373
What's its first thing that it's gonna do,
Alexa, in order, yeah, go ahead.

181
00:11:14.373 --> 00:11:18.563
&gt;&gt; It's gonna use that
hidden link on the document

182
00:11:18.563 --> 00:11:19.615
object to-

183
00:11:19.615 --> 00:11:20.211
&gt;&gt; Head to-

184
00:11:20.211 --> 00:11:20.879
&gt;&gt; Yes,-
&gt;&gt; To the DOM.

185
00:11:20.879 --> 00:11:22.338
&gt;&gt; To interact with the DOM.

186
00:11:22.338 --> 00:11:25.294
Where it's going to search or
query for what selector?

187
00:11:25.294 --> 00:11:26.093
&gt;&gt; Input.

188
00:11:26.093 --> 00:11:31.334
&gt;&gt; Brilliant, a selector is just
any label, actually, it includes

189
00:11:31.334 --> 00:11:37.053
class names or IDs or other ways in
which we can select, grab an element.

190
00:11:37.053 --> 00:11:39.538
And here we are grabbing which element?

191
00:11:39.538 --> 00:11:42.953
&gt;&gt; Input.
Input, we can't retrieve it back into

192
00:11:42.953 --> 00:11:48.410
JavaScript to make changes to it
because it's a C++ object, object,

193
00:11:48.410 --> 00:11:54.503
object in C++ runtime, the DOM, the model,
the list of elements on the page.

194
00:11:54.503 --> 00:11:57.264
So instead, JavaScript gives us what?

195
00:11:57.264 --> 00:11:58.674
&gt;&gt; An object.

196
00:11:58.674 --> 00:12:03.911
&gt;&gt; Well, yeah, a regular JavaScript object
with its own hidden property linking to?

197
00:12:03.911 --> 00:12:04.829
&gt;&gt; The input node.

198
00:12:04.829 --> 00:12:06.845
&gt;&gt; Into the input node, brilliant.

199
00:12:06.845 --> 00:12:12.116
And also some useful functions that
will be applicable to editing,

200
00:12:12.116 --> 00:12:19.060
accessing, deleting, removing, updating,
moving an input node, including what?

201
00:12:19.060 --> 00:12:19.780
&gt;&gt; Value.

202
00:12:19.780 --> 00:12:22.494
&gt;&gt; Value, and
I think we've got oninput as well.

203
00:12:22.494 --> 00:12:23.179
&gt;&gt; Yes.

204
00:12:23.179 --> 00:12:25.907
&gt;&gt; Brilliant, and that then is stored.

205
00:12:25.907 --> 00:12:29.978
It's nice to go back over this people,
right?

206
00:12:29.978 --> 00:12:32.874
Seems already hopefully relatively
familiar how this is, and

207
00:12:32.874 --> 00:12:35.836
I'm sure you realize become our
standard model here, people.

208
00:12:35.836 --> 00:12:39.845
So that's what's happened
inside querySelector, and

209
00:12:39.845 --> 00:12:43.110
the output of it is stored into where,
Alexa?

210
00:12:43.110 --> 00:12:43.806
&gt;&gt; jsInput.

211
00:12:43.806 --> 00:12:47.513
&gt;&gt; jsInput, fabulous, and there it is.

212
00:12:47.513 --> 00:12:51.843
And hopefully, we should be able to do
that somewhat by analogy for the next one.

213
00:12:51.843 --> 00:12:53.367
Do you wanna keep me going?

214
00:12:53.367 --> 00:12:58.319
&gt;&gt; Yes, after jsInput,
we're gonna declare a variable jsDiv, and

215
00:12:58.319 --> 00:13:01.504
we're basically gonna do the same thing,

216
00:13:01.504 --> 00:13:05.589
except we are gonna query the DOM for
our div this time.

217
00:13:05.589 --> 00:13:06.133
&gt;&gt; Beautiful.

218
00:13:06.133 --> 00:13:10.854
&gt;&gt; And the result that is stored under
jsDiv is gonna be a JavaScript object with

219
00:13:10.854 --> 00:13:12.420
a hidden link to the div.

220
00:13:12.420 --> 00:13:13.025
&gt;&gt; Beautiful.

221
00:13:13.025 --> 00:13:17.626
&gt;&gt; And all of those automatic
getter-setter properties that let us

222
00:13:17.626 --> 00:13:20.439
specifically interact with a div.

223
00:13:20.439 --> 00:13:25.808
&gt;&gt; Fantastic, they're pertinent to the div
elements on the DOM, which include here.

224
00:13:25.808 --> 00:13:26.962
Which one are we using?

225
00:13:26.962 --> 00:13:27.714
&gt;&gt; Text content.

226
00:13:27.714 --> 00:13:30.439
&gt;&gt; Okay, fabulous, there it is.

227
00:13:30.439 --> 00:13:31.856
&gt;&gt; And remove.

228
00:13:31.856 --> 00:13:33.134
&gt;&gt; And remove, perfect.

229
00:13:33.134 --> 00:13:34.217
Thank you.

230
00:13:34.217 --> 00:13:40.375
Okay, no, we'll add it in here and remove.

231
00:13:40.375 --> 00:13:41.642
That's a crucial one, isn't it?

232
00:13:41.642 --> 00:13:42.841
That's exactly what gonna use.

233
00:13:42.841 --> 00:13:46.355
Brilliant, let's give a hand to Alexa.

234
00:13:46.355 --> 00:13:49.280
[APPLAUSE] Here's really
good stuff from Alexa.

235
00:13:49.280 --> 00:13:54.561
All right, let's move on to why,
what are we doing?

236
00:13:54.561 --> 00:13:58.804
We've now got our two accesses, which is
great because we now have in JavaScript,

237
00:13:58.804 --> 00:14:01.774
I guess, the ability to access and
change the pertinent,

238
00:14:01.774 --> 00:14:03.714
the relevant for our user interface,

239
00:14:03.714 --> 00:14:07.855
DOM elements, and therefore, view,
what the user sees, what the user views.

240
00:14:07.855 --> 00:14:09.054
So why, what are we doing now?

241
00:14:09.054 --> 00:14:11.842
We've saving two crucial functions here,

242
00:14:11.842 --> 00:14:16.814
one that's gonna pipe data through to
the view, the other there's gonna pipe

243
00:14:16.814 --> 00:14:20.979
action back to the JavaScript
environment from the user, okay.

244
00:14:20.979 --> 00:14:21.579
&gt;&gt; Yeah, so

245
00:14:21.579 --> 00:14:26.395
we're assigning two functions to memory
to call at arbitrary times later.

246
00:14:26.395 --> 00:14:31.147
Do you want me to go into the actual-
&gt;&gt; Definition of them?

247
00:14:31.147 --> 00:14:35.764
&gt;&gt; Well, I know you don't want that,
the steps inside.

248
00:14:35.764 --> 00:14:39.561
&gt;&gt; Yeah, as long as we're not calling,
we wouldn't even touch the code inside, so

249
00:14:39.561 --> 00:14:41.003
we don't even describe them.

250
00:14:41.003 --> 00:14:45.441
I think for our mental model, it's always
best even when we define a function.

251
00:14:45.441 --> 00:14:47.674
Of course, when we actually do
write the code, we look at it and

252
00:14:47.674 --> 00:14:48.821
we think what it's going to do.

253
00:14:48.821 --> 00:14:50.285
I think it's always best for

254
00:14:50.285 --> 00:14:53.215
our mental model to not even
think about the code inside.

255
00:14:53.215 --> 00:14:55.103
JavaScript isn't, it's just saving it.

256
00:14:55.103 --> 00:14:56.944
And so what's the next one we save?

257
00:14:56.944 --> 00:15:00.435
&gt;&gt; Then it's saving a future
input handler named handleInput.

258
00:15:00.435 --> 00:15:04.793
&gt;&gt; handleInput, I wish I had better names
for those that were not, but yeah, okay,

259
00:15:04.793 --> 00:15:05.501
beautiful.

260
00:15:05.501 --> 00:15:09.457
And then I tell you,
I think a really challenging line,

261
00:15:09.457 --> 00:15:12.150
line 15, because it pushes on the,

262
00:15:12.150 --> 00:15:17.054
if you wanna see a function,
it's nice to see the keyword function.

263
00:15:17.054 --> 00:15:19.901
If you wanna see a function run,
is nice to see params.

264
00:15:19.901 --> 00:15:23.973
And yet on this line, in line 15,
we are using oninput as a setter,

265
00:15:23.973 --> 00:15:28.188
which is acting as essentially a method
that is code running to assign on

266
00:15:28.188 --> 00:15:33.136
the right-hand side a function that is not
gonna execute but is being referenced.

267
00:15:33.136 --> 00:15:38.370
But later on,
we'll execute at point of user

268
00:15:38.370 --> 00:15:43.760
action from the user over
here on the web page.

269
00:15:43.760 --> 00:15:46.285
So that line is,
I think it's a tricky line,

270
00:15:46.285 --> 00:15:49.348
a lot of things that don't
look like what it's doing.

271
00:15:49.348 --> 00:15:50.885
Okay, so let's go through it, though.

272
00:15:50.885 --> 00:15:53.280
So take it away why if you can.

273
00:15:53.280 --> 00:15:57.797
&gt;&gt; So the function handleInput that
was defined inside the JS runtime-

274
00:15:57.797 --> 00:15:58.452
&gt;&gt; Yeah.

275
00:15:58.452 --> 00:16:02.943
&gt;&gt; Is getting passed to
the oninput method of

276
00:16:02.943 --> 00:16:08.599
the jsInput object and
the hood would that oninput.

277
00:16:08.599 --> 00:16:11.067
&gt;&gt; Yes, all right, gotcha, tes,
exactly, I'll write this up.

278
00:16:11.067 --> 00:16:16.302
So it's going to, go look at the link
to which element in the DOM?

279
00:16:16.302 --> 00:16:17.649
&gt;&gt; The input.

280
00:16:17.649 --> 00:16:21.325
&gt;&gt; Input, perfect, there it is,

281
00:16:21.325 --> 00:16:25.548
which would have a value property and

282
00:16:25.548 --> 00:16:29.374
handlers including four input.

283
00:16:29.374 --> 00:16:33.971
We'll just do input from the user.

284
00:16:33.971 --> 00:16:38.662
And perfect,
we are setting its input handler to?

285
00:16:38.662 --> 00:16:39.698
&gt;&gt; To handleInput.

286
00:16:39.698 --> 00:16:43.874
&gt;&gt; Yeah, exactly, I'm sorry,
the terms are a bit.

287
00:16:43.874 --> 00:16:45.828
Yeah, so it's gonna set its input handler.

288
00:16:45.828 --> 00:16:48.218
None of this is happening in JavaScript,

289
00:16:48.218 --> 00:16:51.784
this is just a setter-getter
that's going to pass this out.

290
00:16:51.784 --> 00:16:55.557
As we saw text content being assigned,
we wouldn't want our hi or

291
00:16:55.557 --> 00:16:57.282
our post to be assigned here.

292
00:16:57.282 --> 00:17:01.054
We want to use this to set it out here,
but we do need to know these are different

293
00:17:01.054 --> 00:17:04.733
runtimes, otherwise, they will behave
in ways other than we'd expect.

294
00:17:04.733 --> 00:17:12.011
And so into the DOM,
we send our handleInput function.

295
00:17:12.011 --> 00:17:16.395
And by the way, these terms,
I say handler's input,

296
00:17:16.395 --> 00:17:21.638
they actually won't have exactly
these names in this instance or

297
00:17:21.638 --> 00:17:26.141
instantiation of the C++ class for
an input element.

298
00:17:26.141 --> 00:17:30.429
But we don't need to worry because we
access them from the JavaScript API

299
00:17:30.429 --> 00:17:34.297
definition, or the JavaScript
implementation of the DOM API's

300
00:17:34.297 --> 00:17:38.745
definition, which says oninput will do
the job and attach it as a handler.

301
00:17:38.745 --> 00:17:43.703
What actually the C++ implementation
looks like will be specific to the given

302
00:17:43.703 --> 00:17:47.478
DOM implementation, and
it doesn't really matter for us.

303
00:17:47.478 --> 00:17:50.028
But roughly, it's handlers and

304
00:17:50.028 --> 00:17:54.771
these are input one to which we
are gonna attach handleInput.

305
00:17:54.771 --> 00:17:58.551
There it is, and
I'm just gonna separate these so

306
00:17:58.551 --> 00:18:02.155
we cannot get too confused
about each element.

307
00:18:02.155 --> 00:18:06.343
Great, good stuff,
now did I miss anything?

308
00:18:06.343 --> 00:18:10.368
Yes, I did, [LAUGH] okay, I've got
more here, one more line to do, good.

309
00:18:10.368 --> 00:18:13.032
Now, let's add our call stack here,

310
00:18:13.032 --> 00:18:17.990
because I think we're about to start
having some specific things to think about

311
00:18:17.990 --> 00:18:20.965
in terms of the ordering and
execution of code.

312
00:18:20.965 --> 00:18:26.598
The ordering and the running,
and then our callback queue.

313
00:18:26.598 --> 00:18:31.587
There it is, and we know that
there's also this event loop that is

314
00:18:31.587 --> 00:18:35.866
checking whether there's
anything on the call stack.

315
00:18:35.866 --> 00:18:40.358
And that all global code has
finished running before anything in

316
00:18:40.358 --> 00:18:44.935
the queue of functions that have
been called back Into JavaScript

317
00:18:44.935 --> 00:18:47.365
to run are added to the call stack.

