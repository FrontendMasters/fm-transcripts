WEBVTT

1
00:00:00.070 --> 00:00:04.088
We were just about to explore
the world that maybe for

2
00:00:04.088 --> 00:00:06.700
some of us is quite familiar.

3
00:00:06.700 --> 00:00:10.480
For those of you new to JavaScript,

4
00:00:10.480 --> 00:00:16.660
we are going to walk through
this quite pure language.

5
00:00:16.660 --> 00:00:20.536
JavaScript becomes the most
popular language in the world,

6
00:00:20.536 --> 00:00:22.816
because it runs in the web browser,

7
00:00:22.816 --> 00:00:27.380
which is almost an operating system
level of available features to it.

8
00:00:27.380 --> 00:00:29.847
So let's actually even draw that for
a second.

9
00:00:29.847 --> 00:00:35.612
Another sort of schematic
diagram here of the web browser.

10
00:00:35.612 --> 00:00:38.278
I think it'd be useful to keep
in this corner here for a bit.

11
00:00:38.278 --> 00:00:43.431
That's very strange shape,
keep in the corner here.

12
00:00:43.431 --> 00:00:48.237
Okay, so the only file type we can open
directly in the web browser, actually,

13
00:00:48.237 --> 00:00:53.335
when you open a www.wikipedia.org,
whatever page, it's loading what file type

14
00:00:53.335 --> 00:00:58.545
Alexa, what's the only file that you can
actually open directly in the web browser?

15
00:00:58.545 --> 00:01:00.100
HTML.
HTML, exactly.

16
00:01:00.100 --> 00:01:04.937
So it's literally, and we're doing
this mostly on our local computers,

17
00:01:04.937 --> 00:01:09.543
that means on our computer itself,
but it's literally taking in, for

18
00:01:09.543 --> 00:01:12.405
example, like app.html, loading it in.

19
00:01:12.405 --> 00:01:19.633
And then that is being parsed, that means
line by line it's being interpreted,

20
00:01:19.633 --> 00:01:25.176
read figured out what it says
by the HTML parser, there it is.

21
00:01:26.492 --> 00:01:31.343
Okay, and then that is adding to

22
00:01:31.343 --> 00:01:36.373
our C++ list of, look at that,

23
00:01:36.373 --> 00:01:41.241
list of elements, there we go.

24
00:01:41.241 --> 00:01:47.480
C++ list of elements,
those are added to by the HTML parser.

25
00:01:47.480 --> 00:01:52.989
However, HTML is also where,
if we look at our HTML code there,

26
00:01:52.989 --> 00:01:56.164
we can add a file of JavaScript code.

27
00:01:56.164 --> 00:01:58.864
We always talk in hard parts,
if you ever watched it,

28
00:01:58.864 --> 00:02:01.154
about JavaScript starts running, but how?

29
00:02:01.154 --> 00:02:02.312
You know what?

30
00:02:02.312 --> 00:02:07.471
It says running by us linking
a script of JavaScript code,

31
00:02:07.471 --> 00:02:12.420
a file a JAVA script in our
HTML that's going to start our

32
00:02:12.420 --> 00:02:15.287
JavaScript engine executing.

33
00:02:15.287 --> 00:02:19.320
Here it is, says our java engine,
and look at this,

34
00:02:19.320 --> 00:02:24.980
JavaScript engine is gonna have
a store of data that can be changed.

35
00:02:24.980 --> 00:02:29.092
It's gonna have a thread of execution
that can thread through and

36
00:02:29.092 --> 00:02:31.720
execute code line by line and run code.

37
00:02:31.720 --> 00:02:33.871
What a dream, it's beautiful.

38
00:02:36.721 --> 00:02:38.120
Let's do it.

39
00:02:38.120 --> 00:02:42.100
But note, other than that,
Java is a pretty basic language.

40
00:02:42.100 --> 00:02:45.510
I think it's very nice language,
there's a couple of very cool things.

41
00:02:45.510 --> 00:02:52.530
We're gonna see that JavaScript lets us
have code saved and functions arbitrarily.

42
00:02:52.530 --> 00:02:57.837
That means, without us directly
influencing it ourselves,

43
00:02:57.837 --> 00:03:03.039
execute, run later on out of
order in which they were saved or

44
00:03:03.039 --> 00:03:08.360
defined or stored,
known as asynchronicity, out of order.

45
00:03:08.360 --> 00:03:11.650
On by the way, user actions happening.

46
00:03:12.650 --> 00:03:13.354
When they do that,

47
00:03:13.354 --> 00:03:16.750
they're gonna need to have the data from
when those functions were saved defined.

48
00:03:16.750 --> 00:03:22.200
That's known as closure, that's our
favorite feature from JavaScript, right?

49
00:03:22.200 --> 00:03:25.448
That's the backpack, there we go.

50
00:03:25.448 --> 00:03:29.880
[LAUGH] So JavaScript though,
besides that, it's pretty basic language.

51
00:03:29.880 --> 00:03:32.238
Sees data, runs code to change that data,

52
00:03:32.238 --> 00:03:36.680
does it inside execution contexts
that will place many stores of data.

53
00:03:36.680 --> 00:03:41.557
That is it, it's gonna become
profoundly powerful though,

54
00:03:41.557 --> 00:03:48.230
if we can save data, change it, and then
use it maybe in the DOM, in a C++ list.

55
00:03:48.230 --> 00:03:52.852
Which we know as soon as
anything's added here,

56
00:03:52.852 --> 00:03:58.047
will be displayed as pixels on a webpage,
beautiful.

57
00:03:58.047 --> 00:04:04.115
Note actually technically what's happening
there is the render engine is shooting out

58
00:04:04.115 --> 00:04:10.019
an image of the page to the graphics card,
the graphics hardware 60 times a second.

59
00:04:10.019 --> 00:04:12.710
Kind of cool, right, 60 times a second.

60
00:04:12.710 --> 00:04:15.417
That's actually the output
of the web browser.

61
00:04:15.417 --> 00:04:20.750
It's like throwing funneling out an image,
60 times a second to graphics card.

62
00:04:21.780 --> 00:04:22.688
Okay, great.

63
00:04:22.688 --> 00:04:25.048
So we know then, for our purposes,

64
00:04:25.048 --> 00:04:28.755
we'll just keep it as like
a nice web page, there it is.

65
00:04:28.755 --> 00:04:34.132
And that's our output, we are going to
have our DOM in purple from now on.

66
00:04:34.132 --> 00:04:38.200
And a big change, there it is,

67
00:04:38.200 --> 00:04:42.746
it's our C++ list of elements.

68
00:04:42.746 --> 00:04:46.210
There it is, list of elements, beautiful.

69
00:04:46.210 --> 00:04:49.823
The first thing we're adding here, Phil,

70
00:04:49.823 --> 00:04:53.836
is what element from our
HTML which is not C++.

71
00:04:53.836 --> 00:04:55.113
That's our HTML code.

72
00:04:55.113 --> 00:04:58.690
I'm probably gonna just, yeah,
we are gonna run our HTML code first.

73
00:04:58.690 --> 00:05:03.752
What's the first thing it adds
to our C++ list of nodes, Phil?

74
00:05:03.752 --> 00:05:05.498
A script element or a script node?

75
00:05:05.498 --> 00:05:06.235
Script, exactly.

76
00:05:06.235 --> 00:05:10.205
Script, linking to which file?

77
00:05:10.205 --> 00:05:10.788
App.js.

78
00:05:10.788 --> 00:05:11.927
And Phil said it better than me there,
exactly.

79
00:05:11.927 --> 00:05:13.491
A script node, perfect.

80
00:05:13.491 --> 00:05:17.401
Now, that won't show anything on the page.

81
00:05:17.401 --> 00:05:22.007
But we know that anything that's
added to the DOM will be added to

82
00:05:22.007 --> 00:05:24.578
the page if it's a visual element.

83
00:05:24.578 --> 00:05:31.430
And this is all handled by the core of the
web files of or web code of the browser.

84
00:05:31.430 --> 00:05:32.510
Okay, beautiful.

85
00:05:33.690 --> 00:05:34.946
Let's go into JavaScript.

86
00:05:34.946 --> 00:05:36.171
Here we go.

87
00:05:36.171 --> 00:05:41.583
JavaScript has a, well,
JavaScript, it has a memory for

88
00:05:41.583 --> 00:05:48.219
storing data bit constrained here,
so we'll try and keep this tight.

89
00:05:48.219 --> 00:05:54.087
And it has a call stack, That is going

90
00:05:54.087 --> 00:05:59.918
to be a list of the functions that are
currently executing, currently running.

91
00:05:59.918 --> 00:06:03.768
When we start off running JavaScript, so
I'm not gonna assume anything here, I know

92
00:06:03.768 --> 00:06:07.367
hopefully many of you have seen hard
parts of JavaScript, maybe you haven't.

93
00:06:07.367 --> 00:06:11.741
We know that JavaScript is going to,
when running, automatically be in

94
00:06:11.741 --> 00:06:17.080
the global the whole file, so the call
stack will keep track of what's running.

95
00:06:17.080 --> 00:06:21.396
And it's initially running all the code,
which is the global almost single

96
00:06:21.396 --> 00:06:25.740
the overall file of code is a function
called global that is now running.

97
00:06:25.740 --> 00:06:27.952
As soon as we start running a function,

98
00:06:27.952 --> 00:06:30.968
it will be added to that
stack of functions being run,

99
00:06:30.968 --> 00:06:35.072
that list of functions being run so
that we can keep track of where we are.

100
00:06:35.072 --> 00:06:38.670
Okay, but let's start our very
first line of JavaScript here.

101
00:06:38.670 --> 00:06:42.944
Let's start with who
would like to call on?

102
00:06:42.944 --> 00:06:44.894
Let's have John.

103
00:06:44.894 --> 00:06:47.182
You're up John,
what's our first line of Java?

104
00:06:47.182 --> 00:06:48.886
So what are we storing in memory?

105
00:06:48.886 --> 00:06:51.187
And note people, we're storing data,

106
00:06:51.187 --> 00:06:55.390
and user interface engineering is all
about displaying content or data.

107
00:06:55.390 --> 00:06:58.457
And be able to change it, I'm very
excited that we're storing some data,

108
00:06:58.457 --> 00:06:59.831
that might be able to be changed.

109
00:06:59.831 --> 00:07:01.032
John, go ahead.

110
00:07:01.032 --> 00:07:03.748
First just interface with the pause, and

111
00:07:03.748 --> 00:07:08.500
it's setting it to the undeclared,
That sounds very fancy already.

112
00:07:08.500 --> 00:07:13.372
[LAUGH] Yes, so
we are going to in line 1 store, and

113
00:07:13.372 --> 00:07:19.355
keep it simple for us John, So
it is setting it to the Hi then.

114
00:07:19.355 --> 00:07:25.088
Yes, Hi, and then it'll hard for
me to write hand emoji,

115
00:07:25.088 --> 00:07:28.491
so I'm not gonna do that for long.

116
00:07:28.491 --> 00:07:31.514
So what are we gonna do,
Alexa, right after that?

117
00:07:31.514 --> 00:07:34.986
Then we're gonna reassign
post to the string Hi.

118
00:07:34.986 --> 00:07:39.941
Beautiful, reassign, much easier for
me to write there it is, perfect.

119
00:07:39.941 --> 00:07:42.987
And now things immediately
get kind of interesting.

120
00:07:42.987 --> 00:07:47.177
We have here, console log, post,

121
00:07:47.177 --> 00:07:51.374
the value of post selector is what?

122
00:07:51.374 --> 00:07:52.921
That string hi exclamation.

123
00:07:52.921 --> 00:07:55.388
Beautiful, there it is.

124
00:07:55.388 --> 00:07:59.120
Okay, this is interesting.

125
00:07:59.120 --> 00:08:02.090
So, the console, first thing to say,

126
00:08:02.090 --> 00:08:05.780
the console is not in JavaScript,
not a chance.

127
00:08:05.780 --> 00:08:10.440
Let's have it over here, purple,
not meaning it's in the DOM,

128
00:08:10.440 --> 00:08:12.230
just not in JavaScript.

129
00:08:13.260 --> 00:08:14.260
There it is.

130
00:08:14.260 --> 00:08:17.314
So that is to say,
it's not a JavaScript engine but

131
00:08:17.314 --> 00:08:20.220
it is in our web browser as a whole.

132
00:08:20.220 --> 00:08:25.757
So it actually sits as a separate
feature as part of the dev tools,

133
00:08:25.757 --> 00:08:30.102
that somehow from JavaScript
we have access to it.

134
00:08:30.102 --> 00:08:35.434
And we get access to it actually
automatically as soon as JavaScript loads

135
00:08:35.434 --> 00:08:40.766
in the web browser, its memory gets
populated with a very useful object,

136
00:08:40.766 --> 00:08:45.705
just a regular JavaScript
object by the name of console.

137
00:08:45.705 --> 00:08:46.995
There it is.

138
00:08:46.995 --> 00:08:51.252
And init is a function,
a method of the name

139
00:08:51.252 --> 00:08:56.573
log,that when we run it by
putting params on the end,

140
00:08:56.573 --> 00:09:01.840
ain't really doing all
that much in JavaScript.

141
00:09:01.840 --> 00:09:07.052
Much more interestingly,
what it's doing is it's linked out

142
00:09:07.052 --> 00:09:13.658
to the console where we then, so our log
here is really speaking to the console.

143
00:09:13.658 --> 00:09:15.673
That's actually a whole
wealth of functions in here.

144
00:09:15.673 --> 00:09:17.379
Does anybody know any other ones?

145
00:09:17.379 --> 00:09:21.523
Yes, Phil, please Error Error, good cool.

146
00:09:21.523 --> 00:09:23.081
I definitely know all of these.

147
00:09:23.081 --> 00:09:25.850
[LAUGH] So I'm not gonna spell
them just in case, okay,

148
00:09:25.850 --> 00:09:28.795
maybe it's error that some
of the error possibly, yes.

149
00:09:28.795 --> 00:09:31.316
Yeah, exactly.
Yes, Justice, go ahead.

150
00:09:31.316 --> 00:09:32.653
Table.
Table, yes.

151
00:09:32.653 --> 00:09:36.828
I knew that one, table well done,
brilliant, table.

152
00:09:36.828 --> 00:09:39.516
Each of these when run ain't
doing anything all that much

153
00:09:39.516 --> 00:09:40.925
interesting in JavaScript.

154
00:09:40.925 --> 00:09:41.864
And you got one?

155
00:09:41.864 --> 00:09:42.365
Yeah, time.

156
00:09:42.365 --> 00:09:45.304
Time.

157
00:09:45.304 --> 00:09:46.985
He's a definitely all of them.

158
00:09:46.985 --> 00:09:48.248
Yes, Paul, please.

159
00:09:48.248 --> 00:09:49.137
Dir.

160
00:09:49.137 --> 00:09:51.134
Dir, that dir, exactly, I knew that one.

161
00:09:51.134 --> 00:09:52.790
I was recently taught that one, brilliant.

162
00:09:52.790 --> 00:09:55.987
All of these are all
functions that when run,

163
00:09:55.987 --> 00:10:00.400
they are what they call
technically web browser APIs.

164
00:10:00.400 --> 00:10:05.308
That means they're features of
the web browser that we API

165
00:10:05.308 --> 00:10:08.823
interface with from JavaScript, okay?

166
00:10:08.823 --> 00:10:11.781
What are we gonna be displaying
here Alexa on our console.

167
00:10:11.781 --> 00:10:13.656
The string Hi!

168
00:10:13.656 --> 00:10:16.747
Exactly, perfect,
the string Hi exclamation mark.

169
00:10:16.747 --> 00:10:22.481
So our console is a object full
of functions that are backdooring

170
00:10:22.481 --> 00:10:27.483
out of JavaScript into another
part of the web browser.

171
00:10:27.483 --> 00:10:30.044
Well, this might give us a clue.

172
00:10:30.044 --> 00:10:35.997
I got some hope that we got this lovely
data that we can change in JavaScript and

173
00:10:35.997 --> 00:10:37.645
can take that data and

174
00:10:37.645 --> 00:10:43.530
maybe access our C++ object known as
the model of the page, the document.

175
00:10:43.530 --> 00:10:49.287
Not just with HTML, it was a one-time
very intuitive load onto this object,

176
00:10:49.287 --> 00:10:53.644
onto this list, but
perhaps we can do it with JavaScript.

177
00:10:53.644 --> 00:10:59.375
And that would require that in JavaScript,
we had some sort of label for

178
00:10:59.375 --> 00:11:03.588
that feature outside of
JavaScript called the DOM.

179
00:11:03.588 --> 00:11:07.085
Maybe the object would be called DOM.

180
00:11:07.085 --> 00:11:10.164
No, what's the object called, Phil?

181
00:11:10.164 --> 00:11:10.670
Document.

182
00:11:10.670 --> 00:11:12.522
Document, exactly.

183
00:11:12.522 --> 00:11:16.221
We do get automatically in JavaScript

184
00:11:16.221 --> 00:11:21.180
a regular old object by
the name of document.

185
00:11:21.180 --> 00:11:25.569
And it's gonna have, folk, a hidden link.

186
00:11:26.680 --> 00:11:32.040
Whenever you see in JavaScript hidden
links out to other parts of the web

187
00:11:32.040 --> 00:11:38.314
browser, know that it's probably being
stored as a hidden property on an object.

188
00:11:38.314 --> 00:11:42.474
We can't just have links out to other
parts of the web browser directly stored

189
00:11:42.474 --> 00:11:43.377
in JavaScript.

190
00:11:43.377 --> 00:11:45.935
What even is that as a structure,
as a way of storing stuff?

191
00:11:45.935 --> 00:11:47.861
We can store, what data structures
can we store in JavaScript?

192
00:11:47.861 --> 00:11:49.146
What data formats can we store?

193
00:11:49.146 --> 00:11:52.242
Justus, what can we store in JavaScript?

194
00:11:52.242 --> 00:11:53.682
1s and 0s?

195
00:11:53.682 --> 00:11:54.544
Yeah, wow.

196
00:11:54.544 --> 00:11:58.162
In JavaScript, I mean, you can
definitely store the number, so numbers.

197
00:11:58.162 --> 00:11:59.443
Yes, what else John?

198
00:11:59.443 --> 00:12:04.534
There is objects Objects,
perfect, strings, arrays.

199
00:12:04.534 --> 00:12:05.374
Binary.

200
00:12:05.374 --> 00:12:10.357
Yeah, we have Boolean, but
really we have nowhere is there

201
00:12:10.357 --> 00:12:15.653
like hidden link,
nowhere is that linked to outside feature.

202
00:12:15.653 --> 00:12:18.423
So the way we capture that
always is within an object.

203
00:12:18.423 --> 00:12:23.601
In this case,
our object stored in the label document

204
00:12:23.601 --> 00:12:30.045
is gonna have a hidden property
linking to this position in C++,

205
00:12:30.045 --> 00:12:35.240
where we have our list of all
the elements on the page.

206
00:12:35.240 --> 00:12:40.001
Beautiful, and it's going to be full
to the brim, or as we say in England,

207
00:12:40.001 --> 00:12:44.537
just so you can spread a new word,
because it isn't normal phrase, but

208
00:12:44.537 --> 00:12:50.086
it's gonna be chock a block with, [LAUGH]
I don't wanna be a clean show your parody.

209
00:12:50.086 --> 00:12:55.098
Okay, a block full of functions
that when they run are gonna

210
00:12:55.098 --> 00:13:01.113
check what's linked it's the C++
environment, C++ runtime,

211
00:13:01.113 --> 00:13:07.520
in which we have a list of elements
that will auto be added to the page.

212
00:13:07.520 --> 00:13:11.725
So it's gonna link to that whenever
we run a function on document like,

213
00:13:11.725 --> 00:13:16.560
well there's a few, query selector, but
there's many, they are not going to do

214
00:13:16.560 --> 00:13:21.510
only work in JavaScript, they're also
gonna have a look at the hidden link.

215
00:13:21.510 --> 00:13:25.859
See it's a link to this model of
the page and do some work there,

216
00:13:25.859 --> 00:13:28.170
which is just bloody fantastic.

217
00:13:28.170 --> 00:13:33.820
We are gonna have access to this
C++ runtime from within JavaScript.

218
00:13:35.100 --> 00:13:36.780
Wow, okay.

219
00:13:36.780 --> 00:13:40.622
So, data and code to change is
only available in JavaScript.

220
00:13:40.622 --> 00:13:45.540
A JavaScript file of code, added using
HTML, that's what we did, right?

221
00:13:45.540 --> 00:13:48.832
That little script added the JavaScript
is in an entire run time.

222
00:13:48.832 --> 00:13:50.519
It's got three weeks for you to run code.

223
00:13:50.519 --> 00:13:53.603
Memory for storing data it can
then execute that code and

224
00:13:53.603 --> 00:13:57.879
it can also have functions run later
asynchronously, which is really cool.

