WEBVTT

1
00:00:00.232 --> 00:00:05.021
Okay, so we now start to dive in

2
00:00:05.021 --> 00:00:09.822
to our one-way data binding.

3
00:00:09.822 --> 00:00:12.638
This is the world in which we are going
to start restricting ourselves.

4
00:00:12.638 --> 00:00:17.658
We're gonna move from
the truths of the world of

5
00:00:17.658 --> 00:00:23.431
user interface development
within the web browser and

6
00:00:23.431 --> 00:00:29.579
all its ad hoc history,
into the moves, the efforts, for

7
00:00:29.579 --> 00:00:35.248
us to make our lives more
manageable as UI engineers.

8
00:00:35.248 --> 00:00:38.871
And so we're gonna move to one way
data binding, our popular paradigm for

9
00:00:38.871 --> 00:00:41.450
tackling the essential UI
engineering challenge.

10
00:00:41.450 --> 00:00:47.250
Data that's happening in the browser to
be stored and changed within JavaScript.

11
00:00:47.250 --> 00:00:50.515
And our view, which is what the user sees,

12
00:00:50.515 --> 00:00:55.506
which in the web browser is
everything that is in that C++ list,

13
00:00:55.506 --> 00:01:00.982
technically object, the model of the page,
two different runtimes.

14
00:01:00.982 --> 00:01:05.857
Never the two shall mix
except via formal calls

15
00:01:05.857 --> 00:01:10.357
to get a setter properties
in JavaScript or

16
00:01:10.357 --> 00:01:14.482
handler functions in the DOM in C++,

17
00:01:14.482 --> 00:01:21.113
being called back into JavaScript
to run code on a user action.

18
00:01:21.113 --> 00:01:24.353
What a convoluted back and forth.

19
00:01:24.353 --> 00:01:26.918
You wouldn't design that if you,
maybe you would, I don't know,

20
00:01:26.918 --> 00:01:28.186
that's the [INAUDIBLE] best way.

21
00:01:28.186 --> 00:01:29.694
Hard, I don't think so.

22
00:01:29.694 --> 00:01:33.762
Invaluable at scale to have some sort
of restrictions on this structure.

23
00:01:33.762 --> 00:01:39.637
Thousands of points of interaction,
thousands of pieces of content data,

24
00:01:39.637 --> 00:01:44.333
with associated underlying data and
what you see in pixels.

25
00:01:44.333 --> 00:01:48.510
The one way data binding paradigm
implemented in Angular, in Vue,

26
00:01:48.510 --> 00:01:52.479
in React primarily,
although there are other ways of doing it.

27
00:01:52.479 --> 00:01:57.241
Because these are not truths,
these are efforts to provide restrictions

28
00:01:57.241 --> 00:02:00.255
to us that make our lives
easier as engineers.

29
00:02:00.255 --> 00:02:03.689
It'll enable us to build scalable
applications with or without frameworks,

30
00:02:03.689 --> 00:02:06.666
debug complex UIs, and
answer the toughest interview questions.

31
00:02:06.666 --> 00:02:08.793
So here we go.

32
00:02:08.793 --> 00:02:09.773
Where was I?

33
00:02:09.773 --> 00:02:12.704
Let's expand our UI to
be more sophisticated.

34
00:02:12.704 --> 00:02:16.159
Let's expand our UI to make
it more sophisticated.

35
00:02:16.159 --> 00:02:18.099
We're gonna add another handler.

36
00:02:18.099 --> 00:02:20.206
This one for clicks.

37
00:02:20.206 --> 00:02:25.231
Sounds like a, I don't know, whatever.

38
00:02:25.231 --> 00:02:26.711
This one's for clicks.

39
00:02:26.711 --> 00:02:29.018
This is for the fact,
this is for the clicks.

40
00:02:29.018 --> 00:02:33.644
We are gonna change our view based now
on multiple possible user interactions,

41
00:02:33.644 --> 00:02:35.449
in practice maybe thousands.

42
00:02:35.449 --> 00:02:40.127
Okay, let's build this out.

43
00:02:40.127 --> 00:02:44.706
We're gonna do it hopefully
a little bit more fluidly, so

44
00:02:44.706 --> 00:02:50.977
that you all start to, cuz you're all
gonna start to be like, this again.

45
00:02:50.977 --> 00:02:54.164
&gt;&gt; [LAUGH]
&gt;&gt; Creating another access object,

46
00:02:54.164 --> 00:02:59.205
pending another, or
attaching another handler function.

47
00:02:59.205 --> 00:03:02.572
Yeah, okay, so we're gonna do it people,

48
00:03:02.572 --> 00:03:06.220
because that is what we love doing,
isn't it?

49
00:03:06.220 --> 00:03:08.662
In hard parts,
the same thing on repeat [LAUGH].

50
00:03:08.662 --> 00:03:11.200
&gt;&gt; [LAUGH]
&gt;&gt; The same thing on repeat.

51
00:03:11.200 --> 00:03:12.220
That's what we love doing.

52
00:03:12.220 --> 00:03:15.424
So here we go, with that in mind and

53
00:03:15.424 --> 00:03:20.398
hopefully I can start to
whiteboard this out as we go.

54
00:03:20.398 --> 00:03:27.408
Here's our web page, web app, so to speak.

55
00:03:27.408 --> 00:03:31.286
And then we know that we have in C++,

56
00:03:31.286 --> 00:03:35.164
we have a list of elements that model,

57
00:03:35.164 --> 00:03:41.590
model just being a posh word for
a simplified representation or

58
00:03:41.590 --> 00:03:47.288
a simplified description,
a simplified in this case,

59
00:03:47.288 --> 00:03:53.012
way of storing the content
that's gonna be displayed.

60
00:03:53.012 --> 00:03:56.355
I say storing, well,
technically anything that's on here, and

61
00:03:56.355 --> 00:03:57.920
that's persistent, right?

62
00:03:57.920 --> 00:04:01.229
The use of this, this doesn't disappear,
is on this object.

63
00:04:01.229 --> 00:04:04.778
If we could all list, if we could
just interact with this directly,

64
00:04:04.778 --> 00:04:07.470
we'd be in a very different world,
but we can't.

65
00:04:07.470 --> 00:04:13.905
Unfortunately, we have to move in
a different space, that of JavaScript,

66
00:04:13.905 --> 00:04:19.746
or may not, unfortunately,
because we do rather like JavaScript.

67
00:04:19.746 --> 00:04:23.386
It has a memory for

68
00:04:23.386 --> 00:04:28.241
storing our data and for

69
00:04:28.241 --> 00:04:35.782
storing objects which are labeled.

70
00:04:35.782 --> 00:04:41.468
Labelled objects that are automatically
inserted in that memory full of methods,

71
00:04:41.468 --> 00:04:46.907
our most interesting one being document,
full of methods that allow us to add,

72
00:04:46.907 --> 00:04:51.721
edit, access, query, search,
create staff in C++ in this list.

73
00:04:51.721 --> 00:04:56.477
Okay, I think that is good to go.

74
00:04:56.477 --> 00:04:59.445
We lost our schema, dear.

75
00:04:59.445 --> 00:05:01.892
Next time can we have our wonderful, no,

76
00:05:01.892 --> 00:05:06.004
they wont be able to do because they
use the mop to wipe down, don't they?

77
00:05:06.004 --> 00:05:08.808
All right, hey, we're not gonna forget
this schema after this, are we?

78
00:05:08.808 --> 00:05:12.944
app.html gets loaded in, HTML parser,

79
00:05:12.944 --> 00:05:16.725
interprets looks through the code and

80
00:05:16.725 --> 00:05:22.330
then loads onto our C++ list,
known as the DOM.

81
00:05:22.330 --> 00:05:27.560
Everything on there will be
rendered to the actual page.

82
00:05:27.560 --> 00:05:30.890
As soon as the HTML parser
hits any JavaScript file,

83
00:05:30.890 --> 00:05:33.243
it spins up the JavaScript runtime.

84
00:05:33.243 --> 00:05:35.268
There it is and
that's where we're going now.

85
00:05:35.268 --> 00:05:40.220
The JavaScript runtime for
memory has access to the DOM from

86
00:05:40.220 --> 00:05:43.696
the document object, isn't that cool?

87
00:05:43.696 --> 00:05:47.692
Here it is, so, there it is.

88
00:05:47.692 --> 00:05:54.821
And it has a hidden link to the DOM,
there.

89
00:05:54.821 --> 00:05:59.996
And it also has a bunch of useful
functions, which ones are we using here?

90
00:05:59.996 --> 00:06:04.711
Just query selector I think,
yeah, just query selector,

91
00:06:04.711 --> 00:06:08.595
which allows us to access
any element on the DOM.

92
00:06:08.595 --> 00:06:11.389
Which makes me realize,
what did I forget to do?

93
00:06:11.389 --> 00:06:13.293
I forgot to run my HTML first.

94
00:06:13.293 --> 00:06:18.510
So Justice, what are our elements on
the DOM immediately from the HTML file?

95
00:06:18.510 --> 00:06:19.084
&gt;&gt; Input.

96
00:06:19.084 --> 00:06:21.219
&gt;&gt; Input, perfect, there we go.

97
00:06:21.219 --> 00:06:21.849
&gt;&gt; Div.

98
00:06:21.849 --> 00:06:23.425
&gt;&gt; Div, perfect, and.

99
00:06:23.425 --> 00:06:24.069
&gt;&gt; Script.

100
00:06:24.069 --> 00:06:28.047
&gt;&gt; Script, exactly, which is what
allowed this JavaScript to load.

101
00:06:28.047 --> 00:06:30.906
And beautiful, there we go.

102
00:06:30.906 --> 00:06:35.369
And those also, Justice,
what happens on the page itself?

103
00:06:35.369 --> 00:06:38.314
&gt;&gt; Get input rendered and then a div
that's not really shown but it's there.

104
00:06:38.314 --> 00:06:40.839
&gt;&gt; Beautiful, rendered,
I like that term, yes exactly.

105
00:06:40.839 --> 00:06:42.880
Rendered, posh word for displayed.

106
00:06:42.880 --> 00:06:46.891
Okay, great, now let's go into JavaScript.

107
00:06:46.891 --> 00:06:50.905
And we're gonna start saving
our own stuff in memory, so

108
00:06:50.905 --> 00:06:55.438
let's go with Justice, actually,
you can keep us going here.

109
00:06:55.438 --> 00:06:59.491
What are we gonna save in memory?

110
00:06:59.491 --> 00:07:03.081
Our first line, they're saving some data.

111
00:07:03.081 --> 00:07:06.108
&gt;&gt; So we're declaring a variable post.

112
00:07:06.108 --> 00:07:06.619
&gt;&gt; Yeah.

113
00:07:06.619 --> 00:07:08.392
&gt;&gt; And we're saving an empty string to it.

114
00:07:08.392 --> 00:07:13.968
Perfect, and remember right now we have
nothing displayed on our page beside our

115
00:07:13.968 --> 00:07:19.462
boxes, but we wanted, from our description
of what we wanna produce in our UI,

116
00:07:19.462 --> 00:07:21.683
is almost like a spec for our UI.

117
00:07:21.683 --> 00:07:23.882
Our product team said, hey,
we want this to happen.

118
00:07:23.882 --> 00:07:26.711
We wanna be a preview text, what's up?

119
00:07:26.711 --> 00:07:30.712
That would therefore have to show up
in the value of the input element.

120
00:07:30.712 --> 00:07:31.479
That's one way we could do it.

121
00:07:31.479 --> 00:07:32.772
That's how we're gonna do it here.

122
00:07:32.772 --> 00:07:36.282
And then when the user starts typing,
well firstly,

123
00:07:36.282 --> 00:07:40.884
they're gonna click on the cell,
on the input field to start typing,

124
00:07:40.884 --> 00:07:44.399
that click is going to wipe
the default preview text.

125
00:07:44.399 --> 00:07:49.197
And let the user at that
moment start typing.

126
00:07:49.197 --> 00:07:53.162
That typed content will then display
in both the position they're typing in,

127
00:07:53.162 --> 00:07:57.308
because they're typing in it, the input
field, and in a little preview window,

128
00:07:57.308 --> 00:07:58.403
the div right below.

129
00:07:58.403 --> 00:07:59.810
That's our ideal.

130
00:07:59.810 --> 00:08:01.569
Pretty basic UI.

131
00:08:01.569 --> 00:08:05.177
At least it's gonna start to get
a little bit more complex and

132
00:08:05.177 --> 00:08:09.849
already we're gonna have to start watching
the data flow around between, and

133
00:08:09.849 --> 00:08:12.273
already it's gonna get harder to do so.

134
00:08:12.273 --> 00:08:15.118
So post is declared as an empty string.

135
00:08:15.118 --> 00:08:20.574
Justice keep me going now,
what is gonna be stored into JS input?

136
00:08:20.574 --> 00:08:25.725
&gt;&gt; So we're going to call a document and
the method query selector,

137
00:08:25.725 --> 00:08:29.293
and pass in a string of input,
called input.

138
00:08:29.293 --> 00:08:33.170
&gt;&gt; Okay, yeah, so
we're calling query selector method,

139
00:08:33.170 --> 00:08:38.604
don't worry we're gonna do this again and
again people, [LAUGH] no, we are.

140
00:08:38.604 --> 00:08:42.073
And parsing input string, which is going,

141
00:08:42.073 --> 00:08:47.339
what's query selector do,
what three things does it do Justice?

142
00:08:47.339 --> 00:08:50.003
&gt;&gt; It is going to.

143
00:08:50.003 --> 00:08:51.377
&gt;&gt; How does it know where to hit?

144
00:08:51.377 --> 00:08:55.086
&gt;&gt; It has an invisible link that
links it to the DOM C++ stack.

145
00:08:55.086 --> 00:08:56.542
Yeah, yeah.

146
00:08:56.542 --> 00:09:02.250
&gt;&gt; And looking for input in that list.

147
00:09:02.250 --> 00:09:04.376
&gt;&gt; Exactly, does it find it?

148
00:09:04.376 --> 00:09:05.377
&gt;&gt; It finds it, it finds [INAUDIBLE].

149
00:09:05.377 --> 00:09:06.552
&gt;&gt; It better does.

150
00:09:06.552 --> 00:09:10.913
Exactly, exactly, exactly.

151
00:09:10.913 --> 00:09:16.279
And we are not though able to
retrieve it back into JavaScript,

152
00:09:16.279 --> 00:09:21.441
instead JavaScript is going to
give us an object that is going

153
00:09:21.441 --> 00:09:27.027
to have a link to that DOM element and
a bunch of useful functions.

154
00:09:27.027 --> 00:09:30.921
And that is stored into
where again Justice, which.

155
00:09:30.921 --> 00:09:32.883
&gt;&gt; Can store in the JS input.

156
00:09:32.883 --> 00:09:33.786
&gt;&gt; Perfect, thank you.

157
00:09:33.786 --> 00:09:39.357
And now, Justice don't worry,
now by analogy Justice,

158
00:09:39.357 --> 00:09:43.105
what is going to be stored into JS div?

159
00:09:43.105 --> 00:09:46.503
Let me just, let's put what methods
we're gonna get on JS input.

160
00:09:46.503 --> 00:09:48.822
There's a link to the input element.

161
00:09:48.822 --> 00:09:53.230
There it is.

162
00:09:53.230 --> 00:09:56.157
Perfect, and now what are the methods
are gonna show up and

163
00:09:56.157 --> 00:09:57.902
just based on what we can see here?

164
00:09:57.902 --> 00:10:00.301
&gt;&gt; I've got .value.

165
00:10:00.301 --> 00:10:02.228
&gt;&gt; .value in line 8.

166
00:10:04.163 --> 00:10:05.387
See any other setters?

167
00:10:05.387 --> 00:10:07.272
&gt;&gt; The .input on input.

168
00:10:07.272 --> 00:10:09.273
&gt;&gt; On input, and
I think there might be one more there.

169
00:10:12.016 --> 00:10:12.647
Right below.

170
00:10:12.647 --> 00:10:13.502
&gt;&gt; Yeah, and then the onclick.

171
00:10:13.502 --> 00:10:14.956
&gt;&gt; Onclick, exactly, yeah.

172
00:10:14.956 --> 00:10:19.923
And look, these are on all, or
some of these are on all DOM elements,

173
00:10:19.923 --> 00:10:21.905
it's whatever we can use.

174
00:10:21.905 --> 00:10:25.214
I just only show the ones which we're
actually gonna use just to, yeah,

175
00:10:25.214 --> 00:10:26.201
keep things simple.

176
00:10:26.201 --> 00:10:29.176
We can find all of them on MDN,
every single last one of them.

177
00:10:29.176 --> 00:10:34.902
Beautiful, now by analogy Justice, because
we do not want to do that again, do we?

178
00:10:34.902 --> 00:10:40.387
By analogy, what is going to be
stored in JS div, do you think?

179
00:10:40.387 --> 00:10:43.618
&gt;&gt; Let's see, we've got text content.

180
00:10:43.618 --> 00:10:45.721
&gt;&gt; Yeah, so just to start off,
so we call it.

181
00:10:45.721 --> 00:10:48.320
So we're gonna assign a JS div,

182
00:10:48.320 --> 00:10:52.845
a call to query selector that
is going to search the DOM,

183
00:10:52.845 --> 00:10:58.451
linked to by the hidden link in
the document object, for a selector.

184
00:10:58.451 --> 00:11:05.788
That's a string that allows us to select
an element of type, what here Justice?

185
00:11:05.788 --> 00:11:08.165
&gt;&gt; Div.
&gt;&gt; Div, spot on, do we find it?

186
00:11:08.165 --> 00:11:08.676
&gt;&gt; We do.

187
00:11:08.676 --> 00:11:13.504
&gt;&gt; We bet we do, and we are going
to not better return it directly,

188
00:11:13.504 --> 00:11:18.153
just a link to it, which will be
stored as a hidden property on

189
00:11:18.153 --> 00:11:23.281
a brand new JavaScript object
created by the query selector call.

190
00:11:23.281 --> 00:11:27.913
And as you say that query selector,
or that brand new JavaScript object,

191
00:11:27.913 --> 00:11:32.933
sorry, is going to have what property or
what getter setter property Justice?

192
00:11:32.933 --> 00:11:33.599
&gt;&gt; Text content.

193
00:11:33.599 --> 00:11:34.689
&gt;&gt; Text content, perfect.

194
00:11:34.689 --> 00:11:38.329
And a link to that div.

195
00:11:42.754 --> 00:11:45.251
A link to that div, beautiful.

196
00:11:45.251 --> 00:11:49.719
And then text content as its most

197
00:11:49.719 --> 00:11:55.025
useful here getter setter property.

198
00:11:55.025 --> 00:11:58.717
Are you already feeling people,
the tediousness of joy.

199
00:11:58.717 --> 00:12:01.052
Yes, let me know, no one's.

200
00:12:01.052 --> 00:12:03.317
For the record, nobody nodded.

201
00:12:03.317 --> 00:12:06.007
&gt;&gt; [LAUGH]
&gt;&gt; It was just looks of joy.

202
00:12:06.007 --> 00:12:07.621
Okay, perfect.

203
00:12:07.621 --> 00:12:13.921
We are going to display some of
the content or some content here,

204
00:12:13.921 --> 00:12:18.937
which is we're gonna use
the value setter property

205
00:12:18.937 --> 00:12:23.720
on the JS input object that
acts as an accessor for

206
00:12:23.720 --> 00:12:27.239
the underlying DOM element input.

207
00:12:27.239 --> 00:12:32.866
And we're going to set its value,
which is currently,

208
00:12:32.866 --> 00:12:39.586
there's no value being displayed,
cuz value is an empty string.

209
00:12:39.586 --> 00:12:44.218
We're gonna set its
value to the value post.

210
00:12:44.218 --> 00:12:46.554
No, we're not, sorry,
we're gonna set its value to what?

211
00:12:46.554 --> 00:12:48.585
We're gonna set its value to, Alexa?

212
00:12:48.585 --> 00:12:49.792
&gt;&gt; The string what's on your mind.

213
00:12:49.792 --> 00:12:50.835
&gt;&gt; Perfect, yes, perfect.

214
00:12:50.835 --> 00:12:52.974
So let's do that.

215
00:12:52.974 --> 00:12:58.055
jsinput.value is going to use the value

216
00:12:58.055 --> 00:13:04.183
setter to access
the associated input element,

217
00:13:04.183 --> 00:13:09.862
the corresponding C++ object of type input

218
00:13:09.862 --> 00:13:17.045
that we know describes exactly
what shows up on the page.

219
00:13:17.045 --> 00:13:21.867
Because of the automatic layout and
render engine

220
00:13:21.867 --> 00:13:27.159
between the list of elements in C++ and
the web page.

221
00:13:27.159 --> 00:13:32.571
And we are going to set its value to
exactly as Alexa said there, what's,

222
00:13:32.571 --> 00:13:37.004
I should have changed, I shouldn't,
I need to edit accesses?

223
00:13:37.004 --> 00:13:39.962
Because by the looks of it,
I've set it to what's up, dear.

224
00:13:39.962 --> 00:13:44.059
Okay, to what's up to keep it shorter for

225
00:13:44.059 --> 00:13:48.165
my code, so we'll save it to what's up.

226
00:13:48.165 --> 00:13:52.873
And that is going to set
the value here to what's up,

227
00:13:52.873 --> 00:13:57.694
and that's gonna show up
immediately on our screen.

228
00:13:57.694 --> 00:14:00.770
What's up, beautiful.

229
00:14:00.770 --> 00:14:03.835
Now we save some handlers, why?

230
00:14:03.835 --> 00:14:06.681
What are some handlers we're
gonna save right here?

231
00:14:06.681 --> 00:14:10.243
&gt;&gt; Yeah, we're signing handle,
we're defining handle input and

232
00:14:10.243 --> 00:14:11.350
then handle click.

233
00:14:11.350 --> 00:14:16.554
&gt;&gt; Perfect, why is there still,
I know that inside Y wants to

234
00:14:16.554 --> 00:14:22.841
say the sophisticated function
definition processing here before.

235
00:14:22.841 --> 00:14:25.086
&gt;&gt; [LAUGH]
&gt;&gt; But, look at that,

236
00:14:25.086 --> 00:14:28.778
I didn't do an uppercase C for
the handle click.

237
00:14:28.778 --> 00:14:32.330
I need to set these as edit mode so
I can live edit that.

238
00:14:32.330 --> 00:14:33.467
But there we go.

239
00:14:33.467 --> 00:14:37.289
Then we're gonna use our setters.

240
00:14:37.289 --> 00:14:44.400
Oninput and on click to set
the handlers for this input element.

241
00:14:44.400 --> 00:14:47.985
I think what I'm gonna do so
we can fit them on is,

242
00:14:47.985 --> 00:14:51.406
I think I'm gonna write
them just below here.

243
00:14:51.406 --> 00:14:54.084
So here's our different elements,
gonna run this below here.

244
00:14:54.084 --> 00:14:57.990
Handlers, right?

245
00:14:57.990 --> 00:15:03.525
And then for input by the user and

246
00:15:03.525 --> 00:15:06.810
click by the user.

247
00:15:06.810 --> 00:15:11.219
Okay, perfect, so let's assign them.

248
00:15:11.219 --> 00:15:13.070
If you can do that actually why?

249
00:15:13.070 --> 00:15:16.290
What are we doing in line 15 roughly,
in terms of our,

250
00:15:16.290 --> 00:15:18.560
well talk me through the full process.

251
00:15:18.560 --> 00:15:22.908
&gt;&gt; We're using the setter method
on JS input called on input.

252
00:15:22.908 --> 00:15:23.770
&gt;&gt; Perfect.

253
00:15:23.770 --> 00:15:30.729
&gt;&gt; And we're passing the handle input
function definition to that setter.

254
00:15:30.729 --> 00:15:32.247
And then we're.

255
00:15:32.247 --> 00:15:34.242
&gt;&gt; Wow.

256
00:15:34.242 --> 00:15:35.746
&gt;&gt; Doing the same thing with the.

257
00:15:35.746 --> 00:15:42.393
&gt;&gt; And that same being assigned as the
input handler on the DOM object in C++.

258
00:15:42.393 --> 00:15:44.828
So yeah, let's put that here.

259
00:15:44.828 --> 00:15:46.974
Let's see if I can do this small enough,
sorry people.

260
00:15:46.974 --> 00:15:50.638
Handle input, there it is.

261
00:15:50.638 --> 00:15:53.637
And then same thing for click.

262
00:15:53.637 --> 00:15:54.533
You're saying?

263
00:15:54.533 --> 00:15:59.848
&gt;&gt; Yep, we're passing the handle
click function definition

264
00:15:59.848 --> 00:16:04.107
to the onclick setter
property of the JS input.

265
00:16:04.107 --> 00:16:07.031
&gt;&gt; I think honestly that deserves
a round of applause, I don't know why.

266
00:16:07.031 --> 00:16:11.172
&gt;&gt; [APPLAUSE]
&gt;&gt; I think it deserves a round of applause

267
00:16:11.172 --> 00:16:15.963
cuz I think [INAUDIBLE] will be thinking,
all very well I can maybe follow through,

268
00:16:15.963 --> 00:16:20.199
but to get the verbal technical
communication of that flow perfect there

269
00:16:20.199 --> 00:16:21.670
is really outstanding.

