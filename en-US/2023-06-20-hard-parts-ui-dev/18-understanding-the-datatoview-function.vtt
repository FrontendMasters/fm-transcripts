WEBVTT

1
00:00:00.200 --> 00:00:03.014
We are building out the same
user interface we had before.

2
00:00:03.014 --> 00:00:04.100
There it is.

3
00:00:04.100 --> 00:00:07.764
I'm typing into my input field,
but I first got to click on it,

4
00:00:07.764 --> 00:00:11.120
which is gonna remove my default text,
what's up?

5
00:00:11.120 --> 00:00:14.481
As I type,
I get a preview of what I've typed.

6
00:00:14.481 --> 00:00:16.200
Very, very simple user interface.

7
00:00:16.200 --> 00:00:20.117
However, even that involves a lot
of reasoning about back and

8
00:00:20.117 --> 00:00:21.708
forth between our data.

9
00:00:21.708 --> 00:00:24.699
And if we added ten handlers,
the flow between

10
00:00:24.699 --> 00:00:29.390
them of what the user's behavior was,
I'm gonna have what we saw here.

11
00:00:29.390 --> 00:00:31.658
At its core, I'm gonna have so

12
00:00:31.658 --> 00:00:36.034
many different places that I
can affect what the user sees.

13
00:00:36.034 --> 00:00:40.237
I'm gonna have so
many different places where I can

14
00:00:40.237 --> 00:00:44.890
affect the content that is
being viewed by the user.

15
00:00:44.890 --> 00:00:47.010
And we are in a high-stakes environment.

16
00:00:47.010 --> 00:00:51.616
If what the user sees does not look like
what's actually going on and we can't work

17
00:00:51.616 --> 00:00:56.089
out why, we're in a really difficult
position, because users were brought up

18
00:00:56.089 --> 00:01:01.250
from one year old that what they see is
how the world actually is under the hood.

19
00:01:01.250 --> 00:01:03.254
So they're really upset.

20
00:01:03.254 --> 00:01:07.241
Even latency in a server,
if you're writing server code errors,

21
00:01:07.241 --> 00:01:11.511
a lot of them are gonna be basically
blocked before they reach the user,

22
00:01:11.511 --> 00:01:14.020
not when it comes to
the user in face code.

23
00:01:14.020 --> 00:01:17.554
Not only that,
it's running on their machine,

24
00:01:17.554 --> 00:01:23.599
meaning you've just passed them a bunch of
code to execute on their local machine.

25
00:01:23.599 --> 00:01:28.354
Meaning it's very hard to track
what are the changes, plus we

26
00:01:28.354 --> 00:01:33.860
are very well able to test visually
what you see as a user on the page.

27
00:01:33.860 --> 00:01:39.694
We're in a tough environment, so
the more predictable we can make our code,

28
00:01:39.694 --> 00:01:45.168
the more we can minimize where changes
in what we see you can even happen,

29
00:01:45.168 --> 00:01:49.476
the more that I can track through
data through some sort of

30
00:01:49.476 --> 00:01:52.924
description of how to
display it on the page.

31
00:01:52.924 --> 00:01:56.458
And then whenever the user
takes action not for

32
00:01:56.458 --> 00:02:02.255
it to have a bunch of custom changes to
what the user sees based on an action but

33
00:02:02.255 --> 00:02:07.781
to change only data, and then run
that single same converter function,

34
00:02:07.781 --> 00:02:13.490
not five different places, but
change data and then create the view.

35
00:02:13.490 --> 00:02:18.030
That creates a restriction on us as well
that every single thing that the user sees

36
00:02:18.030 --> 00:02:21.032
must depend on, or
all content at least in this case,

37
00:02:21.032 --> 00:02:22.931
must depend on some sort of data.

38
00:02:22.931 --> 00:02:24.980
Otherwise, how's it even showing up?

39
00:02:24.980 --> 00:02:27.780
So we're requiring change to data and

40
00:02:27.780 --> 00:02:31.554
all things user sees must
be defined first in data.

41
00:02:31.554 --> 00:02:36.093
So there's no mysterious thing showing up
that are a result of an ad hoc change of

42
00:02:36.093 --> 00:02:39.280
what's being displayed in
some handler function, but

43
00:02:39.280 --> 00:02:43.008
only through stored state posh word for
our data that describes,

44
00:02:43.008 --> 00:02:47.617
that's where state becomes a really useful
term as opposed to a very strange term

45
00:02:47.617 --> 00:02:50.451
because it describes
the state of the universe.

46
00:02:50.451 --> 00:02:54.633
It describes all possible
changeable things, in our case,

47
00:02:54.633 --> 00:02:59.143
the state of the universe,
it'd be like the underlying atoms and

48
00:02:59.143 --> 00:03:02.351
where they are in XYZ
coordinates of this pen.

49
00:03:02.351 --> 00:03:06.939
Same thing here, we have our underlying
data describing all possible things about

50
00:03:06.939 --> 00:03:10.687
the application that can be displayed and
then changed by the user.

51
00:03:10.687 --> 00:03:12.677
So let's do it, people.

52
00:03:12.677 --> 00:03:13.307
Let's do it.

53
00:03:13.307 --> 00:03:14.178
So here we go.

54
00:03:14.178 --> 00:03:19.554
Let's put our JavaScript

55
00:03:19.554 --> 00:03:24.201
runtime on this side.

56
00:03:24.201 --> 00:03:31.998
We have our DOM implemented in C++ here,
&gt;&gt; You're DOM big,

57
00:03:31.998 --> 00:03:34.371
and the browser window is full.

58
00:03:34.371 --> 00:03:36.249
&gt;&gt; Yeah, perfect.

59
00:03:36.249 --> 00:03:37.355
That's actually brilliant.

60
00:03:37.355 --> 00:03:39.236
Yeah, I mean, that's wide enough, right?

61
00:03:39.236 --> 00:03:44.917
And then our actual pixels, even this
is probably still wasteful, isn't it?

62
00:03:44.917 --> 00:03:45.481
Dear.

63
00:03:45.481 --> 00:03:46.878
Should I have made it wider?

64
00:03:46.878 --> 00:03:49.823
No, that's okay, I think that's okay.

65
00:03:49.823 --> 00:03:52.359
There's our output pixels.

66
00:03:52.359 --> 00:03:53.777
This is our output pixels.

67
00:03:53.777 --> 00:03:58.079
Honestly, it's a rendered image that
gets sent to the graphics card 60 times

68
00:03:58.079 --> 00:03:58.660
a second.

69
00:03:58.660 --> 00:04:03.502
Rasterized image, the layout engine goes
where are those elements be positioned on

70
00:04:03.502 --> 00:04:07.798
this particular screen size and
device type based on the list of elements,

71
00:04:07.798 --> 00:04:10.137
all we had to do was add to the C++ list?

72
00:04:10.137 --> 00:04:14.637
And then the render engine as a whole
is gonna work out the exact pixels as

73
00:04:14.637 --> 00:04:19.365
a composite image compositing all
those different divs, and images, and

74
00:04:19.365 --> 00:04:22.913
honestly, animations
happening 60 times a second.

75
00:04:22.913 --> 00:04:25.189
That image is then being rasterized,

76
00:04:25.189 --> 00:04:29.679
turns a bunch of pixels to be sent to
a graphics card to be displayed, okay?

77
00:04:29.679 --> 00:04:36.716
And then here is our
exactly as we heard there,

78
00:04:36.716 --> 00:04:43.932
our DOM,
which is a list in our C++ run time and

79
00:04:43.932 --> 00:04:48.638
it has initially, what on it?

80
00:04:48.638 --> 00:04:49.211
Phil, help me out.

81
00:04:49.211 --> 00:04:50.329
What's on it initially?

82
00:04:50.329 --> 00:04:54.210
On our C++ DOM here.

83
00:04:54.210 --> 00:04:56.319
&gt;&gt; So we have input or input element.

84
00:04:56.319 --> 00:04:59.110
Yeah, input node, input element, exactly.

85
00:04:59.110 --> 00:05:03.321
I'm actually gonna put it
right on the side here, so

86
00:05:03.321 --> 00:05:08.788
that we have lots of room to add its
handlers and its value property.

87
00:05:08.788 --> 00:05:13.280
We can even put those in now so
that we have it ready to go.

88
00:05:13.280 --> 00:05:15.784
And then its handlers.

89
00:05:17.735 --> 00:05:21.142
Its handlers, that may work.

90
00:05:21.142 --> 00:05:23.470
Look at that.

91
00:05:23.470 --> 00:05:25.133
That actually makes me really happy.

92
00:05:25.133 --> 00:05:26.320
&gt;&gt; Is handlers.

93
00:05:26.320 --> 00:05:27.567
What's our next element, Phil?

94
00:05:27.567 --> 00:05:28.830
&gt;&gt; We have our div elements.

95
00:05:28.830 --> 00:05:32.721
&gt;&gt; Div, and that has some text.

96
00:05:32.721 --> 00:05:33.870
Beautiful.

97
00:05:33.870 --> 00:05:34.490
And the last one.

98
00:05:34.490 --> 00:05:35.790
&gt;&gt; Our script.

99
00:05:35.790 --> 00:05:38.095
&gt;&gt; Our script.

100
00:05:38.095 --> 00:05:45.440
Helpfully, we can only run JavaScript
via linking it in our C++ DOM element.

101
00:05:45.440 --> 00:05:46.610
Beautiful.

102
00:05:46.610 --> 00:05:50.170
Okay, let's actually have
a little schema here.

103
00:05:50.170 --> 00:05:52.963
This is a reminder for
ourselves so we don't lose track.

104
00:05:52.963 --> 00:05:56.290
Our HTML file can load in.

105
00:05:56.290 --> 00:06:01.438
I will say this, as I said,
hard parts the model is,

106
00:06:01.438 --> 00:06:05.309
it starts hard and it becomes tedious.

107
00:06:05.309 --> 00:06:07.002
That's what a review.

108
00:06:07.002 --> 00:06:08.081
But there we go.

109
00:06:08.081 --> 00:06:09.717
That's what ensures.

110
00:06:09.717 --> 00:06:12.408
We can never forget it,
hopefully ever again.

111
00:06:12.408 --> 00:06:17.064
And that's why it's my job to be
as hype as possible to help you,

112
00:06:17.064 --> 00:06:21.204
that's not my job, actually,
it's a very tragic job,

113
00:06:21.204 --> 00:06:25.690
to help you keep pushing through
building this mental model on

114
00:06:25.690 --> 00:06:30.150
repeat because I would not,
what a way to spend the day.

115
00:06:30.150 --> 00:06:32.409
All right, there it is.

116
00:06:32.409 --> 00:06:36.451
JavaScript loads from the HTML file,

117
00:06:36.451 --> 00:06:41.377
the DOM is going to display
the actual pixels on

118
00:06:41.377 --> 00:06:46.770
the page via the layout and render engine.

119
00:06:46.770 --> 00:06:51.908
And JavaScript has a bunch of functions,
no, objects by name that

120
00:06:51.908 --> 00:06:58.054
are full of methods that give access to
all sorts of areas of the web browser, but

121
00:06:58.054 --> 00:07:03.690
what we're most interested in is
the one that gives access to document.

122
00:07:03.690 --> 00:07:06.670
So let's start running
our JavaScript code.

123
00:07:06.670 --> 00:07:12.215
There's our memory,
I Should probably start calling people.

124
00:07:12.215 --> 00:07:13.219
&gt;&gt; Don't forget to -.

125
00:07:13.219 --> 00:07:14.413
&gt;&gt; Yes, thank you.

126
00:07:14.413 --> 00:07:17.325
Alexis right there, not by writing input.

127
00:07:17.325 --> 00:07:20.520
&gt;&gt; [LAUGH]
&gt;&gt; That's not how it works exactly, but

128
00:07:20.520 --> 00:07:24.891
instead, our layout and
render engine is much cleverer than,

129
00:07:24.891 --> 00:07:26.796
obviously, than myself.

130
00:07:26.796 --> 00:07:28.220
And there it is.

131
00:07:28.220 --> 00:07:30.870
It's our beautiful page.

132
00:07:30.870 --> 00:07:33.676
Thank you to Alexa.

133
00:07:33.676 --> 00:07:39.580
Now what is this document object
gonna have in our memory?

134
00:07:39.580 --> 00:07:41.510
Talk me through it.

135
00:07:41.510 --> 00:07:46.634
&gt;&gt; Yeah, it's exposed by the global
context by the browser, and

136
00:07:46.634 --> 00:07:52.049
it allows you to access the document
object model in JavaScript and

137
00:07:52.049 --> 00:07:54.580
set up links to the different.

138
00:07:54.580 --> 00:07:56.089
&gt;&gt; From JavaScript, exactly.

139
00:07:56.089 --> 00:07:58.570
In C++, so from JavaScript, exactly.

140
00:07:58.570 --> 00:08:03.935
And exactly as you rightly say, it's
gonna have access via this hidden link,

141
00:08:03.935 --> 00:08:09.220
technically referenced as a C++ pointer
to that position in C++ memory,

142
00:08:09.220 --> 00:08:10.864
it's a symbol as well.

143
00:08:10.864 --> 00:08:13.039
It as simple as that, people.

144
00:08:13.039 --> 00:08:13.948
Simple as that.

145
00:08:13.948 --> 00:08:19.048
And we have in it a whole bunch of
methods, a slew of methods, but we're

146
00:08:19.048 --> 00:08:24.830
going to only use one here that I can see
why, what's the one we're going to use?

147
00:08:24.830 --> 00:08:26.006
&gt;&gt; It looks like query selector.

148
00:08:26.006 --> 00:08:28.910
&gt;&gt; Beautiful, query selector.

149
00:08:28.910 --> 00:08:32.702
Absolutely, and that is perfect.

150
00:08:32.702 --> 00:08:36.844
A function that is going to when
it gets called, go to the link,

151
00:08:36.844 --> 00:08:41.490
see that it's linked to this
model of the webpage in C++.

152
00:08:41.490 --> 00:08:44.326
Query it for whatever the given selector,

153
00:08:44.326 --> 00:08:49.131
whatever the given label by which
we're gonna select an element is, and

154
00:08:49.131 --> 00:08:52.707
then return for
us a link to that particular element.

155
00:08:52.707 --> 00:08:55.420
And that's exactly what we do right now.

156
00:08:55.420 --> 00:09:00.819
So I don't know, do we have space in
general to do a call stack up there and

157
00:09:00.819 --> 00:09:03.486
a callback queue, or is it better?

158
00:09:03.486 --> 00:09:07.077
This is sort of freed up space here,
right, maybe we can do it.

159
00:09:07.077 --> 00:09:12.226
From now on I think we're going
to do our call stack here.

160
00:09:12.226 --> 00:09:17.121
I think that's fine, it didn't do
any harm, and then we have our

161
00:09:17.121 --> 00:09:22.560
callback queue just so that we're
not running out of horizontal space.

162
00:09:22.560 --> 00:09:27.069
So that's our JavaScript call stack and
our callback queue.

163
00:09:27.069 --> 00:09:30.088
And so let's get going into our
JavaScript thread of execution.

164
00:09:30.088 --> 00:09:33.565
Okay, we have some data being saved,

165
00:09:33.565 --> 00:09:38.464
we have accessor objects for
div and input on the DOM.

166
00:09:38.464 --> 00:09:43.379
We then save two functions that
our handlers, handle click on

167
00:09:43.379 --> 00:09:48.295
handle input, assign them to
their associated DOM objects,

168
00:09:48.295 --> 00:09:51.640
we also save a function data to view.

169
00:09:51.640 --> 00:09:57.042
This is our core function that's going to
translate based on, one word we might use

170
00:09:57.042 --> 00:10:01.905
for it is description of the relationship
between that underlying data and

171
00:10:01.905 --> 00:10:06.460
what the user sees such that everything
the user sees that could ever be

172
00:10:06.460 --> 00:10:11.013
changed by them must be via a change
of that data and then an execution or

173
00:10:11.013 --> 00:10:15.213
running of the corresponding
data to view converter function.

174
00:10:15.213 --> 00:10:16.295
No mysteries,

175
00:10:16.295 --> 00:10:21.380
no which of our ten handlers was this
change what the user sees caused by.

176
00:10:21.380 --> 00:10:25.664
Nope, we have one place, one function
that converts underlying state,

177
00:10:25.664 --> 00:10:28.648
underlying data,
underlying content into view.

178
00:10:28.648 --> 00:10:33.355
It requires some kind of creative thinking
in terms of how can we ensure that

179
00:10:33.355 --> 00:10:38.287
everything that a user sees is defined
as a consequence of some changeable data

180
00:10:38.287 --> 00:10:39.700
in JavaScript.

181
00:10:39.700 --> 00:10:40.985
But you know what that is?

182
00:10:40.985 --> 00:10:42.145
You know what that is?

183
00:10:42.145 --> 00:10:45.233
That's good reasoning, that's reasoning
that I can get my head around.

184
00:10:45.233 --> 00:10:49.888
That's everything in the view must
be a consequence of underlying data,

185
00:10:49.888 --> 00:10:54.380
that's not under seven different
pathways through user handles.

186
00:10:54.380 --> 00:10:58.575
I'm perhaps implicitly changing data but
I'm changing the view, no.

187
00:10:58.575 --> 00:11:04.011
And everything must depend on like for
like, one-to-one data in

188
00:11:04.011 --> 00:11:10.750
memory that generates a given view for
that particular moment of data.

189
00:11:10.750 --> 00:11:12.142
Okay, so let's do it, people.

190
00:11:12.142 --> 00:11:12.752
Yeah.
Ian, please.

191
00:11:12.752 --> 00:11:17.414
&gt;&gt; Is that what one way data binding is,
where the view is a function of state,

192
00:11:17.414 --> 00:11:20.700
it goes from the data to the view,
the one way?

193
00:11:20.700 --> 00:11:22.183
&gt;&gt; Yeah, exactly.

194
00:11:22.183 --> 00:11:25.083
I like to think as we're gonna see in a
moment, cuz we're still gonna have to get

195
00:11:25.083 --> 00:11:27.970
data from the user when they type here,
it comes back to JavaScript.

196
00:11:27.970 --> 00:11:28.842
So how is that one way?

197
00:11:28.842 --> 00:11:33.820
The way I think about that is it ends up
being like a submission to JavaScript.

198
00:11:33.820 --> 00:11:38.433
Hey, I just type the letters HE,
or I just type the letters Y, or

199
00:11:38.433 --> 00:11:42.875
I just type the letters IAN,
can you, if the handler does it,

200
00:11:42.875 --> 00:11:46.653
update the data in some way
based off my user action?

201
00:11:46.653 --> 00:11:52.141
Yes, user action contains data, but
the handlers determine how you're

202
00:11:52.141 --> 00:11:58.100
going to update the data,
it not like it's gonna flow automatically.

203
00:11:58.100 --> 00:11:59.593
It's a submission by the user,

204
00:11:59.593 --> 00:12:03.477
which we are then going to in the handler
function determine how to update the data.

205
00:12:03.477 --> 00:12:08.448
What is guaranteed is the data to view
conversion back, well, not back, but

206
00:12:08.448 --> 00:12:09.820
the data convert.

207
00:12:09.820 --> 00:12:14.157
Whatever the data is in memory, that
is gonna determine what shows up here.

208
00:12:14.157 --> 00:12:18.063
Now, we then have handlers
that can change that data, but

209
00:12:18.063 --> 00:12:21.745
that's on us to then write
those handles in such a way.

210
00:12:21.745 --> 00:12:26.338
What is fixed is the relationship
from the data in that data to view

211
00:12:26.338 --> 00:12:31.016
function permanently says take
the data here, and nothing on this

212
00:12:31.016 --> 00:12:35.884
display can be that has not been
determined from data here in memory.

213
00:12:35.884 --> 00:12:38.108
So one way is a bit of a -.

214
00:12:38.108 --> 00:12:43.459
&gt;&gt; The view are really the one
I'll take care of handling view.

215
00:12:43.459 --> 00:12:47.387
So we always selectively take the data
from a view when we want to, and

216
00:12:47.387 --> 00:12:48.860
the data just always -.

217
00:12:48.860 --> 00:12:50.125
&gt;&gt; Pass every bit of data.

218
00:12:50.125 --> 00:12:50.929
I like that.

219
00:12:50.929 --> 00:12:52.790
&gt;&gt; Everything -.
&gt;&gt; What a nice way of putting it in.

220
00:12:52.790 --> 00:12:54.108
&gt;&gt; Yeah, it marches, that's really nice.

221
00:12:54.108 --> 00:12:55.006
We will -.

222
00:12:55.006 --> 00:12:57.436
&gt;&gt; [INAUDIBLE] whatever comes.

223
00:12:57.436 --> 00:13:02.510
&gt;&gt; We control what comes into the data
via the user's specific actions,

224
00:13:02.510 --> 00:13:08.620
what we don't control is everything in
data will always populate to the view.

225
00:13:08.620 --> 00:13:13.157
No sort of deciding which bit
we're gonna update on the view.

226
00:13:13.157 --> 00:13:17.841
It's like you can change data from
just one action from the user,

227
00:13:17.841 --> 00:13:22.781
there's lots and lots of different
places that can change the data,

228
00:13:22.781 --> 00:13:27.658
but there's only one place that
can then repropagate that all out.

229
00:13:27.658 --> 00:13:33.154
So it's like a very narrow flow back to
the data specific only to the user action.

230
00:13:33.154 --> 00:13:38.791
We're not re-grabbing all data back to
the underlying data, so we're not grabbing

231
00:13:38.791 --> 00:13:43.972
the whole DOM worth of data, but just
one small piece comes change comes back.

232
00:13:43.972 --> 00:13:47.919
But from this direction,
from this ocean, all pieces will update.

233
00:13:47.919 --> 00:13:52.697
So it's like a very narrow and then
a sort of spray back out the whole way.

234
00:13:52.697 --> 00:13:58.184
Yeah, so I mean, it's always two way,
cuz other is how you get the data back.

235
00:13:58.184 --> 00:14:00.991
&gt;&gt; Yeah.
&gt;&gt; But the direction from the user,

236
00:14:00.991 --> 00:14:04.307
from the view to the data
is very pinpoint, and

237
00:14:04.307 --> 00:14:09.594
also very custom based on every single
possible action the user can take.

238
00:14:09.594 --> 00:14:16.827
Whereas the flow back, the one way
we refer to is very broad complete,

239
00:14:16.827 --> 00:14:23.050
and automatic, and
unspecific, it's everything.

240
00:14:23.050 --> 00:14:26.974
And that means we have no reasoning
to do about which bits to display.

241
00:14:26.974 --> 00:14:31.650
And that's because, A,
we can't see it when the user sees it.

242
00:14:31.650 --> 00:14:33.596
B, we wanna have it as simple and
predictable as possible.

243
00:14:33.596 --> 00:14:36.536
D, there's lots of different
ways that could change and

244
00:14:36.536 --> 00:14:39.844
we're not really sure,
whereas when the user takes an action,

245
00:14:39.844 --> 00:14:43.980
we can probably narrow it down to a small
piece of data that needs to change.

246
00:14:43.980 --> 00:14:48.645
Whereas what the user sees based off
that piece of data could be 50 different

247
00:14:48.645 --> 00:14:50.020
things could change.

248
00:14:50.020 --> 00:14:53.269
So let's have all of them, we don't need
to reason which ones need to change,

249
00:14:53.269 --> 00:14:54.218
have them all change.

250
00:14:54.218 --> 00:14:57.110
Absolutely, very, very thoughtful
question coming from Mathew there.

