WEBVTT

1
00:00:00.235 --> 00:00:05.010
Next user action, thinks back,
next user action, type.

2
00:00:05.010 --> 00:00:10.225
Can you see this type?

3
00:00:10.225 --> 00:00:11.884
Is the user is gonna type?

4
00:00:11.884 --> 00:00:15.295
I don't know, let's have something
more interesting than Hi.

5
00:00:15.295 --> 00:00:18.723
I like Ian,
Ian the user is gonna type Ian.

6
00:00:18.723 --> 00:00:19.680
&gt;&gt; Let's go.

7
00:00:19.680 --> 00:00:20.323
&gt;&gt; Exactly.

8
00:00:20.323 --> 00:00:21.124
&gt;&gt; Let's go.

9
00:00:21.124 --> 00:00:22.144
&gt;&gt; Let's go Ian.

10
00:00:22.144 --> 00:00:23.574
And we know actually this was me.

11
00:00:23.574 --> 00:00:26.664
I, that's gonna trigger the handle
input function run, but

12
00:00:26.664 --> 00:00:28.278
just keep it more interesting.

13
00:00:28.278 --> 00:00:35.824
We'll have it, grab the whole each time it
runs anywhere to be updating the value and

14
00:00:35.824 --> 00:00:41.160
running through and
adding i to the pose and then to the div.

15
00:00:41.160 --> 00:00:43.998
So we'll do start with Ian,

16
00:00:43.998 --> 00:00:48.977
typed Ian into a field
because you cleared it now.

17
00:00:48.977 --> 00:00:53.065
My pens, because you've cleared it now.

18
00:00:53.065 --> 00:00:56.655
And so
immediately on the DOM Ian shows up.

19
00:00:56.655 --> 00:01:00.687
If only we could grow it from here and
stick it on this div,

20
00:01:00.687 --> 00:01:02.548
if only but we can't not.

21
00:01:02.548 --> 00:01:07.610
Instead, fortunately,
another event is going to

22
00:01:07.610 --> 00:01:13.023
trigger this handle input
function to come on to,

23
00:01:13.023 --> 00:01:18.790
I needed to wipe our handle
click from the callback queue,

24
00:01:18.790 --> 00:01:24.110
and then clear our call stack,
and we get our handle.

25
00:01:24.110 --> 00:01:28.377
Well, I'm not gonna write it here,
it goes into the queue and

26
00:01:28.377 --> 00:01:33.075
handleInput goes on to the call stack,
there it is, handleInput.

27
00:01:33.075 --> 00:01:38.608
And our orange is back to mark that
this is being handled by JavaScript.

28
00:01:38.608 --> 00:01:40.867
And add it to the call stack it goes.

29
00:01:40.867 --> 00:01:48.687
And now our handle input is
gonna be executed by JavaScript.

30
00:01:48.687 --> 00:01:51.334
A brand new what everybody?

31
00:01:51.334 --> 00:01:53.231
&gt;&gt; Execution context.

32
00:01:53.231 --> 00:01:56.068
&gt;&gt; Beautiful,
a brand new execution context.

33
00:01:56.068 --> 00:01:58.600
Perfect, and into it we go.

34
00:01:58.600 --> 00:02:04.815
Where we are going to
update our JavaScript data.

35
00:02:04.815 --> 00:02:08.031
With, okay, let me track through this.

36
00:02:08.031 --> 00:02:12.727
With our current, we've got no current,

37
00:02:12.727 --> 00:02:17.039
we gotta go get using the value getter.

38
00:02:17.039 --> 00:02:21.420
JsInput.value is a getter of

39
00:02:21.420 --> 00:02:27.380
the associated corresponding C++ DOM

40
00:02:27.380 --> 00:02:32.294
object input, we get the value.

41
00:02:32.294 --> 00:02:37.260
It comes back as they go in.

42
00:02:37.260 --> 00:02:42.596
And then that will update our post value,

43
00:02:42.596 --> 00:02:46.414
poster value in JavaScript.

44
00:02:46.414 --> 00:02:49.561
So there's Ian, Ian is now safe to post.

45
00:02:49.561 --> 00:02:50.860
Beautiful, look at that.

46
00:02:50.860 --> 00:02:57.697
And now we are going to update our-

47
00:02:57.697 --> 00:03:00.712
&gt;&gt; [LAUGH]

48
00:03:00.712 --> 00:03:04.506
&gt;&gt; We're gonna update our text

49
00:03:04.506 --> 00:03:09.095
content setter to take that post.

50
00:03:09.095 --> 00:03:12.736
Now, with a value of Ian, and

51
00:03:12.736 --> 00:03:17.545
we're going to set it on the DOM element

52
00:03:17.545 --> 00:03:22.525
as the value of text, Ian, there we go.

53
00:03:22.525 --> 00:03:29.092
And then that will show up on our view for
the user.

54
00:03:29.092 --> 00:03:35.036
So that has updated what
the user sees in the div.

55
00:03:35.036 --> 00:03:38.543
Anyone read why we were
doing this I literally can't

56
00:03:38.543 --> 00:03:42.539
remember between the pen
episodes of the past ten minutes?

57
00:03:42.539 --> 00:03:43.782
No, I'm kidding.

58
00:03:43.782 --> 00:03:48.109
So we now have a more complex,
to be fair, maybe that's a good thing.

59
00:03:48.109 --> 00:03:50.735
Because we now have a more complex UI.

60
00:03:50.735 --> 00:03:55.671
We are starting to struggle to think
about how it's doing its work.

61
00:03:55.671 --> 00:04:00.080
We have had to flow the data back and
forth.

62
00:04:00.080 --> 00:04:04.370
This already, even with two elements,
even with two handlers,

63
00:04:04.370 --> 00:04:06.794
is becoming harder to reason about.

64
00:04:06.794 --> 00:04:10.834
I had to work out, so
I had my post data here,

65
00:04:10.834 --> 00:04:18.278
I had the input field with some default
text set in line 5, what's on your mind?

66
00:04:18.278 --> 00:04:25.018
I then chose hand, look in my code here,
line 5, line 9, line 12.

67
00:04:25.018 --> 00:04:27.692
Every one of those lines in a, I mean,

68
00:04:27.692 --> 00:04:31.467
actual code here is like
probably nine lines of code.

69
00:04:31.467 --> 00:04:34.837
Every one of those lines, line 5, line 9,

70
00:04:34.837 --> 00:04:39.115
line 12 affects what the user sees,
affects our view.

71
00:04:39.115 --> 00:04:43.285
In line 5, I fill in my default
text with what's on your mind.

72
00:04:43.285 --> 00:04:48.208
In line 9,
I update my text content if the user has

73
00:04:48.208 --> 00:04:53.145
started writing something
with that post value.

74
00:04:53.145 --> 00:04:54.901
Only if the user started
to write something.

75
00:04:54.901 --> 00:04:59.039
So now I've got a string
of conditional changes,

76
00:04:59.039 --> 00:05:02.497
initially display what's on your mind?

77
00:05:02.497 --> 00:05:07.474
If user starts to write something, well,
sorry, if the user clicks, remove that.

78
00:05:07.474 --> 00:05:09.810
If user start, which is the handle,
click set the back.

79
00:05:09.810 --> 00:05:16.407
If user then starts to write something,
start display something.

80
00:05:16.407 --> 00:05:19.806
What if somehow the user was able to
write something without clicking?

81
00:05:19.806 --> 00:05:23.839
I mean, then we've got still
the what's on your mind text in the,

82
00:05:23.839 --> 00:05:26.143
I'm not saying that it could happen,

83
00:05:26.143 --> 00:05:30.919
but like I've got a reason through all
those possible paths the user can take.

84
00:05:30.919 --> 00:05:39.521
This is a flow of user actions with
conditional on that changes to view.

85
00:05:39.521 --> 00:05:41.553
And this is with two little boxes.

86
00:05:41.553 --> 00:05:47.928
Imagine a thousand elements,
it would be profoundly difficult.

87
00:05:47.928 --> 00:05:50.967
It's not that what we choose
to do here is right or wrong.

88
00:05:50.967 --> 00:05:57.059
But it is one way of trying to prevent
this reasoning process of working

89
00:05:57.059 --> 00:06:04.094
out conditional on the last thing the user
did display that, did they take that?

90
00:06:04.094 --> 00:06:06.939
Okay, so it took that list steps?

91
00:06:06.939 --> 00:06:13.773
No, we only allow the user to
affect state, posh word for data.

92
00:06:13.773 --> 00:06:18.741
And then every single thing
the user can ever see will be

93
00:06:18.741 --> 00:06:21.985
dependent in some way on that data.

94
00:06:21.985 --> 00:06:27.091
There will be a full one-to-one
relationship between saved data and

95
00:06:27.091 --> 00:06:28.570
what the user sees.

96
00:06:28.570 --> 00:06:32.099
And there's a mindset shift that we take.

97
00:06:32.099 --> 00:06:35.845
Yeah, so we're changing our view based
on multiple possible user interactions.

98
00:06:35.845 --> 00:06:40.315
We had two handlers, as soon as
we introduced multiple of those,

99
00:06:40.315 --> 00:06:45.618
the route the user can take, is this one
better run after the click happened.

100
00:06:45.618 --> 00:06:50.923
Otherwise the user is going to be still
see text here, will it append it?

101
00:06:50.923 --> 00:06:53.112
I mean, technically here
it would overwrite it, but

102
00:06:53.112 --> 00:06:55.703
depending on how we did it,
we could totally end up appending.

103
00:06:55.703 --> 00:06:59.201
So it would say what's up, and then Ian
starts writing and now it says what's up.

104
00:06:59.201 --> 00:07:00.599
Ian, that's not so bad, I guess.

105
00:07:00.599 --> 00:07:02.778
&gt;&gt; [LAUGH]
&gt;&gt; It's like a great bonus feature.

106
00:07:02.778 --> 00:07:06.039
But we're having to reason even with
this tiny amount of content on the page.

107
00:07:06.039 --> 00:07:10.615
Reason down the user's journey
in all these expanding pause.

108
00:07:10.615 --> 00:07:14.179
They exponential essentially
because you are 40 handlers for

109
00:07:14.179 --> 00:07:18.803
a thousand different elements, each of
them has 40 handlers, theory, right?

110
00:07:18.803 --> 00:07:22.160
Maybe, and then each of those can
affect a thousand other elements.

111
00:07:22.160 --> 00:07:26.683
You're dealing with a 40 by 40 by
1,000 possible scenario paths.

112
00:07:26.683 --> 00:07:27.830
Actually even more than that, right?

113
00:07:27.830 --> 00:07:32.103
Because it's 40, you can take one,
and then another, and another,

114
00:07:32.103 --> 00:07:36.377
all of them are depending on the previous
action the user took to ensure,

115
00:07:36.377 --> 00:07:40.460
we need a way to make these changes
as predictable as possible, how?

116
00:07:40.460 --> 00:07:46.386
Restrict every change to view
to be via one, an updated data.

117
00:07:46.386 --> 00:07:52.372
And two, a run of a single data
to view converter function.

118
00:07:52.372 --> 00:07:55.119
It's just one approach, but
an immensely popular one.

119
00:07:55.119 --> 00:07:58.111
React, Next, View, Angular,
Svelte, all use it.

120
00:07:58.111 --> 00:08:01.852
It's also gonna allow us to do
semi-visual coding as well.

