WEBVTT

1
00:00:00.000 --> 00:00:05.469
I'm gonna run my findDiff

2
00:00:05.469 --> 00:00:10.690
function with passing in

3
00:00:10.690 --> 00:00:15.919
previous vDOM and vDOM.

4
00:00:15.919 --> 00:00:21.644
There they are, previous vDOM and vDOM and

5
00:00:21.644 --> 00:00:26.774
create, I think it's our last one.

6
00:00:26.774 --> 00:00:28.831
Create a brand new one what everybody?

7
00:00:28.831 --> 00:00:30.609
&gt;&gt; Execution context.

8
00:00:30.609 --> 00:00:33.069
&gt;&gt; There it is, execution context.

9
00:00:33.069 --> 00:00:36.945
We're still inside of update DOM,
so it goes on top here, right?

10
00:00:36.945 --> 00:00:37.923
Am I right on that, yeah?

11
00:00:37.923 --> 00:00:38.901
&gt;&gt; Yeah.

12
00:00:38.901 --> 00:00:45.305
&gt;&gt; FindDiff, There it is, into it we go.

13
00:00:45.305 --> 00:00:49.011
And i is 0 initially, and

14
00:00:49.011 --> 00:00:54.066
we are going to compare if the stringified

15
00:00:54.066 --> 00:00:59.120
version of all these are our two

16
00:00:59.120 --> 00:01:04.530
parameters, previous and current.

17
00:01:04.530 --> 00:01:10.258
Previous refers to previous vDOM,
and current refers to vDOM.

18
00:01:10.258 --> 00:01:14.819
And so we're going to say if i is 0,
stringify,

19
00:01:14.819 --> 00:01:20.605
that means turn it into a string
previous vDOM at position 0,

20
00:01:20.605 --> 00:01:25.643
that is going to give us
the string what roughly Phil?

21
00:01:25.643 --> 00:01:30.199
&gt;&gt; It would be the string of-
&gt;&gt; Roughly inputs and then-

22
00:01:30.199 --> 00:01:31.501
&gt;&gt; Input-

23
00:01:31.501 --> 00:01:32.681
&gt;&gt; And then sort of the words function or

24
00:01:32.681 --> 00:01:33.375
whatever, I think.

25
00:01:33.375 --> 00:01:36.156
&gt;&gt; Yeah, and then likely the code for it.

26
00:01:36.156 --> 00:01:37.938
&gt;&gt; Yeah, exactly, exactly,
exactly, yeah, yeah.

27
00:01:37.938 --> 00:01:43.020
And then now we do it again for current,

28
00:01:43.020 --> 00:01:48.102
which is what, Ian, current is our vDOM,

29
00:01:48.102 --> 00:01:52.109
and we're at position i of 0.

30
00:01:52.109 --> 00:01:57.018
So, we're going to get a stringified
of that, which is what?

31
00:01:57.018 --> 00:01:59.166
&gt;&gt; Input FM.

32
00:01:59.166 --> 00:02:00.770
&gt;&gt; Input FM function.

33
00:02:00.770 --> 00:02:07.413
&gt;&gt; And the function should-
&gt;&gt; Okay, are they the same?

34
00:02:07.413 --> 00:02:09.444
No wait, are they different?

35
00:02:09.444 --> 00:02:11.527
&gt;&gt; Yes.
&gt;&gt; Yes, they're different.

36
00:02:11.527 --> 00:02:13.344
There it is, they're different!

37
00:02:13.344 --> 00:02:18.387
And so we are now going to grab current,
position 0,

38
00:02:18.387 --> 00:02:24.455
the text content, so
the content basically, the input value.

39
00:02:24.455 --> 00:02:28.266
And we're going to grab that current,
position 0,

40
00:02:28.266 --> 00:02:33.348
in that sub array again is 1,
which is the content because we're gonna

41
00:02:33.348 --> 00:02:38.282
assume in this simplified model that
we can only change our content.

42
00:02:38.282 --> 00:02:42.426
But yeah, we could easily
expand this to handle all and

43
00:02:42.426 --> 00:02:45.048
any changes to what the user sees.

44
00:02:45.048 --> 00:02:50.678
And set that FM to elems position
0 using our text content,

45
00:02:50.678 --> 00:02:55.601
uh-uh, no, no, no,
we're gonna skip that one

46
00:02:55.601 --> 00:02:59.965
we don't need to, because it's an input.

47
00:02:59.965 --> 00:03:02.802
It won't cause any breakage,
but we're going to hit our,

48
00:03:02.802 --> 00:03:06.489
this is again me trying to make sure we do
not set a bunch of conditionals to work

49
00:03:06.489 --> 00:03:09.814
out what type of element it is, but
we could very easily change that.

50
00:03:09.814 --> 00:03:14.206
And here it doesn't
actually break anything,

51
00:03:14.206 --> 00:03:21.230
because we're gonna hit value on our
elems position 0, which is our setter,

52
00:03:21.230 --> 00:03:27.409
in this case to set on our associated
corresponding element here.

53
00:03:27.409 --> 00:03:32.089
We're gonna set input value to,

54
00:03:32.089 --> 00:03:36.232
and look, incisive edit to FM.

55
00:03:36.232 --> 00:03:38.348
Did I get that right?

56
00:03:38.348 --> 00:03:43.727
I literally, and immediately it's
gonna show up here on the page.

57
00:03:43.727 --> 00:03:48.045
Okay, let's do another comparison people.

58
00:03:48.045 --> 00:03:55.692
elems position 0 is going to have its
value setter set to the value of FM.

59
00:03:55.692 --> 00:03:59.465
We know it was FM already, but
we don't have to reason about any of it.

60
00:03:59.465 --> 00:04:04.224
All of this, by the way, it's update DOM
is being done by JavaScript because we

61
00:04:04.224 --> 00:04:06.437
have our update DOM function created.

62
00:04:06.437 --> 00:04:08.535
All we're doing is honestly changing,

63
00:04:08.535 --> 00:04:12.854
all we write is changing our data and then
funneling it through with our beautiful

64
00:04:12.854 --> 00:04:16.046
description in JavaScript of
what's gonna be displayed.

65
00:04:16.046 --> 00:04:21.421
I know we're going through
the rigmarole of doing it ourselves,

66
00:04:21.421 --> 00:04:26.515
but yeah, and then final, or
no, penultimate comparison.

67
00:04:26.515 --> 00:04:32.786
Ian, if you don't mind comparing
our stringifying here on i is now 1.

68
00:04:32.786 --> 00:04:40.895
&gt;&gt; Okay, so we'll be comparing
the stringified first index of prev vDOM.

69
00:04:40.895 --> 00:04:43.737
&gt;&gt; Right.
&gt;&gt; Which is going to contain div.

70
00:04:43.737 --> 00:04:46.836
&gt;&gt; Yes.
&gt;&gt; And hello exclamation mark.

71
00:04:46.836 --> 00:04:50.089
&gt;&gt; Brilliant.
&gt;&gt; And we're comparing that with

72
00:04:50.089 --> 00:04:57.342
the stringified vDOM 1 at index 1,
which is gonna be div Hello FM!

73
00:04:57.342 --> 00:04:59.184
&gt;&gt; Brilliant, is that different?

74
00:04:59.184 --> 00:05:00.116
&gt;&gt; Yes.
&gt;&gt; You bet it is.

75
00:05:00.116 --> 00:05:00.805
&gt;&gt; Yes.

76
00:05:00.805 --> 00:05:02.123
&gt;&gt; It's definitely different.

77
00:05:02.123 --> 00:05:06.771
And so we're going to do elems position 1,
and set,

78
00:05:06.771 --> 00:05:09.810
in this case its text content.

79
00:05:09.810 --> 00:05:14.587
Again we can, this code works because
text content is ignored by the input

80
00:05:14.587 --> 00:05:18.221
DOM element and
value is ignored by the div DOM element.

81
00:05:18.221 --> 00:05:22.161
So text content setter, my goodness,

82
00:05:22.161 --> 00:05:27.567
elems position 1 is our accessor object for
the div element,

83
00:05:27.567 --> 00:05:35.572
where we are the first div element where we're
gonna set its text content to, what Ian?

84
00:05:35.572 --> 00:05:41.694
&gt;&gt; It's going to become

85
00:05:41.694 --> 00:05:46.187
hello, FM!

86
00:05:46.187 --> 00:05:50.784
&gt;&gt; And there it is, we as developers
didn't think about any of it,

87
00:05:50.784 --> 00:05:54.034
but it's already made the incisive change.

88
00:05:54.034 --> 00:05:57.276
We just went, describe what it
should look like on the page.

89
00:05:57.276 --> 00:06:02.644
Describe it, and then if the data changes,
you do the work here with the diffing.

90
00:06:02.644 --> 00:06:04.951
And the final one, would it fit?

91
00:06:04.951 --> 00:06:07.118
Maybe.

92
00:06:07.118 --> 00:06:12.379
The final comparison, Alexa,
is going to be between?

93
00:06:12.379 --> 00:06:17.627
I's value is 2 now and so
we're stringifying position 2.

94
00:06:17.627 --> 00:06:19.593
And what are we comparing?

95
00:06:19.593 --> 00:06:25.244
&gt;&gt; We're comparing div great job,
to div great job.

96
00:06:25.244 --> 00:06:27.265
&gt;&gt; And are they different?

97
00:06:27.265 --> 00:06:28.000
&gt;&gt; No.

98
00:06:28.000 --> 00:06:30.039
&gt;&gt; They are not,
let's say it everyone together.

99
00:06:30.039 --> 00:06:31.557
Are they different people?

100
00:06:31.557 --> 00:06:32.355
&gt;&gt; No.

101
00:06:32.355 --> 00:06:36.195
&gt;&gt; No, so do we go and
do any changes to our DOM element?

102
00:06:36.195 --> 00:06:38.534
&gt;&gt; No.
&gt;&gt; No.

103
00:06:38.534 --> 00:06:43.595
&gt;&gt; [LAUGH]
&gt;&gt; I think we did it.

104
00:06:43.595 --> 00:06:46.449
&gt;&gt; [APPLAUSE]
&gt;&gt; I think we did it people.

105
00:06:46.449 --> 00:06:49.023
Have I missed anything here?

106
00:06:49.023 --> 00:06:51.633
&gt;&gt; Look at all those CPU cycles we saved.

107
00:06:51.633 --> 00:06:52.777
&gt;&gt; My goodness.

108
00:06:52.777 --> 00:06:56.822
&gt;&gt; [LAUGH]
&gt;&gt; What a beautiful job everybody,

109
00:06:56.822 --> 00:07:01.770
that is our update DOM
function finished running.

110
00:07:01.770 --> 00:07:05.764
We exit our findDiff execution context.

111
00:07:05.764 --> 00:07:10.248
We exit our update DOM execution context.

112
00:07:10.248 --> 00:07:14.268
&gt;&gt; [LAUGH]
&gt;&gt; And We have made our changes and

113
00:07:14.268 --> 00:07:19.959
we got a beautiful, simple,
I guess simplistic even.

114
00:07:19.959 --> 00:07:24.180
No, not simplistic, a beautiful
description in JavaScript of what

115
00:07:24.180 --> 00:07:28.327
we want to display on the page
with dynamic data, imagine HTML but

116
00:07:28.327 --> 00:07:33.082
you could have variables in it, which
is what we're always trying to get to.

117
00:07:33.082 --> 00:07:35.730
That's all we've been trying to get to,
punchline.

118
00:07:35.730 --> 00:07:39.699
Descriptive of what's going to show up on
the page, but with data that can change.

119
00:07:39.699 --> 00:07:43.082
Because what are the two things
user interface is trying to do?

120
00:07:43.082 --> 00:07:45.296
We're trying to, what are we trying to do?

121
00:07:45.296 --> 00:07:47.384
Display, one, what's the first thing?

122
00:07:47.384 --> 00:07:48.990
&gt;&gt; Display content.

123
00:07:48.990 --> 00:07:51.498
&gt;&gt; And two, is to let the user.

124
00:07:51.498 --> 00:07:52.988
&gt;&gt; Change the content.
&gt;&gt; Changed the content,

125
00:07:52.988 --> 00:07:53.985
change it, exactly.

126
00:07:53.985 --> 00:07:56.175
Yeah, yeah, exactly.

127
00:07:56.175 --> 00:07:59.983
So we had with HTML beautiful
techniques for displaying content,

128
00:07:59.983 --> 00:08:03.664
put it on the page in the order
you wanna display up, display in.

129
00:08:03.664 --> 00:08:05.836
And if you went to inside or
something on the page,

130
00:08:05.836 --> 00:08:07.558
put it inside of that stuff in the code.

131
00:08:07.558 --> 00:08:10.931
Display content, it was easy,
but we didn't have any data.

132
00:08:10.931 --> 00:08:15.761
And there's no such thing as content
being changed by the users action.

133
00:08:15.761 --> 00:08:20.122
And what they see changing without there
being associated corresponding data.

134
00:08:20.122 --> 00:08:24.056
Unfortunately, that data lives
in a totally different runtime,

135
00:08:24.056 --> 00:08:25.328
that of JavaScript.

136
00:08:25.328 --> 00:08:26.496
And the flow back and

137
00:08:26.496 --> 00:08:31.378
forth, particularly given there's also
kind of persistent state here in the DOM,

138
00:08:31.378 --> 00:08:35.180
the flow back and forth was
extremely hard to maintain mentally.

139
00:08:35.180 --> 00:08:41.311
So instead we said, one simple rule,
users can only in their handlers update or

140
00:08:41.311 --> 00:08:46.254
we as developers can only write
code to update underlying data,

141
00:08:46.254 --> 00:08:50.022
and then have a single
function flow it through.

142
00:08:50.022 --> 00:08:55.062
Only think in terms of underlying
data must describe all

143
00:08:55.062 --> 00:09:01.508
view all stuff the user sees must
have corresponding underlying data.

144
00:09:01.508 --> 00:09:05.698
Such that we can see exactly
where our consequences,

145
00:09:05.698 --> 00:09:08.621
exactly what our change is based and

146
00:09:08.621 --> 00:09:13.507
caused by the underlying data
flowing through to the view.

147
00:09:13.507 --> 00:09:18.686
It's one way of providing that restriction
that makes our code predictable.

148
00:09:18.686 --> 00:09:22.702
I know where my output
on the page comes from.

149
00:09:22.702 --> 00:09:26.677
It's my single function running
through from underlying data.

150
00:09:26.677 --> 00:09:30.619
I don't have to reason about if the user
clicks on that, then swipes that,

151
00:09:30.619 --> 00:09:33.260
then given all those things,
I'm gonna change.

152
00:09:33.260 --> 00:09:38.662
No, no, no, just change data and
based on that data, display content,

153
00:09:38.662 --> 00:09:43.556
almost see it as a submission, and
then based off that display it.

154
00:09:43.556 --> 00:09:49.412
What that also gave us was the ability
to describe as an intermediary step

155
00:09:49.412 --> 00:09:54.983
in JavaScript what content we wanted
to have displayed of that data.

156
00:09:54.983 --> 00:09:59.294
And we did exactly that with our visual or
virtual DOM.

157
00:09:59.294 --> 00:10:03.170
It allowed us to only think in
terms of one description and

158
00:10:03.170 --> 00:10:07.210
a bunch of conditional displaying
of the underlying data,

159
00:10:07.210 --> 00:10:12.570
including whether or not to display divs,
whether or not to display content.

160
00:10:12.570 --> 00:10:17.466
And then we realized we were
still wiping our entire DOM,

161
00:10:17.466 --> 00:10:22.770
as though we didn't have a full
archivable history of what was

162
00:10:22.770 --> 00:10:27.870
actually gonna be displayed on
the page in our JavaScript.

163
00:10:27.870 --> 00:10:32.993
Where we could then compare those
two collections of elements with

164
00:10:32.993 --> 00:10:38.767
their instantiated data and decide
what actually changed, which we did.

165
00:10:38.767 --> 00:10:44.295
And from that diffing,
that algorithm that did the comparison,

166
00:10:44.295 --> 00:10:50.237
we only made the actual changes
necessary to the real C++ elements.

167
00:10:50.237 --> 00:10:52.613
No performance issues.

168
00:10:52.613 --> 00:10:55.980
&gt;&gt; [LAUGH]
&gt;&gt; Finally,

169
00:10:55.980 --> 00:10:59.423
composable UI, that's not a disaster.

170
00:10:59.423 --> 00:11:02.505
Integrating that diffing
algorithm makes our code for

171
00:11:02.505 --> 00:11:04.854
building user interface semi-visual.

172
00:11:04.854 --> 00:11:05.648
There it is,

173
00:11:05.648 --> 00:11:09.998
described on the page, looking like
what it's gonna be in the output.

174
00:11:09.998 --> 00:11:13.694
But not untenably inefficient.

