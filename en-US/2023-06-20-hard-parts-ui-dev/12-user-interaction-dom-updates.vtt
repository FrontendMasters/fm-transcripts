WEBVTT

1
00:00:00.540 --> 00:00:02.890
So let's now have user action happen.

2
00:00:02.890 --> 00:00:05.850
I'm gonna use green for
my user actions, okay?

3
00:00:05.850 --> 00:00:10.853
So user action, here it is, user action.

4
00:00:10.853 --> 00:00:15.986
And our user action is going to be,
let's say this is, I don't know,

5
00:00:15.986 --> 00:00:21.730
one minute, because this user has been
really enjoying looking at the input.

6
00:00:21.730 --> 00:00:29.767
They've been musing over what
they're gonna type in to the input,

7
00:00:29.767 --> 00:00:34.108
and they are going to type in-
&gt;&gt; Hi.

8
00:00:34.108 --> 00:00:36.149
&gt;&gt; Hi, yeah, exactly.

9
00:00:36.149 --> 00:00:40.138
Type Hi, there it is, type Hi, exactly.

10
00:00:40.138 --> 00:00:45.046
All right, so as soon as the user types
this, people, as soon as they type,

11
00:00:45.046 --> 00:00:49.116
we've already said this,
our value property in JavaScript,

12
00:00:49.116 --> 00:00:53.350
sorry not in JavaScript,
let me get that completely right.

13
00:00:53.350 --> 00:00:58.559
Our value property in C++, there it is,

14
00:00:58.559 --> 00:01:03.768
our value in C++, shoot, our value,

15
00:01:03.768 --> 00:01:08.688
not in C++, our value in C++ is going

16
00:01:08.688 --> 00:01:13.460
get populated with Hi, there it is.

17
00:01:13.460 --> 00:01:14.789
We knew that from before, and

18
00:01:14.789 --> 00:01:17.860
that's gonna allow us to have
data that can then change.

19
00:01:17.860 --> 00:01:21.610
Okay, but we can't run code there,
don't panic.

20
00:01:23.610 --> 00:01:27.574
The DOM API, particularly its Event API,

21
00:01:27.574 --> 00:01:32.643
is going to trigger this
function to be called back into

22
00:01:32.643 --> 00:01:37.601
JavaScript where it will,
where should we put this,

23
00:01:37.601 --> 00:01:41.810
it's actually at the top here, didn't we?

24
00:01:41.810 --> 00:01:46.921
Where it will sit in
a queue of functions to

25
00:01:46.921 --> 00:01:54.230
be called on the call stack
called the callback queue.

26
00:01:54.230 --> 00:01:58.100
It's a queue of function definitions.

27
00:01:58.100 --> 00:02:01.523
Callback queue is a queue
of function definitions,

28
00:02:01.523 --> 00:02:04.882
I've never put it there before,
but that'll do.

29
00:02:04.882 --> 00:02:09.818
As soon as a function is in there, and
if you've been to Async Hard Parts, you've

30
00:02:09.818 --> 00:02:14.845
seen this, but as soon as a function is
in there, well let's put it in there.

31
00:02:14.845 --> 00:02:19.481
So at this moment,
actually tell me about the render engine,

32
00:02:19.481 --> 00:02:25.740
because it's directly related to what
the user sees and where they're clicking.

33
00:02:25.740 --> 00:02:30.571
So when they start writing
Hi in this input field,

34
00:02:30.571 --> 00:02:35.400
it will trigger in what's called an event.

35
00:02:35.400 --> 00:02:40.310
This is one of those names I don't love,
event, I don't know.

36
00:02:40.310 --> 00:02:46.671
It's a user action packaged up as
a command to tell this DOM element,

37
00:02:46.671 --> 00:02:53.990
please run your function that handles
the user inputting something.

38
00:02:53.990 --> 00:02:59.558
And that, it's gonna take
this handle input function,

39
00:02:59.558 --> 00:03:04.082
[SOUND] and
call it back into JavaScript to sit in

40
00:03:04.082 --> 00:03:08.501
the callback queue where
handle input sits.

41
00:03:08.501 --> 00:03:12.674
And we're not gonna get bogged down in the
implementation of this Async Hard Parts,

42
00:03:12.674 --> 00:03:15.694
not bogged down,
Async Hard Parts does this in more detail.

43
00:03:15.694 --> 00:03:19.653
But something called,
well, knowledge questions,

44
00:03:19.653 --> 00:03:24.732
who knows what's the feature that's
looping very quickly to check,

45
00:03:24.732 --> 00:03:29.350
is there any JavaScript code
still executing currently?

46
00:03:29.350 --> 00:03:29.850
Yeah, Ian?

47
00:03:29.850 --> 00:03:30.610
&gt;&gt; Is that the event loop?

48
00:03:30.610 --> 00:03:33.690
&gt;&gt; That's the event loop,
exactly, spot on.

49
00:03:33.690 --> 00:03:37.910
But we know we're now at one minute.

50
00:03:37.910 --> 00:03:42.150
I don't care how long our code took
to execute, it was not a minute.

51
00:03:42.150 --> 00:03:45.310
So there's definitely no
code left on the call stack.

52
00:03:45.310 --> 00:03:48.553
The global code has finished running,
there it is.

53
00:03:48.553 --> 00:03:52.669
The global code has finished
running all its code, and so

54
00:03:52.669 --> 00:03:58.329
the callback queue is able to pass the
handle input function to the call stack,

55
00:03:58.329 --> 00:04:04.115
where it is then, okay people it's a big
moment coming up, it's a big moment.

56
00:04:04.115 --> 00:04:08.010
You all know what's coming up,
it gets added to the call stack.

57
00:04:08.010 --> 00:04:13.356
Okay, exactly, start stretching people,
because it's about,

58
00:04:13.356 --> 00:04:16.700
shoot, it's about to be a moment, people.

59
00:04:17.774 --> 00:04:20.560
That's not one that works.

60
00:04:20.560 --> 00:04:21.230
Okay, here we go.

61
00:04:21.230 --> 00:04:24.739
I don't see any parentheses, so

62
00:04:24.739 --> 00:04:29.620
I'm not seeing any calling of a function.

63
00:04:29.620 --> 00:04:30.206
Don't panic.

64
00:04:30.206 --> 00:04:33.728
As soon as a function is passed from
the callback queue to the call stack,

65
00:04:33.728 --> 00:04:37.000
JavaScript's gonna put
parens on the end of it.

66
00:04:37.000 --> 00:04:42.104
Okay, anyone feeling excited for
what's about to happen?

67
00:04:42.104 --> 00:04:43.730
Yeah, exactly.

68
00:04:43.730 --> 00:04:46.682
Because exactly,
we've been waiting all day for

69
00:04:46.682 --> 00:04:49.151
this we're about to execute a function.

70
00:04:49.151 --> 00:04:50.875
We didn't have to make it execute.

71
00:04:50.875 --> 00:04:55.560
JavaScript auto executed for
that, so auto as the bloody,

72
00:04:55.560 --> 00:05:00.619
what are they called, parentheses,
to say run this function,

73
00:05:00.619 --> 00:05:05.040
to take our thread of execution
inside of the function.

74
00:05:06.110 --> 00:05:11.340
And to create a brand new,
everyone together, three, two, one.

75
00:05:11.340 --> 00:05:13.445
&gt;&gt; Execution context.

76
00:05:13.445 --> 00:05:14.539
&gt;&gt; Well on, people.

77
00:05:14.539 --> 00:05:18.037
&gt;&gt; [LAUGH]
&gt;&gt; Sorry, that's actually sad.

78
00:05:18.037 --> 00:05:21.269
&gt;&gt; Okay for
those who have not done JavaScript before,

79
00:05:21.269 --> 00:05:25.677
when a function executes what a function
runs, a function is called and

80
00:05:25.677 --> 00:05:28.109
it's added to the call stack to be run.

81
00:05:28.109 --> 00:05:31.499
In JavaScript,
it creates a new execution context,

82
00:05:31.499 --> 00:05:36.391
a place in which to run its code, and
a little mini store of data like this one,

83
00:05:36.391 --> 00:05:39.655
but just for
while we're inside of this function.

84
00:05:39.655 --> 00:05:42.810
Beautiful, and
that's exactly where we go right now, and

85
00:05:42.810 --> 00:05:45.560
that's where we create
a new execution context.

86
00:05:45.560 --> 00:05:51.136
Did we write the parens, Justice,
to execute this function?

87
00:05:51.136 --> 00:05:52.651
Did we put the parens on?

88
00:05:52.651 --> 00:05:55.943
JavaScript did, exactly,
when handle input,

89
00:05:55.943 --> 00:05:59.407
Justice just pointed at the screen,
that'll do.

90
00:05:59.407 --> 00:06:00.530
&gt;&gt; [LAUGH]
&gt;&gt; But that will do, right?

91
00:06:00.530 --> 00:06:02.900
It's JavaScript doing it, exactly.

92
00:06:02.900 --> 00:06:05.360
All right, good, Justice,
uou got away with it.

93
00:06:05.360 --> 00:06:11.913
And into it, we go where we are going to.

94
00:06:11.913 --> 00:06:15.208
Look at this line here,
post is going to be the result.

95
00:06:15.208 --> 00:06:20.177
I almost like to say,
the evaluation of calling,

96
00:06:20.177 --> 00:06:27.610
that's what I was gonna say, I almost
like to say calling the value getter.

97
00:06:27.610 --> 00:06:30.056
Yeah, go on, Ian, can I really say
calling when it's not a function?

98
00:06:30.056 --> 00:06:33.552
No [LAUGH]
&gt;&gt; I'm just so curious if post is,

99
00:06:33.552 --> 00:06:36.650
is it gonna be h or
is it gonna be [CROSSTALK]?

100
00:06:36.650 --> 00:06:39.530
&gt;&gt; Great, yeah, yes,
Ian's immediately right.

101
00:06:39.530 --> 00:06:43.835
Input is going to trigger
an event on every letter.

102
00:06:43.835 --> 00:06:46.165
I was gonna add that caveat,
don't worry, Ian.

103
00:06:46.165 --> 00:06:50.309
But because it's boring
enough with the word Hi,

104
00:06:50.309 --> 00:06:56.435
let alone if it's just the letter h,
you know why it could actually work.

105
00:06:56.435 --> 00:06:59.065
For the first time,
it could actually work, yeah.

106
00:06:59.065 --> 00:06:59.745
That's really cool.

107
00:06:59.745 --> 00:07:04.150
No, Ian's pointing out immediately there
a real issue, that [INAUDIBLE], I mean,

108
00:07:04.150 --> 00:07:04.842
it's fine.

109
00:07:04.842 --> 00:07:08.942
Handle input would actually be triggered
to run on every letter, and that's okay,

110
00:07:08.942 --> 00:07:10.224
that means every letter.

111
00:07:10.224 --> 00:07:15.461
And what we could do if you wanted to have
it only run on fully entering text that

112
00:07:15.461 --> 00:07:20.700
we want to have sort of submitted to be
displayed in this little preview window

113
00:07:20.700 --> 00:07:25.937
here, is maybe on text key, press down
on the enter key, which would be key,

114
00:07:25.937 --> 00:07:30.650
I think, ID number 13,
something like that, I think it's 13.

115
00:07:30.650 --> 00:07:32.767
On key, press down.

116
00:07:32.767 --> 00:07:39.370
If that is key number 13,
then run a function to handle it.

117
00:07:39.370 --> 00:07:45.403
One of the things about Hard Parts is one
has to keep the code as tight as possible,

118
00:07:45.403 --> 00:07:48.530
meaning we're using just on input here.

119
00:07:48.530 --> 00:07:53.178
But you're actually right,
to be really clear, Ian's saying,

120
00:07:53.178 --> 00:07:56.830
hold on,
handle input would be triggered to run on,

121
00:07:56.830 --> 00:08:00.327
the event is on every input by the key,
h, then i.

122
00:08:00.327 --> 00:08:02.835
Okay, so
really we'd have h the first time here,

123
00:08:02.835 --> 00:08:04.940
it's good to clear that up immediately.

124
00:08:04.940 --> 00:08:06.875
Yeah, we will definitely clear that up,
probably,

125
00:08:06.875 --> 00:08:08.423
no [LAUGH] we definitely
will clear that up.

126
00:08:08.423 --> 00:08:11.439
&gt;&gt; [LAUGH]
&gt;&gt; Spot on, no, absolutely.

127
00:08:11.439 --> 00:08:14.403
Okay, easy to tweak or whatever,
just keep it very simple and

128
00:08:14.403 --> 00:08:17.950
we'll keep using Hi for now just
to keep it a bit more interesting.

129
00:08:17.950 --> 00:08:20.686
So I'm actually glad you brought that up,
Ian,

130
00:08:20.686 --> 00:08:23.270
it's quite nice to clear up immediately.

131
00:08:23.270 --> 00:08:26.318
So post is now gonna be assigned.

132
00:08:26.318 --> 00:08:31.385
The result of calling
the value getter property

133
00:08:31.385 --> 00:08:37.211
on the JS input object that
has access to the underlying

134
00:08:37.211 --> 00:08:43.053
input element where we find
the value is the string Hi.

135
00:08:43.053 --> 00:08:47.486
It's brought back as a DOM string Hi, and

136
00:08:47.486 --> 00:08:53.822
it's then going to be converted
into a JavaScript string,

137
00:08:53.822 --> 00:08:59.900
which is then stored into post,
there it is, Hi.

138
00:08:59.900 --> 00:09:04.930
Okay, it's been a lot of work, but
flipping heck, I'm really proud,

139
00:09:04.930 --> 00:09:09.383
that we managed to get the user
acting on what they saw by typing,

140
00:09:09.383 --> 00:09:12.928
it was an empty box,
essentially, by typing, and

141
00:09:12.928 --> 00:09:16.484
that data coming all the way
across to JavaScript.

142
00:09:16.484 --> 00:09:22.294
When I look at this now, you look at
it and you go, wow, what happened here?

143
00:09:22.294 --> 00:09:25.575
But actually to be fair, shoot, yeah, but

144
00:09:25.575 --> 00:09:31.490
it is the same model again and again and
again, so we'll get used to it.

145
00:09:31.490 --> 00:09:36.185
I've heard people describe this workshop
as going from difficult to tedious, so.

146
00:09:36.185 --> 00:09:38.190
&gt;&gt; [LAUGH]
&gt;&gt; What a review, but

147
00:09:38.190 --> 00:09:41.103
it's gonna go from difficult to tedious.

148
00:09:41.103 --> 00:09:45.599
Because we're gonna be so
familiar with search DOM and or

149
00:09:45.599 --> 00:09:50.283
use document object to access
full C++ list of elements,

150
00:09:50.283 --> 00:09:54.360
to create an element or
to search for an element.

151
00:09:54.360 --> 00:09:58.743
Get a link to that element via an object
in JavaScript that can host that

152
00:09:58.743 --> 00:09:59.950
hidden link.

153
00:09:59.950 --> 00:10:05.070
Then use methods on that object in
JavaScript to edit, update, transform,

154
00:10:05.070 --> 00:10:09.350
delete, remove,
move around the element on the C++ object.

155
00:10:09.350 --> 00:10:12.197
It becomes such a familiar pattern.

156
00:10:12.197 --> 00:10:15.139
It is the model of the web browser and

157
00:10:15.139 --> 00:10:20.610
the interplay between JavaScript and
the pixels via the DOM.

158
00:10:20.610 --> 00:10:25.310
Okay, great, and so our second line there,
Phil, can I ask you for this one?

159
00:10:25.310 --> 00:10:30.251
Maybe if you don't mind, trying to do
the sort of style of communication

160
00:10:30.251 --> 00:10:36.210
there in terms of our DOM element and
what text content is doing here on jsDiv.

161
00:10:36.210 --> 00:10:42.830
&gt;&gt; Yeah, so we're going to start
off by accessing the jsDiv object.

162
00:10:42.830 --> 00:10:44.570
&gt;&gt; Perfect, there it is.

163
00:10:44.570 --> 00:10:50.629
&gt;&gt; We are going to, again, it is a little
bit tough to communicate through,

164
00:10:50.629 --> 00:10:54.820
but I guess,
execute the text content setter.

165
00:10:54.820 --> 00:10:57.840
&gt;&gt; I love that, I love that,
really nice, exactly.

166
00:10:57.840 --> 00:11:00.702
&gt;&gt; And
setting it equal to the value of post.

167
00:11:00.702 --> 00:11:02.400
&gt;&gt; Which is a string-
&gt;&gt; Hi.

168
00:11:02.400 --> 00:11:06.722
&gt;&gt; Yeah, beautiful, okay, and

169
00:11:06.722 --> 00:11:14.490
which is setting it as the text on the-
&gt;&gt; The DOM C++-

170
00:11:14.490 --> 00:11:15.070
&gt;&gt; Element, yeah.

171
00:11:15.070 --> 00:11:15.807
&gt;&gt; Element.

172
00:11:15.807 --> 00:11:19.665
&gt;&gt; Text is set to Hi from JavaScript, and

173
00:11:19.665 --> 00:11:23.893
that immediately shows up on our screen.

174
00:11:23.893 --> 00:11:28.074
Look at that, people, well done, everybody
&gt;&gt; [APPLAUSE]

175
00:11:28.074 --> 00:11:28.919
&gt;&gt; Well done,

176
00:11:28.919 --> 00:11:31.798
I brought my own applause for all of you.

177
00:11:31.798 --> 00:11:35.617
Look at that, user has typed, and

178
00:11:35.617 --> 00:11:41.423
what they've seen on the screen
has changed [LAUGH].

179
00:11:41.423 --> 00:11:46.100
It only took, my goodness, it looks kind
of beautiful though, with the colors.

180
00:11:46.100 --> 00:11:47.040
It does look beautiful.

181
00:11:47.040 --> 00:11:52.171
But it's astonishing how much work
it takes just to make a single

182
00:11:52.171 --> 00:11:57.397
change on what the user sees via
JavaScript's underlying data,

183
00:11:57.397 --> 00:12:02.730
via an event and a function that
handles that known as the handler.

184
00:12:02.730 --> 00:12:06.350
And that is then passed back to JavaScript
to the callback queue where it's, or,

185
00:12:06.350 --> 00:12:06.990
called back.

186
00:12:06.990 --> 00:12:10.586
Sorry, passed, called back, might as
well call it by what it is, right,

187
00:12:10.586 --> 00:12:14.298
called back to JavaScript into the
callback queue, added to the call stack,

188
00:12:14.298 --> 00:12:18.000
at that moment, parens are added by
JavaScript engine on our behalf.

189
00:12:18.000 --> 00:12:22.165
A brand new execution context
is created to run that code,

190
00:12:22.165 --> 00:12:25.905
where we then used our global,
just to make it easy,

191
00:12:25.905 --> 00:12:29.815
access to objects to these
DOM elements to find input,

192
00:12:29.815 --> 00:12:35.610
grab what the user had typed in value,
stick it in the post JavaScript data.

193
00:12:35.610 --> 00:12:38.583
We updated our underlying
data in JavaScript,

194
00:12:38.583 --> 00:12:43.487
which is where we're able to use change
run code on that data to determine where

195
00:12:43.487 --> 00:12:47.647
to display it back on the page,
which we did via the text content set

196
00:12:47.647 --> 00:12:51.023
up on the jsDiv access for
the development on the DOM.

197
00:12:51.023 --> 00:12:54.121
Where we then set its text content,
the property,

198
00:12:54.121 --> 00:12:57.665
actually on the DOM element
might be something like text.

199
00:12:57.665 --> 00:13:02.313
Again we can look it up but
the exact implementation of this,

200
00:13:02.313 --> 00:13:07.781
all we need to know is that the DOM API
is designed such that we can use text

201
00:13:07.781 --> 00:13:12.886
content to access this C++ objects
text to which we attached Hi,

202
00:13:12.886 --> 00:13:15.510
and that appeared on the page.

203
00:13:15.510 --> 00:13:18.128
Imagine if we could have just
done it right here, right,

204
00:13:18.128 --> 00:13:21.670
they're literally probably
next to each other in memory.

205
00:13:21.670 --> 00:13:25.080
Not a chance, but also not the end of
the world, you have the model, right?

206
00:13:25.080 --> 00:13:27.280
We have a function, I mean,
kind of makes sense.

207
00:13:27.280 --> 00:13:30.466
You know what they're trying to
do with this handler function,

208
00:13:30.466 --> 00:13:33.947
is it's like a little package of code
that allows us to change the DOM,

209
00:13:33.947 --> 00:13:37.940
a little patch of code, it just
happens to have to run in JavaScript.

210
00:13:37.940 --> 00:13:42.863
But it's like little package of code that
would be encapsulated to run on these

211
00:13:42.863 --> 00:13:44.150
two elements.

212
00:13:44.150 --> 00:13:46.540
But do we think of it like that?

213
00:13:46.540 --> 00:13:47.620
I don't know, maybe.

214
00:13:47.620 --> 00:13:51.925
I think the problem with,
not least because of that console trick,

215
00:13:51.925 --> 00:13:57.080
is that we have no idea that actually
there is these two different worlds.

216
00:13:57.080 --> 00:14:01.676
One of which has data that
determines what the user sees,

217
00:14:01.676 --> 00:14:05.140
but we cannot change right there and then.

218
00:14:05.140 --> 00:14:08.956
We have to pull back into
JavaScript to change that data,

219
00:14:08.956 --> 00:14:12.930
to then redisplay it by adding
it back to that store of data,

220
00:14:12.930 --> 00:14:16.430
almost sort of not even store of data,
I guess it is.

221
00:14:16.430 --> 00:14:20.540
It's a sort of object that has all
the data the user is seeing directly.

222
00:14:21.550 --> 00:14:23.379
Unfortunately, if we
wanna change that data,

223
00:14:23.379 --> 00:14:25.370
we gotta put it back into JavaScript.

224
00:14:25.370 --> 00:14:28.559
Meaning if we weren't tracking
that data in JavaScript,

225
00:14:28.559 --> 00:14:32.332
we wouldn't even really know what
data is on the DOM, because note,

226
00:14:32.332 --> 00:14:36.190
we do not have this data directly on
these objects here in JavaScript.

227
00:14:36.190 --> 00:14:40.500
It may look like we do, because when we
write jsDiv.textcontent, it would go and

228
00:14:40.500 --> 00:14:43.380
get the value of the text of the Div but
it ain't there.

229
00:14:45.270 --> 00:14:46.870
These are just access objects.

230
00:14:46.870 --> 00:14:51.401
I fall into the trap, when I think about
that object being pulled out and then we

231
00:14:51.401 --> 00:14:56.766
add elements, we add data to it, I'm like,
is that being added to this object?

232
00:14:56.766 --> 00:15:02.325
We're using this object,
get a set of properties to go and

233
00:15:02.325 --> 00:15:06.527
append information to a C++ DOM element.

234
00:15:06.527 --> 00:15:11.350
What that's gonna mean is that we're
always gonna be doing this back and forth.

235
00:15:11.350 --> 00:15:15.739
In fact, every change of data is
gonna require a back and forth,

236
00:15:15.739 --> 00:15:20.374
a flowing through, and in fact
there's gonna be no permanent bonds

237
00:15:20.374 --> 00:15:23.660
built in between data here and data here.

238
00:15:23.660 --> 00:15:27.960
Every single change between these two
worlds is gonna require a manual running

239
00:15:27.960 --> 00:15:32.690
of a handler function to go and run code
in JavaScript to change the data here.

240
00:15:32.690 --> 00:15:36.181
Then a manual execution,
which was a term that Phil used,

241
00:15:36.181 --> 00:15:39.230
of a setter property to go and
set data here.

242
00:15:39.230 --> 00:15:41.090
There is no permanent bond.

243
00:15:41.090 --> 00:15:44.800
If posts were to change here,
the text here won't change.

244
00:15:44.800 --> 00:15:50.291
We'll have to re-run a setter function,
set a property to make the change.

245
00:15:50.291 --> 00:15:55.233
I mean, given as Ian rightly said,
this is a lot like we

246
00:15:55.233 --> 00:16:01.152
are setting a value on a key on
an object right here in JavaScript.

247
00:16:01.152 --> 00:16:06.050
Or actually if we were to console log
jsDiv on maybe a sort of HTML line of

248
00:16:06.050 --> 00:16:08.791
code, to actually, in practice, for

249
00:16:08.791 --> 00:16:13.523
this to be a setter into a different
runtime that every time we change

250
00:16:13.523 --> 00:16:19.510
the assigned value here would have to
be rerun to reset that value over here.

251
00:16:19.510 --> 00:16:24.630
That's why your engineering in
the web browser is so challenging.

252
00:16:24.630 --> 00:16:26.272
Nobody would design this from scratch.

253
00:16:26.272 --> 00:16:28.697
&gt;&gt; [LAUGH]

