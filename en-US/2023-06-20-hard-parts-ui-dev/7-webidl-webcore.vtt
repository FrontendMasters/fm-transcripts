WEBVTT

1
00:00:00.062 --> 00:00:02.934
We have data now, but
how do we display it?

2
00:00:02.934 --> 00:00:05.233
It says here with WebIDL and WebCore.

3
00:00:05.233 --> 00:00:07.130
Let's give the details of that.

4
00:00:07.130 --> 00:00:12.448
So our WebCore is where our C++ list is,
our model of the page.

5
00:00:12.448 --> 00:00:13.274
We get that bit.

6
00:00:13.274 --> 00:00:17.459
WebIDL, this is a standardized
way of describing,

7
00:00:17.459 --> 00:00:21.929
interacting between any
features of the web browser and

8
00:00:21.929 --> 00:00:26.892
each other, I guess, but
particularly here, JavaScript.

9
00:00:26.892 --> 00:00:32.002
So these will list out, and we can take a
look later on at some code in this format,

10
00:00:32.002 --> 00:00:35.928
exactly how you should expect
to access an element of the DOM.

11
00:00:35.928 --> 00:00:41.178
So it stands for, so that's how
we're able to cross between these

12
00:00:41.178 --> 00:00:46.642
streams of JavaScript, runtime,
and other web browser features.

13
00:00:46.642 --> 00:00:52.226
Other web browser features, so
I guess web browser API technically,

14
00:00:52.226 --> 00:00:58.673
but say web features via a Web IDL,
stands for Interface Description Language.

15
00:00:58.673 --> 00:01:03.337
Very fancy standardized format for
describing exactly how for

16
00:01:03.337 --> 00:01:06.419
example query selector is going to work.

17
00:01:06.419 --> 00:01:12.260
So that the team building out the dorm or
the team building out JavaScript or

18
00:01:12.260 --> 00:01:17.931
the team building out console or
the team building out the Web Audio API.

19
00:01:17.931 --> 00:01:22.938
All have a standardized format for
describing how you're going

20
00:01:22.938 --> 00:01:28.513
to be able to access their features
from other parts of the web browser.

21
00:01:28.513 --> 00:01:33.229
And that is the Interface Description
Language, the standardized format for

22
00:01:33.229 --> 00:01:36.016
describing how you're
gonna be able to access

23
00:01:36.016 --> 00:01:38.667
features in other parts
of the web browser.

24
00:01:38.667 --> 00:01:43.574
So the DOM API, which describes how
you're gonna be able to access elements

25
00:01:43.574 --> 00:01:46.423
in the DOM, is described in this language.

26
00:01:46.423 --> 00:01:50.782
So the DOM API might literally write in
English language query selector will work

27
00:01:50.782 --> 00:01:52.522
this way, this way, this way.

28
00:01:52.522 --> 00:01:55.940
Its implementation in the web
browser will be described via

29
00:01:55.940 --> 00:01:58.205
the Interface Description Language.

30
00:01:58.205 --> 00:01:59.187
Okay, yeah, Mark, go ahead.

31
00:01:59.187 --> 00:02:02.731
&gt;&gt; How do you know what's a JavaScript
built-in function versus what

32
00:02:02.731 --> 00:02:03.483
calls out to?

33
00:02:03.483 --> 00:02:04.066
&gt;&gt; Mm-hm.

34
00:02:04.066 --> 00:02:07.312
&gt;&gt; Browser features or C++?

35
00:02:07.312 --> 00:02:09.892
&gt;&gt; I guess in general
you go to MDN to see,

36
00:02:09.892 --> 00:02:11.987
that's always the answer,
&gt;&gt; [LAUGH]

37
00:02:11.987 --> 00:02:13.186
&gt;&gt; But if you see an MDN,

38
00:02:13.186 --> 00:02:14.655
it says web browser APIs.

39
00:02:14.655 --> 00:02:18.920
There's a huge list of them,
including the DOM document then, you know,

40
00:02:18.920 --> 00:02:23.604
it's one of those, to be honest, most of
them are, most of the things we use all.

41
00:02:23.604 --> 00:02:28.283
JavaScript lives to save data,
save data and run code on it.

42
00:02:28.283 --> 00:02:34.691
Some things I believe are somewhere
in between, and timers.

43
00:02:34.691 --> 00:02:37.304
So when you run set timeout or
set interval,

44
00:02:37.304 --> 00:02:40.552
there is a timer feature that
is not in JavaScript, but

45
00:02:40.552 --> 00:02:45.088
actually I believe it's somewhat
implemented in tandem with JavaScript.

46
00:02:45.088 --> 00:02:48.672
But most of those features which we use,
if they're saving data,

47
00:02:48.672 --> 00:02:53.285
they're saving directly in Java memory and
or executing on it, that's functions.

48
00:02:53.285 --> 00:02:58.623
That's operators, all the stuff you'd
see in like, honestly hard parts besides

49
00:02:58.623 --> 00:03:03.593
the asynchronous features are features
of the JavaScript engine directly.

50
00:03:03.593 --> 00:03:08.618
Everything else that you would see
in the web browser APIs list on MDN,

51
00:03:08.618 --> 00:03:10.248
are features in this.

52
00:03:10.248 --> 00:03:12.953
And do you see why people like,
do you see why JavaScript's so big?

53
00:03:12.953 --> 00:03:17.717
It's like a control panel for all of these
features that could be almost considered,

54
00:03:17.717 --> 00:03:20.042
almost constitute an operating system.

55
00:03:20.042 --> 00:03:24.274
Is not as typical right now, but
the chromium engine, which is essentially

56
00:03:24.274 --> 00:03:28.706
the web browser engine, is and certainly
was enormously until very recently,

57
00:03:28.706 --> 00:03:33.206
because there could be questions about
its performance in terms of building full

58
00:03:33.206 --> 00:03:37.641
applications and having multiple instances
of Chrome running on your computer

59
00:03:37.641 --> 00:03:39.852
in order to operate Spotify and Slack.

60
00:03:39.852 --> 00:03:43.507
But all those applications use
a web browser under the hood,

61
00:03:43.507 --> 00:03:47.951
because you basically got a full
operating system, and then just wrapped

62
00:03:47.951 --> 00:03:52.412
it up to make it like Slack app or Atom,
the old text editor everyone used.

63
00:03:52.412 --> 00:03:55.629
They are all just under the hood,
the web browser implementation.

64
00:03:55.629 --> 00:03:59.517
You got a full operating system
there with a language that people

65
00:03:59.517 --> 00:04:04.352
are all experienced writing as its control
panel to access all those features.

66
00:04:04.352 --> 00:04:05.705
Let's use this accessor here.

67
00:04:05.705 --> 00:04:10.622
I think we can, actually,
probably to save us some cleaning.

68
00:04:10.622 --> 00:04:16.550
We can actually do it on this same
whiteboard instance here, that's right.

69
00:04:16.550 --> 00:04:19.483
WebCore gives JavaScript
access to the DOM and pixels.

70
00:04:19.483 --> 00:04:26.040
Its access is described by
the Web Interface Description Language.

71
00:04:26.040 --> 00:04:29.991
We are now going to, so we get a bit
scrappy here because we are going to

72
00:04:29.991 --> 00:04:34.423
continue using this whiteboard even
though that's not all code on here, but

73
00:04:34.423 --> 00:04:39.425
there was nothing of any significance that
we were doing, so hopefully, it's okay.

74
00:04:39.425 --> 00:04:44.311
But we're gonna add before our script

75
00:04:44.311 --> 00:04:49.045
tag to elements vary HTML to our C++

76
00:04:49.045 --> 00:04:53.483
list of elements known as the DOM.

77
00:04:53.483 --> 00:04:54.835
Okay, let's do that.

78
00:04:54.835 --> 00:04:56.276
So Alexa, help me out.

79
00:04:56.276 --> 00:05:00.542
I'm just gonna get rid of our first
bit here and do it right here, nice.

80
00:05:00.542 --> 00:05:02.165
What's our first thing then b.

81
00:05:02.165 --> 00:05:04.815
So this is our HTML code has
been loaded in the parser.

82
00:05:04.815 --> 00:05:09.865
The first thing that happens,
first thing that happens, and

83
00:05:09.865 --> 00:05:15.995
it's loading two elements onto this
list of elements or objects in C++.

84
00:05:15.995 --> 00:05:20.464
Lets makes clear this is C++ is
loading two elements on there, C++.

85
00:05:20.464 --> 00:05:20.968
Tell me,

86
00:05:20.968 --> 00:05:25.329
Alexa, what's the first one that's going
to be on our list of elements add-on.

87
00:05:25.329 --> 00:05:26.167
&gt;&gt; An input node.

88
00:05:26.167 --> 00:05:27.141
&gt;&gt; Input node perfect.

89
00:05:27.141 --> 00:05:29.153
There it is, input node.

90
00:05:29.153 --> 00:05:34.295
I'll do little bullet points from now
on to show, our next one is what Alexa?

91
00:05:34.295 --> 00:05:35.964
&gt;&gt; A div.
&gt;&gt; Div, our next one is?

92
00:05:35.964 --> 00:05:37.040
&gt;&gt; Our script.

93
00:05:37.040 --> 00:05:39.742
&gt;&gt; Our script, which is going to trigger,

94
00:05:39.742 --> 00:05:42.850
will kick off our
JavaScript engine running.

95
00:05:42.850 --> 00:05:48.173
By the way, again, what an interesting
structure whereby the exact

96
00:05:48.173 --> 00:05:53.402
position that you add the node in
HTML via HTML to the list of elements

97
00:05:53.402 --> 00:05:59.673
determines when you start executing
your associated main runtime JavaScript.

98
00:05:59.673 --> 00:06:02.064
What a fascinating legacy feature.

99
00:06:02.064 --> 00:06:06.119
Okay, now our JavaScript engine
starts to execute as we go.

100
00:06:06.119 --> 00:06:07.680
It has a global memory.

101
00:06:07.680 --> 00:06:10.538
It has a thread of execution,
executing the code line by line.

102
00:06:10.538 --> 00:06:11.379
The first line,

103
00:06:11.379 --> 00:06:15.416
we've actually sort of already seen that
Alexa is gonna assign what to memory?

104
00:06:15.416 --> 00:06:17.547
&gt;&gt; We're declaring our variable post.

105
00:06:17.547 --> 00:06:18.893
&gt;&gt; And- And storing it.

106
00:06:18.893 --> 00:06:23.533
&gt;&gt; Hi, yeah, we never even assigned
it to hey, in this new code,

107
00:06:23.533 --> 00:06:27.840
we just assigned it to Hi,
no reassignment, there it is.

108
00:06:27.840 --> 00:06:31.458
Hi, with an exclamation mark, there it is.

109
00:06:31.458 --> 00:06:32.879
What a great user interface this is,
people.

110
00:06:32.879 --> 00:06:33.609
We're not even there yet.

111
00:06:33.609 --> 00:06:35.039
We've got some data though.

112
00:06:35.039 --> 00:06:38.810
And now, things get interesting.

113
00:06:38.810 --> 00:06:43.380
We have a object in JavaScript
by the name of document.

114
00:06:43.380 --> 00:06:48.594
It has a hidden link out to the C++
runtime, specifically the position

115
00:06:48.594 --> 00:06:54.044
in it where we have the list of elements
that are gonna show up on the page.

116
00:06:54.044 --> 00:06:55.436
What did I do wrong, people?

117
00:06:55.436 --> 00:06:59.365
Alexa, as soon as I added these
elements to the model of the page,

118
00:06:59.365 --> 00:07:02.523
what should happen via my layout and
render engine?

119
00:07:02.523 --> 00:07:04.339
&gt;&gt; They show up.
&gt;&gt; They show up.

120
00:07:04.339 --> 00:07:06.527
There they are exactly, that's my fault.

121
00:07:06.527 --> 00:07:07.657
So nothing in the div,

122
00:07:07.657 --> 00:07:10.941
we wouldn't even see it technically
wouldn't even be that big.

123
00:07:10.941 --> 00:07:13.572
It's sort of expands to fill with content.

124
00:07:13.572 --> 00:07:16.046
We wouldn't see it but
let's just have it there as a kind of, so

125
00:07:16.046 --> 00:07:17.556
we know it's there for our purposes.

126
00:07:17.556 --> 00:07:22.041
Input field interest to us going right, by
the way, if they did right would show up

127
00:07:22.041 --> 00:07:25.038
here on the DOM immediately
stored data immediately.

128
00:07:25.038 --> 00:07:27.308
Okay, so here we go.

129
00:07:27.308 --> 00:07:30.315
This object has a hidden link
to this list of elements.

130
00:07:30.315 --> 00:07:33.538
It has a bunch of methods available to it,
30, 40.

131
00:07:33.538 --> 00:07:39.264
We have no five more we can go find all of
them on MDN or obviously now more likely,

132
00:07:39.264 --> 00:07:44.744
you type to ChatGPT, one of the top 10
document methods, it is what it is.

133
00:07:44.744 --> 00:07:47.101
So be fair, will it be correct?

134
00:07:47.101 --> 00:07:51.426
Probably for that question it would
be correct, but not guaranteed.

135
00:07:51.426 --> 00:07:56.447
But yeah, that list of functions
allows us, to have fine grain control.

136
00:07:56.447 --> 00:07:59.137
Well, not even fine grain control
just allows us to access this list

137
00:07:59.137 --> 00:08:00.042
of elements in C++.

138
00:08:00.042 --> 00:08:01.887
That's kind of cool,
it's gonna point in actually,

139
00:08:01.887 --> 00:08:03.260
that's technically what's going on.

140
00:08:03.260 --> 00:08:10.102
On the hood of your interested,
it is known as a C++ pointer that's going,

141
00:08:10.102 --> 00:08:16.046
a C++ pointer that is, A reference, a link

142
00:08:16.046 --> 00:08:20.620
to the exact place in the computer's
memory store where this list is.

143
00:08:20.620 --> 00:08:22.025
Okay, so let's do it.

144
00:08:22.025 --> 00:08:25.788
Honestly, people,
let's do our first line of,

145
00:08:25.788 --> 00:08:32.061
I guess harder code that's accessing this
object there's less from JavaScript,

146
00:08:32.061 --> 00:08:35.846
Phil, left-hand side,
what are we declaring?

147
00:08:35.846 --> 00:08:39.978
&gt;&gt; We're declaring a constant
variable called JsDiv.

148
00:08:39.978 --> 00:08:41.064
&gt;&gt; JsDiv, okay?

149
00:08:41.064 --> 00:08:44.180
And just in general kind of
quality technical communication,

150
00:08:44.180 --> 00:08:46.012
what is the right-hand side doing?

151
00:08:46.012 --> 00:08:48.979
Before we know what the query
selector is gonna do,

152
00:08:48.979 --> 00:08:52.164
what in the high level is
gonna be returned into jsDiv?

153
00:08:52.164 --> 00:08:56.240
&gt;&gt; Yeah, so, we're going to initialize
it to the evaluated result.

154
00:08:56.240 --> 00:08:59.606
&gt;&gt; Beautiful.
&gt;&gt; Of running the query selector method on

155
00:08:59.606 --> 00:09:01.151
a document object.

156
00:09:01.151 --> 00:09:02.094
&gt;&gt; Beautiful.

157
00:09:02.094 --> 00:09:03.839
&gt;&gt; Passing in an argument of div.

158
00:09:03.839 --> 00:09:04.813
&gt;&gt; Beautiful.

159
00:09:04.813 --> 00:09:07.544
So we're going to, I mean,
I couldn't have said it better.

160
00:09:07.544 --> 00:09:13.095
So we are going to call query
selector on the document object.

161
00:09:13.095 --> 00:09:16.263
So we're going to go look on the docket
object, find a method query selector.

162
00:09:16.263 --> 00:09:19.752
We know we're gonna try and execute
invoke paren, that means go run it.

163
00:09:19.752 --> 00:09:24.205
We are not saving, so
be careful to say stuff like we're going

164
00:09:24.205 --> 00:09:27.472
to assign document query
selector to JsDiv.

165
00:09:27.472 --> 00:09:30.234
We're gonna assign the evaluated result,

166
00:09:30.234 --> 00:09:33.452
the output of calling of
invoking query selector.

167
00:09:33.452 --> 00:09:35.735
Okay, what the heck
happens when we do that?

168
00:09:35.735 --> 00:09:38.867
Well three things people,
and actually it is three,

169
00:09:38.867 --> 00:09:41.244
we can sort of walk through it one by one.

170
00:09:41.244 --> 00:09:44.680
Inside a query selector,
three things are happening, one,

171
00:09:44.680 --> 00:09:48.655
go look at the link under the hood,
the hidden property on that object.

172
00:09:48.655 --> 00:09:52.981
This by the way is a bit like the links
you've seen if you've done hard parts

173
00:09:52.981 --> 00:09:57.594
square bracket, square bracket, scope for
where the closure is referenced.

174
00:09:57.594 --> 00:10:00.342
Square bracket, square bracket prototype.

175
00:10:00.342 --> 00:10:04.328
This hidden link is going to head out to,

176
00:10:04.328 --> 00:10:08.209
though in this case, this C++ list.

177
00:10:08.209 --> 00:10:13.277
And it's going to hit the overall
list because document has

178
00:10:13.277 --> 00:10:19.356
a permanent link to the overall list
where it's going to query search,

179
00:10:19.356 --> 00:10:23.424
fancy word for search,
a selector of type Div.

180
00:10:23.424 --> 00:10:29.039
A selector is any label we can
use in here to select an element.

181
00:10:29.039 --> 00:10:32.679
It will turn out there are other
ways we can select an element,

182
00:10:32.679 --> 00:10:34.153
via a class name or an ID.

183
00:10:34.153 --> 00:10:41.381
But for our code here,
we're gonna search by what string Fill.

184
00:10:41.381 --> 00:10:42.502
&gt;&gt; Div.
&gt;&gt; Div.

185
00:10:42.502 --> 00:10:44.905
Perfect, there it is.

186
00:10:44.905 --> 00:10:46.533
Search for div in the DOM.

187
00:10:46.533 --> 00:10:47.851
Do we find it?

188
00:10:47.851 --> 00:10:48.925
Machig.

189
00:10:48.925 --> 00:10:50.220
&gt;&gt; Yeah.

190
00:10:50.220 --> 00:10:51.655
&gt;&gt; There it is beautiful.

191
00:10:51.655 --> 00:10:57.924
Okay, and I guess step three would
be to bring back that, not that one.

192
00:10:57.924 --> 00:11:00.785
That one, that div back into JavaScript so

193
00:11:00.785 --> 00:11:03.733
that we can then start
making changes to it.

194
00:11:03.733 --> 00:11:12.328
Problem, who thinks we can bring
C++ objects into JavaScript?

195
00:11:12.328 --> 00:11:16.266
Raise your hand who believe,
very excellent, exactly.

196
00:11:16.266 --> 00:11:19.982
We yes, it was, scratching their head.

197
00:11:19.982 --> 00:11:23.459
&gt;&gt; [LAUGH]
&gt;&gt; Exactly, we absolutely cannot So

198
00:11:23.459 --> 00:11:28.094
probably you already got a little
hint what's gonna happen.

199
00:11:28.094 --> 00:11:31.711
Query selector in JavaScript is going

200
00:11:31.711 --> 00:11:36.465
to automatically create for
us an object, okay?

201
00:11:36.465 --> 00:11:38.932
This object is going to have,

202
00:11:38.932 --> 00:11:43.974
you can probably already guess,
a link, hidden link on it.

203
00:11:43.974 --> 00:11:50.658
We can't console log this hidden
link to that div element on the DOM.

204
00:11:50.658 --> 00:11:55.081
It's gonna have a hidden link to it,
there it is, and even better.

205
00:11:55.081 --> 00:11:59.967
It's gonna be populated by JavaScript
with the help of WebIDL that

206
00:11:59.967 --> 00:12:04.516
tells us how query selector with
the input of div will behave.

207
00:12:04.516 --> 00:12:09.484
It's gonna be populated with
a slew of methods, functions,

208
00:12:09.484 --> 00:12:13.699
posh word for
functions when they're on an object.

209
00:12:13.699 --> 00:12:18.990
All of which will allow us to edit,
change, remove,

210
00:12:18.990 --> 00:12:23.812
update, get information
from this C++ object

211
00:12:23.812 --> 00:12:28.532
in C++ memory, all from within JavaScript.

212
00:12:28.532 --> 00:12:30.240
It's kind of epic.

213
00:12:30.240 --> 00:12:35.100
So we have a whole bunch of them,
but I guess We're gonna use and

214
00:12:35.100 --> 00:12:39.596
therefore will only show for
now the one text content, and

215
00:12:39.596 --> 00:12:45.286
that will be a DOM method that's
actually hitting this element out here,

216
00:12:45.286 --> 00:12:48.264
and that is what is assigned to jsDiv.

217
00:12:48.264 --> 00:12:52.610
And so actually let's draw that on here.

218
00:12:52.610 --> 00:12:57.114
So this is the output of running
document.querySelector called with

219
00:12:57.114 --> 00:12:58.268
the input of div.

220
00:12:58.268 --> 00:13:01.565
The output is an object.

221
00:13:01.565 --> 00:13:04.106
Let's draw it right here again.

222
00:13:04.106 --> 00:13:09.189
An object,
a side.jsdiv that has a slew of useful

223
00:13:09.189 --> 00:13:14.150
methods on it that are actually
going to go out and

224
00:13:14.150 --> 00:13:19.595
access via the hidden link,
they're gonna go out and

225
00:13:19.595 --> 00:13:22.997
access that div element up here.

226
00:13:22.997 --> 00:13:23.842
So, you know what?

227
00:13:23.842 --> 00:13:27.930
Let's just make sure we show that,
even though it's not the prettiest thing.

228
00:13:27.930 --> 00:13:30.491
There it is, to that div element.

229
00:13:30.491 --> 00:13:33.947
Not the prettiest thing.

230
00:13:33.947 --> 00:13:37.655
Okay, beautiful.

231
00:13:37.655 --> 00:13:42.655
By the way,
we'll see in a second what do we think our

232
00:13:42.655 --> 00:13:45.849
jsDiv would show in our console.

233
00:13:45.849 --> 00:13:48.224
If we were to console log, just if,

234
00:13:48.224 --> 00:13:52.832
presumably you'd get this object
with its methods and hidden link.

235
00:13:54.619 --> 00:13:56.966
[COUGH] That'd be nice, wouldn't it?

236
00:13:56.966 --> 00:13:58.351
So what do you think is gonna?

237
00:13:58.351 --> 00:14:02.781
Well, let's at least if it's not that,
because we console log in from JavaScript,

238
00:14:02.781 --> 00:14:04.144
so that would make sense.

239
00:14:04.144 --> 00:14:07.276
But I guess given that
the most interesting

240
00:14:07.276 --> 00:14:10.408
part of this is the link
to the DOM element,

241
00:14:10.408 --> 00:14:15.635
maybe would show something like DOM
element type div in C++, maybe?

242
00:14:15.635 --> 00:14:20.948
What it definitely wouldn't show was
the command that we wrote in HTML

243
00:14:20.948 --> 00:14:26.531
to create a div, that was a one time
like that triangle bracket div thing,

244
00:14:26.531 --> 00:14:28.440
that was like a command.

245
00:14:28.440 --> 00:14:31.639
Now please go and make a div DOM element.

246
00:14:31.639 --> 00:14:36.658
The output of that command in line
two was an object in C++ of type div.

247
00:14:36.658 --> 00:14:41.322
It definitely would not show in
the console when we console log jsDiv,

248
00:14:41.322 --> 00:14:45.985
which is a JavaScript object with
a hidden link to the output of running

249
00:14:45.985 --> 00:14:48.055
triangle div, triangle div.

250
00:14:48.055 --> 00:14:51.607
It definitely wouldn't show triangle div,
triangle div with it, right?

251
00:14:51.607 --> 00:14:58.610
And so what's going to show on our
console, surely it's going to be whatever,

252
00:14:58.610 --> 00:15:03.522
exactly it is the command to
make the DOM element in C++

253
00:15:03.522 --> 00:15:08.433
that showed up on the page,
even though we console log in

254
00:15:08.433 --> 00:15:13.367
the object that has a hidden
access to that DOM element.

255
00:15:13.367 --> 00:15:19.259
Could you imagine a much more
distortionary or miss representative

256
00:15:19.259 --> 00:15:24.648
value or more distortionary
representation in the console?

257
00:15:24.648 --> 00:15:27.585
It's truly kind of wild, right?

258
00:15:27.585 --> 00:15:31.872
I think it'd be like, if you like,
if you were to console log.

259
00:15:31.872 --> 00:15:33.951
That's my console log there.

260
00:15:33.951 --> 00:15:36.814
The call to a function,
let's say at some 1,2,3.

261
00:15:36.814 --> 00:15:39.285
So we had a function like that.

262
00:15:39.285 --> 00:15:43.381
What would that console log, Phil?

263
00:15:43.381 --> 00:15:44.184
&gt;&gt; In reality?

264
00:15:44.184 --> 00:15:45.744
&gt;&gt; In theory, yeah,
what would actually go about?

265
00:15:45.744 --> 00:15:49.497
&gt;&gt; To the console on
the evaluated result of it.

266
00:15:49.497 --> 00:15:51.060
&gt;&gt; Which would be 1, 2 plus 3.

267
00:15:51.060 --> 00:15:52.284
Everyone together?

268
00:15:52.284 --> 00:15:53.161
[SOUND]
&gt;&gt; Yeah, good.

269
00:15:53.161 --> 00:15:54.330
Good.
I don't know what I mean.

270
00:15:54.330 --> 00:15:56.179
Nobody, no exact No, I wasn't.

271
00:15:56.179 --> 00:15:59.986
I was like there's nothing like
asking someone a math question,

272
00:15:59.986 --> 00:16:04.079
which is really just a memory
question of course, right, isn't it?

273
00:16:04.079 --> 00:16:06.664
Think about that, shower thought, so yeah.

274
00:16:06.664 --> 00:16:09.342
So if you cannot log to
the console a command,

275
00:16:09.342 --> 00:16:13.302
it's gotta be a value,
it's gotta be output of doing something.

276
00:16:13.302 --> 00:16:16.007
It's gotta be doing the work,
and then this is a command.

277
00:16:16.007 --> 00:16:17.431
This is a command.

278
00:16:17.431 --> 00:16:22.808
Please go and create a div element,
a DOM element in C++ of type div.

279
00:16:22.808 --> 00:16:25.648
And yet, and
then we then console log the link to

280
00:16:25.648 --> 00:16:29.695
that in it with this object with
a bunch of methods and let us edit it,

281
00:16:29.695 --> 00:16:33.461
but you know what shows up when
we console log it in the console?

282
00:16:33.461 --> 00:16:38.132
Buddy, the original commodity from HTML,
couldn't be more distortionary.

283
00:16:38.132 --> 00:16:42.631
And that's just the designers of
the console trying to help us,

284
00:16:42.631 --> 00:16:46.978
and I would say making quite,
doing a great job, there we go.

