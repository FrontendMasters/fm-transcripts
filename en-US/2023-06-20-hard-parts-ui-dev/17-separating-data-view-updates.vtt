WEBVTT

1
00:00:00.000 --> 00:00:02.305
I guess let's not forget webcore
&gt;&gt; [LAUGH]

2
00:00:02.305 --> 00:00:04.150
&gt;&gt; Gives JavaScript access to the DOM and

3
00:00:04.150 --> 00:00:04.902
pixels still.

4
00:00:04.902 --> 00:00:08.523
But this is gonna allow us,
what have we changed here?

5
00:00:08.523 --> 00:00:12.253
There's our data, one piece of data.

6
00:00:12.253 --> 00:00:16.092
There's our handlers,
handle click and handle input.

7
00:00:16.092 --> 00:00:21.539
Honestly, I'm already feeling
better after my pen debacle

8
00:00:21.539 --> 00:00:27.110
because when I see this actually
it does make me really happy.

9
00:00:27.110 --> 00:00:32.271
Look at that, one function line for
dataToview that can affect our view.

10
00:00:32.271 --> 00:00:36.237
By the way note, everything is
being affected there based on data.

11
00:00:36.237 --> 00:00:41.289
We go into the land of ternaries
particularly because they are a great

12
00:00:41.289 --> 00:00:47.317
way to shorthand, set conditional logic
for if data looks this way display this.

13
00:00:47.317 --> 00:00:51.401
And if we're saying that everything that
user sees must depend on underlying data.

14
00:00:51.401 --> 00:00:55.523
You're gonna imagine we're gonna write
a lot of conditionals if data looks this

15
00:00:55.523 --> 00:00:56.624
way, display this.

16
00:00:56.624 --> 00:00:59.936
If data looks this way, display this.

17
00:00:59.936 --> 00:01:04.426
But, it's all in one place and
then whatever the user does I'm

18
00:01:04.426 --> 00:01:09.354
not gonna have to sort of track back
through which actions they took.

19
00:01:09.354 --> 00:01:15.411
All the user can do, when they click or
start writing is in line 11 and

20
00:01:15.411 --> 00:01:19.117
line 15 you can see it, update the data.

21
00:01:19.117 --> 00:01:23.743
And then run that dataToview
converter function, one place,

22
00:01:23.743 --> 00:01:27.593
one function in which what
the user sees can change.

23
00:01:27.593 --> 00:01:35.065
What the user or
our handlers can do is update data.

24
00:01:35.065 --> 00:01:40.039
It's a restriction that is immensely
popular that limits us to only

25
00:01:40.039 --> 00:01:42.144
changing underlying data.

26
00:01:42.144 --> 00:01:47.061
And then running in this case
a single function dataToview that's

27
00:01:47.061 --> 00:01:50.671
gonna convert that data
into what the user sees.

28
00:01:50.671 --> 00:01:56.371
Such that we have, if you wanted to get
fancy about it set up some data and

29
00:01:56.371 --> 00:02:00.375
then a description of
the view based on that data.

30
00:02:00.375 --> 00:02:06.132
And that description is defined as
described within the dataToview function.

31
00:02:06.132 --> 00:02:10.531
And then whatever the user does must
channel through a change of data.

32
00:02:10.531 --> 00:02:12.874
Is it perfect,
is it the only way to do it?

33
00:02:12.874 --> 00:02:13.813
Not at all.

34
00:02:13.813 --> 00:02:16.173
Is it an incredibly restrictive and

35
00:02:16.173 --> 00:02:19.957
predictable way that ensures
that I have a full history?

36
00:02:19.957 --> 00:02:22.942
I can view this as I have this bug.

37
00:02:22.942 --> 00:02:26.797
I click this thing, I did this I
don't know why this showed up.

38
00:02:26.797 --> 00:02:28.958
And we as engineers are going well,

39
00:02:28.958 --> 00:02:32.207
it's any one of the 500
lines determine our view.

40
00:02:32.207 --> 00:02:36.411
And it's any particular
order of the handlers

41
00:02:36.411 --> 00:02:40.843
executing that determine
what you're seeing?

42
00:02:40.843 --> 00:02:41.858
No.

43
00:02:41.858 --> 00:02:45.924
In fact, we'll be able to see if we were
to have some sort of debugger tracking

44
00:02:45.924 --> 00:02:49.068
the underlying data in our app
as the users live running it.

45
00:02:49.068 --> 00:02:53.774
We will be able to see exactly
the history or we could archive data.

46
00:02:53.774 --> 00:02:57.065
You can see exactly the history
of our data check data.

47
00:02:57.065 --> 00:03:02.577
And then from that exactly know
what the user should and would see.

48
00:03:02.577 --> 00:03:06.792
Because the only way to change what the or
the only way to display for

49
00:03:06.792 --> 00:03:10.947
the user to see anything is via
a call to the dataToview function.

50
00:03:10.947 --> 00:03:12.491
This could even here,

51
00:03:12.491 --> 00:03:16.965
create some interesting situations
where whatever the user does

52
00:03:16.965 --> 00:03:21.860
we're no longer having to reason about
which bit or the view to update.

53
00:03:21.860 --> 00:03:25.047
We're no longer having to go, okay,
do you remember here right before?

54
00:03:25.047 --> 00:03:29.532
We had to go, okay,
if a user starts writing

55
00:03:29.532 --> 00:03:34.399
then change the text content of the div,
okay?

56
00:03:34.399 --> 00:03:39.835
In line handleclick if
the user starts right, click,

57
00:03:39.835 --> 00:03:47.530
sorry change the value of the input from
what's on your mind to empty string.

58
00:03:47.530 --> 00:03:48.838
If the user's not yet

59
00:03:48.838 --> 00:03:53.067
done anything, then set the input's
value to what's on your mind.

60
00:03:53.067 --> 00:03:56.462
And I guess, honestly,
have the div have nothing in it.

61
00:03:56.462 --> 00:03:59.861
We didn't even state that with a div and
said you got nothing in it.

62
00:03:59.861 --> 00:04:04.703
Not setting it's still a decision not
putting any content in the div is

63
00:04:04.703 --> 00:04:08.820
still a decision in implicit one here but
still a decision.

64
00:04:08.820 --> 00:04:12.661
No longer do we have to think about four
or five different places that we could

65
00:04:12.661 --> 00:04:15.673
change under different
conditions what the user's done.

66
00:04:15.673 --> 00:04:20.640
Instead, just use this action update data.

67
00:04:20.640 --> 00:04:23.270
This is a shift in reasoning,
though, a shift in way of thinking.

68
00:04:23.270 --> 00:04:27.261
It means that every single
thing that a user sees,

69
00:04:27.261 --> 00:04:31.361
you need to be able to capture
it in some way in data.

70
00:04:31.361 --> 00:04:33.359
But you know what you always were.

71
00:04:33.359 --> 00:04:39.009
Even though you didn't show that the div
had content here, you were implicitly

72
00:04:39.009 --> 00:04:44.594
before the user clicked or whatever you
were implicitly setting content off.

73
00:04:44.594 --> 00:04:48.931
I guess the div was not set it was sort of
set to undefined or set to empty string.

74
00:04:48.931 --> 00:04:53.207
There's no such thing as any data anything
that's changed on the screen has to have

75
00:04:53.207 --> 00:04:56.461
associated data behind it
otherwise how you're changing it.

76
00:04:56.461 --> 00:05:00.180
So, all we're doing really here is
acknowledging that we're saying that

77
00:05:00.180 --> 00:05:03.205
everything on the screen must be a so
if you want to change it.

78
00:05:03.205 --> 00:05:05.624
Otherwise, fine if you just want
to have it no change it to it.

79
00:05:05.624 --> 00:05:09.649
But anything be changed must have
associated underlying data with it.

80
00:05:09.649 --> 00:05:13.783
Don't bring that data at random in
a handler and then forget about it or

81
00:05:13.783 --> 00:05:15.474
come back to it and or cheat.

82
00:05:15.474 --> 00:05:18.092
No, every piece of data
will be defined and

83
00:05:18.092 --> 00:05:21.947
then at any given set of the data
combination you can see exactly

84
00:05:21.947 --> 00:05:26.335
what we produced via a single pipeline
function called dataToreview.

85
00:05:26.335 --> 00:05:29.911
That will produce the output
conditional on that data,

86
00:05:29.911 --> 00:05:34.258
not conditional on previous changes
to the out previous displays.

87
00:05:34.258 --> 00:05:35.043
And then implicitly,

88
00:05:35.043 --> 00:05:37.737
there's underlying data that you
are changing there without realizing it.

89
00:05:37.737 --> 00:05:39.321
No change the data and

90
00:05:39.321 --> 00:05:43.810
associated view must change
then they can't not be in sync.

91
00:05:43.810 --> 00:05:48.160
We're going to see this makes
things really quite fun and

92
00:05:48.160 --> 00:05:51.883
the way we implement this
is not very efficient.

93
00:05:51.883 --> 00:05:56.674
But this if you look at every time we want
to change what the user sees which is

94
00:05:56.674 --> 00:05:58.209
interaction, right?

95
00:05:58.209 --> 00:06:00.273
We are going to run dataToview.

96
00:06:00.273 --> 00:06:03.069
What if we just had dataToview run like so

97
00:06:03.069 --> 00:06:07.931
often that whenever the user's data
changes the view updatable run?

98
00:06:07.931 --> 00:06:11.261
And that's exactly what we're
going to do right after.

99
00:06:11.261 --> 00:06:16.545
While we would not use this in practice in
the long term, it's completely untenable.

100
00:06:16.545 --> 00:06:21.442
It's already my favorite word,
running dataToview every 15 milliseconds.

101
00:06:21.442 --> 00:06:22.707
But that's fast and

102
00:06:22.707 --> 00:06:27.406
I can see to ensure any data change as
soon as it happens would be displayed.

103
00:06:27.406 --> 00:06:30.221
Another funny consequence
of doing this model and

104
00:06:30.221 --> 00:06:32.036
again this is a move not a truth.

105
00:06:32.036 --> 00:06:36.979
Another funny consequence of this is
that there's gonna be nothing on our

106
00:06:36.979 --> 00:06:41.761
C++ object that is not at least not for
a more than a millisecond or so or

107
00:06:41.761 --> 00:06:43.853
15 milliseconds, I guess.

108
00:06:43.853 --> 00:06:48.203
That is not a consequence of our data.

109
00:06:48.203 --> 00:06:52.019
Even things, by the way,
that we didn't need to update.

110
00:06:52.019 --> 00:06:54.051
When Ian wrote Ian into the field,

111
00:06:54.051 --> 00:06:57.498
into the input field we didn't
need to then re update Ian.

112
00:06:57.498 --> 00:06:59.413
But I don't want to have to reason about,

113
00:06:59.413 --> 00:07:01.897
whether to update Ian in
this particular situation.

114
00:07:01.897 --> 00:07:06.807
I want to keep it everything on that
screen must depend on exactly what is in

115
00:07:06.807 --> 00:07:08.084
JavaScript data.

116
00:07:08.084 --> 00:07:11.422
Meaning if we look at
our little code here,

117
00:07:11.422 --> 00:07:16.535
we're going to update input value
to whatever the user typed in.

118
00:07:16.535 --> 00:07:20.035
In this case Ian, every single time.

119
00:07:20.035 --> 00:07:21.792
So when the user starts writing,

120
00:07:21.792 --> 00:07:24.880
we're going to update the data
in line 15 handleInput.

121
00:07:24.880 --> 00:07:26.807
Put inputs value into post and

122
00:07:26.807 --> 00:07:32.063
then we're going to redisplay it on the
screen because I don't want to work out.

123
00:07:32.063 --> 00:07:36.893
In this condition I only need
to update because I want to

124
00:07:36.893 --> 00:07:41.618
tell you to do on the click
all I actually need to update

125
00:07:41.618 --> 00:07:45.719
is the input value to
remove the default text.

126
00:07:45.719 --> 00:07:49.340
On the typing, all I actually
need to update is the div but

127
00:07:49.340 --> 00:07:51.686
that's all ready a lot of thinking.

128
00:07:51.686 --> 00:07:53.131
You've got a thousand elements and

129
00:07:53.131 --> 00:07:55.740
I've got to work out which ones I
need to update on each handler.

130
00:07:55.740 --> 00:07:59.431
And it depends on the history of
the order of the running of the handlers.

131
00:07:59.431 --> 00:08:04.805
I don't know how we got away so long
without having this sort of restriction.

132
00:08:04.805 --> 00:08:09.971
So instead, even though it's completely
unnecessary to update all the content.

133
00:08:09.971 --> 00:08:14.847
We don't need to update the input
value when Ian's just typed in their

134
00:08:14.847 --> 00:08:16.343
name there already.

135
00:08:16.343 --> 00:08:20.282
We don't need to when the user clicks
we don't actually need to update

136
00:08:20.282 --> 00:08:24.715
the div because the user hasn't written
anything so the div can just be empty.

137
00:08:24.715 --> 00:08:29.017
We do it anyway because
we want one simple rule.

138
00:08:29.017 --> 00:08:32.928
User changes data, data change triggers or

139
00:08:32.928 --> 00:08:37.790
we may remember to run a complete
converter of that data

140
00:08:37.790 --> 00:08:42.033
to all associated
dependent underlying view.

141
00:08:42.033 --> 00:08:47.786
We're getting very close people
to having a full restricted

142
00:08:47.786 --> 00:08:52.526
implementation of user
interface engineering or

143
00:08:52.526 --> 00:08:56.043
the user interface design pattern.

144
00:08:56.043 --> 00:09:00.922
They call it a pattern for structuring,
building out a user interface that

145
00:09:00.922 --> 00:09:04.339
has become the trademark structure for
engineers.

146
00:09:04.339 --> 00:09:08.512
And it's the bit that even if we like to
joke, spin up a virtual DOM or whatever.

147
00:09:08.512 --> 00:09:12.530
It's a bit if you were building
your own sort of small app or

148
00:09:12.530 --> 00:09:17.616
not even small but app without using
a framework it would be surprising for

149
00:09:17.616 --> 00:09:21.798
me if you didn't say let's start
with all possible data that

150
00:09:21.798 --> 00:09:26.085
can determine all possible sets
of views in the application.

151
00:09:26.085 --> 00:09:31.247
And then let's have some sort of,
we'll break them up into functions but

152
00:09:31.247 --> 00:09:34.669
we'll start with state and
data in JavaScript.

153
00:09:34.669 --> 00:09:39.993
And everything the user can see will
be derived from that underlying data.

154
00:09:39.993 --> 00:09:46.326
And then any handling of user's actions
will start by changing the data and

155
00:09:46.326 --> 00:09:50.159
then will convert back
to what the user sees.

156
00:09:50.159 --> 00:09:54.215
Not any action by the user which
is what we used to do by the way,

157
00:09:54.215 --> 00:09:58.750
very standard go and change what
the user sees based off that action.

158
00:09:58.750 --> 00:10:02.268
Any action by the user must
change underlying data and

159
00:10:02.268 --> 00:10:07.599
then a single standardized converter
function which works for all conditions.

160
00:10:07.599 --> 00:10:09.570
We don't even have to think about that,
that's too much to think about.

161
00:10:09.570 --> 00:10:10.789
And to a fault by the way,

162
00:10:10.789 --> 00:10:14.464
that means as you can see we're gonna
be updating content unnecessarily.

163
00:10:14.464 --> 00:10:17.577
But our computers are pretty damn fast
they can definitely take a bit of

164
00:10:17.577 --> 00:10:18.698
unnecessary updating.

165
00:10:18.698 --> 00:10:23.786
Our computer can put up with updating
a few unnecessary pieces of content for

166
00:10:23.786 --> 00:10:27.378
the gains of our time to work
out which bits to update.

167
00:10:27.378 --> 00:10:29.346
Have one description of
what's going to show up and

168
00:10:29.346 --> 00:10:31.694
a bunch of conditional logic for
the different conditions.

169
00:10:31.694 --> 00:10:35.594
And then update the data on the users
action and [SOUND] update the view and

170
00:10:35.594 --> 00:10:37.415
that's what we're going to do.

171
00:10:37.415 --> 00:10:40.992
I will say, don't worry people in
practice at any scale we're gonna need

172
00:10:40.992 --> 00:10:42.791
to be more efficient under the hood.

173
00:10:42.791 --> 00:10:46.013
That's what we'll see when we talk
about performance, diffing algorithms,

174
00:10:46.013 --> 00:10:47.658
state hooks, all these sort of things.

175
00:10:47.658 --> 00:10:51.437
But on a small application, honestly, it's
not entirely clear you would need to spin

176
00:10:51.437 --> 00:10:53.527
up your own implementation
of the virtual DOM.

177
00:10:53.527 --> 00:10:56.952
Probably because all you could
do little sub pieces of it.

178
00:10:56.952 --> 00:11:01.333
You could do some little pieces that
kind of in egregious situations,

179
00:11:01.333 --> 00:11:06.309
make sure you're not repopulating or
break down your functions to your updater

180
00:11:06.309 --> 00:11:09.077
to be only applying to
some bits of the page.

181
00:11:09.077 --> 00:11:11.251
So, you're not going to
reload all the content.

