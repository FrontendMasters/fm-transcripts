WEBVTT

1
00:00:00.110 --> 00:00:02.321
Let's get started,
I'm gonna go person by person.

2
00:00:02.321 --> 00:00:06.279
Paul, gosh, here we go, Paul,
you're up for the challenge.

3
00:00:06.279 --> 00:00:09.177
Here we go, Paul,
line 1 in our JavaScript code.

4
00:00:09.177 --> 00:00:12.046
We've already filled in our
document object, it's there,

5
00:00:12.046 --> 00:00:14.155
it's gonna give us access to this C++ DOM.

6
00:00:14.155 --> 00:00:17.597
Line 1, we are trying to build out,
remind ourselves, people,

7
00:00:17.597 --> 00:00:19.077
here a full user interface.

8
00:00:19.077 --> 00:00:22.134
The ability to display content for
the user, and for

9
00:00:22.134 --> 00:00:24.090
the user to change that content.

10
00:00:24.090 --> 00:00:25.556
Should be trivial.

11
00:00:25.556 --> 00:00:28.692
Turns out in the web browser
it's four different APIs,

12
00:00:28.692 --> 00:00:31.497
it's five different run times,
no, not five obviously.

13
00:00:31.497 --> 00:00:32.427
Paul, go ahead,

14
00:00:32.427 --> 00:00:36.272
what's our piece of data that hopefully
we're gonna end up displaying?

15
00:00:36.272 --> 00:00:38.480
&gt;&gt; Defining a variable.

16
00:00:38.480 --> 00:00:40.082
&gt;&gt; Yep, perfect.

17
00:00:40.082 --> 00:00:42.505
&gt;&gt; And it is an empty string.

18
00:00:42.505 --> 00:00:46.138
&gt;&gt; Yep, and what's the identifier
of the variable, what's its label?

19
00:00:46.138 --> 00:00:50.413
Post, perfect, posh word for label,
people, if you want is identifier.

20
00:00:50.413 --> 00:00:52.225
There it is, post is an empty string.

21
00:00:52.225 --> 00:00:54.100
Next line, left-hand side, Paul.

22
00:00:54.100 --> 00:00:57.446
&gt;&gt; We are, again-
&gt;&gt; Yep.

23
00:00:57.446 --> 00:01:00.275
&gt;&gt; Creating a variable called jsInput.

24
00:01:00.275 --> 00:01:04.437
&gt;&gt; Perfect, I tend to believe in const,
variable being I guess a generic name for

25
00:01:04.437 --> 00:01:04.950
a label.

26
00:01:04.950 --> 00:01:09.662
But it's a label here where what's
assigned to it will be constantly

27
00:01:09.662 --> 00:01:13.821
assigned, we'll not be changing
what's assigned there.

28
00:01:13.821 --> 00:01:17.144
I mean, we can change out its
values if it's an object, but

29
00:01:17.144 --> 00:01:19.751
we will be linked to
this object permanently.

30
00:01:19.751 --> 00:01:23.539
So a const, jsInput, and wow, okay.

31
00:01:23.539 --> 00:01:26.611
Right-hand side here, can you talk
me through what happens, Paul,

32
00:01:26.611 --> 00:01:27.978
on the right-hand side here?

33
00:01:27.978 --> 00:01:30.324
&gt;&gt; I'm not gonna do as well
as it was done before.

34
00:01:30.324 --> 00:01:33.249
[LAUGH]
&gt;&gt; Do not worry.

35
00:01:33.249 --> 00:01:37.194
&gt;&gt; Okay, so
it's going out to the document,

36
00:01:37.194 --> 00:01:41.370
it's running the querySelector function.

37
00:01:41.370 --> 00:01:44.747
&gt;&gt; Right, so yeah, go ahead, keep going.

38
00:01:44.747 --> 00:01:51.043
&gt;&gt; Which is going to
look into the CSS DOM.

39
00:01:51.043 --> 00:01:53.010
&gt;&gt; So into the C++ DOM.

40
00:01:53.010 --> 00:01:53.539
&gt;&gt; It's C++, sorry.

41
00:01:53.539 --> 00:01:54.374
&gt;&gt; Yeah, yeah, don't worry.

42
00:01:54.374 --> 00:02:00.058
&gt;&gt; C++ DOM for an element of type input.

43
00:02:00.058 --> 00:02:01.733
&gt;&gt; Beautiful, does it find it?

44
00:02:01.733 --> 00:02:02.611
&gt;&gt; Yes.
&gt;&gt; It does,

45
00:02:02.611 --> 00:02:04.864
can it bring that whole C++ object back?

46
00:02:04.864 --> 00:02:06.846
&gt;&gt; No.
&gt;&gt; No, so instead, querySelect, so

47
00:02:06.846 --> 00:02:08.016
let's write it out here.

48
00:02:08.016 --> 00:02:14.294
So we get, one, we are going to
look at the link to in document,

49
00:02:14.294 --> 00:02:18.919
which is a link to
the entire list of elements.

50
00:02:18.919 --> 00:02:22.333
So link to the entire
list of elements of DOM.

51
00:02:22.333 --> 00:02:25.731
Two, we're going to query,
we're going to search for

52
00:02:25.731 --> 00:02:30.234
a given selector label by which we
can select something, which is input.

53
00:02:30.234 --> 00:02:33.120
And three, and we find it.

54
00:02:33.120 --> 00:02:37.323
And three, because we cannot pull
that object back in, and by the way,

55
00:02:37.323 --> 00:02:39.507
it looks something like type input.

56
00:02:39.507 --> 00:02:41.742
Cuz we can't pull that object back in,

57
00:02:41.742 --> 00:02:46.563
instead in JavaScript we're going to
produce, I guess, a corresponding object.

58
00:02:46.563 --> 00:02:51.179
It's not the worst way to refer to it,
and it's gonna have

59
00:02:51.179 --> 00:02:55.998
[INAUDIBLE] stored into jsInput
rather than do it here again.

60
00:02:55.998 --> 00:03:02.157
It's gonna have a link,
I'm gonna keep it smaller this time,

61
00:03:02.157 --> 00:03:09.250
a corresponding object with a link
to the underlying input element, and

62
00:03:09.250 --> 00:03:15.553
functions that are going to allow
us to edit that input element.

63
00:03:15.553 --> 00:03:19.429
You can always think of this
as its own execution context.

64
00:03:19.429 --> 00:03:26.236
We then, out of that get that object and
assign it to the global const.

65
00:03:26.236 --> 00:03:28.531
Paul, what's our global
constant it's assigned to?

66
00:03:28.531 --> 00:03:29.193
&gt;&gt; jsInput.

67
00:03:29.193 --> 00:03:30.919
&gt;&gt; jsInput, spot-on, fantastic.

68
00:03:30.919 --> 00:03:38.200
And it has a hidden link to that input,
there it is.

69
00:03:38.200 --> 00:03:41.112
Beautiful, looking nice now, yeah,
that's looking really nice, excellent.

70
00:03:41.112 --> 00:03:47.173
And that has on it automatically
a bunch of useful methods.

71
00:03:47.173 --> 00:03:48.268
There's a lot.

72
00:03:48.268 --> 00:03:49.785
Which ones, Phil,

73
00:03:49.785 --> 00:03:55.153
can we see here that we're actually
gonna use in this particular code?

74
00:03:55.153 --> 00:03:55.856
&gt;&gt; oninput?

75
00:03:55.856 --> 00:03:59.588
&gt;&gt; oninput,
is there another one there as well?

76
00:03:59.588 --> 00:04:03.146
I call them methods,
I guess they're really properties, sorry.

77
00:04:03.146 --> 00:04:03.916
&gt;&gt; Text content?

78
00:04:03.916 --> 00:04:06.042
&gt;&gt; Text content,
that's gonna be on our next one.

79
00:04:06.042 --> 00:04:09.805
Can you see on line 5 there what's-
&gt;&gt; We've got value.

80
00:04:09.805 --> 00:04:10.559
&gt;&gt; Value, perfect.

81
00:04:10.559 --> 00:04:16.908
So we've got value, and
these are both going to give us,

82
00:04:16.908 --> 00:04:23.540
when run, access to go and
set, or get from a C++ object.

83
00:04:23.540 --> 00:04:26.753
That's awesome, I gotta say I
give credit to JavaScript for

84
00:04:26.753 --> 00:04:28.897
giving me this fine-grained control.

85
00:04:28.897 --> 00:04:32.088
Let's do another one without
me going out of shot.

86
00:04:32.088 --> 00:04:33.443
So, well done, Paul.

87
00:04:33.443 --> 00:04:35.184
Too, Ian's already done an amazing job.

88
00:04:35.184 --> 00:04:37.939
So, John, you're up.

89
00:04:37.939 --> 00:04:42.377
Left-hand side of our declaration there,
no declaration,

90
00:04:42.377 --> 00:04:46.829
our assignment there, sorry,
is declaring what constant?

91
00:04:46.829 --> 00:04:47.537
&gt;&gt; jsDiv?

92
00:04:47.537 --> 00:04:52.677
&gt;&gt; jsDiv, and
what are we gonna assign it, John?

93
00:04:52.677 --> 00:04:55.352
&gt;&gt; That we are calling
document querySelect.

94
00:04:55.352 --> 00:04:55.918
&gt;&gt; Yes.

95
00:04:55.918 --> 00:04:57.980
&gt;&gt; Document querySelector method.

96
00:04:57.980 --> 00:05:00.064
&gt;&gt; Yes.
&gt;&gt; Passing the div argument.

97
00:05:00.064 --> 00:05:01.857
&gt;&gt; Well put, yes, perfect.

98
00:05:01.857 --> 00:05:06.474
&gt;&gt; And then that first ghosted slink DOM.

99
00:05:06.474 --> 00:05:08.162
&gt;&gt; Perfect, yes.

100
00:05:08.162 --> 00:05:11.075
&gt;&gt; And then finds the Div [CROSSTALK]
&gt;&gt; Does it find it?

101
00:05:11.075 --> 00:05:12.669
&gt;&gt; Yeah.
&gt;&gt; You bet it does.

102
00:05:12.669 --> 00:05:19.873
And it's querying for Div, it does find
it, we can't pull that C++ object back in.

103
00:05:19.873 --> 00:05:22.374
&gt;&gt; Yeah, so it is creating
a JavaScript object and represents it.

104
00:05:22.374 --> 00:05:24.986
&gt;&gt; Beautiful, that represents it exactly.

105
00:05:24.986 --> 00:05:27.329
And it's specifically got
a hidden link to it, and

106
00:05:27.329 --> 00:05:29.137
a bunch of useful functions to edit it.

107
00:05:29.137 --> 00:05:33.487
Perfect, and then that gets assigned
to what global const, John?

108
00:05:33.487 --> 00:05:34.943
&gt;&gt; [INAUDIBLE] is jsDiv.

109
00:05:34.943 --> 00:05:37.887
&gt;&gt; jsDiv, sweet,
excellent from John, exactly right.

110
00:05:37.887 --> 00:05:43.773
And there it is, our object,
and it's got a link hidden to.

111
00:05:43.773 --> 00:05:48.236
By the way, technically the way that link
is specified in the JavaScript spec,

112
00:05:48.236 --> 00:05:51.644
which is the rules of JavaScript,
it will say host defined.

113
00:05:51.644 --> 00:05:55.892
The host is where is JavaScript running,
which in this case is the web browser.

114
00:05:55.892 --> 00:06:01.787
As a host defined means do not,
JavaScript, expect us to, sorry.

115
00:06:01.787 --> 00:06:06.478
Do not anyone else expect us, JavaScript,
to define where a memory that will be.

116
00:06:06.478 --> 00:06:09.232
Have the host, which is the browser,

117
00:06:09.232 --> 00:06:14.326
give us just a position in memory,
and that's all we're gonna have.

118
00:06:14.326 --> 00:06:20.457
So that's what happens, we have a position
in memory which is the Div element.

119
00:06:20.457 --> 00:06:22.442
There it is, beautiful, perfect.

120
00:06:22.442 --> 00:06:27.858
And then we also get added to this
jsDiv as specified by the DOM API,

121
00:06:27.858 --> 00:06:29.710
written up by WebIDL.

122
00:06:32.550 --> 00:06:36.270
I mean some of these things,
it's more just like it's nice.

123
00:06:36.270 --> 00:06:38.461
The model's more important than the names,
but

124
00:06:38.461 --> 00:06:41.783
it is nice to have those names because
we do wanna be able to go and use them.

125
00:06:41.783 --> 00:06:46.461
And annoy engineers by saying
things that they, no, no,

126
00:06:46.461 --> 00:06:50.661
we wanna be inclusive,
we wanna make sure that all,

127
00:06:50.661 --> 00:06:55.434
all the people interviewing
you are feeling comfortable,

128
00:06:55.434 --> 00:06:58.886
but a little bit intimidated so that they.

129
00:06:58.886 --> 00:07:02.990
Who wouldn't want to have your interviewer
a little bit intimidated, in a good way,

130
00:07:02.990 --> 00:07:03.793
in a polite way.

131
00:07:03.793 --> 00:07:07.834
There it is, text content, I guess I
shouldn't suggest it's a function, but

132
00:07:07.834 --> 00:07:09.355
it is acting like a function.

133
00:07:09.355 --> 00:07:10.815
It's a property, but it's, yeah.

134
00:07:10.815 --> 00:07:17.059
Okay, perfect, we now have two, we heard
representations of DOM elements in C++,

135
00:07:17.059 --> 00:07:22.807
I would call them corresponding objects,
I would call them access to objects.

136
00:07:22.807 --> 00:07:27.620
Okay, all of them are just made up terms,
by the way, don't expect to find those in.

137
00:07:27.620 --> 00:07:29.915
Okay, now what are we defining here?

138
00:07:29.915 --> 00:07:30.437
&gt;&gt; Line 4?

139
00:07:30.437 --> 00:07:32.730
&gt;&gt; Yes, perfect.

140
00:07:32.730 --> 00:07:36.417
&gt;&gt; So we're using the function
keyword to say hey, runtime,

141
00:07:36.417 --> 00:07:40.856
assign in memory, make some space for
something called handle input.

142
00:07:40.856 --> 00:07:43.536
&gt;&gt; Perfect, and assign all of its code.

143
00:07:43.536 --> 00:07:44.507
&gt;&gt; And yeah, it's an object.

144
00:07:44.507 --> 00:07:45.451
&gt;&gt; Function definition, yeah.

145
00:07:45.451 --> 00:07:47.093
[INAUDIBLE] object under the hood, but or

146
00:07:47.093 --> 00:07:49.081
is it the fanciest
definition of function ever?

147
00:07:49.081 --> 00:07:50.066
So well don, Wyatt.

148
00:07:50.066 --> 00:07:52.766
We're defining a function and handleInput,
we've got a really good description of how

149
00:07:52.766 --> 00:07:54.247
it's doing it in memory,
that's really cool.

150
00:07:54.247 --> 00:07:54.774
&gt;&gt; Sorry.

151
00:07:54.774 --> 00:07:56.208
[LAUGH]
&gt;&gt; No, no, it's really good,

152
00:07:56.208 --> 00:07:56.768
it's important.

153
00:07:56.768 --> 00:08:01.287
It's saying free up some space in memory
to save the text of this function,

154
00:08:01.287 --> 00:08:02.157
absolutely.

155
00:08:02.157 --> 00:08:05.335
And/or a parameter list,
a list of potential inputs.

156
00:08:05.335 --> 00:08:08.959
Well, there's none, so yeah, but
it would if there were, yeah, perfect.

157
00:08:08.959 --> 00:08:11.554
Now, because the reason I say it's so

158
00:08:11.554 --> 00:08:14.483
valuable is the next
line is a tricky line.

159
00:08:14.483 --> 00:08:18.378
The next one is a tricky line, so
let me give a verbalization first, or

160
00:08:18.378 --> 00:08:19.969
well, let's say the goal.

161
00:08:19.969 --> 00:08:22.181
Our goal is we have written
a function handleInput,

162
00:08:22.181 --> 00:08:24.909
we do not go inside it right now,
we just grabbed all of its code.

163
00:08:24.909 --> 00:08:26.075
Remember that, people,

164
00:08:26.075 --> 00:08:29.685
no going inside of function definitions
until they're executed invoked code.

165
00:08:29.685 --> 00:08:33.951
We just grab all of its code,
we've saved it into JavaScript memory.

166
00:08:33.951 --> 00:08:35.292
What we wanted to do,

167
00:08:35.292 --> 00:08:40.285
taking a look at it, it's going to update
JavaScript data post with the value.

168
00:08:40.285 --> 00:08:44.864
Potentially I have a feeling, from running
the value getter, in this case it's gonna

169
00:08:44.864 --> 00:08:48.265
behave as a getter, to figure out
whatever the user wrote here.

170
00:08:48.265 --> 00:08:51.846
And it's appeared on the DOM element
that is linked to by jsInput, so

171
00:08:51.846 --> 00:08:53.161
that input DOM element.

172
00:08:53.161 --> 00:08:57.385
We're gonna grab that,
pull it back into JavaScript, and

173
00:08:57.385 --> 00:09:02.514
we're then going to use that line
6 to update jsDiv's text content.

174
00:09:02.514 --> 00:09:03.805
That wasn't good verbalization, right?

175
00:09:03.805 --> 00:09:08.849
To use the setter method property on jsDiv

176
00:09:08.849 --> 00:09:14.335
to update the Div's
text in C++ on the DOM.

177
00:09:14.335 --> 00:09:17.415
We don't know when the user is going to

178
00:09:17.415 --> 00:09:21.084
start writing something
in the input field.

179
00:09:21.084 --> 00:09:23.100
And this is where we want to,

180
00:09:23.100 --> 00:09:27.566
instead of trying to execute
handleInput right now, save it.

181
00:09:27.566 --> 00:09:33.929
Ideally, I guess, a link to it
from the input element on the DOM,

182
00:09:33.929 --> 00:09:41.476
that can then enable it to be passed back,
called back into JavaScript.

183
00:09:41.476 --> 00:09:43.960
If you've watched hard parts,
callbacks and higher order functions,

184
00:09:43.960 --> 00:09:45.966
I always thought it was weird
they were called callbacks.

185
00:09:45.966 --> 00:09:48.454
Because they were never called back,
they were executed right there and

186
00:09:48.454 --> 00:09:49.118
then inside a map.

187
00:09:49.118 --> 00:09:52.334
When you pass a function to map to
execute, it's executing right there and

188
00:09:52.334 --> 00:09:54.084
then inside the higher order function.

189
00:09:54.084 --> 00:09:59.185
A callback to me is something where
it's like we've saved a reference to it,

190
00:09:59.185 --> 00:10:02.951
and at a given moment,
maybe when a user starts writing,

191
00:10:02.951 --> 00:10:07.130
it's called back into JavaScript
to be called in JavaScript.

192
00:10:07.130 --> 00:10:08.999
And that is what we hope will happen here.

193
00:10:08.999 --> 00:10:14.165
Our goal is that this function's code,
that Wyatt so perfectly described

194
00:10:14.165 --> 00:10:19.085
being saved, will be somehow set to,
set's not a bad word for it here.

195
00:10:19.085 --> 00:10:22.712
Set to this input DOM element's handler,

196
00:10:22.712 --> 00:10:26.953
to handle the user inputting
on this DOM element.

197
00:10:26.953 --> 00:10:28.932
Remember these two
are completely bound together.

198
00:10:28.932 --> 00:10:34.019
Any code written here if the user types
anything, the DOM element will know.

199
00:10:34.019 --> 00:10:39.630
And to have that set as its handler that
will then run JavaScript code back here,

200
00:10:39.630 --> 00:10:43.672
or call that function definition
back into JavaScript.

201
00:10:43.672 --> 00:10:47.564
Such that it can execute, such that it can
run, that we could then go grab the data

202
00:10:47.564 --> 00:10:50.560
that's on the DOM at that point
from the user typing, right?

203
00:10:50.560 --> 00:10:54.386
Two things are happening, that the user is
typing, it's triggering a function to call

204
00:10:54.386 --> 00:10:57.659
back into JavaScript, and it's putting
data in the value property here.

205
00:10:57.659 --> 00:11:02.843
Pull that back into JavaScript where you
can then go, yeah, pull that data back in,

206
00:11:02.843 --> 00:11:07.530
assign it to post, and then use that
updated value of post to update our Div.

207
00:11:07.530 --> 00:11:09.967
If only we could do it right there and
then, okay?

208
00:11:09.967 --> 00:11:13.664
[LAUGH] Instead, we're gonna put
that data in there, into that input.

209
00:11:13.664 --> 00:11:15.773
The user is gonna type
into the input field, and

210
00:11:15.773 --> 00:11:18.163
[SOUND] we're gonna have to
bounce back and forwards.

211
00:11:18.163 --> 00:11:22.224
But we have to, right, because it
has to be data that can be changed.

212
00:11:22.224 --> 00:11:26.619
Remember, seeing seven on the screen is
pixels, it's gotta be changed to eight.

213
00:11:26.619 --> 00:11:30.077
That means there's gotta be
underlying corresponding data,

214
00:11:30.077 --> 00:11:33.284
fine, the DOM has that,
not enough, that we can change.

215
00:11:33.284 --> 00:11:35.036
Only JavaScript has that.

216
00:11:35.036 --> 00:11:39.562
Meaning any change we wanna have happen,
which is vital for the user experience,

217
00:11:39.562 --> 00:11:43.770
anything, otherwise there's no change,
it has to happen in JavaScript.

218
00:11:43.770 --> 00:11:46.363
Okay, so let's do that.

219
00:11:46.363 --> 00:11:49.410
Great job,
let's assign that function in line 8.

220
00:11:49.410 --> 00:11:52.494
Give it a go, Alexa, if you don't mind.

221
00:11:52.494 --> 00:11:57.952
&gt;&gt; Okay, so we are gonna find our
jsInput object in our JavaScript memory.

222
00:11:57.952 --> 00:11:59.306
&gt;&gt; Yeah, keep going.

223
00:11:59.306 --> 00:12:04.284
&gt;&gt; [LAUGH] And we are going to set,
well, we're gonna find our

224
00:12:04.284 --> 00:12:08.768
jsInput object and
use our link to that DOM element.

225
00:12:08.768 --> 00:12:11.235
&gt;&gt; Perfect, we find our jsInput object.

226
00:12:11.235 --> 00:12:12.592
Look at that, perfect timing.

227
00:12:12.592 --> 00:12:14.567
Find our jsInput object,

228
00:12:14.567 --> 00:12:19.970
there it is with its link to
the corresponding DOM element input, and?

229
00:12:19.970 --> 00:12:23.874
&gt;&gt; And then use oninput as

230
00:12:23.874 --> 00:12:29.010
a setter to set the handler for

231
00:12:29.010 --> 00:12:33.730
input-
&gt;&gt; Exactly, set the handler for

232
00:12:33.730 --> 00:12:38.257
handling input, exactly-
&gt;&gt; To be our handleInput function

233
00:12:38.257 --> 00:12:39.538
definition in JavaScript.

234
00:12:39.538 --> 00:12:45.003
&gt;&gt; Yeah, beautiful, and
technically it'll be a reference.

235
00:12:45.003 --> 00:12:50.016
Cuz just like we can't pull
a C++ object into JavaScript,

236
00:12:50.016 --> 00:12:55.240
vice versa, we can't attach
a JavaScript function in C++.

237
00:12:55.240 --> 00:12:57.304
Instead, it's a link to
this function back here.

238
00:12:57.304 --> 00:13:03.825
But for our purposes, just visually, we'll
show it right there, beautiful, fantastic.

239
00:13:03.825 --> 00:13:07.973
So we used our setter.

240
00:13:07.973 --> 00:13:09.874
I wanna hear clarifications on this,
people.

241
00:13:09.874 --> 00:13:16.905
Please don't assume that
others are getting this.

242
00:13:16.905 --> 00:13:21.268
I wanna have someone verbalize this for me
in a second, this is a really hard line.

243
00:13:21.268 --> 00:13:25.217
So jsInput is the link to our
object in JavaScript that

244
00:13:25.217 --> 00:13:29.973
we created earlier by querying for
the input element on the DOM.

245
00:13:29.973 --> 00:13:34.388
We got an auto created object with
a hidden link to that DOM element,

246
00:13:34.388 --> 00:13:38.344
we're now using that fact to
run its oninput setter method.

247
00:13:38.344 --> 00:13:41.725
This setter property was added
automatically with the help of

248
00:13:41.725 --> 00:13:45.503
querySelector because it knew we've
got a link to an input element.

249
00:13:45.503 --> 00:13:48.628
So it adds all the appropriate functions.

250
00:13:48.628 --> 00:13:50.965
It's good, it's good, I'll give it that.

251
00:13:50.965 --> 00:13:53.447
We're gonna use that setter to, well, one,

252
00:13:53.447 --> 00:13:58.237
we're gonna check what the linked element
is, it's input, so check that it's input.

253
00:13:58.237 --> 00:14:01.463
And then we're going to, two,

254
00:14:01.463 --> 00:14:06.014
set the handler for handling user's input.

255
00:14:06.014 --> 00:14:09.331
As far as the bad names in programming go,
and

256
00:14:09.331 --> 00:14:14.061
there's a lot of them,
handling input being called a handler?

257
00:14:14.061 --> 00:14:18.462
Handling the user's input,
it's got to be one of the best names,

258
00:14:18.462 --> 00:14:19.885
I would call it that.

259
00:14:19.885 --> 00:14:22.796
That suggests I think I come
up with great names, I don't.

260
00:14:22.796 --> 00:14:28.459
Okay, and we're gonna set its handler
to be the handleInput function code.

261
00:14:28.459 --> 00:14:30.609
Beautiful, and that's it.

262
00:14:30.609 --> 00:14:33.566
We now have a full, I'd actually argue
we now have a full user interface,

263
00:14:33.566 --> 00:14:34.769
we've set it all up, right?

264
00:14:34.769 --> 00:14:42.353
We have content, we have displayed,
I guess, structure boxes for stuff to be.

265
00:14:42.353 --> 00:14:47.285
We have a place for a user to
write something that they are then

266
00:14:47.285 --> 00:14:52.526
going to be able to trigger that
affecting the underlying data.

267
00:14:52.526 --> 00:14:55.579
And that affecting
the underlying data in line 5,

268
00:14:55.579 --> 00:15:00.270
we're gonna grab whatever the value is
that they typed in and store it in post.

269
00:15:00.270 --> 00:15:08.151
Will then be used to affect what they see
by changing Div's content on the page.

270
00:15:08.151 --> 00:15:10.912
We've now set up, time's gonna pass.

271
00:15:10.912 --> 00:15:16.192
And what's funny about this now, and
this is the nature of user interface,

272
00:15:16.192 --> 00:15:20.412
is this system is now gonna get
hit from outside of it, okay?

273
00:15:20.412 --> 00:15:22.652
And that is gonna be
the user writing something.

274
00:15:22.652 --> 00:15:24.959
So we don't have code for
the user writing, so

275
00:15:24.959 --> 00:15:27.574
our execution of JavaScript
is actually finished.

276
00:15:27.574 --> 00:15:32.345
JavaScript will continue to run
because there are functions

277
00:15:32.345 --> 00:15:34.962
that have been set to listen, and

278
00:15:34.962 --> 00:15:40.780
it keeps track that there have been
functions set to handle a user action.

279
00:15:40.780 --> 00:15:45.036
So it won't actually execute JavaScript,
however,

280
00:15:45.036 --> 00:15:49.205
we're done with our
synchronous code that we wrote.

281
00:15:49.205 --> 00:15:54.093
We're gonna now have the user take
action from outside of this system,

282
00:15:54.093 --> 00:15:58.899
and that's gonna then affect the flow
of user data into JavaScript and

283
00:15:58.899 --> 00:16:00.703
back out onto the screen.

