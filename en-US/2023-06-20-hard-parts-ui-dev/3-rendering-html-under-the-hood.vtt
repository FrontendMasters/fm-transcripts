WEBVTT

1
00:00:00.000 --> 00:00:05.478
We just experienced for
the first time people, our DOM, our model,

2
00:00:05.478 --> 00:00:11.145
a list of elements in C++ in just a list,
just like a job list in C++,

3
00:00:11.145 --> 00:00:15.226
that allows us to display
content on that web page.

4
00:00:15.226 --> 00:00:20.861
So here we go, and there's our web page,

5
00:00:20.861 --> 00:00:25.852
and I'm gonna draw in blue our list in

6
00:00:25.852 --> 00:00:30.529
JavaScript, our model in C++.

7
00:00:30.529 --> 00:00:37.073
Soon it will be in JavaScript, hopefully,
and so we'll see, but there it is.

8
00:00:37.073 --> 00:00:39.034
This is going to be our list.

9
00:00:39.034 --> 00:00:43.937
Now technically, we know it's an object
data type, but just for our purposes for

10
00:00:43.937 --> 00:00:46.779
thinking like is an ordered
list down the page,

11
00:00:46.779 --> 00:00:50.211
everything is added to here
will show up on this webpage.

12
00:00:50.211 --> 00:00:55.734
Here's our webpage and we get to write in,

13
00:00:57.382 --> 00:01:02.489
The beautiful language of HTML,
we get to write code

14
00:01:02.489 --> 00:01:09.120
instructions that add things
directly to a C++ list of elements.

15
00:01:09.120 --> 00:01:10.661
That's kind of amazing.

16
00:01:10.661 --> 00:01:14.079
And those are then auto-displayed,

17
00:01:14.079 --> 00:01:18.470
rendered through the layout and
render engine.

18
00:01:18.470 --> 00:01:23.448
The layout part is going to analyze
exactly how to place the elements

19
00:01:23.448 --> 00:01:27.638
that we list out on this
particular web browser's view,

20
00:01:27.638 --> 00:01:32.180
particular web browser's screen,
particular device, and

21
00:01:32.180 --> 00:01:36.753
then the pixels are gonna be
determined by the render engine.

22
00:01:36.753 --> 00:01:41.905
Actually, by the way, side note, the
output of the render engine is gonna be

23
00:01:41.905 --> 00:01:46.979
an image, a bitmap image of that
particular view, that screen pinged out to

24
00:01:46.979 --> 00:01:52.638
the graphics card every, I don't know,
16 milliseconds, 60 times a second.

25
00:01:52.638 --> 00:01:53.956
Isn't that wild?

26
00:01:53.956 --> 00:02:00.476
This altogether is known as WebCore.

27
00:02:00.476 --> 00:02:05.460
This is the core set of technologies
that do the job of storing a list

28
00:02:05.460 --> 00:02:09.376
of elements in C++ to be
loaded on the webpage, and

29
00:02:09.376 --> 00:02:12.944
then converting that
list into actual pixels.

30
00:02:12.944 --> 00:02:18.004
We do not get to write well we'll see
the C++, why don't if I want to I get to

31
00:02:18.004 --> 00:02:23.161
write the beautiful HTML which allows me
to list stuff down the page in order.

32
00:02:23.161 --> 00:02:24.539
Think about how intuitive that is.

33
00:02:24.539 --> 00:02:27.117
I wanna add some text to the page,
I write the text.

34
00:02:27.117 --> 00:02:29.508
I then wanna add a box below it.

35
00:02:29.508 --> 00:02:34.617
I get to write the name of that box
in the line below in my text file.

36
00:02:34.617 --> 00:02:41.419
Don't ever underestimate how thought free
design that is, so let's get into it.

37
00:02:41.419 --> 00:02:45.742
Line one of our HTML people literally, you
think you are coming to the hard parts of

38
00:02:45.742 --> 00:02:48.700
user interface engineering
to walk through some HTML.

39
00:02:48.700 --> 00:02:49.618
Here we go.

40
00:02:49.618 --> 00:02:50.747
Line one, why?

41
00:02:50.747 --> 00:02:52.973
What are we doing in
our first line of HTML?

42
00:02:52.973 --> 00:02:56.679
What are we adding to our
DOM in our first line,

43
00:02:56.679 --> 00:02:58.231
&gt;&gt; Putting up some text.

44
00:02:58.231 --> 00:03:05.771
&gt;&gt; So we've got what's on your mind,
that's gonna add to our list of elements,

45
00:03:05.771 --> 00:03:10.929
the text as our first element,
what's on your mind.

46
00:03:10.929 --> 00:03:11.795
Beautiful, there it is.

47
00:03:11.795 --> 00:03:16.661
And that's then going to
automatically display what,

48
00:03:16.661 --> 00:03:21.215
if I wrote is one more time,
what's on your mind on,

49
00:03:21.215 --> 00:03:24.539
on the page, isn't that beautiful?

50
00:03:24.539 --> 00:03:25.179
There it is.

51
00:03:25.179 --> 00:03:28.945
Our next panelist is going to add what,
Phil?

52
00:03:28.945 --> 00:03:30.258
&gt;&gt; Gonna add an input.

53
00:03:30.258 --> 00:03:31.239
&gt;&gt; Yeah.

54
00:03:31.239 --> 00:03:32.285
Input element.

55
00:03:32.285 --> 00:03:37.075
Yeah, they often call them on the DOM,
the list of C++ elements.

56
00:03:37.075 --> 00:03:39.845
They often call it a node,
node on the DOM, but

57
00:03:39.845 --> 00:03:43.540
it is you can sort of think of
this as an element, an element and

58
00:03:43.540 --> 00:03:46.617
an element on the page,
an element in an HTML code.

59
00:03:46.617 --> 00:03:48.803
They often call these HTML tags.

60
00:03:48.803 --> 00:03:52.250
I would not call these then tags,
these become kind of nodes.

61
00:03:52.250 --> 00:03:55.653
I think the term element works
kind of the whole way across.

62
00:03:55.653 --> 00:03:58.722
Yeah input,
that's gonna add an input element.

63
00:03:58.722 --> 00:04:02.084
I'm actually gonna literally show them
as well as bullet points kinda of

64
00:04:02.084 --> 00:04:02.754
listed down.

65
00:04:02.754 --> 00:04:09.550
And there it is, my input field,
that's not very nicely drawn.

66
00:04:09.550 --> 00:04:15.010
And then, I get to add and
this is where we get to

67
00:04:15.010 --> 00:04:20.905
see our next elegantly
designed feature of HTML.

68
00:04:20.905 --> 00:04:23.989
I love all of these people in this room
have been explicitly, I've been told,

69
00:04:23.989 --> 00:04:25.407
are mid to senior level engineers.

70
00:04:25.407 --> 00:04:32.064
And every one of you is like [LAUGH],
how did we get punished with this?

71
00:04:32.064 --> 00:04:34.772
But everything else we're gonna do,

72
00:04:34.772 --> 00:04:38.672
people in hard part is going
to carry back to this goal.

73
00:04:38.672 --> 00:04:42.881
Everything else we do in UI hardware
is going to try to make it as intuitive

74
00:04:42.881 --> 00:04:43.439
as this.

75
00:04:43.439 --> 00:04:47.872
So, there it is, a button,
and look at this.

76
00:04:47.872 --> 00:04:49.154
If I wanted to have.

77
00:04:49.154 --> 00:04:50.173
So let's produce a button, okay?

78
00:04:50.173 --> 00:04:51.246
That makes sense.

79
00:04:51.246 --> 00:04:57.017
If I wanted to have some text inside
of a button on a screen visually,

80
00:04:57.017 --> 00:05:02.409
that's my output is going to be
a button with text inside of it.

81
00:05:02.409 --> 00:05:03.586
How would I write,

82
00:05:03.586 --> 00:05:08.518
how would I design my programming language
when the primitives designer to make

83
00:05:08.518 --> 00:05:13.173
it as intuitive as possible to have
text inside of something on the screen.

84
00:05:13.173 --> 00:05:17.571
While I have it that I write
the text inside of button, and

85
00:05:17.571 --> 00:05:23.619
there it is we let it know that the button
is ending with a little forward slash,

86
00:05:23.619 --> 00:05:26.297
but I have text inside of a button.

87
00:05:26.297 --> 00:05:31.129
And so on my model of the page,
I will have a button added,

88
00:05:31.129 --> 00:05:36.064
and then almost like a sort of nested,
like a sub element,

89
00:05:36.064 --> 00:05:41.139
our text of publish, and
then that will create, publish.

90
00:05:41.139 --> 00:05:45.695
Or think like a sort of sub element or if
you were thinking about it's in an array,

91
00:05:45.695 --> 00:05:49.585
this is where a list it would be a sub
array within the existing array.

92
00:05:49.585 --> 00:05:54.153
If it were an object, you imagine sort
of be a sub object reference from within

93
00:05:54.153 --> 00:05:58.254
an existing object, and that then
shows up on the page accordingly.

94
00:05:58.254 --> 00:06:02.984
Now, what about on that same note
if he wanted to divide up the page

95
00:06:02.984 --> 00:06:07.801
into some areas to make it easier
to think about its structure, and

96
00:06:07.801 --> 00:06:11.609
not just have one giant list
of elements on the page?

97
00:06:11.609 --> 00:06:17.228
What if we could sort of cluster
elements into subdivisions on the page.

98
00:06:17.228 --> 00:06:21.870
Maybe we can think about this
as a subdivision of the page,

99
00:06:21.870 --> 00:06:24.348
that page has got longer here.

100
00:06:24.348 --> 00:06:26.312
We can think of it as
a subdivision of the page.

101
00:06:26.312 --> 00:06:31.967
Into that,
we could place some other elements.

102
00:06:31.967 --> 00:06:32.708
How would we do that?

103
00:06:32.708 --> 00:06:33.959
Well, just like above.

104
00:06:33.959 --> 00:06:39.083
We get to place inside of other elements,
in this case a division,

105
00:06:39.083 --> 00:06:44.116
physically on our HTML code,
in our text file, three elements,

106
00:06:44.116 --> 00:06:48.982
and they're gonna show up inside
of that division on the page.

107
00:06:48.982 --> 00:06:51.573
Now, we're not gonna be able to see this
division until we put content in it.

108
00:06:51.573 --> 00:06:54.362
It doesn't automatically have any
border or anything like that, so

109
00:06:54.362 --> 00:06:56.685
you won't be able to see it,
but it's there on the page.

110
00:06:56.685 --> 00:07:01.123
And on our list of elements on the page,
it is also there.

111
00:07:01.123 --> 00:07:03.339
So we add our division.

112
00:07:03.339 --> 00:07:04.785
I mean, by the way,

113
00:07:04.785 --> 00:07:09.894
the names of these in the C++
implementation in this list may or may not

114
00:07:09.894 --> 00:07:15.541
correspond directly to the almost commands
to create them from our HTML file.

115
00:07:15.541 --> 00:07:18.169
So well what are we
adding in the next line?

116
00:07:18.169 --> 00:07:21.608
Let's have Matic, what are we adding
in the next line inside our division?

117
00:07:21.608 --> 00:07:22.423
&gt;&gt; Video tag?

118
00:07:22.423 --> 00:07:27.248
&gt;&gt; Video, so well let me think,
what am I adding on the DOM, Matic.

119
00:07:27.248 --> 00:07:28.643
&gt;&gt; Another video.

120
00:07:28.643 --> 00:07:31.577
[CROSSTALK]
&gt;&gt; Element or node, or exactly,

121
00:07:31.577 --> 00:07:36.922
a sort of sub-element,
a video node with what information.

122
00:07:36.922 --> 00:07:40.860
Well, where we'll find it,
which by the looks of it,

123
00:07:40.860 --> 00:07:44.643
is gonna be on our own machine,
on our own computer.

124
00:07:44.643 --> 00:07:49.294
And it looks like it's
gonna be a very interesting

125
00:07:49.294 --> 00:07:52.950
video of carpool karaoke outdoor, and

126
00:07:52.950 --> 00:07:57.948
there it is added to the list
of elements with the URL.

127
00:07:57.948 --> 00:08:01.803
There it is, with the link to it,
sorry, the exact link.

128
00:08:01.803 --> 00:08:05.169
And then we can add, exactly,

129
00:08:05.169 --> 00:08:10.355
we can add some further text in P for
paragraph.

130
00:08:10.355 --> 00:08:13.911
There it is, P paragraph.

131
00:08:13.911 --> 00:08:20.985
Paragraph and that's going to have
some text of firstly love Les Mis.

132
00:08:20.985 --> 00:08:23.444
My goodness, this is incredibly safe.

133
00:08:23.444 --> 00:08:27.208
[LAUGH] And that actually should
be a bit further across and

134
00:08:27.208 --> 00:08:30.003
these are sub-elements of this division.

135
00:08:30.003 --> 00:08:34.143
So these are sub-elements
of the division here, and

136
00:08:34.143 --> 00:08:38.378
we have another paragraph,
and this one says part 7.

137
00:08:38.378 --> 00:08:40.861
And there it is and
then that's the end of our division and

138
00:08:40.861 --> 00:08:42.170
that will show up on our page.

139
00:08:42.170 --> 00:08:47.290
I haven't homemakers have made
this difficult for myself but

140
00:08:47.290 --> 00:08:52.409
there it is and then love Lame Mis and
then heart seven People,

141
00:08:52.409 --> 00:08:55.963
we have never had a more elegant solution.

142
00:08:55.963 --> 00:09:01.543
We have a list of elements in C++ that
we get to add to by just listing out,

143
00:09:01.543 --> 00:09:06.411
in text format, what we want to
have added to that list in C++.

144
00:09:06.411 --> 00:09:09.281
And then rely on built-in technology and

145
00:09:09.281 --> 00:09:14.695
web core that's gonna convert that list
into actual elements on the webpage.

146
00:09:14.695 --> 00:09:16.170
What more could we ask for, people?

147
00:09:16.170 --> 00:09:17.309
We're gonna come to thumbs in a second.

148
00:09:17.309 --> 00:09:18.628
But here it is, solution.

149
00:09:18.628 --> 00:09:23.164
An ordered list technically is
an object of page document,

150
00:09:23.164 --> 00:09:28.711
technical term for the web page,
elements that we can add to using HTML.

151
00:09:28.711 --> 00:09:32.721
The order and structure is set by
where we write each line of HTML, and

152
00:09:32.721 --> 00:09:34.188
that is such a blessing.

153
00:09:34.188 --> 00:09:38.915
The layout engine then works out
the exact structure given the pixels or

154
00:09:38.915 --> 00:09:40.502
given the device type.

155
00:09:40.502 --> 00:09:43.922
And then the render engine
produces a composite image,

156
00:09:43.922 --> 00:09:48.649
joins up all these elements, puts it
into a literally a bitmap, rasterize it

157
00:09:48.649 --> 00:09:53.111
turns it into a list of pixels, and
then pings it out 60 times a second.

158
00:09:53.111 --> 00:09:55.186
That's it for the graphics card people.

159
00:09:55.186 --> 00:09:56.409
That's my beautiful page.

160
00:09:56.409 --> 00:09:58.973
&gt;&gt; [LAUGH]
&gt;&gt; That's it, people.

161
00:09:58.973 --> 00:10:03.692
So we are blessed to have had
this semi-visual code for

162
00:10:03.692 --> 00:10:05.853
structure and content.

163
00:10:05.853 --> 00:10:08.827
Semi visual, I'm calling it.

164
00:10:08.827 --> 00:10:13.005
We have our HTML code, and
it produces a semi visual Sorry,

165
00:10:13.005 --> 00:10:14.938
the HTML is semi-visual.

166
00:10:14.938 --> 00:10:21.301
It produces a model of the page that then
gets displayed on the actual pixels.

167
00:10:21.301 --> 00:10:25.352
We get to create an element,
add its content like the seven,

168
00:10:25.352 --> 00:10:26.869
like the heart seven.

169
00:10:26.869 --> 00:10:28.322
There it is, heart seven.

170
00:10:28.322 --> 00:10:31.236
We get to, what was that goal number one?

171
00:10:31.236 --> 00:10:34.666
Display content, and
we've done it, and it's visual.

172
00:10:34.666 --> 00:10:36.154
We get to create the element.

173
00:10:36.154 --> 00:10:38.312
We get to add its content,

174
00:10:38.312 --> 00:10:43.822
where to add it is determined by
where it is on the HTML file itself.

175
00:10:43.822 --> 00:10:44.506
Look at that.

176
00:10:44.506 --> 00:10:49.559
For right inside of the division is our
video, our paragraph and our paragraph,

177
00:10:49.559 --> 00:10:54.254
and right inside the division is that
video, a paragraph and a paragraph.

178
00:10:54.254 --> 00:10:58.450
We have essentially built
out semi-visual code for

179
00:10:58.450 --> 00:11:01.606
our structure and content of our page.

180
00:11:03.062 --> 00:11:04.471
We're very lucky.

181
00:11:04.471 --> 00:11:05.510
Let's have thumbs.

182
00:11:05.510 --> 00:11:08.654
You lost me, I'm clear,
I have clarifications.

183
00:11:08.654 --> 00:11:10.890
I'd love to see some clarifications.

184
00:11:10.890 --> 00:11:16.062
Ian's thumbs are clear, yeah,
Phil's got a clarification potentially.

185
00:11:16.062 --> 00:11:18.069
And why did you have one as well?

186
00:11:18.069 --> 00:11:19.581
Why don't we start with wise?

187
00:11:19.581 --> 00:11:24.549
&gt;&gt; Yeah, mine was just going back to the
layout engine versus the render engine,

188
00:11:24.549 --> 00:11:28.096
something I've not worked
with too much at that level.

189
00:11:28.096 --> 00:11:32.474
The render engine is what literally,
like, makes the bitmap.

190
00:11:32.474 --> 00:11:33.369
&gt;&gt; Correct?

191
00:11:33.369 --> 00:11:34.166
Yeah, exactly.

192
00:11:34.166 --> 00:11:35.805
The layout engine is going to work out.

193
00:11:35.805 --> 00:11:38.414
How should we position if we
were to shrink the window.

194
00:11:38.414 --> 00:11:42.565
And now, what's on your mind is
going to wrap its text around.

195
00:11:42.565 --> 00:11:46.070
How is that going to affect
the layout of the page?

196
00:11:46.070 --> 00:11:47.802
&gt;&gt; If not topical, totally cool, but

197
00:11:47.802 --> 00:11:51.671
my understanding is the render engine is
like a large chunk of the browser's and

198
00:11:51.671 --> 00:11:55.164
one of the reasons why we have so
few of them is that Accurate.

199
00:11:55.164 --> 00:11:56.877
&gt;&gt; Interesting.

200
00:11:56.877 --> 00:11:59.467
&gt;&gt; That also like
Here Be Dragons code inside of-

201
00:11:59.467 --> 00:12:00.280
&gt;&gt; I mean for sure.

202
00:12:00.280 --> 00:12:04.462
And that is profoundly sophisticated to
deal with that also across all different

203
00:12:04.462 --> 00:12:05.268
device types.

204
00:12:05.268 --> 00:12:08.319
And when you're dealing with an amount

205
00:12:08.319 --> 00:12:13.220
of legacy ways that you can affect
what is displayed, I guess,

206
00:12:13.220 --> 00:12:18.305
paper over cracks historically
that have not all been, all while

207
00:12:18.305 --> 00:12:24.336
you're dealing with legacy browsers
that have not paper over those cracks.

208
00:12:24.336 --> 00:12:27.887
So yeah, the render engines, as you say,

209
00:12:27.887 --> 00:12:32.724
the main render engines are all
spinning off from versions

210
00:12:32.724 --> 00:12:37.479
from like 10 years,
15 years ago, and they are not.

211
00:12:37.479 --> 00:12:39.579
People are not building out these
render engines from scratch.

212
00:12:39.579 --> 00:12:44.931
And really, I think only,
as you say, a small consortium

213
00:12:44.931 --> 00:12:49.859
of producers are actually
creating these browsers.

214
00:12:49.859 --> 00:12:54.556
Because it is such, we essentially
built almost a full operating system

215
00:12:54.556 --> 00:12:58.946
within an application that was
designed to display text and links.

216
00:12:58.946 --> 00:13:01.636
And has to work across all devices.

217
00:13:01.636 --> 00:13:03.347
It's quite remarkable.

218
00:13:03.347 --> 00:13:05.587
Mark, there was a question
from the audience?

219
00:13:05.587 --> 00:13:09.219
&gt;&gt; When you rendered that
text node at the top,

220
00:13:09.219 --> 00:13:14.233
would that actual,
would there be an actual node around it?

221
00:13:14.233 --> 00:13:15.473
&gt;&gt; Yeah, absolutely.

222
00:13:15.473 --> 00:13:18.649
So we'd actually have here,
it would be something,

223
00:13:18.649 --> 00:13:23.659
I should have actually done that, that was
a mistake, it would say something like,

224
00:13:23.659 --> 00:13:27.280
you know, text and
then there would be what's on your mind.

225
00:13:27.280 --> 00:13:32.482
In practice people, exactly how these
are implemented, we can go and look in

226
00:13:32.482 --> 00:13:38.017
the code of the web browser's engine and
to be honest, how do we do this nowadays?

227
00:13:38.017 --> 00:13:39.306
Am I meant to say this?

228
00:13:39.306 --> 00:13:43.785
We go and search in a good old
friend that gives us exact lines

229
00:13:43.785 --> 00:13:46.843
of code from any library or technology.

230
00:13:46.843 --> 00:13:52.450
We do to go and check it every time
otherwise it will tell us completely wrong

231
00:13:52.450 --> 00:13:57.523
thing, but our friend ChatGPT gives
us the exact implementation of

232
00:13:57.523 --> 00:14:03.041
the class that produces a text node in
the DOM in C++ and gives us an object

233
00:14:03.041 --> 00:14:08.928
within the larger object model that can
store text to be displayed on the page.

234
00:14:08.928 --> 00:14:11.692
&gt;&gt; Was the forgiving
nature of HTML by design?

235
00:14:11.692 --> 00:14:18.167
There was valid HTML and invalid HTML at
one point, but the browser never throws.

236
00:14:18.167 --> 00:14:24.937
&gt;&gt; That's an interesting question,
is the forgiving nature of HTML by design.

237
00:14:24.937 --> 00:14:28.845
Such that we don't have any sense,

238
00:14:28.845 --> 00:14:35.239
an error handling process or
an error recording history.

239
00:14:35.239 --> 00:14:41.656
[SOUND] Let me think about it.

240
00:14:41.656 --> 00:14:46.602
For me, it speaks to the fact that HTML,

241
00:14:46.602 --> 00:14:50.530
forgiving is a good word for it,

242
00:14:50.530 --> 00:14:58.112
is incredibly intuitive way of
displaying content on a page.

243
00:14:58.112 --> 00:15:01.523
However, there is probably
a reason why we, well,

244
00:15:01.523 --> 00:15:06.095
we're gonna see there's a very profound
reason why we do not use it for

245
00:15:06.095 --> 00:15:09.527
our many of our,
much of our application building.

246
00:15:09.527 --> 00:15:14.547
And we have to move away from it
to even achieve our solution to of

247
00:15:14.547 --> 00:15:19.856
making interactive applications
that would imply maybe this HTML

248
00:15:19.856 --> 00:15:25.183
that I'm almost saying here is
almost like a runtime, it ain't.

249
00:15:25.183 --> 00:15:28.611
Even though we go through it line
by line and produce elements,

250
00:15:28.611 --> 00:15:31.077
we're gonna see that's a one-time thing.

251
00:15:31.077 --> 00:15:35.934
So yes, you could certainly imagine
error handling at that moment to

252
00:15:35.934 --> 00:15:41.140
identify failures, things that could
not actually be added to the page.

253
00:15:41.140 --> 00:15:47.435
But also at the same time, it's indicative
of the extent to which HTML is a minimal

254
00:15:47.435 --> 00:15:53.288
minimized like a minimal language that
only allows displaying of content.

255
00:15:53.288 --> 00:15:58.376
Sorry only allows adding elements
to a C++ list and that's it.

256
00:15:58.376 --> 00:16:03.701
We're gonna see everything you think that
is HTML when elements get created or

257
00:16:03.701 --> 00:16:05.567
not, none of that is HTML.

258
00:16:05.567 --> 00:16:08.135
HTML is a one time list.

259
00:16:08.135 --> 00:16:11.597
It'd be like that yeah, it's just
literally like, you know, writing a list

260
00:16:11.597 --> 00:16:14.598
of elements and then saying, hey,
super boss, can you add those?

261
00:16:14.598 --> 00:16:18.476
You could totally imagine error handling
stays at that point that says, no,

262
00:16:18.476 --> 00:16:20.863
you can't add that, but
on the flip side also,

263
00:16:20.863 --> 00:16:23.746
it's kind of indicative of
how minimal that process is.

264
00:16:23.746 --> 00:16:28.961
It's here's a list of elements,
add them to the C++ list, that's it.

265
00:16:28.961 --> 00:16:33.875
So in that sense, anything like error
handling, these will all be quite

266
00:16:33.875 --> 00:16:38.556
significant additions,
where would that error even be displayed?

267
00:16:38.556 --> 00:16:41.586
I'm not entirely sure,
there's no like dev tools.

268
00:16:41.586 --> 00:16:46.435
Looking at the HTML execution, maybe
you could imagine like a parser of your

269
00:16:46.435 --> 00:16:49.255
HTML before it's loaded into the browser.

270
00:16:49.255 --> 00:16:51.239
That could spot syntax failings, but

271
00:16:51.239 --> 00:16:54.032
there's not a runtime
that's executing that code.

272
00:16:54.032 --> 00:16:57.489
So I don't even know where
the error would be displayed.

273
00:16:57.489 --> 00:17:02.747
It could be the console, I guess, but
the console is rendering errors as called

274
00:17:02.747 --> 00:17:07.627
from JavaScript, where you are actually
saying please use the console.

275
00:17:07.627 --> 00:17:08.616
So you can see what I mean?

276
00:17:08.616 --> 00:17:12.466
It's like it's not clear to me
where it would even be displayed,

277
00:17:12.466 --> 00:17:15.970
because it is such a minimal but
beautiful for it language.

