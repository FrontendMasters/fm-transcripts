WEBVTT

1
00:00:00.170 --> 00:00:02.144
So we had even more composition,

2
00:00:02.144 --> 00:00:06.796
creating multiple similar virtual DOM
elements, each with different data,

3
00:00:06.796 --> 00:00:11.672
using what we saw there, our post
function, that's our functional component.

4
00:00:11.672 --> 00:00:14.528
Now, all of this, though,

5
00:00:14.528 --> 00:00:19.414
becomes untenable in
terms of our performance.

6
00:00:19.414 --> 00:00:21.592
For each of our changes in data,

7
00:00:21.592 --> 00:00:25.950
while we as engineers get to
reason in an incredibly intuitive,

8
00:00:25.950 --> 00:00:30.726
honestly, actually for UI engineering,
pretty intuitive manner.

9
00:00:30.726 --> 00:00:33.080
Let's go back to this example here,
pretty intuitive manner here.

10
00:00:33.080 --> 00:00:38.164
We get a list of described elements,
line four through six,

11
00:00:38.164 --> 00:00:41.854
which then when the data
is set initially and

12
00:00:41.854 --> 00:00:47.040
ongoing it's changed generates
the latest full description

13
00:00:47.040 --> 00:00:51.146
with that data of what's
to be added to the page.

14
00:00:51.146 --> 00:00:55.805
The DOM, the C++ element that then
shows up on the pixels itself,

15
00:00:55.805 --> 00:01:00.138
it's pretty as far as it goes
intuitive one place create the DOM

16
00:01:00.138 --> 00:01:04.915
that describes what's to be displayed
on the page from JavaScript.

17
00:01:04.915 --> 00:01:07.556
Can you imagine we got
that from JavaScript,

18
00:01:07.556 --> 00:01:12.146
the language that screen please don't
have anything that looks anything like

19
00:01:12.146 --> 00:01:15.710
what's gonna show up on the page,
we really don't want it?

20
00:01:15.710 --> 00:01:18.970
We managed to get that,
however, at a cost.

21
00:01:18.970 --> 00:01:23.528
The cost being,
we are keeping things simple, but

22
00:01:23.528 --> 00:01:29.994
we are replacing all of our DOM elements
in C++ on every change of data,

23
00:01:29.994 --> 00:01:35.250
we are producing a brand-new
description of the page.

24
00:01:35.250 --> 00:01:37.602
And then we are keeping it simple,

25
00:01:37.602 --> 00:01:41.810
converting them each one by
one into actual DOM elements.

26
00:01:41.810 --> 00:01:46.008
But wait We know from our virtual DOM,
our visual DOM,

27
00:01:46.008 --> 00:01:51.210
our JavaScript description with
all the data funneled through it,

28
00:01:51.210 --> 00:01:54.325
we know exactly what is to be displayed.

29
00:01:54.325 --> 00:01:58.528
We also know from the previous data
before we had Li, we had an empty string,

30
00:01:58.528 --> 00:02:01.500
we also know exactly what's
being displayed there.

31
00:02:01.500 --> 00:02:06.509
What if we were to somehow use the actual
differences between our JavaScript

32
00:02:06.509 --> 00:02:11.762
arrays to determine, not just wipe
the whole thing with brand-new elements?

33
00:02:11.762 --> 00:02:15.672
But to write some sort of code
that actually only creates

34
00:02:15.672 --> 00:02:19.340
the elements from scratch
on the first displaying.

35
00:02:19.340 --> 00:02:25.983
And after that, just switch out
the specific content changes as needed.

36
00:02:25.983 --> 00:02:29.150
We don't get to think about that though,
as developers, we just do our same thing.

37
00:02:29.150 --> 00:02:34.273
Describe the relationship one-to-one and
write the handlers that change the data.

38
00:02:34.273 --> 00:02:37.069
And then we had to do it here,
I didn't even write it out right.

39
00:02:37.069 --> 00:02:39.862
I did Pseudocode because it's
just the same thing without,

40
00:02:39.862 --> 00:02:42.943
well it's actually just
a representation of what's in our VDOM.

41
00:02:42.943 --> 00:02:45.352
Just the same thing
wouldn't even be enough,

42
00:02:45.352 --> 00:02:48.701
it's just a representation of
what's in our JavaScript VDOM.

43
00:02:48.701 --> 00:02:51.663
So we are going to be able to
fix our performance issues.

44
00:02:51.663 --> 00:02:55.478
We love the visual virtual DOM for
its semi,

45
00:02:55.478 --> 00:03:00.646
semi visual coding,
however performance is a nightmare.

46
00:03:00.646 --> 00:03:04.495
It always reminds me of a Michael McIntyre
skit that means nothing to anybody in

47
00:03:04.495 --> 00:03:05.940
America.

48
00:03:05.940 --> 00:03:11.198
We need some improvements, we're
updating our DOM every 15 milliseconds,

49
00:03:11.198 --> 00:03:14.740
handlers, CSS animations,
and smooth scrolling.

50
00:03:14.740 --> 00:03:16.260
So we've got two problems actually here.

51
00:03:16.260 --> 00:03:20.682
We're also doing our update DOM that is
creating that bond between the data and

52
00:03:20.682 --> 00:03:25.109
whatever's that's displayed without,
I'm gonna think about running it.

53
00:03:25.109 --> 00:03:27.487
Instead, it just runs whenever the date,

54
00:03:27.487 --> 00:03:32.259
well not whenever the data changes just
whenever, at all times pretty inefficient.

55
00:03:32.259 --> 00:03:37.625
Can we simulate the auto updating view
from data change with a state hook?

56
00:03:37.625 --> 00:03:39.112
I hope so, and then finally,

57
00:03:39.112 --> 00:03:42.094
only to have our DOM elements
need recreated from scratch.

58
00:03:42.094 --> 00:03:46.913
We can compare with dishing out
an archived version of a virtual DOM and

59
00:03:46.913 --> 00:03:52.568
work out what changes to actually make
using an algorithm, which is clever code.

60
00:03:52.568 --> 00:03:56.754
It's not gonna be too clever,
but clever enough, so here we go,

61
00:03:56.754 --> 00:04:00.044
automatic update on data
change without looping.

62
00:04:00.044 --> 00:04:04.836
So we're gonna use our existing diagram
here just to make some tweaks, so

63
00:04:04.836 --> 00:04:07.464
rather than look down the line 29 there

64
00:04:07.464 --> 00:04:11.585
rather than having update DOM
run on repeat with set interval.

65
00:04:12.652 --> 00:04:18.443
And we could perhaps have update DOM run
recursively using request animation frame,

66
00:04:18.443 --> 00:04:20.292
we'll see in a second.

67
00:04:20.292 --> 00:04:24.956
But rather than doing that,
we are gonna have

68
00:04:24.956 --> 00:04:29.384
update DOM only run when our data changes.

69
00:04:29.384 --> 00:04:34.379
I don't wanna be back in the land where
I'm not guaranteed that what's in

70
00:04:34.379 --> 00:04:39.052
here is directly represented on
the page because I changed my data and

71
00:04:39.052 --> 00:04:40.839
forgot to run update DOM.

72
00:04:40.839 --> 00:04:43.080
I know that sounds obvious,
like I should remember.

73
00:04:43.080 --> 00:04:47.330
I don't know that date is changing
in many different places and

74
00:04:47.330 --> 00:04:50.064
I got like every single time update DOM?

75
00:04:50.064 --> 00:04:54.376
There must be a better way,
there must be a way

76
00:04:54.376 --> 00:04:58.916
in which I could wrap up
my changing of my data and

77
00:04:58.916 --> 00:05:03.357
a rerun of Update DOM
into one composite task.

78
00:05:03.357 --> 00:05:07.690
How do I wrap up two lines of code
into a composite task, Alexa?

79
00:05:07.690 --> 00:05:08.594
&gt;&gt; With a function.

80
00:05:08.594 --> 00:05:10.279
&gt;&gt; With a function, exactly right.

81
00:05:10.279 --> 00:05:15.095
I'm gonna simulate, give the impression
that all I'm doing in this

82
00:05:15.095 --> 00:05:20.090
case when I run my handle function and
update my name from empty string.

83
00:05:20.090 --> 00:05:25.130
In this case,
it was via the youth input to Lee,

84
00:05:25.130 --> 00:05:32.201
that I am gonna do that through
a function that will update my name.

85
00:05:32.201 --> 00:05:35.632
And when I call that function update name,
I'm gonna pass in,

86
00:05:35.632 --> 00:05:38.960
in this case it would be Lee,
not assign it directly to name.

87
00:05:38.960 --> 00:05:43.881
But pass it in,
where I will then assign Lee

88
00:05:43.881 --> 00:05:48.266
to name and then run update DOM again.

89
00:05:48.266 --> 00:05:52.852
So now update DOM is whenever my data
is changing is going to run, but

90
00:05:52.852 --> 00:05:54.949
I'm not manually doing that.

91
00:05:54.949 --> 00:05:59.721
I'm just restricting developers on
my team to only be allowed to change

92
00:05:59.721 --> 00:06:04.661
state change data in JavaScript through
a function that updates my data.

93
00:06:04.661 --> 00:06:11.895
And also low-key behind-the-scenes
updates, runs my update DOM function.

94
00:06:11.895 --> 00:06:16.397
Let's generalize that a little
bit here with this code, and

95
00:06:16.397 --> 00:06:21.000
we're gonna generalize that to work for
any data in a second.

96
00:06:21.000 --> 00:06:23.894
But yeah, automatic update on
data change without looping.

97
00:06:23.894 --> 00:06:28.201
Instead of directly updating name, we
can run a function update name to do so.

98
00:06:28.201 --> 00:06:31.459
And of course it's low-key
running update DOM for

99
00:06:31.459 --> 00:06:36.547
us behind the scenes because we wrapped
two lines of code in one with a function.

100
00:06:36.547 --> 00:06:41.486
As long as we restrict our team, and we
would do that via obviously with some sort

101
00:06:41.486 --> 00:06:44.436
of closure that locks down
access to our data and

102
00:06:44.436 --> 00:06:48.080
ensures you can only change
it through a function.

103
00:06:48.080 --> 00:06:51.703
But that function is also low-key
running the update DOM function,

104
00:06:51.703 --> 00:06:54.022
which we've been running automatically.

105
00:06:54.022 --> 00:06:59.180
Ensuring any change of data automatically
populates a jobs representation.

106
00:06:59.180 --> 00:07:01.750
We don't think about when it changes,
it just changes.

107
00:07:01.750 --> 00:07:04.975
It's happening so often it's been
repopulated every time and also,

108
00:07:04.975 --> 00:07:08.365
most of the time when data hasn't changed,
that's a ridiculous thing,

109
00:07:08.365 --> 00:07:09.744
that was super inefficient.

110
00:07:09.744 --> 00:07:15.191
We were recreating with every
single time unnecessarily, right?

111
00:07:15.191 --> 00:07:20.302
We do not need to run update DOM 60
times a second, where the user didn't

112
00:07:20.302 --> 00:07:24.846
even change the data,
[LAUGH] that was pretty spurious behavior.

113
00:07:24.846 --> 00:07:28.423
And so instead we're gonna bring
back only running update DOM

114
00:07:28.423 --> 00:07:31.451
that creates the JavaScript
representation of it,

115
00:07:31.451 --> 00:07:34.505
that creates the underlying
DOM elements in C++.

116
00:07:34.505 --> 00:07:36.292
Only do that when data actually changes,

117
00:07:36.292 --> 00:07:40.142
but I don't wanna be thinking about, data
change, make sure I re-update my page.

118
00:07:40.142 --> 00:07:44.326
No, that's back to the old, it's not
terrible, it's just it's not ideal,

119
00:07:44.326 --> 00:07:46.025
I'd rather not have to do that.

120
00:07:46.025 --> 00:07:47.272
How can I get around that?

121
00:07:47.272 --> 00:07:51.097
By creating a function that
both updates my data, and

122
00:07:51.097 --> 00:07:55.772
low-key also reruns my update DOM
function, that does the job of

123
00:07:55.772 --> 00:08:01.049
converting that data into the jobs
representation with create DOM call.

124
00:08:01.049 --> 00:08:04.889
And then maps over creates all the
associated elements in the corresponding

125
00:08:04.889 --> 00:08:06.030
items in the real DOM.

126
00:08:06.030 --> 00:08:10.300
And then we get our access to
objects that allow us to append or

127
00:08:10.300 --> 00:08:15.941
replace the existing elements with those
new elements and they get displayed.

