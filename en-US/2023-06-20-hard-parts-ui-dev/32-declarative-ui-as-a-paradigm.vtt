WEBVTT

1
00:00:00.000 --> 00:00:03.106
Declarative UI as a programming paradigm.

2
00:00:03.106 --> 00:00:07.290
Goal, see a JavaScript nested,
this is where it gets really fun,

3
00:00:07.290 --> 00:00:10.579
we can have elements in here
in the content section,

4
00:00:10.579 --> 00:00:13.514
we could totally put
sub-elements in there.

5
00:00:13.514 --> 00:00:17.022
That would then show up,
hopefully, if we wrote the code,

6
00:00:17.022 --> 00:00:21.020
as sub-elements nested on the DOM
tree on the list of elements, and

7
00:00:21.020 --> 00:00:25.951
therefore it'd be inside, and that's where
we can expand how this is gonna work.

8
00:00:25.951 --> 00:00:30.841
And we will go see a JS nested
list representation of your actual

9
00:00:30.841 --> 00:00:35.652
DOM elements and content so
you can get semi-visual coding.

10
00:00:35.652 --> 00:00:38.238
It's very contemporary emoji choice there,
right?

11
00:00:38.238 --> 00:00:42.658
Via nested objects or arrays of info,
as we default to in UI Hobarts,

12
00:00:42.658 --> 00:00:46.872
all functional components,
which is what we're gonna come to.

13
00:00:46.872 --> 00:00:52.322
We can create these via functions
that produce them as the output.

14
00:00:52.322 --> 00:00:56.654
For it to be guaranteed accurate and
not out of sync,

15
00:00:56.654 --> 00:01:01.684
we need the data in JavaScript
to be the only source of truth.

16
00:01:01.684 --> 00:01:05.617
That's gonna allow us to have a function
that runs through and produces

17
00:01:05.617 --> 00:01:10.532
a representation in JavaScript, first, of
what's gonna show up with the actual data,

18
00:01:10.532 --> 00:01:14.791
and know that there's nothing else that
could be showing up on here that is not

19
00:01:14.791 --> 00:01:17.109
from this source of truth in JavaScript.

20
00:01:17.109 --> 00:01:21.171
If you set up one way data binding,
that is a user can only affect data via

21
00:01:21.171 --> 00:01:25.236
the handler, and then run the update
all the way through, otherwise,

22
00:01:25.236 --> 00:01:27.579
it's not guaranteed to be reflective.

23
00:01:27.579 --> 00:01:31.510
You could have things here that maybe
have come through our handler, or

24
00:01:31.510 --> 00:01:33.474
things here that are from the user,

25
00:01:33.474 --> 00:01:36.829
where in fact we want any user
action just to be a submission.

26
00:01:36.829 --> 00:01:39.140
Imagine if the user wrote y here and

27
00:01:39.140 --> 00:01:42.737
we were not filling that
through back to JavaScript?

28
00:01:42.737 --> 00:01:46.717
Then this VDOM here would
not have our latest

29
00:01:46.717 --> 00:01:50.169
update submission from the user of y.

30
00:01:50.169 --> 00:01:55.503
Instead, we would just be left with
the text still being empty because we

31
00:01:55.503 --> 00:02:01.115
have everything on the page being
dependent on what's in JavaScript data.

32
00:02:01.115 --> 00:02:04.671
We're able to describe it in
full in JavaScript as a kind

33
00:02:04.671 --> 00:02:09.069
of intermediate step before it then
gets rendered on the DOM itself.

34
00:02:09.069 --> 00:02:13.042
Yeah, so
we literally take any change to the DOM,

35
00:02:13.042 --> 00:02:16.269
we've said this multiple times today.

36
00:02:16.269 --> 00:02:18.963
I just literally to wanna, honestly, these
notes are as much for me as anybody else.

37
00:02:18.963 --> 00:02:22.264
So we literally take any
change to the DOM, e.g,

38
00:02:22.264 --> 00:02:27.310
user action typing in letters in an input
field and immediately replace it.

39
00:02:27.310 --> 00:02:29.133
Of course, as we said earlier,

40
00:02:29.133 --> 00:02:33.118
we can handle this slightly differently
if we wanted to embrace this,

41
00:02:33.118 --> 00:02:37.324
immediately replace it by sending
the info to a data store in JavaScript.

42
00:02:37.324 --> 00:02:42.970
Let's even actually map
this out with some letter.

43
00:02:42.970 --> 00:02:49.183
So we have tended to here, and
then the data flows in the JS DOM or

44
00:02:49.183 --> 00:02:53.658
visual DOM,
convert that to the actual DOM.

45
00:02:53.658 --> 00:02:56.914
That's what's happening here,
where we create our access to objects, and

46
00:02:56.914 --> 00:02:58.075
it comes to the actual DOM.

47
00:02:58.075 --> 00:03:03.639
We have semi-visual coding, our
JavaScript DOM or visual DOM content and

48
00:03:03.639 --> 00:03:08.951
positioning on the page in JavaScript
is reflected in our actual view.

49
00:03:08.951 --> 00:03:11.171
We declare, A,
what the page structure we want, and B,

50
00:03:11.171 --> 00:03:14.108
how you want its content to depend on
data, and then it appears on the page.

51
00:03:14.108 --> 00:03:19.839
Even an empty form field is a propagation
of data, or empty string in this case.

52
00:03:19.839 --> 00:03:23.316
So our action from the user comes through,

53
00:03:23.316 --> 00:03:29.313
changes our data via our handler, and
then we run our converter through.

54
00:03:29.313 --> 00:03:34.315
But as we heard yesterday from Magic, yes,
although the data does flow this way,

55
00:03:34.315 --> 00:03:39.102
think of this as being a pinpoint
submission of, precisely, please take this

56
00:03:39.102 --> 00:03:43.763
new information and determine if you
want to update the data in JavaScript.

57
00:03:43.763 --> 00:03:46.245
We get to define that in our handler.

58
00:03:46.245 --> 00:03:50.956
Do not get involved in the automatic
re-propagation of that to the page

59
00:03:50.956 --> 00:03:54.727
based on the permanent
description of that one-to-one

60
00:03:54.727 --> 00:03:57.962
relationship between that data and
what we see.

