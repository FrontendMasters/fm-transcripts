WEBVTT

1
00:00:00.000 --> 00:00:02.945
But now what it also means is, okay,

2
00:00:02.945 --> 00:00:08.650
added benefit that we can declare
our dataToView relationships once,

3
00:00:08.650 --> 00:00:12.656
and when the data changes,
the view will update.

4
00:00:12.656 --> 00:00:15.772
Well, that means,
which is important, right,

5
00:00:15.772 --> 00:00:20.597
because remember our goal of UI,
what'd I say, display content to users and

6
00:00:20.597 --> 00:00:23.510
for the user to be able
to change that content.

7
00:00:23.510 --> 00:00:28.360
And I love the ambiguity of that because
it reminds us that that content is

8
00:00:28.360 --> 00:00:32.511
what they see and should be
the underlying state of the world.

9
00:00:32.511 --> 00:00:35.759
Because that's exactly what it's like in
the real world, when I change what I see,

10
00:00:35.759 --> 00:00:38.428
I'm changing the underlying state
of the world, not in a computer.

11
00:00:38.428 --> 00:00:43.878
But if they were to become a bit closer,
because we've described

12
00:00:43.878 --> 00:00:48.830
that relationship one time and
it's used again and again,

13
00:00:48.830 --> 00:00:53.898
we're getting a lot closer to
content being a united thing.

14
00:00:53.898 --> 00:00:58.352
That the underlying data and
what you see, they are not separated.

15
00:00:58.352 --> 00:01:01.612
Because we've described how the what
you see is dependent on data, and

16
00:01:01.612 --> 00:01:03.528
it's only one place that's happening.

17
00:01:03.528 --> 00:01:10.196
So they've kind of become tied, they've
kind of become bound to each other.

18
00:01:10.196 --> 00:01:15.128
That can allow us to even trick
ourselves a little bit visually to think

19
00:01:15.128 --> 00:01:18.234
that we've actually bound them together.

20
00:01:18.234 --> 00:01:19.257
So let's see that in a second.

21
00:01:19.257 --> 00:01:23.322
Remember our goals of UI, display content
online data as view, if that's the case,

22
00:01:23.322 --> 00:01:27.000
make sure that the change of data just
propagates, just appears in the view.

23
00:01:27.000 --> 00:01:31.227
Why would you want them to be separate if
you're saying you want to enable the user

24
00:01:31.227 --> 00:01:33.278
to change what the content is they see,

25
00:01:33.278 --> 00:01:35.850
implying changing
the underlying data as well?

26
00:01:35.850 --> 00:01:36.818
Make them the same thing.

27
00:01:36.818 --> 00:01:40.412
Things like web components are all about
trying to make them the same thing.

28
00:01:40.412 --> 00:01:43.988
Okay, great, well, we're gonna
see we've almost done that here.

29
00:01:43.988 --> 00:01:50.229
Enable the user to change the content,
both the data and what they see.

30
00:01:50.229 --> 00:01:52.899
At least I'm predictable,
both the underlying data and

31
00:01:52.899 --> 00:01:54.186
corresponding view of it.

32
00:01:54.186 --> 00:01:57.300
We need to run the dataToView
converge on repeat.

33
00:01:57.300 --> 00:02:00.205
But if we do that,
we essentially automate the process.

34
00:02:00.205 --> 00:02:02.359
Here it is, so what have we changed here?

35
00:02:02.359 --> 00:02:07.987
The only thing we have changed is we run
data review three different times here,

36
00:02:07.987 --> 00:02:12.943
right, in response to initial no
user reaction, which is the first,

37
00:02:12.943 --> 00:02:19.003
I guess before the user takes action,
then when user changes data, what sorry.

38
00:02:19.003 --> 00:02:22.281
So even user action that's causing
it's whenever data changes and

39
00:02:22.281 --> 00:02:24.474
user action is what
causes data change here.

40
00:02:24.474 --> 00:02:25.330
It could be a server call.

41
00:02:25.330 --> 00:02:26.244
It could be something else.

42
00:02:26.244 --> 00:02:27.040
And of course,

43
00:02:27.040 --> 00:02:31.096
it's going from the app not being on to
being on that is data changing, right?

44
00:02:31.096 --> 00:02:33.234
That's data becoming undefined to begin.

45
00:02:33.234 --> 00:02:38.808
So whenever data changes, dataToView must
run, including on initial data creation.

46
00:02:38.808 --> 00:02:43.479
When we do that, the view updates two or
three times here.

47
00:02:43.479 --> 00:02:48.290
Well, what if we just had it running so
often, that's a really slick move,

48
00:02:48.290 --> 00:02:52.199
people, had it running so
often, every 15 milliseconds,

49
00:02:52.199 --> 00:02:56.806
that we didn't even need to rerun it
in response after our chain of data.

50
00:02:56.806 --> 00:03:00.051
Now in practice, I wanna make it
really clear, we couldn't do this,

51
00:03:00.051 --> 00:03:03.846
it's gonna block, by the way, even some
of those handlers running, we need to,

52
00:03:03.846 --> 00:03:07.156
sometimes it's only gonna block CS
animations and smooth scrolling.

53
00:03:07.156 --> 00:03:10.906
All of which share a couple of
processes in the web browser,

54
00:03:10.906 --> 00:03:14.435
completing tasks, but
share some of those processes.

55
00:03:14.435 --> 00:03:19.170
We don't wanna have that blocked by
a function re-render our entire page every

56
00:03:19.170 --> 00:03:21.725
15 milliseconds, 60 times a second.

57
00:03:21.725 --> 00:03:24.504
However, and we'll find a way
around that with state hooks,

58
00:03:24.504 --> 00:03:27.713
they're gonna give us the impression
we're doing it automatically,

59
00:03:27.713 --> 00:03:30.294
running that update function
every 50 milliseconds.

60
00:03:30.294 --> 00:03:35.599
Actually, it means we'll only run it when
we change data, which is what we do here,

61
00:03:35.599 --> 00:03:39.891
but the problem is I don't have to
remember to run that data review.

62
00:03:39.891 --> 00:03:41.251
I'm gonna change that data all over.

63
00:03:41.251 --> 00:03:43.456
I don't have to run
data review every time.

64
00:03:43.456 --> 00:03:48.751
What if just for a hack way for now, this
is a hot way just to get the fun of it.

65
00:03:48.751 --> 00:03:53.208
We had it run so often that we didn't
actually need in, let's do it in green,

66
00:03:53.208 --> 00:03:58.144
I think, we didn't actually need to run it
in here, we didn't actually need to run it

67
00:03:58.144 --> 00:04:02.210
here, we didn't actually need to
run it here because it's running.

68
00:04:02.210 --> 00:04:04.949
Basically, we finished running
change the data it would run here,

69
00:04:04.949 --> 00:04:07.169
just because it's running
every 15 milliseconds.

70
00:04:07.169 --> 00:04:09.587
Change the data, it would run here.

71
00:04:09.587 --> 00:04:12.510
This would run as you
know 15 milliseconds in.

72
00:04:12.510 --> 00:04:17.342
Here, it would run basically immediately
afterwards because set interval will take

73
00:04:17.342 --> 00:04:20.160
in a function and
run it every 15 milliseconds,

74
00:04:20.160 --> 00:04:24.721
meaning it will take in a function,
in this case, the dataToView function, and

75
00:04:24.721 --> 00:04:28.037
store it in another feature
of the browser, it's timer.

76
00:04:28.037 --> 00:04:32.580
And that is accessible by set interval and
set timeout.

77
00:04:32.580 --> 00:04:35.573
Both of which allow us to pass
it a function definition.

78
00:04:35.573 --> 00:04:41.059
In this case,
it's going to be dataToView our converter,

79
00:04:41.059 --> 00:04:46.116
and say,
run it every 15 milliseconds back in here.

80
00:04:46.116 --> 00:04:50.364
Therefore, it's obviously a horribly
brute force looping to make sure whenever

81
00:04:50.364 --> 00:04:52.651
the data changes, but it's kinda badass.

82
00:04:52.651 --> 00:04:58.106
Look at that, handleclick, change some
data, handleInput, change of data.

83
00:04:58.106 --> 00:04:59.317
Don't ask anything else.

84
00:04:59.317 --> 00:05:03.645
Just know that dataToView is
running on repeat right after

85
00:05:03.645 --> 00:05:08.075
a hundreds of times before you can even,
whatever, fine.

86
00:05:08.075 --> 00:05:15.177
However, it has now made our view
directly depend on our data,

87
00:05:15.177 --> 00:05:19.337
our view and data have become bound.

88
00:05:19.337 --> 00:05:23.659
Which given, we wanna change data and view
are the two parts of content that user

89
00:05:23.659 --> 00:05:27.078
sees there's underlying data and
the pixels displayed of it,

90
00:05:27.078 --> 00:05:31.291
putting them in one bucket so that they
are intrinsically tied, kinda cool.

91
00:05:31.291 --> 00:05:35.563
And then only allow the user to change
the data that generates that view.

92
00:05:35.563 --> 00:05:40.165
Don't worry people, we're going to move
away from a 50-millisecond repeat loop on

93
00:05:40.165 --> 00:05:42.351
a function that renders the entire page.

94
00:05:42.351 --> 00:05:48.255
However, for purposes of pedagogy,
very good excuse for

95
00:05:48.255 --> 00:05:53.800
everything, browser implementation and
pedagogy,

96
00:05:53.800 --> 00:05:58.619
which we'll see it here
allows us to make our few

97
00:05:58.619 --> 00:06:03.577
depend propagate from
our data automatically.

98
00:06:03.577 --> 00:06:07.011
We've added predictability to our data and
view flow.

99
00:06:07.011 --> 00:06:10.401
Thousands of ways for
users to interact in a modern app.

100
00:06:10.401 --> 00:06:15.761
Every piece of view, I guess every piece
of content, I quite like to use the term

101
00:06:15.761 --> 00:06:21.121
content cuz it implies the view and the
data, on elemental page can be clicked,

102
00:06:21.121 --> 00:06:26.727
typed, moused over, all of which need to
change content, data, and what we see.

103
00:06:26.727 --> 00:06:31.749
I would say exponential complexity,
especially once you can have a flow of,

104
00:06:31.749 --> 00:06:36.460
I need to reason about what was it like
when the user clicked as opposed to I

105
00:06:36.460 --> 00:06:40.343
know what it was like,
it's whatever the data generated.

106
00:06:40.343 --> 00:06:41.728
I don't even care.

107
00:06:41.728 --> 00:06:43.175
I just say I don't even care.

108
00:06:43.175 --> 00:06:47.503
I've written my code to well,
maybe I care somewhat,

109
00:06:47.503 --> 00:06:50.997
I wrote my code to depend
only on input data.

110
00:06:50.997 --> 00:06:52.801
Sorry, again, input not use word there.

111
00:06:52.801 --> 00:06:54.822
Depend on our data in JavaScript,

112
00:06:54.822 --> 00:06:58.385
there isn't sort of an input
to our dataToView conversion.

113
00:06:58.385 --> 00:07:00.354
And by the way, in all of these things,

114
00:07:00.354 --> 00:07:04.299
we then have edge cases where we introduce
workarounds that handle particular

115
00:07:04.299 --> 00:07:06.947
situations where we can't
get it as simple as that.

116
00:07:06.947 --> 00:07:10.859
We do care about the previous behavior,
we do need to track change over time and

117
00:07:10.859 --> 00:07:11.825
things like that.

118
00:07:11.825 --> 00:07:15.413
But as a starting point mental model or
design pattern, sorry,

119
00:07:15.413 --> 00:07:17.080
we have huge value from this.

120
00:07:17.080 --> 00:07:20.945
We need a predictable structure,
better to be restricted,

121
00:07:20.945 --> 00:07:23.447
but predictable and overly flexible,

122
00:07:23.447 --> 00:07:28.469
impossible to identify which bit of our
code cause our view and data to change.

123
00:07:28.469 --> 00:07:34.560
So every interaction must change, jobs or
data and then update all dependent views.

124
00:07:34.560 --> 00:07:41.802
Change the views via an update of data and
a run of our single dataToView function.

125
00:07:41.802 --> 00:07:46.168
Now, again, in practice at scale,
we'd have many maybe dataToView functions.

126
00:07:46.168 --> 00:07:49.568
And maybe we'd even need to
flow through those in some way,

127
00:07:49.568 --> 00:07:54.208
a flow of data ordered through those,
some sort of rules for flowing data flows.

128
00:07:54.208 --> 00:07:58.281
But for our purposes to keep it super,
I mean, as it is,

129
00:07:58.281 --> 00:08:01.855
that's like 12 lines of code and
it's like a.

130
00:08:01.855 --> 00:08:06.784
[COUGH] Anyway, one-way data
binding restricting all our users'

131
00:08:06.784 --> 00:08:11.900
changes of flow to some corresponding
associated underlying data.

132
00:08:11.900 --> 00:08:16.730
And all changes of view to flow
through a single converter

133
00:08:16.730 --> 00:08:21.972
function called a render function,
a dataToView function.

134
00:08:21.972 --> 00:08:26.613
A restrictive but
powerful step to simplify our reasoning

135
00:08:26.613 --> 00:08:30.410
about user interface by
an order of magnitude.

