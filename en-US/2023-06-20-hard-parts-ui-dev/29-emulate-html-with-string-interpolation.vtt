WEBVTT

1
00:00:00.017 --> 00:00:05.050
Now we take a nicer,
relaxing turn to produce

2
00:00:05.050 --> 00:00:09.421
some highly visual code for, I guess,

3
00:00:09.421 --> 00:00:14.329
concatenating text, joining up strings.

4
00:00:14.329 --> 00:00:21.553
One of these is very not visual, line 3
to 5, that's terrible English, isn't it?

5
00:00:21.553 --> 00:00:23.006
Very not visual.

6
00:00:23.006 --> 00:00:25.409
Not very visual, line 3 to 5.

7
00:00:25.409 --> 00:00:29.976
One of these is wonderfully visual,
hopefully with

8
00:00:29.976 --> 00:00:34.765
the help of our template literals,
there we have one.

9
00:00:34.765 --> 00:00:39.712
In line 10 where we are gonna
be able to get out output Hello,

10
00:00:39.712 --> 00:00:44.290
Jo, and our command's gonna
look a lot like our output.

11
00:00:44.290 --> 00:00:48.159
So here is our,
should I draw this whole thing up?

12
00:00:48.159 --> 00:00:49.779
Yeah, why not.

13
00:00:49.779 --> 00:00:53.857
Here is our webpage.

14
00:00:53.857 --> 00:00:55.133
Ian, is it too wide?

15
00:00:55.133 --> 00:00:55.781
&gt;&gt; It's possible.

16
00:00:55.781 --> 00:00:56.890
&gt;&gt; Its possible.

17
00:00:56.890 --> 00:01:00.499
&gt;&gt; [LAUGH]
&gt;&gt; I would say that's great,

18
00:01:00.499 --> 00:01:03.179
that's a great review, okay.

19
00:01:03.179 --> 00:01:06.709
And then here is our C++.

20
00:01:06.709 --> 00:01:07.706
Wow, look at this!

21
00:01:07.706 --> 00:01:11.522
This is really exciting to see
the markers working as well.

22
00:01:11.522 --> 00:01:18.759
This is our C++, list always has body
in it by default, list of elements.

23
00:01:18.759 --> 00:01:27.108
And then we head to JavaScript land
over here where we have our memory.

24
00:01:27.108 --> 00:01:32.304
My goodness, I am very excited by
the marker quality, isn't this amazing?

25
00:01:32.304 --> 00:01:39.094
All right, where we're going to do
some regular old JavaScript here.

26
00:01:39.094 --> 00:01:46.215
For the fun of witnessing visual code and
all its benefits, but let's get started.

27
00:01:46.215 --> 00:01:51.774
Paul, Paul line one tell me what's
going on and keep me walking through.

28
00:01:51.774 --> 00:01:55.835
&gt;&gt; So
&gt;&gt; Line 1, what are we declaring?

29
00:01:55.835 --> 00:01:59.738
&gt;&gt; We are initializing a variable name.

30
00:01:59.738 --> 00:02:01.008
&gt;&gt; Yes.
&gt;&gt; And assigning to it

31
00:02:01.008 --> 00:02:02.435
the value of string Jo.

32
00:02:02.435 --> 00:02:05.899
&gt;&gt; Beautiful next line
we are declaring what?

33
00:02:05.899 --> 00:02:09.535
&gt;&gt; We're declaring another
variable textToDisplay.

34
00:02:09.535 --> 00:02:10.523
&gt;&gt; textToDisplay.

35
00:02:10.523 --> 00:02:13.459
&gt;&gt; And also assigning a string to that and

36
00:02:13.459 --> 00:02:16.949
that string is Hello comma space
&gt;&gt; I like it,

37
00:02:16.949 --> 00:02:20.760
[LAUGH] I was very, very happy with that.

38
00:02:20.760 --> 00:02:24.411
I like it, yes, excellent,
Hello and comma space.

39
00:02:24.411 --> 00:02:27.133
I thought we were doing actually
something more interesting but no.

40
00:02:27.133 --> 00:02:30.221
Great, we're just declaring it and
assigning a string.

41
00:02:30.221 --> 00:02:31.608
Now we get some interesting stuff.

42
00:02:31.608 --> 00:02:34.282
What are we doing here, Paul?

43
00:02:34.282 --> 00:02:39.459
&gt;&gt; So we are reassigning
a value to textToDisplay.

44
00:02:39.459 --> 00:02:40.942
&gt;&gt; Yeah, textToDisplay.

45
00:02:40.942 --> 00:02:45.205
&gt;&gt; And
that is using the string function concat.

46
00:02:45.205 --> 00:02:49.579
&gt;&gt; Nicely put by Paul, just excellent
technical communication, Paul.

47
00:02:49.579 --> 00:02:52.555
Yep, I'm passing concat what?

48
00:02:52.555 --> 00:02:53.548
&gt;&gt; Concat name.

49
00:02:53.548 --> 00:02:56.148
&gt;&gt; Name which is here
&gt;&gt; Name is Jo.

50
00:02:56.148 --> 00:03:01.235
&gt;&gt; Jo, perfect, and that is going
to evaluate to a new string, Hello,

51
00:03:01.235 --> 00:03:06.522
Jo, and that's what we're reassigning
to textToDisplay as you say.

52
00:03:06.522 --> 00:03:13.393
So now Hello Jo, but
we wanna add another thing, which is what?

53
00:03:13.393 --> 00:03:15.836
You know what,
we're gonna do this whole thing so

54
00:03:15.836 --> 00:03:18.058
you can really appreciate imperative code.

55
00:03:18.058 --> 00:03:21.001
Code where you describe it line by line so
the computer can understand,

56
00:03:21.001 --> 00:03:21.939
tell me what happens.

57
00:03:21.939 --> 00:03:24.812
&gt;&gt; So the same thing, we are-
&gt;&gt; No, nice try, no, okay, sorry

58
00:03:24.812 --> 00:03:25.661
&gt;&gt; [LAUGH]

59
00:03:25.661 --> 00:03:26.192
&gt;&gt; No, no, no.

60
00:03:26.192 --> 00:03:30.900
&gt;&gt; You're reassigning
the value of textToDisplay and

61
00:03:30.900 --> 00:03:37.220
we are assigning to it the textToDisplay
the string function concat.

62
00:03:37.220 --> 00:03:37.913
&gt;&gt; Yeah.
&gt;&gt; And so

63
00:03:37.913 --> 00:03:41.624
we're adding to the end of
the string an exclamation point.

64
00:03:41.624 --> 00:03:43.324
&gt;&gt; You know what, there we go.

65
00:03:43.324 --> 00:03:46.735
I shouldn't have done that, but beautiful.

66
00:03:46.735 --> 00:03:51.498
I hope you can see, does the code we wrote
look anything like our final output?

67
00:03:51.498 --> 00:03:56.417
It couldn't look less [LAUGH] Ian is like,
to my mind, yes.

68
00:03:56.417 --> 00:03:58.961
&gt;&gt; [LAUGH]
&gt;&gt; No, come on.

69
00:03:58.961 --> 00:04:00.343
&gt;&gt; Strings are immutable and

70
00:04:00.343 --> 00:04:03.116
it really bugged me you just
added to that in memory.

71
00:04:03.116 --> 00:04:07.102
&gt;&gt; Okay, all right, yes, we'll just do it.

72
00:04:07.102 --> 00:04:13.606
Let's go to our nicely
intuitive visual version.

73
00:04:13.606 --> 00:04:15.958
What are we gonna do in line 10,

74
00:04:15.958 --> 00:04:19.663
an alternative with the help
of template literals.

75
00:04:19.663 --> 00:04:22.242
We're not here to sort of
per se do template literals,

76
00:04:22.242 --> 00:04:24.946
although we will end up using
them from now on in our code.

77
00:04:24.946 --> 00:04:28.978
But to appreciate that visual code for

78
00:04:28.978 --> 00:04:33.010
visual output is a really nice thing.

79
00:04:33.010 --> 00:04:38.186
So, Justice, help me out here,
what's happening in line 10?

80
00:04:38.186 --> 00:04:44.420
&gt;&gt; Yeah, so we are reassigning
textToDisplay to the string.

81
00:04:44.420 --> 00:04:47.427
But it's a little different,
we're using backticks instead of-

82
00:04:47.427 --> 00:04:49.085
&gt;&gt; Yeah, backticks here.

83
00:04:49.085 --> 00:04:51.937
&gt;&gt; Double quotations, and so

84
00:04:51.937 --> 00:04:57.641
that enables us to insert
a string Hello comma space but

85
00:04:57.641 --> 00:05:03.474
then we can use template
literals to assign a variable.

86
00:05:03.474 --> 00:05:06.571
&gt;&gt; Yeah, right,
at least it's gonna evaluate to,

87
00:05:06.571 --> 00:05:09.685
right here,
it's gonna evaluate to Hello, Jo!

88
00:05:09.685 --> 00:05:15.479
Cuz named value is Jo, and
we can assign that to textToDisplay.

89
00:05:15.479 --> 00:05:17.066
The input looks like the output.

90
00:05:17.066 --> 00:05:22.500
It's not perfect but the input looks
like the output and that's really nice.

91
00:05:22.500 --> 00:05:24.065
Let's read what it says.

92
00:05:24.065 --> 00:05:27.090
String interpolation gives us visual
code known as template literals here.

93
00:05:27.090 --> 00:05:32.565
The closer our code can be to
visual to mirroring it's visual or

94
00:05:32.565 --> 00:05:37.231
graphical output, the easier for
us as developers.

95
00:05:37.231 --> 00:05:43.008
Could we do something similar with our
main code by creating visual elements?

96
00:05:43.008 --> 00:05:50.646
And the answer, I hope, could we emulate
our HTML with semi visual coding?

97
00:05:50.646 --> 00:05:55.361
Take a look at this, we are gonna describe

98
00:05:55.361 --> 00:06:00.889
the information that's
gonna go into producing

99
00:06:00.889 --> 00:06:06.952
a DOM element of a type div
using an array that actually

100
00:06:06.952 --> 00:06:11.974
looks quite a bit like
an HTML block of code.

101
00:06:11.974 --> 00:06:13.228
Let's see what I said here.

102
00:06:13.228 --> 00:06:17.828
Starting with a unit of code representing
each piece of view, JavaScript array with

103
00:06:17.828 --> 00:06:21.603
all the details, Element 0 is gonna
be a type, and one is a content.

104
00:06:21.603 --> 00:06:26.484
And then a function we're gonna
see that takes in that array and

105
00:06:26.484 --> 00:06:29.441
produces a DOM element as its output.

106
00:06:29.441 --> 00:06:35.332
We're gonna get a mirror in our code in
JavaScript of the actual DOM element,

107
00:06:35.332 --> 00:06:36.247
here it is.

108
00:06:36.247 --> 00:06:39.638
Yeah put all our element details in
an array and our create element,

109
00:06:39.638 --> 00:06:42.451
add contents' instructions
into a convert function.

110
00:06:42.451 --> 00:06:47.732
Here it is, we're gonna have
a list of information that when

111
00:06:47.732 --> 00:06:53.015
we run convert on that list
produces hopefully an object that

112
00:06:53.015 --> 00:06:57.902
has an accessor in JavaScript
to an actual DOM element.

113
00:06:57.902 --> 00:07:02.353
But we're gonna have a manifestation
of it in JavaScript.

114
00:07:02.353 --> 00:07:06.456
In practice, how this will be implemented,
we'll see we're gonna

115
00:07:06.456 --> 00:07:10.432
have to handle a ton of edge cases for
it to work out any sorta scale.

116
00:07:10.432 --> 00:07:16.317
But it is hard, we're getting in
JavaScript a visual representation.

117
00:07:16.317 --> 00:07:22.141
Imagine if we could take that little
unit of code, that element and

118
00:07:22.141 --> 00:07:27.344
have a list of them down the page
as sub-arrays of an array.

119
00:07:27.344 --> 00:07:31.619
And that we could reorder them and
have that,

120
00:07:31.619 --> 00:07:37.807
reorder those elements on the page,
giving me UI composition and

121
00:07:37.807 --> 00:07:44.109
if I could then have those little
sub-elements be produced on mass

122
00:07:44.109 --> 00:07:49.587
by a function,
I would be very, very happy.

123
00:07:49.587 --> 00:07:51.387
All right, so-
&gt;&gt; [LAUGH]

124
00:07:51.387 --> 00:07:52.718
&gt;&gt; Let's do it.

125
00:07:52.718 --> 00:07:55.684
Here we go, we have our DOM set up,
we have our web page.

126
00:07:55.684 --> 00:07:58.244
I think we are gonna use
the document object, so

127
00:07:58.244 --> 00:08:00.486
let's actually put it in memory as well.

128
00:08:00.486 --> 00:08:03.281
Phil, if you don't mind helping out
with the first, thinking about memory?

129
00:08:03.281 --> 00:08:05.967
&gt;&gt; We're gonna declare a variable
called name and initialize it.

130
00:08:05.967 --> 00:08:09.989
&gt;&gt; Forgive me, sorry, just because we're
in JavaScript running in the web browser,

131
00:08:09.989 --> 00:08:11.525
and we're gonna use document.

132
00:08:11.525 --> 00:08:13.748
What's the first thing
that gets preloaded?

133
00:08:13.748 --> 00:08:15.296
&gt;&gt; In the document object body?

134
00:08:15.296 --> 00:08:18.410
&gt;&gt; Yeah,
just a creation of document object, great.

135
00:08:18.410 --> 00:08:22.219
&gt;&gt; I'm sorry, I thought you jumped
pass it, yep your document object.

136
00:08:22.219 --> 00:08:27.005
&gt;&gt; Perfect document object which has
a hidden link or hidden property to where?

137
00:08:27.005 --> 00:08:28.734
&gt;&gt; Our DOM.

138
00:08:28.734 --> 00:08:31.956
&gt;&gt; Perfect, to our DOM,
there it is, brilliant and

139
00:08:31.956 --> 00:08:37.432
it has on it a bunch of methods and getter
setter properties like body, as Phil said.

140
00:08:37.432 --> 00:08:39.163
But which one are we gonna
use here in this code?

141
00:08:39.163 --> 00:08:40.091
&gt;&gt; Create element.

142
00:08:40.091 --> 00:08:46.246
&gt;&gt; Create element, there it is.

143
00:08:46.246 --> 00:08:48.582
And now as you say,
let's get building some data.

144
00:08:48.582 --> 00:08:53.075
But look at this people,
we are gonna create an intermediary.

145
00:08:53.075 --> 00:08:55.416
No, that's not the right meaning
of the word intermediary, is it?

146
00:08:55.416 --> 00:09:00.761
An intermediate step before
displaying that data on the view

147
00:09:00.761 --> 00:09:08.096
we're going to present what it will look
like with some dynamic data placeholder,

148
00:09:08.096 --> 00:09:12.318
by the way,
we should have HTML add that right?

149
00:09:12.318 --> 00:09:17.066
We might not need any of this
stuff in JavaScript which we

150
00:09:17.066 --> 00:09:20.918
will then convert into
actual DOM elements.

151
00:09:20.918 --> 00:09:23.296
How nice, all right.

152
00:09:23.296 --> 00:09:27.476
Phil, on that note,
let's go through line 1 and line 3 here.

153
00:09:27.476 --> 00:09:29.985
&gt;&gt; At line 1 we're declaring
our named variable and

154
00:09:29.985 --> 00:09:31.845
initializing it to the string of Jo.

155
00:09:31.845 --> 00:09:34.141
&gt;&gt; Jo, perfect there it is, next line.

156
00:09:34.141 --> 00:09:38.382
&gt;&gt; Next we're going to declare
a divInfo variable and

157
00:09:38.382 --> 00:09:42.730
initialize it to an array
with three elements in it?

158
00:09:42.730 --> 00:09:44.302
&gt;&gt; Two elements there,
I think, yeah, two elements.

159
00:09:44.302 --> 00:09:49.086
&gt;&gt; Two elements in it,
the string div and template literal.

160
00:09:49.086 --> 00:09:51.974
&gt;&gt; Yeah, and
I get this every time, people, but

161
00:09:51.974 --> 00:09:54.058
this now evaluates here and now.

162
00:09:54.058 --> 00:09:56.866
This is a statement that
needs to be evaluated.

163
00:09:56.866 --> 00:09:58.411
This expression needs to be evaluated,
sorry.

164
00:09:58.411 --> 00:10:01.531
So this is gonna evaluate to what, Phil?

165
00:10:01.531 --> 00:10:03.088
&gt;&gt; The string of Hi, Jo!

166
00:10:03.088 --> 00:10:06.565
&gt;&gt; Jo, exactly.

167
00:10:06.565 --> 00:10:11.637
So we now have a visual map,
both a sort of conditional on how

168
00:10:11.637 --> 00:10:16.414
our data ends up being by line
3 in our JavaScript code.

169
00:10:16.414 --> 00:10:19.756
This doesn't look like JavaScript,
it's so picturesque.

170
00:10:19.756 --> 00:10:25.218
And then actually in our memory the full
manifestation with the existing state,

171
00:10:25.218 --> 00:10:30.051
the existing data that's gonna end
up being produced as a DOM element.

172
00:10:30.051 --> 00:10:33.062
So we then save a function
that's gonna do that work, Phil?

173
00:10:33.062 --> 00:10:35.628
&gt;&gt; Yeah,
we're gonna declare a function convert.

174
00:10:35.628 --> 00:10:37.643
&gt;&gt; Beautiful, and yep, sorry.

175
00:10:37.643 --> 00:10:38.761
&gt;&gt; You can store that in memory.

176
00:10:38.761 --> 00:10:41.441
&gt;&gt; Perfect, and then all the way
down to line 14, we declare?

177
00:10:41.441 --> 00:10:43.991
&gt;&gt; Declare a variable called jsDiv and

178
00:10:43.991 --> 00:10:48.496
initialize it to the evaluated
result of executing our convert

179
00:10:48.496 --> 00:10:53.089
function passing in the argument
of divInfo which is our array.

180
00:10:53.089 --> 00:10:57.080
&gt;&gt; Beautiful, which means a brand new.

181
00:10:57.080 --> 00:10:58.676
You want to do together [LAUGH].

182
00:10:58.676 --> 00:11:00.225
&gt;&gt; [LAUGH]
&gt;&gt; A brand new, three, two, one.

183
00:11:00.225 --> 00:11:01.727
&gt;&gt; Execution contract.

184
00:11:01.727 --> 00:11:04.709
&gt;&gt; All right, beautiful,
and into it we go and

185
00:11:04.709 --> 00:11:08.347
we are gonna match our parameters and
our arguments.

186
00:11:08.347 --> 00:11:13.444
And let's match them, y.

187
00:11:13.444 --> 00:11:15.582
&gt;&gt; Yes, let's match them.

188
00:11:15.582 --> 00:11:18.214
&gt;&gt; That's right, there's a strict rule,

189
00:11:18.214 --> 00:11:22.199
you're not mentor asking question,
very fast intonation and

190
00:11:22.199 --> 00:11:26.349
then throw someone's name in at
the end before they get, so why?

191
00:11:26.349 --> 00:11:31.537
We actually didn't convert with the input
of divInfo, which is this array.

192
00:11:31.537 --> 00:11:35.713
And we are then going to match our
parameter which is node with our argument,

193
00:11:35.713 --> 00:11:36.767
which is an array.

194
00:11:36.767 --> 00:11:39.515
So talk me through what happens there.

195
00:11:39.515 --> 00:11:42.358
&gt;&gt; Excellent, on line 7.

196
00:11:42.358 --> 00:11:42.863
&gt;&gt; Yep.

197
00:11:42.863 --> 00:11:47.377
&gt;&gt; We're gonna look up
the zeroeth index on node.

198
00:11:47.377 --> 00:11:49.027
It's the string div-
&gt;&gt; Beautiful.

199
00:11:49.027 --> 00:11:50.219
&gt;&gt; As it turns out.

200
00:11:50.219 --> 00:11:53.481
&gt;&gt; Great, yeah, better to declare
our const on the left first,

201
00:11:53.481 --> 00:11:54.563
if you don't mind.

202
00:11:54.563 --> 00:11:55.226
&gt;&gt; That's right.

203
00:11:55.226 --> 00:11:57.442
&gt;&gt; Declare our const on
the left first there.

204
00:11:57.442 --> 00:12:02.225
&gt;&gt; Sure, yeah, so we're signing
into memory a variable named elem.

205
00:12:02.225 --> 00:12:06.921
&gt;&gt; Beautiful, and then we're
going to call exactly as you say,

206
00:12:06.921 --> 00:12:10.550
createElement() with what as its argument?

207
00:12:10.550 --> 00:12:15.152
&gt;&gt; Yes, so on the divInfo passed in to

208
00:12:15.152 --> 00:12:18.967
the node parameter,
&gt;&gt; Yep.

209
00:12:18.967 --> 00:12:20.000
&gt;&gt; The zeroeth index,

210
00:12:20.000 --> 00:12:24.324
there's a string div that's actually
the signature of the createElement method.

211
00:12:24.324 --> 00:12:30.043
So the createElement method will
create a JavaScript object.

212
00:12:30.043 --> 00:12:31.619
&gt;&gt; Yeah, yeah,
we remember what it does, don't we?

213
00:12:31.619 --> 00:12:36.119
&gt;&gt; And the accessor object for
what will be a C++.

214
00:12:36.119 --> 00:12:41.832
&gt;&gt; Newly created DOM element
over here of type what?

215
00:12:41.832 --> 00:12:42.355
&gt;&gt; Div.

216
00:12:42.355 --> 00:12:43.890
&gt;&gt; Div, beautiful.

217
00:12:43.890 --> 00:12:49.793
Perfect, div and this is,
by the way, really nice.

218
00:12:49.793 --> 00:12:51.847
Thank you Dwight,
excellent technical communication.

219
00:12:51.847 --> 00:12:55.790
We passed in node position zero which was
the string div from our description of

220
00:12:55.790 --> 00:12:57.461
what we wanna show up on the page,

221
00:12:57.461 --> 00:13:00.766
visual description in JavaScript
if we wanna show up on the page.

222
00:13:00.766 --> 00:13:07.843
And we've now created, using that,
a DOM element of that type div.

223
00:13:07.843 --> 00:13:14.927
And we now have an access
to object in JavaScript for

224
00:13:14.927 --> 00:13:19.062
it that has a link to that div.

225
00:13:19.062 --> 00:13:21.319
There it is, all the way across.

226
00:13:21.319 --> 00:13:28.471
And it has a bunch of useful getter
setter properties like textContent.

227
00:13:28.471 --> 00:13:32.803
And it's that that we use in the next
line, tell me what happens, why?

228
00:13:32.803 --> 00:13:38.472
&gt;&gt; Yeah, we look up the item at
the first index of the node array.

229
00:13:38.472 --> 00:13:42.431
It's the string Hi, Jo!

230
00:13:42.431 --> 00:13:47.149
And then we assign that, well,
we send it to textContent which

231
00:13:47.149 --> 00:13:52.044
is a getter setter method which
will put that as the text content,

232
00:13:52.044 --> 00:13:54.851
that would be-
&gt;&gt; Beautiful, I love that we have,

233
00:13:54.851 --> 00:13:55.790
&gt;&gt; DOM node.

234
00:13:55.790 --> 00:13:57.733
&gt;&gt; Hi, Jo!

235
00:13:57.733 --> 00:14:00.337
Beautiful, and that is not attached.

236
00:14:00.337 --> 00:14:07.347
Well, fine, we return that out
into what global constant, why?

237
00:14:07.347 --> 00:14:09.303
&gt;&gt; Into the newly created jsDiv.

238
00:14:09.303 --> 00:14:14.934
&gt;&gt; Beautiful, with textContent,

239
00:14:14.934 --> 00:14:20.168
and we have our link to the div.

240
00:14:20.168 --> 00:14:24.014
Beautiful, I had an appendix, I really
wasn't here to sort of show that process

241
00:14:24.014 --> 00:14:25.893
because, have you seen that process?

242
00:14:25.893 --> 00:14:30.689
Yes, I wanna show us what's new
here is a JavaScript description

243
00:14:30.689 --> 00:14:35.148
of what's gonna show up on the DOM and
therefore on the page.

244
00:14:35.148 --> 00:14:38.804
I probably should append it so
you can see the full route through.

245
00:14:38.804 --> 00:14:42.745
If we did write
document.body.appendjsDiv or

246
00:14:42.745 --> 00:14:48.904
document.body.replace children jsDiv,
we would see a div with Hi, Jo!

247
00:14:48.904 --> 00:14:53.525
And I just think it's really cool that
we now have in JavaScript a visual

248
00:14:53.525 --> 00:14:57.466
representation of our information
that's gonna display.

249
00:14:57.466 --> 00:15:00.651
If we were to write C++ code and
just, I don't know,

250
00:15:00.651 --> 00:15:05.227
know in our code that we could describe
this DOM element directly without using

251
00:15:05.227 --> 00:15:09.897
the very imperative accessor object that
when we got to recall a getter setter.

252
00:15:09.897 --> 00:15:13.091
Fine if we could access this directly but
we can't,

253
00:15:13.091 --> 00:15:17.157
meaning if we can create in JavaScript
the representation of it and

254
00:15:17.157 --> 00:15:22.326
then simply call a convert function that
does the displaying, that is pretty cool.

