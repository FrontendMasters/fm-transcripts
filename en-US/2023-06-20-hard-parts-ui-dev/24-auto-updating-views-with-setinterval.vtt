WEBVTT

1
00:00:00.190 --> 00:00:02.910
&gt;&gt; Will: Okay, so we now hit in line 17.

2
00:00:02.910 --> 00:00:04.791
Another tricky line really, and actually,

3
00:00:04.791 --> 00:00:06.780
to be fair,
we didn't dwell on this last time.

4
00:00:06.780 --> 00:00:10.537
So we'll do it properly this time,
which is setInterval to which, Wye,

5
00:00:10.537 --> 00:00:13.530
we're passing,
what function definition in full?

6
00:00:13.530 --> 00:00:15.110
&gt;&gt; Speaker 2: We're passing data to view.

7
00:00:15.110 --> 00:00:16.020
&gt;&gt; Will: Yes, exactly,

8
00:00:16.020 --> 00:00:19.278
or at least a reference to its
function definition in full.

9
00:00:19.278 --> 00:00:23.254
And then, an argument of how many
milliseconds should this the interval

10
00:00:23.254 --> 00:00:26.130
between each execution of data view,
or data view?

11
00:00:26.130 --> 00:00:26.690
&gt;&gt; Speaker 2: 15 milliseconds.

12
00:00:26.690 --> 00:00:28.120
&gt;&gt; Will: 15 milliseconds.

13
00:00:28.120 --> 00:00:29.861
This line here is a 1.

14
00:00:29.861 --> 00:00:32.980
We move out of this line immediately.

15
00:00:32.980 --> 00:00:34.440
Because what does it do?

16
00:00:34.440 --> 00:00:38.229
It grabs a dataToView function, or
at least a link back to it in JavaScript,

17
00:00:38.229 --> 00:00:39.790
just to be precise.

18
00:00:39.790 --> 00:00:44.243
And it is going to pass it to,

19
00:00:44.243 --> 00:00:50.570
in the web browser, our timer feature.

20
00:00:50.570 --> 00:00:55.378
Now, as I say, this one technically
is implemented somewhere between

21
00:00:55.378 --> 00:01:01.003
the JavaScript engine, I understand, and
outside of it in the browser as a whole.

22
00:01:01.003 --> 00:01:02.951
But, for what we need to do,

23
00:01:02.951 --> 00:01:07.761
we know that it is certainly not
blocking running code in JavaScript.

24
00:01:07.761 --> 00:01:09.570
Of that, we're sure.

25
00:01:09.570 --> 00:01:12.690
We're instead passing to it,

26
00:01:12.690 --> 00:01:17.750
set up an interval of
every 15 milliseconds.

27
00:01:17.750 --> 00:01:20.446
You will pass back your callback on and

28
00:01:20.446 --> 00:01:24.430
add to the callback queue
the dataToView function.

29
00:01:24.430 --> 00:01:27.627
dataToView function, there it is.

30
00:01:27.627 --> 00:01:32.180
I don't know why did it so
big, but there it is.

31
00:01:33.320 --> 00:01:36.575
Brilliant, and
that is that line done, finished.

32
00:01:36.575 --> 00:01:37.805
I'm gonna just literally cross it out.

33
00:01:37.805 --> 00:01:39.205
Do not think we're inside of it.

34
00:01:39.205 --> 00:01:42.865
Please do not think it's sitting on
the call stack, set to interval.

35
00:01:42.865 --> 00:01:44.135
No, it's done.

36
00:01:44.135 --> 00:01:49.751
But every 15 milliseconds,
including 15 milliseconds later,

37
00:01:49.751 --> 00:01:52.945
in other words, almost immediately,

38
00:01:52.945 --> 00:01:58.094
we are going to get what function
passed to the callback queue?

39
00:01:58.094 --> 00:01:59.469
Wye.
&gt;&gt; Speaker 2: We'll call dataToView.

40
00:01:59.469 --> 00:02:00.576
&gt;&gt; Will: Yeah, absolutely.

41
00:02:00.576 --> 00:02:05.425
I'm gonna continue to ask Wye this one so
that every time I have to say data

42
00:02:05.425 --> 00:02:09.497
after you say data and
everyone feels [LAUGH] uncomfortable.

43
00:02:09.497 --> 00:02:13.408
So it sits in the queue there, dataToView.

44
00:02:13.408 --> 00:02:19.740
There it sits until we are sure that
there's nothing else executing.

45
00:02:19.740 --> 00:02:22.656
Well, we know there was nothing else
executing, because that's the last part of

46
00:02:22.656 --> 00:02:25.440
our global synchronous, that is,
in order down the page, code.

47
00:02:25.440 --> 00:02:29.230
So dataToView can be added from the queue.

48
00:02:29.230 --> 00:02:30.002
The event loop checks.

49
00:02:30.002 --> 00:02:30.810
Is there any more code?

50
00:02:30.810 --> 00:02:31.360
Nope.

51
00:02:31.360 --> 00:02:31.883
To run?
Nope.

52
00:02:31.883 --> 00:02:34.120
Is there anything any
function on the call stack?

53
00:02:34.120 --> 00:02:34.910
Nope.

54
00:02:34.910 --> 00:02:42.274
And so dataToView can be added dataToView
can be added to the call stack,

55
00:02:42.274 --> 00:02:49.410
where the help of JavaScript will
ensure that it is executed, is run.

56
00:02:49.410 --> 00:02:52.031
It's gonna add the parens for
us to execute it.

57
00:02:52.031 --> 00:02:52.900
I love that.

58
00:02:52.900 --> 00:02:54.430
I think that's really cool.

59
00:02:54.430 --> 00:02:58.614
And then that is going to pass,
or that's going to add or take.

60
00:02:58.614 --> 00:03:00.720
Sorry, let me get that right.

61
00:03:00.720 --> 00:03:05.619
That's gonna pass the thread of
execution into the dataToView,

62
00:03:05.619 --> 00:03:11.120
the dataToView, function's brand new,
what, everybody?

63
00:03:11.120 --> 00:03:13.190
&gt;&gt; Speaker 2: Execution context.

64
00:03:13.190 --> 00:03:15.050
&gt;&gt; Will: That's right, exactly.

65
00:03:15.050 --> 00:03:19.375
That was actually quite mellow and perfect
tone for the morning, honestly, and

66
00:03:19.375 --> 00:03:22.120
not mellow in a bad way,
mellow in a wonderful way.

67
00:03:22.120 --> 00:03:23.850
All right, that's lovely.

68
00:03:23.850 --> 00:03:25.600
So into it we go.

69
00:03:25.600 --> 00:03:30.265
And this is our essentially initial
run of it, taking our initial state,

70
00:03:30.265 --> 00:03:35.308
our initial data and using it before any
user action that can change that state,

71
00:03:35.308 --> 00:03:40.381
data, content that will then run the
dataToView function again at that point.

72
00:03:40.381 --> 00:03:43.070
Into it we go, and what are we gonna do?

73
00:03:43.070 --> 00:03:51.005
Phil, can you help me out what we're
doing inside of our dataToView function?

74
00:03:51.005 --> 00:03:56.570
&gt;&gt; Phil: Yeah, we're gonna access
our JS input accessor object.

75
00:03:56.570 --> 00:03:58.130
&gt;&gt; Will: Right, there it is.

76
00:03:58.130 --> 00:04:03.266
&gt;&gt; Phil: We're going to find the value
setter property on that object and

77
00:04:03.266 --> 00:04:05.940
set it equal to the value of post.

78
00:04:05.940 --> 00:04:06.950
&gt;&gt; Will: Which is?

79
00:04:06.950 --> 00:04:08.360
&gt;&gt; Phil: Which currently
is an empty string.

80
00:04:08.360 --> 00:04:09.410
&gt;&gt; Will: Empty string.

81
00:04:09.410 --> 00:04:15.022
So we know that value will be setting
the value of the associated linked,

82
00:04:15.022 --> 00:04:19.256
hidden property link DOM element,
in input, sorry.

83
00:04:19.256 --> 00:04:22.659
And that is where we set the value,
perfect.

84
00:04:22.659 --> 00:04:25.334
Done, and same in the next line, Phil?

85
00:04:25.334 --> 00:04:28.150
&gt;&gt; Phil: We're gonna
basically do the same thing.

86
00:04:28.150 --> 00:04:31.145
We're gonna access
the JS Div Accessor object.

87
00:04:31.145 --> 00:04:32.692
&gt;&gt; Will: Yeah.
&gt;&gt; Phil: We're going to use the text

88
00:04:32.692 --> 00:04:36.523
content setter property on that object and
set it equal to post, which is also.

89
00:04:36.523 --> 00:04:38.140
&gt;&gt; Will: Didn't do it yet,
but yes, there it is.

90
00:04:38.140 --> 00:04:38.810
&gt;&gt; Phil: An empty string.

91
00:04:38.810 --> 00:04:44.280
&gt;&gt; Will: And that's going to do nothing,
really, for what the user sees.

92
00:04:44.280 --> 00:04:49.219
Again, there was a time where
you wouldn't even turn data into

93
00:04:49.219 --> 00:04:53.700
empty content on the page,
because what's there to do?

94
00:04:53.700 --> 00:04:55.050
It's already got it on the page.

95
00:04:55.050 --> 00:05:00.338
But by defaulting to everything the user
sees must be a manifestation of underlying

96
00:05:00.338 --> 00:05:05.650
data, we're even going to go ahead
displaying blank data, because it is data.

97
00:05:05.650 --> 00:05:06.477
It still state.

98
00:05:06.477 --> 00:05:10.785
It's still something that can be changed
by the user based on their action.

99
00:05:10.785 --> 00:05:15.027
Every single thing that can be changed,
we have to figure out a way to, quote,

100
00:05:15.027 --> 00:05:16.070
display it or not.

101
00:05:17.180 --> 00:05:24.990
A div not showing up,
it's still presentation causing view.

102
00:05:24.990 --> 00:05:27.370
In that case, it's data causing no view.

103
00:05:27.370 --> 00:05:30.010
But it's still dependent
on the underlying data.

104
00:05:30.010 --> 00:05:31.380
Okay, perfect.

105
00:05:31.380 --> 00:05:32.460
Brilliant, I think that's it.

106
00:05:32.460 --> 00:05:37.300
So our initial dataToView
call is finished.

107
00:05:37.300 --> 00:05:40.910
Al right, good, so
dataToView is popped off the call stack.

108
00:05:42.420 --> 00:05:43.280
Or, no, purple not possible.

109
00:05:43.280 --> 00:05:45.079
dataToView is popped off the call stack.

110
00:05:47.010 --> 00:05:49.210
And it was already out
of the callback queue.

111
00:05:49.210 --> 00:05:53.947
Sorry people, as soon as it gets added
to the call stack, it's out of here, but

112
00:05:53.947 --> 00:05:56.738
we always forget to remove it because,
yeah.

113
00:05:56.738 --> 00:06:03.490
Okay, now the user's just sitting and
enjoying the page.

114
00:06:03.490 --> 00:06:06.798
Honestly, to be fair,
they're literally figuring out what is?

115
00:06:06.798 --> 00:06:09.890
They're probably going,
there's an empty input field.

116
00:06:09.890 --> 00:06:13.957
And so they're quite excited but they're
curious, but they're nervous to write in

117
00:06:13.957 --> 00:06:17.780
there because obviously this user
interface has been terribly designed.

118
00:06:17.780 --> 00:06:22.050
There's no preview text even, right.

119
00:06:22.050 --> 00:06:26.284
So they're puzzling for a bit, but

120
00:06:26.284 --> 00:06:31.092
at about one minute, they take action.

121
00:06:31.092 --> 00:06:32.702
User actions.

122
00:06:32.702 --> 00:06:37.733
At about one minute, they take action and

123
00:06:37.733 --> 00:06:41.670
they are going to start typing.

124
00:06:41.670 --> 00:06:43.050
So we're not doing a click first here.

125
00:06:43.050 --> 00:06:46.600
I mean, they technically will click first,
but we have no handler, so

126
00:06:46.600 --> 00:06:47.496
we can ignore it.

127
00:06:47.496 --> 00:06:50.500
And they'll start typing, and
what are they going to type?

128
00:06:50.500 --> 00:06:52.792
Let's have John.

129
00:06:52.792 --> 00:06:58.170
They're gonna type "John" and
"John" is going

130
00:06:58.170 --> 00:07:03.173
to show up in their input
field that is to say this

131
00:07:03.173 --> 00:07:08.176
C++ list of elements is
gonna have "John" in

132
00:07:08.176 --> 00:07:13.800
its value in the input
C++ object immediately.

133
00:07:13.800 --> 00:07:20.308
An event is sent that triggers
this handleInput function

134
00:07:20.308 --> 00:07:25.470
from C++ to be added
to our callback queue.

135
00:07:26.480 --> 00:07:28.650
And there it goes.

136
00:07:28.650 --> 00:07:31.133
Our handleInput function is added.

137
00:07:31.133 --> 00:07:32.010
There it is.

138
00:07:34.700 --> 00:07:36.030
There it is.

139
00:07:36.030 --> 00:07:37.240
No code is running.

140
00:07:37.240 --> 00:07:40.300
We're at one minute, so nothing's running.

141
00:07:40.300 --> 00:07:41.760
We've been waiting a while here.

142
00:07:43.350 --> 00:07:46.273
So, event loop goes, we're good to go.

143
00:07:46.273 --> 00:07:52.357
Put me on the call stack and
handleInput will appear on the call

144
00:07:52.357 --> 00:07:59.027
stack where our friend JavaScript
is gonna go ahead and execute it.

145
00:07:59.027 --> 00:08:01.691
And create everybody together a brand new.

146
00:08:01.691 --> 00:08:05.570
&gt;&gt; Speaker 2: Execution context,
&gt;&gt; Will: Execution context, beautiful.

147
00:08:05.570 --> 00:08:10.673
2, we said there's two functions here,
one is propagating our data across and

148
00:08:10.673 --> 00:08:14.875
runs every 15 milliseconds, but
essentially all the time, and

149
00:08:14.875 --> 00:08:18.252
the other a bit like as we
described earlier in a game,

150
00:08:18.252 --> 00:08:22.860
basically here every sixty times
a second as far as the eye can see.

151
00:08:22.860 --> 00:08:27.688
And then,
pinpoint we have a function handleInput,

152
00:08:27.688 --> 00:08:32.450
that is going to run only
when user takes action.

153
00:08:32.450 --> 00:08:37.865
And then we're going to grab,
hopefully the data as a submission

154
00:08:37.865 --> 00:08:42.494
of change to data before
instantaneously our converter

155
00:08:42.494 --> 00:08:47.730
displays the consequence of
that change in actual view.

156
00:08:47.730 --> 00:08:52.087
Hopefully the only consequence is
defined in our dataToview converter,

157
00:08:52.087 --> 00:08:54.270
I want everything in there.

158
00:08:54.270 --> 00:08:58.352
Nothing that can affect what the user sees
based on their action should be outside of

159
00:08:58.352 --> 00:08:59.850
my converter function.

160
00:08:59.850 --> 00:09:01.600
It makes things predictable,

161
00:09:01.600 --> 00:09:05.320
it means everything is traceable
back to underlying state.

162
00:09:05.320 --> 00:09:10.045
It enables me to reason in terms of not
complex exponential flows of individual

163
00:09:10.045 --> 00:09:13.220
paths a user can take in
terms of their actions.

164
00:09:13.220 --> 00:09:16.449
Remove something, add something, click
that thing, that would happen, shoot,

165
00:09:16.449 --> 00:09:18.570
now that's gonna change that,
so we can't allow.

166
00:09:18.570 --> 00:09:23.352
No, everything would depend on state
which we can then analyze in any

167
00:09:23.352 --> 00:09:26.330
given data here, what will the output be?

168
00:09:26.330 --> 00:09:30.620
And all the user can do is
change us to a different state,

169
00:09:30.620 --> 00:09:34.930
different type or
different value here in JavaScript.

170
00:09:34.930 --> 00:09:40.119
And off that, we know, because we
designed it in our dataToview function,

171
00:09:40.119 --> 00:09:42.808
what will show up, we can be sure of it.

172
00:09:42.808 --> 00:09:48.607
These aren't truths,
these are moves to make our lives easier,

173
00:09:48.607 --> 00:09:53.130
these aren't facts, these are tactics.

174
00:09:53.130 --> 00:09:58.026
That's Ian, shout out to Ian for making
something that was bad already even worse.

175
00:09:58.026 --> 00:10:00.013
No
&gt;&gt; Speaker 2: [LAUGH]

176
00:10:00.013 --> 00:10:00.759
&gt;&gt; Will: I mean,

177
00:10:00.759 --> 00:10:03.329
my thing was bad, I get you.

178
00:10:03.329 --> 00:10:05.220
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will: But just remember,

179
00:10:05.220 --> 00:10:06.910
these aren't like truths.

180
00:10:06.910 --> 00:10:09.632
These aren't like, this is,
as we talk about these,

181
00:10:09.632 --> 00:10:13.140
you might be like, I could do
that a different way, absolutely.

182
00:10:13.140 --> 00:10:15.100
There are different ways you
can do all these things.

183
00:10:15.100 --> 00:10:19.364
These are like what has become
the standard, if only because,

184
00:10:19.364 --> 00:10:23.370
it's probably got fewer
trade-offs than others.

185
00:10:23.370 --> 00:10:26.290
And also, it's become a,
yeah, Will go ahead.

186
00:10:26.290 --> 00:10:27.486
&gt;&gt; Speaker 2: Motions not notions.

187
00:10:27.486 --> 00:10:28.698
&gt;&gt; Will: Okay, no, right.

188
00:10:28.698 --> 00:10:29.786
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will: This is,

189
00:10:29.786 --> 00:10:32.618
I don't even know what that mean, motion,

190
00:10:32.618 --> 00:10:38.070
it doesn't even make sense at this point
like, this is rhyming words at this point.

191
00:10:39.130 --> 00:10:41.910
Okay, brand new decision
context as was said.

192
00:10:42.940 --> 00:10:49.550
And here it is, it's opened, and
into it we go, where we are going to?

193
00:10:49.550 --> 00:10:54.460
Help me out, Jon,
as you are special named person here.

194
00:10:54.460 --> 00:10:56.810
Jon, what are we gonna do in line 11?

195
00:10:56.810 --> 00:11:03.543
&gt;&gt; Jon: So, we are setting our post
variable to jsInputs value property.

196
00:11:03.543 --> 00:11:06.912
&gt;&gt; Will: Right, but we know that
that value property is actually,

197
00:11:06.912 --> 00:11:08.770
is it a setter or a getter?

198
00:11:08.770 --> 00:11:09.560
&gt;&gt; Jon: It's a getter, right?

199
00:11:09.560 --> 00:11:12.120
&gt;&gt; Will: It's a getter, spot on,
to get the value of what?

200
00:11:13.560 --> 00:11:14.090
&gt;&gt; Jon: Input.

201
00:11:14.090 --> 00:11:15.500
&gt;&gt; Will: Which is?

202
00:11:15.500 --> 00:11:16.500
&gt;&gt; Jon: Which is Jon.

203
00:11:16.500 --> 00:11:18.878
&gt;&gt; Will: Which is Jon, fab,
exactly, which is Jon.

204
00:11:18.878 --> 00:11:20.581
And that.

205
00:11:23.166 --> 00:11:28.743
&gt;&gt; Will: Which is Jon, and
that then, will be assigned

206
00:11:28.743 --> 00:11:33.910
to post as a JavaScript string, great.

207
00:11:33.910 --> 00:11:38.651
If our model we're doing his usual
job then dataToView would now be,

208
00:11:38.651 --> 00:11:41.841
reorder executing every 15 milliseconds,

209
00:11:41.841 --> 00:11:46.100
it will be executing to update Jon,
both here and here.

210
00:11:46.100 --> 00:11:49.931
Nothing displayed to the user is not
dependent on the underlying state for

211
00:11:49.931 --> 00:11:53.580
more than like 14 milliseconds,
before the change happens.

212
00:11:53.580 --> 00:11:57.991
However, before we do that, we have a,
I probably should have done will,

213
00:11:57.991 --> 00:11:59.244
shouldn't I?

214
00:11:59.244 --> 00:12:00.970
No, rather than Jon.

215
00:12:00.970 --> 00:12:03.870
Okay, we'll probably
change that in a second.

216
00:12:03.870 --> 00:12:09.251
So, we have a conditional, people,

217
00:12:09.251 --> 00:12:15.720
which is assessing is our,
post value will.

218
00:12:15.720 --> 00:12:17.248
Phil, is that post value will?

219
00:12:17.248 --> 00:12:18.759
&gt;&gt; Speaker 6: No.
&gt;&gt; Will: No, it's not.

220
00:12:18.759 --> 00:12:23.829
It probably should be for
the purposes of our diagramming

221
00:12:23.829 --> 00:12:27.957
to save us doing, unnecessary diagramming.

222
00:12:27.957 --> 00:12:33.760
So sorry, Jon,
we have instead gonna have, that's fine.

223
00:12:33.760 --> 00:12:37.778
We're gonna have the users input be, will,

224
00:12:37.778 --> 00:12:42.130
which is going to do
something quite different.

225
00:12:42.130 --> 00:12:46.071
The user types will and
that shows up on the value here, and

226
00:12:46.071 --> 00:12:49.530
then that's our value
string that's going to be,

227
00:12:49.530 --> 00:12:54.033
sorry, the return that's gonna be
got off the input element, and

228
00:12:54.033 --> 00:12:57.919
that's going to be saved as
a JavaScript string on post.

229
00:12:57.919 --> 00:13:01.258
Now.

230
00:13:02.538 --> 00:13:06.836
&gt;&gt; Will: What is our value of post
in line 12 and our conditional Phil?

231
00:13:06.836 --> 00:13:08.291
&gt;&gt; Phil: Yeah, it is.

232
00:13:08.291 --> 00:13:13.043
&gt;&gt; Will: It is, so post is,
Will is true, and so

233
00:13:13.043 --> 00:13:20.537
we're going to run what method or
what access or object Phil?

234
00:13:20.537 --> 00:13:24.921
&gt;&gt; Speaket 7: We're gonna run the remove
method on the jsDiv accessor after.

235
00:13:24.921 --> 00:13:31.173
Brilliant, that's exactly what
we're gonna do, and technically,

236
00:13:31.173 --> 00:13:36.173
and this actually is a moment
to introduce the fact that,

237
00:13:36.173 --> 00:13:43.072
we have attached and unattached elements
on our C++ list, sorry, the DOM.

238
00:13:43.072 --> 00:13:48.568
&gt;&gt; Will: We do not actually, because we
still have a label and access an object in

239
00:13:48.568 --> 00:13:54.730
JavaScript memory, we don't actually
delete this DOM C++ element.

240
00:13:54.730 --> 00:14:01.586
Instead, it just gets removed from
the list of displayed elements and

241
00:14:01.586 --> 00:14:05.780
becomes an unattached element down here.

242
00:14:07.320 --> 00:14:11.512
And that's okay, I mean,
that is what it is.

243
00:14:12.645 --> 00:14:17.801
&gt;&gt; Will: But,
what's most significant here is,

244
00:14:17.801 --> 00:14:21.660
our Div has disappeared.

245
00:14:21.660 --> 00:14:26.246
The users view what they're
seeing is being affected from

246
00:14:26.246 --> 00:14:31.930
somewhere other than our
dataToview converter function.

247
00:14:31.930 --> 00:14:35.200
We are in other words,
having consequences for

248
00:14:35.200 --> 00:14:39.613
our data, sorry, for
our users' experience, what they see,

249
00:14:39.613 --> 00:14:43.560
based on things that are not
tracked in data, in memory.

250
00:14:44.680 --> 00:14:48.678
This is because it turns
out even the containers,

251
00:14:48.678 --> 00:14:54.009
the boxes that are being displayed
are themselves things that have

252
00:14:54.009 --> 00:15:00.610
underlying data associated with them,
whether we wanna admit it or not.

253
00:15:00.610 --> 00:15:04.873
Displaying or not displaying
a box is data being changed,

254
00:15:04.873 --> 00:15:09.900
in this case, the data of true or
false, is that box there or not?

255
00:15:09.900 --> 00:15:11.367
Is that container there or not?

256
00:15:11.367 --> 00:15:16.068
If we want our dataToview function
to actually capture all pipe,

257
00:15:16.068 --> 00:15:21.366
all possible things that the user can
change and what they see through it,

258
00:15:21.366 --> 00:15:25.809
we need to put our element creation and
or in theory removal but

259
00:15:25.809 --> 00:15:30.357
already unlike, isn't it better
to not create it every time.

260
00:15:30.357 --> 00:15:35.058
Well we'll see, into a dataToview
function with it turns out,

261
00:15:35.058 --> 00:15:38.715
even our elements existence or
not is a result of,

262
00:15:38.715 --> 00:15:42.980
there is something the user is seeing and
can change.

263
00:15:42.980 --> 00:15:46.256
And in any real application,
if you are writing a message, or

264
00:15:46.256 --> 00:15:50.102
if you're posting a tweet and it shows
up right below, that is a new div.

265
00:15:50.102 --> 00:15:54.961
That is a new division on the page
has a new element being added,

266
00:15:54.961 --> 00:15:58.460
that is a previously not there and
now there.

267
00:15:58.460 --> 00:16:01.249
That is,
the user is changing what they see.

268
00:16:01.249 --> 00:16:03.054
That is the user changing the content.

269
00:16:03.054 --> 00:16:06.347
And therefore, that is, by implication,

270
00:16:06.347 --> 00:16:10.893
the user changing data and
view, and what they're seeing.

271
00:16:10.893 --> 00:16:13.905
Actually, let's rerun dataToView.

272
00:16:13.905 --> 00:16:15.394
It's gonna rerun in a second, right?

273
00:16:15.394 --> 00:16:15.970
Let's do that.

274
00:16:15.970 --> 00:16:21.679
Let's have a, handleInput is finished
executing, unless I've missed anything.

275
00:16:21.679 --> 00:16:23.369
Stop me if I have.

276
00:16:23.369 --> 00:16:28.526
And in a moment, dataToView is going to,
in its usual loop,

277
00:16:28.526 --> 00:16:32.179
start executing because of setInterval.

278
00:16:32.179 --> 00:16:33.977
And so there it is.

279
00:16:33.977 --> 00:16:42.127
dataToView, auto parens
added via JavaScript,

280
00:16:42.127 --> 00:16:46.984
brand new what, everybody?

281
00:16:46.984 --> 00:16:49.105
&gt;&gt; Speaker 2: Execution context.

282
00:16:49.105 --> 00:16:52.080
&gt;&gt; Will: Help me out while
I'm getting the pen to work.

283
00:16:52.080 --> 00:16:54.511
Brand new execution context.

284
00:16:54.511 --> 00:16:55.690
There it is.

285
00:16:57.403 --> 00:16:59.615
It's writing so nicely on my preview.

286
00:16:59.615 --> 00:17:02.841
There it is, beautiful,
brand new execution context.

287
00:17:02.841 --> 00:17:04.121
Doesn't that look fantastic?

288
00:17:04.121 --> 00:17:05.913
Into it we go.

289
00:17:05.913 --> 00:17:11.780
We are going to what?

290
00:17:11.780 --> 00:17:18.349
Ian, what are we gonna do in our first
line of our dataToView conversion?

291
00:17:18.349 --> 00:17:23.341
&gt;&gt; Ian: We're going to
use the accessor object

292
00:17:23.341 --> 00:17:28.490
jsInput, and assign its value to post.

293
00:17:28.490 --> 00:17:32.802
But the value is actually going
to be a method provided to us

294
00:17:32.802 --> 00:17:36.175
by the DOM that we can use in JavaScript-
&gt;&gt; Will: Beautiful.

295
00:17:36.175 --> 00:17:37.010
&gt;&gt; Ian: To assign its value.

296
00:17:37.010 --> 00:17:39.473
&gt;&gt; Will: And
look what we're gonna do there, people.

297
00:17:39.473 --> 00:17:45.082
We're going to ensure the user only
sees stuff that we got from data,

298
00:17:45.082 --> 00:17:49.059
because that makes our
lives wonderfully easy.

299
00:17:49.059 --> 00:17:51.275
And so Will shows up.

300
00:17:51.275 --> 00:17:54.436
I don't need to puzzle about
what's gonna be displayed.

301
00:17:54.436 --> 00:17:59.224
It depends on my data, and
it's what's described in my one place,

302
00:17:59.224 --> 00:18:01.835
my dataToView converter function.

303
00:18:01.835 --> 00:18:03.441
I read my next line,

304
00:18:03.441 --> 00:18:08.276
my dataToView converter function
should work as expected.

305
00:18:08.276 --> 00:18:12.597
Okay, jsDiv,
tell me what's happening here, Ian?

306
00:18:12.597 --> 00:18:17.254
&gt;&gt; Ian: jsDiv accessor object for
the div is getting its

307
00:18:17.254 --> 00:18:20.731
text content setter called-
&gt;&gt; Will: Yeah.

308
00:18:20.731 --> 00:18:22.811
&gt;&gt; Ian: With a parameter of post.

309
00:18:22.811 --> 00:18:24.281
&gt;&gt; Will: And it's going to?

310
00:18:24.281 --> 00:18:25.672
&gt;&gt; Ian: It's not attached to the document,
so

311
00:18:25.672 --> 00:18:27.451
we're not actually gonna see anything,
right?

312
00:18:27.451 --> 00:18:29.476
&gt;&gt; Will: But
we're gonna add the string, Will.

313
00:18:29.476 --> 00:18:31.857
I'm happy, I'm not even getting an error.

314
00:18:31.857 --> 00:18:33.877
[LAUGH] I'm thrilled.

315
00:18:33.877 --> 00:18:38.269
And the user is so proud,
I've managed to type in Will,

316
00:18:38.269 --> 00:18:40.891
maybe this is just a prank for me.

317
00:18:40.891 --> 00:18:43.150
So I've typed in my name, I'm thrilled.

318
00:18:43.150 --> 00:18:46.262
And the preview div disappears.

319
00:18:50.280 --> 00:18:54.206
&gt;&gt; Will: I get no error for it, and I've
got no idea where to track down what's

320
00:18:54.206 --> 00:18:58.281
caused my, now, look, it's not
the case that we couldn't fix this.

321
00:18:58.281 --> 00:19:00.221
We heard a suggestion immediately,
like, wait,

322
00:19:00.221 --> 00:19:02.351
wait, wait,
are you checking whether there's a div?

323
00:19:02.351 --> 00:19:05.601
But immediately, wow,
what a thing to have to do!

324
00:19:05.601 --> 00:19:10.588
I thank you to our friend online who
kinda teed up, that before we try and

325
00:19:10.588 --> 00:19:14.662
display content we're gonna need to,
in another place,

326
00:19:14.662 --> 00:19:19.341
do a conditional check on what's
currently rendered on the page.

327
00:19:19.341 --> 00:19:24.141
Whether we can then add
text to that element.

328
00:19:24.141 --> 00:19:27.810
I'm not even sure how we're checking
whether it's being displayed or not,

329
00:19:27.810 --> 00:19:29.851
but we are gonna do
that in our dataToView.

330
00:19:29.851 --> 00:19:32.877
And that's only gonna be necessary if,

331
00:19:32.877 --> 00:19:37.245
we gotta check if, okay,
I'm sort of stumbling around.

332
00:19:37.245 --> 00:19:39.586
It's not that it's
impossible by any means,

333
00:19:39.586 --> 00:19:41.875
we can certainly fix
this code very quickly.

334
00:19:41.875 --> 00:19:46.495
It's whether at a thousand elements,
is this the best way to have

335
00:19:46.495 --> 00:19:51.619
condition saying, if the DOM element's
being removed, or not there,

336
00:19:51.619 --> 00:19:56.831
or unattached, sorry, then please
don't try and set its text content.

337
00:19:56.831 --> 00:20:01.200
I've already had to deal with three
different steps there of a user's journey.

338
00:20:01.200 --> 00:20:03.360
And there's another path
that you could take.

339
00:20:03.360 --> 00:20:09.721
Imagine if all I have to reason about is,
what is the state of the universe?

340
00:20:09.721 --> 00:20:13.780
And the user can change that, but I don't
really care what they change it from or

341
00:20:13.780 --> 00:20:16.160
to, I just care about
what's the state of it.

342
00:20:16.160 --> 00:20:20.471
And then off that display my content.

343
00:20:20.471 --> 00:20:22.501
What a leveling up of reasoning.

344
00:20:22.501 --> 00:20:23.301
Is it perfect?

345
00:20:23.301 --> 00:20:25.261
No, we're gonna see
those trade offs off it.

346
00:20:25.261 --> 00:20:27.971
Is it at least restrictive and
predictable?

347
00:20:27.971 --> 00:20:29.411
You bet it is.

348
00:20:29.411 --> 00:20:31.131
This is our source of truth.

349
00:20:31.131 --> 00:20:33.261
This is what determines
what's gonna show up.

350
00:20:33.261 --> 00:20:39.863
Not random other callback
handler plus initial.

351
00:20:39.863 --> 00:20:44.401
Don't forget that even input and
div being there in the first place,

352
00:20:44.401 --> 00:20:46.131
is a consequence of data.

353
00:20:46.131 --> 00:20:50.511
That is to say, there is input and
div true, versus now input and

354
00:20:50.511 --> 00:20:54.343
div, sorry,
div false input still true, right?

355
00:20:54.343 --> 00:20:57.465
Don't think that this being up here is,
as long as it can be turned off,

356
00:20:57.465 --> 00:20:58.831
then there is state behind it.

357
00:20:58.831 --> 00:21:00.480
There is true or false.

358
00:21:00.480 --> 00:21:06.192
So we just didn't realize that actually
we started off with implicitly input and

359
00:21:06.192 --> 00:21:08.131
div true exist on the page.

360
00:21:08.131 --> 00:21:10.471
And then with this handler's run,
we turned it off.

361
00:21:10.471 --> 00:21:15.681
We want to have every piece
of view that can be changed.

362
00:21:15.681 --> 00:21:18.231
It must have corresponding data for
it to be changed.

363
00:21:18.231 --> 00:21:21.981
We want to make that data explicit.

364
00:21:21.981 --> 00:21:25.335
Including whether or not the container for

365
00:21:25.335 --> 00:21:29.724
our more obvious data,
the text, is even there or not.

