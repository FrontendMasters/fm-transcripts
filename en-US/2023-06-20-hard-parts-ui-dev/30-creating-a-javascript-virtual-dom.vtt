WEBVTT

1
00:00:00.023 --> 00:00:04.054
&gt;&gt; Will Sentance: So, we are now gonna
diagram through a full implementation of,

2
00:00:04.054 --> 00:00:08.096
albeit, a very non-edge case handling,
visual virtual DOM.

3
00:00:08.096 --> 00:00:12.259
So non-edge case handling,
it can only handle two elements.

4
00:00:12.259 --> 00:00:15.493
Well, we're gonna make it
much more flexible very soon.

5
00:00:15.493 --> 00:00:17.363
We start with something minimal so

6
00:00:17.363 --> 00:00:21.368
that we can appreciate when we add
that flexibility, why we are doing it.

7
00:00:21.368 --> 00:00:25.932
But in this case, we have two elements
represented in JavaScript in our code.

8
00:00:25.932 --> 00:00:30.031
Now in practice, those are dynamic pieces
of content in that, which is kinda cool,

9
00:00:30.031 --> 00:00:32.123
right, that's why HTML didn't give us.

10
00:00:32.123 --> 00:00:36.237
It is the ability to have dynamic
content described in our code.

11
00:00:36.237 --> 00:00:41.977
That will then evaluate to actual values,
name becomes empty string here,

12
00:00:41.977 --> 00:00:47.087
name become, yeah, hello,
empty string, once we execute create

13
00:00:47.087 --> 00:00:52.489
VDOM off that given state data in
JavaScript, once that data changes.

14
00:00:52.489 --> 00:00:53.529
How does it change?

15
00:00:53.529 --> 00:00:58.369
The only way users are allowed to
fetch what they see is via a change

16
00:00:58.369 --> 00:00:59.960
of data in a handler.

17
00:00:59.960 --> 00:01:01.013
What's the handler?

18
00:01:01.013 --> 00:01:03.397
I can see it defined as handle here,
once that approach,

19
00:01:03.397 --> 00:01:04.646
which we call a handle input.

20
00:01:04.646 --> 00:01:08.384
Once that has been executed and
our data changes,

21
00:01:08.384 --> 00:01:12.389
I have a feeling that update
DOM is gonna come along and

22
00:01:12.389 --> 00:01:16.305
rerun create VDOM with our
new data parsed through,

23
00:01:16.305 --> 00:01:21.208
funneled into our JavaScript
evaluated description in memory.

24
00:01:21.208 --> 00:01:25.333
In VDOM, in global,
because everything's in global for ease,

25
00:01:25.333 --> 00:01:28.715
of describing what's gonna
show up on our C++ DOM.

26
00:01:28.715 --> 00:01:31.445
All this stuff would not
really be necessary,

27
00:01:31.445 --> 00:01:34.665
people, if we just had direct
access to our C++ DOM.

28
00:01:34.665 --> 00:01:38.989
Meaning, we didn't have to describe it
first in JavaScript even to get any hope

29
00:01:38.989 --> 00:01:41.959
of knowing what's going on
in this separate runtime,

30
00:01:41.959 --> 00:01:46.108
except by accessing get a set of
properties whenever we wanna find out, no.

31
00:01:46.108 --> 00:01:48.096
Unfortunately, it doesn't exist,
so there we go, whatever.

32
00:01:48.096 --> 00:01:49.972
We're dealing with it by building our own.

33
00:01:49.972 --> 00:01:54.760
So here we go, we have our beautiful
new functioning pens here.

34
00:01:54.760 --> 00:01:58.745
So there's our web page.

35
00:01:58.745 --> 00:02:00.424
There it is.

36
00:02:00.424 --> 00:02:02.926
I already know that, good.

37
00:02:02.926 --> 00:02:04.469
Can you give me feedback?

38
00:02:04.469 --> 00:02:09.624
&gt;&gt; Phil: [LAUGH]
&gt;&gt; Will Sentance: And now we have a DOM in

39
00:02:09.624 --> 00:02:15.055
C++, a list of,
&gt;&gt; Will Sentance: Elements.

40
00:02:15.055 --> 00:02:17.421
Take it all the way to here,
I think, a list of elements.

41
00:02:17.421 --> 00:02:20.183
That's quite big and nice, okay?

42
00:02:20.183 --> 00:02:25.590
Remember our schema is we load in,
first, a HTML file,

43
00:02:25.590 --> 00:02:31.228
and that loads into our web
browser engine where the parser

44
00:02:31.228 --> 00:02:36.537
interprets it and
fills into our DOM actual elements.

45
00:02:36.537 --> 00:02:38.798
Did anyone get tired of this yet?

46
00:02:38.798 --> 00:02:43.325
The JavaScript engine
kicks off when we hit

47
00:02:43.325 --> 00:02:48.604
a JavaScript script tag in our HTML,
which we do,

48
00:02:48.604 --> 00:02:54.661
which triggers our JavaScript
engine to start running.

49
00:02:54.661 --> 00:03:00.377
But we know that from our HTML,
we already have a body element on the DOM,

50
00:03:00.377 --> 00:03:02.926
it describes the overall page.

51
00:03:02.926 --> 00:03:07.873
Our layout and render engine has
done the job of adding that element,

52
00:03:07.873 --> 00:03:12.820
and all future ones, in this C++
list technique and object model of

53
00:03:12.820 --> 00:03:17.960
the page to the document, old fashion
word for app, or page, I guess.

54
00:03:17.960 --> 00:03:23.343
Okay, we then have our dividing line,
here it is,

55
00:03:23.343 --> 00:03:28.990
which is JavaScript on the left,
C++ on the right.

56
00:03:28.990 --> 00:03:33.830
And we have in memory in JavaScript,

57
00:03:33.830 --> 00:03:38.880
what,
&gt;&gt; Will Sentance: What

58
00:03:38.880 --> 00:03:43.267
do we have in memory in JavaScript?

59
00:03:43.267 --> 00:03:46.411
Phil, what's our object
in memory in JavaScript?

60
00:03:46.411 --> 00:03:48.043
Document.
Document,

61
00:03:48.043 --> 00:03:54.015
that's there automatically as
soon as we load JavaScript.

62
00:03:54.015 --> 00:03:55.435
All right, good stuff.

63
00:03:55.435 --> 00:03:56.769
It has a bunch of useful methods.

64
00:03:56.769 --> 00:04:00.793
What's the one we're using
here in Line 18, Phil?

65
00:04:00.793 --> 00:04:02.471
&gt;&gt; Phil: Create element.

66
00:04:02.471 --> 00:04:05.379
&gt;&gt; Will Sentance: Beautiful,
create element.

67
00:04:05.379 --> 00:04:11.981
And that is also joined by
a getter-setter property body.

68
00:04:11.981 --> 00:04:17.209
Both know where to look when
they're used because of our friend,

69
00:04:17.209 --> 00:04:19.881
the hidden link to where, Phil?

70
00:04:19.881 --> 00:04:21.044
&gt;&gt; Phil: The DOM.

71
00:04:21.044 --> 00:04:29.760
&gt;&gt; Will Sentance: To the full DOM, the
full list of elements in C++, beautiful.

72
00:04:29.760 --> 00:04:35.727
Exactly, that was a function, that one's
a property, but both act to execute code,

73
00:04:35.727 --> 00:04:39.998
either getting or setting, or
running some other behavior.

74
00:04:39.998 --> 00:04:43.208
Okay, now we get into regular JavaScript,
over to you Justice.

75
00:04:43.208 --> 00:04:46.217
Do I ask the same people
always every time?

76
00:04:46.217 --> 00:04:48.871
Okay, over to you John, what are we doing?

77
00:04:48.871 --> 00:04:52.077
We're defining four variables,
what are we defining here?

78
00:04:52.077 --> 00:04:54.742
&gt;&gt; John: We are declaring
name to empty string.

79
00:04:54.742 --> 00:04:55.767
&gt;&gt; Will Sentance: Yep.

80
00:04:55.767 --> 00:05:01.836
&gt;&gt; John: jsInput undefined, and
virtual DOM, I guess, [INAUDIBLE].

81
00:05:01.836 --> 00:05:03.875
&gt;&gt; Will Sentance: Yep, all unassigned, and

82
00:05:03.875 --> 00:05:07.695
these are gonna be filled
in with objects and VDOM.

83
00:05:07.695 --> 00:05:11.870
&gt;&gt; John: And then we are declaring
a function create virtual DOM.

84
00:05:11.870 --> 00:05:15.482
&gt;&gt; Will Sentance: Yeah,
I should really have put VDOM.

85
00:05:15.482 --> 00:05:18.736
I'd like to see it as being above,
because the flow is down through.

86
00:05:18.736 --> 00:05:22.089
So I think I wanna do this,
I think this is right.

87
00:05:22.089 --> 00:05:26.140
Let me just switch these around.

88
00:05:26.140 --> 00:05:28.056
Remember it has no order here, right?

89
00:05:28.056 --> 00:05:31.141
In JavaScript, wherever I assign,
it doesn't have an order here,

90
00:05:31.141 --> 00:05:32.853
it's just a visual representation.

91
00:05:32.853 --> 00:05:34.906
None of this really is real here.

92
00:05:34.906 --> 00:05:37.138
[LAUGH] Let's acknowledge that.

93
00:05:37.138 --> 00:05:42.010
So VDOM, I think I'm gonna put
above because it's where the data's

94
00:05:42.010 --> 00:05:46.967
gonna flow through, flow from here
to here down, not literally, but

95
00:05:46.967 --> 00:05:50.176
just in terms of our
visual representation.

96
00:05:50.176 --> 00:05:55.683
Then I'll put jsInput here and jsDiv here.

97
00:05:55.683 --> 00:05:58.723
It's not ideal for referencing
the actual elements, but it's okay.

98
00:05:58.723 --> 00:06:01.286
Perfect, thank you, John,
keep going as you said.

99
00:06:01.286 --> 00:06:03.892
&gt;&gt; John: And
then we are declaring handle function.

100
00:06:03.892 --> 00:06:05.666
&gt;&gt; Will Sentance: So, yeah, create VDOM.

101
00:06:05.666 --> 00:06:06.248
&gt;&gt; John: Yeah.

102
00:06:06.248 --> 00:06:08.157
&gt;&gt; Will Sentance: It's a function,
you did it already, it's on me.

103
00:06:08.157 --> 00:06:10.377
Next one.

104
00:06:10.377 --> 00:06:12.577
&gt;&gt; John: Then we are declaring
handle function, and

105
00:06:12.577 --> 00:06:14.782
then we are declaring update DOM function.

106
00:06:14.782 --> 00:06:17.929
&gt;&gt; Will Sentance: Then
handle is a function.

107
00:06:17.929 --> 00:06:21.606
And then, as you say,
update DOM is a function,

108
00:06:21.606 --> 00:06:26.383
which was what our dataToview
was previously roughly called.

109
00:06:26.383 --> 00:06:30.972
And then we're now going to put all the
code that does the job of converting our

110
00:06:30.972 --> 00:06:35.429
full description of what we want our
element to have, is gonna be an input.

111
00:06:35.429 --> 00:06:38.309
It's gonna have this value property,
it's gonna have this handler.

112
00:06:38.309 --> 00:06:42.609
We're putting all the job of
converting that generic set of

113
00:06:42.609 --> 00:06:46.224
information in one function called what,
John?

114
00:06:46.224 --> 00:06:46.962
&gt;&gt; John: Convert.

115
00:06:46.962 --> 00:06:48.960
&gt;&gt; Will Sentance: Convert, exactly.

116
00:06:48.960 --> 00:06:50.376
There it is.

117
00:06:50.376 --> 00:06:56.437
And now we get to running our sort of
render every 15 millisecond cycle,

118
00:06:56.437 --> 00:07:01.227
with our call to setInterval
to set what function, John,

119
00:07:01.227 --> 00:07:04.380
to execute every 15 milliseconds?

120
00:07:04.380 --> 00:07:06.363
Or at least, sorry, we'll get that right,

121
00:07:06.363 --> 00:07:08.885
be added to the callback
queue every 15 milliseconds?

122
00:07:08.885 --> 00:07:11.017
Can't say it's gonna execute
every 15 milliseconds, but

123
00:07:11.017 --> 00:07:12.129
we add it back into JavaScript.

124
00:07:12.129 --> 00:07:13.885
And that function is what?

125
00:07:13.885 --> 00:07:14.767
&gt;&gt; John: Update DOM.

126
00:07:14.767 --> 00:07:18.355
&gt;&gt; Will Sentance: Update DOM, and
it's the whole definition of it.

127
00:07:18.355 --> 00:07:21.841
And then how many milliseconds again?

128
00:07:21.841 --> 00:07:22.981
John, how many milliseconds every?

129
00:07:22.981 --> 00:07:23.802
&gt;&gt; John: 15, yep.

130
00:07:23.802 --> 00:07:28.887
&gt;&gt; Will Sentance: And so
that goes to timer in the web browser,

131
00:07:28.887 --> 00:07:36.454
and adds an interval of 15
milliseconds executing update DOM.

132
00:07:36.454 --> 00:07:40.895
I really should have left this dataToview,
but okay.

133
00:07:40.895 --> 00:07:44.774
Although it's update DOM, I guess,
right, because it's, yeah,

134
00:07:44.774 --> 00:07:46.766
converting our data into our view.

135
00:07:46.766 --> 00:07:52.559
Okay, this line is done,
and we're done with it.

136
00:07:52.559 --> 00:07:57.129
Let's make sure we have our cool stack,
I can hear it being whispered.

137
00:07:57.129 --> 00:07:58.421
Raise your hand if you whispered that?

138
00:07:58.421 --> 00:08:00.837
So I got a logic ball on, excellent, John.

139
00:08:00.837 --> 00:08:07.545
Fantastic, call stack and
then event loop and

140
00:08:07.545 --> 00:08:12.534
our call back queue, there it is.

141
00:08:12.534 --> 00:08:14.310
Okay, all set up done.

142
00:08:15.690 --> 00:08:19.509
We're getting quicker, sort of,
I mean, it's getting bigger,

143
00:08:19.509 --> 00:08:23.070
it's taking longer but,
here we go, all set up done.

144
00:08:23.070 --> 00:08:24.080
It's 50 milliseconds.

145
00:08:24.080 --> 00:08:30.058
It's passed and 50 milliseconds passes and
so what function is gonna be called back,

146
00:08:30.058 --> 00:08:35.170
Alexa, into JavaScript at 50
milliseconds or into the callback queue?

147
00:08:35.170 --> 00:08:36.713
Update DOM
&gt;&gt; Alexa: Update DOM,

148
00:08:36.713 --> 00:08:38.650
there's nothing in global.

149
00:08:38.650 --> 00:08:40.302
&gt;&gt; Will Sentance: There's
nothing on the call stack,

150
00:08:40.302 --> 00:08:42.753
all synchronous code is finished running,
so Alexa,

151
00:08:42.753 --> 00:08:45.440
where's update DOM appear
&gt;&gt; Alexa: In the call stack?

152
00:08:45.440 --> 00:08:46.050
&gt;&gt; Will Sentance: Yeah.

153
00:08:46.050 --> 00:08:50.829
Okay, and it's gonna have
prints added by JavaScript and

154
00:08:50.829 --> 00:08:55.810
Alexa, tell me what's going
to then happen in JavaScript.

155
00:08:57.380 --> 00:08:58.830
&gt;&gt; Alexa: We invoke it.

156
00:08:58.830 --> 00:08:59.730
&gt;&gt; Will Sentance: Yeah.

157
00:08:59.730 --> 00:09:02.583
Threaded execution goes inside and
we create a new?

158
00:09:02.583 --> 00:09:03.590
&gt;&gt; Alexa: Execution context.

159
00:09:03.590 --> 00:09:06.107
&gt;&gt; Will Sentance: Execution context.

160
00:09:06.107 --> 00:09:11.233
I don't want to get too
indulgent in it being shouted.

161
00:09:11.233 --> 00:09:14.741
I love it, but
I don't want people to think I'm.

162
00:09:14.741 --> 00:09:16.266
Right, perfect.

163
00:09:16.266 --> 00:09:17.253
UpdateDOM.

164
00:09:17.253 --> 00:09:19.217
&gt;&gt; Phil: [LAUGH]
&gt;&gt; Will Sentance: I don't want people to

165
00:09:19.217 --> 00:09:20.740
think I'm sort of maniacal.

166
00:09:20.740 --> 00:09:22.840
There it is, updateDOM.

167
00:09:24.170 --> 00:09:25.870
So thread [INAUDIBLE] into it.

168
00:09:25.870 --> 00:09:27.111
To be fair, it does invigorate me and

169
00:09:27.111 --> 00:09:29.200
it also does give me a chance
to think what's happening next.

170
00:09:29.200 --> 00:09:30.800
Now I know what's gonna happen.

171
00:09:30.800 --> 00:09:35.094
All right, we go into it where we
are going to do our job of produce,

172
00:09:35.094 --> 00:09:40.166
turning our little JavaScript kind of
preliminary representation of what's

173
00:09:40.166 --> 00:09:45.430
gonna show up, into an evaluated,
actually data filled out version.

174
00:09:45.430 --> 00:09:50.260
Kinda nice but everything's got a visual
version in the code that is obviously not

175
00:09:50.260 --> 00:09:53.130
got the actual values as
that's gonna change and

176
00:09:53.130 --> 00:09:57.610
now we're gonna get in JavaScript fully
evaluated data propagated at least

177
00:09:57.610 --> 00:10:01.890
into the JavaScript memory version
of it into the global constant VDOM.

178
00:10:01.890 --> 00:10:06.260
So help me out here Alexa,
if you don't mind.

179
00:10:06.260 --> 00:10:09.946
&gt;&gt; Alexa: Yes, we're reassigning
VDOM to the evaluated result of

180
00:10:09.946 --> 00:10:11.490
invoking createVDOM.

181
00:10:11.490 --> 00:10:16.389
&gt;&gt; Will Sentance: Okay reassigning VDOM,
just again because it makes it easier

182
00:10:16.389 --> 00:10:20.540
to the evaluated result
of calling createVDOM.

183
00:10:20.540 --> 00:10:25.200
Which we know is going to return out and
we're not gonna go into it,

184
00:10:25.200 --> 00:10:30.775
well we can, it's gonna go on the cool
sack, createVDOM is on the cool stack and

185
00:10:30.775 --> 00:10:36.040
into it we go and it's going to return
out an array of two sub arrays.

186
00:10:36.040 --> 00:10:39.855
Each describing a different element and
that's going to be returned,

187
00:10:39.855 --> 00:10:42.750
you said into what global constant, Alexa?

188
00:10:42.750 --> 00:10:43.270
&gt;&gt; Alexa: VDOM.

189
00:10:43.270 --> 00:10:46.162
&gt;&gt; Will Sentance: VDOM, so I'm gonna
draw it actually out here just to save

190
00:10:46.162 --> 00:10:47.360
redrawing it.

191
00:10:47.360 --> 00:10:51.823
And can you just help me with what that
first array elements going to evaluate

192
00:10:51.823 --> 00:10:52.880
to, Alexa?

193
00:10:52.880 --> 00:10:56.320
&gt;&gt; Alexa: Yes, so the first sub
array will have the string input.

194
00:10:56.320 --> 00:10:57.250
&gt;&gt; Will Sentance: String input.

195
00:10:57.250 --> 00:11:00.208
&gt;&gt; Alexa: And then the next element will

196
00:11:00.208 --> 00:11:00.877
be-
&gt;&gt; Will Sentance: What's our value

197
00:11:00.877 --> 00:11:01.714
of name?
&gt;&gt; Alexa: Empty string.

198
00:11:01.714 --> 00:11:04.360
&gt;&gt; Will Sentance: Empty string and then.

199
00:11:04.360 --> 00:11:05.500
&gt;&gt; Alexa: Then a function definition.

200
00:11:05.500 --> 00:11:06.560
&gt;&gt; Will Sentance: Yes, I handle function.

201
00:11:06.560 --> 00:11:10.940
I'm just gonna put it up here but
it's the whole handle.

202
00:11:10.940 --> 00:11:14.050
And technically it's referring to
this function here in memory, but

203
00:11:14.050 --> 00:11:16.367
just to show it up on the code,
and then our next, and

204
00:11:16.367 --> 00:11:19.420
there's all description,
by the way, just think about that.

205
00:11:19.420 --> 00:11:23.747
It's gonna be an input element with no
value content right now, no preview text,

206
00:11:23.747 --> 00:11:26.520
and a handler defined attached to it,
really cool.

207
00:11:26.520 --> 00:11:28.230
None of this by the way is truth.

208
00:11:28.230 --> 00:11:30.750
Again, these are efforts by us.

209
00:11:30.750 --> 00:11:31.440
Not easy.

210
00:11:31.440 --> 00:11:33.620
I'm not going to I,
[LAUGH] I'm not gonna say it.

211
00:11:33.620 --> 00:11:36.560
I'm not gonna say it's too catchy.

212
00:11:36.560 --> 00:11:42.146
All right, next element describing
associated corresponding DOM element,

213
00:11:42.146 --> 00:11:43.930
we hope, is what Alexa?

214
00:11:45.030 --> 00:11:48.810
&gt;&gt; Alexa: Our first, well,
our zeroth element is the stringDiv.

215
00:11:48.810 --> 00:11:49.428
&gt;&gt; Will Sentance: Perfect.

216
00:11:49.428 --> 00:11:52.800
&gt;&gt; Alexa: And then,
what evaluates to the string hello,

217
00:11:52.800 --> 00:11:55.508
comma, space, exclamation point.

218
00:11:55.508 --> 00:11:58.394
&gt;&gt; Will Sentance: Space,
exclamation mark, beautiful.

219
00:11:58.394 --> 00:12:00.172
And we don't have a handler associated.

220
00:12:00.172 --> 00:12:02.940
Okay, fab.

221
00:12:02.940 --> 00:12:07.943
Look at that, a fully evaluated,
that means turned into its real values

222
00:12:07.943 --> 00:12:12.783
representation of what's gonna show
up on the page that was described

223
00:12:12.783 --> 00:12:17.311
first in lines four and
five in a generic when there's real data.

224
00:12:17.311 --> 00:12:21.190
Evaluate this into what will end
up being the actual stateful,

225
00:12:21.190 --> 00:12:25.470
probably a great way to save
content that shows up on the page.

226
00:12:25.470 --> 00:12:28.735
All right, so now we go ahead and
do the conversion,

227
00:12:28.735 --> 00:12:34.220
which is we're gonna take this content and
we're gonna run it through convert.

228
00:12:34.220 --> 00:12:36.660
This content, this info and
run it through convert.

229
00:12:36.660 --> 00:12:40.287
At the output access
objects are gona go here,

230
00:12:40.287 --> 00:12:43.640
the output DOM elements are gonna go here.

231
00:12:43.640 --> 00:12:46.348
Cuz a bit tricky here but let's do,

232
00:12:46.348 --> 00:12:52.218
it we're inside of updateDom's execution
context and let's draw it out and

233
00:12:52.218 --> 00:12:56.840
we are going to assign to,
don't get ahead of ourselves.

234
00:12:56.840 --> 00:12:58.730
Getting a bit too confident.

235
00:12:58.730 --> 00:13:04.270
Assigned to jsInput,
the evaluated result of calling convert.

236
00:13:04.270 --> 00:13:06.920
Paul, can you help me out here?

237
00:13:06.920 --> 00:13:11.100
We're calling convert
with VDOM position zero.

238
00:13:11.100 --> 00:13:12.930
Well, talk me through it.

239
00:13:12.930 --> 00:13:18.730
&gt;&gt; Paul: Okay, [COUGH], so
the variable jsInput is reassigned.

240
00:13:18.730 --> 00:13:20.040
&gt;&gt; Will Sentance: Yes, beautiful.

241
00:13:20.040 --> 00:13:23.490
&gt;&gt; Paul: The result from
the Convert function.

242
00:13:23.490 --> 00:13:26.410
&gt;&gt; Will Sentance: Fantastic and
into where we go.

243
00:13:26.410 --> 00:13:31.216
&gt;&gt; Paul: So into the Convert
function the node is passed that

244
00:13:31.216 --> 00:13:36.280
is the VDOM 0 element which
is the first sub array.

245
00:13:36.280 --> 00:13:38.287
&gt;&gt; Will Sentance: Yes
&gt;&gt; Paul: And so

246
00:13:38.287 --> 00:13:43.140
the first thing it does
is it creates a constant.

247
00:13:43.140 --> 00:13:45.080
&gt;&gt; Will Sentance: That's memory by
the way people that's our memory.

248
00:13:45.080 --> 00:13:47.230
I forgot to write memory but
that's our local memory.

249
00:13:47.230 --> 00:13:50.667
Yes exactly, you create a constant LM,

250
00:13:50.667 --> 00:13:56.560
which is gonna be the result of
calling our DOM method, which is?

251
00:13:56.560 --> 00:13:57.400
&gt;&gt; Paul: createElement.

252
00:13:57.400 --> 00:13:58.470
&gt;&gt; Will Sentance: Exactly.

253
00:13:58.470 --> 00:14:05.430
On the document object,
which we know has passed what?

254
00:14:05.430 --> 00:14:08.945
&gt;&gt; Paul: It's passed the first-
&gt;&gt; Will Sentance: You're so kind,

255
00:14:08.945 --> 00:14:10.465
doing my pronunciation.

256
00:14:10.465 --> 00:14:13.010
[LAUGH] You're so kind Paul.

257
00:14:13.010 --> 00:14:14.990
It's passed, there you go,
I'll do it for you.

258
00:14:14.990 --> 00:14:18.540
It's passed what?

259
00:14:18.540 --> 00:14:22.690
&gt;&gt; Paul: The first element of
that subarray, which is input.

260
00:14:22.690 --> 00:14:23.430
&gt;&gt; Will Sentance: Exactly.

261
00:14:23.430 --> 00:14:24.540
&gt;&gt; Paul: The string input.

262
00:14:24.540 --> 00:14:26.910
&gt;&gt; Will Sentance: The string input,
fabulous.

263
00:14:26.910 --> 00:14:31.794
And that uses the link from
the document object on which

264
00:14:31.794 --> 00:14:38.377
the createElement method is found to
the overall C++ list of elements,

265
00:14:38.377 --> 00:14:43.366
the DOM in which is going to
create what type of element,

266
00:14:43.366 --> 00:14:47.970
or is gonna instantiate
what class in the DOM?

267
00:14:47.970 --> 00:14:49.561
It's gonna be type what Paul?

268
00:14:49.561 --> 00:14:50.120
&gt;&gt; Paul: Input.

269
00:14:50.120 --> 00:14:52.300
&gt;&gt; Will Sentance: Input, perfect.

270
00:14:52.300 --> 00:14:58.570
Yeah, and we then get as its
output in JavaScript, what Paul?

271
00:15:01.060 --> 00:15:04.053
Cuz we we need a link to that, but
we can't just store a link, so

272
00:15:04.053 --> 00:15:05.760
we get created what in JavaScript?

273
00:15:05.760 --> 00:15:09.230
It's a, right,
a JavaScript object that represents that.

274
00:15:09.230 --> 00:15:12.863
Yes, exactly, with a hidden
link to that input on the DOM,

275
00:15:12.863 --> 00:15:16.590
and it has all the relevant functions,
in this case.

276
00:15:16.590 --> 00:15:20.996
Well, we're gonna NWL, now here, do you
see people, we're gonna end up trying to

277
00:15:20.996 --> 00:15:26.250
use text content, even though that's not
gonna actually do anything to our input.

278
00:15:26.250 --> 00:15:28.340
Cheeky, lazy, sure.

279
00:15:28.340 --> 00:15:34.720
In practice, a convert function here would
absolutely assess for is the element.

280
00:15:34.720 --> 00:15:38.177
In this case, is it linked to an input
element or is it linked to a DIV or

281
00:15:38.177 --> 00:15:40.060
is it linked to something else?

282
00:15:40.060 --> 00:15:43.880
Do not try and
set text content of an input element.

283
00:15:43.880 --> 00:15:50.036
In order to save code and space,
if it doesn't break it, we're not worried.

284
00:15:50.036 --> 00:15:57.428
But yeah, we do know that there's
input linked object accessor is

285
00:15:57.428 --> 00:16:03.633
going to have on it at least value and
on input as useful.

286
00:16:03.633 --> 00:16:09.086
Get a set of properties for
editing this created input element.

287
00:16:09.086 --> 00:16:11.749
Perfect, well,
let's go ahead and use them.

288
00:16:11.749 --> 00:16:16.054
In line 19, we're gonna use
textContent on that element, and

289
00:16:16.054 --> 00:16:18.650
it's going to allow us to set the text.

290
00:16:18.650 --> 00:16:20.610
Well, it's not gonna do any harm.

291
00:16:20.610 --> 00:16:22.830
We're going to skip over it.

292
00:16:22.830 --> 00:16:29.340
And instead we're gonna hit setting its
value, which does show up to the user.

293
00:16:29.340 --> 00:16:35.590
And we are going to set its value
via the setter, elem.value.

294
00:16:35.590 --> 00:16:41.000
Remember elem is now our local inside
this execution context, convert label.

295
00:16:41.000 --> 00:16:43.930
We're not calling a JS input
anymore here or not yet.

296
00:16:43.930 --> 00:16:48.259
It's generically elem because
we're inside convert before we

297
00:16:48.259 --> 00:16:50.680
return that out into JS input.

298
00:16:50.680 --> 00:16:56.589
And here the label of v object on
which the value setter is elem,

299
00:16:56.589 --> 00:16:59.822
and then we use that value setter to

300
00:16:59.822 --> 00:17:04.525
set on the DOM node the value
of input to what pool?

301
00:17:04.525 --> 00:17:08.257
What's our value on the description,
not name, sorry,

302
00:17:08.257 --> 00:17:12.370
I mean, it's certainly is name,
but it's from the what?

303
00:17:12.370 --> 00:17:15.978
Node position 1, our content-
&gt;&gt; Paul: Basically an empty string.

304
00:17:15.978 --> 00:17:18.676
&gt;&gt; Will Sentance: Yeah,
exactly it, please stop.

305
00:17:18.676 --> 00:17:21.306
Exactly, yeah,
stop trying to say what I'm not.

306
00:17:21.306 --> 00:17:26.436
And then finally we also do this with our

307
00:17:26.436 --> 00:17:31.720
on input setter, and set the handler for

308
00:17:31.720 --> 00:17:37.783
handling input on the DOM
node to what function

309
00:17:37.783 --> 00:17:45.700
that is in our array describing
our element in full, Paul?

310
00:17:45.700 --> 00:17:46.377
&gt;&gt; Paul: The handle function.

311
00:17:46.377 --> 00:17:49.880
&gt;&gt; Will Sentance: The handle function,
brilliant, there it is.

312
00:17:49.880 --> 00:17:52.842
The handle function, and

313
00:17:52.842 --> 00:17:57.560
that is going to show there, beautiful.

314
00:17:57.560 --> 00:18:01.717
God, it doesn't help having pens
work as wonderful, I'm so happy.

315
00:18:01.717 --> 00:18:03.087
Okay, beautiful.

316
00:18:03.087 --> 00:18:07.368
And now, in order that we
can still persist the link,

317
00:18:07.368 --> 00:18:12.129
after closing this execution
context to that DOM element,

318
00:18:12.129 --> 00:18:16.886
we are going to return out that
object into what global, for

319
00:18:16.886 --> 00:18:21.861
our ease of diagramming, Paul,
into what global constant?

320
00:18:21.861 --> 00:18:22.856
&gt;&gt; Paul: jsInput.

321
00:18:22.856 --> 00:18:24.356
&gt;&gt; Will Sentance: jsInput.

322
00:18:24.356 --> 00:18:25.330
There it is.

323
00:18:25.330 --> 00:18:30.170
Return, haven't written return for
a while, but there it is, return.

324
00:18:30.170 --> 00:18:35.792
And there we have in global,

325
00:18:35.792 --> 00:18:44.289
our accessor object to input,
&gt;&gt; Will Sentance: To input,

326
00:18:44.289 --> 00:18:49.717
there it is, to input and
it has its setter getter.

327
00:18:49.717 --> 00:18:53.410
Properties, yay, whoa.

328
00:18:53.410 --> 00:18:54.477
Thank you, thank you, yeah, yeah, exactly.

329
00:18:54.477 --> 00:18:56.596
No, not me to Paul, to Paul.

330
00:18:56.596 --> 00:18:58.280
That was really fab, Paul, thank you.

331
00:18:58.280 --> 00:18:58.829
Yeah, excellent.

332
00:19:00.120 --> 00:19:04.150
Okay, so now,
do we do the next one by analogy?

333
00:19:04.150 --> 00:19:05.198
You bet we do.

334
00:19:05.198 --> 00:19:09.210
[LAUGH] I'm not sure what that voice was.

335
00:19:09.210 --> 00:19:10.900
Regrettable I think is all it was.

336
00:19:14.380 --> 00:19:17.000
Yeah, we do by analogy.

337
00:19:17.000 --> 00:19:19.692
So jsDiv, Alexa, if you don't mind,

338
00:19:19.692 --> 00:19:25.010
just sorta give me what the object is
gonna be in the associated element here.

339
00:19:25.010 --> 00:19:29.165
Just talk me through as much as you can
and I'll just diagram fairly simply.

340
00:19:29.165 --> 00:19:33.891
&gt;&gt; Alexa: So we're redefining
jsDiv to be the result of calling

341
00:19:33.891 --> 00:19:38.707
convert on element one of our vDOM,
&gt;&gt; Will Sentance: Yep, there it is,

342
00:19:38.707 --> 00:19:39.600
which is?

343
00:19:39.600 --> 00:19:42.768
&gt;&gt; Alexa: So using document createElement,

344
00:19:42.768 --> 00:19:48.055
we are gonna create a div node
on the DOM that is unattached.

345
00:19:48.055 --> 00:19:49.580
&gt;&gt; Will Sentance: Yeah, perfect.

346
00:19:49.580 --> 00:19:52.654
It is actually pretty unhelpful to me to
do this without going through it line by

347
00:19:52.654 --> 00:19:53.640
line, but it's great.

348
00:19:53.640 --> 00:19:58.635
So, we're calling convert,
we're parsing in vDOM position 1,

349
00:19:58.635 --> 00:20:01.273
as Alexa says, which is div hello.

350
00:20:01.273 --> 00:20:06.252
And now our node parameter inside
the convert execution context refers to

351
00:20:06.252 --> 00:20:09.545
the index one element describing,
hopefully,

352
00:20:09.545 --> 00:20:13.100
the content we're gonna
display on the DOM.

353
00:20:13.100 --> 00:20:14.510
Exactly as Alexa said.

354
00:20:14.510 --> 00:20:20.210
We are then going to grab its node
position 0, which is, what Alexa?

355
00:20:20.210 --> 00:20:21.376
&gt;&gt; Alexa: Div.
&gt;&gt; Will Sentance: Div, and

356
00:20:21.376 --> 00:20:26.998
we're going to pass that string to
createElement to create in the DOM a,

357
00:20:26.998 --> 00:20:28.765
what type of element?

358
00:20:28.765 --> 00:20:29.477
&gt;&gt; Alexa: A div.

359
00:20:29.477 --> 00:20:30.918
&gt;&gt; Will Sentance: A div.

360
00:20:30.918 --> 00:20:33.460
And notice, well,
we'll see that in a second.

361
00:20:33.460 --> 00:20:36.690
There it is, a div, perfect.

362
00:20:36.690 --> 00:20:41.186
Now we're gonna use
the textContent setter that

363
00:20:41.186 --> 00:20:45.469
on the returned out inside
of here as element.

364
00:20:45.469 --> 00:20:48.687
So I guess, we could actually show that,
couldn't we?

365
00:20:48.687 --> 00:20:51.960
Well I guess we're gonna be-
&gt;&gt; Alexa: Locally stored.

366
00:20:51.960 --> 00:20:53.615
&gt;&gt; Will Sentance: Locally stored, exactly.

367
00:20:53.615 --> 00:20:55.670
&gt;&gt; Alexa: [INAUDIBLE] object
linked to our new DOM node.

368
00:20:55.670 --> 00:21:00.437
&gt;&gt; Will Sentance: Yeah, which we're then
gonna use a textContent setter on to

369
00:21:00.437 --> 00:21:04.931
set the text of the, so Alexa,
keep verbalizing for me.

370
00:21:04.931 --> 00:21:09.715
&gt;&gt; Alexa: Yes, so
we're gonna set the text content of

371
00:21:09.715 --> 00:21:15.013
that new div to be what is
at index one of our node,

372
00:21:15.013 --> 00:21:19.170
which is the string "Hellos, !".

373
00:21:19.170 --> 00:21:24.164
&gt;&gt; Will Sentance: Perfect, and we use the
textContent accessor on the elem, which is

374
00:21:24.164 --> 00:21:30.135
the object that we are now, because value
in on input don't do anything to a div.

375
00:21:30.135 --> 00:21:34.466
So we are now gonna return out that
elem with its accessor into what global

376
00:21:34.466 --> 00:21:37.027
constant according to line 13, Alexa?

377
00:21:37.027 --> 00:21:40.170
&gt;&gt; Alexa: jsDiv.
&gt;&gt; Will Sentance: jsDiv, brilliant.

378
00:21:40.170 --> 00:21:42.460
And so now at least we can therefore see.

379
00:21:42.460 --> 00:21:45.793
So what was our useful getter
setter that we had on here

380
00:21:45.793 --> 00:21:48.930
that we just used in line 19, sorry Alexa?

381
00:21:48.930 --> 00:21:51.384
&gt;&gt; Alexa: textContent.
&gt;&gt; Will Sentance: textContent, exactly.

382
00:21:51.384 --> 00:21:56.203
textContent, and

383
00:21:56.203 --> 00:22:02.829
that we then used to change

384
00:22:02.829 --> 00:22:10.040
the linked div element.

385
00:22:10.040 --> 00:22:13.407
Perfect, neither of those are yet
appended on the page, but

386
00:22:13.407 --> 00:22:16.080
what do we do in line 14, Alexa?

387
00:22:16.080 --> 00:22:21.848
&gt;&gt; Alexa: We use the replaceChildren
method on the body of the document object,

388
00:22:21.848 --> 00:22:25.775
or to the body property
of the document object.

389
00:22:25.775 --> 00:22:30.610
And we pass in those new JavaScript
objects that link to our

390
00:22:30.610 --> 00:22:33.472
new unattached DOM elements, and

391
00:22:33.472 --> 00:22:38.614
then replaceChildren will append
them to the body on the DOM.

392
00:22:38.614 --> 00:22:40.510
&gt;&gt; Will Sentance: These are all linked.

393
00:22:40.510 --> 00:22:43.105
Here they are, and so we now attach.

394
00:22:43.105 --> 00:22:45.530
We use these two accessor links and

395
00:22:45.530 --> 00:22:50.920
we use body's accessor link to attach
these two to body as children.

396
00:22:50.920 --> 00:22:52.430
Funny word, but there we go.

397
00:22:52.430 --> 00:22:57.302
And then that is field on the body,

398
00:22:57.302 --> 00:23:02.174
empty string, nothing on there,

399
00:23:02.174 --> 00:23:05.879
and a div with hello, !.

400
00:23:05.879 --> 00:23:13.080
And that is the closing out of
our all in one data to view

401
00:23:13.080 --> 00:23:18.697
updateDOM converter, is that correct?

402
00:23:18.697 --> 00:23:23.512
Yes, it is, and
there they are displayed on the page.

