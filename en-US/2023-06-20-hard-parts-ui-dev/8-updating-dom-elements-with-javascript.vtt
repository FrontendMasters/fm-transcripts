WEBVTT

1
00:00:00.270 --> 00:00:04.426
So let's now use the fact that
the real jsDiv is not this,

2
00:00:04.426 --> 00:00:10.315
that we've console.logged and saw, but
instead is an object with a method that

3
00:00:10.315 --> 00:00:15.700
has access to the C++ DOM element,
and so with that in mind in line four.

4
00:00:15.700 --> 00:00:17.600
In line four, here we go.

5
00:00:18.700 --> 00:00:23.120
We are going to access jsDiv.

6
00:00:24.536 --> 00:00:25.430
That's not very good, is it?

7
00:00:25.430 --> 00:00:26.100
Let me get this right.

8
00:00:26.100 --> 00:00:28.640
Let me get my wording right.

9
00:00:28.640 --> 00:00:33.739
So here we go, what is post?

10
00:00:33.739 --> 00:00:35.984
Ian, what is the value of post here?

11
00:00:35.984 --> 00:00:38.520
&gt;&gt; The current value is the string
high and exclamation mark.

12
00:00:38.520 --> 00:00:41.070
&gt;&gt; Beautiful, beautiful, perfect.

13
00:00:41.070 --> 00:00:46.113
We are going to try to attach to, we hope,

14
00:00:46.113 --> 00:00:50.450
the DOM element, the string high.

15
00:00:52.370 --> 00:00:55.140
Well, here's already a tricky question.

16
00:00:55.140 --> 00:00:59.470
jsDiv is our object that has
a property text content.

17
00:00:59.470 --> 00:01:02.230
I kept calling it a method,
maybe you can think why.

18
00:01:02.230 --> 00:01:05.770
Cuz if that were a regular old property,
Ian, can you help me with this?

19
00:01:05.770 --> 00:01:07.549
Where would that high be assigned?

20
00:01:08.800 --> 00:01:13.796
If I had jsDiv.text content equals post,
which you just said is string high,

21
00:01:13.796 --> 00:01:17.216
where would that high be
stored on that jsDiv object?

22
00:01:17.216 --> 00:01:22.049
&gt;&gt; If it was a regular old JavaScript
object then it would get stored

23
00:01:22.049 --> 00:01:25.819
as under the key text
content in the object jsDiv.

24
00:01:25.819 --> 00:01:27.795
&gt;&gt; Can we just give Ian
a round of applause for

25
00:01:27.795 --> 00:01:29.050
a really sharp-
&gt;&gt; [APPLAUSE]

26
00:01:29.050 --> 00:01:30.332
&gt;&gt; Really sharp communication,

27
00:01:30.332 --> 00:01:31.915
Ian, that's really, really good.

28
00:01:31.915 --> 00:01:36.215
Yeah, which is of zero use to us,
right, because now great,

29
00:01:36.215 --> 00:01:40.872
now we've got high in JavaScript,
where do we want it to go, Ian?

30
00:01:40.872 --> 00:01:44.391
&gt;&gt; We probably want it
to go out to the DOM.

31
00:01:44.391 --> 00:01:45.062
&gt;&gt; Yeah, beautiful.

32
00:01:45.062 --> 00:01:47.180
&gt;&gt; And by extension show up
in the UI in the browser.

33
00:01:47.180 --> 00:01:50.900
&gt;&gt; Beautiful, wow, Ian, excellent,
excellent, exactly right.

34
00:01:50.900 --> 00:01:55.030
And it does, because in practice,

35
00:01:55.030 --> 00:01:59.580
text content is working to do this.

36
00:01:59.580 --> 00:02:01.920
One, it goes and looks at the link.

37
00:02:01.920 --> 00:02:04.190
In this case,
it's a link to which element, Ian?

38
00:02:05.470 --> 00:02:07.790
&gt;&gt; It's a link to the jsDiv.

39
00:02:07.790 --> 00:02:11.728
&gt;&gt; Yeah, so
jsDiv is our JavaScript label for it,

40
00:02:11.728 --> 00:02:15.940
which has a link to our DOM Div element,
spot on.

41
00:02:15.940 --> 00:02:20.634
And then,
we are going to take the value of

42
00:02:20.634 --> 00:02:25.610
post which is high, and
we are going to set.

43
00:02:27.050 --> 00:02:31.087
So a property that acts by running
code under the hood to go and

44
00:02:31.087 --> 00:02:34.967
do something else,
even though it looks like a property,

45
00:02:34.967 --> 00:02:37.594
you can call a getter setter property.

46
00:02:37.594 --> 00:02:43.701
It is in this case going
to set the value or

47
00:02:43.701 --> 00:02:49.091
the text of this DOM element to be set

48
00:02:49.091 --> 00:02:57.009
text in C++ to be the string
high from JavaScript.

49
00:02:57.009 --> 00:03:02.203
And now exactly as you said Ian,
high shows up on the page.

50
00:03:02.203 --> 00:03:03.690
Beautiful, flipping heck.

51
00:03:03.690 --> 00:03:07.860
We've now managed to display content,
one second, Paul,

52
00:03:07.860 --> 00:03:13.410
we managed to display content that
would have taken us one line in HTML.

53
00:03:13.410 --> 00:03:16.922
Honestly, actually, we didn't even do the,
yeah, it would have taken one word,

54
00:03:16.922 --> 00:03:17.470
one letter.

55
00:03:18.710 --> 00:03:22.309
Three letters, we could have just
written high inside of that div for

56
00:03:22.309 --> 00:03:24.480
it to show up on the DOM.

57
00:03:24.480 --> 00:03:29.738
Do we start to see why HTML is such
a magically intuitive language and

58
00:03:29.738 --> 00:03:32.800
how JavaScript is so rough?

59
00:03:32.800 --> 00:03:36.886
However, it's gonna give us
fine-grained editing control.

60
00:03:36.886 --> 00:03:41.776
It's gonna give us fine-grained editing
control over what we can do to these

61
00:03:41.776 --> 00:03:45.915
elements, and the ability for
us to change data in JavaScript and

62
00:03:45.915 --> 00:03:49.542
then change what shows up on
that list of C++ elements.

63
00:03:49.542 --> 00:03:53.481
Wouldn't it be wonderful if we could write
C++ directly there and do it rather than

64
00:03:53.481 --> 00:03:57.087
have to access it through a bunch of
slightly quirky JavaScript [INAUDIBLE] and

65
00:03:57.087 --> 00:03:57.599
created.

66
00:03:57.599 --> 00:04:03.700
And I call this an access object that has
a hidden link to the DOM element in C++.

67
00:04:03.700 --> 00:04:07.789
By the way, people, especially folk online
as well, you might be thinking my God,

68
00:04:07.789 --> 00:04:09.520
do I need to know all this?

69
00:04:09.520 --> 00:04:10.568
Well that's a separate question.

70
00:04:10.568 --> 00:04:11.960
&gt;&gt; [LAUGH]
&gt;&gt; That's a more deep question.

71
00:04:11.960 --> 00:04:13.565
But you might be thinking wow,

72
00:04:13.565 --> 00:04:17.080
this is a heck of a lot just to
put some content on the page.

73
00:04:17.080 --> 00:04:21.094
However, it does turn out that
once we have this model down,

74
00:04:21.094 --> 00:04:23.630
this is the model until the end.

75
00:04:23.630 --> 00:04:28.680
As I said, there are four parts to UI
hard parts, part one is the truths.

76
00:04:28.680 --> 00:04:33.457
Part two, three, and four are moves to
make the truths more easy to work with.

77
00:04:33.457 --> 00:04:37.081
Yes, it's my new quote.

78
00:04:37.081 --> 00:04:43.150
It is demanding, however, once we have
it down, it becomes the standard.

79
00:04:43.150 --> 00:04:46.240
Let's have thumbs on this,
I wanna start seeing clarifications.

80
00:04:46.240 --> 00:04:49.100
Excellent, John's got one,
Justin is clear.

81
00:04:49.100 --> 00:04:53.260
Paul's got one, fantastic,
Phil, Alexa, Wyatt, all clear.

82
00:04:53.260 --> 00:04:55.930
Let's start with Paul,
you had yours first.

83
00:04:55.930 --> 00:04:58.878
&gt;&gt; It's not a big deal but
you put the high in the wrong box there,

84
00:04:58.878 --> 00:05:02.856
you put it in-
&gt;&gt; No, honestly, Paul, thank you.

85
00:05:02.856 --> 00:05:06.129
Everybody is grateful for
you doing that, thank you,

86
00:05:06.129 --> 00:05:08.847
because otherwise that
would have been let.

87
00:05:08.847 --> 00:05:10.790
Can we do a round of applause for Paul?

88
00:05:10.790 --> 00:05:12.730
[LAUGH] [APPLAUSE]
&gt;&gt; Yeah, yeah, thank you, Paul.

89
00:05:12.730 --> 00:05:15.878
Honestly, for me, that makes me
appreciative you're following it so

90
00:05:15.878 --> 00:05:17.380
closely, fantastic.

91
00:05:17.380 --> 00:05:18.586
What else was I gonna say?

92
00:05:18.586 --> 00:05:20.370
Yeah, why do we need to even know this?

93
00:05:20.370 --> 00:05:21.442
Well, flipping it,

94
00:05:21.442 --> 00:05:25.650
we're gonna see in a moment that the fact
that these are in two different places.

95
00:05:25.650 --> 00:05:30.673
Our data is in one runtime, and
the structure that persists displaying

96
00:05:30.673 --> 00:05:35.360
that data and directly mirrors
what's on the page is in an entirely

97
00:05:35.360 --> 00:05:40.720
different runtime that we access,
by the way, on a case by case basis.

98
00:05:40.720 --> 00:05:44.598
We're gonna quickly see there
is no way to have data, well,

99
00:05:44.598 --> 00:05:47.335
I'm not gonna give it away, but wouldn't

100
00:05:47.335 --> 00:05:52.300
it be nice if we could have changes of
data here flow directly through to here?

101
00:05:53.440 --> 00:05:57.081
These are two different runtimes that
we're gonna have to manually make

102
00:05:57.081 --> 00:05:59.020
the moves across to change.

103
00:05:59.020 --> 00:06:00.690
Because you might be like,
well do I really need to know this?

104
00:06:00.690 --> 00:06:06.240
Unfortunately, having your data in
a different environment to the structure

105
00:06:06.240 --> 00:06:10.946
of your page where that data ends
up being actually displayed, and

106
00:06:10.946 --> 00:06:16.073
when the user changes, the data is
gonna change here, but you've still

107
00:06:16.073 --> 00:06:21.396
got data over here, that's gonna turn
out to be profoundly challenging.

108
00:06:21.396 --> 00:06:25.935
It's gonna be why we impose such strict
rules on ourselves to make things at least

109
00:06:25.935 --> 00:06:28.750
as predictable as we can make them.

110
00:06:28.750 --> 00:06:33.213
But also, what was I gonna say?

111
00:06:33.213 --> 00:06:38.100
Yeah, but also, my goodness, the web
browsers doesn't half make it hard for

112
00:06:38.100 --> 00:06:39.372
us to realize this.

113
00:06:39.372 --> 00:06:44.955
When you have the console logging, the
HTML that created the DOM element in C++,

114
00:06:44.955 --> 00:06:50.160
when actually you're logging
the JavaScript accessor of that.

115
00:06:50.160 --> 00:06:52.455
I mean, that couldn't be more
misrepresentative, right.

116
00:06:52.455 --> 00:06:54.594
&gt;&gt; [LAUGH]
&gt;&gt; All right, John, you had one.

117
00:06:54.594 --> 00:06:56.680
&gt;&gt; So
I had a question about the call stack.

118
00:06:56.680 --> 00:07:00.122
So document.querySelector is being
pushed to the call stack or?

119
00:07:00.122 --> 00:07:01.100
&gt;&gt; Good question.

120
00:07:01.100 --> 00:07:03.235
Yeah, technically it is.

121
00:07:03.235 --> 00:07:07.140
I think the reason I'm always hesitant to
put it on the call stack is it implies,

122
00:07:07.140 --> 00:07:09.372
it's code in JavaScript being run, right?

123
00:07:09.372 --> 00:07:14.767
The question, I guess, becomes where does
the JavaScript execution here end and

124
00:07:14.767 --> 00:07:16.980
where does the C++ code begin?

125
00:07:16.980 --> 00:07:19.315
Well these bits are going
off to access C++.

126
00:07:19.315 --> 00:07:23.628
Don't forget, JavaScript is technically
running within a browser in C++.

127
00:07:23.628 --> 00:07:27.814
So actually, you can think of that
handling when tasks go out to other parts

128
00:07:27.814 --> 00:07:29.607
of the browser under the hood and

129
00:07:29.607 --> 00:07:32.548
when it's actually just
JavaScript code running.

130
00:07:32.548 --> 00:07:35.410
I don't ever put it on the call stack,
although it is on the call stack,

131
00:07:35.410 --> 00:07:38.416
because I like to think of the stuff on
the call stack as being the code that we

132
00:07:38.416 --> 00:07:41.276
have written and that we are taking
the threat of execution inside of.

133
00:07:41.276 --> 00:07:46.174
And that we could actually change the code
inside the functions that are on here,

134
00:07:46.174 --> 00:07:49.140
whereas we can't go and
change querySelector.

135
00:07:49.140 --> 00:07:53.188
But yes, as a JavaScript function, even
though it's actually doing a bunch of work

136
00:07:53.188 --> 00:07:56.630
outside, it technically will
go on the call stack, yeah.

137
00:07:56.630 --> 00:07:57.470
Great question.

138
00:07:57.470 --> 00:08:02.133
&gt;&gt; Do all script tags refer to the same
JavaScript runtime with shared

139
00:08:02.133 --> 00:08:03.720
memory space and etc?

140
00:08:05.200 --> 00:08:06.330
&gt;&gt; We'll see that in a moment.

141
00:08:06.330 --> 00:08:09.990
Actually, this is the second one
where we're gonna come and see this,

142
00:08:09.990 --> 00:08:12.740
once we start building out
our own version of the DOM.

143
00:08:12.740 --> 00:08:20.231
So let's hold the ones around how
JavaScript runtime works across different,

144
00:08:20.231 --> 00:08:24.270
these are ones which become interesting.

145
00:08:24.270 --> 00:08:26.242
So when we think about hard parts,

146
00:08:26.242 --> 00:08:30.200
it's always intellectually
fascinating to go deeper, right?

147
00:08:30.200 --> 00:08:33.573
But I do always like, I don't really
know what this quote means, but

148
00:08:33.573 --> 00:08:37.990
the turtles all the way down quote, which
is, you can always go a layer deeper.

149
00:08:37.990 --> 00:08:39.797
The question becomes,

150
00:08:39.797 --> 00:08:44.776
is it helping you understand
building what you're doing today.

151
00:08:44.776 --> 00:08:48.082
We are not doing this for
the sake of the intellectual satisfaction,

152
00:08:48.082 --> 00:08:49.852
although to be fair, we sort of are.

153
00:08:49.852 --> 00:08:54.723
Only because, I want also you all to
be able to go to your interviews and

154
00:08:54.723 --> 00:08:58.026
say to them,
you're gonna by the end of today,

155
00:08:58.026 --> 00:09:02.237
even by the end of today,
maybe by tomorrow, be able to say,

156
00:09:02.237 --> 00:09:06.973
I prefer to spin up my own custom
implementation of the virtual DOM.

157
00:09:06.973 --> 00:09:08.807
&gt;&gt; [LAUGH]
&gt;&gt; Let me try that again.

158
00:09:08.807 --> 00:09:11.858
&gt;&gt; [LAUGH]
&gt;&gt; I prefer to spin up my own custom

159
00:09:11.858 --> 00:09:14.856
implementation of the virtual DOM.

160
00:09:14.856 --> 00:09:17.290
And by the end of tomorrow,
did I miss part of it?

161
00:09:18.420 --> 00:09:22.742
Okay, I know you can't do it yet, because
you don't prefer it yet but soon you will.

162
00:09:22.742 --> 00:09:25.001
&gt;&gt; [LAUGH]
&gt;&gt; But soon you will, once you do,

163
00:09:25.001 --> 00:09:26.702
you'll be able to say that.

164
00:09:26.702 --> 00:09:30.215
What I'm getting at there is this stuff
is incredibly important to understand

165
00:09:30.215 --> 00:09:33.739
the great UI frameworks, the reacts,
the felts, the views, the angulars.

166
00:09:33.739 --> 00:09:35.640
I should have had this at the start,
sorry, people.

167
00:09:35.640 --> 00:09:39.392
Under the hood, such that you can debug
them, such that you can work with them at

168
00:09:39.392 --> 00:09:43.690
scale, such that you can even genuinely
spin up your own versions of them.

169
00:09:43.690 --> 00:09:45.061
It's for that purpose.

170
00:09:45.061 --> 00:09:49.939
However, it is also quite cool to
be able to go into interviews, and

171
00:09:49.939 --> 00:09:52.176
speak to some of these things.

172
00:09:52.176 --> 00:09:56.128
Because the senior engineers,
the VPs, whatever, interviewing you,

173
00:09:56.128 --> 00:09:58.485
to be able to tell them
these sort of things,

174
00:09:58.485 --> 00:10:02.203
they may have come to these over
years of kind of piecing it together.

175
00:10:02.203 --> 00:10:07.820
But for you to be able to give them these
mental models, honestly, it's a cool edge.

176
00:10:07.820 --> 00:10:10.752
Listen, I'm not saying you wanna
intimidate them, I'm trying to be polite,

177
00:10:10.752 --> 00:10:11.954
I don't want to have on record.

178
00:10:11.954 --> 00:10:14.108
&gt;&gt; [LAUGH]
&gt;&gt; I'm not saying you wanna scare them,

179
00:10:14.108 --> 00:10:18.290
but I am saying that you want them to come
away saying, uh-oh, my job is on the line.

180
00:10:18.290 --> 00:10:22.252
This person's knowledge is, I don't wanna,
see, that's not very nice is it, but

181
00:10:22.252 --> 00:10:23.750
that's the goal.

182
00:10:23.750 --> 00:10:29.406
So in terms of the question there
about JavaScript runtimes and/or

183
00:10:29.406 --> 00:10:36.058
how between different web pages and
within a web page JavaScript is executing,

184
00:10:36.058 --> 00:10:40.870
we'll see later on from a place of why,
how that works.

185
00:10:40.870 --> 00:10:46.509
The reason I say that is each of these
pieces we want to introduce as ultimately

186
00:10:46.509 --> 00:10:52.342
enabling us to do something, not for
the sake of just intellectual knowledge.

