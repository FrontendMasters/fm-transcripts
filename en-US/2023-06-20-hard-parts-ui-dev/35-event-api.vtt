WEBVTT

1
00:00:00.090 --> 00:00:01.764
Now user takes action.

2
00:00:01.764 --> 00:00:06.287
Don't worry, we are gonna do this because
we're gonna introduce a little bit more

3
00:00:06.287 --> 00:00:07.267
about how we can.

4
00:00:07.267 --> 00:00:12.221
We are no longer getting individual
labels for access objects.

5
00:00:12.221 --> 00:00:16.476
So I can't assume that the zeroeth
element or the first element, or

6
00:00:16.476 --> 00:00:18.950
the second will be our input elements.

7
00:00:18.950 --> 00:00:20.390
I want to be flexible to that.

8
00:00:20.390 --> 00:00:24.560
So I'm now going to use the event
object as part of the event API,

9
00:00:24.560 --> 00:00:28.423
this is the event object that
when the user action happens,

10
00:00:28.423 --> 00:00:34.100
let's have user action that's plough on,
let's have user action happen.

11
00:00:34.100 --> 00:00:40.312
When the user action happens,
in this case, it's gonna be typing.

12
00:00:40.312 --> 00:00:44.543
They're gonna type Li is nice,
highlight perfect, Li.

13
00:00:44.543 --> 00:00:47.304
All right, Li, there we go.

14
00:00:47.304 --> 00:00:48.752
First suggestion and fantastic.

15
00:00:48.752 --> 00:00:53.440
So, Li is going to show up as
the typed content is going to be

16
00:00:53.440 --> 00:00:57.463
the value immediately,
because of our layout and

17
00:00:57.463 --> 00:01:03.619
render engine binding of this C++ list
of elements and the view together.

18
00:01:03.619 --> 00:01:08.650
And now the event triggers
our handle function

19
00:01:08.650 --> 00:01:13.939
to be added to the callback queue and
therefore,

20
00:01:13.939 --> 00:01:19.099
upon finding there's
nothing on the call stack

21
00:01:19.099 --> 00:01:24.269
be added to our call stack there it is,
handle.

22
00:01:24.269 --> 00:01:29.502
And we are gonna have a brand new
everybody who has been waiting for

23
00:01:29.502 --> 00:01:32.940
this moment add a brand new what everybody?

24
00:01:32.940 --> 00:01:33.491
&gt;&gt; Execution.

25
00:01:33.491 --> 00:01:35.397
&gt;&gt; Execution context, beautiful.

26
00:01:35.397 --> 00:01:39.522
Now it's quite an interesting one.

27
00:01:39.522 --> 00:01:43.023
So, there it goes.

28
00:01:43.023 --> 00:01:45.725
Here is what we are going to do with it.

29
00:01:45.725 --> 00:01:50.717
So it's a brand new execution context,
[INAUDIBLE] Quite wide.

30
00:01:50.717 --> 00:01:51.812
Brand new execution context.

31
00:01:51.812 --> 00:01:58.214
But we're gonna use another feature
of the DOM and that is the event API.

32
00:01:58.214 --> 00:02:02.993
The event API, we know, triggers functions
that handle action by user to be

33
00:02:02.993 --> 00:02:08.010
passed to the callback queue and then
executed by JavaScript on the call stack.

34
00:02:08.010 --> 00:02:13.588
But also it provides a full description.

35
00:02:13.588 --> 00:02:16.173
When you think about running a function,
calling a function,

36
00:02:16.173 --> 00:02:17.257
there's two parts to it.

37
00:02:17.257 --> 00:02:21.020
One part is the running of the code,

38
00:02:21.020 --> 00:02:25.919
the other part is
the inserting of arguments.

39
00:02:25.919 --> 00:02:28.520
If we are allowing functions to be auto

40
00:02:28.520 --> 00:02:32.587
executed asynchronously at
a later moment by JavaScript,

41
00:02:32.587 --> 00:02:37.815
if we're allowing them to be auto
executed that's the running of the code,

42
00:02:39.248 --> 00:02:44.164
Could we imagine that we can also
have them auto insert an argument,

43
00:02:44.164 --> 00:02:49.684
that we can then have a parameter ready
and if we've written our code right,

44
00:02:49.684 --> 00:02:53.673
we can use whatever is in
that auto inserted argument.

45
00:02:53.673 --> 00:02:55.342
And the answer is absolutely yes.

46
00:02:55.342 --> 00:02:58.127
If we've gone to node hard parts,
we've seen a lot of this.

47
00:02:58.127 --> 00:03:01.575
The response and request or request and

48
00:03:01.575 --> 00:03:06.278
response objects that
are auto-inserted on a user or

49
00:03:06.278 --> 00:03:10.981
server request reaching a node server,
we're gonna

50
00:03:10.981 --> 00:03:15.998
find that this handle function
that is auto-executed by

51
00:03:15.998 --> 00:03:21.352
JavaScript also has auto-inserted
into it by JavaScript

52
00:03:21.352 --> 00:03:26.060
an object full of useful
properties that describe

53
00:03:26.060 --> 00:03:31.561
the event in more detail,
the user action in more detail.

54
00:03:31.561 --> 00:03:38.062
Like, for example, literally, the XY
coordinates of the input by the user,

55
00:03:38.062 --> 00:03:44.464
is the command button held down by the
user as the input is the control button,

56
00:03:44.464 --> 00:03:48.699
true or false,
held down by the user as the input and

57
00:03:48.699 --> 00:03:52.172
what element was the input happening on.

58
00:03:52.172 --> 00:03:54.196
And that's our key piece.

59
00:03:54.196 --> 00:03:59.240
So not only does our action
by the user trigger their

60
00:03:59.240 --> 00:04:04.402
handle function to be added
to the callback queue but

61
00:04:04.402 --> 00:04:10.385
with it comes an object full of
information about the user's

62
00:04:10.385 --> 00:04:16.602
action that then is auto inserted
into our callback function,

63
00:04:16.602 --> 00:04:24.380
the function that got called back into
JavaScript and added to the call stack.

64
00:04:24.380 --> 00:04:29.203
And that auto-inserted argument,
we would go and

65
00:04:29.203 --> 00:04:32.351
look on MDN to find out what it is.

66
00:04:32.351 --> 00:04:38.162
In this case, it is an object
full of useful properties that

67
00:04:38.162 --> 00:04:44.890
allow us to get more information
about the user's action.

68
00:04:44.890 --> 00:04:49.830
Things like the X and Y coordinates
of what's going to of the user, but

69
00:04:49.830 --> 00:04:53.320
things like where
the command was held down.

70
00:04:53.320 --> 00:04:57.886
But for our purposes the most useful is

71
00:04:57.886 --> 00:05:03.307
a property of target
that has an accessor object

72
00:05:03.307 --> 00:05:08.588
corresponding to the input element in C++

73
00:05:08.588 --> 00:05:13.312
that was inputted into and there it is.

74
00:05:13.312 --> 00:05:17.195
That accessor object has all

75
00:05:17.195 --> 00:05:22.373
the useful properties for getting and

76
00:05:22.373 --> 00:05:27.711
setting the data on that C++ object,

77
00:05:27.711 --> 00:05:34.342
and it has the hidden
link to that C++ element,

78
00:05:34.342 --> 00:05:39.357
which is input, [LAUGH] I'm starting

79
00:05:39.357 --> 00:05:43.427
to lose it, but there you go.

80
00:05:43.427 --> 00:05:45.867
Which is the input DOM element.

81
00:05:45.867 --> 00:05:52.691
Meaning we, knowing that this argument
is gonna be auto-inserted,

82
00:05:52.691 --> 00:05:57.010
need to prepare a placeholder name for it.

83
00:05:57.010 --> 00:06:00.274
Justice, what have we
used as the parameter or

84
00:06:00.274 --> 00:06:05.968
the placeholder name with the knowledge
that when handle does get auto called,

85
00:06:05.968 --> 00:06:11.075
it also has data argument also auto
inserted. Knowing that, what have we used

86
00:06:11.075 --> 00:06:16.624
as our parameter, our placeholder ready for
that handle function to be executed?

87
00:06:16.624 --> 00:06:19.584
&gt;&gt; Are we talking the function handle?

88
00:06:19.584 --> 00:06:23.049
&gt;&gt; Exactly, what's our parameter?

89
00:06:23.049 --> 00:06:24.528
&gt;&gt; The event.

90
00:06:24.528 --> 00:06:30.862
&gt;&gt; The event but what are we given
ourselves y is the parameter name here?

91
00:06:30.862 --> 00:06:31.693
&gt;&gt; The letter E.

92
00:06:31.693 --> 00:06:34.960
&gt;&gt; Just the letter E, exactly.

93
00:06:34.960 --> 00:06:36.248
What could we have called it?

94
00:06:36.248 --> 00:06:37.855
We could have called it justice.

95
00:06:37.855 --> 00:06:41.671
We could have written function
handle parameter justice and

96
00:06:41.671 --> 00:06:45.122
then inside as long as we'd
written name equals what?

97
00:06:45.122 --> 00:06:45.798
&gt;&gt; Justice.

98
00:06:45.798 --> 00:06:50.658
&gt;&gt; Justice.target.value,
we would have been accessing

99
00:06:50.658 --> 00:06:55.107
our event object,
as they call it if you went to MDN,

100
00:06:55.107 --> 00:06:59.882
that describes the action by
the user in a lot of detail.

101
00:06:59.882 --> 00:07:00.831
All the details of it.

102
00:07:00.831 --> 00:07:06.016
Command press down while the user was
inputting, was control pressed down,

103
00:07:06.016 --> 00:07:10.017
was it XY coordinates on
the particular pixels of the page.

104
00:07:10.017 --> 00:07:14.253
And most important,
what was the target of the input,

105
00:07:14.253 --> 00:07:17.581
the element that was being inputted into?

106
00:07:17.581 --> 00:07:21.259
In a sense it's like any function
becoming more generic, more general.

107
00:07:21.259 --> 00:07:26.117
We don't need to specify on
this handle function exactly

108
00:07:26.117 --> 00:07:31.076
which element is being inputted into,
is being handled,

109
00:07:31.076 --> 00:07:36.440
because we're gonna use the auto
inserted argument that makes

110
00:07:36.440 --> 00:07:42.309
the function specific to this
particular input entered by the user,

111
00:07:42.309 --> 00:07:45.648
where our target is this element here.

112
00:07:45.648 --> 00:07:51.345
Meaning, in this execution context,
we hopefully wrote our code;

113
00:07:51.345 --> 00:07:56.052
We hopefully wrote our
code to be able to access

114
00:07:56.052 --> 00:08:00.276
this target use its value setter getter,

115
00:08:00.276 --> 00:08:04.740
use its value setter
getter to set the no no,

116
00:08:04.740 --> 00:08:11.282
to get the value of input that was
just type Li to update our data.

117
00:08:11.282 --> 00:08:13.662
Did we do that Phil?

118
00:08:13.662 --> 00:08:17.685
In the handle function,
did we go and get our data?

119
00:08:17.685 --> 00:08:18.850
You bet we did.

120
00:08:18.850 --> 00:08:21.772
There it is, there it is.

121
00:08:21.772 --> 00:08:28.666
Name is going to be assigned to what?

122
00:08:28.666 --> 00:08:29.467
&gt;&gt; Li.

123
00:08:29.467 --> 00:08:31.394
&gt;&gt; It's gonna be assigned to Li.

124
00:08:31.394 --> 00:08:36.457
Exactly [INAUDIBLE] Is our parameter
that we've had there ready to

125
00:08:36.457 --> 00:08:41.977
access the object, get our target,
which we knew was going to be filled

126
00:08:41.977 --> 00:08:47.246
out with whatever the input object
was a link to it and use its value.

127
00:08:47.246 --> 00:08:48.498
Well, you know what?

128
00:08:48.498 --> 00:08:54.340
Let's write it out, So the target property

129
00:08:54.340 --> 00:08:59.958
has assigned to it an object
linked to the input element.

130
00:08:59.958 --> 00:09:04.574
We go to the linked input element
when we use the value setter and

131
00:09:04.574 --> 00:09:09.726
we get, no, not setter, getter,
to retrieve exactly as Phil says.

132
00:09:09.726 --> 00:09:14.308
The string Li and that then is set as

133
00:09:14.308 --> 00:09:19.682
the string that is assigned to our name.

134
00:09:19.682 --> 00:09:21.213
Our data is updated.

135
00:09:21.213 --> 00:09:22.779
Woo hoo, way, yes side.

136
00:09:22.779 --> 00:09:25.095
[INAUDIBLE]
&gt;&gt; [APPLAUSE]

137
00:09:25.095 --> 00:09:26.875
&gt;&gt; I need it as much as anybody.

138
00:09:26.875 --> 00:09:28.464
There it is.
Well done, everybody.

139
00:09:28.464 --> 00:09:31.530
And so we have now, and we're gonna
come to thumbs on that in a second.

140
00:09:31.530 --> 00:09:36.614
Don't worry, people,
we now have our data updated.

141
00:09:36.614 --> 00:09:39.460
Now things get really interesting.

142
00:09:39.460 --> 00:09:44.818
Let's talk through what's gonna
run well at any moment of course,

143
00:09:44.818 --> 00:09:49.142
our wonderful binding
the creator takes our new data,

144
00:09:49.142 --> 00:09:54.030
creates our visual virtual
JavaScript DOM representation of

145
00:09:54.030 --> 00:09:58.167
what's gonna show up on
the page with that new data.

146
00:09:58.167 --> 00:10:01.137
Then converts it into real
elements to be appended or

147
00:10:01.137 --> 00:10:03.979
replace the existing ones and
show up on the page.

148
00:10:03.979 --> 00:10:06.121
Honestly, it is repetitive.

149
00:10:06.121 --> 00:10:10.710
Great UI engineering's really
difficult to track event,

150
00:10:10.710 --> 00:10:16.226
consequences of change of data otherwise,
being repetitive is good.

151
00:10:16.226 --> 00:10:18.096
And exhausting.

152
00:10:18.096 --> 00:10:22.514
[LAUGH] Being repetitive is good and
quite right too.

153
00:10:22.514 --> 00:10:28.225
So, we now hit what function Y is
going to be put into the not, sorry,

154
00:10:28.225 --> 00:10:34.644
put into the callback queue because
it's running every 15 milliseconds.

155
00:10:34.644 --> 00:10:36.133
&gt;&gt; The browser adds update DOM.

156
00:10:36.133 --> 00:10:39.776
&gt;&gt; Update DOM-
&gt;&gt; Which eventually gets put onto the call

157
00:10:39.776 --> 00:10:41.981
stack, gets those pink parens added.

158
00:10:41.981 --> 00:10:43.667
&gt;&gt; Perfect.

159
00:10:43.667 --> 00:10:46.384
And create a brand new what?

160
00:10:46.384 --> 00:10:47.058
&gt;&gt; Do I get to say it?

161
00:10:47.058 --> 00:10:47.606
&gt;&gt; You do.

162
00:10:47.606 --> 00:10:49.349
&gt;&gt; Execution context.

163
00:10:49.349 --> 00:10:51.438
&gt;&gt; Thank you, y there it is.

164
00:10:51.438 --> 00:10:58.899
Update DOM and brand new
execution context and there it is.

165
00:10:58.899 --> 00:11:03.268
Getting a bit tight cuz this
took too much space, whoops.

166
00:11:03.268 --> 00:11:08.034
However, all we're gonna do in it, hey,
we don't even need to think about it.

167
00:11:08.034 --> 00:11:08.852
You know what?

168
00:11:08.852 --> 00:11:11.555
The best thing is if
we've made this code for

169
00:11:11.555 --> 00:11:16.175
ourselves are we even thinking at this
moment about how to change the page?

170
00:11:16.175 --> 00:11:18.825
No, we described it already.

171
00:11:18.825 --> 00:11:23.121
We described it already based on how
the user was going to and then what,

172
00:11:23.121 --> 00:11:26.680
the underlying data would
be funneled through again.

173
00:11:26.680 --> 00:11:28.304
So let's do that.

174
00:11:28.304 --> 00:11:31.491
But we're only gonna describe it verbally,
pseudocode what happens.

175
00:11:31.491 --> 00:11:36.956
So update DOM is going to run,
why what function.

176
00:11:36.956 --> 00:11:39.087
&gt;&gt; First it's going to call create V DOM.

177
00:11:39.087 --> 00:11:41.890
&gt;&gt; Yeah.
So it's going to, I guess,

178
00:11:41.890 --> 00:11:46.722
create the V DOM with our new,
&gt;&gt; With the new values of name.

179
00:11:46.722 --> 00:11:52.491
&gt;&gt; Perfect, yeah.
So one, create V DOM

180
00:11:52.491 --> 00:11:58.443
with new data of name.

181
00:11:58.443 --> 00:12:01.763
Perfect, exactly, data of name,
and that is now Li.

182
00:12:01.763 --> 00:12:04.725
So this is going to be
completely deleted and

183
00:12:04.725 --> 00:12:10.178
I am gonna, Do that just so

184
00:12:10.178 --> 00:12:16.540
that we can appreciate it being fully
recreated and yeah, there you go.

185
00:12:16.540 --> 00:12:17.561
Fully recreated.

186
00:12:17.561 --> 00:12:20.522
And what are our elements in it?

187
00:12:20.522 --> 00:12:22.984
Walk me through them
if you don't mind why.

188
00:12:22.984 --> 00:12:25.835
&gt;&gt; Absolutely, we've got three arrays.

189
00:12:25.835 --> 00:12:29.214
The first one contains the string input.

190
00:12:29.214 --> 00:12:29.836
&gt;&gt; Beautiful.

191
00:12:29.836 --> 00:12:31.931
&gt;&gt; The string, Li.

192
00:12:31.931 --> 00:12:32.899
&gt;&gt; Beautiful.

193
00:12:32.899 --> 00:12:37.813
&gt;&gt; And the function definition
of the function handle.

194
00:12:37.813 --> 00:12:40.616
&gt;&gt; Yeah, we can call it callback,
I guess, but exactly, it's handle.

195
00:12:40.616 --> 00:12:42.379
And then the next one is?

196
00:12:42.379 --> 00:12:49.354
&gt;&gt; The string div, the string hello Li,
&gt;&gt; [CROSSTALK]

197
00:12:49.354 --> 00:12:50.345
&gt;&gt; Look at that, beautiful, done.

198
00:12:50.345 --> 00:12:52.921
[LAUGH]
&gt;&gt; Yes, look at that, exactly.

199
00:12:52.921 --> 00:12:54.485
Fully filled out.

200
00:12:54.485 --> 00:12:57.703
We knew that because look how
visual our code is in JavaScript.

201
00:12:57.703 --> 00:13:02.164
I was able to go [SOUND] Because I knew
exactly what it was gonna look like.

202
00:13:02.164 --> 00:13:04.380
Fabulous, excellent from Y.

203
00:13:04.380 --> 00:13:07.435
Now we run the update function.

204
00:13:07.435 --> 00:13:11.249
Update, sorry, we run the, well, tell me
again why you're doing better than me.

205
00:13:11.249 --> 00:13:15.806
&gt;&gt; So since VDOM is just a JavaScript
array, we're then going to map over it.

206
00:13:15.806 --> 00:13:18.097
&gt;&gt; Yep.
&gt;&gt; Calling the function convert on each

207
00:13:18.097 --> 00:13:19.199
item in that array.

208
00:13:19.199 --> 00:13:25.664
&gt;&gt; VDOM each element converted to a new

209
00:13:25.664 --> 00:13:30.616
tell me you're doing so well.

210
00:13:30.616 --> 00:13:32.447
Well, honestly better than me,
I'm getting tired.

211
00:13:32.447 --> 00:13:34.146
So you're doing a better job than
me tell me what's happening.

212
00:13:34.146 --> 00:13:35.668
&gt;&gt; Let me know if you want
to go into greater detail.

213
00:13:35.668 --> 00:13:40.656
But basically, we're taking each
item in that JavaScript array and

214
00:13:40.656 --> 00:13:46.252
returning a JavaScript accessor object
provides a hidden link to a DOM node.

215
00:13:46.252 --> 00:13:50.197
&gt;&gt; Yes, a DOM node better term than I'm
using the arrow DOM element, but yeah,

216
00:13:50.197 --> 00:13:51.012
DOM node
&gt;&gt; And

217
00:13:51.012 --> 00:13:55.223
a JavaScript object with access to it.

218
00:13:55.223 --> 00:14:00.136
Beautiful, let's do this.

219
00:14:00.136 --> 00:14:02.929
Let's not redraw these all, but

220
00:14:02.929 --> 00:14:08.130
these are therefore all gonna
be brand new accessor objects.

221
00:14:08.130 --> 00:14:13.516
&gt;&gt; And we'll lose all of these links to
the old ones and we're gonna have here.

222
00:14:13.516 --> 00:14:18.069
Can we draw this hopefully
relatively nicely.

223
00:14:18.069 --> 00:14:20.407
Wasn't a great start, was it?

224
00:14:20.407 --> 00:14:22.097
Dear.

225
00:14:22.097 --> 00:14:23.640
There we go.

226
00:14:23.640 --> 00:14:28.517
Draw these relatively nicely and

227
00:14:28.517 --> 00:14:33.392
new DOM nodes, which are input,

228
00:14:33.392 --> 00:14:38.977
they are a div, they are another div.

229
00:14:38.977 --> 00:14:45.080
The last div here has text of great job.

230
00:14:47.070 --> 00:14:50.624
I think the fun thing is people is
that we're not doing any of this.

231
00:14:50.624 --> 00:14:56.035
Our work was done the moment that we
changed the data with the handle,

232
00:14:56.035 --> 00:14:57.915
that was our work done.

233
00:14:57.915 --> 00:15:03.248
Unfortunately, as engineers,
our work done because updateDOM, it's just

234
00:15:03.248 --> 00:15:08.821
gonna run again and take our description
in a way that createVDOM is a one-time and

235
00:15:08.821 --> 00:15:14.315
done description of under all possible
states stated values in this case name and

236
00:15:14.315 --> 00:15:18.880
in case Li that gives a full
description of what's gonna show up.

237
00:15:18.880 --> 00:15:20.464
So our work's kind of done.

238
00:15:20.464 --> 00:15:23.520
It's beautiful for
it but unfortunately for

239
00:15:23.520 --> 00:15:28.597
the purposes of visualizing it for
everybody, we are walking through it.

240
00:15:28.597 --> 00:15:30.077
I say, unfortunately, but
you know what I mean?

241
00:15:30.077 --> 00:15:32.211
Like, we wouldn't have to
just make it really clear.

242
00:15:32.211 --> 00:15:36.828
That's the whole point is we wouldn't have
to because it's all being described by our

243
00:15:36.828 --> 00:15:38.293
nice initial layout here.

244
00:15:38.293 --> 00:15:41.535
That's really cool, maybe other people,
but I think it's kind of cool.

245
00:15:41.535 --> 00:15:45.748
And then we have, hello, and
it would be hello Li.

246
00:15:45.748 --> 00:15:47.631
Am I right on this or
am I missing anything here?

247
00:15:47.631 --> 00:15:48.841
So far, all good.

248
00:15:48.841 --> 00:15:56.094
Yeah, and then we have our value
being repopulated with Li.

249
00:15:56.094 --> 00:16:00.832
And our input handler having
a new reference to the same

250
00:16:00.832 --> 00:16:04.029
underlying handle input function.

251
00:16:04.029 --> 00:16:07.064
There it is, hand, sorry, handle function.

252
00:16:07.064 --> 00:16:11.152
There it is.
And, I'm tracking stuff all across here.

253
00:16:11.152 --> 00:16:12.587
There we go.

254
00:16:12.587 --> 00:16:13.881
Okay, perfect.

255
00:16:13.881 --> 00:16:18.539
These brand new accessor objects each is

256
00:16:18.539 --> 00:16:23.475
linked to, respectively, input, div, and div.

257
00:16:23.475 --> 00:16:27.183
Perfect, we then use our document board.

258
00:16:27.183 --> 00:16:28.451
Well, tell me what's happening here.

259
00:16:28.451 --> 00:16:29.792
Why, if you don't mind?

260
00:16:29.792 --> 00:16:30.435
&gt;&gt; Absolutely.

261
00:16:30.435 --> 00:16:37.319
The final line of this function,
we're going to spread the elems

262
00:16:37.319 --> 00:16:42.166
array into the call to the replace-
&gt;&gt; That turns each

263
00:16:42.166 --> 00:16:46.910
array element which is three different 1,
2, 3 or 0, 1, 2,

264
00:16:46.910 --> 00:16:50.852
accessor objects to our new input div and
div in the DOM.

265
00:16:50.852 --> 00:16:54.532
It spreads those into
individual arguments to be,

266
00:16:54.532 --> 00:16:57.464
&gt;&gt; Into positional arguments that

267
00:16:57.464 --> 00:17:02.895
are parsed to the replace children
method on the body object

268
00:17:02.895 --> 00:17:07.793
of the document object and that in turn
&gt;&gt; Replace children call or

269
00:17:07.793 --> 00:17:12.701
whatever, yeah, I shouldn't have done this
order in this order but yeah, exactly to

270
00:17:12.701 --> 00:17:17.410
replace children which will take the links
to these three elements and replace this

271
00:17:17.410 --> 00:17:21.809
set of children on body does that doesn't
matter how many that would be here.

272
00:17:21.809 --> 00:17:27.764
These will just all be replaced and
we instead get body linking and

273
00:17:27.764 --> 00:17:32.418
sorry for this here, but
instead body linking to or

274
00:17:32.418 --> 00:17:39.131
sorry having children appending input
div and div as these were removed,

275
00:17:39.131 --> 00:17:43.377
then our page here would
lose those elements.

276
00:17:43.377 --> 00:17:44.972
But don't panic.

277
00:17:44.972 --> 00:17:51.357
We would have new ones re-added
with what the user just wrote.

278
00:17:51.357 --> 00:17:54.045
So they don't even see any
difference as long as we

279
00:17:54.045 --> 00:17:55.905
refocus the cursor on that field.

280
00:17:55.905 --> 00:18:00.882
And then div elements

281
00:18:00.882 --> 00:18:05.034
with hello, Li.

282
00:18:05.034 --> 00:18:09.807
And great job yes give a big
hand to [INAUDIBLE] It's

283
00:18:09.807 --> 00:18:13.793
an excellent technical communication.

284
00:18:13.793 --> 00:18:16.160
&gt;&gt; [APPLAUSE]
&gt;&gt; Beautiful.

