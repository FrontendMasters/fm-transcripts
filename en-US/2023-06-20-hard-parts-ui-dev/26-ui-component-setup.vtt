WEBVTT

1
00:00:00.170 --> 00:00:05.938
We were just realizing that actually
there are more things the user

2
00:00:05.938 --> 00:00:12.740
sees that can be changed than just the
text content of our elements on the page.

3
00:00:13.870 --> 00:00:19.702
Actually, even the existence or not of
the element, that is the div or the input

4
00:00:19.702 --> 00:00:25.204
is also something that is a result or
should be a result of underlying data.

5
00:00:25.204 --> 00:00:30.571
That we are therefore able to funnel
pipe through our data to view converter

6
00:00:30.571 --> 00:00:36.278
function, such that the only place that
can affect the view what the user sees of

7
00:00:36.278 --> 00:00:42.410
the content in the app is through the data
to view converter, such that the handlers,

8
00:00:42.410 --> 00:00:48.280
that handle the user's action will
only be able to affect that data.

9
00:00:48.280 --> 00:00:52.124
And yet
this handler we had it affect the view.

10
00:00:52.124 --> 00:00:56.044
Maybe we thought it was gonna
be okay because it was a div but

11
00:00:56.044 --> 00:00:58.844
actually it turns out even the division,

12
00:00:58.844 --> 00:01:02.844
even though box on the page is
something that we can change or

13
00:01:02.844 --> 00:01:08.124
is content that the user can change and
therefore we should have it mirroring,

14
00:01:08.124 --> 00:01:13.084
matching, mapping from some underlying
state or data in JavaScript such

15
00:01:13.084 --> 00:01:17.269
as we have a source of truth
our JavaScript, state, or data.

16
00:01:17.269 --> 00:01:24.421
And that led us to, add to our
data view function, two new lines.

17
00:01:24.421 --> 00:01:29.781
Two important new lines here,
our creation of our element, our div and

18
00:01:29.781 --> 00:01:34.961
our input, not just our filling out
of its content and then line 8 and

19
00:01:34.961 --> 00:01:39.361
9, but also our creation of
our element in line 4 and 5.

20
00:01:39.361 --> 00:01:43.870
And remove the creation of
the element from our HTML code.

21
00:01:43.870 --> 00:01:47.945
So now our data to view function is
also creating the part of our view,

22
00:01:47.945 --> 00:01:53.219
the buckets, the containers, the input and
div, into which we're gonna put our text,

23
00:01:53.219 --> 00:01:56.910
our value, our text content setters,
will do that.

24
00:01:56.910 --> 00:02:02.093
All within data to view and
all conditional on underlying state

25
00:02:02.093 --> 00:02:08.252
tracked in JavaScript that gives us
a single source of truth, posh word for

26
00:02:08.252 --> 00:02:14.535
way of saying a single place in which
the cause of what you see is determined.

27
00:02:14.535 --> 00:02:17.130
And that cause is our post data.

28
00:02:17.130 --> 00:02:21.488
Even if in line 4 we see our Jess
input is gonna always display

29
00:02:21.488 --> 00:02:26.274
independent of whether post is,
I don't know, an empty string or

30
00:02:26.274 --> 00:02:30.030
the text will or something else, fine.

31
00:02:30.030 --> 00:02:33.365
It displays in all possible
states of the value of post.

32
00:02:33.365 --> 00:02:34.002
That's okay.

33
00:02:34.002 --> 00:02:38.720
It is still dependent definitionally
on post because it is being created

34
00:02:38.720 --> 00:02:40.434
through our data to view.

35
00:02:40.434 --> 00:02:45.289
And if we did wanna change when input
shows up or not, we could easily do so

36
00:02:45.289 --> 00:02:50.160
in our data view piping function from
our data to what the page displays.

37
00:02:50.160 --> 00:02:52.670
So let's get going people.

38
00:02:52.670 --> 00:02:56.835
We're back into it, let's just flag
where we're going, once we have,

39
00:02:56.835 --> 00:02:58.594
this is called a UI component.

40
00:02:58.594 --> 00:03:02.663
Funnels our data to our view the whole
way through, and we are back.

41
00:03:02.663 --> 00:03:08.226
And we are hopefully going to be able
to now walk through our models of our

42
00:03:08.226 --> 00:03:14.730
execution quite efficiently, so that
we can start to get to our visual DOM.

43
00:03:14.730 --> 00:03:16.020
Here we go, look at that.

44
00:03:16.020 --> 00:03:19.074
That's not too big a web page, is it?

45
00:03:19.074 --> 00:03:22.184
&gt;&gt; [LAUGH]
&gt;&gt; Ian approves.

46
00:03:22.184 --> 00:03:27.644
Then we have a model of this page that we
have the ability to interact with HTML or

47
00:03:27.644 --> 00:03:32.860
JavaScript, but we're really gonna
lean into using JavaScript for it now

48
00:03:32.860 --> 00:03:38.485
cuz we want to have even the elements are
in a sense, things that can be changed and

49
00:03:38.485 --> 00:03:43.930
therefore require underlying data,
which does not exist within HTML.

50
00:03:43.930 --> 00:03:47.925
Even the creation of a div and an input
are things that you can switch on or off,

51
00:03:47.925 --> 00:03:50.860
which you can't do from HTML or
one-time display.

52
00:03:50.860 --> 00:03:55.008
So now even the creation of elements
we're gonna do from JavaScript,

53
00:03:55.008 --> 00:03:58.886
where we can have them depend on
changeable data on state, okay?

54
00:03:58.886 --> 00:04:04.058
So there it is our C++ list of elements

55
00:04:04.058 --> 00:04:13.060
that we access with JavaScript
as our primary access point now.

56
00:04:13.060 --> 00:04:20.380
And then remember,
we do still load initially our HTML file.

57
00:04:20.380 --> 00:04:21.159
There it is.

58
00:04:21.159 --> 00:04:24.100
My provenance diagram by the way
prior to storing the file.

59
00:04:24.100 --> 00:04:26.090
Now, I've always been very proud of that.

60
00:04:26.090 --> 00:04:32.020
Load that into the web
browser into the HTML parser.

61
00:04:33.110 --> 00:04:35.130
My goodness, hopefully we have this model.

62
00:04:35.130 --> 00:04:39.480
And that's going to then add
each of those elements to

63
00:04:39.480 --> 00:04:42.880
the list of elements in C++ The DOM.

64
00:04:42.880 --> 00:04:46.406
Okay, and then if we hit a JavaScript
script at this point is all we're gonna

65
00:04:46.406 --> 00:04:47.520
hit in our HTML parser.

66
00:04:47.520 --> 00:04:52.401
And nowadays, we load our JavaScript
file switches on the JavaScript

67
00:04:52.401 --> 00:04:56.964
engine with its memory, and
its accesses to things like the DOM.

68
00:04:56.964 --> 00:05:02.421
The output of the DOM via the layout and
render engine is actually an image

69
00:05:02.421 --> 00:05:07.434
of the page 60 times a second,
literally bitmap graphic that's

70
00:05:07.434 --> 00:05:13.092
passed out to wherever it's gonna be
displayed by the graphics hardware.

71
00:05:13.092 --> 00:05:16.798
The graphics hardware being
the graphics card, or

72
00:05:16.798 --> 00:05:20.810
graphics processor, and
that is our schematic.

73
00:05:20.810 --> 00:05:25.510
But we do need to add something to our
list of elements as our HTML nodes in.

74
00:05:25.510 --> 00:05:32.272
And it's going to be,
That's gonna be what?

75
00:05:32.272 --> 00:05:36.576
Phil, if you just help me out quickly
here with our first element on the DOM.

76
00:05:36.576 --> 00:05:38.820
Now I think the only
thing we're loading in.

77
00:05:38.820 --> 00:05:41.550
&gt;&gt; It's gonna be our script elements
&gt;&gt; Yeah, brilliant.

78
00:05:43.380 --> 00:05:48.170
Let's then also now have our body
always on here as well because we're

79
00:05:48.170 --> 00:05:53.301
always going to, actually, we don't
need to show our script from now on.

80
00:05:53.301 --> 00:05:57.836
We know that our script's loaded in,
we know it's gonna be loaded in,

81
00:05:57.836 --> 00:06:02.598
it was loaded in, but we're just gonna
focus on our body element, which is

82
00:06:02.598 --> 00:06:07.940
describing the overall page and is there
in our DOM by default, and that's it.

83
00:06:07.940 --> 00:06:08.468
That'll do.

84
00:06:08.468 --> 00:06:10.490
Now let's get into our JavaScript.

85
00:06:10.490 --> 00:06:12.102
So we have a memory.

86
00:06:14.237 --> 00:06:20.638
I don't even appreciate enthusiasm, which
I repeat the exact same thing, 20 times.

87
00:06:20.638 --> 00:06:23.780
Our memory, isn't that fantastic?

88
00:06:23.780 --> 00:06:26.410
Let's put our call stack straight on here.

89
00:06:26.410 --> 00:06:28.678
Cool stack.

90
00:06:28.678 --> 00:06:30.676
There it is.

91
00:06:30.676 --> 00:06:35.849
There's our event loop to determine
whether to load things from

92
00:06:35.849 --> 00:06:41.598
our callback queue which becomes of
course extremely pertinent here,

93
00:06:41.598 --> 00:06:47.728
because we're going to have functions
called back to run JavaScript code,

94
00:06:47.728 --> 00:06:51.390
to engage with the change data or
the action.

95
00:06:51.390 --> 00:06:53.680
Sorry that the user has taken.

96
00:06:53.680 --> 00:06:57.752
We could even because
it's not a closed system,

97
00:06:57.752 --> 00:07:02.818
mention here immediately that
our user can take actions that

98
00:07:02.818 --> 00:07:07.880
will determine what executes
in our system, user action.

99
00:07:07.880 --> 00:07:10.690
We don't have any user actions
happening yet, but we will.

100
00:07:10.690 --> 00:07:13.640
Okay, now in JavaScript,
help me out justice.

101
00:07:13.640 --> 00:07:15.080
What is our object?

102
00:07:15.080 --> 00:07:19.700
Our mission critical object that
loads straight into JavaScript on its

103
00:07:19.700 --> 00:07:21.570
runtime beginning.

104
00:07:21.570 --> 00:07:22.447
Good to be kicked off.

105
00:07:22.447 --> 00:07:25.250
What happens?
What's gonna be loaded into its memory?

106
00:07:25.250 --> 00:07:25.800
&gt;&gt; On line one.

107
00:07:27.060 --> 00:07:30.714
&gt;&gt; As soon as JavaScript runs,
we automatically get available to us.

108
00:07:30.714 --> 00:07:32.940
&gt;&gt; Yeah, the Document Object
&gt;&gt; Brilliant,

109
00:07:32.940 --> 00:07:34.446
with a bunch of useful functions.

110
00:07:34.446 --> 00:07:36.668
We're gonna use a different one this time.

111
00:07:36.668 --> 00:07:39.260
Can you spot which one
we're gonna use this time?

112
00:07:39.260 --> 00:07:41.440
&gt;&gt; We got the replace child.

113
00:07:43.210 --> 00:07:45.050
&gt;&gt; Spot where that's been.

114
00:07:45.050 --> 00:07:46.360
&gt;&gt; Sorry, the set interval.

115
00:07:46.360 --> 00:07:49.020
Line 19, Is that where we're looking?

116
00:07:49.020 --> 00:07:51.240
&gt;&gt; No worries,
have a look at line 4 and 6.

117
00:07:51.240 --> 00:07:54.630
Can you spot what method we
might be using on document?

118
00:07:54.630 --> 00:07:55.310
&gt;&gt; The create element.

119
00:07:55.310 --> 00:07:56.740
&gt;&gt; Create element, exactly.

120
00:07:56.740 --> 00:07:57.800
That's one of ours.

121
00:07:57.800 --> 00:08:03.420
We also got, as you say in line 12,
what looks like a getter setter property.

122
00:08:03.420 --> 00:08:04.720
Can you spot what it is?

123
00:08:04.720 --> 00:08:09.272
&gt;&gt; Well, so if there's nothing
on in the body it's gonna be-

124
00:08:09.272 --> 00:08:11.132
&gt;&gt; Well, yeah, but

125
00:08:11.132 --> 00:08:15.000
what's the property called?

126
00:08:15.000 --> 00:08:17.100
&gt;&gt; Replace children.

127
00:08:17.100 --> 00:08:20.334
&gt;&gt; That's gonna be available once we have?

128
00:08:20.334 --> 00:08:21.826
Exactly.

129
00:08:21.826 --> 00:08:24.740
So what's gonna be on our document object?

130
00:08:24.740 --> 00:08:28.825
It's our body getter setter property.

131
00:08:28.825 --> 00:08:32.186
Which is gonna know where to go because,

132
00:08:34.921 --> 00:08:39.648
It's gonna know where to go because

133
00:08:39.648 --> 00:08:43.907
we have a hidden link to the DOM.

134
00:08:43.907 --> 00:08:50.218
The full list of elements and
any of these getter setters like body or

135
00:08:50.218 --> 00:08:54.759
functions like create
element are going to first

136
00:08:54.759 --> 00:08:58.770
check where they're accessing in C++.

137
00:08:58.770 --> 00:09:00.910
Okay, now we're set, Justice.

138
00:09:00.910 --> 00:09:04.170
In line one, we actually have three lines
of code that are separated by semicolons.

139
00:09:04.170 --> 00:09:06.400
Just to save space,
there are three separate lines.

140
00:09:06.400 --> 00:09:10.182
This is not me initializing multiple
variables in a clever one line way,

141
00:09:10.182 --> 00:09:12.050
this is three separate lines.

142
00:09:12.050 --> 00:09:13.884
What are those three that we are?

143
00:09:13.884 --> 00:09:17.000
And the reason I do this, by the way,
people, is just for diagramming.

144
00:09:17.000 --> 00:09:20.434
To keep things simple,
technically we'd probably encapsulate,

145
00:09:20.434 --> 00:09:22.010
protect many of these pieces.

146
00:09:22.010 --> 00:09:24.508
We'd probably declare them
locally in Data to View or

147
00:09:24.508 --> 00:09:26.290
parse them as an input to Data to View.

148
00:09:26.290 --> 00:09:28.033
The reason I do them here is so

149
00:09:28.033 --> 00:09:33.010
that I don't need to deal with my
favorite concept in JavaScript, closure.

150
00:09:33.010 --> 00:09:35.770
While a wonderful concept,
it's gonna be much harder to diagram.

151
00:09:35.770 --> 00:09:37.880
So I just put everything in global.

152
00:09:37.880 --> 00:09:40.870
In practice, we would probably,
certainly not.

153
00:09:40.870 --> 00:09:49.240
But just for diagramming purposes it lets
us easily diagram basically, easy as that.

154
00:09:49.240 --> 00:09:53.720
Okay, so what are those three variables
which we're declaring there, Justice?

155
00:09:53.720 --> 00:09:54.975
&gt;&gt; We've got a post-
&gt;&gt; Okay.

156
00:09:54.975 --> 00:09:57.330
&gt;&gt; Which is empty string.

157
00:09:57.330 --> 00:09:58.713
&gt;&gt; Both is an empty string, perfect.

158
00:09:58.713 --> 00:10:00.860
Next one, [INAUDIBLE]
&gt;&gt; A JS input.

159
00:10:00.860 --> 00:10:04.330
&gt;&gt; Beautiful,
we're not assigning it anything yet.

160
00:10:04.330 --> 00:10:06.880
I never mean to do that so
I know I did plus or equals.

161
00:10:06.880 --> 00:10:10.075
Because I always think of equals as a
command what whereas what we're doing here

162
00:10:10.075 --> 00:10:10.849
is we have stored.

163
00:10:10.849 --> 00:10:12.480
This is the result of
the command assignment.

164
00:10:12.480 --> 00:10:17.692
I never use equals in the memory, I mean,
Cola has a downside as well because

165
00:10:17.692 --> 00:10:22.741
Cola looks like an object property key
value pair, but I never liked using

166
00:10:22.741 --> 00:10:27.810
equals in this memory because it's
a command to go and assign something.

167
00:10:27.810 --> 00:10:31.604
So I never think that should be equals but
anyway, okay.

168
00:10:31.604 --> 00:10:37.570
JS input is well, on signed uninitialized
and then just did the same.

169
00:10:37.570 --> 00:10:38.345
So there we go.

170
00:10:38.345 --> 00:10:43.328
I'm putting them there only,
as I say, for diagrammatic purposes,

171
00:10:43.328 --> 00:10:46.210
but now let's declare some functions.

172
00:10:46.210 --> 00:10:51.320
Both our mega function here now
that's doing all of the creation of

173
00:10:51.320 --> 00:10:57.980
anything that's gonna be seen by the user,
but conditional on data in JavaScript.

174
00:10:57.980 --> 00:10:59.520
Wanna work out what the user sees?

175
00:10:59.520 --> 00:11:03.560
Go look at the data and go look at the one
place that pipes it through to the view,

176
00:11:03.560 --> 00:11:05.042
the dataToView converter.

177
00:11:05.042 --> 00:11:09.360
And then a handler which is our other
type of function we can have in UI.

178
00:11:09.360 --> 00:11:13.236
One, or at least in this structure,
one is the take the data, display it.

179
00:11:13.236 --> 00:11:15.223
The other is the user takes action,

180
00:11:15.223 --> 00:11:19.950
pinpoint change some data based off
that action, and do nothing else.

181
00:11:19.950 --> 00:11:22.840
Okay, let's say those two functions,
Justice.

182
00:11:22.840 --> 00:11:24.240
&gt;&gt; I have got the data to view.

183
00:11:24.240 --> 00:11:25.180
&gt;&gt; Yep, perfect.

184
00:11:25.180 --> 00:11:26.680
&gt;&gt; And the handle.

185
00:11:26.680 --> 00:11:28.527
&gt;&gt; And handle input.

186
00:11:28.527 --> 00:11:33.324
Okay, and now we start our process
of looping essentially running

187
00:11:33.324 --> 00:11:38.670
data to view which is gonna convert
any change data here on rotation.

188
00:11:38.670 --> 00:11:44.750
And we set that up by calling what,
Justice?

189
00:11:44.750 --> 00:11:45.500
&gt;&gt; Set interval.

190
00:11:45.500 --> 00:11:47.459
&gt;&gt; Yeah.
Which is going to do what?

191
00:11:47.459 --> 00:11:50.230
&gt;&gt; It's gonna take
the reference of data to view.

192
00:11:50.230 --> 00:11:51.250
&gt;&gt; Beautiful.

193
00:11:51.250 --> 00:11:53.100
I don't know why I did another line there,
sorry.

194
00:11:53.100 --> 00:11:55.190
And what argument, how many milliseconds?

195
00:11:55.190 --> 00:11:56.007
&gt;&gt; 15.

196
00:11:56.007 --> 00:11:58.210
&gt;&gt; 15, yeah, spot on.

197
00:11:58.210 --> 00:12:02.242
That's going to pass that to our
timer feature on the web browser,

198
00:12:02.242 --> 00:12:07.910
implemented somewhere between JavaScript
and the browser, it's C++ environment.

199
00:12:07.910 --> 00:12:09.710
But what we do know is, the waiting for

200
00:12:09.710 --> 00:12:12.806
that 15 milliseconds of pause in
order to execute data to view,

201
00:12:12.806 --> 00:12:16.950
is not happening in JavaScript and
blocking anything in JavaScript running.

202
00:12:16.950 --> 00:12:18.820
It's absolutely not happening there.

203
00:12:18.820 --> 00:12:23.801
So we're setting up an interval
of 15 milliseconds in which

204
00:12:23.801 --> 00:12:27.535
we're going to see our
Data To View function,

205
00:12:27.535 --> 00:12:32.600
DTV, be called back at 15
milliseconds into JavaScript.

206
00:12:32.600 --> 00:12:34.480
In the meantime, that finishes executing.

207
00:12:34.480 --> 00:12:36.720
I like to draw a line through
to make it really clear.

208
00:12:36.720 --> 00:12:37.707
That is done.

