WEBVTT

1
00:00:00.040 --> 00:00:01.120
Now we are done.

2
00:00:01.120 --> 00:00:05.830
Now our JavaScript synchronous code
finished running finished executing.

3
00:00:05.830 --> 00:00:08.950
We are now in the land of user action.

4
00:00:08.950 --> 00:00:14.710
Our system is fully set, locked and
loaded to receive user action.

5
00:00:14.710 --> 00:00:16.590
And the first thing they
do is click on the cell.

6
00:00:16.590 --> 00:00:22.130
So one, they're going to click
not the cell, click on the input.

7
00:00:22.130 --> 00:00:22.750
Okay, yeah.

8
00:00:22.750 --> 00:00:26.330
We're using pink now for user actions.

9
00:00:26.330 --> 00:00:28.753
They click on the input that is going to.

10
00:00:33.315 --> 00:00:36.530
Send an event to the DOM to say,

11
00:00:36.530 --> 00:00:41.235
please now trigger
the handle click function

12
00:00:41.235 --> 00:00:46.449
being added to our callback
queue in JavaScript.

13
00:00:46.449 --> 00:00:53.703
Where am I going to put that so
that we have enough space here?

14
00:00:53.703 --> 00:00:56.090
Well, that's a bit of a shame.

15
00:00:56.090 --> 00:00:57.110
We're a bit out of space here.

16
00:00:57.110 --> 00:01:02.230
I really thought,
could we put it down here maybe?

17
00:01:02.230 --> 00:01:03.342
I don't know.
Not ideal, but

18
00:01:03.342 --> 00:01:05.310
we'll put it down here for now.

19
00:01:05.310 --> 00:01:09.320
So we had a call stack.

20
00:01:09.320 --> 00:01:12.470
This is a strange place to put it,
but not the end of the world.

21
00:01:12.470 --> 00:01:16.946
There's our call stack and
then here's our call back queue,

22
00:01:16.946 --> 00:01:20.980
which is going to be our
queue of functions here.

23
00:01:20.980 --> 00:01:26.487
That are, sorry, waiting to be run
in JavaScript on the call stack.

24
00:01:26.487 --> 00:01:33.253
They're gonna have to have prints added on
our behalf by JavaScript not by us, okay.

25
00:01:33.253 --> 00:01:41.480
So user action handle click is going to be
added to the callback queue, there it is.

26
00:01:41.480 --> 00:01:47.340
Handle click is added to the callback
queue, the event loop checks.

27
00:01:47.340 --> 00:01:49.820
Is there anything still being
executed in JavaScript?

28
00:01:49.820 --> 00:01:51.520
Well, no, the answer's not.

29
00:01:51.520 --> 00:01:56.310
Let's say this is, I dunno, let's say this
is at one minute, something like that.

30
00:01:57.610 --> 00:01:59.890
Is there any code still running here?

31
00:01:59.890 --> 00:02:01.730
No, you bet there is not.

32
00:02:01.730 --> 00:02:05.270
At one minute there is no
code still running here.

33
00:02:05.270 --> 00:02:09.719
And so, we are going to have our handle
click function added by our event loop

34
00:02:09.719 --> 00:02:13.473
that checks is there any code
running to our stack of functions,

35
00:02:13.473 --> 00:02:16.902
list of functions roughly list,
that are gonna execute.

36
00:02:16.902 --> 00:02:22.663
So, on it goes,
handle click I got that right

37
00:02:22.663 --> 00:02:28.590
yeah handle click,
shall we use pink for now?

38
00:02:28.590 --> 00:02:29.573
Don't we have any other colors?

39
00:02:29.573 --> 00:02:35.911
Orange I guess, it's orange for
JavaScript action, there it is.

40
00:02:35.911 --> 00:02:37.690
And you know what's about to come, people.

41
00:02:37.690 --> 00:02:38.238
I'm not going to overdo it.

42
00:02:38.238 --> 00:02:44.133
All right, we're going to execute handle
click which is going to therefore,

43
00:02:44.133 --> 00:02:49.460
with the help of JavaScript,
open a brand new what, everybody?

44
00:02:49.460 --> 00:02:51.540
&gt;&gt; Execution context.

45
00:02:51.540 --> 00:02:52.180
&gt;&gt; Beautiful.

46
00:02:53.480 --> 00:02:54.230
Beautiful.

47
00:02:55.860 --> 00:03:00.470
Hopefully our online community are all
shouting execution contest as well.

48
00:03:00.470 --> 00:03:04.979
And this is a pretty minimal one.

49
00:03:04.979 --> 00:03:10.485
JS input because remember,
our user's action

50
00:03:10.485 --> 00:03:16.677
triggers a function to be
passed back to JavaScript,

51
00:03:16.677 --> 00:03:21.784
to be called back into
JavaScript to be run.

52
00:03:21.784 --> 00:03:25.942
And that is gonna happen at the exact
moment that the user starts inputting, or

53
00:03:25.942 --> 00:03:27.905
starts clicking, clicks, sorry.

54
00:03:27.905 --> 00:03:32.818
And so, we know when this runs that
we can make changes to what the user

55
00:03:32.818 --> 00:03:35.288
sees based on the user's action.

56
00:03:35.288 --> 00:03:36.690
But I've gotta follow that through.

57
00:03:36.690 --> 00:03:40.250
So the user type, these are clicks.

58
00:03:41.720 --> 00:03:44.900
I'm purposely finding
this difficult I promise.

59
00:03:44.900 --> 00:03:49.639
The user clicks and that's going to change

60
00:03:49.639 --> 00:03:54.690
the input default text because we want.

61
00:03:54.690 --> 00:04:01.260
When it's currently got text in
it to remove that text, okay.

62
00:04:01.260 --> 00:04:04.230
That is called, what I just did there,

63
00:04:04.230 --> 00:04:09.275
that scene was called a reason was
reasoning about state and view.

64
00:04:09.275 --> 00:04:15.480
Reasoning about the data and what
the user sees based on user interaction.

65
00:04:15.480 --> 00:04:17.720
The user is changing what they see.

66
00:04:17.720 --> 00:04:24.364
And I guess implicitly
changing the data via us.

67
00:04:24.364 --> 00:04:26.607
Well, we're not really tracking
the data in JavaScript there, are we?

68
00:04:26.607 --> 00:04:29.714
We're taking a string
literal in line five and

69
00:04:29.714 --> 00:04:33.270
I guess a pending
displaying that WhatsApp.

70
00:04:33.270 --> 00:04:36.273
And then we're doing that again
here with an empty string, but

71
00:04:36.273 --> 00:04:39.710
that's us reasoning about how
things the user sees will change.

72
00:04:39.710 --> 00:04:46.840
So with that in mind, JSInput,
value is equal to empty string.

73
00:04:46.840 --> 00:04:49.020
Who would like to give
a shot at verbalizing that?

74
00:04:49.020 --> 00:04:52.041
Ian, can you give me a shot
at verbalizing that in

75
00:04:52.041 --> 00:04:54.710
terms of our input
element on the DOM here?

76
00:04:56.200 --> 00:05:01.020
&gt;&gt; So when we,
that is in handle click line 12, right?

77
00:05:01.020 --> 00:05:02.591
&gt;&gt; Yeah, handle click,
we're in handle click, exactly right.

78
00:05:02.591 --> 00:05:06.212
&gt;&gt; So JS input is gonna be
our accessor object for

79
00:05:06.212 --> 00:05:09.179
that input that we queried earlier.

80
00:05:09.179 --> 00:05:09.870
&gt;&gt; Perfect.

81
00:05:09.870 --> 00:05:14.278
&gt;&gt; And we're accessing the setter for
value.

82
00:05:14.278 --> 00:05:15.069
&gt;&gt; Yep, perfect.

83
00:05:15.069 --> 00:05:17.200
&gt;&gt; And we're signing into
an empty string literal.

84
00:05:17.200 --> 00:05:18.410
Rule.
&gt;&gt; Beautiful.

85
00:05:18.410 --> 00:05:19.007
And there it is.
&gt;&gt; And

86
00:05:19.007 --> 00:05:21.775
that's the way to go over to the DOM and
C++ land.

87
00:05:21.775 --> 00:05:23.557
And because it's an accessor object,

88
00:05:23.557 --> 00:05:26.657
it's gonna happen over there,
&gt;&gt; Yes, exactly set the value to

89
00:05:26.657 --> 00:05:31.800
an empty string, which is then going to do
what are the actual pixels on the page?

90
00:05:31.800 --> 00:05:34.881
&gt;&gt; We will end up with not
pixels where they used to be.

91
00:05:34.881 --> 00:05:37.042
&gt;&gt; Yes, exactly.

92
00:05:37.042 --> 00:05:39.150
No pixels where there were pixels.

93
00:05:39.150 --> 00:05:45.386
Beautiful and
that is our handle click finished.

