WEBVTT

1
00:00:00.140 --> 00:00:04.360
All right, so, let's keep going,
let's get started.

2
00:00:04.360 --> 00:00:04.940
Phil, help me out.

3
00:00:04.940 --> 00:00:06.900
We're gonna go around the room.

4
00:00:06.900 --> 00:00:09.390
Phil, line one of our JavaScript.

5
00:00:09.390 --> 00:00:12.976
With that in mind, that we're gonna have
to make everything on the page depend on

6
00:00:12.976 --> 00:00:17.060
our data, we're gonna start off by having
our post as, we've got three states here.

7
00:00:17.060 --> 00:00:18.586
Sorry, Phil.
We've got three different

8
00:00:18.586 --> 00:00:19.950
stages of our data here.

9
00:00:19.950 --> 00:00:22.807
Post can be undefined by the looks of it,

10
00:00:22.807 --> 00:00:27.091
posts can then be empty string
before they start typing, and

11
00:00:27.091 --> 00:00:33.170
then posts can be whatever the user is
typing, the value of what they're typing.

12
00:00:33.170 --> 00:00:38.008
So undefined, so that's the shift of
mentality we have to go to, which is,

13
00:00:38.008 --> 00:00:43.360
define what the user can see in terms of
different possible values for our data.

14
00:00:43.360 --> 00:00:46.900
It's quite a nice mental model,
I quite like that as a mental model.

15
00:00:46.900 --> 00:00:51.470
So what's our first state
that our data can take, Phil?

16
00:00:51.470 --> 00:00:54.418
&gt;&gt; So we're gonna declare
a post let variable and

17
00:00:54.418 --> 00:00:57.270
initialize it to the value of undefined.

18
00:00:57.270 --> 00:00:59.410
&gt;&gt; Beautiful, okay.

19
00:00:59.410 --> 00:01:03.920
A post initialize it to undefined.

20
00:01:03.920 --> 00:01:09.104
And then what are we going to,
in line two,

21
00:01:09.104 --> 00:01:13.425
store in our global content there.

22
00:01:13.425 --> 00:01:15.805
Feel free to keep going and
interrupt me as I go as well.

23
00:01:15.805 --> 00:01:16.625
&gt;&gt; Yeah.

24
00:01:16.625 --> 00:01:19.101
So we're gonna declare
a variable jsInput and

25
00:01:19.101 --> 00:01:22.276
initialize it to the evaluated
results of running the query

26
00:01:22.276 --> 00:01:26.355
selector method on the document object,
passing in the argument of input.

27
00:01:27.645 --> 00:01:29.005
&gt;&gt; Beautiful, feel free to keep going.

28
00:01:29.005 --> 00:01:30.255
&gt;&gt; Okay.

29
00:01:30.255 --> 00:01:34.818
This is going to allow us to access or

30
00:01:34.818 --> 00:01:40.902
to reverse the actual C++ DOM,
searching for

31
00:01:40.902 --> 00:01:46.520
a node of the value of
input which it finds.

32
00:01:46.520 --> 00:01:48.070
&gt;&gt; Yes it does, there it is.

33
00:01:48.070 --> 00:01:50.976
&gt;&gt; And because we can't bring
that C++ object back into

34
00:01:50.976 --> 00:01:52.170
JavaScript-
&gt;&gt; Right.

35
00:01:52.170 --> 00:01:55.580
&gt;&gt; We create an accessor object.

36
00:01:55.580 --> 00:01:56.270
&gt;&gt; Brilliant.

37
00:01:56.270 --> 00:01:58.670
&gt;&gt; Is stored under the jsInput.

38
00:01:58.670 --> 00:02:03.411
&gt;&gt; Brilliant, which has a whole
bunch of useful properties that

39
00:02:03.411 --> 00:02:06.611
act as getter setters, which I include?

40
00:02:06.611 --> 00:02:12.190
&gt;&gt; Which include, let me scan through
here, which include the dot value.

41
00:02:12.190 --> 00:02:13.330
&gt;&gt; Yes, exactly, value.

42
00:02:13.330 --> 00:02:16.330
All the way down to the bottom
there's a couple more there.

43
00:02:16.330 --> 00:02:21.870
&gt;&gt; Which include the on click and-
&gt;&gt; Perfect, I think that's it.

44
00:02:21.870 --> 00:02:23.670
Is that it, everyone?

45
00:02:23.670 --> 00:02:24.828
&gt;&gt; On input as well.

46
00:02:24.828 --> 00:02:26.320
&gt;&gt; Did I get on it?
Sorry, I thought you said on input.

47
00:02:26.320 --> 00:02:27.900
Yeah, I got all three of those.

48
00:02:27.900 --> 00:02:32.756
Brilliant, they are all acting
as getter setters to add values,

49
00:02:32.756 --> 00:02:38.320
handlers, whatever,
to the DOM C++ object, hooray, beautiful.

50
00:02:38.320 --> 00:02:42.295
That is what came out of
running querySelector.

51
00:02:42.295 --> 00:02:45.915
Once my pens work, it's so
much, makes me so happy.

52
00:02:47.005 --> 00:02:49.275
There's the hidden link and
then there's the functions.

53
00:02:49.275 --> 00:02:51.055
I'm just sort of showing the shape, right?

54
00:02:51.055 --> 00:02:53.165
Hidden link and then the methods.

55
00:02:53.165 --> 00:02:55.965
Okay, by analogy,
what are we saving in jsDiv?

56
00:02:55.965 --> 00:02:56.465
Why?

57
00:02:58.355 --> 00:03:00.665
&gt;&gt; Yes, what are we saving to it?

58
00:03:00.665 --> 00:03:03.860
&gt;&gt; Yeah, just buy analogy, I mean,
unless people feel like we're not at

59
00:03:03.860 --> 00:03:06.000
the stage where we want
to just do it by analogy.

60
00:03:07.567 --> 00:03:09.058
Is, we're at the stage where we wanna

61
00:03:09.058 --> 00:03:09.560
do it by-
&gt;&gt; [LAUGH]

62
00:03:09.560 --> 00:03:12.990
&gt;&gt; By not drawing it, by just saying it.

63
00:03:12.990 --> 00:03:14.090
&gt;&gt; I stand with my tea.

64
00:03:14.090 --> 00:03:14.600
&gt;&gt; Yeah.

65
00:03:14.600 --> 00:03:16.010
All right, good, good, good.

66
00:03:16.010 --> 00:03:21.880
So what's jsDiv gonna have in it after
querySelector has finished executing?

67
00:03:21.880 --> 00:03:24.430
&gt;&gt; We forgot the textContent accessor.

68
00:03:24.430 --> 00:03:26.190
&gt;&gt; Yes, textContent.

69
00:03:26.190 --> 00:03:30.133
Why don't we start with what element
in the DOM it's going to have a hidden

70
00:03:30.133 --> 00:03:31.040
reference to.

71
00:03:31.040 --> 00:03:31.878
&gt;&gt; Sorry.
Yeah,

72
00:03:31.878 --> 00:03:35.470
it's going to link to the first
div that are located in the DOM.

73
00:03:35.470 --> 00:03:36.978
&gt;&gt; Brilliant, no people the first div.

74
00:03:36.978 --> 00:03:39.970
Exactly, well put, and
as you say, what method?

75
00:03:39.970 --> 00:03:40.940
&gt;&gt; textContent.

76
00:03:42.370 --> 00:03:44.230
&gt;&gt; Beautiful, perfect, sweet.

77
00:03:44.230 --> 00:03:46.010
That's brilliant, I love it.

78
00:03:46.010 --> 00:03:49.380
So, well done, and
now let's save our three functions.

79
00:03:49.380 --> 00:03:50.740
One of them is a big deal function.

80
00:03:50.740 --> 00:03:52.950
The other, to be fair, actually,
they're all pretty important, right?

81
00:03:52.950 --> 00:03:58.850
One of them is our spray out,
and the other is our pinpoint in.

82
00:03:59.870 --> 00:04:00.451
Yeah perfect.

83
00:04:00.451 --> 00:04:02.260
Sorry, the other two are our pinpoint in.

84
00:04:02.260 --> 00:04:06.490
So let's have all of those defined for
us, why?

85
00:04:07.580 --> 00:04:10.640
&gt;&gt; We are defining
the function dataToView.

86
00:04:12.530 --> 00:04:13.330
&gt;&gt; Perfect.

87
00:04:13.330 --> 00:04:16.660
&gt;&gt; Also defining handleclick and
handleInput.

88
00:04:16.660 --> 00:04:22.320
&gt;&gt; Handleclick, I reordered these here.

89
00:04:22.320 --> 00:04:25.567
It has no effect, of course,
notably in JavaScript,

90
00:04:25.567 --> 00:04:30.296
because we would love maybe in some way to
be able to determine the order of things

91
00:04:30.296 --> 00:04:33.840
happening on this page via
the order of code in JavaScript.

92
00:04:33.840 --> 00:04:34.750
But I did actually switch.

93
00:04:34.750 --> 00:04:39.601
You can see, handleclick and
handleInput and then the onclick and

94
00:04:39.601 --> 00:04:41.250
oninput assignment.

95
00:04:41.250 --> 00:04:46.902
Just because the user is gonna click
first and then start writing second,

96
00:04:46.902 --> 00:04:52.160
but it has obviously no effect,
is just for our visual experience.

97
00:04:52.160 --> 00:04:56.000
Okay, then we have,
let's make sure it's clear that separate.

98
00:04:56.000 --> 00:04:59.951
Now we get to adding these two functions

99
00:04:59.951 --> 00:05:04.390
as handlers on our Input
element on the DOM.

100
00:05:04.390 --> 00:05:06.460
Alexa, can you help me with that,
in line 19 and 20?

101
00:05:06.460 --> 00:05:08.780
We'll do the first one.

102
00:05:08.780 --> 00:05:12.240
&gt;&gt; Okay, so
we're gonna find our jsInput object.

103
00:05:12.240 --> 00:05:12.920
&gt;&gt; Yep.

104
00:05:12.920 --> 00:05:19.276
&gt;&gt; And use the onclick setter to set our
handleclick function as the callback.

105
00:05:19.276 --> 00:05:19.780
&gt;&gt; Yep.

106
00:05:19.780 --> 00:05:24.040
&gt;&gt; For
handling a the event that a user clicks.

107
00:05:24.040 --> 00:05:27.180
&gt;&gt; Perfect, brilliant,
handleclick function.

108
00:05:27.180 --> 00:05:30.891
Yeah, and
that is gonna be set as the, yeah,

109
00:05:30.891 --> 00:05:35.110
honestly the click handler,
callback function.

110
00:05:35.110 --> 00:05:37.460
That's not a bad name for it, exactly.

111
00:05:37.460 --> 00:05:43.080
So for click, don't worry though.

112
00:05:43.080 --> 00:05:44.580
Look at that, that's amazing.

113
00:05:46.704 --> 00:05:50.377
I'm so relieved as you can see,

114
00:05:50.377 --> 00:05:55.009
handleclick function, handleclick.

115
00:05:56.080 --> 00:05:59.470
Callback function, callback because
it's gonna be called back in.

116
00:05:59.470 --> 00:06:04.747
Can I separate these with
a line just to make it clear,

117
00:06:04.747 --> 00:06:10.397
right, but they are object,
object, object in C++.

118
00:06:10.397 --> 00:06:18.806
Instantiations of classes that can produce
a div object in the dominant list in C++.

119
00:06:18.806 --> 00:06:23.621
And the next one,
I guess by analogy we can do again, Alexa,

120
00:06:23.621 --> 00:06:29.750
we just do exactly what you said,
again I won't write it again no.

121
00:06:29.750 --> 00:06:34.240
&gt;&gt; Yeah we find the JSON input object with
that link to the input element on the DOM.

122
00:06:34.240 --> 00:06:42.260
And set the handleInput function as
a callback for handling input event.

123
00:06:42.260 --> 00:06:45.414
&gt;&gt; handleInput function.

124
00:06:47.385 --> 00:06:49.830
Okay, great stuff.

125
00:06:49.830 --> 00:06:53.940
I'm feeling a bit like, people are gonna
be, yeah, yeah, yeah, we got it.

126
00:06:53.940 --> 00:06:56.860
But I tell you,
that's the nature of hard parts.

127
00:06:56.860 --> 00:07:00.145
I'm making excuses for it here,
but that is the nature.

128
00:07:00.145 --> 00:07:03.700
So we put our handlers on, sweet.

129
00:07:03.700 --> 00:07:08.640
Now, now we want to update
what the user sees.

130
00:07:08.640 --> 00:07:11.930
We're not worrying about the input and
div, that was set by HTML.

131
00:07:11.930 --> 00:07:15.100
That might become a question in
its own right in a bit tomorrow.

132
00:07:15.100 --> 00:07:20.058
However, all we're determining that can
be changed by the user is the content

133
00:07:20.058 --> 00:07:24.180
of elements, the value or
the text content or whatever.

134
00:07:24.180 --> 00:07:27.004
Meaning, there should be
nothing in the value and

135
00:07:27.004 --> 00:07:29.692
text content of DOM elements,
in other words,

136
00:07:29.692 --> 00:07:34.660
no content that the user sees that is not
traceable back to some data in JavaScript.

137
00:07:34.660 --> 00:07:36.460
What a great restriction on ourselves.

138
00:07:36.460 --> 00:07:39.540
What a way to be guaranteed to know
what's displaying on the page,

139
00:07:39.540 --> 00:07:41.070
it's whatever's here.

140
00:07:41.070 --> 00:07:44.513
And then check the data to view converter
to see what the conditional logic is to

141
00:07:44.513 --> 00:07:48.415
determine what's gonna display on the page
based off that data, based off that state.

142
00:07:48.415 --> 00:07:52.560
State-driven views, yeah,
we've heard multiple words for it.

143
00:07:52.560 --> 00:07:56.080
But this is a paradigm shift,
honestly, in UI engineering.

144
00:07:56.080 --> 00:08:02.832
Okay, so let's run our
dataToview converter function,

145
00:08:02.832 --> 00:08:08.207
dataToview, dataToview, execution core,

146
00:08:08.207 --> 00:08:12.280
brand new, everyone together.

147
00:08:12.280 --> 00:08:14.150
&gt;&gt; Execution context.

148
00:08:14.150 --> 00:08:21.050
&gt;&gt; Beautiful, and its job is to
convert our data to our view.

149
00:08:21.050 --> 00:08:24.400
Now that conversion might
include determining.

150
00:08:24.400 --> 00:08:28.512
It means based on the data,
determine what to display on the view.

151
00:08:28.512 --> 00:08:31.602
So that might be as we're about
to do here, if post is undefined,

152
00:08:31.602 --> 00:08:33.459
you're not gonna display undefined,

153
00:08:33.459 --> 00:08:36.630
you're gonna use that information
to determine what to display.

154
00:08:36.630 --> 00:08:39.946
And that's where you have to
start reasoning about your, and

155
00:08:39.946 --> 00:08:44.090
that's where you start to see there's
a lot of conditionals in your UI code to

156
00:08:44.090 --> 00:08:48.720
determine of your underlying state,
what's gonna end up being displayed.

157
00:08:48.720 --> 00:08:53.840
So with that in mind,
all right, we have jsInput.

158
00:08:55.480 --> 00:08:58.050
We're gonna use our value setter, right?

159
00:08:58.050 --> 00:09:02.244
Whatever's on the right hand side is
gonna be stored on value here and

160
00:09:02.244 --> 00:09:03.487
show up to the user.

161
00:09:03.487 --> 00:09:07.238
All right, is post undefined?

162
00:09:07.238 --> 00:09:10.390
Let's go to Justice, is post undefined?

163
00:09:12.630 --> 00:09:13.651
&gt;&gt; If posts is undefined.

164
00:09:13.651 --> 00:09:15.460
&gt;&gt; These posts are undefined is our state.

165
00:09:15.460 --> 00:09:16.184
Is it undefined?

166
00:09:16.184 --> 00:09:16.841
&gt;&gt; It is undefined, yes.

167
00:09:16.841 --> 00:09:17.830
&gt;&gt; It is undefined.

168
00:09:17.830 --> 00:09:23.773
If it's undefined, what are we
going to assign to jsInput.value or

169
00:09:23.773 --> 00:09:28.587
what are we going to use our
set a value property to assign

170
00:09:28.587 --> 00:09:31.467
to the C++ object as its value?

171
00:09:31.467 --> 00:09:34.944
&gt;&gt; You're gonna set a string for
what called, what's up?

172
00:09:34.944 --> 00:09:36.140
&gt;&gt; Brilliant, exactly.

173
00:09:36.140 --> 00:09:41.056
So post is actually undefined therefore,
we evaluate the ternary to

174
00:09:41.056 --> 00:09:47.250
evaluate to become the value of the first
thing in it, which is, what's up.

175
00:09:47.250 --> 00:09:49.090
Anyone have a better word for that?

176
00:09:49.090 --> 00:09:49.590
&gt;&gt; Operand?

177
00:09:50.834 --> 00:09:52.490
&gt;&gt; What a show.

178
00:09:52.490 --> 00:09:53.270
&gt;&gt; Yeah, no, operand.

179
00:09:54.500 --> 00:09:58.040
&gt;&gt; That sounds about right,
all right, first operand, I know.

180
00:09:58.040 --> 00:09:59.059
Good stuff.

181
00:09:59.059 --> 00:10:06.572
So it's gonna be what's up,
right now is, it's the.

182
00:10:06.572 --> 00:10:08.566
&gt;&gt; [LAUGH]
&gt;&gt; I don't know, I've done it, I don't,

183
00:10:08.566 --> 00:10:10.250
I'm sure, he's very nice actually.

184
00:10:10.250 --> 00:10:12.950
Well, yeah, he's very loving.

185
00:10:12.950 --> 00:10:16.910
Okay, 'what's up', there it is.

186
00:10:16.910 --> 00:10:20.630
Okay, and
that is gonna use the setter method,

187
00:10:20.630 --> 00:10:25.559
set a property value to set that
as the value on our DOM element,

188
00:10:25.559 --> 00:10:30.310
and that's gonna show up as our
preview text or our, sorry.

189
00:10:30.310 --> 00:10:33.380
Yeah, as a, whatever it's called.

190
00:10:33.380 --> 00:10:35.120
Default text, perfect.

191
00:10:35.120 --> 00:10:38.040
Then we are gonna use our,
this is interesting.

192
00:10:38.040 --> 00:10:43.664
We're gonna do the same thing to determine
what our content of our div will be.

193
00:10:45.355 --> 00:10:50.457
Using our textContent setter and it's
going to be whatever the value of post is,

194
00:10:50.457 --> 00:10:53.080
which is undefined and helpfully.

195
00:10:53.080 --> 00:10:59.094
Fairly helpfully, our API for
the textContent setter,

196
00:10:59.094 --> 00:11:04.479
getter property on a div,
evaluates or converts or

197
00:11:04.479 --> 00:11:10.520
assesses undefined and
assigns an empty string.

198
00:11:10.520 --> 00:11:11.860
That's pretty nice.

199
00:11:11.860 --> 00:11:15.609
That ensures that we don't need to
write any conditional logic to say,

200
00:11:15.609 --> 00:11:18.870
if it's undefined,
please don't post undefined as a text.

201
00:11:18.870 --> 00:11:24.264
It actually evaluates to an empty
string so nothing shows up, beautiful.

202
00:11:24.264 --> 00:11:28.872
I honestly, I do really love that now
everything we do runs from data through

203
00:11:28.872 --> 00:11:33.120
a bunch of clever conditionals to
determine not that clever here, but

204
00:11:33.120 --> 00:11:34.066
rearranging.

205
00:11:34.066 --> 00:11:38.489
Engineers will do clever conditionals
here, to determine what, based

206
00:11:38.489 --> 00:11:43.756
on the state, what based on the data,
will show up on the view, on the page.

207
00:11:43.756 --> 00:11:45.406
Perfect, and we've done it.

208
00:11:45.406 --> 00:11:47.716
We've got our one function here,
we're done.

