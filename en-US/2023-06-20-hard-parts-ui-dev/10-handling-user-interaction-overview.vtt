WEBVTT

1
00:00:00.220 --> 00:00:03.580
How can I achieve my two goals
of user interface engineering?

2
00:00:03.580 --> 00:00:05.224
One, displaying content.

3
00:00:05.224 --> 00:00:09.311
With HTML, it was so intuitive,
we listed out the things we wanted in our

4
00:00:09.311 --> 00:00:14.068
C++ list of elements that would show up on
the page automatically by design through

5
00:00:14.068 --> 00:00:17.380
our layout and
render engine all part of webCoRE.

6
00:00:17.380 --> 00:00:22.366
And we loved our HTML but unfortunately in
practice, it gave us no data associated

7
00:00:22.366 --> 00:00:27.460
with what we saw, meaning the user
couldn't actually change what they see.

8
00:00:27.460 --> 00:00:32.373
Because even though I feel like I'm seeing
data when I see the number 7 displayed,

9
00:00:32.373 --> 00:00:33.435
could be by HTML.

10
00:00:33.435 --> 00:00:37.765
I can't actually change a collection of
pixels, maybe 30 pixels that look like

11
00:00:37.765 --> 00:00:42.120
number 7 into number 8 unless there's
associated data underneath it.

12
00:00:42.120 --> 00:00:45.221
Because even though I think when
I see it change on the pixels,

13
00:00:45.221 --> 00:00:47.240
that that is a change happening.

14
00:00:47.240 --> 00:00:48.670
That is not the change happening.

15
00:00:48.670 --> 00:00:52.283
The change must be happening in a data
store, in the computer's memory,

16
00:00:52.283 --> 00:00:56.120
in the computer's store of
information somewhere in the machine.

17
00:00:56.120 --> 00:00:59.861
And we only have changeable or
mutable, buzzword for changeable,

18
00:00:59.861 --> 00:01:04.124
data available to us and the ability to
write code to do that in what language,

19
00:01:04.124 --> 00:01:05.900
everybody, together?

20
00:01:05.900 --> 00:01:07.070
&gt;&gt; JavaScript.

21
00:01:07.070 --> 00:01:08.540
&gt;&gt; Exactly, well done.

22
00:01:08.540 --> 00:01:11.336
Not like the last time I did that and
somebody went HTML.

23
00:01:11.336 --> 00:01:14.790
&gt;&gt; [LAUGH]
&gt;&gt; No, JavaScript, perfect.

24
00:01:15.810 --> 00:01:20.054
There's nothing like having an open-ended
question as you've been on a stream of

25
00:01:20.054 --> 00:01:21.216
flow and people tune.

26
00:01:21.216 --> 00:01:26.066
All right, so we were able to
display data on the page via our

27
00:01:26.066 --> 00:01:29.700
C++ list of elements, beautiful.

28
00:01:29.700 --> 00:01:35.129
Now, can we let the user change
the content, the data they're seeing,

29
00:01:35.129 --> 00:01:42.100
which implies changing it in JavaScript,
and changing what they see on the page?

30
00:01:42.100 --> 00:01:46.097
Well, we know we can display content
from JavaScript into C++ into the DOM,

31
00:01:46.097 --> 00:01:47.770
into the list of elements.

32
00:01:47.770 --> 00:01:49.360
Can we go in the other direction?

33
00:01:50.900 --> 00:01:53.860
I mean, obviously, we will be able to,
it'd be a great shame if we couldn't,

34
00:01:53.860 --> 00:01:55.020
but let's go.

35
00:01:55.020 --> 00:01:56.400
We've lost our schematic here.

36
00:01:56.400 --> 00:01:59.118
Maybe we'll keep our
schematic up here in general,

37
00:01:59.118 --> 00:02:03.000
just cuz it lets us sort of keep track,
but it's a good reminder here.

38
00:02:03.000 --> 00:02:06.750
So we have our,
what are we calling it, app.html.

39
00:02:06.750 --> 00:02:08.580
Schematic, people, is just a posh word.

40
00:02:08.580 --> 00:02:11.481
I mean, I'm thinking it's what it means,
I didn't really check,

41
00:02:11.481 --> 00:02:12.740
I heard that word used.

42
00:02:12.740 --> 00:02:17.960
It's a word that means the structure and
how those things interact with each other.

43
00:02:17.960 --> 00:02:19.930
I think that's what a schematic is,
I don't really know.

44
00:02:19.930 --> 00:02:21.060
I suppose it is.

45
00:02:21.060 --> 00:02:24.027
Sounds right, isn't it?

46
00:02:24.027 --> 00:02:27.410
&gt;&gt; [LAUGH]
&gt;&gt; Who knows?

47
00:02:27.410 --> 00:02:29.126
Probably true.

48
00:02:29.126 --> 00:02:34.259
There we go, and that loads into
the HTML parser that is going

49
00:02:34.259 --> 00:02:40.097
to look through each line of it and
add each piece to the C++ object or

50
00:02:40.097 --> 00:02:44.860
list of elements, but
technically an object.

51
00:02:44.860 --> 00:02:49.061
The model of the page,
the DOM, from which, yeah,

52
00:02:49.061 --> 00:02:54.410
that as well load into there,
from which we will produce the actual

53
00:02:54.410 --> 00:03:00.410
pixels of the webpage through
the layout and render engine, nice.

54
00:03:00.410 --> 00:03:03.424
As soon as we hit an HTML parser and

55
00:03:03.424 --> 00:03:07.730
add it to the DOM the list
of elements a script for

56
00:03:07.730 --> 00:03:13.240
JavaScript, that will tee up
our JavaScript engine to run.

57
00:03:13.240 --> 00:03:18.493
Our JavaScript engine has a store of data,
yay, that can be changed, and

58
00:03:18.493 --> 00:03:24.373
a place to run code, a thread of execution
that can change that data, beautiful.

59
00:03:24.373 --> 00:03:29.426
And that will also give us
access to a pre inserted

60
00:03:29.426 --> 00:03:34.601
object by the name of document
that has a ton to, or

61
00:03:34.601 --> 00:03:39.653
has a reference, sorry,
to this C++ object,

62
00:03:39.653 --> 00:03:44.461
the DOM that we can then
use to run functions and

63
00:03:44.461 --> 00:03:50.670
add elements on here or
search for existing elements.

64
00:03:50.670 --> 00:03:53.480
Okay, and
that's what we're gonna do right now.

65
00:03:53.480 --> 00:03:57.760
But before we do that,
we're gonna start off by loading in HTML.

66
00:03:57.760 --> 00:04:02.671
So over here is our web page, I guess,

67
00:04:02.671 --> 00:04:07.593
the actual pixels of it, there it is.

68
00:04:07.593 --> 00:04:13.143
We know that anything
on it directly mirrors

69
00:04:13.143 --> 00:04:18.093
our C ++ store or list of elements that

70
00:04:18.093 --> 00:04:23.043
when an element is added to that list and

71
00:04:23.043 --> 00:04:29.195
technically is an object,
O stands for object.

72
00:04:29.195 --> 00:04:32.083
But just for our purposes,
we'll think of it as a list,

73
00:04:32.083 --> 00:04:35.776
because an object in the list they're
both stores that we just access.

74
00:04:35.776 --> 00:04:40.531
Imagine a list with, sorry, an object
with each sub-object having a key,

75
00:04:40.531 --> 00:04:44.640
zero, one, two, three, four,
five, and that's your list.

76
00:04:44.640 --> 00:04:49.620
In fact JavaScript lists are implemented
as objects under the hood.

77
00:04:49.620 --> 00:04:52.800
But we'll think of it as a list,
it's easier for us to visualize.

78
00:04:52.800 --> 00:04:57.377
Every element added here is automatically
added to the page with the layout and

79
00:04:57.377 --> 00:05:01.047
render engine, meaning all we have to do,
at least with HTML,

80
00:05:01.047 --> 00:05:06.300
was list out our elements, not worry about
pixels, any of that stuff, beautiful.

81
00:05:06.300 --> 00:05:10.728
Now, unfortunately it is in C ++ runtime,
and

82
00:05:10.728 --> 00:05:16.390
we are not able to directly
write code to interact with it.

83
00:05:16.390 --> 00:05:21.541
Instead, we have a double line
to represent our division

84
00:05:21.541 --> 00:05:27.320
between this world that is in C++ and
our JavaScript land.

85
00:05:27.320 --> 00:05:33.104
We start off with,
I'm gonna load it from here right well.

86
00:05:33.104 --> 00:05:35.182
We start off with our, no,
I'll just start it here.

87
00:05:35.182 --> 00:05:39.260
We start of with our HTML file loading,
the first line.

88
00:05:39.260 --> 00:05:42.679
Let's go through and
add our elements to our C++ list.

89
00:05:43.950 --> 00:05:50.722
Let's have, Justice,
what nodes are we adding to our C++ list?

90
00:05:50.722 --> 00:05:51.232
&gt;&gt; We got an input.

91
00:05:51.232 --> 00:05:54.530
&gt;&gt; We have an input, exactly,
we'll put it here, input.

92
00:05:54.530 --> 00:05:55.940
We have a div.

93
00:05:55.940 --> 00:05:57.177
And then finally?

94
00:05:57.177 --> 00:05:58.388
&gt;&gt; Script.
&gt;&gt; Script, perfect.

95
00:05:58.388 --> 00:05:59.790
&gt;&gt; With our JavaScript.

96
00:05:59.790 --> 00:06:01.491
&gt;&gt; Which links to our JavaScript,

97
00:06:01.491 --> 00:06:05.130
which is gonna spin up our
JavaScript's code starting to run.

98
00:06:05.130 --> 00:06:11.530
Cuz that's the perfectly designed way of
having your main runtime start executing.

99
00:06:11.530 --> 00:06:13.340
And that's where we're gonna go.

100
00:06:13.340 --> 00:06:17.039
Now, so HTML code is executed.

101
00:06:17.039 --> 00:06:20.940
That is erased, cuz it was a one
time running of that file.

102
00:06:22.480 --> 00:06:24.480
Run through it line by line and done.

103
00:06:24.480 --> 00:06:30.070
Now we move to our full runtime, at
least one that we can access JavaScript.

104
00:06:30.070 --> 00:06:31.320
It can save data.

105
00:06:31.320 --> 00:06:33.570
It can run code to change that data.

106
00:06:33.570 --> 00:06:39.248
It can even arbitrarily, which means
I don't really know what it means,

107
00:06:39.248 --> 00:06:44.299
not in order down the page,
at a given moment, can run more code.

108
00:06:44.299 --> 00:06:49.249
Wouldn't it be great if that time it's
running code is in response to maybe

109
00:06:49.249 --> 00:06:51.880
a user doing something over here?

110
00:06:51.880 --> 00:06:53.050
What have I forgotten?

111
00:06:53.050 --> 00:06:53.960
I forget it every time.

112
00:06:53.960 --> 00:06:56.250
Please, somebody call me out for
it, every time.

113
00:06:56.250 --> 00:06:58.932
What have I forgotten, Phil?

114
00:06:58.932 --> 00:07:00.780
Alexa, what have I forgotten?

115
00:07:00.780 --> 00:07:02.325
&gt;&gt; Once your elements are on the DOM,

116
00:07:02.325 --> 00:07:03.930
then they also appear on-
&gt;&gt; Yeah,

117
00:07:03.930 --> 00:07:06.494
I keep forgetting that every single time.

118
00:07:06.494 --> 00:07:11.230
Tthere it is, there is our input field,
and then here is our div.

119
00:07:11.230 --> 00:07:15.830
And then I think Phil was about to
help us with the JavaScript runtime.

120
00:07:15.830 --> 00:07:20.837
In JavaScript we have a call stack that is

121
00:07:20.837 --> 00:07:28.512
going to keep track of all
the functions being run currently.

122
00:07:28.512 --> 00:07:33.567
Initially we're in what's called
the global execution context, which

123
00:07:33.567 --> 00:07:39.820
is the main file of code and all the code
we're executing, running there, beautiful.

124
00:07:39.820 --> 00:07:45.033
It has immediately loaded into it when
JavaScript engine app, this isn't an app,

125
00:07:45.033 --> 00:07:50.096
code is running in the web browser,
it automatically gets an object pre-loaded

126
00:07:50.096 --> 00:07:54.951
into it as soon as it starts running,
by the name of what, well, quite a few.

127
00:07:54.951 --> 00:08:00.630
Which one are we using to get
access to this C++ DOM, Justice?

128
00:08:00.630 --> 00:08:02.258
&gt;&gt; Document?
&gt;&gt; Document, spot on,

129
00:08:02.258 --> 00:08:04.278
exactly, 100 to Justice.

130
00:08:04.278 --> 00:08:08.274
There it is, document,
hold this right about, yeah document.

131
00:08:08.274 --> 00:08:13.628
And that is a big old object full
to the brim of functions and

132
00:08:13.628 --> 00:08:19.205
properties that are actually
getter setter properties that

133
00:08:19.205 --> 00:08:24.887
allow us to search, add,
interact with, from JavaScript,

134
00:08:24.887 --> 00:08:31.760
this C++ list that we know anything
on there will show up on the page.

135
00:08:31.760 --> 00:08:33.630
Okay, it doesn't sound quite so bad.

136
00:08:33.630 --> 00:08:36.898
Unfortunately, we know that that
process can get pretty convoluted,

137
00:08:36.898 --> 00:08:39.060
especially when we compare it to HTML.

138
00:08:39.060 --> 00:08:41.195
It's like, if we didn't know about HTML,
maybe we think it's okay.

139
00:08:41.195 --> 00:08:45.644
When we've seen HTML allows us to
describe exactly what we want on the page

140
00:08:45.644 --> 00:08:50.232
in order down text file and it show up in
full on the page via the list and just,

141
00:08:50.232 --> 00:08:52.800
you don't even have to write push.

142
00:08:52.800 --> 00:08:55.995
You know how you add another
element from HTML to the C++?

143
00:08:55.995 --> 00:09:01.253
If you wanna add an element to a list or
to an object, maybe you have to

144
00:09:01.253 --> 00:09:06.717
instantiate an object or class or
you have to push an element to a list.

145
00:09:06.717 --> 00:09:13.220
If I wanna add from HTML to this
list here, what do I do, Alexa?

146
00:09:13.220 --> 00:09:17.896
Alexa, what do I do to add to this list
from HTML in my initial writing in my

147
00:09:17.896 --> 00:09:19.906
HTML, I'm not running HTML.

148
00:09:19.906 --> 00:09:23.319
&gt;&gt; You just write it in the HTML file.

149
00:09:23.319 --> 00:09:25.450
&gt;&gt; On the next line, yeah, exactly, yeah.

150
00:09:25.450 --> 00:09:27.190
Isn't that just extraordinary?

151
00:09:27.190 --> 00:09:31.832
I wish all my code allow me to add to
lists by just writing a line below and

152
00:09:31.832 --> 00:09:34.980
it being added to the list, beautiful.

153
00:09:34.980 --> 00:09:36.500
Unfortunately, we don't get that here.

154
00:09:36.500 --> 00:09:41.612
So what we do get though is this
object by the name of document

155
00:09:41.612 --> 00:09:51.060
that has a hidden link to,
That DOM to that C++ list.

156
00:09:51.060 --> 00:09:53.473
I forget, I don't need on
the blackboard to wipe out,

157
00:09:53.473 --> 00:09:54.896
it actually works very nicely.

158
00:09:54.896 --> 00:10:03.140
Okay, and then I get a whole bunch
of methods like query selector.

159
00:10:03.140 --> 00:10:07.999
There's others that allow me
to create elements on here all

160
00:10:07.999 --> 00:10:12.177
of which are not only taking
action in JavaScript,

161
00:10:12.177 --> 00:10:17.290
they're also having action
consequences outside.

162
00:10:17.290 --> 00:10:20.720
Yeah, I'll do this in blue,
outside of JavaScript.

163
00:10:22.140 --> 00:10:23.020
Okay, beautiful.

164
00:10:23.020 --> 00:10:26.640
So I think that is enough
to get started with.

165
00:10:26.640 --> 00:10:30.180
So, with that in mind,
let's have a look at this code.

166
00:10:30.180 --> 00:10:32.970
We are going to save some data,
an empty string post.

167
00:10:32.970 --> 00:10:39.117
We are going to get what I would call
accessor objects in JavaScript for

168
00:10:39.117 --> 00:10:43.820
both our input element on the DOM and
our div element.

169
00:10:43.820 --> 00:10:48.624
So we're gonna get links from JavaScript
to these respective objects in our

170
00:10:48.624 --> 00:10:50.736
list of objects that is in C++.

171
00:10:50.736 --> 00:10:52.740
It's portling,
its port holtling out the back.

172
00:10:52.740 --> 00:10:57.130
It's out of the back of JavaScript
into this position in C++.

173
00:10:57.130 --> 00:11:00.530
Referencing, pointing to,
there you go, all those work.

174
00:11:00.530 --> 00:11:04.230
We are then saving a function,
handleInput.

175
00:11:04.230 --> 00:11:07.160
We're then, this looks interesting.

176
00:11:07.160 --> 00:11:12.560
We're going to use on the linked
object jsInput to the input

177
00:11:12.560 --> 00:11:18.290
element on the dorm,
a property on it that does exist already.

178
00:11:18.290 --> 00:11:19.180
We're not assigning it.

179
00:11:19.180 --> 00:11:24.352
This is a property on input
that is gonna turn out here

180
00:11:24.352 --> 00:11:29.173
to be a setter property
because on the left-hand

181
00:11:29.173 --> 00:11:33.759
side is the thing we're going to grab and
set,

182
00:11:33.759 --> 00:11:38.932
in this case,
as the handler of any action that comes

183
00:11:38.932 --> 00:11:44.000
from the user that leads
to some change in the DOM.

184
00:11:44.000 --> 00:11:49.630
This is gonna handle some
action from the user.

185
00:11:49.630 --> 00:11:56.120
And this of all the names in programming,
handler is not the worst name I've seen.

186
00:11:56.120 --> 00:11:57.350
A lot of them are pretty terrible.

187
00:11:57.350 --> 00:12:01.920
This one handles what the user does,
exactly.

188
00:12:01.920 --> 00:12:03.610
This one handles what the user does,
fantastic.

189
00:12:04.680 --> 00:12:09.634
It's gonna be triggered to run
back in JavaScript at the behest

190
00:12:09.634 --> 00:12:12.325
of the user's action.

191
00:12:12.325 --> 00:12:15.812
SO of phrasing it, all right,
and then we're done.

192
00:12:15.812 --> 00:12:20.018
[BLANK AUDIO]

