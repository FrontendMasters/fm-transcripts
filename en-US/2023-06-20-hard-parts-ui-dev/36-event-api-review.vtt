WEBVTT

1
00:00:00.045 --> 00:00:04.625
We introduced here
the auto-inserted object,

2
00:00:04.625 --> 00:00:08.198
the event object as it was described,

3
00:00:08.198 --> 00:00:13.237
that captures all the info
about the user's action.

4
00:00:13.237 --> 00:00:18.189
So that our handle function
can actually work on a list

5
00:00:18.189 --> 00:00:22.701
of elements, sorry,
a list in the JavaScript,

6
00:00:22.701 --> 00:00:27.432
sorry, can work on our DOM
elements where we don't

7
00:00:27.432 --> 00:00:32.179
have named accessor objects for
them in JavaScript.

8
00:00:32.179 --> 00:00:36.513
Instead, they're going to provide
via this auto inserted argument,

9
00:00:36.513 --> 00:00:40.571
this event object, and
as long as we've written our parameter e.

10
00:00:40.571 --> 00:00:42.237
If we didn't put an e there,

11
00:00:42.237 --> 00:00:46.205
we wouldn't be able to then access
this auto-inserted argument.

12
00:00:46.205 --> 00:00:49.675
I guess it would still be parsed with the
function, we'd have a label for it inside.

13
00:00:49.675 --> 00:00:54.525
As it was, we do, and therefore we
can get the target property of it,

14
00:00:54.525 --> 00:00:58.637
which is a link to the element
on which the input happened.

15
00:00:58.637 --> 00:01:03.673
Therefore, we could grab our value Li and
use it to update our data.

16
00:01:03.673 --> 00:01:08.701
And because we described in our
createVDOM array the three elements and

17
00:01:08.701 --> 00:01:13.751
how they depend on underlying state,
and we can make it more flexible.

18
00:01:13.751 --> 00:01:18.529
We can certainly say the div could
be conditional on the underlying

19
00:01:18.529 --> 00:01:22.293
data as well,
as opposed to just the contents here.

20
00:01:22.293 --> 00:01:25.922
But having done that,
when we change our data,

21
00:01:25.922 --> 00:01:31.822
because updateDOM will just run again and
turn that data into a new instance,

22
00:01:31.822 --> 00:01:37.632
a new data specific to this new data Li
version of this JavaScript array and

23
00:01:37.632 --> 00:01:39.847
wipe the previous version.

24
00:01:39.847 --> 00:01:42.391
It seems a bit wasteful,
maybe we could have used that and

25
00:01:42.391 --> 00:01:44.776
made a comparison to it to
see what actually changed.

26
00:01:44.776 --> 00:01:49.428
And then it will map over [SOUND] and
convert each element into DOM elements.

27
00:01:49.428 --> 00:01:54.872
[SOUND] And get array in
JavaScript of accessor objects for

28
00:01:54.872 --> 00:02:01.850
it, such that we can then use those
elems to use those accessor objects,

29
00:02:01.850 --> 00:02:06.344
to have the body in
the DOM have its children,

30
00:02:06.344 --> 00:02:12.531
its sub-elements,
replaced with our new linked elements.

31
00:02:12.531 --> 00:02:17.122
So we wipe the previous ones and
the user just sees the change across their

32
00:02:17.122 --> 00:02:20.368
entire view,
including the bit they were typing.

33
00:02:20.368 --> 00:02:22.039
We're not thinking about that anymore.

34
00:02:22.039 --> 00:02:27.342
We're long past worrying about
the user's content being typed,

35
00:02:27.342 --> 00:02:32.265
that they're typing being
the content they actually see.

36
00:02:32.265 --> 00:02:38.430
No, we're very much just seeing
that as a submission to handle and

37
00:02:38.430 --> 00:02:44.939
then update data from which we then
run through one, data is changed.

38
00:02:44.939 --> 00:02:49.577
Two, recreate the representation of how
that data will look on the entire page.

39
00:02:49.577 --> 00:02:54.380
Any conditions described in the VDOM
as to what will be displayed,

40
00:02:54.380 --> 00:02:58.518
and then produce at,
just that phrase was a bit all over.

41
00:02:58.518 --> 00:03:04.238
Any conditions, any differences for
how that data will be displayed,

42
00:03:04.238 --> 00:03:09.480
will be determined in this
description lines 4 through 6 of what

43
00:03:09.480 --> 00:03:16.178
the relationship between the underlying
data and what gets displayed looks like.

44
00:03:16.178 --> 00:03:21.810
And that then is used in the mapping
where we convert each of those

45
00:03:21.810 --> 00:03:29.132
elements into actual DOM elements that
then are appended and the display updates.

46
00:03:29.132 --> 00:03:31.352
Woo, excellent people.

47
00:03:31.352 --> 00:03:32.180
That's how,
&gt;&gt; [APPLAUSE]

48
00:03:32.180 --> 00:03:34.013
&gt;&gt; Okay that's the all of you.

49
00:03:34.013 --> 00:03:36.214
So we now have element flexible code be,
well,

50
00:03:36.214 --> 00:03:38.148
let's just see what the summary says it.

51
00:03:38.148 --> 00:03:42.016
With our new element flexible code, we can
compose our code, adding to our list of

52
00:03:42.016 --> 00:03:44.779
arrays each new element we want
to see in order on our page.

53
00:03:44.779 --> 00:03:45.807
We can add four more.

54
00:03:45.807 --> 00:03:46.986
They'll all show up.

55
00:03:46.986 --> 00:03:48.333
That's kinda cool.

56
00:03:48.333 --> 00:03:50.125
They'll show up on the page
exactly as they place.

57
00:03:50.125 --> 00:03:54.377
If we inserted a new element here, let's
say div, I don't know something else.

58
00:03:54.377 --> 00:03:59.169
And of course, our convert function would
have to come far more versatile to handle

59
00:03:59.169 --> 00:04:02.875
many different types of HTML or,
sorry, HTML, DOM elements.

60
00:04:02.875 --> 00:04:06.161
DOM elements I guess are often
called HTML, DOM elements, but

61
00:04:06.161 --> 00:04:10.011
we could do that with our convert
function becoming more sophisticated.

62
00:04:10.011 --> 00:04:14.479
We get semi visual coding.

