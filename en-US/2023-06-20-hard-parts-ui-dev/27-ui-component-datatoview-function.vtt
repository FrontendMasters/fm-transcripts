WEBVTT

1
00:00:00.390 --> 00:00:01.170
It's done.

2
00:00:01.170 --> 00:00:05.403
And 50 milliseconds, people,
here it comes at 50 milliseconds.

3
00:00:05.403 --> 00:00:08.965
[COUGH] We're gonna get
at 15 milliseconds,

4
00:00:08.965 --> 00:00:14.276
what function is going to be called back,
Alexa, into JavaScript?

5
00:00:14.276 --> 00:00:15.024
&gt;&gt; dataToView.

6
00:00:15.024 --> 00:00:19.671
&gt;&gt; dataToView, beautiful, and
told me through if you don't mind, Alexa,

7
00:00:19.671 --> 00:00:21.012
the process of that.

8
00:00:21.012 --> 00:00:22.660
So dataToView is gonna go where?

9
00:00:22.660 --> 00:00:25.040
&gt;&gt; In the callback queue.

10
00:00:25.040 --> 00:00:29.554
And then the event loop is gonna check
if our global code is done running,

11
00:00:29.554 --> 00:00:30.440
which it is.

12
00:00:30.440 --> 00:00:31.000
&gt;&gt; Perfect.

13
00:00:31.000 --> 00:00:34.030
&gt;&gt; And if the call stack is empty,
which it is.

14
00:00:34.030 --> 00:00:38.989
And then it will pop the data to view
function off of the callback queue and

15
00:00:38.989 --> 00:00:41.390
push it onto the call stack.

16
00:00:41.390 --> 00:00:43.710
&gt;&gt; Absolutely, fantastic.

17
00:00:43.710 --> 00:00:46.820
Yeah, there it is, onto the call stack.

18
00:00:46.820 --> 00:00:50.050
And pens are starting
to struggle a bit here.

19
00:00:50.050 --> 00:00:54.773
Onto the call stack and that is where
it's gonna create, Alexa, what?

20
00:00:54.773 --> 00:00:56.975
&gt;&gt; A new execution context.

21
00:00:56.975 --> 00:00:59.690
&gt;&gt; Exactly, a new execution context,

22
00:00:59.690 --> 00:01:04.517
which is going to do the job of
displaying, how's this gonna do.

23
00:01:04.517 --> 00:01:07.860
Gonna do the job of displaying,
but we don't need that much.

24
00:01:07.860 --> 00:01:10.660
It's a nice, clean, simple function,

25
00:01:10.660 --> 00:01:14.580
it's gonna do the job of
displaying our data for the user.

26
00:01:14.580 --> 00:01:16.190
Are we familiar with this now?

27
00:01:16.190 --> 00:01:17.290
Are we bored with this?

28
00:01:17.290 --> 00:01:18.890
Is this tedious?

29
00:01:18.890 --> 00:01:19.746
You bet it is.

30
00:01:19.746 --> 00:01:20.620
No, it's a big function.

31
00:01:20.620 --> 00:01:21.350
Okay, I got that wrong.

32
00:01:21.350 --> 00:01:22.578
You should have stopped me.

33
00:01:22.578 --> 00:01:23.639
&gt;&gt; [LAUGH]
&gt;&gt; There we go

34
00:01:23.639 --> 00:01:25.491
it's a big old function here.

35
00:01:25.491 --> 00:01:29.031
Because we're now doing
anything that the user can see,

36
00:01:29.031 --> 00:01:31.769
is gonna be produced inside this function.

37
00:01:31.769 --> 00:01:35.900
And only produced if the user
is gonna see it in that moment.

38
00:01:35.900 --> 00:01:40.515
Through this mental model, this
paradigmatic shift to anything user sees

39
00:01:40.515 --> 00:01:43.234
that they could not see or
choose to change.

40
00:01:43.234 --> 00:01:47.185
Must be dependent on underlying
data from a source of truth,

41
00:01:47.185 --> 00:01:51.761
from a cause, a single cause,
which is JavaScript data in this case.

42
00:01:51.761 --> 00:01:53.910
A simple piece of data post.

43
00:01:53.910 --> 00:01:57.624
And everything inside that data to
view is basing itself off post.

44
00:01:57.624 --> 00:02:00.054
Even where it's not in line 4,

45
00:02:00.054 --> 00:02:05.470
implicitly it's saying produce
input under any value of post.

46
00:02:05.470 --> 00:02:09.255
But we know it's all coming through
this one function based off our data in

47
00:02:09.255 --> 00:02:09.997
JavaScript.

48
00:02:09.997 --> 00:02:11.945
Which is kind of cool, by the way,

49
00:02:11.945 --> 00:02:16.262
cuz it means we could potentially
describe in full as an intermediate step.

50
00:02:16.262 --> 00:02:19.403
Before we actually add
those elements to the page,

51
00:02:19.403 --> 00:02:22.626
we could describe them in
full in JavaScript first.

52
00:02:22.626 --> 00:02:26.585
And maybe end up with a visual
representation of our DOM in JavaScript

53
00:02:26.585 --> 00:02:30.000
first, which would be kind of cool,
kind of neat.

54
00:02:30.000 --> 00:02:33.920
Okay, I didn't need
the word anyone's using.

55
00:02:33.920 --> 00:02:35.500
All right, let's do that.

56
00:02:35.500 --> 00:02:41.504
Let's start running data to view, and
bit more complex than we've done before.

57
00:02:41.504 --> 00:02:45.646
Well, not really, but Alexa, let's go
through what the JS input assignment here

58
00:02:45.646 --> 00:02:49.170
is doing,
&gt;&gt; Yes, so we're gonna reassign JS input

59
00:02:49.170 --> 00:02:54.061
[COUGH] to the evaluated result of
invoking our create element method

60
00:02:54.061 --> 00:02:58.096
on the document object,
&gt;&gt; Perfect, createElement,

61
00:02:58.096 --> 00:02:59.550
with what argument?

62
00:02:59.550 --> 00:03:03.040
&gt;&gt; The string input
&gt;&gt; Perfect, input, there it is.

63
00:03:03.040 --> 00:03:04.233
And this is going to do,

64
00:03:04.233 --> 00:03:08.320
can you talk me through the stages
inside of createElement here?

65
00:03:08.320 --> 00:03:08.856
&gt;&gt; Yes, so

66
00:03:08.856 --> 00:03:13.750
first we're gonna use the document
object's hidden link to find the DOM.

67
00:03:13.750 --> 00:03:15.785
&gt;&gt; Link to the DOM.

68
00:03:15.785 --> 00:03:19.560
&gt;&gt; And
then we're going to create an element.

69
00:03:19.560 --> 00:03:21.380
&gt;&gt; Yeah.
&gt;&gt; That is the type input.

70
00:03:21.380 --> 00:03:25.010
&gt;&gt; Yes, perfect, we'll put it right here.

71
00:03:25.010 --> 00:03:29.190
It's not yet
on our appended list of elements.

72
00:03:29.190 --> 00:03:34.525
It's not yet appended to the body, because
Java Script doesn't really do anything,

73
00:03:34.525 --> 00:03:37.680
doesn't know where we
wanted to put that element.

74
00:03:37.680 --> 00:03:39.536
I'll give it credit, it doesn't know
where we want to put that element..

75
00:03:39.536 --> 00:03:43.076
HTML, we have a structure, it's gonna
appear in listed order down the page,

76
00:03:43.076 --> 00:03:45.340
not in Java Script, we don't know where.

77
00:03:45.340 --> 00:03:50.040
And if it wants to be a child element or
a sub-element or a nested element in HTML.

78
00:03:50.040 --> 00:03:54.994
We put it inside of the element we want
it to be appended as a nested element to,

79
00:03:54.994 --> 00:03:55.770
so lovely.

80
00:03:55.770 --> 00:03:57.460
Does that happen in JavaScript?

81
00:03:57.460 --> 00:03:59.153
You bet it does not.

82
00:03:59.153 --> 00:04:03.412
So, yeah, would be nice if we
could get some emulation of that.

83
00:04:03.412 --> 00:04:06.710
Wouldn't it be cool if we could
get some emulation of that?

84
00:04:06.710 --> 00:04:11.146
In our JavaScript code, maybe a visual
representation in JavaScript of

85
00:04:11.146 --> 00:04:14.860
the structure of our page,
but that we couldn't do that.

86
00:04:14.860 --> 00:04:17.170
That sounds too much like a win.

87
00:04:17.170 --> 00:04:18.852
That sounds too, yeah, okay, all right.

88
00:04:18.852 --> 00:04:23.116
All right, good, so yeah,
we create input unattached right now and

89
00:04:23.116 --> 00:04:26.655
we wanna be able to edit it though later,
Alexa, right?

90
00:04:26.655 --> 00:04:28.750
So what do we, help me out here,
what do we get?

91
00:04:28.750 --> 00:04:32.484
&gt;&gt; Also gonna get a JavaScript object
with a hidden link to that new

92
00:04:32.484 --> 00:04:34.170
input,
&gt;&gt; Right,

93
00:04:34.170 --> 00:04:35.200
&gt;&gt; Node on DOM,

94
00:04:36.290 --> 00:04:38.212
&gt;&gt; Right, and also a bunch, yes, and

95
00:04:38.212 --> 00:04:41.802
also a bunch of functions that
are useful for editing, updating,

96
00:04:41.802 --> 00:04:44.320
adding handlers to the input node,
perfect.

97
00:04:44.320 --> 00:04:47.846
Like on input like value, Yeah, so

98
00:04:47.846 --> 00:04:52.437
that object is then going
to be stored in what?

99
00:04:52.437 --> 00:04:59.670
Global, again for the purposes of easy
diagramming, what global variable.

100
00:04:59.670 --> 00:05:00.340
&gt;&gt; JS input.

101
00:05:00.340 --> 00:05:03.610
&gt;&gt; Perfect, there it is, so
let's draw it in full there.

102
00:05:03.610 --> 00:05:06.990
It has, just remind me of
the methods available on it here.

103
00:05:08.320 --> 00:05:10.852
&gt;&gt; Value on input.

104
00:05:10.852 --> 00:05:14.200
&gt;&gt; I think that's it, because we're
doing a simplified version here.

105
00:05:15.616 --> 00:05:22.050
No, these brews are very challenging.

106
00:05:22.050 --> 00:05:24.577
There it is.

107
00:05:24.577 --> 00:05:29.195
And it has a link, as we said,
to a newly created but not yet

108
00:05:29.195 --> 00:05:33.360
displayed input element on the DOM,
input object.

109
00:05:34.490 --> 00:05:38.997
Note people here, we are now not
seeing it immediately over here,

110
00:05:38.997 --> 00:05:41.260
we are creating it from scratch.

111
00:05:41.260 --> 00:05:45.932
We'd end up with exactly the same thing as
we would have by querying our HTML created

112
00:05:45.932 --> 00:05:49.150
version of this input element,
nothing's different.

113
00:05:49.150 --> 00:05:52.170
But we've now created it
from within JavaScript.

114
00:05:52.170 --> 00:05:54.609
Which means the only difference
is now not already attached, and

115
00:05:54.609 --> 00:05:56.590
therefore not already
showing up on the page.

116
00:05:56.590 --> 00:05:58.440
To be fair, we don't know where
we want it to be attached.

117
00:05:58.440 --> 00:06:03.805
We're gonna require, well, with JavaScript
we're gonna require imperatively

118
00:06:03.805 --> 00:06:08.874
describing rather than declaratively by
showing where it is on the HTML file.

119
00:06:08.874 --> 00:06:12.000
Describing its output,
where it's located on the page.

120
00:06:12.000 --> 00:06:17.177
Instead we are going to have to
imperatively in JavaScript attach it.

121
00:06:17.177 --> 00:06:21.517
And describe where it will capture,
specifically where we want to attach it,

122
00:06:21.517 --> 00:06:24.630
if only we could do better,
hopefully we will.

123
00:06:24.630 --> 00:06:26.920
Okay, what's gonna be by now off?

124
00:06:26.920 --> 00:06:30.074
Yeah, talk me through what
happens in line 5, Alexa.

125
00:06:30.074 --> 00:06:34.017
&gt;&gt; So we're gonna be reassigning
the value of JS Div, but

126
00:06:34.017 --> 00:06:37.630
first we have our,
&gt;&gt; Ternary, right, exactly.

127
00:06:37.630 --> 00:06:38.420
&gt;&gt; Evaluate.

128
00:06:38.420 --> 00:06:42.626
&gt;&gt; Yes, so if we check the first bit
before the question mark and if it's true,

129
00:06:42.626 --> 00:06:45.290
then we assign the second bit.

130
00:06:45.290 --> 00:06:50.280
And if it's false, we assign the result
of the last part of the ternary.

131
00:06:50.280 --> 00:06:53.030
So is the first bit true?

132
00:06:53.030 --> 00:06:54.804
&gt;&gt; No
&gt;&gt; POST is an empty string,

133
00:06:54.804 --> 00:06:55.623
it is not well.

134
00:06:55.623 --> 00:06:59.030
So we jump to creating.

135
00:06:59.030 --> 00:07:02.489
&gt;&gt; Yeah, we're gonna create
a new element again, but

136
00:07:02.489 --> 00:07:05.420
this time it's going to be a div
&gt;&gt; Give me a div.

137
00:07:06.810 --> 00:07:10.060
Let's do it,
that's created on the DOM directly.

138
00:07:10.060 --> 00:07:14.390
And we now I'm just gonna do it by
analogy, the output of calling it.

139
00:07:14.390 --> 00:07:17.610
I'lll put the value,
what's the output of evaluating

140
00:07:17.610 --> 00:07:21.220
the document.createElement
past the argument of div.

141
00:07:21.220 --> 00:07:24.530
What is gonna be assigned to
the global variable jsDiv, Alexa.

142
00:07:24.530 --> 00:07:28.080
&gt;&gt; JavaScript object with a hidden link.

143
00:07:29.110 --> 00:07:29.710
&gt;&gt; Beautiful.

144
00:07:29.710 --> 00:07:33.290
&gt;&gt; To that new unattached div node.

145
00:07:34.330 --> 00:07:35.140
&gt;&gt; Beautiful.

146
00:07:35.140 --> 00:07:39.600
&gt;&gt; All of the properties and
getter setters that go with a div type.

147
00:07:39.600 --> 00:07:45.190
&gt;&gt; Beautiful, there it is, including text
content, and no need for a move here.

148
00:07:45.190 --> 00:07:49.903
Because we're not going to
create this element unless

149
00:07:49.903 --> 00:07:54.930
the conditional evaluates to false and
posts as not will.

150
00:07:54.930 --> 00:07:56.387
If it is will, and we could've
done this the other way around,

151
00:07:56.387 --> 00:07:57.087
to be honest, couldn't we?

152
00:07:57.087 --> 00:08:00.787
Like if post is not will we have
createElement, but whatever.

153
00:08:00.787 --> 00:08:06.115
And at that point we would then
create instead of every string,

154
00:08:06.115 --> 00:08:11.500
and end up appending nothing,
no div element, to the page.

155
00:08:11.500 --> 00:08:15.964
We've switched our mindset
from based on assuming that we

156
00:08:15.964 --> 00:08:19.802
are gonna always have a div and
an input from HTML.

157
00:08:19.802 --> 00:08:25.260
We then have to remove it based
on the data in JavaScript too.

158
00:08:25.260 --> 00:08:30.203
Only creating elements,
only determine what the user sees,

159
00:08:30.203 --> 00:08:35.252
based on specified,
explicitly defined data in JavaScript.

160
00:08:35.252 --> 00:08:37.890
That is our source of truth.

161
00:08:37.890 --> 00:08:38.490
You want to do it, Mark?

162
00:08:39.660 --> 00:08:43.926
&gt;&gt; When replace children
executes every 15 milliseconds,

163
00:08:43.926 --> 00:08:46.920
will the new input element lose focus-?

164
00:08:46.920 --> 00:08:48.560
&gt;&gt; Great question.

165
00:08:48.560 --> 00:08:52.424
Absolutely, and that is a line of
code that I don't include here, but

166
00:08:52.424 --> 00:08:54.990
to even experiment with
this you have to do so.

167
00:08:54.990 --> 00:08:55.940
We'll come to it in a second.

168
00:08:55.940 --> 00:08:57.639
&gt;&gt; It is in the challenges.

169
00:08:57.639 --> 00:08:59.020
&gt;&gt; It's in the challenges, exactly.

170
00:08:59.020 --> 00:09:02.368
So, great, so
we will be going to challenges,

171
00:09:02.368 --> 00:09:06.960
the really lovely set of
challenges built by Alexa and co.

172
00:09:06.960 --> 00:09:11.627
Of these, actually let's shout them out,
specifically Amelia and

173
00:09:11.627 --> 00:09:15.658
Jonathan and Alexa built out
an amazing set of challenges.

174
00:09:15.658 --> 00:09:19.180
That we can push ourselves on all
this content and extend beyond.

175
00:09:19.180 --> 00:09:22.840
We're gonna build out
a visual virtual DOM, but

176
00:09:22.840 --> 00:09:27.820
we're not gonna implement
multi-level nodes within it.

177
00:09:27.820 --> 00:09:29.820
We will within the challenges.

178
00:09:29.820 --> 00:09:33.727
To actually do this in practice,
there's only one line to change,

179
00:09:33.727 --> 00:09:35.311
which we're gonna see is.

180
00:09:35.311 --> 00:09:40.085
If we're recreating our input element
on the DOM, every single time the user,

181
00:09:40.085 --> 00:09:43.806
well, every 15 milliseconds,
it's a brand new element.

182
00:09:43.806 --> 00:09:47.831
We default to not being focused.

183
00:09:47.831 --> 00:09:52.145
Focus means the cursor of the user is
in that input field when it is added to

184
00:09:52.145 --> 00:09:55.700
the page, when the page loads,
when it's displayed.

185
00:09:55.700 --> 00:09:59.928
We default to it not being focused, we
will need to call the focus method Which

186
00:09:59.928 --> 00:10:06.287
would be something here like JS
input.focus, and then execute it.

187
00:10:06.287 --> 00:10:09.944
That will insert the user's
cursor in that brand new every 15

188
00:10:09.944 --> 00:10:12.360
millisecond created input field.

189
00:10:12.360 --> 00:10:15.170
We're gonna need to optimize for
this design, do not worry.

190
00:10:15.170 --> 00:10:19.566
However, I don't put it on here because.

191
00:10:19.566 --> 00:10:22.179
So I can have our great
friend online remind us.

192
00:10:22.179 --> 00:10:26.499
I don't put it on here because in hard
parts, same support a second ago.

193
00:10:26.499 --> 00:10:29.611
And there's gonna be a few things
like this where, if it doesn't break.

194
00:10:29.611 --> 00:10:31.891
I mean, this case actually it would break,
it wouldn't work,

195
00:10:31.891 --> 00:10:34.527
we'd be sort of trying to click inside
the cell, inside the input field.

196
00:10:34.527 --> 00:10:36.943
It would just be bouncing us
out every 15 milliseconds.

197
00:10:36.943 --> 00:10:39.842
But other than that one,
if it doesn't break.

198
00:10:39.842 --> 00:10:45.232
Like to some extent my job in hard parts
is to remove anything that is extraneous,

199
00:10:45.232 --> 00:10:49.270
extraneous, extraneous,
there you go, extraneous.

200
00:10:49.270 --> 00:10:53.774
Remove anything that is extraneous in
order to only keep the pieces that give us

201
00:10:53.774 --> 00:10:56.240
the ability to build out the mental model.

202
00:10:56.240 --> 00:10:58.306
But like the diagramming is tedious.

203
00:10:58.306 --> 00:11:00.704
It means you're never gonna forget
this mental model, flip an egg, and

204
00:11:00.704 --> 00:11:01.702
it's the only mental model.

205
00:11:01.702 --> 00:11:06.297
However, it is demanding, and so every
chance I hand to remove a conditional,

206
00:11:06.297 --> 00:11:09.740
remove a line,
albeit the focus line is really important.

207
00:11:09.740 --> 00:11:12.649
So shout out to our person reminding us,
if I had forgotten to say that,

208
00:11:12.649 --> 00:11:13.730
that would have been bad.

209
00:11:13.730 --> 00:11:17.320
But the focus line is the one where
this wouldn't function without it.

210
00:11:17.320 --> 00:11:20.062
We're gonna see a few
other things like that,

211
00:11:20.062 --> 00:11:25.390
where technically we're gonna apply
a call to text content getter or setter.

212
00:11:25.390 --> 00:11:28.876
And we're gonna see later on an element
that doesn't have a meaningful text

213
00:11:28.876 --> 00:11:30.460
content get a setter.

214
00:11:30.460 --> 00:11:34.521
But we'll do it anyway in order to
not write the conditional to say if

215
00:11:34.521 --> 00:11:38.955
there is not a meaningful use of text
content in this case, do not call it.

216
00:11:38.955 --> 00:11:42.657
Because that's an extra line of code for
diagramming,

217
00:11:42.657 --> 00:11:48.497
as long as it doesn't literally break with
the exception of this focus one, it won't.

218
00:11:48.497 --> 00:11:52.548
Then, for diagramming purposes,
minimize minimize code.

219
00:11:52.548 --> 00:11:56.743
But know that there'll be a few places
like that where we'll be like, this works,

220
00:11:56.743 --> 00:11:58.626
the user's experience it is correct.

221
00:11:58.626 --> 00:12:00.506
But would you actually do that or
would you not?

222
00:12:00.506 --> 00:12:04.298
You wouldn't change the code you wrote
besides add conditionals, we'll see,

223
00:12:04.298 --> 00:12:07.881
saying, don't try and call that get
a set of property on that element.

224
00:12:07.881 --> 00:12:11.906
Because it doesn't have that get a set of
property, JavaScript were an error on it,

225
00:12:11.906 --> 00:12:12.709
so we're fine.

226
00:12:12.709 --> 00:12:17.649
But we do it for
the purposes of minimizing complexity on

227
00:12:17.649 --> 00:12:20.390
already diagrams that, yes.

228
00:12:20.390 --> 00:12:23.005
Anyway, all right, so where were we?

229
00:12:23.005 --> 00:12:26.390
We were about to add our content.

230
00:12:26.390 --> 00:12:27.630
So now we're back to normal.

231
00:12:27.630 --> 00:12:32.256
But the only difference is we created
elements as opposed to use the implication

232
00:12:32.256 --> 00:12:34.336
that they were always on from HTML.

233
00:12:34.336 --> 00:12:39.030
HTML is switch them on,
they're always there, true by default.

234
00:12:39.030 --> 00:12:41.670
We need to recognize they're
not true by default.

235
00:12:41.670 --> 00:12:45.030
They are visual things a user can change,
they are content.

236
00:12:45.030 --> 00:12:48.280
Therefore, give them associated data.

237
00:12:48.280 --> 00:12:49.960
POST is our associated data for them.

238
00:12:49.960 --> 00:12:54.791
I know it's not like, doesn't look like
we're saying jsDiv appears true or false.

239
00:12:54.791 --> 00:12:59.663
But we are having jsDiv's appearance
where it does depend on post,

240
00:12:59.663 --> 00:13:04.200
if the user writes will,
determined by data at any given time.

241
00:13:05.720 --> 00:13:07.032
It will never display,

242
00:13:07.032 --> 00:13:11.045
except in response to except caused
by underlying data tracked in jobs.

243
00:13:11.045 --> 00:13:13.580
Have I said that enough times now?

244
00:13:13.580 --> 00:13:16.150
I mean, again, it's like on repeat.

245
00:13:16.150 --> 00:13:17.402
All right, so let's go to line 8.

246
00:13:17.402 --> 00:13:19.157
Alexa, if you don't mind
keeping us going here, and

247
00:13:19.157 --> 00:13:21.740
we'll keep this fairly simple now,
keep this fairly short, this bit.

248
00:13:21.740 --> 00:13:27.146
&gt;&gt; Yes, we're gonna use the value
setter property on our JS

249
00:13:27.146 --> 00:13:32.222
input object to find the linked
input note on the DOM.

250
00:13:32.222 --> 00:13:36.540
And set the value to the value of our
POST variable, which is an empty string.

251
00:13:36.540 --> 00:13:38.620
&gt;&gt; Great, and we'll do the same for.

252
00:13:38.620 --> 00:13:40.845
&gt;&gt; The text content on the div.

253
00:13:40.845 --> 00:13:44.315
&gt;&gt; Yeah,
text is gonna be an empty string and

254
00:13:44.315 --> 00:13:47.970
then our value is also an empty string.

255
00:13:47.970 --> 00:13:53.380
So Js Div text content,
what's our next line saying to do, Alexa?

256
00:13:53.380 --> 00:13:58.104
&gt;&gt; Then we're going to set the on input
callback function on our input to our

257
00:13:58.104 --> 00:14:00.830
handle input function
&gt;&gt; On input.

258
00:14:00.830 --> 00:14:02.673
If you can verbalize
that as much as possible,

259
00:14:02.673 --> 00:14:04.210
I don't even know what it would be.

260
00:14:04.210 --> 00:14:08.975
Just so that as I write this there
is some lovely background noise.

261
00:14:08.975 --> 00:14:15.037
[LAUGH] All right,
input is gonna have exactly as you said,

262
00:14:15.037 --> 00:14:23.180
the callback handle input function
as a handler, yeah, input handler.

263
00:14:23.180 --> 00:14:28.483
Input handler was what Alexa rightly said,
input handler

264
00:14:28.483 --> 00:14:35.860
will be set to be a reference to that
handle input, brilliant, there it is.

265
00:14:35.860 --> 00:14:38.482
Come on, called the people's,
anyone's fantastic and

266
00:14:38.482 --> 00:14:41.920
technical communication's anything but
exceptional background noise.

267
00:14:41.920 --> 00:14:43.747
I apologize for my anything but

268
00:14:43.747 --> 00:14:47.758
endorsement of the wonderful
technical communication everyone.

269
00:14:47.758 --> 00:14:54.753
And then, in line 12, now,
Alexa, what is happening here?

270
00:14:54.753 --> 00:14:56.078
Sorry, go ahead, please.

271
00:14:56.078 --> 00:15:01.530
&gt;&gt; Now we are going to find our document
object in our JavaScript memory.

272
00:15:01.530 --> 00:15:02.075
&gt;&gt; Right.
&gt;&gt; And

273
00:15:02.075 --> 00:15:06.310
then find the body property/getter setter.

274
00:15:06.310 --> 00:15:06.850
&gt;&gt; Right.

275
00:15:06.850 --> 00:15:11.880
&gt;&gt; On that object, and then invoke
the replace children method there.

276
00:15:11.880 --> 00:15:14.920
And we're gonna pass in jsInput and jsDiv.

277
00:15:14.920 --> 00:15:21.850
&gt;&gt; These two, exactly, jsInput and
jsDiv, jsInput and jsDiv.

278
00:15:21.850 --> 00:15:28.610
And the way these are working is the body
has a link to the body element on the DOM.

279
00:15:28.610 --> 00:15:32.240
jsInput, it has a link to
the body element on the DOM.

280
00:15:32.240 --> 00:15:37.331
jsDiv has a link to the body

281
00:15:37.331 --> 00:15:41.270
element on the DOM.

282
00:15:42.840 --> 00:15:43.730
There it is.

283
00:15:43.730 --> 00:15:46.970
And so, replace children.

284
00:15:46.970 --> 00:15:48.770
Well, right now body doesn't have any.

285
00:15:48.770 --> 00:15:51.088
You can see the end of
the object is there.

286
00:15:51.088 --> 00:15:54.470
It doesn't have any,
nothing's on the page inside a body.

287
00:15:54.470 --> 00:15:57.153
We're going to replace its children,

288
00:15:57.153 --> 00:16:00.251
strange old phrasing in
the good old DOM API.

289
00:16:00.251 --> 00:16:04.218
With jsInputs linked input
DOM element in C, but

290
00:16:04.218 --> 00:16:08.668
with jsDiv linked in div
Element in the C++ list, and

291
00:16:08.668 --> 00:16:12.074
we're going to set them as the children.

292
00:16:12.074 --> 00:16:15.282
I'm just gonna show the little
arrows there, which means, Alexa,

293
00:16:15.282 --> 00:16:17.800
what's gonna show up
on our actual webpage?

294
00:16:17.800 --> 00:16:20.370
&gt;&gt; Our input and our div.

295
00:16:20.370 --> 00:16:24.960
&gt;&gt; Beautiful, fantastic, and there it is.

296
00:16:24.960 --> 00:16:30.120
Automatically, because of our layout and
render engines, amazing.

297
00:16:30.120 --> 00:16:34.468
We have displayed everything through
one function, no mysteries, and

298
00:16:34.468 --> 00:16:37.044
all conditional on our underlying state.

