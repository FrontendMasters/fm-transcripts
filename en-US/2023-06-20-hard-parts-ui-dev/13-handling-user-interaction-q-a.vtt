WEBVTT

1
00:00:00.060 --> 00:00:02.114
Go to, users can change what they see.

2
00:00:02.114 --> 00:00:04.960
So let's put it better,
change the content.

3
00:00:04.960 --> 00:00:08.565
See content which was actually here,
I guess an empty box,

4
00:00:08.565 --> 00:00:12.112
that's content in a sense,
and then change the content.

5
00:00:12.112 --> 00:00:16.931
Which is to say, change what they see,
the high and change online data for

6
00:00:16.931 --> 00:00:19.198
it and then display it on the page.

7
00:00:19.198 --> 00:00:22.255
They're changing what they
see based on their action.

8
00:00:22.255 --> 00:00:24.944
User direction typing,
clicking cuz this was typing, right?

9
00:00:24.944 --> 00:00:25.910
Is registered.

10
00:00:25.910 --> 00:00:28.267
Registered is a password for
the DOM element knowing, and

11
00:00:28.267 --> 00:00:31.495
this is one of those moments where
it's like, how is that implemented?

12
00:00:31.495 --> 00:00:36.582
Well, all we need to know as engineers for
building out web applications is,

13
00:00:36.582 --> 00:00:39.711
when the user takes action
on that input field,

14
00:00:39.711 --> 00:00:44.610
the associated handler triggers
running back on the callback queues.

15
00:00:44.610 --> 00:00:48.690
It's literally a reference to that
function is added to the callback queue.

16
00:00:48.690 --> 00:00:52.375
That's the DOM's job and then JavaScript
will then execute that function.

17
00:00:52.375 --> 00:00:57.713
They know then they're taught but
how can this cause a change in data,

18
00:00:57.713 --> 00:01:00.439
which is elsewhere in JavaScript?

19
00:01:00.439 --> 00:01:02.820
Because of the handler functions.

20
00:01:02.820 --> 00:01:08.660
It lets the user action or input notice
events, password for events and sort of.

21
00:01:09.840 --> 00:01:13.783
Yeah, the construct that ensure
that when a user takes action,

22
00:01:13.783 --> 00:01:18.836
an associated function based on that type
of action, in this case an input event.

23
00:01:18.836 --> 00:01:23.988
In this case an input event triggers
the associated function to handle

24
00:01:23.988 --> 00:01:29.560
the input pass back into JavaScript
where we can then change the data.

25
00:01:29.560 --> 00:01:32.700
That key line there shouldn't
really be there, honestly.

26
00:01:32.700 --> 00:01:36.350
We've been talking about
let it be passed back.

27
00:01:36.350 --> 00:01:40.208
This line here is where we are assigning,
where we're storing that

28
00:01:40.208 --> 00:01:43.672
handle input function ready to
be triggered by user action.

29
00:01:43.672 --> 00:01:45.949
By saving a function, [INAUDIBLE] here.

30
00:01:45.949 --> 00:01:49.981
Let's say we wanted evidence in the DOM
element where the user action event

31
00:01:49.981 --> 00:01:50.750
happens.

32
00:01:50.750 --> 00:01:54.106
The function be called back into
JavaScript and execute automatically.

33
00:01:54.106 --> 00:01:54.740
So what?

34
00:01:54.740 --> 00:01:56.400
Okay, that's very optimistic.

35
00:01:56.400 --> 00:02:01.441
Well, user actions can then trigger
running JavaScript code to save or

36
00:02:01.441 --> 00:02:05.906
change the underlying data post,
in this case in JavaScript.

37
00:02:05.906 --> 00:02:09.403
And then change what's displayed back
in the DOM by taking that data and

38
00:02:09.403 --> 00:02:12.099
sticking it anywhere we want
on that list of elements.

39
00:02:13.840 --> 00:02:16.120
Now we have to manually
reupdate the DOM with our data.

40
00:02:16.120 --> 00:02:17.350
There's no propagation.

41
00:02:17.350 --> 00:02:20.458
Every time the data changes here,
we have to manually go and

42
00:02:20.458 --> 00:02:24.620
update what's seen on this, or
what's added to this DOM at C++ DOM.

43
00:02:24.620 --> 00:02:26.722
But we have a full user interface.

44
00:02:26.722 --> 00:02:29.690
Goal 1,
display content data inside the computer.

45
00:02:29.690 --> 00:02:33.823
In this case all in JavaScript as the view
for the user to see it has to be from

46
00:02:33.823 --> 00:02:37.610
JavaScript cuz that's where
there's mutable data.

47
00:02:37.610 --> 00:02:41.233
Goal 2,
enable the user to interact by tapping or

48
00:02:41.233 --> 00:02:46.518
clicking with what they see, they view,
and then change that content.

49
00:02:46.518 --> 00:02:51.596
Which means in practice,
changing underlying data in JavaScript,

50
00:02:51.596 --> 00:02:55.971
and then we went from post being
an empty string to high, and

51
00:02:55.971 --> 00:02:58.870
then displaying that back on the view.

52
00:03:00.100 --> 00:03:03.100
All right, people,
that's our full user interface.

53
00:03:03.100 --> 00:03:04.030
Let's have thumbs.

54
00:03:04.030 --> 00:03:06.380
I wanna see every clarification question.

55
00:03:06.380 --> 00:03:10.960
If I punt some of them, forgive me,
but something will show up later.

56
00:03:10.960 --> 00:03:16.280
You lost me, I have a clear mental
model of, I need clarification.

57
00:03:16.280 --> 00:03:18.478
What is wrong with all of you?

58
00:03:18.478 --> 00:03:24.090
If you literally looking around,
[INAUDIBLE] you do not need to emulate.

59
00:03:24.090 --> 00:03:26.488
Okay, is anyone got clarifications, why?

60
00:03:26.488 --> 00:03:27.203
Good, no?

61
00:03:27.203 --> 00:03:30.464
&gt;&gt; It's not a question,
I'm not sure it's super topical, but

62
00:03:30.464 --> 00:03:34.415
having spent a bunch of time in imperative
Dom land and the teens and being,

63
00:03:34.415 --> 00:03:38.540
why is it hundreds of milliseconds to
change this one thing on this list?

64
00:03:38.540 --> 00:03:40.421
This is the first time
I've understood like,

65
00:03:40.421 --> 00:03:42.361
it's cuz there's tons of
memory being allocated.

66
00:03:42.361 --> 00:03:45.586
&gt;&gt; And it's all sorts of interesting
pieces happening in this process.

67
00:03:45.586 --> 00:03:46.826
And I think it's just,

68
00:03:46.826 --> 00:03:50.240
I mean, don't think that the one
minute is because of anything.

69
00:03:50.240 --> 00:03:55.150
The one minute here is just the use
was really preparing what to write.

70
00:03:55.150 --> 00:03:55.650
&gt;&gt; [LAUGH]
&gt;&gt; All right.

71
00:03:55.650 --> 00:03:57.854
&gt;&gt; How does the callback queue relate to

72
00:03:57.854 --> 00:04:01.087
the task and micro task queues?
Is it different and

73
00:04:01.087 --> 00:04:02.930
how does it fit priority?

74
00:04:02.930 --> 00:04:07.520
&gt;&gt; Okay.
So callback queue is our task queue.

75
00:04:07.520 --> 00:04:12.148
Micro task queue is our Priority VIP
line as I know some of our

76
00:04:12.148 --> 00:04:17.162
audience like to call it,
some of our community like to call it.

77
00:04:17.162 --> 00:04:20.700
So they are queues that
have different priorities.

78
00:04:20.700 --> 00:04:24.917
So if there were multiple items in
the callback queue, if we had a handle

79
00:04:24.917 --> 00:04:29.697
of input, but then they were also to click
these would all start queuing up here,

80
00:04:29.697 --> 00:04:34.090
ready to be added to the call stack
once the previous one has been removed.

81
00:04:34.090 --> 00:04:35.832
Actually, sorry,
I should have said this callback.

82
00:04:37.136 --> 00:04:41.946
I should have said that this
callback here, handle input,

83
00:04:41.946 --> 00:04:44.061
which was called back in,

84
00:04:44.061 --> 00:04:50.660
I should have said has now been removed
when it was added to the call stack.

85
00:04:50.660 --> 00:04:51.840
So this is removed.

86
00:04:51.840 --> 00:04:57.489
But if there had been an error
function in the micro task queue,

87
00:04:57.489 --> 00:05:01.754
does anyone know what
actions in JavaScript put

88
00:05:01.754 --> 00:05:05.620
a function in the micro task queue in?

89
00:05:05.620 --> 00:05:07.205
&gt;&gt; Something like asynchronous?

90
00:05:07.205 --> 00:05:09.380
&gt;&gt; Yeah,
these things are all asynchronous.

91
00:05:09.380 --> 00:05:10.507
What's the specific?

92
00:05:10.507 --> 00:05:12.750
Are you talking about
asynchronous functions?

93
00:05:12.750 --> 00:05:13.420
&gt;&gt; Yeah.
&gt;&gt; Specifically.

94
00:05:13.420 --> 00:05:14.820
&gt;&gt; If you invoke an a sync function.

95
00:05:14.820 --> 00:05:15.670
&gt;&gt; Yeah, yeah, exactly.

96
00:05:15.670 --> 00:05:21.550
It's specifically an a sync await under
the hood, which is implementing promises,

97
00:05:21.550 --> 00:05:23.290
at least was-
&gt;&gt; [LAUGH]

98
00:05:23.290 --> 00:05:26.450
&gt;&gt; That goes into the micro task queue.

99
00:05:26.450 --> 00:05:30.600
And they take precedence even over, so
they were both waiting in the queue here.

100
00:05:30.600 --> 00:05:33.885
The micro tiles queue will take
precedence over the callback queue for

101
00:05:33.885 --> 00:05:35.283
being able to the call stack.

102
00:05:35.283 --> 00:05:37.531
But we're not thinking
about that right here.

