WEBVTT

1
00:00:00.000 --> 00:00:05.469
Let's just look at a bit
of a slightly more flexible

2
00:00:05.469 --> 00:00:10.947
even way of doing this,
even more UI composition.

3
00:00:10.947 --> 00:00:13.779
Because a great point by which
we'll come to in a second.

4
00:00:13.779 --> 00:00:18.518
Even more UI composition
creating multiple,

5
00:00:18.518 --> 00:00:25.083
similar Virtual DOM elements
each with different actual data.

6
00:00:25.083 --> 00:00:29.193
So if I wanted to have 50 Twitter posts
and of course in practice it's got

7
00:00:29.193 --> 00:00:32.596
more information,
it's got the number of likes whatever.

8
00:00:32.596 --> 00:00:33.705
It can be very simple.

9
00:00:33.705 --> 00:00:36.097
If I have 50 Twitter posts,

10
00:00:36.097 --> 00:00:41.181
I do not want to really list them
down in a giant array of arrays.

11
00:00:41.181 --> 00:00:43.576
So in practice, what I will do and

12
00:00:43.576 --> 00:00:48.454
what is done in all the frameworks
is create a function like post here

13
00:00:48.454 --> 00:00:53.014
that when run with an individual
piece of data will return out.

14
00:00:53.014 --> 00:00:56.887
Not that profound another
array element with div and

15
00:00:56.887 --> 00:01:00.506
the message is its content
it's very profound.

16
00:01:00.506 --> 00:01:05.245
This is what a functional
component is doing it is creating

17
00:01:05.245 --> 00:01:09.996
when run a piece of our visual
representation of the page.

18
00:01:09.996 --> 00:01:14.157
So the only thing that has
changed here is if you

19
00:01:14.157 --> 00:01:18.114
look at our input name handle,
there it is.

20
00:01:18.114 --> 00:01:24.270
I've now got rid of these two divs and
I am now taking my post Ginger,

21
00:01:24.270 --> 00:01:29.903
Gez, Ursy, Fen my four sisters,
that's their nicknames.

22
00:01:29.903 --> 00:01:34.871
There we go, yeah, that is all their
nicknames Fen's got the most nicknames.

23
00:01:34.871 --> 00:01:42.011
But Ginger, Gez, Ursy, Fen and I am going
to map over those individual names and

24
00:01:42.011 --> 00:01:48.206
insert each of those strings as
the input to respectively zero index,

25
00:01:48.206 --> 00:01:53.153
one index, second index,
third index is call to post.

26
00:01:53.153 --> 00:01:57.956
So the first time I call post will pass
in Ginger and return out div Ginger.

27
00:01:57.956 --> 00:02:04.120
Second time I call post I'll
pass in Gez return out div Gez,

28
00:02:04.120 --> 00:02:08.569
third time div Ursy, fourth time div Fen.

29
00:02:08.569 --> 00:02:13.755
And then that will be and then I'm
gonna have to spread them again because

30
00:02:13.755 --> 00:02:18.872
now that's an array of arrays and
I actually just want a list of arrays.

31
00:02:18.872 --> 00:02:23.168
I wanna have them like added to my,
I don't wanna have input,

32
00:02:23.168 --> 00:02:26.568
name handle and
then an array full of subarrays.

33
00:02:26.568 --> 00:02:28.332
I actually just want all
of those arrays listed out.

34
00:02:28.332 --> 00:02:31.387
I could make this work to have
that be a collection of arrays.

35
00:02:31.387 --> 00:02:35.242
And that's where, if you go to the
challenges which I really look forward to

36
00:02:35.242 --> 00:02:38.873
getting a chance to do as well myself and
I hope you all get a chance to do.

37
00:02:38.873 --> 00:02:45.588
We can start to build these out to handle,
sub elements, clusters of elements,

38
00:02:45.588 --> 00:02:51.233
child elements all using a recursive
call to our convert function.

39
00:02:51.233 --> 00:02:56.162
That ensures that if it finds an array
of arrays, it will step in and

40
00:02:56.162 --> 00:02:59.608
loop through all of those
to create elements.

41
00:02:59.608 --> 00:03:04.267
Or if we have our contents,
which is our position 1 of

42
00:03:04.267 --> 00:03:08.833
a given node here, Lee,
Hello, Lee and great job.

43
00:03:08.833 --> 00:03:13.574
What if we could have in there our
contents actually be three, four, five,

44
00:03:13.574 --> 00:03:14.772
50 other nodes?

45
00:03:14.772 --> 00:03:19.327
Then we could write
conditional logic that says,

46
00:03:19.327 --> 00:03:23.665
if you find that node
position one in the virtual

47
00:03:23.665 --> 00:03:27.577
DOM is an array rather
than a piece of text.

48
00:03:27.577 --> 00:03:33.268
Don't try and display the array
jump in and run through and

49
00:03:33.268 --> 00:03:37.814
produce all of its elements
on the DOM itself.

50
00:03:37.814 --> 00:03:44.358
But those are in the challenges let's
actually show this a little bit here.

51
00:03:44.358 --> 00:03:49.145
And one other fun thing here is if
you look at handle now rather than

52
00:03:49.145 --> 00:03:53.585
updating a name value it's pushing
each letter to be fair cuz

53
00:03:53.585 --> 00:03:57.696
I didn't wanna have it handleInputs and
then an enter.

54
00:03:57.696 --> 00:04:04.243
But each letter that we write, it will add
to our list of post and because our data

55
00:04:04.243 --> 00:04:10.426
directly manifests in our VDOM because
of our update DOM running on a loop.

56
00:04:10.426 --> 00:04:16.551
We will get automatically all of those
messages as soon as a post is pushed,

57
00:04:16.551 --> 00:04:19.854
as soon as the value of an input, sorry,

58
00:04:19.854 --> 00:04:24.738
value of an input yeah to the input
field is pushed to posts.

59
00:04:24.738 --> 00:04:31.548
Immediately, we will get a redisplay,
a re-render of our entire list of post.

60
00:04:31.548 --> 00:04:37.113
If I were to write will,
I would get my post would be now Ginger,

61
00:04:37.113 --> 00:04:39.213
Gez, Ursy, Fed Will.

62
00:04:39.213 --> 00:04:44.223
And ideally, we'd have a better input
handler than that that only a pen

63
00:04:44.223 --> 00:04:49.152
superimposed upon, let's say
the content being above three letters

64
00:04:49.152 --> 00:04:54.187
long on of user pressing Enter or
whatever it might be but too much code.

65
00:04:54.187 --> 00:04:59.210
So then the createVDOM call
inside of our repeatedly running

66
00:04:59.210 --> 00:05:03.947
updateDOM would take our now
longer list and map over it.

67
00:05:03.947 --> 00:05:08.261
Create post elements,
div and the underlying and

68
00:05:08.261 --> 00:05:12.480
the message for one for w,
for i, for l and for l.

69
00:05:12.480 --> 00:05:16.388
Let's just draw this for
a little second, not go into it in full.

70
00:05:16.388 --> 00:05:21.237
But let's just draw this for a little
second here because right after this we're

71
00:05:21.237 --> 00:05:26.456
going to have to talk performance because
this is untenable, no doubt about that.

72
00:05:26.456 --> 00:05:30.392
So looking at our posts, so

73
00:05:30.392 --> 00:05:37.068
there's gonna be a little
bit scrappy here but

74
00:05:37.068 --> 00:05:41.861
looking at our posts where we have

75
00:05:41.861 --> 00:05:46.154
Ginger, Gez, Ursy and Fen.

76
00:05:46.154 --> 00:05:51.128
There it is, we would now if you
look inside the chord createVDOM

77
00:05:51.128 --> 00:05:55.101
that we did here that
produced our array of arrays.

78
00:05:55.101 --> 00:05:58.383
We would have our input and whoops!

79
00:05:58.383 --> 00:06:01.451
Who [INAUDIBLE]

80
00:06:01.451 --> 00:06:07.589
that's a wonderful error.

81
00:06:07.589 --> 00:06:14.645
I don't see any name defined,
make no comment.

82
00:06:14.645 --> 00:06:17.607
Yet, there'll be our input and
our name, no comment on that.

83
00:06:17.607 --> 00:06:21.515
And then immediately after,

84
00:06:21.515 --> 00:06:26.829
we would map over posts and
we will run our

85
00:06:26.829 --> 00:06:32.301
post element creation function post with

86
00:06:32.301 --> 00:06:38.727
our first value of our
posts array which is what?

87
00:06:38.727 --> 00:06:41.688
Why?
&gt;&gt; Ginger.

88
00:06:41.688 --> 00:06:46.011
&gt;&gt; Ginger [LAUGH] that's right so
funny using my sister's name for this.

89
00:06:46.011 --> 00:06:48.774
There it is an integer we go and

90
00:06:48.774 --> 00:06:54.631
I guess we could show our execution
context here and our message

91
00:06:54.631 --> 00:06:59.379
parameter would evaluate to what why
&gt;&gt; Same thing the string Ginger

92
00:06:59.379 --> 00:07:04.119
&gt;&gt; Ginger and then we would create

93
00:07:04.119 --> 00:07:10.874
an array with string div and
string Ginger.

94
00:07:10.874 --> 00:07:13.466
I say a div, that's why you start
to almost verbally call these even

95
00:07:13.466 --> 00:07:15.344
though in reality it's
actually just an array.

96
00:07:15.344 --> 00:07:20.367
And we would return that out.

97
00:07:20.367 --> 00:07:22.777
We're sorry, we're gonna make
sure it's not confusing here.

98
00:07:22.777 --> 00:07:26.495
We will return that out and

99
00:07:26.495 --> 00:07:31.903
then we will do, post again with Gez.

100
00:07:31.903 --> 00:07:33.541
Get another one post again with Ursy.

101
00:07:33.541 --> 00:07:37.350
Get another one post again with Fen and

102
00:07:37.350 --> 00:07:42.480
we would have an array of
arrays raise four of them.

103
00:07:42.480 --> 00:07:45.515
But we wouldn't want to
have the array of arrays,

104
00:07:45.515 --> 00:07:49.867
we would want to just grab the four
arrays to put into our VDOM directly.

105
00:07:49.867 --> 00:07:55.228
So we would spread
the resultant array of arrays

106
00:07:55.228 --> 00:08:00.320
leaving us just with these
four in our VDOM and

107
00:08:00.320 --> 00:08:03.012
then we're good to go.

108
00:08:03.012 --> 00:08:07.967
And then as I say, as the user starts
typing in response to the input into

109
00:08:07.967 --> 00:08:13.006
the input field we would rather than
append to the string that's typed,

110
00:08:13.006 --> 00:08:17.629
replace our value of name,
we'd have a defined name globally, so

111
00:08:17.629 --> 00:08:19.463
no comment in line seven.

112
00:08:19.463 --> 00:08:24.223
We would instead push that thing that the
user typed, albeit letter by letter but

113
00:08:24.223 --> 00:08:27.375
we're just trying to keep
it simple here into posts.

114
00:08:27.375 --> 00:08:32.865
And now as we then hit our rerun of
updateDOM to change what's displayed

115
00:08:32.865 --> 00:08:38.355
as well based on the data instantly
our post would now have five elements

116
00:08:38.355 --> 00:08:44.321
including the new thing type and
would directly mirror our underlying data.

117
00:08:44.321 --> 00:08:49.310
Even more composition, the ability to
describe in our code little units of

118
00:08:49.310 --> 00:08:53.347
code that we can reuse and
move around and end up displaying,

119
00:08:53.347 --> 00:08:57.647
as we hope, visually in our JavaScript,
visually on our page.

120
00:08:57.647 --> 00:08:58.948
So even more composition,

121
00:08:58.948 --> 00:09:02.240
creating multiple similar VDOM
elements each with different data.

122
00:09:02.240 --> 00:09:07.425
We can produce our VDOM elements, virtual
visual DOM elements with a function so

123
00:09:07.425 --> 00:09:10.487
we can then easily add
new elements to our list.

124
00:09:10.487 --> 00:09:13.798
In this case, post defines
a dataToview relationship with a data.

125
00:09:13.798 --> 00:09:17.390
Each element in the array post,
there it was changes for

126
00:09:17.390 --> 00:09:20.688
each of the posts because
we're going to map over.

127
00:09:20.688 --> 00:09:24.587
Boom, boom, boom, boom add more elements,
boom, grab it, no problem.

128
00:09:24.587 --> 00:09:28.918
Add more tweets that's what happens when
you type a tweet and press Enter and

129
00:09:28.918 --> 00:09:31.770
it appears,
we've added to an underlying list.

130
00:09:31.770 --> 00:09:36.477
And now we are upon the mapping over
that list of data, producing all

131
00:09:36.477 --> 00:09:41.525
the corresponding elements on the DOM and
replacing the existing ones.

132
00:09:41.525 --> 00:09:45.192
In theory, we may want to be more optimal
on that we'll see that in a moment.

133
00:09:45.192 --> 00:09:49.061
We can even add more logic
to the post function here.

134
00:09:49.061 --> 00:09:52.173
You can see I initially redid
the input one as a function as well.

135
00:09:52.173 --> 00:09:57.373
So I could also have created input as I
actually would in practice as a function

136
00:09:57.373 --> 00:10:02.509
producing the input jsDOM VDOM element,
the array from a function as well.

137
00:10:02.509 --> 00:10:03.947
That becomes a standard approach.

138
00:10:03.947 --> 00:10:07.778
In fact, if you look at something like
React they wrap up that array creation and

139
00:10:07.778 --> 00:10:09.504
technically had create an object.

140
00:10:09.504 --> 00:10:14.626
They wrap that up or they they wrap that
up in a create element function call,

141
00:10:14.626 --> 00:10:16.317
that they wrap up in JSX.

142
00:10:16.317 --> 00:10:20.626
So the JSX that you see when you create
an element or you have a class or

143
00:10:20.626 --> 00:10:24.860
a function, creating an element is
under the hood running a create

144
00:10:24.860 --> 00:10:28.510
element function that produces
technically an object.

145
00:10:28.510 --> 00:10:31.525
But just like an array like this
describing what's going to be displayed.

146
00:10:31.525 --> 00:10:36.039
They then create an syntactic
sugar layer on top called JSX that

147
00:10:36.039 --> 00:10:39.796
looks actually like the thing
they end up creating.

148
00:10:39.796 --> 00:10:44.766
Well, it looks more like yeah once you get
into a free framework implementation you

149
00:10:44.766 --> 00:10:49.381
can see why it's so satisfying to model
these up out from the ground up because

150
00:10:49.381 --> 00:10:52.373
now it's like, okay,
that's what you can see.

151
00:10:52.373 --> 00:10:56.373
We can see what a React Component
under the hood is doing here

152
00:10:56.373 --> 00:11:01.105
can add even more logic to that post
function to make it more powerful.

153
00:11:01.105 --> 00:11:06.049
So I could totally have inside that
post function now, not just create each

154
00:11:06.049 --> 00:11:10.760
of my what each quarter it creates
an element div and Ginger that's then

155
00:11:10.760 --> 00:11:15.252
creates a DOM element via the conversion
of each of those elements.

156
00:11:15.252 --> 00:11:17.281
Inside update Dom in line 14,

157
00:11:17.281 --> 00:11:21.273
I could also have that post function
just to add the logic in it.

158
00:11:21.273 --> 00:11:25.839
It could determine whether data particular
class or whether to display those

159
00:11:25.839 --> 00:11:30.138
messages in some particular way or
whether to only add so many messages.

160
00:11:30.138 --> 00:11:35.311
But there's all sorts of things we
could do determining what ends up

161
00:11:35.311 --> 00:11:41.047
being returned out for the actual view
as described in that post function.

162
00:11:41.047 --> 00:11:45.882
Because it is now the description in
createVDOM call of the relationship

163
00:11:45.882 --> 00:11:49.855
between the underlying data and
what's being displayed.

164
00:11:49.855 --> 00:11:52.635
It's just being contained
within a function but

165
00:11:52.635 --> 00:11:56.856
it is still in createVDOM describing
the relationship between the data.

166
00:11:56.856 --> 00:11:59.023
And well, with the data here and

167
00:11:59.023 --> 00:12:03.920
the step two the JavaScript representation
of it before we hit step three

168
00:12:03.920 --> 00:12:08.915
the conversion to actual DOM elements
which displays on the actual page.

169
00:12:08.915 --> 00:12:12.482
All right, let's have thumbs though
on this now more composable.

170
00:12:12.482 --> 00:12:16.945
I would be very interested to hear some
clarification questions on this, okay.

171
00:12:16.945 --> 00:12:19.034
Paul's got a clarification, hooray!

172
00:12:19.034 --> 00:12:20.141
Paul, go ahead.

173
00:12:20.141 --> 00:12:23.284
&gt;&gt; Just a quick question, on your
function post you have it capitalized

174
00:12:23.284 --> 00:12:25.187
is there a reason why it's capitalized?

175
00:12:25.187 --> 00:12:28.771
&gt;&gt; Great question, Paul.

176
00:12:28.771 --> 00:12:31.332
That's one of those questions that's so
thoughtfully teeing up.

177
00:12:31.332 --> 00:12:37.601
Yeah, because it becomes
a standard in UI frameworks

178
00:12:37.601 --> 00:12:43.311
that when a function is
acting as a description of

179
00:12:43.311 --> 00:12:48.343
a relationship between underlying data.

180
00:12:48.343 --> 00:12:52.553
In this case, it's our list of messages
and how it should be displayed.

181
00:12:52.553 --> 00:12:56.879
In this case, it's got a description,
it's gonna be a div with that message as

182
00:12:56.879 --> 00:12:59.284
the content that is
known as a UI component.

183
00:12:59.284 --> 00:13:01.291
In this case, we have no handlers on it.

184
00:13:01.291 --> 00:13:04.153
We have no it's very, very, very minimal.

185
00:13:04.153 --> 00:13:08.080
And really, probably I should have well no
nowhere else have I got a function that

186
00:13:08.080 --> 00:13:09.659
describes that relationship.

187
00:13:09.659 --> 00:13:12.502
I guess creating the DOM does but
it's doing everything.

188
00:13:12.502 --> 00:13:16.786
If I had more, if I've created input
element there in line seven also with

189
00:13:16.786 --> 00:13:18.871
a function which I could have done.

190
00:13:18.871 --> 00:13:24.390
Function, input I'd have done
an uppercase, return that array.

191
00:13:24.390 --> 00:13:29.619
That's a convention within UI framework
design that whenever it is a UI component,

192
00:13:29.619 --> 00:13:34.643
describing that relationship between
underlying data and what's displayed.

193
00:13:34.643 --> 00:13:39.844
Use an uppercase for the first letter and
that's a convention.

194
00:13:39.844 --> 00:13:43.995
That's why I did it here I guess to sort
of show hey we've reached a full component

195
00:13:43.995 --> 00:13:46.509
here just being used in
part of our application.

196
00:13:46.509 --> 00:13:47.700
Great question Paul.

