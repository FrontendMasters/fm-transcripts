WEBVTT

1
00:00:00.053 --> 00:00:06.205
We are now coming to our
expansion of that visual dom.

2
00:00:06.205 --> 00:00:09.255
We did just see, didn't we?

3
00:00:09.255 --> 00:00:14.127
The ability we have now with
the fact that our data is the only

4
00:00:14.127 --> 00:00:18.714
source of determination of
what shows up on the screen.

5
00:00:18.714 --> 00:00:23.497
The view via the DOM in C++,
the data in JavaScript is the only cause,

6
00:00:23.497 --> 00:00:28.204
the only input of that via our
description of it through this create-v

7
00:00:28.204 --> 00:00:30.148
DOM as Alexa shared with us.

8
00:00:30.148 --> 00:00:34.734
And then that was converted into actual
DOM elements, and then they were

9
00:00:34.734 --> 00:00:38.659
appended using replace-children
to the body and showed up.

10
00:00:38.659 --> 00:00:44.364
That visual Dom,
we can now make more flexible,

11
00:00:44.364 --> 00:00:51.473
we can now enable ourselves to
create reusable pieces of it.

12
00:00:51.473 --> 00:00:53.390
We can create reusable parts to it.

13
00:00:53.390 --> 00:00:56.987
And that's gonna give us
the ability to compose,

14
00:00:56.987 --> 00:01:02.038
to join up little pieces of UI user
interface, that is the combination

15
00:01:02.038 --> 00:01:06.405
of content with the back and
forth between our user action and

16
00:01:06.405 --> 00:01:11.739
the underlying data, and then display
it again in our view, that combo.

17
00:01:11.739 --> 00:01:16.723
And we're gonna move those little
units around to build out entire

18
00:01:16.723 --> 00:01:19.935
applications and that's where we go now.

19
00:01:19.935 --> 00:01:21.183
I starts with our list.

20
00:01:21.183 --> 00:01:22.985
There's our list we recognize there.

21
00:01:22.985 --> 00:01:25.462
We've got our input, our name,
our handle function.

22
00:01:25.462 --> 00:01:28.153
We've got our div, our hello, okay?

23
00:01:28.153 --> 00:01:30.751
Lists are central to UI development.

24
00:01:30.751 --> 00:01:33.676
We have a list of two arrays
with their element details.

25
00:01:33.676 --> 00:01:36.765
In reality,
these lists are gonna be 49 long.

26
00:01:36.765 --> 00:01:42.817
49 video elements in a Zoom meeting,
100 tweets on a Twitter timeline.

27
00:01:42.817 --> 00:01:46.236
Yeah, which we already had someone
hilariously say in the chat.

28
00:01:46.236 --> 00:01:51.027
My tweets were less impressive
than a wipe-down on the board.

29
00:01:51.027 --> 00:01:54.578
This feels very rude, but very nice.

30
00:01:54.578 --> 00:01:56.705
We need tools for dealing with lists.

31
00:01:56.705 --> 00:02:01.774
To apply code functionality to each
element, it's gonna be here to take

32
00:02:01.774 --> 00:02:06.856
the details of each element and
convert them into an actual DOM element.

33
00:02:06.856 --> 00:02:11.982
We saw last time to the chagrin of,
let's try to use that word correctly,

34
00:02:11.982 --> 00:02:16.711
I don't know, I might have used it
wrongly, to the chagrin of Ian.

35
00:02:16.711 --> 00:02:21.609
That we were marking out
here individually we wanted

36
00:02:21.609 --> 00:02:25.291
to access vDOM 0 and vDOM 1 manually.

37
00:02:25.291 --> 00:02:29.067
What if I have three elements in that DOM,
in my virtual DOM, my jobs DOM?

38
00:02:29.067 --> 00:02:30.085
What if I have 10?

39
00:02:30.085 --> 00:02:31.265
What if I have 50?

40
00:02:31.265 --> 00:02:33.883
And what if I wanna move them
around in different order?

41
00:02:33.883 --> 00:02:35.138
Well, ain't gonna work here.

42
00:02:35.138 --> 00:02:39.823
So we're gonna try and generalize
this by instead of manually selecting

43
00:02:39.823 --> 00:02:44.121
element zero and one from our virtual
DOM in our update DOM method,

44
00:02:44.121 --> 00:02:48.572
function, sorry, the converter we
are going to map over that list of

45
00:02:48.572 --> 00:02:51.753
elements that comes out
of running create V DOM.

46
00:02:51.753 --> 00:02:53.209
Currently, he's got two elements.

47
00:02:53.209 --> 00:02:57.396
We're gonna map over it,
that is to say we're going to loop and

48
00:02:57.396 --> 00:03:00.406
hit each element with
the convert function.

49
00:03:00.406 --> 00:03:05.899
Our map function, if you've been to a
higher-order functions hard parts, you'll

50
00:03:05.899 --> 00:03:10.723
recognize it, our map function allows
us to hit with a function pass to it.

51
00:03:10.723 --> 00:03:15.911
We'll see down here it's gonna
be the function convert to hit

52
00:03:15.911 --> 00:03:20.898
each element of our vDOM,
our visual DOM and JavaScript and

53
00:03:20.898 --> 00:03:25.506
apply one by one our convert
function to each element.

54
00:03:25.506 --> 00:03:33.501
And then to collect that list of
converted elements in a array called LM.

55
00:03:33.501 --> 00:03:38.512
Great, but
I replaced children is going to expect

56
00:03:38.512 --> 00:03:44.238
not a list of linked access
objects of real DOM elements,

57
00:03:44.238 --> 00:03:47.833
it expects individual arguments.

58
00:03:47.833 --> 00:03:52.694
So we're gonna introduce our lovely spread
operator that's gonna spread out our

59
00:03:52.694 --> 00:03:57.485
list into individual arguments chat's
gonna work with our Replace children's

60
00:03:57.485 --> 00:04:01.024
design where it expects
individual elements, not a list.

61
00:04:01.024 --> 00:04:01.757
So here we go.

62
00:04:01.757 --> 00:04:06.104
Here we have to apply the map function and
to convert an array of

63
00:04:06.104 --> 00:04:10.299
elements to individual inputs
to pass through a function.

64
00:04:10.299 --> 00:04:15.181
Our functions that don't take arrays,
we're gonna use a spread syntax that

65
00:04:15.181 --> 00:04:18.195
spreads out a list into
individual arguments.

66
00:04:18.195 --> 00:04:19.569
So we can see it here.

67
00:04:19.569 --> 00:04:21.964
We have our virtual DOM, our visual DOM,

68
00:04:21.964 --> 00:04:25.942
our JavaScript representation of
what's gonna show up on the page.

69
00:04:25.942 --> 00:04:28.125
Obviously, we're not doing
this in full with this code.

70
00:04:28.125 --> 00:04:29.548
We're having to define name.

71
00:04:29.548 --> 00:04:31.858
We have our handle function in there.

72
00:04:31.858 --> 00:04:37.031
We then have our convert function
that will take in one of those

73
00:04:37.031 --> 00:04:42.216
elements in the vDOM and the next one,
one by one by using map.

74
00:04:42.216 --> 00:04:49.523
So in line 15, we are calling on that
vDOM, which is our array of sub-arrays,

75
00:04:49.523 --> 00:04:55.110
we're calling map on it and
passing it the function convert,

76
00:04:55.110 --> 00:05:01.020
which is going to inside of map,
a built-in JavaScript method,

77
00:05:01.020 --> 00:05:05.766
hit each element of vDOM
with the convert function.

78
00:05:05.766 --> 00:05:12.008
And that convert function will take in
as its input first vDOM position zero.

79
00:05:12.008 --> 00:05:14.969
Then it'll run all over again
with vDOM position one and

80
00:05:14.969 --> 00:05:17.938
if there were vDOM position two,
it would hit that one.

81
00:05:17.938 --> 00:05:21.330
And the output of each of those
will be stored into, here we go,

82
00:05:21.330 --> 00:05:23.261
I've got my little comments here.

83
00:05:23.261 --> 00:05:26.706
Convert runs vDOM 0 push
to a new LMS array.

84
00:05:26.706 --> 00:05:29.244
Convert vDOM 1 push to a new LMS array.

85
00:05:29.244 --> 00:05:33.213
And unfortunately, he's got a list
replaced children's what would that so

86
00:05:33.213 --> 00:05:36.463
we're gonna spread out elements
into individual arguments.

87
00:05:36.463 --> 00:05:38.456
Just for people who are not aware of map,

88
00:05:38.456 --> 00:05:41.098
mapping over vDOM is spreading
resulting right now.

89
00:05:41.098 --> 00:05:44.479
Adding new elements doesn't require
any new code, that's useful.

90
00:05:44.479 --> 00:05:47.936
We can add new elements to this
vDOM is gonna require no new code.

91
00:05:47.936 --> 00:05:52.670
We're just going to map is flexible
to the number of input elements.

92
00:05:52.670 --> 00:05:55.649
The map call will handle many
elements in the vDOM as there are.

93
00:05:55.649 --> 00:05:58.260
To add our array of DOM elements, we need
to convert them to individual arguments.

94
00:05:58.260 --> 00:06:03.234
Spread syntax allows an iterable such as
an array expression with string to be

95
00:06:03.234 --> 00:06:04.006
expanded.

96
00:06:04.006 --> 00:06:07.295
To work with the append method,
which can't handle arrays.

97
00:06:07.295 --> 00:06:09.092
Can I just say I definitely copied that?

98
00:06:09.092 --> 00:06:11.144
Spread Synex allows
an iterable such as an array.

99
00:06:11.144 --> 00:06:12.064
As I read that, I was like,

100
00:06:12.064 --> 00:06:14.628
I definitely did not write that,
I copied that off the Internet somewhere.

101
00:06:14.628 --> 00:06:16.862
All right, okay, it makes sense, right?

102
00:06:16.862 --> 00:06:21.681
Spread allows something that can be
iterated over like a list to be spread out

103
00:06:21.681 --> 00:06:23.262
as an array expression or

104
00:06:23.262 --> 00:06:28.153
string to be expanded into individual
inputs to be passed to a, in this case,

105
00:06:28.153 --> 00:06:32.257
append or replace children
methods that can't handle arrays.

