WEBVTT

1
00:00:00.250 --> 00:00:02.030
So what's the opposite of pull?

2
00:00:02.030 --> 00:00:03.280
Well, push, right?

3
00:00:03.280 --> 00:00:03.800
Awesome.

4
00:00:03.800 --> 00:00:07.120
So if you wish to take your changes and
move them to a remote repo,

5
00:00:07.120 --> 00:00:08.670
you can do this with git push.

6
00:00:08.670 --> 00:00:12.610
If you're not tracking, git push won't
work just like git pull wouldn't work.

7
00:00:12.610 --> 00:00:15.570
So you have to be able to be
tracking a branch on a remote.

8
00:00:15.570 --> 00:00:19.857
Again, if you properly name it as origin,
git has a magic around it where you check

9
00:00:19.857 --> 00:00:24.073
it out, it'll do some auto tracking for
you, which is fantastic.

10
00:00:24.073 --> 00:00:28.753
So let's make some changes to bar and
push it to hello-git.

11
00:00:28.753 --> 00:00:33.083
So I'm gonna go here in remote-git and
I'm gonna go git checkout bar.

12
00:00:33.083 --> 00:00:36.293
Now notice, when I git checkout,
look what it does.

13
00:00:36.293 --> 00:00:38.353
It automatically does the tracking for me.

14
00:00:38.353 --> 00:00:40.084
Awesome, so now I can just git push.

15
00:00:40.084 --> 00:00:43.222
And notice that I didn't
have to create a new branch,

16
00:00:43.222 --> 00:00:46.564
I already had this branch
in my remotes directory.

17
00:00:46.564 --> 00:00:49.650
If you have several remotes, it can
cause some problems and all of sudden

18
00:00:49.650 --> 00:00:53.004
checking out can be a little bit more of
a pain depending on how you name things.

19
00:00:54.384 --> 00:00:57.321
That's why the whole git checkout
me bar I thought was funny, but

20
00:00:57.321 --> 00:00:58.604
it also can be a pain.

21
00:00:58.604 --> 00:01:02.317
Anyways, so, we've now switched to bar,
we'll do a little quick change.

22
00:01:02.317 --> 00:01:05.927
Let me just make sure that this
is how we're gonna do this.

23
00:01:05.927 --> 00:01:06.747
Let's see.

24
00:01:06.747 --> 00:01:08.567
Create a single commit,
CHANGE FROM REMOTE, there we go.

25
00:01:08.567 --> 00:01:12.677
And we're gonna add it
to the end of README.

26
00:01:12.677 --> 00:01:15.967
So everyone do that,
add one line to the end of README in bar.

27
00:01:17.247 --> 00:01:24.804
So I'm gonna go vim README, go down here,
changes from remote, git status.

28
00:01:25.846 --> 00:01:30.215
Yeah, there's only one file changed,
git add, git commit, changes from remote,

29
00:01:30.215 --> 00:01:30.894
there we go.

30
00:01:32.244 --> 00:01:36.534
So now I can take this and
I can push it to my remote.

31
00:01:36.534 --> 00:01:42.702
I can go git push, and look at that,
we've just updated back bar in hello-git.

32
00:01:43.932 --> 00:01:48.833
If I switch over to hello-git and
go git log bar --oneline,

33
00:01:48.833 --> 00:01:51.292
you'll see this right here.

34
00:01:51.292 --> 00:01:57.222
It's been updated for us, cuz I pushed and
it changed it on the remote.

35
00:01:57.222 --> 00:02:00.367
So this should be pretty familiar to you,
because it's like you already do this with

36
00:02:00.367 --> 00:02:02.636
git hub a bunch, so
none of this should be a surprise.

37
00:02:02.636 --> 00:02:06.172
Probably, the only real surprising part
is the fact that it's just two folders on

38
00:02:06.172 --> 00:02:07.256
your computer, right?

39
00:02:08.966 --> 00:02:12.519
Again, folders, directories, I know,
windows, played Doom, loved Doom,

40
00:02:12.519 --> 00:02:13.526
Doom was a great game.

41
00:02:13.526 --> 00:02:17.721
So we pushed all the changes, we've logged
it out, we can see all the changes,

42
00:02:17.721 --> 00:02:20.861
a change from remote, so
that's pretty awesome, right?

43
00:02:23.092 --> 00:02:30.352
Now, you may be asking or questioning
this, why was bar moved forward for us?

44
00:02:32.352 --> 00:02:34.942
We fetched the results,
it didn't move our branches forward, but

45
00:02:34.942 --> 00:02:36.682
why wouldn't we push it to do it?

46
00:02:36.682 --> 00:02:37.862
Well, we're not checked out, right?

47
00:02:37.862 --> 00:02:39.832
That branch isn't checked out.

48
00:02:39.832 --> 00:02:43.434
We're not using that branch
in any sort of capacity and

49
00:02:43.434 --> 00:02:48.885
we're doing a push, which is analogous
to doing like a fetch and a merge.

50
00:02:48.885 --> 00:02:50.185
We're just doing it for them.

51
00:02:50.185 --> 00:02:54.054
And so that's what's happening on the
other side, it's fetching, it's merging,

52
00:02:54.054 --> 00:02:56.555
it's updating its reference for
bar, and there we go.

53
00:02:56.555 --> 00:02:59.055
It's like the opposite of pull.

54
00:02:59.055 --> 00:03:02.884
I'm gonna every now and then say the word
upstream instead of origin, upstream,

55
00:03:02.884 --> 00:03:05.961
that is just by accident,
old habits kind of die hard.

56
00:03:05.961 --> 00:03:09.151
When I say upstream I mean hello-git.

57
00:03:09.151 --> 00:03:12.738
So, when I say origin I mean hello-git,
cuz remember,

58
00:03:12.738 --> 00:03:15.878
we have a dependency of
remote get on hello-git,

59
00:03:15.878 --> 00:03:20.096
but hello-git doesn't have its
remote setup to remote, right?

60
00:03:20.096 --> 00:03:23.166
So it's a one-way relationship right now.

61
00:03:25.046 --> 00:03:28.756
So we're just gonna pretend
hello-git is github, for this case.

