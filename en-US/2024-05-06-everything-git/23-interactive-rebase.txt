[00:00:00]
>> I know this may be shocking, there's actually more with rebase, we can continue to rebase forever. So this one won't be as long of a part, it's not nearly as confusing, but we're still rebasing, okay? You can do a lot with rebase but I really have only ever used it to squash commits.

[00:00:19]
I don't use it to edit commit messages or to drop commits. I don't think I've ever dropped a commit in my lifetime. It's an option, just put d in there and it just drops it, but I've never actually done it. So there's a lot of options you just don't have to use them all, I always use it for squashing everything.

[00:00:35]
And so let's set up the repo with three just quick sample commits in the remote git. At the end of the README and just say, added one to the end of the line or something along that line. Whatever you wanna, however you wanna do just three quick one after another at the end.

[00:00:52]
So I'm just gonna go echo 1 to the end of README git add this git commit -m 1 to the end and then do it with 2. I can find myself wanting to write a little bash script to do it for me, but it's so small, but at the same time it just feels so right to automate this 3.

[00:01:11]
Do you guys ever have some sort of automation paralysis? Or instead of doing the thing that was three small commands sound I gotta write a bash script for this. I can't be spending time writing the same thing three times, it's ridiculous. Automation paralysis, real thing. All right, so there we go.

[00:01:27]
So if I go git log, oneLine -4, you can see one, two, three, then our A + 10. Okay, cool. We have these three new commits here. And now what we're gonna do is we are gonna use rebase interactive. So how rebase interactive works, is that you do a git rebase, you do an i and then you add a commitish.

[00:01:45]
A commitish is a commit or something like a

