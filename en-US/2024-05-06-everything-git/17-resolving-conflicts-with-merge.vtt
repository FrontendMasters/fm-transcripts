WEBVTT

1
00:00:00.100 --> 00:00:03.576
Beautiful.
Okay, so I have my remote Git set up, but

2
00:00:03.576 --> 00:00:09.094
now we got this call productions down,
there is a change you need to make,

3
00:00:09.094 --> 00:00:13.890
or there is a change you need to pull in,
from our upstream.

4
00:00:13.890 --> 00:00:18.550
So, we're going to attempt to
pull it in with an active change.

5
00:00:18.550 --> 00:00:19.610
So let's start there.

6
00:00:19.610 --> 00:00:22.444
So do a git pull with the, right here.

7
00:00:22.444 --> 00:00:27.631
Get pulled Wait a second by miss
one thing that it should say,

8
00:00:27.631 --> 00:00:28.843
hey, you don't do that.

9
00:00:28.843 --> 00:00:32.069
I think it's probably because I
have rebase automatically on, so

10
00:00:32.069 --> 00:00:35.640
I think I accidentally had my little
change in where I had rebased true, so

11
00:00:35.640 --> 00:00:38.256
I was causing a bit of a,
you cannot pull with rebase.

12
00:00:38.256 --> 00:00:40.859
So, oops daisies, right?

13
00:00:40.859 --> 00:00:43.528
And so since I have an active change,
it's not letting me do those changes,

14
00:00:43.528 --> 00:00:45.488
so whenever you try to pull and
you have active changes,

15
00:00:45.488 --> 00:00:47.339
it's gonna tell you, you can't do this.

16
00:00:47.339 --> 00:00:48.429
So we need to be able to stash.

17
00:00:48.429 --> 00:00:50.809
So we'll just go, we'll just go like this.

18
00:00:50.809 --> 00:00:55.844
We'll do another one of those
echo upstream change into here,

19
00:00:55.844 --> 00:00:59.375
git add this, git commit upstream change.

20
00:00:59.375 --> 00:01:00.518
There we go.

21
00:01:00.518 --> 00:01:02.968
We have the upstream change in hello.

22
00:01:02.968 --> 00:01:07.798
Now we go to the remote and we can go
echo downstream change into the read me.

23
00:01:07.798 --> 00:01:09.635
So now we have something in the read me,
and

24
00:01:09.635 --> 00:01:11.988
we have a change we
need to get from hello.

25
00:01:11.988 --> 00:01:13.828
What are we going to do now?

26
00:01:13.828 --> 00:01:15.798
We are gonna use stash, right?

27
00:01:15.798 --> 00:01:17.398
So this is what you do at this point.

28
00:01:17.398 --> 00:01:20.543
You'd wanna stash any of your changes
to prevent any errors from happening.

29
00:01:20.543 --> 00:01:24.267
And then you're gonna want to
be able to get the changes and

30
00:01:24.267 --> 00:01:27.393
you're gonna wanna be able to on stash,
right?

31
00:01:27.393 --> 00:01:30.603
So this is typically what
you're gonna want to do.

32
00:01:30.603 --> 00:01:35.043
So, right now before we do anything,
let's stash our changes.

33
00:01:37.353 --> 00:01:41.403
So you can experiment by going
git stash And then go git sets.

34
00:01:44.403 --> 00:01:46.203
Your changes are gone, right?

35
00:01:46.203 --> 00:01:47.453
Don't pull yet don't pull.

36
00:01:50.003 --> 00:01:51.633
You can view your stash list.

37
00:01:51.633 --> 00:01:55.487
This is a good kind of activity to get
into viewing your stash list because

38
00:01:55.487 --> 00:01:58.213
it's really nice to know
that you can even do that.

39
00:01:58.213 --> 00:02:02.100
So again, Git stash lists So
if you ever get into this, you will know.

40
00:02:02.100 --> 00:02:04.764
So we have this work in progress
that we've stored right here at this

41
00:02:04.764 --> 00:02:05.380
point in time.

42
00:02:05.380 --> 00:02:07.430
You can see, okay, it was at this commit.

43
00:02:07.430 --> 00:02:09.040
Not very informative though, right?

44
00:02:09.040 --> 00:02:12.458
When you look at this, you don't really
know what your stash changes are or

45
00:02:12.458 --> 00:02:13.240
anything.

46
00:02:13.240 --> 00:02:16.365
So we can go git stash show,
little bit nicer to see okay,

47
00:02:16.365 --> 00:02:19.875
this is the one where I made a change
to README, so a little bit nicer.

48
00:02:22.047 --> 00:02:23.437
Let's pop our stashes this time.

49
00:02:23.437 --> 00:02:27.337
And when we pop it, I wanna see
that it's now made that change.

50
00:02:27.337 --> 00:02:30.377
Git stash pop, there we go.

51
00:02:30.377 --> 00:02:32.047
Our change is back, it's right here.

52
00:02:33.447 --> 00:02:33.997
All right.

53
00:02:33.997 --> 00:02:39.287
Now let's stash our changes again, but
this time let's use a custom message.

54
00:02:39.287 --> 00:02:39.889
So go.

55
00:02:39.889 --> 00:02:42.169
Git stash with a message.

56
00:02:42.169 --> 00:02:43.329
Read me changes.

57
00:02:44.979 --> 00:02:45.579
There we go.

58
00:02:45.579 --> 00:02:47.839
We did a stash again, but
this time with a custom message.

59
00:02:47.839 --> 00:02:49.549
Now do git stash list.

60
00:02:50.749 --> 00:02:51.669
Now look at that.

61
00:02:51.669 --> 00:02:54.809
Isn't that a lot nicer to do
when you have a nice message.

62
00:02:54.809 --> 00:02:57.332
The reality is sometimes you
will have a couple stashes and

63
00:02:57.332 --> 00:03:00.214
you're not going to remember
what's in these stashes.

64
00:03:00.214 --> 00:03:03.832
And so just having a nice little friendly
message to yourself can just- it'll just

65
00:03:03.832 --> 00:03:07.191
save a lot of headaches rather than trying
to go through, get all the diffs and

66
00:03:07.191 --> 00:03:09.828
looking at each different one and
then realizing, gosh,

67
00:03:09.828 --> 00:03:11.634
there's the one I'm looking for.

68
00:03:11.634 --> 00:03:13.801
So now let's create another change and

69
00:03:13.801 --> 00:03:16.234
we'll stash that so
we have two in the list.

70
00:03:18.154 --> 00:03:19.464
Let's go another one.

71
00:03:19.464 --> 00:03:20.785
I'll just go.
Go bam readme and

72
00:03:20.785 --> 00:03:22.785
I'll just add another line.

73
00:03:22.785 --> 00:03:24.835
There we go.
DeVore echo by the way, and

74
00:03:24.835 --> 00:03:26.305
then I'll go git stash.

75
00:03:27.425 --> 00:03:28.215
Another change.

76
00:03:29.675 --> 00:03:31.835
So now I want to go git stash list.

77
00:03:31.835 --> 00:03:33.175
I'll actually see two changes.

78
00:03:33.175 --> 00:03:36.765
I have another change on top,
and the readme changes on bottom.

79
00:03:36.765 --> 00:03:39.355
So the readme changes is
the first set of changes we did.

80
00:03:39.355 --> 00:03:41.831
Another change is Is the second
set of changes we did.

81
00:03:41.831 --> 00:03:42.831
But notice it's on top.

82
00:03:42.831 --> 00:03:43.671
It's the first one.

83
00:03:44.771 --> 00:03:47.341
So let's pull in our upstream changes now.

84
00:03:47.341 --> 00:03:49.221
So I'm gonna go git pull.

85
00:03:49.221 --> 00:03:52.691
There we go.
I have this beautiful upstream change.

86
00:03:52.691 --> 00:03:56.191
Now let's get our original change back,
the first stash we did.

87
00:03:56.191 --> 00:04:00.098
Does anyone remember how you're
gonna get the first stash out?

88
00:04:00.098 --> 00:04:02.098
Not the second not the one we just added.

89
00:04:02.098 --> 00:04:04.458
But the first one is the index.

90
00:04:04.458 --> 00:04:05.118
Path index.

91
00:04:05.118 --> 00:04:05.878
There you go.

92
00:04:05.878 --> 00:04:09.682
So what you should be doing is going git
stash well first you can go git stash list

93
00:04:09.682 --> 00:04:12.578
make sure okay, I need to pull
out the first one right here.

94
00:04:12.578 --> 00:04:17.048
I can go git stash pop index one.

95
00:04:17.048 --> 00:04:18.792
And now we have that proper change.

96
00:04:18.792 --> 00:04:23.259
We We don't have the Dvorak one,
we have the downstream change.

97
00:04:23.259 --> 00:04:27.099
So working with stash, pretty easy to use.

98
00:04:27.099 --> 00:04:28.899
Now we have this beautiful change on top.

99
00:04:28.899 --> 00:04:29.399
Awesome.

100
00:04:30.949 --> 00:04:33.999
And if we want to, we can even commit it
if we want to, but stage is not changed.

101
00:04:33.999 --> 00:04:34.919
There we go.

102
00:04:34.919 --> 00:04:38.160
It looks like even in here, I commit it so
we will commit it with the exact same.

103
00:04:38.160 --> 00:04:40.771
Beautiful message that I have right here,

104
00:04:40.771 --> 00:04:45.080
let's see if that's coming from
terminal git add greatest change.

105
00:04:45.080 --> 00:04:45.730
Fantastic.

106
00:04:45.730 --> 00:04:47.100
There we go.

107
00:04:47.100 --> 00:04:48.694
So commit that into your code.

108
00:04:51.326 --> 00:04:55.059
That means your readme should
approximately look like that.

109
00:04:55.059 --> 00:04:57.150
I have a little space in here.

110
00:04:57.150 --> 00:05:01.233
It's not there's no
space In my example one,

111
00:05:01.233 --> 00:05:08.590
it's because my first commit contained
that, it's that one right there.

112
00:05:08.590 --> 00:05:10.630
See, look at that.

113
00:05:10.630 --> 00:05:13.910
I added a space, but in all my examples,
I didn't have the space.

114
00:05:13.910 --> 00:05:16.410
Very painful for me to see this,
that I can't believe I did that.

115
00:05:17.992 --> 00:05:21.810
By the way, if you don't know I
don't cover it in this course but

116
00:05:21.810 --> 00:05:26.056
dash s will search like your commit
message or search to commit change so

117
00:05:26.056 --> 00:05:28.462
you can look for changes that way.

118
00:05:28.462 --> 00:05:29.992
Very, very fantastic.

119
00:05:29.992 --> 00:05:31.222
So I knew where to find it.

120
00:05:31.222 --> 00:05:32.402
So I found it right away.

121
00:05:32.402 --> 00:05:34.192
Pretty neat stuff,
just in case you're wondering.

122
00:05:35.502 --> 00:05:36.552
Alright, so we're trees.

123
00:05:36.552 --> 00:05:37.885
We're going to talk about.

124
00:05:37.885 --> 00:05:42.668
This a little bit I believe, I'm not sure,
yeah, we're not talking about right now

125
00:05:42.668 --> 00:05:47.053
but we're gonna talk about a little bit
the thing that makes worktree so cool is

126
00:05:47.053 --> 00:05:51.385
that a worktree is a another copy of your
repo without all the weight of a repo.

127
00:05:51.385 --> 00:05:54.549
So if it takes you five minutes to
download your, to clone out a repo,

128
00:05:54.549 --> 00:05:58.932
you can build a worktree effectively just
as fast as you can build up The branch.

129
00:05:58.932 --> 00:06:01.382
They're very, very lightweight and
they're fantastic.

130
00:06:01.382 --> 00:06:05.332
So you can see why that could be
a very nice alternative to stash.

131
00:06:08.442 --> 00:06:10.152
All right, so
we're gonna do more rebasing.

132
00:06:10.152 --> 00:06:13.749
This will be the longest section here and
it's gonna have all the conflicts and

133
00:06:13.749 --> 00:06:15.612
everything and we're gonna go over it.

134
00:06:18.994 --> 00:06:19.864
It's going to take a little bit.

135
00:06:19.864 --> 00:06:25.564
So anyways, rebasing, you can do things
like this, where we start off here, right?

136
00:06:25.564 --> 00:06:28.214
E is branching off of A.

137
00:06:28.214 --> 00:06:30.064
This picture makes it looks
like it's branching off of B.

138
00:06:30.064 --> 00:06:32.814
I'm not sure which one I chose to
have it actually branch off of.

139
00:06:32.814 --> 00:06:33.704
It doesn't really matter.

140
00:06:33.704 --> 00:06:36.914
It branches off in the days of history,
way back then.

141
00:06:36.914 --> 00:06:38.589
And if you do a rebase you can make it so

142
00:06:38.589 --> 00:06:40.764
that it goes all the way to the front,
right?

143
00:06:40.764 --> 00:06:41.614
We all remember this.

144
00:06:41.614 --> 00:06:42.784
What are the steps that happen?

145
00:06:42.784 --> 00:06:46.304
Step one, we check out the branch
we're rebasing on step two.

146
00:06:46.304 --> 00:06:49.374
We play our commits one at
a time at the tip of the branch.

147
00:06:49.374 --> 00:06:54.360
We are rebasing on three we update the
branch we were on with the new position

148
00:06:54.360 --> 00:06:55.720
and the new commit.

149
00:06:55.720 --> 00:06:56.760
That's why it all.

150
00:06:56.760 --> 00:06:59.930
Alters histories because remember, it's
actually creating a new set of commits.

151
00:06:59.930 --> 00:07:03.360
'cause remember a commit,
it also contains time.

152
00:07:03.360 --> 00:07:05.660
So that's why you get new
commits when you rebase.

153
00:07:07.070 --> 00:07:07.860
All everyone's good.

154
00:07:07.860 --> 00:07:08.628
Everyone's good on that one.

155
00:07:08.628 --> 00:07:10.319
Awesome.

156
00:07:10.319 --> 00:07:12.538
All right.

157
00:07:12.538 --> 00:07:16.730
So first let's do a little bit of
interactive rebasing and squashing.

158
00:07:16.730 --> 00:07:17.330
So this part.

159
00:07:17.330 --> 00:07:20.845
Is where you'll do this pretty
much on your own branches,

160
00:07:20.845 --> 00:07:22.680
never on the public one.

161
00:07:22.680 --> 00:07:26.287
Interactive rebasing and
squashing allows you to take, say,

162
00:07:26.287 --> 00:07:28.871
this branch right here and
turn it into this,

163
00:07:28.871 --> 00:07:32.540
where it's a singular commit
as opposed to three commits.

164
00:07:32.540 --> 00:07:33.937
So that means while you're working,

165
00:07:33.937 --> 00:07:36.260
you can make all the commits you
want every single checkpoint.

166
00:07:36.260 --> 00:07:38.860
And then when you're done,
you Can take all those commits and

167
00:07:38.860 --> 00:07:40.660
turn it into one commit yourself.

168
00:07:40.660 --> 00:07:45.132
Now a lot of people do it to where they
have the remote like say GitHub will do

169
00:07:45.132 --> 00:07:47.310
an automatic squash merge for you.

170
00:07:47.310 --> 00:07:50.250
It will first take all of your
commits squashed into one and

171
00:07:50.250 --> 00:07:51.950
then merge it onto GitHub.

172
00:07:51.950 --> 00:07:55.233
That's a pretty common strategy that I've
seen, I know we do it with stash and

173
00:07:55.233 --> 00:07:56.440
stuff like that at Netflix.

174
00:07:56.440 --> 00:08:01.341
So I think most People probably
have some very similar experience.

175
00:08:01.341 --> 00:08:04.931
When you do interactive rebasing,
it also allows you to edit the message.

176
00:08:04.931 --> 00:08:08.243
So that way what I typically do is
I'll do each one of my commits and

177
00:08:08.243 --> 00:08:10.101
I'll start with squash me.

178
00:08:10.101 --> 00:08:12.641
So I can just look in the history and
go okay, where did I start?

179
00:08:12.641 --> 00:08:14.121
Okay, I started right here.

180
00:08:14.121 --> 00:08:17.779
rebase from right there, and then it's
very easy that I interacted Given

181
00:08:17.779 --> 00:08:21.319
that I can just erase all the messages and
give it a nice proper message,

182
00:08:21.319 --> 00:08:23.859
as opposed to a bunch of squash teammates,
right?

183
00:08:24.899 --> 00:08:27.980
And so we're going to create a, we're
gonna create some situations where we can

184
00:08:27.980 --> 00:08:30.609
interactively squash our commits,
and get some good messaging.

185
00:08:30.609 --> 00:08:32.419
There's a lot of ground to cover here.

186
00:08:32.419 --> 00:08:35.799
We're gonna go over conflicts as conflicts
are a very important part of this.

187
00:08:35.799 --> 00:08:40.064
If for whatever reason I've done steps
out of order and we're unable to create

188
00:08:40.064 --> 00:08:44.262
the conflict as easily we might have to
add some extra commits because that's

189
00:08:44.262 --> 00:08:47.426
part of the fun is that we didn't
do it right the first try so

190
00:08:47.426 --> 00:08:51.687
be very careful where we make changes
because from here on out we're going to be

191
00:08:51.687 --> 00:08:55.045
trying to make conflicts and
we all want to be on the same page so

192
00:08:55.045 --> 00:08:58.794
the first it is by the way
conflicts are The most ready topic.

193
00:08:58.794 --> 00:08:59.944
I hate them.

194
00:08:59.944 --> 00:09:01.194
I don't know why.

195
00:09:01.194 --> 00:09:04.434
I have an unreasonable amount of
anxiety every time I pull a gloomy, and

196
00:09:04.434 --> 00:09:07.512
there's going to be a conflict and
even though I know there's not,

197
00:09:07.512 --> 00:09:09.894
I still just feel like I'm
going to have a freak out.

198
00:09:09.894 --> 00:09:11.394
I don't know why it is.

199
00:09:11.394 --> 00:09:13.174
It just is that experience.

200
00:09:13.174 --> 00:09:14.104
Yeah, I hate them.

201
00:09:14.104 --> 00:09:15.284
You hate them.

202
00:09:15.284 --> 00:09:16.384
But it's good to know how to resolve them.

203
00:09:16.384 --> 00:09:16.941
Please, by the way.

204
00:09:17.942 --> 00:09:21.222
Don't use VS code don't use
fugitive it with Git or with Vim.

205
00:09:21.222 --> 00:09:22.972
Don't use any of those for this.

206
00:09:22.972 --> 00:09:25.742
Let's just manually edit the diffs.

207
00:09:25.742 --> 00:09:27.292
You want to see why they're doing this,

208
00:09:27.292 --> 00:09:30.082
to me very important,
specially with your knowledge of rebase.

209
00:09:30.082 --> 00:09:33.382
Why conflicts can be goofy
with rebase versus merge?

210
00:09:33.382 --> 00:09:36.643
We're gonna go through it all but
if you're not using the hand at it,

211
00:09:36.643 --> 00:09:40.146
you're just Using a program,
you may miss some of these subtle changes.

