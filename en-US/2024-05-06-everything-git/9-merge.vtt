WEBVTT

1
00:00:00.100 --> 00:00:02.290
With the previous section,
you should have this setup.

2
00:00:02.290 --> 00:00:03.670
Hopefully everyone has this setup.

3
00:00:03.670 --> 00:00:07.896
So now we're gonna need to do the exact
same thing to trunk, except for

4
00:00:07.896 --> 00:00:09.550
we want to have D and E.

5
00:00:09.550 --> 00:00:12.580
This time,
I do want you to edit the readme file.

6
00:00:12.580 --> 00:00:16.060
So the readme file will contain
three changes now A, D and E,

7
00:00:16.060 --> 00:00:19.008
then we'll have a second
file called second.md.

8
00:00:19.008 --> 00:00:20.903
That's only a on foo.

9
00:00:20.903 --> 00:00:24.723
So, to be able to make these changes,
you first have to checkout trunk.

10
00:00:24.723 --> 00:00:28.413
Now you need to make these changes
one at a time on the trunk.

11
00:00:28.413 --> 00:00:31.523
So I'll use the identical process here.

12
00:00:31.523 --> 00:00:35.459
I'll do D and this is gonna go to README.

13
00:00:35.459 --> 00:00:37.143
I will add it.

14
00:00:37.143 --> 00:00:40.431
I'll commit it with the message D,
very important to do that.

15
00:00:40.431 --> 00:00:46.315
I will now add the next commit which
is gonna be E, add it to README,

16
00:00:46.315 --> 00:00:51.451
stage it and
then commit it with the same message.

17
00:00:51.451 --> 00:00:54.188
So now if I were to do a git log,
I'll do one line this time.

18
00:00:54.188 --> 00:00:59.653
You will see trunk points to E,
which has D and A in the past.

19
00:00:59.653 --> 00:01:00.913
I can actually use git.

20
00:01:00.913 --> 00:01:03.974
Do you know you can use git log with
a with a branch name so I can do foo.

21
00:01:03.974 --> 00:01:06.664
And you'll see foo C, B, A.

22
00:01:06.664 --> 00:01:10.494
Perfect, so we have these two setups now,
I can see trunk is correct.

23
00:01:10.494 --> 00:01:14.074
I can see foo is correct and
I have this setup right here.

24
00:01:14.074 --> 00:01:16.644
So now it's time to merge
these two together.

25
00:01:17.764 --> 00:01:20.231
There's actually two
different ways you can do it.

26
00:01:20.231 --> 00:01:23.566
There's merge and there's rebase,
we'll go over rebase at some point, but

27
00:01:23.566 --> 00:01:25.195
we're gonna start first with merge.

28
00:01:25.195 --> 00:01:29.557
Now remember, a commit is just a set
of changes in the entire code base at

29
00:01:29.557 --> 00:01:31.170
a specific point in time.

30
00:01:31.170 --> 00:01:35.536
And if you have work on one branch and
you get it over to another branch,

31
00:01:35.536 --> 00:01:37.090
we're gonna use merge.

32
00:01:37.090 --> 00:01:41.410
Now, the thing about merge that's a little
bit confusing is that when you use merge,

33
00:01:41.410 --> 00:01:43.536
you can have two different outcomes.

34
00:01:43.536 --> 00:01:46.693
You can have one that has a merge commit
and one that doesn't have a merge commit.

35
00:01:46.693 --> 00:01:50.207
And you probably experienced this where
sometimes you merge and you have to input

36
00:01:50.207 --> 00:01:53.576
a message and then sometimes you merge and
you don't have to input a message.

37
00:01:53.576 --> 00:01:57.456
And there's a very specific reason
why it depends on your history.

38
00:01:57.456 --> 00:01:59.104
We'll go over that in just a little bit,

39
00:01:59.104 --> 00:02:01.510
we'll create the two
situations which exist.

40
00:02:01.510 --> 00:02:03.240
What is a merge?

41
00:02:03.240 --> 00:02:06.009
A merge is just attempting to
combine two histories that may or

42
00:02:06.009 --> 00:02:07.500
may not have diverged.

43
00:02:07.500 --> 00:02:09.319
Diverging means like how we set it up.

44
00:02:09.319 --> 00:02:14.346
A is in the past and we both share A,
but there could be zero or

45
00:02:14.346 --> 00:02:19.091
more commits in both branches
that cause us to diverge.

46
00:02:19.091 --> 00:02:24.112
Now, whatever you are merging get used to
something called the best common ancestor,

47
00:02:24.112 --> 00:02:27.029
which is gonna be
the first in common commit.

48
00:02:27.029 --> 00:02:32.330
So for us, we have A, B, C and we have A,
D, E, A is the best common ancestor.

49
00:02:32.330 --> 00:02:35.539
In the docs, you'll often see it's
called the merge base, and so really,

50
00:02:35.539 --> 00:02:37.510
it's just the first
thing that's in common.

51
00:02:37.510 --> 00:02:40.237
So if you were to walk up the tree,
if you were to think about it,

52
00:02:40.237 --> 00:02:43.753
you having to write this algorithm,
you literally start at each commit.

53
00:02:43.753 --> 00:02:46.593
And you just keep on walking
the parents with a hashmap.

54
00:02:46.593 --> 00:02:49.716
By the way, you'd wanna use
a hash map here on ironically.

55
00:02:49.716 --> 00:02:54.309
You'd use a hash map to contain or it's
really a set to contain all the commits

56
00:02:54.309 --> 00:02:59.329
you've seen up to this point and the first
time you have something that is in common,

57
00:02:59.329 --> 00:03:02.448
you've just found
the best common ancestor.

58
00:03:02.448 --> 00:03:03.588
Funny enough, it's always a hashmap.

59
00:03:03.588 --> 00:03:06.068
I don't know why, but
it's just always this.

60
00:03:06.068 --> 00:03:11.053
And so, git then takes these two commits
that you have, checks out the merge base

61
00:03:11.053 --> 00:03:16.037
or the best common ancestor, then plays
those commits on top of it, creates a new

62
00:03:16.037 --> 00:03:21.164
commit called a merge commit, and
that will actually have two parents.

63
00:03:21.164 --> 00:03:25.787
You'll have one parent from one branch and
one parent from another branch, and

64
00:03:25.787 --> 00:03:27.574
that is a merge commit.

65
00:03:27.574 --> 00:03:30.779
This happens, that's what you'll get
a message cuz you have two different

66
00:03:30.779 --> 00:03:32.814
diverging branches, so we'll go over that.

67
00:03:32.814 --> 00:03:33.836
Here we go, all right?

68
00:03:33.836 --> 00:03:35.272
So, how to merge very, very easy.

69
00:03:35.272 --> 00:03:38.625
You have a target branch,
which is the branch you are on and

70
00:03:38.625 --> 00:03:40.138
you have a source branch.

71
00:03:40.138 --> 00:03:41.995
The one you wish to merge with, and

72
00:03:41.995 --> 00:03:45.665
the source branch is gonna be
the one that you provide the name.

73
00:03:45.665 --> 00:03:46.860
This is how I think about it at least.

74
00:03:46.860 --> 00:03:50.225
I think this is probably
the the easiest way to think of it.

75
00:03:50.225 --> 00:03:52.975
And so you'll do git merge
the branch you wish to bring onto

76
00:03:52.975 --> 00:03:54.445
the one you're currently on.

77
00:03:55.855 --> 00:03:57.345
So let's do it now.

78
00:03:57.345 --> 00:04:02.046
Let's merge foo onto trunk, but
remember we don't want to ruin our current

79
00:04:02.046 --> 00:04:06.756
trunk state, so I want you to check
out a branch called trunk-merge-foo.

80
00:04:09.267 --> 00:04:15.619
So, I'm gonna go git
checkout trunk-merge-foo.

81
00:04:15.619 --> 00:04:16.847
Have my new branch,

82
00:04:16.847 --> 00:04:21.459
remember- b just creates a new branch
if it doesn't exist or, awesome.

83
00:04:21.459 --> 00:04:23.589
So now I'm gonna go git-merge-foo.

84
00:04:25.029 --> 00:04:27.963
There we go.
We'll present this menu saying, hey,

85
00:04:27.963 --> 00:04:30.719
we need you to merge this together.

86
00:04:30.719 --> 00:04:32.389
We want you to add a commit message.

87
00:04:32.389 --> 00:04:35.949
It's been auto merged for you, but
we still need a commit message.

88
00:04:37.189 --> 00:04:39.115
Remember, a commit is a series of changes.

89
00:04:40.196 --> 00:04:45.074
That represents the entire state of the
repo, plus an author, plus a message and

90
00:04:45.074 --> 00:04:46.236
time as well.

91
00:04:46.236 --> 00:04:49.556
You probably see something like this,
merge made by ort strategy.

92
00:04:50.886 --> 00:04:51.780
That's relatively new.

93
00:04:51.780 --> 00:04:55.105
I think at one point it used to say
like a three-way commit strategy, and

94
00:04:55.105 --> 00:04:57.456
now it's changed into the ort strategy.

95
00:04:57.456 --> 00:05:00.281
All right, so when we're done,
I want you to use git.log.

96
00:05:00.281 --> 00:05:04.082
So everyone that has just merged,
use git.log and see what happens.

97
00:05:04.082 --> 00:05:06.899
And I also want you to use the term
parents when you do git.log or git.log.

98
00:05:06.899 --> 00:05:11.549
When you do git log I
want you to add--parents.

99
00:05:11.549 --> 00:05:15.649
So show the parent commits
along with everything.

100
00:05:15.649 --> 00:05:19.394
So I'm gonna git log
--oneline --graph --parents.

101
00:05:22.957 --> 00:05:29.174
So you can see right here
the merge commit has two parents.

102
00:05:29.174 --> 00:05:33.712
If you look at this ID this
sha you'll realize this is

103
00:05:33.712 --> 00:05:37.641
trunk where trunk is
currently pointing to.

104
00:05:38.755 --> 00:05:42.715
When you look at this one, this is
where foo is currently pointing to.

105
00:05:42.715 --> 00:05:48.085
This is C, this is E.

106
00:05:48.085 --> 00:05:49.359
And then now, with the graph,

107
00:05:49.359 --> 00:05:52.308
it's able to draw this nice graph
because it has all that information.

108
00:05:52.308 --> 00:05:55.415
It's able to walk back the graph and
be able to display it for you so

109
00:05:55.415 --> 00:05:57.812
you can actually see in
line what is happening.

110
00:05:57.812 --> 00:06:00.652
So there you go,
that's pretty neat, right?

111
00:06:00.652 --> 00:06:03.288
By the way, log, totally underrated.

112
00:06:03.288 --> 00:06:07.082
Super cool, super cool utility to
kinda know some of the things to use.

113
00:06:07.082 --> 00:06:10.342
All right, so now I want you to
create the following git setup.

114
00:06:10.342 --> 00:06:15.062
I want you to check out trunk, then I want
you to check out a new branch called bar,

115
00:06:15.062 --> 00:06:18.015
and I want you to add two commits,
X and Y.

116
00:06:18.015 --> 00:06:22.673
And X and Y, please put
the changes into a bar.md file or

117
00:06:22.673 --> 00:06:26.161
just some other file that's not README.

118
00:06:26.161 --> 00:06:28.493
I used bar.md.

119
00:06:31.001 --> 00:06:33.724
So I'll do it with you,

120
00:06:33.724 --> 00:06:38.773
git checkout trunk, git checkout -b bar.

121
00:06:38.773 --> 00:06:44.218
I'm gonna echo in x into bar.md.

122
00:06:44.218 --> 00:06:45.490
I'm gonna add it.

123
00:06:45.490 --> 00:06:46.538
I'm gonna commit it.

124
00:06:46.538 --> 00:06:49.287
I'm gonna do it again with y.

125
00:06:53.174 --> 00:06:55.356
All right, so
we've now created this right here.

126
00:06:55.356 --> 00:06:57.228
It's pretty straightforward.

127
00:06:57.228 --> 00:07:01.052
All you have to do is just checkout bar,
add the two commits.

128
00:07:01.052 --> 00:07:04.912
This is almost identical to what I just
got done doing on the screen pretty easy.

129
00:07:04.912 --> 00:07:06.075
So we should now have
the exact same thing.

130
00:07:06.075 --> 00:07:08.724
We should be able to use git log to
see that we've done this correctly.

131
00:07:08.724 --> 00:07:09.881
So I'll do it right now.

132
00:07:09.881 --> 00:07:14.053
And we'll use the exact same git log, that
we're always using with one line and we

133
00:07:14.053 --> 00:07:18.650
can erase parents who don't really need to
know parents, but you can see here, bar.

134
00:07:18.650 --> 00:07:20.220
Is that Y trunk?

135
00:07:20.220 --> 00:07:20.990
Is that E?

136
00:07:22.030 --> 00:07:26.028
Can you say anything that's unique about
the situation that wasn't unique in foo or

137
00:07:26.028 --> 00:07:27.840
that was different foo, shall I say?

138
00:07:29.200 --> 00:07:32.551
What's different between this setup
versus what was done with foo and trunk?

139
00:07:32.551 --> 00:07:35.915
Foo and trunk, both diverged,

140
00:07:35.915 --> 00:07:42.322
in this situation bar is
the only one that has diverged.

141
00:07:42.322 --> 00:07:46.692
Its best common ancestor
is the tip of trunk.

142
00:07:48.892 --> 00:07:53.412
It's very important thing to remember or
to observe, shall we say.

143
00:07:53.412 --> 00:07:56.682
So now let's merge bar onto trunk.

144
00:07:56.682 --> 00:08:00.260
So do the exact same thing and this
time we do not create a separate branch,

145
00:08:00.260 --> 00:08:03.280
just checkout trunk and merge bar onto it.

146
00:08:03.280 --> 00:08:06.655
So I'm gonna go git checkout trunk,
git merge bar.

147
00:08:10.438 --> 00:08:13.830
And you'll notice this time
there's no commit message.

148
00:08:13.830 --> 00:08:14.940
Why is there no commit message?

149
00:08:16.430 --> 00:08:22.368
Again, the best common ancestor was the
tip of the branch you are merging onto,

150
00:08:22.368 --> 00:08:27.877
which means that it can just take
the commits and just update the pointer.

151
00:08:27.877 --> 00:08:29.638
That's all,
it doesn't have to do any sort of merging.

152
00:08:29.638 --> 00:08:30.810
It already works.

153
00:08:30.810 --> 00:08:32.605
You've already resolved any conflict.

154
00:08:32.605 --> 00:08:35.462
It can just simply fast forward the merge.

155
00:08:35.462 --> 00:08:38.555
So you'll often see in
the documentation where says,

156
00:08:38.555 --> 00:08:42.928
ff-merge It literally means you have
a linear history with no divergence and

157
00:08:42.928 --> 00:08:46.373
you can just simply take the commits and
update the pointer.

