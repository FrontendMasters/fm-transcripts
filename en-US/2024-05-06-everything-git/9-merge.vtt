WEBVTT

1
00:00:00.090 --> 00:00:02.290
With the previous section,
you should have this setup.

2
00:00:02.290 --> 00:00:03.670
Hopefully everyone has this setup.

3
00:00:03.670 --> 00:00:07.896
So now we're gonna need to do the exact
same thing to trunk, except for

4
00:00:07.896 --> 00:00:09.540
we want to have D and E.

5
00:00:09.540 --> 00:00:12.580
This time,
I do want you to edit the README file.

6
00:00:12.580 --> 00:00:17.230
So the README file will contain
three changes now, A, D, and E.

7
00:00:17.230 --> 00:00:20.923
Then we'll have a second file called
second.md that's only on foo.

8
00:00:20.923 --> 00:00:23.923
So, to be able to make these changes,
you first have to check out trunk.

9
00:00:25.193 --> 00:00:28.413
Now you need to make these
changes one at a time onto trunk.

10
00:00:28.413 --> 00:00:31.523
So I'll use the identical process here.

11
00:00:31.523 --> 00:00:33.723
I'll do D and this is gonna go to ReadMe.

12
00:00:33.723 --> 00:00:37.143
I will add it.

13
00:00:37.143 --> 00:00:40.611
I'll commit it with the message D,
very important Important to do that.

14
00:00:40.611 --> 00:00:46.273
I will now add the next commit which
is gonna be E, add it to ReadMe,

15
00:00:46.273 --> 00:00:51.421
stage it, and
then commit it with the same message.

16
00:00:51.421 --> 00:00:55.341
So now if I were to do a git log,
I'll do one line this time,

17
00:00:55.341 --> 00:00:59.362
you'll see trunk points to E,
which has D and A in the past.

18
00:00:59.362 --> 00:01:03.314
Did you know you can use git
log with the branch name?

19
00:01:03.314 --> 00:01:07.034
So I can do foo, and
you'll see foo CBA, perfect.

20
00:01:07.034 --> 00:01:09.114
So we have these two setups now.

21
00:01:09.114 --> 00:01:10.494
I can see trunk is correct.

22
00:01:10.494 --> 00:01:11.774
I can see foo is correct.

23
00:01:11.774 --> 00:01:14.074
And I have this setup right here.

24
00:01:14.074 --> 00:01:16.654
So now it's time to merge
these two together.

25
00:01:17.764 --> 00:01:20.378
There's actually two
different ways you can do it.

26
00:01:20.378 --> 00:01:21.518
There's Merge and there's Rebase.

27
00:01:21.518 --> 00:01:25.578
We'll go over Rebase at some point, but
we're gonna start first with Merge.

28
00:01:25.578 --> 00:01:29.658
Now remember, a commit is just a set
of changes in the entire code base at

29
00:01:29.658 --> 00:01:32.138
a specific point in time.

30
00:01:32.138 --> 00:01:36.197
And if you have work on one branch and
you need to get it over to another branch,

31
00:01:36.197 --> 00:01:37.518
we're gonna use merge.

32
00:01:37.518 --> 00:01:41.316
Now, the thing about merge that's a little
bit confusing is that when you use merge,

33
00:01:41.316 --> 00:01:43.546
you can have kind of
two different outcomes.

34
00:01:43.546 --> 00:01:46.966
You can have one that has a merge commit
and one that doesn't have a merge commit.

35
00:01:46.966 --> 00:01:50.382
And you've probably experienced this where
sometimes you merge and you have to input

36
00:01:50.382 --> 00:01:53.576
a message, and then sometimes you merge
and you don't have to input a message.

37
00:01:53.576 --> 00:01:57.456
And there's a very specific reason why,
because it depends on your history.

38
00:01:57.456 --> 00:01:58.876
We'll go over that in just a little bit.

39
00:01:58.876 --> 00:02:01.690
We'll create the two
situations which exit.

40
00:02:01.690 --> 00:02:03.230
So what is a merge?

41
00:02:03.230 --> 00:02:06.003
A merge is just attempting to
combine two histories that may or

42
00:02:06.003 --> 00:02:07.500
may not have diverged.

43
00:02:07.500 --> 00:02:09.660
Diverging means how we set it up.

44
00:02:09.660 --> 00:02:13.872
A is in the past and we both share A,
but there could be zero or

45
00:02:13.872 --> 00:02:17.850
more commits in both branches
that cause us to diverge.

46
00:02:19.610 --> 00:02:24.289
Now, whatever you are merging, git uses
something called the best common ancestor,

47
00:02:24.289 --> 00:02:27.029
which is gonna be
the first in common commit.

48
00:02:27.029 --> 00:02:30.759
So for us, we have ABC and we have ADE.

49
00:02:30.759 --> 00:02:32.619
A is the best common ancestor.

50
00:02:32.619 --> 00:02:35.679
In the docs, you'll often see
it's called the merge base.

51
00:02:35.679 --> 00:02:37.739
And so really it's just the first
thing that's in common.

52
00:02:37.739 --> 00:02:40.577
So if you were to walk up the tree,
if you were to think about it,

53
00:02:40.577 --> 00:02:43.955
you having to write this algorithm,
you literally start at each commit and

54
00:02:43.955 --> 00:02:46.444
you just keep on walking
the parents with the hash map.

55
00:02:46.444 --> 00:02:49.203
By the way, you'd wanna use
a hash map here unironically.

56
00:02:49.203 --> 00:02:53.004
You'd use a hash map to contain, or really
a set, to contain all the things you've

57
00:02:53.004 --> 00:02:56.173
seen up to this point, all the commits
you've seen up to this point.

58
00:02:56.173 --> 00:02:59.167
And the first time you have
something that is in common,

59
00:02:59.167 --> 00:03:02.448
you know you've just found
the best common ancestor.

60
00:03:02.448 --> 00:03:03.878
Funny enough, it's always a hash map.

61
00:03:03.878 --> 00:03:05.688
I don't know why, but it just always is.

62
00:03:05.688 --> 00:03:10.515
Anyways, git then takes these two commits
that you have, checks out the merge

63
00:03:10.515 --> 00:03:14.992
base or the best common ancestor,
then plays those commits on top of it.

64
00:03:14.992 --> 00:03:17.883
Creates a new commit
called a merge commit, and

65
00:03:17.883 --> 00:03:20.284
that will actually have two parents.

66
00:03:20.284 --> 00:03:23.115
You'll have one parent from one branch and

67
00:03:23.115 --> 00:03:27.134
one parent from another branch,
and that is a merge commit.

68
00:03:27.134 --> 00:03:28.082
And so this happens,

69
00:03:28.082 --> 00:03:32.184
that's what you'll get a message because
you have two different diverging branches.

70
00:03:32.184 --> 00:03:34.165
So we'll go over that,
here we go, all right?

71
00:03:34.165 --> 00:03:35.574
So how to merge very, very easy.

72
00:03:35.574 --> 00:03:39.047
You have a target branch,
which is the branch you are on.

73
00:03:39.047 --> 00:03:42.945
And you have a source branch,
the one you wish to merge with.

74
00:03:42.945 --> 00:03:45.665
And the source branch is gonna be
the one that you provide the name.

75
00:03:45.665 --> 00:03:47.387
This is how I think about it at least,

76
00:03:47.387 --> 00:03:50.225
I think this is probably
the easiest way to think of it.

77
00:03:50.225 --> 00:03:52.054
And so you'll do git merge,

78
00:03:52.054 --> 00:03:56.465
the branch you wish to bring onto
the one you're currently on.

79
00:03:56.465 --> 00:03:57.345
So, let's do it now.

80
00:03:57.345 --> 00:03:59.735
Let's merge foo onto trunk.

81
00:03:59.735 --> 00:04:03.449
But remember we don't want to
ruin our current trunk state.

82
00:04:03.449 --> 00:04:06.912
So I want you to check out
a branch called trunk-merge-foo.

83
00:04:08.766 --> 00:04:16.239
So I'm gonna go git check out,
trunk-merge- foo have my new branch.

84
00:04:16.239 --> 00:04:19.544
Remember, -b just creates a new
branch if it doesn't exist.

85
00:04:19.544 --> 00:04:23.097
Awesome, so
now I'm gonna go git-merge-foo.

86
00:04:23.097 --> 00:04:27.405
There we go,
well presented this menu saying, hey,

87
00:04:27.405 --> 00:04:30.719
we need you to merge this together.

88
00:04:30.719 --> 00:04:32.389
We want you to add a commit message.

89
00:04:32.389 --> 00:04:36.939
It's been auto merged for you, but
we still need a commit message.

90
00:04:36.939 --> 00:04:41.728
Because remember, a commit is a series
of changes that represents the entire

91
00:04:41.728 --> 00:04:46.236
state of the repo, plus an author,
plus a message and time as well.

92
00:04:46.236 --> 00:04:50.289
You probably see something like
this merge made by Ort strategy,

93
00:04:50.289 --> 00:04:51.916
that's relatively new.

94
00:04:51.916 --> 00:04:55.244
I think at one point it was, it used to
say like a three way commit strategy, and

95
00:04:55.244 --> 00:04:57.026
now it's changed into the ORT strategy.

96
00:04:57.026 --> 00:04:58.686
I don't know when that change happened.

97
00:04:58.686 --> 00:05:00.537
I don't know what Ort stands for.

98
00:05:00.537 --> 00:05:03.455
I should have probably read that,
but I just didn't.

99
00:05:03.455 --> 00:05:07.744
I know I read it up and what was like
different about it but well, here we are,

100
00:05:07.744 --> 00:05:10.975
the old ORT strategy,
the one we're all familiar with.

101
00:05:10.975 --> 00:05:12.825
It's practically like a HashMap.

102
00:05:12.825 --> 00:05:15.743
All right, so when we're done
I want you to use git.log, so

103
00:05:15.743 --> 00:05:19.021
everyone that has just merged,
use git.log and see what happens.

104
00:05:19.021 --> 00:05:24.951
And I also want you to use the term
parents when you do git.log.

105
00:05:24.951 --> 00:05:27.401
When you do git.log,
I want you to add- - parents.

106
00:05:27.401 --> 00:05:31.011
So let's show the parents
commits along with everything.

107
00:05:31.011 --> 00:05:35.041
So I'm gonna go git.log &gt;
one line &gt; graph &gt; parents.

108
00:05:38.641 --> 00:05:44.526
So you can see right here,
the merge commit has two parents.

109
00:05:44.526 --> 00:05:49.842
If you look at this ID, the sha,
you'll realize this is trunk,

110
00:05:49.842 --> 00:05:53.096
where trunk is currently pointing to.

111
00:05:54.106 --> 00:05:58.056
When you look at this one, this is
where foo is currently pointing to.

112
00:05:58.056 --> 00:06:00.229
This is C.

113
00:06:00.229 --> 00:06:03.429
So this is E.

114
00:06:03.429 --> 00:06:04.735
And then now with the graph,

115
00:06:04.735 --> 00:06:08.015
it's able to draw this nice graph
because it has all that information.

116
00:06:08.015 --> 00:06:11.040
It's able to walk back the graph and
be able to display for you, so

117
00:06:11.040 --> 00:06:14.059
you can actually see in
line what is happening.

118
00:06:14.059 --> 00:06:14.798
So there you go.

119
00:06:14.798 --> 00:06:15.999
That's pretty neat, right?

120
00:06:15.999 --> 00:06:19.501
By the way, log totally underrated,
super cool.

121
00:06:19.501 --> 00:06:22.854
Super cool utility to kinda know some
of the things to use, all right?

122
00:06:22.854 --> 00:06:25.691
So, now I want you to create
the following git set up.

123
00:06:25.691 --> 00:06:30.498
I want you to check out trunk, then I want
you to check out a new branch called bar,

124
00:06:30.498 --> 00:06:33.791
and I want you to add two commits X and Y.

125
00:06:33.791 --> 00:06:39.618
And X and Y, please put the changes into
a bar.md file, or just some other file.

126
00:06:40.759 --> 00:06:41.507
That's not readme.

127
00:06:41.507 --> 00:06:44.189
I used bar.nb.

128
00:06:46.689 --> 00:06:51.729
I'll do it with you, git checkout trunk,

129
00:06:51.729 --> 00:06:54.419
git checkout-b bar.

130
00:06:54.419 --> 00:06:58.364
I'm gonna echo in X into bar.md.

131
00:06:58.364 --> 00:07:00.884
And I'm gonna add it.

132
00:07:00.884 --> 00:07:01.444
I'm gonna commit it.

133
00:07:02.614 --> 00:07:04.254
And I'm going to do it again with Y.

134
00:07:07.362 --> 00:07:11.154
All right, anyway, so
we've now created this right here.

135
00:07:11.154 --> 00:07:12.534
It's pretty straightforward.

136
00:07:12.534 --> 00:07:16.404
All you have to do is just check out bar,
add the two commits.

137
00:07:16.404 --> 00:07:19.442
This is almost identical to what I
just got done doing on the screen.

138
00:07:19.442 --> 00:07:20.252
Pretty easy.

139
00:07:20.252 --> 00:07:21.662
So we should now have
the exact same thing.

140
00:07:21.662 --> 00:07:24.552
We should be able to use git log to
see that we've done this correctly.

141
00:07:24.552 --> 00:07:25.432
So I'll do it right now.

142
00:07:25.432 --> 00:07:28.587
And we'll use the exact same git log
that we're always using with one line.

143
00:07:28.587 --> 00:07:31.442
And we can erase parents who don't
really need to know parents.

144
00:07:31.442 --> 00:07:34.784
But you can see here, bar is that Y?

145
00:07:34.784 --> 00:07:36.362
Trunk, is that E?

146
00:07:37.382 --> 00:07:41.596
Can you say anything that's unique about
the situation that wasn't unique in foo,

147
00:07:41.596 --> 00:07:43.746
or that was different in foo, shall I say?

148
00:07:43.746 --> 00:07:47.647
What's different between this setup
versus what was done with foo and trunk?

149
00:07:48.677 --> 00:07:51.927
Foo and trunk both diverged.

150
00:07:53.857 --> 00:07:57.677
In this situation,
bar is the only one that has diverged.

151
00:07:57.677 --> 00:08:02.031
Its best common ancestor
is the tip of trunk.

152
00:08:04.231 --> 00:08:08.761
It's a very important thing to remember or
to observe, shall we say.

153
00:08:08.761 --> 00:08:12.031
So now let's merge bar onto trunk.

154
00:08:12.031 --> 00:08:13.341
So do the exact same thing.

155
00:08:13.341 --> 00:08:16.775
And this time we do not create a separate
branch, just check out trunk and

156
00:08:16.775 --> 00:08:18.631
merge bar onto it.

157
00:08:18.631 --> 00:08:21.820
So I'm gonna go get check out trunk,
git &gt; merge &gt; bar.

158
00:08:26.080 --> 00:08:29.180
And you'll notice this time,
there's no commit message.

159
00:08:29.180 --> 00:08:30.290
Why is there no commit message?

160
00:08:31.770 --> 00:08:37.801
Again, the best common ancestor was the
tip of the branch you were merging onto,

161
00:08:37.801 --> 00:08:43.384
which means that it can just take
the commits and just update the pointer.

162
00:08:43.384 --> 00:08:46.444
That's all, it doesn't have to do any
sort of merging, it already works.

163
00:08:46.444 --> 00:08:51.094
You've already resolved any conflict,
it can just simply fast forward the merge.

164
00:08:51.094 --> 00:08:54.617
So you'll often see in
the documentation where says ff- merge,

165
00:08:54.617 --> 00:08:58.544
it literally means you have a linear
history with no divergence.

166
00:08:58.544 --> 00:09:01.373
And you can just simply take
the commits and update the pointer.

