WEBVTT

1
00:00:00.090 --> 00:00:02.790
This is pretty much the 80%
of you'll do with Git.

2
00:00:02.790 --> 00:00:07.610
If this is all you ever learn about Git,
you'll be moderately successful.

3
00:00:07.610 --> 00:00:12.658
Like you can get pretty dang far
knowing about Git add path to file or

4
00:00:12.658 --> 00:00:16.460
a file pattern,
Git commit dash M and Git status.

5
00:00:16.460 --> 00:00:19.601
If you can just know those three commands,
you're already doing pretty dang good,

6
00:00:19.601 --> 00:00:20.140
okay, okay?

7
00:00:20.140 --> 00:00:24.920
So, git add will stage the file,
it will add it to the index.

8
00:00:24.920 --> 00:00:28.284
Git commit will take your staged file,
index file, and

9
00:00:28.284 --> 00:00:31.360
then turn it into a commit,
with your author name,

10
00:00:31.360 --> 00:00:36.029
the time, the contents of the change,
all that and we'll produce out a SHA.

11
00:00:36.029 --> 00:00:38.254
Did you just know that SHA stands for
Secure Hashing Algorithm?

12
00:00:38.254 --> 00:00:39.956
Isn't that kinda disappointing?

13
00:00:41.417 --> 00:00:43.597
It's a variant of MD5.

14
00:00:43.597 --> 00:00:44.218
Either way,

15
00:00:44.218 --> 00:00:48.677
it is always disappointing to know that
SHA means Secure Hashing Algorithm.

16
00:00:48.677 --> 00:00:52.122
And then Git status will just say,
here's the state of your repo.

17
00:00:54.138 --> 00:00:55.567
All right, problem.

18
00:00:55.567 --> 00:00:59.207
We want to trace the steps of
Git from untrack to tracked.

19
00:00:59.207 --> 00:01:01.816
Don't forget these ones right here.

20
00:01:01.816 --> 00:01:02.856
This is what I want you to do.

21
00:01:02.856 --> 00:01:04.726
I want you to create
a file called first.md.

22
00:01:04.726 --> 00:01:07.666
I want you to check the status of Git.

23
00:01:07.666 --> 00:01:11.276
Then I want you to add
first.md to the staging area,

24
00:01:11.276 --> 00:01:14.889
recheck the status,
see that it's being tracked,

25
00:01:14.889 --> 00:01:19.670
commit it with a friendly message,
and then check the status again.

26
00:01:22.712 --> 00:01:27.090
If you're pretty good with Git already,
you already know these basic commands,

27
00:01:27.090 --> 00:01:30.336
please just create a commit
really quickly with first.md.

28
00:01:30.336 --> 00:01:32.141
We're gonna use it and
we're gonna do something.

29
00:01:32.141 --> 00:01:33.511
All right, I'll start doing it right now.

30
00:01:33.511 --> 00:01:34.921
So I'm gonna jump over here.

31
00:01:34.921 --> 00:01:39.737
I'm gonna go to first.md, I'll go
hello fem, there we go, Git status,

32
00:01:39.737 --> 00:01:42.495
you'll see right here, untracked file.

33
00:01:42.495 --> 00:01:44.723
Git has no idea anything about this file.

34
00:01:44.723 --> 00:01:47.340
First time it's ever seen it.

35
00:01:47.340 --> 00:01:49.470
It doesn't have any information about it.

36
00:01:49.470 --> 00:01:54.170
If I go Git add this, and then redo it,
you'll see now we are tracking it.

37
00:01:54.170 --> 00:01:56.618
It's officially a part
of the Git ecosystem,

38
00:01:56.618 --> 00:02:00.633
but only on a singular level, meaning
that it's only a part of the staging,

39
00:02:00.633 --> 00:02:04.113
it has no prior information besides for
staging.

40
00:02:04.113 --> 00:02:09.383
If I go git commit -m,
friendly message, look how nice that is.

41
00:02:09.383 --> 00:02:13.114
It's gonna tell me, hey, this is the first
commit of the repo, the root commit,

42
00:02:13.114 --> 00:02:14.233
it has no parents.

43
00:02:14.233 --> 00:02:16.663
Typically, I usually go with Batman for
my first commit.

44
00:02:16.663 --> 00:02:19.857
I think it's funny cuz Batman
doesn't have any parents.

45
00:02:19.857 --> 00:02:23.867
It's like you gotta always go for that on
the first repo, I think it's fantastic.

46
00:02:23.867 --> 00:02:25.177
And there you go.

47
00:02:25.177 --> 00:02:26.667
So we've made our first commit.

48
00:02:26.667 --> 00:02:30.618
So that means if I go Git status,
says right here, what branch you're on,

49
00:02:30.618 --> 00:02:31.697
nothing to commit.

50
00:02:33.237 --> 00:02:33.977
There you go.

51
00:02:33.977 --> 00:02:35.767
The tree is clean.

52
00:02:35.767 --> 00:02:38.867
The changes are in the repo.

53
00:02:38.867 --> 00:02:42.546
One of the common activities you
should get into the habit of or

54
00:02:42.546 --> 00:02:45.357
at least know that its available is Git log.

55
00:02:45.357 --> 00:02:49.037
Git log allows you to look
at the history of the repo.

56
00:02:49.037 --> 00:02:52.986
It's a very powerful thing and we're gonna
go over a few of the options today, and

57
00:02:52.986 --> 00:02:56.157
we're gonna use it very regularly
throughout this course.

58
00:02:56.157 --> 00:02:59.446
Cuz it's just awesome to
have in your Batbelt,

59
00:02:59.446 --> 00:03:03.617
I guess we're going with
Batman themed things.

60
00:03:03.617 --> 00:03:06.774
Anyways, so review or explore,
check out, man Git log,

61
00:03:06.774 --> 00:03:10.067
this I want you to open up the man
page and actually look at it.

62
00:03:10.067 --> 00:03:13.700
And I want you to search
for-- graph and-- decorate,

63
00:03:13.700 --> 00:03:18.942
and just kind of do a quick read,
get kind of used to reading the manual.

64
00:03:18.942 --> 00:03:21.112
I'll do it along with you, man Git log.

65
00:03:22.622 --> 00:03:25.614
There's graph right here and
if I find the option,

66
00:03:25.614 --> 00:03:30.512
there's the draw text based graphical
representation of the commit history.

67
00:03:30.512 --> 00:03:32.612
Okay, good to know we have that.

68
00:03:32.612 --> 00:03:37.312
All right, and then we can go decorate,
let's find the option,

69
00:03:37.312 --> 00:03:42.534
may have to go backwards, decorate
often is a little bit harder to read.

70
00:03:42.534 --> 00:03:45.074
It prints out the ref names
of any commits that are shown.

71
00:03:46.264 --> 00:03:48.574
Probably not really sure
what a ref name is.

72
00:03:48.574 --> 00:03:52.070
Remember, everything's a commit,
everything has a SHA, and

73
00:03:52.070 --> 00:03:56.474
you can reference those commits with
some sort of named item branches, right?

74
00:03:56.474 --> 00:03:59.632
Branches, tags, there you go.

75
00:03:59.632 --> 00:04:01.332
Or the very special one named head.

76
00:04:02.352 --> 00:04:04.292
We'll go over head in a little bit.

77
00:04:04.292 --> 00:04:05.147
All right, problem.

78
00:04:05.147 --> 00:04:08.045
Display the history of your
repo with graph and decorate.

79
00:04:12.469 --> 00:04:13.762
So I'll do it right now.

80
00:04:13.762 --> 00:04:15.641
Git log, graph, decorate.

81
00:04:15.641 --> 00:04:20.380
Often you don't actually have to use
decorate if it's just printing out

82
00:04:20.380 --> 00:04:21.551
the standard in.

83
00:04:21.551 --> 00:04:24.356
Kinda like a little fun exercise to do.

84
00:04:24.356 --> 00:04:24.946
Watch this.

85
00:04:24.946 --> 00:04:27.416
If I go this, I drop decorate and
I just do graph.

86
00:04:27.416 --> 00:04:30.116
You'll notice right here,
head points to master.

87
00:04:31.226 --> 00:04:34.977
If I take this and put it out to
a file and then cat out the file,

88
00:04:34.977 --> 00:04:36.606
look at what's missing.

89
00:04:37.606 --> 00:04:38.633
That bit of information.

90
00:04:38.633 --> 00:04:43.364
So, if you're ever,
printing out anything to a file,

91
00:04:43.364 --> 00:04:48.143
you need decorate to
actually get decorate.

92
00:04:48.143 --> 00:04:52.435
You need that flag to tell you, hey,

93
00:04:52.435 --> 00:04:57.693
list out all the named commits for me.

94
00:04:57.693 --> 00:04:58.660
Nice little, just nice little thing.

95
00:04:58.660 --> 00:05:01.784
Thanks so often you don't use decorate
like in practice because you're just

96
00:05:01.784 --> 00:05:04.510
looking at the log,
just something to be aware of.

97
00:05:04.510 --> 00:05:06.540
Unfortunately, we only have one commit.

98
00:05:06.540 --> 00:05:10.870
So the graph option really isn't
like super fantastic, right?

99
00:05:10.870 --> 00:05:14.200
You're not actually seeing a graph,
there's nothing to graph.

100
00:05:14.200 --> 00:05:16.550
But you'll notice that there's like
this little asterik right here.

101
00:05:16.550 --> 00:05:19.763
And that little asterik is
your only node in the graph.

102
00:05:19.763 --> 00:05:23.276
So that's the beginning of the graph,
item when you use log.

103
00:05:23.276 --> 00:05:24.826
We'll look at it a lot more.

104
00:05:25.836 --> 00:05:28.696
All right, hopefully everybody's
on the same page at this point.

105
00:05:28.696 --> 00:05:30.986
So we're gonna now get into some
of the git internals, right?

106
00:05:30.986 --> 00:05:32.351
We're going from 0 to 15 and

107
00:05:32.351 --> 00:05:35.249
then we're just gonna jump right
in at like 200 miles an hour.

108
00:05:35.249 --> 00:05:37.276
So we're gonna go all the way in.

109
00:05:37.276 --> 00:05:43.839
Again, SHAs, they're just a 0 through 9, A
through F string of characters 40 of them.

110
00:05:43.839 --> 00:05:46.209
And so
now we're gonna do the plumbing part.

111
00:05:46.209 --> 00:05:47.167
I'm very excited.

112
00:05:47.167 --> 00:05:51.013
By the way you can specify the first
seven characters of any SHA, and

113
00:05:51.013 --> 00:05:53.139
git will resolve that out.

114
00:05:53.139 --> 00:05:55.379
So you just need to get at least
the first seven characters.

115
00:05:56.459 --> 00:06:00.477
You can use log to be able
to get out your SHAs.

116
00:06:00.477 --> 00:06:04.587
There's other ways to get out SHAs,
but log is the simplest way.

117
00:06:04.587 --> 00:06:07.359
You don't have to know this one special
command for getting out SHAs and said,

118
00:06:07.359 --> 00:06:08.117
you can just use log.

119
00:06:09.507 --> 00:06:12.382
So, a problem.
Find the first commit SHA of your first

120
00:06:12.382 --> 00:06:12.987
commit.

121
00:06:12.987 --> 00:06:15.430
And I want you to copy it
to your system clipboard.

122
00:06:18.886 --> 00:06:20.052
This is the important part.

123
00:06:20.052 --> 00:06:21.222
Everybody has to do this, okay?

124
00:06:21.222 --> 00:06:22.902
Cuz now we're doing the internal.

125
00:06:22.902 --> 00:06:23.502
So get the SHA.

126
00:06:24.802 --> 00:06:31.282
So me, I'll go git log, and
I can come up here and there we go.

127
00:06:31.282 --> 00:06:33.452
So I have it nicely on
my clipboard right now.

128
00:06:34.672 --> 00:06:35.222
Quick question.

129
00:06:35.222 --> 00:06:38.322
Why is your SHA different than mine?

130
00:06:38.322 --> 00:06:44.779
Mine is 8721A,
yours is probably not any of that.

131
00:06:44.779 --> 00:06:45.279
Why is it different?

132
00:06:46.918 --> 00:06:48.009
&gt;&gt; Different inputs.

133
00:06:49.719 --> 00:06:52.548
Not just based on the like
one markdown file,

134
00:06:52.548 --> 00:06:57.999
but also your user.name, .email,
maybe other environmental vars.

135
00:06:57.999 --> 00:07:00.042
&gt;&gt; Exactly.
So you pretty much got the idea.

136
00:07:00.042 --> 00:07:06.602
My SHA is based off what I committed, the
time of the day, my username, my email.

137
00:07:06.602 --> 00:07:09.442
So I should produce a unique
one comparatively to you.

138
00:07:09.442 --> 00:07:12.953
So if we both at the exact same time of
the day, both committed the same thing,

139
00:07:12.953 --> 00:07:14.587
it should produce different SHAs.

140
00:07:14.587 --> 00:07:17.712
Cuz it's an amalgamation of
a bunch of different options.

141
00:07:17.712 --> 00:07:20.634
Just so if you're wondering,
you can't follow along directly,

142
00:07:20.634 --> 00:07:23.085
you won't be able to just
use the SHA that's produced,

143
00:07:23.085 --> 00:07:25.034
you'll have to be able
to grab out your own.

