WEBVTT

1
00:00:00.280 --> 00:00:03.296
All right, so you can also use Git pull,
fetching is always a good idea,

2
00:00:03.296 --> 00:00:04.540
keeps everything up to date.

3
00:00:04.540 --> 00:00:07.210
I always try to fetch often,
see when changes happen, and

4
00:00:07.210 --> 00:00:08.890
then pull in any changes I want.

5
00:00:08.890 --> 00:00:12.061
Git pull is just a convenient form
of what we just got done doing,

6
00:00:12.061 --> 00:00:16.080
fetches the changes, and then merges
those changes into your branch.

7
00:00:16.080 --> 00:00:20.262
And so you can do git pull,
the remote, and then the branch name.

8
00:00:20.262 --> 00:00:24.806
You can also for convenience, just use
git pull and it will use the current one.

9
00:00:24.806 --> 00:00:29.168
Back in the day like 15 years ago or
whenever I started using git when you'd

10
00:00:29.168 --> 00:00:32.862
use git push it push all of your
branches off, it was fantastic.

11
00:00:32.862 --> 00:00:36.192
It would just send everything, so
when you were just on your own branch and

12
00:00:36.192 --> 00:00:38.351
you get pushed in your
changes to the mainline.

13
00:00:38.351 --> 00:00:41.966
You actually just got done updating
the Company's main repo with no testing or

14
00:00:41.966 --> 00:00:46.058
anything, man, those were just
the days absolutely a lot of fun.

15
00:00:46.058 --> 00:00:49.681
And so prom, let's add one line at
the end of the README and hello-git and

16
00:00:49.681 --> 00:00:51.742
with a commit message, a remote change.

17
00:00:51.742 --> 00:00:54.265
But before you do that,
I've noticed something and

18
00:00:54.265 --> 00:00:56.938
I want to make sure we
don't have any accidents.

19
00:00:56.938 --> 00:01:00.287
If you merged or
cherry picked changes into your trunk,

20
00:01:00.287 --> 00:01:03.220
you will have this extra commit.

21
00:01:03.220 --> 00:01:07.162
And I just want to make sure everything
goes swimmingly from here on out, so

22
00:01:07.162 --> 00:01:10.790
if you've done this,
has everyone done this, right?

23
00:01:10.790 --> 00:01:13.560
Because it will diverge slightly
from what's on the screen,

24
00:01:13.560 --> 00:01:16.704
because I didn't include that when
I was printing everything out, so

25
00:01:16.704 --> 00:01:18.320
if you've done that, it's okay.

26
00:01:18.320 --> 00:01:20.794
I just want to make sure you
know that it's Is there, and so

27
00:01:20.794 --> 00:01:23.229
if it's slightly diverging,
there's no problems.

28
00:01:23.229 --> 00:01:28.159
All right, so let's add the one line at
the end of hello git on your remote trunk.

29
00:01:28.159 --> 00:01:32.847
So I'll navigate over to hello git,
I will echo in a what is it,

30
00:01:32.847 --> 00:01:36.039
a remote change at
the last line of READ ME.

31
00:01:36.039 --> 00:01:41.085
At this point, it becomes important
to make sure you're doing the same

32
00:01:41.085 --> 00:01:46.136
changes because we're going to
get into some trouble here soon.

33
00:01:46.136 --> 00:01:51.304
So I'm going to go vin READ ME and
go all the way down here,

34
00:01:51.304 --> 00:01:57.118
add this in, add it, commit it,
a remote change, there we go,

35
00:01:57.118 --> 00:02:02.325
hopefully everyone can do
the same thing to hello-git.

36
00:02:02.325 --> 00:02:06.537
I did not use status, remember again,
it is good practice to use status.

37
00:02:07.547 --> 00:02:11.650
Since these are so trivial, I probably
won't use status all the time, but

38
00:02:11.650 --> 00:02:14.597
typically I never git add
without doing a git status.

39
00:02:14.597 --> 00:02:19.619
And for those that don't know, git add dot
adds every file starting at my directory,

40
00:02:19.619 --> 00:02:22.476
that git can find that has changes.

41
00:02:22.476 --> 00:02:26.383
So usually you do like git add
a path to a specific file, but for

42
00:02:26.383 --> 00:02:31.115
convenience you can do git add dot long
as you have a good git ignore set up and

43
00:02:31.115 --> 00:02:33.016
everything's really nice.

44
00:02:35.076 --> 00:02:39.698
All right, now we're gonna execute
a git pull on the remote git, so

45
00:02:39.698 --> 00:02:43.766
I want you to open up remote git and
just go git pull, right?

46
00:02:43.766 --> 00:02:47.803
Because we have trunk in remote,
we have trunk in hello,

47
00:02:47.803 --> 00:02:52.006
hello has been updated,
we just want to pull in the change,

48
00:02:52.006 --> 00:02:56.066
it's going to error,
I want you to tell me why it errors.

49
00:02:56.066 --> 00:03:04.471
So I'm gonna switch over to remote,
git pull, the air is pretty simple.

50
00:03:04.471 --> 00:03:09.482
It's just because you have a branch named
trunk doesn't mean that git's going

51
00:03:09.482 --> 00:03:14.531
to just magically assume that the trunk
on another branch is the same one.

52
00:03:14.531 --> 00:03:17.221
You have to set tracking information,

53
00:03:17.221 --> 00:03:20.864
you have to tell git which
remote are you linking.

54
00:03:20.864 --> 00:03:23.359
This branch too, because you could
technically have a bunch of remotes,

55
00:03:23.359 --> 00:03:25.414
which remote should it choose?

56
00:03:25.414 --> 00:03:28.363
And so you have to have some sort of
way to set the exact thing that you're

57
00:03:28.363 --> 00:03:28.864
tracking.

58
00:03:28.864 --> 00:03:33.439
And so the easiest thing for us to do is
to take this line right here with git

59
00:03:33.439 --> 00:03:36.514
branch execute it, and
we have origin, right?

60
00:03:36.514 --> 00:03:41.151
We only have one remote, and
it's literally saying git branch,

61
00:03:41.151 --> 00:03:46.986
set-upstream-to origin/trunk and
I'm going to do it for branch named trunk.

62
00:03:46.986 --> 00:03:51.711
And so now that I've done that,
I can now pull in those

63
00:03:51.711 --> 00:03:56.746
changes because now it knows
when I execute git pull.

64
00:03:56.746 --> 00:04:01.235
It now knows where to pull stuff
in from And back in the old days,

65
00:04:01.235 --> 00:04:04.878
git pull would just pull all the things,
right?

66
00:04:04.878 --> 00:04:08.868
I'm glad those days are gone man, did I
mess up some serious repos back then.

67
00:04:08.868 --> 00:04:12.454
All right, so hopefully you can
think about Github now, and

68
00:04:12.454 --> 00:04:17.178
you realize what Github is, it's just
your repo on someone else's computer.

69
00:04:19.277 --> 00:04:22.570
That's all really is,
we're doing the exact same things you'd be

70
00:04:22.570 --> 00:04:26.093
doing with Github, except we're just
doing it locally, and so again,

71
00:04:26.093 --> 00:04:27.958
hopefully the magic is now even less.

72
00:04:27.958 --> 00:04:32.433
Now, there's specific ways in which you
can communicate to Github that we're

73
00:04:32.433 --> 00:04:35.394
obviously not doing here,
but it's less magical.

74
00:04:35.394 --> 00:04:37.517
All right, so what about rebase?

75
00:04:37.517 --> 00:04:41.372
Well, typically whenever I pull
changes in from my authority repo,

76
00:04:41.372 --> 00:04:44.236
I prefer to rebase the changes in,
the reason why?

77
00:04:44.236 --> 00:04:45.128
Is that again,

78
00:04:45.128 --> 00:04:49.807
I like a nice clean history any changes
I'm making I prefer my changes at the tip.

79
00:04:49.807 --> 00:04:54.140
Because if I want to do testing again,
I don't want my changes somewhere deep

80
00:04:54.140 --> 00:04:58.358
within the history, I wanted exactly
at the end where I could edit those.

81
00:04:58.358 --> 00:05:00.603
I could squash those, I can change them,

82
00:05:00.603 --> 00:05:04.145
they're still my changes until I
commit them to the public repo.

83
00:05:04.145 --> 00:05:08.331
And so that's how I like to live I think
rebase is the best, we'll go over sort of

84
00:05:08.331 --> 00:05:12.916
why it's the best, I know it's my opinion,
but I believe it's the correct opinion.

85
00:05:12.916 --> 00:05:16.681
Also, it doesn't really matter whether
you use merge or rebase if you have

86
00:05:16.681 --> 00:05:21.238
a long-lived feature branch life sucks,
so there's just no way around that.

87
00:05:21.238 --> 00:05:24.940
Whether you're using rebase or
merge, it's just going to be a pain,

88
00:05:24.940 --> 00:05:28.718
so there's not like a super special
strategy to get around that.

89
00:05:28.718 --> 00:05:32.623
By the way, so the reason why I
personally like the rebasing approach is

90
00:05:32.623 --> 00:05:35.438
that every now and
then I need to revert something.

91
00:05:35.438 --> 00:05:39.996
If I am under really strict practice of
always moving my changes to the front,

92
00:05:39.996 --> 00:05:44.477
with rebate, I'm always squashing
them down to a singular commit.

93
00:05:44.477 --> 00:05:48.750
If that one day does happen to come by
where you actually messed up production

94
00:05:48.750 --> 00:05:49.550
a little bit,

95
00:05:49.550 --> 00:05:54.607
a singular commit with no merge commits
with none of that is very easy to revert.

96
00:05:54.607 --> 00:05:57.534
But if you have six commits with
several merge commits in between,

97
00:05:57.534 --> 00:05:59.221
reverting is just more challenging.

98
00:05:59.221 --> 00:06:03.739
Because now you're going to have to figure
out how to pull out all that information

99
00:06:03.739 --> 00:06:06.631
and make sure that it is now
updating just a lot more.

100
00:06:06.631 --> 00:06:10.541
It's a huge pain, so this is why I
choose this way, it's very intentional.

101
00:06:10.541 --> 00:06:13.941
I'm planning for failure as
opposed to planning for success,

102
00:06:13.941 --> 00:06:15.511
which is why I use rebase.

103
00:06:15.511 --> 00:06:18.990
By the way, if you like rebase and
you prefer to use it,

104
00:06:18.990 --> 00:06:21.576
you can actually just add it to a config.

105
00:06:21.576 --> 00:06:25.376
I actually don't have it set as a config,
I always like to manually, I don't know.

106
00:06:25.376 --> 00:06:28.950
But you can just simply do git config
add global pull rebase true, and

107
00:06:28.950 --> 00:06:30.186
it will always do that.

108
00:06:30.186 --> 00:06:33.062
Don't do that now because,
well we're going to do some merge and

109
00:06:33.062 --> 00:06:37.046
then some rebase and as well, so I just
want you to know that that's a thing.

110
00:06:37.046 --> 00:06:41.835
For now,
you can just do git pull --rebase, and

111
00:06:41.835 --> 00:06:46.799
it will pull it and
do a rebase as opposed to a merge.

112
00:06:46.799 --> 00:06:50.779
I even worn myself because I knew I'd
goof it up, it's just so easy to do that.

