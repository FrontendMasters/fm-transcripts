WEBVTT

1
00:00:00.370 --> 00:00:03.530
All right, so
now we're gonna go from merge to rebase.

2
00:00:03.530 --> 00:00:05.330
I know everyone's excited about rebase.

3
00:00:05.330 --> 00:00:10.310
The thing about rebase is I am completely
convinced people don't like rebase because

4
00:00:10.310 --> 00:00:13.250
A, they heard on Twitter that it's bad.

5
00:00:13.250 --> 00:00:20.120
B, they used rebase that one time,
screwed it all up, and now they hate it.

6
00:00:20.120 --> 00:00:22.410
And it's ruined their life,
therefore rebase bad.

7
00:00:24.660 --> 00:00:25.970
It's not bad.
It's actually fantastic.

8
00:00:25.970 --> 00:00:31.007
Rebase is just yet another tool in your
git Bat belt to be able to manipulate and

9
00:00:31.007 --> 00:00:33.000
use your repo effectively.

10
00:00:33.000 --> 00:00:35.540
There's actually a really good
reason why you should use rebase.

11
00:00:35.540 --> 00:00:37.060
We'll kinda get into it a little bit more.

12
00:00:37.060 --> 00:00:39.430
So this is our current setup right now.

13
00:00:39.430 --> 00:00:40.087
We have foo.

14
00:00:40.087 --> 00:00:42.037
Which is BC, and we have trunk,

15
00:00:42.037 --> 00:00:46.417
which is all the way up to Y at this
point because we have merged on bar.

16
00:00:46.417 --> 00:00:49.027
So this should be your setup right now.

17
00:00:49.027 --> 00:00:54.237
Now we can demonstrate the power of
rebase by updating where foo points to.

18
00:00:54.237 --> 00:00:58.037
We're gonna create this
graph by using rebase.

19
00:00:59.477 --> 00:01:07.119
This is what Rebase does is it allows you
to update underneath your set of changes.

20
00:01:07.119 --> 00:01:11.812
This is very important because it
is rewriting history in some sense,

21
00:01:11.812 --> 00:01:15.947
but it's allowing you to have
what is currently the reality,

22
00:01:15.947 --> 00:01:20.105
then your changes as opposed to
your changes that are

23
00:01:20.105 --> 00:01:24.070
tested against some previous
reality that's no longer true,

24
00:01:24.070 --> 00:01:28.253
you can now have it properly in line and
then to be able to find out did

25
00:01:28.253 --> 00:01:32.015
you actually write something
that's good or does it suck?

26
00:01:33.505 --> 00:01:37.653
This also means when we decide
to merge foo onto trunk,

27
00:01:37.653 --> 00:01:40.788
we can do a fast forward merge.

28
00:01:40.788 --> 00:01:44.989
Cuz again, our best common ancestor
our merge base is the tip of trunk,

29
00:01:44.989 --> 00:01:46.258
now that we rebased.

30
00:01:46.258 --> 00:01:50.927
And this is typically why people really
like rebase is that allows no merge

31
00:01:50.927 --> 00:01:51.898
commits.

32
00:01:51.898 --> 00:01:54.503
And there's a good reason why
you don't want merge commits and

33
00:01:54.503 --> 00:01:55.888
we'll cover a little bit later.

34
00:01:57.238 --> 00:01:59.658
Alright, so
basic steps of what rebase does.

35
00:01:59.658 --> 00:02:03.773
First thing rebase does Is that you
will first go git rebase target branch.

36
00:02:06.553 --> 00:02:09.987
Second, what it's gonna do is it's gonna
actually check out the latest commit

37
00:02:09.987 --> 00:02:11.423
on the target branch.

38
00:02:11.423 --> 00:02:12.863
So you're no longer on your branch.

39
00:02:12.863 --> 00:02:15.683
You actually switch branches
to the target branch.

40
00:02:15.683 --> 00:02:19.797
Then it's gonna take the branch that
you were on, the current branch, and

41
00:02:19.797 --> 00:02:23.472
play the commits one at a time Time
in order onto the target branch.

42
00:02:25.382 --> 00:02:29.147
Then it will go back check
out your current branch and

43
00:02:29.147 --> 00:02:33.092
update current branch to
point to that latest commit.

44
00:02:34.532 --> 00:02:37.600
So therefore it actually just moves
your commit forward in time and

45
00:02:37.600 --> 00:02:39.582
plays it one at a time.

46
00:02:39.582 --> 00:02:41.078
So
that's how you got to think about merge.

47
00:02:41.078 --> 00:02:42.678
It's a little bit, or rebase.

48
00:02:42.678 --> 00:02:44.904
It's just a little bit different, but

49
00:02:44.904 --> 00:02:49.627
it's very important to understand that cuz
down the line, rebase is going to cause

50
00:02:49.627 --> 00:02:53.352
a lot of problems if you don't
know about that specific feature.

51
00:02:55.561 --> 00:02:59.422
All right,
I want you to rebase foo with trunk.

52
00:02:59.422 --> 00:03:02.632
Create a separate branch,
It's called foo-rebase-trunk.

53
00:03:02.632 --> 00:03:04.414
And so you're going to do a,

54
00:03:04.414 --> 00:03:08.442
you're going to literally do a git
rebase trunk on this branch.

55
00:03:09.702 --> 00:03:10.862
So I'll do it myself too.

56
00:03:10.862 --> 00:03:11.892
I'll check out foo.

57
00:03:14.132 --> 00:03:17.302
And you can do a git log
if you're curious, right?

58
00:03:17.302 --> 00:03:17.852
There you go.

59
00:03:17.852 --> 00:03:21.244
A, B, C.
And so then I can do one on trunk.

60
00:03:21.244 --> 00:03:23.494
A, B, or A, D, E, X, Y.

61
00:03:23.494 --> 00:03:26.682
And then I can go git rebase.

62
00:03:26.682 --> 00:03:27.594
Git checkout.

63
00:03:27.594 --> 00:03:29.414
Almost messed that one up.

64
00:03:29.414 --> 00:03:30.364
There we go.

65
00:03:30.364 --> 00:03:33.544
We'll create the new branch,
foo-rebase-trunk.

66
00:03:33.544 --> 00:03:36.124
And I'm going to go git rebase trunk.

67
00:03:39.264 --> 00:03:40.192
All right, we've rebased.

68
00:03:41.253 --> 00:03:41.903
So what happened?

69
00:03:41.903 --> 00:03:46.543
Well, let's look at the log,
git log one line.

70
00:03:46.543 --> 00:03:47.183
Look at what we see.

71
00:03:48.413 --> 00:03:51.453
We see trunk, but we also see.

72
00:03:51.453 --> 00:03:53.623
Our two commits that differed from trunk.

73
00:03:53.623 --> 00:03:57.683
Now after Y,
we now have history that is linear.

74
00:03:57.683 --> 00:03:59.862
So now you see that trunk, which.

75
00:03:59.862 --> 00:04:04.852
Contained bar, as our last merge is
now the base for foo-rebase-trunk.

76
00:04:04.852 --> 00:04:08.502
In other words,
foo is no longer diverging from trunk.

77
00:04:08.502 --> 00:04:10.627
It's now literally walking
the history forward,

78
00:04:10.627 --> 00:04:12.762
which means we can fast
forward merge if we want to.

79
00:04:14.472 --> 00:04:15.702
So there are some pros.

80
00:04:15.702 --> 00:04:18.582
Obviously, you get a clean
history with no merge commits.

81
00:04:18.582 --> 00:04:22.163
So if you use git log to kinda look
through things if you wanna walk backwards

82
00:04:22.163 --> 00:04:23.031
through changes,

83
00:04:23.031 --> 00:04:26.903
there's just significantly less kind
of commits to have to go through.

84
00:04:26.903 --> 00:04:29.343
The cons obviously,
are that it alters branch history.

85
00:04:29.343 --> 00:04:33.527
And when you alter branch history, if you
have the same branch on another repo,

86
00:04:33.527 --> 00:04:36.399
you then have a problem
because you have two branches,

87
00:04:36.399 --> 00:04:39.533
named the same thing with
two different histories.

88
00:04:39.533 --> 00:04:42.114
So this is.
Typically where you see that git push

89
00:04:42.114 --> 00:04:46.794
force cuz you want to forcefully tell
the other repo, I know what foo has, and

90
00:04:46.794 --> 00:04:51.622
my version of foo is more correct than
yours, so you need to update everything.

91
00:04:51.622 --> 00:04:55.942
All right, some cautionary words, never
change the history of a public branch.

92
00:04:55.942 --> 00:04:59.675
I believe Marc over there, Mr. CEO,
actually has done that once before and

93
00:04:59.675 --> 00:05:02.363
it's a major pain it's a super
pain don't ever do that.

94
00:05:02.363 --> 00:05:06.656
So typically, what you'll see is always
merge on public branches rebase on private

95
00:05:06.656 --> 00:05:10.587
branches so you have some change, you
wanna make sure they actually work with

96
00:05:10.587 --> 00:05:14.698
the latest part of whatever you're working
on, you can then rebase it forward,

97
00:05:14.698 --> 00:05:18.809
run your tests, run whatever, everything
works if you have a conflict you have to

98
00:05:18.809 --> 00:05:22.859
resolve it then That way you have your
private branch being altered in history,

99
00:05:22.859 --> 00:05:25.632
but your public branch
never changes history.

100
00:05:25.632 --> 00:05:28.152
The moment you do that,
it breaks everybody.

101
00:05:28.152 --> 00:05:30.822
Everybody breaks the moment
you change public history.

102
00:05:30.822 --> 00:05:32.522
So don't ever do that for any reason.

103
00:05:32.522 --> 00:05:33.473
There's a lot more, but

104
00:05:33.473 --> 00:05:36.142
we need some more foundational
knowledge before we go over it.

105
00:05:36.142 --> 00:05:37.892
So we kinda have a nice little base here.

106
00:05:37.892 --> 00:05:42.322
Now, you no branches Merging, rebase,
you kind of get how they work.

107
00:05:42.322 --> 00:05:43.772
You understand how commits work.

108
00:05:43.772 --> 00:05:47.586
You actually understand that it is
the storage point of the entire repo per

109
00:05:47.586 --> 00:05:52.102
commit, but it's efficiently stored,
so it's not a waste of space.

110
00:05:52.102 --> 00:05:55.701
This is also why whenever you're
downloading a Git repo that has a long

111
00:05:55.701 --> 00:05:59.666
history, it takes a while because it's
literally downloading every single

112
00:05:59.666 --> 00:06:03.883
Change possible cuz it needs to be able
to reconstruct the repo at any one time.

113
00:06:03.883 --> 00:06:06.706
That's also why if you do a git clone and
use like depth one,

114
00:06:06.706 --> 00:06:08.243
I believe is the proper option.

115
00:06:08.243 --> 00:06:11.291
It will actually just come down
with only the last commit,

116
00:06:11.291 --> 00:06:13.403
which will contain the entire repo.

117
00:06:13.403 --> 00:06:15.475
That's how you get that
efficient checkout.

