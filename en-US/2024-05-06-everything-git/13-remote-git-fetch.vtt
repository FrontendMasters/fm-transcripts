WEBVTT

1
00:00:00.350 --> 00:00:01.849
Do you feel more powerful now?

2
00:00:01.849 --> 00:00:04.084
Is your Git knowledge growing, hopefully?

3
00:00:04.084 --> 00:00:06.210
Well, now we're gonna talk
about remote Git, right?

4
00:00:06.210 --> 00:00:09.547
Often we need changes that have been
created by our fellow frenemies.

5
00:00:09.547 --> 00:00:12.924
Frenemies, of course, is because they
make code and it hurts your feelings or

6
00:00:12.924 --> 00:00:14.366
hurts production's feelings.

7
00:00:14.366 --> 00:00:17.820
But how do we get their
changes into our repo?

8
00:00:17.820 --> 00:00:20.042
How do we push our changes to their repo?

9
00:00:22.073 --> 00:00:26.054
Here's one thing that kind of,
I guess, will surprise most people,

10
00:00:26.054 --> 00:00:28.222
is that it doesn't have to be remote.

11
00:00:28.222 --> 00:00:30.733
It doesn't have to be on GitHub.

12
00:00:31.923 --> 00:00:34.740
I know that might be strange,
because often when people think of Git,

13
00:00:34.740 --> 00:00:35.663
they think of GitHub.

14
00:00:35.663 --> 00:00:38.210
They don't actually think
of Git as its own thing,

15
00:00:38.210 --> 00:00:40.554
and then GitHub as a means to store Git.

16
00:00:40.554 --> 00:00:42.314
They think of Github as Git.

17
00:00:44.224 --> 00:00:48.274
So you may have never really
used Git as a remote.

18
00:00:48.274 --> 00:00:49.564
You just really probably
have never done this.

19
00:00:49.564 --> 00:00:51.771
Why would you have the same thing twice?

20
00:00:51.771 --> 00:00:56.454
A remote is just simply a copy of
the repo somewhere else, that's it.

21
00:00:57.454 --> 00:01:01.984
So I want you to create a new folder
wherever you create folders, and

22
00:01:01.984 --> 00:01:04.404
let's call it remote-git.

23
00:01:04.404 --> 00:01:07.436
And I want you to initialize
it with git init.

24
00:01:07.436 --> 00:01:11.224
So I'll jump in here and
go over to my personal directory.

25
00:01:11.224 --> 00:01:14.441
I'll make the remote-git and

26
00:01:14.441 --> 00:01:19.272
then I'll go into remote-git, there we go.

27
00:01:19.272 --> 00:01:24.356
And I'll go git init, there we go,
it's its own repo right now.

28
00:01:24.356 --> 00:01:27.336
Remember, this is distributed
version control, okay?

29
00:01:28.566 --> 00:01:30.789
The files can be on other
people's computers, too.

30
00:01:30.789 --> 00:01:35.437
And so, let's add a remote to hello-git,

31
00:01:35.437 --> 00:01:39.834
so, adding a remote goes git remote add,

32
00:01:39.834 --> 00:01:46.772
the name of the remote, and
then some sort of URI of some sort.

33
00:01:46.772 --> 00:01:52.122
It can be an SSH item,
it can be just a path on your computer.

34
00:01:54.022 --> 00:01:57.162
So let's add hello-git as the remote.

35
00:01:57.162 --> 00:01:58.672
By the way, you should name it origin.

36
00:01:58.672 --> 00:02:04.915
Typically, good practice is, the authority
repo is typically named origin.

37
00:02:04.915 --> 00:02:09.672
So I'll do it right now,
I'll go git remote add origin,

38
00:02:09.672 --> 00:02:13.750
and I'll just literally go ../hello-git.

39
00:02:13.750 --> 00:02:17.283
I can check it out with git remote -v,
there we go.

40
00:02:17.283 --> 00:02:21.430
You can see that the other repo
is just simply a relative file.

41
00:02:21.430 --> 00:02:22.680
So, hopefully, everyone did that.

42
00:02:22.680 --> 00:02:27.000
git remote -v will just verbosely
list out all of your remotes.

43
00:02:27.000 --> 00:02:31.285
You can also just do git remote, but
I don't find that very useful, right?

44
00:02:31.285 --> 00:02:32.511
I didn't do anything there.

45
00:02:32.511 --> 00:02:35.850
And so if you do the -v,
it'll also give you the path.

46
00:02:35.850 --> 00:02:40.515
So if you have GitHub, you'll see
the GitHub address when you do a -v.

47
00:02:40.515 --> 00:02:44.427
Gitisms, typically this is how I
set up the naming for my repos.

48
00:02:44.427 --> 00:02:49.432
Is if I have only a singular authoritative
repo, meaning that there is mine plus

49
00:02:49.432 --> 00:02:54.379
the one I'm pushing up to, say, on GitHub,
then I'll call that one origin.

50
00:02:54.379 --> 00:02:57.370
If I have a fork of the authoritative
repos, so this is typical

51
00:02:57.370 --> 00:03:01.608
when you're at like a job, you have your
main one, and then you have your fork.

52
00:03:01.608 --> 00:03:06.264
I typically call my fork origin, and
the authoritative one, the true one,

53
00:03:06.264 --> 00:03:09.049
the one true repo,
I call that one upstream.

54
00:03:09.049 --> 00:03:11.398
And you'll see that a lot,
people will call it upstream.

55
00:03:12.958 --> 00:03:17.200
Sometimes instead of using origin,
I use me, cuz it's just,

56
00:03:17.200 --> 00:03:19.450
I don't know, it's kinda fun.

57
00:03:19.450 --> 00:03:21.984
git push me,
I just think it's stupid and fun.

58
00:03:21.984 --> 00:03:26.938
So there's me, so that's kind of like
my general naming convention is to use

59
00:03:26.938 --> 00:03:31.590
origin for the authoritative one,
unless if it's a personal fork, and

60
00:03:31.590 --> 00:03:34.508
then do upstream for
the authoritative one.

61
00:03:34.508 --> 00:03:39.233
All right, you'll notice our default
branch remained, it's trunk again, right?

62
00:03:39.233 --> 00:03:42.707
We didn't set the option again, we didn't
do anything, it just keeps on remaining.

63
00:03:42.707 --> 00:03:46.976
So now trunk was yet again, even
though this is a very different trunk,

64
00:03:46.976 --> 00:03:50.847
this trunk right here is
from the default naming.

65
00:03:50.847 --> 00:03:55.657
Now we need to merge the changes from
hello-git into our new repo, remote-Git.

66
00:03:55.657 --> 00:03:58.549
So we're gonna do that, but
first we need to fetch.

67
00:03:58.549 --> 00:04:02.465
We need to fetch because we want to be
able to get all that object information

68
00:04:02.465 --> 00:04:03.469
from hello-git.

69
00:04:03.469 --> 00:04:08.093
So if we go here and I go find .git,
you'll notice that it's just, again,

70
00:04:08.093 --> 00:04:09.999
this pristine empty one.

71
00:04:09.999 --> 00:04:13.949
Whereas if I do that in hello-git,
find .git, well,

72
00:04:13.949 --> 00:04:16.779
it has a lot of stuff in there, right?

73
00:04:16.779 --> 00:04:20.409
So I want all of that in remote-git.

74
00:04:20.409 --> 00:04:24.650
So to do that,
you need to be able to execute git fetch.

75
00:04:24.650 --> 00:04:28.438
git fetch will fetch
your remote's changes,

76
00:04:28.438 --> 00:04:32.624
and it'll put it inside
the git state management.

77
00:04:32.624 --> 00:04:34.630
I bet you could even find
where it stores things.

78
00:04:34.630 --> 00:04:36.756
So I'll go like this, git fetch.

79
00:04:36.756 --> 00:04:41.730
And you'll see, look at that, I got bar,
I got foo, I got foo-rebase-trunk, trunk,

80
00:04:41.730 --> 00:04:43.257
trunk-merge-foo.

81
00:04:43.257 --> 00:04:45.987
We got all of those branches
when I did that fetch.

82
00:04:47.067 --> 00:04:51.122
Okay, cool, so now I'm up to date, right?

83
00:04:51.122 --> 00:04:52.159
&gt;&gt; No.

84
00:04:52.159 --> 00:04:54.417
&gt;&gt; No, great job, all right.

85
00:04:54.417 --> 00:04:57.137
&gt;&gt; [LAUGH]
&gt;&gt; I love this, this is fantastic.

86
00:04:57.137 --> 00:04:58.980
All right, so let's use git log and

87
00:04:58.980 --> 00:05:03.041
verify that the remote trunk has been
correctly merged into our git state.

88
00:05:03.041 --> 00:05:08.914
So I'll go like this, git log, our branch
doesn't even have any commits yet.

89
00:05:08.914 --> 00:05:12.267
So our trunk is still
diverging from hello-git.

90
00:05:12.267 --> 00:05:14.797
And the reason why is we've
only fetched the changes,

91
00:05:14.797 --> 00:05:18.266
we haven't merged the changes into ours,
we haven't updated anything.

92
00:05:18.266 --> 00:05:19.835
That's why often when you pull,

93
00:05:19.835 --> 00:05:22.873
you'll see update with fast forward
if you have your main line.

94
00:05:22.873 --> 00:05:25.762
Cuz you don't make changes to your main
line cuz you're all great engineers,

95
00:05:25.762 --> 00:05:26.937
I can tell right away.

96
00:05:26.937 --> 00:05:28.117
No one's doing that, right?

97
00:05:28.117 --> 00:05:29.359
No one's doing merge, right?

98
00:05:31.919 --> 00:05:35.273
Okay, so anyways,
right now we haven't updated anything.

99
00:05:35.273 --> 00:05:39.037
Okay, so that means we need to do
something, but by the way, remember,

100
00:05:39.037 --> 00:05:40.472
you can always do a git log.

101
00:05:40.472 --> 00:05:46.177
So I can go git log,
remote name, which is origin,

102
00:05:46.177 --> 00:05:50.306
and then do any branch name, right?

103
00:05:50.306 --> 00:05:54.874
Because we fetched everything in, so we
can actually see the log of other remotes.

104
00:05:54.874 --> 00:05:58.214
So I can go origin trunk, and there we go.

105
00:05:58.214 --> 00:06:00.651
Definitely my best work
at the end of this.

106
00:06:00.651 --> 00:06:06.049
It's fantastic, X, Y, E, D, A, awesome.

107
00:06:06.049 --> 00:06:09.066
If you did one line,
I actually pasted one line in there.

108
00:06:09.066 --> 00:06:11.783
I pasted the wrong thing in there,
I actually executed --oneline,

109
00:06:11.783 --> 00:06:13.796
that's what it should look like.

110
00:06:13.796 --> 00:06:15.196
All right, awesome.

111
00:06:15.196 --> 00:06:20.882
You can validate this is true by,
when you look right here,

112
00:06:20.882 --> 00:06:24.998
you'll notice that trunk is 9b6e43.

113
00:06:24.998 --> 00:06:32.248
I can go to hello-git and do git log -1,
9b6e, same commit SHA, right?

114
00:06:32.248 --> 00:06:36.040
It now exists on two computers,
or in two repos.

115
00:06:36.040 --> 00:06:41.294
So there we go, okay,
we are now kind of in line.

116
00:06:41.294 --> 00:06:47.107
If you wish to see what branches came down
with git fetch you can do git branch -a.

117
00:06:47.107 --> 00:06:53.297
So if I go back to remote-git and I go
git branch -a, you'll see all branches.

118
00:06:53.297 --> 00:06:56.113
And so the ones that start with remotes,
those are all the remote branches,

119
00:06:56.113 --> 00:06:57.657
then you'll have any of your local ones.

120
00:06:57.657 --> 00:06:58.899
Right now we have nothing,

121
00:06:58.899 --> 00:07:01.917
we just have the default empty
one that has no commits to it.

122
00:07:01.917 --> 00:07:05.967
So we have no branches, effectively,
and just a bunch from the remote.

123
00:07:05.967 --> 00:07:08.853
All right, so
let's update trunk with origin/trunk.

124
00:07:08.853 --> 00:07:11.997
And then let's use git log to see
those commits have been merged.

125
00:07:13.227 --> 00:07:15.315
So what do we do here?

126
00:07:15.315 --> 00:07:17.328
&gt;&gt; origin/trunk?

127
00:07:17.328 --> 00:07:20.857
&gt;&gt; We can git pull origin/trunk, true.

128
00:07:20.857 --> 00:07:22.133
We also have all those changes.

129
00:07:22.133 --> 00:07:28.346
So we can just git merge origin,
the remote, trunk.

130
00:07:30.756 --> 00:07:35.024
Now that I've merged those changes
from my internals which I just

131
00:07:35.024 --> 00:07:39.538
got done fetching from another repo,
I can use git log --oneline.

132
00:07:39.538 --> 00:07:43.965
And look at that, my trunk now points
to the same spot that this trunk does

