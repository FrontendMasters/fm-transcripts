WEBVTT

1
00:00:00.090 --> 00:00:03.152
All right, so to create a conflict, the
easiest way to do that is you just have to

2
00:00:03.152 --> 00:00:04.910
make two changes that
cannot be reconciled.

3
00:00:04.910 --> 00:00:09.300
In other words, just change the same
line to two different things.

4
00:00:09.300 --> 00:00:12.980
So the problem, let's create
a conflict in both remote and hello.

5
00:00:12.980 --> 00:00:15.270
To do this, we need to create
a commit in both of them.

6
00:00:15.270 --> 00:00:19.548
And so we're gonna use trunk for
both repos.

7
00:00:19.548 --> 00:00:24.992
We're gonna do an A + 1 to hello,
and an A + 2 to remote.

8
00:00:24.992 --> 00:00:26.232
And this will be in the README.

9
00:00:26.232 --> 00:00:28.002
So they both have A at the first line.

10
00:00:28.002 --> 00:00:29.572
So it'll create the same change in both.

11
00:00:29.572 --> 00:00:31.192
Let me just make sure
that I don't do anything.

12
00:00:31.192 --> 00:00:33.472
Okay, good, so let's do that now.

13
00:00:33.472 --> 00:00:37.274
So I'm gonna first start off in,
hello, I'm gonna go to the README,

14
00:00:37.274 --> 00:00:40.637
I'm gonna add A + 1, save that,
git, add this git commit.

15
00:00:40.637 --> 00:00:44.021
And then I'll do A + 1 so
I can just see the law,

16
00:00:44.021 --> 00:00:48.777
I have the same message so
we kind of know what we're working with.

17
00:00:48.777 --> 00:00:52.257
And then I'll jump over here to remote and
do the exact same thing, right?

18
00:00:52.257 --> 00:00:57.896
We're gonna go in here, A + 2,
save that, git, add this git commit 2.

19
00:00:57.896 --> 00:00:59.347
There we go.

20
00:00:59.347 --> 00:01:03.502
We've now created the situation in
which we are going to conflict.

21
00:01:03.502 --> 00:01:07.030
And now we just need to simply
pull hello-git onto remote and

22
00:01:07.030 --> 00:01:08.632
it should cause conflict.

23
00:01:08.632 --> 00:01:11.032
So git pull, there we go.

24
00:01:11.032 --> 00:01:13.742
We now have the official conflict.

25
00:01:13.742 --> 00:01:17.152
It's hurting us emotionally,
but it's fantastic.

26
00:01:17.152 --> 00:01:18.492
So, what is a conflict?

27
00:01:18.492 --> 00:01:20.573
It may not be obvious
what is in the conflict.

28
00:01:20.573 --> 00:01:24.159
Because often whenever you pull in
changes, it's not just one file that's,

29
00:01:24.159 --> 00:01:26.943
well, it's unlikely that it's
one file that's changed.

30
00:01:26.943 --> 00:01:29.996
Usually you pull in a whole bunch
of commits from other people, and

31
00:01:29.996 --> 00:01:32.563
you get a big list of things
that have been changed.

32
00:01:32.563 --> 00:01:35.483
And you have one file in
there that's conflicting.

33
00:01:35.483 --> 00:01:38.655
And so using just this message
right here to find which one,

34
00:01:38.655 --> 00:01:40.182
kind of a pain to do, right?

35
00:01:40.182 --> 00:01:44.562
That's why git status is a little bit
easier cuz you'll get something like this,

36
00:01:44.562 --> 00:01:45.461
both modified.

37
00:01:45.461 --> 00:01:48.401
And you can see that means it
does not know how to resolve it.

38
00:01:48.401 --> 00:01:51.266
It can just tell you, hey,
both the one you're on and

39
00:01:51.266 --> 00:01:56.663
the one you're pulling into have a change
here, and we don't know how to resolve it.

40
00:01:56.663 --> 00:02:01.634
Yeah, by the way, you could always abort
these type of things by doing a git merge

41
00:02:01.634 --> 00:02:04.646
abort, or a git rebase abort,
just so you know.

42
00:02:04.646 --> 00:02:07.994
And technically a git revert abort,
git cherry pick abort,

43
00:02:07.994 --> 00:02:10.566
any of them that you
have that availableness.

44
00:02:10.566 --> 00:02:13.227
I think with Stash, you can't abort
that one, if I'm not mistaken.

45
00:02:13.227 --> 00:02:15.606
There's some other technique
you're gonna have to do there.

46
00:02:15.606 --> 00:02:18.776
I can't remember with Stash, but
I'm pretty sure you can't with Stash.

47
00:02:18.776 --> 00:02:21.478
All right, so to resolve a conflict,
let's open up the README and

48
00:02:21.478 --> 00:02:23.485
let's look at what's inside of it.

49
00:02:23.485 --> 00:02:27.585
So here it is for convenience, but for
me I like to look at things with Vim.

50
00:02:27.585 --> 00:02:32.590
Notice that we have HEAD with a bunch of
arrows, the change we made in remote,

51
00:02:32.590 --> 00:02:36.671
a bunch of equal signs,
the change that's up on hello git, and

52
00:02:36.671 --> 00:02:40.757
then of course this with some sort of SHA,
7b00.

53
00:02:40.757 --> 00:02:45.157
If I jump over to hello and
go git log 1, you'll see 7b00.

54
00:02:45.157 --> 00:02:45.967
It's this commit.

55
00:02:45.967 --> 00:02:49.347
It's letting you know which commit
you're currently resolving against.

56
00:02:50.667 --> 00:02:55.620
So when I go here, what this says to me or
what it's trying to convey to you

57
00:02:55.620 --> 00:02:59.681
is that from this place to
the equal sign is your change, and

58
00:02:59.681 --> 00:03:03.965
from the equal sign to this
is this commit's change.

59
00:03:03.965 --> 00:03:07.095
And so
now you need to pick which one you want.

60
00:03:07.095 --> 00:03:09.166
Technically, I could delete this,
this, and this and

61
00:03:09.166 --> 00:03:11.565
have them both if I really wanted to,
or I could just have hello.

62
00:03:11.565 --> 00:03:14.426
Or I could just have remote, right?

63
00:03:14.426 --> 00:03:18.365
You get to choose how
you want to resolve it.

64
00:03:18.365 --> 00:03:22.798
That's why if you've ever noticed whenever
you're using some sort of visual program,

65
00:03:22.798 --> 00:03:25.160
you will get to select one side or
the other, and

66
00:03:25.160 --> 00:03:27.660
then you have in the middle
the ability to edit it.

67
00:03:27.660 --> 00:03:31.658
It's because often a conflict isn't as
simple as choosing one side or the other.

68
00:03:31.658 --> 00:03:36.006
It's you kind of have to mash them
together and make sure things work, right?

69
00:03:37.146 --> 00:03:38.236
Anyways, spend and all that.

70
00:03:38.236 --> 00:03:40.696
All right, so validate your SHA.

71
00:03:40.696 --> 00:03:41.926
We already validated the SHA.

72
00:03:43.880 --> 00:03:46.720
All right, so we are conflicted and
we want to resolve it.

73
00:03:46.720 --> 00:03:49.460
Use the status message to identify
which one, we already did that.

74
00:03:49.460 --> 00:03:53.890
And let's choose our remote-git change,
okay?

75
00:03:53.890 --> 00:04:00.410
So that means you want to keep the one
between head and the equal sign or A + 2.

76
00:04:00.410 --> 00:04:02.294
So we're gonna keep the remote-git change.

77
00:04:02.294 --> 00:04:04.774
So this is the final
state we should be into.

78
00:04:04.774 --> 00:04:07.064
Make sure my notes actually agree with me.

79
00:04:07.064 --> 00:04:09.404
Yeah, okay, whew, right?

80
00:04:09.404 --> 00:04:11.734
Make sure you pretty much end
the file looking like this.

81
00:04:11.734 --> 00:04:14.906
I'm not gonna delete the line that I
have right here cuz I just don't want

82
00:04:14.906 --> 00:04:16.504
to play with history at all.

83
00:04:16.504 --> 00:04:20.624
I want everything to keep on going there,
but normally I feel the need to delete it.

84
00:04:20.624 --> 00:04:22.649
And just in case you all feel
the same need that I need,

85
00:04:22.649 --> 00:04:24.812
just letting you know
why I'm not deleting it.

86
00:04:24.812 --> 00:04:25.602
All right, so there we go.

87
00:04:25.602 --> 00:04:30.202
We have resolved the conflict, and if I go
git status, it still says the same thing.

88
00:04:30.202 --> 00:04:32.392
We need to resolve this conflict still,
right?

89
00:04:32.392 --> 00:04:34.628
Even though I've deleted
all the conflicting lines,

90
00:04:34.628 --> 00:04:35.752
git has not moved forward.

91
00:04:35.752 --> 00:04:38.920
It doesn't just move forward automagically
when none of those lines are left.

92
00:04:38.920 --> 00:04:41.642
It waits for you to tell it,
I'm ready for you to move forward.

93
00:04:41.642 --> 00:04:43.769
So let's commit the merge now.

94
00:04:43.769 --> 00:04:46.082
So all we have to do is do
a little quick git add, and

95
00:04:46.082 --> 00:04:49.019
then we get to commit it with
whatever message we want, right?

96
00:04:49.019 --> 00:04:51.469
So I'll just say, merged in upstream.

97
00:04:51.469 --> 00:04:54.219
There we go.

98
00:04:54.219 --> 00:04:56.879
We've merged in upstream,
we've resolved the conflict.

99
00:04:56.879 --> 00:05:02.616
We had to do it manually,
had to choose whatever side we wanted,

100
00:05:02.616 --> 00:05:08.061
and we happened to choose our
remote side not our hello side.

101
00:05:08.061 --> 00:05:11.701
Fantastic, just absolutely so
happy right now, geez.

102
00:05:11.701 --> 00:05:15.339
All right, I forgot to put the status.

103
00:05:15.339 --> 00:05:16.347
That's so sad.

104
00:05:16.347 --> 00:05:18.047
If you execute status.

105
00:05:18.047 --> 00:05:20.557
So one thing here,
we'll look at it right here.

106
00:05:20.557 --> 00:05:23.990
If I were to do status before
I committed the change,

107
00:05:23.990 --> 00:05:27.642
when I added the README,
the README went away.

108
00:05:27.642 --> 00:05:28.272
Why is that?

109
00:05:29.652 --> 00:05:30.772
It's not on the status anymore.

110
00:05:31.922 --> 00:05:33.542
It's quite simple.

111
00:05:33.542 --> 00:05:35.392
There's no change, right?

112
00:05:35.392 --> 00:05:38.382
We kept our change from remote.

113
00:05:38.382 --> 00:05:41.000
Therefore, by resolving this conflict,

114
00:05:41.000 --> 00:05:45.596
we're still in a state that needs to
be committed, we just have no change.

115
00:05:45.596 --> 00:05:47.076
It's just an empty commit, right?

116
00:05:47.076 --> 00:05:48.126
There's nothing there.

117
00:05:50.156 --> 00:05:50.796
Well, fun fact.

118
00:05:52.876 --> 00:05:55.026
Anyway, so we can use a git
log to kinda look into it.

119
00:05:55.026 --> 00:05:59.315
So if you go like this git log, you'll
see okay, we see the merge upstream,

120
00:05:59.315 --> 00:06:04.559
we actually see where our origin trunk is
currently pointing to, we see our change.

121
00:06:04.559 --> 00:06:07.279
If we do git,
this is where graph gets really cool.

122
00:06:07.279 --> 00:06:09.609
If you do it with graph
you can actually see.

123
00:06:09.609 --> 00:06:11.298
Okay, now I can see that this happened,

124
00:06:11.298 --> 00:06:13.349
I can see this is a merge
commit with two parents.

125
00:06:13.349 --> 00:06:15.089
You can see which parents are which.

126
00:06:15.089 --> 00:06:17.239
There's our upstream one.

127
00:06:17.239 --> 00:06:18.703
Here's our last commit down here.

128
00:06:18.703 --> 00:06:20.034
So you can kinda look at them.

129
00:06:20.034 --> 00:06:23.340
I also think it's kinda neat that
there's two 0's right here, and

130
00:06:23.340 --> 00:06:25.684
two 0's right here, and
two 0's right here.

131
00:06:25.684 --> 00:06:28.022
Feels weird to me,
I love those kinda things.

132
00:06:28.022 --> 00:06:31.757
I don't know why I just find it very
entertaining when SHAs are close to

133
00:06:31.757 --> 00:06:32.451
each other.

134
00:06:32.451 --> 00:06:34.787
I don't know, kinda weird guy,
but all right.

135
00:06:34.787 --> 00:06:37.062
So two conflicts are better than one,
right?

136
00:06:37.062 --> 00:06:39.667
I agree, but
we're not gonna do this quite yet.

137
00:06:39.667 --> 00:06:43.214
So, what I want you to do is I
want you to make a change to bar.

138
00:06:43.214 --> 00:06:46.477
And I want you to pull in
the change into the remote.

139
00:06:46.477 --> 00:06:49.053
That's it, very, very simple change.

140
00:06:49.053 --> 00:06:49.723
That's it.

141
00:06:49.723 --> 00:06:54.089
So I'm just gonna even copy this one,
a no conflict change the bar, dang it.

142
00:06:54.089 --> 00:06:57.019
So I'm gonna go back to hello,

143
00:06:57.019 --> 00:07:01.993
change bar,
git add this git commit a change to bar.

144
00:07:03.333 --> 00:07:04.248
Very, very simple, right?

145
00:07:05.388 --> 00:07:08.958
I'm gonna do that, remember,
in our upstream in hello.

146
00:07:10.088 --> 00:07:14.114
For those that are wondering what I'm
doing right here, this little maneuver

147
00:07:14.114 --> 00:07:18.086
here, when you do echo anything, you
are echoing it out to the standard out.

148
00:07:18.086 --> 00:07:22.588
And all kind of programs running, there's
a standard in, there's a standard out.

149
00:07:22.588 --> 00:07:25.562
I can redirect any output to a file.

150
00:07:25.562 --> 00:07:29.635
Two things mean that I not only redirect
it to a file, but I append it to the end.

151
00:07:29.635 --> 00:07:33.524
So just in case you forgot about that,
it's just when you're doing these little

152
00:07:33.524 --> 00:07:36.739
exercises, it makes things really,
really easy to just do this.

153
00:07:36.739 --> 00:07:40.811
Because I don't need to open the file, and
then edit it, and then close the file, and

154
00:07:40.811 --> 00:07:42.352
save, and go through all of it.

155
00:07:42.352 --> 00:07:44.750
I'll just put the standard
out right into file.

156
00:07:45.950 --> 00:07:48.100
So now let's pull in
the change into the remote.

157
00:07:49.170 --> 00:07:51.730
So I'm gonna jump over here and
go git pull.

158
00:07:54.410 --> 00:07:59.630
And look at that,
we have diverging histories, right?

159
00:08:02.670 --> 00:08:03.866
Right?
Yeah,

160
00:08:03.866 --> 00:08:08.175
cuz I have my change that I merged in.

161
00:08:08.175 --> 00:08:10.365
There was a conflict,
I changed that conflict.

162
00:08:10.365 --> 00:08:14.435
I never told hello git or
the upstream about this conflict.

163
00:08:14.435 --> 00:08:16.055
I never pushed any change for it.

164
00:08:16.055 --> 00:08:18.049
So now, every time I make a change,

165
00:08:18.049 --> 00:08:21.665
I have to do a merge commit cuz
we have different histories.

166
00:08:21.665 --> 00:08:25.740
So this is where things can quickly
get a lot of extra commits in life.

167
00:08:25.740 --> 00:08:29.641
Cuz now we just have even more,
every time I pull in a change now,

168
00:08:29.641 --> 00:08:33.560
if I pull in one change at a time,
I will get two commits per pull.

169
00:08:34.650 --> 00:08:38.990
So this is where the thing starts
to get kind of annoying with merge.

170
00:08:38.990 --> 00:08:41.950
Even though some people really like it,
I'm just not a big fan of it.

171
00:08:43.820 --> 00:08:44.320
There we go.

172
00:08:45.960 --> 00:08:48.510
So this will keep on going over and
over again, by the way.

173
00:08:48.510 --> 00:08:51.160
So if we look at our graph,
by the way, our graph looks so good.

174
00:08:51.160 --> 00:08:53.010
One line graph, just so sweet.

175
00:08:53.010 --> 00:08:54.414
Look at that.
Look at that little

176
00:08:54.414 --> 00:08:56.930
trapezoidal type figure
going on right there.

177
00:08:56.930 --> 00:08:59.002
But you can see that
every time it does that,

178
00:08:59.002 --> 00:09:01.970
we're just gonna have to keep
on doing these little merge fix.

179
00:09:01.970 --> 00:09:03.800
And also it's like Google colors.

180
00:09:03.800 --> 00:09:04.538
Strange, okay.

181
00:09:04.538 --> 00:09:07.514
All right, takeaways,
once you resolve a conflict and

182
00:09:07.514 --> 00:09:11.887
you don't merge it back up, you're gonna
have problems over and over again.

183
00:09:11.887 --> 00:09:13.417
Anytime you're diverging in history,

184
00:09:13.417 --> 00:09:17.177
you're just gonna have merge conflicts or
merge commits every single time you pull.

185
00:09:17.177 --> 00:09:20.640
So keep yourself in sync as much
as possible, it avoids these.

186
00:09:20.640 --> 00:09:23.447
Let's do a conflict, but
this time let's do it with rebase.

187
00:09:23.447 --> 00:09:26.942
Cuz, remember, rebase is
fundamentally different than merge.

188
00:09:26.942 --> 00:09:30.034
Merge finds the best common ancestor,
replays those things,

189
00:09:30.034 --> 00:09:32.202
creates a merge commit, and that's that.

190
00:09:32.202 --> 00:09:35.919
Whereas rebase will actually move
your changes forward to the tip and

191
00:09:35.919 --> 00:09:37.585
then replay a change at a time,

192
00:09:37.585 --> 00:09:41.132
which means that different things
can happen during a conflict.

193
00:09:42.242 --> 00:09:44.798
Again, I wanna make sure
everybody remembers,

194
00:09:44.798 --> 00:09:48.714
with rebase moves everything forward,
plays the commits one at a time.

195
00:09:48.714 --> 00:09:49.984
Very important.

196
00:09:49.984 --> 00:09:53.750
Very important, which means it also
checks out the target branch or

197
00:09:53.750 --> 00:09:55.874
the source branch, then replays it.

198
00:09:55.874 --> 00:10:00.475
It's very important to remember that
because it's gonna kind of see how this

199
00:10:00.475 --> 00:10:01.944
works, all right?

200
00:10:01.944 --> 00:10:04.734
So now here's another interesting thing.

201
00:10:04.734 --> 00:10:08.819
Let's pretend that C and
G had a conflict, we had to resolve it.

202
00:10:10.029 --> 00:10:14.829
What happened if we get another change
upstream and then we rebase again?

203
00:10:16.199 --> 00:10:17.369
Are we gonna get another conflict?

204
00:10:20.919 --> 00:10:23.779
Why should we or why should we not?

205
00:10:26.183 --> 00:10:29.156
&gt;&gt; Do you still have the conflicting
change, it's still gonna conflict?

206
00:10:29.156 --> 00:10:33.892
&gt;&gt; Yeah, cuz remember we take our commits,
we then check out the branch we're

207
00:10:33.892 --> 00:10:38.643
trying to rebase on, we go to the end
then we replay our commits one at a time.

208
00:10:38.643 --> 00:10:43.059
Which means if we replay a commit that
conflicts it will conflict again, and

209
00:10:43.059 --> 00:10:44.926
again, and again, and again.

210
00:10:44.926 --> 00:10:47.181
Now there is a resolution around this.

211
00:10:47.181 --> 00:10:51.965
In fact, it's such an unheard of option
that you can even use it in a sentence to

212
00:10:51.965 --> 00:10:55.807
somebody's face and
they won't even know you are telling them

213
00:10:55.807 --> 00:10:59.370
the solution because of how fun it is,
all right?

214
00:10:59.370 --> 00:11:00.090
It's just the best.

215
00:11:00.090 --> 00:11:00.970
It's just the best.

216
00:11:00.970 --> 00:11:02.230
All right, so let's do this again.

217
00:11:02.230 --> 00:11:03.060
It's fun.

218
00:11:03.060 --> 00:11:03.720
We're masochists.

219
00:11:03.720 --> 00:11:04.617
We're computer scientists,

220
00:11:04.617 --> 00:11:06.570
we gotta make sure that we
experience this over and over again.

221
00:11:06.570 --> 00:11:08.374
So the first thing we wanna do is,

222
00:11:08.374 --> 00:11:12.251
let's make sure we first have no more
merge commits, any more of that.

223
00:11:12.251 --> 00:11:14.871
So let's get our branch
in sync with hello.

224
00:11:14.871 --> 00:11:18.091
So I'm gonna push from
remote to hello right now.

225
00:11:18.091 --> 00:11:19.701
We don't want any more merge commits.

226
00:11:19.701 --> 00:11:21.661
So git push.

227
00:11:21.661 --> 00:11:23.141
Does anyone know what happened here?

228
00:11:24.691 --> 00:11:26.944
You probably got the same error
if you've been paying attention.

229
00:11:31.726 --> 00:11:36.104
Read the error message,
read the friendly manual as they say,

230
00:11:36.104 --> 00:11:37.930
read the friendly error.

231
00:11:37.930 --> 00:11:39.967
I'm trying to push to trunk.

232
00:11:39.967 --> 00:11:43.696
What am I currently checked
out on in hello git?

233
00:11:43.696 --> 00:11:47.705
Trunk, do you think it'd be good if you
were programming and someone could push to

234
00:11:47.705 --> 00:11:51.235
your branch in such a way that would
change it out of underneath you?

235
00:11:51.235 --> 00:11:52.545
What could possibly go wrong?

236
00:11:52.545 --> 00:11:53.295
We're doing it live.

237
00:11:53.295 --> 00:11:56.145
This is like hot reloading,
but of your entire code base.

238
00:11:56.145 --> 00:12:00.263
So instead, you probably want
to go git checkout bar, go back,

239
00:12:00.263 --> 00:12:03.635
then push it, which works perfectly fine.

240
00:12:03.635 --> 00:12:05.105
Then you can git checkout trunk.

241
00:12:06.285 --> 00:12:06.827
There you go.

242
00:12:06.827 --> 00:12:09.477
Now, think about that,
GitHub has to do the same thing, right?

243
00:12:09.477 --> 00:12:14.013
They can't have trunk checked out in
whatever way they're managing your repo

244
00:12:14.013 --> 00:12:14.637
up there.

245
00:12:14.637 --> 00:12:16.517
It would have the exact same problem.

246
00:12:16.517 --> 00:12:21.107
It's kind of like a fun little,
don't do that type thing.

247
00:12:21.107 --> 00:12:24.450
Anyways, it's just a problem you pretty
much never run into cuz normally you

248
00:12:24.450 --> 00:12:28.507
don't have two of the exact same repos
on your machine that you're pushing to.

249
00:12:28.507 --> 00:12:29.617
Fun little experience right there.

250
00:12:29.617 --> 00:12:31.277
All right, awesome.

251
00:12:31.277 --> 00:12:33.617
I just wanted to go over
that just because it's fun.

252
00:12:33.617 --> 00:12:36.047
If you looked at it,
you'd see this remote rejected.

253
00:12:36.047 --> 00:12:37.627
It's currently checked out.

254
00:12:37.627 --> 00:12:39.947
It tells you right there in the error,
just kinda hard to see.

255
00:12:39.947 --> 00:12:40.787
All right, so we did all that.

256
00:12:40.787 --> 00:12:41.844
We changed branches, fantastic.

