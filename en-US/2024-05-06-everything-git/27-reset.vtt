WEBVTT

1
00:00:00.220 --> 00:00:00.910
Alright, Git reset.

2
00:00:00.910 --> 00:00:05.614
So this one you've seen me use a couple
times because we definitely didn't have

3
00:00:05.614 --> 00:00:09.840
any problems earlier which required
me to change history or anything.

4
00:00:09.840 --> 00:00:14.450
We didn't have any deviations from this
course, it's been first try all day long.

5
00:00:14.450 --> 00:00:17.220
But if I did,
I would have probably used Git Reset.

6
00:00:17.220 --> 00:00:20.322
There's actually quite a bit
you can do with Reset.

7
00:00:20.322 --> 00:00:27.612
I only use it pretty much one way, which
is just get rid of my current changes.

8
00:00:27.612 --> 00:00:29.312
That's pretty much what I use it.

9
00:00:29.312 --> 00:00:32.152
I don't like these,
just get the hell outta here, right?

10
00:00:32.152 --> 00:00:33.292
That's what I, that's how I use it.

11
00:00:33.292 --> 00:00:34.822
And so we're not there right now.

12
00:00:34.822 --> 00:00:36.032
We're gonna do a little bit different.

13
00:00:36.032 --> 00:00:37.692
We're gonna kinda show
you a little bit more.

14
00:00:37.692 --> 00:00:40.430
So a soft reset is a reset.

15
00:00:40.430 --> 00:00:45.089
In which you actually walk back a commit,
your branch will walk back

16
00:00:45.089 --> 00:00:49.831
a commit with you and that commit
that you just effectively forgot and

17
00:00:49.831 --> 00:00:55.025
changed history will become the change
inside the working tree and index.

18
00:00:55.025 --> 00:00:58.560
So,we just got done reverting E.

19
00:00:58.560 --> 00:01:05.001
If I go git reset At soft head tilde one,
I'm now gonna walk back that commit.

20
00:01:05.001 --> 00:01:07.981
It's still trunk, right?

21
00:01:07.981 --> 00:01:12.041
We're still in trunk, but
if I go git log one line, you'll notice,

22
00:01:12.041 --> 00:01:13.381
where's the revert?

23
00:01:14.411 --> 00:01:14.931
The revert.

24
00:01:14.931 --> 00:01:16.891
Where's the revert?

25
00:01:16.891 --> 00:01:18.501
It's gone, right?

26
00:01:18.501 --> 00:01:24.931
If I go git status Well,
look what the VCS drag in, git diff stage.

27
00:01:26.261 --> 00:01:27.861
There we go.

28
00:01:27.861 --> 00:01:29.516
Awesome.
There's the minus C, so

29
00:01:29.516 --> 00:01:31.301
you can see I just undid the commit.

30
00:01:33.121 --> 00:01:37.865
That's git reset soft, which means that
all the changes now go into your working

31
00:01:37.865 --> 00:01:39.560
tree slash into your index.

32
00:01:39.560 --> 00:01:41.146
So awesome.

33
00:01:41.146 --> 00:01:42.906
Yeah, I actually really liked this,

34
00:01:42.906 --> 00:01:46.646
it's really great when you say you're
teaching a class and you totally mess up,

35
00:01:46.646 --> 00:01:50.276
you can actually walk these things back
pretty easy contain all the changes and

36
00:01:50.276 --> 00:01:53.741
know how to work things I really liked
I actually really liked reset soft and

37
00:01:53.741 --> 00:01:57.656
the best part is I didn't really even know
about reset soft for a very long time.

38
00:01:57.656 --> 00:02:02.160
Typically what I would do is I would just
go into the logs, check out the specific

39
00:02:02.160 --> 00:02:06.077
SHA, and then just delete my branch and
create that as my new branch.

40
00:02:06.077 --> 00:02:09.999
But instead, with reset, hard or soft, you
can just walk it back and you don't have

41
00:02:09.999 --> 00:02:13.827
to do that little hopping, recreating,
checking out, destroying type thing.

42
00:02:15.417 --> 00:02:18.127
There's also kind of like
a inverted version of this.

43
00:02:18.127 --> 00:02:19.842
Like right now, if I do this reset.

44
00:02:19.842 --> 00:02:21.552
Soft.
I can actually commit.

45
00:02:21.552 --> 00:02:22.142
Right?

46
00:02:22.142 --> 00:02:23.802
A new shop, right?

47
00:02:23.802 --> 00:02:24.962
And now I have the same change.

48
00:02:24.962 --> 00:02:29.071
But I have changed the message so
it no longer says we reverted E and

49
00:02:29.071 --> 00:02:30.822
it has a new shop.

50
00:02:30.822 --> 00:02:34.162
So I've kind of hit history by accident,
right?

51
00:02:34.162 --> 00:02:39.492
But I could do the exact same thing
in some sense by using git amend.

52
00:02:39.492 --> 00:02:40.056
So commit.

53
00:02:40.056 --> 00:02:42.789
Dash dash amend allows you to
take your current changes and

54
00:02:42.789 --> 00:02:45.256
retroactively apply them
to the commit you're on.

55
00:02:45.256 --> 00:02:51.084
And then you can even do amend dash dash
no edit and that will edit the commit

56
00:02:51.084 --> 00:02:56.366
you're just on, but we don't have
to change the commit message.

57
00:02:56.366 --> 00:03:03.248
And so when i'm doing ci I literally
echo a c Space to the end of a file,

58
00:03:03.248 --> 00:03:09.236
git add, git commit, amend,
no edit, get force push.

59
00:03:09.236 --> 00:03:11.456
That way there's only one change.

60
00:03:11.456 --> 00:03:14.646
Instead of the CI thing where
you have 9,000 changes.

61
00:03:14.646 --> 00:03:18.615
You can do a git reset soft git commit and
just keep on changing the thing over and

62
00:03:18.615 --> 00:03:21.034
over again or
just add a space Space and do that.

63
00:03:21.034 --> 00:03:24.704
So amend, reset soft,
fun little fun little move here.

64
00:03:24.704 --> 00:03:27.014
You know I do it all the time, good times.

65
00:03:27.014 --> 00:03:30.374
But remember, you're always changing
history when you're doing those things so

66
00:03:30.374 --> 00:03:32.114
can be a little more dangerous, you know?

67
00:03:32.114 --> 00:03:34.324
All right, so hard.

68
00:03:34.324 --> 00:03:36.081
We can do the same thing
as soft except for

69
00:03:36.081 --> 00:03:38.574
this one drops the changes to
index in your working tree.

70
00:03:39.594 --> 00:03:44.222
That means when you go Back,
it will completely destroy it.

71
00:03:44.222 --> 00:03:46.292
So we'll do the exact same thing.

72
00:03:46.292 --> 00:03:47.952
We are going to make
a little bit of a change and

73
00:03:47.952 --> 00:03:50.182
we're gonna destroy our
changes with reset hard.

74
00:03:50.182 --> 00:03:54.402
So first, make a change to read me and
then add a new file called food.md.

75
00:03:54.402 --> 00:03:56.312
Make those two and
then let's destroy them.

76
00:03:56.312 --> 00:04:00.863
So I'll go vim README, jump in here,
there we go, a little bit, Change and

77
00:04:00.863 --> 00:04:01.829
then foo.md.

78
00:04:01.829 --> 00:04:04.989
There we go, some Dvorak in there.

79
00:04:04.989 --> 00:04:05.889
Get status.

80
00:04:05.889 --> 00:04:07.819
You can see these two things right here.

81
00:04:07.819 --> 00:04:12.710
Remember, this is a tracked change that's
not staged because remember read me

82
00:04:12.710 --> 00:04:13.779
as tracked.

83
00:04:13.779 --> 00:04:15.809
It's a part of the working tree.

84
00:04:15.809 --> 00:04:17.079
Foo is not a part of the working tree.

85
00:04:17.079 --> 00:04:18.999
It has never been tracked.

86
00:04:18.999 --> 00:04:20.133
It's never been staged.

87
00:04:20.133 --> 00:04:22.113
And so we have no information about it.

88
00:04:22.113 --> 00:04:23.964
So if I go git reset hard,

89
00:04:23.964 --> 00:04:28.473
it will destroy our working
tree changes and index changes.

90
00:04:28.473 --> 00:04:30.933
So if I go git status, I still got foo.

91
00:04:31.973 --> 00:04:33.633
I just don't have
the readme change anymore.

92
00:04:33.633 --> 00:04:37.983
Because remember, it just destroys
only what git knows about.

93
00:04:37.983 --> 00:04:38.733
Now, here's the danger.

94
00:04:38.733 --> 00:04:40.027
This is like the big danger.

95
00:04:40.027 --> 00:04:40.997
Where people fall into.

96
00:04:40.997 --> 00:04:45.771
If I go git add this, and so now it now
knows about this for the first time and

97
00:04:45.771 --> 00:04:50.877
I go git reset hard, it's gone and
there's like no coming back from this one.

98
00:04:52.047 --> 00:04:52.987
It's a goner, right?

99
00:04:54.447 --> 00:04:56.694
You just erased a file that
was never tracked, and so

100
00:04:56.694 --> 00:04:58.917
there's no previous history at this point.

101
00:04:58.917 --> 00:05:02.720
So you gotta be a little careful
about using reset heart.

102
00:05:02.720 --> 00:05:04.480
You can also do the whole walking back.

103
00:05:04.480 --> 00:05:08.430
So if I go up, if I go vim read me and
I add a commit, right here and

104
00:05:08.430 --> 00:05:10.340
go git add git commit.

105
00:05:10.340 --> 00:05:13.420
Now a bunch of nonsense and
then go get a reset.

106
00:05:13.420 --> 00:05:14.600
Hard head one.

107
00:05:14.600 --> 00:05:18.415
It does the exact same thing
that soft did except for again,

108
00:05:18.415 --> 00:05:22.088
what does it do to the index and
working tree Get rid of it.

109
00:05:22.088 --> 00:05:24.168
So, if I go git status, nothing there.

110
00:05:24.168 --> 00:05:26.588
It just simply walked me back one commit.

111
00:05:26.588 --> 00:05:29.468
Git log one,
you'll see that I'm at the new shot one.

112
00:05:30.638 --> 00:05:31.568
So kind of neat.

113
00:05:31.568 --> 00:05:35.135
So when you're needing to kind of
just save yourself a little bit,

114
00:05:35.135 --> 00:05:38.458
knowing about the Git reset hard and
soft is pretty nice.

115
00:05:38.458 --> 00:05:39.526
&gt;&gt; It's not really a new show.

116
00:05:39.526 --> 00:05:40.966
Go.

117
00:05:40.966 --> 00:05:42.446
Anymore?

118
00:05:42.446 --> 00:05:45.350
The commitment is it says a new shot but
it's get out.

119
00:05:45.350 --> 00:05:47.102
[LAUGH] .

120
00:05:47.102 --> 00:05:49.046
That's it.

121
00:05:49.046 --> 00:05:50.176
We are fistfighting.

122
00:05:50.176 --> 00:05:51.206
All right.
So there you go.

123
00:05:51.206 --> 00:05:51.786
Pretty fun times.

124
00:05:51.786 --> 00:05:52.326
I don't know.

125
00:05:52.326 --> 00:05:57.226
I actually really like,
it's absolutely fantastic having these.

126
00:05:57.226 --> 00:06:00.867
I can't tell you how many odd times that
this actually is Useful that I used to do

127
00:06:00.867 --> 00:06:03.043
a bunch of steps to do the same thing.

128
00:06:03.043 --> 00:06:05.693
Now it's just like I can just
do them in one single command.

129
00:06:05.693 --> 00:06:09.172
Because often I find myself like checking
out and destroying the past and rechecking

130
00:06:09.172 --> 00:06:12.063
out a new branch and doing all this
just to walk back a couple commits and

131
00:06:12.063 --> 00:06:14.653
I was, ooh, I really goofed,
whatever that was.

132
00:06:14.653 --> 00:06:16.673
We should have here,
let me revert also the revert.

133
00:06:16.673 --> 00:06:19.653
So I'm gonna go like this, git reset hard.

134
00:06:19.653 --> 00:06:20.673
There we go.
We're back now.

135
00:06:20.673 --> 00:06:23.933
We're kinda into this point, now the
reverts gone, so we're just right here.

136
00:06:25.403 --> 00:06:28.953
Can you restore get hello to the position
it was before we started this section.

137
00:06:30.283 --> 00:06:33.683
&gt;&gt; Dip into the ref log,
is the SHA the same though or will be?

138
00:06:36.773 --> 00:06:38.153
&gt;&gt; The answer it's reflog.

139
00:06:38.153 --> 00:06:39.651
It's always reflog, right?

140
00:06:39.651 --> 00:06:42.891
You just gotta go find
that nice little ref log.

141
00:06:42.891 --> 00:06:44.021
I had a whole bunch of entries here.

142
00:06:44.021 --> 00:06:44.801
I did a bunch of extra work.

143
00:06:44.801 --> 00:06:47.671
Yeah, you can effectively
be able to grab out.

144
00:06:47.671 --> 00:06:49.691
Our previous commit was
the river II remember?

145
00:06:51.071 --> 00:06:54.728
We did all that so we got to go find
the river e so I can go in here and

146
00:06:54.728 --> 00:06:56.041
go get ref log.

147
00:06:56.041 --> 00:06:58.701
Find wherever revert E is there we go.

148
00:06:58.701 --> 00:06:59.617
It's right here.

149
00:06:59.617 --> 00:07:00.517
And you can do that.

150
00:07:00.517 --> 00:07:02.247
I mean,
there's plenty of ways you can do this.

151
00:07:02.247 --> 00:07:04.913
I'm sure there's some much more
awesome way to do this, but

152
00:07:04.913 --> 00:07:06.687
I can get checkout that thing.

153
00:07:06.687 --> 00:07:11.127
I can get branch, delete trunk,
I can get checkout dash v trunk.

154
00:07:11.127 --> 00:07:12.987
Right?
Well, I just restarted from doing that.

155
00:07:12.987 --> 00:07:14.877
I'm sure there's some fancy
nicer way to do that.

156
00:07:14.877 --> 00:07:17.961
I always find myself in habit of
just doing that because I'm always I

157
00:07:17.961 --> 00:07:22.389
don't know You know Once you do something,
then it's really hard to break that habit.

158
00:07:22.389 --> 00:07:24.069
That's typically how I'll always do it.

159
00:07:24.069 --> 00:07:25.289
Even with reset soft,

160
00:07:25.289 --> 00:07:29.919
sometimes I'll just forget that I can do
this big hopping thing and it's beautiful.

161
00:07:29.919 --> 00:07:31.129
You can do a get reset hard.

162
00:07:31.129 --> 00:07:34.349
Yeah, you can do a get
reset hard whatever end.

163
00:07:34.349 --> 00:07:37.489
Remember it's a reset hard and
then you can go anywhere.

164
00:07:37.489 --> 00:07:40.785
I can actually reset hard Back
to a branch that's remote or

165
00:07:40.785 --> 00:07:44.753
to anything that's a commit so
I could have also done the whole head and

166
00:07:44.753 --> 00:07:48.924
then whatever the index was whatever
it was 14 Right and I could go off and

167
00:07:48.924 --> 00:07:51.238
do that so it's it's a nice little thing

