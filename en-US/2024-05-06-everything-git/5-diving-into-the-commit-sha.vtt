WEBVTT

1
00:00:00.240 --> 00:00:02.700
All right, so the next part
will be a little bit hard, but

2
00:00:02.700 --> 00:00:04.700
I think you can try to give it a shot.

3
00:00:04.700 --> 00:00:08.845
Do you think you can find
your SHA in the GIT folder?

4
00:00:08.845 --> 00:00:10.922
Why don't you take a look, go in there.

5
00:00:10.922 --> 00:00:13.832
Remember the SHA is what
you're looking for.

6
00:00:13.832 --> 00:00:17.560
Just do a little perusing on your own for
a minute.

7
00:00:17.560 --> 00:00:19.177
I'll give you another hint.

8
00:00:19.177 --> 00:00:23.052
The first two characters
of the sha are important.

9
00:00:23.052 --> 00:00:27.179
Look around, maybe try to find
command finds a great one,

10
00:00:27.179 --> 00:00:30.056
it will list out a bunch of files for you.

11
00:00:30.056 --> 00:00:32.276
All right,
I'll just kind of start doing it.

12
00:00:32.276 --> 00:00:35.081
So if I go like this find,
remember when I did it before,

13
00:00:35.081 --> 00:00:37.587
there wasn't a ton of files,
but if I do it again,

14
00:00:37.587 --> 00:00:41.522
notice now we have a whole bunch
of stuff inside of objects now.

15
00:00:41.522 --> 00:00:44.765
And not only that, but there's my 8/7.

16
00:00:44.765 --> 00:00:46.525
There's my 2/1/a.

17
00:00:46.525 --> 00:00:47.392
Look at that thing.

18
00:00:47.392 --> 00:00:49.793
That's my commit, right?

19
00:00:49.793 --> 00:00:50.836
That looks like my commit.

20
00:00:50.836 --> 00:00:53.927
You have your commit somewhere in
there and you can go and find it.

21
00:00:53.927 --> 00:00:55.919
It's a real thing, right?

22
00:00:55.919 --> 00:00:57.337
Little quick observation.

23
00:00:57.337 --> 00:00:59.498
Everything inside the git.objects.

24
00:00:59.498 --> 00:01:04.186
Or sorry, .get/objects directory will
have the first two letters of any any

25
00:01:04.186 --> 00:01:06.445
Sha that is being tracked by Git.

26
00:01:06.445 --> 00:01:08.128
And you can use that to find stuff.

27
00:01:08.128 --> 00:01:10.465
If you're to manually look through Git,
all right?

28
00:01:10.465 --> 00:01:11.466
That's where they're all stored.

29
00:01:11.466 --> 00:01:14.389
That's where all of your changes and
everything are stored.

30
00:01:14.389 --> 00:01:18.571
So, by the way, I absolutely
love is like my favorite part of

31
00:01:18.571 --> 00:01:21.695
The Hobbit was what
sort of it's Pocketses?

32
00:01:21.695 --> 00:01:23.687
I just love that part.

33
00:01:23.687 --> 00:01:25.085
For those that don't know,

34
00:01:25.085 --> 00:01:28.826
it's a fantastic scene where Bilbo has
the ring and needing to ask riddles.

35
00:01:28.826 --> 00:01:32.682
And if he gets a riddle wrong, he gets
eaten, and his last one isn't a riddle.

36
00:01:32.682 --> 00:01:34.710
He just said, what's in my pocket?

37
00:01:34.710 --> 00:01:36.630
Then Gollum goes crazy, and
that's the whole story.

38
00:01:36.630 --> 00:01:38.098
That's how Lord of the Rings happened,

39
00:01:38.098 --> 00:01:40.268
is because he wouldn't tell
him what's in his pocketses.

40
00:01:40.268 --> 00:01:41.231
It's crazy, anyways.

41
00:01:41.231 --> 00:01:47.227
All right, so if I were to go here and say
git/objects/8/7/ and cap this thing out.

42
00:01:47.227 --> 00:01:48.261
It's a bunch of nonsense.

43
00:01:48.261 --> 00:01:49.757
You can do the same thing, right?

44
00:01:49.757 --> 00:01:55.285
You can't understand that file, or
this commit from just catting stuff out.

45
00:01:55.285 --> 00:02:00.128
It's been compressed, so
it's more space efficient.

46
00:02:00.128 --> 00:02:02.804
So it's just nonsense to our eyes.

47
00:02:02.804 --> 00:02:05.619
Here's my version right here.

48
00:02:05.619 --> 00:02:10.507
Remember, all of git state
is stored in these files.

49
00:02:10.507 --> 00:02:12.933
All of it, so
that's why our commit's there.

50
00:02:12.933 --> 00:02:14.473
All right, so
some of the tools of a plumber.

51
00:02:14.473 --> 00:02:17.061
There's a bunch of different
ways you can manually

52
00:02:17.061 --> 00:02:20.663
use the right git command to
print out the contents of stuff.

53
00:02:20.663 --> 00:02:26.103
But there's also Cat-File-p, and that
will just print out any SHA you want and

54
00:02:26.103 --> 00:02:28.991
the content or
in the contents of that SHA.

55
00:02:28.991 --> 00:02:31.824
And so there are like, if you
actually use the actual get commands,

56
00:02:31.824 --> 00:02:33.876
there's like a tree one for
printing out trees.

57
00:02:33.876 --> 00:02:36.693
There's one for printing out
specific parts or just this one.

58
00:02:36.693 --> 00:02:37.666
I prefer just to use this,

59
00:02:37.666 --> 00:02:40.464
because it's kind of annoying to have
to know all the little sub commands.

60
00:02:40.464 --> 00:02:44.948
I'm sure there's like a cost to it,
which is like Git has to figure out which

61
00:02:44.948 --> 00:02:49.643
SHA you're actually talking about and the
type of SHA and then to compress it and

62
00:02:49.643 --> 00:02:53.331
to give you this nice view and
all that, but just use this.

63
00:02:53.331 --> 00:02:58.805
You can inspect any commit or anything
about Git by using git cat-file-p.

64
00:02:58.805 --> 00:03:03.948
So I want you to cat file your sha.

65
00:03:03.948 --> 00:03:08.591
And see if you can get to the point of
being able to get the contents out of

66
00:03:08.591 --> 00:03:09.315
first MD.

67
00:03:09.315 --> 00:03:12.181
See if you can actually
get all the way down and

68
00:03:12.181 --> 00:03:14.535
find it by just cutting out your sha.

