WEBVTT

1
00:00:00.300 --> 00:00:04.559
All right, so let's create another
conflict via rebase instead of merge, so

2
00:00:04.559 --> 00:00:07.397
I added some bolts here,
just so I don't goof it up,

3
00:00:07.397 --> 00:00:09.870
cuz I kept goofing it up
when I do it by myself.

4
00:00:09.870 --> 00:00:13.508
So first we need to create a change in
hello-git, we're gonna go from A+2,

5
00:00:13.508 --> 00:00:14.020
to A+3.

6
00:00:14.020 --> 00:00:18.983
All right, so we're gonna start
in hello-git I'm gonna go

7
00:00:18.983 --> 00:00:23.383
to the README, and
I'm gonna go A + 3, fantastic.

8
00:00:23.383 --> 00:00:28.433
Then, we're gonna create another
change in bar.md, the last line, okay?

9
00:00:28.433 --> 00:00:32.046
We're gonna go to the last line,
so bar.md,

10
00:00:32.046 --> 00:00:36.673
I'm gonna go all the way down and
go last line from hello.

11
00:00:36.673 --> 00:00:41.603
This is probably not what I put in
the course, but you can follow along.

12
00:00:41.603 --> 00:00:44.523
Now I'm going to go git status,
you can see those two changes,

13
00:00:44.523 --> 00:00:47.793
I could go git diff to look at the two
changes if I wanted to, okay good.

14
00:00:47.793 --> 00:00:52.913
A 3, add it to the last line,
fantastic, git add this,

15
00:00:52.913 --> 00:00:58.356
git commit, let's go I don't
know what to call this thing,

16
00:00:58.356 --> 00:01:04.473
a change from hello git for
rebase conflict enjoy your day.

17
00:01:04.473 --> 00:01:07.844
Very nice message, no it's sort of making
me happy when I read it on the other side.

18
00:01:07.844 --> 00:01:11.278
All right, so now we're gonna do
the exact same thing in remote,

19
00:01:11.278 --> 00:01:13.102
I'm gonna change A +2 to A + 4.

20
00:01:13.102 --> 00:01:17.107
And I'm gonna make a change in bar,
but this time to the first line,

21
00:01:17.107 --> 00:01:20.490
not the last line, the first line,
this is important.

22
00:01:20.490 --> 00:01:26.239
All right, so we'll do it again,
we'll increment that twice,

23
00:01:26.239 --> 00:01:33.040
go to bar, and we'll go first line
change bar, we can see it right there.

24
00:01:33.040 --> 00:01:39.454
We can diff it if you want to, A +4, first
line awesome, add in here, git commit, and

25
00:01:39.454 --> 00:01:46.448
then we'll go change further from remote
for a wonderful rebase conflict, awesome.

26
00:01:46.448 --> 00:01:48.802
Just makes me feel so
happy doing it that way.

27
00:01:48.802 --> 00:01:50.814
All right, so now that we've done that,

28
00:01:50.814 --> 00:01:54.738
we're gonna rebase remote git's trunk
with hello git and create the conflict.

29
00:01:54.738 --> 00:01:58.769
Now, remember, that means you gotta go
git pull rebase, long as you don't have

30
00:01:58.769 --> 00:02:02.531
the option, auto-magically pre-enabled,
this should just work now.

31
00:02:03.571 --> 00:02:07.866
There we go, we have this wonderful error
message, but look at it kinda closely,

32
00:02:07.866 --> 00:02:09.541
what do you see here?

33
00:02:09.541 --> 00:02:14.959
I see, okay getting some information from
hello-git, we're gonna auto-merge README,

34
00:02:14.959 --> 00:02:19.951
there's a conflict in README,
we're gonna auto-merge bar, no problems.

35
00:02:19.951 --> 00:02:24.030
Bar was It's nicely merged,
the README could not be merged,

36
00:02:24.030 --> 00:02:27.089
therefore we have to manually do this.

37
00:02:27.089 --> 00:02:30.777
All right, so let's check out
the conflict, so if I go git status,

38
00:02:30.777 --> 00:02:35.339
you'll see right here that bar is in the
green because It's ready to be committed.

39
00:02:35.339 --> 00:02:40.119
It was able to merge it, nothing you
need to worry about, you're good to go.

40
00:02:40.119 --> 00:02:43.659
But this one has the both modified, this
is what I was talking about with the whole

41
00:02:43.659 --> 00:02:46.131
both modified thing where
you need to resolve it.

42
00:02:46.131 --> 00:02:50.222
We just simply have to go through and
do the exact same thing,

43
00:02:50.222 --> 00:02:54.591
let's fix the README all right,
so I'm gonna to go vim README.

44
00:02:54.591 --> 00:02:57.390
I want you to tell me something that's
different than what it was with merge,

45
00:02:57.390 --> 00:02:59.661
what do you see that's different,
how about this one?

46
00:02:59.661 --> 00:03:04.024
I'll go back here and
I'd like this, cat README,

47
00:03:04.024 --> 00:03:08.497
A + 3 right, why does it say HEAD,
is a plus three?

48
00:03:09.637 --> 00:03:14.207
That's upstreams, that's not our change,
that's upstreams change, why is it HEAD?

49
00:03:15.207 --> 00:03:17.487
&gt;&gt; That's where it currently is.

50
00:03:17.487 --> 00:03:22.031
&gt;&gt; In rebase, when you rebase,
you check out the branch are rebasing on,

51
00:03:22.031 --> 00:03:25.026
then you play your commits one at a time.

52
00:03:25.026 --> 00:03:29.355
Then you check out the branch from whence
you came and then it's updated and

53
00:03:29.355 --> 00:03:30.256
nice, right?

54
00:03:30.256 --> 00:03:34.176
So you gotta remember that, so it's
inverted when you're looking at rebase.

55
00:03:34.176 --> 00:03:39.074
Ours is theirs and theirs is ours,
it's that easy, by the way,

56
00:03:39.074 --> 00:03:45.062
this is the one part of git that's just
like it's if you know how rebase works,

57
00:03:45.062 --> 00:03:47.527
it makes perfect sense.

58
00:03:47.527 --> 00:03:50.119
And even when it makes perfect
sense it's still stupid,

59
00:03:50.119 --> 00:03:53.527
it's how I feel about it, why you got
to be like that, you know what I mean?

60
00:03:53.527 --> 00:03:55.331
You got to reverse it, and

61
00:03:55.331 --> 00:04:00.165
the worst part is that once you
remember this and you go like this.

62
00:04:00.165 --> 00:04:04.097
Okay, rebase is the opposite one,
you're gonna be like dang it,

63
00:04:04.097 --> 00:04:08.115
is merge theirs and ours, or
is it ours, then which one's rebase?

64
00:04:08.115 --> 00:04:10.910
Then all of a sudden you reverse uno
yourself and you're just like, dang it,

65
00:04:10.910 --> 00:04:13.235
I can't remember, so
just remember how rebase works.

66
00:04:13.235 --> 00:04:16.963
Instead of trying to remember some cute
way to remember that it's ours and theirs.

67
00:04:16.963 --> 00:04:20.574
If you just remember that rebase first
checks out the branch you're rebasing and

68
00:04:20.574 --> 00:04:23.571
then Plays on top,
it's very easy to always remember it.

69
00:04:23.571 --> 00:04:25.030
So just kind of a little,

70
00:04:25.030 --> 00:04:28.989
that's four years of me being
confused about theirs versus ours and

71
00:04:28.989 --> 00:04:34.051
then finally just reading it, and
then you don't reverse yourself anymore.

72
00:04:34.051 --> 00:04:39.201
Let's see, let's choose our conflict in
this case, let's choose hello gits change.

73
00:04:39.201 --> 00:04:42.625
So remember, because we're currently
checked out with hello git,

74
00:04:42.625 --> 00:04:45.367
so I'm just saying it
from gits perspective.

75
00:04:45.367 --> 00:04:51.471
Let's commit with a hello git, let's not
commit with remote, so we'll go like this,

76
00:04:51.471 --> 00:04:56.937
we'll erase that, that and that,
there we go, A +3, I want the A+3 one.

77
00:04:57.937 --> 00:05:02.839
Now don't goof this one up on accident
okay, you'll notice right here that it

78
00:05:02.839 --> 00:05:07.411
says, to be able to fix these conflicts,
you do git rebase-continue.

79
00:05:07.411 --> 00:05:11.108
If you actually do commit,
you've seen me do it a couple of times,

80
00:05:11.108 --> 00:05:13.099
which I haven't explained it yet.

81
00:05:13.099 --> 00:05:16.657
You can git reset -soft HEAD~1 and
you can undo your commit,

82
00:05:16.657 --> 00:05:21.175
and then rebase-continue I'll show you
that in a little bit, but there we go.

83
00:05:21.175 --> 00:05:25.325
So now I can go git add, there we go,
now notice that it went away,

84
00:05:25.325 --> 00:05:26.545
why did it go away?

85
00:05:28.275 --> 00:05:33.525
Silence, is that the reason,
just a strong silent type?

86
00:05:33.525 --> 00:05:34.215
No.

87
00:05:34.215 --> 00:05:37.115
&gt;&gt; It's up to this change.

88
00:05:37.115 --> 00:05:41.744
&gt;&gt; Yes, it's because remember right
now we're in perspective of hello git,

89
00:05:41.744 --> 00:05:44.774
we're in perspective of our upstream.

90
00:05:44.774 --> 00:05:48.904
Therefore, we accepted upstream's change,
therefore, there's no change right now.

91
00:05:51.044 --> 00:05:54.181
I know it's very frustrating to
think about these things, but

92
00:05:54.181 --> 00:05:58.027
it's good kind of exercise to go through,
now you kind of know okay, I know,

93
00:05:58.027 --> 00:05:59.407
it's very easy to goof up.

94
00:05:59.407 --> 00:06:04.594
So now I just simply go git rebase
continue, now we get this opportunity

95
00:06:04.594 --> 00:06:10.567
to edit the message to say hey a wonderful
nice rebase conflict I'm gonna save it.

96
00:06:10.567 --> 00:06:15.377
And there we go it's beautiful where
our branch is currently ahead of origin

97
00:06:15.377 --> 00:06:19.145
trunk by one commit awesome,
if we do a little log one line.

98
00:06:19.145 --> 00:06:23.281
You can see right here, we had this
wonderful change from hello git,

99
00:06:23.281 --> 00:06:27.772
then we resolve the conflict, but
there's no conflict commit, right?

100
00:06:27.772 --> 00:06:31.701
We just simply resolve it and
continue to our rebase, which means if I

101
00:06:31.701 --> 00:06:36.472
were to add in a dash P, you could see
we have the first line change to bar.

102
00:06:36.472 --> 00:06:40.560
And that's it,
we don't have the A+4 anymore,

103
00:06:40.560 --> 00:06:43.896
we literally erased it out of existence.

104
00:06:45.968 --> 00:06:50.259
I know it's a little emotionally painful
when you think about it, so this is some

105
00:06:50.259 --> 00:06:54.377
of the dangers of rebase is that you're
fully removing something right now.

106
00:06:54.377 --> 00:06:56.528
Because you moved forward your commit,

107
00:06:56.528 --> 00:07:00.339
then you edited your commit in such
a way that you removed your change.

108
00:07:00.339 --> 00:07:04.519
Change did not exist anymore, and
now it's just this change you had left.

109
00:07:04.519 --> 00:07:06.199
&gt;&gt; It's somewhere in the reflog still,
right?

110
00:07:07.379 --> 00:07:07.921
&gt;&gt; That change?

111
00:07:07.921 --> 00:07:11.862
We could probably find it in the ref
log for sure, so if you did a git

112
00:07:11.862 --> 00:07:16.949
ref log wherever it is, this one right
here is my guess, this looks about right.

113
00:07:16.949 --> 00:07:21.395
A change from remote and wonderful
rebuzzing, so if I go like this, git log p

114
00:07:21.395 --> 00:07:26.628
this, yeah there it is, so you can see it
right there, so we can get back to it.

115
00:07:26.628 --> 00:07:32.938
It's just since there was no conflict
commit, you lose that information.

116
00:07:32.938 --> 00:07:38.331
So this would be a good argument for why
you shouldn't use rebase, this is probably

117
00:07:38.331 --> 00:07:44.526
the best argument honestly, I don't think
you'd get any better than this one.

118
00:07:44.526 --> 00:07:47.369
Just because I don't like the idea
of losing information but

119
00:07:47.369 --> 00:07:50.556
at the exact same time it makes
perfect sense if you erase your code.

