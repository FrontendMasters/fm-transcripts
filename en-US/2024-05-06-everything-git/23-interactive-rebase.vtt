WEBVTT

1
00:00:00.270 --> 00:00:01.800
I know this may be shocking.

2
00:00:01.800 --> 00:00:04.040
There's actually more with Rebase.

3
00:00:04.040 --> 00:00:06.920
We can continue to rebase forever.

4
00:00:06.920 --> 00:00:10.180
So this one won't be as long of a part,
it's not nearly as confusing, but

5
00:00:10.180 --> 00:00:11.990
we're still rebasing, okay?

6
00:00:11.990 --> 00:00:19.580
You can do a lot with Rebase, but I really
have only ever used it to squash commits.

7
00:00:19.580 --> 00:00:23.078
I don't use it to edit commit messages or
to drop commits.

8
00:00:23.078 --> 00:00:25.548
I don't think I've ever dropped
a commit in my lifetime.

9
00:00:25.548 --> 00:00:28.652
It's an option, you just put D in
there and it just drops it, but

10
00:00:28.652 --> 00:00:30.158
I've never actually done it.

11
00:00:30.158 --> 00:00:33.448
So there's a lot of options,
you just don't have to use them all.

12
00:00:33.448 --> 00:00:35.418
I always use it for squashing everything.

13
00:00:35.418 --> 00:00:38.874
And so let's set up the repo with
three just quick sample commits

14
00:00:38.874 --> 00:00:42.266
in the remote-git at the end of
the README.md, and just say,

15
00:00:42.266 --> 00:00:45.665
added one to the end of the line,
or something along that line.

16
00:00:45.665 --> 00:00:47.869
Whatever you wanna or
however you wanna do, just three quick,

17
00:00:47.869 --> 00:00:49.465
one after another at the end.

18
00:00:49.465 --> 00:00:55.621
So I'm just gonna go echo "1" to
the end of README, git add this,

19
00:00:55.621 --> 00:01:00.818
git commit "1" to the end,
and then do it with "2".

20
00:01:00.818 --> 00:01:04.553
I can find myself wanting to write
a little bash script to do it for me, but

21
00:01:04.553 --> 00:01:08.736
it's so small, but at the same time it
just feels so right to automate this, 3.

22
00:01:11.748 --> 00:01:16.394
Do you guys ever have some sort of
automation paralysis instead of

23
00:01:16.394 --> 00:01:17.665
doing the thing?

24
00:01:17.665 --> 00:01:20.813
That was three small commits, I'm like,
I gotta write a bash script for this.

25
00:01:20.813 --> 00:01:24.393
I can't be spending time writing the same
thing three times, it's ridiculous.

26
00:01:24.393 --> 00:01:26.060
Automation paralysis, real thing.

27
00:01:26.060 --> 00:01:27.463
All right, so there we go.

28
00:01:27.463 --> 00:01:33.276
So if I go git log --oneline 4, you can
see, one, two, three, then our a plus 10.

29
00:01:33.276 --> 00:01:34.532
Okay, cool.

30
00:01:34.532 --> 00:01:36.833
We have these three new commits here.

31
00:01:36.833 --> 00:01:40.124
Now what we're gonna do is we're
gonna use Rebase Interactive.

32
00:01:40.124 --> 00:01:44.064
So how Rebase Interactive works, is that
you do a git rebase, you do an i, and

33
00:01:44.064 --> 00:01:45.539
then you add a commit-ish.

34
00:01:45.539 --> 00:01:48.958
A commit-ish is a commit or
something like a commit.

35
00:01:48.958 --> 00:01:52.822
So head tilde some number,
starts at your head and

36
00:01:52.822 --> 00:01:56.690
walks back a commit,
however big that number is.

37
00:01:56.690 --> 00:02:00.955
So if I go head tilde 1,
that's one commit back from head.

38
00:02:00.955 --> 00:02:05.694
If I do head tilde 3,
that's three commits back from head, so-

39
00:02:05.694 --> 00:02:06.376
&gt;&gt; Not being glib,

40
00:02:06.376 --> 00:02:07.553
this is a genuine question.

41
00:02:07.553 --> 00:02:11.410
Commit-ish is that a production term?

42
00:02:11.410 --> 00:02:13.269
Is that a term that you'll
find in the man pages?

43
00:02:13.269 --> 00:02:17.271
&gt;&gt; I'm pretty sure,
I'm not making this up.

44
00:02:17.271 --> 00:02:20.479
I'm pretty sure,
what are commit-ish and tri-ish in Git?

45
00:02:20.479 --> 00:02:21.278
There you go.

46
00:02:21.278 --> 00:02:24.575
So I thought, it's a good thing to know,
a commit-ish.

47
00:02:24.575 --> 00:02:25.413
There's a dash in it.

48
00:02:25.413 --> 00:02:27.703
I didn't put a dash in there.

49
00:02:27.703 --> 00:02:29.053
But it's a fair question.

50
00:02:29.053 --> 00:02:32.253
I do say things in a rather
abstract way sometimes.

51
00:02:32.253 --> 00:02:33.663
This is just not one of them.

52
00:02:33.663 --> 00:02:36.633
All right, I should have put
a little dash right there, though.

53
00:02:37.683 --> 00:02:42.345
All right, so let's do an interactive
rebase with these three commits.

54
00:02:42.345 --> 00:02:44.435
And let's use the head.

55
00:02:44.435 --> 00:02:45.423
By the way, it does make sense.

56
00:02:45.423 --> 00:02:45.955
It's an odd word.

57
00:02:45.955 --> 00:02:49.323
It does make sense, though, and I like it.

58
00:02:49.323 --> 00:02:51.973
All right, so
we're gonna squash three commits.

59
00:02:51.973 --> 00:02:56.383
So do git rebase -i,
and then head tilde 3.

60
00:02:56.383 --> 00:02:59.743
You wanna squash three commits.

61
00:02:59.743 --> 00:03:02.801
So git rebase -i HEAD~3.

62
00:03:02.801 --> 00:03:05.396
And this makes sense
because what you're doing,

63
00:03:05.396 --> 00:03:08.855
is that you're going back three commits,
which is actually not,

64
00:03:08.855 --> 00:03:13.161
it's the one commit before these three,
is three commits back.

65
00:03:13.161 --> 00:03:17.604
We're gonna go there and then it's gonna
replay these three commits on top, but

66
00:03:17.604 --> 00:03:20.636
we get the chance to say,
how do you replay it?

67
00:03:20.636 --> 00:03:22.876
So this makes perfect sense
with how Rebase works.

68
00:03:22.876 --> 00:03:25.036
We're just now able to say what to do.

69
00:03:25.036 --> 00:03:28.588
And it comes with a really nice little
comment right here to kind of tell you

70
00:03:28.588 --> 00:03:30.166
what you should do.

71
00:03:30.166 --> 00:03:32.586
So as you can see right here, squash.

72
00:03:33.766 --> 00:03:37.806
As for squash, and
the commit will be meld into the previous.

73
00:03:37.806 --> 00:03:42.224
So if I go right here and go s,
2 and 1 become one commit,

74
00:03:42.224 --> 00:03:45.429
and so git melded into the previous.

75
00:03:45.429 --> 00:03:49.597
If I do an s right here,
it'll be now 2 and

76
00:03:49.597 --> 00:03:53.659
3, and 1 and 2 all become one commit.

77
00:03:53.659 --> 00:03:54.948
And so this is the interactive side.

78
00:03:54.948 --> 00:03:57.712
You get to choose how it replays.

79
00:03:57.712 --> 00:04:00.261
And so I'm gonna choose these things and
then I'm gonna save.

80
00:04:00.261 --> 00:04:01.476
When it does that,
it gives you the option.

81
00:04:01.476 --> 00:04:05.325
It puts all the commit messages
into a single file for you, and

82
00:04:05.325 --> 00:04:08.520
gives you the option to
change it however you wish.

83
00:04:08.520 --> 00:04:10.713
So I'm just gonna go here, do that.

84
00:04:10.713 --> 00:04:14.553
And I can say 1 through 3 to the end.

85
00:04:14.553 --> 00:04:15.053
Why not?

86
00:04:15.053 --> 00:04:15.937
There we go.

87
00:04:15.937 --> 00:04:19.556
So now if I go git log,
I'll do the one line form.

88
00:04:19.556 --> 00:04:23.647
You'll see right here, 1, 2, 3 to the end,
I've taken all three commits and

89
00:04:23.647 --> 00:04:25.386
turned it into one commit, okay?

90
00:04:26.856 --> 00:04:31.066
So this is that whole history
editing thing people talk about.

91
00:04:31.066 --> 00:04:34.620
And if you do this and you push it to
a remote, and then you do it again and

92
00:04:34.620 --> 00:04:39.412
try to push, it's gonna say no, you can't
do that, you've just changed histories.

93
00:04:39.412 --> 00:04:42.022
That's when you use force to say,
no, I know best.

94
00:04:42.022 --> 00:04:45.817
I make history and some rage against
the machine who controls the past now and

95
00:04:45.817 --> 00:04:48.142
then boom, you're off and running.

96
00:04:48.142 --> 00:04:50.098
My general workflow, by the way,
I have already talked about it.

97
00:04:50.098 --> 00:04:54.554
Do squash me messages, bunch of little
small commits, turn it into one commit,

98
00:04:54.554 --> 00:04:55.548
push it up there.

99
00:04:55.548 --> 00:04:59.055
And then inevitably like every other
human on earth, I push up my commit,

100
00:04:59.055 --> 00:05:02.959
I add the people that are gonna review my
commit, then I look at my commit on stash,

101
00:05:02.959 --> 00:05:05.109
and go, man,
that was such a stupid commit,

102
00:05:05.109 --> 00:05:07.168
I can't believe I just put people on this.

103
00:05:07.168 --> 00:05:10.716
And then I have to go through really
quickly and try to make some changes, but

104
00:05:10.716 --> 00:05:14.819
then I wanna still be one commit, and then
I'm like squashing a commit, amending, and

105
00:05:14.819 --> 00:05:15.605
force pushing.

106
00:05:15.605 --> 00:05:19.913
It's a very embarrassing
cycle one has to go through.

