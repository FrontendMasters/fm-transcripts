WEBVTT

1
00:00:00.000 --> 00:00:04.328
I know this may be shocking,
there's actually more with rebase,

2
00:00:04.328 --> 00:00:06.920
we can continue to rebase forever.

3
00:00:06.920 --> 00:00:11.730
So this one won't be as long of a part,
it's not nearly as confusing, but

4
00:00:11.730 --> 00:00:13.836
we're still rebasing, okay?

5
00:00:13.836 --> 00:00:19.580
You can do a lot with rebase but I really
have only ever used it to squash commits.

6
00:00:19.580 --> 00:00:23.078
I don't use it to edit commit messages or
to drop commits.

7
00:00:23.078 --> 00:00:25.548
I don't think I've ever dropped
a commit in my lifetime.

8
00:00:25.548 --> 00:00:28.592
It's an option, just put d in there and
it just drops it, but

9
00:00:28.592 --> 00:00:30.158
I've never actually done it.

10
00:00:30.158 --> 00:00:33.901
So there's a lot of options you just don't
have to use them all, I always use it for

11
00:00:33.901 --> 00:00:35.418
squashing everything.

12
00:00:35.418 --> 00:00:39.279
And so let's set up the repo with
three just quick sample commits

13
00:00:39.279 --> 00:00:40.431
in the remote git.

14
00:00:40.431 --> 00:00:42.926
At the end of the README and just say,
added one to the end of the line or

15
00:00:42.926 --> 00:00:43.971
something along that line.

16
00:00:43.971 --> 00:00:45.924
Whatever you wanna,

17
00:00:45.924 --> 00:00:52.009
however you wanna do just three
quick one after another at the end.

18
00:00:52.009 --> 00:00:55.706
So I'm just gonna go echo 1 to
the end of README git add this

19
00:00:55.706 --> 00:00:58.808
git commit -m 1 to the end and
then do it with 2.

20
00:00:58.808 --> 00:01:03.695
I can find myself wanting to write
a little bash script to do it for me, but

21
00:01:03.695 --> 00:01:09.003
it's so small, but at the same time it
just feels so right to automate this 3.

22
00:01:11.608 --> 00:01:14.764
Do you guys ever have some
sort of automation paralysis?

23
00:01:14.764 --> 00:01:19.211
Or instead of doing the thing that was
three small commands sound I gotta write

24
00:01:19.211 --> 00:01:20.590
a bash script for this.

25
00:01:20.590 --> 00:01:24.393
I can't be spending time writing the same
thing three times, it's ridiculous.

26
00:01:24.393 --> 00:01:26.643
Automation paralysis, real thing.

27
00:01:26.643 --> 00:01:27.271
All right, so there we go.

28
00:01:27.271 --> 00:01:33.206
So if I go git log, oneLine -4, you can
see one, two, three, then our A + 10.

29
00:01:33.206 --> 00:01:34.603
Okay, cool.

30
00:01:34.603 --> 00:01:36.813
We have these three new commits here.

31
00:01:36.813 --> 00:01:40.228
And now what we're gonna do is we
are gonna use rebase interactive.

32
00:01:40.228 --> 00:01:44.087
So how rebase interactive works, is that
you do a git rebase, you do an i and

33
00:01:44.087 --> 00:01:45.638
then you add a commitish.

34
00:01:45.638 --> 00:01:48.388
A commitish is a commit or
something like a

