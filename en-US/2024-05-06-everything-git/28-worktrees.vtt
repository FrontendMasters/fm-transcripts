WEBVTT

1
00:00:00.074 --> 00:00:02.564
All right, Stash is not that great, right?

2
00:00:02.564 --> 00:00:05.990
We've all used Stash,
were we all happy with it?

3
00:00:05.990 --> 00:00:07.270
No, you weren't happy with it, okay?

4
00:00:07.270 --> 00:00:11.010
You weren't happy at all,
you now want to be happy though.

5
00:00:11.010 --> 00:00:15.428
So we're gonna be happy by using
worktrees, so worktrees, you're, so

6
00:00:15.428 --> 00:00:19.290
the best way to describe them
is like a little story, right?

7
00:00:19.290 --> 00:00:21.762
You're on a worktree food bar,
you're making the greatest progress ever.

8
00:00:21.762 --> 00:00:25.653
You're in flow state, everything's going
great, but then emergency situation is

9
00:00:25.653 --> 00:00:28.542
needed on main, some sort of bug there,
so what do you do?

10
00:00:28.542 --> 00:00:33.312
Well, typically we've been doing the whole
git add, throw everything into the stash,

11
00:00:33.312 --> 00:00:36.504
switch the branches,
make the changes and then come back.

12
00:00:36.504 --> 00:00:38.929
Or we could commit it and pull it and

13
00:00:38.929 --> 00:00:44.127
try to figure out what's wrong with it,
we need to do something, right?

14
00:00:44.127 --> 00:00:46.745
Well, what's a little bit nicer is
worktrees, let me show you how they work.

15
00:00:46.745 --> 00:00:49.670
First off,
a worktree often when we say this phrase,

16
00:00:49.670 --> 00:00:51.757
what we mean is a linked working tree.

17
00:00:51.757 --> 00:00:56.398
It's not your main tree, the main tree is
the one you create when you do a git init

18
00:00:56.398 --> 00:00:59.254
or a git clone,
those are the main working tree.

19
00:00:59.254 --> 00:01:03.897
A linked working tree is just
simply a branch from your

20
00:01:03.897 --> 00:01:06.276
main tree in its own state.

21
00:01:06.276 --> 00:01:10.174
Remember, every commit can rebuild the
entirety of a repo, very, very important

22
00:01:10.174 --> 00:01:14.031
you understand that one point because this
is where it's really used right here.

23
00:01:14.031 --> 00:01:18.175
And it's a little bit different cuz
the git folder is not a folder,

24
00:01:18.175 --> 00:01:19.361
it's just a file.

25
00:01:19.361 --> 00:01:21.665
So let's do a little bit of this, okay?

26
00:01:21.665 --> 00:01:23.773
First off you can do a git
worktrree add to a path,

27
00:01:23.773 --> 00:01:26.205
the base name of the path will
be used as the branch name.

28
00:01:26.205 --> 00:01:31.365
If you don't know a base name is,
basename, foo bar baz.

29
00:01:33.375 --> 00:01:36.885
So this will automatically use
your path as a branch name.

30
00:01:36.885 --> 00:01:39.322
You can also add in the branch
name if you want it, or

31
00:01:39.322 --> 00:01:41.247
you can just Let it auto do it.

32
00:01:41.247 --> 00:01:44.377
Git worktree list will list
out your available worktrees.

33
00:01:44.377 --> 00:01:48.043
If you wanna delete it, you can
just delete the worktree folder and

34
00:01:48.043 --> 00:01:49.561
then call worktree prune.

35
00:01:49.561 --> 00:01:54.678
Or you can actually do a worktree remove
on the folder and it will do that.

36
00:01:54.678 --> 00:01:58.867
So depending on how you want to go
about it, it can do either way.

37
00:01:58.867 --> 00:02:02.673
The benefits is that, it's super cheap
to make, pretty much, like I said,

38
00:02:02.673 --> 00:02:04.326
pretty much as cheap as a branch.

39
00:02:04.326 --> 00:02:09.032
The real big con with the worktree,
is if there's high branch setup cost.

40
00:02:09.032 --> 00:02:11.318
So like if you npm install everything JS,
and

41
00:02:11.318 --> 00:02:15.004
it takes way too long to do anything,
well, that's a problem, right?

42
00:02:15.004 --> 00:02:17.730
And so if you have to build
like a rust project and

43
00:02:17.730 --> 00:02:22.709
it takes minutes upon minutes, you'll find
yourself a little bit more hesitant to use

44
00:02:22.709 --> 00:02:25.080
them depending on how long it takes.

45
00:02:25.080 --> 00:02:30.021
So we're gonna create a worktree in
hello-git and I want to use foo-bar

46
00:02:30.021 --> 00:02:35.200
as the last item in the path, so
it creates the branch, food dash bar.

47
00:02:35.200 --> 00:02:39.235
My suggestion is just go back one
folder from your root of hello-git and

48
00:02:39.235 --> 00:02:43.104
just use the dash, dash or dot,
dot, slash, foo, dash, bar.

49
00:02:43.104 --> 00:02:45.844
And when we're done,
check out the git folder.

50
00:02:45.844 --> 00:02:49.425
So I'm gonna go like this,
I'm gonna go git worktree add foo-bar,

51
00:02:49.425 --> 00:02:51.588
I think it probably already exists.

52
00:02:51.588 --> 00:02:53.486
Nice, it doesn't, let's go, there we go.

53
00:02:53.486 --> 00:02:58.934
We prepared a new worktree and it's been
checked out at this point right here.

54
00:02:58.934 --> 00:03:03.313
So it created a new branch at this current
point, which means if I open up foo-bar,

55
00:03:03.313 --> 00:03:05.060
you'll notice I'm in a repo.

56
00:03:05.060 --> 00:03:08.420
I can tell that I'm in a git repo because
I have this nice little thing right here.

57
00:03:08.420 --> 00:03:13.440
If I go git log, you can see revert e,
a plus nine merge, you can see

58
00:03:13.440 --> 00:03:20.269
all of our commits in here, we're in
the same repo, just on a different branch.

59
00:03:20.269 --> 00:03:23.030
Now, here's the best part about that,
let's cut out the git log or

60
00:03:23.030 --> 00:03:25.709
the git folder, remember,
it's not a folder anymore.

61
00:03:25.709 --> 00:03:29.448
It actually just tells you the file
just simply says, hey, I belong here.

62
00:03:31.245 --> 00:03:34.194
And so
tells you where the main working tree is,

63
00:03:34.194 --> 00:03:36.637
because this is a linked working tree.

64
00:03:36.637 --> 00:03:39.242
Yeah, I'm gonna do one little quick thing,
it's not in the notes, but

65
00:03:39.242 --> 00:03:40.275
we'll just do it right her.

66
00:03:40.275 --> 00:03:44.782
If I go like this, if I go foo,
put in some changes right here and

67
00:03:44.782 --> 00:03:47.265
go git status and go git add, git.

68
00:03:47.265 --> 00:03:51.515
Put in a little change really quickly
then I'm gonna go back to hello git.

69
00:03:51.515 --> 00:03:57.438
If I go, git log foo-bar,
my change is right there, right?

70
00:03:57.438 --> 00:03:59.140
Because it's a linked working tree.

71
00:03:59.140 --> 00:04:02.814
It's just another, you just have
another entrance into your folder.

72
00:04:02.814 --> 00:04:04.771
So that way, you can actually
have two running copies, right?

73
00:04:04.771 --> 00:04:07.361
So you could actually have
your feature development and

74
00:04:07.361 --> 00:04:09.023
then just like mainline over here.

75
00:04:09.023 --> 00:04:09.986
And so that way you can always,

76
00:04:09.986 --> 00:04:11.816
you only have like two folders
you're really working on.

77
00:04:11.816 --> 00:04:15.503
So anytime you need to like update code or
do some sort of like emergency switch,

78
00:04:15.503 --> 00:04:16.284
you can do that.

79
00:04:16.284 --> 00:04:19.383
And just leave your working tree
in whatever state it's in and

80
00:04:19.383 --> 00:04:21.529
then you never really switch branches, so

81
00:04:21.529 --> 00:04:24.706
the idea is that branch switching
is almost an anti-pattern.

82
00:04:24.706 --> 00:04:28.095
And instead, you just use work trees
constantly to build everything.

83
00:04:28.095 --> 00:04:32.148
And that way you never have to undo
stashing just does not exist, you just

84
00:04:32.148 --> 00:04:36.286
simply have the file or the branch out
as its own folder with its own state.

85
00:04:36.286 --> 00:04:39.425
And then when you're done, you just prune
it, you got, you just get rid of it.

86
00:04:39.425 --> 00:04:43.260
And so that's kind of the idea, like the
ideal idea, you can also just have like

87
00:04:43.260 --> 00:04:47.403
two versions of itself where you switch
branches all you want, there's some moves.

88
00:04:47.403 --> 00:04:51.470
And so if I go like this, git worktree
list, it'll tell me my two worktrees,

89
00:04:51.470 --> 00:04:53.552
I have my main working tree right here.

90
00:04:53.552 --> 00:04:56.838
And then I have this one,
which is my linked working tree, foo-bar.

91
00:04:59.324 --> 00:05:03.308
Pretty cool, I like this one,
I really do like them.

92
00:05:03.308 --> 00:05:05.730
Now remember, there's two ways
you can delete them, of course.

93
00:05:05.730 --> 00:05:11.135
So that means I can go rm-rf foo-bar and
once I do that,

94
00:05:11.135 --> 00:05:15.735
if I go worktree list,
you'll see right here,

95
00:05:15.735 --> 00:05:19.781
it knows,
That this thing no longer exists.

96
00:05:19.781 --> 00:05:24.645
So now you're probably thinking,
how does it know that it no longer exists?

97
00:05:24.645 --> 00:05:28.278
It means not only is there a link from
your linked working tree to your main

98
00:05:28.278 --> 00:05:32.412
line, your main line must also have that
information out to the linked work tree.

99
00:05:32.412 --> 00:05:34.643
I'm not sure if I know where it is,
honestly just off the top of my head.

100
00:05:34.643 --> 00:05:36.261
I think I do, I bet.

101
00:05:36.261 --> 00:05:39.415
Totally preplanned,
then you can see worktrees, right, so

102
00:05:39.415 --> 00:05:41.243
you can actually see it right here.

103
00:05:41.243 --> 00:05:45.129
So you can see here it is bad, you can
see what head it's supposed to be at,

104
00:05:45.129 --> 00:05:46.336
you can see the git dr.

105
00:05:46.336 --> 00:05:48.434
So you'll notice that this
is no longer a thing,

106
00:05:48.434 --> 00:05:51.453
it probably just stats out the file and
notices if the file is missing,

107
00:05:51.453 --> 00:05:54.902
it just says, hey, this is a provable
worktree, you've already deleted it.

108
00:05:54.902 --> 00:05:58.402
And so, that's how it effectively is
able to understand that I've deleted it

109
00:05:58.402 --> 00:05:59.742
outside of git.

110
00:05:59.742 --> 00:06:03.198
So now,
I can just go git worktree prune and

111
00:06:03.198 --> 00:06:07.041
if I go git worktree list,
it's gone, right?

112
00:06:07.041 --> 00:06:09.606
Awesome, I think it's great,
I really liked, I love worktrees,

113
00:06:09.606 --> 00:06:10.915
they're absolutely fantastic.

114
00:06:10.915 --> 00:06:16.709
They just solved that one really annoying
problem of having to switch things,

115
00:06:16.709 --> 00:06:20.499
stash things,
commit things early, any of that.

116
00:06:22.809 --> 00:06:25.844
All right, yeah,
we can [INAUDIBLE] git worktree, remove,

117
00:06:25.844 --> 00:06:27.521
we don't need to do that one too.

118
00:06:27.521 --> 00:06:30.702
I do love worktrees though,
they're just my favorite.

119
00:06:30.702 --> 00:06:34.362
There is also env files, are really
painful, so if you have env file,

120
00:06:34.362 --> 00:06:37.775
if it's checked into the repo,
which would be a little unusual,

121
00:06:37.775 --> 00:06:39.966
if that's the case, then you're fine.

122
00:06:39.966 --> 00:06:43.868
But if If it's not checked into the repo,
then you have like this whole like copying

123
00:06:43.868 --> 00:06:47.623
of your env file around node modules,
goes great, it just builds really fast.

124
00:06:47.623 --> 00:06:50.776
So that just works out, but everything
else kinda tends to be a little bit more

125
00:06:50.776 --> 00:06:52.976
of a pain that way, so
just something to think about.

