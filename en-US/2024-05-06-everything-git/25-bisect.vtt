WEBVTT

1
00:00:00.200 --> 00:00:04.150
Honestly, log searching tends to
be a drag, often doesn't work.

2
00:00:04.150 --> 00:00:07.204
If I could spend one minute looking at the
logs to find a bug that could take me two

3
00:00:07.204 --> 00:00:07.805
hours to find,

4
00:00:07.805 --> 00:00:10.850
of course I'll always make that trade
off while it's shot in the dark.

5
00:00:10.850 --> 00:00:12.370
But most of the time you have to do this.

6
00:00:12.370 --> 00:00:13.830
Get bisect.

7
00:00:13.830 --> 00:00:18.219
Bisect works by searching through gits
commits for you, and you get to mark

8
00:00:18.219 --> 00:00:22.412
if something's good or bad,
however you decide, it's good and bad.

9
00:00:22.412 --> 00:00:26.997
And then it will do the legwork to
determine which commit you should look at.

10
00:00:26.997 --> 00:00:28.308
So it's pretty clever.

11
00:00:28.308 --> 00:00:32.457
There's some unique properties
that make this true.

12
00:00:32.457 --> 00:00:33.447
All commits are ordered.

13
00:00:33.447 --> 00:00:38.249
I've been saying this, I intentionally
said this is that the order of commits

14
00:00:38.249 --> 00:00:42.321
is effectively timed, which means
that if If I go back one commit,

15
00:00:42.321 --> 00:00:45.745
that commit should be
further back in time.

16
00:00:45.745 --> 00:00:47.325
And so
you can kind of see how that would work.

17
00:00:47.325 --> 00:00:51.549
That means if I go halfway back, I've
gone halfway through or effectively our

18
00:00:51.549 --> 00:00:55.845
project's lifecycle of some sort,
however, if they're evenly spaced out.

19
00:00:55.845 --> 00:00:59.438
So everything is in order, which means
it kind of acts like an ordered array,

20
00:00:59.438 --> 00:00:59.947
correct?

21
00:00:59.947 --> 00:01:04.116
In some sense, yeah,
it's like an ordered array.

22
00:01:04.116 --> 00:01:05.588
Another thing that you need to have for

23
00:01:05.588 --> 00:01:07.436
bisect is that you need
to know the two changes.

24
00:01:07.436 --> 00:01:09.956
It doesn't matter how far apart they are.

25
00:01:09.956 --> 00:01:12.068
Let's just say you know that
it's currently broken, so

26
00:01:12.068 --> 00:01:14.106
you go back 1,000 commits,
and it's working.

27
00:01:14.106 --> 00:01:14.716
That's fine.

28
00:01:14.716 --> 00:01:18.386
You just need a point in time
in which there's two changes.

29
00:01:18.386 --> 00:01:18.936
That's it.

30
00:01:18.936 --> 00:01:23.014
So let's talk about property one,
because I think it's really interesting.

31
00:01:23.014 --> 00:01:27.778
If it currently fails and you go back
10 commits and it's still failing,

32
00:01:27.778 --> 00:01:31.124
what can you say about
going back 9 commits?

33
00:01:31.124 --> 00:01:31.934
Is it gonna pass or fail?

34
00:01:33.594 --> 00:01:37.134
How about eight commits, fail,
seven commits, fail, six, five,

35
00:01:37.134 --> 00:01:38.954
four, three, two, one.

36
00:01:38.954 --> 00:01:40.646
All of them are going to fail, right?

37
00:01:40.646 --> 00:01:43.526
That's the idea of Git bisect,
is that due to time and

38
00:01:43.526 --> 00:01:47.174
assuming that the bug isn't somewhere
highs and bug floating in and

39
00:01:47.174 --> 00:01:51.913
out of space, you should be able to
quickly go to the correct solution.

40
00:01:51.913 --> 00:01:56.136
So to kind of put it visually,
if you had commit a and commit b and

41
00:01:56.136 --> 00:01:58.869
you have no idea where it's failing at.

42
00:01:58.869 --> 00:02:02.240
If you picked the middle commit c and
you test it,

43
00:02:04.659 --> 00:02:08.551
If c works,
what can you say about this graph?

44
00:02:11.951 --> 00:02:17.055
&gt;&gt; The problem lies between c and
whatever followed it.

45
00:02:17.055 --> 00:02:19.325
&gt;&gt; C and b, right?

46
00:02:19.325 --> 00:02:22.609
You've cut the space in half where
the problem could be, right?

47
00:02:22.609 --> 00:02:27.140
Yay, or, yeah, the problem lies by just
say it inverted, a through c is good.

48
00:02:27.140 --> 00:02:29.959
And this other side is unknown.

49
00:02:29.959 --> 00:02:33.259
And so the exact opposite is true
given the exact same situation again,

50
00:02:33.259 --> 00:02:35.169
if c fails, what can we say?

51
00:02:35.169 --> 00:02:39.558
Well, we can say that between c and
b, it's bad and between c and a,

52
00:02:39.558 --> 00:02:41.459
we just don't know yet.

53
00:02:41.459 --> 00:02:43.029
So we don't know if it's good or bad.

54
00:02:43.029 --> 00:02:47.499
We just know it's bad at c, so
it's bad all the way up to b.

55
00:02:47.499 --> 00:02:53.259
So that means we can cut half
the space every single search.

56
00:02:53.259 --> 00:02:56.769
And this is the fundamental for
binary search.

57
00:02:56.769 --> 00:02:59.712
This is, if you think about a binary tree,
walking binary tree,

58
00:02:59.712 --> 00:03:02.026
it's the exact same kind
of principle in general.

59
00:03:02.026 --> 00:03:05.635
This, we're just doing
it with commits instead.

60
00:03:05.635 --> 00:03:09.089
&gt;&gt; Does using bisect make an argument
against rebase since it needs to be

61
00:03:09.089 --> 00:03:09.632
in order?

62
00:03:11.642 --> 00:03:14.942
&gt;&gt; No, rebase, I mean it's about
your history of your branch.

63
00:03:14.942 --> 00:03:18.612
I mean, you've moved your stuff forward,
but at some point, it's committed and

64
00:03:18.612 --> 00:03:20.165
it's in the branch or it's in.

65
00:03:20.165 --> 00:03:24.257
So yeah, if you move your stuff forward
and you test it and it's still broken,

66
00:03:24.257 --> 00:03:26.928
then it's broken until you
find a working commit.

67
00:03:26.928 --> 00:03:28.478
It doesn't really change anything.

68
00:03:30.758 --> 00:03:33.061
All right, by the way,
I don't know if you know this, but

69
00:03:33.061 --> 00:03:35.395
Frontend Masters has
a free algorithm course.

70
00:03:35.395 --> 00:03:37.345
I heard the guy that teaches it,
it's pretty cool.

71
00:03:37.345 --> 00:03:38.795
That's what I've been told.

72
00:03:38.795 --> 00:03:42.822
Kind of sounds like Gilbert Godfrey
though, or Charlie Day, wish Charlie Day.

73
00:03:42.822 --> 00:03:45.752
Yeah, that's another one that someone said
to me, and it really hurt my feelings.

74
00:03:47.102 --> 00:03:48.472
Anyways, it's full free.

75
00:03:48.472 --> 00:03:50.252
Hashtag ad, everybody, hashtag ad.

76
00:03:50.252 --> 00:03:53.332
Okay, so the pros you don't need
to know anything about the bug.

77
00:03:53.332 --> 00:03:57.314
You don't need to rely on commit messages,
you don't need to rely on anything other

78
00:03:57.314 --> 00:03:59.913
than a way to test to see if
it is working or not working.

79
00:03:59.913 --> 00:04:02.982
It's the fastest way to
search a sorted space is

80
00:04:02.982 --> 00:04:06.149
via cutting the space in
half every single time.

81
00:04:06.149 --> 00:04:07.369
There's no faster way.

82
00:04:07.369 --> 00:04:08.839
Unless if you have some sort of HashMap.

83
00:04:08.839 --> 00:04:11.682
Then once you know where the good and
bad are, right, that's hash mapping.

84
00:04:11.682 --> 00:04:14.469
You don't have to search only for a bug.

85
00:04:14.469 --> 00:04:18.285
So if there's a performance regression,
say there's a performance improvement,

86
00:04:18.285 --> 00:04:20.836
say there's anything and
you want to find it happening.

87
00:04:20.836 --> 00:04:23.794
If you have a test that you can prove
that it does and doesn't happen,

88
00:04:23.794 --> 00:04:26.636
you can bisect your way to
the commit that changed whatever.

89
00:04:26.636 --> 00:04:29.096
So it's a way to do change
detection more than anything else.

90
00:04:30.936 --> 00:04:33.928
The only con is that if it
takes a lot of time to test and

91
00:04:33.928 --> 00:04:37.125
you could do some alternative
means to find the change,

92
00:04:37.125 --> 00:04:40.318
maybe a quick log search
will be your best friend.

93
00:04:40.318 --> 00:04:44.494
Just to like give a shot in the dark as
opposed to having to deal with bisect for

94
00:04:44.494 --> 00:04:46.143
hours if it takes a long time.

95
00:04:46.143 --> 00:04:47.733
Anyways, so you get the idea.

96
00:04:47.733 --> 00:04:50.099
So when you cut space in half,
it's log of n.

97
00:04:50.099 --> 00:04:52.911
So it takes seven searches
to go through 128 commits,

98
00:04:52.911 --> 00:04:55.248
one search to go through one commit,
right?

99
00:04:55.248 --> 00:04:58.948
So it doesn't grow very fast at all,
grows logarithmically.

100
00:04:58.948 --> 00:04:59.887
It's very fantastic.

101
00:04:59.887 --> 00:05:03.318
All right, so the basics of bisect,
all you do is you say git bisect start,

102
00:05:03.318 --> 00:05:07.462
then you say get bisect bad saying,
hey, the current commit's bad.

103
00:05:07.462 --> 00:05:10.960
Then you select a good commit, and
then at that point, you test and

104
00:05:10.960 --> 00:05:13.462
you just tell it whether it's good or bad.

105
00:05:13.462 --> 00:05:18.098
Just start checking out stuff until it
gets to the exact point in which it found

106
00:05:18.098 --> 00:05:19.052
the error.

107
00:05:19.052 --> 00:05:22.632
So you just keep on doing this over and
over again until it stops.

108
00:05:22.632 --> 00:05:23.912
So we're gonna do the exact same thing.

109
00:05:23.912 --> 00:05:26.951
We're gonna take the first commit of
the repo and the current tip of master and

110
00:05:26.951 --> 00:05:28.752
we're gonna try to find
where does it break.

111
00:05:30.412 --> 00:05:35.512
So git bisect start, step one.

112
00:05:35.512 --> 00:05:38.562
Then git bisect bad.

113
00:05:38.562 --> 00:05:41.167
So I'm saying this commit
is the bad commit.

114
00:05:42.547 --> 00:05:44.887
Now we need to get the very
first commit of the repo.

115
00:05:44.887 --> 00:05:46.567
There's a lot of different ways to do it.

116
00:05:46.567 --> 00:05:49.467
So I'll just go like this,
git log --oneLine.

117
00:05:49.467 --> 00:05:51.037
This is just very, very easy.

118
00:05:51.037 --> 00:05:52.037
There it is right there.

119
00:05:53.737 --> 00:05:58.272
So I'll just copy this one out,
the b56ed57.

120
00:05:58.272 --> 00:06:02.720
And then I can go git
bisect good right there.

121
00:06:02.720 --> 00:06:05.630
So I'm gonna search the entire
repo from beginning to end.

122
00:06:06.880 --> 00:06:07.660
There we go.

123
00:06:07.660 --> 00:06:11.930
It says bisecting 11
revisions roughly four steps.

124
00:06:11.930 --> 00:06:14.160
So is this one good or bad?

125
00:06:14.160 --> 00:06:16.060
I'll go like this, npm run test.

126
00:06:16.060 --> 00:06:19.370
&gt;&gt; I wanted to say binary search so
much when you're talking about that.

127
00:06:19.370 --> 00:06:21.071
I was just thinking, it's right there.

128
00:06:21.071 --> 00:06:21.921
&gt;&gt; It's right there.

129
00:06:21.921 --> 00:06:24.041
All right, look at that, it failed.

130
00:06:24.041 --> 00:06:27.041
Okay, by the way, npm run,
it doesn't run it once.

131
00:06:27.041 --> 00:06:31.341
It just keeps it on watch mode, because
by test default, apparently it's watch.

132
00:06:31.341 --> 00:06:34.861
So that means we need
to go git bisect bad.

133
00:06:35.891 --> 00:06:37.431
And there it goes.

134
00:06:37.431 --> 00:06:40.092
There's five revisions left,
roughly three steps.

135
00:06:41.158 --> 00:06:41.792
Look at that.

136
00:06:41.792 --> 00:06:43.402
This one passed, fantastic.

137
00:06:43.402 --> 00:06:46.332
So I'll say, git bisect good.

138
00:06:47.732 --> 00:06:50.022
All right, two revisions left,
roughly two steps.

139
00:06:51.072 --> 00:06:51.992
Let's run test.

140
00:06:51.992 --> 00:06:53.672
All right, look at that, it passed.

141
00:06:53.672 --> 00:06:56.602
So we'll do a little git bisect good.

142
00:06:56.602 --> 00:06:59.127
And now there are zero revisions left.

143
00:06:59.127 --> 00:07:00.807
This is the last step.

144
00:07:00.807 --> 00:07:05.165
I'll run it once more, and now either
the commit I'm on is the good one or

145
00:07:05.165 --> 00:07:06.341
the bad one.

146
00:07:06.341 --> 00:07:09.768
And so it's able to tell if it's good,
that means the next commit over is the bad

147
00:07:09.768 --> 00:07:13.261
one, the offending commit, the bad change,
or this is the offending change.

148
00:07:13.261 --> 00:07:16.231
And so
it'll be able to tell with this last test.

149
00:07:16.231 --> 00:07:18.204
I refuse to git rebase this, I refuse.

150
00:07:21.064 --> 00:07:24.986
We will experience the wait together.

151
00:07:24.986 --> 00:07:26.342
All right, so this one failed.

152
00:07:26.342 --> 00:07:31.372
So I just got to go like this,
git bisect bad.

153
00:07:33.812 --> 00:07:36.462
And porque maria, whoa, right there.

154
00:07:37.492 --> 00:07:38.102
It says right here.

155
00:07:38.102 --> 00:07:40.852
It says apparently zero steps left,
which is a little suspicious.

156
00:07:40.852 --> 00:07:43.335
Okay, well, we gotta run
the test once more, apparently.

157
00:07:45.465 --> 00:07:47.865
I'm not exactly sure why
this one went this way.

158
00:07:47.865 --> 00:07:52.275
In all the times I did it,
it actually was done after four of them.

159
00:07:52.275 --> 00:07:55.655
But I guess we're gonna wait,
one last 30 seconds.

160
00:07:55.655 --> 00:08:01.293
Porque 972fasa.

161
00:08:04.473 --> 00:08:06.118
Well, look at that.

162
00:08:06.118 --> 00:08:07.788
Git bisect bad.

163
00:08:09.188 --> 00:08:13.648
So tells you right here,
this one is where it went wrong.

164
00:08:13.648 --> 00:08:16.528
And this is the commit,
in fact, which went wrong.

165
00:08:16.528 --> 00:08:18.043
So it was able to go through and

166
00:08:18.043 --> 00:08:20.909
we're able to kind of find
where the problem was.

167
00:08:20.909 --> 00:08:21.939
But here's the deal.

168
00:08:21.939 --> 00:08:23.009
Was that kind of annoying?

169
00:08:23.009 --> 00:08:24.589
Was that like not a fun experience?

170
00:08:24.589 --> 00:08:28.149
Here, I'm gonna scroll all the way
through this, you can automate it.

171
00:08:28.149 --> 00:08:33.649
So, well, let's do it again, but this
time let's add the word run to it, okay?

172
00:08:33.649 --> 00:08:36.209
So I'm gonna go here and
I'm gonna go, let's see.

173
00:08:36.209 --> 00:08:41.383
Git status, git a bisect reset.

174
00:08:41.383 --> 00:08:43.623
We're back at the tip.

175
00:08:43.623 --> 00:08:48.933
So now we just gotta go like this,
git bisect start,

176
00:08:48.933 --> 00:08:54.203
git bisect bad, and
git bisect good, right here.

177
00:08:54.203 --> 00:08:56.293
And then go git bisect run.

178
00:08:56.293 --> 00:08:57.849
And then I think it's, what is it?

179
00:08:57.849 --> 00:09:03.089
It's, node_modules/

180
00:09:03.089 --> 00:09:08.330
.bin/vitest --run.

181
00:09:08.330 --> 00:09:11.294
If you do --run, it doesn't try to watch.

182
00:09:11.294 --> 00:09:12.674
Therefore, it'll just quit, right?

183
00:09:14.704 --> 00:09:15.234
We'll do that.

184
00:09:17.524 --> 00:09:21.760
And now all we have to do is just wait.

185
00:09:21.760 --> 00:09:22.698
Just a little bit of waiting.

186
00:09:22.698 --> 00:09:25.620
By the way, I see some people saying
they didn't know that this existed.

187
00:09:25.620 --> 00:09:29.123
This is why it's really good to always
just do a quick little run through of

188
00:09:29.123 --> 00:09:31.496
the friendly manual or
a couple git searches, and

189
00:09:31.496 --> 00:09:34.232
just kind of know how the things work or
how people use it.

190
00:09:34.232 --> 00:09:37.878
Because often you'll find that you're
doing something fairly inefficient when

191
00:09:37.878 --> 00:09:40.674
the better thing is just
right around the corner.

192
00:09:40.674 --> 00:09:41.324
Look at this.

193
00:09:41.324 --> 00:09:41.878
Hey, look at that.

194
00:09:41.878 --> 00:09:42.818
It found the commit.

195
00:09:42.818 --> 00:09:43.580
Look at that.

196
00:09:43.580 --> 00:09:44.720
We didn't even do anything.

197
00:09:44.720 --> 00:09:46.304
Found the commit right here.

198
00:09:46.304 --> 00:09:47.264
How nice is that?

199
00:09:47.264 --> 00:09:48.440
So bisect run is really nice.

200
00:09:48.440 --> 00:09:52.012
You should definitely use bisect
run if you have a problem,

201
00:09:52.012 --> 00:09:55.450
especially if it can be boiled
down to a quick test to run.

202
00:09:55.450 --> 00:09:56.370
Beautiful, right?

