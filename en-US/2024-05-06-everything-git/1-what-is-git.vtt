WEBVTT

1
00:00:00.090 --> 00:00:03.299
Git is a distributed version control,
which is much different,

2
00:00:03.299 --> 00:00:07.050
at one point in time, we used to have
a centralized version control system.

3
00:00:07.050 --> 00:00:11.189
Which meant that I would check out file A,
and if I happened to go on vacation,

4
00:00:11.189 --> 00:00:15.729
you could just never edit file A, that was
mine, it's mine until I check it back in.

5
00:00:15.729 --> 00:00:17.175
And this is most people's,

6
00:00:17.175 --> 00:00:20.973
development style up until till we
started having distributed versions,

7
00:00:20.973 --> 00:00:24.956
the thing that's awesome about git,
is that you have your version.

8
00:00:24.956 --> 00:00:30.166
Your version doesn't have to represent
the reality of some remote version.

9
00:00:30.166 --> 00:00:35.467
It's just your version until you wish
to update it till you wish to sync and

10
00:00:35.467 --> 00:00:38.301
so that's what makes git so dang good.

11
00:00:38.301 --> 00:00:41.378
In git,
there's kind of two levels of commands,

12
00:00:41.378 --> 00:00:45.696
there's the porcelain commands and
then the plumbing commands.

13
00:00:45.696 --> 00:00:48.293
We're gonna go over mostly
porcelain commands, but

14
00:00:48.293 --> 00:00:49.916
we will get down to the plumbing.

15
00:00:49.916 --> 00:00:54.562
We will kind of try to understand how git
works and hopefully the big takeaway from

16
00:00:54.562 --> 00:00:58.408
this course is that you understand
how gits data structure works.

17
00:00:58.408 --> 00:01:01.611
So that way you don't feel
confused when you use it.

18
00:01:01.611 --> 00:01:05.391
When you use rebase or you revert or
you cherry-pick any of those things,

19
00:01:05.391 --> 00:01:07.471
you understand how these things work,

20
00:01:07.471 --> 00:01:10.321
and therefore it's simple,
nothing hard about it.

21
00:01:12.611 --> 00:01:14.916
Some key terms I'm gonna
use the term repo,

22
00:01:14.916 --> 00:01:17.231
a repo simply means
a project rocked by git.

23
00:01:17.231 --> 00:01:20.402
It's a folder or I use folder
because I grew up with windows,

24
00:01:20.402 --> 00:01:21.903
that's just how it works.

25
00:01:21.903 --> 00:01:23.993
It's a directory,
some people call it a directory and

26
00:01:23.993 --> 00:01:25.773
are offended when I use the term folder.

27
00:01:25.773 --> 00:01:27.929
Either way,
you'll see me use those two terms, but

28
00:01:27.929 --> 00:01:30.683
a repo is just simply something
with a git folder in it.

29
00:01:30.683 --> 00:01:34.854
That means it's being tracked actively by
git, and if you're on windows, I don't

30
00:01:34.854 --> 00:01:39.023
know exactly how it looks if you're
on just actual windows, not WSL 2.

31
00:01:39.023 --> 00:01:43.010
And so I assume, it's probably the same
thing, some sort of hidden folder that

32
00:01:43.010 --> 00:01:46.470
exists on Windows that tracks
all your stuff, I don't know.

33
00:01:46.470 --> 00:01:52.250
A commit is just simply a point in time
representing the project in its entirety.

34
00:01:52.250 --> 00:01:56.090
Now, for those that are somewhat familiar
with Git, that might be a bit surprising.

35
00:01:56.090 --> 00:01:58.224
You probably think that
it stores differentials,

36
00:01:58.224 --> 00:02:00.518
it's here's from one change to the next.

37
00:02:00.518 --> 00:02:04.692
No, every single commit is
the entirety of the code base, and

38
00:02:04.692 --> 00:02:09.138
it can be regenerated from that one and
single commit.

39
00:02:09.138 --> 00:02:13.107
So kind of always a little bit of a
shocker, and commits are often denoted by

40
00:02:13.107 --> 00:02:17.331
a 40 character, a through f, zero
through nine hexadecimal kind of string.

41
00:02:17.331 --> 00:02:21.734
And that's going to be based off
the contents of the change, the author,

42
00:02:21.734 --> 00:02:23.235
the time, everything.

43
00:02:24.325 --> 00:02:29.915
I'll often use the term index, this can be
kind of interchangeably used with staging.

44
00:02:29.915 --> 00:02:34.849
Staging is the area in which you prepare
the changes you wish to commit, and

45
00:02:34.849 --> 00:02:40.426
when you commit, anything in the staging
area or the index will be committed.

46
00:02:40.426 --> 00:02:45.556
So if you have unstaged items, they
won't be committed, they'll remain red.

47
00:02:45.556 --> 00:02:48.554
That's why you can kind of pick one
file to commit not the other one,

48
00:02:48.554 --> 00:02:50.906
it's because there is a staging area.

49
00:02:50.906 --> 00:02:55.173
I will probably toss out the term squash
at some point, which really means to take

50
00:02:55.173 --> 00:02:58.766
a commit or to take two commits and
turn it into one commit.

51
00:02:58.766 --> 00:03:01.755
That's squashing by one level,
you can take N commits and

52
00:03:01.755 --> 00:03:05.593
turn it into N minus one or less commits,
that'd be an act of squashing.

53
00:03:05.593 --> 00:03:11.083
If I say the term work tree, working tree,
main working tree, this is your git repo.

54
00:03:11.083 --> 00:03:14.703
You'll see it a lot in the documentation,
this term working tree all the time.

55
00:03:14.703 --> 00:03:17.721
Working tree is just the fancy term for
your stuff,

56
00:03:17.721 --> 00:03:22.355
it's what is being tracked by git and
has some sort of history in it.

57
00:03:22.355 --> 00:03:26.860
I'll use the term untracked, staged and
tracked, I could use effectively,

58
00:03:26.860 --> 00:03:29.395
let's go to ExcaliDraw for a quick second.

59
00:03:30.725 --> 00:03:34.735
But the easiest way to kinda describe it
is that at some point when you're using

60
00:03:34.735 --> 00:03:37.125
git, there exists all of your files,
right?

61
00:03:37.125 --> 00:03:39.240
You haven't done anything,
you haven't added it,

62
00:03:39.240 --> 00:03:41.412
this is the untracked kind of region.

63
00:03:41.412 --> 00:03:45.361
Then at some point, you're going to
want to start tracking them, and so

64
00:03:45.361 --> 00:03:48.002
you track them by adding
them to the index.

65
00:03:48.002 --> 00:03:51.359
And so that's why when I say staging,
this is what I mean by that,

66
00:03:51.359 --> 00:03:55.385
let me get a better color, let's call,
I guess brown, we'll go with brown,

67
00:03:55.385 --> 00:03:57.112
that's a pretty nice color.

68
00:03:57.112 --> 00:04:00.816
So this is your staging area, staging
is just simply git being ready, and

69
00:04:00.816 --> 00:04:03.468
this is always every single
flow you'll ever have.

70
00:04:03.468 --> 00:04:07.047
You'll have some sort of untracked
file that becomes staging, and

71
00:04:07.047 --> 00:04:08.690
then once it becomes staging.

72
00:04:08.690 --> 00:04:11.459
It's gonna go one more
time when you commit and

73
00:04:11.459 --> 00:04:14.656
then it's fully tracked by
git with a history, and so

74
00:04:14.656 --> 00:04:18.658
it's kind of a three-step process
anytime you're using git.

75
00:04:18.658 --> 00:04:20.945
And so if you don't have this
kind of picture in your head,

76
00:04:20.945 --> 00:04:23.146
I think you'll find git
to be more difficult.

77
00:04:23.146 --> 00:04:26.938
You have not tracked I'm tracking, but
I'm not committed, I'm committed, and

78
00:04:26.938 --> 00:04:29.716
long as you kind of look at it
in that way, it will make sense.

79
00:04:29.716 --> 00:04:31.191
And once you've added a file,

80
00:04:31.191 --> 00:04:34.666
then you get new possibilities because
git knows that it already exists.

81
00:04:34.666 --> 00:04:39.591
So when you add a change, you're in
this tracked, but not staged cycle,

82
00:04:39.591 --> 00:04:44.358
makes things a little bit easier to
kind of think about if you just always

83
00:04:44.358 --> 00:04:46.518
keep that picture in your head.

84
00:04:46.518 --> 00:04:49.611
All right, and then let's see, yeah, we've
already talked about all three of those,

85
00:04:49.611 --> 00:04:50.158
so fantastic.

86
00:04:50.158 --> 00:04:53.012
Some key facts about git is
that git is an acyclic graph,

87
00:04:53.012 --> 00:04:55.138
if you don't know what an acyclic graph,

88
00:04:55.138 --> 00:04:58.618
take free data structures course
on frontend masters, am I right?

89
00:04:58.618 --> 00:05:03.185
Everybody frontendmasters.com/courses/algorithms you may have

90
00:05:03.185 --> 00:05:08.608
heard of it, it's pretty fantastic. In git, every commit is a node in the graph.

91
00:05:08.608 --> 00:05:12.690
And each pointer is a child-parent
relationship, meaning that you can have

92
00:05:12.690 --> 00:05:16.038
more than one parent, but
you cannot have a cycle in the graph.

93
00:05:16.038 --> 00:05:20.778
I wouldn't even know how you would commit
a cycle in the graph, it just doesn't

94
00:05:20.778 --> 00:05:25.401
make any sense, if you delete untracked
files, they are just lost forever.

95
00:05:25.401 --> 00:05:26.259
That is your bad,

96
00:05:26.259 --> 00:05:30.633
there's that hilarious Github post where
someone yells about losing 5,000 files.

97
00:05:30.633 --> 00:05:34.403
Because they didn't realize that if
you don't have something tracked,

98
00:05:34.403 --> 00:05:35.811
it will go bye bye forever.

99
00:05:35.811 --> 00:05:40.525
So make sure you know that about Git if
you delete a file, that could be it, bye.

100
00:05:40.525 --> 00:05:44.594
Second, always, man git dash, start there,

101
00:05:44.594 --> 00:05:49.295
read the friendly manual,
most of it's pretty good.

102
00:05:50.655 --> 00:05:55.275
Some of it still sucks, I actually don't
even understand when I read a man git-tag.

103
00:05:55.275 --> 00:05:58.542
I still don't really know what's happening
when I read it, it's kind of just it's It

104
00:05:58.542 --> 00:06:01.121
feels strange to read, so
sometimes you gotta go on the internet.

105
00:06:01.121 --> 00:06:03.110
But for the most part, it's pretty good,

106
00:06:03.110 --> 00:06:06.591
I know that a lot of you probably
just have these five commands.

107
00:06:06.591 --> 00:06:11.383
So this is kind of the typical git
experience, push, pull, add, commit and

108
00:06:11.383 --> 00:06:12.321
status.

109
00:06:12.321 --> 00:06:14.765
Everything else mysterious and
painful. In this course,

110
00:06:14.765 --> 00:06:17.734
my goal is either you have zero
knowledge or around that knowledge.

111
00:06:17.734 --> 00:06:21.640
And we want to take it a step further to
where you can use most features of git

112
00:06:21.640 --> 00:06:22.145
easily.

113
00:06:23.205 --> 00:06:27.805
The reality is if you're comfortable with
rebase, rerere, ref-log, log, cat file,

114
00:06:27.805 --> 00:06:30.555
config and reset,
this course might not be for you.

115
00:06:30.555 --> 00:06:33.602
Just real talk, if you're already
pretty that far into git,

116
00:06:33.602 --> 00:06:36.945
I don't think you're going to
get a whole bunch out of this.

117
00:06:36.945 --> 00:06:40.534
And so, I don't want you to get your hopes
up that we're actually going to be making

118
00:06:40.534 --> 00:06:43.633
git, we're gonna be going over it and
making you practically useful.

119
00:06:43.633 --> 00:06:48.937
Because the hardest part about working on
a job is usually never the code itself,

120
00:06:48.937 --> 00:06:53.783
it's the poor decisions you've
made in the past about the code.

121
00:06:53.783 --> 00:06:56.983
And then second, working with some sort
of version control with everybody else.

122
00:06:56.983 --> 00:07:00.976
So once you get past that first part about
you being a bad programmer, don't worry,

123
00:07:00.976 --> 00:07:03.575
I'm a bad programmer too
we're all bad programmers.

124
00:07:03.575 --> 00:07:07.655
But after that it's just being able to be
effective with 40 people all committing to

125
00:07:07.655 --> 00:07:10.416
one code base, and
there's a lot of strategy there.

126
00:07:10.416 --> 00:07:14.101
And the worst part is when you have to
revert and no one has a git policy and

127
00:07:14.101 --> 00:07:17.556
it becomes impossible to revert
your change due to merge commits.

128
00:07:17.556 --> 00:07:20.937
How many different little tiny
commits that are all interweaved and

129
00:07:20.937 --> 00:07:22.299
it becomes a nightmare, so

130
00:07:22.299 --> 00:07:26.049
we're gonna hopefully have some sort
of sense about git by the end of this.

