WEBVTT

1
00:00:00.168 --> 00:00:04.034
We're going to talk about HEAD, you've
seen it already, it's been in the log,

2
00:00:04.034 --> 00:00:06.737
you see this constant head dash,
whatever branch name.

3
00:00:06.737 --> 00:00:08.718
It probably is a little bit confusing,

4
00:00:08.718 --> 00:00:12.809
you should rarely use it if you don't have
to, you should try not to play with it.

5
00:00:12.809 --> 00:00:16.207
It always causes so many problems the
moment you start checking things out but

6
00:00:16.207 --> 00:00:18.147
if you know how to use it, it's fantastic.

7
00:00:18.147 --> 00:00:21.840
I use it all the time for interactive
rebasing I'll do like a head tilde six,

8
00:00:21.840 --> 00:00:25.608
I'm able to squash everything,
it's fantastic, but it can also be a pain.

9
00:00:25.608 --> 00:00:30.484
So throughout this course,
you'll see this, so what is HEAD?

10
00:00:30.484 --> 00:00:33.436
We can do some experimenting,
so what I want you to do is,

11
00:00:33.436 --> 00:00:37.081
I want you to check out trunk and
then I want you to execute log one line.

12
00:00:41.125 --> 00:00:44.944
I'll add a little one line there,
you'll see had points to trunk,

13
00:00:44.944 --> 00:00:47.628
everyone should see that,
let's do it again.

14
00:00:47.628 --> 00:00:52.443
I want you to checkout foo, and
then I want you to do another

15
00:00:52.443 --> 00:00:57.182
git log one line, so
git checkout foo, git log one line.

16
00:00:57.182 --> 00:01:01.647
Again head stamp pointing to foo, so
it's like every time we change, branches,

17
00:01:01.647 --> 00:01:05.479
notice that head's pointing to
whatever branch we have checked out.

18
00:01:05.479 --> 00:01:06.560
Okay, this is important.

19
00:01:09.978 --> 00:01:13.068
Go check out the git folder and
tell me what head is pointing to.

20
00:01:16.913 --> 00:01:19.986
So if you go in here and you go ls git,

21
00:01:19.986 --> 00:01:25.843
you'll see that that like named item
is just a top level item in git.

22
00:01:25.843 --> 00:01:32.324
So if I cat git/HEAD,
my goodness, just auto complete,

23
00:01:32.324 --> 00:01:38.822
you'll see right here it's a ref to foo,
that's all it is.

24
00:01:38.822 --> 00:01:41.760
It's just this thing
that exists right there,

25
00:01:41.760 --> 00:01:46.693
it's just a pointer to whatever you're
currently using, it's really nice.

26
00:01:46.693 --> 00:01:53.203
Once you see that it's just not that
magical, that means if I go cat refs or

27
00:01:53.203 --> 00:01:57.943
git refs heads foo,
you'll see it's just a commit.

28
00:01:57.943 --> 00:02:01.482
We're walking through, starting at HEAD
all the way to the exact commit and

29
00:02:01.482 --> 00:02:04.800
that means I could reconstruct the repo
now that I have this commit, and

30
00:02:04.800 --> 00:02:05.810
we did that earlier.

31
00:02:05.810 --> 00:02:09.305
So we can actually go all the way from
head to the exact file that we want to

32
00:02:09.305 --> 00:02:11.594
look at, and so
this is kind of how that works.

33
00:02:11.594 --> 00:02:14.209
So it's good to have in
your head how it works,

34
00:02:14.209 --> 00:02:16.769
didn't even know that
was going to come out.

35
00:02:16.769 --> 00:02:21.634
All right, here we go Reflog,
it's actually not a wizard tool,

36
00:02:21.634 --> 00:02:26.771
it's just not It feels magical,
but it's very one-dimensional.

37
00:02:26.771 --> 00:02:31.114
So Reflog just shows you
where head's been, so

38
00:02:31.114 --> 00:02:35.891
give reflog a try,
I just told you, I unfortunately

39
00:02:35.891 --> 00:02:40.794
just ruined the moment,
just execute git.reflog.

40
00:02:40.794 --> 00:02:46.950
And just look at it, and see that it
followed how you've changed your branch.

41
00:02:46.950 --> 00:02:51.573
So if I do it, if I go git reflog, you'll
see that, look at that, moving from trunk

42
00:02:51.573 --> 00:02:56.083
to foo, from foo rebase to trunk, you can
just watch me change each one of these.

43
00:02:56.083 --> 00:02:58.667
And it comes with a commit shawl for
each one of those items.

44
00:02:58.667 --> 00:03:03.396
This is when I was at B, remember when we
do doof things up way earlier in the repo,

45
00:03:03.396 --> 00:03:06.402
you can actually see me doing,
what's it called?

46
00:03:06.402 --> 00:03:09.882
A reset, you can actually watch
me do all my oopsy daisies,

47
00:03:09.882 --> 00:03:11.841
we redid everything right here.

48
00:03:11.841 --> 00:03:14.895
Look at that, so you can actually
see the entire history of all

49
00:03:14.895 --> 00:03:17.795
decisions you've made in your
repo by looking at reflog.

50
00:03:17.795 --> 00:03:22.543
And all it is is just simply the log
of where you've moved, that's it,

51
00:03:22.543 --> 00:03:25.724
nothing magical about it,
it's very simple.

52
00:03:25.724 --> 00:03:30.928
Do you think you can find where
reflog is stored in the git folder,

53
00:03:30.928 --> 00:03:33.586
is it a log, how do they store it?

54
00:03:33.586 --> 00:03:37.710
All right, so if I go here and I go
like this, if I just ls git, you'll see,

55
00:03:37.710 --> 00:03:42.266
look at that there so logs folder,
that feels pretty serendipitous, right?

56
00:03:42.266 --> 00:03:44.242
So what's in the old logs folder?

57
00:03:44.242 --> 00:03:47.273
Well look at that, there's one called
HEAD, what do you think's in that file?

58
00:03:47.273 --> 00:03:51.737
Let's just pretend that I don't know,
and let's count it out,

59
00:03:51.737 --> 00:03:54.589
does that not look pretty dang familiar?

60
00:03:54.589 --> 00:03:59.224
Reflog is just prettifying this file,
at least it is default basic usage,

61
00:03:59.224 --> 00:04:03.064
there's a lot of options,
there's always a lot of options.

62
00:04:03.064 --> 00:04:06.486
In fact, you can even use git log to
create reflog with a whole bunch of

63
00:04:06.486 --> 00:04:08.382
options but we're not gonna do that.

64
00:04:08.382 --> 00:04:13.092
Just this right here is as simple as
it gets at AOL, yeah, I did AOL for

65
00:04:13.092 --> 00:04:17.640
those that are laughing,
I did AOL.com, I thought it was funny,

66
00:04:17.640 --> 00:04:19.606
it's a great email, okay?

67
00:04:19.606 --> 00:04:22.955
All right, solution,
you can do a reflog-3, and

68
00:04:22.955 --> 00:04:26.089
you can actually see three
lines of your reflog.

69
00:04:26.089 --> 00:04:28.792
So if you don't want the whole thing
you just wanna see a little bit,

70
00:04:28.792 --> 00:04:30.746
you can actually give it
how many lines you want.

71
00:04:30.746 --> 00:04:35.765
So if I go git reflog-3, I see three,
that means if I cat out my head and

72
00:04:35.765 --> 00:04:40.367
go, tail-3, you can see the last three,
and you'll notice,

73
00:04:40.367 --> 00:04:43.656
they kinda look, they're the same, right?

74
00:04:43.656 --> 00:04:51.323
You can see here moving from trunk
to foo moving from trunk to foo.

75
00:04:51.323 --> 00:04:55.041
So there you go, it's inverted, the last
line of the file is the first line in

76
00:04:55.041 --> 00:04:58.719
reflog, it just takes the file and
inverts it, that is it, so there you go.

77
00:04:58.719 --> 00:05:02.154
Now, hopefully again,
the magic is being slowly spoiled and

78
00:05:02.154 --> 00:05:03.748
now the real magic happens.

79
00:05:03.748 --> 00:05:06.108
Which is how simple git actually is and

80
00:05:06.108 --> 00:05:10.330
how powerful it really is that's
where the real magic is in the use.

