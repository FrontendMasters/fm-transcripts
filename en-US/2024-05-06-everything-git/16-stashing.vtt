WEBVTT

1
00:00:00.060 --> 00:00:03.252
We're at this point where you have
a change you've made locally and

2
00:00:03.252 --> 00:00:06.170
now you have a change in
the polling from remote.

3
00:00:06.170 --> 00:00:07.220
What do you do?

4
00:00:07.220 --> 00:00:09.770
Typically, most people say, stash it.

5
00:00:09.770 --> 00:00:12.850
You can technically commit and rebase.

6
00:00:12.850 --> 00:00:14.607
And then you have your commit on top,

7
00:00:14.607 --> 00:00:16.940
but you've pulled in
the changes that you need.

8
00:00:16.940 --> 00:00:19.943
You do have options here, but there is
a third option we should talk about

9
00:00:19.943 --> 00:00:22.911
later which is worktrees,
which is my favorite way to do this.

10
00:00:22.911 --> 00:00:25.201
So but for now we're gonna actually
start talking about stash.

11
00:00:25.201 --> 00:00:28.139
So for those that don't
know anything about stash,

12
00:00:28.139 --> 00:00:32.432
stash takes every track change by git
inside the index and the working tree.

13
00:00:32.432 --> 00:00:36.419
And stores them kind of into a special
area the work in progress area,

14
00:00:36.419 --> 00:00:41.733
this stash area, and you can think of
stash like a stack of temporary changes.

15
00:00:41.733 --> 00:00:43.831
This is from the main
page using git stash,

16
00:00:43.831 --> 00:00:47.449
when you record the current state of
the working directory in the index but

17
00:00:47.449 --> 00:00:50.053
wants to go back to
a clean working directory.

18
00:00:50.053 --> 00:00:52.298
The command saves your local
modifications away and

19
00:00:52.298 --> 00:00:54.603
reverts the working directory
to match HEAD commit.

20
00:00:55.793 --> 00:00:57.353
All right, so pretty straightforward.

21
00:00:57.353 --> 00:00:58.643
Sash is a stack.

22
00:00:58.643 --> 00:01:03.317
Now I wanna make sure I say that multiple
times, it's just a stack of changes.

23
00:01:03.317 --> 00:01:09.677
Right, so operation you can push to
your stack by executing git stash.

24
00:01:11.177 --> 00:01:14.077
You can even give
a friendly message with -m.

25
00:01:15.257 --> 00:01:18.657
So this right here would stash,
but with message.

26
00:01:18.657 --> 00:01:22.606
Stashes can be listed out with git list or
git stash list and

27
00:01:22.606 --> 00:01:25.017
get show with an index as well.

28
00:01:25.017 --> 00:01:27.627
Show will just show the changes or
the diff,

29
00:01:27.627 --> 00:01:32.027
whereas lists will list out
the amount of stashes you have.

30
00:01:32.027 --> 00:01:35.267
You can pop the latest
stash with git stash pop.

31
00:01:35.267 --> 00:01:37.867
You can pop out an index with --index.

32
00:01:37.867 --> 00:01:41.713
So if you want the third stash in,
you can just --index 3.

33
00:01:42.993 --> 00:01:45.471
Or I think it might be 0 base,
I forget if it's 0 or 1 base.

34
00:01:45.471 --> 00:01:48.003
I assume everything's 0 base and
let's for using Lua,

35
00:01:48.003 --> 00:01:50.513
so we'll just say --2 for
the third option.

36
00:01:50.513 --> 00:01:53.532
All right, man gets asked as your friend
if you forget how it works again,

37
00:01:53.532 --> 00:01:55.403
use the friendly manual.

38
00:01:55.403 --> 00:01:58.900
Love the friendly rent manual
read the friendly manual.

39
00:01:58.900 --> 00:02:00.600
That's what RTFM stands for, by the way.

40
00:02:00.600 --> 00:02:03.540
So if you ever see it on the internet,
just remember it's the friendly manual.

41
00:02:03.540 --> 00:02:05.590
All right, so problem.

42
00:02:05.590 --> 00:02:10.420
We're gonna use trunk and
I want you to create an upstream change.

43
00:02:10.420 --> 00:02:12.708
Remember, this is gonna be in hello-git.

44
00:02:12.708 --> 00:02:17.020
Just create a file called upstream and
put upstream change into it.

45
00:02:17.020 --> 00:02:20.733
Then, in remote, I want you to do
a downstream change in the README.

46
00:02:20.733 --> 00:02:24.693
Okay, so remember these are two different
files and I want you to do like this.

47
00:02:24.693 --> 00:02:27.913
So I will literally copy this.

48
00:02:27.913 --> 00:02:29.093
I'm gonna go to hello-git.

49
00:02:29.093 --> 00:02:34.798
Just execute that git add this git commit,

50
00:02:34.798 --> 00:02:43.125
upstream Then I'm gonna do this one
right here, so I just don't mess it up.

51
00:02:43.125 --> 00:02:43.955
Look at that.

52
00:02:48.565 --> 00:02:50.565
All right, there we go.

53
00:02:50.565 --> 00:02:52.135
So now remote has a change.

54
00:02:53.315 --> 00:02:57.293
Dang it, get checkout trunk.

55
00:02:57.293 --> 00:02:57.793
There we go.

56
00:02:59.393 --> 00:03:00.583
Look at that.

57
00:03:00.583 --> 00:03:01.463
All right, there we go.

58
00:03:01.463 --> 00:03:05.493
Get this thing, and then add this thing,
and then commit this thing.

59
00:03:05.493 --> 00:03:06.053
There we go.

60
00:03:06.053 --> 00:03:09.324
Okay, so make sure you do it to trunk, as
I stated explicitly in the instructions,

61
00:03:09.324 --> 00:03:12.463
and would never accidentally
deviate from said things.

62
00:03:12.463 --> 00:03:16.342
All right, so now, actually did deviate,
I said don't commit.

63
00:03:16.342 --> 00:03:19.504
By the way, the second one,
don't commit the changes.

64
00:03:19.504 --> 00:03:21.194
Did anyone commit
the changes in remote-git?

65
00:03:22.914 --> 00:03:27.122
You committed it,
new git reset --soft HEAD~1.

66
00:03:28.194 --> 00:03:34.104
I'll do it too, git reset --soft HEAD~1.

67
00:03:34.104 --> 00:03:35.534
There we go.

68
00:03:35.534 --> 00:03:38.205
Now I have that lovely
little change right here and

69
00:03:38.205 --> 00:03:40.184
trunk is now pointing one step back.

