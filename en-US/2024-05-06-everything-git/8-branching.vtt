WEBVTT

1
00:00:00.000 --> 00:00:01.480
We're gonna go into Git Branching.

2
00:00:01.480 --> 00:00:07.222
First off, you should not develop
everything on the main line, okay?

3
00:00:07.222 --> 00:00:10.539
That'd be kind of crazy if all you ever
did is just simply use whatever your main

4
00:00:10.539 --> 00:00:12.562
line is and
just put all of your changes on that.

5
00:00:12.562 --> 00:00:16.754
But I'm gonna be a little honest with
you guys, when it's just my project,

6
00:00:16.754 --> 00:00:18.994
I only develop on main, and that's it.

7
00:00:18.994 --> 00:00:20.421
That's all there is to it.

8
00:00:20.421 --> 00:00:23.685
But if I'm working with somebody else,
you should branch,

9
00:00:23.685 --> 00:00:26.763
branches are pretty much cheap,
they're almost free.

10
00:00:26.763 --> 00:00:29.353
So you can create as many
of them as you'd like, and

11
00:00:29.353 --> 00:00:33.400
it's really not gonna create a problem for
you, for your system, for memory.

12
00:00:33.400 --> 00:00:38.119
Again, every branch will be pointing to a
commit, which will contain the entirety of

13
00:00:38.119 --> 00:00:41.604
your repo, but they're free,
almost at the exact same time.

14
00:00:41.604 --> 00:00:42.916
We'll find out why.

15
00:00:42.916 --> 00:00:45.622
Since we're on a new repo, let's create
our initial commit, cuz remember,

16
00:00:45.622 --> 00:00:47.639
whenever you start a repo,
there's no commits in there.

17
00:00:47.639 --> 00:00:49.761
So it's empty,
you can't even create a branch right now,

18
00:00:49.761 --> 00:00:50.703
things are all goofed up.

19
00:00:50.703 --> 00:00:52.500
So let's just create a quick change.

20
00:00:52.500 --> 00:00:56.371
And I want you to have a readme.md
with one line, put a in there,

21
00:00:56.371 --> 00:00:58.543
and then with a commit message of a.

22
00:00:58.543 --> 00:01:02.614
It's very important that you use these
commit messages more than anything else,

23
00:01:02.614 --> 00:01:06.806
because if you don't, you will probably
get a little bit confused with the course.

24
00:01:06.806 --> 00:01:11.699
So I'll do it too, readme.md,
I'll put in a nice little a,

25
00:01:11.699 --> 00:01:14.531
git add this git status git commit.

26
00:01:14.531 --> 00:01:16.824
By the way,
always use status before you commit.

27
00:01:16.824 --> 00:01:20.047
Make sure you don't actually say
commit an out file by accident,

28
00:01:20.047 --> 00:01:23.636
while teaching a course on Git and
showing people how to properly use it.

29
00:01:23.636 --> 00:01:27.147
And of course, message A because
we wanna keep track of this, okay?

30
00:01:27.147 --> 00:01:28.401
So there we go.

31
00:01:28.401 --> 00:01:31.669
You can do a little quick git log and
see, look at that.

32
00:01:31.669 --> 00:01:32.983
Hey, fantastic.

33
00:01:35.489 --> 00:01:37.303
All right.

34
00:01:37.303 --> 00:01:38.521
So let's create a branch.

35
00:01:38.521 --> 00:01:41.590
And we're gonna call this branch foo, why?

36
00:01:41.590 --> 00:01:42.317
Cuz I say so.

37
00:01:42.317 --> 00:01:46.106
I know some people hate foo and bar as
example things, I love foo and bar, okay?

38
00:01:46.106 --> 00:01:48.554
I don't know why everyone has to
hate foo and bar, it's fantastic.

39
00:01:48.554 --> 00:01:52.736
All right, so git branch foo,
this is how you create a branch.

40
00:01:52.736 --> 00:01:55.496
We just created it right now.

41
00:01:55.496 --> 00:01:59.573
Was this your expectation
when you create a branch?

42
00:01:59.573 --> 00:02:02.127
Yes or no?

43
00:02:02.127 --> 00:02:03.594
&gt;&gt; Yes, but I'm used to it.

44
00:02:03.594 --> 00:02:04.537
&gt;&gt; Yes, cuz you're used to it.

45
00:02:04.537 --> 00:02:06.421
That's actually the proper
answer right there.

46
00:02:06.421 --> 00:02:09.132
If you're new to Git,
that was a weird experience.

47
00:02:09.132 --> 00:02:11.744
You just created a branch and
nothing happened, right?

48
00:02:11.744 --> 00:02:14.733
You're just still sitting there,
you're on trunk, where am I?

49
00:02:14.733 --> 00:02:15.906
Why did this happen?

50
00:02:15.906 --> 00:02:16.999
I wanna go home.

51
00:02:16.999 --> 00:02:18.551
Well, guess what?
You already are at home.

52
00:02:18.551 --> 00:02:23.311
The thing is that, when you create
a branch, it creates a branch at

53
00:02:23.311 --> 00:02:27.997
the commit you're currently on but
it does not switch branches.

54
00:02:27.997 --> 00:02:30.382
There's actually a couple ways you can,
first off,

55
00:02:30.382 --> 00:02:33.787
you can check out any branch you have,
so I can actually execute git branch.

56
00:02:33.787 --> 00:02:35.275
You should do this right now.

57
00:02:35.275 --> 00:02:38.837
Use git branch, check it out.

58
00:02:38.837 --> 00:02:43.429
I talk about log as well, so
you can go git branch, check that out,

59
00:02:43.429 --> 00:02:47.128
you see, I'm still on trunk,
but I do have a foo now.

60
00:02:47.128 --> 00:02:51.825
If you go git log, you'll see, head
points to trunk, that's where I'm at, but

61
00:02:51.825 --> 00:02:54.840
there's also foo,
foo's at the exact same place.

62
00:02:54.840 --> 00:02:59.314
Cuz remember, when you create a branch,
it branches off wherever you're at.

63
00:02:59.314 --> 00:03:01.219
At this moment, very important.

64
00:03:01.219 --> 00:03:05.002
Some people only know that by accident,
they haven't really ever thought about it,

65
00:03:05.002 --> 00:03:07.485
but yes, it's literally
pointing to the same commit.

66
00:03:07.485 --> 00:03:08.883
Let's do a little bit of Git Foo.

67
00:03:08.883 --> 00:03:11.208
Can you find your branch details in .git?

68
00:03:15.493 --> 00:03:19.089
See, look, take a moment.

69
00:03:19.089 --> 00:03:23.097
Explore
&gt;&gt; Refs, heads, foo.

70
00:03:26.625 --> 00:03:28.698
&gt;&gt; I'll give you a little hint,
go check out refs.

71
00:03:28.698 --> 00:03:36.494
So I'll go like this,
git/refs/heads/foo/trunk, look at that.

72
00:03:36.494 --> 00:03:39.018
So I can actually cat that out.

73
00:03:39.018 --> 00:03:41.479
Hey, that's my SHA.

74
00:03:41.479 --> 00:03:46.848
The branches just exist in this
heads folder as just a SHA.

75
00:03:46.848 --> 00:03:49.775
So that git remember,
what do we do with a SHA?

76
00:03:49.775 --> 00:03:54.515
When I cat a file of a SHA,
right, I go git cat-file -p,

77
00:03:54.515 --> 00:03:57.207
it then shows my tree, right?

78
00:03:57.207 --> 00:04:00.324
So this is how good Git
kind of understands and

79
00:04:00.324 --> 00:04:04.437
is able to build the state of
your repo based off of a branch.

80
00:04:04.437 --> 00:04:07.356
Is a branch is just a SHA,
a SHA is the state of your repo,

81
00:04:07.356 --> 00:04:11.662
it's not a differential, that's why it's
always able to do it and do it so fast.

82
00:04:11.662 --> 00:04:17.166
That's why branches are effectively free,
is it's just 40 characters in a file.

83
00:04:17.166 --> 00:04:20.512
And name, so
it's like 45 characters for our case.

84
00:04:20.512 --> 00:04:22.719
Anyways, so
if you want to switch branches,

85
00:04:22.719 --> 00:04:24.877
you can actually do git switch or
checkout.

86
00:04:24.877 --> 00:04:27.580
I'm just used to using checkout,
so I just use checkout.

87
00:04:27.580 --> 00:04:29.245
You can use switch if you want to.

88
00:04:29.245 --> 00:04:34.086
They're effectively identical for the
standard cases, I read on the Internet, so

89
00:04:34.086 --> 00:04:36.895
it must be true that
checkout is more versatile.

90
00:04:36.895 --> 00:04:40.667
But I only use checkout to create
a branch or to switch to a branch or

91
00:04:40.667 --> 00:04:44.800
to do something with merge conflicts,
which we'll talk about later.

92
00:04:44.800 --> 00:04:48.640
So pretty much, I just use it for
the most basic operations.

93
00:04:48.640 --> 00:04:54.064
And so, switch the branch foo,
so I'll go git check out.

94
00:04:54.064 --> 00:04:54.634
Foo.

95
00:04:54.634 --> 00:04:58.687
Look at that, we're on branch foo,
how fantastic.

96
00:04:58.687 --> 00:05:00.622
Its beautiful, right?

97
00:05:00.622 --> 00:05:04.572
There we go, it even tells you,
you've switched to branch foo, awesome.

98
00:05:04.572 --> 00:05:07.662
All right, so now let's actually
add some commits to foo.

99
00:05:07.662 --> 00:05:11.099
We're gonna add two commits, B and
C, make sure you actually use B and

100
00:05:11.099 --> 00:05:13.323
C cuz it makes everything
easier to use that.

101
00:05:13.323 --> 00:05:16.592
And I have a small typo right here saying,
add the changes to README.

102
00:05:16.592 --> 00:05:20.080
Don't add them to README,
add them to a new file.

103
00:05:20.080 --> 00:05:23.656
I called the file second, and
so you can do the same thing.

104
00:05:23.656 --> 00:05:28.039
All right, so I'll go echo B into seconds,
remember that.

105
00:05:28.039 --> 00:05:34.232
Git add it, git, commit it, B,
and I'll do it again with C.

106
00:05:38.725 --> 00:05:41.104
Fantastic, now I have
two commits into foo.

107
00:05:41.104 --> 00:05:43.175
We'll do a git log just to prove it.

108
00:05:43.175 --> 00:05:46.851
ABC right here, awesome.

109
00:05:46.851 --> 00:05:50.086
I'll give everyone a moment to catch up.

110
00:05:50.086 --> 00:05:52.666
All right, so you should now
have the repo set up like this.

111
00:05:52.666 --> 00:05:55.468
A should contain trunk,
B and C should be foo.

112
00:05:55.468 --> 00:06:02.341
We can go git log, just verify that
trunks at A, foo is at C, awesome.

113
00:06:02.341 --> 00:06:03.599
Foo C.

114
00:06:03.599 --> 00:06:06.794
There we go, this is what I
pretty much executed right here,

115
00:06:06.794 --> 00:06:11.005
we added those two things, and when we do
the log, you can see trunks down here.

116
00:06:11.005 --> 00:06:12.060
Foo is up here.
Remember,

117
00:06:12.060 --> 00:06:14.820
your commits won't match my commits,
totally normal.

118
00:06:14.820 --> 00:06:19.485
Again, totally based off of time,
author, everything.

119
00:06:19.485 --> 00:06:22.238
Remember, you can delete branches,
I don't know if you know that,

120
00:06:22.238 --> 00:06:23.097
you do the D command.

121
00:06:23.097 --> 00:06:25.926
We will actually use it later,
I'm just putting it in here.

122
00:06:25.926 --> 00:06:30.039
Just remember -D deletes a branch,
I always use D because I don't want it to

123
00:06:30.039 --> 00:06:34.236
have to try to check against the origin
to see, can I delete this branch?

124
00:06:34.236 --> 00:06:36.717
Is it up to date with what
I'm tracking against?

125
00:06:36.717 --> 00:06:38.189
We'll go over tracking and
all that later on.

126
00:06:38.189 --> 00:06:41.772
But I just use D whenever I'm
deleting something, old habits.

127
00:06:41.772 --> 00:06:48.751
All right, so now we have a branch
full of changes, what do we do next?

128
00:06:48.751 --> 00:06:53.085
&gt;&gt; Merge
&gt;&gt; Merge, did I hear merge?

129
00:06:53.085 --> 00:06:56.062
&gt;&gt; [LAUGH]
&gt;&gt; Absolutely, we gotta merge it.

