WEBVTT

1
00:00:00.005 --> 00:00:05.433
All right, so sometimes we have a decision
we have to face as programmers,

2
00:00:05.433 --> 00:00:08.373
which is to push forward or to roll back.

3
00:00:08.373 --> 00:00:12.855
I think we've all been there,
sometimes you got to revert, right?

4
00:00:12.855 --> 00:00:16.269
You made a change, it was a failure,
nobody's happy about it,

5
00:00:16.269 --> 00:00:18.874
nobody likes you, and
now you need to revert it.

6
00:00:18.874 --> 00:00:23.410
So by the way, if you're confused about
the difference between revert and

7
00:00:23.410 --> 00:00:25.793
restore, just go read about restore.

8
00:00:25.793 --> 00:00:31.361
Restore effectively just changes any
change into what the previous state was,

9
00:00:31.361 --> 00:00:35.782
whereas revert is effectively
like the anti matter to matter.

10
00:00:35.782 --> 00:00:41.430
It is gonna make an inverted change as
a commit, and then you commit that.

11
00:00:41.430 --> 00:00:45.831
So it actually changes what you've done
invertedly, we'll see in just a moment.

12
00:00:45.831 --> 00:00:48.987
It's very fantastic, I'm not sure how
else to describe it, other than it just,

13
00:00:48.987 --> 00:00:50.650
it did what you did but backwards, right?

14
00:00:50.650 --> 00:00:53.446
All right, so let's look at it.

15
00:00:53.446 --> 00:00:57.758
So reverting is simple,
you just need to provide a commit, right,

16
00:00:57.758 --> 00:01:01.177
I just need to revert something and
then it will work.

17
00:01:01.177 --> 00:01:04.869
All right, so let's go to hello git, and

18
00:01:04.869 --> 00:01:08.890
let's revert the commit
with log message E.

19
00:01:08.890 --> 00:01:13.581
Before removing it to check the contents
of the commit via log with -p.

20
00:01:13.581 --> 00:01:16.964
So, does anyone remember how
to search the friendly logs?

21
00:01:20.157 --> 00:01:22.683
Dash dash grep, that's right,
great job everybody,

22
00:01:22.683 --> 00:01:24.899
I can't believe you guys
all said that out loud.

23
00:01:24.899 --> 00:01:30.224
So I wanna go to hello git and
I'm gonna go git log --grep E and

24
00:01:30.224 --> 00:01:34.846
then we'll do a little -p
to print out the contents.

25
00:01:34.846 --> 00:01:37.305
So look at this, right here,
we made this earlier today,

26
00:01:37.305 --> 00:01:39.829
we have a little plus e right here,
absolutely wonderful.

27
00:01:39.829 --> 00:01:42.269
And our commit message was
of course an E as well.

28
00:01:42.269 --> 00:01:45.552
Awesome, everyone's happy,
I'm happy, you're happy,

29
00:01:45.552 --> 00:01:48.593
Dustin is kinda frowning, but
most of us are happy here.

30
00:01:48.593 --> 00:01:50.279
All right, so now we need to revert this.

31
00:01:50.279 --> 00:01:53.853
So I'm gonna actually take this guy
right here, the commit char, and

32
00:01:53.853 --> 00:01:57.142
I want to be able to take it, and
I'm gonna use it for reverting.

33
00:01:57.142 --> 00:02:00.235
So I'm gonna copy the commit SHA, and
I'm gonna make sure that that's what we're

34
00:02:00.235 --> 00:02:03.126
supposed to do at this point, which
we're not supposed to do this quite yet.

35
00:02:03.126 --> 00:02:04.595
So we're gonna go through all this one.

36
00:02:04.595 --> 00:02:06.586
Fantastic, you can
manually look through it.

37
00:02:06.586 --> 00:02:07.846
Now let's revert it.

38
00:02:07.846 --> 00:02:12.933
So I'm gonna go git revert and
then the hash that you have.

39
00:02:12.933 --> 00:02:14.180
So git revert hash.

40
00:02:17.333 --> 00:02:23.363
Conflicts Is just like I hate them and
I can never seem to get away from them,

41
00:02:23.363 --> 00:02:30.701
I don't know what is wrong with my life,
but anyways, here we go, we've conflicted.

42
00:02:30.701 --> 00:02:37.355
No, preplanned, [LAUGH] you can
get conflicts in reverting, right?

43
00:02:37.355 --> 00:02:40.346
Not only are you getting kicked
in the shin for the fact but

44
00:02:40.346 --> 00:02:44.768
you just made a mess up, you get sometimes
conflicted as well, and it's just like,

45
00:02:44.768 --> 00:02:47.352
this is the worst possible
scenario of all time.

46
00:02:47.352 --> 00:02:50.676
All right, it's emotionally bruising,
so we got to do something about this.

47
00:02:50.676 --> 00:02:52.022
So what do we do?

48
00:02:52.022 --> 00:02:56.020
Well, we go again, git status, again,
modified both, this looks very,

49
00:02:56.020 --> 00:02:56.778
very normal.

50
00:02:56.778 --> 00:03:00.836
You'll also notice up here,
we do a git revert skip or abort, so

51
00:03:00.836 --> 00:03:05.440
lets go to README, and this one's
a little bit more confusing, right?

52
00:03:05.440 --> 00:03:09.737
Yeah, this is our change, and okay,
this is what we got to apparently.

53
00:03:09.737 --> 00:03:16.088
It somehow has both EN downstream in here,
it probably shouldn't have both of them.

54
00:03:16.088 --> 00:03:16.885
So what do we get to do here?

55
00:03:16.885 --> 00:03:19.978
Well, let's delete that, right,
delete the conflicts, and

56
00:03:19.978 --> 00:03:21.879
then I only want to delete E, right,?

57
00:03:21.879 --> 00:03:25.896
Cuz that's what I was trying to remove,
was E, all right?

58
00:03:25.896 --> 00:03:29.900
So I'll save it, and then if we go
git status, git add, git status,

59
00:03:29.900 --> 00:03:33.712
you'll see right here that we need
to now go git revert continue.

60
00:03:39.270 --> 00:03:42.611
Awesome, so now it gives us
a beautiful commit message, revert E,

61
00:03:42.611 --> 00:03:44.441
this reverts this specific commit.

62
00:03:44.441 --> 00:03:48.097
So that we have this nice log, you can
see that this action was intentional.

63
00:03:48.097 --> 00:03:51.313
By the way, this is the greatest argument
for why you want to rebase squash,

64
00:03:51.313 --> 00:03:52.882
because there's no merge commits.

65
00:03:52.882 --> 00:03:57.749
All this history that you've just created
and now we need to remove this change,

66
00:03:57.749 --> 00:03:58.544
that sucks.

67
00:03:58.544 --> 00:04:01.423
Whereas if you have a nice squashed
rebase no merge can history,

68
00:04:01.423 --> 00:04:03.407
removing the change is very, very simple.

69
00:04:03.407 --> 00:04:06.068
There's just one step, which is
just the change you want to revert.

70
00:04:06.068 --> 00:04:08.932
I'm gonna take this,
I'm gonna save it, and there we go.

71
00:04:08.932 --> 00:04:13.161
Git status, and you'll see we're
on a clean thing, git log oneline,

72
00:04:13.161 --> 00:04:17.475
you'll see right here, revert E,
I say revert, is that even correct?

73
00:04:17.475 --> 00:04:20.372
Is it revert or is it revert if
you're talking about it in length and

74
00:04:20.372 --> 00:04:23.454
that kind of sense, I don't even know,
it's a great question to me.

75
00:04:23.454 --> 00:04:26.399
You can see right here there's E,
we've reverted it,

76
00:04:26.399 --> 00:04:29.606
the revert is literally the inverse
commit, as you can see.

77
00:04:29.606 --> 00:04:31.800
It's not that it removes
it from our history,

78
00:04:31.800 --> 00:04:34.795
because if it removed it from our history,
what would happen?

79
00:04:34.795 --> 00:04:38.958
Every branch would now have invalid
state and everything would be horrible.

80
00:04:38.958 --> 00:04:43.633
So a revert is when you actually put
the antimatter at the front, is how I like

81
00:04:43.633 --> 00:04:48.106
to think of it, you just put the opposite
commit in front and merge it in.

82
00:04:48.106 --> 00:04:51.644
So there we go, we got that opposite
commit going, absolutely fantastic.

83
00:04:51.644 --> 00:04:55.639
All right, that's it, little quick one
on revert, you rarely need to use it,

84
00:04:55.639 --> 00:04:56.606
that's about it.

