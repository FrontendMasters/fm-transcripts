WEBVTT

1
00:00:00.160 --> 00:00:01.500
Going to go over some config now.

2
00:00:01.500 --> 00:00:02.556
It's good to know this.

3
00:00:02.556 --> 00:00:05.670
This is kinda the last of
the intro into Git kind of area.

4
00:00:05.670 --> 00:00:09.190
I remember the first time I used anything
with config, it felt strange, and

5
00:00:09.190 --> 00:00:12.110
I did it that one time, and
then I never thought about it again.

6
00:00:12.110 --> 00:00:14.215
And then when I had to alter it,
I was just like aw,

7
00:00:14.215 --> 00:00:16.080
crap, I have to go look this up.

8
00:00:16.080 --> 00:00:19.650
And then you just always forget things,
totally reasonable.

9
00:00:19.650 --> 00:00:24.345
So --add adds a key to your git config.

10
00:00:24.345 --> 00:00:25.945
So if I do this, I just add a key.

11
00:00:25.945 --> 00:00:30.361
It's really important to remember, and
remember, a key is made up of two parts,

12
00:00:30.361 --> 00:00:32.435
a section and a key name.

13
00:00:32.435 --> 00:00:34.185
Very important things to remember.

14
00:00:34.185 --> 00:00:34.835
All right, problem.

15
00:00:34.835 --> 00:00:39.775
I want you to create three values with the
section name of FEM, front end masters.

16
00:00:39.775 --> 00:00:42.509
I don't care what you do,
I will use these three right here.

17
00:00:42.509 --> 00:00:49.414
fem.dev is great, marc, he's okay,
semi decent, and fem.git would, right?

18
00:00:51.334 --> 00:00:52.114
I'll do it too.

19
00:00:52.114 --> 00:00:56.944
I'll go git config --add, and then I'll
do the section name, remember, fem.

20
00:00:56.944 --> 00:01:01.042
Then I'll do the key name,
dev, and say, is great.

21
00:01:02.072 --> 00:01:06.280
There we go.
And then I'll do, marc, is okay, and

22
00:01:06.280 --> 00:01:07.302
then git.

23
00:01:07.302 --> 00:01:10.766
I put little quotes
around it just because,

24
00:01:10.766 --> 00:01:15.562
I don't know, I wanna send it
as a single argument there.

25
00:01:15.562 --> 00:01:18.262
You might not even need quotes,
I've actually never not tried quotes,

26
00:01:18.262 --> 00:01:19.512
I just always quote everything.

27
00:01:19.512 --> 00:01:22.196
Old habits diehard, and they get
formed at some point in your head and

28
00:01:22.196 --> 00:01:23.793
that's just that.

29
00:01:23.793 --> 00:01:24.563
So there we go.

30
00:01:24.563 --> 00:01:27.273
I have those three commits.

31
00:01:27.273 --> 00:01:28.143
All right, solution.

32
00:01:28.143 --> 00:01:30.383
There we go.
Hopefully everyone effectively did this.

33
00:01:30.383 --> 00:01:32.063
There's some ways of listing out values.

34
00:01:32.063 --> 00:01:35.833
You can use --list, or
you can use git regex expression.

35
00:01:35.833 --> 00:01:38.392
Problem, can you list out all
the FEM values in your config with

36
00:01:38.392 --> 00:01:39.173
a single command?

37
00:01:41.984 --> 00:01:46.625
Now, me personally, cuz of just how I'm
not the world's greatest Linux person,

38
00:01:46.625 --> 00:01:50.008
I would probably do something
like git config --list, and

39
00:01:50.008 --> 00:01:51.622
then probably grep out fem.

40
00:01:51.622 --> 00:01:52.974
That's what I would do.

41
00:01:52.974 --> 00:01:57.025
And you can see it looks like I actually
have some old values in here, so

42
00:01:57.025 --> 00:01:59.024
I should probably take those out.

43
00:02:06.257 --> 00:02:10.303
There we go.

44
00:02:10.303 --> 00:02:13.493
I knew it,
got bamboozled myself right there.

45
00:02:13.493 --> 00:02:15.533
All right, so hopefully everyone did that.

46
00:02:15.533 --> 00:02:16.673
Absolutely fantastic.

47
00:02:16.673 --> 00:02:20.304
So the way to be able to list everything
out is that, I always just do this.

48
00:02:20.304 --> 00:02:23.945
I know it's not like the most efficient
way to use your Linux system.

49
00:02:23.945 --> 00:02:25.645
It's just how my brain always does things.

50
00:02:25.645 --> 00:02:30.185
But you can use things like git config,
or git-regex expression,

51
00:02:30.185 --> 00:02:31.805
and then just go fem.

52
00:02:31.805 --> 00:02:35.655
And this will actually just list out
your three keys that match that.

53
00:02:35.655 --> 00:02:40.163
So that means I could also do something
like m dot, and it would list out anything

54
00:02:40.163 --> 00:02:44.049
that kind of falls within that format,
dot being a wildcard.

55
00:02:44.049 --> 00:02:46.339
So you kinda have your nice
little regular expression.

56
00:02:46.339 --> 00:02:50.480
As you can see, we overmatched by
accident cuz again, regular expressions,

57
00:02:50.480 --> 00:02:52.489
very dangerous to use.

58
00:02:52.489 --> 00:02:53.969
Don't put them in your code base, kids.

59
00:02:53.969 --> 00:02:56.059
All right, anyways, so problem.

60
00:02:56.059 --> 00:02:59.798
Can you change one of
the values of your config?

61
00:02:59.798 --> 00:03:00.860
Let's take fem.dev.

62
00:03:00.860 --> 00:03:04.413
I want you to change its value with all
the commands you currently know that I've

63
00:03:04.413 --> 00:03:06.670
showed you, which is just add,
list, and get.

64
00:03:06.670 --> 00:03:08.560
So that's all you have.

65
00:03:08.560 --> 00:03:11.050
So I'll join you, and I'll go git config.

66
00:03:11.050 --> 00:03:17.380
I'll say, is amazing, fem.dev is amazing.

67
00:03:17.380 --> 00:03:17.880
There we go.

68
00:03:17.880 --> 00:03:19.234
I've changed it.

69
00:03:19.234 --> 00:03:21.654
And then I want you to list it
out with git regex expression.

70
00:03:21.654 --> 00:03:24.904
Look what happens when I do it.

71
00:03:24.904 --> 00:03:28.554
I have two fem.devs.

72
00:03:28.554 --> 00:03:33.492
So one of the odd parts of Git is that you
can actually accidentally add multiple of

73
00:03:33.492 --> 00:03:38.354
the same keys, which is also good, cuz
that means you can have local settings,

74
00:03:38.354 --> 00:03:40.481
and you can have global settings.

75
00:03:40.481 --> 00:03:43.671
You don't have to worry about
collisions or anything like that,

76
00:03:43.671 --> 00:03:46.231
but you will add the same
key by accident sometimes.

77
00:03:46.231 --> 00:03:47.151
It has happened.

78
00:03:47.151 --> 00:03:51.272
I might have two or three usernames at
this point inside of my git configs,

79
00:03:51.272 --> 00:03:52.361
it's okay.

80
00:03:52.361 --> 00:03:53.361
So what happened here?

81
00:03:53.361 --> 00:03:54.861
It's a little bit of a surprise, right?

82
00:03:54.861 --> 00:03:57.541
You can use list or you can use
.get key and see what comes out.

83
00:03:57.541 --> 00:04:00.834
So for fun, let's use get, and
I want you to get out fem.dev.

84
00:04:00.834 --> 00:04:04.932
So long as you've been following along and
you're using the same keys at me,

85
00:04:04.932 --> 00:04:06.395
we have two with fem.dev.

86
00:04:06.395 --> 00:04:11.455
When I do that, I get the later of
the two values, the last one added.

87
00:04:11.455 --> 00:04:13.345
This should intrinsically make sense.

88
00:04:13.345 --> 00:04:16.995
Always use the latest value,
don't use the previous value.

89
00:04:16.995 --> 00:04:21.870
Okay, I'm speeding up a little bit,
by the way.

90
00:04:21.870 --> 00:04:24.600
If you use get all,
you'll get all of the values at once.

91
00:04:24.600 --> 00:04:27.074
All of this, by the way,
is in the man page, so

92
00:04:27.074 --> 00:04:30.194
always review the man page if
you forget or just Google it.

93
00:04:30.194 --> 00:04:32.145
You can unset, which is a great name.

94
00:04:32.145 --> 00:04:34.861
I mean, me personally,
I would've used remove, but

95
00:04:34.861 --> 00:04:36.520
unset is the opposite of adding.

96
00:04:37.660 --> 00:04:38.662
There's no set option.

97
00:04:38.662 --> 00:04:42.780
You know how much that bothers me that
there's no set, but there's unset and add?

98
00:04:42.780 --> 00:04:47.084
I think at one point in here, I actually
had a typo where I said set instead of add

99
00:04:47.084 --> 00:04:50.480
because that's naturally
how I feel about things.

100
00:04:50.480 --> 00:04:54.370
Anyways, okay, so
let's try to remove the duplicate key.

101
00:04:54.370 --> 00:04:55.830
Go ahead, try to remove the duplicate key.

102
00:04:57.330 --> 00:04:58.260
You have unset.

103
00:05:03.106 --> 00:05:05.621
When you try to do it, it says,
hey, you can't do it, right?

104
00:05:05.621 --> 00:05:07.390
Fem.dev has multiple values.

105
00:05:07.390 --> 00:05:08.076
Did we unset one of them?

106
00:05:08.076 --> 00:05:11.746
Did we unset all of them?

107
00:05:13.396 --> 00:05:16.246
Well, you can always list it out, right?

108
00:05:16.246 --> 00:05:18.956
You can list out,
we'll do this one, right?

109
00:05:18.956 --> 00:05:19.652
Look at that!

110
00:05:19.652 --> 00:05:21.803
Both of them are still there.

111
00:05:21.803 --> 00:05:25.327
So you cannot unset a multiple value key,

112
00:05:25.327 --> 00:05:30.553
you have to unset all,
which is a little fun warning for you.

113
00:05:30.553 --> 00:05:31.763
So you can do it all.

114
00:05:31.763 --> 00:05:33.093
Let's repeat it again with unset all.

115
00:05:33.093 --> 00:05:36.893
So I'm gonna go in here and
unset all for fem.dev.

116
00:05:36.893 --> 00:05:37.693
There we go.

117
00:05:37.693 --> 00:05:40.449
If I look at it,
notice that fem.dev completely gone.

118
00:05:40.449 --> 00:05:42.321
We removed all the keys for it.

119
00:05:42.321 --> 00:05:45.691
So you have to always remove all the keys.

120
00:05:45.691 --> 00:05:48.851
It's just kind of a thing.

121
00:05:48.851 --> 00:05:51.801
Fun fact, by the way,
configuration is just a file.

122
00:05:52.811 --> 00:05:57.296
Again, I've kind of tried to express this
upon you how important it is to remember

123
00:05:57.296 --> 00:05:59.024
that git isn't magical.

124
00:05:59.024 --> 00:06:01.574
So I want you to just take a little
quick look in the Git folder,

125
00:06:01.574 --> 00:06:02.564
find that config file.

126
00:06:03.664 --> 00:06:04.284
Just a quick look.

127
00:06:04.284 --> 00:06:08.894
Just see if you can find it.

128
00:06:08.894 --> 00:06:12.590
By the way, there are a lot of options,
so you can unset via index,

129
00:06:12.590 --> 00:06:15.744
there's like 900 different
things you can do.

130
00:06:15.744 --> 00:06:17.584
I'm just giving you the basics, okay?

131
00:06:17.584 --> 00:06:20.674
The real talk, you're probably gonna use
config like three times in your life, and

132
00:06:20.674 --> 00:06:22.338
you're never gonna look at it again.

133
00:06:22.338 --> 00:06:23.562
But it's just good to know how to use it,

134
00:06:23.562 --> 00:06:24.978
then it's never confusing and
it feels easy.

135
00:06:26.078 --> 00:06:30.648
All right, if you go like this, cat.git
config, you'll see it's right there.

136
00:06:30.648 --> 00:06:32.828
Does that look familiar?

137
00:06:32.828 --> 00:06:35.848
Yeah, those are the ones we added.

138
00:06:35.848 --> 00:06:36.908
There's nothing magical about it.

139
00:06:36.908 --> 00:06:41.456
It looks kinda like Toml, which Toml
was another encoding suite format for

140
00:06:41.456 --> 00:06:43.979
all of us to be able to use in a file.

141
00:06:43.979 --> 00:06:45.819
And so that's what it kinda
looks like to me, there you go.

142
00:06:45.819 --> 00:06:48.239
So, awesome, we have those things there.

143
00:06:48.239 --> 00:06:50.399
The magic is so gone,
hopefully, at this point.

144
00:06:50.399 --> 00:06:54.469
It's almost disappointing how simple that
actually was, that the config just exists.

145
00:06:54.469 --> 00:06:57.369
You could actually remove everything
by using --remove-section.

146
00:06:57.369 --> 00:06:59.288
So go ahead, give it a little try.

147
00:06:59.288 --> 00:07:01.853
Let's remove the entire FEM namespace.

148
00:07:01.853 --> 00:07:05.693
So [LAUGH] git config,
just ruining everything for me.

149
00:07:05.693 --> 00:07:07.763
There we go, remove the section?

150
00:07:07.763 --> 00:07:11.463
If I go and I cat out my config,
look what's gone.

151
00:07:11.463 --> 00:07:12.503
We removed the section.

152
00:07:12.503 --> 00:07:14.423
The section was deleted.

153
00:07:14.423 --> 00:07:15.043
There you go.

154
00:07:15.043 --> 00:07:18.343
Your commands are actually
updating a file.

155
00:07:18.343 --> 00:07:19.864
All right, there's also locations.

156
00:07:19.864 --> 00:07:22.579
Locations are system
global local work tree,

157
00:07:22.579 --> 00:07:25.324
you can provide a file path to a config.

158
00:07:25.324 --> 00:07:28.545
You can do all this, but
reality is when you're using Git,

159
00:07:28.545 --> 00:07:30.934
you likely are only using global or local.

160
00:07:30.934 --> 00:07:34.805
Local is just repository level settings,
and global is what you want for

161
00:07:34.805 --> 00:07:35.574
everything.

162
00:07:37.074 --> 00:07:41.216
All right, so let's try adding the same
key, fem.dev, to both local and global.

163
00:07:41.216 --> 00:07:43.656
I want you to start with global first.

164
00:07:43.656 --> 00:07:48.121
So I'll go git config --add,
and I'll go --global.

165
00:07:48.121 --> 00:07:51.336
So this should add it to all of git.

166
00:07:53.466 --> 00:07:55.452
There we go.
And then I'll do the exact same thing and

167
00:07:55.452 --> 00:07:56.796
I'll do it with local.

168
00:07:56.796 --> 00:08:00.336
You don't have to specify
the local command or

169
00:08:00.336 --> 00:08:03.711
the local location, but for this, I will.

170
00:08:04.733 --> 00:08:06.808
I'm gonna do this really quickly.

171
00:08:06.808 --> 00:08:10.098
I just realized that I
didn't give it a nice local.

172
00:08:10.098 --> 00:08:10.598
There we go.

173
00:08:12.428 --> 00:08:14.208
So now we added those two things.

174
00:08:14.208 --> 00:08:17.638
And now I want to list out my local items.

175
00:08:17.638 --> 00:08:20.845
So if I go git config,
and I go --list --local,

176
00:08:20.845 --> 00:08:25.121
providing a location, you can see
I have the fem.dev right there.

177
00:08:25.121 --> 00:08:28.827
If I just simply list everything out,
again,

178
00:08:28.827 --> 00:08:33.971
I'm not using the grep option
which I could use the grep option.

179
00:08:33.971 --> 00:08:39.391
You can see right here I have the global
one and I have the local one.

180
00:08:39.391 --> 00:08:41.477
Okay, so you can access them both.

181
00:08:41.477 --> 00:08:44.630
But which one should show
up when I do get fem.dev?

182
00:08:44.630 --> 00:08:47.308
Which one do you think should show up?

183
00:08:47.308 --> 00:08:48.306
&gt;&gt; Local.

184
00:08:48.306 --> 00:08:51.150
&gt;&gt; Local, exactly, you can see that.

185
00:08:51.150 --> 00:08:54.430
All right, so let's do a quick thing,
let's actually alter our git experience.

186
00:08:54.430 --> 00:08:56.310
Let's rename master to trunk.

187
00:08:56.310 --> 00:09:00.939
So I want do a global setting
to init.defaultBranch.

188
00:09:00.939 --> 00:09:02.739
You can choose whatever name you want.

189
00:09:02.739 --> 00:09:07.819
For here, I'm actually laughing internally
because I used to have to use SVN.

190
00:09:07.819 --> 00:09:12.909
And so we're gonna name it trunk, just
remember how awful life can actually be.

191
00:09:12.909 --> 00:09:14.639
For all of my Tortoisers out there.

192
00:09:14.639 --> 00:09:19.499
So I'm gonna do a little,
--global and go trunk.

193
00:09:20.738 --> 00:09:22.368
I just want everyone to feel the pain.

194
00:09:22.368 --> 00:09:24.158
Yeah, no, exactly.

195
00:09:24.158 --> 00:09:25.478
I want you to feel it.

196
00:09:26.808 --> 00:09:27.458
So there we go.

197
00:09:27.458 --> 00:09:29.408
We've now named our initial branch.

198
00:09:31.118 --> 00:09:33.189
Obviously, should this be local or global?

199
00:09:33.189 --> 00:09:36.239
Should be global if you want it
to take place for all repos for

200
00:09:36.239 --> 00:09:37.858
all time on your system.

201
00:09:37.858 --> 00:09:42.246
Remember, we just got done naming
your default branch to trunk.

202
00:09:42.246 --> 00:09:45.959
So [LAUGH] if you forget that you did this
class and you create a new repo, it will

203
00:09:45.959 --> 00:09:50.266
have trunk as its default name and then
you'll be triggered to remembering SVN.

204
00:09:50.266 --> 00:09:52.488
So real fact, by the way.

205
00:09:52.488 --> 00:09:54.266
So let's try it out.

206
00:09:54.266 --> 00:09:57.214
Let's just go and create a project
right now, call it, hello git,

207
00:09:57.214 --> 00:09:58.106
this is important.

208
00:09:58.106 --> 00:09:59.167
Call it hello git.

209
00:09:59.167 --> 00:10:01.879
And do a git init inside that folder.

210
00:10:01.879 --> 00:10:03.509
So I'm gonna go back back.

211
00:10:03.509 --> 00:10:06.525
I will make my own dir, hello-git, and

212
00:10:06.525 --> 00:10:10.269
then I'll go to hello git,
and I'll go git init.

213
00:10:11.549 --> 00:10:12.125
Look at that!

214
00:10:12.125 --> 00:10:13.469
It's now a trunk.

215
00:10:13.469 --> 00:10:14.179
There we go.

216
00:10:14.179 --> 00:10:16.889
So Git has global settings,
you can change your experience.

217
00:10:16.889 --> 00:10:19.989
There's actually quite a few experiential
changes you can make to Git.

218
00:10:19.989 --> 00:10:23.788
This is just the easiest one to
demonstrate with no Git knowledge.

