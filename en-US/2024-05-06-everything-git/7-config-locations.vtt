WEBVTT

1
00:00:00.004 --> 00:00:02.378
We're gonna go over some config now,
it's good to know this.

2
00:00:02.378 --> 00:00:05.708
This is kind of like the last
of the "intro into git" area.

3
00:00:05.708 --> 00:00:09.201
I remember the first time I use anything
with config, it felt strange, and

4
00:00:09.201 --> 00:00:12.041
I did it that one time and
then I never thought about it again.

5
00:00:12.041 --> 00:00:14.856
And then when I had to alter it,
I was just like, crap,

6
00:00:14.856 --> 00:00:16.106
I have to go look this up.

7
00:00:16.106 --> 00:00:19.588
And then you just always forget things,
totally reasonable.

8
00:00:19.588 --> 00:00:24.257
So, --add adds a key to your git config.

9
00:00:24.257 --> 00:00:27.213
So if I do this, I just add a key.

10
00:00:27.213 --> 00:00:28.210
This is really important to remember.

11
00:00:28.210 --> 00:00:32.304
And remember, a key is made up of
two parts, a section and a key name.

12
00:00:32.304 --> 00:00:34.053
Very important things to remember.

13
00:00:34.053 --> 00:00:38.643
All right, problem, I want you to create
three values with the section name of fem,

14
00:00:38.643 --> 00:00:39.755
frontend masters.

15
00:00:39.755 --> 00:00:46.196
I don't care what you do, I will use
these three right here, fem.dev is great,

16
00:00:46.196 --> 00:00:51.333
marc is, he's ok, semi decent,
and fem.git would, right?

17
00:00:51.333 --> 00:00:51.983
I'll do it too.

18
00:00:51.983 --> 00:00:56.675
I'll go git config --add, and
then I'll do the section name,

19
00:00:56.675 --> 00:01:01.985
remember, fem, then I'll do the key name,
dev, and say "is great".

20
00:01:01.985 --> 00:01:06.708
There we go, and
then I'll do mark is ok, and then git,

21
00:01:06.708 --> 00:01:11.732
I put little quotes around it
just because, I don't know,

22
00:01:11.732 --> 00:01:15.472
I want to send it as
a single argument there.

23
00:01:15.472 --> 00:01:18.272
You might not even need quotes,
I've actually not tried quotes,

24
00:01:18.272 --> 00:01:19.682
I just always quote everything.

25
00:01:19.682 --> 00:01:22.922
Old habits, die hard, and they get
formed at some point in your head, and

26
00:01:22.922 --> 00:01:23.822
that's just that.

27
00:01:23.822 --> 00:01:27.333
So there we go,
I have those three commits.

28
00:01:27.333 --> 00:01:30.380
All right, solution, there we go,
hopefully everyone effectively did this.

29
00:01:30.380 --> 00:01:33.729
There's some ways of listing out values,
you can use --list, or

30
00:01:33.729 --> 00:01:35.804
you can use --get- regex expression.

31
00:01:35.804 --> 00:01:38.583
Problem, can you list out all
the fem values in your config with

32
00:01:38.583 --> 00:01:39.431
a single command?

33
00:01:42.063 --> 00:01:46.533
Me personally, cuz of just how I'm not
the world's greatest Linux person,

34
00:01:46.533 --> 00:01:50.041
I would probably do something
like git config --list, and

35
00:01:50.041 --> 00:01:53.164
then probably grep out fem,
that's what I would do.

36
00:01:53.164 --> 00:01:56.699
And you can see I must have, looks like
I actually have some old values in here.

37
00:01:56.699 --> 00:01:58.018
So I should probably take those out.

38
00:01:58.018 --> 00:02:07.568
[LAUGH] There we go.

39
00:02:10.083 --> 00:02:13.333
I knew it, got bamboozled myself,
right there.

40
00:02:13.333 --> 00:02:16.679
All right, so hopefully everyone did that,
absolutely fantastic.

41
00:02:16.679 --> 00:02:20.247
So the way to be able to list everything
out is that I always just do this,

42
00:02:20.247 --> 00:02:23.457
I know it's not the most efficient
way to use your Linux system,

43
00:02:23.457 --> 00:02:25.675
it's just how my brain always does things.

44
00:02:25.675 --> 00:02:30.491
But you can use things like git
config --get a regex expression,

45
00:02:30.491 --> 00:02:32.211
and then just go fetch.

46
00:02:32.211 --> 00:02:35.603
And this will actually just list out
your three keys that match that.

47
00:02:35.603 --> 00:02:40.289
So that means I could also do something
like M., and it would list out anything

48
00:02:40.289 --> 00:02:43.987
that kind of falls within that format,
dot being a wildcard.

49
00:02:43.987 --> 00:02:48.019
So, you kinda have your nice little
regular expression, as you can see, we

50
00:02:48.019 --> 00:02:52.498
overmatched by accident cuz again, regular
expressions, very dangerous to use.

51
00:02:52.498 --> 00:02:54.186
Don't put them in your code base, kids.

52
00:02:54.186 --> 00:03:00.225
All right, anyways, so problem, can you
change one of the values of your config?

53
00:03:00.225 --> 00:03:03.894
Let's take fem.dev, I want you to change
its value with all the commands you

54
00:03:03.894 --> 00:03:06.661
currently know that I've showed you,
which is just add,

55
00:03:06.661 --> 00:03:08.544
list and get, so that's all you have.

56
00:03:08.544 --> 00:03:14.761
I'll join you and I'll go git config,
and I'll say, is amazing.

57
00:03:14.761 --> 00:03:17.293
Fem.dev is amazing.

58
00:03:17.293 --> 00:03:19.357
There we go, I've changed it.

59
00:03:19.357 --> 00:03:23.840
And then I want you to list it
out with --get regex expression.

60
00:03:23.840 --> 00:03:25.503
Well, what happens when I do it?

61
00:03:25.503 --> 00:03:28.342
I have two fem.devs.

62
00:03:28.342 --> 00:03:30.898
It's one of the odd parts of git,

63
00:03:30.898 --> 00:03:36.208
is that you can actually accidentally
add multiple of the same keys.

64
00:03:36.208 --> 00:03:39.108
Which is also good, cuz that means
you can have local settings and

65
00:03:39.108 --> 00:03:40.490
you can have global settings.

66
00:03:40.490 --> 00:03:43.841
You don't have to worry about
collisions or anything like that, but

67
00:03:43.841 --> 00:03:46.227
you will add the same key
by accident sometimes.

68
00:03:46.227 --> 00:03:48.282
It has happened, I might have two or

69
00:03:48.282 --> 00:03:52.267
three usernames at this point inside
of my git configs, it's okay.

70
00:03:52.267 --> 00:03:53.363
So, what happened here?

71
00:03:53.363 --> 00:03:54.831
It's a little bit of a surprise, right?

72
00:03:54.831 --> 00:03:57.496
You can use list or you can use
.git key and see what comes out.

73
00:03:57.496 --> 00:04:02.124
So for fun, let's use --get, and
I want you to get out fem.dev.

74
00:04:02.124 --> 00:04:05.974
So long as you've been following along and
you're using the same keys as me,

75
00:04:05.974 --> 00:04:07.348
we have two with fem.dev.

76
00:04:07.348 --> 00:04:11.439
When I do that, I get the later of
the two values, the last one added.

77
00:04:11.439 --> 00:04:15.756
This should intrinsically make sense,
always use the latest value,

78
00:04:15.756 --> 00:04:18.180
don't use the previous value, okay.

79
00:04:18.180 --> 00:04:20.733
If you use --get all,
you'll get all of the values at once.

80
00:04:20.733 --> 00:04:22.995
All of this, by the way,
is in the man page, so

81
00:04:22.995 --> 00:04:25.846
always review the man page if
you forget or just Google it.

82
00:04:25.846 --> 00:04:28.626
You can unset, which is a great name.

83
00:04:28.626 --> 00:04:31.807
I mean, me personally,
I would have used remove, but

84
00:04:31.807 --> 00:04:33.754
unset is the opposite of adding.

85
00:04:33.754 --> 00:04:34.737
There's no set option.

86
00:04:34.737 --> 00:04:38.931
You know how much that bothers me that
there's no set, but there's unset and add?

87
00:04:38.931 --> 00:04:42.496
It gets me every, I think at one
point in here, I actually had a typo

88
00:04:42.496 --> 00:04:47.036
where I said set instead of add, because
that's naturally how I feel about things.

89
00:04:47.036 --> 00:04:50.439
Anyways, okay, so
let's try to remove the duplicate key.

90
00:04:50.439 --> 00:04:53.773
Go ahead, try to remove the duplicate key.

91
00:04:53.773 --> 00:04:54.630
You have unset.

92
00:04:59.114 --> 00:05:02.088
When you try to do it, it says,
hey, you can't do it, right?

93
00:05:02.088 --> 00:05:04.120
Fem.dev has multiple values.

94
00:05:04.120 --> 00:05:09.357
Did we unset one of them,
did we unset all of them?

95
00:05:09.357 --> 00:05:12.884
Well, you can always list it out, right?

96
00:05:12.884 --> 00:05:15.053
You can list out,
we'll do this one, right?

97
00:05:15.053 --> 00:05:17.941
Look at that,
both of them are still there.

98
00:05:17.941 --> 00:05:23.406
So you cannot unset a multiple value key,
you have to unset all.

99
00:05:23.406 --> 00:05:26.613
Just as a little fun warning for you.

100
00:05:26.613 --> 00:05:29.251
So, you can do it all,
let's repeat it again with --unset -all.

101
00:05:29.251 --> 00:05:32.868
So I'm gonna go in here and
unset all for fem.dev.

102
00:05:32.868 --> 00:05:36.816
And there we go, if I look at it,
notice that, fem.dev completely gone,

103
00:05:36.816 --> 00:05:38.460
we removed all the keys for it.

104
00:05:38.460 --> 00:05:44.896
So you have to always remove all the keys,
it's just kind of a thing.

105
00:05:44.896 --> 00:05:48.846
Fun fact, by the way,
configuration is just a file.

106
00:05:48.846 --> 00:05:51.693
Again, I've tried to
express this upon you,

107
00:05:51.693 --> 00:05:55.204
how important it is to remember
that git isn't magical.

108
00:05:55.204 --> 00:05:58.591
So I want you to just take a little
quick look in the git folder,

109
00:05:58.591 --> 00:05:59.902
find that config file.

110
00:05:59.902 --> 00:06:05.089
Click look, see if you can find it.

111
00:06:05.089 --> 00:06:08.733
By the way, there are a lot of options,
so you can unset via index,

112
00:06:08.733 --> 00:06:13.768
there's like 900 different things you can
do, I'm just giving you the basics, okay?

113
00:06:13.768 --> 00:06:16.977
The real talk, you're probably gonna use
config like three times in your life and

114
00:06:16.977 --> 00:06:18.476
you're never gonna look at it again.

115
00:06:18.476 --> 00:06:21.562
But it's just good to know how to use it,
then it's never confusing and

116
00:06:21.562 --> 00:06:22.236
it feels easy.

117
00:06:22.236 --> 00:06:24.947
All right, if you go like this,
cat .gitconfig,

118
00:06:24.947 --> 00:06:26.658
you'll see it's right there.

119
00:06:26.658 --> 00:06:28.918
Mh-hm, does that look familiar?

120
00:06:28.918 --> 00:06:31.985
Yeah, those are the ones we added.

121
00:06:31.985 --> 00:06:36.721
There's nothing magical about it, it looks
kind of like Tamil, which Tamil is another

122
00:06:36.721 --> 00:06:39.987
encoding sweet format for
all of us to be able to use in a file.

123
00:06:39.987 --> 00:06:41.927
And so that's what it kinda
looks like to me, there we go.

124
00:06:41.927 --> 00:06:44.675
So, awesome, we have those things there.

125
00:06:44.675 --> 00:06:46.854
The magic is so gone,
hopefully at this point,

126
00:06:46.854 --> 00:06:50.949
it's almost disappointing how simple that
actually was, that the config just exists.

127
00:06:50.949 --> 00:06:53.540
You can actually remove everything
by using --remove-section.

128
00:06:53.540 --> 00:06:57.988
So go ahead, give it a little try,
let's remove the entire fem namespace.

129
00:06:57.988 --> 00:07:01.909
So, [LAUGH] git config just
ruining everything for me.

130
00:07:01.909 --> 00:07:03.809
There we go, remove the section.

131
00:07:03.809 --> 00:07:07.639
If I go and I cat out my config,
look what's gone.

132
00:07:07.639 --> 00:07:10.595
We removed the section,
the section was deleted.

133
00:07:10.595 --> 00:07:14.504
There you go, your commands
are actually updating a file.

134
00:07:14.504 --> 00:07:16.131
All right, there's also locations.

135
00:07:16.131 --> 00:07:19.196
Locations are system,
global, local, worktree,

136
00:07:19.196 --> 00:07:21.452
you can provide a file path to a config.

137
00:07:21.452 --> 00:07:23.418
You can do all this, but reality is,

138
00:07:23.418 --> 00:07:27.045
is when you're using git you likely
are only using global or local.

139
00:07:27.045 --> 00:07:30.244
Local is just repository
level settings and

140
00:07:30.244 --> 00:07:33.191
global is what you want for everything.

141
00:07:33.191 --> 00:07:37.327
All right, so let's try adding the same
key fem.dev, to both local and global.

142
00:07:37.327 --> 00:07:39.689
I want you to start with global first.

143
00:07:39.689 --> 00:07:45.604
So I'll go git config,
add --and I'll go --global.

144
00:07:45.604 --> 00:07:49.596
So this should add it to all of git.

145
00:07:49.596 --> 00:07:52.926
There we go, and then I'll do the exact
same thing and I'll do it with local.

146
00:07:52.926 --> 00:07:56.636
You don't have to specify
the local command or

147
00:07:56.636 --> 00:08:00.298
the local location, but for this I will.

148
00:08:00.298 --> 00:08:02.712
I'm gonna do this really quickly,

149
00:08:02.712 --> 00:08:06.175
I just realized that I
didn't give it a nice local.

150
00:08:06.175 --> 00:08:08.555
There we go.

151
00:08:08.555 --> 00:08:13.884
So now we added those two things, and
now I want to list out my local items.

152
00:08:13.884 --> 00:08:18.529
So if I go git config and
I go --list --local, providing a location,

153
00:08:18.529 --> 00:08:21.285
you can see, I have fem.dev right there.

154
00:08:21.285 --> 00:08:26.044
If I just simply list everything out,
instead of, again,

155
00:08:26.044 --> 00:08:31.389
I'm not using the grep option,
which I could use the grep option.

156
00:08:31.389 --> 00:08:35.564
You can see right here, I have
the global one and I have the local one.

157
00:08:35.564 --> 00:08:38.495
Okay, so you can access them both.

158
00:08:38.495 --> 00:08:41.859
But which one should show
up when I do --get fem.dev,

159
00:08:41.859 --> 00:08:44.160
which one do you think should show up?

160
00:08:44.160 --> 00:08:45.398
&gt;&gt; Local.

161
00:08:45.398 --> 00:08:47.491
&gt;&gt; Local, exactly, you can see that.

162
00:08:47.491 --> 00:08:50.393
All right, so let's do a quick thing,
let's actually alter our git experience.

163
00:08:50.393 --> 00:08:52.425
Let's rename master to trunk.

164
00:08:52.425 --> 00:08:57.171
So I want to do a global
setting to init.defaultBranch.

165
00:08:57.171 --> 00:09:01.628
You can choose whatever name you want, for
here I'm actually a laughing internally

166
00:09:01.628 --> 00:09:03.900
because I used to have
to use SVN tortoise.

167
00:09:03.900 --> 00:09:09.069
And so we're gonna name it trunk, just
remember how awful life can actually be.

168
00:09:09.069 --> 00:09:12.238
For all of my tortoises out there.

169
00:09:12.238 --> 00:09:16.844
So I'm going to do a little global and
go trunk.

170
00:09:16.844 --> 00:09:18.507
I just want everyone to feel the pain.

171
00:09:18.507 --> 00:09:22.788
Yeah, exactly, I want you to feel it.

172
00:09:22.788 --> 00:09:27.323
So there we go,
we've now named our initial branch.

173
00:09:27.323 --> 00:09:31.514
Obviously, should this be local or global,
should be global if you want it to take

174
00:09:31.514 --> 00:09:33.971
place for all repos for
all time on your system.

175
00:09:33.971 --> 00:09:38.265
Remember, we just got done naming
your default branch to trunk.

176
00:09:38.265 --> 00:09:43.174
So if you forget that you did this class
and you create a new repo, it will have

177
00:09:43.174 --> 00:09:48.491
trunk as its default name, and then you'll
be triggered due to remembering SVN.

178
00:09:48.491 --> 00:09:49.668
Real fact, by the way.

179
00:09:49.668 --> 00:09:50.419
So let's try it out.

180
00:09:50.419 --> 00:09:53.497
Let's just go and create a project
right now, call it hello-git.

181
00:09:53.497 --> 00:09:58.080
This is important, call it hello-git,
and do a git init inside that folder.

182
00:09:58.080 --> 00:10:03.412
So I'm gonna go back to back,
I will make my own daughter hello git,

183
00:10:03.412 --> 00:10:07.640
and then I'll go to hello git,
and I'll go git init.

184
00:10:07.640 --> 00:10:09.603
Look at that, it's now trunk.

185
00:10:09.603 --> 00:10:10.306
There we go.

186
00:10:10.306 --> 00:10:13.294
So git has global settings,
you can change your experience,

187
00:10:13.294 --> 00:10:16.798
there's actually quite a few experiential
changes you can make to git,

188
00:10:16.798 --> 00:10:20.030
this is just the easiest one to
demonstrate with no git knowledge.

