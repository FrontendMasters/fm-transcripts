WEBVTT

1
00:00:00.140 --> 00:00:04.437
I will now do this, so I'm gonna go like
this, git cat-file-p and print it out.

2
00:00:04.437 --> 00:00:08.326
Look at this, it has a tree,
what's a tree?

3
00:00:08.326 --> 00:00:13.320
It has the author, it has the committer,
it has the time, it has 600 on it.

4
00:00:13.320 --> 00:00:16.960
It has my friendly message
involved right here.

5
00:00:16.960 --> 00:00:18.360
Where's our commit though?

6
00:00:18.360 --> 00:00:19.191
This doesn't tell me anything.

7
00:00:19.191 --> 00:00:22.555
So, there's another sha here, so
I'm just gonna grab that sha.

8
00:00:22.555 --> 00:00:25.413
Whoopsies, and I'm gonna just put it in.

9
00:00:25.413 --> 00:00:27.366
Look at this.

10
00:00:27.366 --> 00:00:31.262
Again, something that looks
like file permissions,

11
00:00:31.262 --> 00:00:34.065
blob, another sha, and look at that.

12
00:00:34.065 --> 00:00:36.459
The name of the file we
just got done adding.

13
00:00:36.459 --> 00:00:39.570
So it kind of looks like we can
kind of walk through git, and

14
00:00:39.570 --> 00:00:41.486
we can find the file that is stored.

15
00:00:41.486 --> 00:00:44.649
So I'm gonna go here now, and
I'm gonna do the exact same thing.

16
00:00:44.649 --> 00:00:47.740
I'm going to print out that and
look at that, hello friend and masters.

17
00:00:47.740 --> 00:00:50.054
I was able to go all the way down and

18
00:00:50.054 --> 00:00:55.952
drill to the exact point of the change
we've made by starting with the git shot.

19
00:00:55.952 --> 00:00:57.542
This is very, very important.

20
00:00:57.542 --> 00:01:01.427
Now, there's some really good key
terms here that you need to know.

21
00:01:01.427 --> 00:01:05.057
First off,
you'll notice that there's a tree, right?

22
00:01:05.057 --> 00:01:07.297
You see the term tree being printout.

23
00:01:07.297 --> 00:01:11.580
The easiest way to think about tree is,
a tree is a directory.

24
00:01:11.580 --> 00:01:15.238
It contains a set of files or
more directories.

25
00:01:15.238 --> 00:01:18.793
A blob, what you saw right here is a file.

26
00:01:18.793 --> 00:01:22.820
And so that's the kind of the mentality
you should have if you ever look or

27
00:01:22.820 --> 00:01:24.863
peruse through these commits.

28
00:01:24.863 --> 00:01:28.303
And we will actually use
this information later and

29
00:01:28.303 --> 00:01:32.945
restore stuff that we've lost by
knowing this kind of information.

30
00:01:32.945 --> 00:01:33.582
So anyways, there we go.

31
00:01:33.582 --> 00:01:35.470
We were able to go all
the way down to the bottom.

32
00:01:35.470 --> 00:01:38.730
So that means our sha contained a tree.

33
00:01:38.730 --> 00:01:41.467
And that tree contained our file.

34
00:01:41.467 --> 00:01:45.196
And that file contained
the entirety of that file,

35
00:01:45.196 --> 00:01:49.023
not just our changes, but
the entirety of the file.

36
00:01:49.023 --> 00:01:50.031
So here we go.

37
00:01:50.031 --> 00:01:50.804
Very key concepts.

38
00:01:50.804 --> 00:01:51.743
Make sure you know that.

39
00:01:51.743 --> 00:01:56.128
Big takeaway, git does not store diffs and
we're gonna prove that,

40
00:01:56.128 --> 00:01:58.257
it stores the entirety of stuff.

41
00:01:58.257 --> 00:02:03.459
And so, I want you to just take a moment,
and remember this sha maybe

42
00:02:03.459 --> 00:02:09.632
by the first couple characters,
mine's EC3, you just remember yours.

43
00:02:09.632 --> 00:02:11.192
This is the sha to the file.

44
00:02:11.192 --> 00:02:13.701
This is a very important part right here,
all right?

45
00:02:13.701 --> 00:02:14.581
So, we're gonna do something else.

46
00:02:14.581 --> 00:02:18.138
I want you to create a second file and
I want you to commit it, and

47
00:02:18.138 --> 00:02:19.357
call it second.md.

48
00:02:19.357 --> 00:02:23.208
Whatever text you want,
just create something.

49
00:02:23.208 --> 00:02:24.402
So I'll do the exact same thing.

50
00:02:31.575 --> 00:02:33.036
All right, fantastic.

51
00:02:33.036 --> 00:02:36.088
Hopefully everyone mostly got that done.

52
00:02:36.088 --> 00:02:37.757
Just make it a quick, easy change.

53
00:02:37.757 --> 00:02:42.719
By the way, if you're using some
sort of command line utility, or

54
00:02:42.719 --> 00:02:49.113
you're using your editor if you're using
VS Code or Vim, don't use the git client.

55
00:02:49.113 --> 00:02:50.880
Right now,
we're gonna stay all in the command line.

56
00:02:50.880 --> 00:02:51.972
I want you to be there for a reason,

57
00:02:51.972 --> 00:02:54.022
because you wanted to understand
what's actually happening.

58
00:02:54.022 --> 00:02:56.903
Because when you use something
like Fugitive for Vim,

59
00:02:56.903 --> 00:03:01.363
it's literally just translating your
actions into these command line arguments.

60
00:03:01.363 --> 00:03:05.258
So I just want you to understand
what's happening here.

61
00:03:05.258 --> 00:03:07.095
All right, explore your new commit.

62
00:03:07.095 --> 00:03:09.746
What can you say about
first.md in your new commit?

63
00:03:09.746 --> 00:03:11.826
Cause we didn't touch first.md, did we?

64
00:03:11.826 --> 00:03:15.836
We didn't, we just simply added
a new file and then committed it.

65
00:03:15.836 --> 00:03:20.089
So, can you find first.md
in your new commit?

66
00:03:20.089 --> 00:03:22.585
By the way, a little fun fact you get
the first seven characters right here

67
00:03:22.585 --> 00:03:23.357
whenever you commit.

68
00:03:23.357 --> 00:03:29.270
You can actually copy that and go git cat
file- p, throw that in there, all right?

69
00:03:29.270 --> 00:03:30.360
Notice something a little different here.

70
00:03:30.360 --> 00:03:31.866
We have a tree.

71
00:03:31.866 --> 00:03:34.753
Again, remember, this is your folder,
but we also have a parent.

72
00:03:34.753 --> 00:03:37.644
And notice that that is
the sha from my first commit.

73
00:03:37.644 --> 00:03:39.164
It will be the sha from your first commit.

74
00:03:39.164 --> 00:03:41.988
You can start seeing how
this graph is being born.

75
00:03:41.988 --> 00:03:44.666
Your first one doesn't have the parents,
the next one does,

76
00:03:44.666 --> 00:03:47.616
and from here on out they'll all
have parents or multiple parents.

77
00:03:47.616 --> 00:03:51.309
Second, let's take this tree,
and I'm gonna cat this out.

78
00:03:51.309 --> 00:03:53.741
Get cat, there we go.

79
00:03:53.741 --> 00:03:55.863
Now look at that.

80
00:03:55.863 --> 00:03:56.778
I actually have out.

81
00:03:56.778 --> 00:03:58.025
I actually committed out.

82
00:03:58.025 --> 00:04:01.112
Remember when I showed you the log, I
actually didn't look at what I was doing,

83
00:04:01.112 --> 00:04:02.232
I actually commit that out.

84
00:04:02.232 --> 00:04:02.937
The mistakes were made.

85
00:04:02.937 --> 00:04:04.496
But either way, you see this right here.

86
00:04:04.496 --> 00:04:09.285
You see that I have both my first and
now my second.

87
00:04:09.285 --> 00:04:11.032
But remember this very important part.

88
00:04:11.032 --> 00:04:12.947
Look at what first is.

89
00:04:12.947 --> 00:04:17.987
It's the same sha that it
had in the previous commit,

90
00:04:17.987 --> 00:04:24.823
meaning our commits store pointers
to the entire contents of that file.

91
00:04:24.823 --> 00:04:29.384
So we did not update first, therefore,
this next commit contains first, but

92
00:04:29.384 --> 00:04:31.955
it contains a pointer
to the exact version.

93
00:04:31.955 --> 00:04:37.676
That means at any point in time, you only
need one commit to rebuild your repo.

94
00:04:37.676 --> 00:04:41.282
You can completely rebuild everything
about it, because that is how it works.

95
00:04:41.282 --> 00:04:47.657
Is that every single commit stores the
entirety of the state, not a differential.

96
00:04:47.657 --> 00:04:49.798
This is a very important point about git,

97
00:04:49.798 --> 00:04:52.804
because it just helps you
understand git fundamentally.

98
00:04:52.804 --> 00:04:56.211
An so, as you use merge and
rebase and all these other commands,

99
00:04:56.211 --> 00:04:57.800
it's just good to know this.

100
00:04:57.800 --> 00:04:59.322
Does this generally make sense?

101
00:04:59.322 --> 00:05:01.876
Even if you don't understand
how the compression works?

102
00:05:01.876 --> 00:05:03.545
How does it look up stuff?

103
00:05:03.545 --> 00:05:06.252
Do you at least understand
that git stores these files,

104
00:05:06.252 --> 00:05:09.486
stores them as a bunch of these
really long strings of characters?

105
00:05:09.486 --> 00:05:13.174
And as long strings of characters contain
every last change of your repo, question.

106
00:05:13.174 --> 00:05:17.989
&gt;&gt; So the first two characters
of commits sha is then

107
00:05:17.989 --> 00:05:22.334
placed where those blobs are for
each file so

108
00:05:22.334 --> 00:05:28.098
that that points to the commit
that it was last updated in?

109
00:05:28.098 --> 00:05:32.643
&gt;&gt; Effectively, yes and so you can see
right here, if I look at that, EC.

110
00:05:32.643 --> 00:05:38.625
If I go ls git/objects, you'll see EC.

111
00:05:38.625 --> 00:05:41.919
So you actually see that it
literally a storing each thing, and

112
00:05:41.919 --> 00:05:43.046
then it builds it up.

113
00:05:43.046 --> 00:05:49.560
Every tree contains effectively one or
more blob is the way to look at it.

114
00:05:49.560 --> 00:05:53.573
That's why you can't
commit an empty folder.

115
00:05:53.573 --> 00:05:56.561
Have you ever created a folder and
then nothing shows up?

116
00:05:56.561 --> 00:05:58.076
That's why,
because the tree has to have something.

117
00:05:58.076 --> 00:06:01.545
&gt;&gt; And Richard says,
is this like a linked list?

118
00:06:01.545 --> 00:06:02.526
&gt;&gt; That's a good way to think about it.

119
00:06:02.526 --> 00:06:03.325
It's like a linked list.

120
00:06:03.325 --> 00:06:06.357
The problem about a linked list thought is

121
00:06:06.357 --> 00:06:10.957
that a linked list contains a node
that points to the next node.

122
00:06:10.957 --> 00:06:13.479
But git,
you can have more than one parent.

123
00:06:13.479 --> 00:06:17.030
It's an acyclic graph that
happens to be linear.

124
00:06:17.030 --> 00:06:18.329
It's probably the best way to look at.

125
00:06:18.329 --> 00:06:23.800
It is that there isn't an ironic
order to get which is time, right?

126
00:06:23.800 --> 00:06:27.415
So as time marches forward,
every commit you make is ordered that way.

127
00:06:27.415 --> 00:06:31.812
That's actually an extremely important
point to make sure you have in your head,

128
00:06:31.812 --> 00:06:35.251
cuz when we do bisecting time is
a very important aspects to it and

129
00:06:35.251 --> 00:06:37.370
why bisecting works very, very well.

130
00:06:37.370 --> 00:06:40.713
And if you've never used I'm very sorry
if you've ever had to find when a bug

131
00:06:40.713 --> 00:06:43.078
happened and
you didn't know that this tool exists.

132
00:06:43.078 --> 00:06:44.548
So we'll go over it.

133
00:06:44.548 --> 00:06:46.915
Hopefully this does make git
feel less magical though.

134
00:06:46.915 --> 00:06:50.875
I want git to feel magical,
because it works so well,

135
00:06:50.875 --> 00:06:53.254
not because it's mysterious.

136
00:06:53.254 --> 00:06:55.983
And that's where you want magic to happen.

137
00:06:55.983 --> 00:07:00.231
You want it to be a great product,
not mysterious that it actually works.

138
00:07:00.231 --> 00:07:02.663
Sometimes it's mysterious that it actually
works 'cause you programmed it and

139
00:07:02.663 --> 00:07:04.322
you're shocked that you can
build anything that big.

140
00:07:04.322 --> 00:07:05.176
That's a different story.

141
00:07:05.176 --> 00:07:08.216
The previous chief product
officer at Netflix said,

142
00:07:08.216 --> 00:07:11.130
I'm surprised Netflix even works at all,
right?

143
00:07:11.130 --> 00:07:13.780
Because at the end of the day, it's
a whole bunch of people building something

144
00:07:13.780 --> 00:07:14.998
and somehow it all works together.

145
00:07:14.998 --> 00:07:15.960
So it's always fantastic.

146
00:07:15.960 --> 00:07:19.772
Remember, every single program you'll ever
write can be broken down to a bunch of if

147
00:07:19.772 --> 00:07:22.309
statements, for loops,
and variable declarations.

148
00:07:22.309 --> 00:07:23.508
That's it, that's all you're doing.

149
00:07:23.508 --> 00:07:27.120
Really, if you really break it down,
it's just a bunch of go-to statements and

150
00:07:27.120 --> 00:07:27.979
procedural code.

151
00:07:27.979 --> 00:07:29.273
That's all you write.

152
00:07:29.273 --> 00:07:33.888
And so no matter how fancy, no matter
how much elixir you use, it's all just

153
00:07:33.888 --> 00:07:37.949
really simple go-to statements at
the end of the day, all right?

154
00:07:37.949 --> 00:07:39.160
This is just for you guys.

155
00:07:39.160 --> 00:07:40.555
I'm gonna do a little
quick thing right here.

156
00:07:40.555 --> 00:07:41.276
I'm going to go like this.

157
00:07:41.276 --> 00:07:43.939
Make dir, how about source?

158
00:07:43.939 --> 00:07:45.811
Get status, get status.

159
00:07:45.811 --> 00:07:47.324
You'll notice nothing shows up.

160
00:07:47.324 --> 00:07:50.865
I'm gonna go Vim source and
we're gonna create a file in here.

161
00:07:50.865 --> 00:07:52.150
How about index.js?

162
00:07:52.150 --> 00:07:55.748
For all my TS, we're just so
awesome, right?

163
00:07:55.748 --> 00:07:58.150
All right, okay,
I'm gonna have an empty file in there.

164
00:07:58.150 --> 00:08:00.010
Git status,
you'll see that it's right there.

165
00:08:00.010 --> 00:08:02.683
Git out of this,
git status git commit foo.

166
00:08:02.683 --> 00:08:03.915
I'll do foo again.

167
00:08:03.915 --> 00:08:06.804
And I have this right here.

168
00:08:06.804 --> 00:08:11.214
And I'm gonna go git cat file -p,
and print it out.

169
00:08:11.214 --> 00:08:13.716
Again, parent previous commit, tree.

170
00:08:13.716 --> 00:08:18.372
I'm gonna go into the tree,
get cat file -p tree.

171
00:08:18.372 --> 00:08:20.276
Look at this, we got our blobs.

172
00:08:20.276 --> 00:08:23.852
But there you go, another tree right
here and that tree is a folder.

173
00:08:23.852 --> 00:08:26.743
So that means if I take this tree and

174
00:08:26.743 --> 00:08:31.041
go get cat file,
that tree you'll see index.ts.

175
00:08:31.041 --> 00:08:34.305
It's literally just storing a bunch of
pointers describing the state of git,

176
00:08:34.305 --> 00:08:35.651
just really to drive that home.

177
00:08:35.651 --> 00:08:39.415
Just so everyone really understands,
you could probably

178
00:08:39.415 --> 00:08:44.342
build a command line tool that cats out
a commit, parses out these strings.

179
00:08:44.342 --> 00:08:48.299
And you could probably rebuild the repo
yourself just from knowing how to use git

180
00:08:48.299 --> 00:08:48.958
cat-file.

181
00:08:48.958 --> 00:08:52.751
You could actually rebuild the entire
state of it by just walking blobs and

182
00:08:52.751 --> 00:08:54.415
trees and making directories.

183
00:08:54.415 --> 00:08:56.974
It's really not that magic,
just feels magic.

