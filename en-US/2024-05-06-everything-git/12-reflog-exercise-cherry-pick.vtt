WEBVTT

1
00:00:00.250 --> 00:00:02.620
This will be kind of a weird task to do,
but it'll be fun.

2
00:00:02.620 --> 00:00:05.920
What I want you to do is I want
you to create a branch called baz.

3
00:00:05.920 --> 00:00:10.310
I think currently we are on foo,
you can create on whatever you want.

4
00:00:10.310 --> 00:00:13.222
It doesn't matter about the base branch or
branching off of,

5
00:00:13.222 --> 00:00:16.210
once you create a branch or
I guess I say do it off of trunk.

6
00:00:16.210 --> 00:00:20.803
It really doesn't matter, but let's just
for now, just say create a branch off of

7
00:00:20.803 --> 00:00:25.117
trunk called baz, add one commit to baz,
and do it in a new file, right?

8
00:00:25.117 --> 00:00:28.595
Don't do it in README, do it in
a new file, switch back to trunk and

9
00:00:28.595 --> 00:00:29.537
then delete baz.

10
00:00:31.757 --> 00:00:35.797
And then I want you to bring baz
back to life from just the SHA.

11
00:00:38.637 --> 00:00:40.109
And we can discuss how you do that.

12
00:00:40.109 --> 00:00:41.443
So first do the first three, and

13
00:00:41.443 --> 00:00:45.053
then we'll kind of talk more about
this last one and I'll join you.

14
00:00:45.053 --> 00:00:51.755
I'll go git checkout trunk,
git checkout -b baz,

15
00:00:51.755 --> 00:00:55.713
echo, bazzy to baz, git add,

16
00:00:55.713 --> 00:01:01.065
git commit definitely my best work here.

17
00:01:02.145 --> 00:01:06.575
Git check out trunk,
git branch delete baz, dang it.

18
00:01:08.295 --> 00:01:12.575
I just lost all that work and
darn it I just lost all my history too.

19
00:01:12.575 --> 00:01:15.835
I could have probably recovered it if
I didn't Ctrl+L but now look at this.

20
00:01:15.835 --> 00:01:18.015
I'm up a river without a paddle, right?

21
00:01:18.015 --> 00:01:20.453
Well, hopefully you don't think that or

22
00:01:20.453 --> 00:01:23.888
I think this is a fun kind
of exercise to go on.

23
00:01:23.888 --> 00:01:26.508
So let's first use reflog,
and let's recover our SHA.

24
00:01:26.508 --> 00:01:30.576
So what I'll do is I'll go like this, git
reflog, I know it's in the last couple, so

25
00:01:30.576 --> 00:01:33.848
why not just do a -5 so
you don't see your entire history?

26
00:01:33.848 --> 00:01:36.718
And look at this, definitely my best work.

27
00:01:37.838 --> 00:01:41.153
Okay, so that's the SHA,
we have the SHA from that commit,

28
00:01:41.153 --> 00:01:43.177
which means what can we do with a SHA?

29
00:01:45.471 --> 00:01:46.462
&gt;&gt; Hook it up.

30
00:01:46.462 --> 00:01:48.170
&gt;&gt; Rebuild the whole repo.

31
00:01:48.170 --> 00:01:53.300
&gt;&gt; We can rebuild the entire repo just
from this one little tiny SHA, right?

32
00:01:53.300 --> 00:01:57.080
Remember git cat-file -p, this?

33
00:01:57.080 --> 00:02:01.410
Look at that, it's right there, it's still
in git just because we deleted the branch

34
00:02:01.410 --> 00:02:04.451
did not mean we deleted what
you just changed, it's in git.

35
00:02:04.451 --> 00:02:08.881
The files are in the computer,
as a wise man once told me.

36
00:02:08.881 --> 00:02:12.985
All right, problem, with our sweet
knowledge of how git plumbing works,

37
00:02:12.985 --> 00:02:17.154
can you retrieve the contents of the
commit using our super awesome powers to

38
00:02:17.154 --> 00:02:18.241
grab out baz.md?

39
00:02:18.241 --> 00:02:22.172
Can you do that?
You have the SHA, try to get out what was

40
00:02:22.172 --> 00:02:26.672
in baz.md, not from your memory,
but from git.

41
00:02:29.052 --> 00:02:33.821
So we can use git cat-file -p with that,

42
00:02:33.821 --> 00:02:39.280
I can go into the tree,
git cat-file -p that.

43
00:02:39.280 --> 00:02:42.041
I can see my little baz file right there,
and

44
00:02:42.041 --> 00:02:46.232
then I can git cat-file -p,
that thing, and look at that bazzy.

45
00:02:46.232 --> 00:02:51.063
I recovered it walking the SHAs
all the way to the exact file.

46
00:02:51.063 --> 00:02:56.090
So I could take this, and I could cat
that, and I could pipe that into baz.md,

47
00:02:56.090 --> 00:02:59.612
and then I could git status,
and look at that git diff.

48
00:02:59.612 --> 00:03:02.602
We actually don't have anything in
there because it hasn't been added.

49
00:03:02.602 --> 00:03:06.952
We can add that then git diff --staged.

50
00:03:06.952 --> 00:03:10.244
And look at that there's bazzy,
it's a new file right here.

51
00:03:10.244 --> 00:03:13.512
My goodness I've just recovered it and
I feel like a hacker, right?

52
00:03:15.122 --> 00:03:18.481
There is actually easier ways to do this,
but that was just kind of fun, right?

53
00:03:18.481 --> 00:03:22.231
Peer wizardry you do this at your job,
you're getting a promotion, right?

54
00:03:22.231 --> 00:03:24.615
Just right off the bat, brand CTO,

55
00:03:24.615 --> 00:03:29.239
front-end masters will just hire
you as the new CTO just doing this.

56
00:03:29.239 --> 00:03:33.171
All right, let's not use the internals,
is there another way?

57
00:03:33.171 --> 00:03:34.801
I mean, it's great flexing, right?

58
00:03:34.801 --> 00:03:38.116
You should always flex at work when
you can, but maybe you don't have to,

59
00:03:38.116 --> 00:03:40.269
is there an easier way to do this?

60
00:03:40.269 --> 00:03:44.915
Well, you can always just do the,
unfortunately the, here hold on I'll go

61
00:03:44.915 --> 00:03:49.409
like this, git reflog, let me just
have this thing out right here.

62
00:03:49.409 --> 00:03:52.684
&gt;&gt; In chat, someone mentioned cherry pick.

63
00:03:52.684 --> 00:03:53.915
&gt;&gt; Shh, chat!

64
00:03:53.915 --> 00:03:58.314
&gt;&gt; [LAUGH]
&gt;&gt; All right, so one thing I can do,

65
00:03:58.314 --> 00:04:04.335
if I really wanted that change in trunk,
I could git merge just that shot.

66
00:04:04.335 --> 00:04:05.824
I already have the shot, right?

67
00:04:05.824 --> 00:04:08.575
I could just bring it in,
git still has the state,

68
00:04:08.575 --> 00:04:12.324
boom look at that baz is now in trunk wow,
that was magical, right?

69
00:04:12.324 --> 00:04:15.423
We didn't have to do all that hacker man
stuff, we just simply knew the SHA, and

70
00:04:15.423 --> 00:04:17.073
then we can just merge it into trunk.

71
00:04:17.073 --> 00:04:23.483
Now, I have baz right there it's just
right there, kind of interesting, right?

72
00:04:23.483 --> 00:04:24.759
You might not have seen that one coming.

73
00:04:27.186 --> 00:04:31.097
So we can do that, but
there is a problem with merge.

74
00:04:31.097 --> 00:04:33.583
What happen if there was a lot
of diverging that happened?

75
00:04:33.583 --> 00:04:39.051
What happen if there's a bunch of commits
in betwixt my trunk head, and that commit.

76
00:04:39.051 --> 00:04:40.091
What would happen if we merged it?

77
00:04:42.131 --> 00:04:44.521
We'd get all that history, right?

78
00:04:44.521 --> 00:04:47.061
Because it's gonna try to find,
what does it do again?

79
00:04:47.061 --> 00:04:50.722
It walks back, it finds the merge base or
the best common ancestor, and

80
00:04:50.722 --> 00:04:54.078
then it replays all of those
potentially into a third branch, and

81
00:04:54.078 --> 00:04:57.027
then does a merge commit if
the histories have diverged.

82
00:04:57.027 --> 00:04:59.427
So you may not want to do all that, right?

83
00:04:59.427 --> 00:05:01.407
That may be kind of a pain.

84
00:05:01.407 --> 00:05:05.327
Maybe you just want that commit and
not everything else.

85
00:05:05.327 --> 00:05:07.764
Well, I don't know if you
know about cherry pick,

86
00:05:07.764 --> 00:05:10.894
probably have never even heard
the term until this exact moment.

87
00:05:10.894 --> 00:05:16.892
But cherry pick allows you to take
just one or more commits specifically.

88
00:05:16.892 --> 00:05:21.665
Cherry pick is fantastic, I've used this
probably as one of my 20 percent commands.

89
00:05:21.665 --> 00:05:23.915
I probably have used this the most.

90
00:05:23.915 --> 00:05:28.043
It's just because any time I have just
that change, I don't want to merge,

91
00:05:28.043 --> 00:05:30.375
I just want this one
diff cherry pick it in.

92
00:05:30.375 --> 00:05:33.688
And it works with remotes it's fantastic
long as you are up to date with your

93
00:05:33.688 --> 00:05:35.755
remote and
you have all the changes from them.

94
00:05:35.755 --> 00:05:39.743
You can just cherry pick a singular
commit into your project if you need to.

95
00:05:39.743 --> 00:05:41.963
It does require your
working tree to be clean.

96
00:05:41.963 --> 00:05:45.291
Remember, working tree is just
the state of your project,

97
00:05:45.291 --> 00:05:47.963
everything that's been tracked by git.

98
00:05:47.963 --> 00:05:50.902
So no changes to your working tree,
and then you can cherry pick, and

99
00:05:50.902 --> 00:05:52.633
no changes to your index either.

100
00:05:52.633 --> 00:05:55.553
Sometimes if you have index problems,
you can, it will say no.

101
00:05:55.553 --> 00:06:00.687
Index again is the staging area remember,
it's not necessarily your working tree.

102
00:06:00.687 --> 00:06:05.521
So there you go, so git cherry pick,
try if you haven't done it, and see if you

103
00:06:05.521 --> 00:06:10.627
can cherry pick the change of baz into
trunk, if you did not merge it in.

104
00:06:10.627 --> 00:06:14.363
So all you have to do is of course
git cherry pick and the SHA and

105
00:06:14.363 --> 00:06:16.280
it will just merge it right in.

106
00:06:17.455 --> 00:06:22.337
Fantastic, a really real talk
it is like by far one of my most

107
00:06:22.337 --> 00:06:24.885
used commands is cherry pick.

108
00:06:24.885 --> 00:06:29.646
Absolutely, just has saved my bacon more
than once because have you ever had like

109
00:06:29.646 --> 00:06:32.728
a change that has diverged so
bad due to something and

110
00:06:32.728 --> 00:06:36.666
then you just get it the merge
conflict is just incomprehensible?

111
00:06:36.666 --> 00:06:39.406
This has happened to me and
luckily you've made some small commits and

112
00:06:39.406 --> 00:06:41.043
you haven't made one big commit.

113
00:06:41.043 --> 00:06:44.786
And you're like, I'm just gonna take out
these two things, play them over here and

114
00:06:44.786 --> 00:06:46.323
then try to rebuild the rest of it.

115
00:06:46.323 --> 00:06:50.377
I've been in a situation where there was
such a bad divergence that the only way

116
00:06:50.377 --> 00:06:53.266
forward was to actually just
hand move things over, and

117
00:06:53.266 --> 00:06:54.693
that was with cherry pick.

118
00:06:54.693 --> 00:06:56.103
It was fantastic,
I'm not gonna draw it out.

119
00:06:56.103 --> 00:06:59.018
I think everybody understands this,
we've talked about it quite a bit.

