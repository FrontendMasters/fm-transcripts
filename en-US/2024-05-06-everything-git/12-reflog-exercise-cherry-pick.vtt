WEBVTT

1
00:00:00.089 --> 00:00:02.881
This will be a weird task to do,
but it'll be fun.

2
00:00:02.881 --> 00:00:05.635
What I want you to do is I want
you to create a branch called baz.

3
00:00:05.635 --> 00:00:10.193
I think currently we are on foo,
you can create on whatever you want.

4
00:00:10.193 --> 00:00:13.141
It doesn't matter about the base branch or
branching off of.

5
00:00:13.141 --> 00:00:15.996
I want you to create a branch, or
I guess I say, do it off of trunk.

6
00:00:15.996 --> 00:00:16.609
It really doesn't matter.

7
00:00:16.609 --> 00:00:21.275
But let's for now just say,
create a branch off of trunk called baz,

8
00:00:21.275 --> 00:00:24.913
add one commit to baz, and
do it in a new file, right?

9
00:00:24.913 --> 00:00:28.246
Don't do it in read me,
do it in a new file,

10
00:00:28.246 --> 00:00:31.500
switch back to trunk and then delete baz.

11
00:00:31.500 --> 00:00:36.240
And then I want you to bring baz
back to life from just the SHA.

12
00:00:38.420 --> 00:00:39.820
And we can discuss how you do that.

13
00:00:39.820 --> 00:00:43.814
So first do the first three and then we'll
kind off talk more about this last one,

14
00:00:43.814 --> 00:00:44.824
and I'll join you.

15
00:00:44.824 --> 00:00:50.367
I'll go git checkout trunk,
git checkout -b baz.

16
00:00:50.367 --> 00:00:56.426
Echo, bazzy, the baz, git add,

17
00:00:56.426 --> 00:01:01.944
git commit, definitely my best work here.

18
00:01:01.944 --> 00:01:08.230
git check out trunk,
git branch delete, baz, dang it.

19
00:01:08.230 --> 00:01:12.397
I just lost all that work, and darn it,
I just lost all my history, too.

20
00:01:12.397 --> 00:01:14.994
I could have probably recovered
it if I didn't Ctrl+L.

21
00:01:14.994 --> 00:01:17.922
But now look at this,
I'm up a river without a paddle, right?

22
00:01:17.922 --> 00:01:20.673
Well, hopefully, you don't think that.

23
00:01:20.673 --> 00:01:23.748
I think this is a fun kind
of exercise to go on.

24
00:01:23.748 --> 00:01:27.199
So let's first use reflog and
let's recover our SHA.

25
00:01:27.199 --> 00:01:29.427
So what I'll do is I'll go like this,
git reflog.

26
00:01:29.427 --> 00:01:31.944
I know it's in the last couple,
so why not just do a -5 so

27
00:01:31.944 --> 00:01:33.578
you don't see your entire history?

28
00:01:33.578 --> 00:01:37.705
And look at this,
definitely, my best work.

29
00:01:37.705 --> 00:01:39.108
Okay, so that's the SHA.

30
00:01:39.108 --> 00:01:43.484
We have the SHA from that commit,
which means what can we do with a SHA?

31
00:01:45.551 --> 00:01:48.310
&gt;&gt; Hook it up, rebuild the whole repo.

32
00:01:48.310 --> 00:01:53.121
&gt;&gt; We can rebuild the entire repo just
from this one little tiny SHA, right?

33
00:01:53.121 --> 00:01:56.930
Remember, git cat-file -p this.

34
00:01:56.930 --> 00:01:59.088
Look at that, it's right there.

35
00:01:59.088 --> 00:02:00.011
It's still in Git.

36
00:02:00.011 --> 00:02:05.158
Just because we deleted the branch did not
mean we deleted what you just changed,

37
00:02:05.158 --> 00:02:08.729
the files are in the compute,
as a wise man once told me.

38
00:02:08.729 --> 00:02:12.872
All right, problem, with our sweet
knowledge of how Git plumbing works,

39
00:02:12.872 --> 00:02:17.082
can you retrieve the contents of the
commit using our super awesome powers to

40
00:02:17.082 --> 00:02:18.161
grab out baz.md?

41
00:02:18.161 --> 00:02:19.811
Can you do that.

42
00:02:19.811 --> 00:02:24.082
You have the SHA,
try to get out what was in baz.md,

43
00:02:24.082 --> 00:02:27.106
not from your memory, but from Git.

44
00:02:28.879 --> 00:02:32.541
So we can use git cat-file -p.

45
00:02:32.541 --> 00:02:39.395
With that, I can go into the tree,
git cat-file -p that.

46
00:02:39.395 --> 00:02:43.999
I can see my little baz file right there,
and then I can git cat-file -p,

47
00:02:43.999 --> 00:02:46.309
that thing, and look at that bazzy.

48
00:02:46.309 --> 00:02:50.887
I recovered it walking the SHAs
all the way to the exact file.

49
00:02:50.887 --> 00:02:56.132
So I could take this and I could cat that,
and I could pipe that into baz.md and

50
00:02:56.132 --> 00:02:59.455
then I could git status and
look at that git diff.

51
00:02:59.455 --> 00:03:02.478
We actually don't have anything in there,
because it hasn't been added.

52
00:03:02.478 --> 00:03:06.866
We can add that, then git diff staged.

53
00:03:06.866 --> 00:03:10.157
And look at that, there's baz,
it's a new file right here.

54
00:03:10.157 --> 00:03:12.025
My goodness, I've just recovered it.

55
00:03:12.025 --> 00:03:15.017
And I feel like a hacker, right?

56
00:03:15.017 --> 00:03:16.713
There is actually easier ways to do this.

57
00:03:16.713 --> 00:03:18.375
But that was just kinda fun, right?

58
00:03:18.375 --> 00:03:21.942
Pure wizardr,y you do this at your job,
you're getting a promotion, right?

59
00:03:21.942 --> 00:03:24.541
Just right off the bat, Brent, CTO,

60
00:03:24.541 --> 00:03:29.348
Frontend Masters will just hire you
as the new CTO for just doing this.

61
00:03:29.348 --> 00:03:31.715
All right, let's not use the internals.

62
00:03:31.715 --> 00:03:33.096
Is there another way?

63
00:03:33.096 --> 00:03:34.551
I mean, it's great flexing, right?

64
00:03:34.551 --> 00:03:37.719
You should always flex that work when
you can, but maybe you don't have to.

65
00:03:37.719 --> 00:03:40.143
Is there a easier way to do this?

66
00:03:40.143 --> 00:03:47.491
Hold on, I'll go like this, git reflog.

67
00:03:47.491 --> 00:03:49.273
Let me just have this
thing out right here.

68
00:03:49.273 --> 00:03:55.731
&gt;&gt; In chat,
someone mentioned cherry-pick [LAUGH].

69
00:03:55.731 --> 00:03:58.452
&gt;&gt; All right, so one thing I can do,

70
00:03:58.452 --> 00:04:04.395
If I really wanted that change in trunk,
I could git merge just that SHA.

71
00:04:04.395 --> 00:04:05.685
I already have the SHA, right?

72
00:04:05.685 --> 00:04:07.017
I could just bring it in.

73
00:04:07.017 --> 00:04:10.852
Git still has the state, boom,
look at that, baz is now in trunk.

74
00:04:10.852 --> 00:04:12.155
Wow, that was magical, right?

75
00:04:12.155 --> 00:04:13.883
We didn't have to do all
that hacker command stuff.

76
00:04:13.883 --> 00:04:16.936
We just simply needed the SHA and
then we could just merge it into trunk.

77
00:04:16.936 --> 00:04:18.859
Now, I have baz right there.

78
00:04:18.859 --> 00:04:20.184
It's just right there.

79
00:04:21.492 --> 00:04:23.319
Kinda interesting, right?

80
00:04:23.319 --> 00:04:24.976
You might not have seen that one coming.

81
00:04:27.253 --> 00:04:28.495
So we can do that.

82
00:04:28.495 --> 00:04:31.164
But there is a problem with merge.

83
00:04:31.164 --> 00:04:33.473
What happened if there was a lot
of diverging that happened?

84
00:04:33.473 --> 00:04:37.984
What happened if there was a bunch of
commits in betwixt my trunk head and

85
00:04:37.984 --> 00:04:38.895
that commit?

86
00:04:38.895 --> 00:04:42.021
What would happen if we merged it?

87
00:04:42.021 --> 00:04:46.894
We'd git all that history, right, cuz it's
gonna try to find, what does it do again?

88
00:04:46.894 --> 00:04:50.936
It walks back, it finds the merge base or
the best common ancestor.

89
00:04:50.936 --> 00:04:54.237
And then it replays all of those
potentially into a third branch,

90
00:04:54.237 --> 00:04:57.308
and then does a merge commit if
the histories have diverged.

91
00:04:57.308 --> 00:04:59.269
So you may not want to do all that, right?

92
00:04:59.269 --> 00:05:01.249
That may be kind of a pain.

93
00:05:01.249 --> 00:05:05.188
Maybe you just want that commit and
not everything else.

94
00:05:05.188 --> 00:05:07.989
Well, [LAUGH] I don't know if
you know about cherry-pick,

95
00:05:07.989 --> 00:05:11.251
probably you've never even heard
the term until this exact moment.

96
00:05:11.251 --> 00:05:16.965
But cherry-pick allows you to take just
one or more commits, specifically.

97
00:05:16.965 --> 00:05:17.917
Cherry-pick is fantastic.

98
00:05:17.917 --> 00:05:23.720
In one of my 20% commands,
I probably have used this the most.

99
00:05:23.720 --> 00:05:27.863
It's just because any time I have just
that change, I don't want to merge,

100
00:05:27.863 --> 00:05:30.342
I just want this one
diff cherry-pick it in.

101
00:05:30.342 --> 00:05:33.640
And it works with remotes, it's fantastic
long as you are up to date with your

102
00:05:33.640 --> 00:05:35.635
remote and
you have all the changes from them.

103
00:05:35.635 --> 00:05:39.640
You can just cherry-pick a singular
commit into your project if you need to.

104
00:05:39.640 --> 00:05:41.831
It does require your
working tree to be clean.

105
00:05:41.831 --> 00:05:45.365
Remember, working tree is just
the state of your project,

106
00:05:45.365 --> 00:05:47.846
everything that's been tracked by Git.

107
00:05:47.846 --> 00:05:50.996
So no changes to your working tree,
and then you can cherry-pick, and

108
00:05:50.996 --> 00:05:52.477
no changes to your index either.

109
00:05:52.477 --> 00:05:55.344
Sometimes if you have index problems,
it will say no.

110
00:05:55.344 --> 00:05:56.771
Index, again, is the staging area.

111
00:05:56.771 --> 00:06:02.275
Remember, it's not necessarily your
working tree, so there you go.

112
00:06:02.275 --> 00:06:04.267
So git cherry-pick, try it.

113
00:06:04.267 --> 00:06:05.738
If you haven't done it,

114
00:06:05.738 --> 00:06:10.509
see if you can cherry-pick the change of
baz into trunk if you did not merge it in.

115
00:06:10.509 --> 00:06:15.243
So all you have to do is, of course,
git cherry-pick and the SHA, and

116
00:06:15.243 --> 00:06:17.341
it will just merge it right in.

117
00:06:17.341 --> 00:06:19.274
Fantastic, really?

118
00:06:19.274 --> 00:06:25.127
Real talk, it is by far one of my
most used commands is cherry-pick.

119
00:06:25.127 --> 00:06:28.297
I absolutely just has saved
my bacon more than once.

120
00:06:28.297 --> 00:06:32.977
Cuz have you ever had a change that
has diverged so bad due to something,

121
00:06:32.977 --> 00:06:36.649
and then the merge conflict
is just incomprehensible?

122
00:06:36.649 --> 00:06:37.658
And this has happened to me.

123
00:06:37.658 --> 00:06:39.806
And luckily,
you've made some small commits and

124
00:06:39.806 --> 00:06:41.298
you haven't made one big commit.

125
00:06:41.298 --> 00:06:44.488
I'm just gonna take out these two things,
play them over here and

126
00:06:44.488 --> 00:06:46.181
then try to rebuild the rest of it.

127
00:06:46.181 --> 00:06:50.777
I've been in a situation where it was such
a bad divergence that the only way forward

128
00:06:50.777 --> 00:06:55.059
was to actually just hand move things
over, and that was with cherry-pick.

