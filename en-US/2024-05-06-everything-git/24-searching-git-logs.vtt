WEBVTT

1
00:00:00.000 --> 00:00:02.928
Let's take this repo, and you're never
gonna guess what we're gonna do.

2
00:00:02.928 --> 00:00:05.188
We are gonna clone, but
we're gonna bisect as well.

3
00:00:05.188 --> 00:00:06.795
You would never have guessed that,
would you?

4
00:00:06.795 --> 00:00:09.891
All right, so
if you don't have the course open,

5
00:00:09.891 --> 00:00:13.516
it's just
github.com/ThePrimeagen/git-bisect.

6
00:00:13.516 --> 00:00:16.505
So you can go to GitHub and go grab that.

7
00:00:16.505 --> 00:00:19.436
So we're here,
now we kinda have a classic problem.

8
00:00:19.436 --> 00:00:24.863
This happens about once, twice, a few
times a year, where you have to do this,

9
00:00:24.863 --> 00:00:29.650
where there's a whole bunch of commits and
something has gone wrong.

10
00:00:29.650 --> 00:00:33.780
You don't know when it's gone wrong,
you just know a while back, it's good, and

11
00:00:33.780 --> 00:00:35.024
currently, it's bad.

12
00:00:35.024 --> 00:00:39.616
And you wanna find out exactly
when did something go wrong.

13
00:00:39.616 --> 00:00:41.914
And so this is called git bisect.

14
00:00:41.914 --> 00:00:43.992
It's not a common problem,
but I definitely run into it.

15
00:00:43.992 --> 00:00:48.587
And the longer your testing cycle is,
the more you should know that this exists.

16
00:00:48.587 --> 00:00:51.669
Because if it takes you one second, I'm
sure there's a bunch of people are just

17
00:00:51.669 --> 00:00:54.666
walking back ten commits at a time,
they don't even know git bisect exists.

18
00:00:54.666 --> 00:00:57.331
So therefore, they're just like,
I don't have to care.

19
00:00:57.331 --> 00:01:00.510
But if you have a ten minute
testing cycle, all of a sudden,

20
00:01:00.510 --> 00:01:03.061
you wanna be as efficient as possible,
right?

21
00:01:03.061 --> 00:01:06.093
So, but there's a lot of
different ways we could do this.

22
00:01:06.093 --> 00:01:09.211
One cool thing is with logs,
you can actually search through logs.

23
00:01:09.211 --> 00:01:12.609
And this is kind of a neat technique in
the sense that if you just wanna find

24
00:01:12.609 --> 00:01:14.569
a change around a particular component.

25
00:01:14.569 --> 00:01:17.624
And everyone does a pretty decent
job at putting in good logs,

26
00:01:17.624 --> 00:01:21.446
you could find a change around that
particular component even if it's spread

27
00:01:21.446 --> 00:01:23.172
across a couple different files.

28
00:01:23.172 --> 00:01:26.588
So that way, you're not just looking at
a specific file, but maybe you're just

29
00:01:26.588 --> 00:01:29.718
looking for a usage of a specific item
throughout the code base over time.

30
00:01:29.718 --> 00:01:31.436
And so you can grab all those things.

31
00:01:31.436 --> 00:01:36.193
Obviously, some of the cons of using logs
is that sometimes you don't know a keyword

32
00:01:36.193 --> 00:01:37.533
to search for, right?

33
00:01:37.533 --> 00:01:42.243
You know there's a bug, but you have no
way you could really look through the logs

34
00:01:42.243 --> 00:01:44.885
to know why or
where that bug change could be.

35
00:01:44.885 --> 00:01:46.856
Commit messages aren't always the best.

36
00:01:46.856 --> 00:01:51.340
I know we all say we're gonna do better,
our good commit messages starts tomorrow,

37
00:01:51.340 --> 00:01:53.183
and then it just doesn't happen.

38
00:01:53.183 --> 00:01:55.592
Sometimes you can't boil it
down to any specific word, or

39
00:01:55.592 --> 00:01:57.766
there's just too many commits to the file,
right?

40
00:01:57.766 --> 00:02:00.141
There could be hundreds of them,
so you're like, okay,

41
00:02:00.141 --> 00:02:01.845
I can't just do a quick check and grab it.

42
00:02:01.845 --> 00:02:06.272
One reason why I tend to just do a quick
log look is let's say it takes two minutes

43
00:02:06.272 --> 00:02:08.232
to test to see if it's good or bad.

44
00:02:08.232 --> 00:02:13.172
And I know the file that is probably in,
I could do a quick log search.

45
00:02:13.172 --> 00:02:15.244
Look at that, there's one change here.

46
00:02:15.244 --> 00:02:18.539
I'll just test this one change, and
if that one is the problem, I'm like,

47
00:02:18.539 --> 00:02:19.167
God, right?

48
00:02:19.167 --> 00:02:22.924
You can just kind of look at the change
and go, okay, this is pretty simple,

49
00:02:22.924 --> 00:02:24.054
I can see exactly why.

50
00:02:24.054 --> 00:02:26.043
So it can be pretty fast.

51
00:02:26.043 --> 00:02:28.174
So you can actually search.

52
00:02:28.174 --> 00:02:30.103
You can search with logs with grep.

53
00:02:30.103 --> 00:02:33.514
But before we do that, we gotta do this,
this little npm i thing, right?

54
00:02:33.514 --> 00:02:35.729
This is a node thing, okay?

55
00:02:35.729 --> 00:02:38.503
So do a little npm i,

56
00:02:38.503 --> 00:02:43.740
are you making fun of me for using npm?

57
00:02:43.740 --> 00:02:47.624
&gt;&gt; No, I have to install npm,
I don't have Node on here.

58
00:02:47.624 --> 00:02:50.782
&gt;&gt; [APPLAUSE]
&gt;&gt; [LAUGH]

59
00:02:50.782 --> 00:02:51.805
&gt;&gt; That was amazing.

60
00:02:51.805 --> 00:02:57.488
If you didn't hear, there's someone here
without Node, how great is that based?

61
00:02:57.488 --> 00:02:59.083
You are now the new coolest.

62
00:02:59.083 --> 00:03:01.187
Do you wanna come up here and
be UI- [INAUDIBLE]

63
00:03:01.187 --> 00:03:02.669
&gt;&gt; [LAUGH]

64
00:03:02.669 --> 00:03:03.276
&gt;&gt; You don't have to

65
00:03:03.276 --> 00:03:06.031
participate if you don't want to,
it's pretty easy, it's step-by-step.

66
00:03:06.031 --> 00:03:09.597
&gt;&gt; [LAUGH]
&gt;&gt; You may, all right,

67
00:03:09.597 --> 00:03:10.668
now that we did that.

68
00:03:10.668 --> 00:03:13.378
All right, so next,
try to run test, npm run test.

69
00:03:13.378 --> 00:03:16.259
I actually did Node specifically
cuz I figured there's no

70
00:03:16.259 --> 00:03:18.628
way people aren't gonna
have Node [INAUDIBLE].

71
00:03:18.628 --> 00:03:21.399
[LAUGH] Man,
I can't believe this actually have.

72
00:03:21.399 --> 00:03:22.205
This is so great.

73
00:03:22.205 --> 00:03:24.495
Okay, npm run test.

74
00:03:24.495 --> 00:03:26.756
I didn't wanna be like,
you don't have cargo?

75
00:03:26.756 --> 00:03:29.297
Well, let me tell you about Rust,
I wanna be that guy.

76
00:03:29.297 --> 00:03:33.118
So yet here I am, telling you about Node.

77
00:03:33.118 --> 00:03:35.420
So I intentionally just
put a sleep in here,

78
00:03:35.420 --> 00:03:38.791
so you have to wait 30 seconds to
see if it fails or not, right?

79
00:03:38.791 --> 00:03:40.568
This is real life, right?

80
00:03:40.568 --> 00:03:42.772
This is what happens in real code bases.

81
00:03:42.772 --> 00:03:45.704
It takes a lot longer to figure out
if something is broken or not broken.

82
00:03:45.704 --> 00:03:50.596
So you really don't wanna have to
live this life constantly, right?

83
00:03:50.596 --> 00:03:51.801
Right, thank you for agreeing.

84
00:03:51.801 --> 00:03:52.950
I do appreciate that.

85
00:03:52.950 --> 00:03:55.608
All right, there we go.

86
00:03:55.608 --> 00:04:00.282
One failed test, expected 138,
but we received 140.

87
00:04:00.282 --> 00:04:03.311
Dang, that stinks, right?

88
00:04:03.311 --> 00:04:04.397
You can actually see it right there.

89
00:04:04.397 --> 00:04:06.609
See, I told you,
I'm literally just sleeping right there.

90
00:04:06.609 --> 00:04:09.355
All right, fantastic,
we got that all done.

91
00:04:09.355 --> 00:04:11.793
Observation, we know that
the foo function is failing and

92
00:04:11.793 --> 00:04:13.246
the test foo are failing, right?

93
00:04:13.246 --> 00:04:15.915
So we know that something's wrong
with the function called foo.

94
00:04:15.915 --> 00:04:20.638
So what we can do is we can use, by
the way, I say you can do man git-log and

95
00:04:20.638 --> 00:04:21.817
search the logs.

96
00:04:21.817 --> 00:04:26.496
If you don't know in all the computer
speak, searching is called grep.

97
00:04:26.496 --> 00:04:28.850
These modern Zoomers these days
just use the term search, and

98
00:04:28.850 --> 00:04:31.081
they don't even know about grep,
and grep is fantastic.

99
00:04:31.081 --> 00:04:33.688
So if I told you to go in here and
find search,

100
00:04:33.688 --> 00:04:38.482
you just wouldn't really find the thing
because it may contain the word search,

101
00:04:38.482 --> 00:04:40.618
but none of them actually are grep.

102
00:04:40.618 --> 00:04:42.931
So you gotta use grep, right?

103
00:04:42.931 --> 00:04:43.864
And there you go.

104
00:04:43.864 --> 00:04:46.030
So you can do a grep with the pattern.

105
00:04:46.030 --> 00:04:50.046
And so this is from the log,
you just simply get to look through any of

106
00:04:50.046 --> 00:04:52.664
the commit messages with
the word foo in it.

107
00:04:52.664 --> 00:04:54.544
So that's a strategy we can do.

108
00:04:54.544 --> 00:04:56.731
So I can go git log --grep foo.

109
00:04:56.731 --> 00:05:00.341
And so look at this, this is not
about foo, this is not about foo,

110
00:05:00.341 --> 00:05:01.929
it's kinda hard to search.

111
00:05:01.929 --> 00:05:05.647
I mean, this one sounds pretty suspicious,
altering foo for

112
00:05:05.647 --> 00:05:07.518
new specifications, right?

113
00:05:07.518 --> 00:05:08.662
That sounds pretty good.

114
00:05:08.662 --> 00:05:12.116
What you can also do is
you can actually use -p.

115
00:05:12.116 --> 00:05:14.092
-p also puts the changes in here.

116
00:05:14.092 --> 00:05:16.331
So then you can go, okay, well,
what are all the changes?

117
00:05:16.331 --> 00:05:19.890
And as I search through,
this looks pretty suspect, right?

118
00:05:19.890 --> 00:05:25.183
So learning a thing or two about searching
the logs can be very, very useful.

119
00:05:25.183 --> 00:05:29.895
Because sometimes you can stumble upon
things, or you can look at changes

120
00:05:29.895 --> 00:05:34.380
over time for a specific item, and
it's kinda nice being able to use.

121
00:05:34.380 --> 00:05:35.348
So there we go.

122
00:05:35.348 --> 00:05:36.997
So grep, that's what we're using.

123
00:05:36.997 --> 00:05:40.403
And so we are able to easily find the
problem right here just by looking at it.

124
00:05:40.403 --> 00:05:41.935
Obviously, we know the problem, right?

125
00:05:41.935 --> 00:05:43.262
It's a very trivial problem.

126
00:05:43.262 --> 00:05:45.415
We're two off, and look at this.

127
00:05:45.415 --> 00:05:50.004
I don't know, we times by two, and
that one exactly fits the need.

128
00:05:50.004 --> 00:05:51.507
So we got lucky on that one.

129
00:05:51.507 --> 00:05:53.422
The problem with this is
this is also a lucky search.

130
00:05:53.422 --> 00:05:55.896
So if you're looking to solve a bug,
definitely,

131
00:05:55.896 --> 00:05:59.517
this one error's on the side of luck to
be able to get a good term with a simple

132
00:05:59.517 --> 00:06:03.162
set of changes that you can just look at,
and it's like, there it is.

133
00:06:03.162 --> 00:06:05.729
So I often don't use this,
but every now and then,

134
00:06:05.729 --> 00:06:08.654
I'm like, ooh,
there was this change I did a while back,

135
00:06:08.654 --> 00:06:12.029
and I wanna be able to just go straight
to that change and go look at.

136
00:06:12.029 --> 00:06:14.936
And so I can kinda know in my head
where or how I'm doing something.

137
00:06:14.936 --> 00:06:17.453
So I like searching.

138
00:06:17.453 --> 00:06:19.558
Okay, number two,
you can also search by file.

139
00:06:19.558 --> 00:06:24.294
So we already know that the problem
is in the index file, I think it is.

140
00:06:24.294 --> 00:06:26.286
There's only one file in here.

141
00:06:26.286 --> 00:06:27.125
Yeah, there's only one file.

142
00:06:27.125 --> 00:06:31.445
Okay, so you can go git log and
we'll do a little -p, and

143
00:06:31.445 --> 00:06:34.783
then we can go src/index., is it js or ts?

144
00:06:34.783 --> 00:06:36.020
What are we at?

145
00:06:36.020 --> 00:06:38.887
Yeah, and
then you have to do a little dash dash.

146
00:06:38.887 --> 00:06:43.561
You're gonna only search in
the log with these specific files.

147
00:06:43.561 --> 00:06:47.970
And this will actually get you
the change set only for these files.

148
00:06:47.970 --> 00:06:50.132
That's it, so there's only
been two changes in this file.

149
00:06:50.132 --> 00:06:55.667
And so this is a nice way to be able to
reduce down the change you're looking for

150
00:06:55.667 --> 00:06:56.446
to a file.

151
00:06:56.446 --> 00:06:58.765
You can pass in multiple files,
very, very useful.

152
00:06:58.765 --> 00:07:01.231
You can mix and match, grep and this.

153
00:07:01.231 --> 00:07:03.540
So it's good to have this power with you.

154
00:07:03.540 --> 00:07:06.272
If you use -s,
you can search through the change itself.

155
00:07:06.272 --> 00:07:11.363
So there's a lot of cool
opportunities here with log.

156
00:07:11.363 --> 00:07:13.400
Just so you guys know, it does exist.

