WEBVTT

1
00:00:00.460 --> 00:00:05.056
All right, so the next thing we're going
to do is we need to actually populate

2
00:00:05.056 --> 00:00:06.625
the list of folders here.

3
00:00:06.625 --> 00:00:09.320
So here we have like a list of
folders that you can click on,

4
00:00:09.320 --> 00:00:13.310
these folders are gonna organize our
documents that we take our notes in.

5
00:00:13.310 --> 00:00:16.212
So we wanna be able to just
to get some folders here,

6
00:00:16.212 --> 00:00:20.608
and then eventually be able to click on
the folders and look at the documents.

7
00:00:20.608 --> 00:00:23.353
We'll get to the mutations where
you can create this stuff later.

8
00:00:23.353 --> 00:00:25.113
We just need to query and get them, and

9
00:00:25.113 --> 00:00:28.470
this is where I think some really
cool Next.js stuff is gonna come in.

10
00:00:28.470 --> 00:00:31.565
So let's do that.

11
00:00:31.565 --> 00:00:34.458
Let's go on to this next one here.

12
00:00:34.458 --> 00:00:37.370
So for this one, we're just gonna talk
about connecting to the database.

13
00:00:37.370 --> 00:00:38.911
So I know you might be thinking, well,

14
00:00:38.911 --> 00:00:40.894
I thought we're already
connected to database.

15
00:00:40.894 --> 00:00:43.417
Well, yes, next off plugin
connected to the database and

16
00:00:43.417 --> 00:00:45.080
did some database stuff for us.

17
00:00:45.080 --> 00:00:49.450
But we specifically haven't connected
to the database to do our own work.

18
00:00:49.450 --> 00:00:54.210
So we need to create our own different
type of connection and get that working.

19
00:00:54.210 --> 00:00:57.320
So that's what we're gonna do.

20
00:00:57.320 --> 00:01:02.056
If you've never used a database in
a serverless environment before,

21
00:01:02.056 --> 00:01:03.970
this might be kinda new.

22
00:01:03.970 --> 00:01:08.720
Because most databases were not built for
a service environment, like what

23
00:01:08.720 --> 00:01:13.482
makes a service environment different
than a regular server environment?

24
00:01:13.482 --> 00:01:17.945
Service environments are meant
to be one offs, stateless.

25
00:01:17.945 --> 00:01:22.908
Whereas most databases are expected
to be running in some type of long

26
00:01:22.908 --> 00:01:24.885
polling service, right?

27
00:01:24.885 --> 00:01:26.855
Your servers are always on.

28
00:01:26.855 --> 00:01:29.806
So the databases are expecting that,
they're built for that, they have

29
00:01:29.806 --> 00:01:33.900
like connection pooling, and buffering,
and reconnecting, and all this stuff.

30
00:01:33.900 --> 00:01:37.944
That is the complete opposite of what
you want in a serverless environment,

31
00:01:37.944 --> 00:01:39.839
because you could, I don't know,

32
00:01:39.839 --> 00:01:44.280
someone could just hit your API a thousand
times and you hit your connection limit.

33
00:01:44.280 --> 00:01:49.060
Cuz every time you do it, you're making
a new connection, it's stateless, right?

34
00:01:49.060 --> 00:01:55.023
So what we can do to get around that is,
one, you should use a service database.

35
00:01:55.023 --> 00:02:00.650
And service database, that's just
a fancy word for a HTTP based database.

36
00:02:00.650 --> 00:02:04.763
That's literally it, there's some
like real service databases built for

37
00:02:04.763 --> 00:02:06.350
that from the ground up.

38
00:02:06.350 --> 00:02:09.930
But you could take any database
throw like a RestAPI in front of it.

39
00:02:09.930 --> 00:02:14.249
And that's a serverless database now,
so just think about that.

40
00:02:14.249 --> 00:02:16.181
Or you can do what we're gonna do,

41
00:02:16.181 --> 00:02:19.940
which is basically just cache
our database connection.

42
00:02:19.940 --> 00:02:23.473
This allows us to reuse
the same connection across

43
00:02:23.473 --> 00:02:26.426
multiple invocations of our functions.

44
00:02:26.426 --> 00:02:30.179
And that's just because most functions
depending on where you deploy them,

45
00:02:30.179 --> 00:02:33.800
even though they're stateless,
they all share the same container.

46
00:02:33.800 --> 00:02:37.264
So for instance, AWS,
when they're spinning up your functions,

47
00:02:37.264 --> 00:02:40.350
they will most likely
reuse the same container.

48
00:02:40.350 --> 00:02:43.890
That is, you know the environment of
which your function has been executed on.

49
00:02:43.890 --> 00:02:47.000
And because we're using the same
container, we can store some cash there.

50
00:02:47.000 --> 00:02:48.870
And sometimes those
containers do get recycled.

51
00:02:48.870 --> 00:02:51.680
So eventually you will have to
have a new database connection.

52
00:02:51.680 --> 00:02:54.390
But you won't be penalised
every single request.

53
00:02:54.390 --> 00:02:57.060
So that's what we're gonna do,
we're gonna do that.

54
00:02:57.060 --> 00:02:58.560
And this code is kinda exemplifies that.

55
00:02:58.560 --> 00:03:03.001
So what we're gonna do is we're
going to go to db/connect.

56
00:03:04.671 --> 00:03:05.526
And we're just gonna do that here.

57
00:03:05.526 --> 00:03:08.740
So I put a little note in here to
talk more about what I just said.

58
00:03:08.740 --> 00:03:10.500
But basically here we're using global.

59
00:03:10.500 --> 00:03:14.423
So if you'd haven't heard of global before
a node, that's just like the window and

60
00:03:14.423 --> 00:03:16.920
node, you put something on global,
its global now.

61
00:03:16.920 --> 00:03:18.565
That's literally what it means.

62
00:03:18.565 --> 00:03:20.660
So we're gonna just make
a global.mongo here.

63
00:03:20.660 --> 00:03:25.220
And this is just for us to keep track
on whether we connected already or not.

64
00:03:25.220 --> 00:03:27.990
If this looks hacky, I'm with you.

65
00:03:27.990 --> 00:03:29.890
But this is honestly
the recommended approach.

66
00:03:30.960 --> 00:03:32.744
[LAUGH] I didn't make this up.

67
00:03:32.744 --> 00:03:34.587
This is the recommended approach.

68
00:03:34.587 --> 00:03:37.730
I mean I've literally been
working on servers for years now.

69
00:03:37.730 --> 00:03:41.288
I've even consulted with like the database
experts that at Mongo before,

70
00:03:41.288 --> 00:03:42.538
unrelated to this topic.

71
00:03:42.538 --> 00:03:45.995
And I just happened to ask them,
what do you all recommend?

72
00:03:45.995 --> 00:03:50.713
It was this, so there you go.

73
00:03:50.713 --> 00:03:53.759
I know Atlas does have something
called MongoDB Stitch,

74
00:03:53.759 --> 00:03:56.715
which is their serverless
version of MongoDB.

75
00:03:56.715 --> 00:03:59.477
It's a little more money on top
of what Atlas already costs, so

76
00:03:59.477 --> 00:04:01.622
if you wanna look into that,
that might be good.

77
00:04:01.622 --> 00:04:06.159
But I think that's mostly to be used like
client side, I think you're supposed to

78
00:04:06.159 --> 00:04:10.302
use MongoDB Stitch like actually on
your client in like a React Native app,

79
00:04:10.302 --> 00:04:14.850
iOS app, or Android app, maybe even a
React app on the front end, I don't know.

80
00:04:14.850 --> 00:04:15.910
I think that's what it's meant for.

81
00:04:15.910 --> 00:04:18.670
But you could also use it
on the servers as well.

82
00:04:18.670 --> 00:04:22.238
So you can look into that if you really
want a serverless MongoDB instance, and

83
00:04:22.238 --> 00:04:23.190
you got the cash.

84
00:04:23.190 --> 00:04:25.962
So good luck with that.

85
00:04:25.962 --> 00:04:27.470
What we're gonna do is
we're just gonna do this.

86
00:04:27.470 --> 00:04:35.110
So first thing we're going to do is
we're going to create a connection here.

87
00:04:35.110 --> 00:04:38.350
So I'm using the MongoClient,
we're not using Mongoose here.

88
00:04:39.530 --> 00:04:42.380
I'm actually just been moving away
from Mongoose for a couple of reasons.

89
00:04:42.380 --> 00:04:46.591
But I really moved away from it,
actually this project because

90
00:04:46.591 --> 00:04:51.200
the connection management was a little
difficult to manage as a proxy

91
00:04:51.200 --> 00:04:55.110
through Mongoose versus just
using the raw MongoClient.

92
00:04:55.110 --> 00:04:57.004
It was this a little easier to
mess with the connection lodge.

93
00:04:57.004 --> 00:04:58.931
I could've gotten it to
work with Mongoose, but

94
00:04:58.931 --> 00:05:00.780
I just didn't feel like working with it.

95
00:05:00.780 --> 00:05:03.472
So we're just gonna use the MongoClient,

96
00:05:03.472 --> 00:05:06.629
which is what Mongoose uses underneath,
right?

97
00:05:06.629 --> 00:05:08.140
So pretty to use here.

98
00:05:08.140 --> 00:05:15.040
So what I'm gonna do is I'm gonna say,
if not global.mongo.

99
00:05:15.040 --> 00:05:18.830
So as in, there's no database here,
then we're just gonna connect one.

100
00:05:18.830 --> 00:05:25.190
So we're gonna say const
clients = new MongoDB Or

101
00:05:25.190 --> 00:05:29.886
MongoClient, and we're gonna pass

102
00:05:29.886 --> 00:05:34.584
in process.env.DATABASE_URL,

103
00:05:34.584 --> 00:05:38.390
which is in our ENv like that.

104
00:05:38.390 --> 00:05:39.680
And then we got some options here.

105
00:05:39.680 --> 00:05:44.754
So some of the options are gonna be,

106
00:05:44.754 --> 00:05:49.162
we have useUnifiedTopology.

107
00:05:49.162 --> 00:05:51.342
I don't know, look into it.

108
00:05:51.342 --> 00:05:53.570
[LAUGH] New URL parser.

109
00:05:53.570 --> 00:05:57.845
This does allow us to
use the MongoDB change

110
00:05:57.845 --> 00:06:02.370
the format of their URL,
how they have URLs.

111
00:06:02.370 --> 00:06:04.393
So this assists with that.

112
00:06:04.393 --> 00:06:09.351
We wanna turn off both buffer.

113
00:06:09.351 --> 00:06:11.131
Or what was it?

114
00:06:11.131 --> 00:06:12.570
I thought it was buffer?

115
00:06:13.940 --> 00:06:16.718
Maybe is bufferMaxEntries 0.

116
00:06:16.718 --> 00:06:18.156
Is that what I had here?

117
00:06:18.156 --> 00:06:18.883
Yeah, okay.

118
00:06:18.883 --> 00:06:21.773
Yeah, so I believe what this does is,
yes, I'll set a cap on

119
00:06:21.773 --> 00:06:25.305
how many operations to drive a buffer
up to before giving an error.

120
00:06:25.305 --> 00:06:28.317
So this basically means if you try
to execute some commands on this

121
00:06:28.317 --> 00:06:32.340
MongoDB Client before you connect it to
the database, it'll buffer those commands.

122
00:06:32.340 --> 00:06:35.590
And then when you connect at a replay
them, we're gonna turn that off because

123
00:06:35.590 --> 00:06:38.604
this is a stateless environment,
we don't want any of that nonsense.

124
00:06:38.604 --> 00:06:41.831
We're gonna connect first and
then we're gonna execute our commands and

125
00:06:41.831 --> 00:06:43.515
not the other way around.

126
00:06:43.515 --> 00:06:45.780
Whereas in the server,
you might do the other way around.

127
00:06:45.780 --> 00:06:50.137
You actually might start building models
and making database operations before you

128
00:06:50.137 --> 00:06:53.350
actually connect somewhere
later on your application.

129
00:06:53.350 --> 00:06:55.100
That's not gonna happen here.

130
00:06:55.100 --> 00:06:59.981
So we got that, and then I'm just
gonna put a timeout like longer,

131
00:06:59.981 --> 00:07:03.134
like 10 seconds or something like that.

132
00:07:03.134 --> 00:07:04.910
Okay, so we got our client.

133
00:07:04.910 --> 00:07:05.976
We're pretty good here.

134
00:07:05.976 --> 00:07:11.890
And then the next thing we want to
do is we want to get the database.

135
00:07:11.890 --> 00:07:17.062
So we say const, actually let's
store this in the global, so

136
00:07:17.062 --> 00:07:22.044
we'll say global.mongo.,
what am I calling this here?

137
00:07:25.184 --> 00:07:26.900
Client, there we go.

138
00:07:26.900 --> 00:07:29.004
Client = clients, like that.

139
00:07:29.004 --> 00:07:32.850
And then the next thing
we need is the database.

140
00:07:32.850 --> 00:07:40.091
So if we wanna get the database,
we can say global, this is what I'll do.

141
00:07:41.684 --> 00:07:44.074
Actually I'll get the database down here.

142
00:07:44.074 --> 00:07:50.801
So the database will be equal to
global.mongo.client.db I think,

143
00:07:50.801 --> 00:07:54.905
and you can press
the name of the database,

144
00:07:54.905 --> 00:08:01.984
which I've been telling you all to use
known as the name of your database.

145
00:08:01.984 --> 00:08:05.777
This is where this comes from,
so I can say that.

146
00:08:05.777 --> 00:08:07.624
And that should give us
our database in a sense.

147
00:08:07.624 --> 00:08:10.479
And it was gonna pass
those down like that.

148
00:08:10.479 --> 00:08:13.683
We actually need to
connect to the database

149
00:08:13.683 --> 00:08:16.510
before I was just making a client.

150
00:08:16.510 --> 00:08:19.940
I'm so used to using Mongo where this
doesn't both for you at the same time.

151
00:08:19.940 --> 00:08:21.591
So yeah, we need to actually
connect to the database.

