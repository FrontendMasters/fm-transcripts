WEBVTT

1
00:00:00.530 --> 00:00:05.020
So yeah, now we have the Getting Started
here, which is the folder that we created.

2
00:00:05.020 --> 00:00:09.357
If I click this, you can see that
now we have that second scenario,

3
00:00:09.357 --> 00:00:13.640
now there's a folder ID and a URL,
so we handle that scenario.

4
00:00:13.640 --> 00:00:16.345
And we actually got
the folder that's here.

5
00:00:16.345 --> 00:00:19.784
And then here's the documents that we
created, that one document Start Here,

6
00:00:19.784 --> 00:00:20.670
that's on sign up.

7
00:00:20.670 --> 00:00:28.488
So if I click that Then what happened?

8
00:00:28.488 --> 00:00:29.020
There we go.

9
00:00:29.020 --> 00:00:30.910
So now if I click that I'm here.

10
00:00:30.910 --> 00:00:34.107
And now I'm actually in the editor
where I can write some stuff, right?

11
00:00:34.107 --> 00:00:38.650
So I can do some things here.

12
00:00:38.650 --> 00:00:42.056
And yeah, this is an editor.

13
00:00:42.056 --> 00:00:44.690
It's a blog base editor,
you can do stuff like this.

14
00:00:44.690 --> 00:00:51.654
You hit tab, you can add a code block if
you want to, all different types of stuff.

15
00:00:51.654 --> 00:00:53.255
And then it just auto saves.

16
00:00:53.255 --> 00:01:00.689
So if you're interested in that code,
it's in, where did I write this code?.

17
00:01:00.689 --> 00:01:04.200
This is in components editor.

18
00:01:04.200 --> 00:01:08.606
It's not a lot of code,
it's like 120 lines of code for an editor.

19
00:01:08.606 --> 00:01:10.610
So that's the editor that we get.

20
00:01:10.610 --> 00:01:15.633
And, yeah, sometimes it'll do
this because of hot reloading.

21
00:01:15.633 --> 00:01:18.680
So we handled that,
everything's looking good.

22
00:01:18.680 --> 00:01:23.880
Now we need to actually do the mutations
of making these buttons work here.

23
00:01:23.880 --> 00:01:27.304
So if I want to be able to click
here to create a new document and

24
00:01:27.304 --> 00:01:31.280
click here to create a new folder
I want those to actually work.

25
00:01:31.280 --> 00:01:33.928
Now we can't actually do mutations
on the server side, right?

26
00:01:33.928 --> 00:01:37.787
We can't write code on this.

27
00:01:37.787 --> 00:01:40.809
To query the database, we wrote database
queries on the server side props,

28
00:01:40.809 --> 00:01:42.970
to get information from the database.

29
00:01:42.970 --> 00:01:47.060
But to actually mutate the database, we're
gonna have to do that on the client's

30
00:01:47.060 --> 00:01:50.890
side because it's responding to a click,
it's responding to an event.

31
00:01:50.890 --> 00:01:52.610
So that has to happen
on the client's side.

32
00:01:52.610 --> 00:01:56.272
So, what I was telling you before,
it's not recommended for

33
00:01:56.272 --> 00:01:59.860
you to use your own API
inside your next.js app.

34
00:01:59.860 --> 00:02:02.189
That's mostly for querying data.

35
00:02:02.189 --> 00:02:05.470
For mutating data, you have to.

36
00:02:05.470 --> 00:02:08.886
[LAUGH] yeah, you pretty much have to
use your API, if you want to do that,

37
00:02:08.886 --> 00:02:10.790
if you're responding to events.

38
00:02:10.790 --> 00:02:12.086
So that's what we're going to do.

39
00:02:12.086 --> 00:02:15.730
The next one is client side mutations.

40
00:02:15.730 --> 00:02:17.202
So like I said before,

41
00:02:17.202 --> 00:02:21.700
we talked about using the database
queries in the server side props.

42
00:02:21.700 --> 00:02:23.600
So for mutations,
we need to do them client's side.

43
00:02:23.600 --> 00:02:27.898
So first, we need some API routes to
actually hit, we don't have any API

44
00:02:27.898 --> 00:02:31.860
routes, we actually have to make them so
we can actually use them.

45
00:02:31.860 --> 00:02:33.840
So that's what we're going to do.

46
00:02:33.840 --> 00:02:36.699
And this will be the first
API routes that we've made,

47
00:02:36.699 --> 00:02:40.877
we have that one with the auth, but the
next auth handler just handles it for us.

48
00:02:40.877 --> 00:02:43.437
So we're going to do one here,
or actually a couple here,

49
00:02:43.437 --> 00:02:44.761
that we just make ourselves.

50
00:02:44.761 --> 00:02:49.763
So we need to be able to
handle a put on a editor.

51
00:02:49.763 --> 00:02:52.095
So if you try to go into editor
right now and type things in,

52
00:02:52.095 --> 00:02:55.390
you'll see it'll say auto saving, but
it doesn't actually get saved, right?

53
00:02:55.390 --> 00:02:58.520
Because we haven't hooked it up,
it's not doing anything.

54
00:02:58.520 --> 00:03:03.194
So if I refresh this page,
it's just going to go back to what it was,

55
00:03:03.194 --> 00:03:05.435
cuz there's no mutation here.

56
00:03:05.435 --> 00:03:08.829
So we need to do that.

57
00:03:08.829 --> 00:03:15.830
The other things we need to do is be able
to click here and then make a new folder.

58
00:03:15.830 --> 00:03:20.144
Right now it opens up a modal and
I don't really think it does anything, or

59
00:03:20.144 --> 00:03:22.241
if it does, it definitely breaks.

60
00:03:22.241 --> 00:03:24.990
And then here we need to be able
to create a new document as well.

61
00:03:24.990 --> 00:03:27.257
So we got those three
mutations we need to make.

62
00:03:27.257 --> 00:03:28.313
So that's what we'll do.

63
00:03:28.313 --> 00:03:31.127
In order to do that, we're gonna be
using a library called next-connect.

64
00:03:31.127 --> 00:03:32.726
It's very much like express.

65
00:03:32.726 --> 00:03:35.458
If you've ever heard of express then
you definitely know what connect is.

66
00:03:35.458 --> 00:03:39.258
Express is based off connect, and actually
used to use connect as a dependency and

67
00:03:39.258 --> 00:03:43.310
now it doesn't use connect as a dependency
anymore, but it's still the same API.

68
00:03:43.310 --> 00:03:45.230
So it's pretty much the same thing.

69
00:03:45.230 --> 00:03:49.890
We're going to do that to create our
routes because it actually helps us create

70
00:03:49.890 --> 00:03:51.330
routes a lot simpler.

71
00:03:51.330 --> 00:03:53.073
If we didn't use next connect,

72
00:03:53.073 --> 00:03:56.870
we basically have to create our own
router inside of every function.

73
00:03:56.870 --> 00:04:01.392
We have to look at the request object,
determine if it's a put, post, get or

74
00:04:01.392 --> 00:04:05.304
whatever and route off that and
we gotta do a lot of low level stuff.

75
00:04:05.304 --> 00:04:08.479
Whereas next-connect just gives
us that API that we're used to,

76
00:04:08.479 --> 00:04:10.370
just being able to do this.

77
00:04:10.370 --> 00:04:11.643
So, that's what we're gonna do.

78
00:04:11.643 --> 00:04:15.769
So we're gonna make one for
the document to be able to put a document,

79
00:04:15.769 --> 00:04:17.490
that's gonna be an update.

80
00:04:17.490 --> 00:04:22.120
And then we're gonna do one for
the doc index,

81
00:04:22.120 --> 00:04:28.913
which is basically being able to post,
which is create a document.

82
00:04:28.913 --> 00:04:32.227
So these are two different,
this one requires an ID, right,

83
00:04:32.227 --> 00:04:35.220
cuz we were updating a document so
we need an ID.

84
00:04:35.220 --> 00:04:37.193
This one is saying just
create a new document,

85
00:04:37.193 --> 00:04:38.872
we don't need an ID just make a new one.

86
00:04:38.872 --> 00:04:42.252
And then down here with folders, we're
gonna say we want to be able to post and

87
00:04:42.252 --> 00:04:43.040
create a folder.

88
00:04:44.170 --> 00:04:45.080
So let's do that.

89
00:04:45.080 --> 00:04:53.150
So what we'll do here is
head over to our API.

90
00:04:53.150 --> 00:04:58.225
And then we're gonna make some new folders
here, so I'm gonna say New Folder.

91
00:04:58.225 --> 00:05:02.165
I'm gonna put, what did I call that,
just doc, I guess.

92
00:05:02.165 --> 00:05:03.050
So we'll start with doc.

93
00:05:03.050 --> 00:05:07.760
We'll say doc, and then we're going to do
the one for, let's do the create first.

94
00:05:07.760 --> 00:05:11.020
So index.ts for the create here.

95
00:05:11.020 --> 00:05:14.460
And I'm gonna import NC from next-connect.

96
00:05:15.620 --> 00:05:21.076
I'm gonna import our middleware from,
where's that middleware,

97
00:05:21.076 --> 00:05:26.263
I know it's on here somewhere,
there we go, middleware/all.

98
00:05:26.263 --> 00:05:31.443
So I'll just call that all, or
I'll just call that middleware.

99
00:05:31.443 --> 00:05:33.027
Like that.

100
00:05:33.027 --> 00:05:35.661
And we'll see what else we need.

101
00:05:35.661 --> 00:05:37.731
Wait, I need the database stuff, I think.

102
00:05:37.731 --> 00:05:38.627
Yeah, I need those helpers.

103
00:05:38.627 --> 00:05:46.855
So let's get the helpers
from Where are they at?

104
00:05:46.855 --> 00:05:47.974
I think they're in db.

105
00:05:51.548 --> 00:05:52.875
Where's db?

106
00:05:52.875 --> 00:05:54.539
There's db, okay.

107
00:05:54.539 --> 00:05:57.995
And then we'll get the doc helper, cool.

108
00:05:57.995 --> 00:06:02.524
So then we'll say const_handler.

109
00:06:02.524 --> 00:06:08.635
And that's just gonna be I wanna
say next connect like that.

110
00:06:08.635 --> 00:06:10.830
And then what you can do is you
can pass in some options here.

111
00:06:10.830 --> 00:06:12.892
The one that we want is
gonna be an onError.

112
00:06:12.892 --> 00:06:19.670
So I have a error handler and I want to
say that one's in the middleware as well.

113
00:06:19.670 --> 00:06:24.107
So we'll do this from

114
00:06:24.107 --> 00:06:28.799
middleware/error.

115
00:06:28.799 --> 00:06:32.635
I was gonna call it onError, like that.

116
00:06:32.635 --> 00:06:36.780
So this error handler is just, if we get
a look at it, it's nothing really special.

117
00:06:36.780 --> 00:06:39.819
It basically just logs the error and
sends back a 500.

118
00:06:39.819 --> 00:06:42.992
I mean, this is where you would probably
do your reporting to like Century or

119
00:06:42.992 --> 00:06:45.039
whatever error reporting
system that you have.

120
00:06:45.039 --> 00:06:49.160
You would just put that here instead,
and then you get the actual error.

121
00:06:49.160 --> 00:06:51.900
This is a great way to capture some error.

122
00:06:51.900 --> 00:06:55.469
So basically just wraps your
handler in a try catch and

123
00:06:55.469 --> 00:07:00.400
it passes the error here and then now
you can handle it however you see fit.

124
00:07:01.400 --> 00:07:04.562
What I like to do is I like to create
custom error classes that have their own

125
00:07:04.562 --> 00:07:07.020
status codes on them and
stuff, and their own messages.

126
00:07:07.020 --> 00:07:09.453
And then when you need to throw an error,

127
00:07:09.453 --> 00:07:12.544
you just throw that new
custom class that you made.

128
00:07:12.544 --> 00:07:14.965
And then somewhere like this in function,

129
00:07:14.965 --> 00:07:19.079
you could check to see,
is this an instance of unauthorized error?

130
00:07:19.079 --> 00:07:22.143
Is this an instance of payment late error?

131
00:07:22.143 --> 00:07:25.728
Whatever it is, and you can decide on what
you want to do to figure out what message

132
00:07:25.728 --> 00:07:27.385
you want to show and stuff like that.

133
00:07:27.385 --> 00:07:31.120
So that's just my flow that
I've been doing for a while.

134
00:07:31.120 --> 00:07:34.985
So take it or leave it.

135
00:07:34.985 --> 00:07:37.730
Yeah, so we've got our handler, and
then we want to do is set up some routes.

136
00:07:37.730 --> 00:07:40.162
So I'll say handler dot, what is this?

137
00:07:40.162 --> 00:07:41.810
This is for the index of doc.

138
00:07:41.810 --> 00:07:45.971
So we're going to be posting an index
obviously, .post, like that.

139
00:07:47.070 --> 00:07:49.050
And we're going to get a function.

140
00:07:49.050 --> 00:07:54.477
Okay, so then async, this, we're gonna get
a request, we're gonna get a response.

141
00:07:54.477 --> 00:07:58.717
And then if we're posting something,
actually, I think I have some TypeScript.

142
00:07:58.717 --> 00:08:02.660
I got like a custom
TypeScript thing I have here,

143
00:08:02.660 --> 00:08:06.899
I think it's called request actually,
let me see.

144
00:08:06.899 --> 00:08:08.100
It's that one, there we go.

145
00:08:08.100 --> 00:08:09.490
So we got this request object here.

146
00:08:09.490 --> 00:08:12.050
It's just some custom one that I made,
we're gonna look at it.

147
00:08:12.050 --> 00:08:15.974
It basically just extends
the next API request and

148
00:08:15.974 --> 00:08:19.064
just adds a db client and then the user.

149
00:08:19.064 --> 00:08:21.920
So we get some nice type checking there,
that's all it does.

150
00:08:21.920 --> 00:08:25.243
So what I can do here,
is if I want to create a post,

151
00:08:25.243 --> 00:08:28.190
I could say cool, not a problem.

152
00:08:28.190 --> 00:08:31.310
This middleware already connects to
the database force, so we're good.

153
00:08:31.310 --> 00:08:34.250
If this function is running,
we'll already connect to the database.

154
00:08:34.250 --> 00:08:36.775
And we're already authenticated as well,
so we're good.

155
00:08:36.775 --> 00:08:39.616
That middleware handles all of it,
we can go look at it.

156
00:08:39.616 --> 00:08:43.574
It basically uses the db and
then it uses auth.

157
00:08:43.574 --> 00:08:47.814
If I go look at the db middleware,
it connects to the database and

158
00:08:47.814 --> 00:08:50.495
passes it to the request object, okay?

159
00:08:50.495 --> 00:08:54.527
And then if I go look at auth,
what it does is it uses this jwt package

160
00:08:54.527 --> 00:08:58.271
from next-auth, and
it just gets the token with the secret,

161
00:08:58.271 --> 00:09:02.311
which basically decodes the token,
and I attach it to req.user.

162
00:09:02.311 --> 00:09:04.180
And then I call it next, and that's it.

163
00:09:05.200 --> 00:09:08.579
So, and then I put both of
them together inside of all,

164
00:09:08.579 --> 00:09:11.170
right here, use(db), use(auth).

165
00:09:11.170 --> 00:09:13.270
And that's how I'm able
to get both of them.

166
00:09:13.270 --> 00:09:17.047
So by the time this function runs,
I'm authenticated and the db is connected.

167
00:09:17.047 --> 00:09:21.779
So I should be safe to say,

168
00:09:21.779 --> 00:09:26.519
newDoc = await req.db.

169
00:09:26.519 --> 00:09:29.502
Actually, I don't want to use req.db,

170
00:09:29.502 --> 00:09:34.629
I'm gonna use doc.createDoc, and
then pass in req.db, like that.

171
00:09:34.629 --> 00:09:41.618
And then a new doc that I want to create
is going to be whatever is on the body.

172
00:09:41.618 --> 00:09:49.674
So I'll say the new doc
is gonna be req.body and

173
00:09:49.674 --> 00:09:55.322
then created by req.user.id.

174
00:09:57.298 --> 00:10:01.763
Cool, so now, we got a new doc,
and now we're gonna say, res.send.

175
00:10:01.763 --> 00:10:06.802
I always like to wrap mine in a data
property like that, just to be consistent.

176
00:10:06.802 --> 00:10:07.664
So there we go.

177
00:10:07.664 --> 00:10:08.639
So now, we got that.

178
00:10:08.639 --> 00:10:13.183
Now all I have to do is just
export defaults, not deflate.

179
00:10:13.183 --> 00:10:16.176
[LAUGH] What is that?

180
00:10:16.176 --> 00:10:18.015
Export default handler.

181
00:10:20.945 --> 00:10:24.856
And I guess I need to actually use that
middleware that I was saying that wes

182
00:10:24.856 --> 00:10:28.280
should use, [LAUGH]
handle.use(middleware), there we go.

183
00:10:29.400 --> 00:10:30.368
So what else do we have to do?

184
00:10:30.368 --> 00:10:34.816
So we got, I did the Create,
which was this one, so

185
00:10:34.816 --> 00:10:37.624
I just skipped and did this one.

186
00:10:37.624 --> 00:10:44.575
So let's go back and do this one,
which actually updates one.

187
00:10:44.575 --> 00:10:46.627
So we already have a doc.update here.

188
00:10:46.627 --> 00:10:49.592
And we're just gonna put
on a query string, the ID.

189
00:10:49.592 --> 00:10:56.740
So basically the route for that is gonna
be slash API slash Doc slash the Doc ID.

190
00:10:56.740 --> 00:11:00.450
So I'll say id.ts, like that.

191
00:11:00.450 --> 00:11:01.610
I could copy most of this.

192
00:11:01.610 --> 00:11:03.512
I could put this here.

193
00:11:03.512 --> 00:11:06.618
And instead of post,
this is gonna be a put.

194
00:11:06.618 --> 00:11:12.792
And instead of creating,
we're gonna updateOne.

195
00:11:12.792 --> 00:11:18.910
And the update that we wanna do is
gonna be whatever is on the body.

196
00:11:18.910 --> 00:11:19.730
Is that what it wants?

197
00:11:19.730 --> 00:11:23.060
Let's see, updateOne takes a,
it takes a string, obviously.

198
00:11:23.060 --> 00:11:26.353
So that'll be req.query.id,

199
00:11:26.353 --> 00:11:30.945
cuz that's the name of it right there,
so Id.

200
00:11:30.945 --> 00:11:35.137
I think Tyson is gonna freak out unless I
cast it to string, so I'm gonna do that.

201
00:11:35.137 --> 00:11:37.968
And then any updates,
which will just be req.body.

202
00:11:40.387 --> 00:11:44.352
So we got the new doc, and
this is technically like a updatedDoc.

203
00:11:44.352 --> 00:11:45.392
So I'm gonna do that.

204
00:11:48.411 --> 00:11:49.531
There we go.

205
00:11:49.531 --> 00:11:52.830
So pretty much the same thing,
we're just updating using our helpers.

206
00:11:52.830 --> 00:11:54.270
That's why we made these helpers,

207
00:11:54.270 --> 00:11:57.980
cuz otherwise we'd be doing all that stuff
over and over again, which is gross.

208
00:11:57.980 --> 00:11:59.104
So we're just gonna do that.

209
00:11:59.104 --> 00:12:00.335
Have the req.body.

210
00:12:00.335 --> 00:12:01.791
We're good here.

211
00:12:01.791 --> 00:12:05.821
And then last thing we want to do is
the same thing for a folder, boom.

212
00:12:05.821 --> 00:12:09.757
So we got folder, and then we're gonna,
I think we're creating a folder.

213
00:12:09.757 --> 00:12:11.838
So we're going to say index.

214
00:12:11.838 --> 00:12:14.966
And pretty much the same thing,
I'm going to paste that again.

215
00:12:14.966 --> 00:12:18.549
Except for this case,
we're gonna get folder.

216
00:12:18.549 --> 00:12:24.354
And this is going to be
folder.createFolder, like that.

217
00:12:24.354 --> 00:12:31.219
And createFolder takes in just a db,
the created by, and then a name.

218
00:12:31.219 --> 00:12:37.721
So the name, I'm guessing, is going
to be our req.body.name, like that.

219
00:12:37.721 --> 00:12:40.042
And we'll update this to be newFolder.

220
00:12:40.042 --> 00:12:44.093
Boom, there we go.

221
00:12:44.093 --> 00:12:45.774
So now we're creating a new folder.

222
00:12:45.774 --> 00:12:50.120
So we got our routes,
it's using our little handlers here.

223
00:12:50.120 --> 00:12:54.040
The next thing we gotta do is just hook
this up to the client side to mutate.

224
00:12:54.040 --> 00:12:55.618
Most of the work on
the client is already done,

225
00:12:55.618 --> 00:12:58.050
so it's not too bad and there's
already some examples of how it works.

