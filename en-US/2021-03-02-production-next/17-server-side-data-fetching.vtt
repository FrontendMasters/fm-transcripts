WEBVTT

1
00:00:00.000 --> 00:00:04.081
Doesn't really matter what database you
use, SQL, MySQL, Postgres, whatever,

2
00:00:04.081 --> 00:00:05.734
it's mostly going to be the same.

3
00:00:05.734 --> 00:00:10.679
You just got to look at
the specific example of how to

4
00:00:10.679 --> 00:00:15.403
cache a database connection for
your database.

5
00:00:15.403 --> 00:00:19.740
Some databases do have support like
I know SQL has MySQL Server lists,

6
00:00:19.740 --> 00:00:21.071
and stuff like that.

7
00:00:21.071 --> 00:00:24.308
And I know depending on
where you're deploying,

8
00:00:24.308 --> 00:00:29.172
if you're on AWS they have, I think,
Aurora is like a serverless SQL now.

9
00:00:29.172 --> 00:00:31.702
I know they have SQL services now.

10
00:00:31.702 --> 00:00:36.112
So it really just depends on where you're
deploying is how you're going to get some

11
00:00:36.112 --> 00:00:36.938
of this stuff.

12
00:00:36.938 --> 00:00:42.287
This is how we're gonna do it on verso and
locally, so, all right.

13
00:00:42.287 --> 00:00:45.686
So we're good with the connection here,
pretty simple.

14
00:00:45.686 --> 00:00:49.632
The other thing to take note is that
it's done for you, but if we go look at

15
00:00:49.632 --> 00:00:53.534
the middleware, we can look at some
of the stuff that's already here.

16
00:00:53.534 --> 00:00:57.494
So you can see we have a middleware here
that basically connects to the database

17
00:00:57.494 --> 00:00:59.838
using that connection
function that we made.

18
00:00:59.838 --> 00:01:02.646
And it just attaches the database
of the request object and

19
00:01:02.646 --> 00:01:04.316
the client to the request object.

20
00:01:04.316 --> 00:01:08.111
So that means any functions that we
go create, which we will in a minute,

21
00:01:08.111 --> 00:01:11.164
we can access the database via
request.database if we use

22
00:01:11.164 --> 00:01:13.487
this middleware, which was very helpful.

23
00:01:13.487 --> 00:01:17.631
Because we need the database
to actually do things,

24
00:01:17.631 --> 00:01:20.656
same thing in other places, so yeah.

25
00:01:20.656 --> 00:01:21.918
Pretty cool here.

26
00:01:21.918 --> 00:01:24.929
Now, if we don't have any questions,

27
00:01:24.929 --> 00:01:29.135
we can move on to doing some
server side data fetching.

28
00:01:29.135 --> 00:01:34.420
So so far we've been doing data fetching
server side, but it's been at build time.

29
00:01:34.420 --> 00:01:40.470
So with git static props, not real
data fetching server side at runtime,

30
00:01:40.470 --> 00:01:42.725
but git server side props.

31
00:01:42.725 --> 00:01:46.276
And we're not gonna hit
our API one time to do it.

32
00:01:46.276 --> 00:01:50.383
Yeah, so let's see how that's gonna work.

33
00:01:50.383 --> 00:01:55.483
What we're gonna do is we're going
to first, we need to create some

34
00:01:55.483 --> 00:02:00.942
crud helper methods that basically
abstract the database away from us so

35
00:02:00.942 --> 00:02:05.160
we don't have to use raw
database queries everywhere.

36
00:02:05.160 --> 00:02:08.087
We're gonna just use these
functions that do it for us.

37
00:02:08.087 --> 00:02:12.386
The reason we want to do that is because
we're actually about to use the database

38
00:02:12.386 --> 00:02:16.557
that we just created inside of our server
side props in the pages that we want to

39
00:02:16.557 --> 00:02:17.990
actually query for data.

40
00:02:17.990 --> 00:02:22.018
So for us, we want to query data on this
page because we want to get the folders,

41
00:02:22.018 --> 00:02:23.678
we wanna get some folders here.

42
00:02:23.678 --> 00:02:28.723
So in order to do that,
we need to add the logic to query

43
00:02:28.723 --> 00:02:35.135
the database in the server side
props function of this page, okay?

44
00:02:35.135 --> 00:02:39.102
So that's basically what we need to do.

45
00:02:39.102 --> 00:02:41.777
In order to do that, first, like I said,
we're going to create some distractions

46
00:02:41.777 --> 00:02:43.703
around that,
we're going to create some helper methods.

47
00:02:43.703 --> 00:02:48.555
So what we're going to do is if you go
into the DB folder, you'll see a file for

48
00:02:48.555 --> 00:02:50.661
like folder.ts, and doc.ts.

49
00:02:50.661 --> 00:02:53.018
This is where we're going to
fill these functions out.

50
00:02:53.018 --> 00:02:55.903
And there's a user one too, we're going to
fill them out and have them do something.

51
00:02:55.903 --> 00:02:56.983
So we'll go do that one.

52
00:02:56.983 --> 00:03:01.100
And these aren't that difficult,
they're pretty straightforward.

53
00:03:01.100 --> 00:03:04.870
Even if you don't know Mongo,
it won't be that difficult.

54
00:03:04.870 --> 00:03:09.129
So we'll go to db, and we'll go to,
let's hit the folder one first.

55
00:03:09.129 --> 00:03:13.830
So it looks like we have a createFolder,
and then we have a getFolders.

56
00:03:13.830 --> 00:03:18.156
So if we actually want to
create a folder in Mongo,

57
00:03:18.156 --> 00:03:21.967
the way that works is,
we can say folder, or

58
00:03:21.967 --> 00:03:28.359
newFolder equals then we got the DB here,
and we can say db.collection.

59
00:03:28.359 --> 00:03:31.590
And we're gonna get
the folders collection.

60
00:03:31.590 --> 00:03:34.549
And we're gonna say insert one.

61
00:03:34.549 --> 00:03:37.396
So we're gonna insert one, and
we're gonna give it an ID, and

62
00:03:37.396 --> 00:03:40.800
we're gonna use this thing I have,
we're gonna call it NanoId like that.

63
00:03:42.020 --> 00:03:44.795
And then I'm also gonna say a folder has,
so right now we don't have any schema, so

64
00:03:44.795 --> 00:03:47.190
you might be asking like,
where's he coming up with this stuff?

65
00:03:47.190 --> 00:03:50.615
We don't have any schemas,
we didn't make any.

66
00:03:50.615 --> 00:03:55.818
I usually use Mongoose for schemas, but
MongoDB actually supports schemas now.

67
00:03:55.818 --> 00:03:57.462
I just didn't make any,

68
00:03:57.462 --> 00:04:02.255
because I just wanted to not focus on
how to write schema for a database.

69
00:04:02.255 --> 00:04:04.255
We're just going to focus
on how to do next.js stuff.

70
00:04:04.255 --> 00:04:08.654
But you can do schemas for a database
with MongoDB if you want to, as well.

71
00:04:08.654 --> 00:04:10.435
It's pretty intuitive.

72
00:04:10.435 --> 00:04:13.940
Anyway, we're gonna keep going, so
I'm gonna say a folder has an ID.

73
00:04:13.940 --> 00:04:16.964
If I don't put a ID here,
it's gonna default to an object ID, so

74
00:04:16.964 --> 00:04:17.980
it's totally fine.

75
00:04:17.980 --> 00:04:20.546
I don't like using object
IDs if I don't have to,

76
00:04:20.546 --> 00:04:23.000
converting from an object
to an ID all the time.

77
00:04:23.000 --> 00:04:24.670
It's so annoying all the time.

78
00:04:24.670 --> 00:04:26.070
I don't like doing it.

79
00:04:26.070 --> 00:04:28.310
So if I get the chance to just not do it,
I'm not gonna do it.

80
00:04:28.310 --> 00:04:30.250
So I'm just using this thing
to generate an ID for us.

81
00:04:31.290 --> 00:04:32.440
So we got that.

82
00:04:32.440 --> 00:04:36.240
The next thing I want to do I know folders
have, I basically just wanna pass this in.

83
00:04:36.240 --> 00:04:39.810
So this folder object right here,
pretty much has everything that we need.

84
00:04:39.810 --> 00:04:41.300
So I'm just gonna do that.

85
00:04:43.486 --> 00:04:44.183
Like that.

86
00:04:44.183 --> 00:04:45.280
So now we got a folder.

87
00:04:46.380 --> 00:04:51.010
But I believe, so for one,
we want to weight this, this is async.

88
00:04:51.010 --> 00:04:57.760
I believe the way this works
is there is an operation here.

89
00:04:57.760 --> 00:04:59.860
So it's like an operation.

90
00:04:59.860 --> 00:05:04.953
So when you do an insert with the raw
Mongo SDK instead of returning

91
00:05:04.953 --> 00:05:10.324
you the document that you just inserted,
it will return you an object

92
00:05:10.324 --> 00:05:16.358
about the operation, how successful
it was, how many things got inserted.

93
00:05:16.358 --> 00:05:22.220
And then on there, you'll get access
to the actual, the thing that you want.

94
00:05:22.220 --> 00:05:29.700
So in this case, we got ops, and what I
wanna do is I just wanna return ops(0),

95
00:05:29.700 --> 00:05:34.450
which will be the actual
thing that I inserted.

96
00:05:34.450 --> 00:05:39.590
So then I can just return newFolder,
like that.

97
00:05:39.590 --> 00:05:41.401
So that's creating a new folder.

98
00:05:41.401 --> 00:05:48.119
Getting a new folder, or getting folders,
it's much easier I can just say return

99
00:05:51.170 --> 00:05:53.777
Db.collection folders.

100
00:05:57.017 --> 00:05:57.984
.find.

101
00:05:57.984 --> 00:06:06.120
And I wanna find all the folders who
has a created by of this user ID,

102
00:06:06.120 --> 00:06:11.220
then I'm gonna say toArray, like that.

103
00:06:11.220 --> 00:06:12.340
And that's it.

104
00:06:12.340 --> 00:06:15.260
That's how you get folders, very simple.

105
00:06:15.260 --> 00:06:17.130
It won't hurt to add it I guess.

106
00:06:17.130 --> 00:06:20.070
It's nice to have a t create it that
field, I guess, I'm not actually using it.

107
00:06:20.070 --> 00:06:25.616
I don't think I'm actually using to
create it at anywhere in the app,

108
00:06:25.616 --> 00:06:27.689
but I'll be consistent.

109
00:06:27.689 --> 00:06:32.648
If you do add it though, one problem that
I ran into with next.js in server side

110
00:06:32.648 --> 00:06:37.607
props and static props, is that if you
try to return a prop, that object inside

111
00:06:37.607 --> 00:06:41.840
of a prop, and one of those fields
is a date object, it'll break.

112
00:06:41.840 --> 00:06:42.733
It won't let you do it.

113
00:06:42.733 --> 00:06:44.450
It will say it couldn't serialize it.

114
00:06:44.450 --> 00:06:45.410
And there's a good reason why.

115
00:06:46.410 --> 00:06:50.195
So that's why you see me adding a date,
I'm converting it to a string because if

116
00:06:50.195 --> 00:06:54.167
it's a real date object, when it gets to
next.js it will break on the server side.

117
00:06:54.167 --> 00:06:58.909
So remember, if you have date objects that
you're trying to pass to next.js as props,

118
00:06:58.909 --> 00:06:59.948
it won't have it.

119
00:06:59.948 --> 00:07:03.200
You need to serialize them first,
change them first.

120
00:07:03.200 --> 00:07:04.020
So that's what I'm doing here.

121
00:07:05.830 --> 00:07:07.929
All right, the next thing we
want to do is for the docs,

122
00:07:07.929 --> 00:07:09.560
this one is a little more involved.

123
00:07:09.560 --> 00:07:14.495
So if we want to get one doc, we can say

124
00:07:14.495 --> 00:07:19.599
return db.collection for our docs.

125
00:07:19.599 --> 00:07:24.360
And I want to find just one by an ID of

126
00:07:24.360 --> 00:07:28.974
whatever that ID is, like that.

127
00:07:28.974 --> 00:07:32.182
That's it, super simple.

128
00:07:32.182 --> 00:07:35.730
I get doc's by folder,
very similar to that one.

129
00:07:35.730 --> 00:07:42.540
So db.collection.docs.find.

130
00:07:42.540 --> 00:07:46.090
I'm sorry, this should be find one,
there we go.

131
00:07:46.090 --> 00:07:52.230
This one would also be find one and this
will be for, this is find me, I'm sorry.

132
00:07:52.230 --> 00:07:57.550
So we will find here and
then we'll say folder,

133
00:07:57.550 --> 00:08:03.273
and it'll be folder Id,
like that, and then two.

134
00:08:03.273 --> 00:08:05.774
All right, and
I think I got a typo somewhere.

135
00:08:05.774 --> 00:08:07.641
Yeah, right there.

136
00:08:07.641 --> 00:08:09.743
There we go.

137
00:08:09.743 --> 00:08:13.048
So we're gonna get the docs
by the folderId toArray,

138
00:08:13.048 --> 00:08:15.257
this is gonna give us a list of them.

139
00:08:15.257 --> 00:08:21.287
And the createDoc is
very similar to what we

140
00:08:21.287 --> 00:08:26.311
do before, so this will be New doc,

141
00:08:26.311 --> 00:08:30.666
this will just be, wait,

142
00:08:30.666 --> 00:08:38.056
db.collection folders.insertOne,
like that.

143
00:08:38.056 --> 00:08:42.155
There we get ID of a nano
ID here that I have.

144
00:08:42.155 --> 00:08:47.450
And then I want to just pass in the doc,
that's passed in like that.

145
00:08:47.450 --> 00:08:51.400
So it's got a created by, it's got
a folder, a name, and an optional content.

146
00:08:52.870 --> 00:08:57.601
And then the last thing I want to
do is I'll do the same thing I had

147
00:08:57.601 --> 00:09:00.744
before with the creator app, like that.

148
00:09:00.744 --> 00:09:01.908
We should be good.

149
00:09:01.908 --> 00:09:08.393
And then I'll get the operation ops.

150
00:09:13.602 --> 00:09:14.911
And then obviously return it.

151
00:09:18.636 --> 00:09:19.473
Like that.

152
00:09:19.473 --> 00:09:20.440
So now we got a new doc.

153
00:09:22.580 --> 00:09:26.270
And then the last one is gonna
be to update one document.

154
00:09:26.270 --> 00:09:29.314
So this is a little more involved,
cuz we have to update it and

155
00:09:29.314 --> 00:09:30.819
then we gotta query it again.

156
00:09:30.819 --> 00:09:33.688
Because the update doesn't actually
return the updated document,

157
00:09:33.688 --> 00:09:34.782
we have to query it again.

158
00:09:34.782 --> 00:09:40.302
So, we'll say awaits

159
00:09:42.619 --> 00:09:50.973
db.collection docs.updateOne

160
00:09:50.973 --> 00:09:54.719
by the id of id.

161
00:09:54.719 --> 00:10:02.275
And we want to dollar set,
this is how you update in Mongo.

162
00:10:02.275 --> 00:10:05.389
By doing set, you're saying,
I only want to update these fields,

163
00:10:05.389 --> 00:10:07.148
don't replace all the other fields.

164
00:10:07.148 --> 00:10:09.406
This is just update the fields
that I'm giving you.

165
00:10:09.406 --> 00:10:12.133
And I just wanna set whatever
updates were passed in.

166
00:10:12.133 --> 00:10:14.149
That's gonna be an object.

167
00:10:14.149 --> 00:10:18.760
And I can await that.

168
00:10:18.760 --> 00:10:20.024
So that's good.

169
00:10:20.024 --> 00:10:24.929
And then what I'll do is,
I'll go ahead and

170
00:10:24.929 --> 00:10:31.702
get the doc by saying await
db.collection docs .findOne.

171
00:10:34.257 --> 00:10:37.631
And you get an id here of id.

172
00:10:40.697 --> 00:10:42.010
And return to doc.

173
00:10:42.010 --> 00:10:43.410
There we go.

174
00:10:45.420 --> 00:10:49.550
So those are basically just our CRUD
helper functions that we're gonna use.

175
00:10:50.790 --> 00:10:54.217
Pretty much all of these,
we're going to use these and

176
00:10:54.217 --> 00:10:57.359
most of them inside of
the app service side props.

177
00:10:57.359 --> 00:11:00.420
That's going to be a big function,
it's gonna do a lot, intentionally.

178
00:11:00.420 --> 00:11:01.960
So it's gonna do a lot of stuff there.

179
00:11:01.960 --> 00:11:04.765
The last one that we're not
actually using but I can go over,

180
00:11:04.765 --> 00:11:06.350
is just a get user by ID.

181
00:11:06.350 --> 00:11:09.280
But I think you might
get it at this point.

182
00:11:09.280 --> 00:11:15.021
We're just going to return
db.collection users .findOne,

183
00:11:17.015 --> 00:11:20.763
id and then id, that's it.

184
00:11:20.763 --> 00:11:22.077
That's how you get the user by ID.

