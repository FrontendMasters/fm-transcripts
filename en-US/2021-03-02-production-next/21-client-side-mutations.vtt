WEBVTT

1
00:00:00.310 --> 00:00:03.742
So what we wanna do now is if
we head back into our app,

2
00:00:03.742 --> 00:00:07.450
we need to add a handler for
handling the new folder.

3
00:00:07.450 --> 00:00:12.766
So we need to be able to handle that and
then we need to add it to a.

4
00:00:12.766 --> 00:00:17.352
We basically have to do this thing where,
because if we go back to our app, right,

5
00:00:17.352 --> 00:00:20.476
this folder, this list of folders,
right on the left,

6
00:00:20.476 --> 00:00:23.630
this gets populated at server time, okay?

7
00:00:23.630 --> 00:00:25.800
But now we're about to
start creating folders.

8
00:00:25.800 --> 00:00:27.910
So now we got two
different places of state.

9
00:00:27.910 --> 00:00:31.104
This state came in from the prompts from
the server but now we're on the front end

10
00:00:31.104 --> 00:00:33.545
and we're like creating folders and
I wanted to pop up here.

11
00:00:33.545 --> 00:00:36.180
I don't wanna do a whole page
refresh just to see that folders.

12
00:00:36.180 --> 00:00:38.800
So we have to merge those states.

13
00:00:38.800 --> 00:00:43.721
We're gonna do it manually but just let
you know there are libraries that handle

14
00:00:43.721 --> 00:00:47.120
this for you, like I'm pretty sure SWR.

15
00:00:47.120 --> 00:00:51.316
What they'll do is they'll
take the cash that you got,

16
00:00:51.316 --> 00:00:56.407
they'll take the data that you got
server side and prepopulate your

17
00:00:56.407 --> 00:01:02.080
SWR cache client side with that data and
then you read from that cache.

18
00:01:02.080 --> 00:01:03.530
So I'm pretty sure they do that.

19
00:01:03.530 --> 00:01:04.900
We're basically doing that ourselves.

20
00:01:04.900 --> 00:01:06.491
We're just gonna merge them together and

21
00:01:06.491 --> 00:01:08.360
that's always gonna give
you up to today state.

22
00:01:08.360 --> 00:01:11.708
So when you click create new folder,
you'll actually see it pop up here and

23
00:01:11.708 --> 00:01:12.700
then you refresh.

24
00:01:12.700 --> 00:01:15.380
That's going to do a query to get all
of them and then it'll still be there.

25
00:01:15.380 --> 00:01:18.545
So we'll still be good to go, so this is
technically like a hybrid app, right?

26
00:01:18.545 --> 00:01:23.095
So we're pre populating this stuff on
the server, but then we still have that

27
00:01:23.095 --> 00:01:27.160
ability to do things on the client so
that's what we're going to do.

28
00:01:27.160 --> 00:01:31.512
So let's head over to,
let's head over to our app and

29
00:01:31.512 --> 00:01:35.540
this is where we're going
to add the handler.

30
00:01:35.540 --> 00:01:38.710
As an example, just to give you an idea
of what this is gonna look like.

31
00:01:38.710 --> 00:01:43.270
You can go over to components and
I wanna say folder pane.

32
00:01:43.270 --> 00:01:45.110
There's already a handler
here to handle the new doc.

33
00:01:45.110 --> 00:01:47.510
So you can see this one's already ready.

34
00:01:47.510 --> 00:01:52.280
It's already got the URL hooked up and
everything is ready to go.

35
00:01:52.280 --> 00:01:57.195
So we can pretty much see what's happening
here to get an idea of what's going on,

36
00:01:57.195 --> 00:02:01.184
but it's really just doing a fetch
call and then it's like I said,

37
00:02:01.184 --> 00:02:03.740
it's merging that state.

38
00:02:03.740 --> 00:02:07.989
It's, it's basically created a new local
state that is initialized with a state

39
00:02:07.989 --> 00:02:11.560
from the server and then we merge it
with the state that we got back from

40
00:02:11.560 --> 00:02:15.521
the API call and that's how we keep
track of that state, it's very simple.

41
00:02:15.521 --> 00:02:20.641
So we're just gonna do the same
thing inside of our app, so

42
00:02:20.641 --> 00:02:26.510
we go here and I wanna say it's
gonna be called, what did I call it?

43
00:02:28.880 --> 00:02:32.100
Make sure I get this right,
handle new folder.

44
00:02:32.100 --> 00:02:35.310
So we'll have handle new folder with
like some new state so let's do that.

45
00:02:35.310 --> 00:02:39.486
So the first thing is let's
create our new state,

46
00:02:39.486 --> 00:02:43.470
we'll say costs and
I'll call it all folders.

47
00:02:43.470 --> 00:02:44.794
I think that's what I've been calling it.

48
00:02:47.351 --> 00:02:52.638
And then set all folders, and
that's gonna equal use state and

49
00:02:52.638 --> 00:02:57.550
it's gonna default to the folders
we get from the server.

50
00:02:57.550 --> 00:03:00.488
That's what we wanna initialize it with.

51
00:03:00.488 --> 00:03:03.790
We wanna start this, on the client
side we wanna start this app or

52
00:03:03.790 --> 00:03:08.135
whatever folders we already got back from
the server cuz we're gonna be reading from

53
00:03:08.135 --> 00:03:09.190
all folders now.

54
00:03:09.190 --> 00:03:12.018
Right now we're reading from folders,
we gonna look at folders,

55
00:03:12.018 --> 00:03:14.450
we're passing it in,
we're not gonna do that anymore.

56
00:03:14.450 --> 00:03:17.820
We're actually gonna pass
in all folders now, okay?

57
00:03:17.820 --> 00:03:21.259
And all folders starts off with
whatever was from the server or

58
00:03:21.259 --> 00:03:23.984
there was nothing from
the server with the same.

59
00:03:23.984 --> 00:03:27.339
And the reason we're doing that
is because now when we update,

60
00:03:27.339 --> 00:03:31.706
when we create a new folder on the client
side, we're gonna set all folders to have

61
00:03:31.706 --> 00:03:36.171
this new folder too and that way it shows
up immediately without a refresh, right?

62
00:03:36.171 --> 00:03:40.013
And then if you do refresh it,
it'll just get all folders down here and

63
00:03:40.013 --> 00:03:44.640
your new one will be in there too,
so that's why we're doing that.

64
00:03:44.640 --> 00:03:47.269
The next thing we wanna do
is create that handler and

65
00:03:47.269 --> 00:03:49.050
I call it again handle the folder.

66
00:03:49.050 --> 00:03:55.180
So const handle few folder like that.

67
00:03:55.180 --> 00:03:59.406
It's probably gonna take a name,
because that's really all we need here and

68
00:03:59.406 --> 00:04:04.661
then I'm just going to say Results equals

69
00:04:04.661 --> 00:04:10.071
awaits fetch and then we can do process.,

70
00:04:14.908 --> 00:04:20.270
ENV., what did I call it?

71
00:04:20.270 --> 00:04:21.907
Let's go look at our ENVs right quick.

72
00:04:21.907 --> 00:04:22.920
I almost clicked on it.

73
00:04:22.920 --> 00:04:23.650
It almost got me.

74
00:04:25.610 --> 00:04:27.870
There we go, next public host.

75
00:04:27.870 --> 00:04:33.285
Quick tip, if you want to be able to
access ENVs from your ENV file inside

76
00:04:33.285 --> 00:04:39.840
your front end on next.js, you have
to prefix the ENVs with next public.

77
00:04:39.840 --> 00:04:43.598
Underscore if you don't prefix it with
that it would only be available on

78
00:04:43.598 --> 00:04:47.620
server-side functions and APIs if you
want it to be available in the client.

79
00:04:47.620 --> 00:04:48.890
You have the prefix it with this.

80
00:04:52.110 --> 00:05:00.017
Okay, so
we're gonna fetch that /API/ Folder.

81
00:05:02.119 --> 00:05:03.590
Yep, that's the route that we just made,
right?

82
00:05:03.590 --> 00:05:07.940
So, API/folder index, so,
yep, that's the route.

83
00:05:07.940 --> 00:05:13.770
Then we're gonna say method is
gonna be a POST, method was a POST.

84
00:05:13.770 --> 00:05:19.728
Body is gonna be a JSON.stringify,
the body was just a name here and I'm

85
00:05:19.728 --> 00:05:26.090
just gonna add some headers just in case
because I know fetch is kind of crazy.

86
00:05:26.090 --> 00:05:28.620
So I'm just gonna say give
me that content type.

87
00:05:28.620 --> 00:05:35.390
Set that content type to application,
okay json.

88
00:05:37.490 --> 00:05:42.021
Okay, so we're gonna do that we're
gonna wait we'll make this async so

89
00:05:42.021 --> 00:05:44.340
it doesn't trip out on us like that.

90
00:05:44.340 --> 00:05:49.430
What does that line right there,
am I the only one seeing that line?

91
00:05:49.430 --> 00:05:51.454
That's crazy, okay.

92
00:05:51.454 --> 00:05:56.931
All right, okay,
that was tricky, all right,

93
00:05:56.931 --> 00:06:02.232
so we got that,
what is this talking about.

94
00:06:02.232 --> 00:06:07.246
It's basically saying, hey,
if you're not using anything inside

95
00:06:07.246 --> 00:06:12.600
of your react component you just
put this outside of your component.

96
00:06:12.600 --> 00:06:16.781
Yeah, but I'm actually about to use it so

97
00:06:16.781 --> 00:06:22.403
we can now get the data which
will be await rest.jason.

98
00:06:22.403 --> 00:06:27.396
So we get back the data was actually a
data prop because I always send back data

99
00:06:27.396 --> 00:06:29.200
from our servers, right?

100
00:06:29.200 --> 00:06:31.880
That's what we just made if we go look
at this, always send it back as data.

101
00:06:33.000 --> 00:06:37.660
So, it's gonna be data here and
then now we update the all folder set.

102
00:06:37.660 --> 00:06:42.692
So, I can say set all folders and this
is where you might just say, all right,

103
00:06:42.692 --> 00:06:48.210
I'm gonna set it to a new array, whatever
all folders was, and then the new folder.

104
00:06:48.210 --> 00:06:51.906
But a good tip is if you're
gonna be setting a state,

105
00:06:51.906 --> 00:06:57.873
that's dependent on the previous state,
you should put a function here instead and

106
00:06:57.873 --> 00:07:01.250
get a state that way react
cues it up correctly.

107
00:07:02.290 --> 00:07:03.194
In its rendering cycle,

108
00:07:03.194 --> 00:07:05.906
the wait to make sure you have the correct
state because if something else is

109
00:07:05.906 --> 00:07:09.590
setting that statewide or calling that
you're gonna have the wrong state.

110
00:07:09.590 --> 00:07:12.756
So by doing this, you're queuing up
the state to make sure that this is

111
00:07:12.756 --> 00:07:14.690
the current state that you want.

112
00:07:14.690 --> 00:07:16.472
So this is the current list of folders.

113
00:07:16.472 --> 00:07:20.750
So I'm gonna do that then I
can return a new one here,

114
00:07:20.750 --> 00:07:27.380
which is basically just a spread of the
state, plus this new one that I just made.

115
00:07:28.890 --> 00:07:33.792
So we got that handled a folder
now we can take this down here and

116
00:07:33.792 --> 00:07:37.210
somewhere down here, we should.

117
00:07:37.210 --> 00:07:39.300
There we go on new folder,

118
00:07:39.300 --> 00:07:44.370
we can just pass that here
handle the folder like that.

119
00:07:44.370 --> 00:07:49.376
All right,
let's see if we didn't break anything, so

120
00:07:49.376 --> 00:07:54.823
now if I try to create a folder,
I can give it a folder, work.

121
00:07:54.823 --> 00:08:01.140
Things, hit create, boom.

122
00:08:01.140 --> 00:08:07.179
Now they got work things
right now if I create a doc,

123
00:08:07.179 --> 00:08:12.670
I can say trip ideas,
I got trip ideas, okay?

124
00:08:12.670 --> 00:08:15.009
And then now we should get some
auto saving on the editor.

125
00:08:15.009 --> 00:08:22.016
So if I go here and I wanna say,
change this to change this,

126
00:08:22.016 --> 00:08:31.860
with the auto save I hit Refresh It's
good to go so we're all good here, okay?

127
00:08:31.860 --> 00:08:33.788
Any questions on that?

128
00:08:33.788 --> 00:08:39.707
&gt;&gt; You are making REST API's and
you make that comment that diversity

129
00:08:39.707 --> 00:08:44.991
guys say that they do not recommend
to make an API requests so

130
00:08:44.991 --> 00:08:50.640
on get side server side props
from your own props, right.

131
00:08:50.640 --> 00:08:58.135
But if I am, I like to hang out with
the cool kids making graph QL API's.

132
00:08:58.135 --> 00:09:04.067
[LAUGH] How do I work that out
because I will end up getting my

133
00:09:04.067 --> 00:09:11.373
resolver code in pulling that in my
get server side props, and how do.

134
00:09:11.373 --> 00:09:16.609
I initialise there is a way
that I initialise my cache

135
00:09:16.609 --> 00:09:25.340
data from using that get props from server
side to initialize my Apollo clients.

136
00:09:25.340 --> 00:09:29.270
Pretty seems like it's complex to do.

137
00:09:29.270 --> 00:09:32.517
&gt;&gt; Yeah, so the question was if
I'm using something like graph QL,

138
00:09:32.517 --> 00:09:34.160
I'll get server side props.

139
00:09:34.160 --> 00:09:37.814
It seems like I have to take all
my resolver code and throw it and

140
00:09:37.814 --> 00:09:41.000
get server side props and
then how do I go about.

141
00:09:41.000 --> 00:09:45.700
Managing that initial cache for
Apollo once it's client side so

142
00:09:45.700 --> 00:09:51.094
the first thing is, I think the way I
would do it with graph QL and get server

143
00:09:51.094 --> 00:09:56.427
side props is and at least the pattern
that I see a lot of people do is that.

144
00:09:56.427 --> 00:10:01.181
They'll one they'll make a route
kind of like we did right, so

145
00:10:01.181 --> 00:10:04.780
we made a route,
we have our API routes, okay?

146
00:10:04.780 --> 00:10:08.608
What they'll do is it'll take this logic,
or at least this logic right here,

147
00:10:08.608 --> 00:10:12.842
this logic that's completely independent
from anything that's request related and

148
00:10:12.842 --> 00:10:14.240
it just does database work.

149
00:10:14.240 --> 00:10:18.949
And it'll expose that inside of this file
too, that's like a different function that

150
00:10:18.949 --> 00:10:22.320
you can import and
then I'll import that into their handler.

151
00:10:22.320 --> 00:10:25.448
So as far as Graph QL goes,
I know that Graph QL,

152
00:10:25.448 --> 00:10:28.268
if you're using just like the Apollo's,

153
00:10:28.268 --> 00:10:33.200
like high level express Graph QL,
you might to have this flexibility.

154
00:10:33.200 --> 00:10:38.603
But if you just use just the Graph QL
library, you can pass it a raw query,

155
00:10:38.603 --> 00:10:44.195
a set of resolvers, some initial state and
it'll execute it right there.

156
00:10:44.195 --> 00:10:46.880
So you basically,
if you would just wrap that and

157
00:10:46.880 --> 00:10:50.892
pass that to your handlers as an export,
I think that's a way around it.

158
00:10:50.892 --> 00:10:54.317
And I'm pretty sure last time I used
Apollo, they, I think they let you,

159
00:10:54.317 --> 00:10:56.460
they let you like get into that.

160
00:10:56.460 --> 00:11:00.726
So you might even be able to get
into that, that raw graph QL,

161
00:11:00.726 --> 00:11:02.156
js live and do that.

162
00:11:02.156 --> 00:11:05.155
But yeah, I don't think you need to bring
in all your resolvers like that I just

163
00:11:05.155 --> 00:11:06.250
think you need to.

164
00:11:06.250 --> 00:11:08.020
It's more about like, how do you get off?

165
00:11:08.020 --> 00:11:11.590
How do you get away from
the dependency of like express?

166
00:11:11.590 --> 00:11:15.981
How do you remove that dependency,
but at the same time,

167
00:11:15.981 --> 00:11:19.549
note that Inside of our
Git server side props,

168
00:11:19.549 --> 00:11:24.660
I mean, this context object has
a request and response here.

169
00:11:24.660 --> 00:11:31.397
So, right, but obviously your graph QL
request wouldn't be on a query string.

170
00:11:31.397 --> 00:11:35.501
So now that's gonna help you but
you do have access to the request and

171
00:11:35.501 --> 00:11:36.510
response here.

172
00:11:36.510 --> 00:11:41.441
So there's nothing stopping you from
[LAUGH] initializing Apollo in here.

173
00:11:41.441 --> 00:11:43.797
You could tell it to do
that if you wanted to and

174
00:11:43.797 --> 00:11:47.149
I wouldn't be surprised if
that's the recommended approach.

175
00:11:47.149 --> 00:11:49.316
So you could totally do that but yeah,

176
00:11:49.316 --> 00:11:52.838
I think you just need to not use
anything that relies on HTTP for

177
00:11:52.838 --> 00:11:56.730
graph QL when using get server side props,
so whatever that means.

178
00:11:56.730 --> 00:12:01.395
Do that whatever your framework as
far as initializing the cache, again,

179
00:12:01.395 --> 00:12:06.430
you could try to do this yourself
manually, but I don't recommend it.

180
00:12:06.430 --> 00:12:11.419
Because it basically requires you
to like write to the file system,

181
00:12:11.419 --> 00:12:14.630
like initialize, it is too much work.

182
00:12:14.630 --> 00:12:17.763
I would imagine Apollo,
if they haven't solved this already,

183
00:12:17.763 --> 00:12:20.490
I would imagine they're about to solve it.

184
00:12:20.490 --> 00:12:22.326
Because that just seems,

185
00:12:22.326 --> 00:12:27.260
cuz I know they had that with
regular server side react already.

186
00:12:27.260 --> 00:12:29.280
So adding it for
next just seems like a no-brainer.

187
00:12:29.280 --> 00:12:33.726
I haven't used Apollo in a while, which is
why I can't give you a de facto answer,

188
00:12:33.726 --> 00:12:37.170
but I'm pretty sure that's
something that they would have.

189
00:12:37.170 --> 00:12:38.950
I don't know why they
would have that right now.

190
00:12:40.660 --> 00:12:43.078
We can in fact look it up,
we can just look it up right now.

191
00:12:43.078 --> 00:12:49.330
Apollo, next is SSR.

192
00:12:49.330 --> 00:12:52.768
Let's see, there we go, so
they have a guide here,

193
00:12:52.768 --> 00:12:55.830
configure it with next.js
if I look up cache.

194
00:12:55.830 --> 00:12:59.402
So they have a in memory cache here.

195
00:12:59.402 --> 00:13:01.598
Installs the Apollo Client
on next page context or

196
00:13:01.598 --> 00:13:05.270
useful if you want to use Apollo client
inside get static props, get static paths.

197
00:13:06.600 --> 00:13:10.978
Yeah, I would imagine because
they're doing that right there

198
00:13:10.978 --> 00:13:14.376
that they're probably
gonna allow you to do it.

199
00:13:14.376 --> 00:13:18.005
They wouldn't care about you sharing
the context of a provider on the client

200
00:13:18.005 --> 00:13:20.782
side and server side if it wasn't
going to be used to cash so

201
00:13:20.782 --> 00:13:23.410
I would imagine that is
probably taken care of for you.

