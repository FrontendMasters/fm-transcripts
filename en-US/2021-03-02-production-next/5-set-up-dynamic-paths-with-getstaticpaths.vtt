WEBVTT

1
00:00:00.220 --> 00:00:03.433
Okay, now we're gonna pretty much do
the same thing for the dynamic page,

2
00:00:03.433 --> 00:00:04.760
which is the slug.

3
00:00:04.760 --> 00:00:09.062
This one's gonna be a little different,
because if you have a dynamic page,

4
00:00:09.062 --> 00:00:12.250
and actually is you have to
define a get static path.

5
00:00:12.250 --> 00:00:17.044
So let's do that first, so we're going

6
00:00:17.044 --> 00:00:21.991
to say export function get static paths.

7
00:00:21.991 --> 00:00:24.567
And the reason you have to
have the get static paths is,

8
00:00:24.567 --> 00:00:28.207
because if next is trying to generate
this page, and it has a parameter in it,

9
00:00:28.207 --> 00:00:30.060
how does it know what page to generate?

10
00:00:31.110 --> 00:00:34.190
You have to give it the path so it knows
what page to generate ahead of time.

11
00:00:34.190 --> 00:00:38.060
Otherwise, it wouldn't know,
that's because reasons static numbers and

12
00:00:38.060 --> 00:00:41.155
started as a server interface,
we would have a static class,

13
00:00:41.155 --> 00:00:43.377
because the parameters come in at runtime.

14
00:00:43.377 --> 00:00:46.627
And we have access to them inside
the server side props, but

15
00:00:46.627 --> 00:00:50.390
because this is a static build,
we have to do that bill time.

16
00:00:50.390 --> 00:00:53.325
So that means we have to
go fetch whatever the,

17
00:00:53.325 --> 00:00:57.560
whatever data is gonna generate
these pathological fetch it.

18
00:00:57.560 --> 00:01:02.029
Now we'll get it, with some, and
that's partially true, because I'm

19
00:01:02.029 --> 00:01:06.660
gonna show you a performance benefit,
where we don't have to get all of it.

20
00:01:06.660 --> 00:01:11.200
But if whatever you want to generate
has to be returned here, basically.

21
00:01:11.200 --> 00:01:15.426
So let's do that, so
what we're gonna do is very similar,

22
00:01:15.426 --> 00:01:19.750
to what we did in the last one,
so we're going to import the.

23
00:01:21.130 --> 00:01:26.668
File system from fs and
import path from path.

24
00:01:29.233 --> 00:01:33.290
I don't know why I can't really type that
good right now, okay, so we've got that.

25
00:01:33.290 --> 00:01:35.420
And then we're gonna go down here.

26
00:01:36.530 --> 00:01:40.051
And we just wanna get all the names,
or technically the slugs,

27
00:01:40.051 --> 00:01:45.160
because that's what's gonna be here,
the slugs represented in this file name.

28
00:01:45.160 --> 00:01:49.998
Are associated with the slugs and
the front matter here, so

29
00:01:49.998 --> 00:01:52.720
that's really all we wanna get.

30
00:01:52.720 --> 00:01:56.050
We just wanna return these slugs,
we wanna return an array of these.

31
00:01:56.050 --> 00:01:59.414
This is gonna tell next.js, these are the
files we wanna generate right now, and

32
00:01:59.414 --> 00:02:01.190
we're only gonna do the file system ones.

33
00:02:01.190 --> 00:02:05.440
We're not gonna do, the blog post ones,
I'm sorry, the CMS ones.

34
00:02:05.440 --> 00:02:06.250
But don't worry,

35
00:02:06.250 --> 00:02:09.400
those are still gonna be available to
be used with a special feature next.

36
00:02:09.400 --> 00:02:11.300
Yes, so let's just do the file system one.

37
00:02:11.300 --> 00:02:14.789
So what we'll do is look at that
post path, just like we did before,

38
00:02:14.789 --> 00:02:18.470
in fact part is going to copy it,
because it's so much faster.

39
00:02:18.470 --> 00:02:22.373
So we'll do that, got our post paths here,

40
00:02:22.373 --> 00:02:29.350
we're gonna pretty much do the exact
same thing, that we did before, right?

41
00:02:29.350 --> 00:02:34.220
So we're just gonna get the,
like the slugs basically,

42
00:02:34.220 --> 00:02:38.784
so we'll say file names,
dot map, get the name, and

43
00:02:38.784 --> 00:02:43.060
we'll get the file, or
let's get the full path.

44
00:02:44.160 --> 00:02:48.400
Already have a look at the file,

45
00:02:48.400 --> 00:02:53.903
which is basically Fs dot read file sync.

46
00:02:53.903 --> 00:02:58.767
And that's gonna be on the file path,

47
00:02:58.767 --> 00:03:05.390
which is path dot join the post path,
and the name.

48
00:03:05.390 --> 00:03:10.319
And then, what I wanna do, is spell
that right first, and then, yeah, so

49
00:03:10.319 --> 00:03:12.848
I was gonna pass in the file path here.

50
00:03:12.848 --> 00:03:15.440
And then UTF-8 for the encoding.

51
00:03:18.500 --> 00:03:19.062
Like that,

52
00:03:19.062 --> 00:03:23.630
so we'll get those, and then just like,
we did before we're gonna import matter.

53
00:03:23.630 --> 00:03:29.290
So let's copy from appears so
much easier, get that matter like that.

54
00:03:30.700 --> 00:03:35.551
Paste that cool, so we got matter and
then, what we're gonna do is go

55
00:03:35.551 --> 00:03:40.330
down to slugs, and we're gonna
do the same that we did before.

56
00:03:40.330 --> 00:03:46.200
So data = matter,
pass in the file, return data.

57
00:03:46.200 --> 00:03:48.452
So now, we got the slugs here,
the format for

58
00:03:48.452 --> 00:03:51.550
returning the paths is pretty
much an object that says paths.

59
00:03:52.850 --> 00:03:55.686
And then we have the slugs here, so
we're gonna map over these slugs.

60
00:03:55.686 --> 00:04:01.749
And if for each slug, what we're gonna
do is we're gonna return an object,

61
00:04:01.749 --> 00:04:05.020
that has a property on it called params.

62
00:04:05.020 --> 00:04:08.535
Because that's what next JS wants
us to do, and then for the params,

63
00:04:08.535 --> 00:04:11.580
this is where we actually use
whatever is inside of our URL.

64
00:04:11.580 --> 00:04:16.076
So in this case, just a slug,
so slug like that, and

65
00:04:16.076 --> 00:04:20.740
then what we wanna do is we
wanna get this right here.

66
00:04:20.740 --> 00:04:27.979
So we'll say s.slug, like that, so
this will give us back all of our paths.

67
00:04:31.255 --> 00:04:32.103
So just to recap,

68
00:04:32.103 --> 00:04:36.205
basically all we did was just what we
did last time we read the file system.

69
00:04:36.205 --> 00:04:41.355
For each post in that file,
we converted the formatter to JSON.

70
00:04:41.355 --> 00:04:45.632
We mapped over those, and
we just return an array of objects,

71
00:04:45.632 --> 00:04:51.080
that have params, with a slug on them,
because that's what's the URL.

72
00:04:51.080 --> 00:04:52.750
That's what the file path has in it slug.

73
00:04:54.280 --> 00:04:57.755
So the next part that we have to
do is we need to actually fetch

74
00:04:57.755 --> 00:04:59.084
the individual slug.

75
00:04:59.084 --> 00:05:04.333
That matches the params that came in,
but before we do it,

76
00:05:04.333 --> 00:05:08.490
we have to put something here for
fall back.

77
00:05:08.490 --> 00:05:11.960
Otherwise, next year is
gonna basically tell us no.

78
00:05:11.960 --> 00:05:16.827
So what is fall back?, basically fall
back, what it does is, when you,

79
00:05:16.827 --> 00:05:19.510
for instance, I put fallback: false.

80
00:05:19.510 --> 00:05:22.260
Let's talk about that, so
let's say fallback: false.

81
00:05:22.260 --> 00:05:26.322
Basically what this means is if you try
to go to a page at /blog /some slug that

82
00:05:26.322 --> 00:05:30.574
doesn't exist, you'll get a fallback:
false, just like any other website,

83
00:05:30.574 --> 00:05:32.990
you'll get a fallback: false.

84
00:05:32.990 --> 00:05:36.183
That's what fallback false does,
fallback true,

85
00:05:36.183 --> 00:05:40.980
what this does is like, okay,
we're not gonna give you a four.

86
00:05:40.980 --> 00:05:43.860
So instead what we're gonna do,
is we're just gonna

87
00:05:43.860 --> 00:05:49.030
pass in whatever slug you passed gave us,
we're gonna pass that to get static props.

88
00:05:49.030 --> 00:05:53.780
And if get static props get Stats Log and
returns a post, that would be cool.

89
00:05:53.780 --> 00:05:56.600
We'll render that statically and
we'll cache it for next time.

90
00:05:56.600 --> 00:05:59.491
So it's basically like on demand,
static generation for

91
00:05:59.491 --> 00:06:02.150
things that you didn't build
ahead of time already.

92
00:06:03.940 --> 00:06:09.230
Just think about that, so let's say
you had a million blog posts, okay?

93
00:06:09.230 --> 00:06:12.280
How long it would take to generate and
they all came from a CMS, I don't know.

94
00:06:12.280 --> 00:06:15.400
That would take a very,
very long time to generate at build time.

95
00:06:15.400 --> 00:06:19.225
So instead, you say, well, I'm only gonna
generate I'll only do API call to my

96
00:06:19.225 --> 00:06:21.710
CMS and only get the first 100 blog posts.

97
00:06:21.710 --> 00:06:23.696
I'm only gonna get the first
100 blog posts out, and

98
00:06:23.696 --> 00:06:25.520
that's what I'm gonna
return here return a path.

99
00:06:25.520 --> 00:06:29.605
So the first 100 blog posts for
the next, 900,000 plus,

100
00:06:29.605 --> 00:06:32.970
those are only gonna
get rendered on demand.

101
00:06:32.970 --> 00:06:39.578
So when someone goes to that URL, then
that first time because fallback is true,

102
00:06:39.578 --> 00:06:44.700
it's going to render that page and
cache it for next time.

103
00:06:44.700 --> 00:06:49.642
It'll generate it at that time,
that's what fallback, true does,

104
00:06:49.642 --> 00:06:51.430
so it's non blocking.

105
00:06:51.430 --> 00:06:57.770
So because of that, we have to do
some stuff inside of the slug here.

106
00:06:57.770 --> 00:07:02.126
And you can see already have the code we
have to do something like this router dot

107
00:07:02.126 --> 00:07:02.790
fallback.

108
00:07:03.840 --> 00:07:08.158
Because it's non blocking,
we need a way to know inside of this JSX,

109
00:07:08.158 --> 00:07:10.769
if we're currently in a fallback state.

110
00:07:10.769 --> 00:07:14.713
So basically next is will tell you,
by the way of the router that hey,

111
00:07:14.713 --> 00:07:17.705
this current page is currently
in a fallback state,

112
00:07:17.705 --> 00:07:22.010
as in someone requested a page,
that wasn't statically rendered.

113
00:07:22.010 --> 00:07:26.630
So maybe you should show them like
a loading spinner, so that's what this is.

114
00:07:26.630 --> 00:07:30.203
So if I can if router.is fallback is true,
I know that someone requested a page that

115
00:07:30.203 --> 00:07:33.360
I didn't statically render that
I can show a loading spinner.

116
00:07:33.360 --> 00:07:37.120
If you're not a fan of the loading
spinner, and that kind of grosses you out.

117
00:07:37.120 --> 00:07:42.176
You can put fallback blocking, which
is basically the same thing as fallback

118
00:07:42.176 --> 00:07:47.410
true except it doesn't, it is not gonna,
it's not even gonna go to this page.

119
00:07:47.410 --> 00:07:50.150
So you only have to look for it,
you don't have to show a loading spinner.

120
00:07:50.150 --> 00:07:54.826
It'll block the execution of this
page being rendered completely,

121
00:07:54.826 --> 00:07:58.640
until that page was that
data was rendered out.

122
00:07:58.640 --> 00:08:03.020
From the get static props, so it won't
even, it won't even show you that.

123
00:08:03.020 --> 00:08:06.347
So basically someone will try to navigate
to the page, that doesn't exist,

124
00:08:06.347 --> 00:08:09.316
instead of navigating there, and
showing him a loading screen, and

125
00:08:09.316 --> 00:08:11.750
then eventually showing him the content.

126
00:08:11.750 --> 00:08:14.506
It just won't even navigate there,
it'll just be waiting and

127
00:08:14.506 --> 00:08:18.490
waiting just like it was basically the
same behavior is get server side props.

128
00:08:18.490 --> 00:08:20.658
It'll just be waiting
until that is resolved,

129
00:08:20.658 --> 00:08:24.570
until that page is generated statically,
and in cash, and then it'll route there.

130
00:08:26.150 --> 00:08:30.270
So depending on what behavior you
want you can pick which one you want.

131
00:08:30.270 --> 00:08:32.415
So we're going to fall back false, and

132
00:08:32.415 --> 00:08:36.390
that's basically how we're gonna
handle content from the blog.

133
00:08:36.390 --> 00:08:39.740
I'm sorry from the CMS,
we're just not gonna return their path.

134
00:08:39.740 --> 00:08:42.733
So when you try to go,
and get them dynamically,

135
00:08:42.733 --> 00:08:44.950
that's when we'll rid of them.

136
00:08:44.950 --> 00:08:50.228
So we'll take care of that here,

137
00:08:50.228 --> 00:08:58.344
with the export function getStaticdrops,
okay.

