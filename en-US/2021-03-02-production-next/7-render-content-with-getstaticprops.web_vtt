WEBVTT

1
00:00:00.160 --> 00:00:04.941
All right, so
let's actually make this one.

2
00:00:04.941 --> 00:00:06.027
So getStaticProps.

3
00:00:06.027 --> 00:00:10.429
So first thing we need to do is even so
we have fallback true here, but

4
00:00:10.429 --> 00:00:15.220
we still need to getStaticProps to be
able to handle calls to get blog posts

5
00:00:15.220 --> 00:00:19.495
from our cms, even though we
didn't statically render our cms.

6
00:00:19.495 --> 00:00:22.310
We're gonna rely on
fallback to do that for us.

7
00:00:22.310 --> 00:00:27.909
So the first thing we wanna
do is what we've been doing.

8
00:00:27.909 --> 00:00:31.079
Basically what's going to happen here
that's different though is in this

9
00:00:31.079 --> 00:00:33.330
context, we're gonna have params.

10
00:00:33.330 --> 00:00:37.900
So these params it's gonna be
one of these objects, right?

11
00:00:37.900 --> 00:00:41.420
So it's basically params.slug, and
it's gonna be a slug that came in.

12
00:00:41.420 --> 00:00:44.620
So given that slug,
we wanna look to see, hey,

13
00:00:44.620 --> 00:00:47.982
does that slug exist on one
of the blogs in our CMS?

14
00:00:47.982 --> 00:00:50.137
Or does it exist on one of our blogs and
our file system?

15
00:00:50.137 --> 00:00:52.389
Whichever one it is return that one,
that's it.

16
00:00:52.389 --> 00:00:57.188
And that way, it totally works even though
we didn't render those paths are the ones

17
00:00:57.188 --> 00:00:58.277
in the cms up here.

18
00:00:58.277 --> 00:00:59.495
So that's what we'll do.

19
00:00:59.495 --> 00:01:01.821
So I'm just gonna use a try catch here.

20
00:01:01.821 --> 00:01:04.275
And I'm gonna say, post here.

21
00:01:04.275 --> 00:01:07.334
And then the first thing I will do is I'm
going to try to see if it exists in a file

22
00:01:07.334 --> 00:01:07.960
system first.

23
00:01:07.960 --> 00:01:09.991
And if that fails,
then it means it didn't exist.

24
00:01:09.991 --> 00:01:12.110
I'm gonna try to see if
it exists in the CMS.

25
00:01:12.110 --> 00:01:14.484
If that fails,
then how do you wanna handle it?

26
00:01:14.484 --> 00:01:17.700
Throw an error or do a soft fail,
kinda like what I just described.

27
00:01:17.700 --> 00:01:21.360
So let's try to get it from
the file system first.

28
00:01:21.360 --> 00:01:29.027
So I'll say the postsPath just
like we pretty much done up here.

29
00:01:29.027 --> 00:01:31.420
I feel like we've done it's
like 1000 times to this point.

30
00:01:31.420 --> 00:01:32.020
So we'll do that.

31
00:01:33.130 --> 00:01:37.830
Got the postsPath, we're gonna read the
FileSync, the only difference that's gonna

32
00:01:37.830 --> 00:01:40.751
be here we don't actually
need to read the directory,

33
00:01:40.751 --> 00:01:42.670
we just need to get the actual file.

34
00:01:42.670 --> 00:01:46.702
So I'll say, the file is gonna be path or,

35
00:01:46.702 --> 00:01:51.370
I'm sorry, fs.readFileSync like this.

36
00:01:51.370 --> 00:01:58.070
With the posts path, actually,
let's make a new files path I guess,

37
00:01:58.070 --> 00:02:04.550
filePath = path.join because
I got to do this here, right?

38
00:02:04.550 --> 00:02:05.090
Let's do this.

39
00:02:06.470 --> 00:02:07.935
Let's save some code.

40
00:02:10.776 --> 00:02:17.543
And I will say posts, and
then here I'm gonna get the params.slug,

41
00:02:17.543 --> 00:02:22.805
but the slug is not gonna
have a .mdx extension on it.

42
00:02:22.805 --> 00:02:26.783
So I have to add that cuz that's
the actual file name has an mdx

43
00:02:26.783 --> 00:02:28.090
extension on it.

44
00:02:28.090 --> 00:02:31.471
So params.slug, so we'll get that.

45
00:02:31.471 --> 00:02:35.470
And then I'll read that
filesPath like that.

46
00:02:35.470 --> 00:02:40.170
Cool, so we'll do that and
then I need to pass in some encoding here.

47
00:02:40.170 --> 00:02:42.220
Cool, so we'll say file.

48
00:02:42.220 --> 00:02:47.100
And actually I'll just set this equal
to post, cuz that's what we want.

49
00:02:48.990 --> 00:02:53.580
So if that fails, then what I wanna do is
come in here and say okay, if that fails,

50
00:02:53.580 --> 00:02:56.090
then clearly it wasn't on the file system.

51
00:02:56.090 --> 00:02:58.310
So let's try to get it from our cms.

52
00:02:58.310 --> 00:03:04.169
So to get it from our cms, basically I
can maybe try to do some type of regex,

53
00:03:04.169 --> 00:03:09.090
which is gross to see if a slug
exists inside of the string.

54
00:03:09.090 --> 00:03:09.901
I'm not gonna do all that.

55
00:03:09.901 --> 00:03:14.049
I'm just gonna convert this to an object
using that matter thing that we had, and

56
00:03:14.049 --> 00:03:15.270
then check it on there.

57
00:03:15.270 --> 00:03:18.946
So that means we have to first
get all of the posts, and

58
00:03:18.946 --> 00:03:21.570
then convert them all over to matter.

59
00:03:21.570 --> 00:03:26.761
So I'll just say cmsPosts like this.

60
00:03:26.761 --> 00:03:29.850
And this is gonna be,
I think I already have I imported.

61
00:03:29.850 --> 00:03:32.032
Nop, I don't.

62
00:03:32.032 --> 00:03:33.410
So let's import those right quick.

63
00:03:33.410 --> 00:03:41.041
So we'll import from content, there we go.

64
00:03:41.041 --> 00:03:43.990
And we got posts here like that.

65
00:03:43.990 --> 00:03:50.760
So these will be posts.published,
and we're gonna map over those.

66
00:03:50.760 --> 00:03:56.935
And for each one of these posts, I'm
going to do the same thing I did before.

67
00:03:56.935 --> 00:04:02.651
So I'll get the data = matter
from the actual poster,

68
00:04:02.651 --> 00:04:07.380
and then it's returning
the data like that.

69
00:04:09.020 --> 00:04:10.410
So we're good there.

70
00:04:10.410 --> 00:04:15.312
And then the last thing I
wanna do is I just wanna find

71
00:04:15.312 --> 00:04:20.449
the one that matches, so
I'll say post = cmsPosts.

72
00:04:22.650 --> 00:04:27.371
And we'll just do a .find here,
or yeah, .find.

73
00:04:27.371 --> 00:04:31.618
So then we'll get the post here and

74
00:04:31.618 --> 00:04:37.200
it will say if p.slug === params.slug.

75
00:04:37.200 --> 00:04:38.220
So there we go.

76
00:04:38.220 --> 00:04:40.580
So we'll see if one of these match.

77
00:04:40.580 --> 00:04:45.836
And if one of these don't match then, I
mean, this is where you can just be like,

78
00:04:45.836 --> 00:04:50.873
if not post, then I'm just gonna return
props right here with like did fail true,

79
00:04:50.873 --> 00:04:51.760
no post true.

80
00:04:51.760 --> 00:04:53.902
Whatever you want to do,
you can put whatever you want there.

81
00:04:53.902 --> 00:04:56.840
I'm just gonna let this thing error out so
we can keep it moving.

82
00:04:56.840 --> 00:05:01.805
So now that I got that,
then what I wanna do is I need to actually

83
00:05:01.805 --> 00:05:05.920
get everything ready for
rendering on this page.

84
00:05:05.920 --> 00:05:10.314
And the way that that works is with mdx is
we have to like create our mdx source, so

85
00:05:10.314 --> 00:05:12.710
it can be hydrated on the front end.

86
00:05:12.710 --> 00:05:17.690
So what we wanna is we want to import the,

87
00:05:17.690 --> 00:05:22.965
there's something from mdx-remote/,

88
00:05:22.965 --> 00:05:29.421
or let's see was it called,
render-to-string.

89
00:05:29.421 --> 00:05:30.848
We're gonna get that.

90
00:05:30.848 --> 00:05:37.819
So we're gonna say render because
it's a render-to-string like that.

91
00:05:37.819 --> 00:05:38.845
So we'll get that.

92
00:05:38.845 --> 00:05:43.197
The other thing we wanna do is,
what's the other one?

93
00:05:43.197 --> 00:05:44.639
I think that's the only one.

94
00:05:44.639 --> 00:05:46.395
So we'll get the render-to-string, and

95
00:05:46.395 --> 00:05:48.950
that's what we're gonna
use inside of our source.

96
00:05:48.950 --> 00:05:50.311
So I'll come down here, and

97
00:05:50.311 --> 00:05:54.490
the first thing I'm gonna do is I'm
going to pretty much do the same thing.

98
00:05:54.490 --> 00:05:59.190
I did up here,
where I had to get the matter.

99
00:05:59.190 --> 00:06:01.031
So right now, this post,

100
00:06:01.031 --> 00:06:05.993
I think this one already has
the matter on it, let's see, find slug.

101
00:06:05.993 --> 00:06:09.724
Now, this one already has the data on it,
this one doesn't.

102
00:06:09.724 --> 00:06:10.994
So I guess I should do that here.

103
00:06:10.994 --> 00:06:12.672
Let's just do the data here.

104
00:06:12.672 --> 00:06:20.399
So we'll say, const match,

105
00:06:20.399 --> 00:06:24.872
and then I will say post =

106
00:06:24.872 --> 00:06:29.986
matter with a match, oops.

107
00:06:36.331 --> 00:06:37.644
There we go.
That'll just give us,

108
00:06:37.644 --> 00:06:39.170
making sure it's the same thing as this.

109
00:06:39.170 --> 00:06:43.510
They both already have,
they both are equals the data.

110
00:06:43.510 --> 00:06:48.470
So if I already have the data here,
wait, but I need the actual post.

111
00:06:48.470 --> 00:06:49.582
All right, I don't wanna do that.

112
00:06:49.582 --> 00:06:50.374
Let's go back.

113
00:06:50.374 --> 00:06:54.480
[LAUGH] Let's just save it to,
we'll do the matter down below.

114
00:06:54.480 --> 00:07:00.252
We'll just say the post = match like that,

115
00:07:00.252 --> 00:07:05.562
or even better back to what I had before.

116
00:07:05.562 --> 00:07:13.417
And then down here, We'll do that and,

117
00:07:15.645 --> 00:07:20.056
We need to actually get
the content here as well.

118
00:07:20.056 --> 00:07:21.449
So I'll just return this,

119
00:07:27.143 --> 00:07:31.667
Like that, and
then this will now be p.slug or

120
00:07:31.667 --> 00:07:38.478
p.data.slug equals that, and
then now I could just return,

121
00:07:38.478 --> 00:07:43.937
match., content, like that.

122
00:07:43.937 --> 00:07:48.092
Or sorry, post = match.content.

123
00:07:48.092 --> 00:07:51.200
Okay, yeah, I just had to get the content
so we can actually use it down here.

124
00:07:51.200 --> 00:07:54.249
So now that we've got the content,
what we wanna do, like I said,

125
00:07:54.249 --> 00:07:57.360
we gonna wanna render this to a string,
so we can pass it as a source.

126
00:07:57.360 --> 00:07:58.970
So I'm gonna create some markdown source.

127
00:07:58.970 --> 00:08:05.389
So I'm gonna say mdxSource
= renderToString.

128
00:08:05.389 --> 00:08:09.688
And basically what this takes as an
argument, it's not even gonna show me, but

129
00:08:09.688 --> 00:08:13.537
I'm pretty sure it takes in the content,
which is gonna be the post, so

130
00:08:13.537 --> 00:08:14.909
that'll be the string.

131
00:08:14.909 --> 00:08:20.190
And then it takes a scope,
which is basically like the frontMatter.

132
00:08:20.190 --> 00:08:23.236
So in this case we need to
get the data for it, so

133
00:08:23.236 --> 00:08:26.846
I basically had to do this again,
which is this thing.

134
00:08:33.090 --> 00:08:36.930
Like that, just takes the data,
so now we've got mdxSource.

135
00:08:36.930 --> 00:08:42.620
So now we can return some
props here like this.

136
00:08:42.620 --> 00:08:45.550
And we need to make them look
like source and frontMatter.

137
00:08:45.550 --> 00:08:50.692
So I have source here,
that's gonna be the mdxSource.

138
00:08:50.692 --> 00:08:55.760
And then I have frontMatter
which is gonna be the data.

139
00:08:56.940 --> 00:08:58.610
Okay, that was a lot.

140
00:08:58.610 --> 00:09:03.656
So now that we have that, we can go
check out our blog posts actually,

141
00:09:03.656 --> 00:09:09.490
hopefully rendering if I wrote the code
right, if not, we will figure it out.

142
00:09:09.490 --> 00:09:12.230
So let's refresh this.

143
00:09:12.230 --> 00:09:15.978
So let's click on one that I know should
have been statically rendered because

144
00:09:15.978 --> 00:09:17.524
it belonged to the file system.

145
00:09:17.524 --> 00:09:18.892
So let's click on one of those first.

146
00:09:25.282 --> 00:09:30.274
Okay, serializing.source
returned from the getStaticProps.

147
00:09:30.274 --> 00:09:33.200
I think one of these is async, oops.

148
00:09:33.200 --> 00:09:34.904
Is renderToSource async?

149
00:09:34.904 --> 00:09:36.255
I think that's a sync.

150
00:09:36.255 --> 00:09:40.050
Let's try that, says it was a promise, so.

151
00:09:44.232 --> 00:09:45.530
Okay, yeah, it was a sync.

152
00:09:45.530 --> 00:09:49.667
Okay, so you can see this rendered
one of them from the file system,

153
00:09:49.667 --> 00:09:51.740
pretty legit, makes sense.

154
00:09:51.740 --> 00:09:56.150
So now let's try to go back and
render one, not from the file system.

155
00:09:56.150 --> 00:10:00.640
And remember we didn't generate the paths
from those, so we did say fallback true.

156
00:10:00.640 --> 00:10:02.150
So it's gonna come in here.

157
00:10:02.150 --> 00:10:06.247
It's going to pass in the parameter,
and it should match here, if I go and

158
00:10:06.247 --> 00:10:07.513
put a log so we can see.

159
00:10:13.038 --> 00:10:17.110
Because it's gonna fail here,
it's going to fail.

160
00:10:17.110 --> 00:10:19.930
If you read from the file system,
it doesn't exist, it fails.

161
00:10:19.930 --> 00:10:25.990
So if we say params.slug here,
we should be able to see that match.

162
00:10:25.990 --> 00:10:27.832
So I'm gonna click here.

163
00:10:32.339 --> 00:10:33.490
And looks like it worked.

164
00:10:33.490 --> 00:10:38.118
So if I go look at the logs,
what happened here?

165
00:10:38.118 --> 00:10:39.850
This was the error from earlier.

166
00:10:39.850 --> 00:10:42.890
Here's the log,
should match here we-are-hiring, right?

167
00:10:44.140 --> 00:10:44.876
It totally works.

168
00:10:44.876 --> 00:10:48.811
So that's how fallback works,
that's how to getStatic passwords,

169
00:10:48.811 --> 00:10:50.940
that's all the stuff work.

170
00:10:50.940 --> 00:10:53.341
So let's summarize, it's a lot
simpler than it looks, all right?

171
00:10:53.341 --> 00:10:55.977
What's complicated is the fact that
I'm using two different sources for

172
00:10:55.977 --> 00:10:58.030
a blog post, and
that's what this making complicated.

173
00:10:58.030 --> 00:10:59.640
So don't focus on that part.

174
00:10:59.640 --> 00:11:04.220
What I want you to focus is just the two
things, getStaticPaths and getStaticProps.

175
00:11:04.220 --> 00:11:09.634
So getStaticPaths, so any static site
generate that you'll use, I don't

176
00:11:09.634 --> 00:11:15.481
care if it's Next.js, Gatsby, Gridsome,
any static site generator you use.

177
00:11:15.481 --> 00:11:19.584
If you have a dynamic route and
you want those routes to be generated at

178
00:11:19.584 --> 00:11:24.820
build time, the framework needs to know
all the possible routes ahead of time.

179
00:11:24.820 --> 00:11:27.757
That's what getStaticPaths does,

180
00:11:27.757 --> 00:11:32.209
it notifies Next.js of all
the possible full routes for

181
00:11:32.209 --> 00:11:37.400
this dynamic path that you want
to be built at build time.

182
00:11:37.400 --> 00:11:38.950
So getStaticPaths does that.

183
00:11:40.100 --> 00:11:44.983
Because our paths are determined from
a slug property that exists on some

184
00:11:44.983 --> 00:11:49.224
CMS somewhere, we had to hit our
CMS to get those slugs to be able

185
00:11:49.224 --> 00:11:52.445
to tell the next day guess
what those paths are.

186
00:11:52.445 --> 00:11:55.029
Or in this case,
I think we did the file system, I'm sorry,

187
00:11:55.029 --> 00:11:56.560
we did the file system in this case.

188
00:11:56.560 --> 00:11:58.680
Our blog posts were on the file system.

189
00:11:58.680 --> 00:12:03.472
So we had to get the slugs from those to
tell Next.js, hey, we're interested and

190
00:12:03.472 --> 00:12:08.056
statically rendering these blog posts
from the file system with these slugs,

191
00:12:08.056 --> 00:12:09.390
that's it.

192
00:12:09.390 --> 00:12:12.300
Build those for us,
Next.js is like okay, I'll build those.

193
00:12:13.590 --> 00:12:18.296
Then we put fallback true,
fallback true is going to allow us

194
00:12:18.296 --> 00:12:22.079
to basically still attempt,
and I put attempt,

195
00:12:22.079 --> 00:12:28.620
attempt to render a page that was not
previously rendered at build time.

196
00:12:28.620 --> 00:12:32.630
If getStaticProps actually
doesn't error out basically.

197
00:12:32.630 --> 00:12:38.157
So what's gonna happen is if I go to
slash any other slug that isn't here,

198
00:12:38.157 --> 00:12:42.360
that slug still going to get
passed in on params.slug.

199
00:12:44.250 --> 00:12:45.799
It's going to try to read
from the file system,

200
00:12:45.799 --> 00:12:48.440
it's gonna fail because that blog post
doesn't exist in our file system.

201
00:12:48.440 --> 00:12:50.250
So then it's gonna try
to read it from our cms.

202
00:12:51.330 --> 00:12:53.420
If it finds it from there,
it does the same thing.

203
00:12:53.420 --> 00:12:55.646
It renders it to a string,
and it returns it.

204
00:12:55.646 --> 00:12:57.401
If it doesn't find it here,
then it'll error out and

205
00:12:57.401 --> 00:12:58.470
you can do whatever you want.

206
00:12:58.470 --> 00:13:01.197
Throw an error, send back a new prop
that says you error it out, and

207
00:13:01.197 --> 00:13:03.700
show something different on your JSX.

208
00:13:03.700 --> 00:13:04.870
But that's it.

209
00:13:04.870 --> 00:13:06.347
StaticPaths is responsible for

210
00:13:06.347 --> 00:13:08.925
getting a path that we're
interested in at build time.

211
00:13:08.925 --> 00:13:14.400
Props is responsible for actually
getting the data that matches that path.

212
00:13:16.100 --> 00:13:19.620
And fallback allows us to not
generate all the paths at once and

213
00:13:19.620 --> 00:13:23.560
do them at runtime whenever someone
tries to do a request to the page.

