WEBVTT

1
00:00:00.440 --> 00:00:02.200
Any questions on this?

2
00:00:02.200 --> 00:00:07.271
&gt;&gt; You said that, when you are on Next.js
environment you can use node code,

3
00:00:07.271 --> 00:00:10.410
that also means that I
can use something like,

4
00:00:10.410 --> 00:00:16.070
child process to execute operational
system processes, or something like that.

5
00:00:17.160 --> 00:00:22.445
&gt;&gt; Because we can use node code inside of
Next.js functions, I guess static props.

6
00:00:22.445 --> 00:00:25.967
Does that mean I can do things
like spawning child processes in

7
00:00:25.967 --> 00:00:27.470
the background?

8
00:00:27.470 --> 00:00:30.320
Well, you have to ask yourself.

9
00:00:30.320 --> 00:00:35.970
Can you and would you do those things
on their traditional like node server?

10
00:00:35.970 --> 00:00:39.560
And the question is, yes,
then the question would be yes here, too.

11
00:00:41.160 --> 00:00:43.100
I don't recommend doing that.

12
00:00:43.100 --> 00:00:43.865
But because,

13
00:00:43.865 --> 00:00:48.026
everything that's gonna be inside of
these functions is gonna be blocking.

14
00:00:48.026 --> 00:00:53.219
As in the page is not gonna render
until everything is done right.

15
00:00:53.219 --> 00:00:55.587
So, if you have some ongoing tasks,
that's,

16
00:00:55.587 --> 00:00:58.798
well, I guess a background drop
isn't technically blocking.

17
00:00:58.798 --> 00:01:00.633
But if you have something
that was blocking,

18
00:01:00.633 --> 00:01:02.180
then the page isn't gonna render.

19
00:01:02.180 --> 00:01:05.330
So, if this function
took forever to process,

20
00:01:05.330 --> 00:01:11.470
seeing how this one's getStaticProps,
this is gonna increase your build time.

21
00:01:11.470 --> 00:01:15.507
If this was a getServersideProps,
that's gonna increase your run time,

22
00:01:15.507 --> 00:01:17.390
your load time at run time.

23
00:01:17.390 --> 00:01:21.638
Right, so, it's probably not
the best place to put those things,

24
00:01:21.638 --> 00:01:25.750
because these things aren't meant for
long running processes.

25
00:01:25.750 --> 00:01:28.226
I would probably still put
those things in, like,

26
00:01:28.226 --> 00:01:32.212
background jobs on my hosting provider or
somewhere else and not inside of these.

27
00:01:32.212 --> 00:01:34.310
But you can run it.

28
00:01:34.310 --> 00:01:35.510
I'd be curious to see.

29
00:01:36.550 --> 00:01:40.107
What the side effects of that would be,
all right.

30
00:01:40.107 --> 00:01:42.810
If this hasn't blown you away already.

31
00:01:43.940 --> 00:01:44.950
Don't worry.

32
00:01:44.950 --> 00:01:46.720
It only gets crazier from here.

33
00:01:46.720 --> 00:01:50.680
But this [LAUGH] blew me away,
when I learned this about next year,

34
00:01:50.680 --> 00:01:52.560
when I first started using it.

35
00:01:52.560 --> 00:01:53.885
so, yeah, pretty intense.

36
00:01:53.885 --> 00:01:55.969
So, the next thing you wanna do
is just wanna kind of do this-

37
00:01:55.969 --> 00:01:59.413
&gt;&gt; One second, question around caching,

38
00:01:59.413 --> 00:02:02.760
if you're gonna get into that later.

39
00:02:02.760 --> 00:02:04.420
&gt;&gt; Depends on what type of caching.

40
00:02:07.410 --> 00:02:10.610
I could talk about the caching
that we get for free right now.

41
00:02:10.610 --> 00:02:16.010
Next, as does cache the static pages for
us, which can be served by CDN.

42
00:02:16.010 --> 00:02:19.858
So, if you're worried about every
time someone goes to your page that

43
00:02:19.858 --> 00:02:22.350
this is gonna execute every single time.

44
00:02:22.350 --> 00:02:24.465
Well, it's not true not in
the case of this page at least.

45
00:02:24.465 --> 00:02:27.200
Because we're doing a getStaticProps and
it only happens at build time.

46
00:02:27.200 --> 00:02:29.170
And then you're good to go.

47
00:02:29.170 --> 00:02:34.276
If this was a getServersideProp,
whatever is in here will be executed

48
00:02:34.276 --> 00:02:40.020
every single time someone hits your
route that this dysfunction is on.

49
00:02:40.020 --> 00:02:44.523
So, it would be up to you to figure out
how you're caching those resources that

50
00:02:44.523 --> 00:02:48.430
you're trying to get data from,
right, cuz you might be hitting.

51
00:02:48.430 --> 00:02:52.430
I don't know two different
things in this function.

52
00:02:52.430 --> 00:02:56.070
One is a database, one's an API,
one third party thing.

53
00:02:56.070 --> 00:02:58.298
I don't know some something in Redis,
who knows, like,

54
00:02:58.298 --> 00:03:00.720
it's gonna be depending on how
you cache that stuff there.

55
00:03:00.720 --> 00:03:03.588
Because at the end of the day,
next year, is just waiting for

56
00:03:03.588 --> 00:03:07.710
that function to finish, to bottom out so
it can actually return those props.

57
00:03:07.710 --> 00:03:11.320
And while that's happening, the page
is going to be in a loading state.

58
00:03:11.320 --> 00:03:14.810
So, it's going to definitely
slow down your experience.

59
00:03:14.810 --> 00:03:17.100
If that's the type of caching
you're talking about, then yeah.

60
00:03:17.100 --> 00:03:21.617
The other types of caching that
we're talking about like performance

61
00:03:21.617 --> 00:03:23.923
on this site and front-end stuff.

62
00:03:23.923 --> 00:03:26.740
That comes down to the provider
that your deployed is on.

63
00:03:26.740 --> 00:03:30.859
But at the end of the day,
everything static, it's mostly going fast.

64
00:03:31.990 --> 00:03:37.122
&gt;&gt; Like I can clearly see
there's some CSS on this post,

65
00:03:37.122 --> 00:03:41.239
but I cannot see where those time files?.

66
00:03:41.239 --> 00:03:45.610
There is just one file called Global.CSS,
but I don't see any other files.

67
00:03:45.610 --> 00:03:50.120
&gt;&gt; [LAUGH] Yeah, that's because I'm
using a component library called

68
00:03:50.120 --> 00:03:54.010
evergreen whereas it,
I don't think it's in here.

69
00:03:54.010 --> 00:03:57.250
It's not on this page,
but I'm using, Here it is.

70
00:03:57.250 --> 00:04:03.010
Yeah, I'm using evergreen UI,
which is a segments component library.

71
00:04:03.010 --> 00:04:05.060
And it just comes with
a bunch of styles for free.

72
00:04:05.060 --> 00:04:08.240
So, yeah, I don't really have a lot
of styles that I wrote myself.

73
00:04:08.240 --> 00:04:12.350
I just NPM install the library.

74
00:04:12.350 --> 00:04:15.290
&gt;&gt; Why would I need this GetStaticProps?

75
00:04:15.290 --> 00:04:20.390
Wouldn't it work if I just don't
have it and try to load some ID?

76
00:04:20.390 --> 00:04:24.300
&gt;&gt; Well, let's get past the part
where Next.js has these hard checks

77
00:04:24.300 --> 00:04:26.027
on if you have a dynamic page.

78
00:04:26.027 --> 00:04:28.280
And it doesn't have
getStaticProps that'll break.

79
00:04:28.280 --> 00:04:30.310
Let's assume that,
that doesn't happen, okay.

80
00:04:30.310 --> 00:04:32.330
Let's assume it does try
to attend to load this.

81
00:04:32.330 --> 00:04:33.270
So, what would happen?

82
00:04:33.270 --> 00:04:35.813
Well, if it's hard to attend to load this,
one,

83
00:04:35.813 --> 00:04:39.210
we'd find out that these
props would be undefined.

84
00:04:39.210 --> 00:04:41.934
There would be nothing here cuz
these props actually get injected by

85
00:04:41.934 --> 00:04:43.900
the function that we were just making.

86
00:04:43.900 --> 00:04:44.880
So, there'll be nothing here.

87
00:04:44.880 --> 00:04:46.940
So, let's say all right,
this doesn't take any props.

88
00:04:46.940 --> 00:04:50.330
So, that solves that problem, okay, cool.

89
00:04:50.330 --> 00:04:57.030
Okay, well, then how would you
get the content for this page?

90
00:04:57.030 --> 00:05:01.125
So, then you might ask, well, if my
content is on a CMS or somewhere with API,

91
00:05:01.125 --> 00:05:03.530
I just make an API call right here.

92
00:05:03.530 --> 00:05:06.750
Isn't whatever flavor window.fetch sure.

93
00:05:06.750 --> 00:05:07.810
And you will go get it.

94
00:05:07.810 --> 00:05:09.880
Yeah, absolutely, you can do that.

95
00:05:09.880 --> 00:05:12.363
At that point, you're basically
building a single page app, right?

96
00:05:12.363 --> 00:05:15.750
That content wasn't rendered,
it wasn't there statically.

97
00:05:15.750 --> 00:05:19.193
So, therefore,
if crawlers like Facebook's crawler or

98
00:05:19.193 --> 00:05:24.680
Twitter's crawler like you're not gonna
see that being indexed on those crawlers.

99
00:05:24.680 --> 00:05:26.960
I think Google can handle it now,
obviously.

100
00:05:26.960 --> 00:05:29.753
So, it's basically this it's not
gonna be rendered on the server,

101
00:05:29.753 --> 00:05:32.080
it's not gonna be cashable,
it's going to be dynamic.

102
00:05:32.080 --> 00:05:35.278
It has to be computed every
single time someone hits that,

103
00:05:35.278 --> 00:05:37.900
which is what you wanna do for
like user data.

104
00:05:37.900 --> 00:05:40.239
So, if you were like making a call
to get the signed in user here.

105
00:05:40.239 --> 00:05:42.000
Yeah, you would always wanna do that.

106
00:05:42.000 --> 00:05:44.060
But for content that's meant to be static,

107
00:05:44.060 --> 00:05:46.576
you probably wanna get that
before this page render.

108
00:05:46.576 --> 00:05:49.440
So, yes you could totally
do without these functions.

109
00:05:49.440 --> 00:05:52.830
But then at that point, you're basically
just building a single page app.

110
00:05:52.830 --> 00:05:54.633
&gt;&gt; So,
if you state your fallback to be true.

111
00:05:54.633 --> 00:05:59.124
And you're dealing with same API point or
a file path that doesn't yet exist,

112
00:05:59.124 --> 00:06:01.940
how would you deal with
that kind of failure?

113
00:06:01.940 --> 00:06:04.730
And what if the data does
appear five minutes later?

114
00:06:04.730 --> 00:06:09.020
Would it kind of cache the bad data or
the fact that it doesn't exist?

115
00:06:09.020 --> 00:06:13.807
&gt;&gt; It would only cash it,
if the getStaticProps didn't break,

116
00:06:13.807 --> 00:06:15.750
if it didn't error out.

117
00:06:15.750 --> 00:06:18.867
So, you can throw an error in here,
like we're gonna write the code but,

118
00:06:18.867 --> 00:06:20.290
you can handle however you want.

119
00:06:20.290 --> 00:06:23.960
And you can even,
you could literally do whatever you want.

120
00:06:23.960 --> 00:06:26.230
You can send back a different some HTML.

121
00:06:26.230 --> 00:06:28.000
I mean, there's a lot of
different things you can do.

122
00:06:28.000 --> 00:06:33.888
You can do a redirect, I think the best
thing, because you gotta think about it,

123
00:06:33.888 --> 00:06:38.580
like, what type of experience
do you wanna show a user, right.

124
00:06:38.580 --> 00:06:40.460
What do you wanna do?

125
00:06:40.460 --> 00:06:43.750
Typically, I think a 404 looks
is probably the best way.

126
00:06:43.750 --> 00:06:46.150
So, showing them a 404 might be good.

127
00:06:46.150 --> 00:06:48.773
What I've been doing is just
like throwing an error.

128
00:06:48.773 --> 00:06:50.967
And having like
the the provider handle it.

129
00:06:50.967 --> 00:06:52.866
And use the provider
just shows a 404 page,

130
00:06:52.866 --> 00:06:55.950
it'll just show whatever 404
page you registered there.

131
00:06:55.950 --> 00:07:00.284
So, there's a lot of different ways you
can kinda do it, but I think 404 is like,

132
00:07:00.284 --> 00:07:04.025
that's what I would expect would
happen about once page didn't exist.

133
00:07:04.025 --> 00:07:06.587
&gt;&gt; Sure, and then just to
understand if there's no caching,

134
00:07:06.587 --> 00:07:10.175
then every person who goes there were just
like a three second load time didn't have

135
00:07:10.175 --> 00:07:11.891
to wait three seconds and both.

136
00:07:11.891 --> 00:07:16.420
&gt;&gt; no no no, so like, let's say,
I went to a route that didn't exist.

137
00:07:16.420 --> 00:07:19.400
Lets it was called \learntocode, okay?

138
00:07:19.400 --> 00:07:21.163
And then it generate it for me.

139
00:07:21.163 --> 00:07:23.950
And say,
it took three seconds to generate, okay?

140
00:07:23.950 --> 00:07:26.610
And then two seconds later after I did it,

141
00:07:26.610 --> 00:07:30.569
you did it all the way from London,
you went to the same route.

142
00:07:30.569 --> 00:07:33.350
It's cached for you,
you don't have to wait that three seconds.

143
00:07:33.350 --> 00:07:35.466
Okay, yeah, the question was,

144
00:07:35.466 --> 00:07:40.315
if getStaticProps failed because it
was a dynamic page that didn't exist.

145
00:07:40.315 --> 00:07:42.480
Does the next day has cached that failure.

146
00:07:42.480 --> 00:07:45.830
So, the next person doesn't
have to wait to get a failure.

147
00:07:45.830 --> 00:07:50.120
No, I don't think it, I think it depends
on how you fail it actually, right?

148
00:07:50.120 --> 00:07:52.208
Like if you do what I
call like a soft fail,

149
00:07:52.208 --> 00:07:56.045
where you don't actually throw any
errors inside of your getStaticProps.

150
00:07:56.045 --> 00:07:58.845
And instead you actually do render a page.

151
00:07:58.845 --> 00:08:03.045
Let's say for instance, if you determine
that, wow, this thing doesn't exist,

152
00:08:03.045 --> 00:08:04.005
it's a fake page.

153
00:08:04.005 --> 00:08:05.530
So, now, I'm gonna send down a prop.

154
00:08:05.530 --> 00:08:10.437
And I'm gonna send down a prop here

155
00:08:10.437 --> 00:08:14.670
called 404 true, right?

156
00:08:14.670 --> 00:08:16.070
I'm gonna do something like that.

157
00:08:16.070 --> 00:08:20.020
And then up here, you can get,
you can just see if it's a 404, right?

158
00:08:20.020 --> 00:08:23.799
You'll be like, hey,
is there 404 here, right?

159
00:08:23.799 --> 00:08:28.707
And then if it's a 404 you render a 404
template here that gets cached, right,

160
00:08:28.707 --> 00:08:30.060
that would be cached.

161
00:08:30.060 --> 00:08:32.160
So, if anyone goes to that
same broken route again,

162
00:08:32.160 --> 00:08:33.890
they're gonna see a 404 page, right?

163
00:08:35.090 --> 00:08:37.074
Because technically,
as far as Next.js is concerned,

164
00:08:37.074 --> 00:08:39.080
you've rendered a page for that route.

165
00:08:39.080 --> 00:08:41.440
You did,
that's what I call a soft failure.

166
00:08:41.440 --> 00:08:45.350
If you throw an error,
I don't think they're gonna cache that.

167
00:08:45.350 --> 00:08:49.020
I don't think that they're gonna know
that, that function broke last time.

168
00:08:49.020 --> 00:08:51.750
I think they are gonna be optimistic and
hope that you fixed it.

169
00:08:51.750 --> 00:08:55.540
So, someone hits it again
maybe it'll work this time.

170
00:08:55.540 --> 00:08:59.688
So, that's why I would prefer to probably
do like a soft failures, what I call,

171
00:08:59.688 --> 00:09:00.725
whereas Next.js.

172
00:09:00.725 --> 00:09:03.784
As far as they're concerned,
you did render this page so it exists,

173
00:09:03.784 --> 00:09:05.200
so, they cashed it.

174
00:09:05.200 --> 00:09:10.045
But technically, you're just rendering
a 404 inside of your template, or

175
00:09:10.045 --> 00:09:12.590
whatever you want to render, cool.

176
00:09:12.590 --> 00:09:13.330
Answered your question, okay.

177
00:09:13.330 --> 00:09:14.790
Any other questions?

178
00:09:14.790 --> 00:09:19.253
&gt;&gt; Can I use this getStatic
route to fetch some data that I

179
00:09:19.253 --> 00:09:21.739
have in my state management?

180
00:09:23.320 --> 00:09:23.960
&gt;&gt; Good question.

181
00:09:23.960 --> 00:09:28.640
So, you cannot access anything client
side in either these functions.

182
00:09:28.640 --> 00:09:31.809
So, these functions have no
access to anything react.

183
00:09:31.809 --> 00:09:34.301
Because even though
they're in the same page,

184
00:09:34.301 --> 00:09:38.933
they're executed at completely different
times and completely different runtimes.

185
00:09:38.933 --> 00:09:43.438
The colocation of these functions
in your JSX is intentional,

186
00:09:43.438 --> 00:09:47.630
because they should be
thought of at the same time.

187
00:09:47.630 --> 00:09:49.372
But just cuz they are in the same file,

188
00:09:49.372 --> 00:09:52.460
they actually don't get executed
next to each other in any way.

189
00:09:52.460 --> 00:09:56.670
These things get executed on the server
way before this even gets rendered.

190
00:09:56.670 --> 00:10:00.900
And in fact, these are what is in
charge of rendering your actual app.

191
00:10:00.900 --> 00:10:04.100
So, unfortunately,
you won't be able to access it.

192
00:10:04.100 --> 00:10:08.124
But if you could, maybe tell me the use
case that you're trying to solve.

193
00:10:08.124 --> 00:10:12.220
I could probably show you how you might be
able to do it within the context of these

194
00:10:12.220 --> 00:10:12.720
things.

195
00:10:13.770 --> 00:10:19.672
&gt;&gt; I guess that order of execution of
functions is, that first we get the path,

196
00:10:19.672 --> 00:10:23.656
then we get the props and
then we render, right?.

197
00:10:23.656 --> 00:10:29.050
&gt;&gt; 100%, yep, you get the paths,
you get the props, and then you render.

198
00:10:30.200 --> 00:10:34.836
Yep, pretty much it and if you have
fallback, then it skips the paths,

199
00:10:34.836 --> 00:10:36.860
it goes straight to the props.

200
00:10:36.860 --> 00:10:38.558
And then it attempts to render, for

201
00:10:38.558 --> 00:10:41.470
a route that isn't already
been generated by the paths.

202
00:10:41.470 --> 00:10:45.084
So, if you have fallback true and
you hit a path that wasn't already there,

203
00:10:45.084 --> 00:10:48.090
then it doesn't hit paths again,
because it was never there.

204
00:10:48.090 --> 00:10:49.770
It's not gonna be there now.

205
00:10:49.770 --> 00:10:51.130
So, it's gonna go straight to props.

