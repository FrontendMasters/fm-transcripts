WEBVTT

1
00:00:00.000 --> 00:00:03.708
[MUSIC]

2
00:00:03.708 --> 00:00:07.404
&gt;&gt; Mike North: Computed properties
work very nicely with the kinds

3
00:00:07.404 --> 00:00:10.680
of simple properties that we've seen so
far.

4
00:00:11.800 --> 00:00:16.420
You can get them, you can set them,
but the key difference

5
00:00:16.420 --> 00:00:21.420
is that they're properties that
are derived from other values.

6
00:00:21.420 --> 00:00:23.160
They're evaluated lazily.

7
00:00:23.160 --> 00:00:27.630
So you define a function that
describes the calculation,

8
00:00:27.630 --> 00:00:32.940
how do you establish a value C
from dependent values A and B?

9
00:00:32.940 --> 00:00:35.100
And only when you ask for

10
00:00:35.100 --> 00:00:39.740
the value of that computer property
is that calculation actually made.

11
00:00:39.740 --> 00:00:45.715
The value is cached, meaning subsequent
retrievals of that value will

12
00:00:45.715 --> 00:00:52.501
not cause the work to be redone unless
some dependent property has been changed.

13
00:00:52.501 --> 00:00:57.241
So a very powerful concept,
a very efficient way of sort of

14
00:00:57.241 --> 00:01:01.693
massaging things if you want
to capitalize a string and

15
00:01:01.693 --> 00:01:05.778
then have that be what
you're showing in your UI.

16
00:01:05.778 --> 00:01:09.586
This is a great way to make that work.

17
00:01:09.586 --> 00:01:14.268
So here is an example of
a read-only computed property

18
00:01:14.268 --> 00:01:19.050
that would be dependent on firstName and
lastName, and

19
00:01:19.050 --> 00:01:24.369
it just is simply concatenating
these two strings together.

20
00:01:25.490 --> 00:01:31.884
So only when we ask for full name will
this function that takes an array and

21
00:01:31.884 --> 00:01:36.950
joins together with a space, only when we
ask for the property will it be calculated

22
00:01:36.950 --> 00:01:42.510
and that's what we mean by, when we say it
is evaluated lazily, this is that concept.

23
00:01:43.610 --> 00:01:50.290
So this is the sort of old way of
defining computer properties and

24
00:01:50.290 --> 00:01:54.650
it's still 100% valid and
not in anyway deprecated

25
00:01:56.420 --> 00:02:00.471
moving forward for
read-only computed properties.

26
00:02:01.610 --> 00:02:04.140
This is another way to define it.

27
00:02:04.140 --> 00:02:06.640
This is sort of the more modern syntax.

28
00:02:06.640 --> 00:02:10.930
It was introduced in Ember 1.12,
so a very recent release.

29
00:02:10.930 --> 00:02:15.330
And you'll notice here that,
instead of passing a function in to this

30
00:02:15.330 --> 00:02:20.020
computed method,
this is passing a function in.

31
00:02:20.020 --> 00:02:25.860
Instead, here, I'm passing in an object
which has a Git function in it.

32
00:02:25.860 --> 00:02:27.520
The reason that this was done,

33
00:02:27.520 --> 00:02:33.150
it has to do with the way setting computed
properties used to be structured.

34
00:02:33.150 --> 00:02:37.910
Used to be one function and depending on
the number of arguments, you would be sort

35
00:02:37.910 --> 00:02:43.990
of in getter mode or setter mode and
it became difficult to read and maintain.

36
00:02:43.990 --> 00:02:49.410
So now the concepts are sort of broken out
into separate get and set functions all

37
00:02:49.410 --> 00:02:54.170
wrapped in an object, that is, that's sort
of the more modern way of defining things.

38
00:02:54.170 --> 00:02:58.934
But again for
simple read-only computed properties,

39
00:02:58.934 --> 00:03:03.400
doing things the Ember
classic way is totally fine.

40
00:03:06.675 --> 00:03:09.986
&gt;&gt; Mike North: For
settable computed properties, as I said,

41
00:03:09.986 --> 00:03:13.210
we're gonna provide a method set.

42
00:03:13.210 --> 00:03:17.420
And that will take in,
as arguments, the property key and

43
00:03:17.420 --> 00:03:19.889
the new value of the property
that has just been set.

44
00:03:21.480 --> 00:03:23.180
And you can see here,

45
00:03:23.180 --> 00:03:29.240
we've sort of performed
the reverse of getting full name.

46
00:03:29.240 --> 00:03:35.690
We split the new value by space,
and then everything before

47
00:03:35.690 --> 00:03:39.570
the space is the first name, everything
after the space is the last name.

48
00:03:39.570 --> 00:03:44.490
We set those two properties,
firstName and lastName, and

49
00:03:44.490 --> 00:03:49.410
then very important, in our setter,
we return the new value that was

50
00:03:49.410 --> 00:03:54.450
just passed in and this has to do with
the way that caching works under the hood.

51
00:03:54.450 --> 00:03:57.555
If you don't return new val
at the end of your setter,

52
00:03:57.555 --> 00:04:01.020
you will end up with mysterious and
hard to track down bugs.

53
00:04:03.197 --> 00:04:05.530
&gt;&gt; Mike North: Everyone
get how this works?

54
00:04:05.530 --> 00:04:07.520
&gt;&gt; Speaker 2: What is key in set method?

55
00:04:07.520 --> 00:04:10.430
&gt;&gt; Mike North: In this case,
key is gonna be fullName.

56
00:04:10.430 --> 00:04:15.100
And the reason that you're passing key in
is if you think about how this would look

57
00:04:15.100 --> 00:04:17.640
when abstracted a little bit.

58
00:04:17.640 --> 00:04:22.780
So say that we had something
more generic that was a factory

59
00:04:22.780 --> 00:04:28.850
that was spitting out the result
of calling this function computed.

60
00:04:28.850 --> 00:04:34.430
We may not necessarily know exactly
which property is being set.

61
00:04:34.430 --> 00:04:38.980
This may just be a function
that is generally used and

62
00:04:40.400 --> 00:04:43.450
we need to be aware of exactly what
we're dealing with at that moment.

63
00:04:43.450 --> 00:04:48.620
So in this case, not so clear how it's
useful, but in the case where you abstract

64
00:04:48.620 --> 00:04:54.210
it a little bit more, there are situations

65
00:04:54.210 --> 00:04:57.430
where you really need to know what is
the property that you're dealing with.

66
00:05:00.160 --> 00:05:02.990
So you can see the way
I defined dependencies.

67
00:05:04.010 --> 00:05:08.495
firstName and lastName are the first
two arguments passed into computed.

68
00:05:09.590 --> 00:05:14.740
Actually, everything except for
the last argument passed into computed.

69
00:05:14.740 --> 00:05:18.620
That's taken as the name
of a dependent property.

70
00:05:18.620 --> 00:05:23.725
And if you remember when we were
talking about get and set, you can

71
00:05:23.725 --> 00:05:28.459
have a path deep into a hierarchy like

72
00:05:28.459 --> 00:05:33.530
name.first which would be
drilling into an object and

73
00:05:33.530 --> 00:05:37.600
declaring a dependency on
a property deep within a hierarchy.

74
00:05:38.840 --> 00:05:42.260
And just like we were
talking about how you

75
00:05:42.260 --> 00:05:44.820
have to treat arrays a little
bit differently with get.

76
00:05:44.820 --> 00:05:48.628
You have to treat arrays a little bit
differently when you deal with computed

77
00:05:48.628 --> 00:05:50.510
properties as well.

78
00:05:50.510 --> 00:05:53.550
Because the arrays in and
of themselves are observable.

