WEBVTT

1
00:00:00.000 --> 00:00:03.855
[MUSIC]

2
00:00:03.855 --> 00:00:08.031
&gt;&gt; Mike North: There
are two ways to declare

3
00:00:08.031 --> 00:00:13.950
a dependency on some aspect of an array.

4
00:00:13.950 --> 00:00:19.550
One is using square brackets and
the other is using this @each notation.

5
00:00:19.550 --> 00:00:22.820
The key difference between the two is
that when you use square brackets,

6
00:00:23.900 --> 00:00:27.800
you're really just observing
the size of the array.

7
00:00:27.800 --> 00:00:32.210
You're watching for
things to be added and removed.

8
00:00:32.210 --> 00:00:36.501
And in the event that that
nature of the array changes,

9
00:00:36.501 --> 00:00:40.151
your computed property
will be invalidated.

10
00:00:40.151 --> 00:00:42.530
And the next time you ask for
it, it will be recalculated.

11
00:00:44.640 --> 00:00:49.585
The second example here
where we're using each.id.

12
00:00:49.585 --> 00:00:53.939
What you're doing there is
you're actually observing the ID

13
00:00:53.939 --> 00:00:56.963
property on every item within this array.

14
00:00:56.963 --> 00:01:02.372
And so if you were for
example building some shopping cart and

15
00:01:02.372 --> 00:01:08.006
you wanted to have this computed
property called grand total.

16
00:01:08.006 --> 00:01:11.974
And you wanted to observe
on all of the items in your

17
00:01:11.974 --> 00:01:16.902
shopping cart you wanna note
the unit price and the quantity.

18
00:01:16.902 --> 00:01:21.632
And if those change, if I increase
quantity on an individual item even though

19
00:01:21.632 --> 00:01:25.923
I didn't add a new thing to my shopping
cart I just bumped up quantity,

20
00:01:25.923 --> 00:01:28.284
I want to recalculate my grand total.

21
00:01:28.284 --> 00:01:30.220
This would be the thing to reach for.

22
00:01:30.220 --> 00:01:34.250
So you're actually observing
the items inside the array

23
00:01:34.250 --> 00:01:35.900
not the length of the array itself.

24
00:01:37.930 --> 00:01:41.030
Very key distinction to make here.

25
00:01:41.030 --> 00:01:47.440
So you would just use these strings here
with the square bracket or the @each.

26
00:01:47.440 --> 00:01:51.900
You would just pass those in
along with firstName, lastName.

27
00:01:51.900 --> 00:01:57.410
You would just use that string as a way of
declaring a dependency on that property.

28
00:01:57.410 --> 00:02:00.220
And you can have as many
as you want in here.

29
00:02:00.220 --> 00:02:04.330
You can even have no dependencies,
which is an interesting case.

30
00:02:04.330 --> 00:02:08.650
That would be a situation where you
would have to explicitly, for example,

31
00:02:08.650 --> 00:02:09.879
when an action is called.

32
00:02:12.140 --> 00:02:13.580
Fire a property change.

33
00:02:13.580 --> 00:02:16.370
Say like,
I declare this to be invalidated.

34
00:02:17.660 --> 00:02:21.570
And that will trigger an update
the next time the property's asked for.

35
00:02:21.570 --> 00:02:25.370
But just be aware you can have as
many dependencies as you want.

36
00:02:25.370 --> 00:02:30.270
And it's everything except the last
argument passed into computed

37
00:02:30.270 --> 00:02:31.369
is taken as a dependency.

38
00:02:33.220 --> 00:02:35.040
&gt;&gt; Speaker 2: There's
a quick question in chat.

39
00:02:35.040 --> 00:02:36.160
&gt;&gt; Mike North: Yes?

40
00:02:36.160 --> 00:02:37.465
&gt;&gt; Speaker 2: Is there
a way to do something like,

41
00:02:37.465 --> 00:02:41.030
mylist.each watch all values for change?

42
00:02:44.590 --> 00:02:46.850
&gt;&gt; Mike North: There is
deliberately not a way to do that,

43
00:02:46.850 --> 00:02:48.940
because that would be terribly expensive.

44
00:02:48.940 --> 00:02:53.480
That is observing a whole lot of data,
and it's likely to cause

45
00:02:53.480 --> 00:02:58.374
things to become invalidated
when it's inappropriate.

46
00:02:58.374 --> 00:03:03.380
If you're in that situation where you're
just observing a whole lot it's often

47
00:03:03.380 --> 00:03:08.444
much more efficient to not
declare that dependency.

48
00:03:08.444 --> 00:03:14.421
And to, whenever an action is
fired of some sort, you can just,

49
00:03:14.421 --> 00:03:21.360
call this method notify property
change and pass in the property key.

50
00:03:21.360 --> 00:03:25.360
And that will have the same effect
as a dependency being changed.

51
00:03:25.360 --> 00:03:28.370
It effectively invalidates the cache and
the next time you ask for

52
00:03:28.370 --> 00:03:30.400
that value it will recalculate.

53
00:03:30.400 --> 00:03:34.130
&gt;&gt; Speaker 3: So
you don't consume the computed property.

54
00:03:34.130 --> 00:03:36.760
It will never calculate
the computed property.

55
00:03:36.760 --> 00:03:37.570
&gt;&gt; Mike North: Precisely.

56
00:03:37.570 --> 00:03:41.133
&gt;&gt; Speaker 3: If you don't consume the
computed property but you use the setter

57
00:03:41.133 --> 00:03:45.098
to do something and you set computed
property, does it calculate them?

58
00:03:45.098 --> 00:03:49.290
Even though that computed property
may never be consumed in a get cell?

59
00:03:50.400 --> 00:03:54.701
&gt;&gt; Mike North: So
let's look at our setter here.

60
00:03:54.701 --> 00:03:58.179
You're essentially not gonna
have to really calculate much.

61
00:03:58.179 --> 00:04:02.720
You're providing this computed property
with a value, so it will have that value.

62
00:04:04.040 --> 00:04:08.580
So if I never asked for
fullName but I set fullName here,

63
00:04:08.580 --> 00:04:13.646
the effect that will have is that
fullName will be up to date firstName and

64
00:04:13.646 --> 00:04:19.620
lastName will be updated and
everything will work as you would expect.

65
00:04:19.620 --> 00:04:22.220
&gt;&gt; Speaker 3: So the get is actually
cached without having to call

66
00:04:22.220 --> 00:04:26.430
the get in that scenario?

67
00:04:26.430 --> 00:04:29.740
&gt;&gt; Mike North: So the act of
returning newVal is gonna take care

68
00:04:29.740 --> 00:04:30.950
of everything that needs
to be taken care of.

69
00:04:30.950 --> 00:04:35.330
&gt;&gt; Speaker 3: That'll cause
the cached value to do that for get.

70
00:04:35.330 --> 00:04:37.710
So I don't actually have to call get.

71
00:04:37.710 --> 00:04:39.750
&gt;&gt; Mike North: Correct.
&gt;&gt; Speaker 3: But I ask for the computed.

72
00:04:40.760 --> 00:04:44.870
&gt;&gt; Mike North: And typically you're gonna
have parity between those two things.

73
00:04:44.870 --> 00:04:46.820
In this case,
you're definitely gonna have parity.

74
00:04:46.820 --> 00:04:49.470
There are situations where
it's a little bit different.

75
00:04:49.470 --> 00:04:55.350
For example, if the conversion
from the computed property to what

76
00:04:55.350 --> 00:05:01.968
it's dependent on is lossy, so imagine
we derive from a float and I am int.

77
00:05:01.968 --> 00:05:06.895
And so in that case it can be a little bit
odd because you lose data going on one leg

78
00:05:06.895 --> 00:05:08.837
compared to another.

79
00:05:08.837 --> 00:05:12.071
&gt;&gt; Speaker 3: Punch a developer
that makes a setter that is lossy.

80
00:05:12.071 --> 00:05:15.331
&gt;&gt; Mike North: Sometimes
you can't get away with,

81
00:05:15.331 --> 00:05:18.600
sometimes that's a valid use case.

82
00:05:18.600 --> 00:05:23.160
Like if you're dealing with currencies and
you have thousandths of a dollar, and

83
00:05:23.160 --> 00:05:24.950
you don't want to surface
that to your user.

84
00:05:26.020 --> 00:05:26.827
You-
&gt;&gt; Speaker 3: I would argue

85
00:05:26.827 --> 00:05:29.734
that the setter is the wrong way
to set the value in that case,

86
00:05:29.734 --> 00:05:31.510
cuz there's an implication there.

87
00:05:32.940 --> 00:05:36.390
&gt;&gt; Mike North: It is a far better way
than using something like an observer

88
00:05:36.390 --> 00:05:40.770
which you should, any time you can use a
computed property instead of an observer,

89
00:05:40.770 --> 00:05:43.710
you should absolutely be
using a computed property.

90
00:05:43.710 --> 00:05:45.480
That is a blanket statement.

91
00:05:45.480 --> 00:05:46.750
&gt;&gt; Speaker 3: Okay.

92
00:05:46.750 --> 00:05:48.510
&gt;&gt; Mike North: I am
never wrong about that.

93
00:05:48.510 --> 00:05:50.574
&gt;&gt; Speaker 3: So that's not I got another
awesome use case I wanna show you.

94
00:05:50.574 --> 00:05:52.970
&gt;&gt; Mike North: [LAUGH]
&gt;&gt; Speaker 3: Can you give me one more,

95
00:05:52.970 --> 00:05:58.820
just a little bit about the setter return
value and why not doing that is buggy?

96
00:05:58.820 --> 00:06:01.040
Is there something happening behind
the scenes that you don't know?

97
00:06:01.040 --> 00:06:05.680
Or is it an expectation on
the person consuming the object?

98
00:06:05.680 --> 00:06:09.210
&gt;&gt; Mike North: That is going
a little too much on the internal.

99
00:06:09.210 --> 00:06:10.590
&gt;&gt; Speaker 3: But it's magic.

100
00:06:10.590 --> 00:06:14.620
It's not necessarily about
the person consuming it.

101
00:06:14.620 --> 00:06:17.290
It's about how computed properties work.

102
00:06:17.290 --> 00:06:21.805
&gt;&gt; Mike North: All I'd like to leave you
guys with is follow this convention or

103
00:06:21.805 --> 00:06:24.629
else you will feel a little bit of pain.

104
00:06:24.629 --> 00:06:29.170
&gt;&gt; Speaker 3: Or else the contract says.

105
00:06:29.170 --> 00:06:32.700
&gt;&gt; Mike North: All right so
speaking of the internal.

106
00:06:32.700 --> 00:06:34.050
&gt;&gt; Speaker 2: Do you wanna cover one more?

107
00:06:34.050 --> 00:06:35.430
&gt;&gt; Mike North: Yeah.
&gt;&gt; Speaker 2: They just came up,

108
00:06:35.430 --> 00:06:38.210
is volatile not recommended for
computed properties?

109
00:06:38.210 --> 00:06:39.710
Is there a case when it is recommended?

110
00:06:41.000 --> 00:06:45.340
&gt;&gt; Mike North: I, so
it exists in its public API.

111
00:06:45.340 --> 00:06:50.220
So there probably are use cases.

112
00:06:50.220 --> 00:06:54.000
I can say I have written a huge
amount of code in Ember and

113
00:06:54.000 --> 00:06:57.010
I don't believe I've ever used volatile.

114
00:06:57.010 --> 00:07:01.810
I've never found a really
great use case for it.

115
00:07:01.810 --> 00:07:08.810
I imagine that they exist but they are so
few And I think that if you structure

116
00:07:08.810 --> 00:07:12.670
code a particular way you can usually
steer clear of the need for it entirely.

117
00:07:15.160 --> 00:07:19.270
Just to clarify volatile
means do not cache anything.

118
00:07:19.270 --> 00:07:23.410
Recalculate each and
every time you're asked for a value.

119
00:07:23.410 --> 00:07:29.720
And what I opt for is explicitly
invalidating the computed property.

120
00:07:29.720 --> 00:07:35.790
Wiping out the cache at the right
moment usually in an action rather than

121
00:07:35.790 --> 00:07:43.050
kind of saying I don't wanna manage
caching properly so don't cache at all.

