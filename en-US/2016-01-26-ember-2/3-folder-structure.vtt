WEBVTT

1
00:00:00.000 --> 00:00:04.040
[MUSIC]

2
00:00:04.040 --> 00:00:08.179
&gt;&gt; Mike: So we're gonna jump into
what an app looks like here, and

3
00:00:08.179 --> 00:00:11.468
then we're going to
create an app of our own.

4
00:00:11.468 --> 00:00:17.065
And a common reaction when you get
started is that there are a lot

5
00:00:17.065 --> 00:00:22.359
of folders to deal will,
a lot of folders and a lot of files.

6
00:00:24.490 --> 00:00:26.530
So you will see these folders and

7
00:00:26.530 --> 00:00:31.030
on the top we've got app, which is
the source code for your application.

8
00:00:32.520 --> 00:00:35.040
A lot of time spent in the app folder,
right,

9
00:00:35.040 --> 00:00:39.050
that's where all of
the objects you defined exist.

10
00:00:39.050 --> 00:00:45.026
Vendor is a last resort for assets,
this is where you're writing a shim.

11
00:00:45.026 --> 00:00:49.519
You're trying to get PhantomJS 1.9 working
and it doesn't support function bind, and

12
00:00:49.519 --> 00:00:51.810
this is where you would
put that kind of thing.

13
00:00:53.040 --> 00:00:58.060
Public is sort of a pass-through, it's
a good place for images, things like that.

14
00:00:58.060 --> 00:01:01.130
Whatever you put in here
will be unaltered and

15
00:01:01.130 --> 00:01:04.180
published with the distributed
build of your application.

16
00:01:05.550 --> 00:01:08.880
The tests folder,
it is what it sounds like,

17
00:01:08.880 --> 00:01:11.290
that is where all of your tests exist.

18
00:01:11.290 --> 00:01:16.306
And then the config folder,
there's one file in there that is

19
00:01:16.306 --> 00:01:22.930
a place to define the configuration of
your app on a per-environment basis.

20
00:01:22.930 --> 00:01:27.030
So if you wanted to say,
I want extra logging in development mode,

21
00:01:27.030 --> 00:01:28.600
that is where you would
put this kind of thing.

22
00:01:30.100 --> 00:01:34.850
You'll also see a whole bunch of
other folders, ignore them for now.

23
00:01:34.850 --> 00:01:37.830
These are managed by the tool chain.

24
00:01:37.830 --> 00:01:41.255
They contain things like dependencies,

25
00:01:41.255 --> 00:01:45.130
our bower dependencies,
intermediate build results.

26
00:01:45.130 --> 00:01:48.060
And we can take a look at
what's in this folder but

27
00:01:49.140 --> 00:01:54.345
you will never need to touch it not in
the first year of working on Ember.

28
00:01:54.345 --> 00:01:56.850
I don't expect that you'll
need to take a look in there.

29
00:01:59.140 --> 00:02:02.240
So if you look in the app folder,
which is where-

30
00:02:02.240 --> 00:02:03.570
&gt;&gt; Speaker 2: There was a question.

31
00:02:03.570 --> 00:02:06.005
&gt;&gt; Mike: Yes.
&gt;&gt; Speaker 2: On data persistence.

32
00:02:06.005 --> 00:02:06.592
&gt;&gt; Mike: Yes.

33
00:02:06.592 --> 00:02:11.100
&gt;&gt; Speaker 2: They're asking is Ember Data
built from another DB or its own.

34
00:02:11.100 --> 00:02:13.795
&gt;&gt; Mike: Built from another DB.

35
00:02:13.795 --> 00:02:16.620
&gt;&gt; Speaker 2: I think they're asking,
where does it come from?

36
00:02:16.620 --> 00:02:22.290
&gt;&gt; Mike: So,
Ember Data is not strictly part of Ember,

37
00:02:22.290 --> 00:02:24.220
you can use Ember without Ember Data.

38
00:02:25.510 --> 00:02:27.070
But Ember Data is just

39
00:02:28.210 --> 00:02:33.440
a conventional means of interacting
with a restful service, restful API.

40
00:02:33.440 --> 00:02:35.950
It has some internal
caching built into it so

41
00:02:35.950 --> 00:02:40.640
that if you now a record of this type,
I don't expect it to

42
00:02:40.640 --> 00:02:45.140
change within the time frame of when
the user is using this application.

43
00:02:46.320 --> 00:02:49.910
That is the layer where you can say,
don't refetch this,

44
00:02:49.910 --> 00:02:52.580
just return what you
already have in memory.

45
00:02:52.580 --> 00:02:55.850
It's where you can define
relationships between objects, and

46
00:02:55.850 --> 00:02:58.970
the idea is, with Ember Data,

47
00:02:58.970 --> 00:03:05.380
it gives you the ability to define the
how, in terms of interacting with an API.

48
00:03:05.380 --> 00:03:09.920
And then you can just deal
with manipulating records and

49
00:03:09.920 --> 00:03:12.826
accessing properties on records.

50
00:03:12.826 --> 00:03:16.580
And then the appropriate API requests
will be sent out automatically.

51
00:03:16.580 --> 00:03:19.250
So, it lets you kind of establish
how to interact with the API,

52
00:03:19.250 --> 00:03:21.410
and then you don't have to worry about it.

53
00:03:21.410 --> 00:03:26.690
You just say, tell me how many

54
00:03:26.690 --> 00:03:32.660
items are in this to do list and
it will make the request that's necessary,

55
00:03:32.660 --> 00:03:36.300
lazily fetching that data and
then returning the result to you.

56
00:03:36.300 --> 00:03:39.350
We'll get to that in detail,

57
00:03:39.350 --> 00:03:45.333
it's a little hard to explain
in a one minute answer here.

58
00:03:45.333 --> 00:03:49.529
So looking at what you'll
see in the app folder here,

59
00:03:49.529 --> 00:03:54.938
we have a place for templates,
a place for things called routes which

60
00:03:54.938 --> 00:03:59.895
deal with transitioning to instate,
components, helpers.

61
00:03:59.895 --> 00:04:03.988
So we'll keep referring back to this, but
I wanna show you this just to help you

62
00:04:03.988 --> 00:04:08.469
understand that you're gonna see a lot of
files, you're gonna see a lot of folders.

63
00:04:08.469 --> 00:04:12.095
Each of these has an expressed purpose,
and

64
00:04:12.095 --> 00:04:17.390
the idea here is to have objects
that do something and do it well.

65
00:04:18.870 --> 00:04:23.756
And this means the app
is highly discretized,

66
00:04:23.756 --> 00:04:29.528
there are a lot of objects,
each has a single concern.

67
00:04:29.528 --> 00:04:36.136
And therefore you know that if I need to
massage JSON data I should do it here.

68
00:04:36.136 --> 00:04:41.060
If I need to deal with transitioning
between states I do it here.

69
00:04:41.060 --> 00:04:46.530
So don't be intimidated by the size of the
source code, is sort of the takeaway here.

70
00:04:49.280 --> 00:04:55.494
So this is a great opportunity here to
pause for questions if there are any.

71
00:04:55.494 --> 00:05:00.410
Cuz we're about to jump into
actually how to write the code, yes?

72
00:05:00.410 --> 00:05:04.080
&gt;&gt; Speaker 3: What are your thoughts
on using the pod structure instead of,

73
00:05:04.080 --> 00:05:06.420
I guess, the original directory structure?

74
00:05:07.490 --> 00:05:13.940
&gt;&gt; Mike: Good question, so
pod structure is just, for

75
00:05:13.940 --> 00:05:18.160
those who are unfamiliar, it's a different
way of structuring your source code.

76
00:05:18.160 --> 00:05:23.720
And it would essentially let you,
instead of saying in this case, if

77
00:05:23.720 --> 00:05:29.390
you have a component which is a JavaScript
module that is matched with a template.

78
00:05:29.390 --> 00:05:33.650
Your JavaScript module would be in
the components folder app/components,

79
00:05:33.650 --> 00:05:36.130
your template would be in app/templates.

80
00:05:36.130 --> 00:05:38.840
And so you sort of end up
having to jump around in

81
00:05:38.840 --> 00:05:43.280
order to find these two objects that
really closely relate to each other.

82
00:05:43.280 --> 00:05:47.340
If you set things up in this alternate
way called the pod structure,

83
00:05:47.340 --> 00:05:51.780
you would sort of have a folder
that represents everything that

84
00:05:51.780 --> 00:05:54.410
is concerned with a given component.

85
00:05:54.410 --> 00:05:57.570
And you'd have the JavaScript right
there and the template there.

86
00:05:57.570 --> 00:06:02.670
It has a lot of promise, there are still
a few kinks that we need to work out.

87
00:06:03.780 --> 00:06:09.770
And part of the challenge of dealing
with maintaining a happy path is that

88
00:06:11.290 --> 00:06:16.780
when you try to make things more flexible
or provide an alternate route, it's

89
00:06:16.780 --> 00:06:21.870
a challenge to make sure that we continue
to support this way of doing things.

90
00:06:23.140 --> 00:06:27.090
And at the same time, make available
the new way of doing things.

91
00:06:27.090 --> 00:06:31.850
So for example, there are some issues that
are more of in add-ons where if you have

92
00:06:31.850 --> 00:06:37.710
pods, there are some cases
where you can break things.

93
00:06:37.710 --> 00:06:39.150
Which is why I'm teaching this today,

94
00:06:39.150 --> 00:06:42.830
this is sort of,
pretty much guaranteed to work.

95
00:06:44.210 --> 00:06:49.843
But, if you learn this you could
read a blog article about pods and

96
00:06:49.843 --> 00:06:54.555
all of the knowledge that
we're gonna go over today and

97
00:06:54.555 --> 00:06:58.054
tomorrow will carry over quite neatly.

98
00:06:58.054 --> 00:07:02.404
It's literally just a difference
of where you place certain files,

99
00:07:02.404 --> 00:07:05.480
with really no other impact
on the app as a whole.

100
00:07:07.040 --> 00:07:08.040
Does that make sense?

101
00:07:08.040 --> 00:07:09.330
&gt;&gt; Speaker 2: Yep.

102
00:07:09.330 --> 00:07:11.000
&gt;&gt; Mike: Great.
&gt;&gt; Speaker 2: There's a couple more

103
00:07:11.000 --> 00:07:12.410
questions coming in.

104
00:07:12.410 --> 00:07:17.790
They would like you to explain
the services on the slides.

105
00:07:17.790 --> 00:07:21.380
&gt;&gt; Mike: Yes,
I'm going to punt on that one,

106
00:07:21.380 --> 00:07:25.590
I'll defer that because we have
a section today on services.

107
00:07:25.590 --> 00:07:32.210
We're going to go deep into that, a very
important concept, but we'll dive into it.

108
00:07:32.210 --> 00:07:37.420
&gt;&gt; Speaker 2: Okay, and then are there any
other non-documented folders like utils?

109
00:07:37.420 --> 00:07:43.360
&gt;&gt; Mike: Yes, there are more folders
than what you're seeing here.

110
00:07:44.620 --> 00:07:47.380
And in fact,
when you initially create an app,

111
00:07:47.380 --> 00:07:50.390
you may not even see all of
these folders in your app.

112
00:07:50.390 --> 00:07:54.240
But this is sort of the standard
place to put things.

113
00:07:54.240 --> 00:07:57.770
And as we dive in,
you'll see that naming of modules and

114
00:07:57.770 --> 00:08:01.916
placement in the appropriate
folder is very important in Ember.

115
00:08:01.916 --> 00:08:07.110
Because it automatically looks for
things in certain locations.

116
00:08:07.110 --> 00:08:11.569
And you end up saving a lot of time by not
having to be explicit and specify that

117
00:08:13.030 --> 00:08:18.770
the source code for
the component called social info

118
00:08:18.770 --> 00:08:25.350
is in a ES6 module in the components
folder called social-info.js.

119
00:08:25.350 --> 00:08:30.650
That's one of those decisions that Ember's
trying to remove from the developer

120
00:08:30.650 --> 00:08:33.660
because that's not interesting,
quite frankly.

121
00:08:33.660 --> 00:08:39.920
That has nothing to do with making
your app your app, making it unique.

122
00:08:39.920 --> 00:08:42.650
It's something that we all have
to handle across our apps,

123
00:08:42.650 --> 00:08:44.960
and it's in the sort of common area.

124
00:08:47.090 --> 00:08:49.890
&gt;&gt; Speaker 3: You said pod
structure can break add-ons.

125
00:08:49.890 --> 00:08:52.720
Are you referring to the add-on in
particular if you use pod structure

126
00:08:52.720 --> 00:08:54.260
in your add-on?

127
00:08:54.260 --> 00:08:58.160
Or are you referring to using some add-ons
when you have pod structure in your

128
00:08:58.160 --> 00:09:00.644
application can cause issues.

129
00:09:00.644 --> 00:09:05.232
&gt;&gt; Mike: The issue I'm aware
of is when you consume

130
00:09:05.232 --> 00:09:09.450
an add-on that is organized
with pod structure.

131
00:09:09.450 --> 00:09:11.560
&gt;&gt; Speaker 3: And you have pod structure,
the [INAUDIBLE] right?

132
00:09:11.560 --> 00:09:14.668
&gt;&gt; Mike: Yes, the add-on will
pass its tests and work fine, but

133
00:09:14.668 --> 00:09:18.252
it has to do with the consumption
of it where you can have issues.

134
00:09:18.252 --> 00:09:22.023
And this is tracked and odds are by
the time this course is published,

135
00:09:22.023 --> 00:09:23.853
this issue will have been fixed.

136
00:09:23.853 --> 00:09:27.407
&gt;&gt; Speaker 3: Cuz I thought Stefan was
pushing for pods being the defacto.

137
00:09:27.407 --> 00:09:29.615
&gt;&gt; Mike: Stef is pushing for pods.

138
00:09:29.615 --> 00:09:31.010
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Mike: And

139
00:09:31.010 --> 00:09:35.098
Stef also acknowledges that there
are still things to be worked out.

140
00:09:35.098 --> 00:09:38.460
[LAUGH]
&gt;&gt; Speaker 3: All right.

141
00:09:38.460 --> 00:09:41.735
&gt;&gt; Speaker 2: There's also a question
on can you switch to the pod structures

142
00:09:41.735 --> 00:09:44.425
later?

143
00:09:44.425 --> 00:09:50.770
&gt;&gt; Mike: There, we're going deep
on pods here [LAUGH] so you can.

144
00:09:50.770 --> 00:09:55.608
I'm not aware of any tool that will
automatically switch things over for you.

145
00:09:55.608 --> 00:10:01.430
But like I said, when we're talking about
pod structure versus not pod structure,

146
00:10:01.430 --> 00:10:06.854
it is literally the name of files and
their placement in the folder structure.

147
00:10:06.854 --> 00:10:11.542
So, there is no additional
complexity there.

148
00:10:11.542 --> 00:10:15.914
If you were to decide to go to
the pod structure and rename and

149
00:10:15.914 --> 00:10:21.432
replace your files accordingly,
things in theory should work just fine.

150
00:10:21.432 --> 00:10:22.563
&gt;&gt; Speaker 3: And I use both.

151
00:10:22.563 --> 00:10:24.130
&gt;&gt; Mike: Yeah.

152
00:10:24.130 --> 00:10:26.756
&gt;&gt; Speaker 3: I use pod structure for
all my components, routes,

153
00:10:26.756 --> 00:10:30.769
I use standard structure for things like
serializers and models and adapters.

154
00:10:30.769 --> 00:10:33.142
Because I want to see those
all together in one chunk so

155
00:10:33.142 --> 00:10:34.500
I know what serializers are.

156
00:10:34.500 --> 00:10:38.974
&gt;&gt; Mike: Yep, and
to be honest because it's just an issue of

157
00:10:38.974 --> 00:10:42.617
file placement in the folder hierarchy,

158
00:10:42.617 --> 00:10:47.610
I think that it's much more
useful to dive into what these

159
00:10:47.610 --> 00:10:52.316
objects do rather than how
we structure our folders.

160
00:10:52.316 --> 00:10:55.320
I mean,
that is an ergonomics issue for sure.

161
00:10:55.320 --> 00:10:59.188
But more important is knowing
the best practices within

162
00:10:59.188 --> 00:11:02.491
these different types of objects and
modules.

163
00:11:04.536 --> 00:11:05.700
&gt;&gt; Speaker 2: Do you want me to
keep going with these questions, or

164
00:11:05.700 --> 00:11:06.461
do you wanna wait-
&gt;&gt; Mike: Yeah,

165
00:11:06.461 --> 00:11:08.380
just a couple more.,
&gt;&gt; Speaker 2: This is a more

166
00:11:08.380 --> 00:11:12.350
kind of general one, is it possible
to load parts of a large app?

167
00:11:12.350 --> 00:11:14.830
For example, if an app has a user side and
an admin side,

168
00:11:14.830 --> 00:11:19.538
is it possible to load the user's side for
users and the admin's side for admins.

169
00:11:19.538 --> 00:11:25.700
&gt;&gt; Mike: Currently no, but
in a future version of Ember, and

170
00:11:26.960 --> 00:11:32.970
Stefan made me promise to not
say it would be a 2.X version.

171
00:11:32.970 --> 00:11:38.950
But there is a concept called engines and
if you've used Rails before,

172
00:11:38.950 --> 00:11:43.150
this is exactly what Rails
would call this, an engine.

173
00:11:43.150 --> 00:11:45.899
It's sort of a sub-application,

174
00:11:45.899 --> 00:11:51.150
it would be like if you had a blog that
you could just mount in an application.

175
00:11:51.150 --> 00:11:57.050
And it has a concept baked into it of
a post and a comment and an attachment.

176
00:11:57.050 --> 00:12:02.320
And it's a lot of functionality
including routing and

177
00:12:02.320 --> 00:12:05.230
interacting with an API all encapsulated.

178
00:12:07.030 --> 00:12:08.720
So there is an effort to do this and

179
00:12:08.720 --> 00:12:12.680
it's part of making the story better for
huge apps.

180
00:12:12.680 --> 00:12:15.671
Like at Yahoo when I was
working on their ad platform,

181
00:12:15.671 --> 00:12:18.980
100 people contributing to one project.

182
00:12:18.980 --> 00:12:24.105
It would be great to have modules or
modular app structuel

183
00:12:24.105 --> 00:12:28.607
where people could
individually deploy things.

184
00:12:28.607 --> 00:12:31.396
And you could asynchronously
load the admin section

185
00:12:31.396 --> 00:12:33.928
only in the case where
the user's an admin, and

186
00:12:33.928 --> 00:12:37.960
only when they navigate to a URL
that is the admin section.

187
00:12:37.960 --> 00:12:42.042
So there is awareness of the pain point,
there is a plan.

188
00:12:42.042 --> 00:12:46.458
There is an RFC,
like a speck that has been discussed over

189
00:12:46.458 --> 00:12:50.700
the past couple months,
a lot of lively debate there.

190
00:12:52.470 --> 00:12:56.920
And I know for a fact that there are big
companies that are sponsoring core team

191
00:12:56.920 --> 00:13:01.710
members to develop this
feature in the near term.

