WEBVTT

1
00:00:00.000 --> 00:00:03.831
[MUSIC]

2
00:00:03.831 --> 00:00:07.618
&gt;&gt; Mike North: This is the application
adapter and I've put something extremely

3
00:00:07.618 --> 00:00:11.874
repo specific in it, so as soon as I
start trying to work with other things,

4
00:00:11.874 --> 00:00:16.360
even just a single repo,
this is not gonna work for me anymore.

5
00:00:16.360 --> 00:00:19.592
So I'm gonna create a little bit
more space for myself here and

6
00:00:19.592 --> 00:00:22.840
we'll just wrap this on the second line,
so we can see it all.

7
00:00:24.000 --> 00:00:28.814
And this as well, for kicks.
&gt;&gt; Mike North: So,

8
00:00:28.814 --> 00:00:32.441
I'm gonna put a debugger here,
cuz I'm basically gonna do,

9
00:00:32.441 --> 00:00:36.905
I wanna look at a couple of different
cases based on the primary model class,

10
00:00:36.905 --> 00:00:41.010
which will tell me what kind
of record I'm deserializing.

11
00:00:41.010 --> 00:00:42.350
And the request type.

12
00:00:42.350 --> 00:00:50.086
So if we look at request type.
&gt;&gt; Mike North: This is a query,

13
00:00:50.086 --> 00:00:54.509
and primary model class has this
model name property on it so

14
00:00:54.509 --> 00:00:58.910
I know I'm querying,
which is going for a list.

15
00:00:58.910 --> 00:01:02.190
And I'm looking for
objects of type repo, so

16
00:01:03.290 --> 00:01:07.750
that's pretty much all I need in order
to massage this in a first pass.

17
00:01:08.990 --> 00:01:13.480
The first thing I'm going to do
actually is, I need to find a way of,

18
00:01:13.480 --> 00:01:20.540
in a generalized way I want to make a top
level key to contain either my object,

19
00:01:20.540 --> 00:01:24.490
which is like one repo, or my list of
objects which is the list of repos.

20
00:01:24.490 --> 00:01:27.530
And so here's what I want to do.

21
00:01:27.530 --> 00:01:29.930
I'm going to do a switch.

22
00:01:29.930 --> 00:01:30.460
Request type.

23
00:01:30.460 --> 00:01:36.100
And this is not
Crockford-esque code here but

24
00:01:36.100 --> 00:01:40.131
so [LAUGH].
&gt;&gt; Speaker 2: Specific to these two cases

25
00:01:40.131 --> 00:01:43.090
only right?
&gt;&gt; Mike North: [LAUGH] So,

26
00:01:43.090 --> 00:01:44.749
in the case of a query.

27
00:01:49.910 --> 00:01:53.610
I want to, I want my

28
00:01:57.570 --> 00:02:00.495
so we will make a fairly bump here.

29
00:02:00.495 --> 00:02:07.228
Let top level key so.

30
00:02:24.529 --> 00:02:26.864
&gt;&gt; Mike North: All right, this is just,

31
00:02:26.864 --> 00:02:33.978
obviously with some significant knowledge
of how things work under the hood and

32
00:02:33.978 --> 00:02:41.830
then default, we'll leave a debugger
here just in case we forget something.

33
00:02:41.830 --> 00:02:44.490
And I just want to see how this works.

34
00:02:44.490 --> 00:02:45.020
Awesome.

35
00:02:45.020 --> 00:02:47.910
And then top level key is repos.

36
00:02:47.910 --> 00:02:48.920
Fantastic.

37
00:02:48.920 --> 00:02:52.880
So in the case of a query,
I'm going to pluralize it.

38
00:02:52.880 --> 00:02:54.630
I get repos and we're good to go.

39
00:02:54.630 --> 00:02:57.820
So I can actually change
this to top level key.

40
00:03:00.610 --> 00:03:07.727
And we'll just
&gt;&gt; Mike North: Let it ride.

41
00:03:07.727 --> 00:03:10.010
For now.

42
00:03:10.010 --> 00:03:16.735
We'll add stuff as needed.
&gt;&gt; Mike North: Alright,

43
00:03:16.735 --> 00:03:21.818
so we're at a different break point now,

44
00:03:21.818 --> 00:03:26.764
let me swing back towards the dov tools.

45
00:03:26.764 --> 00:03:28.190
Sorry.

46
00:03:28.190 --> 00:03:32.590
And this isn't going to work.

47
00:03:32.590 --> 00:03:35.240
I have to use the super fancy.

48
00:03:36.870 --> 00:03:40.430
He has six features for
dynamic property keys.

49
00:03:43.150 --> 00:03:45.770
And all this is gonna do,
it's a dynamic key.

50
00:03:45.770 --> 00:03:50.260
So, whatever the value of TLK is,

51
00:03:50.260 --> 00:03:53.880
that's gonna be the property key
there to be a destructuring.

52
00:03:55.350 --> 00:03:57.820
All right.
So, gosh.

53
00:03:57.820 --> 00:04:02.340
Things seem to be okay and I'm gonna
take a look at the ember inspector and

54
00:04:02.340 --> 00:04:05.420
my data tab just became useful and
I can look at repo.

55
00:04:05.420 --> 00:04:06.980
And look at all these.

56
00:04:06.980 --> 00:04:13.830
I got some nice stuff here, except my ids
aren't really what I was hoping to get.

57
00:04:15.580 --> 00:04:20.340
So I happen to know that really all GitHub

58
00:04:20.340 --> 00:04:24.370
objects are gonna have the same thing
where we have to do the old ID thing.

59
00:04:24.370 --> 00:04:26.560
Move that around and shift things.

60
00:04:26.560 --> 00:04:30.276
So, I'm just gonna take care of that here,
payload,

61
00:04:30.276 --> 00:04:36.670
payload.map, and then we'll have rawItem.

62
00:04:40.280 --> 00:04:42.490
Normally there would be a little
bit more trial and error.

63
00:04:42.490 --> 00:04:45.320
This is usually a pretty
iterative process.

64
00:04:56.120 --> 00:04:58.416
And I happen to know that
that condition will work

65
00:04:58.416 --> 00:05:04.882
here.
&gt;&gt; Mike North: And

66
00:05:04.882 --> 00:05:11.691
we'll take a look when that's done.
&gt;&gt; Mike North: And

67
00:05:11.691 --> 00:05:15.461
when we take a peek at one of these.

68
00:05:15.461 --> 00:05:20.304
I want to see that the id is
a resolver and we've got oldId as null.

69
00:05:20.304 --> 00:05:27.195
Looks like we lost that somehow.
&gt;&gt; Mike North: Good thing I checked.

70
00:05:33.723 --> 00:05:37.541
&gt;&gt; Mike North: Sweet and still null.

71
00:05:43.472 --> 00:05:44.500
&gt;&gt; Mike North: Sorry what?

72
00:05:44.500 --> 00:05:45.221
&gt;&gt; Speaker 3: Right,

73
00:05:45.221 --> 00:05:48.564
you can find in my data next again.
&gt;&gt; Mike North: I am but

74
00:05:48.564 --> 00:05:50.220
I should just be getting the value.

75
00:05:50.220 --> 00:05:58.086
I'm going to bank on that.
&gt;&gt; Mike North: All right,

76
00:05:58.086 --> 00:06:04.090
it was a refresh issue where I was stuck
and the code hadn't quite reloaded again.

77
00:06:04.090 --> 00:06:07.430
But here we've got our old ID,
we've done our mapping.

78
00:06:07.430 --> 00:06:13.040
Fantastic, and
this should make things look better.

79
00:06:14.560 --> 00:06:18.380
So now this is sort of generic
handling of at least for

80
00:06:18.380 --> 00:06:22.190
us the things we're interested in.

81
00:06:22.190 --> 00:06:25.100
And you can actually click
under individual record, and

82
00:06:25.100 --> 00:06:28.030
you can probe around,
you can probe the relationships.

83
00:06:28.030 --> 00:06:32.540
See what it's properties are, ember
inspector is really useful for ember data.

84
00:06:32.540 --> 00:06:36.760
Especially if things look funky and
you have to track things down.

85
00:06:36.760 --> 00:06:37.760
Go to tool.

86
00:06:40.620 --> 00:06:48.140
Alright, so let's move along and
go to repo, so we can get rid of this.

87
00:06:49.230 --> 00:06:51.340
Or I'll leave it coming to
that in case we need it.

88
00:06:53.020 --> 00:06:55.503
So the repo route and really we want.

89
00:07:10.799 --> 00:07:13.400
&gt;&gt; Mike North: Get rid of this.

90
00:07:13.400 --> 00:07:18.230
Return this store query record.

91
00:07:18.230 --> 00:07:23.814
So this is, it's light query except I
expect one to come back, not an array.

92
00:07:23.814 --> 00:07:28.930
We want repo and
org id past as the query param there,

93
00:07:28.930 --> 00:07:32.550
and we're gonna need to go into our.

94
00:07:33.780 --> 00:07:38.460
We'll drill in here, we see an error
because there is more work to do.

95
00:07:39.730 --> 00:07:43.000
So the adapter operation failed.

96
00:07:45.200 --> 00:07:46.710
Kind of cryptic.

97
00:07:46.710 --> 00:07:48.949
I do notice that this
URL does not look right.

98
00:07:50.500 --> 00:07:57.585
So we can go back here, grab this sucker.
&gt;&gt; Mike North: Come

99
00:07:57.585 --> 00:08:02.126
on mouse, you can do it.

100
00:08:02.126 --> 00:08:04.870
And we'll go to our application adapter.

101
00:08:06.460 --> 00:08:07.552
And we need a new method.

102
00:08:07.552 --> 00:08:12.579
urlForQueryRecord (query, modelName)

103
00:08:27.470 --> 00:08:30.272
&gt;&gt; Mike North: So this, now we're
customizing what the url will be for

104
00:08:30.272 --> 00:08:36.085
a single repo.
&gt;&gt; Mike North: And

105
00:08:36.085 --> 00:08:40.711
just making sure we,
okay we have to change this query.

106
00:08:40.711 --> 00:08:45.480
Work ID and we need a repo ID.

107
00:08:49.600 --> 00:08:54.527
So we'll go back to our route.

108
00:08:54.527 --> 00:08:57.161
Routes, repo.

109
00:08:57.161 --> 00:09:05.346
Past repod id params.

110
00:09:05.346 --> 00:09:06.100
Save it.

111
00:09:07.280 --> 00:09:09.070
Now our URL should look more reasonable.

112
00:09:13.870 --> 00:09:17.150
Drill in, hitting the debugger.

113
00:09:17.150 --> 00:09:19.759
We left a useful debugging
statement behind.

114
00:09:21.230 --> 00:09:26.540
So, what's happening is the request
type is now query record and

115
00:09:26.540 --> 00:09:29.370
we haven't kind of figured
out a way to handle that.

116
00:09:29.370 --> 00:09:33.170
So this is a singular
thing that has come back,

117
00:09:33.170 --> 00:09:36.260
the top level key totally still applies.

118
00:09:36.260 --> 00:09:41.480
In fact, we just need to make

119
00:09:41.480 --> 00:09:50.000
the singular version Case 'queryRecord'.

120
00:09:50.000 --> 00:09:54.180
Instead of pluralize, it is singularize.

121
00:09:55.500 --> 00:09:58.980
And so,
that's now gonna be repo instead of repos.

122
00:09:58.980 --> 00:10:02.675
And then,
it's basically the same function here.

123
00:10:02.675 --> 00:10:05.661
Except, we just do it
directly on the payload.

124
00:10:20.445 --> 00:10:23.282
&gt;&gt; Mike North: And break.

125
00:10:28.680 --> 00:10:29.282
&gt;&gt; Mike North: All right,

126
00:10:29.282 --> 00:10:30.250
drill into a repo.

127
00:10:31.710 --> 00:10:34.620
Cool.
So watchmen has come back, wait.

128
00:10:35.904 --> 00:10:38.514
Our template is still boring and
hard coded.

129
00:10:48.348 --> 00:10:49.249
&gt;&gt; Mike North: All right,

130
00:10:49.249 --> 00:10:51.593
ember-cli just like our URL,

131
00:10:51.593 --> 00:10:55.560
ember-resolver just like our URL,
all right?

132
00:10:55.560 --> 00:11:00.160
So now we've got data coming back for
real there, I'll prove it to you.

133
00:11:01.580 --> 00:11:04.936
Well, we should see yet one repo here,

134
00:11:04.936 --> 00:11:11.305
right?
&gt;&gt; Mike North: Now it's worth noting,

135
00:11:11.305 --> 00:11:15.300
so if we were on the previous
page with the list of repos,

136
00:11:15.300 --> 00:11:20.145
we could supply the full already loaded,
already fetched record to

137
00:11:20.145 --> 00:11:26.380
the link two helper and the model hook
would not be called on the repo route.

138
00:11:26.380 --> 00:11:31.867
So basically we already have this data,
we can pass the complete package along and

139
00:11:31.867 --> 00:11:35.143
no additional requests
will need to be sent out.

140
00:11:35.143 --> 00:11:39.933
And this can be a significant
load time improvement using

141
00:11:39.933 --> 00:11:42.240
the data you already have.

