WEBVTT

1
00:00:00.000 --> 00:00:04.060
[MUSIC]

2
00:00:04.060 --> 00:00:08.060
&gt;&gt; Mike North: Talking to APIs and
using simple models.

3
00:00:08.060 --> 00:00:13.430
In terms of retrieving data we have this
library I've mentioned called ember data

4
00:00:13.430 --> 00:00:18.010
which is a robust way of
dealing with a restful API.

5
00:00:19.010 --> 00:00:21.370
But we don't necessarily need to use it.

6
00:00:21.370 --> 00:00:26.510
If you can use J query you can
connect to an API with ember,

7
00:00:26.510 --> 00:00:31.660
and the reason is that ultimately we just
care about the concept of a promise,

8
00:00:31.660 --> 00:00:36.580
and at this point in modern web
technology, modern web UI technology.

9
00:00:38.600 --> 00:00:39.880
Everyone's using promises.

10
00:00:39.880 --> 00:00:47.510
So you need to be aware
of setup controller,

11
00:00:47.510 --> 00:00:51.780
we've already used that a couple times
to sort of add something extra to

12
00:00:51.780 --> 00:00:57.041
the context the template is bound to.

13
00:00:57.041 --> 00:00:58.990
And you

14
00:01:00.390 --> 00:01:03.760
just need to be aware that the controller
is the top level contact for this stuff.

15
00:01:03.760 --> 00:01:06.240
And the reason I'm saying this is because,

16
00:01:06.240 --> 00:01:09.770
now we are going to deal with some data
that is a little bit more complicated and

17
00:01:09.770 --> 00:01:13.470
we need to sort of be aware of how to
get it all set up in the right way.

18
00:01:15.130 --> 00:01:18.910
So that we can start using that
instead of our little fixtures and

19
00:01:18.910 --> 00:01:20.189
rays in the model hooks.

20
00:01:22.690 --> 00:01:27.210
So here is an example of a simple

21
00:01:27.210 --> 00:01:31.640
way to retrieve data from an API and I'm
gonna talk you through it line by line.

22
00:01:33.690 --> 00:01:39.290
Hopefully everyone can see
this on the stream here and

23
00:01:39.290 --> 00:01:42.650
if it's difficult check
out the PDF download.

24
00:01:42.650 --> 00:01:49.020
So, in the model hook, the first thing
I'm doing is using this dot model for.

25
00:01:49.020 --> 00:01:50.350
And in this case.

26
00:01:50.350 --> 00:01:56.060
You can see from the API request I'm
making at the bottom of the model hook.

27
00:01:56.060 --> 00:01:58.440
I'm actually getting the list
of repos in this case.

28
00:01:58.440 --> 00:01:59.440
&gt;&gt; Speaker 2: What file are we looking at

29
00:01:59.440 --> 00:02:01.240
right now?
&gt;&gt; Mike North: Good question.

30
00:02:01.240 --> 00:02:05.470
We are looking at the the repo's route.

31
00:02:05.470 --> 00:02:10.560
It's org repos and
it's not committed yet but

32
00:02:10.560 --> 00:02:15.680
this is sort of solving part
of the exercise coming up.

33
00:02:15.680 --> 00:02:19.760
So I'm basically giving
you the solution for

34
00:02:19.760 --> 00:02:24.600
one piece and hopefully we can
apply it broadly to the whole app.

35
00:02:24.600 --> 00:02:30.810
So here we're fetching a list of repos and
if we remember this params segment,

36
00:02:30.810 --> 00:02:36.760
this params object,
that's an argument of the model method.

37
00:02:36.760 --> 00:02:41.710
It's only going to have values from
the dynamic segment that pertained to

38
00:02:41.710 --> 00:02:42.970
this particular route.

39
00:02:42.970 --> 00:02:45.580
And in this case it is the repo ID.

40
00:02:47.380 --> 00:02:50.190
I'm sorry, in this case, it is nothing.

41
00:02:50.190 --> 00:02:50.770
My mistake.

42
00:02:50.770 --> 00:02:53.590
I'm just going to refer
back to our router here.

43
00:02:55.050 --> 00:02:58.140
We're talking about this route here.

44
00:02:58.140 --> 00:03:02.682
No dynamic segment, we're falling back
to the default path which is just

45
00:03:02.682 --> 00:03:08.206
repos.
&gt;&gt; Mike North: So

46
00:03:08.206 --> 00:03:11.386
in order to make this request we need

47
00:03:11.386 --> 00:03:16.540
the ID of the org to which
you know this URL pertains.

48
00:03:16.540 --> 00:03:19.730
And to do that we use the stop model for
and

49
00:03:19.730 --> 00:03:21.760
we're getting the model
from the parent route.

50
00:03:23.200 --> 00:03:24.750
We're getting the ID.

51
00:03:24.750 --> 00:03:28.450
Off of that model and
then we're using that to build

52
00:03:29.490 --> 00:03:34.070
the URL to ask GitHub for this array.

53
00:03:34.070 --> 00:03:38.120
And we're simply returning the promise,
and because this is one of the route's

54
00:03:38.120 --> 00:03:43.910
promise aware hooks by the time
future hooks get called.

55
00:03:43.910 --> 00:03:47.510
And by the time the template
has access to the model or

56
00:03:47.510 --> 00:03:53.150
content property we will be dealing
with an array not a promise.

57
00:03:55.330 --> 00:04:00.090
So I also in an effort to make the orb

58
00:04:00.090 --> 00:04:05.240
object available to this
template I'm actually grabbing

59
00:04:06.590 --> 00:04:10.930
the org from the right route here.

60
00:04:10.930 --> 00:04:14.490
And I'm setting it on the controller
as part of setup controller and

61
00:04:14.490 --> 00:04:19.308
this means that in the repose.hbs template
we'll be able to refer to something like

62
00:04:19.308 --> 00:04:23.609
org.id or org.name or
whatever Gethub happens to give us.

63
00:04:25.520 --> 00:04:28.320
But mainly I just want you guys to refresh

64
00:04:28.320 --> 00:04:33.300
the concept of using setup controller
to sort of add some extra things that

65
00:04:33.300 --> 00:04:37.380
are in addition to the whatever
the model is returning, and

66
00:04:37.380 --> 00:04:42.150
I want you guys to remember model four.
&gt;&gt; Speaker 3: Would

67
00:04:42.150 --> 00:04:47.530
you normally just turn the org and
the RCP hash?

68
00:04:47.530 --> 00:04:51.472
As opposed to using temp control.
&gt;&gt; Mike North: In this case,

69
00:04:51.472 --> 00:04:55.669
because this route is a child route
of something that already has

70
00:04:55.669 --> 00:04:59.322
resolved the org,
I would not wanna ask GitHub again for

71
00:04:59.322 --> 00:05:05.230
that same data.
&gt;&gt; Speaker 3: I'm just saying if Git, so.

72
00:05:05.230 --> 00:05:09.804
This model for org and then put that
as a value in your model hash as

73
00:05:09.804 --> 00:05:14.484
opposed to me using using setupController.
&gt;&gt; Mike North: Yeah we could do that and

74
00:05:14.484 --> 00:05:19.042
then it would be model.org or content.org.
&gt;&gt; Speaker 3: [CROSSTALK] manage

75
00:05:19.042 --> 00:05:21.819
either one?
&gt;&gt; Mike North: It's basically

76
00:05:21.819 --> 00:05:22.960
the same.
&gt;&gt; Speaker 3: Okay.

77
00:05:22.960 --> 00:05:23.840
&gt;&gt; Mike North: It's just what do

78
00:05:23.840 --> 00:05:24.670
you wanna call it?

79
00:05:24.670 --> 00:05:29.260
What seems better in the template as when
you're dealing with something this simple,

80
00:05:29.260 --> 00:05:32.460
that's what I would let
cover in that decision.

81
00:05:32.460 --> 00:05:34.761
Now, if we were dealing with 10 or

82
00:05:34.761 --> 00:05:38.150
12 different things,
I could say probably then.

83
00:05:38.150 --> 00:05:41.300
Then, when you're asking yourself
what's the primary model for

84
00:05:41.300 --> 00:05:43.520
this template,
the answer is not so simple.

85
00:05:43.520 --> 00:05:46.310
It's really the agglomeration
of these 10 things.

86
00:05:46.310 --> 00:05:47.370
But in this case, it's clear.

87
00:05:47.370 --> 00:05:50.980
The list is really what this is all about,
and we're tacking on this extra thing

88
00:05:50.980 --> 00:05:54.400
instead of controller.
&gt;&gt; Speaker 4: Quick question on the line

89
00:05:54.400 --> 00:05:56.580
where you're defining orgName.
&gt;&gt; Mike North: Yes.

90
00:05:56.580 --> 00:05:58.542
&gt;&gt; Speaker 4: They wanna know why you

91
00:05:58.542 --> 00:06:03.630
didn't use .getid instead of .id.
&gt;&gt; Mike North: Good question.

92
00:06:03.630 --> 00:06:10.160
It is because in this case,
it is a plain java script object.

93
00:06:10.160 --> 00:06:12.300
It is not an ember object.

94
00:06:14.056 --> 00:06:18.350
Now, I could, when I go through
the example when I solve the problem.

95
00:06:18.350 --> 00:06:23.155
I will show you how to do something that
doesn't care about whether it's an ember

96
00:06:23.155 --> 00:06:30.662
object or just a plain java script object.
&gt;&gt; Mike North: So,

97
00:06:30.662 --> 00:06:34.160
in the template here,
you can see that we have direct access.

98
00:06:34.160 --> 00:06:36.590
And this is the matching template for
the route we were just looking at.

99
00:06:36.590 --> 00:06:39.730
This is repos.hbs.

100
00:06:39.730 --> 00:06:44.370
We can see that we can access
properties off of org directly,

101
00:06:44.370 --> 00:06:46.750
because of what we did
inside of controller.

102
00:06:46.750 --> 00:06:52.460
And we can iterate over content or
model and build links based on that.

103
00:06:56.880 --> 00:07:00.130
So I wanna be clear that we're
working with simple models and

104
00:07:00.130 --> 00:07:04.560
it, we're talking about like,
at the Ember generator for

105
00:07:04.560 --> 00:07:09.160
generating a model or the models folder.

106
00:07:09.160 --> 00:07:10.810
That is not what we're working with yet.

107
00:07:10.810 --> 00:07:15.180
We are just dealing with a simple
representation of our data for now and

108
00:07:15.180 --> 00:07:18.410
we'll sort of tack on the more complex and

109
00:07:18.410 --> 00:07:20.270
more robust way of
dealing with it later on.

110
00:07:22.070 --> 00:07:24.600
One thing Ember does
care about in order to

111
00:07:26.320 --> 00:07:30.260
align well with the convention
over configuration and stuff.

112
00:07:30.260 --> 00:07:35.770
Is make sure that you have this
property id on the object.

113
00:07:35.770 --> 00:07:41.120
And for the purposes of what we've done so
far an example where id is important

114
00:07:41.120 --> 00:07:46.418
is if we pass the whole
object itself to the link-to

115
00:07:46.418 --> 00:07:52.110
handlebars helper the helper will
grab the property id off of it.

116
00:07:52.110 --> 00:07:55.530
And so, that better be what we want
to appear in our URL when we're

117
00:07:55.530 --> 00:07:56.350
building links.

118
00:07:58.140 --> 00:08:03.310
In this case, when we start talking to the
GitHub API, we will see that what we want

119
00:08:03.310 --> 00:08:09.330
to be in the URL is not what they call
id and we have to do a little massaging.

