WEBVTT

1
00:00:00.000 --> 00:00:03.814
[MUSIC]

2
00:00:03.814 --> 00:00:08.297
&gt;&gt; Mike North: So without further ado,
let's give loading and

3
00:00:08.297 --> 00:00:10.785
substates another shot.

4
00:00:10.785 --> 00:00:16.510
So, the general idea behind
the loading substate is it is a state

5
00:00:16.510 --> 00:00:22.420
within the router, which is a finite state
machine that doesn't correspond to a URL.

6
00:00:22.420 --> 00:00:28.110
And it will be active as long as
the router is waiting for one of the async

7
00:00:29.830 --> 00:00:34.100
hooks on a given route for
its promise to resolve.

8
00:00:34.100 --> 00:00:34.980
So if you're waiting for

9
00:00:34.980 --> 00:00:39.070
data to come back from an API,
you'll be in the loading substate.

10
00:00:40.120 --> 00:00:45.380
By default,
there really is no visual change to the UI

11
00:00:45.380 --> 00:00:50.840
as a result of returning a promise from
one of these async hooks on route.

12
00:00:50.840 --> 00:00:56.760
You'll just see that you end up
waiting on the previous screen and

13
00:00:56.760 --> 00:00:59.870
it sort of hangs there for a second, and
then you'll end up at the destination.

14
00:01:01.890 --> 00:01:06.080
One reason that this could be desirable to
have this be the default is that if you

15
00:01:06.080 --> 00:01:12.130
have very short waits, you don't wanna
see transitions to a blank screen or you

16
00:01:12.130 --> 00:01:17.191
don't want a flash of some kind if you
only have like 150-millisecond wait.

17
00:01:18.400 --> 00:01:21.550
And so by default it's sort of disabled.

18
00:01:21.550 --> 00:01:25.210
All you have to do to take advantage of
the loading substate is add a template

19
00:01:26.380 --> 00:01:30.150
in the correct folder, depending on
where you're pivoting in your tree,

20
00:01:30.150 --> 00:01:32.606
in your tree of you know routes.

21
00:01:32.606 --> 00:01:38.536
And that loading .HPS will be
rendered in the same outlet that

22
00:01:38.536 --> 00:01:46.189
is basically changing it's content
while you're in this loading situation.

23
00:01:50.899 --> 00:01:55.464
&gt;&gt; Mike North: The error substate works
similarly and you can see here this

24
00:01:55.464 --> 00:02:00.850
dash line I have from the error
substate up to the post route.

25
00:02:00.850 --> 00:02:05.248
I just wanted to illustrate that in both
of these cases, for loading and for error,

26
00:02:05.248 --> 00:02:11.890
the easy way to think about
which loading substate or

27
00:02:11.890 --> 00:02:17.800
which error substate you're going to
need to customize for a given situation.

28
00:02:17.800 --> 00:02:21.960
It completely depends on
what you're pivoting on.

29
00:02:23.000 --> 00:02:27.470
What is the node in this tree of routes

30
00:02:27.470 --> 00:02:30.880
that you're actually pivoting
on to make a given transition?

31
00:02:30.880 --> 00:02:38.360
And so here, because we're pivoting from
post index to post comments index and

32
00:02:38.360 --> 00:02:43.320
the highest common ancestor of those
two states is this post route.

33
00:02:43.320 --> 00:02:48.259
It will be the template for this would be

34
00:02:48.259 --> 00:02:54.704
template/post/error.hbs if
that make sense.

35
00:02:59.640 --> 00:03:02.560
&gt;&gt; Mike North: So remember that these
are part of the route hierarchy.

36
00:03:02.560 --> 00:03:09.070
The significance here is that you can get
specific when loading a particular thing.

37
00:03:09.070 --> 00:03:13.620
If it's make sense to handle
a certain loading events or

38
00:03:13.620 --> 00:03:17.029
a certain error events in a way that is
unique to a particular set of routes.

39
00:03:18.920 --> 00:03:22.930
Remember to mentally or

40
00:03:22.930 --> 00:03:27.870
even on paper draw your route hierarchy
because it is quite easy to get confused

41
00:03:27.870 --> 00:03:32.700
about which loading HPS is gonna be
showing up at a particular time.

42
00:03:34.380 --> 00:03:39.730
And also if you have to kick out
to another substate of some sort,

43
00:03:39.730 --> 00:03:45.010
like if you had custom error page,
intermediate transition to.

44
00:03:45.010 --> 00:03:49.940
You can think of this as being another
option in addition to transition to and

45
00:03:49.940 --> 00:03:53.240
replace with which we already
discussed they're ways

46
00:03:53.240 --> 00:03:55.330
of changing your current state.

47
00:03:55.330 --> 00:04:00.290
Intermediate transition to will take
you to a state but not change the URL.

48
00:04:00.290 --> 00:04:03.270
And so
if you wanted a URL to remain the same but

49
00:04:03.270 --> 00:04:08.529
to go to a specific error page in
a specific case, intermediateTransitionTo,

50
00:04:08.529 --> 00:04:13.802
and then the name of that special error
route would be how to go about doing that.

51
00:04:17.261 --> 00:04:18.829
&gt;&gt; Mike North: So the error substate and

52
00:04:18.829 --> 00:04:22.720
it's worth noting the loading
substate does the same thing.

53
00:04:22.720 --> 00:04:28.430
They will fire an action on
the route that you're pivoting on.

54
00:04:30.330 --> 00:04:34.130
So going back to this example
that we were looking at earlier.

55
00:04:34.130 --> 00:04:39.758
Here, the post route is where you're
gonna see an error action being fired or

56
00:04:39.758 --> 00:04:42.017
a loading action being fired.

57
00:04:44.583 --> 00:04:53.500
&gt;&gt; Mike North: Returning true will cause
the action to bubble up to parent routes.

58
00:04:53.500 --> 00:04:58.730
Eventually, you'll reach application
route and the default behavior

59
00:04:58.730 --> 00:05:03.280
for the error action is to
enter the errors substate.

60
00:05:03.280 --> 00:05:10.130
So basically, you have an opportunity
here to handle things specifically

61
00:05:10.130 --> 00:05:13.210
any given route and then to have sort
of a catch all at a higher level.

62
00:05:15.190 --> 00:05:19.230
And if you breakout your gang
of four design patterns book,

63
00:05:19.230 --> 00:05:24.550
this is commonly known as the chain
of responsibility design pattern.

64
00:05:24.550 --> 00:05:29.930
And the idea is that you have several
different objects that have a chance

65
00:05:29.930 --> 00:05:34.970
to handle a given thing and they can

66
00:05:34.970 --> 00:05:39.970
accept responsibility and deal with it or
they can pass it up the chain.

67
00:05:39.970 --> 00:05:42.040
Or in this case, they could do both.

68
00:05:42.040 --> 00:05:44.661
They could do something and
also pass it up the chain.

69
00:05:48.240 --> 00:05:53.350
&gt;&gt; Mike North: So just to illustrate
how that works, if an error happened

70
00:05:53.350 --> 00:05:58.355
in this case,
if we say our model hook promise rejected,

71
00:05:58.355 --> 00:06:04.227
the error action be called here and
then, it would be called here.

72
00:06:04.227 --> 00:06:07.191
And so
typically in your application route,

73
00:06:07.191 --> 00:06:11.794
you don't wanna have some general
more handling of code of some sort.

74
00:06:11.794 --> 00:06:16.562
If you're instrumenting is a bigger place
to start sending things off to whatever

75
00:06:16.562 --> 00:06:18.850
collector you happen to be using...

76
00:06:20.730 --> 00:06:26.980
But for things like the 404 or a common
thing is if you get a 401 or a 403 and

77
00:06:26.980 --> 00:06:32.930
you need to kick a user out to log in page
because their session may have expired.

78
00:06:32.930 --> 00:06:36.160
That is something you can
handle specifically and

79
00:06:36.160 --> 00:06:40.770
sort of let everything else fall through
to a general or handling code path.

80
00:06:40.770 --> 00:06:44.500
Does everyone get how that works?

81
00:06:45.520 --> 00:06:47.420
&gt;&gt; Speaker 2: Is return true a default?

82
00:06:47.420 --> 00:06:48.940
I missed that.

83
00:06:48.940 --> 00:06:51.520
&gt;&gt; Mike North: So,
you have to explicitly return it true.

84
00:06:51.520 --> 00:06:57.190
If you implement an action,
the default is you're handling it.

85
00:06:57.190 --> 00:07:01.690
Returning true is opting into
allow it to continue bubbling up.

86
00:07:01.690 --> 00:07:05.850
&gt;&gt; Speaker 2: If you don't explicitly
define the action, will it bubble?

87
00:07:05.850 --> 00:07:08.560
&gt;&gt; Mike North: If you don't
define an action, it will bubble.

88
00:07:13.920 --> 00:07:16.093
If you define an action and
return nothing at all, it won't bubble.

89
00:07:16.093 --> 00:07:19.620
If you define an action and return true,
your action will run and it will bubble.

90
00:07:19.620 --> 00:07:21.120
So those are the three things.

91
00:07:21.120 --> 00:07:25.330
Do nothing about it, do something about
it and accept total responsibility for

92
00:07:25.330 --> 00:07:29.290
it, do something and allow other things
up to change to do something as well

