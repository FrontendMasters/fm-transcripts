WEBVTT

1
00:00:00.000 --> 00:00:03.867
[MUSIC]

2
00:00:03.867 --> 00:00:08.358
&gt;&gt; Mike North: There are a few flavors
of tests that I want us to be on

3
00:00:08.358 --> 00:00:12.410
the same page with terminology wise.

4
00:00:12.410 --> 00:00:18.016
So unit tests are about testing
algorithmic complexity.

5
00:00:18.016 --> 00:00:23.521
So if you have like this computer
property which we just built which

6
00:00:23.521 --> 00:00:29.339
essentially is values in and value out,
that is great for a unit test.

7
00:00:29.339 --> 00:00:33.742
Because you can list a whole bunch of
different test cases where you know it's

8
00:00:33.742 --> 00:00:35.917
in the array, it's not in the array.

9
00:00:35.917 --> 00:00:40.968
Tests that if it's a matching
the stringified version of

10
00:00:40.968 --> 00:00:46.240
this object is in the array,
but it's a different object.

11
00:00:46.240 --> 00:00:47.940
It's a different instance of the object.

12
00:00:47.940 --> 00:00:49.820
Make sure that works as expected.

13
00:00:49.820 --> 00:00:52.599
This is a great case for you to test.

14
00:00:53.700 --> 00:00:57.060
So integration tests in
the context of the Ember

15
00:00:57.060 --> 00:00:59.940
they really mean component
integration tests.

16
00:00:59.940 --> 00:01:04.700
And what integration tests are all
about is the points of contact

17
00:01:04.700 --> 00:01:06.690
between system components.

18
00:01:06.690 --> 00:01:11.410
So this is also a test that will
be somewhat in isolation and

19
00:01:11.410 --> 00:01:16.720
what that means is when you're
testing our GitHub org component.

20
00:01:18.210 --> 00:01:21.370
The GitHub repo component will
actually not be available for

21
00:01:21.370 --> 00:01:26.440
you to use in templates unless
you specifically say I need this.

22
00:01:26.440 --> 00:01:29.694
By default you're sort of
in an isolated environment,

23
00:01:29.694 --> 00:01:34.126
just trying to reduce the scope of the
scenario down to the point where you can

24
00:01:34.126 --> 00:01:35.735
test this thing by itself.

25
00:01:35.735 --> 00:01:40.513
And have the right way of interacting
with it to simulate the way

26
00:01:40.513 --> 00:01:42.690
you expecting it to be used.

27
00:01:44.010 --> 00:01:46.170
Then finally we have acceptance tests,

28
00:01:46.170 --> 00:01:49.690
which are the same thing
as functional tests.

29
00:01:49.690 --> 00:01:53.910
And this is not testing in isolation,
this is starting your real application up

30
00:01:53.910 --> 00:01:59.496
programmatically rendered in
a div as part of the test runner.

31
00:01:59.496 --> 00:02:05.920
And you're here going to be testing real
workflows and clicking on a link and

32
00:02:05.920 --> 00:02:08.880
making sure the URL is correct and
making sure this is what's on the screen.

33
00:02:09.930 --> 00:02:14.520
These are much slower because
things really have to render and

34
00:02:14.520 --> 00:02:16.680
because JavaScript test.

35
00:02:17.780 --> 00:02:22.180
There's just more overhead
in starting it up and

36
00:02:22.180 --> 00:02:25.320
going through these flows and
just more going on.

37
00:02:25.320 --> 00:02:31.089
But especially when it comes to things
like routes which manage transitions

38
00:02:31.089 --> 00:02:36.415
between state, this is a great place
to get your release confidence.

39
00:02:36.415 --> 00:02:39.089
Because it's the whole thing,
it's the real deal,

40
00:02:39.089 --> 00:02:42.190
it's your application as your
users are going to be using it.

41
00:02:43.230 --> 00:02:48.530
So I tried to put together
a little rule of thumb.

42
00:02:49.760 --> 00:02:54.600
Which thing to reach for, for
a given flavor of Ember object, for

43
00:02:54.600 --> 00:02:57.460
a given entity in the Ember framework.

44
00:02:57.460 --> 00:03:02.430
So utils, models and services,
I tend to test with unit tests and

45
00:03:02.430 --> 00:03:05.060
that's because these things
can really stand on their own.

46
00:03:06.060 --> 00:03:09.761
A model can exist even if there
is no adapter and serializer,

47
00:03:09.761 --> 00:03:12.820
we'll learn about this
when we get to Ember data.

48
00:03:12.820 --> 00:03:15.926
But utils in our case,
it's just a function and

49
00:03:15.926 --> 00:03:18.956
you just need the idea
of a computer property,

50
00:03:18.956 --> 00:03:23.700
potentially just an Ember object,
that you create in your test.

51
00:03:23.700 --> 00:03:26.808
You don't even need to sense
of like having a component or

52
00:03:26.808 --> 00:03:29.970
this higher-level constructs.

53
00:03:29.970 --> 00:03:35.060
Services again, isolated, very simple
objects designed to be used anywhere

54
00:03:35.060 --> 00:03:37.110
as a result they can be used anywhere.

55
00:03:37.110 --> 00:03:39.560
They can be tested anywhere, and
they can be tested in isolation.

56
00:03:40.740 --> 00:03:44.110
Integration tests were
a fairly recent addition.

57
00:03:44.110 --> 00:03:45.660
And I should say things were recently

58
00:03:46.840 --> 00:03:51.370
improved dramatically when it comes
to component integration tests.

59
00:03:51.370 --> 00:03:54.510
They are built for components.

60
00:03:54.510 --> 00:03:56.600
They can be used for other things.

61
00:03:56.600 --> 00:04:01.110
But essentially you provide,
the things that you

62
00:04:01.110 --> 00:04:05.840
provide to set up a scenario and the ways
you have to change the scenario and

63
00:04:05.840 --> 00:04:09.640
listen to what's going on and
check for the presence of things.

64
00:04:09.640 --> 00:04:13.160
They lend themselves extremely
well to component testing.

65
00:04:14.330 --> 00:04:17.140
Routes, I don't even bother
with route unit tests.

66
00:04:17.140 --> 00:04:22.399
It's possible, but
really when it comes to transitioning

67
00:04:22.399 --> 00:04:28.928
between applications states,
I want to be dealing with my application.

68
00:04:28.928 --> 00:04:34.610
It's very hard to test it thoroughly and
completely in a valid way

69
00:04:34.610 --> 00:04:40.406
that is in alignment with how the app
is using a route in a unit test.

70
00:04:40.406 --> 00:04:45.115
And then ember-data stuff, also deal
with that in acceptance tests, and

71
00:04:45.115 --> 00:04:48.327
the reason is I wanna see
that I've visited a page,

72
00:04:48.327 --> 00:04:51.558
that an API request goes out for
a particular data.

73
00:04:51.558 --> 00:04:54.455
I wanna provide a synthetic payload and

74
00:04:54.455 --> 00:04:59.632
like an API response I wanna provide
some JSON for that and then see that

75
00:04:59.632 --> 00:05:05.310
what I expect to render on the screen
is in fact going to be on the screen.

76
00:05:05.310 --> 00:05:07.740
And so,
really you're testing through Ember,

77
00:05:07.740 --> 00:05:12.370
through jQuery,
all the way down to XML HTTP request.

78
00:05:12.370 --> 00:05:20.340
And that is a long chain of things to
be able to capture correctness on.

79
00:05:21.520 --> 00:05:25.819
And the bottom line is data is
driving what's on the screen and

80
00:05:25.819 --> 00:05:29.800
you want to see the whole thing
percolates all the way up.

81
00:05:29.800 --> 00:05:34.585
So one nuance about testing has to do

82
00:05:34.585 --> 00:05:38.898
with this concept of a run loop.

83
00:05:38.898 --> 00:05:43.858
And a run loop is just a prioritize
work queue which saves us

84
00:05:43.858 --> 00:05:47.808
from the expense of having
to update the DOM for

85
00:05:47.808 --> 00:05:53.870
example when each and
every property change event happens.

86
00:05:53.870 --> 00:05:56.640
So in normal mode, we're doing our gets,

87
00:05:56.640 --> 00:06:01.790
we're doing our sets, and
if in on the JavaScript side of the world.

88
00:06:01.790 --> 00:06:06.370
You can do a set and
then a get immediately following that and

89
00:06:06.370 --> 00:06:08.230
the very blossom fact changed.

90
00:06:08.230 --> 00:06:12.010
But things that it has been
bound to in your templates,

91
00:06:12.010 --> 00:06:14.180
those have not changed yet.

92
00:06:14.180 --> 00:06:18.390
That happens after each iteration
of the run that completes.

93
00:06:18.390 --> 00:06:23.290
So, your whole actions If you have
a complicated action handload that sets

94
00:06:23.290 --> 00:06:28.600
a bunch of stuff up, all of that
will take place and then finally,

95
00:06:28.600 --> 00:06:33.040
an update to the DOM will happen,
all at once, A, B and C.

96
00:06:33.040 --> 00:06:37.320
That's actually one change but
that will be property A, B and

97
00:06:37.320 --> 00:06:42.180
C being changed,
that's like one efficient DOM update.

98
00:06:42.180 --> 00:06:46.450
In testing mode, because you want to,
more often than not,

99
00:06:46.450 --> 00:06:50.010
make a property change and see that
this is on, this is what happened.

100
00:06:50.010 --> 00:06:53.870
Make a property change, and
see that this is what happened.

101
00:06:53.870 --> 00:06:58.880
So, we actually have the run loop
turned off in Ember testing mode.

102
00:06:58.880 --> 00:07:03.290
And what that means is there
are certain things like if

103
00:07:03.290 --> 00:07:06.970
you want to schedule some
work to be done later or

104
00:07:06.970 --> 00:07:11.980
you've seen me use ember.run.later
when I was delaying promises.

105
00:07:11.980 --> 00:07:17.470
That kind of stuff you will need to
actually do some extra work to support.

106
00:07:17.470 --> 00:07:20.849
If that's in your code you need to
provide a run loop around your test.

107
00:07:21.960 --> 00:07:24.590
Which is not difficult,
you just need to be aware of it.

108
00:07:24.590 --> 00:07:29.340
But, this is essentially the difference
between running your app

109
00:07:30.770 --> 00:07:33.948
normally versus in testing mode.
&gt;&gt; Speaker 2: Throttling the same way?

110
00:07:33.948 --> 00:07:36.106
Like if you run Throttle.
&gt;&gt; Mike North: Throttle uses the run

111
00:07:36.106 --> 00:07:40.841
loop.
&gt;&gt; Mike North: Running

112
00:07:40.841 --> 00:07:43.020
tests is quite easy.

113
00:07:43.020 --> 00:07:47.424
There are three ways to do it,
really three and a half ways.

114
00:07:47.424 --> 00:07:52.380
localhost:4200/tests, you will see

115
00:07:52.380 --> 00:07:55.320
a queue unit test runner start
running through everything.

116
00:07:56.550 --> 00:07:58.700
And it's hooked up to
live reload of course so

117
00:07:58.700 --> 00:08:03.000
you can leave that open and code and
save until your tests pass.

118
00:08:04.360 --> 00:08:08.741
ember test ci will just run
your tests in the console and

119
00:08:08.741 --> 00:08:15.020
ember test-server,

120
00:08:15.020 --> 00:08:19.380
the test runner we have,
it's actually testem around q unit.

121
00:08:19.380 --> 00:08:25.560
Testem will stay open keep running,
and as you make changes it'll rerun.

122
00:08:25.560 --> 00:08:28.900
So it's sort of like
having your browser open

123
00:08:28.900 --> 00:08:32.910
live reload running the tests over and
over except it's in the console.

124
00:08:32.910 --> 00:08:37.911
So I'm actually going to demonstrate
what that looks like and I expect

125
00:08:37.911 --> 00:08:43.677
we'll have some failing tests because
we haven't been paying attention to it,

126
00:08:43.677 --> 00:08:48.382
shame on us.
&gt;&gt; Mike North: So,

127
00:08:48.382 --> 00:08:52.523
ember test ci,
it's going to build the app, and

128
00:08:52.523 --> 00:08:57.573
then the output is gonna be
essentially a TAP file, which is

129
00:08:57.573 --> 00:09:04.050
exactly what you want to feed into
something like code climate or whatever.

130
00:09:05.480 --> 00:09:11.840
And you can see we've got some okay,
and then we've got some not okay,

131
00:09:11.840 --> 00:09:16.699
so here there's some issue,
a lot of JSHint problems.

132
00:09:17.910 --> 00:09:21.945
So, the other way of doing
it is through the browser.

133
00:09:25.330 --> 00:09:28.560
&gt;&gt; Mike North: And if we go over here.

134
00:09:30.000 --> 00:09:31.897
This is probably the more
common way to do it.

135
00:09:37.673 --> 00:09:39.310
&gt;&gt; Mike North: Get rid of this.

136
00:09:39.310 --> 00:09:44.200
We can hide the past tests which is
great for getting rid of the noise.

137
00:09:44.200 --> 00:09:48.000
So here, it looks like I've
probably got some white space.

138
00:09:48.000 --> 00:09:52.772
It's a little bit different between
what's expected versus what

139
00:09:52.772 --> 00:09:54.654
we're actually seeing.

140
00:09:54.654 --> 00:09:59.826
And a lot of this is just sort
of the basic auto generated

141
00:09:59.826 --> 00:10:04.886
tests no longer fit what my
components are doing, right,

142
00:10:04.886 --> 00:10:10.537
so Ember CLI, it's helpful and
that it gets you started.

143
00:10:10.537 --> 00:10:14.987
But it expects things to work in
a default way and the more you

144
00:10:14.987 --> 00:10:19.667
do to actually build your application out,
things aren't empty anymore.

145
00:10:19.667 --> 00:10:25.177
Things aren't you know,
the component has content in it now.

146
00:10:26.577 --> 00:10:28.809
And the last way just to show you ember

147
00:10:28.809 --> 00:10:34.013
test-server.
&gt;&gt; Mike North: And

148
00:10:34.013 --> 00:10:42.170
I'm gonna make this wider so we don't.
&gt;&gt; Mike North: So

149
00:10:42.170 --> 00:10:47.372
here, similarly you see that
this is continuing to run, and

150
00:10:47.372 --> 00:10:56.695
I can go over here and make a change.
&gt;&gt; Mike North: And it just reran.

151
00:10:57.410 --> 00:10:59.990
And this is nice so
if I was running on five or

152
00:10:59.990 --> 00:11:02.770
six different browsers those would
be in tabs across the top so

153
00:11:02.770 --> 00:11:06.520
you can have like phantom.js running and
Chrome and Safari and whatever.

154
00:11:07.640 --> 00:11:11.352
But this is kind of neat to have up and
running if you don't wanna have browser

155
00:11:11.352 --> 00:11:17.006
tabs all over the place.
&gt;&gt; Mike North: And

156
00:11:17.006 --> 00:11:18.120
hit Q to quit and we're back.

