WEBVTT

1
00:00:00.000 --> 00:00:03.888
[MUSIC]

2
00:00:03.888 --> 00:00:07.630
&gt;&gt; Mike North: So the next topic
we're gonna dive into are routes.

3
00:00:08.880 --> 00:00:12.500
Now if we think of the router
as being a finite state machine.

4
00:00:12.500 --> 00:00:15.920
Routers are what manage
transitions between the states.

5
00:00:15.920 --> 00:00:22.320
And this means they're responsible for
managing the act of loading the data.

6
00:00:23.730 --> 00:00:26.690
The act itself is deferred to another
object we'll talk about later.

7
00:00:27.690 --> 00:00:33.650
The route's responsible for loading
the correct template for the route.

8
00:00:35.550 --> 00:00:38.250
And rendering it in the proper context.

9
00:00:38.250 --> 00:00:40.480
It can also handle user interactions.

10
00:00:40.480 --> 00:00:44.640
So if the user clicks or
types something in or hits enter and

11
00:00:44.640 --> 00:00:47.130
that's a significant event
in your application.

12
00:00:48.220 --> 00:00:52.790
The route objects are capable
of responding to that event.

13
00:00:54.920 --> 00:00:58.160
It's important to have an awareness
of the life cycle of a route.

14
00:00:59.950 --> 00:01:04.270
These hooks here are always
called in this particular order.

15
00:01:04.270 --> 00:01:09.198
And they represent different
important moments that you can

16
00:01:09.198 --> 00:01:13.260
inject your own behavior
into the default route.

17
00:01:13.260 --> 00:01:17.180
You can extend it at
some important locations.

18
00:01:17.180 --> 00:01:21.865
I wanna draw your attention to before
model, model, and after model.

19
00:01:21.865 --> 00:01:26.956
They're what we call promise aware hooks.

20
00:01:26.956 --> 00:01:34.226
And all this means is that if you
return a promise from these hooks.

21
00:01:34.226 --> 00:01:35.859
The router will actually wait for

22
00:01:35.859 --> 00:01:39.390
that promise to resolve before
proceeding to the next step.

23
00:01:39.390 --> 00:01:44.880
So for example, if you make an Ajax call
in the model hook to fetch some data.

24
00:01:46.060 --> 00:01:51.080
You will not continue on to
calling the after model method

25
00:01:52.630 --> 00:01:55.950
until that data has returned and
until that promise has resolved.

26
00:01:55.950 --> 00:02:04.340
BeforeModel is a place where you have
access to this transition object.

27
00:02:04.340 --> 00:02:08.960
It's a great place for any early checking

28
00:02:08.960 --> 00:02:13.190
to see if you should in fact be
entering this route in this context.

29
00:02:13.190 --> 00:02:17.010
A common thing to put here is
see if the user's logged in.

30
00:02:17.010 --> 00:02:20.760
And if they're not,
redirect them out to a login page.

31
00:02:23.020 --> 00:02:25.635
It is a promise aware hook.

32
00:02:25.635 --> 00:02:31.005
So you can do a sync task here in
preparation for loading the model.

33
00:02:31.005 --> 00:02:34.520
For example,
if you had to load a script, or

34
00:02:34.520 --> 00:02:40.030
if you had to potentially make an API
call that they didn't represent

35
00:02:40.030 --> 00:02:45.066
the actual data that you were
using in your rendered template.

36
00:02:45.066 --> 00:02:50.425
But it was necessary to perform some task
before actually retrieving the data.

37
00:02:50.425 --> 00:02:52.060
This is where you would do that.

38
00:02:52.060 --> 00:02:54.280
By default, this is just a no-op.

39
00:02:54.280 --> 00:02:56.900
You pass straight through it.

40
00:02:56.900 --> 00:03:02.243
The model hook is the place you
want to make your API call and

41
00:03:02.243 --> 00:03:07.496
get the object of greatest
importance to your template.

42
00:03:07.496 --> 00:03:12.450
And that is the data,
the record that you're looking at.

43
00:03:12.450 --> 00:03:16.150
So, to align with the example that
we've been working on so far.

44
00:03:17.610 --> 00:03:22.632
This is where you'd make an API request
to GitHub to say, I want an org,

45
00:03:22.632 --> 00:03:27.426
or I want a repository, or
I want a list of repositories in this org.

46
00:03:27.426 --> 00:03:31.795
The default behavior has to do
with Ember data in particular.

47
00:03:31.795 --> 00:03:37.390
And if you format the names of your
dynamic segment parameters in a particular

48
00:03:37.390 --> 00:03:42.135
way, and that particular way
would be something like post_id.

49
00:03:42.135 --> 00:03:47.260
Ember data will try to fetch.

50
00:03:47.260 --> 00:03:51.120
A model of type post with whatever,

51
00:03:52.160 --> 00:03:56.910
whose ID is whatever the value is in that
dynamic segment pulled from the URL.

52
00:03:56.910 --> 00:03:59.496
So be careful when naming
your dynamic segments.

53
00:03:59.496 --> 00:04:03.516
Because you may see some unexpected
behavior if you align with this

54
00:04:03.516 --> 00:04:04.386
convention.

55
00:04:04.386 --> 00:04:07.700
Ember will sort of try to help you out.

56
00:04:07.700 --> 00:04:10.780
And if you're not expecting it,
it can be a little confusing.

57
00:04:12.340 --> 00:04:17.120
So whatever the eventual
value is that model returns.

58
00:04:17.120 --> 00:04:20.980
And this could be the actual value
returned by the function model

59
00:04:20.980 --> 00:04:22.430
in the route, or

60
00:04:22.430 --> 00:04:28.450
it could be whatever the promise
returned by the function model in route.

61
00:04:28.450 --> 00:04:33.350
Whatever that promise resolves to, that
will be available in the corresponding

62
00:04:33.350 --> 00:04:37.840
template that's matched to that route
as this property called content.

63
00:04:37.840 --> 00:04:40.240
And that's an Ember idiom.

64
00:04:40.240 --> 00:04:43.610
You don't want to try to mess
around with that because it

65
00:04:44.760 --> 00:04:46.900
is what people expect to see.

66
00:04:46.900 --> 00:04:48.020
&gt;&gt; Speaker 2: Content versus model?

67
00:04:48.020 --> 00:04:51.360
I always use model instead in templates.

68
00:04:51.360 --> 00:04:54.796
&gt;&gt; Mike North: I believe you
can use either at this point.

69
00:04:54.796 --> 00:04:55.616
&gt;&gt; Speaker 2: This one, or this?

70
00:04:55.616 --> 00:04:56.635
&gt;&gt; Mike North: Yep.
&gt;&gt; Speaker 2: Is there a definite

71
00:04:56.635 --> 00:04:57.257
advantage there?

72
00:04:57.257 --> 00:05:02.330
&gt;&gt; Mike North: I don't know if
there's one advantage or another.

73
00:05:03.410 --> 00:05:06.558
So there used to be this
concept of proxy controllers.

74
00:05:06.558 --> 00:05:10.419
But I don't want to go
in to that because it's.

75
00:05:10.419 --> 00:05:11.320
That is the old way.

76
00:05:11.320 --> 00:05:16.730
I'm deliberately steering clear
of some of the legacy stuff.

77
00:05:16.730 --> 00:05:19.890
So in addition to being
available in the template for

78
00:05:19.890 --> 00:05:23.770
this particular route
has the value content.

79
00:05:24.800 --> 00:05:29.789
Other routes can get access to
the model that you've loaded

80
00:05:29.789 --> 00:05:34.496
using this.modelFor, and
then the name of the route.

81
00:05:34.496 --> 00:05:37.450
So, if for some reason in the route for
loading the repost,

82
00:05:37.450 --> 00:05:39.175
I needed to get the organization.

83
00:05:39.175 --> 00:05:45.206
I needed to get the org,
which is a different route

84
00:05:45.206 --> 00:05:51.105
that's responsible for
retrieving that data.

85
00:05:51.105 --> 00:05:55.786
I could just within my child route get
the model that was resolved in the parent

86
00:05:55.786 --> 00:05:57.525
route and have access to it.

87
00:05:57.525 --> 00:06:01.990
And potentially maybe
build a URL off of it.

88
00:06:01.990 --> 00:06:07.240
Because I might need the orgs to ask for
the repost for that org sneak preview.

89
00:06:09.050 --> 00:06:10.784
RSVP hash so if,

90
00:06:10.784 --> 00:06:16.790
definitely get used to using RSVP.js it
is part of Ember and it comes for free.

91
00:06:16.790 --> 00:06:19.280
It's mounted as a global
on the Ember object.

92
00:06:19.280 --> 00:06:23.657
RSVP hash is very useful
when you have particularly

93
00:06:23.657 --> 00:06:28.455
an object that may be mixed values and
eventual values.

94
00:06:28.455 --> 00:06:31.607
So, maybe an object with
a bunch of keys and

95
00:06:31.607 --> 00:06:34.855
some of the values are numbers and
strings.

96
00:06:34.855 --> 00:06:38.110
But some are promises that eventually
will resolve to something.

97
00:06:38.110 --> 00:06:43.000
RSVP.hash, gives you a single promise.

98
00:06:43.000 --> 00:06:50.540
That one resolved will have
all of your data ready to go.

99
00:06:50.540 --> 00:06:54.090
AfterModel, this is called,
obviously, after the model hook.

100
00:06:55.090 --> 00:06:59.840
This is where you want validation that
depends on the resolved model itself.

101
00:06:59.840 --> 00:07:04.216
So you can imagine a case
where you retrieve a record.

102
00:07:04.216 --> 00:07:10.915
Maybe you've got some, your API makes soft
deleted records available for some reason.

103
00:07:10.915 --> 00:07:12.686
You can still have access to them.

104
00:07:12.686 --> 00:07:16.617
And, you might want to
transition to a different view,

105
00:07:16.617 --> 00:07:20.726
or you might want to handle
something in a particular way.

106
00:07:20.726 --> 00:07:27.896
If in fact, the actual data that
came back has a certain state.

107
00:07:27.896 --> 00:07:29.176
This is where you would put that.

108
00:07:29.176 --> 00:07:32.375
And again, just like beforeModel,
this is a pass through.

109
00:07:32.375 --> 00:07:37.030
If you don't extend and
implement this message yourself.

110
00:07:38.500 --> 00:07:40.940
So that rounds up the promise aware hooks.

111
00:07:40.940 --> 00:07:42.290
And we're gonna look at a couple more.

112
00:07:45.650 --> 00:07:53.606
So redirect, it happens almost at
the exact same time as afterModel.

113
00:07:53.606 --> 00:07:55.405
The reason that you need this.

114
00:07:55.405 --> 00:08:00.498
The reason this is an important
one to know about is

115
00:08:00.498 --> 00:08:06.340
that if you need to redirect and
you do it in afterModel.

116
00:08:06.340 --> 00:08:09.400
You're actually interrupting
the current transition.

117
00:08:09.400 --> 00:08:15.380
And that transition will
basically be run again.

118
00:08:15.380 --> 00:08:17.986
So, imagine the case where we're in org.

119
00:08:17.986 --> 00:08:22.155
And then we redirect to like orgrepos,
a child route.

120
00:08:22.155 --> 00:08:25.668
What'll end up happening is we're
gonna run the beforeModel, Model and

121
00:08:25.668 --> 00:08:27.410
afterModel again.

122
00:08:27.410 --> 00:08:29.634
You basically throw everything out and

123
00:08:29.634 --> 00:08:32.605
start over if you redirect
from within afterModel.

124
00:08:32.605 --> 00:08:35.058
Whereas if you redirect
from within redirect,

125
00:08:35.058 --> 00:08:38.015
the initial transition is
considered to be successful.

126
00:08:38.015 --> 00:08:43.220
And you won't redo the work of this route
that you're actually in right here.

127
00:08:44.560 --> 00:08:48.287
And depending on what you need to do.

128
00:08:48.287 --> 00:08:52.160
That can be detrimental to run

129
00:08:52.160 --> 00:08:56.270
through that process a second time as
you're transitioning into a child route.

130
00:08:56.270 --> 00:08:57.850
Does everyone understand
the difference there?

131
00:08:57.850 --> 00:08:58.810
It's a little nuanced.

132
00:09:00.540 --> 00:09:01.040
All right.

133
00:09:02.660 --> 00:09:07.255
So setup controller I want you guys to
forget the word controller that I'm trying

134
00:09:07.255 --> 00:09:08.886
not to mention controller.

135
00:09:08.886 --> 00:09:12.147
Controller is so Ember 1.X.

136
00:09:12.147 --> 00:09:16.090
It's not Ember 2.X.

137
00:09:16.090 --> 00:09:18.908
This is where you, it's not promise aware.

138
00:09:18.908 --> 00:09:25.570
And it's where you can setup additional
context available to your template.

139
00:09:25.570 --> 00:09:30.754
So say that we want in the repos page to

140
00:09:30.754 --> 00:09:36.480
have org also available in repos.hps.

141
00:09:36.480 --> 00:09:39.520
In setup controller we
can use thisdocmodel4

142
00:09:39.520 --> 00:09:41.287
to grab that model from the parent route.

143
00:09:41.287 --> 00:09:45.660
And we could actually place
it on this controller.

144
00:09:45.660 --> 00:09:50.256
And it would be available in
the template as a second parameter.

145
00:09:50.256 --> 00:09:54.196
So we would use content for
the list of repos.

146
00:09:54.196 --> 00:09:59.025
And then we could use say, org for
the organization those repos belong to.

147
00:09:59.025 --> 00:10:01.640
And we'd have full access to that model.

148
00:10:04.640 --> 00:10:07.680
Make sure you extend this properly.

149
00:10:07.680 --> 00:10:13.450
And that means using super to
call the default functionality.

150
00:10:13.450 --> 00:10:18.279
This does some important
stuff in the base class and

151
00:10:18.279 --> 00:10:22.555
you do not want to omit
that important stuff.

152
00:10:22.555 --> 00:10:26.733
So common bad pattern that
people fall into is, and

153
00:10:26.733 --> 00:10:30.825
I have to say a little bit
about controllers here.

154
00:10:30.825 --> 00:10:32.410
So let's try not to.

155
00:10:32.410 --> 00:10:34.168
So controllers are singletons.

156
00:10:34.168 --> 00:10:36.775
They're singleton's by default.

157
00:10:36.775 --> 00:10:41.511
They stick around for
the entire lifetime of that

158
00:10:41.511 --> 00:10:46.605
users session, or
lower case S session in your app.

159
00:10:46.605 --> 00:10:51.199
And if you find that you have state on
your controllers and you're using setup

160
00:10:51.199 --> 00:10:56.430
controller to kind of zero everything out
and blank it out and reset your state.

161
00:10:56.430 --> 00:10:57.980
This becomes a maintenance challenge.

162
00:10:57.980 --> 00:11:00.660
Cuz every time you add
state to the controller,

163
00:11:00.660 --> 00:11:03.722
you have to make sure you add
the appropriate cleanup logic.

164
00:11:03.722 --> 00:11:06.945
So try not to fall into that trap there.

165
00:11:06.945 --> 00:11:11.355
It's fine if you're just making
an object available consistently.

166
00:11:11.355 --> 00:11:16.695
But if you find that you're setting
things back to zero, blanking things out.

167
00:11:16.695 --> 00:11:20.135
Take a step back and
see if you can find another way to do it.

168
00:11:20.135 --> 00:11:24.750
Cuz that doesn't scale up in terms of
scaling with complexity very well.

