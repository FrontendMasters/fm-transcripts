WEBVTT

1
00:00:00.038 --> 00:00:04.330
[MUSIC]

2
00:00:04.330 --> 00:00:09.162
&gt;&gt; Mike North: Services are a concept
that was added late in the 1.x series of

3
00:00:09.162 --> 00:00:10.540
Ember releases.

4
00:00:11.560 --> 00:00:17.550
And they're an effort to hold
long-living application state and

5
00:00:17.550 --> 00:00:24.326
shared application functionality
in a place that is flexible.

6
00:00:24.326 --> 00:00:30.520
And where you can use dependency injection

7
00:00:30.520 --> 00:00:36.100
to make it available appropriately without
risk of polluting your application.

8
00:00:37.770 --> 00:00:44.000
So, they are created when
your application starts up,

9
00:00:44.000 --> 00:00:50.010
and they're different than other objects
in the Ember world, controllers aside.

10
00:00:50.010 --> 00:00:53.610
In that, everything is sharing
this single instance, right?

11
00:00:53.610 --> 00:00:55.380
Everything is sharing this one service.

12
00:00:56.690 --> 00:00:58.670
They live in the /app/services folder.

13
00:00:59.720 --> 00:01:02.740
And other than that they're
very simple objects, and

14
00:01:02.740 --> 00:01:07.130
it's really up to you to
customize it as you see fit.

15
00:01:07.130 --> 00:01:11.580
So a great use of the service would be for
authentication.

16
00:01:11.580 --> 00:01:16.250
You could have a service that would
actually make a request to an API to

17
00:01:16.250 --> 00:01:17.789
authenticate a user.

18
00:01:17.789 --> 00:01:22.902
And then store the current user as
an object on the service itself so

19
00:01:22.902 --> 00:01:26.555
that it could be made
available to templates and

20
00:01:26.555 --> 00:01:31.560
components, which need to
render an avatar on the screen.

21
00:01:31.560 --> 00:01:37.140
It can be made available to parts of
your application that send API requests,

22
00:01:37.140 --> 00:01:39.210
so they would pass credentials along.

23
00:01:39.210 --> 00:01:41.350
And they could be made
available to routes so

24
00:01:41.350 --> 00:01:47.110
that you would know if you have to kick an
unauthenticated user out to a login page.

25
00:01:47.110 --> 00:01:51.990
But this is a great example where you have
like one concern which is current user and

26
00:01:51.990 --> 00:01:53.900
the need to authenticate someone.

27
00:01:53.900 --> 00:01:59.030
But you have many flavors of object
that need to know about this thing, and

28
00:01:59.030 --> 00:02:01.700
you could use a global to do this.

29
00:02:01.700 --> 00:02:05.960
You could just make something
available to everyone but

30
00:02:05.960 --> 00:02:08.590
that becomes a maintenance nightmare.

31
00:02:08.590 --> 00:02:13.423
And this really lets you be very
specific that this route should

32
00:02:13.423 --> 00:02:17.812
have access to this and
this component and nothing else.

33
00:02:19.836 --> 00:02:22.715
&gt;&gt; Mike North: So
the way you add a service to an object,

34
00:02:22.715 --> 00:02:27.550
you essentially add a service
as a property to an object.

35
00:02:27.550 --> 00:02:35.170
And you just use this Ember.inject.service
method, and what it will return is,

36
00:02:35.170 --> 00:02:40.496
this is essentially a computer property
which we're going to get into in a second.

37
00:02:40.496 --> 00:02:43.190
But it lets you directly access

38
00:02:43.190 --> 00:02:46.380
whatever's on the service from within the
object that this thing is injected onto.

39
00:02:48.050 --> 00:02:53.220
So the name is optional and
I will, in my, I'll

40
00:02:53.220 --> 00:02:57.650
do a little pre-example before we pose our
problem just to illustrate how this works,

41
00:02:59.390 --> 00:03:03.510
there's a nice clean convention that makes
this thing really readable and easy.

42
00:03:04.990 --> 00:03:10.160
And it's lazily evaluated,
which means that

43
00:03:12.240 --> 00:03:15.460
only when you ask for
it is the value actually fetched, and

44
00:03:15.460 --> 00:03:19.270
the work done to actually calculate
what needs to be calculated.

45
00:03:20.620 --> 00:03:24.470
Services work on just
about any Ember object.

46
00:03:24.470 --> 00:03:28.780
So, again, very flexible means of
sharing functionality and state.

47
00:03:30.650 --> 00:03:35.780
And I'm actually gonna stop there
because there's not much to these

48
00:03:35.780 --> 00:03:41.262
except the advised use of them, but
other than that it's a blank slate for

49
00:03:41.262 --> 00:03:44.730
whatever specific functionality is needed.

50
00:03:48.296 --> 00:03:52.629
&gt;&gt; Speaker 2: So they're asking, he's
currently using an initializer to store

51
00:03:52.629 --> 00:03:55.850
and inject something like the system date.

52
00:03:55.850 --> 00:03:57.830
Is this recommended to do in a service?

53
00:03:57.830 --> 00:04:03.010
&gt;&gt; Mike North: Yes, so
the previous the old discouraged way

54
00:04:03.010 --> 00:04:08.320
of doing things was to use another
object in Ember that is a singleton,

55
00:04:08.320 --> 00:04:11.330
and here I am talking about it again,
controllers.

56
00:04:11.330 --> 00:04:15.470
And you would basically create
a controller and use an initializer,

57
00:04:16.560 --> 00:04:21.850
which is something that you use to
customize the startup process of your app.

58
00:04:22.920 --> 00:04:26.900
And it would essentially make it available
on a bunch of different objects.

59
00:04:26.900 --> 00:04:31.339
The fact that you're creating a service
here, like Ember will do it for you,

60
00:04:31.339 --> 00:04:32.718
Ember will start it up.

61
00:04:32.718 --> 00:04:37.267
And instead of using an initializer
to inject this in various places,

62
00:04:37.267 --> 00:04:39.271
you're actually gonna just,

63
00:04:39.271 --> 00:04:43.833
as you define these various objects
that need to know about a service.

64
00:04:43.833 --> 00:04:49.502
You will just say,
I've got this authentication service and

65
00:04:49.502 --> 00:04:54.626
here it is and
it can be done at class construction time,

66
00:04:54.626 --> 00:04:57.583
instead of at app start up time.

67
00:04:57.583 --> 00:05:01.824
And it's a little nuanced but
in terms of reading through code and

68
00:05:01.824 --> 00:05:07.143
understanding, you don't have to go and
check in on some separate piece of code,

69
00:05:07.143 --> 00:05:11.260
is this other thing injecting
something on to me.

70
00:05:11.260 --> 00:05:15.010
It's all available in this one object,

71
00:05:15.010 --> 00:05:18.250
the things that have been injected
on to it, if that makes sense.

72
00:05:18.250 --> 00:05:21.040
So, I can see in the source
code of the route

73
00:05:21.040 --> 00:05:22.560
that I have access to authentication.

74
00:05:22.560 --> 00:05:27.230
I don't have to look through a folder
of a bunch of initializers and

75
00:05:27.230 --> 00:05:30.010
hunt down where someone
has operated on me.

76
00:05:31.910 --> 00:05:34.605
So this is definitely
the advised way of doing it.

77
00:05:37.510 --> 00:05:38.384
&gt;&gt; Mike North: All right.

78
00:05:38.384 --> 00:05:43.329
&gt;&gt; Speaker 2: And then one other question,
can the services access the store?

79
00:05:43.329 --> 00:05:48.731
&gt;&gt; Mike North: Good question.

80
00:05:48.731 --> 00:05:52.366
I will have to investigate that one and
I will come back with the answer.

81
00:05:52.366 --> 00:05:54.621
&gt;&gt; Speaker 3: If they don't
have it available but

82
00:05:54.621 --> 00:05:58.690
you can use an initializer to
inject the store into a service?

83
00:05:58.690 --> 00:05:59.300
&gt;&gt; Mike North: Yes.

84
00:05:59.300 --> 00:06:01.900
&gt;&gt; Speaker 3: But by default it
isn't available into the service.

85
00:06:01.900 --> 00:06:02.430
&gt;&gt; Mike North: Yes.

86
00:06:02.430 --> 00:06:03.970
&gt;&gt; Speaker 4: The store has
a service into a service?

87
00:06:05.470 --> 00:06:07.610
&gt;&gt; Mike North: You have the store,
I'm not sure,

88
00:06:07.610 --> 00:06:09.530
in it's current form,
whether the store is a service.

89
00:06:09.530 --> 00:06:11.030
&gt;&gt; Speaker 3: The store is, in general.

90
00:06:11.030 --> 00:06:14.000
&gt;&gt; Mike North: Okay, so you can inject-
&gt;&gt; Speaker 3: You can inject a service

91
00:06:14.000 --> 00:06:14.840
into a service, and

92
00:06:14.840 --> 00:06:19.740
you can inject the store as a service
into anything that you want to.

93
00:06:19.740 --> 00:06:20.750
&gt;&gt; Mike North: Interesting.

94
00:06:20.750 --> 00:06:25.490
Yeah, the idea is to get away from
initializers doing the injection itself,

95
00:06:26.630 --> 00:06:32.430
and to really rely on the common
idiom of have the singleton.

96
00:06:32.430 --> 00:06:34.820
It needs to be made available on objects.

97
00:06:34.820 --> 00:06:40.220
And then there's the benefit of moving
the actual description of the injection

98
00:06:40.220 --> 00:06:43.280
act itself and
the object that you're injecting on to.

99
00:06:43.280 --> 00:06:47.739
So that you can see it and you can manage
it there rather than having to worry about

100
00:06:48.850 --> 00:06:52.400
searching for some container string and

101
00:06:52.400 --> 00:06:55.910
all of the hoops you have to jump through,
the old way of doing things.

