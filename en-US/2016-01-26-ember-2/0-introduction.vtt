WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:39.346 --> 00:00:43.340
&gt;&gt; Speaker 1: So, I'm Mike and
I'm gonna teach you all about Ember today.

3
00:00:43.340 --> 00:00:46.292
A little about me, so
you know my perspective.

4
00:00:46.292 --> 00:00:51.501
I'm an Ember.js, Ember-cli,
and Ember-data contributor.

5
00:00:51.501 --> 00:00:58.410
I have, in varying degrees, touched many
of the things in the Ember ecosystem.

6
00:00:58.410 --> 00:01:01.810
Right now, I'm the CTO at a company
called Levanto Financial.

7
00:01:02.970 --> 00:01:06.892
And until about a month ago
when I moved to Levanto,

8
00:01:06.892 --> 00:01:11.282
I was the UI Architect for
Yahoo's Ads &amp; Data division.

9
00:01:11.282 --> 00:01:15.718
And I don't know if you guys keep
up with this kind of thing, but

10
00:01:15.718 --> 00:01:18.270
Yahoo is not using YUI anymore.

11
00:01:18.270 --> 00:01:23.319
Ember is a big part of what has displaced

12
00:01:23.319 --> 00:01:27.909
YUI as the go-to framework there.

13
00:01:27.909 --> 00:01:35.119
And hopefully I had a big part in
the adoption of Ember at Yahoo.

14
00:01:35.119 --> 00:01:38.670
I also organize a meetup called
Modern Web UI, the aim of which

15
00:01:38.670 --> 00:01:43.680
is to foster cross-pollination between
all of the framework communities so

16
00:01:43.680 --> 00:01:49.200
we don't end up in our own little silos,
telling each other the same ideas.

17
00:01:49.200 --> 00:01:52.600
And I do a lot of open source work
as well, especially in the Ember and

18
00:01:52.600 --> 00:01:54.225
JavaScript ecosystems.

19
00:01:55.340 --> 00:01:59.970
So different kinds of developers have
the thing they love about programming.

20
00:01:59.970 --> 00:02:06.080
Some people love efficiency and
making an algorithm 10% faster,

21
00:02:06.080 --> 00:02:10.810
or handling all of the edge and
corner cases.

22
00:02:10.810 --> 00:02:13.540
For me, it's productivity and
composability.

23
00:02:13.540 --> 00:02:17.985
I think one interesting thing about
programming is that what you did for

24
00:02:17.985 --> 00:02:21.550
your last project,
you can take with you almost for free, and

25
00:02:21.550 --> 00:02:24.010
use that as a building block for
what comes next.

26
00:02:24.010 --> 00:02:26.920
If you're a construction worker,
you can't do that.

27
00:02:28.380 --> 00:02:32.140
This is something where you can
keep building and building, and

28
00:02:32.140 --> 00:02:35.470
other people's work helps
you get started faster.

29
00:02:35.470 --> 00:02:39.196
And so I like to kind of run with that.

30
00:02:39.196 --> 00:02:43.680
And my background, my education is
actually not in computer science.

31
00:02:43.680 --> 00:02:47.189
I consider myself a product guy
who has been coding for 15 years.

32
00:02:48.300 --> 00:02:52.790
So I love getting things out
there quickly, getting feedback.

33
00:02:52.790 --> 00:02:56.740
And Ember is very well-suited for
that kind of thing, for

34
00:02:56.740 --> 00:03:01.777
getting off the ground as quickly
as possible, building things in and

35
00:03:01.777 --> 00:03:05.669
sort of to make that experience
more robust over time.

36
00:03:06.920 --> 00:03:09.370
And I hope by the end of this
course you guys will see that

37
00:03:10.650 --> 00:03:12.050
Ember is particularly good at that.

38
00:03:13.490 --> 00:03:19.000
Another thing you should know is that I
am very active in writing Ember addons,

39
00:03:19.000 --> 00:03:22.480
which are the plugin architecture for
Ember.

40
00:03:22.480 --> 00:03:24.699
This is an easy way to
bring something like

41
00:03:26.030 --> 00:03:30.190
Google's material design
into your app in 60 seconds.

42
00:03:31.942 --> 00:03:36.330
And I'm not sure if I
have the most addons or

43
00:03:36.330 --> 00:03:39.170
the best addons, but
I know I have a lot of addons.

44
00:03:39.170 --> 00:03:44.090
And whenever I build a product or
take on a project,

45
00:03:44.090 --> 00:03:47.630
I'm likely to spit out one or
two of these things along the way

46
00:03:47.630 --> 00:03:51.030
in an effort to kind of
keep the ecosystem going.

47
00:03:52.930 --> 00:03:56.480
So in terms of what we're gonna
cover through this course,

48
00:03:56.480 --> 00:03:59.250
it's a little different that what you
read online, and I think it's better.

49
00:04:01.100 --> 00:04:05.160
The focus here is gonna be on making sure
you guys understand the framework and

50
00:04:05.160 --> 00:04:10.080
some of the core libraries that you really

51
00:04:10.080 --> 00:04:13.770
would have a lot of trouble
building a complex app without.

52
00:04:13.770 --> 00:04:18.710
I want you to understand those very,
very well, rather than touch on,

53
00:04:18.710 --> 00:04:22.110
at a very superficial level,
a bunch of other things.

54
00:04:22.110 --> 00:04:26.660
So first, we're going to talk a little
bit about Ember's philosophy and

55
00:04:26.660 --> 00:04:27.510
point of view.

56
00:04:27.510 --> 00:04:30.190
So how is it different from Angular?

57
00:04:30.190 --> 00:04:32.300
Why do we need another web framework?

58
00:04:32.300 --> 00:04:35.450
Good questions, and
I hope I have some answers for you.

59
00:04:35.450 --> 00:04:39.140
I wanna set some goals so
that we know what we're aiming to do,

60
00:04:39.140 --> 00:04:42.020
what I'm aiming to have you
guys able to walk away with.

61
00:04:43.100 --> 00:04:46.520
We'll discuss the structure of
an app in terms of the source code,

62
00:04:46.520 --> 00:04:48.240
where do you look for what.

63
00:04:48.240 --> 00:04:52.900
And then get into templating and
the router, and then we'll start coding.

64
00:04:52.900 --> 00:04:57.210
I hope we can get coding
in a little over an hour,

65
00:04:57.210 --> 00:05:00.890
but definitely before
our first break here.

66
00:05:02.330 --> 00:05:04.170
And we'll keep referring to this here.

67
00:05:04.170 --> 00:05:08.760
But just to give you an idea of what's
coming, we're gonna talk about routing,

68
00:05:08.760 --> 00:05:14.550
which is sort of the mapping of URL
driving state throughout your application.

69
00:05:15.870 --> 00:05:20.500
We'll talk about where to
store state on your app,

70
00:05:20.500 --> 00:05:23.760
where it's okay to store state and
where you should avoid storing state.

71
00:05:23.760 --> 00:05:27.830
We'll deal with talking to APIs, today
we're going to talk to the Github API.

72
00:05:27.830 --> 00:05:31.610
We're going to be listing out
Github organizations, and

73
00:05:31.610 --> 00:05:35.350
repositories, and
issues tracked in those repositories,

74
00:05:35.350 --> 00:05:40.870
to give you an idea of,
if you were working at GitHub or

75
00:05:40.870 --> 00:05:46.260
had an API like that, how do you build
this hierarchy of data on the client side?

76
00:05:46.260 --> 00:05:47.720
And how do you display that reasonably?

77
00:05:50.160 --> 00:05:54.040
The highlight of the afternoon
will probably be components,

78
00:05:54.040 --> 00:05:55.270
which are a lot of fun.

79
00:05:55.270 --> 00:05:59.820
That's your ability to
define an expressive way of

80
00:05:59.820 --> 00:06:05.000
composing user interfaces,
using your own building blocks.

81
00:06:05.000 --> 00:06:08.780
So we're gonna build a bunch
of different components.

82
00:06:08.780 --> 00:06:11.810
We're gonna talk about
computer properties, and

83
00:06:11.810 --> 00:06:14.400
that should take us to the end of the day.

