WEBVTT

1
00:00:00.000 --> 00:00:03.954
[MUSIC]

2
00:00:03.954 --> 00:00:05.910
&gt;&gt; Mike North: Let's move onto actions.

3
00:00:05.910 --> 00:00:12.610
And again,
I'm gonna go through a small silly example

4
00:00:12.610 --> 00:00:16.750
just to illustrate how these things fit
together before I set you guys loose next.

5
00:00:16.750 --> 00:00:19.870
So there will be plenty of opportunity
to see how these things work for

6
00:00:19.870 --> 00:00:20.540
real in code.

7
00:00:22.380 --> 00:00:27.090
So actions are your go to thing for
handling user interaction.

8
00:00:28.200 --> 00:00:32.760
You've heard the term
data-binding which is like when

9
00:00:32.760 --> 00:00:36.210
you've already used data-binding.

10
00:00:36.210 --> 00:00:42.220
When you're using each and then you're
printing out and your linked to helper,

11
00:00:42.220 --> 00:00:49.750
you're using the org id as the text for
your links.

12
00:00:49.750 --> 00:00:55.240
If you were to change that JavaScript
object, there would be data-binding there.

13
00:00:56.530 --> 00:01:01.840
So, and the HTML would update
automatically is the point.

14
00:01:01.840 --> 00:01:06.550
So action-binding is another way
of connecting template with code.

15
00:01:06.550 --> 00:01:12.340
And in this case,
you're binding an act that the user

16
00:01:12.340 --> 00:01:17.840
performs on a DOM element or
a component, and potentially you can

17
00:01:17.840 --> 00:01:22.354
programmatically fire off actions and
have them received somewhere.

18
00:01:22.354 --> 00:01:27.720
But you can essentially connect
an action handler with an action,

19
00:01:27.720 --> 00:01:30.580
and the default action is click.

20
00:01:30.580 --> 00:01:34.870
So if, on the lower left here,
we set up a span and

21
00:01:34.870 --> 00:01:39.061
used the action handlebars
helper in this way,

22
00:01:39.061 --> 00:01:43.696
it will fire off an action
called thingWasClicked.

23
00:01:43.696 --> 00:01:49.393
And then in a route, we have this
actions object that will contain

24
00:01:49.393 --> 00:01:54.782
in all actions that this route
is inter-designed to handle,

25
00:01:54.782 --> 00:01:58.220
and it'll send off an alert like this.

26
00:02:01.850 --> 00:02:07.010
So, similarly, to link to,
where you can pass data

27
00:02:07.010 --> 00:02:12.120
as the last parameter, in the case of link
to, it's populating dynamic segments.

28
00:02:13.640 --> 00:02:17.276
Here, the third through nth arguments will

29
00:02:17.276 --> 00:02:22.560
simply be passed along as
arguments to the action handler.

30
00:02:22.560 --> 00:02:27.930
So, here we're passing
123 in the template file.

31
00:02:27.930 --> 00:02:33.180
And you can see that we can accept
an argument in the action handler and

32
00:02:33.180 --> 00:02:34.530
deal with that.

33
00:02:34.530 --> 00:02:40.810
And so you can imagine if we were, say,
within each loop of the organization list,

34
00:02:40.810 --> 00:02:44.690
we wanted an action that would
operate on an organization,

35
00:02:44.690 --> 00:02:48.790
we need the action handler to know which
organization are we talking about.

36
00:02:48.790 --> 00:02:54.190
And so this is how you would pass
that data along in order to have

37
00:02:54.190 --> 00:02:59.510
the right context to deal with it.

38
00:02:59.510 --> 00:03:00.680
Everyone set on actions?

39
00:03:02.360 --> 00:03:07.640
So I should also point out
that actions are heavily

40
00:03:07.640 --> 00:03:12.470
emphasized in the 2.0 latest Ember idioms.

41
00:03:15.020 --> 00:03:21.940
If you use data-binding to try to handle
user interactions like if you make heavy,

42
00:03:21.940 --> 00:03:27.760
heavy use of data-binding, you can
end up with some sloshing problems,

43
00:03:27.760 --> 00:03:32.950
where you lose the context
of what the user was doing.

44
00:03:32.950 --> 00:03:37.720
You just know that instead of knowing
that the user clicked on a checkbox,

45
00:03:37.720 --> 00:03:41.540
you just know that this property
was set from true to false.

46
00:03:41.540 --> 00:03:45.342
But you don't know whether it was done
programmatically or via a user clicking,

47
00:03:45.342 --> 00:03:50.236
so you get disconnected
from the user's behavior.

48
00:03:50.236 --> 00:03:55.652
And that kind of implementation
in aggregate can cause

49
00:03:55.652 --> 00:04:01.210
some difficult to deal
with performance problems.

50
00:04:01.210 --> 00:04:06.410
So what we say, the catch phrase is,
actions up, bindings down.

51
00:04:06.410 --> 00:04:14.160
And that means actions should
be driving changes to data.

52
00:04:14.160 --> 00:04:18.680
When the user clicks, and that means do
something, the action is the mechanism for

53
00:04:18.680 --> 00:04:19.900
handling that.

54
00:04:19.900 --> 00:04:25.390
And then for a change in data,
percolating back up and

55
00:04:25.390 --> 00:04:29.800
changing what's displayed on the screen,
that is what you use data-bindings for.

56
00:04:29.800 --> 00:04:35.790
Does that make sense?
&gt;&gt; Speaker 2: They're gonna ask if

57
00:04:35.790 --> 00:04:41.350
you were gonna talk about closure actions?
&gt;&gt; Mike North: I'm

58
00:04:41.350 --> 00:04:43.560
not going to talk about this right now.

59
00:04:43.560 --> 00:04:47.050
I'm trying to get three simple chunks
in place so that we can get on,

60
00:04:47.050 --> 00:04:48.470
get you guys coding again.

