WEBVTT

1
00:00:00.112 --> 00:00:04.193
[MUSIC]

2
00:00:04.193 --> 00:00:06.570
&gt;&gt; Mike North: Any questions?
&gt;&gt; Speaker 2: We could have avoided their

3
00:00:06.570 --> 00:00:11.830
change the way that the favorite things
work, but I'm wondering if it's possible

4
00:00:11.830 --> 00:00:16.410
by moving the handling of adding to
[COUGH] units into the components itself.

5
00:00:18.150 --> 00:00:21.750
So, that we wouldn't pass
the favorite ends and [INAUDIBLE]

6
00:00:21.750 --> 00:00:22.820
&gt;&gt; Mike North: Very good question there.

7
00:00:23.840 --> 00:00:25.980
Good good point to raise.

8
00:00:25.980 --> 00:00:33.360
So because I am
a compulsability nerd I am very

9
00:00:33.360 --> 00:00:36.140
careful about doing what you just said.
&gt;&gt; Speaker 2: Except I would say

10
00:00:36.140 --> 00:00:37.300
that's less compulsive

11
00:00:38.390 --> 00:00:41.250
because you're smearing across both.
&gt;&gt; Mike North: So

12
00:00:41.250 --> 00:00:47.550
I want my components to be a way of
viewing and interacting with state.

13
00:00:47.550 --> 00:00:49.929
I don't want them to
actually be responsible for

14
00:00:49.929 --> 00:00:54.668
changing state.
&gt;&gt; Mike North: The idiomatic way of

15
00:00:54.668 --> 00:00:59.860
doing this is to have an action in
the outside world be responsible for that.

16
00:00:59.860 --> 00:01:05.340
And the reason is that as you
start having more components and

17
00:01:05.340 --> 00:01:07.220
you're passing the same data.

18
00:01:07.220 --> 00:01:11.690
It's shared across viewing your repo and
maybe you have a side bar with

19
00:01:11.690 --> 00:01:16.400
your favorite stuff and
it's all bound to the same data,

20
00:01:16.400 --> 00:01:21.010
you don't really want to have all of
these things being able to independently

21
00:01:22.850 --> 00:01:27.785
change it on their own.
&gt;&gt; Speaker 3: So the thing is the doesn't

22
00:01:27.785 --> 00:01:32.490
seem like the right spot for that either.

23
00:01:32.490 --> 00:01:34.810
Unless maybe, okay yeah, okay [INAUDIBLE].
&gt;&gt; Mike North: It's a slightly contrived

24
00:01:34.810 --> 00:01:37.260
example but I'm deliberately.

25
00:01:37.260 --> 00:01:41.120
We could absolutely inject
the service onto this component.

26
00:01:41.120 --> 00:01:47.610
But my belief is that you should almost

27
00:01:47.610 --> 00:01:52.630
look at the component like you would
look at the text input example there.

28
00:01:52.630 --> 00:01:58.170
Where obviously you don't have
data binding with pure HTML but

29
00:01:59.200 --> 00:02:02.580
It's just there to provide a means
of interacting with the state.

30
00:02:03.820 --> 00:02:06.210
And that's really
the primary purpose of this,

31
00:02:06.210 --> 00:02:09.650
to surface it to the user to give
them a means of doing something.

32
00:02:09.650 --> 00:02:11.730
But then when it comes to
actually changing things,

33
00:02:11.730 --> 00:02:15.980
like if we were dealing with records,
I wouldn't want a component to actually

34
00:02:15.980 --> 00:02:20.990
Persist something on it's own.
&gt;&gt; Speaker 4: So, maybe

35
00:02:20.990 --> 00:02:24.600
a user question and I'm fine if you really
wanna talk with this one more offline,

36
00:02:24.600 --> 00:02:29.400
but say you got a component
that takes in model and

37
00:02:29.400 --> 00:02:35.320
some related models as a property and
you wanna keep that...

38
00:02:35.320 --> 00:02:38.420
The one way binding scenario.

39
00:02:38.420 --> 00:02:42.230
How do you duplicate that was
model in the component and

40
00:02:42.230 --> 00:02:45.400
then like urge changes you've
made back with your model?

41
00:02:45.400 --> 00:02:47.910
Like there's a built in
ember way to do that?

42
00:02:49.350 --> 00:02:51.620
&gt;&gt; Mike North: So you want to establish

43
00:02:52.950 --> 00:02:57.130
a one way binding into a component.
&gt;&gt; Speaker 4: So I pass in model I deal

44
00:02:57.130 --> 00:03:00.000
with this address model and component.
&gt;&gt; Mike North: Can you give me

45
00:03:00.000 --> 00:03:04.900
a concrete example?
&gt;&gt; Speaker 4: I can show you a concrete

46
00:03:05.910 --> 00:03:07.850
example can I explain it though.
&gt;&gt; Mike North: So

47
00:03:07.850 --> 00:03:12.600
when we talk about one way
binding the idea is usually that

48
00:03:12.600 --> 00:03:16.120
you just want to render something on the
screen and you don't expect it to change.

49
00:03:17.770 --> 00:03:19.530
That's the typical use case.

50
00:03:19.530 --> 00:03:24.930
And you're sort of opting into a cheaper
way of establishing data bounding

51
00:03:24.930 --> 00:03:26.490
because you don't need two way bounding.

52
00:03:27.860 --> 00:03:32.640
And I would have to understand exactly
what you're trying to do because your

53
00:03:32.640 --> 00:03:34.950
question had baked into it.

54
00:03:34.950 --> 00:03:36.700
How do I get back in sync?

55
00:03:36.700 --> 00:03:41.050
And to me, that says, well, it's probably
not one way binding that you want,

56
00:03:41.050 --> 00:03:42.250
in this case.

57
00:03:42.250 --> 00:03:44.030
It's probably two way binding.

58
00:03:44.030 --> 00:03:48.905
And if it is, but I want to be a purist
&gt;&gt; Speaker 4: If I can and

59
00:03:48.905 --> 00:03:50.875
deal with it even.
&gt;&gt; Mike North: Both tools exist and

60
00:03:50.875 --> 00:03:52.555
both have the appropriate use.

61
00:03:52.555 --> 00:03:58.795
The major pivot from Ember 1.x to
sort of the 2.0 idioms and what we'll

62
00:03:58.795 --> 00:04:03.715
see as a new flavor of component comes
out which I'll talk about later today,

63
00:04:04.745 --> 00:04:09.659
that will be sort of a parallel
track to what I've taught you here.

64
00:04:10.940 --> 00:04:13.460
The idea is you'll have one
way bonding by default.

65
00:04:13.460 --> 00:04:18.640
You'll have to opt in to two way
bonding and the reasoning behind that,

66
00:04:18.640 --> 00:04:23.240
is that very often two
way bonding is overkill.

67
00:04:23.240 --> 00:04:26.049
It's overkill and
overly expensive for what you need.

68
00:04:27.160 --> 00:04:32.550
In this case I probably don't need
to be updating the star count and

69
00:04:32.550 --> 00:04:36.380
the repo count I don't need to connect
back to the data cuz I'm just rendering it

70
00:04:36.380 --> 00:04:40.910
on the screen it's not something that's
gonna be changing in the short term so

71
00:04:40.910 --> 00:04:44.760
one way of binding would be
totally fine to get away with.

72
00:04:47.010 --> 00:04:49.490
So.
&gt;&gt; Speaker 5: [INAUDIBLE]

73
00:04:49.490 --> 00:04:50.083
&gt;&gt; Mike North: Yeah, so

74
00:04:50.083 --> 00:04:53.054
I'll make sure to touch
on that when I talk about

75
00:04:53.054 --> 00:04:57.882
sort of the future of Ember components as
I get into the forward looking part of

76
00:04:57.882 --> 00:05:02.708
today.
&gt;&gt; Speaker 6: I'm

77
00:05:02.708 --> 00:05:05.356
just curious about best practices
are on documenting past

78
00:05:05.356 --> 00:05:08.670
in attributes versus internal
computer properties.

79
00:05:08.670 --> 00:05:12.200
Cuz I've been in scenarios before where,
somebody has passed in a property which

80
00:05:12.200 --> 00:05:16.220
has collided with an internal
property name of the component.

81
00:05:16.220 --> 00:05:19.340
What's the best way to kinda differentiate
between what properties are able to be

82
00:05:19.340 --> 00:05:22.730
passed in versus the internal
component state?

83
00:05:22.730 --> 00:05:23.920
&gt;&gt; Mike North: I see what you're saying.

84
00:05:23.920 --> 00:05:27.440
So, that's a very good point there.

85
00:05:27.440 --> 00:05:31.940
So if we go back to repos,
and please correct me

86
00:05:31.940 --> 00:05:36.450
if I'm off track in terms of
understanding what you're talking about.

87
00:05:36.450 --> 00:05:40.967
In addition to specifying the properties I
intend to use, I could also do something

88
00:05:40.967 --> 00:05:46.060
like this.
&gt;&gt; Mike North: So,

89
00:05:46.060 --> 00:05:50.392
I can pass data into the component,
and I'm actually gonna be setting this

90
00:05:50.392 --> 00:05:54.410
property's initial value,
when the component's instantiated.

91
00:05:55.840 --> 00:06:00.190
And internally,
the component could be using this here.

92
00:06:00.190 --> 00:06:04.878
So I typically will just underscore
things because that means

93
00:06:04.878 --> 00:06:10.100
private typically and
you gotta just catch it in a code review.

94
00:06:11.910 --> 00:06:14.340
If you see something like this,

95
00:06:14.340 --> 00:06:18.150
like that is a sure sign that you probably
shouldn't be doing what you're doing.

96
00:06:18.150 --> 00:06:23.340
So anything that's important
to my component's operation.

97
00:06:23.340 --> 00:06:27.170
But not necessarily
something I want to include

98
00:06:27.170 --> 00:06:31.590
in the contract with the outside world,
I will indicate

99
00:06:31.590 --> 00:06:36.050
via underscoring it that it's private-ish.
&gt;&gt; Speaker 6: Do you know if there's

100
00:06:36.050 --> 00:06:39.450
any plans in the works for
bringing array prop types?

101
00:06:39.450 --> 00:06:43.120
Type of thing where you're actually
specifying these properties and

102
00:06:43.120 --> 00:06:47.630
these alone can everywhere passed in?
&gt;&gt; Mike North: I don't know,

103
00:06:47.630 --> 00:06:49.280
if there's plan to do it.

104
00:06:49.280 --> 00:06:56.945
There is a way to respond to
undefined properties, right,

105
00:06:56.945 --> 00:07:03.997
to a property that's not defined yet.
&gt;&gt; Mike North: There's

106
00:07:03.997 --> 00:07:09.300
a hook that you can customize there to
raise a warning if something happened.

107
00:07:09.300 --> 00:07:16.900
And there are also hooks where you
can ensure that everything's sort of

108
00:07:16.900 --> 00:07:22.320
is in the correct initial state before you
sort of spin up and struggling but that's

109
00:07:22.320 --> 00:07:27.180
absolutely a valid concern there and from
a documentation standpoint I think this is

110
00:07:27.180 --> 00:07:32.750
probably the best answer we have today.
&gt;&gt; Speaker 7: Couple from online

111
00:07:32.750 --> 00:07:35.820
this might be similar to what
You're covering this now but

112
00:07:35.820 --> 00:07:39.170
when should you use yield
versus passing attributes and

113
00:07:39.170 --> 00:07:43.550
having the HTML inside the component .hps?
&gt;&gt; Mike North: Good question.

114
00:07:43.550 --> 00:07:46.310
Okay.
So, covering yield here.

115
00:07:46.310 --> 00:07:54.080
So one use of yield is,
when you use a component in black form.

116
00:07:56.460 --> 00:08:00.697
So, in this case, if I did this and

117
00:08:00.697 --> 00:08:05.443
had.
&gt;&gt; Mike North: I don't

118
00:08:05.443 --> 00:08:08.540
know how to make it reasonable,
in this example,

119
00:08:08.540 --> 00:08:14.734
here.
&gt;&gt; Mike North: So,

120
00:08:14.734 --> 00:08:20.429
you can see that we've actually been able
to takes an arbitrary chunk of HTML and

121
00:08:20.429 --> 00:08:24.180
handle bars and
place it into the component itself.

122
00:08:24.180 --> 00:08:26.430
And just to convince you guys,
this is actually inside.

123
00:08:27.560 --> 00:08:29.610
This is our li, right?

124
00:08:29.610 --> 00:08:33.080
And so we've actually,
we're inside the component and

125
00:08:33.080 --> 00:08:36.530
the reason it's been placed there
is because yield is up here.

126
00:08:36.530 --> 00:08:40.790
So if I move that down this is kind
of a similar concept to outlet.

127
00:08:40.790 --> 00:08:44.970
This is where the content that's
passed in via your block goes.

128
00:08:46.620 --> 00:08:48.326
So this is one use of yield.

129
00:08:48.326 --> 00:08:54.450
Other uses of yield including building
like a custom each kind of thing.

130
00:08:54.450 --> 00:08:58.906
Where if you were to
have something like this,

131
00:08:58.906 --> 00:09:05.140
this is item
&gt;&gt; Mike North: and yield the item.

132
00:09:05.140 --> 00:09:10.144
Can you had make something like my-list

133
00:09:10.144 --> 00:09:16.130
as listItem.
&gt;&gt; Mike North: And then do.

134
00:09:19.530 --> 00:09:23.140
So essentially you can customize
a collection of objects this way if you

135
00:09:23.140 --> 00:09:28.760
yield, from within an each that's defined
inside your component, you're essentially

136
00:09:28.760 --> 00:09:36.150
making that local variable that's inside
the scope on a per iteration basis.

137
00:09:36.150 --> 00:09:38.180
You're exposing that to
the outside world and so

138
00:09:38.180 --> 00:09:40.240
you can just define something like this.

139
00:09:40.240 --> 00:09:44.833
And you end up with an each-ish
thing that will render.

140
00:09:46.312 --> 00:09:47.770
&gt;&gt; Mike North: Yep, hasBlock,

141
00:09:47.770 --> 00:09:54.310
it's just a way of detecting how
your component's being consumed.

142
00:09:54.310 --> 00:10:00.548
It's just a property that's available so
you can do if hasBlock and

143
00:10:00.548 --> 00:10:05.678
then do something.
&gt;&gt; Mike North: So,

144
00:10:05.678 --> 00:10:11.800
if you're building an add on and you
wanna support in line use and block use.

145
00:10:11.800 --> 00:10:17.734
And you might have specific
things that happen when

146
00:10:17.734 --> 00:10:23.410
You need to validate
things that are passed in.

147
00:10:23.410 --> 00:10:26.960
This is all the stuff that
you'll wanna study more deeply.

148
00:10:26.960 --> 00:10:33.070
For the most part, what I see is
people designing components to

149
00:10:33.070 --> 00:10:37.661
be used in a singular way.

150
00:10:37.661 --> 00:10:42.290
One Potential difference from that
would be something like this.

151
00:10:43.880 --> 00:10:48.801
Where I could use the block form of linkto

152
00:10:48.801 --> 00:10:53.770
instead of the inline form.
&gt;&gt; Mike North: So

153
00:10:53.770 --> 00:11:00.760
this is a great example of has block.
&gt;&gt; Mike North: I want to just yield.

154
00:11:01.810 --> 00:11:03.830
Right, just spit out
whatever's in the block.

155
00:11:06.360 --> 00:11:14.879
Otherwise, the name of the repo.
&gt;&gt; Mike North: And

156
00:11:14.879 --> 00:11:16.940
then we're just going to
delete all the sample stuff.

157
00:11:18.910 --> 00:11:25.710
So changing the component in this way,
like we'll We will still

158
00:11:25.710 --> 00:11:31.370
if we use it inline we'll
get exactly what we expect.

159
00:11:33.700 --> 00:11:37.069
We also have the option
of using it in block

160
00:11:37.069 --> 00:11:42.274
form
&gt;&gt; Mike North: what

161
00:11:42.274 --> 00:11:43.040
did we call it name Name.

162
00:11:44.530 --> 00:11:47.770
So this will actually provide
a totally equivalent result.

163
00:11:47.770 --> 00:11:53.750
But now we have the ability to
customize it by styling it in some way.

164
00:11:56.370 --> 00:12:01.010
And so it's sort of like,
if there's a primary piece of text

165
00:12:02.840 --> 00:12:06.930
you'll usually have, either the two
things right next to each other like

166
00:12:06.930 --> 00:12:10.920
passing in text as an attribute or
the yield and in this case you can say

167
00:12:10.920 --> 00:12:15.700
that if you are in block mode do this
otherwise fall back to a default.

168
00:12:15.700 --> 00:12:19.910
Just remember you only have one yield and
even in the W3C

169
00:12:19.910 --> 00:12:24.770
web component speck this
is a major lacking thing.

170
00:12:24.770 --> 00:12:27.620
The fact that projecting
content into a component

171
00:12:28.920 --> 00:12:33.130
there is not a good story
really anywhere for that.

172
00:12:34.200 --> 00:12:37.910
So use your yield wisely,
you only have one.

173
00:12:37.910 --> 00:12:41.750
Anything else you are going to
pass in through an attribute.

174
00:12:41.750 --> 00:12:44.070
Or pass in a view itself.

175
00:12:45.260 --> 00:12:49.690
Pass in a component itself and then render
the component within the other component.

176
00:12:49.690 --> 00:12:53.550
Or do something hacky which will probably
break in future versions of Ember.

177
00:12:53.550 --> 00:12:57.040
&gt;&gt; Speaker 4: If you did put two yields

178
00:12:57.040 --> 00:12:59.810
in would you get the same content twice or
would you get an error?

179
00:12:59.810 --> 00:13:02.200
Or is that undefined?
&gt;&gt; Mike North: You get the same content

180
00:13:02.200 --> 00:13:07.340
twice but
Having asked people who are working

181
00:13:07.340 --> 00:13:12.380
in this area of Ember, I've been told,
don't count on that continuing to work.

182
00:13:12.380 --> 00:13:14.290
&gt;&gt; Speaker 4: Undefined, got it.

183
00:13:14.290 --> 00:13:16.520
&gt;&gt; Mike North: So, it happens to work.

184
00:13:16.520 --> 00:13:17.420
&gt;&gt; Speaker 4: It's implementation

185
00:13:17.420 --> 00:13:21.630
specific, but
It's not defined by the spec but

186
00:13:21.630 --> 00:13:25.650
it's implementation or done a part.
&gt;&gt; Mike North: It will always

187
00:13:25.650 --> 00:13:27.150
yield the content twice right now.

188
00:13:27.150 --> 00:13:27.700
It has to be.
&gt;&gt; Speaker 4: Right.

189
00:13:27.700 --> 00:13:28.330
&gt;&gt; Mike North: With the component.

190
00:13:28.330 --> 00:13:28.880
&gt;&gt; Speaker 4: That's because it's

191
00:13:28.880 --> 00:13:29.770
implemented that way but.

192
00:13:29.770 --> 00:13:32.340
And to find the philosophical sense maybe.
&gt;&gt; Mike North: Yeah.

193
00:13:32.340 --> 00:13:32.950
Exactly.

194
00:13:32.950 --> 00:13:34.328
Exactly.

195
00:13:34.328 --> 00:13:36.370
All right.

196
00:13:36.370 --> 00:13:37.120
Any other questions?

197
00:13:37.120 --> 00:13:38.120
Yes.
&gt;&gt; Speaker 7: Yeah, there's one more.

198
00:13:38.120 --> 00:13:41.080
Are there a list of system actions?

199
00:13:41.080 --> 00:13:42.940
I noticed that you're
using error some more, but

200
00:13:42.940 --> 00:13:47.022
you didn't manually raise it.
&gt;&gt; Mike North: A list of system actions.

201
00:13:47.022 --> 00:13:53.500
Error is gonna be handled
by the error substate.

202
00:13:53.500 --> 00:13:56.540
Loading as it relates to
the loading substate.

203
00:13:56.540 --> 00:13:57.840
&gt;&gt; Speaker 10: Maybe they're asking where

204
00:13:57.840 --> 00:14:00.440
is that list?
&gt;&gt; Mike North: I don't

205
00:14:00.440 --> 00:14:02.650
believe there's a comprehensive list.

206
00:14:02.650 --> 00:14:07.980
You can look at the documentation for
ember.route because that is the object

207
00:14:07.980 --> 00:14:10.430
that those actions relate to.

208
00:14:11.980 --> 00:14:15.650
I believe those are the only two
that are listed currently but

209
00:14:15.650 --> 00:14:17.620
that is the page to track for
that kind of thing.

