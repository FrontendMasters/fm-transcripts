WEBVTT

1
00:00:00.000 --> 00:00:03.991
[MUSIC]

2
00:00:03.991 --> 00:00:05.240
&gt;&gt; Mike North: Before I post this.

3
00:00:06.420 --> 00:00:11.000
So I'll post this then I'll do another
commit converting the whole thing through.

4
00:00:11.000 --> 00:00:14.850
So that you can see
the finished picture here.

5
00:00:14.850 --> 00:00:18.330
But it's really more of the same,
it's really more of the same stuff.

6
00:00:19.410 --> 00:00:26.750
So does anyone have questions about
where I'm at and how this works.

7
00:00:27.870 --> 00:00:28.610
Where to do what.

8
00:00:28.610 --> 00:00:31.330
&gt;&gt; Speaker 2: I have one question for you.

9
00:00:31.330 --> 00:00:35.220
So if you get a model in from an API or
you get a record from your API.

10
00:00:35.220 --> 00:00:42.040
And then in business somewhere you
add a property onto that record.

11
00:00:42.040 --> 00:00:43.900
&gt;&gt; Mike North: Yeah,
business logic in your UI.

12
00:00:43.900 --> 00:00:47.120
&gt;&gt; Speaker 2: Yeah not in the model but
you just tack it on there like this like

13
00:00:47.120 --> 00:00:49.280
this kind of thing as you're
going through the UI.

14
00:00:49.280 --> 00:00:52.020
And when you refresh that model or

15
00:00:52.020 --> 00:00:55.510
get it updated does it wipe out any
of the properties that you set?

16
00:00:55.510 --> 00:01:01.020
&gt;&gt; Mike North: So you're saying
beyond what is defined in model?

17
00:01:01.020 --> 00:01:01.710
&gt;&gt; Speaker 2: Yep.

18
00:01:01.710 --> 00:01:03.490
&gt;&gt; Mike North: You add
a property to a record.

19
00:01:03.490 --> 00:01:04.020
&gt;&gt; Speaker 2: Yep.

20
00:01:04.020 --> 00:01:06.180
&gt;&gt; Mike North: It will
not be de-serialized.

21
00:01:06.180 --> 00:01:07.480
When you persisted.

22
00:01:07.480 --> 00:01:08.610
And the reason-
&gt;&gt; Speaker 2: That's what I'm asking.

23
00:01:08.610 --> 00:01:10.550
I'm asking if I refreshed
that model from the server,

24
00:01:10.550 --> 00:01:14.390
like say, refreshed my model and,
nothing's changed,

25
00:01:14.390 --> 00:01:16.950
will it wipe off the things I've
set on things that haven't changed?

26
00:01:19.600 --> 00:01:22.110
I've selected a bunch and
then sent in a selected flag.

27
00:01:22.110 --> 00:01:23.190
&gt;&gt; Mike North: I see what you're saying.

28
00:01:23.190 --> 00:01:26.370
So, that's hard to reconcile, right?

29
00:01:26.370 --> 00:01:32.090
Because essentially you have
two changes and there's

30
00:01:32.090 --> 00:01:38.450
not an easy way to determine what should
override what in the case of a conflict.

31
00:01:38.450 --> 00:01:44.260
So one person might say, all right I
made my client site changes an hour ago.

32
00:01:44.260 --> 00:01:49.080
And my, I'm using web sockets and
I'd finally reconnected to my server and

33
00:01:49.080 --> 00:01:50.430
that's the up to date data.

34
00:01:50.430 --> 00:01:52.650
I want the API to supersede.

35
00:01:52.650 --> 00:01:56.410
And someone else might say,
this data's not changing in my API.

36
00:01:56.410 --> 00:01:59.520
I changed it and so
you have to manage that yourself.

37
00:01:59.520 --> 00:02:00.429
&gt;&gt; Speaker 2: The data
doesn't exist immediately.

38
00:02:02.330 --> 00:02:08.290
So I got records coming in I clicked on
them and instead of just used for display.

39
00:02:08.290 --> 00:02:12.460
&gt;&gt; Mike North: Frankly that sounds
a little bit of a fishy use case.

40
00:02:12.460 --> 00:02:17.660
The model should define
the structure of your records and

41
00:02:17.660 --> 00:02:20.480
there is not a really great.

42
00:02:20.480 --> 00:02:22.350
Unless you have a specific
thing you're trying to do,

43
00:02:22.350 --> 00:02:25.840
I would avoid trying to tack things on.

44
00:02:25.840 --> 00:02:29.540
That would go beyond how
the model has defined it.

45
00:02:29.540 --> 00:02:32.640
I will tell you that in
terms of serialization and

46
00:02:32.640 --> 00:02:36.370
deserialization, you're really
looking at the model object,

47
00:02:36.370 --> 00:02:39.980
the factory,
in terms of turning records into JSON.

48
00:02:39.980 --> 00:02:44.010
And so anything you do to
the records themselves will not have

49
00:02:45.280 --> 00:02:49.930
probably the effects you are thinking
of on how things are updated.

50
00:02:51.260 --> 00:02:57.210
Its tough to answer that question cause
it's sought of hypothetical edgy edgy

51
00:02:57.210 --> 00:03:04.360
cornery edge case Any other questions?

52
00:03:06.030 --> 00:03:06.580
Adapters?

53
00:03:06.580 --> 00:03:09.000
Serializers?

54
00:03:09.000 --> 00:03:10.570
Types of APIs Ember works with?

55
00:03:11.610 --> 00:03:13.840
The answer is pretty
much anything restful.

56
00:03:17.360 --> 00:03:22.810
&gt;&gt; Speaker 3: So this question it
sounds to me like, not that uncommon

57
00:03:22.810 --> 00:03:26.950
of a scenario where you have a list of
something and you track what's selected.

58
00:03:26.950 --> 00:03:30.470
Is that something that would
be better put in a component,

59
00:03:30.470 --> 00:03:35.296
and that component would store the state
of what is currently selected?

60
00:03:35.296 --> 00:03:35.898
&gt;&gt; Mike North: Yes.

61
00:03:35.898 --> 00:03:39.260
&gt;&gt; Speaker 3: Dependent
of the model stuff?

62
00:03:39.260 --> 00:03:42.390
&gt;&gt; Mike North: It kind of depends on
whether you intend versus this data so

63
00:03:43.590 --> 00:03:47.605
if you just like get
on some online food or

64
00:03:47.605 --> 00:03:50.930
[INAUDIBLE] investing, you wanna
select a couple things in that state

65
00:03:50.930 --> 00:03:55.760
you know really exist on the client
until you place an order.

66
00:03:55.760 --> 00:04:00.070
You could probably create
an order object and

67
00:04:00.070 --> 00:04:05.950
then whatever is said and done,
persisted that as a whole.

68
00:04:05.950 --> 00:04:10.310
Selection is difficult to wrap my
head around in terms of what you guys

69
00:04:10.310 --> 00:04:13.780
are thinking because that could
mean UI selection state or

70
00:04:13.780 --> 00:04:17.610
I am doing course registration and
I'm persisting that I've registered for

71
00:04:17.610 --> 00:04:19.230
these courses, I'm not sure what you mean.

72
00:04:20.380 --> 00:04:22.000
&gt;&gt; Speaker 3: Thank you,
I can go into more detail.

73
00:04:22.000 --> 00:04:24.040
&gt;&gt; Mike North: Yeah.
&gt;&gt; Speaker 3: So I've got a list of items,

74
00:04:24.040 --> 00:04:28.120
and I am explain the inside of
a component that has a check box in it.

75
00:04:28.120 --> 00:04:31.560
Outside of that component I got
siblings to the list of items.

76
00:04:31.560 --> 00:04:35.210
I've got a count and some actions and some
buttons that say leave all those things

77
00:04:35.210 --> 00:04:38.650
I've selected, copy all those things I've
selected, do something with those things.

78
00:04:38.650 --> 00:04:44.210
So I go to check them, I tack on
an inselected property to the record.

79
00:04:44.210 --> 00:04:47.610
Not being persistent, only use when I
use the UI and only use when I click

80
00:04:47.610 --> 00:04:50.940
right into the buttons to say
anything I selected, act upon.

81
00:04:50.940 --> 00:04:52.260
&gt;&gt; Mike North: Totally
get what you're saying.

82
00:04:52.260 --> 00:04:54.430
&gt;&gt; Speaker 3: And every once in a while
I want to reach into the API and

83
00:04:54.430 --> 00:04:56.520
say are there any new records.

84
00:04:56.520 --> 00:05:00.310
I got three new records pop them into
the list but don't deselect my stuff.

85
00:05:00.310 --> 00:05:03.930
&gt;&gt; Mike North: What I would advise there
is you take a different approach to

86
00:05:03.930 --> 00:05:05.730
holding selection state.

87
00:05:05.730 --> 00:05:11.125
And that you potentially have a separate
object that represents [CROSSTALK]

88
00:05:11.125 --> 00:05:16.619
instead of having the objects know about
being selected [CROSSTALK] and not.

89
00:05:16.619 --> 00:05:20.883
Because remember the purpose
of the model is to represent,

90
00:05:20.883 --> 00:05:24.340
usually, a persistent data structure.

91
00:05:24.340 --> 00:05:26.790
And to tack things on
it that are a UI only

92
00:05:26.790 --> 00:05:31.170
concern may have some
unexpected side effects.

93
00:05:31.170 --> 00:05:33.130
&gt;&gt; Speaker 3: Maybe a service
is a good spot for that.

94
00:05:33.130 --> 00:05:36.880
&gt;&gt; Mike North: Yeah I would say
totally an array on a service.

95
00:05:36.880 --> 00:05:41.420
Or an array on something like that.

96
00:05:41.420 --> 00:05:43.640
A service of course is global in a.

97
00:05:43.640 --> 00:05:45.979
So if that fits it's
probably a good option.

98
00:05:47.820 --> 00:05:49.300
Question from the web.

99
00:05:49.300 --> 00:05:50.600
&gt;&gt; Speaker 4: Yeah, we had a couple.

100
00:05:50.600 --> 00:05:54.630
There is wondering Windows that data get
refreshed like if new repo is added would

101
00:05:54.630 --> 00:05:56.060
nullit show up.

102
00:05:56.060 --> 00:05:58.530
&gt;&gt; Mike North: So good question.

103
00:05:58.530 --> 00:06:04.410
So I assume that means if someone,
some other user through gethub,

104
00:06:04.410 --> 00:06:07.590
you know while we are looking
at this page Creates a new repo.

105
00:06:09.640 --> 00:06:15.530
Out of the box nothing, no effort is
made to try to keep that in sync.

106
00:06:15.530 --> 00:06:19.690
We don't, by default we don't poll for
changes to data.

107
00:06:19.690 --> 00:06:23.710
What you can do is you can
unload all records of a type.

108
00:06:23.710 --> 00:06:27.310
So the way the caching works,
there's a separate

109
00:06:28.460 --> 00:06:32.560
bucket of the cash on a per model basis.

110
00:06:32.560 --> 00:06:38.700
And you can say you know every ten
minutes, unload all of the repos

111
00:06:38.700 --> 00:06:43.350
you just have some you know, ember run
later that will take care of that.

112
00:06:43.350 --> 00:06:47.890
And then you know the next time you come
back to that page and you need data.

113
00:06:47.890 --> 00:06:50.600
There's nothing in the cache anymore and

114
00:06:50.600 --> 00:06:54.050
if you've used this logic we
talked about or you checked to see

115
00:06:54.050 --> 00:06:58.340
is there anything in there, if not,
go and request it from the API.

116
00:06:58.340 --> 00:06:59.290
That's where that can happen.

117
00:07:00.350 --> 00:07:05.100
So you really have to manage
that yourself and the reason is

118
00:07:05.100 --> 00:07:10.110
that's more about your particular
application than anything else.

119
00:07:10.110 --> 00:07:14.130
If you're building a real
time trading platform,

120
00:07:14.130 --> 00:07:16.360
you probably don't want
to cache anything at all.

121
00:07:16.360 --> 00:07:22.440
You want the latest data no matter what
except for maybe like ticker symbols and

122
00:07:22.440 --> 00:07:26.680
you can say, all right,
Coke's ticker symbol is not changing.

123
00:07:26.680 --> 00:07:30.850
You know Yahoo is gonna be
Y-H-O-O even an hour from now.

124
00:07:30.850 --> 00:07:34.460
But the price,
I don't want that to be cache at all.

125
00:07:34.460 --> 00:07:36.415
So there is some hooks where
you can disable cash in other

126
00:07:36.415 --> 00:07:37.850
pro-model basis if you need to.

127
00:07:39.330 --> 00:07:44.430
But that is so specific to a particular
app that Ember data does not

128
00:07:44.430 --> 00:07:49.605
aim to try to lean one way or the other.

129
00:07:49.605 --> 00:07:52.920
&gt;&gt; Speaker 5: [INAUDIBLE]
&gt;&gt; Mike North: And many things.

130
00:07:52.920 --> 00:07:55.520
&gt;&gt; Speaker 5: Many things.
&gt;&gt; Mike North: [LAUGH] All right any

131
00:07:55.520 --> 00:07:57.120
questions?

132
00:07:57.120 --> 00:07:59.440
Okay.
&gt;&gt; Speaker 4: The second one was,

133
00:07:59.440 --> 00:08:00.570
when talking of components.

134
00:08:00.570 --> 00:08:03.420
Is it okay in some cases to do an Ajax,

135
00:08:03.420 --> 00:08:06.370
somebody had a code to populate it,
like a graphic component?

136
00:08:08.230 --> 00:08:14.840
&gt;&gt; Mike North: So, I,
that's an easy question to answer today.

137
00:08:14.840 --> 00:08:20.350
Because you should probably be
doing your Ajax in a route.

138
00:08:20.350 --> 00:08:23.090
And we have these things
called controllers for now.

139
00:08:24.160 --> 00:08:27.580
That are sort of the default context for
things.

140
00:08:27.580 --> 00:08:31.310
And controllers currently
have access to the store.

141
00:08:31.310 --> 00:08:35.220
And, although it's not advised,
it's sort of set up so

142
00:08:35.220 --> 00:08:39.610
that you could request
data via the controller.

143
00:08:39.610 --> 00:08:42.440
I would say, really what you
want to do is do it in a route,

144
00:08:42.440 --> 00:08:43.850
pass it to the component.

145
00:08:45.040 --> 00:08:49.660
And the reason is, you know,
components should really be more about

146
00:08:51.470 --> 00:08:57.060
visualizing and permitting
the manipulation of application state.

147
00:08:57.060 --> 00:09:02.330
But the state should be owned elsewhere
and that's cuz they get destroyed and

148
00:09:02.330 --> 00:09:06.030
created every time you transition to and
from page and

149
00:09:07.350 --> 00:09:10.220
you want state to live on something
that lives a little longer.

150
00:09:13.340 --> 00:09:15.200
&gt;&gt; Speaker 4: And
then another one just came in.

151
00:09:15.200 --> 00:09:18.280
Will we be showing any
examples of saving data?

152
00:09:18.280 --> 00:09:23.310
Is there a way to do mass saves in one
post, or are they all separate calls?

153
00:09:23.310 --> 00:09:25.670
&gt;&gt; Mike North: There
is a way to save data,

154
00:09:25.670 --> 00:09:30.730
and you're gonna have to look at the
documentation for that cuz I could spend

155
00:09:30.730 --> 00:09:33.910
five or six hours going through
all the edges and corners of this.

156
00:09:35.610 --> 00:09:37.680
It's pretty self explanatory.

157
00:09:37.680 --> 00:09:42.480
So, you change properties and
measure width that it is 30.

158
00:09:42.480 --> 00:09:46.960
You can check to see if it's 30 or
not and then save it.

159
00:09:46.960 --> 00:09:51.680
And that's useful so that as you turn
to navigate away from your page.

160
00:09:51.680 --> 00:09:54.280
You can say, like, are you sure you
want to discard your changes, and

161
00:09:54.280 --> 00:09:59.150
then roll it back to its previously,
known clean state.

162
00:10:00.160 --> 00:10:01.870
So that all exists there.

163
00:10:01.870 --> 00:10:05.470
The idea of bulk operations, bulk saving,

164
00:10:05.470 --> 00:10:09.809
bulk editing, is a really,
really hard problem to solve.

165
00:10:11.550 --> 00:10:13.790
There is no solution for it in Ember data.

166
00:10:15.980 --> 00:10:21.160
That is to say there is no like
adopted pattern for doing it.

167
00:10:21.160 --> 00:10:23.186
But yeah we absolutely did do that.

168
00:10:23.186 --> 00:10:30.370
And it was An approach that
I really wanna describe

169
00:10:30.370 --> 00:10:33.516
because I don't want people to follow it
and say Mike told you cuz to do this.

170
00:10:33.516 --> 00:10:38.525
[LAUGH] So but
one good sign here if you look at

171
00:10:38.525 --> 00:10:44.930
Jasonapi.org one of these sort of
extensions to the course back is you

172
00:10:46.210 --> 00:10:50.220
know a good standard URL and

173
00:10:50.220 --> 00:10:55.450
JSON contract for
bulk operations of various kinds.

174
00:10:55.450 --> 00:11:00.597
And so the fact that the standard
exists means that ember data as one of

175
00:11:00.597 --> 00:11:06.988
the first class implementors of JSON API,
it will hopefully come eventually I'm not

176
00:11:06.988 --> 00:11:13.050
aware of any specific developments in
that area, but at least it's in the spec.

177
00:11:13.050 --> 00:11:17.380
And so
I think that it would be good to see.

178
00:11:20.829 --> 00:11:24.680
&gt;&gt; Speaker 5: Could you just in JSON p
which is the old one which is the new

179
00:11:24.680 --> 00:11:25.461
[INAUDIBLE].

180
00:11:25.461 --> 00:11:29.678
&gt;&gt; Mike North: JSON p,
JSON API is a schema URL and

181
00:11:29.678 --> 00:11:34.768
a JSON schema and
JSONP is a means of having

182
00:11:34.768 --> 00:11:39.568
AJAX without AJAX by way of loading JSON

183
00:11:39.568 --> 00:11:44.380
as if it's JavaScript in a script tag.

184
00:11:47.500 --> 00:11:50.770
but Json API is definitely newer.

185
00:11:50.770 --> 00:11:55.720
And the thing I would
compare it to is hal,

186
00:11:55.720 --> 00:12:01.450
which is like this hyper media
standard json in URL format.

187
00:12:01.450 --> 00:12:04.040
It's an attempt to avoid bike shutting.

188
00:12:04.040 --> 00:12:09.160
Which is this effect of like people making
little trivial decisions that sort of

189
00:12:09.160 --> 00:12:12.410
cause a lot of noise and
variance between different APIs and

190
00:12:12.410 --> 00:12:14.930
even different endpoints
within the same API.

191
00:12:14.930 --> 00:12:19.130
And to agree on like this is
the way we do relationships,

192
00:12:19.130 --> 00:12:21.590
this is the way we represent attributes,

193
00:12:21.590 --> 00:12:27.550
this is how we tell you that you've
asked for a list of objects and

194
00:12:27.550 --> 00:12:32.600
you're on page 6 of 15, here's how we're
passing that information back to you.

195
00:12:32.600 --> 00:12:37.310
Because once you have a standard,
once you have a convention, you

196
00:12:37.310 --> 00:12:42.140
can save people a lot of time by the pile

197
00:12:42.140 --> 00:12:47.310
of work that can be considered boilerplate
that just works, becomes much larger.

198
00:12:47.310 --> 00:12:49.160
Compared to having to do
everything from scratch.

199
00:12:49.160 --> 00:12:53.570
&gt;&gt; Speaker 5: So does it cover up on
the equipment of the SQL query when

200
00:12:53.570 --> 00:12:57.120
it's ordered by this?

201
00:12:57.120 --> 00:12:58.300
&gt;&gt; Mike North: Yeah, it covers ordering.

202
00:12:58.300 --> 00:12:59.912
&gt;&gt; Speaker 5: Right.
&gt;&gt; Mike North: Like sorting.

203
00:12:59.912 --> 00:13:02.419
It covers pagination.

204
00:13:02.419 --> 00:13:07.740
It covers even the ability to include
related records with a response.

205
00:13:07.740 --> 00:13:11.250
So if I was asking for the org and

206
00:13:11.250 --> 00:13:17.570
please include the complete list of repos
fully fleshed out in your response.

207
00:13:17.570 --> 00:13:18.840
You know the spec includes that.

208
00:13:19.960 --> 00:13:21.320
So there's a lot there.

209
00:13:21.320 --> 00:13:26.290
And various implementations
of JSON API I'm not sure

210
00:13:26.290 --> 00:13:29.130
if there's anything that
completely implements the spec.

211
00:13:29.130 --> 00:13:34.150
But the idea is if we are going to
move forward and implement a feature,

212
00:13:34.150 --> 00:13:38.190
this is the spec that things
will try to align with.

