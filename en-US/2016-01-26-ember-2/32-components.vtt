WEBVTT

1
00:00:00.000 --> 00:00:03.675
[MUSIC]

2
00:00:03.675 --> 00:00:06.280
&gt;&gt; Mike North: You all
are already using components.

3
00:00:06.280 --> 00:00:09.560
If you use something like this,
you're using a component.

4
00:00:11.380 --> 00:00:16.740
Under the hood, so this may just
seem like a simple dom element.

5
00:00:17.890 --> 00:00:20.289
Under the hood, there exists complexity.

6
00:00:21.810 --> 00:00:26.690
So the idea behind a component
in general is that, or

7
00:00:26.690 --> 00:00:31.530
a web component in general is that when
you're consuming this in your application.

8
00:00:31.530 --> 00:00:36.560
When you place a text field,
you're dealing with a sort of

9
00:00:36.560 --> 00:00:42.140
a single element that has
a contract with the outside world.

10
00:00:42.140 --> 00:00:46.330
So in this case you have
the concept of a place holder and

11
00:00:46.330 --> 00:00:51.470
you don't have to worry about the fact
that there is a separate div inside

12
00:00:51.470 --> 00:00:58.420
the component in its internals where the
placeholder is actually rendered right.

13
00:00:58.420 --> 00:00:59.680
You don't have to worry about that.

14
00:00:59.680 --> 00:01:02.400
You just now have this text input.

15
00:01:02.400 --> 00:01:05.500
It has this attribute called placeholder.

16
00:01:05.500 --> 00:01:10.310
When I set it equal to something
it will handle it properly.

17
00:01:10.310 --> 00:01:11.930
And Ember components work the same way.

18
00:01:15.700 --> 00:01:18.460
So they live in the components folder.

19
00:01:18.460 --> 00:01:20.060
They're templates.

20
00:01:20.060 --> 00:01:24.290
Are in a components subfolder
of the templates directory.

21
00:01:26.770 --> 00:01:30.820
Each component is associated
with a top-level DOM element.

22
00:01:30.820 --> 00:01:34.090
By default this is div,
but you can customize it.

23
00:01:35.250 --> 00:01:38.950
And one of the more powerful
aspects of components,

24
00:01:38.950 --> 00:01:43.200
is that you have a very strong
encapsulation with the outside world.

25
00:01:43.200 --> 00:01:50.890
And you have to pass data into it
explicitly which is actually a benefit.

26
00:01:50.890 --> 00:01:55.560
But you have to pass data into it
explicitly rather than giving it access to

27
00:01:55.560 --> 00:02:02.070
a generalized scope of data and what this
insures is that Your component is not

28
00:02:02.070 --> 00:02:08.610
gonna have side effects by altering things
that maybe it wasn't designed to alter.

29
00:02:08.610 --> 00:02:13.160
You have a contract that contract
is the means of getting data in and

30
00:02:13.160 --> 00:02:18.590
out of sending actions out and this

31
00:02:18.590 --> 00:02:24.670
is a powerful concept that lets you
build little islands of complexity,

32
00:02:24.670 --> 00:02:28.850
and then sort of wrap them up and
consider them to be a black box.

33
00:02:28.850 --> 00:02:35.130
and when you are composing them to
build user interfaces and screens.

34
00:02:35.130 --> 00:02:40.390
You don't have to worry about the concept
of place holder being a div that is

35
00:02:40.390 --> 00:02:43.640
positioned in a particular place and
when you start typing,

36
00:02:43.640 --> 00:02:45.550
this place holder should disappear.

37
00:02:45.550 --> 00:02:49.500
The component will manage all of that
internally so you build it once and

38
00:02:49.500 --> 00:02:53.540
then you can use it over and
over and over in your app.

39
00:02:53.540 --> 00:02:57.050
Additionally, these components have
a well-orchestrated life cycle.

40
00:02:57.050 --> 00:02:59.760
This is very important
in a single-page app.

41
00:02:59.760 --> 00:03:02.000
If you are used to writing jQuery.

42
00:03:03.330 --> 00:03:07.250
The jQuery ready hook
is the go to place for

43
00:03:07.250 --> 00:03:09.110
initializing things and setting things up.

44
00:03:10.940 --> 00:03:14.000
There is no equivalent in
the single page app without this.

45
00:03:14.000 --> 00:03:17.590
Right, because components come and
go at various times,

46
00:03:17.590 --> 00:03:22.140
the only concept of the DOM being
ready is a pretty meaningless one.

47
00:03:22.140 --> 00:03:24.250
it's when your app first starts up.

48
00:03:24.250 --> 00:03:28.950
And so this gives you
equivalent hooks where you can

49
00:03:28.950 --> 00:03:33.430
perform things when
the component is instantiated.

50
00:03:33.430 --> 00:03:36.820
Perform things right before it's
inserted into the DOM and right after.

51
00:03:39.320 --> 00:03:43.798
So these are the important
life cycle hooks to remember.

52
00:03:46.741 --> 00:03:53.355
&gt;&gt; Mike North: This is the equivalent
of jQuery.ready document ready.

53
00:03:53.355 --> 00:03:57.930
And, so this is where you would
set anything up, where you would,

54
00:03:57.930 --> 00:04:01.890
if you're using a jQuery ui plugin or
you're using d3 or

55
00:04:01.890 --> 00:04:07.080
if you need to something,
run some code that will initialize

56
00:04:07.080 --> 00:04:11.900
some dom based on a configuration
this is where you'll do it.

57
00:04:11.900 --> 00:04:15.630
It's important that you tear
things down if you set them up.

58
00:04:17.140 --> 00:04:20.470
Usually I parody between these two hooks.

59
00:04:20.470 --> 00:04:25.610
Where you'll initialize something and
maybe start listening to window.resize and

60
00:04:25.610 --> 00:04:29.110
then as you tear the component down,
detach that listener,

61
00:04:29.110 --> 00:04:30.530
clean up after your self.

62
00:04:30.530 --> 00:04:35.790
And the reason is in a single page app
you're dealing with the same pool of

63
00:04:35.790 --> 00:04:40.920
memory, the same pile of listeners and

64
00:04:40.920 --> 00:04:44.890
same events going back and forth or
potentially hours and hours and hours.

65
00:04:44.890 --> 00:04:48.210
You don't get this page load
where you boil the ocean

66
00:04:49.230 --> 00:04:52.630
every time the user clicks a link and
goes to a new page.

67
00:04:52.630 --> 00:04:59.191
So if these are designed
in a way that they leak and

68
00:04:59.191 --> 00:05:05.120
they leave listeners dangling around,
you can run into performance problems.

69
00:05:05.120 --> 00:05:08.850
So very important to think about
cleaning up after yourself here.

70
00:05:13.087 --> 00:05:18.533
&gt;&gt; Mike North: In terms of consuming
components, just the fact that a component

71
00:05:18.533 --> 00:05:25.280
exists will tell Ember to create
a handlebars helper for it automatically.

72
00:05:25.280 --> 00:05:30.220
So if I create a component
called my-component

73
00:05:30.220 --> 00:05:35.140
I can consume it just like this,
just like {{my-component}}.

74
00:05:35.140 --> 00:05:38.050
You'll notice that I have a dash in there.

75
00:05:38.050 --> 00:05:42.060
That's required in
the name of a component.

76
00:05:42.060 --> 00:05:46.319
You must have a dash and
that is a cue to ember to tell it

77
00:05:47.630 --> 00:05:52.160
I'm not dealing with handle verse
helper I'm dealing with the component.

78
00:05:52.160 --> 00:05:56.130
You can use block sentax we've
already been using block sentax.

79
00:05:56.130 --> 00:06:01.220
If you think about each or we begin with a
hash tag and we have a closing slash each.

80
00:06:03.220 --> 00:06:07.770
There is a way Just like you
can have an input which is.

81
00:06:07.770 --> 00:06:11.820
An HTML input is a single
element just like an image.

82
00:06:11.820 --> 00:06:16.590
A div or a paragraph tag has an open and
a close and you have that flexibility of

83
00:06:16.590 --> 00:06:19.410
building components that
work in those ways as well.

84
00:06:21.580 --> 00:06:25.680
And all components that
are in your application

85
00:06:25.680 --> 00:06:30.500
that are in the application namespace,
are available throughout your app.

86
00:06:31.530 --> 00:06:34.160
And I phrase it that way
because you can install

87
00:06:34.160 --> 00:06:38.900
add ons that will make components
available for consumption in your app.

88
00:06:40.070 --> 00:06:45.161
So it's anything that's in the component
folder you can use anywhere and

89
00:06:45.161 --> 00:06:47.470
add ons can add to that even more.

90
00:06:49.817 --> 00:06:54.743
&gt;&gt; Mike North: So here's a typical
example what you often see is something

91
00:06:54.743 --> 00:06:59.667
as simple as this where you have
the name of the component and

92
00:06:59.667 --> 00:07:04.692
then a series of key value pairs
which essentially establish

93
00:07:04.692 --> 00:07:10.050
a contract between the inside world and
the outside world.

94
00:07:10.050 --> 00:07:15.890
So on the left side you have some
names which are things that's

95
00:07:15.890 --> 00:07:19.440
the components internal schema, right?

96
00:07:19.440 --> 00:07:26.350
So this would be in the case of our input
example this attribute called placeholder.

97
00:07:26.350 --> 00:07:29.060
That's something that this
component knows about.

98
00:07:29.060 --> 00:07:33.860
On the right side,
you have either literals or properties or

99
00:07:33.860 --> 00:07:35.970
names of actions.

100
00:07:35.970 --> 00:07:40.980
But that is sort of what these things
are mapped to on the outside world.

101
00:07:40.980 --> 00:07:46.030
So in this case we've got this concept of
mySize which may exist on a controller or

102
00:07:46.030 --> 00:07:47.170
another component.

103
00:07:47.170 --> 00:07:49.620
But we've created two
way data bonding there.

104
00:07:51.120 --> 00:07:53.970
And we've also passed a string
literal in for title.

105
00:07:53.970 --> 00:08:01.853
And we have said that when this component
fires this action called "on-favorite",

106
00:08:01.853 --> 00:08:07.270
I want this "thingClicked"
action to be fired.

107
00:08:07.270 --> 00:08:10.750
What your route will handle or
your controller, potentially.

108
00:08:12.130 --> 00:08:17.490
So the idea here is internal
to external mapping.

109
00:08:17.490 --> 00:08:20.680
So when I talk about an explicit contract,
this is it right here.

110
00:08:23.540 --> 00:08:25.720
So the naming convention is important and

111
00:08:25.720 --> 00:08:30.240
you're probably getting the idea having
already worked with routes and templates,

112
00:08:30.240 --> 00:08:33.070
and you have to make sure that
your files are correctly named.

113
00:08:33.070 --> 00:08:36.550
The same holds true here, and

114
00:08:36.550 --> 00:08:42.340
I just wanna take a moment to explain
at a high level how this works.

115
00:08:42.340 --> 00:08:45.480
So if you see my component in a template

116
00:08:48.150 --> 00:08:51.610
Ember will use something
called the resolver,

117
00:08:51.610 --> 00:08:57.230
which essentially is a mapping
of strings to ES six modules.

118
00:08:57.230 --> 00:09:01.570
It will use the resolver to try
to find a JavaScript module and

119
00:09:01.570 --> 00:09:06.530
a template for this component,
and components can exist without

120
00:09:06.530 --> 00:09:10.490
having an explicit JavaScript module or
without having an explicit template.

121
00:09:10.490 --> 00:09:11.980
Just like with routes and

122
00:09:11.980 --> 00:09:16.990
with templates you sort of fall back
to a generic base which comes for free.

123
00:09:16.990 --> 00:09:22.380
But just keep in mind that if you name
things correctly, things will just work.

124
00:09:22.380 --> 00:09:27.817
But if you have a spelling error or if
you've put something in the wrong folder,

125
00:09:27.817 --> 00:09:30.513
you may see a result you don't expect.

126
00:09:34.530 --> 00:09:36.612
&gt;&gt; Mike North: So
when it comes to customizing components,

127
00:09:36.612 --> 00:09:38.650
we have a lot of options here.

128
00:09:38.650 --> 00:09:43.580
So, we can see that tagname
is what can be used to

129
00:09:43.580 --> 00:09:47.880
deviate from the default
outer wrapper element type,

130
00:09:47.880 --> 00:09:52.879
the default being div, so here this
component is going to a an li element.

131
00:09:54.070 --> 00:09:59.140
We can add class names to
that outer root element, and

132
00:09:59.140 --> 00:10:01.750
we can establish attribute bindings.

133
00:10:01.750 --> 00:10:09.650
The way attribute bindings work,
you can have them in one of two ways.

134
00:10:11.690 --> 00:10:17.280
If we look at a line and
we have a property called a line here and

135
00:10:17.280 --> 00:10:22.800
what's gonna happen is if you
look at the resulting HTML and

136
00:10:22.800 --> 00:10:26.430
you can see we've got this
DOM attribute called align,

137
00:10:28.230 --> 00:10:30.780
that's gonna be mapped to
the property in JavaScript.

138
00:10:33.040 --> 00:10:36.070
So the difference between

139
00:10:38.470 --> 00:10:42.270
the age attribute binding and
the align attribute bindings is that

140
00:10:42.270 --> 00:10:46.300
we're customizing the name of
the DOM attribute in this case.

141
00:10:46.300 --> 00:10:50.320
By default the name of your property and
the name of the attribute will be

142
00:10:50.320 --> 00:10:54.730
the same, if you don't have this
notation with the colon in it.

143
00:10:54.730 --> 00:10:59.880
The notation with the colon in it
let's you kind of change that mapping.

144
00:10:59.880 --> 00:11:05.620
In this case, we end up with data dash
age is 32 and a line equals left.

145
00:11:07.160 --> 00:11:12.330
Because we have said that when
this binding this age property,

146
00:11:13.830 --> 00:11:14.890
we want it to use this name.

147
00:11:14.890 --> 00:11:20.170
And you can also see that we're able

148
00:11:20.170 --> 00:11:25.070
to use defaults, so
here I'm passing in an age for

149
00:11:25.070 --> 00:11:28.629
the first instance of this component and
in the second one I'm not.

150
00:11:29.800 --> 00:11:34.902
And it's falling back to whatever
the default value which is sort

151
00:11:34.902 --> 00:11:40.293
of how it define it at how I describe
the class itself so it make sense.

152
00:11:45.740 --> 00:11:50.786
&gt;&gt; Mike North: So components have actions
internally right if you use the action

153
00:11:50.786 --> 00:11:55.925
handle bars helper in this components
template the component will

154
00:11:55.925 --> 00:12:02.180
have the ability to handle actions in
the same way that we've been using routes.

155
00:12:03.400 --> 00:12:05.110
You have these actions object and

156
00:12:05.110 --> 00:12:08.289
then function names and
that's how you create your action binding.

157
00:12:09.930 --> 00:12:14.993
Anything that you wanna communicate
to the outside world to consumers of

158
00:12:14.993 --> 00:12:20.980
this component, you have to do through
an action binding and use this.sendAction.

159
00:12:24.495 --> 00:12:30.060
&gt;&gt; Mike North: It is okay to send an
action when there is nothing bound to it.

160
00:12:30.060 --> 00:12:35.250
So the idea here is if we
were making some text based

161
00:12:35.250 --> 00:12:40.460
components where we have a bunch of key
up and key down and where can correct and

162
00:12:40.460 --> 00:12:45.450
all of things available for consumption
It's totally fine to be sending those out

163
00:12:45.450 --> 00:12:47.470
and to have nothing listening for
them on the other end.

164
00:12:47.470 --> 00:12:49.977
It ends up being a no op.

165
00:12:49.977 --> 00:12:55.244
So I just wanted to draw a clear
distinction between that situation and

166
00:12:55.244 --> 00:13:02.200
the situation where yesterday we saw
unhandled action outside of a component.

167
00:13:02.200 --> 00:13:05.760
Will actually throw an error message
telling you nothing is dealing with this.

