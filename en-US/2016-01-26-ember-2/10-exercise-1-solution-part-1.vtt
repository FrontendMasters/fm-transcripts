WEBVTT

1
00:00:00.190 --> 00:00:04.400
[MUSIC]

2
00:00:04.400 --> 00:00:06.870
&gt;&gt; Mike North: I'm gonna walk
through the solution now, or

3
00:00:06.870 --> 00:00:08.693
my particular solution to this.

4
00:00:11.950 --> 00:00:14.261
&gt;&gt; Mike North: So
let me pivot over to the code.

5
00:00:16.786 --> 00:00:18.932
&gt;&gt; Mike North: And
I've lost my workspaces again.

6
00:00:18.932 --> 00:00:19.656
There it is.

7
00:00:26.370 --> 00:00:27.329
&gt;&gt; Mike North: Come on.

8
00:00:33.234 --> 00:00:34.436
&gt;&gt; Mike North: Whatever.

9
00:00:36.456 --> 00:00:37.033
&gt;&gt; Mike North: Okay so,

10
00:00:37.033 --> 00:00:41.304
I'm gonna start by using Ember CLI
to generate a bunch of routes here.

11
00:00:46.054 --> 00:00:50.117
&gt;&gt; Mike North: And the way I'm
gonna approach the code for this,

12
00:00:50.117 --> 00:00:55.844
I just send out a link to a repo and
get help in the Frontend Masters org.

13
00:00:55.844 --> 00:01:01.546
And as I go through the examples I'm
gonna actually commit the code so

14
00:01:01.546 --> 00:01:04.789
that the video and the repo line up, and

15
00:01:04.789 --> 00:01:09.824
then we can just freeze that and
refer back to it if we need to.

16
00:01:09.824 --> 00:01:17.206
So the first thing that I wanna do is
build the orgs route, ember g route orgs.

17
00:01:19.978 --> 00:01:21.830
&gt;&gt; Mike North: This is for
my list of orgs.

18
00:01:21.830 --> 00:01:25.940
And I'm actually gonna generate a route
called org for an individual org.

19
00:01:27.320 --> 00:01:31.400
And we'll see why,
it has to do with something visual

20
00:01:31.400 --> 00:01:36.680
on the screen in terms of how I want my
hierarchy of templates to be structured.

21
00:01:36.680 --> 00:01:43.894
This will give me a useful place for
something that one might commonly need.

22
00:01:46.986 --> 00:01:52.663
&gt;&gt; Mike North: And
I'm going to create org/repos for

23
00:01:52.663 --> 00:01:55.422
the list of repos.

24
00:01:55.422 --> 00:01:58.035
And because I'm gonna go
through the complete example,

25
00:01:58.035 --> 00:02:00.710
I'm gonna create a route for
the individual repo as well.

26
00:02:07.188 --> 00:02:09.970
&gt;&gt; Mike North: And,
this is a good place to start.

27
00:02:09.970 --> 00:02:13.010
So, if we go back to the code, and

28
00:02:13.010 --> 00:02:19.530
look at our router.js,
we've got something that looks like this.

29
00:02:19.530 --> 00:02:21.751
And I'm gonna get rid of my sidebar here.

30
00:02:21.751 --> 00:02:28.664
So the first thing I wanna do is add
a dynamic segment to my org route.

31
00:02:28.664 --> 00:02:31.214
So this, this here is gonna be orgs, and

32
00:02:31.214 --> 00:02:36.510
this I want to be,
&gt;&gt; Mike North: Something like that.

33
00:02:36.510 --> 00:02:40.557
Well, really it's gonna be org,
something like that.

34
00:02:40.557 --> 00:02:46.248
And in order for
that to work we need a dynamic segment,

35
00:02:46.248 --> 00:02:50.846
so we'll go, {path: 'org/: id'}.

36
00:02:52.827 --> 00:02:58.531
&gt;&gt; Mike North: And for repo,
this we're gonna want like,

37
00:02:58.531 --> 00:03:02.400
org/jquery/jquery-ui.

38
00:03:02.400 --> 00:03:07.307
If we look back at the list of URLs that
I wanna be able to handle, I just want,

39
00:03:07.307 --> 00:03:12.401
just to match GitHub, I want the org name
and then the repo name right after it.

40
00:03:12.401 --> 00:03:17.769
We don't need slash repos, cuz repos
are really the main thing that an org has.

41
00:03:19.790 --> 00:03:24.722
&gt;&gt; Mike North: So the way I'll do that,
I'm already in the context of org

42
00:03:24.722 --> 00:03:29.510
with a dynamic segment after it for
the org name.

43
00:03:29.510 --> 00:03:33.840
So, I simply need to just have id here.

44
00:03:33.840 --> 00:03:39.260
Now for a reason that will become clear,
actually, I'm gonna make a mistake here.

45
00:03:40.470 --> 00:03:42.240
I'm gonna deliberately make a mistake, and

46
00:03:42.240 --> 00:03:46.430
then we can see why we need to
alter this dynamic segment.

47
00:03:48.620 --> 00:03:50.070
But, we know we need something there.

48
00:03:50.070 --> 00:03:54.793
We need some way to abstract
the name of the repo if we're

49
00:03:54.793 --> 00:03:58.021
looking at an individual repos page.

50
00:03:58.021 --> 00:04:04.154
And just for completeness,
I'm gonna do repo/contributors,

51
00:04:06.997 --> 00:04:09.315
&gt;&gt; Mike North: And then issues.

52
00:04:14.072 --> 00:04:17.045
&gt;&gt; Mike North: And so all in all,
this is what we end up with.

53
00:04:19.702 --> 00:04:24.865
&gt;&gt; Mike North: And if we look at the
Ember Inspector, and look at our Routes

54
00:04:24.865 --> 00:04:31.570
tab,
&gt;&gt; Mike North: Get rid of this junk.

55
00:04:32.700 --> 00:04:39.121
It may be a little difficult to see but,
&gt;&gt; Mike North: So

56
00:04:39.121 --> 00:04:41.900
I just want to point out
that things are showing up.

57
00:04:41.900 --> 00:04:46.990
So here's orgs, here is org, and

58
00:04:46.990 --> 00:04:50.550
then children of org, we've got org.repos.

59
00:04:50.550 --> 00:04:53.280
We've got a lot of things here
that say loading and error.

60
00:04:54.720 --> 00:04:57.565
We will go into that,
those are what are called sub-states.

61
00:05:00.372 --> 00:05:03.050
&gt;&gt; Mike North: Here's my individual repo,
so everything's kind of showing up.

62
00:05:04.090 --> 00:05:07.217
And if, unfortunately,
this is not expandable here,

63
00:05:07.217 --> 00:05:10.566
but,
&gt;&gt; Mike North: Take my word for it,

64
00:05:10.566 --> 00:05:11.770
it's all there.

65
00:05:11.770 --> 00:05:15.780
And we can verify it by
just testing with the URL.

66
00:05:15.780 --> 00:05:17.418
If we go to our console here.

67
00:05:22.735 --> 00:05:25.375
&gt;&gt; Mike North: So
if we go to a random URL, like abc,

68
00:05:25.375 --> 00:05:29.650
we'll actually throw an error,
unrecognized URL error.

69
00:05:30.850 --> 00:05:34.718
So anything that doesn't throw this error,

70
00:05:34.718 --> 00:05:39.804
it stands to reason,
is handled in some way by the router and

71
00:05:39.804 --> 00:05:43.595
by matching it to one
of our defined states.

72
00:05:43.595 --> 00:05:48.264
So if we go back, if you just go to orgs,
&gt;&gt; Mike North: And

73
00:05:48.264 --> 00:05:52.630
I wanna only look up the current route,
so that works, that's what I expect.

74
00:05:52.630 --> 00:05:55.349
And I'm just gonna test one deep example.

75
00:05:59.088 --> 00:06:02.330
&gt;&gt; Mike North: This is
a nonsense example but, [LAUGH].

76
00:06:02.330 --> 00:06:05.820
And if we look at current route only,
we can see we have a pretty deep hierarchy

77
00:06:05.820 --> 00:06:09.990
here, but this is the route for
an individual organization.

78
00:06:09.990 --> 00:06:13.430
This is the route for
a repo within that organization.

79
00:06:13.430 --> 00:06:15.610
And this is a route for
the list of issues,

80
00:06:15.610 --> 00:06:18.350
within that repo,
within that organization.

81
00:06:18.350 --> 00:06:22.690
And so if we think about eventually
we're gonna have some data being fetched

82
00:06:23.720 --> 00:06:26.000
at each of these different levels, and

83
00:06:26.000 --> 00:06:32.420
you can see that the hierarchy of the
views matches the hierarchy of the data.

84
00:06:32.420 --> 00:06:36.980
And also,
there may be places where we want

85
00:06:36.980 --> 00:06:40.990
to display information about each
of these objects on the screen.

86
00:06:40.990 --> 00:06:43.550
And the way I structured the example here,

87
00:06:43.550 --> 00:06:47.410
this will lend itself well visually
to what we're trying to do.

