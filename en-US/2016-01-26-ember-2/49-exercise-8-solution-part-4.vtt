WEBVTT

1
00:00:00.000 --> 00:00:03.778
[MUSIC]

2
00:00:03.778 --> 00:00:09.411
&gt;&gt; Mike North: The way you generate
an acceptance test is ember g acceptance

3
00:00:09.411 --> 00:00:14.713
test and then you will pass in
as the name of the acceptance

4
00:00:14.713 --> 00:00:19.573
test will be usually like
the URL you're visiting or

5
00:00:19.573 --> 00:00:25.449
the route you're visiting so
we're just gonna call it index.

6
00:00:32.723 --> 00:00:37.302
&gt;&gt; Mike North: And this is the default
setup here I'm gonna change this to

7
00:00:37.302 --> 00:00:42.255
acceptance index, so
we can see that what is happening is first

8
00:00:42.255 --> 00:00:45.619
we are visiting this
thing called index and

9
00:00:45.619 --> 00:00:51.610
then we are just verifying that the
current URL is what it's supposed to be.

10
00:00:51.610 --> 00:00:55.100
We can put a debugger inside and
then remember that you want it to be in

11
00:00:55.100 --> 00:01:01.020
the promise chain and
sure the URL says index but what's

12
00:01:01.020 --> 00:01:05.390
happened in fact is we've intermediate
transitioned to the error sub state.

13
00:01:05.390 --> 00:01:07.490
And so we're seeing oops on the page and

14
00:01:07.490 --> 00:01:11.350
that is because we're in
fact in the not found route.

15
00:01:15.410 --> 00:01:20.590
So we're going to visit
this page instead and

16
00:01:20.590 --> 00:01:24.240
verify that ultimately we end up on.

17
00:01:24.240 --> 00:01:28.780
Remember yesterday we set up
a redirect to take care of that.

18
00:01:28.780 --> 00:01:29.620
And this will pass.

19
00:01:29.620 --> 00:01:32.686
And just to prove to you guys
that the real app is running.

20
00:01:41.283 --> 00:01:42.120
&gt;&gt; Mike North: There it is.

21
00:01:43.140 --> 00:01:44.650
Right.
So, this is the whole app.

22
00:01:44.650 --> 00:01:46.970
We're not testing in isolation anymore.

23
00:01:46.970 --> 00:01:52.050
So, I have a little, I have a second
screen here with the instructions here.

24
00:01:52.050 --> 00:01:55.910
So, step one for
the acceptance test was to visit the page.

25
00:01:55.910 --> 00:01:58.340
We're gonna verify that
the current route name is correct.

26
00:02:00.080 --> 00:02:06.240
Just I've added a little mix
to give you guys some variety.

27
00:02:09.980 --> 00:02:14.835
And at orgs route and then the next step

28
00:02:14.835 --> 00:02:19.704
is to click on the Ember JS GitHub org.

29
00:02:43.247 --> 00:02:50.370
&gt;&gt; Mike North: And if we look at
where we ended up we're in the Ember.

30
00:02:50.370 --> 00:02:55.176
And we're going to, from that point on,
verify that the current url is correct.

31
00:03:01.801 --> 00:03:05.876
&gt;&gt; Mike North: And
it should be org/emberjs/repos.

32
00:03:05.876 --> 00:03:08.760
It's again testing our redirect, right,

33
00:03:08.760 --> 00:03:12.408
testing that we've actually
forwarded through and made it there.

34
00:03:12.408 --> 00:03:17.171
Whoop, leading /
&gt;&gt; Speaker 2: CurrentUrl was

35
00:03:17.171 --> 00:03:20.280
return of relative.

36
00:03:23.770 --> 00:03:29.070
&gt;&gt; Speaker 2: Obviously CurrentUrl is
returning to relative path, not the full

37
00:03:29.070 --> 00:03:34.364
So it will be the path component of
the url, it will emit the hostname and

38
00:03:34.364 --> 00:03:39.750
the and at repos page.

39
00:03:39.750 --> 00:03:44.660
&gt;&gt; Mike North: The next step is to click
on the link for the ember data repo.

40
00:03:45.740 --> 00:03:48.978
Use our same selector here more or less.

41
00:04:05.385 --> 00:04:07.514
&gt;&gt; Mike North: So
it's saying org not found.

42
00:04:12.527 --> 00:04:15.635
&gt;&gt; Mike North: So
I'm gonna actually debug this here.

43
00:04:17.955 --> 00:04:20.446
Make sure that my selector's doing
what I think it should be doing

44
00:04:26.610 --> 00:04:27.847
&gt;&gt; Mike North: Come on.

45
00:04:34.063 --> 00:04:36.751
&gt;&gt; Mike North: So
that is the ember data link.

46
00:04:46.003 --> 00:04:47.890
&gt;&gt; Mike North: I know
what the problem is here.

47
00:04:47.890 --> 00:04:50.410
It was a bug that was already in the code.

48
00:04:50.410 --> 00:04:52.320
So if we look at what's happening.

49
00:04:52.320 --> 00:05:00.700
If we look at the console we're using
an incorrect attribute to form this URL.

50
00:05:00.700 --> 00:05:03.830
We're using the name of
the repo instead of the login.

51
00:05:03.830 --> 00:05:07.855
So we've caught a bug here and

52
00:05:07.855 --> 00:05:15.583
we just need to go there's
the org ID sorry it's in repo.

53
00:05:20.204 --> 00:05:21.964
&gt;&gt; Mike North: Org log in.

54
00:05:27.639 --> 00:05:28.897
&gt;&gt; Mike North: And now all the tests pass,

55
00:05:28.897 --> 00:05:32.140
because we know that that's what
the green bar at the top means there.

56
00:05:34.450 --> 00:05:38.630
So at that point we should be,
just verify the current URL

57
00:05:53.991 --> 00:05:56.575
&gt;&gt; Mike North: And we're gonna make sure

58
00:05:56.575 --> 00:06:01.278
that there are some thing
is in the issues list.

59
00:06:15.443 --> 00:06:16.712
&gt;&gt; Mike North: This is not gonna work.

60
00:06:42.645 --> 00:06:51.570
&gt;&gt; Mike North: Issues LI
&gt;&gt; Mike North: And I think

61
00:06:51.570 --> 00:06:57.589
just make sure there is something there

62
00:07:09.642 --> 00:07:14.190
&gt;&gt; Mike North: And you can see that we're
accumulating a nice little workflow here.

63
00:07:14.190 --> 00:07:22.240
And the last step is gonna be to click on
the collaborator's or contributor's link.

64
00:07:22.240 --> 00:07:25.525
&gt;&gt; Speaker 2: If there's other
issues it's gonna break out test up.

65
00:07:25.525 --> 00:07:30.449
&gt;&gt; Mike North: [LAUGH] Well, it will but
I'm gonna drop something in that will

66
00:07:31.830 --> 00:07:35.433
have us testing sample data instead of.

67
00:07:35.433 --> 00:07:37.050
[INAUDIBLE] the appropriate test.

68
00:07:41.968 --> 00:07:49.295
&gt;&gt; Mike North: Contributors
&gt;&gt; Mike North: Okay [NOISE],

69
00:07:49.295 --> 00:07:51.457
something's up here.

70
00:07:51.457 --> 00:07:52.980
Some contributors.

71
00:08:02.830 --> 00:08:04.680
See if there actually
are items in that list.

72
00:08:08.410 --> 00:08:08.910
There are.

73
00:08:15.122 --> 00:08:15.907
&gt;&gt; Mike North: I think I called it.

74
00:08:18.335 --> 00:08:20.330
&gt;&gt; Mike North: Yup, my bad.

75
00:08:31.455 --> 00:08:32.750
&gt;&gt; Mike North: All right, end on green.

76
00:08:32.750 --> 00:08:35.320
So that's our full acceptance test here.

77
00:08:35.320 --> 00:08:39.760
Sorry that was a little bit of a slog but
the point is that

78
00:08:40.880 --> 00:08:45.820
in only 25 lines of code here we
are able to kind of drill pretty

79
00:08:45.820 --> 00:08:50.340
deeply into our whole route hierarchy and
we are doing a bunch of pivots.

80
00:08:50.340 --> 00:08:57.215
There's a lot of surface level coverage
regaining in writing a test like this,

81
00:08:57.215 --> 00:09:03.090
and it's pretty readable considering
that the alternative would be

82
00:09:04.160 --> 00:09:10.630
either the famous Node.js pyramid of doom
call backs and call backs and call backs.

83
00:09:10.630 --> 00:09:12.720
Or a whole lot of promise chaining.

84
00:09:12.720 --> 00:09:17.160
The effort here is to let you write
a test that really has a lot of

85
00:09:17.160 --> 00:09:22.210
asynchrony baked into it
as if it were synchronous.

86
00:09:22.210 --> 00:09:26.590
And I'm quite excited about
when we have support for

87
00:09:26.590 --> 00:09:31.210
Async 08 and things like JS Hint and
all the tooling.

88
00:09:31.210 --> 00:09:34.810
So that we can, even to a higher degree,

89
00:09:37.120 --> 00:09:42.301
have this look like code and
even mix it with code

90
00:09:42.301 --> 00:09:47.760
at that language level
instead of having to rely on.

91
00:09:47.760 --> 00:09:51.370
So, last thing, drop in pretender.

92
00:09:51.370 --> 00:09:54.060
It's a really quick since
I kinda did it in advance.

93
00:09:54.060 --> 00:09:59.297
[SOUND] So just to query this
Json function at the top,

94
00:09:59.297 --> 00:10:01.684
so we can make use of it.

95
00:10:04.848 --> 00:10:08.613
&gt;&gt; Mike North: Make the server available
so that we can shut it down on the end.

96
00:10:16.721 --> 00:10:19.350
&gt;&gt; Mike North: And
fix my indent and then we're good.

97
00:10:27.605 --> 00:10:28.665
And server dot shut down,

98
00:10:28.665 --> 00:10:33.055
all that's doing is giving you back
the real XML HTTP request object.

99
00:10:34.075 --> 00:10:37.205
And, dear, tests are failing.

100
00:10:37.205 --> 00:10:38.285
Some issues.

101
00:10:38.285 --> 00:10:38.785
So.

102
00:10:43.590 --> 00:10:44.440
At and then.

103
00:10:47.560 --> 00:10:51.370
So a good thing to do if there are errors
that don't pop up in the console,

104
00:10:51.370 --> 00:10:54.350
is you can disable tricache.

105
00:10:54.350 --> 00:10:57.936
&gt;&gt; Speaker 3: You said greater than two,
you have two of each?

106
00:10:57.936 --> 00:10:59.280
&gt;&gt; Mike North: Thank you.

107
00:10:59.280 --> 00:11:00.740
Good catch.

108
00:11:00.740 --> 00:11:01.632
&gt;&gt; Speaker 4: Gotta beat more issues.

109
00:11:05.728 --> 00:11:07.860
&gt;&gt; Mike North: Fantastic, all right.

110
00:11:07.860 --> 00:11:11.870
So we're passing now and
if we look at the Network tab,

111
00:11:13.810 --> 00:11:18.200
no real API requests or send out.

112
00:11:18.200 --> 00:11:24.350
This is strictly on the UI side and

113
00:11:24.350 --> 00:11:28.220
so this is how you'd want to set things
up if you're running on Travesia and

114
00:11:28.220 --> 00:11:30.840
don't want a bunch of random
traffic coming into your API.

