WEBVTT

1
00:00:00.000 --> 00:00:03.946
[MUSIC]

2
00:00:03.946 --> 00:00:09.646
&gt;&gt; Speaker 1: The router is an area of the
app that few people have trouble with, but

3
00:00:09.646 --> 00:00:16.550
also few people understand deeply enough
to take advantage of its true potential.

4
00:00:17.930 --> 00:00:19.940
So there's one router per app.

5
00:00:19.940 --> 00:00:24.280
Until we get engines,
there's just one router per app.

6
00:00:24.280 --> 00:00:29.180
And the purpose of the router is to
manage transitions between URLs.

7
00:00:29.180 --> 00:00:33.550
You can think of this as
a finite state machine where

8
00:00:33.550 --> 00:00:37.430
essentially you're going from
URL A to URL B and it will,

9
00:00:38.700 --> 00:00:44.090
based on the intent of the user to
get between these two states, it will

10
00:00:44.090 --> 00:00:47.500
take you through a series of logical steps
where you can do some important things.

11
00:00:49.580 --> 00:00:52.710
Most of your work will be
basically filling in the blank for

12
00:00:52.710 --> 00:00:57.130
the router,
which is that mapping of URLs to states.

13
00:00:57.130 --> 00:01:01.130
An additional need to get into it
might be if you want to instrument

14
00:01:02.730 --> 00:01:04.710
page views in a single page app.

15
00:01:04.710 --> 00:01:09.990
Obviously pasting it in a Google Analytics
snipit is not gonna fly because,

16
00:01:09.990 --> 00:01:12.650
technically, there is one page view for
a single page app, and

17
00:01:12.650 --> 00:01:15.950
that's when you first enter it and
load the page.

18
00:01:15.950 --> 00:01:20.550
So the router is what you
would listen to monitor and

19
00:01:20.550 --> 00:01:22.370
beacon out information about that state.

20
00:01:23.910 --> 00:01:26.490
And there's a micro library at the core.

21
00:01:26.490 --> 00:01:30.850
This is one of those micro libraries that
we went over, and it's called router.js.

22
00:01:30.850 --> 00:01:32.715
So you can think of it this way.

23
00:01:32.715 --> 00:01:36.750
The Ember.Router builds on router.js,

24
00:01:36.750 --> 00:01:40.470
and at its core is route-recognizer.

25
00:01:40.470 --> 00:01:44.090
I'm explaining this to you because
when we start thinking about testing,

26
00:01:45.240 --> 00:01:48.590
we're gonna look at something else
that also depends on toute-recognizer,

27
00:01:48.590 --> 00:01:53.650
and I wanna make sure you guys
get the parallels between them.

28
00:01:53.650 --> 00:01:59.470
So here's how route-recognizer works,
and there are some key takeaways here.

29
00:01:59.470 --> 00:02:04.430
One is how do we define paths, and
these are an abstraction of a URL, right?

30
00:02:04.430 --> 00:02:08.810
So you see I've got things
called route handlers and

31
00:02:08.810 --> 00:02:13.450
we will give it,
we will give this route handler a name.

32
00:02:13.450 --> 00:02:16.940
Ember actually calls them
routes as opposed to routers.

33
00:02:17.940 --> 00:02:22.760
And it's something that deals
with being in that state or

34
00:02:22.760 --> 00:02:24.050
transitioning through that state.

35
00:02:25.470 --> 00:02:30.930
So in this case /posts/:id/comments.

36
00:02:30.930 --> 00:02:33.200
You can fill in that blank.

37
00:02:33.200 --> 00:02:37.924
You can fill in that ID with just
about anything except a forward slash.

38
00:02:37.924 --> 00:02:40.880
So post/37/comments.

39
00:02:40.880 --> 00:02:42.990
That fits this first route handler.

40
00:02:42.990 --> 00:02:43.710
That matches it.

41
00:02:44.970 --> 00:02:46.960
You can have route handlers for

42
00:02:46.960 --> 00:02:50.860
static paths that don't
have this blank to fill in.

43
00:02:52.780 --> 00:02:55.580
If I say dynamic segment
that's what I mean.

44
00:02:55.580 --> 00:02:57.150
ID is a dynamic segment.

45
00:02:59.230 --> 00:03:03.870
And then finally we can use
what we call a star segment,

46
00:03:03.870 --> 00:03:07.190
and this is another often overlooked and

47
00:03:07.190 --> 00:03:11.500
unappreciated feature of being
able to work with the router.

48
00:03:11.500 --> 00:03:16.680
The differences between the star segment
and the segment starting with a colon

49
00:03:16.680 --> 00:03:22.640
is that forward slash will be
matched when you use this last one.

50
00:03:22.640 --> 00:03:27.800
And the use case here would be a 404 page,
where you want,

51
00:03:27.800 --> 00:03:32.190
essentially, a catchall as
the lowest priority route.

52
00:03:32.190 --> 00:03:35.670
If you make it through all of your routes,
and they

53
00:03:38.480 --> 00:03:42.630
are prioritized in terms of
the order in which you define them.

54
00:03:42.630 --> 00:03:46.490
So, if you're lowest priority
catchall is something like this,

55
00:03:46.490 --> 00:03:50.950
potentially exactly like this,
/startpath, and

56
00:03:50.950 --> 00:03:57.030
you say that goes to not found,
then you've given Ember

57
00:03:57.030 --> 00:04:01.149
some way to handle everything, ultimately,
if it makes it all the way down.

58
00:04:04.680 --> 00:04:08.740
So, and this is basically
all route-recognizer does,

59
00:04:08.740 --> 00:04:12.880
you give it URL, it will return
the first available handler.

60
00:04:12.880 --> 00:04:17.320
And again, order matters,
it'll return the first available handler.

61
00:04:17.320 --> 00:04:21.822
So, higher up in the file
is higher priority.

62
00:04:21.822 --> 00:04:26.810
What router.js adds

63
00:04:26.810 --> 00:04:31.750
to this is it makes
the handler more specific and

64
00:04:31.750 --> 00:04:36.330
it builds it into this,
it adds this concept of the state machine.

65
00:04:36.330 --> 00:04:42.870
It is super, super simple, and
all I want you to really look at is

66
00:04:42.870 --> 00:04:48.680
most of this top left, we'll come back
to this slide, but here I'm saying,

67
00:04:48.680 --> 00:04:53.598
if you give me post/id,
which could be post/37,

68
00:04:53.598 --> 00:04:58.420
I want to deal with this by going
to a route handler called showPost.

69
00:04:58.420 --> 00:05:02.320
And there is some mechanism for actually
doing something with that information.

