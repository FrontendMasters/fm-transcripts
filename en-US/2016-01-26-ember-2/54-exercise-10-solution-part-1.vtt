WEBVTT

1
00:00:00.000 --> 00:00:03.743
[MUSIC]

2
00:00:03.743 --> 00:00:08.951
&gt;&gt; Mike North: I'm gonna jump in and
I'm gonna use this.store

3
00:00:08.951 --> 00:00:15.557
instead of jquery.get and
I will build off of RESTAdapter and

4
00:00:15.557 --> 00:00:20.893
RESTSerializer, which
are some convenient base

5
00:00:20.893 --> 00:00:26.120
classes that handle some
common JSON behavior.

6
00:00:27.680 --> 00:00:32.070
I'm going to use query and queryRecord
which typically would be used for

7
00:00:32.070 --> 00:00:33.900
query params.

8
00:00:33.900 --> 00:00:35.690
In this case it's an easy way for

9
00:00:35.690 --> 00:00:40.960
me to build some non-standard
URLs to talk to GitHub.

10
00:00:43.880 --> 00:00:47.906
And so I'll have to customize
two methods in my adapter and

11
00:00:47.906 --> 00:00:53.014
I'm going to see if I can make
an application serialized with it handles.

12
00:00:53.014 --> 00:00:56.609
Basically everything that I need
to normalize across the whole app.

13
00:01:04.668 --> 00:01:10.865
&gt;&gt; Mike North: All right, so,
beginning with ember CLI.

14
00:01:19.710 --> 00:01:24.350
&gt;&gt; Mike North: So
I've got an org and I've got a repo.

15
00:01:27.171 --> 00:01:34.972
&gt;&gt; Mike North: And if I look at,
&gt;&gt; Mike North: Githubrepo.hbs,

16
00:01:34.972 --> 00:01:39.680
I just wanna see what do I depend on,
what properties do I need?

17
00:01:39.680 --> 00:01:44.936
So I need a name, and an ID actually
comes for free with an ember-data model.

18
00:01:44.936 --> 00:01:48.083
It's implied that you have an id,
you do not need to define it.

19
00:01:48.083 --> 00:01:54.530
In fact things will not work properly
unless you have an id on each record.

20
00:01:56.290 --> 00:01:59.533
So, all right, we'll start with name and.

21
00:02:06.622 --> 00:02:10.782
&gt;&gt; Mike North: Just need a string there
and in an org, I know I need a login.

22
00:02:19.219 --> 00:02:20.787
&gt;&gt; Mike North: And your also has a name.

23
00:02:25.297 --> 00:02:29.189
&gt;&gt; Mike North: And we're probably gonna
need something for that image URL but

24
00:02:29.189 --> 00:02:31.840
we'll get there when we get there.

25
00:02:31.840 --> 00:02:36.150
Now it's important to define
this stuff on your models.

26
00:02:36.150 --> 00:02:40.610
A lot of data is coming in from GitHub but
the only things that will be available for

27
00:02:40.610 --> 00:02:44.088
use on these records are things
that I've defined on my model,

28
00:02:44.088 --> 00:02:46.270
attributes I've defined on my model.

29
00:02:49.290 --> 00:02:53.820
So as we start seeing things turn
blank we know we have to go back and

30
00:02:54.880 --> 00:02:57.620
take a look at what's coming through.

31
00:02:57.620 --> 00:03:04.558
So I'm also going to create an adapter and
a serializer.

32
00:03:13.499 --> 00:03:17.470
&gt;&gt; Mike North: So we've got an application
adapter that extends from rest adapter.

33
00:03:17.470 --> 00:03:22.770
And we've got an application serializer
extending from rest serializer.

34
00:03:22.770 --> 00:03:27.140
And I know that I'm gonna need
to use normalize response.

35
00:03:31.492 --> 00:03:36.941
&gt;&gt; Mike North: So I'm just gonna get
the signature there since I have

36
00:03:36.941 --> 00:03:43.491
all of the arguments [NOISE] a serializer,
normalize response.

37
00:03:43.491 --> 00:03:45.113
So I just need this.

38
00:03:48.338 --> 00:03:48.838
&gt;&gt; Mike North: Oops.

39
00:03:50.966 --> 00:03:52.660
&gt;&gt; Mike North: That's odd.

40
00:03:52.660 --> 00:03:53.387
[LAUGH].

41
00:04:00.320 --> 00:04:03.542
&gt;&gt; Mike North: Fantastic, and we are back.

42
00:04:03.542 --> 00:04:08.809
&gt;&gt; [INAUDIBLE]

43
00:04:15.365 --> 00:04:18.279
&gt;&gt; Mike North: All right, so now I'm going

44
00:04:18.279 --> 00:04:24.361
to make the first little switch
by going to the repos route.

45
00:04:26.519 --> 00:04:29.111
&gt;&gt; Mike North: And gonna get rid of this.

46
00:04:32.504 --> 00:04:37.845
&gt;&gt; Mike North: Actually I'll still need
this thing on the top, the org id,

47
00:04:37.845 --> 00:04:42.455
and instead I'm going to
return this store query and

48
00:04:42.455 --> 00:04:48.445
I'm gonna query for object of type
repo and the argument for query.

49
00:04:48.445 --> 00:04:50.786
So this is a great thing to use for
a search or

50
00:04:50.786 --> 00:04:54.270
something where you're passing
a lot of query params along.

51
00:04:54.270 --> 00:04:58.161
That's by default what this configuration
object, the second argument here will do.

52
00:04:59.310 --> 00:05:00.734
But I wanna pass org id.

53
00:05:06.870 --> 00:05:09.890
&gt;&gt; Mike North: And
I'm getting an error, which I expect.

54
00:05:09.890 --> 00:05:14.190
So if we look at the error,
it's saying that

55
00:05:16.760 --> 00:05:20.090
local host 4200 repos has failed.

56
00:05:21.410 --> 00:05:23.860
That's because I'm not running
the get hub API locally.

57
00:05:26.560 --> 00:05:31.367
So here, we're just going to go host.

58
00:05:31.367 --> 00:05:35.634
GitHub.com and we'll see that the request
will start going out to GitHub.

59
00:05:37.498 --> 00:05:40.530
&gt;&gt; Mike North: So still errors.

60
00:05:40.530 --> 00:05:42.250
Okay repos is not found.

61
00:05:42.250 --> 00:05:45.699
So it's using sort of the default

62
00:05:46.770 --> 00:05:51.620
URL schema that Ember
data has out of the box.

63
00:05:51.620 --> 00:05:53.640
It's completely customizable.

64
00:05:53.640 --> 00:05:57.696
But this is not going to work for
us as it stands now.

65
00:05:57.696 --> 00:06:02.221
So I'm going to go back to my example
here, which is actually a good start.

66
00:06:04.311 --> 00:06:08.855
&gt;&gt; Mike North: [NOISE] And
grab this URL for query method.

67
00:06:12.489 --> 00:06:17.590
&gt;&gt; Mike North: So what we're doing here
is in the case that the model name

68
00:06:17.590 --> 00:06:24.203
we're asking for is repo, I'm going
to build a URL that looks like this.

69
00:06:26.592 --> 00:06:30.470
&gt;&gt; Mike North: Otherwise fallback to
whatever this method used to be doing.

70
00:06:33.460 --> 00:06:40.190
All right, so
still getting errors, awesome.

71
00:06:41.880 --> 00:06:46.840
So this is a great feature of Ember Data,
it's actually,

72
00:06:46.840 --> 00:06:50.490
because there is this consistent
internal data structure,

73
00:06:50.490 --> 00:06:53.680
everything is built around
this JSON API concept.

74
00:06:53.680 --> 00:06:58.960
We can actually validate that
something is wrong in the serializer.

75
00:06:58.960 --> 00:07:02.110
That what I've passed it is
in fact an invalid object.

76
00:07:02.110 --> 00:07:06.770
If we didn't have this convention, we sort
of have to put more responsibility on

77
00:07:06.770 --> 00:07:11.640
the developer to say maybe you
intended to pass undefined through me.

78
00:07:11.640 --> 00:07:12.320
I don't know.

79
00:07:13.520 --> 00:07:17.640
In this case,
we can give some valid feedback here.

80
00:07:17.640 --> 00:07:21.240
So it's telling me top level
thing must be an object and

81
00:07:21.240 --> 00:07:25.290
that I need to look at normalizeResponse.

82
00:07:25.290 --> 00:07:25.980
Some great feedback.

83
00:07:27.780 --> 00:07:31.941
So let's just let this pass through for
now.

84
00:07:40.163 --> 00:07:42.243
&gt;&gt; Mike North: And
we need to make sure we're turning that.

85
00:07:44.498 --> 00:07:48.515
&gt;&gt; Mike North: So now we have this method
but it is not really doing anything,

86
00:07:48.515 --> 00:07:51.076
I just wanna see that the error is here.

87
00:07:51.076 --> 00:07:55.481
All right so It's saying it
encountered 16 in the payload,

88
00:07:55.481 --> 00:07:58.540
but no model was found for model name 16.

89
00:07:58.540 --> 00:08:04.660
It's really just trying to
deserialize a whole bunch of stuff.

90
00:08:05.840 --> 00:08:06.939
So here's what's happening.

91
00:08:07.970 --> 00:08:14.429
Ember data wants to recieve it's
Json in the following form.

92
00:08:14.429 --> 00:08:15.795
Something that looks like this.

93
00:08:15.795 --> 00:08:21.885
That would be for a list of repos.

94
00:08:21.885 --> 00:08:24.231
That would be for one repo.

95
00:08:24.231 --> 00:08:27.340
Singular versus plural matters.

96
00:08:27.340 --> 00:08:30.690
That is how it can detect whether
it should deserialize a list or

97
00:08:30.690 --> 00:08:32.300
deserialize an object.

98
00:08:32.300 --> 00:08:35.450
In this case this is
what we're passing it.

99
00:08:36.960 --> 00:08:41.600
And so
it's probably doing I suspect like a for

100
00:08:41.600 --> 00:08:45.210
in loop and
these are the indices of the array.

101
00:08:45.210 --> 00:08:47.289
Not property keys as it expects.

102
00:08:48.560 --> 00:08:53.106
So, what we need to do first is this.

103
00:08:56.470 --> 00:09:00.182
&gt;&gt; Mike North: We could fix this,
like that.

104
00:09:03.632 --> 00:09:07.780
&gt;&gt; Mike North: And
we're getting some data back.

105
00:09:07.780 --> 00:09:11.740
Now, we left some stuff out of our model,
so we're getting undefined here.

106
00:09:11.740 --> 00:09:14.395
We just simply need to go back
to our model here and do.

107
00:09:14.395 --> 00:09:16.326
&gt;&gt; Speaker 2: Forks count.

108
00:09:16.326 --> 00:09:17.061
&gt;&gt; Mike North: Thank you.

109
00:09:17.061 --> 00:09:19.209
[LAUGH]
&gt;&gt; Speaker 3: [CROSSTALK] Or

110
00:09:19.209 --> 00:09:20.065
watchers count.

111
00:09:20.065 --> 00:09:24.354
[CROSSTALK] Watchers is valid too.

112
00:09:30.368 --> 00:09:34.780
&gt;&gt; Mike North: And ta da, very much
starting to look like what we want.

