WEBVTT

1
00:00:00.000 --> 00:00:03.718
[MUSIC]

2
00:00:03.718 --> 00:00:08.318
&gt;&gt; Mike North: Now you'll notice
that I'm clicking on this thing and

3
00:00:08.318 --> 00:00:11.330
it's not actually toggling back.

4
00:00:11.330 --> 00:00:12.770
Who has an idea about why this is

5
00:00:14.985 --> 00:00:17.775
not working?
&gt;&gt; Speaker 2: Haven't done any remove from

6
00:00:17.775 --> 00:00:19.065
ray.
&gt;&gt; Mike North: Right, so

7
00:00:19.065 --> 00:00:24.115
we took the click action on
the word favorite to mean add.

8
00:00:24.115 --> 00:00:27.605
It was explicitly add.

9
00:00:27.605 --> 00:00:32.538
So I'm gonna actually go a little step
further here just to round this out and

10
00:00:32.538 --> 00:00:36.794
I'm gonna change the logic a little bit so
that we're toggling.

11
00:00:36.794 --> 00:00:40.700
We're not really just adding
when a click happens.

12
00:00:40.700 --> 00:00:42.690
And so
I'm just gonna trace my way through.

13
00:00:42.690 --> 00:00:44.151
So we've got favorite was clicked.

14
00:00:44.151 --> 00:00:48.150
I think that's still an appropriate
name for this action.

15
00:00:48.150 --> 00:00:52.725
I'm passing along the org, so I think the
components actually are already flexible

16
00:00:52.725 --> 00:00:56.902
enough.
&gt;&gt; Mike North: So here,

17
00:00:56.902 --> 00:01:02.870
if the favorite was clicked,
we've got favorite item here.

18
00:01:03.900 --> 00:01:09.034
So, I'm just going to add the logic

19
00:01:09.034 --> 00:01:14.682
right here, so if this get favorites,

20
00:01:14.682 --> 00:01:20.000
items index of org is less than zero.

21
00:01:21.250 --> 00:01:24.336
So if it's absent in the list, add it.

22
00:01:30.655 --> 00:01:31.794
&gt;&gt; Mike North: I'm going to save and

23
00:01:31.794 --> 00:01:34.960
make sure that my existing
stuff still works.

24
00:01:34.960 --> 00:01:38.257
Sweet, it does.

25
00:01:38.257 --> 00:01:45.213
Else.
&gt;&gt; Mike North: We're gonna go,

26
00:01:45.213 --> 00:01:46.134
unfavorite item.

27
00:01:46.134 --> 00:01:50.876
And then that's not a method available
on my service so I going to add it

28
00:01:57.234 --> 00:01:57.990
&gt;&gt; Mike North: Just for

29
00:01:57.990 --> 00:02:03.577
fun
&gt;&gt; Mike North: Do this.

30
00:02:20.141 --> 00:02:22.231
&gt;&gt; Mike North: And I've forgotten a comma,

31
00:02:22.231 --> 00:02:29.288
and I forgot to rename this.
&gt;&gt; Mike North: All

32
00:02:29.288 --> 00:02:34.574
right
&gt;&gt; Mike North: Now we're toggling back and

33
00:02:34.574 --> 00:02:36.820
forth, so, this rounds it out.

34
00:02:36.820 --> 00:02:41.011
Now we have this state that's shareable.

35
00:02:41.011 --> 00:02:42.409
The route knows about it.

36
00:02:44.360 --> 00:02:47.231
The component knows about it.

37
00:02:47.231 --> 00:02:51.986
And you can see how we are using actions
to kinda bubble up and alter state and

38
00:02:51.986 --> 00:02:55.781
how we can have both data and
functionality on the service.

39
00:02:55.781 --> 00:03:01.298
And we are using a computered property
to make a value that we can bind to,

40
00:03:01.298 --> 00:03:04.735
based on the state of
the component itself and

41
00:03:04.735 --> 00:03:08.550
the service we've injected
onto the component.

42
00:03:10.590 --> 00:03:12.550
Any questions about how this was done,

43
00:03:12.550 --> 00:03:17.096
or why I did things the way I did?
&gt;&gt; Speaker 3: There's

44
00:03:17.096 --> 00:03:18.570
a question from online.

45
00:03:18.570 --> 00:03:20.688
It came a little while back, but

46
00:03:20.688 --> 00:03:25.730
they don't understand why you're using
the list key dot square brackets.

47
00:03:25.730 --> 00:03:28.330
Why couldn't that have
been listed instead of

48
00:03:28.330 --> 00:03:31.737
using the string interpolation approach?
&gt;&gt; Mike North: So, list key,

49
00:03:31.737 --> 00:03:38.389
square brackets,
why couldn't that have been listed?

50
00:03:38.389 --> 00:03:41.841
So, list key, this is gonna be something

51
00:03:41.841 --> 00:03:47.425
like
&gt;&gt; Mike North: Like this and

52
00:03:47.425 --> 00:03:52.124
as we discussed going through
the lead in talk to this,

53
00:03:52.124 --> 00:03:57.640
to this exercise to observe an array,
you have to either observe

54
00:03:57.640 --> 00:04:04.380
the length of the array via square
brackets or you observe using at each.

55
00:04:04.380 --> 00:04:08.870
If I were to just directly
observe listKey, what that means,

56
00:04:08.870 --> 00:04:10.630
if I were to just do something like this,

57
00:04:11.760 --> 00:04:16.430
effectively what I'm saying is if you
set this property to a brand new array,

58
00:04:16.430 --> 00:04:22.060
a completely new array,
if I set favorites dot items to

59
00:04:22.060 --> 00:04:27.710
array literal square brackets, then that
would cause the cache here to invalidate.

60
00:04:27.710 --> 00:04:31.900
But that is not the typical way
that you deal with these things.

61
00:04:31.900 --> 00:04:36.810
And furthermore,
that operation would cause some problems

62
00:04:36.810 --> 00:04:41.920
with anything that's observing through
square brackets or through at each because

63
00:04:41.920 --> 00:04:47.170
potentially or almost definitely,
you're returning a brand new object.

64
00:04:48.760 --> 00:04:52.241
Discarding the object that
everything else was listening to.

65
00:04:54.341 --> 00:04:55.206
&gt;&gt; Speaker 3: So just quick,

66
00:04:55.206 --> 00:04:57.860
he's following up on a question, sorry.

67
00:04:57.860 --> 00:05:01.990
But he's actually asking not about the
brackets so much, as about the back tick

68
00:05:01.990 --> 00:05:04.970
to the list argument.
&gt;&gt; Mike North: The back tick

69
00:05:04.970 --> 00:05:07.889
to the list argument.
&gt;&gt; Speaker 4: That's the ES

70
00:05:08.970 --> 00:05:10.150
&gt;&gt; Mike North: This here so this is.

71
00:05:10.150 --> 00:05:11.470
&gt;&gt; Speaker 4: String interpolation.

72
00:05:11.470 --> 00:05:13.110
&gt;&gt; Mike North: Yes string interpolation

73
00:05:13.110 --> 00:05:15.010
if we look at how it's transpiled.

74
00:05:16.580 --> 00:05:20.320
Perfect, this is what it looks like
after it's gone through babel.

75
00:05:21.430 --> 00:05:24.740
So ultimately this is what you're getting.

76
00:05:24.740 --> 00:05:29.690
I have a habit of doing this, because as
you build complex strings having plus,

77
00:05:29.690 --> 00:05:33.456
plus, plus, plus, plus,
plus starts to become annoying.

78
00:05:33.456 --> 00:05:37.010
And expensive, cuz you create a brand new
string at literal every single time you do

79
00:05:39.270 --> 00:05:41.340
that.
&gt;&gt; Speaker 2: Aren't you doing that

80
00:05:41.340 --> 00:05:42.330
anyway?
&gt;&gt; Mike North: Here

81
00:05:42.330 --> 00:05:44.820
you're doing that anyway, you're right.
&gt;&gt; Speaker 2: [INAUDIBLE] browser.

82
00:05:46.990 --> 00:05:47.630
&gt;&gt; Speaker 4: Yeah one's

83
00:05:47.630 --> 00:05:49.160
browser support [INAUDIBLE].
&gt;&gt; Mike North: Yeah.

84
00:05:49.160 --> 00:05:50.860
&gt;&gt; Speaker 4: Six string literals then it

85
00:05:50.860 --> 00:05:52.550
won't transpile into that.

86
00:05:52.550 --> 00:05:57.100
&gt;&gt; Mike North: Actually
&gt;&gt; Mike North: So

87
00:05:57.100 --> 00:05:59.420
Chrome is one of those
browsers that does it.

88
00:06:00.450 --> 00:06:04.830
Chrome will actually read
an ES6 string literal directly.

89
00:06:04.830 --> 00:06:08.983
But again we're building ES5 because we
don't know that we're using Chrome for

90
00:06:08.983 --> 00:06:11.368
a fact.
&gt;&gt; Speaker 5: Can you explain now line

91
00:06:11.368 --> 00:06:12.818
three.
&gt;&gt; Mike North: Line

92
00:06:12.818 --> 00:06:15.400
three.
&gt;&gt; Speaker 5: It's not doing.

93
00:06:15.400 --> 00:06:16.682
&gt;&gt; Mike North: You guys gotta watch

94
00:06:16.682 --> 00:06:18.800
the ES6 Frontend Masters talk.

95
00:06:20.200 --> 00:06:23.890
This is called a destructured assignment.

96
00:06:23.890 --> 00:06:28.840
And the equivalent is,
I want to get rid of the default, so

97
00:06:28.840 --> 00:06:31.200
I will write it out normally.

98
00:06:31.200 --> 00:06:35.200
const computed equals Ember.computed.

99
00:06:35.200 --> 00:06:39.318
So I'm just kind of grabbing some
object off of another object,

100
00:06:39.318 --> 00:06:43.892
so that I can basically use it here
without having to say ember, ember,

101
00:06:43.892 --> 00:06:46.635
ember, ember, ember throughout all of my

102
00:06:46.635 --> 00:06:53.028
quote.
&gt;&gt; Mike North: Any

103
00:06:53.028 --> 00:06:56.676
other questions?
&gt;&gt; Speaker 2: I notice you didn't reach

104
00:06:56.676 --> 00:07:02.394
for the ember [INAUDIBLE] array contains.
&gt;&gt; Mike North: [CROSSTALK] Yes,

105
00:07:02.394 --> 00:07:09.417
I've seen enough feedback in pull
requests and things people asking for,

106
00:07:09.417 --> 00:07:14.113
is this real,
is this available on all browsers?

107
00:07:14.113 --> 00:07:18.779
So there is array contains and
hopefully that is coming to JavaScript

108
00:07:18.779 --> 00:07:22.535
natively soon, but this is,
people know what this means.

