WEBVTT

1
00:00:00.000 --> 00:00:03.718
[MUSIC]

2
00:00:03.718 --> 00:00:08.318
&gt;&gt; Mike North: Now you'll notice
that I'm clicking on this thing and

3
00:00:08.318 --> 00:00:11.330
it's not actually toggling back.

4
00:00:11.330 --> 00:00:15.575
Who has an idea about
why this is not working?

5
00:00:16.625 --> 00:00:18.275
&gt;&gt; Speaker 2: Haven't
done any remove from ray.

6
00:00:18.275 --> 00:00:24.115
&gt;&gt; Mike North: Right, so we took the click
action on the word favorite to mean add.

7
00:00:24.115 --> 00:00:27.605
It was explicitly add.

8
00:00:27.605 --> 00:00:32.538
So I'm gonna actually go a little step
further here just to round this out and

9
00:00:32.538 --> 00:00:36.794
I'm gonna change the logic a little bit so
that we're toggling.

10
00:00:36.794 --> 00:00:40.700
We're not really just adding
when a click happens.

11
00:00:40.700 --> 00:00:42.690
And so
I'm just gonna trace my way through.

12
00:00:42.690 --> 00:00:44.151
So we've got favorite was clicked.

13
00:00:44.151 --> 00:00:48.150
I think that's still an appropriate
name for this action.

14
00:00:48.150 --> 00:00:49.696
I'm passing along the org,

15
00:00:49.696 --> 00:00:53.246
so I think the components actually
are already flexible enough.

16
00:00:55.986 --> 00:01:02.870
&gt;&gt; Mike North: So here, if the favorite
was clicked, we've got favorite item here.

17
00:01:03.900 --> 00:01:09.034
So, I'm just going to add the logic

18
00:01:09.034 --> 00:01:14.682
right here, so if this get favorites,

19
00:01:14.682 --> 00:01:20.000
items index of org is less than zero.

20
00:01:21.250 --> 00:01:24.336
So if it's absent in the list, add it.

21
00:01:30.655 --> 00:01:34.960
&gt;&gt; Mike North: I'm going to save and make
sure that my existing stuff still works.

22
00:01:34.960 --> 00:01:38.257
Sweet, it does.

23
00:01:38.257 --> 00:01:39.014
Else.

24
00:01:44.354 --> 00:01:46.134
&gt;&gt; Mike North: We're gonna go,
unfavorite item.

25
00:01:46.134 --> 00:01:50.876
And then that's not a method available
on my service so I going to add it

26
00:01:57.234 --> 00:01:57.990
&gt;&gt; Mike North: Just for

27
00:01:57.990 --> 00:02:03.577
fun
&gt;&gt; Mike North: Do this.

28
00:02:20.141 --> 00:02:24.241
&gt;&gt; Mike North: And I've forgotten a comma,
and I forgot to rename this.

29
00:02:29.041 --> 00:02:34.574
&gt;&gt; Mike North: All right
&gt;&gt; Mike North: Now we're toggling back and

30
00:02:34.574 --> 00:02:36.820
forth, so, this rounds it out.

31
00:02:36.820 --> 00:02:41.011
Now we have this state that's shareable.

32
00:02:41.011 --> 00:02:42.409
The route knows about it.

33
00:02:44.360 --> 00:02:47.231
The component knows about it.

34
00:02:47.231 --> 00:02:51.986
And you can see how we are using actions
to kinda bubble up and alter state and

35
00:02:51.986 --> 00:02:55.781
how we can have both data and
functionality on the service.

36
00:02:55.781 --> 00:03:01.298
And we are using a computered property
to make a value that we can bind to,

37
00:03:01.298 --> 00:03:04.735
based on the state of
the component itself and

38
00:03:04.735 --> 00:03:08.550
the service we've injected
onto the component.

39
00:03:10.590 --> 00:03:14.730
Any questions about how this was done,
or why I did things the way I did?

40
00:03:16.790 --> 00:03:18.570
&gt;&gt; Speaker 3: There's
a question from online.

41
00:03:18.570 --> 00:03:20.688
It came a little while back, but

42
00:03:20.688 --> 00:03:25.730
they don't understand why you're using
the list key dot square brackets.

43
00:03:25.730 --> 00:03:28.330
Why couldn't that have
been listed instead of

44
00:03:28.330 --> 00:03:29.941
using the string interpolation approach?

45
00:03:29.941 --> 00:03:33.950
&gt;&gt; Mike North: So,
list key, square brackets,

46
00:03:33.950 --> 00:03:38.389
why couldn't that have been listed?

47
00:03:38.389 --> 00:03:41.841
So, list key, this is gonna be something

48
00:03:41.841 --> 00:03:47.425
like
&gt;&gt; Mike North: Like this and

49
00:03:47.425 --> 00:03:52.124
as we discussed going through
the lead in talk to this,

50
00:03:52.124 --> 00:03:57.640
to this exercise to observe an array,
you have to either observe

51
00:03:57.640 --> 00:04:04.380
the length of the array via square
brackets or you observe using at each.

52
00:04:04.380 --> 00:04:08.870
If I were to just directly
observe listKey, what that means,

53
00:04:08.870 --> 00:04:10.630
if I were to just do something like this,

54
00:04:11.760 --> 00:04:16.430
effectively what I'm saying is if you
set this property to a brand new array,

55
00:04:16.430 --> 00:04:22.060
a completely new array,
if I set favorites dot items to

56
00:04:22.060 --> 00:04:27.710
array literal square brackets, then that
would cause the cache here to invalidate.

57
00:04:27.710 --> 00:04:31.900
But that is not the typical way
that you deal with these things.

58
00:04:31.900 --> 00:04:36.810
And furthermore,
that operation would cause some problems

59
00:04:36.810 --> 00:04:41.920
with anything that's observing through
square brackets or through at each because

60
00:04:41.920 --> 00:04:47.170
potentially or almost definitely,
you're returning a brand new object.

61
00:04:48.760 --> 00:04:52.241
Discarding the object that
everything else was listening to.

62
00:04:54.341 --> 00:04:57.860
&gt;&gt; Speaker 3: So just quick,
he's following up on a question, sorry.

63
00:04:57.860 --> 00:05:00.650
But he's actually asking not
about the brackets so much,

64
00:05:00.650 --> 00:05:03.870
as about the back tick
to the list argument.

65
00:05:03.870 --> 00:05:06.910
&gt;&gt; Mike North: The back
tick to the list argument.

66
00:05:06.910 --> 00:05:10.150
&gt;&gt; Speaker 4: That's the ES
&gt;&gt; Mike North: This here so this is.

67
00:05:10.150 --> 00:05:11.470
&gt;&gt; Speaker 4: String interpolation.

68
00:05:11.470 --> 00:05:15.010
&gt;&gt; Mike North: Yes string interpolation
if we look at how it's transpiled.

69
00:05:16.580 --> 00:05:20.320
Perfect, this is what it looks like
after it's gone through babel.

70
00:05:21.430 --> 00:05:24.740
So ultimately this is what you're getting.

71
00:05:24.740 --> 00:05:29.690
I have a habit of doing this, because as
you build complex strings having plus,

72
00:05:29.690 --> 00:05:33.456
plus, plus, plus, plus,
plus starts to become annoying.

73
00:05:33.456 --> 00:05:34.064
And expensive,

74
00:05:34.064 --> 00:05:39.470
cuz you create a brand new string at
literal every single time you do that.

75
00:05:39.470 --> 00:05:42.120
&gt;&gt; Speaker 2: Aren't
you doing that anyway?

76
00:05:42.120 --> 00:05:44.035
&gt;&gt; Mike North: Here you're doing
that anyway, you're right.

77
00:05:44.035 --> 00:05:44.820
&gt;&gt; Speaker 2: [INAUDIBLE] browser.

78
00:05:46.990 --> 00:05:48.970
&gt;&gt; Speaker 4: Yeah one's
browser support [INAUDIBLE].

79
00:05:48.970 --> 00:05:50.040
&gt;&gt; Mike North: Yeah.
&gt;&gt; Speaker 4: Six string

80
00:05:50.040 --> 00:05:52.550
literals then it won't
transpile into that.

81
00:05:52.550 --> 00:05:57.100
&gt;&gt; Mike North: Actually
&gt;&gt; Mike North: So

82
00:05:57.100 --> 00:05:59.420
Chrome is one of those
browsers that does it.

83
00:06:00.450 --> 00:06:04.830
Chrome will actually read
an ES6 string literal directly.

84
00:06:04.830 --> 00:06:08.141
But again we're building ES5
because we don't know that we're

85
00:06:08.141 --> 00:06:09.414
using Chrome for a fact.

86
00:06:09.414 --> 00:06:12.055
&gt;&gt; Speaker 5: Can you
explain now line three.

87
00:06:12.055 --> 00:06:14.930
&gt;&gt; Mike North: Line three.

88
00:06:14.930 --> 00:06:16.682
&gt;&gt; Speaker 5: It's not doing.
&gt;&gt; Mike North: You guys gotta watch

89
00:06:16.682 --> 00:06:18.800
the ES6 Frontend Masters talk.

90
00:06:20.200 --> 00:06:23.890
This is called a destructured assignment.

91
00:06:23.890 --> 00:06:28.840
And the equivalent is,
I want to get rid of the default, so

92
00:06:28.840 --> 00:06:31.200
I will write it out normally.

93
00:06:31.200 --> 00:06:35.200
const computed equals Ember.computed.

94
00:06:35.200 --> 00:06:39.470
So I'm just kind of grabbing some
object off of another object, so

95
00:06:39.470 --> 00:06:44.425
that I can basically use it here without
having to say ember, ember, ember,

96
00:06:44.425 --> 00:06:47.193
ember, ember throughout all of my quote.

97
00:06:52.773 --> 00:06:54.393
&gt;&gt; Mike North: Any other questions?

98
00:06:54.393 --> 00:07:00.833
&gt;&gt; Speaker 2: I notice you didn't reach
for the ember [INAUDIBLE] array contains.

99
00:07:00.833 --> 00:07:06.853
&gt;&gt; Mike North: [CROSSTALK] Yes, I've seen
enough feedback in pull requests and

100
00:07:06.853 --> 00:07:14.113
things people asking for, is this real,
is this available on all browsers?

101
00:07:14.113 --> 00:07:18.779
So there is array contains and
hopefully that is coming to JavaScript

102
00:07:18.779 --> 00:07:22.535
natively soon, but this is,
people know what this means.

