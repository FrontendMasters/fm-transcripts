WEBVTT

1
00:00:00.000 --> 00:00:03.755
[MUSIC]

2
00:00:03.755 --> 00:00:08.648
&gt;&gt; Mike: We're gonna talk about templates,
so we're diving into one of these flavors

3
00:00:08.648 --> 00:00:13.778
of objects, and this is the first one that
I'm choosing to talk to you guys about.

4
00:00:17.574 --> 00:00:22.075
&gt;&gt; Mike: So, who's seen something
like this before, right?

5
00:00:22.075 --> 00:00:29.057
Handlebars has been used for quite
a while outside the context of Ember,

6
00:00:29.057 --> 00:00:34.209
and essentially what it does
is it allows you to define

7
00:00:34.209 --> 00:00:41.307
some dynamic piece of HTML where you
can insert control flow structures,

8
00:00:41.307 --> 00:00:45.795
and you can insert data
to be populated later.

9
00:00:45.795 --> 00:00:50.597
Essentially, you can compile
this into something, and

10
00:00:50.597 --> 00:00:56.197
then at runtime you can populate it
with data and turn it into HTML,

11
00:00:56.197 --> 00:01:01.900
so Handlebars, although multiple
different multiple templating

12
00:01:01.900 --> 00:01:07.520
engines can be used with Ember,
Handlebars is what it ships with.

13
00:01:07.520 --> 00:01:09.100
It's the default.

14
00:01:09.100 --> 00:01:14.450
You can think of it as a superset of HTML,
all valid HTML is also valid Handlebars,

15
00:01:15.900 --> 00:01:20.540
and the way to think of
this is that a template

16
00:01:20.540 --> 00:01:24.580
is rendered in a particular context.

17
00:01:24.580 --> 00:01:28.740
When I say context, I mean that we
have to get first name and last name

18
00:01:28.740 --> 00:01:34.440
from somewhere, and so we have to pass
essentially some data, some object.

19
00:01:34.440 --> 00:01:38.610
You can think of this almost as like
a closure where you have access

20
00:01:38.610 --> 00:01:42.730
to particular variables and
a particular scope, and

21
00:01:42.730 --> 00:01:47.030
that is what the template
uses to populate itself.

22
00:01:49.120 --> 00:01:54.010
When we talk about data binding,
this is a big part of it, and

23
00:01:54.010 --> 00:01:58.750
the idea in frameworks like Ember,
and Angular and React, in fact,

24
00:01:58.750 --> 00:02:03.489
there's an effort to basically define
what we want our HTML to look like.

25
00:02:04.530 --> 00:02:09.340
Then, step away and
basically manipulate data,

26
00:02:09.340 --> 00:02:14.130
manipulate objects that a template
is bound to, and we expect the HTML

27
00:02:14.130 --> 00:02:18.770
on the screen to change,
so this is an effort to

28
00:02:20.060 --> 00:02:26.500
take away this common problem we have
of keeping HTML and our data in sync.

29
00:02:26.500 --> 00:02:31.150
Which, if you guys have been writing code
long enough, then remember that the jQuery

30
00:02:31.150 --> 00:02:35.680
Widget Day is where you're finding a dime
element and updating it explicitly.

31
00:02:35.680 --> 00:02:40.950
A lot of spaghetti code we get rid
of there, so to give you an idea,

32
00:02:40.950 --> 00:02:46.070
I mentioned that Handlebars
templates are compiled.

33
00:02:47.390 --> 00:02:51.430
I'm gonna show you what a compiled
template looks like in a second and

34
00:02:53.110 --> 00:02:56.230
resist the urge to shriek out
because it's a little ugly, and

35
00:02:56.230 --> 00:02:58.840
completely hidden from you.

36
00:02:58.840 --> 00:03:03.190
But, I do want to talk about
this word HTMLBars, so

37
00:03:05.010 --> 00:03:09.126
up until Version 110 of the framework,

38
00:03:09.126 --> 00:03:13.890
Ember used Handlebars out-of-the-box.

39
00:03:13.890 --> 00:03:18.060
Essentially what Handlebars is,
fancy string incantination.

40
00:03:18.060 --> 00:03:22.650
At that point, you set enter HTML
= to something under the hood,

41
00:03:22.650 --> 00:03:24.330
and things get populated.

42
00:03:25.400 --> 00:03:29.310
This is very slow in a lot of browsers, so

43
00:03:29.310 --> 00:03:35.710
what HTMLBar changes is we're
actually constructing dom objects.

44
00:03:35.710 --> 00:03:39.930
We're constructing a document fragment,
which is inserted into the dom.

45
00:03:39.930 --> 00:03:45.060
This is a lot faster, so

46
00:03:45.060 --> 00:03:50.310
this is a compiled template, and I'm
gonna zoom in here, and we can see that,

47
00:03:51.540 --> 00:03:56.840
if we go back,
just looking at Hello Karma, it's wrong.

48
00:03:56.840 --> 00:04:01.920
We can see that those are, that's
the beginning of our string here, right?

49
00:04:03.760 --> 00:04:08.500
But all we're doing is
using the down api here and

50
00:04:08.500 --> 00:04:10.490
construct the elements and ultimately.

51
00:04:11.930 --> 00:04:16.657
Building little hierarchy,
and then inserting them.

52
00:04:16.657 --> 00:04:21.490
So, what I want you guys to understand
is that this is done at build time.

53
00:04:21.490 --> 00:04:26.347
You're translating your HTML+ syntax Into

54
00:04:26.347 --> 00:04:31.950
a JavaScript module like
this at build time.

55
00:04:31.950 --> 00:04:35.990
So all we have to do at
run time is evaluate this.

56
00:04:35.990 --> 00:04:40.800
And there are potentially huge performance
gains that we can see in the future

57
00:04:40.800 --> 00:04:48.360
because here we have knowledge of exactly
what piece of a template has to change.

58
00:04:48.360 --> 00:04:50.300
Because it's connected to this variable.

59
00:04:50.300 --> 00:04:53.220
We at build time have
that information about

60
00:04:53.220 --> 00:04:58.760
what things potentially could change
as the result of which data changing.

61
00:04:58.760 --> 00:05:01.470
Which potentially could give us a lot of.

62
00:05:02.570 --> 00:05:05.230
It could make things
even faster than React.

63
00:05:06.850 --> 00:05:11.425
Which My understanding is they
are forced to re-render something

64
00:05:11.425 --> 00:05:16.491
entirely because at build time they
don't necessarily know exactly what

65
00:05:16.491 --> 00:05:21.245
html could change as a result of
a particular piece of data changing.

66
00:05:24.662 --> 00:05:28.180
&gt;&gt; Mike: So, I mentioned this
concept of handlebars helpers.

67
00:05:28.180 --> 00:05:31.020
Here's an example of one.

68
00:05:31.020 --> 00:05:33.850
It's a simple conditional here and

69
00:05:33.850 --> 00:05:37.600
you can,
I mean it's pretty self explanatory here.

70
00:05:37.600 --> 00:05:43.030
If used in line the first parameter is
some boolean value and then we have it

71
00:05:43.030 --> 00:05:47.559
something to spit out if it's true and
something to spit out if it's false.

72
00:05:48.800 --> 00:05:53.500
You can also use block form, block syntax,

73
00:05:53.500 --> 00:05:58.390
which is starting with a hashtag and
then closing with the slash.

74
00:05:58.390 --> 00:06:04.420
And so, on the lower left here you can see
you can make an if-else in a way that is

75
00:06:04.420 --> 00:06:10.382
pretty easy to read and pretty similar
to the way we structure A JavaScript

76
00:06:10.382 --> 00:06:15.150
control flow of the same thing.

77
00:06:15.150 --> 00:06:17.558
There's also unless,
which is just the inverse.

78
00:06:19.977 --> 00:06:22.437
&gt;&gt; Mike: An important
thing to note is that,

79
00:06:22.437 --> 00:06:26.870
you may be asking yourself why
don't we just say, if not is dog?

80
00:06:28.410 --> 00:06:32.100
There's a limited amount of
logic that you can put into

81
00:06:32.100 --> 00:06:33.670
the handlebars files themselves.

82
00:06:35.520 --> 00:06:41.540
And in this case, we can't really evaluate
arithmetic or logical statements.

83
00:06:43.400 --> 00:06:45.840
So in this case, unless is the way to go.

84
00:06:45.840 --> 00:06:49.810
Rather than trying to make
a not operator of some kind.

85
00:06:49.810 --> 00:06:54.610
When you start writing your own
handlebars helpers, that is where you can

86
00:06:54.610 --> 00:06:58.350
start customizing the expressive
language you can use in a template.

87
00:07:00.750 --> 00:07:04.420
So here's an example of iteration, and
we're gonna use this when we start coding.

88
00:07:04.420 --> 00:07:08.582
This is a very very very common
handlebars helper to use On

89
00:07:08.582 --> 00:07:13.420
the top we're iterating over a list, and

90
00:07:15.180 --> 00:07:20.620
we just say each and
then the name of the list property itself,

91
00:07:20.620 --> 00:07:26.400
and then we get a local variable that
we can use within the body of each.

92
00:07:26.400 --> 00:07:30.790
So you can see we're gonna print
out my list item You know,

93
00:07:30.790 --> 00:07:35.504
in an LI element iterating over.

94
00:07:35.504 --> 00:07:40.390
Also this is an often
overlooked feature of each.

95
00:07:40.390 --> 00:07:45.990
It gives you the ability to use
else to have some template for

96
00:07:45.990 --> 00:07:47.879
the empty case where there's
nothing in the list.

97
00:07:51.660 --> 00:07:54.580
&gt;&gt; Speaker 2: People
are asking about SEO and

98
00:07:54.580 --> 00:07:59.660
if there's a decent story about
number 2 and pre rendering.

99
00:08:02.760 --> 00:08:06.580
&gt;&gt; Mike: SEO is less of a problem
than most people think, and

100
00:08:06.580 --> 00:08:13.480
this is because Google's Crawler
now executes JavaScript.

101
00:08:13.480 --> 00:08:17.190
There was an SEO problem with
single page apps before this.

102
00:08:17.190 --> 00:08:20.640
And when we fire up our app,
when we get started

103
00:08:20.640 --> 00:08:25.060
you'll see that the index.HTML we
start with is basically empty.

104
00:08:25.060 --> 00:08:28.310
And if you don't run JavaScript
that's what you're going to see.

105
00:08:28.310 --> 00:08:35.590
And that sucks for SEM Now,
single page apps will get picked up.

106
00:08:35.590 --> 00:08:40.230
In addition to that, there's this
concept of server-side rendering.

107
00:08:40.230 --> 00:08:44.840
Which essentially is running
Ember in a node.js server.

108
00:08:44.840 --> 00:08:47.360
And spitting out the initial view.

109
00:08:47.360 --> 00:08:50.060
Instead of starting
with an empty template,

110
00:08:50.060 --> 00:08:55.240
you start out with Some
meaningful state and then

111
00:08:55.240 --> 00:09:00.840
when the client downloads the JavaScript
and interprets it and starts it up.

112
00:09:00.840 --> 00:09:03.370
Then you have the single
page app functioning.

113
00:09:03.370 --> 00:09:08.806
So there are two solutions to that but
I guess the short answer to that is

114
00:09:08.806 --> 00:09:14.726
because Google runs JavaScript,
single page apps get picked up just fine.

115
00:09:21.079 --> 00:09:25.150
&gt;&gt; Mike: Just to give you guys a little
check as to where we're going with this,

116
00:09:25.150 --> 00:09:27.870
I'm going to talk about the router.

117
00:09:27.870 --> 00:09:29.380
This is the last thing I'm going to cover,
and

118
00:09:29.380 --> 00:09:31.550
then we're gonna actually start coding.

119
00:09:31.550 --> 00:09:35.018
My hope is about 20 more minutes,
and then we're going to dive in.

120
00:09:39.808 --> 00:09:42.020
&gt;&gt; Speaker 2: Here's
a question on iteration.

121
00:09:42.020 --> 00:09:46.440
&gt;&gt; Mike: Okay, lets go back to iteration.

122
00:09:46.440 --> 00:09:47.250
&gt;&gt; Speaker 2: They're asking,

123
00:09:47.250 --> 00:09:51.120
does having a key on each iterator make
it faster to update the iterators?

124
00:09:52.340 --> 00:09:57.310
For instance, react needs key,
angular Is benefited from track by.

125
00:10:00.110 --> 00:10:02.970
&gt;&gt; Mike: I'm not sure what
a key means in this context.

126
00:10:02.970 --> 00:10:06.990
So you can iterate over a primitive array,
not necessarily an array of objects.

127
00:10:06.990 --> 00:10:13.190
In which case what I assume they
mean by key has no meaning.

128
00:10:36.010 --> 00:10:38.670
I do see a question online so,

129
00:10:40.780 --> 00:10:45.860
why build with Ember if you
can build with Ruby on Rails?

130
00:10:45.860 --> 00:10:46.900
With a single page app,

131
00:10:46.900 --> 00:10:52.079
you have to think of your app as being
a completely separate system component.

132
00:10:53.310 --> 00:10:58.320
There are advantages to being able to
deploy your UI independent of your API.

133
00:10:58.320 --> 00:11:03.350
Deploying an API is quite frankly a pain,
compared to

134
00:11:04.780 --> 00:11:08.390
building and making available
a new set of static assets.

135
00:11:08.390 --> 00:11:13.140
That's what we ultimately ship with
a single page app Piece of Job Script.

136
00:11:13.140 --> 00:11:13.760
Piece of CSS.

137
00:11:13.760 --> 00:11:17.660
A little HTML.

138
00:11:17.660 --> 00:11:19.240
My advice for building,

139
00:11:19.240 --> 00:11:24.320
which we will get into tomorrow,
is treat this as a separate app.

140
00:11:24.320 --> 00:11:26.770
Were building against
the Get Hub API today.

141
00:11:26.770 --> 00:11:29.410
This is going to be a completely
separate application.

142
00:11:29.410 --> 00:11:32.190
There’s no reason to couple
things together if you

143
00:11:32.190 --> 00:11:33.580
can get away with separating them.

