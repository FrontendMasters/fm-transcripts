WEBVTT

1
00:00:00.000 --> 00:00:03.887
[MUSIC]

2
00:00:03.887 --> 00:00:06.315
&gt;&gt; Mike: You've already been
using a lot of helpers today.

3
00:00:06.315 --> 00:00:10.588
Link-to is a handlebars helper
that Ember brings to the party.

4
00:00:10.588 --> 00:00:18.663
If and each, forms of those exist
in Handlebars as a library.

5
00:00:18.663 --> 00:00:24.790
We're going to build a new one ourselves.

6
00:00:24.790 --> 00:00:29.380
So it's another way of
enriching the language

7
00:00:29.380 --> 00:00:32.436
that you can use to express
user interfaces and templates.

8
00:00:32.436 --> 00:00:39.469
And they're great for building strings and
for really sort of simple stuff.

9
00:00:40.970 --> 00:00:45.430
Especially if you don't want a DOM
element, you just want some text based on

10
00:00:45.430 --> 00:00:50.400
data, or you want a value based on data,
reach for a helper.

11
00:00:52.350 --> 00:00:54.450
You can optionally bind to data, so

12
00:00:54.450 --> 00:00:58.720
that your helper will update
as that data changes.

13
00:00:58.720 --> 00:01:00.930
But typically you don't need to do this,

14
00:01:00.930 --> 00:01:04.150
because the nature of what
you're building is simple.

15
00:01:04.150 --> 00:01:07.590
And if you're using a helper
inside a component and

16
00:01:07.590 --> 00:01:13.170
then you can often be in a situation
where what you're rendering will

17
00:01:13.170 --> 00:01:17.475
already be changing as a result of some
other higher level binding updating.

18
00:01:17.475 --> 00:01:22.162
And part of this,
part of building helper as well,

19
00:01:22.162 --> 00:01:28.710
is not introducing vulnerability
to cross-site scripting attacks.

20
00:01:28.710 --> 00:01:32.500
And this means that essentially
you're spitting out a string

21
00:01:32.500 --> 00:01:36.350
that can have HTML markup in it.

22
00:01:36.350 --> 00:01:41.030
And you wanna make sure that
you're not taking in text and

23
00:01:41.030 --> 00:01:44.370
just spitting it out,
cuz then people will start passing in

24
00:01:44.370 --> 00:01:50.030
script tags instead of numbers and
everything will fall apart.

25
00:01:50.030 --> 00:01:56.290
So Ember.Handlebars.SafeString is
the tool to use to kind of sanitize

26
00:01:56.290 --> 00:02:00.270
things right before you return them from
the helper and they're sent to the DOM.

27
00:02:02.260 --> 00:02:06.870
So here's an example of a helper,
number-with-units.

28
00:02:06.870 --> 00:02:12.060
So you can see in the top right this is
the output that I get from the markup on

29
00:02:12.060 --> 00:02:18.050
the top left, and the rest of the screen
is the implementation of this helper.

30
00:02:18.050 --> 00:02:24.390
So you can see that what I get as
an argument here is a params object, and

31
00:02:24.390 --> 00:02:30.560
that's an array of all of the arguments
that I receive, so that the in the first

32
00:02:30.560 --> 00:02:35.630
position I'm gonna get quantity and then
the second position I'm gonna get units.

33
00:02:35.630 --> 00:02:40.290
And then I'm in this case using
the Ember inflector, which is just

34
00:02:41.360 --> 00:02:46.840
really for taking plural words and
making them singular and vice versa, so

35
00:02:46.840 --> 00:02:53.520
that I can say a number and
then pluralize based on that number.

36
00:02:53.520 --> 00:02:56.010
So this is a great example
where I don't really care,

37
00:02:56.010 --> 00:02:58.240
this isn't a DOM element I'm building.

38
00:02:58.240 --> 00:03:03.660
This is a nice string based
on data that I'm building.

39
00:03:03.660 --> 00:03:08.910
And it's worth noting that,
you see the way that you use a helper,

40
00:03:08.910 --> 00:03:13.510
the way that you consume it, in this
example, is by just passing arguments.

41
00:03:13.510 --> 00:03:15.428
And if this is how link-to works, right,

42
00:03:15.428 --> 00:03:18.625
where we can just pass we have a first
position, a second position, and

43
00:03:18.625 --> 00:03:21.319
you kind of understand how that works and
you get used to it.

44
00:03:22.800 --> 00:03:27.590
You can also have named
arguments that will happen

45
00:03:27.590 --> 00:03:29.980
after all of your unnamed arguments.

46
00:03:29.980 --> 00:03:36.270
So after framework, we could have
something that's like bold equals true.

47
00:03:36.270 --> 00:03:40.786
And all of the named arguments that you
pass in will come in through that hash

48
00:03:40.786 --> 00:03:46.300
function or argument in helper itself
that I've commented out there.

49
00:03:46.300 --> 00:03:48.550
So you can actually mix and match.

50
00:03:48.550 --> 00:03:53.983
And in fact, as you get as you use link-to

51
00:03:53.983 --> 00:03:59.160
with more complex cases,
you can add classes to it.

52
00:03:59.160 --> 00:04:04.200
You can customize it further with
options that follow the basic

53
00:04:04.200 --> 00:04:05.740
argument that we've been
passing to that helper.

54
00:04:08.230 --> 00:04:15.271
And [NOISE] I'm not
sanitizing in this case.

55
00:04:15.271 --> 00:04:19.920
Because I'm not spitting out HTML,
the result is.

56
00:04:19.920 --> 00:04:25.710
If you return a string
without sanitizing it and

57
00:04:25.710 --> 00:04:29.926
you've got HTML, you're actually gonna
see the markup on the screen itself.

58
00:04:29.926 --> 00:04:32.880
So it's gonna actually
encode everything and

59
00:04:32.880 --> 00:04:36.740
you'll see HTML on the screen,
which is bad.

60
00:04:36.740 --> 00:04:38.370
So this is still safe.

61
00:04:38.370 --> 00:04:40.260
This is still totally safe.

62
00:04:40.260 --> 00:04:45.884
But the safe way to get markup on the
screen is to create a new safe string and

63
00:04:45.884 --> 00:04:48.803
return that instead of just a string.

