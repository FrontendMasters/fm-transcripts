WEBVTT

1
00:00:00.000 --> 00:00:03.820
[MUSIC]

2
00:00:03.820 --> 00:00:07.050
&gt;&gt; Mike North: Ember-Data
is a persistence library.

3
00:00:07.050 --> 00:00:11.360
It manages records and models and

4
00:00:11.360 --> 00:00:15.540
application state that you
are surfacing to your user.

5
00:00:15.540 --> 00:00:22.090
There are four key objects, the store, the
adapter, the serializer, and the model.

6
00:00:22.090 --> 00:00:24.940
You will have one store and

7
00:00:24.940 --> 00:00:28.264
probably more than one of everything
else in the leverage app.

8
00:00:28.264 --> 00:00:36.100
And recently as of a couple months ago,

9
00:00:36.100 --> 00:00:40.510
there was a pretty
dramatic effort to rewrite

10
00:00:40.510 --> 00:00:44.500
some confusing portions of Ember-Data and
now things look better than ever.

11
00:00:45.520 --> 00:00:51.850
There is standardization around the
internal data structures and you can read

12
00:00:51.850 --> 00:00:57.948
about the convention that Ember-Data
is now aligned with at jsonapi.org.

13
00:00:57.948 --> 00:01:02.616
But it's essentially a very
well thought out schema for

14
00:01:02.616 --> 00:01:07.690
RESTful APIs and
Ember-Data uses that internally as well.

15
00:01:10.020 --> 00:01:12.570
And at a high level what's different

16
00:01:12.570 --> 00:01:16.850
about working with every data compared
to what we've got now in the app?

17
00:01:16.850 --> 00:01:21.540
Is that you're not describing with each

18
00:01:22.910 --> 00:01:26.920
effort to fetch data, you're not
describing the particulars of how to

19
00:01:26.920 --> 00:01:30.980
interact with the API and how to
massage the data when it comes back.

20
00:01:32.270 --> 00:01:35.440
What you're doing instead is at
the outside of your project and

21
00:01:35.440 --> 00:01:40.510
you're defining the process for
interacting with it in general and

22
00:01:40.510 --> 00:01:47.080
having the right adapters and mappings
in place so that the rest of your app.

23
00:01:47.080 --> 00:01:51.240
The parts of your app that deal
with transitioning between states.

24
00:01:51.240 --> 00:01:53.580
The parts of your app that deal
with creating new records,

25
00:01:53.580 --> 00:01:55.910
and manipulating them,
and working with them.

26
00:01:55.910 --> 00:02:02.310
They have a much simpler and
more uniform surface to work with.

27
00:02:02.310 --> 00:02:04.910
And that’s where the complexity
of your app exists,

28
00:02:04.910 --> 00:02:11.220
it’s in the logic itself,
how your application works.

29
00:02:11.220 --> 00:02:14.585
And it’s good to take
the code that deals with

30
00:02:14.585 --> 00:02:19.194
bridging the gap between the API's
understanding of data and

31
00:02:19.194 --> 00:02:24.333
Ember's understanding of data,
that can exist sort of on its own and

32
00:02:24.333 --> 00:02:29.445
operate independently.
&gt;&gt; Mike North: So,

33
00:02:29.445 --> 00:02:33.880
the model is a representation of
what you're presenting to the user.

34
00:02:33.880 --> 00:02:35.800
Usually, this is something
that's persisted.

35
00:02:35.800 --> 00:02:36.740
It doesn't have to be.

36
00:02:36.740 --> 00:02:41.160
You can create records on the client and
then throw them away if you wish.

37
00:02:41.160 --> 00:02:42.520
That's not the typical use.

38
00:02:43.970 --> 00:02:48.500
Models are defined by two things largely.

39
00:02:48.500 --> 00:02:54.300
Attributes, which can be of various
types and relationships to other models.

40
00:02:54.300 --> 00:02:58.940
And in terms of terminology
when I say model I'm

41
00:02:58.940 --> 00:03:02.070
describing a factory, of records.

42
00:03:02.070 --> 00:03:07.880
Records are what a model, they're
instances of what a model describes.

43
00:03:10.540 --> 00:03:14.370
So here's a simple example of
what a model could look like.

44
00:03:16.900 --> 00:03:23.461
This would live in the models folder and
this example I'm calling it book.js and

45
00:03:23.461 --> 00:03:27.800
you can see that the book
has a string that's a title,

46
00:03:27.800 --> 00:03:33.202
it has a date for when it was published,
and it has a relationship,

47
00:03:33.202 --> 00:03:37.280
a has many relationship
to the chapter's model.

48
00:03:37.280 --> 00:03:44.156
And this means that, you know,
I would expect like a list of IDs here so

49
00:03:44.156 --> 00:03:52.160
I know you know which chapters should I
fetch to flush this relationship out.

50
00:03:52.160 --> 00:03:56.480
That's what hasMany describes here.

51
00:03:56.480 --> 00:04:02.500
That book has knowledge of chapters and
that you can lazily fetch that array and

52
00:04:02.500 --> 00:04:06.600
flush it out into an actual
object of chapters

53
00:04:06.600 --> 00:04:11.930
simply by just accessing this
property of each record.

54
00:04:11.930 --> 00:04:15.350
So that's a great aspect
of Ember-Data that you just

55
00:04:17.590 --> 00:04:20.030
say that you have this relationship and

56
00:04:20.030 --> 00:04:23.930
then the API request sort of happens
under the hood, when it's necessary.

57
00:04:26.260 --> 00:04:30.660
So the store is the main surface
you deal with when creating or

58
00:04:30.660 --> 00:04:33.119
finding or destroying records.

59
00:04:34.900 --> 00:04:39.550
And the effort here is to have a single
place that manages everything, a single

60
00:04:39.550 --> 00:04:46.540
place to look and that helps keep the task
of synchronizing everything simple.

61
00:04:46.540 --> 00:04:50.096
So in our case if we have
a GitHub.org and, you know,

62
00:04:50.096 --> 00:04:54.770
maybe it's displaying in a couple
of different places on the screen.

63
00:04:54.770 --> 00:04:57.369
You want an update to one of those places,

64
00:04:57.369 --> 00:05:02.274
sort of trickle through to everything
else that's bound to the same data, and

65
00:05:02.274 --> 00:05:07.060
the only way to do this reasonably is to
kind of have a single source of truth.

66
00:05:07.060 --> 00:05:11.190
And it's worth noting that
the major frameworks have all

67
00:05:11.190 --> 00:05:15.110
coalesced around this idea of
a store as a single source of truth.

68
00:05:15.110 --> 00:05:21.760
Flux, although, more a philosophy
than a piece of software.

69
00:05:21.760 --> 00:05:25.510
Flux definitely is built
around the concept of a store.

70
00:05:25.510 --> 00:05:31.300
And Angular data which is a common
persistence framework in Angular.

71
00:05:31.300 --> 00:05:35.200
That is very closely tied to Ember-Data
and also, you know, store centric.

72
00:05:37.560 --> 00:05:42.430
Here's an example of how you
use a store to retrieve data.

73
00:05:42.430 --> 00:05:47.800
The first two methods will
send API requests out.

74
00:05:47.800 --> 00:05:52.750
The second two methods are,
sort of equivalent to the first two,

75
00:05:52.750 --> 00:05:57.150
except instead of making the API requests,
they will

76
00:05:57.150 --> 00:06:02.170
look into the cache Ember-Data's
cache to see if there's

77
00:06:02.170 --> 00:06:06.260
already knowledge of these entities and
it'll return you whatever's in the cache.

78
00:06:07.960 --> 00:06:12.440
So that would be sort of where to look
if you know you already have data

79
00:06:12.440 --> 00:06:17.340
loaded.
&gt;&gt; Speaker 2: Is there

80
00:06:17.340 --> 00:06:22.650
a method that kind of bridges the gap
that it will get it from the cache

81
00:06:22.650 --> 00:06:27.420
first if it's there otherwise fetch it?
&gt;&gt; Mike North: No,

82
00:06:27.420 --> 00:06:32.230
but the logic is not all that difficult.

83
00:06:32.230 --> 00:06:34.558
So you can still do it in one line.

84
00:06:34.558 --> 00:06:41.650
There is a method to check to see if
a record exists without even returning it.

85
00:06:41.650 --> 00:06:45.440
And so you could, just use
the ternary operator and, you know,

86
00:06:45.440 --> 00:06:46.360
do what you need to do there.

87
00:06:50.790 --> 00:06:55.670
So, adapters, the role of the adapter
is to handle the particulars of making

88
00:06:55.670 --> 00:07:01.940
a request, so this includes building
the URL, this includes specifying what

89
00:07:01.940 --> 00:07:08.210
headers and other AGX options are part
of the request that's sent out.

90
00:07:08.210 --> 00:07:14.850
And ultimately it is what actually
initiates the XHR request.

91
00:07:16.650 --> 00:07:22.140
So you've seen this word
application a lot as a default,

92
00:07:22.140 --> 00:07:27.390
as sort of the fallback if
nothing else is found and

93
00:07:27.390 --> 00:07:31.580
application adapter is in line with that.

94
00:07:31.580 --> 00:07:36.483
So, the way that if you request
a particular type of record like if

95
00:07:36.483 --> 00:07:41.386
we ask for a record of type Post,
first Ember will attempt to see if

96
00:07:41.386 --> 00:07:45.330
you have a type specific adapter for
the post model.

97
00:07:45.330 --> 00:07:49.809
And that would be in your adapter's
folder post.js it would be an adapter

98
00:07:49.809 --> 00:07:52.820
with a name that matches the model.

99
00:07:52.820 --> 00:07:57.110
If that cannot be found you fall
back to application adapter

100
00:07:57.110 --> 00:08:01.790
which is sort of the default you
know that handles everything without

101
00:08:01.790 --> 00:08:06.310
a specific adapter in place and
serializers work the same way.

102
00:08:06.310 --> 00:08:07.955
Look for a type specific first and

103
00:08:07.955 --> 00:08:14.853
then you fall back to application.
&gt;&gt; Mike North: Here's

104
00:08:14.853 --> 00:08:18.090
an example of what an adapter looks like.

105
00:08:18.090 --> 00:08:23.220
And this is actually gonna very
closely resemble what I'll

106
00:08:23.220 --> 00:08:28.400
build out as we move away from
jQuery get and to Ember-Data.

107
00:08:28.400 --> 00:08:32.100
You can see here I'm
specifying the host by default

108
00:08:32.100 --> 00:08:35.720
it is the same host that the app
is currently running on so

109
00:08:35.720 --> 00:08:39.900
although the localhost 4200 trying to
get GitHub data and not find it there.

110
00:08:41.020 --> 00:08:46.460
So this is all you have to do
to change the configuration and

111
00:08:46.460 --> 00:08:48.560
start talking to GitHub.

112
00:08:48.560 --> 00:08:56.170
And then here I'm overriding the default
behavior for building a URL so

113
00:08:56.170 --> 00:09:02.680
that I can get the org ID and the link
to find the repos for a given org.

114
00:09:06.410 --> 00:09:12.250
So serializers,
they deal with JSON transformation.

115
00:09:12.250 --> 00:09:16.910
They deal with bridging the gap between
the way that your API models data and

116
00:09:16.910 --> 00:09:21.020
the way you have data
modeled in your Ember app.

117
00:09:21.020 --> 00:09:25.780
And so this is all about normalization and
your goal ultimately is to

118
00:09:25.780 --> 00:09:30.730
get the API data to the JSON API format.

119
00:09:30.730 --> 00:09:33.830
And then Ember-Data will handle the rest.

120
00:09:33.830 --> 00:09:37.450
It will take your javascript objects and

121
00:09:37.450 --> 00:09:42.135
create nice observable
instances of your models and

122
00:09:42.135 --> 00:09:46.530
really handle a lot for
you after that point.

123
00:09:46.530 --> 00:09:51.739
But this is the blank you have to
fill in the bridge the gap between

124
00:09:51.739 --> 00:09:59.215
the two different JSON contracts.
&gt;&gt; Mike North: So

125
00:09:59.215 --> 00:10:02.180
this is an example of a serializer.

126
00:10:02.180 --> 00:10:05.320
You can see that normalizeResponse
here is what I'm using.

127
00:10:05.320 --> 00:10:09.550
This is a very, this is sort of the,

128
00:10:09.550 --> 00:10:13.720
a coarse way of normalizing data.

129
00:10:13.720 --> 00:10:17.740
There's a more specific normalization
methods that you can fill in.

130
00:10:17.740 --> 00:10:22.860
But in this case for what I need to do,
like in this case I'm receiving data

131
00:10:22.860 --> 00:10:28.430
in a format that is not even conducive to
using this other normalization hooks and

132
00:10:28.430 --> 00:10:30.560
so I have to take a little bit of
a heavy handler approach here.

