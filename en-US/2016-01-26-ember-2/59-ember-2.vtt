WEBVTT

1
00:00:00.000 --> 00:00:03.928
[MUSIC]

2
00:00:03.928 --> 00:00:08.734
&gt;&gt; Mike North: I'd like to close out by
helping you guys understand what we mean

3
00:00:08.734 --> 00:00:13.896
when we say Ember 2, where are things
right now, how do we get here,

4
00:00:13.896 --> 00:00:19.519
and give you guys a little insight and
sneak peak into what's coming soon.

5
00:00:20.760 --> 00:00:24.790
So there are no new features in Ember 2.0.

6
00:00:24.790 --> 00:00:30.427
The idea is that late in the 1.x cycle,
major enhancements

7
00:00:30.427 --> 00:00:35.412
were added,
major alternate paths to doing things.

8
00:00:35.412 --> 00:00:40.352
An example is the computed
property syntax where

9
00:00:40.352 --> 00:00:45.300
we can pass an object with a get and
set function.

10
00:00:45.300 --> 00:00:48.015
Instead of just a function and

11
00:00:48.015 --> 00:00:54.108
look at arity in order to figure out
are we in getter or setter mode?

12
00:00:54.108 --> 00:01:00.012
So that was introduced in like 1.12,
and as new stuff was introduced,

13
00:01:00.012 --> 00:01:04.417
stuff that we were trying to
get rid of was deprecated and

14
00:01:04.417 --> 00:01:08.447
all that happened between
the last 1.x release,

15
00:01:08.447 --> 00:01:13.440
1.13 and 2.0 is all of
the deprecated code was removed.

16
00:01:15.010 --> 00:01:19.480
And this is important to realize
in terms of understanding

17
00:01:21.480 --> 00:01:25.620
Ember's commitment to productivity and
to developer economics.

18
00:01:25.620 --> 00:01:31.980
So the idea was that if you had a one 113
app running, and you had no deprecation

19
00:01:31.980 --> 00:01:37.360
warnings, you were going to be
able to painlessly upgrade to 2.0.

20
00:01:37.360 --> 00:01:42.620
And for the most part,
that was successful, and certainly,

21
00:01:42.620 --> 00:01:47.990
you know It was a commitment made from
the community that contributes to Ember,

22
00:01:47.990 --> 00:01:52.940
to each other and
to the other people who consume it.

23
00:01:52.940 --> 00:01:57.693
So I think that that contrasts
with some other, you know,

24
00:01:57.693 --> 00:02:01.573
other things that really
don't have a strong,

25
00:02:01.573 --> 00:02:07.199
a as strong an idea of making sure
that you can keep pace with things and

26
00:02:07.199 --> 00:02:11.760
making sure that you don't
have to throw things out.

27
00:02:11.760 --> 00:02:17.480
And it's been a big part of why people
are confident to kind of stick with Ember.

28
00:02:18.790 --> 00:02:23.490
So here's what was introduced
in the last couple 1.x releases.

29
00:02:23.490 --> 00:02:28.879
We had HTMLbars in 1.10 which
was a switch towards admitting

30
00:02:28.879 --> 00:02:34.702
document fragments instead of
admitting strings from handle bars.

31
00:02:34.702 --> 00:02:39.020
1.11 introduced attribute bindings, so

32
00:02:39.020 --> 00:02:42.410
before that we had to use a handle
bars helper called bind adder.

33
00:02:43.630 --> 00:02:47.510
It was quite messy and kind of was,

34
00:02:50.410 --> 00:02:54.950
the introduction of attribute bindings
brought us closer in parity with,

35
00:02:54.950 --> 00:02:58.430
you know, writing handlebars
like we write HTML where

36
00:02:58.430 --> 00:03:02.725
we are just doing key equals value and
it sort of makes a lot more sense.

37
00:03:02.725 --> 00:03:08.120
1.12, we got some great computed
property improvements 1.13 was big.

38
00:03:08.120 --> 00:03:14.810
That's when the new rendering engine, the
reactive rendering engine landed that's.

39
00:03:14.810 --> 00:03:19.970
That was a huge performance
improvement for views where re-renders

40
00:03:19.970 --> 00:03:24.220
were common where you had a lot of
different components on the screen.

41
00:03:24.220 --> 00:03:28.356
And then again 2.0, just yank out
the stuff that's deprecated and

42
00:03:28.356 --> 00:03:30.782
we're left with what we're left with.

43
00:03:30.782 --> 00:03:35.290
And there's a big commitment
to aligning with SemVer.

44
00:03:35.290 --> 00:03:39.020
And if you guys don't know what
SemVer is it's the triple digit

45
00:03:40.110 --> 00:03:45.020
versioning system where you have major,
minor, and trivial version.

46
00:03:45.020 --> 00:03:51.010
And the idea is that anything that
currently works in 2.0 will not break.

47
00:03:52.180 --> 00:03:57.010
Any public API that works in
2.0 will not break until 3.0.

48
00:03:57.010 --> 00:04:02.800
And so if you're sticking to the public
stuff as outlined in the documentation,

49
00:04:04.120 --> 00:04:08.594
that's a solid foundation
to build on until we start

50
00:04:08.594 --> 00:04:13.380
doing massive changes again which
will be quite a while from now.

51
00:04:17.360 --> 00:04:19.180
So coming soon and

52
00:04:20.730 --> 00:04:25.330
like there's no way to say whether this
is going to be 2.4 or 3.1 or what.

53
00:04:25.330 --> 00:04:29.210
But these are things
that are in the works.

54
00:04:29.210 --> 00:04:31.210
RFCs with a lot of steam behind them.

55
00:04:31.210 --> 00:04:34.870
Things that already have a lot
of work being channeled to them.

56
00:04:36.120 --> 00:04:42.080
So this is this concept of
angle bracket components.

57
00:04:42.080 --> 00:04:47.050
And it's really an effort
to bring ember components

58
00:04:47.050 --> 00:04:51.820
even further in alignment with
what we're used to seeing in HTML.

59
00:04:51.820 --> 00:04:54.490
And you see here this is an example
of what an angle bracket

60
00:04:54.490 --> 00:04:55.480
component could look like.

61
00:04:55.480 --> 00:04:57.570
We've lost the handlebars.

62
00:04:58.720 --> 00:05:01.380
We're gonna lose the concept
of this wrapping

63
00:05:01.380 --> 00:05:04.430
dom element because sometimes you
don't want that in a component.

64
00:05:04.430 --> 00:05:07.640
Sometimes you want a component that's
a couple of things stacked on top

65
00:05:07.640 --> 00:05:08.360
of each other.

66
00:05:08.360 --> 00:05:14.310
And forcing people to nest and
nest and nest sometimes undesirable.

67
00:05:15.670 --> 00:05:21.028
We're dropping the concept of controllers
once we can have routable components,

68
00:05:21.028 --> 00:05:26.130
and once the queryParam
situation is figured out.

69
00:05:28.990 --> 00:05:33.190
So the next thing is fastboot.

70
00:05:33.190 --> 00:05:36.300
This is ember's server-side
rendering future set.

71
00:05:36.300 --> 00:05:41.320
The current state of fastboot is
that it works as an ember add-on.

72
00:05:41.320 --> 00:05:46.241
And the current way that it
works is you have a no js server

73
00:05:46.241 --> 00:05:49.403
that will generate html for a real.

74
00:05:49.403 --> 00:05:54.798
Like rendered view instead of just
an empty index.html that your

75
00:05:54.798 --> 00:06:01.740
application will be you know placed
into once the JavaScript is downloaded.

76
00:06:01.740 --> 00:06:04.650
Interpreted, all the initializers run.

77
00:06:04.650 --> 00:06:07.200
You know that's sometimes
too long to wait.

78
00:06:08.400 --> 00:06:12.880
So the way things work right now
is the server will render this and

79
00:06:12.880 --> 00:06:18.050
then once the client downloads the code
and you know interprets it and runs it,

80
00:06:18.050 --> 00:06:22.790
it will then blow that away and
render its own stuff.

81
00:06:22.790 --> 00:06:26.320
The hope is that in the future

82
00:06:26.320 --> 00:06:28.920
what the server renders will be
something that is suitable for

83
00:06:28.920 --> 00:06:33.030
the client to actually connect to and
to kind of pick up from there.

84
00:06:33.030 --> 00:06:36.400
And that will be powerful

85
00:06:36.400 --> 00:06:41.280
because that even further reduces
the time it takes to get up and running.

86
00:06:41.280 --> 00:06:45.060
And furthermore it increases
the ability for the the server,

87
00:06:45.060 --> 00:06:51.040
during its initial render to
pass more information to the UI.

88
00:06:51.040 --> 00:06:54.350
About like,
this is the currently logged in user, and

89
00:06:54.350 --> 00:07:00.750
really passing some application state to
kind of, help pick up a little bit faster.

90
00:07:00.750 --> 00:07:06.200
And this is a big improvement because
with single page apps in general,

91
00:07:06.200 --> 00:07:09.710
one of the major pain points
is this initial page load and

92
00:07:09.710 --> 00:07:11.804
Fastboot directly
addresses this pain point.

93
00:07:15.370 --> 00:07:20.150
So, I think we talked a little bit
about Andens earlier in the course.

94
00:07:20.150 --> 00:07:26.340
The concept is very similar to,
concept of the same name and realms.

95
00:07:26.340 --> 00:07:30.810
And the idea is to have modular
pieces of an application

96
00:07:30.810 --> 00:07:35.050
which will have their own routing,
their own models, adapter, serializers.

97
00:07:35.050 --> 00:07:39.857
Really a full fledged application that you
can mount in some way in your router and

98
00:07:39.857 --> 00:07:44.980
have that encapsulated

99
00:07:44.980 --> 00:07:49.835
engine be responsible for all behavior
in that subsection of your app.

100
00:07:49.835 --> 00:07:53.997
There's talk about potentially
loading this code asynchronously.

101
00:07:53.997 --> 00:07:59.687
So you only paid the overhead
of downloading the code for

102
00:07:59.687 --> 00:08:05.617
the blog and in the event that
you actually go into a route,

103
00:08:05.617 --> 00:08:10.340
pivot into a route that is in the blog.

104
00:08:10.340 --> 00:08:15.160
And so this will increase
further that initial startup

105
00:08:15.160 --> 00:08:20.620
time because we're no longer necessarily
going to need to ship the entire app.

106
00:08:20.620 --> 00:08:25.450
And have you download everything
in one big massive file.

107
00:08:27.860 --> 00:08:32.540
And also is gonna be great for
large teams and

108
00:08:32.540 --> 00:08:35.770
this is for you know big tech companies.

109
00:08:35.770 --> 00:08:40.640
The idea of shipping individual engines or

110
00:08:40.640 --> 00:08:46.230
having separate CD pipelines for
sub-sections of an application.

111
00:08:46.230 --> 00:08:51.400
The working model scales up
a little bit better than having 50,

112
00:08:51.400 --> 00:08:58.660
or 80, or 100 people kind of dealing with
the same router, and with the same store,

113
00:08:58.660 --> 00:09:02.440
and having to do their customizations,
and stepping on each other a little bit.

114
00:09:02.440 --> 00:09:08.448
And that, that is sort of inevitable when
you have, you know, little bottlenecks,

115
00:09:08.448 --> 00:09:12.970
they're usually like single objects
that people need to touch over and

116
00:09:12.970 --> 00:09:16.000
over again with a very large
number of contributors.

