WEBVTT

1
00:00:00.222 --> 00:00:04.389
[MUSIC]

2
00:00:04.389 --> 00:00:07.941
&gt;&gt; Mike North: Last piece of course I'm
going to show you how to create and

3
00:00:07.941 --> 00:00:11.040
Ember add-on and
how to consume it in an app.

4
00:00:11.040 --> 00:00:12.600
We're gonna keep it really basic here.

5
00:00:12.600 --> 00:00:16.476
I just want you guys to
understand how to create it,

6
00:00:16.476 --> 00:00:22.697
how to have things remain internal to the
add-on versus exposing them to the app,

7
00:00:22.697 --> 00:00:28.480
and also some little testing in new
answers that you should be aware of.

8
00:00:28.480 --> 00:00:32.600
So the way you start out
a new Ember add-on is,

9
00:00:32.600 --> 00:00:37.980
ember addon, and we'll call it fem for
front end masters.

10
00:00:40.500 --> 00:00:45.520
So similarly, just like Ember new,
we've got a blueprint here.

11
00:00:45.520 --> 00:00:50.931
We're creating a bunch of stuff,
bunch of test working right

12
00:00:50.931 --> 00:00:57.149
off the bat.
&gt;&gt; Mike North: So what we're gonna see is,

13
00:00:57.149 --> 00:01:02.150
and you can already see a little bit,
there's an app and an addon folder.

14
00:01:02.150 --> 00:01:07.040
An important distinction to make
between those is that the addon folder,

15
00:01:07.040 --> 00:01:12.130
those modules will be name spaced to
whatever your addon name space is.

16
00:01:12.130 --> 00:01:17.350
Everything in the app folder will
be merged into your consuming app.

17
00:01:17.350 --> 00:01:19.870
And so, here's why that's important.

18
00:01:19.870 --> 00:01:23.330
Components and
helpers register themselves and

19
00:01:23.330 --> 00:01:27.060
make themselves available if
they're in the correct name space.

20
00:01:27.060 --> 00:01:32.240
So it's important to make sure
not only is your addon folder

21
00:01:32.240 --> 00:01:34.720
containing the component as a whole, but

22
00:01:34.720 --> 00:01:38.860
you also sort of pass it through to the
app folder and we'll see how that works.

23
00:01:38.860 --> 00:01:41.910
Just to make sure it's made available
to everything that's consuming it.

24
00:01:45.020 --> 00:01:49.330
So you're gonna see in
addition to those two trees of

25
00:01:49.330 --> 00:01:53.890
files which we'll both have our respective
components folder, our templates folder.

26
00:01:53.890 --> 00:01:56.220
It's sort of the same
structure as our app folder.

27
00:01:57.630 --> 00:02:01.740
There's a third one and
that is used for testing.

28
00:02:01.740 --> 00:02:07.025
So there's sort of a dummy app that's used
both for acceptance testing your Ember

29
00:02:07.025 --> 00:02:12.030
add-on, as well as people often
use this as sort of the demo page.

30
00:02:12.030 --> 00:02:14.480
They'll push it off to GitHub pages, and

31
00:02:14.480 --> 00:02:18.170
it'll be part of the documentation
that proves it's actually working.

32
00:02:19.610 --> 00:02:24.977
So, we'll go to fem, and
if we open this up and

33
00:02:24.977 --> 00:02:33.011
bring it into our workspace.
&gt;&gt; Mike North: Fantastic,

34
00:02:33.011 --> 00:02:39.910
so app folder, which is empty right now,
addon folder, which is empty right now.

35
00:02:39.910 --> 00:02:43.735
But these, once we start
creating a couple of things, and

36
00:02:43.735 --> 00:02:47.728
you'll see that Ember CLI is
still doing a lot of work for us.

37
00:02:47.728 --> 00:02:50.350
Things will sort of start
to mirror each other.

38
00:02:50.350 --> 00:02:53.890
Additionally, in the tests
folder you've got this dummy

39
00:02:55.760 --> 00:02:59.637
folder here and that looks like an app.

40
00:02:59.637 --> 00:03:04.100
This is what you'll startup
when you hit Ember S.

41
00:03:04.100 --> 00:03:10.880
You'll serve up your dummy app which
will already have consumed your add-on.

42
00:03:10.880 --> 00:03:14.880
It's a way to test to make sure
that everything works as expected,

43
00:03:14.880 --> 00:03:16.270
as part of the development process.

44
00:03:16.270 --> 00:03:22.560
So you can TDD in your add-on and it sort
of has a simple app for you to work with.

45
00:03:24.090 --> 00:03:27.450
So, kill this URL.

46
00:03:27.450 --> 00:03:30.175
We're not serving it, we'll start it up.

47
00:03:38.635 --> 00:03:41.883
&gt;&gt; Mike North: All right, it's serving,

48
00:03:41.883 --> 00:03:46.222
so I have some breakpoints left over.

49
00:03:46.222 --> 00:03:51.300
Welcome to Ember, and I'm gonna prove
that this is the dummy app being served.

50
00:03:51.300 --> 00:03:58.831
I'll change this.
&gt;&gt; Mike North: And it will refresh.

51
00:03:58.831 --> 00:04:03.268
So dummy app but if we look at
the modules that are available,

52
00:04:03.268 --> 00:04:07.705
you'll see that,
well we should create something first but

53
00:04:07.705 --> 00:04:12.150
you'll see that all of the add-on
code becomes available.

54
00:04:12.150 --> 00:04:13.670
So let's build a component.

55
00:04:13.670 --> 00:04:20.200
Ember g component and we'll call it,
because naming things is hard.

56
00:04:21.200 --> 00:04:23.790
So this is doing more work.

57
00:04:23.790 --> 00:04:28.070
This is doing more work than
creating a component in an app.

58
00:04:28.070 --> 00:04:33.890
You can see that we've created
an add-on component and

59
00:04:33.890 --> 00:04:36.820
an app component file.

60
00:04:36.820 --> 00:04:41.250
So if we go back here and
we look at social-info,

61
00:04:41.250 --> 00:04:44.480
there's the component as we expect and
here's its template.

62
00:04:45.900 --> 00:04:51.180
But also we have this
sort of pass through.

63
00:04:51.180 --> 00:04:52.610
So this is in the app tree.

64
00:04:52.610 --> 00:04:59.230
Effectively, what this is doing,
it's importing the ESX module from our

65
00:04:59.230 --> 00:05:05.849
namespace and bringing it into the app
namespace by just exporting again.

66
00:05:07.180 --> 00:05:11.430
This is where you could
potentially extend things or

67
00:05:11.430 --> 00:05:13.020
typically you wanna keep this very small.

68
00:05:13.020 --> 00:05:19.170
But a use case for messing with this
might be if you rename social info and

69
00:05:19.170 --> 00:05:26.490
you wanna actually export it twice
as social info or social stuff.

70
00:05:26.490 --> 00:05:28.680
And maybe you wanna deprecate one of them.

71
00:05:28.680 --> 00:05:30.560
This would be the place to do that, right.

72
00:05:30.560 --> 00:05:35.150
So you just have your core component but
through one path you can deprecate or

73
00:05:35.150 --> 00:05:39.550
you can throw a warning or something and
then make it available through the other.

74
00:05:39.550 --> 00:05:41.750
But typically,
you're just gonna wanna leave this alone.

75
00:05:45.230 --> 00:05:48.585
So we'll just add something cuz we've
already gone through components

76
00:05:48.585 --> 00:05:54.042
here.
&gt;&gt; Mike North: I'll just make it boring.

77
00:05:54.042 --> 00:05:58.384
[LAUGH] And
bring it into our application.hps.

78
00:06:04.113 --> 00:06:08.448
&gt;&gt; Mike North: Could not find module.

79
00:06:08.448 --> 00:06:15.002
Templates social-info.
&gt;&gt; Mike North: Interesting.

80
00:06:23.517 --> 00:06:24.616
&gt;&gt; Mike North: I'm not sure what's going

81
00:06:24.616 --> 00:06:31.122
on there.
&gt;&gt; Mike North: Components.

82
00:06:35.953 --> 00:06:37.135
&gt;&gt; Mike North: I'm gonna try bumping up

83
00:06:37.135 --> 00:06:38.999
the Ember version here just for kicks.

84
00:07:11.404 --> 00:07:12.816
&gt;&gt; Mike North: I get it, okay.

85
00:07:12.816 --> 00:07:17.519
[LAUGH] So, one thing to be aware of
is that add-ons can do a bunch of

86
00:07:17.519 --> 00:07:21.708
different things,
this is actually good that I had this,

87
00:07:21.708 --> 00:07:24.974
add-ons can do a bunch
of different things.

88
00:07:24.974 --> 00:07:29.648
You can have components available that you
are exposing to the consuming app like

89
00:07:29.648 --> 00:07:31.650
what we are setting out to do here.

90
00:07:31.650 --> 00:07:36.053
But you can have add-ons like
Ember CLSS that you know add

91
00:07:36.053 --> 00:07:41.300
a step to the asset pipeline to
transform additional assets.

92
00:07:41.300 --> 00:07:45.950
So by default there may not
necessarily be something visual here.

93
00:07:47.570 --> 00:07:53.353
So what we need to do is make HTML
bars available as a dependency

94
00:07:53.353 --> 00:07:59.249
instead of a dev dependency to
ensure that we can actually build

95
00:07:59.249 --> 00:08:05.721
templates at build time in consuming apps,
not just in the add-on.

96
00:08:15.592 --> 00:08:16.913
&gt;&gt; Mike North: Hopefully this works now.

97
00:08:19.811 --> 00:08:20.444
&gt;&gt; Mike North: Never mind,

98
00:08:20.444 --> 00:08:21.654
let's switch it over but

99
00:08:21.654 --> 00:08:27.877
it looks like a better result.
&gt;&gt; Mike North: Fantastic, so

100
00:08:27.877 --> 00:08:31.430
that was the problem, ember-cli-html-bars
has to be a dependency.

101
00:08:31.430 --> 00:08:33.796
&gt;&gt; Speaker 2: Docs mention that?

102
00:08:33.796 --> 00:08:34.610
&gt;&gt; Mike North: I hope so.

103
00:08:34.610 --> 00:08:38.045
If they don't I'll PR it in shortly.

104
00:08:38.045 --> 00:08:41.780
[LAUGH] All right, so
we have a component here and

105
00:08:41.780 --> 00:08:45.780
the point is not to go through
the component lesson again, but

106
00:08:45.780 --> 00:08:50.850
to explain how this would
work in a consuming app.

107
00:08:50.850 --> 00:08:56.040
So I wanna show you the ES6
modules that are available here so

108
00:08:56.040 --> 00:08:58.790
we can see some important differences.

109
00:08:58.790 --> 00:09:02.440
If we look at Sources &gt; assets.

110
00:09:02.440 --> 00:09:07.010
All right, so we've got fem and
we've got a component here.

111
00:09:07.010 --> 00:09:09.330
And this is actually the component itself.

112
00:09:09.330 --> 00:09:13.260
So I want you to note that this
is the name of the module.

113
00:09:13.260 --> 00:09:15.280
So if we were to bring this into our app,

114
00:09:16.300 --> 00:09:18.920
this would not be picked
up as a component.

115
00:09:18.920 --> 00:09:23.317
And the reason is our app is looking for

116
00:09:23.317 --> 00:09:28.135
github-ui/components/something.

117
00:09:28.135 --> 00:09:35.480
If we look at dummy components,
this is the pass through.

118
00:09:35.480 --> 00:09:40.660
And in this case, it's been built for
the dummy app and massaged a little bit.

119
00:09:40.660 --> 00:09:45.660
But I want you to see that effectively,
I want to get rid of this here,

120
00:09:45.660 --> 00:09:48.510
effectively, this is where
this pass through happens.

121
00:09:48.510 --> 00:09:51.940
And this is why it's so
important to have, in your app folder,

122
00:09:51.940 --> 00:09:57.860
those sort of really short modules that
import and then just immediately export.

123
00:09:57.860 --> 00:10:03.684
That is your ability to control
what's private to your add-on and

124
00:10:03.684 --> 00:10:06.188
what's exposed to the app.

125
00:10:06.188 --> 00:10:11.075
Very important for helpers, very important
for initializers which we didn't get into

126
00:10:11.075 --> 00:10:14.240
but that's how you customize
the way the app starts up.

127
00:10:14.240 --> 00:10:18.730
Initializers simply by being
in the Initializers folder

128
00:10:18.730 --> 00:10:22.070
will be called in the order
that they register themselves.

129
00:10:22.070 --> 00:10:26.690
And so that's another one that like
where there is sensitivity to being

130
00:10:26.690 --> 00:10:29.580
in the app name space of
whatever is consuming.

