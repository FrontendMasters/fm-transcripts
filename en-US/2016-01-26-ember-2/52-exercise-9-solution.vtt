WEBVTT

1
00:00:00.000 --> 00:00:03.838
[MUSIC]

2
00:00:03.838 --> 00:00:08.465
&gt;&gt; Mike North: I'm just gonna go
through the process of making a custom

3
00:00:08.465 --> 00:00:13.198
handle bars helper per usual
strength with ember-cli.

4
00:00:16.538 --> 00:00:20.414
&gt;&gt; Mike North: So it's gonna generate
helper itself and the unit test for

5
00:00:20.414 --> 00:00:21.290
the helper.

6
00:00:23.260 --> 00:00:28.666
Then I'm gonna go into
the github-repo.hps and

7
00:00:28.666 --> 00:00:36.138
here instead of just the count itself,
I'm gonna do nice-number.

8
00:00:40.878 --> 00:00:43.380
&gt;&gt; Mike North: And
let's switch to something useful here.

9
00:00:46.000 --> 00:00:48.613
This does not have anything over 1,000.

10
00:00:48.613 --> 00:00:50.574
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Mike North: Yeah?

11
00:00:50.574 --> 00:00:52.330
All right, well we got.

12
00:00:52.330 --> 00:00:55.838
&gt;&gt; Speaker 2: [INAUDIBLE]
2500 [INAUDIBLE].

13
00:00:55.838 --> 00:00:58.200
&gt;&gt; Mike North: Ember-cli itself.

14
00:00:58.200 --> 00:01:00.790
All right, so watch that number.

15
00:01:02.910 --> 00:01:03.530
That makes it easy.

16
00:01:04.780 --> 00:01:11.990
And we will go to the console just so
we can see any errors, and we're off.

17
00:01:11.990 --> 00:01:16.610
By default helpers pass straight through,
right?

18
00:01:16.610 --> 00:01:20.830
Whatever value you pass
in will get spit out, and

19
00:01:20.830 --> 00:01:23.370
that's why we're seeing no change.

20
00:01:23.370 --> 00:01:28.400
And this is typical of ember like
when you generate a new route,

21
00:01:28.400 --> 00:01:31.720
the template basically it will be a no op.

22
00:01:31.720 --> 00:01:34.050
And that's a good starting
point cuz at least it works and

23
00:01:34.050 --> 00:01:38.269
at least you can put it in place and
it's a good sort of TDD starting point.

24
00:01:40.050 --> 00:01:45.619
So I'm gonna actually TDD this,
nice-number-test.

25
00:01:45.619 --> 00:01:50.800
So we're passing in the number 42,
I know that I need to pass in an array,

26
00:01:51.860 --> 00:01:56.339
and we are going to switch to the tests.

27
00:01:58.470 --> 00:02:01.710
And pick the right module, and

28
00:02:01.710 --> 00:02:06.900
forget about JSHint cuz we
all know how to fix that.

29
00:02:06.900 --> 00:02:08.756
There it is.

30
00:02:08.756 --> 00:02:13.930
It works, fantastic, but
I'm not excited yet.

31
00:02:13.930 --> 00:02:17.962
So I want to make sure that

32
00:02:17.962 --> 00:02:23.148
the result here is in fact 42.

33
00:02:23.148 --> 00:02:26.708
A number less than 1,000.

34
00:02:26.708 --> 00:02:32.730
And it works a number less
than 1,000 is in fact 42.

35
00:02:32.730 --> 00:02:37.902
And I know that I want a number
greater than 1,000 and

36
00:02:37.902 --> 00:02:43.308
I actually don't need result,
I think that's overkill.

37
00:02:48.368 --> 00:02:53.637
&gt;&gt; Mike North: I'm deliberately
picking something that we need to,

38
00:02:53.637 --> 00:02:59.135
a rounding solution and
not a truncation solution here,

39
00:02:59.135 --> 00:03:01.933
so this I want to be 4.2K.

40
00:03:01.933 --> 00:03:05.520
And it looks like we have
a little bit of a problem.

41
00:03:07.360 --> 00:03:10.279
Actually maybe they changed this so
I don't need the brackets here.

42
00:03:12.879 --> 00:03:16.439
&gt;&gt; Mike North: Perfect,
all right so I'm looking for 4.2K.

43
00:03:16.439 --> 00:03:19.851
I see 4199 so
we're getting passed through for

44
00:03:19.851 --> 00:03:23.920
the case that we wanna do
something interesting on.

45
00:03:23.920 --> 00:03:26.360
So I'm gonna go back to nice-number.

46
00:03:28.050 --> 00:03:31.180
I'm gonna add just like
two more test cases.

47
00:03:31.180 --> 00:03:37.058
So in the case where I pass nothing
at all, I want an empty string.

48
00:03:44.818 --> 00:03:48.979
&gt;&gt; Mike North: A-ha,
I don't want undefined render screen so

49
00:03:48.979 --> 00:03:52.030
we have to make sure we handle that.

50
00:03:52.030 --> 00:03:55.290
And we'll leave it there, and typically
you might wanna see like what happens

51
00:03:55.290 --> 00:04:00.930
when you pass a string to it or
true or false but keeping it simple,

52
00:04:00.930 --> 00:04:03.190
so time to fill in the helper.

53
00:04:05.830 --> 00:04:09.485
So I'm going to first,

54
00:04:09.485 --> 00:04:14.149
actually I do need those arrays.

55
00:04:19.289 --> 00:04:23.650
&gt;&gt; Mike North: Const num is
another destructuring with

56
00:04:23.650 --> 00:04:26.989
an array instead of an object.

57
00:04:26.989 --> 00:04:29.464
And

58
00:04:29.464 --> 00:04:39.364
something's

59
00:04:39.364 --> 00:04:45.139
weird,

60
00:04:45.139 --> 00:04:50.089
oops.

61
00:04:50.089 --> 00:04:52.049
So, let's see what's going on.

62
00:04:55.829 --> 00:05:00.614
&gt;&gt; Mike North: Prems is undefined, so
this is our first test running, and

63
00:05:00.614 --> 00:05:02.730
it's causing a problem.

64
00:05:04.890 --> 00:05:12.502
So I'm actually gonna do ifpremsreturn and

65
00:05:12.502 --> 00:05:18.887
empty string, we'll start there.

66
00:05:18.887 --> 00:05:20.580
So that will get our first test passing.

67
00:05:22.190 --> 00:05:27.320
And now we've got 42 coming in, and so
num will be destructured appropriately.

68
00:05:28.400 --> 00:05:35.068
And we can do if.

69
00:05:39.428 --> 00:05:42.063
&gt;&gt; Mike North: And
we'll do something special.

70
00:05:42.063 --> 00:05:43.594
Otherwise.

71
00:05:50.294 --> 00:05:51.794
&gt;&gt; Mike North: String just for fun.

72
00:05:55.034 --> 00:05:59.608
&gt;&gt; Mike North: All right, so now we should
get 4199, that's the interesting case, and

73
00:05:59.608 --> 00:06:00.730
is in fact num.

74
00:06:00.730 --> 00:06:02.060
So we're ready to go.

75
00:06:02.060 --> 00:06:05.759
And in this case,
I'll just do a little math and

76
00:06:05.759 --> 00:06:09.098
I'll say we're going to take the number.

77
00:06:12.358 --> 00:06:14.578
&gt;&gt; Mike North: So we want like num.

78
00:06:30.238 --> 00:06:31.018
&gt;&gt; Mike North: Something like that.

79
00:06:42.618 --> 00:06:44.898
&gt;&gt; Mike North: That's it and
if we go back to our app.

80
00:06:49.698 --> 00:06:53.118
&gt;&gt; Mike North: There we go, pretty easy.

81
00:06:53.118 --> 00:06:59.550
So the take away here is
these are super easy to test.

82
00:06:59.550 --> 00:07:04.107
They're the thing to reach for
for formatting things, for

83
00:07:04.107 --> 00:07:09.498
pluralizing, and singularizing,
and capitalizing and whatever.

84
00:07:09.498 --> 00:07:13.513
When dealing with a DOM element,
a component is the better tool,

85
00:07:13.513 --> 00:07:18.880
when dealing with something complex,
the component is the better tool.

86
00:07:18.880 --> 00:07:25.579
And the last thing I wanted to show
you was the idea of sub-expressions.

87
00:07:28.579 --> 00:07:31.230
&gt;&gt; Mike North: I want to show you
a different way of using handle bars.

88
00:07:32.310 --> 00:07:35.930
You can do something like this.

89
00:07:40.110 --> 00:07:41.790
So you can use, oops.

90
00:07:43.220 --> 00:07:45.350
All right, that's actually not valid.

91
00:07:45.350 --> 00:07:51.030
You can use a handlebars helper
inside another handlebars helper.

92
00:07:51.030 --> 00:07:56.880
So if we wanted to pass a nice
number to a button label or

93
00:07:56.880 --> 00:08:01.700
something like that, you can use what
are called handlebars sub expressions.

94
00:08:01.700 --> 00:08:05.840
And I don't actually have
a good example here to

95
00:08:05.840 --> 00:08:09.420
work with because we've been sort
of passing entire objects around.

96
00:08:09.420 --> 00:08:13.090
We don't have a nice little label
that we can pass through, but

97
00:08:13.090 --> 00:08:16.320
it's definitely worth learning and
taking a look at.

98
00:08:16.320 --> 00:08:20.680
And there are a couple of Ember
add-ons like Ember truth helpers,

99
00:08:20.680 --> 00:08:27.250
which give you a lot more control for
conditional control flow structures.

100
00:08:27.250 --> 00:08:32.127
It really enriches your ability
to do more in the template if

101
00:08:32.127 --> 00:08:36.905
you feel like you're being
forced to create a whole slew of

102
00:08:36.905 --> 00:08:42.288
computer properties just for
the purpose of negating a boolean.

103
00:08:42.288 --> 00:08:46.420
Or comparing two values and
returning that they're equal.

104
00:08:46.420 --> 00:08:50.690
That's very generic stuff that's
nice to keep out of your app and

105
00:08:50.690 --> 00:08:53.520
just to bring it as an add on.

106
00:08:53.520 --> 00:08:58.460
So that is it and our tests are passing.

107
00:08:58.460 --> 00:09:03.190
So I will commit this and
then we will get into Ember data.

108
00:09:03.190 --> 00:09:09.280
And I'm gonna opt for instead of asking
people to give a shot at switching

109
00:09:09.280 --> 00:09:14.300
from jQuery get to Ember data, I'm just
gonna walk through it from the start.

110
00:09:15.910 --> 00:09:19.520
Because it is a little bit of
a longer process than this and

111
00:09:19.520 --> 00:09:22.320
we're getting towards the end of the day.

112
00:09:22.320 --> 00:09:25.190
So this will be one to just
sort of sit back and watch and

113
00:09:25.190 --> 00:09:28.620
maybe follow along as I go through it.

