WEBVTT

1
00:00:00.000 --> 00:00:03.908
[MUSIC]

2
00:00:03.908 --> 00:00:08.246
&gt;&gt; Mike North: I've undone the changes
that I had when I was just messing around

3
00:00:08.246 --> 00:00:12.821
and I posted a link to the commit in
case anyone wants to look at a silly

4
00:00:12.821 --> 00:00:17.330
example with authentication and
adding one, two, three.

5
00:00:17.330 --> 00:00:23.890
So now we're back on the Critical path for
building our GitHub app.

6
00:00:23.890 --> 00:00:28.990
So, and I'm just going to look at this to
make sure we do everything in order here.

7
00:00:28.990 --> 00:00:31.390
So we're going to create a service and

8
00:00:31.390 --> 00:00:34.890
add an items property to it,
which will be an array.

9
00:00:34.890 --> 00:00:38.740
And then inject it onto the route for
the orgs page.

10
00:00:38.740 --> 00:00:39.550
All right.

11
00:00:39.550 --> 00:00:48.712
So
&gt;&gt; Mike North: Ember

12
00:00:48.712 --> 00:00:49.840
g service favorites.

13
00:00:55.000 --> 00:00:57.450
All right, and we've created our service.

14
00:00:57.450 --> 00:01:02.090
And that's actually all we
need from ember CLI this time.

15
00:01:02.090 --> 00:01:06.380
So we'll go into services, add items and

16
00:01:06.380 --> 00:01:09.960
add new array literal here, so
remember it's a single term.

17
00:01:09.960 --> 00:01:13.790
This object,
the influence of the service, and

18
00:01:13.790 --> 00:01:18.720
thus the array within it will be shared
across all object I eject this on to.

19
00:01:19.890 --> 00:01:24.520
Then I'm going to go to the routes and
find the orgs route.

20
00:01:24.520 --> 00:01:29.790
And I'm going to use
the quick version of this.

21
00:01:33.140 --> 00:01:38.604
Without a name remember that
it's equivalent to this, but

22
00:01:38.604 --> 00:01:46.090
It will infer from the property key that
it's the favorite service that I want.

23
00:01:46.090 --> 00:01:53.930
So the next thing we're gonna do is
tweak our each loop on orcs page.

24
00:01:53.930 --> 00:01:58.610
So that I have something to click
with an action bound to it.

25
00:01:58.610 --> 00:02:04.960
Fair enough.
&gt;&gt; Mike North: I'm just gonna go here.

26
00:02:06.850 --> 00:02:09.790
Reformat things a little bit.

27
00:02:15.818 --> 00:02:17.661
&gt;&gt; Mike North: Something saying favorite,

28
00:02:17.661 --> 00:02:26.805
and I'm gonna bind my action.
&gt;&gt; Mike North: And

29
00:02:26.805 --> 00:02:28.683
then I'm gonna pass in the org,

30
00:02:28.683 --> 00:02:35.228
the whole org itself.
&gt;&gt; Mike North: And

31
00:02:35.228 --> 00:02:36.290
we'll see where we're at.

32
00:02:39.810 --> 00:02:43.220
So click and I get an error.

33
00:02:43.220 --> 00:02:48.520
It's telling me that I have nothing
handling this action what a surprise.

34
00:02:48.520 --> 00:02:52.421
So if I go back to my route and

35
00:02:52.421 --> 00:02:56.496
create my actions object and

36
00:02:56.496 --> 00:03:03.455
implement this taking in
the org as an argument,

37
00:03:03.455 --> 00:03:08.378
because I'm passing it along in my

38
00:03:08.378 --> 00:03:12.791
action binding I can do this get

39
00:03:12.791 --> 00:03:17.920
favorites.items addObject org.

40
00:03:17.920 --> 00:03:23.310
And I don't see anything happening,
because we gotta go to the next step.

41
00:03:24.580 --> 00:03:28.990
So I'm adding the item, and
then I want to log to the console,

42
00:03:29.990 --> 00:03:32.950
every time I add an item to the array.

43
00:03:32.950 --> 00:03:37.110
So, I added this just in an effort to

44
00:03:37.110 --> 00:03:41.370
illustrate how it's not just about sharing
data, but you can share functionality.

45
00:03:41.370 --> 00:03:46.050
This can be sort of a common module,
obviously with a single ten that's really

46
00:03:46.050 --> 00:03:51.710
about state but you can have methods
that are used to manipulate or

47
00:03:51.710 --> 00:03:55.780
can read that shared state which
are also part of the service.

48
00:03:55.780 --> 00:04:03.610
So I want to make this sort of
thing called favorite item.

49
00:04:03.610 --> 00:04:08.848
This get items addObject item,

50
00:04:08.848 --> 00:04:17.020
and then console log items.
&gt;&gt; Mike North: And

51
00:04:17.020 --> 00:04:23.054
then go back to my route, and
I'm gonna actually just grab the favorite

52
00:04:23.054 --> 00:04:29.295
service
&gt;&gt; Mike North: And this should work.

53
00:04:36.698 --> 00:04:38.809
&gt;&gt; Mike North: Okay, it is working,

54
00:04:38.809 --> 00:04:44.260
except I'm just gonna add
something else here, map.

55
00:04:44.260 --> 00:04:51.820
I just want to log the IDs, which I'm
using as handy-dandy error function four.

56
00:04:51.820 --> 00:04:56.150
And now, when we click on things, and
in fact when we click on them repeatedly,

57
00:04:56.150 --> 00:04:59.880
you can see that the uniqueness check is
in fact working, this is just Chrome's

58
00:04:59.880 --> 00:05:06.160
indication that I've logged the exact
same things six times, so there you go.

59
00:05:06.160 --> 00:05:06.950
So now-
&gt;&gt; Speaker 2: What

60
00:05:06.950 --> 00:05:09.837
was the map functionality?
&gt;&gt; Mike North: Could you repeat that

61
00:05:09.837 --> 00:05:11.438
please?
&gt;&gt; Speaker 2: What was the map

62
00:05:11.438 --> 00:05:14.529
functionality?
&gt;&gt; Mike North: Map is a higher order

63
00:05:14.529 --> 00:05:18.550
function on array,
on the prototype for array.

64
00:05:18.550 --> 00:05:24.495
Which lets you essentially
take an array of items and

65
00:05:24.495 --> 00:05:29.361
create an equally sized second array where

66
00:05:29.361 --> 00:05:33.297
each item in the array is derived.

67
00:05:33.297 --> 00:05:36.330
Each item in the destination array
is derived from the source array

68
00:05:37.660 --> 00:05:39.629
as defined by the function
that you pass into it.

69
00:05:41.530 --> 00:05:49.683
So let me make this less confusing.
&gt;&gt; Mike North: So

70
00:05:49.683 --> 00:05:52.480
that is the verbose way of defining it.

71
00:05:53.650 --> 00:05:56.039
But now we have ES 2015, and so

72
00:05:56.039 --> 00:06:03.011
it is just this.
&gt;&gt; Mike North: This is watch,

73
00:06:03.011 --> 00:06:08.940
people use ES6 freely in Ember apps,
because Babel is baked in.

74
00:06:11.030 --> 00:06:13.450
And you can see how I'm defining
my functions the ES6 way.

75
00:06:13.450 --> 00:06:16.210
You're going to see a lot of
this code all over the place.

76
00:06:16.210 --> 00:06:17.960
So definitely brush up.

77
00:06:19.690 --> 00:06:24.470
If this looks a little unfamiliar.

78
00:06:24.470 --> 00:06:26.260
I'm just going to reformat
this a little bit.

79
00:06:26.260 --> 00:06:28.290
Make it clear.

80
00:06:30.300 --> 00:06:31.170
And there we go.

81
00:06:31.170 --> 00:06:33.410
That is.
That's the solution.

82
00:06:33.410 --> 00:06:36.190
So we're through exercise three.

83
00:06:36.190 --> 00:06:37.090
I'm going to commit.

84
00:06:38.220 --> 00:06:39.930
And push to master.

85
00:06:39.930 --> 00:06:42.610
Let me take some questions first.
&gt;&gt; Speaker 3: Yeah, just a couple here.

86
00:06:42.610 --> 00:06:45.528
Can you explain the difference
between add objects and push object?

87
00:06:45.528 --> 00:06:48.933
&gt;&gt; Mike North: Good question.

88
00:06:48.933 --> 00:06:53.041
I'll actually look at the docs for that.
&gt;&gt; Speaker 2: I'm gonna guess that push

89
00:06:53.041 --> 00:06:56.770
object is check the difference.
&gt;&gt; Mike North: That is my suspicion, but

90
00:06:56.770 --> 00:06:57.970
I wanna make absolutely sure.

91
00:07:01.690 --> 00:07:06.240
Looks just like push, if not present.

92
00:07:06.240 --> 00:07:09.960
That's it, that object makes
the presence check first.

93
00:07:09.960 --> 00:07:14.010
That's it.

94
00:07:14.010 --> 00:07:15.760
Any questions?
&gt;&gt; Speaker 3: Is there a way to look

95
00:07:15.760 --> 00:07:19.500
at services in the inspector?
&gt;&gt; Mike North: Yes there is.

96
00:07:19.500 --> 00:07:20.590
An excellent question.

97
00:07:21.670 --> 00:07:28.160
So, you have this object
in the event section.

98
00:07:28.160 --> 00:07:33.250
You have this thing called container,
and maybe we'll have

99
00:07:33.250 --> 00:07:37.880
time to talk deeply about the container
later, but the idea is that this is where

100
00:07:40.030 --> 00:07:43.170
the factories of ember objects live and

101
00:07:43.170 --> 00:07:47.060
this is where singletons live,
basically anything that you can refer to

102
00:07:50.340 --> 00:07:54.890
by a name like the routes live here
which is why we can use strings

103
00:07:54.890 --> 00:07:59.390
in link two instead of passing
the route Module itself.

104
00:07:59.390 --> 00:08:01.990
The container is where that mapping exist.

105
00:08:01.990 --> 00:08:05.968
So if we look here, we can actually
see all of our routes registered here.

106
00:08:05.968 --> 00:08:08.903
You can see the service here.

107
00:08:08.903 --> 00:08:13.671
I'm just saying, interesting, I expect it
to be there, I don't know why it's not

108
00:08:13.671 --> 00:08:19.180
there.
&gt;&gt; Mike North: [LAUGH] Yeah.

109
00:08:19.180 --> 00:08:23.420
Not sure.
&gt;&gt; Mike North: It clearly exists.

110
00:08:23.420 --> 00:08:24.498
Right?

111
00:08:24.498 --> 00:08:26.700
Nope that's not it.

112
00:08:26.700 --> 00:08:30.830
We're using it, but maybe this
is a bug in the Ember inspector.

113
00:08:33.180 --> 00:08:33.840
Don't know.

114
00:08:33.840 --> 00:08:34.766
Sorry.
[LAUGH]

115
00:08:34.766 --> 00:08:36.910
&gt;&gt; Speaker 2: [LAUGH] It's in mine.

116
00:08:36.910 --> 00:08:37.710
&gt;&gt; Mike North: It's in yours.

117
00:08:37.710 --> 00:08:38.810
&gt;&gt; Speaker 2: I mean,

118
00:08:38.810 --> 00:08:41.470
I did the same thing you did.
&gt;&gt; Mike North: Maybe we're using different

119
00:08:41.470 --> 00:08:42.470
versions or something.

120
00:08:43.520 --> 00:08:47.580
Or, another possibility.

121
00:08:47.580 --> 00:08:50.260
I have a much better answer now.

122
00:08:50.260 --> 00:08:54.600
So, services are instantiated lazily.

123
00:08:54.600 --> 00:08:57.220
And in this case, there is no need for

124
00:08:57.220 --> 00:09:00.820
the favorite service until I
actually click on something.

125
00:09:00.820 --> 00:09:05.000
So if I refresh, and
I see I have two services here.

126
00:09:05.000 --> 00:09:06.110
And then I click.

127
00:09:06.110 --> 00:09:09.470
And the inspector is not
actually bound to the app.

128
00:09:09.470 --> 00:09:12.050
So I have to go away and come back.

129
00:09:12.050 --> 00:09:13.660
Now you see we have three services.

130
00:09:13.660 --> 00:09:14.580
Here's the favorite service.

131
00:09:14.580 --> 00:09:16.670
And you can actually even click
on this download site in E.

132
00:09:18.010 --> 00:09:23.620
And what that does is it stores
the service itself to a global variable

133
00:09:23.620 --> 00:09:24.450
in your console.

134
00:09:24.450 --> 00:09:31.328
And so.
&gt;&gt; Mike North: I

135
00:09:31.328 --> 00:09:35.240
can actually access it directly.

136
00:09:35.240 --> 00:09:36.900
So there's what I just favorited.

137
00:09:36.900 --> 00:09:45.430
As you change it
&gt;&gt; Mike North: It should keep going.

138
00:09:47.030 --> 00:09:47.860
Yep, so there you go.

139
00:09:51.230 --> 00:09:56.370
Yep, so container is where you look there,
and keep in mind services created lazily,

140
00:09:56.370 --> 00:10:00.740
so it was absolutely correct that
did not exist until I favored it.

