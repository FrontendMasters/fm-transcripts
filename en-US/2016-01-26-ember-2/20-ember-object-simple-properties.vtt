WEBVTT

1
00:00:00.000 --> 00:00:03.774
[MUSIC]

2
00:00:03.774 --> 00:00:08.930
&gt;&gt; Mike North: So the last little
mini lesson here is Ember.Object and

3
00:00:08.930 --> 00:00:10.910
Simple Properties.

4
00:00:12.450 --> 00:00:16.740
So Ember.Object is the base
class of most everything.

5
00:00:17.820 --> 00:00:24.890
The router is an Ember.Object routes also
component services, Ember data models.

6
00:00:24.890 --> 00:00:29.274
It's all built on this, and to get and

7
00:00:29.274 --> 00:00:35.050
set properties you use this.get and
this.set.

8
00:00:35.050 --> 00:00:41.590
I'll explain why as we dive in a little
deeper, but that is the mechanism.

9
00:00:41.590 --> 00:00:43.890
&gt;&gt; Speaker 2: I find myself using that

10
00:00:43.890 --> 00:00:46.730
only in tests when I
wanna stub something out.

11
00:00:46.730 --> 00:00:51.260
Are there other good use cases for
actually instantiating Ember.Object?

12
00:00:51.260 --> 00:00:56.220
&gt;&gt; Mike North: So, when I'm talking about,
I understand that many people

13
00:00:56.220 --> 00:01:00.880
don't end up directly using Ember.Object,
but an alternate title for

14
00:01:00.880 --> 00:01:04.410
this section might be Common
Functionality You Should Be Aware of

15
00:01:04.410 --> 00:01:06.809
Between All of
the Things We're Talking About Today.

16
00:01:09.210 --> 00:01:12.120
And this is, we are dealing
directly with the base class,

17
00:01:12.120 --> 00:01:15.610
not dealing with the routeness of route.

18
00:01:18.300 --> 00:01:21.421
So, this is the basic idea here.

19
00:01:21.421 --> 00:01:24.440
We can have a property
called firstName right?

20
00:01:24.440 --> 00:01:31.539
And in this case I am just creating
an instance of an Ember.Object,

21
00:01:31.539 --> 00:01:37.652
assigning a property with
a value at instantiation time.

22
00:01:37.652 --> 00:01:43.218
And then you can see that I can call .get
and retrieve the value of the property.

23
00:01:46.194 --> 00:01:49.718
&gt;&gt; Mike North: So
set just is a two argument method and

24
00:01:49.718 --> 00:01:52.921
it's property key and new value.

25
00:01:56.760 --> 00:01:59.740
&gt;&gt; Mike North: And last thing,
actually I have couple more things here.

26
00:02:01.180 --> 00:02:05.630
So properties can be deeply
nested in a hierarchy, and

27
00:02:05.630 --> 00:02:10.520
all you need to do to directly
access first within name

28
00:02:10.520 --> 00:02:13.940
is get the property name.first.

29
00:02:13.940 --> 00:02:17.890
And so this allows you to be
much more concise especially if

30
00:02:17.890 --> 00:02:21.550
what you're getting are other objects
that have other properties on them.

31
00:02:21.550 --> 00:02:26.501
You don't have to do this .get .get .get,
that can all be chained together just

32
00:02:26.501 --> 00:02:29.963
in terms of describing
the property that you want to get.

33
00:02:33.451 --> 00:02:37.371
&gt;&gt; Mike North: And the last thing I
think you'll need to be aware of for

34
00:02:37.371 --> 00:02:43.050
what we're about to do is you have to
treat arrays a little bit differently.

35
00:02:43.050 --> 00:02:48.980
And the reason is that Ember needs
to be able to observe arrays.

36
00:02:48.980 --> 00:02:50.910
And in order to do so,

37
00:02:50.910 --> 00:02:55.790
we need to use the appropriate hooks for
adding things and removing things.

38
00:02:55.790 --> 00:02:59.950
So that things that are bound to the
array, things that are, like an each for

39
00:02:59.950 --> 00:03:06.050
example can be informed that
they need to update themselves.

40
00:03:07.110 --> 00:03:13.330
So in this case you will want to get
an array, and then operate on that array.

41
00:03:13.330 --> 00:03:20.268
So here you can see that I start
out with a two component name.

42
00:03:20.268 --> 00:03:23.699
And I can print it out and
prove that I can get the array and

43
00:03:23.699 --> 00:03:27.286
that the typical array methods
that you're used to work.

44
00:03:27.286 --> 00:03:32.350
And then I used popObject which
is a KVO-compliant method.

45
00:03:32.350 --> 00:03:34.860
KVO means key value observer.

46
00:03:36.180 --> 00:03:40.030
So that means that things that
are observing this array will

47
00:03:40.030 --> 00:03:42.400
be notified that something has changed.

48
00:03:42.400 --> 00:03:45.620
And then when I attempt to print the same
thing we can see that I've removed

49
00:03:46.950 --> 00:03:47.830
an object.

50
00:03:47.830 --> 00:03:52.480
Just be aware of this because you can, if
you just start directly manipulating with

51
00:03:52.480 --> 00:03:56.690
push you may not get the updates
you're expecting to get.

52
00:03:56.690 --> 00:04:01.230
&gt;&gt; Speaker 3: So those are all
the functions you'll find in the class?

53
00:04:01.230 --> 00:04:05.926
&gt;&gt; Mike North: If you want to see in this
case, in this specific example if you

54
00:04:05.926 --> 00:04:12.270
wanted the complete set I would
look at Ember.MutableArray.

55
00:04:12.270 --> 00:04:17.327
Right, so there's Ember.Array
which is not necessarily mutable,

56
00:04:17.327 --> 00:04:21.870
and then there's MutableArray
which contains a variety of KVO

57
00:04:21.870 --> 00:04:25.570
compliant methods that you
can use to manipulate.

58
00:04:28.230 --> 00:04:33.042
All right, so I'm just gonna free-form
a little bit to illustrate how these

59
00:04:33.042 --> 00:04:37.201
things fit together, and
this has nothing to do with the example.

60
00:04:37.201 --> 00:04:39.978
But I just want to flesh
it out a little bit and

61
00:04:39.978 --> 00:04:43.744
show you some actual use before
we start getting into this.

62
00:04:49.508 --> 00:04:53.689
&gt;&gt; Mike North: So I'm gonna generate
a service called authentication.

63
00:04:53.689 --> 00:04:58.265
And I'm gonna turn my mirroring off so
I don't code like super slowly.

64
00:04:58.265 --> 00:05:05.920
[LAUGH] All right and
pardon the swiping back and forth.

65
00:05:05.920 --> 00:05:10.990
So we're gonna generate a service and
actually this should be fine.

66
00:05:10.990 --> 00:05:13.160
We already have things
that can handle actions.

67
00:05:13.160 --> 00:05:16.738
All right, so I'm gonna go to my code and

68
00:05:16.738 --> 00:05:22.490
look at,
&gt;&gt; Mike North: Let's close all my stuff.

69
00:05:22.490 --> 00:05:26.808
So we've got a new folder here that
wasn't there before called Services and

70
00:05:26.808 --> 00:05:31.210
if we look at the file, it's just giving
me a nice little thing to start with.

71
00:05:36.100 --> 00:05:40.011
I'm gonna add an array, records.

72
00:05:44.958 --> 00:05:49.424
&gt;&gt; Mike North: And then I'm gonna
go to a route that currently

73
00:05:49.424 --> 00:05:54.128
isn't returning anything
from its model hook.

74
00:05:59.469 --> 00:06:01.528
&gt;&gt; Mike North: Actually we can just
do this a little bit differently.

75
00:06:07.598 --> 00:06:12.068
&gt;&gt; Mike North: So instead of controller,
I'm gonna use this trick where

76
00:06:12.068 --> 00:06:16.360
we add something to make it
available to the template.

77
00:06:16.360 --> 00:06:18.940
And what do we do when we
set up the controller first?

78
00:06:18.940 --> 00:06:19.526
Super.

79
00:06:23.394 --> 00:06:24.494
&gt;&gt; Mike North: All right, and

80
00:06:24.494 --> 00:06:29.744
now it's time to inject this service
onto the route so that this route will

81
00:06:29.744 --> 00:06:35.730
have access to this shared object
that has an array I'm interested in.

82
00:06:35.730 --> 00:06:37.134
And the way that works is.

83
00:06:43.736 --> 00:06:45.250
&gt;&gt; Mike North: Just that.

84
00:06:45.250 --> 00:06:48.190
Earlier I said the name was optional.

85
00:06:48.190 --> 00:06:52.360
Passing a name into this
function here is optional.

86
00:06:52.360 --> 00:06:58.450
If you don't pass a name in the property
key itself will be used as the name.

87
00:06:58.450 --> 00:07:02.554
So this is equivalent to that, but

88
00:07:02.554 --> 00:07:08.930
we're going convention
over configuration style.

89
00:07:10.080 --> 00:07:15.388
All right and now I'm just gonna
just do controller set records.

90
00:07:20.263 --> 00:07:21.725
&gt;&gt; Mike North: And we'll do,

91
00:07:25.758 --> 00:07:30.121
&gt;&gt; Mike North:
this.get('authentication.records')

92
00:07:34.331 --> 00:07:35.489
&gt;&gt; Mike North: And I'm actually gonna put

93
00:07:35.489 --> 00:07:36.902
something in there just for fun.

94
00:07:42.598 --> 00:07:45.190
&gt;&gt; Mike North: I'm gonna go
into the org template and

95
00:07:45.190 --> 00:07:48.680
I'm gonna use a cool little
debugging trick here.

96
00:07:52.530 --> 00:07:55.260
This is the equivalent of console.log.

97
00:07:55.260 --> 00:07:59.990
Keep in mind,
your templates are updated dynamically.

98
00:07:59.990 --> 00:08:03.986
Don't expect your log to be hold over,
and over, and over, and

99
00:08:03.986 --> 00:08:07.316
over again cuz things may
not work the way you expect.

100
00:08:07.316 --> 00:08:11.450
So, we're gonna drill into
the correct page, right?

101
00:08:13.540 --> 00:08:16.550
I'm in the org wrap template here.

102
00:08:16.550 --> 00:08:21.460
And so now I'm looking at, this means
that this template will be active.

103
00:08:21.460 --> 00:08:24.850
In fact the word Facebook is
coming from this h4 here.

104
00:08:24.850 --> 00:08:29.150
And I just want to point out that
log records is showing up here

105
00:08:29.150 --> 00:08:31.600
as you know in the console.

106
00:08:31.600 --> 00:08:35.781
And you can look at it and see that this
is in fact the property from the service.

107
00:08:37.808 --> 00:08:40.101
&gt;&gt; Mike North: So I'm gonna each over it.

108
00:08:45.230 --> 00:08:48.057
&gt;&gt; Mike North: As record.

109
00:08:51.054 --> 00:08:54.606
&gt;&gt; Mike North: And we'll do another ul.

110
00:09:00.296 --> 00:09:03.390
&gt;&gt; Mike North: All right, and so
now we should get, there we go, one.

111
00:09:04.660 --> 00:09:10.523
So now,
I want to add a span here with an action.

112
00:09:15.765 --> 00:09:19.403
&gt;&gt; Mike North: And I'm gonna call
it addTwoToRecords or better yet.

113
00:09:28.555 --> 00:09:30.040
&gt;&gt; Mike North: All right,
so this is the span.

114
00:09:31.210 --> 00:09:35.470
And just an interesting side note,
you can see that there is

115
00:09:36.970 --> 00:09:40.180
some indication that an action
has been bound to this span.

116
00:09:40.180 --> 00:09:44.880
You can see it right
as a dom an attribute.

117
00:09:44.880 --> 00:09:45.633
So if I click it.

118
00:09:51.648 --> 00:09:53.700
&gt;&gt; Mike North: We're gonna
get an error message.

119
00:09:53.700 --> 00:10:00.030
And Ember is telling me that this action
bubbled up and nothing handled it.

120
00:10:01.130 --> 00:10:04.280
And the reason is,
I haven't implemented it in the route yet.

121
00:10:04.280 --> 00:10:10.612
So if I go to routes and
I add an action here.

122
00:10:14.656 --> 00:10:19.829
&gt;&gt; Mike North: And I add this action
here and we'll call it value.

123
00:10:23.552 --> 00:10:24.960
&gt;&gt; Mike North: Alert to start.

124
00:10:26.550 --> 00:10:30.892
And look, now we're receiving
a click event, and in fact.

125
00:10:39.950 --> 00:10:41.720
&gt;&gt; Mike North: We're passing
along the data as well.

126
00:10:42.820 --> 00:10:45.420
That argument to the action
is being passed along.

127
00:10:45.420 --> 00:10:46.510
That's what val is.

128
00:10:47.960 --> 00:10:50.610
And so now,
to actually add this to the array

129
00:10:53.510 --> 00:10:57.329
you just do this.get('authentication').

130
00:11:01.370 --> 00:11:04.170
And add a similar looking object.

131
00:11:06.280 --> 00:11:08.970
&gt;&gt; Speaker 4: You gotta do records,
allocation.records?

132
00:11:08.970 --> 00:11:09.570
&gt;&gt; Mike North: You're correct, so

133
00:11:09.570 --> 00:11:15.440
that would have just added it directly to
the service which would have been bad.

134
00:11:15.440 --> 00:11:19.964
And I click this, and we see Two pop up.

135
00:11:19.964 --> 00:11:24.230
And in fact I'm adding similar
objects over and over and over again.

136
00:11:25.460 --> 00:11:33.338
So what this should hopefully illustrate
is I can access properties using this.get.

137
00:11:33.338 --> 00:11:36.710
I can kind of have this object,

138
00:11:36.710 --> 00:11:41.360
this service here, and have that store
some data and if I wanted to make

139
00:11:41.360 --> 00:11:44.840
this available on multiple rounds
they're all sharing the same instance.

140
00:11:44.840 --> 00:11:46.108
It's a singleton.

141
00:11:46.108 --> 00:11:49.315
And then finally I set
up an action binding so

142
00:11:49.315 --> 00:11:53.924
that my route can handle this action and
do something about it.

143
00:11:53.924 --> 00:11:58.260
So that make sense how those things kind
of fit together in what I showed you?

144
00:12:00.820 --> 00:12:04.486
&gt;&gt; Speaker 5: How do you do an action
other than the default of click?

145
00:12:04.486 --> 00:12:05.591
&gt;&gt; Mike North: Like what?

146
00:12:05.591 --> 00:12:10.610
&gt;&gt; Speaker 5: Like keyup or something,
anything other than the default.

147
00:12:10.610 --> 00:12:11.660
Like resize the browser.

148
00:12:12.810 --> 00:12:15.730
&gt;&gt; Mike North: So
resize the browser is an interesting one.

149
00:12:16.960 --> 00:12:21.534
In that case, you'll only have
a resize event on window right that's

150
00:12:21.534 --> 00:12:24.567
the only thing that's
gonna fire that event.

151
00:12:24.567 --> 00:12:28.439
And that's a great example of a service
where you could have one event

152
00:12:28.439 --> 00:12:29.174
listener for

153
00:12:29.174 --> 00:12:33.990
a window that is shared across anything
that needs to know about resizing.

154
00:12:33.990 --> 00:12:37.850
Instead of having every single component
that wants to try to be responsive,

155
00:12:37.850 --> 00:12:40.459
each independently attaching listeners.

156
00:12:41.720 --> 00:12:46.730
That gets quite messy and, depending
on what kind of component you're using,

157
00:12:46.730 --> 00:12:50.680
like if the table cell sparkline,
that can be very expensive.

158
00:12:52.060 --> 00:12:55.980
And in terms of like a hover event or

159
00:12:55.980 --> 00:13:01.490
something, so
there are other ways to bind actions.

160
00:13:01.490 --> 00:13:05.870
I'd like us to start here, but
I will not let that go unanswered.

