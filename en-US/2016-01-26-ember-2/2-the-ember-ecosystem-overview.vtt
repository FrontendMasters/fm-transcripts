WEBVTT

1
00:00:00.000 --> 00:00:03.985
[MUSIC]

2
00:00:03.985 --> 00:00:06.570
&gt;&gt; Speaker 1: I talked about
the Ember ecosystem and

3
00:00:06.570 --> 00:00:11.110
about how we're trying to craft
a complete solution here.

4
00:00:11.110 --> 00:00:16.500
These are the official pieces
of the Ember ecosystem.

5
00:00:16.500 --> 00:00:22.000
And they're all versioned together so
they should all be

6
00:00:22.000 --> 00:00:28.100
version 2.1 right now, or getting there,
preparing for a release there.

7
00:00:29.460 --> 00:00:31.913
But because they're all
versioned the same and

8
00:00:31.913 --> 00:00:34.242
they're all released on a similar cadence,

9
00:00:34.242 --> 00:00:38.055
the idea is that you should have a set
of tools that you know work together.

10
00:00:38.055 --> 00:00:42.431
That's not to say that you have to
upgrade everything at the same time but

11
00:00:42.431 --> 00:00:46.535
attention is paid to how these fit
together before a release is cut.

12
00:00:50.295 --> 00:00:54.255
&gt;&gt; Speaker 1: Another useful thing to know
is that at its core Ember has a bunch of

13
00:00:54.255 --> 00:00:58.080
little microlibraries which
can be consumed independently.

14
00:00:59.880 --> 00:01:01.400
Two of them have to do with routing,

15
00:01:01.400 --> 00:01:04.780
one is a promise library called RSVP,
which is fairly popular.

16
00:01:04.780 --> 00:01:07.400
You can use it in node if you wish.

17
00:01:08.475 --> 00:01:11.220
HTMLbars is the templating engine.

18
00:01:12.240 --> 00:01:15.410
Sorry, handlebars and
HTMLbars are templating engines.

19
00:01:15.410 --> 00:01:18.820
The difference is string concatenation.

20
00:01:18.820 --> 00:01:21.330
Emitting strings versus
emitting dom fragments.

21
00:01:22.440 --> 00:01:27.340
Broccoli is the asset pipeline which now
Angular 2 is using in their tool chain.

22
00:01:28.340 --> 00:01:35.710
So a lot of very useful little
nuggets inside Ember that

23
00:01:35.710 --> 00:01:41.130
we make an effort to have as
freestanding useful modules.

24
00:01:44.530 --> 00:01:47.930
All right, so
let's plan out some goals here.

25
00:01:48.990 --> 00:01:54.900
And in the spirit of getting things done,
which is what Ember's all about,

26
00:01:54.900 --> 00:02:00.560
productivity, I want to define these goals
in term of what I want you guys to be able

27
00:02:00.560 --> 00:02:05.750
to do and how I want you to, I want you to
feel comfortable doing a set of things.

28
00:02:05.750 --> 00:02:09.110
First, I want you guys to
know routing inside and out.

29
00:02:09.110 --> 00:02:12.590
Routing is often an after
thought added to a framework.

30
00:02:12.590 --> 00:02:15.378
In the case of Ember, it is at the core.

31
00:02:15.378 --> 00:02:21.930
It was almost, it seems to be potentially

32
00:02:21.930 --> 00:02:27.240
the most well thought-out piece of
the framework itself, to the extent that

33
00:02:27.240 --> 00:02:31.520
other popular routers like React Router
are modeling off of Ember's router.

34
00:02:33.450 --> 00:02:36.460
I want you to be able to
use handlebars comfortably.

35
00:02:36.460 --> 00:02:41.110
And that means using the helpers that
come with the handlebars library.

36
00:02:41.110 --> 00:02:44.640
The helpers that Ember adds and
makes available to you, and

37
00:02:44.640 --> 00:02:47.150
I want you to be able to
define your own helpers.

38
00:02:47.150 --> 00:02:51.880
And we'll learn a little bit more about
what helpers are and how to build them,

39
00:02:51.880 --> 00:02:59.600
but essentially it's extending
the HTMLish part of your application.

40
00:03:00.830 --> 00:03:03.580
I want you to be able to use
components comfortably and

41
00:03:03.580 --> 00:03:06.940
to be able to compose them together
to define user interfaces.

42
00:03:06.940 --> 00:03:12.340
So we'll go over a bunch of different use
cases but components are very heavily

43
00:03:12.340 --> 00:03:17.910
emphasized in the Ember 2.0 idioms, right?

44
00:03:17.910 --> 00:03:22.800
There are some objects that I'm actually
making an effort to not talk about today,

45
00:03:22.800 --> 00:03:26.740
because they've been deprecated,
and they still exist in the code.

46
00:03:26.740 --> 00:03:31.300
But the component has sort of
taken on new responsibilities and

47
00:03:31.300 --> 00:03:36.982
it has more of a primary
role in Ember apps today.

48
00:03:36.982 --> 00:03:41.316
I want you to be able to use Ember
data to interact with the restful API.

49
00:03:42.420 --> 00:03:48.093
Again, a very well though-out
idea that is inspiring similar

50
00:03:48.093 --> 00:03:55.384
matching ideas in other frameworks like
angular data, which is quite popular.

51
00:03:55.384 --> 00:04:00.514
Testing is an area of the Ember
development lifecycle that I've

52
00:04:00.514 --> 00:04:05.365
personally put a lot of work into,
making sure it's solid.

53
00:04:05.365 --> 00:04:09.743
So I want you guys to be super confident
in terms of writing unit tests,

54
00:04:09.743 --> 00:04:12.360
integration tests, functional tests.

55
00:04:12.360 --> 00:04:15.740
I want you to know how
to mock out an API so

56
00:04:15.740 --> 00:04:21.870
that you can kind of have your app
simulate more close effectively.

57
00:04:21.870 --> 00:04:26.240
And then finally, I wanna make sure you
guys know how to build Ember addons, and

58
00:04:26.240 --> 00:04:30.320
this is a great way to
take a chunk of your app.

59
00:04:30.320 --> 00:04:35.880
Maybe it's your user interface primitives,
or you have your input field,

60
00:04:35.880 --> 00:04:39.380
then your date pickers, and
whatever little controls you have.

61
00:04:39.380 --> 00:04:42.280
You wanna break those out into
a library so that you can have three or

62
00:04:42.280 --> 00:04:46.000
four apps declaring
a dependency on this library.

63
00:04:46.000 --> 00:04:48.860
I want you to understand how that works
because that's a very well thought-out

64
00:04:48.860 --> 00:04:50.270
store and a great strength of Ember.

