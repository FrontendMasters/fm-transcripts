WEBVTT

1
00:00:00.000 --> 00:00:03.793
[MUSIC]

2
00:00:03.793 --> 00:00:08.084
&gt;&gt; Mike North: So I'm gonna go through
the process of creating a unit test for

3
00:00:08.084 --> 00:00:12.430
the computed property macro
that we built is an array.

4
00:00:12.430 --> 00:00:16.110
I'm going to build a component
integration test for

5
00:00:16.110 --> 00:00:21.330
our GitHub org component with
a specific focus on making sure that

6
00:00:21.330 --> 00:00:26.210
the contract, both the data we pass in and
the action we expect to come out,

7
00:00:26.210 --> 00:00:30.780
that is in place and
doing what I expect it should be doing.

8
00:00:30.780 --> 00:00:36.270
And then finally, I'm going to go
through like a relatively simple

9
00:00:36.270 --> 00:00:40.980
workflow that drills through a couple
links, just kind of making sure that if

10
00:00:40.980 --> 00:00:47.070
any of the routes were to
throw errors as part of

11
00:00:47.070 --> 00:00:51.670
their transition process,
that would cause this test to fail.

12
00:00:51.670 --> 00:00:58.260
So it's a nice sort of smoke, high-level
test that goes through a bunch of things,

13
00:00:58.260 --> 00:01:02.490
and if anything breaks along that
long path, we would be alerted to it.

14
00:01:04.010 --> 00:01:10.140
So first, I'm going to actually go through
and fix all the currently failing tests,

15
00:01:10.140 --> 00:01:16.880
with the exception of JSHint, cuz I don't
wanna waste your guys' time doing that.

16
00:01:16.880 --> 00:01:22.420
So it looks like the favorite,
something is different here about

17
00:01:22.420 --> 00:01:27.180
what the component expects to be
rendered on the github-org test.

18
00:01:27.180 --> 00:01:33.994
So if we go to, tests, integration and
we've got the github-org test here.

19
00:01:37.474 --> 00:01:41.464
&gt;&gt; Mike North: So I'm gonna comment this
out, so we're only dealing with one test

20
00:01:41.464 --> 00:01:44.334
at a time,
one set of restrictions I should say.

21
00:01:44.334 --> 00:01:52.015
And what we're basically seeing if we
look at the green versus the red here,

22
00:01:52.015 --> 00:01:57.980
we're seeing that we expect
an empty string here.

23
00:01:57.980 --> 00:02:03.030
And what we're instead seeing as
the text inside this component.

24
00:02:03.030 --> 00:02:07.180
The textual representation of
this component is favorite and

25
00:02:07.180 --> 00:02:08.390
some square brackets.

26
00:02:08.390 --> 00:02:11.138
And we know that's
exactly what we intended.

27
00:02:11.138 --> 00:02:13.530
So, I'm gonna use an ES6 string.

28
00:02:15.940 --> 00:02:18.890
Little known advantage
of ES6 strings is that

29
00:02:19.940 --> 00:02:23.080
multiline string literals are really easy.

30
00:02:24.460 --> 00:02:27.195
So, gonna delete that.

31
00:02:30.835 --> 00:02:31.935
&gt;&gt; Mike North: And then one more.

32
00:02:36.075 --> 00:02:40.050
&gt;&gt; Mike North: And this should pass.

33
00:02:40.050 --> 00:02:45.090
My next error is that it expects two
assertions, but only one was run.

34
00:02:45.090 --> 00:02:47.280
That is coming from this here.

35
00:02:47.280 --> 00:02:51.500
So this is part of the initial test
that Ember CLI created for me.

36
00:02:53.790 --> 00:02:55.930
I have commented out one
of the two assertions.

37
00:02:57.310 --> 00:03:02.250
I'm gonna fix this by just
uncommenting this, and

38
00:03:02.250 --> 00:03:05.798
I know we're also going to
hit the same test failure.

39
00:03:05.798 --> 00:03:11.030
So I'm gonna just copy this
string into the expected result.

40
00:03:13.230 --> 00:03:21.800
I'm deliberately deleting
template block text, so

41
00:03:21.800 --> 00:03:26.030
it is seeing template block text
in the actual rendered component,

42
00:03:27.450 --> 00:03:31.840
but it's not expecting that.

43
00:03:31.840 --> 00:03:34.840
&gt;&gt; Speaker 2: They're asking if you
can make the text smaller in your

44
00:03:34.840 --> 00:03:37.170
text editor, or maybe just

45
00:03:37.170 --> 00:03:39.880
make the split screen a little bit-
&gt;&gt; Mike North: Better?

46
00:03:39.880 --> 00:03:42.297
&gt;&gt; Speaker 2: It's hard when they're
scrolling back and forth, so.

47
00:03:42.297 --> 00:03:44.092
Does that still look okay on the video?

48
00:03:44.092 --> 00:03:46.588
[INAUDIBLE] Recording.

49
00:03:46.588 --> 00:03:47.948
Thanks.

50
00:03:51.908 --> 00:03:55.100
&gt;&gt; Mike North: So here,
what I'm gonna do is delete yield,

51
00:03:55.100 --> 00:04:00.710
because I don't really care about
this component working in block form.

52
00:04:00.710 --> 00:04:03.570
I currently am just using it in line form,

53
00:04:03.570 --> 00:04:07.230
and this is just gonna be
an end line component.

54
00:04:08.860 --> 00:04:11.360
So, I'm gonna hide the passed tests.

55
00:04:11.360 --> 00:04:13.870
Just so
we've got three failing tests left.

56
00:04:15.880 --> 00:04:20.880
GitHub-repo component,
so test integration,

57
00:04:20.880 --> 00:04:26.140
and then we've got this GitHub-org test.

58
00:04:26.140 --> 00:04:29.587
Basically the same problem.

59
00:04:29.587 --> 00:04:33.830
Sorry, GitHub-repo, repo test.

60
00:04:33.830 --> 00:04:39.050
Basically the same problem here
where we have to give it forks,

61
00:04:40.750 --> 00:04:43.990
watchers, and close the string.

62
00:04:45.260 --> 00:04:50.138
This is not really an effective test,
it's because I don't have any

63
00:04:50.138 --> 00:04:54.526
data being passed into it,
I'm running into a problem here.

64
00:04:54.526 --> 00:04:56.366
Prince.

65
00:04:56.366 --> 00:04:57.946
&gt;&gt; Speaker 3: What are you
doing with this, Prince?

66
00:04:57.946 --> 00:05:00.546
&gt;&gt; Mike North: I think I may
run into an additional problem.

67
00:05:00.546 --> 00:05:06.069
Cuz my editor is deleting
[LAUGH] trailing spaces.

68
00:05:07.080 --> 00:05:11.291
All right, we're gonna leave that one for
the time being, cuz I'm gonna fix that by

69
00:05:11.291 --> 00:05:14.811
providing some real data and
we won't have trailing spaces anymore.

70
00:05:14.811 --> 00:05:15.591
So.

71
00:05:15.591 --> 00:05:16.751
&gt;&gt; Speaker 4: I'm sorry.

72
00:05:16.751 --> 00:05:17.491
&gt;&gt; Mike North: Yes.

73
00:05:17.491 --> 00:05:18.251
&gt;&gt; Speaker 4: Can I ask a question?

74
00:05:18.251 --> 00:05:18.771
&gt;&gt; Mike North: Sure.

75
00:05:18.771 --> 00:05:19.614
&gt;&gt; Speaker 4: Would you,

76
00:05:19.614 --> 00:05:24.258
I mean I know we didn't do this TDD
where you put up the test first.

77
00:05:24.258 --> 00:05:29.070
Ember had stopped us out of test,
but could you talk just for a second

78
00:05:29.070 --> 00:05:34.062
about the concept of this specific test,
like what are we gonna test?

79
00:05:34.062 --> 00:05:35.462
&gt;&gt; Mike North: Yes.

80
00:05:35.462 --> 00:05:37.860
&gt;&gt; Speaker 4: And
what's a good test, for this?

81
00:05:37.860 --> 00:05:38.770
&gt;&gt; Mike North: Right.
So for

82
00:05:38.770 --> 00:05:41.505
the GitHub-repo component,
I'm actually gonna skip that,

83
00:05:41.505 --> 00:05:46.020
cuz I wanna, I'll give you one good
example of our more complex component.

84
00:05:46.020 --> 00:05:49.730
So I'll tell what I aim to do
with the GitHub or a component.

85
00:05:49.730 --> 00:05:55.080
I want to verify that it
behaves as I expect, and we can

86
00:05:55.080 --> 00:06:01.520
think about what that means, but behaves
as I expect when I pass no data in at all.

87
00:06:01.520 --> 00:06:07.230
I wanna verify that it behaves as I
expect when I pass in an org with,

88
00:06:07.230 --> 00:06:12.210
it's a positive test case where it has
an ID, and I will verify that name is

89
00:06:12.210 --> 00:06:17.020
in fact rendered in the DOM
when that is passed.

90
00:06:17.020 --> 00:06:19.890
And then I'm going to change the org.

91
00:06:19.890 --> 00:06:22.730
I'm gonna make sure that
the data binding actually works.

92
00:06:22.730 --> 00:06:26.010
Change the org, and
verify that the DOM changes in response.

93
00:06:26.010 --> 00:06:29.880
And then finally, I'm gonna
programmatically click the little favorite

94
00:06:29.880 --> 00:06:32.670
link to the left of the org.

95
00:06:32.670 --> 00:06:36.093
And verify that the correct
action is fired, and

96
00:06:36.093 --> 00:06:39.442
that the word favorite
changes to unfavorite.

97
00:06:39.442 --> 00:06:46.326
So at a high level, this is
verifying that it works as expected,

98
00:06:46.326 --> 00:06:52.191
and that the component with
no arguments case doesn't

99
00:06:52.191 --> 00:06:57.300
completely blow up and
throw a bunch of errors.

100
00:06:57.300 --> 00:07:00.917
At worst, like it would be acceptable
if it just rendered some stuff but

101
00:07:00.917 --> 00:07:04.313
it was like there were some blanks
that hadn't yet been filled in.

102
00:07:04.313 --> 00:07:08.141
That's acceptable compared to
throwing an exception of some sort,

103
00:07:08.141 --> 00:07:09.860
which would be unacceptable.

104
00:07:11.120 --> 00:07:15.430
All right, and I like that approach,
so I'm gonna actually, as I go

105
00:07:15.430 --> 00:07:20.300
into the acceptance test, kind of explain
where I'm going with that as well as I go.

106
00:07:22.960 --> 00:07:25.960
So here, passing in template block text.

107
00:07:28.820 --> 00:07:31.660
Let's see, so I expected this.

108
00:07:31.660 --> 00:07:33.770
The result I got was this here.

109
00:07:35.990 --> 00:07:41.003
And looks like I need
to add the same thing.

110
00:07:51.723 --> 00:07:56.443
&gt;&gt; Mike North: Then I'm just gonna grab
this, let it run, see where we're at.

111
00:07:56.443 --> 00:08:00.063
So that's there, and
then this is going to.

112
00:08:04.603 --> 00:08:06.643
&gt;&gt; Mike North: I just wanna make sure
I'm looking at the correct test here.

113
00:08:06.643 --> 00:08:09.939
So we expected,
let me comment this one out just so

114
00:08:09.939 --> 00:08:12.223
I know which test I'm looking at.

115
00:08:16.563 --> 00:08:19.603
&gt;&gt; Mike North: So
we expected this and got this.

116
00:08:23.423 --> 00:08:25.900
&gt;&gt; Mike North: Followed by the forks and
the watchers.

117
00:08:25.900 --> 00:08:27.820
All right, now this makes sense to me.

118
00:08:27.820 --> 00:08:28.873
So I'm actually gonna do.

119
00:08:38.059 --> 00:08:41.679
&gt;&gt; Mike North: I'm gonna
replace all the spaces, and.

120
00:08:46.438 --> 00:08:47.458
&gt;&gt; Mike North: Is that what
I'm actually doing here?

121
00:08:51.238 --> 00:08:55.118
&gt;&gt; Mike North: Changed my mind, I'm
just gonna add a couple new lines here.

122
00:09:16.861 --> 00:09:19.361
&gt;&gt; Mike North: So
no one see what's wrong here?

123
00:09:19.361 --> 00:09:22.607
&gt;&gt; Speaker 5: You took out table block
text from your rendered block, so

124
00:09:22.607 --> 00:09:25.080
now it's not expecting temper block text.

125
00:09:25.080 --> 00:09:26.510
&gt;&gt; Speaker 2: This looks good now.

126
00:09:26.510 --> 00:09:27.400
Move closer.

127
00:09:27.400 --> 00:09:28.140
&gt;&gt; Mike North: This is closer.

128
00:09:28.140 --> 00:09:32.600
So now comment out,
take a look at this one.

129
00:09:35.130 --> 00:09:37.840
This actually looks good as well.

130
00:09:39.310 --> 00:09:44.225
And I'm gonna put something in here.

131
00:09:44.225 --> 00:09:52.865
ABC, and I will expect that to be here
with what looks to be four or five spaces.

132
00:09:52.865 --> 00:09:54.445
Four or five new lines.

133
00:09:54.445 --> 00:09:57.725
Try it one more.

134
00:10:03.307 --> 00:10:06.407
&gt;&gt; Speaker 6: It's just trailing space.

135
00:10:06.407 --> 00:10:08.150
&gt;&gt; Mike North: Yeah,
it could just be trailing space.

136
00:10:08.150 --> 00:10:09.580
So.
&gt;&gt; Speaker 2: Somebody said you still

137
00:10:09.580 --> 00:10:11.890
have a leading space issue?

138
00:10:11.890 --> 00:10:15.327
&gt;&gt; Mike North: So I'm gonna start,
I'm gonna actually plug in data, and

139
00:10:15.327 --> 00:10:17.900
we'll get rid of the trailing space issue.

140
00:10:17.900 --> 00:10:22.100
So the way, if we look at
the comment on lines 11 and 12.

141
00:10:22.100 --> 00:10:26.580
We can actually set up context,

142
00:10:27.720 --> 00:10:32.700
we can set up something in
the scope of the outside world,

143
00:10:32.700 --> 00:10:36.850
that we can then pass into
the component with just this.set.

144
00:10:36.850 --> 00:10:41.040
So, I'm gonna create an object for
a simulated repo.

145
00:10:42.820 --> 00:10:51.094
So,
&gt;&gt; Mike North: Ember Object extend,

146
00:10:51.094 --> 00:10:57.024
or I can just create it in this case,

147
00:10:57.024 --> 00:11:02.362
and a repo has a forks_count and

148
00:11:02.362 --> 00:11:07.916
a watchers_count, and a name.

149
00:11:12.416 --> 00:11:14.216
&gt;&gt; Mike North: And then,
I'm gonna pass it in.

150
00:11:17.316 --> 00:11:23.090
&gt;&gt; Mike North: And
make it available in the context.

151
00:11:23.090 --> 00:11:26.585
&gt;&gt; Speaker 7: So the reason that you would
use Ember Object as opposed to a plain old

152
00:11:26.585 --> 00:11:29.525
Javascript object is so
that you can do like repo, sets,

153
00:11:29.525 --> 00:11:31.146
and its individual property?

154
00:11:31.146 --> 00:11:32.966
&gt;&gt; Mike North: Yep, and
it's also just to have it.

155
00:11:37.706 --> 00:11:43.706
&gt;&gt; Mike North: And there's the name,
right after, right before, I should say.

156
00:11:50.829 --> 00:11:51.907
&gt;&gt; Mike North: This is why
I hate the white space.

157
00:11:51.907 --> 00:11:57.147
All right, so this test on the top
is passing, and then here we've got.

158
00:11:57.147 --> 00:12:00.027
I'm just gonna pass the same repo.

159
00:12:05.747 --> 00:12:06.729
&gt;&gt; Mike North: And.

160
00:12:10.788 --> 00:12:11.548
&gt;&gt; Mike North: Render.

161
00:12:14.688 --> 00:12:19.041
&gt;&gt; Mike North: See, forks: 32, or

162
00:12:19.041 --> 00:12:24.489
99, and delete one space.

163
00:12:24.489 --> 00:12:26.649
Sorry, I know this is boring.

164
00:12:26.649 --> 00:12:31.124
All right, so now we're actually
done with fixing those tests, and

165
00:12:31.124 --> 00:12:35.410
now we've got,
cannot read property index of undefined.

166
00:12:35.410 --> 00:12:40.260
I happen to know that this is in the test
we're gonna focus on for our unit test.

167
00:12:40.260 --> 00:12:47.514
If has to do with what we've implemented
in this util module we created for

168
00:12:47.514 --> 00:12:53.050
is an array, that's actually
making the default unit test for

169
00:12:53.050 --> 00:12:56.910
the util, which Ember CL I created for
us, blow up.

170
00:12:58.390 --> 00:13:02.623
So, you can filter so that we don't
have to run all the tests over and

171
00:13:02.623 --> 00:13:07.850
over again and it'll reduce some clutter,
so you can filter by a test module here.

172
00:13:08.850 --> 00:13:11.490
And here we're just
looking at this util test.

173
00:13:12.780 --> 00:13:14.780
Is an array test, fantastic.

