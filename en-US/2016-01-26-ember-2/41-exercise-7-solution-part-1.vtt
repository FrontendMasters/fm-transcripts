WEBVTT

1
00:00:00.000 --> 00:00:03.761
[MUSIC]

2
00:00:03.761 --> 00:00:05.540
&gt;&gt; Mike North: Just to
restate the problem.

3
00:00:05.540 --> 00:00:10.790
So we're trying to add a computed
property to our github-org component so

4
00:00:10.790 --> 00:00:15.740
that we have something to bind to,
a Boolean value to bind to,

5
00:00:15.740 --> 00:00:19.100
that will flip back and
forth between true and

6
00:00:19.100 --> 00:00:24.690
false depending on whether that
github-org is in our list of favorites.

7
00:00:26.190 --> 00:00:30.640
And we wanna do so in a generic way
using a computed property macro,

8
00:00:30.640 --> 00:00:35.100
because this is a generally useful thing,

9
00:00:35.100 --> 00:00:38.166
to know the presence or
absence of something in an array.

10
00:00:38.166 --> 00:00:44.430
It could foreseeably be of importance for
later steps in our app.

11
00:00:45.890 --> 00:00:48.051
And so let's get started.

12
00:00:50.249 --> 00:00:54.686
&gt;&gt; Mike North: So I'm gonna get back
to reasonable screen sizes here.

13
00:00:57.950 --> 00:00:59.273
&gt;&gt; Mike North: Close some stuff out.

14
00:01:04.564 --> 00:01:09.277
&gt;&gt; Mike North: Great, so
we're gonna begin with Ember CLI.

15
00:01:12.862 --> 00:01:15.596
&gt;&gt; Mike North: And
just making sure I'm at, yep,

16
00:01:15.596 --> 00:01:20.071
we're starting from the end
of our components exercise.

17
00:01:20.071 --> 00:01:25.280
So this is push to master, you should be
starting from the exercise six commit.

18
00:01:25.280 --> 00:01:31.844
So we're going to generate a util,
which is just a simple function,

19
00:01:31.844 --> 00:01:38.876
in this case that function will return
a computed property, is in array.

20
00:01:41.329 --> 00:01:44.389
&gt;&gt; Mike North: So it's going to
generate the module itself, the util,

21
00:01:44.389 --> 00:01:47.080
which we're gonna consume in our app.

22
00:01:47.080 --> 00:01:51.770
And it's also gonna generate a unit test
and we're gonna get to testing very soon.

23
00:01:55.260 --> 00:02:01.027
And I just want to show,
&gt;&gt; Mike North: In that test,

24
00:02:01.027 --> 00:02:07.347
especially if you get confused about
importing and where imports are,

25
00:02:07.347 --> 00:02:15.120
it's worth noting that your test needs to
be able to import this in order to use it.

26
00:02:15.120 --> 00:02:18.110
You can see that we can use
a relative path here or

27
00:02:18.110 --> 00:02:22.080
we could just do something like that.

28
00:02:22.080 --> 00:02:25.146
So the pro tip here is,
if you've generated code and

29
00:02:25.146 --> 00:02:27.655
you can't find your module or something,

30
00:02:27.655 --> 00:02:32.750
look at the automatically generated
test and that'll give you a clue.

31
00:02:32.750 --> 00:02:38.238
So we're gonna copy that,
and we're gonna go to our

32
00:02:38.238 --> 00:02:45.530
github-org Ember Component,
and we'll import it there.

33
00:02:45.530 --> 00:02:49.920
And right now, isInArray doesn't
do much but I'm gonna set it up,

34
00:02:50.940 --> 00:02:55.690
get it ready to go,
isFavorited: isInArray.

35
00:02:55.690 --> 00:02:59.035
And I'm gonna make the first
argument we pass in here,

36
00:02:59.035 --> 00:03:04.880
it'll be the property name of
the thing we're favoriting.

37
00:03:04.880 --> 00:03:11.270
And then the second argument is going
to be the property name of the list,

38
00:03:11.270 --> 00:03:13.660
which we don't have right now.

39
00:03:13.660 --> 00:03:17.000
In order to get the list,
we have to get it from our service,

40
00:03:17.000 --> 00:03:21.860
and the way we make our service available
to this component is via inject.

41
00:03:28.140 --> 00:03:29.710
Don't need to specify the name.

42
00:03:30.760 --> 00:03:33.420
It knows favorites

43
00:03:33.420 --> 00:03:37.302
is the name of the service we wish to
have by way of the property key here.

44
00:03:37.302 --> 00:03:41.472
And we're gonna say favorites.items,

45
00:03:41.472 --> 00:03:45.050
I think we called it, add my comma.

46
00:03:48.106 --> 00:03:52.803
And I haven't implemented as an array,
but it's not complaining, and

47
00:03:52.803 --> 00:03:56.582
the reason is computer
properties are evaluated lazily.

48
00:03:56.582 --> 00:04:00.059
Nothing's attempting to call this thing
yet, so it doesn't know that it's broken.

49
00:04:04.838 --> 00:04:13.009
&gt;&gt; Mike North: isInArray, so
we're gonna go to our utils folder here.

50
00:04:13.009 --> 00:04:15.654
And I have to import Ember.

51
00:04:19.537 --> 00:04:22.499
&gt;&gt; Mike North: And
I'm going to destructure so

52
00:04:22.499 --> 00:04:26.235
I can just say computed, keep it clean.

53
00:04:30.694 --> 00:04:33.887
&gt;&gt; Mike North: And
just keep myself organized here,

54
00:04:33.887 --> 00:04:39.930
the first argument again is item and
the second argument is list.

55
00:04:39.930 --> 00:04:44.702
And actually, just to be explicit,
I'm gonna call it list and

56
00:04:44.702 --> 00:04:48.854
itemKey, because remember
they're property keys.

57
00:04:48.854 --> 00:04:50.739
They're not the list and
the items themselves.

58
00:04:52.240 --> 00:04:56.030
So the first thing I'm gonna
do is I'm going to declare

59
00:04:56.030 --> 00:05:01.230
the itemKey as a dependency
of my computed property.

60
00:05:01.230 --> 00:05:04.400
So if the item changes for this component,

61
00:05:04.400 --> 00:05:08.639
we need to reestablish whether
this is favorited or not.

62
00:05:08.639 --> 00:05:12.440
We'll have to clear the cache for
this property and recalculate it.

63
00:05:12.440 --> 00:05:18.410
And then the other thing I'm going to
do is declare a dependency on the list.

64
00:05:18.410 --> 00:05:21.730
In this case I only really care
about the length of the list.

65
00:05:21.730 --> 00:05:24.450
And I suppose we could get
into a situation where we're

66
00:05:24.450 --> 00:05:27.860
changing other things that potentially
could make this computer property untrue,

67
00:05:27.860 --> 00:05:29.600
but I'm not gonna worry about that.

68
00:05:29.600 --> 00:05:33.870
I just care about additions and removals
from this list cuz I'm managing it.

69
00:05:33.870 --> 00:05:34.943
I know what I'm doing.

70
00:05:34.943 --> 00:05:40.818
I know there's limited things I
can expect to happen to this list.

71
00:05:40.818 --> 00:05:45.877
So the way I'm gonna
write this is listKey,

72
00:05:45.877 --> 00:05:50.801
which is gonna be like favorites.items,

73
00:05:50.801 --> 00:05:55.332
and I'm going to add square brackets.

74
00:05:55.332 --> 00:05:57.921
Who remembers what square brackets mean?

75
00:05:57.921 --> 00:06:00.694
&gt;&gt; [INAUDIBLE]
&gt;&gt; Mike North: And

76
00:06:00.694 --> 00:06:03.431
the other way of having a dependency?

77
00:06:03.431 --> 00:06:04.263
&gt;&gt; Speaker 2: At each.

78
00:06:04.263 --> 00:06:06.440
&gt;&gt; Mike North: At each, great.

79
00:06:06.440 --> 00:06:10.670
And then the next thing is function,

80
00:06:10.670 --> 00:06:14.085
which is Do the computation.

81
00:06:18.756 --> 00:06:21.807
&gt;&gt; Mike North: And I'm just gonna,
cuz I know I'll need it.

82
00:06:28.122 --> 00:06:33.308
&gt;&gt; Mike North: I don't know if you guys
discovered this while playing around,

83
00:06:33.308 --> 00:06:36.381
but within the body of this function,

84
00:06:36.381 --> 00:06:41.007
this is the object that your
computed property lives on.

85
00:06:41.007 --> 00:06:44.800
So in this particular case,
it's gonna be the component.

86
00:06:46.640 --> 00:06:50.979
For that reason,
do not make this an arrow function.

87
00:06:52.550 --> 00:06:55.560
Arrow functions are not just shorthand for
the word function.

88
00:06:55.560 --> 00:06:56.750
They also bind.

89
00:06:58.540 --> 00:07:00.010
So be careful.

90
00:07:01.120 --> 00:07:02.690
Be careful about that.

91
00:07:02.690 --> 00:07:05.659
I use arrow functions in a lot of places,
and

92
00:07:05.659 --> 00:07:10.164
this is one place where you have
to still use ES5 function syntax.

93
00:07:13.178 --> 00:07:19.840
&gt;&gt; Mike North: And I've made
a mistake here, itemKey, listKey.

94
00:07:19.840 --> 00:07:23.929
And we're gonna see how things look.

95
00:07:23.929 --> 00:07:27.198
I don't expect we're
gonna trigger that yet

96
00:07:27.198 --> 00:07:32.372
cuz we haven't used it yet, but
I'm gonna go to my github-org.hbs.

97
00:07:32.372 --> 00:07:37.130
And here I'm going to say,

98
00:07:40.031 --> 00:07:45.683
&gt;&gt; Mike North: if isFavorited 'Favorite'

99
00:07:45.683 --> 00:07:51.338
otherwise 'Unfavorite'.

100
00:07:56.543 --> 00:08:03.140
&gt;&gt; Mike North: And now we're actually
triggering the calculation here.

101
00:08:03.140 --> 00:08:08.500
And I'm just going to check out what I've
got here to make sure I'm in a good state.

102
00:08:08.500 --> 00:08:12.460
So I've got two things I'm interested in,
item and list.

103
00:08:12.460 --> 00:08:14.790
Item, looks good.

104
00:08:14.790 --> 00:08:16.760
That looks like our repo.

105
00:08:16.760 --> 00:08:19.660
List, it's an empty array.

106
00:08:21.150 --> 00:08:22.990
Probably also good, right?

107
00:08:24.850 --> 00:08:33.000
So if I recall what we were adding
to our list here was just the IDs.

108
00:08:33.000 --> 00:08:34.230
I'm gonna double check here.

109
00:08:36.280 --> 00:08:39.065
No, it looks like we were
adding the objects themselves,

110
00:08:39.065 --> 00:08:43.380
cuz we had to map to ID when we
were printing out our string.

111
00:08:43.380 --> 00:08:46.170
So I'm gonna add the object itself or
I'm gonna check for

112
00:08:46.170 --> 00:08:49.030
the presence of the object
itself in this array.

113
00:08:51.130 --> 00:08:58.180
So here I'll go return list.indexOf(item).

114
00:08:58.180 --> 00:09:02.496
So if it is in the array,
this will be greater than or equal to 0.

115
00:09:05.227 --> 00:09:07.510
&gt;&gt; Mike North: And refresh.

116
00:09:07.510 --> 00:09:12.523
[NOISE] I'm gonna put a debugger here and
try again.

117
00:09:17.901 --> 00:09:20.608
&gt;&gt; Mike North: I think I
know what my problem is.

118
00:09:20.608 --> 00:09:25.771
isFavorited, so it is in the array.

119
00:09:29.490 --> 00:09:30.208
&gt;&gt; Mike North: Okay.

120
00:09:33.920 --> 00:09:35.800
&gt;&gt; Mike North: Flipped
the inequality here.

121
00:09:35.800 --> 00:09:38.795
So unless it's favorited already,

122
00:09:38.795 --> 00:09:42.954
we're gonna have the word
favorite on the screen.

123
00:09:51.935 --> 00:09:55.199
&gt;&gt; Mike North: Awesome,
let's see if it works.

124
00:09:57.759 --> 00:09:59.465
&gt;&gt; Mike North: Sweet!

125
00:09:59.465 --> 00:10:03.200
So now we're actually displaying
the favoriting and unfavoriting.

