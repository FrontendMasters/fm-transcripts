WEBVTT

1
00:00:00.000 --> 00:00:03.641
[MUSIC]

2
00:00:03.641 --> 00:00:06.590
&gt;&gt; Mike North: We're going to
start with unit integration tests.

3
00:00:08.460 --> 00:00:12.210
I want to, and
I have a mistake here, actually.

4
00:00:12.210 --> 00:00:15.300
So I want us to write the unit test for

5
00:00:15.300 --> 00:00:17.950
this computer property
macro that we built.

6
00:00:19.200 --> 00:00:20.610
Right.

7
00:00:20.610 --> 00:00:22.870
Unit test for the computer property macro.

8
00:00:22.870 --> 00:00:25.870
For the integration test,
I want integration tests for

9
00:00:25.870 --> 00:00:30.920
the github-org component and
make sure that you touch on,

10
00:00:30.920 --> 00:00:35.530
that the data that you are passing through
the contract with the outside world.

11
00:00:35.530 --> 00:00:39.732
You know the org, that it's name
will actually show up in the DOM and

12
00:00:39.732 --> 00:00:44.627
also that the favorite button will fire
the appropriate action when clicked.

13
00:00:46.898 --> 00:00:51.120
&gt;&gt; Mike North: And then I have
instructions for an acceptance test.

14
00:00:51.120 --> 00:00:52.940
It seems like a lot of steps.

15
00:00:54.300 --> 00:00:59.450
But, it's not too bad and
to save you guys some time

16
00:00:59.450 --> 00:01:03.800
I have actually mocked out the pretender,

17
00:01:03.800 --> 00:01:09.640
like I've given you some sample
data to use with pretender so that

18
00:01:09.640 --> 00:01:14.300
you can not have to worry about figuring
out what the valid payload should be.

19
00:01:15.910 --> 00:01:21.480
So, I would just go to the pdf,
copy this, what's that?

20
00:01:22.610 --> 00:01:24.790
&gt;&gt; Speaker 2: You can't
copy text out of the pdf?

21
00:01:24.790 --> 00:01:27.470
&gt;&gt; Mike North: So
I will make this available as a gist and

22
00:01:27.470 --> 00:01:29.290
post the link in chat right away.

23
00:01:30.510 --> 00:01:36.480
The way you add pretender to your app
is ember install ember-cli-pretender.

24
00:01:36.480 --> 00:01:37.290
That's it.

25
00:01:37.290 --> 00:01:41.130
And the way you get access to
the pretender object itself.

26
00:01:41.130 --> 00:01:45.180
Is just by importing it from Pretender
just like you import Ember from Ember.

27
00:01:46.910 --> 00:01:50.190
So, hopefully, this will let you guys
focus on the particulars of the test and

28
00:01:50.190 --> 00:01:51.740
not on the mocking of the data here.

29
00:01:54.670 --> 00:01:56.630
All right.
Do we have any questions before we

30
00:01:56.630 --> 00:01:57.609
dive in and get started?

31
00:01:58.890 --> 00:02:03.130
And I think we should allow
maybe 30 minutes for this,

32
00:02:03.130 --> 00:02:06.820
because there are three types
of tests I'm asking for, and

33
00:02:06.820 --> 00:02:09.940
I want to make sure you guys have
a good understanding of this.

34
00:02:09.940 --> 00:02:13.540
&gt;&gt; Speaker 3: Is the unit
tester even lane module?

35
00:02:13.540 --> 00:02:15.720
&gt;&gt; Mike North: I want,
yeah, I need to fix that.

36
00:02:15.720 --> 00:02:19.070
What I want the unit test on is
the computer property macro,

37
00:02:19.070 --> 00:02:20.810
that we just built in the last exercise.

38
00:02:23.070 --> 00:02:27.980
Is an array or
whatever that is, yes question.

39
00:02:27.980 --> 00:02:31.610
&gt;&gt; Speaker 4: This is back on the computed
properties but he was just asking if

40
00:02:31.610 --> 00:02:36.470
could we avoid using computed properties
with data down actions up pattern?

41
00:02:36.470 --> 00:02:42.054
&gt;&gt; Mike North: Computed properties
play very nicely with actions up,

42
00:02:42.054 --> 00:02:43.785
bindings down.

43
00:02:43.785 --> 00:02:48.270
So, that's all advisable to work together,
what you don't want are observers.

