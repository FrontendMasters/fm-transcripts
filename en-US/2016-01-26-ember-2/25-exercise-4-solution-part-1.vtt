WEBVTT

1
00:00:00.000 --> 00:00:04.072
[MUSIC]

2
00:00:04.072 --> 00:00:08.375
&gt;&gt; Michael: We're gonna go through
my solution to this challenge,

3
00:00:08.375 --> 00:00:14.230
at a high level what we're trying to
do is get away from hard coded data.

4
00:00:14.230 --> 00:00:16.490
Let's do some real stuff.

5
00:00:16.490 --> 00:00:19.162
And I'm actually gonna
go to my slide deck.

6
00:00:19.162 --> 00:00:21.982
And you can do this if you're
doing it at home as well.

7
00:00:21.982 --> 00:00:26.917
And I'm just gonna copy some
useful end points here just so

8
00:00:26.917 --> 00:00:32.000
I have them available to me
as I'm building this app.

9
00:00:32.000 --> 00:00:34.680
So this top one is how
to get an organization,

10
00:00:34.680 --> 00:00:39.170
the list of repos, get information
about a repo, get issues on a repo and

11
00:00:39.170 --> 00:00:41.470
get the list of contributors on a repo.

12
00:00:41.470 --> 00:00:44.920
So this is the form of what
I want to ask GitHub for and

13
00:00:44.920 --> 00:00:50.505
it all starts with api.github.com.

14
00:00:50.505 --> 00:00:54.135
All right, so let's jump in.

15
00:00:54.135 --> 00:00:58.491
The first thing I want
to do is get into the,

16
00:00:58.491 --> 00:01:02.374
I want to start with the org actually.

17
00:01:02.374 --> 00:01:08.570
So I'm going to go to the org route,
org.js.

18
00:01:08.570 --> 00:01:13.425
And here I am going to, in the model

19
00:01:13.425 --> 00:01:17.940
hook, I am going to put
a debugger in here just so

20
00:01:17.940 --> 00:01:22.020
we can see what params look like and
the reason it didn't stop is cuz I am

21
00:01:22.020 --> 00:01:26.570
not in this route yet, but
I am gonna drill in and it will freeze.

22
00:01:26.570 --> 00:01:34.330
And what I'm aiming to see here is that
I've got this ID ember.js in here.

23
00:01:34.330 --> 00:01:38.818
And what I want to do is ask GitHub for
that.

24
00:01:47.100 --> 00:01:51.893
&gt;&gt; Michael: And
I'm actually gonna use a ES6

25
00:01:51.893 --> 00:01:56.180
string here and params.id.

26
00:01:56.180 --> 00:01:57.440
Fantastic.

27
00:02:07.421 --> 00:02:10.919
&gt;&gt; Michael: So the whole class
is trying to do that so we got,

28
00:02:10.919 --> 00:02:13.260
are greatly limited on our ip.

29
00:02:13.260 --> 00:02:17.120
I'm just going to add
this private access token

30
00:02:17.120 --> 00:02:19.820
which is a way to
authenticate me to GitHub.

31
00:02:19.820 --> 00:02:25.980
And you can make one of these on your
own in your settings if you wanted to.

32
00:02:25.980 --> 00:02:29.760
But the idea here is I can make
an authenticated request and

33
00:02:29.760 --> 00:02:33.321
we can see we got a content
security policy error here.

34
00:02:33.321 --> 00:02:38.721
But if we look at the network tab,
come on.

35
00:02:42.241 --> 00:02:44.079
&gt;&gt; Michael: If we look at network and
XHR, and

36
00:02:44.079 --> 00:02:46.321
give ourselves a little more room here.

37
00:02:49.401 --> 00:02:50.581
&gt;&gt; Michael: Come on.

38
00:02:50.581 --> 00:02:58.440
An API request was sent out to get
information about the ember-cli org.

39
00:02:58.440 --> 00:03:00.220
And here is all of this information.

40
00:03:00.220 --> 00:03:04.370
Now I mentioned that we wanna
kind of be consistent even,

41
00:03:04.370 --> 00:03:07.580
we're using an opinionated
framework with conventions,

42
00:03:07.580 --> 00:03:11.490
we want to have sort of conventions of
our own and keep things in alignment.

43
00:03:11.490 --> 00:03:17.520
And in this case, I wanna treat
this as the ID of this repo and

44
00:03:17.520 --> 00:03:19.070
not use this numeric id.

45
00:03:19.070 --> 00:03:21.790
And the reason is,
I want my URLs to look nice and

46
00:03:21.790 --> 00:03:26.370
I wanna just be able to pass this object
directly into the link to helper and

47
00:03:26.370 --> 00:03:29.250
have it extract out what
I'm looking to extract.

48
00:03:29.250 --> 00:03:35.450
So, I'm going to use the nice
chaining aspect of promises and

49
00:03:35.450 --> 00:03:40.910
to the end of my get method,
I'm gonna add a then callback.

50
00:03:40.910 --> 00:03:46.390
And I'm gonna just call this rawRepo,
no sorry, rawOrg.

51
00:03:47.600 --> 00:03:48.430
An arrow function.

52
00:03:49.470 --> 00:03:52.141
And I'm going to alter this object.

53
00:03:56.421 --> 00:03:59.994
&gt;&gt; Michael: So I'm backing up
the id in case I need it later.

54
00:04:09.818 --> 00:04:14.550
&gt;&gt; Michael: And
I just need to return rawOrg.

55
00:04:14.550 --> 00:04:17.680
And, effectively,
I've made the API request and

56
00:04:17.680 --> 00:04:20.740
then before the model hook is done,
I massage it.

57
00:04:20.740 --> 00:04:23.530
I make this change and then,
ultimately, return that.

58
00:04:23.530 --> 00:04:28.327
And so this modified object is
what we're gonna end up with in

59
00:04:28.327 --> 00:04:32.382
the org template, and
we can start to put it to use.

60
00:04:32.382 --> 00:04:39.742
So instead of Facebook here, I'm gonna
use that log helper and handle bars.

61
00:04:44.562 --> 00:04:47.982
&gt;&gt; Michael: And we'll look at our console.

62
00:04:54.782 --> 00:04:57.750
&gt;&gt; Michael: All right,
we're logging null here.

63
00:04:57.750 --> 00:04:59.536
We look at why?

64
00:04:59.536 --> 00:05:06.323
[CROSSTALK]
Good catch!

65
00:05:06.323 --> 00:05:09.463
I have to return,
return the promise itself.

66
00:05:09.463 --> 00:05:16.103
&gt;&gt; Speaker 2: Should that [CROSSTALK]
Should that be a .name instead of .login?

67
00:05:16.103 --> 00:05:19.280
&gt;&gt; Michael: I'm using this login here.

68
00:05:19.280 --> 00:05:20.920
I wonder if it has a name.

69
00:05:20.920 --> 00:05:22.430
Let's see.
&gt;&gt; Speaker 2: I thought.

70
00:05:23.660 --> 00:05:25.150
&gt;&gt; Michael: Events, Members, Name.

71
00:05:25.150 --> 00:05:26.050
Let's use name.

72
00:05:26.050 --> 00:05:28.030
There it is,
it looks like it's identical in this case.

73
00:05:29.180 --> 00:05:29.700
Fine with me.

74
00:05:31.130 --> 00:05:32.984
And then in our template we can do.

75
00:05:38.544 --> 00:05:43.240
&gt;&gt; Michael: And voila, we don't
have a hard coded Org name anymore.

76
00:05:43.240 --> 00:05:47.744
And we could even do something like this.

77
00:05:58.144 --> 00:05:59.744
&gt;&gt; Michael: That's an interesting URL.

78
00:06:15.546 --> 00:06:18.994
&gt;&gt; Michael: So
created a link GitHub that's also,

79
00:06:18.994 --> 00:06:22.446
I guess that's taking me to the API here.

80
00:06:22.446 --> 00:06:24.446
There must be a more interesting URL.

81
00:06:30.822 --> 00:06:32.866
&gt;&gt; Michael: That might
also be an API end point.

82
00:06:32.866 --> 00:06:38.106
Well the point here is that
we can start to consume more

83
00:06:38.106 --> 00:06:43.338
on this object than we
initially set out to look at.

84
00:06:43.338 --> 00:06:47.504
Avatar, that's more interesting here,
sweet.

85
00:06:47.504 --> 00:06:48.244
This'll be fun.

86
00:06:51.144 --> 00:06:58.964
&gt;&gt; Michael: So, image, source is,
&gt;&gt; Michael: And.

87
00:07:05.744 --> 00:07:06.984
&gt;&gt; Michael: There we go, we've got.

88
00:07:11.184 --> 00:07:15.000
&gt;&gt; Michael: We've got little icons and
we go back we can look at Microsoft,

89
00:07:15.000 --> 00:07:18.320
we can go back,
this is starting to look interesting.

90
00:07:19.940 --> 00:07:23.420
So we've just bound some data that
came back in our model to this

91
00:07:23.420 --> 00:07:25.090
attribute of source.

92
00:07:25.090 --> 00:07:27.014
And everything kinda works nicely,
all right.

93
00:07:27.014 --> 00:07:30.703
&gt;&gt; Speaker 2: Can you go back
to the org.js file, just for?

94
00:07:30.703 --> 00:07:37.038
&gt;&gt; Michael: Sure, so, here I'm.

95
00:07:42.403 --> 00:07:45.923
&gt;&gt; Michael: Numeric ID and.

96
00:07:57.723 --> 00:08:00.003
&gt;&gt; Michael: Make sense?

97
00:08:00.003 --> 00:08:02.443
&gt;&gt; Speaker 2: I need some
more on that perspective.

98
00:08:02.443 --> 00:08:08.745
Just API slab dot com slash orgs, and
then params, okay I missed that part.

99
00:08:08.745 --> 00:08:14.415
&gt;&gt; Michael: And I'm able to use this
in here because this is the new

100
00:08:14.415 --> 00:08:19.440
ES6 string language
feature that we can use.

101
00:08:19.440 --> 00:08:21.810
All right, so, I'm gonna keep moving here.

102
00:08:21.810 --> 00:08:24.470
Now, we're gonna move to
the list of repos within the org.

103
00:08:25.480 --> 00:08:28.200
And that is here.

104
00:08:28.200 --> 00:08:34.563
So we're in this repos.js
file in routes/org.

105
00:08:37.903 --> 00:08:38.763
&gt;&gt; Michael: Same thing.

106
00:08:41.243 --> 00:08:44.137
&gt;&gt; Michael: Drill in, and
let's look at what prams are.

107
00:08:45.160 --> 00:08:50.660
Nothing, and the reason is that this
particular route does not have a dynamic

108
00:08:54.410 --> 00:08:56.760
segment in its path.

109
00:08:56.760 --> 00:08:58.318
Additionally, we have to go and

110
00:08:58.318 --> 00:09:01.100
get, we need this in order
to build the correct url.

111
00:09:01.100 --> 00:09:03.199
Right, we need the org id.

112
00:09:03.199 --> 00:09:06.419
And I'm just gonna copy this
cuz it will be similar.

113
00:09:11.539 --> 00:09:16.999
&gt;&gt; Michael: So
org ID which I'll fill in later and

114
00:09:16.999 --> 00:09:21.059
close the arrow function.

115
00:09:25.399 --> 00:09:30.815
&gt;&gt; Michael: I'm going to put a debugger
inside of the dot then callback and

116
00:09:30.815 --> 00:09:33.219
then we need an org id, so.

117
00:09:37.839 --> 00:09:40.859
&gt;&gt; Michael: We are going
to use model four org.

118
00:09:40.859 --> 00:09:45.080
And then I'm gonna actually use ember get.

119
00:09:47.400 --> 00:09:51.700
It is similar to this .get which you
can use on an Ember object except

120
00:09:51.700 --> 00:09:56.710
this will also do what you expect
on a plain JavaScript object.

121
00:09:56.710 --> 00:10:00.740
So what we have now,
it doesn't matter if we have,

122
00:10:03.130 --> 00:10:06.350
this will handle both dot id or
dot get id.

123
00:10:07.460 --> 00:10:10.300
It insulates us from which
flavor of object this could be.

124
00:10:12.270 --> 00:10:13.901
So, now if we look at raw.

125
00:10:17.463 --> 00:10:20.321
&gt;&gt; Michael: I don't know what the name
of this function is with the property.

126
00:10:20.321 --> 00:10:23.921
Params, I think we're still stuck.

127
00:10:28.541 --> 00:10:34.520
&gt;&gt; Michael: Okay we got not found and
I probably have the wrong form of URL.

128
00:10:36.660 --> 00:10:39.689
Okay so here's where we're
running into a little trouble.

129
00:10:40.820 --> 00:10:46.052
You can see that in the URL here I'm
using the human-readable name, right?

130
00:10:46.052 --> 00:10:48.743
I don't want capital Ember.js,

131
00:10:48.743 --> 00:10:54.081
I want to use,
&gt;&gt; Michael: login.

132
00:10:59.501 --> 00:11:02.161
&gt;&gt; Michael: And
now we're at our little break point.

133
00:11:02.161 --> 00:11:03.341
Let me try to stretch this out.

134
00:11:08.041 --> 00:11:10.161
&gt;&gt; Michael: Come on.

135
00:11:10.161 --> 00:11:14.803
And so we've got raw org,
this is really not raw org anymore,

136
00:11:14.803 --> 00:11:20.162
it's the list of repos, but you can
see we've got the ember resolver so

137
00:11:20.162 --> 00:11:22.680
we're in the ember CLI org here.

138
00:11:23.680 --> 00:11:26.260
So I wanna change this to raw repos and

139
00:11:26.260 --> 00:11:30.931
then we're gonna have to transform
this array cuz each item in it.

140
00:11:43.572 --> 00:11:46.493
&gt;&gt; Michael: So this is the first one here,
you see we've got the numeric ID again and

141
00:11:46.493 --> 00:11:49.470
we're gonna basically have to
do the same transformation.

142
00:11:49.470 --> 00:11:54.261
So I'm gonna just return the array,
&gt;&gt; Michael: Map.

143
00:12:09.741 --> 00:12:12.121
&gt;&gt; Michael: Sorry,
name should work in this case.

144
00:12:15.001 --> 00:12:16.621
&gt;&gt; Michael: Make doubly sure.

145
00:12:19.121 --> 00:12:23.640
&gt;&gt; Michael: Yep that should be fine,
and then return raw repo.

146
00:12:23.640 --> 00:12:28.954
So this is very similar to what we had
before except in this case we're mapping

147
00:12:28.954 --> 00:12:34.214
over the array to transform each item
instead of just transforming the one.

148
00:12:34.214 --> 00:12:40.422
All right, so now I just have
to actually iterate over it.

149
00:12:45.402 --> 00:12:47.202
&gt;&gt; Michael: Because we're
still hard coded here.

150
00:12:54.462 --> 00:12:55.382
&gt;&gt; Michael: Close the each.

151
00:13:00.182 --> 00:13:03.162
&gt;&gt; Michael: And we'll do repo name.

152
00:13:07.222 --> 00:13:09.282
&gt;&gt; Michael: Repo name.

153
00:13:11.702 --> 00:13:15.540
&gt;&gt; Michael: And these are all of the
repositories in the Ember CLI GitHub org.

