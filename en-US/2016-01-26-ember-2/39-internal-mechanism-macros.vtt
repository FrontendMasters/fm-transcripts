WEBVTT

1
00:00:00.000 --> 00:00:03.896
[MUSIC]

2
00:00:03.896 --> 00:00:07.920
&gt;&gt; Mike: Here's the TLDR of
how computer properties work.

3
00:00:10.810 --> 00:00:12.113
So when you get,

4
00:00:12.113 --> 00:00:17.804
if you have a cashed value you proceed
directly to the cash and return it.

5
00:00:17.804 --> 00:00:20.001
Fantastic.

6
00:00:20.001 --> 00:00:24.511
If you don't have a cached value,
you rerun your calculation,

7
00:00:24.511 --> 00:00:25.940
you get your value.

8
00:00:27.410 --> 00:00:32.020
If you allow caching, right, and
that is almost always, right,

9
00:00:32.020 --> 00:00:36.160
unless you say I'm a volatile
computer property, you allow caching.

10
00:00:36.160 --> 00:00:40.330
That will be spit up into the cache and
then you will return the value.

11
00:00:40.330 --> 00:00:42.059
So there are just these two paths,

12
00:00:42.059 --> 00:00:44.632
you have the fast path if
the cached value is there.

13
00:00:44.632 --> 00:00:50.998
You have the slow path if
the cache value is not there.

14
00:00:50.998 --> 00:00:53.540
And, sorry let me go back here for
a moment.

15
00:00:53.540 --> 00:00:55.300
So when a dependency changes

16
00:00:56.730 --> 00:01:01.610
all that happens is we just
wipe out the cache, that's it.

17
00:01:02.740 --> 00:01:04.720
So that is how this laziness works.

18
00:01:06.060 --> 00:01:08.480
It's very cheap to invalidate
a computer property.

19
00:01:08.480 --> 00:01:11.514
You're just clearing out
the cached value and

20
00:01:11.514 --> 00:01:16.610
then the next time you ask for it,
you will do the recalculation.

21
00:01:16.610 --> 00:01:20.760
This is very efficient,
because you can wipe it out 30 times

22
00:01:20.760 --> 00:01:26.130
throughout a process by changing
a whole bunch of different properties.

23
00:01:26.130 --> 00:01:30.880
And then only recalculate it once
compared to something like an observer

24
00:01:30.880 --> 00:01:32.740
which would potentially
be firing 30 times.

25
00:01:33.780 --> 00:01:40.690
And that is why we discourage observer use
except when binding to something foreign

26
00:01:40.690 --> 00:01:45.765
to Ember like D3 or something like that.
&gt;&gt; Speaker 2: If the computer property

27
00:01:45.765 --> 00:01:50.745
returns an array and a value in the array
changes, an entire new property is,

28
00:01:50.745 --> 00:01:54.490
cache is invalid in the entire thing?
&gt;&gt; Mike: Sorry, can you ask that again?

29
00:01:54.490 --> 00:01:55.822
&gt;&gt; Speaker 2: If a computed property

30
00:01:55.822 --> 00:01:59.328
returns an array, and
a value inside of the array changes,

31
00:01:59.328 --> 00:02:01.304
only part of that array changes.

32
00:02:01.304 --> 00:02:06.580
The entire computed property is.
&gt;&gt; Mike: Good question.

33
00:02:06.580 --> 00:02:09.810
And thank you for teeing me up for
something interesting here.

34
00:02:10.960 --> 00:02:12.900
In older versions of Ember,

35
00:02:12.900 --> 00:02:16.942
we were actually very careful
to return the exact same array.

36
00:02:16.942 --> 00:02:22.280
So that we could be very efficient of,

37
00:02:22.280 --> 00:02:25.796
in each for example,
only updating the fifth item.

38
00:02:25.796 --> 00:02:30.790
And that's cuz it was very
expensive to update the DOM,

39
00:02:30.790 --> 00:02:33.280
still is, but much less so.

40
00:02:33.280 --> 00:02:38.530
Now with Glimmer because we have
this item potent rendering engine.

41
00:02:38.530 --> 00:02:43.520
And item potent simply means that multiple
passes over the data will just it

42
00:02:43.520 --> 00:02:45.120
will be the exact same results.

43
00:02:47.980 --> 00:02:50.990
The same operation performed
multiple times will

44
00:02:50.990 --> 00:02:52.860
not change things multiple times.

45
00:02:52.860 --> 00:02:56.240
It will just ensure it's
in the same exact state.

46
00:02:56.240 --> 00:02:59.740
So now its totally fine
to return a new array.

47
00:03:00.760 --> 00:03:05.510
And this is why if you look at some of
the stuff that's been de-emphasized and

48
00:03:05.510 --> 00:03:10.950
in many cases gutted from the framework
itself, all of these reduce

49
00:03:10.950 --> 00:03:16.930
computer properties,
like the sum of the items in an array.

50
00:03:16.930 --> 00:03:22.650
That's no longer special in a whole bunch
of code to try to be careful that we

51
00:03:22.650 --> 00:03:27.340
hold this thing internally and only
return this same thing and manipulate it.

52
00:03:27.340 --> 00:03:32.198
And now dealing with array values
returned from computer properties

53
00:03:32.198 --> 00:03:36.394
falls down exactly the same
code paths as everything else.

54
00:03:36.394 --> 00:03:39.965
Make sense?
&gt;&gt; [INAUDIBLE]

55
00:03:39.965 --> 00:03:40.690
&gt;&gt; Speaker 2: Awesome.

56
00:03:40.690 --> 00:03:41.670
&gt;&gt; Mike: I am very happy to hear that.

57
00:03:44.340 --> 00:03:47.800
So, I talked about abstracting
computer properties a little bit.

58
00:03:49.550 --> 00:03:52.650
There is a concept of
computed property macros.

59
00:03:52.650 --> 00:03:58.030
This is a fancy name for a function
that returns a computed property.

60
00:03:58.030 --> 00:04:02.750
And so, here, we're finding,
in our app, that often,

61
00:04:02.750 --> 00:04:06.130
we need to calculate
the sum of two values.

62
00:04:06.130 --> 00:04:10.201
We can wrap that all in
a function make it generic and

63
00:04:10.201 --> 00:04:15.226
then just sort of use it throughout
our app wherever we need it.

64
00:04:15.226 --> 00:04:20.054
I very strongly encourage
this pattern because this

65
00:04:20.054 --> 00:04:25.552
function sum lends itself
extremely well to unit testing.

66
00:04:25.552 --> 00:04:31.199
So you've taken a lot of the logic that's
necessary to perform some calculation,

67
00:04:31.199 --> 00:04:33.942
isolated it into a single function and so

68
00:04:33.942 --> 00:04:39.205
you can sort of do a lot of value in value
out analysis of different scenarios.

69
00:04:39.205 --> 00:04:43.195
And that's very cheap to test,
even extremely deeply.

70
00:04:43.195 --> 00:04:48.583
So if you're building a large Ember app
and you're seeing the same patterns

71
00:04:48.583 --> 00:04:53.636
over and over in your computer properties,
consider breaking them out

72
00:04:53.636 --> 00:04:59.490
into their own JavaScript modules,
writing their own tests around them.

73
00:04:59.490 --> 00:05:03.692
And then you don't have to worry about
your components and your routes and

74
00:05:03.692 --> 00:05:04.520
everything.

75
00:05:04.520 --> 00:05:07.850
You should not have computer
properties in your routes usually but

76
00:05:07.850 --> 00:05:11.640
your code ends up being much cleaner and
much more expressive.

77
00:05:11.640 --> 00:05:16.810
Now we don't have a function in our
component so much as we have the word sum

78
00:05:16.810 --> 00:05:20.680
which is very easy to read,
it's very easy to understand what is c.

79
00:05:20.680 --> 00:05:22.390
Well, it's the sum of properties a and b.

80
00:05:25.250 --> 00:05:28.371
Does that make sense?
&gt;&gt; Speaker 2: I notice you're leaving off

81
00:05:28.371 --> 00:05:32.170
the namespace for Ember.computed and
here Ember.computed sum.

82
00:05:32.170 --> 00:05:35.101
Ending up Ember in some cases and
Ember computed.

83
00:05:35.101 --> 00:05:38.960
And that ES6 was always there for you?
&gt;&gt; Mike: So, you're saying that here?

84
00:05:38.960 --> 00:05:39.518
&gt;&gt; Speaker 2: I would write

85
00:05:39.518 --> 00:05:43.376
Ember.computed.sum.
&gt;&gt; Mike: I'm defining a function called

86
00:05:43.376 --> 00:05:47.409
sum, I'm not using Ember computed sum.
&gt;&gt; Speaker 2: Okay.

87
00:05:47.409 --> 00:05:50.163
&gt;&gt; Mike: And the value of that function,

88
00:05:50.163 --> 00:05:54.250
up there,
down in the bottom half of the slide.

89
00:05:54.250 --> 00:05:56.070
I can go back here.

90
00:05:57.160 --> 00:06:01.540
So, you may see me use destructuring
assignment on the first line, here.

91
00:06:01.540 --> 00:06:02.280
&gt;&gt; Speaker 2: I missed the first line.

92
00:06:02.280 --> 00:06:03.260
&gt;&gt; Mike: I'm terribly sorry.

93
00:06:03.260 --> 00:06:06.050
And that's a way of just
grabbing computed off Ember.

94
00:06:09.840 --> 00:06:13.170
That is more personal style, you know.

95
00:06:13.170 --> 00:06:14.695
I just you put the first line of code.

96
00:06:14.695 --> 00:06:15.770
&gt;&gt; [LAUGH]
&gt;&gt; Mike: All right.

97
00:06:15.770 --> 00:06:17.380
So.
&gt;&gt; Speaker 2: That's explains what.

98
00:06:17.380 --> 00:06:18.820
Little cushion on that.
&gt;&gt; Mike: Yeah, they're

99
00:06:18.820 --> 00:06:20.690
just asking where would you define this?
&gt;&gt; Speaker 3: Would you

100
00:06:20.690 --> 00:06:24.470
put it on a component or a service?
&gt;&gt; Mike: Where would I define the computed

101
00:06:24.470 --> 00:06:25.720
property?
&gt;&gt; Speaker 3: Yeah.

102
00:06:25.720 --> 00:06:27.208
&gt;&gt; Mike: I would define it in

103
00:06:27.208 --> 00:06:29.270
the Utils folder.

104
00:06:29.270 --> 00:06:32.377
We haven't gone over this but the Utils,

105
00:06:32.377 --> 00:06:38.120
app/utils is a place where
you'll typically put simple

106
00:06:38.120 --> 00:06:42.250
functions that are usually,
highly unit-testable, it's sort of,

107
00:06:42.250 --> 00:06:48.300
I wanna say dumping ground, but
I don't mean that in a bad sense.

108
00:06:48.300 --> 00:06:53.159
It's where you put your generally useful,
simple utility functions and

109
00:06:53.159 --> 00:06:57.716
then these case computer properties
are perfect thing to put there.

110
00:06:57.716 --> 00:07:04.362
So you can generate a util with ember-cli
which would just give you a function

111
00:07:04.362 --> 00:07:09.898
to fill in the blank and
then write a unit test for that function.

112
00:07:09.898 --> 00:07:12.031
But that is the perfect place for
this kinda thing.

