WEBVTT

1
00:00:00.159 --> 00:00:03.978
[MUSIC]

2
00:00:03.978 --> 00:00:05.690
&gt;&gt; Mike: So we have a component here.

3
00:00:05.690 --> 00:00:10.850
I'm actually going to publish
it to npm just for kicks.

4
00:00:10.850 --> 00:00:14.568
Cuz this is awesome,
we have to share this with the world.

5
00:00:14.568 --> 00:00:20.180
[LAUGH] And
I'm gonna rename it so that joke.

6
00:00:20.180 --> 00:00:24.300
[LAUGH]
So that I don't

7
00:00:24.300 --> 00:00:28.090
step on someone's useful namespace that-
&gt;&gt; Speaker 2: Couldn't you just do like

8
00:00:28.090 --> 00:00:29.520
a symlink to do that?

9
00:00:29.520 --> 00:00:32.050
To share in class,
maybe just like a symlink?

10
00:00:32.050 --> 00:00:33.608
&gt;&gt; Mike: So I could do that, but

11
00:00:33.608 --> 00:00:38.119
that's not the way you guys
are typically gonna consume addons.

12
00:00:38.119 --> 00:00:42.910
I can do an npm link and explicitly run
an installation blueprint or whatever.

13
00:00:43.950 --> 00:00:46.140
But that's not really what's gonna happen.

14
00:00:46.140 --> 00:00:51.020
So I'm gonna take advantage of this
because I'm actually gonna publish it,

15
00:00:51.020 --> 00:00:54.200
and we're gonna do
an installation blueprint here.

16
00:00:54.200 --> 00:00:58.937
So the concept of
an installation blueprint is

17
00:00:58.937 --> 00:01:03.300
post-install setup functionality.

18
00:01:03.300 --> 00:01:09.340
So when you run Ember install, npm install
is basically the first thing that happens.

19
00:01:09.340 --> 00:01:16.130
And then the consuming app looks into
the addon and runs a particular blueprint.

20
00:01:16.130 --> 00:01:20.060
And the blueprint it will run
is a blueprint whose name

21
00:01:20.060 --> 00:01:20.980
matches the addon's name.

22
00:01:22.010 --> 00:01:24.046
So we can generate
a blueprint that does this.

23
00:01:31.876 --> 00:01:34.436
&gt;&gt; Mike: So we have a blueprint now.

24
00:01:34.436 --> 00:01:39.684
We can go and see it right here.

25
00:01:39.684 --> 00:01:40.966
&gt;&gt; Speaker 2: Now you made that up,

26
00:01:40.966 --> 00:01:43.972
does it need to match
the name in the package JSON?

27
00:01:43.972 --> 00:01:47.359
&gt;&gt; Mike: It needs to match the name,
good question,

28
00:01:47.359 --> 00:01:51.220
it needs to match the name
in this index.js file.

29
00:01:51.220 --> 00:01:57.883
So and this is, if you are really
interested in developing addons, there is

30
00:01:57.883 --> 00:02:04.770
nothing I can cram into an hour that would
get you to the point you need to get to.

31
00:02:04.770 --> 00:02:07.698
But here's the short answer,

32
00:02:07.698 --> 00:02:13.223
this is Ember's understanding
of the name of this thing.

33
00:02:13.223 --> 00:02:19.345
Package.json, this is the the npm package,
where this can be found.

34
00:02:25.532 --> 00:02:32.096
&gt;&gt; Mike: So in this blueprint,
I'm gonna fill in this after install hook,

35
00:02:32.096 --> 00:02:41.511
and I'm going to do,
&gt;&gt; Mike: We'll add underscore,

36
00:02:44.263 --> 00:02:45.735
&gt;&gt; Mike: And,

37
00:02:55.782 --> 00:02:57.852
&gt;&gt; Mike: So that's not gonna help us here.

38
00:03:03.249 --> 00:03:07.004
&gt;&gt; Mike: All right, so we'll pick
a random version here, 1.7, perfect.

39
00:03:14.045 --> 00:03:18.500
&gt;&gt; Mike: And we can actually run this,
so I'm gonna make a commit just so

40
00:03:18.500 --> 00:03:20.445
we have a clean situation.

41
00:03:25.223 --> 00:03:29.980
&gt;&gt; Mike: We can run the blueprint
itself within this addon

42
00:03:29.980 --> 00:03:34.400
just to see kind of what it does,
ember g fem.

43
00:03:34.400 --> 00:03:40.800
And then we have to sort of pass
a name in just because by default,

44
00:03:40.800 --> 00:03:45.240
blueprints need a name, because usually,
you're generating an object, right?

45
00:03:46.410 --> 00:03:47.770
In this case, it's sort of ignored.

46
00:03:49.290 --> 00:03:51.390
Looks like I forgot a comma or something.

47
00:03:53.260 --> 00:03:57.305
I'm getting overzealous with ES6 and
Node.js code.

48
00:04:00.675 --> 00:04:02.531
&gt;&gt; Mike: Undefined is not a function.

49
00:04:04.889 --> 00:04:05.731
&gt;&gt; Mike: Sorry.

50
00:04:11.598 --> 00:04:15.676
&gt;&gt; Mike: All right, so
what just happened was,

51
00:04:15.676 --> 00:04:19.513
here's my stupid little build fix.

52
00:04:23.844 --> 00:04:26.958
&gt;&gt; Mike: Underscore should have been
added to package.json, let's see.

53
00:04:42.788 --> 00:04:45.006
&gt;&gt; Mike: All right, well, let's push
it anyway and see if this works.

54
00:04:56.462 --> 00:04:57.585
&gt;&gt; Mike: Perfect.

55
00:04:57.585 --> 00:04:59.279
[LAUGH] Awesome.

56
00:04:59.279 --> 00:05:01.113
This is gonna be a really popular addon.

57
00:05:03.801 --> 00:05:05.422
&gt;&gt; Mike: All right, so
this is our GitHub app.

58
00:05:10.044 --> 00:05:16.110
&gt;&gt; [INAUDIBLE]
[LAUGH]

59
00:05:16.110 --> 00:05:18.452
&gt;&gt; Mike: All right, so, hm,

60
00:05:18.452 --> 00:05:23.280
our post in cell didn't
seem to work there.

61
00:05:23.280 --> 00:05:26.686
addBower, I know what the problem is.

62
00:05:29.715 --> 00:05:31.464
&gt;&gt; Mike: Shoot.

63
00:05:35.774 --> 00:05:38.930
&gt;&gt; Mike: All right, my mistake here.

64
00:05:38.930 --> 00:05:45.428
So addBower to packaged project returns
a promise, after install is promise-aware,

65
00:05:45.428 --> 00:05:50.805
and so effectively what happens now
when we run this, if I republish it.

66
00:06:09.322 --> 00:06:14.895
&gt;&gt; Mike: When we install this addon,
it will then, as a post install step,

67
00:06:14.895 --> 00:06:19.285
install this bower package
into the consuming app.

68
00:06:32.277 --> 00:06:35.135
&gt;&gt; Mike: It's possible that it's cuz
it's already installed, let's see.

69
00:06:45.034 --> 00:06:48.597
&gt;&gt; Mike: Hm, one more thing to check here.

70
00:07:03.168 --> 00:07:07.114
&gt;&gt; Mike: So that's in my package JSON,
except it's not.

71
00:07:26.741 --> 00:07:29.066
&gt;&gt; Mike: I'm making this seem
way more difficult than it is.

72
00:07:31.413 --> 00:07:32.650
&gt;&gt; Mike: We'll do this.

73
00:07:40.458 --> 00:07:41.930
&gt;&gt; Mike: All right.

74
00:07:41.930 --> 00:07:46.389
&gt;&gt; Speaker 2: You've got
your first consumer.

75
00:07:46.389 --> 00:07:51.370
&gt;&gt; Mike: Finally, okay, so there it is.

76
00:07:51.370 --> 00:07:56.580
Underscore was added and the best thing
to do to learn what these blueprints

77
00:07:56.580 --> 00:08:01.030
are capable of is to go and look at
some of the more popular Ember addons.

78
00:08:01.030 --> 00:08:02.640
Look in the blueprints folder.

79
00:08:02.640 --> 00:08:07.250
Remember that the name of the blueprint
that matches the name of the addon,

80
00:08:07.250 --> 00:08:10.910
that is what will be run
automatically on Ember install.

81
00:08:12.970 --> 00:08:16.500
You can install other addons,
and their blueprints will be run.

82
00:08:16.500 --> 00:08:22.809
You can add npm packages,
add bower packages, and additionally,

83
00:08:22.809 --> 00:08:30.125
you can have in your blueprint if you
have a folder called, I believe, files.

84
00:08:33.281 --> 00:08:38.707
&gt;&gt; Mike: Anything inside this,
&gt;&gt; Mike: Will

85
00:08:38.707 --> 00:08:41.845
be added to the structure of your,

86
00:08:41.845 --> 00:08:48.010
it'll be a file that's added
to the consuming project.

87
00:08:48.010 --> 00:08:51.380
And if it's a file that already exists,
that's where we were getting

88
00:08:51.380 --> 00:08:55.880
sort of that git diff with the option
to replace or see the diff or reject.

89
00:08:57.140 --> 00:09:01.993
And so if you need to make
a configuration change, for example, or

90
00:09:01.993 --> 00:09:07.628
if you need to add an initializer or
change the way the application starts up,

91
00:09:07.628 --> 00:09:12.050
or set a default somewhere in
some files that already exist,

92
00:09:12.050 --> 00:09:16.160
the default blueprint is where to do that.

93
00:09:16.160 --> 00:09:19.254
&gt;&gt; Speaker 2: It's the same as
if you made a blueprint, and

94
00:09:19.254 --> 00:09:22.890
your blueprints overlap
your application so.

95
00:09:22.890 --> 00:09:23.796
&gt;&gt; Mike: Precisely, and

96
00:09:23.796 --> 00:09:27.363
just that the special one is the one
with the same name as your app.

97
00:09:29.517 --> 00:09:34.372
&gt;&gt; Mike: So this is a really like surface

98
00:09:34.372 --> 00:09:40.010
level Ember addon demo here.

99
00:09:40.010 --> 00:09:43.703
Definitely check out emberaddons.com and
emberobserver.com.

100
00:09:43.703 --> 00:09:48.600
There is some good scoring methodology
that has to do with how popular it is

101
00:09:49.650 --> 00:09:53.780
on GitHub, how many downloads per month it
has, whether there's good test coverage,

102
00:09:53.780 --> 00:09:55.370
how many contributors there are.

103
00:09:55.370 --> 00:09:59.797
So there's a real effort
to surface to Ember

104
00:09:59.797 --> 00:10:04.464
developers which ones
are really solid versus

105
00:10:04.464 --> 00:10:09.371
which ones were created
hastily during a demo and

106
00:10:09.371 --> 00:10:13.699
[LAUGH] possibly have some weird behavior.

