WEBVTT

1
00:00:00.000 --> 00:00:03.879
[MUSIC]

2
00:00:03.879 --> 00:00:07.080
&gt;&gt; Mike North: Is an array
returns a computed property.

3
00:00:07.080 --> 00:00:10.510
And what we're trying to do here
is evaluated as a function with no

4
00:00:10.510 --> 00:00:11.580
arguments in it.

5
00:00:11.580 --> 00:00:15.300
We expect that there are gonna be
arguments passed of this thing.

6
00:00:15.300 --> 00:00:19.840
We expect there to be a context,
in which this property can be evaluated.

7
00:00:19.840 --> 00:00:25.500
None of that's true, so
it's blowing up, understandably.

8
00:00:25.500 --> 00:00:31.210
So the way I advise unit testing,
computer property macros is to just define

9
00:00:31.210 --> 00:00:36.250
a new Ember object, set some properties up
on it, set your computer property on it.

10
00:00:36.250 --> 00:00:40.370
And then or set up your computer property
on it and then change the dependencies and

11
00:00:40.370 --> 00:00:43.830
observe what happens not observable.

12
00:00:43.830 --> 00:00:47.280
But not like create an observer but
programmed for

13
00:00:47.280 --> 00:00:50.330
what happens in response to those changes.

14
00:00:50.330 --> 00:00:57.479
So we'll call it type ember object extend.

15
00:00:57.479 --> 00:01:00.740
And we're going to give it
a property called item.

16
00:01:03.380 --> 00:01:03.900
And list.

17
00:01:06.530 --> 00:01:12.254
And then,
we're gonna give it isItemInList,

18
00:01:12.254 --> 00:01:15.820
InArray, item and list.

19
00:01:15.820 --> 00:01:21.582
So, this is looking very similar
to how we treated our GitHub

20
00:01:21.582 --> 00:01:27.740
org component and that we're just
passing in two property keys.

21
00:01:27.740 --> 00:01:30.380
In our case we had org as the item.

22
00:01:30.380 --> 00:01:37.590
Our array was going into the favorites
service but conceptually very similar.

23
00:01:39.270 --> 00:01:43.708
And my assertion is first gonna be,
so I need an instance by the way.

24
00:01:50.804 --> 00:01:52.180
&gt;&gt; Mike North: So I'm being explicit here.

25
00:01:52.180 --> 00:01:55.610
You could chain, extend, and
create together and just spit out.

26
00:01:55.610 --> 00:01:58.070
You're basically defining a factory and

27
00:01:58.070 --> 00:01:59.950
then creating an object
immediately thereafter,

28
00:01:59.950 --> 00:02:03.130
not holding a reference to the factory,
but that would be fine in this case too.

29
00:02:04.810 --> 00:02:09.476
So what I wanna test is first that we can

30
00:02:09.476 --> 00:02:13.430
get the property and
that it's what we expect.

31
00:02:13.430 --> 00:02:20.320
So I want to make sure that equal
is a different assertion here.

32
00:02:21.556 --> 00:02:28.980
Obj, get item, isItemInList, and
that should be in this case, false.

33
00:02:28.980 --> 00:02:33.260
And then it's a good practice as
the third argument for equal or

34
00:02:33.260 --> 00:02:36.700
the second argument for
okay, to write a message.

35
00:02:36.700 --> 00:02:39.089
Like a description of what
this assert is doing.

36
00:02:40.470 --> 00:02:46.770
The reason is that it will appear
in the test runner and especially

37
00:02:46.770 --> 00:02:52.980
if you're looking at like CI failures,
it helps to know which assertion failed.

38
00:02:52.980 --> 00:02:57.572
And to not have to like dive in and
otherwise you'll just see like pass, pass,

39
00:02:57.572 --> 00:03:00.929
pass, pass, pass for
all of the assertions in the test.

40
00:03:02.020 --> 00:03:08.061
So this'll be Initial check for

41
00:03:08.061 --> 00:03:11.430
not-in-list.

42
00:03:11.430 --> 00:03:12.770
And it passed.

43
00:03:12.770 --> 00:03:15.330
And what do I mean by these descriptions?

44
00:03:15.330 --> 00:03:17.920
If we open this up,
you see I have this here.

45
00:03:19.090 --> 00:03:23.656
We can compare that to this,

46
00:03:23.656 --> 00:03:28.290
which is far less useful.

47
00:03:28.290 --> 00:03:29.130
Okay.

48
00:03:29.130 --> 00:03:29.630
What is okay?

49
00:03:32.120 --> 00:03:37.955
So the next thing to do,
is I'm going to do obj.get,

50
00:03:37.955 --> 00:03:42.884
list, add object six and
then I'm gonna make

51
00:03:42.884 --> 00:03:48.605
a similar assert after except
I expect it to be true.

52
00:03:55.266 --> 00:03:59.190
&gt;&gt; Mike North: And fantastic,
so it's not on the list.

53
00:03:59.190 --> 00:04:01.900
We add it to the list, it flips to true.

54
00:04:01.900 --> 00:04:06.010
And then we can even do
something like this.

55
00:04:06.010 --> 00:04:10.154
I am not gonna go too
much further cuz it's,

56
00:04:10.154 --> 00:04:16.207
don't wanna bore you guys but
if we do set['item', 52].

57
00:04:20.637 --> 00:04:23.112
&gt;&gt; Mike North: So we are basically
checking the other dependency now.

58
00:04:26.208 --> 00:04:31.680
&gt;&gt; Mike North: After changing the object
it's not on the list anymore.

59
00:04:37.636 --> 00:04:40.460
&gt;&gt; Mike North: And now we're gonna
have three passing insertions.

60
00:04:40.460 --> 00:04:44.650
So this I mean you could go
much further but this is good.

61
00:04:44.650 --> 00:04:48.680
This gives you sort of a test case that
both of your dependencies work and for

62
00:04:48.680 --> 00:04:54.560
this simple computer property
macro this is pretty good.

63
00:04:54.560 --> 00:04:58.220
So now let's move to our
component integration test.

64
00:04:58.220 --> 00:04:59.238
So we're done with step one.

65
00:05:03.640 --> 00:05:06.710
&gt;&gt; Mike North: The GitHub org test and
I'm going to switch modules over here.

66
00:05:09.960 --> 00:05:11.180
And here we go.

67
00:05:11.180 --> 00:05:13.910
So okay, okay, that's fantastic.

68
00:05:13.910 --> 00:05:16.890
I'm gonna elaborate a little.

69
00:05:16.890 --> 00:05:18.675
So inline syntax.

70
00:05:20.488 --> 00:05:21.608
&gt;&gt; Mike North: Basic rendering.

71
00:05:29.470 --> 00:05:36.890
&gt;&gt; Mike North: Block syntax
&gt;&gt; Mike North: Fantastic so

72
00:05:36.890 --> 00:05:39.760
that's a little bit more informative.

73
00:05:39.760 --> 00:05:43.340
I'm gonna actually set up a new test

74
00:05:43.340 --> 00:05:48.170
just to demonstrate how that works and
we can clean some of this stuff up.

75
00:05:55.450 --> 00:05:56.050
Alright.

76
00:05:56.050 --> 00:06:00.930
So we still expect two
zero assertions will run.

77
00:06:00.930 --> 00:06:03.150
Understandable why this is failing.

78
00:06:03.150 --> 00:06:08.680
So what I'm going to do
now is pass in an object

79
00:06:08.680 --> 00:06:13.706
that looks like what we expect an org
to be and we'll see if the correct.

80
00:06:13.706 --> 00:06:17.133
Text for the org name shows up in the dom.

81
00:06:40.325 --> 00:06:42.277
&gt;&gt; Mike North: And
I'm gonna just run this test here.

82
00:06:45.488 --> 00:06:50.625
&gt;&gt; Mike North: So worth noting that all
of this is happening synchronously.

83
00:06:51.760 --> 00:06:52.441
Or it should be.

84
00:06:59.295 --> 00:07:00.377
&gt;&gt; Mike North: This may be a problem.

85
00:07:13.985 --> 00:07:14.966
&gt;&gt; Mike North: Get rid of this.

86
00:07:18.380 --> 00:07:21.410
&gt;&gt; Mike North: [LAUGH] duh I
don't have my dev tools open.

87
00:07:23.690 --> 00:07:28.990
Okay so notice it's kind of hard
to see I'm gonna zoom in here.

88
00:07:28.990 --> 00:07:33.980
Notice that we have a div here and we have
something that looks like our component,

89
00:07:33.980 --> 00:07:36.700
it's rendering sort of
in an empty area but

90
00:07:36.700 --> 00:07:40.900
just be aware that you can put debugger
statements midway through your test.

91
00:07:40.900 --> 00:07:44.000
In this case because it's synchronous
we can just put it here and

92
00:07:44.000 --> 00:07:47.660
I'll show you the equivalent when
we're doing the acceptance test and

93
00:07:47.660 --> 00:07:49.580
we're dealing with asynchrony.

94
00:07:49.580 --> 00:07:54.040
But here we can freeze and
I can select this.

95
00:07:54.040 --> 00:08:00.286
To be quite honest I forgot
what this actually looks like,

96
00:08:00.286 --> 00:08:04.244
okay so we can look for, we use find.

97
00:08:06.415 --> 00:08:07.866
&gt;&gt; Mike North: Let's see how that works.

98
00:08:13.479 --> 00:08:15.153
&gt;&gt; Mike North: Now I'm gonna
make my life a little easier.

99
00:08:17.153 --> 00:08:19.180
&gt;&gt; Mike North: I'm going to
add a class to GitHub org.

100
00:08:24.525 --> 00:08:29.302
&gt;&gt; Mike North: So that it's easier to
build a selector for it rather than trying

101
00:08:29.302 --> 00:08:34.181
to find a ridiculously deep path
of some sort, and so now if we do.

102
00:08:40.890 --> 00:08:46.460
&gt;&gt; Mike North: There's our dom element and
we can look for the a tag and

103
00:08:46.460 --> 00:08:51.563
then we can see what's the text there,
perfect.

104
00:08:54.420 --> 00:09:01.110
&gt;&gt; Mike North: Assert equal and my org.

105
00:09:03.030 --> 00:09:08.950
And to avoid more JSON problems you can
actually do ember.$ which is just so

106
00:09:08.950 --> 00:09:12.870
you don't have to add more
globals to your JSON config.

107
00:09:14.000 --> 00:09:15.440
Delete the debugger.

108
00:09:15.440 --> 00:09:16.669
Expect this to pass.

109
00:09:18.340 --> 00:09:19.570
And it does.

110
00:09:19.570 --> 00:09:20.350
All right.

111
00:09:20.350 --> 00:09:24.687
So, that is proving that works there and

112
00:09:24.687 --> 00:09:31.844
then we should be able to do org set
id other and add a new assertion.

113
00:09:39.514 --> 00:09:44.020
&gt;&gt; Mike North: So this is failing
because of this rundown issue.

114
00:09:45.330 --> 00:09:49.780
And this has to do with setting
properties, setting properties on objects.

115
00:09:49.780 --> 00:09:52.649
Remember how I showed this diagram
of the red and blue blocks?

116
00:09:54.200 --> 00:09:58.260
Typically that stuff will happen
in a run loop, so I've walked into

117
00:09:58.260 --> 00:10:00.674
this to show you guys how to get
around this problem it's this simple.

118
00:10:00.674 --> 00:10:03.665
Ember.run arrow function.

119
00:10:07.990 --> 00:10:08.918
&gt;&gt; Mike North: That's it.

120
00:10:12.553 --> 00:10:16.240
&gt;&gt; Mike North: And, I'm being silly.

121
00:10:16.240 --> 00:10:17.820
The set is what needs to be in there.

122
00:10:20.000 --> 00:10:23.800
All right.

123
00:10:23.800 --> 00:10:27.500
So, now we're actually just seeing the
fact that I'm testing for something that

124
00:10:28.530 --> 00:10:33.170
the object doesn't actually handle, right.

125
00:10:33.170 --> 00:10:38.860
So, we have a dependency on this object,
not on the property ID for the object.

126
00:10:38.860 --> 00:10:41.350
So, if we swapped out
the object as a whole,

127
00:10:41.350 --> 00:10:46.530
we would see that things
would update as we expect.

128
00:10:46.530 --> 00:10:52.470
But in this case, I've changed something
that really we don't have a dependency on.

129
00:10:52.470 --> 00:10:57.040
So, does that make sense why
this is working the way it is?

130
00:10:57.040 --> 00:10:59.305
If we look at his inlay.

131
00:10:59.305 --> 00:11:05.930
So we're passing an item which is
an object inside which is an ID.

132
00:11:05.930 --> 00:11:10.740
But we're just declaring a dependency
on the outer, the object as a whole.

133
00:11:10.740 --> 00:11:12.731
If we did something like this.

134
00:11:20.505 --> 00:11:22.350
&gt;&gt; Speaker 2: But
that's not what you're testing.

135
00:11:22.350 --> 00:11:23.520
&gt;&gt; Mike North: I'm sorry.

136
00:11:23.520 --> 00:11:24.344
I'm kind of confused here.

137
00:11:28.952 --> 00:11:34.430
&gt;&gt; Mike North: [NOISE]
Org set

138
00:11:34.430 --> 00:11:38.914
ID other.

139
00:11:38.914 --> 00:11:42.450
All right,
I'm actually gonna skip over this.

140
00:11:42.450 --> 00:11:45.974
I just wanted to show you
guys that we're on mainly.

