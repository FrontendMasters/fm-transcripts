WEBVTT

1
00:00:00.330 --> 00:00:04.400
&gt;&gt; Maximiliano Firtman: Okay, so we've
seen now and it's working our cache first.

2
00:00:04.400 --> 00:00:09.176
Another strategy for serving files is
network first that you may understand by

3
00:00:09.176 --> 00:00:11.020
the name what it's doing.

4
00:00:11.020 --> 00:00:14.240
In this case,
it's prioritizing the network.

5
00:00:14.240 --> 00:00:18.496
So in this case, my PWA is making
a request, that's step one here,

6
00:00:18.496 --> 00:00:23.129
and the service worker drops the request
and it's not going to the cache,

7
00:00:23.129 --> 00:00:25.542
it's actually going to the network.

8
00:00:25.542 --> 00:00:28.947
And then if it's fetching
that from the network,

9
00:00:28.947 --> 00:00:34.549
the service worker will say, okay,
we'll just take that and answer that.

10
00:00:34.549 --> 00:00:38.519
But if the network fails,
it will go to the cache.

11
00:00:38.519 --> 00:00:42.209
Why the network can fail,
because maybe you're offline, okay?

12
00:00:42.209 --> 00:00:45.025
And so then if you're offline,
the network is failing,

13
00:00:45.025 --> 00:00:48.359
you go to the cache and
you return the response from the cache.

14
00:00:48.359 --> 00:00:49.909
So this is network first.

15
00:00:49.909 --> 00:00:54.449
The advantage is freshness of the data.

16
00:00:54.449 --> 00:01:00.793
The disadvantage is performance, because
now you are preferring the network, okay?

17
00:01:00.793 --> 00:01:04.352
You have the code there.

18
00:01:04.352 --> 00:01:08.852
In our project, if you wanna try it, it's
difficult to see the difference actually.

19
00:01:08.852 --> 00:01:10.558
But if you go to the snippets,
you have it there.

20
00:01:10.558 --> 00:01:12.081
If you wanna try it,

21
00:01:12.081 --> 00:01:18.253
you just replace the fetch event
handler with this one and that's all.

22
00:01:18.253 --> 00:01:21.128
And the same happens with the last one,
a stale while revalidate.

23
00:01:21.128 --> 00:01:24.568
So let me explain that strategy, because
it's difficult to get the first time.

24
00:01:25.638 --> 00:01:27.948
So, a stale while revalidate
is the other strategy.

25
00:01:27.948 --> 00:01:31.788
And by the way,
these are strategies, not APIs,

26
00:01:31.788 --> 00:01:37.374
which means you can create your own
strategy with your own logic, okay?

27
00:01:37.374 --> 00:01:41.540
But this has a lot of things that are
going in and out, this is the thing.

28
00:01:41.540 --> 00:01:44.193
The PWA makes a request, okay?

29
00:01:44.193 --> 00:01:46.783
The second step, we search in the cache.

30
00:01:46.783 --> 00:01:49.273
The second step, we go and
search in the cache.

31
00:01:49.273 --> 00:01:50.393
Do we have it?

32
00:01:50.393 --> 00:01:52.713
Okay, this is a cache hit.

33
00:01:52.713 --> 00:01:55.433
We return the file and we are done.

34
00:01:55.433 --> 00:01:57.683
This is like cache first, okay?

35
00:01:57.683 --> 00:02:00.543
But what happens if it's not in the cache?

36
00:02:00.543 --> 00:02:02.704
So its a cache miss.

37
00:02:02.704 --> 00:02:04.524
We go and fetch from the network.

38
00:02:04.524 --> 00:02:10.419
But instead of sending the response
directly to the PWA, we trap the answer,

39
00:02:10.419 --> 00:02:15.244
we clone their response,
here we clone the response for what?

40
00:02:16.644 --> 00:02:18.366
So we can update the cache.

41
00:02:20.245 --> 00:02:24.518
&gt;&gt; Maximiliano Firtman: So this is kind of
mixing both strategies at the same time.

42
00:02:24.518 --> 00:02:30.368
It's cache first, but also we go and
fetch from the network at the same time.

43
00:02:30.368 --> 00:02:30.878
Look at this.

44
00:02:30.878 --> 00:02:33.008
We have two and two.

45
00:02:33.008 --> 00:02:35.632
So at the same time,
we search in the cache and

46
00:02:35.632 --> 00:02:38.198
also we fetch from
the network all the time.

47
00:02:39.398 --> 00:02:42.697
But if it's in the cache,
we use the version from the cache, but

48
00:02:42.697 --> 00:02:45.504
we also have a network request,
for what?

49
00:02:45.504 --> 00:02:49.074
For updating the cache, for next load.

50
00:02:49.074 --> 00:02:52.874
So if you change the CSS, now,
we're getting into Christmas.

51
00:02:52.874 --> 00:02:55.584
So we wanna put some bells on your logo.

52
00:02:55.584 --> 00:03:01.482
So you change your logo PNG, and actually
when the user is loading the page,

53
00:03:01.482 --> 00:03:05.707
it will get the logo without
the Christmas bells.

54
00:03:05.707 --> 00:03:09.939
But in the background, the service worker
is going to the logo of the server and

55
00:03:09.939 --> 00:03:13.427
downloading the logo PNG anyway and
updating the cache.

56
00:03:13.427 --> 00:03:18.667
So next time you open the app, the logo
with Christmas bells will be there.

57
00:03:18.667 --> 00:03:19.447
Okay, that's the idea.

58
00:03:20.717 --> 00:03:22.787
Again, you can create your own strategy.

59
00:03:24.287 --> 00:03:27.984
And if you feel that
this is too low level for

60
00:03:27.984 --> 00:03:33.277
what you are expecting,
you can use a framework.

61
00:03:33.277 --> 00:03:36.697
And the framework for
service workers that everyone is using,

62
00:03:36.697 --> 00:03:39.677
it was created by the Chrome team,
is called Workbox.

63
00:03:40.767 --> 00:03:47.630
So, Workbox JS, it's a JavaScript
library for progressive web apps.

64
00:03:47.630 --> 00:03:54.497
It's actually a set of libraries.

65
00:03:54.497 --> 00:03:57.508
It's not just one library,
it's a collection of libraries.

66
00:03:57.508 --> 00:04:01.235
And one of the libraries has to do
with strategies, precaching, and

67
00:04:01.235 --> 00:04:04.916
then, you don't need to write
the service worker yourself.

68
00:04:04.916 --> 00:04:10.406
You can use a higher level
API that will help you, okay?

69
00:04:12.366 --> 00:04:16.096
&gt;&gt; Student 1: So are we always lagged
by one version compared to the network?

70
00:04:17.506 --> 00:04:20.750
&gt;&gt; Maximiliano Firtman: With
a stale while revalidate, yes.

71
00:04:20.750 --> 00:04:26.081
Is there any way to update once you
get the new version to do something?

72
00:04:26.081 --> 00:04:29.565
Well, actually, first, you need to
know if there is a new version or not.

73
00:04:29.565 --> 00:04:34.934
So the HTTP protocol doesn't have a way,
or a simple way to know that.

74
00:04:34.934 --> 00:04:41.034
But also, if you already served one logo,
they're always on the screen.

75
00:04:41.034 --> 00:04:43.593
So you could send messages
from the service worker,

76
00:04:43.593 --> 00:04:47.072
you can send a message to the page,
hey page, there is a new logo.

77
00:04:47.072 --> 00:04:49.521
So then the page can request a new logo,
but

78
00:04:49.521 --> 00:04:52.252
then the user will see
some flashes on the page.

79
00:04:52.252 --> 00:04:56.632
So the logo is changing, the CSS is
changing on the fly, it's kind of weird.

80
00:04:56.632 --> 00:05:01.978
So that's why typically when you are doing
this, you are always one version,

81
00:05:01.978 --> 00:05:05.787
and there are patterns to
detect that with JavaScript.

82
00:05:05.787 --> 00:05:08.139
And you can even show a user
a message saying, hey,

83
00:05:08.139 --> 00:05:09.687
there is a new version of the app.

84
00:05:09.687 --> 00:05:11.627
Do you wanna load it now?

85
00:05:11.627 --> 00:05:18.247
So instead of your app waiting for
the next load, you could ask the user.

86
00:05:18.247 --> 00:05:24.680
So there are a lot of advanced techniques
to get more information about that.

87
00:05:24.680 --> 00:05:29.695
And that leads to this slide that says,
if you wanna get more details,

88
00:05:29.695 --> 00:05:33.775
including how to do this upgrade message,
JavaScript in

89
00:05:33.775 --> 00:05:38.800
the Background course Frontend Masters
is what you're looking for.

90
00:05:39.820 --> 00:05:45.510
There we go over service workers with more
time, it's just a workshop on that topic,

91
00:05:45.510 --> 00:05:50.054
and we see all the possibilities
that you have with more details.

92
00:05:53.426 --> 00:05:57.303
&gt;&gt; Student 2: I'm just wondering
about a use case for, I guess,

93
00:05:57.303 --> 00:06:01.902
especially the cache first model,
because it makes sense,

94
00:06:01.902 --> 00:06:07.044
that you would want fresh information,
updated information, and

95
00:06:07.044 --> 00:06:13.561
you'd wanna show something, but you might
not want the flash of weird information.

96
00:06:13.561 --> 00:06:16.317
&gt;&gt; Maximiliano Firtman: Do you have
experience using libraries such

97
00:06:16.317 --> 00:06:17.662
as React or Angular?

98
00:06:17.662 --> 00:06:23.462
Well, what happens with the assets
that those libraries are generating?

99
00:06:23.462 --> 00:06:26.422
Do you remember the final
name of your JavaScript?

100
00:06:27.592 --> 00:06:30.714
What's the final name of your
JavaScript file, do you remember?

101
00:06:30.714 --> 00:06:32.692
&gt;&gt; Student 2: JSX?
&gt;&gt; Maximiliano Firtman: No, the main.js or

102
00:06:32.692 --> 00:06:35.614
bundle.js, things like that.

103
00:06:35.614 --> 00:06:40.464
And typically it's not just main.js or
bundle.js, it's bundle dash or

104
00:06:40.464 --> 00:06:45.134
dot, number, hash, .js,
not sure if you remember that.

105
00:06:45.134 --> 00:06:50.337
So when you have that, if you change your

106
00:06:50.337 --> 00:06:55.857
JavaScript code, it will change the URL.

107
00:06:55.857 --> 00:06:59.224
So it's actually a different
asset from a URL point of view.

108
00:06:59.224 --> 00:07:01.890
So, cache-first strategy means,

109
00:07:01.890 --> 00:07:07.057
I don't care about updating this URL
because it will never be updated.

110
00:07:08.137 --> 00:07:11.027
It's actually an immutable URL.

111
00:07:11.027 --> 00:07:13.712
So there are cases where
your assets are immutable.

112
00:07:13.712 --> 00:07:15.657
You say, maybe I wanna change the CSS.

113
00:07:15.657 --> 00:07:18.827
But when you do that,
it's gonna be a different CSS.

114
00:07:20.467 --> 00:07:21.167
Not that one.

115
00:07:21.167 --> 00:07:26.168
Maybe you can see what happens,
then we are collecting CSS forever.

116
00:07:26.168 --> 00:07:30.134
Well, then we can talk about
the storage permissions and

117
00:07:30.134 --> 00:07:35.238
storage quotas, but you can clean
up things, but that's one case.

118
00:07:35.238 --> 00:07:39.318
And also remember, you don't need to apply
the same technique to all the resources.

119
00:07:39.318 --> 00:07:41.158
You can also say, okay, you know what?

120
00:07:41.158 --> 00:07:44.346
For the image folder,
I'm going to use this strategy.

121
00:07:44.346 --> 00:07:47.529
For the other folder,
I'm going to use another strategy.

122
00:07:47.529 --> 00:07:48.819
&gt;&gt; Student 2: Okay, that's helpful.

123
00:07:48.819 --> 00:07:52.180
&gt;&gt; Maximiliano Firtman: Okay, so then
you can decide what are you going to do,

124
00:07:52.180 --> 00:07:54.649
that you are in charge.

125
00:07:54.649 --> 00:07:57.729
You have complete control
of request answer.

126
00:07:57.729 --> 00:07:59.919
You are kind of writing
your own web server here.

127
00:08:01.139 --> 00:08:04.702
&gt;&gt; Student 2: And if you are using
a cache-first strategy for

128
00:08:04.702 --> 00:08:09.422
some things like logos or
images that will probably be there for

129
00:08:09.422 --> 00:08:12.377
a long time, but then you update them.

130
00:08:12.377 --> 00:08:15.766
&gt;&gt; Maximiliano Firtman: You can always
send some kind of a signal from the server

131
00:08:15.766 --> 00:08:19.228
at some points,
you can have a JSON file, for example,

132
00:08:19.228 --> 00:08:22.115
that's another strategy, use cache first.

133
00:08:22.115 --> 00:08:26.361
But then, on every page load,
you go and grab a manifest.json,

134
00:08:26.361 --> 00:08:30.856
not the manifest.json we have here,
like assetsmanifest.json.

135
00:08:30.856 --> 00:08:35.443
You download that file and that file
server side will have some flags saying,

136
00:08:35.443 --> 00:08:39.539
hey, update everything, or
we have a new version of everything, or

137
00:08:39.539 --> 00:08:41.560
we have a new version of the logo.

138
00:08:41.560 --> 00:08:44.883
So your service worker can say, okay,
let's go grab the new version and

139
00:08:44.883 --> 00:08:46.422
update the version in the cache.

140
00:08:46.422 --> 00:08:49.060
So you can add your own logic.

141
00:08:49.060 --> 00:08:52.880
You need some kind of a protocol with
your server that you need to create.

142
00:08:55.020 --> 00:08:58.026
Actually, if you're using a React or
Angular or

143
00:08:58.026 --> 00:09:02.570
View on created PWAs with them,
they create a service worker for you, and

144
00:09:02.570 --> 00:09:05.821
that service worker has
some kind of that solution.

145
00:09:05.821 --> 00:09:10.943
So every time you make a new build,
it creates an assets manifest with a hash,

146
00:09:10.943 --> 00:09:16.341
and the service worker will download
that asset manifest and will check with.

147
00:09:16.341 --> 00:09:18.921
Okay, let's see our storage,
do we have that logo?

148
00:09:18.921 --> 00:09:19.711
Yeah, we have that version.

149
00:09:19.711 --> 00:09:22.353
Okay let's see CSS,
there is a new one, okay?

150
00:09:22.353 --> 00:09:23.789
Let's go and download a new one.

151
00:09:23.789 --> 00:09:27.314
So that logic is already implemented
on those service workers,

152
00:09:27.314 --> 00:09:31.051
and you can do that also with workbox JS,
you can implement in that.

153
00:09:31.051 --> 00:09:35.914
So you can see it's
a huge topic by itself.

