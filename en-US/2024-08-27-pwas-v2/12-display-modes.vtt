WEBVTT

1
00:00:00.000 --> 00:00:02.433
&gt;&gt; Maximiliano Firtman: Let's
get deeper into Display modes.

2
00:00:02.433 --> 00:00:08.690
So far we've used one display standalone
but actually, there are more in the spec.

3
00:00:08.690 --> 00:00:14.184
The first one and actually the default
value is actually browser,

4
00:00:14.184 --> 00:00:19.789
which means you can create a manifest and
specify display browser.

5
00:00:19.789 --> 00:00:24.977
That means you don't want to be a PWA,
you just wanna provide

6
00:00:24.977 --> 00:00:30.498
some meta data such as the theme color and
the icon in a manifest.

7
00:00:30.498 --> 00:00:33.182
But if the user is adding
that to the home screen,

8
00:00:33.182 --> 00:00:35.217
you wanna a shortcut to the browser.

9
00:00:35.217 --> 00:00:36.144
That's what you're saying, okay?

10
00:00:36.144 --> 00:00:38.610
So that's not for PWAs.

11
00:00:38.610 --> 00:00:43.291
Standalone, it's the most common value,
but there are more.

12
00:00:43.291 --> 00:00:48.033
We have fullscreen, and
I will show you the difference here.

13
00:00:48.033 --> 00:00:51.599
Actually, fullscreen today is
Android compatible only, so

14
00:00:51.599 --> 00:00:53.112
it works only on Android.

15
00:00:53.112 --> 00:00:59.161
On all the rest and typically there is, we
have like a chain here, a fallback chain.

16
00:00:59.161 --> 00:01:04.624
So if fullscreen is not available,
typically falls back to standalone.

17
00:01:04.624 --> 00:01:06.762
Minimal-ui, I will show you,

18
00:01:06.762 --> 00:01:10.809
you will understand this in a sec
when you see some examples.

19
00:01:10.809 --> 00:01:15.878
Minimal-ui fall backs to browser,
so be careful with that.

20
00:01:15.878 --> 00:01:20.818
That means that, if you use minimal-ui and
a browser is not supporting that

21
00:01:20.818 --> 00:01:24.383
Display mode,
the browser will fall back to browser.

22
00:01:24.383 --> 00:01:27.421
So it's not gonna be a standalone PWA.

23
00:01:27.421 --> 00:01:33.477
And actually, those are the four
initial Display modes in the spec.

24
00:01:33.477 --> 00:01:38.845
But on a separate spec, so
on most modern API's to be honest,

25
00:01:38.845 --> 00:01:43.820
it typically is Chromium-based only and
desktop only.

26
00:01:43.820 --> 00:01:48.406
We have tabbed mode, and I will show you
an example in a sec of what that means.

27
00:01:48.406 --> 00:01:55.267
And window-controls-overlay there is
I know, sounds like a large name.

28
00:01:55.267 --> 00:01:59.344
So let's see some examples
to understand what they are.

29
00:01:59.344 --> 00:02:02.855
For backward compatibility,
the problem is that, for example,

30
00:02:02.855 --> 00:02:07.057
if I wanna use one of these new ones
like tabbed or window-controls-overlay,

31
00:02:07.057 --> 00:02:08.892
they are not available on mobile.

32
00:02:08.892 --> 00:02:09.985
They're not available on iOS.

33
00:02:09.985 --> 00:02:13.256
So if I use one of those Display mode,
we have a problem.

34
00:02:13.256 --> 00:02:17.836
Typically, it will fall back to browser so
then we don't have a PWA.

35
00:02:17.836 --> 00:02:22.543
So that because of that, the standard
created another property known as

36
00:02:22.543 --> 00:02:26.258
display_override that
receives an array collection.

37
00:02:26.258 --> 00:02:30.317
So then the browser will
start with display_override,

38
00:02:30.317 --> 00:02:33.287
it will try to match those Display modes.

39
00:02:33.287 --> 00:02:35.265
If they don't support those Display mode,

40
00:02:35.265 --> 00:02:37.622
they will fall back to
the display property, okay?

41
00:02:37.622 --> 00:02:40.692
It's kind of a weird way
of solving the problem but

42
00:02:40.692 --> 00:02:45.091
at least with this they are offering
a solution that works everywhere.

43
00:02:45.091 --> 00:02:48.534
Of course,
iOS will ignore display_override, so

44
00:02:48.534 --> 00:02:50.810
it will not use a new display mode.

45
00:02:50.810 --> 00:02:52.713
So let's try to understand this.

46
00:02:52.713 --> 00:02:55.323
The Standalone mode is the one
that we have already checked.

47
00:02:55.323 --> 00:03:00.389
So you just get a window for
you on macOS, on Windows,

48
00:03:00.389 --> 00:03:06.254
I think the other one is Windows 10,
Windows 7, or Linux.

49
00:03:06.254 --> 00:03:08.093
You understood the idea, okay?

50
00:03:08.093 --> 00:03:11.932
You get a Standalone mode,
that's actually pretty straightforward.

51
00:03:11.932 --> 00:03:14.216
Now, Minimal UI.

52
00:03:14.216 --> 00:03:18.630
For example, Minimal UI,
this is YouTube music that, by the way,

53
00:03:18.630 --> 00:03:20.030
it's a Desktop PWA.

54
00:03:20.030 --> 00:03:22.026
It's a good one.

55
00:03:24.212 --> 00:03:25.597
&gt;&gt; Maximiliano Firtman: I
can demo it here.

56
00:03:25.597 --> 00:03:27.766
I have it here, YouTube Music.

57
00:03:27.766 --> 00:03:32.039
It's using responsive design to
change the UI based on the size.

58
00:03:32.039 --> 00:03:36.861
So it goes to a small widget
when it's small and

59
00:03:36.861 --> 00:03:40.972
YouTube Music is using this Minimal UI.

60
00:03:40.972 --> 00:03:42.643
How do I know that?

61
00:03:42.643 --> 00:03:45.191
Because I have a Minimal UI
from the browser.

62
00:03:45.191 --> 00:03:48.864
For example, the back button,
the refresh button.

63
00:03:48.864 --> 00:03:50.986
So that's a Minimal UI.

64
00:03:50.986 --> 00:03:55.162
So you have within the title bar

65
00:03:55.162 --> 00:03:59.827
a Minimal UI for browsing, okay?

66
00:03:59.827 --> 00:04:02.401
Tabbed mode,
this is the Desktop Tabbed mode.

67
00:04:02.401 --> 00:04:04.406
But basically, you can create tabs.

68
00:04:04.406 --> 00:04:10.118
Like if you have word or something like
that so you can create different windows,

69
00:04:10.118 --> 00:04:13.314
so different navigation context with tabs.

70
00:04:13.314 --> 00:04:18.533
So it's kind of you have your own
customized Chrome if you want, okay?

71
00:04:18.533 --> 00:04:22.957
And Window Controls Overlay, will let
you render content in the title bar.

72
00:04:22.957 --> 00:04:27.793
So instead of letting
the iOS render in the title,

73
00:04:27.793 --> 00:04:33.449
you can use HTML and
CSS to render content directly there.

74
00:04:33.449 --> 00:04:38.529
So you can use the title bar for
adding controls or do wherever you want.

75
00:04:38.529 --> 00:04:40.861
&gt;&gt; Speaker 2: I just wanna confirm
Windows in this space it's not

76
00:04:40.861 --> 00:04:42.116
the proprietary company.

77
00:04:42.116 --> 00:04:43.875
It's just using the control, right?

78
00:04:43.875 --> 00:04:44.837
&gt;&gt; Maximiliano Firtman: Yeah, yeah,

79
00:04:44.837 --> 00:04:49.025
in this case it's capitalized
because it has the name of WCO.

80
00:04:49.025 --> 00:04:52.573
That's how we know that, but
it's not Windows, the operating system.

81
00:04:52.573 --> 00:04:56.488
Actually, that's a Mac screen.

82
00:04:56.488 --> 00:05:01.189
So it works on Desktop macOS,
Linux, Chromebooks,

83
00:05:01.189 --> 00:05:04.435
Windows as well with Chrome, okay?

84
00:05:04.435 --> 00:05:07.754
So basically, you change the display, and

85
00:05:07.754 --> 00:05:11.893
you get a different experience for
the Window, okay?

86
00:05:11.893 --> 00:05:14.667
So now let's go on mobile.

87
00:05:14.667 --> 00:05:18.694
On iOS and iPadOS we only have Standalone.

88
00:05:18.694 --> 00:05:20.745
So that's the only one that is supported,
okay?

89
00:05:20.745 --> 00:05:25.535
Where you have a Fullscreen, but
the status bar is always there, okay?

90
00:05:25.535 --> 00:05:29.814
And it looks like an app,
we have already seen that.

91
00:05:29.814 --> 00:05:34.788
Android support a Standalone is
the one that we have already seen, so

92
00:05:34.788 --> 00:05:38.752
we can see the status bar that
is themed with our color.

93
00:05:38.752 --> 00:05:44.742
It also appears as any
other app in the launcher.

94
00:05:44.742 --> 00:05:47.987
It supports Minimal UI Android.

95
00:05:47.987 --> 00:05:51.848
When you are using Minimal UI,
this is how it's going to look like.

96
00:05:51.848 --> 00:05:56.470
So it's also kind of a Standalone,
but you have a minimal

97
00:05:56.470 --> 00:06:01.205
browsing bar that is rendering your title,
your domain.

98
00:06:01.205 --> 00:06:04.176
Also includes a menu, a contextual menu,

99
00:06:04.176 --> 00:06:08.233
where you can actually see,
for example, information.

100
00:06:08.233 --> 00:06:12.427
The information will give you
the SSL certificate, for example.

101
00:06:12.427 --> 00:06:16.968
Fullscreen will give
you 100% of the screen

102
00:06:16.968 --> 00:06:21.631
removing the status bar
as well on Android only.

103
00:06:21.631 --> 00:06:26.122
So all the Display modes
on Android look like this,

104
00:06:26.122 --> 00:06:30.096
Standalone, Minimal UI, and Fullscreen.

105
00:06:30.096 --> 00:06:36.290
Remember, you just change the value of
the property display in your manifest.

106
00:06:36.290 --> 00:06:38.297
That's all you need, okay?

107
00:06:38.297 --> 00:06:39.315
Any questions?

108
00:06:39.315 --> 00:06:42.382
&gt;&gt; Speaker 3: Can you do media queries to
tell what kind of device you're using?

109
00:06:42.382 --> 00:06:43.329
&gt;&gt; Maximiliano Firtman: Yes, you can.

110
00:06:43.329 --> 00:06:46.692
Yeah, but kind of,
what do you mean by kind of device?

111
00:06:46.692 --> 00:06:48.077
&gt;&gt; Speaker 3: iPhone, Android.

112
00:06:48.077 --> 00:06:51.537
&gt;&gt; Maximiliano Firtman: Okay, no, no,
no, I was expecting another question.

113
00:06:51.537 --> 00:06:54.874
No, you cannot do media queries.

114
00:06:54.874 --> 00:06:57.102
What you want is device detection.

115
00:06:57.102 --> 00:07:00.206
For using device detection,
there are tricks.

116
00:07:00.206 --> 00:07:03.811
So you can use tricks,
read the User-Agent and

117
00:07:03.811 --> 00:07:08.720
try to guess if it's iPhone,
Android or something like that.

118
00:07:08.720 --> 00:07:12.493
The only actual way to do
that professionally and

119
00:07:12.493 --> 00:07:18.572
having more certainty about what's going
on there is using a device library.

120
00:07:18.572 --> 00:07:20.517
Not sure if you've heard about that.

121
00:07:20.517 --> 00:07:24.199
There are one device library,
let me show you that.

122
00:07:24.199 --> 00:07:29.571
One device library that is actually pretty
old, but I mean, it has been for a while.

123
00:07:29.571 --> 00:07:34.061
It's not an old library, it's WURFL.js.

124
00:07:34.061 --> 00:07:36.206
The ScientiaMobile is
the company behind it.

125
00:07:36.206 --> 00:07:40.882
There is a free version I think,
where you can have a JavaScript version,

126
00:07:40.882 --> 00:07:43.079
device detection or server side.

127
00:07:43.079 --> 00:07:47.362
So WURFL.js will use different
tricks heuristics to

128
00:07:47.362 --> 00:07:50.033
actually tell you where you are.

129
00:07:50.033 --> 00:07:53.980
So the kind of device that you are and
how it works.

130
00:07:53.980 --> 00:07:57.412
It will give you the device name,
the factor,

131
00:07:57.412 --> 00:08:01.208
and even some properties about the device,
okay?

132
00:08:01.208 --> 00:08:03.213
So you need something like this.

133
00:08:03.213 --> 00:08:08.719
But for some basic behavior,
so what's a use case?

134
00:08:08.719 --> 00:08:11.888
So what are you thinking?

135
00:08:11.888 --> 00:08:16.176
&gt;&gt; Speaker 3: I'm thinking for where you
tell someone to how to install the PWA.

136
00:08:16.176 --> 00:08:17.893
&gt;&gt; Maximiliano Firtman: Okay,
how to install, okay?

137
00:08:17.893 --> 00:08:20.675
So let's say that for the Installation,

138
00:08:20.675 --> 00:08:25.220
maybe iPhone is kind of the only
one that is different, also macOS.

139
00:08:25.220 --> 00:08:28.429
For that it's not like you
wanna detect which device,

140
00:08:28.429 --> 00:08:31.238
you wanna detect if it's iPhone or
not, okay?

141
00:08:31.238 --> 00:08:32.144
And that's simple.

142
00:08:32.144 --> 00:08:34.891
There is a trick,
let me give you a trick really quickly.

143
00:08:34.891 --> 00:08:37.542
There is a trick.

144
00:08:37.542 --> 00:08:42.156
The trick is using there is
a property it's window.standalone.

145
00:08:42.156 --> 00:08:45.171
Window.standalone, it's undefined here.

146
00:08:45.171 --> 00:08:48.663
It's not part of the DOM API,
so it's not there.

147
00:08:48.663 --> 00:08:53.325
But it's something that was created
in the Steve Jobs era for

148
00:08:53.325 --> 00:08:57.169
Safari before the PWA
standards were created, okay?

149
00:08:57.169 --> 00:09:02.931
So that property is a boolean property
when it's not undefined, that will tell

150
00:09:02.931 --> 00:09:08.100
you if you are Fullscreen app,
Standalone app or not, but only on iOS.

151
00:09:08.100 --> 00:09:13.687
So, for example,
if I'm here in the simulator well,

152
00:09:13.687 --> 00:09:17.334
I will do a spoiler of what's next.

153
00:09:17.334 --> 00:09:22.076
Can I open an inspector on the simulator?

154
00:09:22.076 --> 00:09:26.125
Well, let me answer the question quickly,
because it's a spoiler, the answer is yes.

155
00:09:26.125 --> 00:09:30.454
To answer the question,
the simplest way to see if

156
00:09:30.454 --> 00:09:35.417
it's an iOS device or not,
is navigator.standalone.

157
00:09:35.417 --> 00:09:38.882
Navigator.standalone in Chrome
is giving me undefined,

158
00:09:38.882 --> 00:09:42.427
because It's not part of the DOM API,
it's not standard.

159
00:09:42.427 --> 00:09:47.996
But if I'm going back to iOS and
I'm here connected to,

160
00:09:47.996 --> 00:09:54.171
we'll see how to connect this
inspector to my PWA in a second.

161
00:09:54.171 --> 00:10:01.258
From here, if I try navigator.standalone,
it gives me true, okay?

162
00:10:01.258 --> 00:10:03.931
And if I'm in the browser,
it will give me false.

163
00:10:03.931 --> 00:10:07.062
So Safari in the browser
will give you false.

164
00:10:07.062 --> 00:10:09.439
Safari in a PWA will give you true.

165
00:10:09.439 --> 00:10:11.672
Other browsers will give you undefined.

166
00:10:11.672 --> 00:10:16.270
So it's a quick way to know
if it's Safari or not.

167
00:10:16.270 --> 00:10:18.087
Quick and dirty, by the way, right?

168
00:10:18.087 --> 00:10:20.125
It's a hack, but it is what it is.

169
00:10:20.125 --> 00:10:24.915
&gt;&gt; Speaker 4: How would you handle if
you're trying to figure out within

170
00:10:24.915 --> 00:10:26.093
the WebView?

171
00:10:26.093 --> 00:10:30.681
&gt;&gt; Maximiliano Firtman: Okay, so if you
wanna know if it's in the WebView, well,

172
00:10:30.681 --> 00:10:35.378
you may not be able to use this
to see if you're in a WebView.

173
00:10:35.378 --> 00:10:38.757
So you wanna know if you're in Facebook,
for example, on TikTok,

174
00:10:38.757 --> 00:10:40.015
or something like that.

175
00:10:40.015 --> 00:10:43.615
The way to detect that is
through the user agent.

176
00:10:43.615 --> 00:10:49.472
So when you are in TikTok, actually,
if you try to Google that,

177
00:10:49.472 --> 00:10:55.451
we should be able to get an answer
like TikTok WebView user agent.

178
00:10:59.323 --> 00:11:01.527
&gt;&gt; Maximiliano Firtman: We
should find the user agent, so

179
00:11:01.527 --> 00:11:04.608
actually they typically
are something here.

180
00:11:04.608 --> 00:11:06.571
It's the BytedanceWebview.

181
00:11:06.571 --> 00:11:09.802
So then you use navigator.useragent, and

182
00:11:09.802 --> 00:11:13.994
you check if the user agent
contains BytedanceWebview,

183
00:11:13.994 --> 00:11:19.860
that's a substring within that string,
it will tell you that you're inside TikTok.

184
00:11:19.860 --> 00:11:24.088
The problem is that
there is no general way.

185
00:11:24.088 --> 00:11:26.392
So each one will have its own user agent.

186
00:11:26.392 --> 00:11:29.762
So Instagram has its own string.

187
00:11:29.762 --> 00:11:31.903
So it depends on the case, okay?

188
00:11:31.903 --> 00:11:34.501
You need to find and search that manually.

189
00:11:34.501 --> 00:11:37.672
If not, we go back to
the answer of a device library.

190
00:11:37.672 --> 00:11:40.302
WURFL will actually tell you.

191
00:11:40.302 --> 00:11:41.728
They have all the database and

192
00:11:41.728 --> 00:11:44.530
all the heuristic structure
to give you the right answer.

