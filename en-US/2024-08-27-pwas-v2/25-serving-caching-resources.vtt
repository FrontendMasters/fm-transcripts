WEBVTT

1
00:00:00.160 --> 00:00:03.959
&gt;&gt; Maximiliano Firtman: Let's go over
the three most common cache serving

2
00:00:03.959 --> 00:00:05.400
strategies.

3
00:00:05.400 --> 00:00:08.870
So let's say you downloaded all the files.

4
00:00:08.870 --> 00:00:12.090
Now you're ready to serve those files,
and we will do that in our code.

5
00:00:13.330 --> 00:00:20.441
In fact, let's do that directly so
we can actually see this work.

6
00:00:20.441 --> 00:00:23.751
So you can use self or
globalThis remember is the same.

7
00:00:23.751 --> 00:00:26.724
So I can add an event listener and

8
00:00:26.724 --> 00:00:32.881
do something when this service
worker is installed, okay?

9
00:00:32.881 --> 00:00:35.701
So here I can go and
talk to the cache API.

10
00:00:36.931 --> 00:00:42.946
The cache API work like this,
it's caches.open with a name.

11
00:00:42.946 --> 00:00:47.186
So this is my PWA,
it's a folder name within your cache.

12
00:00:48.576 --> 00:00:54.128
This is promise-based, so
we can use async/await,

13
00:00:54.128 --> 00:00:57.869
if you're used to that or just then,

14
00:00:57.869 --> 00:01:03.438
we receive the cache object and
then we can, add URLs.

15
00:01:03.438 --> 00:01:06.769
So I can pass an array of
URLs that I can create here.

16
00:01:09.209 --> 00:01:15.059
I can pass an array of URLs,
URL that I wanna cache.

17
00:01:15.059 --> 00:01:19.789
So what are the files that I need
to render my web app offline?

18
00:01:19.789 --> 00:01:21.076
Index.html.

19
00:01:23.126 --> 00:01:27.295
&gt;&gt; Maximiliano Firtman: App.js,
styles.css, I'm not saying this is

20
00:01:27.295 --> 00:01:32.168
completely okay, okay, but
&gt;&gt; Maximiliano Firtman: Do you understand

21
00:01:32.168 --> 00:01:33.173
what I'm doing?

22
00:01:33.173 --> 00:01:37.443
So I'm just saying, hey,
when the service worker is installed,

23
00:01:37.443 --> 00:01:39.369
I want you to open a new cache.

24
00:01:39.369 --> 00:01:41.344
Actually, it's open or create, so

25
00:01:41.344 --> 00:01:44.285
if it's not created it will
create one at that moment.

26
00:01:44.285 --> 00:01:50.163
Open pwa and when you when it's
open to that cache add yours.

27
00:01:50.163 --> 00:01:53.217
I can use async await also here.

28
00:01:55.167 --> 00:01:58.840
&gt;&gt; Maximiliano Firtman: And this is going
to go and grab these three resources and

29
00:01:58.840 --> 00:02:03.296
store them in the cache that's the goal,
I'm storing the assets,

30
00:02:03.296 --> 00:02:05.241
caching the assets.

31
00:02:05.241 --> 00:02:10.233
This is known as pre-fetching the assets.

32
00:02:13.116 --> 00:02:16.841
&gt;&gt; Speaker 2: You wouldn't add
the web manifest file though?

33
00:02:18.051 --> 00:02:18.933
&gt;&gt; Maximiliano Firtman: That's
a good question,

34
00:02:18.933 --> 00:02:20.141
should I add the web manifest file?

35
00:02:20.141 --> 00:02:22.972
I don't need to because my
web app is not using it.

36
00:02:22.972 --> 00:02:26.182
If the browser needed,
the browser will have its own cache.

37
00:02:26.182 --> 00:02:29.588
The same happened with
the service worker itself, so

38
00:02:29.588 --> 00:02:32.692
the browser will cache
it in a different place.

39
00:02:32.692 --> 00:02:36.540
I mean, if I can add it, but
yeah, I'm not sure I need it.

40
00:02:36.540 --> 00:02:38.784
Okay, if I try to-, well,

41
00:02:38.784 --> 00:02:44.933
first let me remove this because if
not I will never see anything, okay?

42
00:02:44.933 --> 00:02:47.983
So let me comment that
fetch event handler.

43
00:02:47.983 --> 00:02:50.413
By the way, if I refresh, will it be gone?

44
00:02:51.753 --> 00:02:52.383
The problem?

45
00:02:53.453 --> 00:02:58.023
But if I refresh I still see,
hey, he, he, he.

46
00:02:58.023 --> 00:03:03.174
Because I need to wait for the new service
worker to appear, so let's keep waiting.

47
00:03:04.224 --> 00:03:07.029
Refresh, and now I'm getting 404,
which is correct,

48
00:03:07.029 --> 00:03:09.742
because I'm not in the route,
okay, and now I'm back.

49
00:03:09.742 --> 00:03:14.024
Now, didn't install the assets,
how do I know?

50
00:03:14.024 --> 00:03:17.453
For that, in the application tab,

51
00:03:17.453 --> 00:03:23.589
we go to the Storage section and
we look for Cache storage.

52
00:03:23.589 --> 00:03:27.406
I open Cache storage and
I do have my PWA folder,

53
00:03:27.406 --> 00:03:31.419
when I go there I have the three files.

54
00:03:31.419 --> 00:03:35.699
So now my assets
are installed client side.

55
00:03:35.699 --> 00:03:38.263
It's as easy as this, okay?

56
00:03:38.263 --> 00:03:41.480
You just install the files.

57
00:03:41.480 --> 00:03:46.723
So, what happens now if I go and
go offline?

58
00:03:48.343 --> 00:03:54.169
I already have the files, so
when I reload when I'm offline,

59
00:03:54.169 --> 00:04:00.033
I'm still seeing the offline message,
why is that?

60
00:04:00.033 --> 00:04:03.257
Because I'm cashing the files,
but I'm not serving the files.

61
00:04:03.257 --> 00:04:07.353
The service worker is not
doing anything automatically.

62
00:04:07.353 --> 00:04:12.043
Okay you have a file, it's your problem,
I don't know why you need that file,

63
00:04:12.043 --> 00:04:13.795
it's not my problem, okay.

64
00:04:13.795 --> 00:04:19.627
I cache them to the service
worker is a very low level API.

65
00:04:21.308 --> 00:04:25.668
So we need to serve now, that's the last
step, we need to serve the files.

66
00:04:25.668 --> 00:04:28.848
To serve in the files
now we can cover that.

67
00:04:28.848 --> 00:04:32.557
There are infinite strategies, but there
are three that are the most important one,

68
00:04:32.557 --> 00:04:33.244
most used one.

69
00:04:33.244 --> 00:04:39.228
Cache first, network first,
stale while revalidate.

70
00:04:39.228 --> 00:04:42.362
So let's go one by one,
then we can use one or the other.

71
00:04:43.972 --> 00:04:46.072
What is this,
let's talk about cache first.

72
00:04:46.072 --> 00:04:49.168
I mean the name give us
a hint about the idea.

73
00:04:49.168 --> 00:04:53.841
But this is the structure so
you have your PWA one,

74
00:04:53.841 --> 00:04:57.188
the PWA needs a file, okay, a CSS.

75
00:04:57.188 --> 00:05:01.922
So it makes a request, the service worker
is drop in the request and say wait,

76
00:05:01.922 --> 00:05:05.557
wait, wait, wait,
I don't want you to go to the network.

77
00:05:05.557 --> 00:05:09.230
Let's first check,
let's search in the cache,

78
00:05:09.230 --> 00:05:13.627
if I have the file that
you are requesting or not.

79
00:05:13.627 --> 00:05:16.637
If I have the file,
it is known as a cache hit.

80
00:05:16.637 --> 00:05:20.824
I'm responding with the cache response,
okay?

81
00:05:20.824 --> 00:05:22.707
So what you're expecting?

82
00:05:22.707 --> 00:05:26.097
It's in the cache, okay,
grab it here you have it from the cache.

83
00:05:26.097 --> 00:05:28.385
But maybe it's not in the cache,

84
00:05:28.385 --> 00:05:33.209
because maybe I don't have that file
that JavaScript is requesting or

85
00:05:33.209 --> 00:05:36.984
CSS is requesting, in that case,
it's a cache miss.

86
00:05:36.984 --> 00:05:39.746
So I forward the request to the network,
and

87
00:05:39.746 --> 00:05:42.370
then the response will go back to the PWA.

88
00:05:43.530 --> 00:05:47.370
So it's called cache first,
because cache has priority.

89
00:05:47.370 --> 00:05:51.628
If it's in the cache, I use the cache
version, if it's not in the cache,

90
00:05:51.628 --> 00:05:53.980
I go to the network, does it make sense?

91
00:05:53.980 --> 00:05:56.260
Do you understand the idea, the process?

92
00:05:56.260 --> 00:05:59.103
What's the advantage of this performance?

93
00:06:00.604 --> 00:06:05.204
Because if I have it in the cache
is always faster than the network.

94
00:06:05.204 --> 00:06:10.932
The network has latency, I mean, looking
into a local database also has a latency,

95
00:06:10.932 --> 00:06:14.242
but the difference is
probably around 500x,

96
00:06:14.242 --> 00:06:19.704
1 milliseconds versus 500 milliseconds,
if you're lucky.

97
00:06:19.704 --> 00:06:22.674
Okay, so
that's why it's better to use the cache.

98
00:06:22.674 --> 00:06:26.720
The problem with that had to
do with updating the content,

99
00:06:26.720 --> 00:06:30.004
because I always have
an old version maybe.

100
00:06:30.004 --> 00:06:34.351
I'm not going to a server, so I don't
know if it has changed in the server,

101
00:06:34.351 --> 00:06:35.564
make sense?

102
00:06:35.564 --> 00:06:37.891
Yeah, so if you wanna implement this,

103
00:06:37.891 --> 00:06:40.853
I can write it from scratch
because I've done it so

104
00:06:40.853 --> 00:06:45.662
many times that I know the code, but I
don't wanna spend too much time with this.

105
00:06:45.662 --> 00:06:48.592
We are not focusing on service
workers in this workshop.

106
00:06:48.592 --> 00:06:51.632
I have a snippet here ready to copy and
paste.

107
00:06:51.632 --> 00:06:55.370
So if you go to snippets.txt,
we already done the installation part, so

108
00:06:55.370 --> 00:06:57.132
we don't need to do that.

109
00:06:57.132 --> 00:07:00.868
Here I have the cache first strategy,
so I will just copy that one and

110
00:07:00.868 --> 00:07:03.292
then explain it, it's not a big deal.

111
00:07:03.292 --> 00:07:07.772
But anyway, it's already commented,
so it's simple to read.

112
00:07:07.772 --> 00:07:14.052
Remember the event respondwith I used
before for responding with a fake answer?

113
00:07:14.052 --> 00:07:18.010
Well, instead of doing that,
I'm responding with a promise.

114
00:07:18.010 --> 00:07:23.499
Caches.match, will search in the cache,
and then it can give me a response,

115
00:07:23.499 --> 00:07:27.996
or it can be undefined,
if it finds the response or not.

116
00:07:27.996 --> 00:07:32.483
So if I do have a response, I'm returning
with that response, returning to who,

117
00:07:32.483 --> 00:07:33.466
to respondwith.

118
00:07:34.766 --> 00:07:40.442
So if it's a cache hit, I'm giving that
response from the cache to respondwith.

119
00:07:40.442 --> 00:07:46.002
If it's not in the cache,
I'm returning a fetch to respondwith.

120
00:07:46.002 --> 00:07:50.512
I'm responding with a fetch, a fetch
is a fetch API to go to the network.

121
00:07:50.512 --> 00:07:54.964
This is kind of in the weeds,
but I'm curious about line 14,

122
00:07:54.964 --> 00:07:59.005
you're passing
the event.request object to it.

123
00:07:59.005 --> 00:08:03.295
But just off the top of your head,
the .match method,

124
00:08:03.295 --> 00:08:06.195
that always takes a request object.

125
00:08:06.195 --> 00:08:08.765
A request,
you can also pass a URL, actually.

126
00:08:08.765 --> 00:08:11.855
It accepts the strings,
the URL, or a request object.

127
00:08:11.855 --> 00:08:16.589
So actually,
the cache storage is key-based, and

128
00:08:16.589 --> 00:08:19.178
the key is the HTTP request.

129
00:08:20.358 --> 00:08:23.284
&gt;&gt; Maximiliano Firtman: The request
option that includes a URL, but

130
00:08:23.284 --> 00:08:26.931
it can contain other
properties like headers, okay?

131
00:08:26.931 --> 00:08:30.294
If you wanna get more
into the cache storage,

132
00:08:30.294 --> 00:08:35.074
you can check the browser web
storage course at Frontend Masters

133
00:08:35.074 --> 00:08:40.385
where we cover that API in details,
okay, the storage API.

134
00:08:40.385 --> 00:08:44.355
So yeah, there is a lot to learn
in the web platform, right?

135
00:08:44.355 --> 00:08:48.031
So now, let me go back here,
if I refresh, first,

136
00:08:48.031 --> 00:08:52.245
I need to make sure that
the new code is in place, okay?

137
00:08:52.245 --> 00:08:55.075
So keep waiting, okay?

138
00:08:55.075 --> 00:08:59.832
So okay, I'm refreshing, I guess that
everything is there, let's try offline,

139
00:08:59.832 --> 00:09:00.845
I click Offline.

140
00:09:00.845 --> 00:09:04.495
Remember, this is simulator,
I can also try to stop the server.

141
00:09:05.495 --> 00:09:09.490
If I refresh, cross your fingers,
it's working, but

142
00:09:09.490 --> 00:09:12.135
I didn't mark offline, by the way.

143
00:09:12.135 --> 00:09:14.155
It's not working, you say,
come on, what's going on?

144
00:09:16.395 --> 00:09:19.860
Let's go to the console,
I'm getting an error fail to fetch.

145
00:09:19.860 --> 00:09:25.342
But actually, line 21 is here.

146
00:09:25.342 --> 00:09:32.210
Yeah, actually, the problem that I
received is that it failed to fetch.

147
00:09:32.210 --> 00:09:35.880
When you say, why did it want to fetch?

148
00:09:35.880 --> 00:09:40.066
Because that's for the network
of course because I was offline,

149
00:09:40.066 --> 00:09:42.732
it couldn't fetch, why?

150
00:09:42.732 --> 00:09:48.231
Because I have a problem, actually, I
already hinted that this code wasn't 100%

151
00:09:48.231 --> 00:09:53.220
right I have a problem here, let's see
if someone realizes what's going on.

152
00:09:55.207 --> 00:09:59.776
&gt;&gt; Speaker 3: So this is my question,
is it matching strings on the URL?

153
00:09:59.776 --> 00:10:02.625
&gt;&gt; Maximiliano Firtman: Yeah,
it's matching a string with URLs.

154
00:10:04.209 --> 00:10:07.056
&gt;&gt; Maximiliano Firtman: So the problem
is that it's trying to go to an error.

155
00:10:07.056 --> 00:10:10.056
So it's not in the cache,
so it's a cache miss.

156
00:10:11.566 --> 00:10:14.546
Why it's not finding the HTML?

157
00:10:14.546 --> 00:10:16.851
Actually, the HTML is
the one that is not there.

158
00:10:18.183 --> 00:10:20.979
&gt;&gt; Maximiliano Firtman: Because
it shouldn't be index.html,

159
00:10:20.979 --> 00:10:23.148
this is a pretty common error.

160
00:10:23.148 --> 00:10:26.439
Index.html is the name of the file,

161
00:10:26.439 --> 00:10:32.863
not the actual HTTP request that we make,
does it make sense?

162
00:10:32.863 --> 00:10:37.007
The HTTP request is actually /.

163
00:10:39.023 --> 00:10:45.853
&gt;&gt; Maximiliano Firtman: The URL, not the
files on the server, that was wrong, okay?

164
00:10:45.853 --> 00:10:48.603
So again, let's try again,
should I refresh?

165
00:10:48.603 --> 00:10:53.131
Well, actually, I'm offline, so
I need to go online, okay, refresh.

166
00:10:53.131 --> 00:10:56.560
Now I need to wait for the new
service worker to be activated, okay.

167
00:10:56.560 --> 00:11:01.647
Now I refresh again,
just in case, and then offline,

168
00:11:01.647 --> 00:11:06.193
refresh, and again,
you'll say, is it done?

169
00:11:06.193 --> 00:11:09.651
Well, let's check the local storage,

170
00:11:09.651 --> 00:11:14.746
I'm sorry the cache storage,
the cache storage is empty.

171
00:11:14.746 --> 00:11:18.080
So there might be another problem here.

172
00:11:19.830 --> 00:11:23.285
&gt;&gt; Maximiliano Firtman: Look for
it offline, refresh, there we are.

173
00:11:23.285 --> 00:11:24.965
Okay, I'm service working, ready to serve.

174
00:11:24.965 --> 00:11:29.835
I'm going to Application &gt; Cache storage
&gt; PWA, and now I'm getting what I want.

175
00:11:31.215 --> 00:11:35.847
Okay, so the forward slash is cached
that here it says it's text, HTML,

176
00:11:35.847 --> 00:11:39.804
I can click it, I can see the preview
the things that my font is so

177
00:11:39.804 --> 00:11:45.668
big that I've not seen the preview, but
I can see the preview there at the bottom.

178
00:11:45.668 --> 00:11:50.829
So let's try one more time,
we go to service worker, we go offline.

179
00:11:50.829 --> 00:11:54.188
I don't need upload on reload,
it doesn't matter, because we're offline.

180
00:11:54.188 --> 00:11:59.918
If I refresh, well, now it's working.

181
00:11:59.918 --> 00:12:03.206
So, is it ready?

182
00:12:03.206 --> 00:12:07.535
Well, actually there is one more thing
that I could do before saying it's ready,

183
00:12:07.535 --> 00:12:09.406
and its offline capable.

184
00:12:09.406 --> 00:12:13.701
Actually my HTML,
it's also pointing to this library,

185
00:12:13.701 --> 00:12:18.716
I'm not caching the library,
Does that make sense?

186
00:12:18.716 --> 00:12:22.356
So also I should check in my CSS,
If I have another file that I need,

187
00:12:22.356 --> 00:12:23.406
which file I need?

188
00:12:25.216 --> 00:12:31.076
This web font, if I don't cache that,
maybe you say, but it worked.

189
00:12:31.076 --> 00:12:35.866
Yeah, because also there is another cache,
the browser's cache that had that file.

190
00:12:35.866 --> 00:12:40.282
But maybe in a month,
if I open the PWA, it has my files but

191
00:12:40.282 --> 00:12:42.955
not the font, does it make sense?

192
00:12:42.955 --> 00:12:48.273
Because we have my cache and then we
have the standard normal browser cache,

193
00:12:48.273 --> 00:12:52.855
so sometimes maybe that file was
already in the standard cache.

194
00:12:52.855 --> 00:12:56.176
So I also need to add all
the assets that you need,

195
00:12:56.176 --> 00:13:00.865
even if they are from other servers,
does it make sense?

196
00:13:00.865 --> 00:13:03.997
Can I cache files that
are not part of my service?

197
00:13:03.997 --> 00:13:05.304
Yes, you can.

198
00:13:06.535 --> 00:13:10.617
&gt;&gt; Maximiliano Firtman: Yes, you can, so
I have that one and I also have this one.

199
00:13:10.617 --> 00:13:13.151
I think with that, we should be good.

200
00:13:14.790 --> 00:13:15.509
&gt;&gt; Maximiliano Firtman: Does
it make sense?

201
00:13:15.509 --> 00:13:19.287
So add all your assets,
not just the assets from your server.

202
00:13:19.287 --> 00:13:22.172
Everything you need to render
at least what you want offline.

