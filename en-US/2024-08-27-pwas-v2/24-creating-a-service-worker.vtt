WEBVTT

1
00:00:00.032 --> 00:00:03.782
&gt;&gt; Maximiliano Firtman: Let's go to Code,
and let's write our first service worker.

2
00:00:03.782 --> 00:00:06.602
So first, to create a service worker,

3
00:00:06.602 --> 00:00:10.282
a service worker is just a file,
so just a new file.

4
00:00:10.282 --> 00:00:12.834
I will call that file serviceworker.js.

5
00:00:12.834 --> 00:00:15.514
It's a JavaScript file, okay?

6
00:00:15.514 --> 00:00:18.800
And then will say console.log
I'm a service worker,

7
00:00:20.566 --> 00:00:21.776
&gt;&gt; Maximiliano Firtman: Ready to serve,

8
00:00:21.776 --> 00:00:23.162
whatever, okay?

9
00:00:23.162 --> 00:00:25.850
It's just some code.

10
00:00:25.850 --> 00:00:29.441
So, how can I include that file?

11
00:00:29.441 --> 00:00:33.197
Well, I can go to my index.html and
add a script tag, but

12
00:00:33.197 --> 00:00:36.815
that's not how you register
a service worker, okay?

13
00:00:36.815 --> 00:00:40.336
It's just a normal script, so
that's not how that works.

14
00:00:40.336 --> 00:00:44.871
What I need to do is, I can write a script
here, or I can create another script and

15
00:00:44.871 --> 00:00:45.837
write it there.

16
00:00:45.837 --> 00:00:47.894
It doesn't matter.

17
00:00:47.894 --> 00:00:54.175
navigator.serviceWorker, be
careful with capital W,

18
00:00:54.175 --> 00:00:59.183
.register, and
we pass the name of the file.

19
00:00:59.183 --> 00:01:04.337
This is really important
by default the scope

20
00:01:04.337 --> 00:01:11.119
of the service worker is
the folder in which it's defined,

21
00:01:11.119 --> 00:01:17.221
which means don't do this,
don't create a folder,

22
00:01:17.221 --> 00:01:21.170
scripts, and put the file there.

23
00:01:21.170 --> 00:01:26.182
If you do that,
then the scope will be the scripts folder.

24
00:01:26.182 --> 00:01:29.839
So we'll responsible for
that folder only, okay, make sense?

25
00:01:29.839 --> 00:01:33.649
That's a common error,
a common mistake that you make initially.

26
00:01:33.649 --> 00:01:37.506
So now, typically,
the service worker goes to the root.

27
00:01:37.506 --> 00:01:41.519
I mean, you can override that, but
it's kind of complicated, it doesn't matter.

28
00:01:41.519 --> 00:01:44.039
It's one file, and that's all.

29
00:01:44.039 --> 00:01:48.300
By the way, if you wanna use ES module,
ECMAScript module, by default,

30
00:01:48.300 --> 00:01:51.756
it's not a module, so
you cannot import from other files.

31
00:01:51.756 --> 00:01:54.078
It's a worker, so
you can use importScripts API,

32
00:01:54.078 --> 00:01:56.023
I'm not sure if you have used that before.

33
00:01:56.023 --> 00:02:01.804
But this is a web worker API,
so it's been there for a while.

34
00:02:01.804 --> 00:02:05.461
But it's not really ES modules.

35
00:02:05.461 --> 00:02:10.284
If you wanna use ES module or
treat that JavaScript as a module,

36
00:02:10.284 --> 00:02:14.925
when you register that,
you have to add another argument and

37
00:02:14.925 --> 00:02:21.719
you say type: "module",
&gt;&gt; Maximiliano Firtman: Like that,

38
00:02:21.719 --> 00:02:25.372
or I did It didn't close
the string like that, okay?

39
00:02:25.372 --> 00:02:29.535
So in that case, now that service worker,
it will be treated as

40
00:02:29.535 --> 00:02:34.106
an ECMAScript module, and
it can import from other modules, okay?

41
00:02:34.106 --> 00:02:37.691
No need for today's sample, okay?

42
00:02:37.691 --> 00:02:42.309
I was just showing you the idea.

43
00:02:42.309 --> 00:02:43.085
I will just comment that.

44
00:02:43.085 --> 00:02:46.996
I mean, it's not gonna make
any difference, but anyway.

45
00:02:46.996 --> 00:02:48.555
So, is just that?

46
00:02:48.555 --> 00:02:49.399
Just that?

47
00:02:49.399 --> 00:02:50.945
Are we ready?

48
00:02:50.945 --> 00:02:55.623
If I go to localhost:3000,
I don't see any difference, okay?

49
00:02:55.623 --> 00:02:59.982
If I inspect and go to the console, well,
I'm getting an error for favicon,

50
00:02:59.982 --> 00:03:01.842
which is okay, it's not a problem.

51
00:03:01.842 --> 00:03:05.953
[LAUGH] But here, it says,
I'm a service worker ready to serve.

52
00:03:05.953 --> 00:03:08.073
So somehow it appeared.

53
00:03:08.073 --> 00:03:11.880
But something even better is
to go to the Application tab.

54
00:03:11.880 --> 00:03:16.110
And we already know the Manifest section,
there is another section for

55
00:03:16.110 --> 00:03:17.244
service workers.

56
00:03:17.244 --> 00:03:21.986
And here, you can see that
the service worker 16,005 and

57
00:03:21.986 --> 00:03:24.058
is activated and running.

58
00:03:24.058 --> 00:03:26.357
And this is my service worker.

59
00:03:26.357 --> 00:03:31.522
So now,
I have a separate thread that can see all

60
00:03:31.522 --> 00:03:38.637
the network requests that I'm doing and
I can also serve assets.

61
00:03:38.637 --> 00:03:43.756
So now, something interesting
that I have here in the service

62
00:03:43.756 --> 00:03:49.180
worker debugging section is that
I do have an offline simulator.

63
00:03:49.180 --> 00:03:54.026
So instead of turning off the WiFi or
turning off the server, I can click here,

64
00:03:54.026 --> 00:03:56.610
Offline, refresh and see what happens.

65
00:03:56.610 --> 00:03:59.256
So is it offline capable?

66
00:03:59.256 --> 00:04:01.547
No, look at that.

67
00:04:01.547 --> 00:04:07.944
That's my default offline new
page that Chrome is implemented.

68
00:04:07.944 --> 00:04:08.982
You are offline, okay?

69
00:04:08.982 --> 00:04:12.271
We don't see, unfortunately,
I'm sorry little, you're gone.

70
00:04:12.271 --> 00:04:17.479
I mean, you have your days counted,
but at least you have that, okay?

71
00:04:17.479 --> 00:04:19.945
But it's not working offline then.

72
00:04:19.945 --> 00:04:24.844
I mean, I'm getting something, yeah, I'm
getting something better than before, but

73
00:04:24.844 --> 00:04:27.234
the website is not working offline, okay?

74
00:04:27.234 --> 00:04:29.489
I'm getting a better response.

75
00:04:29.489 --> 00:04:36.121
So now, if i even open the the app from
here, but this was the previous loading.

76
00:04:36.121 --> 00:04:42.521
Let me open it up again, so this is what
you see, okay, but I think it was a bug.

77
00:04:42.521 --> 00:04:46.992
For a second,
I thought we had just found a bug.

78
00:04:46.992 --> 00:04:52.545
But the app is not really available
offline, because something important for

79
00:04:52.545 --> 00:04:57.436
the service workers is that they
don't do anything automatically.

80
00:04:57.436 --> 00:05:01.218
So yeah, I have a service worker,
I have a thread, but

81
00:05:01.218 --> 00:05:05.097
it's just sitting ducks there,
it's doing nothing.

82
00:05:05.097 --> 00:05:10.207
I need to manually write
my service worker.

83
00:05:10.207 --> 00:05:18.123
So that's why you should
first cache the resources.

84
00:05:18.123 --> 00:05:22.587
So the service worker has a local cache,
it's called the cache storage API.

85
00:05:22.587 --> 00:05:27.971
We can cache all or
some of the reasons you pick, okay?

86
00:05:27.971 --> 00:05:32.537
Everything is based in
JavaScript promises.

87
00:05:32.537 --> 00:05:35.601
Typically, we prefetch on installation,
so we can wait for

88
00:05:35.601 --> 00:05:38.917
the service worker to be installed,
and we prefetch the assets.

89
00:05:38.917 --> 00:05:40.776
Okay, I need this image.

90
00:05:40.776 --> 00:05:47.924
I need the CSS, I need this HTML, and
then we can also cache on request.

91
00:05:47.924 --> 00:05:50.204
So you know what?
I'm not going to cache anything.

92
00:05:50.204 --> 00:05:54.691
When the web app needs something,
I will go to a network and

93
00:05:54.691 --> 00:05:57.263
make a copy of that for next time.

94
00:05:57.263 --> 00:06:02.134
Okay, so different patterns that we
have available for caching files.

95
00:06:02.134 --> 00:06:04.378
And this is known as
the app shell pattern.

96
00:06:04.378 --> 00:06:09.250
It's a design pattern where when
you install a PWA, you go and

97
00:06:09.250 --> 00:06:13.293
grab all the assets that
will render the app shell.

98
00:06:13.293 --> 00:06:16.469
If you're using Angular, for
example, Angular supports PWAs.

99
00:06:16.469 --> 00:06:19.290
There is a plug-in in Angular,
I'm not sure.

100
00:06:19.290 --> 00:06:23.123
For those of you that know Angular,
you know what I'm talking about.

101
00:06:23.123 --> 00:06:26.700
It's a schematic actually,
you can add a PWA schematic,

102
00:06:26.700 --> 00:06:29.335
and there is another one for
the app shell.

103
00:06:29.335 --> 00:06:35.753
So then you can create the app shell that
then the service worker that Angular

104
00:06:35.753 --> 00:06:42.681
creates will download all the assets to
render the shell without the data, okay?

105
00:06:42.681 --> 00:06:43.987
It's just that.

106
00:06:43.987 --> 00:06:47.567
And then you need to
serve those resources.

107
00:06:47.567 --> 00:06:50.553
In the service worker, we respond for

108
00:06:50.553 --> 00:06:54.202
every request that PWA make,
every request.

109
00:06:54.202 --> 00:06:56.043
In fact, let me prove that.

110
00:06:56.043 --> 00:06:59.223
Before actually making a service
worker that actually works,

111
00:06:59.223 --> 00:07:00.904
let's add something else here.

112
00:07:00.904 --> 00:07:02.228
I'm going to add this.

113
00:07:02.228 --> 00:07:07.117
First, the service worker
is not the window.

114
00:07:07.117 --> 00:07:08.805
Let me prove that.

115
00:07:08.805 --> 00:07:12.795
It doesn't have access
to the user interface.

116
00:07:12.795 --> 00:07:14.321
Let's refresh here.

117
00:07:14.321 --> 00:07:20.105
So for example, if I say this here is the
window, okay, you have probably seen that.

118
00:07:20.105 --> 00:07:24.981
But I'm not sure if you know,
when you are executing code in DevTools,

119
00:07:24.981 --> 00:07:29.301
you have a selector here where
you can select another context.

120
00:07:29.301 --> 00:07:32.251
For example, I have the service
worker that is currently activated.

121
00:07:32.251 --> 00:07:38.975
So I can go now to that thread and I can
execute now code under the serviceWorker.

122
00:07:38.975 --> 00:07:40.861
And that's the serviceWorkerGlobalScope.

123
00:07:40.861 --> 00:07:44.885
If I try to make an alert,
hello, it doesn't work.

124
00:07:44.885 --> 00:07:47.917
It says, I don't know what an alert is.

125
00:07:47.917 --> 00:07:49.821
Because I'm in the serviceWorker,
it has no UI.

126
00:07:49.821 --> 00:07:53.551
If I go back to top, of course it works.

127
00:07:53.551 --> 00:08:00.126
So you can change the execution
context based on that, okay?

128
00:08:00.126 --> 00:08:05.550
So, what we can do is we can add
an event listener called fetch.

129
00:08:07.679 --> 00:08:10.847
&gt;&gt; Maximiliano Firtman: I'm attaching
this to the global object that here is

130
00:08:10.847 --> 00:08:11.711
called "self".

131
00:08:11.711 --> 00:08:16.376
Or now with ECMAScript,
you can use globalThis.

132
00:08:16.376 --> 00:08:18.663
If you don't know about globalThis,

133
00:08:18.663 --> 00:08:22.236
you can check Professional JS
course in Frontend Masters,

134
00:08:22.236 --> 00:08:27.039
where we cover all the latest stuff in
ECMAScript, where we cover globalThis.

135
00:08:27.039 --> 00:08:29.232
But if not, you can use "self".

136
00:08:29.232 --> 00:08:34.406
So I can say, console.log File request.

137
00:08:34.406 --> 00:08:40.401
Well, actually, more than file,
HTTP requested.

138
00:08:41.928 --> 00:08:45.438
&gt;&gt; Maximiliano Firtman: So now,
first, before actually reloading,

139
00:08:45.438 --> 00:08:49.944
what do you think that will
happen with the serviceWorker?

140
00:08:49.944 --> 00:08:57.041
Will take my new service worker, because
the service worker is already installed?

141
00:08:57.041 --> 00:09:00.064
&gt;&gt; Student: You have to disable
the cache in the browser.

142
00:09:00.064 --> 00:09:02.011
&gt;&gt; Maximiliano Firtman: But
you will see what I need to do.

143
00:09:02.011 --> 00:09:05.582
But first, it's important to see
if you understand the problem.

144
00:09:05.582 --> 00:09:08.598
The serviceWorker is always
installed in users devices.

145
00:09:08.598 --> 00:09:14.713
So if you change it's server side,
by default, it's not going to take it.

146
00:09:14.713 --> 00:09:16.267
It's using the old one, okay?

147
00:09:16.267 --> 00:09:20.525
It's like my iPhone,
where I don't update my apps.

148
00:09:20.525 --> 00:09:21.760
I still have the old one.

149
00:09:21.760 --> 00:09:24.170
It doesn't matter if you
change it in the app store.

150
00:09:24.170 --> 00:09:28.504
So, there is an update process,
an update algorithm for the serviceWorker.

151
00:09:28.504 --> 00:09:33.104
Actually, what will happen is that
when you open the app next time or

152
00:09:33.104 --> 00:09:38.442
when you reload, it will check in
the server and download the serviceWorker.

153
00:09:38.442 --> 00:09:42.111
The browser is doing that, and
it will check byte by byte.

154
00:09:42.111 --> 00:09:46.573
So it will do a byte by byte comparison
with the serviceWorker that is

155
00:09:46.573 --> 00:09:49.017
installed to see if it's is new one.

156
00:09:49.017 --> 00:09:53.659
If it's a new one,
it's not going to push this one, okay?

157
00:09:53.659 --> 00:09:57.467
This one will be installed and
it will be waiting for be activated,

158
00:09:57.467 --> 00:10:00.329
because this one is already active,
the old one.

159
00:10:00.329 --> 00:10:03.677
And in the current navigation,
the old one is in charge.

160
00:10:03.677 --> 00:10:09.509
But when you close the app, 40 seconds
has passed and this one is discarded.

161
00:10:09.509 --> 00:10:15.667
The next time, the new one is going to
be the one that be activated, okay?

162
00:10:15.667 --> 00:10:20.171
I'm just simplifying here a little bit
this, because service worker is a complex

163
00:10:20.171 --> 00:10:24.624
concept, so it takes time, but just to
give you quick ideas of what's going on.

164
00:10:24.624 --> 00:10:29.928
That happens unless you
have the DevTools open

165
00:10:29.928 --> 00:10:35.644
with this check mark checked,
update on reload.

166
00:10:35.644 --> 00:10:40.093
When you hit update on reload then this
algorithm that i explained is not gonna

167
00:10:40.093 --> 00:10:40.647
happen.

168
00:10:40.647 --> 00:10:45.028
You refresh, the service worker
will refresh as well, immediately.

169
00:10:45.028 --> 00:10:48.666
But that's not what will happen in
the real world with real users, okay?

170
00:10:48.666 --> 00:10:49.478
Make sense?

171
00:10:49.478 --> 00:10:55.991
So now if I refresh, I go to the Console,
I'm a service worker, ready to serve.

172
00:10:55.991 --> 00:10:58.152
And now I see nothing.

173
00:10:58.152 --> 00:11:00.035
Why I'm not seeing nothing?

174
00:11:00.035 --> 00:11:02.810
Because it's already registered.

175
00:11:02.810 --> 00:11:07.827
So nothing happens,
because it's already registered, okay?

176
00:11:07.827 --> 00:11:13.035
And now, 6 HTTP files were requested.

177
00:11:13.035 --> 00:11:13.810
Can you see that?

178
00:11:13.810 --> 00:11:18.190
Yes, okay,
can I see which files were requested?

179
00:11:18.190 --> 00:11:21.953
Well, the event,
I can convert this into a template string.

180
00:11:24.551 --> 00:11:28.442
&gt;&gt; Maximiliano Firtman: It has request and
the request has a URL.

181
00:11:30.147 --> 00:11:34.601
&gt;&gt; Maximiliano Firtman: Okay, so
if I refresh, it's not taking this.

182
00:11:34.601 --> 00:11:38.070
But now, look at this,
it says this and then this,

183
00:11:38.070 --> 00:11:41.387
because the new one takes
time to be registered.

184
00:11:41.387 --> 00:11:44.784
Degunning service worker takes
time because you have the old one,

185
00:11:44.784 --> 00:11:47.048
the one that is in memory,
then you refresh,

186
00:11:47.048 --> 00:11:50.698
it's trying to replace the other one,
so there is a life cycle going on.

187
00:11:50.698 --> 00:11:53.893
It's not so simple, so direct as before.

188
00:11:53.893 --> 00:11:59.445
Sometimes they say,
you need to refresh again.

189
00:11:59.445 --> 00:12:03.241
In the Application tab,
you can go here to Service Worker and

190
00:12:03.241 --> 00:12:08.166
you can see that even if you refresh,
there is one that is waiting to activate.

191
00:12:08.166 --> 00:12:12.202
So I'm still working with the old one,
because it's in memory.

192
00:12:12.202 --> 00:12:12.886
Does it make sense?

193
00:12:12.886 --> 00:12:15.726
So it's in memory, so
it's not killing the process.

194
00:12:15.726 --> 00:12:22.713
So unless i hit here, Skip waiting and
now the new one is in place.

195
00:12:22.713 --> 00:12:23.314
Does it make sense?

196
00:12:23.314 --> 00:12:26.083
So it's a complex thing
that you need to try here.

197
00:12:26.083 --> 00:12:31.856
So now, if I refresh, finally,
I'm seeing the request.

198
00:12:31.856 --> 00:12:34.417
And look at this,
this is really interesting,

199
00:12:34.417 --> 00:12:36.538
because I'm seeing all the requests.

200
00:12:36.538 --> 00:12:39.488
And you can see that
it's requesting app.js,

201
00:12:39.488 --> 00:12:43.777
but it's also requesting PWA compat,
that is not really my domain.

202
00:12:43.777 --> 00:12:48.009
So the service worker,
the proxy, it's also seen,

203
00:12:48.009 --> 00:12:51.583
requests that are going somewhere else,
and

204
00:12:51.583 --> 00:12:56.964
that was actually part of the diagram
that we saw before, this one.

205
00:12:56.964 --> 00:13:03.895
So the service worker is seeing
not just my server's request, but

206
00:13:03.895 --> 00:13:09.856
also requests to other places,
okay, and it can reply.

207
00:13:09.856 --> 00:13:16.645
That's the important part in
the name of those servers as well.

208
00:13:16.645 --> 00:13:18.479
How?
I'm going to do this quickly.

209
00:13:18.479 --> 00:13:22.678
This is not a real code,
it's just for testing purposes.

210
00:13:22.678 --> 00:13:25.816
Event has a method,

211
00:13:25.816 --> 00:13:30.619
respond with, respond with.

212
00:13:30.619 --> 00:13:35.982
It accepts an HTTP response or
a promise of a response, okay?

213
00:13:35.982 --> 00:13:39.583
So that means I can
create a new response and

214
00:13:39.583 --> 00:13:43.492
the body of that response can be,
hey, hehe.

215
00:13:45.377 --> 00:13:48.679
&gt;&gt; Maximiliano Firtman: So
now, I'm responding, actually,

216
00:13:48.679 --> 00:13:51.888
to every request with that response.

217
00:13:51.888 --> 00:13:55.531
I'm kind of Express.js here,
so I'm a server now.

218
00:13:55.531 --> 00:14:01.393
I'm creating an HTTP response,
okay, client side.

219
00:14:01.393 --> 00:14:05.712
Because it's a JavaScript client side,
so I don't have Node.js here.

220
00:14:05.712 --> 00:14:09.401
So first, if I refresh,
I'm still not seeing that, because again,

221
00:14:09.401 --> 00:14:11.972
we have the same problem as we saw before,
okay?

222
00:14:11.972 --> 00:14:14.171
We have one waiting for activate.

223
00:14:14.171 --> 00:14:16.079
You can always go to Storage also and

224
00:14:16.079 --> 00:14:20.093
clear everything that will clear
service workers and blah, blah, blah.

225
00:14:20.093 --> 00:14:23.564
But if not, you can skipWaiting, refresh.

226
00:14:23.564 --> 00:14:29.987
And now, I see, hey, hehe,
I'm not even seeing the HTML anymore.

227
00:14:29.987 --> 00:14:34.254
And what about if I try other URL?

228
00:14:34.254 --> 00:14:35.504
Just the same.

229
00:14:35.504 --> 00:14:38.822
Why it's not giving me 404?

230
00:14:38.822 --> 00:14:42.269
Because now the service
worker is in charge.

231
00:14:42.269 --> 00:14:46.361
The service worker is taking
every request to its scope,

232
00:14:46.361 --> 00:14:50.975
which is localhost:3000, and
answering the same thing.

233
00:14:50.975 --> 00:14:56.154
And we can go to the network layer,
the Network tab, refresh, and

234
00:14:56.154 --> 00:15:01.259
let's go to all here, and
I can see the request with the headers.

235
00:15:01.259 --> 00:15:02.345
I'm requesting this.

236
00:15:02.345 --> 00:15:04.924
Here, you can see the status code.
Hey,

237
00:15:04.924 --> 00:15:05.961
you know what?

238
00:15:05.961 --> 00:15:08.271
It wasn't the real server.

239
00:15:08.271 --> 00:15:13.764
It was a service worker, but
it's kind of a metadata hidden there.

240
00:15:13.764 --> 00:15:18.337
It's still a response where
I have all the headers.

241
00:15:18.337 --> 00:15:20.226
I have the response headers, and

242
00:15:20.226 --> 00:15:23.272
of course,
I can customize from the service worker.

243
00:15:23.272 --> 00:15:28.645
But from a network point of view,
it was the server that answered that.

244
00:15:28.645 --> 00:15:32.711
Quick trick, when you reload,
if you press your Shift key, so

245
00:15:32.711 --> 00:15:37.576
Shift+Reload will bypass the service
worker, just's for that reload.

246
00:15:37.576 --> 00:15:40.772
Shift+Reload, I reload service worker.

247
00:15:40.772 --> 00:15:43.717
Shift+Reload, no service worker, okay?

248
00:15:43.717 --> 00:15:46.054
So that's a quick way to,
when you are testing,

249
00:15:46.054 --> 00:15:48.172
you can bypass the service worker quickly.

250
00:15:48.172 --> 00:15:52.138
So you can see that the service
worker is a serious thing.

251
00:15:52.138 --> 00:15:56.079
You can break your website with one line.

252
00:15:56.079 --> 00:16:01.803
One line of wrong service worker code,
and your website is broken.

253
00:16:01.803 --> 00:16:04.662
I cannot even browse my website anymore.

254
00:16:04.662 --> 00:16:06.078
&gt;&gt; Student: More of a curiosity question.

255
00:16:06.078 --> 00:16:14.744
It kind of seems like it's an app-level
client implemented forward proxy.

256
00:16:14.744 --> 00:16:19.931
Have you seen in the wild
service workers being used for

257
00:16:19.931 --> 00:16:24.670
non-PWA purposes,
inspecting from the browser

258
00:16:24.670 --> 00:16:29.400
outgoing requests, or like-
&gt;&gt; Maximiliano Firtman: I mean, you can,

259
00:16:29.400 --> 00:16:33.457
but you can also do it in the main thread.

260
00:16:33.457 --> 00:16:39.265
So I mean, it's not a security risk,
but you can log every request.

261
00:16:39.265 --> 00:16:41.082
You can add a security layer.

262
00:16:41.082 --> 00:16:45.366
The service worker for
performance reasons is being used a lot.

263
00:16:45.366 --> 00:16:46.663
There are a lot of tricks and

264
00:16:46.663 --> 00:16:50.172
design patterns on the web performance
field that can help you with that.

265
00:16:50.172 --> 00:16:55.764
But yeah, but not initially,
okay, with that in mind.

