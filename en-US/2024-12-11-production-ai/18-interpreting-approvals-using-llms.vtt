WEBVTT

1
00:00:00.100 --> 00:00:03.628
&gt;&gt; Scott Moss: We need a function that,
when given a user message, will tell us if

2
00:00:03.628 --> 00:00:07.970
the user approved something or
disapproved something, cuz we don't know.

3
00:00:07.970 --> 00:00:12.002
So it's like, hey, we're gonna make
an LLM call that responds back with

4
00:00:12.002 --> 00:00:16.430
an object that has an approved property
on it, and approved is true or false.

5
00:00:16.430 --> 00:00:20.947
And it's just like,
did the user say they approve or not?

6
00:00:20.947 --> 00:00:23.323
This math reasoning thing,
this is an artifact left over.

7
00:00:23.323 --> 00:00:25.032
I don't know why I left this here.

8
00:00:25.032 --> 00:00:27.618
This is just the name of your schema.

9
00:00:27.618 --> 00:00:31.015
When you give OpenAI API, a schema
like this, you have to give it a name,

10
00:00:31.015 --> 00:00:33.018
you can put whatever you want here.

11
00:00:33.018 --> 00:00:36.168
I guess I copied and pasted this somewhere
and just forgot to take this off, but

12
00:00:36.168 --> 00:00:38.474
yeah, math reason,
you can put whatever you want here.

13
00:00:38.474 --> 00:00:40.218
This is just the name of your schema.

14
00:00:40.218 --> 00:00:43.259
I'll probably change this to approval or
something like that.

15
00:00:43.259 --> 00:00:43.878
It's just for

16
00:00:43.878 --> 00:00:47.187
OpenAI to know what the name of the schema
is for instrumentation purposes.

17
00:00:47.187 --> 00:00:49.508
So yeah, let's go do that.

18
00:00:49.508 --> 00:00:53.069
So we're gonna go into our LLM file.

19
00:00:53.069 --> 00:00:57.795
LLM, we're gonna make a new one up here,

20
00:00:57.795 --> 00:01:01.720
or actually I'll do it down here.

21
00:01:01.720 --> 00:01:10.262
And it is called runApprovalCheck,
&gt;&gt; Scott Moss: And

22
00:01:10.262 --> 00:01:11.502
it's gonna take a user message,

23
00:01:11.502 --> 00:01:17.619
which is gonna be a string,
&gt;&gt; Scott Moss: And

24
00:01:17.619 --> 00:01:21.869
it's just gonna call OpenAI
beta chat completions parse.

25
00:01:21.869 --> 00:01:26.783
So I'm gonna say results

26
00:01:26.783 --> 00:01:36.619
=openai.beta.chat.completions.parse.

27
00:01:36.619 --> 00:01:40.137
The model I'm gonna use this for 4O mini.

28
00:01:45.448 --> 00:01:49.190
&gt;&gt; Scott Moss: I'm gonna
put a temperature on 0.1,

29
00:01:49.190 --> 00:01:52.830
cuz I don't want any randomness here.

30
00:01:52.830 --> 00:01:55.988
For the messages,
I'm gonna make a new user message here.

31
00:01:55.988 --> 00:02:00.352
So role is user content is user message.

32
00:02:05.938 --> 00:02:08.814
&gt;&gt; Scott Moss: And then we need
to give the AI instructions so

33
00:02:08.814 --> 00:02:12.458
we can do that in a system
prompt before the user message.

34
00:02:12.458 --> 00:02:14.867
And then we need to give
it a response format.

35
00:02:14.867 --> 00:02:17.094
And then we need to return whether or
not that was true or not.

36
00:02:17.094 --> 00:02:18.673
So let's do that.

37
00:02:18.673 --> 00:02:21.140
So we'll make a new message at
the beginning of this array.

38
00:02:21.140 --> 00:02:22.302
This will be our system prompt.

39
00:02:22.302 --> 00:02:27.767
So we'll say role system content
are gonna be the instructions.

40
00:02:27.767 --> 00:02:33.691
So you are a helpful

41
00:02:33.691 --> 00:02:37.767
assistant.

42
00:02:37.767 --> 00:02:42.983
Your job is to determine if the

43
00:02:46.349 --> 00:02:51.001
&gt;&gt; Scott Moss: Given user message

44
00:02:51.001 --> 00:02:58.564
indicates an approval or not.

45
00:02:58.564 --> 00:02:59.969
Something like that,
that's probably not good.

46
00:02:59.969 --> 00:03:01.847
What the hell did I put here?

47
00:03:01.847 --> 00:03:04.506
I put, determine if the user
approved the image generation.

48
00:03:04.506 --> 00:03:06.584
If you are not sure,
then it is not approved.

49
00:03:06.584 --> 00:03:07.631
That's so much better.

50
00:03:07.631 --> 00:03:09.700
Let me copy that one [LAUGH].

51
00:03:09.700 --> 00:03:12.287
I think I e-mailed that one and
got it to there.

52
00:03:12.287 --> 00:03:13.159
So I'm gonna do that.

53
00:03:17.770 --> 00:03:21.283
&gt;&gt; Scott Moss: Determine if the user
approved the image generation.

54
00:03:21.283 --> 00:03:23.352
If you're not sure,
then it's not approved.

55
00:03:23.352 --> 00:03:26.647
So I've made this specifically for
image generation, which, honestly,

56
00:03:26.647 --> 00:03:30.059
it doesn't need to be here, because
this has no concept of image generation.

57
00:03:30.059 --> 00:03:31.833
It doesn't know anything about that.

58
00:03:31.833 --> 00:03:33.577
So this probably doesn't mean anything.

59
00:03:33.577 --> 00:03:38.283
I think I put this here because I
was obviously gonna write this for

60
00:03:38.283 --> 00:03:39.747
image generation.

61
00:03:39.747 --> 00:03:42.862
And if the person responded back with
something about image generation and

62
00:03:42.862 --> 00:03:45.197
their approval,
this thing would have been confused.

63
00:03:45.197 --> 00:03:49.101
So I specifically put image generation
here, which would also mean that

64
00:03:49.101 --> 00:03:52.628
eventually I would need a list of
tools that need approvals here.

65
00:03:52.628 --> 00:03:55.470
And then I would loop over those
names here to be whether or

66
00:03:55.470 --> 00:03:59.673
not they approve image generation or this,
or this, or this, so it knows the name of

67
00:03:59.673 --> 00:04:03.675
every tool that needs an approval, but
I only have one, so I just hard coded it.

68
00:04:06.335 --> 00:04:08.458
Okay, and then the next thing
we need is a response format.

69
00:04:08.458 --> 00:04:13.731
So response format uses this
zod response format helper,

70
00:04:13.731 --> 00:04:18.465
and it takes in an object,
c.object like this, and

71
00:04:18.465 --> 00:04:22.553
then the second one again
I told you the name of

72
00:04:22.553 --> 00:04:26.656
the schema I'm just
gonna call it approval.

73
00:04:26.656 --> 00:04:31.674
And it's only gonna take in,
was it approved or not?

74
00:04:31.674 --> 00:04:36.615
And I'm gonna say that's a boolean,

75
00:04:36.615 --> 00:04:40.631
and I'll give a description,

76
00:04:40.631 --> 00:04:45.738
did the user approve the action or not.

77
00:04:45.738 --> 00:04:47.468
And do I not have zod here?

78
00:04:47.468 --> 00:04:48.536
Let me import zod.

79
00:04:54.463 --> 00:04:55.101
&gt;&gt; Scott Moss: Cool.

80
00:04:59.529 --> 00:05:00.397
&gt;&gt; Scott Moss: So we have that,

81
00:05:00.397 --> 00:05:04.071
this is what gives us the structured
output along with the beta parse.

82
00:05:08.066 --> 00:05:14.978
&gt;&gt; Scott Moss: And then, now I need to
return, and it should be type check now,

83
00:05:14.978 --> 00:05:21.634
so now I can say
result.choices[0].message.parsed,

84
00:05:21.634 --> 00:05:26.242
and that, as you can see,
is an object with

85
00:05:26.242 --> 00:05:30.723
an approved property owner, approved.

86
00:05:30.723 --> 00:05:34.880
So only reason this wouldn't be
here is if it was refusal instead.

87
00:05:38.857 --> 00:05:40.774
&gt;&gt; Scott Moss: So
obviously you would check for refusal.

88
00:05:40.774 --> 00:05:41.918
We're not gonna do that.

89
00:05:41.918 --> 00:05:43.301
We're just gonna assume that it's there.

