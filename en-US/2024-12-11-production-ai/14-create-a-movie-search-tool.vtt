WEBVTT

1
00:00:00.230 --> 00:00:02.472
&gt;&gt; Scott moss: Now we
wanna make the tool for

2
00:00:02.472 --> 00:00:06.190
our agent to take advantage of the query.

3
00:00:06.190 --> 00:00:08.992
Right now, the agent can't just
use this queryMovies function,

4
00:00:08.992 --> 00:00:10.460
we have to make a tool.

5
00:00:10.460 --> 00:00:12.770
We know that, we made tools before.

6
00:00:12.770 --> 00:00:15.290
If you haven't,
you're about to make your first tool.

7
00:00:15.290 --> 00:00:16.840
So what do we do?

8
00:00:16.840 --> 00:00:18.520
We go into the tools folder.

9
00:00:18.520 --> 00:00:22.230
We make a New File,
we're gonna call this movieSearch.

10
00:00:22.230 --> 00:00:26.260
Actually, I already have it,
it's just blank, kidding.

11
00:00:26.260 --> 00:00:29.443
So a tool is just two things.

12
00:00:29.443 --> 00:00:33.067
We need to export a definition,
and we need to export a function.

13
00:00:35.774 --> 00:00:37.060
&gt;&gt; Scott moss: So let's do that.

14
00:00:37.060 --> 00:00:43.738
So first, I'm gonna import this
type () from '../../types'.

15
00:00:47.653 --> 00:00:52.128
&gt;&gt; Scott moss: Okay,
it's gonna be called ToolFn.

16
00:00:52.128 --> 00:00:54.409
And then, what else do we need?

17
00:00:54.409 --> 00:00:57.722
We need, yeah, zod and
then the actual query.

18
00:00:57.722 --> 00:01:04.135
So I'm gonna import {z} from 'zod'.

19
00:01:04.135 --> 00:01:09.032
And then the queryMovies, there we go.

20
00:01:09.032 --> 00:01:11.940
Export const

21
00:01:11.940 --> 00:01:19.082
movieSearchToolDefinition,

22
00:01:22.804 --> 00:01:24.827
Which is gonna be
an object that has a name.

23
00:01:24.827 --> 00:01:27.077
&gt;&gt; Scott moss: I'm gonna
call this movieSearch,

24
00:01:27.077 --> 00:01:29.257
you can call it whatever you want.

25
00:01:29.257 --> 00:01:30.977
I'm gonna have parameters.

26
00:01:34.287 --> 00:01:36.927
&gt;&gt; Scott moss: And
they're always gonna be an object.

27
00:01:36.927 --> 00:01:38.604
Pretty much you have
to put an object here,

28
00:01:38.604 --> 00:01:40.429
you can't do anything
that's not an object.

29
00:01:40.429 --> 00:01:43.623
And these parameters
is gonna be the query,

30
00:01:43.623 --> 00:01:48.149
which is gonna be a string,
and we'll add a describe here.

31
00:01:48.149 --> 00:01:51.682
So what is this string?

32
00:01:51.682 --> 00:01:54.824
A 'query used for

33
00:01:54.824 --> 00:01:59.857
vector search on movies'.

34
00:01:59.857 --> 00:02:04.164
And I don't know, we might have to
workshop this with an eval to see if this

35
00:02:04.164 --> 00:02:07.093
is good or not, but
that's what we're gonna do.

36
00:02:07.093 --> 00:02:11.940
We will also take the filters here, so
in this case I might say genre director.

37
00:02:11.940 --> 00:02:13.202
We're gonna skip that for now,

38
00:02:13.202 --> 00:02:16.073
I think it's gonna get too crazy if
you start doing that, in my opinion.

39
00:02:17.093 --> 00:02:24.605
And then a description of this tool,
which is also a string.

40
00:02:24.605 --> 00:02:27.725
So what is this tool?

41
00:02:27.725 --> 00:02:30.144
Use this tool.

42
00:02:30.144 --> 00:02:34.458
So typically I'll do something
like 'use this tool', or

43
00:02:34.458 --> 00:02:37.924
'this tool retunes' or
something like that.

44
00:02:37.924 --> 00:02:45.519
So I'll just say 'use this
tool to find movies or

45
00:02:45.519 --> 00:02:50.895
answer questions about movies and

46
00:02:50.895 --> 00:02:56.269
their metada like score, ratin,

47
00:02:56.269 --> 00:03:01.457
costs, director, actors, and

48
00:03:01.457 --> 00:03:06.488
more', something like that.

49
00:03:06.488 --> 00:03:07.442
You can do whatever you want.

50
00:03:10.283 --> 00:03:12.191
&gt;&gt; Scott moss: I'm pretty sure I
did something different in here.

51
00:03:12.191 --> 00:03:15.314
Yeah, searches for movies, yeah,
exactly some way different.

52
00:03:19.220 --> 00:03:23.950
&gt;&gt; Scott moss: And I'm gonna make
my argument type using this cool

53
00:03:23.950 --> 00:03:27.477
little hack from zog, so we got that.

54
00:03:27.477 --> 00:03:29.979
And then last time we need to
just export our actual tool.

55
00:03:29.979 --> 00:03:34.922
So I'll say const movieSearch,

56
00:03:34.922 --> 00:03:42.865
it's gonna be a ToolFn at
takes in the &lt;Args&gt; here,

57
00:03:42.865 --> 00:03:48.001
= async () =&gt; {, like that.

58
00:03:48.001 --> 00:03:52.944
It's always gonna have
the original user message,

59
00:03:52.944 --> 00:03:56.314
and it's gonna have the toolArgs,

60
00:03:56.314 --> 00:04:00.936
which is where the query will be,
so we got that.

61
00:04:00.936 --> 00:04:03.379
And now it's, essentially,
what we wanna do,

62
00:04:03.379 --> 00:04:06.129
we don't have to worry about
the filters in this case.

63
00:04:06.129 --> 00:04:11.206
Is we just want to query the movies,
pass in the query and

64
00:04:11.206 --> 00:04:16.190
format the results in a way
that we want the AI to see it.

65
00:04:16.190 --> 00:04:19.416
And then stringify and
give it back to the AI, that's it.

66
00:04:19.416 --> 00:04:23.198
So, again, it all depends on how you
do this, is how the AI is gonna see and

67
00:04:23.198 --> 00:04:25.422
how it's gonna interpret it.

68
00:04:25.422 --> 00:04:27.932
So let's do this.

69
00:04:27.932 --> 00:04:31.862
So one thing we're also gonna do
that I'm sliding in super quick,

70
00:04:31.862 --> 00:04:35.931
is I'm gonna put this in a try catch,
because if this breaks, well,

71
00:04:35.931 --> 00:04:38.057
first I wanna log it, I wanna know.

72
00:04:43.730 --> 00:04:45.165
&gt;&gt; Scott moss: I don't
want my agent to die.

73
00:04:45.165 --> 00:04:48.249
And because this broke,
I don't want the code to break.

74
00:04:48.249 --> 00:04:52.059
So I'm gonna catch it, but then I'm gonna
tell the AI, hey, there was an error.

75
00:04:53.069 --> 00:05:00.653
And I'm gonna say,
Could not query the db to get movies.

76
00:05:01.694 --> 00:05:05.650
So now the AI knows that,
it tried to do it, but it broke and

77
00:05:05.650 --> 00:05:07.984
it might respond in a way to the user.

78
00:05:07.984 --> 00:05:10.393
And then you can have something in
a system problem that says, hey,

79
00:05:10.393 --> 00:05:13.434
if you see an error, say this to the user,
and then it'll say that.

80
00:05:13.434 --> 00:05:17.220
Whereas if this just broke,
what's the user experience like?

81
00:05:17.220 --> 00:05:19.434
It's just dies, they don't get anything.

82
00:05:19.434 --> 00:05:24.842
So this is a graceful fail, or letting
the AI know that something bad happened.

83
00:05:28.568 --> 00:05:34.168
&gt;&gt; Scott moss: So we got that,
so I'm gonna say results

84
00:05:34.168 --> 00:05:40.044
= await,
&gt;&gt; Scott moss: QueryMovies (),

85
00:05:40.044 --> 00:05:44.854
just gonna pass in
the (toolArgs.queryMovies) like that,

86
00:05:44.854 --> 00:05:49.127
this thing's freaking out cuz,
it's an object.

87
00:05:53.182 --> 00:05:57.003
&gt;&gt; Scott moss: There we go,
we'll get back our results here,

88
00:06:00.401 --> 00:06:02.344
&gt;&gt; Scott moss: And then with the results,

89
00:06:02.344 --> 00:06:08.268
yeah, I mean, you can kinda do whatever
you want here, how you wanna format them.

90
00:06:08.268 --> 00:06:12.687
I think the way I did it here was I just
didn't want the metadata field on it,

91
00:06:12.687 --> 00:06:14.527
I thought that was redundant.

92
00:06:14.527 --> 00:06:19.448
So I got rid of the metadata
field on every single result.

93
00:06:19.448 --> 00:06:22.653
But there's probably
a better way to do this.

94
00:06:22.653 --> 00:06:26.968
So basically I'm just gonna return.

95
00:06:26.968 --> 00:06:30.271
Actually, I'll just say-
&gt;&gt; Speaker 2: Put metadata over

96
00:06:30.271 --> 00:06:32.642
the return object and
then add the other one?

97
00:06:32.642 --> 00:06:34.053
&gt;&gt; Scott moss: Yeah, exactly.

98
00:06:34.053 --> 00:06:39.773
So results.map, get the movie, I guess,

99
00:06:39.773 --> 00:06:45.501
or let's just say result =&gt; { like this.

100
00:06:45.501 --> 00:06:49.162
And then I can say result,

101
00:06:49.162 --> 00:06:53.829
get the metadata, get the data.

102
00:06:53.829 --> 00:06:57.646
And then I can just return
a new object with the,

103
00:06:57.646 --> 00:07:00.799
what did I call the data one here?

104
00:07:00.799 --> 00:07:04.566
I called it a description,
so I'll say description.

105
00:07:04.566 --> 00:07:07.856
Actually, I'll do that one last,

106
00:07:07.856 --> 00:07:13.127
I'll just say metadata, and
then description: data.

107
00:07:19.041 --> 00:07:20.490
&gt;&gt; Scott moss: But again,
there's no wrong answer.

108
00:07:20.490 --> 00:07:24.923
You could just literally stringify these
results and be done, that's fine too.

109
00:07:24.923 --> 00:07:29.728
I'm just trying to pass, anything that is
not relevant, I don't wanna give the AI,

110
00:07:29.728 --> 00:07:31.483
cuz then it's too much noise.

111
00:07:31.483 --> 00:07:36.367
So that metadata field is so irrelevant, I
don't wanna even know that that's a thing,

112
00:07:36.367 --> 00:07:37.623
so I just got rid of it.

113
00:07:37.623 --> 00:07:42.373
And then you always have
to return to string,

114
00:07:42.373 --> 00:07:47.250
so JSON.stringify(formattedResults),

115
00:07:47.250 --> 00:07:51.880
I'll do null 2, so it's just formatted.

116
00:07:51.880 --> 00:07:55.332
Okay, now we have that.

117
00:07:55.332 --> 00:07:59.244
What we need to do now is
add this to our tools array.

118
00:07:59.244 --> 00:08:06.376
So inside of our tools Index.ts
file we're gonna import that tool

119
00:08:10.096 --> 00:08:12.750
&gt;&gt; Scott moss: From the '.movieSearch',

120
00:08:12.750 --> 00:08:15.921
the definition, not the function.

121
00:08:15.921 --> 00:08:17.744
Add that to our tool array.

122
00:08:24.072 --> 00:08:27.597
&gt;&gt; Scott moss: And then lastly, we need to
go into our tool runner that's responsible

123
00:08:27.597 --> 00:08:31.149
for actually executing the tool,
and we need to add it here.

124
00:08:31.149 --> 00:08:35.686
So I'm gonna import () from

125
00:08:35.686 --> 00:08:40.408
'./tools/movieSearch.

126
00:08:40.408 --> 00:08:44.002
And I wanna get the movieSearch, and
then the movieSearchToolDefinition.

127
00:08:44.002 --> 00:08:50.400
And then down here I can just
say in the switch statement,

128
00:08:50.400 --> 00:08:55.346
case movieSearchToolDefinition.name.

129
00:08:55.346 --> 00:09:00.051
Then I want to return
calling movieSearch(input).

130
00:09:06.074 --> 00:09:10.054
&gt;&gt; Scott moss: So
now our AI knows about the tool.

131
00:09:10.054 --> 00:09:12.094
Our tool runner can call the tool.

132
00:09:14.704 --> 00:09:18.164
It should work,
[LAUGH] let's see what happens, as always.

133
00:09:18.164 --> 00:09:22.119
So first what I'm gonna do is
I'm gonna clear my chat history.

134
00:09:22.119 --> 00:09:27.628
I could do that by going to db.json and
pretty much just blowing this out.

135
00:09:27.628 --> 00:09:28.998
We'll get into summaries later.

136
00:09:30.828 --> 00:09:36.071
I'm gonna same "messages": [], is that.

137
00:09:36.071 --> 00:09:38.637
And, wait,
do I need to put "summary" here?

138
00:09:38.637 --> 00:09:40.237
I might have to put one here, let me see.

139
00:09:42.817 --> 00:09:43.737
I'll just do it, just in case.

140
00:09:43.737 --> 00:09:45.789
So "messages", "summary", empty.

141
00:09:45.789 --> 00:09:51.895
Yours might already be empty, might not
be, and then now I can say, npm start.

142
00:09:51.895 --> 00:09:53.297
Let's just make sure this still works.

143
00:09:54.617 --> 00:10:00.833
Okay, looks like something died,
so string, but got an object.

144
00:10:00.833 --> 00:10:04.789
Did I put an object for
a description somewhere?

145
00:10:04.789 --> 00:10:06.199
Let's see, movieSearch.

146
00:10:08.127 --> 00:10:10.869
Yeah, I don't know why I did that.

147
00:10:10.869 --> 00:10:14.599
It's just a string here getting caught up.

148
00:10:14.599 --> 00:10:17.200
Yeah, that's just a string, not an object.

149
00:10:19.909 --> 00:10:21.521
&gt;&gt; Scott moss: Gotta
love good error messages.

150
00:10:24.121 --> 00:10:27.013
[LAUGH] So yeah, make sure you put
a string here on the definition,

151
00:10:27.013 --> 00:10:27.911
not a zod string.

152
00:10:27.911 --> 00:10:31.699
That's only for the parameters.

153
00:10:31.699 --> 00:10:33.521
Okay, let's run that again.

154
00:10:33.521 --> 00:10:36.361
Now I think, no,
I actually do think this is messed up.

155
00:10:36.361 --> 00:10:39.567
Yeah, let me get rid of this.

156
00:10:39.567 --> 00:10:42.941
Yeah, okay, try that again.

157
00:10:42.941 --> 00:10:46.561
Hi, cool, it didn't break.

158
00:10:46.561 --> 00:10:47.841
So let's try to search for a movie.

159
00:10:49.831 --> 00:10:56.849
"Find me a scary movie about ghosts".

160
00:10:56.849 --> 00:10:59.287
MovieSearch, done.

161
00:10:59.287 --> 00:11:02.951
It said it did it already,
that was really quick, let's see.

162
00:11:02.951 --> 00:11:05.107
Wow, that was really quick.

163
00:11:05.107 --> 00:11:08.347
So yeah, I found Annabelle dead awake.

164
00:11:08.347 --> 00:11:10.007
So yeah, pretty good.

165
00:11:10.007 --> 00:11:14.667
We can go look at the output
to see what it got back.

166
00:11:14.667 --> 00:11:17.218
So you can see here, this is what it
got back from the vector database.

167
00:11:17.218 --> 00:11:21.568
It literally got back those movies,
&gt;&gt; Scott moss: And

168
00:11:21.568 --> 00:11:23.989
it just stored them in here,
and then it answered.

169
00:11:26.389 --> 00:11:29.329
So pretty damn good, I would say.

170
00:11:29.329 --> 00:11:32.578
Obviously you have to test it and make
sure it's doing what you expect it to do,

171
00:11:32.578 --> 00:11:34.219
whatever the objective of your LLM is.

172
00:11:34.219 --> 00:11:39.513
Is your LLM meant to be a replacement for
a search bar on some Netflix-like app.

173
00:11:39.513 --> 00:11:42.713
So you would wanna prioritize
searching capabilities.

174
00:11:42.713 --> 00:11:47.356
Is your LLM more about fact answering,
about answering questions,

175
00:11:47.356 --> 00:11:51.533
factual, answers about movies and
less about finding them?

176
00:11:51.533 --> 00:11:54.113
So you would wanna eval towards that.

177
00:11:54.113 --> 00:11:56.863
So it really just depends
on what your system is.

178
00:11:56.863 --> 00:11:59.385
So this Arg is just
a generic implementation,

179
00:11:59.385 --> 00:12:03.394
which is why I took away the filter,
cuz that's going towards more of like

180
00:12:03.394 --> 00:12:07.502
searching and finding a thing and
less about answering your question.

181
00:12:07.502 --> 00:12:11.252
&gt;&gt; Speaker 2: So how would you change
your approach to evaling this?

182
00:12:12.422 --> 00:12:17.000
&gt;&gt; Scott moss: Evaling RAG is way
different because you have to

183
00:12:17.000 --> 00:12:21.473
have different metrics for
different parts.

184
00:12:21.473 --> 00:12:26.273
So you would have multiple scores for
multiple things.

185
00:12:26.273 --> 00:12:31.460
So just for the retrieval part
you would want to set up a metric

186
00:12:31.460 --> 00:12:37.988
that scores how well your retrieval
logic is finding the right documents.

187
00:12:37.988 --> 00:12:39.575
So you have to have a score for that.

188
00:12:39.575 --> 00:12:45.673
And it's kind of the one that showed in
RAGus that did the precision context one.

189
00:12:45.673 --> 00:12:50.100
Either have a score that checked
the output of the AI to make sure,

190
00:12:50.100 --> 00:12:53.966
if given the right context and
asked a certain question,

191
00:12:53.966 --> 00:12:57.068
that the answer was actually factual.

192
00:12:57.068 --> 00:12:58.776
So you wanna score that, right?

193
00:12:58.776 --> 00:13:03.198
You also wanna score whether or
not it picked the movie tool,

194
00:13:03.198 --> 00:13:05.027
like we've been doing.

195
00:13:05.027 --> 00:13:06.756
Those are probably just
three I can think of.

196
00:13:06.756 --> 00:13:09.329
There's probably ten other
ones you probably would wanna-

197
00:13:09.329 --> 00:13:10.463
&gt;&gt; Speaker 2: So you can break it down to

198
00:13:10.463 --> 00:13:11.566
its component parts.

199
00:13:11.566 --> 00:13:13.751
&gt;&gt; Scott moss: Yeah, exactly.

200
00:13:13.751 --> 00:13:16.529
So, yep, there's a lot to do there.

201
00:13:16.529 --> 00:13:17.509
Let's do something cool.

202
00:13:17.509 --> 00:13:21.929
Let's say, "ok,

203
00:13:21.929 --> 00:13:26.869
now make a movie poster

204
00:13:26.869 --> 00:13:31.289
for", which one,

205
00:13:31.289 --> 00:13:37.020
Annabelle, Insidious?

206
00:13:37.020 --> 00:13:38.346
Let's do Insidious.

207
00:13:46.010 --> 00:13:47.508
&gt;&gt; Scott moss: It's gonna
make a movie poster.

208
00:13:48.688 --> 00:13:50.683
I don't need the approval
works on this branch,

209
00:13:50.683 --> 00:13:54.248
so that's why, even though it says, do you
wanna generate image, is still doing it.

210
00:13:54.248 --> 00:13:58.525
We haven't gotten there yet, so
let's see, still gonna do it, I think.

211
00:13:58.525 --> 00:13:59.801
Yep, it did it.

212
00:13:59.801 --> 00:14:04.389
[LAUGH] Let's see what it makes.

213
00:14:04.389 --> 00:14:06.629
Here's a chilling movie poster for
Insidious.

214
00:14:08.327 --> 00:14:10.359
That's actually really good.

215
00:14:10.359 --> 00:14:12.687
Okay, good job Dolly.

216
00:14:12.687 --> 00:14:15.194
Dolly's like, yeah, I'm here, I'm back.

217
00:14:15.194 --> 00:14:19.487
&gt;&gt; Speaker 2: Which upstash plan do you
recommend if we use this in production,

218
00:14:19.487 --> 00:14:21.526
a fixed or pay-as-you-go?

219
00:14:21.526 --> 00:14:24.826
&gt;&gt; Scott moss: I would just go
pay-as-you-go until you hit the limits,

220
00:14:24.826 --> 00:14:28.326
cuz I think the pay-as-you-go
also has daily limits still.

221
00:14:28.326 --> 00:14:31.706
So once you get past those daily limits on
pay-as-you-go, then you need to do fixed.

222
00:14:31.706 --> 00:14:36.090
&gt;&gt; Speaker 2: And in production,
do you recommend using a database for

223
00:14:36.090 --> 00:14:40.030
evals, or
is this method of storing on a JSON file?

224
00:14:40.030 --> 00:14:45.298
&gt;&gt; Scott moss: That's really good,
I don't think you would do either.

225
00:14:45.298 --> 00:14:48.114
I don't think you would store it in
a database or putting it in a file,

226
00:14:48.114 --> 00:14:50.995
I think you would have some third-party
platform to help you do this.

227
00:14:50.995 --> 00:14:55.724
Because even if you put your data in
a database, you still have to build

228
00:14:55.724 --> 00:15:00.535
an entire pipeline, an application
to do anything with that data, and

229
00:15:00.535 --> 00:15:02.906
that is a whole startup on its own.

230
00:15:02.906 --> 00:15:06.552
So unless you work at a team with
thousands of engineers twirling

231
00:15:06.552 --> 00:15:11.144
their thumbs and they need stuff to do,
I probably wouldn't waste time trying to

232
00:15:11.144 --> 00:15:14.486
build some evaluation framework
that could do all that.

233
00:15:14.486 --> 00:15:18.241
I would just use some third party-tool.

234
00:15:18.241 --> 00:15:21.121
Some of them are free that you can
self-host and are open source.

235
00:15:21.121 --> 00:15:22.349
A lot of them are paid,

236
00:15:22.349 --> 00:15:26.641
but I would still use something
that was a complete solution.

237
00:15:26.641 --> 00:15:31.081
&gt;&gt; Speaker 2: Regarding namespaces,
do they affect the query result or

238
00:15:31.081 --> 00:15:32.536
just classify it?

239
00:15:32.536 --> 00:15:34.414
&gt;&gt; Scott moss: Do they
affect the query result?

240
00:15:34.414 --> 00:15:41.226
Yeah, so the namespace has methods on it,
right, so, where do we do that?

241
00:15:43.881 --> 00:15:45.504
&gt;&gt; Scott moss: So first is on ingest.

242
00:15:45.504 --> 00:15:49.143
I'm up starting on an index that's global,
but

243
00:15:49.143 --> 00:15:54.121
I could also upsert on a namespace,
and it's the same thing.

244
00:15:54.121 --> 00:16:00.038
So you can do a namespace for
an upsert or query, it's up to you.

245
00:16:00.038 --> 00:16:05.154
So yeah, if you have users always create
a namespace, I just use their user ID and

246
00:16:05.154 --> 00:16:09.236
I upsert with that namespace,
and I query with that namespace.

247
00:16:09.236 --> 00:16:11.969
And the alternative is
that you would go here and

248
00:16:11.969 --> 00:16:14.235
you would go here without a namespace.

249
00:16:14.235 --> 00:16:16.758
You put userId and then it would be this.

250
00:16:16.758 --> 00:16:21.392
And then every time you query
you would filter by this userId.

251
00:16:21.392 --> 00:16:23.272
So it's up to you how you wanna do it.

252
00:16:23.272 --> 00:16:27.120
I don't think there's a limit on
namespaces, at least in upstash.

253
00:16:27.120 --> 00:16:30.735
And then if you're on the dashboard,
if you wanna see different namespaces,

254
00:16:30.735 --> 00:16:31.852
it would be here.

255
00:16:31.852 --> 00:16:35.110
So as defaults, I don't have any, but
if you had some, they would be here and

256
00:16:35.110 --> 00:16:36.278
you could search for them.

