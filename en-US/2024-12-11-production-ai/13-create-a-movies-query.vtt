WEBVTT

1
00:00:00.000 --> 00:00:00.759
Let's query this now.

2
00:00:00.759 --> 00:00:07.847
So, if we go to the query, we need to
write a function that can query this.

3
00:00:07.847 --> 00:00:08.953
This could get really advanced.

4
00:00:08.953 --> 00:00:11.676
I'm going to try to keep
it somewhat simple.

5
00:00:11.676 --> 00:00:16.295
The strategy here is to basically,
take a query string,

6
00:00:16.295 --> 00:00:19.577
just like I was typing in the dashboard.

7
00:00:19.577 --> 00:00:24.779
Optional filters object, so an optional
object that represents these fields,

8
00:00:24.779 --> 00:00:27.158
and values that you wanna match one.

9
00:00:27.158 --> 00:00:28.362
And top K, optional.

10
00:00:28.362 --> 00:00:32.842
Top K just means,
how many you want to get back?

11
00:00:32.842 --> 00:00:33.880
The top scores, right?

12
00:00:33.880 --> 00:00:39.565
So if I go here, if I were to say,
right here, this is topK, so this is 50.

13
00:00:39.565 --> 00:00:45.052
If I say, give me the top 5,
I'm only gonna get back 5, right?

14
00:00:45.052 --> 00:00:46.783
So this is topK.

15
00:00:46.783 --> 00:00:50.517
And they're sorted by this score,

16
00:00:50.517 --> 00:00:56.497
which is the distance that this
was on the plot from this.

17
00:00:56.497 --> 00:00:58.868
So the WALL E was the closest.

18
00:00:58.868 --> 00:01:03.930
Given this metadata for filter,
and this vector WALL E was

19
00:01:03.930 --> 00:01:09.730
the closest in distance,
when plotted using cosine similarity.

20
00:01:09.730 --> 00:01:12.180
But again, that doesn't mean
it's relevant, all right?

21
00:01:12.180 --> 00:01:16.759
What if I said, mad movies?

22
00:01:16.759 --> 00:01:18.158
It put, I mean, I don't know.

23
00:01:18.158 --> 00:01:19.582
Is Mad Max a mad movie?

24
00:01:19.582 --> 00:01:21.263
I don't know.

25
00:01:21.263 --> 00:01:26.712
[LAUGH] So like you can tell like it's
good, but it's not always relevant.

26
00:01:26.712 --> 00:01:29.124
Why did Zootopia come up as mad?

27
00:01:29.124 --> 00:01:31.186
Because it is [LAUGH].

28
00:01:31.186 --> 00:01:34.496
It is kind of mad.

29
00:01:34.496 --> 00:01:36.413
Why did it say that, though let me see.

30
00:01:36.413 --> 00:01:41.440
I'm curious, cynical, maybe,
I had to copy that and

31
00:01:41.440 --> 00:01:46.156
see that's interesting,
it's so funny, okay.

32
00:01:46.156 --> 00:01:50.317
So the way this is gonna work is,
one we need to build a query string,

33
00:01:50.317 --> 00:01:55.208
because the way that upstats vector
does its upstat, its metadata filtering,

34
00:01:55.208 --> 00:01:58.274
as I showed before the break,
it looks like this.

35
00:01:58.274 --> 00:02:03.760
It's like, show me an example.

36
00:02:03.760 --> 00:02:05.659
It looks like this, right?

37
00:02:05.659 --> 00:02:10.353
You have to give it a string of filters,
like a SQL, like syntax, so, like,

38
00:02:10.353 --> 00:02:13.630
we have to turn that object
into a string to send it up.

39
00:02:13.630 --> 00:02:17.047
So, that's what this first part is doing.

40
00:02:17.047 --> 00:02:19.806
It's converting that object into a string,

41
00:02:19.806 --> 00:02:23.809
you would have to optimize the hell
out of this for this to be good.

42
00:02:23.809 --> 00:02:26.391
I can promise you it's not gonna be good.

43
00:02:26.391 --> 00:02:29.562
This is so hard to do because,
you have to ask yourself,

44
00:02:29.562 --> 00:02:31.728
where are these filters coming from?

45
00:02:31.728 --> 00:02:33.008
Who's making these filters?

46
00:02:33.008 --> 00:02:36.256
So, either you have a UI,
where users can select these filters, and

47
00:02:36.256 --> 00:02:37.779
then it's perfect every time.

48
00:02:37.779 --> 00:02:39.759
Or, if you're in a chat app or something,

49
00:02:39.759 --> 00:02:43.012
AI is determining what these filters
are based on what the user asked.

50
00:02:43.012 --> 00:02:45.718
And I promise you,
that guy's gonna get it wrong.

51
00:02:45.718 --> 00:02:52.662
You'll be like, so my ass,show me
any movie with Brad Pitt in it.

52
00:02:52.662 --> 00:02:56.299
And then what it'll do,
is it'll give you a filter and

53
00:02:56.299 --> 00:02:59.075
it'll say, movies with only Brad Pitt.

54
00:02:59.075 --> 00:03:00.587
And you'll never find a movie,

55
00:03:00.587 --> 00:03:03.002
because there is no movie
with only Brad Pitt in it.

56
00:03:03.002 --> 00:03:04.866
He's in movies with other people.

57
00:03:04.866 --> 00:03:09.632
So, it's just like, trying to get
that to be good is really tough.

58
00:03:09.632 --> 00:03:11.442
But, we're gonna do a very
naive implementation of it.

59
00:03:11.442 --> 00:03:14.570
So, we'll have that, and
then from there it's pretty simple.

60
00:03:14.570 --> 00:03:18.020
The index gives us a query method
that we can pass in our query.

61
00:03:18.020 --> 00:03:23.920
It gets vectorized for us on the server,
our top K, our optional filter string.

62
00:03:23.920 --> 00:03:27.191
And then these are just saying,
hey, when you return,

63
00:03:27.191 --> 00:03:30.544
can you return the metadata,
and return the data field.

64
00:03:30.544 --> 00:03:35.197
So like this field that we
created up here, this field,

65
00:03:35.197 --> 00:03:37.677
can you return both of those?

66
00:03:37.677 --> 00:03:40.081
That way, the AI can see it.

67
00:03:40.081 --> 00:03:44.208
We wanna give that data to the AI,
so it can see it, right?

68
00:03:44.208 --> 00:03:50.369
If we don't include these,
the AI won't get back anything but the ID.

69
00:03:50.369 --> 00:03:54.351
So I don't know how that's helpful for
the AI, right?

70
00:03:54.351 --> 00:03:55.863
Does that make sense?

71
00:03:55.863 --> 00:03:58.403
Okay, let's do it.

72
00:03:58.403 --> 00:04:00.696
So the first thing is let's get our index.

73
00:04:02.728 --> 00:04:08.024
&gt;&gt; Scott Moss: From,
&gt;&gt; Scott Moss: Upstairs vector.

74
00:04:15.552 --> 00:04:16.556
&gt;&gt; Scott Moss: Okay?

75
00:04:16.556 --> 00:04:20.870
And, the other thing
that might be helpful for

76
00:04:20.870 --> 00:04:24.972
people, is indexes also have namespaces.

77
00:04:24.972 --> 00:04:30.459
So, a namespace, if I remember

78
00:04:30.459 --> 00:04:35.143
index.namespace, yes.

79
00:04:35.143 --> 00:04:38.467
So if you do something like this,
you give it a namespace.

80
00:04:38.467 --> 00:04:42.883
For instance, I would use it for
like some user ID here, you can separate.

81
00:04:42.883 --> 00:04:46.005
So instead of creating a whole new index
for like a user or something like that,

82
00:04:46.005 --> 00:04:48.134
you can just create a new
namespace on this index, and

83
00:04:48.134 --> 00:04:49.387
you can make it a unique thing.

84
00:04:49.387 --> 00:04:53.706
So this is how I like separate
one user's data from another,

85
00:04:53.706 --> 00:04:56.343
by giving them their own namespace.

86
00:04:56.343 --> 00:04:58.931
And the namespace is their their
user ID that they would have.

87
00:04:58.931 --> 00:05:01.687
So whatever their user ID
that would be be here.

88
00:05:01.687 --> 00:05:05.557
And then, this namespace has all
the same methods like query, fetch,

89
00:05:05.557 --> 00:05:08.929
upsert the same thing that index has,
but on this namespace.

90
00:05:08.929 --> 00:05:12.099
So, good to know if you're
building real world applications.

91
00:05:12.099 --> 00:05:16.151
So, use an index for
global data that everybody can use, but,

92
00:05:16.151 --> 00:05:20.601
specific to a user you might wanna
create a namespace and do it there.

93
00:05:20.601 --> 00:05:25.607
Because the alternative is like, putting
a metadata field on each thing that

94
00:05:25.607 --> 00:05:30.547
you have, and the field owners, user ID,
and then you just filter on that.

95
00:05:30.547 --> 00:05:31.827
I guess that works too,

96
00:05:31.827 --> 00:05:35.870
you could just always filter on the user
ID field as part of your filtering.

97
00:05:35.870 --> 00:05:40.484
So, that works too, but
this is a database level partition,

98
00:05:40.484 --> 00:05:44.868
so,
&gt;&gt; Scott Moss: Cool, we got our index,

99
00:05:44.868 --> 00:05:47.148
I don't need any of my args there.

100
00:05:47.148 --> 00:05:50.712
And then we're gonna say,
what did I call this?

101
00:05:50.712 --> 00:05:52.184
I don't even care about
the TypeScript type.

102
00:05:52.184 --> 00:05:56.092
So we're gonna say, query movies
takes the query filter and top k.

103
00:05:56.092 --> 00:06:00.402
So, let's call that export

104
00:06:00.402 --> 00:06:04.899
const queryMovies, async.

105
00:06:10.719 --> 00:06:14.453
&gt;&gt; Scott Moss: It's gonna take a query,
which is gonna be required in a string.

106
00:06:14.453 --> 00:06:20.601
It's gonna take filters,
which I was gonna say any.

107
00:06:20.601 --> 00:06:25.715
You can add the texture type if you want,

108
00:06:25.715 --> 00:06:29.928
and then topk, which will just be

109
00:06:29.928 --> 00:06:34.836
a number,
&gt;&gt; Scott Moss: Like that.

110
00:06:34.836 --> 00:06:37.673
And I'll grab those here,
so query filters,

111
00:06:37.673 --> 00:06:42.480
topK,
&gt;&gt; Scott Moss: I'm just gonna go to 5.

112
00:06:42.480 --> 00:06:47.896
You can do whatever you want,
&gt;&gt; Scott Moss: Cool.

113
00:06:47.896 --> 00:06:51.237
Now to generate the filters,
essentially, again,

114
00:06:51.237 --> 00:06:54.133
this is just looping
through all the filters,

115
00:06:54.133 --> 00:06:59.051
which is gonna be an object that looks
like this, and convert them to strings.

116
00:06:59.051 --> 00:07:00.201
Convert them to a filter string.

117
00:07:00.201 --> 00:07:02.984
So, this really nothing magical here.

118
00:07:02.984 --> 00:07:05.195
Honestly, I would even say maybe
you can skip this one for now,

119
00:07:05.195 --> 00:07:07.657
because if you do this right now,
and you don't get back any results,

120
00:07:07.657 --> 00:07:09.405
you're gonna be like,
why is this not working?

121
00:07:09.405 --> 00:07:11.031
And it might be this.

122
00:07:11.031 --> 00:07:13.806
But, maybe for now skip this.

123
00:07:13.806 --> 00:07:17.221
When we make the tool,
we can come back and we can optimize this,

124
00:07:17.221 --> 00:07:21.482
because I don't want people not getting
results, because this is too strong.

125
00:07:21.482 --> 00:07:24.815
So skip the filter string for now.

126
00:07:24.815 --> 00:07:26.717
And let's go straight to the query.

127
00:07:26.717 --> 00:07:28.220
So the query is pretty simple.

128
00:07:30.082 --> 00:07:35.625
&gt;&gt; Scott Moss: We can just say,
return, index.query.

129
00:07:35.625 --> 00:07:36.871
I'll do that.

130
00:07:36.871 --> 00:07:41.815
The query is going to be the actual query.

131
00:07:41.815 --> 00:07:46.348
I'm sorry, data is going to be the query.

132
00:07:46.348 --> 00:07:48.542
Topk is gonna be top k.

133
00:07:48.542 --> 00:07:51.846
And I think that's
pretty much all we need.

134
00:07:54.276 --> 00:07:57.421
&gt;&gt; Scott Moss: No, we need to include
the other stuff, that's all right.

135
00:07:57.421 --> 00:08:02.330
Include the data, include not the values,

136
00:08:02.330 --> 00:08:05.387
but include the metadata.

137
00:08:05.387 --> 00:08:08.244
I have that, include the data,
there we go, cool.

