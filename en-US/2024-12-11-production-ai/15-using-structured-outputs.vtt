WEBVTT

1
00:00:00.100 --> 00:00:02.990
&gt;&gt; Scott moss: We just finished
doing rag for movie search, and

2
00:00:02.990 --> 00:00:04.760
that turned out really cool.

3
00:00:04.760 --> 00:00:06.090
It worked very well.

4
00:00:06.090 --> 00:00:09.661
You can think about different
strategies for evaluating that, and

5
00:00:09.661 --> 00:00:11.358
you should be evaluating that.

6
00:00:11.358 --> 00:00:15.772
And note that evaluating rag is
probably the most difficult part

7
00:00:15.772 --> 00:00:18.562
of an agent to evaluate, in my opinion.

8
00:00:18.562 --> 00:00:20.616
So, good luck.

9
00:00:20.616 --> 00:00:24.696
[LAUGH] And then, yeah,
these are some rack-as-a-service

10
00:00:24.696 --> 00:00:27.838
search-type things that
I was talking about.

11
00:00:27.838 --> 00:00:32.724
So now we're gonna move on to something
else that's also pretty cool and

12
00:00:32.724 --> 00:00:37.075
important in its own right,
and that's structured outputs.

13
00:00:37.075 --> 00:00:41.075
We've kind of been using some version
of structured outputs already for

14
00:00:41.075 --> 00:00:42.132
our tool calling.

15
00:00:42.132 --> 00:00:47.257
If you noticed that when we call a tool or
we make a tool definition,

16
00:00:47.257 --> 00:00:51.943
we provide a schema for,
that's not a good one, here we go.

17
00:00:51.943 --> 00:00:57.330
We provide a schema for, when AI says,
I wanna call this function,

18
00:00:57.330 --> 00:01:02.055
AI must adhere to this schema so
we can get those arguments so

19
00:01:02.055 --> 00:01:06.424
we can actually run our
function deterministically.

20
00:01:06.424 --> 00:01:08.051
So that's kind of a structured output.

21
00:01:08.051 --> 00:01:13.478
But the final result that the AI
returns right now is the string.

22
00:01:13.478 --> 00:01:14.476
It's a content string.

23
00:01:14.476 --> 00:01:19.375
We could actually have the AI return
an object and whatever schema we want,

24
00:01:19.375 --> 00:01:24.063
and at least in OpenAI's example,
it's guaranteed to be that shape.

25
00:01:24.063 --> 00:01:28.517
And that's because they fine-tune
the model to always return a JSON

26
00:01:28.517 --> 00:01:33.061
in the schema that you want, and
that's called a structured output.

27
00:01:33.061 --> 00:01:37.262
So you can get back
deterministic shapes of data.

28
00:01:37.262 --> 00:01:39.734
The values, you still got to tune that.

29
00:01:39.734 --> 00:01:42.159
You still got to eval that, but
the shape will always be the same.

30
00:01:42.159 --> 00:01:45.037
That way you can write deterministic
code against that shape.

31
00:01:45.037 --> 00:01:47.669
So for the most part,
that's actually true.

32
00:01:47.669 --> 00:01:50.496
There are sometimes where it's not,
but even when it's not,

33
00:01:50.496 --> 00:01:53.016
it'll tell you when it's not,
it'll refuse to do it.

34
00:01:53.016 --> 00:01:57.980
Okay, so benefits of structured outputs.

35
00:01:57.980 --> 00:02:01.922
Guaranteed valid response
formats that match your schema.

36
00:02:01.922 --> 00:02:06.910
No missing required field, so if you have
some system that's expecting some required

37
00:02:06.910 --> 00:02:11.920
field from this LLM, you'll get that field
every time depending on the model you use.

38
00:02:11.920 --> 00:02:14.782
But in OpenAI's example,
you should be getting it.

39
00:02:14.782 --> 00:02:17.068
You don't have those
parsing errors anymore.

40
00:02:17.068 --> 00:02:21.460
Before structured outputs, what you would
do is, you would still have a schema, and

41
00:02:21.460 --> 00:02:23.046
you would put it in the system,

42
00:02:23.046 --> 00:02:26.102
prompting, can you please
return your data in this shape?

43
00:02:26.102 --> 00:02:28.462
And the AI might do it,
it might not do it.

44
00:02:28.462 --> 00:02:29.882
So you would try to parse it.

45
00:02:29.882 --> 00:02:31.822
You would try cache that parse.

46
00:02:31.822 --> 00:02:33.619
If it failed, you would run it again.

47
00:02:33.619 --> 00:02:35.158
You would try to cache that parse.

48
00:02:35.158 --> 00:02:38.744
If it failed, you run it again up until
it failed on however many attempts you

49
00:02:38.744 --> 00:02:40.773
wanted it to fail and
you just gave up on it.

50
00:02:40.773 --> 00:02:44.066
But that's essentially kinda what
Lengcheng did before structured

51
00:02:44.066 --> 00:02:47.467
outputs in JSON mode, which was like,
hey, just give us a Zod schema,

52
00:02:47.467 --> 00:02:51.157
we'll throw it in the system prompt and
we'll keep trying to parse the output

53
00:02:51.157 --> 00:02:54.663
until it matches that schema,
up until a failure amount.

54
00:02:54.663 --> 00:02:55.910
But now you don't have to.

55
00:02:55.910 --> 00:02:59.510
It'll give you back that shape every
single time if you're using one of

56
00:02:59.510 --> 00:03:02.706
the OpenAI's models that supports it,
which is really cool.

57
00:03:02.706 --> 00:03:06.983
So, obviously, that allows for
better error handling.

58
00:03:06.983 --> 00:03:08.543
You can just check whether or

59
00:03:08.543 --> 00:03:11.477
not this thing came back in
the shape that you wanted.

60
00:03:11.477 --> 00:03:14.058
Edge cases are more predictable,
things like that.

61
00:03:14.058 --> 00:03:18.019
Obviously, development is so
much easier because, imagine writing

62
00:03:18.019 --> 00:03:22.730
code with a schema-less database where you
can just throw whatever you want in it.

63
00:03:22.730 --> 00:03:24.372
That would be terrible.

64
00:03:24.372 --> 00:03:25.958
That's essentially what an LLM is.

65
00:03:25.958 --> 00:03:27.920
So now [LAUGH] you don't have that.

66
00:03:27.920 --> 00:03:30.962
You have something that spits out,
something that has a shape.

67
00:03:30.962 --> 00:03:32.598
So how does that look?

68
00:03:32.598 --> 00:03:34.008
Very similar to what you're doing now.

69
00:03:34.008 --> 00:03:35.645
You make a schema.

70
00:03:35.645 --> 00:03:39.083
The root has to always be an object
from what I've discovered.

71
00:03:39.083 --> 00:03:40.476
If it's not an object,
it's not gonna work.

72
00:03:40.476 --> 00:03:43.604
And the reason that is,
is because it turns into this,

73
00:03:43.604 --> 00:03:45.849
which essentially has to be an object.

74
00:03:45.849 --> 00:03:49.917
This is how you would do it with
the raw API, but we have Zod.

75
00:03:49.917 --> 00:03:53.996
Python uses something called
pedantic models or whatever.

76
00:03:53.996 --> 00:03:55.986
We use Zod here in TypeScript JavaScript.

77
00:03:55.986 --> 00:03:59.592
So in this case, I can define a schema,
I can say it has to have a title.

78
00:03:59.592 --> 00:04:02.495
Some categories,
which are an array of strings.

79
00:04:02.495 --> 00:04:03.715
Confidence is a number.

80
00:04:03.715 --> 00:04:06.098
Suggestions, which is an array of objects.

81
00:04:06.098 --> 00:04:08.856
And there are limits to this.

82
00:04:08.856 --> 00:04:12.446
I forgot what the depth limit is,
but it's pretty high.

83
00:04:12.446 --> 00:04:16.627
You can look at the docs, but there's
a depth limit of how nested you can go.

84
00:04:16.627 --> 00:04:20.657
Zod supports default values,

85
00:04:20.657 --> 00:04:26.084
you can't do that cuz you don't need to.

86
00:04:26.084 --> 00:04:30.375
You can just do the default value
in yourself after you get it back.

87
00:04:30.375 --> 00:04:33.431
You can't do formatting.

88
00:04:33.431 --> 00:04:37.493
Zod supports coercion,
coercing something to another value.

89
00:04:37.493 --> 00:04:40.433
For instance,
if I want this to be a number,

90
00:04:40.433 --> 00:04:44.730
like I want a number between 0 and
1, I couldn't do that here.

91
00:04:44.730 --> 00:04:47.355
I could do with Zod, but
OpenAI won't support it.

92
00:04:47.355 --> 00:04:51.397
I could say it has to be
greater than 0 but less than 1.

93
00:04:51.397 --> 00:04:52.981
That's the number that I want.

94
00:04:52.981 --> 00:04:55.667
You can't support that
on the schema level.

95
00:04:55.667 --> 00:04:56.945
I could put that in a prompt and

96
00:04:56.945 --> 00:05:00.077
be like, make sure this is a number
between 0 and 1 and try to eval that.

97
00:05:00.077 --> 00:05:03.242
But yeah, for that example,
I actually just go 0 to 100 and

98
00:05:03.242 --> 00:05:05.894
I just do the math myself and
convert it to a decimal.

99
00:05:05.894 --> 00:05:11.179
So some things you can't do, but for
the most part, it works pretty well.

100
00:05:11.179 --> 00:05:16.302
Yeah, I mean, there really isn't much
to cover here other than make a schema.

101
00:05:16.302 --> 00:05:21.934
[LAUGH] What does your app need,
make sure your schema follows that design.

102
00:05:21.934 --> 00:05:24.665
So start with whatever your
app is trying to consume,

103
00:05:24.665 --> 00:05:28.197
what functions you're trying to use,
and create a schema for that.

104
00:05:28.197 --> 00:05:30.549
There is a case where you
might have a model refusal.

105
00:05:30.549 --> 00:05:34.200
And let me go look up exactly why
the model might refuse that before,

106
00:05:34.200 --> 00:05:36.324
I don't know what I'm talking about.

107
00:05:36.324 --> 00:05:39.945
Let me see, structured outputs,

108
00:05:42.418 --> 00:05:45.325
&gt;&gt; Scott moss: Refusal.

109
00:05:45.325 --> 00:05:50.107
Refusal, I think if it's a safety thing
with moderation or something like that.

110
00:05:50.107 --> 00:05:56.185
Yeah, it might occasionally refuse to
fulfill the request for safety reasons.

111
00:05:56.185 --> 00:05:59.649
So since the refusal does not
necessarily follow the schema you have

112
00:05:59.649 --> 00:06:03.354
supplied in the format, the API response
will include a new field called

113
00:06:03.354 --> 00:06:06.836
refusal to indicate that the model
refused to fulfill the request.

114
00:06:06.836 --> 00:06:10.054
So what that would look like is
you would get back something like,

115
00:06:10.054 --> 00:06:12.874
let me get rid of this,
you get back something like this.

116
00:06:12.874 --> 00:06:16.955
The output would be .refusal,
and it refused for,

117
00:06:16.955 --> 00:06:21.614
whatever reason it decided to not do it,
it will refuse it.

118
00:06:21.614 --> 00:06:26.478
Most of the time I get this for moderation
stuff, like, I'm not saying that,

119
00:06:26.478 --> 00:06:29.276
or I'm not gonna do that,
so it'll refuse it.

120
00:06:29.276 --> 00:06:31.131
So you really got to look for
those two things.

121
00:06:31.131 --> 00:06:34.840
You look for the refusal, or
now you can get back the parsed argument.

122
00:06:34.840 --> 00:06:38.848
Before we would get back the message, but
now we get back this parse thing, and

123
00:06:38.848 --> 00:06:41.723
that's because we're using
a different completion.

124
00:06:41.723 --> 00:06:45.296
We're doing openai.beta,
whereas before we were doing openai.chat.

125
00:06:45.296 --> 00:06:50.078
It's openai.beta.chat.completion.parse,
which is also different.

126
00:06:50.078 --> 00:06:56.564
So this right here allows us to
do those structured outputs.

127
00:06:56.564 --> 00:06:59.237
I've heard from some people,
I haven't measured this,

128
00:06:59.237 --> 00:07:02.236
that structured outputs lower
the quality of the responses, and

129
00:07:02.236 --> 00:07:05.720
that the quality is better if you
don't have structured outputs.

130
00:07:05.720 --> 00:07:07.725
I myself haven't tested it.

131
00:07:07.725 --> 00:07:10.884
For my application,
I'm gonna use structured outputs, and

132
00:07:10.884 --> 00:07:12.291
I'll tell you my use case.

133
00:07:12.291 --> 00:07:15.660
But there are alternatives to this,
like the one that I told you about,

134
00:07:15.660 --> 00:07:18.371
just looping over with
the schema yourself, using XML.

135
00:07:18.371 --> 00:07:21.593
There's other ways to do it, but
I like the structured outputs.

136
00:07:21.593 --> 00:07:23.697
Let's talk about some of the examples
you might use structured outputs for.

137
00:07:23.697 --> 00:07:29.243
So for my app, we use structured
outputs for generative UI.

138
00:07:29.243 --> 00:07:32.177
So we have a chat app.

139
00:07:32.177 --> 00:07:36.362
Depending on the tool that was called or
the question that you asked,

140
00:07:36.362 --> 00:07:40.924
instead of rendering a chat bubble,
we might render a component, right?

141
00:07:40.924 --> 00:07:44.871
So you can think of this as, if you had
a chat app and you asked what the weather

142
00:07:44.871 --> 00:07:48.899
was, it could just respond back in
a chat bubble, like here's the weather.

143
00:07:48.899 --> 00:07:52.805
Or it can show you a weather component
that looks nice and is interactive.

144
00:07:52.805 --> 00:07:57.656
Okay, structured outputs allow
me to do that because when I

145
00:07:57.656 --> 00:08:00.857
say I can give the AI a list of enums, and

146
00:08:00.857 --> 00:08:05.916
each enum is a type of component
that my front end knows about.

147
00:08:05.916 --> 00:08:09.322
So it knows about a weather component,
it knows about this component,

148
00:08:09.322 --> 00:08:10.912
knows about this component, and

149
00:08:10.912 --> 00:08:14.290
each one of those enums is a schema
object that has parameters on them.

150
00:08:14.290 --> 00:08:19.266
So for the weather component, it must
have the city, the temperature outside,

151
00:08:19.266 --> 00:08:20.008
whatever.

152
00:08:20.008 --> 00:08:24.762
And then, once my friend sees that object,
there's an if statement, so

153
00:08:24.762 --> 00:08:29.071
we're in JSS, it's like,
is this component type weather?

154
00:08:29.071 --> 00:08:31.644
Cool, show the weather component,
not a chat bubble, right?

155
00:08:31.644 --> 00:08:36.299
So you're basically allowing your AI to
determine what UI to show your users,

156
00:08:36.299 --> 00:08:36.799
right?

157
00:08:36.799 --> 00:08:40.589
So you can do that on a component level,
which I think is really cool.

158
00:08:40.589 --> 00:08:45.100
You could even go a little lower, and
I think OpenAI has an example of it.

159
00:08:45.100 --> 00:08:46.432
Let's see.

160
00:08:47.887 --> 00:08:50.710
&gt;&gt; Scott moss: You can go even lower level

161
00:08:50.710 --> 00:08:56.200
and,
&gt;&gt; Scott moss: They're not gonna show me

162
00:08:56.200 --> 00:09:01.331
the sample of it, where you can just
give the AI a list of atom component.

163
00:09:01.331 --> 00:09:06.220
So here is a title, here is a bar chart,

164
00:09:06.220 --> 00:09:11.418
here is a column,
[LAUGH] here is a button.

165
00:09:11.418 --> 00:09:14.035
And then it will compose the UI for
you, and

166
00:09:14.035 --> 00:09:16.741
then it'll give you
a list of those things.

167
00:09:16.741 --> 00:09:19.861
And then you would build a renderer
on your front end that loops

168
00:09:19.861 --> 00:09:22.682
through that list and
renders out and make a component on

169
00:09:22.682 --> 00:09:25.999
the fly based off the little
components that the AI set to render.

170
00:09:25.999 --> 00:09:29.101
So you're literally generating
a UI on the fly, and

171
00:09:29.101 --> 00:09:32.924
the AI is determining what's
the best layout for those things.

172
00:09:32.924 --> 00:09:37.879
It can get really powerful if you can
train an AI to do that very well, but

173
00:09:37.879 --> 00:09:39.704
we moved it a level above.

174
00:09:39.704 --> 00:09:43.215
It was like, let's just give it a list
of big components versus a list of these

175
00:09:43.215 --> 00:09:46.727
smaller atomic components so we can have
some sort of consistency in our app,

176
00:09:46.727 --> 00:09:49.448
because we don't wanna train
this thing to always do that.

177
00:09:49.448 --> 00:09:51.970
And at that point, you might as well
just say, always show this component.

178
00:09:51.970 --> 00:09:55.610
But you can get pretty
interesting with that.

179
00:09:55.610 --> 00:09:58.262
The other thing is structured
output can be recursive, so

180
00:09:58.262 --> 00:10:00.932
I'm not sure if they have
an example of recursion in here.

181
00:10:00.932 --> 00:10:03.300
There you go.

182
00:10:03.300 --> 00:10:08.754
So you can have recursive properties
in here, which is extremely powerful.

183
00:10:08.754 --> 00:10:10.815
So I think in this example with, yeah,

184
00:10:10.815 --> 00:10:13.445
they're literally doing
what I was describing.

185
00:10:13.445 --> 00:10:17.934
They have enums for divs, buttons,
headers, sections, fields and

186
00:10:17.934 --> 00:10:22.057
forms, and they can all be nested
inside of each other, right?

187
00:10:22.057 --> 00:10:28.013
So in this case, you have an array here,

188
00:10:28.013 --> 00:10:30.826
and where is that?

189
00:10:30.826 --> 00:10:32.113
There it is, here it is.

190
00:10:32.113 --> 00:10:38.041
So items right here,
this is basically saying,

191
00:10:38.041 --> 00:10:43.654
the children of this
entity here can be itself.

192
00:10:43.654 --> 00:10:44.864
It's referencing itself.

193
00:10:44.864 --> 00:10:45.704
That's what this is saying.

194
00:10:45.704 --> 00:10:47.095
So it's recursive.

195
00:10:47.095 --> 00:10:52.831
So that way you can have divs and divs,
a button and a div, it's just like HTML.

196
00:10:52.831 --> 00:10:57.797
So, and then the AI will generate
you a DOM tree that you can then

197
00:10:57.797 --> 00:10:59.784
just render on your app.

198
00:10:59.784 --> 00:11:04.223
Which is crazy to think about,
but actually quite powerful.

199
00:11:04.223 --> 00:11:07.733
So they had a blog post
that I wanted to show you.

200
00:11:07.733 --> 00:11:08.277
Yeah, here it is.

201
00:11:08.277 --> 00:11:14.075
So look, they have generative UI
that generates this landing page.

202
00:11:14.075 --> 00:11:18.324
And you can see, this is what it
will look like, here's the schema or

203
00:11:18.324 --> 00:11:19.509
the output for it.

204
00:11:19.509 --> 00:11:24.261
Here's the output that the system put
out that you can see it had a children's

205
00:11:24.261 --> 00:11:26.052
array, type was header.

206
00:11:26.052 --> 00:11:30.093
It had children, its type was div,
its label was Green Thumb Gardening.

207
00:11:30.093 --> 00:11:37.232
Here's the attributes to put on it,
[LAUGH] like, what class to put on it.

208
00:11:37.232 --> 00:11:38.760
Kinda crazy.

209
00:11:38.760 --> 00:11:42.093
So it's literally generating something
that someone is transforming to React

210
00:11:42.093 --> 00:11:45.325
in this case cuz it has class names,
I'm guessing they're using React, but

211
00:11:45.325 --> 00:11:46.382
this could be anything.

212
00:11:46.382 --> 00:11:50.202
This could be whatever you want it to
render to whatever system you have.

213
00:11:50.202 --> 00:11:51.920
So that one was pretty cool.

214
00:11:51.920 --> 00:11:54.176
A sign up screen.

215
00:11:54.176 --> 00:11:56.913
So this thing generates a sign up screen.

216
00:11:56.913 --> 00:12:00.286
So if you start thinking
about it this way,

217
00:12:00.286 --> 00:12:04.419
you can have a different
UI depending on some logic.

218
00:12:04.419 --> 00:12:08.608
So if this AI had a system prompts
that knew everything about the user,

219
00:12:08.608 --> 00:12:13.507
their preferences, what device they were
on, all this stuff, it could generate

220
00:12:13.507 --> 00:12:17.556
a UI specific for that person to
do something that it needs, right?

221
00:12:17.556 --> 00:12:19.836
So it might make a different
sign up screen for

222
00:12:19.836 --> 00:12:21.756
a different type of person on the fly.

223
00:12:21.756 --> 00:12:23.323
It's pretty powerful.

