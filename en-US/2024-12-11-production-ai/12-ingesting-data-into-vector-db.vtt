WEBVTT

1
00:00:00.000 --> 00:00:03.965
First thing we need to do is, we need
to create a step in which we can ingest

2
00:00:03.965 --> 00:00:06.902
all of the data that we're
gonna be ingesting today.

3
00:00:06.902 --> 00:00:12.417
So, just to show you the data,
there's this website called Kaggle,

4
00:00:12.417 --> 00:00:15.506
which is kind of like a GitHub for data.

5
00:00:15.506 --> 00:00:20.710
It's just like, some of it's open source,
I think actually, is all open source.

6
00:00:20.710 --> 00:00:24.082
I don't know, some of it might be paid,
but you can go in here and

7
00:00:24.082 --> 00:00:25.269
get tons of data sets,

8
00:00:25.269 --> 00:00:29.408
and you can see right here I viewed this
IMDB movie data set and I downloaded it.

9
00:00:29.408 --> 00:00:33.902
You can see the license here,
how you can use it, etc, etc.

10
00:00:33.902 --> 00:00:36.619
So, great place to find data.

11
00:00:36.619 --> 00:00:38.474
They also have models and
things like that, so

12
00:00:38.474 --> 00:00:40.055
you can check out some of these models.

13
00:00:40.055 --> 00:00:44.846
But, yeah,
highly recommend Kaggle for data.

14
00:00:44.846 --> 00:00:47.541
Yeah, so we need to make our ingest step,

15
00:00:47.541 --> 00:00:52.623
which is gonna take our CSV of movies that
you should already have in your repo,

16
00:00:52.623 --> 00:00:56.949
and we're going to index them and
put them in our vector database.

17
00:00:56.949 --> 00:00:58.898
So let's do it.

18
00:00:58.898 --> 00:01:01.182
And this is gonna be an offline index,
so we're only gonna do this one time.

19
00:01:01.182 --> 00:01:03.304
You don't have to do this many times.

20
00:01:03.304 --> 00:01:06.446
We only have to do this once, and then we
can start querying in things from there.

21
00:01:06.446 --> 00:01:10.404
So let's do it.

22
00:01:10.404 --> 00:01:14.645
I'm gonna go to my code,
there's a folder here called rag.

23
00:01:14.645 --> 00:01:17.467
That's where you'll find your
movie data set, the CSV file,

24
00:01:17.467 --> 00:01:19.077
you can take a look at it if you want.

25
00:01:19.077 --> 00:01:21.392
There's an ingest file and a query file.

26
00:01:21.392 --> 00:01:24.022
So an ingest file is where we're gonna be.

27
00:01:24.022 --> 00:01:28.234
First thing is, because this is gonna be a
script that we run outside of the context

28
00:01:28.234 --> 00:01:32.399
of the AI, we need to go ahead and make
sure we import our environment variables.

29
00:01:32.399 --> 00:01:34.631
So we'll do an import.env config.

30
00:01:34.631 --> 00:01:37.950
This reads your .env file and
loads up everything.

31
00:01:37.950 --> 00:01:39.786
So we wanna make sure we have that.

32
00:01:39.786 --> 00:01:45.248
The next thing we wanna do is we wanna get
the index function from upstash vector and

33
00:01:45.248 --> 00:01:47.955
the parse function from CSV parse sync.

34
00:01:47.955 --> 00:01:52.296
So I'm gonna say index, and then, as,

35
00:01:52.296 --> 00:01:58.450
I'm gonna call it UpstashIndex
from upstash/vector.

36
00:01:58.450 --> 00:02:04.836
And then, import {} from csv-parse/sync,

37
00:02:04.836 --> 00:02:09.047
I wanna get the parse function.

38
00:02:11.356 --> 00:02:12.694
&gt;&gt; Scott Moss: So we got that.

39
00:02:12.694 --> 00:02:15.841
And then I'm just gonna get these fs,
file, module, the path, and

40
00:02:15.841 --> 00:02:18.523
ora, it's like a loader that
we can show in the terminal.

41
00:02:18.523 --> 00:02:25.805
So, fs from fs, you can do
node:fs if you wanna be specific.

42
00:02:25.805 --> 00:02:29.837
Import path from node:path, up to you.

43
00:02:29.837 --> 00:02:32.599
And then, ora from ora.

44
00:02:36.311 --> 00:02:39.582
&gt;&gt; Scott Moss: Cool, so we got those.

45
00:02:39.582 --> 00:02:41.738
Now we wanna initialize our index.

46
00:02:41.738 --> 00:02:44.975
This is the same index that
you just created on upstash.

47
00:02:44.975 --> 00:02:48.235
We're getting a reference to it here, so

48
00:02:48.235 --> 00:02:52.530
you could just say,
const index = new UpstashIndex.

49
00:02:52.530 --> 00:02:56.416
And actually, you don't even have to pass
in these environment variables like this

50
00:02:56.416 --> 00:03:00.425
if they're already set in your environment
variable with the exact same name as this.

51
00:03:00.425 --> 00:03:01.877
And we loaded them, we did here.

52
00:03:01.877 --> 00:03:02.694
It'll just find it.

53
00:03:02.694 --> 00:03:04.909
So you don't have to pass
these in if you don't want to,

54
00:03:04.909 --> 00:03:06.288
I'm just doing it to be explicit.

55
00:03:06.288 --> 00:03:08.833
So I will do that.

56
00:03:08.833 --> 00:03:13.167
And actually, that's not what I call them.

57
00:03:13.167 --> 00:03:15.335
Well, I don't wanna look at my
file to show you what they are, so

58
00:03:15.335 --> 00:03:16.188
I'm not gonna add them.

59
00:03:16.188 --> 00:03:18.511
[LAUGH] I'm just gonna ask, couldn't.

60
00:03:18.511 --> 00:03:22.591
But trust me, I'm pretty sure you don't
have to add them if you use the exact same

61
00:03:22.591 --> 00:03:24.278
names that was on the dashboard.

62
00:03:24.278 --> 00:03:26.681
Which, if you just copy and paste it
from the dashboard, you should be good.

63
00:03:26.681 --> 00:03:28.683
But put them in here if you want.

64
00:03:28.683 --> 00:03:30.780
They're like this.

65
00:03:30.780 --> 00:03:33.075
And I'm pretty sure that's it.

66
00:03:33.075 --> 00:03:35.317
Now, we need to index our movie data.

67
00:03:35.317 --> 00:03:36.425
Let's walk through this strategy.

68
00:03:36.425 --> 00:03:43.258
So, first thing we need
to do is load up our CSV.

69
00:03:43.258 --> 00:03:45.519
If this is a bigger file,
this is a couple megabytes,

70
00:03:45.519 --> 00:03:47.597
you wouldn't just load
this thing up in memory.

71
00:03:47.597 --> 00:03:50.696
You probably don't have that
much RAM on your computer.

72
00:03:50.696 --> 00:03:52.143
It's not that big of a file,
so we're gonna load up.

73
00:03:52.143 --> 00:03:53.346
It's a couple kilobytes.

74
00:03:53.346 --> 00:03:54.729
It's not even a megabyte.

75
00:03:54.729 --> 00:03:58.887
But if this was a bigger file,
you would stream this row by row and

76
00:03:58.887 --> 00:04:00.968
do it that way, but we're not.

77
00:04:00.968 --> 00:04:02.506
So I understand that people
are looking this like,

78
00:04:02.506 --> 00:04:03.592
why are you loading this up memory?

79
00:04:03.592 --> 00:04:05.214
It's not a big file.

80
00:04:05.214 --> 00:04:07.221
We're gonna load it up in memory.

81
00:04:07.221 --> 00:04:11.706
This parse function is essentially
just gonna turn into JSON for us, so

82
00:04:11.706 --> 00:04:12.612
we have JSON.

83
00:04:12.612 --> 00:04:16.253
And then, I'm being super dramatic here,
because there's a better way to do this,

84
00:04:16.253 --> 00:04:18.241
but I want you to just to
see what it looks like.

85
00:04:18.241 --> 00:04:23.392
Is, for each one movie, we're going
to upsert the index in the database.

86
00:04:23.392 --> 00:04:26.544
So, if you don't know what upsert means,
upsert just means,

87
00:04:26.544 --> 00:04:29.649
create it if it's not there,
if it is there, just update it.

88
00:04:29.649 --> 00:04:31.223
That's what upsert means.

89
00:04:31.223 --> 00:04:34.888
Update it, create it if it's not there.

90
00:04:34.888 --> 00:04:37.559
So we're gonna do that one at a time,
serially.

91
00:04:37.559 --> 00:04:40.975
So it's gonna take, I don't know,
depending how fast your computer,

92
00:04:40.975 --> 00:04:43.442
your connection is,
this might take 60 seconds.

93
00:04:43.442 --> 00:04:45.412
Maybe a little more.

94
00:04:45.412 --> 00:04:48.153
Upsert takes in an array of these,
so we can honestly,

95
00:04:48.153 --> 00:04:49.832
probably do them all at one time.

96
00:04:49.832 --> 00:04:53.557
But I think it's just more dramatic and
cool just to see them do it one at a time,

97
00:04:53.557 --> 00:04:55.377
so you kinda know what's happening.

98
00:04:55.377 --> 00:04:57.347
When it happens so quickly,
you don't really know what's going on.

99
00:04:57.347 --> 00:05:00.451
So doing one at a time,
I think is really cool.

100
00:05:00.451 --> 00:05:02.496
So we do that, and
then we just call the function,

101
00:05:02.496 --> 00:05:04.612
cuz we're never gonna
import this file anywhere.

102
00:05:04.612 --> 00:05:07.621
We're just gonna call it from the command
line index, it's offline index.

103
00:05:07.621 --> 00:05:11.448
We're never gonna run this at run time or
anything like that.

104
00:05:11.448 --> 00:05:12.740
Cool, okay, let's do it.

105
00:05:12.740 --> 00:05:18.789
So I'm gonna say const indexMovieData

106
00:05:21.808 --> 00:05:24.811
&gt;&gt; Scott Moss: Async, and then, yeah, so

107
00:05:24.811 --> 00:05:30.706
the spinner,
this is something that I use all the time.

108
00:05:30.706 --> 00:05:34.416
It shows you a really nice spinner in the
terminal, otherwise you're just looking at

109
00:05:34.416 --> 00:05:37.058
a blank screen and
you have no idea what the hell's going on.

110
00:05:37.058 --> 00:05:39.400
So I'm gonna start my spinner.

111
00:05:39.400 --> 00:05:41.690
I'm gonna grab my data.

112
00:05:44.658 --> 00:05:47.458
&gt;&gt; Scott Moss: Equals,
what are we doing here?

113
00:05:47.458 --> 00:05:52.484
Yeah, so let's get the path,
let's get the read file

114
00:05:52.484 --> 00:05:57.767
sync,
&gt;&gt; Scott Moss: Or,

115
00:05:57.767 --> 00:06:03.121
I should say, moviesPath, or
whatever, = path.join, and then,

116
00:06:03.121 --> 00:06:09.866
here's the thing, I don't think you can do
dirname anymore for using modules and NPM.

117
00:06:09.866 --> 00:06:12.641
There's just another way to do it.

118
00:06:12.641 --> 00:06:14.271
So you can't use dirname like that.

119
00:06:14.271 --> 00:06:18.599
So we're gonna use process.cwd,
which is, current working directory.

120
00:06:18.599 --> 00:06:20.059
If you don't know what that means,

121
00:06:20.059 --> 00:06:22.258
it just means the current
directory that you're on.

122
00:06:22.258 --> 00:06:28.352
And our file is located at source rag,
this path.

123
00:06:28.352 --> 00:06:32.436
So it's relative to the root
of this folder, right?

124
00:06:32.436 --> 00:06:36.768
The current working directory is
the directory in which you run the command

125
00:06:36.768 --> 00:06:40.356
from, not the directory this file is in,
not to be confused.

126
00:06:40.356 --> 00:06:47.544
So when we run this command,
we'll be in this directory, the root here.

127
00:06:47.544 --> 00:06:50.642
So relative to this root, here's the file.

128
00:06:54.598 --> 00:07:00.114
&gt;&gt; Scott Moss: Cool, the next thing
we wanna do is read the file.

129
00:07:00.114 --> 00:07:02.500
So let's do that, and
then get the records.

130
00:07:02.500 --> 00:07:08.746
So we'll do that,moviesPath,
read that file.

131
00:07:12.829 --> 00:07:18.580
&gt;&gt; Scott Moss: And
then records would be csv, I'm sorry,

132
00:07:18.580 --> 00:07:23.503
it'll be parse:csvData columns true.

133
00:07:23.503 --> 00:07:25.001
So the option that I had.

134
00:07:25.001 --> 00:07:26.404
Yeah, skip empty lines.

135
00:07:26.404 --> 00:07:27.513
Definitely, yeah, do that.

136
00:07:27.513 --> 00:07:31.632
That will, I think the data is clean,
but just do that.

137
00:07:34.012 --> 00:07:39.849
&gt;&gt; Scott Moss: Okay, so we got that,
pretty simple, nice to update your text.

138
00:07:39.849 --> 00:07:43.555
To update the loader, you can just call
.text and set it equal to something so

139
00:07:43.555 --> 00:07:44.708
it'll be like, cool.

140
00:07:44.708 --> 00:07:46.518
Now we're gonna start the movie indexing.

141
00:07:46.518 --> 00:07:50.034
And then, here we wanna do a for of loop.

142
00:07:50.034 --> 00:07:55.092
For of loop allows you to
do async things serially.

143
00:07:55.092 --> 00:07:58.806
So we can not go to the next one
until the previous one is done.

144
00:07:58.806 --> 00:08:01.991
You can't do that in a for
loop, or stuff like that.

145
00:08:01.991 --> 00:08:06.454
So for of loop allows you to do that,
which is really cool.

146
00:08:06.454 --> 00:08:13.026
We'll update our spinner text to be like,
indexing this movie,

147
00:08:13.026 --> 00:08:18.890
all the column names are capitalized,
so capital Title.

148
00:08:18.890 --> 00:08:22.823
And then from there,
as far as how you format this,

149
00:08:22.823 --> 00:08:26.223
there's two things you got to think about.

150
00:08:26.223 --> 00:08:31.810
Whatever you put on data, that's the thing
that's gonna be converted to a vector.

151
00:08:31.810 --> 00:08:36.978
So think about a query that a user might
ask, forget about the metadata, just

152
00:08:36.978 --> 00:08:42.400
think about a query that they might ask
for, and that being turned into a vector.

153
00:08:42.400 --> 00:08:48.261
What vectors would you want that
user's query to be compared to?

154
00:08:48.261 --> 00:08:49.284
So that's what you wanna put here.

155
00:08:49.284 --> 00:08:53.233
So basically, what do you want them to be
able to search for without the metadata,

156
00:08:53.233 --> 00:08:54.390
just vector to vector?

157
00:08:54.390 --> 00:08:55.519
That's what you wanna put in your text.

158
00:08:55.519 --> 00:08:57.477
And this is where the chunking comes from.

159
00:08:57.477 --> 00:09:01.793
Luckily for us,
this is not a lot of tokens, so

160
00:09:01.793 --> 00:09:05.016
we don't have to do any chunking.

161
00:09:05.016 --> 00:09:08.586
But if this was, I don't know,

162
00:09:08.586 --> 00:09:14.416
a couple thousand tokens,
we have to break this up.

163
00:09:14.416 --> 00:09:18.772
Okay, cool, now we gotta figure
out a chunking strategy.

164
00:09:18.772 --> 00:09:23.921
And each chunk is its own upsert, for
instance, like another level to it.

165
00:09:23.921 --> 00:09:27.593
But this is not a lot, so
we can just chunk some things.

166
00:09:27.593 --> 00:09:31.039
So my strategy was, I'll put the title,
I'll put the genre,

167
00:09:31.039 --> 00:09:32.611
I'll put the description.

168
00:09:32.611 --> 00:09:35.386
That's all I'm gonna do as far as vector.

169
00:09:35.386 --> 00:09:37.757
You can do whatever you want,
however you want to be able to search,

170
00:09:37.757 --> 00:09:39.018
you can put whatever information.

171
00:09:39.018 --> 00:09:43.835
So if you think having the year in the
database is good, so if someone types in

172
00:09:43.835 --> 00:09:48.373
a year, it'll find something with
that year, yeah, you can do that.

173
00:09:48.373 --> 00:09:51.877
You can also do that as a metadata
search as well, which is different.

174
00:09:51.877 --> 00:09:54.923
So there's no right or wrong answer, you
kind gotta figure out what works for you.

175
00:09:54.923 --> 00:10:00.022
So I'm just gonna do this in no particular
order, you can do whatever you want.

176
00:10:00.022 --> 00:10:02.313
You can follow me or choose not to,
play around with it.

177
00:10:02.313 --> 00:10:08.581
So, this is the text,
I'm just gonna say that.

178
00:10:08.581 --> 00:10:09.775
I'm actually gonna do the periods.

179
00:10:09.775 --> 00:10:13.679
I think I tried this with the dashes and
it was bad.

180
00:10:13.679 --> 00:10:16.996
Not bad, it just wasn't as good.

181
00:10:16.996 --> 00:10:22.488
So we'll put the title, I'll put
the genre, I'll put the description.

182
00:10:26.183 --> 00:10:28.788
&gt;&gt; Scott Moss: And then from there,
we're going to call upsert,

183
00:10:28.788 --> 00:10:30.008
we have to give it an ID.

184
00:10:30.008 --> 00:10:32.211
If we don't, it'll make one,
which is fine.

185
00:10:32.211 --> 00:10:36.711
But in case you run this again,
you want this to be idempotent.

186
00:10:36.711 --> 00:10:39.302
If you don't know idempotent means,
it just means, if I do the same.

187
00:10:39.302 --> 00:10:42.996
So when it comes to mutated things,
like upserting, updating,

188
00:10:42.996 --> 00:10:47.901
deleting, creating, anything that modifies
or creates a resource on some service or

189
00:10:47.901 --> 00:10:49.188
database somewhere.

190
00:10:49.188 --> 00:10:52.434
If I call it again,
I don't want some weird side effect,

191
00:10:52.434 --> 00:10:55.017
I just want it to have happened once,
right?

192
00:10:55.017 --> 00:10:58.118
This is very important for
financial systems,

193
00:10:58.118 --> 00:11:02.702
where if I call transfer this money
from this account to this account.

194
00:11:02.702 --> 00:11:06.076
It'll do it, and for some reason,
I did it at the same time, or

195
00:11:06.076 --> 00:11:09.854
slightly after on my other device,
I should get back the same result.

196
00:11:09.854 --> 00:11:11.144
It shouldn't transfer it again.

197
00:11:11.144 --> 00:11:14.104
It should have already realized
that it transferred it, and

198
00:11:14.104 --> 00:11:15.388
the system won't break.

199
00:11:15.388 --> 00:11:20.331
So, a lot of systems have idempotent IDs,
where they'll send you back an ID that

200
00:11:20.331 --> 00:11:23.543
you can send up again, so
it knows how to track that.

201
00:11:23.543 --> 00:11:27.847
So by us supplying our own ID here,
if we were to run this again,

202
00:11:27.847 --> 00:11:31.911
we we would not be creating
something else in the database,

203
00:11:31.911 --> 00:11:36.163
it would only update the one that
was already there by this ID.

204
00:11:36.163 --> 00:11:37.644
So let's do that.

205
00:11:39.808 --> 00:11:43.611
&gt;&gt; Scott Moss: Try, catch,
I don't want this to break, so

206
00:11:43.611 --> 00:11:46.823
obviously I'm gonna try catch this.

207
00:11:46.823 --> 00:11:53.199
And then I'm going to say,
await index.upsert, like this.

208
00:11:53.199 --> 00:11:57.735
ID is gonna be the title,
the data is gonna be the text, and

209
00:11:57.735 --> 00:11:59.876
then we have the metadata.

210
00:11:59.876 --> 00:12:03.438
And again, you can do whatever
you want here for the metadata.

211
00:12:03.438 --> 00:12:05.825
I think I have a TypeScript type.

212
00:12:05.825 --> 00:12:07.057
Do I have a typescript type here?

213
00:12:07.057 --> 00:12:08.056
No, maybe not.

214
00:12:08.056 --> 00:12:09.249
You can do whatever you want.

215
00:12:09.249 --> 00:12:11.449
It's whatever you like.

216
00:12:11.449 --> 00:12:13.983
Essentially, whatever you put here,

217
00:12:13.983 --> 00:12:18.513
this is something that you would
probably expose to either your user so

218
00:12:18.513 --> 00:12:22.301
they can filter on it, or
you do some filtering yourself.

219
00:12:22.301 --> 00:12:26.568
Maybe you have another LLM that figures
out these filters for you, who knows?

220
00:12:26.568 --> 00:12:30.525
But this is like,
you want to be able to filter it and and

221
00:12:30.525 --> 00:12:34.156
go down on this level for
each one of these fields.

222
00:12:34.156 --> 00:12:38.830
I'm just gonna copy them all,
just as an example.

223
00:12:45.182 --> 00:12:48.025
&gt;&gt; Scott Moss: And
I called it record in this example.

224
00:12:48.025 --> 00:12:50.176
So I'll call it record, cool.

225
00:12:52.119 --> 00:12:55.023
&gt;&gt; Scott Moss: And for me,
right now, I have year, but

226
00:12:55.023 --> 00:12:57.853
the parser is reading this as a string.

227
00:12:57.853 --> 00:13:00.374
So maybe I would convert this to a number.

228
00:13:00.374 --> 00:13:02.036
Maybe I would convert
rating into a number.

229
00:13:02.036 --> 00:13:03.203
I think it's reading as a string.

230
00:13:03.203 --> 00:13:06.352
Same thing, I would convert these
to numbers, this to a number.

231
00:13:06.352 --> 00:13:09.974
So that way, when I do the filtering,
it can do number comparisons on them and

232
00:13:09.974 --> 00:13:10.825
stuff like that.

233
00:13:10.825 --> 00:13:15.960
So in fact, I might also go ahead and
I'll just do it.

234
00:13:15.960 --> 00:13:17.723
I'll just say, number.

235
00:13:21.982 --> 00:13:24.813
&gt;&gt; Scott Moss: I don't think I need
a new number, so we'll do that.

236
00:13:28.125 --> 00:13:32.004
&gt;&gt; Scott Moss: We'll do this,
that's a number, votes is a number,

237
00:13:35.703 --> 00:13:37.463
&gt;&gt; Scott Moss: Ratings is a number.

238
00:13:37.463 --> 00:13:39.416
And here's a number, cool.

239
00:13:39.416 --> 00:13:43.191
All these numbers, watch this break.

240
00:13:43.191 --> 00:13:48.687
[LAUGH] Cool, so we got that,
and then, for the error,

241
00:13:48.687 --> 00:13:53.118
let's just update our spinner and
do a log.

242
00:13:56.938 --> 00:13:58.316
&gt;&gt; Scott Moss: There we go.

243
00:14:01.951 --> 00:14:05.414
&gt;&gt; Scott Moss: And then lastly,
we can just say, cool, all movies indexed.

244
00:14:05.414 --> 00:14:08.572
And I think succeed stops it already.

245
00:14:08.572 --> 00:14:12.516
So I don't think I have to hit Stop.

246
00:14:12.516 --> 00:14:15.182
And right now, that's not gonna do
anything unless I call the function.

247
00:14:15.182 --> 00:14:18.305
So I'm gonna call the function here,
indexMovieData,

248
00:14:18.305 --> 00:14:21.242
which calls this function
here that we just created.

249
00:14:24.415 --> 00:14:25.792
&gt;&gt; Scott Moss: And
we should be safe to run it.

250
00:14:25.792 --> 00:14:29.607
So you can execute the file
by doing npm run ingest,

251
00:14:29.607 --> 00:14:35.314
I already have a script in here that I'm
pretty sure it works on Windows too.

252
00:14:35.314 --> 00:14:40.758
Yeah, this works on Windows, it's just
calling npx, tsx, the path to that file.

253
00:14:40.758 --> 00:14:44.680
So you can call that directly, or
you can just do npm run ingest.

254
00:14:44.680 --> 00:14:49.825
If I didn't break anything with those
numbers, we should be good, and

255
00:14:49.825 --> 00:14:55.244
I already have an index for this data,
so it should just be upserting mine.

256
00:14:55.244 --> 00:14:58.677
Npm run, and just, let's see.

257
00:14:58.677 --> 00:14:59.224
There we go.

258
00:14:59.224 --> 00:15:03.080
So you should see something like this,
where it's just gonna go through and

259
00:15:03.080 --> 00:15:04.961
index every single movie one by one.

260
00:15:04.961 --> 00:15:07.625
And this is why I wanted
to do it one by one, so

261
00:15:07.625 --> 00:15:11.012
you can see that it's doing
every movie one by one here.

262
00:15:11.012 --> 00:15:12.983
This would have been done already
if we would have bashed it.

263
00:15:12.983 --> 00:15:15.259
[LAUGH] We'd be done, all right?

264
00:15:15.259 --> 00:15:19.684
But I wanted you to see this so
you understand what it's doing.

265
00:15:19.684 --> 00:15:23.045
So, like I said, I think last time I
did this, it took like 60 seconds.

266
00:15:23.045 --> 00:15:23.951
So give it a minute.

267
00:15:23.951 --> 00:15:25.971
Literally, it'll let you know it's done.

268
00:15:25.971 --> 00:15:29.127
There's a thousand movies,
so it's not too bad.

269
00:15:29.127 --> 00:15:32.761
And then once you do it,
we can go check your dashboard, and

270
00:15:32.761 --> 00:15:36.045
you should see 999 in there,
or whatever number.

271
00:15:36.045 --> 00:15:40.244
All movies indexed,
go to your Upstash dashboard.

272
00:15:44.443 --> 00:15:49.190
&gt;&gt; Scott Moss: I'm gonna go
to mine that I have here.

273
00:15:49.190 --> 00:15:54.112
Hopefully, yeah, my upsert worked,
I still only have 999, not 2000.

274
00:15:54.112 --> 00:15:56.689
So you should have this too.

275
00:15:56.689 --> 00:16:01.963
If you don't have this and you didn't
get any errors, there was one time

276
00:16:01.963 --> 00:16:08.125
I created an index on Upstash where I got
no errors, but I couldn't index anything.

277
00:16:08.125 --> 00:16:10.804
And this was in prod,
I couldn't figure out what was going on.

278
00:16:10.804 --> 00:16:13.528
I just created another index,
same code, and it worked.

279
00:16:13.528 --> 00:16:14.553
That only happened one time.

280
00:16:14.553 --> 00:16:18.481
So if you didn't get any errors but yet
you don't have anything in here, create

281
00:16:18.481 --> 00:16:22.365
another index, swap out your environment
variables, and see if that helps.

282
00:16:22.365 --> 00:16:24.034
But that literally only
happened to me one time,

283
00:16:24.034 --> 00:16:25.796
and I've created 10,000 of these indexes.

284
00:16:25.796 --> 00:16:31.042
So you can click on Data Browser,
you can search for

285
00:16:31.042 --> 00:16:37.753
things, Captain America, and
Captain America sort of pops up.

286
00:16:37.753 --> 00:16:38.820
So give it a try.

287
00:16:38.820 --> 00:16:42.005
Yeah, let me see if my,
yeah, they're numbers now.

288
00:16:42.005 --> 00:16:45.663
Yes, okay, so
now you could do metadata filtering.

289
00:16:45.663 --> 00:16:51.468
So I only wanna see Space Journey

290
00:16:51.468 --> 00:16:56.203
with a rating greater than

291
00:16:58.111 --> 00:17:01.031
&gt;&gt; Scott Moss: 6, there we go.

292
00:17:01.031 --> 00:17:02.081
So that works.

293
00:17:02.081 --> 00:17:05.024
So everything here has
a rating greater than 6.

294
00:17:05.024 --> 00:17:09.635
It's a space journey, actually, I'm a
snob, so give me anything greater than 8.

295
00:17:09.635 --> 00:17:11.568
There we go, WALL-E, wow.

296
00:17:11.568 --> 00:17:13.099
WALL-E that good?

297
00:17:13.099 --> 00:17:16.058
8.4, I mean,
it was a good movie, but damn.

