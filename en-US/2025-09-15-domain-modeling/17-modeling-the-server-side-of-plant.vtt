WEBVTT

1
00:00:00.160 --> 00:00:01.760
And we've already got plant in there.

2
00:00:01.760 --> 00:00:03.920
So let's take a look at what plant is.

3
00:00:05.760 --> 00:00:08.880
It's another metadata
schema wrapped thing.

4
00:00:08.880 --> 00:00:13.120
Ultimately it comes down to this class
where we have plantingDistance already.

5
00:00:13.120 --> 00:00:17.961
And let's see if we can sort of work
our way up from building some of these

6
00:00:17.961 --> 00:00:21.120
server side models and
see how far we can get.

7
00:00:21.120 --> 00:00:24.316
Let's get to a point where we've
persisted some records and

8
00:00:24.316 --> 00:00:26.960
we can see we can console
log a data structure out.

9
00:00:29.560 --> 00:00:32.861
So a lot is already here wired up for
us, but we're gonna have to add some

10
00:00:32.861 --> 00:00:35.240
more interesting data as
we choose to tackle more.

11
00:00:35.240 --> 00:00:42.051
So I'm gonna focus back in on server and
in my entities folder.

12
00:00:42.051 --> 00:00:45.370
We've got garden, and
it's just got a name and description.

13
00:00:45.370 --> 00:00:50.840
So we're gonna need a garden bed,
or we called it just a bed.

14
00:00:52.690 --> 00:00:57.170
Bed in this bounded
context means garden bed.

15
00:00:57.170 --> 00:01:00.597
And then we'll call this a,
well, we already have plant, but

16
00:01:00.597 --> 00:01:03.170
let's get garden bed implemented.

17
00:01:03.170 --> 00:01:06.290
So let's use garden as a starting point.

18
00:01:06.290 --> 00:01:08.370
And we're just gonna say bed.

19
00:01:09.810 --> 00:01:15.010
And this is us just customizing
the name of the database table.

20
00:01:15.010 --> 00:01:15.970
You don't have to do that.

21
00:01:15.970 --> 00:01:19.550
And we'll change the id prefix to bed.

22
00:01:19.550 --> 00:01:26.830
And now we want to
establish a relationship.

23
00:01:26.830 --> 00:01:30.110
And this is ManyToOne.

24
00:01:34.589 --> 00:01:38.665
And this is gonna be Garden,
picking the entity here,

25
00:01:38.665 --> 00:01:41.510
not the thing from the types package.

26
00:01:41.510 --> 00:01:45.708
It's definitely assigned and
it's gonna need the inverse relationship.

27
00:01:45.708 --> 00:01:48.560
So we'll have to set that up over here.

28
00:01:48.560 --> 00:01:50.720
And here we'll have OneToMany.

29
00:01:55.760 --> 00:01:57.200
There's bed.

30
00:01:57.200 --> 00:02:03.532
And this is how to get from bed to garden,

31
00:02:05.492 --> 00:02:08.960
&gt;&gt; Mike North: And resolve the import.

32
00:02:10.160 --> 00:02:10.880
Let's see.

33
00:02:13.546 --> 00:02:16.120
We just return the type there.

34
00:02:16.120 --> 00:02:18.440
We don't invoke a constructor
with parentheses.

35
00:02:19.720 --> 00:02:21.184
Right, now we can finish the other side.

36
00:02:21.184 --> 00:02:26.235
So the factory is garden, not invoking it.

37
00:02:26.235 --> 00:02:30.233
And then this is garden and

38
00:02:30.233 --> 00:02:37.000
the opposite side of that relationship.

39
00:02:37.000 --> 00:02:39.160
So great, we've got this set up.

40
00:02:40.770 --> 00:02:42.770
Let's go back to our domain model here.

41
00:02:45.010 --> 00:02:46.610
We need a width and a height.

42
00:02:49.650 --> 00:02:55.044
So let's implement

43
00:02:55.044 --> 00:02:59.490
that, Column.

44
00:03:07.547 --> 00:03:08.140
&gt;&gt; Mike North: Let's keep it simple.

45
00:03:10.780 --> 00:03:16.220
We've got a width, we've got a height,

46
00:03:18.081 --> 00:03:21.740
&gt;&gt; Mike North: And plant has a position.

47
00:03:21.740 --> 00:03:25.020
Plant has a relationship
with the seed packet.

48
00:03:25.020 --> 00:03:28.573
Let's see if we can just get garden
beds rendering on the screen.

49
00:03:28.573 --> 00:03:33.182
Remember we got that workspace
with zones and that's an array.

50
00:03:33.182 --> 00:03:36.466
Right now it's hard coded
to an empty array and

51
00:03:36.466 --> 00:03:40.440
then each zone has placements
of items within the zone.

52
00:03:40.440 --> 00:03:44.182
But let's see if we can just get
zones rendering on the screen and

53
00:03:44.182 --> 00:03:47.799
then we'll loop back and
get those plant tiles come through.

54
00:03:49.320 --> 00:03:56.992
So to make this work, we're going to
have to go to the domain service, right?

55
00:03:56.992 --> 00:04:00.847
That's always the source of truth for

56
00:04:00.847 --> 00:04:06.638
producing gardens,
producing whatever the entity is.

57
00:04:06.638 --> 00:04:09.796
So we'll go into our
services &gt; garden-service.

58
00:04:15.310 --> 00:04:18.371
&gt;&gt; Mike North: Great, we getAllGardens.

59
00:04:18.371 --> 00:04:21.238
So this will work.

60
00:04:21.238 --> 00:04:24.910
Once we have gardens in our database,
this will return them.

61
00:04:24.910 --> 00:04:26.510
We've got getGardenByID.

62
00:04:29.150 --> 00:04:32.670
And then we've got createExampleGarden.

63
00:04:33.790 --> 00:04:38.512
And I can see here, well,
using the garden repo,

64
00:04:38.512 --> 00:04:44.590
we've got this assertion against
the deep partial of the type.

65
00:04:44.590 --> 00:04:49.044
So we get nice field level errors that
pop up instead of the whole shape turning

66
00:04:49.044 --> 00:04:51.593
into red squiggles if something's wrong.

67
00:04:51.593 --> 00:04:53.000
And then we save it.

68
00:04:53.000 --> 00:04:56.040
And presumably this is what's
passed up into the UI.

69
00:04:56.040 --> 00:05:00.218
And createExampleGarden is
called when the app boots.

70
00:05:00.218 --> 00:05:05.452
This is sort of just getting
us our starting point.

71
00:05:05.452 --> 00:05:12.240
And now we have a beds
array that we could create.

72
00:05:12.240 --> 00:05:15.321
Or let's start our server or resume it..

73
00:05:15.321 --> 00:05:19.480
Actually let's restart it and
see if there are errors.

74
00:05:20.630 --> 00:05:21.670
We should be good.

75
00:05:22.966 --> 00:05:23.928
What's going on?

76
00:05:23.928 --> 00:05:24.870
I know what's going on.

77
00:05:26.470 --> 00:05:29.350
Entity metadata for garden beds not found.

78
00:05:29.350 --> 00:05:35.078
This means go into your data source and
add these new concepts,

79
00:05:35.078 --> 00:05:38.550
bed, and import it like that, save.

80
00:05:40.470 --> 00:05:44.230
And there we go, look at all the plants
servers running on localhost 3000.

81
00:05:44.230 --> 00:05:49.963
So now our data source knows
about the concept of bed and

82
00:05:49.963 --> 00:05:52.960
we're setting this up now.

83
00:05:52.960 --> 00:05:56.760
We haven't really done anything
that makes this any different.

84
00:05:56.760 --> 00:05:58.840
Beds would have been
an empty array either way.

85
00:05:58.840 --> 00:06:02.600
But at least we're sort
of exercising that field.

86
00:06:02.600 --> 00:06:08.537
Great, so after we create the garden and

87
00:06:08.537 --> 00:06:15.890
save it,
&gt;&gt; Mike North: Let's create some beds.

88
00:06:15.890 --> 00:06:20.292
And we need a bed repo,

89
00:06:22.780 --> 00:06:25.650
&gt;&gt; Mike North: Just like that.

90
00:06:27.650 --> 00:06:33.423
And we can say bedRepo.create({}

91
00:06:33.423 --> 00:06:39.020
satisfies DeepPartial&lt;bed&gt;).

92
00:06:41.260 --> 00:06:43.664
And then,

93
00:06:47.136 --> 00:06:53.135
&gt;&gt; Mike North: We'll call this bed1.

94
00:06:53.135 --> 00:06:59.420
bedRepo.save(bed1).

95
00:07:00.940 --> 00:07:02.220
And that should save the bed.

96
00:07:04.870 --> 00:07:06.055
Now if I hit Save,

97
00:07:06.055 --> 00:07:12.070
we're gonna see a bunch of errors because
we have not given the bed what it needs.

98
00:07:12.070 --> 00:07:14.150
There's a lot we need to define there.

99
00:07:14.150 --> 00:07:16.310
Let's see what the error says.

100
00:07:16.310 --> 00:07:18.550
Okay, it needs a width and
it needs a height.

101
00:07:19.990 --> 00:07:22.310
So let's make this a 6 by 6.

102
00:07:28.097 --> 00:07:32.530
&gt;&gt; Mike North: All right, and, it also
should be associated with a garden.

103
00:07:38.736 --> 00:07:40.690
&gt;&gt; Mike North: Use
a little shorthand there.

104
00:07:40.690 --> 00:07:45.879
Great, and let's see what

105
00:07:45.879 --> 00:07:52.878
the API looks like when we hit it now.

106
00:07:55.554 --> 00:07:56.180
&gt;&gt; Mike North: Sorry.

107
00:08:00.219 --> 00:08:04.380
&gt;&gt; Mike North: Interesting, so
we're still not quite there yet.

108
00:08:04.380 --> 00:08:08.380
Let's follow this through from our
domain service into the routing layer.

109
00:08:10.860 --> 00:08:15.820
So that's gonna be in our
application &gt; gardens-router.

110
00:08:17.384 --> 00:08:20.540
Look at this, nothing here, right?

111
00:08:20.540 --> 00:08:27.832
So this is where we need to say,
&gt;&gt; Mike North: Actually,

112
00:08:29.588 --> 00:08:32.180
&gt;&gt; Mike North: Did we model bed yet

113
00:08:32.180 --> 00:08:35.260
in our types package?

114
00:08:35.260 --> 00:08:37.372
I think we did.

115
00:08:37.372 --> 00:08:42.380
Down here, types &gt; src.

116
00:08:42.380 --> 00:08:44.140
We may not have exported them yet.

117
00:08:44.140 --> 00:08:45.580
There's the garden type.

118
00:08:51.014 --> 00:08:55.510
&gt;&gt; Mike North: Yeah, I don't see a bed
here yet, so we'll need to wire that up.

119
00:08:55.510 --> 00:09:00.739
But for now,
let's see if we can just thread something

120
00:09:00.739 --> 00:09:07.190
through as just a very generic zone,
like an array of zones.

121
00:09:07.190 --> 00:09:14.254
So that means we're gonna say gardens,

122
00:09:14.254 --> 00:09:20.080
or no, it's garden.beds map.

123
00:09:22.160 --> 00:09:23.760
And this returns Zone.

124
00:09:26.080 --> 00:09:27.440
So we don't need this anymore.

125
00:09:39.614 --> 00:09:44.436
&gt;&gt; Mike North: And
this will be a bed, bed.id,

126
00:09:44.436 --> 00:09:49.750
oops,
&gt;&gt; Mike North: width, height.

127
00:09:54.082 --> 00:09:55.910
&gt;&gt; Mike North: All right,
and what are we missing?

128
00:09:55.910 --> 00:10:01.750
We need name, description, and placements.

129
00:10:10.987 --> 00:10:11.600
&gt;&gt; Mike North: Leave that empty.

130
00:10:11.600 --> 00:10:13.600
Placements, let's leave it empty as well.

131
00:10:14.960 --> 00:10:19.786
Again, our goal is come up for
air here after

132
00:10:19.786 --> 00:10:24.360
we've introduced this concept of a bed.

133
00:10:24.360 --> 00:10:26.320
Now, what's going on here?

134
00:10:26.320 --> 00:10:28.640
Types of property zone are incompatible.

135
00:10:31.370 --> 00:10:32.890
Placements are incompatible.

136
00:10:38.490 --> 00:10:41.530
&gt;&gt; Mike North: Well, we can, let's see.

137
00:10:43.690 --> 00:10:47.930
satisfies DeepPartial.

138
00:10:47.930 --> 00:10:50.890
We're just trying to get an error
message that's more local.

139
00:10:56.824 --> 00:11:00.020
&gt;&gt; Mike North: Great, okay, so
it's tracking us down to zones.

140
00:11:00.020 --> 00:11:03.940
item.metadata are incompatible
between these types.

141
00:11:03.940 --> 00:11:06.980
So let's see if we can
add some metadata here.

142
00:11:10.848 --> 00:11:12.100
&gt;&gt; Mike North: No,
that's not gonna make it happy.

143
00:11:12.100 --> 00:11:16.971
So what we can do instead is say,

144
00:11:18.890 --> 00:11:22.580
&gt;&gt; Mike North: Can we cast it like that?

145
00:11:33.126 --> 00:11:38.621
&gt;&gt; Mike North: Type of property
placements are incompatible.

146
00:11:40.209 --> 00:11:45.107
&gt;&gt; Mike North: We're gonna cast our

147
00:11:45.107 --> 00:11:51.062
way out of this for now.

148
00:11:51.062 --> 00:11:51.810
&gt;&gt; Mike North: Type unknown.

149
00:11:51.810 --> 00:11:56.210
Interesting, so it's on the item metadata,
so it's really opinionated about this.

150
00:11:56.210 --> 00:11:57.810
What if we get rid of it?

151
00:11:57.810 --> 00:11:58.310
Nope.

152
00:12:11.571 --> 00:12:17.230
&gt;&gt; Mike North: Yeah, that's fine.

153
00:12:17.230 --> 00:12:18.860
&gt;&gt; Mike North: Is it still gonna
yell at me about placements?

154
00:12:25.032 --> 00:12:26.060
&gt;&gt; Mike North: It's the planting distance.

155
00:12:27.820 --> 00:12:30.540
It needs a planting distance on the items.

156
00:12:30.540 --> 00:12:36.140
So let's just create a very
generic placement object here.

157
00:12:43.371 --> 00:12:47.288
&gt;&gt; Mike North: id: '1', position: x: 1,

158
00:12:47.288 --> 00:12:52.169
y: 0,
&gt;&gt; Mike North: And metadata.

159
00:12:54.031 --> 00:12:59.324
&gt;&gt; Mike North: Well,
we can remove the metadata for

160
00:12:59.324 --> 00:13:04.630
now if it's too much in our way here.

161
00:13:12.010 --> 00:13:20.529
&gt;&gt; Mike North: It needs

162
00:13:20.529 --> 00:13:27.831
an item

163
00:13:27.831 --> 00:13:31.482
and

164
00:13:31.482 --> 00:13:40.001
a source

165
00:13:40.001 --> 00:13:45.486
id.

166
00:13:45.486 --> 00:13:49.050
Sorry, that's it.

167
00:13:49.050 --> 00:13:52.170
And this is gonna be our bed id.

168
00:13:52.170 --> 00:13:57.890
But let's see if we can leave
it as empty here and the item.

169
00:14:04.481 --> 00:14:06.850
&gt;&gt; Mike North: Okay,
let's see what's coming through now.

170
00:14:06.850 --> 00:14:10.450
Nope, cannot read properties
of undefined reading map.

171
00:14:10.450 --> 00:14:11.650
garden ,beds.

172
00:14:12.770 --> 00:14:14.130
So let's serialize this.

173
00:14:20.772 --> 00:14:24.451
&gt;&gt; Mike North: Let's just
print it to the console.

174
00:14:25.818 --> 00:14:27.500
&gt;&gt; Mike North: See what we get.

175
00:14:31.951 --> 00:14:33.113
&gt;&gt; Mike North: So there's our garden.

176
00:14:33.113 --> 00:14:35.820
beds is still undefined, interesting.

177
00:14:35.820 --> 00:14:40.860
I'm gonna check our database to see if
we've actually got a garden bed in there.

178
00:14:40.860 --> 00:14:41.420
We do.

179
00:14:42.460 --> 00:14:45.580
The garden id should be set.

180
00:14:45.580 --> 00:14:46.780
Starts with 03.

181
00:14:49.400 --> 00:14:51.094
Yep, that's correct.

182
00:14:51.094 --> 00:14:55.160
The relationships,
we need to traverse the relationship here.

183
00:14:55.160 --> 00:14:59.320
So we're saying getAllGardens,
and here we go.

184
00:15:05.038 --> 00:15:05.880
&gt;&gt; Mike North: Now it'll fetch the beds.

185
00:15:10.469 --> 00:15:12.770
&gt;&gt; Mike North: And our API should
return something more interesting now.

186
00:15:12.770 --> 00:15:15.170
Yep, so there we go.

187
00:15:15.170 --> 00:15:16.010
We have a zone.

188
00:15:16.010 --> 00:15:18.530
We have a placement in there with x and y.

189
00:15:18.530 --> 00:15:21.330
And let's see how our UI responds to this.

190
00:15:22.690 --> 00:15:27.662
Yep, I expect it's still
gonna need a little bit more

191
00:15:27.662 --> 00:15:33.090
because we've very much fudged
this placements object.

192
00:15:33.090 --> 00:15:35.721
So we're gonna need to keep carrying
this through and do these plants.

