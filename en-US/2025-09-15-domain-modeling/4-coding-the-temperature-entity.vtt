WEBVTT

1
00:00:00.320 --> 00:00:04.320
Let's jump into our project and
start implementing this.

2
00:00:06.240 --> 00:00:12.960
So where we're gonna start is in
the Types folder, we're gonna go into.

3
00:00:14.400 --> 00:00:16.160
I'm going to close server for now.

4
00:00:18.240 --> 00:00:22.000
We're in packages types source.

5
00:00:24.880 --> 00:00:27.968
We've got a folder here
called entities and

6
00:00:27.968 --> 00:00:32.030
we've got a folder here
called value Objects.

7
00:00:32.030 --> 00:00:35.517
So I think we have a temperature
value-object to implement here, and

8
00:00:35.517 --> 00:00:36.750
let's start there.

9
00:00:36.750 --> 00:00:38.190
I'm going to create a new file.

10
00:00:38.190 --> 00:00:42.390
Let me close some of this stuff,
which we'll pull up later.

11
00:00:42.390 --> 00:00:46.644
You can leave those tabs open because
those are files we're going to need to

12
00:00:46.644 --> 00:00:48.670
touch temperature.

13
00:00:48.670 --> 00:00:51.659
And I'm just going to follow
the convention here because we're going to

14
00:00:51.659 --> 00:00:53.870
have another temperature
ts that exists elsewhere.

15
00:00:55.510 --> 00:01:01.454
Temperature type ts and let's start
with copying and pasting some code

16
00:01:01.454 --> 00:01:06.416
from an existing value object- [CROSSTALK]
&gt;&gt; Male Speaker 1: Should we

17
00:01:06.416 --> 00:01:09.750
switch branch, or
what branch should we be on?

18
00:01:11.670 --> 00:01:15.653
&gt;&gt; Mike North: You should be on
the ddd-start branch, ddd-start.

19
00:01:19.840 --> 00:01:24.769
&gt;&gt; Mike North: I'll make sure that we keep
that where it is even as this project

20
00:01:24.769 --> 00:01:25.609
evolves.

21
00:01:25.609 --> 00:01:27.651
So we've got a temperature.type here.

22
00:01:27.651 --> 00:01:32.157
I'm going to start by grabbing this
distance type because it's kind of got

23
00:01:32.157 --> 00:01:37.360
some interesting stuff in it and I just
want to get a nice little starting point.

24
00:01:37.360 --> 00:01:41.520
I'll just grab this because a lot of
these will end up looking the same.

25
00:01:41.520 --> 00:01:47.006
So we're importing Zod,
this library for defining schemas,

26
00:01:47.006 --> 00:01:51.570
and we're going to want
a temperature unit schema.

27
00:01:52.690 --> 00:01:57.790
And let's just focus on Celsius and

28
00:01:57.790 --> 00:02:01.700
Fahrenheit, just C and F.

29
00:02:01.700 --> 00:02:07.480
And this is kind of our
source of truth for

30
00:02:07.480 --> 00:02:13.380
what it means to be a temperature unit.

31
00:02:13.380 --> 00:02:15.140
But this isn't a typescript type.

32
00:02:22.580 --> 00:02:24.660
Not going to risk spelling that.

33
00:02:24.660 --> 00:02:29.464
You can see temperature unit
schema refers to a value,

34
00:02:29.464 --> 00:02:32.580
but I'm trying to use it as a type.

35
00:02:32.580 --> 00:02:37.266
So how do we get the type

36
00:02:37.266 --> 00:02:41.470
out of this Z infer?

37
00:02:46.990 --> 00:02:48.030
Just like this.

38
00:02:48.030 --> 00:02:50.030
So we've got a TemperatureUnit.

39
00:02:50.030 --> 00:02:51.230
And look at this down here.

40
00:02:51.230 --> 00:02:52.670
This is what we want.

41
00:02:52.670 --> 00:02:54.901
So this lets you define a Zod schema and

42
00:02:54.901 --> 00:02:57.790
extract the TypeScript
type that matches it.

43
00:02:57.790 --> 00:02:59.230
Why is this so important?

44
00:02:59.230 --> 00:03:03.750
This ensures that your compile time,
type checking and your runtime validation

45
00:03:03.750 --> 00:03:07.680
of objects that sort of flow through
the schema are very well aligned.

46
00:03:07.680 --> 00:03:10.510
It's useful to have a source of truth

47
00:03:10.510 --> 00:03:14.720
where both things originate
from the same structure.

48
00:03:16.400 --> 00:03:20.720
We'll export this as a symbol so
other parts of our code base can use it.

49
00:03:20.720 --> 00:03:22.800
Yes.
Question from online.

50
00:03:22.800 --> 00:03:27.680
&gt;&gt; Male Speaker 1: Why are we adding
validation logic inside the type.ts file?

51
00:03:28.960 --> 00:03:30.560
&gt;&gt; Mike North: That's a good question.

52
00:03:30.560 --> 00:03:33.810
Maybe I should have called this common or
core.

53
00:03:33.810 --> 00:03:38.503
If you look at other modules in this file,
this is a module that

54
00:03:38.503 --> 00:03:43.730
contains the structures of the data
that we'll be working with.

55
00:03:43.730 --> 00:03:47.323
But this does not include
just pure type information.

56
00:03:47.323 --> 00:03:51.800
There are some type guards here.

57
00:03:51.800 --> 00:03:54.494
This is checking to see if
something is a valid distance unit.

58
00:03:54.494 --> 00:03:56.350
And we may have similar things.

59
00:03:56.350 --> 00:04:01.160
So perhaps a poor name of the package on
my part, but you can think of this as

60
00:04:01.160 --> 00:04:05.198
conceptually representing
the shapes of the value objects,

61
00:04:05.198 --> 00:04:10.167
the shapes of the entities, the shapes
of the request and response shapes,

62
00:04:10.167 --> 00:04:13.220
like the HTTP request
response shape pairs.

63
00:04:13.220 --> 00:04:17.940
But we have a schema here that's
not just pure type information.

64
00:04:17.940 --> 00:04:23.604
And we may have type guards that make
sense to put in the closest place we

65
00:04:23.604 --> 00:04:29.850
can put them with the objects that they
relate to, the shapes they relate to.

66
00:04:33.530 --> 00:04:37.445
So we've exported the schema because
that's going to be useful for

67
00:04:37.445 --> 00:04:40.730
whoever's using this to
do runtime validations.

68
00:04:40.730 --> 00:04:43.930
We'll export the type, but
this is just the C and the F, right?

69
00:04:43.930 --> 00:04:45.450
It's just the unit.

70
00:04:45.450 --> 00:04:50.490
So we're going to need just
to prove that this works.

71
00:04:50.490 --> 00:04:52.386
Now, temperature unit, like,

72
00:04:52.386 --> 00:04:55.850
the only error we're getting
is this is an unused variable.

73
00:04:55.850 --> 00:05:00.410
So this is the type that we can
kind of carry forward in our code.

74
00:05:00.410 --> 00:05:05.366
We're going to do something very similar
with the monthly temperature range, but

75
00:05:05.366 --> 00:05:08.730
we're going to create that
as a different file here.

76
00:05:08.730 --> 00:05:12.490
So I'm just going to format this
really quickly and hit save.

77
00:05:12.490 --> 00:05:18.010
And we're going to create an entity now,
or the shape of the entity at least.

78
00:05:19.660 --> 00:05:23.740
So I'm going to create a new
file in this Entities folder.

79
00:05:23.740 --> 00:05:27.959
So you're in the Types package,

80
00:05:27.959 --> 00:05:32.178
source entities, new file, and

81
00:05:32.178 --> 00:05:37.340
monthly temperature range type ts.

82
00:05:37.340 --> 00:05:40.069
You can name it whatever you like,
but name it like I did and

83
00:05:40.069 --> 00:05:41.980
your code will stay in sync.

84
00:05:41.980 --> 00:05:47.454
We'll need Zod just as before, and

85
00:05:47.454 --> 00:05:52.747
here we're defining our schema,

86
00:05:52.747 --> 00:05:58.600
and this is going to be an object type.

87
00:05:58.600 --> 00:06:02.618
Like conceptually,

88
00:06:02.618 --> 00:06:07.305
what we want is something

89
00:06:07.305 --> 00:06:12.885
that kind of looks like this,

90
00:06:12.885 --> 00:06:17.130
something like that.

91
00:06:18.890 --> 00:06:23.130
So we're gonna look at this example and
let's see how we can articulate that here.

92
00:06:23.130 --> 00:06:25.290
Question from the chat.

93
00:06:25.290 --> 00:06:29.130
&gt;&gt; Male Speaker 1: Why does it make sense
for a temperature range to have an id?

94
00:06:29.130 --> 00:06:32.570
It seems more like an attribute
of the actual entity.

95
00:06:33.770 --> 00:06:34.970
&gt;&gt; Mike North: That's a good question.

96
00:06:34.970 --> 00:06:37.903
If we look back here,
going back to this discussion,

97
00:06:37.903 --> 00:06:41.760
we could have said we have a temperature
range that's a value object.

98
00:06:41.760 --> 00:06:46.526
And you can think of this as just
the concept of Having a min and a max, and

99
00:06:46.526 --> 00:06:51.720
maybe we find multiple uses for
temperature range in the future.

100
00:06:51.720 --> 00:06:54.200
At this point, I think it's.

101
00:06:54.200 --> 00:06:58.985
It could go either way where we
either say we're kind of embedding

102
00:06:58.985 --> 00:07:03.770
this concept of a temperature range
with this concept of a month,

103
00:07:03.770 --> 00:07:07.950
a monthly piece of temperature
data with a low and a high.

104
00:07:07.950 --> 00:07:10.990
We can always tease that
out later if we need to.

105
00:07:10.990 --> 00:07:15.727
But really this just comes down to whether
you want to make the choice to tease

106
00:07:15.727 --> 00:07:18.614
that abstraction out right from the start,
or

107
00:07:18.614 --> 00:07:23.150
whether you want to see it emerge as
something like a temperature range.

108
00:07:23.150 --> 00:07:27.720
Emerge as something that's useful beyond
this monthly temperature data, and

109
00:07:27.720 --> 00:07:29.820
we'll see how that goes.

110
00:07:29.820 --> 00:07:33.548
Like, we still have a choice to evolve
this in the future because ultimately

111
00:07:33.548 --> 00:07:35.540
we're going to have this API contract.

112
00:07:35.540 --> 00:07:40.675
We create like a request and response
shape so we can internally start to model

113
00:07:40.675 --> 00:07:45.580
this as a temperature range and then
have like a month that embeds a range.

114
00:07:45.580 --> 00:07:49.059
Like, we could totally set up
our data model that way, but

115
00:07:49.059 --> 00:07:52.300
preserve the existing API
contract if we had to.

116
00:07:52.300 --> 00:07:55.817
As we're defining our schema,
we're going to start with Z object and

117
00:07:55.817 --> 00:07:58.250
that all we're doing is this part here.

118
00:07:58.250 --> 00:08:01.290
This shape starts with being an object.

119
00:08:03.450 --> 00:08:06.810
We've got an id, which is a string.

120
00:08:08.010 --> 00:08:11.850
We've got a month, which is a.

121
00:08:11.850 --> 00:08:16.730
We could do a number, but
Zod also lets us do an integer.

122
00:08:17.850 --> 00:08:20.530
Remember, there's runtime
validation that happens here.

123
00:08:20.530 --> 00:08:23.740
We can actually like
as we check this data.

124
00:08:23.740 --> 00:08:29.740
This is a constraint that goes beyond just
the number type that exists in JavaScript.

125
00:08:30.780 --> 00:08:35.260
Then we've got the temperatures min and
max.

126
00:08:38.140 --> 00:08:45.840
What we're going to do here is
use the temperature schema,

127
00:08:45.840 --> 00:08:51.230
which I think we forgot
to do a piece here,

128
00:08:51.230 --> 00:08:57.350
but we want the temperature schema now.

129
00:08:57.350 --> 00:09:02.230
We never finished our work on the previous
file, so now's a good time to finish it.

130
00:09:02.230 --> 00:09:04.150
This is what we want.

131
00:09:04.150 --> 00:09:06.550
So all we have is temperature unit here.

132
00:09:06.550 --> 00:09:09.110
Sorry to switch back and
forth a little bit.

133
00:09:09.110 --> 00:09:13.434
We can finish and say the concept of

134
00:09:13.434 --> 00:09:18.953
a temperature is it
starts with an object and

135
00:09:18.953 --> 00:09:24.172
it's got a value, which is a number, and

136
00:09:24.172 --> 00:09:30.560
it's got a unit,
which is a temperature unit.

137
00:09:30.560 --> 00:09:35.290
And you can point right to
the schema that we just defined for

138
00:09:35.290 --> 00:09:36.999
sort of the C or the F.

139
00:09:36.999 --> 00:09:42.510
Then similarly, we can just copy
the same thing that we used before,

140
00:09:42.510 --> 00:09:47.370
but instead of temperature unit,
it's just temperature.

141
00:09:48.890 --> 00:09:54.210
So now we have the unit and
then we're wrapping it in this object.

142
00:09:54.210 --> 00:09:57.596
So it's the value and
the unit and in both Cases,

143
00:09:57.596 --> 00:10:00.330
we export both the schema and the type.

144
00:10:02.010 --> 00:10:08.382
So when we go back to our
monthly temperature record now,

145
00:10:08.382 --> 00:10:13.824
this will resolve and
we'll use it for the min and

146
00:10:13.824 --> 00:10:20.890
the max with a comma and export it and
then finally get the type.

147
00:10:33.620 --> 00:10:34.180
There we go.

148
00:10:34.180 --> 00:10:39.460
If we look at this,
there's our monthly temperature range.

149
00:10:39.460 --> 00:10:42.900
Let me get rid of the terminal so
everyone can see.

150
00:10:52.100 --> 00:10:53.860
That's the structure that we came up with.

151
00:10:53.860 --> 00:10:58.104
We have an id, we have the number of
the month, and then we have the min and

152
00:10:58.104 --> 00:10:58.670
the max.

153
00:11:00.110 --> 00:11:01.618
Yes.
&gt;&gt; Male Speaker 2: Should we limit month

154
00:11:01.618 --> 00:11:03.710
to be 1 through 12?

155
00:11:03.710 --> 00:11:04.830
&gt;&gt; Mike North: Good point.

156
00:11:04.830 --> 00:11:09.310
Yeah, does it make sense
to have month be -16?

157
00:11:09.310 --> 00:11:10.270
Probably not.

158
00:11:11.870 --> 00:11:14.990
And Zod lets us do this.

159
00:11:14.990 --> 00:11:17.950
We can say min is.

160
00:11:19.310 --> 00:11:23.070
What should we use here,
1 through 12 or 0 through 11?

161
00:11:23.070 --> 00:11:24.430
&gt;&gt; Male Speaker 3: Zero.
&gt;&gt; Male Speaker 4: Zero.

162
00:11:24.430 --> 00:11:25.630
&gt;&gt; Mike North: Let's do 0 through 11.

163
00:11:25.630 --> 00:11:27.310
Why do we want to use 0 through 11?

164
00:11:27.310 --> 00:11:29.550
&gt;&gt; Male Speaker 3: JavaScript,
I think that's how it is.

165
00:11:29.550 --> 00:11:32.310
&gt;&gt; Mike North: It's gonna line up really
well with the date object, right?

166
00:11:32.310 --> 00:11:35.390
We can just grab, like get the month
number and it should work.

167
00:11:37.950 --> 00:11:38.669
So there you go.

168
00:11:38.669 --> 00:11:43.089
So now when we use this to validate data,

169
00:11:43.089 --> 00:11:46.990
we can ensure that it is an integer.

170
00:11:46.990 --> 00:11:49.070
Here's the min, here's the max.

171
00:11:49.070 --> 00:11:53.310
And you can even add
things like a description.

172
00:11:56.590 --> 00:11:59.994
No, is it describe or description?

173
00:11:59.994 --> 00:12:02.085
Yes, there's the description.

174
00:12:02.085 --> 00:12:06.532
And this will like when there are error
messages or if you use this to generate

175
00:12:06.532 --> 00:12:11.119
a JSON schema of some sort, these will be
like what is applied on the tooltips as

176
00:12:11.119 --> 00:12:16.190
you're sort of hovering over a file
that's conforming to the schema.

177
00:12:16.190 --> 00:12:20.510
So we have our types,
we have to handle this piece here.

178
00:12:22.510 --> 00:12:29.477
The way we'll do that is
we'll say monthly temps,

179
00:12:29.477 --> 00:12:34.830
monthly temperature range schema.

180
00:12:34.830 --> 00:12:38.670
And we don't want just one,
we want an array.

181
00:12:38.670 --> 00:12:39.759
If we were to do this,

182
00:12:39.759 --> 00:12:44.670
we'd get an error because that's just
treating it like it's type information.

183
00:12:44.670 --> 00:12:50.670
We want a Z array and
that is the member type of the array.

184
00:12:53.150 --> 00:13:00.503
And so now if we were to look at what
this location type ends up being like,

185
00:13:00.503 --> 00:13:06.910
you can see it sort of embeds all
of this nice information here.

186
00:13:08.040 --> 00:13:11.560
So we've got the location,
the monthly temps, the min and the max.

187
00:13:11.560 --> 00:13:14.518
We're really articulating
a reasonable structure here for

188
00:13:14.518 --> 00:13:16.492
how we think about these temperatures.

189
00:13:21.480 --> 00:13:24.608
&gt;&gt; Male Speaker 2: Mike, wouldn't we want
to put a location ID on that monthly

190
00:13:24.608 --> 00:13:26.840
temperature range schema?

191
00:13:26.840 --> 00:13:29.480
&gt;&gt; Mike North: Yeah,
that's a good question.

192
00:13:29.480 --> 00:13:30.760
We could do it both ways.

193
00:13:30.760 --> 00:13:33.930
In fact, tell me how you think about.

194
00:13:33.930 --> 00:13:35.290
&gt;&gt; Male Speaker 2: Well,
you're gonna store it in a table.

195
00:13:35.290 --> 00:13:40.090
And so
each of those would have one location.

196
00:13:40.090 --> 00:13:43.450
And then when you get the locations,
you resolve from the other table.

197
00:13:43.450 --> 00:13:45.137
&gt;&gt; Mike North: Yep.
&gt;&gt; Male Speaker 2: You're not gonna store

198
00:13:45.137 --> 00:13:48.985
an array of IDs on the location table for
monthly temperature ranges.

199
00:13:48.985 --> 00:13:51.050
You're gonna resolve
that from the database.

200
00:13:52.410 --> 00:13:53.370
&gt;&gt; Mike North: That's a great point.

201
00:13:54.810 --> 00:13:59.656
So we could either say the location schema
embeds the monthly temperatures, or

202
00:13:59.656 --> 00:14:03.777
we could say, well, wait a minute,
those monthly temperatures,

203
00:14:03.777 --> 00:14:07.930
they're entities and we want sort
of the belongs to relationship.

204
00:14:07.930 --> 00:14:15.490
We want the monthly temperature
to belong to a location.

205
00:14:15.490 --> 00:14:17.010
And we can totally do that.

206
00:14:17.010 --> 00:14:19.010
In fact,
I think that's a better way to do that.

207
00:14:19.010 --> 00:14:22.013
Like just looking at the UI
we're trying to provide here,

208
00:14:22.013 --> 00:14:24.050
ultimately we wanna get this working.

209
00:14:24.050 --> 00:14:26.961
We want to have a list of
locations that pops up and

210
00:14:26.961 --> 00:14:30.800
we don't need to pass all those
temperature ranges up to the ui.

211
00:14:30.800 --> 00:14:35.209
So if this is part of like something
that we seek to embed in an API

212
00:14:35.209 --> 00:14:40.360
contract of some sort,
that's kind of unnecessary to include.

213
00:14:40.360 --> 00:14:45.648
So the other way to do this
is to go back to monthly

214
00:14:45.648 --> 00:14:52.520
temperature range schema and
say something like that.

215
00:14:52.520 --> 00:14:57.870
And now we can kind of like
behind the scenes find those.

216
00:14:57.870 --> 00:15:01.270
This never really ends up
being exposed to our API.

217
00:15:01.270 --> 00:15:03.630
So this is more of sort
of a backend concept.

218
00:15:03.630 --> 00:15:07.470
This would let us query by location and
sort them by month.

219
00:15:07.470 --> 00:15:09.950
And then we have the points on our line.

220
00:15:09.950 --> 00:15:10.450
That's great.

221
00:15:16.830 --> 00:15:17.710
&gt;&gt; Mike North: So there you go.

222
00:15:17.710 --> 00:15:21.893
So we've created a little bit of a soft
edge on that relationship there,

223
00:15:21.893 --> 00:15:24.922
where we know that this has
to be a valid location id.

224
00:15:31.340 --> 00:15:35.260
&gt;&gt; Mike North: And then location
type just ends up being this, right?

225
00:15:35.260 --> 00:15:36.553
Great for a dropdown.

