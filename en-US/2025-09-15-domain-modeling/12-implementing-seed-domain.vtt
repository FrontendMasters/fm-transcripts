WEBVTT

1
00:00:00.400 --> 00:00:02.120
&gt;&gt; Mike North: So
this is what we're trying to do now.

2
00:00:02.120 --> 00:00:05.658
If you notice in our
example app we've got,

3
00:00:05.658 --> 00:00:10.000
we've got quite a few
seeds coming through here.

4
00:00:10.000 --> 00:00:13.508
And this is because we're
actually reading that file and

5
00:00:13.508 --> 00:00:16.880
passing some of the most
basic possible data through.

6
00:00:18.400 --> 00:00:20.960
And now we can start to.

7
00:00:20.960 --> 00:00:24.636
But you know, you see there's like
net wait, I have no idea, maybe that's

8
00:00:24.636 --> 00:00:28.970
a string we can search for and put
something meaningful there in the future.

9
00:00:28.970 --> 00:00:34.490
And we're going to try to fill in some of
this information that's on the back here.

10
00:00:34.490 --> 00:00:37.290
Days to harvest is an interesting one.

11
00:00:37.290 --> 00:00:42.250
That's another time related
thing that came up.

12
00:00:42.250 --> 00:00:45.450
I don't know, let's say for the purpose
of this, that's our starting point.

13
00:00:45.450 --> 00:00:49.054
We're going to build that version of the
software, we'll show it to our user and

14
00:00:49.054 --> 00:00:50.810
let's see what they think about that.

15
00:00:53.210 --> 00:00:53.710
Great.

16
00:00:54.900 --> 00:00:57.187
So we're going to build this and

17
00:00:57.187 --> 00:01:01.260
we're going to have to touch
a couple different places.

18
00:01:01.260 --> 00:01:04.340
Well, first off there's
a seed packets service.

19
00:01:04.340 --> 00:01:06.020
Remember these are our domain services.

20
00:01:06.020 --> 00:01:10.137
You're going to find that this
thing has some methods and

21
00:01:10.137 --> 00:01:12.967
it mostly deals with just seed packet,

22
00:01:12.967 --> 00:01:18.100
all of the request response stuff
above this part of our server.

23
00:01:18.100 --> 00:01:21.765
And while we may end up making sure
data threads through properly,

24
00:01:21.765 --> 00:01:25.800
we're not going to be hopefully
spending too much time there.

25
00:01:25.800 --> 00:01:29.950
So we need to touch a couple methods
in there, parse seed packet so

26
00:01:29.950 --> 00:01:33.649
that as we read this data file
we can grab pieces of data that

27
00:01:33.649 --> 00:01:38.520
are interesting that are not quite
represented on this model yet.

28
00:01:38.520 --> 00:01:41.422
And we also may want to take
a look at get all seed packets,

29
00:01:41.422 --> 00:01:44.400
although I think things should
just sort of pass through.

30
00:01:44.400 --> 00:01:49.020
But this is the list where when
we're like our UI is requesting all

31
00:01:49.020 --> 00:01:52.470
the seed packets to
generate those components.

32
00:01:52.470 --> 00:01:53.590
This is what it's hitting.

33
00:01:55.670 --> 00:02:00.774
In our types package we have request and
response shapes and

34
00:02:00.774 --> 00:02:06.490
this is the API route that handles
the actual incoming requests and

35
00:02:06.490 --> 00:02:13.830
then delegates the fetching of the list
of seed packets to that domain service.

36
00:02:13.830 --> 00:02:21.185
Again, a nice separation between
request response responsibilities and

37
00:02:21.185 --> 00:02:27.030
the core thing that is dealing
with the seed packet domain.

38
00:02:30.390 --> 00:02:34.186
We also have a couple UI components
which we'll come back to this.

39
00:02:34.186 --> 00:02:38.470
Let's start with the back-end and
trickle it up.

40
00:02:38.470 --> 00:02:42.884
But there are two UI components
where we can thread through some of

41
00:02:42.884 --> 00:02:46.174
the data once we incorporate
it into the model and

42
00:02:46.174 --> 00:02:50.280
see that it's coming through
in the HTTP response.

43
00:02:50.280 --> 00:02:55.720
So let's begin, and
don't overlook this point.

44
00:02:55.720 --> 00:03:00.975
So we have a generic packet concept
that the UI understands, but

45
00:03:00.975 --> 00:03:07.080
it has a metadata object that lets
us add additional information.

46
00:03:07.080 --> 00:03:11.682
And this is a good example of like,
the API contract looks very different

47
00:03:11.682 --> 00:03:16.070
potentially than the way we're
going to articulate our data model.

48
00:03:16.070 --> 00:03:20.359
We may have a rich seed packet
class in our backend, but

49
00:03:20.359 --> 00:03:24.670
our UI looks at things
a little bit differently.

50
00:03:24.670 --> 00:03:29.582
So we're going to show how we can
adapt between those two contracts

51
00:03:29.582 --> 00:03:34.407
without letting any of that request
response stuff bleed into our

52
00:03:34.407 --> 00:03:39.231
server side data model, which is the,
you know, it's the thing

53
00:03:39.231 --> 00:03:44.250
that should be like the most clear
representation of this concept.

54
00:03:45.610 --> 00:03:46.170
Great.

55
00:03:46.170 --> 00:03:48.410
So where we're going to start is loading.

56
00:03:48.410 --> 00:03:50.090
Sorry, we're going to
start with the model.

57
00:03:50.090 --> 00:03:55.930
Let's begin diving into the implementation
by extending the seed packet model.

58
00:03:55.930 --> 00:04:02.650
And here's where we're going
to look in our types package.

59
00:04:05.340 --> 00:04:08.748
Remember, this is where we have our
value objects and our entities and

60
00:04:08.748 --> 00:04:11.420
the resources which
are the request response shapes.

61
00:04:12.460 --> 00:04:16.940
Let's look at entities and
seed packet metadata.

62
00:04:20.700 --> 00:04:23.340
I want to show you how
this is threaded through.

63
00:04:23.340 --> 00:04:28.740
We've got a generic packet type which
just has a name, a description,

64
00:04:28.740 --> 00:04:34.770
a category, and then this thing called
a presentation, which if we look at it,

65
00:04:34.770 --> 00:04:39.520
it's like a path to an icon and
an accent color of some sort.

66
00:04:39.520 --> 00:04:45.364
If we look at our UI like the accent
color is sort of the background

67
00:04:45.364 --> 00:04:49.920
behind the icon and
it varies from plant to plant.

68
00:04:50.960 --> 00:04:56.490
This is a GPT estimated color
that represents the plant.

69
00:04:56.490 --> 00:04:58.530
And so we have accent colors there.

70
00:04:58.530 --> 00:05:01.610
But there's not much here.

71
00:05:01.610 --> 00:05:03.090
It's just purely.

72
00:05:03.090 --> 00:05:06.210
This could be like a packet of snacks or
something.

73
00:05:06.210 --> 00:05:09.970
Like, there's nothing
plant ish about this yet.

74
00:05:09.970 --> 00:05:18.383
But we have a function here which takes
in a metadata schema as an argument and

75
00:05:18.383 --> 00:05:24.470
it creates a new type with
that metadata schema on it.

76
00:05:24.470 --> 00:05:31.030
So if we look at the seed packet type,
you can see we're doing exactly that.

77
00:05:31.030 --> 00:05:32.787
We're creating a packet type and

78
00:05:32.787 --> 00:05:37.110
we have this metadata schema that's
being sort of tacked onto it.

79
00:05:37.110 --> 00:05:39.430
This is our seed packet.

80
00:05:39.430 --> 00:05:43.190
And so all that's left for
us to do is to enrich this.

81
00:05:43.190 --> 00:05:49.680
So we already have a quantity here and we
can start to add on, add on other things.

82
00:05:49.680 --> 00:05:53.360
So we want just to refresh my memory here.

83
00:05:54.640 --> 00:05:56.880
Days to harvest.

84
00:05:56.880 --> 00:05:58.400
We want days to harvest.

85
00:05:58.400 --> 00:06:00.411
And that's usually by the way,

86
00:06:00.411 --> 00:06:05.360
the time from planting the seed to when
you expect to get something to eat.

87
00:06:05.360 --> 00:06:08.591
Well, the best time to
get something to eat,

88
00:06:08.591 --> 00:06:13.280
I guess you can eat small plants,
but usually not worth the work.

89
00:06:14.820 --> 00:06:15.460
So great.

90
00:06:19.700 --> 00:06:23.460
In this case, we're already saying days.

91
00:06:23.460 --> 00:06:27.729
We could make it time to harvest, but

92
00:06:27.729 --> 00:06:33.060
we just want days to harvest here or
even int.

93
00:06:33.060 --> 00:06:34.740
&gt;&gt; Male: Because that would be an integer.

94
00:06:34.740 --> 00:06:35.860
&gt;&gt; Mike North: Great.

95
00:06:35.860 --> 00:06:39.540
Anything else has to be greater than zero.

96
00:06:40.810 --> 00:06:41.310
Great.

97
00:06:44.090 --> 00:06:46.330
I'm not even going to say less than 365.

98
00:06:47.450 --> 00:06:49.012
You can grow a fig tree and

99
00:06:49.012 --> 00:06:54.090
it takes 10 years before you're going to
actually get figs for the first time.

100
00:06:55.210 --> 00:06:57.290
But negative time is not a thing.

101
00:06:57.290 --> 00:07:01.370
If you find a seed that you can
harvest in negative time, let me know.

102
00:07:01.370 --> 00:07:04.490
That seems like solving world
hunger kind of discovery.

103
00:07:08.020 --> 00:07:09.700
Now this is squirrely.

104
00:07:09.700 --> 00:07:12.900
Like, I don't know,
do an empty seed packet,

105
00:07:12.900 --> 00:07:15.380
does that belong in our collection?

106
00:07:15.380 --> 00:07:17.460
We'll leave that problem for another day.

107
00:07:17.460 --> 00:07:20.908
But like you could say one
is the minimum here so

108
00:07:20.908 --> 00:07:24.340
that you actually hit a validation error.

109
00:07:24.340 --> 00:07:28.034
And potentially you could use
that to drive business logic and

110
00:07:28.034 --> 00:07:32.156
say we're removing the seed packet
from the collection as soon as you

111
00:07:32.156 --> 00:07:35.300
mutate this entity and
say, okay, quantity zero.

112
00:07:35.300 --> 00:07:37.820
Now it's like, well,
something else has to happen.

113
00:07:37.820 --> 00:07:39.260
We're actually removing the record.

114
00:07:41.420 --> 00:07:44.220
Let's look back at the back
of our packet here.

115
00:07:45.740 --> 00:07:47.500
Let's pick one of these instructions.

116
00:07:47.500 --> 00:07:48.946
How about the SO instructions?

117
00:07:48.946 --> 00:07:54.777
Because I do recall on the back

118
00:07:54.777 --> 00:08:02.016
of our seed packet, we had seed dec.

119
00:08:02.016 --> 00:08:07.615
Depth an eighth of an inch,
plant spacing 24 inches apart.

120
00:08:07.615 --> 00:08:09.535
That seems pretty important.

121
00:08:09.535 --> 00:08:12.330
So those are planting instructions,
you could think of them that way.

122
00:08:12.330 --> 00:08:16.815
Also we might find some
date something here.

123
00:08:16.815 --> 00:08:21.375
So let's see if we can fish in our
raw data model that represents that

124
00:08:21.375 --> 00:08:24.815
YAML file and
dig up something interesting there.

125
00:08:26.655 --> 00:08:28.175
I do want to add one more thing.

126
00:08:40.655 --> 00:08:42.255
I want to add planting distance.

127
00:08:42.255 --> 00:08:44.735
And I'm doing this because
I know where we're going.

128
00:08:44.735 --> 00:08:50.106
I know we're going to aim for
this like gardening thing

129
00:08:50.106 --> 00:08:55.625
gardening app where you
can drag plants onto grid.

130
00:08:55.625 --> 00:09:00.211
And I know that we're going to want to
know what the size of those plants are so

131
00:09:00.211 --> 00:09:02.825
that we can sort of plan for, for that.

132
00:09:02.825 --> 00:09:07.465
And we're going to want to have
planting distance as part of that.

133
00:09:07.465 --> 00:09:15.225
Especially if as we were talking about,
like a plant probably derives from a seed.

134
00:09:15.225 --> 00:09:19.858
You want to have information on this
that is very useful in terms of

135
00:09:19.858 --> 00:09:21.215
modeling a plant.

136
00:09:22.975 --> 00:09:29.215
Just checking packet real carefully,
make sure we don't duplicate our work.

137
00:09:29.215 --> 00:09:30.925
So we have a category,

138
00:09:30.925 --> 00:09:35.695
let's call that like we had a plant
family in our drawing here.

139
00:09:38.575 --> 00:09:40.055
So we've already got quantity.

140
00:09:40.055 --> 00:09:42.615
Let's say like category
kind of meets this need.

141
00:09:42.615 --> 00:09:48.665
At least for the API contract we'll
get that expiration date and name.

142
00:09:48.665 --> 00:09:51.545
Name is already on packet
as well as category.

143
00:09:51.545 --> 00:09:56.048
So like this and
this kind of get what we want and

144
00:09:56.048 --> 00:09:59.865
then expires at, we can add that here.

145
00:10:03.065 --> 00:10:07.673
And because this is an API contract,
I'm going to make this

146
00:10:07.673 --> 00:10:12.844
a string because we can't send date
objects over the wire as it is.

147
00:10:15.164 --> 00:10:19.724
Great, so that's done.

148
00:10:19.724 --> 00:10:22.903
Now let's turn our eye
towards the server and

149
00:10:22.903 --> 00:10:27.163
that is where we're going to
build the real entity here.

150
00:10:27.163 --> 00:10:30.683
So we're going to go into
server source entities and

151
00:10:30.683 --> 00:10:33.084
we already have a seed packet here.

152
00:10:33.084 --> 00:10:36.844
And there's already kind of
a starting point of some sort.

153
00:10:36.844 --> 00:10:39.404
We have a basic representation of a plant.

154
00:10:42.255 --> 00:10:45.015
Many plants come from
a single seed packet.

155
00:10:45.015 --> 00:10:47.135
So this is just part of our
starting point modeling.

156
00:10:47.135 --> 00:10:50.335
Not all of this needs to
be exposed through our API.

157
00:10:50.335 --> 00:10:52.975
This can be a richer model.

158
00:10:52.975 --> 00:10:56.255
We've already got a name,
a description, a quantity here.

159
00:10:56.255 --> 00:11:01.135
Now remember, this is going
to be like metadata quantity.

160
00:11:01.135 --> 00:11:05.332
When we're dealing with
that serialized shape that,

161
00:11:05.332 --> 00:11:09.799
that we pass back to the UI category,
that's going to be on

162
00:11:09.799 --> 00:11:14.375
the top level because it's
part of category here, right?

163
00:11:15.975 --> 00:11:19.549
It's got the presentation and
this is like, take it from me,

164
00:11:19.549 --> 00:11:21.215
this is a one to one mapping.

165
00:11:21.215 --> 00:11:25.255
It's the icon, it's the accent color and
then planting distance.

166
00:11:25.255 --> 00:11:29.495
So it's fine to represent
all of this that way.

167
00:11:29.495 --> 00:11:32.345
We need one more thing,
an expiration date.

168
00:11:32.345 --> 00:11:36.701
I think we can always come

169
00:11:36.701 --> 00:11:41.473
back here if we need more and

170
00:11:41.473 --> 00:11:46.038
we'll just make this like

171
00:11:46.038 --> 00:11:51.025
a standardized timestamp.

172
00:11:53.585 --> 00:11:55.665
Easiest, easiest way to
go about doing this.

173
00:11:56.955 --> 00:11:58.075
In fact, we don't even need this.

174
00:11:58.075 --> 00:12:03.835
It will infer based on string that
it should make it a text field.

175
00:12:12.075 --> 00:12:13.875
I think we should be good here.

176
00:12:13.875 --> 00:12:16.315
But let's see, SQLiteConstraint.

177
00:12:19.755 --> 00:12:21.635
That might have been at
the top of my buffer there.

178
00:12:21.635 --> 00:12:23.185
Nope, it's at the bottom.

179
00:12:23.185 --> 00:12:25.025
So what's going on here?

180
00:12:25.025 --> 00:12:26.065
Insert into.

181
00:12:26.065 --> 00:12:30.589
And then it's got the SQL insert
statement with these parameters and

182
00:12:30.589 --> 00:12:32.465
says not null constraint.

183
00:12:32.465 --> 00:12:36.945
Failed, seed packets expires at.

184
00:12:36.945 --> 00:12:42.091
So somewhere we're trying to create
a seed packet, but we've just added

185
00:12:42.091 --> 00:12:47.745
this expiresAt field and it appears that
by default this is not a nullable field.

186
00:12:47.745 --> 00:12:52.913
Now, we could make it one and
the error should go away, but

187
00:12:52.913 --> 00:12:58.205
I kind of want every seed packet
to have an expiration date.

188
00:12:58.205 --> 00:13:02.884
So let's not make it nullable and
let's fix this error by having that

189
00:13:02.884 --> 00:13:06.605
field get populated with data
as we loaded from a file.

190
00:13:07.645 --> 00:13:13.725
We'll leave this at smallest level so
we can kind of see it when it gets fixed.

191
00:13:13.725 --> 00:13:20.405
So where we're gonna go next is
the seed service, seed packet service.

192
00:13:24.565 --> 00:13:27.285
At a high level,
two things are happening here.

193
00:13:28.965 --> 00:13:34.215
We've got a function called
parse seedpacket and

194
00:13:34.215 --> 00:13:36.965
it takes in a repository.

195
00:13:36.965 --> 00:13:40.428
Remember, that's the same concept
we were dealing with before, but

196
00:13:40.428 --> 00:13:44.505
apparently I am provided a repository
when this function is called.

197
00:13:44.505 --> 00:13:47.945
And then it's got this thing
called raw seed packet info.

198
00:13:47.945 --> 00:13:52.211
And this is the monster type with

199
00:13:52.211 --> 00:13:57.425
everything that's in that YAML file.

200
00:13:57.425 --> 00:14:03.825
This is a very, very,
very detailed seed packet type.

201
00:14:03.825 --> 00:14:06.087
And the point, we'll sort of fish around,

202
00:14:06.087 --> 00:14:10.025
cuz we have nice little type-ahead 
in TypeScript for the data we need.

203
00:14:10.025 --> 00:14:13.065
Or we'll look at the YAML file to
figure out where to go and fish for it.

204
00:14:13.065 --> 00:14:17.825
But what we have to return
is the seed packet entity.

205
00:14:17.825 --> 00:14:23.512
So this function represents getting
one seed as raw information

206
00:14:23.512 --> 00:14:30.985
from that YAML file and then returning
a persistent record, it looks like.

207
00:14:30.985 --> 00:14:33.865
So this is creation of the packet.

208
00:14:35.271 --> 00:14:36.625
Interesting.

209
00:14:36.625 --> 00:14:41.115
I bet that the persistence happens
outside of this because the packets

210
00:14:41.115 --> 00:14:43.105
are ending up in the database.

211
00:14:43.105 --> 00:14:45.265
This must be how it works.

212
00:14:45.265 --> 00:14:50.079
So we've got repo create and
then a bunch of the existing things, and

213
00:14:50.079 --> 00:14:51.665
we need an expires at.

214
00:14:58.705 --> 00:15:03.095
Let's look at our YAML file, see if we can
spot a good place for an expiration date.

215
00:15:06.445 --> 00:15:08.772
Actually, we're riffing a little bit here,
so

216
00:15:08.772 --> 00:15:10.885
I'm not sure that we're going to find one.

217
00:15:10.885 --> 00:15:12.125
We can always just fake it.

218
00:15:15.005 --> 00:15:19.709
Spread mature size

219
00:15:19.709 --> 00:15:25.725
viability in years.

220
00:15:25.725 --> 00:15:27.005
Let's use that.

221
00:15:27.005 --> 00:15:32.957
Let's say I bought an enormous number
of seeds in February of 2024 and

222
00:15:32.957 --> 00:15:36.895
we'll use seed packet
info viability in years.

223
00:15:40.015 --> 00:15:45.203
We'll do new

224
00:15:45.203 --> 00:15:50.392
date and then

225
00:15:50.392 --> 00:15:55.583
let's see.

226
00:15:55.583 --> 00:16:02.583
It's possibly undef.

227
00:16:13.289 --> 00:16:17.704
&gt;&gt; Mike North: Comma, great.

228
00:16:17.704 --> 00:16:20.435
Sorry, just needed that
formatting to work out.

229
00:16:20.435 --> 00:16:25.611
So we've got a date,
we're passing in year,

230
00:16:25.611 --> 00:16:30.005
a month index, and then a day, right?

231
00:16:30.005 --> 00:16:31.965
And we're gonna forget about the time.

232
00:16:31.965 --> 00:16:34.205
In fact, you could probably
forget about the day too.

233
00:16:35.405 --> 00:16:36.925
Now we're dealing with this.

234
00:16:36.925 --> 00:16:41.511
So unexpected constant
nullishness on the left hand

235
00:16:41.511 --> 00:16:45.165
side of a double question mark operator.

236
00:16:45.165 --> 00:16:51.943
&gt;&gt; Male: I think you need to enclose
the coalescing operator and yeah.

237
00:16:51.943 --> 00:16:56.055
&gt;&gt; Female: I'm not sure
that question marks too.

238
00:16:58.215 --> 00:16:58.715
&gt;&gt; Mike North: I see.

239
00:17:01.095 --> 00:17:02.055
Great.

240
00:17:02.055 --> 00:17:05.495
So we've got 2024 plus
the viability in years.

241
00:17:05.495 --> 00:17:13.033
And let's scroll to the bottom and
look, no more SQLite constraint there.

242
00:17:13.033 --> 00:17:18.575
So we're already getting the category,
the quantity, let's just double-check.

243
00:17:18.575 --> 00:17:21.090
PlantingDistance, is
that already calculated?

244
00:17:21.090 --> 00:17:23.357
Yep, it is.

245
00:17:23.357 --> 00:17:27.125
So really we had to add expiresAt.

246
00:17:27.125 --> 00:17:30.575
Now let's look at what's
going over the wire and

247
00:17:30.575 --> 00:17:34.405
see if that data looks like what we need.

248
00:17:34.405 --> 00:17:39.003
So just open up good old dev tools network

249
00:17:39.003 --> 00:17:43.205
tab search for the packets request.

250
00:17:44.655 --> 00:17:48.255
So here's your response and
I'm just scanning through.

251
00:17:48.255 --> 00:17:53.257
We've got category, Big Boy Tomato,
presentation, metadata, all right?

252
00:17:53.257 --> 00:17:56.615
There's our quantity and
our planting distance.

253
00:17:56.615 --> 00:17:59.055
So those are already wired up somehow.

254
00:17:59.055 --> 00:18:00.975
We're gonna have to look at that.

255
00:18:00.975 --> 00:18:03.935
But I don't see any sort of
expires at coming through.

256
00:18:03.935 --> 00:18:06.095
And this is where I would want to see it.

257
00:18:06.095 --> 00:18:08.535
Remember, like metadata is the place for

258
00:18:08.535 --> 00:18:12.155
any plant specific things
to be trickling through.

259
00:18:12.155 --> 00:18:19.460
To do this, we're going to have to
get out of our domain service and

260
00:18:19.460 --> 00:18:24.677
get into the route handler
because that is where

261
00:18:24.677 --> 00:18:30.417
we convert between our
internal representation and

262
00:18:30.417 --> 00:18:36.158
the ultimate HTTP response
that we're returning,

263
00:18:36.158 --> 00:18:41.246
which looks like this
here we're going to have

264
00:18:41.246 --> 00:18:45.942
to say expires at is
packet expires that and

265
00:18:45.942 --> 00:18:53.375
if we hit save packets there it is
a timestamp that comes through.

266
00:18:53.375 --> 00:18:59.805
Now we can go and thread it through to our
seed packet component, like in the back.

267
00:18:59.805 --> 00:19:01.855
So we're gonna close
a bunch of these files.

268
00:19:04.425 --> 00:19:09.037
Seed packet back is what
this is called because we're

269
00:19:09.037 --> 00:19:12.425
sharing types like that types package.

270
00:19:15.785 --> 00:19:19.040
All this information is kind
of trickling through and

271
00:19:19.040 --> 00:19:23.465
although it's not shown in the tooltip
here because it gets truncated.

272
00:19:26.105 --> 00:19:28.745
Wait, I expected that to
kind of come through.

273
00:19:30.195 --> 00:19:31.235
What is this type?

274
00:19:36.755 --> 00:19:40.291
You know, I want to bump the TypeScript
server just to the language server just to

275
00:19:40.291 --> 00:19:42.995
make sure we're getting the latest
types after that change.

276
00:19:52.435 --> 00:19:53.395
That's interesting.

277
00:19:57.077 --> 00:20:01.405
We got rebuild the types package,
okay, no worries.

278
00:20:01.405 --> 00:20:03.965
So I'm going to just put this
server in the background.

279
00:20:11.965 --> 00:20:15.571
It'll NPM run build so that we get
the right types in the dist folder, and

280
00:20:15.571 --> 00:20:19.565
then we're going to bring that
server back into the foreground.

281
00:20:19.565 --> 00:20:23.174
And I think we should
get something more here.

282
00:20:23.174 --> 00:20:28.359
No, this is

283
00:20:28.359 --> 00:20:38.211
in the entities dist.

284
00:20:38.211 --> 00:20:39.553
All right, let's try one more thing.

285
00:20:43.506 --> 00:20:45.335
&gt;&gt; Mike North: We're gonna blow
away this disk folder just for

286
00:20:45.335 --> 00:20:52.710
good measure,
&gt;&gt; Mike North: Build

287
00:20:52.710 --> 00:20:54.790
this package directly,
see if there are any errors.

288
00:20:54.790 --> 00:21:03.432
All right,
what is in your dist folder types?

289
00:21:03.432 --> 00:21:08.032
Entities, seed packet and

290
00:21:08.032 --> 00:21:12.035
seed packet metadata.

291
00:21:15.625 --> 00:21:16.145
There we go.

292
00:21:16.145 --> 00:21:18.105
Quantity, plane, distance,
days to harvest.

293
00:21:18.105 --> 00:21:20.825
All right, let's make sure that all
percolated through the way it should.

294
00:21:41.095 --> 00:21:42.615
Maybe things are still warming up.

295
00:21:42.615 --> 00:21:44.855
Like maybe it's svelte.

296
00:21:44.855 --> 00:21:48.255
So for people following along live,
I figured out what the problem was.

297
00:21:48.255 --> 00:21:51.575
It had to do with our the audible.

298
00:21:51.575 --> 00:21:54.375
We called to try to fix
the import paths earlier.

299
00:21:57.655 --> 00:22:02.345
What was going on here
is we in our tsconfig

300
00:22:02.345 --> 00:22:07.515
had changed or had set rootdir to dot.

301
00:22:07.515 --> 00:22:11.845
We'd said the root directory
of this project is

302
00:22:11.845 --> 00:22:16.075
effectively the root
folder of this package.

303
00:22:17.915 --> 00:22:18.955
Then we ran a build.

304
00:22:21.035 --> 00:22:26.059
What happens when we do that is you're
going to see in this folder here,

305
00:22:26.059 --> 00:22:27.835
if we, I think refresh.

306
00:22:32.545 --> 00:22:33.265
Did I save that?

307
00:22:33.265 --> 00:22:34.065
I didn't save it.

308
00:22:35.585 --> 00:22:37.625
We're going to see a source
folder pop up here.

309
00:22:37.625 --> 00:22:42.008
So what happened was we had two
versions of the build output for

310
00:22:42.008 --> 00:22:46.220
this package, one in the root
level of the dist folder, and

311
00:22:46.220 --> 00:22:49.945
that one had only quantity
in that metadata object.

312
00:22:49.945 --> 00:22:53.425
That's why we were seeing just
that one option in the type ahead.

313
00:22:54.545 --> 00:22:58.665
Meanwhile, we had the real changes we
just made inside the source folder.

314
00:22:58.665 --> 00:23:03.501
So if you just set this to source,
save and then remove dist and

315
00:23:03.501 --> 00:23:08.430
build again, you should end up
with a nice dist folder that just

316
00:23:08.430 --> 00:23:13.385
has everything in the root here and
we should be back in action.

