WEBVTT

1
00:00:00.206 --> 00:00:03.247
&gt;&gt; Mike North: The first domain modeling
concept we're going to dig into,

2
00:00:03.247 --> 00:00:06.720
the first pair of concepts
are value objects and entities.

3
00:00:06.720 --> 00:00:08.080
What are value objects?

4
00:00:09.200 --> 00:00:15.440
These are things that you have to
create some sort of data structure for.

5
00:00:15.440 --> 00:00:20.680
It could even just be like some special
kind of string that has a convention to.

6
00:00:20.680 --> 00:00:22.532
It doesn't have to be fancy, but

7
00:00:22.532 --> 00:00:25.720
these are things that don't
possess a unique identity.

8
00:00:25.720 --> 00:00:27.270
What do I mean by this?

9
00:00:27.270 --> 00:00:33.117
Like, if you had something like an RGB
color which already exists in this app,

10
00:00:33.117 --> 00:00:36.837
like, here's the path in
the workshop project,

11
00:00:36.837 --> 00:00:39.510
which we'll check out in a moment.

12
00:00:40.630 --> 00:00:44.490
You can see that I'm modeling an RGB
color and I've got a red channel,

13
00:00:44.490 --> 00:00:49.190
a green channel, a blue channel, and
an alpha channel for transparency.

14
00:00:49.190 --> 00:00:54.560
Now, we're not going to end
up storing in database.

15
00:00:54.560 --> 00:00:58.554
In our little SQLite database that's
holding all the seed packets and

16
00:00:58.554 --> 00:01:03.359
things behind the scenes, we're not going
to be storing a table of colors where each

17
00:01:03.359 --> 00:01:06.840
color has an id and
we're referring to colors by id.

18
00:01:06.840 --> 00:01:09.800
I guess you could, if you were
doing some sort of theming thing.

19
00:01:09.800 --> 00:01:14.021
But this you want to think about as
being kind of embedded onto more

20
00:01:14.021 --> 00:01:15.497
interesting things.

21
00:01:15.497 --> 00:01:20.520
So we also have a concept of
a distance that already exists the app.

22
00:01:20.520 --> 00:01:22.600
There's a value like three and

23
00:01:22.600 --> 00:01:26.920
then there's a unit like feet or
centimeters or meters.

24
00:01:26.920 --> 00:01:28.680
Those are value objects.

25
00:01:28.680 --> 00:01:32.112
And an important aspect of value
objects is you should be able,

26
00:01:32.112 --> 00:01:33.990
through some code that you write,

27
00:01:33.990 --> 00:01:38.840
to be able to compare them against each
other and check whether they're equal.

28
00:01:38.840 --> 00:01:41.240
Not by just checking ID equals id, but

29
00:01:41.240 --> 00:01:45.500
you're trying to figure out
are these things equivalent.

30
00:01:45.500 --> 00:01:50.343
So this gets a little bit interesting when
you start thinking about units like is 3

31
00:01:50.343 --> 00:01:53.740
meters equal to some
precise number of feet?

32
00:01:53.740 --> 00:01:55.500
Maybe those are equal.

33
00:01:55.500 --> 00:01:57.820
That would be up to you to think about.

34
00:01:57.820 --> 00:01:59.500
Talk to your user.

35
00:01:59.500 --> 00:02:00.940
Does this make sense in that case?

36
00:02:00.940 --> 00:02:02.300
I'd argue probably.

37
00:02:03.820 --> 00:02:06.460
So there are a couple things
going on here in this code.

38
00:02:06.460 --> 00:02:09.740
First off,
we're using a library called TypeORM.

39
00:02:11.190 --> 00:02:14.238
Don't worry if you've never used this,
we're not going to have to worry about it

40
00:02:14.238 --> 00:02:16.110
too much and
we'll incrementally get into this.

41
00:02:16.110 --> 00:02:21.108
But this is a tool for object relational
mapping, and this just means we don't

42
00:02:21.108 --> 00:02:25.750
have to set up a database table and
we don't have to write SQL queries.

43
00:02:25.750 --> 00:02:28.917
There's nothing wrong with that if
that's the way you like to engage with

44
00:02:28.917 --> 00:02:29.830
the database.

45
00:02:29.830 --> 00:02:34.769
But simply by creating a class
like this and denoting that these

46
00:02:34.769 --> 00:02:40.079
Fields represent columns,
where we're saying alpha is a column,

47
00:02:40.079 --> 00:02:45.270
and if it's not specified,
let's assume it has a value of 1.

48
00:02:45.270 --> 00:02:48.116
All the database stuff happens
behind the scenes for us and

49
00:02:48.116 --> 00:02:49.750
we don't have to worry about it.

50
00:02:49.750 --> 00:02:53.550
The second thing is we've got
this peashoot types package.

51
00:02:53.550 --> 00:02:56.833
We'll dive into this a little bit more,
but

52
00:02:56.833 --> 00:03:01.183
I've factored out some shared
types that our front end and

53
00:03:01.183 --> 00:03:06.332
backend both depend on, and
in there you'll find common things that

54
00:03:06.332 --> 00:03:11.760
relate to the shared contract
between these two system components.

55
00:03:11.760 --> 00:03:15.562
So when our UI sends a request to our
backend, there is a clear type for

56
00:03:15.562 --> 00:03:18.841
what that request shape and
the response shape looks like,

57
00:03:18.841 --> 00:03:23.320
as well as any other objects that are
embedded within that request and response.

58
00:03:23.320 --> 00:03:25.840
So that's what you can find
in this types package.

59
00:03:25.840 --> 00:03:28.960
In the types package, you'll see
we're using a library called Zod.

60
00:03:28.960 --> 00:03:32.050
And again, if you haven't used
this before, don't panic.

61
00:03:32.050 --> 00:03:34.010
We're going to get into it incrementally.

62
00:03:34.010 --> 00:03:36.970
But this is a way of defining schemas.

63
00:03:36.970 --> 00:03:41.610
So this adds on top of TypeScript,
runtime type checking.

64
00:03:41.610 --> 00:03:44.234
So by defining an RGB color like this,

65
00:03:44.234 --> 00:03:49.482
we get something that we can use at
runtime to validate that, yes, the red,

66
00:03:49.482 --> 00:03:54.730
green, and blue properties are on this
object and they are in fact numbers.

67
00:03:55.850 --> 00:03:59.120
You can see that we can mark
something as optional or required.

68
00:03:59.120 --> 00:04:04.209
There's a lot here, and I want you to
start with the assumption it's not

69
00:04:04.209 --> 00:04:09.216
strictly two, but start with
the assumption that if you can articulate

70
00:04:09.216 --> 00:04:14.139
a type in TypeScript Zod, you can use
to sort of articulate a schema and

71
00:04:14.139 --> 00:04:18.896
extract a type from that schema so
that you can have both compile time

72
00:04:18.896 --> 00:04:23.760
type checking from TypeScript and
runtime type checking from Zot.

73
00:04:23.760 --> 00:04:25.780
Of course, this doesn't come for free.

74
00:04:25.780 --> 00:04:30.232
Unlike TypeScript types, this doesn't drop
away as part of your compile process.

75
00:04:30.232 --> 00:04:32.069
But that's kind of the point.

76
00:04:32.069 --> 00:04:33.180
So that's value objects.

77
00:04:33.180 --> 00:04:38.221
They're sort of comparable things
that typically get embedded

78
00:04:38.221 --> 00:04:44.500
into other resources, and they don't
have an identity field like an id.

79
00:04:44.500 --> 00:04:47.146
Now, let's talk about entities.

80
00:04:47.146 --> 00:04:50.620
So entities are mutable objects.

81
00:04:50.620 --> 00:04:53.290
Value objects are generally immutable.

82
00:04:53.290 --> 00:04:55.330
You create a new one.

83
00:04:55.330 --> 00:04:57.399
If you want to change
the color of something,

84
00:04:57.399 --> 00:05:00.850
you create a new color that's
a slightly different color.

85
00:05:00.850 --> 00:05:01.890
Entities are different.

86
00:05:01.890 --> 00:05:05.570
These represent things
that you will persist.

87
00:05:05.570 --> 00:05:09.250
They are mutable, they can change.

88
00:05:09.250 --> 00:05:13.260
And generally, at least in this app,
they're all going to have an ID of some

89
00:05:13.260 --> 00:05:16.894
sort so if we're going to take a peek
at what our database looks like,

90
00:05:16.894 --> 00:05:19.651
and you don't have to be
a database expert here, but

91
00:05:19.651 --> 00:05:23.880
you're going to see that each
of these corresponds to a table.

92
00:05:23.880 --> 00:05:29.912
And the way you can tell the difference
between a value object like this and

93
00:05:29.912 --> 00:05:35.640
an entity is this entity decorator
that you're adding to the class.

94
00:05:35.640 --> 00:05:39.963
This is what signifies that this is
sort of a top level thing that ends up

95
00:05:39.963 --> 00:05:41.960
being persisted in a database.

96
00:05:44.040 --> 00:05:47.400
When you start working with entities,
relationships get really interesting.

97
00:05:47.400 --> 00:05:51.520
You can have a has many relationship or
a one to one relationship, whereas

98
00:05:51.520 --> 00:05:56.122
that color concept just ends up kind of
being embedded in the object, if you will.

99
00:05:56.122 --> 00:06:00.840
We're going to walk through the process
of checking the git repo for

100
00:06:00.840 --> 00:06:04.977
this gardening app out and
we're going to kind of warm up and

101
00:06:04.977 --> 00:06:10.358
do some very basic modeling, like figure
out what entities are important and

102
00:06:10.358 --> 00:06:16.670
value objects for a part of this app
called the Temperature Date Calculator.

103
00:06:16.670 --> 00:06:21.159
So the problem to solve
here is as a gardener,

104
00:06:21.159 --> 00:06:27.303
I want to be able to select a location,
type in a temperature,

105
00:06:27.303 --> 00:06:32.619
and I want to know what is
the date where I can be assured

106
00:06:32.619 --> 00:06:39.260
that the temperature in my location
will be at or above that level.

107
00:06:39.260 --> 00:06:43.360
So a concrete example
here is tomato plants.

108
00:06:43.360 --> 00:06:47.954
They want to go outside when
the nighttime temperatures are above

109
00:06:47.954 --> 00:06:49.883
50 degrees Fahrenheit.

110
00:06:49.883 --> 00:06:52.496
And so I need to know, what is that date?

111
00:06:52.496 --> 00:06:57.361
That's very important to me because I work
backwards from that date to sort of like,

112
00:06:57.361 --> 00:07:01.557
how long do they have to grow inside and
then when should I plant my seeds?

113
00:07:01.557 --> 00:07:05.854
And sort of it's a really important part
of sort of working back from the date they

114
00:07:05.854 --> 00:07:06.560
go outside.

