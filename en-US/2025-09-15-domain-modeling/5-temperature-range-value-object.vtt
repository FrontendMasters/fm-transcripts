WEBVTT

1
00:00:00.560 --> 00:00:03.120
&gt;&gt; Mike North: Let's switch
to our back-end here.

2
00:00:04.320 --> 00:00:07.680
So where we're going to go
is in our server package.

3
00:00:10.240 --> 00:00:14.090
We're going to go into source entities.

4
00:00:14.090 --> 00:00:19.076
We've got a location here which
matches what we already have described

5
00:00:19.076 --> 00:00:20.330
in our location.

6
00:00:20.330 --> 00:00:24.297
We kinda ended up undoing
our change there.

7
00:00:24.297 --> 00:00:27.170
So this file hasn't been touched.

8
00:00:27.170 --> 00:00:32.610
But we need a monthly temperature range
and we'll need a temperature value object.

9
00:00:32.610 --> 00:00:34.690
So let's start from the bottom up.

10
00:00:34.690 --> 00:00:37.695
So we've got in values,

11
00:00:37.695 --> 00:00:43.570
we call this monthly temperature-range.ts.

12
00:00:45.250 --> 00:00:49.330
We'll grab our RGB color and
we'll use that as our starting point.

13
00:00:50.610 --> 00:00:54.651
And what we can do here is say,

14
00:00:54.651 --> 00:00:58.700
monthly temperature range.

15
00:01:00.220 --> 00:01:05.820
We want something that
matches if we wanted to.

16
00:01:05.820 --> 00:01:09.814
We have to think about whether we want
something that matches the representation

17
00:01:09.814 --> 00:01:11.500
in the types package.

18
00:01:11.500 --> 00:01:15.387
We have the option of persisting this
in our database in a way that's a bit

19
00:01:15.387 --> 00:01:18.320
different from how it's
exposed through our API, but

20
00:01:18.320 --> 00:01:21.130
I don't really see a need for
that in this case.

21
00:01:21.130 --> 00:01:22.570
Let's see if we can keep it simple.

22
00:01:29.450 --> 00:01:37.050
Now I'm running into this problem where
the types package is not resolving here.

23
00:01:40.490 --> 00:01:42.090
Let's see.

24
00:01:42.090 --> 00:01:50.220
Import from peashoot types.

25
00:01:50.220 --> 00:01:52.260
Obviously you have to alias it.

26
00:01:57.620 --> 00:02:00.580
I was just saying the value is never read,
that's fine.

27
00:02:02.740 --> 00:02:08.820
One last step here we have a single entry
point for this peashoot types package.

28
00:02:08.820 --> 00:02:15.480
If we were to click on this, you can
see we export a bunch of stuff here and

29
00:02:15.480 --> 00:02:22.039
we haven't introduced monthly
temperature range type js.

30
00:02:22.039 --> 00:02:27.174
If we hover over that,
we can see this resolves and

31
00:02:27.174 --> 00:02:34.279
we also have to worry about the value
objects temperature type js.

32
00:02:34.279 --> 00:02:37.210
We did this and
then we did this one up here.

33
00:02:37.210 --> 00:02:41.730
So this ensures that this package
exports the files that we just created.

34
00:02:41.730 --> 00:02:46.357
Where we left off is if we
look at the changes that we've

35
00:02:46.357 --> 00:02:50.582
made first in our types,
we declared this monthly

36
00:02:50.582 --> 00:02:55.530
temperature range schema and
we exported the type for it.

37
00:02:55.530 --> 00:02:57.810
We've got the month, the min, and the max.

38
00:02:57.810 --> 00:02:59.330
We had a location here.

39
00:02:59.330 --> 00:03:02.640
I removed it for now and
we're going to see why.

40
00:03:05.040 --> 00:03:08.447
And in the value objects,
you can see we've got like,

41
00:03:08.447 --> 00:03:11.200
basically we've articulated this shape.

42
00:03:11.200 --> 00:03:15.280
Value is a number and
the unit is Fahrenheit.

43
00:03:15.280 --> 00:03:19.927
And then we made sure to export these
two newly created modules from our

44
00:03:19.927 --> 00:03:21.440
types package.

45
00:03:21.440 --> 00:03:24.960
Now we're turning our focus
back to the server side.

46
00:03:24.960 --> 00:03:28.390
And so what we've done here is.

47
00:03:28.390 --> 00:03:30.966
I've got an empty class here and

48
00:03:30.966 --> 00:03:35.750
we're getting ready to
articulate this database entity.

49
00:03:37.590 --> 00:03:43.596
If we remember from the slide
with going through type orm,

50
00:03:43.596 --> 00:03:46.669
we have to add entity to this.

51
00:03:46.669 --> 00:03:48.590
And there are options you could pass here.

52
00:03:48.590 --> 00:03:51.223
You could say,
I want to describe the table,

53
00:03:51.223 --> 00:03:54.630
the name of the table that'll
be created in the database.

54
00:03:54.630 --> 00:03:56.040
But we're not going to.

55
00:03:56.040 --> 00:03:57.240
No need to get fancy here.

56
00:03:58.840 --> 00:04:01.960
Now it's time for us to define columns.

57
00:04:04.360 --> 00:04:08.798
I've actually borrowed our interface
from that types package so

58
00:04:08.798 --> 00:04:13.000
that in this case we're going
to keep this well aligned.

59
00:04:13.000 --> 00:04:18.479
Like when this object is serialized into
an API response, or when we're working

60
00:04:18.479 --> 00:04:23.475
with it in our business logic, or
when we're storing it in the database,

61
00:04:23.475 --> 00:04:27.908
it's all the same representation for
a simple object like this,

62
00:04:27.908 --> 00:04:33.890
at least when you first start working
with it, you often start out this way.

63
00:04:33.890 --> 00:04:37.378
Inevitably you make breaking changes
internally because you need something

64
00:04:37.378 --> 00:04:41.090
about your database representation to
change and you can separate these things.

65
00:04:41.090 --> 00:04:43.570
But that is what this represents.

66
00:04:43.570 --> 00:04:47.847
We're linking the API representation and

67
00:04:47.847 --> 00:04:52.370
our server representation of this concept.

68
00:04:53.380 --> 00:04:56.900
Just refreshing ourselves
on what defines this.

69
00:04:56.900 --> 00:04:59.780
We've got month and min and max.

70
00:05:00.820 --> 00:05:02.100
Here we go.

71
00:05:02.100 --> 00:05:06.340
We've got a column and month.

72
00:05:07.940 --> 00:05:13.617
We're going to use the definite assignment
operator here because our orm will take

73
00:05:13.617 --> 00:05:19.050
care of making sure that this exists
whenever we load it from the database.

74
00:05:19.050 --> 00:05:23.880
And just so if we didn't have this,
you would see TypeScript complaining that,

75
00:05:23.880 --> 00:05:26.862
look, if you create a new
instance of this thing,

76
00:05:26.862 --> 00:05:32.010
I have no guarantees that month is
going to be populated with something.

77
00:05:32.010 --> 00:05:34.890
This exclamation mark is
basically telling TypeScript.

78
00:05:36.010 --> 00:05:40.231
It's telling the compiler there is some
other process by which this will be

79
00:05:40.231 --> 00:05:40.970
populated.

80
00:05:43.770 --> 00:05:45.370
We can rely on that.

81
00:05:45.370 --> 00:05:50.281
When it comes to the type checking,
assume this will get initialized and

82
00:05:50.281 --> 00:05:53.272
type orm is going to take care of that for
us.

83
00:05:53.272 --> 00:06:00.464
Then we have a min and a max.

84
00:06:00.464 --> 00:06:05.730
I've auto imported temperature
from our types package.

85
00:06:05.730 --> 00:06:07.810
Remember we exported this type.

86
00:06:09.810 --> 00:06:12.935
I want to do the same thing with max.

87
00:06:12.935 --> 00:06:18.515
Min and max, and these both also need
a definite assignment operator or,

88
00:06:18.515 --> 00:06:19.962
yeah, operator.

89
00:06:19.962 --> 00:06:23.820
And we're gonna add
column to those as well.

90
00:06:29.900 --> 00:06:35.661
Now, there is something special
we're going to have to do here,

91
00:06:35.661 --> 00:06:40.610
because all we've stated
here is a type of type orm.

92
00:06:40.610 --> 00:06:43.668
Sorry, we have a complex type here and

93
00:06:43.668 --> 00:06:47.694
all we've done is say max
is this compound field.

94
00:06:47.694 --> 00:06:49.017
It's like this object.

95
00:06:49.017 --> 00:06:54.015
And SQLite,
the database we're using here doesn't have

96
00:06:54.015 --> 00:06:57.591
a column type that matches exactly this.

97
00:06:57.591 --> 00:07:02.485
So we have to do some work
to see to make sure that

98
00:07:02.485 --> 00:07:06.760
the ORM knows how to persist this thing.

99
00:07:06.760 --> 00:07:07.880
And in order for that to work.

100
00:07:07.880 --> 00:07:10.520
We have to create the value
object on the server side.

101
00:07:10.520 --> 00:07:12.440
It's going to look a lot like this.

102
00:07:12.440 --> 00:07:15.913
So I'm going to copy the contents of this
file and we're going to go into this

103
00:07:15.913 --> 00:07:19.080
values folder and this is where
we're going to create temperature.

104
00:07:21.800 --> 00:07:24.280
And I'm just going to use
this as the starting point.

105
00:07:24.280 --> 00:07:29.800
So just so you can see the file tree,
it's in the source values temperature.

106
00:07:29.800 --> 00:07:34.355
And we'll

107
00:07:34.355 --> 00:07:40.429
just do this,

108
00:07:40.429 --> 00:07:45.491
we'll call

109
00:07:45.491 --> 00:07:54.610
this iTemperature.

110
00:07:54.610 --> 00:08:01.714
It's being used up, implements, and
because this is a value object.

111
00:08:01.714 --> 00:08:03.967
Right?
This is not going to have an id.

112
00:08:03.967 --> 00:08:04.885
We're going to get rid of this.

113
00:08:06.805 --> 00:08:09.285
It's not an entity,
this is a value object.

114
00:08:11.125 --> 00:08:14.485
And we see that we're incorrectly
implementing this interface.

115
00:08:14.485 --> 00:08:18.926
So here we really, really want to
keep our API representation and

116
00:08:18.926 --> 00:08:21.685
our server representation aligned.

117
00:08:21.685 --> 00:08:27.321
We need a number and
we need a unit that's either C or F.

118
00:08:27.321 --> 00:08:30.765
So we need value and we need unit.

119
00:08:32.365 --> 00:08:36.125
And it's going to be a string.

120
00:08:36.125 --> 00:08:40.285
But really we want temperature unit.

121
00:08:40.285 --> 00:08:41.565
We already defined this, right?

122
00:08:41.565 --> 00:08:44.365
We got that nice union type with the C or
F.

123
00:08:44.365 --> 00:08:47.565
And this is coming right
out of our Zod schema and

124
00:08:47.565 --> 00:08:51.485
it's sort of trickling through and
we can get rid of this.

125
00:08:52.775 --> 00:08:55.655
So now we have a temperature class.

126
00:08:55.655 --> 00:09:00.965
And what we're going to see is that when
this gets persisted in the database,

127
00:09:00.965 --> 00:09:05.622
it'll sort of be embedded with its
own columns and some prefixing so

128
00:09:05.622 --> 00:09:10.375
that it doesn't end up being sort
of flattened in the column layout.

129
00:09:10.375 --> 00:09:14.011
But when we're working with this in
memory, it's going to be this nice nested

130
00:09:14.011 --> 00:09:16.775
object and it just feels like
a nice value object there.

131
00:09:16.775 --> 00:09:21.183
So now we're going to grab this class and
instead of referring to this

132
00:09:21.183 --> 00:09:26.225
temperature as just sort of like the type,
we want to refer to the entity.

133
00:09:26.225 --> 00:09:28.705
And so
be careful when you pick from these two.

134
00:09:28.705 --> 00:09:30.865
This up here is just the type information.

135
00:09:30.865 --> 00:09:35.025
This in value temperature,
this is the class.

136
00:09:36.065 --> 00:09:38.785
And one more last thing
we have to do is this.

137
00:09:41.025 --> 00:09:47.312
And what we're doing with
this here is we're saying,

138
00:09:47.312 --> 00:09:53.475
when you need to instantiate a type for
this.

139
00:09:53.475 --> 00:09:55.883
When you're reading a row from a database,

140
00:09:55.883 --> 00:09:59.475
you need to create this temperature
object that we just defined.

141
00:10:00.995 --> 00:10:04.195
This is the function you
call to create that thing.

142
00:10:08.115 --> 00:10:12.855
So now we have our monthly temperature
range, we should be able to build.

143
00:10:18.775 --> 00:10:23.812
There it goes.
Now we have one last thing we have to do,

144
00:10:23.812 --> 00:10:28.818
and that's associating with a location.

145
00:10:28.818 --> 00:10:35.815
We're going to do that with
another annotation here from.

146
00:10:42.317 --> 00:10:48.725
Gosh, it's not belongs to.

147
00:10:48.725 --> 00:10:53.325
What the heck is is.

148
00:10:55.667 --> 00:10:56.845
It's one.

149
00:10:56.845 --> 00:11:00.365
One to many to one,
that's what they call it.

150
00:11:05.415 --> 00:11:06.695
Or no, sorry, one to many.

151
00:11:06.695 --> 00:11:08.295
One to many is what we want.

152
00:11:08.295 --> 00:11:13.237
So this is a one to many relationship

153
00:11:13.237 --> 00:11:19.255
between the monthly temperature range.

154
00:11:19.255 --> 00:11:22.695
Let me make sure location's
coming from the right place.

155
00:11:22.695 --> 00:11:26.615
Should be the entity, not the types
package that you're getting this from.

156
00:11:27.985 --> 00:11:32.212
It needs to be definitely assigned like
anything else you should see class,

157
00:11:32.212 --> 00:11:36.385
location, not to be confused with
window location or anything like that.

158
00:11:37.825 --> 00:11:39.825
We need arguments here.

159
00:11:41.505 --> 00:11:49.185
This is where we can look at some
other examples that exist here.

160
00:11:49.185 --> 00:11:49.825
Let's see.

161
00:11:51.265 --> 00:11:53.105
Plant has one of these I think.

162
00:11:54.725 --> 00:11:55.605
Look at this.

163
00:11:55.605 --> 00:11:57.685
We've got a many to one.

164
00:11:57.685 --> 00:12:02.835
So we need something to instantiate
the record as we had before and

165
00:12:02.835 --> 00:12:07.445
then some way to fetch how
this relationship works.

166
00:12:07.445 --> 00:12:14.783
Here we go back to monthly temp location,
we've already imported it and

167
00:12:14.783 --> 00:12:19.835
then the last thing we need
is given a location like

168
00:12:19.835 --> 00:12:24.649
what's the other side of
this relationship and

169
00:12:24.649 --> 00:12:28.405
we can wire that up on the other side.

170
00:12:30.085 --> 00:12:35.424
So for now let's just say it's location,

171
00:12:35.424 --> 00:12:40.725
monthly temps, something like that.

172
00:12:40.725 --> 00:12:42.165
Now this field doesn't exist yet.

173
00:12:42.165 --> 00:12:44.405
We're about to create
it on the other side.

174
00:12:44.405 --> 00:12:49.135
So we're going to go over to location and
say many to one.

175
00:12:52.735 --> 00:12:54.815
Actually I think this
side is the one to many.

176
00:12:56.815 --> 00:13:01.924
This is going to be monthly temps,

177
00:13:01.924 --> 00:13:06.335
monthly temperature range.

178
00:13:12.745 --> 00:13:14.065
We need definite assignment.

179
00:13:14.065 --> 00:13:20.724
We need to make sure
this gets imported and

180
00:13:20.724 --> 00:13:28.345
this will need something
like range location.

181
00:13:31.705 --> 00:13:33.465
So we've made this side happy.

182
00:13:33.465 --> 00:13:36.025
Just so
you can see the two components here.

183
00:13:36.025 --> 00:13:41.128
This top one is create the record and

184
00:13:41.128 --> 00:13:47.715
then this one is walk the association.

185
00:13:47.715 --> 00:13:50.777
Right, like how do I from
a range get location and

186
00:13:50.777 --> 00:13:55.875
then on the other side we're going to need
from a location how do I get the range?

187
00:13:55.875 --> 00:13:57.315
So we've got a one to many here.

188
00:13:57.315 --> 00:14:03.098
Sorry, this we're going to change

189
00:14:03.098 --> 00:14:07.925
to like a many to one, right?

190
00:14:07.925 --> 00:14:10.182
So we've got the location and

191
00:14:10.182 --> 00:14:16.048
then this should be actually should be
like this monthly temps we have many and

192
00:14:16.048 --> 00:14:20.125
on the location side we have
one location going back.

193
00:14:20.125 --> 00:14:24.125
So what we've done in summary here,
we've set up the has-many relationship.

194
00:14:24.125 --> 00:14:25.925
We have a value object of temperature.

195
00:14:25.925 --> 00:14:29.803
We have this monthly
temperature record and

196
00:14:29.803 --> 00:14:35.150
where we're getting really
well positioned to incorporate

197
00:14:35.150 --> 00:14:40.305
this in the API contract for
the temperature calculator.

198
00:14:41.585 --> 00:14:49.985
Let's just do one more build to make
sure that this all works great.

199
00:14:52.065 --> 00:14:54.145
I'll make a git commit here.

200
00:14:54.145 --> 00:14:59.250
So we're going to call

201
00:14:59.250 --> 00:15:04.893
it DDD1 monthly monthly

202
00:15:04.893 --> 00:15:10.005
temperature ranges.

203
00:15:28.815 --> 00:15:31.354
So if you want to pull down
the DDD progress branch,

204
00:15:31.354 --> 00:15:34.735
you'll get all the code changes that
I just made and it should work.

205
00:15:44.975 --> 00:15:48.745
The next thing we're going to do is
turn our attention to getting that

206
00:15:48.745 --> 00:15:51.605
dropdown working with with
the list of locations and

207
00:15:51.605 --> 00:15:55.261
then we can incorporate this sort
of temperature checking logic.

208
00:15:55.261 --> 00:15:59.386
So if you try to run the app,
if you run NPM run dev in the project,

209
00:15:59.386 --> 00:16:01.690
you'll see that entity, mentor.

210
00:16:01.690 --> 00:16:05.669
Metadata for
location monthly temps was not found.

211
00:16:05.669 --> 00:16:09.565
One last thing we need to do here.

212
00:16:09.565 --> 00:16:15.333
There is sort of the entry point for
the way our server

213
00:16:15.333 --> 00:16:20.840
deals with different
entities in our database and

214
00:16:20.840 --> 00:16:24.657
that is in our data source TS file.

215
00:16:24.657 --> 00:16:31.914
And in here you're going to see we've got
a list of entities important to know.

216
00:16:31.914 --> 00:16:36.988
I think this is the full set of
things that need to be pulled

217
00:16:36.988 --> 00:16:43.148
from different tables and
it'll include the value objects as well.

218
00:16:43.148 --> 00:16:47.534
So we're going to add
monthly temperature range,

219
00:16:47.534 --> 00:16:53.144
making sure we pick the correct
one here and temperature format.

220
00:16:53.144 --> 00:16:57.664
It hit save and
this error should go away unless we've.

221
00:16:59.024 --> 00:17:02.077
We need a primary key here.

222
00:17:02.077 --> 00:17:04.285
I have a good solution for that.

223
00:17:04.285 --> 00:17:07.304
What we can do is extend
from this base class.

224
00:17:07.304 --> 00:17:09.794
So if you look at some
of these other types,

225
00:17:09.794 --> 00:17:14.784
you can see I extend peashoot entity
plant and I have this constructor.

226
00:17:14.784 --> 00:17:16.781
This will take care of our.

227
00:17:16.781 --> 00:17:18.288
Our primary key for us.

228
00:17:18.288 --> 00:17:24.086
The conventional way to do this would

229
00:17:24.086 --> 00:17:29.509
be to add one more column to monthly

230
00:17:29.509 --> 00:17:34.933
temperature range like this id and

231
00:17:34.933 --> 00:17:40.918
we would say this is auto incrementing

232
00:17:40.918 --> 00:17:45.419
primary generated column.

233
00:17:45.419 --> 00:17:51.147
And you could say type is a UUID or
something like that.

234
00:17:51.147 --> 00:17:54.158
Or I think you can just do uuid, yep.

235
00:17:54.158 --> 00:17:57.294
But we have a base class that'll
take care of this for us and

236
00:17:57.294 --> 00:17:59.156
give us a nice prefix for this URL.

237
00:17:59.156 --> 00:18:04.273
This alone should be enough

238
00:18:04.273 --> 00:18:08.726
to make this work here.

239
00:18:08.726 --> 00:18:14.289
But let's borrow this

240
00:18:14.289 --> 00:18:18.973
concept that we see

241
00:18:18.973 --> 00:18:26.012
elsewhere in our code base.

242
00:18:26.012 --> 00:18:35.410
Something's weird here, but,
We're gonna implement it.

243
00:18:35.410 --> 00:18:41.346
We're going to

244
00:18:41.346 --> 00:18:50.478
fix our imports here and

245
00:18:50.478 --> 00:18:55.048
we should.

246
00:18:55.048 --> 00:18:58.379
So I just deleted this interface here
just to keep things going smooth.

247
00:18:58.379 --> 00:19:03.797
But something odd where it's treating
this as both the class and an interface.

248
00:19:03.797 --> 00:19:10.548
And still I think this is basically like a
little caching error that I have locally.

249
00:19:10.548 --> 00:19:15.264
You shouldn't have to do that step,
but we'll factor that back in.

250
00:19:15.264 --> 00:19:18.144
I'm going to just copy
what we have from plant.

251
00:19:18.144 --> 00:19:22.339
And what we're doing here is we're
basically picking a nice ID prefix

252
00:19:22.339 --> 00:19:22.987
for this.

253
00:19:22.987 --> 00:19:27.588
So we're gonna just call it mtr for

254
00:19:27.588 --> 00:19:31.561
monthly temperature range.

255
00:19:31.561 --> 00:19:35.254
And looks like that didn't
quite make it happy yet.

256
00:19:35.254 --> 00:19:36.371
Data type object and

257
00:19:36.371 --> 00:19:41.094
monthly temperature range unit is not
supported by the SQLITE database.

258
00:19:41.094 --> 00:19:47.014
So monthly temperature range unit.

259
00:19:50.854 --> 00:19:52.534
Unit belongs on temperature.

260
00:19:54.294 --> 00:20:01.464
Let's check that out and
see if that makes sense.

261
00:20:01.464 --> 00:20:06.104
So we've got entities,
we've got values temperature unit.

262
00:20:06.104 --> 00:20:09.704
We can call this text.

263
00:20:11.224 --> 00:20:12.171
And now it starts working.

264
00:20:12.171 --> 00:20:13.733
So temperature range unit.

265
00:20:13.733 --> 00:20:18.080
It's basically saying, I don't have a
column type for this union type of C or F.

266
00:20:18.080 --> 00:20:20.984
We can just say, look,
store this as a string.

267
00:20:20.984 --> 00:20:21.484
Great.

268
00:20:23.064 --> 00:20:27.307
Now we could create these temperature
ranges and store them in our database,

269
00:20:27.307 --> 00:20:29.864
which is exactly what
we're going to do next.

