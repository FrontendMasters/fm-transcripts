WEBVTT

1
00:00:00.560 --> 00:00:04.640
&gt;&gt; Mike North: So we're going
to look in our location service.

2
00:00:04.640 --> 00:00:09.369
This is source services
location.ts in our server and

3
00:00:09.369 --> 00:00:12.360
we've got a couple to-dos here.

4
00:00:12.360 --> 00:00:16.800
We've got the need to parse
some data into a model.

5
00:00:17.840 --> 00:00:24.340
Then we're going to implement
the actual calculation.

6
00:00:24.340 --> 00:00:32.430
And up here we can see we've got
our getAllLocations field here.

7
00:00:32.430 --> 00:00:34.030
So let's see what this is printing out.

8
00:00:35.710 --> 00:00:37.470
This location's fine.

9
00:00:37.470 --> 00:00:41.283
This returns a promise that

10
00:00:41.283 --> 00:00:46.422
resolves to an array of locations and

11
00:00:46.422 --> 00:00:50.733
we'll keep returning that and

12
00:00:50.733 --> 00:00:56.880
we'll log those locations to the console.

13
00:00:56.880 --> 00:00:57.880
Let's see what we get.

14
00:01:01.880 --> 00:01:08.800
So we're gonna have to
in our UI load this.

15
00:01:08.800 --> 00:01:12.520
We wanna see that we're making
a network request to locations.

16
00:01:13.880 --> 00:01:17.120
And here's the request that's being made.

17
00:01:17.120 --> 00:01:20.061
Well, it's just kind of
a naked list request and

18
00:01:20.061 --> 00:01:23.250
we're getting an array
of empty locations here.

19
00:01:23.250 --> 00:01:25.800
So we're gonna trace this through.

20
00:01:25.800 --> 00:01:28.930
We can also see locations is empty.

21
00:01:28.930 --> 00:01:33.228
So part of this is because we're
going to end up creating these

22
00:01:33.228 --> 00:01:36.130
locations as part of reading a data file.

23
00:01:36.130 --> 00:01:39.490
And if you look,
I'll show you where it is.

24
00:01:39.490 --> 00:01:45.660
But it's already being loaded just so you
can kinda see where this is coming from.

25
00:01:46.780 --> 00:01:51.403
Temperature-ranges.yml and so
here we've got a name, region,

26
00:01:51.403 --> 00:01:56.270
country, monthly temperatures and
we've got a temperature range and

27
00:01:56.270 --> 00:02:00.907
there's a little bit of a tuple here
with the value and either C or F.

28
00:02:00.907 --> 00:02:05.420
In this case we have a little bit of
an easier job, everything's in Celsius.

29
00:02:05.420 --> 00:02:08.380
We don't need to worry
about converting quite yet.

30
00:02:08.380 --> 00:02:11.590
So where is that coming from?

31
00:02:11.590 --> 00:02:13.750
Well, we've got parsed data here.

32
00:02:17.750 --> 00:02:19.670
Let's see what that looks like.

33
00:02:19.670 --> 00:02:20.470
Great.

34
00:02:20.470 --> 00:02:24.742
So the file's being read and you should
see in your console we've got name,

35
00:02:24.742 --> 00:02:27.630
region, country and
then monthly temperatures.

36
00:02:27.630 --> 00:02:28.950
But this is just as JSON.

37
00:02:28.950 --> 00:02:31.990
We're just reading this file and
it's coming through as JSON.

38
00:02:31.990 --> 00:02:34.710
So what we need to do is create.

39
00:02:36.080 --> 00:02:40.369
We can start by just creating the list of
locations and we should start seeing those

40
00:02:40.369 --> 00:02:44.560
pop up in the dropdown because we can
already see the requests being made.

41
00:02:44.560 --> 00:02:48.343
We can see what we're getting
back is an empty array here and

42
00:02:48.343 --> 00:02:51.760
we should see that start
to populate with something.

43
00:02:54.080 --> 00:02:56.160
So let's get to it here.

44
00:02:56.160 --> 00:03:00.205
Here it looks like we've
got a top level object and

45
00:03:00.205 --> 00:03:04.356
actually just to avoid
driving myself crazy here.

46
00:03:04.356 --> 00:03:09.540
I'm gonna get rid of my other log just so
we can tell which is which,

47
00:03:09.540 --> 00:03:15.300
which is the contents of the file
versus which is that locations, right?

48
00:03:15.300 --> 00:03:19.887
All right, so we've got locations, which
makes sense if we look at our temperature

49
00:03:19.887 --> 00:03:22.740
ranges file,
top level property locations there.

50
00:03:23.780 --> 00:03:27.856
So we could say, sorry,

51
00:03:27.856 --> 00:03:32.910
going to the right place here.

52
00:03:32.910 --> 00:03:38.430
It's the first of the todos parse
data is currently of type JSON value.

53
00:03:39.630 --> 00:03:44.551
What we can do is feed that
through a JSON schema to

54
00:03:44.551 --> 00:03:49.602
validate that it looks
the way it's supposed to.

55
00:03:50.885 --> 00:03:54.291
&gt;&gt; Mike North: So
we can do up here, we could say,

56
00:03:54.291 --> 00:03:58.290
let's just keep it real simple for now.

57
00:04:02.130 --> 00:04:07.730
So we've got location file data
is z object and we'll import zod.

58
00:04:09.330 --> 00:04:13.490
And we've got locations,
which is a z.object.

59
00:04:14.770 --> 00:04:17.090
And within that object, what do we have?

60
00:04:17.090 --> 00:04:24.323
Name, region and country, all strings.

61
00:04:26.797 --> 00:04:31.411
&gt;&gt; Mike North: Then we've
got monthly temperatures,

62
00:04:31.411 --> 00:04:34.810
it's an array of something.

63
00:04:34.810 --> 00:04:37.450
I can't really see what's
in there in my console.

64
00:04:37.450 --> 00:04:41.138
But if we look over here,
we've got month and

65
00:04:41.138 --> 00:04:45.290
it looks like we're
going from 1 through 12.

66
00:04:45.290 --> 00:04:50.580
So we should probably make sure we
convert that back, subtract one.

67
00:04:52.260 --> 00:04:54.873
We wanna get a line with
the date constructor,

68
00:04:54.873 --> 00:04:57.380
like the JavaScript date object.

69
00:04:57.380 --> 00:05:00.740
So we've got month, which is an integer,
and then temperature range.

70
00:05:00.740 --> 00:05:07.902
Let's just copy this and
make it real easy for us to see up here.

71
00:05:09.334 --> 00:05:12.420
&gt;&gt; Mike North: Really
it's like that month.

72
00:05:14.670 --> 00:05:20.510
And sorry,
this was monthly temperatures, z.array.

73
00:05:20.510 --> 00:05:21.790
And what's in the array?

74
00:05:22.910 --> 00:05:28.071
Each member has a month,
which is a number,

75
00:05:28.071 --> 00:05:31.150
better yet, an integer.

76
00:05:34.990 --> 00:05:38.950
And we could add some of the validation
that you prompted earlier, Seth.

77
00:05:38.950 --> 00:05:42.606
Like we could say it's a min of 1 and
a max of 12,

78
00:05:42.606 --> 00:05:46.190
the files 1 through 12 for sure.

79
00:05:46.190 --> 00:05:50.193
Then we've got temperature range,

80
00:05:50.193 --> 00:05:55.486
which is another object,
and we've got a min and

81
00:05:55.486 --> 00:05:59.710
a max, and they're of the same type.

82
00:05:59.710 --> 00:06:01.600
And that type is a z.,

83
00:06:01.600 --> 00:06:06.990
I'm not gonna get very helpful
autocomplete if I do it that way.

84
00:06:09.480 --> 00:06:14.440
We could say z is a tuple, which lets
us like who here knows what a tuple is?

85
00:06:15.560 --> 00:06:17.400
What's a tuple?

86
00:06:17.400 --> 00:06:19.960
&gt;&gt; Male Student 1: A pair
of two values together.

87
00:06:21.320 --> 00:06:22.840
&gt;&gt; Mike North: Yeah,
it could even be more than two.

88
00:06:22.840 --> 00:06:28.720
But the significance is positionally,
you know, the types of these things.

89
00:06:28.720 --> 00:06:35.360
If we were to model this just an array,
it would be array of strings are numbers.

90
00:06:35.360 --> 00:06:37.920
And that's not quite right.

91
00:06:37.920 --> 00:06:40.587
We know the first position is a number and

92
00:06:40.587 --> 00:06:43.736
we know the second position
is going to be C or F.

93
00:06:43.736 --> 00:06:48.338
And so what we can do there
is say we've got a tuple and

94
00:06:48.338 --> 00:06:51.800
we're going to provide the two items.

95
00:06:51.800 --> 00:06:57.280
The first is a number and then the second,
we could say it's a string.

96
00:06:57.280 --> 00:07:02.166
Although to get to line up really
nicely with our type checking,

97
00:07:02.166 --> 00:07:04.980
what we really want is C or F, right?

98
00:07:04.980 --> 00:07:07.621
The union type of literally C or
literally F.

99
00:07:07.621 --> 00:07:10.177
Well, zod can do that.

100
00:07:11.687 --> 00:07:16.555
&gt;&gt; Mike North: I think
this has to be an array,

101
00:07:16.555 --> 00:07:20.685
but I'll do that in a sec.

102
00:07:22.668 --> 00:07:26.140
&gt;&gt; Mike North: Here we go, boom.

103
00:07:26.140 --> 00:07:29.403
Little formatting here.

104
00:07:31.248 --> 00:07:34.220
&gt;&gt; Mike North: What is going on?

105
00:07:34.220 --> 00:07:37.420
It's z, it's an array of these objects.

106
00:07:40.220 --> 00:07:42.158
Month does not exist.

107
00:07:43.358 --> 00:07:48.498
&gt;&gt; Mike North: Let me get rid of this and
see what happens.

108
00:07:50.017 --> 00:07:53.384
&gt;&gt; Mike North: That's the element type.

109
00:07:53.384 --> 00:07:55.640
Classic mistake.

110
00:07:55.640 --> 00:07:57.200
Here it's this.

111
00:07:57.200 --> 00:08:00.160
I can't just pass an object in here.

112
00:08:02.320 --> 00:08:04.480
It's a zod object like that.

113
00:08:05.840 --> 00:08:07.680
You have to give it that
nice little wrapper.

114
00:08:09.840 --> 00:08:11.680
Sorry, is that sufficiently wrapped?

115
00:08:11.680 --> 00:08:13.895
&gt;&gt; Male Student 2: Yeah,
duplicate that line.

116
00:08:15.003 --> 00:08:18.240
&gt;&gt; Mike North: Let me take a step back and
make sure.

117
00:08:18.240 --> 00:08:19.400
Yeah, I believe you.

118
00:08:19.400 --> 00:08:21.960
I just wanna make sure I'm doing
this in the right order here.

119
00:08:23.160 --> 00:08:23.880
There you go.

120
00:08:23.880 --> 00:08:25.080
So there's my object.

121
00:08:26.840 --> 00:08:31.080
Close parentheses, format.

122
00:08:31.080 --> 00:08:32.280
Okay, great.

123
00:08:32.280 --> 00:08:34.200
So we've got name, region, country.

124
00:08:34.200 --> 00:08:35.400
Here's our temperatures.

125
00:08:35.400 --> 00:08:36.440
It's an array.

126
00:08:36.440 --> 00:08:41.560
Here's the schema for a member of the
array and it's got all this stuff going.

127
00:08:41.560 --> 00:08:46.930
So what we can do now is say,
sorry, what did we call it?

128
00:08:46.930 --> 00:08:52.651
LocationFileData.parse(ParsedData), and

129
00:08:52.651 --> 00:08:55.650
what are we gonna get out?

130
00:08:58.770 --> 00:09:04.525
File data and it's never read,
but here's its type.

131
00:09:04.525 --> 00:09:06.561
And look at that.

132
00:09:06.561 --> 00:09:08.610
And so let's print that to the console.

133
00:09:12.700 --> 00:09:18.787
I'm gonna do (JSON.stringify) just so

134
00:09:18.787 --> 00:09:24.026
that we can see it in its full depth and

135
00:09:24.026 --> 00:09:28.095
it doesn't get truncated.

136
00:09:30.019 --> 00:09:31.900
&gt;&gt; Mike North: And let's see.

137
00:09:31.900 --> 00:09:35.660
Get rid of this console log so
it doesn't kinda interfere.

138
00:09:36.780 --> 00:09:42.801
And look at this, it kinda looks the same.

139
00:09:42.801 --> 00:09:48.977
Interesting, Locations,
expected object, received array.

140
00:09:50.411 --> 00:09:55.070
&gt;&gt; Mike North: So
this is a validation error here.

141
00:09:55.070 --> 00:09:56.270
Just checking this.

142
00:09:56.270 --> 00:09:57.310
We've got locations.

143
00:09:58.510 --> 00:10:01.177
Checking our schema.

144
00:10:02.910 --> 00:10:04.670
&gt;&gt; Mike North: Interesting.

145
00:10:04.670 --> 00:10:08.010
&gt;&gt; Female Student 1: Is that
c.object supposed to be z.array?

146
00:10:10.010 --> 00:10:10.510
&gt;&gt; Mike North: Yes.

147
00:10:11.610 --> 00:10:12.970
&gt;&gt; Male Student 3: Well, but
it's an array of objects.

148
00:10:12.970 --> 00:10:14.544
So we gonna even wrap.

149
00:10:14.544 --> 00:10:17.370
&gt;&gt; Mike North: Yep, easiest way.

150
00:10:18.490 --> 00:10:21.517
Like that, good catch.

151
00:10:23.306 --> 00:10:27.667
&gt;&gt; Mike North: So that's the close of the,

152
00:10:27.667 --> 00:10:31.130
yeah, just a friend.

153
00:10:31.130 --> 00:10:32.670
Wonderful, look at that.

154
00:10:32.670 --> 00:10:35.070
We've got our full depth data there.

155
00:10:35.070 --> 00:10:42.390
So let's now turn this into records,
so we can close that.

156
00:10:42.390 --> 00:10:47.070
And we're gonna go use our little outline
here, so we can get to the right function.

157
00:10:47.070 --> 00:10:50.270
So we're gonna want to get
into load temperature data.

158
00:10:50.270 --> 00:10:53.950
Here we are, we've got our file data,
we've logged it to the console.

159
00:10:53.950 --> 00:10:59.968
Now what we wanna do is say,

160
00:10:59.968 --> 00:11:06.786
fileData.locations.map.

161
00:11:06.786 --> 00:11:11.336
And we'll say.

162
00:11:11.336 --> 00:11:17.340
And then here we're gonna take in
one locdata and we're going to.

163
00:11:17.340 --> 00:11:25.977
What we wanna return is a promise
that resolves to a location.

164
00:11:27.788 --> 00:11:32.030
&gt;&gt; Mike North: Is this the right location?

165
00:11:32.030 --> 00:11:36.110
Yep, there's the entity right there.

166
00:11:36.110 --> 00:11:41.782
And of course, we're getting all
kinds of nagging cuz we certainly

167
00:11:41.782 --> 00:11:47.550
have done nothing to live up to that
contract that the function has.

168
00:11:47.550 --> 00:11:49.150
And here's our location data.

169
00:11:49.150 --> 00:11:54.246
So what we wanna do is we're gonna say,
actually up here we

170
00:11:54.246 --> 00:11:59.320
could just get what's called the repo for
the location.

171
00:11:59.320 --> 00:12:04.359
In the DDD world and in the type ORM world

172
00:12:04.359 --> 00:12:10.162
you can think of this as
the way that you engage

173
00:12:10.162 --> 00:12:16.294
with your collection of
a certain entity type.

174
00:12:17.893 --> 00:12:22.690
&gt;&gt; Mike North: And
we're gonna say AppDataSource.

175
00:12:22.690 --> 00:12:26.530
And remember, this is the file that
contains all of our entities here.

176
00:12:26.530 --> 00:12:28.530
This is all the things it knows about.

177
00:12:28.530 --> 00:12:32.930
And we're gonna say getRepository for
location.

178
00:12:32.930 --> 00:12:37.839
And if we hover over that we can say,
it's a repository

179
00:12:37.839 --> 00:12:43.070
that's generic over location here and
in here we can say,

180
00:12:43.070 --> 00:12:48.540
locRepo.create and
we can pass parameters in here.

181
00:12:48.540 --> 00:12:51.848
And what does this return?

182
00:12:53.502 --> 00:12:56.779
&gt;&gt; Mike North: It returns a location.

183
00:12:56.779 --> 00:12:59.997
So we're gonna create it and
then we're gonna save it,

184
00:12:59.997 --> 00:13:04.940
at which point we will have a record and
we should see things in that dropdown.

185
00:13:04.940 --> 00:13:06.300
So what do we need in here?

186
00:13:08.160 --> 00:13:10.864
We need name.

187
00:13:13.356 --> 00:13:18.396
&gt;&gt; Mike North: We need region, or

188
00:13:18.396 --> 00:13:23.437
what do we call it?

189
00:13:23.437 --> 00:13:25.120
I think he called it the same thing here.

190
00:13:25.120 --> 00:13:31.680
Yeah, region, we need country and
most importantly we need commas.

191
00:13:35.210 --> 00:13:39.189
And then let's see if this is enough.

192
00:13:40.587 --> 00:13:47.102
&gt;&gt; Mike North: So what we're doing
here is, we're creating the record and

193
00:13:47.102 --> 00:13:54.781
you can think of this as you're just
creating an instance of the class.

194
00:13:54.781 --> 00:13:57.535
And then when we save it,
that's where it goes to the database,

195
00:13:57.535 --> 00:13:59.430
that's where it gets its ID.

196
00:13:59.430 --> 00:14:03.510
And you can look at Save, it returns
a promise that resolves to its location.

197
00:14:03.510 --> 00:14:06.230
This is what actually persists things.

198
00:14:06.230 --> 00:14:08.695
Now you've got a promise that resolves or

199
00:14:08.695 --> 00:14:11.590
an array of promises that
resolve to a location.

200
00:14:13.270 --> 00:14:15.790
Now this is gonna be interesting.

201
00:14:15.790 --> 00:14:18.487
We'll probably end up with
a race condition here,

202
00:14:18.487 --> 00:14:20.630
which we'll refactor our way out of it.

203
00:14:20.630 --> 00:14:24.113
But we're gonna parse this file and we're
gonna kick off a bunch of attempts to save

204
00:14:24.113 --> 00:14:26.070
to this database and
let's see what happens.

205
00:14:27.630 --> 00:14:30.350
It's gonna be like a lot of
contention over this table.

206
00:14:31.710 --> 00:14:32.949
Interesting.

207
00:14:34.292 --> 00:14:37.390
&gt;&gt; Mike North: Looks
like it may have worked.

208
00:14:37.390 --> 00:14:39.670
I'm surprised SQLite is
able to keep up with that.

209
00:14:39.670 --> 00:14:43.509
We'll look at the right way to do it.

210
00:14:44.858 --> 00:14:50.150
&gt;&gt; Mike North: We'll look at
the right way to do it in a sec here.

211
00:14:50.150 --> 00:14:54.930
But let's take a look at our database and
see if anything happened, what happened?

212
00:14:54.930 --> 00:14:56.850
So location.

213
00:14:56.850 --> 00:14:58.050
Hey, look at that.

214
00:14:58.050 --> 00:15:00.210
We've got seven locations here.

215
00:15:00.210 --> 00:15:05.402
So creating seven things concurrently
is fine for this apparently.

216
00:15:05.402 --> 00:15:10.155
What you could have also done is a for
loop with an await where

217
00:15:10.155 --> 00:15:14.770
one by one you're creating
each of those locations.

218
00:15:14.770 --> 00:15:18.467
I tried to tease out some lock
contention here where we're

219
00:15:18.467 --> 00:15:22.100
trying to do many writes at the same time,
but here we go.

220
00:15:22.100 --> 00:15:23.460
We've got our list of locations.

221
00:15:24.660 --> 00:15:26.660
Our job is to return them.

222
00:15:26.660 --> 00:15:30.500
So we're gonna await
promise.resolve locations.

223
00:15:33.700 --> 00:15:36.259
And let's see what happens in our UI.

224
00:15:36.259 --> 00:15:37.860
&gt;&gt; Male Student 4: Don't you
wanna do promise to all?

225
00:15:39.140 --> 00:15:40.289
&gt;&gt; Mike North: Thanks.

226
00:15:42.424 --> 00:15:46.190
&gt;&gt; Mike North: Hey, look at that.

227
00:15:46.190 --> 00:15:47.350
Got a lot of stuff coming back.

228
00:15:47.350 --> 00:15:49.466
And sure enough, here's our drop down.

