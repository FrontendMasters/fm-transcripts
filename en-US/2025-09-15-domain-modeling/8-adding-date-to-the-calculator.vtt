WEBVTT

1
00:00:00.320 --> 00:00:04.960
&gt;&gt; Mike North: Let's finally get
to the calculating the date.

2
00:00:04.960 --> 00:00:12.705
So we've already got something here
that's using this location repository,

3
00:00:12.705 --> 00:00:20.000
which there's one declared in an outer
scope here or sorry, in the class.

4
00:00:20.000 --> 00:00:24.709
But we're finding one record

5
00:00:24.709 --> 00:00:29.610
where the ID is of this format.

6
00:00:29.610 --> 00:00:31.050
So we're gonna make sure
that that looks right.

7
00:00:31.050 --> 00:00:32.170
We're going to just.

8
00:00:32.170 --> 00:00:33.610
Console log.

9
00:00:33.610 --> 00:00:35.610
What is this request thing coming in?

10
00:00:35.610 --> 00:00:38.611
We'll take a look at it,
we'll make sure the ID looks right,

11
00:00:38.611 --> 00:00:41.290
we'll log the location and
then we're just going to.

12
00:00:41.290 --> 00:00:43.850
Quickly we're going to fetch
the list of temperature ranges.

13
00:00:43.850 --> 00:00:45.425
And to keep things simple,

14
00:00:45.425 --> 00:00:49.330
let's just find the first month
that appears to satisfy the range.

15
00:00:49.330 --> 00:00:53.160
And we're just going to return
the first of the month as the date.

16
00:00:53.160 --> 00:00:54.520
You could interpolate.

17
00:00:54.520 --> 00:00:57.560
But that's not the point of what
we're trying to focus on here.

18
00:00:57.560 --> 00:01:02.280
So first let's say.

19
00:01:04.120 --> 00:01:06.360
Sorry, let me make sure we're
focusing on the right thing here.

20
00:01:09.320 --> 00:01:11.720
I actually don't think that
this is going to be needed.

21
00:01:13.320 --> 00:01:15.800
Let's focus on the calculateDate function.

22
00:01:15.800 --> 00:01:19.858
It's the same thing here, but
this is where we really need to focus.

23
00:01:19.858 --> 00:01:25.601
So I wanna log the locationId and

24
00:01:25.601 --> 00:01:29.010
the temperature.

25
00:01:30.210 --> 00:01:32.050
And I can delete this underscore.

26
00:01:32.050 --> 00:01:34.450
Cause now it's a used variable.

27
00:01:34.450 --> 00:01:36.730
And you can see we have
a little mini schema here.

28
00:01:36.730 --> 00:01:41.730
Cause we hadn't created that temperature
type for the starting point code.

29
00:01:41.730 --> 00:01:46.080
But let's see what actually comes through
when we hit that calculate button.

30
00:01:46.080 --> 00:01:47.040
Date button.

31
00:01:47.040 --> 00:01:48.640
So we're going to go back to our ui.

32
00:01:48.640 --> 00:01:54.960
Sorry, hit save, go back to our UI and
let's select a location.

33
00:01:54.960 --> 00:01:56.880
Minneapolis.

34
00:01:56.880 --> 00:02:04.040
And I wanna know when we're over
122 degrees in Minneapolis.

35
00:02:04.040 --> 00:02:07.320
No, let's go with 50 degrees Fahrenheit,
estimate date.

36
00:02:07.320 --> 00:02:11.680
And I expect this to fail because
we haven't built this out yet.

37
00:02:11.680 --> 00:02:14.800
But let's take a look at what
the request looks like going out.

38
00:02:18.320 --> 00:02:19.760
So we've got a locationId.

39
00:02:19.760 --> 00:02:21.920
It already has this LOC prefix.

40
00:02:21.920 --> 00:02:23.680
So we're going to keep that in mind.

41
00:02:23.680 --> 00:02:24.720
Then we've got a value.

42
00:02:24.720 --> 00:02:29.062
This is just our temperature type coming

43
00:02:29.062 --> 00:02:34.080
through Again,
going back to our code here.

44
00:02:34.080 --> 00:02:38.413
What we can do is say, well, we don't
need this anymore actually, sorry,

45
00:02:38.413 --> 00:02:40.120
we can cast it to this type of.

46
00:02:42.270 --> 00:02:45.321
Because all we're doing here
is we're telling TypeScript

47
00:02:45.321 --> 00:02:46.990
that this prefix exists.

48
00:02:46.990 --> 00:02:51.864
This is a template literal type,

49
00:02:51.864 --> 00:02:59.710
where it's like any string
that begins with locust.

50
00:02:59.710 --> 00:03:01.470
See if we get the Location out.

51
00:03:03.710 --> 00:03:08.120
So we're gonna hit estimate date again.

52
00:03:09.720 --> 00:03:11.000
I keep going the wrong way.

53
00:03:12.200 --> 00:03:13.160
What are we seeing?

54
00:03:14.440 --> 00:03:15.880
Location with id.

55
00:03:15.880 --> 00:03:17.320
This not found.

56
00:03:17.320 --> 00:03:19.000
All right, so
the first thing we want to do.

57
00:03:19.000 --> 00:03:22.520
Remember I said the database is
recreated each time we hit save.

58
00:03:22.520 --> 00:03:25.800
We want to load the app again.

59
00:03:29.000 --> 00:03:30.728
I'm going to put these
next to each other so

60
00:03:30.728 --> 00:03:33.150
I don't have to swipe
across too many things.

61
00:03:33.150 --> 00:03:36.670
We're going to load this app again
because these location IDs keep changing.

62
00:03:38.350 --> 00:03:43.230
Minneapolis, 50 degrees Fahrenheit.

63
00:03:46.430 --> 00:03:48.030
Estimate date.

64
00:03:48.030 --> 00:03:50.030
What do we get back?

65
00:03:50.030 --> 00:03:53.510
We get back December 31st.

66
00:03:53.510 --> 00:03:56.030
So this is just l the hard-coded
date that we get back.

67
00:03:56.030 --> 00:04:00.466
So what this tells me is we're going
to go back to our code here and

68
00:04:00.466 --> 00:04:03.350
we should see we've loaded a location.

69
00:04:03.350 --> 00:04:04.950
Here's the instance of the class.

70
00:04:07.270 --> 00:04:09.510
Interesting, monthly temps undefined.

71
00:04:12.390 --> 00:04:16.310
So there are two ways
we could handle this.

72
00:04:16.310 --> 00:04:23.030
One would be, well, we can go and
grab the location id.

73
00:04:23.030 --> 00:04:29.520
We can query that table, get all
the monthly temps that match the location.

74
00:04:29.520 --> 00:04:30.560
But there's a shortcut.

75
00:04:37.040 --> 00:04:41.920
If we just do this, and
I'm gonna have to reload.

76
00:04:41.920 --> 00:04:43.120
We don't need this anymore.

77
00:04:48.640 --> 00:04:52.000
Estimate date and
let's go back to our code.

78
00:04:54.090 --> 00:04:56.570
We should see that that is now populated.

79
00:04:56.570 --> 00:04:57.290
And it is.

80
00:05:00.330 --> 00:05:03.530
Sorry, that's other logging
that's happening there.

81
00:05:04.890 --> 00:05:07.290
Let me get rid of some of the other
logging so it's super clear.

82
00:05:08.330 --> 00:05:10.010
It's in our loading.

83
00:05:18.740 --> 00:05:20.260
So we don't need that anymore.

84
00:05:22.740 --> 00:05:24.300
I think this is it.

85
00:05:24.300 --> 00:05:25.460
Look at that.

86
00:05:25.460 --> 00:05:28.980
An array of monthly temperature
ranges with commas in between them.

87
00:05:28.980 --> 00:05:32.708
And if we scroll up high enough,
there we go, we have a location and

88
00:05:32.708 --> 00:05:34.183
there are monthly temps.

89
00:05:34.183 --> 00:05:37.737
So we've basically just
traversed this relationship and

90
00:05:37.737 --> 00:05:39.780
it's turned into two queries.

91
00:05:39.780 --> 00:05:42.958
One to get the location, one as a batch,

92
00:05:42.958 --> 00:05:48.020
get to fetch all of the monthly
temps that we're interested in.

93
00:05:48.020 --> 00:05:51.312
Now all we have to do is
iterate over those temps.

94
00:05:57.515 --> 00:05:58.015
Cool.

95
00:06:07.525 --> 00:06:09.540
What's the temp that the user passed in?

96
00:06:09.540 --> 00:06:11.380
Where are we getting that temperature?

97
00:06:11.380 --> 00:06:11.880
Perfect.

98
00:06:13.300 --> 00:06:18.217
If MT min value is

99
00:06:18.217 --> 00:06:22.082
greater than

100
00:06:22.082 --> 00:06:27.704
temperature value

101
00:06:27.704 --> 00:06:32.980
return new date.

102
00:06:42.030 --> 00:06:43.550
We could just do that.

103
00:06:43.550 --> 00:06:46.910
So this should give us maybe
something other than December 31st.

104
00:06:46.910 --> 00:06:47.870
Let's check it out.

105
00:06:47.870 --> 00:06:50.470
So reloading Minnesota.

106
00:06:50.470 --> 00:06:53.310
Minneapolis, Fahrenheit 50.

107
00:06:56.350 --> 00:06:56.910
Interesting.

108
00:06:56.910 --> 00:06:59.550
We still get 1231.

109
00:07:00.670 --> 00:07:03.700
What we're missing here
is our unit conversion.

110
00:07:03.700 --> 00:07:08.820
I think we already have in temperature.

111
00:07:14.340 --> 00:07:15.620
Well, let's save time.

112
00:07:15.620 --> 00:07:18.758
You could do some unit conversion here,
but for

113
00:07:18.758 --> 00:07:24.500
now I'm just going to make the equivalent
request in celsius, which is 10 degrees.

114
00:07:31.630 --> 00:07:33.470
And look at that, we've got six, one.

115
00:07:33.470 --> 00:07:35.852
So we've modeled monthly
temperature range,

116
00:07:35.852 --> 00:07:39.542
we've modeled this value object of
a temperature and we've wired it up so

117
00:07:39.542 --> 00:07:42.590
that it's all working in
the temperature date calculator.

118
00:07:43.870 --> 00:07:49.070
Next we're going to turn our
attention towards seed packets and

119
00:07:49.070 --> 00:07:54.271
really focus in on value objects and
have a discussion about what

120
00:07:54.271 --> 00:07:59.567
is most meaningful in order to deal
with this user interface where

121
00:07:59.567 --> 00:08:04.573
we can have the back of a seed packet and
structure some data for

122
00:08:04.573 --> 00:08:10.380
what's useful for your gardener in
order to keep this well organized.

