WEBVTT

1
00:00:00.246 --> 00:00:02.092
&gt;&gt; Mike North: So
the first thing we're going to do,

2
00:00:02.092 --> 00:00:04.054
we're going to check out the project and

3
00:00:04.054 --> 00:00:07.530
then we're going to take a quick look
at how dataflow works in this app.

4
00:00:07.530 --> 00:00:10.337
So I'm gonna check out the repo here.

5
00:00:10.337 --> 00:00:12.814
It's mike-north/peashoot.

6
00:00:12.814 --> 00:00:14.264
So this is the git repo.

7
00:00:14.264 --> 00:00:15.680
You're gonna check this out.

8
00:00:15.680 --> 00:00:22.480
Make sure you're using at least node js23
because of the way module imports work.

9
00:00:22.480 --> 00:00:27.314
So in your authoring environment
you can use Node V and

10
00:00:27.314 --> 00:00:31.180
you should get 23 or greater.

11
00:00:31.180 --> 00:00:37.235
You're going to want to check out the DDD

12
00:00:37.235 --> 00:00:43.825
start branch that should
look like git clone

13
00:00:43.825 --> 00:00:49.180
GitHub.com something like this.

14
00:00:52.630 --> 00:00:54.870
I'm just adding this so
it creates a new folder.

15
00:01:01.990 --> 00:01:06.230
Then you should be able to
run NPM install or NPM I.

16
00:01:14.950 --> 00:01:19.290
And then you should be
able to run NPM run dev.

17
00:01:25.210 --> 00:01:29.450
Sorry, you want to build it
before you run NPM run dev.

18
00:01:30.890 --> 00:01:35.833
Part of this is because the types
package needs to have things in its

19
00:01:35.833 --> 00:01:39.997
build output folder in order for
this dev server to run.

20
00:01:39.997 --> 00:01:43.248
So we're gonna run npm run dev.

21
00:01:43.248 --> 00:01:46.360
Great, and
you should see some feedback here.

22
00:01:46.360 --> 00:01:49.581
You know things are working if you
see like plant saved, plant saved,

23
00:01:49.581 --> 00:01:52.340
garden Is this,
server running on Port 3000.

24
00:01:52.340 --> 00:01:57.159
And if you scroll up,
you should be able to see.

25
00:01:57.159 --> 00:01:58.060
Wow, it's a lot.

26
00:01:58.060 --> 00:02:00.100
You can see we have a lot
of data in this app.

27
00:02:03.700 --> 00:02:04.740
There we go.

28
00:02:04.740 --> 00:02:07.140
Right before it did all of that.

29
00:02:07.140 --> 00:02:10.420
Localhost5173.

30
00:02:10.420 --> 00:02:12.621
If this doesn't work on your machine,

31
00:02:12.621 --> 00:02:17.022
if like you see that something that looks
like that successful build output and

32
00:02:17.022 --> 00:02:21.023
it doesn't work sometimes if you
have something already on this port,

33
00:02:21.023 --> 00:02:24.423
it'll try 5174, but
you should be able to click this and

34
00:02:24.423 --> 00:02:26.910
you'll have to do a little
bit of a refresh.

35
00:02:26.910 --> 00:02:31.150
And then you should see an experience kind
of like what we've got going on here.

36
00:02:31.150 --> 00:02:35.336
If you see that your project
isn't rendering images,

37
00:02:35.336 --> 00:02:39.795
what you're going to want to
do is the way you'll know that

38
00:02:39.795 --> 00:02:43.708
you're in this situation is
if you look at any PNG or

39
00:02:43.708 --> 00:02:48.713
JPEG in this project and
here's an example path of one Packages,

40
00:02:48.713 --> 00:02:53.790
client, public, plant icons,
Apple something png.

41
00:02:53.790 --> 00:02:58.311
If you select one of those files and
you don't see an image,

42
00:02:58.311 --> 00:03:05.150
what likely has happened is you don't have
Git LFS installed and set up in this repo.

43
00:03:05.150 --> 00:03:10.277
So you'll want to install Git lfs,
which I think On a Mac

44
00:03:10.277 --> 00:03:17.710
it's just brew install git lfs Then you're
going to want to set it up in the repo.

45
00:03:17.710 --> 00:03:19.390
What did you do to set
this up in the repo?

46
00:03:19.390 --> 00:03:20.589
&gt;&gt; Speaker 2: Git LFS install.

47
00:03:20.589 --> 00:03:22.687
&gt;&gt; Mike North: Git LFS
install in the repo.

48
00:03:22.687 --> 00:03:24.990
Sorry, I did this a while ago.

49
00:03:24.990 --> 00:03:28.529
Then git lfspull and
that should replace all these little,

50
00:03:28.529 --> 00:03:31.147
what would have been
text pointers in here,

51
00:03:31.147 --> 00:03:35.090
just like little three line text
files that refer to an image.

52
00:03:35.090 --> 00:03:39.452
You're going to actually be downloading
the image and you should then be able to

53
00:03:39.452 --> 00:03:43.050
select these things and
see that something's rendered for you.

54
00:03:43.050 --> 00:03:47.779
Before we get into implementing this
sort of temperature calculator,

55
00:03:47.779 --> 00:03:52.370
let's think about the concepts
that we will have to introduce.

56
00:03:52.370 --> 00:03:56.910
All we have so far in this project and
on the course website

57
00:03:56.910 --> 00:04:02.350
there's a little outline of how
does data flow work in this app.

58
00:04:02.350 --> 00:04:06.559
But there's a place where the request
initiates from the client,

59
00:04:06.559 --> 00:04:11.069
there's a UI component that represents
what's shown on the screen and

60
00:04:11.069 --> 00:04:16.350
then the request is initiated from this
file and there's a calculatedate method.

61
00:04:16.350 --> 00:04:17.790
So let's go look at this.

62
00:04:19.790 --> 00:04:25.242
I'm just going to do command P, paste that
link and there's a calculatedate method.

63
00:04:25.242 --> 00:04:30.615
So, here it is and you can see we
have a CalculateDateRequest and

64
00:04:30.615 --> 00:04:35.193
it looks like we're just
fetching against our API with

65
00:04:35.193 --> 00:04:41.030
a particular path and
we're sending the request as the body.

66
00:04:41.030 --> 00:04:44.543
And then if the response comes back and
it looks okay,

67
00:04:44.543 --> 00:04:47.990
we're apparently parsing it and
returning a date.

68
00:04:47.990 --> 00:04:51.266
And from that point we're going
back into the UI component and

69
00:04:51.266 --> 00:04:53.922
the appropriate thing is
rendered on the screen.

70
00:04:53.922 --> 00:04:58.044
So this is sort of an isolated piece
that represents the client side of this

71
00:04:58.044 --> 00:04:58.710
data flow.

72
00:04:59.750 --> 00:05:02.630
Now where is it happening on the server?

73
00:05:02.630 --> 00:05:04.630
Well, first let's worry
about the contract.

74
00:05:04.630 --> 00:05:12.950
Here we've got a Locations calculatedate
typescript file Locations calculatedate.

75
00:05:15.750 --> 00:05:19.854
Here you can see we've got a request and
a response.

76
00:05:19.854 --> 00:05:22.310
And here are examples
of those Zod schemas.

77
00:05:22.310 --> 00:05:27.067
So we have a location id,
we've got a temperature

78
00:05:27.067 --> 00:05:31.950
with what looks like a number and
then a union type.

79
00:05:31.950 --> 00:05:38.101
And so if we were to look at this,
this is what that sort of amounts to.

80
00:05:38.101 --> 00:05:43.091
So we can just see it
all on the same screen.

81
00:05:43.091 --> 00:05:48.310
A location id and we've got a temperature
value and a temperature unit.

82
00:05:48.310 --> 00:05:53.840
And you can see here like, like this is
the way in Zod you would articulate that.

83
00:05:53.840 --> 00:05:55.696
And then what's the response
we're looking for?

84
00:05:55.696 --> 00:05:57.120
It's a stringified date.

85
00:05:57.120 --> 00:05:58.160
And that makes sense.

86
00:05:58.160 --> 00:06:02.624
Like if we go back to our client side
code, you can see whatever this returns,

87
00:06:02.624 --> 00:06:06.280
we're just kind of like shoving
it into the date constructor.

88
00:06:06.280 --> 00:06:09.624
And so
if this is like an ISO8601 date string, or

89
00:06:09.624 --> 00:06:15.770
like whatever the date constructor is
ready to receive, this should just work.

90
00:06:15.770 --> 00:06:18.096
Otherwise we throw an error.

91
00:06:18.096 --> 00:06:20.610
So where does this land on the server?

92
00:06:20.610 --> 00:06:25.350
So this is the introduction of what
we call our first domain service.

93
00:06:25.350 --> 00:06:30.416
And this is a similarly isolated and
purposeful piece of code,

94
00:06:30.416 --> 00:06:35.193
kind of like what we were just
looking at on the client side,

95
00:06:35.193 --> 00:06:39.610
where we're dealing with locations and
dates.

96
00:06:39.610 --> 00:06:44.400
So it's like in the server package,
it's source services location.

97
00:06:46.240 --> 00:06:49.915
Here you can see we've got
a location service and

98
00:06:49.915 --> 00:06:52.520
we've got a couple methods here.

99
00:06:52.520 --> 00:06:54.640
Let me fold them up so
we can see it at a high level.

100
00:06:55.840 --> 00:06:59.794
We've got a method for getting a location,
getting all locations and

101
00:06:59.794 --> 00:07:03.760
calculating a date, and it returns
a promise that resolves to a date.

102
00:07:03.760 --> 00:07:05.360
So all of these are async.

103
00:07:05.360 --> 00:07:10.002
And an important thing I want
you all to notice here is this

104
00:07:10.002 --> 00:07:15.110
service here is dealing really
in the concept of a location.

105
00:07:15.110 --> 00:07:18.630
The HTTP request and
response stuff is handled elsewhere.

106
00:07:18.630 --> 00:07:23.861
This is part of what it means
to have a domain service.

107
00:07:23.861 --> 00:07:27.418
It is separated from our route for

108
00:07:27.418 --> 00:07:31.870
handling the requests in this code base.

109
00:07:31.870 --> 00:07:34.410
That's what deals with request and
response shapes.

110
00:07:34.410 --> 00:07:38.847
But part of what's useful to
take away from DDD here is this

111
00:07:38.847 --> 00:07:43.467
service should just deal in
the concept of whatever models,

112
00:07:43.467 --> 00:07:49.374
whatever entities are important for
the tasks that we're performing here.

113
00:07:49.374 --> 00:07:54.150
And that way you can test this
very effectively without worrying

114
00:07:54.150 --> 00:07:56.890
about HTTP requests and response.

115
00:07:56.890 --> 00:08:00.868
You're just thinking about
the date objects and

116
00:08:00.868 --> 00:08:05.140
what is stored in memory
in terms of the dates.

117
00:08:05.140 --> 00:08:07.362
Then you can test your HTTP request and

118
00:08:07.362 --> 00:08:11.599
response part of your app by kind of
mocking this and saying, all right,

119
00:08:11.599 --> 00:08:16.260
I've got a stub location service that's
just going to spit the same stuff out.

120
00:08:18.100 --> 00:08:25.190
Now, it's very easy to, in isolation, make
sure the request and response stuff work.

121
00:08:25.190 --> 00:08:26.950
So that's kind of how the data flow works.

122
00:08:26.950 --> 00:08:28.750
Start from a UI component.

123
00:08:28.750 --> 00:08:32.491
In this case, we're using Svelte because
I want it to stay as close to vanilla

124
00:08:32.491 --> 00:08:35.947
typescript as we can, and you should
just be able to set values there and

125
00:08:35.947 --> 00:08:37.230
things should just work.

126
00:08:37.230 --> 00:08:42.327
Just like it's vanilla typescript,
we go into sort of the data

127
00:08:42.327 --> 00:08:48.480
layer piece of our client, which is
this repository, to make the request,

128
00:08:48.480 --> 00:08:53.287
and then ultimately downstream
we end up in this service and

129
00:08:53.287 --> 00:08:57.540
we call Calculatedate or
we call get all locations.

