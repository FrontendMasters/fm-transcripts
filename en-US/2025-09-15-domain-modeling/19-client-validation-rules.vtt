WEBVTT

1
00:00:00.560 --> 00:00:03.229
&gt;&gt; Mike North: Next,
let's check out a branch where we

2
00:00:03.229 --> 00:00:07.480
have a lot of our raised bed layout
app already built that for us.

3
00:00:07.480 --> 00:00:12.880
So go ahead and check out the branch
called DDD dash client dash validation.

4
00:00:14.320 --> 00:00:17.445
If you have your server running in
the background, make sure you kill it and

5
00:00:17.445 --> 00:00:18.000
restart it.

6
00:00:19.280 --> 00:00:21.800
Then you should be able
to start it back up.

7
00:00:21.800 --> 00:00:28.880
NPM run dev, and you should see
a bunch of stuff starting up.

8
00:00:32.730 --> 00:00:33.230
Great.

9
00:00:34.250 --> 00:00:38.370
So if you go to your localhost5173 garden,

10
00:00:38.370 --> 00:00:43.210
you should see something
that looks like this.

11
00:00:43.210 --> 00:00:49.570
So here we have a bunch of our plants
categorized a little bit differently.

12
00:00:49.570 --> 00:00:51.690
We can see some of the data
is threaded through.

13
00:00:51.690 --> 00:00:55.610
There's a lot of placeholder data
that we could add to if we wanted to.

14
00:00:55.610 --> 00:00:57.924
And you can grab these tiles and

15
00:00:57.924 --> 00:01:01.930
you can drag them into the raised beds and
place them.

16
00:01:03.210 --> 00:01:07.890
What you may notice is that some
types of actions are not allowed.

17
00:01:07.890 --> 00:01:10.970
For example,
we see placement is out of bounds.

18
00:01:10.970 --> 00:01:13.562
If we try to put this tomato here,

19
00:01:13.562 --> 00:01:18.747
we can see we get a validation failure,
not just an error message,

20
00:01:18.747 --> 00:01:24.100
but this is a completion of
a validation task of some sort.

21
00:01:24.100 --> 00:01:30.180
Similarly, I think this bed doesn't
have enough sunlight for tomatoes.

22
00:01:30.180 --> 00:01:34.180
So I want to show you how we've set
up some business validation rules.

23
00:01:34.180 --> 00:01:40.048
This is sort of the constraint part of how
we think about these bounded contexts,

24
00:01:40.048 --> 00:01:40.660
right?

25
00:01:40.660 --> 00:01:43.576
We've got our entities,
we've got our value objects,

26
00:01:43.576 --> 00:01:47.230
the relationships and
the important constraints.

27
00:01:47.230 --> 00:01:51.538
So in this branch, what you're going
to want to take a look at is something

28
00:01:51.538 --> 00:01:53.630
called the workspace controller.

29
00:01:55.390 --> 00:01:58.865
And this is ultimately
where kind of the brains

30
00:01:58.865 --> 00:02:03.150
of plant placement in
the garden beds happen.

31
00:02:03.150 --> 00:02:06.950
So if you want to look at what
kinds of things we have in here,

32
00:02:06.950 --> 00:02:13.160
we've got validate item move, validate
item removal, validate item placement.

33
00:02:13.160 --> 00:02:18.414
And these are sort of like this is
the interface that the rest of the app

34
00:02:18.414 --> 00:02:23.320
engages with as it relates to
this workspace controller class.

35
00:02:24.520 --> 00:02:27.615
Now, looking near
the bottom of this class,

36
00:02:27.615 --> 00:02:33.880
you'll see something that's interesting
and that is plant validation rules.

37
00:02:33.880 --> 00:02:38.280
And so here we've got something
called checkBoundaries, right?

38
00:02:38.280 --> 00:02:42.190
And if we look, we've got the target zone.

39
00:02:42.190 --> 00:02:47.069
Remember in the UI we're thinking
about workspace zone item,

40
00:02:47.069 --> 00:02:50.030
and we've got the plant item.

41
00:02:50.030 --> 00:02:55.470
And we're first getting the planting
distance in feet or the number.

42
00:02:55.470 --> 00:03:00.279
And I would argue here we could
change this even to size because our

43
00:03:00.279 --> 00:03:01.950
plant has a size on it.

44
00:03:03.390 --> 00:03:04.830
This is where we were doing that.

45
00:03:05.890 --> 00:03:10.185
We have a normalized version of
size that uses math seal to round

46
00:03:10.185 --> 00:03:13.266
the planting distance
up to the nearest whole

47
00:03:13.266 --> 00:03:16.930
foot make sure we're at least
at one cell by one cell.

48
00:03:18.370 --> 00:03:26.050
Then we really just look at the lower
left corner of where the plant tile is.

49
00:03:29.010 --> 00:03:30.930
That's the target X and Y.

50
00:03:30.930 --> 00:03:35.475
So in the case of this tomato plant,
you see the little

51
00:03:35.475 --> 00:03:41.330
coordinate system on the left and
the bottom of the raised beds.

52
00:03:41.330 --> 00:03:46.028
So all we have to do is say this
bottom left cell of the four cells it

53
00:03:46.028 --> 00:03:47.170
would occupy.

54
00:03:48.610 --> 00:03:51.428
If we take that coordinate and
walk upwards and

55
00:03:51.428 --> 00:03:55.185
we exceed the height of the bed,
or if we walked rightwards and

56
00:03:55.185 --> 00:03:58.450
we exceed the width of the bed,
this is out of bounds.

57
00:04:01.340 --> 00:04:03.100
And that's this logic here.

58
00:04:03.100 --> 00:04:06.140
Target X, target Y plus size.

59
00:04:06.140 --> 00:04:08.269
So if we were to make
this more interesting and

60
00:04:08.269 --> 00:04:12.300
maybe these tiles aren't squares,
this is where we would go and change that.

61
00:04:12.300 --> 00:04:17.120
Now, what we do here is this is kind
of the concept of returning an error

62
00:04:17.120 --> 00:04:19.580
rather than throwing an error.

63
00:04:19.580 --> 00:04:21.471
So a lot of programming languages,

64
00:04:21.471 --> 00:04:24.060
like Golang is a good
example that follows this.

65
00:04:26.170 --> 00:04:28.170
Returning errors as values.

66
00:04:30.970 --> 00:04:35.290
There's something very important
about articulating things this way.

67
00:04:35.290 --> 00:04:41.131
In this case, there's a difference
between I threw while attempting to

68
00:04:41.131 --> 00:04:47.850
perform a validation versus I successfully
performed a validation and it failed.

69
00:04:49.130 --> 00:04:49.962
So this in and

70
00:04:49.962 --> 00:04:54.510
of itself is an important part of how
you might model a validation task.

71
00:04:54.510 --> 00:04:59.500
There's like, I completed and
this is allowed, or I completed, but

72
00:04:59.500 --> 00:05:01.030
this is disallowed.

73
00:05:01.030 --> 00:05:05.350
And then there's like,
I exploded, or you attempted to.

74
00:05:07.350 --> 00:05:13.030
You attempted to place me in a garden bed
that, as far as I know, doesn't exist.

75
00:05:13.030 --> 00:05:15.142
So a good mental model I use here,

76
00:05:15.142 --> 00:05:19.300
because we already have to deal
with this HTTP requests, right?

77
00:05:19.300 --> 00:05:22.928
There's a difference between
an HTTP request that's like,

78
00:05:22.928 --> 00:05:24.820
am I allowed to place this here?

79
00:05:26.180 --> 00:05:30.200
Would you ever say you're going
to say like a 400 bad request if

80
00:05:30.200 --> 00:05:34.802
it's sort of like not enough sunlight for
the plan, you want to say, yes,

81
00:05:34.802 --> 00:05:38.580
we successfully completed
the validation operation.

82
00:05:38.580 --> 00:05:44.290
Respond 200 and the answer is no,
you can't place them the plant there.

83
00:05:44.290 --> 00:05:46.050
Does that make sense?

84
00:05:46.050 --> 00:05:50.527
What this lets us do is we can
also add more information to

85
00:05:50.527 --> 00:05:55.484
the validation failure,
which then bubbles up into the UI and

86
00:05:55.484 --> 00:06:00.850
eventually it's presented in that
little red thing that you saw.

87
00:06:02.290 --> 00:06:05.130
So we've got a couple rules here.

88
00:06:05.130 --> 00:06:09.580
We've got check boundaries where you
can't place an item outside of the zone's

89
00:06:09.580 --> 00:06:10.720
boundaries.

90
00:06:10.720 --> 00:06:12.320
We've got no overlaps.

91
00:06:12.320 --> 00:06:17.200
And this gets more interesting
because we kind of have to.

92
00:06:17.200 --> 00:06:20.532
As we go through, we get the target zone,

93
00:06:20.532 --> 00:06:24.628
we look through all of
the placements of the zone and

94
00:06:24.628 --> 00:06:31.120
in case we're moving an item within
a raised bed, we wanna ignore that, right?

95
00:06:31.120 --> 00:06:36.379
Like if we're over here and we're saying,
I just want to move this spinach over

96
00:06:36.379 --> 00:06:41.326
by two, we're going to treat the original
location of the move as vacant,

97
00:06:41.326 --> 00:06:46.273
because it's also a valid operation to
just drop it right where it was, and

98
00:06:46.273 --> 00:06:49.210
that shouldn't be considered an overlap.

99
00:06:52.250 --> 00:06:58.095
Then we've got the logic
where we're going through and

100
00:06:58.095 --> 00:07:02.330
we're checking to see if there exists.

101
00:07:03.490 --> 00:07:08.352
If the placement of all
of the placements in

102
00:07:08.352 --> 00:07:12.410
the zone is not ourselves, right?

103
00:07:12.410 --> 00:07:17.665
Like, if we're dealing with a tile in the
bed that is not the thing being moved and

104
00:07:17.665 --> 00:07:20.988
dropped, then we're going
to examine its size and

105
00:07:20.988 --> 00:07:25.810
see if the width and height of these
two things overlap with each other.

106
00:07:25.810 --> 00:07:29.390
And what that might look like is this.

107
00:07:29.390 --> 00:07:32.303
Well, sorry,
I already can't drag that over here, but

108
00:07:32.303 --> 00:07:33.950
I shouldn't be able to do this.

109
00:07:35.790 --> 00:07:38.750
This overlaps with Big Boy Tomato.

110
00:07:40.590 --> 00:07:45.350
Okay, so
we have a nice little rule framework here.

111
00:07:45.350 --> 00:07:48.338
We've got a context object, and

112
00:07:48.338 --> 00:07:53.870
context has on it a lot of
the information that we would need.

113
00:07:53.870 --> 00:07:56.600
Like, where is this coming from?

114
00:07:56.600 --> 00:07:57.920
What's the operation type?

115
00:07:57.920 --> 00:08:00.600
Is this an addition, a removal?

116
00:08:00.600 --> 00:08:05.960
Is it moving within a zone or
moving across zones?

117
00:08:05.960 --> 00:08:11.186
And then we've got access ultimately to
the whole workspace in case we needed to

118
00:08:11.186 --> 00:08:16.416
go and grab sort of the root node of this
whole diagram that we have in front of us.

