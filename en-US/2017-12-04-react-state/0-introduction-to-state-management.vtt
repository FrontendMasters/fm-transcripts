WEBVTT

1
00:00:04.868 --> 00:00:06.749
&gt;&gt; Steve Kinney: So, first thing's first.

2
00:00:06.749 --> 00:00:08.316
My name is Steve.

3
00:00:08.316 --> 00:00:14.342
And by day I am the principle
front end engineer at SendGrid.

4
00:00:14.342 --> 00:00:17.975
The kind of short version of what
SendGrid does, if you've used Twilio,

5
00:00:17.975 --> 00:00:20.470
it's like that but for email.

6
00:00:20.470 --> 00:00:26.330
So every time you take an Uber or
late night order something at eBay and

7
00:00:26.330 --> 00:00:29.880
you get that email right back,
SendGrid send that to you.

8
00:00:29.880 --> 00:00:31.852
And so,
a lot of large part of that is the API.

9
00:00:31.852 --> 00:00:36.474
I actually work on our marketing
campaigns product, which is,

10
00:00:36.474 --> 00:00:39.562
this is kinda screenshot of it right here.

11
00:00:39.562 --> 00:00:43.730
And the reason I'm showing it to you,
is kinda I wanna let it wash over you for

12
00:00:43.730 --> 00:00:44.786
a second, right?

13
00:00:44.786 --> 00:00:48.226
It's effectively like a desktop
app in the browser for

14
00:00:48.226 --> 00:00:54.155
WYSIWYG-creating email clients, including
for everyone's favorite Outlook 2010.

15
00:00:56.245 --> 00:00:59.039
&gt;&gt; Steve Kinney: But,
I feel like at a certain point in a lot of

16
00:00:59.039 --> 00:01:00.400
engineers careers,

17
00:01:00.400 --> 00:01:05.700
they find the thing that they become
very passionately interested in, right?

18
00:01:05.700 --> 00:01:08.480
There are the engineers that are like,

19
00:01:08.480 --> 00:01:14.150
deep into trying to figure out how to get
every kilobyte out of their bundle size,

20
00:01:14.150 --> 00:01:17.210
and get the network download
as fast as possible.

21
00:01:17.210 --> 00:01:21.690
There are engineers who are like
passionate about getting performance down.

22
00:01:21.690 --> 00:01:25.810
To the fastest possible metric.

23
00:01:25.810 --> 00:01:28.880
What I kind of realized is if you look at
this app, there's a lot of state in it.

24
00:01:30.220 --> 00:01:32.540
There is where they
are in the application,

25
00:01:32.540 --> 00:01:35.110
whether they're on that Build tab or
that Settings tab.

26
00:01:35.110 --> 00:01:39.050
There's also the content of the Email
that they're currently building.

27
00:01:39.050 --> 00:01:40.570
Which module they have selected,

28
00:01:40.570 --> 00:01:44.780
what the different properties
of that email module is.

29
00:01:44.780 --> 00:01:47.240
There's a lot of steak\g going on,
and I found that for

30
00:01:47.240 --> 00:01:51.980
me, the thing that I have kind
of become very passionate.

31
00:01:51.980 --> 00:01:55.690
I was figuring out like how do we
manage a lot of complicated state,

32
00:01:55.690 --> 00:01:59.820
in what is effectively
a document viewer from the 90s

33
00:01:59.820 --> 00:02:02.340
that was never meant to
do any of these things.

34
00:02:02.340 --> 00:02:06.760
So it's a very kind of interesting problem
to solve, and not necessarily an easy

35
00:02:06.760 --> 00:02:10.660
problem to solve, as we're gonna
discover over the next day or two.

36
00:02:10.660 --> 00:02:15.260
This is still an emerging kind of field,

37
00:02:15.260 --> 00:02:17.280
as we kind of try different approaches and
check it out.

38
00:02:17.280 --> 00:02:20.130
So we're actually gonna kind of take
a tour of a lot of those things, and

39
00:02:20.130 --> 00:02:21.870
I'm gonna set the stage for
that right now.

40
00:02:23.210 --> 00:02:26.951
So,
&gt;&gt; Steve Kinney: We're talking

41
00:02:26.951 --> 00:02:27.747
about state.

42
00:02:27.747 --> 00:02:31.142
And, we're gonna actually take
a look at a bunch of different

43
00:02:31.142 --> 00:02:32.914
approaches to managing state.

44
00:02:32.914 --> 00:02:36.150
We're gonna spend a lot of time in code.

45
00:02:36.150 --> 00:02:37.850
Looking at different libraries.

46
00:02:37.850 --> 00:02:41.505
But, we're actually gonna be spending
a little more time think about like,

47
00:02:41.505 --> 00:02:43.930
what are the different kinds of state?

48
00:02:43.930 --> 00:02:46.521
How do we work with state and
how do we obstruct it,

49
00:02:46.521 --> 00:02:50.054
to a way that's manageable to
work with in a large application.

50
00:02:50.054 --> 00:02:53.742
A lot examples that we're looking
at very small and isolated with a,

51
00:02:53.742 --> 00:02:58.490
are meant to kind of pull out problems
that I found working in this very

52
00:02:58.490 --> 00:03:03.470
large email editor, which is just state,
upon state, upon state, upon state.

53
00:03:03.470 --> 00:03:07.458
To do that, we're actually gonna
start at a really basic level.

54
00:03:07.458 --> 00:03:09.780
So even if you're kind of new to React and
new to managing state,

55
00:03:09.780 --> 00:03:11.381
we're going to start there and
build it up.

56
00:03:11.381 --> 00:03:15.394
And that will be great if you knew it's
really important if you have a lot of

57
00:03:15.394 --> 00:03:19.343
experience, because the main part of
it is kind of build on this idea from

58
00:03:19.343 --> 00:03:23.749
the smallest possible and workout to see
how those things principles and ideas,

59
00:03:23.749 --> 00:03:27.314
kind of escalate when we get to
some more advanced approaches.

60
00:03:27.314 --> 00:03:33.320
So we're gonna start incredibly small,
which is with basic React component state.

61
00:03:33.320 --> 00:03:35.764
And when I say small, we're gonna start,

62
00:03:35.764 --> 00:03:39.460
everyone's first like react
out which is a simple counter.

63
00:03:39.460 --> 00:03:42.630
Where all the states is
encapsulated in that one component.

64
00:03:42.630 --> 00:03:46.250
There is no derived state,
there is no passing it down to children,

65
00:03:46.250 --> 00:03:47.460
there is no getting it from anywhere else.

66
00:03:47.460 --> 00:03:52.090
It starts out with this one kind of
mostly atomic unit of state in React,

67
00:03:52.090 --> 00:03:55.170
which is the simple component
that manages its own state.

68
00:03:55.170 --> 00:03:56.480
From there,

69
00:03:56.480 --> 00:04:01.330
we're gonna build up to one of the derived
state from other pieces of state.

70
00:04:02.360 --> 00:04:03.480
Spoiler alert,

71
00:04:03.480 --> 00:04:06.830
itâ€™s going to be an application that
actually got used at my old job.

72
00:04:06.830 --> 00:04:08.059
Before I worked at SendGrid,

73
00:04:08.059 --> 00:04:11.800
I was the director of front engineering
at the school of software and design.

74
00:04:11.800 --> 00:04:14.060
And one of the things you ended up
having to do lot was order pizza.

75
00:04:15.402 --> 00:04:19.920
And you laugh, cuz itâ€™s like a simple
application, but it turns out that it

76
00:04:19.920 --> 00:04:23.570
was always very difficult to figure out
exactly how much pizza we had to order.

77
00:04:23.570 --> 00:04:26.880
So I made a pizza calculator, and
it gets used a lot to this day.

78
00:04:26.880 --> 00:04:30.370
So, but that is thinking about the number
of people and the number of slices each

79
00:04:30.370 --> 00:04:33.420
person's eating, and then like trying to
figure out more state based on that state,

80
00:04:33.420 --> 00:04:34.710
but still really simple.

81
00:04:35.780 --> 00:04:38.800
From there, we're gonna build
an application where we start passing down

82
00:04:38.800 --> 00:04:42.510
state to child and
grandchildren components.

83
00:04:42.510 --> 00:04:44.740
And then those events
have to come back up.

84
00:04:44.740 --> 00:04:48.020
It's still enough that we can wrap
our heads around it in a very kind

85
00:04:48.020 --> 00:04:52.210
of short period of time, but emblematic
of the problems that start to emerge

86
00:04:52.210 --> 00:04:54.210
when you do this in larger and
larger applications.

87
00:04:54.210 --> 00:04:57.040
We need to extrapolate
that to applications that

88
00:04:57.040 --> 00:05:00.030
would take way too long for
us to build over the course of two days.

89
00:05:00.030 --> 00:05:03.750
Finally, we're gonna build that up to
like dealing with a synchronous state,

90
00:05:03.750 --> 00:05:05.400
like okay it doesn't happen immediately.

91
00:05:05.400 --> 00:05:09.910
We have to talk to a server, or
to local storage or index to be, or

92
00:05:09.910 --> 00:05:10.970
something along those lines.

93
00:05:10.970 --> 00:05:14.720
I kind of figured out what new
challenges does that introduce.

94
00:05:14.720 --> 00:05:17.220
So very systematically building up.

95
00:05:17.220 --> 00:05:22.730
Starting first with just the lowly React
component state that we all know and

96
00:05:22.730 --> 00:05:25.558
love from our very first React tutorials.

97
00:05:25.558 --> 00:05:28.715
Form there we're gonna go in a little
bit of a chronological order.

98
00:05:28.715 --> 00:05:31.989
Which is thinking a lot about Flux.

99
00:05:31.989 --> 00:05:36.115
Flux is again like Facebook says it's
a million times it is not a necessarily

100
00:05:36.115 --> 00:05:40.177
a library, but an approach or an idea
which is like there are many different

101
00:05:40.177 --> 00:05:44.454
Flux libraries, we are actually gonna
start with just the core original one.

102
00:05:44.454 --> 00:05:49.045
And a lot of the reason for
that is to think about the pattern.

103
00:05:49.045 --> 00:05:51.545
Think about what the actual
Flux architecture is,

104
00:05:51.545 --> 00:05:54.255
and what some of the decisions and
tradeoffs are there.

105
00:05:54.255 --> 00:05:59.864
And how stuff like Redox that came
after it, which is generally considered

106
00:05:59.864 --> 00:06:05.494
to be a Flux implementation, how that
derives from Flux so on and so forth.

107
00:06:05.494 --> 00:06:10.271
So, at that point we arrive at Redox,
which is again a interesting take

108
00:06:10.271 --> 00:06:14.177
from the Flux architecture
mixed with some ides from Elm,

109
00:06:14.177 --> 00:06:19.137
and definitely like a different way
of thinking about the Flux approach.

110
00:06:19.137 --> 00:06:24.052
And at this point, I think we can
call it as a wildly popular approach

111
00:06:24.052 --> 00:06:27.636
to managing state in react applications.

112
00:06:27.636 --> 00:06:32.290
And we're gonna approach that in an
interesting way, I think a lot of the ways

113
00:06:32.290 --> 00:06:36.890
that people learn Redux is directly
inside of a React application.

114
00:06:36.890 --> 00:06:40.510
So they're in React, they're learning
sometimes React and Redux at the same

115
00:06:40.510 --> 00:06:45.830
time, or at least they're learning how
to use Redux in a React application.

116
00:06:45.830 --> 00:06:50.020
We're going to start with just
hammering away at Redux itself.

117
00:06:50.020 --> 00:06:51.110
And kind of understanding it.

118
00:06:51.110 --> 00:06:54.610
Because like there's nothing about
Redux that has to be tied to React.

119
00:06:54.610 --> 00:06:56.290
You can use Redux with angular.

120
00:06:56.290 --> 00:06:58.994
You can use redux with
backbone if you wanted to.

121
00:06:58.994 --> 00:07:01.024
You could use Redux with
jQuery if you wanted to.

122
00:07:01.024 --> 00:07:04.467
So we're gonna hammer at it from
just like what is Redux and

123
00:07:04.467 --> 00:07:08.840
kind of like poke at the library and
get a sense of how it works internally.

124
00:07:08.840 --> 00:07:12.750
Sometimes recreate some of
the methods inside of redux.

125
00:07:12.750 --> 00:07:15.730
And other times just kind of like get
a sense of how they actually work

126
00:07:15.730 --> 00:07:17.420
outside of React.

127
00:07:17.420 --> 00:07:20.268
Then we're going to pull it into react and
figure out like okay,

128
00:07:20.268 --> 00:07:23.083
cuz there's the Redux library,
there's the React library.

129
00:07:23.083 --> 00:07:26.276
And then there is the React,
Redux library.

130
00:07:26.276 --> 00:07:27.960
And so what does that give us?

131
00:07:27.960 --> 00:07:31.440
That neither one those libraries have
separately, how does that work and

132
00:07:31.440 --> 00:07:32.980
how does that connect
the two of them together?

133
00:07:32.980 --> 00:07:35.810
So we understand each one
of them individually and

134
00:07:35.810 --> 00:07:36.690
then look at them together,

135
00:07:36.690 --> 00:07:41.680
which in my experience of teaching
React and Redux to a junior developers,

136
00:07:41.680 --> 00:07:47.242
as well as working with mid level
senior developers at SendGrid.

137
00:07:47.242 --> 00:07:51.160
Is a much more effective approach, than
trying to learn them both together and

138
00:07:51.160 --> 00:07:51.910
then tease them out.

139
00:07:52.920 --> 00:07:56.690
And some of these ideas for this workshop
came from that React and Firebase workshop

140
00:07:56.690 --> 00:08:01.930
that I did earlier this year,
where we kind of looked at Redox and wired

141
00:08:01.930 --> 00:08:06.090
that with Firebase in a React application,
so we had to have that extra layer in it.

142
00:08:06.090 --> 00:08:08.160
That's where a lot of the ideas for
this workshop came from.

143
00:08:09.610 --> 00:08:15.560
Redux however,
doesn't necessarily deal with Async.

144
00:08:15.560 --> 00:08:17.980
And fun fact about the web,

145
00:08:17.980 --> 00:08:21.090
is a lot times we have to work with
a synchronous code whether we like it or

146
00:08:21.090 --> 00:08:24.840
not, because you can't block the UI and
there's a network involved.

147
00:08:24.840 --> 00:08:30.260
Redux thunk does not have a cool logo,
so I made one just now.

148
00:08:30.260 --> 00:08:31.870
Weâ€™ll print out stickers later,
itâ€™ll be great.

149
00:08:32.920 --> 00:08:36.940
So a thunk is a way to defer action.

150
00:08:36.940 --> 00:08:39.520
So, instead of dispatching
an object immediately, we just say,

151
00:08:39.520 --> 00:08:40.874
Iâ€™m gonna work on this.

152
00:08:40.874 --> 00:08:44.060
Iâ€™m gonna give you this function that
will eventually dispatch the action.

153
00:08:44.060 --> 00:08:46.070
So itâ€™s a way to think
about a synchronous code.

154
00:08:46.070 --> 00:08:50.030
And itâ€™s pretty like,
easy to wrap our heads around.

155
00:08:50.030 --> 00:08:53.400
And very simple, and
simple is a double-edged sword.

156
00:08:53.400 --> 00:08:54.840
On one hand, simple is great,

157
00:08:54.840 --> 00:08:57.040
because you can wrap your head
around it fairly quickly.

158
00:08:57.040 --> 00:09:02.070
On the other hand, it's on you to build
all the future abstractions upon that.

159
00:09:02.070 --> 00:09:05.820
We're gonna take like a very kind
of brief look at Redux-Saga.

160
00:09:05.820 --> 00:09:08.350
And the reason for that is,
they very large and

161
00:09:08.350 --> 00:09:12.780
sophisticated library that does a lot of
really cools things with the concurrency

162
00:09:12.780 --> 00:09:18.080
and stuff along those lines, that could
probably be it's own today workshop.

163
00:09:18.080 --> 00:09:22.540
And like, it is only a kind
of subtitle of this workshop.

164
00:09:22.540 --> 00:09:27.660
The main reason we're going to look at
it is because it takes the general idea

165
00:09:27.660 --> 00:09:30.050
of asynchronous code, and
kind of turns it on the head,

166
00:09:30.050 --> 00:09:31.390
takes an interesting approach to it.

167
00:09:31.390 --> 00:09:33.010
And we wanna look at that idea.

168
00:09:33.010 --> 00:09:36.200
We wanna see like,
what is using generators?

169
00:09:36.200 --> 00:09:40.655
To do with a sig, what does that bring
to the table that maybe using thumps or

170
00:09:40.655 --> 00:09:42.010
callbacks doesn't.

171
00:09:42.010 --> 00:09:44.994
And how can we apply that and think of
the way we think of managing state.

172
00:09:44.994 --> 00:09:48.351
So we're kind of using that as
a alternate approach and take.

173
00:09:48.351 --> 00:09:50.433
And we will definitely get
a chance to work with it, but

174
00:09:50.433 --> 00:09:53.376
there will be a lot more under the hood,
that you can kinda peel away wit if that

175
00:09:53.376 --> 00:09:56.430
is something that like spice you
of being really interesting.

176
00:09:56.430 --> 00:10:00.500
And finally,
we're going to take a look at MobX.

177
00:10:00.500 --> 00:10:04.270
MobX is really interesting to me because
if we think about it we have the Flux

178
00:10:04.270 --> 00:10:09.140
architecture and Redux, is kind of an
implementation of Flux and Redux thug and

179
00:10:09.140 --> 00:10:14.185
Redux saga additions to Redux.

180
00:10:14.185 --> 00:10:20.760
MobX is a completely different approach
to managing state in our application.

181
00:10:20.760 --> 00:10:24.940
This is not derived from that same family
of state management libraries, but

182
00:10:24.940 --> 00:10:28.110
kind of takes more of a traditional
object oriented approach.

183
00:10:29.540 --> 00:10:32.285
And, I think it's really interesting to
look at MobX in the context of a react

184
00:10:32.285 --> 00:10:36.956
application, cuz there's been a lot of,
&gt;&gt; Steve Kinney: Functional

185
00:10:36.956 --> 00:10:40.310
programming like, focus in React.

186
00:10:40.310 --> 00:10:43.350
So kind of like, to go back to like
some object oriented principles.

187
00:10:43.350 --> 00:10:45.280
Which are still,
because it's using observable.

188
00:10:45.280 --> 00:10:47.000
Very functional under the hood.

189
00:10:47.000 --> 00:10:48.430
I think it's an interesting
way to like again,

190
00:10:48.430 --> 00:10:52.460
add a new layer perspective to
the way that we manage state.

191
00:10:52.460 --> 00:10:56.850
So we kind of like basically take
this tour of a number of approaches.

192
00:10:56.850 --> 00:11:00.882
And again, we're gonna spend a lot of time
in code and playing with these libraries,

193
00:11:00.882 --> 00:11:03.682
but the general theme of
the workshop was just called like,

194
00:11:03.682 --> 00:11:06.060
it's about estate management itself.

195
00:11:06.060 --> 00:11:07.460
Touching up on these.

196
00:11:07.460 --> 00:11:09.090
Cuz, what my goal, is for

197
00:11:09.090 --> 00:11:12.560
this this workshop to be more
than just about libraries.

198
00:11:12.560 --> 00:11:13.970
Cuz, libraries come and go.

199
00:11:13.970 --> 00:11:18.730
We can all name seven other
Flux implementation libraries,

200
00:11:18.730 --> 00:11:22.360
of varying degrees,
of popularity these days.

201
00:11:22.360 --> 00:11:26.790
I think I said this earlier, and I would
probably repeat it about 700 times of

202
00:11:26.790 --> 00:11:31.270
the courses workshop,
is that this is not a solved problem.

203
00:11:31.270 --> 00:11:35.070
And I think a lot of our approaches and
solutions are currently evolving.

204
00:11:35.070 --> 00:11:37.909
Which means the libraries
that we use today, may or

205
00:11:37.909 --> 00:11:41.341
may not be the ones that are in vogue or
the flavor of the month,

206
00:11:41.341 --> 00:11:44.329
six months down the road,
12 months down the road.

207
00:11:44.329 --> 00:11:46.597
But the perspectives and

208
00:11:46.597 --> 00:11:52.321
patterns that we see in like how
the approached to the problem,

209
00:11:52.321 --> 00:11:57.506
like a lot of these sagas
are decades old are decades old.

210
00:11:57.506 --> 00:11:59.072
These are time tested,

211
00:11:59.072 --> 00:12:03.926
well worn solutions to problems that
were kind of like bringing to table,

212
00:12:03.926 --> 00:12:09.350
saw this new set of like hey, weâ€™re
gonna build desktop class applications.

213
00:12:09.350 --> 00:12:13.820
Or native mobile class applications
in the browser of all places.

214
00:12:13.820 --> 00:12:16.070
We end up going for these old patterns, so

215
00:12:16.070 --> 00:12:19.297
what I really wanna do is focus
on patterns and approaches.

216
00:12:19.297 --> 00:12:23.458
Rather than the intricacies of any given
library, which is kind of why we're doing

217
00:12:23.458 --> 00:12:27.747
this like touch on Flux, touch on Redux,
touch on Redux spunk, touch on Redux saga.

218
00:12:27.747 --> 00:12:31.270
You're likely, you can use spunks and
saga in the same application.

219
00:12:31.270 --> 00:12:33.300
You can use all of these
in the same application,

220
00:12:33.300 --> 00:12:34.914
if you don't like your coworkers.

221
00:12:34.914 --> 00:12:37.460
And wanna keep them on their
toes in every code review.

222
00:12:37.460 --> 00:12:40.920
You could use all of them,
you are likely to use a tiny subset.

223
00:12:40.920 --> 00:12:45.250
And the reason and we're taking a tour is
again, to focus on what are the patterns

224
00:12:45.250 --> 00:12:48.080
and approaches, and
how do we think about state?

225
00:12:48.080 --> 00:12:50.328
What does it mean to manage state,

226
00:12:50.328 --> 00:12:54.750
it's kind of the major thing that I really
want to get across in our time together.

227
00:12:56.930 --> 00:12:59.920
And I kind of already preempted this by
saying this I will say this 700 times,

228
00:12:59.920 --> 00:13:02.560
I know that there are future
slides mid way through, and

229
00:13:02.560 --> 00:13:05.130
at the end of this where I
kind of rehit on this point.

230
00:13:06.210 --> 00:13:10.870
This is not a solved problem,
all of these have some amount of drawback.

231
00:13:10.870 --> 00:13:15.560
Even the fancy newest ones like has
some drawback as compared to Redux and

232
00:13:15.560 --> 00:13:16.750
also some advantages.

233
00:13:16.750 --> 00:13:21.940
So it's not hey, I'm gonna find out what
the deemed best library is a master that.

234
00:13:21.940 --> 00:13:24.130
It's about what are the tradeoffs
you need to make, and

235
00:13:24.130 --> 00:13:25.630
what kind of state are you working with?

236
00:13:27.170 --> 00:13:28.610
Cool.

237
00:13:28.610 --> 00:13:30.460
So, again to restate the goals.

238
00:13:30.460 --> 00:13:32.070
A goal is to help you think
about these patterns,

239
00:13:32.070 --> 00:13:34.310
regardless of what the current library is.

240
00:13:34.310 --> 00:13:39.002
And that should new libraries come along,
likely these patterns that have been in

241
00:13:39.002 --> 00:13:41.518
existence for decades,
will play a part and

242
00:13:41.518 --> 00:13:46.213
then help you to understand new libraries
that come along as we go through things.

