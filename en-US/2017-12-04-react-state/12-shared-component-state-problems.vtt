WEBVTT

1
00:00:03.013 --> 00:00:07.739
&gt;&gt; Steve Kinney: When last we worked on
a project together we started to feel some

2
00:00:07.739 --> 00:00:13.980
of the complexity of passing a state down
and actions, user interactions back up,

3
00:00:13.980 --> 00:00:18.370
right, we had to go through children and
grandchildren.

4
00:00:20.490 --> 00:00:25.550
And we know that state is stored in a
component and passed down as props, right?

5
00:00:25.550 --> 00:00:28.560
We can't mutate it,
we have to keep moving it along, and

6
00:00:28.560 --> 00:00:31.090
then passing those messages back
up to the place that it belongs.

7
00:00:31.090 --> 00:00:37.300
We said earlier in this workshop always to
think about the actual state as private.

8
00:00:37.300 --> 00:00:40.800
We can show it to the other children
components, but if we need to change it,

9
00:00:40.800 --> 00:00:43.990
everything needs to go back up to
where that state came from, right?

10
00:00:43.990 --> 00:00:47.757
And that is again a refrain of React.

11
00:00:47.757 --> 00:00:52.613
So I actually wanted to round back
to a discussion we had earlier,

12
00:00:52.613 --> 00:00:54.126
thinking in React.

13
00:00:54.126 --> 00:00:57.934
And kind of pull out some more quotes
about, we did this a little bit

14
00:00:57.934 --> 00:01:02.422
in Jetsetter, we started to figure out
where do we need to store the state, and

15
00:01:02.422 --> 00:01:06.590
store the actions, and where is the best
place for some of these things.

16
00:01:06.590 --> 00:01:09.160
In some cases it was the application.

17
00:01:09.160 --> 00:01:13.920
In other places we were able to get
away with it in the items list, right?

18
00:01:13.920 --> 00:01:16.832
We found that kind of naturally
as we were working on it.

19
00:01:16.832 --> 00:01:21.732
But we really didn't talk about what
was the guiding principle that lead us

20
00:01:21.732 --> 00:01:22.680
to that idea.

21
00:01:22.680 --> 00:01:28.820
So let's actually look at a few
more quotes from this tutorial.

22
00:01:30.190 --> 00:01:31.112
So one of them is,

23
00:01:31.112 --> 00:01:35.300
identify every component that renders
something based on it's state, right?

24
00:01:35.300 --> 00:01:37.660
We did that.
There were other things that are like

25
00:01:37.660 --> 00:01:40.500
sections and divs, and
stuff that we didn't do anything with.

26
00:01:40.500 --> 00:01:43.890
We didn't make a component for
the submit button itself, right?

27
00:01:43.890 --> 00:01:48.483
We kind of broke things up by thinking
about the different pieces of state and

28
00:01:48.483 --> 00:01:52.805
interactions and breaking stuff up
in a component like in those cases.

29
00:01:52.805 --> 00:01:57.264
But where we began to explore
during the exercise was finding

30
00:01:57.264 --> 00:01:59.920
a common owner component, right?

31
00:01:59.920 --> 00:02:03.077
Now, by default, that could
always be the application, right?

32
00:02:03.077 --> 00:02:05.231
The application,
if you choose to call it application.

33
00:02:05.231 --> 00:02:09.704
But that top level, that component
that you use React DOM render and

34
00:02:09.704 --> 00:02:15.202
put it onto the page, will by default be
everyone's common ancestor eventually,

35
00:02:15.202 --> 00:02:18.050
because React puts one node onto the page.

36
00:02:18.050 --> 00:02:22.661
But we started to feel like we didn't have
to pass everything up to the application.

37
00:02:22.661 --> 00:02:27.057
We were, at certain points, able to
keep stuff at a slightly lower level.

38
00:02:27.057 --> 00:02:28.836
And so we're gonna talk
a little bit more about that.

39
00:02:28.836 --> 00:02:30.530
I just want you to think about that for
a second, and

40
00:02:30.530 --> 00:02:33.070
then we're gonna round back and
give ourselves words for

41
00:02:33.070 --> 00:02:37.730
kind of that process that we went
through accidentally in the exercise.

42
00:02:39.270 --> 00:02:41.130
So that is either the common owner or

43
00:02:41.130 --> 00:02:44.400
another component up higher that
should own the state, right?

44
00:02:44.400 --> 00:02:45.660
So we saw that.

45
00:02:45.660 --> 00:02:47.770
But this is the one I think
is really interesting.

46
00:02:47.770 --> 00:02:51.118
If you can't find a component where
it makes sense to own the estate,

47
00:02:51.118 --> 00:02:53.717
create a new component simply for
holding a estate and

48
00:02:53.717 --> 00:02:57.495
add it somewhere in the hierarchy above
the common owner component, right?

49
00:02:57.495 --> 00:03:02.220
So this is the first time we're
hearing this idea of components whose

50
00:03:02.220 --> 00:03:04.750
sole job it is to hold state, right?

51
00:03:04.750 --> 00:03:08.344
That aren't necessarily in
charge of rendering anything.

52
00:03:08.344 --> 00:03:11.400
And so we're gonna play with this
idea in a few different ways.

53
00:03:12.550 --> 00:03:15.170
There are like, it does go on for
a few more things,

54
00:03:15.170 --> 00:03:18.950
like which is, though this sounds complex,
it's really just a few lines of code.

55
00:03:18.950 --> 00:03:20.820
That we all experienced, right?

56
00:03:20.820 --> 00:03:23.660
Everyone feels like, yeah, it was just
a few, it was just a few lines of code,

57
00:03:23.660 --> 00:03:26.860
but it was getting a little bit tricky.

58
00:03:26.860 --> 00:03:30.180
But it is fair that it is really explicit
about how the data is flowing through

59
00:03:30.180 --> 00:03:33.060
the app, cuz we literally did
it each step of the way, right?

60
00:03:33.060 --> 00:03:37.760
There's not a lot of magic in React
by default, other than JSX and

61
00:03:37.760 --> 00:03:38.350
stuff like that.

62
00:03:38.350 --> 00:03:40.240
But the actual mechanics of how we do it,

63
00:03:40.240 --> 00:03:44.130
we are manually passing everything
through, so I think that is kind of fair.

64
00:03:46.400 --> 00:03:47.690
But here's a slightly more,

65
00:03:47.690 --> 00:03:50.539
I think one that we could definitely
argue a little bit more over.

66
00:03:50.539 --> 00:03:53.316
And then, while it may be a little
more typing than you're used to,

67
00:03:53.316 --> 00:03:55.998
remember that code is read far
more often than it's written, and

68
00:03:55.998 --> 00:03:57.830
it's extremely modular, explicit code.

69
00:03:57.830 --> 00:04:01.083
And as you start to build
large libraries of components,

70
00:04:01.083 --> 00:04:05.356
you'll appreciate this explicitness and
modularity, with code reuse,

71
00:04:05.356 --> 00:04:07.685
your lines of code will start to shrink.

72
00:04:07.685 --> 00:04:10.660
All right, let's pause for
a second, right?

73
00:04:10.660 --> 00:04:12.663
Cuz this is gonna be a common thing,
right?

74
00:04:12.663 --> 00:04:17.110
If you were to go into Jetsetter, or
imagine a larger version of it, and

75
00:04:17.110 --> 00:04:21.350
you had to trace everything,
you could probably do it, right?

76
00:04:21.350 --> 00:04:23.190
It was tedious to write,

77
00:04:23.190 --> 00:04:25.960
this will always be a trade-off
that we have to think about.

78
00:04:25.960 --> 00:04:29.246
Which is some of the patterns
that we're gonna look at for

79
00:04:29.246 --> 00:04:34.051
solving the problem of this is tedious to
pass everything down and back up, right?

80
00:04:34.051 --> 00:04:38.332
We'll make a trade-off, which is things
will get a little less explicit, right,

81
00:04:38.332 --> 00:04:43.110
as soon as we start coming up with more
clever ways to deal with those things.

82
00:04:43.110 --> 00:04:45.651
&gt;&gt; Speaker 2: I remember
doing that in Backbone, and

83
00:04:45.651 --> 00:04:48.735
it was impossible find
out what was affecting.

84
00:04:48.735 --> 00:04:51.623
&gt;&gt; Steve Kinney: Mm-hm, yeah cuz even with
that you can mutate stuff too, right?

85
00:04:51.623 --> 00:04:54.671
So you can trace it in a React app,
so you need to make the decision,

86
00:04:54.671 --> 00:04:56.365
we're gonna look at some patterns.

87
00:04:56.365 --> 00:04:59.885
And you'll be like, I'm gonna use
all of this patterns all the time.

88
00:04:59.885 --> 00:05:03.086
That's gonna come with trade-offs as well.

89
00:05:03.086 --> 00:05:06.318
And we'll get a chance to see,
when we look at different patterns,

90
00:05:06.318 --> 00:05:08.828
we'll see different
trade-offs in each of those.

91
00:05:08.828 --> 00:05:10.132
So, yeah.

92
00:05:10.132 --> 00:05:11.568
It's unclear whether or

93
00:05:11.568 --> 00:05:16.020
not always doing evreything explicitly
in the large app make sense, right?

94
00:05:16.020 --> 00:05:18.570
Cuz it becomes very tedious
to do that tracing.

95
00:05:18.570 --> 00:05:23.596
And there are times where we might need
something across two siblings that doesn't

96
00:05:23.596 --> 00:05:28.567
necessarily matter to the parent and,
is that really adding clarity to our code?

97
00:05:28.567 --> 00:05:31.750
Unfortunately, the answer
is that it depends.

98
00:05:31.750 --> 00:05:33.720
But it's definitely easier said than done.

99
00:05:33.720 --> 00:05:36.420
It's very, I think,
okay to write it in documentation.

100
00:05:36.420 --> 00:05:40.266
But I think the reason that we're gonna
see these patterns exist, and that some of

101
00:05:40.266 --> 00:05:44.113
these libraries that we're gonna code
with exist, is because I don't think just

102
00:05:44.113 --> 00:05:48.373
because the documentation says it, doesn't
necessarily mean that it's true, right?

103
00:05:50.777 --> 00:05:52.207
&gt;&gt; Steve Kinney: So
when you go down this route,

104
00:05:52.207 --> 00:05:55.399
as we saw in Jetsetter, it effectively
means that all the state needs

105
00:05:55.399 --> 00:05:58.554
to live in the topmost common
component that needs access, right?

106
00:05:58.554 --> 00:06:02.661
And I'm saying that cuz I wanna
pause on common component, right?

107
00:06:02.661 --> 00:06:06.752
And so I wanna talk a little bit
about this article by Sam Selikoff,

108
00:06:06.752 --> 00:06:09.950
that was actually written about Ember,
right?

109
00:06:09.950 --> 00:06:12.902
But I think it gives us words for
describing what we we're doing between

110
00:06:12.902 --> 00:06:16.240
what we put in items, between what
we put in the application, between

111
00:06:16.240 --> 00:06:19.590
what could happen in the item, which is
this idea of the lowest common ancestor.

112
00:06:21.110 --> 00:06:25.755
So this is like the, it is, again,
in Ember blog post, but it's definitely

113
00:06:25.755 --> 00:06:30.042
talking about this idea of like as
you break stuff out into components,

114
00:06:30.042 --> 00:06:34.133
what are the parent components that
need to deal with the children?

115
00:06:34.133 --> 00:06:36.290
We don’t wanna put everything
up in the app, right?

116
00:06:36.290 --> 00:06:40.627
That becomes unwieldy if everything
is in the application component.

117
00:06:40.627 --> 00:06:44.197
So the example of having
a little slideable box.

118
00:06:44.197 --> 00:06:47.670
You click on the top,
it accordions smaller.

119
00:06:47.670 --> 00:06:49.630
You click it again, it pulls back out.

120
00:06:49.630 --> 00:06:51.397
Is the example that he uses.

121
00:06:51.397 --> 00:06:54.115
If it was just in the application,
you could have a button and

122
00:06:54.115 --> 00:06:56.430
a collapsible panel,
right, that control this.

123
00:06:56.430 --> 00:06:59.470
But then the application has
to become the common ancestor.

124
00:06:59.470 --> 00:07:02.770
But the application grows,
we add a sidebar.

125
00:07:02.770 --> 00:07:06.970
All of a sudden, the application isn't
necessarily the best place for it, right?

126
00:07:06.970 --> 00:07:10.517
We have this common ancestor with
both the button for opening and

127
00:07:10.517 --> 00:07:12.990
closing the panel, and
the panel itself lives.

128
00:07:12.990 --> 00:07:16.820
That is now the kind of lowest
common ancestor, right?

129
00:07:16.820 --> 00:07:18.570
We don't have to go all
the way up the tree.

130
00:07:18.570 --> 00:07:21.588
So part of it, when we think about how do
we manage the state in our applications,

131
00:07:21.588 --> 00:07:24.420
which is to think about,
how far can I push this down?

132
00:07:24.420 --> 00:07:29.410
So that the application doesn't
become the all knowing object that

133
00:07:29.410 --> 00:07:33.690
has all of the states of our application,
that becomes untenable after a while.

134
00:07:33.690 --> 00:07:34.909
But it does solve for

135
00:07:34.909 --> 00:07:39.075
problems where almost every component
needs to know stuff, right?

136
00:07:39.075 --> 00:07:40.490
So current user, right?

137
00:07:40.490 --> 00:07:42.745
This is like Twitter, effectively, right?

138
00:07:42.745 --> 00:07:45.080
Where we've &lt;notifications&gt;
in a notification list, and

139
00:07:45.080 --> 00:07:47.790
a single notification,
tweets in a timeline.

140
00:07:47.790 --> 00:07:50.330
Current user's important for
all of these things?

141
00:07:50.330 --> 00:07:53.770
Right, and in this case,
they are sub-components of the app.

142
00:07:53.770 --> 00:07:57.580
But these are very likely in
different places in your application.

143
00:07:57.580 --> 00:08:01.340
And if you have two very disparate
places in your application, and

144
00:08:01.340 --> 00:08:05.180
they both need the same state,
it can be incredibly difficult to

145
00:08:05.180 --> 00:08:08.220
keep going up the tree until
you find that correct place.

146
00:08:08.220 --> 00:08:11.190
And that correct place that
is common to both of those

147
00:08:11.190 --> 00:08:15.160
might not be the place that you
would think to look, right?

148
00:08:15.160 --> 00:08:19.308
And so this is clearly a pattern or
a problem that other people have come

149
00:08:19.308 --> 00:08:22.770
across, and there are some patterns for
dealing with it.

150
00:08:22.770 --> 00:08:25.160
So we have some hard problems
that need solving, right?

151
00:08:25.160 --> 00:08:26.750
We have a small application.

152
00:08:26.750 --> 00:08:29.510
But again,
we could feel some of the issues with it.

153
00:08:30.590 --> 00:08:33.740
Things like deep component trees, where
those siblings that both need the same

154
00:08:33.740 --> 00:08:38.070
thing, or cousins, effectively, right, are
very far down the tree from each other.

155
00:08:38.070 --> 00:08:41.590
Even in our small application,
this is effectively the flow of it, right?

156
00:08:41.590 --> 00:08:43.520
We have the application component.

157
00:08:43.520 --> 00:08:47.080
We have the new item, right,
that was kind of its own, but

158
00:08:47.080 --> 00:08:49.650
I had to talk back up to
the application to add the items.

159
00:08:49.650 --> 00:08:52.726
We have the two item lists,
different siblings.

160
00:08:52.726 --> 00:08:56.793
And each one of those had the items,
singular, they had the filter list,

161
00:08:56.793 --> 00:08:59.300
right, that were singular to them, right?

162
00:08:59.300 --> 00:09:03.980
So there are different places, and this is
starting to get a little bit crazy, right?

163
00:09:03.980 --> 00:09:07.138
And, if this tree grows,
it's gonna be even harder.

