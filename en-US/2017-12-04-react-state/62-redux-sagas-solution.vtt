WEBVTT

1
00:00:03.054 --> 00:00:08.023
&gt;&gt; Steve Kinney: So here, we have the
working version where you can see we're

2
00:00:08.023 --> 00:00:14.660
requesting a new friend and then that's
got no actual like data with the action.

3
00:00:14.660 --> 00:00:18.358
Cuz we're simply firing off the request.

4
00:00:18.358 --> 00:00:23.222
Then at the friends list, that's
where we have the data in this case.

5
00:00:23.222 --> 00:00:25.142
So we break this up into two parts and

6
00:00:25.142 --> 00:00:29.047
it's really interesting to kind of look
at it just in the actions file for

7
00:00:29.047 --> 00:00:32.391
this simple situation where
these are entirely our actions.

8
00:00:32.391 --> 00:00:33.947
They are just objects.

9
00:00:33.947 --> 00:00:39.248
We're back to this very easy to test,
easy to work with situation and then

10
00:00:39.248 --> 00:00:45.130
on that button is where we use connect to
pass in this request due for an action.

11
00:00:45.130 --> 00:00:48.300
When that fires, the saga intercepts it.

12
00:00:48.300 --> 00:00:50.635
Figures out all of our
asynchronous stuff and

13
00:00:50.635 --> 00:00:53.165
then goes back to a very
easy synchronous world.

14
00:00:53.165 --> 00:00:55.576
Let's actually take a look at what we did.

15
00:00:55.576 --> 00:00:58.726
It looks very similar to what we did and

16
00:00:58.726 --> 00:01:04.436
adjusted earlier where we bring in
the request new friend constant,

17
00:01:04.436 --> 00:01:08.684
and we are listening for
every single one of those.

18
00:01:08.684 --> 00:01:12.590
And when those happen, we make
an API.request where we just call the API.

19
00:01:12.590 --> 00:01:14.466
You could write fetch in here.

20
00:01:14.466 --> 00:01:16.442
I tend to like to abstract
out all these things.

21
00:01:16.442 --> 00:01:19.659
So if I change them or I can have
different situations in testing and

22
00:01:19.659 --> 00:01:24.260
development, and production for different
endpoints, and stuff along those lines.

23
00:01:24.260 --> 00:01:25.990
So we call it.

24
00:01:25.990 --> 00:01:27.955
We'll get back into this function.

25
00:01:27.955 --> 00:01:32.369
This function will pause as that
Api.request goes out like the browser's

26
00:01:32.369 --> 00:01:34.390
free to do other stuff.

27
00:01:34.390 --> 00:01:39.140
When that promise resolves, that'll be
when it calls .next on this generator.

28
00:01:39.140 --> 00:01:45.140
Passing in the results of that promise
which point now we have it in friend and

29
00:01:45.140 --> 00:01:48.513
then we can go ahead and
kick it off again and

30
00:01:48.513 --> 00:01:53.046
put out that new action to put
it onto the user interface.

