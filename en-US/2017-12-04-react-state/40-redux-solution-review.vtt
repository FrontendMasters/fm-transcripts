WEBVTT

1
00:00:03.560 --> 00:00:06.390
&gt;&gt; Steve Kinney: So I don't want to
discredit your hard work, but there is

2
00:00:06.390 --> 00:00:12.210
a branch called Reduct Space where I
did it already and it's here for you.

3
00:00:12.210 --> 00:00:15.945
So let's take a look to look at all
of the different parts implemented.

4
00:00:15.945 --> 00:00:19.515
Because I'm pretty sure watching me write
a bunch of functions that return objects

5
00:00:19.515 --> 00:00:21.835
would be very amusing to watch the typos,

6
00:00:21.835 --> 00:00:24.825
but probably not the best
use of your time.

7
00:00:24.825 --> 00:00:29.715
So we have filter actions,
will take texts and

8
00:00:29.715 --> 00:00:35.025
will use this update 'unpack items filter
constant, which is again that string.

9
00:00:35.025 --> 00:00:38.140
And I think I mentioned this earlier,
but I think I'll mention it again.

10
00:00:38.140 --> 00:00:42.600
A big reason why you might consider
using constance is, two reasons.

11
00:00:42.600 --> 00:00:46.270
One is if you make a typo,
it will blow up,

12
00:00:46.270 --> 00:00:49.570
because that will not be
a variable name that exists.

13
00:00:49.570 --> 00:00:52.190
And, two is that you get auto complete,

14
00:00:52.190 --> 00:00:57.750
which almost eliminates the possibility
fo number one happening, right?

15
00:00:57.750 --> 00:01:00.540
It likely you will autocomplete these so
that you won't make typos so

16
00:01:00.540 --> 00:01:01.710
that things won't blow up.

17
00:01:01.710 --> 00:01:04.860
Because otherwise, what happens
if you make a typo in the string,

18
00:01:04.860 --> 00:01:09.260
when you run through those conditionals in
the reducer, just none of them will hit.

19
00:01:09.260 --> 00:01:12.780
And you will lose probably 15
to 20 minutes of your life

20
00:01:12.780 --> 00:01:16.250
trying to figure out exactly why that is.

21
00:01:17.670 --> 00:01:20.920
So we have this update
unpacked items filter,

22
00:01:20.920 --> 00:01:24.100
which is just going to update this text.

23
00:01:24.100 --> 00:01:27.700
We'll see like what exactly happens
when we get to the reducer.

24
00:01:27.700 --> 00:01:29.540
We have update packed items filter.

25
00:01:29.540 --> 00:01:31.640
Those are the two filter
boxes on the screen.

26
00:01:33.310 --> 00:01:37.180
For the items we have that original
add new item that I wrote earlier.

27
00:01:38.290 --> 00:01:43.140
As well as a title item that will take
an id remove item mark all as packed.

28
00:01:43.140 --> 00:01:48.340
Doesn't need any additional information
because it's doing it to all of the items.

29
00:01:48.340 --> 00:01:51.040
Finally the new item actions
which is just that input field.

30
00:01:52.050 --> 00:01:56.280
Which will basically keep track of the
value that's changing in that input field

31
00:01:56.280 --> 00:01:57.980
so we can change it in this state.

32
00:01:57.980 --> 00:02:02.720
A thing I'd like to bring your
attention to is I chose to keep

33
00:02:02.720 --> 00:02:07.239
the input field in the redux store.

34
00:02:08.360 --> 00:02:12.160
Mostly to show you what's
gonna be involved in this.

35
00:02:12.160 --> 00:02:14.800
There's definitely a question
that you should ask yourself

36
00:02:14.800 --> 00:02:17.670
when we talked about this in
the very beginning of the course

37
00:02:17.670 --> 00:02:22.270
of this ephemeral state versus more
permanent long-lasting model state.

38
00:02:22.270 --> 00:02:24.730
Do I need to keep this in sync myself?

39
00:02:24.730 --> 00:02:27.600
Do I want to serialize what's
currently in the input field?

40
00:02:27.600 --> 00:02:29.260
It depends on your application.

41
00:02:29.260 --> 00:02:32.880
Right, and there will be some trade-offs
that we're gonna discuss in a second.

42
00:02:32.880 --> 00:02:35.790
So, do not take the fact that
I did it right here as a,

43
00:02:35.790 --> 00:02:37.140
you must always do everything.

44
00:02:37.140 --> 00:02:39.610
I think it's very easy when you
first start with redox that,

45
00:02:39.610 --> 00:02:41.690
everything should go in the redox store.

46
00:02:41.690 --> 00:02:44.810
Right, and maybe some things should and
some things shouldn't.

47
00:02:44.810 --> 00:02:48.510
But unfortunately, that's on you
to kind of make the decision about

48
00:02:48.510 --> 00:02:50.400
based on some of the trade-offs
that we'll look at in a second.

49
00:02:51.840 --> 00:02:59.680
So going back to the reducers, the index
reducer is simply using combined reducers.

50
00:02:59.680 --> 00:03:02.900
I think that was already in there for you.

51
00:03:02.900 --> 00:03:06.260
The filter reducer is basically taking,
looking for

52
00:03:06.260 --> 00:03:10.410
the update unpacked items filter and
the packed items filter input fields and

53
00:03:10.410 --> 00:03:12.300
it's basically changing that text.

54
00:03:12.300 --> 00:03:14.630
This is an object with
effectively two properties.

55
00:03:14.630 --> 00:03:18.000
Packed items filter,
unpacked items filter, and

56
00:03:18.000 --> 00:03:21.790
all that it's doing is changing
the text on the respective property.

57
00:03:23.480 --> 00:03:28.220
The items we do here is doing a lot
though we do in flux earlier or by hand,

58
00:03:28.220 --> 00:03:30.950
it's at the state where we're
just changing an array.

59
00:03:30.950 --> 00:03:34.880
So the state, and you'll notice that this
is just the state of items in this case.

60
00:03:36.310 --> 00:03:37.920
So we have the state of the items.

61
00:03:37.920 --> 00:03:38.960
We can filter through them.

62
00:03:38.960 --> 00:03:40.620
We're gonna map through
them to swap them out.

63
00:03:40.620 --> 00:03:43.440
This is the stuff we've done
a few times in this application.

64
00:03:43.440 --> 00:03:44.550
So I don't wanna belabor it and

65
00:03:46.340 --> 00:03:49.670
then finally the new item reducer
is just changing that value.

66
00:03:49.670 --> 00:03:52.140
That's eventually going
to get path to the UI.

67
00:03:52.140 --> 00:03:54.420
None of that is happening yet
cuz we have not written that code.

68
00:03:54.420 --> 00:03:58.950
We have effectively only talked
about Redux so far in isolation.

69
00:03:58.950 --> 00:04:03.350
These tests were technically written in
the same folder directory that also houses

70
00:04:03.350 --> 00:04:07.740
a React app, cuz that is the station
that this train is about to arrive in.

71
00:04:07.740 --> 00:04:09.910
But we haven't actually gotten there yet.

72
00:04:09.910 --> 00:04:12.110
So this is all just Redux and

73
00:04:12.110 --> 00:04:17.550
again, I can't stress this enough, objects
going into functions making new objects.

74
00:04:17.550 --> 00:04:21.150
Very, I think one of my
favorite parts about Redox is,

75
00:04:21.150 --> 00:04:24.310
while breaking stuff out can sometimes
get a little tedious to make actions, and

76
00:04:24.310 --> 00:04:28.380
action creators, and reducers, there
is a certain value in the simplicity.

77
00:04:28.380 --> 00:04:30.680
It is very easy to figure
out what's going on.

78
00:04:30.680 --> 00:04:36.908
All right, very cool,
&gt;&gt; Steve Kinney: So

79
00:04:36.908 --> 00:04:39.470
you might really like this
reducer pattern, right?

80
00:04:39.470 --> 00:04:40.560
It's a little bit different.

81
00:04:40.560 --> 00:04:46.060
We were looking at action
types with Flux earlier,

82
00:04:46.060 --> 00:04:50.200
but we weren't necessarily like Reducing
and changing the state and replacing it.

83
00:04:50.200 --> 00:04:56.300
You might, I use Flux at work and
I very much prefer this reducer pattern!

84
00:04:56.300 --> 00:04:57.450
Can I use it?

85
00:04:57.450 --> 00:04:59.800
And the answer is yes, right?

86
00:04:59.800 --> 00:05:02.175
Cuz again, a lot of this stuff
is objects and functions but,

87
00:05:02.175 --> 00:05:04.725
even better than that,
that flux library that we saw earlier

88
00:05:04.725 --> 00:05:07.465
in the utils folder has this
thing called a reduce store.

89
00:05:07.465 --> 00:05:12.925
And it effectively lets you do a redux
reducer in a normal flux implementation.

90
00:05:12.925 --> 00:05:18.775
So you can that item store in this case is
going to inherit from this reduce store.

91
00:05:18.775 --> 00:05:21.590
And the constructor,
we're just going to pass the dispatcher.

92
00:05:21.590 --> 00:05:23.840
All right, in Redux we don't have
a dispatcher, in Flux we do.

93
00:05:23.840 --> 00:05:29.770
We're gonna pass that
dispatcher to the super class.

94
00:05:29.770 --> 00:05:34.070
And then we'll give it a reduce method
that is very similar to Redux's, right?

95
00:05:34.070 --> 00:05:37.340
It takes the current state of
the world and the action, and

96
00:05:37.340 --> 00:05:39.280
returns a new state of the world.

97
00:05:39.280 --> 00:05:42.450
Right, cuz these are all
very much just Objects and

98
00:05:42.450 --> 00:05:44.320
functions we can implement this as well.

99
00:05:44.320 --> 00:05:48.937
So if you prefer this but you use a flux
app in your daily life you can still use

100
00:05:48.937 --> 00:05:51.224
this pattern it is available to you.

