WEBVTT

1
00:00:03.379 --> 00:00:08.202
&gt;&gt; Steve Kinney: So we're gonna start
by talking a little bit about Redux,

2
00:00:08.202 --> 00:00:13.790
which raises the obvious,
first question of what is Redux?

3
00:00:13.790 --> 00:00:18.720
And in a way, think about Redux as
an implementation of the Flux pattern.

4
00:00:18.720 --> 00:00:22.050
If you recall,
there is a necessary a Flux.

5
00:00:22.050 --> 00:00:24.930
Flux isn't a framework that
you just download and use,

6
00:00:24.930 --> 00:00:28.420
but it's an approach to managing
state in your application.

7
00:00:28.420 --> 00:00:31.620
So there's a whole bunch of
implementations of the Flux pattern.

8
00:00:33.350 --> 00:00:35.260
We talked about the Flux pattern at large,
and

9
00:00:35.260 --> 00:00:38.300
now we're gonna talk about the Redux and
the implementation of that pattern.

10
00:00:38.300 --> 00:00:43.320
A lot of this is inspired by Elm and some
of the ways that a state is managed in

11
00:00:43.320 --> 00:00:45.610
that kind of programming language and
paradigm.

12
00:00:45.610 --> 00:00:48.850
So we're do this in a few phases.

13
00:00:48.850 --> 00:00:53.510
I think a lot of times when
people learning Redux,

14
00:00:53.510 --> 00:00:56.090
they're learning in context
of a React application.

15
00:00:56.090 --> 00:00:59.097
So they are learning Redux,
while they're learning Redux in React and

16
00:00:59.097 --> 00:01:01.514
sometimes while they're
also learning React, right?

17
00:01:01.514 --> 00:01:05.249
And I think that causes a lot of
confusion on where the boundaries are,

18
00:01:05.249 --> 00:01:09.696
what is the responsibilities of react,
what are the responsibilities of reduct?

19
00:01:09.696 --> 00:01:13.062
And then, there is a third library that
we'll talk about in a little bit called

20
00:01:13.062 --> 00:01:13.710
React Redux.

21
00:01:13.710 --> 00:01:18.260
And so, its kind of hard to keep
track of what comes from where and

22
00:01:18.260 --> 00:01:20.920
what is the responsibility of
each one of those libraries.

23
00:01:20.920 --> 00:01:24.220
So we're gonna take a slightly
different approach and

24
00:01:24.220 --> 00:01:26.760
we're gonna start with
Redux outside of React.

25
00:01:26.760 --> 00:01:32.418
Cuz it turns out that Redux itself
is in no way React specific.

26
00:01:32.418 --> 00:01:36.467
There is nothing in the Redux library
that ties it to React or makes it so

27
00:01:36.467 --> 00:01:39.710
you couldn't use it with
literally anything, right?

28
00:01:39.710 --> 00:01:45.370
And that's part of the reason why the
React to Redux library exists, is to like,

29
00:01:45.370 --> 00:01:50.550
then provide those bindings, but
Redux itself is completely agnostic.

30
00:01:51.630 --> 00:01:55.760
Cool, so when we had a very
simple application yesterday.

31
00:01:55.760 --> 00:02:00.950
We had the item store and we had like
one model in the application, right?

32
00:02:00.950 --> 00:02:05.380
But in a Flux [INAUDIBLE],
you likely have a different store for

33
00:02:05.380 --> 00:02:08.110
what I call every like noun
in your application, right?

34
00:02:08.110 --> 00:02:11.210
Every model would be a different store and
you [INAUDIBLE] kinda

35
00:02:11.210 --> 00:02:15.720
coordinate between them and
that can get a little bit out of control.

36
00:02:15.720 --> 00:02:18.730
If you go looking for more,
if it's just like late at night,

37
00:02:18.730 --> 00:02:21.880
decide you're gonna Google for
like Flux architecture diagrams.

38
00:02:21.880 --> 00:02:24.580
You'll see like the one that
we saw in the MPM page,

39
00:02:24.580 --> 00:02:27.700
you won't find the extra
one that I drew yesterday.

40
00:02:27.700 --> 00:02:31.680
But you'll also see ones where they just
like have more stores and more views and

41
00:02:31.680 --> 00:02:33.620
there just arrows going
on all over the place.

42
00:02:33.620 --> 00:02:36.950
It really, it will keep you up night.

43
00:02:36.950 --> 00:02:41.590
So Redux take a different approach,
where all of your

44
00:02:41.590 --> 00:02:46.551
state is in one immutable state tray,
right that's it.

45
00:02:46.551 --> 00:02:51.872
And so, immutable state tray is
a very fancy way to impress people

46
00:02:51.872 --> 00:02:57.022
when what you really mean is
just a JavaScript object, right?

47
00:02:57.022 --> 00:03:01.093
But if you say immutable state tree
everyone thinks you're a lot smarter and

48
00:03:01.093 --> 00:03:03.200
you get a raise at work and it's great.

49
00:03:04.250 --> 00:03:09.060
Like Flux, one does not simply modify
the state tree and change stuff on it.

50
00:03:09.060 --> 00:03:14.800
We distribute actions, those actions
change the tree, stuff along those lines.

51
00:03:14.800 --> 00:03:19.440
So we're going to again look at
another very, very scientific and

52
00:03:19.440 --> 00:03:20.470
professional looking chart.

53
00:03:22.290 --> 00:03:25.490
So here's a new word, reducer.

54
00:03:25.490 --> 00:03:29.480
And reducer probably sounds a little
bit like the reduce function and

55
00:03:29.480 --> 00:03:33.340
that's probably a good gut reaction
if you started to think that,

56
00:03:33.340 --> 00:03:35.720
because that is effectively what it does.

57
00:03:35.720 --> 00:03:38.160
But in Redux we have
this idea of a reducer.

58
00:03:38.160 --> 00:03:42.630
And one of my favorite things about Redux
is that almost everything in the library

59
00:03:42.630 --> 00:03:46.480
or almost of what you use is
just objects and functions.

60
00:03:46.480 --> 00:03:51.160
There's not like crazy components and
it's just JavaScript objects,

61
00:03:51.160 --> 00:03:52.380
JavaScript functions,

62
00:03:52.380 --> 00:03:56.590
just arranged in a way that allow you to
do some pretty cool stuff with state.

63
00:03:56.590 --> 00:04:01.000
So the reducer is just a function,
and it takes two arguments.

64
00:04:02.090 --> 00:04:05.850
It takes some kind of action and
we remember that action is really just

65
00:04:05.850 --> 00:04:09.730
a JavaScript object that ideally
has a type properties and

66
00:04:09.730 --> 00:04:13.370
what kind of action occurred and
whatever other information that you need.

67
00:04:13.370 --> 00:04:16.310
So it takes an action,
just a JavaScript object and

68
00:04:16.310 --> 00:04:18.680
it takes the current state
of your application.

69
00:04:18.680 --> 00:04:22.340
So two objects go into a reducer,
one comes out.

70
00:04:23.680 --> 00:04:26.888
So action goes in,
current state of the world.

71
00:04:26.888 --> 00:04:28.731
Stuff happens inside the reducer.

72
00:04:28.731 --> 00:04:30.340
We'll talk about that in a little bit.

73
00:04:30.340 --> 00:04:33.768
And then,
new state of the world comes out, right?

74
00:04:33.768 --> 00:04:36.430
And there's one store that
represents your entire application.

75
00:04:36.430 --> 00:04:38.220
And this is now what's happened, right?

76
00:04:41.020 --> 00:04:45.971
We usually still use action creators.

77
00:04:45.971 --> 00:04:49.903
We could make those objects
by hand every time, but

78
00:04:49.903 --> 00:04:55.126
that is error prone and
depending on the action, tedious, right?

79
00:04:55.126 --> 00:04:58.040
We would write to have a function
that does everything for us.

80
00:04:58.040 --> 00:04:59.840
So action creators it just a function.

81
00:04:59.840 --> 00:05:01.070
It creates an object.

82
00:05:01.070 --> 00:05:05.261
Object goes in the reducer, which just
a function takes object, what comes out?

83
00:05:05.261 --> 00:05:06.221
Just an object, right?

84
00:05:06.221 --> 00:05:09.660
There's not special classes
that you're intantiating.

85
00:05:09.660 --> 00:05:14.310
It's really just like very simple
Vanilla JavaScript data structures.

86
00:05:15.650 --> 00:05:19.260
So we kinda know the theme here.

87
00:05:19.260 --> 00:05:21.370
What happens to that new
state that we produced?

88
00:05:23.100 --> 00:05:25.990
Ideally, you create state
to do something with it.

89
00:05:25.990 --> 00:05:30.940
You either save it to a server or for
a lot of us client set engineers were

90
00:05:30.940 --> 00:05:32.710
making what with the state
of our application.

91
00:05:34.840 --> 00:05:35.610
&gt;&gt; Speaker 2: Views.
&gt;&gt; Steve Kinney: Views, yeah,

92
00:05:35.610 --> 00:05:38.670
we'll explain it to the user.

93
00:05:38.670 --> 00:05:41.380
So at this point we can
send that entire tree or

94
00:05:41.380 --> 00:05:46.230
parts of that tree, cuz it's just
effectively objects, like props.

95
00:05:46.230 --> 00:05:50.550
To review, where we can have
event listeners, on click,

96
00:05:50.550 --> 00:05:53.440
on change, on mouse over, right?

97
00:05:53.440 --> 00:05:57.210
And those will ideally
trigger action creators and

98
00:05:57.210 --> 00:06:03.350
we have once again achieved the react
ideal of the unit directional data flow.

99
00:06:03.350 --> 00:06:06.070
Stuff goes into reducer,
new state comes out.

100
00:06:06.070 --> 00:06:07.620
That goes into a view.

101
00:06:07.620 --> 00:06:10.590
The user can then be the thing
that kicks off the cycle,

102
00:06:10.590 --> 00:06:13.350
again, by taking some kind of action.

103
00:06:13.350 --> 00:06:15.580
That fires off an action creator.

104
00:06:15.580 --> 00:06:17.170
The circle continues.

105
00:06:17.170 --> 00:06:18.830
We have a user interface.

106
00:06:19.890 --> 00:06:24.281
Another really good part about
Redux is that it is small.

107
00:06:24.281 --> 00:06:29.439
We are going to poke at the entire
library together right now.

108
00:06:29.439 --> 00:06:33.490
So how small is it?

109
00:06:33.490 --> 00:06:39.650
It is 5 methods and
some of those are even smaller.

110
00:06:39.650 --> 00:06:40.830
We'll talk about those in a second.

