WEBVTT

1
00:00:02.841 --> 00:00:03.815
&gt;&gt; Steve Kinney: What we're gonna do is,
we're now going to implement Flux

2
00:00:03.815 --> 00:00:04.348
throughout this application.

3
00:00:04.348 --> 00:00:09.528
First thing I'm gonna do
is just start a new branch,

4
00:00:09.528 --> 00:00:13.069
before I forget, I will close one.

5
00:00:16.174 --> 00:00:18.780
&gt;&gt; Steve Kinney: Live code in Flux.

6
00:00:18.780 --> 00:00:20.680
We're gonna go through
two stages of these.

7
00:00:20.680 --> 00:00:24.506
Just FYI, there is a flux branch,
with it implemented, and

8
00:00:24.506 --> 00:00:28.750
a flux with render props,
that we'll see eventually as well.

9
00:00:28.750 --> 00:00:33.580
So this will be the life putting one
that we do, but we also have two known

10
00:00:33.580 --> 00:00:37.980
good states, because this is
quite a big live coding refactor.

11
00:00:37.980 --> 00:00:39.170
So wish me luck.

12
00:00:39.170 --> 00:00:45.340
I would say, if you see something,
say something, because I probably didn't.

13
00:00:45.340 --> 00:00:50.010
All right, so we know that the very first
thing we need to do is, before we can

14
00:00:50.010 --> 00:00:54.080
implement Flux into the application,
we need to set up Flux, right?

15
00:00:55.510 --> 00:01:00.390
So, we know that the very first thing
that we should do is likely create that

16
00:01:00.390 --> 00:01:00.980
dispatcher.

17
00:01:00.980 --> 00:01:05.000
Now this has got a components directory,
which I don't want to create it in there.

18
00:01:05.000 --> 00:01:07.903
So, create in source and we'll create

19
00:01:11.002 --> 00:01:15.680
&gt;&gt; Steve Kinney: app dispatcher .js.

20
00:01:15.680 --> 00:01:23.156
And the app dispatcher is blissfully
the easiest part of this to implement.

21
00:01:23.156 --> 00:01:27.398
Import dispatcher

22
00:01:27.398 --> 00:01:32.582
from flux.
&gt;&gt; Speaker 2: [INAUDIBLE]

23
00:01:32.582 --> 00:01:33.501
&gt;&gt; Steve Kinney: Yes.

24
00:01:33.501 --> 00:01:38.020
[LAUGH] It's a secret.

25
00:01:38.020 --> 00:01:39.525
All right, look at that.

26
00:01:39.525 --> 00:01:42.280
[LAUGH] We've imported
the dispatcher from flux.

27
00:01:42.280 --> 00:01:48.180
And so, now we will export
default a new dispatcher.

28
00:01:48.180 --> 00:01:51.090
All right.

29
00:01:51.090 --> 00:01:55.010
So we need actions, and we need a store.

30
00:01:55.010 --> 00:01:56.980
And then we need to wire it all together.

31
00:01:56.980 --> 00:02:00.070
So let's start with the actions.

32
00:02:01.660 --> 00:02:03.400
Does it really matter
which order we do it?

33
00:02:03.400 --> 00:02:04.590
But yeah.

34
00:02:04.590 --> 00:02:08.497
So, we're gonna have three major actions,
to create the actions

35
00:02:08.497 --> 00:02:14.249
file.
&gt;&gt; Steve Kinney: What

36
00:02:14.249 --> 00:02:18.280
are the things that can happen
to the items themselves?

37
00:02:18.280 --> 00:02:23.150
I think, in this branch, I have taken
away the filter bars for a little bit,

38
00:02:23.150 --> 00:02:28.060
so we can add an item,
we can remove an item, and

39
00:02:28.060 --> 00:02:30.330
then we can change the status of the item.

40
00:02:30.330 --> 00:02:35.010
Right, so the three major things
that we are going to need to do.

41
00:02:35.010 --> 00:02:40.894
And luckily, there is a little bit
of prior art for how this works.

42
00:02:40.894 --> 00:02:44.131
So for instance we know that like,
if we go into the items, or

43
00:02:44.131 --> 00:02:52.020
the application rather.
&gt;&gt; Steve Kinney: We can see addItem,

44
00:02:52.020 --> 00:02:52.540
right?

45
00:02:52.540 --> 00:02:54.990
We get the item, so we've gotta
figure out where that comes from.

46
00:02:56.220 --> 00:03:00.926
So we can go down into NewItem.
&gt;&gt; Steve Kinney: And

47
00:03:00.926 --> 00:03:04.070
we see that we do this, onSubmit,
we're gonna create the whole item.

48
00:03:04.070 --> 00:03:05.520
And we do this is in the view layer,

49
00:03:05.520 --> 00:03:09.350
which I told you earlier today
that I didn't feel great about it.

50
00:03:09.350 --> 00:03:12.400
We are going to do it,
because where else do we put it?

51
00:03:12.400 --> 00:03:15.800
But, we have a place to put it now,
the action should take the bare minimum

52
00:03:15.800 --> 00:03:19.610
information from the UI,
and get the action ready.

53
00:03:19.610 --> 00:03:23.910
Right, so the action creator is
definitely the place for this to happen.

54
00:03:23.910 --> 00:03:26.870
And so what we will do is,
we will kind of copy this for now, and

55
00:03:26.870 --> 00:03:28.910
I'm going to be very gentle with this.

56
00:03:28.910 --> 00:03:31.979
And we'll make a new,
we'll import the AppDispatcher.

57
00:03:38.676 --> 00:03:39.428
&gt;&gt; Steve Kinney: Okay, and

58
00:03:39.428 --> 00:03:42.192
we'll create this add item function.

59
00:03:42.192 --> 00:03:45.322
This is the one we've previously been
passing through our component hierarchy,

60
00:03:45.322 --> 00:03:49.168
that we're not gonna do anymore.
&gt;&gt; Steve Kinney: And

61
00:03:49.168 --> 00:03:53.570
the only thing that is, like, unique
is whatever was in that input field.

62
00:03:53.570 --> 00:03:56.690
Right, that is the kind of
ephemeral state that we need.

63
00:03:56.690 --> 00:04:02.640
Everything else, like getting the new
unique ID, we can do that in here.

64
00:04:02.640 --> 00:04:04.640
Setting it to false,
that could happen in here.

65
00:04:04.640 --> 00:04:09.000
The only thing unique that needs to
come from the UI, is the value, right?

66
00:04:09.000 --> 00:04:14.830
So let's also pull in,
we'll do this one line up, import.

67
00:04:14.830 --> 00:04:19.772
And again, if we had a server,
then that would handle doing this.

68
00:04:26.420 --> 00:04:27.620
&gt;&gt; Steve Kinney: But we don't, so

69
00:04:27.620 --> 00:04:30.346
we're doing it kind of all client side.

70
00:04:30.346 --> 00:04:34.357
And so have the value in here,
we'll just say app dispatcher.

71
00:04:34.357 --> 00:04:35.780
And we'll dispatch that event.

72
00:04:38.270 --> 00:04:39.460
And we know that's gonna be the type.

73
00:04:39.460 --> 00:04:45.593
We'll call it add new item.
&gt;&gt; Steve Kinney: And

74
00:04:45.593 --> 00:04:47.008
the item will be the value that came in.

75
00:04:47.008 --> 00:04:51.919
We'll set pack to false, and we'll have,

76
00:04:51.919 --> 00:04:57.647
I have too many curly braces and
not enough colons.

77
00:04:57.647 --> 00:05:00.179
We'll have the value that came in,
packed to false and

78
00:05:00.179 --> 00:05:03.263
that unique ID, exactly what we're
doing the view layer before,

79
00:05:03.263 --> 00:05:07.250
it didn't feel very good about, we'll now
do in here and feel perfectly fine about.

80
00:05:08.820 --> 00:05:12.560
All right,
the two other things we need to do,

81
00:05:12.560 --> 00:05:15.340
we will mark those with a "toggleitem".

82
00:05:19.360 --> 00:05:20.590
We'll get to this in a second.

83
00:05:20.590 --> 00:05:26.680
And we will remove an item.

84
00:05:26.680 --> 00:05:28.750
Cool, let's fill those in.

85
00:05:28.750 --> 00:05:30.680
We know that this will
probably take a full item.

86
00:05:31.870 --> 00:05:33.940
So we have those available, and

87
00:05:33.940 --> 00:05:36.890
we want to be able to take it
from the other place in the app.

88
00:05:38.010 --> 00:05:41.370
So, and then we'll remove the item,
which will again take a full item.

89
00:05:43.500 --> 00:05:44.790
I'll do some stuff in a second.

90
00:05:45.950 --> 00:05:47.570
All right.

91
00:05:47.570 --> 00:05:48.680
Very cool.

92
00:05:48.680 --> 00:05:55.950
So we have those two in place, and remove
item is gonna be pretty simple right now.

93
00:05:55.950 --> 00:06:00.080
With the action created,
we're not changing anything in the store.

94
00:06:00.080 --> 00:06:03.750
We're just getting all
the information necessary to,

95
00:06:03.750 --> 00:06:07.900
when this action finally makes it to
the store, the store knows what to do.

96
00:06:07.900 --> 00:06:10.240
So it needs to know the type,
and what's the other thing,

97
00:06:10.240 --> 00:06:11.700
if it's gonna remove
an item from the store?

98
00:06:11.700 --> 00:06:16.189
What's the other thing it needs to know?
&gt;&gt; Steve Kinney: What item do you want

99
00:06:16.189 --> 00:06:17.720
me to remove, right.

100
00:06:17.720 --> 00:06:20.140
So we will go ahead, and in the same way,

101
00:06:20.140 --> 00:06:22.250
we're not adding this
item to the array here.

102
00:06:22.250 --> 00:06:26.580
We're simply getting the payload, with all
the necessary information that we need.

103
00:06:28.100 --> 00:06:34.602
So we'll just AppDispatcher.dispatch.

104
00:06:39.413 --> 00:06:41.342
&gt;&gt; Steve Kinney: 'REMOVE_ITEM'.

105
00:06:41.342 --> 00:06:43.270
And we'll pass through the item.

106
00:06:44.670 --> 00:06:47.250
There's a little piece of me,
that thinks that coming up with the ID and

107
00:06:47.250 --> 00:06:49.720
stuff can get handled
in the store as well.

108
00:06:49.720 --> 00:06:53.000
I'm kind of on the fence, normally you
have a server that's giving stuff IDs, so

109
00:06:53.000 --> 00:06:56.210
it's not really a decision that you're
making in your application at this point.

110
00:06:56.210 --> 00:06:59.060
It's like, I posted to server,
I got something back with the ID and

111
00:06:59.060 --> 00:07:00.320
the default properties.

112
00:07:00.320 --> 00:07:02.580
So this is a unique
situation in the fact that,

113
00:07:02.580 --> 00:07:05.370
like, we're doing this all
client side right now.

114
00:07:05.370 --> 00:07:07.890
So, I'm gonna leave it here,
seems good right now.

115
00:07:07.890 --> 00:07:10.600
And we'll do,
we'll kinda keep a theme here.

116
00:07:10.600 --> 00:07:15.000
So, we'll trigger a,
when I toggle an item, we're gonna trigger

117
00:07:15.000 --> 00:07:18.810
an update item action within, we'll give
it the item with the opposite, right?

118
00:07:18.810 --> 00:07:23.117
So, we're gonna update it, but
we'll have like the new version in place.

119
00:07:23.117 --> 00:07:27.708
So we'll say UPDATE_ITEM.
&gt;&gt; Steve Kinney: And

120
00:07:27.708 --> 00:07:31.260
then the item is gonna be, the item
that we had and all of its properties.

121
00:07:31.260 --> 00:07:32.220
And this looks familiar,

122
00:07:32.220 --> 00:07:35.838
this probably exists right now
in your application component.

123
00:07:35.838 --> 00:07:36.375
So,

124
00:07:42.112 --> 00:07:47.700
&gt;&gt; Steve Kinney: Cool.

125
00:07:47.700 --> 00:07:49.800
And I'm getting yelled at for,

126
00:07:51.480 --> 00:07:52.515
let's hover over and find out.

127
00:07:52.515 --> 00:07:58.270
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Steve Kinney: Yes.

128
00:07:58.270 --> 00:08:00.440
It's just lonely object here.

129
00:08:00.440 --> 00:08:05.510
I'm better than this, I can cut and
paste, I don't need to type that again.

130
00:08:05.510 --> 00:08:06.190
Dispatch.

131
00:08:08.660 --> 00:08:09.980
Got curly brace confused.

132
00:08:09.980 --> 00:08:14.056
That's why I should only
write copyscript from now on,

133
00:08:14.056 --> 00:08:16.770
I wouldn't have these problems.

134
00:08:16.770 --> 00:08:21.865
Too soon?
&gt;&gt; Speaker 2: Definitely

135
00:08:21.865 --> 00:08:30.228
not [INAUDIBLE]
&gt;&gt; Steve Kinney: So,

136
00:08:30.228 --> 00:08:31.650
we've got our actions set up.

137
00:08:31.650 --> 00:08:33.900
We've got our dispatcher set up,
we've got our action set up.

138
00:08:33.900 --> 00:08:36.654
We're like two-thirds from
having a flux implementation, so

139
00:08:36.654 --> 00:08:37.931
now it's like the hard part.

