WEBVTT

1
00:00:01.850 --> 00:00:04.850
&gt;&gt; Steve Kinney: Right, and now we've
effectively implemented the flux pattern.

2
00:00:04.850 --> 00:00:06.960
And again, I'm gonna say this one more
time cuz it is the important part.

3
00:00:06.960 --> 00:00:10.450
If you're like, hey, I just added like
six files and a bunch of complexity.

4
00:00:10.450 --> 00:00:13.680
Originally everything started at the top
of my component and I passed it down.

5
00:00:13.680 --> 00:00:16.380
Now, I have actions in a file and
I have a store in a file and

6
00:00:16.380 --> 00:00:17.460
I have all these event listeners.

7
00:00:17.460 --> 00:00:19.320
Yeah, you do, right?

8
00:00:19.320 --> 00:00:22.690
And that was the trade off that you
made to not have to pass things down six

9
00:00:22.690 --> 00:00:23.780
levels, right?

10
00:00:23.780 --> 00:00:27.810
Now, you can like literally pull
in this store and the actions, and

11
00:00:27.810 --> 00:00:29.760
hook them up to any
component in that tree.

12
00:00:30.910 --> 00:00:35.820
But you've paid a price,
you paid the price of complexity, right?

13
00:00:35.820 --> 00:00:38.890
You've paid the price of
things being harder, right?

14
00:00:38.890 --> 00:00:41.830
So it's not necessarily a slam dunk

15
00:00:42.920 --> 00:00:46.940
that you always know that
you want to do this, right?

16
00:00:46.940 --> 00:00:49.250
But if you give yourself
the regular container pattern,

17
00:00:49.250 --> 00:00:51.520
you can start with state.

18
00:00:51.520 --> 00:00:55.560
And then okay, this tree is
getting out of control, right?

19
00:00:55.560 --> 00:01:00.080
You've given yourself all the hooks into
your application to switch over to flux,

20
00:01:00.080 --> 00:01:02.310
or to redox, or to mildx, right?

21
00:01:02.310 --> 00:01:06.120
And that's the important part,
using those patterns we saw before, right?

22
00:01:06.120 --> 00:01:07.210
We're gonna look at all these libraries.

23
00:01:07.210 --> 00:01:09.370
And they're very cool, and I want you
to have an understanding of them.

24
00:01:09.370 --> 00:01:11.716
But like if you come out
with like a core thing,

25
00:01:11.716 --> 00:01:14.650
it's close to the patterns that we
saw in the lightning round, right?

26
00:01:14.650 --> 00:01:18.590
Because once you implement those patterns
in how you architect your application,

27
00:01:18.590 --> 00:01:21.150
you give yourself the ability to switch.

28
00:01:21.150 --> 00:01:24.820
Like redox is so six months ago,
I'm switching to mildx.

29
00:01:24.820 --> 00:01:26.630
You give yourself the hooks to do that,

30
00:01:26.630 --> 00:01:28.630
versus baking it deep
into your application.

31
00:01:29.800 --> 00:01:33.770
All right,
we're gonna switch gears for a second.

32
00:01:33.770 --> 00:01:36.850
And now we're gonna kinda look at
some very scientific charts, right?

33
00:01:36.850 --> 00:01:38.340
Because we looked at code,
we saw it in action.

34
00:01:38.340 --> 00:01:42.370
Normally people show you the charts and
then do all that.

35
00:01:42.370 --> 00:01:46.190
My hope is that we can see some of it in
action, see where it looks in the code,

36
00:01:46.190 --> 00:01:52.090
now pull back and look at it at a higher
level and then we'll jump back in.

37
00:01:52.090 --> 00:01:55.610
It took me several times to
wrap my head around flux.

38
00:01:55.610 --> 00:01:59.320
My goal is to give it to you
in three within an hour.

39
00:01:59.320 --> 00:02:00.740
It's very ambitious.

40
00:02:00.740 --> 00:02:03.080
But we'll get a chance to
play around with it as well.

41
00:02:03.080 --> 00:02:05.230
Because the next one we'll
do the same pattern.

42
00:02:05.230 --> 00:02:07.630
Were I'm just gonna give you
a little set of instructions and

43
00:02:07.630 --> 00:02:12.110
let you try to get inside of jet setter,
and we'll do it together.

44
00:02:12.110 --> 00:02:18.735
Lets switch back over to our slides.
&gt;&gt; Steve Kinney: So

45
00:02:18.735 --> 00:02:21.174
I told you about that flux library,

46
00:02:21.174 --> 00:02:25.499
this is that complicated chart
that everyone shows everyone.

47
00:02:26.610 --> 00:02:28.180
It's a circle.

48
00:02:28.180 --> 00:02:30.860
The problem with a circle is that it's
not really clear on where you start,

49
00:02:30.860 --> 00:02:33.090
which is why we showed it
in the code a little bit.

50
00:02:33.090 --> 00:02:39.470
So we can kind of see actions go into the
dispatcher, which send stuff to the store,

51
00:02:39.470 --> 00:02:44.830
which send stuff to the views
where the user can click on stuff.

52
00:02:44.830 --> 00:02:47.120
And the circle of life continues, right.

53
00:02:47.120 --> 00:02:49.830
There is a part here where the action
creator, it might need to go make

54
00:02:49.830 --> 00:02:52.810
a network request, or
hook in to some web api, right?

55
00:02:52.810 --> 00:02:56.280
That can happen as we get ready
that object to send it along.

56
00:02:56.280 --> 00:03:03.220
But starting with this chart for me, has
been universally unhelpful, [LAUGH] right?

57
00:03:03.220 --> 00:03:06.200
Yeah, it wasn't until I did it
a few times that it made sense.

58
00:03:08.190 --> 00:03:10.730
So, let's talk about this step by step.

59
00:03:10.730 --> 00:03:13.090
Looking at the whole chart,
not very helpful.

60
00:03:13.090 --> 00:03:16.510
So I drew my own very scientific
looking ones that are very official.

61
00:03:18.040 --> 00:03:21.350
This is a dispatcher,
this is that first part in the circle.

62
00:03:21.350 --> 00:03:22.709
This is the first thing that we wrote.

63
00:03:24.550 --> 00:03:26.700
You can have multiple stores, right?

64
00:03:26.700 --> 00:03:28.220
And they are objects that exist.

65
00:03:29.270 --> 00:03:35.670
To hook them up, you need to register
them with the dispatcher, right?

66
00:03:35.670 --> 00:03:36.450
So they're like,

67
00:03:36.450 --> 00:03:40.250
hey, I'm a store, dispatcher,
I care about what you have to say.

68
00:03:40.250 --> 00:03:43.600
Please, when you receive actions,
can you please let me know.

69
00:03:43.600 --> 00:03:45.140
This fresh is like,
I tell everyone everything,

70
00:03:45.140 --> 00:03:48.270
I don't keep secrets,
everyone finds out everything from me.

71
00:03:48.270 --> 00:03:51.303
So the store that uses
App Dispatcher.Register,

72
00:03:51.303 --> 00:03:54.617
does he like I want to subscribe
to your newsletter, and

73
00:03:54.617 --> 00:03:59.484
they will start getting dispatcher weekly,
which will send them the actions that

74
00:03:59.484 --> 00:04:03.423
it hears.
&gt;&gt; Steve Kinney: We have all these

75
00:04:03.423 --> 00:04:07.190
presentational components cuz we're all
about the presentational component.

76
00:04:07.190 --> 00:04:09.130
Maybe we have some high order components.

77
00:04:09.130 --> 00:04:12.330
If that's a current user store, maybe
there's a higher order component called

78
00:04:12.330 --> 00:04:15.100
with current user that
hooks into that store and

79
00:04:15.100 --> 00:04:18.120
passes it to whatever presentational
component that it gets.

80
00:04:18.120 --> 00:04:21.130
But we have these presentational
components that are super testable.

81
00:04:22.400 --> 00:04:26.540
And we eventually want to whether through
a higher component, a container component,

82
00:04:26.540 --> 00:04:30.100
or through render props,
we want to listen to the store.

83
00:04:30.100 --> 00:04:33.490
Right, again, I am a huge advocate of
you breaking out the presentational part

84
00:04:33.490 --> 00:04:36.190
from the container part, cuz it lets
you change your mind later, and

85
00:04:36.190 --> 00:04:38.570
reuse it in different
parts of your application.

86
00:04:38.570 --> 00:04:40.010
So we'll start listening to the store,

87
00:04:40.010 --> 00:04:43.070
And the storm will start
admitting those change events.

88
00:04:43.070 --> 00:04:44.340
Hey I changed, Hey I changed.

89
00:04:44.340 --> 00:04:45.490
This is the new thing.

90
00:04:45.490 --> 00:04:46.500
I changed.
Right, and

91
00:04:46.500 --> 00:04:49.110
they can be like okay what's
the new stage of the world.

92
00:04:49.110 --> 00:04:50.810
They get that as props.

93
00:04:50.810 --> 00:04:51.750
The UI changes.

94
00:04:53.530 --> 00:04:57.760
The user touches stuff
as they are want to do.

95
00:04:57.760 --> 00:04:58.750
Right?
As they do that,

96
00:04:58.750 --> 00:05:02.319
they trigger click events and
change events and all of those things.

97
00:05:03.420 --> 00:05:04.050
Right?

98
00:05:04.050 --> 00:05:05.343
Those get sent to the action creators and

99
00:05:05.343 --> 00:05:10.090
where do the action creators send them?
&gt;&gt; Steve Kinney: To the dispatcher.

100
00:05:10.090 --> 00:05:11.000
Right?

101
00:05:11.000 --> 00:05:12.506
And here we have the circle.

102
00:05:12.506 --> 00:05:16.872
Now one of the things we were talking
about thinking in react was what kind of

103
00:05:16.872 --> 00:05:21.659
data flows do we have in react?
&gt;&gt; Speaker 2: Direction

104
00:05:21.659 --> 00:05:22.369
&gt;&gt; Steve Kinney: One direction,

105
00:05:22.369 --> 00:05:23.730
unidirectional, right?

106
00:05:23.730 --> 00:05:28.898
And so the data is only flowing one way,
right?

107
00:05:28.898 --> 00:05:31.387
We have some registration happening,
like hey I care about you,

108
00:05:31.387 --> 00:05:32.346
start sending me stuff.

109
00:05:32.346 --> 00:05:35.952
But the data is still only going
dispatcher to store, store to views,

110
00:05:35.952 --> 00:05:39.251
user clicks something,
that goes to an action creator that then

111
00:05:39.251 --> 00:05:42.350
goes to the dispatcher and
the circle continues.

112
00:05:42.350 --> 00:05:45.930
Alright, so we keep that one
way unidirectional data flow,

113
00:05:45.930 --> 00:05:49.380
we just remove it from the component tree.

114
00:05:49.380 --> 00:05:50.810
This could be anywhere.

115
00:05:50.810 --> 00:05:52.040
We could put this at the very bottom.

116
00:05:52.040 --> 00:05:53.230
We could put it at the top.

117
00:05:53.230 --> 00:05:56.650
It doesn't matter because it floats
outside of your component hierarchy tree,

118
00:05:56.650 --> 00:06:00.550
alright these views ideally have trees,
they have sub components right?

119
00:06:00.550 --> 00:06:07.020
But we can have viewers subscribe
directly to the stores, again,

120
00:06:07.020 --> 00:06:07.900
we make a dispatcher.

121
00:06:09.530 --> 00:06:14.250
An action creator is simply
a function that dispatches an object

122
00:06:15.480 --> 00:06:16.360
right to the dispatcher.

123
00:06:17.760 --> 00:06:21.980
Stores register themselves with
the dispatcher, they decide what kind of,

124
00:06:21.980 --> 00:06:24.910
they listen to every single action and
decide whether or not they care.

125
00:06:24.910 --> 00:06:29.600
If not of these conditionals are met
then the store doesn't do anything.

126
00:06:29.600 --> 00:06:33.190
It is like I don't care about
the thing you just told me about.

127
00:06:33.190 --> 00:06:35.680
But if it does care, go ahead and
do something, right?

128
00:06:35.680 --> 00:06:38.510
One thing I like you to notice
is that I've changed some of

129
00:06:38.510 --> 00:06:39.260
the nouns in this one.

130
00:06:41.000 --> 00:06:42.060
The dispatch is the same.

131
00:06:42.060 --> 00:06:45.730
I have like an add new item.

132
00:06:45.730 --> 00:06:50.060
Action, I have this add
new at this ItemStore,

133
00:06:51.090 --> 00:06:54.730
sounds like I'm gonna have
an application coming up that has items.

134
00:06:54.730 --> 00:06:58.550
And maybe they get updated, or
removed, or packed, or unpacked,

135
00:06:58.550 --> 00:07:03.660
I don't know, I definitely don't
have the next line in front of me.

136
00:07:03.660 --> 00:07:07.100
So our store contains models, it
registers itself with the dispatcher and

137
00:07:07.100 --> 00:07:08.640
receives the actions.

138
00:07:08.640 --> 00:07:10.490
An action again is the minimal state.

139
00:07:10.490 --> 00:07:13.140
We don't need to figure out everything,
if it's incremental,

140
00:07:13.140 --> 00:07:15.270
we just want to know the new value.

141
00:07:15.270 --> 00:07:17.010
If it's a new item we just need the item.

142
00:07:17.010 --> 00:07:18.150
We don't need everything.

143
00:07:18.150 --> 00:07:19.610
Remember we said before
in the thinking and

144
00:07:19.610 --> 00:07:23.450
react section, it's that when
possible we want to derive state.

145
00:07:23.450 --> 00:07:25.440
We don't want to figure everything out.

146
00:07:25.440 --> 00:07:28.430
And so this keeps the pattern
of what is the minimal possible

147
00:07:28.430 --> 00:07:29.310
information that you need?

148
00:07:31.700 --> 00:07:32.600
There's no set state,

149
00:07:32.600 --> 00:07:35.170
you just basically, action is the only
way you get to change anything.

150
00:07:36.230 --> 00:07:37.340
Simplest possible action.

151
00:07:39.200 --> 00:07:40.756
You can add additional information,

152
00:07:40.756 --> 00:07:45.987
you don't need to.
&gt;&gt; Steve Kinney: When it does

153
00:07:45.987 --> 00:07:49.419
hit the store, if that store cares about
it, it will do the thing but you have to

154
00:07:49.419 --> 00:07:52.920
emit the change event because that's
the only way that the view find out.

155
00:07:52.920 --> 00:07:55.850
It's everything needs to either
ask to be told about something or

156
00:07:55.850 --> 00:07:57.330
tell the next thing.

157
00:07:57.330 --> 00:08:00.376
This isn't like I just create objects and
they just magically know about each other.

158
00:08:00.376 --> 00:08:07.470
I wish, right, Everyone of these things
needs to communicate with each other.

159
00:08:07.470 --> 00:08:09.090
Right, and
you need to like build those things.

160
00:08:09.090 --> 00:08:11.200
It doesn't just happen
magically by having this.

161
00:08:12.740 --> 00:08:15.050
Your views listen for the change events.

162
00:08:15.050 --> 00:08:16.530
Right?
I usually like to do it on component

163
00:08:16.530 --> 00:08:18.740
did mount and component will on mount.

164
00:08:18.740 --> 00:08:22.430
Remember we said earlier, where like
it might be very like update items.

165
00:08:22.430 --> 00:08:24.360
Don't put that on state cuz
it's part of this component.

166
00:08:25.370 --> 00:08:27.520
If you don't render it,
it doesn't go on state.

167
00:08:27.520 --> 00:08:28.980
This would be on the instance.

168
00:08:28.980 --> 00:08:31.916
So, that instance of the component
would have an update item's

169
00:08:33.868 --> 00:08:35.914
&gt;&gt; Steve Kinney: Property on it.

170
00:08:35.914 --> 00:08:40.350
Cool.
&gt;&gt; Steve Kinney: And then when the user

171
00:08:40.350 --> 00:08:44.770
does something, we can go ahead and,
look, it's a new item component.

172
00:08:44.770 --> 00:08:45.710
I don't know where this came from.

173
00:08:45.710 --> 00:08:49.000
It's almost like we're
going to need this soon.

174
00:08:49.000 --> 00:08:52.315
That will just call add
item,which is an action creator.

175
00:08:52.315 --> 00:08:56.025
Which will tell the dispatcher,
which will tell the store,

176
00:08:56.025 --> 00:08:57.780
which will update the view.

177
00:08:57.780 --> 00:09:00.920
The only thing we do when our handles
submit is prevent the default from

178
00:09:00.920 --> 00:09:03.340
refreshing the page, because that is bad.

179
00:09:03.340 --> 00:09:04.280
Because it's a form and

180
00:09:04.280 --> 00:09:08.310
if you hit enter your page is going
to go away because of the web.

181
00:09:08.310 --> 00:09:10.893
And we'll pass the values though and
then it'll reset the form.

