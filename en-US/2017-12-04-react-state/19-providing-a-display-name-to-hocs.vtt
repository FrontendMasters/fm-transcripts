WEBVTT

1
00:00:04.481 --> 00:00:07.530
&gt;&gt; Steve Kinney: Now,
everything looks great.

2
00:00:07.530 --> 00:00:14.067
But there's a very sneaky little problem.
&gt;&gt; Steve Kinney: Let's

3
00:00:14.067 --> 00:00:15.310
open up the developer tools.

4
00:00:18.010 --> 00:00:23.905
If I go to the React tools,
&gt;&gt; Steve Kinney: I

5
00:00:23.905 --> 00:00:28.123
can see the component hierarchy and
normally when you look in this

6
00:00:28.123 --> 00:00:33.838
view,
&gt;&gt; Steve Kinney: It's

7
00:00:33.838 --> 00:00:35.521
hard to make that font a little bigger,

8
00:00:35.521 --> 00:00:39.110
but you can see that it knows the name
of the pizza calculator class.

9
00:00:39.110 --> 00:00:40.948
It know the name of the application, but

10
00:00:40.948 --> 00:00:43.381
remember how I created
that anonymous class?

11
00:00:43.381 --> 00:00:48.592
It says, class and that's not great.

12
00:00:48.592 --> 00:00:53.150
Worse, there are situations where you
can just get unknown there which is not

13
00:00:53.150 --> 00:00:54.568
helpful in debugging.

14
00:00:54.568 --> 00:00:57.270
And so
while we're big fans of this pattern,

15
00:00:57.270 --> 00:01:01.940
it does have a problem,
a problem with a very easy solution.

16
00:01:01.940 --> 00:01:04.720
The way that components get
names is a lot of that happens

17
00:01:04.720 --> 00:01:07.290
during the babble translation process,
right?

18
00:01:07.290 --> 00:01:09.870
It goes and finds your classes,
well that class has a name.

19
00:01:09.870 --> 00:01:10.870
It names the component.

20
00:01:10.870 --> 00:01:13.380
If you use the stateless
functional components,

21
00:01:13.380 --> 00:01:17.920
it uses function.name to
figure out the name of those.

22
00:01:17.920 --> 00:01:22.520
So all we need to do is
figure out what to name this.

23
00:01:22.520 --> 00:01:27.410
Now, because it's a factory, we don't want
to just call it with pizza calculation.

24
00:01:27.410 --> 00:01:31.060
We want to know what
the child component is.

25
00:01:31.060 --> 00:01:36.560
If you've ever used, and we'll see
this later in React redux which is,

26
00:01:36.560 --> 00:01:40.840
you'll see connect and then the name
of the presentational component, right?

27
00:01:40.840 --> 00:01:43.840
It's basically using the name of
the component that was passed in and

28
00:01:43.840 --> 00:01:47.510
then wrapping it in more text so you can
get a little more clarity on what it is.

29
00:01:47.510 --> 00:01:51.390
So we can do that, we just have to be
mindful and implement it ourselves.

30
00:01:51.390 --> 00:01:52.190
So let's do that together.

31
00:01:53.770 --> 00:01:58.634
So you have two choices,
I can either store this in a variable and

32
00:01:58.634 --> 00:02:04.506
then just say whatever that name the
variable, I'm not gonna do it but I can.

33
00:02:12.166 --> 00:02:13.547
&gt;&gt; Steve Kinney: We then have to return

34
00:02:13.547 --> 00:02:19.945
the container.
&gt;&gt; Steve Kinney: I could say,

35
00:02:19.945 --> 00:02:25.449
Container.displayName and I do have
to be a little careful here because I

36
00:02:25.449 --> 00:02:31.222
could have stateless functional components
which have a dot name property or

37
00:02:31.222 --> 00:02:36.635
the ones I used for making a class
which have a dot display name property,

38
00:02:36.635 --> 00:02:39.069
so what I'm going to do is this.

39
00:02:40.770 --> 00:02:44.710
I'll use a template string, and
I'll say with pizza calculations.

40
00:02:46.830 --> 00:02:48.040
And again, this is kind of silly and

41
00:02:48.040 --> 00:02:52.860
arbitrary, like this would likely
be with current user, with tweets,

42
00:02:52.860 --> 00:02:56.450
with marketing campaigns if this
some great app I was working on.

43
00:02:56.450 --> 00:02:59.050
With whatever it is, whatever
the state that you're passing it in

44
00:02:59.050 --> 00:03:02.180
the ability to manage it,
would be what this is with.

45
00:03:02.180 --> 00:03:05.870
And that way if you do decide to compose
more than one of these, you'd see

46
00:03:07.750 --> 00:03:11.760
current user component with
current user with campaigns.

47
00:03:11.760 --> 00:03:13.700
You could actually see the entire chain.

48
00:03:13.700 --> 00:03:15.330
So it becomes very clear
when you're debugging.

49
00:03:17.300 --> 00:03:19.590
And so we'll use a little bit
of string interpolation here.

50
00:03:20.720 --> 00:03:24.780
And we'll say wrapped
component.displayName and

51
00:03:24.780 --> 00:03:31.090
if that is false we'll go
with WrappedComponent.name.

52
00:03:31.090 --> 00:03:40.258
So whichever one it has will return that.
&gt;&gt; Steve Kinney: So

53
00:03:40.258 --> 00:03:44.425
now if I go into the Tools, you can see
that I have with Pizza calculations,

54
00:03:44.425 --> 00:03:45.700
Pizza Calculator.

55
00:03:45.700 --> 00:03:48.360
I know exactly what I composed
in the de-bugging tools.

56
00:03:49.440 --> 00:03:53.660
My code worked without this,
but I care about my co-workers.

57
00:03:53.660 --> 00:03:56.280
And the most important co-worker ever,
future me.

58
00:03:56.280 --> 00:03:59.550
And future me will be very clear,
cuz I can't tell you when I'm going to

59
00:03:59.550 --> 00:04:02.480
try to find a given component
to debug a large application.

60
00:04:02.480 --> 00:04:06.240
And it's just called unknown or underscore
class two, how not helpful that is for

61
00:04:06.240 --> 00:04:07.380
me finding it in the code base.

62
00:04:07.380 --> 00:04:08.780
This is a very small app.

63
00:04:08.780 --> 00:04:13.490
But our codebase is very, very big so
this is incredibly helpful.

64
00:04:13.490 --> 00:04:17.280
I will show you some shorthand which is,
you saw that I stored in the variable,

65
00:04:17.280 --> 00:04:22.050
put this on the class itself,
and then returned that class.

66
00:04:22.050 --> 00:04:25.950
Remember when I was doing all that kind
of trickery with just having state and

67
00:04:25.950 --> 00:04:28.490
the arrow function so
I didn't have to bind this anymore?

68
00:04:28.490 --> 00:04:32.930
There is also more trickery I can
do to avoid this intermediary step.

69
00:04:32.930 --> 00:04:33.940
So we'll implement that as well.

70
00:04:37.450 --> 00:04:39.020
So we'll go back, we'll get rid of this.

71
00:04:44.070 --> 00:04:45.760
And we'll just immediately
return this again.

72
00:04:48.690 --> 00:04:52.370
So this trickery I used, these
are methods on the instance of the class

73
00:04:52.370 --> 00:04:55.920
on each individual component
that I create, right?

74
00:04:55.920 --> 00:04:59.970
But when I say container.displayName
that was on the class itself.

75
00:04:59.970 --> 00:05:04.268
It turns out that the friendly folks
on TC39 have given us syntax for

76
00:05:04.268 --> 00:05:09.232
this.
&gt;&gt; Steve Kinney: This will

77
00:05:09.232 --> 00:05:10.584
be on the class itself.

78
00:05:22.054 --> 00:05:23.298
&gt;&gt; Steve Kinney: Then we can go ahead.

79
00:05:32.504 --> 00:05:33.560
&gt;&gt; Steve Kinney: Cool and that should give

80
00:05:33.560 --> 00:05:41.940
me the same effect.
&gt;&gt; Steve Kinney: Exactly the same effect.

81
00:05:41.940 --> 00:05:46.270
So it's a nice short hand that gives you a
convenience method for debugging later on.

82
00:05:46.270 --> 00:05:50.650
And again, makes it very clear all
the wrappers around this component so

83
00:05:50.650 --> 00:05:51.560
that you can see.

84
00:05:51.560 --> 00:05:53.420
I think a big problem with
the container pattern, and

85
00:05:53.420 --> 00:05:57.570
we're gonna see this with the next
pattern, is that it's kind of a black box.

86
00:05:57.570 --> 00:05:59.570
It's called, whatever container.

87
00:05:59.570 --> 00:06:03.540
And yeah, you can dig into the code and
you can try to suss out what it is.

88
00:06:03.540 --> 00:06:06.280
But remember when we were looking at
that thinking and react piece, and

89
00:06:06.280 --> 00:06:09.470
there's, hey being really
explicit makes it very clear,

90
00:06:09.470 --> 00:06:12.440
everything going on your code,
even if it's tedious to write.

91
00:06:12.440 --> 00:06:16.850
Here we get to strike a balance between
now being able to compose components with

92
00:06:16.850 --> 00:06:20.110
different kinds of state without
passing it around all the time but

93
00:06:20.110 --> 00:06:23.640
also being very explicit about
where that state is coming from.

94
00:06:23.640 --> 00:06:25.870
So we can have our cake and eat it too.

95
00:06:25.870 --> 00:06:28.272
We just have to you know
embrace these patterns and

96
00:06:28.272 --> 00:06:29.996
get really comfortable with them.

