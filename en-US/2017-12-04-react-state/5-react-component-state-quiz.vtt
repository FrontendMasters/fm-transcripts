WEBVTT

1
00:00:02.651 --> 00:00:04.000
&gt;&gt; Steve Kinney: All right,
it's time for a pop quiz.

2
00:00:06.740 --> 00:00:10.700
So here is, again, a simple
version that we just kind of type.

3
00:00:10.700 --> 00:00:12.940
This is using the slightly older syntax,

4
00:00:12.940 --> 00:00:16.490
just in case it didn't wash
over us completely yet.

5
00:00:16.490 --> 00:00:19.130
So we have a state that's
gonna start at zero.

6
00:00:20.960 --> 00:00:25.602
Inside some function we're gonna call
this.setState three times in that

7
00:00:25.602 --> 00:00:27.894
function, incrementing it by one.

8
00:00:27.894 --> 00:00:33.930
And then immediately in that same function
we are going to console.log it, right?

9
00:00:33.930 --> 00:00:37.600
So the way we play this game is
we all take a mental note and

10
00:00:37.600 --> 00:00:39.970
we try to think deep and
maybe write it down.

11
00:00:39.970 --> 00:00:43.100
Maybe just tattoo it on yourself.

12
00:00:43.100 --> 00:00:46.600
What will the console log for
this.state.count be?

13
00:00:46.600 --> 00:00:52.222
Anyone have any guesses?
&gt;&gt; Speaker 2: Zero.

14
00:00:52.222 --> 00:00:53.532
&gt;&gt; Steve Kinney: We got a zero,

15
00:00:53.532 --> 00:00:54.956
we got a three.

16
00:00:54.956 --> 00:00:55.810
Any other guesses?

17
00:00:55.810 --> 00:00:56.880
Those are pretty solid.

18
00:00:59.750 --> 00:01:01.570
Correct answer is zero.

19
00:01:01.570 --> 00:01:02.791
And the reason for

20
00:01:02.791 --> 00:01:07.220
that is that this.setState is
almost always asynchronous.

21
00:01:07.220 --> 00:01:11.570
For our purposes, let's just say that
it's always asynchronous, right?

22
00:01:11.570 --> 00:01:14.930
So all three of those will
not happen right then.

23
00:01:14.930 --> 00:01:20.130
The reason for this is that React is
trying to avoid unnecessary re-renders.

24
00:01:20.130 --> 00:01:22.290
It's like, the state has changed.

25
00:01:22.290 --> 00:01:26.208
Let me collect all of these state
changes and then I will figure out,

26
00:01:26.208 --> 00:01:31.350
I'll do the virtual dom, and I'll figure
out what I'm supposed to do, right?

27
00:01:31.350 --> 00:01:34.130
So in this case, we can increment it.

28
00:01:34.130 --> 00:01:36.920
This is again a simple
version of our counter.

29
00:01:38.450 --> 00:01:40.480
All right, let's play this game.

30
00:01:42.270 --> 00:01:45.160
We'll call increment
three times right here.

31
00:01:46.600 --> 00:01:50.670
What is this going to be
the next time that it

32
00:01:50.670 --> 00:01:57.510
renders?
&gt;&gt; Speaker 2: Three.

33
00:01:57.510 --> 00:01:58.620
&gt;&gt; Steve Kinney: I got a three guess.

34
00:01:58.620 --> 00:02:00.790
All right,
we just called it three times in there.

35
00:02:00.790 --> 00:02:02.700
All right,
we're gonna guess next time it renders,

36
00:02:02.700 --> 00:02:04.120
what are we gonna show on
the page as the count?

37
00:02:05.600 --> 00:02:06.710
You can also try this in the code.

38
00:02:06.710 --> 00:02:09.930
You have the example, too, so
we can take it for a spin.

39
00:02:09.930 --> 00:02:13.787
But so the answer is 1, right?

40
00:02:13.787 --> 00:02:20.120
So we took this.stateaccount and
we said it was plus 1, three times, right?

41
00:02:20.120 --> 00:02:24.830
But in that case we're just queueing
up all the state changes and

42
00:02:24.830 --> 00:02:26.470
React is gonna batch them up.

43
00:02:26.470 --> 00:02:28.730
So it got the message three times, but

44
00:02:28.730 --> 00:02:32.740
the new state of count was
the current count plus one.

45
00:02:32.740 --> 00:02:35.830
And then we told it again it's
the current count plus one.

46
00:02:35.830 --> 00:02:39.060
We told it a third time,
it's the current count plus one.

47
00:02:39.060 --> 00:02:40.460
But guess what, that still is.

48
00:02:40.460 --> 00:02:44.710
Zero plus one is still one,
even if we say it three times.

49
00:02:44.710 --> 00:02:47.970
Right, so it queues all of them up and
tries to figure them out together.

50
00:02:49.570 --> 00:02:54.710
Cool, so in this case,
effectively what's happening,

51
00:02:54.710 --> 00:02:58.110
if you've ever used Object.assign, we'll
actually use a different text for a little

52
00:02:58.110 --> 00:03:03.360
bit later, is that it grabbed one of those
objects and merged them together, right?

53
00:03:03.360 --> 00:03:06.681
So at this point,
it just got the same message three times.

54
00:03:06.681 --> 00:03:13.320
The last one won in this case, so
we end up with just one in this case.

55
00:03:13.320 --> 00:03:17.160
And for most of my career using React,

56
00:03:17.160 --> 00:03:21.160
I was passing an object and
that seemed very cool.

57
00:03:21.160 --> 00:03:25.940
But there's actually other interfaces
that you can use with this .setState.

58
00:03:25.940 --> 00:03:27.610
So here's a fun fact.

59
00:03:27.610 --> 00:03:30.901
Did you know that you can pass in
a function as the argument instead of

60
00:03:30.901 --> 00:03:31.491
an object?

61
00:03:31.491 --> 00:03:33.710
And that's gonna behave
a little bit differently.

62
00:03:33.710 --> 00:03:36.510
So here, instead of passing in an object,

63
00:03:37.680 --> 00:03:41.570
we're gonna pass in a function that's
gonna take the current state and

64
00:03:41.570 --> 00:03:47.289
it's going to return a new
object that is state.count + 1.

65
00:03:48.910 --> 00:03:53.102
So we call that three times, and does
anyone have any guesses what we'll see

66
00:03:53.102 --> 00:04:02.460
rendered this time?
&gt;&gt; Steve Kinney: Three.

67
00:04:03.920 --> 00:04:06.830
We use the function rather than merge
a bunch of objects which is what

68
00:04:06.830 --> 00:04:10.810
it does when it sees objects, it grabs
the functions and it plays through them.

69
00:04:10.810 --> 00:04:12.090
One, then two, then three.

70
00:04:12.090 --> 00:04:14.020
It plays through each
function that it receives.

71
00:04:14.020 --> 00:04:15.920
So we'll get state.count plus 1.

72
00:04:15.920 --> 00:04:16.680
Then we'll get to two.

73
00:04:16.680 --> 00:04:18.570
Then we'll get to three
before we render it.

74
00:04:18.570 --> 00:04:20.660
So it behaves slightly differently and

75
00:04:20.660 --> 00:04:23.860
more the way since three was our
guess when we saw the object before,

76
00:04:23.860 --> 00:04:27.741
behaves more the way that we expected
the original syntax to behave.

77
00:04:29.120 --> 00:04:30.920
So it plays through each one of them.

78
00:04:30.920 --> 00:04:35.190
And this actually gives us some
interesting programmatic control.

79
00:04:35.190 --> 00:04:37.370
They're learned about off of the Twitters,

80
00:04:37.370 --> 00:04:42.398
some Dan Abramov, which is you can
actually pull those functions out.

81
00:04:42.398 --> 00:04:45.120
So just say we're using
increment all over the place.

82
00:04:45.120 --> 00:04:48.664
You could pull those functions out and
pass them in, right?

83
00:04:48.664 --> 00:04:51.260
And if we see the state,
it'll increment it.

84
00:04:51.260 --> 00:04:53.650
They're not tied to that
given class anymore.

85
00:04:53.650 --> 00:04:56.520
Another thing that I'd like
to do with it is I can now

86
00:04:56.520 --> 00:05:00.110
look at the state in this case and I can
have some of my programmatic logic here.

87
00:05:00.110 --> 00:05:04.650
So if I want the counter to never go
back at five, as I'm playing through

88
00:05:04.650 --> 00:05:06.910
all of those functions that
are trying to change the state,

89
00:05:06.910 --> 00:05:09.960
I can actually look at what the state
is after the last one that played.

90
00:05:09.960 --> 00:05:11.370
So if I have many of
them happening at once.

91
00:05:11.370 --> 00:05:14.670
And arguably, you can be like,
I shouldn't have many of them at once.

92
00:05:14.670 --> 00:05:19.700
But things happen in large applications
that we don't want to talk about

93
00:05:19.700 --> 00:05:21.760
in front of new friends.

94
00:05:21.760 --> 00:05:25.770
So this gives you the ability to see what
the state is as it plays through this one.

95
00:05:25.770 --> 00:05:27.110
And kinda gives you a little more control,

96
00:05:27.110 --> 00:05:31.230
and again,
is helping with strange edge cases.

97
00:05:32.400 --> 00:05:35.239
There's one other thing we
can do with this .setState,

98
00:05:35.239 --> 00:05:36.820
is it turns out it takes
a second argument.

99
00:05:37.880 --> 00:05:40.390
And that second argument
is a callback function.

100
00:05:41.740 --> 00:05:46.606
So we can either pass in an object or
a function that will mutate the state,

101
00:05:46.606 --> 00:05:51.471
and then we can pass a second argument
that it will call once it has done that

102
00:05:51.471 --> 00:05:52.980
state change.

103
00:05:52.980 --> 00:05:55.030
So why would you use this?

104
00:05:55.030 --> 00:06:00.210
I actually use it a lot, so we have in
the email editor we have a color picker.

105
00:06:00.210 --> 00:06:03.660
And one of the things that we do in
there is we save the most recent

106
00:06:03.660 --> 00:06:06.090
colors to local storage, right?

107
00:06:06.090 --> 00:06:07.602
So I use the callback in this case.

108
00:06:07.602 --> 00:06:10.090
They have picked a new color.

109
00:06:10.090 --> 00:06:11.160
I wanna have the recent colors.

110
00:06:11.160 --> 00:06:14.300
I'm saving it to local storage
every time it changes, right?

111
00:06:14.300 --> 00:06:18.030
I could try to do this but we want to have
it after the state has changed, right?

112
00:06:18.030 --> 00:06:20.530
If something happens,
I don't necessarily wanna save that,

113
00:06:20.530 --> 00:06:22.550
especially if I'm saving to local storage.

114
00:06:22.550 --> 00:06:26.260
And if it's because of a bug that I
had where it wasn't a valid color, or

115
00:06:26.260 --> 00:06:29.745
the function blew up for some reason,
I personally would rather not

116
00:06:29.745 --> 00:06:32.250
save that to local storage and
try to rehydrate it forever and ever and

117
00:06:32.250 --> 00:06:33.740
ever and ever,
because support will hate me.

118
00:06:33.740 --> 00:06:38.470
And like my sole job as an engineer
is to not have support hate me.

119
00:06:38.470 --> 00:06:40.650
Or not have them come up to my desk,
right?

120
00:06:40.650 --> 00:06:44.268
They're very nice but it usually means
that my team did something wrong.

