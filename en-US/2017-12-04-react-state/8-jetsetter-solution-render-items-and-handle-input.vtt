WEBVTT

1
00:00:01.800 --> 00:00:06.385
&gt;&gt; Steve Kinney: So, we're going to
implement this application together and

2
00:00:06.385 --> 00:00:11.851
see kind some of the difficulties like
I said before, it's a small app but

3
00:00:11.851 --> 00:00:17.070
it has a bunch of the problems we
find in larger applications, right?

4
00:00:17.070 --> 00:00:21.030
Like, we are gonna have to pass stuff
down from parents to children to

5
00:00:21.030 --> 00:00:22.210
grandchildren, right.

6
00:00:22.210 --> 00:00:25.350
In a larger application you might have
to go down a few more ancestors, but

7
00:00:25.350 --> 00:00:28.020
the process is effectively the same,
right?

8
00:00:28.020 --> 00:00:31.080
So it's a small enough app to feel
a little bit of the hurt, but

9
00:00:31.080 --> 00:00:33.520
also begin to wrap our minds around it.

10
00:00:33.520 --> 00:00:35.610
So the first thing I'm gonna try to do is,

11
00:00:35.610 --> 00:00:39.640
I have an array of just
like default items.

12
00:00:39.640 --> 00:00:41.427
I'd love to get those on the page.

13
00:00:44.534 --> 00:00:47.236
&gt;&gt; Steve Kinney: So, right now,
if I go to Application and

14
00:00:47.236 --> 00:00:52.718
what I'm gonna do real quick is, I'm gonna
just start extra live coding branch, so

15
00:00:52.718 --> 00:01:00.502
I can push these up
&gt;&gt; Steve Kinney: Live coding,

16
00:01:00.502 --> 00:01:02.633
call it basic state.

17
00:01:06.487 --> 00:01:12.820
&gt;&gt; Steve Kinney: All right, so
I have this array of default items.

18
00:01:12.820 --> 00:01:15.581
I think the first thing to do is to
set the initial state with those.

19
00:01:15.581 --> 00:01:21.340
So we will say items and
we'll say defaultState, right.

20
00:01:21.340 --> 00:01:23.386
I could copy and paste them but why?

21
00:01:23.386 --> 00:01:28.162
Okay, that's not gonna show them
on the page per se because I'm

22
00:01:28.162 --> 00:01:30.140
passing empty arrays in.

23
00:01:30.140 --> 00:01:33.080
Now I know that I need two different kind.

24
00:01:33.080 --> 00:01:34.020
I need two different arrays.

25
00:01:34.020 --> 00:01:36.910
I need the packed items and
the unpacked items.

26
00:01:36.910 --> 00:01:39.770
And so I know that I have the items.

27
00:01:39.770 --> 00:01:41.190
I can get them from state right here.

28
00:01:41.190 --> 00:01:42.202
So I can say const.

29
00:01:42.202 --> 00:01:45.048
I use restructuring to get items.

30
00:01:46.719 --> 00:01:49.055
&gt;&gt; Steve Kinney: And
if you haven't seen this syntax before,

31
00:01:49.055 --> 00:01:52.840
it is simply the same as saying
const items equals this.state.items.

32
00:01:52.840 --> 00:01:57.610
But I add two extra curly braces and
save myself four characters.

33
00:01:57.610 --> 00:02:00.193
But it allows me to do that.

34
00:02:00.193 --> 00:02:03.810
So now, each one of these
items has a packed boolen.

35
00:02:03.810 --> 00:02:07.170
I'm just gonna cheat a little bit,
I'm gonna use a filter.

36
00:02:07.170 --> 00:02:11.090
And this does mean that I'm gonna filter
through each one of them on every render.

37
00:02:11.090 --> 00:02:12.411
I'm okay with that for right now.

38
00:02:14.739 --> 00:02:18.602
&gt;&gt; Steve Kinney: So I say packedItems, and

39
00:02:18.602 --> 00:02:23.523
this will equal items.filter.

40
00:02:25.742 --> 00:02:26.763
&gt;&gt; Steve Kinney: I'll say item.

41
00:02:30.392 --> 00:02:31.386
&gt;&gt; Steve Kinney: All right,
so that'll go through.

42
00:02:31.386 --> 00:02:34.620
If packed is true,
it'll end up in this array.

43
00:02:34.620 --> 00:02:37.626
If packed is false, we need the opposite.

44
00:02:37.626 --> 00:02:45.922
So we'll say,
&gt;&gt; Steve Kinney: Items.filter,

45
00:02:45.922 --> 00:02:49.033
and if the item is not packed.

46
00:02:53.154 --> 00:02:54.074
&gt;&gt; Steve Kinney: Cool.

47
00:02:54.074 --> 00:02:57.050
All right, so
I have both of those in place.

48
00:02:57.050 --> 00:02:59.600
And now I need to pass
them to the components.

49
00:02:59.600 --> 00:03:02.088
So luckily, that's pretty easy to do.

50
00:03:04.238 --> 00:03:06.561
&gt;&gt; Steve Kinney: One thing I know,
and so if you catch me doing it,

51
00:03:06.561 --> 00:03:10.079
because I rehearsed this enough times,
is that I will mix up the packed and

52
00:03:10.079 --> 00:03:12.095
the unpacked items more than once today.

53
00:03:12.095 --> 00:03:17.625
So if you see it, don't think that,
he's doing some dark sorcery here.

54
00:03:17.625 --> 00:03:18.655
I probably made a boo-boo.

55
00:03:18.655 --> 00:03:20.944
So you can call me on that.

56
00:03:23.668 --> 00:03:27.493
&gt;&gt; Steve Kinney: Cause that's why pair
with 100 of your friends all around

57
00:03:27.493 --> 00:03:28.250
the world.

58
00:03:28.250 --> 00:03:32.954
At the same time it's to catch
those tiny mistakes very quickly.

59
00:03:32.954 --> 00:03:35.670
All right, so let's go take a look
at what we have in this case.

60
00:03:38.050 --> 00:03:40.760
Okay, can't find filter of undefined.

61
00:03:42.170 --> 00:03:43.130
All right, that's interesting.

62
00:03:43.130 --> 00:03:46.840
So may go, check this out, this is the
defaultState because I misspelled item.

63
00:03:46.840 --> 00:03:47.931
I told you.

64
00:03:51.732 --> 00:03:52.730
&gt;&gt; Steve Kinney: All right, very cool.

65
00:03:53.850 --> 00:03:55.480
So now, their rendering on the page.

66
00:03:55.480 --> 00:03:57.750
That's nice cuz I'm passing them down.

67
00:03:57.750 --> 00:04:00.050
If you look at the items should
get through each one of them and

68
00:04:00.050 --> 00:04:01.080
map over them.

69
00:04:01.080 --> 00:04:02.430
So I gather them on the page,

70
00:04:02.430 --> 00:04:05.570
I still can't do anything with them,
I can't add a new one.

71
00:04:05.570 --> 00:04:10.530
I think the next step for us is to be
able to add a new item to the page

72
00:04:10.530 --> 00:04:14.080
because that will be fairly simple one for
us so far.

73
00:04:14.080 --> 00:04:20.300
Now, the items live in state
currently in the application, right?

74
00:04:20.300 --> 00:04:23.070
Which is the only place I
really have access to them

75
00:04:23.070 --> 00:04:25.260
because bypassing down those props,
they're immutable.

76
00:04:25.260 --> 00:04:27.080
So I can't give them to
the new item component.

77
00:04:28.110 --> 00:04:29.510
That's not gonna work.

78
00:04:29.510 --> 00:04:33.510
Instead, I can give the new
item component a function,

79
00:04:33.510 --> 00:04:37.460
that the new item component can call and
it can manipulate the state, right.

80
00:04:37.460 --> 00:04:40.960
So that's again, like, anything passed
as props is completely mutable,

81
00:04:40.960 --> 00:04:43.610
so it's not like, hey,
here is some items, go add to them, or

82
00:04:43.610 --> 00:04:47.870
something along those lines,
it's data down, actions up.

83
00:04:47.870 --> 00:04:51.740
But I can't give away the data and
then expect to know about it.

84
00:04:51.740 --> 00:04:57.121
So what we'll do is we'll make a new
function and we'll call it add item.

85
00:04:59.933 --> 00:05:02.157
&gt;&gt; Steve Kinney: And
add item will go ahead and

86
00:05:02.157 --> 00:05:05.129
it will take whatever the new item is.

87
00:05:06.130 --> 00:05:11.190
And really what we want to do is
we want to push it onto the array.

88
00:05:11.190 --> 00:05:14.750
I have a few ways that I could do this,
I could push it onto the array and

89
00:05:14.750 --> 00:05:16.876
then set the state to the new version.

90
00:05:16.876 --> 00:05:20.280
I'm gonna use the spread operator and
I will explain it if you haven't seen it

91
00:05:20.280 --> 00:05:22.690
before but first I'm gonna write
it because it's easier to explain.

92
00:05:23.810 --> 00:05:28.850
So this.setState and we'll say that

93
00:05:28.850 --> 00:05:35.850
the items are now ...this.state.items.

94
00:05:35.850 --> 00:05:41.510
What this does effectively is
it allows me to copy the array.

95
00:05:41.510 --> 00:05:45.090
Make a new array with all the items
that are currently in state and

96
00:05:45.090 --> 00:05:47.830
I'm gonna give it this new
item at the very beginning.

97
00:05:47.830 --> 00:05:49.320
This will go to the top of the list.

98
00:05:49.320 --> 00:05:51.600
If you put it at the end,
it'll end up at the bottom of the list.

99
00:05:51.600 --> 00:05:53.890
It feels better to me at
the top of the list, so

100
00:05:53.890 --> 00:05:56.990
that's kind of the reason
I made that decision.

101
00:05:58.590 --> 00:06:00.740
All right, so let's check it out.

102
00:06:00.740 --> 00:06:03.920
We're gonna have another issue with it
in a second, but let's take a look.

103
00:06:05.620 --> 00:06:07.730
So now, I still can't type in this field.

104
00:06:07.730 --> 00:06:10.350
So I have the function to add an item, but

105
00:06:10.350 --> 00:06:14.380
now I need to give that to
the NewItem field, cool.

106
00:06:14.380 --> 00:06:18.150
So NewItem currently doesn't take any
props, and it definitely needs to.

107
00:06:19.630 --> 00:06:22.417
So I'll say, hey, onSubmit,

108
00:06:25.058 --> 00:06:28.610
&gt;&gt; Steve Kinney: This.addItem.

109
00:06:28.610 --> 00:06:30.740
Cool, so now we're gonna give
the ability to add an item.

110
00:06:30.740 --> 00:06:33.690
Now this function is created
in the application scope, so

111
00:06:33.690 --> 00:06:37.480
it has access to the state of
the application component.

112
00:06:37.480 --> 00:06:40.927
So we'll give it away, we'll pass
it down to the new item component.

113
00:06:42.844 --> 00:06:45.940
&gt;&gt; Steve Kinney: All right, so
new item has his handleChanged.

114
00:06:45.940 --> 00:06:49.310
It seems like a good
place to call addItem.

115
00:06:49.310 --> 00:06:52.400
The reason I have an extra
method here is because

116
00:06:52.400 --> 00:06:53.710
it's not necessarily
gonna be the item there.

117
00:06:53.710 --> 00:06:57.980
It's gonna be the event when
they hit submit on that form.

118
00:06:57.980 --> 00:07:01.810
So what I really want is
the name of that new item.

119
00:07:01.810 --> 00:07:06.343
So that will be, in my case,
it's going to be a event.target.value.

120
00:07:08.079 --> 00:07:08.641
&gt;&gt; Steve Kinney: Cool.

121
00:07:08.641 --> 00:07:10.850
So let's go ahead and implement that.

122
00:07:10.850 --> 00:07:17.023
So I'll say const value
= event.target.value.

123
00:07:17.023 --> 00:07:23.200
Then we'll do,
&gt;&gt; Steve Kinney: This is the change.

124
00:07:23.200 --> 00:07:24.830
I actually need to do this in submit.

125
00:07:24.830 --> 00:07:26.510
So we'll get the onsubmit.

126
00:07:26.510 --> 00:07:33.470
We've got that passed in, and so
what we'll do, we'll say onsubmit.

127
00:07:33.470 --> 00:07:36.120
The value but
there's actually a few other things.

128
00:07:36.120 --> 00:07:37.224
I need the defaults.

129
00:07:37.224 --> 00:07:42.356
And I don't really have a great set up for
this right now, but I will later in

130
00:07:42.356 --> 00:07:48.166
the day, but right now the items aren't
just a string, they are the value, right.

131
00:07:48.166 --> 00:07:49.870
That we want the title of the item.

132
00:07:49.870 --> 00:07:53.013
It is also whether or
not it is packed in a unique ID.

133
00:07:53.013 --> 00:07:55.263
So I have the ID that I
gave myself from lodash,

134
00:07:55.263 --> 00:07:58.785
which is just gonna increment
the strength, so the first time it is one,

135
00:07:58.785 --> 00:08:01.354
then it is two, then it is three,
so on and so forth.

136
00:08:01.354 --> 00:08:04.321
So what we will say is,

137
00:08:04.321 --> 00:08:09.634
onSubmit we will pass it the value as well

138
00:08:09.634 --> 00:08:14.340
as an ID that's gonna be uniqueId.

139
00:08:15.500 --> 00:08:18.440
And we'll say by default, packed is false.

140
00:08:18.440 --> 00:08:20.520
I don't love that I'm doing this in here,
right?

141
00:08:20.520 --> 00:08:23.580
I will have to figure this out later
as we move to like Flux and Redux,

142
00:08:23.580 --> 00:08:25.060
a better place to do this.

143
00:08:25.060 --> 00:08:27.817
Right, it's seems like
the presentational component,

144
00:08:27.817 --> 00:08:30.720
should not handle like
normalizing my data, right?

145
00:08:30.720 --> 00:08:33.140
But this is what we have for now.

146
00:08:33.140 --> 00:08:36.860
So the value is the state of
this new item component, so

147
00:08:36.860 --> 00:08:39.300
it has its own state,
it's got that input field, right?

148
00:08:39.300 --> 00:08:43.802
We talked about like, input field and
femoral state, so we go ahead and say.

149
00:08:48.773 --> 00:08:51.680
&gt;&gt; Steve Kinney: So we get the value
of the field whenever it changes.

150
00:08:51.680 --> 00:08:54.030
And we'll set it to
the state of that component,

151
00:08:54.030 --> 00:08:56.560
which will now allow me
to type in it at least.

152
00:08:56.560 --> 00:08:59.880
And when they hit submit,

153
00:08:59.880 --> 00:09:02.950
I'm going to pass that function I
was passed in from application.

154
00:09:02.950 --> 00:09:05.325
That's been passed down into new item,
I will call that.

155
00:09:05.325 --> 00:09:07.610
It has access to the list of items,
all right?

156
00:09:07.610 --> 00:09:09.020
This is already getting
a little squirrely.

157
00:09:10.480 --> 00:09:14.540
And the last thing I'm gonna do is,
right now if I save this and

158
00:09:14.540 --> 00:09:18.390
I head over I can add a new thing.

159
00:09:20.500 --> 00:09:24.080
But then I don't clear the input field,
and that's gross.

160
00:09:24.080 --> 00:09:27.375
So we'll say when this
has been successful.

161
00:09:27.375 --> 00:09:30.402
We'll go ahead and then say,

162
00:09:30.402 --> 00:09:35.377
this.setState values
back to an empty string.

163
00:09:39.555 --> 00:09:42.299
&gt;&gt; Steve Kinney: All right,
let's give it a shot.

164
00:09:42.299 --> 00:09:44.256
You've got to pack cheese
whenever you go anywhere.

165
00:09:44.256 --> 00:09:46.400
We’ll add it [INAUDIBLE].

166
00:09:46.400 --> 00:09:48.070
We have now the ability to show all them.

167
00:09:48.070 --> 00:09:48.980
They are being sorted.

168
00:09:48.980 --> 00:09:51.127
We have the ability to add a new one,
right?

169
00:09:51.127 --> 00:09:52.624
We had to pass functions around.

170
00:09:52.624 --> 00:09:58.650
We’ve had to pass the array of items
that goes to the two items list.

171
00:09:58.650 --> 00:10:03.030
And then from there, each items list
is gonna pass it to an item component.

172
00:10:03.030 --> 00:10:04.264
So this is where it gonna get fun.

