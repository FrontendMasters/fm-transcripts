WEBVTT

1
00:00:04.515 --> 00:00:08.546
&gt;&gt; Steve Kinney: All right,
so what we'll do is we will,

2
00:00:08.546 --> 00:00:12.946
let's use the container pattern, right?

3
00:00:12.946 --> 00:00:16.940
Because this application is tiny, right?

4
00:00:16.940 --> 00:00:20.082
We're back on master, where it's the
application that just does a few things.

5
00:00:20.082 --> 00:00:24.377
What we'll do is we'll wrap it in
an application container that's going to

6
00:00:24.377 --> 00:00:27.060
listen to the store, and
do all the things, and

7
00:00:27.060 --> 00:00:29.291
tell the PizzaCalculator component.

8
00:00:30.344 --> 00:00:33.238
&gt;&gt; Steve Kinney: Cool,
so here is Application,

9
00:00:33.238 --> 00:00:37.317
which is eventually
gonna be what we export.

10
00:00:37.317 --> 00:00:39.942
But let's go ahead and we'll actually,

11
00:00:39.942 --> 00:00:43.017
let's make this
PizzaContainer object again.

12
00:00:49.895 --> 00:00:52.670
&gt;&gt; Steve Kinney: PizzaCalculator extends

13
00:00:52.670 --> 00:00:57.689
Component
&gt;&gt; Steve Kinney: And

14
00:00:57.689 --> 00:01:02.665
really, the thing we care
about here is this up here.

15
00:01:11.915 --> 00:01:14.954
&gt;&gt; Steve Kinney: So
we'll take that, we'll render.

16
00:01:18.438 --> 00:01:19.229
&gt;&gt; Steve Kinney: We gotta return.

17
00:01:25.684 --> 00:01:27.851
&gt;&gt; Steve Kinney: And
we'll take in everything that it needs.

18
00:01:37.400 --> 00:01:38.642
&gt;&gt; Steve Kinney: All right, very cool.

19
00:01:42.733 --> 00:01:44.121
&gt;&gt; Steve Kinney: So
what we'll end up doing here,

20
00:01:44.121 --> 00:01:47.504
we're not gonna manage the state any more
cuz what's managing the state for us?

21
00:01:49.423 --> 00:01:53.620
&gt;&gt; Steve Kinney: The Flux Architecture
Store, action, so on and so forth.

22
00:01:53.620 --> 00:01:57.518
So let's get rid of all of this,
cuz we're not doing that anymore.

23
00:01:57.518 --> 00:02:01.738
We're actually gonna keep these, but
we're not gonna set state anymore.

24
00:02:08.880 --> 00:02:10.430
&gt;&gt; Steve Kinney: All right, very cool.

25
00:02:15.160 --> 00:02:16.947
&gt;&gt; Steve Kinney: We'll hold on
to some of this for a second.

26
00:02:19.707 --> 00:02:23.017
&gt;&gt; Steve Kinney: All right, so
what we probably wanna do is,

27
00:02:23.017 --> 00:02:28.103
let's pull in,
&gt;&gt; Steve Kinney: Application

28
00:02:28.103 --> 00:02:32.401
is gonna pull in that store that we
made before, so we'll do that up here.

29
00:02:45.698 --> 00:02:47.566
&gt;&gt; Steve Kinney: Right,
the PizzaCalculatorStore is gonna need one

30
00:02:47.566 --> 00:02:48.249
more method on it.

31
00:02:49.610 --> 00:02:51.675
Which is here we can change
the number of items,

32
00:02:51.675 --> 00:02:53.570
but what else are we probably wanna get?

33
00:02:53.570 --> 00:02:57.160
This is wrapped in a closure, we don't
have access to the calculator, right,

34
00:02:57.160 --> 00:03:00.350
so we wanna just give ourself
a safe getter method for it.

35
00:03:00.350 --> 00:03:03.803
So we'll just give it one called getState.

36
00:03:07.948 --> 00:03:09.948
&gt;&gt; Steve Kinney: And
it'll return the calculator, right?

37
00:03:09.948 --> 00:03:12.915
We'll be changing that with these events,
but at any given point,

38
00:03:12.915 --> 00:03:14.280
we're gonna wanna get it out.

39
00:03:15.490 --> 00:03:17.530
All right, very cool,
go back to the application.

40
00:03:19.270 --> 00:03:22.881
So initially,
the state of the application,

41
00:03:31.010 --> 00:03:33.159
&gt;&gt; Steve Kinney: Let's get the state.

42
00:03:33.159 --> 00:03:36.142
So now when the components mounts,
we wanna start listening to that store,

43
00:03:36.142 --> 00:03:38.720
cuz it's saying, hey I changed,
hey I changed, hey I changed.

44
00:03:38.720 --> 00:03:40.350
Right, we're not passing stuff in.

45
00:03:40.350 --> 00:03:43.156
All of the examples we've used so
far today are,

46
00:03:43.156 --> 00:03:48.330
some other bigger component at the top of
the hierarchy is passing stuff in, right?

47
00:03:48.330 --> 00:03:51.105
This case we have this thing
floating in the ether, right?

48
00:03:51.105 --> 00:03:55.480
This store that we can now pass to any
component anywhere in the hierarchy,

49
00:03:55.480 --> 00:03:58.710
right, whether it's down below,
up top, anywhere.

50
00:04:00.100 --> 00:04:04.707
All right so let's go ahead and
let's start listening to that store, so

51
00:04:04.707 --> 00:04:10.039
we'll say,
&gt;&gt; Steve Kinney: componentDidMount.

52
00:04:11.158 --> 00:04:13.399
&gt;&gt; Steve Kinney: We'll say this.listener.

53
00:04:17.443 --> 00:04:21.342
&gt;&gt; Steve Kinney: Actually what we'll say
is, we'll give it one called updateState.

54
00:04:26.736 --> 00:04:32.457
&gt;&gt; Steve Kinney: So when it starts, we'll
say PizzaCalculatorStore.on('change',

55
00:04:32.457 --> 00:04:34.375
this.updateState).

56
00:04:38.214 --> 00:04:41.330
&gt;&gt; Steve Kinney: And
we'll update calculations.

57
00:04:41.330 --> 00:04:44.750
The other thing we need to do is,
our application is never gonna unmount.

58
00:04:44.750 --> 00:04:47.147
But if you have things that
could enter and leave the UI,

59
00:04:47.147 --> 00:04:48.985
you have to take off your event listeners.

60
00:04:48.985 --> 00:04:52.760
Otherwise you have a memory leak, right,
cuz they won't get garbage collected.

61
00:04:54.740 --> 00:04:59.520
So when componentWillUnmount,

62
00:04:59.520 --> 00:05:07.714
we'll say
PizzaCalculatorStore.off('change',

63
00:05:07.714 --> 00:05:12.110
this.updateState).

64
00:05:12.110 --> 00:05:16.013
Right, so when it mounts,
we start listening, when it unmounts,

65
00:05:16.013 --> 00:05:17.181
we stop listening.

66
00:05:17.181 --> 00:05:18.632
All right, cool.

67
00:05:21.573 --> 00:05:23.837
&gt;&gt; Steve Kinney: So
whenever we call updateState we'll say,

68
00:05:31.581 --> 00:05:33.786
&gt;&gt; Steve Kinney: this.setState, and

69
00:05:33.786 --> 00:05:38.543
what it'll do is we'll
just start listening for

70
00:05:38.543 --> 00:05:42.730
PizzaCalculatorStore.getState().

71
00:05:44.460 --> 00:05:49.390
&gt;&gt; Steve Kinney: Right, it had
numberOfPeople and it had slicesPerPerson.

72
00:05:49.390 --> 00:05:51.328
So we'll get that object in every time,

73
00:05:51.328 --> 00:05:54.304
we'll update both of those
whenever in emits a change event.

74
00:05:54.304 --> 00:05:55.466
All right, cool.

75
00:05:57.088 --> 00:05:58.112
&gt;&gt; Steve Kinney: One
thing I'm gonna do is,

76
00:05:58.112 --> 00:05:59.990
we're gonna have to put
actions here in a second.

77
00:05:59.990 --> 00:06:04.610
The only reason I kept these is
because I don't want to do this.

78
00:06:04.610 --> 00:06:08.339
I feel like getting the event object and
parsing out the value and

79
00:06:08.339 --> 00:06:11.390
turning it into a number can
happen in my view layer.

80
00:06:11.390 --> 00:06:13.120
I don't wanna have to worry
about that kind of stuff.

81
00:06:13.120 --> 00:06:15.330
I want to just get me the value and
let me know what to do with it.

82
00:06:15.330 --> 00:06:17.185
So I'll keep that here for now.

83
00:06:19.721 --> 00:06:21.419
&gt;&gt; Steve Kinney: So
on updateNumberOfPeople,

84
00:06:21.419 --> 00:06:23.188
let's pull in all our actions.

85
00:06:33.734 --> 00:06:36.558
&gt;&gt; Steve Kinney: So this'll pull in
basically an object called actions that's

86
00:06:36.558 --> 00:06:38.165
gonna have all of the actions in it.

87
00:06:40.616 --> 00:06:43.620
&gt;&gt; Steve Kinney: And so what we will
do is we'll say, updateNumberOfPeople.

88
00:06:43.620 --> 00:06:45.836
We will get the number of people and
we'll say actions.

89
00:06:49.882 --> 00:06:52.178
&gt;&gt; Steve Kinney: updateNumberOfPeople.

90
00:06:53.552 --> 00:06:55.062
&gt;&gt; Steve Kinney: updateSlicesPerPerson.

91
00:06:59.790 --> 00:07:02.570
&gt;&gt; Steve Kinney: Right, again, this is
somewhere aside from our application,

92
00:07:02.570 --> 00:07:04.730
it's not the thing that we're mounting.

93
00:07:04.730 --> 00:07:06.820
It is floating next to our application.

94
00:07:06.820 --> 00:07:09.700
This could be all the way
down the component hierarchy,

95
00:07:09.700 --> 00:07:12.630
this could be up at the top,
it doesn't matter, right?

96
00:07:12.630 --> 00:07:16.340
We can pull this in and we can hook
it up to anywhere in that tree, and

97
00:07:16.340 --> 00:07:17.320
that's really powerful.

98
00:07:19.240 --> 00:07:26.501
All right, so then we did wanna
return that PizzaCalculator.

99
00:07:30.499 --> 00:07:34.485
&gt;&gt; Steve Kinney: And so in my state
right now I have numberOfPeople and

100
00:07:34.485 --> 00:07:36.031
slicesPerPerson.

101
00:07:36.031 --> 00:07:40.743
So I'm actually gonna give that all,
&gt;&gt; Steve Kinney: To the PizzaCalculator,

102
00:07:40.743 --> 00:07:42.488
so those two things will
be passed in as props.

103
00:07:42.488 --> 00:07:46.661
What this will do is it'll take the two
objects on state and pass those in.

104
00:07:46.661 --> 00:07:52.135
And then we can say updateNumberOfPeople.

105
00:07:54.154 --> 00:08:02.038
&gt;&gt; Steve Kinney: And
we can updateSlicesPerPerson.

106
00:08:08.621 --> 00:08:10.083
&gt;&gt; Steve Kinney: Cool, and reset.

107
00:08:11.568 --> 00:08:13.931
&gt;&gt; Steve Kinney: Oop,
did I lose my reset along the way?

108
00:08:13.931 --> 00:08:17.350
&gt;&gt; Speaker 2: You removed it
&gt;&gt; Steve Kinney: What a jerk.

109
00:08:17.350 --> 00:08:20.326
Well that one doesn't take any arguments,
so honestly I can just.

110
00:08:24.506 --> 00:08:29.752
&gt;&gt; Steve Kinney: Cool, so again, I can
now put this component anywhere, right?

111
00:08:29.752 --> 00:08:34.398
It is totally separate from
the rest of the hierarchy of

112
00:08:34.398 --> 00:08:39.513
my,
&gt;&gt; Steve Kinney: Of my app.

113
00:08:39.513 --> 00:08:40.775
Probably wanna pass in numbers.

