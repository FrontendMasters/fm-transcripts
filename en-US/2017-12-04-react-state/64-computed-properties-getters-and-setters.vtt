WEBVTT

1
00:00:03.192 --> 00:00:06.600
&gt;&gt; Steve Kinney: So, we've like started
with doing everything in component state.

2
00:00:06.600 --> 00:00:08.097
And then we moved to a flux architecture.

3
00:00:08.097 --> 00:00:15.136
And then we moved to redux,
which is like an implementational flux.

4
00:00:15.136 --> 00:00:19.538
And then we focused on a whole
bunch of asynchronous models for

5
00:00:19.538 --> 00:00:21.840
dealing with redux.

6
00:00:21.840 --> 00:00:24.550
What we're gonna do now is
shift gears a little bit.

7
00:00:24.550 --> 00:00:28.720
We're gonna talk about a different
way of thinking about state and

8
00:00:28.720 --> 00:00:32.340
managing state in our application
in a library called Mobx.

9
00:00:33.800 --> 00:00:37.530
We are gonna again dive a little bit into
the JavaScript programming language to

10
00:00:37.530 --> 00:00:40.990
understand some of the things
that we might see along the way.

11
00:00:40.990 --> 00:00:42.030
So let's do that.

12
00:00:42.030 --> 00:00:46.000
First, we are gonna talk a little
bit about Computed Properties.

13
00:00:46.000 --> 00:00:48.517
Which are technically an ES5 feature, but

14
00:00:48.517 --> 00:00:51.996
we'll see why you probably
didn't hear of them until ES6.

15
00:00:51.996 --> 00:00:57.313
So let's talk about the problem
that they're solving first.

16
00:00:57.313 --> 00:01:02.580
So here we have a person class and
it's got a first name and a last name.

17
00:01:03.790 --> 00:01:04.430
Seems legit.

18
00:01:07.550 --> 00:01:11.050
But if we wanna get the full name,
that's weird, right?

19
00:01:11.050 --> 00:01:11.800
It's a function.

20
00:01:12.810 --> 00:01:17.374
And so now we have this like kind of
squirrely API where we can make a new

21
00:01:17.374 --> 00:01:22.191
person and we can call up person.firstName
and we're gonna get Grace.

22
00:01:22.191 --> 00:01:23.933
And we call person.lastName
where we got Hopper.

23
00:01:23.933 --> 00:01:27.750
If we call person.fullName,
we're going to get a function signature.

24
00:01:27.750 --> 00:01:29.910
Or reference to a function, right?

25
00:01:29.910 --> 00:01:33.970
And this kind of breaks what we
normally call the universal access

26
00:01:33.970 --> 00:01:35.470
principle, right?

27
00:01:35.470 --> 00:01:40.490
Where like the person consuming our code
shouldn't have to know the difference.

28
00:01:42.180 --> 00:01:46.090
And so here they would have to know that
this one is a function, and it breaks

29
00:01:46.090 --> 00:01:51.260
that principle that we try to adhere to
whenever possible, and that's not great.

30
00:01:51.260 --> 00:01:54.570
And different libraries have
done different things to try

31
00:01:54.570 --> 00:01:55.530
to get around this.

32
00:01:55.530 --> 00:01:56.780
I think about Ruby.

33
00:01:56.780 --> 00:01:59.395
Really everything is
technically a method call.

34
00:01:59.395 --> 00:02:01.370
Right, and you don't need the parenthesis.

35
00:02:01.370 --> 00:02:04.700
So you actually always using
the parenthesis but they are optional so

36
00:02:04.700 --> 00:02:06.660
you never think about the difference.

37
00:02:06.660 --> 00:02:09.740
That's one way of like enforcing that.

38
00:02:09.740 --> 00:02:12.450
But more commonly we see
stuff like backbone and

39
00:02:12.450 --> 00:02:17.390
amber where no matter what,
you have to use a get and a set method,

40
00:02:17.390 --> 00:02:20.240
right, and you're not supposed
to access stuff directly.

41
00:02:20.240 --> 00:02:24.698
That would be true in React if we had
a get state on the actual component state,

42
00:02:24.698 --> 00:02:29.377
we would never touch the state directly,
we'd only set state and use get state.

43
00:02:29.377 --> 00:02:33.706
But the idea there is even a not
great syntax, having to use get and

44
00:02:33.706 --> 00:02:36.400
set all the time and passing the string.

45
00:02:36.400 --> 00:02:39.950
So the property1 can sometimes be
better than inconsistency right?

46
00:02:39.950 --> 00:02:45.760
Consistent not great is usually
better than inconsistency at large.

47
00:02:45.760 --> 00:02:48.709
But it turns out in ES6 we can do this.

48
00:02:48.709 --> 00:02:52.101
And the only difference here
from what we saw previously is,

49
00:02:52.101 --> 00:02:55.450
I use this little get
keyword before the method.

50
00:02:55.450 --> 00:02:57.510
And now, look at that.

51
00:02:58.630 --> 00:03:00.930
I can, I got the universal
access principle, right?

52
00:03:00.930 --> 00:03:04.560
I can just simply go ahead and
use it the same way,

53
00:03:04.560 --> 00:03:08.020
it's technically gonna call that
function and everything is great.

54
00:03:08.020 --> 00:03:10.110
And I can wear my sunglasses.

55
00:03:10.110 --> 00:03:14.240
So I mentioned a little bit earlier that
these are actually present in ES5 that

56
00:03:14.240 --> 00:03:15.350
you could do this.

57
00:03:15.350 --> 00:03:21.250
And like, if you think about working with
like, just like vanilla DOM manipulation.

58
00:03:21.250 --> 00:03:26.970
We know that we can assign stuff to
the inner text and stuff will change.

59
00:03:26.970 --> 00:03:28.828
We know that there's things that
you can keep assigning stuff and

60
00:03:28.828 --> 00:03:29.449
they don't change.

61
00:03:29.449 --> 00:03:33.467
We know that in a lot of
the internal browser APIs.

62
00:03:33.467 --> 00:03:35.270
Equal does weird things, right?

63
00:03:35.270 --> 00:03:39.480
It'll update the DOM,
it will like be ignored in other cases.

64
00:03:39.480 --> 00:03:41.360
So a lot of this has been
kind of under the hood.

65
00:03:41.360 --> 00:03:45.174
And so the reason you probably didn't see
it a lot in ES5 is cuz this is what it

66
00:03:45.174 --> 00:03:46.257
looked like in ES5.

67
00:03:46.257 --> 00:03:51.037
[LAUGH] You would create
the person constructor, and

68
00:03:51.037 --> 00:03:55.495
then you'd use this object
to define property.

69
00:03:55.495 --> 00:03:59.365
And if it makes you feel any better, there
is an object to define properties, so

70
00:03:59.365 --> 00:04:01.925
you could do more of these at once.

71
00:04:01.925 --> 00:04:04.330
And you'd give it a target object,

72
00:04:04.330 --> 00:04:08.310
which property you wanted
to have some insight into.

73
00:04:08.310 --> 00:04:10.920
And then an object full
of different options.

74
00:04:10.920 --> 00:04:15.213
So here we are implementing the getter
that we saw with that three

75
00:04:15.213 --> 00:04:18.806
letters in ES6 is a little
bit more ceremony in ES5.

76
00:04:18.806 --> 00:04:21.840
So now that we have that.

77
00:04:21.840 --> 00:04:22.710
It's been there previously.

78
00:04:22.710 --> 00:04:24.480
And there is other things you can do.

79
00:04:24.480 --> 00:04:27.370
But I'm gonna punt on that for a little
bit, to a one more JavaScript topic.

