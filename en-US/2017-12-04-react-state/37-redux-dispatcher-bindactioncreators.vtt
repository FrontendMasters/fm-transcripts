WEBVTT

1
00:00:01.929 --> 00:00:06.630
&gt;&gt; Steve Kinney: So it would be
great if we had some ActionCreators.

2
00:00:06.630 --> 00:00:07.580
That's pretty easy to do.

3
00:00:07.580 --> 00:00:10.700
I could say, const add.

4
00:00:10.700 --> 00:00:11.640
We'll take a value.

5
00:00:11.640 --> 00:00:13.670
We've seen this pattern before.

6
00:00:13.670 --> 00:00:18.594
And it will return a new
object of the type, ADD,

7
00:00:18.594 --> 00:00:21.371
and whatever the value is.

8
00:00:21.371 --> 00:00:26.231
I'm using that ESX shorthand again,
so that will really devalue, but

9
00:00:26.231 --> 00:00:28.910
the promise of ESX is I get to type less.

10
00:00:30.740 --> 00:00:33.960
Hopefully, never the word function,
but we're gonna see that's not true.

11
00:00:33.960 --> 00:00:36.534
So ADD is a very simple function,
it just creates an action.

12
00:00:36.534 --> 00:00:43.022
So now we could say store.disp,
save this and Clear and Run.

13
00:00:43.022 --> 00:00:45.580
store.dispatch, we'll say (add(4)).

14
00:00:47.230 --> 00:00:50.040
Do it again, right?

15
00:00:50.040 --> 00:00:52.105
And we can see that now,
we can do all sorts of things.

16
00:00:52.105 --> 00:00:55.207
I don't have to just copy and paste that
add action that I stored in a variable

17
00:00:55.207 --> 00:00:57.405
before, I can change this to 8,
and now we see 16.

18
00:00:57.405 --> 00:01:02.650
I can put in 8,000 million, I think
we're up to a dillion at this point.

19
00:01:05.017 --> 00:01:09.900
&gt;&gt; Steve Kinney: So
you can see that we're 8 dillion 16.

20
00:01:09.900 --> 00:01:11.963
A dillion's not real, just FYI.

21
00:01:11.963 --> 00:01:15.100
[LAUGH] Don't go into a very
intelligent conversation and

22
00:01:15.100 --> 00:01:17.830
start bringing up dillions of items.

23
00:01:17.830 --> 00:01:19.950
All right, cool, so we could do that.

24
00:01:19.950 --> 00:01:22.960
We can do a few more of these,
let's have some ActionCreators for

25
00:01:22.960 --> 00:01:24.280
our two error messages.

26
00:01:24.280 --> 00:01:27.726
So we can kinda do anything we need to do.

27
00:01:27.726 --> 00:01:30.043
And again, these are simple,

28
00:01:30.043 --> 00:01:34.970
they are just functions that will
go ahead and return objects.

29
00:01:34.970 --> 00:01:40.079
So, we'll have a SET_ERROR_MESSAGE,
and we'll have a CLEAR_ERROR_MESSAGE.

30
00:01:41.670 --> 00:01:43.100
I'm just gonna break
these up a little bit, so

31
00:01:43.100 --> 00:01:45.440
we can see them in my kinda small screen.

32
00:01:45.440 --> 00:01:49.542
So now we can create these actions,
and we can dispatch to the store,

33
00:01:49.542 --> 00:01:50.763
that's very cool.

34
00:01:50.763 --> 00:01:54.200
Let's go back up to the top, and figure
out where we are in learning all of Redux.

35
00:01:54.200 --> 00:01:56.520
We have this one called
bindActionCreators,

36
00:01:56.520 --> 00:01:58.520
so I have ActionCreators.

37
00:01:58.520 --> 00:02:01.330
I'm somewhat familiar with
function.prototype.bind, so

38
00:02:01.330 --> 00:02:04.360
I understand what binding might mean,
right?

39
00:02:04.360 --> 00:02:06.190
But I don't know what this one does yet.

40
00:02:07.360 --> 00:02:11.710
So, I feel like to best
understand bindActionCreators,

41
00:02:11.710 --> 00:02:13.400
we should look at this in two ways.

42
00:02:13.400 --> 00:02:15.850
There is bindActionCreators plural, but

43
00:02:15.850 --> 00:02:19.310
it might be easier to look at what it
means to bind an ActionCreator, singular?

44
00:02:19.310 --> 00:02:20.770
Cuz if we bind an ActionCreator singular,

45
00:02:20.770 --> 00:02:24.580
then we can just extrapolate that
it's doing that more than once.

46
00:02:24.580 --> 00:02:30.380
It turns out, you could write
this function in about one line.

47
00:02:31.940 --> 00:02:35.580
So we know that the way that we get
actions to the store is dispatch.

48
00:02:37.120 --> 00:02:40.750
So, we're gonna write a new function
that's not included in Redux,

49
00:02:40.750 --> 00:02:45.290
it's gonna be called
bindActionCreator singular.

50
00:02:45.290 --> 00:02:46.483
And it's going to be,

51
00:02:46.483 --> 00:02:52.060
kind of overly simple version
of a single bindActionCreator.

52
00:02:52.060 --> 00:02:54.020
And so, a lot of times the big
difference in a lot of these,

53
00:02:54.020 --> 00:02:57.110
if you peek open the React code, you'll
see a little bit more error handling, and

54
00:02:57.110 --> 00:03:00.560
stuff like that in edge cases,
but this will be good enough.

55
00:03:00.560 --> 00:03:03.100
So you should, probably,
use the one in the library.

56
00:03:03.100 --> 00:03:08.230
So it'll take two arguments, it'll take
the store, or it'll take action, rather.

57
00:03:08.230 --> 00:03:10.997
So the action that we want to bind, and

58
00:03:10.997 --> 00:03:15.162
the dispatch method on the store
that we wanna bind it to.

59
00:03:18.559 --> 00:03:20.191
&gt;&gt; Steve Kinney: And
does anyone wanna take a lucky guess,

60
00:03:20.191 --> 00:03:22.490
what it's gonna do with these
two pieces of information?

61
00:03:23.740 --> 00:03:26.860
It's gonna bind the action
till the dispatch.

62
00:03:26.860 --> 00:03:30.870
And so, what it'll do is,
it actually return a brand new function,

63
00:03:30.870 --> 00:03:33.373
which will take some number of arguments.

64
00:03:33.373 --> 00:03:38.775
And so then we'll dispatch,
&gt;&gt; Steve Kinney: Whatever

65
00:03:38.775 --> 00:03:43.301
action was really passed in,
given all those arguments.

66
00:03:43.301 --> 00:03:45.289
So, let's break this out a little bit

67
00:03:45.289 --> 00:03:53.589
because,
&gt;&gt; Steve Kinney: So

68
00:03:53.589 --> 00:03:57.188
it is a function that
returns another function,

69
00:03:57.188 --> 00:04:02.104
that takes some arguments, and
then uses the store's dispatch,

70
00:04:02.104 --> 00:04:08.190
to fire the action with whatever
arguments you gave that second function.

71
00:04:08.190 --> 00:04:11.230
That is slightly confusing, so
let's actually look at it in action.

72
00:04:11.230 --> 00:04:15.600
So we'll say const addValue just to

73
00:04:15.600 --> 00:04:20.290
give it a different name.

74
00:04:20.290 --> 00:04:23.818
So we'll say addValue = bindActionCreator.

75
00:04:26.188 --> 00:04:28.620
&gt;&gt; Steve Kinney: And so we have that add
ActionCreator that we created up here.

76
00:04:29.780 --> 00:04:31.598
And we have the store.dispatch.

77
00:04:35.167 --> 00:04:35.935
&gt;&gt; Steve Kinney: Very cool.

78
00:04:37.937 --> 00:04:40.230
&gt;&gt; Steve Kinney: This is where it
all comes together, you're ready?

79
00:04:40.230 --> 00:04:42.350
So now we have this addValue function.

80
00:04:44.040 --> 00:04:48.445
And we say, addValue, and let's say, 12.

81
00:04:48.445 --> 00:04:49.598
Look, we add a 12.

82
00:04:49.598 --> 00:04:53.398
addValue(15), look, we're at 27.

83
00:04:53.398 --> 00:04:56.750
Effectively, what we did is we created
a new function that is already binding

84
00:04:56.750 --> 00:04:58.255
the ActionCreator to the stores.

85
00:04:58.255 --> 00:04:59.233
And now we can call this,

86
00:04:59.233 --> 00:05:01.980
it's automatically gonna dispatch
that action to the store.

87
00:05:01.980 --> 00:05:04.820
Which means, we don't even have to deal
with any of the store.dispatch anymore.

88
00:05:04.820 --> 00:05:05.900
We don't have to deal with any of that.

89
00:05:05.900 --> 00:05:09.000
We just simply have this function
that will update the store.

90
00:05:09.000 --> 00:05:12.310
The store has a subscribe
method that we could,

91
00:05:12.310 --> 00:05:15.180
if we weren't using react to blow
away the entire Web Page, right?

92
00:05:15.180 --> 00:05:17.510
So every time we call the function,
the UI will change.

93
00:05:19.210 --> 00:05:21.880
No react involved, right?

94
00:05:21.880 --> 00:05:26.240
Pretty quick like we've gotten
this pretty much together, but

95
00:05:26.240 --> 00:05:28.800
that's bindActionCreator.

96
00:05:28.800 --> 00:05:31.750
What happens,
what is this bindActionCreator?

97
00:05:31.750 --> 00:05:36.710
Ideally, you have in a lot of pieces of
user interface, more than one action.

98
00:05:36.710 --> 00:05:39.500
And it would be nice to do
a bunch of them at once, so

99
00:05:39.500 --> 00:05:43.940
all bindActionCreators plural does,
is does this to a number of them.

100
00:05:43.940 --> 00:05:45.826
And we could, again,

101
00:05:45.826 --> 00:05:51.099
implement a really kind of overly
simple version of it by hand.

102
00:05:51.099 --> 00:05:52.889
So we'll say const bindActionCreator.

103
00:05:56.814 --> 00:05:58.076
&gt;&gt; Steve Kinney: I might give it a z, so

104
00:05:58.076 --> 00:06:02.856
I don't overwrite the one that I pulled in
at the top of the file and get yelled at.

105
00:06:02.856 --> 00:06:06.351
So it's very 90s.

106
00:06:06.351 --> 00:06:10.051
So we'll have this new one, that again,
will take actions, plural, and

107
00:06:10.051 --> 00:06:10.832
the dispatch.

108
00:06:13.029 --> 00:06:15.247
&gt;&gt; Steve Kinney: And
what it's gonna do is,

109
00:06:15.247 --> 00:06:20.842
it's going to return a object that's
gonna have a bunch of methods,

110
00:06:20.842 --> 00:06:25.490
that are then going to be
boundActionCreators, right?

111
00:06:25.490 --> 00:06:27.600
So I'll just have
an object full of methods,

112
00:06:27.600 --> 00:06:30.410
rather than a single function,
that's really it.

113
00:06:30.410 --> 00:06:34.560
And so what we'll do is,
we'll return, effectively,

114
00:06:34.560 --> 00:06:37.118
it's giving a new object but
we have to do some work to get there.

115
00:06:37.118 --> 00:06:43.830
We'll return Object.keys for
all the actions.

116
00:06:43.830 --> 00:06:48.010
So now we have all the properties
of the object that was passed in.

117
00:06:49.080 --> 00:06:53.602
And we could say, reduce,
&gt;&gt; Steve Kinney: And

118
00:06:53.602 --> 00:06:56.110
what we want to get at
the other end is a new object.

119
00:06:56.110 --> 00:07:00.537
So I'm gonna pass in the second argument
to a reduce is what you want the initial

120
00:07:00.537 --> 00:07:01.288
state to be.

121
00:07:01.288 --> 00:07:03.480
So we'll start with an empty
object that we're gonna build up.

122
00:07:04.540 --> 00:07:09.471
So say, reduce, and we'll say this
is called boundActions this object,

123
00:07:09.471 --> 00:07:14.100
cuz I got to name it something, and
whatever key we're currently on.

124
00:07:17.441 --> 00:07:18.891
&gt;&gt; Steve Kinney: All right, so in here,

125
00:07:18.891 --> 00:07:22.620
we're just gonna make a new
key on this empty object.

126
00:07:22.620 --> 00:07:26.131
And we're gonna use our singular
bindActionCreator to bind an action onto

127
00:07:26.131 --> 00:07:26.980
the new object.

128
00:07:26.980 --> 00:07:29.670
So we'll just say boundActions.

129
00:07:31.770 --> 00:07:33.490
Remember, that's starting
out as an empty object but

130
00:07:33.490 --> 00:07:35.014
let's say we're on the very first key.

131
00:07:35.014 --> 00:07:37.060
We're gonna add that key
to the empty object.

132
00:07:37.060 --> 00:07:38.697
We'll say boundActions,
whatever that key is.

133
00:07:38.697 --> 00:07:45.119
And we'll say bindActionCreator singular,
&gt;&gt; Steve Kinney: With

134
00:07:45.119 --> 00:07:48.677
the action that is unbound and

135
00:07:48.677 --> 00:07:53.241
then the dispatch that was passed in.

136
00:07:53.241 --> 00:07:55.415
Cool and then we just return that
object out of the reduce to get it

137
00:07:55.415 --> 00:07:55.990
to the next one.

138
00:07:59.422 --> 00:08:03.750
&gt;&gt; Steve Kinney: So what I could do now
is I have this setError and clearError.

139
00:08:05.670 --> 00:08:14.513
What happens if I do bindActionCreators,
&gt;&gt; Steve Kinney: And

140
00:08:14.513 --> 00:08:19.174
we'll give it an object that's got a set,

141
00:08:19.174 --> 00:08:24.886
which is going to be,
what did I call it, setError?

142
00:08:30.273 --> 00:08:34.219
&gt;&gt; Steve Kinney: And we'll give it
a clear, which is gonna be clearError.

143
00:08:36.818 --> 00:08:38.278
&gt;&gt; Steve Kinney: I'll
call this const errors.

144
00:08:41.044 --> 00:08:46.230
&gt;&gt; Steve Kinney: And we'll give it
a reference to the store.dispatch, cool.

145
00:08:46.230 --> 00:08:49.308
And so, what I'm gonna get back
is an errors object, effectively.

146
00:08:49.308 --> 00:08:52.310
And it's gonna have two keys,
set and clear.

147
00:08:52.310 --> 00:08:53.190
If I call set and

148
00:08:53.190 --> 00:08:58.120
pass in an error message, it's going
to set the error message in the state.

149
00:08:58.120 --> 00:09:02.510
Which is gonna trigger the subscribe,
which will theoretically trigger a new UI.

150
00:09:02.510 --> 00:09:04.690
If I hit clear,
it's gonna clear the error message.

151
00:09:04.690 --> 00:09:08.665
Let me go to that subscribe function
before, and actually, where did it go?

152
00:09:12.213 --> 00:09:14.150
&gt;&gt; Steve Kinney: We want the subscriber.

153
00:09:14.150 --> 00:09:15.709
Well, let's actually
show the entire getState.

154
00:09:18.499 --> 00:09:20.036
&gt;&gt; Steve Kinney: Cool.

155
00:09:20.036 --> 00:09:23.630
So let's try this out, we'll say save it.

156
00:09:23.630 --> 00:09:27.090
Give myself a little room over here,
Clear and Run, now let's look at errors.

157
00:09:28.210 --> 00:09:29.760
It's an object with a clear and a set.

158
00:09:30.760 --> 00:09:37.759
So if I say errors.set,
Something went horribly wrong.

159
00:09:40.113 --> 00:09:43.411
&gt;&gt; Steve Kinney: Just hope, I didn't
make a typo where I can't see there.

160
00:09:43.411 --> 00:09:47.672
SET_ERROR_MESSAGE is not defined,
because I have to make those strings.

161
00:09:51.577 --> 00:09:52.321
&gt;&gt; Steve Kinney: Not constants.

162
00:10:01.034 --> 00:10:02.950
&gt;&gt; Steve Kinney: All right, error,
something went horribly wrong.

163
00:10:02.950 --> 00:10:04.265
I'm just calling a function and

164
00:10:04.265 --> 00:10:06.950
it's automatically taking care of
everything because I've bound it.

165
00:10:06.950 --> 00:10:10.370
The ActionCreator to
the stores.dispatch method.

166
00:10:10.370 --> 00:10:12.624
So here we can see something
went horribly wrong.

167
00:10:12.624 --> 00:10:14.239
We can say errors.clear.

168
00:10:16.843 --> 00:10:19.410
&gt;&gt; Steve Kinney: And
we can see if the error message is gone.

169
00:10:19.410 --> 00:10:23.110
We can now manipulate the entire state
of our application, effectively.

170
00:10:23.110 --> 00:10:28.365
We have gotten most of the way to like,
writing everything that we need.

171
00:10:28.365 --> 00:10:32.072
Whether it's a React application or
you can do this with ajQuery application,

172
00:10:32.072 --> 00:10:33.243
if you really wanted to.

173
00:10:33.243 --> 00:10:36.610
That's totally, legitimate to do as well.

174
00:10:36.610 --> 00:10:39.830
You'll see that Redux actually
gets used a whole bunch of places.

175
00:10:39.830 --> 00:10:44.942
&gt;&gt; Speaker 2: So what happens if you
have two actions of the same type?

176
00:10:44.942 --> 00:10:47.958
Like you made a mistake and
named them the same way.

177
00:10:47.958 --> 00:10:49.672
&gt;&gt; Steve Kinney: So
that won't be a problem here,

178
00:10:49.672 --> 00:10:52.330
cuz we're just shooting out an object,
right?

179
00:10:52.330 --> 00:10:55.269
That will become a problem in
the reducer when I'm checking for

180
00:10:55.269 --> 00:10:56.494
the action type, right?

181
00:10:56.494 --> 00:10:59.697
And theoretically, I want to do
one thing there but that's gonna

182
00:10:59.697 --> 00:11:03.308
get hit in the conditional where I'm
checking is the action type this, or

183
00:11:03.308 --> 00:11:05.072
is the action type the other thing.

184
00:11:05.072 --> 00:11:08.590
But with the ActionCreator,
it's literally just returning an object.

185
00:11:08.590 --> 00:11:10.564
Dispatch is literally gonna just
send that object to the store.

186
00:11:10.564 --> 00:11:13.056
It's not keeping track of all of these,
right?

187
00:11:13.056 --> 00:11:15.990
You can't really have two
keys on the same object.

188
00:11:15.990 --> 00:11:18.658
The last one will just
overwrite the previous one or

189
00:11:18.658 --> 00:11:21.028
more likely ESX will get
very angry with you.

190
00:11:21.028 --> 00:11:24.360
Like, one of those two things will happen.

191
00:11:24.360 --> 00:11:28.320
Nothing will blow up, you'll have one
of those subtle bugs to find later cuz

192
00:11:28.320 --> 00:11:29.570
you typed the same thing twice.

193
00:11:29.570 --> 00:11:33.432
It's not necessarily an error,
it's just unfortunate.

194
00:11:33.432 --> 00:11:35.431
[LAUGH] Cool.

