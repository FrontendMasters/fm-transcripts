WEBVTT

1
00:00:03.179 --> 00:00:04.450
&gt;&gt; Steve Kinney: All right, so we're back.

2
00:00:04.450 --> 00:00:08.090
And we're gonna take a look
at using MobX in action.

3
00:00:08.090 --> 00:00:13.010
And in this case, we're back in a basic
version of with set state as we've seen it

4
00:00:13.010 --> 00:00:18.230
before and
we'll begin to refactor pieces of it.

5
00:00:18.230 --> 00:00:22.090
And so, we're gonna have to
create our models in this case.

6
00:00:22.090 --> 00:00:25.660
And really there's like two that we
need in this very simple application.

7
00:00:25.660 --> 00:00:30.070
While we've had like one store with flux,
it was an array and

8
00:00:30.070 --> 00:00:33.500
that array had individual items in it.

9
00:00:33.500 --> 00:00:36.142
What are we gonna give ourselves
is the individual item,

10
00:00:36.142 --> 00:00:39.940
which will be in charge of the value, and
the ID, and whether or not it's packed,

11
00:00:39.940 --> 00:00:43.683
as well as the abstraction amount, which
is a collection of all of the items which

12
00:00:43.683 --> 00:00:46.798
can like figure out how many there are and
stuff along those lines.

13
00:00:46.798 --> 00:00:51.560
It's basically an array with super powers
that we're going to use in this case.

14
00:00:51.560 --> 00:00:56.059
So what I'm gonna do is I'm gonna start
by kind of creating these two things, and

15
00:00:56.059 --> 00:00:58.190
I have this models directory in here.

16
00:00:58.190 --> 00:01:00.920
And I start out with just an item, right?

17
00:01:00.920 --> 00:01:04.170
The individual item, in this case.

18
00:01:04.170 --> 00:01:09.050
And there's a lot of interesting
things that we can do with it, right?

19
00:01:09.050 --> 00:01:13.931
So let's start with bringing it in,
we're gonna have to get a unique ID,

20
00:01:13.931 --> 00:01:16.310
mostly for a key for React, right?

21
00:01:16.310 --> 00:01:19.505
Cuz we don't necessarily need to go
find the right one in a object, or

22
00:01:19.505 --> 00:01:20.950
something along those lines.

23
00:01:20.950 --> 00:01:24.995
We'll be able to deal with the reference
rather than try to match some branch of

24
00:01:24.995 --> 00:01:27.156
the tree that happens to have the same ID.

25
00:01:27.156 --> 00:01:33.032
But React is gonna get very angry with us
if we do not have a unique identifier for

26
00:01:33.032 --> 00:01:35.360
it, so we'll still use that.

27
00:01:38.300 --> 00:01:41.121
&gt;&gt; Steve Kinney: So bring in unique ID and

28
00:01:41.121 --> 00:01:46.630
then we'll bring in some
of the MobX helpers.

29
00:01:50.083 --> 00:01:56.662
&gt;&gt; Steve Kinney: We're gonna
compute it from the MobX.

30
00:01:56.662 --> 00:02:02.284
All right, very cool and
we're just gonna make a class.

31
00:02:06.340 --> 00:02:11.188
&gt;&gt; Steve Kinney: We'll have a class item,
and this will have an ID.

32
00:02:11.188 --> 00:02:16.004
We're eventually gonna want
a connection to the actual like all of

33
00:02:16.004 --> 00:02:20.650
the different items will kind of
punt on that field a little bit.

34
00:02:20.650 --> 00:02:22.920
We're just like leave a little
marker in there, right?

35
00:02:22.920 --> 00:02:25.550
Cuz it will be cool if
an individual item could talk

36
00:02:25.550 --> 00:02:27.380
back up to the the collection, right?

37
00:02:27.380 --> 00:02:31.890
And like, hey, remove me or
something like that.

38
00:02:31.890 --> 00:02:34.328
Cool, and we'll actually
observe some values as well.

39
00:02:42.900 --> 00:02:45.408
&gt;&gt; Steve Kinney: So the value and
whether or not it's packed,

40
00:02:45.408 --> 00:02:49.640
cuz those things will be things where
we change the UI based on them, right?

41
00:02:49.640 --> 00:02:53.470
If it's packed, it's gotta move lists and
stuff along those lines.

42
00:02:53.470 --> 00:02:55.000
The ID probably won't change.

43
00:02:55.000 --> 00:02:58.730
I could observe that,
you can argue in the current UI,

44
00:02:58.730 --> 00:03:01.590
the value doesn't change either,
that is fair.

45
00:03:01.590 --> 00:03:03.460
But whatever.

46
00:03:03.460 --> 00:03:07.140
In a perfect world, it would.

47
00:03:07.140 --> 00:03:11.470
So the constructor,
I'm just gonna be able to pass in a value,

48
00:03:11.470 --> 00:03:16.509
an ID that will default to a uniqueId and

49
00:03:16.509 --> 00:03:19.900
packed which will default to false.

50
00:03:19.900 --> 00:03:24.890
So now, and the reason that I'm
using the object deconstruction here

51
00:03:24.890 --> 00:03:27.600
is that way I don't have to like
know the order of the arguments.

52
00:03:27.600 --> 00:03:28.824
There's nothing special about that.

53
00:03:28.824 --> 00:03:33.880
If you wanna do just value comma,
id comma, packed that works too.

54
00:03:33.880 --> 00:03:37.860
This allows me to like omit one of them or
anything along those lines.

55
00:03:40.090 --> 00:03:45.604
All right, and so
we'll say this.id equals id,

56
00:03:45.604 --> 00:03:52.040
this.value equals value,
this.packed equals false,

57
00:03:52.040 --> 00:03:58.498
which I guess I have that in the,
we need this packed.

58
00:03:58.498 --> 00:04:03.133
Cool, so
will set up all those properties and

59
00:04:03.133 --> 00:04:07.270
we can do some interesting
things here right.

60
00:04:07.270 --> 00:04:10.713
We could for instance,
we could have computer properties.

61
00:04:10.713 --> 00:04:17.300
So all the times, how have I been checking
the application if something is unpacked?

62
00:04:20.380 --> 00:04:23.810
I've been flipping the pass
Boolean every time, right?

63
00:04:23.810 --> 00:04:29.194
What I could do is,
I could say @computed and

64
00:04:29.194 --> 00:04:35.438
we'll just say get unpacked,
and now just return.

65
00:04:37.589 --> 00:04:39.770
&gt;&gt; Steve Kinney: This.packed.

66
00:04:39.770 --> 00:04:41.470
So now I can grab an individual item.

67
00:04:41.470 --> 00:04:43.440
I can say .unpacked and
that will be the opposite, right?

68
00:04:43.440 --> 00:04:49.110
I can start to give myself those kind of
very nice helper and utility methods.

69
00:04:50.600 --> 00:04:52.670
Cool, so we'll start with that.

70
00:04:52.670 --> 00:04:57.310
The other thing that we
need is the item list.

71
00:04:57.310 --> 00:04:59.668
And let's go ahead and make that.

72
00:04:59.668 --> 00:05:05.939
&gt;&gt; Steve Kinney: Call itemlist.js and
let's take that for

73
00:05:05.939 --> 00:05:13.080
a spin,
where we'll import observable again,

74
00:05:13.080 --> 00:05:17.609
observable computed action,

75
00:05:17.609 --> 00:05:22.520
which we will use in a little bit.

76
00:05:22.520 --> 00:05:24.010
So don't worry.

77
00:05:24.010 --> 00:05:27.390
And I told you that there is a special
reason why I like to use action.

78
00:05:27.390 --> 00:05:28.338
I haven't forgotten, I will tell you.

79
00:05:30.485 --> 00:05:33.630
&gt;&gt; Steve Kinney: And
we will import the item from,

80
00:05:37.680 --> 00:05:38.920
&gt;&gt; Steve Kinney: Dot slash item.

81
00:05:40.010 --> 00:05:46.610
All right, so let's make this class,
export default ItemStore, just ItemList.

82
00:05:49.010 --> 00:05:51.215
I said at one point,
I think I was gonna call it ItemStore and

83
00:05:51.215 --> 00:05:52.150
I decided against that.

84
00:05:52.150 --> 00:05:54.580
So what are the things
that we wanna observe?

85
00:05:56.920 --> 00:05:58.980
So I'm thinking like, well,
it is an ItemList, right?

86
00:05:58.980 --> 00:06:04.410
So it probably has some items array that
we really don't pass in or override.

87
00:06:04.410 --> 00:06:06.770
It's always gonna be an array,
so I can do that up here.

88
00:06:06.770 --> 00:06:09.960
I could also do that in
the construct if I wanted to.

89
00:06:09.960 --> 00:06:11.100
We can start there.

90
00:06:11.100 --> 00:06:15.190
Things that I'm also thinking about is
like, it could have a filter text, right,

91
00:06:15.190 --> 00:06:15.710
as well.

92
00:06:17.490 --> 00:06:20.090
And I'll worry about those
in a little bit later.

93
00:06:20.090 --> 00:06:22.810
And I can use Computer Properties
to do some cool things here.

94
00:06:25.980 --> 00:06:30.287
I can say computed,
I can say get packedItems.

95
00:06:32.280 --> 00:06:37.676
&gt;&gt; Steve Kinney: And
we'll just say return this.items.filter.

96
00:06:39.468 --> 00:06:42.256
&gt;&gt; Steve Kinney: Item, item.packed.

97
00:06:44.050 --> 00:06:47.484
&gt;&gt; Steve Kinney: And so now I can, from
my ItemList, I can say ItemList.items,

98
00:06:47.484 --> 00:06:49.360
I'll get all of them.

99
00:06:49.360 --> 00:06:51.140
But if I ever say ItemList.packedItems,

100
00:06:51.140 --> 00:06:55.660
I'm obviously only gonna
get the packed items.

101
00:06:55.660 --> 00:06:59.094
And there is a subtle performance
gain in here that our

102
00:06:59.094 --> 00:07:01.765
app would never get big enough to notice,

103
00:07:01.765 --> 00:07:07.445
which is we're not gonna re-call that
filter unless the item's array changes.

104
00:07:07.445 --> 00:07:10.685
We will filter through that
array the first time, and

105
00:07:10.685 --> 00:07:16.757
then we'll just memorize that and get that
back every time unless the items change,

106
00:07:16.757 --> 00:07:19.845
cuz there's no point running
through all of them again.

107
00:07:19.845 --> 00:07:22.645
The other thing we can do is
in the same way we did packed,

108
00:07:22.645 --> 00:07:27.240
we can also do unpacked.

109
00:07:27.240 --> 00:07:33.420
And remember, the item has that
property unpacked that will change.

110
00:07:33.420 --> 00:07:35.340
And this is gonna work in a nested way.

111
00:07:35.340 --> 00:07:38.518
If the status of one of them
changes inside of the array,

112
00:07:38.518 --> 00:07:40.555
these will be recomputed, right?

113
00:07:40.555 --> 00:07:46.614
So our very simple like earlier that
we wrote that fit on one JSBIN in one

114
00:07:46.614 --> 00:07:53.625
slide is not that sophisticated to deeply
nest all of these things, but MobX is.

115
00:07:53.625 --> 00:07:54.315
All right, cool.

116
00:07:54.315 --> 00:08:01.730
So we have the ability to get all of them,
get the packed ones, get the unpacked.

117
00:08:01.730 --> 00:08:09.260
I'm thinking the other thing I might
wanna do is add one, right, to the list.

118
00:08:09.260 --> 00:08:15.340
So we'll call it, I'm gonna say action and
I'm gonna say bound.

119
00:08:15.340 --> 00:08:19.659
Anyone want to take a lucky
guess at what bound does?

120
00:08:21.110 --> 00:08:22.310
&gt;&gt; Speaker 2: This bracket.

121
00:08:22.310 --> 00:08:22.850
&gt;&gt; Steve Kinney: What's that?

122
00:08:22.850 --> 00:08:24.130
&gt;&gt; Speaker 2: Context maybe?

123
00:08:24.130 --> 00:08:27.129
&gt;&gt; Steve Kinney: Yeah, it does
the same thing that this.addItem equal

124
00:08:27.129 --> 00:08:29.180
this.addItem bind this does.

125
00:08:29.180 --> 00:08:30.695
I don't have to do it.
It will effectually,

126
00:08:30.695 --> 00:08:35.194
I can now in a normal, if I was just using
MobX in the command line or whatever,

127
00:08:35.194 --> 00:08:36.940
it would be bound correctly.

128
00:08:36.940 --> 00:08:41.940
But in an event listener in React,
it's not going to.

129
00:08:41.940 --> 00:08:45.370
I tend to give myself actions for
everything I'm going to want to do,

130
00:08:45.370 --> 00:08:47.680
because then I don't have to
worry about this.whatever.

131
00:08:47.680 --> 00:08:51.210
I know if I call this action,
if you just say like, hey,

132
00:08:51.210 --> 00:08:52.980
why don't I just push one
of them onto the array?

133
00:08:52.980 --> 00:08:55.170
And MobX is great, that works, right?

134
00:08:55.170 --> 00:08:56.610
You're totally correct.

135
00:08:56.610 --> 00:08:59.379
Except when you go to using a component
you're gonna have to wrap it in

136
00:08:59.379 --> 00:09:02.070
an anonymous function anyway to
register it as an event listener.

137
00:09:02.070 --> 00:09:07.410
I just give myself methods for
doing all these things anyway,

138
00:09:07.410 --> 00:09:12.543
but you don't have to,
cuz all that's really gonna do is,

139
00:09:12.543 --> 00:09:15.235
it's gonna say this.items.

140
00:09:15.235 --> 00:09:18.414
This.items.push, and

141
00:09:18.414 --> 00:09:23.040
I don't just want an object, right?

142
00:09:23.040 --> 00:09:27.100
I want one of these items, that's also
gonna be able to communicate back up.

143
00:09:27.100 --> 00:09:31.210
So I'll say new item and
I'll pass in the item.

144
00:09:31.210 --> 00:09:35.940
And again, we'll pull off the ID and
the value, and whether or not it's packed,

145
00:09:35.940 --> 00:09:38.310
those are gonna mostly be
the defaults in this case.

146
00:09:38.310 --> 00:09:41.740
The other thing I'm gonna do real
quick though is I'm gonna pass

147
00:09:41.740 --> 00:09:43.690
a reference to the store down.

148
00:09:43.690 --> 00:09:49.950
So now, the list can talk to the
individual items, right, by manipulating

149
00:09:49.950 --> 00:09:54.220
its own array and the individual
items knows what list it's on, right?

150
00:09:54.220 --> 00:09:56.710
It can talk back up to the list.

151
00:09:56.710 --> 00:10:01.270
And we'll see that become
useful in a second.

152
00:10:01.270 --> 00:10:04.120
And so,
let's just update the individual item.

153
00:10:04.120 --> 00:10:06.560
That is wrong.
This is the problem when you have two

154
00:10:06.560 --> 00:10:07.860
things called item.

155
00:10:09.240 --> 00:10:14.750
We'll also pass in,
&gt;&gt; Steve Kinney: The list that it's on.

