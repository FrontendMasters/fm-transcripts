WEBVTT

1
00:00:02.589 --> 00:00:04.700
&gt;&gt; Steve Kinney: Talk about
generator functions, right?

2
00:00:06.080 --> 00:00:09.096
Generator functions are,
I believe in the ES6 pack,

3
00:00:09.096 --> 00:00:14.420
ES2015, and effectively they're
a way to delay execution.

4
00:00:14.420 --> 00:00:16.590
Normally we say functions
run to completion.

5
00:00:16.590 --> 00:00:19.420
When you call a function,
it does everything until it either hits

6
00:00:19.420 --> 00:00:23.720
a return statement, throws an arrow that
you didn't catch, or reaches the end.

7
00:00:23.720 --> 00:00:25.170
So this idea of like hey,

8
00:00:25.170 --> 00:00:28.840
wait a while, is not built into
the JavaScript programming language.

9
00:00:28.840 --> 00:00:32.620
There's like a little blurb
about promises in the ES6 spec.

10
00:00:32.620 --> 00:00:35.850
But despite all the working we
do with asynchronous JavaScript,

11
00:00:35.850 --> 00:00:38.799
there's no mention of asynchrony
in the JavaScript spec.

12
00:00:38.799 --> 00:00:41.403
Other than the little line on
promises in the job queue, and

13
00:00:41.403 --> 00:00:43.968
that wasn't until 20 years
into the language, right?

14
00:00:43.968 --> 00:00:47.995
A lot of that is provided by the web APIs,

15
00:00:47.995 --> 00:00:52.620
like XML HTTP request or
by Node.js, right?

16
00:00:52.620 --> 00:00:56.974
The language itself is no more
asynchronous than Ruby is, or PHP, or

17
00:00:56.974 --> 00:00:59.630
anything along those lines.

18
00:00:59.630 --> 00:01:04.114
So generators give us a way to stop,
wait until it's time to start again.

19
00:01:04.114 --> 00:01:08.229
And go do the next thing,
which is really helpful sometimes for

20
00:01:08.229 --> 00:01:10.490
dealing with asynchronous code.

21
00:01:10.490 --> 00:01:13.320
So here's a part of
the promise of the ES6 spec was

22
00:01:13.320 --> 00:01:15.190
that you should never have
to write function again.

23
00:01:15.190 --> 00:01:19.662
But this is one example where there
isn't an arrow function syntax for it.

24
00:01:19.662 --> 00:01:24.671
I don't really care, but I know some
people care very deeply about this.

25
00:01:24.671 --> 00:01:28.842
And you'll notice that it's just
got a little star next to it, and

26
00:01:28.842 --> 00:01:33.848
that's what makes it a generator function,
you can think of it as a superstar.

27
00:01:33.848 --> 00:01:37.990
Fun fact about the star,
the star can go next to the function.

28
00:01:37.990 --> 00:01:40.000
It can go next to the function name.

29
00:01:40.000 --> 00:01:42.100
It just can't float in the middle.

30
00:01:42.100 --> 00:01:45.630
It has to be globbed on to
one of those two identifiers.

31
00:01:45.630 --> 00:01:48.630
It just can't sit with
a space on each side.

32
00:01:48.630 --> 00:01:51.640
So we can all have a long argument
later on which syntax we all like, but

33
00:01:51.640 --> 00:01:53.080
this is the one I've gone with.

34
00:01:53.080 --> 00:01:55.030
So, we look at this,
generate three numbers.

35
00:01:55.030 --> 00:01:58.996
We yield 1, we yield 2, we yield 3,
that's kind of interesting.

36
00:02:00.728 --> 00:02:03.585
&gt;&gt; Steve Kinney: And then we can
effectively think about it instantiating

37
00:02:03.585 --> 00:02:04.900
a new generator, right?

38
00:02:04.900 --> 00:02:07.172
If we call it, we get back a generator.

39
00:02:07.172 --> 00:02:12.070
We can say .next, you get yield 1 and
done being false.

40
00:02:12.070 --> 00:02:14.597
You call .next again, you get 2.

41
00:02:14.597 --> 00:02:18.350
And still not done,
you call next, you get 3.

42
00:02:18.350 --> 00:02:21.260
But then, you've hit the end of
the function and you're done.

43
00:02:21.260 --> 00:02:24.016
But, the important part
is once you've yielded 1,

44
00:02:24.016 --> 00:02:26.353
it kind of stopped in between lines 2 and
3.

45
00:02:26.353 --> 00:02:29.910
It just paused,
it didn't run to completion.

46
00:02:29.910 --> 00:02:33.048
It didn't follow until it hit a return
statement, or threw an error, or

47
00:02:33.048 --> 00:02:33.980
anything like that.

48
00:02:33.980 --> 00:02:36.970
It just, hey,
I'll just sit here half done.

49
00:02:36.970 --> 00:02:38.740
You let me know when you
want me to continue.

50
00:02:38.740 --> 00:02:42.776
And so this is going to become a slightly
powerful idea when we think about I

51
00:02:42.776 --> 00:02:46.568
haven't heard back from the network yet,
why don't you wait here.

52
00:02:46.568 --> 00:02:50.988
Cool, so the interesting thing that most
people don't know about generators is

53
00:02:50.988 --> 00:02:55.380
that you can actually pass in more data,
even while they're paused.

54
00:02:55.380 --> 00:02:58.495
So we'll have this one
called addNumbersEventually.

55
00:02:58.495 --> 00:03:02.438
And it will take a, and
then you see how on line 2 it yields a?

56
00:03:02.438 --> 00:03:07.546
It will give you back a, but
when you call next, you can pass in

57
00:03:07.546 --> 00:03:13.262
a value that will be given to b, and
then eventually you can add a + b.

58
00:03:13.262 --> 00:03:17.250
So we have a, we yield a back
out to whatever, call it .next.

59
00:03:17.250 --> 00:03:20.980
And when they pass in, when they
call .next they can pass in b and

60
00:03:20.980 --> 00:03:22.650
then we'll have both of them.

61
00:03:22.650 --> 00:03:24.180
So we can add numbers eventually.

62
00:03:24.180 --> 00:03:27.170
We'll say .next is 2,
so it gave us back 1.

63
00:03:27.170 --> 00:03:29.540
It took in the 2 and
then we called it again.

64
00:03:29.540 --> 00:03:32.860
We yield 3, or return 3 rather.

65
00:03:34.080 --> 00:03:37.620
So this is kinda cool, so
we can pause things, all right,

66
00:03:37.620 --> 00:03:39.380
we can have a thing, we can wait.

67
00:03:39.380 --> 00:03:42.854
We can also actually pick
up back where you left off.

68
00:03:42.854 --> 00:03:45.490
I have more information for you, right?

69
00:03:45.490 --> 00:03:49.270
Hopefully async is ringing in
your mind at this point of hey,

70
00:03:49.270 --> 00:03:52.950
I need to get some information
from the server, chill.

71
00:03:52.950 --> 00:03:55.870
Okay, guess what,
we got the information from the server,

72
00:03:55.870 --> 00:03:57.690
pick up where you left off, right?

73
00:03:58.800 --> 00:04:03.139
And you might use generators more than you
think without ever typing the generator,

74
00:04:03.139 --> 00:04:05.596
right, and
we'll talk about that in a second.

75
00:04:05.596 --> 00:04:10.450
So we have the ability to pause functions,
and come back later with more information.

76
00:04:10.450 --> 00:04:13.100
This seems like we could do
something clever here, and

77
00:04:13.100 --> 00:04:16.640
escape a lot of the asynchronous patterns.

78
00:04:16.640 --> 00:04:21.809
So this is very contrived, but
here I have a generator function.

79
00:04:21.809 --> 00:04:24.970
I've called it main and
I wanna get my GitHub profile and

80
00:04:24.970 --> 00:04:27.060
my buddy Lon's GitHub profile.

81
00:04:27.060 --> 00:04:28.310
Those are two network requests.

82
00:04:28.310 --> 00:04:32.947
I don't wanna go into callback hell here,
where I have to fetch the first one.

83
00:04:32.947 --> 00:04:37.491
And then have another callback fetch
the second one, or fetch both of them,

84
00:04:37.491 --> 00:04:41.030
but have a gate to make sure I get both,
right?

85
00:04:41.030 --> 00:04:45.567
Yes, I could use promise.all, totally, but
still even that if one of them fails and

86
00:04:45.567 --> 00:04:47.845
not the other, it's just a mess, right?

87
00:04:47.845 --> 00:04:52.890
Here I can yield the first one,
wait, go get the second one.

88
00:04:52.890 --> 00:04:54.540
You can see that we have a generator.

89
00:04:54.540 --> 00:04:58.120
We start it up on line 12 by calling it.

90
00:04:58.120 --> 00:05:01.120
And we kick it off on
line 13 by saying next.

91
00:05:01.120 --> 00:05:04.900
It waits until we make the Ajax request.

92
00:05:04.900 --> 00:05:10.412
That promise resolves on line 2, and
hold on, I gotta highlight this for you.

93
00:05:10.412 --> 00:05:14.099
All right, we can yield,
when that promise resolves on line 2,

94
00:05:14.099 --> 00:05:17.550
it kicks it back off again, and
we can go to the next line.

95
00:05:17.550 --> 00:05:20.550
And so we have a way to pause,

96
00:05:20.550 --> 00:05:24.450
until we hear back from the network and
move on to the next thing.

97
00:05:24.450 --> 00:05:28.310
If part of you is like, hey,
this reminds me of async await.

98
00:05:28.310 --> 00:05:35.964
That's because async await is basically
syntactic sugar on this, right?

99
00:05:35.964 --> 00:05:38.208
It reminds you of async await,

100
00:05:38.208 --> 00:05:42.624
cuz effectively it's a much
uglier version of async await.

101
00:05:42.624 --> 00:05:44.167
But that is generators and

102
00:05:44.167 --> 00:05:47.542
that's what generators bring
to the table in this case.

