WEBVTT

1
00:00:03.970 --> 00:00:06.680
&gt;&gt; Steve Kinney: So,
we explored a number of patterns for

2
00:00:06.680 --> 00:00:08.910
separating state from presentation.

3
00:00:10.600 --> 00:00:13.230
There's nothing about flux or redux or

4
00:00:13.230 --> 00:00:18.610
monax are unique to this.

5
00:00:18.610 --> 00:00:22.020
We could do this with regular
react components as we just did.

6
00:00:22.020 --> 00:00:24.318
Right?
Those [INAUDIBLE] components could fetch

7
00:00:24.318 --> 00:00:25.760
stuff from the network.

8
00:00:25.760 --> 00:00:27.850
They could fetch stuff
from the local storage.

9
00:00:27.850 --> 00:00:28.480
Right?

10
00:00:28.480 --> 00:00:32.590
But there are some additional ways of
thinking about state outside of just using

11
00:00:32.590 --> 00:00:36.170
set state as we've been using it so
far this workshop.

12
00:00:36.170 --> 00:00:41.530
And so we're gonna talk a little bit
about the flux pattern, and I just wanna,

13
00:00:41.530 --> 00:00:47.100
and I think it's sometimes interesting
to think about the fact that for

14
00:00:47.100 --> 00:00:50.560
a lot of these patterns, the entire
community's not in universal agreement

15
00:00:50.560 --> 00:00:53.630
that you need to use all
of these all of the time.

16
00:00:53.630 --> 00:00:57.390
My job is to show them to you,
to explain them to you,

17
00:00:57.390 --> 00:01:00.220
to kind of talk about some of the benefits
and some of the trade offs, but

18
00:01:00.220 --> 00:01:03.810
not to sell you on that you have to use
this one or that one or the other one.

19
00:01:03.810 --> 00:01:05.174
Right?

20
00:01:05.174 --> 00:01:06.757
And that is even in this case, and

21
00:01:06.757 --> 00:01:10.447
we'll see some work codes around this
where it's the end in the conclusion.

22
00:01:10.447 --> 00:01:14.689
Right in form of secretive react radar,
agrees that flux and

23
00:01:14.689 --> 00:01:19.345
redux are great ways to build an app,
but wonder that if going whole

24
00:01:19.345 --> 00:01:24.171
hog into them and not considering
these tradeoffs; not considering

25
00:01:24.171 --> 00:01:29.245
the different approaches that we can
take and spending the time to figure

26
00:01:29.245 --> 00:01:34.146
out exactly what's right might be
beneficial for us to do very cool.

27
00:01:34.146 --> 00:01:37.140
So, I'm gonna explain Flux but

28
00:01:37.140 --> 00:01:40.020
I'm gonna do it a little differently
than what's normally done.

29
00:01:40.020 --> 00:01:45.480
Normally, when someone wants to explain
Flux they show this crazy diagram,

30
00:01:45.480 --> 00:01:49.933
right, that overwhelms you and
you get a little freaked out and

31
00:01:49.933 --> 00:01:53.225
then they start like
pulling back the pieces.

32
00:01:53.225 --> 00:01:56.590
We're gonna do this in three steps.

33
00:01:56.590 --> 00:02:01.887
I'm just gonna start implementing
Flux In the pizza calculator,

34
00:02:01.887 --> 00:02:05.956
and then we'll go and
put together all the pieces so

35
00:02:05.956 --> 00:02:12.117
we would have seen it actually implemented
and you don't have to stress out.

36
00:02:12.117 --> 00:02:15.983
We're going to do it twice because
there a lot of moving parts and

37
00:02:15.983 --> 00:02:19.650
a lot of new terms and
it can be a little crazy all at once.

38
00:02:19.650 --> 00:02:24.250
I think showing the chart, and then
trying to get your way through it has not

39
00:02:24.250 --> 00:02:27.200
been particularly effective for
me learning any of these patterns.

40
00:02:27.200 --> 00:02:32.120
And my suspicion is that it'll be
easier if we see it in practice,

41
00:02:32.120 --> 00:02:35.600
pull apart the pieces, and
then see it in practice again.

42
00:02:35.600 --> 00:02:41.610
Cool In the chat I did drop kind of the
notes I'm going to use so if you want to

43
00:02:41.610 --> 00:02:46.390
like follow along, they're very bare bones
because I need to get the general gist.

44
00:02:46.390 --> 00:02:48.990
They're not like a long form
essay on that stuff, but

45
00:02:48.990 --> 00:02:51.310
you can also see that
as we go along as well.

46
00:02:53.460 --> 00:02:57.775
Okay, so real quick,
I also am back on the master branch,

47
00:02:57.775 --> 00:03:00.784
before we did all of our crazy patterns.

48
00:03:00.784 --> 00:03:04.737
In this case, I do wanna keep it kind of
like, clean, and we don't have to mix in

49
00:03:04.737 --> 00:03:08.280
a bunch of like, container patterns and
render pros patterns as well.

50
00:03:08.280 --> 00:03:13.850
Don't worry, we'll get there, but
let's start with a clean slate.

51
00:03:13.850 --> 00:03:17.775
So what I am gonna do real quick,
is I'm just gonna check out a new

52
00:03:17.775 --> 00:03:22.426
branch
&gt;&gt; Steve Kinney: We'll call it

53
00:03:22.426 --> 00:03:23.307
live coding flux,

54
00:03:23.307 --> 00:03:27.260
that way it doesn't have merge conflicts
with the other live coding branch.

55
00:03:27.260 --> 00:03:29.850
So we'll call this one
live coding flux and

56
00:03:31.170 --> 00:03:36.244
somebody has to remind me to commit and
push up when we're done, very cool.

57
00:03:36.244 --> 00:03:40.750
Okay so, there are,

58
00:03:40.750 --> 00:03:45.570
the ideas to pull as much of like state
just out of components as a whole, right?

59
00:03:45.570 --> 00:03:48.210
The idea is like if we do
stuff in react one way or

60
00:03:48.210 --> 00:03:51.300
another we're going to have to
life pass stuff down, right?

61
00:03:51.300 --> 00:03:56.177
Versus we take the state
management out of react right,

62
00:03:56.177 --> 00:04:00.554
we have a lot more flexibility
on how we pass it in.

63
00:04:00.554 --> 00:04:05.016
Reacts claims just to be a view layer,
we've been handling a lot of, like,

64
00:04:05.016 --> 00:04:09.968
working with our data in our view layer,
but it's not necessarily meant to do that,

65
00:04:09.968 --> 00:04:13.318
at a certain growth and
complexity of your application,

66
00:04:13.318 --> 00:04:16.960
it makes sense to think about
pulling this stuff out.

67
00:04:16.960 --> 00:04:20.029
Two things that I will say is
when should you pull it out,

68
00:04:20.029 --> 00:04:22.720
I would say generally speaking

69
00:04:22.720 --> 00:04:25.870
unless you know this is gonna be the big
app that you got in the next two years in

70
00:04:25.870 --> 00:04:30.270
your iphone it makes more sense to start
in that state and wait till it hurts.

71
00:04:30.270 --> 00:04:33.570
The cool thing about the container pattern
is if you start with the container

72
00:04:33.570 --> 00:04:39.720
pattern, you've already separated out the
idea of managing state from your UI right.

73
00:04:39.720 --> 00:04:45.700
And so should you decide no arts It's not
hard for you to refracture the entire app.

74
00:04:45.700 --> 00:04:48.680
If you go with, before where you
explored all those patterns, and

75
00:04:48.680 --> 00:04:52.090
you just start jamming all of your state
management and your presentation together

76
00:04:52.090 --> 00:04:56.110
than it's going to be painful to
move to flux, or redux, or mobx.

77
00:04:56.110 --> 00:04:56.790
Right?

78
00:04:56.790 --> 00:05:00.000
I think the best programming decisions
are the decisions that you can change your

79
00:05:00.000 --> 00:05:01.020
mind on later.

80
00:05:01.020 --> 00:05:05.160
So if you structure things to delay
until the last responsible moment and

81
00:05:05.160 --> 00:05:09.750
give yourself enough wiggle room to change
your usually better off than if you try to

82
00:05:09.750 --> 00:05:12.490
make the right choice at the very
beginning of your project because you

83
00:05:12.490 --> 00:05:16.670
don't necessarily know how
the project is gonna end up.

84
00:05:16.670 --> 00:05:17.300
Very cool.

85
00:05:17.300 --> 00:05:20.380
So, this is again just a regular old
piece of calculator that we started on.

86
00:05:20.380 --> 00:05:21.880
It's in master, I just made a new branch.

