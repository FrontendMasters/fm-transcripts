WEBVTT

1
00:00:02.243 --> 00:00:05.150
&gt;&gt; Steve Kinney: Great, so
let's go through this one together, right?

2
00:00:06.230 --> 00:00:09.770
So really the major goal here and
we'll talk about some of the other like

3
00:00:09.770 --> 00:00:11.900
use cases for this so
once we implemented it.

4
00:00:13.140 --> 00:00:16.280
But we want to separate
out the stateful container

5
00:00:16.280 --> 00:00:18.020
from the presentational component.

6
00:00:18.020 --> 00:00:21.700
And it's effectively up to you, which
way you decide to go about doing this.

7
00:00:21.700 --> 00:00:24.770
I would argue that in this
particular case, it is

8
00:00:24.770 --> 00:00:29.270
easier to rip out the presentational part
than it is to rip out the stateful part.

9
00:00:29.270 --> 00:00:31.060
So we're gonna go that route.

10
00:00:31.060 --> 00:00:34.430
I'm gonna do everything in
the same file just for clarity so

11
00:00:34.430 --> 00:00:36.010
I don't have to jump around files.

12
00:00:36.010 --> 00:00:40.676
But we'll actually have
the two separate very shortly.

13
00:00:40.676 --> 00:00:44.720
So it's called application now,
which probably isn't the best name for it.

14
00:00:44.720 --> 00:00:48.480
But we'll take out this
return part right here.

15
00:00:49.630 --> 00:00:53.460
And this is the part that I'm gonna
need for the presentational component.

16
00:00:54.480 --> 00:00:57.300
And so what we'll do is I'll
go up a little bit, and

17
00:00:57.300 --> 00:01:02.113
I'm just gonna say,
&gt;&gt; Steve Kinney: class PizzaCalculator

18
00:01:04.334 --> 00:01:09.660
&gt;&gt; Steve Kinney: extends Component.

19
00:01:09.660 --> 00:01:16.692
And we'll give it a render method.
&gt;&gt; Steve Kinney: Cool,

20
00:01:16.692 --> 00:01:19.280
and we need to do a few things in here.

21
00:01:19.280 --> 00:01:20.810
First of all, I need to return that.

22
00:01:20.810 --> 00:01:23.880
So we'll return that component.

23
00:01:25.590 --> 00:01:30.679
All right, so ideally,
numberOfPeople is gonna come in as a prop,

24
00:01:30.679 --> 00:01:35.321
SlicesPerPerson is gonna come
in as a prop, as well as reset,

25
00:01:35.321 --> 00:01:39.880
updateSlices PerPerson,
and update numberOfPeople.

26
00:01:39.880 --> 00:01:48.003
So let's get that ready.
&gt;&gt; Steve Kinney: numberOfPeople,

27
00:01:48.003 --> 00:01:53.472
updateNumberOfPeople, slicesPerPerson,

28
00:01:53.472 --> 00:01:59.921
updateSlicesPerPerson, and
reset = this.props,

29
00:01:59.921 --> 00:02:03.575
these are gonna get passed in.

30
00:02:03.575 --> 00:02:06.292
And let's do a little
bit of formatting magic

31
00:02:06.292 --> 00:02:09.958
here,
&gt;&gt; Steve Kinney: Or

32
00:02:09.958 --> 00:02:14.210
not.
&gt;&gt; Steve Kinney: 69,

33
00:02:14.210 --> 00:02:18.113
it does not like the fact that
I have an empty return so

34
00:02:18.113 --> 00:02:23.895
I'll actually say PizzaCalculator.
&gt;&gt; Steve Kinney: And

35
00:02:23.895 --> 00:02:25.890
we're gonna give it
everything that it needs.

36
00:02:25.890 --> 00:02:34.171
So we know that that is numberOfPeople.
&gt;&gt; Steve Kinney: We

37
00:02:34.171 --> 00:02:38.051
know that updateNumberOfPeople
= this.updateNumberOf people.

38
00:02:40.442 --> 00:02:42.109
&gt;&gt; Steve Kinney: slicesPerPerson,

39
00:02:42.109 --> 00:02:49.121
we pulled off a state.
&gt;&gt; Steve Kinney: updateSlicesPerPerson

40
00:02:49.121 --> 00:02:53.903
is on the class.
&gt;&gt; Steve Kinney: And

41
00:02:53.903 --> 00:02:56.943
reset so and

42
00:02:56.943 --> 00:03:02.679
so.
&gt;&gt; Steve Kinney: So

43
00:03:02.679 --> 00:03:04.090
let's try to format that again.

44
00:03:06.050 --> 00:03:06.810
All right, cool.

45
00:03:06.810 --> 00:03:10.760
So we've pulled this out separate,
we have to change a few things in here.

46
00:03:10.760 --> 00:03:13.080
We've pulled in as props.

47
00:03:13.080 --> 00:03:15.938
We need to get rid of whatever this is
because they're now getting passed in.

48
00:03:15.938 --> 00:03:20.209
Okay, so
while I'm getting rid of whatever this is,

49
00:03:20.209 --> 00:03:23.258
number of pizzas can be
passed in as well so

50
00:03:23.258 --> 00:03:29.936
let's do that.
&gt;&gt; Steve Kinney: Because that can get

51
00:03:29.936 --> 00:03:36.595
calculated from the state and passed in.
&gt;&gt; Steve Kinney: So

52
00:03:36.595 --> 00:03:39.340
this seems a little silly, right?

53
00:03:39.340 --> 00:03:41.970
Like, I'm not gaining that much, but

54
00:03:41.970 --> 00:03:46.361
imagine we're pulling this
information from a server, right?

55
00:03:46.361 --> 00:03:50.510
It would be really hard to test that, in
order to test a component that both showed

56
00:03:50.510 --> 00:03:53.072
the UI based on what it got
from the server, as well

57
00:03:53.072 --> 00:03:57.490
as got the stuff from the server, you'd
have to mock out a bunch of HX requests.

58
00:03:57.490 --> 00:04:01.590
Again, if testing is hard,
you're probably not going to do it.

59
00:04:01.590 --> 00:04:05.463
So, this allows you to then be kind of
passing the object that you would expect

60
00:04:05.463 --> 00:04:09.351
to get back from the API and see that
the components works as you would want it.

61
00:04:09.351 --> 00:04:19.099
So also pull in that numberOfPizzas.
&gt;&gt; Steve Kinney: Let's

62
00:04:19.099 --> 00:04:21.270
say I will get that last
to start reset out of here.

63
00:04:22.700 --> 00:04:29.959
Okay, so now the moment of truth
&gt;&gt; Steve Kinney: And

64
00:04:29.959 --> 00:04:31.150
we can see that it works.

65
00:04:32.260 --> 00:04:35.110
We can see that number of guests works.

66
00:04:35.110 --> 00:04:36.473
Check out slices per person.

67
00:04:49.296 --> 00:04:51.152
&gt;&gt; Speaker 2: Use .updateSlicesPerPerson.

68
00:04:51.152 --> 00:04:51.864
&gt;&gt; Steve Kinney: What's that?

69
00:04:51.864 --> 00:04:52.608
&gt;&gt; Speaker 2: Line 79.

70
00:04:52.608 --> 00:04:53.544
&gt;&gt; Steve Kinney: Yep.

71
00:04:53.544 --> 00:04:54.696
&gt;&gt; Speaker 2: 79,79.

72
00:04:59.321 --> 00:05:00.560
&gt;&gt; Steve Kinney: Auto complete

73
00:05:00.560 --> 00:05:05.703
failure.
&gt;&gt; Steve Kinney: Cool.

74
00:05:07.618 --> 00:05:08.373
&gt;&gt; Steve Kinney: And we can now change

75
00:05:08.373 --> 00:05:10.480
the number of pizzas we have ordered,
right?

76
00:05:10.480 --> 00:05:13.210
So again, in this case,
we were able to separate the two of them.

77
00:05:13.210 --> 00:05:15.822
This is a lot more powerful when you're
pulling stuff from an API, right?

78
00:05:15.822 --> 00:05:20.270
Which we will do later and we will make
use of this pattern when we get there but

79
00:05:20.270 --> 00:05:22.500
we now know how to implement it, right?

80
00:05:22.500 --> 00:05:26.388
And now you can basically put any of
these components anywhere in your app,

81
00:05:26.388 --> 00:05:30.232
they're gonna have the state that they
need and then be able to render it.

82
00:05:30.232 --> 00:05:33.991
But you might notice something
kind of limiting about

83
00:05:33.991 --> 00:05:39.190
this which is that these
are definitely very tightly coupled.

84
00:05:39.190 --> 00:05:42.530
We have what we'll call the
PizzaCalculatorContainer, it's currently

85
00:05:42.530 --> 00:05:45.400
called Application, but we could
rename it PizzaCalculatorContainer and

86
00:05:45.400 --> 00:05:48.520
then export the application
that has that one.

87
00:05:48.520 --> 00:05:52.760
But what happens if I have
stuff with user data or

88
00:05:52.760 --> 00:05:55.940
with the pizza calculations that I
want to use in multiple places in my

89
00:05:55.940 --> 00:05:58.790
app with multiple different
presentational components.

90
00:05:58.790 --> 00:06:00.930
This pattern doesn't sell for that, right?

91
00:06:00.930 --> 00:06:05.381
It's a very simple to implement pattern
but it doesn't sell for, I have this state

92
00:06:05.381 --> 00:06:09.436
that I want to test to multiple different
kinds of presentational components.

93
00:06:09.436 --> 00:06:12.151
Which brings us to the next phase,
the lightening round.

