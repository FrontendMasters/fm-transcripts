WEBVTT

1
00:00:02.679 --> 00:00:05.984
&gt;&gt; Steve Kinney: The first thing
we're gonna do is we're gonna create

2
00:00:05.984 --> 00:00:06.947
a dispatcher.

3
00:00:06.947 --> 00:00:09.865
I'll explain what dispatcher
is in one moment, but

4
00:00:09.865 --> 00:00:13.481
let's actually make it first.
&gt;&gt; Steve Kinney: So

5
00:00:13.481 --> 00:00:18.180
I'm just gonna call this one AppDispatcher
cuz that's a common pattern.

6
00:00:20.220 --> 00:00:23.240
Flux is a pattern,
there's not a flux library.

7
00:00:23.240 --> 00:00:28.934
You can npm install flux and you basically
get a very lightweight set of tools,

8
00:00:28.934 --> 00:00:31.789
you do not get the entire flux pattern.

9
00:00:31.789 --> 00:00:34.855
You get effectively a dispatcher and
some utils.

10
00:00:34.855 --> 00:00:36.519
So let's actually pull that in.

11
00:00:45.741 --> 00:00:47.403
&gt;&gt; Steve Kinney: So the Dispatcher is gong

12
00:00:47.403 --> 00:00:52.311
to be the thing, that's a very technical
term, in your application that

13
00:00:52.311 --> 00:00:57.156
receives a bunch of things that happen and
figures out what to do with it.

14
00:00:57.156 --> 00:01:00.779
If you've ever used the pub-sub
pattern before, right,

15
00:01:00.779 --> 00:01:04.557
where it can broadcast out things,
think dispatch, right?

16
00:01:04.557 --> 00:01:06.863
It's similar to that with
one important difference.

17
00:01:06.863 --> 00:01:08.506
With the pub-sub pattern,

18
00:01:08.506 --> 00:01:12.484
you usually subscribe to given
messages that you want to respond to.

19
00:01:12.484 --> 00:01:15.490
So if you've ever used an event
listener in jQuery or Vanilla DOM,

20
00:01:15.490 --> 00:01:18.136
you've effectively used
the pub-sub pattern, right?

21
00:01:18.136 --> 00:01:22.206
You say add event listener for
click events and trigger this function.

22
00:01:22.206 --> 00:01:26.132
And so you've done this, maybe you've
never thought about it as the pub-sub

23
00:01:26.132 --> 00:01:29.345
pattern but that is technically
what the pattern is called, but

24
00:01:29.345 --> 00:01:31.026
it's I list for certain things.

25
00:01:31.026 --> 00:01:34.492
With the dispatcher its going to just
anyone who says they are listing to

26
00:01:34.492 --> 00:01:36.759
Dispatcher is gonna get everything, right.

27
00:01:36.759 --> 00:01:40.298
It's just like radio rather than
calling people up on the phone, right.

28
00:01:40.298 --> 00:01:41.796
Everyone is gonna hear everything and

29
00:01:41.796 --> 00:01:44.245
they can decide if they're gonna
do something with it or not.

30
00:01:44.245 --> 00:01:47.991
So, really what we want to do is just
make a new instance of the Dispatcher.

31
00:01:47.991 --> 00:01:50.054
This is gonna be our entire Dispatcher

32
00:01:50.054 --> 00:01:54.882
file.
&gt;&gt; Steve Kinney: The default

33
00:01:54.882 --> 00:01:58.769
export is gonna be a new Dispatcher.
&gt;&gt; Steve Kinney: All right,

34
00:01:58.769 --> 00:02:02.934
questions about this code?
&gt;&gt; Steve Kinney: I grab Dispatcher

35
00:02:02.934 --> 00:02:03.568
library.

36
00:02:03.568 --> 00:02:06.026
Maybe we can take a look at it later and
see what's inside, but

37
00:02:06.026 --> 00:02:07.361
we grab the Dispatcher library.

38
00:02:07.361 --> 00:02:10.278
It's effectively just going to
the thing that receives actions and

39
00:02:10.278 --> 00:02:13.103
broadcast them back out, right,
that's effectively its job.

40
00:02:13.103 --> 00:02:16.568
We just need one of this and
rather than write around,

41
00:02:16.568 --> 00:02:20.271
we're just gonna grab the one
from this library, cool.

42
00:02:20.271 --> 00:02:26.767
Okay, so like I said before, we are going
to receive actions and broadcast them out.

43
00:02:26.767 --> 00:02:30.845
So it seems like I'm gonna have to start
implementing one of the two there,

44
00:02:30.845 --> 00:02:34.945
which is either get actions to the
Dispatcher or start listening for them.

45
00:02:34.945 --> 00:02:39.905
Just in a chronological order argument,
it seems to make sense that I should get

46
00:02:39.905 --> 00:02:44.733
some actions into the system first before
I start to listening to any of them.

47
00:02:44.733 --> 00:02:48.382
So what I'll do is I'm gonna
create an action's file.

48
00:02:48.382 --> 00:02:51.171
Now in a bigger app, would I put
these all in the main directory?

49
00:02:51.171 --> 00:02:56.565
Probably not, but
I'm gonna be creating single files.

50
00:02:56.565 --> 00:03:01.189
In the code, where we have an actions
directory, and it has many files in it but

51
00:03:01.189 --> 00:03:01.889
the sake for

52
00:03:01.889 --> 00:03:06.255
not having crazy relative paths I'm
just gonna keep it simple right now.

53
00:03:06.255 --> 00:03:10.505
So we'll create actions.js.

54
00:03:10.505 --> 00:03:12.224
And an action is basically,

55
00:03:12.224 --> 00:03:17.022
you get a notification that something
happened, so let's actually pull in our

56
00:03:17.022 --> 00:03:26.042
AppDispatcher.
&gt;&gt; Steve Kinney: Right,

57
00:03:26.042 --> 00:03:28.500
so we're gonna tell the app
dispatcher something happened.

58
00:03:29.660 --> 00:03:34.356
Right, and then eventually it's going to
tell other things that something happened.

59
00:03:34.356 --> 00:03:37.860
And what an action effectively
looks like is just an object.

60
00:03:39.220 --> 00:03:40.696
It's just a plain old JavaScript object.

61
00:03:40.696 --> 00:03:45.094
And that's why there's no flux library,
its, there's an object.

62
00:03:45.094 --> 00:03:49.080
Usually we need to know what
kind of action happened, right.

63
00:03:49.080 --> 00:03:51.377
The user can do a lot
of things in your app.

64
00:03:51.377 --> 00:03:55.389
They can increment a counter, or
they can change pizza calculators, or

65
00:03:55.389 --> 00:03:58.034
they can mark something as packed or
unpacked.

66
00:03:58.034 --> 00:04:03.428
The user's gonna do a lot of things, so
we usually say, what type of action it is.

67
00:04:03.428 --> 00:04:05.907
And I'm gonna call this property type, but

68
00:04:05.907 --> 00:04:08.528
it doesn't actually
matter what you call it.

69
00:04:08.528 --> 00:04:12.208
You shouldn't call it sandwich, cuz that
doesn't make any sense, don't do that.

70
00:04:12.208 --> 00:04:15.624
But you'll see it called
sometimes action type,

71
00:04:15.624 --> 00:04:20.502
I'm gonna call it type for reasons
that we'll get to in the next section

72
00:04:20.502 --> 00:04:24.998
that something else just happens
to use type as a common pattern.

73
00:04:24.998 --> 00:04:28.051
So type and
it could be anything in this case.

74
00:04:28.051 --> 00:04:31.748
But what's a thing that could happen in my
pizza app where we have those two fields?

75
00:04:31.748 --> 00:04:34.100
What's the top field?

76
00:04:34.100 --> 00:04:37.495
This is a pop quiz to see if anyone
remembers the UI of my very complicated

77
00:04:37.495 --> 00:04:38.069
pizza app.

78
00:04:39.200 --> 00:04:41.591
It's the number of people, right?

79
00:04:41.591 --> 00:04:43.950
And so
what happens when someone changes that?

80
00:04:43.950 --> 00:04:45.790
They update the number of people, right?

81
00:04:45.790 --> 00:04:48.360
So let's say that's an action that
could happen in the application.

82
00:04:48.360 --> 00:04:51.250
And basically what you do is you look at
the UI of the application whether it's

83
00:04:51.250 --> 00:04:53.520
the UI that you currently have or

84
00:04:53.520 --> 00:04:57.230
if you're starting fresh the mockup
you got from the designers, right.

85
00:04:57.230 --> 00:05:00.650
What are all the actions
that a user could take?

86
00:05:00.650 --> 00:05:07.331
So we could say,
&gt;&gt; Steve Kinney: UPDATE_NUMBER_OF_PEOPLE.

87
00:05:07.331 --> 00:05:11.776
And when you tend to use strings,
because strings are easy to serialize,

88
00:05:11.776 --> 00:05:16.151
a pattern that you'll see later that
we're gonna use is storing these in

89
00:05:16.151 --> 00:05:18.036
variables called constants.

90
00:05:18.036 --> 00:05:21.095
The main reason for
this is auto-complete is wonderful.

91
00:05:21.095 --> 00:05:23.373
And if you create a variable
you get auto-complete.

92
00:05:23.373 --> 00:05:27.461
And if you don't, you have to make
sure you don't mistype this string.

93
00:05:27.461 --> 00:05:31.256
And if we think about my live coding track
record so far today, that's probably

94
00:05:31.256 --> 00:05:34.896
unlikely that I'm not going to make at
least one boo boo typing this string.

95
00:05:34.896 --> 00:05:37.580
But for simplicity we're not
gonna do that right now.

96
00:05:37.580 --> 00:05:40.348
So this is the simplest possible action,

97
00:05:40.348 --> 00:05:43.441
we're gonna say update
the number of people.

98
00:05:43.441 --> 00:05:47.977
But there's more information that
we need in order to do that, right?

99
00:05:47.977 --> 00:05:52.842
Ideally if it was at 10 and they change
it to 11, we do need to know that value,

100
00:05:52.842 --> 00:05:53.355
right?

101
00:05:53.355 --> 00:05:57.749
So an action is the thing that happened or
the type of thing that happened and

102
00:05:57.749 --> 00:06:01.446
the bare minimum amount of
information that you need in order to

103
00:06:01.446 --> 00:06:02.650
communicate that.

104
00:06:02.650 --> 00:06:07.291
So really the only thing we
need beyond that is some value.

105
00:06:08.579 --> 00:06:09.159
&gt;&gt; Steve Kinney: All right,

106
00:06:09.159 --> 00:06:11.779
which is whatever the new
value of the input field is.

