WEBVTT

1
00:00:03.174 --> 00:00:05.240
&gt;&gt; Steve Kinney: So
we'll set up the item store.

2
00:00:08.956 --> 00:00:12.898
&gt;&gt; Steve Kinney: And the item store is
going to now receive these actions and

3
00:00:12.898 --> 00:00:15.000
figure out what it needs to do.

4
00:00:15.000 --> 00:00:22.095
So we know that we need the event emitter
&gt;&gt; Steve Kinney: And

5
00:00:22.095 --> 00:00:25.070
we know, I think that's
about all we need right now.

6
00:00:25.070 --> 00:00:26.171
You know we need the app dispatcher.

7
00:00:35.705 --> 00:00:37.338
&gt;&gt; Steve Kinney: And
it's cool to think about like,

8
00:00:37.338 --> 00:00:41.218
we know we needed the action creators,
cuz they're gonna tell the app dispatcher.

9
00:00:41.218 --> 00:00:43.783
And we know we need the store, cuz it's
gonna hear from the app dispatcher.

10
00:00:43.783 --> 00:00:47.208
So there is a certain amount of I
think magic is really great, and

11
00:00:47.208 --> 00:00:51.077
we'll see a state management library
tomorrow that has a lot of magic and

12
00:00:51.077 --> 00:00:53.570
everything just works out of the box,
right?

13
00:00:53.570 --> 00:00:57.230
But sometimes being able to see
these things is very useful for

14
00:00:57.230 --> 00:00:58.560
conceptual understanding.

15
00:00:58.560 --> 00:01:01.930
Versus it works, but
I don't really understand why.

16
00:01:01.930 --> 00:01:05.340
Which is great when it works,
and terrible when it doesn't.

17
00:01:05.340 --> 00:01:09.200
All right, very cool, what I'm gonna do
right now is I would like to start with

18
00:01:09.200 --> 00:01:11.920
some default items,
just for my own sanity.

19
00:01:11.920 --> 00:01:14.600
So I know I needed to make
that items array anyway,

20
00:01:14.600 --> 00:01:16.440
that I'm going to push and remove from.

21
00:01:16.440 --> 00:01:18.400
I had the calculator in
the previous example.

22
00:01:18.400 --> 00:01:20.939
I'm gonna have an items array that's
gonna be in the closure that I'm

23
00:01:20.939 --> 00:01:23.610
gonna add items to, change items in,
and remove items from.

24
00:01:23.610 --> 00:01:26.180
So, what I'm just gonna do is I'm
just is I'm gonna grab this one,

25
00:01:26.180 --> 00:01:27.830
seems like as good as any.

26
00:01:29.140 --> 00:01:31.058
Again, cuz I don't wanna
break code necessarily,

27
00:01:31.058 --> 00:01:32.550
I'm just gonna do a copy paste it first.

28
00:01:32.550 --> 00:01:34.570
And then I'll remove it, in a second.

29
00:01:35.980 --> 00:01:38.559
So, in the items store
we will say let items.

30
00:01:39.710 --> 00:01:42.166
And maybe this is an empty array.

31
00:01:47.332 --> 00:01:50.930
&gt;&gt; Steve Kinney: Cool, so we have all
those items and these needs unique ID.

32
00:01:50.930 --> 00:01:55.545
Just because we're creating them here,
mostly out of laziness.

33
00:02:03.579 --> 00:02:07.200
&gt;&gt; Steve Kinney: UniqueID, cool,
so we've got our items, all right.

34
00:02:07.200 --> 00:02:09.680
Now we need to create the item store.

35
00:02:09.680 --> 00:02:13.802
So we know it's class ItemStore
extends EventEmitter.

36
00:02:19.410 --> 00:02:22.340
&gt;&gt; Steve Kinney: We'll have
a constructor that needs to call super.

37
00:02:22.340 --> 00:02:26.875
Cuz again, EventEmitter does a bunch
of self set-up to be able to store

38
00:02:26.875 --> 00:02:28.950
the listeners and stuff along those lines.

39
00:02:28.950 --> 00:02:33.470
So we have to call that and those green
lines right now are because it's a useless

40
00:02:33.470 --> 00:02:35.200
constructor cuz I'm not
doing anything in it.

41
00:02:35.200 --> 00:02:39.400
But I'm going to in a second, and
I wish it would leave me alone right now.

42
00:02:39.400 --> 00:02:46.440
All right, so the item store,
is gonna have some methods to it.

43
00:02:46.440 --> 00:02:49.750
So we know getItems is definitely the one,
okay, I need all of these items.

44
00:02:49.750 --> 00:02:52.430
So we'll return the items array.

45
00:02:52.430 --> 00:02:57.170
The other thing we're gonna do
is we got the app dispatcher.

46
00:02:57.170 --> 00:03:03.710
We'll say AppDispatcher.register(action
-) that comes in.

47
00:03:06.130 --> 00:03:07.550
And if you don't write
this on the construction,

48
00:03:07.550 --> 00:03:11.832
you could theoretically make this a method
and just like call the method here as

49
00:03:11.832 --> 00:03:16.340
well to register it in the constructor,
but I don't mind doing this.

50
00:03:18.280 --> 00:03:21.150
So we have the three kinds
of actions from before.

51
00:03:21.150 --> 00:03:23.330
We had add action, update.

52
00:03:23.330 --> 00:03:26.590
I'm sorry add item,
update item, remove item.

53
00:03:26.590 --> 00:03:28.638
So let's go ahead and we'll say,

54
00:03:28.638 --> 00:03:35.422
if action type,
&gt;&gt; Steve Kinney: Is ADD_NEW_ITEM.

55
00:03:37.569 --> 00:03:43.770
&gt;&gt; Steve Kinney: Let's make sure my
memory is good here ADD_NEW_ITEM, yep.

56
00:03:43.770 --> 00:03:44.894
We'll handle this in a second.

57
00:03:49.969 --> 00:03:51.466
&gt;&gt; Steve Kinney: Let's get
the other two in place.

58
00:03:54.588 --> 00:03:58.096
&gt;&gt; Steve Kinney: And
we'll call this one the UPDATE_ITEM.

59
00:04:00.941 --> 00:04:02.740
&gt;&gt; Steve Kinney: And
we'll say REMOVE_ITEM.

60
00:04:02.740 --> 00:04:06.030
Right, so these are three things that
can happen to items in the item store,

61
00:04:06.030 --> 00:04:10.050
they're either added, they're updated,
or they're removed, that make sense.

62
00:04:10.050 --> 00:04:14.442
So the other thing that's gonna come
in at any given one of these points is

63
00:04:14.442 --> 00:04:16.180
the action.item, right?

64
00:04:16.180 --> 00:04:21.060
We saw that it was the changed one,
if toggle was the action creator,

65
00:04:21.060 --> 00:04:22.700
we get the item, itself.

66
00:04:22.700 --> 00:04:27.120
If it was removed, then we get
the new item, if it is the new item.

67
00:04:27.120 --> 00:04:29.520
So, what I'm gonna do is I'm
gonna create a bunch of methods.

68
00:04:29.520 --> 00:04:32.570
I could do these all theoretically,
in these conditionals.

69
00:04:32.570 --> 00:04:38.280
During the break, I was reprimanded for
not using switch statements.

70
00:04:39.690 --> 00:04:40.368
I regret nothing.

71
00:04:40.368 --> 00:04:42.509
You can't make me.

72
00:04:46.134 --> 00:04:48.705
&gt;&gt; Steve Kinney: So we have addItem,
which will be the items, and

73
00:04:48.705 --> 00:04:53.050
this should look very familiar from what
we're currently doing in application.

74
00:04:54.680 --> 00:04:56.760
One of the reasons I'm not
running over and copy and

75
00:04:56.760 --> 00:04:58.320
pasting is I don't wanna
switch files too much.

76
00:04:58.320 --> 00:05:01.210
And at this point I have written this app
so many times, and done this pattern so

77
00:05:01.210 --> 00:05:02.970
many times that I can just do it by heart.

78
00:05:02.970 --> 00:05:05.870
But we could theoretically go
into application and copy and

79
00:05:05.870 --> 00:05:06.590
paste some of this logic.

80
00:05:06.590 --> 00:05:10.700
And that is probably an equally good idea.

81
00:05:10.700 --> 00:05:12.847
So we'll say this.omit change,
whenever we do that.

82
00:05:17.943 --> 00:05:20.959
&gt;&gt; Steve Kinney: That said,
since I am cowboy coding, so

83
00:05:20.959 --> 00:05:24.074
maybe better be on the lookout for typos.

84
00:05:24.074 --> 00:05:25.735
Cool, we've got updateItem.

85
00:05:27.815 --> 00:05:30.843
&gt;&gt; Steve Kinney: This will be
the updated item in this case.

86
00:05:30.843 --> 00:05:33.978
Because I'm gonna iterate
through all the items again.

87
00:05:33.978 --> 00:05:35.805
Remember, I was mapping
through all of them and

88
00:05:35.805 --> 00:05:37.277
just replacing the one that changed.

89
00:05:40.537 --> 00:05:42.320
&gt;&gt; Steve Kinney: Cool, so let's try that.

90
00:05:42.320 --> 00:05:43.480
So we'll say items, again,

91
00:05:43.480 --> 00:05:48.385
that's the one kind of in the top
level scope there on line 6.

92
00:05:48.385 --> 00:05:54.785
And we're gonna replace it with,
&gt;&gt; Steve Kinney: Items.map,

93
00:05:54.785 --> 00:05:58.832
go through all the items,
&gt;&gt; Steve Kinney: And

94
00:05:58.832 --> 00:06:03.291
if the,
&gt;&gt; Steve Kinney: item.id ===

95
00:06:03.291 --> 00:06:08.053
updatedItem.id,
&gt;&gt; Steve Kinney: Or does not equal it,

96
00:06:08.053 --> 00:06:11.480
it doesn't, like really
the condition can go either way.

97
00:06:11.480 --> 00:06:13.360
So if doesn't equal just return that item,

98
00:06:13.360 --> 00:06:16.630
otherwise we're gonna
return the updated item.

99
00:06:16.630 --> 00:06:21.140
So effectively, we're returning new array
with the item that we're looking for,

100
00:06:21.140 --> 00:06:23.440
replace with the updated one, very cool.

101
00:06:23.440 --> 00:06:26.288
And then what do we need to do
whenever we change the items array?

102
00:06:29.130 --> 00:06:32.360
&gt;&gt; Steve Kinney: Tell the world,
yeah we need to emit('change').

103
00:06:32.360 --> 00:06:35.380
A lot of times you will see
this pulled into a constant so

104
00:06:35.380 --> 00:06:36.820
that you can't mess it up.

105
00:06:36.820 --> 00:06:37.940
That's a very smart idea.

106
00:06:39.050 --> 00:06:44.299
And we'll have removeItem(itemToRemove),

107
00:06:49.536 --> 00:06:50.323
&gt;&gt; Steve Kinney: filter,

108
00:06:52.450 --> 00:06:54.532
&gt;&gt; Steve Kinney: And we'll filter out,

109
00:06:54.532 --> 00:06:58.020
we want true stays in, false leaves.

110
00:06:58.020 --> 00:07:03.237
So we'll say item.id,
&gt;&gt; Steve Kinney: It'll

111
00:07:03.237 --> 00:07:06.639
be true if it is not the right id.

112
00:07:06.639 --> 00:07:09.472
So this will keep all the existing ones,
and

113
00:07:09.472 --> 00:07:15.627
then we this.emit
&gt;&gt; Steve Kinney: ('change').

114
00:07:15.627 --> 00:07:18.663
So now we can modify this,
right, an action comes in,

115
00:07:18.663 --> 00:07:22.491
we change this array as it needs to
get changed, either adding them,

116
00:07:22.491 --> 00:07:26.040
updating them or removing them,
and then we tell the world.

117
00:07:26.040 --> 00:07:30.071
The other thing we need to do is just,
&gt;&gt; Steve Kinney: Export default.

118
00:07:35.830 --> 00:07:39.026
&gt;&gt; Steve Kinney: Cool, you might be
wondering if I'm just making a single

119
00:07:39.026 --> 00:07:44.060
instance in exporting it, why didn't I
just use a plain old JavaScript object?

120
00:07:44.060 --> 00:07:46.850
Mostly cuz I wanted to do inherit
from event emitter, right?

121
00:07:46.850 --> 00:07:49.210
And I could, theoretically,
extend a event emitter and

122
00:07:49.210 --> 00:07:53.760
all those kind of things and
I can construct an object like that.

123
00:07:53.760 --> 00:07:56.148
But since I do want to like
inherit all of its methods,

124
00:07:56.148 --> 00:07:58.922
I'm just gonna create class and
instantiate it, all right.

