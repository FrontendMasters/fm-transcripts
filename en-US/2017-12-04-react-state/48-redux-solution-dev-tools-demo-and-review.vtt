WEBVTT

1
00:00:02.924 --> 00:00:04.190
&gt;&gt; Steve Kinney: All right, very cool.

2
00:00:04.190 --> 00:00:09.470
So this is a version wired up with React,
obviously React,

3
00:00:09.470 --> 00:00:12.610
also Redux, React and Redux together.

4
00:00:12.610 --> 00:00:15.076
And so, this is the Redux DevTools.

5
00:00:15.076 --> 00:00:19.130
And I wanna point something out,
as we look at the code,

6
00:00:19.130 --> 00:00:21.410
as I can start manipulating
this application.

7
00:00:21.410 --> 00:00:26.040
I can mark something off, and you can
see that every event is getting logged.

8
00:00:26.040 --> 00:00:29.200
So I can toggle one, I can remove,

9
00:00:29.200 --> 00:00:34.540
I can untoggle another one,
Mark All as Unpacked.

10
00:00:34.540 --> 00:00:39.090
And one thing you'll notice as I check
out the tools is I can jump back

11
00:00:39.090 --> 00:00:41.360
through the state of the application.

12
00:00:41.360 --> 00:00:45.190
And play through the events that happened,
of course, through my application.

13
00:00:45.190 --> 00:00:48.522
And that's because we have this
idea of an immutable state trade,

14
00:00:48.522 --> 00:00:50.850
which is a series of events occurred,
right?

15
00:00:50.850 --> 00:00:54.619
This is one of the boons
of functional programming,

16
00:00:54.619 --> 00:00:58.740
the tree went in, the action went in,
a new one came out.

17
00:00:58.740 --> 00:01:02.670
But we can keep track of the old ones,
and we can move back and forth.

18
00:01:02.670 --> 00:01:07.140
So let's review
the implementation in Redux, but

19
00:01:07.140 --> 00:01:08.760
then let's add something really cool.

20
00:01:08.760 --> 00:01:14.350
Let's go ahead and add an undo and
a redo button to our application.

21
00:01:14.350 --> 00:01:19.520
Let's actually implement this time
traveling feature in our application for

22
00:01:19.520 --> 00:01:20.880
our users to use as well.

23
00:01:20.880 --> 00:01:24.450
So they remove one, after you remove
an item, that's it, game over.

24
00:01:24.450 --> 00:01:28.120
It's gone until you refresh the page and
just reload that array.

25
00:01:28.120 --> 00:01:33.550
But, [LAUGH] as we start using a local
storage, or something along those lines.

26
00:01:33.550 --> 00:01:37.070
We might want the ability
to add it back in.

27
00:01:37.070 --> 00:01:41.129
So we're gonna implement undo and redo,
to kinda get this feature in there.

28
00:01:41.129 --> 00:01:45.036
And we'll kind of touch upon some of the
Redux implementations that we just did in

29
00:01:45.036 --> 00:01:46.650
the last exercise along the way.

30
00:01:46.650 --> 00:01:50.053
All right, so I'm gonna flip over here.

31
00:01:50.053 --> 00:01:53.878
So I'm on this branch called Redux,
which is just, you are in Redux Base,

32
00:01:53.878 --> 00:01:57.800
which had the actions and reducers, and
this has our things kinda wired up.

33
00:01:57.800 --> 00:01:59.428
And so let's take a look at those,

34
00:01:59.428 --> 00:02:02.979
and then we're gonna have to modify
them in order to support undo and redo.

35
00:02:02.979 --> 00:02:06.034
Cuz we're gonna have to change the way
we think about managing the state in our

36
00:02:06.034 --> 00:02:06.840
application.

37
00:02:06.840 --> 00:02:11.800
Cuz right now we replace the tree
with the new one, but ideally,

38
00:02:11.800 --> 00:02:13.964
if we wanted to bring back an old one,
we're gonna have to store it.

39
00:02:13.964 --> 00:02:17.610
So we have to make some changes and
touch a bunch of pieces of the code base.

40
00:02:17.610 --> 00:02:21.680
But let's take a quick look at
what we have to start out with.

41
00:02:21.680 --> 00:02:26.548
So we have the PackedItemsContainer,
which is grabbing the toggleItem and

42
00:02:26.548 --> 00:02:28.840
removeItem actions.

43
00:02:28.840 --> 00:02:30.940
And then it is going ahead,

44
00:02:30.940 --> 00:02:36.300
and just taking all of the items off
of state, as well as the filter text.

45
00:02:38.050 --> 00:02:42.800
And it's filtering through all of them,
it's getting the filter.packedItems, and

46
00:02:42.800 --> 00:02:44.666
that's how it's figuring out.

47
00:02:44.666 --> 00:02:47.510
Go find all of the ones
that are packed and

48
00:02:47.510 --> 00:02:48.980
also see if it includes the filter text.

49
00:02:48.980 --> 00:02:50.760
So I actually have the filter wired up.

50
00:02:50.760 --> 00:02:52.940
You might only have the item.packed.

51
00:02:52.940 --> 00:02:54.580
And that's so
you can just see the packed items.

52
00:02:54.580 --> 00:02:56.830
But this also includes the ability
to have the filter in there.

53
00:02:58.280 --> 00:03:00.880
And then I have the ability
to check off and remove,

54
00:03:00.880 --> 00:03:05.470
which were from those presentational
components, that's why I named them that.

55
00:03:07.180 --> 00:03:11.644
The filter container is simply grabbing
that filter.unpackedItemsFilter or

56
00:03:11.644 --> 00:03:13.870
packedItems for the other one.

57
00:03:13.870 --> 00:03:17.140
And it's dispatching an update
UnpackedItemsFilter with the value

58
00:03:17.140 --> 00:03:19.430
that's now in the input
field whenever it changes.

59
00:03:20.884 --> 00:03:25.170
The newItemContainer, again, this is
what we talked about before, right?

60
00:03:25.170 --> 00:03:27.114
For updating the state
of that input field,

61
00:03:27.114 --> 00:03:28.961
did I need to send it
to Redux all the time?

62
00:03:28.961 --> 00:03:30.026
Well it depends,

63
00:03:30.026 --> 00:03:33.940
if it is truly an ephemeral state
that you don't care about, no.

64
00:03:33.940 --> 00:03:38.278
I'm not gonna implement undo
on typing in the input field,

65
00:03:38.278 --> 00:03:41.675
the operating system
has that under control.

66
00:03:41.675 --> 00:03:44.780
But if I wanted to do some
of this more advanced stuff,

67
00:03:44.780 --> 00:03:47.970
one you can do stuff like this
in regular Redux as well.

68
00:03:47.970 --> 00:03:50.980
But If I wanted to implement this
why I have a lot of this logic,

69
00:03:50.980 --> 00:03:52.330
it might make sense.

70
00:03:52.330 --> 00:03:53.390
Again, it's about this trade off.

71
00:03:53.390 --> 00:03:57.740
So it's in direction,
buy you additional functionality, or

72
00:03:57.740 --> 00:03:59.520
just consistency, go for it.

73
00:03:59.520 --> 00:04:02.650
But I'm not gonna tell you that
there is a, always do this,

74
00:04:02.650 --> 00:04:04.900
never do this rule, in this case.

75
00:04:04.900 --> 00:04:06.955
So I get the updateNewItemValue.

76
00:04:06.955 --> 00:04:09.849
I will get the addNewItem for
when they hit the Submit button, and

77
00:04:09.849 --> 00:04:11.490
I use the bindActionCreators here.

78
00:04:11.490 --> 00:04:15.567
So just send both the, onSubmit or
the addNewItem when it's submitted, and

79
00:04:15.567 --> 00:04:18.590
then the updated item value and
the input field changes.

80
00:04:20.440 --> 00:04:24.977
Very cool, but again, our mission right
now is we wanna implement undo and

81
00:04:24.977 --> 00:04:26.642
redo in this application.

