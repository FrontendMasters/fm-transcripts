WEBVTT

1
00:00:02.708 --> 00:00:07.331
&gt;&gt; Steve Kinney: So
what we wanna do is we want to wire up

2
00:00:07.331 --> 00:00:12.100
the,
&gt;&gt; Steve Kinney: Let's do the number of

3
00:00:12.100 --> 00:00:15.997
people container, right we might just
stick with one for now just to see.

4
00:00:15.997 --> 00:00:21.762
So what we'll do is we will pull in,
&gt;&gt; Steve Kinney: This

5
00:00:21.762 --> 00:00:25.655
connect function,
&gt;&gt; Steve Kinney: From

6
00:00:25.655 --> 00:00:29.937
react-redux.
&gt;&gt; Steve Kinney: If you ever get mixed up

7
00:00:29.937 --> 00:00:31.464
and type in redux react,

8
00:00:31.464 --> 00:00:36.670
you will join legions of other people
who do the same thing, it's okay.

9
00:00:36.670 --> 00:00:42.870
So we have connect, and
connect is going to wrap a component.

10
00:00:42.870 --> 00:00:45.400
It's basically that higher
order component pattern,

11
00:00:45.400 --> 00:00:49.770
that we saw yesterday, just kinda
bundled up really nicely for us.

12
00:00:49.770 --> 00:00:52.600
And what connect does,
we wanna export the container, so

13
00:00:52.600 --> 00:00:56.681
export default,
&gt;&gt; Steve Kinney: connect, and

14
00:00:56.681 --> 00:01:02.740
connect basically we have these
high order component functions.

15
00:01:02.740 --> 00:01:05.998
Before this actually creates
a higher component function, so

16
00:01:05.998 --> 00:01:07.477
it's one level above that.

17
00:01:07.477 --> 00:01:10.712
And it takes two functions that are put
together which is one called, and

18
00:01:10.712 --> 00:01:14.278
you can technically call this whatever
you want cuz you're gonna create them.

19
00:01:14.278 --> 00:01:17.421
mapStateToPrompts and

20
00:01:17.421 --> 00:01:22.218
mapDispatchToProps.
&gt;&gt; Steve Kinney: And

21
00:01:22.218 --> 00:01:24.922
you see these red lines cuz
we have not created these,

22
00:01:24.922 --> 00:01:29.083
we have to create these, and basically,
you have that giant state tree, right?

23
00:01:29.083 --> 00:01:34.678
A given component possibly doesn't care
of that specific about that entire stage,

24
00:01:34.678 --> 00:01:37.790
it only cares about
a specific piece of it.

25
00:01:37.790 --> 00:01:40.516
So mapStateToProps allows
you to take the entire tree,

26
00:01:40.516 --> 00:01:44.350
just pluck off the pieces that you care
about, and pass them to the component.

27
00:01:44.350 --> 00:01:45.977
One reason to do this,
if the tree is very large,

28
00:01:45.977 --> 00:01:47.380
you don't wanna deal with the rest of it.

29
00:01:47.380 --> 00:01:51.159
And two is props re-render the components,
so the less you pass in,

30
00:01:51.159 --> 00:01:53.780
you're not gonna have needless re-renders.

31
00:01:53.780 --> 00:01:57.360
And then mapDispatchToProps
creates an object with,

32
00:01:57.360 --> 00:02:00.641
remember we bound those
action creators before?

33
00:02:00.641 --> 00:02:04.057
It takes that and
passes it in, as well, right.

34
00:02:04.057 --> 00:02:08.375
So basically, it creates a set of props
which are the state that you wanna have

35
00:02:08.375 --> 00:02:10.930
and the actions that you wanna pass in.

36
00:02:10.930 --> 00:02:13.120
And it gets ready to receive a component,

37
00:02:13.120 --> 00:02:16.260
that will then wrap that in
a high order component pattern,

38
00:02:16.260 --> 00:02:21.230
so you will have that ready to go, so
it will also take in some component.

39
00:02:21.230 --> 00:02:25.850
We're gonna say Input right now cuz this
is the number of people container, so

40
00:02:25.850 --> 00:02:35.153
we'll import that.
&gt;&gt; Steve Kinney: Input from'../,

41
00:02:37.594 --> 00:02:40.489
&gt;&gt; Steve Kinney: components/Input.

42
00:02:40.489 --> 00:02:43.548
So now I have no squiggly red line there,
and

43
00:02:43.548 --> 00:02:49.600
what I do have two squiggly red lines for
is mapStateToProps and mapDispatchToProps.

44
00:02:51.180 --> 00:02:55.405
One easy way to fix that
is to simply create them.

45
00:02:55.405 --> 00:03:03.927
Now they're not squiggly.
&gt;&gt; Steve Kinney: This will error

46
00:03:03.927 --> 00:03:07.193
at run time, because this is not what
these things are expecting to spit out,

47
00:03:07.193 --> 00:03:08.520
which is nothingness.

48
00:03:08.520 --> 00:03:12.790
But this is effectively what we
need to do to create this pattern.

49
00:03:12.790 --> 00:03:17.230
So mapStateToProps takes the state.
&gt;&gt; Steve Kinney: And

50
00:03:17.230 --> 00:03:22.155
we'll return a new object,
&gt;&gt; Steve Kinney: I mean,

51
00:03:22.155 --> 00:03:25.520
if you wanna pass the entire state
reach through, you could do that.

52
00:03:25.520 --> 00:03:28.569
But ideally,
we just wanna pick out one thing, so

53
00:03:28.569 --> 00:03:33.535
if we look at the input component.
&gt;&gt; Steve Kinney: We can see

54
00:03:33.535 --> 00:03:38.026
the input expects a label, but
it also expects this value, and

55
00:03:38.026 --> 00:03:41.346
that's probably what we
care about the most.

56
00:03:41.346 --> 00:03:43.475
So what we'll do is
we'll return an object,

57
00:03:44.686 --> 00:03:45.822
&gt;&gt; Steve Kinney: That is gonna have

58
00:03:45.822 --> 00:03:51.574
a value.
&gt;&gt; Steve Kinney: And the value can be,

59
00:03:51.574 --> 00:03:58.939
in this case, State.numberOfPeople.
&gt;&gt; Steve Kinney: Right so,

60
00:03:58.939 --> 00:04:03.165
now it'll create a prop that's called
value that will be mapped to that piece of

61
00:04:03.165 --> 00:04:04.057
item and state.

62
00:04:04.057 --> 00:04:09.229
And that's really all that
this one cares about,

63
00:04:09.229 --> 00:04:13.908
and the other thing
we'll do is we'll import

64
00:04:13.908 --> 00:04:20.735
updateNumberOfPeople.
&gt;&gt; Steve Kinney: From

65
00:04:20.735 --> 00:04:26.433
the actions.
&gt;&gt; Steve Kinney: And

66
00:04:26.433 --> 00:04:32.428
we want to go ahead and
say mapDispatchToProps.

67
00:04:32.428 --> 00:04:36.226
And that will receive the stores
dispatch method, that we saw

68
00:04:36.226 --> 00:04:41.120
before that passing the result of an
object, or an action creator to dispatch,

69
00:04:41.120 --> 00:04:45.980
kicks off the entire process, so
this is the ability to dispatch things.

70
00:04:45.980 --> 00:04:47.967
And again, we wanna return an object,

71
00:04:47.967 --> 00:04:50.992
it's gonna take the object
return from mapStateToProps.

72
00:04:50.992 --> 00:04:55.043
And the object that we return from
mapDispatchToProps combine them and

73
00:04:55.043 --> 00:04:58.149
pass them in as the props to
whatever component you give

74
00:04:58.149 --> 00:05:01.979
it.
&gt;&gt; Steve Kinney: All right, so now we'll

75
00:05:01.979 --> 00:05:07.944
just say return object that is, I thinks
its call onClick if I'm not mistaking,

76
00:05:07.944 --> 00:05:12.708
or onChange on the input.
&gt;&gt; Steve Kinney: And

77
00:05:12.708 --> 00:05:15.910
that will be,
&gt;&gt; Steve Kinney: That will

78
00:05:15.910 --> 00:05:20.084
get a value.
&gt;&gt; Steve Kinney: And

79
00:05:20.084 --> 00:05:24.153
it'll do updateNumberOfPeople
with that value.

80
00:05:29.376 --> 00:05:30.427
&gt;&gt; Steve Kinney: I can call it either one,

81
00:05:30.427 --> 00:05:31.988
I just have to call it the same thing.

82
00:05:31.988 --> 00:05:35.054
So now this creates an object
that has a value, and

83
00:05:35.054 --> 00:05:38.642
onChange, and
we're gonna pass it into the input field.

84
00:05:38.642 --> 00:05:40.784
We know that the input also takes a label,

85
00:05:40.784 --> 00:05:44.470
I would probably choose to do that
when I use this container component.

86
00:05:44.470 --> 00:05:47.810
I would still pass in a label,
that prop will also be combined as well.

87
00:05:47.810 --> 00:05:50.925
So the props you pass to
the component that we're creating as

88
00:05:50.925 --> 00:05:53.502
well as these things from
redux will be passed in.

89
00:05:53.502 --> 00:05:57.567
One thing I wanna point your attention
to real quick and then we'll review it,

90
00:05:57.567 --> 00:06:01.380
is this creates a function that
then waits for a component.

91
00:06:01.380 --> 00:06:05.723
And what this allows you to do is,
this could be like your with current user.

92
00:06:05.723 --> 00:06:10.466
And then you could use that same container
that you are creating now, and use it for

93
00:06:10.466 --> 00:06:12.940
multiple presentational components.

94
00:06:12.940 --> 00:06:16.303
Which is a really powerful pattern that's
why it's broken up like this rather than

95
00:06:16.303 --> 00:06:17.467
having three arguments in.

96
00:06:17.467 --> 00:06:21.590
You can pass in the first two and
have a thing ready to wrap any component.

97
00:06:21.590 --> 00:06:25.970
In this state and set of actions, and
then you can pass multiple components.

98
00:06:25.970 --> 00:06:30.610
We don't have a use case for this example
but think about a current user, right?

99
00:06:30.610 --> 00:06:33.730
There might be multiple presentation
components that wanna give the current

100
00:06:33.730 --> 00:06:40.947
user to, so you could do something like,
&gt;&gt; Steve Kinney: withCurrentUser and

101
00:06:40.947 --> 00:06:44.606
imagine that this is all stuff for
the current user.

102
00:06:44.606 --> 00:06:46.432
And then we could say later,

103
00:06:52.760 --> 00:06:55.659
&gt;&gt; Steve Kinney: Profile = withCurrentUser

104
00:06:55.659 --> 00:06:59.528
and then our User Profile component.

105
00:06:59.528 --> 00:07:01.149
And then if we wanted it for

106
00:07:01.149 --> 00:07:06.102
something else, like a profile edit,
we could use the same with current user.

107
00:07:06.102 --> 00:07:08.029
So we can create this thing ones,
we can use it for

108
00:07:08.029 --> 00:07:10.020
multiple presentational components.

109
00:07:10.020 --> 00:07:10.963
All right, very cool,

110
00:07:10.963 --> 00:07:14.185
now let's actually discuss some of the
theory now that we've seen it in action.

