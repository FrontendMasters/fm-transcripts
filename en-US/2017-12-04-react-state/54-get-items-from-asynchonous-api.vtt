WEBVTT

1
00:00:03.105 --> 00:00:03.790
&gt;&gt; Steve Kinney: It's in the database.

2
00:00:03.790 --> 00:00:06.640
What we wanna do is now, when we load
the page, we wanna get all of them.

3
00:00:06.640 --> 00:00:08.350
This one's gonna be
a little bit different.

4
00:00:08.350 --> 00:00:12.790
Because getting all of them
when we initially load the page

5
00:00:12.790 --> 00:00:15.200
is the only one that's not
gonna be triggered by a user.

6
00:00:15.200 --> 00:00:19.350
All of these other action creators
are gonna fire when the user does a thing.

7
00:00:19.350 --> 00:00:24.233
This is the only one that we
fire programatically, right?

8
00:00:24.233 --> 00:00:25.437
Does anybody remember how we fire

9
00:00:25.437 --> 00:00:28.010
an action?
&gt;&gt; Speaker 2: Dispatch.

10
00:00:28.010 --> 00:00:29.000
&gt;&gt; Steve Kinney: Dispatch, we call story

11
00:00:29.000 --> 00:00:30.800
of dispatch and
we give it the action creator.

12
00:00:30.800 --> 00:00:34.050
So we just need to do that when
the application starts up.

13
00:00:34.050 --> 00:00:36.810
There's a bunch of places
that you could do it.

14
00:00:36.810 --> 00:00:40.380
If it's gonna happen on a component
that is lazily loaded onto the page,

15
00:00:40.380 --> 00:00:43.020
you should definitely do
it on a componented mount.

16
00:00:43.020 --> 00:00:45.290
This is the core part of our application.

17
00:00:45.290 --> 00:00:46.260
I'm going to keep it simple.

18
00:00:46.260 --> 00:00:48.779
I'm basically gonna do it when
I create the store, right?

19
00:00:48.779 --> 00:00:53.640
But depending on the nature of your UI,
you're gonna make different decisions.

20
00:00:53.640 --> 00:00:56.160
All right, very cool.

21
00:00:56.160 --> 00:00:59.436
So let's go ahead and
we'll go to the store index, and

22
00:00:59.436 --> 00:01:01.300
we need to create this action.

23
00:01:01.300 --> 00:01:02.636
We don't actually have an action,

24
00:01:02.636 --> 00:01:04.870
we've been relying on ones in
the default state actually.

25
00:01:04.870 --> 00:01:10.011
So let's go back to the Items actions and
let's go ahead and make a getAllItems.

26
00:01:15.960 --> 00:01:18.112
&gt;&gt; Steve Kinney: That's not really gonna

27
00:01:18.112 --> 00:01:22.826
need an argument but
it is going to call Api.getAll and

28
00:01:22.826 --> 00:01:32.308
that is going to come back.
&gt;&gt; Steve Kinney: Cool,

29
00:01:32.308 --> 00:01:37.217
and we'll need to create
an update all items as well,

30
00:01:37.217 --> 00:01:40.440
cuz I don't think I have that one.

31
00:01:40.440 --> 00:01:43.241
But I think if I'm smart,

32
00:01:49.434 --> 00:01:51.820
&gt;&gt; Steve Kinney: Nope, I need to make it,

33
00:01:51.820 --> 00:01:56.488
so we'll export, const UPDATE_ALL_ITEMS.

34
00:02:01.553 --> 00:02:04.479
&gt;&gt; Steve Kinney: Cool, let's update that

35
00:02:04.479 --> 00:02:10.331
reducer real quick,
if we find that one we'll say,

36
00:02:10.331 --> 00:02:15.653
if (action type === UPDATE_ALL_ITEMS)

37
00:02:15.653 --> 00:02:20.080
then we want to return action.items.

38
00:02:20.080 --> 00:02:21.650
So this will replace the state,

39
00:02:21.650 --> 00:02:24.660
we've gotten stuff back from the server,
whatever was in the UI we're replacing,

40
00:02:24.660 --> 00:02:28.560
this could be like a hard
refresh of data from the server.

41
00:02:28.560 --> 00:02:33.630
All right cool, so
now we can go back into our items actions.

42
00:02:33.630 --> 00:02:38.532
And so we get all the items and

43
00:02:38.532 --> 00:02:45.884
then this is going to
be return dispatch and

44
00:02:45.884 --> 00:02:50.592
then we will say dispatch.

45
00:03:01.213 --> 00:03:03.263
&gt;&gt; Steve Kinney: type: UPDATE_ALL_ITEMS

46
00:03:03.263 --> 00:03:07.880
and the value is going to be the items
we got back from the server.

47
00:03:09.790 --> 00:03:12.110
Cool, so we have this in place.

48
00:03:12.110 --> 00:03:14.367
This is what we'll do
when the store loads.

49
00:03:14.367 --> 00:03:16.601
So I have index store and

50
00:03:16.601 --> 00:03:22.546
I'm basically going to say,
&gt;&gt; Steve Kinney: Or

51
00:03:22.546 --> 00:03:23.450
to pull in that action.

52
00:03:23.450 --> 00:03:28.310
We'll say import getAllItems

53
00:03:35.611 --> 00:03:36.422
&gt;&gt; Steve Kinney: Right, so

54
00:03:36.422 --> 00:03:39.941
that is destructured, it's a named export.

55
00:03:39.941 --> 00:03:41.332
And we'll say,

56
00:03:43.930 --> 00:03:49.321
&gt;&gt; Steve Kinney:
store.dispatch(getAllItems()).

57
00:03:51.120 --> 00:03:52.070
All right, here's hoping.

58
00:03:54.150 --> 00:03:56.420
Hey, we pulled it out.

59
00:03:56.420 --> 00:03:59.730
So now when we connect, we immediately
dispatch giving all the items,

60
00:03:59.730 --> 00:04:02.460
that triggers the API request, right?

61
00:04:02.460 --> 00:04:05.160
Which then dispatches a thunk, which,

62
00:04:05.160 --> 00:04:09.690
when that promise resolves, dispatches
the final action to update the UI.

63
00:04:09.690 --> 00:04:15.043
Right, so now we can add an item and
we can get all of them from the server.

64
00:04:15.043 --> 00:04:17.639
We just have a few more that
we need to implement, and

65
00:04:17.639 --> 00:04:19.711
it's gonna be smooth sailing from here.

