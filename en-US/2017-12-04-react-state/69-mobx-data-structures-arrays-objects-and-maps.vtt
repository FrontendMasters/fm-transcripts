WEBVTT

1
00:00:02.227 --> 00:00:03.623
&gt;&gt; Steve Kinney: So
we've seen it with classes.

2
00:00:03.623 --> 00:00:07.921
We could also observe objects or arrays.

3
00:00:07.921 --> 00:00:10.973
And my favorite part about using
observable with arrays, is that you can

4
00:00:10.973 --> 00:00:13.937
push stuff onto the array, and
that is a legit away to render UI again.

5
00:00:13.937 --> 00:00:18.447
You don't have to like concat things on or
spread operator all over the place.

6
00:00:18.447 --> 00:00:19.774
You can actually just push things on.

7
00:00:19.774 --> 00:00:23.782
It basically takes all of
the methods that arrays have and

8
00:00:23.782 --> 00:00:27.802
that objects have and
does immutable versions of those.

9
00:00:27.802 --> 00:00:30.277
So you can push something on,
it will have the same object, but

10
00:00:30.277 --> 00:00:32.772
it will have triggered the observable
to let everything know.

11
00:00:32.772 --> 00:00:38.105
So that code of honor that we walk in with
react is like never mutate state, right?

12
00:00:38.105 --> 00:00:41.404
Because the way Java Script works
is if you change an array, and

13
00:00:41.404 --> 00:00:44.402
push something that has still
the same array and memory.

14
00:00:44.402 --> 00:00:45.851
And like React and Ember and

15
00:00:45.851 --> 00:00:49.640
all those things have a really hard
time knowing the array has changed.

16
00:00:49.640 --> 00:00:50.986
Versus if you replace the arrays.

17
00:00:50.986 --> 00:00:54.001
Like this is a totally different array,
I should rerender.

18
00:00:54.001 --> 00:00:55.494
With this, you can actually put stuff on.

19
00:00:55.494 --> 00:00:59.573
And because the observable can let
things know that things have changed,

20
00:00:59.573 --> 00:01:03.611
you can actually do all the habits
you've been working so hard to break.

21
00:01:03.611 --> 00:01:06.820
There's one caveat, maps are really cool.

22
00:01:06.820 --> 00:01:12.661
Does anyone not know what
a map is in JavaScript?

23
00:01:12.661 --> 00:01:17.368
I'm going to make believe someone
said yes that they don't know.

24
00:01:17.368 --> 00:01:22.168
Which is, a map is very much
like an object except objects

25
00:01:22.168 --> 00:01:25.270
keys can only be strings or numbers.

26
00:01:25.270 --> 00:01:28.884
A map can have anything as the key.

27
00:01:28.884 --> 00:01:32.044
It can have an object as the key,
it could have a function as the key,

28
00:01:32.044 --> 00:01:33.772
it could have another map as the key.

29
00:01:33.772 --> 00:01:38.331
But they're just like a slightly
more flexible version of objects.

30
00:01:38.331 --> 00:01:41.376
And the reason I bring it up,
they are very cool.

31
00:01:41.376 --> 00:01:44.868
Just FYI, if you need to, rather than,
what is the string version of this?

32
00:01:44.868 --> 00:01:48.212
If you wanna associate it another value,
you should definitely use a map.

33
00:01:48.212 --> 00:01:53.794
Is that they use a set, and
I get syntax automatically.

34
00:01:53.794 --> 00:01:58.580
If you use observable with a regular,
plain old JavaScript object,

35
00:01:58.580 --> 00:02:01.231
and then you add a new property later?

36
00:02:01.231 --> 00:02:05.052
Remember how we saw that when we used
observable or extended observable, and

37
00:02:05.052 --> 00:02:08.896
iterate it over all the keys, and that
made observable, so you add a new key.

38
00:02:08.896 --> 00:02:11.122
That's just a new key,
it's not been observed.

39
00:02:11.122 --> 00:02:15.267
A map will actually be able to go through
the process and make that also observable.

40
00:02:15.267 --> 00:02:19.911
So if you plan on adding new keys
to this object later, use a map.

41
00:02:19.911 --> 00:02:23.149
If you're not ever gonna change
the object's keys, you can use an object.

42
00:02:23.149 --> 00:02:28.050
But which is a little caveat that
I think you'll be happy to know.

43
00:02:28.050 --> 00:02:31.540
And just to kinda like tie some
things together, under the hood,

44
00:02:31.540 --> 00:02:33.000
the way this is working is,

45
00:02:33.000 --> 00:02:37.268
instead of having properties we're
having thunks all over the place, right?

46
00:02:37.268 --> 00:02:41.759
These are, we're getting different
functions that can either resolve to

47
00:02:41.759 --> 00:02:44.474
a previous thing or
alert different things.

48
00:02:44.474 --> 00:02:46.875
Very cool, so
we've looked at mobx in isolation.

49
00:02:46.875 --> 00:02:51.081
We've even seen that we can
effectively re-render UI with it.

50
00:02:51.081 --> 00:02:54.766
Let's look at how that
actually works with React.

