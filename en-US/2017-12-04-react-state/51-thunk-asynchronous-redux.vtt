WEBVTT

1
00:00:03.355 --> 00:00:06.821
&gt;&gt; Steve Kinney: One thing that we haven't
talked about in this entire time is what

2
00:00:06.821 --> 00:00:09.340
do we do about asynchronous code, right?

3
00:00:09.340 --> 00:00:11.910
We have just been storing
stuff in an array.

4
00:00:11.910 --> 00:00:16.150
And it's been blissfully easy cuz we
haven't had to talk to a server or

5
00:00:16.150 --> 00:00:20.090
a database or anything along those lines
or local storage or anything asynchronous.

6
00:00:21.250 --> 00:00:25.170
And one thing you might have been
thinking about which is I keep saying

7
00:00:25.170 --> 00:00:26.270
redux is great.

8
00:00:26.270 --> 00:00:29.900
It's just functions and
objects and objects just go in.

9
00:00:29.900 --> 00:00:33.660
Okay, like how do we get the object to
the store if we're waiting on an API?

10
00:00:34.960 --> 00:00:39.392
So the problem with redux, it's not really
a problem is that out of the box, it's

11
00:00:39.392 --> 00:00:43.824
expecting everything to be what's called
a pure function which is stuff goes in,

12
00:00:43.824 --> 00:00:46.156
stuff comes out without any side effects.

13
00:00:46.156 --> 00:00:50.667
A side effect is basically,
if you do anything that was not passed in

14
00:00:50.667 --> 00:00:54.803
as an argument in what you spit our,
your function is impure.

15
00:00:54.803 --> 00:00:58.655
So if you console log,
you're writing somewhere else,

16
00:00:58.655 --> 00:01:01.140
your function is now impure.

17
00:01:01.140 --> 00:01:03.960
More importantly for us,
if you make a network request,

18
00:01:03.960 --> 00:01:06.820
that is something that just
happened to be out of scope.

19
00:01:06.820 --> 00:01:08.180
You just called it and you're using that.

20
00:01:08.180 --> 00:01:10.240
You're no longer pure in this case.

21
00:01:10.240 --> 00:01:15.195
And so redux actually, out of the box,
doesn't have a way for you to do async.

22
00:01:16.805 --> 00:01:19.095
So we need to come up with a pattern for
doing this.

23
00:01:19.095 --> 00:01:22.065
And so, we're gonna use
these things called thunks.

24
00:01:22.065 --> 00:01:25.335
And when I say that redux doesn't
have a way for you to do async,

25
00:01:25.335 --> 00:01:30.935
I wanna defend redux for a second which is
redux thunk was originally in redux and

26
00:01:30.935 --> 00:01:33.265
they pulled it out of the library
because you don't always need it.

27
00:01:33.265 --> 00:01:36.210
So it's not like they never thought
that you might need to use asynchronous

28
00:01:36.210 --> 00:01:36.810
JavaScript.

29
00:01:36.810 --> 00:01:39.060
It was in there, it just got pulled out.

30
00:01:39.060 --> 00:01:40.990
So if you need it,
you can pull it back in.

31
00:01:40.990 --> 00:01:42.520
But for the people who don't need it,

32
00:01:42.520 --> 00:01:46.430
we didn't need it up until now,
you don't get it as a bonus thing, right?

33
00:01:46.430 --> 00:01:50.620
And so the idea that we would have to do
asynchronous code was always in redux.

34
00:01:50.620 --> 00:01:53.520
It's just a bonus thing
that you can add in now.

35
00:01:53.520 --> 00:01:54.209
So what is a thunk?

36
00:01:55.310 --> 00:01:58.350
A thunk is a function returned
from another function.

37
00:01:58.350 --> 00:02:01.480
So we've actually been quietly
using thunks at different points.

38
00:02:01.480 --> 00:02:03.600
When we use connect,
that returned a function.

39
00:02:03.600 --> 00:02:06.380
That was technically a thunk.

40
00:02:06.380 --> 00:02:10.125
Here's a very great illustration of
that which is the first function,

41
00:02:10.125 --> 00:02:11.630
it's just a function.

42
00:02:11.630 --> 00:02:14.500
When it returns a function,
that function we're going to call a thunk.

43
00:02:16.130 --> 00:02:17.150
So why is this useful?

44
00:02:19.030 --> 00:02:22.330
The major idea is that you're returning
this other function that's going to be

45
00:02:22.330 --> 00:02:24.400
called later, right?

46
00:02:24.400 --> 00:02:26.680
We want to execute stuff later, well when?

47
00:02:28.015 --> 00:02:31.345
Hm, all right, we've been very
quiet about asynchronous code

48
00:02:31.345 --> 00:02:36.225
because Redux only accepts objects, but
we might not have that object ready.

49
00:02:36.225 --> 00:02:40.515
We might say, hey, I'm getting something
from the server right now, I don't have

50
00:02:40.515 --> 00:02:44.825
that object for you, here's a function,
why don't you give it to the dispatcher?

51
00:02:44.825 --> 00:02:48.230
And when I have something back
from the server, I'll go ahead and

52
00:02:48.230 --> 00:02:50.170
finish this up, right?

53
00:02:50.170 --> 00:02:51.550
And so we need to use this middleware,

54
00:02:51.550 --> 00:02:53.440
cuz Redux out of the box is not ready for
this.

55
00:02:53.440 --> 00:02:57.760
So the middleware's like, I'll take
that function, and I'll call it, and

56
00:02:57.760 --> 00:03:00.210
I'll wait for that to dispatch the action.

57
00:03:00.210 --> 00:03:04.700
So it's pretty easy to bring in, it's
just an MPM library called redux-thunk.

58
00:03:04.700 --> 00:03:07.390
Again, it used to be part of Redux,
it was pulled out.

59
00:03:07.390 --> 00:03:10.150
And it's a middleware that allows
a user to dispatch a function

60
00:03:10.150 --> 00:03:11.020
Instead of just an object.

61
00:03:11.020 --> 00:03:14.230
So now you can dispatch functions and
objects.

62
00:03:14.230 --> 00:03:19.030
And the goal is that that
function that you dispatch should

63
00:03:19.030 --> 00:03:22.680
eventually dispatch an object once
it hears back from the server.

64
00:03:22.680 --> 00:03:26.790
So this is a normal action creator,
makes sense, returns an object.

65
00:03:26.790 --> 00:03:28.770
We've seen this a whole bunch of times so
far.

66
00:03:28.770 --> 00:03:32.954
This is a thunk action creator.

67
00:03:32.954 --> 00:03:35.764
So there's a little more lines of
code here but let's talk about it.

68
00:03:35.764 --> 00:03:42.030
So instead of returning the object
that gets dispatched, right?

69
00:03:42.030 --> 00:03:45.850
Cuz we saw when we were
working with Redux by hand,

70
00:03:45.850 --> 00:03:48.430
we said store dispatch and
we passed it this object.

71
00:03:48.430 --> 00:03:51.590
So instead,
we're gonna pass it a function,

72
00:03:51.590 --> 00:03:55.250
that will later dispatch the object,
so here we'll do this API call.

73
00:03:55.250 --> 00:03:59.260
This could be $AJAX, it could be AXIOS,
it could be indexDB,

74
00:03:59.260 --> 00:04:04.920
it's just a promise that we're going to,
it's gonna have all of our items.

75
00:04:04.920 --> 00:04:07.960
When that resolves,
then we'll go ahead and

76
00:04:07.960 --> 00:04:10.330
dispatch that event that
was previously synchronous.

77
00:04:10.330 --> 00:04:15.200
So we'll make the API call, we've got
the dispatcher from the store, we can now

78
00:04:15.200 --> 00:04:20.700
dispatch the event and that'll get sent
to the reducer and everything's golden.

79
00:04:20.700 --> 00:04:25.472
And this is effectively what you
need to do to implement a kind of

80
00:04:25.472 --> 00:04:29.441
very simple version of
asynchronous code in Redux.

