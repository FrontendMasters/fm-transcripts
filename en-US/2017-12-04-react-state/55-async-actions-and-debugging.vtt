WEBVTT

1
00:00:03.910 --> 00:00:06.662
&gt;&gt; Steve Kinney: All right,
so, we have adding a new item.

2
00:00:06.662 --> 00:00:09.549
So, toggling a new item,
this is going to be,

3
00:00:09.549 --> 00:00:12.374
let's just take a look
at the API real quick.

4
00:00:16.414 --> 00:00:19.457
&gt;&gt; Steve Kinney: So we can update an item,
so we're still gonna have to manually,

5
00:00:19.457 --> 00:00:21.790
yeah we'll manually change
this one with a new item.

6
00:00:21.790 --> 00:00:25.482
So we need to send that along,
all right, so let's do that.

7
00:00:30.474 --> 00:00:34.422
&gt;&gt; Steve Kinney: toggleItem, I know
I'm gonna need this payload in here.

8
00:00:34.422 --> 00:00:40.388
And we'll go ahead and,
&gt;&gt; Steve Kinney: We're

9
00:00:40.388 --> 00:00:41.968
gonna take the whole
item since we're gonna.

10
00:00:45.091 --> 00:00:47.485
&gt;&gt; Steve Kinney: Which might need a little
bit more refactoring in a second, but

11
00:00:47.485 --> 00:00:48.170
we'll get to it.

12
00:00:48.170 --> 00:00:52.245
So we'll take in the item, and
we'll make the new updatedItem.

13
00:00:54.799 --> 00:00:58.677
&gt;&gt; Steve Kinney: Which will be a copy
of the item, as we've seen before.

14
00:00:58.677 --> 00:01:01.986
And then, packed being the opposite.

15
00:01:05.445 --> 00:01:07.687
&gt;&gt; Steve Kinney: And then,
what we'll do is we'll return,

16
00:01:12.448 --> 00:01:14.723
&gt;&gt; Steve Kinney: dispatch,

17
00:01:21.702 --> 00:01:23.094
&gt;&gt; Steve Kinney: Api.update, and

18
00:01:23.094 --> 00:01:25.791
we'll give it the updated item, and

19
00:01:25.791 --> 00:01:31.663
then when that succeeds,
&gt;&gt; Steve Kinney: We will go

20
00:01:31.663 --> 00:01:36.743
ahead in here and we will dispatch
toggleItem and then the new updatedItem.

21
00:01:41.847 --> 00:01:46.664
&gt;&gt; Steve Kinney: I think I have that
on my clipboard, type TOGGLE_ITEM.

22
00:01:51.286 --> 00:01:52.876
&gt;&gt; Steve Kinney: Is the updatedItem.

23
00:01:54.963 --> 00:01:58.517
&gt;&gt; Steve Kinney: Extra parenthesis,
so I can actually return that object.

24
00:02:01.329 --> 00:02:05.057
&gt;&gt; Steve Kinney: Cool, my suspicion
is that if my API was slightly off on

25
00:02:05.057 --> 00:02:09.930
the previous one, this one is also
going to break but then so is remove.

26
00:02:09.930 --> 00:02:12.694
So in a perfect world they're
not going to break, but

27
00:02:12.694 --> 00:02:14.670
I'm going to also implement remove.

28
00:02:14.670 --> 00:02:18.530
So that if I have to fix both of
these I can do it at the same time

29
00:02:18.530 --> 00:02:22.495
rather than jumping back and
forth, all right, very cool.

30
00:02:22.495 --> 00:02:27.207
So we'll grab,
&gt;&gt; Steve Kinney: This and

31
00:02:27.207 --> 00:02:34.277
now we would simply,
&gt;&gt; Steve Kinney: return dispatch.

32
00:02:39.688 --> 00:02:42.974
&gt;&gt; Steve Kinney: And
at this point we would do an api.delete.

33
00:02:45.737 --> 00:02:46.561
&gt;&gt; Steve Kinney: With the item.

34
00:02:50.405 --> 00:02:53.824
&gt;&gt; Steve Kinney: Cool, and
then when that has been successful,

35
00:02:53.824 --> 00:02:57.418
cuz it always will at this point,
will dispatch.

36
00:03:03.444 --> 00:03:06.545
&gt;&gt; Steve Kinney: All right,
here we need to dispatch this one as well.

37
00:03:17.515 --> 00:03:19.139
&gt;&gt; Steve Kinney: The extra parentheses.

38
00:03:19.139 --> 00:03:20.196
All right.

39
00:03:22.495 --> 00:03:24.309
&gt;&gt; Steve Kinney: Again sales pitch for

40
00:03:24.309 --> 00:03:28.846
a rainbow parentheses in
Visual Studio code big fan.

41
00:03:28.846 --> 00:03:35.464
All right, so, failed to compile we got ID
is not defined cuz we want the full item.

42
00:03:38.251 --> 00:03:42.404
&gt;&gt; Steve Kinney: All right and then
the mark all as packed, remember there was

43
00:03:42.404 --> 00:03:47.250
a fun API method that would just
basically mark them all as packed.

44
00:03:47.250 --> 00:03:49.154
So, let's go ahead and do that as well.

45
00:03:49.154 --> 00:03:56.096
And so again,
that is now going to return the func,

46
00:03:56.096 --> 00:04:02.076
that is gonna do Api.MarkAllAsUnpacked.

47
00:04:04.212 --> 00:04:12.862
&gt;&gt; Steve Kinney: And when that happens,
&gt;&gt; Steve Kinney: We'll go ahead and

48
00:04:12.862 --> 00:04:17.228
we'll dispatch,
&gt;&gt; Steve Kinney: type:

49
00:04:17.228 --> 00:04:19.760
MARK_ALL_AS_UNPACKED.

50
00:04:19.760 --> 00:04:23.952
All right so, chance that I've got to do a
little bit of change to the API because I

51
00:04:23.952 --> 00:04:26.542
was taking in IDs before,
and doing it there, but

52
00:04:26.542 --> 00:04:28.909
now I'm gonna have
the server do that stuff.

53
00:04:28.909 --> 00:04:33.345
Which makes sense, so
we'll go ahead and check that out.

54
00:04:36.179 --> 00:04:38.329
&gt;&gt; Steve Kinney: Adding and
showing should be fine,

55
00:04:38.329 --> 00:04:42.470
chances that it's not gonna work
when I try to check or uncheck.

56
00:04:42.470 --> 00:04:45.964
Let's just add one more,
wine, cheese, beer.

57
00:04:48.217 --> 00:04:51.792
&gt;&gt; Steve Kinney: Okay,
that does not work currently.

58
00:04:54.568 --> 00:05:00.440
&gt;&gt; Steve Kinney: Cool, so we'll go
ahead and take a look at the reducer.

59
00:05:00.440 --> 00:05:04.814
So we're gonna dispatch this item,
the full item in this case,

60
00:05:04.814 --> 00:05:08.307
cuz that is what I believe
that my API is expecting.

61
00:05:10.572 --> 00:05:15.115
&gt;&gt; Steve Kinney: Right, lets double check
this, yeah it's expecting the full item.

62
00:05:18.261 --> 00:05:19.788
&gt;&gt; Steve Kinney: It does
expect the ID in that case,

63
00:05:19.788 --> 00:05:22.381
let's actually switch that one back,
got overzealous.

64
00:05:37.001 --> 00:05:39.438
&gt;&gt; Steve Kinney: Only one tiny
difference between the two, not two.

65
00:05:39.438 --> 00:05:42.990
All right so we can remove or refresh.

66
00:05:48.093 --> 00:05:50.142
&gt;&gt; Steve Kinney: All right,
not really from the database, this is fun,

67
00:05:50.142 --> 00:05:51.150
we're having a good time.

68
00:05:52.360 --> 00:05:53.677
So we'll delete the ID.

69
00:06:00.914 --> 00:06:03.715
&gt;&gt; Steve Kinney: It is taking the full
one it's just pulling that off.

70
00:06:20.633 --> 00:06:22.466
&gt;&gt; Steve Kinney: All right,
so here's what we'll do.

71
00:06:22.466 --> 00:06:25.509
Let's see if remove works now.

72
00:06:36.747 --> 00:06:43.395
&gt;&gt; Speaker 2: Do item.Id, and
the Api.deleteItem.Id, no?

73
00:06:43.395 --> 00:06:44.196
&gt;&gt; Steve Kinney: No,
it's pointed off the item.

74
00:06:44.196 --> 00:06:48.030
I think at this point it is mostly,
I think removing from the database, nope.

75
00:06:49.920 --> 00:06:53.020
It's very good that I'm not getting
an error, other than this prop type,

76
00:06:53.020 --> 00:06:54.590
which is not helping me right now.

77
00:06:54.590 --> 00:06:58.711
All right, so we'll go ahead, let's
debug this together, it's gonna be fun.

78
00:06:58.711 --> 00:07:02.354
So, we're gonna delete the item, and so

79
00:07:02.354 --> 00:07:08.197
if I go in the API it is pulling the ID
off the full item that comes in.

80
00:07:08.197 --> 00:07:13.993
It should get all of them and then it
should set the new one in this case.

81
00:07:13.993 --> 00:07:17.453
But it looks like I'm not returning
the promise by accident, so

82
00:07:17.453 --> 00:07:18.809
I will fix that shortly.

83
00:07:26.645 --> 00:07:28.007
&gt;&gt; Steve Kinney: Nope.

84
00:07:28.007 --> 00:07:31.499
&gt;&gt; Speaker 2: Wait, yep, return await.

85
00:07:34.218 --> 00:07:36.944
&gt;&gt; Steve Kinney: It should still
delete it from the server though.

86
00:07:36.944 --> 00:07:37.722
&gt;&gt; Speaker 2: Yeah you are right.

87
00:07:37.722 --> 00:07:40.632
&gt;&gt; Steve Kinney: Cuz is the only like,
guess that I have in this case.

88
00:07:47.122 --> 00:07:48.144
&gt;&gt; Steve Kinney: So let's,

89
00:08:08.260 --> 00:08:09.130
&gt;&gt; Steve Kinney: So we're getting

90
00:08:09.130 --> 00:08:11.977
undefined test ten, all right,
so let's track that up.

91
00:08:11.977 --> 00:08:15.936
So if we start here we have the full item,
and

92
00:08:15.936 --> 00:08:19.477
I guess that's probably gonna be the,

93
00:08:33.524 --> 00:08:34.559
&gt;&gt; Steve Kinney: So
it's just the ID in this case.

94
00:08:36.639 --> 00:08:39.274
&gt;&gt; Steve Kinney: So let's go ahead and,

95
00:08:46.299 --> 00:08:47.077
&gt;&gt; Steve Kinney: Go with this.

96
00:08:50.502 --> 00:08:54.657
&gt;&gt; Steve Kinney: I'll change it
here cuz it'll just be the ID.

97
00:09:01.741 --> 00:09:03.843
&gt;&gt; Speaker 2: In your reducer, even ID.

98
00:09:03.843 --> 00:09:04.656
&gt;&gt; Steve Kinney: What's that?

99
00:09:04.656 --> 00:09:06.560
&gt;&gt; Speaker 2: In your reducer.

100
00:09:06.560 --> 00:09:09.460
&gt;&gt; Steve Kinney: Hold on I see,
items-actions, I got line 45,

101
00:09:09.460 --> 00:09:10.880
item is not defined.

102
00:09:10.880 --> 00:09:12.440
&gt;&gt; Speaker 2: Yeah, just one more.

103
00:09:12.440 --> 00:09:13.875
&gt;&gt; Steve Kinney: Got it, thanks.

104
00:09:13.875 --> 00:09:23.005
[LAUGH]
&gt;&gt; Steve Kinney: All right,

105
00:09:23.005 --> 00:09:26.894
so delete some AUI, and
it stays deleted, little bit of victory,

106
00:09:26.894 --> 00:09:29.194
we still gotta deal with the check box.

107
00:09:29.194 --> 00:09:34.519
So let's see what's going on there,
if I look at update item,

108
00:09:34.519 --> 00:09:39.480
it's expecting a full,
let's go back to the API.

109
00:09:39.480 --> 00:09:43.111
Look at the API, update,
I was expecting a full item and

110
00:09:43.111 --> 00:09:46.136
it's trying to go through and
fix all of them.

111
00:09:46.136 --> 00:09:49.860
So let's actually just change this one
real quick, and I'll update this one for

112
00:09:49.860 --> 00:09:51.023
everyone and push it up.

113
00:09:51.023 --> 00:09:54.460
So we'll just pull in the id,
cuz that's what we're getting.

114
00:09:57.008 --> 00:10:00.323
&gt;&gt; Steve Kinney: We actually need
the full updated item don't we?

115
00:10:00.323 --> 00:10:02.344
So let's actually get
the item in this case.

116
00:10:08.219 --> 00:10:09.759
&gt;&gt; Steve Kinney: All right cool, so

117
00:10:09.759 --> 00:10:14.700
we need to get the updated
item into this action creator.

118
00:10:14.700 --> 00:10:16.875
Where is this coming from?

119
00:10:19.221 --> 00:10:21.810
&gt;&gt; Steve Kinney: It's likely coming
from the item a component, right?

120
00:10:21.810 --> 00:10:24.738
They're gonna click on that check box,
we're gonna get the payload ready,

121
00:10:24.738 --> 00:10:27.170
it's gonna go to the action creator
which is gonna go to the API,

122
00:10:27.170 --> 00:10:28.996
which is probably what we
need to go look for it.

123
00:10:31.619 --> 00:10:35.436
&gt;&gt; Steve Kinney: So,
onCheckOff is getting passed in, so

124
00:10:35.436 --> 00:10:43.286
let's go to the,
&gt;&gt; Steve Kinney: So

125
00:10:43.286 --> 00:10:46.752
onCheckOff is getting
the ID at this point, and

126
00:10:46.752 --> 00:10:49.790
we really need to get the full item.

127
00:10:49.790 --> 00:10:51.318
So let's go ahead and,

128
00:11:03.139 --> 00:11:04.243
&gt;&gt; Steve Kinney: Well let's leave that one

129
00:11:04.243 --> 00:11:06.761
that we fixed earlier,
let's not get ahead of ourselves.

130
00:11:15.172 --> 00:11:19.236
&gt;&gt; Steve Kinney: So item,
full items will go from onCheckOff,

131
00:11:19.236 --> 00:11:22.062
let's go back and check again.

132
00:11:46.145 --> 00:11:47.585
&gt;&gt; Steve Kinney: All right,
here we've got the full,

133
00:11:49.605 --> 00:11:50.381
&gt;&gt; Steve Kinney: ItemList packed.

134
00:11:56.743 --> 00:11:58.263
&gt;&gt; Steve Kinney: So
we know that's changing the database cuz

135
00:11:58.263 --> 00:11:59.215
I've refreshed the page.

136
00:12:01.573 --> 00:12:04.742
&gt;&gt; Steve Kinney: It's moving, so let's
just follow this along and debug this.

137
00:12:04.742 --> 00:12:08.713
We're gonna dispatch the full item,
so let's go to the reducer

138
00:12:17.142 --> 00:12:19.118
&gt;&gt; Steve Kinney: Toggle item is,

139
00:12:19.118 --> 00:12:21.716
it's doing it twice so.

140
00:12:27.521 --> 00:12:30.018
&gt;&gt; Steve Kinney: So
if we find the one that we're looking for,

141
00:12:30.018 --> 00:12:35.784
we're gonna return,
&gt;&gt; Steve Kinney: action.item.

142
00:12:43.331 --> 00:12:47.997
&gt;&gt; Speaker 2: And it's action.item that
ID that you wanna test against on your-

143
00:12:47.997 --> 00:12:50.238
&gt;&gt; Steve Kinney: Yep, thank you.

144
00:12:57.344 --> 00:13:00.258
&gt;&gt; Steve Kinney: All right,
[LAUGH] we're successful, right?

145
00:13:00.258 --> 00:13:03.684
We had to do a little bit of refactoring,
but

146
00:13:03.684 --> 00:13:07.160
these will all persist they are saving.

147
00:13:07.160 --> 00:13:11.536
We are now asynchronous right,
everything is going to a thunk,

148
00:13:11.536 --> 00:13:16.816
the promises get executed, then we
dispatch the action that updates the UI.

149
00:13:16.816 --> 00:13:21.252
Right, now thunks are great,
because they're simple right,

150
00:13:21.252 --> 00:13:23.234
we had to do some debugging.

151
00:13:23.234 --> 00:13:27.142
But effectively the pattern before we hit
that part was, take the action that you're

152
00:13:27.142 --> 00:13:30.678
doing, do your asynchronous event,
and then dispatch the action, right?

153
00:13:30.678 --> 00:13:34.617
So it's really easy to get started
with thunks, install the middleware,

154
00:13:34.617 --> 00:13:38.307
just dispatch a function that
eventually dispatches the action, and

155
00:13:38.307 --> 00:13:41.250
all of a sudden you're ready for async.

156
00:13:41.250 --> 00:13:43.455
But, there are some problems with thunk.

