WEBVTT

1
00:00:03.202 --> 00:00:05.890
&gt;&gt; Steve Kinney: Okay, so we talked
about react, and we talked about redux.

2
00:00:05.890 --> 00:00:09.730
I do wanna round back to this mysterious
react-redux library that you saw me use

3
00:00:09.730 --> 00:00:12.000
with a bunch of methods that
I only partially explained.

4
00:00:13.660 --> 00:00:20.260
So good news is you effectively saw almost
all of it when we did that example.

5
00:00:20.260 --> 00:00:24.533
And so far that's even smaller than Redux.

6
00:00:24.533 --> 00:00:26.720
That it has basically two things in it.

7
00:00:26.720 --> 00:00:30.210
It has that provider component
that I got very hand wavy about.

8
00:00:30.210 --> 00:00:34.023
And it has this connect function, which is
used for creating higher order components.

9
00:00:34.023 --> 00:00:38.440
You could theoretically write
connect yourself, right?

10
00:00:38.440 --> 00:00:41.590
Some of you have probably
tried to connect yourself.

11
00:00:41.590 --> 00:00:42.620
It's pretty straightforward.

12
00:00:42.620 --> 00:00:46.380
Take these two objects, combine them,
and return a function waiting for

13
00:00:46.380 --> 00:00:47.850
a presentational component.

14
00:00:47.850 --> 00:00:51.847
There is some black magic happening
in there, that we'll talk about, and

15
00:00:51.847 --> 00:00:53.695
that's related to the provider.

16
00:00:53.695 --> 00:00:57.540
That's where things get a little squarely,
but we'll discuss that.

17
00:00:57.540 --> 00:00:58.940
So that's it.

18
00:00:58.940 --> 00:01:00.400
Let's talk about connect first.

19
00:01:01.600 --> 00:01:07.260
So we saw before we have mapStateToProps,
mapDispatchToProps,

20
00:01:07.260 --> 00:01:11.010
and yes it's a higher-order component
pattern and you pick which things you want

21
00:01:11.010 --> 00:01:15.090
from the store, you can try transform
the data if you want here to, right?

22
00:01:15.090 --> 00:01:20.430
So we just took the number of
people value from the store,

23
00:01:20.430 --> 00:01:22.510
but you could theoretically
transform that data if you want.

24
00:01:22.510 --> 00:01:26.718
So let's say you had a to do list and
you had different visibility settings,

25
00:01:26.718 --> 00:01:30.333
like only show me the available ones,
only show me the done ones or

26
00:01:30.333 --> 00:01:34.769
the undone ones or something along those
lines, only show me the overdue ones.

27
00:01:34.769 --> 00:01:39.327
You could theoretically have the array
of all of the to dos In your store,

28
00:01:39.327 --> 00:01:43.812
you can then also have maybe like
what visibility filter they're set to

29
00:01:43.812 --> 00:01:47.580
whether it's done, or
currently to do, or overdue.

30
00:01:47.580 --> 00:01:51.100
And maybe you do the transformation,
you have to think about a map,

31
00:01:51.100 --> 00:01:54.500
a map is transforming an array a lot of
times right We're taking this entire state

32
00:01:54.500 --> 00:01:59.220
tree We're transforming it into what
the presentational component needs, so

33
00:01:59.220 --> 00:02:04.320
we could theoretically take the filter,
take the array of items and

34
00:02:04.320 --> 00:02:10.030
create the subset of items that
the component is expecting, right?

35
00:02:10.030 --> 00:02:13.399
So we can just pluck stuff the state
tree but we can also transform it.

36
00:02:15.370 --> 00:02:18.720
And then mapDispatchToProps,
which is just putting together

37
00:02:18.720 --> 00:02:23.080
the action creators that your component
is going to need to change things.

38
00:02:23.080 --> 00:02:27.410
There's a chance that your application
doesn't need both of these or

39
00:02:27.410 --> 00:02:29.000
your component doesn't need both of these.

40
00:02:29.000 --> 00:02:33.840
If it's just displaying state, you
might not pass that second argument in.

41
00:02:33.840 --> 00:02:37.600
If it's just a button you might
not have any states to give it,

42
00:02:37.600 --> 00:02:38.890
that is totally fine.

43
00:02:38.890 --> 00:02:41.400
You can omit mapDispatchToProps.

44
00:02:41.400 --> 00:02:43.910
You have to put something in
the first argument in order to

45
00:02:43.910 --> 00:02:47.584
provide a second argument, otherwise
the second argument is the first argument.

46
00:02:47.584 --> 00:02:48.784
So, you can pass in null or

47
00:02:48.784 --> 00:02:51.689
undefined to get yourself to
the second argument in that case.

48
00:02:53.800 --> 00:02:55.190
Yep, you mix these two together and

49
00:02:55.190 --> 00:02:59.488
pass them as props to a presentational
component, we saw this before,

50
00:02:59.488 --> 00:03:03.710
this will just theoretically,
item should be pluralized here.

51
00:03:03.710 --> 00:03:07.220
This will pick just the items
off the state tree.

52
00:03:08.490 --> 00:03:11.503
This would pass the entire
state tree through.

53
00:03:11.503 --> 00:03:13.277
So, you would pass the entire tree in.

54
00:03:13.277 --> 00:03:17.566
This would theoretically filter
all of the packed items.

55
00:03:17.566 --> 00:03:21.270
It's strange that I'm using
these examples and slides again,

56
00:03:21.270 --> 00:03:25.317
it's almost like you're going to
need it soon, very weird, cool.

57
00:03:25.317 --> 00:03:30.990
So then dispatch received the current
stores dispatch method and

58
00:03:30.990 --> 00:03:34.450
allows you to create an object of methods
that are eventually gonna call it.

59
00:03:34.450 --> 00:03:36.840
So you can do it by hand, like this,

60
00:03:36.840 --> 00:03:41.750
or our good friend bindActionCreators
from Redux, right?

61
00:03:41.750 --> 00:03:46.119
You can give it this object of keys and
functions, I'm using the,

62
00:03:46.119 --> 00:03:50.499
again the ESX short hand notation
to just call them the same thing.

63
00:03:50.499 --> 00:03:53.740
And then you pass into dispatch and
it will create that object for you.

64
00:03:53.740 --> 00:03:57.970
So whichever one makes you happier,
you don't have to use bindActionCreators,

65
00:03:57.970 --> 00:04:01.490
you might not want to if you want to
do some changes to things in there.

66
00:04:01.490 --> 00:04:05.340
But you can also, if you find yourself,
it's tedious to create an object with

67
00:04:05.340 --> 00:04:08.910
the same methods as the action names and
that passing the values through and

68
00:04:08.910 --> 00:04:10.780
calling dispatch you can
use bindActionCreator,

69
00:04:10.780 --> 00:04:13.670
it's just a helper method
that we wrote earlier.

70
00:04:13.670 --> 00:04:15.370
So we can see that's a very
simple helper method.

