WEBVTT

1
00:00:07.806 --> 00:00:09.678
&gt;&gt; Steve Kinney: So let's,
let's go ahead, and we'll do that.

2
00:00:11.740 --> 00:00:16.756
&gt;&gt; Steve Kinney: And
I'm going to go into the store index.

3
00:00:16.756 --> 00:00:24.990
And I'm going to,
&gt;&gt; Steve Kinney: Yeah, let's pull it in.

4
00:00:24.990 --> 00:00:27.710
We'll say, import.

5
00:00:27.710 --> 00:00:30.633
I'm probably not gonna go
all the way with this,

6
00:00:30.633 --> 00:00:33.570
because I'm gonna need
the saga in place first.

7
00:00:33.570 --> 00:00:37.840
So I'm actually going to hastily abort
that decision, now that I think about it.

8
00:00:37.840 --> 00:00:41.260
The first thing I really should do is

9
00:00:41.260 --> 00:00:44.650
I need to separate this out
into two different actions.

10
00:00:44.650 --> 00:00:49.130
Like right now, the thunk combines the,
hey, you want us to do this thing, and

11
00:00:49.130 --> 00:00:50.510
I'm gonna resolve cuz it's done.

12
00:00:50.510 --> 00:00:54.300
And we wanna say,
they click the button to go ahead and

13
00:00:54.300 --> 00:00:58.830
initiate the fetch, and now we've got
all the items and we wanna do the thing.

14
00:00:58.830 --> 00:01:01.820
So effectively what we're gonna
do is we're gonna unthunk this.

15
00:01:01.820 --> 00:01:05.360
That's a new word,
you're allowed to use it.

16
00:01:05.360 --> 00:01:09.922
So let's go ahead into item actions and
here we have a thunk from earlier.

17
00:01:09.922 --> 00:01:12.106
We're going to start by unthinking it.

18
00:01:15.291 --> 00:01:17.530
&gt;&gt; Steve Kinney: It's not really
getting all the items anymore.

19
00:01:19.060 --> 00:01:20.052
So we will rename it.

20
00:01:22.976 --> 00:01:27.948
&gt;&gt; Steve Kinney: Let's call it, or
we'll call this one updateAllItems.

21
00:01:32.028 --> 00:01:34.637
&gt;&gt; Steve Kinney: Which is we've
gotten them at this point,

22
00:01:34.637 --> 00:01:36.093
we wanna update the UI.

23
00:01:39.953 --> 00:01:41.790
&gt;&gt; Steve Kinney: Naming things is hard.

24
00:01:41.790 --> 00:01:45.457
All right, so
we've got the updateAllItems, and

25
00:01:45.457 --> 00:01:48.451
that's gonna get the items passed to it.

26
00:01:48.451 --> 00:01:53.605
All right, so here we are back to
a totally normal action creator.

27
00:01:55.790 --> 00:01:58.806
&gt;&gt; Steve Kinney: So the other thing we
need to do is the other side at that,

28
00:01:58.806 --> 00:02:02.081
which is, hey, the user in this
[INAUDIBLE] we're gonna do it

29
00:02:02.081 --> 00:02:05.650
from the store itself like we
did in the previous example.

30
00:02:05.650 --> 00:02:09.210
But like theoretically there could
be like our refresh button or

31
00:02:09.210 --> 00:02:10.940
some kind of user request.

32
00:02:10.940 --> 00:02:14.261
But we're gonna have the one that
triggers the request itself.

33
00:02:14.261 --> 00:02:15.646
This one I may call export const.

34
00:02:19.553 --> 00:02:20.203
&gt;&gt; Steve Kinney: Fetch item.

35
00:02:24.001 --> 00:02:27.321
&gt;&gt; Steve Kinney: And fetch item just
wants to get all of them, right?

36
00:02:27.321 --> 00:02:29.489
And what it's gonna do
is it's just gonna be,

37
00:02:35.071 --> 00:02:36.570
&gt;&gt; Steve Kinney: I'll just call it fetch.

38
00:02:36.570 --> 00:02:39.120
I don't have a constant for
that right now.

39
00:02:39.120 --> 00:02:42.230
All right, so now our actions
is back to totally synchronous.

40
00:02:42.230 --> 00:02:44.330
You know what we just got back?

41
00:02:44.330 --> 00:02:46.390
Easy testing, right?

42
00:02:46.390 --> 00:02:51.960
We just won back easy testing for
our action creators, which is pretty cool.

43
00:02:53.740 --> 00:02:56.360
That said,
this doesn't like do anything anymore.

44
00:02:56.360 --> 00:02:59.430
Now it just dispatches some actions and

45
00:02:59.430 --> 00:03:01.858
this one isn't even
technically in my reducer.

46
00:03:01.858 --> 00:03:05.202
So like [LAUGH] this one
can get called all day,

47
00:03:05.202 --> 00:03:08.551
nothing's gonna happen, so that's nice.

48
00:03:08.551 --> 00:03:11.968
Let's actually to ahead and
before we hook, like I'm really,

49
00:03:11.968 --> 00:03:16.180
I want to hook the saga up to the store,
but I don't have a saga yet, right?

50
00:03:16.180 --> 00:03:19.326
So I'm gonna go ahead and make a saga,
that seems the responsible thing to do.

51
00:03:19.326 --> 00:03:24.462
Make a saga.js.

52
00:03:24.462 --> 00:03:27.387
All right, so
I need to pull in some of the helpers.

53
00:03:29.634 --> 00:03:31.560
&gt;&gt; Steve Kinney: And so
what I'm gonna do is I'm gonna import.

54
00:03:32.630 --> 00:03:33.500
If you remember,

55
00:03:33.500 --> 00:03:36.810
all was like all of the different
events that you wanted to listen to.

56
00:03:38.620 --> 00:03:43.410
And we have call, which is go ahead and
make some asynchronous requests, and

57
00:03:43.410 --> 00:03:46.530
then kick off the generator
when the promise resolves.

58
00:03:46.530 --> 00:03:50.228
Put is dispatch a new action, and
takeEvery is basically a listing for

59
00:03:50.228 --> 00:03:51.366
all of these events.

60
00:03:51.366 --> 00:03:58.017
And this is gonna be
from redux-saga/effects.

61
00:04:00.817 --> 00:04:02.606
&gt;&gt; Steve Kinney: Because
these are all side effects,

62
00:04:02.606 --> 00:04:06.530
they're not things that are gonna passed
in, they are things that are happening

63
00:04:06.530 --> 00:04:09.199
outside of the function that
were kind of tuning into.

64
00:04:09.199 --> 00:04:11.980
All right, and so the other thing
I want to grab is that API,

65
00:04:11.980 --> 00:04:13.606
quote unquote that we had before.

66
00:04:15.634 --> 00:04:20.629
&gt;&gt; Steve Kinney: Api from ../lib/api.

67
00:04:23.020 --> 00:04:24.600
All right, so we have that.

68
00:04:24.600 --> 00:04:27.790
And we do want that update all items.

69
00:04:27.790 --> 00:04:28.840
The update all items, remember,

70
00:04:28.840 --> 00:04:32.230
we received from the network,
we want to display it in the UI.

71
00:04:32.230 --> 00:04:35.726
So we're gonna need to like,
when we've received from the network,

72
00:04:35.726 --> 00:04:39.593
we're gonna need to trigger that action,
so we import the update all items.

73
00:04:41.668 --> 00:04:45.786
&gt;&gt; Steve Kinney: ../action/items-actions.

74
00:04:45.786 --> 00:04:47.940
All right, very cool.

75
00:04:47.940 --> 00:04:51.610
So now we have,
like remember like in react,

76
00:04:51.610 --> 00:04:53.045
we have that one place that's we start.

77
00:04:53.045 --> 00:04:56.645
The application component,
the provider component.

78
00:04:56.645 --> 00:04:58.755
We need that starting saga.

79
00:04:58.755 --> 00:05:04.515
So conventionally you should call it
Root Saga, call it whatever you want,

80
00:05:04.515 --> 00:05:08.388
you shouldn't but like,
and that is a generator.

81
00:05:11.685 --> 00:05:14.677
&gt;&gt; Steve Kinney: Root saga,
and all that's gonna do.

82
00:05:22.705 --> 00:05:26.398
&gt;&gt; Steve Kinney: Is it's gonna call a
fetch items from API generated that I have

83
00:05:26.398 --> 00:05:27.815
not written yet.

84
00:05:27.815 --> 00:05:30.440
So let's go ahead and do that.

85
00:05:30.440 --> 00:05:32.010
So export default, all right.

86
00:05:32.010 --> 00:05:36.800
So all of a sudden we
receive a fetch item action.

87
00:05:36.800 --> 00:05:39.830
We should probably fetch the items, right?

88
00:05:39.830 --> 00:05:44.365
So export a function we will

89
00:05:44.365 --> 00:05:48.907
call fetch items from API.

90
00:05:54.013 --> 00:05:56.398
&gt;&gt; Steve Kinney: All right, and
what that's going to do is,

91
00:06:01.397 --> 00:06:02.573
&gt;&gt; Steve Kinney: It's going to go head and

92
00:06:02.573 --> 00:06:08.371
it's gonna take every,
&gt;&gt; Steve Kinney: Of the fetch items.

93
00:06:10.030 --> 00:06:10.974
Actions get fired.

94
00:06:10.974 --> 00:06:17.710
And it's gonna make an API request,
which we will also have to write.

95
00:06:19.170 --> 00:06:23.550
And this is kind of cool if you think
about it, cuz it's effectively waiting for

96
00:06:23.550 --> 00:06:25.800
future things to happen, right?

97
00:06:25.800 --> 00:06:27.540
This is like, looking into the future.

98
00:06:27.540 --> 00:06:32.300
Like when these happen,
I want to take that and handle it, and

99
00:06:32.300 --> 00:06:34.820
pass it over to this make API request.

100
00:06:34.820 --> 00:06:38.010
So it's kind of like looking
into not only asynchronous, but

101
00:06:38.010 --> 00:06:42.140
it is also constantly waiting and
observing the state of our application.

102
00:06:43.820 --> 00:06:46.444
All right, we have one more to make and

103
00:06:46.444 --> 00:06:50.805
that is our,
&gt;&gt; Steve Kinney: Make API request that we

104
00:06:50.805 --> 00:06:51.409
saw earlier.

105
00:06:54.167 --> 00:06:57.018
&gt;&gt; Steve Kinney: And with most things
a sync, the reason we have to make so

106
00:06:57.018 --> 00:07:01.040
many generators is once you're a
synchronous, that's a way of life for you.

107
00:07:01.040 --> 00:07:05.950
It's mixing a sync code and synchronous
code is always a recipe for sadness, so

108
00:07:05.950 --> 00:07:09.960
we tend to want to avoid
that whenever possible.

109
00:07:09.960 --> 00:07:12.370
So here we'll say the items.

110
00:07:12.370 --> 00:07:15.610
And again,
if you've used a sync wave before,

111
00:07:15.610 --> 00:07:20.551
this will look familiar, like I'm
normally used to typing await here,

112
00:07:20.551 --> 00:07:25.331
but this is user generator, so
we'll use yield call to Api.getAll.

113
00:07:28.635 --> 00:07:31.643
&gt;&gt; Steve Kinney: So we'll pause,
we'll wait for that promise to resolve.

114
00:07:31.643 --> 00:07:36.880
We'll take the result of that promise,
and we'll pass it to the items variable.

115
00:07:36.880 --> 00:07:41.370
And then we can go ahead and
hand things back off

116
00:07:41.370 --> 00:07:46.350
to the very like normal plane
object redux world, right?

117
00:07:46.350 --> 00:07:50.510
We've separated out all of this
squirliness from that very pure and

118
00:07:50.510 --> 00:07:53.000
simple redux that we got used
to in the very beginning.

119
00:07:53.000 --> 00:08:01.320
We'll go ahead and yield and we'll put
the updateAllItems with the items.

120
00:08:02.980 --> 00:08:05.110
All right, cool!

121
00:08:05.110 --> 00:08:06.490
So now we have saga.

122
00:08:06.490 --> 00:08:08.113
We have those very simple actions.

123
00:08:08.113 --> 00:08:13.821
All we need to do is take this saga and
install it as middleware in redux.

124
00:08:17.987 --> 00:08:18.555
&gt;&gt; Steve Kinney: All right.

125
00:08:21.179 --> 00:08:24.445
&gt;&gt; Steve Kinney: We're gonna leave the
thunk in here because the rest of my app

126
00:08:24.445 --> 00:08:27.660
is thunks, and
I'm not gonna be hasty here.

127
00:08:27.660 --> 00:08:35.246
So bring in create saga
middleware from redux saga.

128
00:08:37.862 --> 00:08:41.140
&gt;&gt; Steve Kinney: And cool, and so
then we'll also import that saga file.

129
00:08:48.439 --> 00:08:50.690
&gt;&gt; Steve Kinney: So now we have
the ability to create saga middleware.

130
00:08:50.690 --> 00:08:52.330
We have the saga file.

131
00:08:52.330 --> 00:08:54.810
Let's go ahead and
create that saga middleware.

132
00:08:57.480 --> 00:08:58.640
Let's do it after the imports.

133
00:08:58.640 --> 00:08:59.269
I don't want to get yelled at.

134
00:09:04.387 --> 00:09:09.230
&gt;&gt; Steve Kinney: And we'll say saga
middleware let's create saga middleware.

135
00:09:09.230 --> 00:09:12.480
And the last thing to do is
put it alongside its buddy.

136
00:09:12.480 --> 00:09:15.230
Remember when we cleared that logware
before and each piece of middleware was

137
00:09:15.230 --> 00:09:18.130
responsive for kicking off the next
piece of middleware, right?

138
00:09:18.130 --> 00:09:19.500
We're taking advantage of that here.

139
00:09:20.750 --> 00:09:24.440
So they can live happily together.

140
00:09:24.440 --> 00:09:28.740
And finally, we can comment this out,

141
00:09:28.740 --> 00:09:34.170
because that thunk doesn't exist anymore.

142
00:09:34.170 --> 00:09:37.913
We unthunked it if you recall,
and so we'll say saga middleware.

143
00:09:42.381 --> 00:09:46.322
&gt;&gt; Steve Kinney: SagaMiddleware,
and kick off the generator.

144
00:09:50.319 --> 00:09:51.651
&gt;&gt; Steve Kinney: All right,
here's it's open.

145
00:10:03.228 --> 00:10:04.509
&gt;&gt; Steve Kinney: Nope.

146
00:10:04.509 --> 00:10:08.122
All right, I'm gonna take

147
00:10:08.122 --> 00:10:12.550
a-
&gt;&gt; Speaker 2: [INAUDIBLE]

148
00:10:12.550 --> 00:10:14.650
Saw how you created action?

149
00:10:14.650 --> 00:10:15.340
The yield all.

150
00:10:15.340 --> 00:10:16.340
&gt;&gt; Speaker 3: Yeah, yield all.

151
00:10:16.340 --> 00:10:17.030
&gt;&gt; Speaker 2: The rootsaga [INAUDIBLE].

152
00:10:17.030 --> 00:10:18.540
&gt;&gt; Steve Kinney: Yeah,
I was like, I'll do that later.

153
00:10:18.540 --> 00:10:24.440
The thing about promising to do stuff
later is that you actually have to do it.

154
00:10:27.162 --> 00:10:27.662
&gt;&gt; Steve Kinney: All right.

155
00:10:39.593 --> 00:10:40.922
&gt;&gt; Steve Kinney: I'm gonna go back and
take my five minutes.

156
00:10:43.775 --> 00:10:47.100
&gt;&gt; Steve Kinney: So we're not getting to
the point where we make the API request.

157
00:10:47.100 --> 00:10:48.248
So that's the next thing I need to handle.

158
00:10:55.635 --> 00:10:57.004
&gt;&gt; Steve Kinney: What is it called now,
fetch items?

159
00:11:04.272 --> 00:11:07.501
&gt;&gt; Steve Kinney: If you don't ever fire
the action, it's not gonna happen, right?

160
00:11:12.550 --> 00:11:15.253
&gt;&gt; Steve Kinney: Let's verify that before
we get really confident that it was

161
00:11:15.253 --> 00:11:16.370
something so simple.

162
00:11:16.370 --> 00:11:18.216
Like we're all like, yeah,
yeah, that's what it was.

163
00:11:18.216 --> 00:11:20.520
I'm even like, that's totally what it was.

164
00:11:33.238 --> 00:11:36.769
&gt;&gt; Steve Kinney: So we're really excited
and we implemented everything and

165
00:11:36.769 --> 00:11:39.740
then we refreshed the page and
it didn't happen.

166
00:11:41.350 --> 00:11:45.540
It was everyone's favorite kind of
debugging where no error is thrown.

167
00:11:45.540 --> 00:11:50.284
And you just have to basically
try stuff out until you find it.

168
00:11:50.284 --> 00:11:54.728
And what we realized is that
originally we had this.

169
00:11:57.386 --> 00:11:59.538
&gt;&gt; Steve Kinney: Which is
we dispatched the event and

170
00:11:59.538 --> 00:12:02.280
then we started up the saga generator.

171
00:12:02.280 --> 00:12:04.690
So that event was long gone.

172
00:12:04.690 --> 00:12:06.880
By the time the saga generator started,

173
00:12:06.880 --> 00:12:09.350
which meant everything
theoretically worked.

174
00:12:10.530 --> 00:12:15.085
But if a tree falls and no one's around to
hear it, does it actually make a sound and

175
00:12:15.085 --> 00:12:16.550
stuff along those lines.

176
00:12:16.550 --> 00:12:20.409
So if we swap the saga, make sure that

177
00:12:20.409 --> 00:12:26.120
we start the saga first and
then we swap over.

178
00:12:26.120 --> 00:12:29.480
We'll see that we actually have
everything from our database.

179
00:12:29.480 --> 00:12:34.080
Full disclosure,
that also happened when I was practicing.

180
00:12:34.080 --> 00:12:37.560
And you'd think [LAUGH] I would have
been a little quicker on that one.

181
00:12:37.560 --> 00:12:39.260
But, yeah, so order is really important.

182
00:12:39.260 --> 00:12:41.220
We wanna make sure that
the generator is running and

183
00:12:41.220 --> 00:12:44.600
taking every one of them
before we dispatch it, right?

184
00:12:44.600 --> 00:12:46.300
And this is unique in this case, right?

185
00:12:46.300 --> 00:12:49.320
Because this is when we're
doing directly on start up.

186
00:12:49.320 --> 00:12:53.320
If we had moved this to componented mount,
we'll the store would have started up,

187
00:12:53.320 --> 00:12:54.870
the generator would have started up, and

188
00:12:54.870 --> 00:12:57.580
then the component would have mounted and
we wouldn't have found this issue.

189
00:12:57.580 --> 00:13:02.270
If this was based on a user event, this
wouldn't have been an issue that came up.

190
00:13:02.270 --> 00:13:06.270
But it's like in this unique situation
where we are immediately dispatching one.

191
00:13:06.270 --> 00:13:10.250
That we find ourselves
which is in order of.

192
00:13:10.250 --> 00:13:12.820
It's interesting for something
that is in a synchronous code and

193
00:13:12.820 --> 00:13:14.880
pulling events from the future.

194
00:13:14.880 --> 00:13:18.240
We can pull them from the future,
it's from the past that is the problem.

195
00:13:18.240 --> 00:13:19.092
Cool.

196
00:13:19.092 --> 00:13:25.176
So at this point we've got
a basic saga architecture.

