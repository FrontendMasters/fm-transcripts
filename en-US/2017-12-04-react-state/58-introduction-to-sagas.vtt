WEBVTT

1
00:00:02.123 --> 00:00:03.420
&gt;&gt; Steve Kinney: All right,
so let's talk about sagas.

2
00:00:04.950 --> 00:00:07.010
So, thunks let us cheat by
dispatching a function that

3
00:00:07.010 --> 00:00:08.680
eventually dispatches an object.

4
00:00:08.680 --> 00:00:09.620
With a saga,

5
00:00:09.620 --> 00:00:13.670
we set up a generator function to
intercept the dispatched action object.

6
00:00:13.670 --> 00:00:17.490
So we get an action object, cool,

7
00:00:17.490 --> 00:00:22.000
then we pause, we send the network
request, we wait for it to come back.

8
00:00:22.000 --> 00:00:23.970
And then we pick up where we left off and

9
00:00:23.970 --> 00:00:26.840
dispatch a second action that
has all the data that we need.

10
00:00:26.840 --> 00:00:31.460
So as far as our user interface code is,
as far as a user interface code knows,

11
00:00:31.460 --> 00:00:34.720
it's just regular actions as if
we were writing synchronous code.

12
00:00:34.720 --> 00:00:38.330
The saga gets in the middle,
handles all of this for us.

13
00:00:38.330 --> 00:00:44.740
So now we can test the button to see,
did it trigger a fetch all items action?

14
00:00:44.740 --> 00:00:47.500
Cool, and you know that for
the items list,

15
00:00:47.500 --> 00:00:51.330
you can dispatch a fetch or
a received all items action.

16
00:00:51.330 --> 00:00:53.960
And you can test those just as easily

17
00:00:53.960 --> 00:00:56.330
as you tested that Redux
code in the beginning.

18
00:00:56.330 --> 00:00:58.790
And you don't have to mock out stuff.

19
00:00:58.790 --> 00:01:00.260
You can just basically
I have this one action,

20
00:01:00.260 --> 00:01:02.390
I wanna make sure when the button
gets clicked that happens.

21
00:01:02.390 --> 00:01:06.230
I have this other action that when I
give it to the list it should rerender,

22
00:01:06.230 --> 00:01:10.680
you can write your test really,
really easily, right?

23
00:01:10.680 --> 00:01:13.290
So we separate into these two pieces and

24
00:01:13.290 --> 00:01:16.950
that solves a lot of this
testing issue for us.

25
00:01:16.950 --> 00:01:21.570
Again, I'm gonna argue that it does
add a certain amount of complexity

26
00:01:21.570 --> 00:01:23.660
over just dispatching a function.

27
00:01:23.660 --> 00:01:25.630
You've gotta choose,
you've got make your trade-offs and

28
00:01:25.630 --> 00:01:26.690
decide what you're cool with.

29
00:01:28.820 --> 00:01:32.635
So here, these are the two actions we
just wanna make sure we break stuff up

30
00:01:32.635 --> 00:01:34.795
between the requesting and the we got it.

31
00:01:34.795 --> 00:01:38.905
Right, or the error state, I guess, is
a third one that we'd have to worry about.

32
00:01:38.905 --> 00:01:41.335
So let's look at it in the dev tools.

33
00:01:41.335 --> 00:01:46.240
So here we'll hit Request New Friend,
you can see two actions fire.

34
00:01:46.240 --> 00:01:50.190
We request a friend, and
then we add the friend to the list, right?

35
00:01:50.190 --> 00:01:52.140
So, one is sending the request,

36
00:01:52.140 --> 00:01:55.340
two is when that request resolves
we then add it to the UI.

37
00:01:55.340 --> 00:01:58.490
These are both UI specific, and
they're agnostic of the network.

38
00:01:58.490 --> 00:02:01.050
All right, there is something
kinda in the middle, but

39
00:02:01.050 --> 00:02:04.890
you can see we can fire each one of these
and they happen kind of in a pair, right?

40
00:02:04.890 --> 00:02:09.800
And this is my Offices and Dragons app,
which uses the random user API and

41
00:02:09.800 --> 00:02:13.630
then assigns them some kind of level and
class and hit points and mana.

42
00:02:13.630 --> 00:02:18.503
I don't know what I was thinking, yeah, so
[INAUDIBLE] this is actually a real API.

43
00:02:18.503 --> 00:02:21.200
Before, we used a database to mock it out.

44
00:02:21.200 --> 00:02:25.419
This is a legit API that we hit and
then we decorate with some extra stuff.

45
00:02:26.670 --> 00:02:28.850
All right, so in this video what happened?

46
00:02:28.850 --> 00:02:30.950
The user clicks on Request New friend,

47
00:02:32.590 --> 00:02:37.190
that button fires
a REQUEST_NEW_FRIEND action object.

48
00:02:37.190 --> 00:02:39.280
The saga, which we haven't discussed yet,

49
00:02:39.280 --> 00:02:44.930
the black magic in the middle is listening
for any REQUEST_NEW_FRIEND objects.

50
00:02:44.930 --> 00:02:47.680
When it receives it,
it's like, I know what to do.

51
00:02:47.680 --> 00:02:51.580
I'm gonna send a network request,
when that network request comes back, so

52
00:02:51.580 --> 00:02:52.940
it basically pauses.

53
00:02:52.940 --> 00:02:55.130
It works with generators, but pauses.

54
00:02:55.130 --> 00:02:58.430
It waits for that network request to
come back, and then it picks up and

55
00:02:58.430 --> 00:02:59.930
fires the subsequent one.

56
00:02:59.930 --> 00:03:04.660
So it basically is a way to stop,
pause, wait, okay, go forward and

57
00:03:04.660 --> 00:03:05.930
do the next part of this, right?

58
00:03:05.930 --> 00:03:10.151
So it does involve certainly breaking
up our actions into two steps,

59
00:03:10.151 --> 00:03:12.068
but that makes sense, right?

60
00:03:12.068 --> 00:03:14.330
Cuz there i that situation
where the Internet goes down or

61
00:03:14.330 --> 00:03:18.400
the random user API rate limits us and
then we fire it off.

62
00:03:18.400 --> 00:03:22.760
All right, so, how do we set this up?

63
00:03:22.760 --> 00:03:25.655
This is, yeah?
&gt;&gt; Speaker 2: So, when you say, supposing

64
00:03:25.655 --> 00:03:30.690
is there is a reducer that's listening
to the action still catches it or

65
00:03:30.690 --> 00:03:35.690
it actually doesn't receive that action?
&gt;&gt; Steve Kinney: So

66
00:03:35.690 --> 00:03:38.650
the reducers will still receive actions,
right?

67
00:03:38.650 --> 00:03:43.240
But you wouldn't fire the subsequent one,
unless you heard back, right?

68
00:03:45.010 --> 00:03:49.100
Yeah, as far as the rest of redux
is concerned, we set up the saga,

69
00:03:49.100 --> 00:03:50.131
it sits in the middle.

70
00:03:50.131 --> 00:03:55.350
Trying to listen for these actions and
it will start to do things but

71
00:03:55.350 --> 00:03:59.640
the rest of our code is really agnostic
of any of this a sync Tom Foolery.

72
00:03:59.640 --> 00:04:03.260
Which with thunks it is
definitely like in there, right?

73
00:04:03.260 --> 00:04:07.020
Our actions file will look
synchronous just like it was before.

