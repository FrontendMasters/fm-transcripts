WEBVTT

1
00:00:04.959 --> 00:00:08.636
&gt;&gt; Steve Kinney: And we're gonna get
to talking about my favorite thing in

2
00:00:08.636 --> 00:00:11.760
computers which is trade-offs, right?

3
00:00:11.760 --> 00:00:15.754
There is a certain simplicity to a tongue,
that makes sense in our cases.

4
00:00:15.754 --> 00:00:20.500
But they're not pure,
that's what we talked about before,

5
00:00:20.500 --> 00:00:25.485
they have side effects and
the further your code gets away from being

6
00:00:25.485 --> 00:00:28.540
like a pure function,
where you put in inputs and

7
00:00:28.540 --> 00:00:33.230
you get outputs,
the harder things are to test, right?

8
00:00:33.230 --> 00:00:39.058
If a piece of your code involves something
this happening to be globally in scope,

9
00:00:39.058 --> 00:00:42.780
you need to now simulate
that in your tests, right?

10
00:00:42.780 --> 00:00:46.003
Which depending on what it is
can be really difficult if it

11
00:00:46.003 --> 00:00:49.897
does have a side effect or if it is
talking to the network in this case,

12
00:00:49.897 --> 00:00:51.862
you need to mock that out, right?

13
00:00:51.862 --> 00:00:56.633
That can all be slightly difficult,
it's not super difficult so

14
00:00:56.633 --> 00:01:00.290
here's like a test that you could use for
a thunk.

15
00:01:00.290 --> 00:01:04.880
There is a library called fetchMock,
if we're trying to actually fetch from

16
00:01:04.880 --> 00:01:07.730
a server,
we can mock it out with a response.

17
00:01:07.730 --> 00:01:10.770
And then that would resolve the thunk and
we would dispatch and

18
00:01:10.770 --> 00:01:14.140
everything would be gravy,
and it's all good, right?

19
00:01:14.140 --> 00:01:20.460
But that is less simple than the tests
you saw when you were implementing Redux

20
00:01:20.460 --> 00:01:26.140
earlier and there were just object goes in
a function, something comes out, right?

21
00:01:26.140 --> 00:01:29.800
It is definitely a little bit
more difficult than that, and

22
00:01:29.800 --> 00:01:33.590
like this overhead starts to weigh on you.

23
00:01:33.590 --> 00:01:37.214
So it would be great if we could
dispatch something from the database,

24
00:01:37.214 --> 00:01:40.370
right, and that's it,
we're dispatching action.

25
00:01:40.370 --> 00:01:44.090
Something sits in the middle, handles
all that, dispatches another action that

26
00:01:44.090 --> 00:01:46.980
changes the UI, it would be great
if we could get in the middle.

27
00:01:46.980 --> 00:01:49.616
But a lot of times, the way to make
something easier is to give yourself

28
00:01:49.616 --> 00:01:53.270
a good hook somewhere in the middle of the
process that you don't previously have.

29
00:01:53.270 --> 00:01:57.238
So we dispatched an action, whatever
other stuff goes on, we can wait for

30
00:01:57.238 --> 00:01:59.226
that to happen and then we dispatch.

31
00:01:59.226 --> 00:02:02.870
And actually we can say like hey, did the
button, that you click, did that dispatch?

32
00:02:02.870 --> 00:02:06.154
And you are like tongue or item, action?

33
00:02:06.154 --> 00:02:09.391
Like right now it's going to dispatch
a tongue which will eventually dispatch

34
00:02:09.391 --> 00:02:10.028
an action, but

35
00:02:10.028 --> 00:02:12.798
how did you know that clicking
the button did the thing you wanted?

36
00:02:12.798 --> 00:02:14.740
You don't, right?

37
00:02:14.740 --> 00:02:18.800
Unless you do the entire process of
mocking out the server, waiting for

38
00:02:18.800 --> 00:02:19.980
the server to respond,

39
00:02:19.980 --> 00:02:22.560
getting back the action that was
dispatched through the thunk.

40
00:02:22.560 --> 00:02:26.180
Like you have to wait for all of this
when you just wanna know hey, the user,

41
00:02:26.180 --> 00:02:30.490
if they touched this button I just wanna
know, did this action fire, right?

42
00:02:30.490 --> 00:02:32.820
So we need some way to get in there,
right?

43
00:02:32.820 --> 00:02:36.380
We need to figure out

44
00:02:36.380 --> 00:02:41.200
the information that's going before the
A sync and information after the A sync.

