WEBVTT

1
00:00:03.891 --> 00:00:07.460
&gt;&gt; Steve Kinney: So, on Jetsetter there
is a branch called redux testing.

2
00:00:08.960 --> 00:00:10.980
And I'll show you a little
bit about what it is.

3
00:00:12.520 --> 00:00:16.470
It's that we know and love,
from the very beginning, but

4
00:00:16.470 --> 00:00:18.850
we have this test directory.

5
00:00:18.850 --> 00:00:23.550
And in the test directory
we have Two files of tests.

6
00:00:23.550 --> 00:00:25.320
Now, in a perfect world,

7
00:00:25.320 --> 00:00:29.160
you would probably break this
out into multiple files, right?

8
00:00:29.160 --> 00:00:32.914
For every actions file that you would
have, you'd probably have a test file for

9
00:00:32.914 --> 00:00:36.220
that, for every reducer that you had,
you'd probably have a file for

10
00:00:36.220 --> 00:00:36.966
that, right?

11
00:00:36.966 --> 00:00:41.754
But nobody wants to watch me switch
between multiple files and keep track so

12
00:00:41.754 --> 00:00:44.660
I put them in one file on purpose.

13
00:00:44.660 --> 00:00:48.270
Right, you would probably break it out but
for our own sanity.

14
00:00:48.270 --> 00:00:55.370
So actions.test, I'm going to import my
action creators from the three different

15
00:00:55.370 --> 00:01:00.200
files as well as the constants which
are those strings with the action type is.

16
00:01:00.200 --> 00:01:03.190
And again, this you would probably not
import all of this in one test file,

17
00:01:03.190 --> 00:01:06.030
if you're doing it but I did it just
to keep everything in one file so

18
00:01:06.030 --> 00:01:08.640
we didn't we have to like to worry
about junking around too much.

19
00:01:08.640 --> 00:01:12.620
And then to test this, and
you can see this test is already passing.

20
00:01:14.910 --> 00:01:19.120
Which is when we use the add
new item as the item type,

21
00:01:19.120 --> 00:01:24.200
we're gonna get back action where
the type is the add new item, right.

22
00:01:24.200 --> 00:01:25.531
So we're gonna pass in.

23
00:01:25.531 --> 00:01:27.898
We're gonna call add new
item with an item name or

24
00:01:27.898 --> 00:01:30.570
hoping to get back in action
with the add new item type.

25
00:01:30.570 --> 00:01:32.490
And that's how it's passing.

26
00:01:32.490 --> 00:01:35.603
So well, you got the value,
you get action.item.value.

27
00:01:37.979 --> 00:01:39.750
&gt;&gt; Steve Kinney: A few
of them are passing.

28
00:01:39.750 --> 00:01:45.680
A lot of them are skipped because
they're not implemented yet, right?

29
00:01:45.680 --> 00:01:49.350
Your job is going to be to implement
these actions that are going to,

30
00:01:49.350 --> 00:01:51.920
again, take either nothing.

31
00:01:51.920 --> 00:01:52.940
Right?
If it is simply like,

32
00:01:52.940 --> 00:01:57.790
think about the reset button on
the counter or the pizza calculator.

33
00:01:57.790 --> 00:01:59.020
That didn't take any arguments.

34
00:01:59.020 --> 00:02:01.950
It was just a function that produced
an object with a reset type.

35
00:02:03.270 --> 00:02:07.038
So it can take some options, it takes
some arguments and produces an object.

36
00:02:07.038 --> 00:02:10.350
And these tests are making sure that
the object that we created is correct.

37
00:02:10.350 --> 00:02:13.490
So if we call the toggleItem
action creator,

38
00:02:13.490 --> 00:02:18.190
we're hoping we get an action
with the type TOGGLE_ITEM.

39
00:02:18.190 --> 00:02:23.620
If we provide it with an id, we're
expecting that the action.id is that id.

40
00:02:23.620 --> 00:02:24.780
Right?
So we're going through and

41
00:02:24.780 --> 00:02:27.500
we're just basically, and
these are enough tests for our actions,

42
00:02:27.500 --> 00:02:29.470
they are very simple functions.

43
00:02:29.470 --> 00:02:31.740
Let's look at the reducer test.

44
00:02:31.740 --> 00:02:36.340
So I'm testing the Combined Reducer,
which is all of them put together.

45
00:02:36.340 --> 00:02:37.590
Again, you might break it out.

46
00:02:39.140 --> 00:02:43.170
So we can say, hey, if the reducer takes
the initialState and receives just this

47
00:02:43.170 --> 00:02:48.030
empty action that doesn't do anything,
we should probably get the initial state

48
00:02:48.030 --> 00:02:50.690
back out, right, you wanna make
sure you return state at the end.

49
00:02:51.780 --> 00:02:57.070
If on the other hand we parse it a item,
right, so

50
00:02:57.070 --> 00:03:02.570
we use the action creator here, we parse
it A action that has the addNewItem type,

51
00:03:02.570 --> 00:03:04.090
and has all the information
about the item.

52
00:03:04.090 --> 00:03:09.360
Well, we expect that the state.items
includes that new item, right?

53
00:03:09.360 --> 00:03:11.530
If we add a new item,
we want it to be in the state.

54
00:03:11.530 --> 00:03:16.330
So these are kind of very simple tests,
but this is effectively what Redux

55
00:03:16.330 --> 00:03:21.380
testing is, there's not some next
level Thing for basic redox.

56
00:03:21.380 --> 00:03:25.680
It's pass the objects to functions or
the values to functions.

57
00:03:25.680 --> 00:03:26.670
Did you get the thing out again?

58
00:03:26.670 --> 00:03:29.080
Right, and that's one of
the things I really like about.

59
00:03:29.080 --> 00:03:32.250
I think there's a lot of beauty and
simplicity of redox in this case.

60
00:03:32.250 --> 00:03:35.570
So we can just really
quickly look inside actions.

61
00:03:35.570 --> 00:03:42.060
And you can see that I implemented
the ADD_NEW_ITEM action Your job for

62
00:03:42.060 --> 00:03:48.820
the next 30 minutes is to get as many
of these tests passing as you can.

63
00:03:48.820 --> 00:03:51.432
Do I expect you to get all of
them passing in 30 minutes?

64
00:03:51.432 --> 00:03:52.800
That would be super cool.

65
00:03:52.800 --> 00:03:57.140
I would say try some of the action ones,
try some of the reducer ones,

66
00:03:57.140 --> 00:04:01.960
and then we'll come back and
kind of look at the finished result.

67
00:04:01.960 --> 00:04:04.450
But get your hands dirty with each of
them, just get some muscle memory,

68
00:04:04.450 --> 00:04:07.260
don't stress out about like
banging through all of them, but

69
00:04:07.260 --> 00:04:10.550
see how many you can get done,
again objects and

70
00:04:10.550 --> 00:04:13.590
values go into functions coming out and
seeing how many tests you can get passing.

