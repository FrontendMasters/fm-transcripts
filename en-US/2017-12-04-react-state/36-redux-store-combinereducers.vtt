WEBVTT

1
00:00:03.630 --> 00:00:05.960
&gt;&gt; Steve: We could theoretically,
the problem with this is,

2
00:00:05.960 --> 00:00:11.812
we had this one tree, and
you could imagine a world,

3
00:00:11.812 --> 00:00:15.000
all right, we have one tree for
all this state, this is great.

4
00:00:15.000 --> 00:00:18.870
This application grows,
all of a sudden your web scale, and

5
00:00:18.870 --> 00:00:21.890
you have all these different
things you're keeping track of,

6
00:00:21.890 --> 00:00:25.160
you don't want this reducer to grow,
and grow, and grow, and grow.

7
00:00:25.160 --> 00:00:28.040
You would ideally like to
be able to split it up.

8
00:00:28.040 --> 00:00:33.990
So unfortunately,
React only has the idea of one reducer,

9
00:00:33.990 --> 00:00:36.810
cuz there's one store,
there's one tree, there's one reducer.

10
00:00:36.810 --> 00:00:41.430
Everything I showed you in that very
scientific chart before, unlike the flux

11
00:00:41.430 --> 00:00:46.590
one, doesn't get more complicated than
that, that's it, that's the entire chart.

12
00:00:46.590 --> 00:00:51.110
But it is unwieldy to have a giant
reducer, so let's go back up here.

13
00:00:51.110 --> 00:00:53.310
We've already looked at CreateStore, hmm,

14
00:00:53.310 --> 00:00:57.340
this one looks interesting to me,
it's called combineReducers.

15
00:00:57.340 --> 00:01:00.630
We can only have one reducer, but
what we could do is make a bunch of small

16
00:01:00.630 --> 00:01:03.110
reducers, and
then when we set up the store,

17
00:01:03.110 --> 00:01:08.220
we could theoretically go in there and
just combine them all into one.

18
00:01:08.220 --> 00:01:10.911
So we get have our cake
of many small files, and

19
00:01:10.911 --> 00:01:14.160
we eat it too by having the one
reducer that Redox wants.

20
00:01:14.160 --> 00:01:19.152
All right, very cool,
I'm gonna get rid of this store right now,

21
00:01:19.152 --> 00:01:21.390
we'll keep the subscriber.

22
00:01:22.900 --> 00:01:26.800
So let's make a second store,
or a second reducer, rather.

23
00:01:26.800 --> 00:01:30.370
We'll give a new state of the world
we'll say const initialErrorMessage.

24
00:01:30.370 --> 00:01:33.410
I don't know why this calculator's gonna
break yet, cuz all it does is add numbers.

25
00:01:33.410 --> 00:01:38.310
We can imagine a world where
something goes wrong, not in my code,

26
00:01:38.310 --> 00:01:41.230
but in other people's code,
something might go wrong.

27
00:01:41.230 --> 00:01:47.860
And in the UI we want to display
an error message, seems legit.

28
00:01:47.860 --> 00:01:52.100
So we'll go ahead and
let's create a new reducer,

29
00:01:52.100 --> 00:01:54.450
and this reducer's gonna do two things.

30
00:01:54.450 --> 00:02:00.180
It's going to either allow
a error message to be set,

31
00:02:00.180 --> 00:02:03.530
or when the error message is dismissed,
will clear away the error message.

32
00:02:03.530 --> 00:02:07.390
Yes, I know we could set it
to an empty string, got it,

33
00:02:07.390 --> 00:02:12.322
I'm treating us to a helper method.
&gt;&gt; Steve: So

34
00:02:12.322 --> 00:02:16.463
here we go, I'm gonna just
break this out a little bit for

35
00:02:16.463 --> 00:02:25.167
our own large screen sanity.
&gt;&gt; Steve: All right,

36
00:02:25.167 --> 00:02:27.360
so it takes the state of the world.

37
00:02:27.360 --> 00:02:32.637
We’ll start out with this initial
error state, we’ll take an action, if

38
00:02:32.637 --> 00:02:38.683
the action set error message, we’ll change
the message to that action’s message.

39
00:02:38.683 --> 00:02:40.910
And if it’s clear,
we’ll set it to an empty string.

40
00:02:40.910 --> 00:02:47.740
So now we got two reducers,
okay, so how do I combine them?

41
00:02:47.740 --> 00:02:50.450
Well, I do have that combine reducers,
a thing from before.

42
00:02:50.450 --> 00:02:55.680
So I could do, store.create, sorry, yup.

43
00:02:55.680 --> 00:03:00.819
We'll say const store = create store,

44
00:03:00.819 --> 00:03:06.110
and that normally takes the reducer, and

45
00:03:06.110 --> 00:03:12.156
so what we're gonna do is
gonna give it an object

46
00:03:12.156 --> 00:03:19.460
where we'll say calculator
is the calculatorReducer.

47
00:03:19.460 --> 00:03:23.590
And we'll say errors, or
just there's one error.

48
00:03:23.590 --> 00:03:27.230
You can only show one, it's just a string,
unless we start concatenating them, but

49
00:03:27.230 --> 00:03:32.866
we'll say it's the errorMessageReducer.
&gt;&gt; Steve: All right,

50
00:03:32.866 --> 00:03:37.519
I'm gonna just bring this down so
I don't get a, you don't have a store

51
00:03:37.519 --> 00:03:42.365
yet.
&gt;&gt; Steve: Expected

52
00:03:42.365 --> 00:03:44.066
the reducer to be a function, yep,

53
00:03:44.066 --> 00:03:48.610
I gotta pass it to combine reducers.
&gt;&gt; Steve: All right, so

54
00:03:48.610 --> 00:03:55.891
this takes an object of reducers and it,
unsurprisingly, combines them, right,

55
00:03:55.891 --> 00:04:01.440
into one reducer that will be
composed of the smaller reducers.

56
00:04:07.970 --> 00:04:11.574
Cool, so I have some problems here,
as you can see.

57
00:04:11.574 --> 00:04:14.902
We got undefines,

58
00:04:14.902 --> 00:04:20.270
let's do store.getstate.

59
00:04:20.270 --> 00:04:24.370
I've got my calculator
result right in there, cool.

60
00:04:24.370 --> 00:04:28.770
And we've got the message, but you'll
notice that the console.log from before

61
00:04:28.770 --> 00:04:32.140
was looking for store.getState().result.

62
00:04:32.140 --> 00:04:37.350
That's now stored in calculator.result,
and we have error, and it has a message.

63
00:04:37.350 --> 00:04:39.070
Where do these new keys come from?

64
00:04:39.070 --> 00:04:42.280
That's the reason I'm passing
combineReducers as an object.

65
00:04:42.280 --> 00:04:46.170
So these functions could be anything,
whatever the key I've given that object

66
00:04:46.170 --> 00:04:50.220
that combines all the reducers is
going to now name space all of them.

67
00:04:50.220 --> 00:04:55.120
So it's not just one flat tree, each
reducer will be part of one big reducer,

68
00:04:55.120 --> 00:04:57.790
kind of like in its own little nook.

69
00:04:57.790 --> 00:05:06.279
So we'll change this to
&gt;&gt; Steve: .calculator,

70
00:05:06.279 --> 00:05:13.920
.result, very cool.

71
00:05:13.920 --> 00:05:17.810
There it is, and now let's dispatch
that addAction, you see it's 4, and

72
00:05:17.810 --> 00:05:23.830
if we do store.getState we can see
the message is blank and we have 4.

73
00:05:23.830 --> 00:05:25.904
Let's call it again,
just to believe in ourselves.

74
00:05:25.904 --> 00:05:29.710
It's 8 gone, and so
now we have a way to break this apart,

75
00:05:29.710 --> 00:05:33.050
as in if we were doing flux and
had multiple stores,

76
00:05:33.050 --> 00:05:37.200
we have multiple reducers, but
it's still one state tree.

77
00:05:37.200 --> 00:05:39.460
And this is really great,
because it means that,

78
00:05:39.460 --> 00:05:43.410
let's say I wanted to serialize
the entire state of the UI.

79
00:05:43.410 --> 00:05:46.870
It's one object that I have to call
Jase on Stringify on, that's it.

80
00:05:46.870 --> 00:05:49.910
One object that I send to the server
if I wanna produce an error report.

81
00:05:49.910 --> 00:05:52.420
There's not a whole bunch of
things I have to synchronize and

82
00:05:52.420 --> 00:05:56.570
get in lockstep together, I have one
object, and that's effectively it.

83
00:05:57.640 --> 00:05:59.990
So let's also dispatch an error message,

84
00:06:01.210 --> 00:06:05.572
just to see it happen.
&gt;&gt; Steve: My

85
00:06:05.572 --> 00:06:09.890
subscription is still only
showing the numbers, so still 8.

86
00:06:09.890 --> 00:06:11.930
But we go ahead and
we say store.getState(), and

87
00:06:15.570 --> 00:06:19.090
you can see that we have this error
message in there as well, right.

88
00:06:19.090 --> 00:06:24.220
So now it's we're almost with a full
readout set up at this point.

89
00:06:24.220 --> 00:06:28.262
Right, this is effect, we could make due
with taking these plain vanilla objects

90
00:06:28.262 --> 00:06:30.501
and manually dispatching
them to the store.

91
00:06:30.501 --> 00:06:35.242
We could theoretically if we wanted to
right now, we could subscribe a function

92
00:06:35.242 --> 00:06:40.126
that just writes to the document body and
effectively just overwrite the page with

93
00:06:40.126 --> 00:06:43.100
the new UI every single
time the store changes.

94
00:06:43.100 --> 00:06:46.280
We could effectively have a version
of React without all the things

95
00:06:46.280 --> 00:06:49.720
that make React good like
a virtual dom and fast rendering.

96
00:06:49.720 --> 00:06:53.960
We could just, anytime the store changes,
blow away the entire page.

97
00:06:53.960 --> 00:06:56.860
Put this brand new markup with
a bunch of string interpolation in it,

98
00:06:56.860 --> 00:07:00.020
everything's good,
everything's great, right?

99
00:07:00.020 --> 00:07:00.840
That is enough,

100
00:07:00.840 --> 00:07:05.460
we know enough Redux right now to
effectively build a single page web app.

101
00:07:05.460 --> 00:07:10.705
And we still have two more methods
that we haven't gotten to yet,

102
00:07:10.705 --> 00:07:14.080
right, there is not a lot.

103
00:07:14.080 --> 00:07:17.410
Like, I think Redux stresses
people out a lot, myself included,

104
00:07:17.410 --> 00:07:19.960
my former students included.

105
00:07:19.960 --> 00:07:25.180
When there's not a lot to it if you
separate it outside of all of React,

106
00:07:25.180 --> 00:07:27.630
and connecting it to the components and
stuff along those lines, so

107
00:07:27.630 --> 00:07:30.624
that's why we're kind of doing
it in pieces, all right.

