WEBVTT

1
00:00:03.046 --> 00:00:05.160
&gt;&gt; Steve Kinney: So,
the actions go to the dispatcher.

2
00:00:06.720 --> 00:00:08.330
Then they've got to go somewhere else,

3
00:00:08.330 --> 00:00:11.150
the dispatcher's job is to
broadcast things, right?

4
00:00:11.150 --> 00:00:14.820
So the next thing we're gonna do
is we're gonna create a store.

5
00:00:16.530 --> 00:00:20.350
The store is theoretically gonna be
the thing that holds the data for

6
00:00:20.350 --> 00:00:22.210
our application, right?

7
00:00:22.210 --> 00:00:23.770
Actions will go to the dispatcher,

8
00:00:23.770 --> 00:00:27.090
dispatcher will tell all
the stores in our application.

9
00:00:27.090 --> 00:00:30.600
And it's easy to think about what
are the nouns in your application?

10
00:00:30.600 --> 00:00:34.570
The pizza calculator's a little weird,
we've got just basically two values.

11
00:00:34.570 --> 00:00:40.570
But if you were building a Yelp clone,
you would have restaurants.

12
00:00:40.570 --> 00:00:42.620
You might have a restaurant store.

13
00:00:42.620 --> 00:00:47.770
Right, we have a current user store
in which is just the current user.

14
00:00:47.770 --> 00:00:52.232
We have the campaign store, we have all
the different nouns in our application.

15
00:00:52.232 --> 00:00:55.460
We likely have a store and
the user can do things, and

16
00:00:55.460 --> 00:00:58.760
like, change those in some way.

17
00:00:58.760 --> 00:01:03.960
We'll create a very simple store here,

18
00:01:03.960 --> 00:01:07.700
where we'll just call it
PizzaCalculatorStore, right.

19
00:01:07.700 --> 00:01:09.010
We're using this app cuz it's simple,

20
00:01:09.010 --> 00:01:11.920
not cuz it necessarily
needs flux in this case.

21
00:01:11.920 --> 00:01:19.903
So we'll call this one
PizzaCalculatorStore.js.

22
00:01:19.903 --> 00:01:24.597
All right, it's PizzaCalculatorStore.

23
00:01:24.597 --> 00:01:25.790
It's gonna be pretty easy.

24
00:01:25.790 --> 00:01:28.871
What it's going to do is,
we need an object that we can create.

25
00:01:28.871 --> 00:01:29.928
So we are gonna make a class.

26
00:01:29.928 --> 00:01:35.146
So what we'll do is,
we will export default to class

27
00:01:35.146 --> 00:01:42.378
PizzaCalculator store.
&gt;&gt; Steve Kinney: And

28
00:01:42.378 --> 00:01:45.593
we're gonna need to do something
with this in a second.

29
00:01:45.593 --> 00:01:50.065
Because again, actions use a dispatcher,
the dispatcher is gonna broadcast into all

30
00:01:50.065 --> 00:01:52.392
the stores, but
we're trying to build a UI,

31
00:01:52.392 --> 00:01:55.410
right, so what's the store
eventually gonna need to do?

32
00:01:57.470 --> 00:02:01.630
Gonna need to tell components that stuff
has changed, it's gonna effectively,

33
00:02:01.630 --> 00:02:07.460
the same thing that, when we change state
in our container components before,

34
00:02:07.460 --> 00:02:12.160
that was passing different props in and
we were able to re-render.

35
00:02:12.160 --> 00:02:13.880
So eventually we're gonna
need to tell somebody and

36
00:02:13.880 --> 00:02:15.990
we'll get to that in a second.

37
00:02:17.040 --> 00:02:20.650
What we're gonna do is,
we need some kind of event library.

38
00:02:20.650 --> 00:02:23.500
Now we're using Webpack which
means we can use all of

39
00:02:23.500 --> 00:02:26.050
the Node Standard Library out of the box.

40
00:02:26.050 --> 00:02:28.840
And so the Node Standard Library
includes something called Event Emitter.

41
00:02:30.050 --> 00:02:32.000
Event Emitter emits events.

42
00:02:32.000 --> 00:02:35.621
So if you've ever done add event
listener or On or whatever,

43
00:02:35.621 --> 00:02:39.102
it basically gives you the ability
to implement that API.

44
00:02:39.102 --> 00:02:47.839
So we'll pull that in.
&gt;&gt; Steve Kinney: Import

45
00:02:47.839 --> 00:02:49.120
event emitter from events.

46
00:02:50.450 --> 00:02:52.883
That's not an NPM install.

47
00:02:52.883 --> 00:02:55.757
You can also install event emitter
if you need a client side and

48
00:02:55.757 --> 00:02:57.370
web pack doesn't do this for you.

49
00:02:57.370 --> 00:03:00.460
If you have a different build tool,
like this is also available on a piano.

50
00:03:00.460 --> 00:03:02.710
But it's in the node standard library.

51
00:03:02.710 --> 00:03:03.230
And so

52
00:03:03.230 --> 00:03:09.440
it will say is that the class Pizza Store
extends extends the EventEmitter class.

53
00:03:09.440 --> 00:03:12.180
And now we have all of
the abilities of event emitter.

54
00:03:12.180 --> 00:03:15.220
Which means we can say on for
a given event.

55
00:03:15.220 --> 00:03:17.120
Off if we wanna stop a listener.

56
00:03:17.120 --> 00:03:22.120
And we can also omit events,
which is why it's called event omitter.

57
00:03:23.350 --> 00:03:25.580
We do need to do one thing which
is implement a constructor.

58
00:03:27.020 --> 00:03:30.230
Because event omitter does some
set up in the very beginning, so

59
00:03:30.230 --> 00:03:32.270
we need to say, super.

60
00:03:32.270 --> 00:03:36.319
So like, go call,
event omitters, constructor.

61
00:03:36.319 --> 00:03:40.454
All right,
&gt;&gt; Steve Kinney: It's not a useless

62
00:03:40.454 --> 00:03:40.960
constructor.

63
00:03:40.960 --> 00:03:45.650
I'm calling super.
&gt;&gt; Steve Kinney: All right, very cool.

64
00:03:45.650 --> 00:03:50.070
Now ideally,
actions are going to happen here.

65
00:03:50.070 --> 00:03:51.210
Actions go to the dispatcher,

66
00:03:51.210 --> 00:03:55.450
the dispatcher says, hey everyone,
this happens, right?

67
00:03:56.450 --> 00:03:59.230
We need to say like different stores
in your application are gonna care

68
00:03:59.230 --> 00:04:00.430
about different things.

69
00:04:00.430 --> 00:04:02.490
Dispatcher is gonna tell everyone.

70
00:04:02.490 --> 00:04:05.160
That doesn't mean your given
store cares about all of them.

71
00:04:05.160 --> 00:04:09.210
My current user store in the application
I work on doesn't necessarily

72
00:04:09.210 --> 00:04:14.190
care about if someone drags in a new
module to the WYSIWYG editor, right?

73
00:04:14.190 --> 00:04:15.600
Other things in the application do but

74
00:04:15.600 --> 00:04:19.120
like the current user stores like,
hey did you log in or log out, right?

75
00:04:19.120 --> 00:04:21.950
Like that's all I really care about and
it ignores all of those.

76
00:04:21.950 --> 00:04:26.770
So what we need to is we need to
listen for different kinds of actions.

77
00:04:26.770 --> 00:04:31.682
So what we do is, we say hey,
and also like this store, like,

78
00:04:31.682 --> 00:04:35.555
the dispatcher is broadcasting stuff but
this,

79
00:04:35.555 --> 00:04:38.965
we haven't turned on a radio yet, right?

80
00:04:38.965 --> 00:04:41.566
[LAUGH] We're not listening for anything.

81
00:04:41.566 --> 00:04:47.232
So we need to register ourselves with

82
00:04:47.232 --> 00:04:56.264
the app dispatcher.
&gt;&gt; Steve Kinney: Now,

83
00:04:56.264 --> 00:05:01.252
what we can do in this constructor,

84
00:05:01.252 --> 00:05:06.754
we can say AppDispatcher.register.

85
00:05:06.754 --> 00:05:10.278
That's gonna take a function where
whenever an action comes through,

86
00:05:10.278 --> 00:05:14.470
we are gonna call this function and
pass the action in, any action.

87
00:05:14.470 --> 00:05:18.160
Right, this is a very simple example so
it is only gonna be actions we care about.

88
00:05:18.160 --> 00:05:20.355
What if we were broadcasting
some other kind of,

89
00:05:20.355 --> 00:05:22.924
if there was also a bologna
sandwich calculator in here,

90
00:05:22.924 --> 00:05:25.450
the pizza calculator does
not care about that, right?

91
00:05:25.450 --> 00:05:29.317
It always wants to order zero
baloney sandwiches no matter what.

92
00:05:29.317 --> 00:05:33.702
But we'll take actions that we care about,
and the easiest way to see if we care

93
00:05:33.702 --> 00:05:36.837
about it is our good friend,
a conditional statement.

94
00:05:36.837 --> 00:05:41.522
So if action.type equals,
I don't know, update the number of

95
00:05:41.522 --> 00:05:46.623
people
&gt;&gt; Steve Kinney: Good

96
00:05:46.623 --> 00:05:50.962
catch.
&gt;&gt; Steve Kinney: Right,

97
00:05:50.962 --> 00:05:54.040
we'll do something with it, right?

98
00:05:54.040 --> 00:05:56.950
Normally what you'll see
happen here is some amount of

99
00:05:56.950 --> 00:05:59.910
state in the flex pattern is usually
kept inside this closure, right?

100
00:05:59.910 --> 00:06:01.380
Inside this file.

101
00:06:01.380 --> 00:06:07.397
So we'll see something like,
&gt;&gt; Steve Kinney: And

102
00:06:07.397 --> 00:06:08.340
what do we care about?

103
00:06:08.340 --> 00:06:14.407
Number of people.
&gt;&gt; Steve Kinney: Ten

104
00:06:14.407 --> 00:06:21.219
slices per person, two single labels.

105
00:06:22.960 --> 00:06:24.990
Right, it will modify this object.

106
00:06:24.990 --> 00:06:29.880
Right, okay, a new update to the number
of people came in, very cool.

107
00:06:29.880 --> 00:06:33.315
The actions for
UPDATE_NUMBER_OF_PEOPLE has a type, and

108
00:06:33.315 --> 00:06:35.910
what was the other property that it had?
&gt;&gt; Speaker 2: Value.

109
00:06:35.910 --> 00:06:36.880
&gt;&gt; Steve Kinney: Value, right.

110
00:06:36.880 --> 00:06:40.980
Okay, so if we wanna update the number
of people, what do we need to do?

111
00:06:40.980 --> 00:06:46.274
We simply say calculator.

112
00:06:46.274 --> 00:06:49.293
The number of people
equals the action value.

113
00:06:49.293 --> 00:06:54.494
There's one more thing that
we need to do which is we're

114
00:06:54.494 --> 00:07:01.160
gonna need to notify all of the views
that are eventually gonna listen.

115
00:07:01.160 --> 00:07:04.920
That like hey, I just changed
this value in case anyone cares.

116
00:07:04.920 --> 00:07:07.340
I changed it, it's different now.

117
00:07:08.420 --> 00:07:10.643
So we'll call this .emit.

118
00:07:10.643 --> 00:07:12.170
We'll just just call this change.

119
00:07:12.170 --> 00:07:16.026
And so that everything that cares can
listen for changes on this store.

120
00:07:16.026 --> 00:07:18.380
It's only gonna emit this stuff when
it's done something it cares about from

121
00:07:18.380 --> 00:07:19.600
the dispatcher.

122
00:07:19.600 --> 00:07:23.050
Actions hit the dispatcher,
dispatcher tells everyone.

123
00:07:23.050 --> 00:07:24.040
Stores decide whether or

124
00:07:24.040 --> 00:07:27.582
not they care, they tell the views
that are listening, right.

125
00:07:27.582 --> 00:07:32.128
We're gonna do a little bit, you ever see
those cooking shows where they're cooking,

126
00:07:32.128 --> 00:07:34.402
they're cooking, they're cooking and,

127
00:07:34.402 --> 00:07:37.241
like it's going to be a pot
roast that takes six hours.

128
00:07:37.241 --> 00:07:42.347
And all of a sudden, boom,
two more conditionals come out?

129
00:07:42.347 --> 00:07:46.632
It's crazy.
I'm gonna store this in a variable so

130
00:07:46.632 --> 00:07:50.767
I can always put it back to where it was.

131
00:07:58.491 --> 00:08:00.452
&gt;&gt; Steve Kinney: Make a copy
of it in the beginning.

132
00:08:00.452 --> 00:08:05.380
And then reset is just gonna always turn
it back into the initial state again.

133
00:08:05.380 --> 00:08:08.070
So, cool, that's great, you didn't have to
watch me type two more conditionals, but

134
00:08:08.070 --> 00:08:09.270
hopefully they make sense.

135
00:08:09.270 --> 00:08:14.400
When update slices per person comes in,
we update the slices per person.

136
00:08:14.400 --> 00:08:20.020
When reset comes in,
we turn it back into what it should be.

137
00:08:20.020 --> 00:08:20.883
Really great and

138
00:08:20.883 --> 00:08:28.303
now we'll just export default.
&gt;&gt; Steve Kinney: Pizza

139
00:08:28.303 --> 00:08:33.693
calculator store.
&gt;&gt; Steve Kinney: I'll

140
00:08:33.693 --> 00:08:37.410
actually import that instance.

141
00:08:37.410 --> 00:08:39.016
So this.emit came from,

142
00:08:39.016 --> 00:08:41.930
anyone wanna take a lucky guess?
&gt;&gt; Speaker 2: Event

143
00:08:41.930 --> 00:08:42.620
emitter.
&gt;&gt; Steve Kinney: Event emitter.

144
00:08:42.620 --> 00:08:44.090
That's what we inherited
from event emitter.

145
00:08:44.090 --> 00:08:45.380
We inherited few methods.

146
00:08:45.380 --> 00:08:48.510
The ones we care about right now are on,
off, and emit.

147
00:08:48.510 --> 00:08:51.919
On adds an event listener,
off takes it off,

148
00:08:51.919 --> 00:08:55.797
emit tells everyone that
added an event listener.

