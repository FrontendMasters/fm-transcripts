WEBVTT

1
00:00:02.400 --> 00:00:05.540
&gt;&gt; Steve Kinney: So, now we're gonna
think about some of the patterns for

2
00:00:05.540 --> 00:00:06.580
solving this.

3
00:00:06.580 --> 00:00:10.510
I'd like to introduce you
to the Lightning Round.

4
00:00:10.510 --> 00:00:12.520
We're gonna look at three patterns.

5
00:00:12.520 --> 00:00:16.930
And these patterns are agnostic to Flux or

6
00:00:16.930 --> 00:00:20.300
Redux or MobX or
anything along those lines, right?

7
00:00:20.300 --> 00:00:21.970
When we discuss them,
you're gonna be like,

8
00:00:21.970 --> 00:00:25.230
I remember that one from redux if
you've ever played Redux before.

9
00:00:25.230 --> 00:00:27.230
I've seen this one over here.

10
00:00:27.230 --> 00:00:30.310
Cuz they are patterns that you
can do with regular Redux state

11
00:00:30.310 --> 00:00:32.720
as well as any of these other libraries.

12
00:00:32.720 --> 00:00:34.560
And they have different trade-offs.

13
00:00:34.560 --> 00:00:37.550
They have different benefits, and we'll
kind of look at each one of those and

14
00:00:37.550 --> 00:00:39.220
kind of discuss them.

15
00:00:39.220 --> 00:00:39.749
So here's the deal.

16
00:00:40.860 --> 00:00:45.480
Each stage of the Lightning Round, there
are three parts to the Lightning Round.

17
00:00:45.480 --> 00:00:49.560
It's gonna have the same flow to it, which
is, I'm gonna talk about the pattern.

18
00:00:50.680 --> 00:00:53.290
Then I'm going to get to
do a simple example and

19
00:00:53.290 --> 00:00:56.660
then you're gonna get to do
a slightly more complicated example.

20
00:00:56.660 --> 00:01:00.816
And then I will do a slightly more
complicated example to kind of clear up in

21
00:01:00.816 --> 00:01:03.580
case anyone gets stuck along the way.

22
00:01:03.580 --> 00:01:09.340
And the important part is, once we
have these patterns in our vocabulary,

23
00:01:09.340 --> 00:01:13.400
we'll be able to revisit them and play
with them when we get to Flux or Redux.

24
00:01:13.400 --> 00:01:16.080
And some of them will come for
free in some of these libraries, and

25
00:01:16.080 --> 00:01:18.340
we'll see them along those lines.

26
00:01:18.340 --> 00:01:19.612
So, let's start with the first one.

27
00:01:19.612 --> 00:01:22.960
Lifting State,
what's called the container pattern.

28
00:01:22.960 --> 00:01:26.540
And the Container Pattern
has a very sweet savor, and

29
00:01:26.540 --> 00:01:29.770
this is true actually of all three, but
this would be the first one that we see.

30
00:01:29.770 --> 00:01:33.110
Where it draw's a line between state and
presentation.

31
00:01:33.110 --> 00:01:34.560
Right.
And this isn't like,

32
00:01:34.560 --> 00:01:38.580
a lot of take this for granted at
a certain point, that we might have things

33
00:01:38.580 --> 00:01:40.840
that are managed over the state and
things that manage the presentation.

34
00:01:40.840 --> 00:01:43.500
I mean that's effectively
two parts of NBC, right?

35
00:01:43.500 --> 00:01:45.430
[LAUGH] The model and the view and

36
00:01:45.430 --> 00:01:47.930
the control and
the coordinate between the two of them.

37
00:01:47.930 --> 00:01:51.290
But if you look at some of that
original react documentation, one

38
00:01:51.290 --> 00:01:55.170
of the selling points was that your state
is encapsulated in your view objects.

39
00:01:55.170 --> 00:02:00.430
This is not kind of the original like,
a sales pitch for react.

40
00:02:00.430 --> 00:02:06.192
But we now know that this idea of like,
just components that take prompts and

41
00:02:06.192 --> 00:02:08.650
show stuff and
don't have any state of their own.

42
00:02:08.650 --> 00:02:12.327
And we saw that in some other texts
about components that hold state and

43
00:02:12.327 --> 00:02:13.980
can pass it down into prompts.

44
00:02:13.980 --> 00:02:18.660
And this has a lot of really
great advantages to it Right?

45
00:02:18.660 --> 00:02:21.770
The presentational components just
receive prompts and render UI.

46
00:02:21.770 --> 00:02:26.210
And one of the great things about this is,
this makes it incredible easy to test.

47
00:02:26.210 --> 00:02:29.690
You can theoretically take a,
what we'll call a stateful component.

48
00:02:29.690 --> 00:02:32.450
A component that has state and
also has presentation.

49
00:02:32.450 --> 00:02:35.520
And you can load it up in Enzyme and
you can mount it and

50
00:02:35.520 --> 00:02:38.670
you can trigger a bunch of stuff and
you can check things.

51
00:02:38.670 --> 00:02:43.490
But it's really easy to test a component
where, based on the propmpts it receives,

52
00:02:43.490 --> 00:02:45.390
it comes out the other end like this.

53
00:02:45.390 --> 00:02:47.050
It becomes incredibly easy to test.

54
00:02:47.050 --> 00:02:50.540
If the state of my
application is in such a way,

55
00:02:50.540 --> 00:02:52.100
this component will
definitely look like this.

56
00:02:52.100 --> 00:02:54.830
And you can just write a unit test
where you pass in that state, and

57
00:02:54.830 --> 00:02:57.820
you expect a component
to look a certain way.

58
00:02:59.280 --> 00:03:03.760
Clearly those presentational
components in the name,

59
00:03:03.760 --> 00:03:06.440
present themselves to the user, right?

60
00:03:06.440 --> 00:03:10.530
Which means they are going to be the ones
that the user clicks on and changes, and

61
00:03:10.530 --> 00:03:11.380
stuff along those lines.

62
00:03:11.380 --> 00:03:16.245
So, they do need a way to be able to
communicate back up to the container.

63
00:03:16.245 --> 00:03:17.945
Right?
The container holds all the state and

64
00:03:17.945 --> 00:03:19.655
can modify the state.

65
00:03:19.655 --> 00:03:23.045
And the presentational component
is gonna receive those call backs.

66
00:03:23.045 --> 00:03:24.495
And we did a little bit of this.

67
00:03:24.495 --> 00:03:26.195
We saw in the individual items.

68
00:03:26.195 --> 00:03:29.795
The individual items,
didn't really manage their own state.

69
00:03:29.795 --> 00:03:34.180
They received from either the items list
and eventually the application, right?

70
00:03:34.180 --> 00:03:36.420
They were effectively
presentational components.

71
00:03:36.420 --> 00:03:40.410
So we did it, we were starting to
use this pattern a little bit, but

72
00:03:40.410 --> 00:03:44.600
this is kind of a different
way of thinking about it.

73
00:03:44.600 --> 00:03:47.920
So, they either, the idea of
a presentation component, you know,

74
00:03:47.920 --> 00:03:49.280
only has a render method.

75
00:03:49.280 --> 00:03:51.460
Or it's what we call a stateless
functional component,

76
00:03:51.460 --> 00:03:54.856
which is just a function that takes
prompts and returns some JSX.

77
00:03:54.856 --> 00:03:59.380
Personally I used to be all about
the function that like, returns some JSX.

78
00:03:59.380 --> 00:04:03.620
I am now I am sold on the all render.

79
00:04:03.620 --> 00:04:08.050
Cuz remember when we saw like,
hey it's great to have class,

80
00:04:08.050 --> 00:04:12.620
to have instance methods that take
some helpers like, full name and

81
00:04:12.620 --> 00:04:13.840
pull it out of the render function.

82
00:04:14.940 --> 00:04:17.620
If you need one of those you
can just add it onto a class.

83
00:04:17.620 --> 00:04:21.150
Versus, if it's a presentation component,
you have to do a re-factor.

84
00:04:21.150 --> 00:04:22.668
You have to change it into a class.

85
00:04:22.668 --> 00:04:25.760
If you wanna keep track of this,
and stuff along those lines.

86
00:04:25.760 --> 00:04:30.530
I'm gonna stick with using class,
the name of the component,

87
00:04:30.530 --> 00:04:32.090
extend this component, for most of this.

88
00:04:32.090 --> 00:04:32.940
Just a render method.

89
00:04:32.940 --> 00:04:36.380
If that's not your style, You don't
have to, we'll see a little bit of

90
00:04:36.380 --> 00:04:38.960
both in some of the examples, but
that's kinda gonna be in mind.

91
00:04:38.960 --> 00:04:42.640
But just in case you've never seen
the stateless functional component before,

92
00:04:42.640 --> 00:04:45.030
this is effectively what it looks like.

93
00:04:45.030 --> 00:04:47.940
It literally is just an arrow function.

94
00:04:47.940 --> 00:04:51.230
Prompts go in, component comes out.

95
00:04:51.230 --> 00:04:53.410
There's no this stuff's at stake,

96
00:04:53.410 --> 00:04:57.090
everything this component needs
is passed to the component.

97
00:04:58.360 --> 00:05:01.250
So this would be the presentational
component in this case.

98
00:05:02.400 --> 00:05:04.830
What would the container component do?

99
00:05:04.830 --> 00:05:07.900
So this counter container, at this point

100
00:05:07.900 --> 00:05:11.280
I put two counters in here just to show
that they both get the same state and

101
00:05:11.280 --> 00:05:14.400
you just see two of the same counter
on the page, which is kinda silly.

102
00:05:14.400 --> 00:05:18.890
But I could fit in on a slide,
so it's what I went with.

103
00:05:18.890 --> 00:05:23.410
All this component does effectively
is keep track of the state,

104
00:05:24.590 --> 00:05:26.970
have the method that allows
the state to be modified, and

105
00:05:26.970 --> 00:05:29.450
passes that down into
the presentational component.

106
00:05:29.450 --> 00:05:31.730
It doesn't actually show anything itself.

107
00:05:31.730 --> 00:05:34.020
It's just showing these
presentational components.

108
00:05:34.020 --> 00:05:36.070
So let's actually implement this.

109
00:05:36.070 --> 00:05:38.330
We're gonna get to something what
looks very close on the slide.

110
00:05:38.330 --> 00:05:41.800
But I'm gonna show you the process
of refactoring that basic

111
00:05:41.800 --> 00:05:44.400
counter that I forced you to make before.

112
00:05:44.400 --> 00:05:47.250
And I'm going to then move
it to a container pattern.

113
00:05:47.250 --> 00:05:49.830
And then we'll take a slightly
more complicated example.

114
00:05:49.830 --> 00:05:52.570
You'll do it, and then I'll go over it.

115
00:05:52.570 --> 00:05:54.800
And we'll do this for all three of
the patterns that we're going to see.

116
00:05:56.480 --> 00:05:56.980
Cool.

