WEBVTT

1
00:00:01.900 --> 00:00:06.099
&gt;&gt; Steve Kinney: All right, so we'll talk
a little bit more about patterns and

2
00:00:06.099 --> 00:00:07.430
anti-patterns.

3
00:00:07.430 --> 00:00:09.989
And this is again echoing
something that we saw.

4
00:00:09.989 --> 00:00:13.229
When we were thinking about that,
the thinking and react piece.

5
00:00:13.229 --> 00:00:15.940
Which was state should be
considered private data.

6
00:00:15.940 --> 00:00:17.720
This is unique to this component.

7
00:00:17.720 --> 00:00:19.780
It can be passed down to children.

8
00:00:19.780 --> 00:00:23.660
But generally speaking we don't want to
like modify it from outside a component or

9
00:00:23.660 --> 00:00:24.750
anything along those lines.

10
00:00:26.420 --> 00:00:29.650
And it's a little bit more
dangerous than working with props.

11
00:00:29.650 --> 00:00:30.220
Because with props,

12
00:00:30.220 --> 00:00:33.830
we have PropTypes to warn us if
we change it to the wrong thing.

13
00:00:33.830 --> 00:00:37.090
With states,
we don't necessarily have that, right?

14
00:00:37.090 --> 00:00:40.760
So one solution for having safer code,
in this case would be,

15
00:00:40.760 --> 00:00:45.470
what if we had our state like
effectively get passed in as props.

16
00:00:45.470 --> 00:00:48.270
We'll see some patterns for that, we'll
see a container pattern and a higher-order

17
00:00:48.270 --> 00:00:53.220
component pattern, and other patters along
those lines that allow us to do that.

18
00:00:53.220 --> 00:00:57.570
But just working with state we don't have
the same protections, that we have for

19
00:00:57.570 --> 00:00:58.090
props.

20
00:00:59.570 --> 00:01:02.970
And again, we talked a little
bit about this but again,

21
00:01:02.970 --> 00:01:04.620
should something be in
captain react state.

22
00:01:04.620 --> 00:01:07.300
If you can calculate it from the props,
no, all right?

23
00:01:07.300 --> 00:01:08.650
Then we talked about
the full name example.

24
00:01:08.650 --> 00:01:10.830
Then what we'll see
a little bit later as well.

25
00:01:10.830 --> 00:01:15.150
If you're not using it in the render
method, it shouldn't be state.

26
00:01:15.150 --> 00:01:17.844
We'll talk about where to put that stuff
in a second and a use case for that.

27
00:01:19.780 --> 00:01:22.820
So, we're not gonna use state
as derivation of props.

28
00:01:22.820 --> 00:01:26.010
So we don't wanna like, make a full
name that we have to keep up to date.

29
00:01:27.940 --> 00:01:29.170
We wanna derive it.

30
00:01:29.170 --> 00:01:32.160
So we wanna either in the render method,
we can say like hey,

31
00:01:32.160 --> 00:01:34.410
fullname = firstname + lastname.

32
00:01:34.410 --> 00:01:37.860
If that's getting a little out of control
or there is too much happening, right?

33
00:01:37.860 --> 00:01:40.180
If you're making simple
string concatenation,

34
00:01:40.180 --> 00:01:42.060
fine, do it in the render method.

35
00:01:42.060 --> 00:01:44.517
However, like we all have a friend.

36
00:01:44.517 --> 00:01:47.018
Sometime that friend is ourself,

37
00:01:47.018 --> 00:01:51.770
who take us an excuse to write
like seven ternaries long, right.

38
00:01:51.770 --> 00:01:54.740
To try to figure what the state
should be to derive at that point.

39
00:01:54.740 --> 00:01:59.600
You're better off pulling it out into
a method on the class you can come and

40
00:01:59.600 --> 00:02:02.340
then use it right then and there, right?

41
00:02:02.340 --> 00:02:05.240
Again, this is not the state fullName.

42
00:02:05.240 --> 00:02:09.820
This is simply a method on the components

43
00:02:09.820 --> 00:02:14.170
class that will go ahead and get you the
fullName based on the two parts of states.

44
00:02:14.170 --> 00:02:16.580
So this isn't any different from
doing it in the render method.

45
00:02:16.580 --> 00:02:19.450
It just gets it out of there,
so you're not getting

46
00:02:19.450 --> 00:02:24.310
a 20-line-long render method for a simple
div, or something along those lines.

47
00:02:24.310 --> 00:02:26.290
So when you pull it out and
we can use it, right?

48
00:02:26.290 --> 00:02:27.930
Again, this is a slightly different.

49
00:02:29.080 --> 00:02:33.680
We can break stuff out in the helper
methods and that works for

50
00:02:33.680 --> 00:02:34.850
a lot of things.

51
00:02:34.850 --> 00:02:37.670
When we're trying to
like map over some state.

52
00:02:37.670 --> 00:02:42.185
So here we have a user profile,
we can also like pull that out and

53
00:02:42.185 --> 00:02:46.495
do a helper method of renderUserProfile,
and get very simple render methods.

54
00:02:46.495 --> 00:02:51.975
Because it is very hard to debug a giant
render method that is 100 lines long.

55
00:02:51.975 --> 00:02:53.925
Trust me, I've done it.

56
00:02:53.925 --> 00:02:55.395
I've also created it.

57
00:02:55.395 --> 00:02:59.595
I'm not proud of myself, but there are
patterns that we can use to kind of pull

58
00:02:59.595 --> 00:03:02.690
in as much data out of
the render method and

59
00:03:02.690 --> 00:03:04.750
like having it be a little
more clean to read.

60
00:03:04.750 --> 00:03:08.030
Now when we read this render method,
it is very clear what's happening here.

61
00:03:08.030 --> 00:03:09.940
We'll have the very
important user controls.

62
00:03:09.940 --> 00:03:11.030
We'll render all the users.

63
00:03:11.030 --> 00:03:12.600
And then we'll have whatever
the footer is, right?

64
00:03:12.600 --> 00:03:13.620
We can see it.

65
00:03:13.620 --> 00:03:15.760
It's a lot more easy to
kind of read in parts.

66
00:03:15.760 --> 00:03:20.070
Cuz remember, you will be reading code
a lot more than you write code, right?

67
00:03:20.070 --> 00:03:23.070
So you always wanna think about the most
important developer in the world,

68
00:03:23.070 --> 00:03:25.050
which is future you, right?

69
00:03:25.050 --> 00:03:26.620
Future you is six months from now and

70
00:03:26.620 --> 00:03:28.500
doesn't remember the code
that previous you wrote.

71
00:03:30.090 --> 00:03:32.580
All right, the last one we talked
about when we looked at the tweet is,

72
00:03:32.580 --> 00:03:35.940
let's not use state for
things that we're not going to render.

73
00:03:35.940 --> 00:03:41.280
So for instance, if we have a Twitter
live stream, for some reason, and

74
00:03:41.280 --> 00:03:45.600
it's using just basically on an interval,
gonna call the API,

75
00:03:45.600 --> 00:03:49.000
we don't want to put that in state,
because we're not rendering that.

76
00:03:49.000 --> 00:03:50.970
Well you're like,
well I need to hold on to it, so

77
00:03:50.970 --> 00:03:54.620
I can get rid of it when
the component announced.

78
00:03:54.620 --> 00:03:57.990
Yes, you do need to hold on to it,
otherwise you have a memory leak,

79
00:03:57.990 --> 00:03:58.590
very true.

80
00:03:58.590 --> 00:04:02.523
However, it shouldn't be in the state,
it's not something you're rendering,

81
00:04:02.523 --> 00:04:04.220
you can put it on the class, right.

82
00:04:04.220 --> 00:04:08.793
You can put it, you can store it
on the actual class itself and so

83
00:04:08.793 --> 00:04:12.868
here we can like put it on
this.tweetChecker, right?

84
00:04:12.868 --> 00:04:16.480
Which we can store on the instance and
then we can remove it.

85
00:04:16.480 --> 00:04:17.560
It's not part of state.

86
00:04:17.560 --> 00:04:20.190
All right, if you find yourself putting
things you're not rendering on state,

87
00:04:21.200 --> 00:04:22.940
try not to do that.

88
00:04:22.940 --> 00:04:27.010
Routing back to the prop tags things
that we were talking about before

89
00:04:27.010 --> 00:04:31.720
is when possible use sensible defaults,
right?

90
00:04:31.720 --> 00:04:36.100
If you're expecting from the API,
you're normally gonna get an array.

91
00:04:37.720 --> 00:04:42.752
Then, you should have the default
state of that component, be an array.

92
00:04:42.752 --> 00:04:46.936
Cuz otherwise what's gonna happen if that
call takes longer than you thought, and

93
00:04:46.936 --> 00:04:48.082
you try to map over it.

94
00:04:49.705 --> 00:04:51.110
&gt;&gt; Steve Kinney: Kaboomies, right.

95
00:04:51.110 --> 00:04:51.944
Things are not going to go well.

96
00:04:51.944 --> 00:04:55.012
So we need to think about it because
we won't get a prompt type warning or

97
00:04:55.012 --> 00:04:57.172
anything along those lines
cuz it's just state.

98
00:04:57.172 --> 00:05:00.788
And so we need to program
defensively around that.

