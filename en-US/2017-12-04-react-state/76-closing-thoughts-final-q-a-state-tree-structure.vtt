WEBVTT

1
00:00:01.610 --> 00:00:03.952
&gt;&gt; Steve Kinney: So let's talk about
kind of a basic conclusion and

2
00:00:03.952 --> 00:00:07.100
some of the kind of like high
order takeaways to think about.

3
00:00:07.100 --> 00:00:11.990
I think a natural question is,
MobX versus Redux.

4
00:00:11.990 --> 00:00:13.520
Which one should I use?

5
00:00:13.520 --> 00:00:18.745
And it's not really a MobX versus
Redux thing as much as it is,

6
00:00:18.745 --> 00:00:23.400
like a dependency graphs versus
immutable state trees issue, right?

7
00:00:23.400 --> 00:00:28.580
Both of these approaches have, again, like
most things in this workshop, trade-offs.

8
00:00:28.580 --> 00:00:31.400
And you've got to kind of be
the one that makes the choice

9
00:00:31.400 --> 00:00:33.560
based on the needs of your application.

10
00:00:33.560 --> 00:00:35.310
There's not gonna just be like,
here is the answer,

11
00:00:35.310 --> 00:00:37.490
use what up the newest library is, right?

12
00:00:37.490 --> 00:00:40.730
Unfortunately, we're in the position where
we have to think about these architectural

13
00:00:40.730 --> 00:00:43.100
decisions and make some choices.

14
00:00:43.100 --> 00:00:45.230
Dependency graphs are really
easy to update, we saw that,

15
00:00:45.230 --> 00:00:48.310
just change the thing,
and everything works.

16
00:00:49.710 --> 00:00:51.660
The nodes can all refer to each other,
right?

17
00:00:51.660 --> 00:00:53.100
The item can talk to the lists.

18
00:00:53.100 --> 00:00:54.850
The lists can talk to the item.

19
00:00:54.850 --> 00:00:59.370
If it's built out more and more, we can
have different models talk to each other.

20
00:00:59.370 --> 00:01:01.830
We just need to wire them up in a graph.

21
00:01:01.830 --> 00:01:04.250
And I really like the fact that
the actions are simple, and

22
00:01:04.250 --> 00:01:05.650
they're co-located with the data.

23
00:01:05.650 --> 00:01:08.320
It's not like they have these
actions in this one file,

24
00:01:08.320 --> 00:01:11.520
the tree in this other file,
I'm communicating across them.

25
00:01:11.520 --> 00:01:14.480
I've got a line in the wrong order,
even though it's not doing super great on

26
00:01:14.480 --> 00:01:16.580
spelling mistakes, on methods there,
without auto-complete.

27
00:01:16.580 --> 00:01:18.190
You've learned something about me.

28
00:01:18.190 --> 00:01:20.550
And the idea is that we know the object.

29
00:01:20.550 --> 00:01:21.690
We have it by it's identity.

30
00:01:21.690 --> 00:01:24.940
And we can compare it rather than look for
one that has the same idea or

31
00:01:24.940 --> 00:01:26.610
some other kind of thing.

32
00:01:26.610 --> 00:01:29.760
But, that's not to say that immutable
state trees does not have big

33
00:01:29.760 --> 00:01:31.290
advantages as well.

34
00:01:31.290 --> 00:01:35.820
When you have one big state tree,
taking a snapshot of that entire tree.

35
00:01:35.820 --> 00:01:38.390
And implementing like a global undo and
redo for

36
00:01:38.390 --> 00:01:40.940
everything that happened is way easier.

37
00:01:40.940 --> 00:01:43.650
Then trying to figure out all the things
you changed in different graph nodes and

38
00:01:43.650 --> 00:01:47.280
trying to unset them to
the previous example.

39
00:01:47.280 --> 00:01:48.856
It's a simple tree structure.

40
00:01:48.856 --> 00:01:53.410
You can json.stringify the entire tree,
and just store it in local storage, or

41
00:01:53.410 --> 00:01:54.410
send it to the server.

42
00:01:56.340 --> 00:01:59.340
And you don't have to worry about
two objects being the exact same.

43
00:01:59.340 --> 00:02:02.180
You could just be like, do they have
properties that I care about, right?

44
00:02:02.180 --> 00:02:07.350
So there's some really big
advantages to think about.

45
00:02:07.350 --> 00:02:09.858
There are a few things that we didn't
talk about with immutable state trees,

46
00:02:09.858 --> 00:02:11.160
I just wanna cover real quick.

47
00:02:11.160 --> 00:02:13.890
Again, cuz they fall into the how
you think about your code, and

48
00:02:13.890 --> 00:02:17.830
how you think about managing state,
rather than a given library.

49
00:02:17.830 --> 00:02:20.620
And so one thing that we kind of didn't
get a chance to talk over as we were

50
00:02:20.620 --> 00:02:21.549
getting our hands dirty with.

51
00:02:21.549 --> 00:02:24.290
Reduxs and sagas and flux and

52
00:02:24.290 --> 00:02:27.220
all of those things is about
normalizing our data, right?

53
00:02:27.220 --> 00:02:30.990
There's a certain part that's not
view layer or reacts specific but

54
00:02:30.990 --> 00:02:32.500
just how we kind of think about it.

55
00:02:32.500 --> 00:02:34.870
We mentioned a little bit earlier on,
we say like, yeah,

56
00:02:34.870 --> 00:02:36.430
let's just iterate through this array.

57
00:02:36.430 --> 00:02:40.370
What happens if your tree has
an array that is a thousand,

58
00:02:40.370 --> 00:02:42.720
ten thousand items long?

59
00:02:42.720 --> 00:02:45.280
Are you going to filter through it every
time you need to need to remove something,

60
00:02:45.280 --> 00:02:48.750
or you just wanna like snip off
that node on the tree, right?

61
00:02:48.750 --> 00:02:51.300
That will be a lot easier in this case.

62
00:02:51.300 --> 00:02:55.440
So the way we've kind of being doing it,
because it's like easy as we learn a whole

63
00:02:55.440 --> 00:02:58.080
bunch of things,
is have things in race, right?

64
00:02:58.080 --> 00:03:00.070
But again, if you wanna remove

65
00:03:02.160 --> 00:03:05.560
item with the idea four, you're gonna
need to go through that all right.

66
00:03:05.560 --> 00:03:08.700
Also when you have to think
about relations, right?

67
00:03:08.700 --> 00:03:11.580
You can have one part of
the tree reach over and

68
00:03:11.580 --> 00:03:15.010
touch a node on the other part where you
can count with dependency graph, right?

69
00:03:15.010 --> 00:03:17.650
And so
we see that like we have an owner and

70
00:03:17.650 --> 00:03:19.550
then we can reference the owner's table.

71
00:03:19.550 --> 00:03:22.870
And we have to,
it's on us to keep those things in sync.

72
00:03:22.870 --> 00:03:27.320
Right and I don't think there's
a big problem with this.

73
00:03:27.320 --> 00:03:33.100
Six or seven months ago, I came here and
did a class on Firebase and React.

74
00:03:33.100 --> 00:03:37.110
Firebase uses this tree structure and
it works incredibly effectively.

75
00:03:37.110 --> 00:03:40.040
But it comes with it's tradeoff
that you need to manage.

76
00:03:40.040 --> 00:03:41.950
On the one hand, it's a simple
tree that you can manipulate.

77
00:03:41.950 --> 00:03:44.710
On the other hand, you're in charge of
a little bit more than manipulation.

78
00:03:44.710 --> 00:03:47.490
So if we're to normalize the data,
we'd have it by key.

79
00:03:47.490 --> 00:03:51.600
And you can just snip off
the 4 key on the items.

80
00:03:51.600 --> 00:03:53.150
And you can kind of work with bigger data.

81
00:03:53.150 --> 00:03:54.620
Cuz basically you can go right in and

82
00:03:54.620 --> 00:03:57.540
find the one you're looking for rather
than have to filter through all of them.

83
00:03:58.540 --> 00:04:03.400
But the really cool thing is because
this is all still an emerging field,

84
00:04:03.400 --> 00:04:05.850
you don't always have to choose.

85
00:04:05.850 --> 00:04:10.610
So it's like should I used MobX, or
an immutable state tree and like Redux?

86
00:04:10.610 --> 00:04:13.110
You could use both.

87
00:04:13.110 --> 00:04:17.160
So this is kind of taking a lot
of the patterns from Redux and

88
00:04:17.160 --> 00:04:18.630
trying them out in MobX.

89
00:04:19.750 --> 00:04:21.850
And I think it's a theme
that we can learn from.

90
00:04:21.850 --> 00:04:24.470
All right, we've looked at
a whole bunch of approaches, and

91
00:04:24.470 --> 00:04:26.990
we've looked at sometimes,
in the context of libraries.

92
00:04:26.990 --> 00:04:31.630
But how can we mix and match them,
how can we solve unique problems for us?

93
00:04:31.630 --> 00:04:35.590
Is it possible to implement
the undo/redo pattern outside of Redux?

94
00:04:35.590 --> 00:04:36.610
Hint, it is,

95
00:04:36.610 --> 00:04:41.110
you could theoretically store previous
state in a regular react component.

96
00:04:41.110 --> 00:04:44.760
You definitely could do that as well,
could you figure out how to do it in MobX?

97
00:04:44.760 --> 00:04:47.630
Probably you could do that as well as you
could just hook into each one of those

98
00:04:47.630 --> 00:04:48.660
methods.

99
00:04:48.660 --> 00:04:51.340
Could you have an action reducer
pattern if that was helpful?

100
00:04:51.340 --> 00:04:53.900
We saw that you can with MobX state trade.

101
00:04:55.980 --> 00:04:59.170
I like this idea of sagas but
like I'd rather use promises and

102
00:04:59.170 --> 00:05:00.410
async a way to do it.

103
00:05:00.410 --> 00:05:04.250
Like these are things that once you
understand the general patterns of hey.

104
00:05:04.250 --> 00:05:08.620
I want to wait and I wanna separate
my user interface actions out from

105
00:05:08.620 --> 00:05:11.540
the asynchronous parts,
you can begin to implement those things.

106
00:05:11.540 --> 00:05:14.280
You're not beholden to what
a given library is doing.

107
00:05:14.280 --> 00:05:15.180
You can start to mix and

108
00:05:15.180 --> 00:05:18.740
match and solve the different issues
that you need to worry about.

109
00:05:18.740 --> 00:05:22.550
Like whether you would like undo for
API requests like the send the opposite or

110
00:05:22.550 --> 00:05:26.330
send the new data like you can
build the abstractions around that.

111
00:05:26.330 --> 00:05:28.360
You now know the kind of approaches and

112
00:05:28.360 --> 00:05:30.920
interests like how some of these
patterns work under the hood.

113
00:05:32.080 --> 00:05:34.610
You have a really good sense of
the lay of the land now I hope.

114
00:05:34.610 --> 00:05:38.570
But I want you to know that even
the people who have a lot of experience

115
00:05:38.570 --> 00:05:40.010
are still figuring this stuff out.

116
00:05:40.010 --> 00:05:43.280
This is a tweet from Dan Abramov,
the creator of Redux.

117
00:05:43.280 --> 00:05:45.870
It's basically saying I wasn't super
happy with the React state model, so

118
00:05:45.870 --> 00:05:46.510
I tried Redux.

119
00:05:46.510 --> 00:05:48.910
But maybe we should just
fix the React state model.

120
00:05:48.910 --> 00:05:49.740
We don't always need this.

121
00:05:49.740 --> 00:05:52.670
We're all still as a community
figuring this out and

122
00:05:52.670 --> 00:05:55.000
trying to come up with
the best approaches.

123
00:05:55.000 --> 00:05:58.580
So I would just as
a final cautionary note.

124
00:05:58.580 --> 00:06:02.630
I ask you to not say this is
the silver bullet, the right thing,

125
00:06:02.630 --> 00:06:05.710
the absolute best possible way to do it.

126
00:06:05.710 --> 00:06:11.860
Because for any given view, there's
probably the opposite view on that, right?

127
00:06:11.860 --> 00:06:15.300
So my big hope is that you realized
that this is not a solved problem.

128
00:06:15.300 --> 00:06:20.000
And your now on the team to
help figure out these really,

129
00:06:20.000 --> 00:06:22.545
really hard issues,
congratulations, that's it.

130
00:06:22.545 --> 00:06:27.077
&gt;&gt; Group: [APPLAUSE]
&gt;&gt; Speaker 3: Do you have any

131
00:06:27.077 --> 00:06:28.399
thoughts around,

132
00:06:28.399 --> 00:06:34.023
you know when you have this really large
state object grabbing parts of the tree.

133
00:06:34.023 --> 00:06:38.690
And interacting with that instead of
always pulling down the entire state?

134
00:06:38.690 --> 00:06:41.470
&gt;&gt; Steve Kinney: Yeah, so with the map
state to prop, you get to do that, right?

135
00:06:41.470 --> 00:06:46.490
But I think there's something
to be said that, what I

136
00:06:46.490 --> 00:06:51.320
caution with that is, if you find
yourself doing it by hand too much.

137
00:06:51.320 --> 00:06:54.340
It's time to give yourself a better
abstraction, like a function or

138
00:06:54.340 --> 00:06:57.750
something that handles these things,
and have it be tested.

139
00:06:57.750 --> 00:07:01.790
The nice part about the tree is you can
pass in what you need and never tell it.

140
00:07:01.790 --> 00:07:04.670
I'm gonna like, I'm just going to remember
every time I implement this to like

141
00:07:04.670 --> 00:07:06.870
manage this one thing and the other thing.

142
00:07:06.870 --> 00:07:12.090
You can pull in how you arrange that tree
like you know talk about the firebase one.

143
00:07:12.090 --> 00:07:15.580
Unfortunately, with a treelike structure
where you can't have interdependencies,

144
00:07:15.580 --> 00:07:17.920
a lot of times you duplicate data a lot.

145
00:07:19.340 --> 00:07:24.390
You for instance in a chatroom,
if you wanted a list of every chatroom.

146
00:07:25.700 --> 00:07:29.710
You might want to just have chatrooms,
right list and that's just the title and

147
00:07:29.710 --> 00:07:31.010
the number of people in it.

148
00:07:31.010 --> 00:07:34.020
You don't wanna have every message
in there cuz then if you just wanted

149
00:07:34.020 --> 00:07:37.560
the notes on a tree that
where all the chatrooms.

150
00:07:37.560 --> 00:07:40.070
You would get every single
message in each one two.

151
00:07:40.070 --> 00:07:44.020
So you might store the list of chatrooms
in two places, the chatrooms and

152
00:07:44.020 --> 00:07:47.190
then like another reference to
the part that has all the messages.

153
00:07:47.190 --> 00:07:52.680
So in a tree, you find yourself definitely
like storing stuff multiple places.

154
00:07:52.680 --> 00:07:56.450
So you can get like the version that
you need in a given place versus like

155
00:07:56.450 --> 00:07:58.280
yeah yeah yeah this tree is
going to have all the chatrooms.

156
00:07:58.280 --> 00:08:00.330
And all the chatrooms are going to
have all the messages in them and

157
00:08:00.330 --> 00:08:02.680
then they're going to have
references to all of the users.

158
00:08:02.680 --> 00:08:05.700
You can't get like whenever
you get something like

159
00:08:05.700 --> 00:08:08.360
towards the top of the tree,
you get everything after it.

160
00:08:08.360 --> 00:08:10.620
You can't just like pick
out the bottom part.

161
00:08:10.620 --> 00:08:14.540
So a lot of the times it is trying to
keep your tree as flat as possible.

162
00:08:14.540 --> 00:08:18.659
And a lot of times the way that you
have to do that is by duplicating data

163
00:08:18.659 --> 00:08:19.519
repeatedly.

164
00:08:26.067 --> 00:08:27.198
&gt;&gt; Steve Kinney: And
then building ourself function so

165
00:08:27.198 --> 00:08:28.350
that you're not doing that by hand.

166
00:08:28.350 --> 00:08:33.260
[LAUGH] Right,
cuz you will screw it up invariably, yeah.

167
00:08:34.880 --> 00:08:38.205
Like where, like not very good
at this as a like animals.

168
00:08:38.205 --> 00:08:40.010
[LAUGH], right?

169
00:08:40.010 --> 00:08:43.410
Anything repetitive and boring,
make the computer do for you.

170
00:08:43.410 --> 00:08:47.438
Don't do it yourself,
you're going to be bad at it.

171
00:08:47.438 --> 00:08:49.412
I mean, you're all great,
but you know what I mean.

