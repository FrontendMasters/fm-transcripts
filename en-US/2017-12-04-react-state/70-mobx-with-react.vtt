WEBVTT

1
00:00:02.380 --> 00:00:06.363
&gt;&gt; Steve Kinney: Turns out we
just have more decorators.

2
00:00:06.363 --> 00:00:11.525
You'll notice if you're eagle eyed,
if you look in the upper left corner,

3
00:00:11.525 --> 00:00:15.076
you have this observer
decorator which effectively

4
00:00:15.076 --> 00:00:18.963
wraps the entire component
in a higher order component.

5
00:00:18.963 --> 00:00:20.471
The pattern's back again.

6
00:00:20.471 --> 00:00:24.678
And that wires it up so
that if any observable

7
00:00:24.678 --> 00:00:29.690
properties change,
we re-render the component.

8
00:00:29.690 --> 00:00:33.545
So this is what it looks
like with classes.

9
00:00:33.545 --> 00:00:37.203
If you're using stateless functional
components, it's just a function.

10
00:00:37.203 --> 00:00:41.350
It's just the higher order component
pattern rearing its head once again,

11
00:00:41.350 --> 00:00:44.481
which is really just the higher
order function pattern.

12
00:00:44.481 --> 00:00:48.964
Where it takes this thing and
basically wraps it in extra functionality.

13
00:00:48.964 --> 00:00:54.013
And like you could theoretically,
you have almost to a certain extent,

14
00:00:54.013 --> 00:00:56.763
written a very simple version of this.

15
00:00:56.763 --> 00:01:00.847
If we were gonna use the container pattern
for earlier in this course, effectively,

16
00:01:00.847 --> 00:01:02.221
when the component mounts.

17
00:01:02.221 --> 00:01:05.290
You're going to use autorun,
these properties.

18
00:01:05.290 --> 00:01:06.945
And this is obviously a lot more
complicated under the hood.

19
00:01:06.945 --> 00:01:10.299
But effectively it's just
registering an autorun

20
00:01:10.299 --> 00:01:14.206
to re-render on any time any
of those observables change.

21
00:01:14.206 --> 00:01:16.861
And it's wrapping it in
a container component.

22
00:01:16.861 --> 00:01:19.787
That is, like, you have,
like it may look like magic, yeah,

23
00:01:19.787 --> 00:01:21.460
just put observable in front of it.

24
00:01:21.460 --> 00:01:23.700
But you are almost
graduates of this workshop.

25
00:01:23.700 --> 00:01:25.255
You know how this stuff works.

26
00:01:25.255 --> 00:01:26.521
You have written this stuff yourself.

27
00:01:26.521 --> 00:01:29.912
And so, it's that same pattern again.

28
00:01:29.912 --> 00:01:33.279
And for me, some of the most important
parts of this workshop are that pattern,

29
00:01:33.279 --> 00:01:34.044
those patterns.

30
00:01:34.044 --> 00:01:35.312
And the fact that you can apply it.

31
00:01:35.312 --> 00:01:39.236
If there is something where don't have
this, you now know the mechanics.

32
00:01:39.236 --> 00:01:41.896
Connect is effectively the higher
order component pattern.

33
00:01:41.896 --> 00:01:44.264
This is again,
the higher order component pattern.

34
00:01:44.264 --> 00:01:47.077
And these patterns
are the really useful part,

35
00:01:47.077 --> 00:01:50.815
even if we're all using some
different library in six months.

36
00:01:50.815 --> 00:01:52.277
All right, very cool.

37
00:01:52.277 --> 00:01:58.129
So then there's the other part of
I want to maybe have a mobx store.

38
00:01:58.129 --> 00:02:00.652
If I pass one in, I know about it but

39
00:02:00.652 --> 00:02:05.177
what about being able,
I don't wanna pass stuff down again.

40
00:02:05.177 --> 00:02:05.859
We're better than this,

41
00:02:05.859 --> 00:02:07.976
I don't wanna get to the point where I'm
back in the beginning of this workshop.

42
00:02:07.976 --> 00:02:10.328
I'm putting everything in
the application component and

43
00:02:10.328 --> 00:02:11.722
I'm passing it all around again.

44
00:02:11.722 --> 00:02:13.190
That's not what I wanna do,

45
00:02:13.190 --> 00:02:16.075
I wanna have all the goodness
that I just got from redux.

46
00:02:16.075 --> 00:02:18.433
So I made container components and
used connect.

47
00:02:20.835 --> 00:02:25.587
&gt;&gt; Steve Kinney: So,
guess what pattern's back again, provider,

48
00:02:25.587 --> 00:02:29.265
mobx-react has a provider component.

49
00:02:29.265 --> 00:02:34.314
One thing I wanna point out to you is,
if you've used Redux,

50
00:02:34.314 --> 00:02:38.472
you say like store equals store,
and that's it.

51
00:02:38.472 --> 00:02:40.845
Because Redux, how many stores are there?

52
00:02:40.845 --> 00:02:41.670
&gt;&gt; Speaker 2: One.

53
00:02:41.670 --> 00:02:44.503
&gt;&gt; Steve Kinney: One, now you can have
as many stores as you want again.

54
00:02:44.503 --> 00:02:47.068
Right, you can have an item store and
a tweet store.

55
00:02:47.068 --> 00:02:48.195
And a to-do store.

56
00:02:48.195 --> 00:02:52.316
You can have a to-do list,
twitter stream packing list app.

57
00:02:52.316 --> 00:02:54.034
And you can pass all of those in, and

58
00:02:54.034 --> 00:02:57.483
they will be available as different
stores that you an inject in there.

59
00:02:57.483 --> 00:02:59.657
In Redux,
we don't think about all that stuff.

60
00:02:59.657 --> 00:03:06.299
Because there is just one store, and so
we just inject that one store, cool.

61
00:03:06.299 --> 00:03:08.377
And then, so okay, I've injected it.

62
00:03:08.377 --> 00:03:09.480
It's part of the context.

63
00:03:09.480 --> 00:03:11.036
Remember the context from previously?

64
00:03:11.036 --> 00:03:14.758
When the provider says the context,
all the child components have access to

65
00:03:14.758 --> 00:03:17.155
the context that you're
not supposed to touch?

66
00:03:17.155 --> 00:03:18.989
That the library is supposed to handle?

67
00:03:18.989 --> 00:03:21.299
So, how do we do that in mobx?

68
00:03:21.299 --> 00:03:27.337
If you're using a ECMA super class,
you can.

69
00:03:27.337 --> 00:03:29.294
And remember this is
the new item component,

70
00:03:29.294 --> 00:03:32.451
this is one that just theoretically
triggers new items or creates them.

71
00:03:32.451 --> 00:03:34.193
It doesn't actually listen for anything.

72
00:03:34.193 --> 00:03:38.730
You can use inject and
this'll inject the item store,

73
00:03:38.730 --> 00:03:42.410
this will now be this.props.itemstore.

74
00:03:42.410 --> 00:03:44.239
So you can inject the store
to any component, so

75
00:03:44.239 --> 00:03:47.095
now you're not starting at the application
and passing all the way down.

76
00:03:47.095 --> 00:03:50.218
You're getting that stuff we worked so
hard for when we implemented flux.

77
00:03:50.218 --> 00:03:54.581
Being able to separate our data
off in the component hierarchy.

78
00:03:54.581 --> 00:03:57.066
And being able to kind of like
inject it in from the side.

79
00:03:57.066 --> 00:03:59.318
You're able to do that, so
this will inject the item store.

80
00:03:59.318 --> 00:04:00.932
And you can inject as
many stores as you need.

81
00:04:00.932 --> 00:04:05.170
So think about it as we used maps
state to prompts with Redux.

82
00:04:05.170 --> 00:04:09.482
This is very similar to like hey,
here's the stores that you need, cool.

83
00:04:09.482 --> 00:04:14.574
This is a stateless component,
I'm just kind of

84
00:04:14.574 --> 00:04:20.918
demonstrating that inject
actually then takes a function.

85
00:04:20.918 --> 00:04:24.380
It's like two higher order component
patterns, so we'll inject and

86
00:04:24.380 --> 00:04:25.503
then we'll observe.

87
00:04:25.503 --> 00:04:32.806
So inject, return the function,
observer takes in a component.

88
00:04:32.806 --> 00:04:36.049
So we first rapid the observer, and
then we inject the store into it.

89
00:04:36.049 --> 00:04:41.039
And now we have both the ability to
automatically update whenever any of

90
00:04:41.039 --> 00:04:43.285
that data in the store changes,

91
00:04:43.285 --> 00:04:47.294
as well as the ability to have
access to the store itself.

92
00:04:47.294 --> 00:04:52.240
All right,
we're gonna take like a five minute break.

93
00:04:52.240 --> 00:04:56.779
And then we're gonna jump into an exercise
that we're gonna go back and forth.

94
00:04:56.779 --> 00:05:01.701
So I'll implement the basic functionality
for adding and removing items.

95
00:05:01.701 --> 00:05:04.976
Then you'll implement toggling,
then I'll implement filtering.

96
00:05:04.976 --> 00:05:07.286
And then you'll implement
marking all as unpacked.

97
00:05:07.286 --> 00:05:09.809
So we're gonna kinda have
a little bit of I do some stuff,

98
00:05:09.809 --> 00:05:11.396
then I'm gonna hand it over to you.

99
00:05:11.396 --> 00:05:13.452
Then, I'll do some more stuff.

100
00:05:13.452 --> 00:05:14.822
I'll hand it back over to you.

101
00:05:14.822 --> 00:05:18.840
We'll kinda go back and forth to
reimplementing the application with mobx

102
00:05:18.840 --> 00:05:21.021
instead of one of these other patterns.

103
00:05:21.021 --> 00:05:22.960
I just need a few minutes to get ready.

