WEBVTT

1
00:00:03.137 --> 00:00:07.604
&gt;&gt; Steve Kinney: Higher order components,
higher order components are components

2
00:00:07.604 --> 00:00:12.580
that take a component as an argument and
return a wrapped component.

3
00:00:12.580 --> 00:00:15.510
So they basically take
a presentational component, and

4
00:00:15.510 --> 00:00:18.812
return one that is wrapped
in a container component.

5
00:00:18.812 --> 00:00:23.311
So it's basically an evolution of
this other pattern that we just saw.

6
00:00:23.311 --> 00:00:28.387
I like to think of it as a container
factory, right, and I tend to use it

7
00:00:28.387 --> 00:00:34.769
when I find myself saying, hey, I'm gonna
need this state all over the place, right?

8
00:00:34.769 --> 00:00:37.979
We have campaigns lists and
unsubscribed groups in the app,

9
00:00:37.979 --> 00:00:39.540
which I need in multiple places.

10
00:00:39.540 --> 00:00:44.064
I need for a dropdown for picking which
unsubscribed group you want a person to

11
00:00:44.064 --> 00:00:46.860
unsubscribe from, so
on and so forth, right?

12
00:00:46.860 --> 00:00:50.662
And so you can create these higher order
components, and whatever you need that

13
00:00:50.662 --> 00:00:53.954
data, you can simply take
the presentational component, pass into

14
00:00:53.954 --> 00:00:57.960
the higher order component, and get
back a wrapped container and presenter.

15
00:00:57.960 --> 00:01:00.780
So it's basically a way of
automating what we just did by hand.

16
00:01:00.780 --> 00:01:05.660
The other really cool thing is that you
can actually use multiple of these.

17
00:01:05.660 --> 00:01:10.558
So if I have a component that needs
both the current user and their tweets,

18
00:01:10.558 --> 00:01:15.540
I can pass the presentational component
into the current user component.

19
00:01:15.540 --> 00:01:18.419
And then pass that one into
the tweets higher order component.

20
00:01:18.419 --> 00:01:22.132
We can kinda build all the state
functionality that we need, and

21
00:01:22.132 --> 00:01:25.249
keep the actual presentation
completely separate.

22
00:01:25.249 --> 00:01:30.310
So this is what it might look like
with a calculator in this case.

23
00:01:30.310 --> 00:01:35.159
So this time, I called it WithCount,
and that's a pattern that we use at and

24
00:01:35.159 --> 00:01:37.065
I think it's pretty popular.

25
00:01:37.065 --> 00:01:41.285
When we see it with react redux later,
you're gonna see it called something else.

26
00:01:41.285 --> 00:01:45.535
But I like to name it based on what
is the state that I'm passing in.

27
00:01:45.535 --> 00:01:47.285
So in this case, it's my basic counter, so

28
00:01:47.285 --> 00:01:51.705
it's going to be all that count
state that I broke out before.

29
00:01:51.705 --> 00:01:56.075
Okay, and so it is a function that takes
a wrapped component as an argument.

30
00:01:56.075 --> 00:01:58.185
So that is the component that
we will eventually wrap,

31
00:01:58.185 --> 00:02:00.400
it is the presentational component.

32
00:02:00.400 --> 00:02:03.920
And it returns something that
we might not have seen before,

33
00:02:03.920 --> 00:02:07.331
which is an anonymous class, right.

34
00:02:07.331 --> 00:02:12.300
Normally if we said class and gave it
a name, we'd say extends component.

35
00:02:12.300 --> 00:02:16.250
But this is basically,
take this component that we pass in,

36
00:02:16.250 --> 00:02:18.510
and return this new component.

37
00:02:18.510 --> 00:02:23.490
And you can see that it has all of
the stateful accoutrements that we

38
00:02:23.490 --> 00:02:25.800
saw when we made the container pattern.

39
00:02:25.800 --> 00:02:31.180
But it also then returns what is that
wrapped component returns whatever

40
00:02:31.180 --> 00:02:36.890
components was passed in with
all the state that it needs.

41
00:02:36.890 --> 00:02:41.580
So ideally, what we should be able to
do in this case is, we should be able

42
00:02:41.580 --> 00:02:46.590
to take that pizza container, right, and
we'll get set up for this in a second.

43
00:02:46.590 --> 00:02:50.200
We'll take that pizza container,
we'll make it take any kind of

44
00:02:50.200 --> 00:02:53.790
calculator that it receives, and
return the wrapped component.

45
00:02:54.950 --> 00:02:58.899
So let me get us set up for that, and
then I'll push up a live coding branch so

46
00:02:58.899 --> 00:03:01.186
you can kinda have some
of the basis there.

47
00:03:01.186 --> 00:03:03.980
But I'm still gonna have you do
most of the heavy lifting, and

48
00:03:03.980 --> 00:03:05.829
then we'll kind of review it together.

49
00:03:12.439 --> 00:03:16.123
&gt;&gt; Steve Kinney: So what I need to do is,
this is still called application,

50
00:03:16.123 --> 00:03:18.315
which I don't love at this point.

51
00:03:18.315 --> 00:03:21.647
So what we'll do real quick is,
we will change then name of this one to,

52
00:03:26.430 --> 00:03:28.187
&gt;&gt; Steve Kinney: WithPizzaCalculations,

53
00:03:28.187 --> 00:03:29.030
seems good.

54
00:03:31.000 --> 00:03:35.129
And this is not a higher order component
yet, just cuz I've given it the name that

55
00:03:35.129 --> 00:03:38.730
would have you believe it is a higher
order component, it's not yet.

56
00:03:38.730 --> 00:03:42.437
Cuz we have not done the part that
we saw in the previous slide.

57
00:03:42.437 --> 00:03:46.277
But we've given it that name, and then
what we'll do real quick is, just to keep

58
00:03:46.277 --> 00:03:55.435
the ReactDOM working correctly,
&gt;&gt; Steve Kinney: Application

59
00:03:55.435 --> 00:03:56.639
extends Component.

60
00:04:00.969 --> 00:04:02.688
&gt;&gt; Steve Kinney: And we'll have it render.

61
00:04:10.118 --> 00:04:11.724
&gt;&gt; Steve Kinney: Return that, cool,

62
00:04:11.724 --> 00:04:16.560
this isn't any different than
the container pattern, right.

63
00:04:16.560 --> 00:04:18.820
This is just getting our name
set up in the correct way.

64
00:04:18.820 --> 00:04:23.711
What we really want is
be able to say const,

65
00:04:37.864 --> 00:04:38.710
&gt;&gt; Steve Kinney: Right, so we take our

66
00:04:38.710 --> 00:04:40.350
presentational component.

67
00:04:40.350 --> 00:04:41.720
The pizza calculator, again,

68
00:04:41.720 --> 00:04:46.198
has no idea of state,
it simply is the recipient of props.

69
00:04:46.198 --> 00:04:48.500
And then WithPizzaCalculations,

70
00:04:48.500 --> 00:04:52.797
there's a function that takes
this presentational component and

71
00:04:52.797 --> 00:04:58.407
returns a new class, a new component that
is the state wrapper, the pizza container.

72
00:04:58.407 --> 00:05:03.071
Right, with that new presentational
component inside of it, right, so

73
00:05:03.071 --> 00:05:05.760
that is very hard to express in words.

74
00:05:05.760 --> 00:05:10.310
Right, so what I really want you to do is,
I'll put back up the slide

75
00:05:12.250 --> 00:05:15.710
with count components so
you can kind of see the syntax.

76
00:05:15.710 --> 00:05:20.431
But you have, effectively, the moving
pieces, just instead of hard coding,

77
00:05:20.431 --> 00:05:22.334
in this pizza calculator here,

78
00:05:22.334 --> 00:05:26.145
you're gonna want to return
whatever component was passed in.

79
00:05:26.145 --> 00:05:28.005
That is the kind of the major difference,

80
00:05:28.005 --> 00:05:31.630
we're going from a hard coded container
wrapping a presentational component.

81
00:05:31.630 --> 00:05:34.479
To a function that takes
a presentational component and

82
00:05:34.479 --> 00:05:36.549
returns that wrapped in the container.

