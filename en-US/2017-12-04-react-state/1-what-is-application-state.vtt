WEBVTT

1
00:00:02.670 --> 00:00:05.640
&gt;&gt; Steve Kinney: So, we're talking about
this in about nine parts if you don't

2
00:00:05.640 --> 00:00:07.220
count the conclusion as a part.

3
00:00:07.220 --> 00:00:11.550
Talking about understanding state, and
then we'll kinda move through some of

4
00:00:11.550 --> 00:00:15.070
the libraries that we saw
in the beginning, right?

5
00:00:15.070 --> 00:00:19.150
And so
this is not necessarily react specific.

6
00:00:19.150 --> 00:00:21.530
This is, again, what does state even mean?

7
00:00:22.880 --> 00:00:23.750
Is it a state of mind?

8
00:00:23.750 --> 00:00:24.960
Is it the data?

9
00:00:24.960 --> 00:00:26.050
Is it where they are?

10
00:00:26.050 --> 00:00:26.950
What is state?

11
00:00:26.950 --> 00:00:30.120
The answer is it's all of those things,
right?

12
00:00:30.120 --> 00:00:31.910
So we need better definitions.

13
00:00:31.910 --> 00:00:36.709
We need better terms that we can touch on
as we go through this course together.

14
00:00:38.740 --> 00:00:41.940
So, the main job of React,
React is famously just a view layer.

15
00:00:41.940 --> 00:00:44.620
It's not an MVC framework,
that's gonna handle your models,

16
00:00:44.620 --> 00:00:45.990
and your controllers, and your views.

17
00:00:45.990 --> 00:00:50.310
It is simply, a view layer, which is,
you give it some view logic,

18
00:00:50.310 --> 00:00:55.370
you give it some state, and
it turns it into a user interface, right?

19
00:00:55.370 --> 00:00:59.440
Which means it is very unopinionated
on how you manage that state.

20
00:00:59.440 --> 00:01:02.820
And there are different patterns that you
can bring in and things that you can do.

21
00:01:02.820 --> 00:01:06.480
And it's kind of on you to think about
these things, which is why we are either

22
00:01:06.480 --> 00:01:09.750
in this room watching live or
watching the recording later on.

23
00:01:09.750 --> 00:01:12.920
It was just because,
I'm in charge of these things now.

24
00:01:12.920 --> 00:01:14.890
There isn't a prescribed way to do it.

25
00:01:14.890 --> 00:01:16.770
I need to think about it.

26
00:01:16.770 --> 00:01:20.290
And one of the things that I,
kind of like go back to a lot.

27
00:01:20.290 --> 00:01:24.661
And I think many of us like looked at it
when we first saw the React documentation,

28
00:01:24.661 --> 00:01:27.052
but haven't thought of it too much lately.

29
00:01:27.052 --> 00:01:32.696
Is in the React docs there is this kind
of piece that multiple parts point to,

30
00:01:32.696 --> 00:01:35.800
which is this thinking in React, right?

31
00:01:35.800 --> 00:01:40.860
As far as I know I haven't done
the difs of the history of it.

32
00:01:40.860 --> 00:01:45.520
But it hasn't changed much since the time
I started using React a few years ago.

33
00:01:45.520 --> 00:01:49.020
So I'm gonna do everyone's favorite thing,
which is,

34
00:01:49.020 --> 00:01:51.710
kind of like redo some parts and
look at some quotes from that.

35
00:01:51.710 --> 00:01:53.376
To kind of like frame,

36
00:01:53.376 --> 00:01:58.833
what does the React team think React's
job is in managing state, right?

37
00:01:58.833 --> 00:02:03.990
What is the React
philosophy on these things.

38
00:02:03.990 --> 00:02:05.360
So here is one kinda quote.

39
00:02:05.360 --> 00:02:07.470
The key here is not to repeat yourself.

40
00:02:07.470 --> 00:02:11.088
It's to figure out the absolute minimal
representation of the state your

41
00:02:11.088 --> 00:02:14.952
application needs and compute everything
else you need on-demand, right?

42
00:02:14.952 --> 00:02:17.769
And that's something that we
are gonna see as we go through,

43
00:02:17.769 --> 00:02:19.051
walking up each approach.

44
00:02:19.051 --> 00:02:21.933
Which is, what things do we
need to manage by hand and

45
00:02:21.933 --> 00:02:24.825
what things can we figure
out from the state we have?

46
00:02:24.825 --> 00:02:29.051
What other pieces of UI and
state can we derive, right?

47
00:02:29.051 --> 00:02:34.690
A really kind of core examples is,
like a full name, right?

48
00:02:34.690 --> 00:02:38.790
What you don't want to be in charge of, is
every time the first name or the last name

49
00:02:38.790 --> 00:02:43.000
changes you having to go in manually and
set the state of the full name.

50
00:02:43.000 --> 00:02:45.840
You have all the pieces of
information that you need,

51
00:02:45.840 --> 00:02:47.170
in order to derive that full name.

52
00:02:47.170 --> 00:02:48.640
You have the first name and
you have the last name.

53
00:02:48.640 --> 00:02:51.370
You have a space key on your keyboard,
right.

54
00:02:51.370 --> 00:02:53.424
You can do this.

55
00:02:53.424 --> 00:02:56.640
Because if you end up trying
to do these things by hand.

56
00:02:56.640 --> 00:03:00.550
You end up eventually messing it up,
right?

57
00:03:00.550 --> 00:03:05.740
Most of the bugs on our application and
in just right in the JavaScript are like,

58
00:03:05.740 --> 00:03:08.370
we got the wrong type and
we didn't get really think about it.

59
00:03:08.370 --> 00:03:11.330
Most of the problems in
our React applications,

60
00:03:11.330 --> 00:03:13.950
which is, we somehow messed up
the state of the world, right?

61
00:03:13.950 --> 00:03:15.730
We've got an out sink with state.

62
00:03:15.730 --> 00:03:20.220
So one of the core tenants here, and we'll
actually see it from some other quotes

63
00:03:20.220 --> 00:03:25.140
later on in this workshop, which is,
think about what is the bare minimum

64
00:03:25.140 --> 00:03:29.520
amount of state that you need and
deriving everything else from that.

65
00:03:31.750 --> 00:03:32.640
Cool.

66
00:03:32.640 --> 00:03:33.740
What is state?

67
00:03:33.740 --> 00:03:35.590
Is it passed from a parent via props?

68
00:03:35.590 --> 00:03:36.458
It's probably not state.

69
00:03:36.458 --> 00:03:39.256
Does it remain unchanged over time?

70
00:03:39.256 --> 00:03:42.650
Then it's not state, it's just like
static mark up in this case, right.

71
00:03:42.650 --> 00:03:46.050
It's like, the copy or
somethings part of your code.

72
00:03:46.050 --> 00:03:49.000
And again,
can you compute it based on other state or

73
00:03:49.000 --> 00:03:50.880
profits in your component if so
it's not state.

74
00:03:50.880 --> 00:03:53.670
So it's again,
going back to that first one of,

75
00:03:53.670 --> 00:03:55.860
what is the bare minimum
state that you need?

76
00:03:55.860 --> 00:03:59.120
Because the less, the best way
to get good at state management

77
00:03:59.120 --> 00:04:01.500
is to manage as little state as possible,
right?

78
00:04:01.500 --> 00:04:04.540
The less of it that you manage,
the less of it you have to worry about.

79
00:04:04.540 --> 00:04:05.680
The easier it is to do.

80
00:04:05.680 --> 00:04:08.130
So that will be a kind
of a recurring thing.

81
00:04:09.650 --> 00:04:12.250
And again, that reaction is
all about one way data flow.

82
00:04:13.590 --> 00:04:16.330
And we're gonna kind of like break
that rule at some points, right?

83
00:04:16.330 --> 00:04:19.520
It's we'll always have a one way
data flow, cuz that's unavoidable.

84
00:04:19.520 --> 00:04:23.920
But this second part of like, the flow
down the component hierarchy, right?

85
00:04:23.920 --> 00:04:26.290
If you have played with Redux,

86
00:04:26.290 --> 00:04:31.090
you know that you don't have to pass
everything in from the very top.

87
00:04:31.090 --> 00:04:34.570
And we'll kind of look at how maybe
that part doesn't always apply.

88
00:04:34.570 --> 00:04:39.050
But there is this, a lot of times in
React applications, this one-way flow.

89
00:04:39.050 --> 00:04:42.754
A lot of times it's from our
state into our views, right?

90
00:04:42.754 --> 00:04:45.790
Where the user can do something, right?

91
00:04:45.790 --> 00:04:48.810
And most of these libraries is gonna
trigger what we call an action,

92
00:04:48.810 --> 00:04:51.320
which will change the state,
which will then re-render the view.

93
00:04:51.320 --> 00:04:54.750
But it's always that kind of like,
circle, right?

94
00:04:54.750 --> 00:04:57.540
Between state goes in to the views,

95
00:04:57.540 --> 00:05:00.960
unless the user does a thing, then we
change to state exchange the views.

96
00:05:00.960 --> 00:05:05.950
All right, and so it's always sort of one
way, we can't go both ways in this case.

97
00:05:05.950 --> 00:05:13.760
And this is definitely not always
easy to wrap your head around, right?

98
00:05:13.760 --> 00:05:18.815
Ideally if, it's even hard to think about
that the event is actually going back and

99
00:05:18.815 --> 00:05:21.295
changing the state,
which is then rendering the view

100
00:05:21.295 --> 00:05:24.105
versus I change an input field,
my state changed, right?

101
00:05:24.105 --> 00:05:25.705
That's the two way connection.

102
00:05:25.705 --> 00:05:29.695
A lot of times it's not and
we'll get to explore that a little bit.

103
00:05:29.695 --> 00:05:35.115
I do wanna harp a little bit on props
vs state, cuz I know the thinking and

104
00:05:35.115 --> 00:05:38.580
React it says like, okay,
props aren't necessarily state.

105
00:05:38.580 --> 00:05:41.570
But they are usually someone else's state.

106
00:05:41.570 --> 00:05:44.340
They're not necessarily the state of that
component if you're encapsulating it.

107
00:05:44.340 --> 00:05:48.740
But a lot of times they are the state
of a parent component, right.

108
00:05:48.740 --> 00:05:49.420
That are passed in, right.

109
00:05:49.420 --> 00:05:52.800
This is still,
cuz if it wasn't something you passed in,

110
00:05:52.800 --> 00:05:54.850
then a lot of time this would
be static content, right?

111
00:05:54.850 --> 00:05:57.018
This is not something that maybe
changes in your application.

112
00:05:57.018 --> 00:05:59.220
And we're gonna kind of take
a very liberal approach and

113
00:05:59.220 --> 00:06:02.920
say like, things that can change in
your application based on user input,

114
00:06:02.920 --> 00:06:06.180
are things that we have to worry about,
in terms of state management.

115
00:06:06.180 --> 00:06:09.700
But, just to kind of clarify
these terms a little bit.

116
00:06:09.700 --> 00:06:13.690
Because, when we think of both props and
state as being forms of state,

117
00:06:14.960 --> 00:06:19.140
it's problematic because one of those
is called state [LAUGH], right?

118
00:06:19.140 --> 00:06:22.896
So we're trying to come up with this
more robust working definition, but

119
00:06:22.896 --> 00:06:24.237
there is a thing, right?

120
00:06:24.237 --> 00:06:28.020
We have this.state, and
this.state in React components.

121
00:06:28.020 --> 00:06:31.410
So it's always hard when we're
trying to come up with this broader

122
00:06:31.410 --> 00:06:33.300
definition of state to have a thing.

123
00:06:33.300 --> 00:06:36.520
That is, when we type it into
the computer the word state.

124
00:06:36.520 --> 00:06:39.520
So we know the state is
created in the component and

125
00:06:39.520 --> 00:06:42.340
stays in the component unless
it's passed down to its children.

126
00:06:42.340 --> 00:06:46.220
So here's an example, we have a counter,
and then this very ridiculous

127
00:06:46.220 --> 00:06:50.740
double count,
which is going to just take it in.

128
00:06:50.740 --> 00:06:54.644
So, in this case, double count,
which is a second counter.

129
00:06:54.644 --> 00:06:57.530
Is gonna take in the state of it's parent.

130
00:06:57.530 --> 00:06:58.540
It's a child, right?

131
00:06:58.540 --> 00:07:01.910
So it's not necessarily the state
of the double count, but

132
00:07:01.910 --> 00:07:04.410
it is definitely some bodies state, right?

133
00:07:04.410 --> 00:07:07.820
It just depends on who owns that, right?

134
00:07:07.820 --> 00:07:10.584
We think about,
state a lot of times in terms of like,

135
00:07:10.584 --> 00:07:12.489
which actual component owns it but,

136
00:07:12.489 --> 00:07:16.615
clearly we know that the stuff can be
passed down the component hierarchy tree.

