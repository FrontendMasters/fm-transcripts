WEBVTT

1
00:00:02.920 --> 00:00:06.103
&gt;&gt; Steve Kinney: To kind of
understand this a little better and

2
00:00:06.103 --> 00:00:10.960
see how it's not black magic,
what we're going to do is we're gonna

3
00:00:10.960 --> 00:00:15.598
write a slightly too simple
version of this observable, right?

4
00:00:15.598 --> 00:00:19.736
And the versions in MobX
are a little bit more complicated,

5
00:00:19.736 --> 00:00:24.869
cuz we're not dealing with computed or
dependencies along this way, but

6
00:00:24.869 --> 00:00:30.697
we'll see it kind of in a very simple
version with a do-it-yourself observable.

7
00:00:34.870 --> 00:00:39.555
&gt;&gt; Steve Kinney: So here,
we have just an observable value where we

8
00:00:39.555 --> 00:00:42.460
could say get and set, right?

9
00:00:42.460 --> 00:00:45.930
We saw it on that string earlier,
and we'll see

10
00:00:45.930 --> 00:00:49.160
how that actually works with objects and
why we didn't have to deal with objects,

11
00:00:49.160 --> 00:00:54.500
hint to hint computed properties,
but we'll see that in a second.

12
00:00:54.500 --> 00:00:56.940
But we have this get and set, and
so that we have an observable.

13
00:00:56.940 --> 00:01:00.840
Now, yes, the one in MobX is a lot
more complicated than this one.

14
00:01:00.840 --> 00:01:02.790
But, it's a pretty good representation.

15
00:01:02.790 --> 00:01:03.518
So we could say,

16
00:01:13.536 --> 00:01:17.270
&gt;&gt; Steve Kinney: And we get back
this object with a get and a set.

17
00:01:17.270 --> 00:01:18.860
So this is now a string.

18
00:01:18.860 --> 00:01:23.340
And so, I could say x.get,
&gt;&gt; Steve Kinney: And

19
00:01:23.340 --> 00:01:25.090
we'll get the string back, right?

20
00:01:25.090 --> 00:01:28.400
Just as we saw with just the regular
string before, with MobX.

21
00:01:28.400 --> 00:01:31.900
But you'll notice that
whenever I set the value,

22
00:01:31.900 --> 00:01:36.980
I am going to just trigger this onChange,
which is just effectively a console log.

23
00:01:36.980 --> 00:01:44.563
So I could say x.set,
&gt;&gt; Steve Kinney: And, oops.

24
00:01:44.563 --> 00:01:49.509
[SOUND] call that newValue,

25
00:01:57.980 --> 00:01:58.732
&gt;&gt; Steve Kinney: x.set.

26
00:01:58.732 --> 00:02:03.640
You can say, the newValue is World,
the oldValue was Hello.

27
00:02:03.640 --> 00:02:05.980
Now, yeah, I'm console logging.

28
00:02:05.980 --> 00:02:09.499
What's effectively happening under
the hood is MobX is able to tell autorun,

29
00:02:10.550 --> 00:02:12.436
the world has changed.

30
00:02:12.436 --> 00:02:15.800
And, it's able to do really smart things
of figuring out exactly the bare minimum

31
00:02:15.800 --> 00:02:18.640
that has changed about it,
which makes it a lot easier.

32
00:02:18.640 --> 00:02:24.050
But basically, what we're able to do
is events to register ourselves with,

33
00:02:24.050 --> 00:02:27.030
I have changed,
I can tell everyone when I have changed.

34
00:02:27.030 --> 00:02:27.530
We've seen it.

35
00:02:27.530 --> 00:02:31.239
We can automatically render UI without
any special framework with these really

36
00:02:31.239 --> 00:02:32.244
powerful patterns.

37
00:02:32.244 --> 00:02:33.019
All right.

38
00:02:33.019 --> 00:02:34.540
So let's dig in a little bit deeper.

39
00:02:36.130 --> 00:02:39.990
So this is our very simple
version from before.

40
00:02:39.990 --> 00:02:43.979
This is not an official
observable implementation, right?

41
00:02:43.979 --> 00:02:48.059
This is just a way to kind of like
demonstrate it in a way that we can grasp

42
00:02:48.059 --> 00:02:49.040
in one sitting.

43
00:02:51.320 --> 00:02:54.870
This code right here,
with all the decorators,

44
00:02:54.870 --> 00:02:58.808
I told you earlier that you don't
necessarily need to use not

45
00:02:58.808 --> 00:03:03.105
standardized JavaScript features like
decorators if you wanna do this.

46
00:03:03.105 --> 00:03:03.865
This is effective.

47
00:03:03.865 --> 00:03:08.350
And if you wanna write this in ES5,
you could write it such, right?

48
00:03:08.350 --> 00:03:09.860
extendObservable.

49
00:03:09.860 --> 00:03:13.720
We can actually even write an overly
simple version of extendObservable as well

50
00:03:13.720 --> 00:03:15.060
if we really wanted to.

51
00:03:15.060 --> 00:03:19.680
But extendObservable seems to take
the current instance object along with

52
00:03:19.680 --> 00:03:24.170
an object of what things you wanna watch
and what they currently are, right?

53
00:03:24.170 --> 00:03:29.300
So firstName and lastName, and then the
actual firstName and lastName as they are.

54
00:03:29.300 --> 00:03:33.880
And, extendObservable,
basically use setters and getters here.

55
00:03:33.880 --> 00:03:36.820
You remember how before
when we had the string?

56
00:03:36.820 --> 00:03:39.900
We had to use set and get, and
when we made that fake observable before,

57
00:03:39.900 --> 00:03:40.710
it had set and get?

58
00:03:40.710 --> 00:03:43.410
But you notice that when we have
the person that was changing the page,

59
00:03:43.410 --> 00:03:46.390
I didn't have to do any of that, because
it's using those computed properties.

60
00:03:46.390 --> 00:03:50.030
It's using the get that we saw very early
on when we started talking about this that

61
00:03:50.030 --> 00:03:55.030
made us abide by the universal access
principle, and set is the same thing,

62
00:03:55.030 --> 00:03:56.620
but for assigning value.

63
00:03:56.620 --> 00:04:01.153
So now, whenever you try to just call it,
like, person.firstName or person.lastName,

64
00:04:01.153 --> 00:04:04.850
it's actually gonna call the get method,
which is hooked into MobX,

65
00:04:04.850 --> 00:04:06.050
which will do everything.

66
00:04:06.050 --> 00:04:09.130
When you call set, it will do that
thing we saw with the console log.

67
00:04:09.130 --> 00:04:11.013
Right?
So we're effectively,

68
00:04:11.013 --> 00:04:14.787
even for our objects,
we are still calling get and set.

69
00:04:14.787 --> 00:04:18.557
But because we have these computed
properties on the classes and objects with

70
00:04:18.557 --> 00:04:21.990
that object of defineProperty,
we don't have to notice it, right?

71
00:04:21.990 --> 00:04:26.480
We get to have a nice API for
dealing with these things.

72
00:04:26.480 --> 00:04:31.265
But if effectively, we are calling these
every single time someone assigns or

73
00:04:31.265 --> 00:04:32.868
gets one of these values.

74
00:04:35.199 --> 00:04:38.813
&gt;&gt; Steve Kinney: And so then, the
decorator where you saw just @observable,

75
00:04:38.813 --> 00:04:40.830
is effectively just this.

76
00:04:40.830 --> 00:04:45.595
It takes the current instance object and
all of the properties that you

77
00:04:45.595 --> 00:04:49.648
called observable, and
it just adds them onto [INAUDIBLE].

