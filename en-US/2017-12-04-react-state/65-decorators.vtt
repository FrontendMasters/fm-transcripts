WEBVTT

1
00:00:03.197 --> 00:00:04.743
&gt;&gt; Steve Kinney: Talk a little bit about,
so

2
00:00:04.743 --> 00:00:08.450
the last one we talked about was
definitely in the spec right now.

3
00:00:08.450 --> 00:00:13.940
We're going to talk about one that
likes to hover between stage zero.

4
00:00:13.940 --> 00:00:15.970
Sometimes maybe getting as
far as stage one or two, and

5
00:00:15.970 --> 00:00:21.130
then back to zero, which is this pattern,
this idea called decorators.

6
00:00:21.130 --> 00:00:27.210
And decorators are actually syntactic
sugar over higher order functions.

7
00:00:27.210 --> 00:00:30.600
And we use higher order components
earlier, where we wrapped a component and

8
00:00:30.600 --> 00:00:31.400
another component.

9
00:00:31.400 --> 00:00:35.780
And gave it extra super powers, like
connection to the Flux or Redux store.

10
00:00:35.780 --> 00:00:40.960
A higher order function is
effectively the same thing.

11
00:00:40.960 --> 00:00:44.020
And so, it's basically a syntactic
sugar allow us to do that.

12
00:00:44.020 --> 00:00:49.429
And there's different ways, a lot of times
we work with it, with object properties.

13
00:00:50.740 --> 00:00:54.920
For instance, we've looked at
the object at defineProperty before.

14
00:00:54.920 --> 00:00:56.360
I showed you the get.

15
00:00:56.360 --> 00:00:58.190
Here we can also see enumerable.

16
00:00:58.190 --> 00:00:59.920
Can they enumerate over it?

17
00:00:59.920 --> 00:01:00.720
Is it writable?

18
00:01:02.080 --> 00:01:06.050
We can tweak those and set those on
objects that are already in existence.

19
00:01:06.050 --> 00:01:07.959
There's also configurable and
a few other options.

20
00:01:09.114 --> 00:01:11.760
But the part of this remember,
the target, the key, and

21
00:01:11.760 --> 00:01:13.650
then we pass through this
thing called a descriptor.

22
00:01:14.770 --> 00:01:19.040
And a decorator, if we wanted to create
a brand new decorator, is just a function.

23
00:01:20.200 --> 00:01:23.820
And the function will take a target,
a key, and a descriptor.

24
00:01:23.820 --> 00:01:26.260
The two parts that we
saw there previously.

25
00:01:26.260 --> 00:01:29.920
And like it could
theoretically be any function.

26
00:01:29.920 --> 00:01:33.180
It could be a function that returns
another function that does these things.

27
00:01:33.180 --> 00:01:34.780
But ideally, it is a function.

28
00:01:34.780 --> 00:01:37.380
But if we were going to try to
create our own different version,

29
00:01:37.380 --> 00:01:38.800
here we have a read only.

30
00:01:38.800 --> 00:01:41.650
And so, read only will actually
take the descriptor of

31
00:01:41.650 --> 00:01:43.300
anything we put it in front of.

32
00:01:43.300 --> 00:01:47.340
And effectively make it so we never have
to write that object a defined property

33
00:01:47.340 --> 00:01:48.340
for things where we don't want to.

34
00:01:48.340 --> 00:01:51.090
It's again, syntactic sugar over
things we didn't want to do.

35
00:01:51.090 --> 00:01:55.310
So we can say, read only and
we'll just set writable to false.

36
00:01:55.310 --> 00:01:57.600
And so
if we wanna make properties read only now,

37
00:01:57.600 --> 00:02:03.610
we can use this decorator
before the method name, right?

38
00:02:03.610 --> 00:02:09.050
And, generally speaking, you're probably
not gonna write a lot of these yourself.

39
00:02:09.050 --> 00:02:13.080
Because you can actually pull and
a whole bunch of these already exist.

40
00:02:13.080 --> 00:02:16.510
So if you're tired of writing
this.handleChange equals

41
00:02:16.510 --> 00:02:18.620
this.handleChange.bindThis.

42
00:02:18.620 --> 00:02:22.400
And you don't like that super
great syntax I was using,

43
00:02:22.400 --> 00:02:24.770
where I was defining it on the class?

44
00:02:24.770 --> 00:02:30.240
There is an autobind decorator that
will automatically take that method,

45
00:02:30.240 --> 00:02:33.290
and go ahead and
bind it to the current object.

46
00:02:33.290 --> 00:02:36.640
There's also just like kind of like
interesting is like deprecate kind of like

47
00:02:36.640 --> 00:02:39.110
do a console warn every
time someone calls it.

48
00:02:39.110 --> 00:02:42.960
And there are just ways of doing
very common things and wrapping

49
00:02:42.960 --> 00:02:46.840
methods in your objects in other functions
to do extra things along the way.

50
00:02:46.840 --> 00:02:50.010
We saw Memo-wise, very expensive.

51
00:02:50.010 --> 00:02:53.310
Transaction you'd only want to do
it based on those inputs once.

52
00:02:53.310 --> 00:02:56.140
The balances, don't let the thing
happen too many times, profile is for

53
00:02:56.140 --> 00:02:56.660
performance.

54
00:02:56.660 --> 00:03:00.895
So this is npm install core-decorators and
there's also another one which is

55
00:03:00.895 --> 00:03:05.565
lodash decorators which is a whole
bunch of these that you can use.

56
00:03:05.565 --> 00:03:09.825
One thing I will say is,
you'll notice that

57
00:03:09.825 --> 00:03:13.165
the create react app examples that we've
been using have all been objected.

58
00:03:13.165 --> 00:03:16.145
These are currently not
necessary in the language.

59
00:03:16.145 --> 00:03:17.738
You do need a babwl plugin.

60
00:03:17.738 --> 00:03:21.790
That babel plugin is currently not
installed in create-react-app.

61
00:03:21.790 --> 00:03:26.310
So you do need to inject and install
your own babel plugins in this case.

62
00:03:26.310 --> 00:03:29.770
We're gonna use decorators with MobX.

63
00:03:29.770 --> 00:03:33.900
You actually don't need to
use decorators to use MobX.

64
00:03:33.900 --> 00:03:40.140
But almost all of the documentation and
all of the examples are using decorators.

65
00:03:40.140 --> 00:03:41.700
And it's kind of a nice syntax,

66
00:03:41.700 --> 00:03:44.670
so I wanted to go with what you
would mostly see consistently.

67
00:03:44.670 --> 00:03:47.888
Cuz other than that, it's just a single
babel plugin, and then you can use it.

