WEBVTT

1
00:00:03.237 --> 00:00:07.593
&gt;&gt; Steve Kinney: So we're going to
implement the Thunk pattern in our

2
00:00:07.593 --> 00:00:09.680
Redux application.

3
00:00:09.680 --> 00:00:12.900
So this is to simulate a server,
that's why we called it API.

4
00:00:12.900 --> 00:00:16.980
It's gonna use local storage,
but it's just as asynchronous.

5
00:00:16.980 --> 00:00:20.250
We're not at this point gonna worry
about catching the errors, per se,

6
00:00:20.250 --> 00:00:21.705
if there's a network failure.

7
00:00:21.705 --> 00:00:25.250
Right, ways that you might think about
doing that is to just display some kind

8
00:00:25.250 --> 00:00:26.130
of error message.

9
00:00:26.130 --> 00:00:29.610
And that would be something you'd
probably keep in the state and

10
00:00:29.610 --> 00:00:31.790
then show in the user interface.

11
00:00:31.790 --> 00:00:35.640
But we're gonna assume a happy path,
so we can see the pattern in play.

12
00:00:36.870 --> 00:00:41.300
So right now, it is not wired up,
my goal is to get it so

13
00:00:41.300 --> 00:00:42.750
that we are saving to the server.

14
00:00:42.750 --> 00:00:46.820
I'm gonna start with
the adding a new item,

15
00:00:46.820 --> 00:00:48.180
that way we have stuff in the database.

16
00:00:48.180 --> 00:00:49.667
The only kind of change that I've made so

17
00:00:49.667 --> 00:00:51.391
far is I've cleared out
those default items.

18
00:00:51.391 --> 00:00:56.798
So you don't see the defaults in here
as well, but we'll add it right now.

19
00:00:56.798 --> 00:00:57.997
We'll say Hello, and

20
00:00:57.997 --> 00:01:02.820
you can see that it's added to the page
cuz we haven't implemented anything yet.

21
00:01:02.820 --> 00:01:06.490
But if I refresh the database,
there's still nothing in there, and

22
00:01:06.490 --> 00:01:10.500
if I refresh the page, it is very gone.

23
00:01:10.500 --> 00:01:12.190
Right, so
this is still the old functionality.

24
00:01:12.190 --> 00:01:14.270
I haven't implemented anything yet,
just all I've done so

25
00:01:14.270 --> 00:01:18.800
far is cleared out the fictitious items
that I had in there, previous examples.

26
00:01:19.800 --> 00:01:22.920
So let's actually go ahead and
start taking a look.

27
00:01:22.920 --> 00:01:26.743
Most of the work that we're gonna
have to do is in the items actions,

28
00:01:26.743 --> 00:01:28.434
like those action creators.

29
00:01:28.434 --> 00:01:32.679
First, we are gonna need to
wire up Redux Thunk, though.

30
00:01:32.679 --> 00:01:37.653
So if we go into the store,
we check this out, we can see that,

31
00:01:37.653 --> 00:01:43.206
we're actually gonna pull in the fancy
one we did with the dev tools,

32
00:01:43.206 --> 00:01:46.788
so we can see everything
along those lines.

33
00:01:46.788 --> 00:01:48.210
So give me one second there

34
00:02:10.687 --> 00:02:12.585
&gt;&gt; Steve Kinney: And
I'll add that to the base branch.

35
00:02:12.585 --> 00:02:15.851
I'm gonna check out a live coding branch
so I can push up what we work on together

36
00:02:15.851 --> 00:02:20.671
right now.
&gt;&gt; Steve Kinney: I'll call

37
00:02:20.671 --> 00:02:25.337
it live-coding-redux-thunk, all right.

38
00:02:36.001 --> 00:02:37.478
&gt;&gt; Steve Kinney: Very cool, all right, so

39
00:02:37.478 --> 00:02:38.785
we have this in place.

40
00:02:38.785 --> 00:02:40.180
So here I have an array for

41
00:02:40.180 --> 00:02:44.730
middleware, remember that we're spreading
that out using applyMiddleware.

42
00:02:44.730 --> 00:02:47.912
If we weren't using the dev tool, like
their argument would literally just be

43
00:02:47.912 --> 00:02:52.160
applyMiddleware, and
the arguments of middleware.

44
00:02:52.160 --> 00:02:55.060
So you can pass them in as the first piece
of middleware, the first argument, so

45
00:02:55.060 --> 00:02:56.040
on and so forth.

46
00:02:56.040 --> 00:02:59.780
This spread operator is taking that
array and spreading it across.

47
00:02:59.780 --> 00:03:03.990
It's almost like using apply with
functions, so we'll have that.

48
00:03:03.990 --> 00:03:09.297
We do need to put in redux thunk,
so that's pretty easy.

49
00:03:09.297 --> 00:03:16.739
We're just gonna pull in the thunk library
from redux thunk, that's pretty great.

50
00:03:16.739 --> 00:03:22.065
So we'll say thunk from 'redux-thunk',

51
00:03:22.065 --> 00:03:26.841
and then we put thunk in the middleware.

52
00:03:26.841 --> 00:03:31.697
And I don't think I have to say
thunk anymore, except that time.

53
00:03:31.697 --> 00:03:33.790
And the time that I
accidentally say it again.

54
00:03:33.790 --> 00:03:39.008
But so now we've installed that
middleware, so now we have support for

55
00:03:39.008 --> 00:03:42.610
thunks, very cool.

56
00:03:42.610 --> 00:03:45.556
So really, the only place we
would work with the database.

57
00:03:45.556 --> 00:03:49.250
We're not gonna persist
the filter actions,

58
00:03:49.250 --> 00:03:52.380
we're not gonna persist that ephemeral
state that's part of the UI.

59
00:03:52.380 --> 00:03:55.910
The only state that we're gonna
persist is the model data.

60
00:03:55.910 --> 00:03:58.315
So let's go ahead, and
like most of the work we're going to do,

61
00:03:58.315 --> 00:04:02.179
it's going to be in this items-actions.

62
00:04:04.120 --> 00:04:09.705
Cool, and so let's get addNewItem

63
00:04:09.705 --> 00:04:13.994
going first and foremost.

64
00:04:13.994 --> 00:04:17.385
Cuz we wanna be able to put stuff in the
database to be able to get stuff out of

65
00:04:17.385 --> 00:04:18.113
the database.

66
00:04:18.113 --> 00:04:20.780
We could get all of them
from the database right now.

67
00:04:20.780 --> 00:04:24.440
But there's nothing in the database and
that's not really rewarding.

68
00:04:24.440 --> 00:04:27.654
So we'll start by putting stuff in, and so

69
00:04:27.654 --> 00:04:31.954
we have an object here that's
pretty straightforward.

70
00:04:31.954 --> 00:04:36.421
What we wanna do is, we want to
asynchronously do the operation that sends

71
00:04:36.421 --> 00:04:39.170
it to the server or
puts it into the database.

72
00:04:39.170 --> 00:04:44.876
And then when that resolves, then we'll
fire the action to update the UI.

73
00:04:44.876 --> 00:04:47.900
And again, I think we talked
about this a little bit earlier.

74
00:04:47.900 --> 00:04:51.070
Different UI patterns will
work a little bit differently.

75
00:04:51.070 --> 00:04:52.930
There's always the optimistic pattern.

76
00:04:52.930 --> 00:04:55.510
I think last time we did this,
we worked with the optimistic pattern.

77
00:04:55.510 --> 00:04:59.688
We did the thing, right, and
we talked about doing the thing, and

78
00:04:59.688 --> 00:05:04.411
if it doesn't work, then maybe pulling
it back, right, it all depends.

79
00:05:04.411 --> 00:05:08.425
At Sangrad, we have some APIs
that could take two minutes, but

80
00:05:08.425 --> 00:05:12.680
almost always succeed, so
we optimistically update the UI.

81
00:05:12.680 --> 00:05:16.464
And then if for some reason it doesn't
go right, we can kinda roll it back or

82
00:05:16.464 --> 00:05:18.282
display an error, it all depends.

83
00:05:18.282 --> 00:05:22.147
If you're offline on the Twitter app,
you can heart different tweets and

84
00:05:22.147 --> 00:05:25.961
it's gonna show them as hearted,
I think that is the past tense of that.

85
00:05:25.961 --> 00:05:26.860
And if it doesn't work out,

86
00:05:26.860 --> 00:05:29.460
they'll go back when you get network
connectivity again, so that's a pattern.

87
00:05:29.460 --> 00:05:32.430
We're going to put stuff in and
then show it.

88
00:05:32.430 --> 00:05:34.140
But depending on the UI
you wanna implement,

89
00:05:34.140 --> 00:05:35.650
you might do something slightly different.

90
00:05:36.920 --> 00:05:40.330
Very cool, so for addNewItem,
we're gonna do this in two steps.

91
00:05:40.330 --> 00:05:41.822
We need to add new items, really,

92
00:05:41.822 --> 00:05:44.452
the only one where we do a little
bit of massaging of the data.

93
00:05:44.452 --> 00:05:46.940
Cuz all we have is the value
from that input field, and

94
00:05:46.940 --> 00:05:48.392
we wanna make the item object.

95
00:05:48.392 --> 00:05:51.209
The rest of them are gonna be very much
just like, wrap the current object,

96
00:05:51.209 --> 00:05:53.690
this is the only one that's
got a little more going on.

97
00:05:53.690 --> 00:06:00.980
Which is we'll say const item is
going to be the default of packed.

98
00:06:00.980 --> 00:06:05.390
And this could happen on the server,
we don't really have server logic per se.

99
00:06:05.390 --> 00:06:08.059
But this could happen on
the server as well, and

100
00:06:08.059 --> 00:06:10.677
depends on what your API looks like,
really.

101
00:06:10.677 --> 00:06:15.680
But I don't really have much of an API at
this point, and we'll pass in the value.

102
00:06:15.680 --> 00:06:20.020
Cool, so I have an item, and now what
we wanna do is we're gonna return,

103
00:06:22.180 --> 00:06:23.162
&gt;&gt; Steve Kinney: We actually, yeah,

104
00:06:23.162 --> 00:06:24.366
we return a new function.

105
00:06:24.366 --> 00:06:28.556
We're gonna return a funk,
thunk, not a funk.

106
00:06:28.556 --> 00:06:31.585
We return a thunk, and

107
00:06:31.585 --> 00:06:36.209
it's going to take the dispatch,

108
00:06:36.209 --> 00:06:40.838
and when we do the Api dash, nope.

109
00:06:40.838 --> 00:06:45.824
Api.addNewItem, add is the one if I check

110
00:06:45.824 --> 00:06:50.795
in here.
&gt;&gt; Steve Kinney: Let's just verify,

111
00:06:50.795 --> 00:06:52.944
yep, add, very cool.

112
00:06:52.944 --> 00:06:55.560
So Api.add, and
we'll add that item in there.

113
00:06:55.560 --> 00:07:01.650
When that promise resolves,
this'll be the item plus a unique ID.

114
00:07:01.650 --> 00:07:05.049
So we want the one back from
the quote-unquote server.

115
00:07:05.049 --> 00:07:06.479
And then we'll just dispatch.

116
00:07:16.427 --> 00:07:23.744
&gt;&gt; Steve Kinney: Let's put.
&gt;&gt; Steve Kinney: That

117
00:07:23.744 --> 00:07:26.674
item.
&gt;&gt; Steve Kinney: Cool,

118
00:07:26.674 --> 00:07:28.637
I do need to import the API.

119
00:07:39.390 --> 00:07:40.750
&gt;&gt; Steve Kinney: Cool, I don't need

120
00:07:40.750 --> 00:07:45.427
this unique ID anymore.
&gt;&gt; Steve Kinney: So

121
00:07:45.427 --> 00:07:50.250
what I expect to see happen is, we already
have the user interface wired up, right.

122
00:07:50.250 --> 00:07:52.134
We're just adding this
thunk in the middle here.

123
00:07:52.134 --> 00:07:57.535
We should say, we want to bring cheese,
now we have an error.

124
00:08:02.393 --> 00:08:04.597
&gt;&gt; Steve Kinney: Includes of undefined for

125
00:08:04.597 --> 00:08:07.247
my filter.unpackedItems.

126
00:08:07.247 --> 00:08:14.487
No, all right, let's check it out.
&gt;&gt; Steve Kinney: What's up?

127
00:08:14.487 --> 00:08:15.586
&gt;&gt; off screen: There is no value on it.

128
00:08:19.356 --> 00:08:20.885
&gt;&gt; Steve Kinney: Let's take a look.

129
00:08:26.536 --> 00:08:27.579
&gt;&gt; Steve Kinney: Interested in the states.

130
00:08:27.579 --> 00:08:33.379
So items, we're saying that there are no
items here when we pull it from the state.

131
00:08:33.379 --> 00:08:37.946
Okay, so we're gonna dispatch this item.

132
00:08:37.946 --> 00:08:45.249
Let's go look at my reducer,
I think I might have a branch issue here.

133
00:08:45.249 --> 00:08:47.524
So we go to my item reducer, and

134
00:08:47.524 --> 00:08:52.957
the item reducer when we add a new item
is actually a little bit different.

135
00:08:52.957 --> 00:08:56.391
So we'll say item, and
that'll be action.item.

136
00:08:56.391 --> 00:08:58.803
I could also just structure it off,
but I didn't.

137
00:08:58.803 --> 00:09:05.731
So we'll pull that in,
we just change the API slightly.

138
00:09:05.731 --> 00:09:09.865
All right, let's try that again.
&gt;&gt; Steve Kinney: It did go in

139
00:09:09.865 --> 00:09:11.561
the database, we can see.

140
00:09:11.561 --> 00:09:14.561
We can see the cheese is in there, but
it's just when we came back when we

141
00:09:14.561 --> 00:09:18.390
dispatched the action, it's expecting the
action to have an ID, a value, and a pack.

142
00:09:18.390 --> 00:09:21.310
But really, we nested it under
action.item, which had an ID,

143
00:09:21.310 --> 00:09:22.300
a value, and a pack.

144
00:09:22.300 --> 00:09:25.332
So we changed that a little bit so
that was a slight problem.

145
00:09:25.332 --> 00:09:27.311
So we'll just add,
what else do I wanna pack, wine?

146
00:09:27.311 --> 00:09:29.961
We're gonna pack cheese, we might as well
pack wine, that's not gonna get me through

147
00:09:29.961 --> 00:09:37.155
TSA, but whatever.
&gt;&gt; Steve Kinney: That I'm gonna leave,

148
00:09:37.155 --> 00:09:42.702
right, I've got a prompt type
that's saying, we gave it a string.

149
00:09:42.702 --> 00:09:45.342
It's of type number, we're fine with that.

150
00:09:45.342 --> 00:09:48.907
Cool, very cool, so what I'm gonna do now

151
00:09:48.907 --> 00:09:53.680
is that date.now that I do
is gonna serve as a number.

152
00:09:53.680 --> 00:09:56.126
The prop type was expecting a string,
cuz we were using it before.

153
00:09:56.126 --> 00:09:58.628
We'll handle that in a second,
I'm not worried about it.

