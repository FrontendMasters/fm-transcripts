WEBVTT

1
00:00:03.723 --> 00:00:05.270
&gt;&gt; Steve Kinney: Sagas are cool, right?

2
00:00:05.270 --> 00:00:06.980
Because they allow like,

3
00:00:06.980 --> 00:00:10.430
we can like at least abstract
our complexity to one place.

4
00:00:10.430 --> 00:00:12.030
It kind of intercepts these things.

5
00:00:12.030 --> 00:00:13.580
But there's more to them, right?

6
00:00:13.580 --> 00:00:17.560
This is like, we could do a full
thing just on sagas in this case.

7
00:00:17.560 --> 00:00:21.749
But we have takeEvery and takeLatest.

8
00:00:21.749 --> 00:00:23.545
takeEvery will look for every event,

9
00:00:23.545 --> 00:00:27.150
takeLatest will cancel ones
that are currently in flight.

10
00:00:27.150 --> 00:00:30.488
So if you're, for instance,
streaming a chat room,

11
00:00:30.488 --> 00:00:33.328
you don't wanna display
the messages twice.

12
00:00:33.328 --> 00:00:35.600
You just wanna get
the latest version of that.

13
00:00:35.600 --> 00:00:37.990
It will actually cancel previous versions.

14
00:00:39.300 --> 00:00:41.010
We can also do other things.

15
00:00:41.010 --> 00:00:43.865
We can take every event and
do stuff with it, right.

16
00:00:43.865 --> 00:00:46.847
So in this case, we are again logging
the actions from the state by

17
00:00:46.847 --> 00:00:49.300
listening to every single
event that comes through.

18
00:00:50.610 --> 00:00:54.820
We can also create, and this is where,
what I think is really cool about

19
00:00:54.820 --> 00:00:57.380
is that we're not gonna get
a chance to go fully into,

20
00:00:57.380 --> 00:01:00.850
is that you have a whole lot of really
interesting concurrency primitives.

21
00:01:00.850 --> 00:01:04.320
Right, so
when we fire off a promise normally.

22
00:01:04.320 --> 00:01:06.670
We don't really have the ability
to cancel that promise.

23
00:01:06.670 --> 00:01:08.679
So a thunk, you thought you dispatched it.

24
00:01:08.679 --> 00:01:10.670
It's going, you have that then and catch.

25
00:01:10.670 --> 00:01:12.770
You can't say actually stop.

26
00:01:12.770 --> 00:01:15.730
Right, so this is how we might
implement a cancellable request

27
00:01:15.730 --> 00:01:18.150
where we will take the next request lyft.

28
00:01:18.150 --> 00:01:19.500
And then we'll race.

29
00:01:19.500 --> 00:01:22.440
Right, whichever one of these
two things happens first,

30
00:01:22.440 --> 00:01:23.940
is what we're gonna go with.

31
00:01:23.940 --> 00:01:30.141
Either we'll get the lift back,
or we'll get the request back,

32
00:01:30.141 --> 00:01:34.710
or we'll get the next cancel event, right?

33
00:01:34.710 --> 00:01:39.790
And at which point we'll no longer do
anything when that API resolves, right?

34
00:01:39.790 --> 00:01:43.280
So we can actually have all
sorts of different like

35
00:01:43.280 --> 00:01:44.470
race condition's concurrency.

36
00:01:44.470 --> 00:01:47.374
That's not really possible in
a lot of other situations.

