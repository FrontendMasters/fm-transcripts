WEBVTT

1
00:00:03.389 --> 00:00:07.450
&gt;&gt; Steve Kinney: What we need to next
is figure out this applyMiddleware,

2
00:00:07.450 --> 00:00:11.848
which is one that you will not
find yourself using very often,

3
00:00:11.848 --> 00:00:17.380
except for when you bring in
Middleware and you wish to apply it.

4
00:00:17.380 --> 00:00:21.056
And again, it's really just a take
on compose, which is, it will allow

5
00:00:21.056 --> 00:00:24.871
you to kind of go in and, like,
build intermediary steps in this process.

6
00:00:24.871 --> 00:00:28.064
Because right now, you have
the dispatch is going to the store,

7
00:00:28.064 --> 00:00:30.030
this whole process is going along.

8
00:00:30.030 --> 00:00:34.330
There could be situations where we
would like to step in the middle and

9
00:00:34.330 --> 00:00:35.010
do something.

10
00:00:37.070 --> 00:00:41.340
Because I'm not very creative, we're gonna
start with the worlds simplest example,

11
00:00:41.340 --> 00:00:45.180
which is, we'd like to log more
things to the console, right?

12
00:00:45.180 --> 00:00:47.410
What's a few more console I was gonna do?

13
00:00:47.410 --> 00:00:48.781
So let's create a function called logger.

14
00:00:50.495 --> 00:00:54.457
&gt;&gt; Steve Kinney: And it's gonna get
an object that has dispatch and

15
00:00:54.457 --> 00:00:56.070
the get state on it.

16
00:00:56.070 --> 00:00:59.720
We just want the get state in this case,
cuz that's what we're gonna log.

17
00:00:59.720 --> 00:01:02.030
And so this function,
you gotta put an equal sign here.

18
00:01:03.260 --> 00:01:09.150
This function is gonna go ahead and
it's gonna return another function.

19
00:01:09.150 --> 00:01:12.500
That's gonna take the next thing that's
gonna happen in the chain, right?

20
00:01:12.500 --> 00:01:14.510
Cuz you can chain together Middleware.

21
00:01:14.510 --> 00:01:18.590
So it's gonna take whatever the next
middleware that's registered is.

22
00:01:18.590 --> 00:01:20.964
And then we'll get the action.

23
00:01:23.624 --> 00:01:27.520
&gt;&gt; Steve Kinney: So it's like, current
function on top of curried function.

24
00:01:27.520 --> 00:01:28.740
Unless you're writing middle,

25
00:01:28.740 --> 00:01:31.810
if this stresses you out, unless you're
writing your own custom middleware,

26
00:01:31.810 --> 00:01:34.790
it's not something you need
to know in order to react.

27
00:01:34.790 --> 00:01:37.610
It's something you need to know if
you want to write custom middleware.

28
00:01:38.650 --> 00:01:41.870
So we have, at this point when
we get inside the function

29
00:01:41.870 --> 00:01:45.040
we're definitely gonna have
the current state of the store.

30
00:01:45.040 --> 00:01:46.980
We will definitely have the action.

31
00:01:46.980 --> 00:01:48.580
And we'll have whatever's next.

32
00:01:48.580 --> 00:01:53.170
Your only responsibility inside of
this middleware is to pass the action

33
00:01:53.170 --> 00:01:55.120
to the next piece of middleware.

34
00:01:55.120 --> 00:01:56.390
So theoretically,

35
00:01:56.390 --> 00:01:59.780
you have done your job if this is
the entire piece of your middleware.

36
00:02:01.380 --> 00:02:05.000
I've serious questions about what job you
set out to do, if this is your middleware.

37
00:02:05.000 --> 00:02:06.620
Because all you are doing
is taking the action,

38
00:02:06.620 --> 00:02:08.280
taking the next piece of middleware and

39
00:02:08.280 --> 00:02:09.840
giving the action to the next
piece of middleware.

40
00:02:09.840 --> 00:02:13.710
I guess you are being a good citizen but
that's really about it.

41
00:02:13.710 --> 00:02:21.940
So what we could also do is we
could console log, middleware.

42
00:02:21.940 --> 00:02:25.478
And we'll do the getState and the action.

43
00:02:27.738 --> 00:02:29.490
&gt;&gt; Steve Kinney: Very cool.

44
00:02:29.490 --> 00:02:32.049
And I can do stuff below, as well, right?

45
00:02:32.049 --> 00:02:34.016
If I want to find stuff
that happens later, but

46
00:02:34.016 --> 00:02:36.236
we're gonna just keep it really simple for
now, and

47
00:02:36.236 --> 00:02:39.829
I'm just gonna break this on some lines so
that everything's a little bit clearer.

48
00:02:44.083 --> 00:02:46.000
&gt;&gt; Steve Kinney: All right, very cool.

49
00:02:46.000 --> 00:02:52.380
So this is my very awesome middleware and
I think that'll be good.

50
00:02:54.090 --> 00:02:55.440
We can hold onto this as well.

51
00:02:55.440 --> 00:02:58.330
This will actually return something
we can take a look at in a second.

52
00:02:58.330 --> 00:02:59.815
Let's actually do that.

53
00:03:07.349 --> 00:03:10.183
&gt;&gt; Steve Kinney: We'll console,log
this value and it'll just return it.

54
00:03:10.183 --> 00:03:13.334
All right, so we have this,
we have middleware,

55
00:03:13.334 --> 00:03:17.690
creating a piece of middleware
is not necessarily enough.

56
00:03:17.690 --> 00:03:21.290
The last thing that you need to do is
obviously is, the whole reason that got us

57
00:03:21.290 --> 00:03:26.910
on this middleware journey is we
need to apply to the middleware.

58
00:03:26.910 --> 00:03:29.832
The middleware must be applied, all right.

59
00:03:29.832 --> 00:03:33.621
So,
&gt;&gt; Steve Kinney: Let's

60
00:03:33.621 --> 00:03:37.450
go ahead,
&gt;&gt; Steve Kinney: And grab this.

61
00:03:37.450 --> 00:03:39.000
Turns out create store.

62
00:03:39.000 --> 00:03:40.000
Where's my create store?

63
00:03:40.000 --> 00:03:41.729
Let's get rid of it, so
we can create a new one.

64
00:03:45.729 --> 00:03:49.720
&gt;&gt; Steve Kinney: Let's start bring it
down, so I have everything in scope.

65
00:03:49.720 --> 00:03:52.230
Crystal actually takes three arguments.

66
00:03:52.230 --> 00:03:55.840
It takes the var reducer,
unless you cheated and

67
00:03:55.840 --> 00:03:57.660
combined reducers to make one reducer.

68
00:03:57.660 --> 00:04:02.300
So the reducer it takes the second
argument is an initial state of the world.

69
00:04:02.300 --> 00:04:05.917
We did that with our individual reducers,
but you could also say like, her.

70
00:04:05.917 --> 00:04:10.400
Here is the entire state tree that
I would like you to start out with.

71
00:04:10.400 --> 00:04:12.083
So we'll just go ahead and
give that an empty object for now.

72
00:04:12.083 --> 00:04:17.379
And then the last thing is
the ability to apply middlewares.

73
00:04:21.127 --> 00:04:23.840
&gt;&gt; Steve Kinney: And
I'll put in our logger.

74
00:04:23.840 --> 00:04:29.595
And applyMiddleware can actually
take multiple arguments

75
00:04:29.595 --> 00:04:36.509
of middleware that it will apply
using compose and we're full circle.

76
00:04:39.862 --> 00:04:42.820
&gt;&gt; Steve Kinney: I'm gonna
bring up the logger.

77
00:04:42.820 --> 00:04:46.808
My only worry here, cuz I'm writing
everything in one file that I'm gonna have

78
00:04:46.808 --> 00:04:48.248
stuff like in a wrong order.

79
00:04:52.075 --> 00:04:57.355
&gt;&gt; Steve Kinney: But I got to watch a live
code debug order in the giant file.

80
00:04:57.355 --> 00:04:58.800
&gt;&gt; [INAUDIBLE].

81
00:04:58.800 --> 00:05:01.216
&gt;&gt; Steve Kinney: So, we've got our store.

82
00:05:01.216 --> 00:05:05.636
We'll say add(5).

83
00:05:10.005 --> 00:05:11.025
&gt;&gt; Steve Kinney: We get
that object back out.

84
00:05:23.054 --> 00:05:26.120
&gt;&gt; Steve Kinney: Let's bring some stuff
down, otherwise we'll take a quick

85
00:05:26.120 --> 00:05:28.955
technical break,
as I debug my middleware real quick.

86
00:05:32.240 --> 00:05:34.693
&gt;&gt; Steve Kinney: We've also got
the logger, got all this stuff going on.

87
00:05:34.693 --> 00:05:37.399
Let's check out the store.getState.

88
00:05:41.703 --> 00:05:43.600
&gt;&gt; Steve Kinney: Cool.

89
00:05:43.600 --> 00:05:46.730
Lets take a few minutes to quickly debug
this and then we will come right back.

90
00:05:48.320 --> 00:05:53.090
So we did resolve the error, which is
exactly what I warned myself about,

91
00:05:53.090 --> 00:05:57.890
which is originally I had tried
to use the error message reducer.

92
00:05:57.890 --> 00:06:01.970
In the createStore above
where I had defined it.

93
00:06:01.970 --> 00:06:05.250
So it wasn't defined,
which broke the world.

94
00:06:05.250 --> 00:06:08.530
So we can see here, that we are logging
all sorts of stuff to the console

95
00:06:09.620 --> 00:06:13.440
about the action that it received.

96
00:06:13.440 --> 00:06:17.500
What we did in the reducer,
the whole subscription that happened.

97
00:06:17.500 --> 00:06:18.680
We've seen a whole bunch of stuff.

98
00:06:18.680 --> 00:06:21.890
Now logger, you will probably
not write a logger middleware.

99
00:06:21.890 --> 00:06:26.980
Chances are like other then if you're
trying to demonstrate applyMiddleware to

100
00:06:26.980 --> 00:06:28.210
a group of people,

101
00:06:28.210 --> 00:06:30.820
like you might not necessarily need
to write any middleware, right?

102
00:06:30.820 --> 00:06:32.300
You might need to use middleware.

103
00:06:32.300 --> 00:06:35.550
You will actually see two different
middlewares that we'll use today.

104
00:06:35.550 --> 00:06:38.590
And that's what we'll use applyMiddleware
to take somebody else's middleware

105
00:06:38.590 --> 00:06:39.140
and apply it.

106
00:06:39.140 --> 00:06:43.750
So if like, a function that took a next
function and then returned a function that

107
00:06:43.750 --> 00:06:45.890
took an action that then did
stuff with the next function and

108
00:06:45.890 --> 00:06:49.340
the action made you like
your palms a little sweaty.

109
00:06:49.340 --> 00:06:52.480
Don't worry, like, likely unless
you where writing middleware,

110
00:06:52.480 --> 00:06:54.387
that is not something you
are gonna need to do, but

111
00:06:54.387 --> 00:06:59.258
like now at least you know what is
happening under the hood if you need to.

112
00:06:59.258 --> 00:07:08.440
So, here's the thing, Redux is functions
and actions, effectively, right?

113
00:07:08.440 --> 00:07:12.251
And a really great part about that is you
know it's easy to test, functions and

114
00:07:12.251 --> 00:07:12.784
actions.

115
00:07:12.784 --> 00:07:16.180
Right, there is nothing in
some weird closure scope.

116
00:07:16.180 --> 00:07:19.120
There is nothing encapsulated
inside of a component.

117
00:07:19.120 --> 00:07:21.970
There are,
you give an object to a function and

118
00:07:21.970 --> 00:07:23.670
you see what came out the other end.

119
00:07:23.670 --> 00:07:25.240
You wanna test the reducer?

120
00:07:25.240 --> 00:07:27.840
Okay, that's a function,
it takes into objects.

121
00:07:27.840 --> 00:07:30.230
Take the function,
passing the two objects,

122
00:07:30.230 --> 00:07:33.000
see if you got what you wanted to get.

123
00:07:33.000 --> 00:07:35.780
It's very easy to test our redux code.

124
00:07:35.780 --> 00:07:41.306
And on that theme,
we're going to play with some Redux test.

