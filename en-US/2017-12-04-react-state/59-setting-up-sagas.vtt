WEBVTT

1
00:00:02.699 --> 00:00:05.264
&gt;&gt; Steve Kinney: So
there's some pieces to this.

2
00:00:05.264 --> 00:00:07.916
We can import our SAGA file.

3
00:00:07.916 --> 00:00:13.294
That's a local file that we made which
is going to contain all of our SAGAs.

4
00:00:13.294 --> 00:00:17.360
We haven't seen that file yet,
we will subsequently.

5
00:00:17.360 --> 00:00:21.200
We create the SAGA middleware,
we add it to our middleware array.

6
00:00:21.200 --> 00:00:23.183
And then, if you look at the very bottom,

7
00:00:23.183 --> 00:00:27.620
in the same way when you saw that code
that was effectively a way but not a way.

8
00:00:27.620 --> 00:00:29.630
And we have to kick off the generator.

9
00:00:29.630 --> 00:00:31.610
We have to do the same thing
with our sagaMiddleware.

10
00:00:31.610 --> 00:00:36.130
We have to kick off the generator,
so it can start running and

11
00:00:36.130 --> 00:00:37.830
pausing and stuff along those lines.

12
00:00:37.830 --> 00:00:39.720
All right, what does the saga look like?

13
00:00:39.720 --> 00:00:41.520
So here's a really simple one.

14
00:00:41.520 --> 00:00:45.510
A root saga is this base generator,
it's going to theoretically,

15
00:00:45.510 --> 00:00:49.530
it can yield back an array of
all of the other ones, right?

16
00:00:49.530 --> 00:00:55.170
And so, by calling virtual user from API,
that generator is kicked off, right?

17
00:00:55.170 --> 00:00:58.250
We return a generator object and
it's going to use all of these, so

18
00:00:58.250 --> 00:01:00.950
we had more things going on,
we have more things on array.

19
00:01:03.450 --> 00:01:05.000
Okay, so then in the middle.

20
00:01:05.000 --> 00:01:12.020
All right, we see we have takeEvery,
and takeEvery comes from redux saga and

21
00:01:12.020 --> 00:01:17.250
it's saying every time
a REQUEST_NEW_FRIEND action

22
00:01:17.250 --> 00:01:22.990
comes through the pipeline, I would really
like you to go make an APR request, right?

23
00:01:22.990 --> 00:01:26.790
So we say, every time you hear one of
these, every time, keep listening for

24
00:01:26.790 --> 00:01:27.830
all of these different actions.

25
00:01:27.830 --> 00:01:34.190
Every time a request new friend comes
along, fire an API request, cool.

26
00:01:36.250 --> 00:01:43.370
Make API request, make CAPI request,
and then fires that second one.

27
00:01:43.370 --> 00:01:49.230
And there's some strange syntax
here where you can see that

28
00:01:49.230 --> 00:01:53.640
we're using call and put, and
that's effectively because

29
00:01:53.640 --> 00:01:57.330
that's handling the pausing and
kicking off of the generator, right?

30
00:01:57.330 --> 00:02:01.340
So instead of saying
Api.requestnewfriend.then, it is

31
00:02:01.340 --> 00:02:05.600
effectively doing that thing that we saw
before on that code example where I made

32
00:02:05.600 --> 00:02:09.300
the API request, it resolved, and then
I kicked the generator back off again.

33
00:02:09.300 --> 00:02:11.110
It's doing all of that for us, right?

34
00:02:11.110 --> 00:02:14.797
So we don't have to manually do that cuz
that code was not the proudest code I've

35
00:02:14.797 --> 00:02:15.961
ever written in my life.

36
00:02:15.961 --> 00:02:18.842
And when you see ugly code,
you can either own it or

37
00:02:18.842 --> 00:02:21.928
you can abstract it away in a nice,
pretty shell, and

38
00:02:21.928 --> 00:02:25.715
just make believe that the messy
bits of your code aren't there.

39
00:02:25.715 --> 00:02:27.926
And so this library will extract,

40
00:02:27.926 --> 00:02:31.826
kicking the generator off when
the promise resolves for us.

41
00:02:31.826 --> 00:02:37.259
So we call the Api.requestNewFriend.

42
00:02:37.259 --> 00:02:39.979
When we get that back, we can go ahead and

43
00:02:39.979 --> 00:02:45.250
we can put which is dispatch
effectively that new action, all right?

44
00:02:45.250 --> 00:02:51.480
So I'm gonna do an example
inside of Jet Setter.

45
00:02:51.480 --> 00:02:53.980
Now Jet Setter's got
a lot of things going on.

46
00:02:53.980 --> 00:02:57.390
I'm just going to replace
one of the actions.

47
00:02:57.390 --> 00:02:58.690
The nice part about sagas and

48
00:02:58.690 --> 00:03:02.520
thunks is that like other things we've
talked about, you can use both of them.

49
00:03:02.520 --> 00:03:04.520
All right, you can mix and match.

50
00:03:04.520 --> 00:03:08.110
You don't have to be like I'm all
about sagas or I'm all about thunks.

51
00:03:08.110 --> 00:03:13.856
If there's a thing where saga is a better
solution to the problem for you, do that.

52
00:03:13.856 --> 00:03:16.660
But if thunk is a perfectly
fine solution and

53
00:03:16.660 --> 00:03:19.480
you want the simplicity,
go do that, right?

54
00:03:19.480 --> 00:03:22.080
It's up to you to kinda make
these decisions which I know

55
00:03:22.080 --> 00:03:26.290
it's unfortunate that I don't have
a perfect right answer for you, but

56
00:03:26.290 --> 00:03:29.450
it does mean that you
have the flexibility.

57
00:03:29.450 --> 00:03:32.820
The reason they pay us the big bucks is
cuz if this was easy and there were rules,

58
00:03:32.820 --> 00:03:36.430
it would just be data entry and
nobody would pay us to do this stuff.

59
00:03:36.430 --> 00:03:41.360
So unfortunately,
the reason that we're all doing this for

60
00:03:41.360 --> 00:03:43.330
a living is because we have
to make these hard choices.

61
00:03:44.380 --> 00:03:46.610
All right, give me one second to set up.

62
00:03:46.610 --> 00:03:47.430
&gt;&gt; Speaker 2: I have a question.

63
00:03:47.430 --> 00:03:48.008
&gt;&gt; Steve Kinney: Yeah.
&gt;&gt; Speaker 2: Can we

64
00:03:48.008 --> 00:03:52.140
get an example of where you would
want to use a saga over a thunk?

65
00:03:52.140 --> 00:03:56.140
&gt;&gt; Steve Kinney: Yeah, I think a lot of
it, for me, comes down to testing, and

66
00:03:56.140 --> 00:03:58.080
a separation of all this network stuff.

67
00:03:58.080 --> 00:03:59.380
&gt;&gt; Speaker 2: It's adjusting to that case.

68
00:03:59.380 --> 00:04:00.420
&gt;&gt; Steve Kinney: Yeah.
&gt;&gt; Speaker 2: Okay.

69
00:04:00.420 --> 00:04:04.440
&gt;&gt; Steve Kinney: So that's the kind of
the biggest example, but it is definitely,

70
00:04:04.440 --> 00:04:07.770
there is like a lot more ceremony than
just simply dispatching an object, right?

71
00:04:07.770 --> 00:04:10.760
So it is like,
if you know in the application

72
00:04:10.760 --> 00:04:14.030
I work on in a day to day basis,
we actually do surprisingly little async.

73
00:04:16.360 --> 00:04:18.900
The API just happens to give
you everything you need,

74
00:04:18.900 --> 00:04:23.400
whether you want it or
not almost to a disturbing degree.

75
00:04:23.400 --> 00:04:28.580
So once we have everything, we basically
then saving that object all over again.

76
00:04:28.580 --> 00:04:31.040
So we're basically doing
one way in the editor.

77
00:04:31.040 --> 00:04:32.700
There's one async action.

78
00:04:32.700 --> 00:04:37.110
So for us, I don't know if it's
worth the amount to put in place

79
00:04:37.110 --> 00:04:39.320
like setting up that one
mock is not that bad.

80
00:04:39.320 --> 00:04:43.825
But if we were doing something where
there's a lot more data going back and

81
00:04:43.825 --> 00:04:47.167
forth, if we're building
a very high network IO app,

82
00:04:47.167 --> 00:04:52.343
then that's all of a sudden, the cost
benefit analysis switches rapidly, right?

