WEBVTT

1
00:00:03.366 --> 00:00:07.124
&gt;&gt; Steve Kinney: I want to be
able to check these buttons or

2
00:00:07.124 --> 00:00:09.560
remove the item, right?

3
00:00:10.830 --> 00:00:16.697
Where does the list of items live?
&gt;&gt; Steve Kinney: The application

4
00:00:16.697 --> 00:00:18.840
component, right?

5
00:00:18.840 --> 00:00:21.360
What's in the middle between
the individual item and

6
00:00:21.360 --> 00:00:22.250
the application component.

7
00:00:24.170 --> 00:00:25.430
The item's list, right?

8
00:00:25.430 --> 00:00:26.024
The list of the items.
So

9
00:00:26.024 --> 00:00:31.033
this means that in order to get that event
listener down to the individual item,

10
00:00:31.033 --> 00:00:35.967
I've got to start going down from
the application, down to the item's list,

11
00:00:35.967 --> 00:00:38.990
from the item's list down to the item,
right?

12
00:00:38.990 --> 00:00:41.520
And then that even we'll get
called all the way back up.

13
00:00:42.850 --> 00:00:45.970
All right, who's ready to have fun?

14
00:00:45.970 --> 00:00:48.620
Let's do it, cool.

15
00:00:48.620 --> 00:00:49.940
So let's go ahead and

16
00:00:49.940 --> 00:00:54.454
we'll define these in application.
&gt;&gt; Steve Kinney: And

17
00:00:54.454 --> 00:00:57.950
let's go back up here, cool.

18
00:00:57.950 --> 00:01:02.955
So we have addItem, and
let's call this one let's have

19
00:01:02.955 --> 00:01:08.187
it removing an item first,
because that's easy to name.

20
00:01:08.187 --> 00:01:13.630
Remove an item, and we'll say.

21
00:01:13.630 --> 00:01:16.300
Now we have it in an array because
an array is really easy to work with.

22
00:01:16.300 --> 00:01:19.615
It ultimately means we're going to
have to iterate it through every time,

23
00:01:19.615 --> 00:01:22.612
like if you were trying to, if you
knew this was going to get large and

24
00:01:22.612 --> 00:01:26.350
you wanted to find one quick like you
might be better off with an object.

25
00:01:26.350 --> 00:01:27.699
Right?
Cuz that way you have keys and

26
00:01:27.699 --> 00:01:30.920
values and you can be like hey I wanna
remove this key from the object.

27
00:01:30.920 --> 00:01:34.630
That would technically probably be more
performant and in the larger application.

28
00:01:34.630 --> 00:01:36.950
Something you should definitely do.

29
00:01:36.950 --> 00:01:41.890
But adding a lot of extra like code to
this already slightly [INAUDIBLE] example.

30
00:01:41.890 --> 00:01:46.640
So we're gonna continue using an array,
but definitely take a mental

31
00:01:46.640 --> 00:01:51.610
bookmark that having an object and
removing keys might be more performing.

32
00:01:53.040 --> 00:01:59.402
Alright, lets say this dot set state,
capitalize set state even,

33
00:01:59.402 --> 00:02:06.337
and really what we want to do is set
the state to the array of items minus 1.

34
00:02:06.337 --> 00:02:12.980
Does anyone have a suggestion of how I get
an array with everything but one item?

35
00:02:12.980 --> 00:02:13.880
Filter it out, right?

36
00:02:13.880 --> 00:02:16.340
That'll work.
So then we'll say.

37
00:02:19.740 --> 00:02:22.120
And how would I find that one?

38
00:02:22.120 --> 00:02:24.810
I have an item that I'm looking for.

39
00:02:24.810 --> 00:02:27.335
Right, I'm going through
each one of them and

40
00:02:27.335 --> 00:02:31.690
I have to name this variable something
else or I can call this one itemToRemove.

41
00:02:33.440 --> 00:02:36.030
And we'll go through all the items and

42
00:02:36.030 --> 00:02:39.970
if you have an ID that matches
the one I'm looking for guess what?

43
00:02:39.970 --> 00:02:42.009
You're leaving the array.

44
00:02:42.009 --> 00:02:45.789
A better way to put that with Filter is If
you don't have the ID that we're looking

45
00:02:45.789 --> 00:02:48.080
for, we will pass over you and
go to the next one.

46
00:02:48.080 --> 00:02:49.730
Right.
You're spared and

47
00:02:49.730 --> 00:02:53.100
like we'll keep going until we find
the one that we're looking for.

48
00:02:53.100 --> 00:02:57.310
So we'll say each individual one,

49
00:02:57.310 --> 00:03:02.600
it does not equal the item to remove,
dot ID.

50
00:03:03.920 --> 00:03:05.340
Alright, very cool.

51
00:03:05.340 --> 00:03:10.460
So, I have it in application, but
it needs to start going down each line.

52
00:03:10.460 --> 00:03:12.260
This is going to be slightly problematic.

53
00:03:12.260 --> 00:03:18.350
I also need, I did not have a semicolon.

54
00:03:18.350 --> 00:03:22.374
Alright, so I'm going to pass this down to
each of the items list, and then that's

55
00:03:22.374 --> 00:03:27.044
gonna have to pass it down to each item.
&gt;&gt; Steve Kinney: So

56
00:03:27.044 --> 00:03:31.834
what we'll do in this case is we'll
add another prop here and we'll say,

57
00:03:31.834 --> 00:03:37.540
on remove,
&gt;&gt; Steve Kinney: This.removeItem, and

58
00:03:37.540 --> 00:03:42.743
then we'll pass it down to the other one.
&gt;&gt; Steve Kinney: All right,

59
00:03:42.743 --> 00:03:45.387
cool, that gets us one step there,
but not all the way,

60
00:03:45.387 --> 00:03:48.100
because we've gotta go down another layer.

61
00:03:48.100 --> 00:03:53.840
So we'll go to the items list,
&gt;&gt; Steve Kinney: Plural.

62
00:03:53.840 --> 00:03:57.170
And you can see that it is
passing this default one,

63
00:03:57.170 --> 00:03:59.260
this empty function down that way.

64
00:03:59.260 --> 00:04:02.600
Basically, so my code didn't blow up cuz
the event listeners aren't really wired

65
00:04:02.600 --> 00:04:04.390
up, os here's just a no-op.

66
00:04:04.390 --> 00:04:06.960
So we know that now, this is a prop,

67
00:04:06.960 --> 00:04:10.486
it's this.props to onRemove.
&gt;&gt; Steve Kinney: So

68
00:04:10.486 --> 00:04:17.202
we'll bring it in.
&gt;&gt; Steve Kinney: Cool,

69
00:04:17.202 --> 00:04:21.560
and What I'm gonna do is
I have two choices here.

70
00:04:21.560 --> 00:04:26.710
I can provide it the ID now, or
I can let it pass the ID in,

71
00:04:26.710 --> 00:04:30.230
and then pass it out on the way back up.

72
00:04:30.230 --> 00:04:34.330
I'm gonna opt for,
I have the ID already right here.

73
00:04:34.330 --> 00:04:40.735
So I'm gonna say hey,
&gt;&gt; Steve Kinney: We have props,

74
00:04:40.735 --> 00:04:42.949
and we'll just pull it out on onRemove.

75
00:04:51.660 --> 00:04:56.110
The item id, so when they click this,
we'll pass it in, so

76
00:04:56.110 --> 00:05:00.330
when they click the remove link on
the item, that's gonna be passed in from

77
00:05:00.330 --> 00:05:03.070
the items, which is gonna go
up to the application, right?

78
00:05:03.070 --> 00:05:05.510
Again, this is a small application.

79
00:05:05.510 --> 00:05:09.000
This doesn't get any better
as your application grows.

80
00:05:09.000 --> 00:05:10.570
So let's try that out,
make sure I didn't have some kind of bug.

81
00:05:10.570 --> 00:05:12.710
&gt;&gt; Speaker 2: You're passing by ID,

82
00:05:12.710 --> 00:05:16.420
but you were expecting [INAUDIBLE]
&gt;&gt; Steve Kinney: Let's check.

83
00:05:22.617 --> 00:05:23.784
&gt;&gt; Steve Kinney: So remove,

84
00:05:23.784 --> 00:05:28.568
we alsp have to say,
this.props has to go down as

85
00:05:28.568 --> 00:05:35.515
well.
&gt;&gt; Steve Kinney: You're right,

86
00:05:35.515 --> 00:05:43.895
I need the whole item.
&gt;&gt; Steve Kinney: So

87
00:05:43.895 --> 00:05:50.980
we'll fix that here as well.
&gt;&gt; Steve Kinney: And we'll head back over.

88
00:05:52.050 --> 00:05:55.060
All right, so
now I can remove the phone charger.

89
00:05:55.060 --> 00:05:58.720
You can see that I did derive
the count from the list of items.

90
00:05:58.720 --> 00:06:01.320
I didn't set it manual
each time I had an item.

91
00:06:01.320 --> 00:06:02.980
They're saying, hey,
you got an array of items.

92
00:06:02.980 --> 00:06:05.050
Go ahead and see how long it is.

93
00:06:05.050 --> 00:06:06.790
So that state's derived.

94
00:06:06.790 --> 00:06:07.630
I can remove one.

95
00:06:07.630 --> 00:06:09.840
I can add one.

96
00:06:09.840 --> 00:06:11.150
I also need to be able to check off one.

97
00:06:11.150 --> 00:06:14.306
All right?
And that's gonna be very similar to how we

98
00:06:14.306 --> 00:06:15.826
did it with remove.

99
00:06:15.826 --> 00:06:17.424
I'm going to change it up slightly,

100
00:06:17.424 --> 00:06:20.320
which is I'm going to pass the function
all the way down this time.

101
00:06:21.350 --> 00:06:23.720
Obviously what you want
to be is consistent,

102
00:06:23.720 --> 00:06:25.720
I'm just going to demonstrate both, right?

103
00:06:25.720 --> 00:06:30.410
You can kind of, we can see the difference
but really, you should both removing and

104
00:06:30.410 --> 00:06:31.960
checking off the same way.

105
00:06:31.960 --> 00:06:36.140
Alright, I'll go back
to my application And

106
00:06:36.140 --> 00:06:40.320
I'm gonna make a new
one called toggleItem.

107
00:06:46.247 --> 00:06:47.898
&gt;&gt; Steve Kinney: All right, so

108
00:06:47.898 --> 00:06:53.010
I have the problem again, I have an array.

109
00:06:53.010 --> 00:06:55.189
What's the easiest way to
change one in an array?

110
00:06:59.310 --> 00:07:00.408
&gt;&gt; Steve Kinney: I could map over it and

111
00:07:00.408 --> 00:07:02.909
say, hey,
if you're the one I'm looking for,

112
00:07:02.909 --> 00:07:06.750
I wanna replace you a new one
otherwise stay the way you where.

113
00:07:06.750 --> 00:07:08.280
So we'll try that out.

114
00:07:08.280 --> 00:07:11.670
So we'll have toggle item and
what we'll do is we'll say

115
00:07:16.053 --> 00:07:21.985
&gt;&gt; Steve Kinney: So this.state.items.

116
00:07:25.840 --> 00:07:26.868
&gt;&gt; Steve Kinney: Map over all of

117
00:07:26.868 --> 00:07:31.625
the items.
&gt;&gt; Steve Kinney: If the item

118
00:07:31.625 --> 00:07:36.410
ID Does not equal items to toggle.

119
00:07:37.820 --> 00:07:42.702
Just don't touch it.
&gt;&gt; Steve Kinney: Otherwise,

120
00:07:42.702 --> 00:07:45.061
we'll return the copy of the item, so

121
00:07:45.061 --> 00:07:49.820
remember when use the spread operator
to copy an array, guess what?

122
00:07:49.820 --> 00:07:52.600
It also works on objects as well.

123
00:07:52.600 --> 00:08:00.336
So what I'll do is I'll just say
&gt;&gt; Steve Kinney: If I

124
00:08:00.336 --> 00:08:03.498
do this right here it will copy
all of the properties right but

125
00:08:03.498 --> 00:08:07.630
I can also define extra properties and
those will overwrite previous ones.

126
00:08:07.630 --> 00:08:12.330
What I wanna point out here is
Xavier asked me a question during

127
00:08:12.330 --> 00:08:16.370
when we're working he's like Hey
if I use said state and I only

128
00:08:16.370 --> 00:08:20.720
pass it one property I want to change,
does it clear out all the other ones?

129
00:08:20.720 --> 00:08:21.250
No.

130
00:08:21.250 --> 00:08:25.779
It only replaces keys that are in
the object you pass the said state.

131
00:08:25.779 --> 00:08:30.710
And effectively that's working the same
way that this spread operator works.

132
00:08:30.710 --> 00:08:33.510
Which is it's going to take all the keys
to items to toggle and then whatever I

133
00:08:33.510 --> 00:08:38.290
pass in additionally we'll just copy,
previous ones on the Adams toggle.

134
00:08:38.290 --> 00:08:39.630
Right?
So, we'll just overwrite

135
00:08:39.630 --> 00:08:40.860
just the keys that we said.

136
00:08:41.870 --> 00:08:49.800
So, we'll say packed equals,
and I'll just flip that.

137
00:08:50.990 --> 00:08:56.230
So, if you're not the Adam we're looking
for, we'll add the ID here Pass over it.

138
00:08:56.230 --> 00:08:59.090
If you are the item that we're looking
for, then we want to flip this.

139
00:09:01.000 --> 00:09:08.426
And then we will this.setState.
&gt;&gt; Steve Kinney: And

140
00:09:08.426 --> 00:09:13.320
if you're starting to think, this is
a little bit tedious, that's the point.

141
00:09:13.320 --> 00:09:16.000
Right, the point is that we have
to pass all the stuff down,

142
00:09:16.000 --> 00:09:17.110
we have to bring it back up.

143
00:09:17.110 --> 00:09:21.680
Some of this manually manipulating arrays
is because we're not actually sending

144
00:09:21.680 --> 00:09:23.830
API requests cuz we haven't
talked about async yet.

145
00:09:23.830 --> 00:09:27.970
So some of that is not necessarily
going to get so much better,

146
00:09:27.970 --> 00:09:29.750
except that we're gonna start copy and
pasting.

147
00:09:29.750 --> 00:09:32.758
That'll be better, but
this idea of passing everything down and

148
00:09:32.758 --> 00:09:36.544
bringing everything back up is part of
the problem that we're gonna try to solve.

149
00:09:36.544 --> 00:09:38.910
Through the remainder of the day.

150
00:09:38.910 --> 00:09:42.380
First, let's see if we
have everything working.

151
00:09:44.120 --> 00:09:44.820
So we created it but

152
00:09:44.820 --> 00:09:47.413
we didn't passed it down yet.
&gt;&gt; Steve Kinney: So

153
00:09:47.413 --> 00:09:52.610
we can say,
&gt;&gt; Steve Kinney: Remember,

154
00:09:52.610 --> 00:09:55.910
we're looking at keeping our code dry.

155
00:09:57.360 --> 00:10:02.370
Am I doing a really good job with that
right now, as I type the same thing twice?

156
00:10:04.320 --> 00:10:08.337
I'm not, right?
&gt;&gt; Steve Kinney: Cool, so

157
00:10:08.337 --> 00:10:13.180
we'll pass toggle item down, and let's
see what I actually named it in items.

158
00:10:15.510 --> 00:10:23.838
Change that to
&gt;&gt; Steve Kinney: Bring in

159
00:10:23.838 --> 00:10:29.932
that on Toggle and pass it down.
&gt;&gt; Steve Kinney: All right,

160
00:10:29.932 --> 00:10:31.438
one more level to go.

161
00:10:31.438 --> 00:10:36.190
And we'll say onChange.

162
00:10:36.190 --> 00:10:40.062
And we'll say.
&gt;&gt; Steve Kinney: And

163
00:10:40.062 --> 00:10:45.950
I clean this up in a second.
&gt;&gt; Steve Kinney: Pass the item back on up.

164
00:10:45.950 --> 00:10:48.050
So we pass the function down two levels.

165
00:10:48.050 --> 00:10:49.100
It will get called.

166
00:10:49.100 --> 00:10:52.300
That's still gonna be executing from the
application where we have to move stuff

167
00:10:52.300 --> 00:10:55.140
that will change the array in
the application which will change

168
00:10:55.140 --> 00:10:58.730
the items being passed to the item's list
which will change the item that gets here.

169
00:11:00.800 --> 00:11:04.920
Before we celebrate, alright it works.

170
00:11:04.920 --> 00:11:05.890
Cool.

171
00:11:05.890 --> 00:11:07.782
We have one more thing to do but

172
00:11:07.782 --> 00:11:12.574
luckily this one's easier because
mark alls unpacked is to demonstrate.

173
00:11:12.574 --> 00:11:15.039
It'd be great if we didn't
have to pass stuff down,

174
00:11:15.039 --> 00:11:17.800
because here we're trying to
do all of the items, right?

175
00:11:17.800 --> 00:11:19.399
And guess where we have all of the items?

176
00:11:21.040 --> 00:11:23.320
In the same place that we
have the unpack button.

177
00:11:23.320 --> 00:11:26.870
So this is like again,
like a quick refresher to not have

178
00:11:26.870 --> 00:11:28.640
to go through all of these
steps to pass stuff down.

179
00:11:30.300 --> 00:11:33.550
So let's go ahead and
implement that real quick in application.

180
00:11:35.350 --> 00:11:36.605
So we have this button full width.

181
00:11:36.605 --> 00:11:42.727
What we will do is make a new
method here called Mark all

182
00:11:42.727 --> 00:11:48.829
as unpacked.
&gt;&gt; Steve Kinney: And

183
00:11:48.829 --> 00:11:51.350
I'm just going to grab
this code right here.

184
00:11:53.150 --> 00:11:54.730
Except that no matter what,

185
00:11:55.790 --> 00:12:00.160
we wanna say packed is false,
and we don't want a conditional.

186
00:12:03.010 --> 00:12:06.786
Do it to every item.
&gt;&gt; Steve Kinney: Cool.

187
00:12:08.710 --> 00:12:09.458
&gt;&gt; Steve Kinney: Alright let's take

188
00:12:09.458 --> 00:12:10.030
a look at that.

189
00:12:10.030 --> 00:12:16.680
If you don't add it to the button
it doesn't work, fun fact.

190
00:12:20.640 --> 00:12:25.766
This dot mark All as unpacked.

191
00:12:29.909 --> 00:12:30.563
&gt;&gt; Steve Kinney: Fax them,

192
00:12:30.563 --> 00:12:35.380
mark them all as unpacked, and we have
mostly a functioning version, right?

193
00:12:35.380 --> 00:12:39.979
Like, careful watchers will know as
we didn't implement the filter yet,

194
00:12:39.979 --> 00:12:44.578
part of the point of doing all this,
step-by-step, was to show you how,

195
00:12:44.578 --> 00:12:46.490
one, how error-prone it is.

196
00:12:46.490 --> 00:12:48.803
Two, slightly torturous, right?

197
00:12:48.803 --> 00:12:54.932
So I'm not going to subject to also doing
it on the filter at this point as well.

198
00:12:54.932 --> 00:12:58.980
But we all know how that would have gone,
right?

199
00:12:58.980 --> 00:13:02.600
We would have actually been able
just to keep that in the Items list.

200
00:13:02.600 --> 00:13:04.641
Cuz each one of these is unique, right?

201
00:13:04.641 --> 00:13:07.980
We wanna change state in
the items list itself.

202
00:13:07.980 --> 00:13:10.950
And then we would have used that value
to filter everything out, right?

203
00:13:10.950 --> 00:13:12.710
So we can do that in each one of them.

