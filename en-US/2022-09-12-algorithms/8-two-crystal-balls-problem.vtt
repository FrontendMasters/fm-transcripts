WEBVTT

1
00:00:00.000 --> 00:00:02.352
All right, so
let's go on to the next part.

2
00:00:02.352 --> 00:00:06.302
So I'm gonna actually give you
an interview question that I had at my

3
00:00:06.302 --> 00:00:07.007
first job.

4
00:00:07.007 --> 00:00:11.937
This involves arrays, it's also a question
that I happened to have in computational

5
00:00:11.937 --> 00:00:14.340
theory, which I thought was fantastic.

6
00:00:14.340 --> 00:00:19.372
Given 2 crystal balls that will break
if dropped from a high enough distance,

7
00:00:19.372 --> 00:00:24.269
determine the exact spot in which
they'll break in the most optimized way.

8
00:00:24.269 --> 00:00:28.690
Often, you'll hear something like
you're in 100 storey building and

9
00:00:28.690 --> 00:00:33.054
you have 2 crystal balls and you wanna
find out which floor do they break.

10
00:00:33.054 --> 00:00:36.220
So what's the most efficient way
to do it in 100 storey building?

11
00:00:36.220 --> 00:00:40.687
This is just the generalized version
of the exact same thing right here.

12
00:00:40.687 --> 00:00:44.812
So let's do the generalized version cuz
we're computer scientists, we generalize.

13
00:00:44.812 --> 00:00:47.461
We're not gonna do the weak version.

14
00:00:47.461 --> 00:00:49.599
So let's discuss our options we have.

15
00:00:49.599 --> 00:00:53.111
We right now know of both linear and
binary searching.

16
00:00:53.111 --> 00:00:57.248
So let's kind of talk about them and
their associated time constraints.

17
00:00:57.248 --> 00:01:00.380
So if we generalize this problem, really,

18
00:01:00.380 --> 00:01:03.521
when you really think about it,
what it is.

19
00:01:03.521 --> 00:01:06.550
It's an array full of falses, right?

20
00:01:06.550 --> 00:01:10.580
That at some point it becomes true and
from there on out, it's true, right?

21
00:01:10.580 --> 00:01:14.130
And we're trying to find,
where is this midpoint?

22
00:01:14.130 --> 00:01:15.180
Or where is this point?

23
00:01:15.180 --> 00:01:16.048
It doesn't have to be mean.

24
00:01:16.048 --> 00:01:18.645
There's just a point in which no
matter how much higher you go,

25
00:01:18.645 --> 00:01:20.516
your crystal ball breaks
every single time.

26
00:01:20.516 --> 00:01:22.498
There's a point before,
where it doesn't break.

27
00:01:22.498 --> 00:01:25.386
Now, despite what Elon Musk
says about Cybertruck,

28
00:01:25.386 --> 00:01:28.924
if you drop this crystal ball over and
over again it won't break.

29
00:01:28.924 --> 00:01:31.196
I swear that was a great joke,
we just made that one up.

30
00:01:31.196 --> 00:01:32.578
I feel very good about that.

31
00:01:32.578 --> 00:01:36.989
All right, so what we wanna do is find
this in the most optimized way, right?

32
00:01:36.989 --> 00:01:41.336
And so if we start off at 0 and
just linearly walk, yes,

33
00:01:41.336 --> 00:01:43.475
we will find it, correct.

34
00:01:43.475 --> 00:01:46.352
We will eventually get the true,
it will break.

35
00:01:46.352 --> 00:01:50.776
But we are given a constraint and
we really didn't even use our constraint,

36
00:01:50.776 --> 00:01:54.943
which is we have 2 crystal balls,
I apparently can't spell crystal.

37
00:01:54.943 --> 00:01:56.501
We have two of them, right?

38
00:01:56.501 --> 00:02:00.563
So, therefore, we should be able to do
something more efficient than that, right?

39
00:02:00.563 --> 00:02:06.700
Because if we linearly walk and find t,
what is the runtime of the algorithm?

40
00:02:09.231 --> 00:02:12.291
Imagine in your head what you're
gonna write, you're gonna write a for

41
00:02:12.291 --> 00:02:12.950
loop, right?

42
00:02:12.950 --> 00:02:16.465
You're gonna write a for
loop over the space of the array,

43
00:02:16.465 --> 00:02:18.269
checking every single time.

44
00:02:18.269 --> 00:02:19.415
It's a loop.

45
00:02:19.415 --> 00:02:24.053
Trick, look for loops, there's a loop
based on the input, boom, linear, right?

46
00:02:24.053 --> 00:02:25.338
It's O of N.

47
00:02:25.338 --> 00:02:26.544
Very, very simple to see.

48
00:02:26.544 --> 00:02:29.911
Okay, we're like, whoa, whoa, whoa,
whoa, we are so much smarter now.

49
00:02:29.911 --> 00:02:30.942
We already know something.

50
00:02:30.942 --> 00:02:32.770
This array is ordered, right?

51
00:02:32.770 --> 00:02:36.499
If we break it down in the most
ordinary kind of way, it's this, right?

52
00:02:36.499 --> 00:02:39.831
It's a bunch of 0s,
until it's a bunch of 1s.

53
00:02:39.831 --> 00:02:42.617
We're so much smarter than this,
we can easily do this.

54
00:02:42.617 --> 00:02:44.872
So, again, we have an array.

55
00:02:44.872 --> 00:02:50.834
We jump to the middle and
we're like, hey, Xi, are you true?

56
00:02:50.834 --> 00:02:53.996
And it's like, yes.

57
00:02:53.996 --> 00:02:55.682
No, what just happened there?

58
00:02:55.682 --> 00:03:00.460
Well, 1 of our 2 crystal balls just broke.

59
00:03:00.460 --> 00:03:04.886
And so therefore, what do we
have to do with the remaining 1?

60
00:03:04.886 --> 00:03:10.562
We have to linearly walk from our last
known good point until we hit a bad point.

61
00:03:10.562 --> 00:03:16.347
And if we walk one half of N,
what's the running time of that?

62
00:03:16.347 --> 00:03:18.496
Remember, rule two.

63
00:03:18.496 --> 00:03:22.155
Yeah, dropped the constants, bam,
drove, dang it, I drew on the line.

64
00:03:22.155 --> 00:03:24.317
Bam, right, there you go.

65
00:03:24.317 --> 00:03:27.571
You've just dropped the constant and
it's back to end.

66
00:03:27.571 --> 00:03:30.392
So both of our searches suck, right?

67
00:03:30.392 --> 00:03:31.454
Neither of them work.

68
00:03:31.454 --> 00:03:34.452
I really wanted to work this one in
here because specifically during

69
00:03:34.452 --> 00:03:36.347
the interviewer or during the interview,

70
00:03:36.347 --> 00:03:38.777
the interviewer did not know
the generalized answer.

71
00:03:38.777 --> 00:03:41.456
And when I just said it right away
cuz I was so stoked, they said, well,

72
00:03:41.456 --> 00:03:42.404
that's not the answer.

73
00:03:42.404 --> 00:03:44.305
I said, it is the answer and here's why.

74
00:03:44.305 --> 00:03:45.332
It was so exciting.

75
00:03:45.332 --> 00:03:47.385
So what do we have to do here?

76
00:03:47.385 --> 00:03:52.657
Well, the reality to the answer is this,
is that we have to jump in such a way

77
00:03:52.657 --> 00:03:57.798
that isn't some portion of N that means
we have to walk some portion of N.

78
00:03:57.798 --> 00:04:02.311
We need to be able to jump by
a fundamentally different unit.

79
00:04:02.311 --> 00:04:03.632
Does that make sense?

80
00:04:03.632 --> 00:04:08.451
So normally what we did in binaries,
we cut the space in half.

81
00:04:08.451 --> 00:04:10.220
That makes it really, really efficient.

82
00:04:10.220 --> 00:04:13.067
But in this case, we're jumping, so
we need to do something different.

83
00:04:13.067 --> 00:04:14.898
So here's what I propose.

84
00:04:14.898 --> 00:04:18.791
We jump the square root of N,
the square root of N, right?

85
00:04:18.791 --> 00:04:23.276
And so that means we're gonna jump
a square root amount of times until it

86
00:04:23.276 --> 00:04:23.889
breaks.

87
00:04:23.889 --> 00:04:28.556
And if it breaks, we have to walk
backwards to our last known good point and

88
00:04:28.556 --> 00:04:30.380
find the point of breaking.

89
00:04:30.380 --> 00:04:34.233
If we walk back and
we have to walk forward,

90
00:04:34.233 --> 00:04:38.315
how much are we going to
walk forward at most?

91
00:04:38.315 --> 00:04:40.277
The square root of N.

92
00:04:40.277 --> 00:04:45.166
So what is the running time
of having to do a square root

93
00:04:45.166 --> 00:04:49.414
of N plus a square root of N worst case,
right?

94
00:04:49.414 --> 00:04:53.501
Cuz we could have to do a square root
of N jumps until we're off the board,

95
00:04:53.501 --> 00:04:56.522
back it up by square root of N and
walk square root of N.

96
00:04:56.522 --> 00:04:58.859
So what is the time of this?

97
00:04:58.859 --> 00:04:59.664
&gt;&gt; The square root of N.

98
00:04:59.664 --> 00:05:00.653
&gt;&gt; The square root of N.

99
00:05:00.653 --> 00:05:02.029
Look how fantastic that is.

100
00:05:02.029 --> 00:05:02.998
We actually did it.

101
00:05:02.998 --> 00:05:06.664
Now, you don't have to write it like this
cuz, of course, you can rewrite that as

102
00:05:06.664 --> 00:05:10.249
the two square root of N and so what you
do, you drop the 2, so up, up, up, up.

103
00:05:10.249 --> 00:05:13.919
We have just come up with a new running
time that you probably will never see

104
00:05:13.919 --> 00:05:16.416
again, but
this is a fantastic little exercise.

105
00:05:16.416 --> 00:05:21.215
Which is we now have just broken
down a search problem without

106
00:05:21.215 --> 00:05:23.105
doing a linear search.

107
00:05:23.105 --> 00:05:25.069
And I think that that's
really kind of a cool thing.

108
00:05:25.069 --> 00:05:28.337
I love these type of tricks cuz
often they will expand my mind for

109
00:05:28.337 --> 00:05:30.383
me to be able to use this in other areas.

110
00:05:30.383 --> 00:05:34.729
If I see something that I can't use, say,
a priority queue, which we'll talk about,

111
00:05:34.729 --> 00:05:37.193
and I need to be able to
search in such a unique way,

112
00:05:37.193 --> 00:05:38.990
I have one more trick inside my bag.

113
00:05:38.990 --> 00:05:41.356
And it's always good to have one
more trick inside of the bag.

