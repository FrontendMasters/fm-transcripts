WEBVTT

1
00:00:02.219 --> 00:00:04.827
Someone is correct so
there is a problem right here.

2
00:00:04.827 --> 00:00:07.619
So, obviously when we get asked
to something has gone wrong.

3
00:00:07.619 --> 00:00:11.820
So, we could debug this which is just
gonna be a lot of fun cuz do we want

4
00:00:11.820 --> 00:00:13.861
to do a debugging session, yes.

5
00:00:13.861 --> 00:00:15.598
Okay, we'll do a debugging session.

6
00:00:15.598 --> 00:00:19.046
So, what I'm gonna do is I'm actually
going to add a fun little print statement

7
00:00:19.046 --> 00:00:19.620
right here.

8
00:00:19.620 --> 00:00:25.727
Debug that is simply going to go for
Where are you get at?

9
00:00:25.727 --> 00:00:27.136
Yeah, jump in here.

10
00:00:27.136 --> 00:00:28.696
I'm gonna yoink.

11
00:00:28.696 --> 00:00:30.858
why didn't you want you?

12
00:00:30.858 --> 00:00:31.470
There we go.

13
00:00:31.470 --> 00:00:33.950
We're gonna do that debug, paste it in.

14
00:00:33.950 --> 00:00:39.009
And every time we do this I'm
gonna go Let out equals this

15
00:00:39.009 --> 00:00:44.036
I'm gonna go console dot o and our console

16
00:00:44.036 --> 00:00:50.223
log out plus equals i points
two current dot value.

17
00:00:50.223 --> 00:00:51.766
Yeah.

18
00:00:51.766 --> 00:00:52.758
Isn't this beautiful?

19
00:00:54.009 --> 00:00:55.304
Console dot log.

20
00:00:55.304 --> 00:00:57.132
Man, these are just the worst ones.

21
00:00:57.132 --> 00:01:01.463
So, the first thing we're gonna do is I'm
just simply going to print everything and

22
00:01:01.463 --> 00:01:03.974
see if I can catch the error
just by looking at it.

23
00:01:03.974 --> 00:01:07.562
I don't really wanna debug these things.

24
00:01:07.562 --> 00:01:09.756
Let's see, what's the test?

25
00:01:09.756 --> 00:01:12.026
Where do you break it
you broke at line six.

26
00:01:13.653 --> 00:01:15.401
All right?
So, if we do this we should be able

27
00:01:15.401 --> 00:01:19.954
to get this that means my append function
is likely the thing that's incorrect

28
00:01:19.954 --> 00:01:21.768
Append jump in here.

29
00:01:21.768 --> 00:01:22.497
What is it?

30
00:01:22.497 --> 00:01:25.878
So, we're gonna go right to here and
we're gonna go just out debug.

31
00:01:25.878 --> 00:01:27.592
I know isn't this great?

32
00:01:29.565 --> 00:01:34.061
So, let's just see what happens right
here cuz I'm pretty sure that's what

33
00:01:34.061 --> 00:01:36.015
the problem is.

34
00:01:36.015 --> 00:01:36.695
Beautiful.

35
00:01:36.695 --> 00:01:39.898
So, let's see, zero points to 5 zero 1.7.

36
00:01:39.898 --> 00:01:46.461
[SOUND] And so that must mean that our
get is totally the wrong thing, isn't it?

37
00:01:46.461 --> 00:01:49.718
&gt;&gt; Someone's saying the private remove?

38
00:01:49.718 --> 00:01:50.681
Private remove?

39
00:01:50.681 --> 00:01:53.752
&gt;&gt; We'll get there cuz we're
breaking at appending.

40
00:01:53.752 --> 00:01:57.213
So, I must have something wrong right
here which I do cuz I am a dummy,

41
00:01:57.213 --> 00:01:59.256
which is I didn't simply just use that.

42
00:01:59.256 --> 00:02:03.022
So, this should hurdle our
first problem right here.

43
00:02:03.022 --> 00:02:05.950
There we go, it was our get at.

44
00:02:05.950 --> 00:02:07.821
Yeah.

45
00:02:07.821 --> 00:02:12.220
I was hoping that it would just work and
I can just like that's right.

46
00:02:12.220 --> 00:02:15.346
All right, so next problem
remove that if we remove one so

47
00:02:15.346 --> 00:02:17.965
this must be where this
whole bug is right here.

48
00:02:17.965 --> 00:02:21.297
So, we're gonna jump in here there's
that beautiful list interface.

49
00:02:21.297 --> 00:02:26.430
Remove at, so we get this node
which is now the correct node.

50
00:02:26.430 --> 00:02:29.603
If it's not this then we do this now
people are saying the remove at.

51
00:02:29.603 --> 00:02:31.811
Okay, chat might have been correct here.

52
00:02:31.811 --> 00:02:34.881
So, if it's zero, we remove everything.

53
00:02:34.881 --> 00:02:35.555
Perfect?

54
00:02:36.913 --> 00:02:42.106
If nodes previous exists, the nodes
previous needs to equal nodes next.

55
00:02:42.106 --> 00:02:43.280
Okay, that makes sense.

56
00:02:43.280 --> 00:02:45.344
We're breaking ourselves
off from this list.

57
00:02:45.344 --> 00:02:49.411
If nodes next exists, the nodes next

58
00:02:55.463 --> 00:02:58.119
Yeah, see I didn't even do the thing,
right?

59
00:02:58.119 --> 00:03:05.502
Nodes next or nodes previous next
needs now jump across to node next.

60
00:03:05.502 --> 00:03:10.289
Nodes next previous needs to
jump across to node previous.

61
00:03:10.289 --> 00:03:14.580
Classic blunder I practically started
the land war in Asia at this point.

62
00:03:14.580 --> 00:03:15.329
So, there we go.

63
00:03:15.329 --> 00:03:17.680
I believe that would be the bug, right?

64
00:03:17.680 --> 00:03:18.487
Everyone agree?

65
00:03:22.718 --> 00:03:23.251
First try.

66
00:03:23.251 --> 00:03:24.760
I knew it was a first try.

67
00:03:24.760 --> 00:03:26.238
I knew it.

68
00:03:26.238 --> 00:03:27.843
All right, there we go.

69
00:03:27.843 --> 00:03:28.737
All right, thank you.

70
00:03:28.737 --> 00:03:32.581
Well, the claps are outstanding
here you can hear him because we're

71
00:03:32.581 --> 00:03:33.846
not supposed to clap.

72
00:03:33.846 --> 00:03:34.435
So, there you go.

73
00:03:34.435 --> 00:03:35.822
That is a doubly linked list.

74
00:03:35.822 --> 00:03:37.085
They're very, very hard to write.

75
00:03:37.085 --> 00:03:40.418
Honestly, it's difficult
due to an exercise of

76
00:03:40.418 --> 00:03:44.659
like minutia is not difficult
because the concepts are hard.

77
00:03:44.659 --> 00:03:48.219
And so, you shouldn't be surprised if you
run into a million of these problems.

78
00:03:48.219 --> 00:03:52.121
If I remember a university we had to do
a bunch of these and it's just like every

79
00:03:52.121 --> 00:03:56.164
time I implemented something like this,
it just always is a headache, right?

80
00:03:56.164 --> 00:04:00.148
You're always just like goodness,
gracious what else is wrong here?

81
00:04:00.148 --> 00:04:02.858
We had to implement a trees and
deleting from trees,

82
00:04:02.858 --> 00:04:05.084
which we're not gonna be doing tomorrow.

83
00:04:05.084 --> 00:04:06.576
But if you do deleting from trees,

84
00:04:06.576 --> 00:04:08.691
it's just the exact same
stuff You need to have.

85
00:04:08.691 --> 00:04:10.759
The parent pointers and
do all this pointer updating.

86
00:04:10.759 --> 00:04:13.939
And there's just a bunch of cases to
it and we'll go over all the cases.

87
00:04:13.939 --> 00:04:18.539
But it's just an exercise in like
how well are you at remembering to

88
00:04:18.539 --> 00:04:21.425
do next dot previous, not just dot next.

89
00:04:23.210 --> 00:04:24.188
Awesome.

90
00:04:24.188 --> 00:04:25.950
All right, I think we're good.

91
00:04:25.950 --> 00:04:31.068
&gt;&gt; With this implementation when
we remove a node we toss it away.

92
00:04:31.068 --> 00:04:34.532
Have you ever had an instance where you
had to keep track of the history of

93
00:04:34.532 --> 00:04:36.395
all the nodes that have been removed?

94
00:04:36.395 --> 00:04:38.804
&gt;&gt; If I've never had an instance
where I've had like a history,

95
00:04:38.804 --> 00:04:40.995
I wouldn't even know quite
what to do with the history.

96
00:04:40.995 --> 00:04:44.375
It feels like a history of the nodes to
be removed would be some sort of wrapping

97
00:04:44.375 --> 00:04:45.105
class, right?

98
00:04:45.105 --> 00:04:48.736
You could do some sort of higher order,
linked lists, right?

99
00:04:48.736 --> 00:04:51.561
Linked lists with history or
something like that,

100
00:04:51.561 --> 00:04:54.723
as opposed to implementing it
directly in a linked list.

101
00:04:54.723 --> 00:04:56.243
Yeah, it'd be interesting.

102
00:04:56.243 --> 00:04:58.864
I can't think of a purpose
off the top of my head.

103
00:04:58.864 --> 00:05:01.106
But that doesn't mean other
than creating an undo.

104
00:05:01.106 --> 00:05:03.921
I assume that's what it's for
is creating some sort of undo.

105
00:05:03.921 --> 00:05:06.317
But that'll be in a sense pushing state,

106
00:05:06.317 --> 00:05:10.024
pushing your app state to a linked
list that you could walk back.

107
00:05:10.024 --> 00:05:13.797
Funny enough,
whenever you bubble up from an HTML event,

108
00:05:13.797 --> 00:05:15.880
it's just using effectively.

109
00:05:15.880 --> 00:05:19.696
In a sense, it's a linked list because as
you traverse your elements to go through

110
00:05:19.696 --> 00:05:22.241
that, you're really just
walking parent pointers,

111
00:05:22.241 --> 00:05:23.808
which really is just like a list.

112
00:05:23.808 --> 00:05:25.965
All right.
And so, it can be treated very,

113
00:05:25.965 --> 00:05:26.783
very similar.

114
00:05:26.783 --> 00:05:28.133
But yeah, that's interesting.

115
00:05:28.133 --> 00:05:30.592
Never thought about an undo,
I've never had the program and undo.

116
00:05:30.592 --> 00:05:33.050
I've always been curious to program and
undo,

117
00:05:33.050 --> 00:05:37.301
but it's one of those curiosities I don't
actually want to do but you could do it.

118
00:05:37.301 --> 00:05:38.803
I don't actually wanna do it.

119
00:05:38.803 --> 00:05:41.023
Because it would just be linked list hell,
right?

120
00:05:41.023 --> 00:05:45.809
It would just be really trying to get
the state and addition and moving through.

121
00:05:45.809 --> 00:05:50.149
And what happens the moment you change but
you've undone twice you create a branch in

122
00:05:50.149 --> 00:05:52.672
your program, so
it's no longer a linked list.

123
00:05:52.672 --> 00:05:53.683
It's a general tree.

124
00:05:53.683 --> 00:05:55.855
You pretty much invent git at that point.

125
00:05:55.855 --> 00:05:58.170
And if you've invented get
that's just a bad bland.

126
00:05:58.170 --> 00:05:59.529
[LAUGH]

