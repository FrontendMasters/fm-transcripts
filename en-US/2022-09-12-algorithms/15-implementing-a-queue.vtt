WEBVTT

1
00:00:00.028 --> 00:00:01.302
This one is a great one to implement.

2
00:00:01.302 --> 00:00:04.072
I think it's fantastic, so
we can jump back over to our editor.

3
00:00:04.072 --> 00:00:06.918
Remember if you do have VS Code,
I do have a get ignore for

4
00:00:06.918 --> 00:00:09.658
everything that starts with the day and
some number.

5
00:00:09.658 --> 00:00:13.568
So therefore make sure that
you show get ignored files so

6
00:00:13.568 --> 00:00:15.656
you can be able to see day one.

7
00:00:15.656 --> 00:00:20.007
And we can go down to queue,
open it up, and look at this,

8
00:00:20.007 --> 00:00:22.480
it's a poorly formatted file.

9
00:00:22.480 --> 00:00:25.856
But there you go,
we have a class that's generic over t.

10
00:00:25.856 --> 00:00:29.555
It has a length that has a number,
we have availability for constructor,

11
00:00:29.555 --> 00:00:30.457
we have enqueue.

12
00:00:30.457 --> 00:00:33.642
So this is typically the phrase that
is used when implementing a queue,

13
00:00:33.642 --> 00:00:36.789
is to enqueue something is to add it
to the queue or push it to the queue.

14
00:00:36.789 --> 00:00:41.446
And then we have deque, spelt without to
UEs, which is always kind of mind boggling

15
00:00:41.446 --> 00:00:45.519
to me, but that one is to remove it
from the queue, and of course, peak.

16
00:00:45.519 --> 00:00:47.616
So let's figure out first our constructor,
and

17
00:00:47.616 --> 00:00:49.420
then we can figure out the other methods.

18
00:00:49.420 --> 00:00:52.811
So let's actually first
get our typing here.

19
00:00:52.811 --> 00:00:55.023
So we're gonna have
a little type queue node.

20
00:00:55.023 --> 00:00:58.493
I believe type node is a reserved
word if I'm not mistaken.

21
00:00:58.493 --> 00:01:02.754
We'll have a queue node
that is a generical over t.

22
00:01:02.754 --> 00:01:05.970
And we want a value that is T, right?

23
00:01:05.970 --> 00:01:09.470
And then of course, we're gonna want
a next that may or may not exist, right?

24
00:01:09.470 --> 00:01:11.113
We don't know how many elements we have.

25
00:01:11.113 --> 00:01:12.602
We can't say it always exists.

26
00:01:12.602 --> 00:01:15.225
If it always did exist,
you'd create one of them and

27
00:01:15.225 --> 00:01:19.169
you'd infinitely create memory forever and
eventually blow up your system.

28
00:01:19.169 --> 00:01:21.828
So there has to be an optional point
to this, and we'd go queue node.

29
00:01:21.828 --> 00:01:24.615
I can't remember if node is taken,
is node taken?

30
00:01:24.615 --> 00:01:27.154
I think, okay cool.

31
00:01:27.154 --> 00:01:29.698
At one point, you couldn't create node,
it would actually fail on you.

32
00:01:29.698 --> 00:01:32.501
I don't know what's changed or why it's
changed, but there we go, awesome.

33
00:01:32.501 --> 00:01:36.755
We have typed node, it has a value,
it has a next, that is itself.

34
00:01:36.755 --> 00:01:43.380
And so that means we can have a private
head that's gonna be a node T.

35
00:01:43.380 --> 00:01:46.299
Great, right, we've now created this.

36
00:01:46.299 --> 00:01:49.348
And of course,
this can be undefined as well, right?

37
00:01:49.348 --> 00:01:53.168
In TypeScript, you can always use the old
question operator or whatever it's called.

38
00:01:53.168 --> 00:01:54.772
I forget what it's called.

39
00:01:54.772 --> 00:01:58.172
And then we can go tail as well,
ooh, that's teal.

40
00:01:58.172 --> 00:02:00.526
There we go, so
now we have our two references, right?

41
00:02:00.526 --> 00:02:04.715
They may be undefined, but we have two
references, one to head, one to tail.

42
00:02:04.715 --> 00:02:07.332
There are node T, generic or have node.

43
00:02:07.332 --> 00:02:10.038
Generic over T, RQ is generic over T.

44
00:02:10.038 --> 00:02:11.460
That means we can pass in any value.

45
00:02:11.460 --> 00:02:13.298
We don't care what value you pass us.

46
00:02:13.298 --> 00:02:17.260
We create our own container and
we manage the state ourselves.

47
00:02:17.260 --> 00:02:21.140
All right, constructor, this.head
equals this.tail equals undefined.

48
00:02:21.140 --> 00:02:23.597
Okay, I wanna be super serious about this.

49
00:02:23.597 --> 00:02:27.921
Now, of course length,
we have nothing in there, right?

50
00:02:27.921 --> 00:02:30.935
Awesome, we've pretty much done
the hardest part about a queue.

51
00:02:30.935 --> 00:02:33.385
Okay, not the hardest part,
but one of the hardest parts,

52
00:02:33.385 --> 00:02:35.011
getting your constructor correctly.

53
00:02:35.011 --> 00:02:38.471
All right, let's start with peak, because
peak is such a simple operation, right?

54
00:02:38.471 --> 00:02:41.004
All we have to do is return this.head and

55
00:02:41.004 --> 00:02:45.559
then, of course, do one of those
little question mark values, right?

56
00:02:45.559 --> 00:02:47.302
There we go,
that's a null operator, I believe,

57
00:02:47.302 --> 00:02:49.501
this is our null coalescing operator,
I forget the exact name.

58
00:02:49.501 --> 00:02:53.463
But effectively says that, hey,
if head is not null or not undefined,

59
00:02:53.463 --> 00:02:56.712
I can get the value if it is undefined or
return undefined.

60
00:02:56.712 --> 00:02:59.964
So there we go,
we now have fulfilled our interface.

61
00:02:59.964 --> 00:03:00.856
It's awesome.

62
00:03:00.856 --> 00:03:03.606
We've set it, let's go.

63
00:03:03.606 --> 00:03:06.414
All right, so let's deque next.

64
00:03:06.414 --> 00:03:10.992
Cuz I feel like deque is not only
a restaurant that serves ice cream, but

65
00:03:10.992 --> 00:03:13.598
also is a pretty simple operation to do.

66
00:03:13.598 --> 00:03:17.799
The first thing we need to do is,
do we even have a head?

67
00:03:17.799 --> 00:03:20.063
All right, if we don't have a head,
we can't deque it.

68
00:03:20.063 --> 00:03:24.433
So if there is no head,
let's return undefined, right?

69
00:03:24.433 --> 00:03:29.204
Pretty straightforward, that makes sense,
makes sense to me, awesome.

70
00:03:29.204 --> 00:03:31.628
After that,
we need to do a couple of operations,

71
00:03:31.628 --> 00:03:34.534
we need to do some bookkeeping,
this.length-- right?

72
00:03:34.534 --> 00:03:37.190
If we want the outside world to
know how many items we have,

73
00:03:37.190 --> 00:03:39.698
we kinda need to keep track
of these things ourselves.

74
00:03:39.698 --> 00:03:43.262
Awesome, you're usually used to something
like an array doing this for you,

75
00:03:43.262 --> 00:03:44.617
we are now the array, right?

76
00:03:44.617 --> 00:03:47.545
We are now the ones
doing these operations.

77
00:03:47.545 --> 00:03:49.912
And then of course, what is the operation?

78
00:03:49.912 --> 00:03:52.850
We first update head to
point to the next value,

79
00:03:52.850 --> 00:03:55.206
then we return out our previous head.

80
00:03:55.206 --> 00:03:58.983
So let's go like this,
const head=this.head.

81
00:03:58.983 --> 00:04:04.246
this.head.next equals,
oopsies wrong direction.

82
00:04:04.246 --> 00:04:07.796
this.head=this.head.next, right?

83
00:04:07.796 --> 00:04:09.279
So we saved that our head.

84
00:04:09.279 --> 00:04:11.306
We've updated our head
pointer to the next one.

85
00:04:11.306 --> 00:04:13.815
Whether it's undefined or not,
it does not matter to us.

86
00:04:13.815 --> 00:04:15.657
We just updated it to the next one.

87
00:04:15.657 --> 00:04:18.651
And then we just gotta do
a little return head.value.

88
00:04:18.651 --> 00:04:21.840
Now, if we're using a more traditional
language that doesn't have a garbage

89
00:04:21.840 --> 00:04:24.609
collector, we would probably wanna
do some cleanup here, right?

90
00:04:24.609 --> 00:04:27.076
You'd wanna do a free here.

91
00:04:27.076 --> 00:04:32.450
There's things you'd have to do here
that we just don't do in JavaScript.

92
00:04:32.450 --> 00:04:37.024
So just to be somewhat complete or make
it feel as if we're doing all of our own

93
00:04:37.024 --> 00:04:40.108
bookkeeping, I will go
head.next = unDefined.

94
00:04:40.108 --> 00:04:44.450
We don't need to do that, but again
just to give you the more complete feel.

95
00:04:44.450 --> 00:04:46.140
Awesome, we just did deque.

96
00:04:46.140 --> 00:04:47.640
Was deque all that hard?

97
00:04:47.640 --> 00:04:51.887
No, it's really just those two
simple steps, save your head,

98
00:04:51.887 --> 00:04:54.336
update the head, return the value.

99
00:04:54.336 --> 00:04:56.401
That's two simple steps, index 0.

100
00:04:56.401 --> 00:04:58.113
I'm not off by 1, I'm still correct.

101
00:04:58.113 --> 00:04:59.335
Dang it, we have to reduce our length.

102
00:04:59.335 --> 00:05:02.126
Okay, I am off by 1 in index zeroing.

103
00:05:02.126 --> 00:05:03.019
So there we go.

104
00:05:03.019 --> 00:05:06.388
So let's do enqueue, right,
which is really the opposite operation,

105
00:05:06.388 --> 00:05:09.053
we're gonna go to the tail
this time instead of the head.

106
00:05:09.053 --> 00:05:16.315
So again, if there is no tail, that means
we pretty much have an empty array, right?

107
00:05:16.315 --> 00:05:19.639
Now, if you're using
a different type system,

108
00:05:19.639 --> 00:05:23.946
I would probably have chosen
this.length===0, right?

109
00:05:23.946 --> 00:05:25.735
Because at this point, I could say, hey,

110
00:05:25.735 --> 00:05:27.688
we do this operation
when this length is here.

111
00:05:27.688 --> 00:05:30.891
But since TypeScript can't
understand exactly your meaning

112
00:05:30.891 --> 00:05:33.910
if you don't intentionally check for
null or undefined,

113
00:05:33.910 --> 00:05:36.815
then we're gonna check intentionally for
undefined.

114
00:05:36.815 --> 00:05:41.449
So if there is no tail,
that means this.tail = this.head,

115
00:05:41.449 --> 00:05:43.327
which equals a new node.

116
00:05:43.327 --> 00:05:47.895
So let's create a new node, value is item,

117
00:05:47.895 --> 00:05:52.098
oopsies, as no generic over T, right?

118
00:05:52.098 --> 00:05:55.490
There we go,
we've now just created the node.

119
00:05:55.490 --> 00:05:57.295
Our next is undefined.

120
00:05:57.295 --> 00:06:01.492
Our value is the item, it's of type T or
node is generic over T.

121
00:06:01.492 --> 00:06:04.926
Everything is good except for one thing,
we don't have our length correct.

122
00:06:04.926 --> 00:06:09.887
So this.length++,
make sure you spell length correctly.

123
00:06:09.887 --> 00:06:11.186
There we go.

124
00:06:11.186 --> 00:06:12.218
It was looking pretty good, right?

125
00:06:12.218 --> 00:06:16.566
We now have it officially done for
the first or the base case.

126
00:06:16.566 --> 00:06:20.116
If it's not this, we need to do
that whole tail updating thing.

127
00:06:20.116 --> 00:06:24.719
So we have to make sure we don't
accidentally destroy all of our data or

128
00:06:24.719 --> 00:06:26.833
lose our tail pointer, right?

129
00:06:26.833 --> 00:06:31.097
So this.tail.next needs to equal the node.

130
00:06:31.097 --> 00:06:33.769
So let's just create
off the node right now.

131
00:06:33.769 --> 00:06:38.598
Value, really we could just take
this const node =, paste up here,

132
00:06:38.598 --> 00:06:40.198
make it easy, right?

133
00:06:40.198 --> 00:06:43.969
And then node, I forgot that return value.

134
00:06:43.969 --> 00:06:44.771
There we go.

135
00:06:44.771 --> 00:06:51.876
tail.next, right here, so we've just took
our tail and added a new one to the list.

136
00:06:51.876 --> 00:06:57.213
So now we just need to take our tail and
point it to the new one, right?

137
00:06:57.213 --> 00:06:59.899
Right, yes, you're absolutely correct.

138
00:06:59.899 --> 00:07:01.048
Thank you.

139
00:07:01.048 --> 00:07:01.749
There we go.

140
00:07:01.749 --> 00:07:06.322
Our tail now points to the last item in
our list, because it became the last item,

141
00:07:06.322 --> 00:07:08.756
and then now we are pointing it correctly.

142
00:07:08.756 --> 00:07:11.268
So that is all that is
required to do a queue.

143
00:07:11.268 --> 00:07:14.617
Queues are actually fairly
simple data structures, right?

144
00:07:14.617 --> 00:07:17.496
They're not too hard,
you're only managing one link.

145
00:07:17.496 --> 00:07:21.400
You just have to make sure you're updating
or deleting that one link properly.

