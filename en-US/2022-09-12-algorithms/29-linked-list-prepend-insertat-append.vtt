WEBVTT

1
00:00:00.019 --> 00:00:02.723
So we do have time to
implement the linked list.

2
00:00:02.723 --> 00:00:06.889
So, let's actually implement it, I'm gonna
add here to this interface right here.

3
00:00:06.889 --> 00:00:09.483
And so
we are gonna actually do all of these,

4
00:00:09.483 --> 00:00:13.568
some of them are a bit trickier
actually did take the Java interface.

5
00:00:13.568 --> 00:00:15.647
I know no one likes Java anymore.

6
00:00:15.647 --> 00:00:17.060
It's not that cool to like Java.

7
00:00:17.060 --> 00:00:21.290
But hey, Netflix uses a lot Java,
so it is cool to like Java.

8
00:00:21.290 --> 00:00:23.954
That's what I told myself as we did this.

9
00:00:23.954 --> 00:00:26.620
So let's go over here,
let's go to our coding machine.

10
00:00:26.620 --> 00:00:27.542
And let's open up linked list.

11
00:00:27.542 --> 00:00:29.128
If you wish to join in,

12
00:00:29.128 --> 00:00:34.318
we will be doing a doubly linked lists
because they are doubly, a singly.

13
00:00:34.318 --> 00:00:35.940
It's true, mathematically checks out.

14
00:00:35.940 --> 00:00:37.340
No one can argue that.

15
00:00:37.340 --> 00:00:41.312
All right, so I actually nicely have
everything kind of generated for

16
00:00:41.312 --> 00:00:42.940
you right here, I believe.

17
00:00:42.940 --> 00:00:46.420
I think maybe we may have written
this at some point but there we go.

18
00:00:46.420 --> 00:00:47.900
So here's the doubly linked list.

19
00:00:47.900 --> 00:00:52.670
Let's go through this and
actually fill in all these operations.

20
00:00:52.670 --> 00:00:56.217
All right, just a side note, I did at one
point implement this right here, this get.

21
00:00:56.217 --> 00:01:00.235
So I'm just gonna remove that right now,
just so

22
00:01:00.235 --> 00:01:03.568
that way we implement it continuously.

23
00:01:03.568 --> 00:01:05.192
You know what I mean?

24
00:01:05.192 --> 00:01:07.350
&gt;&gt; I just wanna say Java
is cool if you like money.

25
00:01:07.350 --> 00:01:09.210
&gt;&gt; Java is cool if you like money.

26
00:01:09.210 --> 00:01:10.648
I like money.

27
00:01:10.648 --> 00:01:11.815
You like money too?

28
00:01:11.815 --> 00:01:13.868
We should be friends.
That is a shout out, of course,

29
00:01:13.868 --> 00:01:16.130
to everyone's favorite movie Idiocracy.

30
00:01:16.130 --> 00:01:17.540
So, here we go.

31
00:01:17.540 --> 00:01:20.992
So often whenever I'm doing constructor,
I like to explicitly set things, so

32
00:01:20.992 --> 00:01:24.250
let's do head undefined, even though
we don't actually need to do this.

33
00:01:24.250 --> 00:01:26.919
So now if you remember when
it comes to link lists.

34
00:01:26.919 --> 00:01:30.172
All right, so to be able to do prepending,
you may remember the operations.

35
00:01:30.172 --> 00:01:32.310
Let's jump back over to our
diagram right here, and

36
00:01:32.310 --> 00:01:34.460
let's just kind of walk
through just one more time.

37
00:01:34.460 --> 00:01:39.344
So a prepending does involve the head
in which we're gonna need to be able to

38
00:01:39.344 --> 00:01:41.911
set in a new node at the heads position.

39
00:01:41.911 --> 00:01:44.960
Which means, let's just call it G and

40
00:01:44.960 --> 00:01:50.408
what we're gonna wanna do is we're
gonna want G to point to A first.

41
00:01:50.408 --> 00:01:54.237
Then we're gonna want A to point to G.

42
00:01:54.237 --> 00:01:57.266
Then we're gonna want
the head to point to G.

43
00:01:57.266 --> 00:01:59.418
We're gonna kinda wanna do
these in this operation.

44
00:01:59.418 --> 00:02:01.532
We don't want to lose A in our memory.

45
00:02:01.532 --> 00:02:03.389
We don't want to lose any of these things.

46
00:02:03.389 --> 00:02:06.426
We wanna keep these operations
in order as much as possible.

47
00:02:06.426 --> 00:02:08.160
So, let's do that right now.

48
00:02:08.160 --> 00:02:10.095
So if we're gonna prepend something,

49
00:02:10.095 --> 00:02:12.685
we can start off by first
creating the node, right?

50
00:02:12.685 --> 00:02:18.226
The node, of course,
is gonna be a value item as Node T, great.

51
00:02:18.226 --> 00:02:22.780
So now we have the node and there's always
is technically two conditionings to

52
00:02:22.780 --> 00:02:26.437
a prepend or any of these,
which is if there is no head, right?

53
00:02:26.437 --> 00:02:28.746
There's nothing here,
we don't have anything,

54
00:02:28.746 --> 00:02:30.578
we can just set this as the head, right?

55
00:02:30.578 --> 00:02:32.056
We don't need to do anything fantastic.

56
00:02:32.056 --> 00:02:36.090
So this .head = node, perfect.

57
00:02:36.090 --> 00:02:40.230
And before we do that, bookkeeping,
see I just forgot too.

58
00:02:40.230 --> 00:02:44.400
It's so easy to forget bookkeeping,
this.length++, right?

59
00:02:44.400 --> 00:02:46.820
Cuz we want to be able to know
how many items are in this list.

60
00:02:46.820 --> 00:02:50.867
Okay, so if that's not the case
let's do those exact steps again.

61
00:02:50.867 --> 00:02:53.512
Remember, G points to A, A points the G,

62
00:02:53.512 --> 00:02:56.780
head points to G,
we'll just do those three ones.

63
00:02:56.780 --> 00:03:02.514
So, let's go like this,
node next points to our head or

64
00:03:02.514 --> 00:03:07.040
in this case it was A,
in that case, right?

65
00:03:07.040 --> 00:03:11.592
This.head.previous points to node.

66
00:03:11.592 --> 00:03:13.580
There we go,
we've done the two directions.

67
00:03:13.580 --> 00:03:17.070
Now this.head = node.

68
00:03:17.070 --> 00:03:20.096
There you go,
we've now just officially prepended.

69
00:03:20.096 --> 00:03:24.662
There are ways to make some of these
operations a bit easier in which we're not

70
00:03:24.662 --> 00:03:25.446
going to do.

71
00:03:25.446 --> 00:03:29.644
Let's just remember that that there's this
circular linked list that will make some

72
00:03:29.644 --> 00:03:31.343
of these operations a bit easier.

73
00:03:31.343 --> 00:03:33.600
But I'm just not gonna
worry too much about that,

74
00:03:33.600 --> 00:03:36.186
we'll just kinda do it the old
fashioned way if you will.

75
00:03:36.186 --> 00:03:38.864
All right, so now we gotta do insert at.

76
00:03:38.864 --> 00:03:41.334
Insert at is the exact
same thing except for now,

77
00:03:41.334 --> 00:03:43.574
we're gonna be doing it within the middle.

78
00:03:43.574 --> 00:03:46.608
We'll be doing the F operation right here,

79
00:03:46.608 --> 00:03:51.209
which is gonna involve us pointing
to the node we want to insert at.

80
00:03:51.209 --> 00:03:56.009
Then that node, then we gotta make sure we
point to the other node and do all that.

81
00:03:56.009 --> 00:03:57.600
So let's write this out,
it's way too confusing.

82
00:03:57.600 --> 00:03:59.910
I realize I don't have hands for
four points, and

83
00:03:59.910 --> 00:04:02.668
there's just no possible way
I can actually get that done.

84
00:04:02.668 --> 00:04:05.651
So let's just write this thing out.

85
00:04:05.651 --> 00:04:12.472
So, we'll rewrite it out as C, B and D.

86
00:04:12.472 --> 00:04:15.449
And these are two way links.

87
00:04:15.449 --> 00:04:20.699
And we want to insert at C with F,
awesome.

88
00:04:20.699 --> 00:04:24.951
So F needs to point to C as the next,

89
00:04:24.951 --> 00:04:29.507
F needs to point to B as the previous.

90
00:04:29.507 --> 00:04:33.432
Then C's previous needs to point to F and

91
00:04:33.432 --> 00:04:37.593
B's next needs to point to F, there we go.

92
00:04:37.593 --> 00:04:39.390
We have broken the chain in that order.

93
00:04:39.390 --> 00:04:44.579
First, attach the new node,
second, break the old links.

94
00:04:44.579 --> 00:04:47.360
So long as you do it in that order,
you're not gonna goof anything up.

95
00:04:47.360 --> 00:04:50.385
It's pretty easy to tell when you've
goofed something up cuz as you program

96
00:04:50.385 --> 00:04:52.900
you'll realize, crap,
that's not gonna work out at all.

97
00:04:52.900 --> 00:04:55.489
So long as you keep that in your mind,
it's pretty easy.

98
00:04:55.489 --> 00:05:00.767
But remember, this is insertAt which
means we also need to traverse the list.

99
00:05:00.767 --> 00:05:02.433
So that does make it a bit harder.

100
00:05:02.433 --> 00:05:05.600
So we can go like this,
let curr = this.head.

101
00:05:05.600 --> 00:05:08.280
Well, technically,
since we're building our own list,

102
00:05:08.280 --> 00:05:10.109
we can actually add a better interface.

103
00:05:10.109 --> 00:05:14.907
So, if our index is
greater than our length,

104
00:05:14.907 --> 00:05:18.580
we kind of have a problem, right?

105
00:05:18.580 --> 00:05:21.877
We can't really insert at that point,
can we?

106
00:05:21.877 --> 00:05:23.555
So, what would be a good move here?

107
00:05:23.555 --> 00:05:27.669
I would probably just throw an error,
right?

108
00:05:27.669 --> 00:05:28.600
No, right?

109
00:05:28.600 --> 00:05:30.850
You can't really do it at this point.

110
00:05:30.850 --> 00:05:32.096
I don't know what else to do, right?

111
00:05:32.096 --> 00:05:33.790
Your are two nodes off.

112
00:05:33.790 --> 00:05:36.013
Should we create two dummy
nodes with no values in them?

113
00:05:36.013 --> 00:05:37.760
No, we're probably gonna screw that up.

114
00:05:37.760 --> 00:05:41.701
It's gonna make our logic a lot more
complex, probably the right move to do.

115
00:05:41.701 --> 00:05:45.315
Well, there's actually something else
that makes this a little bit interesting.

116
00:05:45.315 --> 00:05:49.900
What if our index is the length?

117
00:05:49.900 --> 00:05:54.163
Well, we're really just
appending to the list, right?

118
00:05:54.163 --> 00:05:58.501
So I mean, we can technically
just call append, right?

119
00:05:58.501 --> 00:06:01.218
Yeah, why not?

120
00:06:01.218 --> 00:06:05.809
What if our index is zero?

121
00:06:05.809 --> 00:06:12.204
Well, we're just really just,
oopsies, just prepending it, right?

122
00:06:12.204 --> 00:06:14.260
We've already written those too,
all right, fantastic.

123
00:06:14.260 --> 00:06:17.022
We don't really have to concern
ourselves with the edge bookkeeping.

124
00:06:17.022 --> 00:06:20.869
This is where a circular linked list would
actually avoid this kind of conditioning.

125
00:06:20.869 --> 00:06:24.101
But we're not gonna worry
ourselves with that, there we go.

126
00:06:24.101 --> 00:06:29.533
So now, we have our current and
now we need to simply just walk, right?

127
00:06:29.533 --> 00:06:33.563
We're gonna just simply walk until we get
to the index, and then at that point,

128
00:06:33.563 --> 00:06:36.044
we will have the node in
which we need to replace.

129
00:06:36.044 --> 00:06:38.651
And there's things that we know
that TypeScript doesn't know, so

130
00:06:38.651 --> 00:06:39.988
we'll have to do a bit of casting.

131
00:06:39.988 --> 00:06:44.856
So let i = 0,
i has to be less than index, ++i.

132
00:06:44.856 --> 00:06:47.852
Curr = curr.next.

133
00:06:47.852 --> 00:06:52.631
And of course, we also have to make
sure current is actually a thing as we

134
00:06:52.631 --> 00:06:56.309
get there, or
else we're gonna get mull exceptions.

135
00:06:56.309 --> 00:06:59.600
I mean, technically we won't cuz
we actually pre prepared for

136
00:06:59.600 --> 00:07:01.535
this by using our link to do all that.

137
00:07:01.535 --> 00:07:03.972
But TypeScript knows nonetheless.

138
00:07:03.972 --> 00:07:07.704
So now that we've done that,
we can go curr = curr as Node&lt;T&gt;, little,

139
00:07:07.704 --> 00:07:09.800
TypeScript magic right there, I guess.

140
00:07:09.800 --> 00:07:13.002
I'm not very good at TypeScript, so for
all the TypeScript ninjas out there that

141
00:07:13.002 --> 00:07:14.851
are probably laughing
at how I'm doing this.

142
00:07:18.419 --> 00:07:19.544
There we go.

143
00:07:19.544 --> 00:07:22.345
So, we now have current, it is a node.

144
00:07:22.345 --> 00:07:24.185
Now we need to insert our new one.

145
00:07:24.185 --> 00:07:27.541
Remember, the first thing we do,
is create a node and

146
00:07:27.541 --> 00:07:30.385
attach it to the positions
we want it to be at.

147
00:07:30.385 --> 00:07:35.811
So, node = {value: item} as Node&lt;T&gt;.

148
00:07:35.811 --> 00:07:38.913
By the way, if you don't,
I find this thing right here,

149
00:07:38.913 --> 00:07:41.575
this little plug in, I can't use my mouse.

150
00:07:41.575 --> 00:07:44.862
Sorry, I didn't realize I can't,
this little one right up here,

151
00:07:44.862 --> 00:07:47.818
that says insert, it's kinda nice,
little, fun plugin.

152
00:07:47.818 --> 00:07:49.359
I think VS code now just finally got this,

153
00:07:49.359 --> 00:07:51.041
which is you get context
of where you're at.

154
00:07:51.041 --> 00:07:53.654
So if you're zoomed in,
you can see your function signature.

155
00:07:53.654 --> 00:07:54.604
It's pretty, pretty nice.

156
00:07:54.604 --> 00:07:56.915
Highly recommend using it, it's good time.

157
00:07:56.915 --> 00:08:00.275
So we can actually, I'm not gonna
put it inside the constructor or

158
00:08:00.275 --> 00:08:01.655
inside the node creation.

159
00:08:01.655 --> 00:08:02.362
I'll put it right here.

160
00:08:02.362 --> 00:08:07.267
But node.next, now needs to equal the
current we're going to be inserting at,

161
00:08:07.267 --> 00:08:07.780
right?

162
00:08:07.780 --> 00:08:13.140
Because in our diagram,
we actually put F before C, correct?

163
00:08:13.140 --> 00:08:16.251
We didn't put it after C,
we put it before C.

164
00:08:16.251 --> 00:08:20.553
So let's go node.next = curr,

165
00:08:20.553 --> 00:08:25.325
node.prev = curr.prev, right?

166
00:08:25.325 --> 00:08:29.302
So we've now attached our new node.

167
00:08:29.302 --> 00:08:34.300
So now we need to break the previous links
and point them correctly at our node.

168
00:08:34.300 --> 00:08:38.725
So we can say this, curr.prev = node.

169
00:08:38.725 --> 00:08:42.005
And then the last one which is a bit
more confusing, we have like this.

170
00:08:42.005 --> 00:08:46.245
If (node.prev), if that actually exists,
which we do know it exists, but

171
00:08:46.245 --> 00:08:47.994
we'll just say if it doesn't.

172
00:08:47.994 --> 00:08:52.388
Based on our little looping or based on
these little condition up here it has to

173
00:08:52.388 --> 00:08:55.776
exist, but for TypeScript's sake,
we'll go like this.

174
00:08:55.776 --> 00:09:00.940
We'll now say, hey, that one, we need to
make sure also does the correct thing.

175
00:09:00.940 --> 00:09:03.850
I think we have to do it this way,
curr, there we go.

176
00:09:03.850 --> 00:09:06.680
If the current's previous is there,
we need to do something with it.

177
00:09:06.680 --> 00:09:11.867
So curr.prev.next = curr.

178
00:09:11.867 --> 00:09:13.833
So, do you see what we did there?

179
00:09:13.833 --> 00:09:16.625
So it's a little much.

180
00:09:16.625 --> 00:09:21.414
It's current's previous, next,

181
00:09:21.414 --> 00:09:25.123
needs to point to F instead.

182
00:09:25.123 --> 00:09:29.481
Current, previous, next, you just have
to kind of run that triangle there for

183
00:09:29.481 --> 00:09:30.077
a second.

184
00:09:30.077 --> 00:09:31.425
And so that is a one way to do this.

185
00:09:31.425 --> 00:09:33.100
You can see that we have a lot of options.

186
00:09:33.100 --> 00:09:34.516
We have a lot of links.

187
00:09:34.516 --> 00:09:36.030
There's different ways we can do this.

188
00:09:36.030 --> 00:09:39.298
We could have even created a previous
node and just do it that way.

189
00:09:39.298 --> 00:09:43.581
But this seems to be pretty
straightforward one for me, I guess.

190
00:09:43.581 --> 00:09:46.155
Hopefully that all makes sense mostly.

191
00:09:46.155 --> 00:09:47.419
All right, so let's do append.

192
00:09:47.419 --> 00:09:49.209
Append is also pretty easy.

193
00:09:49.209 --> 00:09:51.250
Hold on,
I guess did I take care of bookkeeping?

194
00:09:51.250 --> 00:09:54.923
We didn't take care of
bookkeeping classic, right?

195
00:09:58.930 --> 00:10:01.905
There we go,
we've taken care of bookkeeping,

196
00:10:01.905 --> 00:10:05.370
we make sure that we increment
the length as we walk.

197
00:10:05.370 --> 00:10:08.350
Actually, we need to put that down here,
don't we?

198
00:10:08.350 --> 00:10:11.320
Yeah, because append and
prepend should do their own stuff.

199
00:10:11.320 --> 00:10:12.740
There we go, sorry.

200
00:10:12.740 --> 00:10:15.810
Bookkeeping, always just the worst,
never liked it.

201
00:10:15.810 --> 00:10:20.128
All right, so appending,
it's pretty much identical to prepending.

202
00:10:20.128 --> 00:10:22.079
We're gonna go in here and
we're gonna go to the end.

203
00:10:22.079 --> 00:10:25.560
And as always, attach the node,
update the links, right?

204
00:10:25.560 --> 00:10:28.730
So if we did, let's do Z over here.

205
00:10:28.730 --> 00:10:33.877
We would, of course, attach to D,
D would then attach to the Z.

206
00:10:33.877 --> 00:10:38.595
And then the tail would be
updated to point to Z, correct?

207
00:10:38.595 --> 00:10:43.254
Now one thing we don't have in here
I just realized is I completely

208
00:10:43.254 --> 00:10:44.875
forgot to put in tail.

209
00:10:44.875 --> 00:10:46.647
So we do need to do something
with tail at this point, correct?

210
00:10:46.647 --> 00:10:51.209
So let's go tail, we now add that thing
in by putting a tail right there.

211
00:10:51.209 --> 00:10:55.798
And that means our prepend also needs
to have the same logic in it as well.

212
00:10:55.798 --> 00:10:58.059
Might add on that one, there we go.

213
00:10:58.059 --> 00:11:00.289
If there's nothing in it,
we are an empty place,

214
00:11:00.289 --> 00:11:02.955
then let's set everything to
the first node that comes in.

215
00:11:02.955 --> 00:11:06.676
And we have to do the same thing
on prepend as well or append.

216
00:11:06.676 --> 00:11:09.633
That's the first one,
we need to make sure our tail and

217
00:11:09.633 --> 00:11:11.766
our head both gets set at the same time.

218
00:11:11.766 --> 00:11:15.338
All right, so
we'll go back down to append.

219
00:11:15.338 --> 00:11:16.424
So what are the conditions?

220
00:11:16.424 --> 00:11:19.710
First, bookkeeping, bookkeeping,
bookkeeping, bookkeeping.

221
00:11:19.710 --> 00:11:23.400
I told you this one is like,
it's really lengthy to implement, right?

222
00:11:23.400 --> 00:11:28.137
There's a lot of little conditions in
linked list that is shocking because

223
00:11:28.137 --> 00:11:29.875
they're very easy to use.

224
00:11:29.875 --> 00:11:32.554
They're very uneasy to implement.

225
00:11:32.554 --> 00:11:35.886
All right, so
now we need to simply do those operations.

226
00:11:35.886 --> 00:11:39.786
First, create the node,
attach it to the tail.

227
00:11:39.786 --> 00:11:43.770
Then tail to the node,
there you go, right?

228
00:11:43.770 --> 00:11:45.140
Just kinda do the two ways.

229
00:11:45.140 --> 00:11:50.040
So let's go, const node = {value:

230
00:11:50.040 --> 00:11:54.640
item } as node T, most excellent.

231
00:11:54.640 --> 00:11:58.997
If there is no tail, well, same condition,

232
00:11:58.997 --> 00:12:04.167
this.head = this.tail = node,
return, right?

233
00:12:04.167 --> 00:12:06.615
It's the first item to
be put into this list.

234
00:12:06.615 --> 00:12:09.046
Awesome, we got it, everything's good.

235
00:12:09.046 --> 00:12:10.590
Else, we need to do something now.

236
00:12:10.590 --> 00:12:13.634
We need to take our tail and
we need to point to it.

237
00:12:13.634 --> 00:12:18.040
So, node.prev = this.tail.

238
00:12:18.040 --> 00:12:19.861
We have now pointed to the tail.

239
00:12:19.861 --> 00:12:22.020
Now the tail needs to point to the node.

240
00:12:22.020 --> 00:12:26.757
This.tail.next needs to equal node.

241
00:12:26.757 --> 00:12:33.574
Now we need to update the tail to point to
our newly added node, this.tail = node.

242
00:12:33.574 --> 00:12:35.155
Everything's good?

243
00:12:35.155 --> 00:12:37.183
It's a lot of links here,
people, a lot of links.

