WEBVTT

1
00:00:00.170 --> 00:00:02.225
All right, so
now we're gonna reach the point,

2
00:00:02.225 --> 00:00:04.238
kinda the culmination
of this entire section.

3
00:00:04.238 --> 00:00:09.517
Let's do the empirical testing for,
what are we using in JavaScript?

4
00:00:09.517 --> 00:00:13.336
We're gonna find out now,
what is those brackets in JavaScript?

5
00:00:13.336 --> 00:00:15.861
Does anyone have a guess what it is?

6
00:00:15.861 --> 00:00:19.900
&gt;&gt; It's just something that looks
interesting, you put on the wall.

7
00:00:19.900 --> 00:00:23.121
&gt;&gt; It just looks interesting?
Yeah, it is interesting, I accept that,

8
00:00:23.121 --> 00:00:24.925
interesting is part one.

9
00:00:24.925 --> 00:00:25.529
Frustrating?

10
00:00:25.529 --> 00:00:26.177
Could be.

11
00:00:27.912 --> 00:00:28.700
No guesses?

12
00:00:28.700 --> 00:00:29.401
&gt;&gt; Is it an ArrayList?

13
00:00:29.401 --> 00:00:30.301
&gt;&gt; ArrayList, yeah.

14
00:00:30.301 --> 00:00:32.507
&gt;&gt; ArrayList, great guess.

15
00:00:32.507 --> 00:00:35.970
I'll tell you if you're right or wrong
cuz we're gonna find out empirically.

16
00:00:35.970 --> 00:00:38.874
So I did write this little,
I didn't know where to put it so

17
00:00:38.874 --> 00:00:43.103
I just put it right in this thing, so
you can even follow along if you want to.

18
00:00:43.103 --> 00:00:45.777
All we're gonna do here is we're
gonna simply create an array, right?

19
00:00:45.777 --> 00:00:47.619
It's just a number array.

20
00:00:47.619 --> 00:00:50.232
I'm gonna be able to measure a function,
we're measuring in milliseconds,

21
00:00:50.232 --> 00:00:51.908
we don't really care,
it's not super precise.

22
00:00:51.908 --> 00:00:55.702
We just wanna get a gauge of how fast or
how slow things are, right?

23
00:00:55.702 --> 00:00:57.982
So no hardcore testing here.

24
00:00:57.982 --> 00:01:01.902
So I create a function that simply
will unshift a a certain amount of

25
00:01:01.902 --> 00:01:02.885
times, right?

26
00:01:02.885 --> 00:01:06.180
Unshift in JavaScript,
remember that's adding to a list.

27
00:01:06.180 --> 00:01:08.233
Thank you, Brendan, for that one.

28
00:01:08.233 --> 00:01:10.960
Shift, of course is removing from
the beginning of the list, so

29
00:01:10.960 --> 00:01:12.789
we're just gonna do that amount of times.

30
00:01:12.789 --> 00:01:15.922
We have push, exact same thing,
pop, exact same thing.

31
00:01:15.922 --> 00:01:19.959
So hopefully we all see exactly how
that works, very, very simple functions,

32
00:01:19.959 --> 00:01:23.043
just push, pop, shift,
unshift a number amount of times.

33
00:01:23.043 --> 00:01:25.016
Lastly, we're gonna have
get based on index.

34
00:01:25.016 --> 00:01:27.971
So just in case it is a linked
list underneath the hood,

35
00:01:27.971 --> 00:01:30.606
if we were to get
progressively larger indices,

36
00:01:30.606 --> 00:01:34.999
we should see a slowdown that keeps on,
we should see a linear slowdown, right?

37
00:01:34.999 --> 00:01:40.432
So then I create this thing,
Just some higher order function nonsense.

38
00:01:40.432 --> 00:01:43.604
I could push it, I can create something
that will just have the same function

39
00:01:43.604 --> 00:01:46.252
that does, calls push with
the same count every time, right?

40
00:01:46.252 --> 00:01:49.356
So I can call it over and over again, I
don't even know why I did it this way, but

41
00:01:49.356 --> 00:01:51.731
it just feels like it was a great
way to do things at the time.

42
00:01:51.731 --> 00:01:53.631
I can't remember what
code comes down below.

43
00:01:53.631 --> 00:01:58.435
Lastly, we're gonna test with 10 elements,
100 elements, 1000, 10,000, 100,000,

44
00:01:58.435 --> 00:01:58.989
1 million.

45
00:01:58.989 --> 00:02:00.999
Whenever you're doing performance testing,

46
00:02:00.999 --> 00:02:03.720
a little tip is you should always
do a stepladder type approach.

47
00:02:03.720 --> 00:02:05.269
That way you can see how it grows.

48
00:02:05.269 --> 00:02:08.355
You can really actually run, say,
a linear regression and say, hey,

49
00:02:08.355 --> 00:02:10.480
this is kind of more what
I'm seeing right here.

50
00:02:10.480 --> 00:02:13.866
It's not accurate,
it doesn't always work exactly, right?

51
00:02:13.866 --> 00:02:14.578
So there you go.

52
00:02:14.578 --> 00:02:18.962
So you can see for every test I'm gonna
do, I'm gonna push in the value and

53
00:02:18.962 --> 00:02:21.735
then I'm going to do a get
at the last element.

54
00:02:21.735 --> 00:02:24.050
So if indexing is linear,

55
00:02:24.050 --> 00:02:29.434
we should see a slowdown as
the array gets bigger, correct?

56
00:02:29.434 --> 00:02:30.671
Correct, right?

57
00:02:30.671 --> 00:02:34.974
It should be 10x slower effectively
every single, 10x times some constant.

58
00:02:34.974 --> 00:02:36.995
Pushing, exact same thing.

59
00:02:36.995 --> 00:02:41.172
We're gonna push 1,000 items after
growing it to a certain length.

60
00:02:41.172 --> 00:02:42.668
So first, we're gonna grow it to 10,

61
00:02:42.668 --> 00:02:46.364
we're gonna grow to 100, we're gonna
grow to 1,000, 10,000, 100,000,

62
00:02:46.364 --> 00:02:49.802
1 million, 10 million, and then at each
one of those points, push in 1,000 items.

63
00:02:49.802 --> 00:02:53.327
If push is based on the amount
of items within the array,

64
00:02:53.327 --> 00:02:57.312
we should theoretically see
a slowdown that happens, right?

65
00:02:57.312 --> 00:02:59.783
It should be linearly getting
slower in every single step.

66
00:02:59.783 --> 00:03:02.088
Same thing with pop, exact same item.

67
00:03:02.088 --> 00:03:05.966
Same thing with unshift, and
the exact same thing with shift.

68
00:03:05.966 --> 00:03:09.748
If any of these are linear-based as we
increase the size of our array by a factor

69
00:03:09.748 --> 00:03:12.461
of 10, we should see a great
slowdown in any of these.

70
00:03:12.461 --> 00:03:17.387
And so that way we can kinda test all the
operations, and at that point we should be

71
00:03:17.387 --> 00:03:20.808
able to empirically know what
type of list are we using.

72
00:03:20.808 --> 00:03:23.935
All right, let's do this source.

73
00:03:23.935 --> 00:03:29.135
It's, I did it in TypeScript, npx ts-node.

74
00:03:31.856 --> 00:03:35.582
[SOUND] So what do we see here?

75
00:03:35.582 --> 00:03:39.098
Well, notice that get, it really didn't
matter the size of the array, right?

76
00:03:39.098 --> 00:03:40.992
It was always super-duper fast.

77
00:03:40.992 --> 00:03:44.067
Push didn't really matter,
pop didn't really matter.

78
00:03:44.067 --> 00:03:49.345
Unshift, you'll notice it just got really,
really slow, we're not even done yet.

79
00:03:49.345 --> 00:03:53.038
It just got horribly slow at some point.

80
00:03:53.038 --> 00:03:54.472
And so what are we seeing here?

81
00:03:54.472 --> 00:03:59.665
Well, we're seeing all these
effectively constant time operations,

82
00:03:59.665 --> 00:04:01.629
and there we go, awesome.

83
00:04:01.629 --> 00:04:04.253
And we're seeing shift and unshift grow.

84
00:04:04.253 --> 00:04:07.806
It actually looks like it's effectively
a 30x growth or something like that, but

85
00:04:07.806 --> 00:04:09.216
we'd call that a linear growth.

86
00:04:09.216 --> 00:04:12.501
I would call that a linear growth
at that point, 10x the array,

87
00:04:12.501 --> 00:04:14.907
something like 10x to
the time it took to run.

88
00:04:14.907 --> 00:04:19.908
And so let's just write that out.

89
00:04:19.908 --> 00:04:26.228
So if get is O(1), if push/pop is O(1),

90
00:04:26.228 --> 00:04:31.284
and un/shift appears to be something

91
00:04:31.284 --> 00:04:36.498
like O(n), we were correct in saying

92
00:04:36.498 --> 00:04:41.722
it's probably an ArrayList, right?

93
00:04:41.722 --> 00:04:43.326
That is effectively
what we're seeing here.

94
00:04:43.326 --> 00:04:47.691
We're seeing instant access, we're seeing
instant pushing and popping at the end,

95
00:04:47.691 --> 00:04:51.354
we're seeing linear shifting and
unshifting, or enqueue, dequeue.

96
00:04:51.354 --> 00:04:54.795
And a reason of course, we can now
reason in our head the exact reason why.

97
00:04:54.795 --> 00:04:57.323
Underneath the hood, what is happening?

98
00:04:57.323 --> 00:05:01.523
0 to N, you're shifting over N elements,
however that many is.

99
00:05:01.523 --> 00:05:04.359
I had 10 million at one point,
that should take a long time.

100
00:05:04.359 --> 00:05:06.374
If I had to do that 1,000 times,

101
00:05:06.374 --> 00:05:10.082
you can see it took multiple seconds
on my computer just to execute.

102
00:05:10.082 --> 00:05:12.791
That's a real problem, right?

103
00:05:12.791 --> 00:05:14.974
Right, so
hopefully this was actually a cool moment.

104
00:05:14.974 --> 00:05:18.583
I was really hoping that this would kinda
culminate in a cool moment where we really

105
00:05:18.583 --> 00:05:21.056
understand all the different
types of lists there are.

106
00:05:21.056 --> 00:05:25.026
And then we can empirically look at
something in which we don't even know what

107
00:05:25.026 --> 00:05:26.186
the execution is, but

108
00:05:26.186 --> 00:05:29.870
we're able to suss out likely what
it actually is underneath the hood.

109
00:05:29.870 --> 00:05:37.663
And so, was I correct in saying that what
if I had told you const a is not an array?

110
00:05:37.663 --> 00:05:41.610
Yes, Morpheus, the answer is it is
definitely not, and it is an ArrayList,

111
00:05:41.610 --> 00:05:42.170
awesome.

112
00:05:42.170 --> 00:05:43.113
I hope everyone's awesome.

113
00:05:43.113 --> 00:05:45.747
I always was very curious why they
didn't use a double-ended ring buffer,

114
00:05:45.747 --> 00:05:47.117
I'm sure there's a great reason why.

115
00:05:47.117 --> 00:05:48.589
I just don't know why, but

116
00:05:48.589 --> 00:05:51.854
I'm sure there's a great reason
why that doesn't happen.

117
00:05:51.854 --> 00:05:53.637
All right,
is there any questions at this point?

118
00:05:53.637 --> 00:05:58.558
Cuz I think the next slide is actually,
yeah, anything unclear?

119
00:05:58.558 --> 00:06:03.273
We're kind of ending the list section.

120
00:06:03.273 --> 00:06:07.470
&gt;&gt; One question, the shift,
unshift was exponential, right?

121
00:06:07.470 --> 00:06:10.056
&gt;&gt; I wouldn't put it as exponential,
I'd put it as linear.

122
00:06:10.056 --> 00:06:16.045
&gt;&gt; Linear, yeah, sorry, linear, so-
&gt;&gt; Sorry, let me rephrase the question.

123
00:06:16.045 --> 00:06:18.862
Shift and unshift was exponential,
no, it was linear, sorry,

124
00:06:18.862 --> 00:06:20.511
keep going with the question just so.

125
00:06:20.511 --> 00:06:21.278
&gt;&gt; It's a linear, right?

126
00:06:21.278 --> 00:06:26.049
The shift and unshift, okay,
so what's the conclusion?

127
00:06:26.049 --> 00:06:30.356
The question was, was that an array or
not, right, that question?

128
00:06:30.356 --> 00:06:32.032
&gt;&gt; Yeah, was it an array or not?

129
00:06:32.032 --> 00:06:34.127
It's not an array cuz it's curable.

130
00:06:34.127 --> 00:06:38.103
You can push and pop, it actually has
a notion of an ending and a beginning.

131
00:06:38.103 --> 00:06:41.019
Those are all very, very different
from what you would get with an array.

132
00:06:41.019 --> 00:06:44.656
An array does not have a capacity versus
a length, an array is contiguous spot of

133
00:06:44.656 --> 00:06:47.504
memory, or a static array is
what people often refer to them.

134
00:06:47.504 --> 00:06:50.340
They refer to a length or
ArrayList as dynamic arrays,

135
00:06:50.340 --> 00:06:53.976
things in which you have these extra
operations on top of it to be able to

136
00:06:53.976 --> 00:06:56.524
kind of accordion it
according to what you need.

137
00:06:56.524 --> 00:06:59.643
&gt;&gt; It's not an array, but what can it be?

138
00:06:59.643 --> 00:07:00.909
&gt;&gt; It's an ArrayList.

139
00:07:00.909 --> 00:07:01.517
&gt;&gt; ArrayList.

140
00:07:01.517 --> 00:07:05.246
&gt;&gt; Yes, and
the kicker obviously is this right here.

141
00:07:05.246 --> 00:07:08.334
So for those that don't know, he asked,
if it's not an array, what is it?

142
00:07:08.334 --> 00:07:12.207
It's an ArrayList because we do get
all these sweet operations, but

143
00:07:12.207 --> 00:07:13.353
we don't get this.

144
00:07:13.353 --> 00:07:16.930
But it does provide growing,
it does provide the ability to push and

145
00:07:16.930 --> 00:07:21.216
pop at the end, it's keeping track of
a lot of extra things underneath the hood.

146
00:07:21.216 --> 00:07:26.374
Therefore, you can just call this
is a dynamic array or an ArrayList.

147
00:07:26.374 --> 00:07:28.502
&gt;&gt; What about slice?

148
00:07:28.502 --> 00:07:30.969
&gt;&gt; Slice, well,
slice is just a copy, right?

149
00:07:30.969 --> 00:07:34.014
You might be trying to say splice,
that might be the confusion here.

150
00:07:34.014 --> 00:07:39.507
So slice is, effectively when you do
a slice on an array, and you're doing

151
00:07:39.507 --> 00:07:45.370
it from, say i to j, you're just saying
I wanna copy from here to here, right?

152
00:07:45.370 --> 00:07:48.668
Starting at i up into,
but not including j.

153
00:07:48.668 --> 00:07:50.566
So that's effectively just
like a mem copy, right?

154
00:07:50.566 --> 00:07:55.110
So that's a linear operation, all it's
gonna do is just take that amount of

155
00:07:55.110 --> 00:07:59.025
memory, copy it to a new location,
hand it to you, there you go.

156
00:07:59.025 --> 00:08:01.513
And so if you're using
an ArrayList underneath the hood,

157
00:08:01.513 --> 00:08:04.729
you could effectively copy that,
you could create a copy method, right?

158
00:08:04.729 --> 00:08:08.537
Hey, create a new array, copy all my
elements in, and then take all my state,

159
00:08:08.537 --> 00:08:09.422
and there you go.

160
00:08:09.422 --> 00:08:13.771
We have two lists, two separate copies,
and now you can adjust them, right?

161
00:08:13.771 --> 00:08:14.612
So that would be a slice.

162
00:08:14.612 --> 00:08:18.245
&gt;&gt; Is there a way it's not a copy,
where it's a slice and it's-

163
00:08:18.245 --> 00:08:18.868
&gt;&gt; Great question.

164
00:08:18.868 --> 00:08:21.458
Actually this, I made a YouTube
video just recently, by the way,

165
00:08:21.458 --> 00:08:24.389
subscribe to my YouTube,
I'm almost at 100,000 subs, my God!

166
00:08:24.389 --> 00:08:26.909
No, anyways, sorry, hit that
notification bell, I've never, okay,

167
00:08:26.909 --> 00:08:27.715
I've never said that.

168
00:08:27.715 --> 00:08:30.868
But there is actually this
one thing that I really hate,

169
00:08:30.868 --> 00:08:35.431
I've made a video on it before, is that
there is actually these things that are,

170
00:08:35.431 --> 00:08:37.528
it depends on what you mean by a copy.

171
00:08:37.528 --> 00:08:38.897
And so let's look at this.

172
00:08:38.897 --> 00:08:45.795
So if I go const a = new Uint8Array,
and let's create a 10 big, right?

173
00:08:45.795 --> 00:08:52.045
And then go a[0] equal, oops, equals 5,
a[1 ]= 5, a[2] = 69 for the memes,

174
00:08:52.045 --> 00:08:56.872
there we go, we've appropriately
done all the memeing, there we go.

175
00:08:56.872 --> 00:09:01.702
So now, if we do this and
we go const b = a.slice,

176
00:09:01.702 --> 00:09:05.612
say (0, 5), and I go b[3] = 5,

177
00:09:05.612 --> 00:09:09.878
if I look back at a,
notice that 3 is not 5.

178
00:09:09.878 --> 00:09:14.062
We have done a deep copy, if you will,
of the data, does that make sense?

179
00:09:14.062 --> 00:09:17.117
Now, here's where things get great.

180
00:09:17.117 --> 00:09:21.994
Const, let's call it a buf,
equals Buffer.alloc,

181
00:09:21.994 --> 00:09:27.725
say (5), we're gonna create a buffer,
this is a node item.

182
00:09:27.725 --> 00:09:29.596
Here's the best part about it, though.

183
00:09:29.596 --> 00:09:33.482
Instanceof Uint8Array, it is a Uint8Array.

184
00:09:33.482 --> 00:09:37.200
So by even TypeScript definition,
it's a Uint8Array, correct?

185
00:09:37.200 --> 00:09:38.175
Now we can go like this.

186
00:09:38.175 --> 00:09:42.806
Buf., I think it's set,
let's see, what is it?

187
00:09:42.806 --> 00:09:45.150
My goodness, what are you?

188
00:09:45.150 --> 00:09:45.832
Is it write?

189
00:09:45.832 --> 00:09:48.448
I always forget these things
off top my head, what are you?

190
00:09:48.448 --> 00:09:52.751
There we go, writeUint8, there we go.

191
00:09:52.751 --> 00:09:56.343
Let's writeUint8 at position (0,
5), and then it's gonna say this,

192
00:09:56.343 --> 00:09:59.516
a the value offset range,
blah, blah, blah, blah, blah.

193
00:09:59.516 --> 00:10:03.159
I had it backwards, of course,
write value 5, offset 0.

194
00:10:03.159 --> 00:10:07.683
Node has always managed to be
backwards on all the APIs, I swear.

195
00:10:07.683 --> 00:10:10.156
If we write out a buffer right now,

196
00:10:10.156 --> 00:10:14.179
you'll see it has 5 in that
first position, awesome.

197
00:10:14.179 --> 00:10:18.604
So let's do the exact same experiment,

198
00:10:18.604 --> 00:10:25.514
const buf2 =buf.slice(0,
5), and go buf2.write.

199
00:10:25.514 --> 00:10:29.942
Let's go like this, we can go,
there we go, and then just put a buf.2, so

200
00:10:29.942 --> 00:10:34.509
I'm gonna go buf.2, let's write it
at offset 3, and if I look at buf.1,

201
00:10:34.509 --> 00:10:35.778
what just happened?

202
00:10:35.778 --> 00:10:38.091
Buf.1 was, so
this is actually a shallow slice.

203
00:10:38.091 --> 00:10:43.164
So buffers in Node are shallow sliced,
meaning that they just simply have offsets

204
00:10:43.164 --> 00:10:48.019
within this contiguous memory space in
which they're actually just saying,

205
00:10:48.019 --> 00:10:50.539
hey, I exist between these two places.

206
00:10:50.539 --> 00:10:54.688
And so when you say, hey, give me a slice,
I just simply adjust the indices, and

207
00:10:54.688 --> 00:10:58.060
then still point to the same piece
of memory underneath the hood.

208
00:10:58.060 --> 00:11:01.612
Now, obviously, the danger of course,

209
00:11:01.612 --> 00:11:05.677
is where I showed you the whole,
where are you?

210
00:11:05.677 --> 00:11:06.629
Where did I do that?

211
00:11:06.629 --> 00:11:07.800
The instanceof, right?

212
00:11:07.800 --> 00:11:11.770
Wherever that was, I don't even know
where that was, but it, for your APIs,

213
00:11:11.770 --> 00:11:14.192
looks like a Uint8Array,
but it's a buffer.

214
00:11:14.192 --> 00:11:16.124
So if you call it slice,
you're getting a shallow slice,

215
00:11:16.124 --> 00:11:18.346
which means you could mutate data
you think you're not mutating.

216
00:11:18.346 --> 00:11:21.603
So very, very dangerous,
very, very Node-like.

217
00:11:21.603 --> 00:11:24.626
All right, there we go, so
hopefully that makes sense.

218
00:11:24.626 --> 00:11:28.613
Slice, it can be linear if it's copy.

219
00:11:28.613 --> 00:11:32.298
It obviously can be constant if it's
literally just pointing to new spots.

220
00:11:35.518 --> 00:11:36.747
So buffer would be like,

221
00:11:36.747 --> 00:11:40.904
you could effectively say buffer is a like
implementation of an ArrayList, right,

222
00:11:40.904 --> 00:11:43.320
underneath the hood at
some contiguous buffer.

223
00:11:43.320 --> 00:11:46.074
I'm sure even if we print out the array
buffer that's backing the buffer

224
00:11:46.074 --> 00:11:48.753
underneath the hood, we'd actually
probably see a much larger one.

225
00:11:48.753 --> 00:11:51.884
We might even see source code and other
stuff like that inside the array buffer.

226
00:11:53.713 --> 00:11:54.226
Yeah?

227
00:11:54.226 --> 00:11:59.036
&gt;&gt; Just a general comment,
I've seen quite a few people asking,

228
00:11:59.036 --> 00:12:01.938
where would I apply this in my code, or

229
00:12:01.938 --> 00:12:06.145
what are some typical examples
that you've run into?

230
00:12:06.145 --> 00:12:11.001
For instance, you said you use x
data structure quite often, so?

231
00:12:11.001 --> 00:12:13.644
&gt;&gt; Where would I actually
use these data structures?

232
00:12:13.644 --> 00:12:15.852
I've said that I've used them,
so where would you use them?

233
00:12:15.852 --> 00:12:19.085
I did give the example of say, if you're
doing any sort of log or flushing.

234
00:12:19.085 --> 00:12:21.986
So flushing in general,
things in which you batch operations and

235
00:12:21.986 --> 00:12:25.257
then wanna release a bunch of operations,
you're using some sort of data

236
00:12:25.257 --> 00:12:29.183
structure underneath the hood, and you're
gonna wanna be efficient with it, right?

237
00:12:29.183 --> 00:12:31.397
You don't want something
that has a linear add or

238
00:12:31.397 --> 00:12:33.885
remove time if you're not
flushing the entire thing.

239
00:12:33.885 --> 00:12:36.767
So you could imagine that could
be really bad for a service.

240
00:12:36.767 --> 00:12:40.409
You tend to run into these things
a lot more on the back end than you do

241
00:12:40.409 --> 00:12:41.268
the front end.

242
00:12:41.268 --> 00:12:44.801
You tend to run into them on the front
end when you're writing a library.

243
00:12:44.801 --> 00:12:48.438
So if you look at I'm sure the react code,
if you look at any code,

244
00:12:48.438 --> 00:12:51.559
I am positive you'll see
data structures just around.

245
00:12:51.559 --> 00:12:53.439
Because they're trying to keep
track of a bunch of state, and

246
00:12:53.439 --> 00:12:54.931
they're trying to be as
efficient as possible.

247
00:12:54.931 --> 00:12:57.867
So they need to know all these
different things, they need to do that.

248
00:12:57.867 --> 00:13:00.616
So I tend to run to it a bunch
in library development.

249
00:13:00.616 --> 00:13:03.138
When I did a caching layer at Netflix for
the TV, for

250
00:13:03.138 --> 00:13:06.676
JavaScript, I did a bunch of trees,
linked lists, and maps, right?

251
00:13:06.676 --> 00:13:09.865
You just have to be able to do all these
things because that's what you just had to

252
00:13:09.865 --> 00:13:13.073
be able to do those, because at that point
we had to be as efficient as possible.

253
00:13:13.073 --> 00:13:17.633
So everything needs to be O(1),
if possible, we cannot interrupt the UI.

254
00:13:17.633 --> 00:13:19.784
And so that was just a part of it,
and it's a very,

255
00:13:19.784 --> 00:13:21.336
very interesting kind of concept.

256
00:13:21.336 --> 00:13:26.609
So that's where I tend to run into
it is more back end or library dev.

257
00:13:26.609 --> 00:13:29.365
Never really, if you're just
writing a UI component often,

258
00:13:29.365 --> 00:13:32.757
you're not actually doing logic,
you're just kind of displaying logic or

259
00:13:32.757 --> 00:13:34.888
you have very limited
interaction with logic.

260
00:13:34.888 --> 00:13:38.497
And so therefore, it tends to be
a little bit more shallow on those.

261
00:13:38.497 --> 00:13:42.385
&gt;&gt; When you're dealing with big data,
what is your go-to?

262
00:13:42.385 --> 00:13:46.322
&gt;&gt; So I don't deal much with big data, I'm
not the best person to answer that one.

263
00:13:46.322 --> 00:13:50.212
I use Hive,
Hive does a bunch of really sweet things.

264
00:13:50.212 --> 00:13:53.643
And my Hive experience
is select star from.

265
00:13:53.643 --> 00:13:56.188
[LAUGH]
&gt;&gt; Okay, okay, so just-

266
00:13:56.188 --> 00:13:57.923
&gt;&gt; And then I eventually write some joins,

267
00:13:57.923 --> 00:14:01.461
it can't compile, then I go to my data
scientist friend, go, help me, please.

268
00:14:01.461 --> 00:14:02.716
I'm poor in Hive, help!

269
00:14:02.716 --> 00:14:05.160
And then they help me and
then I get answers.

270
00:14:05.160 --> 00:14:09.466
And so that's what I usually
do at Netflix at least, so.

271
00:14:09.466 --> 00:14:13.334
But big data or often applications of
these principles over, say, a map and

272
00:14:13.334 --> 00:14:17.568
reduce, you have consistent hashes, you
have to map things to specific computers

273
00:14:17.568 --> 00:14:20.007
that we can run medians,
fasts, blah, blah.

274
00:14:20.007 --> 00:14:23.508
They're all applications of these
algorithms but ran distributedly, and

275
00:14:23.508 --> 00:14:24.991
that obviously is much harder.

276
00:14:24.991 --> 00:14:29.340
Kafka is just a queue, but
it's a much more complicated queue.

277
00:14:29.340 --> 00:14:32.759
And so now that you fundamentally
understand what a queue does,

278
00:14:32.759 --> 00:14:36.557
you can imagine what Kafka does,
except where you have to somehow solve

279
00:14:36.557 --> 00:14:40.059
this whole in order,
async multiple computer problem, right?

280
00:14:40.059 --> 00:14:41.735
So it's just a distributed queue.

281
00:14:41.735 --> 00:14:46.068
And so it does help you visualize what's
actually happening on the other side.

282
00:14:46.068 --> 00:14:46.960
And I think it's good for you,

283
00:14:46.960 --> 00:14:48.550
I think it's really good
to understand these things.

