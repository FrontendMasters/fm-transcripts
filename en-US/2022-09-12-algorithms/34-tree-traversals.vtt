WEBVTT

1
00:00:00.200 --> 00:00:02.055
So we're gonna talk about traversals and

2
00:00:02.055 --> 00:00:04.652
we're gonna kind of constrain
this down to a binary tree.

3
00:00:04.652 --> 00:00:08.110
So traversals are your most basic
operation you can do on a tree

4
00:00:08.110 --> 00:00:11.446
a traversals where you attempt
to visit every single node.

5
00:00:11.446 --> 00:00:15.304
All right so let's just do that now.

6
00:00:15.304 --> 00:00:16.969
This is where it gets really fun,

7
00:00:16.969 --> 00:00:20.537
this is also where hopefully your
knowledge of recursion is pretty good

8
00:00:20.537 --> 00:00:23.697
because at this point we're gonna
be doing a lot of recursion.

9
00:00:23.697 --> 00:00:25.780
So, I'm just gonna write up a tree.

10
00:00:25.780 --> 00:00:27.596
There's gonna be no ordering to it,

11
00:00:27.596 --> 00:00:30.530
I'm just gonna be putting in
random numbers that I see fit.

12
00:00:30.530 --> 00:00:33.675
I don't know why I'm choosing the numbers,

13
00:00:33.675 --> 00:00:37.663
they all felt right up looks
like that one's going to 7.

14
00:00:40.006 --> 00:00:40.582
All right, there we go.

15
00:00:40.582 --> 00:00:42.610
This one's now officially 7.

16
00:00:44.552 --> 00:00:50.879
And practically speaking, a lot of trees
will also have a parent reference.

17
00:00:50.879 --> 00:00:54.370
So they can go both ways, especially if
you're doing rotations and other things.

18
00:00:54.370 --> 00:00:56.419
I didn't really talk about
the parent reference,

19
00:00:56.419 --> 00:00:58.440
but it is something that you consider.

20
00:00:58.440 --> 00:01:00.850
So a traversal is as simple as this.

21
00:01:00.850 --> 00:01:03.502
Is that you're gonna do something
called visiting a node.

22
00:01:05.876 --> 00:01:09.144
Which means you're gonna do something
with the value of the node.

23
00:01:09.144 --> 00:01:11.039
And then we're going to recurse.

24
00:01:12.901 --> 00:01:16.486
Recurse, of course, is that fun
operation of calling a function

25
00:01:16.486 --> 00:01:18.974
to do the same thing again,
but on a new node.

26
00:01:18.974 --> 00:01:21.064
And so that means we're gonna
need to have a good base case.

27
00:01:21.064 --> 00:01:24.610
We're gonna have a pre or
a post and recurse step.

28
00:01:24.610 --> 00:01:27.120
And so there's 3 types of tree traversals.

29
00:01:27.120 --> 00:01:30.040
And it really just depends on where
you do the visiting of a node.

30
00:01:30.040 --> 00:01:32.450
And let me kind of show
you what I mean by this.

31
00:01:32.450 --> 00:01:36.000
So let's just say that we're right here
we start off with the root of the tree.

32
00:01:36.000 --> 00:01:40.348
If I were to do a traversal, in which I
just simply print out the value of each

33
00:01:40.348 --> 00:01:44.070
node that I find It would look
a little something like this.

34
00:01:44.070 --> 00:01:48.250
So if I visited node, and
then I simply recursed.

35
00:01:48.250 --> 00:01:50.720
Starting at this node, it would
look a little something like this.

36
00:01:50.720 --> 00:01:54.590
I would print out a 7, and
then I would recurse left.

37
00:01:54.590 --> 00:01:57.013
I would print out a 23.

38
00:01:57.013 --> 00:01:58.522
And then I'd recurse left.

39
00:01:58.522 --> 00:02:03.290
Then I'd print out a 5 and then there's
nothing left to recurse, right?

40
00:02:03.290 --> 00:02:05.180
Those are that's a terminus
node right there.

41
00:02:05.180 --> 00:02:06.341
I pop back up to 23.

42
00:02:06.341 --> 00:02:10.410
And then I traverse right, I print out
the node, nothing left to recurse.

43
00:02:10.410 --> 00:02:12.590
Go back up, nothing left to recurse.

44
00:02:12.590 --> 00:02:15.360
At this point, go up to 7,
go down to the right hand side.

45
00:02:16.510 --> 00:02:20.584
3 go down to recurse down to
the left hand side print out an 18.

46
00:02:20.584 --> 00:02:25.630
Then no children left, go back up to 3,
go to the right-hand side, print out a 21.

47
00:02:25.630 --> 00:02:28.476
And there we go,
we just visited all the nodes and

48
00:02:28.476 --> 00:02:30.720
we did it in a specific ordering.

49
00:02:30.720 --> 00:02:33.425
We visited the node then we were cursed.

50
00:02:33.425 --> 00:02:37.585
This type of traversal is referred
to as a pre order traversal.

51
00:02:37.585 --> 00:02:42.185
I first visited the node,
then I did the recursion pre order, right?

52
00:02:42.185 --> 00:02:43.145
That makes a lot of sense.

53
00:02:43.145 --> 00:02:45.095
There's actually 2 other
type of orderings.

54
00:02:45.095 --> 00:02:51.462
So I'm gonna rename this from
recurse to recurse left,

55
00:02:51.462 --> 00:02:56.610
and then I'm gonna have recurse right?

56
00:02:56.610 --> 00:02:59.670
This changes the order in
which we visit the nodes.

57
00:02:59.670 --> 00:03:01.800
In this case, of course,
we're just printing.

58
00:03:01.800 --> 00:03:06.610
So that means we're gonna go to 7, we then
recurse left as you can see right here.

59
00:03:06.610 --> 00:03:09.280
We go to 23, then we recurse left.

60
00:03:09.280 --> 00:03:15.310
We go to 5, nothing to recurse on
the left-hand side, we print the node.

61
00:03:15.310 --> 00:03:17.210
We go to the right-hand side,
nothing to recurse.

62
00:03:17.210 --> 00:03:19.690
We pop back up, we print 23.

63
00:03:19.690 --> 00:03:24.177
Then we go down to the right hand side
nothing to recurse on the left we

64
00:03:24.177 --> 00:03:28.897
print 4 then we go back up it's done
we go back up to 7 we then print 7 and

65
00:03:28.897 --> 00:03:31.710
then we recurse down the right hand side.

66
00:03:31.710 --> 00:03:34.174
If we go to 3,
we recurse down the left hand side,

67
00:03:34.174 --> 00:03:36.250
there's nothing to go any further left.

68
00:03:36.250 --> 00:03:37.710
So therefore we print 18.

69
00:03:37.710 --> 00:03:41.188
Come back up, we print 3 and
go down the right hand side,

70
00:03:41.188 --> 00:03:43.076
nothing left to recurse 21.

71
00:03:43.076 --> 00:03:45.621
So hopefully this kind of is
an interesting way to do this.

72
00:03:45.621 --> 00:03:49.136
Now we've kind of switched up the order
in which revisiting notes and

73
00:03:49.136 --> 00:03:52.648
this will actually make a difference
in certain types of sorting with

74
00:03:52.648 --> 00:03:53.921
the binary search tree,

75
00:03:53.921 --> 00:03:58.540
if I'm not mistaken in order traversal
will actually print out in order to array.

76
00:03:58.540 --> 00:04:01.950
So there is reasons why you want
to use these things specifically.

77
00:04:01.950 --> 00:04:05.964
There's one more traversal we will do
which is called a post order traversal.

78
00:04:05.964 --> 00:04:09.770
So we covered pre order, in order,
post orders we simply visit the node.

79
00:04:11.060 --> 00:04:14.190
But after doing the recursion,
we have a question.

80
00:04:14.190 --> 00:04:16.680
&gt;&gt; What is the difference between
strong and weak ordering?

81
00:04:17.900 --> 00:04:21.120
&gt;&gt; So, we will get to
a thing that is weak ordered.

82
00:04:21.120 --> 00:04:28.254
So a heap will have something like this,
where this node is saved the minimum node.

83
00:04:28.254 --> 00:04:31.833
Then after that everything
below it is larger than it.

84
00:04:31.833 --> 00:04:36.130
That's considered a weak ordering and
that holds true throughout the whole tree.

85
00:04:36.130 --> 00:04:39.473
That means this node is
the minimum at this point and

86
00:04:39.473 --> 00:04:41.823
everything below low it is larger.

87
00:04:41.823 --> 00:04:48.516
In other words it's not strictly ordered
it's not like 12345 it could be 1,

88
00:04:48.516 --> 00:04:54.650
5, 2 right it could be out of order but
it's still in an order that is weak.

89
00:04:54.650 --> 00:04:56.903
&gt;&gt; Is this traversal expensive?

90
00:04:56.903 --> 00:04:59.171
&gt;&gt; Well let's go over that after this so,

91
00:04:59.171 --> 00:05:02.073
let's just finish this
last traversal alright.

92
00:05:02.073 --> 00:05:04.135
So if we did visit node here at the end,

93
00:05:04.135 --> 00:05:08.004
it would obviously produce a different
ordering to how we visit this and

94
00:05:08.004 --> 00:05:11.696
this can become really we're not
gonna do an example of this today.

95
00:05:11.696 --> 00:05:15.191
But if we are using language in
which you need to clean up memory,

96
00:05:15.191 --> 00:05:19.140
doing a post order traversal, where
you free the memory is how you have to

97
00:05:19.140 --> 00:05:22.247
do that because you first have
to get to all the children,

98
00:05:22.247 --> 00:05:25.017
and then on your way out
you have to delete back up.

99
00:05:25.017 --> 00:05:28.550
So there is reasons why you'd
use different orderings.

100
00:05:28.550 --> 00:05:30.270
And so, let's just do a post order.

101
00:05:30.270 --> 00:05:32.770
So post order, you visit 7, awesome.

102
00:05:32.770 --> 00:05:35.900
But you don't, or you go to 7 but
you don't visit it yet.

103
00:05:35.900 --> 00:05:39.435
You go left, you go left,
now you're at 5 right here.

104
00:05:39.435 --> 00:05:42.710
You try to go left,
you try to go right, you come back out.

105
00:05:42.710 --> 00:05:44.304
So 5 is the first one on the post order.

106
00:05:44.304 --> 00:05:48.466
Then you have hopped back up to 23 and
you go right you can either go left or

107
00:05:48.466 --> 00:05:49.219
right at 4.

108
00:05:49.219 --> 00:05:54.121
So therefore 4 is next then 23 and
then we're all the way back up at 7.

109
00:05:54.121 --> 00:05:58.207
Now we go down to the right hand side
we go down to the left hand side and

110
00:05:58.207 --> 00:06:01.666
now a 18 we can either go left or
right, so we have 18.

111
00:06:01.666 --> 00:06:06.922
We pop back up, we cannot visit 3 quite
yet we go down on the right hand side 21.

112
00:06:06.922 --> 00:06:10.050
Then we pop back up 3,
then we pop back up 7.

113
00:06:10.050 --> 00:06:15.068
So the root note is notice it's at the end
this time preorder roots at the beginning.

114
00:06:15.068 --> 00:06:19.589
In order roots in the middle post order
routes at the end do you see how that

115
00:06:19.589 --> 00:06:22.128
works hopefully you see how that works.

116
00:06:22.128 --> 00:06:24.254
And if you don't see how that
work we are gonna program this.

117
00:06:24.254 --> 00:06:26.232
But what is the running time of this?

118
00:06:26.232 --> 00:06:29.194
So this is where you're going
to have to put on your head and

119
00:06:29.194 --> 00:06:32.766
think of what is our input I keep
talking about that remember rule one.

120
00:06:32.766 --> 00:06:38.101
Running time is always the growth
with respect to the input.

121
00:06:38.101 --> 00:06:40.617
So what would be the input in this case?

122
00:06:40.617 --> 00:06:45.511
The whole tree that is right
that's perfect which means that we

123
00:06:45.511 --> 00:06:48.938
have to visit every
single node in the tree.

124
00:06:48.938 --> 00:06:53.792
So if our tree doubles in size,
how many more operations do we have to do?

125
00:06:53.792 --> 00:06:55.307
Double, exactly.

126
00:06:55.307 --> 00:06:56.706
So what type of growth is that?

127
00:06:59.446 --> 00:07:00.229
&gt;&gt; O of N?

128
00:07:00.229 --> 00:07:02.050
&gt;&gt; Boom, O of N, linear, right?

129
00:07:02.050 --> 00:07:03.158
It grows linear with it.

130
00:07:03.158 --> 00:07:05.730
It does not grow quadraticaly.

131
00:07:05.730 --> 00:07:06.820
A good way to do that.

132
00:07:06.820 --> 00:07:09.870
And you can always tell if things
grow quadratically or linearly.

133
00:07:09.870 --> 00:07:12.703
If you double the input,
does it quadruple the amount of work or

134
00:07:12.703 --> 00:07:14.620
does it double the amount of work?

135
00:07:14.620 --> 00:07:18.035
If it quadruples, the amount of work
you're doing area, if it eight folds

136
00:07:18.035 --> 00:07:21.660
the amount of work you're doing volume,
you can kinda see how that works.

137
00:07:21.660 --> 00:07:24.350
Volume of course, is n cubed.

138
00:07:24.350 --> 00:07:26.480
So yes, so all traversals are n.

139
00:07:26.480 --> 00:07:27.750
This makes inherent sense, right?

140
00:07:27.750 --> 00:07:30.480
If there's n nodes,
you have to visit all n nodes.

141
00:07:30.480 --> 00:07:34.430
It's effectively a 4 loop if a for loop
existed in this case which it does but

142
00:07:34.430 --> 00:07:36.236
I'm going to show you that later.

143
00:07:36.236 --> 00:07:40.894
All right so there we go we just got done
doing the three traversals that are kind

144
00:07:40.894 --> 00:07:43.434
of like the most basic
traversal of a tree or

145
00:07:43.434 --> 00:07:46.907
the the way to do it awesome pre
order in order and all that.

146
00:07:46.907 --> 00:07:49.642
So we're going to code all these.

147
00:07:49.642 --> 00:07:54.857
And they it's really quick and
easy to code up.

148
00:07:54.857 --> 00:08:00.366
&gt;&gt; And that last tree can each branch only
have each node have only two branches or

149
00:08:00.366 --> 00:08:01.995
can be more than that.

150
00:08:01.995 --> 00:08:04.280
&gt;&gt; So that was a binary tree.

151
00:08:04.280 --> 00:08:08.207
So notice that we're at it I mean,
in order post order or

152
00:08:08.207 --> 00:08:13.870
pre order traversalIng does not matter
how many children you have, right.

153
00:08:13.870 --> 00:08:16.833
So you can think of it like
if you're walking the DOM and

154
00:08:16.833 --> 00:08:20.441
you want to print out the entire tree
of what the DOM looks like say to

155
00:08:20.441 --> 00:08:24.459
the standard out you would do some sort
of traversal where you visited it.

156
00:08:24.459 --> 00:08:28.034
Doesn't matter how many children
it has I only did it as a binary

157
00:08:28.034 --> 00:08:32.023
format because it's very easy to
understand, I go left, I go right.

158
00:08:32.023 --> 00:08:36.570
Now an in order printing of a general
tree, obviously very confusing.

159
00:08:36.570 --> 00:08:38.590
At which point is at the middle node,
right?

160
00:08:38.590 --> 00:08:43.309
You can't really have a middle node in a
general tree but you can do a preorder and

161
00:08:43.309 --> 00:08:45.020
a post order very simply.

162
00:08:45.020 --> 00:08:48.137
You print out the value of the node
before you visit all the children or

163
00:08:48.137 --> 00:08:51.910
you visit all the children and
then print out the value of the node.

164
00:08:51.910 --> 00:08:54.190
And obviously visiting the node
depends on what you're doing.

165
00:08:54.190 --> 00:08:57.020
In this case, we're simply printing it.

166
00:08:57.020 --> 00:09:00.588
So if you really think about this,
whoopsies, everything we're doing right

167
00:09:00.588 --> 00:09:03.680
now is effectively just a linked list,
especially binary trees.

168
00:09:03.680 --> 00:09:05.170
They're just a linked list.

169
00:09:05.170 --> 00:09:07.730
Where the next and previous is just
a little bit different, right?

170
00:09:07.730 --> 00:09:09.260
We have left and right.

171
00:09:09.260 --> 00:09:10.880
They don't point back to each other.

172
00:09:10.880 --> 00:09:13.460
Each one has two branches
instead of one branch.

173
00:09:13.460 --> 00:09:16.810
So it's not like a huge amount
has changed from yesterday.

174
00:09:16.810 --> 00:09:21.742
It's just slightly more complicated and in
some sense, the programming also can get

175
00:09:21.742 --> 00:09:26.280
very, very much more complicated, but
we won't do any of that complicated.

