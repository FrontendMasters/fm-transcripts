WEBVTT

1
00:00:00.070 --> 00:00:03.290
Here we go, so let's go back to our kata
machine that we installed yesterday.

2
00:00:03.290 --> 00:00:07.290
If you're not familiar with the kata
machine, you can go get it right here.

3
00:00:07.290 --> 00:00:11.963
It's at my GitHub/kata-machine, the README
is a bit risque as I mentioned yesterday,

4
00:00:11.963 --> 00:00:12.585
here we go.

5
00:00:12.585 --> 00:00:15.590
So we're gonna jump back in, and we're
gonna go to whatever day you've generated.

6
00:00:15.590 --> 00:00:17.556
I think I generated a few extra in here,
and

7
00:00:17.556 --> 00:00:20.010
we're gonna go through these three files.

8
00:00:20.010 --> 00:00:23.380
BT, binary tree, InOrder,
PostOrder, and PreOrder.

9
00:00:23.380 --> 00:00:26.820
So we'll just start with PreOrder
cuz I think that's the easiest and

10
00:00:26.820 --> 00:00:28.905
what we're given is the head to the tree.

11
00:00:28.905 --> 00:00:33.442
Usually we call this the head or
the root, I tend to call the head and

12
00:00:33.442 --> 00:00:38.060
what I want to return out
are the visited nodes in that order.

13
00:00:38.060 --> 00:00:42.510
So we're gonna do a pre order array of
our tree, so how are we gonna do that?

14
00:00:42.510 --> 00:00:45.831
Well, in general, what I tend to do is
always create a second function whenever

15
00:00:45.831 --> 00:00:47.180
I'm doing recursion, right?

16
00:00:47.180 --> 00:00:50.653
So let's do a function walk
that takes in just a node,

17
00:00:50.653 --> 00:00:53.980
it doesn't have to be a specific note,
all right?

18
00:00:53.980 --> 00:00:57.530
We owe binary we're not gonna just simply
assume that this is the head, let's see,

19
00:00:57.530 --> 00:00:58.528
what are we doing?

20
00:00:58.528 --> 00:01:01.310
It's a number IRJI already
have it as a number, awesome.

21
00:01:01.310 --> 00:01:04.406
And then I'm also gonna have our path,
which is a number array and

22
00:01:04.406 --> 00:01:07.580
then I can also return it back out
just to make it super convenient.

23
00:01:08.800 --> 00:01:13.342
Awesome, and so one more thing remember,
when we're doing recursion,

24
00:01:13.342 --> 00:01:15.820
we have to consider our base case.

25
00:01:15.820 --> 00:01:18.383
What is the base case of a traversal?

26
00:01:22.300 --> 00:01:26.976
&gt;&gt; I mean, you've seen something or
not or if you?

27
00:01:26.976 --> 00:01:30.103
&gt;&gt; Nope, so
if you're seen something or not,

28
00:01:30.103 --> 00:01:35.495
no because a traversal luckily uses
the stack to keep ordering for us.

29
00:01:35.495 --> 00:01:38.637
The function call stack to
keep ordering for us, so

30
00:01:38.637 --> 00:01:41.707
the traversal really or
the base case if you really

31
00:01:41.707 --> 00:01:45.310
think about it is when we are at
a node that doesn't exist.

32
00:01:45.310 --> 00:01:48.570
We've gone to a child that's
not actually there, so

33
00:01:48.570 --> 00:01:52.850
the best case where we stop recursing
is right here, that is the spot.

34
00:01:52.850 --> 00:01:56.689
Please, we can no longer keep going down,
we are done recursing, we can say, hey,

35
00:01:56.689 --> 00:01:59.110
we will stop here at this moment.

36
00:01:59.110 --> 00:02:03.175
So let's go here and
go if not current then return path,

37
00:02:03.175 --> 00:02:06.815
there we go cuz we're just
making it convenient.

38
00:02:06.815 --> 00:02:10.982
Even though we're passing in path we're
also returning path and it just makes it

39
00:02:10.982 --> 00:02:15.106
super convenient for down here cuz then I
can just go work turn a walk head array.

40
00:02:15.106 --> 00:02:18.761
Super convenient with either,
you don't have to do that but

41
00:02:18.761 --> 00:02:20.418
I just find it convenient.

42
00:02:20.418 --> 00:02:25.792
There we go so, that's the base case
we've gotten to the point in which we

43
00:02:25.792 --> 00:02:31.010
do not wish to keep recursing or
we cannot actually recurse any longer.

44
00:02:31.010 --> 00:02:35.722
So now remember I also told you yesterday
that in recursion Aug actually comes

45
00:02:35.722 --> 00:02:39.940
with three sub steps and the three
sub steps of the recursive step is.

46
00:02:39.940 --> 00:02:45.050
Pre, recurse, post and I did that
intentionally because I wanted today

47
00:02:45.050 --> 00:02:49.850
to be easier, because now we're
doing a pre and in order and a post.

48
00:02:49.850 --> 00:02:53.086
So you can imagine where
each of these operations go.

49
00:02:53.086 --> 00:02:55.188
So since we're in a pre walk,

50
00:02:55.188 --> 00:02:59.390
we will first push into our
path the node value, right.

51
00:02:59.390 --> 00:03:04.268
So path push, current, value, we're doing
this as the first step in our recursion

52
00:03:04.268 --> 00:03:08.020
here, and just to make it
clear I'll put it right there.

53
00:03:08.020 --> 00:03:11.649
And then now we need to recurse, so
we need to visit the left hand side and

54
00:03:11.649 --> 00:03:13.240
then the right hand side.

55
00:03:13.240 --> 00:03:17.045
Typically when you're doing traversals
of a tree especially a binary tree,

56
00:03:17.045 --> 00:03:19.220
you always traverse left than right, why?

57
00:03:20.330 --> 00:03:23.404
Maybe a binary search tree influenced
this, I don't know, you don't have to

58
00:03:23.404 --> 00:03:26.860
technically, it would just be weird if I
saw something that didn't do it, right?

59
00:03:26.860 --> 00:03:28.797
It's like one of those
conventions where yeah,

60
00:03:28.797 --> 00:03:31.884
in a linked list you can call it next and
previous or you can just call it A and B.

61
00:03:31.884 --> 00:03:33.898
It doesn't really matter
what you call it but

62
00:03:33.898 --> 00:03:35.860
it would just be weird
to do it differently.

63
00:03:35.860 --> 00:03:41.777
All right, so let's just do that for
niceness and now let's recurse,

64
00:03:41.777 --> 00:03:46.824
so I'm gonna recall walk with
curr.left and curr.right.

65
00:03:46.824 --> 00:03:51.930
There we go and then of course, don't
forget to put in the actual path oopsies.

66
00:03:51.930 --> 00:03:58.350
There we go, we got the path in there and
now it's a null, I forgot I did that.

67
00:03:58.350 --> 00:04:01.383
That's how silly of me to do that,
there we go, so

68
00:04:01.383 --> 00:04:03.565
now we have null as the other value.

69
00:04:03.565 --> 00:04:06.114
So if we hit a node in
which it doesn't exist,

70
00:04:06.114 --> 00:04:11.200
it will just simply return else we keep
on recusing until we get to the bottom.

71
00:04:11.200 --> 00:04:13.780
There we go, now post,
do we do anything in post?

72
00:04:13.780 --> 00:04:18.106
No, we've already visited the node by
pushing into the path, then we walk,

73
00:04:18.106 --> 00:04:18.915
we're done.

74
00:04:18.915 --> 00:04:22.445
So the last thing I need to do is
just return out the path, right?

75
00:04:22.445 --> 00:04:26.827
There we go, so as we recurse, we will
keep walking, keep walking, keep walking,

76
00:04:26.827 --> 00:04:28.240
hit a dead node.

77
00:04:28.240 --> 00:04:32.160
Or hit an empty node, go back up
the stack add the node to the value,

78
00:04:32.160 --> 00:04:36.788
go down the other way if it's empty,
come back up and I'll just keep on going.

79
00:04:36.788 --> 00:04:40.558
So hopefully this all makes sense, is
there any questions right here cuz I feel

80
00:04:40.558 --> 00:04:43.256
like this is a very fundamental
part of tree traversal.

81
00:04:43.256 --> 00:04:47.142
And we'd much rather answer any questions
right now than have it be ignored because

82
00:04:47.142 --> 00:04:50.597
we're only gonna be doing tree traversals
for quite some time coming up.

83
00:04:50.597 --> 00:04:54.210
&gt;&gt; What does returning path and
base case do?

84
00:04:54.210 --> 00:04:57.012
&gt;&gt; So the reason why return path and
base case and

85
00:04:57.012 --> 00:05:01.897
right here is that effectively a it's my
signature right I have it right here.

86
00:05:01.897 --> 00:05:03.755
But it's really just a convenience here,

87
00:05:03.755 --> 00:05:06.760
what I'm gonna do is I'm going like
this I'm gonna put this as void.

88
00:05:06.760 --> 00:05:08.517
And I'm just gonna simply return and

89
00:05:08.517 --> 00:05:11.390
then I don't need to put
anything right here, right?

90
00:05:11.390 --> 00:05:12.902
We don't need to return,

91
00:05:12.902 --> 00:05:16.350
well that means right here I
need to change this signature.

92
00:05:16.350 --> 00:05:21.022
So I'm gonna go like this const path
equals an array then I'll have to pass in

93
00:05:21.022 --> 00:05:25.410
path so it gets mutated as it walks and
then return back out path.

94
00:05:25.410 --> 00:05:30.565
It's really just a convenience more than
anything else, so there is no reason

95
00:05:30.565 --> 00:05:36.046
why you have to do that, other than if, I
say my return signature is a number array.

96
00:05:36.046 --> 00:05:40.409
Then I have to return that path no matter
what, even if it is a base case and

97
00:05:40.409 --> 00:05:43.501
it actually doesn't really
leave the recursion.

98
00:05:43.501 --> 00:05:49.530
And so you just consistency compilers is
the answer, we got one more question.

99
00:05:49.530 --> 00:05:53.842
&gt;&gt; From someone who doesn't know type
script, what's a number is it in an int?

100
00:05:53.842 --> 00:05:59.067
&gt;&gt; All right, so a number is
a beautiful value in which is either

101
00:05:59.067 --> 00:06:05.828
a floating point number, or I think
it's a floating point nearish 64 bits or

102
00:06:05.828 --> 00:06:09.945
it can be an integer up
to 2 to the 53 minus 1.

103
00:06:09.945 --> 00:06:14.727
It's pretty standard operation really in
any language is 2 to the 53 minus 1 we've

104
00:06:14.727 --> 00:06:17.885
all been there,
who hasn't been there before, right?

105
00:06:17.885 --> 00:06:24.615
Which actually is a huge pain in the butt
because we'll say WebSocket algorithm

106
00:06:24.615 --> 00:06:31.053
if you get a 127 in the second byte you
have to do a 64 bit read of a number.

107
00:06:31.053 --> 00:06:35.815
In which JavaScript can't do that, so you
have to do like a big in read of a number,

108
00:06:35.815 --> 00:06:38.700
very, very annoying, it's just terrible.

109
00:06:38.700 --> 00:06:40.406
Anyways sorry, keep going.

110
00:06:40.406 --> 00:06:47.880
&gt;&gt; Do you need to set path from the return
value of the walk which is called in walk?

111
00:06:47.880 --> 00:06:49.300
&gt;&gt; Do I need to set the what?

112
00:06:50.530 --> 00:06:51.600
One more time.

113
00:06:51.600 --> 00:06:56.360
&gt;&gt; Do you need to set path from the return
value of the walk which is called in walk?

114
00:06:57.430 --> 00:07:00.878
&gt;&gt; I don't need to set, I mean the only
thing okay, so, I think I understand

115
00:07:00.878 --> 00:07:04.179
the question, the question,
I believe I'm gonna try to restate it.

116
00:07:04.179 --> 00:07:08.825
Do I need to mutate path in any way or
do I need to mutate or

117
00:07:08.825 --> 00:07:12.979
hold on to the value
that's returned from walk?

118
00:07:12.979 --> 00:07:15.131
I actually am not quite
sure what it's asking but

119
00:07:15.131 --> 00:07:18.240
I'll try to explain it the best I
can what we're doing with this path.

120
00:07:18.240 --> 00:07:22.406
So the path is an array in JavaScript
everything that you pass and is passed and

121
00:07:22.406 --> 00:07:25.111
effectively by pointer
unless if it's a number.

122
00:07:25.111 --> 00:07:27.942
And so at that point,
if I mutate whatever is passed in,

123
00:07:27.942 --> 00:07:31.510
it will actually happen to the value
that was containing it, right?

124
00:07:31.510 --> 00:07:35.150
This is not an immutable item, this is
not C++ where if you pass in a vector,

125
00:07:35.150 --> 00:07:37.838
it actually copies it unless
if you pass it by reference,

126
00:07:37.838 --> 00:07:40.530
just think of it as passed
in by reference always.

127
00:07:40.530 --> 00:07:45.049
And so when I pass this in, as I walk
I mutate the thing that was passed in.

128
00:07:45.049 --> 00:07:48.775
And so I mutate it, then I pass
it into the next walk function,

129
00:07:48.775 --> 00:07:51.890
I mutate that pass into
the next walk function.

130
00:07:51.890 --> 00:07:56.160
So everything will be added in
order of wherever I put this in.

131
00:07:56.160 --> 00:07:58.656
If it's pre in or post,
and then afterwards,

132
00:07:58.656 --> 00:08:02.951
I just simply have to return it because
it's been mutated by the walk function.

133
00:08:07.387 --> 00:08:08.809
Does that make sense?

134
00:08:08.809 --> 00:08:11.146
Yeah.

135
00:08:11.146 --> 00:08:13.772
&gt;&gt; Base case should return path, no?

136
00:08:13.772 --> 00:08:18.288
&gt;&gt; Well, I took that out, remember to
show that I don't actually need to return

137
00:08:18.288 --> 00:08:20.938
the number it was just
simply a convenience.

138
00:08:20.938 --> 00:08:25.856
So I don't have to do this little song and
dance right here where I create the item,

139
00:08:25.856 --> 00:08:27.730
pass it in or turn it out.

140
00:08:27.730 --> 00:08:32.465
Instead, I can just do this
by simply returning it right

141
00:08:32.465 --> 00:08:37.316
here return path,
I'm not creating anything, right?

142
00:08:37.316 --> 00:08:41.957
Cuz when I return path I'm just returning
a reference to it, right I'm just simply

143
00:08:41.957 --> 00:08:45.475
returning a reference to something
that was already created,

144
00:08:45.475 --> 00:08:47.288
it just was created right here.

145
00:08:47.288 --> 00:08:52.906
So I don't have to create that
handle to it within my function.

146
00:08:52.906 --> 00:08:57.559
I just like it better,
it's not like it's anything fantastic.

147
00:08:57.559 --> 00:09:00.049
All right, I think we're good to go, so

148
00:09:00.049 --> 00:09:04.757
what I'm gonna do is I'm gonna take all
this, and I'm gonna copy all of it.

149
00:09:04.757 --> 00:09:08.350
Just to make this a lot easier,
we're gonna copy all of it and

150
00:09:08.350 --> 00:09:10.610
then we're gonna open up BTInOrder.

151
00:09:12.560 --> 00:09:15.888
All right, so I'm gonna paste all of it,
go all the way down,

152
00:09:15.888 --> 00:09:19.820
move my walk into my new function and
then erase the pre order one.

153
00:09:19.820 --> 00:09:23.582
And now we have the exact same function
inside here we have pretty much the exact

154
00:09:23.582 --> 00:09:25.550
same setup and I'm gonna move this.

155
00:09:25.550 --> 00:09:29.747
I need to do something with this, right
cuz this is where we visited the node,

156
00:09:29.747 --> 00:09:30.340
correct?

157
00:09:31.740 --> 00:09:35.680
All right, so what do I need to do
with this in an in-order traversal?

158
00:09:35.680 --> 00:09:39.480
If you don't remember, this is an in-order
traversal is this one right here.

159
00:09:39.480 --> 00:09:44.456
We need to go down our left hand
side until we can no longer go left,

160
00:09:44.456 --> 00:09:48.987
then we visit the node,
then we go down our right hand side.

161
00:09:48.987 --> 00:09:51.779
And then that eventually
bubbles all the way back up,

162
00:09:51.779 --> 00:09:54.334
so what is the change we
need to make to this code?

163
00:09:54.334 --> 00:09:58.300
Right now we are visiting the node,
then going left, then going right.

164
00:09:58.300 --> 00:10:03.365
In in order, we go left,
visit the node, go right So

165
00:10:03.365 --> 00:10:07.394
We just put it In bitwixe, the two walks,

166
00:10:07.394 --> 00:10:13.060
right we split that walk in
twain It is fantastic, right?

167
00:10:13.060 --> 00:10:16.285
So now we walk left until
we can no longer walk left,

168
00:10:16.285 --> 00:10:18.830
we push an R value or visit the node.

169
00:10:18.830 --> 00:10:24.700
Then we walk right and let the whole
algorithm redo itself, make sense?

170
00:10:24.700 --> 00:10:27.780
It's just I mean,
it's just literally that simple, right?

171
00:10:27.780 --> 00:10:30.984
So again,
let's just copy the whole thing and

172
00:10:30.984 --> 00:10:35.272
let's open up post order and
again I'm gonna paste it all in.

173
00:10:35.272 --> 00:10:38.536
Go down here, move this into the post
order function just so it's like named

174
00:10:38.536 --> 00:10:41.708
beautifully, you don't even need to
do that cuz it's a default export.

175
00:10:41.708 --> 00:10:44.495
Default exports don't
actually consider name, so

176
00:10:44.495 --> 00:10:47.992
we could have done it any way you want to,
again what do we do here?

177
00:10:47.992 --> 00:10:54.055
In a post order world, we go left,
then we go right, then we visit the node.

178
00:10:54.055 --> 00:10:56.183
So how should this code change?

179
00:10:59.469 --> 00:11:04.220
Well, yeah, that's right born on Friday,
we do that we push it down,

180
00:11:04.220 --> 00:11:06.927
we move it down one, and bam, we got it.

181
00:11:06.927 --> 00:11:10.190
So there we go, that is a post order
traversal, it's really not that hard.

182
00:11:10.190 --> 00:11:13.928
In fact, I can push it down to right
here to kind of show you hey it's in

183
00:11:13.928 --> 00:11:15.418
the post section of it all.

184
00:11:15.418 --> 00:11:19.670
And that's it, that is a post,
a pre and in order traversal and

185
00:11:19.670 --> 00:11:24.565
just to prove that I'm not lying to you
cuz I can just hear right now people

186
00:11:24.565 --> 00:11:26.751
really like why are you saying?

187
00:11:26.751 --> 00:11:30.602
MPX gest I believe if I only do order this
might get all three I don't know how many

188
00:11:30.602 --> 00:11:31.825
tests we're gonna get.

189
00:11:31.825 --> 00:11:36.712
Yes we got them all,
done look at that we got all three

190
00:11:36.712 --> 00:11:41.406
of them first try that's
a triple threat first try.

191
00:11:41.406 --> 00:11:43.575
So I get compared to the doctor sometimes,

192
00:11:43.575 --> 00:11:47.744
anyways that's a pretty inside baseball
joke right there I'm sorry about that.

193
00:11:47.744 --> 00:11:51.000
All right so there we go we
just got done doing traversals,

194
00:11:51.000 --> 00:11:52.860
all three types of traversals and

195
00:11:52.860 --> 00:11:56.659
they're all fairly easy right that
was only a couple lines of code.

196
00:11:56.659 --> 00:12:00.844
All right, so these types of
traversals are known as depth first,

197
00:12:00.844 --> 00:12:03.024
why are they known as depth first?

198
00:12:03.024 --> 00:12:05.935
Let's jump back here and
kind of explain why that is,

199
00:12:05.935 --> 00:12:10.407
when you do recursion obviously you keep
calling a function with itself, right?

200
00:12:10.407 --> 00:12:13.592
And you keep on passing in something
new until you get to a base case.

201
00:12:13.592 --> 00:12:18.219
Which means if we do an in order
traversal we are going to go left all

202
00:12:18.219 --> 00:12:20.927
the way until we can no longer go left.

203
00:12:20.927 --> 00:12:25.610
In other words we're gonna go as deep as
possible in this tree on the left hand

204
00:12:25.610 --> 00:12:27.302
side and then visit a node.

205
00:12:27.302 --> 00:12:31.815
Then we're gonna go right once and
then go as left as deep as possible and

206
00:12:31.815 --> 00:12:34.085
then come back and visit that node.

207
00:12:34.085 --> 00:12:39.024
And so if you think about we always go
depth first, right that's what that means,

208
00:12:39.024 --> 00:12:43.907
that's why it's called the DFS or depth
first search or depth first traversal.

209
00:12:46.591 --> 00:12:47.327
So there we go but

210
00:12:47.327 --> 00:12:50.650
now there's actually another type of
traversal which is a breadth first.

211
00:12:50.650 --> 00:12:54.008
But before I do that I
wanna ask something,

212
00:12:54.008 --> 00:12:59.432
what implicit data structure did we
use during a depth first search?

213
00:13:03.087 --> 00:13:05.559
&gt;&gt; Binary node or binary tree.

214
00:13:05.559 --> 00:13:08.091
&gt;&gt; That's the data structure
we definitely used but

215
00:13:08.091 --> 00:13:10.991
doing the traversal we used
an implicit data structure.

216
00:13:10.991 --> 00:13:16.182
Something in which we didn't specify but
it's actually being used.

217
00:13:16.182 --> 00:13:19.314
Let me write it out, I bet you this
will make more sense once I read it,,

218
00:13:19.314 --> 00:13:21.837
I wanted to do this because I
really want to strongly tie.

219
00:13:21.837 --> 00:13:25.046
All these data structures together
this is from yesterday, so

220
00:13:25.046 --> 00:13:27.054
right now my top note is 7,23,5.

221
00:13:27.054 --> 00:13:30.967
So I'm just gonna kind of write out
in in order traversal, all right, so

222
00:13:30.967 --> 00:13:33.998
if you think about it,
we first start off at 5, right?

223
00:13:33.998 --> 00:13:37.172
Wait was it 7 or
5 I've already forgot okay, 7 at the top,

224
00:13:37.172 --> 00:13:39.790
pretend they wrote 7 their first drive.

225
00:13:39.790 --> 00:13:45.030
All right so we start out at 7 and
then we visit what is it?

226
00:13:45.030 --> 00:13:49.830
20 something, my goodness how have
I forgot this in my head it's 23,

227
00:13:49.830 --> 00:13:51.112
23 awesome 23.

228
00:13:51.112 --> 00:13:57.214
And then we visit 5, right and
then we print out the value at 5,

229
00:13:57.214 --> 00:14:01.512
then we try to go right and
we can't go right.

230
00:14:01.512 --> 00:14:07.068
So we pop it off then we're at 23 and
we try to go right

231
00:14:07.068 --> 00:14:12.515
which of course we can go right and
so a 4 gets put on.

232
00:14:12.515 --> 00:14:16.129
We can no longer go, we cannot do any
more traversal and we printed out and

233
00:14:16.129 --> 00:14:19.980
that gets popped off, then we can no
longer do any more traversing at 23, so

234
00:14:19.980 --> 00:14:21.590
that gets popped off.

235
00:14:21.590 --> 00:14:22.932
What data structure is that?

236
00:14:25.682 --> 00:14:30.682
Boom stack that's just a stack
we're implicitly using how

237
00:14:30.682 --> 00:14:33.183
we call functions as a stack.

238
00:14:33.183 --> 00:14:35.139
Does that make sense?

239
00:14:35.139 --> 00:14:39.104
I think it really doesn't it and really
helps you visualize I think recursion

240
00:14:39.104 --> 00:14:42.592
a bit better to realize you're just
pushing and popping on a stack.

241
00:14:42.592 --> 00:14:46.652
That's all you're doing which means we can
technically do any of these traversals

242
00:14:46.652 --> 00:14:47.992
without using recursion.

243
00:14:47.992 --> 00:14:52.077
We just simply have to add
the children to a stack and

244
00:14:52.077 --> 00:14:57.400
we do the same thing,
pretty neat I think it's pretty neat.

