WEBVTT

1
00:00:00.000 --> 00:00:02.171
All right, so, shockingly we're
gonna do our first data structure.

2
00:00:02.171 --> 00:00:04.804
We're gonna start off with the data
structure first, not an algorithm.

3
00:00:04.804 --> 00:00:08.612
You've already seen this data
structure many times in your life,

4
00:00:08.612 --> 00:00:09.911
is everyone excited?

5
00:00:09.911 --> 00:00:11.871
All right, we got lots of smiles.

6
00:00:11.871 --> 00:00:14.871
I think I saw one tear,
it was just one tear.

7
00:00:14.871 --> 00:00:15.931
All right, arrays, yes.

8
00:00:15.931 --> 00:00:17.771
I know we're gonna cover arrays first.

9
00:00:17.771 --> 00:00:21.995
You're probably saying well I know what
arrays are well you also said that,

10
00:00:21.995 --> 00:00:25.634
that was an array which it's not
an array so we're gonna do this.

11
00:00:25.634 --> 00:00:29.234
So I'm glad this joke worked out because
it wouldn't have been funny if I didn't.

12
00:00:29.234 --> 00:00:32.894
So if const array isn't
an array well what is it?

13
00:00:32.894 --> 00:00:35.071
Well, hopefully by
the end of this section,

14
00:00:35.071 --> 00:00:38.732
we will be able to derive what it is we
will be able to empirically look at it and

15
00:00:38.732 --> 00:00:40.994
say, it's actually this data structure.

16
00:00:40.994 --> 00:00:44.481
JavaScript arrays are actually much more
complicated in that they do a lot of cool

17
00:00:44.481 --> 00:00:45.774
tricks underneath the hood.

18
00:00:45.774 --> 00:00:50.252
And I'm sure they morph algorithms
depending on how you use them if you have

19
00:00:50.252 --> 00:00:52.256
an array that uses huge numbers.

20
00:00:52.256 --> 00:00:56.696
I am positive JavaScript's not like well,
you did set one element at a billion.

21
00:00:56.696 --> 00:01:04.007
We're gonna create 999,999,999 positions
before it and put that into memory.

22
00:01:04.007 --> 00:01:05.887
I'm very sure that they're very smart and
so

23
00:01:05.887 --> 00:01:09.259
they're not quite the data structure
we'll point out, they do a lot of things.

24
00:01:09.259 --> 00:01:13.039
But I'm also positive they are this
fundamental base if you use it as a array.

25
00:01:13.039 --> 00:01:16.211
All right, so let's jump with this
I'm gonna go to the whiteboard.

26
00:01:16.211 --> 00:01:18.269
And then we're gonna go to node and
we're gonna observe this.

27
00:01:18.269 --> 00:01:21.291
In the most fundamental
kinda idea of an array here.

28
00:01:21.291 --> 00:01:23.854
I'm gonna actually write this up here and
then I'll save these and

29
00:01:23.854 --> 00:01:25.331
I'll put them on the website as well.

30
00:01:25.331 --> 00:01:26.359
An array.

31
00:01:26.359 --> 00:01:28.900
So, the most fundamental idea of an array,

32
00:01:28.900 --> 00:01:31.451
is that all it is
a contiguous memory space.

33
00:01:31.451 --> 00:01:35.642
Contiguous meaning unbreaking memory
space in which contains a certain amount

34
00:01:35.642 --> 00:01:36.209
of bytes.

35
00:01:36.209 --> 00:01:39.745
Now, everything about
a computer is just numbers.

36
00:01:39.745 --> 00:01:42.185
These are all zeros and
they're all ones, right?

37
00:01:42.185 --> 00:01:44.203
That's all they are,
is a bunch of these things.

38
00:01:44.203 --> 00:01:49.370
And how memory is interpreted is based
on what you tell the compiler or

39
00:01:49.370 --> 00:01:52.053
whatever like how to interpret it.

40
00:01:52.053 --> 00:01:54.052
And so when it sees a chunk of memory.

41
00:01:54.052 --> 00:02:00.194
And goes well, these four bytes I'm gonna
treat them as a singular number, right.

42
00:02:00.194 --> 00:02:04.728
This is actually gonna be a 32 bit number
that is what the compiler telling or

43
00:02:04.728 --> 00:02:08.915
that is gonna be your program just
understanding this piece of memory in

44
00:02:08.915 --> 00:02:10.195
a very specific way.

45
00:02:10.195 --> 00:02:14.590
Just because it's contiguous, just because
it's all one piece of memory doesn't mean

46
00:02:14.590 --> 00:02:17.534
that it has any specific meaning
until you give it meaning.

47
00:02:17.534 --> 00:02:21.185
So, an array is effectively is just a big,
long version of this.

48
00:02:21.185 --> 00:02:22.629
Where you have zero or

49
00:02:22.629 --> 00:02:27.134
more pieces of memory that are understood
as a single type in a row.

50
00:02:27.134 --> 00:02:28.450
So, imagine if you did so,

51
00:02:28.450 --> 00:02:31.614
in a more traditional language
you could do something like this.

52
00:02:31.614 --> 00:02:33.386
I have an int array of three.

53
00:02:33.386 --> 00:02:37.406
Meaning, I want three
INTs in contiguous space,

54
00:02:37.406 --> 00:02:40.766
unbreakable like for me to be able to use.

55
00:02:40.766 --> 00:02:44.735
And so now you can walk that space by
simply providing it's a we call this

56
00:02:44.735 --> 00:02:45.271
thing A.

57
00:02:45.271 --> 00:02:47.777
I think I went to the edge of my
screen where I can't actually put

58
00:02:47.777 --> 00:02:48.591
anything in there.

59
00:02:48.591 --> 00:02:50.331
Let's say we did that, there we go.

60
00:02:50.331 --> 00:02:54.533
And if you wanted to walk that,
if you did A0.

61
00:02:54.533 --> 00:02:58.950
What you're really telling the computer to
do is hey, go to the memory address of A.

62
00:02:58.950 --> 00:03:03.805
Then add in the offset of zero
multiplied by how big my type is.

63
00:03:03.805 --> 00:03:06.009
Cuz if your type is 32 bits or

64
00:03:06.009 --> 00:03:11.930
four bytes index one has to be four bytes
into the array or into the memory space.

65
00:03:11.930 --> 00:03:14.732
And that's kind of what
creates an actual array.

66
00:03:14.732 --> 00:03:18.512
And so for people to kinda see that and
understand the fundamental operation,

67
00:03:18.512 --> 00:03:22.462
I think it's really good because it helps
kinda put yourself into the mentality of

68
00:03:22.462 --> 00:03:23.105
a computer.

69
00:03:23.105 --> 00:03:25.800
Cuz when you access these big
long pieces of memory to you,

70
00:03:25.800 --> 00:03:27.185
it's very abstracted away.

71
00:03:27.185 --> 00:03:29.807
It's just like something that,
it's like a slot.

72
00:03:29.807 --> 00:03:32.226
But underneath the hood,
it's gonna be contiguous.

73
00:03:32.226 --> 00:03:33.726
It's gonna be just zeros and ones.

74
00:03:33.726 --> 00:03:39.248
And something has to understand that and
make it into the type you think it is.

75
00:03:39.248 --> 00:03:44.828
And so that's effectively all an array
is a simple contiguous memory space.

76
00:03:44.828 --> 00:03:47.273
And so I wanted to just put
that out there, just so

77
00:03:47.273 --> 00:03:50.086
it feels like we are talking
about the exact same thing.

78
00:03:50.086 --> 00:03:52.737
And I can kind of actually show you
that so I'm gonna jump into node for

79
00:03:52.737 --> 00:03:53.338
a second here.

80
00:03:53.338 --> 00:03:55.287
And we're gonna create something
called an array buffer.

81
00:03:55.287 --> 00:04:00.419
So no does have something like an array.

82
00:04:00.419 --> 00:04:05.397
So I can like this const
a = new ArrayBuffer 6.

83
00:04:05.397 --> 00:04:09.648
So now when I type this out,
you can see it's just a series of zeros.

84
00:04:09.648 --> 00:04:10.848
There we go.

85
00:04:10.848 --> 00:04:13.162
So I have this beautiful
series of zeros and

86
00:04:13.162 --> 00:04:15.808
I wanna interpret those
zeros in a specific way.

87
00:04:15.808 --> 00:04:17.220
So I can go like this.

88
00:04:17.220 --> 00:04:20.830
a8 = a new Uint8Array.

89
00:04:20.830 --> 00:04:24.330
So I'm gonna take them as
unsigned eight bit numbers.

90
00:04:24.330 --> 00:04:26.870
That means a number between 0 and 255.

91
00:04:26.870 --> 00:04:29.010
And I'm gonna pass in a.

92
00:04:29.010 --> 00:04:30.860
So now I have a view into this.

93
00:04:30.860 --> 00:04:37.074
And I can do something
like this a8 0 = 45.

94
00:04:37.074 --> 00:04:38.841
And so now when I print out A,

95
00:04:38.841 --> 00:04:42.613
you'll notice I've actually
changed a piece of that data.

96
00:04:42.613 --> 00:04:46.187
When I do a simple.

97
00:04:46.187 --> 00:04:48.527
So let's go by 2, and I set 2.

98
00:04:48.527 --> 00:04:52.133
When I do it again,
you'll notice that I set the first byte,

99
00:04:52.133 --> 00:04:54.274
skipped one, set the second byte.

100
00:04:54.274 --> 00:04:55.751
It's kind of interesting, right.

101
00:04:55.751 --> 00:05:01.471
But now I can do something like this,
const a16 = new UInt16Array.

102
00:05:01.471 --> 00:05:04.130
And now we'll print out
the contents of the array.

103
00:05:04.130 --> 00:05:08.213
As you can see, nothing has changed
if we use our new UN 16 array and

104
00:05:08.213 --> 00:05:13.169
set the second index, remember we use the
width so this one should be further out.

105
00:05:13.169 --> 00:05:17.669
This should be the last two bytes and set
it to 4545 which is a pretty large number.

106
00:05:17.669 --> 00:05:19.518
So now when I print it out,
you'll notice something.

107
00:05:19.518 --> 00:05:23.610
I specified the first one in decimal and
we got a value of 2D,

108
00:05:23.610 --> 00:05:27.553
specified the second one in hexadecimal,
got 4545.

109
00:05:27.553 --> 00:05:31.973
But what you'll notice is that I said
position two and look at where it set it.

110
00:05:31.973 --> 00:05:39.153
It set it on,
what is it the fifth and sixth byte?

111
00:05:39.153 --> 00:05:42.777
Now that might be a bit confusing,
but what I just did is I took

112
00:05:42.777 --> 00:05:46.990
a contiguous memory space and
I interpreted it in two different ways.

113
00:05:46.990 --> 00:05:49.930
I first said, look,
I'm gonna look at this as eight bit units.

114
00:05:49.930 --> 00:05:51.963
And I can walk them in eight bit units.

115
00:05:51.963 --> 00:05:55.083
And I said, okay,
let's look at them in 16 bit units and

116
00:05:55.083 --> 00:05:56.941
I can walk them 16 bits at a time.

117
00:05:56.941 --> 00:05:58.307
Very, very different and

118
00:05:58.307 --> 00:06:01.421
that's effectively what is
going on underneath the hood.

119
00:06:01.421 --> 00:06:05.243
This is fundamentally what an array is,
I'm walking these positions.

120
00:06:05.243 --> 00:06:08.856
And I know this might be a bit confusing
if you've never seen any of these things

121
00:06:08.856 --> 00:06:09.803
is very confusing.

122
00:06:09.803 --> 00:06:11.961
Most of the course isn't
gonna deal with this.

123
00:06:11.961 --> 00:06:14.429
I just wanted to make sure
that when I say array,

124
00:06:14.429 --> 00:06:16.481
this is more of what I'm referring to.

125
00:06:16.481 --> 00:06:19.563
When I say list,
I'm not referring to that.

126
00:06:19.563 --> 00:06:23.978
And I wanted to make it as
abundantly clear as possible, so

127
00:06:23.978 --> 00:06:28.583
that way we have the same language
together as we go forward.

128
00:06:28.583 --> 00:06:30.323
All right.

129
00:06:30.323 --> 00:06:34.927
&gt;&gt; So you set a16 to 2, to that, and

130
00:06:34.927 --> 00:06:38.004
then now a got changed.

131
00:06:38.004 --> 00:06:39.521
&gt;&gt; All right, so yeah,
let me walk through for

132
00:06:39.521 --> 00:06:41.124
those that don't understand what happened.

133
00:06:41.124 --> 00:06:44.763
So an array buffer is a contiguous piece
of memory you can create in JavaScript.

134
00:06:44.763 --> 00:06:47.903
Then you can create views into this data.

135
00:06:47.903 --> 00:06:51.084
So one view I created right
here was an eight bit array.

136
00:06:51.084 --> 00:06:55.193
That means every single time I
increase the offset into it,

137
00:06:55.193 --> 00:06:59.466
it's gonna take the width of that type,
which is eight bits,

138
00:06:59.466 --> 00:07:02.273
multiplied by the offset that I give it.

139
00:07:02.273 --> 00:07:03.907
And then edit or get that value.

140
00:07:03.907 --> 00:07:08.407
So when I say set position 0,
it goes, okay, I'm array buffer A.

141
00:07:08.407 --> 00:07:12.869
I'm gonna go offset times eight and
grab that piece of memory.

142
00:07:12.869 --> 00:07:15.129
And then I do it again with two.

143
00:07:15.129 --> 00:07:20.289
Okay, I'm gonna do two,
I'm gonna go over that amount 16 bits.

144
00:07:20.289 --> 00:07:23.804
And then I'm gonna grab from
effectively the 17th through the 20 or

145
00:07:23.804 --> 00:07:25.569
the 16th through the 23rd bit.

146
00:07:25.569 --> 00:07:30.461
I'm gonna grab that or a byte, prescribes
the second byte, index that is, and

147
00:07:30.461 --> 00:07:32.369
grabs that out or sets that in.

148
00:07:32.369 --> 00:07:36.483
But then I create the exact
same piece of memory A, but

149
00:07:36.483 --> 00:07:38.869
this time I set it as a 16 bit.

150
00:07:38.869 --> 00:07:42.009
So I completely change the value
that I'm looking at, right.

151
00:07:42.009 --> 00:07:46.384
Those are two very different values in
fact if I were to store the same value due

152
00:07:46.384 --> 00:07:47.341
to my computer.

153
00:07:47.341 --> 00:07:49.579
What is something called endianness.

154
00:07:49.579 --> 00:07:53.959
When I store this value it will be
a bit confusing when you look at it.

155
00:07:53.959 --> 00:07:57.781
Because of how computers interpret
it look at where it put that 45.

156
00:07:57.781 --> 00:08:01.299
It put it in the most significant position
probably not where you thought it was

157
00:08:01.299 --> 00:08:01.947
gonna put it.

158
00:08:01.947 --> 00:08:07.473
But that's because I've now interpreted
this memory space differently than eight

159
00:08:07.473 --> 00:08:12.625
bits I'm doing it as 16 bits endianness,
we won't talk about endianness.

160
00:08:12.625 --> 00:08:19.221
&gt;&gt; So when you set up that array,
as that when you told us is this an array?

161
00:08:19.221 --> 00:08:21.541
The reason it's not defined, because.

162
00:08:21.541 --> 00:08:24.101
&gt;&gt; It's not that it's not defined,
we will go over it.

163
00:08:24.101 --> 00:08:28.001
But there's operations that you can
perform on an array that you cannot

164
00:08:28.001 --> 00:08:31.447
perform with the JavaScript
capabilities and we'll see why.

165
00:08:31.447 --> 00:08:35.960
Well, mean, technically you can, but
we'll go over that but effectively asking.

166
00:08:35.960 --> 00:08:40.026
Is it because we didn't set anything
on here when creating the array?

167
00:08:40.026 --> 00:08:42.666
No, that's not it,
it's fundamentally not an array.

168
00:08:42.666 --> 00:08:46.380
In some sense it fundamentally down
at the most basic unit is an array.

169
00:08:46.380 --> 00:08:48.531
But at the same time, it's not an array.

170
00:08:48.531 --> 00:08:50.791
And we can talk about why.

171
00:08:50.791 --> 00:08:52.881
All right, so let's talk about
some operations you can do.

172
00:08:52.881 --> 00:08:57.055
I've already pretty much covered
everything about getting data at

173
00:08:57.055 --> 00:08:58.744
a specific index, right.

174
00:08:58.744 --> 00:09:02.137
It takes the width of the type multiplies
it by the offset puts it at the memory

175
00:09:02.137 --> 00:09:03.580
addressing go in and grab that.

176
00:09:03.580 --> 00:09:06.509
Now that may not be exactly
how things happen, but

177
00:09:06.509 --> 00:09:10.922
that's the simplest way to understand
it when it comes to how arrays work.

178
00:09:10.922 --> 00:09:15.039
So how does insertion at a specific
index work with an array.

179
00:09:15.039 --> 00:09:19.240
Well, the thing is, is that with
arrays there are no like magicalness.

180
00:09:19.240 --> 00:09:23.941
So when you insert something,
it doesn't necessarily insert it,

181
00:09:23.941 --> 00:09:25.840
it overwrites it, right.

182
00:09:25.840 --> 00:09:27.520
So it's just gonna set that value.

183
00:09:27.520 --> 00:09:30.290
You do not get to grow your
array into more memory.

184
00:09:30.290 --> 00:09:35.010
Because what happened if right after
that you have the user's name, right?

185
00:09:35.010 --> 00:09:37.970
So if you grow this what's
gonna happen to poor Fred?

186
00:09:37.970 --> 00:09:41.511
Well, is that's F's in the chat for
Fred, right?

187
00:09:41.511 --> 00:09:42.591
It is completely gone.

188
00:09:42.591 --> 00:09:48.291
And so
we cannot grow an array just simply.

189
00:09:48.291 --> 00:09:52.821
That is why these data structures exist
is because it makes life easier for you.

190
00:09:52.821 --> 00:09:56.829
Because it would be really annoying if you
constantly had to reallocate everything

191
00:09:56.829 --> 00:09:58.440
every time you wanted to grow it.

192
00:09:58.440 --> 00:10:02.594
That's why you'll notice things like
capacity in a lot of other languages that

193
00:10:02.594 --> 00:10:03.780
aren't JavaScript.

194
00:10:03.780 --> 00:10:07.746
You'll see these kinda things because what
they're doing is they're trying to make

195
00:10:07.746 --> 00:10:11.326
an optimized way for you to be able to
use the memory without reallocations and

196
00:10:11.326 --> 00:10:11.839
all that.

197
00:10:11.839 --> 00:10:14.186
Let's see, and so
that's just an insertion, right.

198
00:10:14.186 --> 00:10:15.574
It just overwrites it and

199
00:10:15.574 --> 00:10:19.552
of course insertion again is you just
go to A memory address if you will.

200
00:10:19.552 --> 00:10:23.755
You add in the width of the type
which is usually specified in bytes.

201
00:10:23.755 --> 00:10:28.295
So it'd be like 32 bit integer would
actually be four credit wouldn't be

202
00:10:28.295 --> 00:10:30.541
32 bits multiplied by the offset.

203
00:10:30.541 --> 00:10:33.753
And then we can write it in and
deletion exact same thing.

204
00:10:33.753 --> 00:10:35.091
But deletion is kinda confusing.

205
00:10:35.091 --> 00:10:38.221
You don't delete something
out of contiguous memory.

206
00:10:38.221 --> 00:10:42.331
I could set it to zero, right?

207
00:10:42.331 --> 00:10:44.581
That would be kinda deleting right there.

208
00:10:44.581 --> 00:10:46.691
It's how your program interprets it.

209
00:10:46.691 --> 00:10:49.383
And so
if you're actually using raw arrays.

210
00:10:49.383 --> 00:10:51.573
And you're actually doing something C and
C.

211
00:10:51.573 --> 00:10:55.423
You have to be able to tell yourself when
you've deleted this piece of memory.

212
00:10:55.423 --> 00:10:59.691
You can't just simply be like,
it's not anything anymore.

213
00:10:59.691 --> 00:11:03.717
That's where null comes around, null,
of course, being the zeroth value,

214
00:11:03.717 --> 00:11:05.682
just like hey, it's not something.

215
00:11:05.682 --> 00:11:07.274
It's just a way a named way for

216
00:11:07.274 --> 00:11:11.302
us to understand that there's not
something in this very something spot.

217
00:11:11.302 --> 00:11:14.399
And so deletion works the exact same way,
get to the offset,

218
00:11:14.399 --> 00:11:17.392
set it to some sorta sentinel
value zero usually being it.

219
00:11:17.392 --> 00:11:21.732
And there you go, you now have yourself
deletion getting an inserting.

220
00:11:21.732 --> 00:11:24.562
Now I did talk about this big O business.

221
00:11:24.562 --> 00:11:25.503
So let's talk about it.

222
00:11:25.503 --> 00:11:29.535
What is the big O, of being able
to get a value out of an array?

223
00:11:29.535 --> 00:11:31.693
Now remember, this is our equation we run.

224
00:11:31.693 --> 00:11:34.043
So if our array is size three.

225
00:11:36.763 --> 00:11:41.363
Does getting at a specific index
grow with respect to input?

226
00:11:41.363 --> 00:11:45.015
If I give 7 as my index,
if I give 100 as my index,

227
00:11:45.015 --> 00:11:47.515
does any of this change right here?

228
00:11:50.164 --> 00:11:54.742
&gt;&gt; I'm seeing O of 1,
O of 2 of n, constant time.

229
00:11:54.742 --> 00:11:57.960
&gt;&gt; I love the fact that I
just heard O of 2 of n.

230
00:11:57.960 --> 00:12:02.568
Thank you for the call back to the
previous joke really appreciate that again

231
00:12:02.568 --> 00:12:04.011
pad may to event right.

232
00:12:04.011 --> 00:12:06.485
No, what it is of course
it's constant time.

233
00:12:06.485 --> 00:12:10.241
Because you'll notice that nothing in
here goes over the entire array right.

234
00:12:10.241 --> 00:12:14.632
We don't have to walk to that position
we know the width of our type, we know

235
00:12:14.632 --> 00:12:19.462
the offset, multiply them together,
get to that position, read out the value.

236
00:12:19.462 --> 00:12:21.454
That would be again same
thing with insertions,

237
00:12:21.454 --> 00:12:24.772
same thing with deletion which deletions
really we just did insertion, right?

238
00:12:24.772 --> 00:12:29.128
They're all O of 1 because they're all
an instant operation in the sense that

239
00:12:29.128 --> 00:12:32.502
no matter how big the index is,
we don't do anything extra.

240
00:12:32.502 --> 00:12:33.834
So that is a constant time.

241
00:12:33.834 --> 00:12:36.212
I really wanted to highlight
what constant time looks like.

242
00:12:36.212 --> 00:12:39.372
Because constant time can be a bit
confusing the first time you see it.

243
00:12:39.372 --> 00:12:42.350
It doesn't mean we literally
only do one thing.

244
00:12:42.350 --> 00:12:47.122
It just means we do a constant
amount of things no matter

245
00:12:47.122 --> 00:12:51.596
what the input is it does
not grow with input at all.

246
00:12:51.596 --> 00:12:52.736
All right, there we go.

247
00:12:52.736 --> 00:12:56.926
Here we go just kinda just a bit
of a summary right fixed size

248
00:12:56.926 --> 00:12:58.988
contiguous memory chunks.

249
00:12:58.988 --> 00:13:04.978
You cannot grow it, there is no
insert at there's no push or pop.

250
00:13:04.978 --> 00:13:06.717
It doesn't mean you can't
write all those things.

251
00:13:06.717 --> 00:13:11.965
And the data structures we're gonna create
will actually use arrays underneath

252
00:13:11.965 --> 00:13:17.069
the hood often as ways to grow and all
that they'll have to implement growing.

253
00:13:17.069 --> 00:13:21.492
You'll have to implement pushing you'll
have to implement popping inside of our

254
00:13:21.492 --> 00:13:23.810
algorithms, but for now that is an array.

