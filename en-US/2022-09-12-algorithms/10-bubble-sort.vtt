WEBVTT

1
00:00:00.230 --> 00:00:03.320
So of course, you have to do sorting.

2
00:00:03.320 --> 00:00:08.920
So normally, when you look at algorithms
books, it often starts at sorting.

3
00:00:08.920 --> 00:00:12.358
I think search is just a simpler concept
to understand because it's very,

4
00:00:12.358 --> 00:00:15.940
very practical whereas sorting
often gets into this weird world.

5
00:00:15.940 --> 00:00:19.450
And so I wanted to start at search.

6
00:00:19.450 --> 00:00:20.610
But now we're gonna do sorting.

7
00:00:20.610 --> 00:00:23.837
We are gonna implement two
sorting algorithms, but

8
00:00:23.837 --> 00:00:25.971
one of them has to come a bit later.

9
00:00:25.971 --> 00:00:29.151
And so the first sorting algorithm
I want to do is bubble sort.

10
00:00:29.151 --> 00:00:32.946
Now normally it starts off with insertion
sort, but the problem with insertion sort

11
00:00:32.946 --> 00:00:35.360
is the example always sucks,
it's like a card deck.

12
00:00:35.360 --> 00:00:37.362
I still don't know how to sort cards.

13
00:00:37.362 --> 00:00:41.529
It's like it's always a much harder sort
to start with which I'm surprised that we

14
00:00:41.529 --> 00:00:42.690
start that way.

15
00:00:42.690 --> 00:00:45.132
Cuz bubble sort is not only really,
really,

16
00:00:45.132 --> 00:00:50.170
really easy to visualize exactly what's
happening, it's also three lines of code.

17
00:00:50.170 --> 00:00:52.878
It's an extremely simple algorithm.

18
00:00:52.878 --> 00:00:57.587
And my teacher once said, Ray Babcock, he
once said if an airplane was going down,

19
00:00:57.587 --> 00:01:00.957
stewardess [SOUND] kicks
the curtain between first class and

20
00:01:00.957 --> 00:01:05.132
economy because I'd be traveling and
economy, and she said, quickly,

21
00:01:05.132 --> 00:01:09.477
we need someone that can write a sorting
algorithm or this plane will crash.

22
00:01:09.477 --> 00:01:13.514
You could write Bubblesort under
a plane crashing, it is that simple.

23
00:01:13.514 --> 00:01:18.115
And so we could go over it cuz I just feel
like it is the greatest of all sorting

24
00:01:18.115 --> 00:01:19.000
algorithms.

25
00:01:19.000 --> 00:01:21.379
And so
hopefully our plane does not crash, but

26
00:01:21.379 --> 00:01:23.576
let's get this sorting algorithm going.

27
00:01:23.576 --> 00:01:25.293
So let's talk about bubble sort.

28
00:01:25.293 --> 00:01:27.541
So the general definition or

29
00:01:27.541 --> 00:01:33.660
the quote unquote mathy definition
of a sorted array is simply this.

30
00:01:33.660 --> 00:01:37.529
Any x sub i,
meaning any ith position within the array,

31
00:01:37.529 --> 00:01:41.245
is going to be less than or
equal to any i + 1, right?

32
00:01:41.245 --> 00:01:42.282
Does that make sense?

33
00:01:42.282 --> 00:01:43.701
This is true for the entire array.

34
00:01:43.701 --> 00:01:45.865
That's how you know an array is sorted.

35
00:01:45.865 --> 00:01:48.500
So that's kinda like
the mathy way of saying it.

36
00:01:48.500 --> 00:01:50.881
And so
if we have an array that's not sorted,

37
00:01:50.881 --> 00:01:53.400
this property does not
hold true universally.

38
00:01:53.400 --> 00:01:57.460
It may hold true in specific instances but
not universally or universally.

39
00:01:57.460 --> 00:01:59.400
So let's start off with this array.

40
00:01:59.400 --> 00:02:03.054
1, 3, I'm gonna make this up as we go,
4, 2.

41
00:02:03.054 --> 00:02:06.742
And I always wanted to memorize all these
great examples so when I did it I could

42
00:02:06.742 --> 00:02:10.601
produce the best outcome, but I can never
remember the example I'm gonna do, so

43
00:02:10.601 --> 00:02:12.955
we're just gonna make it up on the spot.

44
00:02:12.955 --> 00:02:18.325
So how bubble sort works is that
it starts in the zeroth position.

45
00:02:18.325 --> 00:02:20.515
And it's gonna go to the end of the array.

46
00:02:20.515 --> 00:02:24.505
And what it's gonna do is it's gonna say,
hey, person next to me,

47
00:02:24.505 --> 00:02:29.405
the plus one next to me,
if I'm larger than you, we swap positions.

48
00:02:29.405 --> 00:02:30.855
That's the entirety of the algorithm.

49
00:02:30.855 --> 00:02:32.495
Boom, we've just done it,
we're pretty good.

50
00:02:32.495 --> 00:02:33.168
So what happens?

51
00:02:33.168 --> 00:02:35.415
Let's actually go through and
see what happens.

52
00:02:35.415 --> 00:02:36.643
So 1 goes to 3.

53
00:02:36.643 --> 00:02:38.560
Am I larger than you?

54
00:02:38.560 --> 00:02:39.500
I'm not.

55
00:02:39.500 --> 00:02:41.890
All right, so then we go here.

56
00:02:41.890 --> 00:02:43.880
Hey 3, am I larger than 7?

57
00:02:43.880 --> 00:02:45.053
I'm not.

58
00:02:45.053 --> 00:02:48.180
Hey 7, are you larger than 4?

59
00:02:48.180 --> 00:02:49.100
You are?

60
00:02:49.100 --> 00:02:50.800
Well, fantastic.

61
00:02:50.800 --> 00:02:51.826
I'm gonna put 4 here.

62
00:02:51.826 --> 00:02:52.790
We're gonna put 7 here.

63
00:02:53.910 --> 00:02:55.976
Hey 7, are you larger than 2?

64
00:02:55.976 --> 00:02:56.671
You are?

65
00:02:56.671 --> 00:02:57.539
Fantastic.

66
00:02:59.400 --> 00:03:02.978
So what happened to our
array by the end of this?

67
00:03:02.978 --> 00:03:06.723
By a singular iteration,
what happens in bubble sort?

68
00:03:11.564 --> 00:03:15.534
The largest item is where in the array?

69
00:03:15.534 --> 00:03:17.050
It's at the end.

70
00:03:17.050 --> 00:03:22.920
So a singular iteration will always
produce the largest item in the last spot.

71
00:03:24.260 --> 00:03:25.750
So this is actually kind of unique, right?

72
00:03:25.750 --> 00:03:29.941
So that means the next time we do the
bubble sort, the bubble sort, whatever,

73
00:03:29.941 --> 00:03:31.600
the Facebook as well.

74
00:03:31.600 --> 00:03:36.260
The next time we do bubble sort, it means
we only have to go up to but not include

75
00:03:36.260 --> 00:03:41.790
the last position, because that is already
sorted, we don't need to look there.

76
00:03:41.790 --> 00:03:45.504
So if I rewrite my array, 1, 3, 4, 2, 7,

77
00:03:45.504 --> 00:03:51.159
now let's do bubble sort again except for
we only need to do it right here.

78
00:03:51.159 --> 00:03:54.092
So again, 1 says to 3,
am I larger than you?

79
00:03:54.092 --> 00:03:55.458
No, 3 says to 4, am a larger than you?

80
00:03:55.458 --> 00:03:58.420
No, 4 says to 2, am I larger than you?

81
00:03:58.420 --> 00:04:02.140
Yes, I am, let's swap, awesome.

82
00:04:02.140 --> 00:04:06.550
And so, oopsies, I just [INAUDIBLE].

83
00:04:08.202 --> 00:04:10.030
Again, we're done.

84
00:04:10.030 --> 00:04:14.199
The next largest value is in position,
and we have a portion of the array that's

85
00:04:14.199 --> 00:04:17.870
sorted and
a portion of the array that is not sorted.

86
00:04:17.870 --> 00:04:19.095
So let's rewrite it again.

87
00:04:19.095 --> 00:04:24.215
3, 2, 4, 7, and
of course now we're just down to this.

88
00:04:24.215 --> 00:04:27.553
So we re-walk this next
progressively smaller iteration.

89
00:04:27.553 --> 00:04:31.458
Do it again, it's going to end
with a 3 right here, 2, 1.

90
00:04:31.458 --> 00:04:34.420
I actually had my entire array
sorted at this point, but

91
00:04:34.420 --> 00:04:37.584
we would keep running until we
have only one position left.

92
00:04:37.584 --> 00:04:40.664
Cuz when you have one position
left is your array sorted?

93
00:04:40.664 --> 00:04:41.597
It's always sorted.

94
00:04:41.597 --> 00:04:43.930
An array of one element is always sorted.

95
00:04:43.930 --> 00:04:46.410
So there we go.

96
00:04:46.410 --> 00:04:48.778
We did this.
Now let's kind of abstract this cuz we

97
00:04:48.778 --> 00:04:51.718
also need to figure out the running
time of this algorithm.

98
00:04:51.718 --> 00:04:54.330
Cuz this is kind of a unique algorithm,
right?

99
00:04:54.330 --> 00:04:59.520
The first time we do it,
we do effectively n checks, right?

100
00:04:59.520 --> 00:05:01.664
We have to go over
the entirety of the array.

101
00:05:01.664 --> 00:05:06.327
The second time we do it, well we
don't have to do all of them, right,

102
00:05:06.327 --> 00:05:09.150
we can do n-1 checks effectively.

103
00:05:09.150 --> 00:05:12.085
Well, then the next time we
don't have to do it again.

104
00:05:12.085 --> 00:05:15.861
And then of course we keep on doing
this until effectively we reach this

105
00:05:15.861 --> 00:05:16.760
point, right?

106
00:05:16.760 --> 00:05:18.660
Does that make sense?

107
00:05:18.660 --> 00:05:21.620
We are now down to the very last element.

108
00:05:21.620 --> 00:05:24.800
Now, some people they recognize
this right away, right?

109
00:05:24.800 --> 00:05:29.750
This is a very familiar pattern that
you should probably be familiar with.

110
00:05:29.750 --> 00:05:33.073
For those that don't know about this,
there's a fun little story and

111
00:05:33.073 --> 00:05:34.490
I'm gonna say it now.

112
00:05:34.490 --> 00:05:39.110
Sorry that it does contain a curse word,
Mark, hopefully you'll forgive me.

113
00:05:39.110 --> 00:05:43.240
But effectively, there's this
asshole in third grade named Gauss.

114
00:05:43.240 --> 00:05:46.380
And he was known as being a complete jerk.

115
00:05:46.380 --> 00:05:50.519
And his teacher, very frustrated
with all of the kids, one day said,

116
00:05:50.519 --> 00:05:53.390
kids that's it, everyone's sit down.

117
00:05:53.390 --> 00:05:55.189
I want you to add numbers from 1 to 100.

118
00:05:55.189 --> 00:05:59.330
Gauss, still in asshole,
did it in about ten seconds.

119
00:05:59.330 --> 00:06:01.468
He was completely done right away,
went up and showed his teacher.

120
00:06:01.468 --> 00:06:03.890
His teacher said no way, this is not true.

121
00:06:03.890 --> 00:06:06.110
And of course, it was true.

122
00:06:06.110 --> 00:06:07.349
And this is what he showed her.

123
00:06:07.349 --> 00:06:11.018
It's that if you think about it,
this is 101.

124
00:06:11.018 --> 00:06:12.810
You just add those two numbers.

125
00:06:12.810 --> 00:06:14.100
Well, what do you have left?

126
00:06:14.100 --> 00:06:15.940
Well, you have 2 to 99.

127
00:06:15.940 --> 00:06:19.580
All right, well,
let's add those two numbers.

128
00:06:19.580 --> 00:06:21.099
What do you have?

129
00:06:21.099 --> 00:06:22.248
101.

130
00:06:22.248 --> 00:06:24.900
You can kind of tell where this is going.

131
00:06:24.900 --> 00:06:28.600
It's gonna keep going until
you have 50 and 51, right?

132
00:06:30.570 --> 00:06:33.665
Awesome, so really, if you think about it,

133
00:06:33.665 --> 00:06:37.745
you could just do 101 times 50 and
you have the answer.

134
00:06:37.745 --> 00:06:40.904
But of course, we're computer scientists,

135
00:06:40.904 --> 00:06:43.902
we abstract this formula,
so what do we do?

136
00:06:43.902 --> 00:06:49.274
Well 101, and this was 100,
I mean to me that's n plus 1, right?

137
00:06:49.274 --> 00:06:52.032
50, well you know what that looks like?

138
00:06:52.032 --> 00:06:54.805
That looks like n divided by 2.

139
00:06:54.805 --> 00:06:58.100
And if you run this and you do it,
it works every single time.

140
00:06:59.360 --> 00:06:59.896
N plus or

141
00:06:59.896 --> 00:07:05.380
n times n plus 1 all over 2 just will tell
you the sum of numbers between a range.

142
00:07:05.380 --> 00:07:09.377
And so the reason why I make that or I say
that story is my math teacher told me that

143
00:07:09.377 --> 00:07:13.090
story, then went on to tell all
the reasons why Gauss was such a jerk.

144
00:07:13.090 --> 00:07:14.660
But he was also extremely smart.

145
00:07:14.660 --> 00:07:17.420
I think his middle name was Friedrich,
Friedrich.

146
00:07:17.420 --> 00:07:18.891
Anyways, fun story.

147
00:07:18.891 --> 00:07:21.420
But this always stuck with
me because of that story.

148
00:07:21.420 --> 00:07:24.370
And I always remembered it, because
now I have it locked away in my head.

149
00:07:24.370 --> 00:07:28.756
And if you look at this, if we just
reverse that, you know what we'd have?

150
00:07:28.756 --> 00:07:33.980
1, 2, 3, all the way up to n, right?

151
00:07:33.980 --> 00:07:38.509
We now know the formula,
which means we have n plus 1,

152
00:07:38.509 --> 00:07:44.040
n over 2, let's break it all down,
do the whole mathy thing.

153
00:07:44.040 --> 00:07:46.340
Well, first thing we can do is we
can just drop constants, right?

154
00:07:46.340 --> 00:07:49.840
Because this is of course, big O,
we're not concerned about constants.

155
00:07:49.840 --> 00:07:53.900
So that means it's n squared plus n,
all right?

156
00:07:53.900 --> 00:07:59.669
Well, in big O land, a thing you will
do is drop non significant values,

157
00:07:59.669 --> 00:08:01.764
meaning this right here.

158
00:08:01.764 --> 00:08:03.749
I believe the term is actually
insignificant values.

159
00:08:05.610 --> 00:08:06.450
There we go.

160
00:08:06.450 --> 00:08:07.500
It's n squared.

161
00:08:07.500 --> 00:08:11.980
So that is the running time of
this algorithm is it's n squared.

162
00:08:11.980 --> 00:08:18.930
And the reason why you drop this is just
imagine the input even at 10,000, right?

163
00:08:18.930 --> 00:08:23.313
And 10,000 n squared is like, I don't
even know what that value would be,

164
00:08:23.313 --> 00:08:25.770
100 million I think off
the top of my head.

165
00:08:25.770 --> 00:08:29.255
But either way, it's so
insignificant at some point,

166
00:08:29.255 --> 00:08:31.510
it just eventually goes to zero.

167
00:08:31.510 --> 00:08:34.730
As n goes up,
insignificant polynomials go down.

168
00:08:34.730 --> 00:08:37.094
The same thing with n
cubed versus n squared.

