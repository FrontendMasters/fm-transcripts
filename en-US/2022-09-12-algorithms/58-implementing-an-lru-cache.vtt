WEBVTT

1
00:00:00.340 --> 00:00:02.349
Okay, so
we kinda have our written operations.

2
00:00:02.349 --> 00:00:07.740
So again, we need to start
defining some of these types.

3
00:00:07.740 --> 00:00:12.863
So the first thing we'll do is
just go type Node of value.

4
00:00:12.863 --> 00:00:15.442
Usually I use t as my over generic T.

5
00:00:15.442 --> 00:00:17.949
So I'm gonna have a value,
which is gonna be T,

6
00:00:17.949 --> 00:00:21.107
we're gonna have a next which
is gonna possibly be A node T.

7
00:00:21.107 --> 00:00:24.537
And we're gonna also have
a previous which will be A node T.

8
00:00:24.537 --> 00:00:26.936
Awesome, okay,
we've defined our node structure.

9
00:00:26.936 --> 00:00:30.067
This is a doubly linked list,
looks very familiar.

10
00:00:30.067 --> 00:00:31.990
this.length = 0 of course.

11
00:00:31.990 --> 00:00:36.718
Now we need to define our head and
our tail, right?

12
00:00:36.718 --> 00:00:43.116
So private head,
which really can be undefined, right?

13
00:00:43.116 --> 00:00:44.647
There is no guarantee
that it's gonna exist.

14
00:00:44.647 --> 00:00:47.115
Now what's our T in this case?

15
00:00:47.115 --> 00:00:49.238
Our T is the B, right?

16
00:00:49.238 --> 00:00:51.068
It's the value we want to store.

17
00:00:51.068 --> 00:00:53.811
Our linked list is the list of values,
correct?

18
00:00:53.811 --> 00:00:54.535
Awesome.

19
00:00:54.535 --> 00:00:56.815
We do the same thing with tail.

20
00:00:56.815 --> 00:01:00.434
Okay, so we're starting to get
through this whole idea here.

21
00:01:00.434 --> 00:01:06.822
So this.head equals this.tail = undefined,
I like to be super duper explicit here.

22
00:01:06.822 --> 00:01:10.040
Now, we need to define something else,
right?

23
00:01:10.040 --> 00:01:11.533
What are we missing?

24
00:01:11.533 --> 00:01:14.200
Well, we're missing our
traversal in the linked list.

25
00:01:14.200 --> 00:01:18.141
We're missing our instant
lookup in our linked list,

26
00:01:18.141 --> 00:01:21.746
which is going to be our key to node,
makes sense?

27
00:01:21.746 --> 00:01:24.615
Yes, so let's put that thing in there.

28
00:01:24.615 --> 00:01:29.905
So we're gonna have to
have a private lookup,

29
00:01:29.905 --> 00:01:35.883
which is going to be a map
of key two node of V, right?

30
00:01:35.883 --> 00:01:37.693
That's the big trick right here.

31
00:01:37.693 --> 00:01:42.410
We have to have the linked list as
the fundamental storage unit, right?

32
00:01:42.410 --> 00:01:45.505
All right, and for convenience,

33
00:01:45.505 --> 00:01:50.203
I'm gonna add a quick
function called Create Node,

34
00:01:50.203 --> 00:01:55.111
which is gonna take a value of V,
and return out value,

35
00:01:55.111 --> 00:01:58.977
and this thing will be
of course as a node B.

36
00:01:58.977 --> 00:02:01.123
Just make it super easy, cuz or

37
00:02:01.123 --> 00:02:06.172
else I have to do that whole as node
if I do it in line, blah, blah, blah.

38
00:02:06.172 --> 00:02:07.681
This just helps with the types.

39
00:02:07.681 --> 00:02:08.463
Fantastic.

40
00:02:08.463 --> 00:02:10.202
So we need to create that lookup.

41
00:02:10.202 --> 00:02:16.990
this.lookup equals new map,
as of course, a K and a NodeV.

42
00:02:16.990 --> 00:02:21.309
There we go, we now have that but
we're still missing one thing.

43
00:02:21.309 --> 00:02:22.793
What's the thing we're missing?

44
00:02:22.793 --> 00:02:23.505
&gt;&gt; Capacity?

45
00:02:23.505 --> 00:02:24.861
&gt;&gt; Capacity, awesome job.

46
00:02:24.861 --> 00:02:27.100
Yeah, we need a capacity.

47
00:02:27.100 --> 00:02:30.741
How many items do we wish to
have inside of our cache?

48
00:02:30.741 --> 00:02:34.074
So capacity, which is gonna be a number.

49
00:02:34.074 --> 00:02:36.368
We cannot exceed this capacity.

50
00:02:36.368 --> 00:02:38.775
This is the capacity of our LRU.

51
00:02:38.775 --> 00:02:41.337
Go forth and evict, right?

52
00:02:41.337 --> 00:02:44.878
So there we go.
We have everything we want right now.

53
00:02:44.878 --> 00:02:47.899
For fun, I'll put a little = 10
here just in case my unit test just

54
00:02:47.899 --> 00:02:48.860
assumed it was 10.

55
00:02:48.860 --> 00:02:50.713
I don't remember what I wrote for
my unit test.

56
00:02:50.713 --> 00:02:53.156
So there we go,
I covered both conditions there.

57
00:02:53.156 --> 00:02:55.915
So now we have the length, how many items
we have in the cache, we have the head and

58
00:02:55.915 --> 00:02:56.737
tail being undefined.

59
00:02:56.737 --> 00:02:59.463
We have the lookup being the map we're
gonna use to look up from the key

60
00:02:59.463 --> 00:03:00.038
to the value.

61
00:03:00.038 --> 00:03:01.224
Are we missing anything else?

62
00:03:01.224 --> 00:03:02.891
I felt like I had a second map.

63
00:03:06.947 --> 00:03:08.881
I'm gonna probably go,
probably not, right?

64
00:03:08.881 --> 00:03:10.338
We probably don't have a map.

65
00:03:10.338 --> 00:03:10.863
We'll find out.

66
00:03:10.863 --> 00:03:12.707
Actually, we do have a second map.

67
00:03:12.707 --> 00:03:14.914
What's the second map?

68
00:03:14.914 --> 00:03:20.967
The second map, of course is gonna be,
what happens when we evict, right?

69
00:03:20.967 --> 00:03:25.093
How do we find out what key was stored for
our lookup?

70
00:03:27.031 --> 00:03:28.476
Right?
We have to be able to

71
00:03:28.476 --> 00:03:30.023
clean up all of our data.

72
00:03:30.023 --> 00:03:34.496
We're gonna know what node to remove,
but we won't know what key is

73
00:03:34.496 --> 00:03:38.428
associated with our node that
is used as part of our lookup.

74
00:03:38.428 --> 00:03:43.110
That means our lookup will just sit
there and infinitely leak memory, or

75
00:03:43.110 --> 00:03:48.420
even worse give us wrong results and
actually store those results indefinitely.

76
00:03:48.420 --> 00:03:50.504
So we need a reverse lookup, right?

77
00:03:50.504 --> 00:03:54.557
Classic blunder, again,
land war in Asia, just don't do it.

78
00:03:54.557 --> 00:03:59.408
So we need to be able to go from a node
back to the key, delete that out,

79
00:03:59.408 --> 00:04:02.603
then delete out the key
that is in the lookup.

80
00:04:02.603 --> 00:04:04.583
Does that make sense?

81
00:04:04.583 --> 00:04:07.995
Again, why would we ask this
question in an interview?

82
00:04:07.995 --> 00:04:09.014
I want you to riddle me that one.

83
00:04:09.014 --> 00:04:10.516
This is pretty complicated, right?

84
00:04:10.516 --> 00:04:11.083
All right.

85
00:04:11.083 --> 00:04:14.157
So there we go we have this go
reverse lookup equals new map, and

86
00:04:14.157 --> 00:04:17.811
of course I'm just gonna yank everything
in between there because I really

87
00:04:17.811 --> 00:04:19.266
don't wanna write it again.

88
00:04:19.266 --> 00:04:24.899
Paste that, and do that and K, awesome.

89
00:04:24.899 --> 00:04:28.321
So we have the lookup, we have
the reverse lookup, we have the head,

90
00:04:28.321 --> 00:04:31.448
we have the tail, we have the length,
and everything is set for

91
00:04:31.448 --> 00:04:33.281
us to be able to do these operations.

92
00:04:34.821 --> 00:04:35.864
Is everyone ready?

93
00:04:35.864 --> 00:04:36.528
All right.

94
00:04:36.528 --> 00:04:41.506
So I'm gonna start with get,
cuz get is really, really simple, right?

95
00:04:41.506 --> 00:04:44.385
So first, let's check for
existence, all right.

96
00:04:44.385 --> 00:04:49.411
const node = this.lookup(key), right?

97
00:04:49.411 --> 00:04:53.044
So if, my goodness!

98
00:04:53.044 --> 00:04:54.283
Yeah, yet I forget.

99
00:04:54.283 --> 00:04:56.532
You gotta use it like that, right?

100
00:04:56.532 --> 00:05:00.097
So if this thing doesn't,
what kind of indenting was that?

101
00:05:00.097 --> 00:05:04.668
If this thing does not exist
at this point, what happens?

102
00:05:04.668 --> 00:05:07.705
Well, we can't get this for you, right?

103
00:05:07.705 --> 00:05:09.413
Sorry, it doesn't exist.

104
00:05:09.413 --> 00:05:11.808
We can't do anything at this point.

105
00:05:11.808 --> 00:05:15.925
So return undefined, awesome.

106
00:05:15.925 --> 00:05:17.306
But what if we do find a value?

107
00:05:17.306 --> 00:05:18.437
Well, we've to follow these steps.

108
00:05:18.437 --> 00:05:21.758
We need to update the value
that we have found, and

109
00:05:21.758 --> 00:05:24.220
by moving it to the front, correct?

110
00:05:24.220 --> 00:05:27.844
All right, so that is the unfortunate
move we now have to do.

111
00:05:27.844 --> 00:05:31.669
We now have to do those sweet
linked list operations.

112
00:05:31.669 --> 00:05:35.119
So we can do some kind of checking to
make sure how this thing is going, so

113
00:05:35.119 --> 00:05:37.891
we're gonna have to kind of
give me a bit of playing here.

114
00:05:37.891 --> 00:05:43.603
So, I'm gonna have let's have
a detach function, right?

115
00:05:43.603 --> 00:05:46.036
Call this thing private detach, right?

116
00:05:46.036 --> 00:05:49.502
And we'll pass in a node
that is of a value, right?

117
00:05:49.502 --> 00:05:53.868
We're just gonna simply detach
this node from our linked list.

118
00:05:53.868 --> 00:05:58.719
And then we could also have
a private prepend, right?

119
00:05:58.719 --> 00:06:01.279
And this will take in a node and
then do that.

120
00:06:01.279 --> 00:06:04.494
It's kinda for me, it's a lot easier
to break up these operations,

121
00:06:04.494 --> 00:06:07.946
as opposed to trying to be like okay,
we're gonna do this, this, this.

122
00:06:07.946 --> 00:06:11.828
Cuz then you just get a huge wall of nexts
and previous, and all that kind of stuff.

123
00:06:11.828 --> 00:06:15.355
For me it's a little bit harder
to accomplish this, first try.

124
00:06:15.355 --> 00:06:19.932
So that means what we're gonna have to do
is we're going to have to detach the node.

125
00:06:19.932 --> 00:06:21.914
To detach the node.

126
00:06:21.914 --> 00:06:25.897
All right, it's now no longer on our
linked list, but it's still in our lookup,

127
00:06:25.897 --> 00:06:28.402
it's still in our reverse lookup,
which is good.

128
00:06:28.402 --> 00:06:32.968
Then we have to this.prepend,
add it to the front.

129
00:06:32.968 --> 00:06:35.313
Everything's good, everything's great.

130
00:06:35.313 --> 00:06:37.327
I feel like that's gonna
be pretty easy to program.

131
00:06:37.327 --> 00:06:40.164
I'm sure there's some shortcuts we
could take that would reduce the amount

132
00:06:40.164 --> 00:06:42.442
of lines of code by having those
two functions put together.

133
00:06:42.442 --> 00:06:46.904
Cuz we're gonna have this whole tail and
head check that goes on for some of these,

134
00:06:46.904 --> 00:06:48.531
but right now we don't care.

135
00:06:48.531 --> 00:06:52.274
All right, lastly, we need to return out
the value or undefined if it not exist.

136
00:06:52.274 --> 00:06:54.067
We already did that eight line ups.

137
00:06:54.067 --> 00:06:57.694
So therefore we're gonna
just return out node.value.

138
00:06:57.694 --> 00:06:58.561
Right here.

139
00:06:58.561 --> 00:07:00.150
There we go, we just did get.

140
00:07:00.150 --> 00:07:04.584
Get was actually not all that hard, right?

141
00:07:04.584 --> 00:07:06.178
Well, I don't think it was all that hard.

142
00:07:06.178 --> 00:07:08.740
All right, so now let's do update.

143
00:07:08.740 --> 00:07:12.160
So first we need to check
does this thing even exist?

144
00:07:12.160 --> 00:07:16.770
So we'll do the same thing we did
right here, and just go bam, right?

145
00:07:16.770 --> 00:07:18.088
Does this thing even exist?

146
00:07:18.088 --> 00:07:19.669
We're gonna go look for it.

147
00:07:19.669 --> 00:07:21.888
Now what if it doesn't exist?

148
00:07:21.888 --> 00:07:22.501
What do we do?

149
00:07:24.547 --> 00:07:26.490
Well, it's simple, right?

150
00:07:26.490 --> 00:07:32.395
Now we need to come in here and we need
to be able to create a new node, right?

151
00:07:32.395 --> 00:07:38.860
So node = createNode, and we need
to create it with the value, right?

152
00:07:38.860 --> 00:07:42.383
There we go, we've now created
the node that didn't exist.

153
00:07:42.383 --> 00:07:47.897
But if it does exist, we have this
whole thing we have to do, right?

154
00:07:47.897 --> 00:07:50.024
Or we have to do this side, right?

155
00:07:50.024 --> 00:07:51.566
We have to do these two sides.

156
00:07:51.566 --> 00:07:54.545
So if it does exist, let's do that
one cuz that's honestly easier.

157
00:07:54.545 --> 00:07:58.640
If it does exist, we just simply need to
move this to the front of the list, right?

158
00:07:58.640 --> 00:08:03.408
So again, this.detach(node),
this.prepend(node),

159
00:08:03.408 --> 00:08:09.247
we've just moved it to the front,
everything's great, the end, correct?

160
00:08:09.247 --> 00:08:11.463
It's this one that's the trickier one.

161
00:08:11.463 --> 00:08:15.525
Now we need to adjust
the length of how many we have,

162
00:08:15.525 --> 00:08:20.356
we need to prepend it,
then we may need to delete from cache.

163
00:08:20.356 --> 00:08:24.952
So let's go like this, this.length ++,
add one to our length.

164
00:08:24.952 --> 00:08:28.622
this.prepend, our node we've
added it to the front.

165
00:08:28.622 --> 00:08:30.828
And then of course, this.trim cache.

166
00:08:30.828 --> 00:08:32.418
I'll just call it trim cache, right?

167
00:08:32.418 --> 00:08:36.751
It's a function in which will ensure
that our cache remains no greater than

168
00:08:36.751 --> 00:08:37.655
our capacity.

169
00:08:37.655 --> 00:08:39.278
Sounds good?

170
00:08:39.278 --> 00:08:40.104
Yeah, sounds great.

171
00:08:40.104 --> 00:08:40.934
Awesome, all right.

172
00:08:40.934 --> 00:08:45.308
So let's do one more, private trimCache.

173
00:08:45.308 --> 00:08:46.237
We're gonna say, void.

174
00:08:46.237 --> 00:08:50.868
Look at all those proper,
proper function definitions right there.

175
00:08:50.868 --> 00:08:53.572
These two don't have voids on them,
very disappointed by myself.

176
00:08:53.572 --> 00:08:58.551
All right, so now we just simply need
to do each one of these operations.

177
00:08:58.551 --> 00:09:01.176
So we can start first with detach.

178
00:09:01.176 --> 00:09:05.487
Which is gonna simply need to kind of
remove out the links, place it right here.

179
00:09:05.487 --> 00:09:09.293
So the first thing we need to do is I
could do something as simple as this.

180
00:09:09.293 --> 00:09:16.377
If node.prev,
then nodes.prev.next = node.next, right?

181
00:09:16.377 --> 00:09:20.737
We've went backwards and say hey,
backwards forward must be our forwards, or

182
00:09:20.737 --> 00:09:22.373
must be our forward, right?

183
00:09:22.373 --> 00:09:26.602
Did the whole thing, which of course
is this operation right here.

184
00:09:26.602 --> 00:09:30.802
We went back to this thing and
pointed its next,

185
00:09:30.802 --> 00:09:34.794
not to us but
to the one ahead of us, awesome.

186
00:09:34.794 --> 00:09:36.759
Do it again the other direction.

187
00:09:36.759 --> 00:09:45.083
So if our next exists, then our
next.prev must be our current node.prev.

188
00:09:45.083 --> 00:09:50.107
So again, we go to our previous,
we already did that direction.

189
00:09:50.107 --> 00:09:54.562
We go to our next previous which
is pointing here, and say no,

190
00:09:54.562 --> 00:09:56.457
point over here, right?

191
00:09:56.457 --> 00:09:59.797
Our next previous needs to
point to our previous, yeah.

192
00:09:59.797 --> 00:10:02.861
I wish there was more words I could say,
it feels like it cuts off too soon.

193
00:10:02.861 --> 00:10:04.352
All right, so there we go.

194
00:10:04.352 --> 00:10:06.675
So we have our previous
in our next conditioning.

195
00:10:06.675 --> 00:10:11.410
So we've now removed ourselves
effectively from the graph.

196
00:10:11.410 --> 00:10:15.409
Now all we have to do is break our links
pointing to the ones that are still within

197
00:10:15.409 --> 00:10:16.387
that linked list.

198
00:10:16.387 --> 00:10:19.913
I call it a graph, or linkless graph.

199
00:10:19.913 --> 00:10:21.180
Yeah, they're totally graphs.

200
00:10:21.180 --> 00:10:22.936
They're just all in a big line, right?

201
00:10:22.936 --> 00:10:25.043
That's just the whole big line,
of course I'm right.

202
00:10:25.043 --> 00:10:31.637
All right, so node.next = undefined,
node.prev = undefined, right?

203
00:10:31.637 --> 00:10:33.212
Did I do this correctly?

204
00:10:33.212 --> 00:10:37.595
Yes, I really do think I did this
correctly, but there is, of course,

205
00:10:37.595 --> 00:10:41.627
the tail and the head checking
that we need to figure out, right?

206
00:10:41.627 --> 00:10:44.975
So there's a couple different ways
in which we can approach this.

207
00:10:44.975 --> 00:10:51.088
One way we could approach this is we
could always have this.length = 0, right?

208
00:10:51.088 --> 00:10:56.422
Or if this.length = 1, well,
that means our length is now 0 for

209
00:10:56.422 --> 00:11:03.114
a moment, which means that our head and
our tail should become undefined, right?

210
00:11:03.114 --> 00:11:07.485
Detached does not alter length,
it just simply detaches it from the graph.

211
00:11:07.485 --> 00:11:12.687
So in a real sense,
this.tail needs to become this.head,

212
00:11:12.687 --> 00:11:16.363
which needs to become undefined, right?

213
00:11:16.363 --> 00:11:18.245
That makes sense.

214
00:11:18.245 --> 00:11:23.000
The problem is, of course,
is if this.head === node,

215
00:11:23.000 --> 00:11:26.722
the thing we are removing
is our current head.

216
00:11:26.722 --> 00:11:32.661
If that's the case,
this.head = this.head.next, right?

217
00:11:32.661 --> 00:11:36.680
We need to shift our head over one
before we break all the links.

218
00:11:36.680 --> 00:11:40.909
Cuz if we break all the links,
we just cut off our own head.

219
00:11:40.909 --> 00:11:44.287
Nobody wants to be discombobulated
like that, that'd be just terrible!

220
00:11:44.287 --> 00:11:45.202
Again, this.tail,

221
00:11:45.202 --> 00:11:48.053
again this worst circular linked
list could come in handy right here.

222
00:11:48.053 --> 00:11:56.568
This if our tail is the node then
this.tail = this.tail.prev, awesome.

223
00:11:56.568 --> 00:11:57.800
Does that sound good?

224
00:11:57.800 --> 00:11:59.192
Yes, awesome.

225
00:11:59.192 --> 00:12:04.519
So another thing we do is,
if you think about this right here,

226
00:12:04.519 --> 00:12:09.242
if this is true,
if our length is 1, quick question.

227
00:12:09.242 --> 00:12:11.390
Is head next gonna be undefined?

228
00:12:13.643 --> 00:12:15.872
Yes, it is.

229
00:12:15.872 --> 00:12:18.261
Is tail.prev gonna be undefined?

230
00:12:18.261 --> 00:12:20.039
Yes, it really is.

231
00:12:20.039 --> 00:12:22.855
Which means we don't even need that check,
right?

232
00:12:22.855 --> 00:12:26.444
We're simply gonna just remove the links,
by accident, everything is great,

233
00:12:26.444 --> 00:12:27.727
there we go, we just did it.

234
00:12:27.727 --> 00:12:32.882
So, now we have detach effectively
written, pretty happy about that.

235
00:12:32.882 --> 00:12:34.550
I'm feeling pretty good about this.

236
00:12:34.550 --> 00:12:38.723
And so, we need to do the next one,
which is prepend.

237
00:12:38.723 --> 00:12:41.352
We add it to the front of the list.

238
00:12:41.352 --> 00:12:43.098
So let's do some simple checks.

239
00:12:43.098 --> 00:12:47.100
If this.head, if there is no head,

240
00:12:47.100 --> 00:12:52.402
then this.head = this.tail = node, right?

241
00:12:52.402 --> 00:12:56.690
If there's no head, there's no tail,
now we have a head and we have a tail,

242
00:12:56.690 --> 00:12:57.361
all right.

243
00:12:57.361 --> 00:13:01.477
So if that's not the case, then we need to
do something slightly different, right?

244
00:13:01.477 --> 00:13:03.851
So I'm gonna just do a little
quick return right here.

245
00:13:03.851 --> 00:13:07.987
And we this simply take the head,
we need to point to it,

246
00:13:07.987 --> 00:13:12.123
then have our head points to
the node we're adding, and

247
00:13:12.123 --> 00:13:15.565
then move the head to where we're at,
right?

248
00:13:15.565 --> 00:13:22.997
So Step one, let's point to the head,
node.next = this.head.

249
00:13:22.997 --> 00:13:24.805
Awesome, right?

250
00:13:24.805 --> 00:13:27.895
Next, our head needs to point to node,
right?

251
00:13:27.895 --> 00:13:33.654
Or our head.prev needs to point to node,
so there we go.

252
00:13:33.654 --> 00:13:36.407
So if you saw A at
the front of the list and

253
00:13:36.407 --> 00:13:39.927
we're now adding Z,
Z points to A, A points to Z.

254
00:13:39.927 --> 00:13:43.254
Now we just simply need to
have our head point to Z.

255
00:13:43.254 --> 00:13:46.689
So this.head equals node.

256
00:13:46.689 --> 00:13:48.048
There we go, all right?

257
00:13:48.048 --> 00:13:50.339
So I believe we have prepend correctly.

258
00:13:50.339 --> 00:13:53.237
Now the last one is
gonna be the tricky one.

259
00:13:53.237 --> 00:13:54.888
We're going to make some assumptions here.

260
00:13:54.888 --> 00:13:59.398
If this.length is greater
than this.capacity, well,

261
00:13:59.398 --> 00:14:01.613
we need to do some removals.

262
00:14:01.613 --> 00:14:03.205
So let's just swap this thing around.

263
00:14:03.205 --> 00:14:07.480
If length is less than or
equal to our capacity, we can return else.

264
00:14:07.480 --> 00:14:09.909
Let's remove the tail.

265
00:14:09.909 --> 00:14:13.833
So the first thing we need to do is
we need to remove the tail, right?

266
00:14:13.833 --> 00:14:16.251
So we can go like this.

267
00:14:16.251 --> 00:14:18.850
Const tail = this.tail.

268
00:14:18.850 --> 00:14:21.932
We hold on to a reference to our tail, and

269
00:14:21.932 --> 00:14:26.662
then this.detach,
remove our tail from the graph, right?

270
00:14:26.662 --> 00:14:29.940
There we go, we've now removed, oopsies.

271
00:14:33.520 --> 00:14:36.795
As, I mean we already know this is true,
right?

272
00:14:36.795 --> 00:14:37.668
We did the check right here.

273
00:14:37.668 --> 00:14:38.761
We already know this is true.

274
00:14:38.761 --> 00:14:40.246
Typescript's like, well,
I don't know what.

275
00:14:40.246 --> 00:14:41.776
We're like, but we do know.

276
00:14:41.776 --> 00:14:43.847
I'm sure there's a sweet TypeScript.

277
00:14:43.847 --> 00:14:47.608
I've seen what TypeScript does, and
I'm sure there's a way to make this true.

278
00:14:47.608 --> 00:14:49.921
All right, so there we go.

279
00:14:49.921 --> 00:14:55.601
We have that, we now have the tail
completely removed from our linked list,

280
00:14:55.601 --> 00:14:59.169
but we don't have it
removed from our lookups.

281
00:14:59.169 --> 00:15:06.830
So we can go const key =
this.reverseLookup.get(tail), right?

282
00:15:06.830 --> 00:15:13.518
So we're gonna get the,
my goodness, as node V, yeah.

283
00:15:13.518 --> 00:15:14.173
There we go.

284
00:15:17.087 --> 00:15:20.275
That should be totally not undefined,
dang it!

285
00:15:20.275 --> 00:15:21.999
I thought that was gonna work,
I thought it was genius,

286
00:15:21.999 --> 00:15:22.927
I thought that always works.

287
00:15:22.927 --> 00:15:23.983
I don't even know.

288
00:15:23.983 --> 00:15:25.058
Do I have to do this one?

289
00:15:25.058 --> 00:15:28.408
Sorry, this is just a TypeScript
moment of me just sucking.

290
00:15:28.408 --> 00:15:33.940
Man, I can just hear TypeScript has gone,
[SOUND] don't do it.

291
00:15:33.940 --> 00:15:34.820
All right, there we go.

292
00:15:34.820 --> 00:15:37.969
So we go and
do a reverse lookup of our tail,

293
00:15:37.969 --> 00:15:40.950
it does work, we get our key out of here.

294
00:15:40.950 --> 00:15:45.611
There should never be a moment in
which that key doesn't exist, or

295
00:15:45.611 --> 00:15:49.205
we have severely messed up our insertion,
right?

296
00:15:49.205 --> 00:15:51.891
When which we currently have,
but we'll get there.

297
00:15:51.891 --> 00:15:54.160
So we'll just do this as k, right?

298
00:15:54.160 --> 00:15:55.699
It is the key.

299
00:15:55.699 --> 00:16:02.723
Next, we'll take this and
go this.lookup.delete(key), awesome.

300
00:16:02.723 --> 00:16:07.223
This.reverse lookup.delete(tail).

301
00:16:07.223 --> 00:16:11.640
There we go, we have now deleted
everything out, we've detached our tail.

302
00:16:11.640 --> 00:16:14.015
We're fully ready to go, awesome.

303
00:16:14.015 --> 00:16:18.072
The only thing we have less to do is
that length needs to be reduced by one,

304
00:16:18.072 --> 00:16:20.409
cuz we have fully just trimmed the cache.

305
00:16:20.409 --> 00:16:22.649
Everything's good to go,
we've done it, awesome.

306
00:16:22.649 --> 00:16:26.150
Last thing we need to do,
which I just realized right now,

307
00:16:26.150 --> 00:16:28.730
is inside of our update method right here.

308
00:16:28.730 --> 00:16:29.926
Or what did we not do?

309
00:16:29.926 --> 00:16:34.949
We prepend, we trimmed the cache,
but we don't have

310
00:16:34.949 --> 00:16:39.870
ourselves a beautiful update our lookups,
right?

311
00:16:39.870 --> 00:16:44.805
So this.lookup.set of course is
gonna be the key we want to use,

312
00:16:44.805 --> 00:16:48.861
plus of course,
the node we're gonna be inserting.

313
00:16:48.861 --> 00:16:56.367
And our reverse lookup is going
to have to be this node, right?

314
00:16:56.367 --> 00:17:00.494
We're gonna do a reverse.lookup.set(node,
key), right?

315
00:17:00.494 --> 00:17:01.043
Awesome.

316
00:17:01.043 --> 00:17:03.839
And then I also realized this
one other part right here,

317
00:17:03.839 --> 00:17:06.588
is that we actually didn't
update the node's value.

318
00:17:06.588 --> 00:17:09.813
So node value needs to equal the new value
that's passed in, just in case the value

319
00:17:09.813 --> 00:17:12.362
has been changed, we don't know
if the value has been changed.

320
00:17:12.362 --> 00:17:16.516
You can see right above me the update
function takes in a new value, right?

321
00:17:16.516 --> 00:17:21.940
Fantastic, so I believe we have finished
programming our entire LRU at this point.

322
00:17:21.940 --> 00:17:25.503
How does everyone feel,
pretty good about this thing?

323
00:17:25.503 --> 00:17:27.625
[LAUGH] Yeah, like really good?

324
00:17:27.625 --> 00:17:30.870
Okay, we got sturdy head
nods going on right now.

325
00:17:32.429 --> 00:17:34.398
And no one would ever lie to me.

326
00:17:34.398 --> 00:17:36.684
So we know for a fact that this is good.

327
00:17:36.684 --> 00:17:38.801
All right, just LRU.

328
00:17:41.245 --> 00:17:42.622
We're gonna run it.

329
00:17:42.622 --> 00:17:45.175
My goodness, we got it first try,
that was actually.

330
00:17:45.175 --> 00:17:51.774
I have impressed myself, because the test
is actually fairly lengthy, right?

331
00:17:51.774 --> 00:17:55.087
We got 69420s in there,
all sorts stuffs going on in here.

332
00:17:55.087 --> 00:17:58.183
So we did properly actually
do all this stuff.

333
00:17:58.183 --> 00:17:59.479
There you go, that is an LRU.

334
00:17:59.479 --> 00:18:01.399
It's the combination of
two data structures.

335
00:18:01.399 --> 00:18:04.633
We understood, a map plus a linked list
to be able to create something that

336
00:18:04.633 --> 00:18:07.777
can actually cache data, and
this is something that we use at Netflix.

337
00:18:07.777 --> 00:18:10.626
This is something I had to build,
spent many years crafting and

338
00:18:10.626 --> 00:18:11.660
building this thing.

339
00:18:11.660 --> 00:18:15.994
So again, these data structures
are things you will eventually run

340
00:18:15.994 --> 00:18:17.902
into as you build libraries.

341
00:18:17.902 --> 00:18:20.816
Now if you're just doing UI components,
if you're just doing something light,

342
00:18:20.816 --> 00:18:22.646
you're not gonna probably
run into these things.

343
00:18:22.646 --> 00:18:26.863
But the moment you cross the boundary
from just simple UI features into

344
00:18:26.863 --> 00:18:31.240
something that the UI uses, you will
often run into any of these things.

