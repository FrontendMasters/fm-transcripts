WEBVTT

1
00:00:00.000 --> 00:00:05.050
All right so we're actually on to
the second data structure is everyone

2
00:00:05.050 --> 00:00:10.857
filled with exuberance, joy, happiness,
okay good so I did say something weird

3
00:00:10.857 --> 00:00:16.513
earlier of course with it which is this
statement in JavaScript Is not an array.

4
00:00:16.513 --> 00:00:21.068
Now we have a pretty solid definition and
understanding of an array,

5
00:00:21.068 --> 00:00:23.355
let's see is this thing an array?

6
00:00:27.864 --> 00:00:29.845
It's not an array, right?

7
00:00:29.845 --> 00:00:32.733
We can tell it's not an array because
you got push you can grow it, right?

8
00:00:32.733 --> 00:00:35.309
It can grow at infinitum, right?

9
00:00:35.309 --> 00:00:39.082
So something's happening on top
of an array minimally, right?

10
00:00:39.082 --> 00:00:43.421
Can we at least say that, there may be
an array underneath the hood somewhere,

11
00:00:43.421 --> 00:00:47.693
but somehow we have the ability to add,
we have the ability to insert, we have

12
00:00:47.693 --> 00:00:52.339
the ability to delete from, in which all
the indices are actually being adjusted.

13
00:00:52.339 --> 00:00:54.289
Because if I shift, an array,

14
00:00:54.289 --> 00:00:59.014
the first element in the array becomes
the zeroeth element and so therefore

15
00:00:59.014 --> 00:01:03.889
something had to happen because surely
arrays don't offer that if you delete

16
00:01:03.889 --> 00:01:09.013
the zeroeth element you know it out you
zero it out And one is still one, correct?

17
00:01:09.013 --> 00:01:10.078
So something is happening.

18
00:01:10.078 --> 00:01:12.288
Something more than just
an array is happening.

19
00:01:12.288 --> 00:01:16.368
Some sort of organizational
structure around this happening.

20
00:01:16.368 --> 00:01:20.125
All right, so I'm sure some of you are
getting pretty offended by all this talk.

21
00:01:20.125 --> 00:01:22.342
Yes, I wanna say HTML is
not a programming language.

22
00:01:22.342 --> 00:01:23.228
Neovim is the greatest editor.

23
00:01:23.228 --> 00:01:24.245
Rust is the greatest language.

24
00:01:24.245 --> 00:01:26.140
And Linux is the only machine
you should develop on.

25
00:01:26.140 --> 00:01:29.125
Hot takes for everybody,
but let's keep on going.

26
00:01:29.125 --> 00:01:31.123
Go to our first real data structure.

27
00:01:31.123 --> 00:01:34.515
The reason why I'm calling it
the first real one, is because,

28
00:01:34.515 --> 00:01:37.337
arrays just don't feel real in some sense,
right?

29
00:01:37.337 --> 00:01:41.048
They're so raw they almost feel like
a primitive of computing, right?

30
00:01:41.048 --> 00:01:43.538
They don't necessarily feel
like they're something, but

31
00:01:43.538 --> 00:01:46.086
I mean there is a lot of things
happening underneath the hood.

32
00:01:46.086 --> 00:01:48.555
Nonetheless it still feels very wrong.

33
00:01:48.555 --> 00:01:53.166
So, let's keep on let's go I did
have this funny joke in here which

34
00:01:53.166 --> 00:01:58.108
is it's available on pretty much
every language except for JavaScript.

35
00:01:58.108 --> 00:02:00.542
Anyway, so what sucks about an array?

36
00:02:00.542 --> 00:02:02.799
Deletion, well,
you can't really delete right?

37
00:02:02.799 --> 00:02:04.235
You can zero out something.

38
00:02:04.235 --> 00:02:07.747
Insertion, well,
you can't really insert you can, right?

39
00:02:07.747 --> 00:02:09.343
It's ungrowable, why?

40
00:02:09.343 --> 00:02:13.050
Remember Fred EFS and chat for
Fred because F went away.

41
00:02:13.050 --> 00:02:15.633
So, let's talk about linked lists.

42
00:02:15.633 --> 00:02:19.050
Okay, so this is really,
our first real data structure,

43
00:02:19.050 --> 00:02:21.994
they often call this a node
based data structure.

44
00:02:21.994 --> 00:02:25.703
No not node,
as in the runtime for JavaScript,

45
00:02:25.703 --> 00:02:30.082
node as in the type of container
that will wrap our data.

46
00:02:30.082 --> 00:02:31.768
So let's talk about this.

47
00:02:31.768 --> 00:02:35.725
This is pretty fun, this is where
things I think get really fun,

48
00:02:35.725 --> 00:02:40.493
cause now we're actually getting into
really the heart of the beginning like

49
00:02:40.493 --> 00:02:44.258
the very the first ventricle if
you will of data structures.

50
00:02:44.258 --> 00:02:47.711
Wow what an analogy,
of a doctor practically all right.

51
00:02:47.711 --> 00:02:52.215
So, in a linked list how you
can think of it, is that,

52
00:02:52.215 --> 00:02:57.237
if you have a series of values,
Oops this B, nice writing.

53
00:02:57.237 --> 00:02:59.266
What you're going to see,

54
00:02:59.266 --> 00:03:03.854
is that you're going to see data
organized in such a way that,

55
00:03:03.854 --> 00:03:09.524
you will not only be able to visit say
this node it will point to the next node.

56
00:03:09.524 --> 00:03:15.635
Which means that, things like get I,
obviously work a lot differently, right?

57
00:03:15.635 --> 00:03:18.913
You can't just get the eighth structure.

58
00:03:18.913 --> 00:03:20.178
What would you have to do?

59
00:03:20.178 --> 00:03:24.416
Well, if you start here if this
is our head our first element,

60
00:03:24.416 --> 00:03:29.796
we literally have to go okay, 1,2,3
all right we wanted the fourth item or

61
00:03:29.796 --> 00:03:34.542
the third index there we go we just
got it we can return out this value.

62
00:03:34.542 --> 00:03:38.070
And the reason why I draw
circles around this, is that,

63
00:03:38.070 --> 00:03:40.030
it's often a container item.

64
00:03:40.030 --> 00:03:43.725
Meaning that you hand me a value T,
and I put something around it.

65
00:03:43.725 --> 00:03:45.831
So, that's why I called a node based one.

66
00:03:45.831 --> 00:03:50.842
So imagine you have a type definition and
type script, which is generic over T.

67
00:03:50.842 --> 00:03:56.072
What you'd see is a value,
which is going to be of type T, and

68
00:03:56.072 --> 00:04:01.521
say a next, which could be
an undefined value of another node.

69
00:04:01.521 --> 00:04:02.182
My goodness.
So

70
00:04:02.182 --> 00:04:05.663
this was the first algorithm
that blew my mind.

71
00:04:05.663 --> 00:04:09.090
You can see us allocating and
walking memory.

72
00:04:09.090 --> 00:04:13.061
I thought this was just like the coolest
thing, I hope you feel the same way.

73
00:04:13.061 --> 00:04:17.000
This is like the coolest moment in all of
my programming career that I can really

74
00:04:17.000 --> 00:04:20.719
tangibly remember, is being able to
see this in my head and how it worked.

75
00:04:20.719 --> 00:04:24.224
And yes I did see in Java at that
point please don't make fun of me, but

76
00:04:24.224 --> 00:04:28.293
that's just how it was, everyone first
language is sometimes unimpressive.

77
00:04:28.293 --> 00:04:28.948
So, there we go.
So

78
00:04:28.948 --> 00:04:32.597
this is how a linked
list fundamentally works.

79
00:04:32.597 --> 00:04:35.777
Is that you have a node
that contains a value and

80
00:04:35.777 --> 00:04:39.134
a reference to another value or
to another node.

81
00:04:39.134 --> 00:04:43.697
And so that way you can walk
this daisy chain, if you will,

82
00:04:43.697 --> 00:04:46.226
of nodes which contain values.

83
00:04:46.226 --> 00:04:49.722
So, A double if this is to be
considered a single link list.

84
00:04:49.722 --> 00:04:51.450
Why is it considered a single link list?

85
00:04:51.450 --> 00:04:55.018
Cause A point to B,
B points to C, C points to D,

86
00:04:55.018 --> 00:04:57.802
you can't walk backwards, right?

87
00:04:57.802 --> 00:05:01.066
The moment you go forwards, if you don't
have a reference to what is behind you,

88
00:05:01.066 --> 00:05:02.467
you've lost it forever, right?

89
00:05:02.467 --> 00:05:03.170
It's gone.

90
00:05:03.170 --> 00:05:08.772
If I take head, and just pointed to here,
no one's gonna be able to access A, right?

91
00:05:08.772 --> 00:05:09.806
It's just gone, right?

92
00:05:09.806 --> 00:05:14.394
Hopefully I believe JavaScript garbage
collection is so super advanced it

93
00:05:14.394 --> 00:05:19.198
actually even collect A because it can
tell that though it references data that

94
00:05:19.198 --> 00:05:23.964
still is alive Live it itself has no
references left therefore dead, right?

95
00:05:23.964 --> 00:05:26.511
Now a doubly linked lists,

96
00:05:26.511 --> 00:05:32.285
usually comes with an additional property,
previous node.

97
00:05:32.285 --> 00:05:35.602
Which means, we start getting
bi directional arrows, right?

98
00:05:35.602 --> 00:05:40.156
With this we get the bi directional nature
of a node which means we can go from A to

99
00:05:40.156 --> 00:05:41.882
B and from B back to A, right?

100
00:05:41.882 --> 00:05:46.012
We can keep on walking back and forth
because we have these links right here,

101
00:05:46.012 --> 00:05:47.957
you are referencing the next item.

102
00:05:47.957 --> 00:05:50.657
And so often they call this a container,
right?

103
00:05:50.657 --> 00:05:52.888
Because you, the linked list owner,

104
00:05:52.888 --> 00:05:55.606
is going to say handed
a series of numbers, but

105
00:05:55.606 --> 00:06:00.364
it needs the ability to store and organize
these numbers within the linked list.

106
00:06:00.364 --> 00:06:04.462
So creates a container to put them into
and then be able to manage it that way,

107
00:06:04.462 --> 00:06:05.688
does that make sense?

108
00:06:05.688 --> 00:06:10.434
So instead of using an array, it uses
a heap allocated objects, and puts them.

109
00:06:10.434 --> 00:06:13.626
Heap allocated objects of course mean
objects that are stored in some magical

110
00:06:13.626 --> 00:06:16.144
memory place, which is usually
more expensive than stack.

111
00:06:16.144 --> 00:06:19.135
That's a terrible definition but
go with it.

112
00:06:19.135 --> 00:06:22.659
All right, so now let's talk
about deletion and insertion.

113
00:06:22.659 --> 00:06:27.018
So, one cool property about length lists
is that deletion insertion can be very

114
00:06:27.018 --> 00:06:27.679
very fast.

115
00:06:27.679 --> 00:06:31.954
So let's just say we wanted
to insert into here F.

116
00:06:31.954 --> 00:06:34.522
What do we need to do to insert F?

117
00:06:34.522 --> 00:06:37.638
Well, remember, A points to B.

118
00:06:37.638 --> 00:06:40.994
So, let's make A point to F.

119
00:06:40.994 --> 00:06:43.634
F needs to point to A.

120
00:06:43.634 --> 00:06:46.414
Remember because we have a previous and
next we're doing a doubly linked list.

121
00:06:46.414 --> 00:06:49.909
This would obviously be less
operations in a singly linked list, but

122
00:06:49.909 --> 00:06:50.821
you get the idea.

123
00:06:50.821 --> 00:06:52.469
Now we have another problem.

124
00:06:52.469 --> 00:06:54.360
B, where does it point to?

125
00:06:54.360 --> 00:06:54.999
Points to A.

126
00:06:54.999 --> 00:06:55.969
Can A point to A?

127
00:06:55.969 --> 00:06:56.802
Just can't.

128
00:06:56.802 --> 00:06:58.447
Right?
We have broken off this link but

129
00:06:58.447 --> 00:06:59.345
we still have this one.

130
00:06:59.345 --> 00:07:04.641
So B, needs to point to F and
F needs to point to B.

131
00:07:04.641 --> 00:07:08.263
At this point, what has happened?

132
00:07:08.263 --> 00:07:13.467
We have effectively moved
everything over and inserted F.

133
00:07:13.467 --> 00:07:15.761
But here's the cool part.

134
00:07:15.761 --> 00:07:17.316
What did we have to do?

135
00:07:17.316 --> 00:07:21.126
Well, we had to set a bunch of nexts and
previouses, right?

136
00:07:21.126 --> 00:07:22.395
Like that's it.

137
00:07:22.395 --> 00:07:27.049
Or any of those operations based on how
many nodes are inside the linked list?

138
00:07:27.049 --> 00:07:31.137
No, are they constant time?

139
00:07:31.137 --> 00:07:34.326
Setting next is that constant effectively,
right?

140
00:07:34.326 --> 00:07:37.008
We can assume that it's constant.

141
00:07:37.008 --> 00:07:39.538
You could argue that in TypeScript or
in JavaScript,

142
00:07:39.538 --> 00:07:42.871
looking up a property on a value
could be this under these conditions.

143
00:07:42.871 --> 00:07:44.497
Let's just forget all about that and

144
00:07:44.497 --> 00:07:46.762
just assume that this is
a more traditional style.

145
00:07:46.762 --> 00:07:52.805
If you set a piece of memory on an object,
it is constant time, right?

146
00:07:52.805 --> 00:07:56.392
It's an offset into the objects
that's the memory boom, there we go.

147
00:07:56.392 --> 00:07:59.130
So if we set 2 nexts, right?

148
00:07:59.130 --> 00:08:02.753
Because we set As next to be F.

149
00:08:02.753 --> 00:08:03.721
Let me write it down here.

150
00:08:03.721 --> 00:08:11.257
We say it As to be Fs, we said F to be B,
then, we have to do the two previouses.

151
00:08:11.257 --> 00:08:17.667
We do B, has to be set to F and
F, has to be set to A.

152
00:08:17.667 --> 00:08:20.652
All those operations
are performed constantly, right?

153
00:08:20.652 --> 00:08:23.115
It's just setting a property,

154
00:08:23.115 --> 00:08:29.238
therefore to insert inside of a linked
list at a given position is of 1, right?

155
00:08:29.238 --> 00:08:33.507
Nothing, is based on input,
no matter how big the value you give me,

156
00:08:33.507 --> 00:08:37.423
no matter how many items are in the list,
none of that matters.

157
00:08:37.423 --> 00:08:40.043
It only matters that at the break for
links, and yes,

158
00:08:40.043 --> 00:08:42.034
those each can take some amount of time.

159
00:08:42.034 --> 00:08:45.446
That's why like I said there's always
a constant we dropped the constant it does

160
00:08:45.446 --> 00:08:48.868
not matter that there is a constant
practically speaking constants can matter.

161
00:08:48.868 --> 00:08:51.227
But in this case, it doesn't matter.

162
00:08:51.227 --> 00:08:54.168
So there we go.
We actually created a doubly linked list,

163
00:08:54.168 --> 00:08:55.733
and we were able to insert.

164
00:08:55.733 --> 00:09:00.126
So, let's think about being
able to do the opposite.

165
00:09:00.126 --> 00:09:04.782
If we wanted the delete C,
what would we have to do?

166
00:09:04.782 --> 00:09:07.337
Okay, we have C, we have C the node.

167
00:09:07.337 --> 00:09:11.724
Let's pretend we got C in some constant
time, or we just had access to C.

168
00:09:11.724 --> 00:09:14.371
So, we're not considering how we got C.

169
00:09:14.371 --> 00:09:19.444
We have C and
we want to be able to, delete it.

170
00:09:19.444 --> 00:09:23.773
So what we're gonna have to do, is
the first thing we're gonna need to do is

171
00:09:23.773 --> 00:09:28.064
we're going to go from C, to B,
back to C and break that link, all right?

172
00:09:28.064 --> 00:09:30.785
We don't want to do that,
we now have access to B.

173
00:09:30.785 --> 00:09:33.233
We're gonna have to break
the link from B and

174
00:09:33.233 --> 00:09:36.554
we're gonna have to point it
to C which points to D, right?

175
00:09:36.554 --> 00:09:39.681
We're gonna actually have to point
through C's next to D, right?

176
00:09:39.681 --> 00:09:46.741
So we're gonna have to go back, take its
next and point to my current ones next.

177
00:09:46.741 --> 00:09:50.007
Do you see I know linkless
are terribly hard to implement and

178
00:09:50.007 --> 00:09:52.569
you often get it wrong your first try,
right?

179
00:09:52.569 --> 00:09:58.132
So if you think about that,
practically speaking in more kind of code,

180
00:09:58.132 --> 00:10:03.527
since if you had access to C,
I'd say C previous, equals B, right?

181
00:10:03.527 --> 00:10:09.116
B next, equals C next.

182
00:10:09.116 --> 00:10:10.285
Does that make sense?

183
00:10:10.285 --> 00:10:14.865
Like what I just did there,
is I broke the link

184
00:10:14.865 --> 00:10:19.219
from B that points to C and
now pointed to D.

185
00:10:19.219 --> 00:10:20.130
That makes sense, right?

186
00:10:20.130 --> 00:10:23.232
I think that makes sense,
&gt;&gt; Would you put C next?

187
00:10:23.232 --> 00:10:25.148
And why not just put D?

188
00:10:25.148 --> 00:10:28.035
&gt;&gt; Well, the thing is you have
to first get access to D, right?

189
00:10:28.035 --> 00:10:32.612
So I first have to go like this,
D equals C dot next, right?

190
00:10:32.612 --> 00:10:36.432
Then, I could replace that with D,
so that is equally valid as well.

191
00:10:36.432 --> 00:10:41.038
But remember, we're now using memory and
we're now playing around with these linked

192
00:10:41.038 --> 00:10:44.644
lists, so it does require us to be
a lot more specific at all points.

193
00:10:44.644 --> 00:10:46.202
So hopefully that sort of makes sense.

194
00:10:46.202 --> 00:10:49.442
I mean, this is obviously a very hard
concept the first time you see it, but

195
00:10:49.442 --> 00:10:52.580
you can see that these nexts and
previouses, you have to be able to manage

196
00:10:52.580 --> 00:10:56.046
the links yourself and that really is
just setting where they're pointing to.

197
00:10:56.046 --> 00:10:59.402
&gt;&gt; So, linked list,
there's no index, you can't?

198
00:10:59.402 --> 00:11:02.103
&gt;&gt; Question was,
in linked list there's no index, correct.

199
00:11:02.103 --> 00:11:04.751
There is no index you
have access to a node in

200
00:11:04.751 --> 00:11:08.002
which you can traverse to
get to the node you desire.

201
00:11:08.002 --> 00:11:10.868
Now there's ways to do fast traversal and
things like that.

202
00:11:10.868 --> 00:11:13.272
We will get to that at some point.

203
00:11:13.272 --> 00:11:14.521
But in the current moment,

204
00:11:14.521 --> 00:11:17.139
we're just looking at it in
a traditional kind of sense.

205
00:11:17.139 --> 00:11:21.249
Just a linked list, as is doubly
linked to make it kinda obvious,

206
00:11:21.249 --> 00:11:25.375
singly linked are really easy to
implement, in comparison to W.

207
00:11:25.375 --> 00:11:27.821
Because W have to do this whole back and
forth business.

208
00:11:27.821 --> 00:11:28.982
Alright, so there we go.

209
00:11:28.982 --> 00:11:33.165
We just set B, to point to D, right?

210
00:11:33.165 --> 00:11:37.685
So now, we have D, point to B, right?

211
00:11:37.685 --> 00:11:42.550
So now notice that these operations, the
operational order is extremely important,

212
00:11:42.550 --> 00:11:47.162
because if I said As, see that next year
undefined, could we ever access D again?

213
00:11:47.162 --> 00:11:50.085
No, D is gone, we can no longer
ever access it again so it.

214
00:11:50.085 --> 00:11:53.566
Operation ordering of operations
is extremely important.

215
00:11:53.566 --> 00:11:57.321
All right, so
then the next thing that you have to do,

216
00:11:57.321 --> 00:12:01.340
is D dot previous would have
to be C dot previous, right?

217
00:12:01.340 --> 00:12:05.031
So now C or D now points to B, right?

218
00:12:05.031 --> 00:12:06.650
We just did B to D, D to B,

219
00:12:06.650 --> 00:12:11.457
I wish i should have chosen different
letters because they're so close.

220
00:12:11.457 --> 00:12:15.615
Bravo to delta, delta to bravo, there
we go we now have them together and so

221
00:12:15.615 --> 00:12:18.256
now we need to take Charlie over here,
I guess.

222
00:12:18.256 --> 00:12:21.932
Wow, DCB, they're terrible letter
names here now that I think about it.

223
00:12:21.932 --> 00:12:25.669
Alright, we're gonna take Charlie here and

224
00:12:25.669 --> 00:12:30.401
we can go previous, equals next,
equals null, right?

225
00:12:30.401 --> 00:12:33.788
It's, we've taken it out of the graph,
right?

226
00:12:33.788 --> 00:12:38.712
We're deleting C out, so yes D and B now
point to each other, therefore C needs

227
00:12:38.712 --> 00:12:43.564
to be taken out and no longer pointing to
anything and at this point if we want to

228
00:12:43.564 --> 00:12:47.918
return the value we could just simply
return you C dot value, right?

229
00:12:47.918 --> 00:12:49.850
So there we go, does this make sense?

230
00:12:49.850 --> 00:12:52.980
I tried to kind of break this down
into this most fundamental operations,

231
00:12:52.980 --> 00:12:53.845
this is a deletion.

232
00:12:53.845 --> 00:12:58.294
We can also go over it again with
insertion and actually do the writing of

233
00:12:58.294 --> 00:13:02.669
the values, we will code this no
matter what at some point but this is,

234
00:13:02.669 --> 00:13:04.837
the fundamental value right now.

235
00:13:04.837 --> 00:13:06.290
Are the fundamental operation.

236
00:13:06.290 --> 00:13:07.164
Does this all make sense?

237
00:13:07.164 --> 00:13:09.535
Is everyone on the same page?

238
00:13:09.535 --> 00:13:12.436
For the most part, awesome.

239
00:13:12.436 --> 00:13:14.217
Alright, so that is a linked list.

240
00:13:14.217 --> 00:13:18.724
So again, let's think about
the running time of a deletion.

241
00:13:18.724 --> 00:13:24.587
Is any of the deleting part right
here based on how big your input is?

242
00:13:24.587 --> 00:13:28.279
Now, is it based on how big
the value of the notice?

243
00:13:28.279 --> 00:13:31.115
No, it's not based on anything,
it's based on four links.

244
00:13:31.115 --> 00:13:33.420
Is four a variable or a constant?

245
00:13:35.947 --> 00:13:36.455
&gt;&gt; Constant.

246
00:13:36.455 --> 00:13:37.526
&gt;&gt; Confidence right there.

247
00:13:37.526 --> 00:13:41.570
Yes, it is a constant and
not only that is setting next and

248
00:13:41.570 --> 00:13:47.149
previous is that a variable length
operation or is that a constant operation?

249
00:13:47.149 --> 00:13:48.004
It's constant operation, right?

250
00:13:48.004 --> 00:13:51.260
Because setting something to undefined
requires going to the memory and

251
00:13:51.260 --> 00:13:54.033
setting it to undefined computer
super fast going to memory,

252
00:13:54.033 --> 00:13:57.684
we can just assume it's a constant
operation though it's very, very complex.

253
00:13:57.684 --> 00:14:00.286
It's nonetheless, very, very constant.

254
00:14:00.286 --> 00:14:03.529
And so therefore,
the leading is constant time.

255
00:14:03.529 --> 00:14:05.684
Just like insertion is constant time.

256
00:14:05.684 --> 00:14:11.597
We do the same amount of operations no
matter how big or small the list is.

257
00:14:11.597 --> 00:14:13.149
Awesome?

258
00:14:13.149 --> 00:14:17.877
Hopefully, now obviously if you're really
actually programming this you'd have to

259
00:14:17.877 --> 00:14:21.696
put some like guards around this like
right if you know B is real then you

260
00:14:21.696 --> 00:14:25.669
do the whole next thing if D is real
then you have to do the previous thing.

261
00:14:25.669 --> 00:14:30.012
But in our sweet pseudocode I will
always be dropping undefined checks and

262
00:14:30.012 --> 00:14:34.704
things like that just because it's super
hard to be able to write pseudocode and

263
00:14:34.704 --> 00:14:37.526
actually write really
concrete correct code.

264
00:14:37.526 --> 00:14:40.993
So just be okay with
things that are like that.

265
00:14:40.993 --> 00:14:41.835
Does this all make sense?

266
00:14:41.835 --> 00:14:43.455
Are we good with this one?

267
00:14:43.455 --> 00:14:44.139
So there we go.

268
00:14:44.139 --> 00:14:45.590
This is a linked list.

