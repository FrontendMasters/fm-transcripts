WEBVTT

1
00:00:00.000 --> 00:00:02.229
Fantastic, where does this move on,
all right?

2
00:00:02.229 --> 00:00:03.700
I'm ready, are you ready?

3
00:00:03.700 --> 00:00:08.404
All right, so, there's a common saying in
interviews, just use a HashMap, right?

4
00:00:08.404 --> 00:00:10.143
I think Joma Tech even did it.

5
00:00:10.143 --> 00:00:12.708
Again, this the second
time I represent him.

6
00:00:12.708 --> 00:00:16.866
He always does these shorts, and
one of them was HashMap, right?

7
00:00:16.866 --> 00:00:19.319
Prepares for an interview for
a month, right,

8
00:00:19.319 --> 00:00:22.646
when the person asks a question
his answer is HashMaps, right?

9
00:00:22.646 --> 00:00:24.270
It's just always the answer.

10
00:00:24.270 --> 00:00:25.625
So what are maps?

11
00:00:25.625 --> 00:00:30.187
It's too easy for us to think of
either squirrely braces or new map and

12
00:00:30.187 --> 00:00:33.032
just assume we know what they are, right?

13
00:00:33.032 --> 00:00:33.802
That's what we do.

14
00:00:33.802 --> 00:00:36.394
The reality is,
we probably know how to use them,

15
00:00:36.394 --> 00:00:38.939
we probably don't know
what they actually are.

16
00:00:38.939 --> 00:00:42.919
And more so,
this is not even a map, right?

17
00:00:42.919 --> 00:00:47.230
That's not a map, it's an object that has
different properties associated with it.

18
00:00:47.230 --> 00:00:51.040
So, just things to think about,
everything's a little bit different.

19
00:00:51.040 --> 00:00:52.548
So we are gonna go through, and

20
00:00:52.548 --> 00:00:55.284
we are actually going to
explain what a map actually is.

21
00:00:55.284 --> 00:00:57.092
So here's some terms first.

22
00:00:57.092 --> 00:00:58.514
There's the load factor.

23
00:00:58.514 --> 00:01:03.175
That's the amount of data points versus
the amount of storage that we have, yeah?

24
00:01:03.175 --> 00:01:07.020
Yeah, so
if we had seven items in our map, and

25
00:01:07.020 --> 00:01:13.412
we had ten available units of storage,
we'd have a load factor of 0.7.

26
00:01:13.412 --> 00:01:16.160
A key, a key is the thing
that is hashable, right?

27
00:01:16.160 --> 00:01:20.310
We use the key to create something
in which we can access our value.

28
00:01:20.310 --> 00:01:25.292
A value of course is the thing
that's associated with the key,

29
00:01:25.292 --> 00:01:29.432
and a collision is when two
keys map to the same cell.

30
00:01:29.432 --> 00:01:33.334
Okay, there we go,
we've made some progress.

31
00:01:33.334 --> 00:01:36.574
All right, so
let's whiteboard all these things.

32
00:01:36.574 --> 00:01:41.385
This is where things get kind of fun cuz
we're kind of finally done with this whole

33
00:01:41.385 --> 00:01:41.892
graph.

34
00:01:41.892 --> 00:01:44.272
Everything's a LinkedList,
everything's a graph kind of section.

35
00:01:44.272 --> 00:01:45.644
We're kind of just into something new.

36
00:01:45.644 --> 00:01:48.408
Actually, joke's on you,
it's an ArrayList.

37
00:01:48.408 --> 00:01:51.143
All right, so again,
we're back down to an ArrayList.

38
00:01:51.143 --> 00:01:54.969
Somehow these foundational structures that
we discussed just keep coming back up.

39
00:01:54.969 --> 00:01:56.180
They're inside of a heap.

40
00:01:56.180 --> 00:01:58.536
We use a heap inside of
Dijkstra's shortest path.

41
00:01:58.536 --> 00:02:00.708
We are now on to Maps,
guess what, ArrayList, right?

42
00:02:00.708 --> 00:02:03.215
It always keeps on being the same thing,
always down.

43
00:02:03.215 --> 00:02:10.674
So effectively how a Map works is that, we
have a key and it needs to map to value.

44
00:02:10.674 --> 00:02:16.112
And what the key is mapping
to a value has to be,

45
00:02:16.112 --> 00:02:21.004
is a consistent hash, consistent hash.

46
00:02:21.004 --> 00:02:25.395
All right, so what this means is that
when I give case of 0, right, some key,

47
00:02:25.395 --> 00:02:29.546
that is uniquely defined, it will
always gimme the same answer back out.

48
00:02:29.546 --> 00:02:33.157
If it doesn't gimme the same answer
back out, that's an inconsistent hash.

49
00:02:33.157 --> 00:02:34.264
What is it good for?

50
00:02:34.264 --> 00:02:35.948
Absolutely nothing.

51
00:02:35.948 --> 00:02:37.766
Okay, that's great song.

52
00:02:37.766 --> 00:02:40.900
But, so now what we have to do is,
we have to come up with a way to hash.

53
00:02:40.900 --> 00:02:44.628
Now, JavaScript is particularly difficult
when it comes to creating these

54
00:02:44.628 --> 00:02:47.133
structures, because we can
take say a string, and

55
00:02:47.133 --> 00:02:51.348
walk through every character in the string
and create a hash from the string, right?

56
00:02:51.348 --> 00:02:55.729
We can have a number and use the number
as a way to kind of create a hash for

57
00:02:55.729 --> 00:02:56.554
the string.

58
00:02:56.554 --> 00:02:59.474
But what we don't have is an object.

59
00:02:59.474 --> 00:03:04.196
If you just hand me an object, I can't
create some sort of unique identifier for

60
00:03:04.196 --> 00:03:08.635
that object in the sense that if you
create an object that's like foo:5,

61
00:03:08.635 --> 00:03:10.899
right, my goodness, great five.

62
00:03:10.899 --> 00:03:15.487
Now let's say foo:3, and
we'll call this thing const F, right?

63
00:03:15.487 --> 00:03:20.358
And then you create another one, t,
and it has the exact same value.

64
00:03:20.358 --> 00:03:22.965
You can't tell the difference
of that in JavaScript, right,

65
00:03:22.965 --> 00:03:26.226
you don't have a way to be able to say,
hey, object, what's your unique ID?

66
00:03:26.226 --> 00:03:30.705
And in Java you do, you can call like
get hash ID, or get some sort of ID to

67
00:03:30.705 --> 00:03:35.501
the object in which produces a unique
identifier for that specific object.

68
00:03:35.501 --> 00:03:37.058
This may have changed in JavaScript.

69
00:03:37.058 --> 00:03:41.342
But last time I checked, this is not
a thing, someone can prove me wrong.

70
00:03:41.342 --> 00:03:44.282
I'm sure there's someone that
could probably prove me wrong, but

71
00:03:44.282 --> 00:03:48.007
I'm quite positive you just can't uniquely
identify objects in this sort of sense.

72
00:03:48.007 --> 00:03:52.819
You can only uniquely identify them based
on properties and their associated values.

73
00:03:52.819 --> 00:03:55.444
So if you have two with the identical,
good luck.

74
00:03:55.444 --> 00:04:00.158
Which means that our key lookup really
breaks down in this case, right?

75
00:04:00.158 --> 00:04:03.792
Because you could actually have two
separate objects that are meant to be two

76
00:04:03.792 --> 00:04:06.188
separate objects, but
mapped to the same value.

77
00:04:06.188 --> 00:04:10.506
So for our case if we do implement one,
we'll simply just use strings or numbers

78
00:04:10.506 --> 00:04:15.095
as our entrance into it, which I don't
think we're gonna actually implement one.

79
00:04:15.095 --> 00:04:16.927
So, let's just talk about how this works.

80
00:04:16.927 --> 00:04:21.896
So, we can do something like this,
is that we need a hashing function, right,

81
00:04:21.896 --> 00:04:26.960
that takes in the key and needs to produce
out some sort of unique number, right?

82
00:04:26.960 --> 00:04:30.702
And this is the important part,
is that we need a number.

83
00:04:30.702 --> 00:04:33.480
And the reason why is,
let's just say k comes in and

84
00:04:33.480 --> 00:04:37.169
it returns out some great number,
and it can be a really big number.

85
00:04:37.169 --> 00:04:40.273
It can be a really small number if
there's not anything specific to it.

86
00:04:40.273 --> 00:04:45.831
Then what we can do is, we can take it,
and we can modulo it based on say,

87
00:04:45.831 --> 00:04:50.018
the length of our data storage,
right, so say 10.

88
00:04:50.018 --> 00:04:54.296
And what that means is that if
we have a 10-item data, okay,

89
00:04:54.296 --> 00:04:59.650
say we have this many items, I realized
I can't count as fast as I can, right?

90
00:04:59.650 --> 00:05:01.965
That means our key, whatever we give it,

91
00:05:01.965 --> 00:05:05.619
can uniquely map to one of the bins
inside of our array structure.

92
00:05:05.619 --> 00:05:09.139
And we can just say, hey,

93
00:05:09.139 --> 00:05:13.782
we'll store the key plus the value

94
00:05:13.782 --> 00:05:19.076
inside of that structure right there.

95
00:05:19.076 --> 00:05:23.479
Then we map another one which say,
goes over here, and

96
00:05:23.479 --> 00:05:26.172
then we put the key and the value.

97
00:05:26.172 --> 00:05:30.642
But every now and then,
you're gonna map two very different keys.

98
00:05:30.642 --> 00:05:35.778
And since we say only have ten slots,
the chance of them colliding is uniformal.

99
00:05:35.778 --> 00:05:39.180
If they uniformly go to any number, it
would be a chance of one over ten, right?

100
00:05:39.180 --> 00:05:40.854
It wouldn't be that great.

101
00:05:40.854 --> 00:05:43.401
So if you had a perfectly
uniform hash generator,

102
00:05:43.401 --> 00:05:45.351
you get a 10% chance of collision.

103
00:05:45.351 --> 00:05:48.711
Which means that what
happens when we collide here?

104
00:05:48.711 --> 00:05:51.303
Well, we need a way to
be able to store both.

105
00:05:51.303 --> 00:05:53.177
Now when I went to college, I know,

106
00:05:53.177 --> 00:05:56.000
I can't believe I'm saying
this whippersnappers.

107
00:05:56.000 --> 00:05:59.732
What we used to do, at least how I learned
it is that you'd actually do something

108
00:05:59.732 --> 00:06:01.642
called linear or exponential back off.

109
00:06:01.642 --> 00:06:05.966
Meaning we would literally go down to
the next slot and put it in there.

110
00:06:05.966 --> 00:06:10.568
And we always store the key with
the value, and we'll see why on retrieval.

111
00:06:10.568 --> 00:06:14.931
Which means that if you did this,
you will fill up more and more slots.

112
00:06:14.931 --> 00:06:18.735
So as things become less and
less efficient, or more and more full,

113
00:06:18.735 --> 00:06:22.875
you're gonna need a larger amount of
storage with a smaller amount of load

114
00:06:22.875 --> 00:06:25.172
factor to prevent collisions, right?

115
00:06:25.172 --> 00:06:29.574
Cuz the moment you have five items in
here, the chance of you hitting it and

116
00:06:29.574 --> 00:06:34.050
then having to linearly go down gets
greater, and greater, and greater.

117
00:06:34.050 --> 00:06:37.092
So in more modern ways or
what I've seen is that,

118
00:06:37.092 --> 00:06:41.339
instead you use a list underneath
the hood to be able to add in items.

119
00:06:41.339 --> 00:06:45.125
So you have an ArrayList,
that has an ArrayList,

120
00:06:45.125 --> 00:06:49.465
that can add an items and
then we just walk the ArrayList.

121
00:06:49.465 --> 00:06:51.476
Sounds good.
We could technically also use a LinkedList

122
00:06:51.476 --> 00:06:54.538
underneath the hood because you do
linearly walk it every single time.

123
00:06:54.538 --> 00:06:57.834
And so long as the keys sufficiently
map to a bunch of them,

124
00:06:57.834 --> 00:07:01.962
what we're gonna see is little sub
amounts with only just one item in it.

125
00:07:01.962 --> 00:07:03.331
Maybe sometimes two, right?

126
00:07:03.331 --> 00:07:06.452
Long as you have a good hashing function,
you're gonna have very few.

127
00:07:06.452 --> 00:07:08.182
So how does retrieval work?

128
00:07:08.182 --> 00:07:10.535
Well, we go through our magical
hashing function, right?

129
00:07:10.535 --> 00:07:15.167
We pass in a key, we go through a hashing
function and produces an index, we then

130
00:07:15.167 --> 00:07:19.680
modulo that with the size of our storage
area, and we now have an item into it.

131
00:07:19.680 --> 00:07:20.804
Well, the problem is,

132
00:07:20.804 --> 00:07:24.360
is there could be multiple items inside
of any one storage unit, correct?

133
00:07:24.360 --> 00:07:28.223
So that's why we store
the key plus the value.

134
00:07:28.223 --> 00:07:32.983
We can use our key and say hey key,
are you equal to that key?

135
00:07:32.983 --> 00:07:34.370
You're the same key?

136
00:07:34.370 --> 00:07:38.340
Well guess what, that's your associated
value then, get on out, right?

137
00:07:38.340 --> 00:07:42.110
We can actually do that and get it on out,
and we can use that specific value.

138
00:07:42.110 --> 00:07:48.546
It's a little bit tricky, but then as you
think about it becomes really simple.

139
00:07:48.546 --> 00:07:53.810
Maps tend to be pretty simple creations,
and that's really all you're doing.

140
00:07:53.810 --> 00:07:58.341
Deletion, exact same thing, you go to
that spot within your ArrayList, you find

141
00:07:58.341 --> 00:08:02.755
the associated key with the value, remove
it from the entry, and there you go.

142
00:08:02.755 --> 00:08:06.466
You now have it removed,
of course you have to decrement length.

143
00:08:06.466 --> 00:08:08.640
But there is always one problem.

144
00:08:08.640 --> 00:08:12.150
So, I believe the ideal load
factor is 0.7 at this point.

145
00:08:12.150 --> 00:08:15.531
That's kind of what I believe is
considered the ideal one long as you do

146
00:08:15.531 --> 00:08:18.066
this ArrayLists or
this LinkedList style storing.

147
00:08:18.066 --> 00:08:21.804
If you do that,
once you exceed that load factor,

148
00:08:21.804 --> 00:08:25.106
we need a way to be able to redo this,
right?

149
00:08:25.106 --> 00:08:30.219
So something we can do is that,
we can take our current data storage,

150
00:08:30.219 --> 00:08:35.436
what it is, and we can iterate through
all of the keys that we can find.

151
00:08:35.436 --> 00:08:39.813
And then we can rehash them and
restore them into a larger storage arena,

152
00:08:39.813 --> 00:08:44.404
thus cutting down our load factor,
say by half if we double the storage, and

153
00:08:44.404 --> 00:08:47.239
then we have a bunch more
in which we can store.

154
00:08:47.239 --> 00:08:53.505
And this is the effective way in
which maps operate on systems.

155
00:08:53.505 --> 00:08:56.058
There we go,
they're not actually all that complicated,

156
00:08:56.058 --> 00:08:58.261
they're actually
surprisingly uncomplicated.

157
00:08:58.261 --> 00:09:01.729
It's actually surprisingly boring,
kind of, it doesn't feel that cool.

158
00:09:01.729 --> 00:09:04.650
But now that you know what ArrayLists are
and LinkedLists, this is very, very easy.

159
00:09:04.650 --> 00:09:06.293
If you didn't know those two terms,

160
00:09:06.293 --> 00:09:09.104
this might be a bit harder to kind
of understand how this works.

161
00:09:09.104 --> 00:09:13.300
So an ArrayList allows you to kind
of just simply increase the length.

162
00:09:13.300 --> 00:09:16.909
But usually you just use raw arrays
underneath the hood, and then double

163
00:09:16.909 --> 00:09:21.128
the size when you need to or increase the
size by 50%, whatever you think is good.

164
00:09:21.128 --> 00:09:25.402
Always a trade off between how much do you
want to store versus how efficient you

165
00:09:25.402 --> 00:09:26.716
want to be with memory.

166
00:09:26.716 --> 00:09:28.243
So it's always a game.

167
00:09:28.243 --> 00:09:32.040
That's why often you'll see maps
come with some sort of capacity.

168
00:09:32.040 --> 00:09:35.505
Because they want you to give them
the hint of how big we should be so

169
00:09:35.505 --> 00:09:38.909
that way the storage and
retrieval is as efficient as possible.

170
00:09:38.909 --> 00:09:42.745
Cuz the more amount of collisions,
the less o of one it is.

171
00:09:42.745 --> 00:09:43.889
And so why is it o of one?

172
00:09:43.889 --> 00:09:45.309
Well, we assume that,

173
00:09:45.309 --> 00:09:49.429
again, the key has some sort of
length that is not infinity, right?

174
00:09:49.429 --> 00:09:52.569
You're not storing large
text files as the key.

175
00:09:52.569 --> 00:09:55.570
Instead, you're storing some small string,
right?

176
00:09:55.570 --> 00:09:57.503
You could hash a text file, and then boom,

177
00:09:57.503 --> 00:10:00.210
you have this key that you use
all the time to get that value.

178
00:10:00.210 --> 00:10:01.646
That's kind of how the internet works.

179
00:10:01.646 --> 00:10:04.900
You do those kind of things, it has
some sort of hash associated with it.

180
00:10:04.900 --> 00:10:06.609
You don't store gigantic pieces of data,

181
00:10:06.609 --> 00:10:08.850
you still have small things
that point to other things.

182
00:10:09.970 --> 00:10:12.740
And then usually the thing you point
to is actually the big thing, so

183
00:10:12.740 --> 00:10:14.156
we assume hashing takes over one.

184
00:10:14.156 --> 00:10:17.299
I'm sure there's a great proof out
there that says, this is why it is.

185
00:10:17.299 --> 00:10:19.321
And so therefore, we have this.

186
00:10:19.321 --> 00:10:22.241
And we only have to do that
plus accessing the data, and

187
00:10:22.241 --> 00:10:24.789
then going through
a relatively small amount.

188
00:10:24.789 --> 00:10:28.639
So long as our collisions don't
gather up into one single point,

189
00:10:28.639 --> 00:10:31.719
you will always have
effectively one item in there,

190
00:10:31.719 --> 00:10:34.940
two items in there,
also again considered constant.

191
00:10:34.940 --> 00:10:37.085
And so
that's why it has a constant lookup time.

192
00:10:37.085 --> 00:10:41.113
There was a pretty funny bug that somebody
found that some high performance piece of

193
00:10:41.113 --> 00:10:44.920
code, no one could figure out how to
make it fast in this one condition.

194
00:10:44.920 --> 00:10:48.686
And someone went through and
looked at the buckets of the map.

195
00:10:48.686 --> 00:10:52.936
And effectively all the keys somehow were
just mapping to this one bucket cuz they

196
00:10:52.936 --> 00:10:54.513
had a bad hashing algorithm.

197
00:10:54.513 --> 00:10:58.787
And that caused this one thing to just
operate at linear time when you assumed it

198
00:10:58.787 --> 00:11:00.620
was operating at constant time.

199
00:11:00.620 --> 00:11:03.153
And it was just super slow when
it should have been super fast.

200
00:11:03.153 --> 00:11:06.991
And a simple change improve the speed of
the program by an enormous amount of time.

201
00:11:06.991 --> 00:11:08.643
And so maps can be quite tricky.

202
00:11:08.643 --> 00:11:11.928
In JavaScript land, of course you get
zero understanding of what's happening

203
00:11:11.928 --> 00:11:13.490
underneath the hood, right?

204
00:11:13.490 --> 00:11:15.290
You have no idea you are in
an abstract land, and

205
00:11:15.290 --> 00:11:17.300
you just hope that it's well implemented.

206
00:11:17.300 --> 00:11:19.465
The people who made the V8 are clearly so

207
00:11:19.465 --> 00:11:23.170
talented they created a engine that
can run a slow language swiftly.

208
00:11:23.170 --> 00:11:25.830
So they probably did it right,
I assume they did it right.

209
00:11:25.830 --> 00:11:29.650
And yeah, that's my argument for
why this happens.

210
00:11:29.650 --> 00:11:31.391
So yeah, that's really all a map is.

211
00:11:31.391 --> 00:11:34.612
I didn't really wanna implement one,
I think it's kinda boring.

212
00:11:34.612 --> 00:11:39.669
Plus we don't really have the tools we can
to really implement it well in JavaScript.

213
00:11:39.669 --> 00:11:41.120
So we're just gonna move on.

