WEBVTT

1
00:00:00.000 --> 00:00:01.222
Yeah, let's implement it, whoo!

2
00:00:01.222 --> 00:00:01.939
We're gonna do this.

3
00:00:01.939 --> 00:00:03.285
All right, so go back in here.

4
00:00:03.285 --> 00:00:05.301
And it's BTBFS, right?

5
00:00:05.301 --> 00:00:07.262
Binary tree, breadth first search.

6
00:00:07.262 --> 00:00:09.518
I know it's just the best,
I love acronyms.

7
00:00:09.518 --> 00:00:15.771
So the thing about a breadth first search
is we don't need to use recursion, right?

8
00:00:15.771 --> 00:00:17.088
Right?

9
00:00:17.088 --> 00:00:19.342
This is not a Padme meme,
we actually don't need to use it.

10
00:00:19.342 --> 00:00:20.825
We can just do this.

11
00:00:20.825 --> 00:00:23.006
So I'm gonna go like this,
const q equals this.

12
00:00:23.006 --> 00:00:25.268
We're gonna pretend it's a q.

13
00:00:25.268 --> 00:00:28.678
It's not a JavaScript array list, we're
actually gonna be using a q in this case.

14
00:00:28.678 --> 00:00:33.819
And then we'll do this simple little
operation of while (q.length), right?

15
00:00:33.819 --> 00:00:36.564
While the length is some
sort of number other than 0,

16
00:00:36.564 --> 00:00:39.006
which luckily length can't be negative 1,
or

17
00:00:39.006 --> 00:00:42.441
else we could be stuck in this
weird version of purgatory forever.

18
00:00:42.441 --> 00:00:44.480
And we're gonna put
the head inside of our q.

19
00:00:44.480 --> 00:00:47.250
So now we have a q of binary node.

20
00:00:47.250 --> 00:00:49.708
And in this case,
we're doing a breadth first search,

21
00:00:49.708 --> 00:00:51.658
not just simply a breadth first traversal.

22
00:00:51.658 --> 00:00:55.485
We're looking to see,
does this number exist within this tree?

23
00:00:55.485 --> 00:00:57.686
And if it does, we will return true.

24
00:00:57.686 --> 00:00:59.842
If it doesn't, we will return false.

25
00:00:59.842 --> 00:01:01.123
And we're doing a breadth first search.

26
00:01:01.123 --> 00:01:02.031
So let's do that right now.

27
00:01:03.678 --> 00:01:06.475
All right, so
what's the first operation of doing this?

28
00:01:06.475 --> 00:01:10.224
Well, we haven't written out
the pseudocode, have we?

29
00:01:10.224 --> 00:01:14.151
So it's gonna look a lot like
depth first search, except for

30
00:01:14.151 --> 00:01:18.463
instead of recursing or recursing,
we're going to push into a q.

31
00:01:18.463 --> 00:01:22.542
So we'll do something like this,
while q.notEmpty.

32
00:01:22.542 --> 00:01:26.518
By the way,
don't actually name a function notEmpty,

33
00:01:26.518 --> 00:01:29.405
that is just a very silly function name.

34
00:01:29.405 --> 00:01:32.152
Cuz you put the negative in there,
you should just say empty than not.

35
00:01:32.152 --> 00:01:37.353
Okay, anyways, so we're gonna have

36
00:01:37.353 --> 00:01:42.559
next = q.deque(), look at that.

37
00:01:42.559 --> 00:01:44.873
So we get the next item out of the q.

38
00:01:44.873 --> 00:01:48.265
And then we could console log if you
wanted to do something like that, but

39
00:01:48.265 --> 00:01:49.498
we're not gonna do that.

40
00:01:49.498 --> 00:01:54.196
Then we need to q.put, or not push,

41
00:01:54.196 --> 00:02:00.875
enqueue in next,
I should have used smaller words.

42
00:02:00.875 --> 00:02:04.797
Next left, and
then you can imagine next right, right?

43
00:02:04.797 --> 00:02:07.232
That's pretty much it, right?

44
00:02:07.232 --> 00:02:09.911
That's pretty much all we're doing for
breadth first search.

45
00:02:09.911 --> 00:02:14.901
We get the item, we could do an operation,
we push in its children, or

46
00:02:14.901 --> 00:02:16.603
enqueue its children.

47
00:02:16.603 --> 00:02:17.357
So that makes sense?

48
00:02:17.357 --> 00:02:18.823
Hopefully that makes sense.

49
00:02:18.823 --> 00:02:20.259
So let's just do that right now.

50
00:02:20.259 --> 00:02:23.576
So we const, we can call current, or

51
00:02:23.576 --> 00:02:29.467
it actually doesn't really matter,
q.unshift, no, shift.

52
00:02:29.467 --> 00:02:31.929
There we go, q.shift, awesome.

53
00:02:31.929 --> 00:02:34.559
So we're gonna shift that thing on.

54
00:02:34.559 --> 00:02:36.880
And then,
we need to do something else, right?

55
00:02:36.880 --> 00:02:39.616
We need to actually do the check,
because we're doing a search,

56
00:02:39.616 --> 00:02:41.225
not just simply a traversal, right?

57
00:02:41.225 --> 00:02:44.401
Since we're doing a search,
we're gonna go like this,

58
00:02:44.401 --> 00:02:47.471
if (curr?.value =, why are you doing this?

59
00:02:47.471 --> 00:02:50.572
Yeah, I forgot you have to, TypeScript,

60
00:02:50.572 --> 00:02:53.857
you gotta do this thing on it,
just because.

61
00:02:53.857 --> 00:02:58.969
If value equals needle,
we can return true.

62
00:02:58.969 --> 00:03:01.103
Now, remember I don't like
to return from a loop.

63
00:03:01.103 --> 00:03:02.422
But we're doing algorithms,

64
00:03:02.422 --> 00:03:05.220
we don't really care about
the sweetest engineering right now.

65
00:03:05.220 --> 00:03:09.143
So we did our little operation to see,
do we need to leave the loop?

66
00:03:09.143 --> 00:03:11.041
Did we find the value we want?

67
00:03:11.041 --> 00:03:16.050
Else we need to keep on traversing,
which is gonna be a breadth first one.

68
00:03:16.050 --> 00:03:18.473
So we're gonna push on to the end, right?

69
00:03:18.473 --> 00:03:21.849
Cuz a q, we removed from the front,
we push on to the end.

70
00:03:21.849 --> 00:03:24.792
So we can kind of simulate
a q via JavaScript here.

71
00:03:24.792 --> 00:03:30.230
So curr.left, and of course, curr.right.

72
00:03:30.230 --> 00:03:32.375
And we need to do a check here, right?

73
00:03:32.375 --> 00:03:35.630
Because we have our q,
we're not having a base case here.

74
00:03:35.630 --> 00:03:39.585
So we need to put our base case at the
pushing step if we wanna do it this way.

75
00:03:39.585 --> 00:03:45.546
So if (curr.left), then we push in left.

76
00:03:45.546 --> 00:03:50.214
If (curr.right), we push in right, right?

77
00:03:50.214 --> 00:03:52.676
So this is kind of simulating.

78
00:03:52.676 --> 00:03:55.271
This is where the iterative
approach often becomes not as good.

79
00:03:55.271 --> 00:03:59.194
We could have had it so
that we actually do a test here, right?

80
00:03:59.194 --> 00:04:05.335
Technically, it would be undefined or
null, right?

81
00:04:05.335 --> 00:04:10.888
Cuz that's the interface of the q, and
then we could do a whole if (!ccur).

82
00:04:10.888 --> 00:04:14.214
If we wanted to do it that way, continue.

83
00:04:14.214 --> 00:04:20.090
And then we could do this nice little,
Push it all in, and awesome.

84
00:04:20.090 --> 00:04:21.764
Let's see, what does it say here?

85
00:04:21.764 --> 00:04:24.088
Well, it saying this is not assignable.

86
00:04:24.088 --> 00:04:27.585
Yeah, that's because I didn't
define this thing appropriately.

87
00:04:27.585 --> 00:04:34.293
These are more TypeScript problems,
BinaryNode&lt;number&gt; or null, right?

88
00:04:34.293 --> 00:04:35.958
By doing that, we can do this.

89
00:04:35.958 --> 00:04:37.593
And then why are you not working?

90
00:04:37.593 --> 00:04:39.920
Object is possibly null,
now you're lying to me.

91
00:04:39.920 --> 00:04:41.206
Now you're just lying to me.

92
00:04:43.195 --> 00:04:45.621
There we go.
I forgot to say it's an array.

93
00:04:45.621 --> 00:04:47.212
It wasn't just a binary node,
it's an array.

94
00:04:47.212 --> 00:04:49.007
There we go.
So for those that aren't familiar with

95
00:04:49.007 --> 00:04:51.163
Java or TypeScript,
this is really, really simple.

96
00:04:51.163 --> 00:04:55.589
I'm just saying, hey, the type can be one
of these two, it's either a binary node or

97
00:04:55.589 --> 00:04:56.341
it's a null.

98
00:04:56.341 --> 00:04:57.921
And we have a list of those things.

99
00:04:57.921 --> 00:05:01.894
And then, when I shift it off or
remove the first item from the list,

100
00:05:01.894 --> 00:05:03.859
it can either be the binary node.

101
00:05:03.859 --> 00:05:08.038
This is JavaScript, so you can shift
an empty list, so that would be undefined,

102
00:05:08.038 --> 00:05:09.398
there's nothing there.

103
00:05:09.398 --> 00:05:14.229
Or it can be a null because we have
our type definition specifying

104
00:05:14.229 --> 00:05:17.815
a binary tree to be either
a binary node or null.

105
00:05:17.815 --> 00:05:20.675
So that's why we have these
three types right here.

106
00:05:20.675 --> 00:05:21.280
There we go.

107
00:05:21.280 --> 00:05:23.623
And now we've just created
everything except for the last part.

108
00:05:23.623 --> 00:05:25.298
We're not returning a Boolean at the end.

109
00:05:25.298 --> 00:05:28.556
If we get all the way down to this point,
we've traversed the entire tree.

110
00:05:28.556 --> 00:05:30.446
And have we found the value?

111
00:05:30.446 --> 00:05:31.208
No, we haven't.

112
00:05:31.208 --> 00:05:32.500
We haven't found the value.

113
00:05:35.398 --> 00:05:36.657
Awesome, we just did it.

114
00:05:36.657 --> 00:05:41.193
Now, if I've done this correctly,
we should be able to npx jest,

115
00:05:41.193 --> 00:05:42.576
let's just try BT.

116
00:05:42.576 --> 00:05:43.970
I don't know how many things will run.

117
00:05:43.970 --> 00:05:46.641
Wow, look, all of them run.

118
00:05:46.641 --> 00:05:50.972
My goodness the whole
section was just slam dunk.

119
00:05:50.972 --> 00:05:54.360
I feel like we did a great job here,
all first try, it's fantastic.

120
00:05:54.360 --> 00:05:56.039
I'm sure everyone is super impressed.

121
00:05:56.039 --> 00:06:01.055
Now, one quick question,
which one do you like more, BFS or DFS?

122
00:06:01.055 --> 00:06:02.943
Which one feels easier to understand?

123
00:06:09.372 --> 00:06:10.340
&gt;&gt; DFS.

124
00:06:10.340 --> 00:06:11.172
&gt;&gt; DFS?

125
00:06:11.172 --> 00:06:13.026
&gt;&gt; Yes.
&gt;&gt; Delta FS?

126
00:06:13.026 --> 00:06:13.924
Or the recursive one?

127
00:06:13.924 --> 00:06:17.345
I feel like the recursive one is a bit
easier to code, if feels a little simpler.

128
00:06:17.345 --> 00:06:21.168
The base case is really, it feels more
understood, it does feel a bit cleaner.

129
00:06:21.168 --> 00:06:25.230
Iterative always tends to be
more messy than recursive.

130
00:06:25.230 --> 00:06:27.307
But recursive comes at a different cost,
right?

131
00:06:27.307 --> 00:06:30.367
We're calling functions, which remember,
we minimally have to set the return

132
00:06:30.367 --> 00:06:33.297
address, the return argument,
the parameters we're gonna be pushing in.

133
00:06:33.297 --> 00:06:36.249
Things have to happen, unless of course,
JavaScript inlines it.

134
00:06:36.249 --> 00:06:38.834
We don't know what actually
happens in JavaScript land, but

135
00:06:38.834 --> 00:06:40.833
we know something happens
in JavaScript land.

136
00:06:40.833 --> 00:06:42.413
So things happened.

137
00:06:42.413 --> 00:06:47.254
That's why I do tend to like the recursive
side more than the breadth first side.

138
00:06:47.254 --> 00:06:48.587
We have another one?

139
00:06:48.587 --> 00:06:51.421
&gt;&gt; Just Chad is mostly saying DFS, but

140
00:06:51.421 --> 00:06:55.960
they would like to see BFS
recursive as well and compare.

141
00:06:55.960 --> 00:06:59.673
&gt;&gt; You can't do a recursive, I mean,
could you do a recursive BFS?

142
00:06:59.673 --> 00:07:03.779
I'm not sure if you could do a recursive
BFS because you're using a stack in

143
00:07:03.779 --> 00:07:05.943
recursion and you're using a q in BFS.

144
00:07:05.943 --> 00:07:10.646
So I'm sure there's a way
to make that happen.

145
00:07:10.646 --> 00:07:12.611
If there's a will, there's always a way.

146
00:07:12.611 --> 00:07:16.597
I would have to play around with it for
a little bit and kind of,

147
00:07:16.597 --> 00:07:21.059
my first try may not be as lustrous,
but it would eventually happen.

148
00:07:21.059 --> 00:07:24.586
And so I'm sure we could make it happen,
but you just wouldn't ever do that.

149
00:07:24.586 --> 00:07:28.741
You can't do that because depth first or
using a stack preserves shape.

150
00:07:32.024 --> 00:07:35.801
So it goes down one side,
whereas you just can't do that with a q.

151
00:07:35.801 --> 00:07:37.280
q does not do that.

