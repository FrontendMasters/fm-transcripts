WEBVTT

1
00:00:00.000 --> 00:00:02.719
So let's talk about
the running time of this one,

2
00:00:02.719 --> 00:00:05.392
cuz it is actually
exceptionally complicated.

3
00:00:05.392 --> 00:00:08.328
The first time I walked through
the running time of this one,

4
00:00:08.328 --> 00:00:12.199
I was just like got it, went looked up on
the internet I was like, don't got it.

5
00:00:12.199 --> 00:00:13.909
And I had to undo it a couple times and

6
00:00:13.909 --> 00:00:16.816
really kind of critically think
about what happened there.

7
00:00:16.816 --> 00:00:21.861
So let's walk through the pseudocode
right now and kinda discuss what happens.

8
00:00:21.861 --> 00:00:25.301
So the first thing is we have to do
these operations right here, right?

9
00:00:25.301 --> 00:00:28.936
We have to create our seen array,
our previous array and our dist array,

10
00:00:28.936 --> 00:00:29.483
correct?

11
00:00:29.483 --> 00:00:34.419
Awesome, this obviously means
we have to do O(V), right?

12
00:00:34.419 --> 00:00:38.177
We have to create these
arrays that are V long, okay?

13
00:00:38.177 --> 00:00:39.732
Pretty straightforward here.

14
00:00:39.732 --> 00:00:42.262
Now, this is something
that's kind of interesting.

15
00:00:42.262 --> 00:00:48.086
In our case, we're gonna go through
worst case every single node,

16
00:00:48.086 --> 00:00:52.082
but what is the running
time of this function?

17
00:00:52.082 --> 00:00:55.164
Right, so this while loop is O(V), right?

18
00:00:55.164 --> 00:00:59.114
When we go through every single node once,
but

19
00:00:59.114 --> 00:01:05.009
what is the running time of this
function cuz we call it O(V) times.

20
00:01:05.009 --> 00:01:10.301
Well, we go through our entire distance
array, or we go through our entire

21
00:01:10.301 --> 00:01:15.341
seen array, which means that this
function is running time is O(V),

22
00:01:15.341 --> 00:01:20.562
which means this while loop checking
is gonna be O(V) squared, right?

23
00:01:20.562 --> 00:01:24.466
We've now just done something where
we're every single time we go to node,

24
00:01:24.466 --> 00:01:26.055
we check all other nodes once.

25
00:01:26.055 --> 00:01:27.122
That makes sense.

26
00:01:27.122 --> 00:01:28.434
The same thing with this one.

27
00:01:28.434 --> 00:01:33.980
This is also O(V) squared because
we're gonna do this get lowest

28
00:01:33.980 --> 00:01:40.318
unvisited check V amount of times and
its running time is v amount of checks,

29
00:01:40.318 --> 00:01:46.281
cuz it has to go through our entire
seen array or entire distance array.

30
00:01:46.281 --> 00:01:50.354
Now you know how I initially told
you in the beginning yesterday,

31
00:01:50.354 --> 00:01:54.056
that the easiest way to look at
runtime is just count loops,

32
00:01:54.056 --> 00:01:57.107
this is where that is just a complete lie,
okay?

33
00:01:57.107 --> 00:02:01.049
This is where I miscalculated distedge is
the first time cuz you'd probably go O.

34
00:02:01.049 --> 00:02:02.901
This is O(E), right?

35
00:02:02.901 --> 00:02:04.861
Well, look at that what happened?

36
00:02:04.861 --> 00:02:07.776
Right, you'd probably say this is O(E),
correct?

37
00:02:07.776 --> 00:02:09.831
Because it's going through every edge,
right?

38
00:02:09.831 --> 00:02:15.071
Then you say well if the while
loop is gonna execute O(V)

39
00:02:15.071 --> 00:02:21.201
times that means this should be
O(V) multiplied by E, correct?

40
00:02:21.201 --> 00:02:22.453
Incorrect, my goodness.

41
00:02:22.453 --> 00:02:23.823
Okay, so are you ready for

42
00:02:23.823 --> 00:02:27.012
the most mind blowing as part
about distedge shortest path?

43
00:02:27.012 --> 00:02:28.738
Yes, Yes, I'm so excited.

44
00:02:28.738 --> 00:02:33.748
Perfect, all right, let's just pretend
we have this very simple graph.

45
00:02:33.748 --> 00:02:35.530
They are gonna be undirected nodes.

46
00:02:35.530 --> 00:02:41.038
So in reality, they are the maximum
worst case for dicer, right?

47
00:02:41.038 --> 00:02:45.268
Cuz that means every single node
has a connection both ways.

48
00:02:45.268 --> 00:02:48.440
So if we start here and
we visit this node,

49
00:02:48.440 --> 00:02:52.713
we are gonna visit each one
of the edges once, correct?

50
00:02:52.713 --> 00:02:57.452
Then we go to another node we're gonna
visit each one of these edges once.

51
00:02:57.452 --> 00:03:01.331
Yes, then we're gonna go to the next node,
we'll visit each one of these edges once.

52
00:03:01.331 --> 00:03:04.749
Then we'll go to the lastly to this node,
which will visit each edge once.

53
00:03:04.749 --> 00:03:09.165
How many times did we check the edges?

54
00:03:09.165 --> 00:03:12.127
We checked it 2E, right,
we only went over 2E.

55
00:03:12.127 --> 00:03:14.163
We checked each edge twice.

56
00:03:14.163 --> 00:03:18.048
So it's actually 2E for the entire thing.

57
00:03:18.048 --> 00:03:22.038
So this four loop the reason why
it is that way is this four loop

58
00:03:22.038 --> 00:03:23.384
is not exhaustive.

59
00:03:23.384 --> 00:03:26.520
It doesn't go over every
edge in the graph.

60
00:03:26.520 --> 00:03:29.291
It goes over every edge that is connected.

61
00:03:29.291 --> 00:03:31.807
But if we use an adjacency matrix, and

62
00:03:31.807 --> 00:03:36.770
we had the check every single node we
would get that terrible running time.

63
00:03:36.770 --> 00:03:41.367
But since we have an adjacency list
we only check the nodes that were

64
00:03:41.367 --> 00:03:45.487
connected to 2, so
this becomes o(E) in total, right?

65
00:03:45.487 --> 00:03:47.829
That is what we're walking over, so

66
00:03:47.829 --> 00:03:53.131
that means our running time would look
something like O(V) squared + E, right?

67
00:03:53.131 --> 00:03:54.659
We're gonna do that.

68
00:03:54.659 --> 00:03:57.833
Lastly, this thing right
here is actually just O(1).

69
00:03:57.833 --> 00:03:59.946
So it's really fast,
we don't even have to think about it.

70
00:03:59.946 --> 00:04:02.692
Super duper fast, awesome, right?

71
00:04:02.692 --> 00:04:05.659
So that is our running time,
in the way we've made it.

72
00:04:05.659 --> 00:04:10.046
So now here kind of comes a big
culmination of the class.

73
00:04:10.046 --> 00:04:13.916
How can we improve the running
time of this to be better?

74
00:04:17.097 --> 00:04:20.104
Let me say that differently,

75
00:04:20.104 --> 00:04:25.041
we need the lowest distance
that has not been seen

76
00:04:27.895 --> 00:04:30.618
But again Maria, why don't I know?

77
00:04:30.618 --> 00:04:32.431
The answer is a minimum heap, right?

78
00:04:32.431 --> 00:04:36.103
If we had a minheap,
we would literally remove the node,

79
00:04:36.103 --> 00:04:40.020
which means we have seen it and
it can't be back inside of it.

80
00:04:40.020 --> 00:04:45.094
Therefore we don't need to see an array
because by the very state of the heap, it

81
00:04:45.094 --> 00:04:50.200
has been seen cuz we remove it and B it's
always the smallest node at that point.

82
00:04:50.200 --> 00:04:52.009
[SOUND] Right, that is awesome,

83
00:04:52.009 --> 00:04:54.764
which means that we do
need to do something here.

84
00:04:54.764 --> 00:04:59.186
And if you remember from earlier update,
was that function we didn't write,

85
00:04:59.186 --> 00:05:03.474
we'd actually have to call heap update,
which needs the use of map to O log or

86
00:05:03.474 --> 00:05:04.884
O(1), get the node.

87
00:05:04.884 --> 00:05:07.723
Then from there,
update it either heap are fining it up or

88
00:05:07.723 --> 00:05:11.054
heap are fining it down depending
on how the distance was changed.

89
00:05:11.054 --> 00:05:17.710
Yeah, yeah, which means that this
becomes a log V operation right here.

90
00:05:17.710 --> 00:05:24.077
This becomes a log V operation right
here and this becomes a log V operation

91
00:05:24.077 --> 00:05:29.742
right here which means that we're
going to do an E amount of log V.

92
00:05:29.742 --> 00:05:34.442
He's so our running time becomes log V
multiplied by V plus E which is much

93
00:05:34.442 --> 00:05:39.680
better than V squared so there we go we've
just done it we've just made something

94
00:05:39.680 --> 00:05:44.248
better by simply changing the data
structure that we were using Yeah?

95
00:05:44.248 --> 00:05:45.131
Everyone's excited?

96
00:05:45.131 --> 00:05:47.436
Okay, why do I feel like I'm
the only one excited about this?

97
00:05:47.436 --> 00:05:49.806
This blew my mind, right,
this is fantastic.

98
00:05:49.806 --> 00:05:51.941
All right,
I thought this was incredible, so

99
00:05:51.941 --> 00:05:55.556
this was one of my favorite kind of
understandings of data structures is that,

100
00:05:55.556 --> 00:05:57.835
A, we broke down a really
intense running time.

101
00:05:57.835 --> 00:06:00.301
This is a running time that's
non-trivial to understand.

102
00:06:00.301 --> 00:06:03.253
By simply just drawing
out what's happening,

103
00:06:03.253 --> 00:06:07.402
we see right away that it's not V times E,
it's actually V plus E.

104
00:06:07.402 --> 00:06:11.421
It becomes more obvious because
we only check the edges once.

105
00:06:11.421 --> 00:06:16.546
All right, fantastic, I'm excited,
or is everyone else excited?

106
00:06:16.546 --> 00:06:17.987
Okay, there's some excitement.

107
00:06:17.987 --> 00:06:19.318
We got some excitement going, Kareem,

108
00:06:19.318 --> 00:06:20.973
we're gonna need to see
some excitement levels.

109
00:06:20.973 --> 00:06:23.816
I need to see it go north by at least two.

110
00:06:23.816 --> 00:06:27.957
All right, two units of excitement.

111
00:06:27.957 --> 00:06:29.914
All right, let's see.

112
00:06:29.914 --> 00:06:34.139
It's probably, this dextrose is usually
the first algorithm you usually learn

113
00:06:34.139 --> 00:06:37.010
after breadth first search and
depth of first Search.

114
00:06:37.010 --> 00:06:43.320
Apparently, I got so excited I'm going
out of order of my notes and there we go.

115
00:06:43.320 --> 00:06:46.911
We are now kind of done with the graph
section I kept the graph section low cuz

116
00:06:46.911 --> 00:06:49.479
as you can see it gets
complicated super duper quick.

117
00:06:49.479 --> 00:06:52.792
And we did probably the easiest
algorithm on graphs as this.

118
00:06:52.792 --> 00:06:57.395
We did not do min or max flows ,we
didn't do strongly connected components

119
00:06:57.395 --> 00:07:02.143
topological sort any of the fun stuff
that can exist within the graph realm but

120
00:07:02.143 --> 00:07:05.160
it was still pretty radical,
I really liked it.

121
00:07:05.160 --> 00:07:07.554
I'm super pumped,
I'm pumped out of my mind.

122
00:07:07.554 --> 00:07:12.189
All right, let's see if there is a part
two we will cover some more significantly

123
00:07:12.189 --> 00:07:15.200
more complicated fun graphs,
any questions here?

124
00:07:15.200 --> 00:07:17.741
Do we have any questions here?

125
00:07:17.741 --> 00:07:20.991
&gt;&gt; Are there a lot of graph questions and
interviews?

126
00:07:20.991 --> 00:07:22.702
&gt;&gt; Often they're gonna
break down like here.

127
00:07:22.702 --> 00:07:25.300
Here's a good graph question
that I've seen before.

128
00:07:25.300 --> 00:07:28.294
And this is one that I have
received in an interview.

129
00:07:28.294 --> 00:07:33.554
All right,
let's pretend that we have a 2D array

130
00:07:33.554 --> 00:07:38.198
in which is filled with 1s and 0s, right?

131
00:07:38.198 --> 00:07:44.865
0, 1, 0, 0, 1, 1, 1 1, 0, and
what I want you to tell me in here,

132
00:07:44.865 --> 00:07:49.196
is I want you to tell me
how many islands there are.

133
00:07:49.196 --> 00:07:53.852
Island is anything in which has a 1
that's connected in any of the four o

134
00:07:53.852 --> 00:07:56.271
cordinal direction to another one.

135
00:07:56.271 --> 00:07:58.426
So, any contiguous set of 1s.

136
00:07:58.426 --> 00:08:01.794
So, that'll be one island,
there'd be two islands,

137
00:08:01.794 --> 00:08:06.183
the secret here is you use a breadth
first or really a depth first search.

138
00:08:06.183 --> 00:08:07.974
You can kind of choose
which way you want to go.

139
00:08:07.974 --> 00:08:12.694
You just simply start right there, mark
this thing as seen, increment how many

140
00:08:12.694 --> 00:08:17.773
island you've seen add all of these in
here and say, hey, are any of you guys 0s?

141
00:08:17.773 --> 00:08:19.687
None of you're zeros, I'm done looking.

142
00:08:19.687 --> 00:08:24.476
Keep scanning till you hit the next one,
we have another island we found,

143
00:08:24.476 --> 00:08:28.503
mark this a 0 scan, right,
you scan in all four directions.

144
00:08:28.503 --> 00:08:35.027
Off the map, off the map, here's another
1,0, going for directions, right?

145
00:08:35.027 --> 00:08:38.561
This is a 0 market this as 0 going
four directions, blah, blah, blah,

146
00:08:38.561 --> 00:08:40.616
going four directions, and there you go.

147
00:08:40.616 --> 00:08:42.511
Then you eventually make
it to the end of the math.

148
00:08:42.511 --> 00:08:47.176
And boom, we just got ourselves done
counting the amount of islands we have

149
00:08:47.176 --> 00:08:49.037
seen in a graph of 0s and 1s.

150
00:08:49.037 --> 00:08:50.512
See graphs, graphs are great.

151
00:08:50.512 --> 00:08:51.866
It's just a depth first search.

152
00:08:51.866 --> 00:08:52.899
That's all it is.

153
00:08:52.899 --> 00:08:57.783
It's just applying a small technique to
a depth first search when I heard this

154
00:08:57.783 --> 00:09:01.313
question though,
even though I knew all these things,

155
00:09:01.313 --> 00:09:05.236
my very first thing I thought was,
no, I can't do this.

156
00:09:05.236 --> 00:09:06.540
And then it turns out
it was really simple.

157
00:09:06.540 --> 00:09:09.564
I just had to talk myself through it,
went through all the data structures I

158
00:09:09.564 --> 00:09:12.636
understood and realized that a simple
depth for search will get me to all of it

159
00:09:12.636 --> 00:09:14.847
or breath for search,
whichever one you wanted to do.

160
00:09:14.847 --> 00:09:17.700
And I could kind of walk through, cool?

