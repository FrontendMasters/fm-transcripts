WEBVTT

1
00:00:00.000 --> 00:00:02.557
So let's open back up our Kata machine.

2
00:00:02.557 --> 00:00:05.806
Let's navigate down to
compare binary trees.

3
00:00:05.806 --> 00:00:08.190
Again, we're doing a recursive search.

4
00:00:08.190 --> 00:00:10.381
So what have I told you multiple times?

5
00:00:10.381 --> 00:00:12.076
Probably create your own function.

6
00:00:12.076 --> 00:00:13.666
But let's see how this one looks.

7
00:00:13.666 --> 00:00:14.856
[SOUND] The signature,

8
00:00:14.856 --> 00:00:18.558
this one actually matches up with
what you'd want to do in recursion.

9
00:00:18.558 --> 00:00:19.803
So I'm just gonna keep this.

10
00:00:19.803 --> 00:00:22.738
I know I'm breaking from tradition,
but this makes sense.

11
00:00:22.738 --> 00:00:24.865
So let's look at our signature for
a second.

12
00:00:24.865 --> 00:00:29.120
I kinda gave away the game a bit here,
so just be okay with that.

13
00:00:29.120 --> 00:00:30.365
Our signature is a.

14
00:00:30.365 --> 00:00:33.229
It can either be a BinaryNode or null.

15
00:00:33.229 --> 00:00:36.279
b can either be a BinaryNode or null.

16
00:00:36.279 --> 00:00:39.979
So what's our base case?

17
00:00:39.979 --> 00:00:41.995
Well, there's actually a few of them.

18
00:00:41.995 --> 00:00:43.399
There's actually a few base cases.

19
00:00:43.399 --> 00:00:45.946
So what do you think
base case number 1 is?

20
00:00:45.946 --> 00:00:51.437
How do we know at this point we
are either equivalent or not equivalent?

21
00:00:54.445 --> 00:00:59.680
The easiest one to think
of is if a equals null,

22
00:00:59.680 --> 00:01:02.779
and b equals null, right?

23
00:01:02.779 --> 00:01:06.755
If they're both null,
we are currently equal, right?

24
00:01:06.755 --> 00:01:08.228
This is a good place to be.

25
00:01:08.228 --> 00:01:12.151
At this point with inter traversal,
we are equal and we can say that.

26
00:01:12.151 --> 00:01:14.272
We don't have to solve for
the entire tree.

27
00:01:14.272 --> 00:01:16.788
That's what all of
recursion combined is for.

28
00:01:16.788 --> 00:01:21.473
But at this one moment in time, we can
say, hey, if this is what you gave me,

29
00:01:21.473 --> 00:01:22.663
that's correct.

30
00:01:22.663 --> 00:01:24.151
And that's really what the base case is.

31
00:01:24.151 --> 00:01:28.550
It's solving the simple problem, such
that the entire recursion becomes simple.

32
00:01:28.550 --> 00:01:31.460
All right, next base case.

33
00:01:31.460 --> 00:01:35.975
If a equals null, or b equals null, right?

34
00:01:35.975 --> 00:01:40.505
If just one of them is null, we've now
hit a point where hey, you are no longer

35
00:01:40.505 --> 00:01:44.788
equal because one of you are null and
the other one's hexadecimal 45.

36
00:01:44.788 --> 00:01:49.530
That's completely incorrect,
therefore, return false.

37
00:01:49.530 --> 00:01:51.746
Awesome, and there's one more base case.

38
00:01:51.746 --> 00:01:56.011
What's the last base case?

39
00:01:56.011 --> 00:01:58.741
&gt;&gt; Just one is true or both are true, no.

40
00:01:58.741 --> 00:02:01.286
&gt;&gt; a.value equals b.value.

41
00:02:01.286 --> 00:02:02.370
&gt;&gt; Bill, that's right.

42
00:02:02.370 --> 00:02:09.090
If a.value does not equal b.value,
I know you said it differently but

43
00:02:09.090 --> 00:02:13.798
you got the same answer,
then it's not the same.

44
00:02:13.798 --> 00:02:15.498
Value-wise, we are not the same.

45
00:02:15.498 --> 00:02:18.030
We are false in that moment of time.

46
00:02:18.030 --> 00:02:21.271
So now comes the last part,
which is always the trickiest part.

47
00:02:21.271 --> 00:02:25.752
Which is, how do we do this for
the entire tree now?

48
00:02:25.752 --> 00:02:28.764
Well, the easiest way to do that,
of course,

49
00:02:28.764 --> 00:02:32.490
is we are gonna return compare
with a.left and b.left.

50
00:02:32.490 --> 00:02:33.831
We don't need to look at what they're.

51
00:02:33.831 --> 00:02:36.323
We don't need to check if they're nulls or
anything,

52
00:02:36.323 --> 00:02:38.009
that's what our base cases are for.

53
00:02:38.009 --> 00:02:44.416
And compare a.right,
oopsies, with b.right.

54
00:02:44.416 --> 00:02:47.431
So long as we only hit the return true,

55
00:02:47.431 --> 00:02:52.533
it will keep bubbling back up as true,
all the way to that point.

56
00:02:52.533 --> 00:02:57.101
Cuz remember, if it's true at this point,
and my left subtree and

57
00:02:57.101 --> 00:03:01.681
my right subtree are true also,
then that part of the tree is true.

58
00:03:01.681 --> 00:03:04.925
All right, so let's extend this
out just a little bit, right?

59
00:03:04.925 --> 00:03:09.695
So I'm gonna do 7 and 9,
and let's do 7 and 9, and

60
00:03:09.695 --> 00:03:14.055
then let's do one more,
that's like say 14.

61
00:03:14.055 --> 00:03:16.787
Okay, so we go through here.

62
00:03:16.787 --> 00:03:21.069
And value, or yeah, the value is equal.

63
00:03:21.069 --> 00:03:24.285
So right now, we're not sure
if we are true or false yet.

64
00:03:24.285 --> 00:03:26.999
We just know that we are passing
all of our base cases and

65
00:03:26.999 --> 00:03:28.417
we need it to check the rest.

66
00:03:28.417 --> 00:03:32.061
So we're gonna go down to this
subtree right here, right?

67
00:03:32.061 --> 00:03:33.393
This is just a subtree.

68
00:03:33.393 --> 00:03:36.486
Any node is in itself a tree.

69
00:03:36.486 --> 00:03:41.000
If you think about it, because it is
a point in which has children, and so

70
00:03:41.000 --> 00:03:43.742
any point of your tree
is just another tree.

71
00:03:43.742 --> 00:03:45.412
That's what makes this so useful.

72
00:03:45.412 --> 00:03:47.514
So we're right here,
we check this subtree.

73
00:03:47.514 --> 00:03:51.422
Just by visual inspection, you can see
they're both the same by shape and

74
00:03:51.422 --> 00:03:51.996
by value.

75
00:03:51.996 --> 00:03:55.236
So this entire subtree returns true,
returns true,

76
00:03:55.236 --> 00:03:58.764
which this thing, ampersand,
checks each one of these.

77
00:03:58.764 --> 00:04:01.326
By the way,
did you see that first tri ampersand draw?

78
00:04:01.326 --> 00:04:02.760
Very, very hard to do.

79
00:04:02.760 --> 00:04:07.195
So long as these both return true,
we should be good to go, right?

80
00:04:07.195 --> 00:04:09.337
Right, so
we do the same thing on this side.

81
00:04:09.337 --> 00:04:11.856
We need to see, is this subtree correct?

82
00:04:11.856 --> 00:04:15.469
Which ultimately leads,
is this subtree the same as the other one?

83
00:04:15.469 --> 00:04:19.471
So when we look at this,
we are going to return false and

84
00:04:19.471 --> 00:04:22.168
true if we were to execute them both.

85
00:04:22.168 --> 00:04:26.309
And if we try to ampersand this thing,
man, we can't ampersand it, right?

86
00:04:26.309 --> 00:04:29.441
We cannot logically add those two,
what is it?

87
00:04:29.441 --> 00:04:32.999
Boolean, yeah,
logically combine those two together.

88
00:04:32.999 --> 00:04:34.284
It becomes false.

89
00:04:34.284 --> 00:04:37.683
So therefore, this is false,
though this is true.

90
00:04:37.683 --> 00:04:41.247
And again,
we apply the same recursive technique.

91
00:04:41.247 --> 00:04:42.324
Are those two together?

92
00:04:42.324 --> 00:04:44.592
We multiply true with false,
it becomes false.

93
00:04:44.592 --> 00:04:46.235
It's not good, therefore,

94
00:04:46.235 --> 00:04:49.795
the whole thing is false because
one subtree is false within it.

95
00:04:49.795 --> 00:04:54.539
So that's kind of working back up logic
of just combining those trues and falses.

96
00:04:54.539 --> 00:04:57.230
And you can see that right here.

97
00:04:57.230 --> 00:05:02.316
So each spot combine our left
subtree with our right subtree.

98
00:05:02.316 --> 00:05:04.790
Long as they're both true,
we're true also.

99
00:05:04.790 --> 00:05:07.590
And that makes sense because that means,

100
00:05:07.590 --> 00:05:11.759
this case was hit all the way to the end,
and that makes sense.

101
00:05:11.759 --> 00:05:16.449
That's the only base case that can ever
be hit is we just have to keep on hitting

102
00:05:16.449 --> 00:05:17.974
nulls, and that's it.

103
00:05:17.974 --> 00:05:24.047
Cuz the moment we hit something like this,
that whole subtree becomes invalid.

104
00:05:24.047 --> 00:05:24.793
Does that make sense?

105
00:05:24.793 --> 00:05:27.201
Which eventually makes
the entire tree invalid.

106
00:05:29.635 --> 00:05:30.564
Beautiful, awesome.

107
00:05:30.564 --> 00:05:35.634
All right, is there any questions now that
I've potentially shoddily explained it?

108
00:05:35.634 --> 00:05:38.787
I tried the hardest I can, very hard,
to kinda draw out recursion.

109
00:05:38.787 --> 00:05:47.229
It's a topic that's best left to the
imagination, Or a really large whiteboard.

110
00:05:47.229 --> 00:05:50.554
I think a really large
whiteboard could have done it.

111
00:05:50.554 --> 00:05:53.516
And you're probably saying, well, you
have a really large editor technically.

112
00:05:53.516 --> 00:05:57.058
I could have shifted around, but
it's just hard, it's just hard.

113
00:05:57.058 --> 00:05:59.779
All right, why do we have
both of these if statements?

114
00:05:59.779 --> 00:06:02.145
Why do we first check to see
if they're both null and

115
00:06:02.145 --> 00:06:03.972
then check to see if one of them is null?

116
00:06:03.972 --> 00:06:08.367
So the first check is to check,
have we made it to a point in both

117
00:06:08.367 --> 00:06:12.268
subtrees in which we both
cannot recurse any further?

118
00:06:12.268 --> 00:06:16.260
That's that first check,
are we both going to a null node together?

119
00:06:16.260 --> 00:06:19.776
That means structurally,
we are the exact same,

120
00:06:19.776 --> 00:06:22.547
cuz we both arrived to a null together.

121
00:06:22.547 --> 00:06:26.292
What this one says is that we're
structurally not the same.

122
00:06:26.292 --> 00:06:30.142
Because if one of us is null and
the other one is a node,

123
00:06:30.142 --> 00:06:34.948
we have traversed to the same point and
have different structure.

124
00:06:34.948 --> 00:06:35.915
Hopefully that makes sense?

125
00:06:35.915 --> 00:06:38.623
In JavaScript, yes, we could have used

126
00:06:38.623 --> 00:06:43.095
the question mark operator just to
see if the two values are equal.

127
00:06:43.095 --> 00:06:45.117
We would have been able
to condense this step.

128
00:06:45.117 --> 00:06:51.358
But I wanted to make it really obvious
that this is a structural check, right?

129
00:06:51.358 --> 00:06:53.710
This is a structural check.

130
00:06:53.710 --> 00:06:57.561
This is a value check, right?

131
00:06:57.561 --> 00:07:01.531
I wanted to kind of break those out
explicitly because they are truly

132
00:07:01.531 --> 00:07:02.306
different.

133
00:07:02.306 --> 00:07:07.006
And yes, as I said before, for those that
don't understand what I was trying to say,

134
00:07:07.006 --> 00:07:10.989
if we just simply deleted that out,
that check technically works out for

135
00:07:10.989 --> 00:07:14.276
both value and structural
checking at the exact same time.

136
00:07:17.916 --> 00:07:21.808
Awesome, you guys are great.

137
00:07:21.808 --> 00:07:24.228
Great, great question.

138
00:07:24.228 --> 00:07:26.011
I think that may have made
a better explanation.

139
00:07:26.011 --> 00:07:28.593
Okay, let's keep on going.

140
00:07:28.593 --> 00:07:30.911
I'm excited, you're excited,
we're all excited.

141
00:07:30.911 --> 00:07:35.441
So now we're gonna go to a specific
version of a binary tree

142
00:07:35.441 --> 00:07:37.761
called a binary search tree.

143
00:07:37.761 --> 00:07:39.578
It's just classic,
it's just absolutely classic.

144
00:07:39.578 --> 00:07:43.199
One of the books I recommended yesterday,
which I'll bring those up for

145
00:07:43.199 --> 00:07:44.039
a quick second.

146
00:07:44.039 --> 00:07:45.355
Go right to here.

147
00:07:45.355 --> 00:07:47.705
I'm using a mouse,
please don't laugh at me.

148
00:07:47.705 --> 00:07:48.995
Don't laugh at me.

149
00:07:48.995 --> 00:07:50.900
This one right here, the second one.

150
00:07:50.900 --> 00:07:53.395
This one just jumps right
into binary search trees.

151
00:07:53.395 --> 00:07:56.531
I don't believe it even pitstops
on trees really at all.

152
00:07:56.531 --> 00:07:58.473
But you can check that one out.

153
00:07:58.473 --> 00:08:00.903
It has a great explanation
of a binary search tree.

154
00:08:00.903 --> 00:08:03.510
Also, plenty of good YouTube
content on this as well.

155
00:08:03.510 --> 00:08:04.900
I just wanted to throw that out there.

