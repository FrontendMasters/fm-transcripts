WEBVTT

1
00:00:00.040 --> 00:00:02.898
We're back in, we just got done
doing a binary search tree.

2
00:00:02.898 --> 00:00:06.654
We did the actual finding of it,
we explained how insertion and deletion,

3
00:00:06.654 --> 00:00:08.507
some of the problems that go with it.

4
00:00:08.507 --> 00:00:11.702
We're back in, we're feeling ready,
we're very, very, very excited.

5
00:00:11.702 --> 00:00:14.100
At least, I am super excited.

6
00:00:14.100 --> 00:00:16.594
And then I forgot to do this,
we already talked about that actually,

7
00:00:16.594 --> 00:00:17.420
we need to do all that.

8
00:00:17.420 --> 00:00:19.141
So we're gonna move on
to our next structure.

9
00:00:19.141 --> 00:00:22.508
No, we're not gonna be doing any bouncing
of a tree cuz of course, like I said,

10
00:00:22.508 --> 00:00:23.784
it's a very long operation.

11
00:00:23.784 --> 00:00:27.205
And I think that you if we were to
do a follow up course with this,

12
00:00:27.205 --> 00:00:30.177
we'd probably cover things
like tree rotations, and

13
00:00:30.177 --> 00:00:32.773
other fun trees that
we're not covering here.

14
00:00:32.773 --> 00:00:35.398
So I always make this joke,
if you just say the word priority queue,

15
00:00:35.398 --> 00:00:36.839
I'm gonna hire you in an interview.

16
00:00:36.839 --> 00:00:40.531
I just wanna hear you say that phrase
because those things are useful.

17
00:00:40.531 --> 00:00:44.387
I know it's a joke, but it's not a joke,
but it's definitely not really a joke.

18
00:00:44.387 --> 00:00:46.330
Is that really a joke?

19
00:00:46.330 --> 00:00:49.998
And so
this is a very important data structure,

20
00:00:49.998 --> 00:00:54.596
it's often referred to as a heap or
binary priority queue.

21
00:00:54.596 --> 00:00:58.919
And a simple way to put this is that it's
a binary tree in which every child or

22
00:00:58.919 --> 00:01:02.764
grandchild is smaller,
that's called the max heap, or larger,

23
00:01:02.764 --> 00:01:05.328
that's a min heap, than the current node.

24
00:01:05.328 --> 00:01:08.768
Meaning that whenever a node is added,
we must adjust the tree.

25
00:01:08.768 --> 00:01:11.638
And whenever a node is deleted,
we must adjust the tree.

26
00:01:11.638 --> 00:01:15.239
You don't traverse this tree,
though we could traverse the tree,

27
00:01:15.239 --> 00:01:16.889
you don't traverse the tree.

28
00:01:16.889 --> 00:01:20.825
And it'd be actually extremely simple to
traverse it in breadth first ordering.

29
00:01:20.825 --> 00:01:24.217
So you don't even need a data
structure at that point to do it,

30
00:01:24.217 --> 00:01:25.862
it's already in that order.

31
00:01:25.862 --> 00:01:28.428
So let's first go over
what a heap really is.

32
00:01:28.428 --> 00:01:32.982
So I'm gonna restate it, but
this time with sweet circles and arrows.

33
00:01:32.982 --> 00:01:37.812
So I'm just gonna put a value,
50, let's start with a min heap.

34
00:01:37.812 --> 00:01:43.015
So a min heap means that the top
value must be the smallest.

35
00:01:43.015 --> 00:01:45.698
Obviously, if you have duplicates,
say we had more 50s,

36
00:01:45.698 --> 00:01:48.023
they could be children of 50,
that's just fine.

37
00:01:48.023 --> 00:01:51.200
But that means both of
these must be larger, so

38
00:01:51.200 --> 00:01:55.933
I can put something like 71,
I can put something here like 100.

39
00:01:55.933 --> 00:01:59.365
Now here's where the ordering
gets a little bit goofy.

40
00:01:59.365 --> 00:02:03.186
I can have children here,
which they have to be larger than 71,

41
00:02:03.186 --> 00:02:07.229
so we can put it say as 101, and
we can put this one as 80, right?

42
00:02:07.229 --> 00:02:10.903
Now, you're probably thinking, well,
shouldn't that be right there?

43
00:02:10.903 --> 00:02:15.139
Well, no, it shouldn't be right there
cuz heaps maintain a weak ordering,

44
00:02:15.139 --> 00:02:19.256
meaning that they are ordered, but
it's not perfectly ordered, right?

45
00:02:19.256 --> 00:02:24.087
It's not in order of anything specific,
but there is a rule at every single point.

46
00:02:24.087 --> 00:02:27.653
And so, if we were to do some right here,
we could have 200, and

47
00:02:27.653 --> 00:02:29.590
we could also have 101, right?

48
00:02:29.590 --> 00:02:34.042
And it is fine, just as long as it
keeps on getting larger as we go.

49
00:02:34.042 --> 00:02:36.402
And so,
what this is called is the heap condition.

50
00:02:36.402 --> 00:02:40.009
The heap condition effectively states,
if it is a min heap,

51
00:02:40.009 --> 00:02:44.130
that every node below me must be
larger than or technically equal to.

52
00:02:44.130 --> 00:02:48.687
If it's a max heap, it states that every
node below me must be smaller than or

53
00:02:48.687 --> 00:02:49.338
equal to.

54
00:02:49.338 --> 00:02:52.718
Cuz obviously, a max heap means
the maximum item is the root,

55
00:02:52.718 --> 00:02:55.192
a min heap means the minimum
item is the root.

56
00:02:55.192 --> 00:02:58.534
And so, this means if we needed
the smallest item out of this tree,

57
00:02:58.534 --> 00:03:02.010
it's really simple, it's right there,
it's at the tippity top.

58
00:03:02.010 --> 00:03:05.783
We could grab that item, or
we could pick it at least at over 1.

59
00:03:05.783 --> 00:03:10.087
So it's super super fast to be able to
inspect and say, that's the smallest item.

60
00:03:10.087 --> 00:03:13.625
Obviously, we couldn't get the median very
easily right now because we don't actually

61
00:03:13.625 --> 00:03:14.532
have that available.

62
00:03:14.532 --> 00:03:17.165
There is a trick to get
the median if you use two heaps.

63
00:03:17.165 --> 00:03:19.635
We're not gonna do that, it's a stupid
Google interview question and

64
00:03:19.635 --> 00:03:22.489
doesn't really show you anything other
than you can say the word priority queue.

65
00:03:22.489 --> 00:03:24.928
All right, so now that we have that,

66
00:03:24.928 --> 00:03:28.641
let's think about how we would
add a node to the stream.

67
00:03:28.641 --> 00:03:35.323
Now one condition I didn't say is,
is it always complete like this?

68
00:03:35.323 --> 00:03:39.584
Yes, a binary tree or heap is usually
full or complete tree, meaning

69
00:03:39.584 --> 00:03:44.516
that it's always adding from left to
right, and it never has any empty spaces.

70
00:03:44.516 --> 00:03:48.220
That would never exist in a heap because
that is an empty space, meaning,

71
00:03:48.220 --> 00:03:51.653
there is nothing on the left-hand side,
that just does not exist.

72
00:03:51.653 --> 00:03:56.868
So every single node is filled in from the
left to the right, always tree level, and

73
00:03:56.868 --> 00:04:02.253
it's always complete at each level,
right, there's no gaps, there's no holes.

74
00:04:02.253 --> 00:04:04.291
All right, so now that we did that,
we can kind of go on.

75
00:04:04.291 --> 00:04:06.702
So how would we add a new node?

76
00:04:06.702 --> 00:04:11.072
Well, the simplest way to put it is that
we go to the final spot in our tree, and

77
00:04:11.072 --> 00:04:12.032
we add the node.

78
00:04:12.032 --> 00:04:15.560
So let's say this node value is 3.

79
00:04:15.560 --> 00:04:19.537
All right, we've added 3,
is our heap condition ordered?

80
00:04:22.634 --> 00:04:26.478
To min heap, and that's definitely
really small, so the answer is no,

81
00:04:26.478 --> 00:04:27.621
of course it's not.

82
00:04:27.621 --> 00:04:28.450
So what do we do?

83
00:04:28.450 --> 00:04:33.397
Well, we just have to bubble up,
we say hey, am I smaller than my parent?

84
00:04:33.397 --> 00:04:37.154
I am, okay, so let's swap us.

85
00:04:37.154 --> 00:04:39.912
This becomes 101, this becomes 3.

86
00:04:39.912 --> 00:04:42.708
We do it again,
am I smaller than my parent?

87
00:04:42.708 --> 00:04:47.041
I am, so this becomes 3, this becomes 71.

88
00:04:47.041 --> 00:04:48.490
Am I smaller than my parents?

89
00:04:48.490 --> 00:04:49.439
Yes, I am.

90
00:04:49.439 --> 00:04:53.309
Now the root becomes 3 and
this one becomes 50.

91
00:04:53.309 --> 00:04:56.621
Is our heap now correct?

92
00:04:56.621 --> 00:04:58.043
Yes, it is.

93
00:04:58.043 --> 00:05:02.391
And we can do this again,
we can simply add to the next spot and

94
00:05:02.391 --> 00:05:04.707
do the same bubbling up as we go.

95
00:05:04.707 --> 00:05:06.463
Let's just say we added 200.

96
00:05:06.463 --> 00:05:09.559
And so we don't have to do any
bubbling at all, we're good,

97
00:05:09.559 --> 00:05:13.101
we're larger than our parents, so
therefore, we do not bubble up.

98
00:05:13.101 --> 00:05:15.836
Awesome, but what about deleting?

99
00:05:15.836 --> 00:05:17.999
Deleting is, we do have one question.

100
00:05:17.999 --> 00:05:21.873
&gt;&gt; Sorry, is this a doubly
linked list implicitly then?

101
00:05:21.873 --> 00:05:25.727
Or how would you establish
the relationship between 100 and

102
00:05:25.727 --> 00:05:26.824
the new red node?

103
00:05:26.824 --> 00:05:30.955
&gt;&gt; So the question was is this
a doubly linked list implicitly?

104
00:05:30.955 --> 00:05:31.629
Or how's it?

105
00:05:31.629 --> 00:05:32.298
Or what's happening?

106
00:05:32.298 --> 00:05:34.822
How do you establish that
parent child relationship?

107
00:05:34.822 --> 00:05:38.073
The answer is sort of.

108
00:05:38.073 --> 00:05:41.940
I'll show you here in a moment,
we'll get there cuz that part is just,

109
00:05:41.940 --> 00:05:43.753
[SOUND] right, it's fantastic.

110
00:05:43.753 --> 00:05:47.978
So it's gonna use a data structure we've
already created as our backing data

111
00:05:47.978 --> 00:05:51.490
structure, we only just simply
understand it in a certain way.

112
00:05:51.490 --> 00:05:52.875
It's beautiful.

113
00:05:52.875 --> 00:05:54.550
All right, so how do we delete?

114
00:05:54.550 --> 00:05:59.621
We have 3 at the top, we want our
most minimum item out of this heap.

115
00:05:59.621 --> 00:06:00.771
Well, let's go like this.

116
00:06:00.771 --> 00:06:05.561
We now remove 3, we're gonna return 3, but
now we have a hole in our tree, right?

117
00:06:05.561 --> 00:06:09.080
The top node is empty, so what do we do?

118
00:06:09.080 --> 00:06:13.628
Well, we take our very
last node in the tree,

119
00:06:13.628 --> 00:06:18.077
we delete that out, and
we put it at the top.

120
00:06:18.077 --> 00:06:21.696
Now, we need to heapify down, right?

121
00:06:21.696 --> 00:06:23.976
So, we bubbled it up or heapify up,

122
00:06:23.976 --> 00:06:27.855
now we need to heapify down to
put it back into a correct spot.

123
00:06:27.855 --> 00:06:29.102
So, what do we do?

124
00:06:29.102 --> 00:06:31.379
Well, since we're using a min heap,

125
00:06:31.379 --> 00:06:36.306
we're gonna wanna take the minimum of
the two children and compare against that.

126
00:06:36.306 --> 00:06:38.030
So what's smaller, 50 or 100?

127
00:06:38.030 --> 00:06:40.397
Clearly, 50 is smaller than 100.

128
00:06:40.397 --> 00:06:45.697
So is 200 greater than
the smallest of our two children?

129
00:06:45.697 --> 00:06:46.509
Yes, it is.

130
00:06:46.509 --> 00:06:47.597
So let's swap.

131
00:06:47.597 --> 00:06:51.654
50 takes its rightful place as
head of the queue, 200 goes here.

132
00:06:51.654 --> 00:06:52.787
We do it again.

133
00:06:52.787 --> 00:06:58.720
We take the smallest of our two ,which
is 71 or 81, it's 71, so we do it again.

134
00:06:58.720 --> 00:06:59.432
So let's do that.

135
00:06:59.432 --> 00:07:02.255
So is this thing larger?

136
00:07:02.255 --> 00:07:04.328
Yes, it is larger, so swap.

137
00:07:04.328 --> 00:07:09.414
71 makes it all the way up here and
200 goes right here.

138
00:07:09.414 --> 00:07:13.694
Again, we do one last time, and
of course 200 and 101 will be swap.

139
00:07:13.694 --> 00:07:17.090
I'm out of room at this point,
and this becomes 200.

140
00:07:17.090 --> 00:07:21.912
Now notice that we still maintain that
property where we fill things in from

141
00:07:21.912 --> 00:07:26.826
left to right, there is no gaps and
our heap condition has been maintained.

142
00:07:26.826 --> 00:07:32.854
Every node that is below any other
node must be larger than or equal to.

143
00:07:32.854 --> 00:07:34.383
All right, that's pretty fancy.
So now hopefully,

144
00:07:34.383 --> 00:07:38.630
if you've been following along thus far,
you're probably thinking,

145
00:07:38.630 --> 00:07:42.685
that sounds great now, but
how the hell do you get this node, right?

146
00:07:42.685 --> 00:07:47.231
I'd have to traverse my tree to know where
the next node needs to be added, right?

147
00:07:47.231 --> 00:07:51.486
It would actually be really, really hard
to know that answer given how we built

148
00:07:51.486 --> 00:07:55.304
trees thus far, which is like a node
based data structure, correct?

149
00:07:55.304 --> 00:07:57.659
Yeah, it would be really, really hard.

150
00:07:57.659 --> 00:07:58.702
So let's not do that.

151
00:07:58.702 --> 00:07:59.659
Let's not do that at all.

152
00:07:59.659 --> 00:08:03.305
We need to kind of reimagine
how we can store a tree.

153
00:08:03.305 --> 00:08:05.924
This is reimagining by the way, and
that's the light bulb going off.

154
00:08:05.924 --> 00:08:07.423
[LAUGH] All right, fantastic.

155
00:08:07.423 --> 00:08:12.119
So let's put an index to
each one of our nodes.

156
00:08:12.119 --> 00:08:16.700
So this one is 0, 1,

157
00:08:16.700 --> 00:08:21.534
2, 3, 4, 5, 6.

158
00:08:21.534 --> 00:08:25.085
Okay, do we see anything going on here?

159
00:08:25.085 --> 00:08:26.606
Do we see anything?

160
00:08:26.606 --> 00:08:27.490
Why start at 0?

161
00:08:27.490 --> 00:08:29.979
Wow, that sounds a lot
like an array prime,

162
00:08:29.979 --> 00:08:33.022
that's because it could very
well be an array prime.

163
00:08:33.022 --> 00:08:34.403
So let's think about this.

164
00:08:34.403 --> 00:08:40.972
If we could store this in an array, then
50 could just be in the 0 position, right?

165
00:08:40.972 --> 00:08:46.104
Then the next two children which is 71,
and what's the other side?

166
00:08:46.104 --> 00:08:48.741
100, this side, what is that one?

167
00:08:48.741 --> 00:08:53.456
101, 80, 200, no,

168
00:08:53.456 --> 00:08:56.454
running out of space.

169
00:08:56.454 --> 00:09:02.499
200, 101, and then I think the last one,
which I forgot to put a number by,

170
00:09:02.499 --> 00:09:06.633
which would be 7,
would be right here, 200 again.

171
00:09:06.633 --> 00:09:08.045
So, look at that.

172
00:09:08.045 --> 00:09:12.605
0, 1, 2, 3, 4, 5, 6, 7,

173
00:09:12.605 --> 00:09:16.319
7 for 200, 7 for 200.

174
00:09:16.319 --> 00:09:20.006
That worked out, we were able to
put it correctly into an array.

175
00:09:20.006 --> 00:09:22.304
&gt;&gt; This would be implemented in an array?

176
00:09:22.304 --> 00:09:24.013
&gt;&gt; This would be implemented in an array.

177
00:09:24.013 --> 00:09:28.013
So we'll technically could
implement it in an array list.

178
00:09:28.013 --> 00:09:31.636
I mean, you can see why here in just one
second, because that way it's growable.

179
00:09:31.636 --> 00:09:33.919
All you have to build an array
list is a growable amount,

180
00:09:33.919 --> 00:09:36.847
because you don't know how many items
are gonna be in the heap, right?

181
00:09:36.847 --> 00:09:38.156
So they can keep on inserting items,

182
00:09:38.156 --> 00:09:40.660
you're gonna have to keep on growing
the underlying data structure.

183
00:09:40.660 --> 00:09:41.226
So great.

184
00:09:41.226 --> 00:09:44.812
We found a way to store it,
but now the obvious question,

185
00:09:44.812 --> 00:09:48.124
how do you do parent/child relationship,
right?

186
00:09:48.124 --> 00:09:51.679
There is no next, there is no previous,
there is no left, there is no right,

187
00:09:51.679 --> 00:09:53.393
there is no parent, how do you do it?

188
00:09:53.393 --> 00:09:54.609
All right, well,

189
00:09:54.609 --> 00:09:58.948
I'm pretty sure we could come up with
a formula to be able to do this.

190
00:09:58.948 --> 00:10:02.706
So we could do this fun game where
we try to guess our way there,

191
00:10:02.706 --> 00:10:04.091
or I can just tell you.

192
00:10:04.091 --> 00:10:06.301
So let's just look at this one right here.

193
00:10:06.301 --> 00:10:11.729
2 has a child of 5 and 6,
so I can say 2 multiplied,

194
00:10:11.729 --> 00:10:18.267
whatever my index is,
+1 is the right-hand side, correct?

195
00:10:18.267 --> 00:10:21.272
2 times 2 is 4, plus 1 is 5.

196
00:10:21.272 --> 00:10:26.136
I can do 2i + 2 to be the right-hand side,

197
00:10:26.136 --> 00:10:29.433
2 times 2 is 4 plus 2 is 6.

198
00:10:29.433 --> 00:10:34.070
But you're saying I don't know if
this shenanigan does it really

199
00:10:34.070 --> 00:10:35.430
actually pan out?

200
00:10:35.430 --> 00:10:40.553
So that'd be 7, 8, 9, 10,
11, 12, 13, 14, right?

201
00:10:40.553 --> 00:10:46.326
That would be the next set of children
in the placement if we were to do that.

202
00:10:46.326 --> 00:10:49.563
So 6 would have a children of 13 and 14.

203
00:10:49.563 --> 00:10:50.736
So let's find out.

204
00:10:50.736 --> 00:10:57.688
6 times, what's this, it's not i,
it'd be 2(6) because that is i,

205
00:10:57.688 --> 00:11:03.028
+ 1 should be equal to 13,
simple inspection, 13.

206
00:11:03.028 --> 00:11:07.727
2(6) + 2 should be equal to 14,
it's 14, awesome.

207
00:11:07.727 --> 00:11:12.588
Look at that, we just found a way to math
ourselves into our children's area, right?

208
00:11:12.588 --> 00:11:15.350
I don't know how to describe that,
we've traversed to our children, right?

209
00:11:15.350 --> 00:11:19.456
That is actually pretty dang incredible,
cuz there's no links, right,

210
00:11:19.456 --> 00:11:21.354
there's no management of links.

211
00:11:21.354 --> 00:11:25.661
So in some sense, it makes management
of this data structure way, way easier,

212
00:11:25.661 --> 00:11:30.028
cuz you don't have to be, okay,
my parent, crap, I delete the wrong one,

213
00:11:30.028 --> 00:11:32.961
my data is gone, okay,
let's rework this, right?

214
00:11:32.961 --> 00:11:36.554
You don't have to do any of that
because it makes it so much simpler.

215
00:11:36.554 --> 00:11:40.015
But we still have a problem,
we have solved the generic case for

216
00:11:40.015 --> 00:11:44.342
going downwards, but we haven't solved
the generic case for going upwards.

217
00:11:44.342 --> 00:11:49.110
So to 2i + 1, 2i + 2.

218
00:11:49.110 --> 00:11:53.935
Now we could go like this,
okay, if my index is odd,

219
00:11:53.935 --> 00:11:59.000
therefore I could do a left-hand
equation to jump up.

220
00:11:59.000 --> 00:12:02.177
Or if my index is even,
I could do a right-hand equation.

221
00:12:02.177 --> 00:12:04.680
I just picked a number,
I don't actually even know, it's true,

222
00:12:04.680 --> 00:12:06.835
it true based on here,
that is right-hand side, perfect.

223
00:12:06.835 --> 00:12:11.003
So that would have worked out, we could
do some sort of, case statement for

224
00:12:11.003 --> 00:12:13.931
the parent, but
we don't actually need to do that.

225
00:12:13.931 --> 00:12:15.907
We can think of it as a single equation.

226
00:12:15.907 --> 00:12:19.576
Now, in real programming languages that
aren't JavaScript, when you divide

227
00:12:19.576 --> 00:12:22.931
an integer by another integer,
you don't get a floating point number.

228
00:12:22.931 --> 00:12:26.168
So sorry, Python,
you actually get an integer, correct?

229
00:12:26.168 --> 00:12:30.718
So 5 divided by 2 is 2,
this is just saying,

230
00:12:30.718 --> 00:12:34.468
it's a very important concept here.

231
00:12:34.468 --> 00:12:35.972
So let's try this out.

232
00:12:35.972 --> 00:12:41.288
Let's try the idea of i- 2, obviously,

233
00:12:41.288 --> 00:12:45.729
not 2, what, -1 divided by 2.

234
00:12:45.729 --> 00:12:48.937
So let's go back to our six case of 13 and
14.

235
00:12:48.937 --> 00:12:54.057
So that means we'd have
14- 1 divided by 2.

236
00:12:54.057 --> 00:12:56.299
Well, that's 13 divided by 2.

237
00:12:56.299 --> 00:13:00.554
Again, real programming language,
that equals 6, right,

238
00:13:00.554 --> 00:13:03.216
because we don't include the 0.5.

239
00:13:03.216 --> 00:13:04.675
There we go.
So in other words,

240
00:13:04.675 --> 00:13:08.753
since we're using JavaScript,
we'll need to do the floor operation.

241
00:13:08.753 --> 00:13:10.986
We'll have to floor out
the value to get that,.

242
00:13:10.986 --> 00:13:13.850
Which means if we did same thing,
but we did 13,

243
00:13:13.850 --> 00:13:18.643
13-1 divided by 2 is the same thing as
12 divided by 2, which is clearly 6.

244
00:13:18.643 --> 00:13:22.966
So both 13 and 14 can go up to 6
by doing this formula right here.

245
00:13:22.966 --> 00:13:26.985
And so now we had just done both the
child, the right-hand, the left-hand, and

246
00:13:26.985 --> 00:13:30.200
a generic parent calculation,
and now we can traverse our list.

247
00:13:30.200 --> 00:13:34.974
But there is one more problem,
how do we get the end node?

248
00:13:36.981 --> 00:13:41.002
The length, just keep track of how
many items you have in your queue and

249
00:13:41.002 --> 00:13:44.695
that will be literally where you
need to insert into your array.

250
00:13:44.695 --> 00:13:48.123
[SOUND] All right,
like we've solved all the problems.

251
00:13:48.123 --> 00:13:50.633
That means we heapifyDown,

252
00:13:50.633 --> 00:13:56.285
we start at 0 because we're always
gonna be deleting the head.

253
00:13:56.285 --> 00:13:59.840
We heapifyUp,
always starting at our length.

254
00:13:59.840 --> 00:14:03.344
We already know these two things, so
we'll know the indices to start with,

255
00:14:03.344 --> 00:14:05.988
which means we can actually write them,
and do all that.

256
00:14:05.988 --> 00:14:08.330
So that is pretty dang incredible, right?

257
00:14:08.330 --> 00:14:09.474
It's actually not all that hard.

258
00:14:09.474 --> 00:14:12.998
There is one more operation that we
won't be doing today, but we will be

259
00:14:12.998 --> 00:14:17.071
covering later cuz it greatly affects how
an algorithm runs, which is updating.

260
00:14:17.071 --> 00:14:22.507
So, if you ever want to update a node,
update a value in a priority queue,

261
00:14:22.507 --> 00:14:27.771
you really have to keep track of every
single node with a value to index or

262
00:14:27.771 --> 00:14:30.337
index to value, kind of hash map.

263
00:14:30.337 --> 00:14:34.421
That way you can say,
hey, I'm 17, where am I?

264
00:14:34.421 --> 00:14:35.559
I'm right here.

265
00:14:35.559 --> 00:14:39.001
Okay, therefore,
let's bubble me up or bubble me down,

266
00:14:39.001 --> 00:14:42.675
because I'm gonna change my
value from 17 to 25, right?

267
00:14:42.675 --> 00:14:44.950
So we're gonna need to know how
do we bubble ourselves in that.

268
00:14:44.950 --> 00:14:48.604
So that one just adds a lot
of complexity to it, but

269
00:14:48.604 --> 00:14:53.135
it will also make some algorithms
way faster if we can do that.

270
00:14:53.135 --> 00:14:56.936
Typically, priority queues you usually
don't consider update as something you do,

271
00:14:56.936 --> 00:14:58.193
but in this case, we could.

272
00:14:58.193 --> 00:14:59.764
So does that make sense?

273
00:14:59.764 --> 00:15:04.792
Do we feel like we have a heap
all heaped up in our brain?

274
00:15:04.792 --> 00:15:08.129
This is like the funnest data structure,
I think of them all.

275
00:15:08.129 --> 00:15:09.791
It's really, really kinda crazy,

276
00:15:09.791 --> 00:15:13.343
it definitely makes you think about
the world completely different, right?

277
00:15:13.343 --> 00:15:16.065
We've always been doing this node,
node, node, node, node, node.

278
00:15:16.065 --> 00:15:19.372
Hey, let's not do it,
let's just imagine what an array could be.

279
00:15:19.372 --> 00:15:21.780
I just think that is just super cool.

280
00:15:21.780 --> 00:15:25.445
All right, just really prioritizes
my queue, if you know what I mean.

281
00:15:25.445 --> 00:15:28.899
All right, so [LAUGH] that's a weird joke.

282
00:15:28.899 --> 00:15:33.594
Anyways, this thing is self-balancing,
right, it always maintains a perfectly

283
00:15:33.594 --> 00:15:38.024
balanced binary tree, cuz we're only
really removing or adding right at where

284
00:15:38.024 --> 00:15:41.746
the length is, and then bubbling
it up into the correct position.

285
00:15:41.746 --> 00:15:43.974
It can be used for priority,
so think of thread scheduling,

286
00:15:43.974 --> 00:15:45.514
think of all the great stuff right there.

287
00:15:45.514 --> 00:15:48.885
And of course, it's the funnest data
structure to implement, easy to get wrong,

288
00:15:48.885 --> 00:15:50.200
but still the funnest one to do.

