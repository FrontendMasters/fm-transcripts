WEBVTT

1
00:00:00.000 --> 00:00:03.529
We'll implement it cuz it's so
exciting, I really think it's exciting.

2
00:00:03.529 --> 00:00:07.531
I think this is a good exercise to
go over, so again, open this up,

3
00:00:07.531 --> 00:00:09.753
search crystal balls, there we go.

4
00:00:09.753 --> 00:00:12.791
And so I'm gonna pass in
the breaks array boolean and

5
00:00:12.791 --> 00:00:16.118
you're gonna return back out
the index into this array.

6
00:00:16.118 --> 00:00:20.926
So remember, just like our algorithm, we
want to jump by the square root of N, and

7
00:00:20.926 --> 00:00:22.124
so how do we do that?

8
00:00:22.124 --> 00:00:24.083
Well, it's pretty straightforward.

9
00:00:24.083 --> 00:00:28.059
Constant jump, amount will equal

10
00:00:28.059 --> 00:00:33.141
math.sqrt (breaks,length), right?

11
00:00:33.141 --> 00:00:37.720
But we can't really use just that
cuz what's the square root of 3?

12
00:00:37.720 --> 00:00:38.750
I don't know, right?

13
00:00:38.750 --> 00:00:40.920
I'm not that smart, so therefore,

14
00:00:40.920 --> 00:00:44.210
let's become that smart and
let's use the floor unit.

15
00:00:44.210 --> 00:00:47.402
Let's assume that the array is
big enough to have a square root.

16
00:00:47.402 --> 00:00:52.208
There we go, right, it's gonna be
effectively one for three, there we go.

17
00:00:52.208 --> 00:00:56.957
So we now have our jump amount, the amount
we wanna jump, so what's the first step?

18
00:00:56.957 --> 00:01:00.707
We use our first crystal ball
to see where does it break?

19
00:01:00.707 --> 00:01:05.282
So I'll go like this,
let i equals jump amount.

20
00:01:05.282 --> 00:01:07.290
We have a question.

21
00:01:07.290 --> 00:01:11.123
&gt;&gt; Why suddenly square root and
not having like before?

22
00:01:11.123 --> 00:01:15.782
&gt;&gt; Okay, yes, so
I did the worst case right here.

23
00:01:15.782 --> 00:01:17.799
So here's why having doesn't work.

24
00:01:17.799 --> 00:01:23.884
If you jump to your middle element and
your ball breaks, what does that mean?

25
00:01:23.884 --> 00:01:26.180
Well that means you only have one left.

26
00:01:26.180 --> 00:01:30.776
Therefore, you need to start
from a last known good position,

27
00:01:30.776 --> 00:01:34.171
which is zero in this case and
walk to half of N.

28
00:01:34.171 --> 00:01:38.014
Half of N walking half of
n is still linear time,

29
00:01:38.014 --> 00:01:40.619
we want to improve linear time.

30
00:01:40.619 --> 00:01:43.879
And so that's why it is better
to jump by a different amount.

31
00:01:43.879 --> 00:01:47.849
So jumping by the square root
of N means that we will at most

32
00:01:47.849 --> 00:01:49.435
walk square root of N.

33
00:01:49.435 --> 00:01:54.784
Or in other words, the worst possible
case is square root of N amount of jumps

34
00:01:54.784 --> 00:02:00.230
until we're off the array, go back square
root of N and walk square root of N.

35
00:02:00.230 --> 00:02:02.890
That makes sense?

36
00:02:02.890 --> 00:02:06.417
Whereas the worst case having is that
you have to walk half the array.

37
00:02:06.417 --> 00:02:09.991
There we go, so
I is the amount we want to jump,

38
00:02:09.991 --> 00:02:14.670
we're gonna start at the first
jump cuz it will make sense for

39
00:02:14.670 --> 00:02:19.570
i has to be less than brakes length,
i plus equals jump amount.

40
00:02:19.570 --> 00:02:24.629
There we go, and so now we just
simply try to wait until we break,

41
00:02:24.629 --> 00:02:29.331
okay, so if breaks i then break,
oops I just replace that.

42
00:02:29.331 --> 00:02:32.315
There we go,
now we do exactly what we said.

43
00:02:32.315 --> 00:02:35.696
We find the point where it breaks,
we walk back,

44
00:02:35.696 --> 00:02:40.402
we jump back square root of n,
then we walk forward square root of n.

45
00:02:40.402 --> 00:02:44.738
So, i minus equals jump amount,
there we go, and

46
00:02:44.738 --> 00:02:48.678
now we've just jumped
back square root of n.

47
00:02:48.678 --> 00:02:51.531
Now we just simply need the walk
forward square root of n.

48
00:02:51.531 --> 00:02:59.183
So for let j equals zero, j has to be less
than jump amount, and we'll go like this.

49
00:02:59.183 --> 00:03:03.011
I have to be less than brakes length
just in case we walk off our board,

50
00:03:03.011 --> 00:03:04.997
we don't wanna walk off our board.

51
00:03:04.997 --> 00:03:07.751
And then we can just go plus plus j,
awesome.

52
00:03:07.751 --> 00:03:13.664
So now we're gonna make sure we walk
maximum a jump amount of steps.

53
00:03:13.664 --> 00:03:19.817
If {breaks[i]}, oop,
I forgot one thing, ++i], there we go.

54
00:03:19.817 --> 00:03:24.350
If we find the breaking point there we go
we can literally just return it at this

55
00:03:24.350 --> 00:03:29.183
point or we can return negative one, right
there you go that should be the answer.

56
00:03:29.183 --> 00:03:33.407
I always get so
nervous about the wrong answer,

57
00:03:33.407 --> 00:03:38.447
here we go, two,
I think that's all we have to type.

58
00:03:38.447 --> 00:03:41.470
My goodness, it worked out again,
so there we go.

59
00:03:41.470 --> 00:03:45.278
So here's the simple code, which again
we did it in the exact same steps.

60
00:03:45.278 --> 00:03:49.612
I'm gonna jump over here, we first
walk by the square root of n jumping

61
00:03:49.612 --> 00:03:53.366
square root of n at a time exact
same thing you see right here.

62
00:03:53.366 --> 00:03:57.741
We set our initial jump point or our
initial point to the square root of n we

63
00:03:57.741 --> 00:04:00.707
then check for breaks and
jumps square root of n.

64
00:04:00.707 --> 00:04:05.441
We jump back a square root of n,
then we linearly walk forward at most,

65
00:04:05.441 --> 00:04:08.107
a square root of n until we find a break.

66
00:04:08.107 --> 00:04:13.211
At that point, we either return I at
this moment, which is the index in

67
00:04:13.211 --> 00:04:18.154
which it breaks or we return -1,
hopefully that all makes sense.

68
00:04:18.154 --> 00:04:21.697
It's a pretty fun algorithm to kind of
think of, I think it's a really kind of

69
00:04:21.697 --> 00:04:24.653
a challenging one too cuz it just
changes kind of how you view it.

70
00:04:24.653 --> 00:04:27.361
And you never know I was asked this
question maybe one day you guys

71
00:04:27.361 --> 00:04:28.677
will get asked this question.

72
00:04:28.677 --> 00:04:33.441
Likely not now that's on the internet
completely ruined it, but it's a fun one.

73
00:04:33.441 --> 00:04:35.302
So I've already said I've had this one.

74
00:04:35.302 --> 00:04:37.862
Look at that even did the binary
search and Google Docs,

75
00:04:37.862 --> 00:04:41.464
it's shocking how many times you'll get
asked to do binary search at Google.

76
00:04:41.464 --> 00:04:48.237
They just asked that question all the time
so come prepared, be ready all right.

77
00:04:48.237 --> 00:04:51.804
All right so let's take a breath
you get it good pun I thought it

78
00:04:51.804 --> 00:04:56.005
was good I think it's a great pun,
I'm sure there is a lot of questions.

79
00:04:56.005 --> 00:05:00.640
This is a great stopping point for
any questions we can have at this moment.

80
00:05:00.640 --> 00:05:03.604
&gt;&gt; Can we still cube root of n stuff?

81
00:05:03.604 --> 00:05:05.000
Square root of n?

82
00:05:05.000 --> 00:05:07.711
&gt;&gt; We could travel a cube root.

83
00:05:07.711 --> 00:05:11.382
I wouldn't know what the running time of
that would be though, because that means

84
00:05:11.382 --> 00:05:14.852
you'd also have to hop cube root of times
which is a higher amount of hopping.

85
00:05:14.852 --> 00:05:15.352
Cube root-
&gt;&gt; Right.

86
00:05:15.352 --> 00:05:16.892
&gt;&gt; Is smaller than the square root of n,

87
00:05:16.892 --> 00:05:18.004
right?
&gt;&gt; It is smaller, so

88
00:05:18.004 --> 00:05:22.423
your jumps become progressively smaller.
I don't actually know what that proof

89
00:05:22.423 --> 00:05:25.285
would look like and
why it would be faster or

90
00:05:25.285 --> 00:05:26.403
slower.
To me,

91
00:05:26.403 --> 00:05:28.981
it seems like it'd be slower.
&gt;&gt; What if we

92
00:05:28.981 --> 00:05:31.507
go more than square?
I'm just trying to figure out why we

93
00:05:31.507 --> 00:05:34.382
have chosen square root of n.
&gt;&gt; Square root of n, or the square root of

94
00:05:34.382 --> 00:05:37.962
n, it's just the only way we can change
this from nonlinear running, right?

95
00:05:37.962 --> 00:05:39.393
Cuz if we use a binary search,

96
00:05:39.393 --> 00:05:42.722
we still run into a linear problem.
If we jump by some portion of n,

97
00:05:42.722 --> 00:05:45.786
we're still running linear.
We wanna get sub-linear,

98
00:05:45.786 --> 00:05:48.621
we cannot get to log, but
if we just do a cube root as add

99
00:05:48.621 --> 00:05:51.206
or a cube root.
If we just do a root then we get

100
00:05:51.206 --> 00:05:55.895
the maximum on a jump right you get the
maximum amount of distance with a still

101
00:05:55.895 --> 00:05:59.652
lower running time.
As you increase obviously your root level

102
00:05:59.652 --> 00:06:02.258
the closer you get to a linear run, right?
So

103
00:06:02.258 --> 00:06:05.049
if you do the quad route then you
get to the point where you're

104
00:06:05.049 --> 00:06:07.982
practically jumping by one, right?
Then you do the next route

105
00:06:07.982 --> 00:06:11.773
you are definitely jumping by one if not
by zero at that point right it's just like

106
00:06:11.773 --> 00:06:12.798
becomes nothing.
So

107
00:06:12.798 --> 00:06:15.942
it just I think it quickly approaches end.
&gt;&gt; Wishing their

108
00:06:15.942 --> 00:06:20.307
college professor was you back in the day.
&gt;&gt; I know and still,

109
00:06:20.307 --> 00:06:24.732
if this ever gets back to Montana
State University Brocklin Mears best

110
00:06:24.732 --> 00:06:27.441
teacher ever.
I model everything after him he got

111
00:06:27.441 --> 00:06:31.043
teacher of the Year Award once.
The man was writing on the he did Karnaugh

112
00:06:31.043 --> 00:06:34.377
maps he did digital logic all that he
was writing on the board he was so

113
00:06:34.377 --> 00:06:36.952
excited that when he tried
to write it launched out of

114
00:06:36.952 --> 00:06:39.488
his hand.
And made it all the way across the room

115
00:06:39.488 --> 00:06:42.892
and I was just I was sitting there like so
engaged going, this is

116
00:06:42.892 --> 00:06:47.249
how I want all my professors to be, right?
I want them to feel like they like what

117
00:06:47.249 --> 00:06:49.468
they're teaching.
And I like what I'm teaching.

118
00:06:49.468 --> 00:06:50.794
So, I don't wanna,

119
00:06:50.794 --> 00:06:53.607
I'm showing you how much
I like what I teach.

