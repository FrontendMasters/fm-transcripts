WEBVTT

1
00:00:00.000 --> 00:00:01.673
All right, so how do we feel about that?

2
00:00:01.673 --> 00:00:08.619
Do we have any quick questions, or
slow questions, or moderate questions?

3
00:00:08.619 --> 00:00:10.472
Question in the back?

4
00:00:10.472 --> 00:00:13.502
&gt;&gt; After addition will
it still be balanced?

5
00:00:13.502 --> 00:00:15.890
&gt;&gt; Say that, after addition?

6
00:00:15.890 --> 00:00:16.990
After insertion?

7
00:00:16.990 --> 00:00:18.816
After insertion will it still be balanced?

8
00:00:18.816 --> 00:00:22.499
No, there's no guarantee that things
are gonna be balanced after insertion.

9
00:00:22.499 --> 00:00:25.065
Insertion inherently unbalances a tree,
right?

10
00:00:25.065 --> 00:00:27.946
That is where these rotation
algorithms come into play.

11
00:00:27.946 --> 00:00:32.098
ADL versus red black,
.I don't know red black by heart,

12
00:00:32.098 --> 00:00:37.888
obviously involves coloring like you
can't have two reds touching each other.

13
00:00:37.888 --> 00:00:40.838
I forget the exact way
you do the balancing,

14
00:00:40.838 --> 00:00:45.305
.but an AVL effectively defines
four things that you can see, and

15
00:00:45.305 --> 00:00:49.639
it goes over each one of the possible
cases and how you rotate it.

16
00:00:49.639 --> 00:00:53.294
So if you insert something,
you walk back up the tree.

17
00:00:53.294 --> 00:00:57.341
If you run into a situation in which
you have a parent and a child, and

18
00:00:57.341 --> 00:00:59.542
they're both on the left hand side,

19
00:00:59.542 --> 00:01:03.390
then you can do a rotation in which
will make this a shorter tree.

20
00:01:03.390 --> 00:01:05.447
And it does this recursively
back up the tree.

21
00:01:05.447 --> 00:01:09.063
And that's an AVL algorithm,
it does that on insertion and

22
00:01:09.063 --> 00:01:11.750
helps bring everything back up and closer.

23
00:01:11.750 --> 00:01:14.270
And it actually causes
an extremely balanced tree.

24
00:01:14.270 --> 00:01:16.275
It's like almost always
perfectly balanced.

25
00:01:16.275 --> 00:01:20.416
It's a very impressive algorithm, but it
leads to more rotations, more rotations,

26
00:01:20.416 --> 00:01:21.394
slower algorithm.

27
00:01:21.394 --> 00:01:26.247
You have to be able to say, hey, if I
don't find that often but I insert a lot,

28
00:01:26.247 --> 00:01:30.804
it's better to have red black, but
if I say find a lot and insert rarely,

29
00:01:30.804 --> 00:01:32.866
perhaps AVL is a better choice.

30
00:01:32.866 --> 00:01:37.798
So there's no one straight answer, again,
as always it's just this constant, well,

31
00:01:37.798 --> 00:01:38.532
it depends.

32
00:01:38.532 --> 00:01:41.991
All right, we have another question?

33
00:01:41.991 --> 00:01:45.017
&gt;&gt; So basically,
it's possible to remove the same node but

34
00:01:45.017 --> 00:01:48.998
while choosing a different strategy,
we can end up with a different tree.

35
00:01:48.998 --> 00:01:49.718
&gt;&gt; Yeah, exactly.

36
00:01:49.718 --> 00:01:52.699
So as I said,
the deletion I left it open to you,

37
00:01:52.699 --> 00:01:55.324
I gave you two separate pathways to walk.

38
00:01:55.324 --> 00:02:00.002
You find the largest on the small side or
the smallest on the large side, and

39
00:02:00.002 --> 00:02:05.069
then you replace that parent node in which
you were removing or the removal node.

40
00:02:05.069 --> 00:02:09.428
So that will fundamentally
lead to two separate trees.

41
00:02:09.428 --> 00:02:14.905
Right, they gonna be different in shape So

42
00:02:14.905 --> 00:02:19.428
in this case, if we were to do it over
here, say we didn't have this one,

43
00:02:19.428 --> 00:02:21.595
we would have put 37 right here.

44
00:02:21.595 --> 00:02:27.551
If we would have gone the other direction,
we would have put 100 right here.

45
00:02:27.551 --> 00:02:30.522
And yes, the shape of the tree would have
been preserved in both cases, everything

46
00:02:30.522 --> 00:02:33.453
would have been great, everything on
this side of 100 would have been larger,

47
00:02:33.453 --> 00:02:35.245
everything on this side
would have been smaller.

48
00:02:35.245 --> 00:02:38.744
If we would have put 37 there, everything
would have been larger cuz it's 100 on

49
00:02:38.744 --> 00:02:42.261
the other side, everything would have been
smaller cuz it's 25 on the other side.

50
00:02:42.261 --> 00:02:44.151
So both cases preserve
the shape of the tree,

51
00:02:44.151 --> 00:02:47.690
they just lead to two different trees
&gt;&gt; Larger than and less than the value,

52
00:02:47.690 --> 00:02:49.812
is that the only way you can make a tree?

53
00:02:49.812 --> 00:02:53.688
&gt;&gt; Ooh, okay, yes so the question was this
whole larger than less than thing is this

54
00:02:53.688 --> 00:02:55.238
the only way you can make a tree?

55
00:02:55.238 --> 00:02:58.567
No, we're actually gonna be doing
a week ordered tree next, and

56
00:02:58.567 --> 00:03:00.452
it's gonna be slightly different.

57
00:03:00.452 --> 00:03:04.147
But for a binary search tree,
there is only really one configuration.

58
00:03:04.147 --> 00:03:07.293
It's meant to mimic a binary
search of an array or

59
00:03:07.293 --> 00:03:11.525
quicksort where we have this
strong ordering to things, right?

60
00:03:11.525 --> 00:03:15.851
Meaning that if you were to look at this,
so check this out, so

61
00:03:15.851 --> 00:03:18.277
don't mind all the crossing out.

62
00:03:18.277 --> 00:03:20.447
Let's just print out the tree in order.

63
00:03:20.447 --> 00:03:25.142
So in order remember, we go left,
print out the value, go right.

64
00:03:25.142 --> 00:03:28.310
So we go left, go left, go left to 4,

65
00:03:28.310 --> 00:03:32.964
go back up cuz there's no more children,
print out 7.

66
00:03:32.964 --> 00:03:39.528
Go back up 15, go down, go left 25, right?

67
00:03:39.528 --> 00:03:46.873
Go that little extra right 37,
go back up 51, go to the right 100, right?

68
00:03:46.873 --> 00:03:50.908
So it actually prints it out in order.

69
00:03:50.908 --> 00:03:54.327
There's a very strict
ordering to this tree and

70
00:03:54.327 --> 00:03:57.749
in order traversal produces
an in order array.

71
00:03:57.749 --> 00:03:58.617
It's cool property, right?

72
00:03:58.617 --> 00:04:02.417
So, that's why you put this up more in
the strict ordering phase than the weak

73
00:04:02.417 --> 00:04:06.000
ordering phase or strong ordering,
might be a better term than strict.

