WEBVTT

1
00:00:00.440 --> 00:00:03.053
So we're gonna get to the point
where we're gonna run into,

2
00:00:03.053 --> 00:00:05.270
is this an algorithm or
is this the data structure.

3
00:00:05.270 --> 00:00:06.967
Well it uses the data structure, and

4
00:00:06.967 --> 00:00:09.612
then performs an algorithm on
top of the data structure.

5
00:00:09.612 --> 00:00:12.430
So this becomes a more common
thing we're gonna see.

6
00:00:12.430 --> 00:00:14.820
So is linked list a data structure or
an algorithm?

7
00:00:14.820 --> 00:00:18.643
Well, you could argue that the insertion
is the algorithmic side of it,

8
00:00:18.643 --> 00:00:21.600
the actual setup is the data
structure itself, right?

9
00:00:21.600 --> 00:00:23.480
We can make these arguments
bla bla bla bla bla.

10
00:00:23.480 --> 00:00:24.810
I'm not gonna be pedantic.

11
00:00:24.810 --> 00:00:27.550
Call it whatever you want,
I'm not gonna be offended.

12
00:00:27.550 --> 00:00:31.940
So, our first data structure on top of
a linked list is going to be a queue.

13
00:00:31.940 --> 00:00:34.590
This is one of the most common data
structures I have implemented.

14
00:00:34.590 --> 00:00:35.870
I've implemented a queue.

15
00:00:35.870 --> 00:00:39.070
Just this year, I had to shove
video down into a video decoder.

16
00:00:39.070 --> 00:00:41.906
And the only way to have a buffer
to be able to do this and

17
00:00:41.906 --> 00:00:45.436
make sure you insert it in the correct
order is first in first out and

18
00:00:45.436 --> 00:00:48.040
what does that that's, that's cute, right?

19
00:00:48.040 --> 00:00:52.381
And I was using it in C two, I felt
a little bit smarter than everybody else.

20
00:00:52.381 --> 00:00:55.750
To writing C linked lists,
it felt very good.

21
00:00:55.750 --> 00:00:57.090
So let's go over a queue.

22
00:00:57.090 --> 00:00:59.287
So we know what a linked list is now.

23
00:00:59.287 --> 00:01:03.270
A queue is just a specific
implementation of a linked list.

24
00:01:03.270 --> 00:01:07.039
So let's pretend that we
have a pointer to head and

25
00:01:07.039 --> 00:01:13.065
we'll do the exact same setup so that
way I can say, Bravo, Charlie and Delta.

26
00:01:13.065 --> 00:01:17.103
Let's see Bravo, Charlie, this is fun.

27
00:01:17.103 --> 00:01:18.430
I just decided to do this now,
there we go.

28
00:01:18.430 --> 00:01:23.170
So this of course is our tail,
this of course is our head.

29
00:01:23.170 --> 00:01:27.844
And so if we want to insert in a queue,
or before we go to that,

30
00:01:27.844 --> 00:01:30.595
a queue is simply a FIFO structure,

31
00:01:30.595 --> 00:01:35.570
a first in first out,
this is what the Brits call a line, right?

32
00:01:35.570 --> 00:01:37.210
And so they call it a queue.

33
00:01:37.210 --> 00:01:38.180
We call it a line.

34
00:01:38.180 --> 00:01:39.660
That's all it really is.

35
00:01:39.660 --> 00:01:42.720
So if we wish to insert into a line,
what do you do at a carnival?

36
00:01:42.720 --> 00:01:45.170
What do you do at anything,
you get into the back of the line?

37
00:01:45.170 --> 00:01:49.745
So just like that, if we want to insert,
say, E, what we're gonna do is

38
00:01:49.745 --> 00:01:54.034
we're gonna have D, we're gonna
have our current tail point to E.

39
00:01:54.034 --> 00:01:57.468
Then we're gonna update
our tail to point to E.

40
00:01:57.468 --> 00:01:57.980
Does that make makes sense?

41
00:01:57.980 --> 00:02:00.643
So it'd be kind of a two operation.

42
00:02:00.643 --> 00:02:05.744
You could imagine I'll just write
this an actual type script,

43
00:02:05.744 --> 00:02:10.667
this dot tail these dot next
equals E then we just go.

44
00:02:10.667 --> 00:02:14.875
This dot tail equals E.

45
00:02:14.875 --> 00:02:15.537
So that makes sense.

46
00:02:15.537 --> 00:02:18.627
We break this link, we are now
pointing to the end of the list.

47
00:02:18.627 --> 00:02:20.740
Awesome, this makes sense.

48
00:02:20.740 --> 00:02:24.287
But a popping operation,
we don't pop from the tail.

49
00:02:24.287 --> 00:02:25.247
We pop from the head.

50
00:02:25.247 --> 00:02:28.307
Now also notice that I'm
using a Singly Linked List.

51
00:02:28.307 --> 00:02:29.957
We don't even need a doubly linked list.

52
00:02:29.957 --> 00:02:32.017
We don't even need that
extra computation time.

53
00:02:32.017 --> 00:02:34.750
We don't need that extra
property storage requirement.

54
00:02:34.750 --> 00:02:37.000
We need a very minimal amount of stuff.

55
00:02:37.000 --> 00:02:40.430
So, ahead if we want to pop it,
we do the exact same thing.

56
00:02:40.430 --> 00:02:45.500
We would first set head to point to be,
so we're doing the reverse operation.

57
00:02:45.500 --> 00:02:49.030
Head points to be, we'd save off of
reference of head of course, right?

58
00:02:49.030 --> 00:02:52.720
So we'd have some sort of consth head,
equals the cont head right?

59
00:02:52.720 --> 00:02:57.087
We point head to B and then we can just
simply take the previous the old one,

60
00:02:57.087 --> 00:02:59.983
remove the link, and
then return out the value.

61
00:02:59.983 --> 00:03:02.914
Remember, this is a node
based data structure,

62
00:03:02.914 --> 00:03:07.140
which means we have a container around
the value that you hand the cue.

63
00:03:07.140 --> 00:03:12.370
So therefore we have to do container
A dot value and return that out.

64
00:03:12.370 --> 00:03:16.591
So just to write it out just to be
complete we'd go head equals head I'm just

65
00:03:16.591 --> 00:03:20.812
gonna write this out without using this
and all that you can apply this you,

66
00:03:20.812 --> 00:03:21.829
can apply const.

67
00:03:21.829 --> 00:03:25.385
And then I would do h.next equals null and

68
00:03:25.385 --> 00:03:30.070
then of course Oopsies,
we wouldn't want to do that.

69
00:03:30.070 --> 00:03:32.160
That is the worst possible operation.

70
00:03:32.160 --> 00:03:37.261
We'd wanna go head equals head.next,

71
00:03:37.261 --> 00:03:42.661
then set our saved off
reference to null and

72
00:03:42.661 --> 00:03:47.621
then just simply return out h.value.

73
00:03:47.621 --> 00:03:48.726
Does that make sense?

74
00:03:48.726 --> 00:03:51.567
Just simply move it forward, return it.

75
00:03:53.665 --> 00:03:56.306
Yeah, so if I did it the other way around,
we'd lose the value then.

76
00:03:56.306 --> 00:03:58.875
You know your whole queue would suck and
there you go,

77
00:03:58.875 --> 00:04:00.770
you lose all the values don't do that.

78
00:04:00.770 --> 00:04:05.938
All right, that's really all a queue
is it's actually shockingly simple

79
00:04:05.938 --> 00:04:10.859
because what it's doing is constraining
what you can do with a queue and

80
00:04:10.859 --> 00:04:13.089
by constraining what it can do.

81
00:04:13.089 --> 00:04:15.308
What kind of performance
are you getting out of queue,

82
00:04:15.308 --> 00:04:17.295
when you actually end
what's the performance?

83
00:04:19.610 --> 00:04:21.440
Well, we don't traverse anything, right?

84
00:04:21.440 --> 00:04:23.466
We don't go over any sort of list.

85
00:04:23.466 --> 00:04:26.445
It's not based on how big
of a value you give me,

86
00:04:26.445 --> 00:04:30.110
it's simply based on the fact
that I have to set one thing.

87
00:04:30.110 --> 00:04:34.706
One by one next value to a new node and
I have to update where my tail points to

88
00:04:34.706 --> 00:04:37.747
those are two constant
time operations right and

89
00:04:37.747 --> 00:04:42.569
creating a node itself is constant time
operation in the sense that yeah It may

90
00:04:42.569 --> 00:04:47.420
require me to go get memory may require
me to go out to the heap and grab memory.

91
00:04:47.420 --> 00:04:50.510
But we consider those kinds of constant
time operations when doing this.

92
00:04:50.510 --> 00:04:54.557
And all it requires us to do is just be
able to point those new values elsewhere.

93
00:04:54.557 --> 00:04:56.876
That's it.
So it's a constant time operation,

94
00:04:56.876 --> 00:05:01.191
pushing into a queue is constant, popping
from a queue is the exact same thing but

95
00:05:01.191 --> 00:05:03.110
just in reverse, it's constant.

96
00:05:03.110 --> 00:05:04.280
And so fantastic.

97
00:05:04.280 --> 00:05:09.050
We now have have reduced what we can
do and we've made sure that it's very,

98
00:05:09.050 --> 00:05:13.456
very fast and it performs a specific
algorithm, first in first out.

99
00:05:13.456 --> 00:05:15.559
It's that simple, all right?

100
00:05:15.559 --> 00:05:16.450
It's that simple.

101
00:05:16.450 --> 00:05:17.278
And so of course,

102
00:05:17.278 --> 00:05:21.097
there's also usually one other operation
that comes with queues often, which is

103
00:05:21.097 --> 00:05:24.660
peak have the ability to see what is my
first element without popping it off.

104
00:05:24.660 --> 00:05:27.500
Of course, that would just be hey,
head dot value, right?

105
00:05:27.500 --> 00:05:29.986
That's pretty much as
straightforward as it gets.

106
00:05:29.986 --> 00:05:33.658
And so of course, up I already said this
part we're entering into the world where

107
00:05:33.658 --> 00:05:37.060
we constrain things from here on out,
you'll just notice that most things

108
00:05:37.060 --> 00:05:40.895
are constrained intentionally, such that
we get very good performance out of it and

109
00:05:40.895 --> 00:05:42.532
you can only use it in a certain way.

110
00:05:42.532 --> 00:05:46.330
Yes it is technically a generalized linked
list underneath the hood often with

111
00:05:46.330 --> 00:05:48.700
a queue, but
you can only use it in a certain way.

