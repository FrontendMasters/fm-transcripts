WEBVTT

1
00:00:00.750 --> 00:00:04.095
We're not seeing a new data
structure at this point, right?

2
00:00:04.095 --> 00:00:08.815
We're just simply ordering the data
in the data structure differently.

3
00:00:08.815 --> 00:00:11.800
So let's see, do I have, okay, good.

4
00:00:11.800 --> 00:00:13.450
Let's kind of whiteboard these things out.

5
00:00:13.450 --> 00:00:17.066
We're not going to implement all these
things when we did a doubly linked

6
00:00:17.066 --> 00:00:19.170
list implementation.

7
00:00:19.170 --> 00:00:21.454
This is like that, but
just slightly worse.

8
00:00:21.454 --> 00:00:24.970
It just would take an hour of link
playing, and so I don't wanna do that,

9
00:00:24.970 --> 00:00:26.135
I don't wanna do that.

10
00:00:26.135 --> 00:00:29.714
All right, so let's just talk about,
we can whiteboard it, though.

11
00:00:29.714 --> 00:00:32.830
We've been whiteboarding and
translating these ideas to code.

12
00:00:32.830 --> 00:00:33.934
You guys can do that too.

13
00:00:33.934 --> 00:00:37.688
I'm positive you have the strength and
the mental capabilities to do it.

14
00:00:37.688 --> 00:00:41.130
So let's talk about a binary search tree.

15
00:00:41.130 --> 00:00:43.670
Often you'll see it abbreviated as a BST.

16
00:00:44.770 --> 00:00:48.075
And so a binary search tree
is still a binary tree, but

17
00:00:48.075 --> 00:00:51.600
there's a rule that has to
be applied at every node.

18
00:00:51.600 --> 00:00:53.240
I always draw my trees complete.

19
00:00:53.240 --> 00:00:56.470
So I'll just intentionally draw
this one a non-complete tree.

20
00:00:56.470 --> 00:00:59.274
A complete tree, of course, is where all
left and right is completely filled and

21
00:00:59.274 --> 00:01:00.109
it has the same height.

22
00:01:00.109 --> 00:01:04.513
So this is a non-complete tree,
if you will.

23
00:01:04.513 --> 00:01:06.510
So what's the one rule?

24
00:01:06.510 --> 00:01:11.009
The one rule that you have to be able
to apply at any single node is this.

25
00:01:11.009 --> 00:01:15.198
This side has to be less than or equal to,

26
00:01:15.198 --> 00:01:18.664
this side has to be greater than.

27
00:01:18.664 --> 00:01:20.300
That's the only rule.

28
00:01:20.300 --> 00:01:24.373
Now, you could do this for
some optimization, make it like that,

29
00:01:24.373 --> 00:01:27.936
because there is a case where
like say if you had all fives,

30
00:01:27.936 --> 00:01:30.953
you wouldn't want just
a large line going down.

31
00:01:30.953 --> 00:01:34.318
And so you can make the case why you'd
want to do this versus not having that

32
00:01:34.318 --> 00:01:35.958
blah, blah, blah, blah, blah.

33
00:01:35.958 --> 00:01:38.518
But for our case,
we're gonna keep it pretty darn simple.

34
00:01:38.518 --> 00:01:42.265
We'll just hold to this single case,
which is to the right,

35
00:01:42.265 --> 00:01:47.492
everything is larger than, to the left,
everything is smaller than or equal to me.

36
00:01:47.492 --> 00:01:50.976
Now, what algorithm does
this already sound like?

37
00:01:53.929 --> 00:01:55.897
Let me try putting a P in here.

38
00:01:58.332 --> 00:01:59.702
You agreed yes like you knew.

39
00:01:59.702 --> 00:02:01.351
What is it?

40
00:02:01.351 --> 00:02:03.975
&gt;&gt; I forgot the name of the sort, but
it's one of the sorts, quick one.

41
00:02:03.975 --> 00:02:05.860
&gt;&gt; Quick one, yeah, Quicksort.

42
00:02:05.860 --> 00:02:09.090
Effectively, this looks a lot
like Quicksort, does it not?

43
00:02:09.090 --> 00:02:11.027
We have a point in which we're at.

44
00:02:11.027 --> 00:02:14.502
Everything on this side or everything on
that side of the pivot is this value.

45
00:02:14.502 --> 00:02:17.470
Everything on this side is greater than,
right?

46
00:02:17.470 --> 00:02:20.713
That it's like it's identical
in some sort of sense, and

47
00:02:20.713 --> 00:02:25.426
even has a lot of the same characteristics
of Quicksort, and we're gonna see that.

48
00:02:25.426 --> 00:02:30.057
So there you go, that is the requirement
of a binary search tree.

49
00:02:30.057 --> 00:02:34.228
So let's talk about finding,
say we want to find a value v, right?

50
00:02:34.228 --> 00:02:36.376
There's a v in here and
we want to find it.

51
00:02:36.376 --> 00:02:41.094
It's kind of like Quicksort in this sense,
but it's more like breadth or

52
00:02:41.094 --> 00:02:44.227
a binary search on an array list,
or on an array.

53
00:02:44.227 --> 00:02:48.941
A binary search on array, remember,
we split the thing in half.

54
00:02:48.941 --> 00:02:51.885
And then we say, hey, are you the value?

55
00:02:51.885 --> 00:02:54.121
If it's the value, we leave.

56
00:02:54.121 --> 00:02:58.460
If it's not the value, we have to say,
hey, if I'm larger than the current value,

57
00:02:58.460 --> 00:03:01.226
that means I'm only gonna be
on this side of the tree.

58
00:03:01.226 --> 00:03:05.167
If I'm less than, then I'm only
gonna be on this side of the tree.

59
00:03:05.167 --> 00:03:10.068
And so find is effectively doing
a simplified version of a binary search on

60
00:03:10.068 --> 00:03:10.787
an array.

61
00:03:10.787 --> 00:03:15.465
What you'll effectively see is that it's
much easier to do a find on a binary

62
00:03:15.465 --> 00:03:18.107
search tree than it is
on an ordered array.

63
00:03:18.107 --> 00:03:20.925
It's just much simpler because you
just don't have to manage this low and

64
00:03:20.925 --> 00:03:21.937
high business.

65
00:03:21.937 --> 00:03:23.377
And so let's just kind of walk through it.

66
00:03:23.377 --> 00:03:24.917
Let's kind of write the pseudocode.

67
00:03:24.917 --> 00:03:27.814
So we're gonna do find, and
we're gonna be given a node, and

68
00:03:27.814 --> 00:03:30.120
let's just say we need to
produce out a Boolean.

69
00:03:31.290 --> 00:03:33.380
Is it there or is it not there?

70
00:03:33.380 --> 00:03:38.846
So what we can do is we can do a simple
check of, if this is not like this,

71
00:03:38.846 --> 00:03:43.330
we're at a null point,
we have to return false, right?

72
00:03:43.330 --> 00:03:47.053
Remember, base case is people,
very, very important.

73
00:03:47.053 --> 00:03:49.951
And you can tell we're gonna be doing
a base case or you can tell we're gonna

74
00:03:49.951 --> 00:03:52.685
be doing a depth first search because
we're going down deep, right?

75
00:03:52.685 --> 00:03:56.799
Every single level, we make the same
determination, which way are we going?

76
00:03:56.799 --> 00:03:57.559
Okay, go deeper.

77
00:03:57.559 --> 00:03:58.489
Which way are we going?

78
00:03:58.489 --> 00:03:59.770
Okay, go deeper.

79
00:03:59.770 --> 00:04:04.350
So it's a depth first search with
an order to how we traverse.

80
00:04:04.350 --> 00:04:08.409
So if it's not a node,
we obviously return false, right?

81
00:04:08.409 --> 00:04:09.695
Can't do anything here.

82
00:04:09.695 --> 00:04:12.530
We've got to the end and
we did not find our value.

83
00:04:12.530 --> 00:04:16.530
Therefore, we know the value
is not within the structure.

84
00:04:16.530 --> 00:04:18.120
Else, we do a simple check.

85
00:04:18.120 --> 00:04:23.143
If node.value, oop,
I forgot to put v in here, equals v.

86
00:04:23.143 --> 00:04:25.250
No, my if statements are all wrong now.

87
00:04:25.250 --> 00:04:29.170
So if the value of the node is
equivalent to the v, then guess what?

88
00:04:29.170 --> 00:04:30.022
We found the value, right?

89
00:04:30.022 --> 00:04:32.525
So we can return true.

90
00:04:32.525 --> 00:04:33.640
Awesome, right?

91
00:04:33.640 --> 00:04:34.280
Everyone's on board?

92
00:04:35.820 --> 00:04:41.165
If the value of this node is less
than our value we're looking for,

93
00:04:41.165 --> 00:04:44.029
meaning that if we went to the left,

94
00:04:44.029 --> 00:04:48.810
it's only values even smaller,
we need to go to the right.

95
00:04:48.810 --> 00:04:53.756
So we would simply return find,
my goodness,

96
00:04:53.756 --> 00:04:58.704
that is just the worst
spelling of find I've seen

97
00:04:58.704 --> 00:05:03.543
in a long time,
find node right value, right?

98
00:05:03.543 --> 00:05:06.145
We need to go to the larger value section.

99
00:05:06.145 --> 00:05:09.869
We are too big for right here,
let's go to the larger value section.

100
00:05:09.869 --> 00:05:12.724
Or that means there's
only one condition left.

101
00:05:12.724 --> 00:05:14.300
We don't actually need to spell it out.

102
00:05:14.300 --> 00:05:17.620
It just simply means we are smaller
than the current value.

103
00:05:17.620 --> 00:05:19.636
So we need to go to the kids table, right?

104
00:05:19.636 --> 00:05:21.627
We need to go to the smaller value table.

105
00:05:21.627 --> 00:05:28.958
Let's go, so we find, Node left value, and
there we go, that's all we have to do.

106
00:05:28.958 --> 00:05:30.916
If we hit this case,
the whole thing's false.

107
00:05:30.916 --> 00:05:34.082
We've made it to the very end, we've kept
splitting our array in half until we found

108
00:05:34.082 --> 00:05:35.745
that there is no value that's equivalent.

109
00:05:35.745 --> 00:05:39.697
Or we find the value, so we return true.

110
00:05:39.697 --> 00:05:40.706
Everything makes sense?

111
00:05:40.706 --> 00:05:43.204
I think binary search
trees are pretty awesome.

112
00:05:43.204 --> 00:05:46.958
So if I were to write one in, I would
put something like this in here, right?

113
00:05:46.958 --> 00:05:53.931
17, so that means everything on
this side of the tree must be what?

114
00:05:53.931 --> 00:05:56.251
Smaller, right, or equal to.

115
00:05:56.251 --> 00:05:59.308
So I mean, technically,
I could rewrite 17 again, which we will.

116
00:05:59.308 --> 00:06:02.030
And that means this value
is kind of interesting.

117
00:06:02.030 --> 00:06:03.276
Can this value exist?

118
00:06:06.261 --> 00:06:11.001
If we have this condition right here
that it must be larger than 17, and

119
00:06:11.001 --> 00:06:15.666
we have this condition right here,
which means that everything in this

120
00:06:15.666 --> 00:06:19.800
subtree must be equal to or
smaller than, can that tree exist?

121
00:06:19.800 --> 00:06:23.633
No, it can't, cuz I'd have to
put something like 18 in here,

122
00:06:23.633 --> 00:06:25.319
which breaks that, right?

123
00:06:25.319 --> 00:06:27.136
You couldn't actually have that in there.

124
00:06:27.136 --> 00:06:31.560
So even in this case,
we can't actually even put 17 in there, so

125
00:06:31.560 --> 00:06:33.780
let's put something like 15.

126
00:06:33.780 --> 00:06:37.680
So quick question,
can we now put something right here?

127
00:06:37.680 --> 00:06:40.223
Yes, we can put 16 or the value of 17.

128
00:06:40.223 --> 00:06:41.802
So we'll just put 16 right here.

129
00:06:41.802 --> 00:06:43.730
Here, we can put 4, right?

130
00:06:43.730 --> 00:06:47.930
Have we preserved the case for
the upper subtree or for the upper tree?

131
00:06:47.930 --> 00:06:48.787
Yes, we have.

132
00:06:48.787 --> 00:06:51.415
Here, have we preserved the case?

133
00:06:51.415 --> 00:06:55.522
At this point, is everything on
this side larger than my node?

134
00:06:55.522 --> 00:06:56.940
Yes, it is.

135
00:06:56.940 --> 00:07:00.142
Is everything on this side smaller than or
equal to my node?

136
00:07:00.142 --> 00:07:01.337
Yes, it is.

137
00:07:01.337 --> 00:07:03.227
Awesome, so we've preserved the case.

138
00:07:03.227 --> 00:07:06.932
So that's the only requirement of a binary
tree is that we keep on recursively

139
00:07:06.932 --> 00:07:08.120
putting this in.

140
00:07:08.120 --> 00:07:10.770
So I'm gonna have to be kind of
careful on what value I choose here.

141
00:07:10.770 --> 00:07:13.148
So I'll just intentionally
choose a large number,

142
00:07:13.148 --> 00:07:15.340
and then I can choose a smaller number.

143
00:07:15.340 --> 00:07:19.460
And so now that means this
node right here can only

144
00:07:19.460 --> 00:07:24.095
exist within the values of 26 through 50,
right?

145
00:07:24.095 --> 00:07:26.375
It can't be any other value.

146
00:07:26.375 --> 00:07:27.099
You have a question?

147
00:07:27.099 --> 00:07:28.689
&gt;&gt; What's the functional use for this?

148
00:07:28.689 --> 00:07:31.270
What would you use-
&gt;&gt; Functional use is QuickFind, and

149
00:07:31.270 --> 00:07:32.853
we'll see why that is the case.

150
00:07:32.853 --> 00:07:38.182
&gt;&gt; So this is just a way to put IDs on
something to connect it to something else?

151
00:07:38.182 --> 00:07:41.107
I mean, you're just quick finding
numbers that you put in into it?

152
00:07:41.107 --> 00:07:44.000
&gt;&gt; All right, so
the question is what's the use of this?

153
00:07:44.000 --> 00:07:45.437
Why would we actually use this?

154
00:07:45.437 --> 00:07:48.894
What it is for is for quick finding, and
the reason why it's for quick finding is,

155
00:07:48.894 --> 00:07:52.110
imagine we had a list of things
we wanted to search through.

156
00:07:52.110 --> 00:07:53.462
Well, you already have the list, but

157
00:07:53.462 --> 00:07:55.331
what happen if I wanted to
start adding to that list?

158
00:07:55.331 --> 00:07:57.344
What happen if I wanted to
start removing from that list?

159
00:07:57.344 --> 00:08:01.161
It actually makes addition and removal
kind of hard on these lists because now

160
00:08:01.161 --> 00:08:03.570
you have to grow and shrink your array.

161
00:08:03.570 --> 00:08:07.800
Plus, you have to be able to find the spot
in which you want to add or remove from.

162
00:08:07.800 --> 00:08:12.500
And if you add, you have a worst case
of an n running time on an array.

163
00:08:12.500 --> 00:08:13.975
&gt;&gt; So this is for adding to the list?

164
00:08:13.975 --> 00:08:16.860
So if you're-
&gt;&gt; If you have a dynamically changing.

165
00:08:16.860 --> 00:08:17.432
&gt;&gt; Okay, yes.

166
00:08:17.432 --> 00:08:21.377
&gt;&gt; So as it changes, you're still able
to search at a reasonable rate, but

167
00:08:21.377 --> 00:08:23.980
that does come with some
level of consequence.

168
00:08:23.980 --> 00:08:30.970
The good part is just like a linked list,
you can add anywhere at the constant rate.

169
00:08:30.970 --> 00:08:34.596
But there's traversal costs, and B,
things can kinda get a little bit

170
00:08:34.596 --> 00:08:38.118
out of sync when it comes to a tree,
and we'll see that here shortly.

171
00:08:38.118 --> 00:08:42.200
All right, so this node can only
be in this value range, right?

172
00:08:42.200 --> 00:08:45.206
Awesome, what value range
can this node be in?

173
00:08:47.828 --> 00:08:52.251
18 up to 25, right?

174
00:08:52.251 --> 00:08:53.910
That's the only ranges it can be in.

175
00:08:53.910 --> 00:08:56.136
It's really good to be able
to understand this and

176
00:08:56.136 --> 00:08:58.526
kind of walk through the exact
shape of a binary tree.

177
00:08:58.526 --> 00:08:59.633
We do have a question.

178
00:08:59.633 --> 00:09:04.518
&gt;&gt; The right side should be greater
than 17 or can it also be equal to 17?

179
00:09:04.518 --> 00:09:06.812
&gt;&gt; I did kind of mention
that a bit earlier.

180
00:09:06.812 --> 00:09:09.573
If it is equal to,
we can certainly do that.

181
00:09:09.573 --> 00:09:14.060
And I think, imagine if you had a bunch
of very highly repetitive values, say 5.

182
00:09:14.060 --> 00:09:17.888
If you insert it over and over again,
which we'll see the insertion algorithm

183
00:09:17.888 --> 00:09:20.915
here shortly, you could imagine
a world where you have this.

184
00:09:20.915 --> 00:09:25.322
5 points to 5, which points to 5, which
points to 5, which points to 5, right?

185
00:09:25.322 --> 00:09:28.597
You could actually create effectively
a linked list and call it a tree.

186
00:09:28.597 --> 00:09:32.491
And so there is some value in highly
repetitive structures having it so

187
00:09:32.491 --> 00:09:37.160
that both sides can be less than slash
equal to, or greater than slash equal to.

188
00:09:37.160 --> 00:09:41.342
&gt;&gt; So if you're adding 51,
then you have to start another branch?

189
00:09:41.342 --> 00:09:45.086
&gt;&gt; If we add 51, we would have to
start another branch this way,

190
00:09:45.086 --> 00:09:48.206
cuz that side is permanently greater than,
right?

191
00:09:48.206 --> 00:09:49.970
So we're actually gonna
do insertion right now.

