WEBVTT

1
00:00:00.140 --> 00:00:04.670
Can we also do in order and
post-order traversals?

2
00:00:04.670 --> 00:00:08.107
&gt;&gt; I mean, technically, yes, I mean
in order and post order traversal is

3
00:00:08.107 --> 00:00:11.908
literally just mean before you do the
recursing or after you do the recursing.

4
00:00:11.908 --> 00:00:14.173
And so when we do the next item,

5
00:00:14.173 --> 00:00:19.765
which of course is gonna be a DFS on
a graph list, meaning an adjacency list.

6
00:00:19.765 --> 00:00:23.949
We are gonna do both a pre and
postordering operation.

7
00:00:23.949 --> 00:00:27.774
You can in some sense do a pre or post,
it doesn't have the same meaning.

8
00:00:27.774 --> 00:00:32.635
Cuz a pre or post-order traversal means
you visit the node, do a recurse,

9
00:00:32.635 --> 00:00:35.272
or you do recurse, then visit the node.

10
00:00:35.272 --> 00:00:39.043
In a graph, we're gonna be
building a path, which means pre,

11
00:00:39.043 --> 00:00:42.240
we visit the node,
we put it in our pathway.

12
00:00:42.240 --> 00:00:46.270
We go and recurse, post,
we pop it from our pathway.

13
00:00:46.270 --> 00:00:51.330
So we're actually gonna do both a pre and
a post-order traversal right here.

14
00:00:51.330 --> 00:00:54.325
So again, just like before,
I'm gonna just fix this,

15
00:00:54.325 --> 00:00:56.790
because again who made this nonsense?

16
00:00:56.790 --> 00:01:01.170
Okay, again, let's not screw this up,
there is a null if we don't find it.

17
00:01:01.170 --> 00:01:02.025
We can't mess this one up.

18
00:01:02.025 --> 00:01:08.358
All right, so let's go function walk,
and we're gonna do the exact same thing.

19
00:01:08.358 --> 00:01:10.354
We need a graph, right?

20
00:01:10.354 --> 00:01:13.367
We also need what node
are we currently at.

21
00:01:13.367 --> 00:01:16.357
Oopsies, I gotta do this,
weightedAdjacencyList.

22
00:01:16.357 --> 00:01:18.352
And then with the node that we're at,
right,

23
00:01:18.352 --> 00:01:20.308
we're not gonna consider a source, right?

24
00:01:20.308 --> 00:01:23.844
We're only looking for
our sink or our needle, right?

25
00:01:23.844 --> 00:01:28.196
We're gonna have our needle, which has
a number of what we're looking for, and

26
00:01:28.196 --> 00:01:29.476
then we need a scenery.

27
00:01:29.476 --> 00:01:34.435
Remember this, we did this before,
we need a way to be able to know,

28
00:01:34.435 --> 00:01:36.698
have we seen this node before?

29
00:01:36.698 --> 00:01:38.623
Awesome, and do we need anything else?

30
00:01:38.623 --> 00:01:42.715
Of course we do, we need a path,
which is a list of numbers, correct?

31
00:01:42.715 --> 00:01:46.184
This is the path in which we
have taken to get to this point.

32
00:01:46.184 --> 00:01:48.444
All right, but what do we return?

33
00:01:48.444 --> 00:01:52.403
Well, if you recall from the last time
we did this, which was the maze solver.

34
00:01:52.403 --> 00:01:55.053
So if you don't know, the maze solver and

35
00:01:55.053 --> 00:01:58.020
this problem are almost
identical problems.

36
00:01:58.020 --> 00:02:01.073
They're effectively the exact same thing.

37
00:02:01.073 --> 00:02:05.266
You'll even notice that this really
is starting to look exactly the same.

38
00:02:05.266 --> 00:02:10.055
All right, so if I go back here, go to day
one and go to MazeSolver, and yeah, wait,

39
00:02:10.055 --> 00:02:11.280
I was already there.

40
00:02:13.552 --> 00:02:19.400
MazeSolver, you'll notice that walk had
our maze kind of like what our wall was,

41
00:02:19.400 --> 00:02:22.304
which was different, it has a current.

42
00:02:22.304 --> 00:02:26.603
It has our needle,
it has our scene, it has our path.

43
00:02:26.603 --> 00:02:30.050
It's pretty much the exact same
thing that we were just doing.

44
00:02:31.860 --> 00:02:32.404
There we go.

45
00:02:32.404 --> 00:02:34.120
So we have effectively the same thing,

46
00:02:34.120 --> 00:02:36.254
which means we're gonna need Boolean,
right?

47
00:02:36.254 --> 00:02:41.362
We're gonna need the null, if we've
actually found the ending to this.

48
00:02:41.362 --> 00:02:46.838
All right, so again, base cases, always
base cases when we're doing recursion,

49
00:02:46.838 --> 00:02:49.008
what are some base cases of this?

50
00:02:51.786 --> 00:02:53.100
&gt;&gt; We found a needle.

51
00:02:53.100 --> 00:02:54.790
&gt;&gt; We found our needle, beautiful.

52
00:02:54.790 --> 00:03:00.308
If (curr === needle), return true, right?

53
00:03:00.308 --> 00:03:01.411
We found it, we're done.

54
00:03:01.411 --> 00:03:06.518
We've done exactly what we wanted to do,
awesome, let's go.

55
00:03:06.518 --> 00:03:11.030
If we've already seen this,
right, if we've already seen

56
00:03:11.030 --> 00:03:16.210
current, We don't wanna look this way,
we're done looking, right?

57
00:03:16.210 --> 00:03:20.590
We've been here, the answer is not
in this area, go somewhere else.

58
00:03:20.590 --> 00:03:25.310
Awesome, all right, so now that we've done
that, we probably need our recurse step.

59
00:03:25.310 --> 00:03:29.940
Now remember, it's broken into three
things, previous, recurse, post.

60
00:03:29.940 --> 00:03:33.892
So previous or previous,
pre, the pre-order,

61
00:03:33.892 --> 00:03:38.139
the pre-operation should
be path.push(curr).

62
00:03:38.139 --> 00:03:40.820
We are now officially visiting this node,

63
00:03:40.820 --> 00:03:44.548
it is in our pathway to the potential end,
let's add it in.

64
00:03:44.548 --> 00:03:50.486
Then, the post step,
we need to pop out that node, right?

65
00:03:50.486 --> 00:03:54.063
So long as we push,
as long as every time we push, we pop,

66
00:03:54.063 --> 00:03:58.180
it will always maintain the order
of the array in the path we took.

67
00:03:58.180 --> 00:04:00.170
So we should be good to go.

68
00:04:00.170 --> 00:04:02.289
All right, so now it's the recursive step.

69
00:04:02.289 --> 00:04:03.873
How do we do the recurse?

70
00:04:03.873 --> 00:04:10.300
Well, the first thing we need is the list,
so const list = graph[curr], right?

71
00:04:10.300 --> 00:04:11.367
Cuz remember,

72
00:04:11.367 --> 00:04:16.460
an adjacency list is going to be
the graph edge, a list of graph edges.

73
00:04:16.460 --> 00:04:21.040
A graph edge is simply where it's going to
and the weight that is associated with it.

74
00:04:22.580 --> 00:04:23.813
Make sense, we're looking good?

75
00:04:23.813 --> 00:04:28.358
Awesome, all right, so
we've either seen it or we've seen it,

76
00:04:28.358 --> 00:04:33.002
it's either our answer, or
we have to recurse it, so there we go.

77
00:04:33.002 --> 00:04:36.854
We have a list, which if you look at it,
it's just a list of graph edges,

78
00:04:36.854 --> 00:04:38.930
who is this node connected to?

79
00:04:38.930 --> 00:04:41.410
And so now we need to do
the exact same thing again.

80
00:04:42.930 --> 00:04:48.630
Except for, ooh, I did forget one thing,
we need to now see current, right?

81
00:04:49.760 --> 00:04:53.226
We make sure it's false,
then we flip it to true.

82
00:04:53.226 --> 00:04:56.470
We don't wanna mess that up, right,
because, of course, this is recursion,

83
00:04:56.470 --> 00:04:57.675
this is not doing iterative.

84
00:04:57.675 --> 00:05:01.130
Iterative I put the scene usually in
a different area as we did with BFS,

85
00:05:01.130 --> 00:05:03.386
which is usually before
we add it to the queue.

86
00:05:03.386 --> 00:05:05.582
And this one, we do the scene afterwards,

87
00:05:05.582 --> 00:05:09.248
after we've successfully passed
the base cases, which makes sense.

88
00:05:09.248 --> 00:05:13.804
Because the base cases are a part
of the loop in a BFS, right?

89
00:05:13.804 --> 00:05:16.426
You'll notice that I go,
hey, have we seen you?

90
00:05:16.426 --> 00:05:18.040
Hey, are you an actual node?

91
00:05:18.040 --> 00:05:19.011
Hey, we do that.

92
00:05:19.011 --> 00:05:20.663
So it's the same kind of idea.

93
00:05:20.663 --> 00:05:23.976
So there we go, we've seen it,
we've pushed it, we have grabbed the list.

94
00:05:23.976 --> 00:05:29.351
And now we simply need to walk this
list until either we find the needle,

95
00:05:29.351 --> 00:05:32.411
or we exhaust our list and return false.

96
00:05:32.411 --> 00:05:37.245
So let's put the return false cuz that is
obviously the easier of the two answers.

97
00:05:37.245 --> 00:05:42.566
And now let's go for let i = 0,
i has to be &lt; lists.length ++ i.

98
00:05:42.566 --> 00:05:46.581
We always use for loops,
we don't do the kind of the array methods,

99
00:05:46.581 --> 00:05:50.820
because you have to be able to return or
break out of often an algorithm.

100
00:05:50.820 --> 00:05:54.887
So those kinda convenient functions
just aren't an option in this world, and

101
00:05:54.887 --> 00:05:56.251
this means not an option.

102
00:05:56.251 --> 00:06:00.371
I don't know how I got this hand gesture,
it's just part of talking and

103
00:06:00.371 --> 00:06:01.479
moving the hands.

104
00:06:01.479 --> 00:06:07.966
Okay, so if (list [i], let's go like this,
let's create an edge, right?

105
00:06:07.966 --> 00:06:09.511
Make sure you name these things easy,

106
00:06:09.511 --> 00:06:12.420
cuz where else are you gonna get all
of your values mixed up in your head.

107
00:06:12.420 --> 00:06:17.420
All right, so we have an edge,
so if, not checker seen,

108
00:06:17.420 --> 00:06:21.604
if(walk(graph, then what's our current?

109
00:06:21.604 --> 00:06:23.812
What is our current going be?

110
00:06:23.812 --> 00:06:28.745
Our current, of course,
is going to be the edge, right, edge.2.

111
00:06:28.745 --> 00:06:32.558
Now, we're looking for the needle, needle,
and then what are the other items?

112
00:06:32.558 --> 00:06:33.635
Have we seen this?

113
00:06:33.635 --> 00:06:36.529
And of course our pathway, so there we go.

114
00:06:36.529 --> 00:06:40.329
So if we successfully walk this path and
find the needle,

115
00:06:40.329 --> 00:06:43.210
therefore we need to break out of this.

116
00:06:43.210 --> 00:06:45.040
We have found it, we're good.

117
00:06:45.040 --> 00:06:48.687
But there is one problem to our breaking.

118
00:06:48.687 --> 00:06:54.570
If we return true here,
do we have the end in our path?

119
00:06:55.690 --> 00:06:56.770
No, we don't, so

120
00:06:56.770 --> 00:07:01.234
we can either move that check below
the path right here to maintain recursion.

121
00:07:01.234 --> 00:07:05.554
Or we can just do another way,
which I also think is kind of easy,

122
00:07:05.554 --> 00:07:08.116
just simply pushing edge.2 right?

123
00:07:08.116 --> 00:07:10.679
Just throw it in, right,
we're gonna throw it in, post it.

124
00:07:10.679 --> 00:07:14.636
You can do either way, I like it this way,
that's good enough for me.

125
00:07:14.636 --> 00:07:17.823
So instead of breaking though,
we don't wanna break, cuz of what happens?

126
00:07:17.823 --> 00:07:21.617
We pop, we return false, bad.

127
00:07:21.617 --> 00:07:23.300
Return true, there we go.

128
00:07:23.300 --> 00:07:28.215
So that way we can send the signal
back up the recursive stack, so

129
00:07:28.215 --> 00:07:29.953
that each place pops.

130
00:07:29.953 --> 00:07:32.039
That makes sense?

131
00:07:32.039 --> 00:07:34.549
But I don't really like this,
I feel like I'm gonna get a bug.

132
00:07:34.549 --> 00:07:36.997
So what I'm gonna do is I'm
actually gonna remove this,

133
00:07:36.997 --> 00:07:38.993
I just feel like that's
gonna turn into a bug.

134
00:07:38.993 --> 00:07:43.425
I just feel it, feel it,
we are gonna put this right here, and

135
00:07:43.425 --> 00:07:45.746
I wanna maintain that perfect.

136
00:07:48.422 --> 00:07:50.175
There we go.

137
00:07:50.175 --> 00:07:51.550
Yeah, why don't I just do this?

138
00:07:53.214 --> 00:07:53.911
There we go.

139
00:07:53.911 --> 00:07:55.012
I don't know why I didn't do that.

140
00:07:55.012 --> 00:07:56.896
So there we go.

141
00:07:56.896 --> 00:07:58.885
If we have the needle,
then we returned true,

142
00:07:58.885 --> 00:08:00.773
we just wanna make sure
we put the needle in.

143
00:08:00.773 --> 00:08:04.212
If we do it down here, I'm afraid that
we're gonna get a whole bunch of additions

144
00:08:04.212 --> 00:08:05.286
that I don't want to do.

145
00:08:05.286 --> 00:08:08.529
And so I don't wanna reverse
add all the path back in, so

146
00:08:08.529 --> 00:08:11.020
we would actually double add everything.

147
00:08:11.020 --> 00:08:14.533
Saw that one coming, saw it coming
from a mile away, and there we go.

148
00:08:14.533 --> 00:08:16.840
We've now officially done the walking.

149
00:08:16.840 --> 00:08:19.515
We use our pre-step to be
able to push the path and

150
00:08:19.515 --> 00:08:21.743
create the structurally correct path.

151
00:08:21.743 --> 00:08:26.236
We use the pop at the end if we never
found that path in this branch of

152
00:08:26.236 --> 00:08:27.066
the graph.

153
00:08:27.066 --> 00:08:30.101
All right, so now all we need to do
is just simply call this function.

154
00:08:30.101 --> 00:08:34.362
So of course,
const seen equals a boolean array,

155
00:08:34.362 --> 00:08:39.231
right, which equals new array,
which is gonna be what,

156
00:08:39.231 --> 00:08:43.406
(graph.length).(fill false), right?

157
00:08:43.406 --> 00:08:46.043
This is just the work part, right?

158
00:08:46.043 --> 00:08:48.880
Path, which is gonna be a number array.

159
00:08:50.580 --> 00:08:52.910
Awesome, okay, we kinda got this, right?

160
00:08:52.910 --> 00:08:56.380
So that means all we need to do now is,
what did we call this thing, walk?

161
00:08:56.380 --> 00:08:57.614
Okay, we called it walk.

162
00:08:57.614 --> 00:09:01.164
Walk, and now we need to pass it in,
what is it?

163
00:09:01.164 --> 00:09:06.979
And to do graph, our source,
where we want to start from,

164
00:09:06.979 --> 00:09:11.027
our needle, seen, path, there we go.

165
00:09:11.027 --> 00:09:12.560
We walk all the way there.

166
00:09:12.560 --> 00:09:15.785
And of course I created this again,
just a stupid interface.

167
00:09:15.785 --> 00:09:20.615
If (path.length ==0) return null,
gosh, what kinda programmer am I?

168
00:09:20.615 --> 00:09:27.202
Return path,
an empty path would have been perfect.

169
00:09:27.202 --> 00:09:27.820
So there we go.

170
00:09:27.820 --> 00:09:31.581
So long as I've done this correctly,
I should be able to DFS graph, and

171
00:09:31.581 --> 00:09:34.917
if this is correct, okay,
we're only running the first one.

172
00:09:34.917 --> 00:09:39.717
Boom, we got it, awesome, so
we did just depth- first search our graph,

173
00:09:39.717 --> 00:09:43.420
and returned the path from
the source to the needle.

174
00:09:43.420 --> 00:09:45.503
Now, the real question is,
what is the running time of this?

175
00:09:48.349 --> 00:09:52.638
Well, if you think about it, if you
think about it, what's gonna happen is

176
00:09:52.638 --> 00:09:56.993
that every single node, if the very
last node we check is our needle, right,

177
00:09:56.993 --> 00:10:01.340
that would be the worst case or
actually, the worst case is our needle.

178
00:10:01.340 --> 00:10:04.490
There is no path to our needle cuz the
needle just doesn't even exist on a graph.

179
00:10:04.490 --> 00:10:10.738
But assuming we're given a valid node,
it'd be the last one that is searched,

180
00:10:10.738 --> 00:10:15.416
meaning that we will check
every single edge once, right?

181
00:10:15.416 --> 00:10:18.478
Because then we'd have to have
a separate edge this direction,

182
00:10:18.478 --> 00:10:20.924
which we'll check that
once at every single node.

183
00:10:20.924 --> 00:10:24.786
We will also visit every single edge or
node once.

184
00:10:24.786 --> 00:10:28.671
We will never visit a node more than once,
correct?

185
00:10:28.671 --> 00:10:30.105
Well, I mean, you could argue, well,

186
00:10:30.105 --> 00:10:33.120
actually you call a function when you do
the depth-first search, which does this.

187
00:10:33.120 --> 00:10:35.600
And the breadth-first search,
you do the scene check first.

188
00:10:35.600 --> 00:10:39.317
So maybe, maybe, maybe, well, yeah,
okay, so maybe you could say,

189
00:10:39.317 --> 00:10:42.460
you could check every node
in some sense twice, maybe.

190
00:10:42.460 --> 00:10:46.992
But the reality is what you're gonna be
doing is you're gonna be searching a V +

191
00:10:46.992 --> 00:10:47.680
E, right?

192
00:10:47.680 --> 00:10:53.270
You're gonna check every single vertex and
every single edge, there you go.

193
00:10:53.270 --> 00:10:56.780
So that is our running time really,
it's fantastic.

194
00:10:56.780 --> 00:11:00.630
We did it, we figured it out,
awesome, we've done it.

195
00:11:00.630 --> 00:11:04.396
We're the fastest, smoothest, greatest
searchers of graphs and matrices, but

196
00:11:04.396 --> 00:11:07.350
then, my goodness, they're like,
this is just terrible.

197
00:11:07.350 --> 00:11:11.328
You can tell me it exists, but
I want the shortest path there.

198
00:11:11.328 --> 00:11:14.291
I don't want to have to
walk the whole dang graph,

199
00:11:14.291 --> 00:11:16.915
I wanna be able to do
the fastest walk there.

200
00:11:16.915 --> 00:11:19.017
So you can imagine the Internet,

201
00:11:19.017 --> 00:11:22.927
it doesn't just take our path
from your house to say England.

202
00:11:22.927 --> 00:11:26.698
It's gonna take the best path from here or
likely the best path.

203
00:11:26.698 --> 00:11:30.794
Maybe there is some level of error,
I don't know what the level of error is in

204
00:11:30.794 --> 00:11:34.320
the Internet graphing, but
I assume it's pretty dang perfect.

