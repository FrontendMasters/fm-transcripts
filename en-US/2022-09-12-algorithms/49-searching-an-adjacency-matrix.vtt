WEBVTT

1
00:00:00.000 --> 00:00:02.054
So how are graphs represented?

2
00:00:02.054 --> 00:00:04.734
Usually, there's two ways
you represent a graph.

3
00:00:04.734 --> 00:00:08.855
There are third ways,
you could actually build a full graph

4
00:00:08.855 --> 00:00:13.153
node structure in which has
references to other graph nodes.

5
00:00:13.153 --> 00:00:18.463
And it'd be some sort of tuple of say,
weight and other node, right?

6
00:00:18.463 --> 00:00:21.494
You could have a list of
children in this kind of sense.

7
00:00:21.494 --> 00:00:23.841
But often, it's not made that way.

8
00:00:23.841 --> 00:00:25.826
Often, graphs look a little bit different.

9
00:00:25.826 --> 00:00:29.796
So the two major ways in which I've seen
graphs be implemented, which was true when

10
00:00:29.796 --> 00:00:33.423
I went to college, not all these things
that are true when I went to college,

11
00:00:33.423 --> 00:00:37.246
things have changed since I went to
college, especially when it comes to maps.

12
00:00:37.246 --> 00:00:40.596
But when it comes to graphs,
there's usually two ways.

13
00:00:40.596 --> 00:00:46.549
So there is the adjacency list and
then there's the adjacency matrix.

14
00:00:46.549 --> 00:00:49.862
And they both kind of have their uses,
but in general,

15
00:00:49.862 --> 00:00:52.901
what you're going to see
is predominantly this.

16
00:00:52.901 --> 00:00:57.259
You will rarely see this, and the reason
why is that it takes a lot of memory and

17
00:00:57.259 --> 00:00:58.545
setup to be able to do.

18
00:00:58.545 --> 00:01:02.016
If you were to set it up,
it takes OV squared.

19
00:01:02.016 --> 00:01:05.412
In other words, running time of OV,
yeah, vertex squared.

20
00:01:05.412 --> 00:01:08.214
So let's first do an adjacency list.

21
00:01:08.214 --> 00:01:11.910
So often, when you're representing
a graph here, I'm gonna draw this out,

22
00:01:11.910 --> 00:01:13.143
let's just draw one out.

23
00:01:13.143 --> 00:01:13.647
We'll go like this.

24
00:01:13.647 --> 00:01:19.173
I'll just call this one 0, 1, 2, 3.

25
00:01:19.173 --> 00:01:21.599
So let's draw this as I directed to.

26
00:01:21.599 --> 00:01:26.256
So 0 is gonna point to 3 and
1, 3 will point to 1, and

27
00:01:26.256 --> 00:01:29.639
3 will point to 2, 2 will point to 0.

28
00:01:29.639 --> 00:01:32.367
There we go, we kinda have this
little graph going on here.

29
00:01:32.367 --> 00:01:38.323
So an adjacency list will be a list
in which the indice maps to this.

30
00:01:38.323 --> 00:01:41.157
So 0 represents node zero.

31
00:01:41.157 --> 00:01:44.105
So node zero will have a list of edges.

32
00:01:44.105 --> 00:01:49.033
So you could imagine something that
looks a little something like this,

33
00:01:49.033 --> 00:01:53.654
to: 1, and then we could put
a weight that's associated with it.

34
00:01:53.654 --> 00:01:57.286
So if this thing was 10, we could put 10.

35
00:01:57.286 --> 00:01:59.681
There we go, there would actually
be another one, obviously, right?

36
00:01:59.681 --> 00:02:01.871
We'd also have to specify three, right?

37
00:02:01.871 --> 00:02:03.750
So we could have 3 and
then some sort of value.

38
00:02:03.750 --> 00:02:05.035
You see what we're doing there.

39
00:02:05.035 --> 00:02:05.712
You can do a tuple.

40
00:02:05.712 --> 00:02:09.398
It doesn't have to be an object here,
but you need some way to describe

41
00:02:09.398 --> 00:02:13.407
where it's going plus the weight that
is associated with that connection.

42
00:02:13.407 --> 00:02:17.138
So it's a list of edges in this,
in other words, an adjacency list.

43
00:02:17.138 --> 00:02:18.286
What am I adjacent to?

44
00:02:18.286 --> 00:02:20.578
Adjacency meaning you
have a connection to.

45
00:02:20.578 --> 00:02:23.114
And so then position one
would have the same thing.

46
00:02:23.114 --> 00:02:25.833
It would also have a list
in which is an empty list.

47
00:02:25.833 --> 00:02:28.263
I didn't even realize it,
1 is a terminal right there.

48
00:02:28.263 --> 00:02:31.614
And then 2 would have
a single item pointing to 0.

49
00:02:31.614 --> 00:02:36.526
So 2 would be 0 with
a weight of something.

50
00:02:36.526 --> 00:02:40.145
And then 3 would have its own, which would
actually have two items in there, right?

51
00:02:44.100 --> 00:02:45.448
Does that make sense?

52
00:02:45.448 --> 00:02:48.270
Yeah, I think that that's usually
a pretty good way to kinda look at it.

53
00:02:48.270 --> 00:02:50.950
This seems to be a pretty
popular way to represent it.

54
00:02:50.950 --> 00:02:52.893
The other way is an adjacency matrix.

55
00:02:52.893 --> 00:02:57.027
In other words, what we're going
to have is we're gonna have rows,

56
00:02:57.027 --> 00:02:58.684
each representing a node.

57
00:02:58.684 --> 00:03:01.555
So this is node 0, 1, 2, 3.

58
00:03:01.555 --> 00:03:05.293
And this, of course, is 0, 1, 2, 3.

59
00:03:05.293 --> 00:03:08.348
So that means,
does 0 have a connection to 0?

60
00:03:08.348 --> 00:03:09.052
No.

61
00:03:09.052 --> 00:03:10.260
Does 0 have a connection to 1?

62
00:03:10.260 --> 00:03:11.878
Yes, and its weight is 10.

63
00:03:11.878 --> 00:03:13.254
Does 0 have a connection to 2?

64
00:03:13.254 --> 00:03:15.416
No.
Does 0 have a connection to 3?

65
00:03:15.416 --> 00:03:17.415
Yes, it's weight is 5.

66
00:03:17.415 --> 00:03:19.358
There we go.

67
00:03:19.358 --> 00:03:23.766
So, we write it out that way, which means
we can also have asymmetric relationships.

68
00:03:23.766 --> 00:03:27.228
Let's look at one,
because 0 has a connection to 1,

69
00:03:27.228 --> 00:03:30.783
but 1 does not have a connection to 1 or
any other node.

70
00:03:30.783 --> 00:03:32.342
So you can kind of see
how this is working.

71
00:03:32.342 --> 00:03:34.735
We're saying how the connections are made.

72
00:03:34.735 --> 00:03:36.270
And so there you go.

73
00:03:36.270 --> 00:03:39.839
This is usually a way that I've seen
these things done, and the problem,

74
00:03:39.839 --> 00:03:42.906
of course, again, is memory and
how you have to represent it.

75
00:03:42.906 --> 00:03:43.991
If you had 100 nodes,

76
00:03:43.991 --> 00:03:47.311
you'd have to create 100 by 100 matrix
to be able to represent it all.

77
00:03:47.311 --> 00:03:48.768
If you had 1000 nodes, it grows.

78
00:03:48.768 --> 00:03:53.230
If it's sparsely connected you're gonna
use a ton of memory to represent a few

79
00:03:53.230 --> 00:03:54.589
points of connection.

80
00:03:54.589 --> 00:03:58.754
And as you can imagine, you could just
never use one of these for say maps.

81
00:03:58.754 --> 00:04:02.928
You'd only just have just a little bit
of a city in there, and you'd have so

82
00:04:02.928 --> 00:04:06.464
many connections that this thing
would immediately explode.

83
00:04:06.464 --> 00:04:09.264
So it's unlikely that
this is used in maps.

84
00:04:09.264 --> 00:04:16.040
And unless of Google has done something
very magical that we do not know about.

85
00:04:16.040 --> 00:04:19.462
Do we have any questions on
the representation of a graph?

86
00:04:23.315 --> 00:04:24.703
All right, cool.

87
00:04:24.703 --> 00:04:29.264
All right, so basic searches
are still available, correct?

88
00:04:29.264 --> 00:04:30.159
Well, they should be, right?

89
00:04:30.159 --> 00:04:32.802
Because if all trees are graphs, and

90
00:04:32.802 --> 00:04:37.498
we can breadth first search a tree,
why can't we do with a graph?

91
00:04:37.498 --> 00:04:38.749
Of course, we can, right?

92
00:04:38.749 --> 00:04:40.170
Of course, we can.

93
00:04:40.170 --> 00:04:41.362
So we do the exact same thing.

94
00:04:41.362 --> 00:04:44.335
Let's say we start at 0, and
let's do a depth first search.

95
00:04:44.335 --> 00:04:45.953
We are going to push in 1.

96
00:04:45.953 --> 00:04:51.226
So right now, we have 0 on the stack,
and we're gonna push in 1 on the stack.

97
00:04:51.226 --> 00:04:52.750
1 is gonna have no connection.

98
00:04:52.750 --> 00:04:54.797
So we'll pop 1 off the stack.

99
00:04:54.797 --> 00:04:58.611
We're gonna push in 3 on the stack,
3 has two connections.

100
00:04:58.611 --> 00:05:01.445
One we've already seen, so
we're not gonna go to that one.

101
00:05:01.445 --> 00:05:05.624
And 2, 2 has one connection,
which is 0, which we've already seen.

102
00:05:05.624 --> 00:05:09.144
We'll pop that one off the stack three has
no more children, we'll pop that one off

103
00:05:09.144 --> 00:05:12.175
the stack zero has no more children,
we'll pop that one off the stack.

104
00:05:12.175 --> 00:05:12.899
There we go.

105
00:05:12.899 --> 00:05:16.339
Exact same thing,
except we don't pop and push on a stack.

106
00:05:16.339 --> 00:05:19.771
We call a function we use recursion,
right?

107
00:05:19.771 --> 00:05:23.376
Absolutely, all right,
same thing with breadth first search,

108
00:05:23.376 --> 00:05:25.413
we just simply have a queue, right?

109
00:05:25.413 --> 00:05:28.478
So we start off with 0 in the queue,
and then from 0,

110
00:05:28.478 --> 00:05:30.191
we need to push on some items.

111
00:05:30.191 --> 00:05:33.093
We're gonna push on 1,
and we're gonna push on 3.

112
00:05:33.093 --> 00:05:37.637
From 1, so 0 gets popped off, then 1 gets
popped off, and what we have left is 3,

113
00:05:37.637 --> 00:05:39.366
because 1 has no connections.

114
00:05:39.366 --> 00:05:43.453
We then pop off 3, 3 pushes on
2 because we've already seen 1.

115
00:05:43.453 --> 00:05:46.992
So therefore, we now do that,
we push off 2, 2 tries to look at 0,

116
00:05:46.992 --> 00:05:48.345
0 has already been seen.

117
00:05:48.345 --> 00:05:50.789
We do not need to put it on there,
therefore, we're done.

118
00:05:50.789 --> 00:05:55.482
So breadth first search, depth first
search work identical as they do with

119
00:05:55.482 --> 00:05:59.887
graphs, because again, trees are graphs,
makes it pretty simple.

120
00:05:59.887 --> 00:06:03.187
If you know how to do one,
you can really do the other.

121
00:06:03.187 --> 00:06:05.872
And just for fun, let's do one.

122
00:06:05.872 --> 00:06:10.335
We'll do a breadth first search
on an adjacency matrix, and

123
00:06:10.335 --> 00:06:13.760
we'll do a depth search
on an adjacency list.

124
00:06:13.760 --> 00:06:16.376
You guys excited?

125
00:06:16.376 --> 00:06:19.410
Awesome, let's leave this thing.

126
00:06:19.410 --> 00:06:23.265
And let's go into here and
let's do a, look at that,

127
00:06:23.265 --> 00:06:25.805
a BFS on a weighted adjacency matrix.

128
00:06:25.805 --> 00:06:29.467
Of course, I created this type just so
I don't have to type it out.

129
00:06:29.467 --> 00:06:31.515
It's just a 2D number grid, right?

130
00:06:31.515 --> 00:06:35.183
Pretty easy, I think we could
have seen that one coming.

131
00:06:35.183 --> 00:06:39.483
Just to make this a little bit easier,
if we're gonna do a breadth first search,

132
00:06:39.483 --> 00:06:40.635
what do we need to do?

133
00:06:40.635 --> 00:06:41.685
Well, we need a source.

134
00:06:41.685 --> 00:06:43.754
We need to know where we're starting from.

135
00:06:43.754 --> 00:06:45.624
We need to know what we're looking for.

136
00:06:45.624 --> 00:06:51.025
And we want to be able to
return the path that we took.

137
00:06:51.025 --> 00:06:53.380
Now, this is kind of interesting,
all right?

138
00:06:53.380 --> 00:06:54.360
So if we were to do this,

139
00:06:54.360 --> 00:06:57.454
we're gonna really apply this whole
breadth first search thing to graph.

140
00:06:57.454 --> 00:06:59.100
We're gonna need to come up with a path.

141
00:06:59.100 --> 00:07:03.825
Now, this is kind a tricky problem,
cuz it's like, okay, how do we do this?

142
00:07:03.825 --> 00:07:06.423
Well, let's go back to this thing for
a quick second.

143
00:07:06.423 --> 00:07:09.244
So it doesn't really matter
how we represent our graph,

144
00:07:09.244 --> 00:07:11.492
whether it's an adjacency list or
a matrix.

145
00:07:11.492 --> 00:07:13.472
Breadth first search
still involves a queue.

146
00:07:13.472 --> 00:07:16.997
But it needs to involve one other
thing to be able to understand a path.

147
00:07:16.997 --> 00:07:19.407
Normally in a tree operation,
we don't consider path.

148
00:07:19.407 --> 00:07:22.603
It's usually irrelevant cuz we're just
going down until we find the value.

149
00:07:22.603 --> 00:07:26.878
But in a graph, when we're doing a search,
we often want the path or

150
00:07:26.878 --> 00:07:29.436
something associated with it, right?

151
00:07:29.436 --> 00:07:31.073
Yeah, that's right.

152
00:07:31.073 --> 00:07:32.010
Okay, cool.

153
00:07:32.010 --> 00:07:33.404
Thank you, everybody in the audience.

154
00:07:33.404 --> 00:07:36.495
So, how are we gonna represent that?

155
00:07:36.495 --> 00:07:40.039
Well, depth first search
is obviously much easier.

156
00:07:40.039 --> 00:07:45.346
Again, we have a pre-condition,
we have a post-condition,

157
00:07:45.346 --> 00:07:49.879
which means we can push and
it means we can pop, right?

158
00:07:49.879 --> 00:07:54.359
So we can just build our path as we
recuse, which makes it super simple.

159
00:07:54.359 --> 00:07:57.068
But a breadth first search,
we don't have recursion,

160
00:07:57.068 --> 00:08:01.061
we don't have something that maintains
the shape or the structure of our search.

161
00:08:01.061 --> 00:08:03.094
Therefore, we need to
maintain it ourselves.

162
00:08:03.094 --> 00:08:06.647
And so the best way I've seen this done
is you create something called a previous

163
00:08:06.647 --> 00:08:09.736
array, which is usually filled
with something like negative ones.

164
00:08:09.736 --> 00:08:13.645
Since no node has a -1,
we don't have to worry about that.

165
00:08:13.645 --> 00:08:19.194
And so then what we have here is the
previous array is with whom I came from,

166
00:08:19.194 --> 00:08:19.831
right?

167
00:08:19.831 --> 00:08:24.166
And so we also mean we need this couplet
with like a scene array, something in

168
00:08:24.166 --> 00:08:28.318
which or a visited array, which means
I've already visited this node.

169
00:08:28.318 --> 00:08:32.862
So this would be a series
of falses to begin with.

170
00:08:32.862 --> 00:08:34.604
Does that make sense?

171
00:08:34.604 --> 00:08:38.808
That means, let's say we visit node zero.

172
00:08:38.808 --> 00:08:42.416
All right, we visit node zero,
it doesn't have any parents.

173
00:08:42.416 --> 00:08:43.937
This is where we started.

174
00:08:43.937 --> 00:08:47.955
So we don't have to worry about putting
a parent or anything in there, right?

175
00:08:47.955 --> 00:08:48.634
That makes sense.

176
00:08:48.634 --> 00:08:49.901
It just starts off with a -1.

177
00:08:49.901 --> 00:08:50.474
There is no parents.

178
00:08:50.474 --> 00:08:51.914
That's where we started.

179
00:08:51.914 --> 00:08:54.493
But we can set seen the truth.

180
00:08:54.493 --> 00:08:55.720
So let's actually work this thing out.

181
00:08:55.720 --> 00:08:59.727
I'm gonna create a new graph or
a new window right here, and

182
00:08:59.727 --> 00:09:04.147
let's redraw something very,
very similar to what we just had.

183
00:09:04.147 --> 00:09:04.774
And for fun,

184
00:09:04.774 --> 00:09:08.673
I'm gonna add in a fifth item right over
here just to make this little bit better.

185
00:09:08.673 --> 00:09:12.339
So like this 0, 1, 2, 3,

186
00:09:12.339 --> 00:09:16.854
4, 0 can go to 2 with a weight of 4.

187
00:09:16.854 --> 00:09:20.240
It can go to 3 with a weight of 2.

188
00:09:20.240 --> 00:09:23.675
We can go here with a weight of 5.

189
00:09:23.675 --> 00:09:29.134
And of course, we can go here with 1,1,

190
00:09:29.134 --> 00:09:32.173
and then we can go here.

191
00:09:32.173 --> 00:09:34.773
Let's not do that one cuz I
don't wanna ruin the searching.

192
00:09:34.773 --> 00:09:36.740
I'll just be so quick if I do it that way.

193
00:09:36.740 --> 00:09:38.442
And a weight of 5, right?

194
00:09:38.442 --> 00:09:39.245
There we go.

195
00:09:39.245 --> 00:09:40.110
This looks great.

196
00:09:40.110 --> 00:09:42.604
So we can actually make it through this.

197
00:09:42.604 --> 00:09:47.925
So of course, we start off with our
seen array as a bunch of falses.

198
00:09:47.925 --> 00:09:50.944
And we see our previous array
as a bunch of negative ones.

199
00:09:50.944 --> 00:09:54.225
No one has a parent yet,
they haven't been visited yet.

200
00:09:54.225 --> 00:09:57.164
And of course,
we start off with our queue,

201
00:09:57.164 --> 00:10:01.224
which has our source node in,
I'll use 0 as my source node.

202
00:10:01.224 --> 00:10:02.526
We're all good?

203
00:10:02.526 --> 00:10:03.744
Awesome.

204
00:10:03.744 --> 00:10:06.914
All right, so let's try to do this,
we're gonna do a breadth first search.

205
00:10:06.914 --> 00:10:11.719
So breadth first search, of course,
we pop off the current node, and

206
00:10:11.719 --> 00:10:14.333
we'll also set the first one to true.

207
00:10:14.333 --> 00:10:17.708
I just realized we should probably set
that one to true, and the rest will be

208
00:10:17.708 --> 00:10:20.667
falses cuz we do put it into our
array before we start our cursing.

209
00:10:20.667 --> 00:10:23.470
So we kinda need to say hey
the source one, that one's true.

210
00:10:23.470 --> 00:10:26.103
We've already seen that one,
and it has no parent.

211
00:10:26.103 --> 00:10:29.606
So we're gonna do the lord's loop again,
a nice do while.

212
00:10:29.606 --> 00:10:32.899
And we'll keep doing that
until our queue is empty.

213
00:10:32.899 --> 00:10:35.862
So I'm just gonna go way down here
to where I can't screw this up.

214
00:10:35.862 --> 00:10:40.860
I say I can't screw it up but
there's always a chance, queued up.

215
00:10:40.860 --> 00:10:42.688
While we have length inside of our queue.

216
00:10:42.688 --> 00:10:45.795
We're gonna assume the JavaScript
array behaves like a queue.

217
00:10:45.795 --> 00:10:51.643
We're not going to just consider its
n like properties for shifting off.

218
00:10:51.643 --> 00:10:52.782
All right, awesome.

219
00:10:52.782 --> 00:10:56.993
So the first thing we're gonna
do is we're gonna go like this,

220
00:10:56.993 --> 00:11:01.372
current equals Q.deque,
grab the first thing out of our queue.

221
00:11:01.372 --> 00:11:05.622
All right, from here,
we need to get all of its children and

222
00:11:05.622 --> 00:11:07.926
add them all to our Q, correct?

223
00:11:07.926 --> 00:11:10.082
Well, technically we're searching for
something.

224
00:11:10.082 --> 00:11:15.403
So we're definitely going to want to
do our effectively our break case,

225
00:11:15.403 --> 00:11:20.548
which is going to be, if current value or
if current equals what we're

226
00:11:20.548 --> 00:11:25.453
searching for, say our needle,
then we're gonna want to break.

227
00:11:25.453 --> 00:11:26.849
If not, we need to do something?

228
00:11:26.849 --> 00:11:31.636
So, for each child in our current, right?

229
00:11:31.636 --> 00:11:34.985
So pretending either this is adjacency
array or an adjacency matrix.

230
00:11:34.985 --> 00:11:38.239
So in a matrix, you'd have to go through,
and every time you hit a zero, you'd

231
00:11:38.239 --> 00:11:41.752
continue, every time you hit a non-zero,
you'd say, hey, this is a connection.

232
00:11:41.752 --> 00:11:43.662
Let's look at it.

233
00:11:43.662 --> 00:11:47.617
If we've seen this, if seen, we continue.

234
00:11:49.636 --> 00:11:52.090
If we're not seen,
we had to do a couple things.

235
00:11:52.090 --> 00:11:58.436
We're gonna go seen[C] = true.

236
00:11:58.436 --> 00:12:05.105
Then we also need to say previous,
c was added by current.

237
00:12:05.105 --> 00:12:06.402
Do you see how that works?

238
00:12:06.402 --> 00:12:10.943
So now we know who brought
us into this search.

239
00:12:10.943 --> 00:12:16.598
By doing that, that will give us our
path backwards through our search.

240
00:12:16.598 --> 00:12:21.853
All right, at this point,
we now push into our Q, right?

241
00:12:21.853 --> 00:12:25.956
Q push, it's not push, it should be
in Q but that's such a long word,

242
00:12:25.956 --> 00:12:29.874
it has so many use and ease in it I
don't know how to spell that word.

243
00:12:29.874 --> 00:12:32.157
We're gonna push in C.

244
00:12:32.157 --> 00:12:35.965
There we go, that's pretty much it,
that's how we're gonna do it at the very,

245
00:12:35.965 --> 00:12:36.478
very end.

246
00:12:36.478 --> 00:12:40.881
Of course, we're gonna have to walk
backwards in our previous array, right?

247
00:12:40.881 --> 00:12:44.560
We'll have our previous,
if we start from our needle,

248
00:12:44.560 --> 00:12:48.022
if we never got to our needle,
it should equal -1.

249
00:12:48.022 --> 00:12:50.969
If we did get to our needle,
we would know who added it,

250
00:12:50.969 --> 00:12:55.473
then we could go to our previous array for
who added it, and we'd know who add that.

251
00:12:55.473 --> 00:12:58.346
We went to a previous array for
that, we know who add buzz, and

252
00:12:58.346 --> 00:13:01.352
who had buzz would be buzz and
who had a buzz would be foo, right?

253
00:13:01.352 --> 00:13:04.628
We'd be able to walk through all
the arrays until we got back.

254
00:13:04.628 --> 00:13:06.970
So let's see this in more practical terms.

