WEBVTT

1
00:00:00.000 --> 00:00:01.578
So, hey, you know what?

2
00:00:01.578 --> 00:00:04.104
What happened if we inserted 51?

3
00:00:04.104 --> 00:00:05.086
All right, so let's do this.

4
00:00:05.086 --> 00:00:06.264
So the insertion algorithm, or

5
00:00:06.264 --> 00:00:08.758
actually before we do that,
let's quickly do the find algorithm.

6
00:00:08.758 --> 00:00:10.727
What is the running time
of the find algorithm?

7
00:00:14.474 --> 00:00:15.756
It's a bit tricky.

8
00:00:19.125 --> 00:00:23.794
So your probably gut instinct is to say
something along the lines of log n, right?

9
00:00:23.794 --> 00:00:29.968
We're effectively splitting our
input in half every single time.

10
00:00:29.968 --> 00:00:31.884
It's not quite accurate.

11
00:00:31.884 --> 00:00:33.628
Up we have a question.

12
00:00:33.628 --> 00:00:34.807
&gt;&gt; n log n.

13
00:00:34.807 --> 00:00:35.769
&gt;&gt; n log n?

14
00:00:35.769 --> 00:00:37.737
No, because we do not visit every node.

15
00:00:37.737 --> 00:00:40.526
So the n would require us
to visit every node and

16
00:00:40.526 --> 00:00:43.253
we'd have to visit it
a log n amount of times.

17
00:00:43.253 --> 00:00:44.618
So we're not gonna be doing that.

18
00:00:44.618 --> 00:00:45.977
That's a good guess, though.

19
00:00:45.977 --> 00:00:48.123
At least, you got the n log n part, right?

20
00:00:48.123 --> 00:00:51.229
Gut check, good, you did that.

21
00:00:51.229 --> 00:00:54.349
&gt;&gt; Worst case is o of n, right?

22
00:00:54.349 --> 00:00:57.684
&gt;&gt; Yes, in this case,
the worst case is o of n with this.

23
00:00:57.684 --> 00:01:00.414
But we usually don't measure it in o of n,

24
00:01:00.414 --> 00:01:03.695
what we'll actually measure
it in is o of height.

25
00:01:03.695 --> 00:01:05.943
What is the height of our tree?

26
00:01:05.943 --> 00:01:10.872
That is going to be our running time cuz
if you have a really long single track

27
00:01:10.872 --> 00:01:12.450
tree, the height is n.

28
00:01:12.450 --> 00:01:17.647
If you have a complete binary tree,
the height is log n.

29
00:01:17.647 --> 00:01:22.262
Just like QuickSort, it's gonna
be somewhere between log n to n.

30
00:01:22.262 --> 00:01:25.605
It has its own range for find.

31
00:01:25.605 --> 00:01:28.449
Just like QuickSort went
from n log n to n squared,

32
00:01:28.449 --> 00:01:31.429
this thing has a very similar
type of property to it,

33
00:01:31.429 --> 00:01:35.249
where it has a range depending on
how balanced your binary tree is.

34
00:01:35.249 --> 00:01:39.621
And so this goes into an entire,
you could do a whole three hour thing

35
00:01:39.621 --> 00:01:42.854
on different ways in which
you can balance a tree.

36
00:01:42.854 --> 00:01:45.940
The two predominant ones are AVL and
Red-Black Trees.

37
00:01:45.940 --> 00:01:50.645
Red-Black fun fact, the reason why it's
called the Red-Black Tree is because

38
00:01:50.645 --> 00:01:55.782
printers back in the 70s printed red and
black phenomenally, and nothing else good.

39
00:01:55.782 --> 00:01:56.713
So therefore,

40
00:01:56.713 --> 00:02:01.305
it was Red-Black Tree cuz that's the only
two colors you could print well.

41
00:02:01.305 --> 00:02:03.044
It's just a fun fact.

42
00:02:03.044 --> 00:02:07.910
I don't know, those kind of things just
bring joy to my heart knowing that getting

43
00:02:07.910 --> 00:02:10.320
named by legacy just hurts a little bit.

44
00:02:10.320 --> 00:02:11.082
So there we go.

45
00:02:11.082 --> 00:02:13.958
So that is a find,
we now know the running time, awesome.

46
00:02:13.958 --> 00:02:16.322
Let's move on and do insert.

47
00:02:16.322 --> 00:02:17.910
So let's talk about insertion.

48
00:02:17.910 --> 00:02:21.181
So insertion is a lot like find, right?

49
00:02:21.181 --> 00:02:27.009
You effectively kinda have to
find your way to a node, correct?

50
00:02:27.009 --> 00:02:29.663
Yeah, so if I were to insert,

51
00:02:29.663 --> 00:02:34.675
let's say we're gonna insert,
we could insert 17.

52
00:02:34.675 --> 00:02:37.471
So let's start with that cuz
that's kinda a goofy case, right?

53
00:02:37.471 --> 00:02:40.988
Because our root node is a 17, right?

54
00:02:40.988 --> 00:02:46.355
Well, your first gut instinct is, man,
how do we replace 15 with 17, right?

55
00:02:46.355 --> 00:02:49.835
And then we're gonna have to bubble it
down and do these type of operations?

56
00:02:49.835 --> 00:02:51.695
Well, no, you don't have to do that.

57
00:02:51.695 --> 00:02:56.286
Cuz remember, long as we adhere
to these simple principles,

58
00:02:56.286 --> 00:02:58.774
we will be able to just insert it.

59
00:02:58.774 --> 00:03:01.855
And of course, remember right now
we're only considering it like that.

60
00:03:01.855 --> 00:03:02.631
There we go.

61
00:03:02.631 --> 00:03:07.919
So that means when we insert 17, we say,
hey, am I larger than or smaller than you?

62
00:03:07.919 --> 00:03:11.161
Or am I larger than you or
smaller than or equal to you?

63
00:03:11.161 --> 00:03:14.524
If I'm smaller than or equal to,
I'll just go on this side.

64
00:03:14.524 --> 00:03:17.073
Hey, am I larger than or
smaller than or equal to you?

65
00:03:17.073 --> 00:03:19.531
I'm larger than, so let's go on this side.

66
00:03:19.531 --> 00:03:21.626
Hey, am I larger than or
smaller than or equal to?

67
00:03:21.626 --> 00:03:25.324
I'm larger than, so
17 would actually put, my goodness,

68
00:03:25.324 --> 00:03:27.933
I just realized I
completely ran out of room.

69
00:03:27.933 --> 00:03:30.270
I think, is it E?

70
00:03:30.270 --> 00:03:31.601
No, it's definitely not E.

71
00:03:31.601 --> 00:03:35.015
Is it Shift+N?

72
00:03:35.015 --> 00:03:38.611
My goodness, I'm sorry, I was just
trying to guess what the eraser was.

73
00:03:38.611 --> 00:03:39.680
What is the eraser?

74
00:03:39.680 --> 00:03:40.194
Do I know?

75
00:03:40.194 --> 00:03:40.947
I don't even know.

76
00:03:40.947 --> 00:03:43.635
All right, so I'm just gonna
pretend like that doesn't exist.

77
00:03:43.635 --> 00:03:47.529
[SOUND] Don't tell the man
behind the curtain.

78
00:03:47.529 --> 00:03:48.421
All right, look at that.

79
00:03:48.421 --> 00:03:52.933
Boom, we just drew 17 in there.

80
00:03:52.933 --> 00:03:55.460
Awesome, so
17 was inserted way down there.

81
00:03:55.460 --> 00:03:59.363
So again, ask ourselves how do we
preserve the rule of the binary tree?

82
00:03:59.363 --> 00:04:02.327
Is this entire subtree less than or

83
00:04:02.327 --> 00:04:08.018
equal to, The node above it.

84
00:04:08.018 --> 00:04:08.875
Yes, it is.

85
00:04:08.875 --> 00:04:10.713
The entire thing is less than or equal to.

86
00:04:10.713 --> 00:04:14.896
The 17 can still be put here,
it can still be preserved in this case.

87
00:04:14.896 --> 00:04:18.769
If the value is 18, it would have trickled
down, it would have started here.

88
00:04:18.769 --> 00:04:20.307
Then it would have gone
to the larger section.

89
00:04:20.307 --> 00:04:21.890
Then it would have gone
to the smaller section.

90
00:04:21.890 --> 00:04:24.159
It would have gone to
the smaller section and

91
00:04:24.159 --> 00:04:27.301
effectively been inserted on
this side of the node, right?

92
00:04:27.301 --> 00:04:29.628
Right, they don't actually
match up to the same spot.

93
00:04:29.628 --> 00:04:32.141
It's just I ran out of room
to actually draw it in.

94
00:04:32.141 --> 00:04:35.697
So that, I mean,
if I were to draw it more correctly,

95
00:04:35.697 --> 00:04:38.159
it would look something like [SOUND].

96
00:04:40.840 --> 00:04:41.767
There we go, right?

97
00:04:41.767 --> 00:04:44.028
It would have been on that
side of the node as a 18.

98
00:04:44.028 --> 00:04:47.914
So insertion is actually really
easy cuz it's a version of find,

99
00:04:47.914 --> 00:04:49.892
we do the same type of traversal,

100
00:04:49.892 --> 00:04:53.581
we just have to keep going until
we hit a point in which is null.

101
00:04:53.581 --> 00:04:56.102
So we could really do this pretty easily.

102
00:04:56.102 --> 00:04:58.715
We'll write out the pseudocode for
insertion,

103
00:04:58.715 --> 00:05:02.228
just because insertion tends to
be a pretty easy operation to do.

104
00:05:02.228 --> 00:05:07.613
So insert, which is gonna take
in the node, and the value.

105
00:05:07.613 --> 00:05:09.352
And so we'll simply do this.

106
00:05:09.352 --> 00:05:15.480
If, or I should have called that n,
n.value is greater than the current,

107
00:05:15.480 --> 00:05:19.973
which is not that way,
is less than our current value.

108
00:05:19.973 --> 00:05:21.090
We need to travel left.

109
00:05:21.090 --> 00:05:23.177
I mean, we need to travel right, right?

110
00:05:23.177 --> 00:05:27.073
Yes, we need to travel right because we
are bigger, we go on the bigger side.

111
00:05:27.073 --> 00:05:31.004
So then we go insert node,

112
00:05:31.004 --> 00:05:34.763
right, with our value.

113
00:05:34.763 --> 00:05:35.814
Awesome.

114
00:05:35.814 --> 00:05:38.810
Else, we just travelled
the other direction, right?

115
00:05:38.810 --> 00:05:44.225
So we'll call it, else if node new,

116
00:05:44.225 --> 00:05:47.546
node.value is this,

117
00:05:47.546 --> 00:05:53.157
then we can go the other side, right?

118
00:05:53.157 --> 00:05:57.838
Insert, and we'll take in a node v,

119
00:05:57.838 --> 00:06:01.468
not node v, what am I doing?

120
00:06:01.468 --> 00:06:03.624
A node left and the value.

121
00:06:03.624 --> 00:06:07.090
But there is one problem
that I left here on purpose.

122
00:06:07.090 --> 00:06:08.995
We have to make a decision here.

123
00:06:08.995 --> 00:06:12.095
What do we do in the null case?

124
00:06:12.095 --> 00:06:15.130
We need to do something in the null case.

125
00:06:15.130 --> 00:06:19.736
We have to be putting something
either in the function signature or

126
00:06:19.736 --> 00:06:22.953
we have to create a node as we go there,
right?

127
00:06:22.953 --> 00:06:26.435
It'd probably be easier to add in
something into the function signature.

128
00:06:26.435 --> 00:06:31.465
So if we added in parent, we'd be able
to go, hey, we've hit a null point,

129
00:06:31.465 --> 00:06:35.809
go back to the parent, and
let's add ourselves in at this point.

130
00:06:35.809 --> 00:06:38.935
Or b, we could check right here and
be like, hey,

131
00:06:38.935 --> 00:06:41.177
we want to go to the right hand side.

132
00:06:41.177 --> 00:06:45.409
But the right hand, or is this, yeah,
we want to go to the right hand side but

133
00:06:45.409 --> 00:06:47.012
the right hand side is null.

134
00:06:47.012 --> 00:06:49.066
Therefore, we insert ourselves in.

135
00:06:49.066 --> 00:06:53.738
So this kinda breaks the first two base
case, then due to the recurse check,

136
00:06:53.738 --> 00:06:56.658
this is just kinda broken
in that way cuz you have

137
00:06:56.658 --> 00:07:00.546
to make this decision at the base
case point to mutate the tree.

138
00:07:00.546 --> 00:07:04.109
And so it kinda causes this goofiness
that's a little bit harder to do.

139
00:07:04.109 --> 00:07:09.500
So if I were to rewrite this in
a sense that does that that mixes both

140
00:07:09.500 --> 00:07:14.908
the base case plus this,
it would look something more like this.

141
00:07:14.908 --> 00:07:19.703
If node value is greater than or, oopsies,

142
00:07:19.703 --> 00:07:26.439
is less than value,
then I'd have to check if not node right,

143
00:07:26.439 --> 00:07:30.993
then actually do the insertion, right?

144
00:07:30.993 --> 00:07:33.642
Which would involve creating a node,

145
00:07:33.642 --> 00:07:37.383
setting the right hand
pointer to be this node, etc.

146
00:07:37.383 --> 00:07:43.015
Or we traverse again,
we recall, traverse, right?

147
00:07:43.015 --> 00:07:45.718
Or else we call this whole
insert function again and walk.

148
00:07:45.718 --> 00:07:48.225
And so it's a little bit
different in the sense that

149
00:07:48.225 --> 00:07:50.802
we have to mix the base case
with the recursion step.

150
00:07:50.802 --> 00:07:53.293
You don't really like it,
it gets a little bit more complicated.

151
00:07:53.293 --> 00:07:56.209
Hence, the reason like I said,
why this gets really hairy really,

152
00:07:56.209 --> 00:07:59.190
really fast is you start running
into these weird kinda conditions.

