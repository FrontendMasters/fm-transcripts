WEBVTT

1
00:00:00.709 --> 00:00:05.605
Now, we've already talked about this,
insertion, deletion.

2
00:00:05.605 --> 00:00:08.273
And now you can understand
that if I were to get a value,

3
00:00:08.273 --> 00:00:10.018
I'd have to walk the list, right?

4
00:00:10.018 --> 00:00:14.593
So if I asked for the fifth value,
there is no way when we have this type of

5
00:00:14.593 --> 00:00:17.664
structure right here,
to get the fifth value.

6
00:00:17.664 --> 00:00:23.118
I literally have to write
a loop that's gonna be like for

7
00:00:23.118 --> 00:00:28.234
0 to 5, and
current equals current next, right?

8
00:00:28.234 --> 00:00:31.673
I'm gonna have to walk it until
we get to the correct value.

9
00:00:31.673 --> 00:00:34.536
Then I can return current's value,
correct?

10
00:00:34.536 --> 00:00:37.697
We don't return the containing node,
because then we leak our containing thing,

11
00:00:37.697 --> 00:00:40.135
and then someone can mess with
the next and previous values, and

12
00:00:40.135 --> 00:00:42.097
boom our whole list sucks and
you lose everything.

13
00:00:42.097 --> 00:00:46.059
So always that's more of a practical
implementation standpoint.

14
00:00:46.059 --> 00:00:50.658
But you get the idea of a containing node,
it's our abstraction for ourselves,

15
00:00:50.658 --> 00:00:52.224
not for the outside world.

16
00:00:52.224 --> 00:00:56.177
And so in general, getting head or
tail, all those things,

17
00:00:56.177 --> 00:00:58.591
they can be pretty good operations.

18
00:00:58.591 --> 00:01:00.433
So head and tail is a unique get,

19
00:01:00.433 --> 00:01:05.148
based on the sense that if our linked list
implementation has a single reference,

20
00:01:05.148 --> 00:01:07.975
head, that points to
the first item in the list.

21
00:01:07.975 --> 00:01:10.896
Getting head can become a constant
operation, no matter how big or

22
00:01:10.896 --> 00:01:11.740
small the list is.

23
00:01:11.740 --> 00:01:15.140
Getting tail can also be
a constant operation,

24
00:01:15.140 --> 00:01:19.393
because again,
we already have a defined pointer to that.

25
00:01:19.393 --> 00:01:20.680
It works every single time.

26
00:01:23.737 --> 00:01:28.497
All right, so deletion, of course,
deletion at the front or the tail, right,

27
00:01:28.497 --> 00:01:33.337
the head or the tail, it's actually,
again, constant operations, is it not?

28
00:01:33.337 --> 00:01:36.251
Because if you think about it,
all you have to do is just take this and

29
00:01:36.251 --> 00:01:39.231
do the deletion algorithm, take this,
do the deletion algorithm.

30
00:01:39.231 --> 00:01:41.940
But if you get in the middle,
or you delete in the middle,

31
00:01:41.940 --> 00:01:43.649
you have to traverse to that point.

32
00:01:43.649 --> 00:01:47.592
So you have a two operation costs,
the traversal plus the deletion.

33
00:01:47.592 --> 00:01:50.439
So deletion from the ends can be constant,
but

34
00:01:50.439 --> 00:01:54.384
deletion in the middle can be
costly if the traversal is costly.

35
00:01:54.384 --> 00:01:57.174
But the deletion itself,
of course, is not costly.

36
00:01:57.174 --> 00:02:01.916
Prepending and appending, constant time,
again because you are able to insert and

37
00:02:01.916 --> 00:02:05.814
just break the links from head or
tail, so that's very, very fast.

38
00:02:05.814 --> 00:02:09.706
But insertion in the middle, it's
the traversal, again, that can get you.

39
00:02:09.706 --> 00:02:12.921
So long as you can traverse fast,
your insertion is fast.

40
00:02:12.921 --> 00:02:16.545
So this is kind of the weakness and
strength of a length list.

41
00:02:16.545 --> 00:02:18.528
Is that yeah?
It's a bit more complicated.

42
00:02:18.528 --> 00:02:19.865
Yes, it's not contiguous memory.

43
00:02:19.865 --> 00:02:22.257
There's a whole bunch of computer
optimizations about contiguous memory,

44
00:02:22.257 --> 00:02:23.370
blah, blah, blah, blah, blah.

45
00:02:23.370 --> 00:02:27.562
What matters is that you
are able to store these things.

46
00:02:27.562 --> 00:02:30.032
The list can be whatever
size you want it to be.

47
00:02:30.032 --> 00:02:34.712
And deletion from the front or
the back are extremely fast.

48
00:02:34.712 --> 00:02:38.550
And that is very, very important, because
there's a lot of structures that you use

49
00:02:38.550 --> 00:02:40.725
in which you want to say
delete the oldest item.

50
00:02:40.725 --> 00:02:44.144
The oldest item would be
hopefully organized at the tail,

51
00:02:44.144 --> 00:02:48.493
therefore that's that constant operation,
that's very, very fast.

52
00:02:48.493 --> 00:02:49.062
All right, so

53
00:02:49.062 --> 00:02:52.153
I don't think we're gonna implement
this just because time is running out.

54
00:02:52.153 --> 00:02:55.597
And I think it would take us all,
it's just a very heavy operation,

55
00:02:55.597 --> 00:02:57.659
you saw the next and all the previouses.

56
00:02:57.659 --> 00:03:01.429
But in general, this is kind of interface
that you will see if you use that Kata

57
00:03:01.429 --> 00:03:02.535
program that I built.

58
00:03:02.535 --> 00:03:04.195
This is effectively, I believe,

59
00:03:04.195 --> 00:03:08.217
the exact interface that would be used in
the linked list, which is just like here.

60
00:03:08.217 --> 00:03:11.425
Here's all the operations you
expect it to be able to do.

61
00:03:11.425 --> 00:03:15.694
Now program the underlying operations.

62
00:03:15.694 --> 00:03:19.267
All right, let's move forward, because we
got so many sweet things to take care of.

63
00:03:19.267 --> 00:03:23.022
I started with LinkedLists because
they are the most foundational item.

64
00:03:23.022 --> 00:03:24.982
Oop, we do have one question.

65
00:03:24.982 --> 00:03:28.636
&gt;&gt; I believe the insertion
of F after A is arbitrary.

66
00:03:28.636 --> 00:03:32.008
Usually we'll append F
either at the beginning or

67
00:03:32.008 --> 00:03:35.230
at the end of the LinkedList for
constant time.

68
00:03:35.230 --> 00:03:39.466
&gt;&gt; So the thing is, is that it just
depends on how you're using the list.

69
00:03:39.466 --> 00:03:41.251
If you insert at the beginning of the end,

70
00:03:41.251 --> 00:03:44.668
you have a constant time guarantee as long
as you have a reference to both head and

71
00:03:44.668 --> 00:03:47.021
tail or depending on which
side you're inserting on.

72
00:03:47.021 --> 00:03:50.304
But if you don't have
the reference to the node directly,

73
00:03:50.304 --> 00:03:53.051
it's the cost of the traversal
to that node, and

74
00:03:53.051 --> 00:03:56.349
then it's the cost of the insertion,
which is constant.

75
00:03:56.349 --> 00:03:59.572
So traversals where the big
thing comes into play here,

76
00:03:59.572 --> 00:04:02.463
you have to be able to find or
get the node quickly.

77
00:04:02.463 --> 00:04:03.674
And there are strategies to do that.

78
00:04:03.674 --> 00:04:07.646
And there even is a data structure we're
gonna go over in which we have constant

79
00:04:07.646 --> 00:04:09.881
time traversal and constant time removal.

80
00:04:09.881 --> 00:04:11.251
So it'd be fantastic, right?

81
00:04:11.251 --> 00:04:12.440
We'll get there, but yes.

82
00:04:12.440 --> 00:04:16.802
So in general, I can't tell you how to use
a LinkedList, cuz you use a LinkedList how

83
00:04:16.802 --> 00:04:20.878
you want to use a LinkedList, but
I would strongly recommend not traversing.

84
00:04:20.878 --> 00:04:22.470
Anytime you do an n length algorithm,

85
00:04:22.470 --> 00:04:25.272
there's probably a data structure
that's better at it, right?

86
00:04:25.272 --> 00:04:26.564
That makes usual sense.

87
00:04:26.564 --> 00:04:28.611
Sometimes that's as good as it gets,
right?

88
00:04:28.611 --> 00:04:31.232
But for us,
we don't have to worry about that.

89
00:04:31.232 --> 00:04:33.525
All right, so
why did I start with LinkedLists?

90
00:04:33.525 --> 00:04:35.231
Well, they are super foundational.

91
00:04:35.231 --> 00:04:39.814
In fact, they're so foundational
every single LinkedList is a graph.

92
00:04:39.814 --> 00:04:42.102
Every single LinkedList
is technically a tree.

93
00:04:42.102 --> 00:04:44.232
You can think of it in
these kind of senses.

94
00:04:44.232 --> 00:04:46.629
So we will get to these other
data structures later, but

95
00:04:46.629 --> 00:04:48.568
LinkedLists are the most fundamental unit.

96
00:04:48.568 --> 00:04:52.474
And long as you understand how to
traverse and move around in a LinkedList,

97
00:04:52.474 --> 00:04:55.770
you're going to understand all
these other data structures.

