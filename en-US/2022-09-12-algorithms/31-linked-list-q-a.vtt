WEBVTT

1
00:00:00.140 --> 00:00:01.084
Are you using when here?

2
00:00:01.084 --> 00:00:02.622
&gt;&gt; Using vim.

3
00:00:02.622 --> 00:00:06.695
&gt;&gt; Yeah, vim
&gt;&gt; I always use Vim, okay?

4
00:00:06.695 --> 00:00:12.849
It's literally my entire online
shtick is the fact that I use Vim.

5
00:00:12.849 --> 00:00:15.439
And I might be like the second fastest,

6
00:00:15.439 --> 00:00:18.975
there's word that George Hotz
is faster than me.

7
00:00:18.975 --> 00:00:21.298
I don't know.

8
00:00:21.298 --> 00:00:22.292
But one day we'll have a competition.

9
00:00:22.292 --> 00:00:27.572
Maybe he'll join me and
do a 25 algorithm super speed run.

10
00:00:27.572 --> 00:00:28.973
&gt;&gt; I might have another bug.

11
00:00:28.973 --> 00:00:30.325
&gt;&gt; Gosh, please do.

12
00:00:30.325 --> 00:00:34.580
&gt;&gt; If you do remove undefined.

13
00:00:34.580 --> 00:00:36.690
And current is undefined.

14
00:00:36.690 --> 00:00:41.317
Well, everything will just blow up
&gt;&gt; No so let's look at that.

15
00:00:41.317 --> 00:00:42.530
That's good question.

16
00:00:42.530 --> 00:00:45.327
So the question was,
if we did remove undefined and

17
00:00:45.327 --> 00:00:47.350
current undefined would we blow up?

18
00:00:47.350 --> 00:00:49.254
Well one, you'd have to be breaking
the contract which you did.

19
00:00:49.254 --> 00:00:52.044
The duty is ignore which we all
know when you do that you have to

20
00:00:52.044 --> 00:00:53.720
go work at Facebook for a year.

21
00:00:53.720 --> 00:00:55.129
So nobody wants to go do that, right?

22
00:00:55.129 --> 00:00:57.610
It's a joke, enjoy the joke.

23
00:00:57.610 --> 00:01:01.015
So there's plenty of people that
wanna work my best friends,

24
00:01:01.015 --> 00:01:04.500
[SOUND] [LAUGH] My views are my own,
okay, anyway.

25
00:01:04.500 --> 00:01:05.786
[LAUGH]
&gt;&gt; Second,

26
00:01:05.786 --> 00:01:08.910
this right here is the value
that we're comparing.

27
00:01:08.910 --> 00:01:11.092
It's the container node
that we're comparing.

28
00:01:11.092 --> 00:01:15.160
So it's not
&gt;&gt; So I could break it,

29
00:01:15.160 --> 00:01:18.082
[INAUDIBLE]
&gt;&gt; No ,no it's the container node even if

30
00:01:18.082 --> 00:01:22.847
you did break the contract, what would
end up happening is that, remember,

31
00:01:22.847 --> 00:01:24.607
it's the containing node or

32
00:01:24.607 --> 00:01:28.533
it's the container's value
that we're comparing, right?

33
00:01:28.533 --> 00:01:32.420
So currents.value would have
to then equal undefined.

34
00:01:33.990 --> 00:01:36.880
Which means that current does exist,
which means that it could be removed.

35
00:01:36.880 --> 00:01:39.086
&gt;&gt; Sure-
&gt;&gt; [CROSSTALK]

36
00:01:39.086 --> 00:01:40.497
&gt;&gt; [INAUDIBLE]

37
00:01:40.497 --> 00:01:43.172
&gt;&gt; Yes, you'd actually have to instantiate

38
00:01:43.172 --> 00:01:43.996
this thing.

39
00:01:43.996 --> 00:01:45.020
Can you even do that?

40
00:01:45.020 --> 00:01:54.039
Can you do const test equals
doubly linked list, undefined?

41
00:01:54.039 --> 00:01:56.456
Is that possible?

42
00:01:56.456 --> 00:02:05.846
Besides for
the fact that I'm not You can't do that.

43
00:02:05.846 --> 00:02:10.340
Really, did I just,
my goodness, what am I doing?

44
00:02:10.340 --> 00:02:11.402
There we go.

45
00:02:11.402 --> 00:02:13.083
Yeah, okay, that makes sense.

46
00:02:13.083 --> 00:02:18.708
Well does make any sense I don't know
why you do that but yes you can do that.

47
00:02:18.708 --> 00:02:20.215
That doesn't break anything, right?
Because it's the value that

48
00:02:20.215 --> 00:02:21.461
we're comparing at right?

49
00:02:21.461 --> 00:02:24.134
So since we're not comparing the node,

50
00:02:24.134 --> 00:02:27.520
we're comparing the value
within the container.

51
00:02:27.520 --> 00:02:30.237
So that means it has to be a value
provided which means my node does exist,

52
00:02:30.237 --> 00:02:31.806
which means I should be able to remove it.

53
00:02:35.060 --> 00:02:40.161
&gt;&gt; And the methods you have
written are mainly for JavaScript.

54
00:02:40.161 --> 00:02:46.605
&gt;&gt; I think what I did is I
honestly went to Java list and

55
00:02:46.605 --> 00:02:51.056
took Oracle helps my goodness,

56
00:02:51.056 --> 00:02:59.353
[SOUND] I took a lot of these not
contains all get there is removed.

57
00:02:59.353 --> 00:03:02.171
So you have a remove index,
we can't overload functions.

58
00:03:02.171 --> 00:03:05.873
So I'd like rename them remove
became remove at, remove object,

59
00:03:05.873 --> 00:03:08.280
right there became this whole thing.

60
00:03:08.280 --> 00:03:11.581
&gt;&gt; Is there any specific
reason you have chosen Java or

61
00:03:11.581 --> 00:03:15.730
JavaScript when doing this coding for
the building list?

62
00:03:15.730 --> 00:03:19.927
&gt;&gt; So the reason why I chose JavaScript
over Java, that's the question and so

63
00:03:19.927 --> 00:03:20.731
the-
&gt;&gt; Java or

64
00:03:20.731 --> 00:03:24.517
JavaScript I think you have
shown the Java methods right?

65
00:03:24.517 --> 00:03:29.412
&gt;&gt; Yeah I showed the Java methods because
Java is a fairly complete language and

66
00:03:29.412 --> 00:03:34.460
it's a pretty easy language to show a lot
of computer science kind of topics and

67
00:03:34.460 --> 00:03:35.012
right?

68
00:03:35.012 --> 00:03:37.850
It's easy it's safer you're not
gonna [INAUDIBLE] Yourself.

69
00:03:37.850 --> 00:03:39.636
You bet you will get no
pointer exceptions right?

70
00:03:39.636 --> 00:03:41.169
You will get these other things,

71
00:03:41.169 --> 00:03:44.364
it's a fairly simple language to
kind of make these comparisons in.

72
00:03:44.364 --> 00:03:47.922
So I just kind of brought it over I
used TypeScript because it's the most

73
00:03:47.922 --> 00:03:49.599
accessible language right now.

74
00:03:49.599 --> 00:03:53.829
C is obviously the best because it really
just shows you that raw memory is raw

75
00:03:53.829 --> 00:03:57.480
memory and you tell it what it is and
that's what it is, right?.

76
00:03:57.480 --> 00:03:59.161
And so I didn't do it that way.

