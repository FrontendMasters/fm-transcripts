WEBVTT

1
00:00:00.000 --> 00:00:03.677
So, let's keep on going because we kinda
need the blades a little bit faster

2
00:00:03.677 --> 00:00:04.257
than this.

3
00:00:04.257 --> 00:00:08.689
All right, so algorithm time,
we're gonna go to our second algorithm,

4
00:00:08.689 --> 00:00:10.698
this one is a doosy, if you will.

5
00:00:10.698 --> 00:00:15.825
This is the most classic off-by-one
problem I think there is in the universe.

6
00:00:15.825 --> 00:00:19.089
And of course, this is a basis for
other algorithms, or

7
00:00:19.089 --> 00:00:21.321
how we will look at other algorithms.

8
00:00:21.321 --> 00:00:24.715
All right, so
an important question you should always

9
00:00:24.715 --> 00:00:28.424
ask yourself when it comes to
your data set, is it ordered?

10
00:00:28.424 --> 00:00:30.419
If your data set is ordered,

11
00:00:30.419 --> 00:00:34.919
you have new advantages you can
take with that data, all right?

12
00:00:34.919 --> 00:00:37.913
So first, let's come up with
the algorithm ourselves, okay?

13
00:00:37.913 --> 00:00:40.411
So I wanna kinda derive
this in some sort of sense.

14
00:00:40.411 --> 00:00:45.070
So, let's just go like that,
we'll create a new one,

15
00:00:45.070 --> 00:00:50.738
plus plus it, and let's kind of
derive this algorithm ourselves.

16
00:00:50.738 --> 00:00:56.289
So, if you have an array, but it is
ordered, we don't have to go here and

17
00:00:56.289 --> 00:01:01.310
say hey, is X0 equal to the value
we're looking for, right?

18
00:01:01.310 --> 00:01:02.760
We don't have to start
in the first position.

19
00:01:02.760 --> 00:01:05.824
We don't have to go to the second
position cuz we can make some set of

20
00:01:05.824 --> 00:01:07.450
optimization, right?

21
00:01:07.450 --> 00:01:12.135
So one thing that immediately probably
comes to everybody's mind who is

22
00:01:12.135 --> 00:01:15.052
not familiar with this
problem is that well,

23
00:01:15.052 --> 00:01:19.550
you know what we could do is we could say,
jump 10% of N, right?

24
00:01:19.550 --> 00:01:25.056
I could jump 10% of N and say,
hey, Xi are you equal to my value?

25
00:01:25.056 --> 00:01:27.676
You're not, then I'll jump 10% more.

26
00:01:27.676 --> 00:01:29.750
Hey, Xi are you equal to my value?

27
00:01:29.750 --> 00:01:32.888
You're not but
you're now officially larger than me?

28
00:01:32.888 --> 00:01:39.142
Well, I better walk back 10% and then
linear search my way through that, right?

29
00:01:39.142 --> 00:01:42.187
Cuz that means the value is somewhere
between the previous one and

30
00:01:42.187 --> 00:01:42.969
my current one.

31
00:01:42.969 --> 00:01:45.406
We can make some kind of guesses here.

32
00:01:45.406 --> 00:01:50.262
Now this is why this type of style
of algorithm kinda breaks down,

33
00:01:50.262 --> 00:01:56.907
which is first, let's ask ourself, what is
the worst possible case of this algorithm?

34
00:01:56.907 --> 00:02:02.953
Well, the worst possible
case is we jumped by 10%.

35
00:02:02.953 --> 00:02:06.588
We're larger than the current value,
we still need to keep jumping forward.

36
00:02:06.588 --> 00:02:07.740
We need to keep looking.

37
00:02:07.740 --> 00:02:09.213
We jump by 10% again.

38
00:02:09.213 --> 00:02:10.890
It's still not there, we're still large.

39
00:02:10.890 --> 00:02:11.950
We're still larger.

40
00:02:11.950 --> 00:02:14.527
We're still large,
we go all the way to the end of the array.

41
00:02:14.527 --> 00:02:18.446
We're still larger, which means we have
some portion of the very last bit of

42
00:02:18.446 --> 00:02:22.873
the array unsearched approximately 10% of
the last part of the array unsearched.

43
00:02:22.873 --> 00:02:26.106
Let's now walk through that
last portion and look.

44
00:02:26.106 --> 00:02:27.468
It wasn't there at all.

45
00:02:27.468 --> 00:02:29.799
It was larger than every
element in our array.

46
00:02:29.799 --> 00:02:31.318
We've totally failed.

47
00:02:31.318 --> 00:02:31.961
This sucks.

48
00:02:31.961 --> 00:02:35.456
So what is the running time
of something like that.

49
00:02:35.456 --> 00:02:39.786
Well, the problem is we used
N in our jumping, right?

50
00:02:39.786 --> 00:02:41.817
We jumped by 10% of N.

51
00:02:41.817 --> 00:02:45.309
So that means we're gonna do 10.1.

52
00:02:45.309 --> 00:02:48.223
We're effectively gonna do, what is it?

53
00:02:48.223 --> 00:02:50.712
We're gonna do, what is that there?

54
00:02:50.712 --> 00:02:52.175
10 operations of jumping.

55
00:02:52.175 --> 00:02:52.818
There you go, sorry.

56
00:02:52.818 --> 00:02:58.096
10 operations of jumping plus 1.1 of N,
right?

57
00:02:58.096 --> 00:03:00.118
Cuz that's effectively what
we're doing right here..

58
00:03:00.118 --> 00:03:07.487
So if we denote that in big O,
what is rule number two for big O?

59
00:03:07.487 --> 00:03:08.556
&gt;&gt; Ignore constants.

60
00:03:08.556 --> 00:03:11.287
&gt;&gt; Ignore constants, so bam and bam.

61
00:03:11.287 --> 00:03:15.457
So what is our running time right now?

62
00:03:15.457 --> 00:03:16.706
It's still N.

63
00:03:16.706 --> 00:03:18.497
Isn't that just emotionally defeating?

64
00:03:18.497 --> 00:03:20.299
This is still way more efficient.

65
00:03:20.299 --> 00:03:21.950
And if you can do something like this,

66
00:03:21.950 --> 00:03:24.640
obviously it's much better
than linear searching, right?

67
00:03:24.640 --> 00:03:29.418
Practically speaking, but theoretically
speaking, if your elements go from

68
00:03:29.418 --> 00:03:34.070
a 100 to a million, your algorithm is
gonna run that much slower, right?

69
00:03:34.070 --> 00:03:37.890
Whatever that number is, I should have
chosen a better one, 10,000 to a million.

70
00:03:37.890 --> 00:03:40.515
Your algorithm is gonna be a 100x slower,

71
00:03:40.515 --> 00:03:45.040
even though it's still 10 times
faster than your every single index.

72
00:03:45.040 --> 00:03:46.260
And so that is problematic.

73
00:03:46.260 --> 00:03:48.300
We didn't improve the algorithm.

74
00:03:48.300 --> 00:03:50.510
We just improved it practically speaking.

75
00:03:50.510 --> 00:03:51.930
So what happens if we
could jump differently?

76
00:03:51.930 --> 00:03:54.730
So how can we jump differently in this?

77
00:03:54.730 --> 00:03:56.291
Well, let's do another thing.

78
00:03:56.291 --> 00:03:59.974
Well, what happens if we just jump to
the middle of the array, all right?

79
00:03:59.974 --> 00:04:03.636
And say hey, middle value,
are you equal to V?

80
00:04:03.636 --> 00:04:08.512
If it's not, well, then we can
check only one half of the array.

81
00:04:08.512 --> 00:04:10.828
If it is the value, awesome.

82
00:04:10.828 --> 00:04:16.067
So let's just say that our value is
larger than this value, what do we do?

83
00:04:16.067 --> 00:04:20.887
Well, if we just simply linearly scan
back this way, well, then what happens?

84
00:04:20.887 --> 00:04:23.254
Worst case, 1/2 of N.

85
00:04:23.254 --> 00:04:25.405
Well then, you can say, well,
let's just do one more time.

86
00:04:25.405 --> 00:04:27.185
We could half it again, right?

87
00:04:27.185 --> 00:04:29.615
Okay, so let's just half it again.

88
00:04:29.615 --> 00:04:33.467
So now we are only looking
over half the space to 1/2N.

89
00:04:33.467 --> 00:04:35.849
So we half it, we add a 1/4 of an N.

90
00:04:35.849 --> 00:04:39.696
And if it is larger or
smaller, we can then scan.

91
00:04:39.696 --> 00:04:43.936
Well, again, what's the problem
if you scan at any point?

92
00:04:43.936 --> 00:04:47.197
You drop the constant,
it's just simply linear.

93
00:04:47.197 --> 00:04:48.475
So we can't do that.

94
00:04:48.475 --> 00:04:50.312
We can't scan.

95
00:04:50.312 --> 00:04:54.650
So, what we could do instead, though,
is we could, well, let's see.

96
00:04:54.650 --> 00:04:57.033
We could do another one, this is Xi = V.

97
00:04:57.033 --> 00:04:57.663
It's not?

98
00:04:57.663 --> 00:05:00.914
Well, we could then half it again, right?

99
00:05:00.914 --> 00:05:04.761
So let's go here, here,
we then half it again.

100
00:05:04.761 --> 00:05:09.392
We can go here, this is if we chose
a really small number, and we could keep

101
00:05:09.392 --> 00:05:14.360
on halving it until either there's no half
left to look at or we find our value.

102
00:05:15.400 --> 00:05:17.440
And so let's think about how that works.

103
00:05:17.440 --> 00:05:21.800
That means effectively,
we'd have an array of size N, right?

104
00:05:21.800 --> 00:05:22.530
Then we half it.

105
00:05:24.070 --> 00:05:28.717
So now we have a value space that
we're looking at that is really 1/2N.

106
00:05:28.717 --> 00:05:29.575
Then we half it again.

107
00:05:29.575 --> 00:05:30.970
So now we have a value space.

108
00:05:30.970 --> 00:05:32.331
I'm just gonna start writing like this.

109
00:05:32.331 --> 00:05:35.200
That's 4, then we have a value space,
that's 8.

110
00:05:35.200 --> 00:05:37.133
And we have a value space that's 16.

111
00:05:37.133 --> 00:05:41.663
And it keeps getting smaller until
a specific condition is met.

112
00:05:41.663 --> 00:05:47.470
Or in other words, N/2k = 1, right?

113
00:05:47.470 --> 00:05:48.110
So let's do this.

114
00:05:48.110 --> 00:05:50.559
This is the most mathy part of
the whole course we're gonna do.

115
00:05:50.559 --> 00:05:54.402
So let's do the classic
multiply both sides.

116
00:05:54.402 --> 00:05:55.220
There we go.

117
00:05:55.220 --> 00:05:58.024
Or in other words, N = 2k.

118
00:05:58.024 --> 00:06:04.230
And of course, for
those that remember their logarithms,

119
00:06:04.230 --> 00:06:11.314
you can say log of 2, [SOUND] let's see,
of N [SOUND] = k, all right?

120
00:06:11.314 --> 00:06:18.150
Log of base 2 of N = k, or in other words,
our running time is log of N, right?

121
00:06:18.150 --> 00:06:21.880
Cuz until we get down to 1,
we have to keep halving it.

122
00:06:21.880 --> 00:06:25.240
So we're going to half it
a log of N amount of times.

123
00:06:25.240 --> 00:06:30.786
So practically speaking,
if our array was 4096 and

124
00:06:30.786 --> 00:06:34.326
we half it, we'll have 2048,

125
00:06:34.326 --> 00:06:39.990
then we'll have 1024, 512, 256, 128,

126
00:06:39.990 --> 00:06:44.840
64, 32, 16, 8, 4, 2, 1, right?

127
00:06:44.840 --> 00:06:49.447
And what is the logarithm of 4096?

128
00:06:49.447 --> 00:06:50.577
It is 12.

129
00:06:50.577 --> 00:06:51.609
How many steps do we do?

130
00:06:51.609 --> 00:06:57.992
1, 2, 3, 4, 5, 6, 7, 8,
9, 10, 11, 12, right?

131
00:06:57.992 --> 00:07:01.308
At that point, you don't technically
count the first one, I counted wrong.

132
00:07:01.308 --> 00:07:04.544
So this would be the 12th position
because that's the starting position.

133
00:07:04.544 --> 00:07:05.929
You didn't have that one to get there.

134
00:07:05.929 --> 00:07:07.139
You get the idea though.

135
00:07:07.139 --> 00:07:10.469
There you go.
So you do 12 halvings to get to 1.

136
00:07:10.469 --> 00:07:13.947
And so at that point, you would know
whether or not the value's in the array.

137
00:07:13.947 --> 00:07:17.053
So the worst case situation is when
the value is not in the array, and

138
00:07:17.053 --> 00:07:19.870
you have to have it over and
over again till the end.

139
00:07:19.870 --> 00:07:22.097
You will do a log N amount of halving.

140
00:07:22.097 --> 00:07:27.167
So this type of searching is
referred to as binary search.

141
00:07:27.167 --> 00:07:27.931
Does that make sense?

142
00:07:27.931 --> 00:07:30.590
Binary, either 1 or 0, right?

143
00:07:30.590 --> 00:07:32.622
There's only two possible states,
technically.

144
00:07:32.622 --> 00:07:38.230
I mean, in real sense it's kind of like
a trinary search cuz it is the value,

145
00:07:38.230 --> 00:07:39.467
the happy case.

146
00:07:39.467 --> 00:07:43.019
But in this case, it's either it's
this side or to this side, right?

147
00:07:43.019 --> 00:07:44.371
You're always splitting it in half.

148
00:07:44.371 --> 00:07:48.069
You're always traversing
down one path of execution.

149
00:07:48.069 --> 00:07:50.760
So let's look at this.

150
00:07:50.760 --> 00:07:55.476
Blah, blah, blah, yeah, another good
little trick of Big O, by the way,

151
00:07:55.476 --> 00:08:00.200
is when you have the input at each step,
it's either log N or N log of N, right?

152
00:08:00.200 --> 00:08:00.980
So just remember that.

153
00:08:00.980 --> 00:08:04.340
That's depending if you're
scanning that input or not.

154
00:08:04.340 --> 00:08:06.375
We're not scanning,
we're only looking at a value and

155
00:08:06.375 --> 00:08:09.073
then dividing it into the half,
looking at a value, dividing it in half.

156
00:08:09.073 --> 00:08:10.552
We're not scanning anything.

157
00:08:10.552 --> 00:08:12.530
So that's usually a pretty
good trick to think about.

