WEBVTT

1
00:00:00.040 --> 00:00:03.108
All we did were linked lists arrays,
searching, sorting,

2
00:00:03.108 --> 00:00:05.574
all the things we're gonna
be shifting gears and

3
00:00:05.574 --> 00:00:09.205
going into what is considered more
of the advanced ish data structure.

4
00:00:09.205 --> 00:00:13.793
So this would represent probably
the last 4 to 5 weeks of your

5
00:00:13.793 --> 00:00:16.089
second semester in college and

6
00:00:16.089 --> 00:00:21.314
it will bleed into a little bit of
the fourth class usually in college.

7
00:00:21.314 --> 00:00:23.242
Fourth class being
advanced data structures.

8
00:00:23.242 --> 00:00:27.934
And so I hope that everyone practiced
a little bit of recursion if you're weak

9
00:00:27.934 --> 00:00:30.821
at recursion,
if you're great at recursion,

10
00:00:30.821 --> 00:00:34.490
this will be easy breezy
beautiful data structures.

11
00:00:34.490 --> 00:00:36.770
All right,
eventually all things lead to trees.

12
00:00:36.770 --> 00:00:37.790
Well, that's technically a lie.

13
00:00:37.790 --> 00:00:39.020
All roads lead to Rome.

14
00:00:39.020 --> 00:00:43.360
But all data structures eventually become
graphs and all data structures really

15
00:00:43.360 --> 00:00:47.520
are graphs if you think about it, but
I always end up using trees on projects.

16
00:00:47.520 --> 00:00:49.940
They just somehow are everywhere.

17
00:00:49.940 --> 00:00:53.000
I don't know what it is, but
it just happens all the time,

18
00:00:53.000 --> 00:00:55.628
and so
we're gonna kind of start going over them.

19
00:00:55.628 --> 00:00:58.470
Anyway, so where are trees?

20
00:00:58.470 --> 00:01:00.160
Your file system is a tree.

21
00:01:00.160 --> 00:01:02.962
So let's just jump over here and
just do a simple LS of my route.

22
00:01:02.962 --> 00:01:09.070
So, if you're on Windows that'd be C:/ or
\ or a slash that's the opposite of Unix.

23
00:01:09.070 --> 00:01:13.900
Effectively, if you think about that there
is a single point on my drive in which has

24
00:01:13.900 --> 00:01:15.077
many directories.

25
00:01:15.077 --> 00:01:18.517
Each one of those directories can have
many subdirectories, they can actually

26
00:01:18.517 --> 00:01:21.392
point to other directories which
kind of breaks the tree concept,

27
00:01:21.392 --> 00:01:23.780
but we'll just keep going
with the tree concept here.

28
00:01:23.780 --> 00:01:27.150
They just start from a top,
a single point and go on down.

29
00:01:27.150 --> 00:01:29.454
That's effectively a tree,
your hard drive and

30
00:01:29.454 --> 00:01:31.850
how it's organized is effectively a tree.

31
00:01:31.850 --> 00:01:34.450
The DOM, your DOM is also a tree.

32
00:01:34.450 --> 00:01:38.870
Think about it, body or
HTML body, thousands of div tags.

33
00:01:38.870 --> 00:01:40.848
I don't know how many div
tags are in a website, but

34
00:01:40.848 --> 00:01:43.330
I know what's going up faster
than the stock market.

35
00:01:43.330 --> 00:01:45.376
And so that's a tree as well.

36
00:01:45.376 --> 00:01:49.618
It's a general tree, it has many
children and have zero to many children.

37
00:01:49.618 --> 00:01:50.991
And there's many,

38
00:01:50.991 --> 00:01:56.500
many more compilers abstract syntax tree
if you've been to a s t explorer.net.

39
00:01:56.500 --> 00:02:01.009
I think it is, you get to play with the
tree that is what Babel transforms from

40
00:02:01.009 --> 00:02:04.258
one type of JavaScript to
another type of JavaScript.

41
00:02:04.258 --> 00:02:09.918
So it is something that's pretty useful to
just have a fundamental understanding of.

42
00:02:09.918 --> 00:02:14.741
And so hopefully today, you will be
able to just kind of hurdle that,

43
00:02:14.741 --> 00:02:18.412
be able to be understanding
exactly what trees are.

44
00:02:18.412 --> 00:02:23.194
All right, so we're gonna do a quick
whiteboard example and just solidify this.

45
00:02:23.194 --> 00:02:25.290
Just in case none of those
examples stuck with you,

46
00:02:25.290 --> 00:02:27.452
let's just kind of walk
over exactly what they are.

47
00:02:31.152 --> 00:02:35.633
All right, so a tree usually when we
draw are represented by nodes, and

48
00:02:35.633 --> 00:02:39.531
you can think of a node a lot
like the linked list node, right?

49
00:02:39.531 --> 00:02:41.224
Up, there's an O in there.

50
00:02:41.224 --> 00:02:45.638
And it's generic probably over some
sort of t in which there's different

51
00:02:45.638 --> 00:02:47.924
ways we can represent a node in a tree.

52
00:02:47.924 --> 00:02:51.187
But let's go with this,
there will be something like a value, and

53
00:02:51.187 --> 00:02:53.648
then there's gonna be
something like children.

54
00:02:56.686 --> 00:02:59.490
So instead of having a next or previous,

55
00:02:59.490 --> 00:03:02.791
you can have an array of
possible connections.

56
00:03:02.791 --> 00:03:05.520
Now, that means there can be zero or
more connections.

57
00:03:05.520 --> 00:03:10.460
So if I were to draw this out,
it would look something like this, right?

58
00:03:10.460 --> 00:03:13.313
There is many, many, many connections, and

59
00:03:13.313 --> 00:03:17.127
you can just imagine your file
system here as it goes, right?

60
00:03:17.127 --> 00:03:22.047
This makes a lot of sense if you've
seen anything that looks like this,

61
00:03:22.047 --> 00:03:24.679
you can think of this as HTML, right?

62
00:03:24.679 --> 00:03:30.872
This as your body, and then of course all
those lovely div tags over and over again.

63
00:03:30.872 --> 00:03:32.941
That's why when you use a node in that,

64
00:03:32.941 --> 00:03:36.961
if you ever actually use vanilla
JavaScript you'll actually have access to

65
00:03:36.961 --> 00:03:40.310
a node which does actually have
access to a children's array.

66
00:03:40.310 --> 00:03:42.494
And you can kind of walk around and
do that, and

67
00:03:42.494 --> 00:03:45.868
each one of those children have
possible children, so forth and so on.

68
00:03:45.868 --> 00:03:47.514
You get the idea, right?

69
00:03:47.514 --> 00:03:48.135
Pretty fun.

70
00:03:48.135 --> 00:03:51.342
There's other ways you can represent
nodes, and we will do other ways but

71
00:03:51.342 --> 00:03:53.892
right now, we'll just kind of
focus on the general case.

72
00:03:53.892 --> 00:03:57.930
All right, so
let's talk about some terminology.

73
00:03:57.930 --> 00:04:02.465
Root, when I say the word root, what I'm
saying is your top most node, right?

74
00:04:02.465 --> 00:04:07.356
So the one that's at the very tippy top of
the tree in the file system that is slash

75
00:04:07.356 --> 00:04:08.826
or C colon other slash.

76
00:04:08.826 --> 00:04:14.057
In most trees that is just usually
some node that has either no value,

77
00:04:14.057 --> 00:04:19.105
which we'll see in some cases, or
a middle value near the median,

78
00:04:19.105 --> 00:04:22.279
the smallest value, the largest value.

79
00:04:22.279 --> 00:04:26.128
Usually the root node has some level of
importance in a lot of the data structures

80
00:04:26.128 --> 00:04:26.996
we'll be using.

81
00:04:26.996 --> 00:04:28.551
All right, second height.

82
00:04:28.551 --> 00:04:32.940
Height is simply described as the longest
path from the root to the most childish

83
00:04:32.940 --> 00:04:33.801
node, right?

84
00:04:33.801 --> 00:04:36.532
The most the greatest grand
descendant of the tree.

85
00:04:36.532 --> 00:04:39.643
So, whatever that is,
that is the height of the tree.

86
00:04:39.643 --> 00:04:43.310
Now, that means that trees don't have to
be balanced, they don't have to be in

87
00:04:43.310 --> 00:04:47.034
some sort of perfect ordering, they may
have one really, really long strand and

88
00:04:47.034 --> 00:04:48.827
that would be the height of your tree.

89
00:04:48.827 --> 00:04:51.726
So, even if 99% of your tree
exists within three levels and

90
00:04:51.726 --> 00:04:54.534
only one branch goes down 100,
the heights are 100.

91
00:04:57.302 --> 00:04:59.755
Let's see, binary tree,
binary trees are pretty simple.

92
00:04:59.755 --> 00:05:03.620
Binary trees are what we're gonna be
mainly focusing on today cuz they tend to

93
00:05:03.620 --> 00:05:06.661
be the data structure that is
most frequent in a lot of items.

94
00:05:06.661 --> 00:05:08.510
It's either general or binary.

95
00:05:08.510 --> 00:05:10.662
There are some other cool ones, maps and

96
00:05:10.662 --> 00:05:13.600
C++ are a form of tree
if I'm not mistaken.

97
00:05:13.600 --> 00:05:16.250
A binary tree is exactly
what you think it is.

98
00:05:16.250 --> 00:05:18.748
It's just a tree with at max two children.

99
00:05:20.531 --> 00:05:24.220
And we did a lot of algorithms that
involved splitting things in half from

100
00:05:24.220 --> 00:05:28.647
yesterday, so you can imagine that today,
we'll be splitting things in half again.

101
00:05:28.647 --> 00:05:31.571
Often when you're using a binary tree,

102
00:05:31.571 --> 00:05:36.985
you'll see something like left and
right, instead of a children array.

103
00:05:36.985 --> 00:05:38.095
Just cuz it's a lot simpler.

104
00:05:38.095 --> 00:05:41.349
It's already assumed that there's going to
be a left, there's going to be a right,

105
00:05:41.349 --> 00:05:42.172
it's a binary tree.

106
00:05:42.172 --> 00:05:47.197
So it makes it a lot easier not
to have an array of 0 to 2.

107
00:05:47.197 --> 00:05:50.109
And all these same properties
apply to a binary tree.

108
00:05:50.109 --> 00:05:53.559
Root, height, all that general tree,
the exact same thing except for

109
00:05:53.559 --> 00:05:56.619
it's one too many we've already
kind of shown a general tree.

110
00:05:56.619 --> 00:06:02.038
A binary search tree is simply a tree
with a specific ordering to it.

111
00:06:02.038 --> 00:06:05.278
And usually, it's a strong ordering it
actually is in some sort of very strong

112
00:06:05.278 --> 00:06:08.241
order, it's not like a weak ordering
if you remember from yesterday.

113
00:06:08.241 --> 00:06:10.949
A weak ordering had some
level of ordering to it,

114
00:06:10.949 --> 00:06:13.800
a binary tree tends to have
a very strong ordering.

115
00:06:13.800 --> 00:06:17.079
Leaves, that's simply a node
without any more children.

116
00:06:17.079 --> 00:06:20.432
So this is binary tree,
if there's a bunch of children here,

117
00:06:20.432 --> 00:06:24.557
this wouldn't be a node until eventually
or a leaf until eventually we get to

118
00:06:24.557 --> 00:06:27.851
a part where there's children
with an empty array, right?

119
00:06:27.851 --> 00:06:32.796
So this one leaf, if we had just
a single note here, it's a leaf.

120
00:06:32.796 --> 00:06:34.710
So there's many leaves to a tree.

121
00:06:34.710 --> 00:06:38.000
I've never liked when they
try to take a terminology and

122
00:06:38.000 --> 00:06:40.527
then use like kitschy terms from reality.

123
00:06:40.527 --> 00:06:43.929
So a tree with leaves, I don't really
like any of that kind of things.

124
00:06:43.929 --> 00:06:48.419
Terminus would have been a much better but
they chose leaf, fantastic.

125
00:06:48.419 --> 00:06:52.497
A balanced tree is a tree in
which all the child nodes,

126
00:06:52.497 --> 00:06:56.226
all the leaves eventually
are on the same level.

127
00:06:56.226 --> 00:06:59.770
That'd be a perfectly balanced tree,
the more it's out of balance,

128
00:06:59.770 --> 00:07:03.085
the more problematic some of
the algorithms will become.

129
00:07:03.085 --> 00:07:07.793
And so, that is something to kind of think
about is that it's not always easy to keep

130
00:07:07.793 --> 00:07:09.105
a tree balanced.

131
00:07:09.105 --> 00:07:11.690
You don't know when you're
gonna get the data, but

132
00:07:11.690 --> 00:07:14.703
it's a whole branch of trees
is just keeping them balanced.

133
00:07:14.703 --> 00:07:17.614
A whole branch of trees,
I just realized what a great pun that was.

134
00:07:17.614 --> 00:07:19.745
Branching factor,
how many children there are?

135
00:07:19.745 --> 00:07:22.164
So, a binary tree has
a branching factor of two,

136
00:07:22.164 --> 00:07:25.477
a general tree could have a branching
factor of infinity, right?

137
00:07:25.477 --> 00:07:27.035
You don't know how big that is.

138
00:07:27.035 --> 00:07:32.005
There's other types of trees, we're not
gonna be touching on pretty much any type

139
00:07:32.005 --> 00:07:34.356
of tree other than general and binary.

140
00:07:34.356 --> 00:07:38.910
Hopefully this makes sense and seeing
Quicksort from yesterday how we drew it

141
00:07:38.910 --> 00:07:41.586
out, it's a lot like a binary tree, right?

142
00:07:41.586 --> 00:07:43.387
We had Quicksort.

143
00:07:43.387 --> 00:07:46.679
We would split the input in half and
have another Quicksort and

144
00:07:46.679 --> 00:07:48.017
split the input in half.

145
00:07:48.017 --> 00:07:51.095
It's effectively a binary
tree in some sort of sense.

