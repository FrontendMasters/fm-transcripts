WEBVTT

1
00:00:00.130 --> 00:00:03.720
So we are now gonna jump
into the A of algorithms.

2
00:00:03.720 --> 00:00:06.600
So we have defined our
first kind of data type.

3
00:00:06.600 --> 00:00:07.617
We are gonna have that.

4
00:00:07.617 --> 00:00:08.249
And so again,

5
00:00:08.249 --> 00:00:12.130
JavaScript doesn't really have arrays in
the sense that we want to have arrays.

6
00:00:12.130 --> 00:00:17.100
So I will treat a bracket like an array,
it will come.

7
00:00:17.100 --> 00:00:18.870
It will have a dot length property.

8
00:00:18.870 --> 00:00:21.180
And just to make it easier,
I won't go full c neckbeard and

9
00:00:21.180 --> 00:00:23.590
require the length to be passed around and
all that.

10
00:00:23.590 --> 00:00:26.950
But we'll just treat it as if it
only has one thing, dot length.

11
00:00:26.950 --> 00:00:30.608
So as we program, we practice,
keeping it a certain size and

12
00:00:30.608 --> 00:00:32.270
using it in a specific way.

13
00:00:32.270 --> 00:00:34.360
I think it's a lot better
to do it that way.

14
00:00:34.360 --> 00:00:37.750
It just is a good way to
practice these algorithms.

15
00:00:37.750 --> 00:00:41.886
All right, so one big thing we're gonna
be doing here is that we're gonna be

16
00:00:41.886 --> 00:00:46.349
visualizing all the problems first we're
gonna be discussing it with circles and

17
00:00:46.349 --> 00:00:50.320
arrows, boxes and arrows and
then we're going to program it.

18
00:00:50.320 --> 00:00:52.790
We're gonna do a lot of data
structures if possible.

19
00:00:52.790 --> 00:00:53.940
It's definitely a core competency.

20
00:00:53.940 --> 00:00:57.804
If you can get really good at this
visualizing creating your problems first

21
00:00:57.804 --> 00:01:02.460
on a whiteboard, and then being able to
translate abstraction into concreteness.

22
00:01:02.460 --> 00:01:04.210
It's going to follow you for
the rest of your life.

23
00:01:04.210 --> 00:01:08.075
It's an extremely good skill to have, and
at this point often I can just think about

24
00:01:08.075 --> 00:01:11.277
it in my head in these terms, and
I can just write out a program without

25
00:01:11.277 --> 00:01:15.280
doing the intermediate step, and
it's a great skill to have, all right?

26
00:01:15.280 --> 00:01:18.262
So first, we're gonna start with search,

27
00:01:18.262 --> 00:01:22.465
because search is by far something
that you do often, right?

28
00:01:22.465 --> 00:01:26.687
I think everybody here has had to find
some sort of value out of some data

29
00:01:26.687 --> 00:01:27.486
structure.

30
00:01:27.486 --> 00:01:31.800
So let's just start with the simplest form
of search which is search on an array.

31
00:01:31.800 --> 00:01:35.738
And even moreso, we're gonna start with
the even simplest version of search,

32
00:01:35.738 --> 00:01:37.320
which is a linear search.

33
00:01:37.320 --> 00:01:40.140
So again, the first thing we
do is we whiteboard this.

34
00:01:40.140 --> 00:01:43.300
So let's go over here, and
do I have space for this?

35
00:01:43.300 --> 00:01:45.150
I think I have space for this, awesome.

36
00:01:45.150 --> 00:01:48.365
So if we have an array that's from 0 to n,
and

37
00:01:48.365 --> 00:01:51.424
we want to find some sort of value, right?

38
00:01:51.424 --> 00:01:56.920
So we have some sort of function called
Search in which takes in an array and

39
00:01:56.920 --> 00:01:57.728
a value v.

40
00:01:57.728 --> 00:01:59.807
And we want to see is this in here.

41
00:01:59.807 --> 00:02:02.697
So the simplest form we can
do is do a linear search.

42
00:02:02.697 --> 00:02:08.729
In other words, we go to 0 and
say x0, are you v?

43
00:02:08.729 --> 00:02:11.090
And if it says hey I'm v,
we're like awesome.

44
00:02:11.090 --> 00:02:14.780
It's at position 0,
else we'll do it again.

45
00:02:14.780 --> 00:02:17.046
X1, hey, are you v?

46
00:02:17.046 --> 00:02:18.043
Where's Mark?

47
00:02:18.043 --> 00:02:19.100
You are, awesome.

48
00:02:19.100 --> 00:02:19.830
Here you go.

49
00:02:19.830 --> 00:02:25.067
Now this may look very familiar because
I bet who in here hasn't used index of?

50
00:02:25.067 --> 00:02:29.310
Wanna guess what index of is
probably doing underneath the hood?

51
00:02:31.140 --> 00:02:34.300
It's just walking linearly
until it finds the thing.

52
00:02:34.300 --> 00:02:38.180
So, we are literally implementing,
if you will, index of.

53
00:02:38.180 --> 00:02:40.720
It's the simplest form
of any sort of search.

54
00:02:40.720 --> 00:02:43.817
Now before we do that, I think,
do I have it as notes right here?

55
00:02:43.817 --> 00:02:48.040
Yeah, what is the Big O
of this type of approach?

56
00:02:49.190 --> 00:02:54.009
So, remember growth is with respect
to input, constants are dropped,

57
00:02:54.009 --> 00:02:57.328
worst case is usually
what we're gonna measure.

58
00:02:57.328 --> 00:02:59.760
So what is the possible
worst case situation?

59
00:02:59.760 --> 00:03:02.200
So that's the first thing you should
probably define in your head.

60
00:03:02.200 --> 00:03:04.350
What's the way that this thing fails?

61
00:03:04.350 --> 00:03:09.130
Well, just like in our first kind
of example, we had E and if E,

62
00:03:09.130 --> 00:03:11.400
the string E that is, right?

63
00:03:11.400 --> 00:03:13.590
Or the character E.

64
00:03:13.590 --> 00:03:17.239
If that's not in our array and
we're searching for it,

65
00:03:17.239 --> 00:03:20.900
we're gonna go from 0 all the way to N and
never find it.

66
00:03:22.050 --> 00:03:23.250
So what does that mean?

67
00:03:23.250 --> 00:03:27.270
If our input goes from say 1 to 2,
we have to search double the space.

68
00:03:27.270 --> 00:03:30.410
From 2 to 4,
we'd search double again that space.

69
00:03:30.410 --> 00:03:33.110
And it keeps growing
equally with the array.

70
00:03:33.110 --> 00:03:36.514
So what type of running time is that?

71
00:03:36.514 --> 00:03:38.577
Say that again?

72
00:03:38.577 --> 00:03:39.545
&gt;&gt; O(N) type.

73
00:03:39.545 --> 00:03:41.345
&gt;&gt; O(N), all right, awesome.

74
00:03:41.345 --> 00:03:45.555
O(N), we say O(N), that's what it
actually looks like when you draw O(N).

75
00:03:45.555 --> 00:03:49.234
What that simply means is
that as your input grows,

76
00:03:49.234 --> 00:03:53.010
so does the time it takes equivalently or
linearly.

77
00:03:53.010 --> 00:03:58.614
So if it grows by 10, you get 10 more
cycles in this loop if you will.

78
00:03:58.614 --> 00:04:00.142
It's the easiest way to look at it.

79
00:04:00.142 --> 00:04:03.981
And so of course I wanted to implement
this because it's very, very simple but

80
00:04:03.981 --> 00:04:07.762
not only is it very, very simple I also
wanted you to get this onto your machine

81
00:04:07.762 --> 00:04:09.183
if you wish to follow along.

82
00:04:09.183 --> 00:04:11.391
So we can execute these
things one at a time.

83
00:04:11.391 --> 00:04:15.391
I created this little library to be able
to just do a bunch of algorithms and

84
00:04:15.391 --> 00:04:18.679
if you want to do them every day,
it actually creates a way for

85
00:04:18.679 --> 00:04:21.017
you to be able to do
them as much as you want.

86
00:04:21.017 --> 00:04:23.528
I made it for you, so it's a proper chill.

87
00:04:23.528 --> 00:04:24.227
There we go.

88
00:04:24.227 --> 00:04:29.335
So here we go, grab this thing,
go to wherever you want to clone it out,

89
00:04:29.335 --> 00:04:32.071
and let's just clone this thing out.

90
00:04:32.071 --> 00:04:34.703
There we go, I'm gonna clone
it onto my machine, awesome.

91
00:04:34.703 --> 00:04:37.417
So I'm gonna open up vim,
I'm gonna go to scripts,

92
00:04:37.417 --> 00:04:40.562
I'm gonna go to day one and
I will get a whole bunch of stuffs,

93
00:04:40.562 --> 00:04:45.213
so long as you executed install and
generate, you should see all these.

94
00:04:45.213 --> 00:04:47.227
A lot of these are gonna
be data structures or

95
00:04:47.227 --> 00:04:49.524
algorithms that we are going
to implement today.

96
00:04:49.524 --> 00:04:52.120
Yes, you do see min heap in here.

97
00:04:52.120 --> 00:04:57.348
There's a joke, it'll be great, but for
now let's start off with linear search.

98
00:04:57.348 --> 00:04:58.497
So we'll open up linear search.

99
00:04:58.497 --> 00:05:02.608
This should be a very simple one I believe
all of us can just kind of program this

100
00:05:02.608 --> 00:05:07.000
on first try which we will hopefully
first try all of our algorithms today.

101
00:05:07.000 --> 00:05:09.700
So here's the signature of course,
which is linear search.

102
00:05:09.700 --> 00:05:11.210
I do like using snake case.

103
00:05:11.210 --> 00:05:13.982
Now I don't know what happened to me,
I always hated snake case.

104
00:05:13.982 --> 00:05:14.700
And I love snake case.

105
00:05:14.700 --> 00:05:17.450
So if you don't like it, sorry.

106
00:05:17.450 --> 00:05:18.481
So there you go.

107
00:05:18.481 --> 00:05:21.133
Our signature of course, is that we
have a haystack, a bunch of numbers and

108
00:05:21.133 --> 00:05:23.508
a needle that we're looking for,
the number we're looking for.

109
00:05:23.508 --> 00:05:27.824
And we're just simply gonna return
out the Boolean if we did or

110
00:05:27.824 --> 00:05:30.398
did not find the number, all right?

111
00:05:30.398 --> 00:05:33.477
So let's just implement that really
quickly, we're gonna do a classic for

112
00:05:33.477 --> 00:05:34.390
loop, right?

113
00:05:34.390 --> 00:05:37.664
And i has to be less than
of course the haystack.

114
00:05:39.898 --> 00:05:40.790
There we go.

115
00:05:40.790 --> 00:05:45.530
And if haystack i equals the needle,
well, guess what?

116
00:05:45.530 --> 00:05:51.320
We can return true, I normally do not
return in the middle of a for loop.

117
00:05:51.320 --> 00:05:52.562
But for algorithms,

118
00:05:52.562 --> 00:05:57.190
I'm totally willing to make concessions
on good programming techniques.

119
00:05:57.190 --> 00:05:58.000
So there we go.

120
00:05:58.000 --> 00:05:59.097
As simple as that.

121
00:05:59.097 --> 00:06:02.840
If we see it, we return true,
if we don't we return false.

122
00:06:02.840 --> 00:06:05.073
The simplest form of search
that we're going to do,

123
00:06:05.073 --> 00:06:08.120
in fact this is the simplest
algorithm we're going to do today.

124
00:06:08.120 --> 00:06:13.220
To test if you've done it correctly,
what we're going to do is we'll run this,

125
00:06:13.220 --> 00:06:17.620
npx jest and then just partially
type in the name of the algorithm.

126
00:06:17.620 --> 00:06:23.440
So npx jest Linear, this should just
run jest with a filter of Linear.

127
00:06:23.440 --> 00:06:26.520
If you've successfully done,
it'll give you a green passing.

128
00:06:26.520 --> 00:06:29.428
You could also just return true
the first time it executes and

129
00:06:29.428 --> 00:06:30.576
false the second time.

130
00:06:30.576 --> 00:06:33.590
And if you can keep state between
the two tests, you will also win.

131
00:06:33.590 --> 00:06:37.530
So there you go,
don't do that actually program.

132
00:06:37.530 --> 00:06:38.290
But there you go.

133
00:06:38.290 --> 00:06:40.481
This is as simple as it gets.

134
00:06:40.481 --> 00:06:45.652
All right, I am assuming everyone
was able to do that, awesome.

135
00:06:45.652 --> 00:06:48.301
I really just wanted to make sure
everyone has that piece of software

136
00:06:48.301 --> 00:06:49.050
on their machine.

137
00:06:49.050 --> 00:06:52.860
So, I figured this was the easiest way
to know that you have it, it should run.

138
00:06:52.860 --> 00:06:57.468
The reason why you don't use yarn test,
is that if you cut out the package and

139
00:06:57.468 --> 00:07:01.226
grep for test, you'll notice
that I put all of them in there.

140
00:07:01.226 --> 00:07:05.912
And the reason why I did that, the reason
why I do it this way, is that if you look

141
00:07:05.912 --> 00:07:09.890
at, you'll now see what Twitch
has currently called this thing.

142
00:07:09.890 --> 00:07:12.568
If you go to your ligma.config,
you'll notice that you specify

143
00:07:12.568 --> 00:07:16.320
all the algorithms you want to generate
and then it generates them all.

144
00:07:16.320 --> 00:07:17.252
There you go.

145
00:07:17.252 --> 00:07:18.900
Pretty straightforward.

