WEBVTT

1
00:00:00.100 --> 00:00:03.190
All right, so
let's talk about a breadth first search.

2
00:00:03.190 --> 00:00:06.124
I am gonna create a new file just
because that's gonna be a lot easier.

3
00:00:09.265 --> 00:00:13.690
I hope everybody has enjoyed the use
of good GNU Image Manipulation Program.

4
00:00:15.400 --> 00:00:20.200
It means I'm super open source,
I'm a fosse supporter clearly.

5
00:00:20.200 --> 00:00:24.420
Okay, anyways, so, a breadth first search,
let's just redraw our tree.

6
00:00:24.420 --> 00:00:29.762
I can't remember all the numbers,
but I know that there was a 23,

7
00:00:29.762 --> 00:00:35.217
a 5, a 4, and I forgot what this side was,
so I'll just make it up.

8
00:00:35.217 --> 00:00:36.916
An 8, a 21 and a 15.

9
00:00:36.916 --> 00:00:41.436
All right, so
a breadth first search is kinda like

10
00:00:41.436 --> 00:00:45.280
the opposite of a depth first search.

11
00:00:45.280 --> 00:00:50.239
So first off, can anyone just guess
the data structure we're gonna use if it's

12
00:00:50.239 --> 00:00:52.620
the opposite of a depth first search.

13
00:00:52.620 --> 00:00:55.670
&gt;&gt; Queue?
&gt;&gt; Boom, Queue, that's exactly right.

14
00:00:55.670 --> 00:00:56.550
My goodness.

15
00:00:56.550 --> 00:00:57.430
Graham, that was great.

16
00:00:57.430 --> 00:01:00.310
So yes, the opposite of a stack,
a queue, of course.

17
00:01:00.310 --> 00:01:03.339
And that's what we're gonna be using
the reason why it's an opposite,

18
00:01:03.339 --> 00:01:07.010
of course stack is first in last out
versus a queue being first in first out.

19
00:01:07.010 --> 00:01:09.120
So that's exactly what
we're gonna be using.

20
00:01:09.120 --> 00:01:10.549
So if you think about this,

21
00:01:10.549 --> 00:01:14.230
what a breadth first search is gonna
do is it's gonna visit this node.

22
00:01:15.310 --> 00:01:18.662
Then it's gonna visit this node,
then this node.

23
00:01:18.662 --> 00:01:23.580
Then it's gonna visit this node,
this node, this node, this node.

24
00:01:23.580 --> 00:01:26.426
In other words,
it's a tree level kind of visiting.

25
00:01:26.426 --> 00:01:29.380
You'll visit one level
of the tree at a time.

26
00:01:29.380 --> 00:01:32.775
And this is true even if the tree
is kind of sparsely populated,

27
00:01:32.775 --> 00:01:36.429
even if it's just a bunch of little
lines and then maybe every now and

28
00:01:36.429 --> 00:01:38.952
then a parent with two and
then keeps on going.

29
00:01:38.952 --> 00:01:42.810
It will always follow the level
of the tree, each iteration.

30
00:01:42.810 --> 00:01:46.645
I was once in an interview, and I never
heard the term tree level traversal, but

31
00:01:46.645 --> 00:01:49.908
I was in an interview and
the interviewer was just like, all right,

32
00:01:49.908 --> 00:01:52.330
can you print out the tree
in tree level ordering?

33
00:01:52.330 --> 00:01:56.007
And I was just like, never heard of this,
can you please explain this?

34
00:01:56.007 --> 00:01:59.215
And they're like, well, you start here,
and then you go to here, and

35
00:01:59.215 --> 00:02:00.360
then you go to here.

36
00:02:00.360 --> 00:02:03.779
And this is promptly where I corrected
my interviewer saying, first off,

37
00:02:03.779 --> 00:02:07.050
that's not a real term,
it's called a breadth first search.

38
00:02:07.050 --> 00:02:09.102
And second off,
you shouldn't say that cuz it's incorrect.

39
00:02:09.102 --> 00:02:10.570
And I got the job but nonetheless,

40
00:02:10.570 --> 00:02:15.110
argue with your interviewer if they're
incorrect, it's just the best way to go.

41
00:02:15.110 --> 00:02:16.571
That may or may not be a pro tip.

42
00:02:16.571 --> 00:02:20.541
I'm just saying that that may not actually
work out for you but it worked out for me,

43
00:02:20.541 --> 00:02:21.790
but it was fun.

44
00:02:21.790 --> 00:02:26.120
I was also kind of a jerk when I was
younger, it just happens, I don't know.

45
00:02:26.120 --> 00:02:27.850
Anyway, so how does this work?

46
00:02:27.850 --> 00:02:28.840
How do we visit this?

47
00:02:28.840 --> 00:02:33.710
Let's draw this out again except for
let's draw it out using a queue.

48
00:02:33.710 --> 00:02:37.888
So if we start at 7, let's see,
how do we do this again?

49
00:02:37.888 --> 00:02:39.120
Yeah, the arrows go this way.

50
00:02:39.120 --> 00:02:41.180
Arrows go backwards or arrows go forward.

51
00:02:41.180 --> 00:02:43.790
I always have to rethink about this.

52
00:02:43.790 --> 00:02:45.450
So we start at seven, right?

53
00:02:45.450 --> 00:02:47.070
And we're going to add 23 and 8, right?

54
00:02:47.070 --> 00:02:49.054
23, 8, awesome.

55
00:02:49.054 --> 00:02:55.016
And then we're gonna pop off 7.

56
00:02:55.016 --> 00:02:57.912
So now our head is pointing to 23.

57
00:02:57.912 --> 00:03:01.297
Then obviously we printed
out 7 at that point.

58
00:03:01.297 --> 00:03:03.130
Now we visit 23.

59
00:03:03.130 --> 00:03:05.020
So 23 has two children, right?

60
00:03:05.020 --> 00:03:07.150
5 and 4.

61
00:03:07.150 --> 00:03:10.513
So we're gonna add 5, then 4.

62
00:03:10.513 --> 00:03:11.820
Then we're gonna print out 23.

63
00:03:11.820 --> 00:03:15.200
Then we visit 8, what does 8 have?

64
00:03:15.200 --> 00:03:16.300
Well, 8 has two children.

65
00:03:16.300 --> 00:03:20.178
So we're gonna visit these two and
we're gonna put in, let's say, 21.

66
00:03:20.178 --> 00:03:23.650
My goodness, way too small, sorry.

67
00:03:23.650 --> 00:03:25.680
And 15, there we go.

68
00:03:25.680 --> 00:03:27.960
And then we're gonna print out 8.

69
00:03:27.960 --> 00:03:30.510
We'll visit 5, 5 has no children,
we'll print out 5.

70
00:03:30.510 --> 00:03:35.383
We're gonna visit for 4, 4 has no
children, we're gonna print out 4.

71
00:03:35.383 --> 00:03:38.118
We're gonna visit 21,
21 has no children, print out 21.

72
00:03:38.118 --> 00:03:39.787
Visit 15, 15 has no children, 15.

73
00:03:39.787 --> 00:03:42.540
Now notice the order of
this as I printed it out.

74
00:03:42.540 --> 00:03:44.642
It was a 7, it was a 23, it was an 8.

75
00:03:44.642 --> 00:03:48.712
it literally went exactly how I drew
it starting from the left hand side to

76
00:03:48.712 --> 00:03:49.924
the right hand side.

77
00:03:49.924 --> 00:03:54.264
Obviously, we could reverse the direction
in which it reads by pushing in first

78
00:03:54.264 --> 00:03:57.306
the right hand side then
the left hand side, but again,

79
00:03:57.306 --> 00:03:59.271
strange, always go left to right.

80
00:03:59.271 --> 00:04:00.593
Why that is, I don't know.

81
00:04:00.593 --> 00:04:01.750
There we go.

82
00:04:01.750 --> 00:04:05.306
So that's all it really is, and
we can do that pretty easily.

83
00:04:05.306 --> 00:04:06.718
And we are gonna do it but

84
00:04:06.718 --> 00:04:10.640
we're gonna be using a JavaScript
array list as our queue.

85
00:04:10.640 --> 00:04:15.082
If you have it from yesterday, you could
technically use the queue you created

86
00:04:15.082 --> 00:04:18.865
yesterday to run this, but
we'll just pretend as if it is a queue.

87
00:04:18.865 --> 00:04:20.801
And I guess one thing before we do that,

88
00:04:20.801 --> 00:04:24.085
what is the running time
of a breadth first search?

89
00:04:24.085 --> 00:04:29.205
The running time, of course, of a breadth
first search is going to be order n.

90
00:04:29.205 --> 00:04:32.591
But if we actually use a JavaScript array,

91
00:04:32.591 --> 00:04:38.400
it's no longer going to be order n,
it will be order n squared.

92
00:04:38.400 --> 00:04:40.280
You're probably thinking,
how's that possible?

93
00:04:40.280 --> 00:04:41.740
Why is that the case?

94
00:04:41.740 --> 00:04:44.480
Well remember,
what's the thing about array lists?

95
00:04:44.480 --> 00:04:48.290
Array lists have getting at order 1.

96
00:04:48.290 --> 00:04:53.750
It has push pop at order 1, but

97
00:04:53.750 --> 00:04:58.790
shift and unshift, right?

98
00:04:58.790 --> 00:05:01.110
That was order n.

99
00:05:01.110 --> 00:05:03.680
You remember that from yesterday, right?

100
00:05:03.680 --> 00:05:06.033
If you push and
pop from the beginning of the list,

101
00:05:06.033 --> 00:05:08.510
it has to reorder all
the following elements.

102
00:05:08.510 --> 00:05:12.800
Now you're thinking well, but the queue is
not necessarily gonna be that full, right?

103
00:05:12.800 --> 00:05:14.320
So is it really that?

104
00:05:14.320 --> 00:05:16.563
Practically speaking,
is it really gonna be that?

105
00:05:16.563 --> 00:05:20.317
The thing about a binary tree, especially
if it's a full tree, what you're

106
00:05:20.317 --> 00:05:24.850
gonna notice is that when you're right
here, you have one item in the queue.

107
00:05:24.850 --> 00:05:29.210
When it adds its children, it will
have two items in the queue, right?

108
00:05:29.210 --> 00:05:32.214
When we get through
this level of the tree,

109
00:05:32.214 --> 00:05:38.390
we will have four items in the queue,
or half of the entire tree in the queue.

110
00:05:38.390 --> 00:05:43.626
If there was another complete level to
this tree, if we went through all of this,

111
00:05:43.626 --> 00:05:48.169
we would have eight items in the queue or
approximately half the tree,

112
00:05:48.169 --> 00:05:53.713
technically half plus 1 if I'm not
mistaken, cuz 4, 2, 1 is 7, now we have 8.

113
00:05:53.713 --> 00:05:57.811
The thing about a binary tree
is each level, if complete,

114
00:05:57.811 --> 00:06:02.735
is approximately half the size
of the entire tree above it.

115
00:06:02.735 --> 00:06:06.517
So as you can see, if we had to
do half the tree shifting off,

116
00:06:06.517 --> 00:06:09.960
we'd have to do an n
amount of work n times.

117
00:06:09.960 --> 00:06:11.610
So n squared, there you go.

118
00:06:11.610 --> 00:06:13.360
So make sure you use
the right data structure.

119
00:06:13.360 --> 00:06:15.300
Don't just use something
cuz it's convenient.

120
00:06:15.300 --> 00:06:18.494
You really should use a queue when
properly implementing a breadth first

121
00:06:18.494 --> 00:06:21.640
search or else you're gonna get
some terrible running times.

122
00:06:21.640 --> 00:06:23.180
Just a thing to know.

