WEBVTT

1
00:00:00.130 --> 00:00:06.913
So let's go right here and let's set
up our seen array equals a new array.

2
00:00:06.913 --> 00:00:09.854
And let's do a graph cuz remember,

3
00:00:09.854 --> 00:00:14.275
our length is a square cuz
it's an adjacency matrix.

4
00:00:14.275 --> 00:00:16.617
So there's as many rows
as there is columns.

5
00:00:16.617 --> 00:00:20.832
So long as I have that, we have
everything filled with false, awesome.

6
00:00:20.832 --> 00:00:23.322
So we haven't seen anything yet.

7
00:00:23.322 --> 00:00:27.737
Next, we do our previous array,
which means we need to go in here and

8
00:00:27.737 --> 00:00:28.672
add in a -1.

9
00:00:28.672 --> 00:00:29.395
There we go.

10
00:00:29.395 --> 00:00:31.368
Nothing has any parents right now.

11
00:00:31.368 --> 00:00:35.697
Next, we are gonna see our first one,
which of course, is gonna be our source,

12
00:00:35.697 --> 00:00:37.375
which now equals true.

13
00:00:37.375 --> 00:00:43.205
We have seen our source because our q,
Contains our source.

14
00:00:45.413 --> 00:00:46.359
There we go.

15
00:00:46.359 --> 00:00:52.397
That is the setup, just like the setup
was right here, where are you?

16
00:00:52.397 --> 00:00:54.981
There we go, exact same setup right here.

17
00:00:54.981 --> 00:00:59.989
Our source has a -1, but
it has a true for seen.

18
00:00:59.989 --> 00:01:01.616
So we don't really go visit it again.

19
00:01:01.616 --> 00:01:03.059
That'd be kind of wasteful if we did it.

20
00:01:03.059 --> 00:01:07.930
I mean, you technically could, but
it'd just be shoddy programming.

21
00:01:07.930 --> 00:01:09.425
No one wants to do that.
Now, of course,

22
00:01:09.425 --> 00:01:13.199
the Lord's loop, a do while,
while (q.length), right?

23
00:01:13.199 --> 00:01:15.427
We're gonna keep doing
this while we have length.

24
00:01:15.427 --> 00:01:16.857
Again, we're gonna step through.

25
00:01:16.857 --> 00:01:20.944
We need to grab our
current item out of our q,

26
00:01:20.944 --> 00:01:25.266
const current = q.shift as number, right?

27
00:01:25.266 --> 00:01:26.514
Cuz shift, this is the type of thing,

28
00:01:26.514 --> 00:01:28.699
shift could be undefined cuz you
can do that on an empty one, blah,

29
00:01:28.699 --> 00:01:29.650
blah, blah, blah, blah.

30
00:01:29.650 --> 00:01:30.530
There we go.

31
00:01:30.530 --> 00:01:34.940
So if it equals needle,
then we can break, right?

32
00:01:34.940 --> 00:01:38.880
We have found it, but we probably
shouldn't break right away, right?

33
00:01:38.880 --> 00:01:41.472
We probably wanna first set up.

34
00:01:41.472 --> 00:01:42.157
Do we need to set up anything?

35
00:01:42.157 --> 00:01:43.408
No, we don't need to set up anything.

36
00:01:43.408 --> 00:01:44.350
Actually, what am I saying?

37
00:01:44.350 --> 00:01:45.099
There we go.

38
00:01:45.099 --> 00:01:49.051
So if we find our needle,
we're done searching, we found it.

39
00:01:49.051 --> 00:01:52.710
If we haven't found it,
we need to do some bookkeeping,

40
00:01:52.710 --> 00:01:54.785
seen of our current is now true.

41
00:01:57.085 --> 00:02:00.058
Previous, oopsies,
we don't need to do that.

42
00:02:00.058 --> 00:02:02.878
We have now seen current, correct?

43
00:02:02.878 --> 00:02:04.307
Awesome, we don't need to look for
it again.

44
00:02:04.307 --> 00:02:07.582
We don't actually have to do this cuz
we were doing it in our written one.

45
00:02:07.582 --> 00:02:11.561
We were actually doing it,
we're doing it right here.

46
00:02:11.561 --> 00:02:13.639
So you can kinda choose
where you wanna do it.

47
00:02:13.639 --> 00:02:14.933
Let's just do it.

48
00:02:14.933 --> 00:02:16.100
Let's just do it in the for

49
00:02:16.100 --> 00:02:18.873
loop to kinda keep our written
version equal to the other one.

50
00:02:18.873 --> 00:02:19.750
So there we go.

51
00:02:19.750 --> 00:02:20.570
So what are we using?

52
00:02:20.570 --> 00:02:23.970
We're using a weighted adjacency matrix,
awesome.

53
00:02:23.970 --> 00:02:29.680
So let i = 0, i has to be less
than graph.length i++, right?

54
00:02:29.680 --> 00:02:33.236
So now we have our current one,
which remember,

55
00:02:33.236 --> 00:02:37.420
anything we select,
we grab out the row, right?

56
00:02:37.420 --> 00:02:41.860
So by grabbing out the row, that
represents our connections to other nodes.

57
00:02:41.860 --> 00:02:49.570
All right, so our adjacencies is gonna be
graph, not graph[i], what am I saying?

58
00:02:49.570 --> 00:02:53.838
It's gonna be const adjacencies
equals graph current, right?

59
00:02:53.838 --> 00:02:55.243
There we go.

60
00:02:55.243 --> 00:02:57.995
So then we can just do this
one if you really wanted to.

61
00:02:57.995 --> 00:03:00.092
So there we go.
So now we're gonna walk through and

62
00:03:00.092 --> 00:03:01.680
grab each one of these edges out.

63
00:03:01.680 --> 00:03:03.540
Sorry, my bad on that one.

64
00:03:03.540 --> 00:03:09.366
So if there is no edge right here,
we continue, right?

65
00:03:09.366 --> 00:03:11.901
There's just no edge at this point.

66
00:03:11.901 --> 00:03:17.628
Also, if we have seen i before,
we continue.

67
00:03:17.628 --> 00:03:20.537
We don't need to do anything here, right?

68
00:03:20.537 --> 00:03:22.790
We've already seen it, let's move on.

69
00:03:22.790 --> 00:03:26.960
Else, that means we haven't seen it,
so we need to push it into our q,

70
00:03:26.960 --> 00:03:30.380
mark it as seen, and
add from whence it came, right?

71
00:03:30.380 --> 00:03:32.340
Give it the old Elrond approach here.

72
00:03:32.340 --> 00:03:37.414
So seen[i] = true,
oopsies, I added that one,

73
00:03:37.414 --> 00:03:42.190
prev, so this, who is my previous from i?

74
00:03:42.190 --> 00:03:44.610
Well, it's current, right?

75
00:03:44.610 --> 00:03:48.510
The thing we pop out of
the q had this as a child.

76
00:03:48.510 --> 00:03:51.785
We're saying we've seen this,
so that's its parent.

77
00:03:51.785 --> 00:03:53.883
That's its parent in this
breadth first search.

78
00:03:53.883 --> 00:03:55.087
Does that make sense?

79
00:03:55.087 --> 00:03:59.227
That's kinda like the hardest part about
the whole breadth first search is really

80
00:03:59.227 --> 00:04:03.440
rederiving how to walk backwards through
a breadth first search, but there we go.

81
00:04:03.440 --> 00:04:08.157
All right, so now that we've seen it,
we've done all that,

82
00:04:08.157 --> 00:04:10.798
we can go q.push, of course, i.

83
00:04:10.798 --> 00:04:13.553
Most excellent, and might I add,

84
00:04:13.553 --> 00:04:17.548
it is just really easy
using an adjacency matrix.

85
00:04:17.548 --> 00:04:19.661
When you see us using an adjacency list,

86
00:04:19.661 --> 00:04:23.836
you'll see that having these little items
on the list does make it a bit harder.

87
00:04:23.836 --> 00:04:24.553
So there we go.

88
00:04:24.553 --> 00:04:25.736
We now have it.

89
00:04:25.736 --> 00:04:28.081
We have our seen, this.

90
00:04:28.081 --> 00:04:29.132
We'd go like that.

91
00:04:29.132 --> 00:04:31.310
We'll eventually run out
of items to look through.

92
00:04:31.310 --> 00:04:35.322
Now we just have to build it backwards,
right?

93
00:04:35.322 --> 00:04:39.769
So we now have to walk our
previouses until we get to a -1.

94
00:04:39.769 --> 00:04:41.129
Does that make sense?

95
00:04:41.129 --> 00:04:43.563
So we'll go like this.

96
00:04:43.563 --> 00:04:48.620
Let's go let current equals needle,
all right?

97
00:04:48.620 --> 00:04:52.012
We're gonna start at the point
we need to search from or

98
00:04:52.012 --> 00:04:53.867
where we were hoping to find.

99
00:04:53.867 --> 00:04:55.274
We're gonna start there.

100
00:04:55.274 --> 00:04:57.675
And then we also want a out array.

101
00:04:57.675 --> 00:05:02.425
Our out array is gonna represent
our path through the graph,

102
00:05:02.425 --> 00:05:05.789
starting at the needle back to the source.

103
00:05:05.789 --> 00:05:09.712
So we'll go like this,
while, what's it called,

104
00:05:09.712 --> 00:05:13.459
previous current does not equal -1,
meaning,

105
00:05:13.459 --> 00:05:18.290
keep on doing this until we found
a point that has no more parent.

106
00:05:18.290 --> 00:05:22.982
So if we never found needle, it will be -1
to begin with, we'll immediately stop and

107
00:05:22.982 --> 00:05:26.735
we'll return out an empty array,
meaning, we didn't find a path.

108
00:05:26.735 --> 00:05:30.101
There's no path from source to sink.

109
00:05:30.101 --> 00:05:33.961
Do I call it, okay, I do call it needle,
just wanna make sure.

110
00:05:33.961 --> 00:05:36.122
I mean, I should have saw that there's
no length right here, but blah, blah,

111
00:05:36.122 --> 00:05:36.719
blah, blah, blah.

112
00:05:36.719 --> 00:05:39.530
All right, so now that we have that,
we now just build it backwards.

113
00:05:39.530 --> 00:05:42.510
We go out.push current, right?

114
00:05:42.510 --> 00:05:46.497
So we can just push in current
every single time we see this, and

115
00:05:46.497 --> 00:05:49.880
then go current equals previous current.

116
00:05:49.880 --> 00:05:55.760
So set it to my parent or who added me
to this search really is what that says.

117
00:05:55.760 --> 00:05:58.416
Whoever added me to the search,
set it to that.

118
00:05:58.416 --> 00:06:02.558
Cuz there's not really such thing as a
parent-child relationship in a graph, but

119
00:06:02.558 --> 00:06:04.341
in a search path, there kind of is.

120
00:06:04.341 --> 00:06:08.958
So at that point,
all we have to do is if (out.length),

121
00:06:08.958 --> 00:06:13.199
meaning that we did have
a path from beginning to end,

122
00:06:13.199 --> 00:06:17.844
we can simply return our out and
we can reverse it, right?

123
00:06:17.844 --> 00:06:20.410
We reverse it, but
there is one more thing.

124
00:06:21.690 --> 00:06:25.587
If we reverse it, did we add our source?

125
00:06:25.587 --> 00:06:29.525
No, cuz our source has a parent of -1.

126
00:06:29.525 --> 00:06:33.272
And when we get to the point of actually
being at our source, we say, hey,

127
00:06:33.272 --> 00:06:34.549
does this have a parent?

128
00:06:36.715 --> 00:06:37.645
No, it doesn't.

129
00:06:37.645 --> 00:06:42.367
So little fun fact, you gotta do something
that probably looks more like this,

130
00:06:42.367 --> 00:06:44.281
[source].concat, right?

131
00:06:44.281 --> 00:06:47.038
I'm sure there's a better way to do this,
but there you go,

132
00:06:47.038 --> 00:06:50.627
we now have added everything together,
or we can just simply return nothing.

133
00:06:50.627 --> 00:06:53.300
We could have done this
check up here with,

134
00:06:53.300 --> 00:06:55.910
say, our needle having a parent of -1.

135
00:06:55.910 --> 00:06:58.864
That would have also done
the exact same thing.

136
00:06:58.864 --> 00:07:02.478
Meaning that if we would
have one like this,

137
00:07:02.478 --> 00:07:07.355
if previous needle equals -1,
return that, right?

138
00:07:07.355 --> 00:07:08.835
There is no path there.

139
00:07:08.835 --> 00:07:10.275
And then we don't have to do this check.

140
00:07:12.345 --> 00:07:13.065
There we go, right?

141
00:07:13.065 --> 00:07:16.285
You can kind of choose your adventure of
how you want to implement these things.

142
00:07:16.285 --> 00:07:17.365
I don't really have a preference.

143
00:07:17.365 --> 00:07:18.475
It's all the same thing to me, right?

144
00:07:18.475 --> 00:07:19.960
It's all the same set of logic.

145
00:07:19.960 --> 00:07:22.590
So there we go, we've done it,
we've officially made it.

146
00:07:22.590 --> 00:07:25.600
If I am the most bestest,
then this should work.

147
00:07:27.040 --> 00:07:29.606
All right, so npx jest BFS.

148
00:07:31.679 --> 00:07:35.373
Every time I see BFS,
I almost think best friends forever.

149
00:07:35.373 --> 00:07:37.976
All right, hold on,
we have a couple items in there.

150
00:07:37.976 --> 00:07:38.935
All right, do we actually get that?

151
00:07:38.935 --> 00:07:41.099
Yep, this one doesn't exist.

152
00:07:41.099 --> 00:07:46.822
Dang it, I didn't look at my interface.

153
00:07:46.822 --> 00:07:49.462
It's returned null if there's no path.

154
00:07:49.462 --> 00:07:51.939
I was such a dummy.

155
00:07:51.939 --> 00:07:54.142
There we go, it wanted us to return null.

156
00:07:54.142 --> 00:07:57.434
Who wrote that interface to begin with?

157
00:07:57.434 --> 00:07:58.957
All right, there we go, awesome.

158
00:07:58.957 --> 00:08:00.569
We passed the thing we wanted to build.

159
00:08:00.569 --> 00:08:04.701
I technically have two,
I have two functions in here.

160
00:08:04.701 --> 00:08:06.977
There's also BFS on a graph list,
which we just didn't do.

161
00:08:06.977 --> 00:08:09.480
So we did it on a matrix, awesome.

162
00:08:09.480 --> 00:08:12.409
We've built the path through
the matrix and found the reverse path,

163
00:08:12.409 --> 00:08:14.086
did all the swapping, and the source.

164
00:08:14.086 --> 00:08:18.552
Do all the magic, keeping how we got here
from whence we came has been calculated.

165
00:08:18.552 --> 00:08:22.405
This effectively is an identical algorithm
to what I had to do with Falkor,

166
00:08:22.405 --> 00:08:23.995
which I showed you yesterday,

167
00:08:23.995 --> 00:08:28.170
where I actually had to be able to remap
backwards through a graph how I got there.

