WEBVTT

1
00:00:00.000 --> 00:00:02.540
It's by far the hardest
part to all of this.

2
00:00:02.540 --> 00:00:03.508
And so let's go.

3
00:00:03.508 --> 00:00:06.295
So let's just kind of draw a tree.

4
00:00:06.295 --> 00:00:07.886
I wish I had a good
tree in mind right now.

5
00:00:07.886 --> 00:00:10.047
I think I can create one on the fly.

6
00:00:13.555 --> 00:00:18.933
I'm gonna put little X's here
to denote that it's null,

7
00:00:18.933 --> 00:00:21.904
just to really make it obvious.

8
00:00:21.904 --> 00:00:26.328
Let's go 51 why not, good safe.

9
00:00:26.328 --> 00:00:29.630
And then let's do 25,

10
00:00:29.630 --> 00:00:34.832
let's do 37, and let's do 100.

11
00:00:34.832 --> 00:00:39.553
All right, so here's kind of the,
let's do this.

12
00:00:41.149 --> 00:00:43.373
So, deletion.

13
00:00:43.373 --> 00:00:46.197
Let's just talk about
deleting this one first.

14
00:00:46.197 --> 00:00:48.939
What happens if we were
to delete this one?

15
00:00:48.939 --> 00:00:53.353
How do we ensure that we preserve
the shape of our binary tree correctly?

16
00:00:53.353 --> 00:00:56.418
Well, this thing has no children.

17
00:00:56.418 --> 00:01:02.909
Therefore, if we just remove it,
is our tree still valid?

18
00:01:02.909 --> 00:01:04.953
Yes, our tree is still valid.

19
00:01:04.953 --> 00:01:11.482
So case one, no child.

20
00:01:11.482 --> 00:01:14.626
The answer is just simply delete, right?

21
00:01:14.626 --> 00:01:16.790
That makes sense.

22
00:01:16.790 --> 00:01:18.979
But let's say that we didn't do that for
a second.

23
00:01:18.979 --> 00:01:20.501
We still had four right here.

24
00:01:20.501 --> 00:01:23.199
Sorry, here, I'll just redraw it out.

25
00:01:23.199 --> 00:01:28.684
We still have four right here,
and we wanted to delete.

26
00:01:28.684 --> 00:01:31.611
How do we delete this this time?

27
00:01:31.611 --> 00:01:35.249
Well, if there is only one child,

28
00:01:35.249 --> 00:01:40.518
then we can take our parent
pointer to ourselves,

29
00:01:40.518 --> 00:01:44.166
and point it down to four, right?

30
00:01:44.166 --> 00:01:48.023
We just simply remove ourselves,
and point it to the next one.

31
00:01:48.023 --> 00:01:50.369
So this is a lot like
a linked list operation.

32
00:01:50.369 --> 00:01:53.828
Hopefully, now you see why you
started link list, and move on,

33
00:01:53.828 --> 00:01:57.739
cuz what the hell just doing a singly
linked lists operation, right, or

34
00:01:57.739 --> 00:01:59.556
a doubly linked list operation?

35
00:01:59.556 --> 00:02:01.653
Breaking the parents, setting this right.

36
00:02:01.653 --> 00:02:04.633
We're just doing the whole back and
forth fun times.

37
00:02:04.633 --> 00:02:06.457
And you have to make sure you
do it in the correct order.

38
00:02:06.457 --> 00:02:10.879
So case two, which of

39
00:02:10.879 --> 00:02:15.301
course is one child,

40
00:02:15.301 --> 00:02:21.205
that is set parent to child.

41
00:02:21.205 --> 00:02:27.492
All right, so there's two more cases, and
this is where things get old if you will.

42
00:02:27.492 --> 00:02:33.129
So the first one is this right here,
or this is the one right here.

43
00:02:33.129 --> 00:02:36.952
If we were to delete this one,
what do we do?

44
00:02:36.952 --> 00:02:43.109
Well, let's just say we pointed to this,
what happens to 100?

45
00:02:43.109 --> 00:02:43.691
It's gone, right?

46
00:02:43.691 --> 00:02:45.314
It's gone.
You can't get it back.

47
00:02:45.314 --> 00:02:50.264
You've not only deleted 51, you've
also deleted the entire right subtree,

48
00:02:50.264 --> 00:02:51.806
that'd be bad, right?

49
00:02:51.806 --> 00:02:53.540
We don't.

50
00:02:53.540 --> 00:02:55.147
That's not a very good approach to things.

51
00:02:55.147 --> 00:02:55.957
At least in my book,

52
00:02:55.957 --> 00:02:58.685
that's not a good approach to how
you wanna do a binary search tree.

53
00:02:58.685 --> 00:03:01.030
So we need a different tactic, right?

54
00:03:01.030 --> 00:03:02.996
We need something that is a bit different.

55
00:03:02.996 --> 00:03:07.460
So if we can reduce our case
to either case one or two,

56
00:03:07.460 --> 00:03:10.722
we've already solved it, right?.

57
00:03:10.722 --> 00:03:13.126
So let's try this one.

58
00:03:13.126 --> 00:03:16.394
What happened if we took this, and

59
00:03:16.394 --> 00:03:21.577
we took our left hand side,
which is our smaller side,

60
00:03:21.577 --> 00:03:26.432
and found the largest
element in our smaller side?

61
00:03:26.432 --> 00:03:28.178
Does that makes sense?

62
00:03:28.178 --> 00:03:33.867
So we'd go down to our left subtree
which is our smaller subtree,

63
00:03:33.867 --> 00:03:37.183
and then went as far as we can this way.

64
00:03:37.183 --> 00:03:37.778
What happens?

65
00:03:37.778 --> 00:03:42.945
Will we find the largest element
in our smallest subtree,

66
00:03:42.945 --> 00:03:48.119
which means, that if we put it right here,
what happens?

67
00:03:48.119 --> 00:03:52.468
Everything on this side,
will be smaller than or equal to it.

68
00:03:52.468 --> 00:03:55.473
Everything on this side,
will be larger than it,

69
00:03:55.473 --> 00:03:58.991
because this is the largest
element in our smallest side.

70
00:03:58.991 --> 00:04:01.829
We can also do the same thing on
the other side, and we kind of do all of,

71
00:04:01.829 --> 00:04:02.856
there is one last thing.

72
00:04:02.856 --> 00:04:07.837
We also do one little proof here, which is
when we go down to our subtree on our left

73
00:04:07.837 --> 00:04:12.309
hand side and go all the way this
direction, we can guarantee one thing,

74
00:04:12.309 --> 00:04:15.200
it will either have only one or
zero children.

75
00:04:15.200 --> 00:04:17.813
Meaning that, we keep on going right,

76
00:04:17.813 --> 00:04:21.631
until we hit a place where we
cannot go any further right.

77
00:04:21.631 --> 00:04:24.408
Which means that it can only have one or
none, right,

78
00:04:24.408 --> 00:04:27.505
because it's could still
actually have a left hand child.

79
00:04:27.505 --> 00:04:30.759
And if it does have a left hand child,
we already know how to solve that, right?

80
00:04:30.759 --> 00:04:35.533
So let's just say that is 32,
well, simple stuff.

81
00:04:35.533 --> 00:04:40.158
We're gonna go here, we'll set this one to
now point to that on the right hand side,

82
00:04:40.158 --> 00:04:41.994
and this one to now be the parent.

83
00:04:41.994 --> 00:04:44.934
See as I said, it's pretty
involved level of transitioning,

84
00:04:44.934 --> 00:04:47.993
but this is just what you have to do,
it makes sense at this point.

85
00:04:47.993 --> 00:04:56.465
And you can do the reverse operation
on this side of the subtree two,

86
00:04:56.465 --> 00:05:01.368
we find the smallest on the large side,

87
00:05:01.368 --> 00:05:05.083
and set that as the parent, or

88
00:05:05.083 --> 00:05:11.791
we find the largest on small side,
that said, yeah.

89
00:05:11.791 --> 00:05:14.913
Close enough, right?

90
00:05:14.913 --> 00:05:18.256
So why would you wanna
choose one over the other?

91
00:05:18.256 --> 00:05:21.392
Now this is gonna require you to
really think about things in kind of

92
00:05:21.392 --> 00:05:22.066
a unique way.

93
00:05:22.066 --> 00:05:25.165
Why would you choose one over the other?

94
00:05:25.165 --> 00:05:31.062
&gt;&gt; You'd be more likely to find one
that fits the rules on the large side.

95
00:05:31.062 --> 00:05:35.235
&gt;&gt; Nope, cuz the large side you go
to the large side, and then go left,

96
00:05:35.235 --> 00:05:37.517
until you don't hit a left anymore.

97
00:05:37.517 --> 00:05:39.556
On the small side,
you go to the small side,

98
00:05:39.556 --> 00:05:41.888
and go right until you
don't hit a right anymore.

99
00:05:41.888 --> 00:05:45.539
So they both could have the case of
either case one, no children, or

100
00:05:45.539 --> 00:05:47.220
case two, one child, right?

101
00:05:47.220 --> 00:05:49.253
We can't tell that type of shape.

102
00:05:49.253 --> 00:05:51.844
So I'll give you a little hint right here.

103
00:05:51.844 --> 00:05:53.988
You can think height of the tree.

104
00:05:53.988 --> 00:05:58.932
That's a reason why you do that, if you
kept information in the node about what my

105
00:05:58.932 --> 00:06:03.312
maximum height is, plus,
my children have their own maximum height.

106
00:06:03.312 --> 00:06:08.505
You will be able to tell in old one time,
which side has a smaller height.

107
00:06:08.505 --> 00:06:12.830
And then you probably want to reorganize
the one with a larger height,

108
00:06:12.830 --> 00:06:15.629
reason being is that,
what are you gonna do?

109
00:06:15.629 --> 00:06:17.852
You're gonna shrink up the tree, right?

110
00:06:17.852 --> 00:06:21.037
So there could be benefits to
being able to know the height, and

111
00:06:21.037 --> 00:06:24.764
make sure that you're always maintaining
a tighter binary search tree,

112
00:06:24.764 --> 00:06:27.552
rather than just keep on
letting it kind of spider out.

113
00:06:27.552 --> 00:06:29.412
Because if you do a bunch of inserts,

114
00:06:29.412 --> 00:06:32.782
guaranteed you're not gonna get
a complete binary tree, right?

115
00:06:32.782 --> 00:06:35.767
You're gonna have a pretty spidery one,
which means that your find,

116
00:06:35.767 --> 00:06:36.841
is gonna be much slower.

117
00:06:36.841 --> 00:06:42.815
But if you do your deletes right,
you could shrink back up your tree.

118
00:06:42.815 --> 00:06:43.858
Does that make sense?

119
00:06:43.858 --> 00:06:47.501
It's kind of a pretty big,
is a fairly big topic right here,

120
00:06:47.501 --> 00:06:52.440
and it's not super duper simple, but it's
also super nice, I really like it a lot

