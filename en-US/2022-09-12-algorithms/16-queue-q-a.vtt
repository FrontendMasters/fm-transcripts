WEBVTT

1
00:00:00.480 --> 00:00:05.051
It's a great time to ask questions if
you don't feel like you quite get it.

2
00:00:05.051 --> 00:00:07.220
&gt;&gt; In line six you're
saying that if there is.

3
00:00:07.220 --> 00:00:10.470
&gt;&gt; Six up ,sorry I use relative numbers
are you saying six up right here.

4
00:00:10.470 --> 00:00:11.880
&gt;&gt; Yeah
&gt;&gt; Yeah.

5
00:00:11.880 --> 00:00:17.904
So when there's no tail, that means that
is there one note is no note at all like.

6
00:00:17.904 --> 00:00:19.261
&gt;&gt; There's no note at all.

7
00:00:19.261 --> 00:00:24.275
S normally what I would do is I
do something like this right.

8
00:00:24.275 --> 00:00:27.152
This dot length, yeah we can do that.

9
00:00:27.152 --> 00:00:32.510
This dot length equals one,
meaning I just got done adding it.

10
00:00:32.510 --> 00:00:36.825
But of course what happens right here,
type script is like, Hey, man, right,

11
00:00:36.825 --> 00:00:38.420
it can't handle that.

12
00:00:38.420 --> 00:00:40.390
So therefore, I had to do that.

13
00:00:40.390 --> 00:00:44.802
And D queuing of course, there's one thing
I didn't technically do here correctly,

14
00:00:44.802 --> 00:00:46.850
which is what about the tail?

15
00:00:46.850 --> 00:00:49.305
What happens when we remove this.

16
00:00:49.305 --> 00:00:54.148
Really what you should be having
is if this dot length equals zero,

17
00:00:54.148 --> 00:00:57.970
then this dot detail should
equal undefined right.

18
00:00:57.970 --> 00:01:01.470
We need to make sure that we forget
about it at all points in time.

19
00:01:02.540 --> 00:01:03.890
So will implementation detail.

20
00:01:03.890 --> 00:01:05.980
But so
then this thing of course falls apart.

21
00:01:05.980 --> 00:01:07.897
It's like hey, I can't do it so

22
00:01:07.897 --> 00:01:12.090
I didn't want to just be encumbered
by TypeScript types or it really.

23
00:01:12.090 --> 00:01:16.460
TypeScript just actually technically
doing the right thing there we go.

24
00:01:16.460 --> 00:01:19.216
And so for that,
I just go knock this out there.

25
00:01:19.216 --> 00:01:22.218
There we go,
awesome it's the exact same check right.

26
00:01:22.218 --> 00:01:26.469
As long as we've kept everything in
nice book keeping order this should all

27
00:01:26.469 --> 00:01:27.080
work out.

28
00:01:30.190 --> 00:01:31.820
&gt;&gt; Could you clarify the peak method.

29
00:01:32.956 --> 00:01:33.470
&gt;&gt; The peak method?

30
00:01:33.470 --> 00:01:38.024
Yeah, so the peak method is very simple
So, right now if we just take this as our

31
00:01:38.024 --> 00:01:41.272
linkless right here and
we wanted to peek into our list.

32
00:01:41.272 --> 00:01:45.115
Meaning we want to see the next value
returned without mutating the state of

33
00:01:45.115 --> 00:01:46.160
the queue.

34
00:01:46.160 --> 00:01:50.450
All we're gonna do is go to our head and
get the value out of the head.

35
00:01:50.450 --> 00:01:54.184
In other words, we need to be able
to get that generic t value out.

36
00:01:54.184 --> 00:01:55.557
Because the implementer or

37
00:01:55.557 --> 00:02:00.030
the the instantiater of the queue does not
care about how the queue is book keeped.

38
00:02:00.030 --> 00:02:03.094
It only cares about the values
that it puts in and gets out.

39
00:02:03.094 --> 00:02:05.660
And so
we do that by doing this right here.

40
00:02:05.660 --> 00:02:07.270
We go to our head.

41
00:02:07.270 --> 00:02:09.280
If it does exist, we get the value out.

42
00:02:09.280 --> 00:02:11.394
If it doesn't exist, we return undefined.

43
00:02:13.936 --> 00:02:14.701
Good?

44
00:02:17.755 --> 00:02:24.840
&gt;&gt; Sorry, why are we setting this top
tail time next to the new note itself?

45
00:02:24.840 --> 00:02:26.084
&gt;&gt; All right so yeah, so right here.

46
00:02:26.084 --> 00:02:27.290
So let's go over that operation.

47
00:02:27.290 --> 00:02:28.610
So that is an insertion at the end.

48
00:02:28.610 --> 00:02:29.840
So let's actually just do that again.

49
00:02:31.170 --> 00:02:35.291
So if we want to insert F into
here we have to do two operations.

50
00:02:35.291 --> 00:02:39.286
We first have to go to the tail and
set its next to point to F.

51
00:02:39.286 --> 00:02:44.077
After that, our tail will still be
pointing at E, which is not our true tail,

52
00:02:44.077 --> 00:02:45.500
right?

53
00:02:45.500 --> 00:02:46.670
It has to point to F.

54
00:02:46.670 --> 00:02:51.646
So we also have to update
tail to point to F So

55
00:02:51.646 --> 00:02:54.330
if you look at the code, exact same thing.

56
00:02:54.330 --> 00:03:00.135
We go to tail and we set the next one
after the tail then catch the tail

57
00:03:00.135 --> 00:03:05.847
up because the tail should always
represent the end of the queue.

58
00:03:05.847 --> 00:03:06.730
Does this look good?

59
00:03:07.910 --> 00:03:08.941
Awesome.

60
00:03:08.941 --> 00:03:10.880
All right.

61
00:03:10.880 --> 00:03:12.010
So what's the opposite of a queue?

62
00:03:13.810 --> 00:03:15.450
Stack, I know obvious.

63
00:03:15.450 --> 00:03:19.450
It's very obvious.

64
00:03:19.450 --> 00:03:21.930
Oddly enough,
I've also created a lot of these things.

65
00:03:21.930 --> 00:03:23.510
These things are great for performance.

66
00:03:23.510 --> 00:03:25.560
Technically, with JavaScript arrays,
awesome to use.

67
00:03:25.560 --> 00:03:28.380
You can use push and
pop at pretty much constant time rates.

68
00:03:28.380 --> 00:03:28.910
Good times.

