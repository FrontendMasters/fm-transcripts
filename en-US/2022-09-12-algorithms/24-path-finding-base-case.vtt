WEBVTT

1
00:00:00.100 --> 00:00:02.745
Let's go back into here and
let's create a new file.

2
00:00:02.745 --> 00:00:08.687
Zoom in twice, cuz zooming in twice is the
best type of zoom, and go up to the top.

3
00:00:08.687 --> 00:00:12.632
And so what we're gonna call
this thing is the Maze Solver.

4
00:00:12.632 --> 00:00:17.022
Man, that was just the worst E ever,
Solver.

5
00:00:17.022 --> 00:00:19.092
Aren't you happy I don't
have terrible handwriting?

6
00:00:19.092 --> 00:00:21.817
Imagine this class if I
had terrible handwriting.

7
00:00:21.817 --> 00:00:25.093
I always thought like, man,
because we had one professor that just,

8
00:00:25.093 --> 00:00:27.072
you couldn't tell if he's drawn an S or
a 5.

9
00:00:27.072 --> 00:00:28.369
And you're like, is that a 5 or an S?

10
00:00:28.369 --> 00:00:31.077
And he would just never tell you and
he drew them from the same way,

11
00:00:31.077 --> 00:00:33.833
and someone finally asked in class,
and it was very, very funny,

12
00:00:33.833 --> 00:00:35.576
and everyone knew what they're saying.

13
00:00:35.576 --> 00:00:38.436
Anyways, all right, so
let's talk about a maze solver.

14
00:00:38.436 --> 00:00:42.372
So what we're gonna have is we're
gonna have a list of strings.

15
00:00:42.372 --> 00:00:45.313
So you could imagine this, you could
actually read this out from a file.

16
00:00:45.313 --> 00:00:47.273
We're not gonna read it out from a file,

17
00:00:47.273 --> 00:00:49.472
instead we'll just have
an array passed in.

18
00:00:49.472 --> 00:00:52.179
And this list of strings is
gonna contain some characters.

19
00:00:52.179 --> 00:00:54.747
The first thing it's going
to contain are pound signs.

20
00:00:54.747 --> 00:00:56.726
It could be asterisk,
it doesn't really matter.

21
00:00:56.726 --> 00:00:58.539
These are walls.

22
00:00:58.539 --> 00:01:00.811
You cannot go through a wall, right?

23
00:01:00.811 --> 00:01:03.467
This makes sense.

24
00:01:03.467 --> 00:01:07.058
At some point it's gonna
also have an ending, right?

25
00:01:07.058 --> 00:01:09.724
The ending, of course,
is where we want to get to.

26
00:01:12.415 --> 00:01:15.179
There we go, look at that,
we already have the first row done.

27
00:01:15.179 --> 00:01:16.807
The second row we'll make really easy.

28
00:01:19.562 --> 00:01:22.475
I intentionally made this maze very,
very simple.

29
00:01:22.475 --> 00:01:25.136
And the third row, we could have a start.

30
00:01:25.136 --> 00:01:26.135
There we go.

31
00:01:27.885 --> 00:01:29.246
Let me just finish this off.

32
00:01:32.426 --> 00:01:33.045
There we go.

33
00:01:33.045 --> 00:01:36.246
So we're humans, we're awesome,
we look at it and go, dude,

34
00:01:36.246 --> 00:01:37.584
you just go like that, man.

35
00:01:37.584 --> 00:01:38.905
It's just that simple.

36
00:01:38.905 --> 00:01:40.280
Well, you can't do that to a computer.

37
00:01:40.280 --> 00:01:42.345
You can't just go, well, look at that.

38
00:01:42.345 --> 00:01:43.857
I mean maybe with Dolly, I don't know.

39
00:01:43.857 --> 00:01:46.955
Dolly, you say thanks to it, and
out comes images that are crazy.

40
00:01:46.955 --> 00:01:50.630
So maybe you can do it these days,
but for our sake you can't do it.

41
00:01:50.630 --> 00:01:53.437
So how are we going to solve this?

42
00:01:53.437 --> 00:01:56.599
Well, I'll tell you this much,
recursion is our friend.

43
00:01:56.599 --> 00:01:58.298
And I've never been asked
this in an interview,

44
00:01:58.298 --> 00:02:00.295
I don't think this would be
a great interview question.

45
00:02:00.295 --> 00:02:02.627
It would be great to know that they
know recursion, but that's about it.

46
00:02:02.627 --> 00:02:06.435
It's a very simple problem
once you understand it.

47
00:02:06.435 --> 00:02:10.065
So first, how would we just
theoretically solve this?

48
00:02:10.065 --> 00:02:12.879
Well, once we know where
our start condition is,

49
00:02:12.879 --> 00:02:16.631
we know what walls look like,
we know what pathways look like, and

50
00:02:16.631 --> 00:02:19.386
we know that we're looking for
an ending thing.

51
00:02:19.386 --> 00:02:23.026
And maybe we're given the exact coordinate
of the endpoint or just the, say,

52
00:02:23.026 --> 00:02:24.144
symbol it represents.

53
00:02:24.144 --> 00:02:27.282
It doesn't really matter what we're given,
we just know that there's end, and

54
00:02:27.282 --> 00:02:28.565
we recognize that they're end.

55
00:02:28.565 --> 00:02:32.641
Well, what we could do, our human brain
has probably taken over right now and say,

56
00:02:32.641 --> 00:02:33.703
okay, we'll go up.

57
00:02:33.703 --> 00:02:36.599
Well, again, computers,
you can't just say go up, right?

58
00:02:36.599 --> 00:02:37.653
So what would you do?

59
00:02:37.653 --> 00:02:45.267
Well, at any one square, let's just
draw that in more of the abstract sense.

60
00:02:45.267 --> 00:02:48.168
What can we do at any one square?

61
00:02:48.168 --> 00:02:53.819
Well, we can go up, we can go right,
we can go down, we can go left.

62
00:02:53.819 --> 00:02:57.441
I start with up because I did too much
CSS when I was a youngster, okay?

63
00:02:57.441 --> 00:02:59.661
Don't do CSS, it's bad for your health.

64
00:02:59.661 --> 00:03:03.894
And so now I always start with top,
right, bottom, left, and there you go.

65
00:03:03.894 --> 00:03:07.476
So we can do any of those four directions,
correct?

66
00:03:07.476 --> 00:03:12.042
Right, but
you can't always do them, right?

67
00:03:12.042 --> 00:03:13.719
You could run into walls, correct?

68
00:03:13.719 --> 00:03:14.759
Walls are bad.

69
00:03:14.759 --> 00:03:18.005
You could go off the graph, right?

70
00:03:18.005 --> 00:03:20.866
If we went down from start,
we'd be literally off the graph,

71
00:03:20.866 --> 00:03:23.025
that would be really, really bad, correct?

72
00:03:23.025 --> 00:03:28.461
Correct, we could also go to
a spot we've seen before.

73
00:03:28.461 --> 00:03:29.772
That'd be pretty bad, right?

74
00:03:29.772 --> 00:03:33.747
You wouldn't wanna just sit there and go
back and forth between, maybe it's here,

75
00:03:33.747 --> 00:03:36.216
maybe it's here, and
then you're stuck forever in this loop,

76
00:03:36.216 --> 00:03:37.926
because you didn't program it correctly.

77
00:03:37.926 --> 00:03:41.975
All right, so we should consider
these all our base case.

78
00:03:41.975 --> 00:03:45.977
And there's a good reason why you consider
the base case, and you don't check for

79
00:03:45.977 --> 00:03:47.253
it in the recursive case.

80
00:03:47.253 --> 00:03:49.603
It's very, very important not to do that.

81
00:03:49.603 --> 00:03:53.694
I keep stressing the base case cuz it just
makes recursion a million times simpler.

82
00:03:53.694 --> 00:03:56.892
So let's think about our base cases.

83
00:03:56.892 --> 00:03:57.451
Base Case.

84
00:03:59.360 --> 00:04:05.102
Well, 1, it's a wall, right?

85
00:04:05.102 --> 00:04:08.732
If the point we're at in recursion,

86
00:04:08.732 --> 00:04:13.307
we are on a wall,
we cannot be here, correct?

87
00:04:13.307 --> 00:04:15.635
Right, you're on a wall,
you cannot be here.

88
00:04:15.635 --> 00:04:19.021
So that's an invalid state, perfect.

89
00:04:19.021 --> 00:04:23.634
2, what's the next one?

90
00:04:23.634 --> 00:04:24.485
I feel like there's four.

91
00:04:24.485 --> 00:04:25.918
Now, all of a sudden, I'm confused.

92
00:04:25.918 --> 00:04:30.374
Yeah, off the map, right?

93
00:04:30.374 --> 00:04:36.730
If somehow you're in a spot that's not
on the map, you have to return, correct?

94
00:04:36.730 --> 00:04:38.441
That makes sense.

95
00:04:38.441 --> 00:04:43.980
3, it's the end, right?

96
00:04:43.980 --> 00:04:47.220
Cuz if we make it to the end,
we are done recursing, right?

97
00:04:47.220 --> 00:04:51.092
That is our actual goal is to
make it to that point, correct?

98
00:04:51.092 --> 00:04:52.864
Awesome.

99
00:04:52.864 --> 00:04:57.550
And then 4, if we have seen it.

100
00:05:00.784 --> 00:05:02.453
This part is very, very important.

101
00:05:02.453 --> 00:05:05.003
Have you seen this tile before?

102
00:05:05.003 --> 00:05:08.074
If you have,
you also don't want to be here, right?

103
00:05:08.074 --> 00:05:10.106
We don't want to visit anything twice.

104
00:05:10.106 --> 00:05:12.804
So that's really the base cases.

105
00:05:12.804 --> 00:05:17.434
And then the recursive cases is
simply checking every direction.

106
00:05:17.434 --> 00:05:21.306
It's the dot, so the recursive
step is actually pretty simple.

107
00:05:21.306 --> 00:05:23.958
Just go all four directions.

108
00:05:23.958 --> 00:05:26.801
The base case is really, really simple.

109
00:05:26.801 --> 00:05:29.737
Can't be any of these places,
and that's it.

110
00:05:29.737 --> 00:05:32.878
And so when you put these two things
together, when we program them,

111
00:05:32.878 --> 00:05:34.681
it actually becomes very, very easy.

112
00:05:34.681 --> 00:05:40.839
All right, so I believe at this point
I said, hey, yeah, let's implement it.

113
00:05:40.839 --> 00:05:41.982
Yeah, let's implement it.

114
00:05:41.982 --> 00:05:43.768
All right, so
is everyone ready to implement it?

115
00:05:43.768 --> 00:05:46.521
So in the Kata machine,
we can actually implement this.

116
00:05:46.521 --> 00:05:48.401
This is one of the things
that I put in there.

117
00:05:48.401 --> 00:05:53.817
So if we go to our day1 and
go to MazeSolver, it is right here.

118
00:05:53.817 --> 00:05:55.204
So this is what we're past in.

119
00:05:55.204 --> 00:05:58.598
We're past in a maze,
which is a list of strings, all right?

120
00:05:58.598 --> 00:06:00.641
So that's exactly like that, correct?

121
00:06:00.641 --> 00:06:04.155
Awesome, we're past in
what a wall looks like.

122
00:06:04.155 --> 00:06:07.723
Hey, this is a wall, so
we now know what a wall is.

123
00:06:07.723 --> 00:06:10.025
We're past in our starting point.

124
00:06:10.025 --> 00:06:12.204
Awesome, we now know where to start.

125
00:06:12.204 --> 00:06:16.255
And last, we're past in an ending point,
we know where to end.

126
00:06:16.255 --> 00:06:20.007
And lastly, we need to return,
I said lastly twice.

127
00:06:20.007 --> 00:06:26.449
Most lastly, we need to return a list
of points from the start to the end.

128
00:06:26.449 --> 00:06:28.777
This is where things get a little tricksy,
right?

129
00:06:28.777 --> 00:06:30.693
This is where the hard things happen.

130
00:06:30.693 --> 00:06:33.217
Well, don't worry,
it's not actually all that hard.

131
00:06:33.217 --> 00:06:35.337
So like any good recursive function,

132
00:06:35.337 --> 00:06:38.583
I often find that the entrance
to the recursive function,

133
00:06:38.583 --> 00:06:42.239
like this function solve,
isn't the one you want to recurse in.

134
00:06:42.239 --> 00:06:44.486
I don't know why it always ends
up being that way, it just does.

135
00:06:44.486 --> 00:06:48.076
So let's just write a function up here and
let's call it walk, right?

136
00:06:48.076 --> 00:06:50.871
So we're just gonna simply walk the maze.

137
00:06:50.871 --> 00:06:56.045
So remember, we want to be able to do our
base cases, then our recursive cases.

138
00:06:56.045 --> 00:06:59.774
The base cases require us to
know where we're currently at,

139
00:06:59.774 --> 00:07:03.735
the recursive case requires us to
be able to walk in directions.

140
00:07:03.735 --> 00:07:04.952
So let's remember that.

141
00:07:04.952 --> 00:07:10.544
So I guess that means we need
the maze to be able to walk, correct?

142
00:07:10.544 --> 00:07:15.280
We're probably gonna want the wall because
we need to know if we're on a wall or not.

143
00:07:15.280 --> 00:07:20.793
We're gonna want the current point,
where are we at this exact moment, right?

144
00:07:20.793 --> 00:07:22.712
We just need to know where we're at.

145
00:07:22.712 --> 00:07:27.497
We need to know the ending,
cuz again, that's a part of our

146
00:07:27.497 --> 00:07:32.786
ability to know if we've been done,
it's one of our base cases.

147
00:07:32.786 --> 00:07:34.600
All right, for
now we can just keep it like that,

148
00:07:34.600 --> 00:07:35.945
we're gonna add some more things.

149
00:07:35.945 --> 00:07:38.482
Don't you just love when
arguments get really long?

150
00:07:38.482 --> 00:07:39.210
I do, too.

151
00:07:39.210 --> 00:07:42.754
And lastly, I am gonna do this, I'm gonna
kinda give away a part of the game.

152
00:07:42.754 --> 00:07:45.199
We're gonna wanna return a true or
a false.

153
00:07:45.199 --> 00:07:48.172
And there's good reasons for
it, so just let it happen.

154
00:07:48.172 --> 00:07:51.333
All right, so first,
let's just start with the base cases.

155
00:07:51.333 --> 00:07:55.455
We don't even need to know how to do
recursion to be able to program these

156
00:07:55.455 --> 00:07:56.703
base cases, right?

157
00:07:56.703 --> 00:07:58.015
Base cases are pretty simple.

158
00:07:58.015 --> 00:08:02.802
So let's move these two around, right?

159
00:08:02.802 --> 00:08:06.776
Because if we're in a language in which
you accessed outside of the bounds,

160
00:08:06.776 --> 00:08:08.088
it would throw an error.

161
00:08:08.088 --> 00:08:10.696
Right now we're in TypeScript
which doesn't do that, but

162
00:08:10.696 --> 00:08:13.629
we're gonna pretend like it is
because it's just good practice.

163
00:08:13.629 --> 00:08:18.663
So 1, base case, let's say,
off the map, right?

164
00:08:18.663 --> 00:08:20.290
So are we off the map?

165
00:08:20.290 --> 00:08:25.581
So easy check,
we can go curr.x is greater than or,

166
00:08:25.581 --> 00:08:28.826
let's say, is less than 0, or

167
00:08:28.826 --> 00:08:34.387
curr.x &gt;= maze first row,
it's a square, right?

168
00:08:34.387 --> 00:08:37.973
It's a square, the maze is a square,
so we can just say, hey,

169
00:08:37.973 --> 00:08:40.024
your first row's length, right?

170
00:08:40.024 --> 00:08:41.449
That's what we're grabbing out of here.

171
00:08:41.449 --> 00:08:46.958
Cuz remember, whenever you're doing 2D
arrays, you actually traverse the columns,

172
00:08:46.958 --> 00:08:51.307
then the rows, it's backwards,
unless if you tilt it 90 degrees.

173
00:08:51.307 --> 00:08:52.803
So just a fun little fact,

174
00:08:52.803 --> 00:08:56.826
just makes it easier cuz then you can
print it in order as well, right?

175
00:08:56.826 --> 00:08:59.011
So that is a base case, correct?

176
00:08:59.011 --> 00:09:01.886
Well, we also need to do this for
the y case, correct?

177
00:09:01.886 --> 00:09:04.594
We need to be able to also
check our y condition.

178
00:09:04.594 --> 00:09:07.218
So I'm gonna go to the end,
and let's do another or, and

179
00:09:07.218 --> 00:09:08.982
let's do the exact same thing again.

180
00:09:08.982 --> 00:09:13.099
Let's go if curr.y &lt; 0, or

181
00:09:13.099 --> 00:09:18.384
curr.y &gt; = maze.length, right?

182
00:09:18.384 --> 00:09:22.300
That's how many rows we have,
there we go, awesome.

183
00:09:22.300 --> 00:09:24.466
There we go, so
we have our first condition.

184
00:09:24.466 --> 00:09:27.496
If we run into this condition,
we return false.

185
00:09:27.496 --> 00:09:30.212
This is not a place we should be looking.

186
00:09:30.212 --> 00:09:33.969
Great, oopsies, what's our second one?

187
00:09:33.969 --> 00:09:35.978
Our second one, let's find out.

188
00:09:35.978 --> 00:09:37.708
It's, are we on a wall?

189
00:09:37.708 --> 00:09:39.621
Okay, that's pretty straightforward.

190
00:09:39.621 --> 00:09:43.567
On a wall, I normally don't comment
to code as simple as this, but

191
00:09:43.567 --> 00:09:47.513
for the case of us walking through
from pseudocode to actual code,

192
00:09:47.513 --> 00:09:49.782
I'm trying to make it more concrete.

193
00:09:49.782 --> 00:09:56.237
All right, so if current, let's go like
this, let's go if (maze[curr.y][curr.x].

194
00:09:56.237 --> 00:10:01.787
I know, don't you love, it's just
beautiful that way, is equal to the wall.

195
00:10:01.787 --> 00:10:03.735
Well, we've just got done.

196
00:10:03.735 --> 00:10:05.515
We're on a wall, we cannot be here, right?

197
00:10:05.515 --> 00:10:09.921
We've recursed into a spot we're
not supposed to be, return false.

198
00:10:09.921 --> 00:10:13.985
Our third condition,
which is, are we at the end?

199
00:10:13.985 --> 00:10:16.012
Okay, well, this should be pretty easy.

200
00:10:16.012 --> 00:10:23.079
If(curr.x === end.x,
curr.y === end.y, well, guess what?

201
00:10:23.079 --> 00:10:23.592
We're there.

202
00:10:23.592 --> 00:10:26.405
end.y actually sounds like a word,
I don't know why that is,

203
00:10:26.405 --> 00:10:29.822
it almost sounds like endonym, just
kinda got in my head there for a second.

204
00:10:29.822 --> 00:10:34.295
Anyway, so if we do get to this point,
we have successfully found the end,

205
00:10:34.295 --> 00:10:37.704
great success, and
now we're done recursing, right?

206
00:10:37.704 --> 00:10:39.617
Yay, our base case, we're done.

207
00:10:39.617 --> 00:10:40.901
This is awesome.

208
00:10:40.901 --> 00:10:44.845
All right, but we do have one
more condition, which is seen.

209
00:10:44.845 --> 00:10:47.558
How the heck do we do a seen, right?

210
00:10:47.558 --> 00:10:52.303
Well, we could mutate our points
to have a true and false on them.

211
00:10:52.303 --> 00:10:58.744
But then, now we have this weird type
that's both a point and a Boolean, right?

212
00:10:58.744 --> 00:11:01.294
It's kinda weird, maybe too much
information on that single type.

213
00:11:01.294 --> 00:11:04.779
So what we can do, and one of
the beautiful parts about recursion,

214
00:11:04.779 --> 00:11:07.407
is that we can have
a beautiful Boolean 2D array.

215
00:11:07.407 --> 00:11:09.751
Here's every position that is possible.

216
00:11:09.751 --> 00:11:13.283
False if we haven't seen it,
true if we have seen it.

217
00:11:13.283 --> 00:11:14.347
All right, awesome.

218
00:11:14.347 --> 00:11:15.524
Look at that, just made life easier.

219
00:11:15.524 --> 00:11:22.032
So if (seen[curr y][curr x]),
then guess what?

220
00:11:22.032 --> 00:11:23.492
Return false, we don't wanna be here.

221
00:11:23.492 --> 00:11:27.019
We don't wanna keep recursing
on places we've already been.

222
00:11:27.019 --> 00:11:29.650
That means you'd get into
an infinite loop effectively,

223
00:11:29.650 --> 00:11:31.322
you'd blow your stack eventually.

224
00:11:31.322 --> 00:11:36.399
So you don't wanna do that, cuz,
If you could imagine a situation

225
00:11:36.399 --> 00:11:42.193
where you get down a corridor or
something like this,

226
00:11:42.193 --> 00:11:45.819
and we went in CSS order, right?

227
00:11:45.819 --> 00:11:50.762
You would get here, you go, can't go here,
can't go here, can't go here, go back.

228
00:11:50.762 --> 00:11:53.782
I can traverse here,
can't go here, go this way.

229
00:11:53.782 --> 00:11:56.377
Traverse here, here, here, go back.

230
00:11:56.377 --> 00:12:00.040
Here, and you just, [SOUND] and
eventually you'd run out of memory and

231
00:12:00.040 --> 00:12:01.543
everything would explode.

232
00:12:01.543 --> 00:12:04.738
Cuz remember, we store return address,
return value and arguments,

233
00:12:04.738 --> 00:12:08.051
therefore you would run out of memory
just calling it over and over again.

234
00:12:08.051 --> 00:12:12.318
That's what a stack overflow is
effectively, in the easiest way.

235
00:12:12.318 --> 00:12:14.926
It's not the website in which you
ask a question, someone berates you,

236
00:12:14.926 --> 00:12:16.529
it's actually what happens on a computer.

237
00:12:16.529 --> 00:12:18.986
It's named after something,
on a computer it's different.

238
00:12:18.986 --> 00:12:21.507
All right, so there we go,
we've done our base case.

239
00:12:21.507 --> 00:12:25.323
So now that we've done our base case,
we can actually do the recursive step.

240
00:12:25.323 --> 00:12:26.844
But this was pretty easy, right?

241
00:12:26.844 --> 00:12:29.622
We can all agree the base
case makes sense.

