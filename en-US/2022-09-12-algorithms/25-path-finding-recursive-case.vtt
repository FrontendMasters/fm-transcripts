WEBVTT

1
00:00:00.474 --> 00:00:02.097
All right, so,
let's start the recursive case.

2
00:00:02.097 --> 00:00:06.237
Now remember, the recursive case is
completely separated from the base case,

3
00:00:06.237 --> 00:00:10.338
you don't even need to think about what
happens in the base case at this point.

4
00:00:10.338 --> 00:00:11.243
Now remember,

5
00:00:11.243 --> 00:00:15.912
I also said there's three steps to
recursion inside the recurse case, right?

6
00:00:15.912 --> 00:00:20.716
There is the pre, there is the recurse,

7
00:00:20.716 --> 00:00:24.399
and there is the post, right?

8
00:00:24.399 --> 00:00:29.348
So, the reason why pre and post become
super important is because we're pathing.

9
00:00:29.348 --> 00:00:32.722
We need to go a direction and
keep track of our path.

10
00:00:32.722 --> 00:00:36.792
And that also means our post is
really important, cuz remember,

11
00:00:36.792 --> 00:00:41.901
when you're recursing, you don't know
what happens below your point, right?

12
00:00:41.901 --> 00:00:46.015
So let's just say we start,
I'm just going to draw this more simple,

13
00:00:46.015 --> 00:00:48.328
let's just say we get to here, right?

14
00:00:48.328 --> 00:00:51.440
We're three steps in,
well, we started here and

15
00:00:51.440 --> 00:00:54.193
we started recursing in CSS order, right?

16
00:00:54.193 --> 00:00:56.792
That means we went to here.

17
00:00:56.792 --> 00:01:01.223
So before we went, we actually pushed
into the array, hey, we're at start,

18
00:01:01.223 --> 00:01:02.848
then we started recursing.

19
00:01:02.848 --> 00:01:06.134
So we first try going up,
then at up, we can recurse.

20
00:01:06.134 --> 00:01:09.292
So we can say, okay,
I'm just gonna call this,

21
00:01:09.292 --> 00:01:13.082
we'll just call that X naught,
so then we get to X naught.

22
00:01:13.082 --> 00:01:14.908
And we say, hey, let's do CSS ordering.

23
00:01:14.908 --> 00:01:18.628
We go up, we hit a wall, we can't go
there, we go here, and we go, okay,

24
00:01:18.628 --> 00:01:21.946
we can go here, we'll call this x1,
and then we can push in x1.

25
00:01:21.946 --> 00:01:25.141
And you can see that we build
this case in recursion.

26
00:01:25.141 --> 00:01:29.106
And as we unwind our stack,
we'll actually pop things back off,

27
00:01:29.106 --> 00:01:32.940
that's why a pre and a post are so
important during recursion.

28
00:01:32.940 --> 00:01:34.270
We do have a question.

29
00:01:34.270 --> 00:01:36.003
&gt;&gt; What is CSS ordering?

30
00:01:36.003 --> 00:01:39.707
&gt;&gt; [LAUGH] CSS ordering, it's a joke.

31
00:01:39.707 --> 00:01:45.062
[LAUGH] When you specify margin in CSS,
margin is top,

32
00:01:45.062 --> 00:01:52.325
right, bottom, left, it's a joke,
[LAUGH] maybe it's not that good.

33
00:01:52.325 --> 00:01:55.143
This reminded me of what my wife
always tells me that I'm not funny.

34
00:01:55.143 --> 00:01:58.157
This hurts a little bit, but yeah,
that's how I remember things, so

35
00:01:58.157 --> 00:01:59.240
I just pick an ordering.

36
00:01:59.240 --> 00:02:02.956
And so often, I'll just pick CSS ordering
as whenever I'm drawing something to do

37
00:02:02.956 --> 00:02:04.455
it in the order in which, right?

38
00:02:04.455 --> 00:02:05.364
Isn't that CSS?

39
00:02:05.364 --> 00:02:06.108
Doesn't CSS start at top?

40
00:02:06.108 --> 00:02:08.079
Top, right, bottom, left.

41
00:02:08.079 --> 00:02:09.231
&gt;&gt; Yeah, it does.

42
00:02:09.231 --> 00:02:10.043
&gt;&gt; Okay.

43
00:02:10.043 --> 00:02:11.708
&gt;&gt; Chad says, it was a good joke, so.

44
00:02:11.708 --> 00:02:15.221
&gt;&gt; Thanks, see, that's why you
guys get me, we get each other.

45
00:02:15.221 --> 00:02:16.889
All right, so there we go.

46
00:02:16.889 --> 00:02:19.911
So we're gonna take
advantage of these things,

47
00:02:19.911 --> 00:02:22.498
and we're gonna build the path, right?

48
00:02:22.498 --> 00:02:26.829
And one thing I didn't explain in here
is when we tried to check the wall,

49
00:02:26.829 --> 00:02:31.519
notice that we did our base case and left
but we did not pop X0 off the array yet.

50
00:02:31.519 --> 00:02:36.056
Cuz we have to check all of our recursion
steps, and then we can pop it off.

51
00:02:36.056 --> 00:02:41.201
So if we meet a dead end, we'll get to
the dead end, check all of our directions,

52
00:02:41.201 --> 00:02:45.078
realize we can't go,
then pop that last tile off our stack.

53
00:02:45.078 --> 00:02:49.283
Then check all of our directions, we've
finished checking our directions, then pop

54
00:02:49.283 --> 00:02:53.209
it off, then pop it off, then pop it off,
so we're building our path as we walk.

55
00:02:53.209 --> 00:02:56.029
All right, so
let's start with the precondition.

56
00:02:56.029 --> 00:02:59.594
Precondition, we don't have a path, do we?

57
00:02:59.594 --> 00:03:03.263
So again, let's just keep on adding,
what's wrong with that?

58
00:03:03.263 --> 00:03:06.426
So we're gonna have a path,
and let's have a point array.

59
00:03:06.426 --> 00:03:08.905
So every time we
successfully visit a spot,

60
00:03:08.905 --> 00:03:12.994
we will add that in the precondition and
remove it in the post condition.

61
00:03:12.994 --> 00:03:13.895
That makes sense?

62
00:03:13.895 --> 00:03:17.961
Because we don't know how much further
we're gonna recurse if we're gonna meet

63
00:03:17.961 --> 00:03:21.512
a dead end, what's gonna happen,
just something's gonna happen.

64
00:03:21.512 --> 00:03:25.193
But at this point,
we add, we're recursing,

65
00:03:25.193 --> 00:03:30.359
if we come back out, we pop, so
we kinda maintain this nice state.

66
00:03:30.359 --> 00:03:33.601
So one beautiful part about recursion and

67
00:03:33.601 --> 00:03:37.403
a stack is that it kinda maintain shape,
right?

68
00:03:37.403 --> 00:03:39.966
In sort of weird sense,
it can maintain shape.

69
00:03:39.966 --> 00:03:43.337
So we can go like this,
path.push(curr), right?

70
00:03:43.337 --> 00:03:49.134
Awesome, and then for our ending our post,

71
00:03:49.134 --> 00:03:52.432
we can just pop, right?

72
00:03:52.432 --> 00:03:57.604
So there we go, we push into our position,
we recurse, we pop, awesome.

73
00:03:57.604 --> 00:04:01.135
We're pretty much done,
we've just built the path,

74
00:04:01.135 --> 00:04:03.296
now all we need to do was recurse.

75
00:04:03.296 --> 00:04:06.269
And so I'm gonna give you
guys a sweet leetcode tip,

76
00:04:06.269 --> 00:04:09.183
it's something that I've
learned from a friend.

77
00:04:09.183 --> 00:04:11.154
I only know by his Internet Monica,
actually,

78
00:04:11.154 --> 00:04:14.322
technically known by his non
Internet Monica, but it'll be Scooby-Doo.

79
00:04:14.322 --> 00:04:18.125
You can go like this, dir =, and
then you can put in four directions.

80
00:04:18.125 --> 00:04:22.784
And so I could go say, -1, 0, 1,

81
00:04:22.784 --> 00:04:26.865
whoopsies, and take those, and

82
00:04:26.865 --> 00:04:31.257
we can go that, that, where is it?

83
00:04:31.257 --> 00:04:34.556
Where are you?

84
00:04:34.556 --> 00:04:36.268
And 0, there we go.

85
00:04:36.268 --> 00:04:39.865
Those are our four directions
we want to go, right?

86
00:04:39.865 --> 00:04:42.881
We want to go, this is left,
right, down, up.

87
00:04:42.881 --> 00:04:47.016
I just selected the random ordering,
that's what we got.

88
00:04:47.016 --> 00:04:50.351
So those are the differential directions,
right?

89
00:04:50.351 --> 00:04:53.838
They're what we have to
change to get to go that way.

90
00:04:53.838 --> 00:04:59.145
All right, so we can use that, and
then we can go down to our recursive step.

91
00:04:59.145 --> 00:05:03.671
I'm gonna have to use a for loop,
cuz we can't use sweet sweet for

92
00:05:03.671 --> 00:05:05.825
each is plus the create stuff.

93
00:05:05.825 --> 00:05:10.176
All right, it bothers me,
i is to be less than dir.length, ++ i.

94
00:05:10.176 --> 00:05:15.493
And now, all we need to do is recurse
our four directions we want to go.

95
00:05:15.493 --> 00:05:19.923
So, let's call ourself again walk,
with the maze, with the wall.

96
00:05:19.923 --> 00:05:23.055
And then right here,
we need to have our new current.

97
00:05:23.055 --> 00:05:25.248
What is our new current?

98
00:05:25.248 --> 00:05:31.250
Well, our new current needs to look
like this, [x, y] = dir[i], right?

99
00:05:31.250 --> 00:05:36.349
So that's gonna be our new current, and so

100
00:05:36.349 --> 00:05:41.881
let's go curr.x + x, curr.y + y, right?

101
00:05:41.881 --> 00:05:45.040
We just did our differential,
we're gonna go left, we're gonna go right,

102
00:05:45.040 --> 00:05:46.799
we're gonna go up, we're gonna go down.

103
00:05:46.799 --> 00:05:49.051
It's a pretty simple,
pretty nice little thing.

104
00:05:49.051 --> 00:05:49.719
A lot of times,

105
00:05:49.719 --> 00:05:53.172
you'll see people like hand put in all
the different calculations, all that.

106
00:05:53.172 --> 00:05:57.023
It can get pretty cumbersome, for me,
this makes it a lot easier to understand,

107
00:05:57.023 --> 00:06:00.666
and I only have to specify it once right
up here, which makes it pretty easy.

108
00:06:00.666 --> 00:06:03.812
Then you don't get all these pluses and
minus ones all over the place, and

109
00:06:03.812 --> 00:06:05.496
then you're like, which one did I do?

110
00:06:05.496 --> 00:06:06.781
Makes it a lot easier.

111
00:06:06.781 --> 00:06:08.406
All right, what do we have left?

112
00:06:08.406 --> 00:06:13.422
We have our end point,
we have our seen, and we have our path.

113
00:06:13.422 --> 00:06:18.688
Awesome, now remember I did return
a true if we found the end.

114
00:06:18.688 --> 00:06:22.617
So if we do get a true and
we found the end,

115
00:06:22.617 --> 00:06:27.019
we need to do something here as well,
right?

116
00:06:27.019 --> 00:06:30.361
We can't just keep recursing
once we found the end.

117
00:06:30.361 --> 00:06:34.034
So if walk is successful,
we need to return true, right?

118
00:06:34.034 --> 00:06:39.049
This is kind of a weird base case shift,
where you can't really do it,

119
00:06:39.049 --> 00:06:44.325
you have to stop your recursing,
we have to stop it at this point, right?

120
00:06:44.325 --> 00:06:47.043
There we go, we've done it,
it's great, right?

121
00:06:47.043 --> 00:06:48.893
Does this kind of makes sense?

122
00:06:48.893 --> 00:06:50.629
Do you see how we're doing each check?

123
00:06:50.629 --> 00:06:53.857
We're checking in all four
cardinal directions, and

124
00:06:53.857 --> 00:06:57.093
then we have a nice,
simple base case, is right here.

125
00:06:57.093 --> 00:06:59.895
The only thing,
there's one bug in there right now.

126
00:06:59.895 --> 00:07:03.063
Does anyone notice what the bug is?

127
00:07:03.063 --> 00:07:06.468
You should know, if someone
actually noticed what the bug is,

128
00:07:06.468 --> 00:07:09.370
I would be floored,
it's part of the precondition.

129
00:07:09.370 --> 00:07:13.078
So notice that we push in
things we have seen right here.

130
00:07:13.078 --> 00:07:17.208
If we get a true when it's returned,
it returns early, we get a true,

131
00:07:17.208 --> 00:07:20.848
which means the moment we get a true,
we also stop recursing.

132
00:07:20.848 --> 00:07:24.135
All recurses stop recursing,
it goes right back out.

133
00:07:24.135 --> 00:07:28.447
Cuz it says, hey, at this point,
our path array is completed, we're done.

134
00:07:28.447 --> 00:07:29.600
But what's the problem?

135
00:07:29.600 --> 00:07:33.254
Our ending tile does not get pushed in,
so path.push.

136
00:07:33.254 --> 00:07:37.103
And got to push in the very last
one cuz it doesn't get added.

137
00:07:37.103 --> 00:07:40.041
So there we go,
we should have a completed case.

138
00:07:40.041 --> 00:07:44.740
Long as I've done everything correctly,
we should be able to go here and

139
00:07:44.740 --> 00:07:46.443
actually do it and see it.

140
00:07:46.443 --> 00:07:50.412
And we didn't get it because,
of course, we forgot just a very, very,

141
00:07:50.412 --> 00:07:54.010
very simple thing, which is I
didn't do this down here, right?

142
00:07:54.010 --> 00:07:57.122
We didn't actually fill
in the function itself,

143
00:07:57.122 --> 00:08:02.394
I would still consider this a first try, I
feel like this is a first try still, okay?

144
00:08:02.394 --> 00:08:08.505
I consider that a compiler, so const
seen needs to be a boolean to the array.

145
00:08:08.505 --> 00:08:14.494
And then we also need our path,
which is gonna be our Point array, right?

146
00:08:14.494 --> 00:08:19.814
We also need to kinda fill
in our boolean array.

147
00:08:19.814 --> 00:08:23.925
So let's go for let i = 0; i has
to be less than maze.length,

148
00:08:23.925 --> 00:08:29.216
seen.push(new Array(maze[0] length,
no, fill(false), right?

149
00:08:29.216 --> 00:08:30.034
There we go.

150
00:08:30.034 --> 00:08:34.253
So we've now created our
potential pathing array, and

151
00:08:34.253 --> 00:08:39.829
then we also have our seen matrix,
and they're all falses to begin with.

152
00:08:39.829 --> 00:08:41.857
We just wanna make sure they're false.

153
00:08:41.857 --> 00:08:45.101
Technically, this is JavaScript,
we didn't have to do this, right?

154
00:08:45.101 --> 00:08:48.110
If you would have access
something outside of your bounds,

155
00:08:48.110 --> 00:08:49.686
it would have been undefined.

156
00:08:49.686 --> 00:08:51.857
And therefore, it's technically false, and

157
00:08:51.857 --> 00:08:54.253
we could have just turned
them to true as we saw them.

158
00:08:54.253 --> 00:08:56.454
And that would have worked.

159
00:08:56.454 --> 00:08:57.455
So then we walk.

160
00:08:57.455 --> 00:09:02.394
And walk takes in maze, wall, start is
our current position we wanna start at,

161
00:09:02.394 --> 00:09:03.881
we wanna get to the end.

162
00:09:03.881 --> 00:09:09.540
And then if I'm not mistaken,
let's see, if I'm not mistaken,

163
00:09:09.540 --> 00:09:14.290
pressing all the wrong buttons,
we've to have seen and

164
00:09:14.290 --> 00:09:18.046
path, and
then we can just return out path.

165
00:09:18.046 --> 00:09:20.757
So if we've successfully done this,
we'll return out a completed path,

166
00:09:20.757 --> 00:09:22.142
if it gets to the end, then we won't.

167
00:09:22.142 --> 00:09:25.770
But I do have one more bug I just thought
of in my head that I forgot to do.

168
00:09:25.770 --> 00:09:28.907
As part of the pre, we also need to go,
seen[curr.y], I mean,

169
00:09:28.907 --> 00:09:31.939
this would have just exploded our stack,
[curr.x] = true.

170
00:09:31.939 --> 00:09:33.232
I forgot that one point.

171
00:09:33.232 --> 00:09:33.799
There we go.

172
00:09:33.799 --> 00:09:36.503
Luckily, we caught that
before we've tried it.

173
00:09:36.503 --> 00:09:38.922
Or else,
if we didn't catch it before we tried,

174
00:09:38.922 --> 00:09:43.181
we wouldn't have been able to get a first
try, which would have been very, very sad.

175
00:09:43.181 --> 00:09:45.944
All right, so we rerun this one more time.

176
00:09:45.944 --> 00:09:51.568
And now, we have another one right here on
line eight, classic, Oopsy Daisy's saying,

177
00:09:51.568 --> 00:09:55.722
there's a boolean, and apparently,
we forgot a case to return.

178
00:09:55.722 --> 00:09:56.632
Did I forget?

179
00:10:00.010 --> 00:10:02.221
Yes, if we recurse and
we reached the end, and

180
00:10:02.221 --> 00:10:05.568
we did not find end in our current
position, then yeah, it's false,

181
00:10:05.568 --> 00:10:09.673
I'd still consider that a compiler,
I feel like we got a compiler there.

182
00:10:09.673 --> 00:10:11.804
First try, of course, absolutely.

183
00:10:11.804 --> 00:10:12.783
So there we go.

184
00:10:12.783 --> 00:10:14.123
We got it, fantastic.

185
00:10:14.123 --> 00:10:19.051
For those that are wondering what we
just solved, if we go to maze_solver

186
00:10:19.051 --> 00:10:23.114
in the test, here's the maze
that we just got done solving.

187
00:10:23.114 --> 00:10:25.953
And this top point right
here is our start.

188
00:10:25.953 --> 00:10:31.365
I believe this is our end, and we build
that exact path all the way through.

189
00:10:31.365 --> 00:10:33.192
So pretty fantastic, right?

190
00:10:33.192 --> 00:10:36.876
We were able to do that, and
then this is kind of the out we expect.

191
00:10:36.876 --> 00:10:38.782
So we were able to solve that.

192
00:10:38.782 --> 00:10:41.938
Hopefully, this makes
recursion either more clear or

193
00:10:41.938 --> 00:10:43.935
you feel more confused than ever.

194
00:10:43.935 --> 00:10:47.240
But I'm hoping that it makes it
more clear in the sense that

195
00:10:47.240 --> 00:10:49.269
always think about your base case.

196
00:10:49.269 --> 00:10:53.320
Honestly, is gonna save you so
much headache if you can do a clear and

197
00:10:53.320 --> 00:10:56.177
defined reason why you
should stop recursing.

198
00:10:56.177 --> 00:11:00.429
Often, what I'll see is in the recursive
step, people will try to test for it,

199
00:11:00.429 --> 00:11:02.915
like is the thing I'm about to go to null.

200
00:11:02.915 --> 00:11:06.503
No, don't do it there, but at the base
case, it makes it a lot easier.

201
00:11:06.503 --> 00:11:07.987
Is the thing off the grid?

202
00:11:07.987 --> 00:11:10.905
No, don't do it there,
put it in the base case.

203
00:11:10.905 --> 00:11:13.246
Move everything you can
into the base case,

204
00:11:13.246 --> 00:11:17.177
your complexity will go massively down,
and it's a lot easier to solve.

205
00:11:17.177 --> 00:11:18.783
So hopefully that all makes sense.

206
00:11:18.783 --> 00:11:21.660
A common question you get is,
when do I use recursion, right?

207
00:11:21.660 --> 00:11:24.008
Cuz a lot of these things seem
like we can do a for loop.

208
00:11:24.008 --> 00:11:27.273
Obviously, the last thing we just got
done doing is clear, you can't do a for

209
00:11:27.273 --> 00:11:27.786
loop with.

210
00:11:27.786 --> 00:11:31.517
Well, I mean, you can if you use the stack
and you kept track of your own state and

211
00:11:31.517 --> 00:11:34.444
all that, but you wouldn't do that,
that'd be crazy talk.

212
00:11:34.444 --> 00:11:39.568
So that's my general rule of thumb,
is when I can't concretely use a for loop,

213
00:11:39.568 --> 00:11:44.630
meaning there is no defined end,
especially if there's a branching factor.

214
00:11:44.630 --> 00:11:50.183
You can imagine that the maze that we were
just doing had a branching factor, right?

215
00:11:50.183 --> 00:11:54.759
You could do four possible directions at
any one point on the grid, therefore,

216
00:11:54.759 --> 00:11:56.546
the branching factor is four.

217
00:11:56.546 --> 00:11:58.347
So how do you do a for loop for that?

218
00:11:58.347 --> 00:12:01.056
You can't just write a for
loop simply for that.

219
00:12:01.056 --> 00:12:05.143
And so that's my general rule of thumb,
is how do I avoid using recursion?

220
00:12:05.143 --> 00:12:08.538
If there is a terminus, something I can
see, it's a simple for loop can do it,

221
00:12:08.538 --> 00:12:10.403
always use a for loop, else, recursion.

222
00:12:10.403 --> 00:12:14.404
If you write your recursion correctly,
it becomes aggressively simple, you write

223
00:12:14.404 --> 00:12:18.480
it with base cases within your recurse
step, it becomes aggressively complicated.

