WEBVTT

1
00:00:00.270 --> 00:00:02.431
So I think we have one last thing to do,

2
00:00:02.431 --> 00:00:05.280
which is we're just gonna
write a binary search.

3
00:00:05.280 --> 00:00:07.170
We're not actually gonna write
the insertion or the deletion.

4
00:00:07.170 --> 00:00:08.760
This should only take like a minute or
two.

5
00:00:08.760 --> 00:00:10.860
Very simple operation to do,
so let's do that.

6
00:00:10.860 --> 00:00:18.300
So let's go back over to our sweet
coder machine and go to binary search.

7
00:00:18.300 --> 00:00:20.110
What do I call it?

8
00:00:21.560 --> 00:00:24.242
No, I think binary search
list is not the one we want.

9
00:00:27.829 --> 00:00:29.673
Yeah, I bet it's BST.

10
00:00:29.673 --> 00:00:32.367
Yes, DFS on a BST, there we go.

11
00:00:32.367 --> 00:00:37.221
[LAUGH] All right so of course we're gonna
start at the head, we're gonna go with

12
00:00:37.221 --> 00:00:41.076
the needle and we're going to
return true if we found it if not.

13
00:00:41.076 --> 00:00:43.991
So the good part about this is that
we don't even have to write a second

14
00:00:43.991 --> 00:00:44.760
function right?

15
00:00:44.760 --> 00:00:47.829
We should be able to just tell
right away actually we are gonna

16
00:00:47.829 --> 00:00:49.526
have to write a second function.

17
00:00:49.526 --> 00:00:54.370
Let's call this thing search and
do a current and call it a BinaryNode,

18
00:00:54.370 --> 00:00:57.533
which I think I hard coded
the generic in here.

19
00:00:57.533 --> 00:00:59.520
It just makes it easier to see in class.

20
00:00:59.520 --> 00:01:04.352
We don't need to be generic over t,
as BinaryNode or null, and

21
00:01:04.352 --> 00:01:08.680
then the needle number and
then Boolean if we find it.

22
00:01:08.680 --> 00:01:12.400
So again, base cases,
base case is super important.

23
00:01:12.400 --> 00:01:14.370
What is the most obvious base case?

24
00:01:16.574 --> 00:01:17.327
&gt;&gt; Null.

25
00:01:17.327 --> 00:01:17.926
&gt;&gt; Yes.

26
00:01:17.926 --> 00:01:19.310
Null, someone said null.

27
00:01:19.310 --> 00:01:21.302
There we go Graham technically said null.

28
00:01:21.302 --> 00:01:23.780
If not current, return false, right?

29
00:01:23.780 --> 00:01:27.328
We have made it to the bottom
of our binary tree.

30
00:01:27.328 --> 00:01:29.850
It's null,
therefore our value is not there.

31
00:01:29.850 --> 00:01:32.903
We've exceeded the height cuz remember,
we're either saying hey we're less than

32
00:01:32.903 --> 00:01:34.623
this value so
we must be in the smaller section or

33
00:01:34.623 --> 00:01:37.100
we're greater than we must be
in the greater than section.

34
00:01:37.100 --> 00:01:40.540
Therefore, we will find it or
we will hit the null note eventually.

35
00:01:41.815 --> 00:01:43.205
All right, so we're here.

36
00:01:43.205 --> 00:01:44.431
So what's the other base case?

37
00:01:48.584 --> 00:01:50.199
Equivalence, right?

38
00:01:50.199 --> 00:01:54.671
If current dot value is equal to
the needle we are searching for

39
00:01:54.671 --> 00:01:58.005
we have found the value correct.

40
00:01:58.005 --> 00:01:58.665
Awesome.

41
00:01:58.665 --> 00:01:59.975
So therefore we can return true.

42
00:01:59.975 --> 00:02:02.170
There's no need to keep on traversing.

43
00:02:02.170 --> 00:02:06.074
That'd be like you know the phrase it's
in the last place I looked if you kept

44
00:02:06.074 --> 00:02:10.039
looking after you found your item it
would be silly exact same thing here it's

45
00:02:10.039 --> 00:02:11.884
always in the last place he looked.

46
00:02:11.884 --> 00:02:17.620
So therefore we have to do a traversing so
if we didn't find it.

47
00:02:17.620 --> 00:02:21.820
If we're neither null nor
we contain a value we need to traverse.

48
00:02:21.820 --> 00:02:25.505
So we like this if,
current.value is a less than or

49
00:02:25.505 --> 00:02:28.410
current value we're looking for.

50
00:02:28.410 --> 00:02:32.987
We need to go to the right
hand side of the tree right?

51
00:02:32.987 --> 00:02:35.880
You have to remember it's
always backwards to this thing.

52
00:02:35.880 --> 00:02:38.526
So that's why if you
write it out correctly,

53
00:02:38.526 --> 00:02:40.834
you can use this whole I always do this.

54
00:02:40.834 --> 00:02:44.509
You can use that exact same thing
long as you do the value and

55
00:02:44.509 --> 00:02:47.438
then this match up the symbol
I go to the right.

56
00:02:47.438 --> 00:02:51.599
Just a little kind of like
a little mental ease, right?

57
00:02:51.599 --> 00:02:55.959
All right, so then we're gonna
return search with current.right and

58
00:02:55.959 --> 00:02:57.870
of course needle, right?

59
00:02:57.870 --> 00:03:00.640
We're gonna return the results of that
side cuz either we're gonna make it to

60
00:03:00.640 --> 00:03:02.230
a null point or
we're gonna find the value.

61
00:03:03.240 --> 00:03:05.498
Else, we simply do
the exact same thing and

62
00:03:05.498 --> 00:03:08.713
we're just gonna have to search
on the left hand side right?

63
00:03:08.713 --> 00:03:11.170
That's really our only two possibilities.

64
00:03:11.170 --> 00:03:14.887
Notice that we're not doing both sides,
we're only doing one side or

65
00:03:14.887 --> 00:03:18.289
the other that is the beauty of
a binary search is we're reducing

66
00:03:18.289 --> 00:03:22.195
our search space by half every single
step and we're only checking once,

67
00:03:22.195 --> 00:03:24.659
we're not checking in we're checking once.

68
00:03:24.659 --> 00:03:29.937
So greatly reduces our time effectively,
log in on a perfectly balanced tree or

69
00:03:29.937 --> 00:03:37.370
really running time of height Yeah,
it was pretty easy.

70
00:03:37.370 --> 00:03:39.859
Yeah.
Then we have to do the actual, hey,

71
00:03:39.859 --> 00:03:42.855
call the thing so
return search head, needle.

72
00:03:42.855 --> 00:03:43.985
Yeah, there we go.

73
00:03:43.985 --> 00:03:49.856
And if I am a liar,
this thing won't run mpx jest BST.

74
00:03:53.100 --> 00:03:54.990
Okay, see, it's really not that hard.

75
00:03:54.990 --> 00:03:59.630
It really isn't that hard, binary searches
aren't actually all that hard on trees.

76
00:03:59.630 --> 00:04:03.590
That was much harder on an array, correct?

77
00:04:03.590 --> 00:04:06.017
Here let's see if we can open this up.

78
00:04:06.017 --> 00:04:07.862
I think I did that on day one.

79
00:04:07.862 --> 00:04:09.710
Let's see, what do we call this thing?

80
00:04:09.710 --> 00:04:13.110
We called it a binary search.

81
00:04:13.110 --> 00:04:16.749
Yeah notice like this was the algorithm
there that is much harder right?

82
00:04:16.749 --> 00:04:20.958
We are controlling our midpoint, we're
effectively finding the node in the tree

83
00:04:20.958 --> 00:04:24.872
controlling the midpoint but the good
news is this is always log in, right?

84
00:04:24.872 --> 00:04:29.395
This is 100% of the time login cuz
we're always guaranteed a perfect split

85
00:04:29.395 --> 00:04:30.500
each time.

86
00:04:30.500 --> 00:04:35.698
Whereas on our previous one,
my goodness, I should have marked it.

87
00:04:35.698 --> 00:04:38.050
Let's see, BST, there it is.

88
00:04:38.050 --> 00:04:41.541
We have no guarantee that one side
is gonna be perfectly equal versus

89
00:04:41.541 --> 00:04:42.407
the other side.

90
00:04:42.407 --> 00:04:44.150
So we just simply have to walk it.

91
00:04:44.150 --> 00:04:46.750
Our lows and
highs are predetermined for us.

92
00:04:46.750 --> 00:04:47.402
And that's that.

