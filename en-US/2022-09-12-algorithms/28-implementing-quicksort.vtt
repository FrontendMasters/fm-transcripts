WEBVTT

1
00:00:00.036 --> 00:00:03.434
And I think that's all we have to do with
it except other than the fact that I'm

2
00:00:03.434 --> 00:00:05.180
gonna tell you this really cool story.

3
00:00:05.180 --> 00:00:11.177
All right, so this real cool story is that
I was on a team that was the first team

4
00:00:11.177 --> 00:00:17.658
to be a non-MIT student team to make it to
MIT's final finalist in MIT Battlecode.

5
00:00:17.658 --> 00:00:21.331
So Battlecode is where you program
these little computer robots.

6
00:00:21.331 --> 00:00:22.994
They're like simulation robots.

7
00:00:22.994 --> 00:00:26.097
And they have to battle it out and
you have to do all this different type of

8
00:00:26.097 --> 00:00:29.483
fighting, there's macro kind of,
it's like imagine StarCraft, right?

9
00:00:29.483 --> 00:00:31.728
It's like Starcraft but for
people that aren't smart.

10
00:00:31.728 --> 00:00:35.728
And so it's like really really simple and
there's very few conditions,

11
00:00:35.728 --> 00:00:38.967
there's no races,
it's just like people in a base often.

12
00:00:38.967 --> 00:00:40.780
There's every single year
it's a little bit different.

13
00:00:40.780 --> 00:00:42.875
Sometimes there are races,
sometimes there aren't, blah blah blah.

14
00:00:42.875 --> 00:00:44.040
It's pretty cool.

15
00:00:44.040 --> 00:00:45.960
And when we were doing this,

16
00:00:45.960 --> 00:00:51.080
I had this thing where if a certain
resource was between us and our opponent,

17
00:00:51.080 --> 00:00:55.413
then I'd want to capture that and
turn it into a turret, right?

18
00:00:55.413 --> 00:00:58.704
So if they tried to come near us,
we'd be able to shoot them really easily,

19
00:00:58.704 --> 00:00:59.660
super, super easy.

20
00:00:59.660 --> 00:01:02.856
They couldn't get us,
it was a way to just dominate them, right?

21
00:01:02.856 --> 00:01:05.594
And so I thought, Okay,
this is what we're gonna do.

22
00:01:05.594 --> 00:01:09.199
I could take all of these different
resources that are on the map.

23
00:01:09.199 --> 00:01:11.290
And I can just simply sort it and

24
00:01:11.290 --> 00:01:15.402
find which ones we need to do
certain different things with.

25
00:01:15.402 --> 00:01:17.106
It should be really, really simple, right?

26
00:01:17.106 --> 00:01:21.269
Well, of course, the constraints with
MIT Battlecode is that you only get 10,000

27
00:01:21.269 --> 00:01:22.391
bytecode operations.

28
00:01:22.391 --> 00:01:24.246
This is in Java, everyone loves Java.

29
00:01:24.246 --> 00:01:28.343
Which means you actually get very few
things you can do any one turn per person,

30
00:01:28.343 --> 00:01:29.910
so I couldn't QuickSort it.

31
00:01:29.910 --> 00:01:33.015
Within like five elements the guy
would come out of the base and

32
00:01:33.015 --> 00:01:36.489
then just sit there for like 20 frames and
just be dead in the water.

33
00:01:36.489 --> 00:01:39.051
And then as the base got more of them,
sometimes they just stopped and

34
00:01:39.051 --> 00:01:41.142
then our whole thing would stop and
then we'd just die.

35
00:01:41.142 --> 00:01:42.366
Like what is going on here?

36
00:01:42.366 --> 00:01:44.165
And it came down to the sorting algorithm.

37
00:01:44.165 --> 00:01:46.867
You couldn't simply sort
because you'd run out of time,

38
00:01:46.867 --> 00:01:49.747
you'd run out of computational
that's available per turn.

39
00:01:49.747 --> 00:01:52.722
And so what I realized is that
if you look at this thing,

40
00:01:52.722 --> 00:01:56.165
what you're gonna see here is
that this is just a tree, right?

41
00:01:56.165 --> 00:02:01.142
This is just a tree filled with states,
and so if you really think about it,

42
00:02:01.142 --> 00:02:03.836
you don't have to do this recursively.

43
00:02:03.836 --> 00:02:07.367
You just simply need to know
where you start, where you end,

44
00:02:07.367 --> 00:02:10.566
process that thing, and
it may produce two children.

45
00:02:10.566 --> 00:02:14.012
If it produces two children,
add it to a stack and

46
00:02:14.012 --> 00:02:17.385
then you can actually get
the exact same thing.

47
00:02:17.385 --> 00:02:21.476
And so that's all I did was every single
turn I'd go hey, how many do I have left?

48
00:02:21.476 --> 00:02:23.784
Which there was a function to say
how much computation you had left.

49
00:02:23.784 --> 00:02:29.306
And if I was like hey, if it's below
1,000, then don't do any more sorting.

50
00:02:29.306 --> 00:02:31.781
Go through your other things so
you can like move around.

51
00:02:31.781 --> 00:02:33.496
You can see if there's bad guys near,

52
00:02:33.496 --> 00:02:36.130
you can do other operations
without running out of space.

53
00:02:36.130 --> 00:02:40.615
And so it became this kind of like,
simple way to avoid running out of space.

54
00:02:40.615 --> 00:02:42.559
So these things do become useful.

55
00:02:42.559 --> 00:02:45.164
Obviously, that is an obvious
case in which it's so

56
00:02:45.164 --> 00:02:47.488
specific you'll probably
never run into it.

57
00:02:47.488 --> 00:02:51.509
But nonetheless it is something to always
that's kind of fun to think about that you

58
00:02:51.509 --> 00:02:55.541
can use these algorithms in really unique
ways that actually become super useful.

59
00:02:55.541 --> 00:02:58.727
And I'm sure that taught me something
that I've used throughout my life.

60
00:02:58.727 --> 00:03:02.387
I want to end on a positive note
somewhere, right, it was great.

61
00:03:02.387 --> 00:03:05.658
All right, we got 13th which means
we lost in the finals right away.

62
00:03:05.658 --> 00:03:08.584
All right, so
we went over the running time,

63
00:03:08.584 --> 00:03:13.053
somewhere of n login all the way
up to n squared, depending, right.

64
00:03:13.053 --> 00:03:16.398
And of course,
next we're going to implement quicksort.

65
00:03:16.398 --> 00:03:18.567
Hey, did you know that I
teach a course on Vim?

66
00:03:18.567 --> 00:03:21.685
This sweet editor that I'm using
that super fast and super cool, and

67
00:03:21.685 --> 00:03:24.706
it goes really, really, really fast and
all these great things.

68
00:03:24.706 --> 00:03:28.783
Yes, so if you're ever curious I do
a developer productivity which allows for

69
00:03:28.783 --> 00:03:32.136
sweet, this and vim usage and
all the great stuff, fantastic.

70
00:03:32.136 --> 00:03:33.760
Okay, anyways, back to it.

71
00:03:33.760 --> 00:03:37.319
You have to sell your own course,
it's just a part of things.

72
00:03:37.319 --> 00:03:39.495
All right, so let's do quick sort.

73
00:03:39.495 --> 00:03:41.944
So this is the test for quick sort.

74
00:03:41.944 --> 00:03:46.156
I have a debugger here, cuz obviously I've
gotten it wrong multiple times in my life.

75
00:03:46.156 --> 00:03:48.284
So this is the array we're going to sort.

76
00:03:48.284 --> 00:03:49.883
And hopefully we can sort this.

77
00:03:49.883 --> 00:03:53.201
So let's just jump to it and
now it's the sorting time.

78
00:03:53.201 --> 00:03:56.105
So we get an array and
we're expected to sort.

79
00:03:56.105 --> 00:04:01.128
So there's two functions that
we really need to think about

80
00:04:01.128 --> 00:04:06.050
if we replay what I talked about
there was this whole like,

81
00:04:06.050 --> 00:04:09.473
running these two things side, right?

82
00:04:09.473 --> 00:04:11.756
But there's also this whole pivoting side.

83
00:04:11.756 --> 00:04:15.697
So often when you see quicksort
it's split into two functions.

84
00:04:15.697 --> 00:04:19.099
There is something referred
to as the partition,

85
00:04:19.099 --> 00:04:21.371
I think that's how you spell it.

86
00:04:21.371 --> 00:04:26.111
Which actually produces the pivot index
and moves the items that are less than or

87
00:04:26.111 --> 00:04:30.297
equal to on one side and the items
that are greater to on the other side.

88
00:04:30.297 --> 00:04:34.912
Then the second thing is your actual
quicksort, which does the quick sorting

89
00:04:34.912 --> 00:04:39.811
which calls partition gets the pivot,
then recalls quicksort does the recursive

90
00:04:39.811 --> 00:04:43.942
step and the base case step and
does all of the kinda the bookkeeping.

91
00:04:43.942 --> 00:04:46.802
So we usually break it up
into two different functions.

92
00:04:46.802 --> 00:04:47.962
So let's start here and

93
00:04:47.962 --> 00:04:51.449
let's just create a function we're
gonna call quick_sort, right?

94
00:04:51.449 --> 00:04:54.133
So I'm just gonna call qs,
quick_sort, make it easy.

95
00:04:54.133 --> 00:04:58.586
Pass in the array, and then we need
to pass in the low and the high.

96
00:04:58.586 --> 00:05:01.464
So the high, remember, what did I
say specifically about the high?

97
00:05:01.464 --> 00:05:04.435
I think I said it right on the screen too.

98
00:05:04.435 --> 00:05:05.217
Did I say it on the screen?

99
00:05:05.217 --> 00:05:06.845
Yes, I did, right there.

100
00:05:06.845 --> 00:05:08.600
It's inclusive.

101
00:05:08.600 --> 00:05:09.995
A very unusual thing you do.

102
00:05:09.995 --> 00:05:11.542
In most algorithms you don't do that.

103
00:05:11.542 --> 00:05:16.559
So let's do R dot length minus
1 minus smiley face minus 1.

104
00:05:16.559 --> 00:05:17.390
There we go.

105
00:05:17.390 --> 00:05:21.690
So now we just need to program two
functions, the quick_sort function, again,

106
00:05:21.690 --> 00:05:25.884
the recursion function and then the
partition function, how we get the index.

107
00:05:25.884 --> 00:05:31.156
So just to make TypeScript not give me
a bunch of errors let's go quicksort

108
00:05:31.156 --> 00:05:36.359
arr number array low number high number
and what do we need to return out?

109
00:05:36.359 --> 00:05:40.756
Well, if we really wanted to we could just
return back out the array to make it super

110
00:05:40.756 --> 00:05:41.276
simple.

111
00:05:41.276 --> 00:05:43.313
We don't have to do that, you can do that.

112
00:05:43.313 --> 00:05:47.481
This one doesn't actually need the array
right here, so we don't need to do that.

113
00:05:47.481 --> 00:05:51.209
Void, awesome, so we have that one
done and then we need one more.

114
00:05:51.209 --> 00:05:55.782
We need the function partition,
right, partition, right here,

115
00:05:55.782 --> 00:06:00.515
which is gonna take in the array,
the low, and the high cuz remember,

116
00:06:00.515 --> 00:06:05.596
this thing needs to be able to run on
all these little spots in here, right?

117
00:06:05.596 --> 00:06:10.615
It needs to be able to run, on one
through seven, so we need to be able

118
00:06:10.615 --> 00:06:15.656
to give it hey, you're running
from low one, high seven, right?

119
00:06:15.656 --> 00:06:17.576
We have to be able to do all these things.

120
00:06:17.576 --> 00:06:21.334
So we have that right here, and
it needs to return back out.

121
00:06:21.334 --> 00:06:24.158
What is the pivot index?

122
00:06:24.158 --> 00:06:26.518
Where did we end up
splitting the array to?

123
00:06:26.518 --> 00:06:28.662
Where did we weekly sort this array?

124
00:06:31.687 --> 00:06:32.530
Awesome.

125
00:06:35.143 --> 00:06:37.047
So which one do we wanna start with?

126
00:06:37.047 --> 00:06:39.839
Should we start with quicksort or
should we start with the partition?

127
00:06:39.839 --> 00:06:41.481
I'll let you guys decide.

128
00:06:41.481 --> 00:06:42.144
&gt;&gt; Partition.

129
00:06:42.144 --> 00:06:44.023
&gt;&gt; I love that, someone had an opinion.

130
00:06:44.023 --> 00:06:45.255
All right, so
let's start with the partition.

131
00:06:45.255 --> 00:06:49.408
So the partition shouldn't be too hard,
we'll just do the easy way which is I'm

132
00:06:49.408 --> 00:06:53.860
going to create a pivot, which is gonna
be simply the array at the high position.

133
00:06:53.860 --> 00:06:58.246
I know this could cause that whole sorting
reverse sorting super duper issue, but

134
00:06:58.246 --> 00:07:00.420
let's just have an easy time with this.

135
00:07:00.420 --> 00:07:02.800
We don't need to do anything super fancy.

136
00:07:02.800 --> 00:07:04.540
Then at this point I'm
gonna create an index.

137
00:07:04.540 --> 00:07:07.460
This is where so, most books will
actually create it at negative one.

138
00:07:07.460 --> 00:07:09.459
You'll see why they do
it in this specific way.

139
00:07:09.459 --> 00:07:13.000
You don't have to do it this way, you'll
just see most pseudocode, I'm pretty sure

140
00:07:13.000 --> 00:07:17.290
if I went to Wikipedia right now, it would
actually say that, start at negative one.

141
00:07:17.290 --> 00:07:21.710
So at this point, we have to walk
from the low to the high, but

142
00:07:21.710 --> 00:07:26.360
not including the high because
the high is the pivot.

143
00:07:26.360 --> 00:07:30.110
So we just have to now do
a weak sort on this subarray.

144
00:07:30.110 --> 00:07:31.374
So let's do the weak sort now.

145
00:07:31.374 --> 00:07:34.613
So, for let i = lo,

146
00:07:34.613 --> 00:07:39.780
i has to be less than hi, + + i.

147
00:07:39.780 --> 00:07:41.410
Now what are we comparing it to?

148
00:07:41.410 --> 00:07:44.917
Remember each element needs
to be compared to the pivot,

149
00:07:44.917 --> 00:07:48.900
not like i plus one,
not something adjacent to the pivot.

150
00:07:48.900 --> 00:07:52.998
So if Array i is less than or
equal to the pivot,

151
00:07:52.998 --> 00:07:57.305
we now need to put that
value into the first slot or

152
00:07:57.305 --> 00:08:02.244
the second slot or the third slot or
however many slots we

153
00:08:02.244 --> 00:08:08.230
need to put it into to make this
into a weakly sorted array.

154
00:08:08.230 --> 00:08:14.583
So we'll go like this
const temp equals array i.

155
00:08:14.583 --> 00:08:19.038
Forgot this, so in the most pseudocode
you'll find that they first increment

156
00:08:19.038 --> 00:08:23.300
the index at this point, that is now
we're now into the zeroeth position.

157
00:08:23.300 --> 00:08:26.122
We went from negative one to
the zeroeth position which I've also

158
00:08:26.122 --> 00:08:27.361
done something wrong here.

159
00:08:27.361 --> 00:08:30.760
We gotta go to low minus one, right?

160
00:08:30.760 --> 00:08:35.210
Cuz we have to be able to put it into,
where is this?

161
00:08:35.210 --> 00:08:40.161
We need to be able to put stuff into
the ninth position or into the,

162
00:08:40.161 --> 00:08:41.870
whatever position.

163
00:08:41.870 --> 00:08:44.953
Remember, cuz we're doing these little
sub sorts on these different spots

164
00:08:44.953 --> 00:08:46.510
within the array.

165
00:08:46.510 --> 00:08:47.480
Always forget to do that.

166
00:08:47.480 --> 00:08:49.190
That's one of the ones that
got me multiple times.

167
00:08:49.190 --> 00:08:51.000
That's why that debugger
message was there.

168
00:08:51.000 --> 00:08:53.481
Forgot to put or
take advantage of using low.

169
00:08:53.481 --> 00:08:56.195
So low minus one, so
right now we're off of it.

170
00:08:56.195 --> 00:09:01.003
The moment we find something we need to
swap, we move it into the first position,

171
00:09:01.003 --> 00:09:02.145
now we do the flop.

172
00:09:02.145 --> 00:09:07.314
We're gonna go array i
is now going to need to

173
00:09:07.314 --> 00:09:12.485
be swapped with array index or
array i equals

174
00:09:12.485 --> 00:09:17.820
array index,
array index equals what is it?

175
00:09:17.820 --> 00:09:19.930
Temp there we go.

176
00:09:19.930 --> 00:09:23.150
Swapping, swapping I don't know why it's
always so hard, I always mess it up.

177
00:09:23.150 --> 00:09:23.940
It's just the worst.

178
00:09:23.940 --> 00:09:25.647
So there we go, it's as simple as that.

179
00:09:25.647 --> 00:09:30.244
We've now found everything and moved it
over into the beginning of the array that

180
00:09:30.244 --> 00:09:33.855
is less than our pivot, but
we have one problem left.

181
00:09:33.855 --> 00:09:35.273
What is the one problem left?

182
00:09:40.487 --> 00:09:45.225
Let me tell you, let's see if we
can do this, here, I'll do this.

183
00:09:45.225 --> 00:09:46.593
So I really want this one to sink in.

184
00:09:46.593 --> 00:09:48.737
I feel like quicksort is
just such a great algorithm.

185
00:09:48.737 --> 00:09:52.227
I just really want to make sure
that people really get this one.

186
00:09:52.227 --> 00:09:55.878
Which is let's just say we
had an array of 1, 7, 6.

187
00:09:55.878 --> 00:10:00.960
I didn't plan on doing this so
hopefully this all works out swell like.

188
00:10:00.960 --> 00:10:08.033
And let's go with 5, all right, fantastic,
let's go with 8 on this side, perfect.

189
00:10:08.033 --> 00:10:10.169
It's gonna be a pretty poor sort but
we're gonna do it.

190
00:10:10.169 --> 00:10:15.030
So we pick 5 as our pivot and
we start off with index that's here

191
00:10:15.030 --> 00:10:20.000
off the thing right, so
we first check here is this less than 5?

192
00:10:20.000 --> 00:10:23.150
No, it's not, though you
are a crooked 8 it's not less than 5.

193
00:10:23.150 --> 00:10:23.960
Is this less than 5?

194
00:10:23.960 --> 00:10:24.600
No it's not.

195
00:10:24.600 --> 00:10:25.440
Is this less than 5?

196
00:10:25.440 --> 00:10:26.030
No it's not.

197
00:10:26.030 --> 00:10:27.390
Is this less than 5?

198
00:10:27.390 --> 00:10:29.190
It is less than 5.

199
00:10:29.190 --> 00:10:32.994
So let's move our index to right here,
now pointing at this,

200
00:10:32.994 --> 00:10:35.200
and we are going to swap you for you.

201
00:10:36.270 --> 00:10:40.038
Awesome and we're gonna go up and to this
point, but not including the fifth one,

202
00:10:40.038 --> 00:10:42.780
cuz the fifth one or,
that one is that the fifth one?

203
00:10:42.780 --> 00:10:47.210
It also happens to be the fifth one or
the index four right there.

204
00:10:47.210 --> 00:10:49.242
So there we go, we've now flopped it,
everything's good.

205
00:10:49.242 --> 00:10:56.830
So our array looks like this 4,
7, 6, 8, 5, 5 being our pivot.

206
00:10:58.340 --> 00:11:00.183
So what's the last thing we have to do?

207
00:11:03.246 --> 00:11:08.400
We have to put our pivot where
the pivot index is, right?

208
00:11:08.400 --> 00:11:11.744
So that way we hold true to the one
rule which is everything to the left

209
00:11:11.744 --> 00:11:14.147
of the pivot needs to be less than or
equal to, and

210
00:11:14.147 --> 00:11:17.000
everything right of it needs
to be greater than it.

211
00:11:17.000 --> 00:11:19.580
So we're gonna have to do
one last swap right here.

212
00:11:19.580 --> 00:11:24.410
So let's go back down here and we go
index plus plus, increment it once more.

213
00:11:24.410 --> 00:11:29.014
So, if we found nothing less than us,
we've incremented into a position of 0 or

214
00:11:29.014 --> 00:11:30.930
low at this point.

215
00:11:30.930 --> 00:11:36.330
So we do that and
now we're gonna go arr[hi]

216
00:11:36.330 --> 00:11:41.170
= arr[idx] and arr[idx] = pivot.

217
00:11:41.170 --> 00:11:44.470
We already have the temporary
specified right up there, right?

218
00:11:44.470 --> 00:11:46.800
So I didn't need to create
the temporary variable in the swap.

219
00:11:46.800 --> 00:11:49.030
There we go.
And the last thing we need to do,

220
00:11:49.030 --> 00:11:52.060
of course,
is return the pivot index right here.

221
00:11:52.060 --> 00:11:53.291
Fantastic, we've done it.

222
00:11:53.291 --> 00:11:55.400
We've written the pivot algorithm.

223
00:11:55.400 --> 00:11:56.926
Was that kinda hard?

224
00:11:56.926 --> 00:11:58.327
Was that a lot to take in?

225
00:11:58.327 --> 00:12:02.398
Or hopefully these explanations,
these things make it a little bit easier

226
00:12:02.398 --> 00:12:06.419
to kind of walk through and follow this,
which is fantastic, all right.

227
00:12:06.419 --> 00:12:07.657
So let's go up to QuickSort,

228
00:12:07.657 --> 00:12:09.944
and now we just need to do
the QuickSort side of things.

229
00:12:09.944 --> 00:12:11.304
So what's our base case?

230
00:12:11.304 --> 00:12:15.513
Well, when we get to the point
where low and high meet, all right.

231
00:12:15.513 --> 00:12:19.360
So that is a bad time, if low equals or
is greater than or equal to high,

232
00:12:19.360 --> 00:12:23.850
I always put greater than, even though
I don't think that can ever happen.

233
00:12:23.850 --> 00:12:28.950
It just makes me feel like it's,
I just catch all the possible conditions.

234
00:12:28.950 --> 00:12:29.800
I don't know why I do that.

235
00:12:29.800 --> 00:12:31.820
It just feels good, you know what I mean?

236
00:12:31.820 --> 00:12:36.206
So once this happens, we have now
officially stopped needing to recurse.

237
00:12:36.206 --> 00:12:40.430
We've ended the line, so
let's return, fantastic.

238
00:12:40.430 --> 00:12:43.270
If we don't hit that,
we need to do three things.

239
00:12:43.270 --> 00:12:48.508
First, we need our pivot index, right,
whoopsies, which is gonna be partition and

240
00:12:48.508 --> 00:12:52.370
we need to pass in the array,
the low and the high, right?

241
00:12:52.370 --> 00:12:54.200
So this thing is gonna do the weak sort.

242
00:12:54.200 --> 00:12:58.610
It's gonna set the pivot into the correct
spot then return the pivots index.

243
00:12:58.610 --> 00:13:01.069
So now,
we need to just repeat this again but

244
00:13:01.069 --> 00:13:05.790
we need to make sure we don't include
the pivot index on our repeat.

245
00:13:05.790 --> 00:13:10.116
So, quicksort array,
lo, to pivot index -1.

246
00:13:10.116 --> 00:13:17.570
Right, because remember, it's inclusive
endings, not exclusive endings.

247
00:13:17.570 --> 00:13:19.330
So if we didn't have that right here,

248
00:13:19.330 --> 00:13:21.590
we'd have to do some math
to make it all work out.

249
00:13:21.590 --> 00:13:24.030
We'd have to put plus ones and
minus ones elsewhere.

250
00:13:24.030 --> 00:13:24.870
So we don't have to do that.

251
00:13:26.168 --> 00:13:27.860
We do have a question.

252
00:13:27.860 --> 00:13:29.200
&gt;&gt; I use 5 as a pivot.

253
00:13:30.230 --> 00:13:33.320
&gt;&gt; In this case,
all I did was pick the last element.

254
00:13:33.320 --> 00:13:35.940
So I wanted to make it identical
to the algorithm that I did.

255
00:13:35.940 --> 00:13:40.920
Which I just simply pick the last element,
I didn't pick 5 as a good choice.

256
00:13:40.920 --> 00:13:48.263
I just picked it as the choice
I programmed All right,

257
00:13:48.263 --> 00:13:54.642
then of course remember,
we need to go to the pivot and beyond one.

258
00:13:54.642 --> 00:13:57.353
I think I just quoted Buzz there for
a second.

259
00:13:57.353 --> 00:13:59.766
And then we're gonna go up to the high.

260
00:13:59.766 --> 00:14:04.351
So now notice what we've did, we're gonna
repeat the quicksort on one side of

261
00:14:04.351 --> 00:14:09.017
the array, on the other side of the array,
but we're not including the pivot.

262
00:14:09.017 --> 00:14:10.224
Does this make sense?

263
00:14:10.224 --> 00:14:15.064
Everything's looking good, now, I'm sure
there's an over and under going right now,

264
00:14:15.064 --> 00:14:17.750
but do we feel like I've gotten this,
first try?

265
00:14:19.770 --> 00:14:25.795
Okay, we have just,
people are out there saying absolutely.

266
00:14:25.795 --> 00:14:30.428
All right quicksort so
we're gonna run this and I get this one.

267
00:14:30.428 --> 00:14:31.520
Look at that, we got it.

268
00:14:31.520 --> 00:14:33.940
There we go.
So we got that first try, just knew it.

269
00:14:35.100 --> 00:14:37.050
Complete confidence there for a second.

270
00:14:37.050 --> 00:14:40.773
So there we go, so
that is all quicksort is.

271
00:14:40.773 --> 00:14:43.744
It's just a simple partitioning and
repeat,

272
00:14:43.744 --> 00:14:46.268
this is a divide and conquer strategy.

273
00:14:46.268 --> 00:14:48.878
I find this one to be really,
really awesome, easy,

274
00:14:48.878 --> 00:14:51.147
it's much easier to
program than Merge Sort.

275
00:14:51.147 --> 00:14:55.600
Merge Sort, though often used,
is very, very complicated in my book.

276
00:14:55.600 --> 00:14:58.418
So I like this one, fantastic.

277
00:14:58.418 --> 00:15:04.260
And at that point, we did it,
we're kind of done with lists.

278
00:15:04.260 --> 00:15:07.175
There's no more lists,
we're gonna be done, we're fully done.

279
00:15:07.175 --> 00:15:12.226
But technically in a sense lists
are actually our trees in some sense,

280
00:15:12.226 --> 00:15:16.506
they're very, very similar,
so we're not really done,

281
00:15:16.506 --> 00:15:19.007
we're just kind of done, right?

282
00:15:19.007 --> 00:15:23.282
You're gonna have a whole load of
node like opportunities coming up and

283
00:15:23.282 --> 00:15:25.499
we're gonna use a ton of recursion.

284
00:15:25.499 --> 00:15:29.321
So if you're not familiar or if you felt
like your recursion chops weren't quite up

285
00:15:29.321 --> 00:15:31.302
to snuff, you might want to take a moment.

286
00:15:31.302 --> 00:15:34.380
And so
all programming eventually leads to trees.

287
00:15:34.380 --> 00:15:35.657
This is just a fact of life.

288
00:15:35.657 --> 00:15:39.842
The Falkor thing that I mentioned where
I could have ruined all of Netflix,

289
00:15:39.842 --> 00:15:41.045
that was just a tree.

290
00:15:41.045 --> 00:15:44.156
Well, it was actually a forest which is a
series of trees that were also pointing to

291
00:15:44.156 --> 00:15:44.708
other trees.

292
00:15:44.708 --> 00:15:46.731
It was like a graph that
was also a set of trees.

293
00:15:46.731 --> 00:15:49.166
It was very confusing,
I can't quite tell what it was.

294
00:15:49.166 --> 00:15:51.769
It was a linked list and a tree and
a graph all at the same time,

295
00:15:51.769 --> 00:15:53.365
just depends on how you looked at it.

