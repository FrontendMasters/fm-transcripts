WEBVTT

1
00:00:00.000 --> 00:00:02.616
I know you probably feel like
you've had enough lists, but

2
00:00:02.616 --> 00:00:04.667
there's still one more
list I do wanna cover.

3
00:00:04.667 --> 00:00:07.940
I think it's a very fantastic list,
it's one of my favorite lists,

4
00:00:07.940 --> 00:00:08.964
I use it all the time.

5
00:00:08.964 --> 00:00:11.889
I tried to make a PR once to an open
source library a while back,

6
00:00:11.889 --> 00:00:13.088
that wasn't using one.

7
00:00:13.088 --> 00:00:16.718
And it would just cause terrible
performance, and they didn't accept my PR,

8
00:00:16.718 --> 00:00:20.238
but I do think I was right on doing it,
and of course, that is array buffers.

9
00:00:20.238 --> 00:00:24.210
I've created bajillions of these, I've
created a bunch of them just this year.

10
00:00:24.210 --> 00:00:27.991
It's a very fancy word, but
it's not actually all that confusing.

11
00:00:27.991 --> 00:00:30.965
So let's go over an array buffer.

12
00:00:30.965 --> 00:00:34.147
I just love them, they're just the best.

13
00:00:34.147 --> 00:00:39.027
I believe these are used, if you're
familiar with Rust, VecDeque or DequeVec,

14
00:00:39.027 --> 00:00:42.296
that's what they are as
a double-ended ring buffer.

15
00:00:42.296 --> 00:00:46.085
So effectively, you can think the exact
same thing as an ArrayList, right,

16
00:00:46.085 --> 00:00:47.204
where you have 0 to N.

17
00:00:47.204 --> 00:00:49.349
And you have some sort
of array-like storage.

18
00:00:49.349 --> 00:00:53.540
The only difference is that we're
not using 0 as our head, and

19
00:00:53.540 --> 00:00:54.893
length as our tail.

20
00:00:54.893 --> 00:00:56.753
That's what's happening in ArrayList,

21
00:00:56.753 --> 00:00:58.826
you can kind of imagine
it kind of a LinkedList.

22
00:00:58.826 --> 00:01:03.931
Instead, what we're gonna have is we
can literally have index based head,

23
00:01:03.931 --> 00:01:06.181
and we can have index based tail.

24
00:01:06.181 --> 00:01:08.069
And so
they exist somewhere within the list.

25
00:01:08.069 --> 00:01:11.563
Or you could imagine everything
this direction is null,

26
00:01:11.563 --> 00:01:13.832
everything this direction is null.

27
00:01:13.832 --> 00:01:17.907
And everything within the head and
the tail are the items that you have.

28
00:01:17.907 --> 00:01:22.203
So if you wish to remove from the front,
what do you do?

29
00:01:22.203 --> 00:01:24.079
You just +1 to the head.

30
00:01:24.079 --> 00:01:28.201
And now, that item that was
the head is no longer in there,

31
00:01:28.201 --> 00:01:32.167
we clean it up, return it out,
and now we have a new one.

32
00:01:32.167 --> 00:01:35.098
So that is an O(1) operation,
which is fantastic.

33
00:01:35.098 --> 00:01:38.890
Same thing with tail, if you wanted to
add to the tail, what would you do?

34
00:01:38.890 --> 00:01:41.643
Just add 1 to the tail, right?

35
00:01:41.643 --> 00:01:43.372
This is just tail + 1.

36
00:01:43.372 --> 00:01:45.230
Boom, and now we've updated it.

37
00:01:45.230 --> 00:01:48.870
So pushing, popping, shifting, unshifting,

38
00:01:48.870 --> 00:01:52.606
all are O(1) operations,
which is fantastic.

39
00:01:52.606 --> 00:01:55.555
You guys are so astute,
I can just see the astuteness.

40
00:01:55.555 --> 00:02:01.311
And you're saying, well, checkmate,
instructor, what if you go off the edge?

41
00:02:01.311 --> 00:02:04.070
Well, that's why they're
called ring buffers, people,

42
00:02:04.070 --> 00:02:07.432
is that you can actually go,
[SOUND] right, the modulo operator, right?

43
00:02:07.432 --> 00:02:12.105
So tail,
this.tail modulo length gives you your

44
00:02:12.105 --> 00:02:16.674
index into the array, so
you can ring around it.

45
00:02:16.674 --> 00:02:21.580
So your head can literally be on this
side, and your tail can be over here, and

46
00:02:21.580 --> 00:02:23.552
you still have the same thing.

47
00:02:23.552 --> 00:02:26.874
Now, if you need to resize, that's where
things get a little bit confusing, right?

48
00:02:26.874 --> 00:02:31.088
By the way, is everyone familiar
with the modulo operator?

49
00:02:31.088 --> 00:02:37.615
Modulo operator is the remainder operator,
so 5 divided by 2, the answer should be 2.

50
00:02:37.615 --> 00:02:40.234
TypeScript rots your brain so
much, you're like 2.5.

51
00:02:40.234 --> 00:02:43.889
It's like, no, it's 2 remainder 1, right?

52
00:02:43.889 --> 00:02:47.848
So 5 modulo 2 is 1, right?

53
00:02:47.848 --> 00:02:49.398
That's the answer.

54
00:02:49.398 --> 00:02:53.442
Most languages don't convert from integers
to floats without your permission.

55
00:02:53.442 --> 00:02:57.521
You need to say, hey,
this is now officially a float,

56
00:02:57.521 --> 00:02:59.658
you can put a point in there.

57
00:02:59.658 --> 00:03:03.273
So anyways,
this does the remainder afterwards.

58
00:03:03.273 --> 00:03:08.136
So you can imagine if tail,
let's say if you had an array,

59
00:03:08.136 --> 00:03:11.426
say size 10, and your tail was 12.

60
00:03:11.426 --> 00:03:14.738
12 modulo 10, 2,
your tail would be right here.

61
00:03:14.738 --> 00:03:19.002
And if your head was say 24,
let's just say it's 24.

62
00:03:19.002 --> 00:03:21.575
Somehow it's bigger than your tail,
don't ask questions,

63
00:03:21.575 --> 00:03:23.363
it's just somehow bigger than your tail.

64
00:03:23.363 --> 00:03:25.986
24 modulo 10, of course, that's 4.

65
00:03:25.986 --> 00:03:29.071
So your head would be here at 4,
your tail will be at 2,

66
00:03:29.071 --> 00:03:31.906
that means you're using from 4 until 2,
right?

67
00:03:31.906 --> 00:03:32.740
So that makes sense, right?

68
00:03:32.740 --> 00:03:34.943
You can actually go around,
it's a little ring around.

69
00:03:34.943 --> 00:03:39.889
The only problem happens is when
your tail exceeds your head.

70
00:03:39.889 --> 00:03:43.440
Once that happens, I mean, a,
you're probably falling down some stairs.

71
00:03:43.440 --> 00:03:47.312
But b, what actually is happening
is that you need to resize.

72
00:03:47.312 --> 00:03:49.923
And so this is where a little
bit of the trickiness comes in.

73
00:03:49.923 --> 00:03:54.281
Because one thing that's inherent about
ring buffers is they also maintain order.

74
00:03:54.281 --> 00:03:58.197
So when you shift or unshift,
you're not just getting any element,

75
00:03:58.197 --> 00:04:01.843
you're getting the element that
was last added into the front or

76
00:04:01.843 --> 00:04:04.293
perhaps the first element added, right?

77
00:04:04.293 --> 00:04:07.076
So if you're only adding to the tail and
removing from the front,

78
00:04:07.076 --> 00:04:09.112
you're just simply creating a queue,
right?

79
00:04:09.112 --> 00:04:11.964
That's all you're doing,
a queue that runs around a ring.

80
00:04:11.964 --> 00:04:14.765
And so you do have to do a little bit
of that, and you'll have to resize, and

81
00:04:14.765 --> 00:04:16.207
a resize is pretty straightforward.

82
00:04:16.207 --> 00:04:20.274
So if you did have this situation in which
the tail is now where the head is at, and

83
00:04:20.274 --> 00:04:21.693
you're trying to insert.

84
00:04:21.693 --> 00:04:26.581
Well, all you have to do is start
at your head, go the length,

85
00:04:26.581 --> 00:04:30.541
and write that into a new
larger capacity buffer.

86
00:04:30.541 --> 00:04:35.320
And there you go,
you now have it rewritten in proper order,

87
00:04:35.320 --> 00:04:38.423
your tail or your head, or let's see.

88
00:04:38.423 --> 00:04:41.492
Now, no, your head will be at 0, your
tail will be at length, and there you go.

89
00:04:41.492 --> 00:04:44.875
Now, you can just add 1 cuz you have
more capacity, everything is good to go.

90
00:04:44.875 --> 00:04:47.026
So ring buffers are really
fantastic items.

91
00:04:47.026 --> 00:04:49.218
Hopefully, this is just
an explanation point,

92
00:04:49.218 --> 00:04:51.202
we're not actually gonna implement them.

93
00:04:51.202 --> 00:04:55.323
But they are a really great list to know
you have, cuz inevitably, what's gonna

94
00:04:55.323 --> 00:04:59.524
happen is you're gonna write something
like, let's say a log batcher, right?

95
00:04:59.524 --> 00:05:03.398
You have a service which needs
the batch logs and then write logs.

96
00:05:03.398 --> 00:05:07.608
The problem is logs need to maintain
order, and while you're writing logs,

97
00:05:07.608 --> 00:05:08.786
new logs can come in.

98
00:05:08.786 --> 00:05:11.646
So you can imagine something that doesn't
wanna take too long writing logs,

99
00:05:11.646 --> 00:05:12.572
doesn't wanna do this.

100
00:05:12.572 --> 00:05:16.027
You could use something like a ring
buffer in which every so long, every so

101
00:05:16.027 --> 00:05:19.833
timer, it flushes 50 logs, 100 logs,
some amount of logs, all the logs.

102
00:05:19.833 --> 00:05:22.262
You don't really care,
you just flush it, and

103
00:05:22.262 --> 00:05:25.871
then you have something that can
keep on running while it's doing it.

104
00:05:25.871 --> 00:05:29.502
And you don't even have to worry
about putting, say a mutex around it.

105
00:05:29.502 --> 00:05:33.178
I know this is maybe a little too unsafe
for all the rustaceans out there,

106
00:05:33.178 --> 00:05:37.516
because you don't write into memory that's
being used until your tail or your head or

107
00:05:37.516 --> 00:05:39.043
your tail exceeds your head.

108
00:05:39.043 --> 00:05:41.843
So you have this free space, you can
do some really cool operations with it.

109
00:05:41.843 --> 00:05:43.419
You can make it super duper fast,

110
00:05:43.419 --> 00:05:47.322
where you don't have to worry about some
of these read write operation problems.

111
00:05:47.322 --> 00:05:50.146
Big fan of it, I like it, it's great.

112
00:05:50.146 --> 00:05:54.378
Obviously, one of the problems is that you
will have to do a little bit of mutexing

113
00:05:54.378 --> 00:05:55.697
around your tail index.

114
00:05:55.697 --> 00:05:59.407
So you don't actually do
something that's bad.

115
00:05:59.407 --> 00:06:00.630
We got one question.

116
00:06:00.630 --> 00:06:02.188
&gt;&gt; Is it called a rain buffer?

117
00:06:02.188 --> 00:06:07.764
&gt;&gt; A Ring Buffer, a Ring Buffer.

118
00:06:09.949 --> 00:06:12.374
They're a lot of fun, and
you can use them quite a bit for

119
00:06:12.374 --> 00:06:16.053
performance object pooling if you really
wanna use ring buffer for object pooling.

120
00:06:16.053 --> 00:06:20.220
You can just use an ArrayList for
object pooling, cuz they don't

121
00:06:20.220 --> 00:06:24.483
really care if they're created the last or
added to the pool last.

122
00:06:24.483 --> 00:06:27.712
It's just like,
I just need a new object to reuse again.

123
00:06:27.712 --> 00:06:28.799
And so you don't have to do that.

124
00:06:28.799 --> 00:06:31.074
For those that don't know
what an object pool is,

125
00:06:31.074 --> 00:06:34.659
say you have a service that creates a user
every single time a request comes in.

126
00:06:34.659 --> 00:06:38.051
You're getting thousands upon
thousands upon thousands of requests,

127
00:06:38.051 --> 00:06:41.005
why recreate this object over and
over and over and over again?

128
00:06:41.005 --> 00:06:45.208
Just have an object, set new values on it,
use it for the service,

129
00:06:45.208 --> 00:06:46.644
hand it back to a pool.

130
00:06:46.644 --> 00:06:50.356
So that way, your memory doesn't go
like this, instead, it goes like that.

131
00:06:50.356 --> 00:06:52.442
Just makes life a little bit easier.

132
00:06:52.442 --> 00:06:55.591
And often, you can run into situations
where you don't get garbage collection

133
00:06:55.591 --> 00:06:57.527
destroying your service,
blah blah blah blah.

134
00:06:57.527 --> 00:07:00.090
Pools, they're great,
everyone loves pools, I love pools.

