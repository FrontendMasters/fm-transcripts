WEBVTT

1
00:00:00.230 --> 00:00:01.541
So the question is, can we do better?

2
00:00:01.541 --> 00:00:05.089
Can we have array access with
the ability to grow, right?

3
00:00:05.089 --> 00:00:10.053
That's kind of what we want in life
is that it's something that I assume

4
00:00:10.053 --> 00:00:12.465
at least we all want that, right?

5
00:00:12.465 --> 00:00:13.964
And the answer, of course, is yes.

6
00:00:13.964 --> 00:00:17.997
Now remember, I did say with an array we
can write these operations in, right?

7
00:00:17.997 --> 00:00:21.453
We can do a for loop and
shift everything over, or shift it back.

8
00:00:21.453 --> 00:00:24.278
If we want to delete it
we can do these things.

9
00:00:24.278 --> 00:00:26.581
We just have to write
these things ourselves.

10
00:00:26.581 --> 00:00:31.055
Now in some languages,
they just provide it.

11
00:00:31.055 --> 00:00:34.975
Like if you think about JavaScript, you
actually have a list implementation where

12
00:00:34.975 --> 00:00:38.844
you can choose between a Linked List, and
now what is referred to as an ArrayList.

13
00:00:38.844 --> 00:00:42.850
It's an ArrayList where instead
of having underlying containers,

14
00:00:42.850 --> 00:00:45.897
we have an array of generic T,
and we can use that.

15
00:00:45.897 --> 00:00:48.268
And when we need to grow
we have to grow it.

16
00:00:48.268 --> 00:00:49.755
So let me explain how this one works.

17
00:00:49.755 --> 00:00:51.827
Cuz it's actually pretty neat idea and

18
00:00:51.827 --> 00:00:54.912
it's also gonna be the basis
of a lot of other algorithms.

19
00:00:54.912 --> 00:00:59.226
Maps are gonna use these,
ring buffers are gonna use these,

20
00:00:59.226 --> 00:01:01.856
it's a very pretty simple concept.

21
00:01:01.856 --> 00:01:04.455
So let's just say we have
an array that is from 0 to 3, and

22
00:01:04.455 --> 00:01:06.699
let's just say we're storing numbers,
right?

23
00:01:06.699 --> 00:01:08.393
It doesn't matter what we're storing.

24
00:01:08.393 --> 00:01:12.073
And so we have in here, we have 2, right?

25
00:01:12.073 --> 00:01:13.776
That's all we have in here so far.

26
00:01:13.776 --> 00:01:16.918
That means we have a length of 1, right?

27
00:01:16.918 --> 00:01:22.304
We have one item in there,
but we have a capacity of 3.

28
00:01:22.304 --> 00:01:23.935
Does that make sense?

29
00:01:23.935 --> 00:01:27.267
We can store up to three numbers but
we have a length of one.

30
00:01:27.267 --> 00:01:32.230
So that means if we were to do a get
operation, say a get with an index, well,

31
00:01:32.230 --> 00:01:34.106
we could do a couple things.

32
00:01:34.106 --> 00:01:38.867
A, we can use our length that we're kind
of holding on to that we're maintaining,

33
00:01:38.867 --> 00:01:42.404
as a way to say hey,
you're either accessing in, or within or

34
00:01:42.404 --> 00:01:43.714
without of our array.

35
00:01:43.714 --> 00:01:48.116
So if you exceed this index, so if IDX is
greater than or equal to length, well,

36
00:01:48.116 --> 00:01:52.078
then we could throw some sort of error,
whatever we want to do, right?

37
00:01:52.078 --> 00:01:54.168
You're accessing outside of the bounds.

38
00:01:54.168 --> 00:01:57.080
If you're to be more JavaScript,
you could just return undefined, right?

39
00:01:57.080 --> 00:02:00.575
That'd be a pretty
acceptable way to do things.

40
00:02:00.575 --> 00:02:03.843
So if we wanted to push something though,
what could we do?

41
00:02:03.843 --> 00:02:06.041
Well, pushing actually
isn't all that hard.

42
00:02:06.041 --> 00:02:10.188
We could literally have the length,
which right now is set to one, and

43
00:02:10.188 --> 00:02:13.507
we can say, hey, length,
are you within my capacity?

44
00:02:13.507 --> 00:02:14.892
You're within the capacity?

45
00:02:14.892 --> 00:02:19.208
Awesome, I'm going to push the value
in then, or right there, and

46
00:02:19.208 --> 00:02:22.491
then increment my length
to point to the next part.

47
00:02:22.491 --> 00:02:27.409
So we're actually creating a push
operation on top of an array.

48
00:02:27.409 --> 00:02:31.407
So that's what an array list is, is using
an array as the fundamental datatype

49
00:02:31.407 --> 00:02:35.527
instead of a node-based structure, and
then doing these pushes, these pull or

50
00:02:35.527 --> 00:02:37.911
pops, and
being able to do these operations.

51
00:02:37.911 --> 00:02:41.123
So obviously,
push is pretty dang good, right?

52
00:02:41.123 --> 00:02:44.682
We are just able to write that,
it's pretty quick, how fast,

53
00:02:44.682 --> 00:02:47.111
what would be the big
O of a push operation?

54
00:02:47.111 --> 00:02:48.255
So let's break it down.

55
00:02:48.255 --> 00:02:53.021
Remember, use your length, write it
to an array, increment your length.

56
00:02:53.021 --> 00:02:55.496
What would be the runtime of that?

57
00:02:55.496 --> 00:02:56.284
&gt;&gt; Constant?

58
00:02:56.284 --> 00:03:00.410
&gt;&gt; Constant, that's right, because none
of those things depend on the input.

59
00:03:00.410 --> 00:03:03.491
Notice I didn't ever say the input,
I only said the length, so

60
00:03:03.491 --> 00:03:07.096
that's not traversing the length,
it's just simply using the length,

61
00:03:07.096 --> 00:03:09.907
and adding a number constant,
we consider it constant.

62
00:03:09.907 --> 00:03:10.978
There we go.

63
00:03:10.978 --> 00:03:12.500
Now, what about pop?

64
00:03:12.500 --> 00:03:14.482
Well, pop is the exact same thing, right?

65
00:03:14.482 --> 00:03:19.048
Which can return either T,
or undefined, right?

66
00:03:19.048 --> 00:03:23.758
So exact same thing,
we're gonna use length minus 1,

67
00:03:23.758 --> 00:03:29.085
we'll grab out that value,
then we can decrement the length.

68
00:03:29.085 --> 00:03:31.783
So yeah, this value, if it's, say just for

69
00:03:31.783 --> 00:03:35.617
storing numbers, it can technically
remain within the array.

70
00:03:35.617 --> 00:03:37.132
We don't actually zero out the data.

71
00:03:37.132 --> 00:03:39.412
You could zero out the data
if you want to, but

72
00:03:39.412 --> 00:03:42.898
you also don't have to zero out
the data with primitive structures.

73
00:03:42.898 --> 00:03:46.370
If you're using a language that uses
pointers, you can technically still leave

74
00:03:46.370 --> 00:03:49.753
them in there because there's nothing
that you're actually doing, right?

75
00:03:49.753 --> 00:03:52.700
Unless if it's of course a shared pointer,
using some like rust, blah blah,

76
00:03:52.700 --> 00:03:55.486
there could be all different ways in
which you would want to clean this up.

77
00:03:55.486 --> 00:03:59.441
But in general, if we're just talking
about a simple array underneath the hood,

78
00:03:59.441 --> 00:04:02.765
you don't actually have to clean it
up because you are using length to

79
00:04:02.765 --> 00:04:04.509
keep track of what you own, right?

80
00:04:04.509 --> 00:04:06.668
And you only clean up as you need to.

81
00:04:06.668 --> 00:04:10.708
In Java land you'd probably want to
set it to null, because nulls are you

82
00:04:10.708 --> 00:04:15.030
releasing a pointer to an object,
thus it can be garbage collected, right?

83
00:04:15.030 --> 00:04:17.781
There is some dangers there, but
understand your environment and

84
00:04:17.781 --> 00:04:20.088
what you're doing, and
why you'd want to clean it up or

85
00:04:20.088 --> 00:04:21.628
not clean it up is always a good plan.

86
00:04:21.628 --> 00:04:24.743
But this is effectively an ArrayList.

87
00:04:24.743 --> 00:04:25.634
Makes a lot of sense.

88
00:04:25.634 --> 00:04:29.883
Now the real question you're
probably asking yourself is,

89
00:04:29.883 --> 00:04:33.892
what happens with push when
we exceed capacity, right?

90
00:04:33.892 --> 00:04:39.133
So if I were to push push, then push once
more, well, something has to happen,

91
00:04:39.133 --> 00:04:44.174
because our length is currently equal
to our capacity at the moment of push.

92
00:04:44.174 --> 00:04:46.174
We've ran out of room to do this.

93
00:04:46.174 --> 00:04:50.870
So one thing we can do is we can create
a new array of some longer length.

94
00:04:50.870 --> 00:04:53.925
Let's say six, say we double our capacity.

95
00:04:53.925 --> 00:04:59.325
Then we could mem copy or just do a for
loop, and copy them in one at a time,

96
00:04:59.325 --> 00:05:02.792
where we actually move
over all of our values.

97
00:05:02.792 --> 00:05:08.970
Then our length would still point right
here, our capacity now becomes six,

98
00:05:08.970 --> 00:05:12.880
and we can now easily
handle the push operation.

99
00:05:12.880 --> 00:05:16.373
So this is effectively what
an ArrayList does underneath the hood,

100
00:05:16.373 --> 00:05:20.111
is it contains some actual array
structure, and then helps you make it so

101
00:05:20.111 --> 00:05:22.030
that it's dynamic, that it grows.

102
00:05:22.030 --> 00:05:25.761
That's why you're always gonna see
a capacity on a lot of these more

103
00:05:25.761 --> 00:05:29.953
traditional structures, is because it
actually is starting off with hey,

104
00:05:29.953 --> 00:05:32.394
give me a hint about how
much you want to use.

105
00:05:32.394 --> 00:05:34.494
In that way I don't allocate
too much memory, and

106
00:05:34.494 --> 00:05:36.595
that way you're not using
a bunch of empty space.

107
00:05:36.595 --> 00:05:41.020
Cuz if it starts off by saying hey
my initial capacity is 30,000,

108
00:05:41.020 --> 00:05:42.729
that could be way too much.

109
00:05:42.729 --> 00:05:44.465
It's just wasting a bunch of memory.

110
00:05:44.465 --> 00:05:45.548
So it's a game here.

111
00:05:45.548 --> 00:05:49.055
There's definitely a game you have
to play in which you want to be as,

112
00:05:49.055 --> 00:05:52.995
use the least amount of memory but
do the least amount of growing operations.

113
00:05:52.995 --> 00:05:57.357
I spent pop obviously redact, I mean,
I've never seen a data structure

114
00:05:57.357 --> 00:06:01.517
that actually reduces its capacity
once it reaches a certain point.

115
00:06:01.517 --> 00:06:04.933
I mean I guess you could if you had to
be very, very efficient about memory,

116
00:06:04.933 --> 00:06:07.282
say you're using an extremely
low memory device.

117
00:06:07.282 --> 00:06:11.106
You could do that, but
I've never seen that personally.

118
00:06:11.106 --> 00:06:13.852
So there we go,
that's the effects of an ArrayList.

119
00:06:13.852 --> 00:06:18.034
But let's think about it, cuz we've only
covered two operations, push and pop,

120
00:06:18.034 --> 00:06:19.779
which are stack like operations.

121
00:06:19.779 --> 00:06:22.645
What about queue-like operations?

122
00:06:22.645 --> 00:06:25.013
queue or enqueue and dequeue.

123
00:06:25.013 --> 00:06:30.030
Well, if we were to do that on
an ArrayList, if we were to take this and

124
00:06:30.030 --> 00:06:34.700
say we had the values 2, 3 and
5 in our underlying ArrayList,

125
00:06:34.700 --> 00:06:39.656
we have a length of 3, we have
a capacity of 3, and we do a enqueue.

126
00:06:42.161 --> 00:06:43.732
What's gonna have to happen?

127
00:06:43.732 --> 00:06:47.722
Well, first, we're gonna have
to grow our capacity, right?

128
00:06:47.722 --> 00:06:51.861
We're not able to actually
sustain any further items.

129
00:06:51.861 --> 00:06:53.824
So let's say we grow our capacity,
awesome.

130
00:06:53.824 --> 00:06:59.079
Our capacity is now 6, right, and so
now we can insert at length, correct?

131
00:06:59.079 --> 00:07:03.531
Cuz our length is 3, so it's actually
pointing at the empty spot, awesome,

132
00:07:03.531 --> 00:07:04.619
we can now insert.

133
00:07:04.619 --> 00:07:07.774
Well, I guess that's for push for n and q.

134
00:07:07.774 --> 00:07:09.725
What's the problem here?

135
00:07:09.725 --> 00:07:11.407
The problem is actually quite simple.

136
00:07:11.407 --> 00:07:13.193
You can't just right, this is an array.

137
00:07:13.193 --> 00:07:15.471
if you write, it writes over the value.

138
00:07:15.471 --> 00:07:16.915
So what are you gonna have to do?

139
00:07:16.915 --> 00:07:21.820
You're gonna have to start here and
go move over one,

140
00:07:21.820 --> 00:07:24.655
move over one, move over one.

141
00:07:24.655 --> 00:07:27.591
Now we have created a spot
in that position for

142
00:07:27.591 --> 00:07:30.459
you to be able to insert
into the ArrayList.

143
00:07:30.459 --> 00:07:34.791
And so that's why often you'll see people
getting up in arms about using insert

144
00:07:34.791 --> 00:07:38.669
into the front of a list, because if
it's an ArrayList you have to do an N

145
00:07:38.669 --> 00:07:42.702
like operation, and actually shift
over all of your underlying values.

146
00:07:42.702 --> 00:07:45.893
And they're very, very not performant.

147
00:07:45.893 --> 00:07:50.871
And that's why you see people liking,
say queues with node-based items,

148
00:07:50.871 --> 00:07:54.387
because you can do this in O(1)
operation, not O(N).

149
00:07:54.387 --> 00:07:56.618
So exact same thing with dequeue as well.

150
00:07:56.618 --> 00:07:59.536
If you do a dequeue, what happens?

151
00:07:59.536 --> 00:08:03.496
Well, the dequeue, you're gonna have to
literally shift over every single item,

152
00:08:03.496 --> 00:08:04.756
and you can right over and

153
00:08:04.756 --> 00:08:07.942
then you're gonna have to shift
over this direction, right?

154
00:08:07.942 --> 00:08:11.760
And now you've just shifted everything
back, cuz you want to be able to do get

155
00:08:11.760 --> 00:08:14.719
zero, and you want to expect
the zeroeth item to be an item.

156
00:08:14.719 --> 00:08:17.398
If you don't do that you have
the first item being an item and

157
00:08:17.398 --> 00:08:20.399
then the zeroeth item being one,
you've either already pushed or

158
00:08:20.399 --> 00:08:23.904
a value you've already cleaned up,
which is gonna be fundamentally wrong.

159
00:08:23.904 --> 00:08:28.800
And so this makes ArrayList really, really
bad with enqueue and dequeue, but really,

160
00:08:28.800 --> 00:08:31.001
really good with push and pop, right?

161
00:08:31.001 --> 00:08:33.017
You see why this is the way it is.

162
00:08:33.017 --> 00:08:36.523
And you could effectively say that as
long as you're pushing and popping and

163
00:08:36.523 --> 00:08:38.220
you reach some sort of stable state,

164
00:08:38.220 --> 00:08:40.979
you're gonna have a O(1)
performance pushing and popping.

165
00:08:40.979 --> 00:08:44.179
It never has to grow the array,
it never has to do anything,

166
00:08:44.179 --> 00:08:47.263
it's just very,
very contained in a certain capacity.

167
00:08:47.263 --> 00:08:48.237
Awesome.

168
00:08:48.237 --> 00:08:52.791
Same thing applies obviously to the middle
of a list, just in case I didn't cover it.

169
00:08:52.791 --> 00:08:55.381
If you said hey,
delete at the fifth index,

170
00:08:55.381 --> 00:08:58.960
everything beyond the fifth
index needs to be shifted down.

171
00:08:58.960 --> 00:09:03.241
So those are O(N) operations.

172
00:09:03.241 --> 00:09:05.340
All right, let's see, did I miss anything?

173
00:09:05.340 --> 00:09:06.282
I don't think so.

174
00:09:06.282 --> 00:09:08.682
Running time, yep, we talked about
all the deletion/insertions,

175
00:09:08.682 --> 00:09:09.870
they're the same thing, right?

176
00:09:09.870 --> 00:09:11.764
If you insert,
you have to shift everything over.

177
00:09:11.764 --> 00:09:14.496
If you delete, you have to shift
everything over the other direction.

178
00:09:14.496 --> 00:09:16.312
They're pretty straightforward,

179
00:09:16.312 --> 00:09:20.468
I think I'm gonna skip the implementation
on this one, just because it is, again,

180
00:09:20.468 --> 00:09:23.234
a very lengthy implementation and
it's not very hard.

181
00:09:23.234 --> 00:09:26.509
You see the for loops you have to do,
you go to that index, and

182
00:09:26.509 --> 00:09:28.450
you just have to shift over values.

183
00:09:28.450 --> 00:09:31.355
Not too hard on this one.

184
00:09:31.355 --> 00:09:32.086
There we go.

185
00:09:32.086 --> 00:09:33.881
So which one is better, right?

186
00:09:33.881 --> 00:09:36.895
Which one would you rather use,
an Array List or a Linked List?

187
00:09:41.612 --> 00:09:43.330
&gt;&gt; Does it depend on the situation?

188
00:09:43.330 --> 00:09:45.846
&gt;&gt; Man, it's like you guys knew the thing!

189
00:09:45.846 --> 00:09:47.446
It should always be it depends, right?

190
00:09:47.446 --> 00:09:48.964
It is always it depends.

191
00:09:48.964 --> 00:09:51.948
Whenever someone asks that in
an interview, say it depends.

192
00:09:51.948 --> 00:09:52.911
It depends on the situation.

193
00:09:52.911 --> 00:09:54.992
That's why I always do so terrible.

194
00:09:54.992 --> 00:09:57.839
I emotionally do so terrible at Google
interviews cuz they're always like,

195
00:09:57.839 --> 00:10:00.138
let's say we're inserting and
removing millions of items.

196
00:10:00.138 --> 00:10:01.223
I'm like, well, I mean,

197
00:10:01.223 --> 00:10:04.879
you're really doing 100 million items on a
single machine, are you really doing this?

198
00:10:04.879 --> 00:10:07.417
This already seems so not even feasible.

199
00:10:07.417 --> 00:10:10.069
Let's talk about why you're doing that,
right?

200
00:10:10.069 --> 00:10:11.633
I've already lost the battle.

201
00:10:11.633 --> 00:10:15.373
It just seems so fake, but
experimentally, it depends.

202
00:10:15.373 --> 00:10:20.192
If you're pushing and popping from
the end, well, either a Linked List or

203
00:10:20.192 --> 00:10:22.483
an ArrayList can work quite well.

204
00:10:22.483 --> 00:10:25.565
You get a little bit more conveniences
cuz often with an ArrayList you also have

205
00:10:25.565 --> 00:10:26.974
like say angle bracket accessing.

206
00:10:26.974 --> 00:10:31.828
You can have that with a Linked List,
but doesn't often happen.

207
00:10:31.828 --> 00:10:36.718
But at the exact same time you have
random access with an ArrayList.

208
00:10:36.718 --> 00:10:37.917
Give me index three.

209
00:10:37.917 --> 00:10:39.435
That's constant time.

210
00:10:39.435 --> 00:10:42.949
That's really really good, but
you do not remove from the front.

211
00:10:42.949 --> 00:10:45.951
So there's definitely a trade-off, there's
definitely a trade-off graph somewhere on

212
00:10:45.951 --> 00:10:47.155
there that you have to be careful of.

213
00:10:47.155 --> 00:10:50.951
Getting sucks on Linked List; removing
from the front, sucks on ArrayList.

214
00:10:50.951 --> 00:10:53.641
And so long as you can explain
that to your interviewer,

215
00:10:53.641 --> 00:10:55.769
they're usually pretty happy about that.

216
00:10:55.769 --> 00:10:58.864
I in fact, even have a question that
Netflix I used to ask all the time,

217
00:10:58.864 --> 00:11:00.858
which was implement
an async request queue,

218
00:11:00.858 --> 00:11:03.288
in which only three requests
can be out at any one time.

219
00:11:03.288 --> 00:11:06.779
Or three async operations
can be out at any one time.

220
00:11:06.779 --> 00:11:11.373
And when they inevitably use an array,
or use the JavaScript brackets,

221
00:11:11.373 --> 00:11:14.244
I'd go,
why would you not want to use those?

222
00:11:14.244 --> 00:11:17.946
And they'd say, well, I'm using them
because you can do shift and non-shift.

223
00:11:17.946 --> 00:11:19.765
And I go, okay, well, I mean if
you have a million items in there,

224
00:11:19.765 --> 00:11:20.394
do you still use them?

225
00:11:20.394 --> 00:11:21.637
And they go, yeah, why not?

226
00:11:21.637 --> 00:11:25.185
And I know for a fact they haven't thought
about the fact, that when you remove or

227
00:11:25.185 --> 00:11:28.278
add to the front, you are fundamentally
having to shift everything.

228
00:11:28.278 --> 00:11:32.000
I want to hear these words out of their
mouth because it is very, very important,

229
00:11:32.000 --> 00:11:34.546
you understand what you do and
aren't doing, right?

230
00:11:34.546 --> 00:11:36.626
I don't care that you don't
know how to implement.

231
00:11:36.626 --> 00:11:38.266
Who cares you don't know
how to implement it?

232
00:11:38.266 --> 00:11:41.684
You just have to understand that there
is a cost at some point in the system.

