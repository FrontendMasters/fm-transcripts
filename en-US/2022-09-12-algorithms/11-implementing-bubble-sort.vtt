WEBVTT

1
00:00:00.120 --> 00:00:00.820
So there you go.

2
00:00:00.820 --> 00:00:03.600
So that is the running
time of Bubble sort.

3
00:00:03.600 --> 00:00:06.904
And I'm very thankful that a third grader,
who makes me feel stupid,

4
00:00:06.904 --> 00:00:10.680
actually was able to solve this for
me cuz now I have the value right here.

5
00:00:10.680 --> 00:00:13.950
And of course, you know what we can do?

6
00:00:13.950 --> 00:00:14.930
We can implement this.

7
00:00:14.930 --> 00:00:17.560
And I think we should implement
it because it's so dang simple.

8
00:00:17.560 --> 00:00:21.355
And it'll also be your first sorting
algorithm which anyone doing an algorithms

9
00:00:21.355 --> 00:00:24.190
class has to at least implement
one sorting algorithm.

10
00:00:24.190 --> 00:00:27.540
So I do expect everyone to open up
their editor immediately, okay?

11
00:00:27.540 --> 00:00:29.120
You don't have to, I mean,
you don't have to.

12
00:00:29.120 --> 00:00:32.370
But let's look up the bubble sort,
up and up bubble sort and

13
00:00:32.370 --> 00:00:35.880
it comes with an array and of course,
a sort in place algorithm.

14
00:00:36.890 --> 00:00:40.330
So hopefully everyone can do this,
follow along.

15
00:00:40.330 --> 00:00:42.260
So again remember our algorithm.

16
00:00:42.260 --> 00:00:46.200
We need to be able to translate
the ideas in our head into code.

17
00:00:46.200 --> 00:00:51.044
So what I'm gonna do is I'm gonna create
another one of these, and let's just kinda

18
00:00:51.044 --> 00:00:54.882
think about it in the abstract terms,
we have an array from 0 to N.

19
00:00:54.882 --> 00:01:01.062
And we need to start at 0 and go up to,
but not including N or (N- 1),

20
00:01:01.062 --> 00:01:06.570
because of course we're gonna take i and
compare it to i + 1.

21
00:01:06.570 --> 00:01:08.190
So we don't wanna go off the array.

22
00:01:08.190 --> 00:01:10.090
If we are using a more
traditional language and

23
00:01:10.090 --> 00:01:11.610
you went off the array what happens?

24
00:01:12.750 --> 00:01:15.100
Array out of bounds
exception if you're in Java?

25
00:01:15.100 --> 00:01:18.414
That's I think what I had the program is,
if you're in C++, you have yourself

26
00:01:18.414 --> 00:01:21.222
I don't know what happens but
things happen if you go off the array.

27
00:01:21.222 --> 00:01:23.814
So we don't wanna do that,
I don't wanna be reading HTML here,

28
00:01:23.814 --> 00:01:25.420
htat's the hackers language.

29
00:01:25.420 --> 00:01:29.576
And so what we want to do is go up
to this, we want to go up to but

30
00:01:29.576 --> 00:01:31.170
not including N- 1.

31
00:01:31.170 --> 00:01:33.650
Okay, so that seems pretty easy, right?

32
00:01:33.650 --> 00:01:39.690
So we're gonna go for i up to say n,
right, that's our thing.

33
00:01:39.690 --> 00:01:41.400
We need to do this n times, right?

34
00:01:41.400 --> 00:01:45.183
We got to keep on bringing
that number down until 0, and

35
00:01:45.183 --> 00:01:49.692
that means our inner loop needs to
be the one that's actually gonna

36
00:01:49.692 --> 00:01:52.847
be doing the special magic and
doing all that.

37
00:01:52.847 --> 00:01:57.529
So it needs to go up to n -1 but
remember every single time we do a loop

38
00:01:57.529 --> 00:02:03.600
the last item becomes sorted so
we can also minus i, does that make sense?

39
00:02:03.600 --> 00:02:08.598
We keep getting progressively smaller as
we go for the 0 with case, we go up to n-

40
00:02:08.598 --> 00:02:13.314
1 for the first case, we go to n- 2 for
the second case, we go to n- 3 etc.

41
00:02:13.314 --> 00:02:18.019
And from that point, the only thing we
have to do is do a simple comparison,

42
00:02:18.019 --> 00:02:18.550
right?

43
00:02:21.360 --> 00:02:27.124
If the array i is greater than array j,
swap,

44
00:02:27.124 --> 00:02:34.730
right, (i,
j) that's really all we have to do, right?

45
00:02:34.730 --> 00:02:36.880
I mean,
that's the extent of the algorithm.

46
00:02:36.880 --> 00:02:38.970
It's extremely simple algorithm.

47
00:02:38.970 --> 00:02:39.590
There we go.

48
00:02:39.590 --> 00:02:42.940
Obviously, when we write this out,
this will be a little bit bigger.

49
00:02:42.940 --> 00:02:45.730
All right, so
let's just write that thing out.

50
00:02:45.730 --> 00:02:47.300
We have the idea in our head.

51
00:02:47.300 --> 00:02:51.515
So of course we always do, I'm positive
all the JavaScript people aren't used to

52
00:02:51.515 --> 00:02:55.742
writing out four loops, raw four loops,
I think I've seen it called on Twitter.

53
00:02:55.742 --> 00:02:58.816
But this is just what you
gotta do in the real world,

54
00:02:58.816 --> 00:03:00.900
you gotta write these four loops.

55
00:03:00.900 --> 00:03:04.230
So let's go here,
let's do an i and j loop.

56
00:03:04.230 --> 00:03:05.610
Awesome, so hopefully everyone has that.

57
00:03:05.610 --> 00:03:09.150
Now we neither do something
with the j loop remember.

58
00:03:09.150 --> 00:03:12.303
We gotta up too but
not include also the last element at

59
00:03:12.303 --> 00:03:17.297
the first iteration cuz we're gonna do
a plus 1, remember that so let's minus 1.

60
00:03:17.297 --> 00:03:22.223
Then remember every single time we execute
the last element becomes the largest

61
00:03:22.223 --> 00:03:26.203
element we don't need to redo that so
we're also gonna minus i.

62
00:03:26.203 --> 00:03:28.330
Does that make sense?

63
00:03:28.330 --> 00:03:32.415
There we go, we've now translated
this code into this code,

64
00:03:32.415 --> 00:03:36.380
it's just a little bit more mechanical,
not too bad.

65
00:03:36.380 --> 00:03:42.173
So if array j is greater than array
(j + 1) well, now we need to swap,

66
00:03:42.173 --> 00:03:47.003
swapping always not all that
bad const temp equals array j,

67
00:03:47.003 --> 00:03:53.710
whatever your first line is you just
repeat array j equals array (j + 1).

68
00:03:53.710 --> 00:03:57.000
Copy that and go array j + 1 temp.

69
00:03:57.000 --> 00:03:58.160
There you go.

70
00:03:58.160 --> 00:03:59.270
Simple swap, right?

71
00:03:59.270 --> 00:04:02.220
I should have just created
a function that anyone could use.

72
00:04:02.220 --> 00:04:07.284
I don't know why didn't you just have
to write it yourself, there we go.

73
00:04:07.284 --> 00:04:12.225
And now this should be effectively
Bubble sort so I jumped back here and

74
00:04:12.225 --> 00:04:14.670
pxjest bubble Michael bubble 8.

75
00:04:14.670 --> 00:04:19.058
That would have been so much if I should
have called the file Michael Bubble I'd

76
00:04:19.058 --> 00:04:20.795
have been great, there we go.

77
00:04:20.795 --> 00:04:23.240
And so now we've just written Bubblesort,

78
00:04:23.240 --> 00:04:27.534
it's really not all that hard this is
an extremely simple algorithm to be able

79
00:04:27.534 --> 00:04:31.580
to do, you should just be able to do
this first try for the most part.

80
00:04:31.580 --> 00:04:34.260
I mean, I just did it first try so
everyone can do it first try, right?

81
00:04:34.260 --> 00:04:37.530
But I mean, if you really think about it's
actually a very concrete simple algorithm.

82
00:04:37.530 --> 00:04:39.660
It's probably simpler than binary search.

83
00:04:39.660 --> 00:04:41.147
In all technical perspective,

84
00:04:41.147 --> 00:04:45.360
binary search is significantly harder than
this array or than this sorting problem.

85
00:04:45.360 --> 00:04:46.750
We did it, awesome.

86
00:04:46.750 --> 00:04:49.580
Your first sorting algorithm,
how does it feel?

87
00:04:49.580 --> 00:04:52.180
Is everyone pretty excited about
their first sorting algorithm?

88
00:04:53.350 --> 00:04:54.505
Hello, I'm excited.

89
00:04:55.588 --> 00:05:00.723
All right, there are other sorting
strategies I want to talk about but

90
00:05:00.723 --> 00:05:04.641
sorting algorithms are gonna
deal with recursion and

91
00:05:04.641 --> 00:05:07.810
I haven't recovered recursion yet.

92
00:05:07.810 --> 00:05:11.341
And so until I cover recursion, I don't
want to go into that because I want to

93
00:05:11.341 --> 00:05:13.010
make sure everybody is on the same.

94
00:05:13.010 --> 00:05:16.092
And page when it comes to recursion
because the problem with recursion is

95
00:05:16.092 --> 00:05:17.102
recursion of course and

96
00:05:17.102 --> 00:05:20.930
you don't really understand it until you
completely understand it or feel like.

97
00:05:20.930 --> 00:05:24.760
I felt completely lost and then all sudden
I felt like I understood it completely.

98
00:05:24.760 --> 00:05:27.480
There's no middle ground, I felt like,
it's not less sort of understanding.

99
00:05:27.480 --> 00:05:28.920
Now, it's just either get it or don't.

100
00:05:28.920 --> 00:05:30.270
It's a very painful concept.

101
00:05:30.270 --> 00:05:35.734
All right, any questions I've
only ever had to implement

102
00:05:35.734 --> 00:05:41.270
a sorting algorithm one time,
so very very rarely.

103
00:05:41.270 --> 00:05:45.390
&gt;&gt; Since we are comparing each element of
an array with another element of an array?

104
00:05:45.390 --> 00:05:47.307
It's kind of n square but

105
00:05:47.307 --> 00:05:53.204
I just didn't understand that n into
n + 1 by 2, how did we came up with.

106
00:05:53.204 --> 00:05:53.769
&gt;&gt; Yes.

107
00:05:53.769 --> 00:05:54.551
&gt;&gt; Come up to that.

108
00:05:54.551 --> 00:05:59.477
&gt;&gt; So the first part of your question
was we're comparing two elements of

109
00:05:59.477 --> 00:06:01.658
an array so that's n squared.

110
00:06:01.658 --> 00:06:06.887
But how did I come up with that formula
and all that, I can go over one more time.

111
00:06:06.887 --> 00:06:11.751
So remember so that's why I did the very
fundamental thing, when you access

112
00:06:11.751 --> 00:06:15.934
an array what is the runtime of
accessing an element in the array.

113
00:06:15.934 --> 00:06:21.270
Is that fixed computational cost so it's
of one right, every time we access of one.

114
00:06:21.270 --> 00:06:25.544
So if we access an array twice,
it's just two constant right, so

115
00:06:25.544 --> 00:06:29.834
this all constant operations,
everything in here is constant.

116
00:06:29.834 --> 00:06:32.540
So this part of the operation is constant,

117
00:06:32.540 --> 00:06:36.310
nothing in there is based on
input size it's all constant.

118
00:06:36.310 --> 00:06:41.442
It's really just these two that cause
the squared algorithm because we're going

119
00:06:41.442 --> 00:06:45.822
over the length of the array and every
time we go over it we go over some or

120
00:06:45.822 --> 00:06:48.971
most of the array every single time so
we go over n.

121
00:06:48.971 --> 00:06:53.660
And so now how does this thing
we can go back to this proof.

122
00:06:53.660 --> 00:06:57.230
So I'll just kind of go back to
the simple version of it all?

123
00:06:58.410 --> 00:07:02.531
Remember, I'll just kind of re-explain it
just because the reality is we're doing

124
00:07:02.531 --> 00:07:05.050
nothing different than
summing all the values.

125
00:07:05.050 --> 00:07:09.402
Cuz if you think about it, we're gonna
run n times the first time, actually

126
00:07:09.402 --> 00:07:14.245
well technically the first time we run n-1
amount of iterations through the loop.

127
00:07:14.245 --> 00:07:18.974
If you look at the code we're running
the very first time we were running n-1

128
00:07:18.974 --> 00:07:20.074
amount of times.

129
00:07:20.074 --> 00:07:24.582
The next time we run n- 2 because i
becomes 1, we subtract that off also.

130
00:07:24.582 --> 00:07:26.517
The next time we run n- 3 and

131
00:07:26.517 --> 00:07:30.316
we keep doing this all the way
until we get to 1, right.

132
00:07:30.316 --> 00:07:34.367
So if we sum all these numbers up
the way to be able to sum this

133
00:07:34.367 --> 00:07:37.700
of course is via that
formula that I showed you.

134
00:07:37.700 --> 00:07:41.670
And so that's how many literal
steps we're going to take.

135
00:07:41.670 --> 00:07:46.060
And so there you go, we could replace
this technically with n- 1, right,

136
00:07:46.060 --> 00:07:49.200
n- 1 multiplied by n- 1, plus 1, right?

137
00:07:49.200 --> 00:07:50.970
I did a bad job.

138
00:07:50.970 --> 00:07:55.080
But again, yes, there's still gonna be
an n squared somewhere in there, right?

139
00:07:55.080 --> 00:07:59.490
Like if you just use FOIL, you'll see
that n squares eventually, there you go.

140
00:07:59.490 --> 00:08:04.110
You have it so, the actual real running
time is n squared minus n over 2 and then

141
00:08:04.110 --> 00:08:08.956
break that all off because insignificant
factors all that it's still n squared.

142
00:08:08.956 --> 00:08:10.180
Does that make sense?

143
00:08:11.290 --> 00:08:15.720
So nothing really changes,
I just tried to keep it pretty simple.

144
00:08:17.640 --> 00:08:21.876
All right, I think it's a good
time to move forward, right?

145
00:08:21.876 --> 00:08:22.890
We've got one more question.

146
00:08:24.300 --> 00:08:27.376
&gt;&gt; What's a good sorting algorithm for
immutable arrays,

147
00:08:27.376 --> 00:08:31.130
I assume all allocations for
Bubbles would be deadly.

148
00:08:31.130 --> 00:08:34.295
&gt;&gt; Well, the thing is that if
you create an immutable array,

149
00:08:34.295 --> 00:08:37.848
you have to come to it with
the fundamental understanding that you

150
00:08:37.848 --> 00:08:41.930
are creating an exceptionally
poor performing data structure.

151
00:08:41.930 --> 00:08:45.997
Immutability is supposed to
come with the ease of use, but

152
00:08:45.997 --> 00:08:50.110
it comes at the cost of space and
replicating space.

153
00:08:50.110 --> 00:08:53.530
And so yes, it's big computers
are extremely fast at mem copy, but

154
00:08:53.530 --> 00:08:56.600
that means you're doing
an operations over and over again.

155
00:08:56.600 --> 00:08:59.935
So if you were to literally do that
the worst case scenario is that you

156
00:08:59.935 --> 00:09:03.971
have a reverse sorted array and you try to
bubble up that means every single time you

157
00:09:03.971 --> 00:09:07.153
did that you'd have to bubble
which means you'd have to copy n.

158
00:09:07.153 --> 00:09:09.592
So it'd be somewhere in the n
cubed if not higher and

159
00:09:09.592 --> 00:09:13.750
I'd have to think about that but it'd
be a very poorly performing algorithm.

160
00:09:13.750 --> 00:09:18.102
I also would never use immutability and
sorting in the same sentence cuz that

161
00:09:18.102 --> 00:09:21.302
just seems like it's a terrible idea for
performance.

162
00:09:21.302 --> 00:09:22.420
&gt;&gt; You look chunk.

163
00:09:22.420 --> 00:09:25.370
&gt;&gt; Yeah,
your computer would chunk really hard.

