WEBVTT

1
00:00:00.038 --> 00:00:03.628
So let's go back to our Kata machine and
let's go down to Dijkstra's.

2
00:00:03.628 --> 00:00:05.330
So this is a DijkstraList.

3
00:00:05.330 --> 00:00:09.406
It looks like we're gonna be using
an adjacency list, how great is that, and

4
00:00:09.406 --> 00:00:10.417
we have to do this.

5
00:00:10.417 --> 00:00:12.553
Yes, I have built this before.

6
00:00:12.553 --> 00:00:16.551
This is not like I'm gonna come up here
and just do this for the first time,

7
00:00:16.551 --> 00:00:18.238
that would be just silly of me.

8
00:00:18.238 --> 00:00:22.764
So we can use this as kind
of our general guide, right?

9
00:00:22.764 --> 00:00:26.771
But we do need to implement a couple
things, right, which you can imagine has

10
00:00:26.771 --> 00:00:30.301
unvisited, is gonna be something
we're gonna need to implement.

11
00:00:30.301 --> 00:00:35.744
And also get lowest unvisited is also
something we're gonna need to implement.

12
00:00:35.744 --> 00:00:40.687
Now, something I am gonna do is I'm
going to intentionally implement it not

13
00:00:40.687 --> 00:00:41.623
the fastest.

14
00:00:41.623 --> 00:00:45.388
So for all the people in the chat,
they're gonna be like, [SOUND].

15
00:00:45.388 --> 00:00:48.005
Don't do that, let it go, okay?

16
00:00:48.005 --> 00:00:51.576
That way, everyone can enjoy
the beautiful surprise at the end.

17
00:00:51.576 --> 00:00:55.223
So of course, the first thing
we need is a seen list again.

18
00:00:55.223 --> 00:00:58.392
Cuz again, you don't have a seen list if
you use the right data structure, but

19
00:00:58.392 --> 00:01:00.761
in this case,
we aren't using the right data structure.

20
00:01:00.761 --> 00:01:04.851
New array is going to be,
of course, the arrays length.

21
00:01:04.851 --> 00:01:08.648
It's an adjacency list, which means it
represents each one of the nodes and

22
00:01:08.648 --> 00:01:10.380
their connection to other nodes.

23
00:01:10.380 --> 00:01:16.100
So array length fill(false),
awesome, seen(source).

24
00:01:16.100 --> 00:01:18.995
We don't even need to do that,
we'll do it in the algorithm, awesome.

25
00:01:18.995 --> 00:01:27.686
Then we need to go const dist = new
Array(arr.length.fill(infinity), right?

26
00:01:27.686 --> 00:01:29.738
That means it's just super large number,
right?

27
00:01:29.738 --> 00:01:33.186
It's unreachable from this point,
you don't have to use infinity.

28
00:01:33.186 --> 00:01:36.903
But for checking sake, and
maybe this is a really large graph that

29
00:01:36.903 --> 00:01:40.974
generates a really large value,
best probably use infinity, right?

30
00:01:40.974 --> 00:01:46.816
All right, so
let's go dists[source] = 0, right?

31
00:01:46.816 --> 00:01:49.400
This is the smallest distance possible.

32
00:01:49.400 --> 00:01:53.638
We're already at the source,
therefore awesome, all right?

33
00:01:53.638 --> 00:01:55.258
We don't know any other distance yet.

34
00:01:55.258 --> 00:01:59.917
We just simply know the distance to
the source, which is always going to be 0.

35
00:01:59.917 --> 00:02:02.138
And so now, of course,
we do the greatest thing ever.

36
00:02:02.138 --> 00:02:06.500
Let's create a,
we don't actually have to create it.

37
00:02:06.500 --> 00:02:08.604
We'll do the Lord's loop, a do while.

38
00:02:08.604 --> 00:02:10.518
Now, we don't have to use a do while.

39
00:02:10.518 --> 00:02:12.478
In fact, I'm not gonna use
the Lord's loop for this one,

40
00:02:12.478 --> 00:02:13.767
we're actually just gonna use this.

41
00:02:13.767 --> 00:02:18.048
Remember we had two functions in here and
I intentionally made them into functions,

42
00:02:18.048 --> 00:02:20.168
hasUnvisited and getLowestUnvisited.

43
00:02:20.168 --> 00:02:23.080
And the reason why I did that is I wanna
hide the data structure that is better.

44
00:02:23.080 --> 00:02:29.527
So we will go like this, hasUnvisited, and
I'm gonna pass in seen, scenery, right?

45
00:02:29.527 --> 00:02:30.288
Sounds good?

46
00:02:30.288 --> 00:02:34.932
We could technically also pass a dists
array, and so that way it's unseen, but

47
00:02:34.932 --> 00:02:36.610
it's distances infinity.

48
00:02:36.610 --> 00:02:39.412
Then we go, hey, we can't see this thing.

49
00:02:39.412 --> 00:02:40.374
So that makes sense?

50
00:02:40.374 --> 00:02:44.766
All right,
then we also need to get current,

51
00:02:44.766 --> 00:02:49.747
which is going to be getLowestUnvisited,
right?

52
00:02:49.747 --> 00:02:52.621
And that will be seen and dists again.

53
00:02:52.621 --> 00:02:55.845
All right, so we need to implement
these two based on the data

54
00:02:55.845 --> 00:02:58.258
structures we have
currently chosen to use.

55
00:02:58.258 --> 00:03:01.581
So let's go up here and
go function hasUnvisited,

56
00:03:01.581 --> 00:03:04.690
it's gonna take in a Boolean array,
correct?

57
00:03:04.690 --> 00:03:12.445
Yes okay,
awesome scene is gonna be a Boolean array.

58
00:03:12.445 --> 00:03:15.989
I always sometimes confuse it with
the chicken square, which is boiling,

59
00:03:15.989 --> 00:03:16.787
don't do that.

60
00:03:16.787 --> 00:03:19.957
All right, so seen array,
and then of course dists,

61
00:03:19.957 --> 00:03:22.717
which is going to be a number array,
correct?

62
00:03:22.717 --> 00:03:26.285
Awesome, and
let's do a Boolean right here.

63
00:03:26.285 --> 00:03:28.896
A boiling, we're gonna get
some chicken juices in here.

64
00:03:28.896 --> 00:03:30.778
All right, so we have that one.

65
00:03:30.778 --> 00:03:37.212
And then let's also do getLowestUnvisited,
again, exact same stuff.

66
00:03:37.212 --> 00:03:40.099
And we're going to need to return
something out this time though.

67
00:03:40.099 --> 00:03:46.858
We're gonna want to return out our index
that is the slowest unvisited item.

68
00:03:46.858 --> 00:03:51.059
All right, we're going to assume in
this function that if we're calling it,

69
00:03:51.059 --> 00:03:51.770
there is 1.

70
00:03:51.770 --> 00:03:52.701
Make sense?

71
00:03:52.701 --> 00:03:54.921
Awesome, great, good, let's go.

72
00:03:54.921 --> 00:03:58.848
So hasUnvisited,
this should be pretty easy, has = false.

73
00:03:58.848 --> 00:03:59.958
Look at that, it's has.

74
00:03:59.958 --> 00:04:05.173
Why not, for( let i =0,
i has to be less than seen.

75
00:04:05.173 --> 00:04:08.484
Actually, you know what,
we finally have a chance to do this.

76
00:04:08.484 --> 00:04:13.121
Let's go, seen.some,
whether it's true or not,

77
00:04:13.121 --> 00:04:16.117
whether it's seen and its index.

78
00:04:16.117 --> 00:04:20.788
So if it's not seen and it's dist,

79
00:04:20.788 --> 00:04:24.377
it's less than infinity.

80
00:04:24.377 --> 00:04:26.326
I believe that should work.

81
00:04:26.326 --> 00:04:27.698
I always forget about infinity.

82
00:04:27.698 --> 00:04:34.488
Let's try this,
node is infinity less than infinity.

83
00:04:34.488 --> 00:04:38.073
[SOUND] It's not less than infinity, good.

84
00:04:38.073 --> 00:04:41.509
So if this thing is less than infinity,
we should be good, right?

85
00:04:41.509 --> 00:04:43.907
That number is obviously
less than infinity, perfect.

86
00:04:43.907 --> 00:04:46.407
Okay, we found something that does work,
perfect.

87
00:04:46.407 --> 00:04:49.555
I'm glad they didn't be like,
well ,what's your LF of your infinity?

88
00:04:49.555 --> 00:04:52.445
I'm glad we don't have to deal with that
cuz that would have been harder to do.

89
00:04:52.445 --> 00:04:56.696
So there we go, we have our unvisited,
we're gonna visit every single scene, and

90
00:04:56.696 --> 00:05:00.660
see is there something that's false and
its distance is less than infinity.

91
00:05:00.660 --> 00:05:05.112
Perfect, so now let's go like this,

92
00:05:05.112 --> 00:05:08.320
idx = 0 or we'll go -1.

93
00:05:08.320 --> 00:05:15.324
And we'll go let lowestDistance =,
gosh, let's do infinity.

94
00:05:15.324 --> 00:05:16.564
Yeah, look at that infinity.

95
00:05:16.564 --> 00:05:21.355
So now we're gonna walk through
all of our distances and see,

96
00:05:21.355 --> 00:05:26.534
hey, what is the lowest distance,
and it has to be an unseen node.

97
00:05:26.534 --> 00:05:27.514
Makes sense?

98
00:05:27.514 --> 00:05:30.400
Awesome, for let i = 0,

99
00:05:30.400 --> 00:05:35.399
i have to be less than seen.length, ++i.

100
00:05:35.399 --> 00:05:42.707
If we've already seen this one,
well, we can kinda continue, yeah?

101
00:05:42.707 --> 00:05:44.761
Yeah, awesome, good.

102
00:05:44.761 --> 00:05:45.984
Great answer everybody.

103
00:05:45.984 --> 00:05:50.509
If dists[i] is less than infinity,
and, well,

104
00:05:50.509 --> 00:05:54.099
actually we don't even need to do that.

105
00:05:54.099 --> 00:05:56.484
We kinda make the assumption
that no matter,

106
00:05:56.484 --> 00:06:00.020
what when we're calling this function,
this above case is true.

107
00:06:00.020 --> 00:06:03.255
Therefore, this case will eventually
happen, it will always be true.

108
00:06:03.255 --> 00:06:09.337
So if lowest distance is greater than,
if it's greater than this distance,

109
00:06:09.337 --> 00:06:14.964
we have found a distance that is smaller,
so we're gonna use that one.

110
00:06:14.964 --> 00:06:17.925
So lowestDistance = dists[i].

111
00:06:17.925 --> 00:06:20.945
Fantastic, let's do this.

112
00:06:20.945 --> 00:06:21.955
And at that point,

113
00:06:21.955 --> 00:06:25.313
all we need to do is return out
the index in which that happened.

114
00:06:25.313 --> 00:06:29.198
So index = i,
that's the lowest index, right?

115
00:06:29.198 --> 00:06:30.979
We return out the lowest index.

116
00:06:30.979 --> 00:06:33.819
Fantastic, we found it,
we found the one that's gonna do that.

117
00:06:33.819 --> 00:06:39.441
Again, we walk through every single one of
these and then return out the lowest one.

118
00:06:39.441 --> 00:06:43.980
All right, so now we're at this beautiful
point, we've implemented these two.

119
00:06:43.980 --> 00:06:47.830
So now the only thing left we have
to do is do the rest of this stuff,

120
00:06:47.830 --> 00:06:49.236
which isn't too hard.

121
00:06:49.236 --> 00:06:52.865
We need to say to the seen,
we need to go through every single edge.

122
00:06:52.865 --> 00:06:56.676
Long as we haven't seen this edge,
we calculate the distance,

123
00:06:56.676 --> 00:07:00.628
we technically don't even need to
do this haven't seen the edge,

124
00:07:00.628 --> 00:07:04.532
because we will be able to use
the distance formula to not update.

125
00:07:04.532 --> 00:07:06.599
Either way, it doesn't really matter.

126
00:07:06.599 --> 00:07:10.526
If we haven't seen this edge,
we'll calculate its distance,

127
00:07:10.526 --> 00:07:14.248
which is based on my distance
plus the distance to that edge.

128
00:07:14.248 --> 00:07:18.874
If it's less than its best known distance,
we're gonna push both the previous and

129
00:07:18.874 --> 00:07:20.738
the dists array with new values.

130
00:07:20.738 --> 00:07:22.498
Sounds good?

131
00:07:22.498 --> 00:07:27.596
Great, all right, so seen[curr] = true.

132
00:07:27.596 --> 00:07:30.764
We have now officially seen this,
isn't it just beautiful?

133
00:07:30.764 --> 00:07:31.938
Are we just happy we've seen this?

134
00:07:31.938 --> 00:07:33.422
It's like Top Gun, it's super good.

135
00:07:33.422 --> 00:07:36.370
Actually I haven't seen Top Gun,
I'm really excited to see it.

136
00:07:36.370 --> 00:07:39.538
All right, so now we need to
go through every single edge.

137
00:07:39.538 --> 00:07:41.858
I forget, what are we using for
edges in here?

138
00:07:41.858 --> 00:07:46.279
We are using a weighted adjacency list,
which, of course, can be a 2D graph edge.

139
00:07:46.279 --> 00:07:49.306
So let's go here and

140
00:07:49.306 --> 00:07:53.942
go const adjs =, is it graph?

141
00:07:53.942 --> 00:07:55.531
What did I call this thing?

142
00:07:55.531 --> 00:07:58.897
Array, terrible naming.

143
00:07:58.897 --> 00:08:03.024
All right, so this should be able
to give us the list of our edges.

144
00:08:03.024 --> 00:08:05.507
So now we can go through each edge.

145
00:08:05.507 --> 00:08:10.460
Let i = 0,
i has to be less than adjs.length: ++ i.

146
00:08:10.460 --> 00:08:13.293
Let's go, and
now we can grab out the edge.

147
00:08:13.293 --> 00:08:18.754
So first, if seen edge,
const edge = adjs[i],

148
00:08:18.754 --> 00:08:25.875
so if edge.to, if we've seen this one,
we're gonna continue.

149
00:08:25.875 --> 00:08:27.486
Wow, that was good spelling.

150
00:08:27.486 --> 00:08:30.387
Please tell me you like that spelling,
that was.

151
00:08:30.387 --> 00:08:32.825
All right, so
now we need to calculate its distance.

152
00:08:32.825 --> 00:08:37.006
Remember its distance isn't just
simply the weight of the edge, but

153
00:08:37.006 --> 00:08:39.831
it's the weight of
the edge plus my distance.

154
00:08:39.831 --> 00:08:44.308
So from the source,
everything has a 0 plus their weight.

155
00:08:44.308 --> 00:08:47.140
Then we see the next closest one and
we adjust all the weights,

156
00:08:47.140 --> 00:08:49.827
then we see the next closest one,
adjust all the weights.

157
00:08:49.827 --> 00:08:50.770
So let's see what we got here.

158
00:08:50.770 --> 00:08:56.845
So we go dist = dists
from our current item,

159
00:08:56.845 --> 00:09:00.302
plus the edge.weight.

160
00:09:00.302 --> 00:09:03.673
That is the dist to this
node from the node we're at.

161
00:09:03.673 --> 00:09:05.027
Make sense?

162
00:09:05.027 --> 00:09:09.956
And so
if this dist is less than the known dists

163
00:09:09.956 --> 00:09:13.992
of the edge, then we need to update.

164
00:09:13.992 --> 00:09:20.187
So we can just go dists[edge.to]
equals the new smaller disk,

165
00:09:20.187 --> 00:09:25.377
and our previous edge.to has
a new parent of current.

166
00:09:25.377 --> 00:09:27.729
Don't I have to call it pre,
what did I call it?

167
00:09:27.729 --> 00:09:29.067
I didn't even do a previous.

168
00:09:29.067 --> 00:09:30.827
How are you gonna know our way back?

169
00:09:30.827 --> 00:09:35.603
We won't, man.

170
00:09:35.603 --> 00:09:40.708
All right, there we go, and
that should really be the end of it.

171
00:09:40.708 --> 00:09:45.366
We'll keep going until we
have nothing left to look at.

172
00:09:45.366 --> 00:09:49.139
Every single time we pop something off,
we mark it as seen,

173
00:09:49.139 --> 00:09:52.616
update the possible shortest
distance that is known.

174
00:09:52.616 --> 00:09:54.681
And then just do that over and over again,

175
00:09:54.681 --> 00:09:57.161
getting the lowest possible
distance each time.

176
00:09:57.161 --> 00:10:02.231
All right, so now all we have left is
to just walk our distance backwards and

177
00:10:02.231 --> 00:10:03.206
we're done.

178
00:10:03.206 --> 00:10:07.307
Again, let me look at the return,
my goodness, look at this, I'm a genius.

179
00:10:07.307 --> 00:10:10.028
This time we actually just
simply did a number array.

180
00:10:10.028 --> 00:10:14.120
So as long as there is a pathway
from our source node to our sink,

181
00:10:14.120 --> 00:10:16.680
we'll have an array with values in it.

182
00:10:16.680 --> 00:10:20.294
If there's not,
it's just an empty array, fantastic.

183
00:10:20.294 --> 00:10:21.651
It's almost as if I've updated this.

184
00:10:21.651 --> 00:10:23.569
Okay, yeah,
that's the only error, perfect.

185
00:10:23.569 --> 00:10:25.743
So let's do that one more time.

186
00:10:25.743 --> 00:10:27.259
Again, exact same thing.

187
00:10:27.259 --> 00:10:32.642
const out is a number array and
it's an empty array.

188
00:10:32.642 --> 00:10:35.872
Let current equals our needle,
or, in this case,

189
00:10:35.872 --> 00:10:38.663
I called it our sink,
where we want to go to.

190
00:10:38.663 --> 00:10:41.224
And now,
we do that same while loop one last time.

191
00:10:41.224 --> 00:10:45.662
While previous current does not equal -1,

192
00:10:45.662 --> 00:10:50.109
push it into our path, out.push[curr].

193
00:10:50.109 --> 00:10:55.694
And then update our current to
the parent that got us to this point,

194
00:10:55.694 --> 00:10:57.706
curr = prev[curr].

195
00:10:57.706 --> 00:11:01.159
All right, there we go, we're just
walking one parent back at a time.

196
00:11:01.159 --> 00:11:04.606
Remember, the previous is who was
the last person to update our

197
00:11:04.606 --> 00:11:06.696
distance to the shortest known path.

198
00:11:06.696 --> 00:11:09.910
At this point, we need to do
the exact same trick we did before.

199
00:11:09.910 --> 00:11:12.558
We don't include the source
in this kind of roll up, so

200
00:11:12.558 --> 00:11:16.484
we're gonna have to do [source].concat,
of course, with something else.

201
00:11:16.484 --> 00:11:22.220
Or if we wanna be a little cheeky about
it, we could always do one of these,

202
00:11:22.220 --> 00:11:27.046
out.push(source), and
then just simply out.reverse.

203
00:11:27.046 --> 00:11:29.699
Look at that, a little different
this time, kinda fun to do.

204
00:11:29.699 --> 00:11:33.056
It's always good to change things up,
because that way if you get it wrong,

205
00:11:33.056 --> 00:11:36.045
you can always blame it on the fact
that you changed up live as opposed

206
00:11:36.045 --> 00:11:37.476
to just sticking to the script.

207
00:11:37.476 --> 00:11:40.718
All right, awesome, this is a lot of code?

208
00:11:40.718 --> 00:11:45.083
We did 63 lines of code,
including whitespace.

209
00:11:45.083 --> 00:11:47.389
And so let's see,
did we actually get this thing right?

210
00:11:47.389 --> 00:11:57.364
npx jest Dij How was that?

211
00:11:57.364 --> 00:11:59.588
It feels good, I'm not gonna lie to you,
that feels good.

