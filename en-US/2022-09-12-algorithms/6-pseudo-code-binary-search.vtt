WEBVTT

1
00:00:00.400 --> 00:00:02.840
So this is binary search,
greatest algorithm ever.

2
00:00:02.840 --> 00:00:07.100
So now that we've kind of written it
on a whiteboard, we could implement it.

3
00:00:07.100 --> 00:00:08.547
But first, what I'm going to do is,

4
00:00:08.547 --> 00:00:11.140
I'm going to probably do it
a little bit nicer this time.

5
00:00:11.140 --> 00:00:15.565
Let's try to do it and do it in a sense
that makes it easier to translate to code,

6
00:00:15.565 --> 00:00:16.247
all right?

7
00:00:16.247 --> 00:00:19.522
So let's think about it more in
kind of a pseudocode type sense.

8
00:00:19.522 --> 00:00:22.739
We know we're gonna have the array,
we know we're gonna look on either side,

9
00:00:22.739 --> 00:00:23.970
we know we're gonna do this.

10
00:00:23.970 --> 00:00:25.890
So let's do this a little bit better.

11
00:00:25.890 --> 00:00:30.099
So if we think about it,
we could have a function that has search,

12
00:00:30.099 --> 00:00:34.396
that takes in an array, and
maybe it has a lo and it has a hi, right?

13
00:00:34.396 --> 00:00:38.081
This is the space in which
you need to look into, right?

14
00:00:38.081 --> 00:00:39.880
That makes sense.

15
00:00:39.880 --> 00:00:41.935
And so, what we could do is,

16
00:00:41.935 --> 00:00:47.000
we could do a loop until some
sort of condition happens, right?

17
00:00:47.000 --> 00:00:48.710
What would be a good
condition that would happen?

18
00:00:48.710 --> 00:00:50.010
Does anyone have an idea?

19
00:00:50.010 --> 00:00:51.740
&gt;&gt; Comparing to the low rhythm.

20
00:00:51.740 --> 00:00:56.024
&gt;&gt; Yeah, exactly, when the low and
the high effectively become each other,

21
00:00:56.024 --> 00:00:57.370
we're done, right?

22
00:00:57.370 --> 00:01:01.390
Because that means we've halved their
space to the point where we can no

23
00:01:01.390 --> 00:01:02.806
longer halve our space.

24
00:01:02.806 --> 00:01:05.222
So that's a good thing to kinda remember,
conditions always.

25
00:01:05.222 --> 00:01:08.783
But let's just kind of walk over
this in a more practical sense.

26
00:01:08.783 --> 00:01:14.143
So if we start here, what we need to do is
we need to go from our low to our high and

27
00:01:14.143 --> 00:01:15.798
find the middle point.

28
00:01:15.798 --> 00:01:16.925
All right, so that's pretty easy.

29
00:01:16.925 --> 00:01:19.130
Let's just write some pseudocode,
all right.

30
00:01:19.130 --> 00:01:26.230
Midpoint, simply is going to
be lo+(hi-lo) divided by 2 and

31
00:01:26.230 --> 00:01:30.240
the flow of that operation, right?

32
00:01:30.240 --> 00:01:31.622
That makes sense,
we're getting the middle point.

33
00:01:31.622 --> 00:01:34.012
Because if we're starting
from a middle position,

34
00:01:34.012 --> 00:01:36.834
we're gonna need to make sure
that we adjust where we're at,

35
00:01:36.834 --> 00:01:40.670
that's why we do the low plus, and then
we need to just look at a specific space.

36
00:01:40.670 --> 00:01:45.760
So we get the midpoint with the offset,
awesome, we're good to go.

37
00:01:45.760 --> 00:01:47.810
So then we need the value at that point,
right?

38
00:01:47.810 --> 00:01:50.760
So we can do something like
array midpoint, right?

39
00:01:50.760 --> 00:01:52.620
So we now have the value.

40
00:01:52.620 --> 00:01:55.550
All right, awesome, so
what do we do in our three conditions?

41
00:01:55.550 --> 00:01:57.994
Does anyone know what
the three conditions are?

42
00:01:57.994 --> 00:02:03.520
Condition one, Value is the thing
we're looking for, right?

43
00:02:03.520 --> 00:02:04.440
I forgot to put this in here.

44
00:02:05.450 --> 00:02:08.109
We'll just call it n for needle.

45
00:02:08.109 --> 00:02:09.468
There we go.

46
00:02:09.468 --> 00:02:15.402
If value equals needle, well,
we can return true, in this case.

47
00:02:15.402 --> 00:02:16.373
We'll just make it simple, right?

48
00:02:16.373 --> 00:02:17.402
We're gonna just return true.

49
00:02:17.402 --> 00:02:19.902
We found the value,
it does exist, here we go.

50
00:02:19.902 --> 00:02:22.286
We could return the index if we wanted to,

51
00:02:22.286 --> 00:02:25.977
which would just simply be that
right there, doesn't matter.

52
00:02:25.977 --> 00:02:33.750
All right, or we have our value is
actually larger than the midpoint, right?

53
00:02:33.750 --> 00:02:34.690
So, what does that mean?

54
00:02:34.690 --> 00:02:37.250
We're looking at this position right here.

55
00:02:37.250 --> 00:02:40.840
What that means is our value
is larger than this position.

56
00:02:40.840 --> 00:02:44.740
Which means that it's larger
than everything on this side.

57
00:02:44.740 --> 00:02:48.710
Which means we simply need to
only look on this side, right?

58
00:02:48.710 --> 00:02:49.820
That makes sense.

59
00:02:49.820 --> 00:02:51.769
So we will simply have to do something,

60
00:02:51.769 --> 00:02:53.965
we need to do something
to be able to do that.

61
00:02:53.965 --> 00:02:57.016
And the easiest way to do it
is just adjust our lo, right?

62
00:02:57.016 --> 00:02:59.579
Our lo should equal the midpoint plus 1.

63
00:02:59.579 --> 00:03:03.782
We don't need to consider the midpoint cuz
we already know it's not the right value.

64
00:03:03.782 --> 00:03:08.900
So we just adjust our low end and put it
right in front of where the midpoint is.

65
00:03:08.900 --> 00:03:13.815
Else, we can say, hi, we now need the else
condition is that our value is actually

66
00:03:13.815 --> 00:03:18.680
lower than the current value, which means
that we need to go on to the lower side.

67
00:03:19.860 --> 00:03:23.340
So our hi needs to equal our midpoint.

68
00:03:23.340 --> 00:03:27.949
Now, remember, I usually,
whenever I do things, I for the most part,

69
00:03:27.949 --> 00:03:33.257
will do something that looks like lo is
always inclusive, hi is always exclusive.

70
00:03:33.257 --> 00:03:35.517
Always have these things in your head or

71
00:03:35.517 --> 00:03:38.672
else this +1 right here is
gonna just eat your lunch.

72
00:03:38.672 --> 00:03:41.930
You're always going to be off by 1,
things are always gonna break down.

73
00:03:41.930 --> 00:03:45.170
Always come in with a plan or
else it destroys you.

74
00:03:45.170 --> 00:03:48.110
And that's pretty much
the extent of the algorithm.

75
00:03:48.110 --> 00:03:52.466
Now all we need to do is just effectively
come up with our exit condition of this

76
00:03:52.466 --> 00:03:54.350
loop and we've done it, right?

77
00:03:55.580 --> 00:03:58.020
Right, so our exit condition
can be as simple as this,

78
00:03:58.020 --> 00:04:00.470
let's use the lord's loop,
a do while loop.

79
00:04:00.470 --> 00:04:02.690
I just like to throw those
in there cuz they're funny.

80
00:04:02.690 --> 00:04:07.580
Anyways, so there we go, do while lo,

81
00:04:07.580 --> 00:04:12.337
oopsies, lo is less than hi, right?

82
00:04:12.337 --> 00:04:16.333
We just keep on going until we
finally come to a crossing point.

83
00:04:16.333 --> 00:04:18.656
Cuz once we come to a crossing point,
we're done.

84
00:04:18.656 --> 00:04:22.452
They're gonna always keep getting
closer to each other right here.

85
00:04:22.452 --> 00:04:24.359
So we'll know that will eventually happen.

86
00:04:24.359 --> 00:04:27.658
And if we get here, we can just
simply return false, doesn't exist.

87
00:04:27.658 --> 00:04:30.611
If you're returning the index,
you could do a sentinel value of -1,

88
00:04:30.611 --> 00:04:33.680
that's what it's called,
it's called a sentinel value, pretty fun.

89
00:04:33.680 --> 00:04:36.294
I don't know why I always think
about the matrix or sentinels,

90
00:04:36.294 --> 00:04:39.020
I don't know why that makes that
association, but it just does.

91
00:04:39.020 --> 00:04:39.811
So there you go.

92
00:04:39.811 --> 00:04:44.567
That is effectively the entirety of
a pseudocode version of binary search.

93
00:04:44.567 --> 00:04:46.440
Does this all make sense?

94
00:04:46.440 --> 00:04:49.000
Normally why, we got one question.

95
00:04:49.000 --> 00:04:52.481
&gt;&gt; Yeah,
shouldn't it be less than equal to high?

96
00:04:52.481 --> 00:04:54.446
&gt;&gt; We don't wanna do less than or
equal to.

97
00:04:54.446 --> 00:04:58.258
Cuz if you think about it, you see,
this is the classic, this is an off by 1,

98
00:04:58.258 --> 00:04:59.562
this is another off by 1.

99
00:04:59.562 --> 00:05:00.640
What does this mean?

100
00:05:00.640 --> 00:05:04.800
It means that low is included but
high should not be included.

101
00:05:04.800 --> 00:05:10.360
So if we include 1, but
we should exclude 1, what does that mean?

102
00:05:10.360 --> 00:05:13.640
Means we shouldn't use 1, right?

103
00:05:13.640 --> 00:05:16.343
Cuz it means that our pointers
are actually behind each other,

104
00:05:16.343 --> 00:05:18.350
is what that really, really means.

105
00:05:18.350 --> 00:05:22.410
In other words, if we're at some position,
we'll just call this thing xi.

106
00:05:22.410 --> 00:05:25.290
We have a pointer that says,
hey, I want to start here and

107
00:05:25.290 --> 00:05:28.298
then our end pointing says,
hey, don't cross this line.

108
00:05:28.298 --> 00:05:30.371
So it's fundamentally in a broken state.

109
00:05:30.371 --> 00:05:31.539
And so we don't want to look there.

110
00:05:31.539 --> 00:05:33.382
So that's how I always think of it,

111
00:05:33.382 --> 00:05:37.078
is I just have to have my off by 1's
really strong, or else I goof it up.

112
00:05:39.638 --> 00:05:44.540
All right, now that we've done that,
let's, or actually is there any questions?

113
00:05:47.460 --> 00:05:51.310
&gt;&gt; This is all under the assumption
that the array is sorted, correct?

114
00:05:51.310 --> 00:05:53.570
&gt;&gt; It's all under the assumption
that the array's sorted,

115
00:05:53.570 --> 00:05:55.880
you can never do this
on a non-sorted array.

116
00:05:55.880 --> 00:05:58.937
The reason, again,
is when you come back up to this part.

117
00:05:58.937 --> 00:06:02.302
When you come to these two conditions,
it has to be able to make

118
00:06:02.302 --> 00:06:05.605
the assumption that if I am
larger than the current element,

119
00:06:05.605 --> 00:06:10.840
then the rest of that side of the array,
the left-hand side is all lower than me.

120
00:06:10.840 --> 00:06:11.844
I know that for a fact.

121
00:06:11.844 --> 00:06:15.860
Everything over here could be larger or
lower than me, I don't know that, yet.

122
00:06:15.860 --> 00:06:19.224
But it reduces your search space by
half each time cuz you can make that

123
00:06:19.224 --> 00:06:20.510
single value statement.

