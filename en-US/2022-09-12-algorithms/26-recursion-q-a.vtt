WEBVTT

1
00:00:00.150 --> 00:00:01.030
Any questions from chat?

2
00:00:01.030 --> 00:00:02.220
Anyone have any questions?

3
00:00:02.220 --> 00:00:02.940
Now's your time.

4
00:00:02.940 --> 00:00:05.105
Great time to ask questions.

5
00:00:05.105 --> 00:00:09.473
&gt;&gt; If on the maze front,
if we had the scene

6
00:00:09.473 --> 00:00:14.180
we're going somewhere and
then we have to go back.

7
00:00:14.180 --> 00:00:17.182
Does it get mad that it's
going back on its own?

8
00:00:17.182 --> 00:00:18.870
&gt;&gt; So that is a good question.

9
00:00:18.870 --> 00:00:20.650
So in a sense, yes.

10
00:00:20.650 --> 00:00:21.920
And in a sense, no.

11
00:00:21.920 --> 00:00:25.598
So the question of course was we walk
a certain direction the graph, but

12
00:00:25.598 --> 00:00:28.370
then at some point we can't
keep on walking, right?

13
00:00:28.370 --> 00:00:29.966
So we have to undo, but

14
00:00:29.966 --> 00:00:35.262
then we also programmed in that you
can't go back on your own self, right?

15
00:00:35.262 --> 00:00:38.772
Well, let me kind of draw
this a little bit more.

16
00:00:38.772 --> 00:00:40.958
So when we're doing the maze solving,

17
00:00:40.958 --> 00:00:44.370
let's just say we have these two things,
right?

18
00:00:44.370 --> 00:00:46.900
We have x0 and x1.

19
00:00:46.900 --> 00:00:49.780
So we're at x0, and everything's great.

20
00:00:49.780 --> 00:00:52.960
So our path is to x0 right now.

21
00:00:52.960 --> 00:00:57.585
Our scene is now true,
this one's false, right?

22
00:00:57.585 --> 00:01:00.068
That's kind of the state of
the world we're at right now.

23
00:01:00.068 --> 00:01:03.211
Well, then we check up,
we can't go up, so we don't go up.

24
00:01:03.211 --> 00:01:04.635
It returns false right away.

25
00:01:04.635 --> 00:01:08.540
Then we go over, we can go over and
we start recursing.

26
00:01:08.540 --> 00:01:10.946
So we put in x1, right?

27
00:01:10.946 --> 00:01:13.163
That was a terrible x,
do you see how sad that x was?

28
00:01:13.163 --> 00:01:13.663
Here we go.

29
00:01:14.850 --> 00:01:16.530
X1, perfect.

30
00:01:16.530 --> 00:01:20.500
We put in x1, and then we start recursing.

31
00:01:20.500 --> 00:01:22.610
And this becomes true, awesome.

32
00:01:22.610 --> 00:01:24.210
We go here, it's a wall.

33
00:01:24.210 --> 00:01:25.720
We go here, it's a wall.

34
00:01:25.720 --> 00:01:27.242
We go here, it's a wall.

35
00:01:27.242 --> 00:01:29.170
Then we try to go here.

36
00:01:29.170 --> 00:01:29.950
What happens?

37
00:01:32.100 --> 00:01:33.440
Scenery, right?

38
00:01:33.440 --> 00:01:35.860
The scenery, you're true.

39
00:01:35.860 --> 00:01:37.550
We can't go there.

40
00:01:37.550 --> 00:01:38.880
So then what happens?

41
00:01:39.930 --> 00:01:40.680
Look at the code.

42
00:01:42.640 --> 00:01:45.249
We get done rehearsing.

43
00:01:45.249 --> 00:01:49.310
We pop the thing off the stack, and
then we return back the function.

44
00:01:49.310 --> 00:01:54.875
The return address then gets popped back
to the previous one that was called,

45
00:01:54.875 --> 00:01:57.110
which we were called from x0.

46
00:01:57.110 --> 00:02:01.590
So we pop this off the stack and
then the function returns to here and

47
00:02:01.590 --> 00:02:03.038
we check downwards.

48
00:02:03.038 --> 00:02:07.684
Cuz remember, going top, over,
recursed in top, over, down, this way,

49
00:02:07.684 --> 00:02:09.126
return, down, over.

50
00:02:09.126 --> 00:02:13.410
And so it just repeats the same
algorithm over and over again.

51
00:02:13.410 --> 00:02:16.897
Hopefully my arm gestures
just helped you see that.

52
00:02:16.897 --> 00:02:21.347
I know it was a weird,
is this something between bring it on and

53
00:02:21.347 --> 00:02:25.540
algorithms there for
a second, it was beautiful.

54
00:02:25.540 --> 00:02:29.973
That was like a really weird 90s
reference that just came to my brain.

55
00:02:29.973 --> 00:02:34.154
&gt;&gt; I think that this case,
how did you end up in the top word,

56
00:02:34.154 --> 00:02:38.240
the-
&gt;&gt; How'd you end up in the top?

57
00:02:38.240 --> 00:02:40.135
&gt;&gt; No, the output, the test case.

58
00:02:40.135 --> 00:02:42.216
If we look at the test for this, yeah.

59
00:02:42.216 --> 00:02:46.881
So the start is x is equal to 10 and
y is equal to 0, and

60
00:02:46.881 --> 00:02:50.760
x is equal to 1, y is equal to pi, right?

61
00:02:50.760 --> 00:02:51.530
&gt;&gt; Yeah.

62
00:02:51.530 --> 00:02:53.590
&gt;&gt; So
how did we end up with a dot product?

63
00:02:53.590 --> 00:02:56.220
Still, it'll be confusing for me.

64
00:02:56.220 --> 00:02:58.831
&gt;&gt; How do we end up in the top function?

65
00:02:58.831 --> 00:03:00.510
&gt;&gt; No, the output?

66
00:03:00.510 --> 00:03:02.400
&gt;&gt; How did we get this?

67
00:03:02.400 --> 00:03:03.100
&gt;&gt; Yes.

68
00:03:03.100 --> 00:03:03.742
&gt;&gt; All right, so let's go.

69
00:03:03.742 --> 00:03:08.270
Let's go back to this the simple case cuz
I think the simple case really helps kind

70
00:03:08.270 --> 00:03:08.881
of see it.

71
00:03:08.881 --> 00:03:12.923
Is that, I'll redraw it and
we'll just only talk about parving, right?

72
00:03:12.923 --> 00:03:17.900
And let's say,
these are walls all right here, right?

73
00:03:17.900 --> 00:03:25.195
And then we can say,
let's say our exit is right here, right?

74
00:03:25.195 --> 00:03:26.330
So let's go, x0, x1, x2.

75
00:03:26.330 --> 00:03:32.210
And our traversing algorithm
goes CSS ordering.

76
00:03:32.210 --> 00:03:33.220
Whoo, right?

77
00:03:33.220 --> 00:03:33.853
We'll go to xx order.

78
00:03:33.853 --> 00:03:36.320
So we land right here.

79
00:03:36.320 --> 00:03:38.140
All right,
let's just say we start right here.

80
00:03:38.140 --> 00:03:40.630
This is our mace,
this is as big as our maze is, right?

81
00:03:40.630 --> 00:03:45.397
It's that simple to the point where
exits right there are starts right here,

82
00:03:45.397 --> 00:03:47.021
our exits right below us.

83
00:03:47.021 --> 00:03:48.980
So it's only one away.

84
00:03:48.980 --> 00:03:51.829
So what's gonna happen is
we're first gonna try to go,

85
00:03:51.829 --> 00:03:54.326
we're first gonna push
x0 into our path array.

86
00:03:54.326 --> 00:03:56.366
Correct, we make it through a base cases.

87
00:03:56.366 --> 00:04:00.502
We set our scene to true, and
now we push it into our array.

88
00:04:00.502 --> 00:04:02.677
And now recurse we try to go up.

89
00:04:02.677 --> 00:04:05.212
That immediately returns, can't do it.

90
00:04:05.212 --> 00:04:06.140
We go over.

91
00:04:06.140 --> 00:04:09.427
Here, let me actually draw
with a different color,

92
00:04:09.427 --> 00:04:12.502
this might actually be
a little bit more useful.

93
00:04:12.502 --> 00:04:13.160
Let's see.

94
00:04:13.160 --> 00:04:18.260
Let's go with not yellow, yellow would be
very hard to see, is there a good blue?

95
00:04:18.260 --> 00:04:19.969
What about nice blue?

96
00:04:19.969 --> 00:04:21.608
I like a nice blue.

97
00:04:21.608 --> 00:04:24.641
Let's go, kind of bright blue, all right?

98
00:04:24.641 --> 00:04:27.785
.
So we try to go up, we can't go anywhere,

99
00:04:27.785 --> 00:04:28.346
right?

100
00:04:28.346 --> 00:04:31.053
So then we try to go into the next one.

101
00:04:31.053 --> 00:04:33.335
Remember, now we're going right.

102
00:04:33.335 --> 00:04:36.333
We can go here,
none of the base cases fail.

103
00:04:36.333 --> 00:04:37.507
So what do we do?

104
00:04:37.507 --> 00:04:41.980
We now set in, let's go like this,
go back to white for this one.

105
00:04:41.980 --> 00:04:43.054
We now set in.

106
00:04:45.216 --> 00:04:50.580
Sorry, I'm gonna try to get more
specific with this one, x1, right?

107
00:04:50.580 --> 00:04:53.440
None of our base cases fail,
we're now able to set it in.

108
00:04:53.440 --> 00:04:56.347
And so we now repeat our algorithm, right?

109
00:04:56.347 --> 00:04:57.628
We now go up, can't go there.

110
00:04:57.628 --> 00:04:58.680
We now go over.

111
00:04:58.680 --> 00:05:01.212
We can go there, so we do it again.

112
00:05:01.212 --> 00:05:05.131
At this point,
our scene array now becomes all trues.

113
00:05:05.131 --> 00:05:06.614
And now we put in x2.

114
00:05:06.614 --> 00:05:08.796
x2 of course attempts to go up.

115
00:05:08.796 --> 00:05:10.176
It cannot go there.

116
00:05:10.176 --> 00:05:13.254
Tends to go this way, it cannot go there.

117
00:05:13.254 --> 00:05:18.337
Tends to go this way, it cannot go there,
then it attempts to go this way.

118
00:05:18.337 --> 00:05:21.233
And it fails because of that true, right?

119
00:05:21.233 --> 00:05:22.582
So then we're done.

120
00:05:22.582 --> 00:05:25.041
Now, this whole function returns.

121
00:05:25.041 --> 00:05:26.412
Now returns a false.

122
00:05:26.412 --> 00:05:29.772
But before it returns,
it pops from the stack so

123
00:05:29.772 --> 00:05:32.213
then this one does the same thing.

124
00:05:32.213 --> 00:05:33.338
Checks down now.

125
00:05:33.338 --> 00:05:37.676
Checks over scene array fails,
pops from the stack, returns.

126
00:05:37.676 --> 00:05:40.521
This one now checks down, finds the end,

127
00:05:40.521 --> 00:05:44.600
pushes the end into the stack and
then returns completely.

128
00:05:44.600 --> 00:05:50.875
And so now we have now built this array as
we walked, push, push, push, pop up, push?

129
00:05:50.875 --> 00:05:53.590
Would you have one more question?

130
00:05:53.590 --> 00:05:57.878
&gt;&gt; Is there any scenario where the order
would make any performance difference such

131
00:05:57.878 --> 00:06:00.070
as going top right, bottom left?

132
00:06:00.070 --> 00:06:04.954
&gt;&gt; There is no difference
in the general case, right?

133
00:06:04.954 --> 00:06:08.509
If we could inspect or look at,
then yeah, in some sense,

134
00:06:08.509 --> 00:06:10.481
we could automatically guess.

135
00:06:10.481 --> 00:06:15.215
Cuz right here, if we go down, and
then left, then up then right,

136
00:06:15.215 --> 00:06:20.400
obviously, it would effectively
walk straight to the exit, right?

137
00:06:20.400 --> 00:06:24.357
But if we tried up first, it would go up
couldn't go, then let's say it went this

138
00:06:24.357 --> 00:06:28.395
direction, couldn't go, and eventually
get to here, tried to go back, okay?

139
00:06:28.395 --> 00:06:31.560
So it tried to go up again couldn't go,
this one couldn't go.

140
00:06:31.560 --> 00:06:32.810
Then let's say it goes this direction.

141
00:06:32.810 --> 00:06:36.964
I repeat the same thing can't go,
can't go, can't go, can't go, up down,

142
00:06:36.964 --> 00:06:42.000
go down and go over, can't go, ba, ba, ba,
ba, ba, ba, all the way till it gets here.

143
00:06:42.000 --> 00:06:44.471
And once again to run up into here and
then run up over here.

144
00:06:44.471 --> 00:06:46.510
It's gonna go explore that whole space.

145
00:06:46.510 --> 00:06:48.605
Since you don't know
the graph ahead of time,

146
00:06:48.605 --> 00:06:51.970
you can't really see it with
a direction that would make most sense.

147
00:06:51.970 --> 00:06:53.530
So in the general case, absolutely.

148
00:06:53.530 --> 00:06:54.780
In this specific case,

149
00:06:54.780 --> 00:06:58.350
we know exactly what would get there
in the shortest possible path.

150
00:06:58.350 --> 00:07:03.001
So you can't cheat the system,
in other words.

151
00:07:03.001 --> 00:07:08.878
Got that kids, All right,
that's really is your chance.

152
00:07:08.878 --> 00:07:15.225
Recursion, it's just really fundamental
to these next parts, all right?

153
00:07:15.225 --> 00:07:19.120
&gt;&gt; What would be the big 0 time for
this then?

154
00:07:19.120 --> 00:07:23.136
&gt;&gt; Well, the big O time, though,
this is where things get kind of fun.

155
00:07:23.136 --> 00:07:27.045
We can think of this as, let's just think
of it in a different kind of sense.

156
00:07:27.045 --> 00:07:30.636
All right, we don't have to solve it for
the whole thing,

157
00:07:30.636 --> 00:07:33.360
let's just solve it for a specific square.

158
00:07:33.360 --> 00:07:36.481
So, ooh, I love this blue color,
don't you guys?

159
00:07:36.481 --> 00:07:37.966
it's beautiful, all right?

160
00:07:37.966 --> 00:07:39.996
So we have this square, right, and

161
00:07:39.996 --> 00:07:43.848
really it has four possible
entrances into the square, correct?

162
00:07:43.848 --> 00:07:49.314
So that means we have the potential to
come up from this direction, that's one.

163
00:07:49.314 --> 00:07:54.655
And if this is something like say it's
just a completely open square graph and

164
00:07:54.655 --> 00:07:59.668
we check every single time, then we
could check it again from this side,

165
00:07:59.668 --> 00:08:02.232
from this side, and from this side.

166
00:08:02.232 --> 00:08:07.525
So at most, we will check every
single square four times, right?

167
00:08:07.525 --> 00:08:09.999
So unless if there's
a required outer wall,

168
00:08:09.999 --> 00:08:13.725
then whatever the perimeter is
minus all the inner sides, right?

169
00:08:13.725 --> 00:08:15.790
Besides were all that kind of complexity.

170
00:08:15.790 --> 00:08:19.960
What you'll see is you'll see at max,
4 checks for every square in the graph.

171
00:08:19.960 --> 00:08:27.620
So if we use S as our notation,
then it'd be big O(4S), drop that.

172
00:08:27.620 --> 00:08:29.080
It's effectively linear, right?

173
00:08:29.080 --> 00:08:31.420
For every point,
we would just call it big O(N), right?

174
00:08:33.450 --> 00:08:36.550
And so that's as slow or
fast as you can get.

175
00:08:37.810 --> 00:08:40.640
Walls, you only check once, right?

176
00:08:40.640 --> 00:08:43.922
You can really, I mean, I guess
technically, if there was an island wall,

177
00:08:43.922 --> 00:08:45.480
you could get all four checks on it.

178
00:08:46.660 --> 00:08:48.185
But if it's some sort of perimeter wall or

179
00:08:48.185 --> 00:08:50.293
walls, it's adjacent,
that amount of checks go down.

180
00:08:50.293 --> 00:08:54.915
And so, there you go.

181
00:08:54.915 --> 00:08:55.513
Radical, all right.

182
00:08:55.513 --> 00:08:58.439
Let me go back to black
on this cuz if I don't,

183
00:08:58.439 --> 00:09:02.480
the next time I create something,
it'll be very blue.

184
00:09:02.480 --> 00:09:04.782
And we'll all go [SOUND].

185
00:09:07.372 --> 00:09:09.030
I have a joke about a vampire there.

186
00:09:09.030 --> 00:09:09.729
We let it go though.

