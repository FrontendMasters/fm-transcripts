WEBVTT

1
00:00:00.000 --> 00:00:03.276
We just got done going through
everything that has to do with a heap.

2
00:00:03.276 --> 00:00:05.848
And I do want to implement a heap.

3
00:00:05.848 --> 00:00:09.998
I think we hopefully we will still have
time for everything else today but

4
00:00:09.998 --> 00:00:12.598
I'm very, very excited to implement heap.

5
00:00:12.598 --> 00:00:16.738
Like I said, I do think it is literally
the funnest data structure to implement.

6
00:00:16.738 --> 00:00:19.453
So again, go to your Kata project,
go to heap.

7
00:00:19.453 --> 00:00:23.684
We are gonna implement a MinHeap,
fantastic.

8
00:00:23.684 --> 00:00:24.389
I'm super excited.

9
00:00:24.389 --> 00:00:26.991
So, in this case,
since we're implementing a MinHeap,

10
00:00:26.991 --> 00:00:30.018
since we have an array list that's
actually underneath the hood for

11
00:00:30.018 --> 00:00:33.277
JavaScript, we're just simply gonna
use a JavaScript array for this.

12
00:00:33.277 --> 00:00:36.563
And everything should work out because it
already is the data structure we want.

13
00:00:36.563 --> 00:00:39.556
So, I'm gonna have a private data,
which is going to be a min heap,

14
00:00:39.556 --> 00:00:42.087
which is just literally gonna
be a number array, right?

15
00:00:42.087 --> 00:00:44.691
We're storing numbers,
we need the minimum, let's go.

16
00:00:44.691 --> 00:00:49.571
You could make this a more complex item by
having something like some sort of generic

17
00:00:49.571 --> 00:00:52.093
in which extends something else, right?

18
00:00:52.093 --> 00:00:54.589
We could do that.
I never remember the TypeScript

19
00:00:54.589 --> 00:00:57.983
definitions for all those things,
but there you go.

20
00:00:57.983 --> 00:01:01.405
We pretty much have what we need right
here, which is the length and the data.

21
00:01:01.405 --> 00:01:04.607
Remember the length is used for
insertion and deletion and so

22
00:01:04.607 --> 00:01:07.696
it's very important to make
sure you maintain that link.

23
00:01:07.696 --> 00:01:13.628
So, this.data equals that and
of course this.length = 0.

24
00:01:13.628 --> 00:01:18.059
Now, I'm pretty pumped, we have two
methods we need to do, which is insert and

25
00:01:18.059 --> 00:01:18.600
delete.

26
00:01:18.600 --> 00:01:25.467
Delete obviously pops, off we could read,
I've seen delete often called poll or pop.

27
00:01:25.467 --> 00:01:28.749
So, however you want to call this thing,
go for it, but for

28
00:01:28.749 --> 00:01:31.323
the sake of this program,
it expects delete.

29
00:01:31.323 --> 00:01:33.956
All right, so,
we do need two private functions, or

30
00:01:33.956 --> 00:01:36.832
actually five private functions
before we keep on going.

31
00:01:36.832 --> 00:01:41.495
And remember, this comes from this part,
which is we want heapifyDown,

32
00:01:41.495 --> 00:01:46.475
heapifyUp, and we want to be able to get
all these indices right here, right?

33
00:01:46.475 --> 00:01:49.672
This whole equation we should
probably make into functions, so

34
00:01:49.672 --> 00:01:52.453
we don't have all these two
times indices this, that,

35
00:01:52.453 --> 00:01:56.613
and the other, cuz if we have a problem,
we're gonna be hunting all over our code.

36
00:01:56.613 --> 00:01:59.531
So, I'll start first with parent, right?

37
00:01:59.531 --> 00:02:04.760
This will return a number which is
the index and it takes in an index.

38
00:02:04.760 --> 00:02:06.516
Awesome, so let's just return that.

39
00:02:06.516 --> 00:02:07.861
Remember, what is the equation?

40
00:02:07.861 --> 00:02:11.772
It's Math.floor, go back, capitalize Math,
because that's what you do.

41
00:02:11.772 --> 00:02:14.484
And it's (idx- 1) / 2.

42
00:02:14.484 --> 00:02:15.774
Let's just double check.

43
00:02:15.774 --> 00:02:19.669
Remember right here,
parent index operation.

44
00:02:19.669 --> 00:02:20.361
There we go.

45
00:02:20.361 --> 00:02:24.205
So, we now have our ability to
grab our parent from any index.

46
00:02:24.205 --> 00:02:26.893
This will obviously help and
then heapifyUp.

47
00:02:26.893 --> 00:02:31.071
And if we were to write update,
it would also be used in update.

48
00:02:31.071 --> 00:02:32.610
All right, awesome.

49
00:02:32.610 --> 00:02:33.920
So, let's do another one.

50
00:02:33.920 --> 00:02:39.939
Let's get a leftChild (idx: number):
should return back out a number, correct?

51
00:02:39.939 --> 00:02:44.628
So, one thing we're gonna do is we're not
gonna consider our length when doing this.

52
00:02:44.628 --> 00:02:49.282
We will use our length as a way
to know if the child exists, but

53
00:02:49.282 --> 00:02:53.774
we will not use it during
the actual grabbing of the index.

54
00:02:53.774 --> 00:02:58.112
So, we can just simply return idx,

55
00:02:58.112 --> 00:03:02.167
what is it, it's idx * 2 + 1.

56
00:03:02.167 --> 00:03:04.528
Yeah, yeah, right there.

57
00:03:04.528 --> 00:03:09.306
Then simply call the next one
a rightChild and turn that to a 2, right?

58
00:03:09.306 --> 00:03:10.932
They're almost the exact same thing.

59
00:03:10.932 --> 00:03:13.004
So, there we go.
We're already mostly through our heap

60
00:03:13.004 --> 00:03:15.175
implementation, at least
some of the harder parts,

61
00:03:15.175 --> 00:03:16.440
to make sure you have correct.

62
00:03:16.440 --> 00:03:19.046
I'm just kidding,
those are actually the easiest parts.

63
00:03:19.046 --> 00:03:21.487
But that doesn't mean we
can't write the hard parts.

64
00:03:21.487 --> 00:03:26.813
So, heapifyUp, this is easier than
heapifyDown cuz when you think about it,

65
00:03:26.813 --> 00:03:30.687
heapifyDown, you first have
to find the minimum child,

66
00:03:30.687 --> 00:03:34.173
then you do the comparison,
then you have to swap.

67
00:03:34.173 --> 00:03:39.320
Whereas heapifyUp, we only have one value
we need to look at, which is the parent

68
00:03:39.320 --> 00:03:44.713
and we keep doing it until A, we're off
the board or B, we're larger than, right?

69
00:03:44.713 --> 00:03:48.386
Cuz it's the min heap, min heap means
if we're larger, we don't bubble up.

70
00:03:48.386 --> 00:03:50.147
Yeah, pretty straightforward?

71
00:03:50.147 --> 00:03:50.818
I think it is.

72
00:03:50.818 --> 00:03:55.069
All right, so, let's heapifyUp,
starting at an index.

73
00:03:55.069 --> 00:04:00.644
Now, this can be either recursive or
iterative, whichever way you want to go.

74
00:04:00.644 --> 00:04:02.683
I don't know which way I'm gonna write it,

75
00:04:02.683 --> 00:04:04.785
let's just find out
which way feels easier.

76
00:04:04.785 --> 00:04:08.973
In some sense using it recursively,
again, always really easy because one,

77
00:04:08.973 --> 00:04:13.172
you can just do something as simple
as this, if (idx === 0) we're done.

78
00:04:13.172 --> 00:04:16.675
You cannot heapify beyond the 0th index,
right?

79
00:04:16.675 --> 00:04:18.798
heapifyUp stops there.

80
00:04:18.798 --> 00:04:22.126
So, it's just as easier though
it's not as performant, but

81
00:04:22.126 --> 00:04:24.818
we'll do it anyways cuz I
just like the look of it.

82
00:04:24.818 --> 00:04:27.430
So, that means we're
gonna do a quick check.

83
00:04:27.430 --> 00:04:32.112
We need to get our parent, get its value,
check if we're larger than it.

84
00:04:32.112 --> 00:04:33.457
All right, so let's do that.

85
00:04:33.457 --> 00:04:39.676
const p = this .parent, and then,
of course, the current index we're in.

86
00:04:39.676 --> 00:04:45.487
The value, of course,
is this.data[p], right?

87
00:04:45.487 --> 00:04:47.779
We have the value of our parent now,
right?

88
00:04:47.779 --> 00:04:52.296
So now, all we have to do is
check if our value whoopsies,

89
00:04:52.296 --> 00:04:54.757
here we'll call this parenV.

90
00:04:54.757 --> 00:05:00.266
Sorry, I mean, I always battle between
doing the algorithmic way, which is these

91
00:05:00.266 --> 00:05:05.634
really crappy single letter variables,
or writing it all engineering-wise.

92
00:05:05.634 --> 00:05:06.186
Let's see.

93
00:05:06.186 --> 00:05:08.431
FV, there we go, parentV.

94
00:05:08.431 --> 00:05:14.418
So, if (parentV &lt; v) than we are,
what do we need to do?

95
00:05:16.019 --> 00:05:17.276
Nothing, right?

96
00:05:17.276 --> 00:05:24.777
Correct, cuz we are a min heap, but
if (parentV &gt; v) what do we do?

97
00:05:24.777 --> 00:05:27.272
We need to go up, we're a min heap,

98
00:05:27.272 --> 00:05:32.620
we're trying to go up as far as we can
until we are now larger than our parent.

99
00:05:32.620 --> 00:05:37.970
So, this of course means we're
gonna heapifyUp with our new index,

100
00:05:37.970 --> 00:05:40.009
but what is our new index?

101
00:05:43.088 --> 00:05:44.590
Our parent, right?

102
00:05:44.590 --> 00:05:47.666
We'll heapifyUp based on
our parent's position, but

103
00:05:47.666 --> 00:05:49.244
we need to do one more thing.

104
00:05:49.244 --> 00:05:54.893
We need to take ourself and swap it with
our parent before we do that, right?

105
00:05:54.893 --> 00:05:59.293
We need to swap, heapifyUp again,
swap, heapifyUp again, and

106
00:05:59.293 --> 00:06:01.136
we just keep on doing that.

107
00:06:01.136 --> 00:06:04.546
So, const tmp, we already have a tmp,
which is our parent.

108
00:06:04.546 --> 00:06:09.235
So, that means this.data.[idx] = parentV.

109
00:06:09.235 --> 00:06:13.493
And of course, this.data[p],
our parent index = v.

110
00:06:13.493 --> 00:06:17.097
We've just swapped them, and
we're gonna try again starting at p.

111
00:06:17.097 --> 00:06:18.968
Does that make sense?

112
00:06:18.968 --> 00:06:21.614
Yeah, I think so at least, I think so.

113
00:06:21.614 --> 00:06:24.275
There we go.
Look at how simple it is when you

114
00:06:24.275 --> 00:06:25.699
do it recursively.

115
00:06:25.699 --> 00:06:29.977
We can do this iteratively,
it just means we simply need to hold on to

116
00:06:29.977 --> 00:06:34.195
our current index and do probably
the Lord's loop a do while loop.

117
00:06:34.195 --> 00:06:37.221
It's just like PHP,
it's the greatest thing ever.

118
00:06:37.221 --> 00:06:37.885
All right, so,

119
00:06:37.885 --> 00:06:40.978
I'm gonna keep this one recursive cuz
it just feels fun to do it recursively.

120
00:06:40.978 --> 00:06:43.784
We can do the other one
iteratively if we want to.

121
00:06:43.784 --> 00:06:46.750
So, now we need to do the last function,
heapifyDown.

122
00:06:46.750 --> 00:06:51.509
Now remember, this is when we do
a deletion, we need to remove the head

123
00:06:51.509 --> 00:06:56.916
element, take the last element in our
array, put it into the first position and

124
00:06:56.916 --> 00:07:01.540
then do that beautiful,
beautiful operation of heapifying down.

125
00:07:01.540 --> 00:07:03.528
So, one thing we could do right here,

126
00:07:03.528 --> 00:07:07.956
is we could actually write this swap as a
function so, we just don't mess things up.

127
00:07:07.956 --> 00:07:11.648
Cuz we're gonna have to obviously do some
swapping in both insertion and deletion,

128
00:07:11.648 --> 00:07:14.415
or at least an insertion, but
we're not gonna worry about it.

129
00:07:14.415 --> 00:07:20.016
So, heapifyDown starting at this index,
let's go.

130
00:07:20.016 --> 00:07:21.389
Void, awesome.

131
00:07:21.389 --> 00:07:24.217
So remember,
heapifyDown has a couple conditions.

132
00:07:24.217 --> 00:07:26.575
First condition is the base case.

133
00:07:26.575 --> 00:07:33.487
If our (idx &gt;= length), right,
if we're already at this point,

134
00:07:33.487 --> 00:07:38.184
we shouldn't be heapifying anymore, right?

135
00:07:38.184 --> 00:07:41.788
We would heapify clean off our array,
we'd break our case, so

136
00:07:41.788 --> 00:07:43.290
we can return right here.

137
00:07:43.290 --> 00:07:44.709
Second, what's the other one?

138
00:07:44.709 --> 00:07:47.713
There is another one, but
let's first find out what it is.

139
00:07:47.713 --> 00:07:53.349
So, let's go like this,
left index, whoopsies, lIdx,

140
00:07:53.349 --> 00:07:58.327
which is gonna be this.left Child,
and then rIdx.

141
00:07:58.327 --> 00:08:02.679
Let's get the two indices, and
now that we have the two indices,

142
00:08:02.679 --> 00:08:06.891
we can do a simple check to find
out if we have any more children.

143
00:08:06.891 --> 00:08:10.308
How do you know we have more children?

144
00:08:10.308 --> 00:08:11.941
Well, simple trick.

145
00:08:11.941 --> 00:08:15.262
If we always fill in from left to right,

146
00:08:15.262 --> 00:08:19.992
if our left index is greater than or
equal to our length,

147
00:08:19.992 --> 00:08:25.949
we have now officially left where
any of our heap nodes are at, right?

148
00:08:25.949 --> 00:08:30.714
That makes sense, so we can do the exact
same check again ,this.length and

149
00:08:30.714 --> 00:08:31.990
then we can return.

150
00:08:31.990 --> 00:08:36.666
We can also simplify this logic if you
don't mind doing those operations before

151
00:08:36.666 --> 00:08:39.960
checking and then we can just
simply do this right here.

152
00:08:39.960 --> 00:08:42.330
All right, and there you go.

153
00:08:42.330 --> 00:08:44.134
Feels a little simpler, right,

154
00:08:44.134 --> 00:08:47.365
just depending on how fast you
wanna make the code, right?

155
00:08:47.365 --> 00:08:51.821
You didn't have to do this multiplication,
two times multiplications much much more

156
00:08:51.821 --> 00:08:56.047
expensive than addition plus you're also
doing a floor blah blah blah blah blah.

157
00:08:56.047 --> 00:08:58.371
But often if you're writing JavaScript,

158
00:08:58.371 --> 00:09:02.833
multiplication is probably not your
bottleneck, just throwing that out there.

159
00:09:02.833 --> 00:09:06.598
It's probably the factor using JavaScript,
that is the reason why it's slow.

160
00:09:06.598 --> 00:09:11.886
All right, so, we need to heapifyDown, we
need to be able to get both these values,

161
00:09:11.886 --> 00:09:16.070
find the minimum one, and
then compare and tell do we need to swap?

162
00:09:16.070 --> 00:09:19.331
So, let's first find the minimum,
child of course.

163
00:09:19.331 --> 00:09:26.849
So, we can go like this, minValue =
let's see, we can do like a quick Math.,

164
00:09:26.849 --> 00:09:31.565
well, we first probably
should grab the values,

165
00:09:31.565 --> 00:09:36.993
lV = this.data[lIdx],
rV = this.data[rIdx].

166
00:09:36.993 --> 00:09:37.546
There we go.

167
00:09:37.546 --> 00:09:39.908
So, we have our two
values of our children.

168
00:09:39.908 --> 00:09:43.421
We can even grab rV right
now just to make this easy,

169
00:09:43.421 --> 00:09:46.054
which is going to be idx, there we go.

170
00:09:46.054 --> 00:09:47.880
So, we have rV, their two values.

171
00:09:47.880 --> 00:09:51.208
Now time to do that fun comparison,
and so, which one do we want to do?

172
00:09:51.208 --> 00:09:57.611
We can just do this in the simplest
version, if (lV &lt; rV), why not?

173
00:09:57.611 --> 00:10:01.874
I'm sure we could program this much more
elegant, I'm sure there's a math.min

174
00:10:01.874 --> 00:10:05.850
solution out there, but it also sometimes
gets a little too clever by half.

175
00:10:05.850 --> 00:10:06.916
All right, there we go.

176
00:10:06.916 --> 00:10:09.902
So, if this is the case,
we simply will do this.

177
00:10:09.902 --> 00:10:14.772
If (lV &gt; rV), that means our
right value is the smallest and

178
00:10:14.772 --> 00:10:19.641
our value is less than r,
let's say we were doing a min heap and

179
00:10:19.641 --> 00:10:25.376
we're heapifIying down, and
if our value is greater than right value.

180
00:10:25.376 --> 00:10:29.830
So, in other words, our right value
is going to be the smallest and

181
00:10:29.830 --> 00:10:32.146
we are greater than the smallest.

182
00:10:32.146 --> 00:10:35.838
Therefore, we need to swap and
heapifyDown.

183
00:10:35.838 --> 00:10:36.687
Does that make sense?

184
00:10:36.687 --> 00:10:37.693
I think so.

185
00:10:37.693 --> 00:10:43.319
All right, this.heapifyDown, of course,
and we're gonna want to use rIdx,

186
00:10:43.319 --> 00:10:47.224
but again, we need to do
the old swapping of the values.

187
00:10:47.224 --> 00:10:52.986
So, let's swap the values,
this.data.[idx],

188
00:10:52.986 --> 00:10:56.385
= rV, this.data[rIdx].

189
00:10:56.385 --> 00:10:57.199
My goodness.

190
00:10:57.199 --> 00:11:00.660
Needs to equal, what is it called?

191
00:11:00.660 --> 00:11:01.830
Rvalue, there you go.

192
00:11:01.830 --> 00:11:03.492
I don't know why that took me so
long, there we go.

193
00:11:03.492 --> 00:11:06.543
We just did the little swapping, so
we could do the exact same thing again.

194
00:11:06.543 --> 00:11:09.130
Put it right here, go here,
do a little else and

195
00:11:09.130 --> 00:11:11.547
then just swap everything around, right?

196
00:11:11.547 --> 00:11:16.617
If (rV &gt; lV &amp;&amp; v &gt; lV) then we need to

197
00:11:16.617 --> 00:11:22.458
swap out our left value,
so we can just simply

198
00:11:22.458 --> 00:11:27.554
do a little rl, rl, rl and that's it.

199
00:11:27.554 --> 00:11:29.819
That's all it is to heapifyDown.

200
00:11:29.819 --> 00:11:32.055
It's really not all that hard.

201
00:11:32.055 --> 00:11:35.385
It's actually a rather
simple implementation.

202
00:11:35.385 --> 00:11:37.925
Of course for those that are wondering,
why would you ever want to do it this way

203
00:11:37.925 --> 00:11:40.405
with all these if statements, why not
come up with a more elegant solution?

204
00:11:40.405 --> 00:11:45.175
My general rule of thumb is I don't
refactor unless if I see a rule of three,

205
00:11:45.175 --> 00:11:48.372
Martin Fowler, great book,
highly recommend.

206
00:11:48.372 --> 00:11:49.537
There we go.

207
00:11:49.537 --> 00:11:50.774
So, this is fantastic.

208
00:11:50.774 --> 00:11:51.945
I'm very, very happy about this.

209
00:11:51.945 --> 00:11:54.364
So, we believe we have
heapifyDown correct,

210
00:11:54.364 --> 00:11:56.419
we believe we have heapifyUp correct.

211
00:11:56.419 --> 00:11:59.657
So, now it's really just time
to implement our interface.

212
00:11:59.657 --> 00:12:03.643
So remember, let's go back to this and
talk about insertion.

213
00:12:03.643 --> 00:12:09.200
Insertion is where you first put it
at the end of your array, right here.

214
00:12:09.200 --> 00:12:14.566
And then at the end of the array,
we need to heapifyUp at that position.

215
00:12:14.566 --> 00:12:16.977
And so, what of course,
is the end of our array?

216
00:12:16.977 --> 00:12:18.603
Well, it's our length.

217
00:12:18.603 --> 00:12:23.691
So, this.data[this.length] = value.

218
00:12:23.691 --> 00:12:27.150
this.heapifyUp(this.length).

219
00:12:27.150 --> 00:12:30.751
Whoopsies, there you go,
it's literally that simple.

220
00:12:30.751 --> 00:12:31.927
But we have to do one last thing.

221
00:12:31.927 --> 00:12:34.588
We can do a little ++ right there
if you wanna be cheeky about it.

222
00:12:34.588 --> 00:12:37.302
Or if you don't wanna be cheeky and
get called out in a code review,

223
00:12:37.302 --> 00:12:39.063
just do it right afterwards, there we go.

224
00:12:39.063 --> 00:12:42.685
So now, we have this beautiful thing
where we first use the length to set our

225
00:12:42.685 --> 00:12:43.214
child in.

226
00:12:43.214 --> 00:12:45.444
We then heapify it up or
bubble it up to the top,

227
00:12:45.444 --> 00:12:49.243
then we increment our length by 1,
that was actually rather simple, right?

228
00:12:49.243 --> 00:12:52.712
Now that you have the pieces together,
this is just absurdly simple.

229
00:12:52.712 --> 00:12:55.471
I'm also a little shocked this
is going as well as it is.

230
00:12:55.471 --> 00:12:59.296
All right, so, deletion is where it
gets a little bit harder, right?

231
00:12:59.296 --> 00:13:01.315
We need to know some things.

232
00:13:01.315 --> 00:13:04.828
One thing is that what happened
if we have no elements in here,

233
00:13:04.828 --> 00:13:06.189
what should we return?

234
00:13:06.189 --> 00:13:11.882
=== 0, well, since our interface
is just a number, why not?

235
00:13:11.882 --> 00:13:15.940
We could return -1 as a sentinel value,
but then you're arguing well, hey,

236
00:13:15.940 --> 00:13:20.179
that kinda sucks cuz of this, this, and
this, we could technically make this into

237
00:13:20.179 --> 00:13:23.053
an undefined and
then return out an undefined, right?

238
00:13:23.053 --> 00:13:26.146
Hey, that's terrible, you shouldn't be
able to do this blah blah blah blah blah,

239
00:13:26.146 --> 00:13:28.123
we could come up with our own
ways to be able to do this.

240
00:13:28.123 --> 00:13:32.856
That's very JavaScript even have the fact
that you can try to remove something in

241
00:13:32.856 --> 00:13:34.187
which does not exist.

242
00:13:34.187 --> 00:13:36.165
That doesn't usually
happen in other languages,

243
00:13:36.165 --> 00:13:38.147
usually you get kind of like a hey,
don't do that.

244
00:13:38.147 --> 00:13:40.547
I guess Rust, you have options.

245
00:13:40.547 --> 00:13:44.281
So, we'll just do that for our case,
why not, we'll call this good enough,

246
00:13:44.281 --> 00:13:47.300
we don't really have this notion
of an option, so there we go.

247
00:13:47.300 --> 00:13:51.394
All right, so now we need to do the exact
same thing except in reverse ordering.

248
00:13:51.394 --> 00:13:56.598
Which means we first take our head,
we get its value out,

249
00:13:56.598 --> 00:14:01.262
then we have to take the last
element in the array and

250
00:14:01.262 --> 00:14:07.901
put it into our head's position and
then bubble it down or heapifyDown.

251
00:14:07.901 --> 00:14:08.791
Does that make sense?

252
00:14:08.791 --> 00:14:12.377
So, there is kind of a second condition,
if you really wanna think about it.

253
00:14:12.377 --> 00:14:15.780
We could also go if this.length = 1,
right?

254
00:14:15.780 --> 00:14:18.264
This is just a real problem, right?

255
00:14:18.264 --> 00:14:21.499
That means we could just
go this.data = [], right?

256
00:14:21.499 --> 00:14:27.146
Or const out = this.data[0];
return out; right?

257
00:14:27.146 --> 00:14:29.965
Very, very simple, we kind of just
addressed that one situation that may

258
00:14:29.965 --> 00:14:31.747
be a little bit more
tricky than the other one.

259
00:14:31.747 --> 00:14:35.598
And then we can just finally do the
heapfying right here, which means we're

260
00:14:35.598 --> 00:14:39.829
gonna have our out, which we can actually
move this thing right here, beautiful.

261
00:14:39.829 --> 00:14:41.314
We have our out.

262
00:14:41.314 --> 00:14:45.881
And now all we need to do is heapifyDown.

263
00:14:45.881 --> 00:14:49.754
And then we have to figure out,
do we heapifyDown and

264
00:14:49.754 --> 00:14:55.226
then reduce the length, or do we reduce
the length and then heapifyDown?

265
00:14:55.226 --> 00:14:56.195
&gt;&gt; Reduce then.

266
00:14:56.195 --> 00:14:58.259
&gt;&gt; Reduce then, exactly.

267
00:14:58.259 --> 00:15:01.931
So, the reason why we want to do that is
we don't want to get ourselves in trouble,

268
00:15:01.931 --> 00:15:03.102
because if you remember,

269
00:15:03.102 --> 00:15:05.942
heapifyDown does consider length
as a part of this operation.

270
00:15:05.942 --> 00:15:10.307
Which means we could find ourselves
in a bad situation and even more so,

271
00:15:10.307 --> 00:15:15.276
notice that as we delete out a value, we
may not be zeroing out the value, right?

272
00:15:15.276 --> 00:15:17.127
In other words, you may have numbers or

273
00:15:17.127 --> 00:15:20.279
pollution within the part of
the array you're not using any more.

274
00:15:20.279 --> 00:15:23.943
So, could be very dangerous if you
don't set your length properly.

275
00:15:23.943 --> 00:15:25.065
All right, there we go.

276
00:15:25.065 --> 00:15:26.259
Set the length properly.

277
00:15:26.259 --> 00:15:30.935
And now we just simply heapifyDown
starting at the 0th position, right?

278
00:15:30.935 --> 00:15:34.938
We've just,
I forgot the most important part, right?

279
00:15:34.938 --> 00:15:40.735
this.data[0] = this.data[this.length].

280
00:15:40.735 --> 00:15:42.028
Yeah, that thing.

281
00:15:42.028 --> 00:15:42.753
Isn't that great?

282
00:15:42.753 --> 00:15:43.514
There we go.

283
00:15:43.514 --> 00:15:46.966
Reduce our length, we're now pointing
to the last element properly.

284
00:15:46.966 --> 00:15:50.057
Move that to the 0th position,
heapifyDown.

285
00:15:50.057 --> 00:15:52.726
Make sense cuz length is always exclusive.

286
00:15:52.726 --> 00:15:56.487
Therefore, by removing it one,
we made it inclusive for a moment.

287
00:15:56.487 --> 00:15:58.282
Put it up there, now we're good.

288
00:15:58.282 --> 00:15:59.486
Okay, fun little trick.

289
00:15:59.486 --> 00:16:02.652
We didn't have to do it that way, it could
have been a little bit more obvious if I

290
00:16:02.652 --> 00:16:05.657
would have done that and then did this,
but it just feels good to be tricky.

291
00:16:05.657 --> 00:16:07.588
There we go, super tricky, awesome.

292
00:16:07.588 --> 00:16:11.958
And I think this is everything we need to
do other than the whole fact that I forgot

293
00:16:11.958 --> 00:16:15.560
to return out, there we go, so,
we should be able to return out.

294
00:16:15.560 --> 00:16:18.843
So now the real question is,
did we get this correct?

295
00:16:18.843 --> 00:16:20.099
I think we got this correct.

296
00:16:20.099 --> 00:16:25.096
The good news is we also have
a test to run, jest Heap.

297
00:16:25.096 --> 00:16:29.701
If we run the minify heap, hopefully we've
done everything correct and look at that.

298
00:16:32.063 --> 00:16:34.076
We didn't do it correct.

299
00:16:34.076 --> 00:16:37.287
This is one of the saddest
days of my life right now.

300
00:16:37.287 --> 00:16:38.665
I'm gonna call my mother.

301
00:16:38.665 --> 00:16:41.041
I will cry, many things.

302
00:16:41.041 --> 00:16:42.889
We did not get this correct,

303
00:16:42.889 --> 00:16:47.201
because we added in one condition
in which we did not do correctly.

304
00:16:49.676 --> 00:16:51.754
Can we please get an RIP in chat?

305
00:16:51.754 --> 00:16:57.796
If we would have simply done this,
we would have been fine.

306
00:16:57.796 --> 00:17:00.020
Isn't that just the saddest?

307
00:17:00.020 --> 00:17:01.299
Isn't it just the saddest?

308
00:17:01.299 --> 00:17:05.388
We simply forgot to decrement or
length when we only had a length of 1.

309
00:17:05.388 --> 00:17:06.220
There we go.

310
00:17:06.220 --> 00:17:07.528
Classic blunder.

311
00:17:07.528 --> 00:17:09.282
There we go.

312
00:17:09.282 --> 00:17:10.183
That is a heap.

313
00:17:10.183 --> 00:17:13.242
See, they are fun to implement.

314
00:17:13.242 --> 00:17:16.140
They have a really kind of
a cool concept to them and

315
00:17:16.140 --> 00:17:20.697
we're just playing around with a raise,
which I think makes it a ton more fun.

316
00:17:20.697 --> 00:17:21.271
So, there we go.

317
00:17:21.271 --> 00:17:22.670
Hopefully you enjoyed this.

318
00:17:22.670 --> 00:17:28.977
Is there any last minute questions that
would like to be asked about a heap?

319
00:17:28.977 --> 00:17:31.223
There's one thing we haven't covered yet
with a heap.

320
00:17:31.223 --> 00:17:33.748
No one asked about the running time.

321
00:17:33.748 --> 00:17:37.827
The running time, what is the running
time of these two operations?

322
00:17:37.827 --> 00:17:39.624
What is the running time of an insert?

323
00:17:39.624 --> 00:17:41.091
What is the running time of a delete?

324
00:17:41.091 --> 00:17:44.409
Remember, we're gonna normally
consider worst case scenario in this.

325
00:17:44.409 --> 00:17:46.159
So, what is the worst case scenario?

326
00:17:46.159 --> 00:17:49.208
Well, it's gonna be you
start here at the bottom and

327
00:17:49.208 --> 00:17:52.128
you try to bubble your way
all the way up to the top.

328
00:17:52.128 --> 00:17:53.940
Or you're gonna start from the top and

329
00:17:53.940 --> 00:17:56.838
you may have to bubble your way
all the way down to the bottom.

330
00:17:56.838 --> 00:17:59.212
What is the height of the tree?

331
00:17:59.212 --> 00:18:04.235
It's always log n, because this is a
complete tree at all points or a full tree

332
00:18:04.235 --> 00:18:09.279
at all points, it always fills in from
left to right, there are no gaps ever.

333
00:18:09.279 --> 00:18:12.112
So, log n for both operations.

334
00:18:12.112 --> 00:18:16.723
Now, there are different trees that
actually even give better solutions,

335
00:18:16.723 --> 00:18:17.884
Fibonacci heaps.

336
00:18:17.884 --> 00:18:21.719
Which, just mind blowingly complicated,
there's no way we could possibly cover

337
00:18:21.719 --> 00:18:25.168
that, it would probably take four hours
just to get really all through it,

338
00:18:25.168 --> 00:18:26.997
but it's fantastic, it's awesome.

339
00:18:26.997 --> 00:18:29.444
I still don't quite actually
get exactly how they work.

340
00:18:29.444 --> 00:18:31.998
I don't know if I could program
it first try, but it's fantastic.

341
00:18:31.998 --> 00:18:34.957
So there you go,
hopefully you enjoyed this.

342
00:18:34.957 --> 00:18:36.869
Hopefully you understand now,

343
00:18:36.869 --> 00:18:40.548
of course it's log n cuz every
single layer multiplies by 2,

344
00:18:40.548 --> 00:18:45.381
half the tree is always in the bottom
layer, therefore blah blah blah blah blah.

345
00:18:45.381 --> 00:18:47.141
We already kind of gone
over that a few times.

346
00:18:47.141 --> 00:18:50.536
All right, I already talked about this,
careful about garbage.

347
00:18:50.536 --> 00:18:55.389
Your array may contain some items if
you did not properly clean them up.

348
00:18:55.389 --> 00:18:56.151
So, be careful.

349
00:18:56.151 --> 00:18:59.106
We're using a number array, so
we don't actually have to be careful.

350
00:18:59.106 --> 00:19:02.079
But if you're using an array
that's generic over t,

351
00:19:02.079 --> 00:19:05.195
you may want to put in something
like null or undefined.

352
00:19:05.195 --> 00:19:06.442
Make sense?

353
00:19:06.442 --> 00:19:07.361
All right.

