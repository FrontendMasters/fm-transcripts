WEBVTT

1
00:00:00.000 --> 00:00:00.585
So, yeah, let's implement this.

2
00:00:00.585 --> 00:00:02.523
This is actually where it
shouldn't be too hard to do that.

3
00:00:02.523 --> 00:00:05.533
So again, go back to our kata-machine,
go back to day one.

4
00:00:05.533 --> 00:00:06.945
If you're using VS Code,

5
00:00:06.945 --> 00:00:10.614
then you make sure you have
Git-ignored folders being displayed.

6
00:00:10.614 --> 00:00:13.618
All right, so let's go to Stack and
let's implement a Stack.

7
00:00:13.618 --> 00:00:17.257
I have everything generated to which we
should be able to kind of do this all.

8
00:00:17.257 --> 00:00:20.807
And so I'm gonna do something a little
bit different when we define the node.

9
00:00:20.807 --> 00:00:24.773
I'm gonna go type Node generic over T,
oops, forgot to do that.

10
00:00:24.773 --> 00:00:26.856
So, we're gonna create our
type definition of the node.

11
00:00:26.856 --> 00:00:30.560
I always like to start here because
what does our data actually look like?

12
00:00:30.560 --> 00:00:34.563
Well, of course, we're gonna have our
value, which is the generic value over T.

13
00:00:34.563 --> 00:00:36.806
And then I'm gonna do
previous instead of next.

14
00:00:36.806 --> 00:00:40.804
The reason why I do that is it
just makes it a lot easier for

15
00:00:40.804 --> 00:00:43.029
me to visualize this, right?

16
00:00:43.029 --> 00:00:47.371
I draw the arrows backwards,
it helps me remember where I'm adding to.

17
00:00:47.371 --> 00:00:48.985
It just makes it a little bit easier.

18
00:00:48.985 --> 00:00:53.753
Again, we don't return this container to
the outside world nobody else uses it.

19
00:00:53.753 --> 00:00:56.236
So, you can represent it the way
that is most convenient for you.

20
00:00:56.236 --> 00:00:59.004
For me, previous always the bestest.

21
00:00:59.004 --> 00:01:03.106
All right, so just like before,
we need to define where our head is.

22
00:01:03.106 --> 00:01:09.318
So, I'll go private head: Node &lt;T&gt; and
of course, it can be undefined, correct?

23
00:01:09.318 --> 00:01:13.214
So, if it can be undefined, put little
question mark operator, awesome.

24
00:01:13.214 --> 00:01:17.723
And then now we can go to our constructor,
set our head to undefined cuz I just

25
00:01:17.723 --> 00:01:21.191
really liked being explicit and
let's go to length = 0.

26
00:01:21.191 --> 00:01:24.133
So, we have our constructor done,
again, one of the harder parts,

27
00:01:24.133 --> 00:01:27.103
make sure you have everything all set up,
everything's good to go.

28
00:01:27.103 --> 00:01:28.791
And let's start with peek.

29
00:01:28.791 --> 00:01:32.649
Peek is kind of a very simple operation,
what is at the head?

30
00:01:32.649 --> 00:01:37.680
Okay, so we can return this.head value.

31
00:01:37.680 --> 00:01:41.090
So, if we have a head,
we return the value.

32
00:01:41.090 --> 00:01:44.552
If we don't have a head,
we return undefined peek, awesome.

33
00:01:45.864 --> 00:01:48.351
All right, let's start with push.

34
00:01:48.351 --> 00:01:52.723
So, typically in a queue,
you do enqueue, dequeue, for a stack,

35
00:01:52.723 --> 00:01:54.736
you typically do push and pop.

36
00:01:54.736 --> 00:01:58.288
JavaScript shows shift,
unshift for queue-like operations.

37
00:01:58.288 --> 00:02:02.497
Really unfortunate, I always like to
pretend that when Brendan Eich was

38
00:02:02.497 --> 00:02:06.434
building a queue, and they said hey,
how do we take this thing off?

39
00:02:06.434 --> 00:02:11.194
He's, you shift it off, and they're, yeah.

40
00:02:11.194 --> 00:02:12.699
What happens if you wanna push it on?

41
00:02:12.699 --> 00:02:18.186
He goes [SOUND] unshift and
then that's how he got it.

42
00:02:18.186 --> 00:02:20.241
He didn't know, and
then that's how it ended up happening.

43
00:02:20.241 --> 00:02:22.085
That's how I like to do it my head.

44
00:02:22.085 --> 00:02:25.058
I don't know if anyone actually
really believes me on that one, but

45
00:02:25.058 --> 00:02:26.475
I believe in myself on that one.

46
00:02:26.475 --> 00:02:31.164
All right, so
if this.head is undefined, well,

47
00:02:31.164 --> 00:02:37.717
all we need to do is just set our head
to the node and we're good, right?

48
00:02:37.717 --> 00:02:38.904
Pretty straightforward, I'd say.

49
00:02:38.904 --> 00:02:40.097
So, let's go like this.

50
00:02:40.097 --> 00:02:44.614
This.head =, actually, let's just create
the node outside here cuz remember,

51
00:02:44.614 --> 00:02:47.171
we're gonna need to use
it in multiple places.

52
00:02:47.171 --> 00:02:51.663
Value is the item, and of course,
as Node, or else TypeScript is gonna be,

53
00:02:51.663 --> 00:02:52.873
that's not a node.

54
00:02:52.873 --> 00:02:54.757
So, there we go, we create that.

55
00:02:54.757 --> 00:02:58.148
Head is node and we return,
simplest case right there.

56
00:02:58.148 --> 00:03:02.168
But of course, bookkeeping is always
important when using a Stack so,

57
00:03:02.168 --> 00:03:03.375
this.length++.

58
00:03:03.375 --> 00:03:06.824
Let's make sure we alter our length,
set our head if there's no head.

59
00:03:06.824 --> 00:03:09.290
Now, if there's a head,
what do we have to do?

60
00:03:09.290 --> 00:03:11.707
We've to do the exact same
operations we did right here.

61
00:03:11.707 --> 00:03:15.139
We're gonna have to take this,
let's just add an F right now, right?

62
00:03:15.139 --> 00:03:18.787
So, what we'd have to do is
we'd have to take our head and

63
00:03:18.787 --> 00:03:21.532
we'd have to point to
it with our new node.

64
00:03:21.532 --> 00:03:25.044
Then we take our head and
we point to the new node.

65
00:03:25.044 --> 00:03:28.016
Two step operation,
should be pretty straightforward to do.

66
00:03:28.016 --> 00:03:35.384
So, let's take our head, or let's take
our node, and let's point to it, right?

67
00:03:35.384 --> 00:03:38.206
Point to the head,
there we go, first step done.

68
00:03:38.206 --> 00:03:42.748
F is now pointing to E,
now let's make the head point to F.

69
00:03:42.748 --> 00:03:45.990
So, this.head = node, there we go.

70
00:03:45.990 --> 00:03:51.078
That is the entirety of pushing in
a Stack, I think it's pretty darn easy.

71
00:03:51.078 --> 00:03:52.936
Hopefully everyone feels good about that.

72
00:03:52.936 --> 00:03:55.806
Now, pop, well, it's pop.

73
00:03:55.806 --> 00:03:56.790
So, let's do this right here.

74
00:03:56.790 --> 00:04:02.308
So, the first thing we wanna do is,
do we have anything to actually get out?

75
00:04:02.308 --> 00:04:05.333
So, let's go this.length,
let's do our bookkeeping of course.

76
00:04:05.333 --> 00:04:07.100
We don't wanna do our
bookkeeping quite this way.

77
00:04:07.100 --> 00:04:11.525
We can't just simply decrement our
length because we'll go into -1

78
00:04:11.525 --> 00:04:13.709
territory if you keep on popping.

79
00:04:13.709 --> 00:04:18.103
So, we do have to be at least
a little bit smart about this,

80
00:04:18.103 --> 00:04:22.518
right = Math.max(0,
this.length- 1), right?

81
00:04:22.518 --> 00:04:26.821
So, that way, we always stay at 0 or
we count down.

82
00:04:26.821 --> 00:04:28.528
So, pretty useful, there we go.

83
00:04:28.528 --> 00:04:30.893
So, at this point we
have to make a decision.

84
00:04:30.893 --> 00:04:36.959
If this.length = 0, well,
we can go if this.head = undefined, right?

85
00:04:36.959 --> 00:04:39.234
We no longer need to
have our head anymore.

86
00:04:39.234 --> 00:04:44.562
We want it to be completely disconnected
from our kind of container.

87
00:04:44.562 --> 00:04:47.244
Therefore, JavaScript will clean it up,
everything's good.

88
00:04:47.244 --> 00:04:51.119
But of course,
we need to save out that value, right,

89
00:04:51.119 --> 00:04:55.098
head = this.head, and
return head.value, right?

90
00:04:55.098 --> 00:04:56.885
We can kinda do this but of course,

91
00:04:56.885 --> 00:05:00.041
again, TypeScript does not
like this type of programming.

92
00:05:00.041 --> 00:05:03.812
Even though we understand what is
happening here, TypeScript hates it.

93
00:05:03.812 --> 00:05:06.987
So, this time instead of doing it that
other way, I'm gonna do it like this.

94
00:05:06.987 --> 00:05:11.222
Cuz, I don't know, you can do it
either way this works out, right?

95
00:05:11.222 --> 00:05:13.709
We know what we're getting ourselves into.

96
00:05:13.709 --> 00:05:18.044
All right, if that's not the case, well,
then we need to actually detach the head.

97
00:05:18.044 --> 00:05:19.761
So, let's go over that
operation one more time.

98
00:05:19.761 --> 00:05:22.806
If we were to detach F, what do we do?

99
00:05:22.806 --> 00:05:25.931
Well, the first thing we wanna do,
save out a pointer to F so

100
00:05:25.931 --> 00:05:27.065
we can now access it.

101
00:05:27.065 --> 00:05:31.236
Second, update head to repoint
back to the previous one.

102
00:05:31.236 --> 00:05:35.167
Third, return the value
that's contained within F.

103
00:05:35.167 --> 00:05:36.918
So, let's do that right now.

104
00:05:36.918 --> 00:05:39.775
We're gonna jump in here, we saved out
the value that is pointing to F, right?

105
00:05:39.775 --> 00:05:43.258
So, here's F, if you will in
this category or in this case.

106
00:05:43.258 --> 00:05:48.999
Then we need to go this.head
= this.head?.previous.

107
00:05:48.999 --> 00:05:51.290
Of course, TypeScript again
still battling us, going hey,

108
00:05:51.290 --> 00:05:52.446
are you sure you wanna do this?

109
00:05:52.446 --> 00:05:55.852
So, we can actually just use our actual
head reference right here, right?

110
00:05:55.852 --> 00:05:57.171
That also works if you
want to get rid of it.

111
00:05:57.171 --> 00:05:59.716
We're already pointing to it, awesome.

112
00:05:59.716 --> 00:06:04.093
And then lastly, we just simply
need the return out a head.value.

113
00:06:04.093 --> 00:06:08.251
Again, this is JavaScript, there is
details in which it's hiding from you in

114
00:06:08.251 --> 00:06:11.157
languages in which you need
to manage your own memory.

115
00:06:11.157 --> 00:06:16.464
Remember, we're still pointing to the list
with head, we haven't cleaned up head.

116
00:06:16.464 --> 00:06:20.223
So, in more traditional languages, you
would definitely have to free this item.

117
00:06:20.223 --> 00:06:23.418
If you're using Rust, you wouldn't
program a linked list cuz it's too hard.

118
00:06:23.418 --> 00:06:24.979
If you're using C++,
you'd have to free it.

119
00:06:24.979 --> 00:06:26.114
All right, it's good joke.

120
00:06:26.114 --> 00:06:28.828
There's a joke somewhere in there,
it's pretty good.

121
00:06:28.828 --> 00:06:33.409
And I believe this is pretty much
everything we have to do to successfully

122
00:06:33.409 --> 00:06:34.995
have a beautiful Stack.

123
00:06:34.995 --> 00:06:36.773
So, let's see if this actually works out.

124
00:06:36.773 --> 00:06:40.457
Let's go npx jest Stack.

125
00:06:41.488 --> 00:06:43.350
[SOUND] Look at that.

126
00:06:43.350 --> 00:06:46.780
So, it did try to warn us obviously,
it was very, very correct.

127
00:06:46.780 --> 00:06:48.750
And now I see the errors of my way.

128
00:06:48.750 --> 00:06:49.860
What's the errors of your way?

129
00:06:51.358 --> 00:06:52.109
What happened here?

130
00:06:52.109 --> 00:06:54.571
It's 0 after you keep popping, right?

131
00:06:54.571 --> 00:06:58.386
So, if you keep popping,
it's gonna keep returning undefined.

132
00:06:58.386 --> 00:07:01.902
And I must have came in here and caused
the value, no, actually the value was or

133
00:07:01.902 --> 00:07:03.892
whatever the problems of value right here.

134
00:07:03.892 --> 00:07:06.221
All right, don't see them.

135
00:07:06.221 --> 00:07:06.721
Yes.

136
00:07:08.262 --> 00:07:09.209
We'll go like this.

137
00:07:12.016 --> 00:07:13.940
There we go, that saved us.

138
00:07:13.940 --> 00:07:16.934
I won't cast as a node because we don't
actually know if it's node cuz you can

139
00:07:16.934 --> 00:07:18.234
keep on popping on an empty list.

140
00:07:18.234 --> 00:07:20.438
There you go,
that's a TypeScript error, my fault.

141
00:07:20.438 --> 00:07:24.808
[SOUND] This is surely disappointing
cuz now I had my first non first try.

142
00:07:24.808 --> 00:07:25.837
And look at that first try.

143
00:07:25.837 --> 00:07:28.979
We got it very first try,
how fantastic is that?

144
00:07:28.979 --> 00:07:30.443
We can edit that and post, right?

145
00:07:30.443 --> 00:07:31.656
Definitely got this first try?

146
00:07:31.656 --> 00:07:33.829
Okay, good, just making sure.

147
00:07:33.829 --> 00:07:35.537
All right, there we go.

148
00:07:35.537 --> 00:07:36.845
So, that is all a Stack is,.

149
00:07:36.845 --> 00:07:37.842
It's pretty simple.

150
00:07:37.842 --> 00:07:40.328
The steps are actually more
simple than a Queue, right?

151
00:07:40.328 --> 00:07:43.731
Because you're really only
focusing on a single pointer head.

152
00:07:43.731 --> 00:07:47.035
To me, it's just is the easiest
data structure to implement, very,

153
00:07:47.035 --> 00:07:48.773
very small amount of link breaking.

154
00:07:48.773 --> 00:07:51.800
It's pretty simple,
only difficult part, drawing backwards.

