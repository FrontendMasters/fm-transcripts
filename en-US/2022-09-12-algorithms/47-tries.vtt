WEBVTT

1
00:00:00.200 --> 00:00:03.896
So if it's not a priority queue,
it's probably a trie, or really,

2
00:00:03.896 --> 00:00:08.440
it should be pronounced tree, because it
actually is named after a retrieval tree.

3
00:00:08.440 --> 00:00:12.530
But somebody really think about that,
a tree tree doesn't sound very good.

4
00:00:12.530 --> 00:00:14.751
So we have a tree tree
called the trie tree,

5
00:00:14.751 --> 00:00:18.350
and sometimes they're called
prefix trees or digital trees.

6
00:00:18.350 --> 00:00:20.917
I don't know why they're called
digital trees, sounds kinda weird,

7
00:00:20.917 --> 00:00:23.190
sounds like a bunch of zeros and
ones to me.

8
00:00:23.190 --> 00:00:24.858
So this happens a ton.

9
00:00:24.858 --> 00:00:30.594
I have been in at least one interview
where a trie tree is the answer.

10
00:00:30.594 --> 00:00:32.484
And if you don't know what a trie tree is,

11
00:00:32.484 --> 00:00:34.918
the easiest way to think
about it is an autocomplete.

12
00:00:34.918 --> 00:00:38.007
So if I type in A,
what should you give me back?

13
00:00:38.007 --> 00:00:39.691
What kinda results
should you give me back?

14
00:00:39.691 --> 00:00:44.227
That's just a trie, that's all it is,
and it can do it in O(1) time given that

15
00:00:44.227 --> 00:00:48.632
the keys meet some sort of minimum length
or some sort of length, that they fall

16
00:00:48.632 --> 00:00:53.080
within, like the English words,
an English word can only be so long.

17
00:00:53.080 --> 00:00:56.955
There's not a thousand-letter
long English word, so therefore,

18
00:00:56.955 --> 00:00:59.711
you can't have that, so
constant time lookup.

19
00:00:59.711 --> 00:01:03.461
We're not gonna implement one just
cuz it's a practice in pointers, and

20
00:01:03.461 --> 00:01:06.378
we just don't need to do yet
another doubly linked list.

21
00:01:06.378 --> 00:01:07.137
But instead,

22
00:01:07.137 --> 00:01:11.574
we will go through and we will whiteboard
one out, they're actually pretty easy.

23
00:01:15.099 --> 00:01:17.637
So let's go to right here.

24
00:01:17.637 --> 00:01:21.230
All right, so we're gonna do a trie.

25
00:01:21.230 --> 00:01:22.332
People call it trie,

26
00:01:22.332 --> 00:01:25.830
I still like to call it a tree cuz
it really truly is a retrieval tree.

27
00:01:25.830 --> 00:01:28.386
All right, so how it effectively
works is that you have a root.

28
00:01:28.386 --> 00:01:33.976
The root does not have any value itself,
but what it does have is, by the way,

29
00:01:33.976 --> 00:01:40.005
I'll just kinda preface this, we're gonna
do an English language tree, right?

30
00:01:40.005 --> 00:01:41.480
So that's what we're gonna be doing.

31
00:01:41.480 --> 00:01:45.511
So if that's the case,
that means our tree could have 1 of

32
00:01:45.511 --> 00:01:49.626
26 possible symbols as its children,
unless of course,

33
00:01:49.626 --> 00:01:55.009
we're also considering underscores or
capitalization is case sensitive.

34
00:01:55.009 --> 00:01:57.757
If we're considering those other things,
then yes, there'll be some other stuff,

35
00:01:57.757 --> 00:01:59.302
but usually when you're
doing spell checking,

36
00:01:59.302 --> 00:02:01.091
you don't necessarily have
to consider those things.

37
00:02:01.091 --> 00:02:04.272
So let's just pretend we're
building a spell checker,

38
00:02:04.272 --> 00:02:06.203
we'd only need 26 characters.

39
00:02:06.203 --> 00:02:13.010
And why I say that is let's say we
want to add the word cat to our trie.

40
00:02:13.010 --> 00:02:16.452
Well, what we're gonna do
is one of our 26 children,

41
00:02:16.452 --> 00:02:19.810
which is the c, will simply be a child.

42
00:02:19.810 --> 00:02:24.440
And then from there, we're gonna go from
c and we're gonna add a child a, and

43
00:02:24.440 --> 00:02:26.732
from there we're gonna add a child t.

44
00:02:26.732 --> 00:02:30.650
And now we're gonna mark t in such a way,
and there's two methods for marking t.

45
00:02:30.650 --> 00:02:34.957
One of them is that it has one last
child called the asterisk child, and

46
00:02:34.957 --> 00:02:38.469
that denotes, hey,
this path that you're on is a word.

47
00:02:38.469 --> 00:02:43.400
The other way you can do that is that the
nodes themselves contain some sort of is

48
00:02:43.400 --> 00:02:44.680
word Boolean flag.

49
00:02:44.680 --> 00:02:48.731
I kinda like that approach better than
having this star approach because then you

50
00:02:48.731 --> 00:02:50.810
have to go check the 27th child.

51
00:02:50.810 --> 00:02:54.866
And then if the 27th child exists,
then you know for

52
00:02:54.866 --> 00:03:00.380
a fact I'd just rather have a more
stronger signal than an implicit one.

53
00:03:00.380 --> 00:03:03.150
So there you go, so we have cat,
it's been marked as a word.

54
00:03:04.220 --> 00:03:10.070
Then we want to add cats,
so how do we do that?

55
00:03:10.070 --> 00:03:14.181
Well, we go, okay,
we have a c link, we have an a link,

56
00:03:14.181 --> 00:03:17.606
we have a t link, well,
let's have an s link.

57
00:03:17.606 --> 00:03:22.284
We now have cats, we've now marked
that node also as a potential word.

58
00:03:22.284 --> 00:03:26.721
So then of course we add cattle.

59
00:03:26.721 --> 00:03:32.465
Well, that's gonna do the exact
same thing again, except for at t,

60
00:03:32.465 --> 00:03:38.922
we're gonna do this, t, l,
I didn't realize it ends right there, E.

61
00:03:38.922 --> 00:03:42.107
Well, good thing we're not doing the
asterisk approach cuz I would have just

62
00:03:42.107 --> 00:03:43.284
got my asterisk in trouble.

63
00:03:43.284 --> 00:03:46.737
All right,
it's a pretty good pun by the way.

64
00:03:46.737 --> 00:03:49.626
So there you go, is now marked these
three words and they all start with c.

65
00:03:49.626 --> 00:03:53.534
So if we were to add,
say another one say card,

66
00:03:53.534 --> 00:03:58.957
you could obviously see that we
could do an r and then a D, right?

67
00:03:58.957 --> 00:04:03.437
And D would be marked, and
then we can also just add other words in,

68
00:04:03.437 --> 00:04:04.968
such as MARC, right?

69
00:04:04.968 --> 00:04:10.680
We'd have an M, A, R, C, MARC,
there we go Mark the name,

70
00:04:10.680 --> 00:04:14.834
we have it right there, that's your name.

71
00:04:14.834 --> 00:04:16.887
So there we go,
we actually just added it to the tree,

72
00:04:16.887 --> 00:04:18.176
now we can traverse and find out.

73
00:04:18.176 --> 00:04:20.984
So if someone starts typing C,

74
00:04:20.984 --> 00:04:26.928
what do we have to do to give you
some amount of autocomplete back?

75
00:04:26.928 --> 00:04:30.969
Well, we're gonna have to start traverse
to see do we have an element that

76
00:04:30.969 --> 00:04:33.069
starts with, do we have the C branch?

77
00:04:33.069 --> 00:04:34.278
Yes, we do.

78
00:04:34.278 --> 00:04:35.990
Awesome, so I'm gonna start here.

79
00:04:35.990 --> 00:04:39.987
So often what this is done is usually
the C branch in this case would represent

80
00:04:39.987 --> 00:04:40.556
index 2.

81
00:04:40.556 --> 00:04:43.116
There are some easy ways to
be able to find this out,

82
00:04:43.116 --> 00:04:45.454
I figured I'd just throw this in here for
fun.

83
00:04:45.454 --> 00:04:49.097
Here's the fun little thing for those
that haven't done a lot of C programming.

84
00:04:49.097 --> 00:04:56.565
Here's a great way to know, so
you can have zero = "a".charCodeAt, right?

85
00:04:56.565 --> 00:05:00.531
So zero is 97, and then if you had a C,

86
00:05:00.531 --> 00:05:04.863
you could create a function called index,

87
00:05:04.863 --> 00:05:09.794
which say you pass in a string,
and this is simply

88
00:05:09.794 --> 00:05:14.868
going to return str.charCodeAt(0)- zero.

89
00:05:14.868 --> 00:05:19.828
And now you have the ability
to go idx("c"), still, right?

90
00:05:19.828 --> 00:05:23.040
So you're able to kinda do this little
game where you're actually just minusing

91
00:05:23.040 --> 00:05:25.825
character stuff out, ASCII symbols,
blah, blah, blah, blah, so

92
00:05:25.825 --> 00:05:27.170
you can kinda go into your array.

93
00:05:27.170 --> 00:05:29.708
You can also do this with unicode and
other stuff, but it may be,

94
00:05:29.708 --> 00:05:31.358
I don't know how it works in JavaScript.

95
00:05:31.358 --> 00:05:35.105
But if you have a proper language that
can give you an integer value out,

96
00:05:35.105 --> 00:05:38.744
you can offset into it and
do these kinda cool little tricks, right?

97
00:05:38.744 --> 00:05:40.621
All right, let's go back here.

98
00:05:40.621 --> 00:05:43.869
So that means if we were to go to C,
someone types a C, and

99
00:05:43.869 --> 00:05:48.000
we want to display a list of words,
how are we gonna do this?

100
00:05:48.000 --> 00:05:50.619
Well, what we're gonna have
to do is we're gonna have to

101
00:05:50.619 --> 00:05:52.400
do a depth first search, right?

102
00:05:52.400 --> 00:05:55.128
We can technically also do
a breadth first search,

103
00:05:55.128 --> 00:05:57.490
depends on how we want our words out.

104
00:05:57.490 --> 00:06:01.527
If we want them, say sorted naturally by,
say alphabetical ordering, if we do

105
00:06:01.527 --> 00:06:05.629
a depth first search, we will always get
ourselves the alphabetical ordering,

106
00:06:05.629 --> 00:06:08.030
which is actually pretty neat.

107
00:06:08.030 --> 00:06:12.665
That's all we have to do is do
a pre-order traversal, as we see a word,

108
00:06:12.665 --> 00:06:14.740
we put it into our results.

109
00:06:14.740 --> 00:06:19.890
And there we go, we'd actually get cat,
cats, cattle, card, and that'd be great.

110
00:06:19.890 --> 00:06:21.670
So we'd actually get them
in alphabetical ordering.

111
00:06:21.670 --> 00:06:24.971
But if we were to do this,
we have to simply traverse down, and

112
00:06:24.971 --> 00:06:27.070
add each one of these words to our list.

113
00:06:27.070 --> 00:06:32.170
We'd come back up, come here,
come here, my goodness, where's my pen?

114
00:06:32.170 --> 00:06:36.205
Come to right here, and there we go,
we found cattle, we found cat and cats.

115
00:06:36.205 --> 00:06:39.773
And lastly, we'd come back out here,
then come back up here, and

116
00:06:39.773 --> 00:06:44.063
we'd find card as well, and now we have
a nice list of words to display to a user.

117
00:06:44.063 --> 00:06:48.630
But another challenge is obviously
there's usually a huge set of words.

118
00:06:48.630 --> 00:06:52.560
So how do we kinda find the right words?

119
00:06:52.560 --> 00:06:56.195
Well, another thing you can do with
a trie is you can also add a score or

120
00:06:56.195 --> 00:07:00.600
a frequency, and these are things that can
be stored really at runtime, all that.

121
00:07:00.600 --> 00:07:04.336
So if you're building a trie because you
have these results, but you wanna make

122
00:07:04.336 --> 00:07:07.930
sure that the users' most selected items
are getting more often at the top.

123
00:07:07.930 --> 00:07:11.637
Have you ever used autocomplete on your
phone and you try to type in the word time

124
00:07:11.637 --> 00:07:14.631
and it autocompletes to tine,
the little pokey part of a fork?

125
00:07:14.631 --> 00:07:19.249
And you're like, how did you get that when
clearly time is the answer, why tine?

126
00:07:19.249 --> 00:07:21.143
It's because they have
a poor scoring algorithm.

127
00:07:21.143 --> 00:07:24.922
That used to happen all the time on
Android phones, when you'd swipe type time

128
00:07:24.922 --> 00:07:28.598
and you'd miss, it didn't correct
correctly, it's just frustrating.

129
00:07:28.598 --> 00:07:31.741
But nonetheless,
that is effectively how these things work,

130
00:07:31.741 --> 00:07:33.470
it is a simple depth first search.

131
00:07:33.470 --> 00:07:37.210
We've already done depth first searches,
we should already know how to do this.

132
00:07:37.210 --> 00:07:39.437
We've already done pre-order traversals,

133
00:07:39.437 --> 00:07:42.120
this really isn't a hard thing to do,
right?

134
00:07:42.120 --> 00:07:44.280
Now that we have the tools to do this,

135
00:07:44.280 --> 00:07:47.510
it is quite simple to be
able to build up this tree.

136
00:07:47.510 --> 00:07:51.910
And so insertion is really the hard part,
and deletion is really the hard part.

137
00:07:51.910 --> 00:07:56.310
Insertion is just a simple iterative
loop where you go to the current node.

138
00:07:56.310 --> 00:08:00.330
So we can do this, we can kind of
write this out in pseudocode, right?

139
00:08:00.330 --> 00:08:03.156
So insertion,
we really need to just start at a node.

140
00:08:03.156 --> 00:08:04.552
Really, that just needs to be the head.

141
00:08:04.552 --> 00:08:05.808
So we don't even need to make this.

142
00:08:05.808 --> 00:08:08.028
We need to insert some sort of string,
right?

143
00:08:08.028 --> 00:08:11.868
So we can have our current equal our head,
and

144
00:08:11.868 --> 00:08:16.328
then we can simply walk
through the character list.

145
00:08:16.328 --> 00:08:21.614
So we can do a little for c in str, right?

146
00:08:21.614 --> 00:08:24.360
And at this point,
we simply walk to each point.

147
00:08:24.360 --> 00:08:27.168
If current has the character,

148
00:08:27.168 --> 00:08:32.033
then we can just simply set
current to the character.

149
00:08:34.959 --> 00:08:39.044
Else, we're gonna have to create it,
right?

150
00:08:39.044 --> 00:08:42.713
So we could create a new node, and
I'll just have this thing called create N,

151
00:08:42.713 --> 00:08:43.795
right, create node.

152
00:08:43.795 --> 00:08:45.141
Very, very simple, right?

153
00:08:45.141 --> 00:08:45.853
Look at that.

154
00:08:45.853 --> 00:08:50.879
Then we could do current,
this character equals node, I should

155
00:08:50.879 --> 00:08:57.033
have called it n if I was smart, which
I'm not, and then current equals node.

156
00:08:57.033 --> 00:08:59.773
There we go,
that's really all insertion is,

157
00:08:59.773 --> 00:09:03.480
is we're just walking to the end
inserting if we need to insert.

158
00:09:03.480 --> 00:09:09.054
And then of course, current,
well, that's in the for loop.

159
00:09:09.054 --> 00:09:16.332
Outside of the for loop,
we need to say curr.isword = true.

160
00:09:16.332 --> 00:09:19.255
And there we go,
we've just inserted into our trie.

161
00:09:19.255 --> 00:09:23.130
It's actually not all that hard to be
able to write this data structure,

162
00:09:23.130 --> 00:09:27.005
it's immensely useful, and
often you're gonna find that you get asked

163
00:09:27.005 --> 00:09:30.326
some variation of this question,
probably in an interview.

164
00:09:30.326 --> 00:09:33.453
I really, really like, we've asked
them at Netflix, they're fantastic.

165
00:09:33.453 --> 00:09:38.647
Deletion, of course is the exact opposite,
easier to use recursion for

166
00:09:38.647 --> 00:09:42.923
deletion, because you want to
get to the point of the node.

167
00:09:42.923 --> 00:09:46.948
And then in post operation,
you want to delete your way back up.

168
00:09:46.948 --> 00:09:50.813
Remember how I said that there's three
parts to recursion, pre, recurse, post?

169
00:09:50.813 --> 00:09:55.800
This would be a post operation or a post
traversal that makes a lot of sense.

170
00:09:55.800 --> 00:10:00.664
Long as you have your parent and yourself
and the expected node in which you,

171
00:10:00.664 --> 00:10:04.399
or the expected link in which
you want to be able to delete.

172
00:10:04.399 --> 00:10:07.708
You get all the way to it,
get the link you wanna delete,

173
00:10:07.708 --> 00:10:10.463
delete it from your parent
as you walk back up.

174
00:10:10.463 --> 00:10:12.791
And so it makes sense,
cuz if you delete before you go,

175
00:10:12.791 --> 00:10:15.836
you're only gonna make one deletion,
and then the whole tree is gone.

176
00:10:15.836 --> 00:10:17.615
You don't wanna do that,
that sounds terrible.

177
00:10:17.615 --> 00:10:22.620
And of course, you only delete if
you're the only link left, right?

178
00:10:22.620 --> 00:10:24.430
Or you could just leave the node around,
right?

179
00:10:24.430 --> 00:10:26.440
Depends on how you wanna
use your memory or not.

180
00:10:26.440 --> 00:10:27.853
That makes deletion way faster,

181
00:10:27.853 --> 00:10:30.982
it makes it a constant time deletion
versus a constant time deletion, but

182
00:10:30.982 --> 00:10:34.377
there's a constant of times two on that
deletion cuz you have to delete back up.

183
00:10:34.377 --> 00:10:36.845
So it's a little different,
just things to trade off,

184
00:10:36.845 --> 00:10:40.259
things to be able to talk about, things
to be able to kind of explain to someone

185
00:10:40.259 --> 00:10:42.059
why you choose one way versus the other.

186
00:10:42.059 --> 00:10:44.626
If memory is not a problem, leave it,

187
00:10:44.626 --> 00:10:47.929
if it is a problem,
remove it, you get the idea.

188
00:10:47.929 --> 00:10:52.807
We always had to delete it at Netflix
cuz often we'd run on small devices,

189
00:10:52.807 --> 00:10:57.230
so we'd actually use a special data
structure that is like a trie.

190
00:10:57.230 --> 00:10:59.720
That's how we did our caching,
I explained Falkor yesterday.

191
00:10:59.720 --> 00:11:01.916
Falkor is effectively just a trie,
that's all it is.

192
00:11:01.916 --> 00:11:05.675
It's a big trie that is represented as
a tree and each one of the keys in,

193
00:11:05.675 --> 00:11:07.253
that's how you move around.

194
00:11:07.253 --> 00:11:09.572
So it was pretty fun,
it was pretty neat, so

195
00:11:09.572 --> 00:11:11.716
I've used a trie in my real life as well.

196
00:11:11.716 --> 00:11:14.881
I just kinda wanted to walk through it and
talk about it cuz they're super cool.

197
00:11:14.881 --> 00:11:17.885
They're not all that fun to implement,
but they are super cool.

198
00:11:17.885 --> 00:11:21.370
So there we go, everyone good to go,
do we have any questions?

199
00:11:22.800 --> 00:11:25.709
&gt;&gt; Someone did mention this
comes up in interviews, and

200
00:11:25.709 --> 00:11:29.660
I'm interested, what does the interview
question look like on a test?

201
00:11:29.660 --> 00:11:33.699
&gt;&gt; Interview question is often like,
I have a list of words and I wanna build

202
00:11:33.699 --> 00:11:38.421
an autocomplete, when you hear the word
autocomplete, be like, gotcha, right?

203
00:11:38.421 --> 00:11:40.491
Or I wanna build a caching mechanism,

204
00:11:40.491 --> 00:11:43.791
often caching mechanism if you
can see a path that they want,

205
00:11:43.791 --> 00:11:48.082
and the path can vary in various points
kinda like the Falkor example, right?

206
00:11:48.082 --> 00:11:54.120
So if our path to our data looks
a little something like videos, right,

207
00:11:54.120 --> 00:11:59.151
Id, title, and we want to cache
this in some sort of graph,

208
00:11:59.151 --> 00:12:02.391
Id is the thing that can vary, right?

209
00:12:02.391 --> 00:12:05.099
We can have one, two, three, we can have
four, five, six, we can have seven, eight,

210
00:12:05.099 --> 00:12:07.450
nine, so obviously we're gonna want
something that has like say, videos,

211
00:12:07.450 --> 00:12:08.578
does videos even exists?

212
00:12:08.578 --> 00:12:11.247
It does exist, does this Id exist?

213
00:12:11.247 --> 00:12:12.580
This Id does exist.

214
00:12:12.580 --> 00:12:14.648
Does title exist on that Id?

215
00:12:14.648 --> 00:12:16.834
It does, here you go, here's your cache.

216
00:12:16.834 --> 00:12:20.260
That Id doesn't exist, sir, we don't have
it, we don't have title, we don't have it.

217
00:12:20.260 --> 00:12:23.847
So it's usually like a caching slash
autocomplete problem that you're

218
00:12:23.847 --> 00:12:25.620
often gonna see this in.

219
00:12:25.620 --> 00:12:29.130
&gt;&gt; What was written in
the first line after the else?

220
00:12:29.130 --> 00:12:31.448
&gt;&gt; The first line of the else, yeah, yeah,

221
00:12:31.448 --> 00:12:34.620
that was some super pseudocode
right there, right?

222
00:12:34.620 --> 00:12:37.300
I simply just said, hey,
let's create a node, right?

223
00:12:37.300 --> 00:12:38.020
What is a node?

224
00:12:38.020 --> 00:12:43.017
A node of course is gonna look
something along the lines of isword,

225
00:12:43.017 --> 00:12:48.637
which is a Boolean value, plus a children,
which could be a 26th-sized

226
00:12:48.637 --> 00:12:53.450
array of nodes,
if we're doing an English autocomplete.

227
00:12:53.450 --> 00:12:56.410
So it's kinda like a hard coded, this is
the size of what we're gonna be doing.

228
00:12:57.450 --> 00:13:00.803
If it was a language in which did that
of course, these would be pointers.

229
00:13:00.803 --> 00:13:02.571
You could just keep on creating that or

230
00:13:02.571 --> 00:13:05.280
else you'd explode your
memory until you die.

231
00:13:05.280 --> 00:13:08.590
So there you go,
that would be creating out.

232
00:13:08.590 --> 00:13:09.880
We got another question?

233
00:13:09.880 --> 00:13:13.590
&gt;&gt; Yeah, sorry,
you mentioned this is constant time.

234
00:13:13.590 --> 00:13:18.328
&gt;&gt; So it is constant time cuz
you have to determine what is N?

235
00:13:18.328 --> 00:13:22.624
N in this case is not the string
we're inputting into the algorithm,

236
00:13:22.624 --> 00:13:24.338
it's the amount of nodes.

237
00:13:24.338 --> 00:13:28.685
As we add more and more nodes,
as we add hundreds upon hundreds of words,

238
00:13:28.685 --> 00:13:31.170
does our lookup time change?

239
00:13:31.170 --> 00:13:35.590
It doesn't change, it's based on some
finite predetermined amount of length.

240
00:13:35.590 --> 00:13:39.992
If the longest English word is 12,
then you're right, it's 12 node checks and

241
00:13:39.992 --> 00:13:40.619
that is it.

242
00:13:40.619 --> 00:13:45.515
So that's a constant time is
that's how you can think of it.

243
00:13:45.515 --> 00:13:49.848
Often you'll run to these algorithms
where N may not be what you think it is,

244
00:13:49.848 --> 00:13:52.365
you can kinda swap it
around in a unique way.

245
00:13:52.365 --> 00:13:58.205
&gt;&gt; So it's technically the height, but the
height is bound by the English dictionary?

246
00:13:58.205 --> 00:14:03.391
&gt;&gt; Yes, so Graham just said it's
technically O(H), H being the height,

247
00:14:03.391 --> 00:14:07.674
but height is usually bound by
some maximum sequence, yes.

248
00:14:07.674 --> 00:14:12.180
I'm sure if there's a way in which the
height is not bound by maximum sequence,

249
00:14:12.180 --> 00:14:16.705
then it would now then be O(H), right,
if you had an ever running longer one.

250
00:14:16.705 --> 00:14:19.725
But I'd probably question that
you're probably not using the right

251
00:14:19.725 --> 00:14:22.485
data structure if you have some
ever longer running string that

252
00:14:22.485 --> 00:14:23.647
keeps on getting bigger.

253
00:14:23.647 --> 00:14:24.719
Probably not the right way,

254
00:14:24.719 --> 00:14:27.230
cuz now you're just gonna have
a huge amount of memory being used.

