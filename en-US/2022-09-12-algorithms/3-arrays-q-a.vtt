WEBVTT

1
00:00:00.100 --> 00:00:04.760
Any questions on what we've covered
up to this point on what arrays are.

2
00:00:04.760 --> 00:00:08.590
&gt;&gt; So you're saying there is no insert or
push or pop in arrays.

3
00:00:08.590 --> 00:00:12.792
&gt;&gt; The question was, there is no insert or
push or pop and an arrays?

4
00:00:12.792 --> 00:00:16.272
Technically no, not if it's a static
array or a traditional array,

5
00:00:16.272 --> 00:00:19.572
there is no methods on it In fact,
in some of the older languages,

6
00:00:19.572 --> 00:00:21.553
there's not even dot length, right?

7
00:00:21.553 --> 00:00:25.937
You have to pass the length as well as the
pointer to the beginning of the array and

8
00:00:25.937 --> 00:00:27.844
just say, hey, here's my type.

9
00:00:27.844 --> 00:00:28.912
Here's where it starts.

10
00:00:28.912 --> 00:00:30.400
Here's how many I have.

11
00:00:30.400 --> 00:00:37.060
That's why when you look at any C program,
the entry point is an array of strings.

12
00:00:37.060 --> 00:00:39.000
And how many strings they are?

13
00:00:39.000 --> 00:00:43.650
Right, like it it has to tell you how
to interpret these pieces of data.

14
00:00:43.650 --> 00:00:46.364
&gt;&gt; If an array doesn't grow,
does its memory and

15
00:00:46.364 --> 00:00:51.430
size and memory allocation have to be
specified at initialization of the array?

16
00:00:51.430 --> 00:00:54.693
&gt;&gt; Whenever if ,so if you use rust and
you try to use an array,

17
00:00:54.693 --> 00:00:57.897
you will realize right away
that you have to put in a size.

18
00:00:57.897 --> 00:01:01.629
It has to be a specified size and often
you'll see this all over the place that

19
00:01:01.629 --> 00:01:05.207
you have to like tell it its size and
that's the size that it's created.

20
00:01:05.207 --> 00:01:07.187
Now, it can be a variable still, right?

21
00:01:07.187 --> 00:01:11.200
You can still create an array with n as
its size in a lot of these languages but

22
00:01:11.200 --> 00:01:13.125
it still has to be a specified size.

23
00:01:13.125 --> 00:01:17.246
There are also like compiled time arrays
where you actually have to be like

24
00:01:17.246 --> 00:01:21.305
this thing is a 3 it's always a 3,
it is always going to be a 3, right?

25
00:01:21.305 --> 00:01:23.477
There's there's kind of
these different styles.

26
00:01:23.477 --> 00:01:27.644
But nonetheless, an array has to have
its size as part of its allocation.

27
00:01:27.644 --> 00:01:28.693
You can't grow it,

28
00:01:28.693 --> 00:01:32.661
you can reallocate it, meaning you're
going to have to create a new array.

29
00:01:32.661 --> 00:01:36.541
Take your old array, write it into
the new one, you now have a bigger array.

30
00:01:36.541 --> 00:01:40.691
You now have more room but
nonetheless, it is these fixed sizes.

31
00:01:40.691 --> 00:01:44.259
So, the question was, when you're
creating an array in JavaScript,

32
00:01:44.259 --> 00:01:47.595
are you creating something that
has an array underneath the hood?

33
00:01:47.595 --> 00:01:48.290
In some sense?

34
00:01:48.290 --> 00:01:49.743
Yes, you are definitely
create there is an array.

35
00:01:49.743 --> 00:01:53.841
There is a literal array at some point
,there is a memory buffer at some point

36
00:01:53.841 --> 00:01:57.442
underneath the hood, but
we don't see it that way in JavaScript.

37
00:01:57.442 --> 00:01:59.092
And you also don't see it in Java.

38
00:01:59.092 --> 00:02:02.731
Java has this exact same data structure
that they use obviously JavaScript.

39
00:02:02.731 --> 00:02:06.198
Again, there's a bunch of conditions that
are a part of your array that make it

40
00:02:06.198 --> 00:02:07.994
actually a lot more tricky to simply to.

41
00:02:07.994 --> 00:02:11.466
I'm sure they have a turn it into
a map once you have too many items or

42
00:02:11.466 --> 00:02:14.628
once you have too sparse of an array,
I'm sure they have a lot

43
00:02:14.628 --> 00:02:18.430
of algorithms that make it 10
times more complicated than this.

44
00:02:18.430 --> 00:02:20.596
But for the most part it is.

45
00:02:20.596 --> 00:02:22.352
It operates like an array.

46
00:02:22.352 --> 00:02:23.350
I don't wanna give it away.

47
00:02:24.990 --> 00:02:26.060
I don't.

48
00:02:26.060 --> 00:02:26.730
1 more question.

49
00:02:26.730 --> 00:02:30.860
&gt;&gt; I guess how big is the array
then that you instantiate?

50
00:02:30.860 --> 00:02:33.266
So, that is part of optimizing.

51
00:02:33.266 --> 00:02:37.424
So, like in Rust, if I'm not mistaken,
if you create a new vector,

52
00:02:37.424 --> 00:02:42.190
it's gonna create a effectively a memory
buffer with the size 5 underneath.

53
00:02:42.190 --> 00:02:45.815
And so, as you push and pop, it has 5
units for you to be able to play and

54
00:02:45.815 --> 00:02:47.057
now is that efficient?

55
00:02:47.057 --> 00:02:48.485
Well, that's the problem.

56
00:02:48.485 --> 00:02:52.416
How big do you need to create
your underlying buffer to be able

57
00:02:52.416 --> 00:02:56.965
to effectively use that space without
having to re allocate too much or

58
00:02:56.965 --> 00:02:58.445
without not using it?

59
00:02:58.445 --> 00:03:01.175
Right, cuz we could all create
10,000 units and be like, hey, look,

60
00:03:01.175 --> 00:03:02.970
we'll never have to reallocate again.

61
00:03:02.970 --> 00:03:05.397
But if 10,000 units are big units,

62
00:03:05.397 --> 00:03:09.010
you're gonna use a lot of memory,
just to have that in there.

63
00:03:09.010 --> 00:03:12.287
So, it's kind of it's a game people play
and we'll go over these it'll make a lot

64
00:03:12.287 --> 00:03:14.724
more sense once we go over
the data structures that are used.

