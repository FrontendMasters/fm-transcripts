WEBVTT

1
00:00:00.000 --> 00:00:03.826
All right, so this is kind of
an interesting one that Java did.

2
00:00:03.826 --> 00:00:09.331
I don't really love this one, but
it's kind of a fun one in the sense

3
00:00:09.331 --> 00:00:15.532
that we have an item T in which we need
to find list, then we need to remove it.

4
00:00:15.532 --> 00:00:18.122
So you'll see that this
is this is available.

5
00:00:18.122 --> 00:00:20.702
A lot of times when you're
using a list operation,

6
00:00:20.702 --> 00:00:23.467
you may not realize how bad
this performance could be.

7
00:00:23.467 --> 00:00:25.905
My guess is that Java's really,
really smart,

8
00:00:25.905 --> 00:00:29.780
and they do something like also include
HashMap as well underneath the hood.

9
00:00:29.780 --> 00:00:34.535
So when you look it up by item, it can
instantly look up where this node is,

10
00:00:34.535 --> 00:00:36.093
and then delete it out.

11
00:00:36.093 --> 00:00:38.268
To me, that seems to make most sense.

12
00:00:38.268 --> 00:00:42.495
But we'll see what happens here,
all right.

13
00:00:42.495 --> 00:00:43.625
Maybe maybe not.

14
00:00:43.625 --> 00:00:45.632
Actually think about, maybe not.

15
00:00:45.632 --> 00:00:49.245
All right, so well, what was I doing?

16
00:00:49.245 --> 00:00:54.333
Yeah, so we'd need to do the same thing
as get, or remove at, or an insert at.

17
00:00:54.333 --> 00:00:59.420
We'll need to do the whole
let curr = this.head, for

18
00:00:59.420 --> 00:01:05.769
(let i = 0, i &lt;, We don't even have
to do that at all, this outline.

19
00:01:05.769 --> 00:01:09.843
Nice, and of course we need the check for
current being something.

20
00:01:09.843 --> 00:01:14.000
We're gonna keep on scrolling until we get
to the end, or currents does not exist.

21
00:01:14.000 --> 00:01:16.555
But I guess you don't really
technically have to do that, but for

22
00:01:16.555 --> 00:01:18.193
the case of TypeScript, we have to do it.

23
00:01:18.193 --> 00:01:21.673
Because if i is less than length,
current better be a real object, or

24
00:01:21.673 --> 00:01:24.322
we've completely screwed
up our implementation.

25
00:01:24.322 --> 00:01:27.132
But again,
TypeScript doesn't really like it.

26
00:01:27.132 --> 00:01:27.753
Next, right?

27
00:01:27.753 --> 00:01:33.036
So if current does not, let's see,
curr.value is not equal item,

28
00:01:33.036 --> 00:01:36.784
or I guess would be the other way around,
right?

29
00:01:36.784 --> 00:01:39.331
If it does equal the item,
we have found it, right?

30
00:01:39.331 --> 00:01:40.268
Yay, we're good.

31
00:01:40.268 --> 00:01:41.436
So we can break out of here.

32
00:01:41.436 --> 00:01:44.032
I guess we could put something in here.

33
00:01:44.032 --> 00:01:47.310
We could do it like a current value and
a current value of blah, blah,

34
00:01:47.310 --> 00:01:50.377
blah, blah, we'll just keep it like this,
very easy to read.

35
00:01:50.377 --> 00:01:53.169
Awesome, so
current value equals item, we break,

36
00:01:53.169 --> 00:01:57.305
else we're gonna keep on scrolling current
until we go to the end of the list.

37
00:01:57.305 --> 00:02:00.850
If there is no current,

38
00:02:00.850 --> 00:02:06.179
there is no item to remove, right?

39
00:02:06.179 --> 00:02:08.568
That makes sense, so
we're done, we're out of here.

40
00:02:08.568 --> 00:02:13.419
But if there is one, well, now we have
to actually do something about it.

41
00:02:13.419 --> 00:02:14.492
So how do we do it?

42
00:02:14.492 --> 00:02:18.534
Well, since we're not involving
ourselves in this circular list item,

43
00:02:18.534 --> 00:02:22.918
what we really need to do is think about
the three possible conditions, right?

44
00:02:22.918 --> 00:02:24.526
Really, there's only one condition,

45
00:02:24.526 --> 00:02:26.661
we're just gonna have to do
some IF guards around it.

46
00:02:26.661 --> 00:02:33.788
There is the node we want to remove, and
possibilities of being pointed to, right?

47
00:02:33.788 --> 00:02:38.497
So we're gonna need to take whatever
this is that's pointing, and point over.

48
00:02:38.497 --> 00:02:40.433
We're gonna need to take this one,
whatever it is,

49
00:02:40.433 --> 00:02:41.670
whether it's undefined or not.

50
00:02:41.670 --> 00:02:45.175
If it does exist we're gonna
want to point through.

51
00:02:45.175 --> 00:02:49.868
Then at that point,
we can break these links, and we got it.

52
00:02:49.868 --> 00:02:54.714
So this is really just deletion in
the most general sense, so we can do that.

53
00:02:54.714 --> 00:02:57.698
So we'll go like this, const,
or we already have current,

54
00:02:57.698 --> 00:03:00.045
which is the thing we're
gonna want to delete.

55
00:03:00.045 --> 00:03:01.056
We can now go like this.

56
00:03:01.056 --> 00:03:07.936
Let's go, this.length- -,
do some book keeping, awesome.

57
00:03:07.936 --> 00:03:10.293
We can do kind of a shortcut
if we really wanted to.

58
00:03:10.293 --> 00:03:17.697
If length = 0, then this.head =
this.tail = undefined, awesome.

59
00:03:17.697 --> 00:03:22.896
Return, nothing left to do,
we're good to go, this is great.

60
00:03:22.896 --> 00:03:25.500
Still, lot of IF conditions
are about to happen,

61
00:03:25.500 --> 00:03:27.737
so then let's just have some fun and
do it.

62
00:03:27.737 --> 00:03:29.443
We're gonna break it up
a little bit differently.

63
00:03:29.443 --> 00:03:32.269
So now that we have this,
let's just do that general case.

64
00:03:32.269 --> 00:03:34.966
First, let's see if the things previous.

65
00:03:34.966 --> 00:03:39.416
If we have a previous,
let's set our previous to our next.

66
00:03:39.416 --> 00:03:42.559
If we have a previous,
we need to set it to our next, right?

67
00:03:42.559 --> 00:03:44.809
We need to hop over,
that's this top branch right here.

68
00:03:48.463 --> 00:03:51.644
So if (curr.prev),

69
00:03:51.644 --> 00:03:56.099
then curr.prev = curr.next.

70
00:03:56.099 --> 00:03:58.019
That makes sense, right?

71
00:03:58.019 --> 00:04:03.967
And again, the other direction, if
(curr.next), then curr.next = curr.prev,

72
00:04:03.967 --> 00:04:08.501
so now we've officially removed
our current from our linked list.

73
00:04:08.501 --> 00:04:11.672
If we started our head now,
we would not run into current,

74
00:04:11.672 --> 00:04:14.479
unless our current is currently our head,
right?

75
00:04:14.479 --> 00:04:18.080
We need to do a little bit of extra
updating at the very, very end here.

76
00:04:18.080 --> 00:04:22.848
So now, we're gonna take our
curr.prev = curr.next = undefined,

77
00:04:22.848 --> 00:04:26.114
now we have broken current
from the linked list.

78
00:04:26.114 --> 00:04:30.614
So now we should theoretically have two
separate lists going on right here,

79
00:04:30.614 --> 00:04:34.569
current, which is all by itself,
and the rest of our linked list.

80
00:04:34.569 --> 00:04:39.977
So we can do couple extra checks,
if curr === this.head,

81
00:04:39.977 --> 00:04:42.993
well, then that's bad, right?

82
00:04:42.993 --> 00:04:45.760
So we can't quite break that, can we?

83
00:04:45.760 --> 00:04:47.050
No, we can't.

84
00:04:47.050 --> 00:04:51.048
See, operations become very obvious right
way that you've done something wrong.

85
00:04:51.048 --> 00:04:54.592
this.head = curr.next, right?

86
00:04:54.592 --> 00:04:57.706
Move it up in the list.

87
00:04:57.706 --> 00:05:00.992
And then this, let's see it,
all right, that's good.

88
00:05:00.992 --> 00:05:06.143
Or, if curr === this.tail,
exact same thing except for

89
00:05:06.143 --> 00:05:10.493
the other way around,
this.tail = curr.prev.

90
00:05:10.493 --> 00:05:14.189
We'll walk it back one step,
just to make sure our tail or

91
00:05:14.189 --> 00:05:17.124
our head are now pointing
at the newest item.

92
00:05:17.124 --> 00:05:19.188
And then lastly,
completely break it all off,

93
00:05:19.188 --> 00:05:21.363
you don't have to do this
in the JavaScript land.

94
00:05:21.363 --> 00:05:24.186
JavaScript automatically clean this up for
you.

95
00:05:24.186 --> 00:05:26.612
And then finally, current.value.

96
00:05:26.612 --> 00:05:31.316
Awesome, I think did goof
up one return right here.

97
00:05:31.316 --> 00:05:37.267
Yes, so const out = this.head.value,

98
00:05:42.139 --> 00:05:42.824
Awesome, there we go.

99
00:05:42.824 --> 00:05:44.672
There was that one that we goofed up.

100
00:05:44.672 --> 00:05:45.848
Did we goof up any other ones?

101
00:05:45.848 --> 00:05:47.311
Yes.

102
00:05:47.311 --> 00:05:48.184
There's that as well, right?

103
00:05:48.184 --> 00:05:50.257
Because we're supposed
to return alpha value.

104
00:05:50.257 --> 00:05:52.945
So we're kind of chugging
away at this point.

105
00:05:52.945 --> 00:05:55.526
We've gotten pretty far out, and

106
00:05:55.526 --> 00:06:01.413
now you can pretty much imagine that we
have made it to the last and final parts.

107
00:06:01.413 --> 00:06:02.655
It's feeling so close,

108
00:06:02.655 --> 00:06:06.034
we're really happy that we're
almost done with this linked list.

109
00:06:06.034 --> 00:06:07.691
But there's a couple
more loops we got to do.

110
00:06:07.691 --> 00:06:12.379
So instead of just doing this, we could
probably generalize this, don't you think?

111
00:06:12.379 --> 00:06:15.343
Don't you think that we don't need to
keep doing this over and over again?

112
00:06:15.343 --> 00:06:18.582
Martin Fowler's rule of three
is usually what I deal with.

113
00:06:18.582 --> 00:06:24.955
Since we have one here, and we have one,
wherever insert is, here's insert.

114
00:06:24.955 --> 00:06:29.118
We have one right here, that means we
can probably do something a bit smarter,

115
00:06:29.118 --> 00:06:30.139
don't you think?

116
00:06:30.139 --> 00:06:33.605
So let's just take all of this out and
use the old rule of three.

117
00:06:33.605 --> 00:06:36.402
I like the rule of three,
it just makes me feel happy when I do it.

118
00:06:36.402 --> 00:06:40.106
All right, so do this thing.

119
00:06:40.106 --> 00:06:42.921
But we can't quite do it here,
this one is kind of unique.

120
00:06:42.921 --> 00:06:45.385
Now that I think about it,
we can't actually do it here.

121
00:06:45.385 --> 00:06:48.035
I thought we can do it here,
it's actually here that we can do it.

122
00:06:48.035 --> 00:06:53.567
So we'll just pull it out either way,
private getAt,

123
00:06:53.567 --> 00:06:58.270
and so this will be an index number,
awesome.

124
00:06:58.270 --> 00:07:05.314
And we can go const node = this.getAt,
index.

125
00:07:05.314 --> 00:07:11.827
If node does not exist, return undefined,
actually we don't even need to do that.

126
00:07:11.827 --> 00:07:17.252
I'm just gonna go return node,
my goodness, TypeScript.

127
00:07:21.987 --> 00:07:24.403
There you go, that's beautiful?

128
00:07:24.403 --> 00:07:28.410
Can do value, and really we don't even
need to do that, we can actually just,

129
00:07:28.410 --> 00:07:30.193
there we go, beautiful, right?

130
00:07:30.193 --> 00:07:35.136
We have this nice thing nicely done
put it down, and then we can go back

131
00:07:35.136 --> 00:07:40.011
to our insert and just take that
out as well, might as well, right?

132
00:07:40.011 --> 00:07:46.577
const curr = this.getAt index,
and if, this should always work.

133
00:07:48.801 --> 00:07:51.934
So we can just take this last
little bit right here, right?

134
00:07:51.934 --> 00:07:53.827
That's what we're doing right there.

135
00:07:53.827 --> 00:07:55.379
Cuz we already know of course,

136
00:07:55.379 --> 00:07:58.495
we've already done all of our
own personal bounce checking.

137
00:07:58.495 --> 00:08:01.065
We already know everything's good,
so we can just rip it right out.

138
00:08:01.065 --> 00:08:04.789
Do that, awesome, awesome, awesome,
we have now achieved full on,

139
00:08:04.789 --> 00:08:07.967
we will achieve at least full
on rule of three, so here we go.

140
00:08:07.967 --> 00:08:12.917
removeAt, exact same thing, we need to
remove this thing at a specific index.

141
00:08:12.917 --> 00:08:19.071
So let's go like this,
const node = this.getAt(idx),

142
00:08:19.071 --> 00:08:23.302
if not node, return undefined, right?

143
00:08:23.302 --> 00:08:26.336
There's nothing left to do,
we've already found the node, or

144
00:08:26.336 --> 00:08:29.438
there's no node to be found,
we don't need to return anything.

145
00:08:29.438 --> 00:08:32.749
But again, this is where that
inner software engineering me,

146
00:08:32.749 --> 00:08:34.004
like can't even do it.

147
00:08:34.004 --> 00:08:37.792
Even though it's not rule of three,
it's only rule of two,

148
00:08:37.792 --> 00:08:40.779
I feel like this removal logic is just so
awful.

149
00:08:40.779 --> 00:08:43.938
I'd rather kind of abstracted out,
I don't know what it is inside of me.

150
00:08:43.938 --> 00:08:47.534
This probably happens to you, too,
where it's just like you can't even

151
00:08:47.534 --> 00:08:50.557
handle the fact that that exists,
that's at least how feel.

152
00:08:50.557 --> 00:08:56.658
So we'll have removed node, node, node, T.

153
00:08:56.658 --> 00:08:58.908
Awesome, we know this thing exists.

154
00:08:58.908 --> 00:09:02.793
It's gonna return a T, fantastic.

155
00:09:02.793 --> 00:09:06.855
And this one's trying to claim,
that's not going to return the T,

156
00:09:06.855 --> 00:09:08.863
we'll just go like this, went on.

157
00:09:08.863 --> 00:09:11.811
There we go, and now we just need,

158
00:09:11.811 --> 00:09:17.219
the current needs to be replaced as,
current node, awesome.

159
00:09:17.219 --> 00:09:20.953
So, there we go, we've just generalized
this function really quickly,

160
00:09:20.953 --> 00:09:24.808
pulled it all out, I wasn't actually
technically planning on doing this but

161
00:09:24.808 --> 00:09:26.252
it just feels right to do it.

162
00:09:26.252 --> 00:09:28.613
I can't actually not do it,
sometimes it's how feel.

163
00:09:28.613 --> 00:09:31.185
So there we go,
we now have this removal of the node,

164
00:09:31.185 --> 00:09:34.584
which means that our remove at and
are removed can now share the code.

165
00:09:34.584 --> 00:09:39.454
return this.remove node,
curr, very great, and

166
00:09:39.454 --> 00:09:43.999
then of course remove at,
we can do that as well.

167
00:09:46.419 --> 00:09:50.131
Awesome, so we pretty much have everything
written except for one last little bit,

168
00:09:50.131 --> 00:09:52.866
which is our get function,
which I deleted and didn't keep.

169
00:09:52.866 --> 00:09:57.371
So we'll just write it really quickly,

170
00:09:57.371 --> 00:10:01.749
curr = this.head, for (let i = 0.

171
00:10:01.749 --> 00:10:05.679
If you guys were smarter than me and
you actually kept it around, good on you,

172
00:10:05.679 --> 00:10:06.591
I don't do that.

173
00:10:06.591 --> 00:10:15.700
that.length, It's trouble sometimes.

174
00:10:15.700 --> 00:10:17.811
Curr = curr.next, there we go.

175
00:10:17.811 --> 00:10:20.097
return curr, there we go.

176
00:10:20.097 --> 00:10:21.996
So we've actually gone through and

177
00:10:21.996 --> 00:10:25.865
we've implemented every last detail
when it comes to this linked list.

178
00:10:25.865 --> 00:10:27.880
So I know that was a lot.

179
00:10:27.880 --> 00:10:31.758
I see faces of,
my goodness why would you do this to us?

180
00:10:31.758 --> 00:10:37.848
I'm sorry I didn't, this is why I tend to
want to skip this section cuz it's just so

181
00:10:37.848 --> 00:10:41.517
big, it's hard to see why it's so
complicated.

182
00:10:41.517 --> 00:10:46.241
But it's really not complicated at
the same time as it is super complicated.

183
00:10:46.241 --> 00:10:49.886
And think this really goes to show you
that if you have the wrong function

184
00:10:49.886 --> 00:10:52.755
interface, it can make things
a lot more complicated.

185
00:10:52.755 --> 00:10:55.826
I chose the Java one just because
I figured most people would be

186
00:10:55.826 --> 00:10:59.560
at least familiar with that, and yes,
it causes some level of headaches.

187
00:10:59.560 --> 00:11:05.083
So the JavaScript one would have been lot
easier, cuz I would have had unshift,

188
00:11:05.083 --> 00:11:10.029
shift, push and pop, then we could
have skipped splice and slice, and

189
00:11:10.029 --> 00:11:12.602
reverse and all the other fun stuff.

190
00:11:12.602 --> 00:11:13.500
All right, so there we go.

191
00:11:13.500 --> 00:11:19.322
So that is doubly linked list
implemented in sweet, sweet, TypeScript.

192
00:11:19.322 --> 00:11:20.317
Is there any questions?

193
00:11:23.361 --> 00:11:26.851
&gt;&gt; Can you go to the Insert ads?

194
00:11:26.851 --> 00:11:27.606
&gt;&gt; Yeah.

195
00:11:27.606 --> 00:11:31.669
&gt;&gt; So line 17, I think?

196
00:11:31.669 --> 00:11:33.838
&gt;&gt; 17 offset?

197
00:11:33.838 --> 00:11:34.703
&gt;&gt; Yes.

198
00:11:34.703 --> 00:11:35.553
&gt;&gt; Down here?

199
00:11:35.553 --> 00:11:40.842
&gt;&gt; Yep, is that supposed to be-

200
00:11:40.842 --> 00:11:44.238
&gt;&gt; I think you're right, hold on,

201
00:11:44.238 --> 00:11:50.953
insertAt, Now you got me all night,
wait no, no, no.

202
00:11:54.450 --> 00:12:00.099
&gt;&gt; I think you're right, hold on,
did I just goof that one up on that?

203
00:12:00.099 --> 00:12:01.961
Now you got me all questioning though.

204
00:12:01.961 --> 00:12:03.088
Did do this one part wrong?

205
00:12:03.088 --> 00:12:08.782
Let's find out, node.next = curr, so we
point to that one, node.prev = curr.prev.

206
00:12:08.782 --> 00:12:11.158
Awesome, so
we have our two correctly attached ones.

207
00:12:11.158 --> 00:12:14.912
So now we need to get the reverse out,
right?

208
00:12:14.912 --> 00:12:20.026
So that means our current previous, the
one that we are used to be pointing to,

209
00:12:20.026 --> 00:12:24.457
which was B I believe in the example,
now needs to point to the node.

210
00:12:24.457 --> 00:12:31.721
Which also means the current previous
next needs to point to the node.

211
00:12:31.721 --> 00:12:32.422
&gt;&gt; Node, yeah.

212
00:12:32.422 --> 00:12:38.918
&gt;&gt; Yep, and so we can also say it as
nodes previous next needs to be node.

213
00:12:40.991 --> 00:12:41.700
Right?

214
00:12:41.700 --> 00:12:43.515
I think that's what I had.

215
00:12:43.515 --> 00:12:44.296
No, I didn't have it.

216
00:12:44.296 --> 00:12:51.733
I had it, you're right, so
it should be node.prev, Nodes

217
00:12:51.733 --> 00:12:56.743
previous which is current previous, that
previous' next need to point to the node.

218
00:12:56.743 --> 00:13:00.504
So that way our two-way
linking is correct.

219
00:13:00.504 --> 00:13:01.893
So our previous next.

220
00:13:03.372 --> 00:13:04.710
Right okay, you're right.

221
00:13:04.710 --> 00:13:08.582
Good eye, I can't believe you spotted
that one, that's just so astute.

