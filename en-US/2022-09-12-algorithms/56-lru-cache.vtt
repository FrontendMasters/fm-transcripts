WEBVTT

1
00:00:00.130 --> 00:00:01.362
I didn't have the LRU problem.

2
00:00:01.362 --> 00:00:04.245
So I put on my resume on
Netflix that I didn't know Rx.

3
00:00:04.245 --> 00:00:07.857
I knew a very little bit of Rx,
but I said, hey, I know Rx.

4
00:00:07.857 --> 00:00:12.673
And when I got there, I had who is a well
known person in the JavaScript land.

5
00:00:12.673 --> 00:00:17.497
And he gave the interview and he gave me
a really hard Rx problem, and of course at

6
00:00:17.497 --> 00:00:21.967
that point I was really good at
interviewing, so what's the thing I did?

7
00:00:21.967 --> 00:00:26.381
I convinced the interviewer to give me the
answer through a series of questions, and

8
00:00:26.381 --> 00:00:30.693
I just wrote out what he was saying,
like, yeah, it's exactly what I was doing.

9
00:00:30.693 --> 00:00:34.841
Switch latest, switch, switch latest,
wrote out his exact answer and

10
00:00:34.841 --> 00:00:38.174
he told the other person
interviewing that I was the best Rx

11
00:00:38.174 --> 00:00:43.090
candidate he has interviewed to that date
and I didn't know anything that happened.

12
00:00:43.090 --> 00:00:46.651
I couldn't even tell you what I
programmed, it was terrible, but

13
00:00:46.651 --> 00:00:50.163
sometimes you got to play the game,
okay, and I played the game.

14
00:00:50.163 --> 00:00:55.050
All right, so what is an LRU so for
those that don't know what an LRU is,

15
00:00:55.050 --> 00:00:57.493
it is a fantastic data structure and

16
00:00:57.493 --> 00:01:02.216
ultimately at Netflix I did end up
implementing an LRU that did run for

17
00:01:02.216 --> 00:01:06.636
quite a few years on the television
platform and on the website.

18
00:01:06.636 --> 00:01:09.014
And for a little bit even on
mobile before we switch to native.

19
00:01:09.014 --> 00:01:14.245
So an LRU stands for
least recently used, and

20
00:01:14.245 --> 00:01:19.615
what that means it's
a caching mechanism that

21
00:01:19.615 --> 00:01:25.825
says that we will evict
the least recently used item.

22
00:01:25.825 --> 00:01:29.549
Now there's a couple of things about
caching that makes it unique in a sense.

23
00:01:29.549 --> 00:01:32.415
So let's think about how we would do that,

24
00:01:32.415 --> 00:01:37.208
how would we accomplish first
the eviction of the least recently used.

25
00:01:37.208 --> 00:01:40.885
Well, one thing we can think about
is that cash really is some sort of

26
00:01:40.885 --> 00:01:42.056
container, right?

27
00:01:42.056 --> 00:01:46.367
We're gonna build some sort of node
container based system in which contains

28
00:01:46.367 --> 00:01:47.504
some sort of value.

29
00:01:47.504 --> 00:01:52.410
Now this value is what the user gave us to
cache so you can think of website caching

30
00:01:52.410 --> 00:01:57.624
when you go to www.google.com, it's gonna
pull up likely a lot of cache, right?

31
00:01:57.624 --> 00:02:01.885
And it has ways in which the VIX the cache
based on expiry headers blah blah there's

32
00:02:01.885 --> 00:02:05.804
I'm sure there's plenty of different
ways in which it can do expiration.

33
00:02:05.804 --> 00:02:10.027
So anyways we have a value
we want to store it,

34
00:02:10.027 --> 00:02:15.252
bu at least recently used cache
has one more item in which

35
00:02:15.252 --> 00:02:20.364
it has a linked list that has
other values inside of it,

36
00:02:20.364 --> 00:02:25.697
so value 0, value 1, value 2,
value 3 and so forth,

37
00:02:25.697 --> 00:02:30.836
right, it just keeps on going for
some amount of time.

38
00:02:30.836 --> 00:02:36.182
Now the thing about this is that
all these values need to be stored

39
00:02:36.182 --> 00:02:40.944
in such a way that if the user says hey,
do I have value 2?

40
00:02:40.944 --> 00:02:45.679
I should be able to pull out value 2 and
say yes you do.

41
00:02:45.679 --> 00:02:51.665
Here's the value, but more than just that,
I need to take value 2,

42
00:02:51.665 --> 00:02:56.220
and I need to move it to
the head of the queue, right?

43
00:02:56.220 --> 00:02:58.962
Because now it has been used.

44
00:02:58.962 --> 00:03:01.224
So here I'll just go like this.

45
00:03:01.224 --> 00:03:03.855
So now value 1 connects to value 3.

46
00:03:03.855 --> 00:03:09.603
And value 2 is now at
the front of the list,

47
00:03:09.603 --> 00:03:13.915
this is our most recently used,

48
00:03:13.915 --> 00:03:18.387
this is our least recently used,

49
00:03:18.387 --> 00:03:21.597
item within the cache.

50
00:03:21.597 --> 00:03:24.381
So that is the basic idea of an LRU,

51
00:03:24.381 --> 00:03:29.469
now the execution of LRU gets
a little bit tricky so obviously,

52
00:03:29.469 --> 00:03:34.565
what's a data structure we're
going to need to use for an LRU.

53
00:03:34.565 --> 00:03:35.678
&gt;&gt; The doubly linked.

54
00:03:35.678 --> 00:03:40.601
&gt;&gt; Doubly linked list is a great answer,
right, because I mean [LAUGH] if you look

55
00:03:40.601 --> 00:03:45.602
right there, obviously it's a doubly
linked list, we're gonna definitely

56
00:03:45.602 --> 00:03:50.855
want to use that but there's a second
more important problem that's happening.

57
00:03:50.855 --> 00:03:53.081
How did I ask for value 2?

58
00:03:57.580 --> 00:04:03.007
Well, what do you think back to our Falkor
days, this is where I implemented it for

59
00:04:03.007 --> 00:04:07.491
we've talked about this multiple times,
we would hand in some sort

60
00:04:07.491 --> 00:04:11.918
of path that looks like video 1,
2, 3, I don't know, title.

61
00:04:11.918 --> 00:04:15.831
So I need some sort of way to
be able to look this up quickly.

62
00:04:15.831 --> 00:04:18.391
Now in the Falkor case,
it was a trial, right,

63
00:04:18.391 --> 00:04:20.640
it was a trial that we discussed earlier.

64
00:04:20.640 --> 00:04:24.071
But in this case, it doesn't actually
have to be a trial, does it?

65
00:04:24.071 --> 00:04:27.301
No, it can just be any key, right?

66
00:04:27.301 --> 00:04:29.849
I need some sort of key,
so you can imagine, hey,

67
00:04:29.849 --> 00:04:32.597
I want to request this piece
of data from the back end.

68
00:04:32.597 --> 00:04:35.630
Do I have this piece of data in my cache?

69
00:04:35.630 --> 00:04:41.417
So some sort of way in which you can key,
the value so you can go right to it.

70
00:04:41.417 --> 00:04:43.173
So what does that sounds like?

71
00:04:43.173 --> 00:04:44.119
&gt;&gt; HashMap.

72
00:04:44.119 --> 00:04:45.505
&gt;&gt; HashMap, my goodness.

73
00:04:45.505 --> 00:04:50.607
It's like we were just discussing this,
so we also have the potential for

74
00:04:50.607 --> 00:04:55.729
a HashMap here, but how can we use these
two things at the exact same time?

75
00:04:55.729 --> 00:04:59.717
That is really the hard question, right?

76
00:04:59.717 --> 00:05:02.715
Well, hold your horses right there.

77
00:05:02.715 --> 00:05:09.270
So the idea is this is that you have
a HashMap that has two generics, right?

78
00:05:09.270 --> 00:05:14.370
There's always two generics associated
with a HashMap a key and a value.

79
00:05:14.370 --> 00:05:17.261
But the problem is, of course,

80
00:05:17.261 --> 00:05:22.093
that our key and our value,
well, what is our value?

81
00:05:22.093 --> 00:05:26.297
Well, our value needs to be
a node within the link list so

82
00:05:26.297 --> 00:05:30.784
we can instantaneously jump to
that point within the list.

83
00:05:30.784 --> 00:05:34.771
So if you think about it, this could
solves the traversing effect of a linked

84
00:05:34.771 --> 00:05:38.883
list, you don't have to go through it
sequentially you jump right to the value

85
00:05:38.883 --> 00:05:42.714
that exists, if it doesn't you don't
jump right to it so we used a tree.

86
00:05:42.714 --> 00:05:47.106
Inside a trial tree, a pixel tree,
a dizzal tree whatever they call it,

87
00:05:47.106 --> 00:05:49.626
we use that to jump straight to the value.

88
00:05:49.626 --> 00:05:55.169
Here we're gonna use a key of some
sort to jump straight to the value,

89
00:05:55.169 --> 00:06:00.044
and the value is actually gonna
be a container class of node,

90
00:06:00.044 --> 00:06:04.919
which means we're literally
going to have a HashMap that has

91
00:06:04.919 --> 00:06:09.625
items inside of it that also
have pointers to other items.

92
00:06:09.625 --> 00:06:12.826
Right, and so
makes it pretty kind of confusing.

93
00:06:12.826 --> 00:06:16.190
You can see why this is probably not
the coolest question asked somebody

94
00:06:16.190 --> 00:06:19.834
when I get to an interview, I don't
feel like this is the greatest question,

95
00:06:19.834 --> 00:06:21.871
I've literally asked this question too.

96
00:06:21.871 --> 00:06:23.681
So I have to feel somewhat bad.

97
00:06:23.681 --> 00:06:29.173
But that's the effective idea of an LRU.

98
00:06:29.173 --> 00:06:31.840
And I figured we could try
to implement one of these,

99
00:06:31.840 --> 00:06:34.509
I've only implemented it
once in the last month, so

100
00:06:34.509 --> 00:06:37.985
hopefully it doesn't just completely
break down live right here.

101
00:06:37.985 --> 00:06:40.920
But let's talk about running
time before we do that.

102
00:06:40.920 --> 00:06:43.593
What is a HashMap lookup?

103
00:06:43.593 --> 00:06:44.584
&gt;&gt; Constant.

104
00:06:44.584 --> 00:06:46.943
&gt;&gt; Constant, 0, 1, let's go.

105
00:06:46.943 --> 00:06:50.354
What is the breaking
from a linked list and

106
00:06:50.354 --> 00:06:54.652
what's the insertion in
the front of a linked list?

107
00:06:54.652 --> 00:07:01.585
&gt;&gt; [INAUDIBLE]
&gt;&gt; Depends on the traversal, right?

108
00:07:01.585 --> 00:07:04.439
So if the traversal to
the node is constant,

109
00:07:04.439 --> 00:07:08.219
it does not matter how many
nodes are within the link list,

110
00:07:08.219 --> 00:07:12.154
you have to break two connections
on each side to pull it out,

111
00:07:12.154 --> 00:07:17.592
you have to put two connections to insert
it into the front plus adjusting the head.

112
00:07:17.592 --> 00:07:21.584
So a total of 7 0(1)

113
00:07:21.584 --> 00:07:26.381
operations, pretty neat.

114
00:07:26.381 --> 00:07:29.318
So that means we're gonna have to
have some bookkeeping to be able to

115
00:07:29.318 --> 00:07:30.149
accomplish this.

116
00:07:30.149 --> 00:07:34.330
What we're really doing right now is
we're now composing data structures,

117
00:07:34.330 --> 00:07:37.557
we have left the realm of simply
defining a data structure.

118
00:07:37.557 --> 00:07:42.006
We are now composing them using multiple
of them to create a pretty nice behavior,

119
00:07:42.006 --> 00:07:45.627
and we have actually unconstrained
ourselves from a linked list.

120
00:07:45.627 --> 00:07:49.515
And so it makes it kind of a unique
way to be able to accomplish this.

121
00:07:49.515 --> 00:07:53.503
All right, so we can probably
just jump right into programming.

122
00:07:53.503 --> 00:07:56.885
Shall we jump right into programming and
see how this thing is done?

123
00:07:56.885 --> 00:07:59.466
Let's see if I can see how
this thing is done, all right-

124
00:07:59.466 --> 00:08:01.255
&gt;&gt; Sorry, where did the 7 come from?

125
00:08:01.255 --> 00:08:05.264
&gt;&gt; The 7 the 7 yes, well, when you
remember when you break a note out of

126
00:08:05.264 --> 00:08:09.406
here, you need to take its previous and
pointed to your next one operation,

127
00:08:09.406 --> 00:08:13.385
you need to take if your next and
pointed to the previous two operations.

128
00:08:13.385 --> 00:08:17.047
You need to take your next and set it
to undefined three or that'd be three

129
00:08:17.047 --> 00:08:21.252
operations, you need to set your previous
undefined four operations, we've now

130
00:08:21.252 --> 00:08:25.123
broken it out of the linked list and
made sure that the connections are good.

131
00:08:25.123 --> 00:08:26.604
Second, we have to come up here.

132
00:08:26.604 --> 00:08:28.662
We have to set our next to the head.

133
00:08:28.662 --> 00:08:32.090
We have to set our heads previous
to the value we're about to insert,

134
00:08:32.090 --> 00:08:34.525
then we have to set our head,
three operations.

135
00:08:34.525 --> 00:08:39.779
So seven operations that
all take O of one time.

136
00:08:39.779 --> 00:08:44.923
Boom, so we effectively just do a prepend,
we do a delete prepend.

137
00:08:44.923 --> 00:08:49.907
Yeah, yeah, now the tricky part about
this is when we actually remove

138
00:08:49.907 --> 00:08:54.890
an item from the LRU, so how we remove
an item from the LRU is we do need to

139
00:08:54.890 --> 00:08:57.437
still have a tail pointer, right?

140
00:08:57.437 --> 00:09:02.225
We need to be able to point to the we are
able to point to the front of the list,

141
00:09:02.225 --> 00:09:05.798
the front is for
when we update the cache, the tail is for

142
00:09:05.798 --> 00:09:08.714
when we need to remove
from the cache an item.

143
00:09:08.714 --> 00:09:13.016
So let's say we set our capacity to 10,
the moment we have 11 items inside of our

144
00:09:13.016 --> 00:09:17.441
cache, we now need to downgrade and remove
the oldest possible item which always will

145
00:09:17.441 --> 00:09:21.579
be at the tail because every time we get
something, we have to update the cache.

146
00:09:21.579 --> 00:09:22.947
Make sense?

147
00:09:22.947 --> 00:09:25.029
Awesome.

148
00:09:25.029 --> 00:09:28.749
Now I did have a problem with the unit
test earlier, I believe I fixed it.

149
00:09:28.749 --> 00:09:31.995
Hopefully it didn't leave it
on my previous computer and

150
00:09:31.995 --> 00:09:34.979
then not commit the fix
unit tests just disastrous.

151
00:09:34.979 --> 00:09:38.704
And so for those I assume we remember
the tail removing operation,

152
00:09:38.704 --> 00:09:42.111
the pop operation,
effectively it's a 3 step operation.

153
00:09:42.111 --> 00:09:48.466
We set the tail to the previous,
right, tailed off brief.

154
00:09:48.466 --> 00:09:51.941
Or we don't actually, then we also
save off a value to the tail then

155
00:09:51.941 --> 00:09:56.040
we unhook the saved off value to the tail
and we unhook it the other direction and

156
00:09:56.040 --> 00:09:57.740
then we can return out the tail.

157
00:09:57.740 --> 00:09:59.732
So that would be that type of operation.

158
00:09:59.732 --> 00:10:03.881
In an LRU, we don't return out the last
item in the cache, we just get rid of it.

159
00:10:03.881 --> 00:10:07.414
We no longer need it, if it isn't
in a more traditional language,

160
00:10:07.414 --> 00:10:09.252
we'd have to free it or delete it.

161
00:10:09.252 --> 00:10:11.124
So awesome.

162
00:10:11.124 --> 00:10:15.816
So is there any other questions
with the operations of an LRU?

163
00:10:15.816 --> 00:10:17.585
I know that was pretty brief.

164
00:10:17.585 --> 00:10:20.595
But I made the assumption that
you remember how a map works.

165
00:10:20.595 --> 00:10:22.732
You remember how a linked list works.

166
00:10:22.732 --> 00:10:26.288
So we're just combining these two data
structures to make a superstructure.

167
00:10:29.528 --> 00:10:31.204
I always wanna use
the term superstructure.

