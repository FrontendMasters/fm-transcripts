WEBVTT

1
00:00:00.230 --> 00:00:03.820
So let's talk about, let's go over,
let's see how this thing works.

2
00:00:03.820 --> 00:00:04.444
And of course,

3
00:00:04.444 --> 00:00:07.570
we're gonna be using none other than
our beautiful linked lists right here.

4
00:00:07.570 --> 00:00:09.669
So I'm gonna create another one of these,
zoom in.

5
00:00:09.669 --> 00:00:14.582
For those that don't remember,
a linked list is a node like

6
00:00:14.582 --> 00:00:19.606
algorithm which is gonna have a value,
which is gonna be a T.

7
00:00:19.606 --> 00:00:25.230
And it's gonna have a next and
sometimes they will also have a previous

8
00:00:25.230 --> 00:00:30.584
if it's a doubly linked list and
of course these are of type node T.

9
00:00:30.584 --> 00:00:35.930
All right, so now that we kind of
back into it, so if you can think

10
00:00:35.930 --> 00:00:41.969
about it here, I'm gonna redraw our
nice little list here A, B, C, D.

11
00:00:41.969 --> 00:00:45.089
A stack is a lot like, so
this is a queue really,

12
00:00:45.089 --> 00:00:47.975
this is actually how you do a queue,
right?

13
00:00:47.975 --> 00:00:49.980
You have your head, you have your tail.

14
00:00:49.980 --> 00:00:53.807
Now a stack is gonna be
backwards to a queue.

15
00:00:53.807 --> 00:00:58.652
So what we're gonna do is
we're gonna actually have

16
00:00:58.652 --> 00:01:02.513
A points to B points to
C which points to D.

17
00:01:02.513 --> 00:01:05.780
And what we're gonna have is
this is gonna be our head.

18
00:01:05.780 --> 00:01:12.860
So it's as if we pushed in A, we pushed
in B, we pushed in C, we pushed in D.

19
00:01:12.860 --> 00:01:16.163
Now the reason why you have to draw it
backwards cuz I always draw it backwards

20
00:01:16.163 --> 00:01:18.949
cuz it's so much easier to draw
backwards is you really kind of,

21
00:01:18.949 --> 00:01:21.450
you can think about this
like a stack of plates.

22
00:01:21.450 --> 00:01:25.350
If you have an error in your code,
you get a stack trace.

23
00:01:25.350 --> 00:01:27.024
You wanna guess what a stack trace is,

24
00:01:27.024 --> 00:01:31.010
it's the stack of functions that
you've called up until this point.

25
00:01:31.010 --> 00:01:35.010
So a stack is something in which looks
like a queue or acts like a queue.

26
00:01:35.010 --> 00:01:39.633
It's a singly linked list in which you
only add and remove from the head.

27
00:01:39.633 --> 00:01:41.220
That is why the arrows are backwards, or

28
00:01:41.220 --> 00:01:43.331
at least that's how I always
visualize it in my head.

29
00:01:43.331 --> 00:01:46.907
You don't have to draw it backwards,
just for me it's a lot easier.

30
00:01:46.907 --> 00:01:51.446
So if we were to add to a stack,
we would do the exact same thing.

31
00:01:51.446 --> 00:01:56.446
We would take heads next, or
we'd take E and we point to head,

32
00:01:56.446 --> 00:02:00.114
then we'd update head to point to E,
right?

33
00:02:00.114 --> 00:02:03.960
So instead of doing it the queue way,
which is slightly different,

34
00:02:03.960 --> 00:02:07.600
we point E to head,
we update head to point to E.

35
00:02:07.600 --> 00:02:08.500
Pretty simple, right?

36
00:02:08.500 --> 00:02:10.790
We do those operations backwards,
you lose all of your data,

37
00:02:10.790 --> 00:02:12.200
you'll never find it again.

38
00:02:12.200 --> 00:02:14.699
And if you're in a real language,
you will also leak it and

39
00:02:14.699 --> 00:02:16.740
then you now have more
memory floating around.

40
00:02:18.110 --> 00:02:21.370
The reverse operation of a stack
of course is removing it.

41
00:02:21.370 --> 00:02:22.129
So what would you do?

42
00:02:22.129 --> 00:02:25.919
If your head was pointed right here,
you'd update your head,

43
00:02:25.919 --> 00:02:30.710
or first, you'd save off this, then you'd
update your head to point to next or

44
00:02:30.710 --> 00:02:33.590
previous depending on
how you wanna create it.

45
00:02:33.590 --> 00:02:35.140
And then you could return out E.

46
00:02:35.140 --> 00:02:37.350
E would no longer be pointing here.

47
00:02:37.350 --> 00:02:38.760
We break it off from the graph.

48
00:02:38.760 --> 00:02:40.560
We just do the opposite, inverse.

49
00:02:40.560 --> 00:02:41.832
So it's a lot like a queue.

50
00:02:41.832 --> 00:02:44.641
In fact, it's almost, it's so
much like a queue it's very,

51
00:02:44.641 --> 00:02:46.073
very easy to get them confused.

52
00:02:46.073 --> 00:02:49.445
And or accidentally program them one or
the other way and even more so

53
00:02:49.445 --> 00:02:52.300
when drawing them,
get your errors backwards, right?

54
00:02:52.300 --> 00:02:55.566
So a stack is also very, very simple,
very, very easy to use and

55
00:02:55.566 --> 00:02:57.490
you see them all over the place.

56
00:02:57.490 --> 00:03:01.611
The big thing that you'll definitely see
them with is coming up here when we start

57
00:03:01.611 --> 00:03:06.330
doing recursion, it's really good to
think of calling functions like a stack.

58
00:03:06.330 --> 00:03:09.559
Once you start looking at the world
like a stack as you call functions,

59
00:03:09.559 --> 00:03:13.400
it becomes easier, and we'll go over
this in more detail when we get there.

60
00:03:13.400 --> 00:03:18.169
But it just helps give you a mental
model of what's going on actually within

61
00:03:18.169 --> 00:03:22.938
the computer cuz when you do call a
function it is actually on something like

62
00:03:22.938 --> 00:03:23.630
a stack.

63
00:03:23.630 --> 00:03:26.264
In fact, the memory that it
uses is called the stack for

64
00:03:26.264 --> 00:03:28.570
a reason,
because it is only going up and down.

65
00:03:29.930 --> 00:03:30.756
There we go.

66
00:03:30.756 --> 00:03:32.547
So, let's go through this.

67
00:03:32.547 --> 00:03:34.321
And so a push operation we did that,

68
00:03:34.321 --> 00:03:36.996
a peak operation exact same
thing as a queue, right?

69
00:03:36.996 --> 00:03:39.319
Take the head, if there is a value,

70
00:03:39.319 --> 00:03:42.737
we return the value else
we don't return anything.

71
00:03:42.737 --> 00:03:47.512
And again constraints, they're awesome,
right, by only allowing pushing and

72
00:03:47.512 --> 00:03:51.190
popping from one side we can make
them a really fast operation.

73
00:03:51.190 --> 00:03:52.850
Cuz what is the operation again?

74
00:03:52.850 --> 00:03:54.350
For updating pointers.

75
00:03:55.580 --> 00:03:57.795
Constant, it doesn't matter how
many items are in the list,

76
00:03:57.795 --> 00:03:59.880
it does not matter how big the value is.

77
00:03:59.880 --> 00:04:02.864
The fact is, we are just simply
setting things to null or

78
00:04:02.864 --> 00:04:05.625
setting them to point to different values.

79
00:04:05.625 --> 00:04:08.315
We'd kind of consider those
constant time operations.

80
00:04:08.315 --> 00:04:11.739
Again, I know property access on
an object in JavaScript may or

81
00:04:11.739 --> 00:04:14.205
may not be constant time
blah blah blah blah.

82
00:04:14.205 --> 00:04:15.445
We just don't think of it like that.

83
00:04:16.525 --> 00:04:19.272
All right, though I did have
an interview once at Uber,

84
00:04:19.272 --> 00:04:22.435
in which the person made me not
only go over all the running time.

85
00:04:22.435 --> 00:04:26.308
They're like, well, you didn't know that,
accessing properties in

86
00:04:26.308 --> 00:04:28.061
JavaScript is log N, like okay.

87
00:04:28.061 --> 00:04:29.110
Then if that's the case,

88
00:04:29.110 --> 00:04:31.455
then everything just put a log
N on the end of everything.

89
00:04:31.455 --> 00:04:34.948
He's like, well then,
what's the running time, well, it's log N.

90
00:04:34.948 --> 00:04:37.452
And it was just like the longest
most drawn out, make everything,

91
00:04:37.452 --> 00:04:38.756
add the word log N to everything.

92
00:04:38.756 --> 00:04:39.343
It was very annoying.

93
00:04:39.343 --> 00:04:42.098
So typically, we just don't do that.

94
00:04:42.098 --> 00:04:42.620
All right

