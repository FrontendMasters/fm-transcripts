WEBVTT

1
00:00:00.000 --> 00:00:01.557
So what is Dijkstra shortest path?

2
00:00:01.557 --> 00:00:06.366
Obviously, it is calculating
the shortest path from one

3
00:00:06.366 --> 00:00:09.480
node to all other nodes in the graph.

4
00:00:09.480 --> 00:00:13.908
Which means we can also specifically
find it to an individual node as well.

5
00:00:13.908 --> 00:00:17.860
Because once you have the full graph
marked out, it's very easy just to find

6
00:00:17.860 --> 00:00:20.781
that one path from A to B long
as you have a previous list.

7
00:00:20.781 --> 00:00:21.712
Makes sense?

8
00:00:21.712 --> 00:00:23.617
Makes sense,
just like our Breadth First Search,

9
00:00:23.617 --> 00:00:25.843
we'll be using Breadth First Search for
Dijkstra as well.

10
00:00:25.843 --> 00:00:29.315
I want to go over Breadth First Search
because it requires a previous array

11
00:00:29.315 --> 00:00:31.841
because in Dijkstra's we
require a previous array.

12
00:00:31.841 --> 00:00:33.714
Does that make sense?

13
00:00:33.714 --> 00:00:39.013
Awesome, all right, there are a bunch
of variations to this and

14
00:00:39.013 --> 00:00:42.940
I'll probably program one that sucks,
just so

15
00:00:42.940 --> 00:00:47.078
you can know that there
is one that doesn't suck.

16
00:00:47.078 --> 00:00:47.975
Does that sound great?

17
00:00:47.975 --> 00:00:51.167
Fantastic, isn't that just
the way we always wanna do it?

18
00:00:51.167 --> 00:00:54.683
Okay, so
let's talk about Dijkstra's shortest path.

19
00:00:54.683 --> 00:00:58.068
It's actually a family of what is
referred to as a greedy algorithm.

20
00:00:58.068 --> 00:00:59.928
So it's actually pretty dang simple.

21
00:00:59.928 --> 00:01:04.796
When you write out just the steps that
you need to take, you look at it and

22
00:01:04.796 --> 00:01:07.891
go, wow, it's actually absurdly simple.

23
00:01:07.891 --> 00:01:09.221
Is that not absurdly simple?

24
00:01:09.221 --> 00:01:13.120
Okay so let's rewrite a graph that makes
some sort of sense I liked that previous

25
00:01:13.120 --> 00:01:16.448
graph I wrote, so I'm gonna give it
my best effort of how to do that.

26
00:01:16.448 --> 00:01:22.465
So we're gonna have this, we're gonna
have a 1, we're gonna have a 5,

27
00:01:22.465 --> 00:01:28.117
we're gonna have a 1, by the way
Dijkstras, non negative weights.

28
00:01:28.117 --> 00:01:34.135
So if there's a negative weight you're
gonna screw up all of Dijkstras,

29
00:01:34.135 --> 00:01:36.666
don't do that, this will be 6

30
00:01:38.764 --> 00:01:43.443
1 7, there we go.

31
00:01:43.443 --> 00:01:47.586
So if this is 0,1, 2, 3, 4,

32
00:01:47.586 --> 00:01:52.838
the obvious answer is
that we go from 0 to 2,

33
00:01:52.838 --> 00:01:57.983
to 4, if 0 is our source and
4 is our sync.

34
00:01:57.983 --> 00:01:59.624
That makes sense, right?

35
00:01:59.624 --> 00:02:03.653
If you just look at the graph, 5 plus 1
is 6, that would be our shortest path.

36
00:02:03.653 --> 00:02:09.116
If you go 0 to 1, which is 1,
then to 7, that's 8, then to 4.

37
00:02:09.116 --> 00:02:10.336
What is that?

38
00:02:10.336 --> 00:02:12.165
9, right, or the other way around.

39
00:02:12.165 --> 00:02:15.123
You'd get 7, 8, 9,
you get the same answer, right?

40
00:02:15.123 --> 00:02:20.115
So our three possible paths for those
that don't see that is this which is 6.

41
00:02:21.423 --> 00:02:25.980
This, which is 1, 7, 8, 9 or, and

42
00:02:25.980 --> 00:02:31.488
then of course through here,
which again is 9.

43
00:02:31.488 --> 00:02:35.275
So there you go,
we see the shortest path 0, 2, 4.

44
00:02:35.275 --> 00:02:36.774
So how do we do this?

45
00:02:36.774 --> 00:02:39.489
Well, Dijkstras,
it's a very clever algorithm,

46
00:02:39.489 --> 00:02:42.398
it initially started off as
a V-squared running time.

47
00:02:42.398 --> 00:02:45.982
But it's gotten a lot better
through some sweet optimizations,

48
00:02:45.982 --> 00:02:49.436
including one of the data structures
we made today makes it into

49
00:02:49.436 --> 00:02:52.253
a sweet optimize graph structure or
graph search.

50
00:02:52.253 --> 00:02:55.274
So first let's look at
what's gonna happen here.

51
00:02:55.274 --> 00:02:58.711
So the general way we do this is we still
have that same previous array because

52
00:02:58.711 --> 00:03:00.065
we need to know how to walk it.

53
00:03:00.065 --> 00:03:02.560
So we do the exact same
algorithm that we did before.

54
00:03:02.560 --> 00:03:04.917
We have negative ones all the way in here.

55
00:03:04.917 --> 00:03:07.577
So we know with whom have I came from.

56
00:03:07.577 --> 00:03:09.803
Second, we need the exact same thing,

57
00:03:09.803 --> 00:03:13.317
we can have a seen array depends
on the data structure you use.

58
00:03:13.317 --> 00:03:17.086
You actually don't need a seen array but
we'll have it for now.

59
00:03:17.086 --> 00:03:21.769
All right and we'll fill it with
a bunch of falses, awesome, right?

60
00:03:21.769 --> 00:03:26.465
Lastly, we're gonna need a way to
calculate what is the shortest distance.

61
00:03:26.465 --> 00:03:31.883
So what we're gonna have,
is we're gonna have a distance array and

62
00:03:31.883 --> 00:03:37.219
this will be filled with infinities,
except for our source node.

63
00:03:37.219 --> 00:03:39.130
What is the distance of our source node?

64
00:03:39.130 --> 00:03:40.680
&gt;&gt; Number of nodes?

65
00:03:40.680 --> 00:03:42.236
&gt;&gt; No, zero.

66
00:03:42.236 --> 00:03:45.691
Right, if you're already at the place you
wanna be, how far do you have to travel?

67
00:03:45.691 --> 00:03:47.004
Nowhere, right?

68
00:03:47.004 --> 00:03:49.195
It's greatest, right?

69
00:03:49.195 --> 00:03:53.498
And so of course we'll put a zero here,
we'll pretend our source is the last node,

70
00:03:53.498 --> 00:03:55.723
right, just depends on what is passed in.

71
00:03:55.723 --> 00:03:58.128
So in our case,
it's gonna be 0 for our searching.

72
00:03:58.128 --> 00:04:02.593
So we put a 0 at wherever our source is,
and we'd also take our seen and

73
00:04:02.593 --> 00:04:05.181
make that a true wherever our source is.

74
00:04:05.181 --> 00:04:11.528
But again, we don't have to use a seen
array if we use the right data structure.

75
00:04:11.528 --> 00:04:16.008
So effectively how Dijkstra
shortest path works,

76
00:04:16.008 --> 00:04:22.360
is that we get the lowest or the nearest
unseen node, or unvisited node,

77
00:04:22.360 --> 00:04:27.374
meaning at first that's just
our source array, right?

78
00:04:27.374 --> 00:04:28.881
Because everything else has infinity.

79
00:04:28.881 --> 00:04:31.506
So those ones are unvisitable, but

80
00:04:31.506 --> 00:04:35.628
our source one is visitable
at a distance of 0, right?

81
00:04:35.628 --> 00:04:38.076
Right ,so you can imagine
one way to do this,

82
00:04:38.076 --> 00:04:40.210
is we scan through our distance array.

83
00:04:40.210 --> 00:04:44.500
And when we get to zero we're
like hey have I seen you yet?

84
00:04:44.500 --> 00:04:45.401
I haven't seen you,

85
00:04:45.401 --> 00:04:48.654
awesome, we're gonna start with this
one cuz this is obviously the smallest

86
00:04:48.654 --> 00:04:52.173
distance,let's start right here, cuz
the rest of the distance is our infinity.

87
00:04:52.173 --> 00:04:54.948
So this is the smallest unseen item.

88
00:04:54.948 --> 00:04:56.810
So at that point we would mark it seen.

89
00:04:56.810 --> 00:04:58.363
So I'm gonna kind of start right here.

90
00:04:58.363 --> 00:05:01.075
So let's pretend this thing
has already happened.

91
00:05:01.075 --> 00:05:05.524
And then we'll keep doing this, while, and

92
00:05:05.524 --> 00:05:10.804
I'm gonna just use a function here,
has unvisited.

93
00:05:10.804 --> 00:05:15.342
Okay, I'm just gonna use this because I
don't wanna give away the game quite yet.

94
00:05:15.342 --> 00:05:19.719
So, however we choose to do that could
affect how fast our algorithm runs.

95
00:05:19.719 --> 00:05:24.490
So right now, we're scanning through
every single node effectively by walking

96
00:05:24.490 --> 00:05:27.799
through our seen array and
or distances array, right?

97
00:05:27.799 --> 00:05:31.408
That means you're doing that V amount of
times every single time you call that

98
00:05:31.408 --> 00:05:31.969
function.

99
00:05:31.969 --> 00:05:35.297
Cuz you have to scan them all to find
the minimum one you have to scan it all to

100
00:05:35.297 --> 00:05:37.614
make sure you have the minimum
one that's unseen.

101
00:05:37.614 --> 00:05:41.794
All right, so there we go,
we have this part done, this is fantastic.

102
00:05:41.794 --> 00:05:43.566
Now, what do we have to do?

103
00:05:43.566 --> 00:05:47.056
Well, we are gonna get the lowest one.

104
00:05:47.056 --> 00:05:51.345
So I'm gonna to call this
one low equals get lowest.

105
00:05:53.114 --> 00:05:53.780
Right?

106
00:05:53.780 --> 00:05:55.799
Get lowest unseen, right?

107
00:05:55.799 --> 00:05:59.302
I will put U there for unseen,
I don't wanna have to keep writing,

108
00:05:59.302 --> 00:06:02.442
way too high and
we're gonna mark this one as seen, right?

109
00:06:02.442 --> 00:06:06.658
Once we have done this, we've already
seen this, we don't need to do it again,

110
00:06:06.658 --> 00:06:07.217
awesome.

111
00:06:07.217 --> 00:06:12.799
So at this point our first iteration
we're currently using the source, right?

112
00:06:12.799 --> 00:06:17.787
Perfect, so now what do we need to do?

113
00:06:17.787 --> 00:06:20.750
Well, now we need to walk
through all of its children and

114
00:06:20.750 --> 00:06:22.337
then we need to do something.

115
00:06:22.337 --> 00:06:24.955
So let's break this problem
down just a little bit.

116
00:06:24.955 --> 00:06:30.390
If you think about it,
if you look at this graph right here,

117
00:06:30.390 --> 00:06:35.959
the shortest distance from zero
to one is this link, right?

118
00:06:35.959 --> 00:06:40.806
It wouldn't matter however many other
links there are, when the only distance

119
00:06:40.806 --> 00:06:44.512
I know is this distance,
the distance to myself being zero.

120
00:06:44.512 --> 00:06:48.895
The next possible shortest
distance is this one, right?

121
00:06:48.895 --> 00:06:52.699
It wouldn't matter what else the graph
looks like it wouldn't matter if this

122
00:06:52.699 --> 00:06:56.228
thing had a distance of one,
you cannot get any possibly closer right?

123
00:06:56.228 --> 00:07:00.277
So, during the first iteration of
the graph, we get the source node,

124
00:07:00.277 --> 00:07:03.379
which is the closest possible
node because it's 0.

125
00:07:03.379 --> 00:07:08.800
The next iteration, we are gonna find the
closest possible node to the source and

126
00:07:08.800 --> 00:07:10.965
that is the shortest distance.

127
00:07:10.965 --> 00:07:15.392
No matter how you bake it, that is always
gonna be the shortest distance because you

128
00:07:15.392 --> 00:07:17.492
can kind of argue that in your own head.

129
00:07:17.492 --> 00:07:19.452
If you have an entire series of node and

130
00:07:19.452 --> 00:07:23.008
you find the shortest distance from
where you start to the next node,

131
00:07:23.008 --> 00:07:26.398
that will always be the shortest
distance at that point, right?

132
00:07:26.398 --> 00:07:30.322
You can never make it any shorter, but
then this is where it gets interesting.

133
00:07:30.322 --> 00:07:34.127
If you use the distance to that node,
plus the distance to all the nodes

134
00:07:34.127 --> 00:07:38.208
it's connected to versus the distance
to all the nodes I'm connected to.

135
00:07:38.208 --> 00:07:43.147
Whatever is the shortest that time becomes
the next possible shortest path that is

136
00:07:43.147 --> 00:07:44.660
possible in your graph.

137
00:07:44.660 --> 00:07:47.994
And that's how Dijkstra work,
it just works one at a time,

138
00:07:47.994 --> 00:07:51.679
updating the distances for
who has the shortest distance where.

139
00:07:51.679 --> 00:07:56.140
And so that explanation is not necessarily
the best, but code is always really,

140
00:07:56.140 --> 00:07:57.525
really good to see that.

141
00:07:57.525 --> 00:07:58.602
So let's do this.

142
00:07:58.602 --> 00:08:03.415
We're gonna go for edge, in low, right,

143
00:08:03.415 --> 00:08:07.439
so that is our current lowest item.

144
00:08:07.439 --> 00:08:09.882
I want to walk every single edge.

145
00:08:09.882 --> 00:08:13.341
So again, we'll do the same
kind of base case checking.

146
00:08:13.341 --> 00:08:21.129
If seen, Then continue.

147
00:08:23.155 --> 00:08:24.513
Make sense, right?

148
00:08:24.513 --> 00:08:26.794
If we've already seen this node,
we don't need to look at this node, right?

149
00:08:26.794 --> 00:08:28.972
Now, we can just simply move on.

150
00:08:28.972 --> 00:08:34.444
All right, so now that we have this edge,
we need to do some updating here, right?

151
00:08:34.444 --> 00:08:35.832
We need to go okay.

152
00:08:35.832 --> 00:08:41.772
If the distance from you or
the distance to me plus the distance to

153
00:08:41.772 --> 00:08:47.382
you is shorter than any other
distance we've seen thus far,

154
00:08:47.382 --> 00:08:52.233
we have now found a newer
shortest path to that node.

155
00:08:52.233 --> 00:08:52.913
Does that make sense?

156
00:08:52.913 --> 00:08:57.466
Cuz at first we start with all distances
infinity except for the one I'm at,

157
00:08:57.466 --> 00:09:00.666
then we say hey out of all
the nodes I'm connected to,

158
00:09:00.666 --> 00:09:02.754
have we found shorter distances?

159
00:09:02.754 --> 00:09:05.671
Well, of course because every
distance is infinity, so

160
00:09:05.671 --> 00:09:09.576
the nodes you're connected to
are instantaneously closer than infinity.

161
00:09:09.576 --> 00:09:13.725
And you'll see this as it works out,
you'll see how this eventually works.

162
00:09:13.725 --> 00:09:15.831
So let's do this.

163
00:09:15.831 --> 00:09:19.810
I kinda wanna make this
a little bit different.

164
00:09:19.810 --> 00:09:24.586
I'm gonna make this just to make this one,
I'd say a little bit better.

165
00:09:26.038 --> 00:09:29.574
Yeah let's do that, I'm gonna do that just
to make this kinda a little bit better

166
00:09:29.574 --> 00:09:32.075
cuz I feel like this would just
be a better example there.

167
00:09:32.075 --> 00:09:35.068
All right, so now that we have this,
we have our seen and

168
00:09:35.068 --> 00:09:37.180
now we need to calculate its distance.

169
00:09:37.180 --> 00:09:45.378
Its distance is gonna be
the distances of low, right?

170
00:09:45.378 --> 00:09:49.907
The distance it took to get to low,
which in our case is 0 for

171
00:09:49.907 --> 00:09:52.814
our first node plus the edges weight.

172
00:09:55.058 --> 00:09:56.072
Make sense, right?

173
00:09:56.072 --> 00:09:59.711
That would literally be the distance
at any one point, awesome.

174
00:09:59.711 --> 00:10:05.869
If that distance is
less than the distances

175
00:10:05.869 --> 00:10:10.658
of our last known best distance,

176
00:10:10.658 --> 00:10:15.117
ellipses of our edge, right.

177
00:10:15.117 --> 00:10:20.087
So say our edge is 1, If there's any other
best distances to it then we have now just

178
00:10:20.087 --> 00:10:24.995
outperformed it in distances therefore we
have found a shorter path to that node.

179
00:10:24.995 --> 00:10:31.619
And once we've done that,
we can then say it's previous or

180
00:10:31.619 --> 00:10:37.245
how it got here of edge Is now low, right?

181
00:10:37.245 --> 00:10:41.917
We have now just updated how we got to
this node with the shortest possible

182
00:10:41.917 --> 00:10:45.532
distance and
then we need to update its distance array.

183
00:10:48.601 --> 00:10:52.426
To equal our new smaller distance,

184
00:10:54.376 --> 00:10:59.331
All right, this of course is also a very
magical thing that we can do that can

185
00:10:59.331 --> 00:11:02.492
also help make this
algorithm run much faster.

186
00:11:02.492 --> 00:11:05.308
So if you think about this,
what we have right here,

187
00:11:05.308 --> 00:11:09.788
we will eventually go through every single
node that we are possibly connected to.

188
00:11:09.788 --> 00:11:13.677
Getting lowest means that we have any node
that has a distance of infinity means it's

189
00:11:13.677 --> 00:11:15.594
unreachable based on the node we're at,

190
00:11:15.594 --> 00:11:17.761
cuz there are nodes that
will be unreachable.

191
00:11:17.761 --> 00:11:21.853
You could imagine a situation in which we
have something that looks like this right?

192
00:11:21.853 --> 00:11:27.474
Node, 7 is right here, it points to 0,
but 0 never points to it.

193
00:11:27.474 --> 00:11:31.618
So therefore it is literally
an unreachable node in this case.

194
00:11:31.618 --> 00:11:35.276
There we go, this thing is covered,
that is the algorithm of Dijkstra for

195
00:11:35.276 --> 00:11:36.107
shortest path.

196
00:11:36.107 --> 00:11:40.651
We keep on getting the lowest distance
node and then trying to update all

197
00:11:40.651 --> 00:11:45.511
the other distances based on this new
lowest path we found and it's greedy.

198
00:11:45.511 --> 00:11:50.302
So each time you find the shortest path
that literally is the shortest possible

199
00:11:50.302 --> 00:11:53.366
path within the graph at
that individual moment.

200
00:11:56.336 --> 00:11:57.176
So there we go.

201
00:11:57.176 --> 00:12:00.808
So again, we have to do the exact
same thing we've done before,

202
00:12:00.808 --> 00:12:03.364
meaning that when we
want to build this path,

203
00:12:03.364 --> 00:12:07.495
we do need to walk backwards again
through, we have our previous array.

204
00:12:07.495 --> 00:12:11.174
We start from our needle and then we're
gonna have to walk backwards we just got

205
00:12:11.174 --> 00:12:14.810
done doing that, we will do it again
if we implement Dijkstra shortest path.

206
00:12:14.810 --> 00:12:18.568
It's pretty straightforward but
I want to kinda talk about something.

207
00:12:18.568 --> 00:12:21.125
I'm having a little bit of
a battle with myself do we

208
00:12:21.125 --> 00:12:24.942
want to implement this first or do we
want to discuss its running time first.

209
00:12:24.942 --> 00:12:27.820
Let's implement it and
then let's talk about his running time,

210
00:12:27.820 --> 00:12:31.115
cuz I feel like if we implemented first
we're going to see how was done we can

211
00:12:31.115 --> 00:12:34.020
discuss that running time then we
can discuss how to make it faster

