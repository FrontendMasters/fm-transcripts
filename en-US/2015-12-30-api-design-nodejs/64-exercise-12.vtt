WEBVTT

1
00:00:00.000 --> 00:00:03.815
[MUSIC]

2
00:00:03.815 --> 00:00:05.216
&gt;&gt; Scott Moss: All right so
your objective,

3
00:00:05.216 --> 00:00:07.297
now that we have all of
this stuff signed in.

4
00:00:07.297 --> 00:00:12.388
Is I want to the ability to, so once I'm
signed in, actually let's make a new one.

5
00:00:16.647 --> 00:00:19.470
&gt;&gt; Scott Moss: Sara and
123, so once I'm signed in,

6
00:00:19.470 --> 00:00:22.950
I need to be able to come in here and
make a blog post.

7
00:00:22.950 --> 00:00:26.290
So I am like this is my new post.

8
00:00:27.420 --> 00:00:31.010
And I start to typing in some stuff for
my post.

9
00:00:33.280 --> 00:00:37.000
And I click done, it does work.

10
00:00:37.000 --> 00:00:38.347
Did to do that.

11
00:00:39.648 --> 00:00:40.620
&gt;&gt; Scott Moss: I thought I stopped that.

12
00:00:42.000 --> 00:00:44.480
Hold on, one second,
am I on the fix branch?

13
00:00:46.790 --> 00:00:48.598
I am on the fix branch, I'm like,

14
00:00:48.598 --> 00:00:51.320
why is all that working,
that should not be working.

15
00:00:51.320 --> 00:00:54.860
Okay, so this is what it should
look like when you're done, okay?

16
00:00:54.860 --> 00:00:56.590
I just showed you all the answers.

17
00:00:56.590 --> 00:00:59.700
I'm like wait, this stuff should not
be working, what are they gonna do now,

18
00:00:59.700 --> 00:01:01.510
because I'm pretty sure, yeah.

19
00:01:01.510 --> 00:01:02.560
I'm on a fixed branch.

20
00:01:02.560 --> 00:01:04.902
It seems like a lot of you do that too,
so.

21
00:01:04.902 --> 00:01:07.159
&gt;&gt; Speaker 2: [LAUGH].

22
00:01:07.159 --> 00:01:08.340
&gt;&gt; Scott Moss: But that's good.

23
00:01:08.340 --> 00:01:09.590
I found some errors on the fixed branch.

24
00:01:09.590 --> 00:01:11.790
So if you want, just pull this
one down in like five seconds.

25
00:01:12.910 --> 00:01:15.230
That's great.
I was like, whoa.

26
00:01:15.230 --> 00:01:17.440
I don't know what you're gonna do now,

27
00:01:18.720 --> 00:01:19.770
cause I was, [LAUGH],
&gt;&gt; Speaker 2: [LAUGH]

28
00:01:19.770 --> 00:01:21.074
&gt;&gt; Scott Moss: What you're supposed to do.

29
00:01:21.074 --> 00:01:26.395
This was origin step,

30
00:01:29.874 --> 00:01:31.814
&gt;&gt; Scott Moss: fix.

31
00:01:31.814 --> 00:01:34.280
Yeah pull that one down cuz
I just made some changes.

32
00:01:35.750 --> 00:01:38.106
Let's do a get pull,
it'll pull down all the branches.

33
00:01:38.106 --> 00:01:41.300
You don't have to specify the branch
if you're not a git person.

34
00:01:41.300 --> 00:01:41.939
Great, so now,

35
00:01:41.939 --> 00:01:45.067
let's look at what you will be doing,
if you haven't seen the answers already.

36
00:01:50.868 --> 00:01:56.420
&gt;&gt; Scott Moss: Bam okay, so
this is what you will be doing now, okay?

37
00:01:59.590 --> 00:02:04.190
First things first is this
posting is still already here.

38
00:02:04.190 --> 00:02:05.280
That should be taken off too.

39
00:02:07.280 --> 00:02:10.700
What you will be doing is if we go
into these prospective routes here.

40
00:02:12.870 --> 00:02:16.210
Remember we talked about ten minutes ago
about the different routes we need to

41
00:02:16.210 --> 00:02:16.840
lock down?

42
00:02:16.840 --> 00:02:18.624
That's what you're gonna do.

43
00:02:18.624 --> 00:02:23.350
You're gonna use the middleware that we
created in alt.js, the getFreshUser and

44
00:02:23.350 --> 00:02:27.120
the decodeToken to first lock down
the route that we need locked down.

45
00:02:27.120 --> 00:02:31.230
So you put decodeToken on any route,
it'll lock it down.

46
00:02:31.230 --> 00:02:33.781
And then immediately after,
if you put getFreshUser,

47
00:02:33.781 --> 00:02:35.688
it'll attach the user to the req.user.

48
00:02:37.947 --> 00:02:39.140
&gt;&gt; Scott Moss: Let's see
how that works again.

49
00:02:39.140 --> 00:02:41.114
So if you call decodeToken,
which is a middleware,

50
00:02:41.114 --> 00:02:45.230
if you put that in front of any route or
any middleware stack,

51
00:02:45.230 --> 00:02:48.850
anywhere middleware can go,
it will try to find a token.

52
00:02:49.880 --> 00:02:53.400
And if it finds it, it will attach
the object that the token decodes to,

53
00:02:53.400 --> 00:02:54.410
to req.user.

54
00:02:54.410 --> 00:02:55.770
If it doesn't find it, it will error out.

55
00:02:57.110 --> 00:03:00.670
And immediately after that, the next
middleware that comes in that series,

56
00:03:00.670 --> 00:03:04.810
wherever you put decodeToken,
if you put rec.user, I'm sorry,

57
00:03:04.810 --> 00:03:10.080
if you put getfresh.user, it will
then grab the user ID that the decode

58
00:03:11.600 --> 00:03:16.820
token just made and look for that real
user in the database, not just the ID.

59
00:03:16.820 --> 00:03:18.355
And attach that to rec.user,

60
00:03:18.355 --> 00:03:22.440
so it'll override rec.user with the full
user object and then it will call next.

61
00:03:23.930 --> 00:03:28.178
So if you put those two in that order,
you're guaranteed to have the token

62
00:03:28.178 --> 00:03:32.510
decoded and the full user already there
before you get to your controller.

63
00:03:33.920 --> 00:03:36.368
And remember, we can put any number
of middleware we want on a route.

64
00:03:36.368 --> 00:03:39.614
We can put an array of middleware,
we can put comma separated middleware,

65
00:03:39.614 --> 00:03:40.448
whatever we want.

66
00:03:40.448 --> 00:03:45.824
If you put them in that order,
decode token followed by getFreshUser,

67
00:03:45.824 --> 00:03:49.327
I can guarantee that's
how it's gonna work.

68
00:03:49.327 --> 00:03:54.803
So knowing that, go into the appropriate
resource route files and

69
00:03:54.803 --> 00:03:59.593
add that middleware stack I
was just talking about, one or

70
00:03:59.593 --> 00:04:03.470
both, or none,
depending on what you think.

71
00:04:03.470 --> 00:04:07.750
We just talked about which ones
we should lock down, and do that.

72
00:04:07.750 --> 00:04:10.870
Just remember,
it can take an array of middleware.

73
00:04:12.200 --> 00:04:13.770
It can also take common
separated middleware.

74
00:04:13.770 --> 00:04:15.910
But we just have to make sure
we put it before the controller.

75
00:04:15.910 --> 00:04:17.719
So for instance, if I had a middleware,
I would put it here.

76
00:04:18.790 --> 00:04:24.560
So if I wanted to put a middleware
on get request to /API/category,

77
00:04:24.560 --> 00:04:25.590
I would put the middleware here.

78
00:04:25.590 --> 00:04:27.680
And then I put a comma.

79
00:04:28.820 --> 00:04:32.330
If I want to put another middleware,
I put another one here and I put a comma.

80
00:04:32.330 --> 00:04:35.070
If I wanted to put three in here,
I put three middleware in here.

81
00:04:36.530 --> 00:04:38.688
And I put a comma.

82
00:04:38.688 --> 00:04:41.267
All right, so that's how you would put
the middleware on the specific routes.

83
00:04:49.607 --> 00:04:50.987
&gt;&gt; Scott Moss: Does anybody
not follow me there?

84
00:04:54.528 --> 00:04:55.689
&gt;&gt; Scott Moss: So
this is where I put middleware,

85
00:04:55.689 --> 00:04:57.240
I'll just make one right now so
you can see.

86
00:04:57.240 --> 00:05:00.960
So if I said,
all right let's do it on post.

87
00:05:02.160 --> 00:05:03.268
So I got to the post routes.

88
00:05:03.268 --> 00:05:04.687
I'm gonna put rare.

89
00:05:04.687 --> 00:05:09.204
So that is gonna make an inline
middleware with anonymous function, and

90
00:05:09.204 --> 00:05:10.767
we'll put a comma here.

91
00:05:12.948 --> 00:05:16.746
&gt;&gt; Scott Moss: So just by doing this,
I now have middleware.

92
00:05:16.746 --> 00:05:23.527
Now I just next,
some I'm just gonna say logger.log.

93
00:05:23.527 --> 00:05:26.867
Hey in middleware.

94
00:05:26.867 --> 00:05:28.030
All right, then we're gonna call it next.

95
00:05:28.030 --> 00:05:33.140
So this is gonna happen
before I get all the posts.

96
00:05:35.220 --> 00:05:36.170
So let's check that out.

97
00:05:36.170 --> 00:05:38.930
So let's go to the terminal output, cool.

98
00:05:38.930 --> 00:05:40.960
And if I refresh this page,
I should see that.

99
00:05:44.130 --> 00:05:46.830
And I didn't see it.

100
00:05:46.830 --> 00:05:49.130
Wait, something broke, let's see.

101
00:05:52.900 --> 00:05:57.032
Let me see, I broke something.

102
00:06:00.864 --> 00:06:02.960
&gt;&gt; Scott Moss: The leaf chorus is off.

103
00:06:02.960 --> 00:06:04.510
It looks like I left
chorus off of something.

104
00:06:05.700 --> 00:06:08.650
Yeah, chorus isn't enabled
because you have to do it,

105
00:06:08.650 --> 00:06:09.484
that's why it's not working.

106
00:06:09.484 --> 00:06:16.260
Sorry, yeah, I already told you how to
do that so now you know how to do that,

107
00:06:16.260 --> 00:06:19.670
but I'm just gonna do it right quick so
I can show you what I'm talking about.

108
00:06:23.840 --> 00:06:26.952
If you don't have this, just empty and
install it, empty and install course,

109
00:06:26.952 --> 00:06:29.238
it should be in the package with JSON so
you should be good.

110
00:06:33.378 --> 00:06:35.630
&gt;&gt; Scott Moss: Cool, all right,
so I'll refresh that.

111
00:06:35.630 --> 00:06:36.450
&gt;&gt; Speaker 2: Maybe override?

112
00:06:36.450 --> 00:06:40.253
&gt;&gt; Scott Moss: Yeah, we should totally
do override, but I don't need it for

113
00:06:40.253 --> 00:06:42.677
what I'm trying to show you, but yes.

114
00:06:47.797 --> 00:06:48.918
&gt;&gt; Scott Moss: There we go, okay.

115
00:06:48.918 --> 00:06:51.638
Let's check it now.

116
00:06:51.638 --> 00:07:00.185
Server error 500.

117
00:07:00.185 --> 00:07:03.545
Aw, these typos, man, those typos.

118
00:07:11.405 --> 00:07:12.245
&gt;&gt; Scott Moss: See the error log, though?

119
00:07:12.245 --> 00:07:14.010
It's pretty cool.

120
00:07:14.010 --> 00:07:17.230
It's easy to spot them [LAUGH].

121
00:07:17.230 --> 00:07:22.880
All right now, okay,
there you go, hey in middleware.

122
00:07:22.880 --> 00:07:26.940
All right, patched some of your
code together that worked.

123
00:07:26.940 --> 00:07:28.060
Y'all are pulling my teeth, no.

124
00:07:28.060 --> 00:07:31.690
But yeah, just put any middle
that you want right here.

125
00:07:31.690 --> 00:07:34.460
If I wanted another before the controller
works, I put another one here.

126
00:07:34.460 --> 00:07:37.970
So using those two middleware
that we talked about in auth.js.

127
00:07:37.970 --> 00:07:40.790
Line them up so
that we protect the resources.

128
00:07:40.790 --> 00:07:41.780
So like if I try, for

129
00:07:41.780 --> 00:07:44.380
instance, one particular resource
we know we wanna protect.

130
00:07:44.380 --> 00:07:48.280
You should never be able to make
a post if you're not logged in, right.

131
00:07:50.410 --> 00:07:51.640
So there's no way I should
be able to do that.

132
00:07:51.640 --> 00:07:53.860
So we know for
sure decode token should be there.

133
00:07:53.860 --> 00:07:57.794
So that means we should be expecting
the token to be on that request before you

134
00:07:57.794 --> 00:07:58.477
make a post.

135
00:08:02.297 --> 00:08:05.680
&gt;&gt; Scott Moss: Do we actually
need to refresh the user there?

136
00:08:05.680 --> 00:08:09.470
Maybe not, maybe we don't need an extra
database query just to create a post.

137
00:08:09.470 --> 00:08:12.310
Depends on what you're doing at
controller method, but at the very least,

138
00:08:12.310 --> 00:08:14.720
we definitely need to verify that.

139
00:08:14.720 --> 00:08:18.750
So let's do that for, what is it, two now?

140
00:08:18.750 --> 00:08:21.029
Let's do that for 30 minutes,
and we'll come back at 2:30.

