WEBVTT

1
00:00:00.000 --> 00:00:04.016
[MUSIC]

2
00:00:04.016 --> 00:00:07.623
&gt;&gt; Speaker 1: So what we're gonna do now
is we're gonna talk about authentication,

3
00:00:07.623 --> 00:00:09.375
which I really, I'm a big fan of.

4
00:00:09.375 --> 00:00:13.380
I'm not a security expert, but
I like authentication for some reason.

5
00:00:13.380 --> 00:00:15.370
I don't know why, I just like it.

6
00:00:15.370 --> 00:00:20.620
I like that it sucks and
it's really hard [LAUGH]

7
00:00:20.620 --> 00:00:22.580
and it just feels good when it works.

8
00:00:22.580 --> 00:00:25.950
And, I always have people
try to break my stuff.

9
00:00:25.950 --> 00:00:27.075
See if you can get in here.

10
00:00:27.075 --> 00:00:32.017
I built this one system one time,
before I knew much about authentications.

11
00:00:32.017 --> 00:00:34.881
It was reading all these blog posts and
tutorials, and I built this one system,

12
00:00:34.881 --> 00:00:37.370
to the point where I
couldn't get in myself.

13
00:00:37.370 --> 00:00:41.210
I didn't know how to get in my own,
I had to drop the entire database and

14
00:00:41.210 --> 00:00:44.680
all this stuff because it was so
well protected I couldn't get in it.

15
00:00:44.680 --> 00:00:47.941
And I just wasn't knowledgeable enough
to figure out what I was doing wrong.

16
00:00:47.941 --> 00:00:50.510
So, that was pretty funny to me.

17
00:00:52.300 --> 00:00:56.430
So, there are many ways to
protect your API, right?

18
00:00:56.430 --> 00:00:58.550
What's a typical way you
would protect an API?

19
00:01:05.583 --> 00:01:09.093
&gt;&gt; Speaker 2: Everything needs
a header with some password or

20
00:01:09.093 --> 00:01:11.870
something, like a basic off.

21
00:01:11.870 --> 00:01:13.670
&gt;&gt; Speaker 1: Okay, so a basic off.

22
00:01:13.670 --> 00:01:16.897
That's one way, any other way?

23
00:01:16.897 --> 00:01:20.680
I know we got some back-end people here,
.net experience.

24
00:01:20.680 --> 00:01:22.371
How do you guys protect your APIs?

25
00:01:25.208 --> 00:01:27.603
&gt;&gt; Speaker 2: Cookies.

26
00:01:27.603 --> 00:01:28.696
&gt;&gt; Speaker 1: Cookies, exactly.

27
00:01:28.696 --> 00:01:31.690
I was wondering if somebody was gonna say
that cuz, I know we know cookies in here.

28
00:01:31.690 --> 00:01:36.606
Yeah, so cookies is probably the thing
that people use for authentication,

29
00:01:36.606 --> 00:01:39.820
authorization, identification, right?

30
00:01:39.820 --> 00:01:41.350
So that's the thing.

31
00:01:41.350 --> 00:01:44.337
So you have your cookies and
then you'd have a session store,

32
00:01:44.337 --> 00:01:48.243
where you store your sessions, some key
value pair, maybe your using Redis, or

33
00:01:48.243 --> 00:01:50.962
whatever you're using,
you have some session store.

34
00:01:50.962 --> 00:01:53.360
Sorry, I really have something in my eye,
if you see me wiping up here.

35
00:01:53.360 --> 00:01:56.765
Probably looks like I'm crying,
I'm not [LAUGH],

36
00:01:56.765 --> 00:01:59.861
my eye is really bothering me for
some reason.

37
00:01:59.861 --> 00:02:02.480
So, yeah,
you have cookies in a session store.

38
00:02:02.480 --> 00:02:04.580
And a session store is just
like a key value pair of,

39
00:02:05.770 --> 00:02:07.432
who's logged in right now, right.

40
00:02:07.432 --> 00:02:10.780
So that when they make a request,
those cookies are automatically still in

41
00:02:10.780 --> 00:02:13.840
the header and we can de-serialize
those cookies, match it against

42
00:02:13.840 --> 00:02:18.030
something in the session store, like aw,
it's this person, hey, how's it going?

43
00:02:18.030 --> 00:02:23.290
That's what we normally do, and that
works, there's nothing wrong with that.

44
00:02:23.290 --> 00:02:27.315
Who here has done mobile
development with Android of iOS?

45
00:02:27.315 --> 00:02:31.620
All right, then you probably know that
either you just didn't deal with cookies

46
00:02:31.620 --> 00:02:35.120
on iPhone or if you did,
it was really, really hard.

47
00:02:35.120 --> 00:02:35.960
Not as easy as the web.

48
00:02:38.660 --> 00:02:44.810
So what we're gonna be using this
JSON web tokens or JWT for short.

49
00:02:44.810 --> 00:02:48.450
It's pronounced jot,
like j-o-t, but it's JWT.

50
00:02:48.450 --> 00:02:49.780
So JSON web tokens or JWT.

51
00:02:51.370 --> 00:02:53.990
So JWT is an open standard
that's heavily used.

52
00:02:53.990 --> 00:02:56.281
Here's a link I included
you can click on it,

53
00:02:56.281 --> 00:02:59.280
and we'll be playing around
with some stuff in here.

54
00:02:59.280 --> 00:03:01.930
This is a website built by
this company called Alt Zero,

55
00:03:01.930 --> 00:03:06.250
who have authentication as a service,
and they do a whole bunch of JWT stuff.

56
00:03:06.250 --> 00:03:10.870
They have this really nice
site where you can decode,

57
00:03:10.870 --> 00:03:15.680
and encode, and mess around with different
algorithms, with the JSON web tokens, and

58
00:03:15.680 --> 00:03:17.290
look at all the libraries for
other languages.

59
00:03:17.290 --> 00:03:18.560
It's pretty cool.

60
00:03:18.560 --> 00:03:23.372
But, we'll be using JSON web tokens,
like I said, it's an open standard that's

61
00:03:23.372 --> 00:03:27.520
heavily used so it is not like some
corporate company came up with this.

62
00:03:27.520 --> 00:03:30.340
It's an open thing,
it's collective, it's open source.

63
00:03:30.340 --> 00:03:35.228
So, because we're using a token approach,
we don't need to keep track of

64
00:03:35.228 --> 00:03:38.811
who's signed in with a session store or
have cookies.

65
00:03:38.811 --> 00:03:43.905
So there is no session store anymore,
there are no cookies anymore.

66
00:03:43.905 --> 00:03:46.316
Does that sound dangerous to anybody?

67
00:03:46.316 --> 00:03:50.207
Yeah, that's what I thought too the first
time, I was like, that sounds incredibly

68
00:03:50.207 --> 00:03:53.140
dangerous, that doesn't make any sense,
why would I do that?

69
00:03:54.150 --> 00:03:57.073
I want the server to be a source of
truth to figure out who's signed in and

70
00:03:57.073 --> 00:03:57.622
who's not.

71
00:03:57.622 --> 00:04:00.503
If I leave it up to the client,
then they'll get me every time, right?

72
00:04:00.503 --> 00:04:05.102
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Speaker 1: I know, but you'll see.

73
00:04:07.854 --> 00:04:12.230
&gt;&gt; Speaker 1: So, the json web token will
be sent on every single request, because

74
00:04:12.230 --> 00:04:17.520
rest is stateless and we know not of the
previous request because it's stateless.

75
00:04:17.520 --> 00:04:20.030
So, we don't know who you were
the last time you made a request.

76
00:04:20.030 --> 00:04:22.844
If you don't send us a token every
single time to this protected resource,

77
00:04:22.844 --> 00:04:26.000
then you're just not gonna get it even
though we gave it to you a second ago.

78
00:04:26.000 --> 00:04:29.220
They gave it to you a second ago
because you had your json web token,

79
00:04:29.220 --> 00:04:31.510
this request you didn't, so
you're just not gonna get it, right.

80
00:04:31.510 --> 00:04:35.870
It's an easy thing, give us a token
that works and is valid, and

81
00:04:35.870 --> 00:04:39.080
maybe we might even check that
token see if it's a real user.

82
00:04:39.080 --> 00:04:42.930
And then, if you have their appropriate
identification authorizations then we'll

83
00:04:42.930 --> 00:04:43.649
give you the resource.

84
00:04:46.930 --> 00:04:49.470
So like I said, the token since
we don't have session store,

85
00:04:49.470 --> 00:04:50.730
we don't have cookies or
anything like that,

86
00:04:50.730 --> 00:04:54.380
the token has to be stored on the client
that is requesting the resources.

87
00:04:54.380 --> 00:04:56.510
So if the client was a web
browser in this case,

88
00:04:56.510 --> 00:05:01.610
we would store the json web token on the
client, somewhere where it can persist.

89
00:05:01.610 --> 00:05:03.838
And that's probably gonna be local
storage local storage, right?

90
00:05:03.838 --> 00:05:08.410
Or, local storage is the common,
you guys know what I'm talking about,

91
00:05:08.410 --> 00:05:11.900
like you open up the browser and
you click on Resources.

92
00:05:11.900 --> 00:05:13.528
You get all this stuff over here.

93
00:05:13.528 --> 00:05:15.160
Local Storage, Session Storage,

94
00:05:15.160 --> 00:05:18.570
Cookies, Application Cache for
offline applications.

95
00:05:18.570 --> 00:05:21.120
Web SQL,
which is like a database in your browser.

96
00:05:21.120 --> 00:05:24.720
The newer index, sorry,
index DV is the newer Web SQL.

97
00:05:24.720 --> 00:05:30.360
So Local Storage is like a key
value pair store for your browser.

98
00:05:30.360 --> 00:05:33.470
So, this is where you would
store your json web token.

99
00:05:33.470 --> 00:05:37.910
You give it a key, give it a value,
and it will be there specifically for

100
00:05:37.910 --> 00:05:38.410
this browser.

101
00:05:40.880 --> 00:05:44.775
Cookies store is kind of

102
00:05:44.775 --> 00:05:49.844
the same thing but not really.

103
00:05:49.844 --> 00:05:53.510
So that's where we store our tokens,
right on the client, put them right there.

104
00:05:53.510 --> 00:05:55.620
Or at least that's where the client
will store their tokens,

105
00:05:55.620 --> 00:05:59.020
the server doesn't care where you
do the tokens, it's just like,

106
00:05:59.020 --> 00:06:02.400
I gave you a token, if you want something
from me, give me the token back.

107
00:06:02.400 --> 00:06:05.346
That's it, it's a handshake.

108
00:06:05.346 --> 00:06:08.710
Note, tokens can be used for OAuth2.

109
00:06:08.710 --> 00:06:11.382
They work, you can replace
the tokens you normally use for

110
00:06:11.382 --> 00:06:13.260
OAuth2 with JSON web tokens,
they work the same way.

111
00:06:13.260 --> 00:06:14.880
It's pretty cool actually.

112
00:06:14.880 --> 00:06:18.585
And they're actually really easy to
implement, at least in JavaScript.

113
00:06:23.250 --> 00:06:28.090
So no, we will not be going over
the algorithms behind all this stuff, so

114
00:06:28.090 --> 00:06:29.440
if you're some security person, and

115
00:06:29.440 --> 00:06:34.320
you really dig messing around with SHAs
and how that stuff works, and the time and

116
00:06:34.320 --> 00:06:36.700
complexity, and all that good stuff,
we won't be doing that.

117
00:06:36.700 --> 00:06:40.460
I'm not a computer scientist,
I'm not a security expert.

118
00:06:40.460 --> 00:06:44.795
We can talk about it, but we will not
be going over that stuff in detail.

119
00:06:44.795 --> 00:06:46.665
Besides, this website right here,
like I said,

120
00:06:46.665 --> 00:06:48.862
does a pretty good job of telling
you all about that stuff.

