WEBVTT

1
00:00:00.000 --> 00:00:04.477
[MUSIC]

2
00:00:04.477 --> 00:00:08.224
&gt;&gt; Speaker 1: So routers are awesome, this
entire time we've been using the actual

3
00:00:08.224 --> 00:00:12.850
express application for our router,
which works great, as you can see.

4
00:00:12.850 --> 00:00:18.330
But with the introduction of Express 4,
they introduce sub routers or

5
00:00:18.330 --> 00:00:21.230
just application routers in general.

6
00:00:21.230 --> 00:00:27.530
You could think of a router as
a piece of routing functionality and

7
00:00:27.530 --> 00:00:29.830
its own middleware stack.

8
00:00:29.830 --> 00:00:34.000
So right now we have this
application level, middleware stack.

9
00:00:34.000 --> 00:00:36.940
So everything in the application
runs through this.

10
00:00:36.940 --> 00:00:41.240
But with a router, we can isolate an
entirely different set of rules as far as

11
00:00:41.240 --> 00:00:45.930
middleware and routes, and
isolate it, completely separate.

12
00:00:45.930 --> 00:00:48.040
Think of it as like
a component of routers.

13
00:00:48.040 --> 00:00:50.670
It's like its own little
server inside of a server.

14
00:00:51.770 --> 00:00:55.690
It still uses its parents' middleware, but

15
00:00:55.690 --> 00:00:57.474
it also has its own middleware
that nobody else uses.

16
00:00:57.474 --> 00:01:03.230
You'll see as we start writing it, how
that makes sense, and why it's amazing.

17
00:01:03.230 --> 00:01:06.490
So this is why I was saying that Express 4
is actually a really good contender as far

18
00:01:06.490 --> 00:01:09.920
as writing an API, whereas Express 3 was
kinda limited, because it didn't have

19
00:01:09.920 --> 00:01:13.710
that, you had to put everything on app,
and that was just like, eh, okay, okay.

20
00:01:13.710 --> 00:01:15.884
Express 4 is a lot better at it,
cuz you can do these mini-routers.

21
00:01:17.420 --> 00:01:20.462
So yeah, we can now have more than
one router in our application.

22
00:01:20.462 --> 00:01:24.270
Think of a router as a module with its
own routing and middleware stack and

23
00:01:24.270 --> 00:01:24.840
functionality.

24
00:01:27.480 --> 00:01:31.530
It's like having a lot of those apps that
have their own stack in many places.

25
00:01:33.250 --> 00:01:37.420
This is great and allows more fine
grain control over our resources.

26
00:01:37.420 --> 00:01:39.310
Also great for our versioning our APIs.

27
00:01:41.310 --> 00:01:44.620
So routers can set up routing,
that's why they call it routers, and

28
00:01:44.620 --> 00:01:47.990
middleware the exact same way
as we talked about with the app.

29
00:01:47.990 --> 00:01:51.930
So everything that we've done here works
exactly the same way with routers.

30
00:01:53.110 --> 00:01:54.400
It's literally the exact same thing.

31
00:01:54.400 --> 00:01:56.650
They're just not on an application level.

32
00:01:56.650 --> 00:01:57.880
They're just on a local level.

33
00:02:02.750 --> 00:02:05.160
Super typo.

34
00:02:05.160 --> 00:02:08.230
A router is a little different
than the entire app,

35
00:02:08.230 --> 00:02:12.670
as previous examples because the entire
app comes from the implication of Express,

36
00:02:13.990 --> 00:02:18.930
and we still control global middleware and
configuration and

37
00:02:18.930 --> 00:02:21.820
also, it will also set up routing for
other routers we make.

38
00:02:21.820 --> 00:02:26.440
So what I'm saying, there is the app
right here that we got from Express

39
00:02:27.500 --> 00:02:30.590
is still gonna set up all
this global middleware and

40
00:02:30.590 --> 00:02:34.210
it's also gonna set up the routes for our
sub-routers, as you'll see in a minute.

41
00:02:36.860 --> 00:02:38.000
So we still need this app.

42
00:02:39.140 --> 00:02:40.000
It's still gonna come in handy.

43
00:02:41.260 --> 00:02:43.458
Otherwise we'll be writing
a lot of boiler plate code.

44
00:02:45.640 --> 00:02:49.150
So, a good pattern is to define
routes on the global app or

45
00:02:49.150 --> 00:02:53.380
a router and pass control to another
router that has its own config.

46
00:02:53.380 --> 00:02:55.030
So what does that actually mean?

47
00:02:59.390 --> 00:03:01.520
So this is the pattern something
like we've been doing before.

48
00:03:01.520 --> 00:03:03.530
We have Express, we make an app.

49
00:03:03.530 --> 00:03:04.380
We've done that.

50
00:03:04.380 --> 00:03:07.530
The new thing is this, so
now what we do is we make a new router.

51
00:03:07.530 --> 00:03:11.728
We say express.Router,
which turns the router instance.

52
00:03:11.728 --> 00:03:17.111
And then what we can do is we can
do the same thing we do in the app,

53
00:03:17.111 --> 00:03:23.103
I'm gonna say when somebody does
a get request to root on this router,

54
00:03:23.103 --> 00:03:25.457
just res.json the todos.

55
00:03:25.457 --> 00:03:31.500
But right below it on app,
I'm saying app.use(/todos, todosRouter).

56
00:03:31.500 --> 00:03:33.170
So, this is called mounting, so

57
00:03:33.170 --> 00:03:38.240
what I'm doing is I'm mounting
this router to this URL.

58
00:03:38.240 --> 00:03:41.430
So when anybody does any
request with any verb get, put,

59
00:03:41.430 --> 00:03:45.900
delete, post to this URL, use this router.

60
00:03:45.900 --> 00:03:47.310
So I'm gonna walk through what happens.

61
00:03:47.310 --> 00:03:50.460
So let's say I do a get
request to slash todos.

62
00:03:50.460 --> 00:03:54.780
Okay so I do a get request to slash todos,
it comes through here, it comes to app,

63
00:03:54.780 --> 00:03:56.430
it's like, here's the first middleware,

64
00:03:56.430 --> 00:03:59.980
slash todos you want me to use this
router great, let me go up here.

65
00:03:59.980 --> 00:04:03.180
So it comes to this router and
it's like, yeah, I did a get request.

66
00:04:03.180 --> 00:04:06.850
And then this route right here,
this slash, it's not actually referencing

67
00:04:06.850 --> 00:04:11.470
the route slash, it's referencing
the root of this router, which is todos.

68
00:04:12.840 --> 00:04:16.950
So when I say todoRouter.get,
root, I'm actually saying todo.

69
00:04:16.950 --> 00:04:20.200
I'm actually saying app.get/todos.

70
00:04:20.200 --> 00:04:23.630
So the root of todosRouter is
whatever was mounted on it.

71
00:04:25.940 --> 00:04:30.302
Right?
So, if I were to put slash ID right here,

72
00:04:30.302 --> 00:04:33.943
the full URL would be /todos/ID.

73
00:04:37.888 --> 00:04:40.370
&gt;&gt; Speaker 1: So this will not trigger
if I did a get request to just root.

74
00:04:40.370 --> 00:04:45.347
It will trigger if I did a get request to
/todos, which is the root of this router.

75
00:04:45.347 --> 00:04:48.447
&gt;&gt; Speaker 2: So if you're expecting
a get of an ID you put colon and ID?

76
00:04:48.447 --> 00:04:50.971
&gt;&gt; Speaker 1: Yep, exactly,
you put colon ID right here and

77
00:04:50.971 --> 00:04:53.920
that would be slash todo, slash ID.

78
00:04:53.920 --> 00:04:56.480
So I want you to start,
when you see this as a URL,

79
00:04:56.480 --> 00:04:59.510
start thinking of it as root,
that's what that means, root.

80
00:04:59.510 --> 00:05:03.990
It doesn't really mean slash,
it means what's the root of this?

81
00:05:03.990 --> 00:05:06.980
So the root of the todo router is
whatever it was mounted on which

82
00:05:06.980 --> 00:05:08.940
was slash todos, that's the route.

83
00:05:13.980 --> 00:05:15.480
Okay, so, then it will run this.

84
00:05:15.480 --> 00:05:19.070
So again, this todosRouter,
it can do everything app can do.

85
00:05:19.070 --> 00:05:26.610
It can say, todos.use, todos.all,
todos.params, todos.post, put, delete.

86
00:05:26.610 --> 00:05:27.410
It can do everything.

87
00:05:27.410 --> 00:05:30.750
You can also pass it in the middle right
here, too, it's the exact same thing.

88
00:05:30.750 --> 00:05:33.880
As you can see,
we get to separate different

89
00:05:35.700 --> 00:05:37.910
paths to different routers for
different resources.

90
00:05:37.910 --> 00:05:41.350
Like, okay, so if we hit this resource,
just load up this router.

91
00:05:41.350 --> 00:05:44.260
I mean, app doesn't even care
what this thing does anymore.

92
00:05:44.260 --> 00:05:45.510
It's just like, you take care of it.

93
00:05:45.510 --> 00:05:46.060
I don't even care.

94
00:05:47.410 --> 00:05:50.440
But if app had some middleware up top here

95
00:05:50.440 --> 00:05:53.370
that stuff would still run through the
middleware first before it comes to here.

96
00:05:53.370 --> 00:05:58.360
And then it would run through this thing's
middleware and then it would go here.

97
00:05:58.360 --> 00:06:01.410
So, that's why I said global
app controls global middleware.

98
00:06:01.410 --> 00:06:04.880
So, if there was more middleware up here,
it would still go through there first,

99
00:06:04.880 --> 00:06:10.020
unless we assigned this
app.use before the middleware.

100
00:06:10.020 --> 00:06:13.730
Right, so if we put
app.use/todosRouter and then we put

101
00:06:13.730 --> 00:06:16.680
apps middleware underneath it, then it
would never go through that middleware,

102
00:06:16.680 --> 00:06:21.050
it would only go straight to the
todosRouter, but if we put apps middleware

103
00:06:21.050 --> 00:06:24.510
up top up here then it would go through
that middleware first and then come here.

104
00:06:25.570 --> 00:06:26.430
So it's all about positioning.

105
00:06:28.080 --> 00:06:30.690
Just like the example I gave with
the array and how all that stuff lines up,

106
00:06:30.690 --> 00:06:38.605
it's the same thing
&gt;&gt; Speaker 1: Any

107
00:06:38.605 --> 00:06:42.070
questions on the sub-routing?

108
00:06:42.070 --> 00:06:46.540
So again, we're going to start using
the sub-routing, allows more flexibility,

109
00:06:46.540 --> 00:06:49.470
it has its own config,
it's got its own stuff.

110
00:06:49.470 --> 00:06:50.730
This is actually really powerful.

111
00:06:50.730 --> 00:06:51.997
I was really excited about this.

112
00:06:51.997 --> 00:06:54.737
I almost gave up on Express a while
back until they came out with this.

113
00:06:54.737 --> 00:06:56.078
I was like, finally.

114
00:06:56.078 --> 00:06:58.980
So this is a really, really great feature.

115
00:06:58.980 --> 00:07:01.960
But I guess you really wouldn't know it
unless you were using Express 3 a lot.

116
00:07:01.960 --> 00:07:03.950
But this is a great feature,
and so we're gonna use it

