WEBVTT

1
00:00:00.000 --> 00:00:04.036
[MUSIC]

2
00:00:04.036 --> 00:00:05.462
&gt;&gt; Scott Moss: So
what you all are going to be doing,

3
00:00:05.462 --> 00:00:07.590
you've got three functions
that we have to build out.

4
00:00:07.590 --> 00:00:12.907
One is partially built out and
the other two not at all.

5
00:00:12.907 --> 00:00:17.724
But this one is the d code token, so
it's going to be the middleware that

6
00:00:17.724 --> 00:00:22.317
we are going to use when we want to
check the incoming request token.

7
00:00:22.317 --> 00:00:26.270
Its job is to do exactly what it says,
is to decode the token.

8
00:00:26.270 --> 00:00:30.970
Is to take the token with the secret,
turn it back to what it was originally.

9
00:00:30.970 --> 00:00:32.677
Or at least attempt to.

10
00:00:32.677 --> 00:00:36.547
If it can't, it should let us know so
we can send an error back.

11
00:00:36.547 --> 00:00:38.167
A lot is happening here.

12
00:00:38.167 --> 00:00:40.007
You can read the comments here.

13
00:00:40.007 --> 00:00:43.241
But in short, remember I was saying
earlier, the token should be on

14
00:00:43.241 --> 00:00:47.440
the authorization header, but optionally,
it could also be on the query string.

15
00:00:47.440 --> 00:00:48.500
This is what this check is doing.

16
00:00:48.500 --> 00:00:51.380
It's like, okay, if we have req.query, and

17
00:00:51.380 --> 00:00:56.430
req.query has an access_token property,
they probably put the token on there.

18
00:00:56.430 --> 00:00:58.600
So let's grab the token off of that, and

19
00:00:58.600 --> 00:01:02.350
let's attach it to
req.headers.authorization.

20
00:01:02.350 --> 00:01:05.300
Now the weird thing that's going on
here is you see this word, Bearer.

21
00:01:05.300 --> 00:01:06.710
We didn't talk about this.

22
00:01:06.710 --> 00:01:08.700
And then I'm adding the token to that.

23
00:01:08.700 --> 00:01:14.570
So, in the spec, what's happening here is
that, or at least this check token thing,

24
00:01:14.570 --> 00:01:22.060
at least, is looking for the token string
with a word called Bearer, just like this.

25
00:01:22.060 --> 00:01:25.440
Bearer, with a space after it,
followed by the token.

26
00:01:25.440 --> 00:01:26.620
That's actually in the spec.

27
00:01:26.620 --> 00:01:31.440
If you go read the JWT spec, most of
these libraries are expecting to see

28
00:01:31.440 --> 00:01:36.170
Bearer space the token, so
that's why that's there.

29
00:01:36.170 --> 00:01:39.410
If you got rid of this, or
just did that, it wouldn't work.

30
00:01:39.410 --> 00:01:41.640
Even if this was a valid token,
it won't work.

31
00:01:43.640 --> 00:01:48.200
So this is, I guess, a way of name-spacing
that this is a json web token.

32
00:01:48.200 --> 00:01:48.900
Cuz there are so

33
00:01:48.900 --> 00:01:51.930
many other tokens you could put out there
on an authorization header I guess.

34
00:01:51.930 --> 00:01:53.620
So Bearer maybe is a way to name-space it.

35
00:01:55.720 --> 00:01:56.880
But it is expecting that.

36
00:01:56.880 --> 00:02:02.990
So we attach it to
the authorization header, and

37
00:02:02.990 --> 00:02:06.570
then checkToken takes in the request,
the response and next, and

38
00:02:06.570 --> 00:02:09.010
because the authorization
header is on the request.

39
00:02:09.010 --> 00:02:13.330
checkToken will do one of a few things,
it will either called next if the token is

40
00:02:13.330 --> 00:02:16.770
valid, so it's like cool this token
is valid I'm gonna call next and

41
00:02:16.770 --> 00:02:17.859
it will go to the next middleware.

42
00:02:19.520 --> 00:02:22.470
If it's not valid,
it will call next with an error.

43
00:02:25.570 --> 00:02:26.692
So, it'll still call next but

44
00:02:26.692 --> 00:02:33.460
a passing error like unauthorized.
&gt;&gt; Scott Moss: If it is successful,

45
00:02:33.460 --> 00:02:37.561
it will grab whatever is spit back
from the decoding of the token,

46
00:02:37.561 --> 00:02:39.364
and attach it to rec.user.

47
00:02:40.630 --> 00:02:44.790
What's in our case, will only ever be
an ID, will only ever signing an ID.

48
00:02:44.790 --> 00:02:48.270
So the ID's going to be
a task to direct.user.

49
00:02:48.270 --> 00:02:52.114
So you'll use direct.user._.id and

50
00:02:52.114 --> 00:02:56.296
you'll get the ID and
then it'll call next.

51
00:02:56.296 --> 00:03:00.276
So all this, you don't have to
work with this, this is good.

52
00:03:00.276 --> 00:03:03.049
What you will have to do is
these two things down here, so

53
00:03:03.049 --> 00:03:05.350
getFreshUser is exactly
what it sounds like.

54
00:03:05.350 --> 00:03:06.450
So now that we got the token,

55
00:03:06.450 --> 00:03:10.680
we got the ID back, now we want to clear
the database and get the user with the ID.

56
00:03:10.680 --> 00:03:14.670
So by the time it gets to our controllers,
the controller can just say, req.user and

57
00:03:14.670 --> 00:03:16.050
it has the user object on the request.

58
00:03:16.050 --> 00:03:17.720
That's what this is going to do.

59
00:03:17.720 --> 00:03:22.030
Again, I said up here it does attach
the ID to req.user, but that's just a ID.

60
00:03:22.030 --> 00:03:25.470
We can now use that ID to get
the full user from the database and

61
00:03:25.470 --> 00:03:28.810
replace right that user with
the actual user document.

62
00:03:28.810 --> 00:03:32.550
So by time it gets to the control
event that the controller can just say

63
00:03:32.550 --> 00:03:35.380
right that user, it knows
everything about the incoming user.

64
00:03:35.380 --> 00:03:39.222
So that's what you gotta do inside
this function, tell it, have it so

65
00:03:39.222 --> 00:03:40.401
you can just redraw it.

66
00:03:40.401 --> 00:03:43.224
But really,
you are gonna do is create the database,

67
00:03:43.224 --> 00:03:45.620
you have access to
req.user inside of here.

68
00:03:47.260 --> 00:03:51.680
Because this getFresh middleware is
always gonna run after decode token,

69
00:03:51.680 --> 00:03:53.790
because we're gonna use it that way.

70
00:03:53.790 --> 00:03:56.160
So just assume that you
have req.user here and

71
00:03:56.160 --> 00:03:58.300
it's an object within
underscore id property.

72
00:03:58.300 --> 00:04:00.263
Given that, you can create a database and

73
00:04:00.263 --> 00:04:03.077
find the appropriate user and
direct to that user.

74
00:04:03.077 --> 00:04:05.586
If you don't find the user,
one or two things happen.

75
00:04:05.586 --> 00:04:09.711
We get into those edge cases where
either they figured out your secret,

76
00:04:09.711 --> 00:04:13.902
they made adjacent web token,
they sent it in, it decoded perfectly and

77
00:04:13.902 --> 00:04:18.506
then it came here and you then you looked
in your database for a req.user.id and

78
00:04:18.506 --> 00:04:20.230
there was nothing in there.

79
00:04:20.230 --> 00:04:22.980
Then one of two things happened.

80
00:04:22.980 --> 00:04:25.488
That's not a real requests
from one of your users, or

81
00:04:25.488 --> 00:04:28.220
the time between they got that
signed token and this time,

82
00:04:28.220 --> 00:04:32.013
the user doesn't exist anymore in the
database somehow, maybe you deleted it,

83
00:04:32.013 --> 00:04:38.020
I don't know.
&gt;&gt; Scott Moss: So

84
00:04:38.020 --> 00:04:40.240
do that and be sure to call Next.

85
00:04:40.240 --> 00:04:41.610
Because this is a middleware function.

86
00:04:41.610 --> 00:04:42.740
So you have to call Next.

87
00:04:42.740 --> 00:04:45.193
That also means if you have an error
in your database you call Next and

88
00:04:45.193 --> 00:04:45.870
pass them the error.

89
00:04:47.420 --> 00:04:50.670
And I'll leave it up to you to decide
what to do if the database goes

90
00:04:50.670 --> 00:04:55.340
to the database, does not return an error,
but doesn't find a user either.

91
00:04:55.340 --> 00:04:56.820
So I'll leave it up to you to
decide what you wanna do there.

92
00:05:00.395 --> 00:05:02.165
And then exports.verify user.

93
00:05:05.155 --> 00:05:07.405
This is going to do something similar but
a little bit different.

94
00:05:07.405 --> 00:05:12.635
So this is going to, actually checking,
like, the passwords.

95
00:05:12.635 --> 00:05:14.545
This is where we're doing the sign in.

96
00:05:14.545 --> 00:05:21.020
So, this is giving the username and pass
Is gonna look up the user by the username,

97
00:05:21.020 --> 00:05:26.570
grab a task password, and
check to see if this password,

98
00:05:26.570 --> 00:05:29.260
after it's hatched,
is matching with a safe hash password.

99
00:05:32.240 --> 00:05:34.450
So as far as hashing the passwords,
you don't have to do that.

100
00:05:34.450 --> 00:05:35.820
I have a method for that,
you don't have to do that.

101
00:05:35.820 --> 00:05:37.410
We haven't gotten there,
but it's in there.

102
00:05:37.410 --> 00:05:39.440
You will not be hashing
the passwords yourself,

103
00:05:39.440 --> 00:05:40.910
cuz we're calling a function
that are already there.

104
00:05:43.590 --> 00:05:46.550
So you'll be doing those two functions and
off that JS.

105
00:05:46.550 --> 00:05:49.060
And if you follow me into API user

106
00:05:50.270 --> 00:05:54.130
model, we get into that stuff
that I was talking about.

107
00:05:54.130 --> 00:05:57.010
The middleware with Mongoose and
then teaching Mongoose new methods.

108
00:05:57.010 --> 00:06:00.490
So we have this one middleware pair
that says UserSchema.pre save, so

109
00:06:00.490 --> 00:06:04.500
this happens anytime before we create
a new user, this function will run.

110
00:06:04.500 --> 00:06:07.670
So what's happening here is

111
00:06:09.060 --> 00:06:11.560
it's converting the password
to an encrypted password.

112
00:06:11.560 --> 00:06:13.290
It's encrypting the password,
that's what it's doing.

113
00:06:13.290 --> 00:06:17.330
That's all it's doing, it's like give me
the password, I'm going to encrypt it so

114
00:06:17.330 --> 00:06:19.740
we also added a password field up here to.

115
00:06:19.740 --> 00:06:21.420
There's type, there's string and
also required.

116
00:06:23.620 --> 00:06:27.130
So it's overriding the plain text
password with an encrypted password and

117
00:06:27.130 --> 00:06:27.950
then it's called a next.

118
00:06:27.950 --> 00:06:33.110
So then it you go down and look at
these methods, we have authenticate,

119
00:06:33.110 --> 00:06:38.470
which takes a plain text password and
will return true or false if this

120
00:06:38.470 --> 00:06:43.740
user's saved past password matches
the has plain text password.

121
00:06:43.740 --> 00:06:46.440
So this is perfect for sign-up.

122
00:06:46.440 --> 00:06:49.740
So this is what you would use and
verify user.

123
00:06:49.740 --> 00:06:51.310
It even says it right here.

124
00:06:51.310 --> 00:06:53.840
Use the authenticated method
on the user document.

125
00:06:53.840 --> 00:06:55.860
So this is the authenticated
method that it's talking about.

126
00:06:58.450 --> 00:07:04.630
And then encrypt password just takes
a password and it generates a salt and

127
00:07:04.630 --> 00:07:08.540
it encrypts it synchronously, which is
probably not the recommended approach, but

128
00:07:08.540 --> 00:07:11.360
I wanted to keep this
as simple as possible.

129
00:07:11.360 --> 00:07:13.950
You'd probably wanna do this
synchronously to avoid time attacks.

130
00:07:13.950 --> 00:07:23.468
But, we're gonna do this synchronously.
&gt;&gt; Scott Moss: So,

131
00:07:23.468 --> 00:07:24.773
that's what's going on here.

132
00:07:24.773 --> 00:07:28.616
Any questions on this stuff?

133
00:07:28.616 --> 00:07:29.810
You don't need to touch anything here, but

134
00:07:29.810 --> 00:07:32.480
I wanted you to some context
in what's happening.

135
00:07:32.480 --> 00:07:35.339
All of the stuff you're
going to be touching is

136
00:07:35.339 --> 00:07:40.256
off.js.
&gt;&gt; Speaker 2: And

137
00:07:40.256 --> 00:07:42.260
for how long?
&gt;&gt; Scott Moss: Hold

138
00:07:43.610 --> 00:07:47.150
up I still got a little bit more
to show them and then we'll start.

139
00:07:48.550 --> 00:07:51.440
So off.js is where you're
gonna be touching.

140
00:07:51.440 --> 00:07:54.970
If you also go look in the other
files like off.controller, or

141
00:07:54.970 --> 00:07:58.830
I'm sorry controller.js and routes,
some other stuff going on in here.

142
00:08:01.200 --> 00:08:03.570
Inside the controller,
there's a sign in method.

143
00:08:03.570 --> 00:08:05.660
You'll also be doing this one.

144
00:08:05.660 --> 00:08:08.796
This one is just going to,

145
00:08:08.796 --> 00:08:14.410
you can assume req.user will be there from
the middleware that we're gonna assign.

146
00:08:17.520 --> 00:08:19.766
So we can just create a token and
send it back to the client.

147
00:08:19.766 --> 00:08:20.927
So that's all this is going to do.

148
00:08:20.927 --> 00:08:24.380
It's going to go like,
okay, get the req.user.

149
00:08:24.380 --> 00:08:29.560
Get the ID from that, and create
a token and send it back to the client.

150
00:08:29.560 --> 00:08:31.260
If you're looking off that JS,

151
00:08:31.260 --> 00:08:34.730
we have this signed token thing
here that will sign the token.

152
00:08:34.730 --> 00:08:36.830
We just need to send it back.

153
00:08:38.580 --> 00:08:42.570
The way we want to send it back is we
want to send back an object that has

154
00:08:42.570 --> 00:08:45.370
a token property and
its value is the token.

155
00:08:46.890 --> 00:08:50.420
That's what we wanna send back,
so it'll be something like that.

156
00:08:50.420 --> 00:08:56.050
So this would be two lines.

157
00:08:57.560 --> 00:09:00.000
So if you go look at the routes,
this is the route that is happening.

158
00:09:00.000 --> 00:09:00.774
We have a new router.

159
00:09:00.774 --> 00:09:03.601
On sign-in,
we're gonna do controller.signin,

160
00:09:03.601 --> 00:09:06.770
but we need to do something
before this happens.

161
00:09:06.770 --> 00:09:10.880
We need to verify the user,
because they're trying to sign in.

162
00:09:10.880 --> 00:09:14.350
So that's where that method
verifyUser comes in right here.

163
00:09:14.350 --> 00:09:15.620
That's a middleware function.

164
00:09:15.620 --> 00:09:18.520
So complete that,
add that middleware here,

165
00:09:18.520 --> 00:09:23.930
and make sure we're signing the token and
sending it back.

166
00:09:25.070 --> 00:09:26.870
And then complete these two functions.

167
00:09:29.090 --> 00:09:31.630
So one more thing.

168
00:09:31.630 --> 00:09:33.760
So that's all you're gonna have to do.

169
00:09:34.770 --> 00:09:36.760
And you can do this without
the thing I'm about to show you.

170
00:09:36.760 --> 00:09:41.680
But to make it easier, if you want to,
or you can wait until the next step.

171
00:09:41.680 --> 00:09:45.055
On GitHub, there's another
repo on the Frontend Masters.

172
00:09:45.055 --> 00:09:46.854
Github.com.

173
00:09:49.510 --> 00:09:52.750
That we did during the two-day
course earlier this week.

174
00:09:52.750 --> 00:09:57.731
And it is angular components

175
00:09:57.731 --> 00:10:01.887
on the, where is it at?

176
00:10:01.887 --> 00:10:03.466
There should be a Blog branch.

177
00:10:03.466 --> 00:10:05.270
I need to push it up actually.

178
00:10:05.270 --> 00:10:07.130
Yeah, we'll wait till the next step for
this.

179
00:10:07.130 --> 00:10:08.680
And then we'll push it up.

180
00:10:08.680 --> 00:10:12.630
So I have a client app for you guys so
you can actually play with the blog and

181
00:10:12.630 --> 00:10:14.540
see the API and all that stuff work.

182
00:10:14.540 --> 00:10:16.840
But I'll push it up after lunch so
you guys can see it.

183
00:10:16.840 --> 00:10:18.050
It's on a different branch.

184
00:10:18.050 --> 00:10:20.180
So knowing that, let's get started.

185
00:10:20.180 --> 00:10:21.110
We've got 30 minutes,

186
00:10:21.110 --> 00:10:22.980
and that'll bring us, yes?
&gt;&gt; Speaker 2: Just a quick

187
00:10:22.980 --> 00:10:23.590
couple questions.

188
00:10:23.590 --> 00:10:26.120
Somebody is asking if they
need Python to run NPM for

189
00:10:26.120 --> 00:10:28.440
this step.
&gt;&gt; Scott Moss: No,

190
00:10:28.440 --> 00:10:31.370
they should not need Python.
&gt;&gt; Speaker 2: They're getting an error.

191
00:10:31.370 --> 00:10:33.530
I'll try to follow up with them on chat.

192
00:10:33.530 --> 00:10:38.520
And then somebody else said, could you
speak briefly to placing encryption,

193
00:10:38.520 --> 00:10:42.330
decryption methods on a model versus
putting them in something like Passport?

194
00:10:44.060 --> 00:10:46.540
&gt;&gt; Scott Moss: So, I guess when we talk

195
00:10:46.540 --> 00:10:50.290
a Passport,
cuz Passport's job is to authenticate,

196
00:10:50.290 --> 00:10:53.162
I guess you might think it
does make sense to do that.

197
00:10:53.162 --> 00:11:01.510
But, now you're putting the logic, as far

198
00:11:02.890 --> 00:11:07.660
as authentication, as far as hashing and
stuff that the database needs to work.

199
00:11:07.660 --> 00:11:10.170
You're putting that in
something like Passport.

200
00:11:10.170 --> 00:11:14.590
Which, I guess is safe, but maybe you want
to switch out Passport tomorrow, right?

201
00:11:14.590 --> 00:11:16.250
And then, now you have to move that logic.

202
00:11:16.250 --> 00:11:19.520
Or maybe, you were doing so many
different types of authentication schemes

203
00:11:19.520 --> 00:11:22.080
in Passport, and you have to write
the same thing over and over and over and

204
00:11:22.080 --> 00:11:25.360
over again in different schemes, or
you have to build an abstraction around

205
00:11:25.360 --> 00:11:28.160
password so you don't write it over and
over and over again.

206
00:11:28.160 --> 00:11:32.780
I still wouldn't put it in Passport,
Passport's more like, Passport's more like

207
00:11:34.380 --> 00:11:37.840
I wouldn't give the sign in
of my tokens to password.

208
00:11:37.840 --> 00:11:40.630
Password's more like,
I'm gonna handle oauth for you, or

209
00:11:40.630 --> 00:11:42.740
I'm gonna handle a local sign in.

210
00:11:42.740 --> 00:11:46.870
Password's gonna do what we did,
as far as allowing us to

211
00:11:46.870 --> 00:11:51.630
get access to the incoming password or
username and email, but

212
00:11:51.630 --> 00:11:56.350
as far as the signing and checking of it,
you can do it in Passport, but the thing

213
00:11:56.350 --> 00:12:00.290
that's calling that method should
still be your document, in my opinion.

214
00:12:00.290 --> 00:12:02.000
Although there is no wrong or right way.

215
00:12:02.000 --> 00:12:04.046
You can still do it in Passport.

216
00:12:04.046 --> 00:12:09.277
That's the beauty of having it on
the model here, our user model because

217
00:12:09.277 --> 00:12:14.787
it's on an instance of user, we'll
have access to user inside a password.

218
00:12:14.787 --> 00:12:17.502
In Passport, you'll query and
you'll get the user and

219
00:12:17.502 --> 00:12:21.687
you can just call user.authenticate or
user.encrypt password inside a Passport.

220
00:12:21.687 --> 00:12:24.152
So there's really no loss there,

221
00:12:24.152 --> 00:12:28.490
I think it's all about where you
define it not where you use it

