WEBVTT

1
00:00:00.000 --> 00:00:03.902
[MUSIC]

2
00:00:03.902 --> 00:00:07.514
&gt;&gt; Speaker 1: So now,
if you go into step five,

3
00:00:07.514 --> 00:00:12.678
you're going to notice
some small differences

4
00:00:12.678 --> 00:00:16.950
here than where we left off yesterday.

5
00:00:18.640 --> 00:00:22.390
The first thing you notice is
there is this new file, index.js,

6
00:00:22.390 --> 00:00:24.890
does anybody know the meaning
of index.js inside of node?

7
00:00:24.890 --> 00:00:26.340
Do you know?

8
00:00:26.340 --> 00:00:26.950
That's awesome.

9
00:00:26.950 --> 00:00:27.470
Anybody else know?

10
00:00:29.470 --> 00:00:32.150
&gt;&gt; Speaker 2: Is that a convention or-
&gt;&gt; Speaker 1: It's a convention, and

11
00:00:32.150 --> 00:00:35.890
it also has an actual meaning,
it actually does some different.

12
00:00:35.890 --> 00:00:38.300
It behaves differently
than every other file.

13
00:00:38.300 --> 00:00:39.834
It's kinda like index.html.

14
00:00:39.834 --> 00:00:43.890
Remember when we wrote our server,
We have that static server that was

15
00:00:43.890 --> 00:00:46.520
using the express.static,
and I point it to client and

16
00:00:46.520 --> 00:00:50.430
automatically served Linux to HTML,
because that was the name of the file.

17
00:00:50.430 --> 00:00:55.100
Well, the convention is kind of the same,
and note, if you have a file by the name

18
00:00:55.100 --> 00:00:59.540
of index.js inside of a directory,
you can just require that directory and

19
00:00:59.540 --> 00:01:01.670
it will automatically give you
the index.js of that file.

20
00:01:03.860 --> 00:01:07.540
So it's a good practice to have
like index.js be the root or

21
00:01:07.540 --> 00:01:09.360
the entry point to a directory or
to a module.

22
00:01:09.360 --> 00:01:12.780
We won't be doing that,
because it's kind of confusing, so

23
00:01:12.780 --> 00:01:16.140
you'll be seeing something like this
a lot in our code server, server.

24
00:01:16.140 --> 00:01:20.199
So it's like going into the server
folder grabbing server.js,

25
00:01:20.199 --> 00:01:25.658
whereas if we didn't name this server.js,
and it was just called index.js, we could

26
00:01:25.658 --> 00:01:30.706
just say go into the server folder and
it will automatically grab the index.js.

27
00:01:36.267 --> 00:01:39.519
&gt;&gt; Speaker 1: Yeah, so new file,
index.js, yeah, you had a question, Mike?

28
00:01:41.160 --> 00:01:47.349
&gt;&gt; Speaker 3: He's asking if you
use process.cwd to resolve paths?

29
00:01:47.349 --> 00:01:49.640
&gt;&gt; Speaker 1: I wouldn't
use that directly.

30
00:01:49.640 --> 00:01:51.470
I would use a module
that's built in a node,

31
00:01:51.470 --> 00:01:55.310
called path, to do that,
which does a better job of doing that.

32
00:01:55.310 --> 00:02:02.000
So, path, require path, I would use
this module instead of process.CWD.

33
00:02:02.000 --> 00:02:05.045
But if you want to use do manual pros and

34
00:02:05.045 --> 00:02:07.170
use current working directory
yourself you can totally do that.

35
00:02:11.420 --> 00:02:17.160
But also note you have durname too, that's
not the full path though, so I would

36
00:02:17.160 --> 00:02:22.653
just use path, which does a better job
than cwd, but cwd is true, it is valid.

37
00:02:26.110 --> 00:02:28.910
Yeah, so we're requiring our app here,
and we're listening for it,

38
00:02:28.910 --> 00:02:33.500
that's what we're doing in this file,
in sr.js.

39
00:02:33.500 --> 00:02:37.160
So, if you follow this file to server.js,

40
00:02:37.160 --> 00:02:39.300
This is pretty much what
we built yesterday.

41
00:02:39.300 --> 00:02:40.730
Nothing new here.

42
00:02:40.730 --> 00:02:42.920
All I did was just take off the listen and
export the app.

43
00:02:45.450 --> 00:02:51.510
But, what is new is expect.js,
and it's a testing file.

44
00:02:51.510 --> 00:02:56.820
And there's one test in there that is
testing the good request to all the lions.

45
00:02:56.820 --> 00:03:01.892
Your objective is to make the test for
the other four CRUD routes.

46
00:03:01.892 --> 00:03:06.222
So we need a test for DELETE,
we need a test for UPDATE,

47
00:03:06.222 --> 00:03:10.190
we need a test for PUT and
we need a test for GET ONE.

48
00:03:10.190 --> 00:03:14.129
So GET ONE is /lions/id or

49
00:03:14.129 --> 00:03:18.500
/tiger/id So, only make those
CRUD tests for one resource.

50
00:03:18.500 --> 00:03:21.090
So, either do it for lions or either
do it for tigers, don't do it for both.

51
00:03:21.090 --> 00:03:22.140
If you want to do it for both?

52
00:03:22.140 --> 00:03:23.640
Go ahead but
it will literally be the same thing.

53
00:03:23.640 --> 00:03:26.140
You'll just copy it twice
with a different URL.

54
00:03:26.140 --> 00:03:27.570
So it is up to you.

55
00:03:27.570 --> 00:03:28.810
So just do it one time.

56
00:03:28.810 --> 00:03:30.920
I started off with lions so
you could finish off with lions for

57
00:03:30.920 --> 00:03:33.100
the rest of the test if you want to.

58
00:03:33.100 --> 00:03:37.560
So, again, you are going to be making
a test for a DELETE, UPDATE, PUT, and GET,

59
00:03:37.560 --> 00:03:41.380
and if you forget what those things should
be doing if you scroll up to our notes

60
00:03:41.380 --> 00:03:44.620
that we did yesterday,
it tells you right here.

61
00:03:44.620 --> 00:03:47.140
This is what should happen
when we make requests.

62
00:03:47.140 --> 00:03:49.210
So if I wrote the test for this one,

63
00:03:49.210 --> 00:03:54.250
if I do a get to lions it should return
all lions with a 200 with an array.

64
00:03:55.540 --> 00:03:58.420
That's what is says here, so if we're
gonna look at what's happening here.

65
00:03:58.420 --> 00:04:02.690
I get get all lions,
it should return 200 application.json.

66
00:04:02.690 --> 00:04:03.885
That's exactly what it says right here.

67
00:04:03.885 --> 00:04:06.132
Application.json.

68
00:04:06.132 --> 00:04:06.928
200.

69
00:04:06.928 --> 00:04:10.050
And expect resp.body to be an array.

70
00:04:11.690 --> 00:04:14.030
That's exactly what's happening here.

71
00:04:14.030 --> 00:04:16.961
So if you forget what you should be tested
for, just read this .json file, it will

72
00:04:16.961 --> 00:04:22.821
tell you exactly the right test for it
&gt;&gt; Speaker 1: As far as,

73
00:04:22.821 --> 00:04:30.698
so here's a little bit of clear up on
some confusion that might come up.

74
00:04:30.698 --> 00:04:35.210
This .expect here is not
the same as this expect here.

75
00:04:35.210 --> 00:04:37.250
They're the same word but
two different things.

76
00:04:37.250 --> 00:04:41.060
This .expect method, belongs to request,

77
00:04:41.060 --> 00:04:44.900
which is actually super-test, so
super-test is a .expect method, so

78
00:04:44.900 --> 00:04:49.590
we can expect headers and stuff, but
this expect right here is from chai.

79
00:04:49.590 --> 00:04:51.640
You see the difference?

80
00:04:51.640 --> 00:04:54.430
This is a method called expect,
this is a function called expect,

81
00:04:54.430 --> 00:04:55.810
they just happen to have the same name.

82
00:04:55.810 --> 00:05:00.350
If this is confusing,
you can change the name of it,

83
00:05:00.350 --> 00:05:01.700
In fact, I might even just do that.

84
00:05:01.700 --> 00:05:06.603
Just so people
&gt;&gt; Speaker 1: come here.

85
00:05:06.603 --> 00:05:08.770
Actually, I'll just change it down here.

86
00:05:08.770 --> 00:05:09.700
It's too many expects.

87
00:05:10.700 --> 00:05:13.050
&gt;&gt; Speaker 2: Chai is some
kind of parsen utility.

88
00:05:13.050 --> 00:05:14.350
&gt;&gt; Speaker 1: Chai's an assertion library.

89
00:05:15.730 --> 00:05:18.540
I'll show you what it is.

90
00:05:18.540 --> 00:05:19.711
I can show you better than I can tell you.

91
00:05:26.092 --> 00:05:28.977
&gt;&gt; Speaker 1: So, Chai is an assertion
library that is specifically made

92
00:05:28.977 --> 00:05:29.720
for tests.

93
00:05:29.720 --> 00:05:33.540
It gives you this nice syntax
to make assertions about

94
00:05:33.540 --> 00:05:36.780
objects inside of JavaScript and
test them.

95
00:05:36.780 --> 00:05:38.100
It has three different flavors.

96
00:05:38.100 --> 00:05:42.380
So, you can use the assert or you can
use the expect, or you can use should.

97
00:05:42.380 --> 00:05:45.350
They all do the same thing, it's just a
different syntax, which ever one you like.

98
00:05:45.350 --> 00:05:47.080
I like expect, so I use it.

99
00:05:47.080 --> 00:05:48.620
The documentation for it is here.

100
00:05:50.222 --> 00:05:51.380
So, It's kind of like reading English,

101
00:05:51.380 --> 00:05:55.350
like I expect food to deep equal
this object, stuff like that.

102
00:05:55.350 --> 00:05:57.460
You can look that up, it's pretty simple,

103
00:05:57.460 --> 00:06:00.120
that's why I didn't even
bother to mention that.

104
00:06:00.120 --> 00:06:05.470
&gt;&gt; Speaker 2: Mocha has the http stuff And
chai handles the dirty work, so to speak?

105
00:06:05.470 --> 00:06:09.400
&gt;&gt; Speaker 1: Good question, so mocha, so
actually supertest handles the http stuff,

106
00:06:10.720 --> 00:06:14.160
this thing right here called
supertest which is request.

107
00:06:14.160 --> 00:06:17.890
Mocha, is handling the stuff
like describe and it.

108
00:06:17.890 --> 00:06:19.540
Mocha is actually running the test.

109
00:06:21.090 --> 00:06:23.380
Mocha is the thing that's
going to run the test.

110
00:06:23.380 --> 00:06:26.090
Which gives us these global,
that like describe it.

111
00:06:26.090 --> 00:06:28.480
That's where these words come from.

112
00:06:28.480 --> 00:06:32.000
If I were to run this in node, if I were
to run this file in node, it would break.

113
00:06:32.000 --> 00:06:38.470
If I said node, server,
spec, it will break.

114
00:06:38.470 --> 00:06:40.130
It will describe as not defined.

115
00:06:40.130 --> 00:06:44.655
That is not a word in JavaScript, if I
could run this in mocha, it would work.

116
00:06:44.655 --> 00:06:46.750
Because Mocha gives us describe.

117
00:06:46.750 --> 00:06:47.940
It's a global inside of Mocha.

118
00:06:50.680 --> 00:06:55.430
So yeah, Mocha is running the tests,
which gives us describe.

119
00:06:55.430 --> 00:06:57.280
And it gives us the structure.

120
00:06:57.280 --> 00:06:59.340
It's the framework,
it's the testing framework.

121
00:06:59.340 --> 00:07:04.050
Supertest is actually
calling our server and

122
00:07:04.050 --> 00:07:08.360
chi is actually making the assertions,
all right?

123
00:07:08.360 --> 00:07:11.150
So speaking of, in order for
you to actually test this,

124
00:07:11.150 --> 00:07:18.540
everyone needs to MPM install, globally,
-g Mocha if you don't have that already.

125
00:07:18.540 --> 00:07:21.480
So you need to have Mocha globally
installed on your computer.

126
00:07:22.990 --> 00:07:24.630
So make sure you have that.

127
00:07:24.630 --> 00:07:28.510
So again you need to empty and
install -g for global mocha.

128
00:07:29.630 --> 00:07:33.662
Most of you might have to sudo this, so

129
00:07:33.662 --> 00:07:37.320
if you need to sudo, sudo, yeah.

130
00:07:37.320 --> 00:07:37.880
You need mocha.

131
00:07:37.880 --> 00:07:42.850
You had a question Will?

132
00:07:42.850 --> 00:07:43.350
&gt;&gt; Speaker 2: No.

133
00:07:45.350 --> 00:07:48.210
&gt;&gt; Speaker 3: He's asking where in
the testing process do you consider

134
00:07:48.210 --> 00:07:48.870
load testing?

135
00:07:48.870 --> 00:07:51.040
Is that more of an integration type test,
or

136
00:07:51.040 --> 00:07:53.980
would you consider making it
part of your mocha tests?

137
00:07:53.980 --> 00:07:59.410
&gt;&gt; Speaker 1: I mean, I guess you could
write load testing inside of mocha,

138
00:07:59.410 --> 00:08:03.090
but I think there are way better tools
that exist out there, then writing.

139
00:08:03.090 --> 00:08:06.320
I mean Mocha and Jasmine really wasn't
meant to be doing load testing.

140
00:08:06.320 --> 00:08:10.430
Load testing is more of
a architectural level thing.

141
00:08:10.430 --> 00:08:15.310
It's not more of like an internal,
I'm gonna test this server type thing.

142
00:08:15.310 --> 00:08:16.390
It's a little different.

143
00:08:16.390 --> 00:08:19.790
I mean you could do it, there's nothing
stopping you from just like doing a set

144
00:08:19.790 --> 00:08:23.130
interval and just throwing stuff at Mocha
or throwing stuff at your server here.

145
00:08:23.130 --> 00:08:25.260
But there exists better tools for that so

146
00:08:25.260 --> 00:08:27.360
I wouldn't really,
I wouldn't handle that here.

147
00:08:29.720 --> 00:08:31.050
&gt;&gt; Speaker 3: And
then somebody mentioned that,

148
00:08:31.050 --> 00:08:35.620
in the notes, you're using .done and code
samples are using .end as the last line.

149
00:08:35.620 --> 00:08:36.450
Is there a difference?

150
00:08:38.610 --> 00:08:40.060
&gt;&gt; Speaker 1: The notes are using .done.

151
00:08:40.060 --> 00:08:41.820
Hold on, we'll see.

152
00:08:41.820 --> 00:08:45.160
Looks like, I probably got confused
on something .done in the notes.

153
00:08:46.989 --> 00:08:48.680
Yeah .done is wrong don't use .done.

154
00:08:48.680 --> 00:08:49.760
It should be .end.

155
00:08:49.760 --> 00:08:52.160
If you use .done it's gonna break.

156
00:08:52.160 --> 00:08:55.540
I think I just made a mistake and
put .done, because Jasmine and

157
00:08:55.540 --> 00:08:59.680
Mocha has this done callback here that you
have to call an asynchronous test, and

158
00:08:59.680 --> 00:09:00.890
I just mixed the names up.

159
00:09:00.890 --> 00:09:03.269
So yeah,
don't use this I'll update this though.

160
00:09:04.750 --> 00:09:11.360
It's not on here but yeah, in the actual
app it's right, .end is right.

161
00:09:11.360 --> 00:09:14.510
So, speaking of that, because this
test is a asynchronous test we have to

162
00:09:14.510 --> 00:09:18.330
tell Jasmine and Mocha when it's done and
there's a few ways that you can do that.

163
00:09:18.330 --> 00:09:22.840
We can actually return a promise,
which is newer in Jasmine and Mocha,

164
00:09:22.840 --> 00:09:26.010
but we can also just use this
callback function they provide.

165
00:09:26.010 --> 00:09:26.850
I just called it done.

166
00:09:26.850 --> 00:09:30.010
So whenever we're finally done
with the test, just call done.

167
00:09:32.120 --> 00:09:33.890
Now if you don't get rid of this and

168
00:09:33.890 --> 00:09:37.080
you try to run the test,
I'll show you what happens.

169
00:09:37.080 --> 00:09:37.900
I'll just do it right now.

170
00:09:37.900 --> 00:09:45.130
So if I said mocha server It just

171
00:09:45.130 --> 00:09:50.610
said timeout,
it has a timeout default of two seconds.

172
00:09:50.610 --> 00:09:52.930
After two seconds,
it says nothing happened I quit.

173
00:09:52.930 --> 00:09:57.380
That's because I never called it done,
but if I call done,

174
00:09:57.380 --> 00:09:59.967
then it's like yeah, passed.

175
00:09:59.967 --> 00:10:04.489
You're test passed, you're good,
so make sure you call done and

176
00:10:04.489 --> 00:10:06.774
those asynchronous call backs.

177
00:10:06.774 --> 00:10:08.090
Any questions for this stuff?

178
00:10:08.090 --> 00:10:12.890
So, you have mocha to run the test,
I think the notes are in there it

179
00:10:12.890 --> 00:10:17.180
tells you type mocha server, server specs,
but again that's the command.

180
00:10:18.200 --> 00:10:20.750
You run it, that one test that
I wrote should be passing for

181
00:10:20.750 --> 00:10:23.510
you and then you should be
writing four other tests.

182
00:10:23.510 --> 00:10:25.031
For the other colour routes.

183
00:10:25.031 --> 00:10:27.790
So, that means we need to write a test and
we hit the URL, and

184
00:10:27.790 --> 00:10:32.690
it should delete something, which will
also write one that will update something.

185
00:10:35.530 --> 00:10:36.110
Why did I put?

186
00:10:36.110 --> 00:10:38.990
I meant post, not put an update.

187
00:10:41.810 --> 00:10:45.620
So create something and
also get one, so if you're thinking,

188
00:10:45.620 --> 00:10:47.650
like wait, how do I delete
something if it's not there?

189
00:10:48.710 --> 00:10:52.260
That means that probably before you delete
it, you need to create something first.

190
00:10:52.260 --> 00:10:53.940
Same thing with the update.

191
00:10:55.070 --> 00:10:58.942
So before you update it or put it,
you need to create something too.

192
00:11:02.242 --> 00:11:03.710
&gt;&gt; Speaker 1: So this is a little tricky.

193
00:11:03.710 --> 00:11:06.770
There's a couple ways you can do it,
but I'm curious to see how you do it.

194
00:11:06.770 --> 00:11:09.750
But yeah You can't delete
anything if nothing's there and

195
00:11:09.750 --> 00:11:11.620
you can't update something
if nothing's there.

196
00:11:11.620 --> 00:11:14.240
And you also need the reference
to the ID to delete something.

197
00:11:15.310 --> 00:11:18.645
So, if it is there you need to get the ID
of it to pass it on the URL, right?

198
00:11:18.645 --> 00:11:22.520
Because that's how our API looks
like if we go to our API on,

199
00:11:22.520 --> 00:11:27.490
let's just look at delete,
delete is expecting an ID here.

200
00:11:27.490 --> 00:11:30.860
So as put, it's expecting an ID here.

201
00:11:30.860 --> 00:11:33.060
So not only do they need to exist you
need the ID to reference them too.

202
00:11:33.060 --> 00:11:37.420
So, like I said there's a couple of ways
you can do that, there's some hacky ways,

203
00:11:37.420 --> 00:11:39.370
there's some right ways, but

204
00:11:39.370 --> 00:11:43.990
just know that you can always do more
than one request inside of and it box.

205
00:11:43.990 --> 00:11:44.490
Remember that.

