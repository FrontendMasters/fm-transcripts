WEBVTT

1
00:00:00.000 --> 00:00:03.796
[MUSIC]

2
00:00:03.796 --> 00:00:08.581
&gt;&gt; Speaker 1: So I am aware that there
going to be tons of differences of how

3
00:00:08.581 --> 00:00:10.125
people test this.

4
00:00:10.125 --> 00:00:10.966
This is great.

5
00:00:10.966 --> 00:00:13.025
Thereâ€™s so many way you can do it.

6
00:00:13.025 --> 00:00:15.302
Some people started using before,

7
00:00:15.302 --> 00:00:20.720
before each and maybe even after each and
some people use promises.

8
00:00:20.720 --> 00:00:23.529
Some people made multiple
requests inside of one id block,

9
00:00:23.529 --> 00:00:26.066
some people did method describes or
many describes.

10
00:00:26.066 --> 00:00:28.100
So there's so many ways you can do this.

11
00:00:28.100 --> 00:00:32.050
There's not one right way
to write these tests.

12
00:00:32.050 --> 00:00:37.274
So I'm going to show you the solution
I have which probably is not

13
00:00:37.274 --> 00:00:42.616
one of the best ways but
let me start this or commit this actually.

14
00:00:48.366 --> 00:00:49.946
&gt;&gt; Speaker 1: All right,
so, let's see, checkout.

15
00:00:49.946 --> 00:00:55.986
Step-5-fix.

16
00:00:55.986 --> 00:01:00.892
So the way I wrote it was,
I just did nested requests for

17
00:01:00.892 --> 00:01:05.680
things that need a resource
to be there already.

18
00:01:05.680 --> 00:01:08.640
So as far as creating a line,
the way I created a line is,

19
00:01:08.640 --> 00:01:14.350
well this one was pretty
easy to just create a line.

20
00:01:14.350 --> 00:01:16.648
So you make a post request,
if you didn't find out,

21
00:01:16.648 --> 00:01:18.176
you have to use the .send method.

22
00:01:18.176 --> 00:01:20.656
You can send json to the request.

23
00:01:20.656 --> 00:01:23.776
I'm just putting in a line here.

24
00:01:23.776 --> 00:01:26.056
Mufasa, evil lions.

25
00:01:26.056 --> 00:01:30.778
And then application json expected 201.

26
00:01:30.778 --> 00:01:35.538
If you put 201, or if you put 200 and
you got back a 201 and still passed,

27
00:01:35.538 --> 00:01:39.056
that's fine because they're
both passing status codes.

28
00:01:39.056 --> 00:01:41.245
If you did something like 400 or
something,

29
00:01:41.245 --> 00:01:42.896
you're not supposed to change it.

30
00:01:42.896 --> 00:01:46.376
And then inside of here I'm
just doing a basic type test.

31
00:01:46.376 --> 00:01:47.396
So expect this to be an object.

32
00:01:47.396 --> 00:01:49.516
So really again, silly test.

33
00:01:49.516 --> 00:01:52.635
You could probably write better
tests than this and you should, but

34
00:01:52.635 --> 00:01:55.326
again this is just an example
of how you would write tests.

35
00:01:55.326 --> 00:02:00.621
So for instance, you would write

36
00:02:00.621 --> 00:02:05.537
tests to see like, expect, or

37
00:02:05.537 --> 00:02:11.222
first I'll say var lion or Mufasa.

38
00:02:11.222 --> 00:02:13.242
Is that how you spell his name, Mufasa?

39
00:02:13.242 --> 00:02:15.842
Whatever, I don't think anybody
knows how to spell his name.

40
00:02:18.422 --> 00:02:26.644
&gt;&gt; Speaker 1: And then you just say
&gt;&gt; Speaker 1: Mufasa.name to be,

41
00:02:26.644 --> 00:02:33.056
so these are better tests right.

42
00:02:33.056 --> 00:02:40.138
You actually like make sure that
this stuff is the way it should be,

43
00:02:40.138 --> 00:02:44.311
or you can just do like equality check so

44
00:02:44.311 --> 00:02:51.905
you can say expect Mufasa to be like,
make this object somewhere else.

45
00:02:51.905 --> 00:02:59.226
Bar line equals stat.

46
00:02:59.226 --> 00:03:03.509
Then come down here and
say send the lion, and

47
00:03:03.509 --> 00:03:08.706
then expect Mufasa to equal,
this is deep equal lion.

48
00:03:08.706 --> 00:03:15.418
So then we check and
see if the objects are the same, right.

49
00:03:19.374 --> 00:03:24.466
&gt;&gt; Speaker 1: if you use eql,
that won't work cuz it'll

50
00:03:24.466 --> 00:03:30.556
literally do object equals
object which is false.

51
00:03:30.556 --> 00:03:32.456
They're two different objects.

52
00:03:32.456 --> 00:03:34.236
They're both objects, but they're two
different objects so that would work.

53
00:03:34.236 --> 00:03:39.258
Where as eql would do
a equals which means like

54
00:03:39.258 --> 00:03:45.856
just check to see if they all have
the same properties and same values.

55
00:03:45.856 --> 00:03:49.343
So you would run that.

56
00:03:49.343 --> 00:03:52.071
You can just run epm test to run test.

57
00:03:52.071 --> 00:03:54.997
I guess I didn't update
[INAUDIBLE] this one.

58
00:03:54.997 --> 00:03:56.117
[INAUDIBLE] let me see.

59
00:03:56.117 --> 00:04:03.096
Yeah, so thepackage.json if you just,
the test script you can say,

60
00:04:03.096 --> 00:04:07.238
what you would normally put which would be

61
00:04:07.238 --> 00:04:12.539
mochaserverspec.js and
run that [INAUDIBLE] test.

62
00:04:12.539 --> 00:04:13.488
It looks, like the ID is wrong.

63
00:04:13.488 --> 00:04:17.649
Yeah, the ID is wrong because it gets
changed to a number on the server.

64
00:04:17.649 --> 00:04:19.169
So, I guess that really wouldn't work?

65
00:04:25.749 --> 00:04:28.749
&gt;&gt; Speaker 1: So, I'm just gonna
get rid of that one for now.

66
00:04:28.749 --> 00:04:31.969
And then as far as deleting a line.

67
00:04:37.106 --> 00:04:38.986
&gt;&gt; Speaker 1: We need a lion
there in the first place.

68
00:04:38.986 --> 00:04:41.806
So I guess technically we do have one,
because we just posted to the server.

69
00:04:41.806 --> 00:04:45.146
That's great, but
I don't have this lion's ID.

70
00:04:45.146 --> 00:04:49.680
I didn't save it because first of
all it's in this it block up here so

71
00:04:49.680 --> 00:04:51.570
I don't have Mufasa.id.

72
00:04:51.570 --> 00:04:53.810
I need that ID to send a request although,

73
00:04:53.810 --> 00:04:56.140
we can probably assume it's just
one because of the first one.

74
00:04:56.140 --> 00:05:00.405
So, we can just put one there,
which is okay but,

75
00:05:00.405 --> 00:05:02.230
it would be better if we had the ID.

76
00:05:02.230 --> 00:05:05.007
So, what I did first
was I made a new lion.

77
00:05:05.007 --> 00:05:07.826
I'm like, all right, so
I sent the lion there.

78
00:05:07.826 --> 00:05:09.340
And on that response,

79
00:05:09.340 --> 00:05:14.056
grab the lion then do another request
that deletes what that lions ID.

80
00:05:14.056 --> 00:05:19.001
And I'm just going to expect
the rest of that body to

81
00:05:19.001 --> 00:05:21.876
d equals the lion that I sent.

82
00:05:27.256 --> 00:05:32.216
&gt;&gt; Speaker 1: Which would
probably fail too because the ID.

83
00:05:32.216 --> 00:05:35.536
It passed.

84
00:05:35.536 --> 00:05:36.156
Everybody see me there?

85
00:05:36.156 --> 00:05:42.157
I just made a request, I created one
first, I got the id of it, and I sent it.

86
00:05:42.157 --> 00:05:45.416
The other way you could do it
is you could do it before.

87
00:05:45.416 --> 00:05:50.593
So like in mocha and jasmine, inside
of a describe you can use before and

88
00:05:50.593 --> 00:05:53.182
before each and the way this works is

89
00:05:53.182 --> 00:05:58.016
it's a callback function that will
run either before all the its,

90
00:05:58.016 --> 00:06:02.870
or before each it depending if
you use before or before each.

91
00:06:02.870 --> 00:06:10.300
So I could say before each it just
go ahead and make a new line right.

92
00:06:10.300 --> 00:06:13.102
So I could just make a new line here but
then I have to play with the closers

93
00:06:13.102 --> 00:06:15.606
a little bit, because I need to
be able to reference that lion.

94
00:06:15.606 --> 00:06:21.996
So I need to say, created lion and then
down here I have to update it every time.

95
00:06:21.996 --> 00:06:27.121
I don't like messing
around with closers so

96
00:06:27.121 --> 00:06:30.036
I decided not to do that.

97
00:06:30.036 --> 00:06:31.836
Any questions so far?

98
00:06:31.836 --> 00:06:32.636
&gt;&gt; Speaker 2: A couple came up here.

99
00:06:32.636 --> 00:06:36.336
How would you do some
negative integration testing?

100
00:06:36.336 --> 00:06:38.716
Negative integration testing.

101
00:06:38.716 --> 00:06:40.957
I'm not sure exactly what that is.

102
00:06:40.957 --> 00:06:44.076
That's the first time I've ever
heard negative integrating testing.

103
00:06:44.076 --> 00:06:47.816
&gt;&gt; Speaker 1: I'll see if
they're a couple of seconds.

104
00:06:47.816 --> 00:06:48.817
&gt;&gt; Speaker 2: All right.

105
00:06:48.817 --> 00:06:49.415
&gt;&gt; Speaker 1: I'll see if he adds to that.

106
00:06:49.415 --> 00:06:51.156
&gt;&gt; Speaker 2: Okay.

107
00:06:51.156 --> 00:06:53.575
Any other questions?

108
00:06:53.575 --> 00:06:57.342
&gt;&gt; Speaker 1: I guess for
like fail request failing.

109
00:06:57.342 --> 00:06:58.816
&gt;&gt; Speaker 2: If request failing?

110
00:06:58.816 --> 00:07:03.636
&gt;&gt; Speaker 1: Or
name no longer equals after update.

111
00:07:03.636 --> 00:07:08.115
So, Iâ€™m still not quite sure, but
I'm guessing what he's saying if for

112
00:07:08.115 --> 00:07:12.234
instance you were testing to see if
this user had access to this url,

113
00:07:12.234 --> 00:07:16.784
you expect it to come back as a 401,
or something like that, then yeah,

114
00:07:16.784 --> 00:07:19.996
you would just type in
the appropriate status code.

115
00:07:19.996 --> 00:07:23.020
And then you would just do some assertions
on the response that your server

116
00:07:23.020 --> 00:07:23.520
sent back.

117
00:07:23.520 --> 00:07:27.234
So if you were trying to access this
resource and you expected to get a 401,

118
00:07:27.234 --> 00:07:31.086
and you expected to get this certain
error message back, it's the same thing.

119
00:07:31.086 --> 00:07:32.226
I mean, it's no different.

120
00:07:32.226 --> 00:07:33.046
It's the exact same thing.

121
00:07:33.046 --> 00:07:36.881
You just have to make sure you expect
the assertions that your server is

122
00:07:36.881 --> 00:07:37.726
sending back.

123
00:07:37.726 --> 00:07:38.346
It's no different.

124
00:07:41.786 --> 00:07:43.906
&gt;&gt; Speaker 1: Any other questions?

125
00:07:43.906 --> 00:07:44.666
&gt;&gt; Speaker 2: I'm caught up here.

126
00:07:44.666 --> 00:07:45.247
&gt;&gt; Speaker 1: Okay.

127
00:07:50.386 --> 00:07:54.066
&gt;&gt; Speaker 1: That was delete.

128
00:07:54.066 --> 00:07:55.942
The update is pretty much the same thing.

129
00:07:55.942 --> 00:07:59.542
You need to create a line,
grab the ID, and

130
00:07:59.542 --> 00:08:04.342
then you also need to send
an object to update something.

131
00:08:04.342 --> 00:08:08.142
So I sent an object,
just updating the new name.

132
00:08:08.142 --> 00:08:13.110
And now we just wanna make sure
that the new name got updated when

133
00:08:13.110 --> 00:08:15.660
it came back which it did rIght?

134
00:08:15.660 --> 00:08:18.242
So created a line with
the name called test lion and

135
00:08:18.242 --> 00:08:20.948
then when that came back I
grabbed that lion's ID and

136
00:08:20.948 --> 00:08:24.476
then I wanted to update it with
a new name, that's called new name.

137
00:08:24.476 --> 00:08:28.466
And then when that comes back I'm
gonna inspect to see that it equals

138
00:08:28.466 --> 00:08:29.306
the new name.

139
00:08:40.966 --> 00:08:41.806
&gt;&gt; Speaker 1: All right.

140
00:08:41.806 --> 00:08:42.666
Any questions on that?

141
00:08:45.706 --> 00:08:47.882
&gt;&gt; Speaker 2: What about
testing preconditions,

142
00:08:47.882 --> 00:08:51.046
like checking that the lion
exists before deletion?

143
00:08:51.046 --> 00:08:55.346
&gt;&gt; Speaker 1: Checking the lion
exists before deletion.

144
00:08:55.346 --> 00:08:56.546
So let me walk through that.

145
00:08:56.546 --> 00:08:57.586
So let's go back to deletion.

146
00:08:57.586 --> 00:08:59.586
So here we deleted it.

147
00:08:59.586 --> 00:09:01.546
We want to see if the lion
exists before delete.

148
00:09:01.546 --> 00:09:06.686
Well, so we posted the server and
we created a lion.

149
00:09:06.686 --> 00:09:09.486
We have the lion, and then we deleted it.

150
00:09:09.486 --> 00:09:13.606
So, I mean,
you mean testing this lion right here?

151
00:09:13.606 --> 00:09:15.206
I think that's what he's talking about.

152
00:09:15.206 --> 00:09:18.819
I mean, yeah, you could test this line,
but this test is not for creation,

153
00:09:18.819 --> 00:09:20.126
this test is for deletion.

154
00:09:20.126 --> 00:09:24.066
Thatâ€™s why I didn't make
the assertions here.

155
00:09:24.066 --> 00:09:25.626
I think that's what
the person's talking about.

156
00:09:25.626 --> 00:09:26.346
I'm not sure.

157
00:09:29.385 --> 00:09:31.705
&gt;&gt; Speaker 1: But we're just testing
whatever the server response is.

158
00:09:31.705 --> 00:09:34.716
If you want to be able to test more
things, then as far as integration tests

159
00:09:34.716 --> 00:09:37.839
go, you're only gonna be able to test
whatever the server responds to you.

160
00:09:37.839 --> 00:09:41.224
If you want more fine-grained control
of what's actually happening,

161
00:09:41.224 --> 00:09:42.839
then you have to write unit tests.

162
00:09:50.199 --> 00:09:51.499
&gt;&gt; Speaker 1: In the update
task [INAUDIBLE].

163
00:10:00.686 --> 00:10:05.708
&gt;&gt; Speaker 1: Now I made a put, so in the
update, I made a host to create the lion

164
00:10:05.708 --> 00:10:10.646
and then down below here I made
a put request to update the lion.

165
00:10:16.886 --> 00:10:20.043
&gt;&gt; Speaker 2: There's a question
[INAUDIBLE], can they have,

166
00:10:20.043 --> 00:10:23.286
can you have a function
that runs before any test?

167
00:10:23.286 --> 00:10:27.146
&gt;&gt; Speaker 1: Yeah, you can have, so
all you have to do is go to the top.

168
00:10:27.146 --> 00:10:29.647
Describe in your test and
put it beforeEach.

169
00:10:29.647 --> 00:10:32.186
So I put beforeEach here.

170
00:10:32.186 --> 00:10:34.565
This will run before every single it.

171
00:10:34.565 --> 00:10:38.963
All right so
if I say console.log right here,

172
00:10:41.026 --> 00:10:42.106
&gt;&gt; Speaker 1: Then I go run my test.

173
00:10:42.106 --> 00:10:44.226
That should run before every single it.

174
00:10:44.226 --> 00:10:47.705
Yup, hey hey hey hey.

175
00:10:47.705 --> 00:10:51.006
So let's go to your top scope and
do it before each.

176
00:11:00.986 --> 00:11:01.944
&gt;&gt; Speaker 1: Cool.

177
00:11:01.944 --> 00:11:03.546
It looks like I forgot one.

178
00:11:03.546 --> 00:11:05.526
I get 1, right?

179
00:11:05.526 --> 00:11:11.031
Should be a test for

180
00:11:11.031 --> 00:11:13.786
a get 1.

181
00:11:13.786 --> 00:11:15.546
Yeah, but that was pretty remedial.

182
00:11:15.546 --> 00:11:21.306
I could write it, but I'm not gonna write
it unless people want to see me write it.

183
00:11:21.306 --> 00:11:23.666
It's just going to be
the same thing as get all.

184
00:11:23.666 --> 00:11:26.626
It's gonna be like create one and
then get one.

185
00:11:26.626 --> 00:11:29.110
I can do it, but
I think you guys get the point.

