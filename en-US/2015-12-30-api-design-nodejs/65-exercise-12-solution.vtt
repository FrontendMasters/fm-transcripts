WEBVTT

1
00:00:00.000 --> 00:00:03.564
[MUSIC]

2
00:00:03.564 --> 00:00:07.414
&gt;&gt; Speaker 1: Why do we have both
an index.js file in the root directory as

3
00:00:07.414 --> 00:00:10.730
well as a server.js file
in the server directory?

4
00:00:12.710 --> 00:00:16.512
They both seem to be doing the same thing.
&gt;&gt; Scott Moss: Are they?

5
00:00:16.512 --> 00:00:17.510
Let's take a look.

6
00:00:17.510 --> 00:00:21.260
So, index.js is the entry
point to our server.

7
00:00:21.260 --> 00:00:22.450
What is it doing?

8
00:00:22.450 --> 00:00:25.320
It's, first thing it's doing
it's booting up the config

9
00:00:25.320 --> 00:00:28.042
which I think is very important,
get that thing ready.

10
00:00:28.042 --> 00:00:30.790
The second thing it's requiring our app,

11
00:00:30.790 --> 00:00:34.950
our server application and
then it's listening on the ports.

12
00:00:34.950 --> 00:00:37.171
So this is actually starting our server.

13
00:00:37.171 --> 00:00:42.065
If we go look in server&gt;server.
&gt;&gt; Scott Moss: I don't

14
00:00:42.065 --> 00:00:43.886
see an app dot listed in here.

15
00:00:43.886 --> 00:00:49.533
So if they're the same thing,
if I come in here and

16
00:00:49.533 --> 00:00:56.980
I say node server/server.
&gt;&gt; Scott Moss: I

17
00:00:56.980 --> 00:00:59.527
get the database seeded, that's great.

18
00:00:59.527 --> 00:01:04.175
But the server didn't start up, and
that's because it's in index.js.

19
00:01:04.175 --> 00:01:07.277
And the reason we did that is because if
you go back to when we were talking about

20
00:01:07.277 --> 00:01:09.990
testing yesterday,
I needed to export the app for testing.

21
00:01:09.990 --> 00:01:13.750
And that's why I have this comment
down here, export the app for testing.

22
00:01:13.750 --> 00:01:16.737
So because I had to export the app for
testing,

23
00:01:16.737 --> 00:01:21.189
that means I need to create another
file in order to start the server.

24
00:01:21.189 --> 00:01:24.129
I could also just start the server in
this file and still export the app,

25
00:01:24.129 --> 00:01:25.997
there's nothing to stop
me from doing that.

26
00:01:25.997 --> 00:01:27.990
But I want my test to be
in control on whether or

27
00:01:27.990 --> 00:01:29.623
not I want to start the server or not.

28
00:01:29.623 --> 00:01:34.087
So it's just a way of having more control
on what is turning the server on or

29
00:01:34.087 --> 00:01:36.629
off.
&gt;&gt; Scott Moss: And also,

30
00:01:36.629 --> 00:01:40.421
server.js is connecting to the database,
it's seeding the database,

31
00:01:40.421 --> 00:01:44.168
it's setting up all the middleware,
it's setting up error handling.

32
00:01:44.168 --> 00:01:47.117
Whereas, index.js is just starting
the server, that's all it is.

33
00:01:47.117 --> 00:01:50.740
This is like, just gonna start the server,
just gonna load up the config.

34
00:01:50.740 --> 00:01:51.260
That's all I'm doing.

35
00:01:51.260 --> 00:01:52.960
So it's a little different.

36
00:01:54.740 --> 00:01:55.340
But good question.

37
00:01:57.340 --> 00:01:57.968
Keep them coming.

38
00:01:57.968 --> 00:02:02.649
All right.
&gt;&gt; Scott Moss: Any questions before I get

39
00:02:02.649 --> 00:02:03.668
started on this stuff?

40
00:02:03.668 --> 00:02:06.209
Everybody just wanted to see it or

41
00:02:06.209 --> 00:02:10.035
you probably all ready looked for
it, all right?

42
00:02:10.035 --> 00:02:16.139
So now let me check out to the fix.
&gt;&gt; Scott Moss: What is all this?

43
00:02:24.529 --> 00:02:27.070
&gt;&gt; Scott Moss: Whatever, I'll push it

44
00:02:27.070 --> 00:02:34.432
out.
&gt;&gt; Scott Moss: I'm

45
00:02:34.432 --> 00:02:36.350
gonna push this stuff up right quick,
okay?

46
00:02:38.300 --> 00:02:40.409
So now if you check out
to the fixed branch, but

47
00:02:40.409 --> 00:02:41.940
you might have already be there.

48
00:02:41.940 --> 00:02:49.290
git step-12-fix, okay.

49
00:02:49.290 --> 00:02:51.140
So, how does this look like?

50
00:02:51.140 --> 00:02:52.940
Well, let's just start at the beginning.

51
00:02:52.940 --> 00:02:54.019
The category routes.

52
00:02:55.430 --> 00:02:56.970
So my approach was this.

53
00:02:56.970 --> 00:03:00.160
I just wanted to show you a simple way.

54
00:03:00.160 --> 00:03:02.690
I wanted us to understand
exactly how the middleware work.

55
00:03:02.690 --> 00:03:04.890
This is probably not the way I
would do it in my application, but

56
00:03:04.890 --> 00:03:07.510
this way demonstrates
how middleware works.

57
00:03:09.030 --> 00:03:11.920
So the way I did it was
I just made an array and

58
00:03:11.920 --> 00:03:15.140
I placed in the middleware that I
want to run next to each other.

59
00:03:15.140 --> 00:03:19.507
And that's pas,t I'll just place that
array on any route that I wanna use

60
00:03:19.507 --> 00:03:20.080
that on.

61
00:03:21.170 --> 00:03:23.889
So the one that we definitely need for
sure is the decodeToken,

62
00:03:23.889 --> 00:03:27.179
that's doing the verification.e
The other one auth.getFreshUser is not

63
00:03:27.179 --> 00:03:32.157
necessary.
&gt;&gt; Scott Moss: But it's great because

64
00:03:32.157 --> 00:03:36.348
this guarantees us that on any, this,
what this means is that like, first,

65
00:03:36.348 --> 00:03:40.160
cuz we do auth.decodeToken,
that means we're looking for a token.

66
00:03:40.160 --> 00:03:44.430
And because that means, if this passes,
that means there was a user.

67
00:03:44.430 --> 00:03:46.920
So what I'm saying is, if there was
a user, let's just go ahead and

68
00:03:46.920 --> 00:03:48.340
get the full user while we're here anyway.

69
00:03:50.110 --> 00:03:53.060
So that means on any request or
any controller route,

70
00:03:53.060 --> 00:03:54.600
we have access to req.user.

71
00:03:54.600 --> 00:03:56.040
That is not the same as the params.

72
00:03:56.040 --> 00:04:01.370
The params slash id will look at the id
and give you the resource with that id.

73
00:04:01.370 --> 00:04:04.070
But that resource is not always the user,
like for instance, in this case.

74
00:04:04.070 --> 00:04:06.360
This param 'id',
this isn't gonna give you the user,

75
00:04:06.360 --> 00:04:08.780
this is gonna give you
the controller with that id.

76
00:04:08.780 --> 00:04:09.880
This will give you the user.

77
00:04:09.880 --> 00:04:17.560
So now we'll have req.controller, I mean,
I'm sorry, req.category and req.user.

78
00:04:17.560 --> 00:04:18.800
We'll have both of those.

79
00:04:18.800 --> 00:04:19.630
So that's why we did that.

80
00:04:19.630 --> 00:04:20.770
Is it necessary?

81
00:04:20.770 --> 00:04:24.346
Only if the controller method is
relying on it, is it necessary.

82
00:04:24.346 --> 00:04:27.020
In our example, I don't think any of our
controller methods were relying on it.

83
00:04:27.020 --> 00:04:28.610
Maybe one or two, we'll see in a minute.

84
00:04:29.680 --> 00:04:33.580
So it's not necessary, I just think if
it was like, it may be nice to have.

85
00:04:33.580 --> 00:04:36.248
But if it's an expensive database
query to go fetch the user,

86
00:04:36.248 --> 00:04:38.368
probably don't wanna do it,
or maybe cache it.

87
00:04:38.368 --> 00:04:41.306
I'm not sure, but it's nice to have it.

88
00:04:41.306 --> 00:04:44.714
So, as far as locking down our routes,
categories,

89
00:04:44.714 --> 00:04:48.710
only authenticated folks should
be able to make categories.

90
00:04:48.710 --> 00:04:51.731
So, I'll put it there.

91
00:04:51.731 --> 00:04:55.259
Only authenticated people should
be able to update a category, so

92
00:04:55.259 --> 00:04:56.459
I'll place it there.

93
00:04:56.459 --> 00:04:59.660
And only authenticated people should
be able to delete a category.

94
00:04:59.660 --> 00:05:03.220
Everybody else should be able to get
one category or get all categories.

95
00:05:04.240 --> 00:05:05.070
If you can imagine,

96
00:05:05.070 --> 00:05:08.860
in a WordPress blog it lists all
the categories on the right, or whatever.

97
00:05:08.860 --> 00:05:11.425
You get to click on them and they'll show
you all the blog posts that relate to that

98
00:05:11.425 --> 00:05:19.530
category, something like that.
&gt;&gt; Scott Moss: Any questions on category?

99
00:05:19.530 --> 00:05:24.273
Anybody disagree with the route
that I chose to lock down, or

100
00:05:24.273 --> 00:05:29.497
have any opinions on other routes?
&gt;&gt; Scott Moss: Maybe

101
00:05:29.497 --> 00:05:30.360
you locked down everything.

102
00:05:32.870 --> 00:05:36.132
Okay.

103
00:05:36.132 --> 00:05:42.036
Now, if we go into the post routes,
this one's pretty much the same thing.

104
00:05:42.036 --> 00:05:45.959
Again, I have this array and I'm locking
down the same routes on the create a post,

105
00:05:45.959 --> 00:05:47.585
on update a post and delete a post,

106
00:05:47.585 --> 00:05:54.992
you should be authenticated.
&gt;&gt; Scott Moss: What

107
00:05:54.992 --> 00:05:59.837
happens if I have a post
&gt;&gt; Scott Moss: That

108
00:05:59.837 --> 00:06:04.193
has an author on it or a user,
and then I delete the user?

109
00:06:04.193 --> 00:06:06.002
Does the reference to that id and

110
00:06:06.002 --> 00:06:10.639
the post stay there?
&gt;&gt; Scott Moss: Think

111
00:06:10.639 --> 00:06:15.567
about that.
&gt;&gt; Scott Moss: Do I

112
00:06:15.567 --> 00:06:20.590
now have to go find the author,
the post with that id and get rid of it?

113
00:06:22.330 --> 00:06:26.931
Or will Mongo just handle that for me?
&gt;&gt; Scott Moss: Is it

114
00:06:26.931 --> 00:06:30.251
atomic?
&gt;&gt; Scott Moss: That's a good

115
00:06:30.251 --> 00:06:34.717
question?
&gt;&gt; Scott Moss: The reason I was asking

116
00:06:34.717 --> 00:06:37.845
is cuz I ran into that the other day, and
I wanted to know if anybody else knew on

117
00:06:37.845 --> 00:06:38.997
the top of their head.
&gt;&gt; Speaker 3: Well,

118
00:06:38.997 --> 00:06:40.256
Mongo doesn't deal with the req cuz they

119
00:06:40.256 --> 00:06:41.325
don't involve relationships?

120
00:06:41.325 --> 00:06:43.050
&gt;&gt; [INAUDIBLE]
&gt;&gt; Scott Moss: Yeah,

121
00:06:43.050 --> 00:06:44.770
Mongo definitely doesn't care.

122
00:06:44.770 --> 00:06:49.500
What Mongo's doing
&gt;&gt; Scott Moss: Yeah, they do it.

123
00:06:50.870 --> 00:06:54.315
Thank you for givng me that reference.
&gt;&gt; Speaker 3: What did they replace it

124
00:06:54.315 --> 00:06:56.770
with, null?
&gt;&gt; Scott Moss: I don't know.

125
00:06:56.770 --> 00:06:58.740
It's just not there any more.

126
00:06:58.740 --> 00:07:00.150
I could be wrong, try and prove me wrong.

127
00:07:00.150 --> 00:07:03.985
I haven't used the Mongoose since version
3 something and now they're almost on 5,

128
00:07:03.985 --> 00:07:05.320
so maybe they changed it.

129
00:07:05.320 --> 00:07:12.276
But it definitely was the case.
&gt;&gt; Scott Moss: So,

130
00:07:12.276 --> 00:07:15.100
user routes,
this is the only one that's different.

131
00:07:15.100 --> 00:07:18.920
So, first I added the router
that we're talking about for me.

132
00:07:21.010 --> 00:07:26.220
So, if I want to get me, let me verify
you first and then I wanna getFreshUser.

133
00:07:26.220 --> 00:07:28.250
So this is where you getFreshUser
actually does come in handy.

134
00:07:29.480 --> 00:07:32.967
Because by the time I get to
controller.me, I can just return req.user.

135
00:07:32.967 --> 00:07:35.849
I can say rest.json, req.user, done.

136
00:07:35.849 --> 00:07:38.210
All right,
if anything else in that controller,

137
00:07:38.210 --> 00:07:41.148
because getfreshUser already got there,
that thing for me.

138
00:07:41.148 --> 00:07:42.150
So we can go look at that.

139
00:07:42.150 --> 00:07:46.010
If you go look at the controller.me.

140
00:07:46.010 --> 00:07:47.255
That's literally all it's doing,

141
00:07:47.255 --> 00:07:52.268
is sending that back.
&gt;&gt; Speaker 3: Do

142
00:07:52.268 --> 00:07:53.930
you need the toJSON?
&gt;&gt; Scott Moss: We'll talk about

143
00:07:53.930 --> 00:07:54.780
the toJson in a minute.

144
00:07:54.780 --> 00:07:55.860
I'm glad you asked.
I was just like,

145
00:07:55.860 --> 00:07:57.830
is anybody gonna ask me about that?

146
00:07:57.830 --> 00:08:03.169
Yes, we'll talk about that in a second.
&gt;&gt; Scott Moss: So

147
00:08:03.169 --> 00:08:07.394
the routes that I chose to log down
here besides the me was only the put and

148
00:08:07.394 --> 00:08:12.890
delete, so you should be authenticated if
you want update a user or delete a user.

149
00:08:12.890 --> 00:08:17.172
But if you want to get one user,
I'll let anybody do it with id.

150
00:08:17.172 --> 00:08:19.818
If you want to create a user?

151
00:08:19.818 --> 00:08:22.770
Yeah, I have to let anybody
do that cuz that's sign up.

152
00:08:22.770 --> 00:08:25.980
So if I require you to be authenticated
to sign up then you would never be

153
00:08:25.980 --> 00:08:27.480
able to sign up.

154
00:08:27.480 --> 00:08:29.360
So don't want to put that there.

155
00:08:29.360 --> 00:08:31.620
And then get all users.

156
00:08:31.620 --> 00:08:35.760
Yes, I'll allow anybody to get all users
for the sake of a blog of being able to

157
00:08:35.760 --> 00:08:38.835
look at all the authors and
seeing what they wrote about.

158
00:08:42.301 --> 00:08:45.196
&gt;&gt; Scott Moss: Any questions there?

159
00:08:45.196 --> 00:08:53.199
No, so back to the toJSON thing,
&gt;&gt; Scott Moss: Where is it at?

160
00:08:53.199 --> 00:08:57.071
Right, so I made a new method on
the user schema, it's called toJSON.

161
00:08:57.071 --> 00:09:01.722
And all it does is, it uses the toObject
method that you can call on a document

162
00:09:01.722 --> 00:09:04.370
that's built in a Mongoose.

163
00:09:04.370 --> 00:09:08.680
So that's gonna convert it from a document
which looks like a JavaScript object.

164
00:09:08.680 --> 00:09:10.590
I was saying this before,

165
00:09:10.590 --> 00:09:14.100
when you retrieve something from
the database using user.find and

166
00:09:14.100 --> 00:09:18.660
all those things that come back,
they look like regular JavaScript objects.

167
00:09:18.660 --> 00:09:19.218
But they're really not.

168
00:09:19.218 --> 00:09:23.310
They are actually documents that have
all these atomic operations on them like

169
00:09:23.310 --> 00:09:24.928
.save, and .move, right?

170
00:09:24.928 --> 00:09:28.006
That's not a regular JavaScript object,
so if you call a toObject on it,

171
00:09:28.006 --> 00:09:29.570
it's just like okay, cool.

172
00:09:29.570 --> 00:09:32.206
I'll remove all those atomic
operations and literally just give you

173
00:09:32.206 --> 00:09:35.280
a regular JavaScript object which
will have the same properties on it.

174
00:09:35.280 --> 00:09:36.792
It's not gonna change any of this stuff.

175
00:09:36.792 --> 00:09:40.150
All this stuff will be there, this is
gonna get rid of all the other stuff that

176
00:09:40.150 --> 00:09:45.210
comes along with documents, like .save,
.remove, .populate, so you can't do that.

177
00:09:45.210 --> 00:09:46.160
So that's what toObject does.

178
00:09:46.160 --> 00:09:49.930
So I'll do that first, and
then I delete the password property on it.

179
00:09:49.930 --> 00:09:53.520
So I don't send back the hash
passwords on all the calls and

180
00:09:53.520 --> 00:09:54.720
then I just returned the object.

181
00:09:54.720 --> 00:09:56.330
So that's what toJSON is doing.

182
00:09:56.330 --> 00:09:58.320
So it's making sure I don't
send back hashed passwords.

183
00:10:00.570 --> 00:10:01.450
So that's one way to do it.

184
00:10:01.450 --> 00:10:03.710
This is how you would do it
on an instance of a document.

185
00:10:03.710 --> 00:10:06.219
And then the way you would do it as far as

186
00:10:06.219 --> 00:10:11.284
a query.
&gt;&gt; Scott Moss: On our populate,

187
00:10:11.284 --> 00:10:15.629
when I populate the author, I can put
a comma here and say you know what,

188
00:10:15.629 --> 00:10:19.420
only give me the username
property of the author.

189
00:10:19.420 --> 00:10:20.240
I don't want everything.

190
00:10:21.250 --> 00:10:24.970
If I got rid of this and was like, yeah,
just give me the author, it'll give me

191
00:10:24.970 --> 00:10:29.950
the entire objects, which is the username
and the password, the hash password.

192
00:10:29.950 --> 00:10:33.600
But I'm like, no, I just want
the username, don't give me the password.

193
00:10:33.600 --> 00:10:34.611
So that's another way to do it,

194
00:10:34.611 --> 00:10:38.904
the word of population.
&gt;&gt; Scott Moss: And

195
00:10:38.904 --> 00:10:42.585
then there's also another way to
do it during queries, which is to,

196
00:10:42.585 --> 00:10:45.700
I'm not sure if I'm using it
anywhere else, let's see.

197
00:10:47.514 --> 00:10:49.370
I might be using it here, yeah.

198
00:10:49.370 --> 00:10:52.240
You can use the .select method on a query,

199
00:10:52.240 --> 00:10:57.160
and you can put negative in front of
the field you don't want it to select.

200
00:10:57.160 --> 00:11:00.180
So, if I say negative password,
that means don't select a password.

201
00:11:01.630 --> 00:11:03.030
That's another way you
would do it on a query.

202
00:11:03.030 --> 00:11:04.066
So those are three ways you can do it.

203
00:11:04.066 --> 00:11:06.267
On the document, I made a method.

204
00:11:06.267 --> 00:11:09.940
On the population, I just passed
in the properties that I want.

205
00:11:09.940 --> 00:11:14.149
On the record query, I can use the .select
method and say negative the field that I

206
00:11:14.149 --> 00:11:18.174
want to exclude.
&gt;&gt; Scott Moss: And

207
00:11:18.174 --> 00:11:22.133
then call it exec.in, so
all those will do the same thing.

208
00:11:22.133 --> 00:11:25.608
So this is insuring that I should
never see a hash password in my data.

209
00:11:33.636 --> 00:11:34.861
&gt;&gt; Scott Moss: Any questions on that

210
00:11:34.861 --> 00:11:38.710
stuff?
&gt;&gt; Speaker 1: Somebody was just

211
00:11:38.710 --> 00:11:41.666
mentioning, it appears that
an authenticated user can update another

212
00:11:41.666 --> 00:11:46.220
user's account if they know the id.
&gt;&gt; Scott Moss: Yep, that's totally true.

213
00:11:46.220 --> 00:11:52.640
So, a authenticated user could update
another user's account if they

214
00:11:52.640 --> 00:11:56.100
know the id, that is totally true because
we haven't set up anything for that.

215
00:11:56.100 --> 00:12:00.488
So, if you go into userRoutes,
user id, put.

216
00:12:00.488 --> 00:12:05.474
We go into put, here, there's nothing
stopping an authenticated user

217
00:12:05.474 --> 00:12:09.412
who new/id/id from coming in here and
changing stuff.

218
00:12:09.412 --> 00:12:12.376
You're right,
there's nothing stopping that.

219
00:12:12.376 --> 00:12:13.540
How would you get around that?

220
00:12:13.540 --> 00:12:16.539
Off the top of your head,
what would you do to get around that?

221
00:12:18.020 --> 00:12:20.460
With all the stuff you know about express.
&gt;&gt; Speaker 3: That's part of your

222
00:12:20.460 --> 00:12:23.357
requirements, right?
&gt;&gt; Speaker 3: That's part of your

223
00:12:23.357 --> 00:12:24.070
requirements, right?

224
00:12:24.070 --> 00:12:26.572
I mean you might want to be able to so.
&gt;&gt; Scott Moss: Right,

225
00:12:26.572 --> 00:12:28.110
it all depends on what your
requirements too, right?

226
00:12:28.110 --> 00:12:31.780
Yeah, so like on a role based system
which most blogging platforms are,

227
00:12:31.780 --> 00:12:37.770
you have authors, editors, admins,
maybe you want and they're all users.

228
00:12:37.770 --> 00:12:40.952
But maybe you want a user with admin
property be able to update a user with

229
00:12:40.952 --> 00:12:41.740
author property.

230
00:12:41.740 --> 00:12:46.070
So it all depends, in our case,
they're all users, there's no role-based.

231
00:12:46.070 --> 00:12:48.750
So maybe it's dangerous, but
how would you check for that,

232
00:12:48.750 --> 00:12:51.368
how would you prevent that?
&gt;&gt; Speaker 3: You could just do an if or

233
00:12:51.368 --> 00:12:55.190
[INAUDIBLE] merge, and say,
if user id equals update, got id,

234
00:12:55.190 --> 00:12:57.800
would that work?
&gt;&gt; Scott Moss: Yeah, you can do that.

235
00:12:57.800 --> 00:13:00.169
What's a better way?
&gt;&gt; Speaker 3: All that I got,

236
00:13:00.169 --> 00:13:01.591
you don't get no better.
&gt;&gt; Scott Moss: You sure?

237
00:13:01.591 --> 00:13:02.364
&gt;&gt; Speaker 3: [LAUGH]

238
00:13:02.364 --> 00:13:03.036
&gt;&gt; Scott Moss: You sure you don't

239
00:13:03.036 --> 00:13:03.584
get no better?

240
00:13:03.584 --> 00:13:04.789
What if you can do that
before you even get

241
00:13:04.789 --> 00:13:09.536
here?
&gt;&gt; Scott Moss: What if you make that

242
00:13:09.536 --> 00:13:12.003
check before you even get
to this controller project.

243
00:13:12.003 --> 00:13:12.975
&gt;&gt; Speaker 3: Is this a middleware or

244
00:13:12.975 --> 00:13:13.764
something?
&gt;&gt; Scott Moss: Yeah,

245
00:13:13.764 --> 00:13:14.659
you just make a middleware.

246
00:13:14.659 --> 00:13:18.728
It's like, hold up, let me make sure these
id's match up, you know what I mean?

247
00:13:18.728 --> 00:13:23.859
Let me make sure the req.params.id
equals req.user._id.

248
00:13:23.859 --> 00:13:30.539
And if they don't, get out of here, right,
cuz on this put you have req.params.id,

249
00:13:30.539 --> 00:13:35.343
so you get this id of the user
you're trying to update, right?

250
00:13:35.343 --> 00:13:41.017
And then you also have req.user._id,
which is the user that sent the request.

251
00:13:41.017 --> 00:13:46.780
So you see those two match inside of a,
you put that right here, right?

252
00:13:46.780 --> 00:13:48.920
You just put it right here.

253
00:13:48.920 --> 00:13:51.055
This makes the middleware
that would check those two.

254
00:13:51.055 --> 00:13:52.760
If they don't match,

255
00:13:52.760 --> 00:13:55.155
REST.sim unauthorized.
&gt;&gt; Speaker 1: Editing yourself or

256
00:13:55.155 --> 00:13:58.212
something?
&gt;&gt; Scott Moss: Yeah.

257
00:13:58.212 --> 00:14:02.815
Another approach is you can
just get rid of this id thing.

258
00:14:02.815 --> 00:14:05.100
All right, it is does not have id's.

259
00:14:05.100 --> 00:14:07.196
That way people can't update
anybody else but themselves, right?

260
00:14:08.360 --> 00:14:12.510
So if you wanted to update yourself,
you would just do a put request to like,

261
00:14:12.510 --> 00:14:13.520
slash me.

262
00:14:13.520 --> 00:14:17.570
Or just do a put request to slash users,
and then I would know who you were

263
00:14:17.570 --> 00:14:22.160
because you id is at req.user.
&gt;&gt; Speaker 3: It wouldn't really solve

264
00:14:22.160 --> 00:14:24.280
the problem, it would hide the id?
&gt;&gt; Scott Moss: It would hide

265
00:14:24.280 --> 00:14:24.880
the id's, yeah.

266
00:14:24.880 --> 00:14:28.270
I would never be querying the database for

267
00:14:28.270 --> 00:14:30.220
an id.
&gt;&gt; Speaker 3: Unless you updated it later

268
00:14:30.220 --> 00:14:33.460
and then, yeah, I see what you're saying.
&gt;&gt; Scott Moss: It

269
00:14:33.460 --> 00:14:34.390
would never happen, right?

270
00:14:34.390 --> 00:14:38.330
Cuz the reason this happens is because,
if we go to params,

271
00:14:38.330 --> 00:14:40.560
I'm querying the database for an id.

272
00:14:40.560 --> 00:14:42.280
But if I never have params, if it's gone,

273
00:14:42.280 --> 00:14:45.240
and the only way I know
about an id is off req.user.

274
00:14:45.240 --> 00:14:49.190
And the only way I know about req.user
is off of a decoded JSON Web Token,

275
00:14:49.190 --> 00:14:52.870
I'm guaranteed that the id that
I was looking at on req.user

276
00:14:52.870 --> 00:14:54.770
is the person who actually signed in.

277
00:14:54.770 --> 00:14:56.960
Whether that's you or not,
that's not my problem.

278
00:14:56.960 --> 00:14:59.830
Somebody might've got on your computer,
but I know that it is the person

279
00:14:59.830 --> 00:15:03.230
who's username is this, and
whose password is this, yeah.

280
00:15:03.230 --> 00:15:06.010
So you see that a lot too with token APIs.

281
00:15:06.010 --> 00:15:08.940
They're like,
do not use the slash id's stuff anymore.

282
00:15:08.940 --> 00:15:13.729
When you're only accessing resources about
yourself then they'll bring the id stuff

283
00:15:13.729 --> 00:15:16.689
back when they access
resources about other things.

284
00:15:16.689 --> 00:15:17.810
So it's a little different

