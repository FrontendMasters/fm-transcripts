WEBVTT

1
00:00:00.000 --> 00:00:04.570
[MUSIC]

2
00:00:04.570 --> 00:00:05.410
&gt;&gt; Speaker 1: Any other questions?

3
00:00:05.410 --> 00:00:08.084
&gt;&gt; Speaker 2: How can we
use ES 2015 with node?

4
00:00:08.084 --> 00:00:10.050
&gt;&gt; Speaker 1: That is an amazing question.

5
00:00:10.050 --> 00:00:14.729
So if you want partial support and
if you run a node 12,

6
00:00:14.729 --> 00:00:18.614
you could just at the toggle
file use strict and

7
00:00:18.614 --> 00:00:22.996
you'll get partial support
as in you can do const and

8
00:00:22.996 --> 00:00:27.200
you can do let, and
var, well, var is 2005.

9
00:00:27.200 --> 00:00:28.130
Yeah, so you can do that.

10
00:00:28.130 --> 00:00:31.760
If you want full support,
then you need to transpile.

11
00:00:31.760 --> 00:00:34.730
So then you got to pick
your flavor of transpilers.

12
00:00:34.730 --> 00:00:36.870
Probably only use Babble for
a transpiler and then for

13
00:00:36.870 --> 00:00:41.190
tooling, Grunt, Gulp, Webpack,
whatever tooling you want.

14
00:00:41.190 --> 00:00:43.760
But yeah,
you pretty much just have to transpile it.

15
00:00:43.760 --> 00:00:47.940
And then the sweet thing about it
is because node uses common js,

16
00:00:47.940 --> 00:00:53.370
as far as if you wanted to use the 2015
import syntax, then you're pretty

17
00:00:53.370 --> 00:00:57.060
much money on there because import's gonna
compile down to common js which is great.

18
00:00:57.060 --> 00:01:01.439
In the browser, as you saw yesterday
we had to use something like Webpack or

19
00:01:01.439 --> 00:01:04.982
JSPM to mock common js in the browser or
system js,

20
00:01:04.982 --> 00:01:09.870
whereas Node.js does use common js so we
don't have to figure that hard part out.

21
00:01:09.870 --> 00:01:12.110
But yeah, you have to use a transpiler and

22
00:01:12.110 --> 00:01:14.360
then a build tool to use that transpiler,
or

23
00:01:14.360 --> 00:01:18.175
just use the transpiler from the command
line, straight up from the command line.

24
00:01:18.175 --> 00:01:19.565
I'm just gonna run Babel.

25
00:01:19.565 --> 00:01:22.465
You can install Babel as a command line
tool and run it there if you want to.

26
00:01:24.805 --> 00:01:27.105
&gt;&gt; Speaker 2: Once you get it set up,
is it pretty painless?

27
00:01:27.105 --> 00:01:28.625
&gt;&gt; Speaker 1: Yeah, once you get
it set up it's pretty painless.

28
00:01:28.625 --> 00:01:33.685
Depending on what you set it up with,
I would say the easiest one in my opinion

29
00:01:33.685 --> 00:01:37.820
to set it up, Webpack is the easiest but
then Webpack bundles it all and

30
00:01:37.820 --> 00:01:41.385
you don't need a bundled server file,
but you could.

31
00:01:41.385 --> 00:01:42.990
Gulp is probably the next easiest.

32
00:01:42.990 --> 00:01:45.060
I wouldn't recommend JSPM with node.

33
00:01:45.060 --> 00:01:48.935
JSPM is more for client side,
although you can use it with node and

34
00:01:48.935 --> 00:01:50.420
I have used it with node.

35
00:01:50.420 --> 00:01:53.859
It's really complicated because JSPM,
like I said,

36
00:01:53.859 --> 00:01:57.522
it resolves URLs not relative
to the file that you're in,

37
00:01:57.522 --> 00:02:01.780
but relative to where you tell
system js is the entry point.

38
00:02:01.780 --> 00:02:08.310
So this wouldn't be /lions, it'd be
like if our entry point was Node API,

39
00:02:08.310 --> 00:02:13.450
it'd be server/lions.

40
00:02:13.450 --> 00:02:15.500
So that doesn't compile down
to common js very well.

41
00:02:15.500 --> 00:02:19.640
So you get some really wonky
stuff with that and if you're not

42
00:02:19.640 --> 00:02:22.870
really comfortable with JavaScript, then
you probably wanna stay away from that.

43
00:02:25.610 --> 00:02:26.700
&gt;&gt; Speaker 1: Cool, any other questions?

44
00:02:29.845 --> 00:02:31.205
&gt;&gt; Speaker 1: Nope,
any other questions online, Mark?

45
00:02:31.205 --> 00:02:35.720
&gt;&gt; Speaker 2: I think we're caught,
let me.

46
00:02:38.160 --> 00:02:41.853
&gt;&gt; Speaker 2: Is there a specific version
of Node to have the ability to use let

47
00:02:41.853 --> 00:02:42.560
and const?

48
00:02:42.560 --> 00:02:45.530
&gt;&gt; Speaker 1: Yeah, so if you're using,
let me see what version of Node I'm using.

49
00:02:49.925 --> 00:02:52.624
&gt;&gt; Speaker 1: I'm using 12.1 and
I'm pretty sure I can do that,

50
00:02:52.624 --> 00:02:53.805
let me double-check.

51
00:02:53.805 --> 00:02:55.805
I'm just gonna run node.

52
00:02:55.805 --> 00:03:00.458
I'm going to use strict, and

53
00:03:00.458 --> 00:03:06.980
then I'll run and say const me = 'me'.

54
00:03:06.980 --> 00:03:09.480
Yeah, that works.

55
00:03:09.480 --> 00:03:11.508
So I'm using 12.1 and it works fine.

56
00:03:11.508 --> 00:03:19.588
let you = you.

57
00:03:19.588 --> 00:03:22.380
Okay, so it doesn't like let,
but it likes const.

58
00:03:22.380 --> 00:03:26.228
So again node is using V.8.

59
00:03:26.228 --> 00:03:30.470
So whatever V.8 is bringing in,
as far as ES 2015, that's what node has.

60
00:03:30.470 --> 00:03:34.090
And then it's also not on the same
version as V.8, it's a little bit behind.

61
00:03:34.090 --> 00:03:36.360
So it's just gonna take a while.

62
00:03:36.360 --> 00:03:40.410
So if you want full support,
definitely use a transpiler,

63
00:03:40.410 --> 00:03:42.680
which will give you everything.

64
00:03:42.680 --> 00:03:47.440
Cool.

65
00:03:47.440 --> 00:03:49.600
Anything else?

66
00:03:49.600 --> 00:03:55.140
&gt;&gt; Speaker 2: Is IOJS a drop-in
replacement for node?

67
00:03:55.140 --> 00:03:58.780
Are we doing anything in this course
that isn't supported by IOJS?

68
00:03:58.780 --> 00:04:00.130
&gt;&gt; Speaker 1: It's totally
a drop-in replacement.

69
00:04:00.130 --> 00:04:03.450
Everything we're doing in this
course will work exactly with IOJS.

70
00:04:03.450 --> 00:04:04.861
You just switch it right now and
it'll work,

71
00:04:04.861 --> 00:04:06.620
if you wanna use IOJS right
now it'll work the same way.

72
00:04:06.620 --> 00:04:08.930
Nothing will change.

73
00:04:08.930 --> 00:04:11.900
So yeah, you can totally do it.

74
00:04:11.900 --> 00:04:13.349
We're not doing anything you
wont be able to do there.

75
00:04:17.490 --> 00:04:20.180
&gt;&gt; Speaker 2: Can you explain
the module about exports?

76
00:04:20.180 --> 00:04:21.567
&gt;&gt; Speaker 1: Yeah, so.

77
00:04:25.860 --> 00:04:26.960
&gt;&gt; Speaker 1: Let's make a new file.

78
00:04:26.960 --> 00:04:28.610
It'll be easier if I just
show you in a brand new file.

79
00:04:35.515 --> 00:04:38.569
&gt;&gt; Speaker 1: So
let's say I have three variables,

80
00:04:38.569 --> 00:04:42.965
var mod1,
I'm not gonna be able to give them values.

81
00:04:42.965 --> 00:04:47.645
I'm just gonna say mod1, mod2, and mod3.

82
00:04:47.645 --> 00:04:51.706
I've got three new variables and I want to
find a way to export all three of these so

83
00:04:51.706 --> 00:04:53.760
that I can require them somewhere else.

84
00:04:53.760 --> 00:05:00.310
So let's go through some
different strategies doing that.

85
00:05:00.310 --> 00:05:05.005
So I could just say,
exports.mod1 = mod1 and

86
00:05:05.005 --> 00:05:09.587
so forth and so forth exports.mod2 = mod2,

87
00:05:09.587 --> 00:05:15.830
exports.mod3 = mod3,
that'll attach them to an object.

88
00:05:15.830 --> 00:05:22.655
I could also not just not put var here,
and just say exports.mod1 = something.

89
00:05:22.655 --> 00:05:23.885
Exports.

90
00:05:23.885 --> 00:05:27.289
Oops.

91
00:05:27.289 --> 00:05:33.080
.mod2 = something.

92
00:05:33.080 --> 00:05:39.243
&gt;&gt; Speaker 2: The export has to
go along with your require call?

93
00:05:39.243 --> 00:05:41.780
&gt;&gt; Speaker 1: No, I'll get there.

94
00:05:41.780 --> 00:05:46.610
So, if we do this exports here,
this will allow us to enter another file.

95
00:05:46.610 --> 00:05:48.650
So this is another file down here.

96
00:05:48.650 --> 00:05:54.816
IN another file, we'll be able to do,
and imagine, this file's called mod.js.

97
00:05:54.816 --> 00:05:56.840
This is mod.js.

98
00:05:56.840 --> 00:06:01.730
And then another file in app.js.

99
00:06:01.730 --> 00:06:04.770
They're right next to each other.

100
00:06:04.770 --> 00:06:09.761
I can say var mod = require the name of

101
00:06:09.761 --> 00:06:14.270
that file which is (./mod).

102
00:06:14.270 --> 00:06:15.590
So I'll just say mod.

103
00:06:16.680 --> 00:06:22.316
That is going to equal
an object with mod1 on it,

104
00:06:22.316 --> 00:06:25.760
mod2 on it, and mod3 on it.

105
00:06:27.740 --> 00:06:32.280
That's because I attached them to exports,
and exports itself is an object.

106
00:06:32.280 --> 00:06:37.080
So when I say exports this, exports.this,
exports.this, it attaches it to an object.

107
00:06:37.080 --> 00:06:41.870
So now if I want to access those modules,
I would

108
00:06:41.870 --> 00:06:46.017
have to say mod.mod1 and

109
00:06:46.017 --> 00:06:51.050
mod.mod2 because-
&gt;&gt; Speaker 2: So

110
00:06:51.050 --> 00:06:53.600
is exports supplied by node?

111
00:06:53.600 --> 00:06:55.345
&gt;&gt; Speaker 1: Yeah, it's supplied by node.

112
00:06:55.345 --> 00:06:58.870
Yeah, so again, if we, this iffy right
here that's on every single file and node.

113
00:07:01.620 --> 00:07:08.560
So we have module, we have exports,
yeah, we have dirname.

114
00:07:08.560 --> 00:07:09.120
&gt;&gt; Speaker 2: Okay.

115
00:07:09.120 --> 00:07:11.777
&gt;&gt; Speaker 1: Yeah, yeah we've got all
that stuff, it's all in there, and

116
00:07:11.777 --> 00:07:14.250
there's also a module.exports,
which is not exports.

117
00:07:14.250 --> 00:07:15.040
So this is exports.

118
00:07:15.040 --> 00:07:19.194
So, the way I figure this,
everything that's on exports,

119
00:07:19.194 --> 00:07:23.210
just think of exports as
the thing you're gonna require.

120
00:07:23.210 --> 00:07:25.176
When you use the exports
keyword in one file,

121
00:07:25.176 --> 00:07:28.400
that's gonna be referenced as whatever
variable you call the next file.

122
00:07:28.400 --> 00:07:30.837
So this is exports right here now,
this is now exports.

123
00:07:30.837 --> 00:07:33.500
We just called in mod in the other file.

124
00:07:33.500 --> 00:07:36.670
So you see, it's the same thing.

125
00:07:36.670 --> 00:07:39.570
This mod is this object's exports.

126
00:07:39.570 --> 00:07:40.210
It's just an object.

127
00:07:41.330 --> 00:07:45.560
So now we can say mod.mod1,
just like we said exports.mod1.

128
00:07:45.560 --> 00:07:48.140
It's the same object when you
put things on exports like that.

129
00:07:48.140 --> 00:07:48.780
By using the exports,

130
00:07:48.780 --> 00:07:51.405
we're allowed to export as many
things as want out this file.

131
00:07:51.405 --> 00:07:55.740
Module.exports does something like this.

132
00:07:55.740 --> 00:07:59.395
So, say we want the same behavior,
we want to export an object, but

133
00:07:59.395 --> 00:08:01.139
we wanna use module.exports.

134
00:08:01.139 --> 00:08:06.340
So, module.exports means nothing else
is gonna be exported from this file.

135
00:08:06.340 --> 00:08:07.070
This is it.

136
00:08:07.070 --> 00:08:08.320
This is the only thing that's
gonna be exported from this file.

137
00:08:08.320 --> 00:08:12.429
And it can be anything we want, an object,
a number, a function, whatever we want,

138
00:08:12.429 --> 00:08:16.040
but it's gonna be the only thing that's
gonna be exported from this file.

139
00:08:16.040 --> 00:08:18.050
So, if we want the same behavior,
we do the same thing,

140
00:08:18.050 --> 00:08:21.658
mod1,
&gt;&gt; Speaker 1: mod2

141
00:08:24.260 --> 00:08:26.404
&gt;&gt; Speaker 1: And then mod3.

142
00:08:29.138 --> 00:08:31.655
&gt;&gt; Speaker 1: And
that would give us the same thing below.

143
00:08:31.655 --> 00:08:32.865
This'll still work the same way.

144
00:08:32.865 --> 00:08:37.930
This'll still be an object, and
we still have these properties on it, and

145
00:08:37.930 --> 00:08:40.260
that's because we actually
made it an object.

146
00:08:40.260 --> 00:08:42.130
It's whatever this value is,
it's an object.

147
00:08:42.130 --> 00:08:44.150
If I was like,
module.exports is a function now.

148
00:08:46.900 --> 00:08:48.760
&gt;&gt; Speaker 1: Which we will do later on.

149
00:08:48.760 --> 00:08:51.960
Module.exports is a function,
okay, this is no longer an object.

150
00:08:51.960 --> 00:08:52.670
It's a function.

151
00:08:54.749 --> 00:08:56.805
&gt;&gt; Speaker 1: And
because it is a function,

152
00:08:56.805 --> 00:09:02.020
I can just immediately invoke it
like that cuz it's a function.

153
00:09:02.020 --> 00:09:08.706
So this thing took in some arcs, nums,
I can just pass in some nums here.

154
00:09:13.810 --> 00:09:16.380
&gt;&gt; Speaker 1: Or I could just say,
okay, var func = that.

155
00:09:18.477 --> 00:09:19.980
&gt;&gt; Speaker 1: And then call it.

156
00:09:28.040 --> 00:09:29.800
&gt;&gt; Speaker 1: Does that make sense?

157
00:09:30.970 --> 00:09:31.470
Okay.

158
00:09:33.770 --> 00:09:34.400
&gt;&gt; Speaker 1: Any other questions?

159
00:09:37.970 --> 00:09:41.524
&gt;&gt; Speaker 2: In the subrouter, for
example the tiger router in tiger JS,

160
00:09:41.524 --> 00:09:45.950
can you attach a middleware,
like tiger router.use my middleware?

161
00:09:45.950 --> 00:09:49.380
&gt;&gt; Speaker 1: Yes, you totally can,
everything you could do in app,

162
00:09:49.380 --> 00:09:50.340
you could do here.

163
00:09:50.340 --> 00:09:51.160
The only difference is,

164
00:09:51.160 --> 00:09:55.240
it would only work on this router and
children of this router.

165
00:09:55.240 --> 00:09:57.620
If this router used another router,
it'll work there, too.

166
00:09:57.620 --> 00:10:00.120
So you could,
if you had another router somewhere else,

167
00:10:00.120 --> 00:10:03.560
let's say we required another router and
we were, so hey, tiger router.

168
00:10:07.270 --> 00:10:11.574
&gt;&gt; Speaker 1: We want you to .use
anything that comes into /tigers,

169
00:10:11.574 --> 00:10:15.160
/other, we want you to
use the otherRouter.

170
00:10:15.160 --> 00:10:20.133
And then if we had some middleware up here

171
00:10:20.133 --> 00:10:24.668
on tigerRouter, some middleware,

172
00:10:24.668 --> 00:10:31.120
then now the other router
uses that middleware too.

173
00:10:33.590 --> 00:10:36.270
&gt;&gt; Speaker 1: Does use it, doesn't use it?

