WEBVTT

1
00:00:00.000 --> 00:00:04.570
[MUSIC]

2
00:00:04.570 --> 00:00:07.311
&gt;&gt; Speaker 1: Any other questions?
&gt;&gt; Speaker 2: How can we use ES 2015 with

3
00:00:07.311 --> 00:00:10.050
node?
&gt;&gt; Speaker 1: That is an amazing question.

4
00:00:10.050 --> 00:00:14.729
So if you want partial support and
if you run a node 12,

5
00:00:14.729 --> 00:00:18.614
you could just at the toggle
file use strict and

6
00:00:18.614 --> 00:00:22.996
you'll get partial support
as in you can do const and

7
00:00:22.996 --> 00:00:27.200
you can do let, and
var, well, var is 2005.

8
00:00:27.200 --> 00:00:28.130
Yeah, so you can do that.

9
00:00:28.130 --> 00:00:31.760
If you want full support,
then you need to transpile.

10
00:00:31.760 --> 00:00:34.730
So then you got to pick
your flavor of transpilers.

11
00:00:34.730 --> 00:00:36.870
Probably only use Babble for
a transpiler and then for

12
00:00:36.870 --> 00:00:41.190
tooling, Grunt, Gulp, Webpack,
whatever tooling you want.

13
00:00:41.190 --> 00:00:43.760
But yeah,
you pretty much just have to transpile it.

14
00:00:43.760 --> 00:00:47.940
And then the sweet thing about it
is because node uses common js,

15
00:00:47.940 --> 00:00:53.370
as far as if you wanted to use the 2015
import syntax, then you're pretty

16
00:00:53.370 --> 00:00:57.060
much money on there because import's gonna
compile down to common js which is great.

17
00:00:57.060 --> 00:01:01.439
In the browser, as you saw yesterday
we had to use something like Webpack or

18
00:01:01.439 --> 00:01:04.982
JSPM to mock common js in the browser or
system js,

19
00:01:04.982 --> 00:01:09.870
whereas Node.js does use common js so we
don't have to figure that hard part out.

20
00:01:09.870 --> 00:01:12.110
But yeah, you have to use a transpiler and

21
00:01:12.110 --> 00:01:14.360
then a build tool to use that transpiler,
or

22
00:01:14.360 --> 00:01:18.175
just use the transpiler from the command
line, straight up from the command line.

23
00:01:18.175 --> 00:01:19.565
I'm just gonna run Babel.

24
00:01:19.565 --> 00:01:21.415
You can install Babel as
a command line tool and

25
00:01:21.415 --> 00:01:25.665
run it there if you want to.
&gt;&gt; Speaker 2: Once you get it set up,

26
00:01:25.665 --> 00:01:27.315
is it pretty painless?
&gt;&gt; Speaker 1: Yeah,

27
00:01:27.315 --> 00:01:28.625
once you get it set up
it's pretty painless.

28
00:01:28.625 --> 00:01:33.685
Depending on what you set it up with,
I would say the easiest one in my opinion

29
00:01:33.685 --> 00:01:37.820
to set it up, Webpack is the easiest but
then Webpack bundles it all and

30
00:01:37.820 --> 00:01:41.385
you don't need a bundled server file,
but you could.

31
00:01:41.385 --> 00:01:42.990
Gulp is probably the next easiest.

32
00:01:42.990 --> 00:01:45.060
I wouldn't recommend JSPM with node.

33
00:01:45.060 --> 00:01:48.935
JSPM is more for client side,
although you can use it with node and

34
00:01:48.935 --> 00:01:50.420
I have used it with node.

35
00:01:50.420 --> 00:01:53.859
It's really complicated because JSPM,
like I said,

36
00:01:53.859 --> 00:01:57.522
it resolves URLs not relative
to the file that you're in,

37
00:01:57.522 --> 00:02:01.780
but relative to where you tell
system js is the entry point.

38
00:02:01.780 --> 00:02:08.310
So this wouldn't be /lions, it'd be
like if our entry point was Node API,

39
00:02:08.310 --> 00:02:13.450
it'd be server/lions.

40
00:02:13.450 --> 00:02:15.500
So that doesn't compile down
to common js very well.

41
00:02:15.500 --> 00:02:18.990
So you get some really
wonky stuff with that and

42
00:02:18.990 --> 00:02:21.770
if you're not really comfortable
with JavaScript, then

43
00:02:21.770 --> 00:02:25.871
you probably wanna stay away from that.
&gt;&gt; Speaker 1: Cool,

44
00:02:25.871 --> 00:02:30.065
any other questions?
&gt;&gt; Speaker 1: Nope,

45
00:02:30.065 --> 00:02:34.548
any other questions online, Mark?
&gt;&gt; Speaker 2: I think we're caught,

46
00:02:34.548 --> 00:02:39.275
let me.
&gt;&gt; Speaker 2: Is there a specific

47
00:02:39.275 --> 00:02:42.560
version of Node to have
the ability to use let and const?

48
00:02:42.560 --> 00:02:43.747
&gt;&gt; Speaker 1: Yeah, so if you're using,

49
00:02:43.747 --> 00:02:51.099
let me see what version of Node I'm using.
&gt;&gt; Speaker 1: I'm using 12.1 and

50
00:02:51.099 --> 00:02:53.805
I'm pretty sure I can do that,
let me double-check.

51
00:02:53.805 --> 00:02:55.805
I'm just gonna run node.

52
00:02:55.805 --> 00:03:00.458
I'm going to use strict, and

53
00:03:00.458 --> 00:03:06.980
then I'll run and say const me = 'me'.

54
00:03:06.980 --> 00:03:09.480
Yeah, that works.

55
00:03:09.480 --> 00:03:11.508
So I'm using 12.1 and it works fine.

56
00:03:11.508 --> 00:03:19.588
let you = you.

57
00:03:19.588 --> 00:03:22.380
Okay, so it doesn't like let,
but it likes const.

58
00:03:22.380 --> 00:03:26.228
So again node is using V.8.

59
00:03:26.228 --> 00:03:30.470
So whatever V.8 is bringing in,
as far as ES 2015, that's what node has.

60
00:03:30.470 --> 00:03:34.090
And then it's also not on the same
version as V.8, it's a little bit behind.

61
00:03:34.090 --> 00:03:36.360
So it's just gonna take a while.

62
00:03:36.360 --> 00:03:40.410
So if you want full support,
definitely use a transpiler,

63
00:03:40.410 --> 00:03:42.680
which will give you everything.

64
00:03:42.680 --> 00:03:47.440
Cool.

65
00:03:47.440 --> 00:03:51.809
Anything else?
&gt;&gt; Speaker 2: Is IOJS a drop-in

66
00:03:51.809 --> 00:03:55.140
replacement for node?

67
00:03:55.140 --> 00:03:58.780
Are we doing anything in this course
that isn't supported by IOJS?

68
00:03:58.780 --> 00:03:59.600
&gt;&gt; Speaker 1: It's totally a drop-in

69
00:03:59.600 --> 00:04:00.130
replacement.

70
00:04:00.130 --> 00:04:03.450
Everything we're doing in this
course will work exactly with IOJS.

71
00:04:03.450 --> 00:04:04.861
You just switch it right now and
it'll work,

72
00:04:04.861 --> 00:04:06.620
if you wanna use IOJS right
now it'll work the same way.

73
00:04:06.620 --> 00:04:08.930
Nothing will change.

74
00:04:08.930 --> 00:04:11.900
So yeah, you can totally do it.

75
00:04:11.900 --> 00:04:13.210
We're not doing anything
you wont be able to do

76
00:04:13.210 --> 00:04:17.810
there.
&gt;&gt; Speaker 2: Can

77
00:04:17.810 --> 00:04:21.011
you explain the module about exports?
&gt;&gt; Speaker 1: Yeah,

78
00:04:21.011 --> 00:04:26.960
so.
&gt;&gt; Speaker 1: Let's make a new file.

79
00:04:26.960 --> 00:04:28.610
It'll be easier if I just
show you in a brand new file.

80
00:04:35.515 --> 00:04:37.519
&gt;&gt; Speaker 1: So let's say I have three

81
00:04:37.519 --> 00:04:42.965
variables, var mod1,
I'm not gonna be able to give them values.

82
00:04:42.965 --> 00:04:47.645
I'm just gonna say mod1, mod2, and mod3.

83
00:04:47.645 --> 00:04:51.706
I've got three new variables and I want to
find a way to export all three of these so

84
00:04:51.706 --> 00:04:53.760
that I can require them somewhere else.

85
00:04:53.760 --> 00:05:00.310
So let's go through some
different strategies doing that.

86
00:05:00.310 --> 00:05:05.005
So I could just say,
exports.mod1 = mod1 and

87
00:05:05.005 --> 00:05:09.587
so forth and so forth exports.mod2 = mod2,

88
00:05:09.587 --> 00:05:15.830
exports.mod3 = mod3,
that'll attach them to an object.

89
00:05:15.830 --> 00:05:22.655
I could also not just not put var here,
and just say exports.mod1 = something.

90
00:05:22.655 --> 00:05:23.885
Exports.

91
00:05:23.885 --> 00:05:27.289
Oops.

92
00:05:27.289 --> 00:05:33.800
.mod2 = something.
&gt;&gt; Speaker 2: The export

93
00:05:33.800 --> 00:05:39.243
has to go along with your require call?

94
00:05:39.243 --> 00:05:41.780
&gt;&gt; Speaker 1: No, I'll get there.

95
00:05:41.780 --> 00:05:46.610
So, if we do this exports here,
this will allow us to enter another file.

96
00:05:46.610 --> 00:05:48.650
So this is another file down here.

97
00:05:48.650 --> 00:05:54.816
IN another file, we'll be able to do,
and imagine, this file's called mod.js.

98
00:05:54.816 --> 00:05:56.840
This is mod.js.

99
00:05:56.840 --> 00:06:01.730
And then another file in app.js.

100
00:06:01.730 --> 00:06:04.770
They're right next to each other.

101
00:06:04.770 --> 00:06:09.761
I can say var mod = require the name of

102
00:06:09.761 --> 00:06:14.270
that file which is (./mod).

103
00:06:14.270 --> 00:06:15.590
So I'll just say mod.

104
00:06:16.680 --> 00:06:22.316
That is going to equal
an object with mod1 on it,

105
00:06:22.316 --> 00:06:25.760
mod2 on it, and mod3 on it.

106
00:06:27.740 --> 00:06:32.280
That's because I attached them to exports,
and exports itself is an object.

107
00:06:32.280 --> 00:06:37.080
So when I say exports this, exports.this,
exports.this, it attaches it to an object.

108
00:06:37.080 --> 00:06:41.870
So now if I want to access those modules,
I would

109
00:06:41.870 --> 00:06:46.017
have to say mod.mod1 and

110
00:06:46.017 --> 00:06:51.050
mod.mod2 because-
&gt;&gt; Speaker 2: So

111
00:06:51.050 --> 00:06:55.345
is exports supplied by node?
&gt;&gt; Speaker 1: Yeah, it's supplied by node.

112
00:06:55.345 --> 00:06:58.870
Yeah, so again, if we, this iffy right
here that's on every single file and node.

113
00:07:01.620 --> 00:07:06.549
So we have module, we have exports, yeah,

114
00:07:06.549 --> 00:07:09.120
we have dirname.
&gt;&gt; Speaker 2: Okay.

115
00:07:09.120 --> 00:07:10.223
&gt;&gt; Speaker 1: Yeah, yeah we've got all

116
00:07:10.223 --> 00:07:13.284
that stuff, it's all in there, and
there's also a module.exports,

117
00:07:13.284 --> 00:07:14.250
which is not exports.

118
00:07:14.250 --> 00:07:15.040
So this is exports.

119
00:07:15.040 --> 00:07:19.194
So, the way I figure this,
everything that's on exports,

120
00:07:19.194 --> 00:07:23.210
just think of exports as
the thing you're gonna require.

121
00:07:23.210 --> 00:07:25.176
When you use the exports
keyword in one file,

122
00:07:25.176 --> 00:07:28.400
that's gonna be referenced as whatever
variable you call the next file.

123
00:07:28.400 --> 00:07:30.837
So this is exports right here now,
this is now exports.

124
00:07:30.837 --> 00:07:33.500
We just called in mod in the other file.

125
00:07:33.500 --> 00:07:36.670
So you see, it's the same thing.

126
00:07:36.670 --> 00:07:39.570
This mod is this object's exports.

127
00:07:39.570 --> 00:07:40.210
It's just an object.

128
00:07:41.330 --> 00:07:45.560
So now we can say mod.mod1,
just like we said exports.mod1.

129
00:07:45.560 --> 00:07:48.140
It's the same object when you
put things on exports like that.

130
00:07:48.140 --> 00:07:48.780
By using the exports,

131
00:07:48.780 --> 00:07:51.405
we're allowed to export as many
things as want out this file.

132
00:07:51.405 --> 00:07:55.740
Module.exports does something like this.

133
00:07:55.740 --> 00:07:59.395
So, say we want the same behavior,
we want to export an object, but

134
00:07:59.395 --> 00:08:01.139
we wanna use module.exports.

135
00:08:01.139 --> 00:08:06.340
So, module.exports means nothing else
is gonna be exported from this file.

136
00:08:06.340 --> 00:08:07.070
This is it.

137
00:08:07.070 --> 00:08:08.320
This is the only thing that's
gonna be exported from this file.

138
00:08:08.320 --> 00:08:12.429
And it can be anything we want, an object,
a number, a function, whatever we want,

139
00:08:12.429 --> 00:08:16.040
but it's gonna be the only thing that's
gonna be exported from this file.

140
00:08:16.040 --> 00:08:18.050
So, if we want the same behavior,
we do the same thing,

141
00:08:18.050 --> 00:08:21.658
mod1,
&gt;&gt; Speaker 1: mod2

142
00:08:24.260 --> 00:08:25.331
&gt;&gt; Speaker 1: And then

143
00:08:25.331 --> 00:08:29.342
mod3.
&gt;&gt; Speaker 1: And

144
00:08:29.342 --> 00:08:31.655
that would give us the same thing below.

145
00:08:31.655 --> 00:08:32.865
This'll still work the same way.

146
00:08:32.865 --> 00:08:37.930
This'll still be an object, and
we still have these properties on it, and

147
00:08:37.930 --> 00:08:40.260
that's because we actually
made it an object.

148
00:08:40.260 --> 00:08:42.130
It's whatever this value is,
it's an object.

149
00:08:42.130 --> 00:08:44.150
If I was like,
module.exports is a function now.

150
00:08:46.900 --> 00:08:48.760
&gt;&gt; Speaker 1: Which we will do later on.

151
00:08:48.760 --> 00:08:51.960
Module.exports is a function,
okay, this is no longer an object.

152
00:08:51.960 --> 00:08:55.900
It's a function.
&gt;&gt; Speaker 1: And because it is

153
00:08:55.900 --> 00:09:02.020
a function, I can just immediately
invoke it like that cuz it's a function.

154
00:09:02.020 --> 00:09:07.490
So this thing took in some arcs,
nums, I can just pass in some nums

155
00:09:07.490 --> 00:09:13.945
here.
&gt;&gt; Speaker 1: Or

156
00:09:13.945 --> 00:09:19.980
I could just say, okay, var func = that.
&gt;&gt; Speaker 1: And then call it.

157
00:09:28.040 --> 00:09:29.800
&gt;&gt; Speaker 1: Does that make sense?

158
00:09:30.970 --> 00:09:34.034
Okay.
&gt;&gt; Speaker 1: Any other

159
00:09:34.034 --> 00:09:39.085
questions?
&gt;&gt; Speaker 2: In the subrouter,

160
00:09:39.085 --> 00:09:43.266
for example the tiger router in tiger JS,
can you attach a middleware,

161
00:09:43.266 --> 00:09:48.490
like tiger router.use my middleware?
&gt;&gt; Speaker 1: Yes, you totally can,

162
00:09:48.490 --> 00:09:50.340
everything you could do in app,
you could do here.

163
00:09:50.340 --> 00:09:51.160
The only difference is,

164
00:09:51.160 --> 00:09:55.240
it would only work on this router and
children of this router.

165
00:09:55.240 --> 00:09:57.620
If this router used another router,
it'll work there, too.

166
00:09:57.620 --> 00:10:00.120
So you could,
if you had another router somewhere else,

167
00:10:00.120 --> 00:10:02.980
let's say we required another router and
we were, so hey,

168
00:10:02.980 --> 00:10:08.735
tiger router.
&gt;&gt; Speaker 1: We want you to .use

169
00:10:08.735 --> 00:10:15.160
anything that comes into /tigers, /other,
we want you to use the otherRouter.

170
00:10:15.160 --> 00:10:20.133
And then if we had some middleware up here

171
00:10:20.133 --> 00:10:24.668
on tigerRouter, some middleware,

172
00:10:24.668 --> 00:10:31.120
then now the other router
uses that middleware too.

173
00:10:33.590 --> 00:10:36.270
&gt;&gt; Speaker 1: Does use it, doesn't use it?

