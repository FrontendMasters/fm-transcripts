WEBVTT

1
00:00:00.000 --> 00:00:03.844
[MUSIC]

2
00:00:03.844 --> 00:00:10.564
&gt;&gt; Scott Moss: So, this should be
working right, so if you go, [SOUND].

3
00:00:10.564 --> 00:00:16.540
NPM starts, boom boom boom,
that's still running.

4
00:00:16.540 --> 00:00:20.080
We should be able to come in here and
have that, right.

5
00:00:20.080 --> 00:00:23.988
So, if I go to admin.

6
00:00:23.988 --> 00:00:29.495
They'll go to admin, but just to show you
that this is working, if I opened up this,

7
00:00:29.495 --> 00:00:34.023
the console, I go to resources,
I get rid of the JSON web Token.

8
00:00:34.023 --> 00:00:37.130
Is saving this by the way,
if you're wondering how that got there.

9
00:00:37.130 --> 00:00:40.670
Then I refresh, and
if I click on admin they're like, no, no,

10
00:00:40.670 --> 00:00:42.570
you've got to go to sign in.

11
00:00:42.570 --> 00:00:43.970
I don't have an account,
so I'm gonna sign up.

12
00:00:43.970 --> 00:00:46.860
So, this is the thing that we just made,
so let's test that out.

13
00:00:46.860 --> 00:00:47.750
Let's sign up for an account.

14
00:00:49.410 --> 00:00:51.060
Cool, that worked, brought us to admin.

15
00:00:52.150 --> 00:00:53.544
Now if we go look back
at the resources you'll

16
00:00:53.544 --> 00:00:58.114
see.
&gt;&gt; Scott Moss: That

17
00:00:58.114 --> 00:00:59.900
the JSON Web Token is there now.

18
00:01:01.230 --> 00:01:02.170
It's this thing right here.

19
00:01:03.320 --> 00:01:04.110
That's the JSON Web Token.

20
00:01:04.110 --> 00:01:07.230
You see that?

21
00:01:07.230 --> 00:01:11.350
And then what I want to show you is, like
what is happening on every single course.

22
00:01:11.350 --> 00:01:14.750
Remember we said, the JSON Web Token
must be sent on every single request.

23
00:01:14.750 --> 00:01:17.670
And it must be on
the authorization header.

24
00:01:17.670 --> 00:01:22.010
And it must have like bearer space
the token or on the query param.

25
00:01:22.010 --> 00:01:25.500
If you look at the output of our
terminal here, it's definitely

26
00:01:25.500 --> 00:01:27.920
not on a query param because if it
was it would show it right here.

27
00:01:27.920 --> 00:01:31.240
If it was on a query param
it would show it right here.

28
00:01:31.240 --> 00:01:33.410
So it's not in a query param, so
we're assuming that it's on the header.

29
00:01:34.910 --> 00:01:37.700
Also here's that options request that
I was talking about as far as cores.

30
00:01:37.700 --> 00:01:39.686
You'll see that it's saying options,
options.

31
00:01:39.686 --> 00:01:42.810
That's the preflight check
that Chrome is sending,

32
00:01:42.810 --> 00:01:44.670
to make sure that we can
access the resources.

33
00:01:46.000 --> 00:01:49.040
But, so now, let's do this.

34
00:01:49.040 --> 00:01:51.955
I'm gonna say,

35
00:01:51.955 --> 00:01:57.785
my new blog post love to write Java

36
00:01:57.785 --> 00:02:03.620
scripts like in JavaScript.

37
00:02:03.620 --> 00:02:08.710
So, if I hit done, that totally
created it right and my blog is there.

38
00:02:08.710 --> 00:02:13.320
But let see what that looked like,
out of the way

39
00:02:13.320 --> 00:02:16.680
I guess I need to have it open when
I do it right, otherwise it won't do.

40
00:02:16.680 --> 00:02:20.360
You go out here that's really annoying.

41
00:02:20.360 --> 00:02:21.770
So, let's go back to admin and
try that again.

42
00:02:21.770 --> 00:02:24.078
I want you to see what the headers are.

43
00:02:24.078 --> 00:02:29.405
So, another post, blah, blah, blah,

44
00:02:29.405 --> 00:02:35.054
blah, blah, blah, blah, blah and done.

45
00:02:35.054 --> 00:02:36.217
Cool.

46
00:02:36.217 --> 00:02:40.820
So, that made a post,
is this the post request?

47
00:02:40.820 --> 00:02:41.790
No, that's the git request.

48
00:02:41.790 --> 00:02:43.880
Is that the poster class?

49
00:02:45.230 --> 00:02:45.950
Here it is.

50
00:02:45.950 --> 00:02:52.586
All right, so here's the headers.
&gt;&gt; Scott Moss: Right there,

51
00:02:52.586 --> 00:02:56.187
see that?
&gt;&gt; Scott Moss: So,

52
00:02:56.187 --> 00:02:57.628
here are our headers that we sent.

53
00:02:57.628 --> 00:03:02.272
Authorization header, Bearer,
and then the JSON Web Token.

54
00:03:02.272 --> 00:03:04.470
That's Angular doing that.

55
00:03:04.470 --> 00:03:08.730
So before, every single request,
Angular goes into local storage.

56
00:03:08.730 --> 00:03:13.994
It looks for the thing the Local Storage
key that I gave it which is,

57
00:03:13.994 --> 00:03:19.480
in this case, it looks for
anything with this key, ngblog/token.

58
00:03:19.480 --> 00:03:23.380
And if there's something there,
it grabs the token and then attaches it to

59
00:03:23.380 --> 00:03:26.660
the header, Authorization
property as Bearer space header.

60
00:03:26.660 --> 00:03:28.280
&gt;&gt; Speaker 2: Can you show-

61
00:03:28.280 --> 00:03:29.020
&gt;&gt; Scott Moss: Before the request

62
00:03:29.020 --> 00:03:30.860
goes out.
&gt;&gt; Speaker 2: Can you show that again

63
00:03:30.860 --> 00:03:33.230
in the code?
&gt;&gt; Scott Moss: In the Angular code?

64
00:03:33.230 --> 00:03:34.620
&gt;&gt; Speaker 2: Yeah, or

65
00:03:34.620 --> 00:03:36.660
that's against the rules.
&gt;&gt; Scott Moss: It's not against the rules.

66
00:03:36.660 --> 00:03:37.920
Does anybody wanna see that?

67
00:03:37.920 --> 00:03:38.980
I don't know, this is a node class,

68
00:03:38.980 --> 00:03:41.190
anybody wanna see that in Angular?
&gt;&gt; Speaker 2: Or

69
00:03:41.190 --> 00:03:43.540
else you can just tell me where it is.
&gt;&gt; Scott Moss: Yeah,

70
00:03:43.540 --> 00:03:45.000
it's on the block branch.

71
00:03:45.000 --> 00:03:51.308
Go to share.js,
it's in that file, you'll see it.

72
00:03:51.308 --> 00:03:54.410
All right,
everybody with me how that works?

73
00:03:54.410 --> 00:03:56.420
Yeah, Mark?
&gt;&gt; Mark: They were wondering,

74
00:03:56.420 --> 00:04:01.080
how does this all work with
API key style authorization?

75
00:04:01.080 --> 00:04:04.970
Do you just treat the API key as
a prebuilt token of a user name and

76
00:04:04.970 --> 00:04:07.140
password?
&gt;&gt; Scott Moss: How does this work with

77
00:04:07.140 --> 00:04:08.730
the API key style?
&gt;&gt; Mark: Yeah.

78
00:04:08.730 --> 00:04:09.860
&gt;&gt; Scott Moss: So API key

79
00:04:09.860 --> 00:04:11.430
is not the same thing as this.

80
00:04:11.430 --> 00:04:16.070
So, what we're talking about is user
authentication and stuff like that.

81
00:04:16.070 --> 00:04:22.450
API key is more like an application
identification and authorization.

82
00:04:22.450 --> 00:04:25.800
So API key is like I
have this API server and

83
00:04:25.800 --> 00:04:28.920
let's say it has,
I don't know, three clients.

84
00:04:28.920 --> 00:04:34.020
We have a web client, we have an Android
client, we also have a IOS client, right?

85
00:04:34.020 --> 00:04:38.460
So, in order to only allow requests
to come in from those three clients,

86
00:04:38.460 --> 00:04:40.940
we might make API keys for
those three clients.

87
00:04:40.940 --> 00:04:43.130
Maybe they all have their
own different API key,

88
00:04:43.130 --> 00:04:44.590
maybe there's just one API key, right?

89
00:04:45.680 --> 00:04:50.050
That's not the same as the JSON Web
Tokens, which are what the users would use

90
00:04:50.050 --> 00:04:52.310
once they were already
authorized on those clients.

91
00:04:52.310 --> 00:04:56.970
So, the JSON Web Tokens are for the users
or for any type of authentication you use,

92
00:04:56.970 --> 00:05:01.360
whereas an API key is like, I wanna
authorize this client to use this API.

93
00:05:01.360 --> 00:05:04.430
So, could you use a JSON Web Token for
an API key?

94
00:05:04.430 --> 00:05:06.620
Yeah, of course you can do that.

95
00:05:06.620 --> 00:05:08.820
But that's completely different
than what we're talking.

96
00:05:08.820 --> 00:05:11.100
You would put that, you would still
put that on the header too more or

97
00:05:11.100 --> 00:05:17.341
less.
&gt;&gt; Mark: And then someone else is asking

98
00:05:17.341 --> 00:05:21.900
for you to to talk about slugs and slugify
&gt;&gt; Scott Moss: Slugify is awesome.

99
00:05:21.900 --> 00:05:26.430
I'm not using slugify here, the only
reason I'm not using slugify here, there's

100
00:05:26.430 --> 00:05:31.050
actually a module in called slugify that,
for instance, you see the title of this

101
00:05:31.050 --> 00:05:35.450
blog post it's called ten reasons you
should love IE7 with space to limit it.

102
00:05:35.450 --> 00:05:39.610
But, if I click it, you look at the URL,
it's dash limit it.

103
00:05:39.610 --> 00:05:40.440
So that's a slug, right?

104
00:05:40.440 --> 00:05:43.040
You could totally do that on the back end,
but

105
00:05:43.040 --> 00:05:45.400
when I made this front end thing,
we didn't have a back end.

106
00:05:45.400 --> 00:05:47.120
The first few days we made
this it was all Angular, so

107
00:05:47.120 --> 00:05:48.380
I had to do this on the front end.

108
00:05:48.380 --> 00:05:50.820
But on the back end,
yes you would turn this into a slug.

109
00:05:50.820 --> 00:05:52.560
There are known models that
do it pretty easily, but

110
00:05:52.560 --> 00:05:56.580
if you're going to do it yourself the code
is actually in that Angular repo.

111
00:05:56.580 --> 00:06:01.290
But really all I did was just I just ran
it through a that looked for a space and

112
00:06:01.290 --> 00:06:03.570
replaced it with a dash, that's all I did.

113
00:06:03.570 --> 00:06:07.000
But, a proper slugify would probably
lowercase everything and stuff like that.

114
00:06:07.000 --> 00:06:10.385
But there are node models that do it, and
you should totally do that on database.

115
00:06:10.385 --> 00:06:14.561
And you should probably save the slug
in the database, on the model,

116
00:06:14.561 --> 00:06:19.249
next to the to all the other stuff on
the post, but again, we didn't do that.

117
00:06:19.249 --> 00:06:27.388
But yeah, you should totally do that.
&gt;&gt; Scott Moss: Any other questions?

118
00:06:27.388 --> 00:06:30.844
Yes, what do you got?
&gt;&gt; Speaker 4: Well, it's but.

119
00:06:30.844 --> 00:06:37.220
So, it's attaching that JSON Web Token
to every request, right?

120
00:06:37.220 --> 00:06:40.345
So, let's say you're requesting
to some other website.

121
00:06:40.345 --> 00:06:41.180
&gt;&gt; Scott Moss: Right.

122
00:06:41.180 --> 00:06:42.770
&gt;&gt; Speaker 4: And you

123
00:06:42.770 --> 00:06:44.260
provided some authorization header.

124
00:06:44.260 --> 00:06:47.380
You'd be overriding it
with the JSON Web Token,

125
00:06:47.380 --> 00:06:48.800
right?
&gt;&gt; Scott Moss: If

126
00:06:48.800 --> 00:06:51.480
you made a request to another website?
&gt;&gt; Speaker 4: And you're like,

127
00:06:51.480 --> 00:06:55.740
this website wants this authorization, so
you supply that, and then you send it.

128
00:06:55.740 --> 00:06:56.687
Well it's gonna

129
00:06:56.687 --> 00:06:59.140
intercept that reroute the JSON-
&gt;&gt; Scott Moss: Yeah.

130
00:06:59.140 --> 00:07:01.460
But you can turn it off on a route basis.

131
00:07:01.460 --> 00:07:04.024
I have it setup to where you
do like HTTP you consider-

132
00:07:04.024 --> 00:07:05.869
&gt;&gt; Speaker 4: You have to change the URL.

133
00:07:05.869 --> 00:07:06.371
&gt;&gt; Scott Moss: You can say,

134
00:07:06.371 --> 00:07:09.963
don't authenticate this problem.
&gt;&gt; Speaker 4: Okay, got you.

