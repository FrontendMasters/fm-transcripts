WEBVTT

1
00:00:00.000 --> 00:00:03.967
[MUSIC]

2
00:00:03.967 --> 00:00:04.940
&gt;&gt; Speaker 1: Question.

3
00:00:04.940 --> 00:00:08.590
If I was building a large application
with multiple application modules,

4
00:00:08.590 --> 00:00:12.590
should I wrote one monolithic node app, or
build multiple node apps with some sort of

5
00:00:12.590 --> 00:00:17.040
messaging between the modules?
&gt;&gt; Scott Moss: There's a new trend for

6
00:00:17.040 --> 00:00:20.330
everybody using a SOA,
a service oriented architecture.

7
00:00:20.330 --> 00:00:22.450
And where we have that set up,

8
00:00:22.450 --> 00:00:24.840
where everything is a service
that does just one small thing.

9
00:00:24.840 --> 00:00:26.590
And we have a messaging system,

10
00:00:26.590 --> 00:00:28.730
some queuing system where we
communicate between these two.

11
00:00:28.730 --> 00:00:31.500
Or maybe we build some
type of HTTP interface.

12
00:00:31.500 --> 00:00:35.340
So that's a thing that's trending,
and it's great, it's very flexible.

13
00:00:35.340 --> 00:00:36.760
I like that approach.

14
00:00:36.760 --> 00:00:41.210
But, at the same time having one,
huge monlithic node app,

15
00:00:41.210 --> 00:00:42.950
if that's where your skill level is.

16
00:00:42.950 --> 00:00:46.153
And that's where you know, if you're
talking about production I'd probably

17
00:00:46.153 --> 00:00:49.690
go soa, service order architecture, but
if you're talking about what's gonna build

18
00:00:49.690 --> 00:00:52.260
this pet thing so I can get a feel for
node, I would start there.

19
00:00:52.260 --> 00:00:52.870
I wouldn't go out and

20
00:00:52.870 --> 00:00:55.900
start building all of these micro
services everywhere for my to do app.

21
00:00:57.500 --> 00:00:58.640
I wouldn't do that.

22
00:00:58.640 --> 00:01:02.022
So, eventually, if you're talking about
production and scalability, yeah,

23
00:01:02.022 --> 00:01:05.306
you should have these independent things,
and they should just do one thing and

24
00:01:05.306 --> 00:01:06.790
they should do one thing very well.

25
00:01:06.790 --> 00:01:10.142
They should have a very clean interface,
whether that's through some type of

26
00:01:10.142 --> 00:01:14.060
queueing or messaging system, or through
HTTP, whatever protocol you choose.

27
00:01:14.060 --> 00:01:18.165
But yeah, that's definitely where
the world of backend is going,

28
00:01:18.165 --> 00:01:19.310
its going to that approach.

29
00:01:19.310 --> 00:01:21.580
For good reasons.
&gt;&gt; Speaker 3: Yeah it's nice for us.

30
00:01:21.580 --> 00:01:25.560
We have Wordpress on the front-end and
then our stats layer is on node and

31
00:01:25.560 --> 00:01:29.700
it's just you know if stats
goes down that goes down.

32
00:01:29.700 --> 00:01:32.110
You know you can just reboot stats.
&gt;&gt; Scott Moss: Exactly.

33
00:01:32.110 --> 00:01:34.710
&gt;&gt; Speaker 3: And Wordpress does its thing

34
00:01:34.710 --> 00:01:35.970
with caching and all that stuff.

35
00:01:35.970 --> 00:01:37.150
So the website is still up.

36
00:01:37.150 --> 00:01:40.590
But like okay you don't get
your progress tracking showing

37
00:01:40.590 --> 00:01:41.930
up.
&gt;&gt; Scott Moss: Yep.

38
00:01:41.930 --> 00:01:43.333
&gt;&gt; Speaker 3: Progress bar doesn't show

39
00:01:43.333 --> 00:01:44.900
up.
&gt;&gt; Scott Moss: Exactly.

40
00:01:44.900 --> 00:01:45.610
&gt;&gt; Speaker 3: It's nice to

41
00:01:46.650 --> 00:01:50.890
separate things into small areas of
concern in case something goes down or

42
00:01:50.890 --> 00:01:54.020
whatever, your app can fail gracefully.
&gt;&gt; Scott Moss: Exactly.

43
00:01:54.020 --> 00:01:55.200
That's really good.

44
00:01:55.200 --> 00:01:56.250
That's a really good point.

45
00:01:56.250 --> 00:01:57.960
So, that's a good point.

46
00:01:57.960 --> 00:02:00.870
But there's also overhead with
dealing with everything, so whatever

47
00:02:00.870 --> 00:02:05.690
works with you, do it but definitely
looking at least knowing where SOA is.

48
00:02:05.690 --> 00:02:10.120
And know how it works because ultimately
it came down to like where were you gonna

49
00:02:10.120 --> 00:02:12.150
build for
this production thing to start up.

50
00:02:12.150 --> 00:02:15.640
Probably be a service order architecture
or at least leaning towards it.

51
00:02:15.640 --> 00:02:19.360
I really wouldn't want to build this used
monolithic node app that's serving J

52
00:02:19.360 --> 00:02:23.036
templates with the angular application,
I think that just sounds horrible.

53
00:02:23.036 --> 00:02:26.458
Because then now, you have that huge
app that's serving a web app and

54
00:02:26.458 --> 00:02:30.057
then now you also just made an iPhone
app a month app with an Android app and

55
00:02:30.057 --> 00:02:33.180
it's talking to the API that's
also serving static assets.

56
00:02:33.180 --> 00:02:34.350
It's just a nightmare.

57
00:02:34.350 --> 00:02:38.910
So just don't do that.
&gt;&gt; Speaker 3: Are you using Rabbit MQ?

58
00:02:38.910 --> 00:02:40.531
&gt;&gt; Scott Moss: I've used Rabbit MQ for

59
00:02:40.531 --> 00:02:44.140
the messaging system
between those services.

60
00:02:44.140 --> 00:02:49.880
But lately I've been using PubNub,
which has been really cool.

61
00:02:49.880 --> 00:02:51.112
RabbitMQ is really great, too.

62
00:02:59.385 --> 00:03:01.228
&gt;&gt; Scott Moss: Anything else here?

63
00:03:01.228 --> 00:03:02.972
&gt;&gt; Speaker 4: Asking if I missed

64
00:03:02.972 --> 00:03:05.544
any questions.
&gt;&gt; Scott Moss: All right

65
00:03:05.544 --> 00:03:06.690
&gt;&gt; Speaker 4: Give them

66
00:03:06.690 --> 00:03:10.295
a few seconds to catch up.

67
00:03:10.295 --> 00:03:10.802
&gt;&gt; Scott Moss: Anybody have any questions,
here?

68
00:03:10.802 --> 00:03:11.480
As far as the deployment.

69
00:03:11.480 --> 00:03:14.168
I kind of went there kind of fast, but,

70
00:03:14.168 --> 00:03:18.010
I'm glad I got to show you,
like the gotchas.

71
00:03:18.010 --> 00:03:19.600
In that deployment.

72
00:03:19.600 --> 00:03:22.550
So I forgot the whole master branch stuff,
I actually forgot about that one.

73
00:03:22.550 --> 00:03:23.740
So it was great that we did that.

74
00:03:24.820 --> 00:03:27.000
Well, it was actually pretty
simple as far as deployment goes.

75
00:03:27.000 --> 00:03:32.590
Most services aren't that simple
like Azure, kinda simple,

76
00:03:32.590 --> 00:03:36.900
AWS is definitely not that simple,
but most of them are pretty easy.

77
00:03:36.900 --> 00:03:41.490
Heroku is probably the easiest.
&gt;&gt; Speaker 1: Did you say PubNub or

78
00:03:41.490 --> 00:03:42.820
Pubnode?
&gt;&gt; Scott Moss: PubNub.

79
00:03:44.110 --> 00:03:47.980
It's a real time.
&gt;&gt; Speaker 1: Global data stream network?

80
00:03:47.980 --> 00:03:49.130
Is that what-
&gt;&gt; Scott Moss: Yes.

81
00:03:49.130 --> 00:03:50.540
Real time thing.

82
00:03:50.540 --> 00:03:51.740
This thing right here.

83
00:03:53.030 --> 00:03:55.590
When I first used PubNub
it changed my life.

84
00:03:55.590 --> 00:03:57.190
I didn't even use HTTP anymore.

85
00:03:58.410 --> 00:04:00.360
Now I'm going back to HTTP
making HTTP requests and

86
00:04:00.360 --> 00:04:01.790
it's like I don't even
want to do it anymore.

87
00:04:01.790 --> 00:04:03.670
I just want to put everything on PubNub.

88
00:04:03.670 --> 00:04:06.250
And in fact I actually built an app for

89
00:04:06.250 --> 00:04:09.330
a client a while ago where everything
is just PubNub, there is no HTTP.

90
00:04:09.330 --> 00:04:10.672
Everything's just real time,

91
00:04:10.672 --> 00:04:15.684
even the authentication.
&gt;&gt; Speaker 1: Do

92
00:04:15.684 --> 00:04:19.370
you use Engine X for static files?
&gt;&gt; Scott Moss: Exact, yeah,

93
00:04:19.370 --> 00:04:19.930
that's perfect.

94
00:04:19.930 --> 00:04:22.050
So putting a proxy on top of your express.

95
00:04:22.050 --> 00:04:26.630
So if you had an express web server
whose job was to serve static assets,

96
00:04:26.630 --> 00:04:28.690
then putting a proxy in front of it,
one line Nginx,

97
00:04:28.690 --> 00:04:31.590
which works very well with Node,
yeah, that'd be great.

98
00:04:31.590 --> 00:04:35.300
Because now your API doesn't have to get
hit just to serve some static assets,

99
00:04:35.300 --> 00:04:36.740
whereas Nginx could.

100
00:04:36.740 --> 00:04:40.820
So yeah it's really great,
I think Heroku has NginX support built in,

101
00:04:40.820 --> 00:04:45.030
because Heroku is just AWS
with more money on top of it.

102
00:04:45.030 --> 00:04:48.150
And [LAUGH], and then AWS allows you to
host your own NginX which is pretty cool.

103
00:04:48.150 --> 00:04:50.330
So yeah I do recommend using NginX For

104
00:04:50.330 --> 00:04:54.339
those static assets to save the heavy
lifting for the API calls, and

105
00:04:54.339 --> 00:04:58.723
not just assets itself.
&gt;&gt; Scott Moss: And

106
00:04:58.723 --> 00:05:04.834
it's pretty easy to set that up in Nginx.
&gt;&gt; Speaker 1: Any recommendations for

107
00:05:04.834 --> 00:05:09.030
a style guide or code quality checkers?
&gt;&gt; Scott Moss: Yeah.

108
00:05:09.030 --> 00:05:12.760
For sure jscs, that's all you need.

109
00:05:14.690 --> 00:05:16.420
This is like the bees knees.

110
00:05:16.420 --> 00:05:17.420
So this one's really good.

111
00:05:17.420 --> 00:05:22.250
Like, not only will it like look
deep into your code for style guide,

112
00:05:22.250 --> 00:05:23.880
it will actually change the code for you.

113
00:05:25.070 --> 00:05:27.760
You're like you actually meant
to indent two, let me do it for

114
00:05:27.760 --> 00:05:29.310
you it'll change it for you.

115
00:05:29.310 --> 00:05:31.080
It's ridiculous, the jscs,

116
00:05:31.080 --> 00:05:35.500
JavaScript I don't know what does
that say, code style, there you go.

117
00:05:35.500 --> 00:05:39.020
JavaScript Code Style and then what's
really cool is they have these rules, or

118
00:05:39.020 --> 00:05:41.890
I'm sorry, where's the page?

119
00:05:41.890 --> 00:05:45.910
They have these style guides,
these presets that are built in so

120
00:05:45.910 --> 00:05:50.340
like big popular companies like Air BnB
which arguably has the best java script or

121
00:05:50.340 --> 00:05:53.060
the most well-known java
script style guide out there.

122
00:05:53.060 --> 00:05:55.480
You can just use their presets
built into your config.

123
00:05:55.480 --> 00:05:59.005
So you can you just start writing
code like Airbnb or Google or

124
00:05:59.005 --> 00:06:00.760
whoever you want or you can make your own.

125
00:06:00.760 --> 00:06:02.300
JQuery, style guide,
they got all that stuff.

126
00:06:02.300 --> 00:06:03.670
So this is the best one.

127
00:06:03.670 --> 00:06:07.330
But it also it doesn't follow all
the rules you might get out of something

128
00:06:07.330 --> 00:06:12.600
like jshint So I recommend using this in
combination with something like ES lint,

129
00:06:12.600 --> 00:06:14.090
which is like JS Hint, but

130
00:06:14.090 --> 00:06:18.270
just newer and it allows you to do
things with ES6 and things like that.

131
00:06:18.270 --> 00:06:21.390
So a combination of
those two will be great.

132
00:06:21.390 --> 00:06:24.490
And of course the style guide
I do recommend is Airbnb.

133
00:06:24.490 --> 00:06:26.030
They just have a really good style guide.

134
00:06:26.030 --> 00:06:29.500
They just updated it to ES 2015,
which is great.

135
00:06:29.500 --> 00:06:32.650
They still have a reference for
ES 2005 back here, but

136
00:06:32.650 --> 00:06:36.930
as you can see it has 22,000 stars,
so it's a pretty good style guide.

137
00:06:36.930 --> 00:06:44.274
Highly recommend it.
&gt;&gt; Speaker 1: What

138
00:06:44.274 --> 00:06:45.640
protocol is PubNub using?

139
00:06:45.640 --> 00:06:49.620
Is it Web Sockets?
&gt;&gt; Scott Moss: It uses whatever is

140
00:06:49.620 --> 00:06:51.610
the best one available on the platform.

141
00:06:51.610 --> 00:06:56.760
So, because of that you could use
PubNub on a tv, a smart watch,

142
00:06:56.760 --> 00:06:59.540
an internet of things.

143
00:06:59.540 --> 00:07:03.810
Whatever is the best for
what it's on, it will use that.

144
00:07:03.810 --> 00:07:07.370
So it'll also do like multiplexing
on a single TCP connection.

145
00:07:07.370 --> 00:07:10.860
So like if you were on the latest and
greatest, it would use Web Sockets.

146
00:07:10.860 --> 00:07:14.533
If you were like on a Samsung TV, it might
just do long polling It depends on what

147
00:07:14.533 --> 00:07:17.275
environment it runs on,
which is really, really great.

148
00:07:25.828 --> 00:07:27.495
&gt;&gt; Speaker 1: Are using socket diet.IO, or

149
00:07:27.495 --> 00:07:29.800
some other socket library?
&gt;&gt; Scott Moss: Yeah,

150
00:07:29.800 --> 00:07:32.282
if I input the sockets myself,
which is rare these days,

151
00:07:32.282 --> 00:07:34.540
socket.IO is definitely the way to go.

152
00:07:34.540 --> 00:07:36.520
It's probably the best one out there.

153
00:07:36.520 --> 00:07:38.130
And there's so many wrappers for it.

154
00:07:38.130 --> 00:07:40.290
So yeah, if I were doing sockets myself,
I'd use that.

155
00:07:42.120 --> 00:07:45.867
It's pretty straightforward and
really well documented and

156
00:07:45.867 --> 00:07:52.955
pretty much well-known.
&gt;&gt; Speaker 5: If

157
00:07:52.955 --> 00:07:55.870
you run into a node performance issue,
how do you debug it?

158
00:07:55.870 --> 00:07:59.634
Is there any specific tools you use?
&gt;&gt; Scott Moss: There is a node profiler

159
00:08:06.799 --> 00:08:08.252
&gt;&gt; Scott Moss: I forgot the name of this

160
00:08:08.252 --> 00:08:08.910
company.

161
00:08:11.220 --> 00:08:12.160
Let me see.

162
00:08:13.620 --> 00:08:15.480
PM 2, PM 2, that's what it is.

163
00:08:15.480 --> 00:08:17.930
Node PM 2, how could I forget that.

164
00:08:17.930 --> 00:08:21.330
So yeah, these guys are all
about production in Node.

165
00:08:21.330 --> 00:08:22.696
And all types of stuff.

166
00:08:22.696 --> 00:08:28.580
So they have dashboards and stuff
where you can monitor all this stuff.

167
00:08:28.580 --> 00:08:31.030
And all types of open source
modules to help you with that.

168
00:08:31.030 --> 00:08:34.410
And most deployment platforms you
go to offer node monitoring and

169
00:08:34.410 --> 00:08:35.430
performance stuff like that.

170
00:08:35.430 --> 00:08:40.319
Like Heroku not so much compared
to other stuff but if you went to

171
00:08:40.319 --> 00:08:44.910
nodejitsu which is a node
only hosting service.

172
00:08:47.660 --> 00:08:51.750
I've never used them but I'm guessing
they might have something like that.

173
00:08:51.750 --> 00:08:53.300
But yeah these guys right here.

174
00:08:53.300 --> 00:08:54.660
Keymetrics.

175
00:08:54.660 --> 00:08:56.860
They're pretty much on point on that.

176
00:08:56.860 --> 00:08:59.318
And they have again,
open source stuff to help you look at that

177
00:08:59.318 --> 00:09:03.647
stuff.
&gt;&gt; Speaker 1: Can you give some

178
00:09:03.647 --> 00:09:06.320
recommendations on how to
handle errors in production?

179
00:09:06.320 --> 00:09:07.960
&gt;&gt; Scott Moss: Yeah, good question.

180
00:09:07.960 --> 00:09:13.180
Man, I have so many tabs open.
&gt;&gt; Speaker 1: Somebody just sent

181
00:09:13.180 --> 00:09:17.748
the link for a program called One Tab.
&gt;&gt; Scott Moss: Aw,

182
00:09:17.748 --> 00:09:20.420
thanks, One Tab.
&gt;&gt; Speaker 3: One Tab is sweet,

183
00:09:20.420 --> 00:09:23.260
yeah.
&gt;&gt; Scott Moss: That just have one tab?

184
00:09:23.260 --> 00:09:24.530
&gt;&gt; Speaker 3: Well, One Tab,

185
00:09:24.530 --> 00:09:26.460
it's a Chrome extension.
&gt;&gt; Scott Moss: Yeah.

186
00:09:26.460 --> 00:09:27.420
&gt;&gt; Speaker 3: And you press it,

187
00:09:27.420 --> 00:09:29.580
and it like takes all your tabs and

188
00:09:29.580 --> 00:09:33.280
puts it into like a list.
&gt;&gt; Scott Moss: Okay.

189
00:09:33.280 --> 00:09:34.110
&gt;&gt; Speaker 3: And so you can just

190
00:09:35.550 --> 00:09:38.320
like refer to it later.
&gt;&gt; Scott Moss: Got it, got it.

191
00:09:38.320 --> 00:09:39.910
&gt;&gt; Speaker 3: It becomes your start page

192
00:09:39.910 --> 00:09:44.450
as you can see like all those
stuff that you have in progress or

193
00:09:44.450 --> 00:09:45.490
whatever.
&gt;&gt; Scott Moss: I'll have to look it up.

194
00:09:45.490 --> 00:09:49.160
So error handling production, we kind
of did some of the good stuff already.

195
00:09:49.160 --> 00:09:52.390
That setting up global middleware that
whatever we call it next we know for

196
00:09:52.390 --> 00:09:53.090
sure it'll go here.

197
00:09:53.090 --> 00:09:56.400
So this is like a try catch
of our server almost.

198
00:09:56.400 --> 00:09:58.133
The other thing is we can
just wrap the entire file in

199
00:09:58.133 --> 00:09:59.280
a try catch, no don't do that.

200
00:09:59.280 --> 00:10:01.557
I was gonna see if anyone.
&gt;&gt; Speaker 3: [LAUGH]

201
00:10:01.557 --> 00:10:02.200
&gt;&gt; Scott Moss: No don't do that.

202
00:10:02.200 --> 00:10:06.230
Don't wrap your file in a try catch,
I've seen people do that, like just don't.

203
00:10:06.230 --> 00:10:08.330
It's like I'll just wrap this
whole thing in a try catch.

204
00:10:08.330 --> 00:10:09.460
No, don't do that.

205
00:10:09.460 --> 00:10:12.970
There's this thing in node called man.

206
00:10:12.970 --> 00:10:16.710
I don't know the name of it because
I don't think anybody even uses it.

207
00:10:17.740 --> 00:10:21.500
Pretty much what we've been doing
is just like, if you try catch

208
00:10:21.500 --> 00:10:24.905
this synchronous execution of
code to help prevent the errors.

209
00:10:24.905 --> 00:10:26.580
If you for instance, signing a token.

210
00:10:26.580 --> 00:10:28.770
You should try catch that stuff.

211
00:10:28.770 --> 00:10:32.210
And then for asynchronous stuff which is
probably happening inside of a call back.

212
00:10:32.210 --> 00:10:33.950
Just make sure you call it next.

213
00:10:33.950 --> 00:10:35.300
That right there is gonna get you far.

214
00:10:35.300 --> 00:10:39.700
Also you can tap into the events in Node.

215
00:10:39.700 --> 00:10:47.499
So when Node is getting ready to
shut down, like process.on(exit).

216
00:10:47.499 --> 00:10:51.670
So this like Node is about to shut down,
maybe it was for an error or something.

217
00:10:51.670 --> 00:10:54.700
You can do stuff here I would say,
you should probably restart it, but

218
00:10:54.700 --> 00:10:56.940
it's probably shutting down for a good
reason, so you don't want to restart it.

219
00:10:56.940 --> 00:10:59.270
But, you could at least
see what's going on.

220
00:10:59.270 --> 00:11:02.420
But, yeah, as long as you're just like
aware of where the errors might happen,

221
00:11:02.420 --> 00:11:06.700
and preparing for those things,
you should be fine.

222
00:11:06.700 --> 00:11:11.890
There are better ways, like there's this
thing called, and it's actually from PM 2.

223
00:11:11.890 --> 00:11:14.130
I want to say PM 2 Forever.

224
00:11:14.130 --> 00:11:18.610
I don't know the name of it.

225
00:11:18.610 --> 00:11:20.020
Wait, here we go.

226
00:11:21.310 --> 00:11:22.590
Well I guess PM2 or forever.

227
00:11:22.590 --> 00:11:27.360
So these are other the things that
will run your node server forever.

228
00:11:27.360 --> 00:11:28.080
It just won't stop it.

229
00:11:28.080 --> 00:11:30.420
If something happens,
it'll just put it back up.

230
00:11:30.420 --> 00:11:32.451
It's like node mod for production almost.

231
00:11:32.451 --> 00:11:33.790
&gt;&gt; Speaker 3: Forever.
&gt;&gt; Scott Moss: Forever.

232
00:11:33.790 --> 00:11:34.720
&gt;&gt; Speaker 3: We use forever.

233
00:11:34.720 --> 00:11:36.630
&gt;&gt; Scott Moss: There, they use forever,

234
00:11:36.630 --> 00:11:40.470
there you go.
&gt;&gt; Speaker 3: So anytime that, yeah,

235
00:11:40.470 --> 00:11:42.930
an exception happens,
it would just log it to a file and

236
00:11:42.930 --> 00:11:46.170
then restart the server.
&gt;&gt; Scott Moss: Right.

237
00:11:46.170 --> 00:11:47.280
&gt;&gt; Speaker 3: What about Node Debugger and

238
00:11:47.280 --> 00:11:49.300
that kind of stuff?
&gt;&gt; Scott Moss: So-

239
00:11:49.300 --> 00:11:50.322
&gt;&gt; Speaker 3: Is that kind of-

240
00:11:50.322 --> 00:11:52.003
&gt;&gt; Scott Moss: I don't like Node Debugger

241
00:11:52.003 --> 00:11:53.860
cuz I think it's really bad.

242
00:11:53.860 --> 00:11:57.610
But I think I told you guys
about these debugger on step,

243
00:11:57.610 --> 00:11:59.690
on day one right, the node inspector?

244
00:12:00.940 --> 00:12:06.920
So, if you're going to debug anything,
inspector.

245
00:12:06.920 --> 00:12:09.100
I would just run node inspector.

246
00:12:09.100 --> 00:12:11.040
You have to run it again to file, I guess.

247
00:12:12.120 --> 00:12:12.660
Yeah.

248
00:12:12.660 --> 00:12:14.215
So, if you run node
inspector against like.

249
00:12:14.215 --> 00:12:16.949
Lets say, index.js.

250
00:12:16.949 --> 00:12:20.950
Right, it'll give you this
URL that you can hit.

251
00:12:20.950 --> 00:12:22.075
And it'll go to like Chrome.

252
00:12:22.075 --> 00:12:23.050
Put this in Chrome.

253
00:12:23.050 --> 00:12:26.731
I think I showed you guys this earlier.

254
00:12:26.731 --> 00:12:29.284
And it'll load up Chrome Dev Tools.

255
00:12:29.284 --> 00:12:31.070
Allow you to go through the code and
stuff.

256
00:12:32.130 --> 00:12:34.819
So, but, I'm gonna cancel that logger.

257
00:12:34.819 --> 00:12:38.500
That's just me, I just log everything.

258
00:12:38.500 --> 00:12:39.210
That's just how it is.

259
00:12:39.210 --> 00:12:40.790
Sometimes I get to the point
where I'm just like,

260
00:12:40.790 --> 00:12:42.890
I'm just going to start logging stuff
to a file to go look at the file.

261
00:12:42.890 --> 00:12:45.540
I just like reading through the logs
better than having to debug.

262
00:12:45.540 --> 00:12:49.060
Which is weird, because on the client,
I do use the debugger, extensively.

263
00:12:49.060 --> 00:12:49.980
But on node, I just hate using it.

264
00:12:49.980 --> 00:12:50.810
I don't know why.

