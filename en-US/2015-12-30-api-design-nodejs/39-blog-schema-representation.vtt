WEBVTT

1
00:00:00.000 --> 00:00:03.696
[MUSIC]

2
00:00:03.696 --> 00:00:06.099
&gt;&gt; Speaker 1: So now that we know
a little bit about creating schemas, and

3
00:00:06.099 --> 00:00:08.130
I say a little bit,
I mean it's just a little bit.

4
00:00:08.130 --> 00:00:09.760
There's way more to this.

5
00:00:09.760 --> 00:00:11.740
But again, that's a whole separate thing.

6
00:00:11.740 --> 00:00:15.510
I could talk about Mongo and
Mongoose for a week.

7
00:00:15.510 --> 00:00:17.900
We know just enough to
get started with our API.

8
00:00:17.900 --> 00:00:22.300
So now that we do know that much,
we'll use JSON

9
00:00:22.300 --> 00:00:25.760
again to blueprint how our resources
are gonna look just like we did before.

10
00:00:25.760 --> 00:00:29.600
So remember we've got three resources,
users, posts and categories.

11
00:00:29.600 --> 00:00:32.570
So I wrote some JSON down here to
let you see what that looks like.

12
00:00:34.500 --> 00:00:38.910
So users, for now, all they have
are user names, that's it, and

13
00:00:38.910 --> 00:00:39.950
they have to be unique.

14
00:00:39.950 --> 00:00:43.050
So here's an example what
a user resource will look like.

15
00:00:43.050 --> 00:00:44.720
So an object with a user name and
a string.

16
00:00:47.555 --> 00:00:51.036
Posts, they have a few things,
four things actually.

17
00:00:51.036 --> 00:00:52.066
So they have a title and

18
00:00:52.066 --> 00:00:55.655
if you just look at the value you can kind
of figure out what its type is, right?

19
00:00:55.655 --> 00:00:56.870
This is obviously a string.

20
00:00:58.210 --> 00:01:01.850
It has text, so this is
the actually text of the blog post.

21
00:01:01.850 --> 00:01:03.850
If you look at the value,
it's obviously a string.

22
00:01:05.610 --> 00:01:06.960
Author property, so

23
00:01:06.960 --> 00:01:12.600
the person who wrote this, if you look at
this then, it's obviously an object ID.

24
00:01:12.600 --> 00:01:14.040
That's it's type, it's object ID.

25
00:01:16.170 --> 00:01:22.168
We have an array that's called categories,
which is spelled wrong, but categories,

26
00:01:22.168 --> 00:01:27.770
and it is an array, a type of array, that
has types of objects IDs inside of it.

27
00:01:27.770 --> 00:01:29.041
So it an array of object IDs.

28
00:01:33.606 --> 00:01:36.190
&gt;&gt; Speaker 1: So we went over that so
object IDs are this type and

29
00:01:36.190 --> 00:01:39.800
we already told you in arrays you
can put whatever you want in there.

30
00:01:42.775 --> 00:01:44.155
&gt;&gt; Speaker 1: So
looking at these blueprints,

31
00:01:44.155 --> 00:01:47.470
just looking at the data that we spent
out, you kinda know what these types are.

32
00:01:47.470 --> 00:01:54.010
And then for categories, all it has is
a name, and it's a string, obviously.

33
00:01:54.010 --> 00:01:55.510
And it has to be unique.

34
00:01:55.510 --> 00:01:57.240
So a category is a name and
it has be unique,

35
00:01:57.240 --> 00:01:59.590
you can't have more than one
category with the same name.

36
00:01:59.590 --> 00:02:00.510
Doesn't make sense to do that.

37
00:02:01.560 --> 00:02:02.680
User names must be unique.

38
00:02:04.370 --> 00:02:08.040
Titles and posts,
I guess they should be unique,

39
00:02:08.040 --> 00:02:09.790
you shouldn't have two blog
posts with the same title.

40
00:02:09.790 --> 00:02:11.316
I don't know why you would do that.

41
00:02:14.696 --> 00:02:17.749
&gt;&gt; Speaker 1: The blog post content,
I don't think that needs to be unique.

42
00:02:19.080 --> 00:02:21.790
I guess you could if you want to
stop somebody from writing the same

43
00:02:21.790 --> 00:02:25.050
blog post twice with a different title,
I guess you could do that.

44
00:02:25.050 --> 00:02:25.820
It's up to you.

45
00:02:25.820 --> 00:02:28.320
But then the two important ones are,
these are object IDs.

46
00:02:32.750 --> 00:02:34.120
And if you wanted to you can go ahead and

47
00:02:34.120 --> 00:02:38.790
add metadata on there if you want to like
last seen, updated at career dot, although

48
00:02:38.790 --> 00:02:44.200
I'm pretty sure Mongoose should put that
stuff on there, at least I thought I did.

49
00:02:44.200 --> 00:02:47.105
I thought I put the updated or
created at properties and stuff on there.

50
00:02:47.105 --> 00:02:47.750
I think it does.

51
00:02:47.750 --> 00:02:50.346
I don't think it's showing
up in Mongo though.

52
00:02:51.886 --> 00:02:54.309
&gt;&gt; Speaker 1: So looking at the actual
values of the adjacent above,

53
00:02:54.309 --> 00:02:55.996
we can infer what type of properties,

54
00:02:55.996 --> 00:02:59.170
or what type their properties
are when we're creating our schemas.

55
00:02:59.170 --> 00:03:01.870
So again, when we start creating
these schemas if you get lost and

56
00:03:01.870 --> 00:03:03.250
you're like what's this type again?

57
00:03:03.250 --> 00:03:05.730
Just come look at the value and
just read it like, that's a string,

58
00:03:05.730 --> 00:03:08.510
that's a string, these are object IDs,
these are strings.

59
00:03:12.066 --> 00:03:13.990
&gt;&gt; Speaker 1: So any questions on that?

60
00:03:15.050 --> 00:03:15.670
Cuz now you're about.

61
00:03:15.670 --> 00:03:16.692
Yeah?
&gt;&gt; Speaker 2: We have a bunch kinda

62
00:03:16.692 --> 00:03:17.266
rolling in here.

63
00:03:17.266 --> 00:03:17.806
&gt;&gt; Speaker 1: Okay.

64
00:03:17.806 --> 00:03:21.805
&gt;&gt; Speaker 2: One question was
about what about using things like

65
00:03:21.805 --> 00:03:26.736
using node-uuid to namespace things,
so I think his idea is,

66
00:03:26.736 --> 00:03:31.666
instead of using the built-in
object ID that they're using,

67
00:03:31.666 --> 00:03:35.126
can you tell it how to
format that object ID?

68
00:03:36.280 --> 00:03:39.340
&gt;&gt; Speaker 1: I don't know of a way of how
you can tell it to format the object ID,

69
00:03:39.340 --> 00:03:42.740
but there's nothing stopping you
from using node-uuid to attach

70
00:03:42.740 --> 00:03:46.050
another ID to your schema and index that.

71
00:03:46.050 --> 00:03:47.558
So there's nothing wrong with that.

72
00:03:47.558 --> 00:03:51.920
It's weird cuz like I had this
conversation with like five people

73
00:03:51.920 --> 00:03:55.940
like a week ago, the same thing, and I
wanted to know what there concerns are as

74
00:03:55.940 --> 00:03:59.370
far as like having another unique
identifier other then an object ID.

75
00:03:59.370 --> 00:04:04.360
Cuz I can't think of like something that
would concern me but they obviously know

76
00:04:04.360 --> 00:04:06.950
something that I don't know so
I wanna know what they're thinking so

77
00:04:06.950 --> 00:04:09.330
I would love to talk to that
person who made that question.

78
00:04:10.340 --> 00:04:12.560
Any other questions?

79
00:04:12.560 --> 00:04:16.030
&gt;&gt; Speaker 2: I think I'm not
sure I understand this one maybe,

80
00:04:16.030 --> 00:04:19.790
can you specify a type object ID for
a particular collection?

81
00:04:21.220 --> 00:04:24.270
Like an author needs an object ID
that belongs to a user document?

82
00:04:26.160 --> 00:04:33.060
&gt;&gt; Speaker 1: So an author needs, can
you specify a type object ID to a what?

83
00:04:33.060 --> 00:04:34.530
&gt;&gt; Speaker 2: Particular collection.

84
00:04:34.530 --> 00:04:35.600
&gt;&gt; Speaker 1: To a particular collection.

85
00:04:38.936 --> 00:04:42.160
&gt;&gt; Speaker 1: I'm not too sure if I follow
you or if I'm just over thinking it,

86
00:04:42.160 --> 00:04:44.665
but a type object ID to
a particular collection.

87
00:04:44.665 --> 00:04:50.100
&gt;&gt; Speaker 2: They might be asking can
you specify the types of a collection?

88
00:04:50.100 --> 00:04:51.790
Collection of authors.

89
00:04:51.790 --> 00:04:54.810
&gt;&gt; Speaker 1: No,
a collection itself is not a type.

90
00:04:56.180 --> 00:04:58.687
So the only types, so
you have all the built-in,

91
00:04:58.687 --> 00:05:03.108
well most of the built-in JavaScript
types, so string, number, boolean, buffer,

92
00:05:03.108 --> 00:05:05.040
those are all built in to JavaScript.

93
00:05:05.040 --> 00:05:08.535
But then you have the types that
are built in to Mongoose which belong

94
00:05:08.535 --> 00:05:10.757
in the mongoose.schema.types object.

95
00:05:10.757 --> 00:05:14.016
There's object ID,
there's one that's called mixed,

96
00:05:14.016 --> 00:05:16.220
which means a smorgasbord of any type.

97
00:05:16.220 --> 00:05:21.570
But I'm pretty sure you cannot just say I
want the owner to be the type of owner,

98
00:05:21.570 --> 00:05:23.205
or something like that.

99
00:05:23.205 --> 00:05:26.680
The way you do that is you pass in
an object ID, what they reference,

100
00:05:26.680 --> 00:05:28.630
to the collection that it belongs to.

101
00:05:28.630 --> 00:05:31.540
But you can't just say owner right here.

102
00:05:33.410 --> 00:05:34.370
If that was the question, I think.

103
00:05:39.266 --> 00:05:42.120
&gt;&gt; Speaker 2: Can you add custom
functions to your models?

104
00:05:42.120 --> 00:05:44.240
&gt;&gt; Speaker 1: Yes, we're gonna
get there when we get to query.

105
00:05:44.240 --> 00:05:47.100
So you can totally do that.

106
00:05:47.100 --> 00:05:50.431
&gt;&gt; Speaker 2: Is there a possibility
of object ID collisions,

107
00:05:50.431 --> 00:05:53.936
if you have MongoDB running
on multiple machines?

108
00:05:53.936 --> 00:05:56.992
&gt;&gt; Speaker 1: If you have MongoDB running
on multiple issues, if you have the same

109
00:05:56.992 --> 00:06:00.117
database running on multiple machines,
then I think you're fine.

110
00:06:00.117 --> 00:06:01.698
Yes.

111
00:06:01.698 --> 00:06:07.019
&gt;&gt; Speaker 2: If you want to change
your scheme, is that it, schema,

112
00:06:07.019 --> 00:06:14.650
do you have to kind of re-spin all
your current data into the new schema?

113
00:06:14.650 --> 00:06:16.835
&gt;&gt; Speaker 1: Yeah.
I thought you were just referring to code

114
00:06:16.835 --> 00:06:17.913
advisory question, and

115
00:06:17.913 --> 00:06:20.749
I thought you were referring to
the question I was talking about.

116
00:06:20.749 --> 00:06:22.784
So yeah,
as far as the object ID collision,

117
00:06:22.784 --> 00:06:26.689
no, if you have Mongo running on, the same
database running on multiple machines,

118
00:06:26.689 --> 00:06:29.830
I guess maybe you, I dunno,
you shredded your database, maybe?

119
00:06:29.830 --> 00:06:30.780
&gt;&gt; Speaker 2: Yeah,
that's what they're asking.

120
00:06:30.780 --> 00:06:31.770
&gt;&gt; Speaker 1: Is that
what they're asking for?

121
00:06:31.770 --> 00:06:32.589
No, you should be fine.

122
00:06:33.630 --> 00:06:35.820
So I don't think you'll
have a problem with it.

123
00:06:35.820 --> 00:06:38.660
&gt;&gt; Speaker 2: Then they're thinking like
if you're using that as your user ID

124
00:06:38.660 --> 00:06:41.660
identifier, if you have Catastrophic.

125
00:06:41.660 --> 00:06:42.579
&gt;&gt; Speaker 1: No, you should be fine.
&gt;&gt; Speaker 2: Okay.

126
00:06:42.579 --> 00:06:44.239
&gt;&gt; Speaker 1: Yeah, you should be fine.

127
00:06:44.239 --> 00:06:47.737
What you were saying is, if you
change the schema do you have to, so

128
00:06:47.737 --> 00:06:49.930
you were talking about like a migration.

129
00:06:49.930 --> 00:06:51.176
Do I have to take everything out and put.

130
00:06:51.176 --> 00:06:52.276
&gt;&gt; Speaker 2: Like my
business lives are changed.

131
00:06:52.276 --> 00:06:53.336
&gt;&gt; Speaker 1: No, it's fine.

132
00:06:53.336 --> 00:06:57.155
It's just, if you change your schema,
and you already have data that was using

133
00:06:57.155 --> 00:07:00.970
the old schema, right, it's not going
to go re-validate all that stuff.

134
00:07:00.970 --> 00:07:02.170
It's not gonna be like,

135
00:07:02.170 --> 00:07:04.820
now this old data's not following
the same validation, right?

136
00:07:04.820 --> 00:07:06.030
That may be good or bad.

137
00:07:06.030 --> 00:07:06.800
I'm not sure.

138
00:07:06.800 --> 00:07:07.760
&gt;&gt; Speaker 2: It just sits there.

139
00:07:07.760 --> 00:07:08.510
&gt;&gt; Speaker 1: It'll just sit there.

140
00:07:08.510 --> 00:07:09.460
So you gotta go.

141
00:07:09.460 --> 00:07:11.700
&gt;&gt; Speaker 2: It's only data
coming in that it validates.

142
00:07:11.700 --> 00:07:12.560
&gt;&gt; Speaker 1: Right, right.

143
00:07:13.920 --> 00:07:14.620
There's no migration.

144
00:07:15.790 --> 00:07:18.370
So you can mainly set up
migration if you wanted to.

145
00:07:18.370 --> 00:07:20.520
Or, I mean,
a good thing is like having replication.

146
00:07:20.520 --> 00:07:22.930
And you do stuff with the replicated set,
so.

147
00:07:22.930 --> 00:07:23.430
Okay.

148
00:07:24.640 --> 00:07:28.540
&gt;&gt; Speaker 3: Another question was, they
wanted to know if you've tried Orion DB,

149
00:07:28.540 --> 00:07:30.210
and they'd like to hear
your opinion on it.

150
00:07:30.210 --> 00:07:31.960
&gt;&gt; Speaker 1: I haven't tried Orion DB,

151
00:07:31.960 --> 00:07:34.870
it's literally like number three
on my list of things to do.

152
00:07:34.870 --> 00:07:38.080
So I don't have any opinion on it
other than if it's on my list,

153
00:07:38.080 --> 00:07:42.235
then it must be really good cuz I
only put good things on my list.

154
00:07:42.235 --> 00:07:43.016
[LAUGH] So I wanna check it out.

155
00:07:43.016 --> 00:07:43.816
I don't have any opinions.

156
00:07:43.816 --> 00:07:46.056
If anyone else has used it before I
would like to know because I heard

157
00:07:46.056 --> 00:07:46.616
it was awesome.

158
00:07:46.616 --> 00:07:56.376
&gt;&gt; [NOISE]
&gt;&gt; Speaker 1: Is that it?

159
00:07:56.376 --> 00:07:57.636
We all caught up?

160
00:07:57.636 --> 00:07:59.415
&gt;&gt; Speaker 2: I think so.

161
00:07:59.415 --> 00:08:03.607
They're just mentioning MongoDB doesn't
scale well horizontally so that's,

162
00:08:03.607 --> 00:08:06.716
I guess you wouldn't be doing
that is what they're saying?

163
00:08:06.716 --> 00:08:09.436
&gt;&gt; Speaker 1: I mean,
I guess you could say that.

164
00:08:09.436 --> 00:08:12.340
But it all comes down to like, yeah,

165
00:08:12.340 --> 00:08:16.480
relatively speaking it doesn't,
yeah, I agree.

166
00:08:16.480 --> 00:08:19.655
But that doesn't mean
it doesn't do it well,

167
00:08:19.655 --> 00:08:21.214
just if you compare it to other things.

168
00:08:23.444 --> 00:08:26.564
It's not meant for everything,
[LAUGH] so I'll just say that.

169
00:08:26.564 --> 00:08:30.464
I'm not defending Mongo but I'm also not
pushing it down anybody's throat, but

170
00:08:30.464 --> 00:08:31.614
it's definitely not meant for everything.

