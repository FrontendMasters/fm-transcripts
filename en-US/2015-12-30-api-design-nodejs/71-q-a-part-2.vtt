WEBVTT

1
00:00:00.000 --> 00:00:03.671
[MUSIC]

2
00:00:03.671 --> 00:00:07.390
&gt;&gt; Speaker 1: This kind of goes back to
where I think we were talking about any

3
00:00:07.390 --> 00:00:11.120
authenticated user can change
anything in the application.

4
00:00:11.120 --> 00:00:12.000
&gt;&gt; Speaker 2: Right, right.
&gt;&gt; Speaker 1: But

5
00:00:12.000 --> 00:00:15.110
somebody is saying that you can't
update other users in this app anyways.

6
00:00:15.110 --> 00:00:19.320
Because the request.user
object from app.params ID

7
00:00:19.320 --> 00:00:24.000
gets overwritten by auth get fresh user
&gt;&gt; Speaker 2: Auth, let's see.

8
00:00:25.320 --> 00:00:26.860
Yeah, actually it does.

9
00:00:26.860 --> 00:00:29.470
&gt;&gt; Speaker 1: And then so
he's just saying that's not intentional.

10
00:00:29.470 --> 00:00:30.090
&gt;&gt; Speaker 2: Yeah.

11
00:00:30.090 --> 00:00:34.260
&gt;&gt; Speaker 1: So, how can you avoid
loading the request like this?

12
00:00:34.260 --> 00:00:36.480
&gt;&gt; Speaker 2: Make a different
object name, not user.

13
00:00:36.480 --> 00:00:41.380
Call it reg.something else, reg.author.

14
00:00:41.380 --> 00:00:42.689
You just have to namespace it, I guess.

15
00:00:42.689 --> 00:00:45.695
But yeah, that is unintentional, I didn't
even realize until he just said it.

16
00:00:45.695 --> 00:00:49.200
But yeah that would definitely happen,
you would just have

17
00:00:49.200 --> 00:00:53.277
to give a different name space,
just not put everything on the user.

18
00:00:59.553 --> 00:01:01.577
&gt;&gt; Speaker 1: Another question,
just general,

19
00:01:01.577 --> 00:01:04.870
what are some ways to
scale the mean stack?

20
00:01:04.870 --> 00:01:08.075
&gt;&gt; Speaker 2: Well, you can just throw
more money at it, if it's on Heroku.

21
00:01:08.075 --> 00:01:10.710
[LAUGH] scale of the Dynos.

22
00:01:10.710 --> 00:01:12.560
Here, I'll show you, hold on.

23
00:01:12.560 --> 00:01:16.560
This is the easiest way to scale,
let's see, where is it at?

24
00:01:16.560 --> 00:01:17.130
Where's that button?

25
00:01:18.490 --> 00:01:19.340
There we go.

26
00:01:19.340 --> 00:01:21.315
So, if I come over here,
and I click this button.

27
00:01:21.315 --> 00:01:23.750
&gt;&gt; Speaker 1: [LAUGH]
&gt;&gt; Speaker 2: That's probably the easiest

28
00:01:23.750 --> 00:01:25.030
way to scale, no you don't wanna do that.

29
00:01:25.030 --> 00:01:28.330
So, as far as horizontally or
vertically scaling,

30
00:01:30.140 --> 00:01:34.005
the easiest way is definitely
clicking this button.

31
00:01:34.005 --> 00:01:35.160
&gt;&gt; Speaker 1: [LAUGH]
&gt;&gt; Speaker 2: [LAUGH]

32
00:01:35.160 --> 00:01:35.960
&gt;&gt; Speaker 1: [LAUGH]

33
00:01:35.960 --> 00:01:36.940
&gt;&gt; Speaker 2: That's if you don't mind

34
00:01:36.940 --> 00:01:38.340
spending the money.

35
00:01:38.340 --> 00:01:43.290
But I mean there are ways, as far as
getting you have huge data sets, right?

36
00:01:43.290 --> 00:01:46.110
So, you start getting replicated sets.

37
00:01:46.110 --> 00:01:49.990
So, you start replicating the database and
doing that stuff every night, and

38
00:01:49.990 --> 00:01:52.910
then you might start charting
the database on different indices.

39
00:01:52.910 --> 00:01:57.510
So, lets say we have a users table and
we start charting on

40
00:01:57.510 --> 00:02:02.620
alphabetical order from A through D, we're
gonna take this and stick it over here.

41
00:02:02.620 --> 00:02:04.860
And we're gonna grab these and
stick these over here.

42
00:02:04.860 --> 00:02:07.230
So we're running them
on different machines.

43
00:02:07.230 --> 00:02:10.180
Right, and then when we query
it'll go to the appropriate one.

44
00:02:10.180 --> 00:02:13.770
So, that's one way, another way
is just load up more instances.

45
00:02:13.770 --> 00:02:17.580
So, you can throw more money into it,
and beef up stuff vertically.

46
00:02:17.580 --> 00:02:20.800
Or you can just like, I'll let's keep
these lower level mid-tier ones and

47
00:02:20.800 --> 00:02:22.490
just go out horizontally.

48
00:02:22.490 --> 00:02:23.730
Just buy more of those.

49
00:02:23.730 --> 00:02:28.880
So, I'm definitely no expert on that.

50
00:02:28.880 --> 00:02:32.570
But from my experience because
I am not a devopps person.

51
00:02:32.570 --> 00:02:34.715
I just throw money at it.

52
00:02:34.715 --> 00:02:36.688
So, I don't really have
a better answer to that.

53
00:02:40.331 --> 00:02:46.125
&gt;&gt; Speaker 1: Another question was
&gt;&gt; Speaker 1: Let's see, what

54
00:02:46.125 --> 00:02:50.490
would you recommend for a beginner to read
up on and master some of this material?

55
00:02:50.490 --> 00:02:53.610
&gt;&gt; Speaker 2: Yeah, so there's this
really good blog that I like to read.

56
00:02:53.610 --> 00:02:56.246
It makes sense to me.

57
00:02:56.246 --> 00:03:00.760
Scotch.io.

58
00:03:00.760 --> 00:03:04.620
So if reading is your thing,
if you wanted to read,

59
00:03:04.620 --> 00:03:07.250
then I would definitely
recommend Scotch IO.

60
00:03:07.250 --> 00:03:09.970
This stuff has some, I mean look,
node and MongoDB on Heroku,

61
00:03:09.970 --> 00:03:12.330
that's what we just did today,
it was just published.

62
00:03:12.330 --> 00:03:13.900
So this is good blog posts.

63
00:03:13.900 --> 00:03:18.120
If I do read blog posts, it's mostly
stuff on here, or random people's blog.

64
00:03:18.120 --> 00:03:20.480
This one's really good,
they love Mean Stack.

65
00:03:20.480 --> 00:03:23.630
They wrote a book on Mean Stack so
they know it pretty well.

66
00:03:24.650 --> 00:03:28.328
So, if reading was your thing and that's
what you needed to do, I would do this.

67
00:03:35.331 --> 00:03:36.000
&gt;&gt; Speaker 2: Any other questions?

68
00:03:37.740 --> 00:03:41.555
&gt;&gt; Speaker 1: [COUGH] Any NPM modules you
can recommend for interfacing with my SQL?

69
00:03:41.555 --> 00:03:46.415
&gt;&gt; Speaker 2: [SOUND] Sequelize is good.

70
00:03:46.415 --> 00:03:48.555
There's a better one,
though, than Sequelize.

71
00:03:48.555 --> 00:03:50.961
[SOUND] Let me see.

72
00:03:50.961 --> 00:03:54.620
Before I recommend it, let me make sure
it works for SQL and not just Postgres.

73
00:03:56.300 --> 00:04:01.830
Bookshelf SQL.

74
00:04:01.830 --> 00:04:03.900
Let's see.

75
00:04:03.900 --> 00:04:05.990
Yeah, I think it's Bookshelf.

76
00:04:07.870 --> 00:04:11.800
Yeah, so, Bookshelf is
probably the most popular one.

77
00:04:13.350 --> 00:04:14.970
And SQLize is probably the next best one.

78
00:04:18.260 --> 00:04:21.455
If you're familiar with Backbone
then Bookshelf will feel like home,

79
00:04:21.455 --> 00:04:23.066
it's made by like the same people.

80
00:04:23.066 --> 00:04:25.983
It looks backbone too.

81
00:04:25.983 --> 00:04:27.914
Actually it looks different,
they updated it a little bit, but

82
00:04:27.914 --> 00:04:29.100
it still kind of looks like Backbone.

83
00:04:29.100 --> 00:04:33.785
But, yeah, that's the most popular one,
then SQLize.

84
00:04:33.785 --> 00:04:36.770
&gt;&gt; Speaker 1: Do any of
those handle MS SQL?

85
00:04:37.910 --> 00:04:38.860
&gt;&gt; Speaker 2: I have no idea.

86
00:04:38.860 --> 00:04:42.297
&gt;&gt; Speaker 1: SQL has js host of it.

87
00:04:42.297 --> 00:04:44.100
&gt;&gt; Speaker 2: This one does it.

88
00:04:44.100 --> 00:04:46.388
It says, Postgres, MySQL, and SQLite3.

89
00:04:46.388 --> 00:04:54.100
So
&gt;&gt; Speaker 2: Anything else?

90
00:04:54.100 --> 00:04:56.520
I'm kind of parsing through
all of them here quick.

91
00:04:56.520 --> 00:04:58.970
So here's a good repo to go look
at some awesome node stuff.

92
00:04:58.970 --> 00:05:00.429
It's literally called node awesome.

93
00:05:02.210 --> 00:05:06.082
If you go here, it's just a read
me of awesome things in node.

94
00:05:09.072 --> 00:05:11.624
&gt;&gt; Speaker 2: So, if you ever need
something awesome just go read this thing,

95
00:05:11.624 --> 00:05:14.760
I really need something really nice for
the file system.

96
00:05:14.760 --> 00:05:16.950
Here we go, it's all the stuff you need.

97
00:05:16.950 --> 00:05:20.570
What about build tools, yeah that's it.

98
00:05:20.570 --> 00:05:24.470
So and the guy who made this is like
I think he's a group of people,

99
00:05:24.470 --> 00:05:28.072
this guy, but he's very well known.

100
00:05:28.072 --> 00:05:32.730
So, iIf he keeps that list updated,
I mean, two days ago with 7000 stars.

101
00:05:32.730 --> 00:05:34.650
I'm sure it's a good list.

102
00:05:34.650 --> 00:05:38.220
7000 starts for a readme is ridiculous.

103
00:05:41.480 --> 00:05:43.280
Yep?
&gt;&gt; Speaker 1: What do you think about

104
00:05:43.280 --> 00:05:45.720
Elasticsearch and Cabana?

105
00:05:45.720 --> 00:05:49.639
&gt;&gt; Speaker 2: I don't know what cabana is,
but Elasticsearch is awesome.

106
00:05:49.639 --> 00:05:52.400
I use it a lot.

107
00:05:52.400 --> 00:05:55.770
Most apps these days need some type of
functionality like Elasticsearch, and

108
00:05:55.770 --> 00:05:57.270
it's pretty cool cuz it's open source.

109
00:05:57.270 --> 00:05:58.647
So, you can post it yourself and

110
00:05:58.647 --> 00:06:01.814
then there's tons of Elasticsearch Azure
service platforms out there.

111
00:06:01.814 --> 00:06:06.090
Heroku has some of them.

112
00:06:06.090 --> 00:06:09.030
So, if search, if you need that,
you know, that real time search.

113
00:06:09.030 --> 00:06:12.510
You need the power of Google in your app
then, yeah, logic search is awesome.

114
00:06:12.510 --> 00:06:14.530
You just throw stuff at it and
get it later.

115
00:06:14.530 --> 00:06:15.110
I really like it.

116
00:06:15.110 --> 00:06:16.280
It's pretty simple to use.

117
00:06:16.280 --> 00:06:18.910
I actually tried to deploy
my own hosting on it before.

118
00:06:18.910 --> 00:06:21.739
Didn't have too much luck, but then again
that was a couple years ago before I knew

119
00:06:21.739 --> 00:06:23.181
what I was doing, so I might try it again.

120
00:06:23.181 --> 00:06:26.985
So yeah, I recommend Elasticsearch,
cannot recommend another one.

121
00:06:36.328 --> 00:06:37.690
&gt;&gt; Speaker 2: Anything else here?

122
00:06:37.690 --> 00:06:39.205
&gt;&gt; Speaker 1: Any thoughts
on clustering Node?

123
00:06:39.205 --> 00:06:43.013
&gt;&gt; Speaker 2: Yeah,
you can cluster node, but

124
00:06:43.013 --> 00:06:48.592
you have to in node if you
wanted to use clusters.

125
00:06:48.592 --> 00:06:50.550
You would just MPM install, or

126
00:06:50.550 --> 00:06:56.110
I'm sorry you would require the cluster
module which is actually brand new.

127
00:06:56.110 --> 00:06:57.300
All right we'll go.

128
00:06:57.300 --> 00:07:00.070
Well it's not brand new, but, let's see.

129
00:07:01.240 --> 00:07:02.120
There we go.

130
00:07:02.120 --> 00:07:04.550
Stability to,
it's unstable according to these docs.

131
00:07:04.550 --> 00:07:06.070
Maybe these docs are out of date.

132
00:07:06.070 --> 00:07:07.570
But yeah you can use the cluster module.

133
00:07:10.880 --> 00:07:14.500
I don't know like, I'm like kind
of biased, I'm not biased but

134
00:07:14.500 --> 00:07:17.270
I'm like kind of neutral on this
because I like the fact that

135
00:07:18.420 --> 00:07:21.770
node is running on one thread and
it's evented I/O.

136
00:07:21.770 --> 00:07:26.720
At the same time, it's like, I wish I had
more power, access more of these cores.

137
00:07:26.720 --> 00:07:32.430
So, the cluster allows you to do that but
then again, you have to manage that stuff.

138
00:07:32.430 --> 00:07:36.090
Stuff gets kind of gets out the wok if
you're not familiar with working on

139
00:07:36.090 --> 00:07:39.990
multithreaded platforms, especially if
the platforms are multithreaded and

140
00:07:39.990 --> 00:07:41.500
asynchrous at the same time.

141
00:07:41.500 --> 00:07:42.514
I mean you can run into some trouble.

142
00:07:42.514 --> 00:07:49.530
We start having threads being blocked,
by you doing a wild loop that never ends.

143
00:07:49.530 --> 00:07:50.070
You know what I mean?

144
00:07:50.070 --> 00:07:55.580
And you're just stuck,
I'm kind of unsure about this.

145
00:07:55.580 --> 00:07:56.910
I never really used it in production.

146
00:07:56.910 --> 00:07:59.110
I've built some stuff with
it just to learn about it,

147
00:07:59.110 --> 00:08:04.170
but I don't really have any strong
opinions for or against it.

148
00:08:05.470 --> 00:08:08.300
But if I had to do something
that was like CPU insensitive,

149
00:08:08.300 --> 00:08:12.920
I probably wouldn't just use node to be
honest, I always use like Python or Go.

150
00:08:13.950 --> 00:08:17.594
Something that was like heavy,
like I'm not gonna build like some

151
00:08:17.594 --> 00:08:21.380
sensitive analysis machine
learning algorithm in node.

152
00:08:22.918 --> 00:08:25.587
It probably would work, but
it'll be really hard and I'd be really,

153
00:08:25.587 --> 00:08:27.588
really good at math, so
I'll just go somewhere else.

154
00:08:31.852 --> 00:08:38.090
&gt;&gt; Speaker 1: They want just a quick recap
on module x, module.expert verses export.

155
00:08:38.090 --> 00:08:39.750
Just the elevator pitch.

156
00:08:39.750 --> 00:08:44.550
&gt;&gt; Speaker 2: So module.exports is like,
I'm going to export this entire file.

157
00:08:46.310 --> 00:08:49.980
Module exports is like nothing else
is going to be exported, except for

158
00:08:49.980 --> 00:08:53.480
the thing to the right of this
equal sign or module.exports.

159
00:08:53.480 --> 00:08:57.280
You can think of it like this,
module is like the file,

160
00:08:57.280 --> 00:09:00.960
exports is an object and
you can put whatever you want on exports.

161
00:09:03.960 --> 00:09:06.240
And if you use exports by itself,

162
00:09:06.240 --> 00:09:08.030
it's still just putting
whatever you want on exports.

163
00:09:09.980 --> 00:09:12.600
But when you require it,
exports just gets attached to module.

164
00:09:13.760 --> 00:09:15.390
So, at the end it's still just module,

165
00:09:15.390 --> 00:09:18.160
it's just exports is like I
want to export many things.

166
00:09:18.160 --> 00:09:21.588
So, when I require it, I'll have an object
with all those properties on it.

167
00:09:21.588 --> 00:09:23.900
Module.exports is like,

168
00:09:23.900 --> 00:09:26.380
whatever I require is gonna be
whatever module the exports was.

169
00:09:26.380 --> 00:09:27.410
It's only gonna be that one thing.

