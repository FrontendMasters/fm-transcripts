WEBVTT

1
00:00:00.000 --> 00:00:03.755
[MUSIC]

2
00:00:03.755 --> 00:00:04.676
&gt;&gt; Speaker 1: So small little note,

3
00:00:04.676 --> 00:00:07.200
now that we're talking about
tests it's worth mentioning.

4
00:00:08.620 --> 00:00:09.160
God.

5
00:00:09.160 --> 00:00:10.060
Suspect typo.

6
00:00:10.060 --> 00:00:12.530
Mentioning envarionment variables.

7
00:00:12.530 --> 00:00:13.630
Environment variables, sorry.

8
00:00:13.630 --> 00:00:16.626
I said envarionment variables,
I was reading the typo.

9
00:00:16.626 --> 00:00:19.880
[LAUGH] Environment variables.

10
00:00:19.880 --> 00:00:21.780
And how we can use them.

11
00:00:21.780 --> 00:00:24.894
There exists a process.env
object globally in node.

12
00:00:24.894 --> 00:00:26.940
So I'll show you what that looks like.

13
00:00:26.940 --> 00:00:31.480
So again,
going back to how node handles files.

14
00:00:31.480 --> 00:00:36.260
I'm just going to comment this
stuff real quick so you can see.

15
00:00:37.460 --> 00:00:40.030
So again,
there's an iife around this entire file.

16
00:00:40.030 --> 00:00:41.354
Everybody knows what I
say when I say iife?

17
00:00:43.030 --> 00:00:46.150
Immediately invoke functional expression.

18
00:00:46.150 --> 00:00:48.300
So there's a iife here
that's creating a closure.

19
00:00:48.300 --> 00:00:52.220
And again, we get console,
we get all this other stuff, right,

20
00:00:52.220 --> 00:00:57.550
and there is also process, that's another
one, there's so many args up there.

21
00:00:57.550 --> 00:01:00.970
So process is the actual
process that you're running in.

22
00:01:00.970 --> 00:01:04.907
So what we can do is we can look at that
process and I'm just show you what it

23
00:01:04.907 --> 00:01:11.175
looks like.
&gt;&gt; Speaker 1: Let's

24
00:01:11.175 --> 00:01:15.716
do that node index here's
the process object.

25
00:01:15.716 --> 00:01:18.648
So all this stuff, a whole bunch of stuff.

26
00:01:18.648 --> 00:01:22.866
And this is everything about
the environment that we're running in on

27
00:01:22.866 --> 00:01:24.160
my current machine.

28
00:01:24.160 --> 00:01:27.960
This is the process that this node is
running and when it executed this file.

29
00:01:30.110 --> 00:01:36.090
So there exists a process.env,
which is short for environment.

30
00:01:36.090 --> 00:01:39.077
And this is the stuff.

31
00:01:39.077 --> 00:01:41.092
Let me clear the console,
it's so much noise.

32
00:01:41.092 --> 00:01:42.576
Here we go.

33
00:01:42.576 --> 00:01:44.430
Here's the process.env.

34
00:01:44.430 --> 00:01:46.353
And you can think of this like
the object that's gonna hold all of our

35
00:01:46.353 --> 00:01:47.180
environment variables.

36
00:01:47.180 --> 00:01:49.180
So here's all my environment variables.

37
00:01:49.180 --> 00:01:51.755
All these secrets and
stuff on here that I shouldn't be showing.

38
00:01:51.755 --> 00:01:55.250
[LAUGH] So that's our environment.

39
00:01:55.250 --> 00:01:59.520
And this is where we're gonna
be telling node about hey,

40
00:01:59.520 --> 00:02:02.800
you're in production or you're in
testing or you're in development.

41
00:02:02.800 --> 00:02:04.580
And here's the secret for
your application.

42
00:02:04.580 --> 00:02:06.390
Here's the Facebook secret for.

43
00:02:06.390 --> 00:02:08.660
That's how we're gonna pass
in those environments.

44
00:02:08.660 --> 00:02:12.070
And every application we deploy too allows
us to do that using environment variables.

45
00:02:12.070 --> 00:02:14.590
Every environment variable
that we pass in binds to

46
00:02:14.590 --> 00:02:22.653
process.env.
&gt;&gt; Speaker 1: All right, so

47
00:02:22.653 --> 00:02:28.010
if I were to say.
&gt;&gt; Speaker 1: Let's say,

48
00:02:28.010 --> 00:02:34.649
node index.js, or I'm sorry hold on,

49
00:02:34.649 --> 00:02:38.569
export hey equals hey.

50
00:02:38.569 --> 00:02:44.312
And then node index.js.

51
00:02:44.312 --> 00:02:46.406
[SOUND] Did it do it?
&gt;&gt; Speaker 2: Mm-hm,

52
00:02:46.406 --> 00:02:47.465
it's at the bottom.
&gt;&gt; Speaker 1: It's at the bottom?

53
00:02:47.465 --> 00:02:48.255
Yeah there it is.

54
00:02:48.255 --> 00:02:50.125
So there it is, hey.

55
00:02:50.125 --> 00:02:51.855
So I made environment variable,

56
00:02:51.855 --> 00:02:55.775
put it there.
&gt;&gt; Speaker 1: See that, so

57
00:02:55.775 --> 00:02:57.946
that's how we do environment variables.

58
00:02:57.946 --> 00:03:02.138
Any questions on that?
&gt;&gt; Speaker 2: Go back to that

59
00:03:02.138 --> 00:03:04.030
line.
&gt;&gt; Speaker 1: Which line?

60
00:03:04.030 --> 00:03:05.500
This one?
&gt;&gt; Speaker 2: Before this.

61
00:03:06.510 --> 00:03:09.870
Where you actually did that command line.
&gt;&gt; Speaker 1: The command that I did?

62
00:03:09.870 --> 00:03:16.772
That
&gt;&gt; Speaker 1: So

63
00:03:16.772 --> 00:03:21.066
yeah, if I say export and do like this
assignment that's creating environment

64
00:03:21.066 --> 00:03:25.357
variable then put this colon here like
I'm gonna run another command on the same

65
00:03:25.357 --> 00:03:33.576
line.
&gt;&gt; Speaker 1: So

66
00:03:33.576 --> 00:03:36.078
that's an object of environment variables,

67
00:03:36.078 --> 00:03:39.357
then that also means you can
set environment variables too.

68
00:03:39.357 --> 00:03:43.981
So, process.env.whatever
equals whatever you want.

69
00:03:43.981 --> 00:03:46.580
And that will also set
environment variables.

70
00:03:46.580 --> 00:03:48.451
So it's two-way.

71
00:03:57.269 --> 00:03:58.041
&gt;&gt; Speaker 1: Cool, so yeah,

72
00:03:58.041 --> 00:04:00.200
the process.env object
is globally in node.

73
00:04:01.630 --> 00:04:06.370
And the one useful property on that
object is the one that's called NODE_ENV.

74
00:04:06.370 --> 00:04:09.310
So the convention for
environment variables, and

75
00:04:09.310 --> 00:04:12.850
I'm sure this is just not a node but just
in general, it's to capitalize them all.

76
00:04:12.850 --> 00:04:19.030
Like all caps and underscore or I guess
it's technically not camel case, but yeah.

77
00:04:19.030 --> 00:04:21.641
Separate by underscore.

78
00:04:21.641 --> 00:04:27.535
That's the convention is to have your
environment variables look like that.

79
00:04:27.535 --> 00:04:29.518
But this important one is NODE_ENV, and

80
00:04:29.518 --> 00:04:33.372
this is what we use as node developers to
determine what environment we're in and

81
00:04:33.372 --> 00:04:37.300
its value can equal testing, development,
production, something like that.

82
00:04:37.300 --> 00:04:39.266
But that's like the convention.

83
00:04:39.266 --> 00:04:42.294
Mark, you had a question?
&gt;&gt; Speaker 2: Yeah, do you recommend

84
00:04:42.294 --> 00:04:46.439
declaring environmental variables
in a start script, like upstart or

85
00:04:46.439 --> 00:04:50.950
putting them in a separate ENV file?
&gt;&gt; Speaker 1: So that all depends on how

86
00:04:50.950 --> 00:04:55.470
sensitive those variables are if they're
like secret or tokens, you definitely

87
00:04:55.470 --> 00:04:58.320
don't want to do that because then
they'll be checked into source control.

88
00:04:58.320 --> 00:05:01.360
And then once they GitHub, even if you
check them back out they're there forever.

89
00:05:01.360 --> 00:05:02.690
Because GitHub does hooks.

90
00:05:02.690 --> 00:05:06.460
So somebody has built a server that
listens to every single hook on GitHub.

91
00:05:06.460 --> 00:05:08.010
So it doesn't matter if you put
it on there and get rid of it.

92
00:05:08.010 --> 00:05:08.610
It's there.

93
00:05:08.610 --> 00:05:10.580
So, do not put secrets in the file.

94
00:05:10.580 --> 00:05:14.250
If they're not sensitive,
a start script is fine.

95
00:05:14.250 --> 00:05:16.290
A separate file is great too.

96
00:05:16.290 --> 00:05:17.620
There are node modules.

97
00:05:17.620 --> 00:05:20.490
There's one actually called ENV
that kinda does this for you.

98
00:05:20.490 --> 00:05:23.750
If you have a build system incorporating
it with gulp is actually really cool too.

99
00:05:23.750 --> 00:05:26.130
So there's a lot of ways you can do it.

100
00:05:26.130 --> 00:05:28.200
And then it also depends on like,

101
00:05:28.200 --> 00:05:30.010
what environment your
application is gonna run in.

102
00:05:30.010 --> 00:05:32.005
So if you're talking about deployment,

103
00:05:32.005 --> 00:05:35.596
then what you would probably do is
the service that you're using has like,

104
00:05:35.596 --> 00:05:39.024
probably gooey where you can just
type in your environment variables.

105
00:05:39.024 --> 00:05:42.849
Right there inside the actual
admin panel of your deployment.

106
00:05:42.849 --> 00:05:45.890
I know AWS allows you to do this,
Heroku allows you to do this.

107
00:05:45.890 --> 00:05:47.510
So you don't really need that file.

108
00:05:47.510 --> 00:05:50.898
But locally, yeah,
you'll probably need that file, but

109
00:05:50.898 --> 00:05:54.694
we're gonna talk about how to get
around checking that into source

110
00:05:54.694 --> 00:05:57.906
control when we get into
the production part tomorrow.

