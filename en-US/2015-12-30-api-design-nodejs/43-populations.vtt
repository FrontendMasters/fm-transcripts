WEBVTT

1
00:00:00.000 --> 00:00:04.013
[MUSIC]

2
00:00:04.013 --> 00:00:07.230
&gt;&gt; Speaker 1: Mongo is a NoSQL Database so
we don't have join tables.

3
00:00:07.230 --> 00:00:10.850
I was talking about this earlier, but we
need a way of seeing relational data, so

4
00:00:10.850 --> 00:00:12.360
the solution for
this is called population.

5
00:00:14.110 --> 00:00:16.130
You can think of it as
a join table at call time.

6
00:00:18.100 --> 00:00:22.700
So what does that look like, well imagine
this we have a dogschema it has an owner,

7
00:00:24.000 --> 00:00:26.750
it's type is object id
it refers to a person.

8
00:00:28.020 --> 00:00:33.090
Then we have a person schema
it just has a name, so

9
00:00:33.090 --> 00:00:35.830
I make those two models,
I make a dog model, I make a person model.

10
00:00:35.830 --> 00:00:37.420
All this we have done before.

11
00:00:38.440 --> 00:00:43.310
It's not new, and
then what I wanna do is I say Dog.find

12
00:00:43.310 --> 00:00:47.770
which gives me all the dogs and
I call this method called populate.

13
00:00:49.130 --> 00:00:52.400
And I pass in the property on
the dogs that I want to populate.

14
00:00:52.400 --> 00:00:57.760
In this case I want the populate
the owner fields, and

15
00:00:57.760 --> 00:00:59.830
then I call this method called exact.

16
00:00:59.830 --> 00:01:01.800
Exact, surface execute.

17
00:01:02.810 --> 00:01:05.710
It will either return a promise,
which I'm using in this case, or

18
00:01:05.710 --> 00:01:07.560
it also takes a call back.

19
00:01:07.560 --> 00:01:08.610
A note style call back.

20
00:01:08.610 --> 00:01:09.130
So, it's up to you.

21
00:01:09.130 --> 00:01:14.170
You can pass it in note style callback
here, which is function error, and result.

22
00:01:14.170 --> 00:01:18.320
Or you can use the promise,
which is up to you.

23
00:01:18.320 --> 00:01:21.200
And if I'm looking at the dogs,
which is an array,

24
00:01:21.200 --> 00:01:25.490
Each dog on there,
it's owner property will not be an ID.

25
00:01:25.490 --> 00:01:30.820
It will be the object that the ID was
representing from the personal collection.

26
00:01:30.820 --> 00:01:34.880
So what happens is when I call populate
on this owner, it's gonna be okay,

27
00:01:34.880 --> 00:01:39.240
let me go to the owner field, let me grab
the object ID, let me go to the person's

28
00:01:39.240 --> 00:01:42.990
collection, let me find the person with
the object ID Grab that object and

29
00:01:42.990 --> 00:01:45.440
stick right here and
stick it right here on owner.

30
00:01:45.440 --> 00:01:48.350
So now if you were to do dog dot
owner it would be an object and

31
00:01:48.350 --> 00:01:51.170
the object would be
the person that owns the dog.

32
00:01:51.170 --> 00:01:52.690
So we joined them for you.

33
00:01:52.690 --> 00:01:56.950
It populated the id field with
the actual thing that it's referencing.

34
00:01:56.950 --> 00:01:59.070
That's why we have to put this ref here so

35
00:01:59.070 --> 00:02:01.150
it knows what collections
to go match the ids with.

36
00:02:02.350 --> 00:02:06.430
&gt;&gt; Speaker 2: How many times does
the query Mongo for a statement like that?

37
00:02:06.430 --> 00:02:07.780
&gt;&gt; Speaker 1: How many
times does it query?

38
00:02:07.780 --> 00:02:11.710
&gt;&gt; Speaker 2: Does it query once
to get the dog collection and

39
00:02:11.710 --> 00:02:15.100
then does it query per
dog filtered by owner?

40
00:02:15.100 --> 00:02:18.630
&gt;&gt; Speaker 1: I don't know exactly
how they're doing it, so I can't,

41
00:02:18.630 --> 00:02:23.690
I don't really want to count on that but,
I think a naive

42
00:02:23.690 --> 00:02:27.790
solution would be doing once every time
but I think they have a way around that.

43
00:02:27.790 --> 00:02:31.190
I am sure they are doing some
optimization with their refs and

44
00:02:31.190 --> 00:02:35.170
object ids because they are indexed and
now they know where they are.

45
00:02:35.170 --> 00:02:38.950
I don't think it will be
that type of operation.

46
00:02:38.950 --> 00:02:40.140
Incredibly slow.

47
00:02:40.140 --> 00:02:41.130
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Speaker 1: Yeah.

48
00:02:45.226 --> 00:02:46.080
&gt;&gt; Speaker 1: So that's how you populate.

49
00:02:46.080 --> 00:02:49.880
If you wanted to populate many fields,
so if we had another field up here that

50
00:02:49.880 --> 00:02:53.510
needed populating, we can just put
a space after this word owner and

51
00:02:53.510 --> 00:02:55.370
put the field that we wanna
populate there as well.

52
00:02:55.370 --> 00:02:56.660
It'll also populate that.

53
00:02:56.660 --> 00:03:00.140
Or you can also just do
.populate again and call that.

54
00:03:03.050 --> 00:03:05.510
We also have fine grain control of what

55
00:03:05.510 --> 00:03:08.000
fields on the thing we're trying
to populate, what do we want?

56
00:03:08.000 --> 00:03:11.210
So in this case, this is going to
bring over the entire owner object.

57
00:03:11.210 --> 00:03:14.420
Well let's say, well I guess
the owner only has a name, but

58
00:03:14.420 --> 00:03:16.870
the owner had like three properties on it,
but all we wanted was the name.

59
00:03:16.870 --> 00:03:18.870
We could put a comma after owner and

60
00:03:18.870 --> 00:03:20.160
just be like just give me
the name of the owner.

61
00:03:20.160 --> 00:03:23.320
So it would just send back an object
with the owner's name and nothing else.

62
00:03:24.950 --> 00:03:26.689
So it's a little fine grain control.

63
00:03:29.798 --> 00:03:31.664
&gt;&gt; Speaker 1: So again,
there is so much to do and so

64
00:03:31.664 --> 00:03:33.850
many ways to do it with Mongoose and
Mongo.

65
00:03:35.170 --> 00:03:36.920
Like I said,
it's another chorus on its own.

66
00:03:36.920 --> 00:03:38.130
So I don't wanna get too deep into it, so

67
00:03:38.130 --> 00:03:41.430
I just showed you the basic
things that you will be doing.

68
00:03:41.430 --> 00:03:44.270
So, this would be enough to get you
started with the basic needs of our API.

69
00:03:44.270 --> 00:03:48.070
And again remember, because the API
is restful, and it's all the same.

70
00:03:48.070 --> 00:03:49.947
They all have the same routes.

71
00:03:49.947 --> 00:03:53.873
If you write this queries once, with one
model, it's the exact same thing for

72
00:03:53.873 --> 00:03:54.950
the other two models.

73
00:03:54.950 --> 00:03:56.217
It's a different model.

74
00:03:56.217 --> 00:03:58.070
It's the same operation.

75
00:03:58.070 --> 00:04:02.310
nothings different about it, except when
you get into things like population for

76
00:04:02.310 --> 00:04:06.060
instance on the post model.

77
00:04:06.060 --> 00:04:08.560
This one's a little different because
you have to make sure you populate these

78
00:04:08.560 --> 00:04:11.190
things when you call them whereas
the other two don't have populations,

79
00:04:11.190 --> 00:04:12.970
they don't have any references.

80
00:04:15.710 --> 00:04:17.870
The user model has no references,
the category model has no references, so

81
00:04:17.870 --> 00:04:18.720
they're pretty straight forward.

82
00:04:19.750 --> 00:04:22.360
This one, you just need to
make sure you populate them.

83
00:04:22.360 --> 00:04:24.270
But they're still all
pretty much the same.

84
00:04:24.270 --> 00:04:27.320
Find by ID, find, get that, get that.

