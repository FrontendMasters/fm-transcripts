WEBVTT

1
00:00:00.000 --> 00:00:04.310
[MUSIC]

2
00:00:04.310 --> 00:00:07.089
&gt;&gt; Speaker 1: Now we're going to
talk about the different types of

3
00:00:07.089 --> 00:00:08.550
middleware in Express 4.

4
00:00:08.550 --> 00:00:11.470
So we're using Express 4.0,
which is really awesome.

5
00:00:11.470 --> 00:00:14.280
But there five different types
of middleware in Express 4.

6
00:00:14.280 --> 00:00:20.940
There are third party middleware,
which is like body parser,

7
00:00:20.940 --> 00:00:24.190
and this stuff, the stuff that we NPM
installed, this third party middleware.

8
00:00:25.660 --> 00:00:27.840
There's router level middleware.

9
00:00:28.950 --> 00:00:32.970
We haven't gotten to that, but
we'll get to that later today actually.

10
00:00:32.970 --> 00:00:35.780
So, we'll get into
router level middleware.

11
00:00:35.780 --> 00:00:37.260
There's application level middleware,

12
00:00:37.260 --> 00:00:39.310
which is what we've been
using this entire time.

13
00:00:39.310 --> 00:00:40.220
What is this?

14
00:00:40.220 --> 00:00:43.850
Because when we do the app.use,
we're saying this entire

15
00:00:43.850 --> 00:00:47.050
application instance is gonna
use this middleware right here.

16
00:00:47.050 --> 00:00:49.650
It doesn't matter what router,
it doesn't matter what.

17
00:00:49.650 --> 00:00:53.010
Whenever a request comes in, it's always
gonna run through here first, and

18
00:00:53.010 --> 00:00:54.620
then it's always gonna
go through here second.

19
00:00:54.620 --> 00:00:57.140
It's always gonna go through here third,
no matter what.

20
00:00:57.140 --> 00:00:59.540
No matter what middleware we
put down here, on another file,

21
00:00:59.540 --> 00:01:01.300
another file,
it's always gonna come through here.

22
00:01:01.300 --> 00:01:05.300
That's application-wide middleware.

23
00:01:05.300 --> 00:01:07.342
So body parser is a third
party middleware, and

24
00:01:07.342 --> 00:01:10.060
it is also registered on
an application level, so it's both.

25
00:01:10.060 --> 00:01:14.180
Then there is error handling middleware.

26
00:01:15.440 --> 00:01:17.720
So, error handling middleware
is pretty awesome.

27
00:01:17.720 --> 00:01:23.380
So the way that works is, again this can
also be application wide or router level.

28
00:01:23.380 --> 00:01:26.120
We'll talk about router level,
but the application or

29
00:01:26.120 --> 00:01:30.080
error handling middleware is a little
different than regular middleware.

30
00:01:30.080 --> 00:01:33.820
Because it is a function,
just like all the other middleware.

31
00:01:33.820 --> 00:01:36.830
But it takes in one extra argument,
and that's an error.

32
00:01:36.830 --> 00:01:41.000
As a first argument,
you actually have to put that there.

33
00:01:41.000 --> 00:01:44.710
You don't put there, express won't think
that you're making an error middleware.

34
00:01:44.710 --> 00:01:47.260
It will just be like,
this is regular middleware.

35
00:01:47.260 --> 00:01:50.910
If you put error, request,
response, and then next.

36
00:01:50.910 --> 00:01:54.300
Now, expressing those you're doing errors.

37
00:01:54.300 --> 00:01:55.630
So, how do we actually trigger this?

38
00:01:55.630 --> 00:01:58.731
I'll show you.
So, I'm going to say console.log.

39
00:02:01.564 --> 00:02:03.124
&gt;&gt; Speaker 1: Error.

40
00:02:03.124 --> 00:02:06.810
Or actually this doesn't need to change
the colour, we're going to say log.

41
00:02:06.810 --> 00:02:07.944
And then I'll go another one up here so

42
00:02:07.944 --> 00:02:15.010
we can see
&gt;&gt; Speaker 1: So

43
00:02:15.010 --> 00:02:18.480
what we can do is, let's say for
instance, in Linux.

44
00:02:18.480 --> 00:02:19.480
We trigger an error.

45
00:02:19.480 --> 00:02:26.372
Instead of doing a response,
we can just say you know what, do next.

46
00:02:26.372 --> 00:02:30.505
And throw an error,

47
00:02:30.505 --> 00:02:34.904
so new error nooope.

48
00:02:34.904 --> 00:02:41.640
All right so if we do that by
passing this error into next,

49
00:02:41.640 --> 00:02:45.400
we're saying one go to the next
thing in the middleware stack and

50
00:02:45.400 --> 00:02:50.039
two it's an error so that's going to
trigger our error handling middleware.

51
00:02:55.793 --> 00:02:57.740
&gt;&gt; Speaker 1: Does everybody see that?

52
00:02:57.740 --> 00:02:58.730
So we're gonna run this.

53
00:02:58.730 --> 00:03:05.460
I think I actually have to move this
above this but let's see, we'll see.

54
00:03:05.460 --> 00:03:07.340
So, we're gonna run this.

55
00:03:07.340 --> 00:03:11.360
What was it, slash lions, yeah, so I'm
gonna go to slash lions in the browser.

56
00:03:16.900 --> 00:03:20.050
&gt;&gt; Speaker 1: Cool,
wait I forgot to put in next right?

57
00:03:21.170 --> 00:03:21.670
That would help.

58
00:03:26.220 --> 00:03:27.620
&gt;&gt; Speaker 1: Let's try that again.

59
00:03:27.620 --> 00:03:33.173
Cool, so there we go, nooope,
actually I don't think

60
00:03:33.173 --> 00:03:38.252
it's actually triggered,
let me go, let me see,

61
00:03:38.252 --> 00:03:43.336
no this actually didn't
trigger our middleware,

62
00:03:43.336 --> 00:03:46.550
it's just like a logging note.

63
00:03:48.270 --> 00:03:49.660
Yeah, it's just doing this.

64
00:03:49.660 --> 00:03:54.830
So, I think if we want to trigger
our middleware, we would have to

65
00:03:54.830 --> 00:03:59.160
put this below the stack, so
we would have to put this down here.

66
00:04:01.090 --> 00:04:03.040
Now if you call next,
it should trigger our middleware.

67
00:04:03.040 --> 00:04:07.790
So, let's try that.

68
00:04:07.790 --> 00:04:11.990
Port 3000, nope.

69
00:04:11.990 --> 00:04:13.860
There we go.

70
00:04:13.860 --> 00:04:15.470
So now, it's triggering our middleware.

71
00:04:15.470 --> 00:04:17.780
Because, do you see how I had
to change the order of that?

72
00:04:17.780 --> 00:04:18.830
&gt;&gt; Speaker 2: Yeah.

73
00:04:18.830 --> 00:04:19.930
&gt;&gt; Speaker 1: Because I define.

74
00:04:21.690 --> 00:04:26.860
At first, the error middleware was up
here, and this route was down here.

75
00:04:26.860 --> 00:04:29.700
So when I called next,
there's nothing after this route.

76
00:04:30.920 --> 00:04:34.906
These routes are not after this route,
they're different routes,

77
00:04:34.906 --> 00:04:37.800
they're like siblings,
they're not after it.

78
00:04:37.800 --> 00:04:40.941
The chain starts up here, here's the first
middleware, here's the second middleware,

79
00:04:40.941 --> 00:04:43.753
and here's the third middleware, and then
each one of these could be the fourth,

80
00:04:43.753 --> 00:04:44.520
they're siblings.

81
00:04:44.520 --> 00:04:48.170
It depends on which route you hit,
but they're just siblings.

82
00:04:48.170 --> 00:04:54.120
And then the fifth one is down here, yes.

83
00:04:54.120 --> 00:04:54.820
&gt;&gt; Speaker 2: I have two questions.

84
00:04:54.820 --> 00:04:58.620
First one, with this error one,
does the spelling of error matter?

85
00:04:58.620 --> 00:05:01.100
&gt;&gt; Speaker 1: No,
you can do whatever you want.

86
00:05:01.100 --> 00:05:03.710
&gt;&gt; Speaker 2: Okay, so
how does it know if it's an error and

87
00:05:03.710 --> 00:05:06.340
how does it know if it's
an error middleware or

88
00:05:06.340 --> 00:05:10.170
just a normal middleware if it doesn't
look at the spelling of the first param?

89
00:05:11.170 --> 00:05:13.830
&gt;&gt; Speaker 1: I'm not, I'm guess what
they do is they check the length of

90
00:05:13.830 --> 00:05:15.000
the arguments.

91
00:05:15.000 --> 00:05:19.920
&gt;&gt; Speaker 2: So if you dropped off next,
it would think it's a normal, middleware.

92
00:05:19.920 --> 00:05:21.580
&gt;&gt; Speaker 1: Quite possibly
let's check it out.

93
00:05:21.580 --> 00:05:23.720
I am not sure about that here remove.

94
00:05:23.720 --> 00:05:24.430
So a quick check.

95
00:05:28.160 --> 00:05:32.390
So many tabs, okay, yeah it did.

96
00:05:32.390 --> 00:05:35.150
That didn't know, that freaked out so
you need all those in there.

97
00:05:35.150 --> 00:05:35.930
&gt;&gt; Speaker 2: So you need four of them?

98
00:05:35.930 --> 00:05:37.440
&gt;&gt; Speaker 1: Yup
&gt;&gt; Speaker 2: Okay.

99
00:05:37.440 --> 00:05:39.710
&gt;&gt; Speaker 1: I think it says
in the documentation why.

100
00:05:39.710 --> 00:05:41.030
&gt;&gt; Speaker 2: Okay.

101
00:05:41.030 --> 00:05:42.480
&gt;&gt; Speaker 1: I just don't
want to tell you and be wrong.

102
00:05:42.480 --> 00:05:46.230
&gt;&gt; Speaker 2: Okay, and then my second
question is are we able to access that

103
00:05:46.230 --> 00:05:52.090
middleware array and
like programically drop some middleware or

104
00:05:52.090 --> 00:05:57.290
like snap one of our middlewares up
to the top or something like that?

105
00:05:57.290 --> 00:05:58.720
&gt;&gt; Speaker 1: No, not by default.

106
00:05:58.720 --> 00:06:01.940
You can dig in and maybe,
if you want to do stuff like that but

107
00:06:01.940 --> 00:06:02.910
by default there is no API.

108
00:06:02.910 --> 00:06:04.040
&gt;&gt; Speaker 2: You just
order it any way you want?

109
00:06:04.040 --> 00:06:06.260
&gt;&gt; Speaker 1: You order it,
you write it in the order that you want.

110
00:06:06.260 --> 00:06:10.970
I haven't been in a situation
where I needed to do that, so So

111
00:06:10.970 --> 00:06:15.160
again the reason I had to move this down
is because the stack middleware starts off

112
00:06:15.160 --> 00:06:20.420
as one, two, three and then any of these
routes is going to be the fourth one and

113
00:06:20.420 --> 00:06:21.360
then the fifth one is this one.

114
00:06:27.570 --> 00:06:29.866
&gt;&gt; Speaker 1: So, this is error middleware
step out of these four arguments in here,

115
00:06:29.866 --> 00:06:31.280
and this is how you handle error.

116
00:06:31.280 --> 00:06:34.970
So, instead of in every single route
you'd be like if error throw error,

117
00:06:34.970 --> 00:06:38.450
you can just say next and
define your error handling here.

118
00:06:38.450 --> 00:06:41.220
This is where you would post
your error handling service,

119
00:06:41.220 --> 00:06:43.820
maybe log to a file, whatever you do with
your errors, you would do it in this

120
00:06:43.820 --> 00:06:44.970
function right here
&gt;&gt; Speaker 2: So,

121
00:06:44.970 --> 00:06:46.440
you just do it in one place.

122
00:06:46.440 --> 00:06:48.360
Yeah, Mark you had a question?

123
00:06:48.360 --> 00:06:51.840
&gt;&gt; Speaker 1: There's saying, so whenever
you use app.use that's middleware?

124
00:06:51.840 --> 00:06:52.825
&gt;&gt; Speaker 2: Yeah, that's global,

125
00:06:52.825 --> 00:06:57.230
app.use is setting global
application middleware, yes.

126
00:06:57.230 --> 00:07:00.590
That means, I want this app to
use this middleware globally.

127
00:07:00.590 --> 00:07:03.769
&gt;&gt; Speaker 1: And then how do you
decide which function goes where?

128
00:07:05.230 --> 00:07:07.260
Like is the error always at the end.

129
00:07:07.260 --> 00:07:09.850
&gt;&gt; Speaker 2: Yeah.
So, the other ones are kind of arbitrary.

130
00:07:09.850 --> 00:07:11.250
I mean, there is some ordering.

131
00:07:11.250 --> 00:07:13.460
Like for instance, express.static.

132
00:07:13.460 --> 00:07:17.960
You probably want that to go first,
before you set up your api routes.

133
00:07:17.960 --> 00:07:22.150
So, for instance, let's say we
had a file who's path was /lions.

134
00:07:22.150 --> 00:07:28.460
That was the files, but we registered this
route up top before express dot static.

135
00:07:28.460 --> 00:07:30.620
What would happen is when that file for

136
00:07:30.620 --> 00:07:34.320
slash lions comes in,
it's going to do this instead.

137
00:07:34.320 --> 00:07:38.080
When in fact it should went to express dot
static and serve this slash lions file.

138
00:07:38.080 --> 00:07:40.750
So you want to do express dot static
first to get all the files, so

139
00:07:40.750 --> 00:07:42.560
the ordering does matter there.

140
00:07:42.560 --> 00:07:45.730
The URL stuff as long as
you do it before your API,

141
00:07:45.730 --> 00:07:47.940
because you do it before your API.

142
00:07:47.940 --> 00:07:51.450
And as far as your error handling goes,
it should be at the end of this stack,

143
00:07:51.450 --> 00:07:56.160
because you want to be able to reliably
call next in one of these callbacks up

144
00:07:56.160 --> 00:08:00.350
here, with an error
&gt;&gt; Speaker 1: And

145
00:08:00.350 --> 00:08:02.600
expect your error handling to pick it up,
and

146
00:08:02.600 --> 00:08:05.160
the only way to guarantee that is to make
sure that it's registered beneath it.

147
00:08:07.270 --> 00:08:10.100
So this is simple now, but
when we start getting into multiple files

148
00:08:10.100 --> 00:08:12.060
you might lose track of
what's registered where, but

149
00:08:12.060 --> 00:08:13.955
I'm gonna show you how easy it
is to keep track of that too.

150
00:08:13.955 --> 00:08:16.780
Because right now everything's
in one file top to bottom.

151
00:08:16.780 --> 00:08:18.470
We can see what's first what's last,

152
00:08:18.470 --> 00:08:22.060
but we're gonna have multiple
files with multiple routers.

153
00:08:22.060 --> 00:08:24.690
With multiple middleware stacks, and

154
00:08:24.690 --> 00:08:26.970
those routes will have their
own middleware stacks too.

155
00:08:26.970 --> 00:08:28.030
So, it gets pretty crazy.

156
00:08:29.760 --> 00:08:33.490
&gt;&gt; Speaker 2: So, Scott do you have
to put next error in every route?

157
00:08:35.110 --> 00:08:39.510
&gt;&gt; Speaker 1: No, so in for
an error handling middleware

158
00:08:39.510 --> 00:08:41.470
you absolutely have to
put these four arguments.

159
00:08:41.470 --> 00:08:44.820
So how does the error get to the-
&gt;&gt; Speaker 2: Right, so

160
00:08:44.820 --> 00:08:46.020
how does error get here?

161
00:08:46.020 --> 00:08:46.550
&gt;&gt; Speaker 1: Yeah.

162
00:08:46.550 --> 00:08:52.650
&gt;&gt; Speaker 2: So what happened was I threw
an error, so if I did a get request/lions,

163
00:08:52.650 --> 00:08:56.720
I'm going to call next which means go
to the next middleware in the stack.

164
00:08:56.720 --> 00:08:58.220
So forget about the error right now.

165
00:08:58.220 --> 00:08:59.110
Don't worry about the error.

166
00:08:59.110 --> 00:09:00.890
But I called next, right.

167
00:09:00.890 --> 00:09:05.070
That's automatically gonna look in
the stack and see what is registered next.

168
00:09:05.070 --> 00:09:06.300
And it's not one of these.

169
00:09:06.300 --> 00:09:10.380
These are siblings,
they're not lined up next to each other.

170
00:09:10.380 --> 00:09:11.120
These are siblings.

171
00:09:11.120 --> 00:09:13.090
The next thing in
the stack is actually this.

172
00:09:14.530 --> 00:09:19.800
And then now, if we go back I threw in
an error, an object with type of error.

173
00:09:21.470 --> 00:09:23.090
Which is passed in right here.

174
00:09:25.850 --> 00:09:28.490
&gt;&gt; Speaker 2: So
that's where that came from.

175
00:09:28.490 --> 00:09:29.510
Mark.

176
00:09:29.510 --> 00:09:31.010
&gt;&gt; Speaker 1: Could you use app.all and

177
00:09:31.010 --> 00:09:33.870
declare the error handler
before the routes?

178
00:09:33.870 --> 00:09:38.030
And then he's saying I'd like to keep all
express configs middleware in a separate

179
00:09:38.030 --> 00:09:39.330
config file.

180
00:09:39.330 --> 00:09:40.860
&gt;&gt; Speaker 2: Yup,
we're gonna get into that.

181
00:09:40.860 --> 00:09:43.510
I agree, definitely like to keep all
that stuff in a separate config file,

182
00:09:43.510 --> 00:09:44.628
that's definitely a good practice.

183
00:09:44.628 --> 00:09:49.670
But app.all is, you could use app.all,

184
00:09:49.670 --> 00:09:53.471
but that's for something else but
you could totally do app.all.

185
00:09:53.471 --> 00:09:59.913
app.all is like I want to run,
I wouldn't put error handling in app.all.

186
00:09:59.913 --> 00:10:01.045
But you could do that.

187
00:10:01.045 --> 00:10:04.620
app.all is for
any request that comes in, or for,

188
00:10:04.620 --> 00:10:07.530
I'm sorry, for any verb on this
route that comes in, do this.

189
00:10:07.530 --> 00:10:08.705
So app.all is like this.

190
00:10:08.705 --> 00:10:17.050
app.all, and
you can define a request here or a URL.

191
00:10:17.050 --> 00:10:19.940
And you can write a function so, for

192
00:10:19.940 --> 00:10:24.700
any verb to this route put,
delete post, run this callback.

193
00:10:24.700 --> 00:10:30.130
So, it's a little different
than doing app.use.

194
00:10:30.130 --> 00:10:33.550
Then you can also not use the route too,
you can just use something like that.

195
00:10:33.550 --> 00:10:36.020
And that might be closer to app.use,
but still it's not the same thing.

196
00:10:36.020 --> 00:10:37.890
It's not what it's meant to be used for.

197
00:10:37.890 --> 00:10:43.130
It's like I want to set up some Common
functionality on across all the routes.

198
00:10:43.130 --> 00:10:48.320
So for instance,
if I wanted to do a log on

199
00:10:48.320 --> 00:10:53.682
all the requests through lions, I could
just come in here and say req, res.

200
00:10:53.682 --> 00:10:59.857
Console.log('lions!!!').

201
00:10:59.857 --> 00:11:05.007
And the responsibly make sure I call next
&gt;&gt; Speaker 2: Now

202
00:11:05.007 --> 00:11:09.280
what's going to happen is it's
going to go here, here, here.

203
00:11:09.280 --> 00:11:14.280
And then, because I went to /lions,
it will go here first and

204
00:11:14.280 --> 00:11:15.920
then it'll go to the appropriate one.

205
00:11:21.340 --> 00:11:24.213
&gt;&gt; Speaker 2: So we can test that,
so lets get rid of that Res.json,

206
00:11:25.709 --> 00:11:28.427
&gt;&gt; Speaker 2: Just gonna do nodemon.

207
00:11:30.130 --> 00:11:36.199
&gt;&gt; Speaker 2: So, now if I go back and

208
00:11:36.199 --> 00:11:44.830
do lions something's broken.

209
00:11:46.130 --> 00:11:47.090
I forgot to do next again.

210
00:11:49.935 --> 00:11:51.269
&gt;&gt; Speaker 2: Next.

211
00:11:54.114 --> 00:11:56.500
&gt;&gt; Speaker 2: There we go.

212
00:11:56.500 --> 00:11:58.160
Close enough, you go look at it.

213
00:12:00.340 --> 00:12:01.670
Otherwise, there we go.

214
00:12:01.670 --> 00:12:02.170
Sorry.

215
00:12:03.610 --> 00:12:06.170
Yeah, so it logged alliance and
then it kept going.

216
00:12:06.170 --> 00:12:08.180
Looks like it logged it twice for
some reason.

217
00:12:08.180 --> 00:12:08.680
I don't know why.

218
00:12:15.310 --> 00:12:16.010
&gt;&gt; Speaker 2: Cool.

219
00:12:17.410 --> 00:12:19.160
All right, so
back to the middleware notes.

220
00:12:19.160 --> 00:12:23.550
So that was me going off on a tangent
of error handling, middleware and

221
00:12:23.550 --> 00:12:28.030
then there is build-in middle ware
which is like express.static.

222
00:12:28.030 --> 00:12:32.170
So, express used to have tones of middle
ware build-in like bodyParser all

223
00:12:32.170 --> 00:12:36.960
of that stuff was like build in then they
broke of from connect 4.0 and took it out.

224
00:12:36.960 --> 00:12:41.076
So, now the only thing that's built
in is a few things, Express.static.

225
00:12:41.076 --> 00:12:44.100
I can't even remember the other ones,
but there's only like two, or three, or

226
00:12:44.100 --> 00:12:46.480
four useful ones that
are built into Express now.

227
00:12:46.480 --> 00:12:50.240
And if you want to access them
they're on the Express object.

228
00:12:51.420 --> 00:12:52.950
But Express.data is the most useful one.

229
00:12:54.090 --> 00:12:59.660
So whichever type of middleware, whichever
type you use, it's the same thing.

230
00:12:59.660 --> 00:13:03.790
It's still a function with the exemption
of the error handling middleware,

231
00:13:03.790 --> 00:13:06.910
which has to have that error argument.

232
00:13:06.910 --> 00:13:08.750
But every other type of middleware,

233
00:13:08.750 --> 00:13:11.090
it doesn't matter how you use them,
third party, router level,

234
00:13:11.090 --> 00:13:14.660
application level, error handling built
in.They're still just a function.

