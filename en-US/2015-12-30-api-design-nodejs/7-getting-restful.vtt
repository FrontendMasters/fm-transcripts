WEBVTT

1
00:00:00.000 --> 00:00:04.197
[MUSIC]

2
00:00:04.197 --> 00:00:06.290
&gt;&gt; Speaker 1: So now,
we're gonna be Getting RESTful.

3
00:00:07.840 --> 00:00:10.010
Does anybody wanna give me
their definition of rest?

4
00:00:10.010 --> 00:00:12.670
Not what the acronym stands for,
but what it actually means?

5
00:00:12.670 --> 00:00:13.966
Don't read mine.

6
00:00:13.966 --> 00:00:16.801
[LAUGH] He was trying to read it.

7
00:00:16.801 --> 00:00:19.104
Yo, you got your hand up?

8
00:00:19.104 --> 00:00:20.203
&gt;&gt; Speaker 2: No, I was just-
&gt;&gt; Speaker 1: I though you were

9
00:00:20.203 --> 00:00:21.139
raising, you're just.

10
00:00:21.139 --> 00:00:23.908
I was just stretching,
I wasn't really raising my hand,

11
00:00:23.908 --> 00:00:25.330
although you were like this.

12
00:00:27.470 --> 00:00:28.042
Anybody?

13
00:00:28.042 --> 00:00:31.285
I know people have some meaning of rest.

14
00:00:31.285 --> 00:00:35.794
There's no wrong answer cuz rest is
kind of, I mean, there's a 50 page

15
00:00:35.794 --> 00:00:41.220
definition on it, so I think, whatever
you're thinking of is probably right.

16
00:00:41.220 --> 00:00:43.265
So I just wanna know
what you think about it.

17
00:00:45.625 --> 00:00:47.991
&gt;&gt; Speaker 1: Nobody?

18
00:00:47.991 --> 00:00:54.929
All right, so REST is not a You
can't just NPM install REST.

19
00:00:54.929 --> 00:00:58.533
Actually, you know what,
you probably could NPM install REST.

20
00:00:58.533 --> 00:01:00.106
[COUGH] I'll take that back.

21
00:01:00.106 --> 00:01:01.748
&gt;&gt; [LAUGH]
&gt;&gt; Speaker 1: [COUGH] But

22
00:01:01.748 --> 00:01:04.301
it wouldn't be what you think it is.

23
00:01:04.301 --> 00:01:05.743
It'd be something else.

24
00:01:05.743 --> 00:01:07.774
The stuff that's on NPM these days.

25
00:01:07.774 --> 00:01:09.673
But yeah, it's not a framework.

26
00:01:09.673 --> 00:01:11.454
And it's not [COUGH] a standard.

27
00:01:11.454 --> 00:01:16.540
It's not It's not like a HTTP protocol,
it's not like something that's baked in.

28
00:01:16.540 --> 00:01:18.810
W3C will never talk about REST,

29
00:01:18.810 --> 00:01:23.250
like it's not a standard in the web,
it's just a way that we came up with.

30
00:01:23.250 --> 00:01:28.557
So the modern web is mostly built
around Rest, and as far as the acronym,

31
00:01:28.557 --> 00:01:32.741
it's just short for
Representational State Transfer.

32
00:01:32.741 --> 00:01:33.897
I think that's what it's short for.

33
00:01:33.897 --> 00:01:34.930
What does that actually mean?

34
00:01:34.930 --> 00:01:35.920
We'll get into that.

35
00:01:35.920 --> 00:01:40.883
But the basics are is that
it should be stateless.

36
00:01:40.883 --> 00:01:44.837
What I mean by stateless, I mean when I
access web service, like a server or some

37
00:01:44.837 --> 00:01:49.100
other client or whatever, when I make a
request, that request should be stateless.

38
00:01:49.100 --> 00:01:53.958
As in it shouldn't pass around
information about previous requests and

39
00:01:53.958 --> 00:01:55.160
stuff like that.

40
00:01:55.160 --> 00:01:59.896
It should be asking, or it should be
doing a request that's entirely fresh and

41
00:01:59.896 --> 00:02:03.430
entirely stateless from
the previous one or the next one.

42
00:02:03.430 --> 00:02:04.530
So completely stateless.

43
00:02:05.790 --> 00:02:08.560
Use HTTP verbs explicitly.

44
00:02:08.560 --> 00:02:13.350
So, express uses the verbs for
everything as you saw, at dot get,

45
00:02:13.350 --> 00:02:15.960
at dot post, those are the HTTP verbs.

46
00:02:15.960 --> 00:02:18.230
REST uses those verbs explicitly.

47
00:02:18.230 --> 00:02:22.493
And then they expose a directory-like
URL pattern for our routes.

48
00:02:22.493 --> 00:02:27.380
So, what I mean by that, if we go look at,
actually this is a really bad example

49
00:02:27.380 --> 00:02:30.492
on this one, but
when I say directory structure,

50
00:02:30.492 --> 00:02:34.863
it'll make more sense as we start
building the URL, but the routes for

51
00:02:34.863 --> 00:02:40.236
our requests should follow kind of like a
directory structure leading to a resource.

52
00:02:40.236 --> 00:02:42.930
And you'll see what that
means in a little bit.

53
00:02:42.930 --> 00:02:44.370
That's horrible spelling.

54
00:02:44.370 --> 00:02:47.047
And also,
it's a transfer of JSON or an XML.

55
00:02:47.047 --> 00:02:50.710
Mostly JSON in nowadays age but
XML is still around.

56
00:02:50.710 --> 00:02:53.180
So that's usually,
when I think about REST,

57
00:02:53.180 --> 00:02:54.720
that's what I think about,
those four things.

58
00:02:55.730 --> 00:03:00.706
Stateless, using the verbs,
directory like URL pattern for

59
00:03:00.706 --> 00:03:04.926
the routes, and emits and
consumes JSON and or XML.

60
00:03:04.926 --> 00:03:05.972
That's it.

61
00:03:05.972 --> 00:03:10.130
There are some smaller details that I
encourage you to read up on if you wanna

62
00:03:10.130 --> 00:03:12.110
get really good with it, but yeah,

63
00:03:12.110 --> 00:03:15.800
I would say Rails probably
make RESTful very popular.

64
00:03:15.800 --> 00:03:19.820
But REST is definitely the thing.

65
00:03:19.820 --> 00:03:24.390
Comparing it to other things like soap and
other standards out there, REST is

66
00:03:24.390 --> 00:03:28.190
the thing and can do the same think as
those other different types of paradigms.

67
00:03:30.280 --> 00:03:35.258
So there are a ton of tools out there to
assist with designing of your RESTful API.

68
00:03:35.258 --> 00:03:39.630
There are startups whose job is to give
you tools to help you design and document

69
00:03:39.630 --> 00:03:44.860
an API and then even those tools will go
as far as grabbing your API documentation

70
00:03:44.860 --> 00:03:49.140
and creating an API server for you,
just for mocks not for production.

71
00:03:49.140 --> 00:03:53.440
So it's very important, it's very,
it can be very tough modeling an API.

72
00:03:53.440 --> 00:03:55.996
So there are tools out there
that help you with that.

73
00:03:55.996 --> 00:03:57.505
We will not be using those tools.

74
00:03:57.505 --> 00:03:59.910
For one,
our APIs are not gonna be that complex.

75
00:03:59.910 --> 00:04:03.530
And two, you still need to learn
how to design API yourself and

76
00:04:03.530 --> 00:04:04.168
get going with this.

77
00:04:04.168 --> 00:04:07.630
So we won't be using some of
those tools but they do exist.

78
00:04:07.630 --> 00:04:11.060
If you get to the point where you want to
abstract some of the basic stuff away and

79
00:04:11.060 --> 00:04:13.470
you get a good feeling what REST is.

