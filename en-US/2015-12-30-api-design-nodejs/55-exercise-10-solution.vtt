WEBVTT

1
00:00:00.000 --> 00:00:03.873
[MUSIC]

2
00:00:03.873 --> 00:00:07.435
&gt;&gt; Speaker 1: So the solution is actually
very similar to what we did with the lions

3
00:00:07.435 --> 00:00:10.996
and tigers, it's why I walked us
through that exercise on day one,

4
00:00:10.996 --> 00:00:14.230
is because we build up to this,
it's the exact same thing.

5
00:00:14.230 --> 00:00:16.827
The only thing we did
was we just replaced,

6
00:00:16.827 --> 00:00:21.821
cuz remember when we did lions and tigers,
we actually started off doing the app.

7
00:00:21.821 --> 00:00:27.595
We had app.get and app.post and app.put.

8
00:00:27.595 --> 00:00:31.109
And then we refactored and
we had subrouters, and

9
00:00:31.109 --> 00:00:34.466
then we had the router.get and
router.post.

10
00:00:34.466 --> 00:00:37.540
And then we made a quick refactor and
we used the router.route.

11
00:00:37.540 --> 00:00:40.220
Which just groups current routes together.

12
00:00:40.220 --> 00:00:44.800
And the only thing that changed from that
to this is that now the functions that we

13
00:00:44.800 --> 00:00:47.480
passed into the lions and
tigers are in the other files.

14
00:00:48.800 --> 00:00:50.410
That's the only thing that's changed.

15
00:00:50.410 --> 00:00:51.520
Nothing else has changed.

16
00:00:51.520 --> 00:00:52.560
They're just in another file now.

17
00:00:56.190 --> 00:00:59.430
And those functions,
as we saw the last exercise,

18
00:00:59.430 --> 00:01:02.560
do the exact same thing as
the functions in lions and tigers did.

19
00:01:02.560 --> 00:01:06.100
They just interact with the database now,
and not an array of lions or tigers.

20
00:01:09.270 --> 00:01:11.350
So we just switched out two things,
put them in another file,

21
00:01:11.350 --> 00:01:13.560
talk to the database, that's it.

22
00:01:13.560 --> 00:01:15.195
Everything else is exactly the same.

23
00:01:17.851 --> 00:01:20.893
&gt;&gt; Speaker 1: So knowing that, if you were
lost you could have either skipped ahead

24
00:01:20.893 --> 00:01:23.201
and looked at this, or
looked back over the lines and

25
00:01:23.201 --> 00:01:26.580
tags and saw how we did the routing and
saw it was very similar to this.

26
00:01:26.580 --> 00:01:30.750
So as far as requests to the root,

27
00:01:30.750 --> 00:01:33.370
we know that's getting up close
because we don't need IDs for that.

28
00:01:33.370 --> 00:01:36.628
To create this resource, you don't need
an ID because you're trying to create it.

29
00:01:36.628 --> 00:01:38.530
So let's do a get request of that.

30
00:01:38.530 --> 00:01:41.500
I'm sorry, a post request of that.

31
00:01:41.500 --> 00:01:42.780
You don't need an ID to do it.

32
00:01:42.780 --> 00:01:43.510
Get request for

33
00:01:43.510 --> 00:01:46.430
all of them, you also don't need
an ID because you want all of them.

34
00:01:46.430 --> 00:01:52.780
So that's why register these two here,
because controller.get finds all of them.

35
00:01:56.563 --> 00:02:03.087
And then controller.post creates one.

36
00:02:06.838 --> 00:02:09.050
&gt;&gt; Speaker 1: All right.
And then for the ones with IDs,

37
00:02:09.050 --> 00:02:11.186
we know that if we wanna get one,

38
00:02:11.186 --> 00:02:15.317
if we wanna update one or
if we wanna delete one, we need an ID.

39
00:02:15.317 --> 00:02:16.914
So, that's how we registered these here.

40
00:02:24.843 --> 00:02:26.025
&gt;&gt; Speaker 1: And as you probably see now,

41
00:02:26.025 --> 00:02:28.990
that's why the controller methods
were named the way they were named.

42
00:02:31.350 --> 00:02:34.814
Cuz they were going with their appropriate
verb with the exception of get1 cuz there

43
00:02:34.814 --> 00:02:35.560
is no get1 verb.

44
00:02:38.180 --> 00:02:39.030
So that's that, and then for

45
00:02:39.030 --> 00:02:43.280
the param, there's a controller.params
function that we could run.

46
00:02:43.280 --> 00:02:44.460
So that's why it passed out in here.

47
00:02:44.460 --> 00:02:48.150
So router.param, it's important that
this at the top for the at the top.

48
00:02:51.260 --> 00:02:52.190
This is down here.

49
00:02:55.050 --> 00:03:00.150
I can't guarantee that it will work the
same, cuz technically this middleware but,

50
00:03:00.150 --> 00:03:01.950
I'm not sure if it's
running off middleware, or

51
00:03:01.950 --> 00:03:07.370
if it's running off an event of seeing the
ID, because express does eventing as well,

52
00:03:07.370 --> 00:03:11.750
like it'll fire this event for
this route and this combination of verb.

53
00:03:11.750 --> 00:03:16.190
So, depending on how it handles that ID,
the placing could be important.

54
00:03:16.190 --> 00:03:18.799
So, if you need it to happen first,
just put it up top.

55
00:03:21.050 --> 00:03:22.170
Did everybody get what I say there?

56
00:03:22.170 --> 00:03:25.100
The reason I'm saying I don't
know about the placing is because

57
00:03:25.100 --> 00:03:26.630
technically this is gonna be middleware.

58
00:03:26.630 --> 00:03:29.790
And what we know about middleware
is that if it's registered first

59
00:03:29.790 --> 00:03:30.660
it will happen first.

60
00:03:30.660 --> 00:03:32.100
So, that's why I say put it up top.

61
00:03:32.100 --> 00:03:35.500
But also,
it's expecting this ID property, and

62
00:03:35.500 --> 00:03:40.920
I know that these routes, the reason why
when you called next inside of a middle

63
00:03:40.920 --> 00:03:45.060
word it only goes to one of these, and not
all of them, even though they're siblings,

64
00:03:45.060 --> 00:03:50.290
is because it matches a combination
of a verb and a route.

65
00:03:50.290 --> 00:03:51.210
It fires an event for that.

66
00:03:53.080 --> 00:03:56.080
So I'm not sure if it also
does the same thing for this.

67
00:03:56.080 --> 00:03:58.530
If it did do that,
then it doesn't matter where we put this,

68
00:03:58.530 --> 00:04:00.820
just like it doesn't
matter where we put these.

69
00:04:00.820 --> 00:04:02.600
Doesn't matter what order we put these in,

70
00:04:02.600 --> 00:04:05.270
because they only happen
on a certain combination.

71
00:04:05.270 --> 00:04:08.230
So I'm not sure exactly how
Express handles that, so

72
00:04:08.230 --> 00:04:09.629
just to guarantee I'm
gonna put it up here.

73
00:04:11.400 --> 00:04:12.090
Yes.

74
00:04:12.090 --> 00:04:13.740
&gt;&gt; Speaker 2: There's a question,
this is from a little while ago,

75
00:04:13.740 --> 00:04:17.830
but is the reason we extracted
the controller code into its own

76
00:04:17.830 --> 00:04:20.890
files instead of inserting them
directly inside the route so

77
00:04:20.890 --> 00:04:25.410
that we can use that code elsewhere
by other routes and controllers?

78
00:04:25.410 --> 00:04:28.240
&gt;&gt; Speaker 1: For
higher level abstractions, yes.

79
00:04:28.240 --> 00:04:32.130
For the other reason is because,
if you go look at our controllers,

80
00:04:32.130 --> 00:04:33.610
these are actually pretty small.

81
00:04:33.610 --> 00:04:37.340
Realistically, you start getting,
if our models were bigger,

82
00:04:37.340 --> 00:04:40.400
which they are not,
these controls would be much bigger,

83
00:04:40.400 --> 00:04:45.160
especially if we start getting into
like you know, now we're caching.

84
00:04:45.160 --> 00:04:46.870
We're calling other services.

85
00:04:46.870 --> 00:04:48.030
We're doing other things.

86
00:04:48.030 --> 00:04:49.150
We're doing multiple queries.

87
00:04:49.150 --> 00:04:50.290
Nested queries.

88
00:04:50.290 --> 00:04:53.870
This controller file could be 100s and
100s and 100s of lines.

89
00:04:53.870 --> 00:04:56.820
And having that mixed in with the file
that's also registering the routes is

90
00:04:56.820 --> 00:04:58.360
kind of confusing.

91
00:04:58.360 --> 00:05:02.989
And also now because these
methods are exposed,

92
00:05:05.480 --> 00:05:08.710
I could probably test them now,
cuz they're exported individually.

93
00:05:08.710 --> 00:05:12.240
I still have to mock out the requested
response, and all this stuff.

94
00:05:12.240 --> 00:05:14.510
So we might wanna build
an abstraction around that.

95
00:05:14.510 --> 00:05:18.690
But now these things are exported, and
I can test them individually as units,

96
00:05:18.690 --> 00:05:21.530
whereas if I just put them all in
this file inside this call back,

97
00:05:21.530 --> 00:05:23.925
it's gonna be kinda hard to test them.

98
00:05:23.925 --> 00:05:27.140
Cuz that call back never gets ran
unless that route gets hit, and

99
00:05:27.140 --> 00:05:28.880
I can't hit that route until I call it.

100
00:05:28.880 --> 00:05:31.280
If I call the route, I may as well
be doing integration testing and

101
00:05:31.280 --> 00:05:31.910
not unit testing.

102
00:05:31.910 --> 00:05:38.660
So, there's a few reasons I did that,

103
00:05:38.660 --> 00:05:42.260
organization, testability,
and just sanity.

104
00:05:45.310 --> 00:05:45.970
Any other questions?

105
00:05:48.040 --> 00:05:50.210
So, all the files look exactly like this.

106
00:05:50.210 --> 00:05:54.480
The only difference between the other
routes in the files is the path to where

107
00:05:54.480 --> 00:05:55.770
it's getting its controller.

108
00:05:55.770 --> 00:05:57.430
Everything else is exactly the same.

109
00:05:57.430 --> 00:06:01.130
So if we go look at Post routes,
it's the same thing.

110
00:06:01.130 --> 00:06:02.330
It's just getting this controller here.

111
00:06:02.330 --> 00:06:03.140
Everything is the same.

112
00:06:03.140 --> 00:06:04.000
The code doesn't change here.

113
00:06:10.404 --> 00:06:13.058
&gt;&gt; Speaker 1: So yeah, you might be
thinking, I could just make a file or

114
00:06:13.058 --> 00:06:16.880
functions called create routes and
it takes in the controller.

115
00:06:16.880 --> 00:06:19.360
And it just sets up in a router and
it sets up all the routes on it.

116
00:06:19.360 --> 00:06:21.513
Yeah, you could do that,
cuz it's all the same.

117
00:06:21.513 --> 00:06:25.367
You can totally do that,all the
controllers and the same property names

118
00:06:25.367 --> 00:06:29.347
they all went to same routes, yeah we
can just make a function called create

119
00:06:29.347 --> 00:06:32.530
controller somewhere else
maybe in utility or something.

120
00:06:33.800 --> 00:06:36.940
Require that in here and
just say create routes and

121
00:06:36.940 --> 00:06:39.490
pass in the appropriate controller in
appropriate router, and you're done,

122
00:06:39.490 --> 00:06:40.890
you only write this thing one time.

123
00:06:44.151 --> 00:06:47.606
&gt;&gt; Speaker 1: In fact let's just do it,
so you can see what I'm talking about.

124
00:06:47.606 --> 00:06:53.725
So if we go into utils, and
I make a new file called createRoutes,

125
00:06:53.725 --> 00:07:00.760
I can just say module.exports =
a function that takes in the controller.

126
00:07:02.490 --> 00:07:02.990
Enter router.

127
00:07:04.440 --> 00:07:07.241
And all it's going to do is this.

128
00:07:21.747 --> 00:07:23.039
&gt;&gt; Speaker 1: That's it.
That's all it's gonna do.

129
00:07:23.039 --> 00:07:24.175
It's gonna do this.

130
00:07:27.240 --> 00:07:29.563
&gt;&gt; Speaker 1: Now what I can do is,
I can just get rid of the stuff.

131
00:07:29.563 --> 00:07:33.466
Keep the exports at the bottom, and

132
00:07:33.466 --> 00:07:38.160
i can just say var createRoutes= required

133
00:07:43.119 --> 00:07:45.407
&gt;&gt; Speaker 1: And out API, or

134
00:07:45.407 --> 00:07:49.631
out of category, out API and

135
00:07:49.631 --> 00:07:55.264
the utils or utils and createRoutes.

136
00:07:55.264 --> 00:07:57.816
So now I'm gonna say yeah,
this is createRoutes and

137
00:07:57.816 --> 00:08:01.595
so I'm gonna go ahead and invoke it right
here, it's just too long of a line.

138
00:08:01.595 --> 00:08:07.645
So, I'll say, createRoutes(controller,

139
00:08:07.645 --> 00:08:11.590
router) and then that's it.

140
00:08:11.590 --> 00:08:15.128
And I can do this in all the files.

141
00:08:15.128 --> 00:08:17.236
I'll just about as copy this,

142
00:08:17.236 --> 00:08:22.683
these two lines put down here,ot rid of
all this and just replaced it with that.

143
00:08:22.683 --> 00:08:28.401
Got rid of all this and
just replaced it with that.

144
00:08:28.401 --> 00:08:29.090
It'll still work the same.

145
00:08:32.272 --> 00:08:34.550
&gt;&gt; Speaker 1: Right,
so it's an abstraction.

146
00:08:34.550 --> 00:08:38.374
So we just wrote it once here,
and it does the same thing.

