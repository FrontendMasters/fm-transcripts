WEBVTT

1
00:00:00.025 --> 00:00:00.586
&gt;&gt; [MUSIC]

2
00:00:00.586 --> 00:00:06.628
&gt;&gt; Scott Moss: I'm curious what are some
other strategies that people use?

3
00:00:06.628 --> 00:00:13.467
Anybody use something that's different?
&gt;&gt; Scott Moss: Everybody

4
00:00:13.467 --> 00:00:14.420
did it exactly like this?

5
00:00:14.420 --> 00:00:14.920
I doubt it.

6
00:00:15.930 --> 00:00:17.130
Unless you looked at the next branch.

7
00:00:19.020 --> 00:00:21.160
So I know you used provinces.
&gt;&gt; Student: I used provinces,

8
00:00:21.160 --> 00:00:24.040
yeah.
&gt;&gt; Scott Moss: Who

9
00:00:24.040 --> 00:00:24.960
else did something different?

10
00:00:26.810 --> 00:00:29.519
No.
&gt;&gt; Mark: Just asking on line five, the way

11
00:00:29.519 --> 00:00:34.220
you wrote line, is that a style thing?
&gt;&gt; Scott Moss: No it was just

12
00:00:34.220 --> 00:00:37.040
I don't know I'm just picky about how this
stuff prints out in the terminal, and

13
00:00:37.040 --> 00:00:41.320
like if it didn't,
like if I get rid of it.

14
00:00:41.320 --> 00:00:46.450
It just didn't show up well enough for
me so just put brackets around it.

15
00:00:46.450 --> 00:00:47.850
That didn't show up well enough for me.

16
00:00:47.850 --> 00:00:52.460
I was like I'm gonna put brackets
around it so it shows up better.

17
00:00:52.460 --> 00:00:57.260
That's it, yeah, it's just a style thing,
so that's why I put brackets around it.

18
00:00:58.330 --> 00:01:00.410
Even then, I'm still not
satisfied the way it looks, so

19
00:01:00.410 --> 00:01:02.040
I might change the color of it or
something.

20
00:01:04.780 --> 00:01:09.040
What you could do you could NPM install
colors and change the color of this thing

21
00:01:09.040 --> 00:01:12.080
to like yellow or
something like which is pretty cool.

22
00:01:12.080 --> 00:01:18.420
So if I say require colors

23
00:01:20.340 --> 00:01:25.030
and then npm install save dev colors.

24
00:01:28.130 --> 00:01:29.090
And then now when I run this,

25
00:01:29.090 --> 00:01:31.407
it'll be yellow.
&gt;&gt; Student: That's

26
00:01:31.407 --> 00:01:32.769
cool.
&gt;&gt; Scott Moss: Yeah.

27
00:01:36.311 --> 00:01:37.510
&gt;&gt; Scott Moss: Yes?

28
00:01:37.510 --> 00:01:39.171
&gt;&gt; Mark: Is there a way to use test data

29
00:01:39.171 --> 00:01:41.805
like data stored externally for
creating and

30
00:01:41.805 --> 00:01:45.500
inserting?
&gt;&gt; Scott Moss: Yeah,

31
00:01:45.500 --> 00:01:46.690
there's totally a way to do that.

32
00:01:46.690 --> 00:01:50.730
We will get to that after we get to
actually creating the API for the.

33
00:01:50.730 --> 00:01:55.110
So yeah, we will be using databases for
assertions, and having like a different

34
00:01:55.110 --> 00:01:58.770
test database versus a development
database versus a production database.

35
00:01:59.930 --> 00:02:02.100
And how to switch those off, so
you'll have to do it manually.

36
00:02:02.100 --> 00:02:03.400
Yes?
&gt;&gt; Student: Can you go back to the spec

37
00:02:03.400 --> 00:02:04.330
file?
&gt;&gt; Scott Moss: Yep.

38
00:02:06.722 --> 00:02:07.222
&gt;&gt; Student: Line 12

39
00:02:07.222 --> 00:02:09.340
there.
&gt;&gt; Scott Moss: Yup.

40
00:02:09.340 --> 00:02:10.620
This one?
&gt;&gt; Student: Yeah.

41
00:02:10.620 --> 00:02:12.520
What is that second parameter?
&gt;&gt; Scott Moss: That's

42
00:02:12.520 --> 00:02:13.030
a regex.
&gt;&gt; Student: Gotcha.

43
00:02:15.660 --> 00:02:16.580
&gt;&gt; Scott Moss: So it's, so

44
00:02:16.580 --> 00:02:17.930
yeah.
&gt;&gt; Student: And then on line 13,

45
00:02:17.930 --> 00:02:21.030
it says expect and
it just has the number 200.

46
00:02:21.030 --> 00:02:23.625
How does it know that
that's a status code that

47
00:02:23.625 --> 00:02:25.010
[INAUDIBLE]?
&gt;&gt; Scott Moss: Well,

48
00:02:25.010 --> 00:02:27.740
the only thing I can think of that it
knows it's a status code is cuz there's no

49
00:02:27.740 --> 00:02:32.570
other thing on this request that would
just be a number than a status code.

50
00:02:32.570 --> 00:02:34.350
So I guess it just assumes that.

51
00:02:34.350 --> 00:02:37.430
Cuz I can't think of anything else
that you would put just a number in,

52
00:02:37.430 --> 00:02:38.010
and it would be that.

53
00:02:38.010 --> 00:02:42.490
Like everything else has like you know a
key value fair content type like headers.

54
00:02:42.490 --> 00:02:45.820
But status code is just a number so
I'm guessing that's how they know.

55
00:02:45.820 --> 00:02:47.400
&gt;&gt; Student: And then prior to line 14,

56
00:02:47.400 --> 00:02:52.660
you can't go digging through the response
to start extracting JSON data, you have to

57
00:02:52.660 --> 00:02:56.442
be passed line 14 is that correct?
&gt;&gt; Scott Moss: You have to be in the .end

58
00:02:56.442 --> 00:02:57.560
callback, yeah.

59
00:02:57.560 --> 00:03:00.260
You have to be inside it to callback.

60
00:03:00.260 --> 00:03:01.610
So I could just get rid of all this.

61
00:03:01.610 --> 00:03:03.570
I don't need this stuff here.

62
00:03:03.570 --> 00:03:05.180
Oops, get out of here.

63
00:03:05.180 --> 00:03:06.730
I don't need any of this
stuff here except for that.

64
00:03:08.520 --> 00:03:11.185
I just can't, I don't get access
to the response till I call

65
00:03:11.185 --> 00:03:17.307
.end.
&gt;&gt; Scott Moss: All right,

66
00:03:17.307 --> 00:03:21.220
if I didn't wanna test, for
instance let me show you.

67
00:03:21.220 --> 00:03:25.080
If I got rid of all that and
I said console.log the response.

68
00:03:25.080 --> 00:03:28.180
I get all the stuff
that I just got rid of.

69
00:03:28.180 --> 00:03:29.140
I get the status code,

70
00:03:29.140 --> 00:03:31.650
I get the headers, everything on
the response is still here on the resp.

71
00:03:33.370 --> 00:03:34.840
Right here's the entire response object.

72
00:03:34.840 --> 00:03:35.340
It's huge.

73
00:03:36.400 --> 00:03:40.240
So I can look at that too if I wanna get
the status code and everything else.

74
00:03:40.240 --> 00:03:44.180
It's just those methods are just as
you can see the object was huge.

75
00:03:44.180 --> 00:03:45.730
So those methods just test it for

76
00:03:45.730 --> 00:03:50.896
us [INAUDIBLE]
Yeah.

77
00:03:55.599 --> 00:03:56.330
&gt;&gt; Scott Moss: Any other

78
00:03:56.330 --> 00:04:05.910
questions?
&gt;&gt; Scott Moss: Cool.

79
00:04:05.910 --> 00:04:09.360
All right, so that was testing.

80
00:04:09.360 --> 00:04:13.550
So, more of less that's how
integration testing is.

81
00:04:13.550 --> 00:04:16.890
Of course it gets more difficult when
you start dealing with things like

82
00:04:16.890 --> 00:04:19.470
databases and like authentication.

83
00:04:19.470 --> 00:04:24.020
Then you have to create fixtures and
mocks and stuff like that.

84
00:04:24.020 --> 00:04:25.480
So yeah, it will get more complicated.

85
00:04:25.480 --> 00:04:30.920
But once you get past all those details,
when you get to like, finally, I created

86
00:04:30.920 --> 00:04:34.570
my mocks, the database is good to go, all
this stuff is here, my pictures are made.

87
00:04:34.570 --> 00:04:36.530
And when you get to actually testing,
it'll be like that.

88
00:04:38.090 --> 00:04:40.370
It's like, make a request to the server,

89
00:04:40.370 --> 00:04:45.490
make some assertions on what
the server responds back with and

90
00:04:45.490 --> 00:04:48.720
then you've gotta like clean up,
now it cleans this stuff up.

91
00:04:48.720 --> 00:04:51.390
So for instance like if we go
back to our test if we were

92
00:04:51.390 --> 00:04:56.340
actually like posting to a database,
just to ensure that the next test had like

93
00:04:56.340 --> 00:04:58.630
fresh data that wasn't messing
around with other data.

94
00:04:58.630 --> 00:05:03.240
We do like an after each and afterEach,
drop the database or something like that.

95
00:05:04.830 --> 00:05:07.550
Or afterEach,
get rid of all the lines in the database.

96
00:05:07.550 --> 00:05:10.263
So we know that it won't interfere with
the next test coming out that needs

97
00:05:10.263 --> 00:05:14.885
it.
&gt;&gt; Scott Moss: That's why it's important

98
00:05:14.885 --> 00:05:17.382
to have a different testing database
then a production database.

99
00:05:17.382 --> 00:05:20.680
[LAUGH] Or even a development database.

100
00:05:20.680 --> 00:05:27.134
Should just separate those two.
&gt;&gt; Scott Moss: Any

101
00:05:27.134 --> 00:05:30.420
questions?
&gt;&gt; Mark: There were a couple that came in.

102
00:05:30.420 --> 00:05:30.920
Let's see a couple.

103
00:05:35.070 --> 00:05:38.640
In general, is unit testing node code
done in real world applications, or

104
00:05:38.640 --> 00:05:41.710
do you mostly do integration testing?
&gt;&gt; Scott Moss: Yeah,

105
00:05:41.710 --> 00:05:45.330
I definitely do unit testing in the node
world cuz, I mean, quite honestly,

106
00:05:45.330 --> 00:05:48.330
you just don't use node for servers,
node is used for a lot of things.

107
00:05:48.330 --> 00:05:52.290
Like tooling, some of the most popular
tooling out there today is built on node.

108
00:05:52.290 --> 00:05:56.230
Gulp, Grunt, they're not servers,
they're all just command line tools so

109
00:05:56.230 --> 00:05:57.580
they are nothing but unit tested.

110
00:05:57.580 --> 00:06:00.840
So you definitely will use unit testing
It's just that if you go look at the code

111
00:06:00.840 --> 00:06:07.620
that we wrote, for
instance go look at lions.js,

112
00:06:07.620 --> 00:06:10.720
all the functionality that we care
about is inside of a callback.

113
00:06:10.720 --> 00:06:12.970
It's kind of hard to unit test, right?

114
00:06:12.970 --> 00:06:17.280
Cuz this code doesn't even get
ran until Express fires this.

115
00:06:17.280 --> 00:06:20.900
And Express doesn't fire this until you
start the server and hit the route.

116
00:06:20.900 --> 00:06:22.190
So it's kinda hard to unit test so

117
00:06:22.190 --> 00:06:24.190
we didn't really write good
code to be able to unit test.

118
00:06:24.190 --> 00:06:27.190
There's only one function in here
that's not inside of a callback, and

119
00:06:27.190 --> 00:06:29.990
it's this update id, and
it's not even being exported.

120
00:06:29.990 --> 00:06:32.560
So we still couldn't test it,
we'd have to export it, alright, so

121
00:06:32.560 --> 00:06:34.580
we really can't write good unit test for
our code.

122
00:06:35.730 --> 00:06:38.250
So integration test was our only option.

123
00:06:38.250 --> 00:06:39.819
We could write unit test,
it would just be,

124
00:06:41.130 --> 00:06:44.520
we get to the point where we start
unit testing express itself.

125
00:06:44.520 --> 00:06:47.280
We'll be like all right,
I'm going to write a unit test on

126
00:06:47.280 --> 00:06:50.220
this router to make sure
that it has these routes.

127
00:06:50.220 --> 00:06:52.270
Then you start to get into what
the express is already doing.

128
00:06:52.270 --> 00:06:57.050
So, any other questions?
&gt;&gt; Mark: And then the next one is, is it

129
00:06:57.050 --> 00:07:01.510
a best practice to write separate describe
statements for just crud operations?

130
00:07:01.510 --> 00:07:03.900
Or should you get more granular?

131
00:07:03.900 --> 00:07:07.920
For example, it should respond with JSON?
&gt;&gt; Scott Moss: Yeah you should

132
00:07:07.920 --> 00:07:10.430
be as granular as possible
on your descriptions.

133
00:07:10.430 --> 00:07:13.550
And I think you can use as
many describes as you want.

134
00:07:13.550 --> 00:07:16.730
I don't think there's a limit on
that because whatever is right for

135
00:07:16.730 --> 00:07:17.250
you, you can do it.

136
00:07:17.250 --> 00:07:23.280
I would say if it makes sense
organizational then do it.

137
00:07:23.280 --> 00:07:26.610
This example here is not the go-to.

138
00:07:26.610 --> 00:07:28.590
This is not exactly how you
should write your test.

139
00:07:28.590 --> 00:07:30.730
This is just how you write tests.

140
00:07:30.730 --> 00:07:33.760
But I think it's gotta differ
depending on what you're doing.

141
00:07:33.760 --> 00:07:35.490
So you can do nested.

142
00:07:35.490 --> 00:07:41.040
You can put another describe here and
it will totally be the same.

143
00:07:41.040 --> 00:07:44.500
Then if you put a before each or

144
00:07:44.500 --> 00:07:48.350
it in here then that is gonna
be scoped to this describe.

145
00:07:48.350 --> 00:07:54.430
So yeah, you can do whatever you want.
&gt;&gt; Mark: And then what's the difference

146
00:07:54.430 --> 00:07:59.550
between a mock and a fixture?
&gt;&gt; Scott Moss: A mock is like.

147
00:08:03.280 --> 00:08:07.870
So this lion is like a mock.

148
00:08:09.020 --> 00:08:10.480
This is a mock lion.

149
00:08:10.480 --> 00:08:11.510
So mock data.

150
00:08:11.510 --> 00:08:14.440
A fixture could have a mock in it, but

151
00:08:14.440 --> 00:08:19.320
a fixture is more like,
I don't know the words to describe it.

152
00:08:19.320 --> 00:08:22.560
A fixture is more like your mocking not
just the data you're sending in, but

153
00:08:22.560 --> 00:08:24.670
kinda like the environment, too.

154
00:08:24.670 --> 00:08:28.920
You wanna make sure that
this code is gonna run

155
00:08:28.920 --> 00:08:30.920
exactly the same way in
the certain environment.

156
00:08:32.480 --> 00:08:34.440
I don't really have
a better way to explain it.

157
00:08:34.440 --> 00:08:35.340
I'll get back to that question.

158
00:08:35.340 --> 00:08:37.352
I wanna look up something better than that

159
00:08:37.352 --> 00:08:41.266
explanation.
&gt;&gt; Scott Moss: If somebody else has

160
00:08:41.266 --> 00:08:42.722
a better explanation that would be great,
but

161
00:08:42.722 --> 00:08:46.490
if not I'll look it up.
&gt;&gt; Mark: And then the last one is,

162
00:08:46.490 --> 00:08:49.400
are there frameworks that
support mocking objects?

163
00:08:49.400 --> 00:08:50.550
&gt;&gt; Scott Moss: Yeah, Chai does.

164
00:08:50.550 --> 00:08:53.150
So Chai has, it is a mocking.

165
00:08:55.350 --> 00:09:02.670
Chai, mocks.
Is it Sinon Chai?

166
00:09:02.670 --> 00:09:04.195
No, it's not Sinon Chai, it's just Chai.

167
00:09:05.860 --> 00:09:06.360
Let's see.

168
00:09:07.890 --> 00:09:09.990
The thing is that you have
to download a plugin for it.

169
00:09:09.990 --> 00:09:10.490
Let's see.

170
00:09:12.856 --> 00:09:14.729
There's so may plugins for Chai, but yeah,

171
00:09:14.729 --> 00:09:17.063
Chai definitely has a mocking
library that you can use.

172
00:09:17.063 --> 00:09:19.390
And that's why I use, if I use mocks.

173
00:09:19.390 --> 00:09:22.180
But there are tons of other ones
out there too, that work very well.

174
00:09:23.220 --> 00:09:24.960
Sign on JS is a popular one.

175
00:09:24.960 --> 00:09:25.700
Sign on J.

176
00:09:25.700 --> 00:09:26.760
How could I forget that one?

177
00:09:26.760 --> 00:09:27.260
Sign on JS.

178
00:09:33.880 --> 00:09:35.020
Cool, and other questions?

179
00:09:40.940 --> 00:09:45.300
Cool all right.
&gt;&gt; Mark: One literally just

180
00:09:45.300 --> 00:09:46.340
came in.
&gt;&gt; Scott Moss: Okay.

181
00:09:47.620 --> 00:09:48.940
&gt;&gt; Mark: When you run multiple tests

182
00:09:48.940 --> 00:09:51.020
are objects destroyed before each test?

183
00:09:51.020 --> 00:09:55.200
For example in this case if I run
the sequence to create line only once.

184
00:09:55.200 --> 00:09:58.890
Get update delete, will it work or
do I have to create a line for

185
00:09:58.890 --> 00:10:04.060
each test.
&gt;&gt; Scott Moss: Say that again let me see,

186
00:10:05.570 --> 00:10:09.380
so I think when they say each test I
don't know if they're talking about

187
00:10:09.380 --> 00:10:13.480
each it block or
each run through the test I'm not sure.

188
00:10:13.480 --> 00:10:18.430
But if we're talking about each test
like if I run the test here and

189
00:10:18.430 --> 00:10:19.780
then I run it again.

190
00:10:19.780 --> 00:10:21.910
Does the stuff stay there?

191
00:10:21.910 --> 00:10:22.410
No.

192
00:10:22.410 --> 00:10:24.460
It doesn't stay there because
we don't have a database.

193
00:10:24.460 --> 00:10:27.380
So the server starts, and
then the server stops.

194
00:10:27.380 --> 00:10:30.700
So everything,
all the lines that were held in that array

195
00:10:30.700 --> 00:10:32.990
in memory is gone cuz
the server is shut down.

196
00:10:32.990 --> 00:10:34.000
But what we're talking about

197
00:10:35.250 --> 00:10:39.500
does the objects get destroyed
between these different it's here?

198
00:10:39.500 --> 00:10:41.750
No, because the server's
running the entire time.

199
00:10:41.750 --> 00:10:44.290
So, the server starts here,
it's still running.

200
00:10:48.540 --> 00:10:52.950
I think the server is still running
here because it's request started.

201
00:10:52.950 --> 00:10:55.743
It doesn't get destroyed until you
destroy it or the server shuts down.

202
00:11:06.797 --> 00:11:08.727
&gt;&gt; Scott Moss: All right, sweet.

203
00:11:08.727 --> 00:11:10.610
So, we got through testing.

204
00:11:10.610 --> 00:11:13.320
We will be doing more testing, but
this is the first part of testing.

205
00:11:13.320 --> 00:11:15.019
How's everybody feel about testing?

206
00:11:16.800 --> 00:11:17.300
Okay.

207
00:11:18.450 --> 00:11:19.750
Feel good?

208
00:11:19.750 --> 00:11:22.540
Good, it's really not hard,
Express makes it easy for testing.

209
00:11:22.540 --> 00:11:26.002
I really like testing with Express,
it's almost fun,

210
00:11:26.002 --> 00:11:31.062
in my opinion.
&gt;&gt; Scott Moss: Especially if

211
00:11:31.062 --> 00:11:35.660
you have a good authentication system set
up like JSON web tokens, it's really fun.

