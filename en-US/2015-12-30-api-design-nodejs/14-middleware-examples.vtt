WEBVTT

1
00:00:00.000 --> 00:00:04.064
[MUSIC]

2
00:00:04.064 --> 00:00:06.900
&gt;&gt; Scott Moss: So here's gonna be
more examples of how to use it.

3
00:00:08.320 --> 00:00:12.680
So here's one piece of middleware that
I highly recommend you take note of.

4
00:00:12.680 --> 00:00:14.100
You will be using it
probably in the next step.

5
00:00:14.100 --> 00:00:18.160
Morgan, Morgan will log all the requests
in the terminal as they come in So

6
00:00:18.160 --> 00:00:19.400
that's the 3rd party middleware.

7
00:00:19.400 --> 00:00:21.120
We MPM installed it and
then we required it.

8
00:00:22.700 --> 00:00:25.951
Here's an arbitrary piece of middleware
called checkAuth and we made it,

9
00:00:25.951 --> 00:00:28.425
you know we made it because
there's a ./ in front of it,

10
00:00:28.425 --> 00:00:32.052
that means it's coming from our files and
it's a piece of middleware that we made.

11
00:00:34.693 --> 00:00:37.691
&gt;&gt; Scott Moss: So
we globally set up morgan, app.use And

12
00:00:37.691 --> 00:00:44.400
then here's an example of like actually
placing middleware on the route itself.

13
00:00:44.400 --> 00:00:45.540
So you can also do that.

14
00:00:45.540 --> 00:00:50.640
So this is application level,
this is like a route level.

15
00:00:50.640 --> 00:00:53.410
Not exactly router level,
we'll get into router level.

16
00:00:53.410 --> 00:00:55.210
But this is like a route level.

17
00:00:55.210 --> 00:01:00.550
So when I do get request to slice to
do is, first run this middleware.

18
00:01:00.550 --> 00:01:01.250
And see what it does.

19
00:01:01.250 --> 00:01:03.900
This middleware can respond
back to the client.

20
00:01:03.900 --> 00:01:05.270
Look like a 401 unauthorized array.

21
00:01:05.270 --> 00:01:08.510
Or you can say, yeah you're good,
I checked the data base, next.

22
00:01:08.510 --> 00:01:10.970
And then come here.

23
00:01:10.970 --> 00:01:15.630
So we can put as many comma separated
middleware as we want right here.

24
00:01:15.630 --> 00:01:18.180
We can also just pass in an array
of middleware right here, too.

25
00:01:18.180 --> 00:01:23.067
And it would work

26
00:01:23.067 --> 00:01:27.260
the same way.

27
00:01:27.260 --> 00:01:28.340
It's pretty convenient.

28
00:01:28.340 --> 00:01:30.030
So the pattern.
Yeah, you had a question?

29
00:01:30.030 --> 00:01:32.760
&gt;&gt; Mark: So how do you stop
the request response cycle?

30
00:01:32.760 --> 00:01:34.780
&gt;&gt; Scott Moss: You either
have to send a response.

31
00:01:34.780 --> 00:01:35.388
So rest.whatever.

32
00:01:35.388 --> 00:01:35.910
&gt;&gt; Mark: Rest.send, yeah.

33
00:01:35.910 --> 00:01:37.130
&gt;&gt; Scott Moss: Throw an error.

34
00:01:37.130 --> 00:01:40.600
Or, yeah, one of those two things.

35
00:01:40.600 --> 00:01:41.330
Yes?

36
00:01:41.330 --> 00:01:45.570
&gt;&gt; Mark: So, if you are gonna
cover it later just stop me,

37
00:01:45.570 --> 00:01:48.330
but the app.uses are procedural right?

38
00:01:48.330 --> 00:01:49.810
So if you have separate files and

39
00:01:49.810 --> 00:01:54.190
you break them out is it really load
dependent on which one loads first

40
00:01:54.190 --> 00:01:57.810
that that will be the app.use
that gets ran before each route?

41
00:01:57.810 --> 00:01:58.510
&gt;&gt; Scott Moss: Good question.

42
00:01:58.510 --> 00:02:02.110
So, app.use is procedural and if you break
them out in to different files, luckily

43
00:02:02.110 --> 00:02:07.910
for us, the require method is synchronous
so whatever time you require that file.

44
00:02:07.910 --> 00:02:11.380
So let's say we put some
app.users in here, right?

45
00:02:11.380 --> 00:02:13.840
We pull a few in here and
then right underneath,

46
00:02:13.840 --> 00:02:16.860
maybe the third one,
we require the file to other app.users and

47
00:02:16.860 --> 00:02:20.820
then all those will get ran and then the
ones beneath that require will get ran.

48
00:02:20.820 --> 00:02:21.730
So it's all synchronous.

49
00:02:21.730 --> 00:02:25.460
So yeah, it's still gonna be in order, and
luckily for us require is synchronous so

50
00:02:25.460 --> 00:02:26.798
yeah, that will still guarantee that.

51
00:02:26.798 --> 00:02:28.493
Good question.

52
00:02:32.762 --> 00:02:33.800
&gt;&gt; Scott Moss: Any other
questions on this stuff?

53
00:02:35.350 --> 00:02:36.650
On this example?

54
00:02:36.650 --> 00:02:37.360
Mark.

55
00:02:37.360 --> 00:02:38.650
&gt;&gt; Mark: You might have answered this, but

56
00:02:38.650 --> 00:02:41.939
can you pass an array of functions
as the second param of app.get?

57
00:02:42.980 --> 00:02:44.600
&gt;&gt; Scott Moss: Yes, I answered that.

58
00:02:44.600 --> 00:02:47.520
I think there's a note right
here that says it, too.

59
00:02:47.520 --> 00:02:48.620
Yeah, an array of Middleware.

60
00:02:48.620 --> 00:02:51.500
Yeah, so you can pass in
an array of Middleware, too.

61
00:02:51.500 --> 00:02:53.470
One note though on this cuz
this is kind of confusing.

62
00:02:54.660 --> 00:02:57.050
I said Middleware is a function.

63
00:02:58.410 --> 00:03:00.400
Actually, I'm just gonna show you.

64
00:03:00.400 --> 00:03:02.830
I think it's better just to show you.

65
00:03:04.090 --> 00:03:07.830
So right now the way the middleware,
at least the third-party middleware,

66
00:03:07.830 --> 00:03:10.460
is written is that you notice
that they're always invoked,

67
00:03:10.460 --> 00:03:12.330
like we're always executing the function,
right.

68
00:03:12.330 --> 00:03:16.040
That's executed, that's execute it,
this is executed it, right?

69
00:03:16.040 --> 00:03:17.410
But what value is that return in?

70
00:03:17.410 --> 00:03:22.220
Remember I said middleware is just
a function, so if you were If you

71
00:03:22.220 --> 00:03:25.385
thought about it then you would know that
these methods are just for returning

72
00:03:25.385 --> 00:03:29.175
middleware right, so this is a common
pattern for us to pass an option to our

73
00:03:29.175 --> 00:03:32.420
middleware to expose our function right,
these are our higher order function.

74
00:03:32.420 --> 00:03:37.198
I'll just show you, let's make our own so
you can see what I'm talking

75
00:03:37.198 --> 00:03:41.260
about for options.

76
00:03:41.260 --> 00:03:43.960
It's a function that
takes in some options.

77
00:03:45.170 --> 00:03:49.910
Okay.
And what we want to be able to do is to,

78
00:03:49.910 --> 00:03:56.730
let me put it up top, what we want to
be able to do is come down here and

79
00:03:56.730 --> 00:04:01.890
say app.use and then options and
passes some options like this, like name.

80
00:04:01.890 --> 00:04:04.610
You want to do something like that.

81
00:04:04.610 --> 00:04:05.220
All right.

82
00:04:05.220 --> 00:04:06.860
So that's why this
function takes in options,

83
00:04:06.860 --> 00:04:10.580
but because its middleware
it must return a function.

84
00:04:10.580 --> 00:04:13.220
So that is why.
This is where we would do it.

85
00:04:17.507 --> 00:04:20.579
&gt;&gt; Scott Moss: So now this is the actual
middleware function that's gonna be

86
00:04:20.579 --> 00:04:21.590
executed, right.

87
00:04:21.590 --> 00:04:24.140
So now I can come in here and say, next.

88
00:04:26.300 --> 00:04:29.560
But now I have access to the options
that this person passed in,

89
00:04:29.560 --> 00:04:33.160
right, so
this is high order function here.

90
00:04:34.290 --> 00:04:36.000
So that's why you'll see this a lot,

91
00:04:36.000 --> 00:04:40.940
but I'm telling you this because
sometimes you might see it like this.

92
00:04:40.940 --> 00:04:42.560
Where it's just like 'options'
with no implication.

93
00:04:42.560 --> 00:04:44.940
It's just like, that's my middleware.

94
00:04:44.940 --> 00:04:47.160
I don't want to throw
you off your game but

95
00:04:47.160 --> 00:04:50.930
the reason that's there is
because instead of having that.

96
00:04:52.190 --> 00:04:55.760
It's just like that instead,
that's the only difference.

97
00:04:57.930 --> 00:05:03.008
So this doesn't return a function,
this function is the middleware

98
00:05:03.008 --> 00:05:08.186
whereas before it was a function
dot return the middleware function.

99
00:05:11.819 --> 00:05:13.185
&gt;&gt; Scott Moss: So I recommend when
you start writing your middleware,

100
00:05:13.185 --> 00:05:14.384
pick the pattern that you want and
stick with it.

101
00:05:14.384 --> 00:05:19.228
I choose this pattern because most third
party middleware ues the same pattern.

102
00:05:19.228 --> 00:05:21.541
&gt;&gt; Mark: This pattern
results from closures.

103
00:05:21.541 --> 00:05:23.160
&gt;&gt; Scott Moss: Right, it's a closure.

104
00:05:27.191 --> 00:05:35.233
&gt;&gt; Scott Moss: So just take note of that.

105
00:05:35.233 --> 00:05:39.275
So we'll use third party and
built-in middleware a lot, and

106
00:05:39.275 --> 00:05:42.240
we'll also be creating our own middleware.

107
00:05:43.690 --> 00:05:45.950
So I'll just give an example of what
creating our own middleware looks like.

108
00:05:45.950 --> 00:05:46.710
Here's another example.

109
00:05:47.750 --> 00:05:52.340
So, after I use, for instance, maybe
you want to check to see if they supply

110
00:05:52.340 --> 00:05:55.660
the correct secret word before they went
on, so you'll check the secret word,

111
00:05:55.660 --> 00:06:01.000
see if it's catnip, if it is catnip,
next you may proceed.

112
00:06:01.000 --> 00:06:05.700
If it is not, set the status to a 401 and
send a message that says no.

113
00:06:05.700 --> 00:06:06.340
Right?

114
00:06:06.340 --> 00:06:07.180
And then that will stop.

115
00:06:07.180 --> 00:06:08.020
That won't go into the next one.

116
00:06:08.020 --> 00:06:08.850
So it's simple stuff.

117
00:06:10.080 --> 00:06:11.300
So middleware can do whatever you want.

118
00:06:11.300 --> 00:06:12.720
This is a great place to do things.

119
00:06:15.790 --> 00:06:16.885
Any questions on middleware?

120
00:06:20.627 --> 00:06:22.152
&gt;&gt; Scott Moss: So,
what is middleware again?

121
00:06:25.408 --> 00:06:26.830
&gt;&gt; Scott Moss: Anybody?

122
00:06:26.830 --> 00:06:28.350
&gt;&gt; Student: It's like
an array of callbacks?

123
00:06:29.540 --> 00:06:30.730
&gt;&gt; Scott Moss: It's just a function.

124
00:06:30.730 --> 00:06:32.620
The middleware's just one function.

125
00:06:32.620 --> 00:06:33.210
&gt;&gt; Student: Yeah.
&gt;&gt; Scott Moss: Yep.

126
00:06:33.210 --> 00:06:33.780
It's just one function.

127
00:06:33.780 --> 00:06:34.350
It's just a function.

