WEBVTT

1
00:00:00.000 --> 00:00:03.747
[MUSIC]

2
00:00:03.747 --> 00:00:05.806
&gt;&gt; Speaker 1: The put, little trick here.

3
00:00:05.806 --> 00:00:07.846
Lot of stuff going on here.

4
00:00:07.846 --> 00:00:10.886
So put is, let's go back and
look at our blueprint.

5
00:00:10.886 --> 00:00:16.667
[NOISE] Get out of here.

6
00:00:16.667 --> 00:00:20.950
It should update and return the matching
line with the posted update object.

7
00:00:20.950 --> 00:00:24.790
So that means there's one, I'm expecting
an object to come in from the client with

8
00:00:24.790 --> 00:00:30.780
some properties that I need to first
find a line with a matching ID and

9
00:00:30.780 --> 00:00:34.140
if I do, update that line
with the object I was given.

10
00:00:35.600 --> 00:00:36.890
So I'm doing a few things here.

11
00:00:36.890 --> 00:00:38.690
One, first I'm gonna grab the update.

12
00:00:38.690 --> 00:00:40.090
Which is on rec.body.

13
00:00:40.090 --> 00:00:42.630
So that can be an object with any
property on it that we want to

14
00:00:42.630 --> 00:00:43.690
update the line with.

15
00:00:43.690 --> 00:00:46.510
So the name, the pride,
the age, the gender.

16
00:00:46.510 --> 00:00:47.530
Pretty much anything but the ID.

17
00:00:47.530 --> 00:00:49.880
And then just for a safety check,

18
00:00:49.880 --> 00:00:53.790
just in case you tried to update the ID,
I'm just going to delete the ID.

19
00:00:53.790 --> 00:00:55.990
Just in case you tried to update the ID.

20
00:00:55.990 --> 00:00:59.130
So we don't have things with two
the same ID's and stuff like that.

21
00:00:59.130 --> 00:01:03.088
You don't want to change the ID,
the database is in charge of ID stuff.

22
00:01:03.088 --> 00:01:07.165
So I deleted the ID of the update
objects just in case you put that there.

23
00:01:07.165 --> 00:01:09.708
You don't have to do that but
it will fix some errors.

24
00:01:09.708 --> 00:01:15.197
And then what I'm doing is I'm
just going to search to see given

25
00:01:15.197 --> 00:01:20.908
the ID that you sent me here,
if that line exists in our database.

26
00:01:20.908 --> 00:01:24.730
Which is just an array, so I'm using
the find index method of load ash,

27
00:01:24.730 --> 00:01:26.908
which takes in an array and some object.

28
00:01:26.908 --> 00:01:31.694
If it finds an object in that array
that matches these specific parameters

29
00:01:31.694 --> 00:01:33.710
it will return the index of it.

30
00:01:35.640 --> 00:01:41.250
So that's why I'm able to say, hey is
this index in this line, does it exist?

31
00:01:41.250 --> 00:01:43.150
If it does not exist,
then just send nothing.

32
00:01:43.150 --> 00:01:43.830
Just stop.

33
00:01:43.830 --> 00:01:44.970
Just don't do anything.

34
00:01:44.970 --> 00:01:45.780
Don't even try to update.

35
00:01:45.780 --> 00:01:46.880
If it doesn't exist.

36
00:01:46.880 --> 00:01:51.330
If it does exist, then this assign
thing is just like an extend.

37
00:01:51.330 --> 00:01:52.410
Extend those two objects.

38
00:01:52.410 --> 00:01:54.980
So take the update object with
the new properties on it and

39
00:01:54.980 --> 00:01:58.170
extended on the old object.

40
00:01:58.170 --> 00:01:59.550
Does anybody not know how extend works?

41
00:02:00.780 --> 00:02:01.920
It's just merging two objects.

42
00:02:01.920 --> 00:02:05.620
So, it's going to merge the object on
the right to the object on the left.

43
00:02:05.620 --> 00:02:07.866
And then it's going to return
the object on the left.

44
00:02:07.866 --> 00:02:16.040
So it's like, yeah if you found the lion,
which is referenced as the lions array.

45
00:02:16.040 --> 00:02:17.430
This in an index right here,
this is a number,

46
00:02:17.430 --> 00:02:21.450
and this is the object that
they sent on the put request.

47
00:02:21.450 --> 00:02:23.750
Merge those two and send it back.

48
00:02:27.910 --> 00:02:32.070
So this right here is updating
it inside the array and

49
00:02:32.070 --> 00:02:34.630
it's giving it to us as
a reference to return.

50
00:02:34.630 --> 00:02:35.749
So it's doing the two things in one line.

51
00:02:37.460 --> 00:02:39.330
Yes.
&gt;&gt; Speaker 2: There's a question on what's

52
00:02:39.330 --> 00:02:44.740
your view on updating UI with the new item
instantly on the client and then rolling

53
00:02:44.740 --> 00:02:47.410
back if the server does return in error.
&gt;&gt; Speaker 1: Yeah,

54
00:02:47.410 --> 00:02:50.100
so if the server returns in error,
then you definitely want to roll back.

55
00:02:50.100 --> 00:02:52.869
So the way you would have to handle that,
that's a good question,

56
00:02:52.869 --> 00:02:54.688
That's definitely client side related.

57
00:02:54.688 --> 00:02:58.583
So the way you do that is,
so this is the thing that

58
00:02:58.583 --> 00:03:03.428
I'm using to update with the post
you would come down here and

59
00:03:03.428 --> 00:03:07.610
do something .catch,
if you're using promises.

60
00:03:07.610 --> 00:03:12.200
And you say, okay on .catch so you're
like you know handle the error here.

61
00:03:12.200 --> 00:03:15.150
So yeah if the server responds back
than an error then you have a seat when

62
00:03:15.150 --> 00:03:16.310
update the UI.

63
00:03:16.310 --> 00:03:19.620
The server wouldn't even send back the
object that was created, so you couldn't

64
00:03:19.620 --> 00:03:22.124
even update the UI if you wanted to,
you wouldn't even have the object.

65
00:03:22.124 --> 00:03:26.720
So yeah definitely don't update the UI or
don't add any type

66
00:03:26.720 --> 00:03:29.800
of object there until it comes back,
it'll probably show an error message or

67
00:03:29.800 --> 00:03:31.520
something like that or
whatever you wanted to do.

68
00:03:31.520 --> 00:03:34.326
Or gracefully try again
if it's a specific error

69
00:03:34.326 --> 00:03:39.038
message.
&gt;&gt; Speaker 1: Cool, yeah so

70
00:03:39.038 --> 00:03:40.750
I sent back that updated line.

71
00:03:40.750 --> 00:03:45.820
And then just listen on the port and
that's it for the solution.

72
00:03:45.820 --> 00:03:47.720
Any questions?
&gt;&gt; Speaker 2: Did you make a delete route?

73
00:03:48.930 --> 00:03:49.645
&gt;&gt; Speaker 1: Yeah actually I

74
00:03:49.645 --> 00:03:51.957
saved the delete route so
we could do it in person.

75
00:03:51.957 --> 00:03:52.537
Yeah.

76
00:03:52.537 --> 00:03:57.917
So, any questions on this?

77
00:03:57.917 --> 00:03:58.580
No?
Okay.

78
00:03:58.580 --> 00:03:59.500
So, the delete route.

79
00:03:59.500 --> 00:04:00.580
Yeah, I want to do this one in person.

80
00:04:02.990 --> 00:04:08.341
So if you haven't found out already, all
we have to do is just use the AGCP verbs.

81
00:04:08.341 --> 00:04:10.084
Get, put, post, delete.

82
00:04:10.084 --> 00:04:18.120
So, app.delete, we know is going
to be lions/: ID, function.

83
00:04:20.420 --> 00:04:22.440
And we're going to take a request and
response.

84
00:04:22.440 --> 00:04:29.310
So the first thing we need
to do is find the index.

85
00:04:29.310 --> 00:04:31.927
So what I'll do is, I'll just grab this,

86
00:04:31.927 --> 00:04:37.210
up here.
&gt;&gt; Speaker 1: So

87
00:04:37.210 --> 00:04:39.504
and I'll do the same thing I did before.

88
00:04:39.504 --> 00:04:44.245
If we couldn't find the lion the just
do the res.send just don't do anything

89
00:04:45.945 --> 00:04:46.920
&gt;&gt; Speaker 1: Else.

90
00:04:46.920 --> 00:04:52.604
If we did do it then we need to
splice it or I'm sorry lions.splice.

91
00:04:53.820 --> 00:04:54.800
At that lion index one.

92
00:04:58.060 --> 00:05:04.322
And then do a res.json or actually I
should say the reference verse, so

93
00:05:04.322 --> 00:05:12.261
var deletedLion =
lionslion then splice it.

94
00:05:12.261 --> 00:05:14.770
And then Send it back.

95
00:05:16.960 --> 00:05:20.634
So that's the deleted route.
&gt;&gt; Speaker 1: So

96
00:05:20.634 --> 00:05:22.590
first I'm gonna find it by index.

97
00:05:22.590 --> 00:05:25.770
If it doesn't exist,
don't try to delete anything, just stop.

98
00:05:25.770 --> 00:05:32.050
You could think of like when you could
only respond once inside of a function.

99
00:05:32.050 --> 00:05:35.110
Once you respond,
you can do no more executions.

100
00:05:35.110 --> 00:05:36.440
Almost like a return statement.

101
00:05:36.440 --> 00:05:40.960
The JavaScript's still gonna go execute
but you cannot do another response.

102
00:05:40.960 --> 00:05:44.993
If I do res.send here, and right below
it's like res.json, it won't work and

103
00:05:44.993 --> 00:05:48.870
in fact express might even throw errors
like you can't you already did that.

104
00:05:48.870 --> 00:05:51.734
You already try to write the head
you can't write it again.

105
00:05:51.734 --> 00:05:54.413
&gt;&gt; [SOUND]

106
00:05:54.413 --> 00:05:55.643
&gt;&gt; Speaker 1: So just remember that,

107
00:05:55.643 --> 00:05:57.734
you can only respond once and any stack.

108
00:05:57.734 --> 00:06:02.168
So even if I have a whole bunch of middle
ware here I can still only respond once

109
00:06:02.168 --> 00:06:05.220
not per function but
per request you can only respond

110
00:06:05.220 --> 00:06:10.818
once.
&gt;&gt; Speaker 1: Yeah,

111
00:06:10.818 --> 00:06:16.888
so that's delete.
&gt;&gt; Speaker 1: Any questions on this stuff,

112
00:06:16.888 --> 00:06:18.700
yeah?
&gt;&gt; Speaker 2: I got two questions.

113
00:06:18.700 --> 00:06:23.730
First one, sometimes you see like these
object responses where they have like

114
00:06:23.730 --> 00:06:29.020
all this other data of like
what was the response 200 and

115
00:06:29.020 --> 00:06:31.340
other things that they tag along.
&gt;&gt; Speaker 1: Right.

116
00:06:31.340 --> 00:06:32.240
&gt;&gt; Speaker 2: Do you think that is a good

117
00:06:32.240 --> 00:06:34.130
idea, is that like a best practice, or

118
00:06:34.130 --> 00:06:37.639
just some people?
&gt;&gt; Speaker 1: You mean have the server

119
00:06:37.639 --> 00:06:40.857
send all that stuff back to the client,
or are you saying?

120
00:06:40.857 --> 00:06:42.084
&gt;&gt; Speaker 2: I'm saying,

121
00:06:42.084 --> 00:06:48.025
in some API's that they put more
properties around their requests.

122
00:06:48.025 --> 00:06:49.652
They don't just return the object

123
00:06:49.652 --> 00:06:50.990
you changed?
&gt;&gt; Speaker 1: Right.

124
00:06:50.990 --> 00:06:52.120
&gt;&gt; Speaker 2: They'll add some other

125
00:06:52.120 --> 00:06:57.250
attributes and then you can do like change
object is one of the I see what you mean,

126
00:06:57.250 --> 00:07:01.370
so like having the API send
back a more informed resource.

127
00:07:01.370 --> 00:07:02.850
Yeah.
&gt;&gt; Speaker 1: That's kind of

128
00:07:02.850 --> 00:07:03.600
like a couple of things.

129
00:07:03.600 --> 00:07:06.170
One, the resources are probably a lot
huger than our simple line read,

130
00:07:06.170 --> 00:07:10.150
resource so there's tons of more
native properties on that object.

131
00:07:10.150 --> 00:07:13.770
And then two, they probably
are like an API as a service, so

132
00:07:13.770 --> 00:07:18.550
they need to send specific information,
like maybe your rate limit or

133
00:07:18.550 --> 00:07:22.340
specific things like maybe
you're hitting pagination and

134
00:07:22.340 --> 00:07:25.090
they want to show you what page
you're on or what cursor you're on.

135
00:07:25.090 --> 00:07:27.770
So depending on the API you will
see a lot of different things.

136
00:07:27.770 --> 00:07:29.270
But like if you're building an API for

137
00:07:29.270 --> 00:07:33.030
your application you probably won't
have a lot of that stuff right,

138
00:07:33.030 --> 00:07:36.310
because you aren't building your
API as a service for people to use.

139
00:07:36.310 --> 00:07:38.959
You're just building it for
your application, so

140
00:07:38.959 --> 00:07:42.838
probably only send back what your
application needs to cut the wait down for

141
00:07:42.838 --> 00:07:45.520
what's sending across the wire
&gt;&gt; Speaker 2: Okay that makes sense.

142
00:07:45.520 --> 00:07:50.987
And then my second question is, if we were
pushing this to production on a put route,

143
00:07:50.987 --> 00:07:55.607
would we validate the fields that
they're trying to update, like they

144
00:07:55.607 --> 00:07:58.290
could add any fields to our extend.
&gt;&gt; Speaker 1: Right,

145
00:07:58.290 --> 00:08:00.859
and that's where the data's
gonna come in on our schema,

146
00:08:00.859 --> 00:08:02.994
we do the validation there.
&gt;&gt; Speaker 1: But

147
00:08:02.994 --> 00:08:05.020
that's like the last
place you do validation.

148
00:08:05.020 --> 00:08:08.250
You should be validating on the front end
like, you should have JavaScript validate

149
00:08:08.250 --> 00:08:10.695
before you Since to the server first.
&gt;&gt; Speaker 2: But

150
00:08:10.695 --> 00:08:12.777
you wouldn't validate in the route,

151
00:08:12.777 --> 00:08:15.778
you would validate in the database.
&gt;&gt; Speaker 1: Yeah I validate

152
00:08:15.778 --> 00:08:18.740
in the database, I'll let it try to save.

153
00:08:18.740 --> 00:08:21.791
And let the database do its validation,
which is way more powerful

154
00:08:21.791 --> 00:08:24.688
than something I could probably write.
&gt;&gt; Speaker 2: Yeah, more efficient,

155
00:08:24.688 --> 00:08:25.480
that makes sense.

