WEBVTT

1
00:00:00.000 --> 00:00:04.286
[MUSIC]

2
00:00:04.286 --> 00:00:06.642
&gt;&gt; Speaker 1: I gave everybody a little
note before I handed it out to you, and

3
00:00:06.642 --> 00:00:08.300
I was like,
look at the file system module.

4
00:00:09.690 --> 00:00:11.320
The reason I told you that is so

5
00:00:11.320 --> 00:00:14.680
I wanted you to struggle a little
bit with asynchronous programming.

6
00:00:14.680 --> 00:00:18.260
But you probably would have
found out soon enough that you

7
00:00:18.260 --> 00:00:19.239
didn't really even need it.

8
00:00:20.240 --> 00:00:23.570
Because res.sendFile takes care of that.

9
00:00:23.570 --> 00:00:25.092
Especially if you looked at the next
experience and saw that solution.

10
00:00:25.092 --> 00:00:27.920
So you didn't really need the file system.

11
00:00:27.920 --> 00:00:28.770
But you could've used it.

12
00:00:28.770 --> 00:00:31.380
If you did do it, you'd have to set
the appropriate headers to get it to work.

13
00:00:31.380 --> 00:00:33.894
Otherwise, it would start
downloading the file.

14
00:00:33.894 --> 00:00:36.560
If you went to the index page and
started downloading.

15
00:00:36.560 --> 00:00:45.520
It's because that's the fs.readFile
is putting in that content in there.

16
00:00:45.520 --> 00:00:47.000
So you didn't really need it, but

17
00:00:47.000 --> 00:00:51.100
I wanted you guys to see how
asynchronous stuff works, and that was

18
00:00:51.100 --> 00:00:54.740
a good way I could sneak it in there and
also kinda confuse you a little bit.

19
00:00:54.740 --> 00:00:56.220
Because it's gonna help you learn.

20
00:00:57.490 --> 00:01:02.670
So you didn't really need it res.sendFile,
reads the file internally anyway.

21
00:01:02.670 --> 00:01:05.922
So let's just go ahead and
check out the solution, and

22
00:01:05.922 --> 00:01:08.336
I'll show you what I'm talking about.

23
00:01:08.336 --> 00:01:11.510
So I'm doing res.sendFile and
I'm using __dirname.

24
00:01:11.510 --> 00:01:15.229
This is two underscores here, sublime
just makes it look like they're one.

25
00:01:15.229 --> 00:01:17.302
There's two underscores.

26
00:01:17.302 --> 00:01:21.322
And like I was saying before in
the earlier talk, all your files in node

27
00:01:21.322 --> 00:01:25.616
are wraps or something like this, so
this is where we get these [INAUDIBLE],

28
00:01:25.616 --> 00:01:33.035
everything is wrapped inside of this.
&gt;&gt; Speaker 1: It's

29
00:01:33.035 --> 00:01:37.704
wrapped inside like this and
we get access to like module,

30
00:01:37.704 --> 00:01:41.994
exports, __dirname,
console, all that stuff,

31
00:01:41.994 --> 00:01:46.570
that's all we're able to
do because call __dirname,

32
00:01:46.570 --> 00:01:52.490
because it's given to us at
execution time by node, every file.

33
00:01:52.490 --> 00:01:56.970
So dirname is just a current directory
name, which is in this case,

34
00:01:56.970 --> 00:01:58.570
whatever the name of your directory is.

35
00:01:58.570 --> 00:02:00.208
In mine it's node-api.

36
00:02:00.208 --> 00:02:01.534
So whatever the name of your directory,

37
00:02:01.534 --> 00:02:04.071
it's gonna be the current directory name
of the current file that you are in.

38
00:02:05.730 --> 00:02:09.460
So by doing that, the res.sendFile,
if you looked at the documents for

39
00:02:09.460 --> 00:02:13.930
it, which I'm sure most of you did,
you notice that it needs to take

40
00:02:13.930 --> 00:02:16.990
a absolute path to the file
that you wanna send.

41
00:02:16.990 --> 00:02:20.420
So I just put __dirname +/index.html.

42
00:02:20.420 --> 00:02:23.310
You can also use the path
module to resolve that safely.

43
00:02:23.310 --> 00:02:27.584
So they deal with the trailing and
leading slashes and get messed up there.

44
00:02:27.584 --> 00:02:31.505
And because it is asynchronous, we have
the option of putting this call back

45
00:02:31.505 --> 00:02:34.080
here to check for errors and do stuff.

46
00:02:34.080 --> 00:02:35.487
But you don't have to if
you don't really care.

47
00:02:35.487 --> 00:02:38.030
If you just wanna do that, you can do it.

48
00:02:38.030 --> 00:02:41.670
But checking for errors is okay if
you wanna do something different.

49
00:02:41.670 --> 00:02:46.150
Here, I just wanted to show you an example
of how you can set the status code

50
00:02:46.150 --> 00:02:49.520
of a response, and
also send something back.

51
00:02:49.520 --> 00:02:54.670
It's probably not the best thing you wanna
do on a request to an HTML page, but

52
00:02:54.670 --> 00:02:56.900
it's just an example of how
you would set the status.

53
00:02:56.900 --> 00:03:00.540
So this is me saying, hey,
I want the status code to be 500, and

54
00:03:00.540 --> 00:03:02.640
I wanna send back this error.

55
00:03:02.640 --> 00:03:05.570
Again, you'd probably never do
this on a GIT request to the route

56
00:03:05.570 --> 00:03:08.510
of your application, but
that's an example of how you would do it.

57
00:03:10.930 --> 00:03:17.987
Any questions on this part?
&gt;&gt; Speaker 1: So

58
00:03:17.987 --> 00:03:20.739
internally the res.sendFile is doing

59
00:03:20.739 --> 00:03:26.896
the fs.readFile.
&gt;&gt; Speaker 1: I

60
00:03:26.896 --> 00:03:29.270
just wanted you guys
to see how that works.

61
00:03:29.270 --> 00:03:33.214
See what that feels like.
&gt;&gt; Speaker 2: Do you have a solution using

62
00:03:33.214 --> 00:03:34.860
fs.readFile?
&gt;&gt; Speaker 1: I don't, but

63
00:03:34.860 --> 00:03:37.260
we could do it right now,
if that would be helpful.

64
00:03:38.960 --> 00:03:40.510
Would that be helpful?

65
00:03:40.510 --> 00:03:42.290
Anybody else?

66
00:03:42.290 --> 00:03:46.540
So what you would do is you would say,
var, let's just say,

67
00:03:46.540 --> 00:03:53.120
first thing you need to
do is require the file

68
00:03:53.120 --> 00:03:57.040
system module and we just do that
by fs because it's internal.

69
00:03:58.710 --> 00:04:00.130
And then,
I'm just gonna comment this stuff out.

70
00:04:04.540 --> 00:04:07.150
&gt;&gt; Speaker 1: And then, what we can do is

71
00:04:07.150 --> 00:04:12.870
we can say, fs.readFile,
is it capital case?

72
00:04:12.870 --> 00:04:14.159
Yeah, it's capital case.

73
00:04:14.159 --> 00:04:17.491
So we do readFile, we could also
do readFileSync which would do it

74
00:04:17.491 --> 00:04:21.493
synchronously if you looked it up but,
let's just do the asynchronous one and

75
00:04:21.493 --> 00:04:23.939
then that takes the path to the file,
which is.

76
00:04:25.180 --> 00:04:28.855
Next, HTML takes in a callback.

77
00:04:30.642 --> 00:04:35.010
This callback is a node style callback and
when I mean node style call back,

78
00:04:36.310 --> 00:04:39.940
usually the error is an optional
argument that we passed in.

79
00:04:39.940 --> 00:04:43.430
If an error occurred while
this function was executing.

80
00:04:43.430 --> 00:04:46.310
And then, a second argument is usually
the content that you're asking for.

81
00:04:46.310 --> 00:04:49.030
So in this case, the file buffer.

82
00:04:52.210 --> 00:04:53.890
So let's just do this,
I'll show you what this looks like.

83
00:04:53.890 --> 00:04:56.764
So for console.log(buffer) on that and

84
00:04:56.764 --> 00:05:02.351
then if I start the server.
&gt;&gt; Speaker 1: And

85
00:05:02.351 --> 00:05:07.203
then, I do a Git request to that page.

86
00:05:07.203 --> 00:05:10.768
This is gonna hang as you can see, it's
just spinning right here because I didn't

87
00:05:10.768 --> 00:05:13.660
send a response back to the client so
it's just hanging.

88
00:05:13.660 --> 00:05:14.520
But if you go to the terminal,

89
00:05:14.520 --> 00:05:18.705
so there's the file buffer,
that's the index the HTML.

90
00:05:19.760 --> 00:05:22.110
It's not really what we want so
we need to convert it, so

91
00:05:22.110 --> 00:05:27.050
we'll just say var html = buffer.toString,

92
00:05:27.050 --> 00:05:32.040
that'll convert it back
to the actual content

93
00:05:34.000 --> 00:05:37.720
by default it's gonna do utf8 encoding, so

94
00:05:39.430 --> 00:05:42.870
that's the HTML, and
then you can say rest.

95
00:05:45.920 --> 00:05:50.030
Actually need to set the headers rest.,
what's the method for that,

96
00:05:50.030 --> 00:05:52.786
I can't think of the method
to set the headers.

97
00:05:52.786 --> 00:05:54.208
We'll see in a minute.

98
00:05:54.208 --> 00:05:57.906
So rest.send and

99
00:05:57.906 --> 00:06:03.798
we can just say (html)-
&gt;&gt; Speaker 2: Set

100
00:06:03.798 --> 00:06:05.450
header.
&gt;&gt; Speaker 1: There we go.

101
00:06:05.450 --> 00:06:06.250
Set header, thank you.

102
00:06:07.530 --> 00:06:10.070
Set header.

103
00:06:10.070 --> 00:06:16.224
And we need to set the content type
&gt;&gt; Speaker 1: To

104
00:06:16.224 --> 00:06:23.784
text/html.
&gt;&gt; Speaker 1: So now if we do that,

105
00:06:23.784 --> 00:06:29.554
let me restart the server.
&gt;&gt; Speaker 1: We

106
00:06:29.554 --> 00:06:35.145
get the HTML.
&gt;&gt; Speaker 2: Does that implementation

107
00:06:35.145 --> 00:06:40.104
stream in terms of the HTML file?
&gt;&gt; Speaker 1: Could you string

108
00:06:40.104 --> 00:06:43.675
the content of the HTML file?
&gt;&gt; Speaker 2: Does this differ from

109
00:06:43.675 --> 00:06:45.900
creating a read stream from the file?
&gt;&gt; Speaker 1: Yeah.

110
00:06:45.900 --> 00:06:46.940
&gt;&gt; Speaker 2: I can get to the response?

111
00:06:46.940 --> 00:06:47.610
&gt;&gt; Speaker 1: Yeah, this is different.

112
00:06:47.610 --> 00:06:48.630
So good question.

113
00:06:48.630 --> 00:06:50.930
His question was is this
different from creating a stream?

114
00:06:50.930 --> 00:06:51.750
This is totally different.

115
00:06:51.750 --> 00:06:57.010
So this callback isn't gonna be fired
until the entire contents of the file

116
00:06:57.010 --> 00:07:02.230
is loaded or as a stream sends
events as each bit comes through.

117
00:07:02.230 --> 00:07:04.413
So it's different.

118
00:07:04.413 --> 00:07:07.730
So it's gonna hold it in
memory until it comes back.

119
00:07:07.730 --> 00:07:11.970
So a little different.

120
00:07:11.970 --> 00:07:15.063
And then, as far as like the other thing,
getting the data,

121
00:07:15.063 --> 00:07:19.126
it was as simple as just saying, hey,
if I go to Sly's data res.json the data,

122
00:07:19.126 --> 00:07:21.250
that's it, that's all we have to do.

123
00:07:21.250 --> 00:07:23.270
And then, of course, listen on a port.

124
00:07:23.270 --> 00:07:27.770
app.listen takes a callback function that
you can just do something inside of it so

125
00:07:27.770 --> 00:07:31.883
that's why like when I start the server
you see this on mine listening on port

126
00:07:31.883 --> 00:07:32.671
3,000.

127
00:07:32.671 --> 00:07:36.410
Otherwise it just looks kinda weird
when you don't log something.

128
00:07:36.410 --> 00:07:39.600
Like if I just stop this and
I just run the server,

129
00:07:39.600 --> 00:07:42.130
I don't know what's going on right there,
there's just nothing happening.

130
00:07:42.130 --> 00:07:46.059
So it's a convention,
what I do is always just log something.

131
00:07:53.050 --> 00:07:54.460
&gt;&gt; Speaker 1: Any questions on this stuff?

132
00:07:54.460 --> 00:07:55.910
Yes?
&gt;&gt; Speaker 2: There was a question,

133
00:07:55.910 --> 00:07:59.682
they kinda were discussing in chat, but
what's the best way to handle errors on

134
00:07:59.682 --> 00:08:01.290
your routes?
&gt;&gt; Speaker 1: We'll get to that.

135
00:08:01.290 --> 00:08:03.320
Good question, good, good question.

136
00:08:03.320 --> 00:08:04.505
The short answer is middlewares.

137
00:08:06.210 --> 00:08:11.079
Middlewares uses the answer for
all this stuff, so [LAUGH] great question.

138
00:08:12.950 --> 00:08:14.580
Cool.
So before we go on,

139
00:08:14.580 --> 00:08:18.210
I just wanna walk through some of the
things that we did during the solution.

140
00:08:18.210 --> 00:08:22.160
And talk about some things we can do to
make it better, and tools we can use.

141
00:08:22.160 --> 00:08:23.862
And go on a deeper understanding
of some of this stuff.

142
00:08:23.862 --> 00:08:26.834
So one thing we might have noticed is
that, every time I made the change to

143
00:08:26.834 --> 00:08:29.780
the server, I had to stop the server and
start it again.

144
00:08:29.780 --> 00:08:31.330
It's kind of annoying.

145
00:08:31.330 --> 00:08:35.600
So if you don't have experience with node,
or you don't know what this is.

146
00:08:35.600 --> 00:08:38.700
What we can do to get around
that is we can MPM install.

147
00:08:38.700 --> 00:08:39.915
You can do i for short.

148
00:08:39.915 --> 00:08:43.002
And then -g for globally.

149
00:08:43.002 --> 00:08:46.337
nodemon, like that.

150
00:08:46.337 --> 00:08:48.445
And it's just like node, except for

151
00:08:48.445 --> 00:08:52.253
it's gonna restart our server when
we make changes to the file, so

152
00:08:52.253 --> 00:08:56.930
if you don't have that globally installed,
I highly recommend it.

153
00:08:56.930 --> 00:08:58.640
So what that would do is
allow us to come in here and

154
00:08:58.640 --> 00:09:03.890
say nodemon and then, just like we would
do with nodes server.js, and then run it.

155
00:09:03.890 --> 00:09:07.360
You get all this other output and stuff,
but then now what happens is when I just

156
00:09:07.360 --> 00:09:10.770
come in here and just hit Save on
the file, it'll restart the server.

157
00:09:12.440 --> 00:09:15.010
It won't restart the browser, you've
still got to refresh the browser but

158
00:09:15.010 --> 00:09:15.850
it will restart the server.

159
00:09:19.040 --> 00:09:20.180
So this is a good one.

160
00:09:20.180 --> 00:09:21.060
This is what we're going to

161
00:09:21.060 --> 00:09:23.100
be using from here on out.
&gt;&gt; Speaker 2: And

162
00:09:23.100 --> 00:09:26.555
what was the install command again?
&gt;&gt; Speaker 1: The install for that is-

163
00:09:26.555 --> 00:09:27.771
&gt;&gt; Speaker 2: npmi

164
00:09:27.771 --> 00:09:31.910
&gt;&gt; Speaker 1: npm, where'd it go?

165
00:09:31.910 --> 00:09:34.030
I'll do it again,
I never executed that's why.

166
00:09:34.030 --> 00:09:41.551
It's npm i -g, for global, nodemon, M-O-N.

167
00:09:52.961 --> 00:09:53.471
&gt;&gt; Speaker 1: Great and

168
00:09:53.471 --> 00:09:56.840
I just wanna also come back
to this callback syntax here.

169
00:09:56.840 --> 00:09:59.119
When we get into the data
modeling with Mongoose and stuff,

170
00:09:59.119 --> 00:10:00.314
we're gonna see a lot of this.

171
00:10:00.314 --> 00:10:03.158
So I just want you to
get really comfortable.

172
00:10:03.158 --> 00:10:06.974
If you don't really have a good level
of comfortability or callbacks,

173
00:10:06.974 --> 00:10:10.155
you definitely will after this workshop.

174
00:10:10.155 --> 00:10:15.830
So get used to callbacks, we'll switch
over to something called promises but

175
00:10:15.830 --> 00:10:19.750
in node in general because
it's asynchronous this event,

176
00:10:19.750 --> 00:10:23.200
it has an event loop,
everything is gonna be in this pattern.

177
00:10:23.200 --> 00:10:26.000
So most of the stuff in
node follows this error

178
00:10:26.000 --> 00:10:28.800
constant pattern where error
is the optional first name.

179
00:10:28.800 --> 00:10:32.098
So most time in node you'll always see
this on the first line of a function,

180
00:10:32.098 --> 00:10:34.750
if(err) do this.

181
00:10:34.750 --> 00:10:36.750
You'll see that almost every time.

182
00:10:36.750 --> 00:10:38.169
So get used to these patterns.

183
00:10:40.340 --> 00:10:44.230
And as you're developing stuff and note,
you should follow the pattern too, so

184
00:10:44.230 --> 00:10:45.140
people know what's expected.

