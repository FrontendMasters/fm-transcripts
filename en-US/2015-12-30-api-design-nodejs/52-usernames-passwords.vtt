WEBVTT

1
00:00:00.000 --> 00:00:04.175
[MUSIC]

2
00:00:04.175 --> 00:00:05.790
&gt;&gt; Speaker 1: So the process is like this.

3
00:00:05.790 --> 00:00:10.680
A user signs up to access
protected resources on our API.

4
00:00:10.680 --> 00:00:13.110
So that means they give us a username and
a password.

5
00:00:15.340 --> 00:00:15.860
They sign up.

6
00:00:17.020 --> 00:00:20.710
On success, we create a new
user in our database, right?

7
00:00:20.710 --> 00:00:23.740
So it's like cool,
that user name is great, it's not taken.

8
00:00:23.740 --> 00:00:27.710
The password matches our validations,
whether that's like a min length, or

9
00:00:27.710 --> 00:00:30.620
a max length, or
whatever the validation was, if any.

10
00:00:30.620 --> 00:00:32.690
Great, we create a new user name
in our database, you're good.

11
00:00:32.690 --> 00:00:34.361
So typically what you would
do there is you'd like,

12
00:00:34.361 --> 00:00:38.760
all right, now in a sophisticated system
you'd probably say, and I'm going to make

13
00:00:38.760 --> 00:00:42.450
a new session and sign them and sign
a cookie, send that back to the browser.

14
00:00:43.620 --> 00:00:49.360
But, now what we're gonna do is we're
gonna grab that new user's ID that we just

15
00:00:49.360 --> 00:00:52.340
saved in a database and we're gonna create
a JSON web token, just like we did up top.

16
00:00:54.210 --> 00:00:58.760
We didn't send that JSON web token back
to the user on the response of sign up.

17
00:00:58.760 --> 00:01:02.110
So, when they sign up, they should
expect to get back a token string.

18
00:01:02.110 --> 00:01:03.350
It's like, here's your token.

19
00:01:03.350 --> 00:01:06.600
You signed up successfully, here you go.

20
00:01:07.620 --> 00:01:11.823
And then what the client's responsibility
is is to save it somewhere that will

21
00:01:11.823 --> 00:01:15.050
persist so they can use it for
every request.

22
00:01:15.050 --> 00:01:16.814
So they have to save it somewhere.

23
00:01:16.814 --> 00:01:21.867
And every time they make a request to the
server, for like some protected resource,

24
00:01:21.867 --> 00:01:25.497
they have to attach that token
to the authorization header or

25
00:01:25.497 --> 00:01:29.499
the query string or wherever our
server says it needs to attach it.

26
00:01:29.499 --> 00:01:32.339
In this case it's
the authorization header.

27
00:01:32.339 --> 00:01:35.501
It's up to you when you build out your
backend, but I think the spec is,

28
00:01:35.501 --> 00:01:37.210
put it on the authorization pattern.

29
00:01:40.198 --> 00:01:42.930
And they have to do that on every single
request when they want something.

30
00:01:42.930 --> 00:01:47.550
Just like a cookie is sent on every single
request from the browser by default.

31
00:01:47.550 --> 00:01:49.550
You just have to send this too.

32
00:01:49.550 --> 00:01:53.200
And most sophisticated client
frameworks allow you to automatically

33
00:01:53.200 --> 00:01:55.320
do things like that so you don't
have to do it every time as well.

34
00:01:55.320 --> 00:01:58.370
I know Angular does, it's like,
you write interceptors,

35
00:01:58.370 --> 00:02:02.050
like every time I make a request to
the endpoint, attach this to the header.

36
00:02:02.050 --> 00:02:07.067
It'll do it for you.
&gt;&gt; Speaker 1: So

37
00:02:07.067 --> 00:02:12.280
not only did we get authentication with
that we also get identification, right?

38
00:02:12.280 --> 00:02:16.420
Because the jwt has ID, so
you get two things out of that.

39
00:02:16.420 --> 00:02:19.250
And if we had a roll based auth flow,

40
00:02:19.250 --> 00:02:21.220
we could also get authorization
from that as well.

41
00:02:21.220 --> 00:02:24.624
Maybe not only would we attach IDs on
here, but we would attach the users

42
00:02:24.624 --> 00:02:28.368
rolls on this object too, that way we can
get authorization on what they can and

43
00:02:28.368 --> 00:02:37.467
can not do on different access levels.
&gt;&gt; Speaker 1: So with JWT as a method.

44
00:02:38.800 --> 00:02:41.100
We will use to grant access
to our protected resources.

45
00:02:42.610 --> 00:02:47.385
We still need a way to, excuse me, sorry.

46
00:02:47.385 --> 00:02:52.422
My eye is really bothering me.
&gt;&gt; Speaker 1: We still

47
00:02:52.422 --> 00:02:56.750
need a way to actually create users other
than a simple POST request to the server.

48
00:02:56.750 --> 00:03:00.880
So, right now the way that we create
servers, if you go look at our endpoints,

49
00:03:00.880 --> 00:03:04.240
just do a POST request to the user's
resource with their username and

50
00:03:04.240 --> 00:03:05.435
you create a user.

51
00:03:05.435 --> 00:03:07.200
It's not that safe, right?

52
00:03:07.200 --> 00:03:09.060
That's not what we really wanna do.

53
00:03:09.060 --> 00:03:11.000
So we need a better way of doing that.

54
00:03:11.000 --> 00:03:13.960
So the way we'll do that
is with a user name and

55
00:03:13.960 --> 00:03:16.862
password.
&gt;&gt; Speaker 1: So

56
00:03:16.862 --> 00:03:18.970
we all ready have a user
name field that is unique.

57
00:03:18.970 --> 00:03:22.990
Let's add a required password
field as well to help identify

58
00:03:22.990 --> 00:03:24.679
who a user may be when they sign in.

59
00:03:26.630 --> 00:03:29.570
So there are numerous problems around
storing original plain text passwords

60
00:03:29.570 --> 00:03:32.020
in our database,
if you haven't experienced databases.

61
00:03:32.020 --> 00:03:34.010
There are legal, technical, and

62
00:03:34.010 --> 00:03:38.520
moral problems around storing people's
passwords in your database in plain site.

63
00:03:39.580 --> 00:03:41.030
You're just asking for it if you do it.

64
00:03:41.030 --> 00:03:41.530
Just saying.

65
00:03:43.200 --> 00:03:47.840
If you store somebody's password as
is in plain text on the database,

66
00:03:47.840 --> 00:03:50.240
you're asking for it.

67
00:03:50.240 --> 00:03:52.870
So instead, we will store a hashed
version of a user's password.

68
00:03:54.620 --> 00:03:58.230
Note that sending plain text passwords
over HTTP is not safe either,

69
00:03:58.230 --> 00:04:00.890
and you should be using HTTPS instead.

70
00:04:00.890 --> 00:04:02.880
We will not be using HTTPS.

71
00:04:02.880 --> 00:04:05.140
So, just get over that for now.

72
00:04:05.140 --> 00:04:06.020
If you're again,

73
00:04:06.020 --> 00:04:09.350
a security person, I don't wanna send
this password over HTTP, it's okay.

74
00:04:11.230 --> 00:04:13.078
My wife's gonna hack us today.
&gt;&gt; Speaker 2: I'm intercepting.

75
00:04:13.078 --> 00:04:14.375
&gt;&gt; Speaker 1: [LAUGH]

76
00:04:14.375 --> 00:04:16.540
&gt;&gt; Speaker 2: Couple questions.

77
00:04:16.540 --> 00:04:19.830
If you use JWT, do you have to make sure
you're in a browser that supports client

78
00:04:19.830 --> 00:04:24.730
side storage?
&gt;&gt; Speaker 1: Yeah, you'd probably,

79
00:04:24.730 --> 00:04:26.500
I mean if you wanted to persist yeah.

80
00:04:26.500 --> 00:04:29.470
I mean you could theoretically
just save it in cache.

81
00:04:29.470 --> 00:04:32.920
Right and then if you refreshed the
browser then you'd just have to sign in

82
00:04:32.920 --> 00:04:37.070
again but yeah if you wanted to persist
if you want a good user experience where

83
00:04:37.070 --> 00:04:40.670
the user doesn't have to sign in every
single time they come back, then yeah,

84
00:04:40.670 --> 00:04:41.570
you need storage.

85
00:04:41.570 --> 00:04:44.770
But if you don't have storage,
then the worst case scenario is that

86
00:04:44.770 --> 00:04:49.570
every time your app loads up or
loses state, the user has to sign back in.

87
00:04:49.570 --> 00:04:51.410
So that's worst case scenario.

88
00:04:51.410 --> 00:04:54.280
But yep, you definitely need that, so.

89
00:04:54.280 --> 00:04:55.320
And most browsers do,

90
00:04:55.320 --> 00:04:59.210
I mean definitely the major browsers
support that down to like older versions.

91
00:04:59.210 --> 00:05:02.480
And of course mobile devices
support that as well.

92
00:05:02.480 --> 00:05:06.000
&gt;&gt; Speaker 2: And then they're asking

93
00:05:06.000 --> 00:05:09.520
you're gonna hash and salt passwords?
&gt;&gt; Speaker 1: So,

94
00:05:09.520 --> 00:05:12.230
we're gonna talk about salting, but yeah,

95
00:05:12.230 --> 00:05:17.438
we are.
&gt;&gt; Speaker 1: So,

96
00:05:17.438 --> 00:05:21.649
unlike the encryption of a JWT we
can't undo the hash of a password.

97
00:05:22.870 --> 00:05:23.830
We can't say, okay

98
00:05:25.270 --> 00:05:29.848
here is the hash give me back
the password, like we can with a JWT.

99
00:05:29.848 --> 00:05:34.210
With a JWT, we're using encryption and

100
00:05:34.210 --> 00:05:39.590
we're using this shaw and
this is like if I give you

101
00:05:39.590 --> 00:05:43.570
back the token with the same secret I
expect the object that I encrypted before.

102
00:05:43.570 --> 00:05:47.000
Whereas a hash doesn't really work
that way, it's a one way thing.

103
00:05:47.000 --> 00:05:48.570
It's like I'm just gonna create a hash and
that's it.

104
00:05:48.570 --> 00:05:53.040
And the only way to check if something
equals a hash is to hash it again and

105
00:05:53.040 --> 00:05:56.690
see if the hash values match,
not the actual passwords.

106
00:05:57.960 --> 00:06:00.290
So we can't undo the password.

107
00:06:00.290 --> 00:06:03.010
This is why hashing is perfect for
passwords.

108
00:06:04.240 --> 00:06:07.860
So in order to check to see if the given
password matches a safe hash password

109
00:06:07.860 --> 00:06:10.950
like on sign in which is
exactly what sign in is.

110
00:06:10.950 --> 00:06:14.510
Sign in is like, first let me
see if there's a username in our

111
00:06:14.510 --> 00:06:16.870
database with this,
great there's a username.

112
00:06:16.870 --> 00:06:19.657
Now let me grab that user's
hash password in my database,

113
00:06:19.657 --> 00:06:21.972
let me grab the password he just sent me.

114
00:06:21.972 --> 00:06:25.655
Let me hash this password and
compare it to the safe hash password.

115
00:06:25.655 --> 00:06:29.035
If it matches then they
are who they say they are.

116
00:06:29.035 --> 00:06:29.994
Let me sign them in.

117
00:06:29.994 --> 00:06:31.080
That is what sign in is.

118
00:06:33.980 --> 00:06:36.790
So again, using the same hashing
function in the password,

119
00:06:36.790 --> 00:06:39.409
we will get the same hash
as we did on sign up.

120
00:06:40.940 --> 00:06:43.630
There are further methods we could
use to prevent attacks on our API and

121
00:06:43.630 --> 00:06:45.950
our database like
creating unique salts for

122
00:06:45.950 --> 00:06:50.110
each user and storing the salt on
the user to help prevent rainbow text.

123
00:06:50.110 --> 00:06:51.620
So, we're not gonna be
creating unique salt so

124
00:06:51.620 --> 00:06:54.480
we'll just generate the same salt for now.

125
00:06:54.480 --> 00:06:58.310
But yeah, you could and in fact you
probably should, creating unique salts and

126
00:06:58.310 --> 00:07:00.600
storing them with the user themselves.

127
00:07:00.600 --> 00:07:04.510
So a hacker would just have to
work a little harder to getsalt.

128
00:07:04.510 --> 00:07:08.140
But ultimately you can't stop anybody from
doing anything, it's just gonna happen.

129
00:07:08.140 --> 00:07:10.240
You can just make it harder.

