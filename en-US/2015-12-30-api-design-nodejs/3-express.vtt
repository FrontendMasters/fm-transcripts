WEBVTT

1
00:00:00.000 --> 00:00:04.022
[MUSIC]

2
00:00:04.022 --> 00:00:06.760
&gt;&gt; Scott Moss: Now we are going
to talk about servers in note and

3
00:00:06.760 --> 00:00:10.935
how all that stuff works, how it got here,
what is the tooling for that,

4
00:00:10.935 --> 00:00:14.037
frameworks for that, and
what we are gonna be using.

5
00:00:14.037 --> 00:00:17.180
And then you guys will be diving right
in and actually doing some stuff.

6
00:00:18.700 --> 00:00:21.920
So, Node actually has
a built in http module.

7
00:00:21.920 --> 00:00:26.020
So, okay, what I mean by that is if I
were to come inside of a node file and I

8
00:00:27.190 --> 00:00:34.080
were to say, http and just log it for
you so you can see what that looks like.

9
00:00:36.660 --> 00:00:39.550
If I were to run that,
it's this huge object.

10
00:00:39.550 --> 00:00:40.450
This is built in the node.

11
00:00:41.730 --> 00:00:46.495
An http module which allows us to create
an http server on a TCP connection.

12
00:00:46.495 --> 00:00:49.170
So that's built in a node,
you don't have to download it.

13
00:00:49.170 --> 00:00:51.180
It's just how node works.

14
00:00:51.180 --> 00:00:54.110
Which is great because now it
allows us to build service but

15
00:00:54.110 --> 00:00:55.710
there are some limitations with it.

16
00:00:56.900 --> 00:00:58.550
The problem is that the configuration and

17
00:00:58.550 --> 00:01:02.220
the amount of code you have to write
in order to have basic features.

18
00:01:02.220 --> 00:01:05.347
Is really really overwhelming and
at times it's very difficult.

19
00:01:05.347 --> 00:01:11.148
And I know this because I've built servers
with pure node without any frameworks.

20
00:01:11.148 --> 00:01:14.387
And it teaches you a lot you
definitely learn a lot about node.

21
00:01:14.387 --> 00:01:17.677
And you're forced to do
things that you know.

22
00:01:17.677 --> 00:01:20.386
There's different things you can do
in node is like streams and stuff so

23
00:01:20.386 --> 00:01:22.067
you're forced to learn some of that stuff.

24
00:01:22.067 --> 00:01:23.927
But it's definitely very error prone.

25
00:01:23.927 --> 00:01:26.567
Specially if you don't know
much about networking.

26
00:01:26.567 --> 00:01:29.440
If you don't know to much about networking
you're definitely gonna have some errors.

27
00:01:29.440 --> 00:01:32.410
Maybe some memory leaks, there's a lot
of stuff that's gonna be going on so

28
00:01:32.410 --> 00:01:35.430
you got to kinda know what you're
doing if you're using that.

29
00:01:35.430 --> 00:01:39.530
So, there's tons of frameworks out
there that exist to help us abstract

30
00:01:39.530 --> 00:01:41.530
that difficulty away.

31
00:01:41.530 --> 00:01:44.130
And one of the most popular ones and

32
00:01:44.130 --> 00:01:46.199
they one we're gonna be
using is called Express.

33
00:01:47.430 --> 00:01:51.145
Other notable ones include sales.js,

34
00:01:51.145 --> 00:01:55.430
happy, koa, strong loop,
which is actually built on Express.

35
00:01:55.430 --> 00:01:58.240
So is sales,
they're all built on top of Express.

36
00:01:58.240 --> 00:02:01.480
But Express is by far
the most popular one.

37
00:02:01.480 --> 00:02:05.230
And in my opinion the simplest one,
but it's definitely not,

38
00:02:06.600 --> 00:02:11.676
I wouldn't say it is the easiest one but I
chose this one for a very specific reason.

39
00:02:11.676 --> 00:02:15.100
So, Express is a framework
that sits on to of node and

40
00:02:15.100 --> 00:02:19.810
uses the http module to make building
servers in node not so hard.

41
00:02:19.810 --> 00:02:23.799
There's still a bit of
a configuration with Express.

42
00:02:24.810 --> 00:02:28.442
So if you're expecting something
like Rails, Express is not it.

43
00:02:28.442 --> 00:02:29.303
Wow.

44
00:02:29.303 --> 00:02:30.083
Really?

45
00:02:30.083 --> 00:02:33.600
Really misspelled that.

46
00:02:33.600 --> 00:02:36.300
So yeah, if you're thinking we're
gonna have something like Rails,

47
00:02:36.300 --> 00:02:39.470
where you're just, Rails,
generate this, do this, no.

48
00:02:39.470 --> 00:02:40.689
That's not Express.

49
00:02:42.150 --> 00:02:45.607
That's why I said there are frameworks
that sit on top of Express because there's

50
00:02:45.607 --> 00:02:49.014
still so much configuration with Express
that people have extracted that out and

51
00:02:49.014 --> 00:02:50.437
built frameworks on top of that.

52
00:02:50.437 --> 00:02:53.524
And then there are still frameworks
that sit on top of that as well, so

53
00:02:53.524 --> 00:02:54.975
there's a lot of abstraction.

54
00:02:54.975 --> 00:03:01.967
But Express I think is a good
common place to start.

55
00:03:01.967 --> 00:03:06.071
Because you don't have to deal with http
module directly and all the nuances of

56
00:03:06.071 --> 00:03:10.317
serving static content and dealing around
with URL parsing and stuff like that.

57
00:03:10.317 --> 00:03:14.817
And you also don't have to, you also don't
get this magic of stuff that's happening

58
00:03:14.817 --> 00:03:18.210
for you, you would for
something like cells or something that.

59
00:03:18.210 --> 00:03:20.240
You still have to do some grunt work.

60
00:03:20.240 --> 00:03:21.559
Just a little bit though, not too much.

61
00:03:23.400 --> 00:03:24.047
Any questions on that?

62
00:03:30.080 --> 00:03:32.180
&gt;&gt; Scott Moss: No?
Okay.

63
00:03:32.180 --> 00:03:34.560
So, Express has a very welcoming API.

64
00:03:34.560 --> 00:03:40.520
It makes getting off the ground and
building an API pretty easy in my opinion.

65
00:03:40.520 --> 00:03:45.570
Really, Express, from my experience
by using it a whole bunch of times,

66
00:03:45.570 --> 00:03:49.170
it's really just like a framework
that has routing and Middleware.

67
00:03:49.170 --> 00:03:50.350
We'll talk about Middleware.

68
00:03:50.350 --> 00:03:51.150
Yeah, Mark?

69
00:03:51.150 --> 00:03:55.040
&gt;&gt; Mark: It's a question about
Restify being similar to Express,

70
00:03:55.040 --> 00:03:58.260
can you briefly touch on why you
would use Express versus Restify?

71
00:03:58.260 --> 00:04:02.720
&gt;&gt; Scott Moss: Yeah, so if we were
talking about Express 3.0 versus Restify,

72
00:04:02.720 --> 00:04:03.940
I'd use Restify.

73
00:04:03.940 --> 00:04:07.250
Specifically for arrest API.

74
00:04:07.250 --> 00:04:11.080
But with the release of Express four and
this new feature

75
00:04:11.080 --> 00:04:14.160
they have with sub-routers which
we'll get into later today.

76
00:04:14.160 --> 00:04:20.097
Express is actually pretty good at
allowing you to build a restful API.

77
00:04:20.097 --> 00:04:23.383
Restify is purely meant, for,
I want to build a restful API and

78
00:04:23.383 --> 00:04:27.330
it's really great at that,
in fact is way better Express than that.

79
00:04:27.330 --> 00:04:30.200
But sometimes you need things
like serving static assets.

80
00:04:30.200 --> 00:04:33.027
Or maybe you need your API server
to also double as a web server.

81
00:04:33.027 --> 00:04:36.290
So you are serving static assets,
you're doing this, you're doing that.

82
00:04:36.290 --> 00:04:38.200
So in that case, I would use Express,

83
00:04:38.200 --> 00:04:42.560
but Restify is definitely is a good one
if all you needed was a Restify API.

84
00:04:42.560 --> 00:04:44.100
So if you're just making an API for

85
00:04:44.100 --> 00:04:47.910
a mobile application,
Restify might be a good choice.

86
00:04:47.910 --> 00:04:51.810
I am not sure how well it is maintained.

87
00:04:51.810 --> 00:04:53.972
I know Express is maintained very,
very well so

88
00:04:53.972 --> 00:04:56.847
I cannot tell you how well
the people are maintaining Restify.

89
00:04:56.847 --> 00:05:00.071
But Express has been releasing pretty
good, pretty heavily ever since it

90
00:05:00.071 --> 00:05:02.787
has been passed over to
StrongLoop from TJ Holloway.

91
00:05:02.787 --> 00:05:06.830
So it is doing a really good job and
it continues to keep going.

92
00:05:06.830 --> 00:05:11.090
But Restify is a good one,
as far as API design in general.

93
00:05:11.090 --> 00:05:13.050
But still, none of them are like Rails.

94
00:05:13.050 --> 00:05:15.050
You're still not gonna
get something like Rails.

95
00:05:15.050 --> 00:05:19.210
The closest I've seen to anything
like Rails and node is cells JS.

96
00:05:20.220 --> 00:05:25.028
And even that, it's not like Rails,
but it's the closest.

97
00:05:25.028 --> 00:05:28.600
&gt;&gt; Mark: And there was one more
question on LoopBack versus Express.

98
00:05:28.600 --> 00:05:29.320
&gt;&gt; Scott Moss: Yeah, so

99
00:05:29.320 --> 00:05:32.980
LoopBack is actually a framework
that sits on top of Express.

100
00:05:32.980 --> 00:05:35.610
LoopBack is actually
the maintainers of Express as well.

101
00:05:35.610 --> 00:05:39.630
If you go to the Express website,
right here, there's a link for Loopback.

102
00:05:39.630 --> 00:05:41.390
LoopBack, they maintain Express and

103
00:05:41.390 --> 00:05:46.040
then they built this API
framework on top of Express.

104
00:05:46.040 --> 00:05:50.450
That this gives you a little more,
it's more conventional.

105
00:05:50.450 --> 00:05:52.620
It does a little more stuff for you.

106
00:05:52.620 --> 00:05:53.890
You have a lot less setup.

107
00:05:55.150 --> 00:05:55.870
It's a good choice.

108
00:05:55.870 --> 00:05:59.450
But I still don't recommend it unless
you even know what Express is doing.

109
00:05:59.450 --> 00:06:00.760
Because when you get to LoopBack and

110
00:06:00.760 --> 00:06:02.970
you start messing around
with middleware and stuff.

111
00:06:02.970 --> 00:06:04.250
And you don't even know
what middleware is.

112
00:06:04.250 --> 00:06:06.120
You don't know how Express
is handling this stuff.

113
00:06:06.120 --> 00:06:09.880
They're kinda confused, so
I still recommend starting with Express.

114
00:06:09.880 --> 00:06:12.977
And then, once you get familiar with that,
you can branch off and do LoopBack.

115
00:06:12.977 --> 00:06:17.707
Because a lot of the best frameworks out
there I know are built off on Express.

116
00:06:17.707 --> 00:06:22.402
So we have a good solid foundation on
that then moving to something LoopBack or

117
00:06:22.402 --> 00:06:24.727
cells is gonna be pretty easy for you.

118
00:06:24.727 --> 00:06:28.445
This is gonna be as this is gonna come
down to if you like the conventions that

119
00:06:28.445 --> 00:06:29.988
they're forcing you to have.

120
00:06:29.988 --> 00:06:31.268
So, that's what that comes down to.

121
00:06:31.268 --> 00:06:37.916
So, it's configuration,
where Express is more configurable,

122
00:06:37.916 --> 00:06:41.827
and loop back in cells
is more conventions.

123
00:06:41.827 --> 00:06:42.407
Cool.

124
00:06:42.407 --> 00:06:46.242
So, what was I saying.

125
00:06:46.242 --> 00:06:47.907
Yeah.
So, like I said,

126
00:06:47.907 --> 00:06:50.077
Express has a very welcome API.

127
00:06:50.077 --> 00:06:52.460
They take advantage of notes, evented I/O.

128
00:06:52.460 --> 00:06:58.160
Does anybody not know what I mean
when I say that, evented I/O?

129
00:06:58.160 --> 00:07:01.361
So, know just like JavaScript in
a browser, it's single threaded, so

130
00:07:01.361 --> 00:07:02.467
everything is evented.

131
00:07:02.467 --> 00:07:03.570
It's asynchronous.

132
00:07:03.570 --> 00:07:06.710
There's like an event
table where things happen.

133
00:07:06.710 --> 00:07:11.290
Some point later in time use callbacks
to get notified about those things.

134
00:07:11.290 --> 00:07:14.170
So, node has an evince it io the same way.

135
00:07:14.170 --> 00:07:17.330
You can notify different
pieces of your code about

136
00:07:17.330 --> 00:07:21.520
something that has come back
from sometime in the future.

137
00:07:21.520 --> 00:07:26.350
So, Express takes advantage of that very
well with the routing as you see it.

138
00:07:26.350 --> 00:07:28.290
It works, very, very, very good.

139
00:07:28.290 --> 00:07:31.450
So, let's see how that works, but Express
allows us to register callbacks when

140
00:07:31.450 --> 00:07:35.360
a particular combination of ACTP verbs and
routes are hit.

141
00:07:35.360 --> 00:07:36.750
So, that's the beauty of Express,

142
00:07:36.750 --> 00:07:39.790
it's literally just a routing
library with middleware.

143
00:07:39.790 --> 00:07:43.460
It allows you to set up verbs with
routes and then when those routes and

144
00:07:43.460 --> 00:07:45.930
verbs are hit by a request,

145
00:07:45.930 --> 00:07:49.190
that'll run the functions you tell it to
run in that order you tell it ro run.

146
00:07:49.190 --> 00:07:50.910
And that's all Express does.

147
00:07:50.910 --> 00:07:54.567
That's it.

148
00:07:54.567 --> 00:07:57.550
So, Express is just one of many server
frameworks out there for node.js.

149
00:07:57.550 --> 00:08:01.480
Like I was saying, we're using it
because it's the most commonly used, and

150
00:08:01.480 --> 00:08:05.020
its lack of strict conventions will force
you to learn more about what is going on

151
00:08:05.020 --> 00:08:05.920
as you build the API.

