WEBVTT

1
00:00:00.000 --> 00:00:03.890
[MUSIC]

2
00:00:03.890 --> 00:00:05.450
&gt;&gt; Scott Moss: All right,
so we're almost there.

3
00:00:05.450 --> 00:00:07.550
I'm just showing you
through all the stuff.

4
00:00:07.550 --> 00:00:10.800
I don't want to just be like here's how to
do it and then you forget how to do it.

5
00:00:10.800 --> 00:00:12.150
I want you to see these problems.

6
00:00:13.430 --> 00:00:20.910
So,
&gt;&gt; Scott Moss: And how to resolve them.

7
00:00:20.910 --> 00:00:22.600
Great, so now we got that back.

8
00:00:22.600 --> 00:00:24.470
Can anybody think of anything
else that we might need?

9
00:00:24.470 --> 00:00:27.600
It's like one big one, a huge one.

10
00:00:27.600 --> 00:00:29.150
Maybe I'll just show you.

11
00:00:29.150 --> 00:00:32.427
Let me stop this, [SOUND].

12
00:00:32.427 --> 00:00:35.520
And then now, let me try to run this,
the API again.

13
00:00:37.650 --> 00:00:38.180
Now I'm going to write.

14
00:00:38.180 --> 00:00:40.428
I'm just going to write it locally,
let's see what happens.

15
00:00:40.428 --> 00:00:45.210
Boom, what's that?

16
00:00:45.210 --> 00:00:46.360
Yeah, no mongo.

17
00:00:46.360 --> 00:00:47.900
We didn't tell Heroku
that we wanted Mongo,

18
00:00:47.900 --> 00:00:50.520
I was going to try to
connect with some database.

19
00:00:50.520 --> 00:00:54.370
And we also don't have her
production database URL.

20
00:00:54.370 --> 00:00:58.220
All right, if we go look in our app,
there is no production database.

21
00:00:58.220 --> 00:01:00.450
There's production.js, but
there's no dv.ur, there's nothing here.

22
00:01:02.818 --> 00:01:05.600
&gt;&gt; Scott Moss: So it will just
throw an error inside of server.js.

23
00:01:05.600 --> 00:01:08.180
It was gonna do config.db.url.

24
00:01:08.180 --> 00:01:11.065
There is no config.db in production.js.

25
00:01:11.065 --> 00:01:13.500
So this will actually just error out.

26
00:01:13.500 --> 00:01:15.970
It cannot read .url is one to find.

27
00:01:15.970 --> 00:01:17.550
It will get that error.

28
00:01:19.990 --> 00:01:22.340
So what we need to do is one,
let's create a db here.

29
00:01:22.340 --> 00:01:27.890
We'll copy this one,
go to production, we'll put it here,

30
00:01:27.890 --> 00:01:31.340
we'll paste it, and then we need to
get rid of this with something else.

31
00:01:31.340 --> 00:01:33.330
So to do that, it's pretty easy in Heroku.

32
00:01:33.330 --> 00:01:34.270
At least it used to be.

33
00:01:34.270 --> 00:01:35.810
Let's check it out now.

34
00:01:35.810 --> 00:01:39.980
And we can go to resources,
and we can say find more.

35
00:01:42.200 --> 00:01:47.790
Yes, final resources, and we can go find
the closest Mongo thing that comes up.

36
00:01:49.340 --> 00:01:50.880
They used to have so many of them.

37
00:01:50.880 --> 00:01:52.030
Here we go.

38
00:01:52.030 --> 00:01:56.673
Compose, I think they just got
bought out by IBM, did they not?

39
00:01:56.673 --> 00:02:00.673
Two days ago, $18 a month?

40
00:02:00.673 --> 00:02:02.294
That's not what we want.

41
00:02:02.294 --> 00:02:03.873
We want the free one.

42
00:02:06.657 --> 00:02:09.697
&gt;&gt; Scott Moss: There it is,
that's the one we want.

43
00:02:09.697 --> 00:02:13.050
So I can just type in this command here,
or I can also click a button somewhere.

44
00:02:13.050 --> 00:02:13.580
Where's that button?

45
00:02:15.870 --> 00:02:16.960
I guess they don't have
that button anymore.

46
00:02:16.960 --> 00:02:19.650
So I can just use that command and
come down here.

47
00:02:19.650 --> 00:02:24.820
Just type that in, great.

48
00:02:24.820 --> 00:02:27.800
So now we have Mongo added and
all we gotta do is get that URL.

49
00:02:27.800 --> 00:02:29.790
Do I know the URL of this Mongo database?

50
00:02:29.790 --> 00:02:30.910
No, no way.

51
00:02:30.910 --> 00:02:34.013
But I do know the environment very well
because it will tell me if I go read

52
00:02:34.013 --> 00:02:34.860
the docs, right.

53
00:02:37.435 --> 00:02:38.499
&gt;&gt; Scott Moss: Somewhere here.

54
00:02:38.499 --> 00:02:38.999
Here we go.

55
00:02:44.269 --> 00:02:47.470
&gt;&gt; Scott Moss: It will be Mongo lab URI.

56
00:02:47.470 --> 00:02:48.950
So that's your URL right there.

57
00:02:48.950 --> 00:02:51.100
So I just copy that guy.

58
00:02:51.100 --> 00:02:53.450
Then I could come back in
here on the production.js,

59
00:02:53.450 --> 00:02:56.330
and I'll keep that area as a default.

60
00:02:56.330 --> 00:02:59.996
But what I really wanna do is process.env.

61
00:02:59.996 --> 00:03:03.036
that, or URI.

62
00:03:03.036 --> 00:03:04.636
Is that what it was, or URL?

63
00:03:04.636 --> 00:03:05.570
&gt;&gt; Speaker 2: URI.
&gt;&gt; Scott Moss: URI, okay.

64
00:03:06.760 --> 00:03:09.320
Yeah, so that's gonna be our URL.

65
00:03:09.320 --> 00:03:10.129
Or whatever that is.

66
00:03:11.480 --> 00:03:13.220
You see how that works?

67
00:03:13.220 --> 00:03:14.470
That's how I get my database.

68
00:03:14.470 --> 00:03:17.970
&gt;&gt; Speaker 2: If it was production,
we wouldn't wanna provide it or would we?

69
00:03:17.970 --> 00:03:18.780
&gt;&gt; Scott Moss: No, it wouldn't do.

70
00:03:18.780 --> 00:03:19.630
It was gonna break anyway.

71
00:03:19.630 --> 00:03:24.510
Yeah, it's just still not right, so, yeah
I guess you really don't need that there.

72
00:03:24.510 --> 00:03:28.600
What I would do is I provider or, and I'd
have another environment variable here and

73
00:03:28.600 --> 00:03:30.563
another environment variable,
like three backup ones.

74
00:03:30.563 --> 00:03:33.196
Just in case, but yeah.

75
00:03:33.196 --> 00:03:38.750
So we also need to verify that Heroku
is in fact running in production mode.

76
00:03:38.750 --> 00:03:42.570
So what we do is, why did it log me out?

77
00:03:42.570 --> 00:03:43.810
I don't even know.

78
00:03:43.810 --> 00:03:44.330
Let's go back in.

79
00:03:46.420 --> 00:03:49.090
And we can do this because Heroku
actually makes it pretty easy.

80
00:03:49.090 --> 00:03:54.430
If we go here.

81
00:03:54.430 --> 00:03:58.452
[INAUDIBLE] If we go click on settings we
can look at all our environment variables,

82
00:03:58.452 --> 00:03:59.470
right here.

83
00:03:59.470 --> 00:04:01.630
So there's our Mongo lab
one that we just added.

84
00:04:01.630 --> 00:04:03.430
We can edit, we can add more.

85
00:04:03.430 --> 00:04:06.350
So let's just make sure,
I'm sure it is on by default but

86
00:04:06.350 --> 00:04:09.100
let's just guarantee
that it's on production.

87
00:04:09.100 --> 00:04:09.840
So we'll say production.

88
00:04:11.970 --> 00:04:14.533
I'll also go ahead and
add in my JWT secret.

89
00:04:14.533 --> 00:04:15.792
What's the name of that?

90
00:04:15.792 --> 00:04:21.150
It's called process.JWT,
so just capitalize JWT.

91
00:04:21.150 --> 00:04:27.340
I'll call it JWT and
it'll be called kittensBacon.

92
00:04:28.626 --> 00:04:30.169
[LAUGH].

93
00:04:30.169 --> 00:04:32.580
Kids, it's bacon.

94
00:04:32.580 --> 00:04:33.520
All right, so then we got that.

95
00:04:33.520 --> 00:04:37.297
Are there any other environment
variables that we need to put in?

96
00:04:39.964 --> 00:04:40.988
&gt;&gt; Scott Moss: The port's
gonna be given to us.

97
00:04:40.988 --> 00:04:44.337
And we don't have to,
I think we're good there.

98
00:04:44.337 --> 00:04:46.055
&gt;&gt; Speaker 3: On production js?

99
00:04:46.055 --> 00:04:47.196
&gt;&gt; Scott Moss: On production js.

100
00:04:47.196 --> 00:04:48.890
&gt;&gt; Speaker 3: You should remove that or
thing.

101
00:04:50.115 --> 00:04:51.020
&gt;&gt; Scott Moss: Yeah, thanks dude.

102
00:04:51.020 --> 00:04:52.260
That would have broke.

103
00:04:52.260 --> 00:04:55.340
All right, so we'll save that.

104
00:04:55.340 --> 00:04:58.360
When you hit save, it'll refresh
the server with the new environment rules.

105
00:04:58.360 --> 00:05:00.320
Yes.
&gt;&gt; Speaker 4: Port's not listed there.

106
00:05:00.320 --> 00:05:02.500
&gt;&gt; Scott Moss: Yeah,
it's not listed there, but it's there.

107
00:05:02.500 --> 00:05:04.830
Cuz it's a dynamic, it's not a set value.

108
00:05:04.830 --> 00:05:09.148
It might be 12345 today, and
it'll be 546789 tomorrow, so

109
00:05:09.148 --> 00:05:10.721
they just don't list it.

110
00:05:10.721 --> 00:05:16.130
Good question.

111
00:05:16.130 --> 00:05:19.630
I think that's all
the things that we need.

112
00:05:19.630 --> 00:05:21.460
I can't think of anything else.

113
00:05:21.460 --> 00:05:26.000
I honestly think this one's gonna work,
so let's see.

114
00:05:26.000 --> 00:05:28.309
Now I'm actually trying to make it work.

115
00:05:32.280 --> 00:05:33.210
One more thing, one more thing.

116
00:05:35.350 --> 00:05:36.480
No, we don't need that.

117
00:05:36.480 --> 00:05:38.800
Sweet, just making sure
we have our dependencies.

118
00:05:38.800 --> 00:05:42.700
So git, what was it?

119
00:05:42.700 --> 00:05:43.580
Heroku push?

120
00:05:43.580 --> 00:05:44.115
Git push heroku, or?

121
00:05:47.981 --> 00:05:48.570
&gt;&gt; Scott Moss: There we go.

122
00:05:48.570 --> 00:05:49.251
Git push Heroku master.

123
00:05:54.531 --> 00:05:55.490
&gt;&gt; Scott Moss: And let's see what happens.

124
00:05:56.836 --> 00:06:03.979
Yeah, it definitely put it on production.

125
00:06:16.651 --> 00:06:21.117
&gt;&gt; Scott Moss: And then what I'm gonna
do is I'm gonna say Heroku logs --tail,

126
00:06:21.117 --> 00:06:24.560
which will keep the logs open for
me the whole time.

127
00:06:28.880 --> 00:06:29.670
So that's great.

128
00:06:29.670 --> 00:06:33.110
State changed from starting to up.

129
00:06:33.110 --> 00:06:33.730
So that's a good sign.

130
00:06:33.730 --> 00:06:35.610
When it says up, that means it's great.

131
00:06:35.610 --> 00:06:37.100
Haven't seen an error yet.

132
00:06:37.100 --> 00:06:38.560
So I'm guessing this is running.

133
00:06:38.560 --> 00:06:39.690
And let's check it.

134
00:06:39.690 --> 00:06:44.520
So if we go to, where is it at, this guy.

135
00:06:44.520 --> 00:06:48.660
Refresh, that's what I'm talking about,
looks good.

136
00:06:48.660 --> 00:06:52.100
404, that's exactly what
I'm expecting to see.

137
00:06:52.100 --> 00:06:56.800
Api/users/nothing.

138
00:06:56.800 --> 00:06:57.670
Great, empty array.

139
00:06:57.670 --> 00:07:00.707
That's exactly right, there's nothing in
the database, it should be empty array.

140
00:07:00.707 --> 00:07:03.910
All right so now let's add some
CRUD to it, you got a question?

141
00:07:03.910 --> 00:07:06.959
&gt;&gt; Speaker 2: There's a question, does
the connection between your node app and

142
00:07:06.959 --> 00:07:09.473
the Mongo database have to go
out through the internet or

143
00:07:09.473 --> 00:07:12.650
are they talking to each other via
the data centers internal network.

144
00:07:13.710 --> 00:07:14.560
&gt;&gt; Scott Moss: Say that question again.

145
00:07:14.560 --> 00:07:17.940
&gt;&gt; Speaker 2: Like the database and
the node app, are they talking over

146
00:07:17.940 --> 00:07:20.410
a public interface or
is that internal to the Heroku's network.

147
00:07:22.350 --> 00:07:25.056
&gt;&gt; Scott Moss: They're talking through
the internet cuz the database is hosted

148
00:07:25.056 --> 00:07:26.100
somewhere else.

149
00:07:26.100 --> 00:07:29.030
So the database that we connected
to is through Mongo labs and

150
00:07:29.030 --> 00:07:32.290
Mongo labs is hosting that database
somewhere else and is talking.

151
00:07:32.290 --> 00:07:35.490
Yeah it's definitely somewhere else.

152
00:07:35.490 --> 00:07:36.910
Horoku isn't hosting that database.

153
00:07:37.950 --> 00:07:39.460
They just, like every,

154
00:07:39.460 --> 00:07:43.440
the database that we just added, you can
go to the website and add it yourself.

155
00:07:43.440 --> 00:07:47.610
It's just that Heroku has this marketplace
of all these services to show you all this

156
00:07:47.610 --> 00:07:48.810
cool stuff.

157
00:07:48.810 --> 00:07:52.190
But all it really is, is just a service
that you can go get yourself but for

158
00:07:52.190 --> 00:07:57.060
free or Heroku, super cheap cuz Heroku
makes everything free, except for

159
00:07:57.060 --> 00:07:58.855
Mongo, except for compose which is weird,

160
00:07:58.855 --> 00:08:02.000
cuz I've never seen anything from Heroku
that wasn't free for the base level.

161
00:08:02.000 --> 00:08:04.110
I don't know how compose
got away with that.

162
00:08:04.110 --> 00:08:06.410
But Heroku must really like them,
but I never seen it.

163
00:08:07.410 --> 00:08:08.630
All right, so now let's check it out.

164
00:08:08.630 --> 00:08:11.820
Let's grab this URL, and
let's do some CRUD on it, all right?

165
00:08:11.820 --> 00:08:14.150
So, let's go over here.

166
00:08:14.150 --> 00:08:16.220
I'll just, I'll keep this log open so
we can see it,

167
00:08:16.220 --> 00:08:17.530
and we'll do the CRUD over here.

168
00:08:18.640 --> 00:08:20.840
So, let me clear the log.

169
00:08:20.840 --> 00:08:21.883
It's not, there we go.

170
00:08:21.883 --> 00:08:24.475
So http, do I do s?

171
00:08:24.475 --> 00:08:26.160
Don't do that, that would be cool, though.

172
00:08:26.160 --> 00:08:30.427
So, http, that url/, wait,

173
00:08:30.427 --> 00:08:33.968
we need to do a post, right?

174
00:08:33.968 --> 00:08:40.110
Let's do a post to that URL and
we'll do a, let's create a user.

175
00:08:40.110 --> 00:08:44.787
So user name equals Scott.

176
00:08:44.787 --> 00:08:46.580
Password = 12345.

177
00:08:46.580 --> 00:08:51.890
&gt;&gt; Speaker 3: Do you
need to change the route?

178
00:08:51.890 --> 00:08:52.580
The users route?

179
00:08:53.830 --> 00:08:54.640
&gt;&gt; Scott Moss: Forgot.

180
00:08:54.640 --> 00:08:56.210
&gt;&gt; Speaker 3: You just had the base.

181
00:08:56.210 --> 00:09:00.986
&gt;&gt; Scott Moss: Thanks,
that's probably why it 404ed,

182
00:09:00.986 --> 00:09:03.890
api/users, there we go.

183
00:09:03.890 --> 00:09:06.228
Boom, got a token back.

184
00:09:06.228 --> 00:09:07.529
Totally worked.

185
00:09:07.529 --> 00:09:11.690
So now, if I refresh this I
should see myself, right?

186
00:09:13.990 --> 00:09:16.641
Yeah, yeah, yeah.
&gt;&gt; Speaker 3: [INAUDIBLE]

187
00:09:16.641 --> 00:09:17.217
&gt;&gt; Scott Moss: All right, so

188
00:09:17.217 --> 00:09:18.664
one more thing I wanted to show you.

189
00:09:18.664 --> 00:09:23.540
As far as like managing this stuff,

190
00:09:23.540 --> 00:09:27.285
actually no, nevermind.

191
00:09:27.285 --> 00:09:29.545
I was gonna show you how
to look at the database.

192
00:09:29.545 --> 00:09:33.412
If you look at the database, you can click
on whatever, in this case it's Mongo lab.

193
00:09:33.412 --> 00:09:34.004
You can do whatever.

194
00:09:34.004 --> 00:09:35.460
You can click on Mongo lab.

195
00:09:35.460 --> 00:09:39.570
It will take you to their website and
you can go through the database.

196
00:09:39.570 --> 00:09:41.840
You can also connect to this
database through the terminal,

197
00:09:41.840 --> 00:09:42.630
just like we were before.

198
00:09:42.630 --> 00:09:44.700
And they give you the command,
it says it right here.

199
00:09:44.700 --> 00:09:48.690
If you type this in right here, it would
allow you to connect to the terminal,

200
00:09:48.690 --> 00:09:50.690
and you've just got to replace it
with your username and password.

201
00:09:50.690 --> 00:09:52.790
But I'm not gonna do all that.

202
00:09:52.790 --> 00:09:55.750
But then, here's our database,
it has one user, which is me.

203
00:09:58.900 --> 00:09:59.620
Right there.

204
00:09:59.620 --> 00:10:00.483
There's my hash password.

