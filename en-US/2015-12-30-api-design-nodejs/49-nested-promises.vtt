WEBVTT

1
00:00:00.016 --> 00:00:04.081
[MUSIC]

2
00:00:04.081 --> 00:00:08.167
&gt;&gt; Scott Moss: So one thing to note here
is whatever you return inside a .bin is

3
00:00:08.167 --> 00:00:11.570
automatically wrapped in
another promise for you.

4
00:00:13.430 --> 00:00:18.270
So what that means is if I
just return the value 'hey'

5
00:00:24.252 --> 00:00:25.891
&gt;&gt; Scott Moss: I'm able to obtain,

6
00:00:25.891 --> 00:00:26.805
excuse me.

7
00:00:31.294 --> 00:00:32.842
&gt;&gt; Scott Moss: I'm able to
chain another .then on here

8
00:00:32.842 --> 00:00:34.030
because it returns a promise.

9
00:00:35.430 --> 00:00:37.849
And I get a value of whatever
the previous promise was.

10
00:00:38.900 --> 00:00:41.110
Which would be like a word, which is hey.

11
00:00:41.110 --> 00:00:46.507
So then I can just console.log word.

12
00:00:52.321 --> 00:00:54.810
&gt;&gt; Scott Moss: So if I run this, hey.

13
00:00:57.970 --> 00:01:00.409
Whatever I return inside of a .then,
I can return something else here.

14
00:01:02.300 --> 00:01:03.630
And I can do .then note as well.

15
00:01:07.120 --> 00:01:11.250
That also means that I can also just
return other promises in here too, right.

16
00:01:12.920 --> 00:01:16.100
So if I just wanted to
return read file again,

17
00:01:16.100 --> 00:01:19.660
and this time maybe it reads
a different file I could do that.

18
00:01:19.660 --> 00:01:22.940
I could return a promise,
I could return a regular value.

19
00:01:22.940 --> 00:01:24.429
Whatever I return here
is gonna be a promise.

20
00:01:27.653 --> 00:01:30.349
&gt;&gt; Scott Moss: So, that's how you
would deal with nested call backs and

21
00:01:30.349 --> 00:01:31.650
chaining of the promises.

22
00:01:31.650 --> 00:01:34.530
Just make sure that you return
something to one of these.

23
00:01:34.530 --> 00:01:38.380
So, a good pattern what people do is
they would just define these callback

24
00:01:38.380 --> 00:01:39.830
functions somewhere else.

25
00:01:39.830 --> 00:01:46.408
So, there's okay,
read file .then(logfile) and

26
00:01:46.408 --> 00:01:51.985
.then(sendEmail), .then(callHome)

27
00:01:51.985 --> 00:01:56.566
whatever, and then, okay .catch.

28
00:01:56.566 --> 00:01:58.660
Now tell me what happened.

29
00:01:58.660 --> 00:02:03.331
So this is a pattern you'll see
a lot where these functions

30
00:02:03.331 --> 00:02:06.990
will just be defined somewhere else.

31
00:02:06.990 --> 00:02:09.680
And what happens is these
functions will consume

32
00:02:09.680 --> 00:02:12.020
the resolution of the promise before them.

33
00:02:12.020 --> 00:02:15.900
So whatever read file resolves
will be fed to log file.

34
00:02:15.900 --> 00:02:18.950
Whatever log file resolves
will be fed to send email.

35
00:02:18.950 --> 00:02:22.140
Whatever send email resolves
will be fed to call home.

36
00:02:23.230 --> 00:02:26.240
And then if any one of these
errors it'll immediately go here.

37
00:02:26.240 --> 00:02:29.640
So, during the time of, let's say we
do read file, everything happens.

38
00:02:29.640 --> 00:02:31.640
We resolve and then we go to log file.

39
00:02:31.640 --> 00:02:34.130
And then somewhere inside
of log file it errors out.

40
00:02:34.130 --> 00:02:37.264
It'll skip these two and
come down to catch, throw you the error.

41
00:02:45.374 --> 00:02:47.444
&gt;&gt; Scott Moss: So,
this is a common pattern you'll see.

42
00:02:53.193 --> 00:02:54.070
&gt;&gt; Scott Moss: Any questions on this?

43
00:02:56.200 --> 00:02:59.845
&gt;&gt; Student 1: Do you have nested promises
in each of those functions [INAUDIBLE]

44
00:02:59.845 --> 00:03:02.440
doesn't belong execution of-
&gt;&gt; Scott Moss: Yeah, it will change.

45
00:03:02.440 --> 00:03:03.030
&gt;&gt; Student 1: It does?

46
00:03:03.030 --> 00:03:05.930
&gt;&gt; Scott Moss: Yeah, so if you have,
let's make log file, so

47
00:03:05.930 --> 00:03:07.000
let's say log file was this.

48
00:03:08.010 --> 00:03:13.817
Var logFile was a function
that returned readFile

49
00:03:13.817 --> 00:03:19.347
which is a promise and
then it had its own promise

50
00:03:19.347 --> 00:03:24.612
chain in here that
returned readFile again.

51
00:03:30.978 --> 00:03:31.620
&gt;&gt; Scott Moss: All right.

52
00:03:31.620 --> 00:03:34.750
So what's going to happen is first,
we'll do the read file.

53
00:03:34.750 --> 00:03:35.530
That'll get resolved.

54
00:03:35.530 --> 00:03:39.200
It will then go to log file
which will come into here.

55
00:03:39.200 --> 00:03:41.050
It'll do read file again.

56
00:03:41.050 --> 00:03:41.760
That's going to resolve.

57
00:03:41.760 --> 00:03:44.900
It's also going to do
read file one more time.

58
00:03:44.900 --> 00:03:47.070
That's gonna resolve and
then it comes down to sendEmail.

59
00:03:52.413 --> 00:03:55.650
&gt;&gt; Scott Moss: So, it will recursively
go down that chain synchronously.

60
00:03:55.650 --> 00:04:01.745
So, it pretty much turns your asynchronous
operations to synchronous operations.

61
00:04:01.745 --> 00:04:04.120
&gt;&gt; [INAUDIBLE]
&gt;&gt; Scott Moss: Hm?

62
00:04:04.120 --> 00:04:05.750
&gt;&gt; Student 2: There's also all-.

63
00:04:05.750 --> 00:04:09.260
&gt;&gt; Scott Moss: Right so,
I was gonna get into that.

64
00:04:09.260 --> 00:04:10.780
So any questions on this?

65
00:04:10.780 --> 00:04:11.890
Yes, Mark.

66
00:04:11.890 --> 00:04:15.100
&gt;&gt; Mark: They're asking on when
you're changing all those thens

67
00:04:15.100 --> 00:04:17.750
do you only need to call the catch once?

68
00:04:17.750 --> 00:04:20.360
&gt;&gt; Scott Moss: Yeah,
you only need to call the catch once but

69
00:04:20.360 --> 00:04:24.180
sometimes you want more fine control for
when these things happen.

70
00:04:24.180 --> 00:04:28.110
So for
instance this .catch is gonna happen

71
00:04:28.110 --> 00:04:29.970
if anyone of these things errors out.

72
00:04:29.970 --> 00:04:31.080
Which is great but

73
00:04:31.080 --> 00:04:35.550
what if you wanna know what happens if
logFile errors out specifically, right.

74
00:04:35.550 --> 00:04:38.760
There's two ways you could do it maybe you
can throw specific errors and check for

75
00:04:38.760 --> 00:04:40.450
the error types and catch.

76
00:04:40.450 --> 00:04:43.110
That could be okay but
let's say you didn't make log files so

77
00:04:43.110 --> 00:04:45.300
you can't really define
the specific error types.

78
00:04:45.300 --> 00:04:46.390
So what you would do is,

79
00:04:46.390 --> 00:04:50.070
most promise libraries take a second
argument and that's what you'll see.

80
00:04:50.070 --> 00:04:54.360
What I'm doing in mongoose has a second
argument that you can pass to them and

81
00:04:54.360 --> 00:04:55.390
that's the error call back.

82
00:04:57.440 --> 00:04:59.950
And that's optional so
it may happen or it may not happen.

83
00:05:01.500 --> 00:05:05.370
So if that end result was resolved,
it will call this call back.

84
00:05:05.370 --> 00:05:08.020
If it was rejected than it
'll call this call back

85
00:05:09.430 --> 00:05:12.210
that way you can get
notified about this promise.

86
00:05:12.210 --> 00:05:14.660
So it's like just stop execution
right here and tell me what happened.

87
00:05:17.510 --> 00:05:20.190
But yeah, you could just call
.catch at the end of a chain and

88
00:05:20.190 --> 00:05:24.101
it will tell you where.

89
00:05:24.101 --> 00:05:26.950
Any other questions on this?

90
00:05:30.200 --> 00:05:31.190
Okay.

91
00:05:31.190 --> 00:05:35.602
One more thing I wanna show you that is
very helpful in the context of database

92
00:05:35.602 --> 00:05:38.795
is another method called promise.all.

93
00:05:38.795 --> 00:05:42.380
I think this is very helpful, because
if someone had shown me this a long

94
00:05:42.380 --> 00:05:45.460
time ago versus me trying to figure out
what it does would have been great.

95
00:05:45.460 --> 00:05:50.060
So, promise.all will resolve an array
of promises and it will wait

96
00:05:50.060 --> 00:05:53.870
until all of them are done before it
goes on which is think is very helpful.

97
00:05:53.870 --> 00:05:57.750
So it allows us to things
in parallel you can say.

98
00:05:57.750 --> 00:06:01.290
If we have database query that
don't rely on previous queries.

99
00:06:01.290 --> 00:06:04.548
We can just run them in parallel and when
they all come back we can merge the data.

100
00:06:04.548 --> 00:06:05.507
So, yep?

101
00:06:05.507 --> 00:06:06.650
Mm-hm?

102
00:06:06.650 --> 00:06:08.310
&gt;&gt; Mark: I'm just kind of
following up on the last.

103
00:06:08.310 --> 00:06:13.060
If you are doing the air call backs,
then you do not need the .catch?

104
00:06:13.060 --> 00:06:14.680
So, if you're catching those
airs on each one of them?

105
00:06:14.680 --> 00:06:16.021
&gt;&gt; Scott Moss: Yes,
if you're catching airs on each one,

106
00:06:16.021 --> 00:06:16.937
you don't need the .catch.

107
00:06:21.126 --> 00:06:26.950
&gt;&gt; Scott Moss: So, let's say we have,
an array of promises.

108
00:06:26.950 --> 00:06:32.330
So we'll say var read or
we'll call it promises.

109
00:06:37.090 --> 00:06:40.120
And it's just read file like three times.

110
00:06:40.120 --> 00:06:42.310
Cuz that's a promise.

111
00:06:42.310 --> 00:06:43.980
So we'll call readfile three times.

112
00:06:43.980 --> 00:06:45.870
So you have an array of promises,

113
00:06:45.870 --> 00:06:49.050
cuz we know when you call readfile,
it returns a promise.

114
00:06:49.050 --> 00:06:50.460
So we have an array of promises right now.

115
00:06:50.460 --> 00:06:51.890
They've been executed.

116
00:06:51.890 --> 00:06:53.750
But now what we want to do is we don't

117
00:06:55.370 --> 00:06:57.890
wanna go to the next thing until
all these things come back.

118
00:06:59.240 --> 00:07:04.870
So what we'll do is we'll make a new
function that will say var readAllFiles.

119
00:07:06.790 --> 00:07:11.540
That's going to be a function and
we'll move promises up there, and

120
00:07:11.540 --> 00:07:17.941
instead of returning a new promise
this is going to return promise.all.

121
00:07:17.941 --> 00:07:25.268
So promise.all is just going to
take this array of promises.

122
00:07:29.994 --> 00:07:30.800
&gt;&gt; Scott Moss: And that's it.

123
00:07:30.800 --> 00:07:33.350
And now we're able to call
.then on the readAllFiles.

124
00:07:33.350 --> 00:07:37.580
So now if I come down here and
let's just get rid of this promise chain.

125
00:07:37.580 --> 00:07:45.078
Let's say readAllFiles .then.

126
00:07:49.126 --> 00:07:51.620
&gt;&gt; Scott Moss: And I say files.

127
00:07:51.620 --> 00:07:57.892
It's gonna be an array of all the files in
the order that they were arranged here.

128
00:08:05.362 --> 00:08:09.420
&gt;&gt; Scott Moss: So,
if we run that we'll see that's an array.

129
00:08:09.420 --> 00:08:12.110
I'll just put .length,
because that's really hard to see.

130
00:08:14.110 --> 00:08:17.070
All right, so there's three things
in the array, and as you can see,

131
00:08:17.070 --> 00:08:19.340
they're all that file, three times.

132
00:08:20.650 --> 00:08:24.625
So it weighted, so all those promises came
back, and it's like okay, here you go, and

133
00:08:24.625 --> 00:08:26.528
they might come back at different times.

134
00:08:30.982 --> 00:08:33.776
&gt;&gt; Scott Moss: So this is why a third
party libraries are cool because they have

135
00:08:33.776 --> 00:08:36.210
other methods to even add
more functionality to this.

136
00:08:36.210 --> 00:08:40.450
Like do the same thing for objects or
maybe don't go on if all things in

137
00:08:40.450 --> 00:08:44.710
the array don't resolve or continue if
one thing fails or stuff like that.

138
00:08:44.710 --> 00:08:46.095
There's so many cases.

139
00:08:46.095 --> 00:08:50.382
I don't think the built-in promise
library has spread built into it but

140
00:08:50.382 --> 00:08:52.160
we can check it.

141
00:08:52.160 --> 00:08:54.360
If it has it I'll tell you about it,
if it doesn't, let's see.

142
00:08:55.620 --> 00:08:58.240
Yeah, it doesn't have spread so
what spread would do,

143
00:08:58.240 --> 00:09:01.460
it would just spread these
files into multiple arguments.

144
00:09:01.460 --> 00:09:02.640
So instead of sending back an array,

145
00:09:02.640 --> 00:09:06.400
it would just be like file one,
file two, file three.

146
00:09:06.400 --> 00:09:07.050
And different arguments.

147
00:09:07.050 --> 00:09:08.470
It'll just spread the arguments.

148
00:09:08.470 --> 00:09:14.231
So, there'll be file1 here,
file2 here, file3 here.

149
00:09:17.491 --> 00:09:21.210
&gt;&gt; Scott Moss: So, that's what third party
stuff has that the built in one doesn't.

150
00:09:21.210 --> 00:09:23.446
But, as you can see it's pretty simple.

151
00:09:29.721 --> 00:09:30.490
&gt;&gt; Scott Moss: Any
questions on this stuff?

152
00:09:33.300 --> 00:09:35.040
So, the reason they made the A plus spec,
is so

153
00:09:35.040 --> 00:09:38.120
that you can use different
promise libraries together,

154
00:09:38.120 --> 00:09:42.020
and you can be sure that this method
will have the same syntax on it.

155
00:09:42.020 --> 00:09:46.490
That's why I might be able
to use a native promise

156
00:09:46.490 --> 00:09:49.150
function call with a Mongoose
promise function call.

157
00:09:49.150 --> 00:09:52.550
Cuz they're both following a spec,
or at least,

158
00:09:52.550 --> 00:09:57.760
Mongoose uses impromise,
which I don't think uses a spec 100%.

159
00:09:57.760 --> 00:09:58.655
But you can mix them up.

160
00:09:58.655 --> 00:10:02.800
And most third parties [INAUDIBLE] has
a method that allows you to wrap another

161
00:10:02.800 --> 00:10:04.910
promise, so it will work.

162
00:10:04.910 --> 00:10:06.265
Like Bluebird allows you to do that.

163
00:10:06.265 --> 00:10:09.133
&gt;&gt; [NOISE].

164
00:10:09.133 --> 00:10:11.760
&gt;&gt; Scott Moss: So
that's our foray into promises.

165
00:10:11.760 --> 00:10:14.020
Like I said, there's a lot more.

166
00:10:14.020 --> 00:10:15.750
I recommend reading up
on a lot more if you're

167
00:10:15.750 --> 00:10:17.780
gonna be doing a lot of new development.

168
00:10:17.780 --> 00:10:20.840
A really good practice actually is
just build your own promise library.

169
00:10:20.840 --> 00:10:22.190
It seems really hard.

170
00:10:22.190 --> 00:10:26.130
But it's actually just a whole bunch of
like caching and call backs and events.

171
00:10:26.130 --> 00:10:26.830
It's really not tough.

172
00:10:26.830 --> 00:10:29.400
There's like a thousand tutorials online
that shows you how to build your own

173
00:10:29.400 --> 00:10:30.640
promise library.

174
00:10:30.640 --> 00:10:33.160
Probably take you an hour to
get some basic functionality.

175
00:10:33.160 --> 00:10:34.810
That's what kind of worked for
me after I did that.

176
00:10:36.400 --> 00:10:37.760
You had questions Mark?

177
00:10:37.760 --> 00:10:40.260
&gt;&gt; Mark: Yeah a couple.
Have you ever used fibers?

178
00:10:40.260 --> 00:10:41.660
&gt;&gt; Scott Moss: I've never used fibers but
I've been,

179
00:10:41.660 --> 00:10:43.200
my friends been telling me about it.

180
00:10:43.200 --> 00:10:46.459
So if anybody's used it and they have
an opinion on it that would be great.

181
00:10:48.620 --> 00:10:54.900
&gt;&gt; Mark: And then are promises
available in the ES spec?

182
00:10:55.910 --> 00:10:56.560
&gt;&gt; Scott Moss: Yes, they are.

183
00:10:56.560 --> 00:10:57.730
&gt;&gt; Mark: Native promises?

184
00:10:57.730 --> 00:10:58.950
&gt;&gt; Scott Moss: Yes, they are.
So if you go look at,

185
00:10:58.950 --> 00:11:00.890
if we just type in native promises,

186
00:11:00.890 --> 00:11:04.120
I'll guarantee that's the first thing
that will pop up is the JavaScript one.

187
00:11:04.120 --> 00:11:04.660
Yeah, right there.

188
00:11:07.120 --> 00:11:08.160
It even says it right there.

189
00:11:08.160 --> 00:11:10.080
This is a new technology,
part of the ES2015.

190
00:11:10.080 --> 00:11:13.370
So it is right there,
all the documentation is there.

191
00:11:15.900 --> 00:11:17.870
I think it is even built
into the browsers now so

192
00:11:17.870 --> 00:11:21.550
if I open up chrome and
I type in promise it is right there.

193
00:11:21.550 --> 00:11:23.154
It is built into chrome too.

194
00:11:33.322 --> 00:11:38.377
&gt;&gt; Scott Moss: Cool,
any other questions on this?

195
00:11:38.377 --> 00:11:38.877
All right.

196
00:11:44.099 --> 00:11:44.770
&gt;&gt; Scott Moss: Will this be helpful?

197
00:11:44.770 --> 00:11:47.960
Should I check this in to source code for
anybody that might need this?

198
00:11:47.960 --> 00:11:51.780
Okay, I'll do that.

199
00:11:51.780 --> 00:11:54.130
It'll be on step nine fix.

