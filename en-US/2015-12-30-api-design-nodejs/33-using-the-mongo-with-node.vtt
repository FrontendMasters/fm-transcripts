WEBVTT

1
00:00:00.000 --> 00:00:04.155
[MUSIC]

2
00:00:04.155 --> 00:00:06.944
&gt;&gt; Speaker 1: So this is great when we
use the Mongo shell in the terminal to do

3
00:00:06.944 --> 00:00:10.016
stuff, but obviously we won't be
using the Mongo shell in our API.

4
00:00:10.016 --> 00:00:12.703
That will not be fun, right?

5
00:00:12.703 --> 00:00:16.660
So we need some type of JavaScript
driver to access mongo.

6
00:00:17.920 --> 00:00:20.850
There is a native driver that
we can use that will work fine,

7
00:00:20.850 --> 00:00:24.130
if you just npm install a mongo
JS you get the native driver.

8
00:00:24.130 --> 00:00:28.070
And it pretty much allows you to do
the same stuff we just did in this shell,

9
00:00:28.070 --> 00:00:29.730
in our JavaScript files.

10
00:00:30.820 --> 00:00:34.540
Which, like I said, it’s pretty easy,
but it gets even easier.

11
00:00:34.540 --> 00:00:37.438
And there's really not
a lot of options here.

12
00:00:37.438 --> 00:00:44.054
What we'll be using is ORM, or
I guess in a NoSQL context, an ODM.

13
00:00:45.837 --> 00:00:47.798
&gt;&gt; Speaker 1: Everybody
know what an ORM is?

14
00:00:47.798 --> 00:00:48.998
Does anybody not know what an ORM?

15
00:00:48.998 --> 00:00:50.272
So ORM is just,

16
00:00:50.272 --> 00:00:56.055
you can think of it as just a library
that helps us talk to the database.

17
00:00:59.671 --> 00:01:02.656
&gt;&gt; Speaker 1: That's all it is, it's
a library in some language that will allow

18
00:01:02.656 --> 00:01:05.876
you to talk to the database with
your preferred programming language.

19
00:01:13.582 --> 00:01:17.755
&gt;&gt; Speaker 1: It's short for
object relational management?

20
00:01:17.755 --> 00:01:18.710
&gt;&gt; Speaker 2: Mapper.

21
00:01:18.710 --> 00:01:19.658
&gt;&gt; Speaker 1: Mapper.

22
00:01:19.658 --> 00:01:20.904
There we go, yeah.

23
00:01:24.021 --> 00:01:26.417
&gt;&gt; Speaker 1: So Mongoose is
the most popular one for Mongo, and

24
00:01:26.417 --> 00:01:28.050
it's the preferred one.

25
00:01:28.050 --> 00:01:30.120
It's actually, I think,
the official one now.

26
00:01:30.120 --> 00:01:31.570
It's like the thing.

27
00:01:31.570 --> 00:01:34.150
So Mongoose is the one
that we'll be using.

28
00:01:34.150 --> 00:01:36.220
It is not made by
the people who made mongo.

29
00:01:36.220 --> 00:01:38.680
It's an open, third-party ORM.

30
00:01:40.300 --> 00:01:43.412
It's actually made by, who’s it made by?

31
00:01:43.412 --> 00:01:45.120
Automatic.

32
00:01:45.120 --> 00:01:47.020
The people who own WordPress.

33
00:01:47.020 --> 00:01:50.510
So, they're the ones who made it.

34
00:01:50.510 --> 00:01:52.337
And it's super awesome.

35
00:01:52.337 --> 00:01:53.747
It has a really, really good API,

36
00:01:53.747 --> 00:01:56.048
one of the best APIs I've seen
on any REM in JavaScript.

37
00:01:58.420 --> 00:02:00.368
&gt;&gt; Speaker 1: So
Mongoose will abstract things away.

38
00:02:02.823 --> 00:02:05.847
&gt;&gt; Speaker 1: It also adds supports for
things like promises.

39
00:02:05.847 --> 00:02:10.400
Allows us to model our data with schemas,
cuz remember I said, I have so many typos.

40
00:02:10.400 --> 00:02:14.830
Remember I said, up here,
mongo is a NoSQL database,

41
00:02:14.830 --> 00:02:17.290
we don't need to model our data,
we can just throw stuff in it.

42
00:02:17.290 --> 00:02:20.570
So we don't really need schemas
with mongo, as you saw,

43
00:02:20.570 --> 00:02:22.560
I just threw an object in there.

44
00:02:22.560 --> 00:02:24.140
I can just put anything
that I want in here.

45
00:02:25.160 --> 00:02:29.756
Any properties,
if I wanted to put an array of here,

46
00:02:29.756 --> 00:02:36.569
nums,
&gt;&gt; Speaker 1: That's fine.

47
00:02:36.569 --> 00:02:37.648
It'll put it in there.

48
00:02:37.648 --> 00:02:39.370
It doesn't matter, right?

49
00:02:39.370 --> 00:02:40.350
It doesn't care.

50
00:02:41.520 --> 00:02:46.940
Mongoose adds those features so
we can care about stuff like that.

51
00:02:46.940 --> 00:02:51.440
So it'll allow us to develop
these schemas just like you would

52
00:02:51.440 --> 00:02:54.381
have inside a relational database, and

53
00:02:54.381 --> 00:02:59.497
allow us to establish relationships
with our models and so much more.

54
00:02:59.497 --> 00:03:02.527
So if you ever use a relational
database you have different types of

55
00:03:02.527 --> 00:03:03.511
relations, right?

56
00:03:03.511 --> 00:03:06.793
You have one to one relationships,
one to many relationships,

57
00:03:06.793 --> 00:03:10.380
many to many relationships, right,
inside a relational database,

58
00:03:10.380 --> 00:03:14.238
which will determine how you store
these references on different tables.

59
00:03:14.238 --> 00:03:17.413
Or even join tables in different
situations, like many to many and

60
00:03:17.413 --> 00:03:18.850
stuff like that.

61
00:03:18.850 --> 00:03:23.060
So we're able to do that with Mongoose.

62
00:03:23.060 --> 00:03:26.720
But just note that mongo doesn't care,
as we just saw.

63
00:03:28.700 --> 00:03:30.627
Is everybody following me there?

64
00:03:30.627 --> 00:03:31.572
Okay.

65
00:03:34.091 --> 00:03:42.209
&gt;&gt; Speaker 1: So here's an example of how
you connect to mongo, using Mongoose.

66
00:03:42.209 --> 00:03:43.880
And it's just this simple.

67
00:03:45.670 --> 00:03:49.559
You require(‘mongoose’),
after you NPM install it, and

68
00:03:49.559 --> 00:03:54.692
then you call mongoose.connect, and then
you have to use this mongodb protocol,

69
00:03:54.692 --> 00:03:58.830
whereas typically on the URL
you have htp or whatever.

70
00:03:58.830 --> 00:04:01.696
Well when you connect to our database
it uses a different protocol, and

71
00:04:01.696 --> 00:04:02.998
that's the mongodb protocol.

72
00:04:02.998 --> 00:04:07.648
So, we put mongodb there, ://localhost.

73
00:04:07.648 --> 00:04:10.920
You don't need a port, it doesn't
matter if you can see through the port.

74
00:04:10.920 --> 00:04:15.060
And then the next is the name of
the database that you want to connect

75
00:04:15.060 --> 00:04:15.920
to or create.

76
00:04:15.920 --> 00:04:20.100
So, just like when we said use whatever,

77
00:04:20.100 --> 00:04:22.960
if it existed it'll switch to it,
if it doesn't exist it'll just make it.

78
00:04:22.960 --> 00:04:25.690
It's the same thing that's happening here.

79
00:04:25.690 --> 00:04:28.063
If you give it a name to database
if it exists it'll connect to it,

80
00:04:28.063 --> 00:04:29.502
if it doesn't exist it'll create it.

81
00:04:33.870 --> 00:04:36.490
&gt;&gt; Speaker 1: And that's how you
connect to a database, that's it.

82
00:04:36.490 --> 00:04:39.971
So now with that,
we're now connected to the database and

83
00:04:39.971 --> 00:04:43.819
we're able to start doing queries and
doing all types of stuff.

84
00:04:46.150 --> 00:04:47.422
&gt;&gt; Speaker 1: Any questions on that?

85
00:04:49.657 --> 00:04:51.452
&gt;&gt; Speaker 1: So
mongoose.connect, that's it.

