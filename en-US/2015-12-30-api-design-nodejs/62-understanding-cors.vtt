WEBVTT

1
00:00:00.000 --> 00:00:03.730
[MUSIC]

2
00:00:03.730 --> 00:00:04.651
&gt;&gt; Scott Moss: Okay, so there's a couple

3
00:00:04.651 --> 00:00:06.860
things we need to talk about
before we work on this.

4
00:00:06.860 --> 00:00:10.500
The first thing let's get
that other repo up and

5
00:00:10.500 --> 00:00:12.550
running cuz that might take a minute.

6
00:00:12.550 --> 00:00:16.535
So, if everybody, alrighty,
I recommend you do this.

7
00:00:16.535 --> 00:00:18.272
I mean, I guess you don't really have to,

8
00:00:18.272 --> 00:00:20.798
you can test the API from whatever
tool you've been testing.

9
00:00:20.798 --> 00:00:23.661
But, if you just want to have an app
that actually shows the data stuff.

10
00:00:23.661 --> 00:00:25.495
I think it'd be really cool.

11
00:00:25.495 --> 00:00:29.350
If you go to GitHub and fork or

12
00:00:29.350 --> 00:00:35.464
clone this repo, angular dash components.

13
00:00:41.361 --> 00:00:43.382
&gt;&gt; Scott Moss: I'll give everybody
a little bit to get that URL and

14
00:00:43.382 --> 00:00:45.020
then we'll go forward.

15
00:00:45.020 --> 00:00:47.590
&gt;&gt; Mark: They're asking,
can you just send the user

16
00:00:47.590 --> 00:00:51.800
when you first send the JSON web token and
store it in local storage?

17
00:00:51.800 --> 00:00:53.960
&gt;&gt; Scott Moss: Yeah, you could totally
send a user on their first time.

18
00:00:53.960 --> 00:00:55.960
There's nothing wrong with that.

19
00:00:55.960 --> 00:00:59.680
If you want to, yeah,
you could send the user,

20
00:00:59.680 --> 00:01:04.680
but what if that user object gets updated,
and now you have still data.

21
00:01:04.680 --> 00:01:07.060
Having a still token is okay,
there's really no such thing,

22
00:01:07.060 --> 00:01:08.730
as long as it doesn't expire.

23
00:01:08.730 --> 00:01:12.340
There's use cases for both.

24
00:01:12.340 --> 00:01:13.680
Sometimes you might wanna do that.

25
00:01:13.680 --> 00:01:16.999
I can see that happening
in a mobile application, or

26
00:01:16.999 --> 00:01:20.931
maybe if you had offline
capability that'd be really great.

27
00:01:20.931 --> 00:01:22.873
In blogging you probably do
have offline capabilities.

28
00:01:22.873 --> 00:01:25.440
So, it all depends on you.

29
00:01:25.440 --> 00:01:28.022
How important is it that your
data is always up to date?

30
00:01:32.283 --> 00:01:35.752
&gt;&gt; Mark: And little while back,
somebody was bringing up about pre hooks.

31
00:01:35.752 --> 00:01:37.490
&gt;&gt; Scott Moss: Mm-hm.

32
00:01:37.490 --> 00:01:40.420
&gt;&gt; Mark: He wasn't sure if you had
mentioned pre hooks in Mongoose only work

33
00:01:40.420 --> 00:01:42.360
on save and not on update.

34
00:01:42.360 --> 00:01:43.280
&gt;&gt; Scott Moss: Yeah, I mentioned that.

35
00:01:43.280 --> 00:01:45.780
They only work on save, never on update.

36
00:01:45.780 --> 00:01:47.689
&gt;&gt; Mark: Okay,
you wanna just elaborate on that?

37
00:01:49.180 --> 00:01:52.810
&gt;&gt; Scott Moss: I think it is
as simple as it's sounds.

38
00:01:52.810 --> 00:01:54.000
They did that for a reason.

39
00:01:54.000 --> 00:01:58.120
They don't want, there's things,
you have weird side effects like for

40
00:01:58.120 --> 00:02:02.170
instance if you go look
at our user model and

41
00:02:02.170 --> 00:02:05.690
on safe it's like all right
before saving encrypt a password.

42
00:02:05.690 --> 00:02:11.640
So let's say I create a user before it got
saved, it encrypted the password, great.

43
00:02:11.640 --> 00:02:15.200
I got the same user like a day later,
and I updated its user name.

44
00:02:15.200 --> 00:02:17.440
Now it's gonna come back here and
encrypt the password again.

45
00:02:17.440 --> 00:02:18.720
The password never was changed.

46
00:02:18.720 --> 00:02:20.390
So, that's what this check is for,

47
00:02:20.390 --> 00:02:24.050
the check is like if the password's
not modified that's great.

48
00:02:24.050 --> 00:02:28.293
But the whole point of save is just,
this is a one time thing,

49
00:02:28.293 --> 00:02:31.719
only I wanna change it
when it's first created.

50
00:02:31.719 --> 00:02:34.656
And this is I think it
was designed by choice.

51
00:02:34.656 --> 00:02:37.907
I'm not sure the exact
reason behind it but for me,

52
00:02:37.907 --> 00:02:42.911
it kinda make sense because on update
you might have unexpected side effects.

53
00:02:42.911 --> 00:02:45.514
Because you're change in different
properties on that update,

54
00:02:45.514 --> 00:02:47.974
whereas this is,
here's a new instance created.

55
00:02:47.974 --> 00:02:50.400
It's almost you're subscribing
to the collection, and

56
00:02:50.400 --> 00:02:53.220
not subscribing to changes
on the model itself.

57
00:02:53.220 --> 00:02:57.240
So the pre-save is, if anything changes
in this collection, let me know.

58
00:02:58.734 --> 00:03:01.230
And not if anything changes on this model,

59
00:03:01.230 --> 00:03:04.210
which I think is what that
person is thinking of.

60
00:03:05.500 --> 00:03:10.630
So it's not presave on
the actual instance.

61
00:03:10.630 --> 00:03:14.554
It's listing for stuff on the collection
when the instance is saved.

62
00:03:18.909 --> 00:03:23.040
&gt;&gt; Scott Moss: Cuz, so yeah before I could
clone this, this will probably helpful.

63
00:03:24.310 --> 00:03:29.100
And then to get started with that one so
if you're on that one, first thing you

64
00:03:29.100 --> 00:03:35.890
should do is empty uninstall and
keep a habit doing that.

65
00:03:35.890 --> 00:03:40.417
There's a lot of stuff on this one because
this was built using years 2015 and

66
00:03:40.417 --> 00:03:42.840
angular webpack and
code all types of crazy stuff.

67
00:03:44.550 --> 00:03:45.783
Yeah.

68
00:03:50.081 --> 00:03:52.110
&gt;&gt; Scott Moss: Cool.
So once you implement style,

69
00:03:52.110 --> 00:03:56.250
you can just type in npn start and
you'll see some output here.

70
00:03:56.250 --> 00:03:58.100
Don't worry about any of that stuff.

71
00:03:59.400 --> 00:04:00.250
And keep waiting for it.

72
00:04:00.250 --> 00:04:01.903
It's building,
it's building all the files.

73
00:04:01.903 --> 00:04:03.759
And then boom, it spits this stuff out.

74
00:04:03.759 --> 00:04:06.211
So if you just go to port 4500,
you'll see the app.

75
00:04:11.134 --> 00:04:13.079
&gt;&gt; Student 1: What is npm start?

76
00:04:13.079 --> 00:04:16.030
&gt;&gt; Scott Moss: What does NPM start do?

77
00:04:16.030 --> 00:04:18.310
Good question.
So I think we have on our API as well.

78
00:04:18.310 --> 00:04:21.370
Yeah, so if you go look at the
package.json, there's a field that says

79
00:04:21.370 --> 00:04:25.570
scripts and it's a shortcut, so
if I type in mpm start, run as command.

80
00:04:25.570 --> 00:04:26.480
Mpm test.

81
00:04:26.480 --> 00:04:27.510
Run as command.

82
00:04:27.510 --> 00:04:28.190
Yep.

83
00:04:28.190 --> 00:04:30.770
It's just a way of abstracting
away your build systems so

84
00:04:30.770 --> 00:04:31.520
people don't have to know.

85
00:04:31.520 --> 00:04:33.200
They don't really care what tool you use.

86
00:04:33.200 --> 00:04:36.150
They just type in mpm start and
it should start the thing.

87
00:04:36.150 --> 00:04:39.110
If you're using go or broccoli or
web pack or noteline, or whatever,

88
00:04:39.110 --> 00:04:40.881
if you type in mpm start, it should work.

89
00:04:45.417 --> 00:04:47.970
&gt;&gt; Scott Moss: So, in the case of
that app that we just downloaded,

90
00:04:47.970 --> 00:04:49.370
its using gulp and webpack.

91
00:04:49.370 --> 00:04:50.670
So npm and start calls gulp.

92
00:04:50.670 --> 00:04:52.390
Yup, Mark?

93
00:04:52.390 --> 00:04:54.750
&gt;&gt; Mark: Asking about if using
objectId for your user ID.

94
00:04:54.750 --> 00:04:59.510
Are there security concerns sending
back the mondodb objectId in plain text?

95
00:04:59.510 --> 00:05:02.740
&gt;&gt; Scott Moss: Are there
security concerns of,

96
00:05:02.740 --> 00:05:05.740
first of all where am I doing that,
let me see.

97
00:05:09.120 --> 00:05:13.590
I'm not sure exactly where I'm sending
back that, you mean on all the requests.

98
00:05:13.590 --> 00:05:19.667
Well I mean, it is as much of a concern or
least of a concern as sending back ID.

99
00:05:19.667 --> 00:05:21.420
On a SQL database.

100
00:05:21.420 --> 00:05:23.880
So, if you have you're
sending back the IDs.

101
00:05:23.880 --> 00:05:27.730
I think for most applications,
you need the IDs of things.

102
00:05:27.730 --> 00:05:29.780
That's how we sub
relationships on a client.

103
00:05:29.780 --> 00:05:31.240
So, if it is a security concern,

104
00:05:31.240 --> 00:05:34.410
then every single other database that
sends back IDs is a security concern.

105
00:05:34.410 --> 00:05:35.380
It's not unique to Mongo.

106
00:05:35.380 --> 00:05:40.901
But we definitely need the IDs to
identify things instead of relationships.

107
00:05:44.923 --> 00:05:46.950
&gt;&gt; Scott Moss: Passwords,
though, probably not.

108
00:05:46.950 --> 00:05:48.455
They'll only send that stuff,
and by default,

109
00:05:48.455 --> 00:05:49.714
we are sending back the hash passwords.

110
00:05:49.714 --> 00:05:52.216
If you've looked,
if you've gotten stepped up and looked,

111
00:05:52.216 --> 00:05:54.390
you see that we're sending
back the hash passwords.

112
00:05:54.390 --> 00:05:56.250
So, we'll have to get around that.

113
00:05:58.410 --> 00:05:59.100
Where was I?
Yeah.

114
00:05:59.100 --> 00:06:03.740
So here, if you go to local host 4500,
you should see the blog.

115
00:06:05.330 --> 00:06:09.970
And if you start it up and if you were
curious and you looked in the console and

116
00:06:09.970 --> 00:06:12.880
actually if you click on blog and
then you look on the console,

117
00:06:12.880 --> 00:06:18.030
you'll see that it actually went in and
got all the blog posts on my server.

118
00:06:18.030 --> 00:06:22.420
This is the mock data that I wrote,
or the mock data in your C database.

119
00:06:22.420 --> 00:06:24.257
It pulled it up, and it got it.

120
00:06:26.817 --> 00:06:27.710
&gt;&gt; Scott Moss: Everybody see that?

121
00:06:28.750 --> 00:06:33.424
So you have the data there, and you click
on it, it will just show you the bar.

122
00:06:37.902 --> 00:06:39.700
&gt;&gt; Student 2: Quick question,
going back to the last one.

123
00:06:39.700 --> 00:06:43.230
So, let's just say you do have something
that's more sensitive, like orders and

124
00:06:43.230 --> 00:06:47.440
say that your id's have Sequential versus

125
00:06:47.440 --> 00:06:51.950
these Mongo IDs which
are a little more GUI like.

126
00:06:51.950 --> 00:06:54.520
I presume there is
somewhere in middleware or

127
00:06:54.520 --> 00:06:57.970
somewhere where you'd say, hey,
if you are trying to get order two, and

128
00:06:57.970 --> 00:07:00.170
your not really part of order two,
you shouldn't get that.

129
00:07:00.170 --> 00:07:02.540
There's some logic you have to build in.

130
00:07:02.540 --> 00:07:03.620
&gt;&gt; Scott Moss: Yeah.

131
00:07:03.620 --> 00:07:04.490
&gt;&gt; Student 2: Kind of lock that down.

132
00:07:04.490 --> 00:07:05.780
&gt;&gt; Scott Moss: Yeah,
I think I told you that.

133
00:07:05.780 --> 00:07:09.310
That's more, yeah you could do that.

134
00:07:09.310 --> 00:07:13.000
I mean there's a lot of ways you could do
that, you could set up sub documents, or

135
00:07:13.000 --> 00:07:17.290
you could set up harder restrictions or
do some pre-hooks on this type of stuff.

136
00:07:17.290 --> 00:07:19.120
Hold on, let me check before I do this.

137
00:07:19.120 --> 00:07:20.632
Yeah, you could totally do that.

138
00:07:24.801 --> 00:07:25.703
&gt;&gt; Scott Moss: Cool, so again,

139
00:07:25.703 --> 00:07:29.640
this blog is getting the data from
localhost 3000 which is our server.

140
00:07:29.640 --> 00:07:32.127
Right, so if I go look at the server,
you'll see that there it is.

141
00:07:32.127 --> 00:07:32.939
It went and got it.

142
00:07:32.939 --> 00:07:36.030
&gt;&gt; Student 2: [COUGH]
&gt;&gt; Scott Moss: If I refresh the page,

143
00:07:36.030 --> 00:07:38.180
you'll see that it will get it again.

144
00:07:38.180 --> 00:07:39.103
Yeah, it got it again, 304.

145
00:07:44.630 --> 00:07:45.614
&gt;&gt; Scott Moss: So
in order for that to work,

146
00:07:45.614 --> 00:07:47.300
there's something that
we need to understand.

147
00:07:48.980 --> 00:07:52.270
And I'm just gonna go over it briefly
cuz I think people may know about it.

148
00:07:52.270 --> 00:07:54.750
Or, I'm sure a lot of people
know about it, who am I kidding?

149
00:07:54.750 --> 00:07:59.060
So in middleware, app.middleware,
we added two more middleware.

150
00:07:59.060 --> 00:08:02.530
One is unimportant, but
one is very important, and that's CORS.

151
00:08:02.530 --> 00:08:04.180
All right,
does anybody not know what CORS is?

152
00:08:05.250 --> 00:08:07.970
You don't know what CORS is?

153
00:08:07.970 --> 00:08:11.161
So, CORS is Cross-Origin Resource Sharing.

154
00:08:11.161 --> 00:08:17.536
So by default, if I'm on local host 4500.

155
00:08:17.536 --> 00:08:21.630
And I am trying to access
a route on localhost 3000.

156
00:08:21.630 --> 00:08:24.010
The browsers aren't gonna let me.

157
00:08:24.010 --> 00:08:26.710
They are gonna, no you can't do it.

158
00:08:26.710 --> 00:08:28.470
It's a security concern, all right.

159
00:08:28.470 --> 00:08:33.510
So, ways around that include things like
JSON P which is still pretty widely used.

160
00:08:33.510 --> 00:08:35.980
Or you just have your server enable CORS.

161
00:08:35.980 --> 00:08:40.840
And what that does is, so in Chrome, when
Chrome makes a request to your server,

162
00:08:40.840 --> 00:08:43.890
it actually makes two requests,
for one request.

163
00:08:43.890 --> 00:08:45.450
It does what's called
like a preflight check.

164
00:08:45.450 --> 00:08:46.860
A preflight check is just,

165
00:08:54.750 --> 00:08:56.502
there's another verb other than,
let me see.

166
00:08:56.502 --> 00:08:58.436
There's another verb other
than get posts put and delete,

167
00:08:58.436 --> 00:09:00.300
there's another one called options.

168
00:09:00.300 --> 00:09:03.220
And an options request, is what
the browser was sent to the server.

169
00:09:03.220 --> 00:09:06.100
It's, hey,
am I allowed to make a request to you?

170
00:09:06.100 --> 00:09:08.380
And the server can say yes or no.

171
00:09:08.380 --> 00:09:09.590
So, it responds backward 200.

172
00:09:09.590 --> 00:09:11.288
It's, yeah, you're okay.

173
00:09:11.288 --> 00:09:12.735
Which is, of course, enabled.

174
00:09:12.735 --> 00:09:15.894
Right, so now, you can share these
resources across different domains,

175
00:09:15.894 --> 00:09:16.808
different origins.

176
00:09:16.808 --> 00:09:19.113
Or it can be, hold up,
let me check your domain to see if you,

177
00:09:19.113 --> 00:09:21.010
let me see if you're on the white list.

178
00:09:21.010 --> 00:09:22.550
Or let me see if you have this.

179
00:09:22.550 --> 00:09:24.132
So you can do different things.

180
00:09:24.132 --> 00:09:25.640
And they're, no, no, you're not allowed.

181
00:09:25.640 --> 00:09:28.835
And then Chrome will come back to them,
nope, you're just weren't allowed.

182
00:09:28.835 --> 00:09:29.900
So, to show you what that means.

183
00:09:29.900 --> 00:09:32.150
If I get rid of this right here.

184
00:09:34.440 --> 00:09:35.830
So I got rid of that.

185
00:09:35.830 --> 00:09:37.770
And then, did the server restart?

186
00:09:39.610 --> 00:09:40.850
Yeah.

187
00:09:40.850 --> 00:09:43.170
If I refresh, there it is.

188
00:09:43.170 --> 00:09:45.130
So, Chrome threw an error.

189
00:09:45.130 --> 00:09:45.980
It says cannot load,

190
00:09:45.980 --> 00:09:50.850
no Access-Control-Allow-Origin header
is present on the requested resource.

191
00:09:50.850 --> 00:09:54.520
Origin 4500 is therefore
not allowed access.

192
00:09:54.520 --> 00:09:56.650
It's because we didn't enable CORS.

193
00:09:56.650 --> 00:09:59.500
Enabling CORS is really just
accepting that pre-flight check, and

194
00:09:59.500 --> 00:10:00.910
setting up the appropriate headers,

195
00:10:00.910 --> 00:10:03.482
which include this header that
Chrome is freaking out about.

196
00:10:03.482 --> 00:10:08.630
So, it's, you didn't say that
Access-Control-Allow-Origin.

197
00:10:08.630 --> 00:10:12.950
So, this is a middleware that I
downloaded, MPM Install Cors, and

198
00:10:12.950 --> 00:10:13.690
it just does that for you.

199
00:10:13.690 --> 00:10:14.680
We can do this ourselves, too.

200
00:10:14.680 --> 00:10:15.710
It's really simple.

201
00:10:15.710 --> 00:10:19.638
But, it's a thing that does it for
us, so enabling that.

202
00:10:19.638 --> 00:10:22.659
I now am able to share resources
across different origins.

203
00:10:22.659 --> 00:10:25.839
Now I refresh it's, yeah, they're fine.

204
00:10:25.839 --> 00:10:29.401
&gt;&gt; Student 3: And
does that allow any origin then?

205
00:10:29.401 --> 00:10:31.100
&gt;&gt; Scott Moss: By default,
yeah, any origin.

206
00:10:31.100 --> 00:10:32.780
But the CORS middleware takes options.

207
00:10:32.780 --> 00:10:35.890
It will take a white list array
like only white listies or

208
00:10:35.890 --> 00:10:37.940
black listies, or whatever.

209
00:10:37.940 --> 00:10:38.440
Yeah.

210
00:10:41.330 --> 00:10:43.150
So we have CORS, are there any
questions on CORSes, of course?

211
00:10:45.380 --> 00:10:49.069
That's very important, the reason they're
built into APIs is other people are gonna

212
00:10:49.069 --> 00:10:51.256
consume, there should
probably be CORS enabled.

213
00:10:51.256 --> 00:10:53.388
&gt;&gt; Student 4: Computer identity
[INAUDIBLE] your server,

214
00:10:53.388 --> 00:10:55.940
normally you're doing
[INAUDIBLE] computer there?

215
00:10:55.940 --> 00:10:58.840
&gt;&gt; Scott Moss: Yeah, so if you have
a proxy Engine X on it then you would deal

216
00:10:58.840 --> 00:11:00.929
with it there, which is a good idea, yes.

217
00:11:04.817 --> 00:11:06.263
&gt;&gt; Scott Moss: Engine X is awesome.

218
00:11:08.785 --> 00:11:09.870
&gt;&gt; Scott Moss: Okay, so we've got CORS in.

219
00:11:09.870 --> 00:11:12.960
I guess it's worth mentioning the other
one, this method override one.

220
00:11:12.960 --> 00:11:16.200
This is just, well actually I don't
know exactly what this one does.

221
00:11:16.200 --> 00:11:18.968
If anybody knows exactly what this
one does let me I just know that if I

222
00:11:18.968 --> 00:11:19.611
always use it.

223
00:11:19.611 --> 00:11:23.023
So, some would do would like to put
in the patch or something like that.

224
00:11:23.023 --> 00:11:23.840
Not too sure.

225
00:11:25.070 --> 00:11:25.630
But I'll put it there.

