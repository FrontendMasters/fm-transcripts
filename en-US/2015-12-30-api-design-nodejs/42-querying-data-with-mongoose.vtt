WEBVTT

1
00:00:00.000 --> 00:00:03.450
[MUSIC]

2
00:00:03.450 --> 00:00:06.400
&gt;&gt; Speaker 1: So,
Mongo has this sophisticated query syntax.

3
00:00:06.400 --> 00:00:09.670
I'm going to go through this one,
actually this one's kind of long.

4
00:00:10.900 --> 00:00:11.612
But I need to go to it.

5
00:00:11.612 --> 00:00:14.390
I'm gonna go through it relatively
quicker than I normally do, so

6
00:00:14.390 --> 00:00:15.650
we can get started with the exercise.

7
00:00:15.650 --> 00:00:18.340
That way you guys can get out of
here relatively earlier time and

8
00:00:18.340 --> 00:00:19.400
not be here all day.

9
00:00:19.400 --> 00:00:22.750
So I'm going to go through this,
the notes, relatively quicker so

10
00:00:22.750 --> 00:00:26.070
we can hop right into the example, which
is actually going to be kind of tough.

11
00:00:27.640 --> 00:00:32.020
So, Mongo has a sophisticated query
syntax that is full of options.

12
00:00:32.020 --> 00:00:34.570
Actually, it has too many options for
me to even list here.

13
00:00:34.570 --> 00:00:36.990
When I was writing this,

14
00:00:36.990 --> 00:00:42.710
I was worried about what to show you,
what not to show you, cuz there's so

15
00:00:42.710 --> 00:00:45.060
many things and there's like five
different ways to do the same thing.

16
00:00:46.150 --> 00:00:48.450
So I was just like I don't
even know what's the best way.

17
00:00:48.450 --> 00:00:52.700
So there's just too many things to list so
I just listed the one that I thought was

18
00:00:52.700 --> 00:00:56.410
the simplest and the one that I used the
most and like the foundation of the rest.

19
00:00:56.410 --> 00:01:01.120
So using the mongoose model we have a few
ways to ask mongo about what data we want.

20
00:01:01.120 --> 00:01:05.990
So we did this before, kind of,
inside of the mongo shell,

21
00:01:05.990 --> 00:01:09.760
we were like db.the name
of the collection.find.

22
00:01:09.760 --> 00:01:11.180
That was the native mongo implementation,

23
00:01:11.180 --> 00:01:14.880
this is the mongoose implementation
that just calls that internally.

24
00:01:16.290 --> 00:01:21.410
So when I say model, I'm talking about the
name of the model, so this is the model.

25
00:01:21.410 --> 00:01:23.370
This thing that's getting exported,
that's the model.

26
00:01:23.370 --> 00:01:25.640
So in this case it would be post, or

27
00:01:25.640 --> 00:01:27.430
whatever you called it
when you required it.

28
00:01:27.430 --> 00:01:28.070
So this is the model.

29
00:01:30.140 --> 00:01:32.360
So Model.find is a method
that we can call.

30
00:01:33.450 --> 00:01:35.850
And what it does is,
it can take a few things, but

31
00:01:35.850 --> 00:01:38.330
the most important thing is that
the first object you pass in,

32
00:01:38.330 --> 00:01:41.340
it's just like an object describing
the stuff that you want to find.

33
00:01:41.340 --> 00:01:44.746
So in the case of posts,
if we said posts.find,

34
00:01:44.746 --> 00:01:49.494
actually I'll just do it down here so
you can see what it looks like.

35
00:01:54.758 --> 00:01:57.058
&gt;&gt; Speaker 1: So down here if I were like,

36
00:01:57.058 --> 00:02:01.963
post.find, the object I can
pass in is the first argument

37
00:02:01.963 --> 00:02:06.183
is gonna describe the post
that I'm looking for.

38
00:02:06.183 --> 00:02:11.615
So, I wanna find the post who's name is,
or title,

39
00:02:11.615 --> 00:02:18.060
sorry.
&gt;&gt; Speaker 1: Who's title is whatever.

40
00:02:19.570 --> 00:02:22.530
So because our titles are unique
this is only gonna return one.

41
00:02:22.530 --> 00:02:26.910
So then I can use a callback,
which is a node style callback,

42
00:02:26.910 --> 00:02:27.960
which takes the error.

43
00:02:27.960 --> 00:02:29.740
A possible error is the first argument.

44
00:02:29.740 --> 00:02:31.710
And then a possible document
is the second argument, so

45
00:02:31.710 --> 00:02:34.032
the document is returned
from the database.

46
00:02:34.032 --> 00:02:35.024
So there I will have that stuff.

47
00:02:36.275 --> 00:02:42.845
Alternatively, most of these mango or
mango query return promises.

48
00:02:44.035 --> 00:02:46.145
So like I say .then instead.

49
00:02:49.880 --> 00:02:51.403
There's also another
way to execute this but

50
00:02:51.403 --> 00:02:53.979
we're gonna talk about that later cuz
that one's a little more difficult.

51
00:02:53.979 --> 00:02:59.400
But that's the basics of the find method.

52
00:02:59.400 --> 00:03:01.770
So the find method is always
gonna return an array.

53
00:03:01.770 --> 00:03:02.500
Even if it finds one.

54
00:03:02.500 --> 00:03:04.955
Even if it doesn't find anything,
it'll be an array.

55
00:03:04.955 --> 00:03:07.540
But if it doesn't find
anything it'll be empty.

56
00:03:07.540 --> 00:03:08.339
Nothing will be in the array.

57
00:03:08.339 --> 00:03:11.690
But find always returns an array or
an error.

58
00:03:14.370 --> 00:03:17.110
So above is a basic example
of how we can query Mongo for

59
00:03:17.110 --> 00:03:19.260
a specific model using the find method.

60
00:03:19.260 --> 00:03:22.410
We can pass a query object to
specify what we're looking for.

61
00:03:22.410 --> 00:03:23.930
The object is empty.

62
00:03:23.930 --> 00:03:24.970
So I have an empty object here.

63
00:03:24.970 --> 00:03:26.860
So that means we want to get
every single thing on that model.

64
00:03:26.860 --> 00:03:29.090
That means give me
everything on that model.

65
00:03:29.090 --> 00:03:29.590
Everything.

66
00:03:31.260 --> 00:03:32.740
I think you can even
just not use the object.

67
00:03:32.740 --> 00:03:34.160
You can just not put anything in there.

68
00:03:34.160 --> 00:03:36.300
The second argument is
a node style callback.

69
00:03:38.370 --> 00:03:41.440
In this example it's a node style
callback with either an error or

70
00:03:41.440 --> 00:03:44.170
the documents that gonna be retrieved.

71
00:03:44.170 --> 00:03:45.890
Most queries on mongoose return a promise.

72
00:03:46.900 --> 00:03:47.710
And you can look at the docs.

73
00:03:47.710 --> 00:03:52.121
It'll show you some more stuff.
&gt;&gt; Speaker 1: So,

74
00:03:52.121 --> 00:03:56.821
here's another utility method about
it a Model.findById if it is give

75
00:03:56.821 --> 00:04:00.300
an object ID it will find
that one thing or not.

76
00:04:00.300 --> 00:04:03.761
So, that you return an error will
either return that document or

77
00:04:03.761 --> 00:04:06.004
it will just return nothing, no error but

78
00:04:06.004 --> 00:04:13.194
it also didn't find anything.
&gt;&gt; Speaker 1: So this one's very helpful

79
00:04:13.194 --> 00:04:18.220
for those PUT/DELETE/GET one routes,
because they all use the ID property.

80
00:04:18.220 --> 00:04:19.850
So if you wanna put something,
you need an ID so

81
00:04:19.850 --> 00:04:23.330
you gotta find that thing first If you
wanna delete something you need an ID.

82
00:04:23.330 --> 00:04:25.740
So this method will come in handy for
that, find by ID.

83
00:04:26.780 --> 00:04:28.140
Cuz we'll be given the ID on the URL.

84
00:04:28.140 --> 00:04:30.710
Yup.
&gt;&gt; Speaker 2: They're wondering why you're

85
00:04:30.710 --> 00:04:36.910
calling next if error's true.
&gt;&gt; Speaker 1: So

86
00:04:36.910 --> 00:04:39.070
the reason I'm doing this,
so this is gonna be.

87
00:04:39.070 --> 00:04:45.120
This is a hint of, this query's
wrapped inside of a route callback,

88
00:04:45.120 --> 00:04:47.770
so we have access to request,
response, and next.

89
00:04:47.770 --> 00:04:49.820
So because of this function,

90
00:04:49.820 --> 00:04:53.810
is asynchronous, if we want node
to know about this error, and

91
00:04:53.810 --> 00:04:56.680
we wanna be able to catch it,
we actually need to pass it into next.

92
00:04:56.680 --> 00:04:59.294
Whereas this error before,
but all synchronous, so

93
00:04:59.294 --> 00:05:01.209
they will always pass
down through the chain.

94
00:05:01.209 --> 00:05:03.485
This is gonna be in a completely
different call stack.

95
00:05:03.485 --> 00:05:07.051
So if you're familiar with angular,
and they invented, how it works,

96
00:05:07.051 --> 00:05:09.858
this functioning is happening
at a completely different

97
00:05:09.858 --> 00:05:12.640
call stack than this
execution defined by id.

98
00:05:12.640 --> 00:05:16.910
So we have to call next to pass in order
to to pass it down to our air handle or

99
00:05:16.910 --> 00:05:18.250
it will never get handled.

100
00:05:18.250 --> 00:05:20.300
It is a completely different call site.

101
00:05:20.300 --> 00:05:22.530
It will just stop and break the server.

102
00:05:22.530 --> 00:05:32.282
So this is why the next is awesome.
&gt;&gt; Speaker 2: Where is next coming from?

103
00:05:32.282 --> 00:05:35.260
The main parameter, or argument?
&gt;&gt; Speaker 1: Yeah, so

104
00:05:35.260 --> 00:05:39.020
all this is wrapped
inside of one of these.

105
00:05:40.060 --> 00:05:42.020
I should have just written it.

106
00:05:42.020 --> 00:05:43.460
It's in one of these callback right here.

107
00:05:45.700 --> 00:05:52.060
So when you see these examples here,
they're inside of one of these functions.

108
00:05:52.060 --> 00:05:57.390
That's why I'm able to call response and
next.

109
00:05:57.390 --> 00:05:57.960
Sorry about that.

110
00:05:57.960 --> 00:06:01.280
Next is not coming Mongoose,
it's coming from Express.

111
00:06:01.280 --> 00:06:03.400
That's the express is
next in the middle here.

112
00:06:05.320 --> 00:06:07.840
So we'll be replacing all this stuff.

113
00:06:07.840 --> 00:06:12.763
With this stuff.
&gt;&gt; Speaker 1: So

114
00:06:12.763 --> 00:06:17.150
that's how you find an ID,
that's how you find all of something.

115
00:06:17.150 --> 00:06:19.780
So those are two methods you
will definitely be using.

116
00:06:19.780 --> 00:06:21.170
Here's a few ways to
create a new document.

117
00:06:21.170 --> 00:06:24.750
There's probably more,
but here's a few ways.

118
00:06:24.750 --> 00:06:29.020
So we could say var whatever
equals a new model that we have.

119
00:06:29.020 --> 00:06:31.540
And then we pass in the object
to create the new model.

120
00:06:32.770 --> 00:06:36.550
And all you have to do is call it dot save
on that instance, which also takes a notes

121
00:06:36.550 --> 00:06:40.440
dot call back with either an error or
the document that got saved.

122
00:06:41.540 --> 00:06:42.920
And if we save it, just send it back.

123
00:06:44.920 --> 00:06:49.760
Another way to do it is use the dot
create shortcut on the actual model,

124
00:06:49.760 --> 00:06:53.650
which takes in the thing you want
to create or many of those things.

125
00:06:53.650 --> 00:06:56.100
And then a node.callback as well,
same thing.

126
00:06:57.600 --> 00:07:00.270
And then the third was to do
it is if you can just say

127
00:07:00.270 --> 00:07:03.120
new model without passing in an object.

128
00:07:03.120 --> 00:07:05.030
And then add the properties
using the dot notation.

129
00:07:05.030 --> 00:07:07.240
And then still call save.

130
00:07:08.300 --> 00:07:14.140
All three will do the same thing
Is calling new dog internally,

131
00:07:14.140 --> 00:07:15.830
then it's calling save for you.

132
00:07:15.830 --> 00:07:18.310
It's just doing both,
whereas we're doing it manually here.

133
00:07:18.310 --> 00:07:20.862
We're calling new dog, we're adding
the properties then we're calling

134
00:07:20.862 --> 00:07:25.026
save.
&gt;&gt; Speaker 1: Those are three ways to

135
00:07:25.026 --> 00:07:27.680
create a method.
&gt;&gt; Speaker 3: You lost me.

136
00:07:27.680 --> 00:07:28.660
&gt;&gt; Speaker 1: I lost you?

137
00:07:28.660 --> 00:07:29.400
Alright.
&gt;&gt; Speaker 3: Where

138
00:07:29.400 --> 00:07:31.525
did I get a function called save from?
&gt;&gt; Speaker 1: So

139
00:07:31.525 --> 00:07:36.460
new doc, when you make a new model.

140
00:07:36.460 --> 00:07:37.690
I'll just.

141
00:07:37.690 --> 00:07:38.890
Let's just do it in here.
&gt;&gt; Speaker 2: Is

142
00:07:38.890 --> 00:07:40.120
that schema.
&gt;&gt; Speaker 1: Yep.

143
00:07:40.120 --> 00:07:41.700
THat's a model.
&gt;&gt; Speaker 2: Export from the schema.

144
00:07:41.700 --> 00:07:43.380
&gt;&gt; Speaker 1: Exactly, so

145
00:07:43.380 --> 00:07:47.720
this is like one of our categories or
our posts or our user.

146
00:07:47.720 --> 00:07:50.270
So we call them new user and new post
that's going to return an instance.

147
00:07:50.270 --> 00:07:53.790
In this case, it's the doc,
And now we can say dog.save.

148
00:07:53.790 --> 00:07:59.369
So it's like if I were to come back into
user, I guess, I deleted it didn't I,

149
00:07:59.369 --> 00:08:04.679
so I could just say user.save.
&gt;&gt; Speaker 1: The instance

150
00:08:04.679 --> 00:08:07.930
of a model is called a document.

151
00:08:07.930 --> 00:08:09.885
And all documents have
a save method on them.

152
00:08:10.998 --> 00:08:13.520
&gt;&gt; Speaker 1: It's an atomic operation.

153
00:08:13.520 --> 00:08:18.440
So if you call a .save on the document
go right to the data base.Doesn"t

154
00:08:18.440 --> 00:08:21.500
matter where that document is
inside of node it will right to it.

155
00:08:21.500 --> 00:08:26.651
It's atomic, so three ways to

156
00:08:26.651 --> 00:08:32.196
do the same thing you can pick your

157
00:08:32.196 --> 00:08:38.177
favor.
&gt;&gt; Speaker 1: So

158
00:08:38.177 --> 00:08:40.430
there's a way how to update something.

159
00:08:41.870 --> 00:08:45.290
So we can say model.findbyidandupdate.

160
00:08:45.290 --> 00:08:47.700
That's a real method you'll notice that

161
00:08:47.700 --> 00:08:52.060
Mongooses methods are actually pretty
verbose, they say exactly what they mean.

162
00:08:52.060 --> 00:08:55.390
I'm going to findbyIdanupdate So
if you give it an ID, and

163
00:08:56.400 --> 00:09:00.190
then you give it the objects with the new
properties that you want to update too.

164
00:09:01.450 --> 00:09:02.090
What it'll do is,

165
00:09:02.090 --> 00:09:07.230
first it will go see if it can find
a document on this model, with this ID.

166
00:09:07.230 --> 00:09:08.312
If it does find it,

167
00:09:08.312 --> 00:09:15.150
it will update these properties.
&gt;&gt; Speaker 1: And then an error callback.

168
00:09:15.150 --> 00:09:17.650
The thing to know about this though
is this thing called upsert.

169
00:09:17.650 --> 00:09:22.220
So by default if you do this it will
update the document to these properties,

170
00:09:23.320 --> 00:09:26.440
but it will also actually just
update the document to just be this.

171
00:09:26.440 --> 00:09:28.010
It will just literally be this and

172
00:09:28.010 --> 00:09:29.630
all the other properties that
were there before will be gone.

173
00:09:31.850 --> 00:09:33.400
So that's not what we want.

174
00:09:33.400 --> 00:09:34.870
So we want to use something
else to get around that.

175
00:09:34.870 --> 00:09:38.040
I'm not going to show you how to do that.

176
00:09:38.040 --> 00:09:38.920
I want you guys to figure that out.

177
00:09:40.940 --> 00:09:43.178
Or unless you ask me when I walk
around then I'll have to show you, but

178
00:09:43.178 --> 00:09:48.030
[LAUGH] I don't want to
give you all the answers.

179
00:09:48.030 --> 00:09:50.470
It's just there's another method
that allows you to do that or

180
00:09:50.470 --> 00:09:52.510
there's like two or
three other ways to do it.

181
00:09:52.510 --> 00:09:54.650
If you literary looked it up,
in like one second you would find out.

182
00:09:57.530 --> 00:09:59.188
And then of course, error style callback.

183
00:09:59.188 --> 00:10:04.916
Same thing.
&gt;&gt; Speaker 1: So

184
00:10:04.916 --> 00:10:07.360
like i said,
most of the methods look very similar.

185
00:10:09.370 --> 00:10:13.450
Start off with something like find,
you're passing some type of query object

186
00:10:13.450 --> 00:10:16.770
Maybe an optional update object and
then there's a callback.

187
00:10:16.770 --> 00:10:17.550
Alright?

188
00:10:17.550 --> 00:10:19.870
So there are some advantages,
uses, and features as well.

189
00:10:19.870 --> 00:10:22.140
Along with performing
methods on the model.

190
00:10:23.500 --> 00:10:26.950
We can also use the actual document to
do things like I was saying before.

191
00:10:26.950 --> 00:10:29.350
We were talking about the dot
save method on the document.

192
00:10:29.350 --> 00:10:32.950
The document also ahs a dot remove
method so it can remove itself.

193
00:10:32.950 --> 00:10:35.210
So if you had a instance of a document and
you wanna delete it,

194
00:10:35.210 --> 00:10:39.520
you can just say document.remove, and
it'll be like, okay, I'll go away.

195
00:10:39.520 --> 00:10:41.960
It'll either throw an error or
the removed document.

196
00:10:41.960 --> 00:10:44.300
So this is a quick way
to delete something.

197
00:10:44.300 --> 00:10:48.267
There's also a find by id and remove,
or delete, to do those things,

198
00:10:48.267 --> 00:10:54.639
as well.
&gt;&gt; Speaker 1: So

199
00:10:54.639 --> 00:10:59.010
again, this is possible because the actual
documents returned from mongo are not

200
00:10:59.010 --> 00:11:03.509
just objects but instances of a collection
and have specific properties and methods

201
00:11:03.509 --> 00:11:07.710
that allow us to operate on it and for it
to be able to write back to the database.

202
00:11:07.710 --> 00:11:12.390
The reason I emphasize this is
because you're going to use this.

203
00:11:12.390 --> 00:11:15.560
You're going to have a document
that's created somewhere else and

204
00:11:15.560 --> 00:11:16.870
you're going to pass it
to another function.

205
00:11:16.870 --> 00:11:20.200
And then you're going to figure
out how do I remove this thing?

206
00:11:20.200 --> 00:11:20.930
How do I delete this?

207
00:11:20.930 --> 00:11:22.430
How do I update this?

208
00:11:22.430 --> 00:11:24.720
And you're going to want to
query the database again.

209
00:11:24.720 --> 00:11:27.600
Your going to want to say I will
just do a model dot find and

210
00:11:27.600 --> 00:11:31.620
find the document again and do it here but
you already have a document there so

211
00:11:31.620 --> 00:11:34.540
just know that you can do
these methods on the document.

212
00:11:34.540 --> 00:11:36.150
You don't have to accrue
the database again.

