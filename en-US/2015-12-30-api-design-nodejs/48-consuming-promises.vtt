WEBVTT

1
00:00:00.000 --> 00:00:04.046
[MUSIC]

2
00:00:04.046 --> 00:00:06.660
&gt;&gt; Scott Moss: So
that's like the basics of a promise.

3
00:00:06.660 --> 00:00:09.220
So this how you would make your promise.

4
00:00:09.220 --> 00:00:13.854
Now how you would consume a promise
is that, again, because Node has this

5
00:00:13.854 --> 00:00:18.737
convention of the node style callbacks
where everything is error response.

6
00:00:18.737 --> 00:00:23.466
So what we'll do is let's refactor a
common function that you will see in node,

7
00:00:23.466 --> 00:00:26.017
something like reading the files system.

8
00:00:26.017 --> 00:00:32.222
So, what we'll do is we'll save our file
system equals require file system and

9
00:00:32.222 --> 00:00:36.960
what we'll do is we'll start
off reading the package json.

10
00:00:36.960 --> 00:00:38.870
All right, you got a question?

11
00:00:38.870 --> 00:00:40.370
You're stretching, all right.

12
00:00:40.370 --> 00:00:42.936
So, we'll say fs.readfile.

13
00:00:42.936 --> 00:00:47.853
All right, here we'll say package.json.

14
00:00:49.973 --> 00:00:53.527
&gt;&gt; Scott Moss: So, read this file it
takes a call back, nodes.call back,

15
00:00:53.527 --> 00:00:59.210
which means it's error, and then the data
that we want, I'm gonna call it file.

16
00:00:59.210 --> 00:01:00.090
So this is asynchronous.

17
00:01:00.090 --> 00:01:01.610
This doesn't happen synchronously, right?

18
00:01:01.610 --> 00:01:02.900
So this is gonna happen in the future.

19
00:01:02.900 --> 00:01:06.110
Does everybody know what
I mean when I say that?

20
00:01:06.110 --> 00:01:12.410
Like if I put a console.log
underneath this, just to show you.

21
00:01:12.410 --> 00:01:15.050
After read file.

22
00:01:15.050 --> 00:01:17.010
And I'm just gonna get rid of
all this stuff down here so

23
00:01:17.010 --> 00:01:19.100
we don't pollute the space.

24
00:01:19.100 --> 00:01:21.080
And if I put a console.log in here.

25
00:01:21.080 --> 00:01:22.695
Which one's gonna log first?

26
00:01:22.695 --> 00:01:24.860
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Scott Moss: Right,

27
00:01:24.860 --> 00:01:26.367
after read file's gonna log first.

28
00:01:29.527 --> 00:01:30.427
&gt;&gt; Scott Moss: All right?

29
00:01:33.948 --> 00:01:38.640
&gt;&gt; Scott Moss: So what I can do to
refactor this is I can also just return

30
00:01:38.640 --> 00:01:39.969
a new promise.

31
00:01:43.180 --> 00:01:46.170
But I have to wrap this
fs.readfile in that new promise.

32
00:01:46.170 --> 00:01:49.302
So instead of doing
something like console.log.

33
00:01:50.862 --> 00:01:57.422
&gt;&gt; Scott Moss: File.toString,
which is the actual file contents Oops.

34
00:02:06.082 --> 00:02:10.447
&gt;&gt; Scott Moss: What I would do is if
I wanted to use this in a promise,

35
00:02:10.447 --> 00:02:14.119
I'd just make a new promise so
I'll say fs or

36
00:02:14.119 --> 00:02:19.700
I'll say read file equals a function and
it returns a new promise.

37
00:02:21.750 --> 00:02:22.250
Oops.

38
00:02:28.040 --> 00:02:32.701
It takes a call back resolve and a reject.

39
00:02:33.750 --> 00:02:35.380
Gotta be in that order.

40
00:02:35.380 --> 00:02:37.710
And then what I can do is I can move
this stuff up, just go ahead and

41
00:02:37.710 --> 00:02:39.990
grab it, bump it up right into here.

42
00:02:41.500 --> 00:02:46.200
Then all I have to do is, now, I can just
do like a if statement or itinerary.

43
00:02:46.200 --> 00:02:48.460
So I can just do like,
yeah, it's gonna return.

44
00:02:48.460 --> 00:02:53.180
If there's an error,
then let's just reject the error.

45
00:02:55.280 --> 00:02:57.640
There's not an error,
let's just resolve the file.

46
00:02:57.640 --> 00:03:00.470
And I'll just do two string.

47
00:03:03.250 --> 00:03:03.750
Right?

48
00:03:06.460 --> 00:03:07.210
So it's gonna either or.

49
00:03:07.210 --> 00:03:08.650
If there's an error, reject the error.

50
00:03:08.650 --> 00:03:11.370
If there's not an error then we have to,
and

51
00:03:11.370 --> 00:03:13.739
if there's not an error then it's
resolve whatever the file is.

52
00:03:15.910 --> 00:03:19.486
So now when I do it I can
just come down here and

53
00:03:19.486 --> 00:03:23.547
say readFile .then and
I'll have the file here or

54
00:03:23.547 --> 00:03:28.878
I might have an error here,
depending on what readFile returns.

55
00:03:39.117 --> 00:03:41.828
&gt;&gt; Scott Moss: Oops.

56
00:03:41.828 --> 00:03:44.537
Right, so now if I run this,
it's the same thing.

57
00:03:44.537 --> 00:03:45.837
Same output.

58
00:03:55.557 --> 00:03:57.025
&gt;&gt; Scott Moss: Everybody see that,
everybody get that?

59
00:03:57.025 --> 00:03:59.865
If you don't get it that's fine,
this stuff is not easy.

60
00:03:59.865 --> 00:04:01.225
Promise took me awhile to understand.

61
00:04:01.225 --> 00:04:05.785
And this is just the basics,
most promise libraries

62
00:04:05.785 --> 00:04:08.809
have like 100 methods that do
a hundred different things.

63
00:04:09.840 --> 00:04:12.940
Which is ridiculous but
these are the basics.

64
00:04:12.940 --> 00:04:16.140
And then usually what you would
do is you have another third one

65
00:04:16.140 --> 00:04:18.950
that's rarely used but
I think is very important and

66
00:04:18.950 --> 00:04:22.130
is usually called finally or
maybe sometimes is called done.

67
00:04:22.130 --> 00:04:24.900
But what happens on this
one is this method will

68
00:04:24.900 --> 00:04:28.410
always get called no matter if
there was an error or a resolve.

69
00:04:28.410 --> 00:04:31.720
So this is like a great place to update
your UI if you were doing front end stuff,

70
00:04:31.720 --> 00:04:33.960
so all right make a call to the server.

71
00:04:33.960 --> 00:04:37.860
So what you'll do is let's say this is
a call to the server on the client.

72
00:04:37.860 --> 00:04:41.650
You start a loading animation here.

73
00:04:42.660 --> 00:04:48.840
Right and then you're like .then
get the data .catch log to err.

74
00:04:48.840 --> 00:04:51.010
But .finally,
I don't care if there's an err or not.

75
00:04:51.010 --> 00:04:52.390
Stop the loading animation right?

76
00:04:52.390 --> 00:04:56.640
So this is where these situations
like that were as always great.

77
00:04:56.640 --> 00:04:59.610
Where it's like guaranteed this is
gonna call no matter if resolve or not.

78
00:04:59.610 --> 00:05:00.498
Yes?

79
00:05:00.498 --> 00:05:02.661
&gt;&gt; Speaker 2: You might get to this but
they're gonna ask me,

80
00:05:02.661 --> 00:05:04.339
how would handle nested promises and

81
00:05:04.339 --> 00:05:05.912
avoid the call back pyramid
&gt;&gt; Scott Moss: Yep,

82
00:05:05.912 --> 00:05:08.317
that's exactly what I
was about to get into.

83
00:05:08.317 --> 00:05:09.598
You just read my mind.

84
00:05:11.037 --> 00:05:16.257
&gt;&gt; Scott Moss: Yes.

85
00:05:16.257 --> 00:05:19.527
&gt;&gt; Speaker 3: So do you normally
use the built-in library, or

86
00:05:19.527 --> 00:05:22.760
do you normally use
something else like queue?

87
00:05:22.760 --> 00:05:24.668
&gt;&gt; Scott Moss: Well the built-in
library's brand new.

88
00:05:24.668 --> 00:05:26.520
&gt;&gt; Speaker 3: It's brand new.

89
00:05:26.520 --> 00:05:29.410
&gt;&gt; Scott Moss: Yeah,
it's in this project 2015.

90
00:05:29.410 --> 00:05:31.640
I used to love Q.

91
00:05:31.640 --> 00:05:33.360
I still like Q, but now I use Bloomberg.

92
00:05:33.360 --> 00:05:36.249
It's probably the most popular,
fastest one.

93
00:05:36.249 --> 00:05:39.550
But then is pretty easy.

94
00:05:39.550 --> 00:05:40.940
It has all the methods you need.

95
00:05:40.940 --> 00:05:44.880
Bloomberg has just a grab bag
of more than what you ever need.

96
00:05:44.880 --> 00:05:47.024
&gt;&gt; Speaker 3: Why is Bloomberg,
why do you like it better than Q?

97
00:05:47.024 --> 00:05:49.013
&gt;&gt; Scott Moss: It was trending.

98
00:05:49.013 --> 00:05:52.259
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Scott Moss: I wanted to do something

99
00:05:52.259 --> 00:05:54.380
new, it's faster.

100
00:05:54.380 --> 00:05:57.530
It's performance tested to be faster, and
it had some methods on it that I liked.

101
00:05:57.530 --> 00:06:00.820
I just like one method in
particular where it can permissify,

102
00:06:00.820 --> 00:06:03.190
any Node style callback,
which I thought was pretty awesome.

103
00:06:03.190 --> 00:06:04.320
&gt;&gt; Speaker 3: Okay.

104
00:06:04.320 --> 00:06:06.090
&gt;&gt; Scott Moss: Well, so
can Q but the syntax is weird.

105
00:06:07.330 --> 00:06:08.850
Cool, so any questions on this so far,

106
00:06:08.850 --> 00:06:11.990
not really on just nested call backs and
different tricks and stuff?

