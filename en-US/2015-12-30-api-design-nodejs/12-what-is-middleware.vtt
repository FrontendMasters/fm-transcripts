WEBVTT

1
00:00:00.000 --> 00:00:03.919
[MUSIC]

2
00:00:03.919 --> 00:00:06.859
&gt;&gt; Speaker 1: So how does everybody
feel about the last exercise

3
00:00:06.859 --> 00:00:11.420
we did as far as going through this
blueprint and actually making the routes?

4
00:00:11.420 --> 00:00:13.160
Now if you didn't get
finished that's totally fine.

5
00:00:13.160 --> 00:00:18.100
I'm not so worried about if you actually
finished it as much as I am with you

6
00:00:18.100 --> 00:00:23.300
actually understanding what you had to
do and what needed to be done, right?

7
00:00:23.300 --> 00:00:27.180
So if you knew the gist of, yeah I
need to make a route that does this.

8
00:00:27.180 --> 00:00:30.110
I'm just having a hard time messing
around with the syntax of, or

9
00:00:30.110 --> 00:00:32.750
the nuances of the framework, that's fine.

10
00:00:32.750 --> 00:00:36.360
I mean, that can be resolved easily by
me coming around, or a quick search.

11
00:00:36.360 --> 00:00:39.570
But the hard thing to know is
what you're actually doing.

12
00:00:39.570 --> 00:00:41.390
That's the part that I'm
trying to teach you.

13
00:00:43.790 --> 00:00:47.216
&gt;&gt; Speaker 1: So this process that I'm
showing you right here is a very similar

14
00:00:47.216 --> 00:00:50.840
process on a very small scale of
how you would design an API, right?

15
00:00:50.840 --> 00:00:54.560
So start with the resource, start with
the routes to access the resource and

16
00:00:54.560 --> 00:00:55.110
what they do.

17
00:00:56.350 --> 00:00:58.285
And then go ahead and implement that.

18
00:00:58.285 --> 00:00:59.966
That's like a very low level.

19
00:00:59.966 --> 00:01:04.190
And this is, it's super low level
because we don't have a database or

20
00:01:04.190 --> 00:01:04.980
anything like that.

21
00:01:04.980 --> 00:01:07.851
But even with a database,
it's very similar to this.

22
00:01:10.811 --> 00:01:12.080
&gt;&gt; Speaker 1: Cool.
Any questions on this

23
00:01:12.080 --> 00:01:12.880
stuff before we move on?

24
00:01:14.800 --> 00:01:17.080
&gt;&gt; Speaker 2: One quick one, and you
don't have to spend a lot of time on it.

25
00:01:17.080 --> 00:01:20.067
Any just thoughts on naming of things or

26
00:01:20.067 --> 00:01:24.965
plurals versus singulars and
stuff, or guidelines to follow?

27
00:01:24.965 --> 00:01:25.984
&gt;&gt; Speaker 1: Are you
talking about routes?

28
00:01:25.984 --> 00:01:26.967
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Speaker 1: Yeah,

29
00:01:26.967 --> 00:01:32.085
I haven't read the 50 or 100 spec
on [INAUDIBLE] but I'm pretty sure

30
00:01:32.085 --> 00:01:37.737
that if you follow the rest of
the the resources should be pluralized.

31
00:01:37.737 --> 00:01:40.910
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Speaker 1: Yeah, pretty sure.

32
00:01:40.910 --> 00:01:41.480
&gt;&gt; Speaker 2: And is there, and for

33
00:01:41.480 --> 00:01:45.200
someone that's a little bit
more green in this area,

34
00:01:45.200 --> 00:01:47.450
is there some reference
that you recommend?

35
00:01:47.450 --> 00:01:50.200
Or does anyone know,
if they're listening to the stream,

36
00:01:50.200 --> 00:01:53.130
do you want to pop it on chat,
that'd be awesome.

37
00:01:53.130 --> 00:01:54.350
&gt;&gt; Speaker 1: For RESTful stuff?

38
00:01:54.350 --> 00:01:57.390
&gt;&gt; Speaker 2: Yeah, just in general
&gt;&gt; Speaker 1: There's endless stuff.

39
00:01:58.410 --> 00:02:00.930
I couldn't recommend one
that I felt comfortable,

40
00:02:00.930 --> 00:02:03.060
there's so much stuff out there.

41
00:02:03.060 --> 00:02:04.870
But just start reading.

42
00:02:04.870 --> 00:02:06.239
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Speaker 1: You just gotta find one

43
00:02:06.239 --> 00:02:09.602
that, I mean, if I Google it,
it'll be 1,000 pages of

44
00:02:09.602 --> 00:02:10.261
&gt;&gt; Speaker 2: No problem.

45
00:02:10.261 --> 00:02:11.030
&gt;&gt; Speaker 1: Yeah.

46
00:02:11.030 --> 00:02:15.429
&gt;&gt; Speaker 2: Thanks
&gt;&gt; Speaker 1: Okay, so

47
00:02:15.429 --> 00:02:16.964
now we're gonna talk about middleware.

48
00:02:18.904 --> 00:02:20.972
&gt;&gt; Speaker 1: Anybody want to tell
me their definition of middleware?

49
00:02:20.972 --> 00:02:24.480
I kinda got into it earlier,
but don't look at it.

50
00:02:24.480 --> 00:02:29.579
Tell me what you think it is.

51
00:02:29.579 --> 00:02:31.430
&gt;&gt; Speaker 1: Nobody?

52
00:02:31.430 --> 00:02:31.990
Yes.
What is it?

53
00:02:31.990 --> 00:02:34.840
&gt;&gt; Speaker 2: Kind of like utility classes
to help Express do the dirty work.

54
00:02:34.840 --> 00:02:35.948
&gt;&gt; Speaker 1: I like that.

55
00:02:35.948 --> 00:02:38.000
A set of utility classes help
Express with dirty work.

56
00:02:38.000 --> 00:02:38.860
I like it.

57
00:02:38.860 --> 00:02:39.360
Anybody else?

58
00:02:43.169 --> 00:02:44.860
&gt;&gt; Speaker 1: No, okay.

59
00:02:44.860 --> 00:02:47.410
So, what you were describing
is what middleware would do.

60
00:02:47.410 --> 00:02:49.090
That's pretty much exactly right.

61
00:02:49.090 --> 00:02:51.789
It's definitely gonna help
Express do some dirty work.

62
00:02:54.040 --> 00:02:56.450
But middleware is the backbone of Express.

63
00:02:56.450 --> 00:03:00.529
So I was telling you Express
is really just two things.

64
00:03:00.529 --> 00:03:04.432
It's a routing framework that allows us to
have advanced, really what it does is it

65
00:03:04.432 --> 00:03:07.130
sits on top of the HTTP module and
it sets up these events.

66
00:03:08.900 --> 00:03:11.210
Because Node has this eventing system.

67
00:03:11.210 --> 00:03:14.940
The HTTP modules fires off events
depending on what requests comes in.

68
00:03:14.940 --> 00:03:19.860
Express listens to those events and
registers callbacks that

69
00:03:19.860 --> 00:03:23.490
fire to specific routes
that are used to regexes.

70
00:03:23.490 --> 00:03:28.290
And then for each route that's registered,
it'll keep a stack of middleware.

71
00:03:28.290 --> 00:03:31.300
Which is just an array of functions
that it will call in order

72
00:03:31.300 --> 00:03:32.560
before it calls the last function.

73
00:03:33.910 --> 00:03:37.030
So, middleware, when you hear me say
middleware, it's just a function.

74
00:03:37.030 --> 00:03:39.080
That's all it is, it's just a function.

75
00:03:39.080 --> 00:03:42.440
When I say middleware,
I'm talking about one function.

76
00:03:42.440 --> 00:03:46.620
So, middleware is a function with
access to the request object,

77
00:03:47.660 --> 00:03:51.520
the response object,
and the next function.

78
00:03:51.520 --> 00:03:54.760
So, the next function is a function
that when called will go to

79
00:03:54.760 --> 00:03:55.720
the next middleware.

80
00:03:55.720 --> 00:03:57.330
That's why it's referenced as next.

81
00:03:58.530 --> 00:04:02.170
So, you'll do some stuff in a function,
maybe you'll change the request object,

82
00:04:02.170 --> 00:04:04.620
maybe you'll delete this,
maybe you'll query the database here.

83
00:04:04.620 --> 00:04:06.350
And then when you're done,
you'll say next,

84
00:04:06.350 --> 00:04:09.190
and it'll go to the next
function in the middleware.

85
00:04:09.190 --> 00:04:10.680
Which could be the last function, or

86
00:04:10.680 --> 00:04:12.098
another piece of middleware
that you created.

87
00:04:12.098 --> 00:04:16.340
So to
&gt;&gt; Speaker 1: so

88
00:04:16.340 --> 00:04:20.407
in our example, this right here,
so this is global middleware.

89
00:04:20.407 --> 00:04:24.950
So express.static is a function
that returns another function.

90
00:04:26.290 --> 00:04:29.940
So, like I said, this is a function
that returns another function.

91
00:04:29.940 --> 00:04:31.080
So, like this.

92
00:04:31.080 --> 00:04:33.267
Var results.

93
00:04:36.047 --> 00:04:37.820
&gt;&gt; Speaker 1: This
returns another function.

94
00:04:37.820 --> 00:04:39.240
So, we're putting result in here.

95
00:04:39.240 --> 00:04:40.480
That's what's happening, like this.

96
00:04:40.480 --> 00:04:43.670
And then result is a function
that looks like this.

97
00:04:43.670 --> 00:04:44.813
It kinda looks like this.

98
00:04:46.773 --> 00:04:50.680
&gt;&gt; Speaker 1: It takes in a request,
a response, and then next.

99
00:04:52.210 --> 00:04:53.950
That's what result looks like.

100
00:04:53.950 --> 00:04:55.170
And then it'll do some stuff.

101
00:04:57.810 --> 00:04:59.620
And then when it's done, it'll say next.

102
00:04:59.620 --> 00:05:03.890
And then when it calls next,
it'll go to this one.

103
00:05:05.420 --> 00:05:07.140
And this will do the exact same thing.

104
00:05:07.140 --> 00:05:09.650
It'll do some stuff and
then it'll go next.

105
00:05:09.650 --> 00:05:13.090
And this'll do the exact same thing, and
it'll do whatever it needs to do its job,

106
00:05:13.090 --> 00:05:14.152
and then it will say next.

107
00:05:14.152 --> 00:05:16.260
And it'll come down to our routing.

108
00:05:16.260 --> 00:05:20.590
And then whatever route that actually
came in, it'll hit that one.

109
00:05:20.590 --> 00:05:24.210
So when it says next, okay,
now I'm gonna go here to this piece.

110
00:05:25.590 --> 00:05:26.390
Yeah?
&gt;&gt; Speaker 2: So is it just like

111
00:05:26.390 --> 00:05:28.790
a series of callbacks
that we chain together?

112
00:05:28.790 --> 00:05:30.020
&gt;&gt; Speaker 1: That's exact,
that's all it is.

113
00:05:30.020 --> 00:05:32.390
It's just a stack of functions.

114
00:05:32.390 --> 00:05:32.920
&gt;&gt; Speaker 2: Gotcha.

115
00:05:32.920 --> 00:05:34.660
&gt;&gt; Speaker 1: And it won't go to
the next one until you tell it to.

116
00:05:34.660 --> 00:05:35.530
&gt;&gt; Speaker 2: Gotcha.

117
00:05:35.530 --> 00:05:38.099
&gt;&gt; Speaker 1: So
that's pretty much what middleware is.

118
00:05:43.499 --> 00:05:45.830
&gt;&gt; Speaker 1: So
middle wear can run any code.

119
00:05:45.830 --> 00:05:47.550
So, like i said, it's just a function.

120
00:05:47.550 --> 00:05:50.400
So it can run any code that
you could run anywhere else.

121
00:05:50.400 --> 00:05:51.948
So, a database call.

122
00:05:51.948 --> 00:05:53.156
You make a call to another server.

123
00:05:53.156 --> 00:05:54.791
Maybe even send a response
back to the client.

124
00:05:54.791 --> 00:06:01.150
It can do anything that we did
in any of these call backs here.

125
00:06:01.150 --> 00:06:01.758
It's just a function.

126
00:06:01.758 --> 00:06:02.970
We can do whatever we want.

127
00:06:02.970 --> 00:06:06.106
That's why we have this middleware that,
oops, let me go back.

128
00:06:08.245 --> 00:06:12.166
&gt;&gt; Speaker 1: That's why we have this
middleware up here that we downloaded,

129
00:06:12.166 --> 00:06:16.160
or expressed our static,
which serves a static assets for us, or

130
00:06:16.160 --> 00:06:18.220
body parts that encodes the URL.

131
00:06:18.220 --> 00:06:21.442
Or bodyParser.json that takes
everything and converts it to JSON and

132
00:06:21.442 --> 00:06:22.650
puts it on the body for us.

133
00:06:22.650 --> 00:06:27.050
It can do whatever it wants,
as long as it follows a few simple rules.

134
00:06:29.020 --> 00:06:30.335
So it can do whatever it wants.

135
00:06:30.335 --> 00:06:34.830
But as far as changing the request object,
the the response object, but

136
00:06:34.830 --> 00:06:41.000
it at least must end the request
response cycle, or it must call next.

137
00:06:41.000 --> 00:06:43.820
If it doesn't do one of those,
then your service is gonna hang.

138
00:06:44.910 --> 00:06:46.990
So if you don't believe me,
I'm gonna show you.

139
00:06:48.980 --> 00:06:50.795
So I'm gonna say app.use.

140
00:06:50.795 --> 00:06:53.640
I'm just gonna make some
middleware right here.

141
00:06:54.830 --> 00:06:59.100
It takes in a request,
a response, and then next.

142
00:07:00.150 --> 00:07:02.629
And what I'm gonna do is
I'm gonna say console.log.

143
00:07:04.589 --> 00:07:06.769
&gt;&gt; Speaker 1: First middleware.

144
00:07:10.589 --> 00:07:11.304
&gt;&gt; Speaker 1: All right.

145
00:07:11.304 --> 00:07:13.139
So, I'm gonna start the server.

146
00:07:22.159 --> 00:07:22.820
&gt;&gt; Speaker 1: So, port 3000.

147
00:07:22.820 --> 00:07:25.600
So, soon as I make a request to it,
it's gonna run the middleware.

148
00:07:25.600 --> 00:07:27.020
So this is gonna make
a request on port 3000.

149
00:07:27.020 --> 00:07:29.938
It's gonna refresh, okay.

150
00:07:29.938 --> 00:07:31.298
So you can see it's hanging.

151
00:07:31.298 --> 00:07:32.320
It's still loading.

152
00:07:32.320 --> 00:07:37.100
If I go back to the terminal
&gt;&gt; Speaker 1: first middleware logs.

153
00:07:37.100 --> 00:07:38.020
It didn't go anywhere else.

154
00:07:38.020 --> 00:07:39.510
It's just sitting there.

155
00:07:39.510 --> 00:07:41.640
Cuz I didn't say next, or
I didn't do a response.

156
00:07:41.640 --> 00:07:43.899
So it's just like,
I'm just gonna sit here until I time out.

157
00:07:45.310 --> 00:07:46.760
All right?
So, you have to make sure you do

158
00:07:46.760 --> 00:07:48.400
that inside your middleware.

159
00:07:48.400 --> 00:07:53.860
So to fix that, I could just say next,
which will go here.

160
00:07:53.860 --> 00:07:57.340
Or I can just send back a response back
to the client, and it'll be like, yeah,

161
00:07:57.340 --> 00:07:58.000
okay, yeah, yeah, yeah.

162
00:07:58.000 --> 00:08:02.300
And end the cycle,
which would not go to next.

163
00:08:03.770 --> 00:08:04.600
So, everybody follow me there?

164
00:08:05.750 --> 00:08:07.556
Yeah?
&gt;&gt; Speaker 2: Can you set middleware after

165
00:08:07.556 --> 00:08:12.500
a route, or
is it done once you hit that routing step?

166
00:08:12.500 --> 00:08:14.575
&gt;&gt; Speaker 1: Can you
set middleware after-

167
00:08:14.575 --> 00:08:15.800
&gt;&gt; Speaker 2: If you clean up after

168
00:08:15.800 --> 00:08:17.090
a route or something like that.

169
00:08:17.090 --> 00:08:20.970
&gt;&gt; Speaker 1: You can set,
as long as you, so

170
00:08:20.970 --> 00:08:22.790
all these routes here
are actually middleware, too.

171
00:08:22.790 --> 00:08:24.644
So all these have a next function, too.

172
00:08:26.624 --> 00:08:29.420
&gt;&gt; Speaker 1: Every route that we have,
we just didn't use them.

173
00:08:29.420 --> 00:08:30.310
There's a next function here.

174
00:08:31.750 --> 00:08:33.450
So when you call next inside this route,

175
00:08:33.450 --> 00:08:37.160
it will also go to another
middleware unless you respond it.

176
00:08:37.160 --> 00:08:39.260
The reason we didn't put next
here is cuz we were responding.

177
00:08:40.300 --> 00:08:44.409
So we couldn't say, yeah,
respond and then go to next.

178
00:08:46.869 --> 00:08:48.820
&gt;&gt; Speaker 1: Cuz actually
two things are gonna happen.

179
00:08:48.820 --> 00:08:50.420
One, there is no next.

180
00:08:50.420 --> 00:08:53.060
There's nothing after this
in the middleware chain.

181
00:08:54.190 --> 00:08:55.810
And two, we already responded.

182
00:08:55.810 --> 00:08:57.009
So it's just gonna break.

183
00:08:59.349 --> 00:09:00.910
&gt;&gt; Speaker 1: But, yeah,
you could theoretically.

184
00:09:00.910 --> 00:09:04.660
So if you had this route set up and
you wanted to go somewhere after this,

185
00:09:04.660 --> 00:09:07.180
you just need not to respond.

186
00:09:07.180 --> 00:09:09.910
But then technically this
wouldn't be a route handler,

187
00:09:09.910 --> 00:09:12.140
it'd just be middleware, right?

188
00:09:12.140 --> 00:09:16.142
We're gonna get into how to use
middleware in different places and

189
00:09:16.142 --> 00:09:17.870
controller methods.

190
00:09:17.870 --> 00:09:19.170
But yeah, you could.

191
00:09:19.170 --> 00:09:20.640
These are all the same thing.

192
00:09:20.640 --> 00:09:23.439
As long as you call next,
it will go to the next thing in the stack.

