WEBVTT

1
00:00:00.000 --> 00:00:03.977
[MUSIC]

2
00:00:03.977 --> 00:00:06.952
&gt;&gt; Speaker 1: So, above is a small
example of a schema with Mongoose, but

3
00:00:06.952 --> 00:00:08.140
those are the basics.

4
00:00:08.140 --> 00:00:12.799
Here's a tour of a whole bunch of
other types we can use in a schema,

5
00:00:12.799 --> 00:00:15.724
this time we're gonna make a dog schema.

6
00:00:15.724 --> 00:00:18.600
All right, same thing,
new Mongoose schema.

7
00:00:18.600 --> 00:00:23.270
Here we have a name for the dog, it's
type is string, and it's also required.

8
00:00:24.270 --> 00:00:26.770
And we also want to
enforce that it be unique.

9
00:00:26.770 --> 00:00:29.280
So there can be no two
dogs with the same name.

10
00:00:29.280 --> 00:00:34.058
So if you try to save a dog with
a name whose type was string but

11
00:00:34.058 --> 00:00:36.650
then there already existed
one with the same name,

12
00:00:36.650 --> 00:00:39.631
with the same string, it will throw
a validation error or a unique error.

13
00:00:41.680 --> 00:00:45.250
Unique also accounts for
no values too, but

14
00:00:45.250 --> 00:00:50.862
because we put require true,
we probably won't run into the error.

15
00:00:50.862 --> 00:00:54.092
You will have that error like,
if you didn't put require true here but

16
00:00:54.092 --> 00:00:57.705
you put unique true and the first dog you
save didn't have a name because its not

17
00:00:57.705 --> 00:01:01.429
required, the next dog you saved didn't
have a name, it'll throw a validation

18
00:01:01.429 --> 00:01:04.261
error cuz you all ready have one
dog who doesn't have a name.

19
00:01:04.261 --> 00:01:06.450
So you can't have another
dog who doesn't have a name.

20
00:01:06.450 --> 00:01:07.760
They're the same thing.

21
00:01:07.760 --> 00:01:10.550
The absence of no name is the same thing.

22
00:01:10.550 --> 00:01:11.438
So they're not unique.

23
00:01:11.438 --> 00:01:15.010
You can get around that though by
saying spars true and stuff like that.

24
00:01:15.010 --> 00:01:16.600
But by default it will say that.

25
00:01:18.540 --> 00:01:20.580
Another type is date.

26
00:01:20.580 --> 00:01:23.000
So when the dog was adopted,
it's going to be a date.

27
00:01:26.210 --> 00:01:29.450
A good practice, too, is like,
you can put defaults to.

28
00:01:29.450 --> 00:01:33.130
You can add a property here, just like
we put these properties on this object,

29
00:01:33.130 --> 00:01:38.320
we can say defaults to date.now, or
date.whenever, and put a date in there.

30
00:01:40.670 --> 00:01:42.280
Another type that we saw was boolean.

31
00:01:42.280 --> 00:01:44.099
So does it have it's shots, true or false?

32
00:01:47.000 --> 00:01:48.443
Another type is a buffer.

33
00:01:48.443 --> 00:01:50.919
If you've ever used node
extensively with file systems,

34
00:01:50.919 --> 00:01:52.290
there exist things as buffers.

35
00:01:52.290 --> 00:01:55.869
Like when you read a file,

36
00:01:55.869 --> 00:02:00.584
right if I come in here, and I say,

37
00:02:00.584 --> 00:02:05.951
node and I say var fs equals require fs,

38
00:02:05.951 --> 00:02:10.506
and I say fs.readFileSync, and

39
00:02:10.506 --> 00:02:17.605
I wanna read the
&gt;&gt; Speaker 1: package

40
00:02:20.676 --> 00:02:23.919
&gt;&gt; Speaker 1: .json.

41
00:02:23.919 --> 00:02:24.940
Alright I get this buffer.

42
00:02:27.620 --> 00:02:29.630
That's the type of buffer and
if you just want to turn it to a string,

43
00:02:29.630 --> 00:02:32.320
you just say to string,
then you get the actual file.

44
00:02:34.370 --> 00:02:38.010
So buffer is also a type, collar code,
I couldn't think of why a dog would have

45
00:02:38.010 --> 00:02:40.860
a buffer, so maybe it has
a hi-tech collar on, I don't know.

46
00:02:40.860 --> 00:02:44.410
But buffer, collar code, I don't know.

47
00:02:44.410 --> 00:02:46.340
Age, type is number.

48
00:02:46.340 --> 00:02:47.420
Of course we need numbers.

49
00:02:47.420 --> 00:02:48.640
You can also do validations here.

50
00:02:48.640 --> 00:02:50.200
It's min is 0, it's max is 30.

51
00:02:50.200 --> 00:02:53.770
You try to save a dog with a number
not in that range, it will freak out.

52
00:02:58.640 --> 00:03:00.310
This is where it gets
kinda interesting and

53
00:03:00.310 --> 00:03:04.100
you can see the flexibility of
Mongo showing through Mongoose.

54
00:03:04.100 --> 00:03:05.900
Cuz again, Mongo doesn't care.

55
00:03:05.900 --> 00:03:09.770
Mongoose is trying to allow us to do what
we want but still have some structure.

56
00:03:09.770 --> 00:03:13.280
But, you can start to see that shine
through here is when we have an array.

57
00:03:13.280 --> 00:03:15.380
So, when you have this array
you can do all types of things.

58
00:03:15.380 --> 00:03:20.150
So, when I say toys is type of array I can
just put an empty array there and move on.

59
00:03:20.150 --> 00:03:22.713
And that's the
&gt;&gt; [INAUDIBLE]

60
00:03:22.713 --> 00:03:25.470
&gt;&gt; Speaker 1: Bump the font up, yes.

61
00:03:25.470 --> 00:03:28.768
Is that good?
Okay.

62
00:03:28.768 --> 00:03:31.228
So if I say toys is type of array,

63
00:03:31.228 --> 00:03:36.257
I can just move on just by putting
an array literally right there.

64
00:03:36.257 --> 00:03:42.225
But, I can also blue print how the data
in that arrays gonna look like as well.

65
00:03:44.695 --> 00:03:49.145
And it can be exactly like I've been doing
up here, I have the same rules apply.

66
00:03:49.145 --> 00:03:52.765
So, I can say, you know what,
I want toys to be an array of objects, and

67
00:03:52.765 --> 00:03:56.465
all those objects must have
a name property on it, and

68
00:03:56.465 --> 00:04:01.460
the name must be unique, and
they also must be this and that.

69
00:04:01.460 --> 00:04:02.690
You can do that inside an object.

70
00:04:02.690 --> 00:04:05.290
You can also put in
another schema in here.

71
00:04:05.290 --> 00:04:06.760
So you can have nested documents.

72
00:04:06.760 --> 00:04:08.927
So you can be like, yeah,
I have a toy schema somewhere else and

73
00:04:08.927 --> 00:04:10.900
that's what's gonna go inside of here.

74
00:04:10.900 --> 00:04:11.400
You can do that.

75
00:04:13.690 --> 00:04:17.860
You can also just tell Mongoose,
it's just gonna be a type of mixed.

76
00:04:17.860 --> 00:04:22.210
So you can tell Mongoose, look at the
types in a minute, like elicit types but

77
00:04:22.210 --> 00:04:25.880
you can say Mongoose I just want
this to be a mixed bag of types.

78
00:04:25.880 --> 00:04:26.680
I don't know what it's gonna be.

79
00:04:26.680 --> 00:04:27.370
It might be a boolean.

80
00:04:27.370 --> 00:04:28.070
It might be an object.

81
00:04:28.070 --> 00:04:29.210
It might be a strain.

82
00:04:29.210 --> 00:04:29.860
I don't know.
So

83
00:04:29.860 --> 00:04:32.540
it's gonna be a mixed bag or
you can just leave it blank.

84
00:04:34.130 --> 00:04:34.750
So it's up to you.

85
00:04:35.940 --> 00:04:38.350
It all depends on how you want to
query your data because, like I said,

86
00:04:38.350 --> 00:04:39.900
Mongo doesn't care.

87
00:04:39.900 --> 00:04:43.400
So because it doesn't care and Mongoose is
giving you the flexibility to do whatever

88
00:04:43.400 --> 00:04:47.960
you want, it really all comes down to
how are you gonna query your data.

89
00:04:47.960 --> 00:04:49.920
What do you need when you ask the dog?

90
00:04:49.920 --> 00:04:53.508
And that's how you know
you want to put it in.

91
00:04:53.508 --> 00:04:58.470
There are database type things, like
common things that you don't want to do.

92
00:04:58.470 --> 00:05:01.350
But for the most part,
it's whatever you want to put in there.

93
00:05:02.550 --> 00:05:04.090
Nested objects looks like this.

94
00:05:04.090 --> 00:05:08.920
So if you want a nested object, you'd say
the property and use the object literal,

95
00:05:08.920 --> 00:05:12.790
just like we did up here, like with
the name, but this is not a nested object.

96
00:05:12.790 --> 00:05:15.000
This is just me defining the name.

97
00:05:15.000 --> 00:05:17.850
So up here I'm saying I have
a property called Name.

98
00:05:17.850 --> 00:05:19.036
It's type is of String.

99
00:05:19.036 --> 00:05:19.610
It is also required.

100
00:05:19.610 --> 00:05:22.470
It is also unique.

101
00:05:22.470 --> 00:05:24.570
I'm using these object literal brackets,
right?

102
00:05:24.570 --> 00:05:28.820
But down here,
I'm also using the brackets, but

103
00:05:28.820 --> 00:05:30.110
you notice there's no type here.

104
00:05:30.110 --> 00:05:31.090
I'm not seeing type anywhere.

105
00:05:32.790 --> 00:05:36.940
I'm saying, state must be a string, city
must be a string, zip must be a number.

106
00:05:36.940 --> 00:05:39.620
What I'm saying here is that
location is an object, and

107
00:05:39.620 --> 00:05:42.918
it has a property on it called State,
whose type is string.

108
00:05:42.918 --> 00:05:47.300
And a city property whose type is string.

109
00:05:47.300 --> 00:05:49.590
So it's a little different
although it looks the same,

110
00:05:49.590 --> 00:05:53.160
and that's because I'm not
putting a type right here.

111
00:05:53.160 --> 00:05:56.270
It's implied that the location
is of type object

112
00:05:56.270 --> 00:05:59.670
because I'm adding new properties on
it that aren't keywords in Mongoose.

113
00:05:59.670 --> 00:06:01.430
Like I didn't put
the keyword required here,

114
00:06:02.600 --> 00:06:04.770
I didn't put the keyword unique here.

