WEBVTT

1
00:00:00.000 --> 00:00:03.800
[MUSIC]

2
00:00:03.800 --> 00:00:04.611
&gt;&gt; Speaker 1: Okay so, step nine.

3
00:00:04.611 --> 00:00:09.066
You have to implement, there was some
missing credit routes in some of these

4
00:00:09.066 --> 00:00:12.210
controllers, there were maybe three or
four total.

5
00:00:12.210 --> 00:00:15.260
All right.

6
00:00:17.180 --> 00:00:20.350
So, any questions on that or
maybe five, maybe three or four, yeah.

7
00:00:20.350 --> 00:00:21.210
Any questions on that?

8
00:00:22.810 --> 00:00:25.420
Cuz you guys did it and
then we left off, so

9
00:00:25.420 --> 00:00:27.740
I didn't really get a chance to talk
to you while you were working on it.

10
00:00:27.740 --> 00:00:31.395
So if you have any questions on it,
it's totally the time.

11
00:00:37.379 --> 00:00:38.460
&gt;&gt; Speaker 1: No?
Everybody got that?

12
00:00:38.460 --> 00:00:40.240
Just super perfect.

13
00:00:41.500 --> 00:00:43.230
Okay, so
let's see what that looks like then.

14
00:00:43.230 --> 00:00:44.750
Let's just check out step nine.

15
00:00:48.300 --> 00:00:51.350
I guess if you had any questions you could
just check out to the solution branch and

16
00:00:51.350 --> 00:00:53.150
then you would just find out right.

17
00:00:53.150 --> 00:00:55.310
That's probably why people
don't have a lot of questions,

18
00:00:55.310 --> 00:00:56.930
cuz they just look at the solution.

19
00:00:56.930 --> 00:01:00.260
It's like I was going to ask you this but
then I looked at the solution.

20
00:01:00.260 --> 00:01:00.860
And now I kind of know.

21
00:01:00.860 --> 00:01:02.520
That makes sense.

22
00:01:02.520 --> 00:01:05.450
So I think this one was missing, right?

23
00:01:05.450 --> 00:01:08.441
And the category controller, the params.

24
00:01:11.265 --> 00:01:13.309
&gt;&gt; Speaker 1: So remember,
this controller method here,

25
00:01:13.309 --> 00:01:17.720
even though we haven't defined
the routing for it, that's the next step.

26
00:01:17.720 --> 00:01:19.750
Based on what we did with the lions and
the tigers,

27
00:01:19.750 --> 00:01:23.390
we know that there was
this method on the router

28
00:01:23.390 --> 00:01:27.405
that we can use called param that will
look at the ID or whatever parameter.

29
00:01:27.405 --> 00:01:32.150
What we did with the lions and tigers, we
would look through the array of lions and

30
00:01:32.150 --> 00:01:36.190
tigers and find one with the right ID and
if we did we would attach it to request.

31
00:01:36.190 --> 00:01:38.440
It's the same thing we're doing
here except we don't have an array

32
00:01:38.440 --> 00:01:39.070
we have a database.

33
00:01:39.070 --> 00:01:41.259
It's the same concept.

34
00:01:42.260 --> 00:01:44.190
So, [INAUDIBLE],
it's gonna take the ID, and

35
00:01:46.080 --> 00:01:51.650
it's gonna see if we can find it in
the database first, of this category.

36
00:01:51.650 --> 00:01:55.660
If it doesn't find it,
I'm just throwing an error here.

37
00:01:55.660 --> 00:01:56.700
You can choose to do whatever you want,

38
00:01:56.700 --> 00:01:58.910
I'm just saying, there's no category,
get out of here.

39
00:02:02.510 --> 00:02:07.330
But there is, I'm just gonna attach that
category to req.category and call it next.

40
00:02:09.570 --> 00:02:11.429
And then this function is just
error handling on a promise.

41
00:02:15.987 --> 00:02:16.870
&gt;&gt; Speaker 1: Any questions on that?

42
00:02:18.950 --> 00:02:20.960
So again that's me grabbing the ID,

43
00:02:22.280 --> 00:02:27.380
checking the category collection to find
a category document with this given ID.

44
00:02:28.470 --> 00:02:34.150
If it doesn't find one that means
the ID that the client is asking for

45
00:02:34.150 --> 00:02:35.630
doesn't exist in the database.

46
00:02:35.630 --> 00:02:39.820
Maybe from between
the time they got that ID,

47
00:02:39.820 --> 00:02:43.940
and sometime now that category
was deleted so it doesn't exist.

48
00:02:43.940 --> 00:02:46.220
Maybe they went to the blog and
they clicked on,

49
00:02:46.220 --> 00:02:50.570
they were on the blog page and then they
had it on their computer for a week.

50
00:02:50.570 --> 00:02:53.680
During that week one of
the categories got deleted by a admin.

51
00:02:54.680 --> 00:02:57.560
So they just went and clicked the button
to go get on the categories and

52
00:02:57.560 --> 00:02:58.840
then this one didn't come back.

53
00:02:58.840 --> 00:03:00.310
So that's one of those edge cases.

54
00:03:02.750 --> 00:03:06.280
Or maybe they're trying to hack us and
putting in some random ID, I don't know.

55
00:03:06.280 --> 00:03:09.340
But either way,
it doesn't exist in the database.

56
00:03:09.340 --> 00:03:12.024
If it does exist,
attach it to req.category and

57
00:03:12.024 --> 00:03:16.000
call next(), so that's going to allow us,
so when we call next() here,

58
00:03:16.000 --> 00:03:19.350
because this params is like
a middle way before the routes.

59
00:03:19.350 --> 00:03:21.950
It's gonna go to the actual
request that was called.

60
00:03:21.950 --> 00:03:23.440
In this case, the only stuff or reason for

61
00:03:23.440 --> 00:03:28.500
IDs here is delete a category,
update a category and get one category.

62
00:03:28.500 --> 00:03:31.530
So it'll go to one of those,
depending on whatever the request was.

63
00:03:31.530 --> 00:03:35.329
So there,
if the request was /api/categories,

64
00:03:35.329 --> 00:03:39.930
you know /id delete, then after it's
done here, it's gonna go to delete.

65
00:03:39.930 --> 00:03:41.731
If it was put then others
on here would go to put.

66
00:03:45.392 --> 00:03:49.373
&gt;&gt; Speaker 1: So hypothetically speaking,
let's say it goes to get one,

67
00:03:49.373 --> 00:03:52.750
which means just get
just the one category.

68
00:03:52.750 --> 00:03:54.810
We already got the category up here,
we already did the job.

69
00:03:54.810 --> 00:03:56.060
It's done.
We already grabbed it.

70
00:03:56.060 --> 00:04:00.620
So all we gotta do when we go to get
one is just send back req.category.

71
00:04:00.620 --> 00:04:01.589
It's already there.

72
00:04:07.029 --> 00:04:07.860
&gt;&gt; Speaker 1: Everybody follow me there?

73
00:04:07.860 --> 00:04:08.780
How that middleware's working?

74
00:04:10.790 --> 00:04:14.380
If it's not quite there yet when we get
to the next step with the routes and

75
00:04:14.380 --> 00:04:16.260
you connect them together then you'll see,

76
00:04:16.260 --> 00:04:19.490
but it's exactly like what we
did with the tigers and lions.

77
00:04:19.490 --> 00:04:23.610
It's nothing different except we just
got rid of the array and ad a database.

78
00:04:23.610 --> 00:04:27.320
But it's doing the same thing.

79
00:04:27.320 --> 00:04:31.739
&gt;&gt; Speaker 2: I guess so
sorry if you're reiterating, but

80
00:04:31.739 --> 00:04:36.746
on the promise completion there,
the category parameter,

81
00:04:36.746 --> 00:04:40.000
is that just returned by the find by id?

82
00:04:40.000 --> 00:04:40.500
&gt;&gt; Speaker 1: Yeah.

83
00:04:41.640 --> 00:04:45.300
So I wasn't, I plan on giving promises
during this solutions lecture so

84
00:04:45.300 --> 00:04:45.860
I'm glad you asked it.

85
00:04:45.860 --> 00:04:47.480
This is a great introduction to it.

86
00:04:47.480 --> 00:04:50.890
So I've been kind of breezing over
promises because I've been saving it for

87
00:04:50.890 --> 00:04:53.320
this solution, as far as queries.

88
00:04:53.320 --> 00:04:56.639
So yeah,
who here has experience with promises?

89
00:04:58.446 --> 00:04:59.800
&gt;&gt; Speaker 1: Okay, a lot of people.

90
00:04:59.800 --> 00:05:01.580
Cool.
So if you do have any expression problems,

91
00:05:01.580 --> 00:05:02.730
we're gonna go over it just a little bit.

92
00:05:02.730 --> 00:05:06.250
We're not, I'm not gonna go into detail
about everything a promise is, but

93
00:05:06.250 --> 00:05:10.470
just an overall conception
of what a promise is.

94
00:05:12.030 --> 00:05:13.820
Actually, what we'll do is
go through the solution.

95
00:05:13.820 --> 00:05:14.610
And then we'll break off.

96
00:05:14.610 --> 00:05:15.340
And I'll talk about that.

97
00:05:15.340 --> 00:05:16.970
Cause it's a little deep.

98
00:05:16.970 --> 00:05:17.980
Yeah?
&gt;&gt; Speaker 2: I think we have some

99
00:05:17.980 --> 00:05:18.480
other questions.

100
00:05:18.480 --> 00:05:20.040
I don't know if you wanna
handle these now or-

101
00:05:20.040 --> 00:05:21.700
&gt;&gt; Speaker 1: Yeah, let's do it.

102
00:05:21.700 --> 00:05:23.590
&gt;&gt; Speaker 2: Why do
the queries attach to exports?

103
00:05:25.080 --> 00:05:30.290
&gt;&gt; Speaker 1: Because we are going to
use them in our router on the next step.

104
00:05:31.480 --> 00:05:35.833
So, they're being exported
because just like lions and

105
00:05:35.833 --> 00:05:40.368
tigers, so you would have
something like this app.get and

106
00:05:40.368 --> 00:05:46.082
some router file like slash let's say
lions and then you have this function

107
00:05:46.082 --> 00:05:52.250
here,
&gt;&gt; Speaker 1: Request, res, next.

108
00:05:52.250 --> 00:05:55.000
This is what we had before,
this is exactly what we had.

109
00:05:56.030 --> 00:05:59.770
What we're doing now is, we're not going
to place this function in here anymore.

110
00:05:59.770 --> 00:06:04.370
We're actually just gonna put in one
of these methods that were exported.

111
00:06:04.370 --> 00:06:05.380
So that's what we're doing.

112
00:06:05.380 --> 00:06:07.620
We're just defining those
functions in another file.

113
00:06:07.620 --> 00:06:11.250
These are the controller functions,
we're just getting rid of them and

114
00:06:11.250 --> 00:06:12.700
we're defining them here
in this other file.

115
00:06:13.790 --> 00:06:17.760
So we need to export them so
we can import them on the next step.

116
00:06:17.760 --> 00:06:20.810
Or require them on the next step.

117
00:06:20.810 --> 00:06:24.280
&gt;&gt; Speaker 2: Okay, and I think there's
kind of a trail going on here in the chat

118
00:06:24.280 --> 00:06:28.100
room, but
why don't you use exec instead of then.

119
00:06:28.100 --> 00:06:31.280
Exec returns promise by default and
is good practice with Mongoose.

120
00:06:32.590 --> 00:06:33.500
&gt;&gt; Speaker 1: Yeah.
So if you do,

121
00:06:33.500 --> 00:06:39.000
if you come down here and
you say .exec, and it's the same thing.

122
00:06:39.000 --> 00:06:39.680
Why did I use it?

123
00:06:41.020 --> 00:06:44.440
Save keystrokes, it's the only reason.

124
00:06:44.440 --> 00:06:49.580
But yeah, if we do exec and then you say
.then, yeah, it's totally a promise.

125
00:06:49.580 --> 00:06:52.839
If you don't wanna use promises,
exec takes a node.callback as well.

126
00:06:56.000 --> 00:06:57.044
I don't even use exec and

127
00:06:57.044 --> 00:06:59.690
I don't even use the built-in
promises in [INAUDIBLE] either.

128
00:06:59.690 --> 00:07:01.560
I usually use Blue Bird and

129
00:07:01.560 --> 00:07:05.110
I promisify the entire Mongoose library,
which is a little advanced.

130
00:07:05.110 --> 00:07:06.640
So I just don't use exec.

131
00:07:06.640 --> 00:07:10.710
Because the promise library that
Mongoose uses is actually not that good.

132
00:07:10.710 --> 00:07:13.620
It doesn't really follow
the A+ Promise specification that

133
00:07:13.620 --> 00:07:15.000
we'll get into in a little a bit.

134
00:07:15.000 --> 00:07:16.310
So I don't really like it.

135
00:07:16.310 --> 00:07:17.953
So I wrap it in something else.

136
00:07:21.588 --> 00:07:23.240
&gt;&gt; Speaker 2: And
I think he's following up on that.

137
00:07:23.240 --> 00:07:28.591
Why aren't you creating a class and
then export a class?

138
00:07:30.230 --> 00:07:31.600
&gt;&gt; Speaker 1: Why are we?
&gt;&gt; Speaker 2: Instead of exporting

139
00:07:31.600 --> 00:07:35.630
multiple times using export.

140
00:07:35.630 --> 00:07:37.720
&gt;&gt; Speaker 1: It's just one way
of doing the same things, so

141
00:07:37.720 --> 00:07:43.200
if you want to get classical and
make a class, you could totally do that.

142
00:07:43.200 --> 00:07:45.970
Sometimes I like to get functional so
I don't really like to do.

143
00:07:45.970 --> 00:07:47.090
There's nothing wrong with that.

144
00:07:47.090 --> 00:07:50.160
The reason I did is because this
is the style that I chose to do.

145
00:07:50.160 --> 00:07:54.760
You could have alternatively just said,
module.exports and

146
00:07:54.760 --> 00:07:59.230
put all the methods on here,
so paramas and

147
00:08:02.760 --> 00:08:06.420
the what else do we have, git,
you could have done this too.

148
00:08:06.420 --> 00:08:07.410
It's up to you.

149
00:08:07.410 --> 00:08:11.090
So, maybe you don't really feel
like writing key value pairs,

150
00:08:11.090 --> 00:08:12.370
you just want to write variables instead.

151
00:08:12.370 --> 00:08:15.120
So, it's a stylistic thing.

152
00:08:15.120 --> 00:08:18.877
No big reason, it's just sometimes I do
this way, sometimes I module.exports.

153
00:08:23.916 --> 00:08:24.740
&gt;&gt; Speaker 1: Anything else?

154
00:08:24.740 --> 00:08:25.600
Is that it?
&gt;&gt; Speaker 2: Yeah,

155
00:08:25.600 --> 00:08:28.290
they're asking about happy.js
has validation for routes.

156
00:08:28.290 --> 00:08:30.850
Should we be doing any input validations?

157
00:08:30.850 --> 00:08:32.970
Like using express validator?

158
00:08:32.970 --> 00:08:34.290
&gt;&gt; Speaker 1: Yeah,
happy.js is pretty awesome.

159
00:08:34.290 --> 00:08:36.550
So yes.

160
00:08:37.830 --> 00:08:40.110
Well, there's like different
layers of validation.

161
00:08:40.110 --> 00:08:43.800
So first, you should validating
on client first of all,

162
00:08:43.800 --> 00:08:48.080
have whatever form submitting from
a client that should do validation first.

163
00:08:48.080 --> 00:08:51.100
And then, what you should do
is when you get to express,

164
00:08:51.100 --> 00:08:55.750
if you want to add an extra layer in
between the client validating and

165
00:08:55.750 --> 00:08:58.010
then the database validating and
that's like through a middleware.

166
00:08:58.010 --> 00:09:00.220
You can also do that too,
there's nothing wrong with that.

167
00:09:00.220 --> 00:09:04.090
And we'll get into Mongoose and
how it uses middleware too.

168
00:09:04.090 --> 00:09:06.860
And how we can talk about that,
so we'll get into that.

169
00:09:06.860 --> 00:09:08.990
But yeah, there's nothing stopping
you from making like a middleware

170
00:09:08.990 --> 00:09:10.660
function that does validation.

171
00:09:10.660 --> 00:09:13.960
But that's probably not the best place to
do it, because middleware is more tied to

172
00:09:13.960 --> 00:09:17.270
routes .Whereas I see
validation more tied to models.

173
00:09:17.270 --> 00:09:20.545
So, I would probably bake that
validation into the models itself and

174
00:09:20.545 --> 00:09:24.610
using the middleware that's provided by
Mongoose, which we haven't learned yet,

175
00:09:24.610 --> 00:09:26.092
which we will today, though.

176
00:09:33.209 --> 00:09:34.510
&gt;&gt; Speaker 1: Okay.

177
00:09:34.510 --> 00:09:35.770
Sweet.

178
00:09:35.770 --> 00:09:36.860
So any other questions on this?

179
00:09:36.860 --> 00:09:39.650
Again, it's the same thing we did before
except we are not modifying it already.

180
00:09:39.650 --> 00:09:42.270
We are creating a database,
it's the same concept.

181
00:09:42.270 --> 00:09:44.857
Go find it, yes
&gt;&gt; Speaker 2: I got a question.

182
00:09:44.857 --> 00:09:47.046
&gt;&gt; Speaker 1: Yes?
&gt;&gt; Speaker 2: So I understand line 18

183
00:09:47.046 --> 00:09:54.190
exports .GIF, is kind of like a handoff to
the GIF that's coming in from the request?

184
00:09:54.190 --> 00:09:59.230
That line four, exports.params,
what does that actually hook up?

185
00:10:00.710 --> 00:10:02.500
&gt;&gt; Speaker 1: So
these names are arbitrary.

186
00:10:02.500 --> 00:10:07.100
I just name like this because there
just happens to be, so what you're

187
00:10:07.100 --> 00:10:09.990
saying is like, yeah, there's a verb
call get so that's where that lines up.

188
00:10:09.990 --> 00:10:12.210
Where does params come up?

189
00:10:12.210 --> 00:10:15.190
Well, I don't know what step it's on,
but when we were doing lines,

190
00:10:15.190 --> 00:10:17.680
we had a at.param.

191
00:10:17.680 --> 00:10:18.940
&gt;&gt; Speaker 2: That's what I'm asking.

192
00:10:18.940 --> 00:10:20.970
&gt;&gt; Speaker 1: This is
where this hooks up at.

193
00:10:20.970 --> 00:10:22.440
&gt;&gt; Speaker 2: Do you
have it hooked up here?

194
00:10:22.440 --> 00:10:24.920
I remember it from lines,
I don't see it here.

195
00:10:24.920 --> 00:10:26.570
&gt;&gt; Speaker 1: The routing is
the next step after this.

196
00:10:26.570 --> 00:10:29.790
It's step 10, this is step 9.

197
00:10:29.790 --> 00:10:31.280
If you look at step 10 you'll see it.

198
00:10:31.280 --> 00:10:32.190
You're about to do it after this.

199
00:10:32.190 --> 00:10:34.490
So you'll see, we will use this.

200
00:10:34.490 --> 00:10:36.490
We haven't hooked the routing up at all.

201
00:10:36.490 --> 00:10:37.948
We are just defining the crutch for it.

202
00:10:37.948 --> 00:10:41.016
I just naming it purpley
because I know for

203
00:10:41.016 --> 00:10:46.120
sure we will have the parameters
out because we have ID's down here.

204
00:10:46.120 --> 00:10:47.770
So I know that we are going
to have this so I made it.

205
00:10:49.100 --> 00:10:50.642
That is why I can't figure
out where it is hooked up to.

206
00:10:50.642 --> 00:10:51.495
It is an orphan.

207
00:10:51.495 --> 00:10:54.109
&gt;&gt; Speaker 2: Yeah.

