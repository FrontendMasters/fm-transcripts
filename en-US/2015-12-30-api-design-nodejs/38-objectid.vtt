WEBVTT

1
00:00:00.000 --> 00:00:03.936
[MUSIC]

2
00:00:03.936 --> 00:00:07.670
&gt;&gt; Speaker 1: And here's the interesting
part, as far as relationships go.

3
00:00:07.670 --> 00:00:11.430
If you're a SQL person,
a relational database person,

4
00:00:11.430 --> 00:00:14.430
you're probably like yeah,
it's not really relations.

5
00:00:14.430 --> 00:00:17.630
But this is how it works in Mongoose.

6
00:00:17.630 --> 00:00:22.360
What we can do is if we wanna set
a relationship between two models,

7
00:00:22.360 --> 00:00:26.060
we can just associate the ID,
just like you would in any other database,

8
00:00:26.060 --> 00:00:27.680
it's just how it works.

9
00:00:27.680 --> 00:00:33.030
So in Mongoose, the way it works is,
we give it the type of ObjectId.

10
00:00:34.050 --> 00:00:39.520
ObjectId is IDs, they are IDs in Mongoose,
they're just called ObjectIds.

11
00:00:39.520 --> 00:00:42.660
So if we say yeah,
we want the dog to have one owner.

12
00:00:42.660 --> 00:00:48.180
So it's type is
Mongoose.Schema.Types.ObjectId and that's

13
00:00:48.180 --> 00:00:51.920
means, it looks like a string of an ID
when you get it back from the database but

14
00:00:51.920 --> 00:00:56.070
it's not, it's actually an object
that converts it to a string.

15
00:00:56.070 --> 00:00:58.660
I want to reference the owner schema.

16
00:00:58.660 --> 00:01:02.610
So there exists in this database
somewhere another model called owner.

17
00:01:03.790 --> 00:01:07.860
So if there's a string here,
I'm telling Mongoose that that

18
00:01:07.860 --> 00:01:12.580
ID is referencing some owner somewhere,
and then it's required.

19
00:01:12.580 --> 00:01:14.020
So you can't save a dog without an owner.

20
00:01:15.730 --> 00:01:19.090
The reason that exists, and we'll get to
it later, is something called population.

21
00:01:19.090 --> 00:01:26.480
And population is like, you can say it's
almost like creating a join at call time.

22
00:01:27.510 --> 00:01:28.940
So that doesn't exist the join table and

23
00:01:28.940 --> 00:01:31.130
the database like you would
have something with SQL.

24
00:01:31.130 --> 00:01:35.100
But when we want to see who the owner
is we can ask mongoose about it and

25
00:01:35.100 --> 00:01:37.420
it'll join it for us when we ask for it.

26
00:01:37.420 --> 00:01:38.669
But it will not persist in the database.

27
00:01:40.640 --> 00:01:44.809
It's not atomic.
&gt;&gt; Speaker 1: So

28
00:01:44.809 --> 00:01:47.190
we'll get to that later, but
that's how you set up relationships.

29
00:01:47.190 --> 00:01:51.665
So a lot of people I've talked
to who bash on mongo and

30
00:01:51.665 --> 00:01:54.230
mongoose and you can't do relations,
there's no such thing like.

31
00:01:54.230 --> 00:01:56.930
Yeah you can, you could totally
do relations, one to one,

32
00:01:56.930 --> 00:02:00.615
many to many, whatever you want.

33
00:02:00.615 --> 00:02:05.280
One-to-many?

34
00:02:05.280 --> 00:02:07.840
So any questions about that?

35
00:02:07.840 --> 00:02:09.610
Yes.
&gt;&gt; Speaker 2: They want you to clarify

36
00:02:09.610 --> 00:02:12.110
the difference between collection,
model, and schema.

37
00:02:12.110 --> 00:02:13.270
&gt;&gt; Speaker 1: Yeah, I guess,

38
00:02:13.270 --> 00:02:16.600
that's a good question,
I've been using them kinda loosely.

39
00:02:16.600 --> 00:02:20.950
So let's go back to the dbTester.

40
00:02:20.950 --> 00:02:23.660
So a schema is the actual blueprint,

41
00:02:24.860 --> 00:02:28.310
this is how I want my data to look,
so blueprint for the data.

42
00:02:30.260 --> 00:02:35.798
The model is the JavaScript
representation that we're

43
00:02:35.798 --> 00:02:43.710
gonna be using inside of our API to access
the document which is in the database.

44
00:02:43.710 --> 00:02:46.650
The document is the instance
that belongs to the collection.

45
00:02:46.650 --> 00:02:49.840
So you can think of the model and
the document as the same thing, except for

46
00:02:49.840 --> 00:02:53.400
the model is like what we're using in
JavaScript, and the document is what

47
00:02:53.400 --> 00:02:57.110
exists in the database,
that's part of an entire collection.

48
00:02:57.110 --> 00:03:00.320
So a collection is just a group
of these documents, and

49
00:03:00.320 --> 00:03:02.199
a model is our JavaScript representation.

50
00:03:03.910 --> 00:03:08.166
And the schema is the blueprint that
defines the model and the document.

51
00:03:17.706 --> 00:03:18.446
&gt;&gt; Speaker 1: Any other questions?

52
00:03:18.446 --> 00:03:23.200
Yep.
&gt;&gt; Speaker 2: Can you explain

53
00:03:23.200 --> 00:03:27.970
the ObjectId type?
&gt;&gt; Speaker 1: Yeah so, ObjectId type.

54
00:03:27.970 --> 00:03:30.220
It'll make more sense
when you actually see it.

55
00:03:30.220 --> 00:03:33.290
But when you see it you'll be like,
it's just a string.

56
00:03:33.290 --> 00:03:35.370
But it's actually no,
I could just show you.

57
00:03:35.370 --> 00:03:36.348
We made some stuff already.

58
00:03:36.348 --> 00:03:42.362
So, the ObjectId type is, I'll just
open up Robomongo cuz it's there,

59
00:03:42.362 --> 00:03:49.842
it's easier.
&gt;&gt; Speaker 1: So,

60
00:03:49.842 --> 00:03:52.930
we'll go look in puppies &gt;
Collections &gt; Let's go look in

61
00:03:52.930 --> 00:03:58.440
todos.
&gt;&gt; Speaker 1: So right here.

62
00:03:58.440 --> 00:04:01.650
So in Mongo everything that
gets saved in the database,

63
00:04:01.650 --> 00:04:06.530
every document, gets an underscore id
property, and that value is an ObjectID.

64
00:04:06.530 --> 00:04:08.790
As you can see right here,
it says ObjectID.

65
00:04:08.790 --> 00:04:10.080
That's what an ObjectID is.

66
00:04:11.080 --> 00:04:15.230
That's what Mongo or
Mongoose describes as a object ID.

67
00:04:16.240 --> 00:04:18.900
But when you retrieve it from
the database, and your using a JavaScript,

68
00:04:18.900 --> 00:04:20.640
it's just going to be
this string right here.

69
00:04:22.232 --> 00:04:23.810
It's gonna be a string
that's in actual quotes.

70
00:04:25.280 --> 00:04:28.020
But it's actually an object, but
they convert it to a string so

71
00:04:28.020 --> 00:04:30.540
we can consume it in
JavaScript a lot easier.

72
00:04:32.410 --> 00:04:35.180
It's just called ObjectId,
just think of it as a string though.

73
00:04:35.180 --> 00:04:36.908
Whenever you use it inside of the ORM,

74
00:04:36.908 --> 00:04:42.295
it's gonna be a string.
&gt;&gt; Speaker 1: You can do equality checks

75
00:04:42.295 --> 00:04:47.431
on it just like a string
&gt;&gt; Speaker 1: But

76
00:04:47.431 --> 00:04:50.514
it's just good to know that it
is an object in the database,

77
00:04:50.514 --> 00:04:51.447
it's ObjectID.

78
00:04:55.636 --> 00:04:56.860
&gt;&gt; Speaker 2: Scott?
&gt;&gt; Speaker 1: Yes.

79
00:04:56.860 --> 00:04:57.540
&gt;&gt; Speaker 2: I know this is just

80
00:04:57.540 --> 00:05:03.090
a training example, but how would
the dog schema know what owner it is?

81
00:05:03.090 --> 00:05:04.870
&gt;&gt; Speaker 1: Right, so it doesn't.

82
00:05:04.870 --> 00:05:08.911
So what will happen is when you
create the dog you'd have to, so

83
00:05:08.911 --> 00:05:10.604
that's a good question.

84
00:05:10.604 --> 00:05:14.302
So if we go back here, when we were to
say, I wanna make a new dog, all right.

85
00:05:14.302 --> 00:05:17.893
I'm gonna pass on all these properties on
an object, and then we get to the owner

86
00:05:17.893 --> 00:05:22.050
property, you need to pass in the owner's
ID right there, that's how it would know.

87
00:05:22.050 --> 00:05:24.804
So if you were to look
this up in the database,

88
00:05:24.804 --> 00:05:27.775
if you were to look this
dog up in the Robomongo and

89
00:05:27.775 --> 00:05:32.197
when you got down to the owner property,
its value would be one of these,

90
00:05:32.197 --> 00:05:37.436
it'd be an ObjectId.
&gt;&gt; Speaker 1: So

91
00:05:37.436 --> 00:05:41.620
yeah you have to tell it, you have to
save that dog with the owner's ID.

92
00:05:41.620 --> 00:05:45.200
And hopefully the owner is the person
that made a post request to the server so

93
00:05:45.200 --> 00:05:46.040
hopefully you have the ID.

94
00:05:46.040 --> 00:05:49.459
If not then you just won't
be able to save it cuz it's

95
00:05:49.459 --> 00:05:52.923
required.
&gt;&gt; Speaker 1: Cool,

96
00:05:52.923 --> 00:05:57.655
any other questions?
&gt;&gt; Speaker 3: Is it faster to do

97
00:05:57.655 --> 00:06:01.580
finds on an ObjectId versus
on a property in the schema?

98
00:06:01.580 --> 00:06:02.440
&gt;&gt; Speaker 1: Yeah, good question.

99
00:06:02.440 --> 00:06:04.330
So ObjectId is indexed by default.

100
00:06:05.500 --> 00:06:08.970
They are indexed, so if you want to
do a find on some other property,

101
00:06:08.970 --> 00:06:13.140
it won't be as fast as the ObjectId's
because they're indexed.

102
00:06:13.140 --> 00:06:18.213
So they can get to them a lot faster
than having to do some search across

103
00:06:18.213 --> 00:06:24.250
a collection or the entire database on let
me find all the puppies with this name.

104
00:06:24.250 --> 00:06:26.060
Yeah, it'll come back relatively fast, but

105
00:06:26.060 --> 00:06:29.070
not as fast if you're like
find the puppy with this ID.

106
00:06:29.070 --> 00:06:31.670
It's constant time, it's gonna go
straight to that ID and be there you are.

107
00:06:31.670 --> 00:06:35.510
All right, it's indexed where as
everything else is not by default.

108
00:06:35.510 --> 00:06:38.325
But you can index whatever
you want using Mongoose.

109
00:06:38.325 --> 00:06:40.330
You know what?

110
00:06:40.330 --> 00:06:43.120
I want to index the names
too cuz you know what?

111
00:06:43.120 --> 00:06:44.890
They're unique, let's index these.

112
00:06:44.890 --> 00:06:45.420
You can do that too.

113
00:06:45.420 --> 00:06:47.300
You can totally do that.

114
00:06:47.300 --> 00:06:54.840
But by default, IDs are indexed.
&gt;&gt; Speaker 1: Yep?

115
00:06:57.200 --> 00:06:58.515
&gt;&gt; Speaker 2: Is there a max length on

116
00:06:58.515 --> 00:07:00.610
ObjectId?
&gt;&gt; Speaker 1: You

117
00:07:00.610 --> 00:07:02.150
don't create the ObjectId.

118
00:07:02.150 --> 00:07:04.815
The ObjectId is created for
you when you save it so

119
00:07:04.815 --> 00:07:09.320
you never have to worry about generating
an ID which would be not fun at all.

120
00:07:09.320 --> 00:07:13.430
I mean that would be really,
that's a whole other thing, managing ID's.

121
00:07:13.430 --> 00:07:15.527
You don't have to worry about that,
it's created for you.

122
00:07:15.527 --> 00:07:18.230
You put an object in a database,
when it comes out there's an ID.

123
00:07:18.230 --> 00:07:21.227
Just like the stuff that we've
been doing this whole time, right?

124
00:07:21.227 --> 00:07:26.953
If we go look at at the Mongo shell.
&gt;&gt; Speaker 1: And

125
00:07:26.953 --> 00:07:33.780
we go to our database,
and we say db.todos.find.

126
00:07:35.870 --> 00:07:38.310
Here's an ObjectId on this todos things.

127
00:07:38.310 --> 00:07:39.920
We didn't add that anywhere.

128
00:07:39.920 --> 00:07:41.490
We didn't add that ObjectId, right?

129
00:07:41.490 --> 00:07:45.654
If we go look in the file, not once did I
have a property on it that said ObjectId,

130
00:07:45.654 --> 00:07:49.970
I didn't put that there.
&gt;&gt; Speaker 1: When I saved it did.

131
00:07:49.970 --> 00:07:51.270
It also added this version and

132
00:07:51.270 --> 00:07:55.764
all this other stuff here.
&gt;&gt; Speaker 1: So

133
00:07:55.764 --> 00:07:57.360
underscore ID is the property.

134
00:07:57.360 --> 00:07:59.410
So also remember that, it's underscore ID.

135
00:07:59.410 --> 00:08:03.609
So it would be todos._id, not todos.id.

136
00:08:03.609 --> 00:08:08.550
If you're not used to it,
so it's gonna be _id.

137
00:08:08.550 --> 00:08:09.420
That's the ID property.

138
00:08:10.980 --> 00:08:13.880
Any other questions?
&gt;&gt; Speaker 2: How would

139
00:08:13.880 --> 00:08:18.490
you go about creating an index?
&gt;&gt; Speaker 1: That's a little more

140
00:08:18.490 --> 00:08:19.490
advanced and we'll get into that.

141
00:08:19.490 --> 00:08:22.330
I don't wanna get into something
that we don't need right now.

142
00:08:22.330 --> 00:08:27.110
But yeah, it's not that hard,
there's a couple ways you can do it,

143
00:08:27.110 --> 00:08:28.640
that's why I don't wanna get into it.

144
00:08:28.640 --> 00:08:35.243
There's three ways.
&gt;&gt; Speaker 2: And

145
00:08:35.243 --> 00:08:39.578
then I think there was a question on, so
if you're creating users in your database,

146
00:08:39.578 --> 00:08:43.362
would you actually make a fieldscalled
ID or would you just use the built in

147
00:08:43.362 --> 00:08:46.890
underscore id field?
&gt;&gt; Speaker 1: I would use the built-in

148
00:08:46.890 --> 00:08:51.790
underscore ID field as an ID for
every single model in my database, but

149
00:08:51.790 --> 00:08:55.070
that doesn't mean you won't have something
else unique about, let's say a user.

150
00:08:55.070 --> 00:09:00.910
So let's say a user logs into
your app with Facebook, right?

151
00:09:00.910 --> 00:09:03.510
Facebook generates a unique token,
or unique ID.

152
00:09:03.510 --> 00:09:04.630
Maybe you wanna use that.

153
00:09:04.630 --> 00:09:05.960
You can also use that if you want to,

154
00:09:05.960 --> 00:09:09.380
but it doesn't mean you shouldn't use
the ObjectId, I would use the ObjectId.

155
00:09:09.380 --> 00:09:13.353
But if you wanted to create your own,
I guess you could.

156
00:09:13.353 --> 00:09:14.350
You could totally do that.

157
00:09:14.350 --> 00:09:17.410
But then again, you'll be managing
your own IDs, and indexing them and

158
00:09:17.410 --> 00:09:18.950
stuff like that.

159
00:09:18.950 --> 00:09:20.750
But there are times where you
might wanna use your own.

160
00:09:20.750 --> 00:09:30.187
But I would always just use the ObjectIds.
&gt;&gt; Speaker 2: So

161
00:09:30.187 --> 00:09:34.433
there's a question, since we're running
mongoose in the application, this does

162
00:09:34.433 --> 00:09:37.842
nothing to stop us from interacting
with the database elsewhere and

163
00:09:37.842 --> 00:09:42.630
screwing up the schema, is that correct?
&gt;&gt; Speaker 1: That's exactly correct.

164
00:09:42.630 --> 00:09:48.300
So if we had a Schema in our JavaScript
like, todos must look like this.

165
00:09:48.300 --> 00:09:51.153
If we made a todo with Mongoose,

166
00:09:51.153 --> 00:09:56.553
we couldn't save a todo without
following this blueprint.

167
00:09:56.553 --> 00:10:03.593
We couldn't just, I wanna make a new
todo and put something else here, right?

168
00:10:03.593 --> 00:10:06.190
That thing won't get saved
cuz it's not part of this

169
00:10:06.190 --> 00:10:07.410
schema.
&gt;&gt; Speaker 2: But

170
00:10:07.410 --> 00:10:09.350
the other stuff will.
&gt;&gt; Speaker 1: Yeah, but

171
00:10:09.350 --> 00:10:14.490
if I go into the shell or in Robomongo,
it doesn't care about the schema.

172
00:10:14.490 --> 00:10:15.890
It'll just like, yeah, just write to it.

173
00:10:15.890 --> 00:10:18.120
So yeah, remember that's what I'm saying.

174
00:10:18.120 --> 00:10:20.510
Mongo doesn't care about what you give it.

175
00:10:20.510 --> 00:10:24.150
It's mongoose that's doing that validation
and blueprinting with the schemas.

176
00:10:24.150 --> 00:10:26.120
So yeah, you gotta remember that.

177
00:10:26.120 --> 00:10:29.530
I've actually ran into times where
that has come to burn me if you have

178
00:10:29.530 --> 00:10:32.040
a service or architecture where you have

179
00:10:32.040 --> 00:10:34.470
these three services that
are target to the same database.

180
00:10:35.900 --> 00:10:38.840
This service is using the same
model as this service, right?

181
00:10:38.840 --> 00:10:41.030
So how do you keep those things in sync?

182
00:10:41.030 --> 00:10:44.020
Do you write the same schema
twice on both, it's kind of hard.

183
00:10:44.020 --> 00:10:50.920
So yeah, I've ran into the problem before,
and it sucks.

184
00:10:50.920 --> 00:10:55.440
Any other questions?
&gt;&gt; Speaker 2: Does Mongo throw an error if

185
00:10:55.440 --> 00:10:59.700
the data does not match the schema?
&gt;&gt; Speaker 1: It depends,

186
00:10:59.700 --> 00:11:04.620
if it's a validation,
if it doesn't match a required or

187
00:11:04.620 --> 00:11:06.450
a unique, or something like that,
it will throw an error.

188
00:11:07.860 --> 00:11:11.197
But if you just add something that you
didn't blueprint, it won't throw an error,

189
00:11:11.197 --> 00:11:12.466
it just won't save that thing.

