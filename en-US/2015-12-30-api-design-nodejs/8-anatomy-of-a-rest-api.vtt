WEBVTT

1
00:00:00.000 --> 00:00:03.957
[MUSIC]

2
00:00:03.957 --> 00:00:05.028
&gt;&gt; Speaker 1: What we're gonna do is,

3
00:00:05.028 --> 00:00:07.640
we're gonna create an API to
consume some data about lions.

4
00:00:09.000 --> 00:00:10.960
Just Internet cats.

5
00:00:10.960 --> 00:00:15.410
So first we should determine what
the actual resource looks like and

6
00:00:15.410 --> 00:00:16.450
we can model this in JSON.

7
00:00:16.450 --> 00:00:18.710
When I say resource, I mean what
does the actual lion look like,

8
00:00:18.710 --> 00:00:22.340
cuz we're gonna be making this
thing that consumes lions.

9
00:00:22.340 --> 00:00:24.700
What does a lion object look like?

10
00:00:24.700 --> 00:00:26.260
We need to model that first.

11
00:00:26.260 --> 00:00:28.390
I'm just gonna show you what
that looks like in JSON.

12
00:00:28.390 --> 00:00:29.740
This is what our data's gonna look like.

13
00:00:29.740 --> 00:00:34.310
So it's gonna be an object that has
a name property, ana ID property,

14
00:00:34.310 --> 00:00:39.428
a pride property where the lion pride
belongs to, and then a gender property.

15
00:00:39.428 --> 00:00:40.400
So, that's what a lion looks like.

16
00:00:40.400 --> 00:00:45.190
So this is us modeling our resource or
our data.

17
00:00:45.190 --> 00:00:46.980
So it's like the first step.

18
00:00:46.980 --> 00:00:50.964
Cuz everything is built around how your
data is modeled, so it's always good to

19
00:00:50.964 --> 00:00:54.115
start off modeling your data first
because if you do that last,

20
00:00:54.115 --> 00:00:56.392
[LAUGH] you're gonna
run into some problems.

21
00:00:56.392 --> 00:01:00.088
So definitely model your data first and
know what your application's gonna be

22
00:01:00.088 --> 00:01:02.496
working with,
what it's gonna be consuming, and

23
00:01:02.496 --> 00:01:06.136
that's gonna help you out and it's gonna
allow you to build mock things out.

24
00:01:06.136 --> 00:01:08.260
Without having to wait on
on the backend to build up.

25
00:01:08.260 --> 00:01:11.537
Because if you are a front end developer
and I gave you this JSON object and

26
00:01:11.537 --> 00:01:14.320
was like, here,
this is what the data's gonna look like.

27
00:01:14.320 --> 00:01:16.420
You can like, okay,
I don't have to wait on you anymore.

28
00:01:16.420 --> 00:01:18.430
I can just go mock this stuff out.

29
00:01:18.430 --> 00:01:20.000
Right, cuz I know what
the data looks like.

30
00:01:20.000 --> 00:01:22.959
Whereas if the back end person didn't
give you this first and was like,

31
00:01:22.959 --> 00:01:26.113
I'm not doing the data until the end,
then how do you, as a front engineer,

32
00:01:26.113 --> 00:01:28.260
know what to do,
what the data's gonna look like?

33
00:01:28.260 --> 00:01:30.168
So it's really great
to start with this and

34
00:01:30.168 --> 00:01:32.398
it helps you out with
the rest of the application.

35
00:01:32.398 --> 00:01:35.035
This is a basic example
of modeling your data.

36
00:01:35.035 --> 00:01:36.738
When you get into databases and
stuff, of course,

37
00:01:36.738 --> 00:01:39.670
it will be more difficult than this and
a little more work you got to put in.

38
00:01:39.670 --> 00:01:42.980
A little more thought as far as
relations between models and

39
00:01:42.980 --> 00:01:46.240
stuff like that, but,
on the simplest level, this is all it is.

40
00:01:46.240 --> 00:01:50.411
This is just representing
a adjacent object of our lion.

41
00:01:50.411 --> 00:01:53.013
Any questions on that?

42
00:01:53.013 --> 00:01:55.109
All right, so
when you hear me say the term resource,

43
00:01:55.109 --> 00:01:56.550
this is what I'm talking about.

44
00:01:56.550 --> 00:01:59.670
So, protect your resources,
how do we access our resources.

45
00:01:59.670 --> 00:02:01.460
The resources is the data.

46
00:02:01.460 --> 00:02:03.570
These are the resources, the actual data.

47
00:02:07.130 --> 00:02:11.568
So, next we should design
the routes to access the resource.

48
00:02:11.568 --> 00:02:15.153
So following REST,
we want to use the HTTP verbs.

49
00:02:15.153 --> 00:02:18.950
So the main ones we're gonna be using
are gonna be get, post, put, and delete.

50
00:02:20.260 --> 00:02:23.909
Who is here not familiar
with those HTTP verbs?

51
00:02:26.270 --> 00:02:27.060
Okay.

52
00:02:27.060 --> 00:02:34.500
So get request means I'm trying to ask for
something.

53
00:02:34.500 --> 00:02:38.170
Post means I'm going
to give you something.

54
00:02:38.170 --> 00:02:40.640
Put means I'm going to update something.

55
00:02:40.640 --> 00:02:42.680
And delete means I'm
gonna delete something.

56
00:02:42.680 --> 00:02:47.430
So, we've come up with a term for
that, and that's called CRUD.

57
00:02:47.430 --> 00:02:50.230
Create, read, update,
delete, or I guess destroy,

58
00:02:50.230 --> 00:02:52.860
not delete, that should be destroy,
but same thing.

59
00:02:52.860 --> 00:02:55.850
So we will be performing CRUD
operations on the resource.

60
00:02:55.850 --> 00:02:58.180
So you'll hear that a lot if
you've never heard that before.

61
00:02:58.180 --> 00:02:59.362
I'm gonna be using it a lot,

62
00:02:59.362 --> 00:03:02.250
you'll hear that a lot,
when you develop APIs and stuff.

63
00:03:02.250 --> 00:03:04.610
You wanna perform CRUD on
some types of resource.

64
00:03:04.610 --> 00:03:06.239
Create, read, update, destroy or delete.

65
00:03:09.360 --> 00:03:12.290
Cuz that's really what applications
are about, is doing that.

66
00:03:12.290 --> 00:03:16.738
So again we're gonna diagram how that
looks like, as far as the routes, and

67
00:03:16.738 --> 00:03:20.145
what we expect when we do
certain verbs on certain routes,

68
00:03:20.145 --> 00:03:21.832
and what we should get back.

69
00:03:21.832 --> 00:03:23.710
So we're gonna diagram
that with JSON as well.

70
00:03:23.710 --> 00:03:26.580
So here is a JSON diagram of that.

71
00:03:26.580 --> 00:03:30.900
So how we read is if I do
a get request to /lions,

72
00:03:30.900 --> 00:03:37.380
I expect it to return all the lions and
the response should be a 200 and

73
00:03:37.380 --> 00:03:43.974
its type should be application json and
it should be an array of objects.

74
00:03:47.367 --> 00:03:48.567
&gt;&gt; Speaker 1: So going back to REST,

75
00:03:48.567 --> 00:03:51.550
this is like the URL structure
that I was talking about.

76
00:03:52.940 --> 00:03:54.020
Just by the URL,

77
00:03:54.020 --> 00:03:57.095
I know exactly what resource I'm
gonna get because it's called lions.

78
00:03:59.050 --> 00:04:02.230
So I know that this is the lions
resource because of the naming here.

79
00:04:02.230 --> 00:04:07.890
It's not that deep, so it's not that
good of an example, but because of REST,

80
00:04:07.890 --> 00:04:10.660
I say /lions,
I know I'm getting the lions resource.

81
00:04:10.660 --> 00:04:16.222
And because I do a get request to lions,
I should get back all the lions,

82
00:04:16.222 --> 00:04:20.884
and it should be an array of
every lion and it should be json.

83
00:04:20.884 --> 00:04:26.431
So the next one is /lion/id, so
here's the URL a little deeper.

84
00:04:26.431 --> 00:04:27.790
So all lions have an id.

85
00:04:27.790 --> 00:04:29.230
So here's that directory-like structure.

86
00:04:29.230 --> 00:04:31.992
So, if we think about it as lions,
as an object,

87
00:04:31.992 --> 00:04:36.810
all right, they have an id property on it,
so /lions/id.

88
00:04:36.810 --> 00:04:38.490
That's the URL structure
that I was talking about.

89
00:04:38.490 --> 00:04:42.157
So if I do a get request
to /lions/ some number,

90
00:04:42.157 --> 00:04:45.920
it should return one lion
represented by that id.

91
00:04:47.942 --> 00:04:51.740
It should be response of
200 application json and

92
00:04:51.740 --> 00:04:55.050
it should just be
an object of that one line.

93
00:04:55.050 --> 00:04:58.470
Is everybody following here?

94
00:04:58.470 --> 00:04:59.010
Yeah.

95
00:04:59.010 --> 00:04:59.533
&gt;&gt; Speaker 2: I have a question.

96
00:04:59.533 --> 00:05:03.906
Are we actually defining routes and return
values or are you just laying it out?

97
00:05:03.906 --> 00:05:04.653
&gt;&gt; Speaker 1: I'm just laying it out.

98
00:05:04.653 --> 00:05:05.452
This is a blueprint.

99
00:05:05.452 --> 00:05:07.031
Yeah, we're not doing anything right now.

100
00:05:07.031 --> 00:05:10.510
This is just a blueprint.

101
00:05:10.510 --> 00:05:11.330
Yeah, all right, cool, yeah.

102
00:05:11.330 --> 00:05:14.870
I just chose JSON because
we all know JSON.

103
00:05:14.870 --> 00:05:18.990
Most people define their API
blueprints in something called YMAL or

104
00:05:18.990 --> 00:05:19.780
some other thing like that.

105
00:05:19.780 --> 00:05:24.650
So, or even markdown, but I'm just
doing it in JSON cuz we all know JSON.

106
00:05:26.380 --> 00:05:27.940
But yeah, we are not defining anything.

107
00:05:27.940 --> 00:05:29.120
You will be defining something.

108
00:05:29.120 --> 00:05:31.070
And this is the blueprint that
you're gonna use to define those

109
00:05:31.070 --> 00:05:32.260
things in a minute.

110
00:05:32.260 --> 00:05:33.420
But we are not defining it right now.

111
00:05:33.420 --> 00:05:36.690
I just wanna walk through this
blueprint to help you understand

112
00:05:36.690 --> 00:05:38.456
how I came up with this stuff.

113
00:05:38.456 --> 00:05:41.410
It just wasn't off the top of my head,
this is RESTful stuff right here.

114
00:05:44.990 --> 00:05:49.730
And then if we do a post request a lion,
that should create and

115
00:05:49.730 --> 00:05:53.050
return a new lion using
a posted object as the lion.

116
00:05:53.050 --> 00:05:57.420
So post means I'm gonna give
the resource some object, and

117
00:05:57.420 --> 00:06:02.030
I'm expecting the resource to create
something with that object and

118
00:06:02.030 --> 00:06:05.510
then I expect after the creation, I expect
the object to be returned back to me.

119
00:06:05.510 --> 00:06:09.789
If you think about it, that makes sense,
because think about if you're

120
00:06:09.789 --> 00:06:14.576
making a to do app and you type something
in, you hit Enter and you made a new todo.

121
00:06:14.576 --> 00:06:17.139
And it went to the server and
it created it but

122
00:06:17.139 --> 00:06:19.993
the server never responded
back with a new todo.

123
00:06:19.993 --> 00:06:21.200
How would you update your UI?

124
00:06:22.450 --> 00:06:26.270
So you need a server to come in like,
okay, here's the thing that will just

125
00:06:26.270 --> 00:06:29.950
create it when its ID cuz most of the time
the database creates the ID for you, and

126
00:06:29.950 --> 00:06:31.950
you need that in your UI for
whatever reason.

127
00:06:31.950 --> 00:06:35.940
So the server should respond back
with the thing that it just created,

128
00:06:35.940 --> 00:06:37.610
after it created it, or
an error if it couldn't.

129
00:06:39.100 --> 00:06:40.570
So the response for

130
00:06:40.570 --> 00:06:44.550
that should be a 201 successful post,
that's their HTTP status code for that.

131
00:06:44.550 --> 00:06:49.170
200 works as well but 201 is the actual
status code for a successful creation.

132
00:06:49.170 --> 00:06:53.640
application/json and it should just
send back that one lion that it made.

133
00:06:55.060 --> 00:06:58.737
I don't need an ID here because
I'm not referencing something, I'm

134
00:06:58.737 --> 00:07:03.180
creating something, so I'm gonna send you
an object, just create the lion for me.

135
00:07:06.260 --> 00:07:08.585
But I do need a ID here because
I'm referencing something,

136
00:07:08.585 --> 00:07:11.560
I'm trying to update something
that exists on the server.

137
00:07:11.560 --> 00:07:17.960
So put, just like with the GET1 up here,
it's gonna take an ID and it's

138
00:07:17.960 --> 00:07:23.120
going to update and return the matching
lion, with the posted update object.

139
00:07:23.120 --> 00:07:27.930
So what that means is you do a put
request with the server, with the ID, and

140
00:07:27.930 --> 00:07:30.310
then an object of the things that
you want to update the lion.

141
00:07:30.310 --> 00:07:33.462
For instance, let's say you want
to update the name and the age,

142
00:07:33.462 --> 00:07:38.426
so you'll post an object with
a new name and a newage.

143
00:07:38.426 --> 00:07:42.780
And the, what I'm expecting to happen is
for you to find that lion whose ID matches

144
00:07:42.780 --> 00:07:47.430
the one that I asked you and to update
those values of the object that I posted

145
00:07:47.430 --> 00:07:51.620
and then return the newly
updated object to me as Json.

146
00:07:51.620 --> 00:07:55.099
And, it should be just one object,
it shouldn't be an array.

147
00:08:02.758 --> 00:08:04.040
&gt;&gt; Speaker 1: Everybody
following me on this so far?

148
00:08:05.790 --> 00:08:06.800
So this is just the blueprint.

149
00:08:06.800 --> 00:08:07.880
This is REST.

150
00:08:07.880 --> 00:08:12.100
This is, believe it or not, almost all the
services you use now are just like this.

151
00:08:12.100 --> 00:08:17.616
If you ever consumed any API, it was
probably like this, something close to it.

152
00:08:17.616 --> 00:08:21.820
Some people get kind of crazy with
their APIs but something like this.

153
00:08:21.820 --> 00:08:26.131
A good API that I can off the top of my
head think of that follows this pretty

154
00:08:26.131 --> 00:08:27.486
good is Parse.

155
00:08:27.486 --> 00:08:30.799
If you ever used Parse before,
they follow API, REST, to the t,

156
00:08:30.799 --> 00:08:32.386
they're really good at that.

157
00:08:34.989 --> 00:08:36.630
&gt;&gt; Speaker 1: And
then the last one is delete.

158
00:08:36.630 --> 00:08:39.550
So if we do delete request,
two slash lines ID, same thing,

159
00:08:39.550 --> 00:08:42.196
we need a ID here cuz we're
referencing an ID on the server.

160
00:08:42.196 --> 00:08:44.840
So we need to find it, and
what I expect to happen is for

161
00:08:44.840 --> 00:08:49.360
you to delete it from the collection
of resources, and return the thing

162
00:08:49.360 --> 00:08:53.839
that you just deleted with a response
of 200 and then just that one object.

163
00:08:55.620 --> 00:08:59.250
So that's the blueprint
of all these specific

164
00:08:59.250 --> 00:09:02.260
CRUD actions we can do on one resource,
yes.

165
00:09:02.260 --> 00:09:07.112
&gt;&gt; Speaker 2: Any opinion or
use of patch versus put?

166
00:09:07.112 --> 00:09:11.012
&gt;&gt; Speaker 1: I don't, I don't have an
opinion, I don't know the differences well

167
00:09:11.012 --> 00:09:14.002
enough to have a really good
opinion on the two things,

168
00:09:14.002 --> 00:09:18.111
but yeah, I don't really have an opinion
on that, I usually just use put.

169
00:09:22.271 --> 00:09:25.295
&gt;&gt; Speaker 1: Okay, so now that we have
our resources and our routes modded out,

170
00:09:25.295 --> 00:09:28.660
we can actually start building
this API with Express.

171
00:09:28.660 --> 00:09:30.490
So we're gonna use this
as our blueprint and

172
00:09:30.490 --> 00:09:33.529
we're actually gonna build out these
routes that serve these resources.

173
00:09:35.230 --> 00:09:38.408
And there's gonna be a little website on
the frontend that is gonna consume this so

174
00:09:38.408 --> 00:09:40.100
it's gonna be expecting this.

175
00:09:40.100 --> 00:09:43.443
And then for extra credit,
if you really know REST and

176
00:09:43.443 --> 00:09:48.346
you really want to get really good with
it, you can allow query params on the get

177
00:09:48.346 --> 00:09:51.793
request to allow filtering and
ordering of the lions.

178
00:09:51.793 --> 00:09:56.353
So what that means,
when I say query params,

179
00:09:56.353 --> 00:10:01.993
I mean if I were to come in here and
was like, on the URL and

180
00:10:01.993 --> 00:10:07.761
I was like, yeah, sorts by name or
something like that.

181
00:10:07.761 --> 00:10:11.323
And then you could do stuff like that,
so that's also part of REST.

182
00:10:11.323 --> 00:10:15.540
So if you know how to do that,
totally do that, but you don't have to.

